commit f3473495d0ecc61e4d768e88759e9a7f9a263770
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Wed Nov 22 03:19:29 2023 -0500

    üö∏ Fixes for ProUI popup, abort (#26308)

diff --git a/Marlin/src/lcd/e3v2/proui/menus.h b/Marlin/src/lcd/e3v2/proui/menus.h
index be0c881760..d1f5cdb698 100644
--- a/Marlin/src/lcd/e3v2/proui/menus.h
+++ b/Marlin/src/lcd/e3v2/proui/menus.h
@@ -93,7 +93,7 @@ public:
   MenuItem(uint8_t cicon, const char * const text=nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
   MenuItem(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
   void setFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
-  void setCaption(const char * const text = nullptr);
+  void setCaption(const char * const text=nullptr);
 };
 
 class MenuItemPtr: public MenuItem {

commit f7d5188b2f0a59b752fbabf6b96ff1ed4aed8112
Author: GHGiampy <83699429+GHGiampy@users.noreply.github.com>
Date:   Sat Aug 19 22:53:45 2023 +0200

    üêõ Fixes for ProUI, build rename (#26177)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/menus.h b/Marlin/src/lcd/e3v2/proui/menus.h
index 58dd92f0f6..be0c881760 100644
--- a/Marlin/src/lcd/e3v2/proui/menus.h
+++ b/Marlin/src/lcd/e3v2/proui/menus.h
@@ -183,13 +183,13 @@ void resetMenu(Menu* &menu);
 // Invalidate currentMenu to prepare for full menu drawing
 void invalidateMenu();
 
-//Update the Menu and Draw if it is valid
+// Update the Menu and Draw if it is valid
 void updateMenu(Menu* &menu);
 
-//Redraw the current Menu if it is valid
+// Redraw the current Menu if it is valid
 void ReDrawMenu(bool force=false);
 
-//Redraw selected menu item
+// Redraw selected menu item
 void ReDrawItem();
 
 // Clear menuItems array and free menuItems elements

commit f14f1be168ebf252dd458c935271aed1a57cfa0b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 30 19:16:00 2023 -0500

    üé® Standardize naming (ProUI) (#25982)

diff --git a/Marlin/src/lcd/e3v2/proui/menus.h b/Marlin/src/lcd/e3v2/proui/menus.h
index f0855e7073..58dd92f0f6 100644
--- a/Marlin/src/lcd/e3v2/proui/menus.h
+++ b/Marlin/src/lcd/e3v2/proui/menus.h
@@ -37,154 +37,154 @@
 #endif
 
 typedef struct {
-  int32_t MaxValue     = 0;        // Auxiliar max integer/scaled float value
-  int32_t MinValue     = 0;        // Auxiliar min integer/scaled float value
+  int32_t maxValue     = 0;        // Auxiliar max integer/scaled float value
+  int32_t minValue     = 0;        // Auxiliar min integer/scaled float value
   int8_t dp            = 0;        // Auxiliar decimal places
-  int32_t Value        = 0;        // Auxiliar integer / scaled float value
-  int16_t *P_Int       = nullptr;  // Auxiliar pointer to 16 bit integer variable
-  float *P_Float       = nullptr;  // Auxiliar pointer to float variable
-  void (*Apply)()      = nullptr;  // Auxiliar apply function
-  void (*LiveUpdate)() = nullptr;  // Auxiliar live update function
+  int32_t value        = 0;        // Auxiliar integer / scaled float value
+  int16_t *intPtr      = nullptr;  // Auxiliar pointer to 16 bit integer variable
+  float *floatPtr      = nullptr;  // Auxiliar pointer to float variable
+  void (*apply)()      = nullptr;  // Auxiliar apply function
+  void (*liveUpdate)() = nullptr;  // Auxiliar live update function
 } MenuData_t;
 
-extern MenuData_t MenuData;
+extern MenuData_t menuData;
 
 // Auxiliary Macros ===========================================================
 
 // Create and add a MenuItem object to the menu array
-#define SET_MENU(I,L,V) SetMenu(I, GET_TEXT_F(L), V)
-#define SET_MENU_F(I,L,V) SetMenu(I, F(L), V)
-#define SET_MENU_R(I,R,L,V) SetMenu(I, R, GET_TEXT_F(L), V)
+#define SET_MENU(I,L,V) setMenu(I, GET_TEXT_F(L), V)
+#define SET_MENU_F(I,L,V) setMenu(I, F(L), V)
+#define SET_MENU_R(I,R,L,V) setMenu(I, R, GET_TEXT_F(L), V)
 
-#define BACK_ITEM(H) MenuItemAdd(ICON_Back, GET_TEXT_F(MSG_BUTTON_BACK), onDrawMenuItem, H)
-#define MENU_ITEM(I,L,V...) MenuItemAdd(I, GET_TEXT_F(L), V)
-#define EDIT_ITEM(I,L,V...) EditItemAdd(I, GET_TEXT_F(L), V)
-#define MENU_ITEM_F(I,L,V...) MenuItemAdd(I, F(L), V)
-#define EDIT_ITEM_F(I,L,V...) EditItemAdd(I, F(L), V)
+#define BACK_ITEM(H) menuItemAdd(ICON_Back, GET_TEXT_F(MSG_BUTTON_BACK), onDrawMenuItem, H)
+#define MENU_ITEM(I,L,V...) menuItemAdd(I, GET_TEXT_F(L), V)
+#define EDIT_ITEM(I,L,V...) editItemAdd(I, GET_TEXT_F(L), V)
+#define MENU_ITEM_F(I,L,V...) menuItemAdd(I, F(L), V)
+#define EDIT_ITEM_F(I,L,V...) editItemAdd(I, F(L), V)
 
 // Menu Classes ===============================================================
 
-class CustomMenuItemClass;
-class MenuItemClass;
+class CustomMenuItem;
+class MenuItem;
 
-typedef void (*OnDrawCustomItem)(CustomMenuItemClass*  menuitem, int8_t line);
-typedef void (*OnDrawItem)(MenuItemClass*  menuitem, int8_t line);
+typedef void (*OnDrawCustomItem)(CustomMenuItem* menuitem, int8_t line);
+typedef void (*OnDrawItem)(MenuItem* menuitem, int8_t line);
 typedef void (*OnClickItem)();
 
-class CustomMenuItemClass {
+class CustomMenuItem {
 public:
   int8_t pos = 0;
   OnDrawItem onDraw = nullptr;
   void (*onClick)() = nullptr;
-  CustomMenuItemClass() {};
-  CustomMenuItemClass(OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
-  virtual ~CustomMenuItemClass(){};
+  CustomMenuItem() {};
+  CustomMenuItem(OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
+  virtual ~CustomMenuItem(){};
   virtual void draw(int8_t line);
   void redraw(bool erase=false);
 };
 
-class MenuItemClass: public CustomMenuItemClass {
+class MenuItem: public CustomMenuItem {
 public:
   uint8_t icon = 0;
   char caption[MENU_CHAR_LIMIT] = "";
   uint8_t frameid = 0;
   rect_t frame = {0};
-  using CustomMenuItemClass::CustomMenuItemClass;
-  MenuItemClass(uint8_t cicon, const char * const text=nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
-  MenuItemClass(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
-  void SetFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
-  void SetCaption(const char * const text = nullptr);
+  using CustomMenuItem::CustomMenuItem;
+  MenuItem(uint8_t cicon, const char * const text=nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
+  MenuItem(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
+  void setFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
+  void setCaption(const char * const text = nullptr);
 };
 
-class MenuItemPtrClass: public MenuItemClass {
+class MenuItemPtr: public MenuItem {
 public:
   void *value = nullptr;
-  using MenuItemClass::MenuItemClass;
-  MenuItemPtrClass(uint8_t cicon, const char * const text, OnDrawItem ondraw, OnClickItem onclick, void* val);
-  MenuItemPtrClass(uint8_t cicon, FSTR_P text, OnDrawItem ondraw, OnClickItem onclick, void* val) : MenuItemPtrClass(cicon, FTOP(text), ondraw, onclick, val){}
+  using MenuItem::MenuItem;
+  MenuItemPtr(uint8_t cicon, const char * const text, OnDrawItem ondraw, OnClickItem onclick, void* val);
+  MenuItemPtr(uint8_t cicon, FSTR_P text, OnDrawItem ondraw, OnClickItem onclick, void* val) : MenuItemPtr(cicon, FTOP(text), ondraw, onclick, val){}
 };
 
-class MenuClass {
+class Menu {
 public:
   int8_t topline = 0;
   int8_t selected = 0;
-  TitleClass MenuTitle;
-  MenuClass();
-  virtual ~MenuClass(){};
+  Title menuTitle;
+  Menu();
+  virtual ~Menu(){};
   inline int8_t line() { return selected - topline; };
   inline int8_t line(uint8_t pos) {return pos - topline; };
   int8_t count();
   virtual void draw();
   virtual void onScroll(bool dir);
   void onClick();
-  CustomMenuItemClass* SelectedItem();
-  static CustomMenuItemClass** Items();
+  CustomMenuItem* selectedItem();
+  static CustomMenuItem** items();
 };
-extern MenuClass *CurrentMenu;
-extern MenuClass *PreviousMenu;
+extern Menu *currentMenu;
+extern Menu *previousMenu;
 
 // Menuitem Drawing functions =================================================
 
-void Draw_Title(TitleClass* title);
-void Draw_Menu_Cursor(const int8_t line);
-void Erase_Menu_Cursor(const int8_t line);
-void Erase_Menu_Text(const int8_t line);
-void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false, bool selected=false);
-void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, FSTR_P label=nullptr, bool more=false, bool selected=false);
-void Draw_Chkb_Line(const uint8_t line, const bool checked);
-void Show_Chkb_Line(const bool checked);
-void Toggle_Chkb_Line(bool &checked);
-void Draw_Menu_IntValue(uint16_t bcolor, const uint8_t line, uint8_t iNum, const int32_t value=0);
-void onDrawMenuItem(MenuItemClass* menuitem, int8_t line);
-void onDrawSubMenu(MenuItemClass* menuitem, int8_t line);
-void onDrawIntMenu(MenuItemClass* menuitem, int8_t line, int32_t value);
-void onDrawPIntMenu(MenuItemClass* menuitem, int8_t line);
-void onDrawPInt8Menu(MenuItemClass* menuitem, int8_t line);
-void onDrawPInt32Menu(MenuItemClass* menuitem, int8_t line);
-void onDrawFloatMenu(MenuItemClass* menuitem, int8_t line, uint8_t dp, const float value);
-void onDrawPFloatMenu(MenuItemClass* menuitem, int8_t line, uint8_t dp);
-inline void onDrawPFloatMenu(MenuItemClass* menuitem, int8_t line) { onDrawPFloatMenu(menuitem, line, UNITFDIGITS); };
-inline void onDrawPFloat2Menu(MenuItemClass* menuitem, int8_t line) { onDrawPFloatMenu(menuitem, line, 2); };
-inline void onDrawPFloat3Menu(MenuItemClass* menuitem, int8_t line) { onDrawPFloatMenu(menuitem, line, 3); };
-inline void onDrawPFloat4Menu(MenuItemClass* menuitem, int8_t line) { onDrawPFloatMenu(menuitem, line, 4); };
-void onDrawChkbMenu(MenuItemClass* menuitem, int8_t line, bool checked);
-void onDrawChkbMenu(MenuItemClass* menuitem, int8_t line);
+void drawTitle(Title* aTitle);
+void drawMenuCursor(const int8_t line);
+void eraseMenuCursor(const int8_t line);
+void eraseMenuText(const int8_t line);
+void drawMenuLine(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false, bool selected=false);
+void drawMenuLine(const uint8_t line, const uint8_t icon=0, FSTR_P label=nullptr, bool more=false, bool selected=false);
+void drawCheckboxLine(const uint8_t line, const bool checked);
+void showCheckboxLine(const bool checked);
+void toggleCheckboxLine(bool &checked);
+void drawMenuIntValue(uint16_t bcolor, const uint8_t line, uint8_t iNum, const int32_t value=0);
+void onDrawMenuItem(MenuItem* menuitem, int8_t line);
+void onDrawSubMenu(MenuItem* menuitem, int8_t line);
+void onDrawIntMenu(MenuItem* menuitem, int8_t line, int32_t value);
+void onDrawPIntMenu(MenuItem* menuitem, int8_t line);
+void onDrawPInt8Menu(MenuItem* menuitem, int8_t line);
+void onDrawPInt32Menu(MenuItem* menuitem, int8_t line);
+void onDrawFloatMenu(MenuItem* menuitem, int8_t line, uint8_t dp, const float value);
+void onDrawPFloatMenu(MenuItem* menuitem, int8_t line, uint8_t dp);
+inline void onDrawPFloatMenu(MenuItem* menuitem, int8_t line) { onDrawPFloatMenu(menuitem, line, UNITFDIGITS); };
+inline void onDrawPFloat2Menu(MenuItem* menuitem, int8_t line) { onDrawPFloatMenu(menuitem, line, 2); };
+inline void onDrawPFloat3Menu(MenuItem* menuitem, int8_t line) { onDrawPFloatMenu(menuitem, line, 3); };
+inline void onDrawPFloat4Menu(MenuItem* menuitem, int8_t line) { onDrawPFloatMenu(menuitem, line, 4); };
+void onDrawChkbMenu(MenuItem* menuitem, int8_t line, bool checked);
+void onDrawChkbMenu(MenuItem* menuitem, int8_t line);
 
 // On click functions =========================================================
 
-void SetOnClick(uint8_t process, const int32_t lo, const int32_t hi, uint8_t dp, const int32_t val, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
-void SetValueOnClick(uint8_t process, const int32_t lo, const int32_t hi, const int32_t val, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
-void SetValueOnClick(uint8_t process, const float lo, const float hi, uint8_t dp, const float val, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
-void SetIntOnClick(const int32_t lo, const int32_t hi, const int32_t val, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
-void SetPIntOnClick(const int32_t lo, const int32_t hi, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
-void SetFloatOnClick(const float lo, const float hi, uint8_t dp, const float val, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
-void SetPFloatOnClick(const float lo, const float hi, uint8_t dp, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
+void setOnClick(uint8_t process, const int32_t lo, const int32_t hi, uint8_t dp, const int32_t val, void (*apply)()=nullptr, void (*liveUpdate)()=nullptr);
+void setValueOnClick(uint8_t process, const int32_t lo, const int32_t hi, const int32_t val, void (*apply)()=nullptr, void (*liveUpdate)()=nullptr);
+void setValueOnClick(uint8_t process, const float lo, const float hi, uint8_t dp, const float val, void (*apply)()=nullptr, void (*liveUpdate)()=nullptr);
+void setIntOnClick(const int32_t lo, const int32_t hi, const int32_t val, void (*apply)()=nullptr, void (*liveUpdate)()=nullptr);
+void setPIntOnClick(const int32_t lo, const int32_t hi, void (*apply)()=nullptr, void (*liveUpdate)()=nullptr);
+void setFloatOnClick(const float lo, const float hi, uint8_t dp, const float val, void (*apply)()=nullptr, void (*liveUpdate)()=nullptr);
+void setPFloatOnClick(const float lo, const float hi, uint8_t dp, void (*apply)()=nullptr, void (*liveUpdate)()=nullptr);
 
 // HMI user control functions =================================================
 
-void HMI_Menu();
-void HMI_SetDraw();
-void HMI_SetNoDraw();
-void HMI_SetPInt();
-void HMI_SetPFloat();
+void hmiMenu();
+void hmiSetDraw();
+void hmiSetNoDraw();
+void hmiSetPInt();
+void hmiSetPFloat();
 
 // Menu auxiliary functions ===================================================
 
 // Initialize menu
-void InitMenu();
+void initMenu();
 
 // Create a new menu
-bool SetMenu(MenuClass* &menu, FSTR_P title, int8_t totalitems);
-bool SetMenu(MenuClass* &menu, frame_rect_t cn, FSTR_P title, int8_t totalitems);
+bool setMenu(Menu* &menu, FSTR_P fTitle, int8_t totalitems);
+bool setMenu(Menu* &menu, frame_rect_t cn, FSTR_P fTitle, int8_t totalitems);
 
 // Reset top line and selected item
-void ResetMenu(MenuClass* &menu);
+void resetMenu(Menu* &menu);
 
-// Invalidate CurrentMenu to prepare for full menu drawing
-void InvalidateMenu();
+// Invalidate currentMenu to prepare for full menu drawing
+void invalidateMenu();
 
 //Update the Menu and Draw if it is valid
-void UpdateMenu(MenuClass* &menu);
+void updateMenu(Menu* &menu);
 
 //Redraw the current Menu if it is valid
 void ReDrawMenu(bool force=false);
@@ -192,23 +192,23 @@ void ReDrawMenu(bool force=false);
 //Redraw selected menu item
 void ReDrawItem();
 
-// Clear MenuItems array and free MenuItems elements
-void MenuItemsClear();
+// Clear menuItems array and free menuItems elements
+void menuItemsClear();
 
-// Prepare MenuItems array
-void MenuItemsPrepare(int8_t totalitems);
+// Prepare menuItems array
+void menuItemsPrepare(int8_t totalitems);
 
 // Is the current menu = menu?
-bool IsMenu(MenuClass* menu);
+bool isMenu(Menu* menu);
 
-// Add elements to the MenuItems array
-CustomMenuItemClass* MenuItemAdd(OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
-MenuItemClass* MenuItemAdd(uint8_t cicon, const char * const text=nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
-inline MenuItemClass* MenuItemAdd(uint8_t cicon, FSTR_P text=nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr) {
-  return MenuItemAdd(cicon, FTOP(text), ondraw, onclick);
+// Add elements to the menuItems array
+CustomMenuItem* menuItemAdd(OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
+MenuItem* menuItemAdd(uint8_t cicon, const char * const text=nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
+inline MenuItem* menuItemAdd(uint8_t cicon, FSTR_P text=nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr) {
+  return menuItemAdd(cicon, FTOP(text), ondraw, onclick);
 }
-MenuItemClass* MenuItemAdd(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
-MenuItemClass* EditItemAdd(uint8_t cicon, const char * const text, OnDrawItem ondraw, OnClickItem onclick, void* val);
-inline MenuItemClass* EditItemAdd(uint8_t cicon, FSTR_P text, OnDrawItem ondraw, OnClickItem onclick, void* val) {
-  return EditItemAdd(cicon, FTOP(text), ondraw, onclick, val);
+MenuItem* menuItemAdd(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
+MenuItem* editItemAdd(uint8_t cicon, const char * const text, OnDrawItem ondraw, OnClickItem onclick, void* val);
+inline MenuItem* editItemAdd(uint8_t cicon, FSTR_P text, OnDrawItem ondraw, OnClickItem onclick, void* val) {
+  return editItemAdd(cicon, FTOP(text), ondraw, onclick, val);
 }

commit 858916d628526b5d56c34c5c9663e3535bfc7788
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Fri Jun 23 04:57:22 2023 -0500

    üö∏ Update DWIN ProUI (#26003)

diff --git a/Marlin/src/lcd/e3v2/proui/menus.h b/Marlin/src/lcd/e3v2/proui/menus.h
index 072bf7584d..f0855e7073 100644
--- a/Marlin/src/lcd/e3v2/proui/menus.h
+++ b/Marlin/src/lcd/e3v2/proui/menus.h
@@ -24,14 +24,17 @@
 /**
  * Menu functions for ProUI
  * Author: Miguel A. Risco-Castillo
- * Version: 1.9.1
- * Date: 2022/12/02
+ * Version: 1.10.1
+ * Date: 2022/05/01
  */
 
 #include "dwinui.h"
 
 #define MENU_CHAR_LIMIT  24
-#define MENU_MAX_ITEMS   TERN(SDSORT_LIMIT, SDSORT_LIMIT, 64)
+
+#ifndef MENU_MAX_ITEMS
+  #define MENU_MAX_ITEMS 100
+#endif
 
 typedef struct {
   int32_t MaxValue     = 0;        // Auxiliar max integer/scaled float value
@@ -123,7 +126,6 @@ extern MenuClass *PreviousMenu;
 // Menuitem Drawing functions =================================================
 
 void Draw_Title(TitleClass* title);
-void Draw_Menu(MenuClass* menu);
 void Draw_Menu_Cursor(const int8_t line);
 void Erase_Menu_Cursor(const int8_t line);
 void Erase_Menu_Text(const int8_t line);
@@ -150,13 +152,13 @@ void onDrawChkbMenu(MenuItemClass* menuitem, int8_t line);
 
 // On click functions =========================================================
 
-void SetOnClick(uint8_t process, const int32_t lo, const int32_t hi, uint8_t dp, const int32_t val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
-void SetValueOnClick(uint8_t process, const int32_t lo, const int32_t hi, const int32_t val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
-void SetValueOnClick(uint8_t process, const float lo, const float hi, uint8_t dp, const float val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
-void SetIntOnClick(const int32_t lo, const int32_t hi, const int32_t val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
-void SetPIntOnClick(const int32_t lo, const int32_t hi, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
-void SetFloatOnClick(const float lo, const float hi, uint8_t dp, const float val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
-void SetPFloatOnClick(const float lo, const float hi, uint8_t dp, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
+void SetOnClick(uint8_t process, const int32_t lo, const int32_t hi, uint8_t dp, const int32_t val, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
+void SetValueOnClick(uint8_t process, const int32_t lo, const int32_t hi, const int32_t val, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
+void SetValueOnClick(uint8_t process, const float lo, const float hi, uint8_t dp, const float val, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
+void SetIntOnClick(const int32_t lo, const int32_t hi, const int32_t val, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
+void SetPIntOnClick(const int32_t lo, const int32_t hi, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
+void SetFloatOnClick(const float lo, const float hi, uint8_t dp, const float val, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
+void SetPFloatOnClick(const float lo, const float hi, uint8_t dp, void (*Apply)()=nullptr, void (*LiveUpdate)()=nullptr);
 
 // HMI user control functions =================================================
 
@@ -175,6 +177,9 @@ void InitMenu();
 bool SetMenu(MenuClass* &menu, FSTR_P title, int8_t totalitems);
 bool SetMenu(MenuClass* &menu, frame_rect_t cn, FSTR_P title, int8_t totalitems);
 
+// Reset top line and selected item
+void ResetMenu(MenuClass* &menu);
+
 // Invalidate CurrentMenu to prepare for full menu drawing
 void InvalidateMenu();
 
@@ -182,7 +187,10 @@ void InvalidateMenu();
 void UpdateMenu(MenuClass* &menu);
 
 //Redraw the current Menu if it is valid
-void ReDrawMenu(bool force = false);
+void ReDrawMenu(bool force=false);
+
+//Redraw selected menu item
+void ReDrawItem();
 
 // Clear MenuItems array and free MenuItems elements
 void MenuItemsClear();
@@ -196,7 +204,7 @@ bool IsMenu(MenuClass* menu);
 // Add elements to the MenuItems array
 CustomMenuItemClass* MenuItemAdd(OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
 MenuItemClass* MenuItemAdd(uint8_t cicon, const char * const text=nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
-inline MenuItemClass* MenuItemAdd(uint8_t cicon, FSTR_P text = nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr) {
+inline MenuItemClass* MenuItemAdd(uint8_t cicon, FSTR_P text=nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr) {
   return MenuItemAdd(cicon, FTOP(text), ondraw, onclick);
 }
 MenuItemClass* MenuItemAdd(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);

commit b3f65b674f23db5c32e4d7e96ad2dff97c77c717
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Tue Jan 17 18:41:36 2023 -0500

    üö∏ ProUI MPC menu (#25232)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/menus.h b/Marlin/src/lcd/e3v2/proui/menus.h
index 33712f8959..072bf7584d 100644
--- a/Marlin/src/lcd/e3v2/proui/menus.h
+++ b/Marlin/src/lcd/e3v2/proui/menus.h
@@ -19,28 +19,14 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
+#pragma once
 
 /**
  * Menu functions for ProUI
  * Author: Miguel A. Risco-Castillo
  * Version: 1.9.1
  * Date: 2022/12/02
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
  */
-#pragma once
 
 #include "dwinui.h"
 

commit 5fd5cb02f6b26f32fd9b49fb37e53a93531da98c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 14 07:44:57 2023 -0600

    ‚úèÔ∏è  ProUI followup

diff --git a/Marlin/src/lcd/e3v2/proui/menus.h b/Marlin/src/lcd/e3v2/proui/menus.h
index 9bc9d702bd..33712f8959 100644
--- a/Marlin/src/lcd/e3v2/proui/menus.h
+++ b/Marlin/src/lcd/e3v2/proui/menus.h
@@ -145,7 +145,7 @@ void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const
 void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, FSTR_P label=nullptr, bool more=false, bool selected=false);
 void Draw_Chkb_Line(const uint8_t line, const bool checked);
 void Show_Chkb_Line(const bool checked);
-void Toogle_Chkb_Line(bool &checked);
+void Toggle_Chkb_Line(bool &checked);
 void Draw_Menu_IntValue(uint16_t bcolor, const uint8_t line, uint8_t iNum, const int32_t value=0);
 void onDrawMenuItem(MenuItemClass* menuitem, int8_t line);
 void onDrawSubMenu(MenuItemClass* menuitem, int8_t line);

commit c66b3cf8a429c427c014f33171407c634da735f1
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Sun Jan 8 04:22:21 2023 -0500

    üö∏ ProUI updates (#25176)

diff --git a/Marlin/src/lcd/e3v2/proui/menus.h b/Marlin/src/lcd/e3v2/proui/menus.h
index 6a5f8786ca..9bc9d702bd 100644
--- a/Marlin/src/lcd/e3v2/proui/menus.h
+++ b/Marlin/src/lcd/e3v2/proui/menus.h
@@ -23,8 +23,8 @@
 /**
  * Menu functions for ProUI
  * Author: Miguel A. Risco-Castillo
- * Version: 1.5.1
- * Date: 2022/05/23
+ * Version: 1.9.1
+ * Date: 2022/12/02
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
@@ -44,6 +44,9 @@
 
 #include "dwinui.h"
 
+#define MENU_CHAR_LIMIT  24
+#define MENU_MAX_ITEMS   TERN(SDSORT_LIMIT, SDSORT_LIMIT, 64)
+
 typedef struct {
   int32_t MaxValue     = 0;        // Auxiliar max integer/scaled float value
   int32_t MinValue     = 0;        // Auxiliar min integer/scaled float value
@@ -56,46 +59,60 @@ typedef struct {
 } MenuData_t;
 
 extern MenuData_t MenuData;
-extern void (*onCursorErase)(const int8_t line);
-extern void (*onCursorDraw)(const int8_t line);
 
 // Auxiliary Macros ===========================================================
 
 // Create and add a MenuItem object to the menu array
-#define BACK_ITEM(H) MenuItemsAdd(ICON_Back, GET_TEXT_F(MSG_BUTTON_BACK), onDrawMenuItem, H)
-#define MENU_ITEM(V...) MenuItemsAdd(V)
-#define EDIT_ITEM(V...) MenuItemsAdd(V)
-#define MENU_ITEM_F(I,L,V...) MenuItemsAdd(I, GET_TEXT_F(L), V)
-#define EDIT_ITEM_F(I,L,V...) MenuItemsAdd(I, GET_TEXT_F(L), V)
+#define SET_MENU(I,L,V) SetMenu(I, GET_TEXT_F(L), V)
+#define SET_MENU_F(I,L,V) SetMenu(I, F(L), V)
+#define SET_MENU_R(I,R,L,V) SetMenu(I, R, GET_TEXT_F(L), V)
+
+#define BACK_ITEM(H) MenuItemAdd(ICON_Back, GET_TEXT_F(MSG_BUTTON_BACK), onDrawMenuItem, H)
+#define MENU_ITEM(I,L,V...) MenuItemAdd(I, GET_TEXT_F(L), V)
+#define EDIT_ITEM(I,L,V...) EditItemAdd(I, GET_TEXT_F(L), V)
+#define MENU_ITEM_F(I,L,V...) MenuItemAdd(I, F(L), V)
+#define EDIT_ITEM_F(I,L,V...) EditItemAdd(I, F(L), V)
 
 // Menu Classes ===============================================================
 
-class MenuItemClass {
-protected:
+class CustomMenuItemClass;
+class MenuItemClass;
+
+typedef void (*OnDrawCustomItem)(CustomMenuItemClass*  menuitem, int8_t line);
+typedef void (*OnDrawItem)(MenuItemClass*  menuitem, int8_t line);
+typedef void (*OnClickItem)();
+
+class CustomMenuItemClass {
 public:
   int8_t pos = 0;
+  OnDrawItem onDraw = nullptr;
+  void (*onClick)() = nullptr;
+  CustomMenuItemClass() {};
+  CustomMenuItemClass(OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
+  virtual ~CustomMenuItemClass(){};
+  virtual void draw(int8_t line);
+  void redraw(bool erase=false);
+};
+
+class MenuItemClass: public CustomMenuItemClass {
+public:
   uint8_t icon = 0;
-  char caption[32] = "";
+  char caption[MENU_CHAR_LIMIT] = "";
   uint8_t frameid = 0;
   rect_t frame = {0};
-  void (*onDraw)(MenuItemClass* menuitem, int8_t line) = nullptr;
-  void (*onClick)() = nullptr;
-  MenuItemClass() {};
-  MenuItemClass(uint8_t cicon, const char * const text=nullptr, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr);
-  // MenuItemClass(uint8_t cicon, FSTR_P text = nullptr, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr) : MenuItemClass(cicon, FTOP(text), ondraw, onclick){}
-  MenuItemClass(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr);
+  using CustomMenuItemClass::CustomMenuItemClass;
+  MenuItemClass(uint8_t cicon, const char * const text=nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
+  MenuItemClass(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
   void SetFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
-  virtual ~MenuItemClass(){};
-  virtual void draw(int8_t line);
-  void redraw();
+  void SetCaption(const char * const text = nullptr);
 };
 
 class MenuItemPtrClass: public MenuItemClass {
 public:
   void *value = nullptr;
   using MenuItemClass::MenuItemClass;
-  MenuItemPtrClass(uint8_t cicon, const char * const text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val);
-  MenuItemPtrClass(uint8_t cicon, FSTR_P text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val) : MenuItemPtrClass(cicon, FTOP(text), ondraw, onclick, val){}
+  MenuItemPtrClass(uint8_t cicon, const char * const text, OnDrawItem ondraw, OnClickItem onclick, void* val);
+  MenuItemPtrClass(uint8_t cicon, FSTR_P text, OnDrawItem ondraw, OnClickItem onclick, void* val) : MenuItemPtrClass(cicon, FTOP(text), ondraw, onclick, val){}
 };
 
 class MenuClass {
@@ -111,12 +128,11 @@ public:
   virtual void draw();
   virtual void onScroll(bool dir);
   void onClick();
-  MenuItemClass* SelectedItem();
-  static MenuItemClass** Items();
+  CustomMenuItemClass* SelectedItem();
+  static CustomMenuItemClass** Items();
 };
 extern MenuClass *CurrentMenu;
 extern MenuClass *PreviousMenu;
-extern void (*onMenuDraw)(MenuClass* menu);
 
 // Menuitem Drawing functions =================================================
 
@@ -124,8 +140,12 @@ void Draw_Title(TitleClass* title);
 void Draw_Menu(MenuClass* menu);
 void Draw_Menu_Cursor(const int8_t line);
 void Erase_Menu_Cursor(const int8_t line);
-void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false);
+void Erase_Menu_Text(const int8_t line);
+void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false, bool selected=false);
+void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, FSTR_P label=nullptr, bool more=false, bool selected=false);
 void Draw_Chkb_Line(const uint8_t line, const bool checked);
+void Show_Chkb_Line(const bool checked);
+void Toogle_Chkb_Line(bool &checked);
 void Draw_Menu_IntValue(uint16_t bcolor, const uint8_t line, uint8_t iNum, const int32_t value=0);
 void onDrawMenuItem(MenuItemClass* menuitem, int8_t line);
 void onDrawSubMenu(MenuItemClass* menuitem, int8_t line);
@@ -134,9 +154,11 @@ void onDrawPIntMenu(MenuItemClass* menuitem, int8_t line);
 void onDrawPInt8Menu(MenuItemClass* menuitem, int8_t line);
 void onDrawPInt32Menu(MenuItemClass* menuitem, int8_t line);
 void onDrawFloatMenu(MenuItemClass* menuitem, int8_t line, uint8_t dp, const float value);
-void onDrawPFloatMenu(MenuItemClass* menuitem, int8_t line);
-void onDrawPFloat2Menu(MenuItemClass* menuitem, int8_t line);
-void onDrawPFloat3Menu(MenuItemClass* menuitem, int8_t line);
+void onDrawPFloatMenu(MenuItemClass* menuitem, int8_t line, uint8_t dp);
+inline void onDrawPFloatMenu(MenuItemClass* menuitem, int8_t line) { onDrawPFloatMenu(menuitem, line, UNITFDIGITS); };
+inline void onDrawPFloat2Menu(MenuItemClass* menuitem, int8_t line) { onDrawPFloatMenu(menuitem, line, 2); };
+inline void onDrawPFloat3Menu(MenuItemClass* menuitem, int8_t line) { onDrawPFloatMenu(menuitem, line, 3); };
+inline void onDrawPFloat4Menu(MenuItemClass* menuitem, int8_t line) { onDrawPFloatMenu(menuitem, line, 4); };
 void onDrawChkbMenu(MenuItemClass* menuitem, int8_t line, bool checked);
 void onDrawChkbMenu(MenuItemClass* menuitem, int8_t line);
 
@@ -153,22 +175,28 @@ void SetPFloatOnClick(const float lo, const float hi, uint8_t dp, void (*Apply)(
 // HMI user control functions =================================================
 
 void HMI_Menu();
-void HMI_SetInt();
+void HMI_SetDraw();
+void HMI_SetNoDraw();
 void HMI_SetPInt();
-void HMI_SetIntNoDraw();
-void HMI_SetFloat();
 void HMI_SetPFloat();
 
 // Menu auxiliary functions ===================================================
 
+// Initialize menu
+void InitMenu();
+
 // Create a new menu
 bool SetMenu(MenuClass* &menu, FSTR_P title, int8_t totalitems);
+bool SetMenu(MenuClass* &menu, frame_rect_t cn, FSTR_P title, int8_t totalitems);
+
+// Invalidate CurrentMenu to prepare for full menu drawing
+void InvalidateMenu();
 
 //Update the Menu and Draw if it is valid
 void UpdateMenu(MenuClass* &menu);
 
 //Redraw the current Menu if it is valid
-void ReDrawMenu(const bool force=false);
+void ReDrawMenu(bool force = false);
 
 // Clear MenuItems array and free MenuItems elements
 void MenuItemsClear();
@@ -176,13 +204,17 @@ void MenuItemsClear();
 // Prepare MenuItems array
 void MenuItemsPrepare(int8_t totalitems);
 
+// Is the current menu = menu?
+bool IsMenu(MenuClass* menu);
+
 // Add elements to the MenuItems array
-MenuItemClass* MenuItemsAdd(uint8_t cicon, const char * const text=nullptr, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr);
-inline MenuItemClass* MenuItemsAdd(uint8_t cicon, FSTR_P text = nullptr, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr) {
-  return MenuItemsAdd(cicon, FTOP(text), ondraw, onclick);
+CustomMenuItemClass* MenuItemAdd(OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
+MenuItemClass* MenuItemAdd(uint8_t cicon, const char * const text=nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
+inline MenuItemClass* MenuItemAdd(uint8_t cicon, FSTR_P text = nullptr, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr) {
+  return MenuItemAdd(cicon, FTOP(text), ondraw, onclick);
 }
-MenuItemClass* MenuItemsAdd(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr);
-MenuItemClass* MenuItemsAdd(uint8_t cicon, const char * const text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val);
-inline MenuItemClass* MenuItemsAdd(uint8_t cicon, FSTR_P text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val) {
-  return MenuItemsAdd(cicon, FTOP(text), ondraw, onclick, val);
+MenuItemClass* MenuItemAdd(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, OnDrawItem ondraw=nullptr, OnClickItem onclick=nullptr);
+MenuItemClass* EditItemAdd(uint8_t cicon, const char * const text, OnDrawItem ondraw, OnClickItem onclick, void* val);
+inline MenuItemClass* EditItemAdd(uint8_t cicon, FSTR_P text, OnDrawItem ondraw, OnClickItem onclick, void* val) {
+  return EditItemAdd(cicon, FTOP(text), ondraw, onclick, val);
 }

commit 8fb54d4621c5f571d613fca2943393d4a95cb8e4
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Thu Jul 14 00:00:33 2022 -0500

    üö∏ Fix and update ProUI (#24477)

diff --git a/Marlin/src/lcd/e3v2/proui/menus.h b/Marlin/src/lcd/e3v2/proui/menus.h
index d4514d1732..6a5f8786ca 100644
--- a/Marlin/src/lcd/e3v2/proui/menus.h
+++ b/Marlin/src/lcd/e3v2/proui/menus.h
@@ -23,8 +23,8 @@
 /**
  * Menu functions for ProUI
  * Author: Miguel A. Risco-Castillo
- * Version: 1.4.1
- * Date: 2022/04/14
+ * Version: 1.5.1
+ * Date: 2022/05/23
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
@@ -168,7 +168,7 @@ bool SetMenu(MenuClass* &menu, FSTR_P title, int8_t totalitems);
 void UpdateMenu(MenuClass* &menu);
 
 //Redraw the current Menu if it is valid
-void ReDrawMenu();
+void ReDrawMenu(const bool force=false);
 
 // Clear MenuItems array and free MenuItems elements
 void MenuItemsClear();

commit a65e4edb1c794dcd22980f3cce9bf2993da1514b
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Tue May 17 15:44:30 2022 -0500

    üö∏ ProUI APRIL2022 updates (#24084)

diff --git a/Marlin/src/lcd/e3v2/proui/menus.h b/Marlin/src/lcd/e3v2/proui/menus.h
index 0147c1616b..d4514d1732 100644
--- a/Marlin/src/lcd/e3v2/proui/menus.h
+++ b/Marlin/src/lcd/e3v2/proui/menus.h
@@ -23,8 +23,8 @@
 /**
  * Menu functions for ProUI
  * Author: Miguel A. Risco-Castillo
- * Version: 1.2.1
- * Date: 2022/02/25
+ * Version: 1.4.1
+ * Date: 2022/04/14
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
@@ -56,8 +56,70 @@ typedef struct {
 } MenuData_t;
 
 extern MenuData_t MenuData;
+extern void (*onCursorErase)(const int8_t line);
+extern void (*onCursorDraw)(const int8_t line);
+
+// Auxiliary Macros ===========================================================
+
+// Create and add a MenuItem object to the menu array
+#define BACK_ITEM(H) MenuItemsAdd(ICON_Back, GET_TEXT_F(MSG_BUTTON_BACK), onDrawMenuItem, H)
+#define MENU_ITEM(V...) MenuItemsAdd(V)
+#define EDIT_ITEM(V...) MenuItemsAdd(V)
+#define MENU_ITEM_F(I,L,V...) MenuItemsAdd(I, GET_TEXT_F(L), V)
+#define EDIT_ITEM_F(I,L,V...) MenuItemsAdd(I, GET_TEXT_F(L), V)
+
+// Menu Classes ===============================================================
+
+class MenuItemClass {
+protected:
+public:
+  int8_t pos = 0;
+  uint8_t icon = 0;
+  char caption[32] = "";
+  uint8_t frameid = 0;
+  rect_t frame = {0};
+  void (*onDraw)(MenuItemClass* menuitem, int8_t line) = nullptr;
+  void (*onClick)() = nullptr;
+  MenuItemClass() {};
+  MenuItemClass(uint8_t cicon, const char * const text=nullptr, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr);
+  // MenuItemClass(uint8_t cicon, FSTR_P text = nullptr, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr) : MenuItemClass(cicon, FTOP(text), ondraw, onclick){}
+  MenuItemClass(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr);
+  void SetFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
+  virtual ~MenuItemClass(){};
+  virtual void draw(int8_t line);
+  void redraw();
+};
+
+class MenuItemPtrClass: public MenuItemClass {
+public:
+  void *value = nullptr;
+  using MenuItemClass::MenuItemClass;
+  MenuItemPtrClass(uint8_t cicon, const char * const text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val);
+  MenuItemPtrClass(uint8_t cicon, FSTR_P text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val) : MenuItemPtrClass(cicon, FTOP(text), ondraw, onclick, val){}
+};
+
+class MenuClass {
+public:
+  int8_t topline = 0;
+  int8_t selected = 0;
+  TitleClass MenuTitle;
+  MenuClass();
+  virtual ~MenuClass(){};
+  inline int8_t line() { return selected - topline; };
+  inline int8_t line(uint8_t pos) {return pos - topline; };
+  int8_t count();
+  virtual void draw();
+  virtual void onScroll(bool dir);
+  void onClick();
+  MenuItemClass* SelectedItem();
+  static MenuItemClass** Items();
+};
+extern MenuClass *CurrentMenu;
+extern MenuClass *PreviousMenu;
+extern void (*onMenuDraw)(MenuClass* menu);
 
 // Menuitem Drawing functions =================================================
+
 void Draw_Title(TitleClass* title);
 void Draw_Menu(MenuClass* menu);
 void Draw_Menu_Cursor(const int8_t line);
@@ -74,9 +136,12 @@ void onDrawPInt32Menu(MenuItemClass* menuitem, int8_t line);
 void onDrawFloatMenu(MenuItemClass* menuitem, int8_t line, uint8_t dp, const float value);
 void onDrawPFloatMenu(MenuItemClass* menuitem, int8_t line);
 void onDrawPFloat2Menu(MenuItemClass* menuitem, int8_t line);
+void onDrawPFloat3Menu(MenuItemClass* menuitem, int8_t line);
 void onDrawChkbMenu(MenuItemClass* menuitem, int8_t line, bool checked);
+void onDrawChkbMenu(MenuItemClass* menuitem, int8_t line);
 
 // On click functions =========================================================
+
 void SetOnClick(uint8_t process, const int32_t lo, const int32_t hi, uint8_t dp, const int32_t val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
 void SetValueOnClick(uint8_t process, const int32_t lo, const int32_t hi, const int32_t val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
 void SetValueOnClick(uint8_t process, const float lo, const float hi, uint8_t dp, const float val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
@@ -86,9 +151,38 @@ void SetFloatOnClick(const float lo, const float hi, uint8_t dp, const float val
 void SetPFloatOnClick(const float lo, const float hi, uint8_t dp, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
 
 // HMI user control functions =================================================
+
 void HMI_Menu();
 void HMI_SetInt();
 void HMI_SetPInt();
 void HMI_SetIntNoDraw();
 void HMI_SetFloat();
 void HMI_SetPFloat();
+
+// Menu auxiliary functions ===================================================
+
+// Create a new menu
+bool SetMenu(MenuClass* &menu, FSTR_P title, int8_t totalitems);
+
+//Update the Menu and Draw if it is valid
+void UpdateMenu(MenuClass* &menu);
+
+//Redraw the current Menu if it is valid
+void ReDrawMenu();
+
+// Clear MenuItems array and free MenuItems elements
+void MenuItemsClear();
+
+// Prepare MenuItems array
+void MenuItemsPrepare(int8_t totalitems);
+
+// Add elements to the MenuItems array
+MenuItemClass* MenuItemsAdd(uint8_t cicon, const char * const text=nullptr, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr);
+inline MenuItemClass* MenuItemsAdd(uint8_t cicon, FSTR_P text = nullptr, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr) {
+  return MenuItemsAdd(cicon, FTOP(text), ondraw, onclick);
+}
+MenuItemClass* MenuItemsAdd(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr);
+MenuItemClass* MenuItemsAdd(uint8_t cicon, const char * const text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val);
+inline MenuItemClass* MenuItemsAdd(uint8_t cicon, FSTR_P text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val) {
+  return MenuItemsAdd(cicon, FTOP(text), ondraw, onclick, val);
+}

commit 79b38e0e14074b52e0aeb98b08a686a99a9b1aad
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Fri Mar 11 15:06:49 2022 -0500

    üö∏ Update Ender3 V2/S1 Pro UI (#23878)

diff --git a/Marlin/src/lcd/e3v2/proui/menus.h b/Marlin/src/lcd/e3v2/proui/menus.h
new file mode 100644
index 0000000000..0147c1616b
--- /dev/null
+++ b/Marlin/src/lcd/e3v2/proui/menus.h
@@ -0,0 +1,94 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2022 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * Menu functions for ProUI
+ * Author: Miguel A. Risco-Castillo
+ * Version: 1.2.1
+ * Date: 2022/02/25
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+#include "dwinui.h"
+
+typedef struct {
+  int32_t MaxValue     = 0;        // Auxiliar max integer/scaled float value
+  int32_t MinValue     = 0;        // Auxiliar min integer/scaled float value
+  int8_t dp            = 0;        // Auxiliar decimal places
+  int32_t Value        = 0;        // Auxiliar integer / scaled float value
+  int16_t *P_Int       = nullptr;  // Auxiliar pointer to 16 bit integer variable
+  float *P_Float       = nullptr;  // Auxiliar pointer to float variable
+  void (*Apply)()      = nullptr;  // Auxiliar apply function
+  void (*LiveUpdate)() = nullptr;  // Auxiliar live update function
+} MenuData_t;
+
+extern MenuData_t MenuData;
+
+// Menuitem Drawing functions =================================================
+void Draw_Title(TitleClass* title);
+void Draw_Menu(MenuClass* menu);
+void Draw_Menu_Cursor(const int8_t line);
+void Erase_Menu_Cursor(const int8_t line);
+void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false);
+void Draw_Chkb_Line(const uint8_t line, const bool checked);
+void Draw_Menu_IntValue(uint16_t bcolor, const uint8_t line, uint8_t iNum, const int32_t value=0);
+void onDrawMenuItem(MenuItemClass* menuitem, int8_t line);
+void onDrawSubMenu(MenuItemClass* menuitem, int8_t line);
+void onDrawIntMenu(MenuItemClass* menuitem, int8_t line, int32_t value);
+void onDrawPIntMenu(MenuItemClass* menuitem, int8_t line);
+void onDrawPInt8Menu(MenuItemClass* menuitem, int8_t line);
+void onDrawPInt32Menu(MenuItemClass* menuitem, int8_t line);
+void onDrawFloatMenu(MenuItemClass* menuitem, int8_t line, uint8_t dp, const float value);
+void onDrawPFloatMenu(MenuItemClass* menuitem, int8_t line);
+void onDrawPFloat2Menu(MenuItemClass* menuitem, int8_t line);
+void onDrawChkbMenu(MenuItemClass* menuitem, int8_t line, bool checked);
+
+// On click functions =========================================================
+void SetOnClick(uint8_t process, const int32_t lo, const int32_t hi, uint8_t dp, const int32_t val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
+void SetValueOnClick(uint8_t process, const int32_t lo, const int32_t hi, const int32_t val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
+void SetValueOnClick(uint8_t process, const float lo, const float hi, uint8_t dp, const float val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
+void SetIntOnClick(const int32_t lo, const int32_t hi, const int32_t val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
+void SetPIntOnClick(const int32_t lo, const int32_t hi, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
+void SetFloatOnClick(const float lo, const float hi, uint8_t dp, const float val, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
+void SetPFloatOnClick(const float lo, const float hi, uint8_t dp, void (*Apply)() = nullptr, void (*LiveUpdate)() = nullptr);
+
+// HMI user control functions =================================================
+void HMI_Menu();
+void HMI_SetInt();
+void HMI_SetPInt();
+void HMI_SetIntNoDraw();
+void HMI_SetFloat();
+void HMI_SetPFloat();
