commit 521e7eafce4921a36532e0a89f2cc7417c2c4e21
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue May 21 15:42:56 2024 -0500

    üßë‚Äçüíª Clarify media "mounted"

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index abd32aa88c..66792ce5ca 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -131,22 +131,22 @@ void AnycubicTFT::onCommandScan() {
   if (tftBufLen) {
     --tftBufLen;
     tftBufIndR = (tftBufIndR + 1) % (TFTBUFSIZE);
   }
 }
 
 void AnycubicTFT::onKillTFT() {
   SENDLINE_DBG_PGM("J11", "TFT Serial Debug: Kill command... J11");
 }
 
-void AnycubicTFT::onSDCardStateChange(bool isInserted) {
-  DEBUG_ECHOLNPGM("TFT Serial Debug: onSDCardStateChange event triggered...", isInserted);
+void AnycubicTFT::onSDCardStateChange(bool isMounted) {
+  DEBUG_ECHOLNPGM("TFT Serial Debug: onSDCardStateChange event triggered...", isMounted);
   doSDCardStateCheck();
 }
 
 void AnycubicTFT::onSDCardError() {
   DEBUG_ECHOLNPGM("TFT Serial Debug: onSDCardError event triggered...");
   SENDLINE_DBG_PGM("J21", "TFT Serial Debug: On SD Card Error ... J21");
 }
 
 void AnycubicTFT::onFilamentRunout() {
   DEBUG_ECHOLNPGM("TFT Serial Debug: onFilamentRunout triggered...");
@@ -356,21 +356,21 @@ void AnycubicTFT::handleSpecialMenu() {
 
 void AnycubicTFT::renderCurrentFileList() {
   #if HAS_MEDIA
     uint16_t selectedNumber = 0;
     selectedDirectory[0] = 0;
     selectedFile[0] = 0;
     FileList currentFileList;
 
     SENDLINE_PGM("FN "); // Filelist start
 
-    if (!isMediaInserted() && !specialMenu) {
+    if (!isMediaMounted() && !specialMenu) {
       SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to render Current File List... J02");
 
       SENDLINE_PGM("<SPECI~1.GCO");
       SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Special Menu>"));
     }
     else {
       if (codeSeen('S'))
         selectedNumber = codeValue();
 
       if (specialMenu)
@@ -572,21 +572,21 @@ void AnycubicTFT::getCommandFromTFT() {
           SEND_PGM("A5V X: "); LCD_SERIAL.print(xPosition);
           SEND_PGM(   " Y: "); LCD_SERIAL.print(yPosition);
           SEND_PGM(   " Z: "); LCD_SERIAL.print(zPosition);
           SENDLINE_PGM("");
         } break;
 
         case 6: // A6 GET SD CARD PRINTING STATUS
           #if HAS_MEDIA
             if (isPrintingFromMedia()) {
               SEND_PGM("A6V ");
-              if (isMediaInserted())
+              if (isMediaMounted())
                 SENDLINE(ui8tostr3rj(getProgress_percent()));
               else
                 SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to return printing status... J02");
             }
             else
               SENDLINE_PGM("A6V ---");
           #endif
           break;
 
         case 7: { // A7 GET PRINTING TIME
@@ -625,21 +625,21 @@ void AnycubicTFT::getCommandFromTFT() {
         case 11: // A11 STOP SD PRINT
           TERN_(HAS_MEDIA, stopPrint());
           break;
 
         case 12: // A12 kill
           kill(F(STR_ERR_KILLED));
           break;
 
         case 13: // A13 SELECTION FILE
           #if HAS_MEDIA
-            if (isMediaInserted()) {
+            if (isMediaMounted()) {
               starpos = (strchr(tftStrchrPtr + 4, '*'));
               if (tftStrchrPtr[4] == '/') {
                 strcpy(selectedDirectory, tftStrchrPtr + 5);
                 selectedFile[0] = 0;
                 SENDLINE_DBG_PGM("J21", "TFT Serial Debug: Clear file selection... J21 "); // J21 Not File Selected
                 SENDLINE_PGM("");
               }
               else if (tftStrchrPtr[4] == '<') {
                 strcpy(selectedDirectory, tftStrchrPtr + 4);
                 specialMenu = true;
@@ -824,21 +824,21 @@ void AnycubicTFT::getCommandFromTFT() {
           if (!isPrinting()) {
             setTargetTemp_celsius(0, (heater_t)BED);
             setTargetTemp_celsius(0, (extruder_t)E0);
 
             SENDLINE_DBG_PGM("J12", "TFT Serial Debug: Cooling down... J12"); // J12 cool down
           }
           break;
 
         case 26: // A26 refresh SD
           #if HAS_MEDIA
-            if (isMediaInserted()) {
+            if (isMediaMounted()) {
               if (strlen(selectedDirectory) > 0) {
                 FileList currentFileList;
                 if ((selectedDirectory[0] == '.') && (selectedDirectory[1] == '.')) {
                   currentFileList.upDir();
                 }
                 else {
                   if (selectedDirectory[0] == '<')
                     handleSpecialMenu();
                   else
                     currentFileList.changeDir(selectedDirectory);
@@ -876,26 +876,26 @@ void AnycubicTFT::getCommandFromTFT() {
     }
 
     tftBufIndW = (tftBufIndW + 1) % (TFTBUFSIZE);
     tftBufLen++;
     serial_count = 0; // clear buffer
 
   } // while
 }
 
 void AnycubicTFT::doSDCardStateCheck() {
-  #if ALL(HAS_MEDIA, HAS_SD_DETECT)
-    bool isInserted = isMediaInserted();
-    if (isInserted)
-      SENDLINE_DBG_PGM("J00", "TFT Serial Debug: SD card state changed... isInserted");
+  #if HAS_MEDIA
+    const bool isMounted = isMediaMounted();
+    if (isMounted)
+      SENDLINE_DBG_PGM("J00", "TFT Serial Debug: SD card state changed... isMounted");
     else
-      SENDLINE_DBG_PGM("J01", "TFT Serial Debug: SD card state changed... !isInserted");
+      SENDLINE_DBG_PGM("J01", "TFT Serial Debug: SD card state changed... !isMounted");
 
   #endif
 }
 
 void AnycubicTFT::doFilamentRunoutCheck() {
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     // NOTE: getFilamentRunoutState() only returns the runout state if the job is printing
     // we want to actually check the status of the pin here, regardless of printstate
     if (READ(FIL_RUNOUT1_PIN) == FIL_RUNOUT1_STATE) {
       if (mediaPrintingState == AMPRINTSTATE_PRINTING || mediaPrintingState == AMPRINTSTATE_PAUSED || mediaPrintingState == AMPRINTSTATE_PAUSE_REQUESTED) {

commit 466282f322ae4f42a8f3db5e3c9765c38445fdc8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Mar 31 18:20:37 2024 -0500

    ü©π Misc. changes from ProUI / ExtUI updates (#26928)

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index 709b54a6d7..abd32aa88c 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -276,21 +276,21 @@ void AnycubicTFT::handleSpecialMenu() {
             injectCommands(F("G29S2"));
             break;
 
           case '8': // "<08HtEndPID>"
             SERIAL_ECHOLNPGM("Special Menu: ", F("Auto Tune Hotend PID"));
             // need to dwell for half a second to give the fan a chance to start before the pid tuning starts
             injectCommands(F("M106 S204\nG4 P500\nM303 E0 S215 C15 U1"));
             break;
 
           case '9': // "<09HtBedPID>"
-            SERIAL_ECHOLNPGM("Special Menu: ", F("Auto Tune Hotbed Pid"));
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Auto Tune Hotbed PID"));
             injectCommands(F("M303 E-1 S65 C6 U1"));
             break;
         }
         break;
 
       case '1':
         switch (selectedDirectory[2]) {
           default: break;
 
           case '0': // "<10FWDeflts>"
@@ -321,21 +321,21 @@ void AnycubicTFT::handleSpecialMenu() {
             injectCommands(F("G29N"));
             break;
 
           case '3': // "<03HtendPID>"
             SERIAL_ECHOLNPGM("Special Menu: ", F("Auto Tune Hotend PID"));
             // need to dwell for half a second to give the fan a chance to start before the pid tuning starts
             injectCommands(F("M106 S204\nG4 P500\nM303 E0 S215 C15 U1"));
             break;
 
           case '4': // "<04HtbedPID>"
-            SERIAL_ECHOLNPGM("Special Menu: ", F("Auto Tune Hotbed Pid"));
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Auto Tune Hotbed PID"));
             injectCommands(F("M303 E-1 S65 C6 U1"));
             break;
 
           case '5': // "<05FWDeflts>"
             SERIAL_ECHOLNPGM("Special Menu: ", F("Load FW Defaults"));
             injectCommands(F("M502\nM300 P105 S1661\nM300 P210 S1108"));
             break;
 
           case '6': // "<06SvEEPROM>"
             SERIAL_ECHOLNPGM("Special Menu: ", F("Save EEPROM"));
@@ -815,22 +815,22 @@ void AnycubicTFT::getCommandFromTFT() {
               injectCommands(F("G1 Z10")); // RASE Z AXIS
 
             setTargetTemp_celsius(PREHEAT_2_TEMP_BED, (heater_t)BED);
             setTargetTemp_celsius(PREHEAT_2_TEMP_HOTEND, (extruder_t)E0);
             SENDLINE_PGM("OK");
           }
           break;
 
         case 25: // A25 cool down
           if (!isPrinting()) {
-            setTargetTemp_celsius(0, (heater_t) BED);
-            setTargetTemp_celsius(0, (extruder_t) E0);
+            setTargetTemp_celsius(0, (heater_t)BED);
+            setTargetTemp_celsius(0, (extruder_t)E0);
 
             SENDLINE_DBG_PGM("J12", "TFT Serial Debug: Cooling down... J12"); // J12 cool down
           }
           break;
 
         case 26: // A26 refresh SD
           #if HAS_MEDIA
             if (isMediaInserted()) {
               if (strlen(selectedDirectory) > 0) {
                 FileList currentFileList;

commit dd3b5a10a09e2a83918af1cf6f8782fd0c473f98
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 21 22:00:37 2024 -0600

    Misc. aesthetic adjustments
    
    Co-Authored-By: Andrew <18502096+classicrocker883@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index f8cba15676..709b54a6d7 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -890,21 +890,21 @@ void AnycubicTFT::doSDCardStateCheck() {
     else
       SENDLINE_DBG_PGM("J01", "TFT Serial Debug: SD card state changed... !isInserted");
 
   #endif
 }
 
 void AnycubicTFT::doFilamentRunoutCheck() {
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     // NOTE: getFilamentRunoutState() only returns the runout state if the job is printing
     // we want to actually check the status of the pin here, regardless of printstate
-    if (READ(FIL_RUNOUT1_PIN)) {
+    if (READ(FIL_RUNOUT1_PIN) == FIL_RUNOUT1_STATE) {
       if (mediaPrintingState == AMPRINTSTATE_PRINTING || mediaPrintingState == AMPRINTSTATE_PAUSED || mediaPrintingState == AMPRINTSTATE_PAUSE_REQUESTED) {
         // play tone to indicate filament is out
         injectCommands(F("\nM300 P200 S1567\nM300 P200 S1174\nM300 P200 S1567\nM300 P200 S1174\nM300 P2000 S1567"));
 
         // tell the user that the filament has run out and wait
         SENDLINE_DBG_PGM("J23", "TFT Serial Debug: Blocking filament prompt... J23");
       }
       else {
         SENDLINE_DBG_PGM("J15", "TFT Serial Debug: Non blocking filament runout... J15");
       }
@@ -933,21 +933,21 @@ void AnycubicTFT::pausePrint() {
       // for some reason pausing the print doesn't retract the extruder so force a manual one here
       injectCommands(F("G91\nG1 E-2 F1800\nG90"));
       pausePrint();
     }
   #endif
 }
 
 void AnycubicTFT::resumePrint() {
   #if HAS_MEDIA
     #if ENABLED(FILAMENT_RUNOUT_SENSOR)
-      if (READ(FIL_RUNOUT1_PIN)) {
+      if (READ(FIL_RUNOUT1_PIN) == FIL_RUNOUT1_STATE) {
         DEBUG_ECHOLNPGM("TFT Serial Debug: Resume Print with filament sensor still tripped... ");
 
         // trigger the user message box
         doFilamentRunoutCheck();
 
         // re-enable the continue button
         SENDLINE_DBG_PGM("J18", "TFT Serial Debug: Resume Print with filament sensor still tripped... J18");
         return;
       }
     #endif

commit cb291e8d00a6c1ee0a778625e0170b6b7430a004
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 9 22:41:00 2024 -0600

    ü©π Fix some temp constraints

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index 8b073652b0..f8cba15676 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -690,22 +690,21 @@ void AnycubicTFT::getCommandFromTFT() {
           if (codeSeen('S')) {
             tempbed = constrain(codeValue(), 0, 100);
             setTargetTemp_celsius(tempbed, (heater_t)BED);
           }
         }
         break;
 
         case 18: { // A18 set fan speed
           float fanPercent;
           if (codeSeen('S')) {
-            fanPercent = codeValue();
-            fanPercent = constrain(fanPercent, 0, 100);
+            fanPercent = constrain(codeValue(), 0, 100);
             setTargetFan_percent(fanPercent, FAN0);
           }
           else
             fanPercent = 100;
 
           setTargetFan_percent(fanPercent, FAN0);
           SENDLINE_PGM("");
         }
         break;
 

commit c3694f1c038fa20ad749118b0a1c7aa88e3dd5f2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jun 14 17:24:50 2023 -0500

    üé® Lowercase methods, functions, data members (#25939)
    
    For: TFT, DGUS, MarlinUI, Anycubic, JyersUI, CrealityUI

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index a560e5e9a0..8b073652b0 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -17,21 +17,21 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
 #include "../../../inc/MarlinConfigPre.h"
 
 #if ENABLED(ANYCUBIC_LCD_I3MEGA)
 
 //#define ANYCUBIC_LCD_DEBUG
-#define DEBUG_OUT ANYCUBIC_LCD_DEBUG
+#define DEBUG_OUT ENABLED(ANYCUBIC_LCD_DEBUG)
 #include "../../../core/debug_out.h"
 
 #include "anycubic_i3mega_lcd.h"
 #include "../ui_api.h"
 
 #include "../../../libs/numtostr.h"
 #include "../../../module/stepper.h" // for disable_all_steppers
 #include "../../../module/motion.h"  // for quickstop_stepper, A20 read printing speed, feedrate_percentage
 #include "../../../MarlinCore.h"     // for disable_steppers
 #include "../../../inc/MarlinConfig.h"
@@ -44,50 +44,49 @@
 #define SENDLINE(x)       sendLine(x)
 #define SENDLINE_DBG_PGM(x,y)       do{ sendLine_P(PSTR(x)); DEBUG_ECHOLNPGM(y); }while(0)
 #define SENDLINE_DBG_PGM_VAL(x,y,z) do{ sendLine_P(PSTR(x)); DEBUG_ECHOLNPGM(y, z); }while(0)
 
 // Append ".gcode" to filename, if requested. Used for some DGUS-clone displays with built-in filter.
 // Filenames are limited to 26 characters, so the actual name for the FILENAME can be 20 characters at most.
 // If a longer string is desired without "extension, use the ALTNAME macro to provide a (longer) alternative.
 #define SPECIAL_MENU_FILENAME(A) A TERN_(ANYCUBIC_LCD_GCODE_EXT, ".gcode")
 #define SPECIAL_MENU_ALTNAME(A, B) TERN(ANYCUBIC_LCD_GCODE_EXT, A ".gcode", B)
 
-AnycubicTFTClass anycubicTFT;
+AnycubicTFT anycubicTFT;
 
-char AnycubicTFTClass::tftCommands[TFTBUFSIZE][TFT_MAX_CMD_SIZE];
-int AnycubicTFTClass::tftBufLen = 0,
-    AnycubicTFTClass::tftBufIndR = 0,
-    AnycubicTFTClass::tftBufIndW = 0;
-char AnycubicTFTClass::serial3_char;
-char* AnycubicTFTClass::tftStrchrPtr;
-uint8_t AnycubicTFTClass::specialMenu = false;
-AnycubicMediaPrintState AnycubicTFTClass::mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
-AnycubicMediaPauseState AnycubicTFTClass::mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
+char AnycubicTFT::tftCommands[TFTBUFSIZE][TFT_MAX_CMD_SIZE];
+int AnycubicTFT::tftBufLen = 0,
+    AnycubicTFT::tftBufIndR = 0,
+    AnycubicTFT::tftBufIndW = 0;
+char* AnycubicTFT::tftStrchrPtr;
+uint8_t AnycubicTFT::specialMenu = false;
+AnycubicMediaPrintState AnycubicTFT::mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
+AnycubicMediaPauseState AnycubicTFT::mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
 
-char AnycubicTFTClass::selectedDirectory[30];
-char AnycubicTFTClass::selectedFile[FILENAME_LENGTH];
+char AnycubicTFT::selectedDirectory[30];
+char AnycubicTFT::selectedFile[FILENAME_LENGTH];
 
 // Serial helpers
 static void sendNewLine() { LCD_SERIAL.write('\r'); LCD_SERIAL.write('\n'); }
 static void send(const char *str) { LCD_SERIAL.print(str); }
 static void send_P(PGM_P str) {
   while (const char c = pgm_read_byte(str++))
     LCD_SERIAL.write(c);
 }
 static void sendLine(const char *str) { send(str); sendNewLine(); }
 static void sendLine_P(PGM_P str) { send_P(str); sendNewLine(); }
 
 using namespace ExtUI;
 
-AnycubicTFTClass::AnycubicTFTClass() {}
+AnycubicTFT::AnycubicTFT() {}
 
-void AnycubicTFTClass::onSetup() {
+void AnycubicTFT::onSetup() {
   #ifndef LCD_BAUDRATE
     #define LCD_BAUDRATE 115200
   #endif
   LCD_SERIAL.begin(LCD_BAUDRATE);
 
   SENDLINE_DBG_PGM("J17", "TFT Serial Debug: Main board reset... J17"); // J17 Main board reset
   delay_ms(10);
 
   // Init the state of the key pins running on the TFT
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
@@ -103,21 +102,21 @@ void AnycubicTFTClass::onSetup() {
 
   doFilamentRunoutCheck();
   selectedFile[0] = 0;
 
   #if ENABLED(STARTUP_CHIME)
     injectCommands(F("M300 P250 S554\nM300 P250 S554\nM300 P250 S740\nM300 P250 S554\nM300 P250 S740\nM300 P250 S554\nM300 P500 S831"));
   #endif
   DEBUG_ECHOLNPGM("TFT Serial Debug: Finished startup");
 }
 
-void AnycubicTFTClass::onCommandScan() {
+void AnycubicTFT::onCommandScan() {
   static millis_t nextStopCheck = 0; // used to slow the stopped print check down to reasonable times
   const millis_t ms = millis();
   if (ELAPSED(ms, nextStopCheck)) {
     nextStopCheck = ms + 1000UL;
     if (mediaPrintingState == AMPRINTSTATE_STOP_REQUESTED && isNozzleHomed()) {
       DEBUG_ECHOLNPGM("TFT Serial Debug: Finished stopping print, releasing motors ...");
       mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
       mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
       injectCommands(F("M84\nM27")); // disable stepper motors and force report of SD status
       delay_ms(200);
@@ -128,40 +127,40 @@ void AnycubicTFTClass::onCommandScan() {
 
   if (tftBufLen < (TFTBUFSIZE) - 1)
     getCommandFromTFT();
 
   if (tftBufLen) {
     --tftBufLen;
     tftBufIndR = (tftBufIndR + 1) % (TFTBUFSIZE);
   }
 }
 
-void AnycubicTFTClass::onKillTFT() {
+void AnycubicTFT::onKillTFT() {
   SENDLINE_DBG_PGM("J11", "TFT Serial Debug: Kill command... J11");
 }
 
-void AnycubicTFTClass::onSDCardStateChange(bool isInserted) {
+void AnycubicTFT::onSDCardStateChange(bool isInserted) {
   DEBUG_ECHOLNPGM("TFT Serial Debug: onSDCardStateChange event triggered...", isInserted);
   doSDCardStateCheck();
 }
 
-void AnycubicTFTClass::onSDCardError() {
+void AnycubicTFT::onSDCardError() {
   DEBUG_ECHOLNPGM("TFT Serial Debug: onSDCardError event triggered...");
   SENDLINE_DBG_PGM("J21", "TFT Serial Debug: On SD Card Error ... J21");
 }
 
-void AnycubicTFTClass::onFilamentRunout() {
+void AnycubicTFT::onFilamentRunout() {
   DEBUG_ECHOLNPGM("TFT Serial Debug: onFilamentRunout triggered...");
   doFilamentRunoutCheck();
 }
 
-void AnycubicTFTClass::onUserConfirmRequired(const char * const msg) {
+void AnycubicTFT::onUserConfirmRequired(const char * const msg) {
   DEBUG_ECHOLNPGM("TFT Serial Debug: onUserConfirmRequired triggered... ", msg);
 
   #if HAS_MEDIA
     /**
      * Need to handle the process of following states
      * "Nozzle Parked"
      * "Load Filament"
      * "Filament Purging..."
      * "HeaterTimeout"
      * "Reheat finished."
@@ -199,37 +198,37 @@ void AnycubicTFTClass::onUserConfirmRequired(const char * const msg) {
     }
     else if (strcmp_P(msg, PSTR("Reheat finished.")) == 0) {
       mediaPrintingState = AMPRINTSTATE_PAUSED;
       mediaPauseState    = AMPAUSESTATE_REHEAT_FINISHED;
       // enable continue button
       SENDLINE_DBG_PGM("J18", "TFT Serial Debug: UserConfirm SD Reheat done... J18");
     }
   #endif
 }
 
-float AnycubicTFTClass::codeValue() {
+float AnycubicTFT::codeValue() {
   return (strtod(&tftCommands[tftBufIndR][tftStrchrPtr - tftCommands[tftBufIndR] + 1], nullptr));
 }
 
-bool AnycubicTFTClass::codeSeen(char code) {
+bool AnycubicTFT::codeSeen(char code) {
   tftStrchrPtr = strchr(tftCommands[tftBufIndR], code);
   return !!tftStrchrPtr; // Return True if a character was found
 }
 
-bool AnycubicTFTClass::isNozzleHomed() {
+bool AnycubicTFT::isNozzleHomed() {
   const float xPosition = getAxisPosition_mm((axis_t) X);
   const float yPosition = getAxisPosition_mm((axis_t) Y);
   return WITHIN(xPosition, X_MIN_POS - 0.1, X_MIN_POS + 0.1) &&
          WITHIN(yPosition, Y_MIN_POS - 0.1, Y_MIN_POS + 0.1);
 }
 
-void AnycubicTFTClass::handleSpecialMenu() {
+void AnycubicTFT::handleSpecialMenu() {
   /**
    * NOTE: that the file selection command actual lowercases the entire selected file/foldername, so charracter comparisons need to be lowercase.
    */
   if (selectedDirectory[0] != '<') {
     DEBUG_ECHOLNPGM("TFT Serial Debug: Attempted to handleSpecialMenu on non-special menu... ", selectedDirectory);
     return;
   }
 
   switch (selectedDirectory[1]) {
     default: break;
@@ -348,21 +347,21 @@ void AnycubicTFTClass::handleSpecialMenu() {
             injectCommands(F("M108"));
             break;
         }
         break;
 
     #endif // !PROBE_MANUALLY
   }
 
 }
 
-void AnycubicTFTClass::renderCurrentFileList() {
+void AnycubicTFT::renderCurrentFileList() {
   #if HAS_MEDIA
     uint16_t selectedNumber = 0;
     selectedDirectory[0] = 0;
     selectedFile[0] = 0;
     FileList currentFileList;
 
     SENDLINE_PGM("FN "); // Filelist start
 
     if (!isMediaInserted() && !specialMenu) {
       SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to render Current File List... J02");
@@ -376,21 +375,21 @@ void AnycubicTFTClass::renderCurrentFileList() {
 
       if (specialMenu)
         renderSpecialMenu(selectedNumber);
       else if (selectedNumber <= currentFileList.count())
         renderCurrentFolder(selectedNumber);
     }
     SENDLINE_PGM("END"); // Filelist stop
   #endif // HAS_MEDIA
 }
 
-void AnycubicTFTClass::renderSpecialMenu(uint16_t selectedNumber) {
+void AnycubicTFT::renderSpecialMenu(uint16_t selectedNumber) {
 
   switch (selectedNumber) {
     default: break;
 
     #if ENABLED(PROBE_MANUALLY)
       case 0: // First Page
         SENDLINE_PGM("<01ZUP~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Z Up 0.1>"));
         SENDLINE_PGM("<02ZUP~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Z Up 0.02>"));
@@ -443,21 +442,21 @@ void AnycubicTFTClass::renderSpecialMenu(uint16_t selectedNumber) {
         SENDLINE_PGM("<06SEN~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_ALTNAME("<User Confirmation>", "<Send User Confirmation>"));
         SENDLINE_PGM("<EXIT_~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Exit>"));
         break;
 
     #endif // !PROBE_MANUALLY
   }
 }
 
-void AnycubicTFTClass::renderCurrentFolder(uint16_t selectedNumber) {
+void AnycubicTFT::renderCurrentFolder(uint16_t selectedNumber) {
   FileList currentFileList;
   const uint16_t dir_files = currentFileList.count(),
                  max_files = (dir_files - selectedNumber) < 4 ? dir_files : selectedNumber + 3;
 
   for (uint16_t cnt = selectedNumber; cnt <= max_files; cnt++) {
     if (cnt == 0) { // Special Entry
       if (currentFileList.isAtRootDir()) {
         SENDLINE_PGM("<SPECI~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Special Menu>"));
       }
@@ -478,50 +477,50 @@ void AnycubicTFTClass::renderCurrentFolder(uint16_t selectedNumber) {
 
       }
       else {
         SENDLINE(currentFileList.shortFilename());
         SENDLINE(currentFileList.filename());
       }
     }
   }
 }
 
-void AnycubicTFTClass::onPrintTimerStarted() {
+void AnycubicTFT::onPrintTimerStarted() {
   #if HAS_MEDIA
     if (mediaPrintingState == AMPRINTSTATE_PRINTING)
       SENDLINE_DBG_PGM("J04", "TFT Serial Debug: Starting SD Print... J04"); // J04 Starting Print
   #endif
 }
 
-void AnycubicTFTClass::onPrintTimerPaused() {
+void AnycubicTFT::onPrintTimerPaused() {
   #if HAS_MEDIA
     if (isPrintingFromMedia()) {
       mediaPrintingState = AMPRINTSTATE_PAUSED;
       mediaPauseState    = AMPAUSESTATE_PARKING;
     }
   #endif
 }
 
-void AnycubicTFTClass::onPrintTimerStopped() {
+void AnycubicTFT::onPrintTimerStopped() {
   #if HAS_MEDIA
     if (mediaPrintingState == AMPRINTSTATE_PRINTING) {
       mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
       SENDLINE_DBG_PGM("J14", "TFT Serial Debug: SD Print Completed... J14");
     }
     // otherwise it was stopped by the printer so don't send print completed signal to TFT
   #endif
 }
 
 #define ROUND(val) int((val)+0.5f)
 
-void AnycubicTFTClass::getCommandFromTFT() {
+void AnycubicTFT::getCommandFromTFT() {
   static int serial_count = 0;
 
   char *starpos = nullptr;
   while (LCD_SERIAL.available() > 0 && tftBufLen < (TFTBUFSIZE)) {
     char c = LCD_SERIAL.read();
     if (c != '\n' && c != '\r' && c != ':' && serial_count < (TFT_MAX_CMD_SIZE - 1)) {
       tftCommands[tftBufIndW][serial_count++] = c;
       continue;
     }
 
@@ -877,76 +876,76 @@ void AnycubicTFTClass::getCommandFromTFT() {
       }
     }
 
     tftBufIndW = (tftBufIndW + 1) % (TFTBUFSIZE);
     tftBufLen++;
     serial_count = 0; // clear buffer
 
   } // while
 }
 
-void AnycubicTFTClass::doSDCardStateCheck() {
+void AnycubicTFT::doSDCardStateCheck() {
   #if ALL(HAS_MEDIA, HAS_SD_DETECT)
     bool isInserted = isMediaInserted();
     if (isInserted)
       SENDLINE_DBG_PGM("J00", "TFT Serial Debug: SD card state changed... isInserted");
     else
       SENDLINE_DBG_PGM("J01", "TFT Serial Debug: SD card state changed... !isInserted");
 
   #endif
 }
 
-void AnycubicTFTClass::doFilamentRunoutCheck() {
+void AnycubicTFT::doFilamentRunoutCheck() {
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     // NOTE: getFilamentRunoutState() only returns the runout state if the job is printing
     // we want to actually check the status of the pin here, regardless of printstate
     if (READ(FIL_RUNOUT1_PIN)) {
       if (mediaPrintingState == AMPRINTSTATE_PRINTING || mediaPrintingState == AMPRINTSTATE_PAUSED || mediaPrintingState == AMPRINTSTATE_PAUSE_REQUESTED) {
         // play tone to indicate filament is out
         injectCommands(F("\nM300 P200 S1567\nM300 P200 S1174\nM300 P200 S1567\nM300 P200 S1174\nM300 P2000 S1567"));
 
         // tell the user that the filament has run out and wait
         SENDLINE_DBG_PGM("J23", "TFT Serial Debug: Blocking filament prompt... J23");
       }
       else {
         SENDLINE_DBG_PGM("J15", "TFT Serial Debug: Non blocking filament runout... J15");
       }
     }
   #endif // FILAMENT_RUNOUT_SENSOR
 }
 
-void AnycubicTFTClass::startPrint() {
+void AnycubicTFT::startPrint() {
   #if HAS_MEDIA
     if (!isPrinting() && strlen(selectedFile) > 0) {
       DEBUG_ECHOLNPGM("TFT Serial Debug: About to print file ... ", isPrinting(), " ", selectedFile);
       mediaPrintingState = AMPRINTSTATE_PRINTING;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
       printFile(selectedFile);
     }
   #endif // SDUPPORT
 }
 
-void AnycubicTFTClass::pausePrint() {
+void AnycubicTFT::pausePrint() {
   #if HAS_MEDIA
     if (isPrintingFromMedia() && mediaPrintingState != AMPRINTSTATE_STOP_REQUESTED && mediaPauseState == AMPAUSESTATE_NOT_PAUSED) {
       mediaPrintingState = AMPRINTSTATE_PAUSE_REQUESTED;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED; // need the userconfirm method to update pause state
       SENDLINE_DBG_PGM("J05", "TFT Serial Debug: SD print pause started... J05"); // J05 printing pause
 
       // for some reason pausing the print doesn't retract the extruder so force a manual one here
       injectCommands(F("G91\nG1 E-2 F1800\nG90"));
       pausePrint();
     }
   #endif
 }
 
-void AnycubicTFTClass::resumePrint() {
+void AnycubicTFT::resumePrint() {
   #if HAS_MEDIA
     #if ENABLED(FILAMENT_RUNOUT_SENSOR)
       if (READ(FIL_RUNOUT1_PIN)) {
         DEBUG_ECHOLNPGM("TFT Serial Debug: Resume Print with filament sensor still tripped... ");
 
         // trigger the user message box
         doFilamentRunoutCheck();
 
         // re-enable the continue button
         SENDLINE_DBG_PGM("J18", "TFT Serial Debug: Resume Print with filament sensor still tripped... J18");
@@ -966,21 +965,21 @@ void AnycubicTFTClass::resumePrint() {
     else {
       mediaPrintingState = AMPRINTSTATE_PRINTING;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
 
       SENDLINE_DBG_PGM("J04", "TFT Serial Debug: SD print resumed... J04"); // J04 printing form sd card now
       resumePrint();
     }
   #endif
 }
 
-void AnycubicTFTClass::stopPrint() {
+void AnycubicTFT::stopPrint() {
   #if HAS_MEDIA
     mediaPrintingState = AMPRINTSTATE_STOP_REQUESTED;
     mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
     SENDLINE_DBG_PGM("J16", "TFT Serial Debug: SD print stop called... J16");
 
     // for some reason stopping the print doesn't retract the extruder so force a manual one here
     injectCommands(F("G91\nG1 E-2 F1800\nG90"));
     stopPrint();
   #endif
 }

commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    üßë‚Äçüíª Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index dca0f2e85d..a560e5e9a0 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -878,21 +878,21 @@ void AnycubicTFTClass::getCommandFromTFT() {
     }
 
     tftBufIndW = (tftBufIndW + 1) % (TFTBUFSIZE);
     tftBufLen++;
     serial_count = 0; // clear buffer
 
   } // while
 }
 
 void AnycubicTFTClass::doSDCardStateCheck() {
-  #if BOTH(HAS_MEDIA, HAS_SD_DETECT)
+  #if ALL(HAS_MEDIA, HAS_SD_DETECT)
     bool isInserted = isMediaInserted();
     if (isInserted)
       SENDLINE_DBG_PGM("J00", "TFT Serial Debug: SD card state changed... isInserted");
     else
       SENDLINE_DBG_PGM("J01", "TFT Serial Debug: SD card state changed... !isInserted");
 
   #endif
 }
 
 void AnycubicTFTClass::doFilamentRunoutCheck() {

commit 37d0f49a82cd2e4d91dce4e62671b266924eb2a7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed May 24 01:05:55 2023 -0500

    üßë‚Äçüíª Misc. ExtUI LCD cleanup (#25872)

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index 36b24861fe..dca0f2e85d 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -17,171 +17,152 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
 #include "../../../inc/MarlinConfigPre.h"
 
 #if ENABLED(ANYCUBIC_LCD_I3MEGA)
 
 //#define ANYCUBIC_LCD_DEBUG
+#define DEBUG_OUT ANYCUBIC_LCD_DEBUG
+#include "../../../core/debug_out.h"
 
 #include "anycubic_i3mega_lcd.h"
 #include "../ui_api.h"
 
 #include "../../../libs/numtostr.h"
 #include "../../../module/stepper.h" // for disable_all_steppers
 #include "../../../module/motion.h"  // for quickstop_stepper, A20 read printing speed, feedrate_percentage
 #include "../../../MarlinCore.h"     // for disable_steppers
 #include "../../../inc/MarlinConfig.h"
 
 // command sending macro's with debugging capability
 #define SEND_PGM(x)       send_P(PSTR(x))
 #define SENDLINE_PGM(x)   sendLine_P(PSTR(x))
 #define SEND_PGM_VAL(x,y) (send_P(PSTR(x)), sendLine(i16tostr3rj(y)))
 #define SEND(x)           send(x)
 #define SENDLINE(x)       sendLine(x)
-#if ENABLED(ANYCUBIC_LCD_DEBUG)
-  #define SENDLINE_DBG_PGM(x,y)       do{ sendLine_P(PSTR(x)); SERIAL_ECHOLNPGM(y); }while(0)
-  #define SENDLINE_DBG_PGM_VAL(x,y,z) do{ sendLine_P(PSTR(x)); SERIAL_ECHOLNPGM(y, z); }while(0)
-#else
-  #define SENDLINE_DBG_PGM(x,y)       sendLine_P(PSTR(x))
-  #define SENDLINE_DBG_PGM_VAL(x,y,z) sendLine_P(PSTR(x))
-#endif
+#define SENDLINE_DBG_PGM(x,y)       do{ sendLine_P(PSTR(x)); DEBUG_ECHOLNPGM(y); }while(0)
+#define SENDLINE_DBG_PGM_VAL(x,y,z) do{ sendLine_P(PSTR(x)); DEBUG_ECHOLNPGM(y, z); }while(0)
 
 // Append ".gcode" to filename, if requested. Used for some DGUS-clone displays with built-in filter.
 // Filenames are limited to 26 characters, so the actual name for the FILENAME can be 20 characters at most.
 // If a longer string is desired without "extension, use the ALTNAME macro to provide a (longer) alternative.
 #define SPECIAL_MENU_FILENAME(A) A TERN_(ANYCUBIC_LCD_GCODE_EXT, ".gcode")
 #define SPECIAL_MENU_ALTNAME(A, B) TERN(ANYCUBIC_LCD_GCODE_EXT, A ".gcode", B)
 
-AnycubicTFTClass AnycubicTFT;
+AnycubicTFTClass anycubicTFT;
 
-char AnycubicTFTClass::TFTcmdbuffer[TFTBUFSIZE][TFT_MAX_CMD_SIZE];
-int AnycubicTFTClass::TFTbuflen = 0,
-    AnycubicTFTClass::TFTbufindr = 0,
-    AnycubicTFTClass::TFTbufindw = 0;
+char AnycubicTFTClass::tftCommands[TFTBUFSIZE][TFT_MAX_CMD_SIZE];
+int AnycubicTFTClass::tftBufLen = 0,
+    AnycubicTFTClass::tftBufIndR = 0,
+    AnycubicTFTClass::tftBufIndW = 0;
 char AnycubicTFTClass::serial3_char;
-int AnycubicTFTClass::serial3_count = 0;
-char* AnycubicTFTClass::TFTstrchr_pointer;
-uint8_t AnycubicTFTClass::SpecialMenu = false;
+char* AnycubicTFTClass::tftStrchrPtr;
+uint8_t AnycubicTFTClass::specialMenu = false;
 AnycubicMediaPrintState AnycubicTFTClass::mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
 AnycubicMediaPauseState AnycubicTFTClass::mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
 
-char AnycubicTFTClass::SelectedDirectory[30];
-char AnycubicTFTClass::SelectedFile[FILENAME_LENGTH];
+char AnycubicTFTClass::selectedDirectory[30];
+char AnycubicTFTClass::selectedFile[FILENAME_LENGTH];
 
 // Serial helpers
 static void sendNewLine() { LCD_SERIAL.write('\r'); LCD_SERIAL.write('\n'); }
 static void send(const char *str) { LCD_SERIAL.print(str); }
 static void send_P(PGM_P str) {
   while (const char c = pgm_read_byte(str++))
     LCD_SERIAL.write(c);
 }
 static void sendLine(const char *str) { send(str); sendNewLine(); }
 static void sendLine_P(PGM_P str) { send_P(str); sendNewLine(); }
 
 using namespace ExtUI;
 
 AnycubicTFTClass::AnycubicTFTClass() {}
 
-void AnycubicTFTClass::OnSetup() {
+void AnycubicTFTClass::onSetup() {
   #ifndef LCD_BAUDRATE
     #define LCD_BAUDRATE 115200
   #endif
   LCD_SERIAL.begin(LCD_BAUDRATE);
 
   SENDLINE_DBG_PGM("J17", "TFT Serial Debug: Main board reset... J17"); // J17 Main board reset
   delay_ms(10);
 
   // Init the state of the key pins running on the TFT
-  #if BOTH(HAS_MEDIA, HAS_SD_DETECT)
-    SET_INPUT_PULLUP(SD_DETECT_PIN);
-  #endif
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     SET_INPUT_PULLUP(FIL_RUNOUT1_PIN);
   #endif
 
   mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
   mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
 
-  // DoSDCardStateCheck();
+  // doSDCardStateCheck();
   SENDLINE_DBG_PGM("J12", "TFT Serial Debug: Ready... J12"); // J12 Ready
   delay_ms(10);
 
-  DoFilamentRunoutCheck();
-  SelectedFile[0] = 0;
+  doFilamentRunoutCheck();
+  selectedFile[0] = 0;
 
   #if ENABLED(STARTUP_CHIME)
     injectCommands(F("M300 P250 S554\nM300 P250 S554\nM300 P250 S740\nM300 P250 S554\nM300 P250 S740\nM300 P250 S554\nM300 P500 S831"));
   #endif
-  #if ENABLED(ANYCUBIC_LCD_DEBUG)
-    SERIAL_ECHOLNPGM("TFT Serial Debug: Finished startup");
-  #endif
+  DEBUG_ECHOLNPGM("TFT Serial Debug: Finished startup");
 }
 
-void AnycubicTFTClass::OnCommandScan() {
+void AnycubicTFTClass::onCommandScan() {
   static millis_t nextStopCheck = 0; // used to slow the stopped print check down to reasonable times
   const millis_t ms = millis();
   if (ELAPSED(ms, nextStopCheck)) {
     nextStopCheck = ms + 1000UL;
-    if (mediaPrintingState == AMPRINTSTATE_STOP_REQUESTED && IsNozzleHomed()) {
-      #if ENABLED(ANYCUBIC_LCD_DEBUG)
-        SERIAL_ECHOLNPGM("TFT Serial Debug: Finished stopping print, releasing motors ...");
-      #endif
+    if (mediaPrintingState == AMPRINTSTATE_STOP_REQUESTED && isNozzleHomed()) {
+      DEBUG_ECHOLNPGM("TFT Serial Debug: Finished stopping print, releasing motors ...");
       mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
       mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
       injectCommands(F("M84\nM27")); // disable stepper motors and force report of SD status
       delay_ms(200);
       // tell printer to release resources of print to indicate it is done
       SENDLINE_DBG_PGM("J14", "TFT Serial Debug: SD Print Stopped... J14");
     }
   }
 
-  if (TFTbuflen < (TFTBUFSIZE - 1))
-    GetCommandFromTFT();
+  if (tftBufLen < (TFTBUFSIZE) - 1)
+    getCommandFromTFT();
 
-  if (TFTbuflen) {
-    TFTbuflen  = (TFTbuflen - 1);
-    TFTbufindr = (TFTbufindr + 1) % TFTBUFSIZE;
+  if (tftBufLen) {
+    --tftBufLen;
+    tftBufIndR = (tftBufIndR + 1) % (TFTBUFSIZE);
   }
 }
 
-void AnycubicTFTClass::OnKillTFT() {
+void AnycubicTFTClass::onKillTFT() {
   SENDLINE_DBG_PGM("J11", "TFT Serial Debug: Kill command... J11");
 }
 
-void AnycubicTFTClass::OnSDCardStateChange(bool isInserted) {
-  #if ENABLED(ANYCUBIC_LCD_DEBUG)
-    SERIAL_ECHOLNPGM("TFT Serial Debug: OnSDCardStateChange event triggered...", isInserted);
-  #endif
-  DoSDCardStateCheck();
+void AnycubicTFTClass::onSDCardStateChange(bool isInserted) {
+  DEBUG_ECHOLNPGM("TFT Serial Debug: onSDCardStateChange event triggered...", isInserted);
+  doSDCardStateCheck();
 }
 
-void AnycubicTFTClass::OnSDCardError() {
-  #if ENABLED(ANYCUBIC_LCD_DEBUG)
-    SERIAL_ECHOLNPGM("TFT Serial Debug: OnSDCardError event triggered...");
-  #endif
+void AnycubicTFTClass::onSDCardError() {
+  DEBUG_ECHOLNPGM("TFT Serial Debug: onSDCardError event triggered...");
   SENDLINE_DBG_PGM("J21", "TFT Serial Debug: On SD Card Error ... J21");
 }
 
-void AnycubicTFTClass::OnFilamentRunout() {
-  #if ENABLED(ANYCUBIC_LCD_DEBUG)
-    SERIAL_ECHOLNPGM("TFT Serial Debug: FilamentRunout triggered...");
-  #endif
-  DoFilamentRunoutCheck();
+void AnycubicTFTClass::onFilamentRunout() {
+  DEBUG_ECHOLNPGM("TFT Serial Debug: onFilamentRunout triggered...");
+  doFilamentRunoutCheck();
 }
 
-void AnycubicTFTClass::OnUserConfirmRequired(const char * const msg) {
-  #if ENABLED(ANYCUBIC_LCD_DEBUG)
-    SERIAL_ECHOLNPGM("TFT Serial Debug: OnUserConfirmRequired triggered... ", msg);
-  #endif
+void AnycubicTFTClass::onUserConfirmRequired(const char * const msg) {
+  DEBUG_ECHOLNPGM("TFT Serial Debug: onUserConfirmRequired triggered... ", msg);
 
   #if HAS_MEDIA
     /**
      * Need to handle the process of following states
      * "Nozzle Parked"
      * "Load Filament"
      * "Filament Purging..."
      * "HeaterTimeout"
      * "Reheat finished."
      *
@@ -218,204 +199,202 @@ void AnycubicTFTClass::OnUserConfirmRequired(const char * const msg) {
     }
     else if (strcmp_P(msg, PSTR("Reheat finished.")) == 0) {
       mediaPrintingState = AMPRINTSTATE_PAUSED;
       mediaPauseState    = AMPAUSESTATE_REHEAT_FINISHED;
       // enable continue button
       SENDLINE_DBG_PGM("J18", "TFT Serial Debug: UserConfirm SD Reheat done... J18");
     }
   #endif
 }
 
-float AnycubicTFTClass::CodeValue() {
-  return (strtod(&TFTcmdbuffer[TFTbufindr][TFTstrchr_pointer - TFTcmdbuffer[TFTbufindr] + 1], nullptr));
+float AnycubicTFTClass::codeValue() {
+  return (strtod(&tftCommands[tftBufIndR][tftStrchrPtr - tftCommands[tftBufIndR] + 1], nullptr));
 }
 
-bool AnycubicTFTClass::CodeSeen(char code) {
-  TFTstrchr_pointer = strchr(TFTcmdbuffer[TFTbufindr], code);
-  return !!TFTstrchr_pointer; // Return True if a character was found
+bool AnycubicTFTClass::codeSeen(char code) {
+  tftStrchrPtr = strchr(tftCommands[tftBufIndR], code);
+  return !!tftStrchrPtr; // Return True if a character was found
 }
 
-bool AnycubicTFTClass::IsNozzleHomed() {
+bool AnycubicTFTClass::isNozzleHomed() {
   const float xPosition = getAxisPosition_mm((axis_t) X);
   const float yPosition = getAxisPosition_mm((axis_t) Y);
   return WITHIN(xPosition, X_MIN_POS - 0.1, X_MIN_POS + 0.1) &&
          WITHIN(yPosition, Y_MIN_POS - 0.1, Y_MIN_POS + 0.1);
 }
 
-void AnycubicTFTClass::HandleSpecialMenu() {
+void AnycubicTFTClass::handleSpecialMenu() {
   /**
    * NOTE: that the file selection command actual lowercases the entire selected file/foldername, so charracter comparisons need to be lowercase.
    */
-  if (SelectedDirectory[0] == '<') {
-    switch (SelectedDirectory[1]) {
-      case 'e': // "<exit>"
-        SpecialMenu = false;
-        return;
+  if (selectedDirectory[0] != '<') {
+    DEBUG_ECHOLNPGM("TFT Serial Debug: Attempted to handleSpecialMenu on non-special menu... ", selectedDirectory);
+    return;
+  }
+
+  switch (selectedDirectory[1]) {
+    default: break;
+
+    case 'e': specialMenu = false; return; // "<exit>"
+
+    #if ENABLED(PROBE_MANUALLY)
+
+      case '0':
+        switch (selectedDirectory[2]) {
+          default: break;
+
+          case '1': // "<01ZUp0.1>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Z Up 0.1"));
+            injectCommands(F("G91\nG1 Z+0.1\nG90"));
+            break;
+
+          case '2': // "<02ZUp0.02>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Z Up 0.02"));
+            injectCommands(F("G91\nG1 Z+0.02\nG90"));
+            break;
+
+          case '3': // "<03ZDn0.02>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Z Down 0.02"));
+            injectCommands(F("G91\nG1 Z-0.02\nG90"));
+            break;
+
+          case '4': // "<04ZDn0.1>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Z Down 0.1"));
+            injectCommands(F("G91\nG1 Z-0.1\nG90"));
+            break;
+
+          case '5': // "<05PrehtBed>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Preheat Bed"));
+            injectCommands(F("M140 S65"));
+            break;
+
+          case '6': // "<06SMeshLvl>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Start Mesh Leveling"));
+            injectCommands(F("G29S1"));
+            break;
+
+          case '7': // "<07MeshNPnt>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Next Mesh Point"));
+            injectCommands(F("G29S2"));
+            break;
+
+          case '8': // "<08HtEndPID>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Auto Tune Hotend PID"));
+            // need to dwell for half a second to give the fan a chance to start before the pid tuning starts
+            injectCommands(F("M106 S204\nG4 P500\nM303 E0 S215 C15 U1"));
+            break;
+
+          case '9': // "<09HtBedPID>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Auto Tune Hotbed Pid"));
+            injectCommands(F("M303 E-1 S65 C6 U1"));
+            break;
+        }
         break;
 
-        #if ENABLED(PROBE_MANUALLY)
-          case '0':
-            switch (SelectedDirectory[2]) {
-              case '1': // "<01ZUp0.1>"
-                SERIAL_ECHOLNPGM("Special Menu: Z Up 0.1");
-                injectCommands(F("G91\nG1 Z+0.1\nG90"));
-                break;
-
-              case '2': // "<02ZUp0.02>"
-                SERIAL_ECHOLNPGM("Special Menu: Z Up 0.02");
-                injectCommands(F("G91\nG1 Z+0.02\nG90"));
-                break;
-
-              case '3': // "<03ZDn0.02>"
-                SERIAL_ECHOLNPGM("Special Menu: Z Down 0.02");
-                injectCommands(F("G91\nG1 Z-0.02\nG90"));
-                break;
-
-              case '4': // "<04ZDn0.1>"
-                SERIAL_ECHOLNPGM("Special Menu: Z Down 0.1");
-                injectCommands(F("G91\nG1 Z-0.1\nG90"));
-                break;
-
-              case '5': // "<05PrehtBed>"
-                SERIAL_ECHOLNPGM("Special Menu: Preheat Bed");
-                injectCommands(F("M140 S65"));
-                break;
-
-              case '6': // "<06SMeshLvl>"
-                SERIAL_ECHOLNPGM("Special Menu: Start Mesh Leveling");
-                injectCommands(F("G29S1"));
-                break;
-
-              case '7': // "<07MeshNPnt>"
-                SERIAL_ECHOLNPGM("Special Menu: Next Mesh Point");
-                injectCommands(F("G29S2"));
-                break;
-
-              case '8': // "<08HtEndPID>"
-                SERIAL_ECHOLNPGM("Special Menu: Auto Tune Hotend PID");
-                // need to dwell for half a second to give the fan a chance to start before the pid tuning starts
-                injectCommands(F("M106 S204\nG4 P500\nM303 E0 S215 C15 U1"));
-                break;
-
-              case '9': // "<09HtBedPID>"
-                SERIAL_ECHOLNPGM("Special Menu: Auto Tune Hotbed Pid");
-                injectCommands(F("M303 E-1 S65 C6 U1"));
-                break;
-
-              default:
-                break;
-            }
+      case '1':
+        switch (selectedDirectory[2]) {
+          default: break;
+
+          case '0': // "<10FWDeflts>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Load FW Defaults"));
+            injectCommands(F("M502\nM300 P105 S1661\nM300 P210 S1108"));
+            break;
+
+          case '1': // "<11SvEEPROM>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Save EEPROM"));
+            injectCommands(F("M500\nM300 P105 S1108\nM300 P210 S1661"));
             break;
+        }
+        break;
 
-          case '1':
-            switch (SelectedDirectory[2]) {
-              case '0': // "<10FWDeflts>"
-                SERIAL_ECHOLNPGM("Special Menu: Load FW Defaults");
-                injectCommands(F("M502\nM300 P105 S1661\nM300 P210 S1108"));
-                break;
+    #else // !PROBE_MANUALLY
 
-              case '1': // "<11SvEEPROM>"
-                SERIAL_ECHOLNPGM("Special Menu: Save EEPROM");
-                injectCommands(F("M500\nM300 P105 S1108\nM300 P210 S1661"));
-                break;
+      case '0':
+        switch (selectedDirectory[2]) {
+          default: break;
 
-              default:
-                break;
-            }
+          case '1': // "<01PrehtBed>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Preheat Bed"));
+            injectCommands(F("M140 S65"));
             break;
-        #else // if ENABLED(PROBE_MANUALLY)
-          case '0':
-            switch (SelectedDirectory[2]) {
-              case '1': // "<01PrehtBed>"
-                SERIAL_ECHOLNPGM("Special Menu: Preheat Bed");
-                injectCommands(F("M140 S65"));
-                break;
-
-              case '2': // "<02ABL>"
-                SERIAL_ECHOLNPGM("Special Menu: Auto Bed Leveling");
-                injectCommands(F("G29N"));
-                break;
-
-              case '3': // "<03HtendPID>"
-                SERIAL_ECHOLNPGM("Special Menu: Auto Tune Hotend PID");
-                // need to dwell for half a second to give the fan a chance to start before the pid tuning starts
-                injectCommands(F("M106 S204\nG4 P500\nM303 E0 S215 C15 U1"));
-                break;
-
-              case '4': // "<04HtbedPID>"
-                SERIAL_ECHOLNPGM("Special Menu: Auto Tune Hotbed Pid");
-                injectCommands(F("M303 E-1 S65 C6 U1"));
-                break;
-
-              case '5': // "<05FWDeflts>"
-                SERIAL_ECHOLNPGM("Special Menu: Load FW Defaults");
-                injectCommands(F("M502\nM300 P105 S1661\nM300 P210 S1108"));
-                break;
-
-              case '6': // "<06SvEEPROM>"
-                SERIAL_ECHOLNPGM("Special Menu: Save EEPROM");
-                injectCommands(F("M500\nM300 P105 S1108\nM300 P210 S1661"));
-                break;
-
-              case '7': // <07SendM108>
-                SERIAL_ECHOLNPGM("Special Menu: Send User Confirmation");
-                injectCommands(F("M108"));
-                break;
-
-              default:
-                break;
-            }
+
+          case '2': // "<02ABL>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Auto Bed Leveling"));
+            injectCommands(F("G29N"));
             break;
-            #endif  // PROBE_MANUALLY
 
-          default:
+          case '3': // "<03HtendPID>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Auto Tune Hotend PID"));
+            // need to dwell for half a second to give the fan a chance to start before the pid tuning starts
+            injectCommands(F("M106 S204\nG4 P500\nM303 E0 S215 C15 U1"));
             break;
-    }
-    #if ENABLED(ANYCUBIC_LCD_DEBUG)
-  }
-  else {
-    SERIAL_ECHOPGM("TFT Serial Debug: Attempted to HandleSpecialMenu on non-special menu... ");
-    SERIAL_ECHOLN(SelectedDirectory);
-    #endif
+
+          case '4': // "<04HtbedPID>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Auto Tune Hotbed Pid"));
+            injectCommands(F("M303 E-1 S65 C6 U1"));
+            break;
+
+          case '5': // "<05FWDeflts>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Load FW Defaults"));
+            injectCommands(F("M502\nM300 P105 S1661\nM300 P210 S1108"));
+            break;
+
+          case '6': // "<06SvEEPROM>"
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Save EEPROM"));
+            injectCommands(F("M500\nM300 P105 S1108\nM300 P210 S1661"));
+            break;
+
+          case '7': // <07SendM108>
+            SERIAL_ECHOLNPGM("Special Menu: ", F("Send User Confirmation"));
+            injectCommands(F("M108"));
+            break;
+        }
+        break;
+
+    #endif // !PROBE_MANUALLY
   }
+
 }
 
-void AnycubicTFTClass::RenderCurrentFileList() {
+void AnycubicTFTClass::renderCurrentFileList() {
   #if HAS_MEDIA
     uint16_t selectedNumber = 0;
-    SelectedDirectory[0] = 0;
-    SelectedFile[0] = 0;
+    selectedDirectory[0] = 0;
+    selectedFile[0] = 0;
     FileList currentFileList;
 
     SENDLINE_PGM("FN "); // Filelist start
 
-    if (!isMediaInserted() && !SpecialMenu) {
+    if (!isMediaInserted() && !specialMenu) {
       SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to render Current File List... J02");
 
       SENDLINE_PGM("<SPECI~1.GCO");
       SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Special Menu>"));
     }
     else {
-      if (CodeSeen('S'))
-        selectedNumber = CodeValue();
+      if (codeSeen('S'))
+        selectedNumber = codeValue();
 
-      if (SpecialMenu)
-        RenderSpecialMenu(selectedNumber);
+      if (specialMenu)
+        renderSpecialMenu(selectedNumber);
       else if (selectedNumber <= currentFileList.count())
-        RenderCurrentFolder(selectedNumber);
+        renderCurrentFolder(selectedNumber);
     }
     SENDLINE_PGM("END"); // Filelist stop
   #endif // HAS_MEDIA
 }
 
-void AnycubicTFTClass::RenderSpecialMenu(uint16_t selectedNumber) {
+void AnycubicTFTClass::renderSpecialMenu(uint16_t selectedNumber) {
+
   switch (selectedNumber) {
+    default: break;
+
     #if ENABLED(PROBE_MANUALLY)
       case 0: // First Page
         SENDLINE_PGM("<01ZUP~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Z Up 0.1>"));
         SENDLINE_PGM("<02ZUP~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Z Up 0.02>"));
         SENDLINE_PGM("<03ZDO~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Z Down 0.02>"));
         SENDLINE_PGM("<04ZDO~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Z Down 0.1>"));
@@ -435,21 +414,23 @@ void AnycubicTFTClass::RenderSpecialMenu(uint16_t selectedNumber) {
       case 8: // Third Page
         SENDLINE_PGM("<09PID~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<PID Tune Hotbed>"));
         SENDLINE_PGM("<10FWD~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Load FW Defaults>"));
         SENDLINE_PGM("<11SAV~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Save EEPROM>"));
         SENDLINE_PGM("<EXIT_~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Exit>"));
         break;
-    #else
+
+    #else // !PROBE_MANUALLY
+
       case 0: // First Page
         SENDLINE_PGM("<01PRE~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Preheat Bed>"));
         SENDLINE_PGM("<02ABL~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Auto Bed Leveling>"));
         SENDLINE_PGM("<03PID~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_ALTNAME("<PID Tune Hotend>", "<Auto Tune Hotend PID>"));
         SENDLINE_PGM("<04PID~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_ALTNAME("<PID Tune Hotbed>", "<Auto Tune Hotbed PID>"));
         break;
@@ -458,548 +439,521 @@ void AnycubicTFTClass::RenderSpecialMenu(uint16_t selectedNumber) {
         SENDLINE_PGM("<05FWD~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Load FW Defaults>"));
         SENDLINE_PGM("<06SAV~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Save EEPROM>"));
         SENDLINE_PGM("<06SEN~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_ALTNAME("<User Confirmation>", "<Send User Confirmation>"));
         SENDLINE_PGM("<EXIT_~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Exit>"));
         break;
 
-        #endif // PROBE_MANUALLY
-
-      default:
-        break;
+    #endif // !PROBE_MANUALLY
   }
 }
 
-void AnycubicTFTClass::RenderCurrentFolder(uint16_t selectedNumber) {
+void AnycubicTFTClass::renderCurrentFolder(uint16_t selectedNumber) {
   FileList currentFileList;
-  uint16_t cnt = selectedNumber;
-  uint16_t max_files;
-  uint16_t dir_files = currentFileList.count();
-
-  if ((dir_files - selectedNumber) < 4)
-    max_files = dir_files;
-  else
-    max_files = selectedNumber + 3;
+  const uint16_t dir_files = currentFileList.count(),
+                 max_files = (dir_files - selectedNumber) < 4 ? dir_files : selectedNumber + 3;
 
-  for (cnt = selectedNumber; cnt <= max_files; cnt++) {
+  for (uint16_t cnt = selectedNumber; cnt <= max_files; cnt++) {
     if (cnt == 0) { // Special Entry
       if (currentFileList.isAtRootDir()) {
         SENDLINE_PGM("<SPECI~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Special Menu>"));
       }
       else {
         SENDLINE_PGM("/..");
         SENDLINE_PGM("/..");
       }
     }
     else {
       currentFileList.seek(cnt - 1, false);
 
-      #if ENABLED(ANYCUBIC_LCD_DEBUG)
-        SERIAL_ECHOLN(currentFileList.filename());
-      #endif
+      DEBUG_ECHOLN(currentFileList.filename());
       if (currentFileList.isDir()) {
         SEND_PGM("/");
         SENDLINE(currentFileList.shortFilename());
         SEND_PGM("/");
         SENDLINE(currentFileList.filename());
 
       }
       else {
         SENDLINE(currentFileList.shortFilename());
         SENDLINE(currentFileList.filename());
       }
     }
   }
 }
 
-void AnycubicTFTClass::OnPrintTimerStarted() {
+void AnycubicTFTClass::onPrintTimerStarted() {
   #if HAS_MEDIA
     if (mediaPrintingState == AMPRINTSTATE_PRINTING)
       SENDLINE_DBG_PGM("J04", "TFT Serial Debug: Starting SD Print... J04"); // J04 Starting Print
-
   #endif
 }
 
-void AnycubicTFTClass::OnPrintTimerPaused() {
+void AnycubicTFTClass::onPrintTimerPaused() {
   #if HAS_MEDIA
     if (isPrintingFromMedia()) {
       mediaPrintingState = AMPRINTSTATE_PAUSED;
       mediaPauseState    = AMPAUSESTATE_PARKING;
     }
   #endif
 }
 
-void AnycubicTFTClass::OnPrintTimerStopped() {
+void AnycubicTFTClass::onPrintTimerStopped() {
   #if HAS_MEDIA
     if (mediaPrintingState == AMPRINTSTATE_PRINTING) {
       mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
       SENDLINE_DBG_PGM("J14", "TFT Serial Debug: SD Print Completed... J14");
     }
     // otherwise it was stopped by the printer so don't send print completed signal to TFT
   #endif
 }
 
 #define ROUND(val) int((val)+0.5f)
 
-void AnycubicTFTClass::GetCommandFromTFT() {
+void AnycubicTFTClass::getCommandFromTFT() {
+  static int serial_count = 0;
+
   char *starpos = nullptr;
-  while (LCD_SERIAL.available() > 0  && TFTbuflen < TFTBUFSIZE) {
-    serial3_char = LCD_SERIAL.read();
-    if (serial3_char == '\n' ||
-        serial3_char == '\r' ||
-        serial3_char == ':'  ||
-        serial3_count >= (TFT_MAX_CMD_SIZE - 1)
-    ) {
-
-      if (!serial3_count) return; // if empty line
-
-      TFTcmdbuffer[TFTbufindw][serial3_count] = 0; // terminate string
-
-      if ((strchr(TFTcmdbuffer[TFTbufindw], 'A') != nullptr)) {
-        int16_t a_command;
-        TFTstrchr_pointer = strchr(TFTcmdbuffer[TFTbufindw], 'A');
-        a_command = ((int)((strtod(&TFTcmdbuffer[TFTbufindw][TFTstrchr_pointer - TFTcmdbuffer[TFTbufindw] + 1], nullptr))));
-
-        #if ENABLED(ANYCUBIC_LCD_DEBUG)
-          if ((a_command > 7) && (a_command != 20))   // No debugging of status polls, please!
-            SERIAL_ECHOLNPGM("TFT Serial Command: ", TFTcmdbuffer[TFTbufindw]);
-        #endif
-
-        switch (a_command) {
-          case 0: { // A0 GET HOTEND TEMP
-            const celsius_float_t hotendActualTemp = getActualTemp_celsius(E0);
-            SEND_PGM_VAL("A0V ", ROUND(hotendActualTemp));
-          }
-          break;
+  while (LCD_SERIAL.available() > 0 && tftBufLen < (TFTBUFSIZE)) {
+    char c = LCD_SERIAL.read();
+    if (c != '\n' && c != '\r' && c != ':' && serial_count < (TFT_MAX_CMD_SIZE - 1)) {
+      tftCommands[tftBufIndW][serial_count++] = c;
+      continue;
+    }
 
-          case 1: { // A1  GET HOTEND TARGET TEMP
-            const celsius_float_t hotendTargetTemp = getTargetTemp_celsius(E0);
-            SEND_PGM_VAL("A1V ", ROUND(hotendTargetTemp));
-          }
-          break;
+    if (!serial_count) return; // if empty line
 
-          case 2: { // A2 GET HOTBED TEMP
-            const celsius_float_t heatedBedActualTemp = getActualTemp_celsius(BED);
-            SEND_PGM_VAL("A2V ", ROUND(heatedBedActualTemp));
-          }
-          break;
+    tftCommands[tftBufIndW][serial_count] = 0; // terminate string
 
-          case 3: { // A3 GET HOTBED TARGET TEMP
-            const celsius_float_t heatedBedTargetTemp = getTargetTemp_celsius(BED);
-            SEND_PGM_VAL("A3V ", ROUND(heatedBedTargetTemp));
-          } break;
-
-          case 4: { // A4 GET FAN SPEED
-            SEND_PGM_VAL("A4V ", int(getActualFan_percent(FAN0)));
-          } break;
-
-          case 5: { // A5 GET CURRENT COORDINATE
-            const float xPosition = getAxisPosition_mm(X),
-                        yPosition = getAxisPosition_mm(Y),
-                        zPosition = getAxisPosition_mm(Z);
-            SEND_PGM("A5V X: "); LCD_SERIAL.print(xPosition);
-            SEND_PGM(   " Y: "); LCD_SERIAL.print(yPosition);
-            SEND_PGM(   " Z: "); LCD_SERIAL.print(zPosition);
-            SENDLINE_PGM("");
-          } break;
-
-          case 6: // A6 GET SD CARD PRINTING STATUS
-            #if HAS_MEDIA
-              if (isPrintingFromMedia()) {
-                SEND_PGM("A6V ");
-                if (isMediaInserted())
-                  SENDLINE(ui8tostr3rj(getProgress_percent()));
-                else
-                  SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to return printing status... J02");
-              }
-              else
-                SENDLINE_PGM("A6V ---");
-            #endif
-            break;
+    if ((strchr(tftCommands[tftBufIndW], 'A') != nullptr)) {
+      int16_t a_command;
+      tftStrchrPtr = strchr(tftCommands[tftBufIndW], 'A');
+      a_command = ((int)((strtod(&tftCommands[tftBufIndW][tftStrchrPtr - tftCommands[tftBufIndW] + 1], nullptr))));
+
+      if (a_command > 7 && a_command != 20) { // No debugging of status polls, please!
+        DEBUG_ECHOLNPGM("TFT Serial Command: ", tftCommands[tftBufIndW]);
+      }
+
+      switch (a_command) {
+        case 0: { // A0 GET HOTEND TEMP
+          const celsius_float_t hotendActualTemp = getActualTemp_celsius(E0);
+          SEND_PGM_VAL("A0V ", ROUND(hotendActualTemp));
+        }
+        break;
+
+        case 1: { // A1  GET HOTEND TARGET TEMP
+          const celsius_float_t hotendTargetTemp = getTargetTemp_celsius(E0);
+          SEND_PGM_VAL("A1V ", ROUND(hotendTargetTemp));
+        }
+        break;
+
+        case 2: { // A2 GET HOTBED TEMP
+          const celsius_float_t heatedBedActualTemp = getActualTemp_celsius(BED);
+          SEND_PGM_VAL("A2V ", ROUND(heatedBedActualTemp));
+        }
+        break;
 
-          case 7: { // A7 GET PRINTING TIME
-            const uint32_t elapsedSeconds = getProgress_seconds_elapsed();
-            SEND_PGM("A7V ");
-            if (elapsedSeconds != 0) {  // print time
-              const uint32_t elapsedMinutes = elapsedSeconds / 60;
-              SEND(ui8tostr2(elapsedMinutes / 60));
-              SEND_PGM(" H ");
-              SEND(ui8tostr2(elapsedMinutes % 60));
-              SENDLINE_PGM(" M");
+        case 3: { // A3 GET HOTBED TARGET TEMP
+          const celsius_float_t heatedBedTargetTemp = getTargetTemp_celsius(BED);
+          SEND_PGM_VAL("A3V ", ROUND(heatedBedTargetTemp));
+        } break;
+
+        case 4: { // A4 GET FAN SPEED
+          SEND_PGM_VAL("A4V ", int(getActualFan_percent(FAN0)));
+        } break;
+
+        case 5: { // A5 GET CURRENT COORDINATE
+          const float xPosition = getAxisPosition_mm(X),
+                      yPosition = getAxisPosition_mm(Y),
+                      zPosition = getAxisPosition_mm(Z);
+          SEND_PGM("A5V X: "); LCD_SERIAL.print(xPosition);
+          SEND_PGM(   " Y: "); LCD_SERIAL.print(yPosition);
+          SEND_PGM(   " Z: "); LCD_SERIAL.print(zPosition);
+          SENDLINE_PGM("");
+        } break;
+
+        case 6: // A6 GET SD CARD PRINTING STATUS
+          #if HAS_MEDIA
+            if (isPrintingFromMedia()) {
+              SEND_PGM("A6V ");
+              if (isMediaInserted())
+                SENDLINE(ui8tostr3rj(getProgress_percent()));
+              else
+                SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to return printing status... J02");
             }
             else
-              SENDLINE_PGM(" 999:999");
-          }
+              SENDLINE_PGM("A6V ---");
+          #endif
           break;
 
-          case 8: // A8 GET  SD LIST
-            #if HAS_MEDIA
-              SelectedFile[0] = 0;
-              RenderCurrentFileList();
-            #endif
-            break;
-
-          case 9: // A9 pause sd print
-            #if HAS_MEDIA
-              if (isPrintingFromMedia())
-                PausePrint();
-            #endif
-            break;
+        case 7: { // A7 GET PRINTING TIME
+          const uint32_t elapsedSeconds = getProgress_seconds_elapsed();
+          SEND_PGM("A7V ");
+          if (elapsedSeconds != 0) {  // print time
+            const uint32_t elapsedMinutes = elapsedSeconds / 60;
+            SEND(ui8tostr2(elapsedMinutes / 60));
+            SEND_PGM(" H ");
+            SEND(ui8tostr2(elapsedMinutes % 60));
+            SENDLINE_PGM(" M");
+          }
+          else
+            SENDLINE_PGM(" 999:999");
+        }
+        break;
 
-          case 10: // A10 resume sd print
-            #if HAS_MEDIA
-              if (isPrintingFromMediaPaused())
-                ResumePrint();
-            #endif
-            break;
+        case 8: // A8 GET  SD LIST
+          #if HAS_MEDIA
+            selectedFile[0] = 0;
+            renderCurrentFileList();
+          #endif
+          break;
 
-          case 11: // A11 STOP SD PRINT
-            TERN_(HAS_MEDIA, StopPrint());
-            break;
+        case 9: // A9 pause sd print
+          TERN_(HAS_MEDIA, if (isPrintingFromMedia()) pausePrint());
+          break;
 
-          case 12: // A12 kill
-            kill(F(STR_ERR_KILLED));
-            break;
+        case 10: // A10 resume sd print
+          #if HAS_MEDIA
+            if (isPrintingFromMediaPaused())
+              resumePrint();
+          #endif
+          break;
 
-          case 13: // A13 SELECTION FILE
-            #if HAS_MEDIA
-              if (isMediaInserted()) {
-                starpos = (strchr(TFTstrchr_pointer + 4, '*'));
-                if (TFTstrchr_pointer[4] == '/') {
-                  strcpy(SelectedDirectory, TFTstrchr_pointer + 5);
-                  SelectedFile[0] = 0;
-                  SENDLINE_DBG_PGM("J21", "TFT Serial Debug: Clear file selection... J21 "); // J21 Not File Selected
-                  SENDLINE_PGM("");
-                }
-                else if (TFTstrchr_pointer[4] == '<') {
-                  strcpy(SelectedDirectory, TFTstrchr_pointer + 4);
-                  SpecialMenu = true;
-                  SelectedFile[0] = 0;
-                  SENDLINE_DBG_PGM("J21", "TFT Serial Debug: Clear file selection... J21 "); // J21 Not File Selected
-                  SENDLINE_PGM("");
-                }
-                else {
-                  SelectedDirectory[0] = 0;
+        case 11: // A11 STOP SD PRINT
+          TERN_(HAS_MEDIA, stopPrint());
+          break;
 
-                  if (starpos) *(starpos - 1) = '\0';
+        case 12: // A12 kill
+          kill(F(STR_ERR_KILLED));
+          break;
 
-                  strcpy(SelectedFile, TFTstrchr_pointer + 4);
-                  SENDLINE_DBG_PGM_VAL("J20", "TFT Serial Debug: File Selected... J20 ", SelectedFile); // J20 File Selected
-                }
+        case 13: // A13 SELECTION FILE
+          #if HAS_MEDIA
+            if (isMediaInserted()) {
+              starpos = (strchr(tftStrchrPtr + 4, '*'));
+              if (tftStrchrPtr[4] == '/') {
+                strcpy(selectedDirectory, tftStrchrPtr + 5);
+                selectedFile[0] = 0;
+                SENDLINE_DBG_PGM("J21", "TFT Serial Debug: Clear file selection... J21 "); // J21 Not File Selected
+                SENDLINE_PGM("");
               }
-            #endif
-            break;
-
-          case 14: // A14 START PRINTING
-            #if HAS_MEDIA
-              if (!isPrinting() && strlen(SelectedFile) > 0)
-                StartPrint();
-            #endif
-            break;
+              else if (tftStrchrPtr[4] == '<') {
+                strcpy(selectedDirectory, tftStrchrPtr + 4);
+                specialMenu = true;
+                selectedFile[0] = 0;
+                SENDLINE_DBG_PGM("J21", "TFT Serial Debug: Clear file selection... J21 "); // J21 Not File Selected
+                SENDLINE_PGM("");
+              }
+              else {
+                selectedDirectory[0] = 0;
 
-          case 15: // A15 RESUMING FROM OUTAGE
-            // TODO: JBA implement resume form outage
-            break;
+                if (starpos) *(starpos - 1) = '\0';
 
-          case 16: { // A16 set hotend temp
-            uint16_t tempvalue;
-            if (CodeSeen('S')) {
-              tempvalue = constrain(CodeValue(), 0, 275);
-              setTargetTemp_celsius(tempvalue, (extruder_t)E0);
-            }
-            else if (CodeSeen('C') && !isPrinting()) {
-              if (getAxisPosition_mm(Z) < 10)
-                injectCommands(F("G1 Z10")); // RASE Z AXIS
-              tempvalue = constrain(CodeValue(), 0, 275);
-              setTargetTemp_celsius(tempvalue, (extruder_t)E0);
+                strcpy(selectedFile, tftStrchrPtr + 4);
+                SENDLINE_DBG_PGM_VAL("J20", "TFT Serial Debug: File Selected... J20 ", selectedFile); // J20 File Selected
+              }
             }
-          }
+          #endif
           break;
 
-          case 17: { // A17 set heated bed temp
-            uint16_t tempbed;
-            if (CodeSeen('S')) {
-              tempbed = constrain(CodeValue(), 0, 100);
-              setTargetTemp_celsius(tempbed, (heater_t)BED);
-            }
-          }
+        case 14: // A14 START PRINTING
+          #if HAS_MEDIA
+            if (!isPrinting() && strlen(selectedFile) > 0)
+              startPrint();
+          #endif
           break;
 
-          case 18: { // A18 set fan speed
-            float fanPercent;
-            if (CodeSeen('S')) {
-              fanPercent = CodeValue();
-              fanPercent = constrain(fanPercent, 0, 100);
-              setTargetFan_percent(fanPercent, FAN0);
-            }
-            else
-              fanPercent = 100;
+        case 15: // A15 RESUMING FROM OUTAGE
+          // TODO: JBA implement resume form outage
+          break;
 
+        case 16: { // A16 set hotend temp
+          uint16_t tempvalue;
+          if (codeSeen('S')) {
+            tempvalue = constrain(codeValue(), 0, 275);
+            setTargetTemp_celsius(tempvalue, (extruder_t)E0);
+          }
+          else if (codeSeen('C') && !isPrinting()) {
+            if (getAxisPosition_mm(Z) < 10)
+              injectCommands(F("G1 Z10")); // RASE Z AXIS
+            tempvalue = constrain(codeValue(), 0, 275);
+            setTargetTemp_celsius(tempvalue, (extruder_t)E0);
+          }
+        }
+        break;
+
+        case 17: { // A17 set heated bed temp
+          uint16_t tempbed;
+          if (codeSeen('S')) {
+            tempbed = constrain(codeValue(), 0, 100);
+            setTargetTemp_celsius(tempbed, (heater_t)BED);
+          }
+        }
+        break;
+
+        case 18: { // A18 set fan speed
+          float fanPercent;
+          if (codeSeen('S')) {
+            fanPercent = codeValue();
+            fanPercent = constrain(fanPercent, 0, 100);
             setTargetFan_percent(fanPercent, FAN0);
-            SENDLINE_PGM("");
           }
-          break;
+          else
+            fanPercent = 100;
 
-          case 19: // A19 stop stepper drivers - sent on stop extrude command and on turn motors off command
-            if (!isPrinting()) {
-              quickstop_stepper();
-              stepper.disable_all_steppers();
-            }
+          setTargetFan_percent(fanPercent, FAN0);
+          SENDLINE_PGM("");
+        }
+        break;
 
-            SENDLINE_PGM("");
-            break;
+        case 19: // A19 stop stepper drivers - sent on stop extrude command and on turn motors off command
+          if (!isPrinting()) {
+            quickstop_stepper();
+            stepper.disable_all_steppers();
+          }
 
-          case 20: // A20 read printing speed
-            if (CodeSeen('S'))
-              feedrate_percentage = constrain(CodeValue(), 40, 999);
-            else
-              SEND_PGM_VAL("A20V ", feedrate_percentage);
-            break;
+          SENDLINE_PGM("");
+          break;
 
-          case 21: // A21 all home
-            if (!isPrinting() && !isPrintingFromMediaPaused()) {
-              if (CodeSeen('X') || CodeSeen('Y') || CodeSeen('Z')) {
-                if (CodeSeen('X'))
-                  injectCommands(F("G28X"));
-                if (CodeSeen('Y'))
-                  injectCommands(F("G28Y"));
-                if (CodeSeen('Z'))
-                  injectCommands(F("G28Z"));
-              }
-              else if (CodeSeen('C')) {
-                injectCommands_P(G28_STR);
-              }
+        case 20: // A20 read printing speed
+          if (codeSeen('S'))
+            feedrate_percentage = constrain(codeValue(), 40, 999);
+          else
+            SEND_PGM_VAL("A20V ", feedrate_percentage);
+          break;
+
+        case 21: // A21 all home
+          if (!isPrinting() && !isPrintingFromMediaPaused()) {
+            if (codeSeen('X') || codeSeen('Y') || codeSeen('Z')) {
+              if (codeSeen('X'))
+                injectCommands(F("G28X"));
+              if (codeSeen('Y'))
+                injectCommands(F("G28Y"));
+              if (codeSeen('Z'))
+                injectCommands(F("G28Z"));
             }
-            break;
+            else if (codeSeen('C')) {
+              injectCommands_P(G28_STR);
+            }
+          }
+          break;
 
-          case 22: // A22 move X/Y/Z or extrude
-            if (!isPrinting()) {
-              float coorvalue;
-              uint16_t movespeed = 0;
-              char commandStr[30];
-              char fullCommandStr[38];
-
-              commandStr[0] = 0; // empty string
-              if (CodeSeen('F'))  // Set feedrate
-                movespeed = CodeValue();
-
-              if (CodeSeen('X')) { // Move in X direction
-                coorvalue = CodeValue();
-                if ((coorvalue <= 0.2) && coorvalue > 0)
-                  sprintf_P(commandStr, PSTR("G1 X0.1F%i"), movespeed);
-                else if ((coorvalue <= -0.1) && coorvalue > -1)
-                  sprintf_P(commandStr, PSTR("G1 X-0.1F%i"), movespeed);
-                else
-                  sprintf_P(commandStr, PSTR("G1 X%iF%i"), int(coorvalue), movespeed);
-              }
-              else if (CodeSeen('Y')) {  // Move in Y direction
-                coorvalue = CodeValue();
-                if ((coorvalue <= 0.2) && coorvalue > 0)
-                  sprintf_P(commandStr, PSTR("G1 Y0.1F%i"), movespeed);
-                else if ((coorvalue <= -0.1) && coorvalue > -1)
-                  sprintf_P(commandStr, PSTR("G1 Y-0.1F%i"), movespeed);
-                else
-                  sprintf_P(commandStr, PSTR("G1 Y%iF%i"), int(coorvalue), movespeed);
-              }
-              else if (CodeSeen('Z')) {  // Move in Z direction
-                coorvalue = CodeValue();
-                if ((coorvalue <= 0.2) && coorvalue > 0)
-                  sprintf_P(commandStr, PSTR("G1 Z0.1F%i"), movespeed);
-                else if ((coorvalue <= -0.1) && coorvalue > -1)
-                  sprintf_P(commandStr, PSTR("G1 Z-0.1F%i"), movespeed);
-                else
-                  sprintf_P(commandStr, PSTR("G1 Z%iF%i"), int(coorvalue), movespeed);
-              }
-              else if (CodeSeen('E')) { // Extrude
-                coorvalue = CodeValue();
-                if ((coorvalue <= 0.2) && coorvalue > 0)
-                  sprintf_P(commandStr, PSTR("G1 E0.1F%i"), movespeed);
-                else if ((coorvalue <= -0.1) && coorvalue > -1)
-                  sprintf_P(commandStr, PSTR("G1 E-0.1F%i"), movespeed);
-                else
-                  sprintf_P(commandStr, PSTR("G1 E%iF500"), int(coorvalue));
-              }
+        case 22: // A22 move X/Y/Z or extrude
+          if (!isPrinting()) {
+            float coorvalue;
+            uint16_t movespeed = 0;
+            char commandStr[30];
+            char fullCommandStr[38];
+
+            commandStr[0] = 0; // empty string
+            if (codeSeen('F'))  // Set feedrate
+              movespeed = codeValue();
+
+            if (codeSeen('X')) { // Move in X direction
+              coorvalue = codeValue();
+              if ((coorvalue <= 0.2) && coorvalue > 0)
+                sprintf_P(commandStr, PSTR("G1 X0.1F%i"), movespeed);
+              else if ((coorvalue <= -0.1) && coorvalue > -1)
+                sprintf_P(commandStr, PSTR("G1 X-0.1F%i"), movespeed);
+              else
+                sprintf_P(commandStr, PSTR("G1 X%iF%i"), int(coorvalue), movespeed);
+            }
+            else if (codeSeen('Y')) {  // Move in Y direction
+              coorvalue = codeValue();
+              if ((coorvalue <= 0.2) && coorvalue > 0)
+                sprintf_P(commandStr, PSTR("G1 Y0.1F%i"), movespeed);
+              else if ((coorvalue <= -0.1) && coorvalue > -1)
+                sprintf_P(commandStr, PSTR("G1 Y-0.1F%i"), movespeed);
+              else
+                sprintf_P(commandStr, PSTR("G1 Y%iF%i"), int(coorvalue), movespeed);
+            }
+            else if (codeSeen('Z')) {  // Move in Z direction
+              coorvalue = codeValue();
+              if ((coorvalue <= 0.2) && coorvalue > 0)
+                sprintf_P(commandStr, PSTR("G1 Z0.1F%i"), movespeed);
+              else if ((coorvalue <= -0.1) && coorvalue > -1)
+                sprintf_P(commandStr, PSTR("G1 Z-0.1F%i"), movespeed);
+              else
+                sprintf_P(commandStr, PSTR("G1 Z%iF%i"), int(coorvalue), movespeed);
+            }
+            else if (codeSeen('E')) { // Extrude
+              coorvalue = codeValue();
+              if ((coorvalue <= 0.2) && coorvalue > 0)
+                sprintf_P(commandStr, PSTR("G1 E0.1F%i"), movespeed);
+              else if ((coorvalue <= -0.1) && coorvalue > -1)
+                sprintf_P(commandStr, PSTR("G1 E-0.1F%i"), movespeed);
+              else
+                sprintf_P(commandStr, PSTR("G1 E%iF500"), int(coorvalue));
+            }
 
-              if (strlen(commandStr) > 0) {
-                sprintf_P(fullCommandStr, PSTR("G91\n%s\nG90"), commandStr);
-                #if ENABLED(ANYCUBIC_LCD_DEBUG)
-                  SERIAL_ECHOPGM("TFT Serial Debug: A22 Move final request with gcode... ");
-                  SERIAL_ECHOLN(fullCommandStr);
-                #endif
-                injectCommands(fullCommandStr);
-              }
+            if (strlen(commandStr) > 0) {
+              sprintf_P(fullCommandStr, PSTR("G91\n%s\nG90"), commandStr);
+              DEBUG_ECHOPGM("TFT Serial Debug: A22 Move final request with gcode... ");
+              DEBUG_ECHOLN(fullCommandStr);
+              injectCommands(fullCommandStr);
             }
-            SENDLINE_PGM("");
-            break;
+          }
+          SENDLINE_PGM("");
+          break;
 
-          case 23: // A23 preheat pla
-            if (!isPrinting()) {
-              if (getAxisPosition_mm(Z) < 10)
-                injectCommands(F("G1 Z10")); // RASE Z AXIS
+        case 23: // A23 preheat pla
+          if (!isPrinting()) {
+            if (getAxisPosition_mm(Z) < 10)
+              injectCommands(F("G1 Z10")); // RASE Z AXIS
 
-              setTargetTemp_celsius(PREHEAT_1_TEMP_BED, (heater_t)BED);
-              setTargetTemp_celsius(PREHEAT_1_TEMP_HOTEND, (extruder_t)E0);
-              SENDLINE_PGM("OK");
-            }
-            break;
+            setTargetTemp_celsius(PREHEAT_1_TEMP_BED, (heater_t)BED);
+            setTargetTemp_celsius(PREHEAT_1_TEMP_HOTEND, (extruder_t)E0);
+            SENDLINE_PGM("OK");
+          }
+          break;
 
-          case 24:// A24 preheat abs
-            if (!isPrinting()) {
-              if (getAxisPosition_mm(Z) < 10)
-                injectCommands(F("G1 Z10")); // RASE Z AXIS
+        case 24:// A24 preheat abs
+          if (!isPrinting()) {
+            if (getAxisPosition_mm(Z) < 10)
+              injectCommands(F("G1 Z10")); // RASE Z AXIS
 
-              setTargetTemp_celsius(PREHEAT_2_TEMP_BED, (heater_t)BED);
-              setTargetTemp_celsius(PREHEAT_2_TEMP_HOTEND, (extruder_t)E0);
-              SENDLINE_PGM("OK");
-            }
-            break;
+            setTargetTemp_celsius(PREHEAT_2_TEMP_BED, (heater_t)BED);
+            setTargetTemp_celsius(PREHEAT_2_TEMP_HOTEND, (extruder_t)E0);
+            SENDLINE_PGM("OK");
+          }
+          break;
 
-          case 25: // A25 cool down
-            if (!isPrinting()) {
-              setTargetTemp_celsius(0, (heater_t) BED);
-              setTargetTemp_celsius(0, (extruder_t) E0);
+        case 25: // A25 cool down
+          if (!isPrinting()) {
+            setTargetTemp_celsius(0, (heater_t) BED);
+            setTargetTemp_celsius(0, (extruder_t) E0);
 
-              SENDLINE_DBG_PGM("J12", "TFT Serial Debug: Cooling down... J12"); // J12 cool down
-            }
-            break;
+            SENDLINE_DBG_PGM("J12", "TFT Serial Debug: Cooling down... J12"); // J12 cool down
+          }
+          break;
 
-          case 26: // A26 refresh SD
-            #if HAS_MEDIA
-              if (isMediaInserted()) {
-                if (strlen(SelectedDirectory) > 0) {
-                  FileList currentFileList;
-                  if ((SelectedDirectory[0] == '.') && (SelectedDirectory[1] == '.')) {
-                    currentFileList.upDir();
-                  }
-                  else {
-                    if (SelectedDirectory[0] == '<')
-                      HandleSpecialMenu();
-                    else
-                      currentFileList.changeDir(SelectedDirectory);
-                  }
+        case 26: // A26 refresh SD
+          #if HAS_MEDIA
+            if (isMediaInserted()) {
+              if (strlen(selectedDirectory) > 0) {
+                FileList currentFileList;
+                if ((selectedDirectory[0] == '.') && (selectedDirectory[1] == '.')) {
+                  currentFileList.upDir();
+                }
+                else {
+                  if (selectedDirectory[0] == '<')
+                    handleSpecialMenu();
+                  else
+                    currentFileList.changeDir(selectedDirectory);
                 }
               }
-              else {
-                SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to refresh SD A26... J02");
-              }
+            }
+            else {
+              SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to refresh SD A26... J02");
+            }
 
-              SelectedDirectory[0] = 0;
-            #endif
-            break;
+            selectedDirectory[0] = 0;
+          #endif
+          break;
 
-            #if ENABLED(SERVO_ENDSTOPS)
-              case 27: break; // A27 servos angles adjust
-            #endif
+          #if ENABLED(SERVO_ENDSTOPS)
+            case 27: break; // A27 servos angles adjust
+          #endif
 
-          case 28: // A28 filament test
-            if (CodeSeen('O'))
-              NOOP;
-            else if (CodeSeen('C'))
-              NOOP;
-            SENDLINE_PGM("");
-            break;
+        case 28: // A28 filament test
+          if (codeSeen('O'))
+            NOOP;
+          else if (codeSeen('C'))
+            NOOP;
+          SENDLINE_PGM("");
+          break;
 
-          case 33: // A33 get version info
-            SEND_PGM("J33 ");
-            SENDLINE_PGM(DETAILED_BUILD_VERSION);
-            break;
+        case 33: // A33 get version info
+          SEND_PGM("J33 ");
+          SENDLINE_PGM(DETAILED_BUILD_VERSION);
+          break;
 
-          default:
-            break;
-        }
+        default:
+          break;
       }
-
-      TFTbufindw = (TFTbufindw + 1) % TFTBUFSIZE;
-      TFTbuflen += 1;
-      serial3_count = 0; // clear buffer
-    }
-    else {
-      TFTcmdbuffer[TFTbufindw][serial3_count++] = serial3_char;
     }
-  }
+
+    tftBufIndW = (tftBufIndW + 1) % (TFTBUFSIZE);
+    tftBufLen++;
+    serial_count = 0; // clear buffer
+
+  } // while
 }
 
-void AnycubicTFTClass::DoSDCardStateCheck() {
+void AnycubicTFTClass::doSDCardStateCheck() {
   #if BOTH(HAS_MEDIA, HAS_SD_DETECT)
     bool isInserted = isMediaInserted();
     if (isInserted)
       SENDLINE_DBG_PGM("J00", "TFT Serial Debug: SD card state changed... isInserted");
     else
       SENDLINE_DBG_PGM("J01", "TFT Serial Debug: SD card state changed... !isInserted");
 
   #endif
 }
 
-void AnycubicTFTClass::DoFilamentRunoutCheck() {
+void AnycubicTFTClass::doFilamentRunoutCheck() {
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     // NOTE: getFilamentRunoutState() only returns the runout state if the job is printing
     // we want to actually check the status of the pin here, regardless of printstate
     if (READ(FIL_RUNOUT1_PIN)) {
       if (mediaPrintingState == AMPRINTSTATE_PRINTING || mediaPrintingState == AMPRINTSTATE_PAUSED || mediaPrintingState == AMPRINTSTATE_PAUSE_REQUESTED) {
         // play tone to indicate filament is out
         injectCommands(F("\nM300 P200 S1567\nM300 P200 S1174\nM300 P200 S1567\nM300 P200 S1174\nM300 P2000 S1567"));
 
         // tell the user that the filament has run out and wait
         SENDLINE_DBG_PGM("J23", "TFT Serial Debug: Blocking filament prompt... J23");
       }
       else {
         SENDLINE_DBG_PGM("J15", "TFT Serial Debug: Non blocking filament runout... J15");
       }
     }
   #endif // FILAMENT_RUNOUT_SENSOR
 }
 
-void AnycubicTFTClass::StartPrint() {
+void AnycubicTFTClass::startPrint() {
   #if HAS_MEDIA
-    if (!isPrinting() && strlen(SelectedFile) > 0) {
-      #if ENABLED(ANYCUBIC_LCD_DEBUG)
-        SERIAL_ECHOPGM("TFT Serial Debug: About to print file ... ");
-        SERIAL_ECHO(isPrinting());
-        SERIAL_ECHOPGM(" ");
-        SERIAL_ECHOLN(SelectedFile);
-      #endif
+    if (!isPrinting() && strlen(selectedFile) > 0) {
+      DEBUG_ECHOLNPGM("TFT Serial Debug: About to print file ... ", isPrinting(), " ", selectedFile);
       mediaPrintingState = AMPRINTSTATE_PRINTING;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
-      printFile(SelectedFile);
+      printFile(selectedFile);
     }
   #endif // SDUPPORT
 }
 
-void AnycubicTFTClass::PausePrint() {
+void AnycubicTFTClass::pausePrint() {
   #if HAS_MEDIA
     if (isPrintingFromMedia() && mediaPrintingState != AMPRINTSTATE_STOP_REQUESTED && mediaPauseState == AMPAUSESTATE_NOT_PAUSED) {
       mediaPrintingState = AMPRINTSTATE_PAUSE_REQUESTED;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED; // need the userconfirm method to update pause state
       SENDLINE_DBG_PGM("J05", "TFT Serial Debug: SD print pause started... J05"); // J05 printing pause
 
       // for some reason pausing the print doesn't retract the extruder so force a manual one here
       injectCommands(F("G91\nG1 E-2 F1800\nG90"));
       pausePrint();
     }
   #endif
 }
 
-void AnycubicTFTClass::ResumePrint() {
+void AnycubicTFTClass::resumePrint() {
   #if HAS_MEDIA
     #if ENABLED(FILAMENT_RUNOUT_SENSOR)
       if (READ(FIL_RUNOUT1_PIN)) {
-        #if ENABLED(ANYCUBIC_LCD_DEBUG)
-          SERIAL_ECHOLNPGM("TFT Serial Debug: Resume Print with filament sensor still tripped... ");
-        #endif
+        DEBUG_ECHOLNPGM("TFT Serial Debug: Resume Print with filament sensor still tripped... ");
 
         // trigger the user message box
-        DoFilamentRunoutCheck();
+        doFilamentRunoutCheck();
 
         // re-enable the continue button
         SENDLINE_DBG_PGM("J18", "TFT Serial Debug: Resume Print with filament sensor still tripped... J18");
         return;
       }
     #endif
 
     if (mediaPauseState == AMPAUSESTATE_HEATER_TIMEOUT) {
       mediaPauseState = AMPAUSESTATE_REHEATING;
       // TODO: JBA I don't think J05 just disables the continue button, i think it injects a rogue M25. So taking this out
@@ -1012,21 +966,21 @@ void AnycubicTFTClass::ResumePrint() {
     else {
       mediaPrintingState = AMPRINTSTATE_PRINTING;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
 
       SENDLINE_DBG_PGM("J04", "TFT Serial Debug: SD print resumed... J04"); // J04 printing form sd card now
       resumePrint();
     }
   #endif
 }
 
-void AnycubicTFTClass::StopPrint() {
+void AnycubicTFTClass::stopPrint() {
   #if HAS_MEDIA
     mediaPrintingState = AMPRINTSTATE_STOP_REQUESTED;
     mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
     SENDLINE_DBG_PGM("J16", "TFT Serial Debug: SD print stop called... J16");
 
     // for some reason stopping the print doesn't retract the extruder so force a manual one here
     injectCommands(F("G91\nG1 E-2 F1800\nG90"));
     stopPrint();
   #endif
 }

commit 5664c02d077e028f84a24efd96c2eebe97ce8763
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 22:43:09 2023 -0500

    üßë‚Äçüíª Generalize SDSUPPORT as HAS_MEDIA
    
    In preparation for single- and multi-volume refactoring.

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index 1bc52bfcaf..36b24861fe 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -87,21 +87,21 @@ AnycubicTFTClass::AnycubicTFTClass() {}
 void AnycubicTFTClass::OnSetup() {
   #ifndef LCD_BAUDRATE
     #define LCD_BAUDRATE 115200
   #endif
   LCD_SERIAL.begin(LCD_BAUDRATE);
 
   SENDLINE_DBG_PGM("J17", "TFT Serial Debug: Main board reset... J17"); // J17 Main board reset
   delay_ms(10);
 
   // Init the state of the key pins running on the TFT
-  #if BOTH(SDSUPPORT, HAS_SD_DETECT)
+  #if BOTH(HAS_MEDIA, HAS_SD_DETECT)
     SET_INPUT_PULLUP(SD_DETECT_PIN);
   #endif
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     SET_INPUT_PULLUP(FIL_RUNOUT1_PIN);
   #endif
 
   mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
   mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
 
   // DoSDCardStateCheck();
@@ -169,21 +169,21 @@ void AnycubicTFTClass::OnFilamentRunout() {
     SERIAL_ECHOLNPGM("TFT Serial Debug: FilamentRunout triggered...");
   #endif
   DoFilamentRunoutCheck();
 }
 
 void AnycubicTFTClass::OnUserConfirmRequired(const char * const msg) {
   #if ENABLED(ANYCUBIC_LCD_DEBUG)
     SERIAL_ECHOLNPGM("TFT Serial Debug: OnUserConfirmRequired triggered... ", msg);
   #endif
 
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     /**
      * Need to handle the process of following states
      * "Nozzle Parked"
      * "Load Filament"
      * "Filament Purging..."
      * "HeaterTimeout"
      * "Reheat finished."
      *
      * NOTE:  The only way to handle these states is strcmp_P with the msg unfortunately (very expensive)
      */
@@ -373,21 +373,21 @@ void AnycubicTFTClass::HandleSpecialMenu() {
     #if ENABLED(ANYCUBIC_LCD_DEBUG)
   }
   else {
     SERIAL_ECHOPGM("TFT Serial Debug: Attempted to HandleSpecialMenu on non-special menu... ");
     SERIAL_ECHOLN(SelectedDirectory);
     #endif
   }
 }
 
 void AnycubicTFTClass::RenderCurrentFileList() {
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     uint16_t selectedNumber = 0;
     SelectedDirectory[0] = 0;
     SelectedFile[0] = 0;
     FileList currentFileList;
 
     SENDLINE_PGM("FN "); // Filelist start
 
     if (!isMediaInserted() && !SpecialMenu) {
       SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to render Current File List... J02");
 
@@ -397,21 +397,21 @@ void AnycubicTFTClass::RenderCurrentFileList() {
     else {
       if (CodeSeen('S'))
         selectedNumber = CodeValue();
 
       if (SpecialMenu)
         RenderSpecialMenu(selectedNumber);
       else if (selectedNumber <= currentFileList.count())
         RenderCurrentFolder(selectedNumber);
     }
     SENDLINE_PGM("END"); // Filelist stop
-  #endif // SDSUPPORT
+  #endif // HAS_MEDIA
 }
 
 void AnycubicTFTClass::RenderSpecialMenu(uint16_t selectedNumber) {
   switch (selectedNumber) {
     #if ENABLED(PROBE_MANUALLY)
       case 0: // First Page
         SENDLINE_PGM("<01ZUP~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Z Up 0.1>"));
         SENDLINE_PGM("<02ZUP~1.GCO");
         SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Z Up 0.02>"));
@@ -509,38 +509,38 @@ void AnycubicTFTClass::RenderCurrentFolder(uint16_t selectedNumber) {
       }
       else {
         SENDLINE(currentFileList.shortFilename());
         SENDLINE(currentFileList.filename());
       }
     }
   }
 }
 
 void AnycubicTFTClass::OnPrintTimerStarted() {
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     if (mediaPrintingState == AMPRINTSTATE_PRINTING)
       SENDLINE_DBG_PGM("J04", "TFT Serial Debug: Starting SD Print... J04"); // J04 Starting Print
 
   #endif
 }
 
 void AnycubicTFTClass::OnPrintTimerPaused() {
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     if (isPrintingFromMedia()) {
       mediaPrintingState = AMPRINTSTATE_PAUSED;
       mediaPauseState    = AMPAUSESTATE_PARKING;
     }
   #endif
 }
 
 void AnycubicTFTClass::OnPrintTimerStopped() {
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     if (mediaPrintingState == AMPRINTSTATE_PRINTING) {
       mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
       SENDLINE_DBG_PGM("J14", "TFT Serial Debug: SD Print Completed... J14");
     }
     // otherwise it was stopped by the printer so don't send print completed signal to TFT
   #endif
 }
 
 #define ROUND(val) int((val)+0.5f)
@@ -601,21 +601,21 @@ void AnycubicTFTClass::GetCommandFromTFT() {
             const float xPosition = getAxisPosition_mm(X),
                         yPosition = getAxisPosition_mm(Y),
                         zPosition = getAxisPosition_mm(Z);
             SEND_PGM("A5V X: "); LCD_SERIAL.print(xPosition);
             SEND_PGM(   " Y: "); LCD_SERIAL.print(yPosition);
             SEND_PGM(   " Z: "); LCD_SERIAL.print(zPosition);
             SENDLINE_PGM("");
           } break;
 
           case 6: // A6 GET SD CARD PRINTING STATUS
-            #if ENABLED(SDSUPPORT)
+            #if HAS_MEDIA
               if (isPrintingFromMedia()) {
                 SEND_PGM("A6V ");
                 if (isMediaInserted())
                   SENDLINE(ui8tostr3rj(getProgress_percent()));
                 else
                   SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to return printing status... J02");
               }
               else
                 SENDLINE_PGM("A6V ---");
             #endif
@@ -630,50 +630,50 @@ void AnycubicTFTClass::GetCommandFromTFT() {
               SEND_PGM(" H ");
               SEND(ui8tostr2(elapsedMinutes % 60));
               SENDLINE_PGM(" M");
             }
             else
               SENDLINE_PGM(" 999:999");
           }
           break;
 
           case 8: // A8 GET  SD LIST
-            #if ENABLED(SDSUPPORT)
+            #if HAS_MEDIA
               SelectedFile[0] = 0;
               RenderCurrentFileList();
             #endif
             break;
 
           case 9: // A9 pause sd print
-            #if ENABLED(SDSUPPORT)
+            #if HAS_MEDIA
               if (isPrintingFromMedia())
                 PausePrint();
             #endif
             break;
 
           case 10: // A10 resume sd print
-            #if ENABLED(SDSUPPORT)
+            #if HAS_MEDIA
               if (isPrintingFromMediaPaused())
                 ResumePrint();
             #endif
             break;
 
           case 11: // A11 STOP SD PRINT
-            TERN_(SDSUPPORT, StopPrint());
+            TERN_(HAS_MEDIA, StopPrint());
             break;
 
           case 12: // A12 kill
             kill(F(STR_ERR_KILLED));
             break;
 
           case 13: // A13 SELECTION FILE
-            #if ENABLED(SDSUPPORT)
+            #if HAS_MEDIA
               if (isMediaInserted()) {
                 starpos = (strchr(TFTstrchr_pointer + 4, '*'));
                 if (TFTstrchr_pointer[4] == '/') {
                   strcpy(SelectedDirectory, TFTstrchr_pointer + 5);
                   SelectedFile[0] = 0;
                   SENDLINE_DBG_PGM("J21", "TFT Serial Debug: Clear file selection... J21 "); // J21 Not File Selected
                   SENDLINE_PGM("");
                 }
                 else if (TFTstrchr_pointer[4] == '<') {
                   strcpy(SelectedDirectory, TFTstrchr_pointer + 4);
@@ -688,21 +688,21 @@ void AnycubicTFTClass::GetCommandFromTFT() {
                   if (starpos) *(starpos - 1) = '\0';
 
                   strcpy(SelectedFile, TFTstrchr_pointer + 4);
                   SENDLINE_DBG_PGM_VAL("J20", "TFT Serial Debug: File Selected... J20 ", SelectedFile); // J20 File Selected
                 }
               }
             #endif
             break;
 
           case 14: // A14 START PRINTING
-            #if ENABLED(SDSUPPORT)
+            #if HAS_MEDIA
               if (!isPrinting() && strlen(SelectedFile) > 0)
                 StartPrint();
             #endif
             break;
 
           case 15: // A15 RESUMING FROM OUTAGE
             // TODO: JBA implement resume form outage
             break;
 
           case 16: { // A16 set hotend temp
@@ -861,21 +861,21 @@ void AnycubicTFTClass::GetCommandFromTFT() {
           case 25: // A25 cool down
             if (!isPrinting()) {
               setTargetTemp_celsius(0, (heater_t) BED);
               setTargetTemp_celsius(0, (extruder_t) E0);
 
               SENDLINE_DBG_PGM("J12", "TFT Serial Debug: Cooling down... J12"); // J12 cool down
             }
             break;
 
           case 26: // A26 refresh SD
-            #if ENABLED(SDSUPPORT)
+            #if HAS_MEDIA
               if (isMediaInserted()) {
                 if (strlen(SelectedDirectory) > 0) {
                   FileList currentFileList;
                   if ((SelectedDirectory[0] == '.') && (SelectedDirectory[1] == '.')) {
                     currentFileList.upDir();
                   }
                   else {
                     if (SelectedDirectory[0] == '<')
                       HandleSpecialMenu();
                     else
@@ -917,21 +917,21 @@ void AnycubicTFTClass::GetCommandFromTFT() {
       TFTbuflen += 1;
       serial3_count = 0; // clear buffer
     }
     else {
       TFTcmdbuffer[TFTbufindw][serial3_count++] = serial3_char;
     }
   }
 }
 
 void AnycubicTFTClass::DoSDCardStateCheck() {
-  #if BOTH(SDSUPPORT, HAS_SD_DETECT)
+  #if BOTH(HAS_MEDIA, HAS_SD_DETECT)
     bool isInserted = isMediaInserted();
     if (isInserted)
       SENDLINE_DBG_PGM("J00", "TFT Serial Debug: SD card state changed... isInserted");
     else
       SENDLINE_DBG_PGM("J01", "TFT Serial Debug: SD card state changed... !isInserted");
 
   #endif
 }
 
 void AnycubicTFTClass::DoFilamentRunoutCheck() {
@@ -947,51 +947,51 @@ void AnycubicTFTClass::DoFilamentRunoutCheck() {
         SENDLINE_DBG_PGM("J23", "TFT Serial Debug: Blocking filament prompt... J23");
       }
       else {
         SENDLINE_DBG_PGM("J15", "TFT Serial Debug: Non blocking filament runout... J15");
       }
     }
   #endif // FILAMENT_RUNOUT_SENSOR
 }
 
 void AnycubicTFTClass::StartPrint() {
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     if (!isPrinting() && strlen(SelectedFile) > 0) {
       #if ENABLED(ANYCUBIC_LCD_DEBUG)
         SERIAL_ECHOPGM("TFT Serial Debug: About to print file ... ");
         SERIAL_ECHO(isPrinting());
         SERIAL_ECHOPGM(" ");
         SERIAL_ECHOLN(SelectedFile);
       #endif
       mediaPrintingState = AMPRINTSTATE_PRINTING;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
       printFile(SelectedFile);
     }
   #endif // SDUPPORT
 }
 
 void AnycubicTFTClass::PausePrint() {
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     if (isPrintingFromMedia() && mediaPrintingState != AMPRINTSTATE_STOP_REQUESTED && mediaPauseState == AMPAUSESTATE_NOT_PAUSED) {
       mediaPrintingState = AMPRINTSTATE_PAUSE_REQUESTED;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED; // need the userconfirm method to update pause state
       SENDLINE_DBG_PGM("J05", "TFT Serial Debug: SD print pause started... J05"); // J05 printing pause
 
       // for some reason pausing the print doesn't retract the extruder so force a manual one here
       injectCommands(F("G91\nG1 E-2 F1800\nG90"));
       pausePrint();
     }
   #endif
 }
 
 void AnycubicTFTClass::ResumePrint() {
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     #if ENABLED(FILAMENT_RUNOUT_SENSOR)
       if (READ(FIL_RUNOUT1_PIN)) {
         #if ENABLED(ANYCUBIC_LCD_DEBUG)
           SERIAL_ECHOLNPGM("TFT Serial Debug: Resume Print with filament sensor still tripped... ");
         #endif
 
         // trigger the user message box
         DoFilamentRunoutCheck();
 
         // re-enable the continue button
@@ -1013,21 +1013,21 @@ void AnycubicTFTClass::ResumePrint() {
       mediaPrintingState = AMPRINTSTATE_PRINTING;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
 
       SENDLINE_DBG_PGM("J04", "TFT Serial Debug: SD print resumed... J04"); // J04 printing form sd card now
       resumePrint();
     }
   #endif
 }
 
 void AnycubicTFTClass::StopPrint() {
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     mediaPrintingState = AMPRINTSTATE_STOP_REQUESTED;
     mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
     SENDLINE_DBG_PGM("J16", "TFT Serial Debug: SD print stop called... J16");
 
     // for some reason stopping the print doesn't retract the extruder so force a manual one here
     injectCommands(F("G91\nG1 E-2 F1800\nG90"));
     stopPrint();
   #endif
 }
 

commit 0021a58943721a81b1ef23fa5e7366cfd80a3d28
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Sun Mar 26 04:07:25 2023 -0500

    ‚ú® AnyCubic Vyper / Vyper LCD (#25405)

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index 774ba55e43..1bc52bfcaf 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -16,20 +16,22 @@
  *
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
 #include "../../../inc/MarlinConfigPre.h"
 
 #if ENABLED(ANYCUBIC_LCD_I3MEGA)
 
+//#define ANYCUBIC_LCD_DEBUG
+
 #include "anycubic_i3mega_lcd.h"
 #include "../ui_api.h"
 
 #include "../../../libs/numtostr.h"
 #include "../../../module/stepper.h" // for disable_all_steppers
 #include "../../../module/motion.h"  // for quickstop_stepper, A20 read printing speed, feedrate_percentage
 #include "../../../MarlinCore.h"     // for disable_steppers
 #include "../../../inc/MarlinConfig.h"
 
 // command sending macro's with debugging capability

commit 96bc084f3d791bc93265f217181986863e8e5fc7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 18 02:15:16 2023 -0600

    üé® Misc. LCD cleanup (#25400)

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index 03997fa95b..774ba55e43 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -697,36 +697,36 @@ void AnycubicTFTClass::GetCommandFromTFT() {
               if (!isPrinting() && strlen(SelectedFile) > 0)
                 StartPrint();
             #endif
             break;
 
           case 15: // A15 RESUMING FROM OUTAGE
             // TODO: JBA implement resume form outage
             break;
 
           case 16: { // A16 set hotend temp
-            unsigned int tempvalue;
+            uint16_t tempvalue;
             if (CodeSeen('S')) {
               tempvalue = constrain(CodeValue(), 0, 275);
               setTargetTemp_celsius(tempvalue, (extruder_t)E0);
             }
             else if (CodeSeen('C') && !isPrinting()) {
               if (getAxisPosition_mm(Z) < 10)
                 injectCommands(F("G1 Z10")); // RASE Z AXIS
               tempvalue = constrain(CodeValue(), 0, 275);
               setTargetTemp_celsius(tempvalue, (extruder_t)E0);
             }
           }
           break;
 
           case 17: { // A17 set heated bed temp
-            unsigned int tempbed;
+            uint16_t tempbed;
             if (CodeSeen('S')) {
               tempbed = constrain(CodeValue(), 0, 100);
               setTargetTemp_celsius(tempbed, (heater_t)BED);
             }
           }
           break;
 
           case 18: { // A18 set fan speed
             float fanPercent;
             if (CodeSeen('S')) {
@@ -770,21 +770,21 @@ void AnycubicTFTClass::GetCommandFromTFT() {
               }
               else if (CodeSeen('C')) {
                 injectCommands_P(G28_STR);
               }
             }
             break;
 
           case 22: // A22 move X/Y/Z or extrude
             if (!isPrinting()) {
               float coorvalue;
-              unsigned int movespeed = 0;
+              uint16_t movespeed = 0;
               char commandStr[30];
               char fullCommandStr[38];
 
               commandStr[0] = 0; // empty string
               if (CodeSeen('F'))  // Set feedrate
                 movespeed = CodeValue();
 
               if (CodeSeen('X')) { // Move in X direction
                 coorvalue = CodeValue();
                 if ((coorvalue <= 0.2) && coorvalue > 0)

commit 06d7d2ada4b2b9a6e028e8e35478d1331a774461
Author: Stefan Kalscheuer <stefan@stklcode.de>
Date:   Fri Sep 16 21:21:13 2022 +0200

    ‚ú® Anycubic i3 Mega LCD file menu fix (#24752)

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index 0da8bb36a7..03997fa95b 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -39,20 +39,26 @@
 #define SEND(x)           send(x)
 #define SENDLINE(x)       sendLine(x)
 #if ENABLED(ANYCUBIC_LCD_DEBUG)
   #define SENDLINE_DBG_PGM(x,y)       do{ sendLine_P(PSTR(x)); SERIAL_ECHOLNPGM(y); }while(0)
   #define SENDLINE_DBG_PGM_VAL(x,y,z) do{ sendLine_P(PSTR(x)); SERIAL_ECHOLNPGM(y, z); }while(0)
 #else
   #define SENDLINE_DBG_PGM(x,y)       sendLine_P(PSTR(x))
   #define SENDLINE_DBG_PGM_VAL(x,y,z) sendLine_P(PSTR(x))
 #endif
 
+// Append ".gcode" to filename, if requested. Used for some DGUS-clone displays with built-in filter.
+// Filenames are limited to 26 characters, so the actual name for the FILENAME can be 20 characters at most.
+// If a longer string is desired without "extension, use the ALTNAME macro to provide a (longer) alternative.
+#define SPECIAL_MENU_FILENAME(A) A TERN_(ANYCUBIC_LCD_GCODE_EXT, ".gcode")
+#define SPECIAL_MENU_ALTNAME(A, B) TERN(ANYCUBIC_LCD_GCODE_EXT, A ".gcode", B)
+
 AnycubicTFTClass AnycubicTFT;
 
 char AnycubicTFTClass::TFTcmdbuffer[TFTBUFSIZE][TFT_MAX_CMD_SIZE];
 int AnycubicTFTClass::TFTbuflen = 0,
     AnycubicTFTClass::TFTbufindr = 0,
     AnycubicTFTClass::TFTbufindw = 0;
 char AnycubicTFTClass::serial3_char;
 int AnycubicTFTClass::serial3_count = 0;
 char* AnycubicTFTClass::TFTstrchr_pointer;
 uint8_t AnycubicTFTClass::SpecialMenu = false;
@@ -376,92 +382,92 @@ void AnycubicTFTClass::RenderCurrentFileList() {
     uint16_t selectedNumber = 0;
     SelectedDirectory[0] = 0;
     SelectedFile[0] = 0;
     FileList currentFileList;
 
     SENDLINE_PGM("FN "); // Filelist start
 
     if (!isMediaInserted() && !SpecialMenu) {
       SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to render Current File List... J02");
 
-      SENDLINE_PGM("<Special_Menu>");
-      SENDLINE_PGM("<Special_Menu>");
+      SENDLINE_PGM("<SPECI~1.GCO");
+      SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Special Menu>"));
     }
     else {
       if (CodeSeen('S'))
         selectedNumber = CodeValue();
 
       if (SpecialMenu)
         RenderSpecialMenu(selectedNumber);
       else if (selectedNumber <= currentFileList.count())
         RenderCurrentFolder(selectedNumber);
     }
     SENDLINE_PGM("END"); // Filelist stop
   #endif // SDSUPPORT
 }
 
 void AnycubicTFTClass::RenderSpecialMenu(uint16_t selectedNumber) {
   switch (selectedNumber) {
     #if ENABLED(PROBE_MANUALLY)
       case 0: // First Page
-        SENDLINE_PGM("<01ZUp0.1>");
-        SENDLINE_PGM("<Z Up 0.1>");
-        SENDLINE_PGM("<02ZUp0.02>");
-        SENDLINE_PGM("<Z Up 0.02>");
-        SENDLINE_PGM("<03ZDn0.02>");
-        SENDLINE_PGM("<Z Down 0.02>");
-        SENDLINE_PGM("<04ZDn0.1>");
-        SENDLINE_PGM("<Z Down 0.1>");
+        SENDLINE_PGM("<01ZUP~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Z Up 0.1>"));
+        SENDLINE_PGM("<02ZUP~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Z Up 0.02>"));
+        SENDLINE_PGM("<03ZDO~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Z Down 0.02>"));
+        SENDLINE_PGM("<04ZDO~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Z Down 0.1>"));
         break;
 
       case 4: // Second Page
-        SENDLINE_PGM("<05PrehtBed>");
-        SENDLINE_PGM("<Preheat bed>");
-        SENDLINE_PGM("<06SMeshLvl>");
-        SENDLINE_PGM("<Start Mesh Leveling>");
-        SENDLINE_PGM("<07MeshNPnt>");
-        SENDLINE_PGM("<Next Mesh Point>");
-        SENDLINE_PGM("<08HtEndPID>");
-        SENDLINE_PGM("<Auto Tune Hotend PID>");
+        SENDLINE_PGM("<05PRE~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Preheat Bed>"));
+        SENDLINE_PGM("<06MES~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_ALTNAME("<Mesh Leveling>", "<Start Mesh Leveling>"));
+        SENDLINE_PGM("<07NEX~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Next Mesh Point>"));
+        SENDLINE_PGM("<08PID~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<PID Tune Hotend>"));
         break;
 
       case 8: // Third Page
-        SENDLINE_PGM("<09HtBedPID>");
-        SENDLINE_PGM("<Auto Tune Hotbed PID>");
-        SENDLINE_PGM("<10FWDeflts>");
-        SENDLINE_PGM("<Load FW Defaults>");
-        SENDLINE_PGM("<11SvEEPROM>");
-        SENDLINE_PGM("<Save EEPROM>");
-        SENDLINE_PGM("<Exit>");
-        SENDLINE_PGM("<Exit>");
+        SENDLINE_PGM("<09PID~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<PID Tune Hotbed>"));
+        SENDLINE_PGM("<10FWD~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Load FW Defaults>"));
+        SENDLINE_PGM("<11SAV~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Save EEPROM>"));
+        SENDLINE_PGM("<EXIT_~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Exit>"));
         break;
     #else
       case 0: // First Page
-        SENDLINE_PGM("<01PrehtBed>");
-        SENDLINE_PGM("<Preheat bed>");
-        SENDLINE_PGM("<02ABL>");
-        SENDLINE_PGM("<Auto Bed Leveling>");
-        SENDLINE_PGM("<03HtEndPID>");
-        SENDLINE_PGM("<Auto Tune Hotend PID>");
-        SENDLINE_PGM("<04HtBedPID>");
-        SENDLINE_PGM("<Auto Tune Hotbed PID>");
+        SENDLINE_PGM("<01PRE~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Preheat Bed>"));
+        SENDLINE_PGM("<02ABL~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Auto Bed Leveling>"));
+        SENDLINE_PGM("<03PID~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_ALTNAME("<PID Tune Hotend>", "<Auto Tune Hotend PID>"));
+        SENDLINE_PGM("<04PID~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_ALTNAME("<PID Tune Hotbed>", "<Auto Tune Hotbed PID>"));
         break;
 
       case 4: // Second Page
-        SENDLINE_PGM("<05FWDeflts>");
-        SENDLINE_PGM("<Load FW Defaults>");
-        SENDLINE_PGM("<06SvEEPROM>");
-        SENDLINE_PGM("<Save EEPROM>");
-        SENDLINE_PGM("<07SendM108>");
-        SENDLINE_PGM("<Send User Confirmation>");
-        SENDLINE_PGM("<Exit>");
-        SENDLINE_PGM("<Exit>");
+        SENDLINE_PGM("<05FWD~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Load FW Defaults>"));
+        SENDLINE_PGM("<06SAV~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Save EEPROM>"));
+        SENDLINE_PGM("<06SEN~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_ALTNAME("<User Confirmation>", "<Send User Confirmation>"));
+        SENDLINE_PGM("<EXIT_~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Exit>"));
         break;
 
         #endif // PROBE_MANUALLY
 
       default:
         break;
   }
 }
 
 void AnycubicTFTClass::RenderCurrentFolder(uint16_t selectedNumber) {
@@ -471,22 +477,22 @@ void AnycubicTFTClass::RenderCurrentFolder(uint16_t selectedNumber) {
   uint16_t dir_files = currentFileList.count();
 
   if ((dir_files - selectedNumber) < 4)
     max_files = dir_files;
   else
     max_files = selectedNumber + 3;
 
   for (cnt = selectedNumber; cnt <= max_files; cnt++) {
     if (cnt == 0) { // Special Entry
       if (currentFileList.isAtRootDir()) {
-        SENDLINE_PGM("<specialmnu>");
-        SENDLINE_PGM("<Special Menu>");
+        SENDLINE_PGM("<SPECI~1.GCO");
+        SENDLINE_PGM(SPECIAL_MENU_FILENAME("<Special Menu>"));
       }
       else {
         SENDLINE_PGM("/..");
         SENDLINE_PGM("/..");
       }
     }
     else {
       currentFileList.seek(cnt - 1, false);
 
       #if ENABLED(ANYCUBIC_LCD_DEBUG)

commit 3e9fb34892e85bc4069acf5baddbf12d6cd47789
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Tue Jun 7 18:59:21 2022 +1200

    ü©π Media Change followup (#24302)
    
    Followup to #24015

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index c382af3fe2..0da8bb36a7 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -79,21 +79,21 @@ AnycubicTFTClass::AnycubicTFTClass() {}
 void AnycubicTFTClass::OnSetup() {
   #ifndef LCD_BAUDRATE
     #define LCD_BAUDRATE 115200
   #endif
   LCD_SERIAL.begin(LCD_BAUDRATE);
 
   SENDLINE_DBG_PGM("J17", "TFT Serial Debug: Main board reset... J17"); // J17 Main board reset
   delay_ms(10);
 
   // Init the state of the key pins running on the TFT
-  #if ENABLED(SDSUPPORT) && PIN_EXISTS(SD_DETECT)
+  #if BOTH(SDSUPPORT, HAS_SD_DETECT)
     SET_INPUT_PULLUP(SD_DETECT_PIN);
   #endif
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     SET_INPUT_PULLUP(FIL_RUNOUT1_PIN);
   #endif
 
   mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
   mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
 
   // DoSDCardStateCheck();
@@ -909,21 +909,21 @@ void AnycubicTFTClass::GetCommandFromTFT() {
       TFTbuflen += 1;
       serial3_count = 0; // clear buffer
     }
     else {
       TFTcmdbuffer[TFTbufindw][serial3_count++] = serial3_char;
     }
   }
 }
 
 void AnycubicTFTClass::DoSDCardStateCheck() {
-  #if ENABLED(SDSUPPORT) && PIN_EXISTS(SD_DETECT)
+  #if BOTH(SDSUPPORT, HAS_SD_DETECT)
     bool isInserted = isMediaInserted();
     if (isInserted)
       SENDLINE_DBG_PGM("J00", "TFT Serial Debug: SD card state changed... isInserted");
     else
       SENDLINE_DBG_PGM("J01", "TFT Serial Debug: SD card state changed... !isInserted");
 
   #endif
 }
 
 void AnycubicTFTClass::DoFilamentRunoutCheck() {

commit 72b2e2b2c7230245dea9fcb46b9b8a92bcb11bcc
Author: tombrazier <68918209+tombrazier@users.noreply.github.com>
Date:   Fri Apr 1 08:14:14 2022 +0100

    ‚öóÔ∏è Temperature Model Predictive Control (#23751)

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index 729d4547a8..c382af3fe2 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -78,21 +78,21 @@ AnycubicTFTClass::AnycubicTFTClass() {}
 
 void AnycubicTFTClass::OnSetup() {
   #ifndef LCD_BAUDRATE
     #define LCD_BAUDRATE 115200
   #endif
   LCD_SERIAL.begin(LCD_BAUDRATE);
 
   SENDLINE_DBG_PGM("J17", "TFT Serial Debug: Main board reset... J17"); // J17 Main board reset
   delay_ms(10);
 
-  // initialise the state of the key pins running on the tft
+  // Init the state of the key pins running on the TFT
   #if ENABLED(SDSUPPORT) && PIN_EXISTS(SD_DETECT)
     SET_INPUT_PULLUP(SD_DETECT_PIN);
   #endif
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     SET_INPUT_PULLUP(FIL_RUNOUT1_PIN);
   #endif
 
   mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
   mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
 

commit 24d1d3eb5cc4e7415e77393d35e40fb4124bc672
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jan 12 09:47:22 2022 -0600

    üí° Misc. cleanup, comments

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index 98534ba65f..729d4547a8 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -56,21 +56,21 @@ char AnycubicTFTClass::serial3_char;
 int AnycubicTFTClass::serial3_count = 0;
 char* AnycubicTFTClass::TFTstrchr_pointer;
 uint8_t AnycubicTFTClass::SpecialMenu = false;
 AnycubicMediaPrintState AnycubicTFTClass::mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
 AnycubicMediaPauseState AnycubicTFTClass::mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
 
 char AnycubicTFTClass::SelectedDirectory[30];
 char AnycubicTFTClass::SelectedFile[FILENAME_LENGTH];
 
 // Serial helpers
-static void sendNewLine(void) { LCD_SERIAL.write('\r'); LCD_SERIAL.write('\n'); }
+static void sendNewLine() { LCD_SERIAL.write('\r'); LCD_SERIAL.write('\n'); }
 static void send(const char *str) { LCD_SERIAL.print(str); }
 static void send_P(PGM_P str) {
   while (const char c = pgm_read_byte(str++))
     LCD_SERIAL.write(c);
 }
 static void sendLine(const char *str) { send(str); sendNewLine(); }
 static void sendLine_P(PGM_P str) { send_P(str); sendNewLine(); }
 
 using namespace ExtUI;
 

commit 65b950a489c35b1d5547da3a504af4dad8cde3d7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 20:15:52 2021 -0500

    üé® Apply F() to kill / sendinfoscreen

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index 5bbcfd0b5e..98534ba65f 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -647,21 +647,21 @@ void AnycubicTFTClass::GetCommandFromTFT() {
               if (isPrintingFromMediaPaused())
                 ResumePrint();
             #endif
             break;
 
           case 11: // A11 STOP SD PRINT
             TERN_(SDSUPPORT, StopPrint());
             break;
 
           case 12: // A12 kill
-            kill(PSTR(STR_ERR_KILLED));
+            kill(F(STR_ERR_KILLED));
             break;
 
           case 13: // A13 SELECTION FILE
             #if ENABLED(SDSUPPORT)
               if (isMediaInserted()) {
                 starpos = (strchr(TFTstrchr_pointer + 4, '*'));
                 if (TFTstrchr_pointer[4] == '/') {
                   strcpy(SelectedDirectory, TFTstrchr_pointer + 5);
                   SelectedFile[0] = 0;
                   SENDLINE_DBG_PGM("J21", "TFT Serial Debug: Clear file selection... J21 "); // J21 Not File Selected

commit 12b5d997a2cee538e5026a68f8e0cfdd53248986
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 25 22:11:48 2021 -0500

    üé® Apply F() to some ExtUI functions

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index e07e377dfc..5bbcfd0b5e 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -97,39 +97,39 @@ void AnycubicTFTClass::OnSetup() {
   mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
 
   // DoSDCardStateCheck();
   SENDLINE_DBG_PGM("J12", "TFT Serial Debug: Ready... J12"); // J12 Ready
   delay_ms(10);
 
   DoFilamentRunoutCheck();
   SelectedFile[0] = 0;
 
   #if ENABLED(STARTUP_CHIME)
-    injectCommands_P(PSTR("M300 P250 S554\nM300 P250 S554\nM300 P250 S740\nM300 P250 S554\nM300 P250 S740\nM300 P250 S554\nM300 P500 S831"));
+    injectCommands(F("M300 P250 S554\nM300 P250 S554\nM300 P250 S740\nM300 P250 S554\nM300 P250 S740\nM300 P250 S554\nM300 P500 S831"));
   #endif
   #if ENABLED(ANYCUBIC_LCD_DEBUG)
     SERIAL_ECHOLNPGM("TFT Serial Debug: Finished startup");
   #endif
 }
 
 void AnycubicTFTClass::OnCommandScan() {
   static millis_t nextStopCheck = 0; // used to slow the stopped print check down to reasonable times
   const millis_t ms = millis();
   if (ELAPSED(ms, nextStopCheck)) {
     nextStopCheck = ms + 1000UL;
     if (mediaPrintingState == AMPRINTSTATE_STOP_REQUESTED && IsNozzleHomed()) {
       #if ENABLED(ANYCUBIC_LCD_DEBUG)
         SERIAL_ECHOLNPGM("TFT Serial Debug: Finished stopping print, releasing motors ...");
       #endif
       mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
       mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
-      injectCommands_P(PSTR("M84\nM27")); // disable stepper motors and force report of SD status
+      injectCommands(F("M84\nM27")); // disable stepper motors and force report of SD status
       delay_ms(200);
       // tell printer to release resources of print to indicate it is done
       SENDLINE_DBG_PGM("J14", "TFT Serial Debug: SD Print Stopped... J14");
     }
   }
 
   if (TFTbuflen < (TFTBUFSIZE - 1))
     GetCommandFromTFT();
 
   if (TFTbuflen) {
@@ -242,122 +242,122 @@ void AnycubicTFTClass::HandleSpecialMenu() {
       case 'e': // "<exit>"
         SpecialMenu = false;
         return;
         break;
 
         #if ENABLED(PROBE_MANUALLY)
           case '0':
             switch (SelectedDirectory[2]) {
               case '1': // "<01ZUp0.1>"
                 SERIAL_ECHOLNPGM("Special Menu: Z Up 0.1");
-                injectCommands_P(PSTR("G91\nG1 Z+0.1\nG90"));
+                injectCommands(F("G91\nG1 Z+0.1\nG90"));
                 break;
 
               case '2': // "<02ZUp0.02>"
                 SERIAL_ECHOLNPGM("Special Menu: Z Up 0.02");
-                injectCommands_P(PSTR("G91\nG1 Z+0.02\nG90"));
+                injectCommands(F("G91\nG1 Z+0.02\nG90"));
                 break;
 
               case '3': // "<03ZDn0.02>"
                 SERIAL_ECHOLNPGM("Special Menu: Z Down 0.02");
-                injectCommands_P(PSTR("G91\nG1 Z-0.02\nG90"));
+                injectCommands(F("G91\nG1 Z-0.02\nG90"));
                 break;
 
               case '4': // "<04ZDn0.1>"
                 SERIAL_ECHOLNPGM("Special Menu: Z Down 0.1");
-                injectCommands_P(PSTR("G91\nG1 Z-0.1\nG90"));
+                injectCommands(F("G91\nG1 Z-0.1\nG90"));
                 break;
 
               case '5': // "<05PrehtBed>"
                 SERIAL_ECHOLNPGM("Special Menu: Preheat Bed");
-                injectCommands_P(PSTR("M140 S65"));
+                injectCommands(F("M140 S65"));
                 break;
 
               case '6': // "<06SMeshLvl>"
                 SERIAL_ECHOLNPGM("Special Menu: Start Mesh Leveling");
-                injectCommands_P(PSTR("G29S1"));
+                injectCommands(F("G29S1"));
                 break;
 
               case '7': // "<07MeshNPnt>"
                 SERIAL_ECHOLNPGM("Special Menu: Next Mesh Point");
-                injectCommands_P(PSTR("G29S2"));
+                injectCommands(F("G29S2"));
                 break;
 
               case '8': // "<08HtEndPID>"
                 SERIAL_ECHOLNPGM("Special Menu: Auto Tune Hotend PID");
                 // need to dwell for half a second to give the fan a chance to start before the pid tuning starts
-                injectCommands_P(PSTR("M106 S204\nG4 P500\nM303 E0 S215 C15 U1"));
+                injectCommands(F("M106 S204\nG4 P500\nM303 E0 S215 C15 U1"));
                 break;
 
               case '9': // "<09HtBedPID>"
                 SERIAL_ECHOLNPGM("Special Menu: Auto Tune Hotbed Pid");
-                injectCommands_P(PSTR("M303 E-1 S65 C6 U1"));
+                injectCommands(F("M303 E-1 S65 C6 U1"));
                 break;
 
               default:
                 break;
             }
             break;
 
           case '1':
             switch (SelectedDirectory[2]) {
               case '0': // "<10FWDeflts>"
                 SERIAL_ECHOLNPGM("Special Menu: Load FW Defaults");
-                injectCommands_P(PSTR("M502\nM300 P105 S1661\nM300 P210 S1108"));
+                injectCommands(F("M502\nM300 P105 S1661\nM300 P210 S1108"));
                 break;
 
               case '1': // "<11SvEEPROM>"
                 SERIAL_ECHOLNPGM("Special Menu: Save EEPROM");
-                injectCommands_P(PSTR("M500\nM300 P105 S1108\nM300 P210 S1661"));
+                injectCommands(F("M500\nM300 P105 S1108\nM300 P210 S1661"));
                 break;
 
               default:
                 break;
             }
             break;
         #else // if ENABLED(PROBE_MANUALLY)
           case '0':
             switch (SelectedDirectory[2]) {
               case '1': // "<01PrehtBed>"
                 SERIAL_ECHOLNPGM("Special Menu: Preheat Bed");
-                injectCommands_P(PSTR("M140 S65"));
+                injectCommands(F("M140 S65"));
                 break;
 
               case '2': // "<02ABL>"
                 SERIAL_ECHOLNPGM("Special Menu: Auto Bed Leveling");
-                injectCommands_P(PSTR("G29N"));
+                injectCommands(F("G29N"));
                 break;
 
               case '3': // "<03HtendPID>"
                 SERIAL_ECHOLNPGM("Special Menu: Auto Tune Hotend PID");
                 // need to dwell for half a second to give the fan a chance to start before the pid tuning starts
-                injectCommands_P(PSTR("M106 S204\nG4 P500\nM303 E0 S215 C15 U1"));
+                injectCommands(F("M106 S204\nG4 P500\nM303 E0 S215 C15 U1"));
                 break;
 
               case '4': // "<04HtbedPID>"
                 SERIAL_ECHOLNPGM("Special Menu: Auto Tune Hotbed Pid");
-                injectCommands_P(PSTR("M303 E-1 S65 C6 U1"));
+                injectCommands(F("M303 E-1 S65 C6 U1"));
                 break;
 
               case '5': // "<05FWDeflts>"
                 SERIAL_ECHOLNPGM("Special Menu: Load FW Defaults");
-                injectCommands_P(PSTR("M502\nM300 P105 S1661\nM300 P210 S1108"));
+                injectCommands(F("M502\nM300 P105 S1661\nM300 P210 S1108"));
                 break;
 
               case '6': // "<06SvEEPROM>"
                 SERIAL_ECHOLNPGM("Special Menu: Save EEPROM");
-                injectCommands_P(PSTR("M500\nM300 P105 S1108\nM300 P210 S1661"));
+                injectCommands(F("M500\nM300 P105 S1108\nM300 P210 S1661"));
                 break;
 
               case '7': // <07SendM108>
                 SERIAL_ECHOLNPGM("Special Menu: Send User Confirmation");
-                injectCommands_P(PSTR("M108"));
+                injectCommands(F("M108"));
                 break;
 
               default:
                 break;
             }
             break;
             #endif  // PROBE_MANUALLY
 
           default:
             break;
@@ -698,21 +698,21 @@ void AnycubicTFTClass::GetCommandFromTFT() {
             break;
 
           case 16: { // A16 set hotend temp
             unsigned int tempvalue;
             if (CodeSeen('S')) {
               tempvalue = constrain(CodeValue(), 0, 275);
               setTargetTemp_celsius(tempvalue, (extruder_t)E0);
             }
             else if (CodeSeen('C') && !isPrinting()) {
               if (getAxisPosition_mm(Z) < 10)
-                injectCommands_P(PSTR("G1 Z10")); // RASE Z AXIS
+                injectCommands(F("G1 Z10")); // RASE Z AXIS
               tempvalue = constrain(CodeValue(), 0, 275);
               setTargetTemp_celsius(tempvalue, (extruder_t)E0);
             }
           }
           break;
 
           case 17: { // A17 set heated bed temp
             unsigned int tempbed;
             if (CodeSeen('S')) {
               tempbed = constrain(CodeValue(), 0, 100);
@@ -749,25 +749,25 @@ void AnycubicTFTClass::GetCommandFromTFT() {
             if (CodeSeen('S'))
               feedrate_percentage = constrain(CodeValue(), 40, 999);
             else
               SEND_PGM_VAL("A20V ", feedrate_percentage);
             break;
 
           case 21: // A21 all home
             if (!isPrinting() && !isPrintingFromMediaPaused()) {
               if (CodeSeen('X') || CodeSeen('Y') || CodeSeen('Z')) {
                 if (CodeSeen('X'))
-                  injectCommands_P(PSTR("G28X"));
+                  injectCommands(F("G28X"));
                 if (CodeSeen('Y'))
-                  injectCommands_P(PSTR("G28Y"));
+                  injectCommands(F("G28Y"));
                 if (CodeSeen('Z'))
-                  injectCommands_P(PSTR("G28Z"));
+                  injectCommands(F("G28Z"));
               }
               else if (CodeSeen('C')) {
                 injectCommands_P(G28_STR);
               }
             }
             break;
 
           case 22: // A22 move X/Y/Z or extrude
             if (!isPrinting()) {
               float coorvalue;
@@ -824,32 +824,32 @@ void AnycubicTFTClass::GetCommandFromTFT() {
                 #endif
                 injectCommands(fullCommandStr);
               }
             }
             SENDLINE_PGM("");
             break;
 
           case 23: // A23 preheat pla
             if (!isPrinting()) {
               if (getAxisPosition_mm(Z) < 10)
-                injectCommands_P(PSTR("G1 Z10")); // RASE Z AXIS
+                injectCommands(F("G1 Z10")); // RASE Z AXIS
 
               setTargetTemp_celsius(PREHEAT_1_TEMP_BED, (heater_t)BED);
               setTargetTemp_celsius(PREHEAT_1_TEMP_HOTEND, (extruder_t)E0);
               SENDLINE_PGM("OK");
             }
             break;
 
           case 24:// A24 preheat abs
             if (!isPrinting()) {
               if (getAxisPosition_mm(Z) < 10)
-                injectCommands_P(PSTR("G1 Z10")); // RASE Z AXIS
+                injectCommands(F("G1 Z10")); // RASE Z AXIS
 
               setTargetTemp_celsius(PREHEAT_2_TEMP_BED, (heater_t)BED);
               setTargetTemp_celsius(PREHEAT_2_TEMP_HOTEND, (extruder_t)E0);
               SENDLINE_PGM("OK");
             }
             break;
 
           case 25: // A25 cool down
             if (!isPrinting()) {
               setTargetTemp_celsius(0, (heater_t) BED);
@@ -926,21 +926,21 @@ void AnycubicTFTClass::DoSDCardStateCheck() {
   #endif
 }
 
 void AnycubicTFTClass::DoFilamentRunoutCheck() {
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     // NOTE: getFilamentRunoutState() only returns the runout state if the job is printing
     // we want to actually check the status of the pin here, regardless of printstate
     if (READ(FIL_RUNOUT1_PIN)) {
       if (mediaPrintingState == AMPRINTSTATE_PRINTING || mediaPrintingState == AMPRINTSTATE_PAUSED || mediaPrintingState == AMPRINTSTATE_PAUSE_REQUESTED) {
         // play tone to indicate filament is out
-        injectCommands_P(PSTR("\nM300 P200 S1567\nM300 P200 S1174\nM300 P200 S1567\nM300 P200 S1174\nM300 P2000 S1567"));
+        injectCommands(F("\nM300 P200 S1567\nM300 P200 S1174\nM300 P200 S1567\nM300 P200 S1174\nM300 P2000 S1567"));
 
         // tell the user that the filament has run out and wait
         SENDLINE_DBG_PGM("J23", "TFT Serial Debug: Blocking filament prompt... J23");
       }
       else {
         SENDLINE_DBG_PGM("J15", "TFT Serial Debug: Non blocking filament runout... J15");
       }
     }
   #endif // FILAMENT_RUNOUT_SENSOR
 }
@@ -962,21 +962,21 @@ void AnycubicTFTClass::StartPrint() {
 }
 
 void AnycubicTFTClass::PausePrint() {
   #if ENABLED(SDSUPPORT)
     if (isPrintingFromMedia() && mediaPrintingState != AMPRINTSTATE_STOP_REQUESTED && mediaPauseState == AMPAUSESTATE_NOT_PAUSED) {
       mediaPrintingState = AMPRINTSTATE_PAUSE_REQUESTED;
       mediaPauseState    = AMPAUSESTATE_NOT_PAUSED; // need the userconfirm method to update pause state
       SENDLINE_DBG_PGM("J05", "TFT Serial Debug: SD print pause started... J05"); // J05 printing pause
 
       // for some reason pausing the print doesn't retract the extruder so force a manual one here
-      injectCommands_P(PSTR("G91\nG1 E-2 F1800\nG90"));
+      injectCommands(F("G91\nG1 E-2 F1800\nG90"));
       pausePrint();
     }
   #endif
 }
 
 void AnycubicTFTClass::ResumePrint() {
   #if ENABLED(SDSUPPORT)
     #if ENABLED(FILAMENT_RUNOUT_SENSOR)
       if (READ(FIL_RUNOUT1_PIN)) {
         #if ENABLED(ANYCUBIC_LCD_DEBUG)
@@ -1011,16 +1011,16 @@ void AnycubicTFTClass::ResumePrint() {
   #endif
 }
 
 void AnycubicTFTClass::StopPrint() {
   #if ENABLED(SDSUPPORT)
     mediaPrintingState = AMPRINTSTATE_STOP_REQUESTED;
     mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
     SENDLINE_DBG_PGM("J16", "TFT Serial Debug: SD print stop called... J16");
 
     // for some reason stopping the print doesn't retract the extruder so force a manual one here
-    injectCommands_P(PSTR("G91\nG1 E-2 F1800\nG90"));
+    injectCommands(F("G91\nG1 E-2 F1800\nG90"));
     stopPrint();
   #endif
 }
 
 #endif // ANYCUBIC_LCD_I3MEGA

commit 33e0855e2c173680865aaa6c6aa93047d63fc469
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 01:07:51 2021 -0500

    ‚ö°Ô∏è Handle shared enable pins (#22824)

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index 4f51e04c21..e07e377dfc 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -20,20 +20,21 @@
  */
 
 #include "../../../inc/MarlinConfigPre.h"
 
 #if ENABLED(ANYCUBIC_LCD_I3MEGA)
 
 #include "anycubic_i3mega_lcd.h"
 #include "../ui_api.h"
 
 #include "../../../libs/numtostr.h"
+#include "../../../module/stepper.h" // for disable_all_steppers
 #include "../../../module/motion.h"  // for quickstop_stepper, A20 read printing speed, feedrate_percentage
 #include "../../../MarlinCore.h"     // for disable_steppers
 #include "../../../inc/MarlinConfig.h"
 
 // command sending macro's with debugging capability
 #define SEND_PGM(x)       send_P(PSTR(x))
 #define SENDLINE_PGM(x)   sendLine_P(PSTR(x))
 #define SEND_PGM_VAL(x,y) (send_P(PSTR(x)), sendLine(i16tostr3rj(y)))
 #define SEND(x)           send(x)
 #define SENDLINE(x)       sendLine(x)
@@ -731,21 +732,21 @@ void AnycubicTFTClass::GetCommandFromTFT() {
               fanPercent = 100;
 
             setTargetFan_percent(fanPercent, FAN0);
             SENDLINE_PGM("");
           }
           break;
 
           case 19: // A19 stop stepper drivers - sent on stop extrude command and on turn motors off command
             if (!isPrinting()) {
               quickstop_stepper();
-              disable_all_steppers();
+              stepper.disable_all_steppers();
             }
 
             SENDLINE_PGM("");
             break;
 
           case 20: // A20 read printing speed
             if (CodeSeen('S'))
               feedrate_percentage = constrain(CodeValue(), 40, 999);
             else
               SEND_PGM_VAL("A20V ", feedrate_percentage);

commit 7c5727e0ec1c69bf4bb72dcd34d6acce02a8c09e
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Thu Sep 23 18:58:52 2021 +1200

    üêõ Fix anycubic_i3mega_lcd debug macros (#22820)

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index b739e83dc1..4f51e04c21 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -31,22 +31,22 @@
 #include "../../../MarlinCore.h"     // for disable_steppers
 #include "../../../inc/MarlinConfig.h"
 
 // command sending macro's with debugging capability
 #define SEND_PGM(x)       send_P(PSTR(x))
 #define SENDLINE_PGM(x)   sendLine_P(PSTR(x))
 #define SEND_PGM_VAL(x,y) (send_P(PSTR(x)), sendLine(i16tostr3rj(y)))
 #define SEND(x)           send(x)
 #define SENDLINE(x)       sendLine(x)
 #if ENABLED(ANYCUBIC_LCD_DEBUG)
-  #define SENDLINE_DBG_PGM(x,y)       (sendLine_P(PSTR(x)), SERIAL_ECHOLNPGM(y))
-  #define SENDLINE_DBG_PGM_VAL(x,y,z) (sendLine_P(PSTR(x)), SERIAL_ECHOPGM(y), SERIAL_ECHOLN(z))
+  #define SENDLINE_DBG_PGM(x,y)       do{ sendLine_P(PSTR(x)); SERIAL_ECHOLNPGM(y); }while(0)
+  #define SENDLINE_DBG_PGM_VAL(x,y,z) do{ sendLine_P(PSTR(x)); SERIAL_ECHOLNPGM(y, z); }while(0)
 #else
   #define SENDLINE_DBG_PGM(x,y)       sendLine_P(PSTR(x))
   #define SENDLINE_DBG_PGM_VAL(x,y,z) sendLine_P(PSTR(x))
 #endif
 
 AnycubicTFTClass AnycubicTFT;
 
 char AnycubicTFTClass::TFTcmdbuffer[TFTBUFSIZE][TFT_MAX_CMD_SIZE];
 int AnycubicTFTClass::TFTbuflen = 0,
     AnycubicTFTClass::TFTbufindr = 0,

commit 754b31918a73cb08c322102be5d3926d2ac59c18
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 9 04:57:05 2021 -0500

    üé® Fewer serial macros

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
index 3277ad4fb4..b739e83dc1 100644
--- a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -136,42 +136,42 @@ void AnycubicTFTClass::OnCommandScan() {
     TFTbufindr = (TFTbufindr + 1) % TFTBUFSIZE;
   }
 }
 
 void AnycubicTFTClass::OnKillTFT() {
   SENDLINE_DBG_PGM("J11", "TFT Serial Debug: Kill command... J11");
 }
 
 void AnycubicTFTClass::OnSDCardStateChange(bool isInserted) {
   #if ENABLED(ANYCUBIC_LCD_DEBUG)
-    SERIAL_ECHOLNPAIR("TFT Serial Debug: OnSDCardStateChange event triggered...", isInserted);
+    SERIAL_ECHOLNPGM("TFT Serial Debug: OnSDCardStateChange event triggered...", isInserted);
   #endif
   DoSDCardStateCheck();
 }
 
 void AnycubicTFTClass::OnSDCardError() {
   #if ENABLED(ANYCUBIC_LCD_DEBUG)
     SERIAL_ECHOLNPGM("TFT Serial Debug: OnSDCardError event triggered...");
   #endif
   SENDLINE_DBG_PGM("J21", "TFT Serial Debug: On SD Card Error ... J21");
 }
 
 void AnycubicTFTClass::OnFilamentRunout() {
   #if ENABLED(ANYCUBIC_LCD_DEBUG)
     SERIAL_ECHOLNPGM("TFT Serial Debug: FilamentRunout triggered...");
   #endif
   DoFilamentRunoutCheck();
 }
 
 void AnycubicTFTClass::OnUserConfirmRequired(const char * const msg) {
   #if ENABLED(ANYCUBIC_LCD_DEBUG)
-    SERIAL_ECHOLNPAIR("TFT Serial Debug: OnUserConfirmRequired triggered... ", msg);
+    SERIAL_ECHOLNPGM("TFT Serial Debug: OnUserConfirmRequired triggered... ", msg);
   #endif
 
   #if ENABLED(SDSUPPORT)
     /**
      * Need to handle the process of following states
      * "Nozzle Parked"
      * "Load Filament"
      * "Filament Purging..."
      * "HeaterTimeout"
      * "Reheat finished."
@@ -550,21 +550,21 @@ void AnycubicTFTClass::GetCommandFromTFT() {
 
       TFTcmdbuffer[TFTbufindw][serial3_count] = 0; // terminate string
 
       if ((strchr(TFTcmdbuffer[TFTbufindw], 'A') != nullptr)) {
         int16_t a_command;
         TFTstrchr_pointer = strchr(TFTcmdbuffer[TFTbufindw], 'A');
         a_command = ((int)((strtod(&TFTcmdbuffer[TFTbufindw][TFTstrchr_pointer - TFTcmdbuffer[TFTbufindw] + 1], nullptr))));
 
         #if ENABLED(ANYCUBIC_LCD_DEBUG)
           if ((a_command > 7) && (a_command != 20))   // No debugging of status polls, please!
-            SERIAL_ECHOLNPAIR("TFT Serial Command: ", TFTcmdbuffer[TFTbufindw]);
+            SERIAL_ECHOLNPGM("TFT Serial Command: ", TFTcmdbuffer[TFTbufindw]);
         #endif
 
         switch (a_command) {
           case 0: { // A0 GET HOTEND TEMP
             const celsius_float_t hotendActualTemp = getActualTemp_celsius(E0);
             SEND_PGM_VAL("A0V ", ROUND(hotendActualTemp));
           }
           break;
 
           case 1: { // A1  GET HOTEND TARGET TEMP

commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
new file mode 100644
index 0000000000..3277ad4fb4
--- /dev/null
+++ b/Marlin/src/lcd/extui/anycubic_i3mega/anycubic_i3mega_lcd.cpp
@@ -0,0 +1,1025 @@
+/**
+ * anycubic_i3mega_lcd.cpp  --- Support for Anycubic i3 Mega TFT
+ * Created by Christian Hopp on 09.12.17.
+ * Improved by David Ramiro
+ * Converted to ExtUI by John BouAntoun 21 June 2020
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#include "../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(ANYCUBIC_LCD_I3MEGA)
+
+#include "anycubic_i3mega_lcd.h"
+#include "../ui_api.h"
+
+#include "../../../libs/numtostr.h"
+#include "../../../module/motion.h"  // for quickstop_stepper, A20 read printing speed, feedrate_percentage
+#include "../../../MarlinCore.h"     // for disable_steppers
+#include "../../../inc/MarlinConfig.h"
+
+// command sending macro's with debugging capability
+#define SEND_PGM(x)       send_P(PSTR(x))
+#define SENDLINE_PGM(x)   sendLine_P(PSTR(x))
+#define SEND_PGM_VAL(x,y) (send_P(PSTR(x)), sendLine(i16tostr3rj(y)))
+#define SEND(x)           send(x)
+#define SENDLINE(x)       sendLine(x)
+#if ENABLED(ANYCUBIC_LCD_DEBUG)
+  #define SENDLINE_DBG_PGM(x,y)       (sendLine_P(PSTR(x)), SERIAL_ECHOLNPGM(y))
+  #define SENDLINE_DBG_PGM_VAL(x,y,z) (sendLine_P(PSTR(x)), SERIAL_ECHOPGM(y), SERIAL_ECHOLN(z))
+#else
+  #define SENDLINE_DBG_PGM(x,y)       sendLine_P(PSTR(x))
+  #define SENDLINE_DBG_PGM_VAL(x,y,z) sendLine_P(PSTR(x))
+#endif
+
+AnycubicTFTClass AnycubicTFT;
+
+char AnycubicTFTClass::TFTcmdbuffer[TFTBUFSIZE][TFT_MAX_CMD_SIZE];
+int AnycubicTFTClass::TFTbuflen = 0,
+    AnycubicTFTClass::TFTbufindr = 0,
+    AnycubicTFTClass::TFTbufindw = 0;
+char AnycubicTFTClass::serial3_char;
+int AnycubicTFTClass::serial3_count = 0;
+char* AnycubicTFTClass::TFTstrchr_pointer;
+uint8_t AnycubicTFTClass::SpecialMenu = false;
+AnycubicMediaPrintState AnycubicTFTClass::mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
+AnycubicMediaPauseState AnycubicTFTClass::mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
+
+char AnycubicTFTClass::SelectedDirectory[30];
+char AnycubicTFTClass::SelectedFile[FILENAME_LENGTH];
+
+// Serial helpers
+static void sendNewLine(void) { LCD_SERIAL.write('\r'); LCD_SERIAL.write('\n'); }
+static void send(const char *str) { LCD_SERIAL.print(str); }
+static void send_P(PGM_P str) {
+  while (const char c = pgm_read_byte(str++))
+    LCD_SERIAL.write(c);
+}
+static void sendLine(const char *str) { send(str); sendNewLine(); }
+static void sendLine_P(PGM_P str) { send_P(str); sendNewLine(); }
+
+using namespace ExtUI;
+
+AnycubicTFTClass::AnycubicTFTClass() {}
+
+void AnycubicTFTClass::OnSetup() {
+  #ifndef LCD_BAUDRATE
+    #define LCD_BAUDRATE 115200
+  #endif
+  LCD_SERIAL.begin(LCD_BAUDRATE);
+
+  SENDLINE_DBG_PGM("J17", "TFT Serial Debug: Main board reset... J17"); // J17 Main board reset
+  delay_ms(10);
+
+  // initialise the state of the key pins running on the tft
+  #if ENABLED(SDSUPPORT) && PIN_EXISTS(SD_DETECT)
+    SET_INPUT_PULLUP(SD_DETECT_PIN);
+  #endif
+  #if ENABLED(FILAMENT_RUNOUT_SENSOR)
+    SET_INPUT_PULLUP(FIL_RUNOUT1_PIN);
+  #endif
+
+  mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
+  mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
+
+  // DoSDCardStateCheck();
+  SENDLINE_DBG_PGM("J12", "TFT Serial Debug: Ready... J12"); // J12 Ready
+  delay_ms(10);
+
+  DoFilamentRunoutCheck();
+  SelectedFile[0] = 0;
+
+  #if ENABLED(STARTUP_CHIME)
+    injectCommands_P(PSTR("M300 P250 S554\nM300 P250 S554\nM300 P250 S740\nM300 P250 S554\nM300 P250 S740\nM300 P250 S554\nM300 P500 S831"));
+  #endif
+  #if ENABLED(ANYCUBIC_LCD_DEBUG)
+    SERIAL_ECHOLNPGM("TFT Serial Debug: Finished startup");
+  #endif
+}
+
+void AnycubicTFTClass::OnCommandScan() {
+  static millis_t nextStopCheck = 0; // used to slow the stopped print check down to reasonable times
+  const millis_t ms = millis();
+  if (ELAPSED(ms, nextStopCheck)) {
+    nextStopCheck = ms + 1000UL;
+    if (mediaPrintingState == AMPRINTSTATE_STOP_REQUESTED && IsNozzleHomed()) {
+      #if ENABLED(ANYCUBIC_LCD_DEBUG)
+        SERIAL_ECHOLNPGM("TFT Serial Debug: Finished stopping print, releasing motors ...");
+      #endif
+      mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
+      mediaPauseState = AMPAUSESTATE_NOT_PAUSED;
+      injectCommands_P(PSTR("M84\nM27")); // disable stepper motors and force report of SD status
+      delay_ms(200);
+      // tell printer to release resources of print to indicate it is done
+      SENDLINE_DBG_PGM("J14", "TFT Serial Debug: SD Print Stopped... J14");
+    }
+  }
+
+  if (TFTbuflen < (TFTBUFSIZE - 1))
+    GetCommandFromTFT();
+
+  if (TFTbuflen) {
+    TFTbuflen  = (TFTbuflen - 1);
+    TFTbufindr = (TFTbufindr + 1) % TFTBUFSIZE;
+  }
+}
+
+void AnycubicTFTClass::OnKillTFT() {
+  SENDLINE_DBG_PGM("J11", "TFT Serial Debug: Kill command... J11");
+}
+
+void AnycubicTFTClass::OnSDCardStateChange(bool isInserted) {
+  #if ENABLED(ANYCUBIC_LCD_DEBUG)
+    SERIAL_ECHOLNPAIR("TFT Serial Debug: OnSDCardStateChange event triggered...", isInserted);
+  #endif
+  DoSDCardStateCheck();
+}
+
+void AnycubicTFTClass::OnSDCardError() {
+  #if ENABLED(ANYCUBIC_LCD_DEBUG)
+    SERIAL_ECHOLNPGM("TFT Serial Debug: OnSDCardError event triggered...");
+  #endif
+  SENDLINE_DBG_PGM("J21", "TFT Serial Debug: On SD Card Error ... J21");
+}
+
+void AnycubicTFTClass::OnFilamentRunout() {
+  #if ENABLED(ANYCUBIC_LCD_DEBUG)
+    SERIAL_ECHOLNPGM("TFT Serial Debug: FilamentRunout triggered...");
+  #endif
+  DoFilamentRunoutCheck();
+}
+
+void AnycubicTFTClass::OnUserConfirmRequired(const char * const msg) {
+  #if ENABLED(ANYCUBIC_LCD_DEBUG)
+    SERIAL_ECHOLNPAIR("TFT Serial Debug: OnUserConfirmRequired triggered... ", msg);
+  #endif
+
+  #if ENABLED(SDSUPPORT)
+    /**
+     * Need to handle the process of following states
+     * "Nozzle Parked"
+     * "Load Filament"
+     * "Filament Purging..."
+     * "HeaterTimeout"
+     * "Reheat finished."
+     *
+     * NOTE:  The only way to handle these states is strcmp_P with the msg unfortunately (very expensive)
+     */
+    if (strcmp_P(msg, PSTR("Nozzle Parked")) == 0) {
+      mediaPrintingState = AMPRINTSTATE_PAUSED;
+      mediaPauseState    = AMPAUSESTATE_PARKED;
+      // enable continue button
+      SENDLINE_DBG_PGM("J18", "TFT Serial Debug: UserConfirm SD print paused done... J18");
+    }
+    else if (strcmp_P(msg, PSTR("Load Filament")) == 0) {
+      mediaPrintingState = AMPRINTSTATE_PAUSED;
+      mediaPauseState    = AMPAUSESTATE_FILAMENT_OUT;
+      // enable continue button
+      SENDLINE_DBG_PGM("J18", "TFT Serial Debug: UserConfirm Filament is out... J18");
+      SENDLINE_DBG_PGM("J23", "TFT Serial Debug: UserConfirm Blocking filament prompt... J23");
+    }
+    else if (strcmp_P(msg, PSTR("Filament Purging...")) == 0) {
+      mediaPrintingState = AMPRINTSTATE_PAUSED;
+      mediaPauseState    = AMPAUSESTATE_PARKING;
+      // TODO: JBA I don't think J05 just disables the continue button, i think it injects a rogue M25. So taking this out
+      // disable continue button
+      // SENDLINE_DBG_PGM("J05", "TFT Serial Debug: UserConfirm SD Filament Purging... J05"); // J05 printing pause
+
+      // enable continue button
+      SENDLINE_DBG_PGM("J18", "TFT Serial Debug: UserConfirm Filament is purging... J18");
+    }
+    else if (strcmp_P(msg, PSTR("HeaterTimeout")) == 0) {
+      mediaPrintingState = AMPRINTSTATE_PAUSED;
+      mediaPauseState    = AMPAUSESTATE_HEATER_TIMEOUT;
+      // enable continue button
+      SENDLINE_DBG_PGM("J18", "TFT Serial Debug: UserConfirm SD Heater timeout... J18");
+    }
+    else if (strcmp_P(msg, PSTR("Reheat finished.")) == 0) {
+      mediaPrintingState = AMPRINTSTATE_PAUSED;
+      mediaPauseState    = AMPAUSESTATE_REHEAT_FINISHED;
+      // enable continue button
+      SENDLINE_DBG_PGM("J18", "TFT Serial Debug: UserConfirm SD Reheat done... J18");
+    }
+  #endif
+}
+
+float AnycubicTFTClass::CodeValue() {
+  return (strtod(&TFTcmdbuffer[TFTbufindr][TFTstrchr_pointer - TFTcmdbuffer[TFTbufindr] + 1], nullptr));
+}
+
+bool AnycubicTFTClass::CodeSeen(char code) {
+  TFTstrchr_pointer = strchr(TFTcmdbuffer[TFTbufindr], code);
+  return !!TFTstrchr_pointer; // Return True if a character was found
+}
+
+bool AnycubicTFTClass::IsNozzleHomed() {
+  const float xPosition = getAxisPosition_mm((axis_t) X);
+  const float yPosition = getAxisPosition_mm((axis_t) Y);
+  return WITHIN(xPosition, X_MIN_POS - 0.1, X_MIN_POS + 0.1) &&
+         WITHIN(yPosition, Y_MIN_POS - 0.1, Y_MIN_POS + 0.1);
+}
+
+void AnycubicTFTClass::HandleSpecialMenu() {
+  /**
+   * NOTE: that the file selection command actual lowercases the entire selected file/foldername, so charracter comparisons need to be lowercase.
+   */
+  if (SelectedDirectory[0] == '<') {
+    switch (SelectedDirectory[1]) {
+      case 'e': // "<exit>"
+        SpecialMenu = false;
+        return;
+        break;
+
+        #if ENABLED(PROBE_MANUALLY)
+          case '0':
+            switch (SelectedDirectory[2]) {
+              case '1': // "<01ZUp0.1>"
+                SERIAL_ECHOLNPGM("Special Menu: Z Up 0.1");
+                injectCommands_P(PSTR("G91\nG1 Z+0.1\nG90"));
+                break;
+
+              case '2': // "<02ZUp0.02>"
+                SERIAL_ECHOLNPGM("Special Menu: Z Up 0.02");
+                injectCommands_P(PSTR("G91\nG1 Z+0.02\nG90"));
+                break;
+
+              case '3': // "<03ZDn0.02>"
+                SERIAL_ECHOLNPGM("Special Menu: Z Down 0.02");
+                injectCommands_P(PSTR("G91\nG1 Z-0.02\nG90"));
+                break;
+
+              case '4': // "<04ZDn0.1>"
+                SERIAL_ECHOLNPGM("Special Menu: Z Down 0.1");
+                injectCommands_P(PSTR("G91\nG1 Z-0.1\nG90"));
+                break;
+
+              case '5': // "<05PrehtBed>"
+                SERIAL_ECHOLNPGM("Special Menu: Preheat Bed");
+                injectCommands_P(PSTR("M140 S65"));
+                break;
+
+              case '6': // "<06SMeshLvl>"
+                SERIAL_ECHOLNPGM("Special Menu: Start Mesh Leveling");
+                injectCommands_P(PSTR("G29S1"));
+                break;
+
+              case '7': // "<07MeshNPnt>"
+                SERIAL_ECHOLNPGM("Special Menu: Next Mesh Point");
+                injectCommands_P(PSTR("G29S2"));
+                break;
+
+              case '8': // "<08HtEndPID>"
+                SERIAL_ECHOLNPGM("Special Menu: Auto Tune Hotend PID");
+                // need to dwell for half a second to give the fan a chance to start before the pid tuning starts
+                injectCommands_P(PSTR("M106 S204\nG4 P500\nM303 E0 S215 C15 U1"));
+                break;
+
+              case '9': // "<09HtBedPID>"
+                SERIAL_ECHOLNPGM("Special Menu: Auto Tune Hotbed Pid");
+                injectCommands_P(PSTR("M303 E-1 S65 C6 U1"));
+                break;
+
+              default:
+                break;
+            }
+            break;
+
+          case '1':
+            switch (SelectedDirectory[2]) {
+              case '0': // "<10FWDeflts>"
+                SERIAL_ECHOLNPGM("Special Menu: Load FW Defaults");
+                injectCommands_P(PSTR("M502\nM300 P105 S1661\nM300 P210 S1108"));
+                break;
+
+              case '1': // "<11SvEEPROM>"
+                SERIAL_ECHOLNPGM("Special Menu: Save EEPROM");
+                injectCommands_P(PSTR("M500\nM300 P105 S1108\nM300 P210 S1661"));
+                break;
+
+              default:
+                break;
+            }
+            break;
+        #else // if ENABLED(PROBE_MANUALLY)
+          case '0':
+            switch (SelectedDirectory[2]) {
+              case '1': // "<01PrehtBed>"
+                SERIAL_ECHOLNPGM("Special Menu: Preheat Bed");
+                injectCommands_P(PSTR("M140 S65"));
+                break;
+
+              case '2': // "<02ABL>"
+                SERIAL_ECHOLNPGM("Special Menu: Auto Bed Leveling");
+                injectCommands_P(PSTR("G29N"));
+                break;
+
+              case '3': // "<03HtendPID>"
+                SERIAL_ECHOLNPGM("Special Menu: Auto Tune Hotend PID");
+                // need to dwell for half a second to give the fan a chance to start before the pid tuning starts
+                injectCommands_P(PSTR("M106 S204\nG4 P500\nM303 E0 S215 C15 U1"));
+                break;
+
+              case '4': // "<04HtbedPID>"
+                SERIAL_ECHOLNPGM("Special Menu: Auto Tune Hotbed Pid");
+                injectCommands_P(PSTR("M303 E-1 S65 C6 U1"));
+                break;
+
+              case '5': // "<05FWDeflts>"
+                SERIAL_ECHOLNPGM("Special Menu: Load FW Defaults");
+                injectCommands_P(PSTR("M502\nM300 P105 S1661\nM300 P210 S1108"));
+                break;
+
+              case '6': // "<06SvEEPROM>"
+                SERIAL_ECHOLNPGM("Special Menu: Save EEPROM");
+                injectCommands_P(PSTR("M500\nM300 P105 S1108\nM300 P210 S1661"));
+                break;
+
+              case '7': // <07SendM108>
+                SERIAL_ECHOLNPGM("Special Menu: Send User Confirmation");
+                injectCommands_P(PSTR("M108"));
+                break;
+
+              default:
+                break;
+            }
+            break;
+            #endif  // PROBE_MANUALLY
+
+          default:
+            break;
+    }
+    #if ENABLED(ANYCUBIC_LCD_DEBUG)
+  }
+  else {
+    SERIAL_ECHOPGM("TFT Serial Debug: Attempted to HandleSpecialMenu on non-special menu... ");
+    SERIAL_ECHOLN(SelectedDirectory);
+    #endif
+  }
+}
+
+void AnycubicTFTClass::RenderCurrentFileList() {
+  #if ENABLED(SDSUPPORT)
+    uint16_t selectedNumber = 0;
+    SelectedDirectory[0] = 0;
+    SelectedFile[0] = 0;
+    FileList currentFileList;
+
+    SENDLINE_PGM("FN "); // Filelist start
+
+    if (!isMediaInserted() && !SpecialMenu) {
+      SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to render Current File List... J02");
+
+      SENDLINE_PGM("<Special_Menu>");
+      SENDLINE_PGM("<Special_Menu>");
+    }
+    else {
+      if (CodeSeen('S'))
+        selectedNumber = CodeValue();
+
+      if (SpecialMenu)
+        RenderSpecialMenu(selectedNumber);
+      else if (selectedNumber <= currentFileList.count())
+        RenderCurrentFolder(selectedNumber);
+    }
+    SENDLINE_PGM("END"); // Filelist stop
+  #endif // SDSUPPORT
+}
+
+void AnycubicTFTClass::RenderSpecialMenu(uint16_t selectedNumber) {
+  switch (selectedNumber) {
+    #if ENABLED(PROBE_MANUALLY)
+      case 0: // First Page
+        SENDLINE_PGM("<01ZUp0.1>");
+        SENDLINE_PGM("<Z Up 0.1>");
+        SENDLINE_PGM("<02ZUp0.02>");
+        SENDLINE_PGM("<Z Up 0.02>");
+        SENDLINE_PGM("<03ZDn0.02>");
+        SENDLINE_PGM("<Z Down 0.02>");
+        SENDLINE_PGM("<04ZDn0.1>");
+        SENDLINE_PGM("<Z Down 0.1>");
+        break;
+
+      case 4: // Second Page
+        SENDLINE_PGM("<05PrehtBed>");
+        SENDLINE_PGM("<Preheat bed>");
+        SENDLINE_PGM("<06SMeshLvl>");
+        SENDLINE_PGM("<Start Mesh Leveling>");
+        SENDLINE_PGM("<07MeshNPnt>");
+        SENDLINE_PGM("<Next Mesh Point>");
+        SENDLINE_PGM("<08HtEndPID>");
+        SENDLINE_PGM("<Auto Tune Hotend PID>");
+        break;
+
+      case 8: // Third Page
+        SENDLINE_PGM("<09HtBedPID>");
+        SENDLINE_PGM("<Auto Tune Hotbed PID>");
+        SENDLINE_PGM("<10FWDeflts>");
+        SENDLINE_PGM("<Load FW Defaults>");
+        SENDLINE_PGM("<11SvEEPROM>");
+        SENDLINE_PGM("<Save EEPROM>");
+        SENDLINE_PGM("<Exit>");
+        SENDLINE_PGM("<Exit>");
+        break;
+    #else
+      case 0: // First Page
+        SENDLINE_PGM("<01PrehtBed>");
+        SENDLINE_PGM("<Preheat bed>");
+        SENDLINE_PGM("<02ABL>");
+        SENDLINE_PGM("<Auto Bed Leveling>");
+        SENDLINE_PGM("<03HtEndPID>");
+        SENDLINE_PGM("<Auto Tune Hotend PID>");
+        SENDLINE_PGM("<04HtBedPID>");
+        SENDLINE_PGM("<Auto Tune Hotbed PID>");
+        break;
+
+      case 4: // Second Page
+        SENDLINE_PGM("<05FWDeflts>");
+        SENDLINE_PGM("<Load FW Defaults>");
+        SENDLINE_PGM("<06SvEEPROM>");
+        SENDLINE_PGM("<Save EEPROM>");
+        SENDLINE_PGM("<07SendM108>");
+        SENDLINE_PGM("<Send User Confirmation>");
+        SENDLINE_PGM("<Exit>");
+        SENDLINE_PGM("<Exit>");
+        break;
+
+        #endif // PROBE_MANUALLY
+
+      default:
+        break;
+  }
+}
+
+void AnycubicTFTClass::RenderCurrentFolder(uint16_t selectedNumber) {
+  FileList currentFileList;
+  uint16_t cnt = selectedNumber;
+  uint16_t max_files;
+  uint16_t dir_files = currentFileList.count();
+
+  if ((dir_files - selectedNumber) < 4)
+    max_files = dir_files;
+  else
+    max_files = selectedNumber + 3;
+
+  for (cnt = selectedNumber; cnt <= max_files; cnt++) {
+    if (cnt == 0) { // Special Entry
+      if (currentFileList.isAtRootDir()) {
+        SENDLINE_PGM("<specialmnu>");
+        SENDLINE_PGM("<Special Menu>");
+      }
+      else {
+        SENDLINE_PGM("/..");
+        SENDLINE_PGM("/..");
+      }
+    }
+    else {
+      currentFileList.seek(cnt - 1, false);
+
+      #if ENABLED(ANYCUBIC_LCD_DEBUG)
+        SERIAL_ECHOLN(currentFileList.filename());
+      #endif
+      if (currentFileList.isDir()) {
+        SEND_PGM("/");
+        SENDLINE(currentFileList.shortFilename());
+        SEND_PGM("/");
+        SENDLINE(currentFileList.filename());
+
+      }
+      else {
+        SENDLINE(currentFileList.shortFilename());
+        SENDLINE(currentFileList.filename());
+      }
+    }
+  }
+}
+
+void AnycubicTFTClass::OnPrintTimerStarted() {
+  #if ENABLED(SDSUPPORT)
+    if (mediaPrintingState == AMPRINTSTATE_PRINTING)
+      SENDLINE_DBG_PGM("J04", "TFT Serial Debug: Starting SD Print... J04"); // J04 Starting Print
+
+  #endif
+}
+
+void AnycubicTFTClass::OnPrintTimerPaused() {
+  #if ENABLED(SDSUPPORT)
+    if (isPrintingFromMedia()) {
+      mediaPrintingState = AMPRINTSTATE_PAUSED;
+      mediaPauseState    = AMPAUSESTATE_PARKING;
+    }
+  #endif
+}
+
+void AnycubicTFTClass::OnPrintTimerStopped() {
+  #if ENABLED(SDSUPPORT)
+    if (mediaPrintingState == AMPRINTSTATE_PRINTING) {
+      mediaPrintingState = AMPRINTSTATE_NOT_PRINTING;
+      mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
+      SENDLINE_DBG_PGM("J14", "TFT Serial Debug: SD Print Completed... J14");
+    }
+    // otherwise it was stopped by the printer so don't send print completed signal to TFT
+  #endif
+}
+
+#define ROUND(val) int((val)+0.5f)
+
+void AnycubicTFTClass::GetCommandFromTFT() {
+  char *starpos = nullptr;
+  while (LCD_SERIAL.available() > 0  && TFTbuflen < TFTBUFSIZE) {
+    serial3_char = LCD_SERIAL.read();
+    if (serial3_char == '\n' ||
+        serial3_char == '\r' ||
+        serial3_char == ':'  ||
+        serial3_count >= (TFT_MAX_CMD_SIZE - 1)
+    ) {
+
+      if (!serial3_count) return; // if empty line
+
+      TFTcmdbuffer[TFTbufindw][serial3_count] = 0; // terminate string
+
+      if ((strchr(TFTcmdbuffer[TFTbufindw], 'A') != nullptr)) {
+        int16_t a_command;
+        TFTstrchr_pointer = strchr(TFTcmdbuffer[TFTbufindw], 'A');
+        a_command = ((int)((strtod(&TFTcmdbuffer[TFTbufindw][TFTstrchr_pointer - TFTcmdbuffer[TFTbufindw] + 1], nullptr))));
+
+        #if ENABLED(ANYCUBIC_LCD_DEBUG)
+          if ((a_command > 7) && (a_command != 20))   // No debugging of status polls, please!
+            SERIAL_ECHOLNPAIR("TFT Serial Command: ", TFTcmdbuffer[TFTbufindw]);
+        #endif
+
+        switch (a_command) {
+          case 0: { // A0 GET HOTEND TEMP
+            const celsius_float_t hotendActualTemp = getActualTemp_celsius(E0);
+            SEND_PGM_VAL("A0V ", ROUND(hotendActualTemp));
+          }
+          break;
+
+          case 1: { // A1  GET HOTEND TARGET TEMP
+            const celsius_float_t hotendTargetTemp = getTargetTemp_celsius(E0);
+            SEND_PGM_VAL("A1V ", ROUND(hotendTargetTemp));
+          }
+          break;
+
+          case 2: { // A2 GET HOTBED TEMP
+            const celsius_float_t heatedBedActualTemp = getActualTemp_celsius(BED);
+            SEND_PGM_VAL("A2V ", ROUND(heatedBedActualTemp));
+          }
+          break;
+
+          case 3: { // A3 GET HOTBED TARGET TEMP
+            const celsius_float_t heatedBedTargetTemp = getTargetTemp_celsius(BED);
+            SEND_PGM_VAL("A3V ", ROUND(heatedBedTargetTemp));
+          } break;
+
+          case 4: { // A4 GET FAN SPEED
+            SEND_PGM_VAL("A4V ", int(getActualFan_percent(FAN0)));
+          } break;
+
+          case 5: { // A5 GET CURRENT COORDINATE
+            const float xPosition = getAxisPosition_mm(X),
+                        yPosition = getAxisPosition_mm(Y),
+                        zPosition = getAxisPosition_mm(Z);
+            SEND_PGM("A5V X: "); LCD_SERIAL.print(xPosition);
+            SEND_PGM(   " Y: "); LCD_SERIAL.print(yPosition);
+            SEND_PGM(   " Z: "); LCD_SERIAL.print(zPosition);
+            SENDLINE_PGM("");
+          } break;
+
+          case 6: // A6 GET SD CARD PRINTING STATUS
+            #if ENABLED(SDSUPPORT)
+              if (isPrintingFromMedia()) {
+                SEND_PGM("A6V ");
+                if (isMediaInserted())
+                  SENDLINE(ui8tostr3rj(getProgress_percent()));
+                else
+                  SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to return printing status... J02");
+              }
+              else
+                SENDLINE_PGM("A6V ---");
+            #endif
+            break;
+
+          case 7: { // A7 GET PRINTING TIME
+            const uint32_t elapsedSeconds = getProgress_seconds_elapsed();
+            SEND_PGM("A7V ");
+            if (elapsedSeconds != 0) {  // print time
+              const uint32_t elapsedMinutes = elapsedSeconds / 60;
+              SEND(ui8tostr2(elapsedMinutes / 60));
+              SEND_PGM(" H ");
+              SEND(ui8tostr2(elapsedMinutes % 60));
+              SENDLINE_PGM(" M");
+            }
+            else
+              SENDLINE_PGM(" 999:999");
+          }
+          break;
+
+          case 8: // A8 GET  SD LIST
+            #if ENABLED(SDSUPPORT)
+              SelectedFile[0] = 0;
+              RenderCurrentFileList();
+            #endif
+            break;
+
+          case 9: // A9 pause sd print
+            #if ENABLED(SDSUPPORT)
+              if (isPrintingFromMedia())
+                PausePrint();
+            #endif
+            break;
+
+          case 10: // A10 resume sd print
+            #if ENABLED(SDSUPPORT)
+              if (isPrintingFromMediaPaused())
+                ResumePrint();
+            #endif
+            break;
+
+          case 11: // A11 STOP SD PRINT
+            TERN_(SDSUPPORT, StopPrint());
+            break;
+
+          case 12: // A12 kill
+            kill(PSTR(STR_ERR_KILLED));
+            break;
+
+          case 13: // A13 SELECTION FILE
+            #if ENABLED(SDSUPPORT)
+              if (isMediaInserted()) {
+                starpos = (strchr(TFTstrchr_pointer + 4, '*'));
+                if (TFTstrchr_pointer[4] == '/') {
+                  strcpy(SelectedDirectory, TFTstrchr_pointer + 5);
+                  SelectedFile[0] = 0;
+                  SENDLINE_DBG_PGM("J21", "TFT Serial Debug: Clear file selection... J21 "); // J21 Not File Selected
+                  SENDLINE_PGM("");
+                }
+                else if (TFTstrchr_pointer[4] == '<') {
+                  strcpy(SelectedDirectory, TFTstrchr_pointer + 4);
+                  SpecialMenu = true;
+                  SelectedFile[0] = 0;
+                  SENDLINE_DBG_PGM("J21", "TFT Serial Debug: Clear file selection... J21 "); // J21 Not File Selected
+                  SENDLINE_PGM("");
+                }
+                else {
+                  SelectedDirectory[0] = 0;
+
+                  if (starpos) *(starpos - 1) = '\0';
+
+                  strcpy(SelectedFile, TFTstrchr_pointer + 4);
+                  SENDLINE_DBG_PGM_VAL("J20", "TFT Serial Debug: File Selected... J20 ", SelectedFile); // J20 File Selected
+                }
+              }
+            #endif
+            break;
+
+          case 14: // A14 START PRINTING
+            #if ENABLED(SDSUPPORT)
+              if (!isPrinting() && strlen(SelectedFile) > 0)
+                StartPrint();
+            #endif
+            break;
+
+          case 15: // A15 RESUMING FROM OUTAGE
+            // TODO: JBA implement resume form outage
+            break;
+
+          case 16: { // A16 set hotend temp
+            unsigned int tempvalue;
+            if (CodeSeen('S')) {
+              tempvalue = constrain(CodeValue(), 0, 275);
+              setTargetTemp_celsius(tempvalue, (extruder_t)E0);
+            }
+            else if (CodeSeen('C') && !isPrinting()) {
+              if (getAxisPosition_mm(Z) < 10)
+                injectCommands_P(PSTR("G1 Z10")); // RASE Z AXIS
+              tempvalue = constrain(CodeValue(), 0, 275);
+              setTargetTemp_celsius(tempvalue, (extruder_t)E0);
+            }
+          }
+          break;
+
+          case 17: { // A17 set heated bed temp
+            unsigned int tempbed;
+            if (CodeSeen('S')) {
+              tempbed = constrain(CodeValue(), 0, 100);
+              setTargetTemp_celsius(tempbed, (heater_t)BED);
+            }
+          }
+          break;
+
+          case 18: { // A18 set fan speed
+            float fanPercent;
+            if (CodeSeen('S')) {
+              fanPercent = CodeValue();
+              fanPercent = constrain(fanPercent, 0, 100);
+              setTargetFan_percent(fanPercent, FAN0);
+            }
+            else
+              fanPercent = 100;
+
+            setTargetFan_percent(fanPercent, FAN0);
+            SENDLINE_PGM("");
+          }
+          break;
+
+          case 19: // A19 stop stepper drivers - sent on stop extrude command and on turn motors off command
+            if (!isPrinting()) {
+              quickstop_stepper();
+              disable_all_steppers();
+            }
+
+            SENDLINE_PGM("");
+            break;
+
+          case 20: // A20 read printing speed
+            if (CodeSeen('S'))
+              feedrate_percentage = constrain(CodeValue(), 40, 999);
+            else
+              SEND_PGM_VAL("A20V ", feedrate_percentage);
+            break;
+
+          case 21: // A21 all home
+            if (!isPrinting() && !isPrintingFromMediaPaused()) {
+              if (CodeSeen('X') || CodeSeen('Y') || CodeSeen('Z')) {
+                if (CodeSeen('X'))
+                  injectCommands_P(PSTR("G28X"));
+                if (CodeSeen('Y'))
+                  injectCommands_P(PSTR("G28Y"));
+                if (CodeSeen('Z'))
+                  injectCommands_P(PSTR("G28Z"));
+              }
+              else if (CodeSeen('C')) {
+                injectCommands_P(G28_STR);
+              }
+            }
+            break;
+
+          case 22: // A22 move X/Y/Z or extrude
+            if (!isPrinting()) {
+              float coorvalue;
+              unsigned int movespeed = 0;
+              char commandStr[30];
+              char fullCommandStr[38];
+
+              commandStr[0] = 0; // empty string
+              if (CodeSeen('F'))  // Set feedrate
+                movespeed = CodeValue();
+
+              if (CodeSeen('X')) { // Move in X direction
+                coorvalue = CodeValue();
+                if ((coorvalue <= 0.2) && coorvalue > 0)
+                  sprintf_P(commandStr, PSTR("G1 X0.1F%i"), movespeed);
+                else if ((coorvalue <= -0.1) && coorvalue > -1)
+                  sprintf_P(commandStr, PSTR("G1 X-0.1F%i"), movespeed);
+                else
+                  sprintf_P(commandStr, PSTR("G1 X%iF%i"), int(coorvalue), movespeed);
+              }
+              else if (CodeSeen('Y')) {  // Move in Y direction
+                coorvalue = CodeValue();
+                if ((coorvalue <= 0.2) && coorvalue > 0)
+                  sprintf_P(commandStr, PSTR("G1 Y0.1F%i"), movespeed);
+                else if ((coorvalue <= -0.1) && coorvalue > -1)
+                  sprintf_P(commandStr, PSTR("G1 Y-0.1F%i"), movespeed);
+                else
+                  sprintf_P(commandStr, PSTR("G1 Y%iF%i"), int(coorvalue), movespeed);
+              }
+              else if (CodeSeen('Z')) {  // Move in Z direction
+                coorvalue = CodeValue();
+                if ((coorvalue <= 0.2) && coorvalue > 0)
+                  sprintf_P(commandStr, PSTR("G1 Z0.1F%i"), movespeed);
+                else if ((coorvalue <= -0.1) && coorvalue > -1)
+                  sprintf_P(commandStr, PSTR("G1 Z-0.1F%i"), movespeed);
+                else
+                  sprintf_P(commandStr, PSTR("G1 Z%iF%i"), int(coorvalue), movespeed);
+              }
+              else if (CodeSeen('E')) { // Extrude
+                coorvalue = CodeValue();
+                if ((coorvalue <= 0.2) && coorvalue > 0)
+                  sprintf_P(commandStr, PSTR("G1 E0.1F%i"), movespeed);
+                else if ((coorvalue <= -0.1) && coorvalue > -1)
+                  sprintf_P(commandStr, PSTR("G1 E-0.1F%i"), movespeed);
+                else
+                  sprintf_P(commandStr, PSTR("G1 E%iF500"), int(coorvalue));
+              }
+
+              if (strlen(commandStr) > 0) {
+                sprintf_P(fullCommandStr, PSTR("G91\n%s\nG90"), commandStr);
+                #if ENABLED(ANYCUBIC_LCD_DEBUG)
+                  SERIAL_ECHOPGM("TFT Serial Debug: A22 Move final request with gcode... ");
+                  SERIAL_ECHOLN(fullCommandStr);
+                #endif
+                injectCommands(fullCommandStr);
+              }
+            }
+            SENDLINE_PGM("");
+            break;
+
+          case 23: // A23 preheat pla
+            if (!isPrinting()) {
+              if (getAxisPosition_mm(Z) < 10)
+                injectCommands_P(PSTR("G1 Z10")); // RASE Z AXIS
+
+              setTargetTemp_celsius(PREHEAT_1_TEMP_BED, (heater_t)BED);
+              setTargetTemp_celsius(PREHEAT_1_TEMP_HOTEND, (extruder_t)E0);
+              SENDLINE_PGM("OK");
+            }
+            break;
+
+          case 24:// A24 preheat abs
+            if (!isPrinting()) {
+              if (getAxisPosition_mm(Z) < 10)
+                injectCommands_P(PSTR("G1 Z10")); // RASE Z AXIS
+
+              setTargetTemp_celsius(PREHEAT_2_TEMP_BED, (heater_t)BED);
+              setTargetTemp_celsius(PREHEAT_2_TEMP_HOTEND, (extruder_t)E0);
+              SENDLINE_PGM("OK");
+            }
+            break;
+
+          case 25: // A25 cool down
+            if (!isPrinting()) {
+              setTargetTemp_celsius(0, (heater_t) BED);
+              setTargetTemp_celsius(0, (extruder_t) E0);
+
+              SENDLINE_DBG_PGM("J12", "TFT Serial Debug: Cooling down... J12"); // J12 cool down
+            }
+            break;
+
+          case 26: // A26 refresh SD
+            #if ENABLED(SDSUPPORT)
+              if (isMediaInserted()) {
+                if (strlen(SelectedDirectory) > 0) {
+                  FileList currentFileList;
+                  if ((SelectedDirectory[0] == '.') && (SelectedDirectory[1] == '.')) {
+                    currentFileList.upDir();
+                  }
+                  else {
+                    if (SelectedDirectory[0] == '<')
+                      HandleSpecialMenu();
+                    else
+                      currentFileList.changeDir(SelectedDirectory);
+                  }
+                }
+              }
+              else {
+                SENDLINE_DBG_PGM("J02", "TFT Serial Debug: No SD Card mounted to refresh SD A26... J02");
+              }
+
+              SelectedDirectory[0] = 0;
+            #endif
+            break;
+
+            #if ENABLED(SERVO_ENDSTOPS)
+              case 27: break; // A27 servos angles adjust
+            #endif
+
+          case 28: // A28 filament test
+            if (CodeSeen('O'))
+              NOOP;
+            else if (CodeSeen('C'))
+              NOOP;
+            SENDLINE_PGM("");
+            break;
+
+          case 33: // A33 get version info
+            SEND_PGM("J33 ");
+            SENDLINE_PGM(DETAILED_BUILD_VERSION);
+            break;
+
+          default:
+            break;
+        }
+      }
+
+      TFTbufindw = (TFTbufindw + 1) % TFTBUFSIZE;
+      TFTbuflen += 1;
+      serial3_count = 0; // clear buffer
+    }
+    else {
+      TFTcmdbuffer[TFTbufindw][serial3_count++] = serial3_char;
+    }
+  }
+}
+
+void AnycubicTFTClass::DoSDCardStateCheck() {
+  #if ENABLED(SDSUPPORT) && PIN_EXISTS(SD_DETECT)
+    bool isInserted = isMediaInserted();
+    if (isInserted)
+      SENDLINE_DBG_PGM("J00", "TFT Serial Debug: SD card state changed... isInserted");
+    else
+      SENDLINE_DBG_PGM("J01", "TFT Serial Debug: SD card state changed... !isInserted");
+
+  #endif
+}
+
+void AnycubicTFTClass::DoFilamentRunoutCheck() {
+  #if ENABLED(FILAMENT_RUNOUT_SENSOR)
+    // NOTE: getFilamentRunoutState() only returns the runout state if the job is printing
+    // we want to actually check the status of the pin here, regardless of printstate
+    if (READ(FIL_RUNOUT1_PIN)) {
+      if (mediaPrintingState == AMPRINTSTATE_PRINTING || mediaPrintingState == AMPRINTSTATE_PAUSED || mediaPrintingState == AMPRINTSTATE_PAUSE_REQUESTED) {
+        // play tone to indicate filament is out
+        injectCommands_P(PSTR("\nM300 P200 S1567\nM300 P200 S1174\nM300 P200 S1567\nM300 P200 S1174\nM300 P2000 S1567"));
+
+        // tell the user that the filament has run out and wait
+        SENDLINE_DBG_PGM("J23", "TFT Serial Debug: Blocking filament prompt... J23");
+      }
+      else {
+        SENDLINE_DBG_PGM("J15", "TFT Serial Debug: Non blocking filament runout... J15");
+      }
+    }
+  #endif // FILAMENT_RUNOUT_SENSOR
+}
+
+void AnycubicTFTClass::StartPrint() {
+  #if ENABLED(SDSUPPORT)
+    if (!isPrinting() && strlen(SelectedFile) > 0) {
+      #if ENABLED(ANYCUBIC_LCD_DEBUG)
+        SERIAL_ECHOPGM("TFT Serial Debug: About to print file ... ");
+        SERIAL_ECHO(isPrinting());
+        SERIAL_ECHOPGM(" ");
+        SERIAL_ECHOLN(SelectedFile);
+      #endif
+      mediaPrintingState = AMPRINTSTATE_PRINTING;
+      mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
+      printFile(SelectedFile);
+    }
+  #endif // SDUPPORT
+}
+
+void AnycubicTFTClass::PausePrint() {
+  #if ENABLED(SDSUPPORT)
+    if (isPrintingFromMedia() && mediaPrintingState != AMPRINTSTATE_STOP_REQUESTED && mediaPauseState == AMPAUSESTATE_NOT_PAUSED) {
+      mediaPrintingState = AMPRINTSTATE_PAUSE_REQUESTED;
+      mediaPauseState    = AMPAUSESTATE_NOT_PAUSED; // need the userconfirm method to update pause state
+      SENDLINE_DBG_PGM("J05", "TFT Serial Debug: SD print pause started... J05"); // J05 printing pause
+
+      // for some reason pausing the print doesn't retract the extruder so force a manual one here
+      injectCommands_P(PSTR("G91\nG1 E-2 F1800\nG90"));
+      pausePrint();
+    }
+  #endif
+}
+
+void AnycubicTFTClass::ResumePrint() {
+  #if ENABLED(SDSUPPORT)
+    #if ENABLED(FILAMENT_RUNOUT_SENSOR)
+      if (READ(FIL_RUNOUT1_PIN)) {
+        #if ENABLED(ANYCUBIC_LCD_DEBUG)
+          SERIAL_ECHOLNPGM("TFT Serial Debug: Resume Print with filament sensor still tripped... ");
+        #endif
+
+        // trigger the user message box
+        DoFilamentRunoutCheck();
+
+        // re-enable the continue button
+        SENDLINE_DBG_PGM("J18", "TFT Serial Debug: Resume Print with filament sensor still tripped... J18");
+        return;
+      }
+    #endif
+
+    if (mediaPauseState == AMPAUSESTATE_HEATER_TIMEOUT) {
+      mediaPauseState = AMPAUSESTATE_REHEATING;
+      // TODO: JBA I don't think J05 just disables the continue button, i think it injects a rogue M25. So taking this out
+      // // disable the continue button
+      // SENDLINE_DBG_PGM("J05", "TFT Serial Debug: Resume called with heater timeout... J05"); // J05 printing pause
+
+      // reheat the nozzle
+      setUserConfirmed();
+    }
+    else {
+      mediaPrintingState = AMPRINTSTATE_PRINTING;
+      mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
+
+      SENDLINE_DBG_PGM("J04", "TFT Serial Debug: SD print resumed... J04"); // J04 printing form sd card now
+      resumePrint();
+    }
+  #endif
+}
+
+void AnycubicTFTClass::StopPrint() {
+  #if ENABLED(SDSUPPORT)
+    mediaPrintingState = AMPRINTSTATE_STOP_REQUESTED;
+    mediaPauseState    = AMPAUSESTATE_NOT_PAUSED;
+    SENDLINE_DBG_PGM("J16", "TFT Serial Debug: SD print stop called... J16");
+
+    // for some reason stopping the print doesn't retract the extruder so force a manual one here
+    injectCommands_P(PSTR("G91\nG1 E-2 F1800\nG90"));
+    stopPrint();
+  #endif
+}
+
+#endif // ANYCUBIC_LCD_I3MEGA
