commit 3dc437add4d142b71ea0684848fc1b73e4245a4c
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Thu May 16 08:42:19 2024 +1200

    üé® Apply TERN0/1 for some contexts (#27036)

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
index 585b706a82..12e175420d 100644
--- a/Marlin/src/gcode/temp/M306.cpp
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -42,21 +42,21 @@
  *  R<kelvin/second/kelvin>   Sensor responsiveness (= transfer coefficient / heat capcity).
  *
  *  With MPC_AUTOTUNE:
  *  T                         Autotune the extruder specified with 'E' or the active extruder.
  *                            S0 : Autotuning method AUTO (default)
  *                            S1 : Autotuning method DIFFERENTIAL
  *                            S2 : Autotuning method ASYMPTOTIC
  */
 
 void GcodeSuite::M306() {
-  const uint8_t e = TERN(HAS_MULTI_EXTRUDER, parser.intval('E', active_extruder), 0);
+  const uint8_t e = TERN0(HAS_MULTI_EXTRUDER, parser.intval('E', active_extruder));
   if (e >= (EXTRUDERS)) {
     SERIAL_ECHOLNPGM("?(E)xtruder index out of range (0-", (EXTRUDERS) - 1, ").");
     return;
   }
 
   #if ENABLED(MPC_AUTOTUNE)
     if (parser.seen_test('T')) {
       Temperature::MPCTuningType tuning_type;
       const uint8_t type = parser.byteval('S', 0);
       switch (type) {

commit 669814d0d408a622f020a55971ba04030e4fa4bf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Feb 7 23:40:54 2024 -0600

    ‚ú® MARLIN_SMALL_BUILD option (#26775)

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
index 2830a77ab4..585b706a82 100644
--- a/Marlin/src/gcode/temp/M306.cpp
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -81,20 +81,22 @@ void GcodeSuite::M306() {
       if (parser.seenval('F')) mpc.applyFanAdjustment(parser.value_float());
     #endif
     if (parser.seenval('H')) mpc.filament_heat_capacity_permm = parser.value_float();
     return;
   }
 
   M306_report(true);
 }
 
 void GcodeSuite::M306_report(const bool forReplay/*=true*/) {
+  TERN_(MARLIN_SMALL_BUILD, return);
+
   report_heading(forReplay, F("Model predictive control"));
   HOTEND_LOOP() {
     report_echo_start(forReplay);
     MPC_t &mpc = thermalManager.temp_hotend[e].mpc;
     SERIAL_ECHOPGM("  M306 E", e,
                          " P", p_float_t(mpc.heater_power, 2),
                          " C", p_float_t(mpc.block_heat_capacity, 2),
                          " R", p_float_t(mpc.sensor_responsiveness, 4),
                          " A", p_float_t(mpc.ambient_xfer_coeff_fan0, 4)
     );

commit 2ef71c6ebaa1f1b496eb369879fe22c69cf9adb4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jun 12 16:38:14 2023 -0500

    ‚ôªÔ∏è Simplify SERIAL_ECHO (#25928)
    
    Since this increases AVR code size, try to optimize further.

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
index 7d2d94952f..2830a77ab4 100644
--- a/Marlin/src/gcode/temp/M306.cpp
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -85,24 +85,24 @@ void GcodeSuite::M306() {
   }
 
   M306_report(true);
 }
 
 void GcodeSuite::M306_report(const bool forReplay/*=true*/) {
   report_heading(forReplay, F("Model predictive control"));
   HOTEND_LOOP() {
     report_echo_start(forReplay);
     MPC_t &mpc = thermalManager.temp_hotend[e].mpc;
-    SERIAL_ECHOPGM("  M306 E", e);
-    SERIAL_ECHOPAIR_F(" P", mpc.heater_power, 2);
-    SERIAL_ECHOPAIR_F(" C", mpc.block_heat_capacity, 2);
-    SERIAL_ECHOPAIR_F(" R", mpc.sensor_responsiveness, 4);
-    SERIAL_ECHOPAIR_F(" A", mpc.ambient_xfer_coeff_fan0, 4);
+    SERIAL_ECHOPGM("  M306 E", e,
+                         " P", p_float_t(mpc.heater_power, 2),
+                         " C", p_float_t(mpc.block_heat_capacity, 2),
+                         " R", p_float_t(mpc.sensor_responsiveness, 4),
+                         " A", p_float_t(mpc.ambient_xfer_coeff_fan0, 4)
+    );
     #if ENABLED(MPC_INCLUDE_FAN)
-      SERIAL_ECHOPAIR_F(" F", mpc.fanCoefficient(), 4);
+      SERIAL_ECHOPGM(" F", p_float_t(mpc.fanCoefficient(), 4));
     #endif
-    SERIAL_ECHOPAIR_F(" H", mpc.filament_heat_capacity_permm, 4);
-    SERIAL_EOL();
+    SERIAL_ECHOLNPGM(" H", p_float_t(mpc.filament_heat_capacity_permm, 4));
   }
 }
 
 #endif // MPCTEMP

commit 01f5bd333055e919677d95e05bec1f5f067374a4
Author: StevilKnevil <stevilknevil@hotmail.co.uk>
Date:   Fri May 12 01:09:02 2023 +0100

    üö∏ Improved MPCTEMP autotune (#25503)

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
index d0c005ea4e..7d2d94952f 100644
--- a/Marlin/src/gcode/temp/M306.cpp
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -35,34 +35,44 @@
  *
  * Set MPC values manually for the specified or active extruder:
  *  A<watts/kelvin>           Ambient heat transfer coefficient (no fan).
  *  C<joules/kelvin>          Block heat capacity.
  *  F<watts/kelvin>           Ambient heat transfer coefficient (fan on full).
  *  H<joules/kelvin/mm>       Filament heat capacity per mm.
  *  P<watts>                  Heater power.
  *  R<kelvin/second/kelvin>   Sensor responsiveness (= transfer coefficient / heat capcity).
  *
  *  With MPC_AUTOTUNE:
- *  T                         Autotune the specified or active extruder.
+ *  T                         Autotune the extruder specified with 'E' or the active extruder.
+ *                            S0 : Autotuning method AUTO (default)
+ *                            S1 : Autotuning method DIFFERENTIAL
+ *                            S2 : Autotuning method ASYMPTOTIC
  */
 
 void GcodeSuite::M306() {
   const uint8_t e = TERN(HAS_MULTI_EXTRUDER, parser.intval('E', active_extruder), 0);
   if (e >= (EXTRUDERS)) {
     SERIAL_ECHOLNPGM("?(E)xtruder index out of range (0-", (EXTRUDERS) - 1, ").");
     return;
   }
 
   #if ENABLED(MPC_AUTOTUNE)
     if (parser.seen_test('T')) {
+      Temperature::MPCTuningType tuning_type;
+      const uint8_t type = parser.byteval('S', 0);
+      switch (type) {
+        case 1: tuning_type = Temperature::MPCTuningType::FORCE_DIFFERENTIAL; break;
+        case 2: tuning_type = Temperature::MPCTuningType::FORCE_ASYMPTOTIC; break;
+        default: tuning_type = Temperature::MPCTuningType::AUTO; break;
+      }
       LCD_MESSAGE(MSG_MPC_AUTOTUNE);
-      thermalManager.MPC_autotune(e);
+      thermalManager.MPC_autotune(e, tuning_type);
       ui.reset_status();
       return;
     }
   #endif
 
   if (parser.seen("ACFPRH")) {
     MPC_t &mpc = thermalManager.temp_hotend[e].mpc;
     if (parser.seenval('P')) mpc.heater_power = parser.value_float();
     if (parser.seenval('C')) mpc.block_heat_capacity = parser.value_float();
     if (parser.seenval('R')) mpc.sensor_responsiveness = parser.value_float();

commit b5836b243ac9321841daa9380d55b298375aaa2e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 17 20:12:36 2023 -0500

    üîß Optional MPC_AUTOTUNE to save 5.5 - 5.8KB

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
index 928f375c38..d0c005ea4e 100644
--- a/Marlin/src/gcode/temp/M306.cpp
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -26,44 +26,47 @@
 
 #include "../gcode.h"
 #include "../../lcd/marlinui.h"
 #include "../../module/temperature.h"
 
 /**
  * M306: MPC settings and autotune
  *
  *  E<extruder>               Extruder index. (Default: Active Extruder)
  *
- *  T                         Autotune the specified or active extruder.
- *
  * Set MPC values manually for the specified or active extruder:
  *  A<watts/kelvin>           Ambient heat transfer coefficient (no fan).
  *  C<joules/kelvin>          Block heat capacity.
  *  F<watts/kelvin>           Ambient heat transfer coefficient (fan on full).
  *  H<joules/kelvin/mm>       Filament heat capacity per mm.
  *  P<watts>                  Heater power.
  *  R<kelvin/second/kelvin>   Sensor responsiveness (= transfer coefficient / heat capcity).
+ *
+ *  With MPC_AUTOTUNE:
+ *  T                         Autotune the specified or active extruder.
  */
 
 void GcodeSuite::M306() {
   const uint8_t e = TERN(HAS_MULTI_EXTRUDER, parser.intval('E', active_extruder), 0);
   if (e >= (EXTRUDERS)) {
     SERIAL_ECHOLNPGM("?(E)xtruder index out of range (0-", (EXTRUDERS) - 1, ").");
     return;
   }
 
-  if (parser.seen_test('T')) {
-    LCD_MESSAGE(MSG_MPC_AUTOTUNE);
-    thermalManager.MPC_autotune(e);
-    ui.reset_status();
-    return;
-  }
+  #if ENABLED(MPC_AUTOTUNE)
+    if (parser.seen_test('T')) {
+      LCD_MESSAGE(MSG_MPC_AUTOTUNE);
+      thermalManager.MPC_autotune(e);
+      ui.reset_status();
+      return;
+    }
+  #endif
 
   if (parser.seen("ACFPRH")) {
     MPC_t &mpc = thermalManager.temp_hotend[e].mpc;
     if (parser.seenval('P')) mpc.heater_power = parser.value_float();
     if (parser.seenval('C')) mpc.block_heat_capacity = parser.value_float();
     if (parser.seenval('R')) mpc.sensor_responsiveness = parser.value_float();
     if (parser.seenval('A')) mpc.ambient_xfer_coeff_fan0 = parser.value_float();
     #if ENABLED(MPC_INCLUDE_FAN)
       if (parser.seenval('F')) mpc.applyFanAdjustment(parser.value_float());
     #endif

commit c421a2f5dd8e32e48afadee304301befaf40fd49
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Sun Feb 12 07:35:19 2023 +0100

    ‚ú® M306 E for MPC extruder index (#25326)
    
    Co-Authored-By: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
index 582eb13f81..928f375c38 100644
--- a/Marlin/src/gcode/temp/M306.cpp
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -24,42 +24,49 @@
 
 #if ENABLED(MPCTEMP)
 
 #include "../gcode.h"
 #include "../../lcd/marlinui.h"
 #include "../../module/temperature.h"
 
 /**
  * M306: MPC settings and autotune
  *
- *  T                         Autotune the active extruder.
+ *  E<extruder>               Extruder index. (Default: Active Extruder)
  *
+ *  T                         Autotune the specified or active extruder.
+ *
+ * Set MPC values manually for the specified or active extruder:
  *  A<watts/kelvin>           Ambient heat transfer coefficient (no fan).
  *  C<joules/kelvin>          Block heat capacity.
- *  E<extruder>               Extruder number to set. (Default: E0)
  *  F<watts/kelvin>           Ambient heat transfer coefficient (fan on full).
  *  H<joules/kelvin/mm>       Filament heat capacity per mm.
  *  P<watts>                  Heater power.
  *  R<kelvin/second/kelvin>   Sensor responsiveness (= transfer coefficient / heat capcity).
  */
 
 void GcodeSuite::M306() {
+  const uint8_t e = TERN(HAS_MULTI_EXTRUDER, parser.intval('E', active_extruder), 0);
+  if (e >= (EXTRUDERS)) {
+    SERIAL_ECHOLNPGM("?(E)xtruder index out of range (0-", (EXTRUDERS) - 1, ").");
+    return;
+  }
+
   if (parser.seen_test('T')) {
     LCD_MESSAGE(MSG_MPC_AUTOTUNE);
-    thermalManager.MPC_autotune();
+    thermalManager.MPC_autotune(e);
     ui.reset_status();
     return;
   }
 
   if (parser.seen("ACFPRH")) {
-    const heater_id_t hid = (heater_id_t)parser.intval('E', 0);
-    MPC_t &mpc = thermalManager.temp_hotend[hid].mpc;
+    MPC_t &mpc = thermalManager.temp_hotend[e].mpc;
     if (parser.seenval('P')) mpc.heater_power = parser.value_float();
     if (parser.seenval('C')) mpc.block_heat_capacity = parser.value_float();
     if (parser.seenval('R')) mpc.sensor_responsiveness = parser.value_float();
     if (parser.seenval('A')) mpc.ambient_xfer_coeff_fan0 = parser.value_float();
     #if ENABLED(MPC_INCLUDE_FAN)
       if (parser.seenval('F')) mpc.applyFanAdjustment(parser.value_float());
     #endif
     if (parser.seenval('H')) mpc.filament_heat_capacity_permm = parser.value_float();
     return;
   }

commit 6fe387b6f0722033e6cca96fd5e8215ea7b162eb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 15 06:48:17 2023 -0600

    üßë‚Äçüíª Adjust PID / MPC / ProUI
    
    Changes to simplify #25232 WIP

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
index c6b700eac3..582eb13f81 100644
--- a/Marlin/src/gcode/temp/M306.cpp
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -45,44 +45,44 @@
 void GcodeSuite::M306() {
   if (parser.seen_test('T')) {
     LCD_MESSAGE(MSG_MPC_AUTOTUNE);
     thermalManager.MPC_autotune();
     ui.reset_status();
     return;
   }
 
   if (parser.seen("ACFPRH")) {
     const heater_id_t hid = (heater_id_t)parser.intval('E', 0);
-    MPC_t &constants = thermalManager.temp_hotend[hid].constants;
-    if (parser.seenval('P')) constants.heater_power = parser.value_float();
-    if (parser.seenval('C')) constants.block_heat_capacity = parser.value_float();
-    if (parser.seenval('R')) constants.sensor_responsiveness = parser.value_float();
-    if (parser.seenval('A')) constants.ambient_xfer_coeff_fan0 = parser.value_float();
+    MPC_t &mpc = thermalManager.temp_hotend[hid].mpc;
+    if (parser.seenval('P')) mpc.heater_power = parser.value_float();
+    if (parser.seenval('C')) mpc.block_heat_capacity = parser.value_float();
+    if (parser.seenval('R')) mpc.sensor_responsiveness = parser.value_float();
+    if (parser.seenval('A')) mpc.ambient_xfer_coeff_fan0 = parser.value_float();
     #if ENABLED(MPC_INCLUDE_FAN)
-      if (parser.seenval('F')) constants.fan255_adjustment = parser.value_float() - constants.ambient_xfer_coeff_fan0;
+      if (parser.seenval('F')) mpc.applyFanAdjustment(parser.value_float());
     #endif
-    if (parser.seenval('H')) constants.filament_heat_capacity_permm = parser.value_float();
+    if (parser.seenval('H')) mpc.filament_heat_capacity_permm = parser.value_float();
     return;
   }
 
   M306_report(true);
 }
 
 void GcodeSuite::M306_report(const bool forReplay/*=true*/) {
   report_heading(forReplay, F("Model predictive control"));
   HOTEND_LOOP() {
     report_echo_start(forReplay);
-    MPC_t& constants = thermalManager.temp_hotend[e].constants;
+    MPC_t &mpc = thermalManager.temp_hotend[e].mpc;
     SERIAL_ECHOPGM("  M306 E", e);
-    SERIAL_ECHOPAIR_F(" P", constants.heater_power, 2);
-    SERIAL_ECHOPAIR_F(" C", constants.block_heat_capacity, 2);
-    SERIAL_ECHOPAIR_F(" R", constants.sensor_responsiveness, 4);
-    SERIAL_ECHOPAIR_F(" A", constants.ambient_xfer_coeff_fan0, 4);
+    SERIAL_ECHOPAIR_F(" P", mpc.heater_power, 2);
+    SERIAL_ECHOPAIR_F(" C", mpc.block_heat_capacity, 2);
+    SERIAL_ECHOPAIR_F(" R", mpc.sensor_responsiveness, 4);
+    SERIAL_ECHOPAIR_F(" A", mpc.ambient_xfer_coeff_fan0, 4);
     #if ENABLED(MPC_INCLUDE_FAN)
-      SERIAL_ECHOPAIR_F(" F", constants.ambient_xfer_coeff_fan0 + constants.fan255_adjustment, 4);
+      SERIAL_ECHOPAIR_F(" F", mpc.fanCoefficient(), 4);
     #endif
-    SERIAL_ECHOPAIR_F(" H", constants.filament_heat_capacity_permm, 4);
+    SERIAL_ECHOPAIR_F(" H", mpc.filament_heat_capacity_permm, 4);
     SERIAL_EOL();
   }
 }
 
 #endif // MPCTEMP

commit 16faa2950a19396325f35c447bfa2b6231fc6d12
Author: Pascal de Bruijn <pmjdebruijn@pcode.nl>
Date:   Mon Nov 14 05:59:25 2022 +0100

    üö∏ M306: Indicate MPC Autotune (#24949)

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
index 7978922ff4..c6b700eac3 100644
--- a/Marlin/src/gcode/temp/M306.cpp
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -18,38 +18,44 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 #include "../../inc/MarlinConfig.h"
 
 #if ENABLED(MPCTEMP)
 
 #include "../gcode.h"
+#include "../../lcd/marlinui.h"
 #include "../../module/temperature.h"
 
 /**
  * M306: MPC settings and autotune
  *
  *  T                         Autotune the active extruder.
  *
  *  A<watts/kelvin>           Ambient heat transfer coefficient (no fan).
  *  C<joules/kelvin>          Block heat capacity.
  *  E<extruder>               Extruder number to set. (Default: E0)
  *  F<watts/kelvin>           Ambient heat transfer coefficient (fan on full).
  *  H<joules/kelvin/mm>       Filament heat capacity per mm.
  *  P<watts>                  Heater power.
  *  R<kelvin/second/kelvin>   Sensor responsiveness (= transfer coefficient / heat capcity).
  */
 
 void GcodeSuite::M306() {
-  if (parser.seen_test('T')) { thermalManager.MPC_autotune(); return; }
+  if (parser.seen_test('T')) {
+    LCD_MESSAGE(MSG_MPC_AUTOTUNE);
+    thermalManager.MPC_autotune();
+    ui.reset_status();
+    return;
+  }
 
   if (parser.seen("ACFPRH")) {
     const heater_id_t hid = (heater_id_t)parser.intval('E', 0);
     MPC_t &constants = thermalManager.temp_hotend[hid].constants;
     if (parser.seenval('P')) constants.heater_power = parser.value_float();
     if (parser.seenval('C')) constants.block_heat_capacity = parser.value_float();
     if (parser.seenval('R')) constants.sensor_responsiveness = parser.value_float();
     if (parser.seenval('A')) constants.ambient_xfer_coeff_fan0 = parser.value_float();
     #if ENABLED(MPC_INCLUDE_FAN)
       if (parser.seenval('F')) constants.fan255_adjustment = parser.value_float() - constants.ambient_xfer_coeff_fan0;

commit ea7bebb56887491d9c6b2a2ba2c2aee98dabc3e5
Author: tombrazier <68918209+tombrazier@users.noreply.github.com>
Date:   Tue May 31 18:01:59 2022 +0100

    üí• More M306 M => M306 H (#24258)
    
    Followup to #24253

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
index 4286b2017e..7978922ff4 100644
--- a/Marlin/src/gcode/temp/M306.cpp
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -67,16 +67,16 @@ void GcodeSuite::M306_report(const bool forReplay/*=true*/) {
     report_echo_start(forReplay);
     MPC_t& constants = thermalManager.temp_hotend[e].constants;
     SERIAL_ECHOPGM("  M306 E", e);
     SERIAL_ECHOPAIR_F(" P", constants.heater_power, 2);
     SERIAL_ECHOPAIR_F(" C", constants.block_heat_capacity, 2);
     SERIAL_ECHOPAIR_F(" R", constants.sensor_responsiveness, 4);
     SERIAL_ECHOPAIR_F(" A", constants.ambient_xfer_coeff_fan0, 4);
     #if ENABLED(MPC_INCLUDE_FAN)
       SERIAL_ECHOPAIR_F(" F", constants.ambient_xfer_coeff_fan0 + constants.fan255_adjustment, 4);
     #endif
-    SERIAL_ECHOPAIR_F(" M", constants.filament_heat_capacity_permm, 4);
+    SERIAL_ECHOPAIR_F(" H", constants.filament_heat_capacity_permm, 4);
     SERIAL_EOL();
   }
 }
 
 #endif // MPCTEMP

commit 6ecf52f196d08d399c24b1516fc0b33b227ed66c
Author: tombrazier <68918209+tombrazier@users.noreply.github.com>
Date:   Sat May 28 23:40:08 2022 +0100

    üö© MPC update (#24253)

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
index 0f286e73b2..4286b2017e 100644
--- a/Marlin/src/gcode/temp/M306.cpp
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -29,50 +29,54 @@
 
 /**
  * M306: MPC settings and autotune
  *
  *  T                         Autotune the active extruder.
  *
  *  A<watts/kelvin>           Ambient heat transfer coefficient (no fan).
  *  C<joules/kelvin>          Block heat capacity.
  *  E<extruder>               Extruder number to set. (Default: E0)
  *  F<watts/kelvin>           Ambient heat transfer coefficient (fan on full).
+ *  H<joules/kelvin/mm>       Filament heat capacity per mm.
  *  P<watts>                  Heater power.
  *  R<kelvin/second/kelvin>   Sensor responsiveness (= transfer coefficient / heat capcity).
  */
 
 void GcodeSuite::M306() {
   if (parser.seen_test('T')) { thermalManager.MPC_autotune(); return; }
 
-  if (parser.seen("ACFPR")) {
+  if (parser.seen("ACFPRH")) {
     const heater_id_t hid = (heater_id_t)parser.intval('E', 0);
     MPC_t &constants = thermalManager.temp_hotend[hid].constants;
     if (parser.seenval('P')) constants.heater_power = parser.value_float();
     if (parser.seenval('C')) constants.block_heat_capacity = parser.value_float();
     if (parser.seenval('R')) constants.sensor_responsiveness = parser.value_float();
     if (parser.seenval('A')) constants.ambient_xfer_coeff_fan0 = parser.value_float();
     #if ENABLED(MPC_INCLUDE_FAN)
       if (parser.seenval('F')) constants.fan255_adjustment = parser.value_float() - constants.ambient_xfer_coeff_fan0;
     #endif
+    if (parser.seenval('H')) constants.filament_heat_capacity_permm = parser.value_float();
     return;
   }
 
   M306_report(true);
 }
 
 void GcodeSuite::M306_report(const bool forReplay/*=true*/) {
   report_heading(forReplay, F("Model predictive control"));
   HOTEND_LOOP() {
     report_echo_start(forReplay);
     MPC_t& constants = thermalManager.temp_hotend[e].constants;
     SERIAL_ECHOPGM("  M306 E", e);
     SERIAL_ECHOPAIR_F(" P", constants.heater_power, 2);
     SERIAL_ECHOPAIR_F(" C", constants.block_heat_capacity, 2);
     SERIAL_ECHOPAIR_F(" R", constants.sensor_responsiveness, 4);
     SERIAL_ECHOPAIR_F(" A", constants.ambient_xfer_coeff_fan0, 4);
     #if ENABLED(MPC_INCLUDE_FAN)
-      SERIAL_ECHOLNPAIR_F(" F", constants.ambient_xfer_coeff_fan0 + constants.fan255_adjustment, 4);
+      SERIAL_ECHOPAIR_F(" F", constants.ambient_xfer_coeff_fan0 + constants.fan255_adjustment, 4);
     #endif
+    SERIAL_ECHOPAIR_F(" M", constants.filament_heat_capacity_permm, 4);
+    SERIAL_EOL();
   }
 }
 
 #endif // MPCTEMP

commit c58c5b09ab48b059607b4146e162cc0babd60e62
Author: John Lagonikas <39417467+zeleps@users.noreply.github.com>
Date:   Mon Apr 18 07:56:52 2022 +0300

    üêõ Fix MPC compile (#24049)
    
    Followup to #23984, #23751
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
index 307972eec1..0f286e73b2 100644
--- a/Marlin/src/gcode/temp/M306.cpp
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -62,15 +62,17 @@ void GcodeSuite::M306() {
 void GcodeSuite::M306_report(const bool forReplay/*=true*/) {
   report_heading(forReplay, F("Model predictive control"));
   HOTEND_LOOP() {
     report_echo_start(forReplay);
     MPC_t& constants = thermalManager.temp_hotend[e].constants;
     SERIAL_ECHOPGM("  M306 E", e);
     SERIAL_ECHOPAIR_F(" P", constants.heater_power, 2);
     SERIAL_ECHOPAIR_F(" C", constants.block_heat_capacity, 2);
     SERIAL_ECHOPAIR_F(" R", constants.sensor_responsiveness, 4);
     SERIAL_ECHOPAIR_F(" A", constants.ambient_xfer_coeff_fan0, 4);
-    SERIAL_ECHOLNPAIR_F(" F", constants.ambient_xfer_coeff_fan0 + constants.fan255_adjustment, 4);
+    #if ENABLED(MPC_INCLUDE_FAN)
+      SERIAL_ECHOLNPAIR_F(" F", constants.ambient_xfer_coeff_fan0 + constants.fan255_adjustment, 4);
+    #endif
   }
 }
 
 #endif // MPCTEMP

commit 3da29b4a04691d4e8dc8691b006cf51c0bf46fc9
Author: tombrazier <68918209+tombrazier@users.noreply.github.com>
Date:   Sun Apr 10 07:20:05 2022 +0100

    üö∏ Improve MPC tuning, add menu items (#23984)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
index 9e1a8dd8ef..307972eec1 100644
--- a/Marlin/src/gcode/temp/M306.cpp
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -49,31 +49,21 @@ void GcodeSuite::M306() {
     if (parser.seenval('P')) constants.heater_power = parser.value_float();
     if (parser.seenval('C')) constants.block_heat_capacity = parser.value_float();
     if (parser.seenval('R')) constants.sensor_responsiveness = parser.value_float();
     if (parser.seenval('A')) constants.ambient_xfer_coeff_fan0 = parser.value_float();
     #if ENABLED(MPC_INCLUDE_FAN)
       if (parser.seenval('F')) constants.fan255_adjustment = parser.value_float() - constants.ambient_xfer_coeff_fan0;
     #endif
     return;
   }
 
-  HOTEND_LOOP() {
-    SERIAL_ECHOLNPGM("MPC constants for hotend ", e);
-    MPC_t& constants = thermalManager.temp_hotend[e].constants;
-    SERIAL_ECHOLNPGM("Heater power: ", constants.heater_power);
-    SERIAL_ECHOLNPGM("Heatblock heat capacity: ", constants.block_heat_capacity);
-    SERIAL_ECHOLNPAIR_F("Sensor responsivness: ", constants.sensor_responsiveness, 4);
-    SERIAL_ECHOLNPAIR_F("Ambient heat transfer coeff. (no fan): ", constants.ambient_xfer_coeff_fan0, 4);
-    #if ENABLED(MPC_INCLUDE_FAN)
-      SERIAL_ECHOLNPAIR_F("Ambient heat transfer coeff. (full fan): ", constants.ambient_xfer_coeff_fan0 + constants.fan255_adjustment, 4);
-    #endif
-  }
+  M306_report(true);
 }
 
 void GcodeSuite::M306_report(const bool forReplay/*=true*/) {
   report_heading(forReplay, F("Model predictive control"));
   HOTEND_LOOP() {
     report_echo_start(forReplay);
     MPC_t& constants = thermalManager.temp_hotend[e].constants;
     SERIAL_ECHOPGM("  M306 E", e);
     SERIAL_ECHOPAIR_F(" P", constants.heater_power, 2);
     SERIAL_ECHOPAIR_F(" C", constants.block_heat_capacity, 2);

commit 72b2e2b2c7230245dea9fcb46b9b8a92bcb11bcc
Author: tombrazier <68918209+tombrazier@users.noreply.github.com>
Date:   Fri Apr 1 08:14:14 2022 +0100

    ‚öóÔ∏è Temperature Model Predictive Control (#23751)

diff --git a/Marlin/src/gcode/temp/M306.cpp b/Marlin/src/gcode/temp/M306.cpp
new file mode 100644
index 0000000000..9e1a8dd8ef
--- /dev/null
+++ b/Marlin/src/gcode/temp/M306.cpp
@@ -0,0 +1,86 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2022 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../inc/MarlinConfig.h"
+
+#if ENABLED(MPCTEMP)
+
+#include "../gcode.h"
+#include "../../module/temperature.h"
+
+/**
+ * M306: MPC settings and autotune
+ *
+ *  T                         Autotune the active extruder.
+ *
+ *  A<watts/kelvin>           Ambient heat transfer coefficient (no fan).
+ *  C<joules/kelvin>          Block heat capacity.
+ *  E<extruder>               Extruder number to set. (Default: E0)
+ *  F<watts/kelvin>           Ambient heat transfer coefficient (fan on full).
+ *  P<watts>                  Heater power.
+ *  R<kelvin/second/kelvin>   Sensor responsiveness (= transfer coefficient / heat capcity).
+ */
+
+void GcodeSuite::M306() {
+  if (parser.seen_test('T')) { thermalManager.MPC_autotune(); return; }
+
+  if (parser.seen("ACFPR")) {
+    const heater_id_t hid = (heater_id_t)parser.intval('E', 0);
+    MPC_t &constants = thermalManager.temp_hotend[hid].constants;
+    if (parser.seenval('P')) constants.heater_power = parser.value_float();
+    if (parser.seenval('C')) constants.block_heat_capacity = parser.value_float();
+    if (parser.seenval('R')) constants.sensor_responsiveness = parser.value_float();
+    if (parser.seenval('A')) constants.ambient_xfer_coeff_fan0 = parser.value_float();
+    #if ENABLED(MPC_INCLUDE_FAN)
+      if (parser.seenval('F')) constants.fan255_adjustment = parser.value_float() - constants.ambient_xfer_coeff_fan0;
+    #endif
+    return;
+  }
+
+  HOTEND_LOOP() {
+    SERIAL_ECHOLNPGM("MPC constants for hotend ", e);
+    MPC_t& constants = thermalManager.temp_hotend[e].constants;
+    SERIAL_ECHOLNPGM("Heater power: ", constants.heater_power);
+    SERIAL_ECHOLNPGM("Heatblock heat capacity: ", constants.block_heat_capacity);
+    SERIAL_ECHOLNPAIR_F("Sensor responsivness: ", constants.sensor_responsiveness, 4);
+    SERIAL_ECHOLNPAIR_F("Ambient heat transfer coeff. (no fan): ", constants.ambient_xfer_coeff_fan0, 4);
+    #if ENABLED(MPC_INCLUDE_FAN)
+      SERIAL_ECHOLNPAIR_F("Ambient heat transfer coeff. (full fan): ", constants.ambient_xfer_coeff_fan0 + constants.fan255_adjustment, 4);
+    #endif
+  }
+}
+
+void GcodeSuite::M306_report(const bool forReplay/*=true*/) {
+  report_heading(forReplay, F("Model predictive control"));
+  HOTEND_LOOP() {
+    report_echo_start(forReplay);
+    MPC_t& constants = thermalManager.temp_hotend[e].constants;
+    SERIAL_ECHOPGM("  M306 E", e);
+    SERIAL_ECHOPAIR_F(" P", constants.heater_power, 2);
+    SERIAL_ECHOPAIR_F(" C", constants.block_heat_capacity, 2);
+    SERIAL_ECHOPAIR_F(" R", constants.sensor_responsiveness, 4);
+    SERIAL_ECHOPAIR_F(" A", constants.ambient_xfer_coeff_fan0, 4);
+    SERIAL_ECHOLNPAIR_F(" F", constants.ambient_xfer_coeff_fan0 + constants.fan255_adjustment, 4);
+  }
+}
+
+#endif // MPCTEMP
