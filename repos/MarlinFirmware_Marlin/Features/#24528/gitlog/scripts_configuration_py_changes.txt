commit 959be66cc22611bbaa8eabafaec308dbcbf3b03d
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Fri Jun 14 17:01:34 2024 -0400

    🔨 Build scripts cleanup (#27157)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
index e0387a219d..85fe8ec0bf 100755
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -11,7 +11,7 @@ def blab(str,level=1):
     if verbose >= level: print(f"[config] {str}")
 
 def config_path(cpath):
-    return Path("Marlin", cpath, encoding='utf-8')
+    return Path("Marlin", cpath)
 
 # Apply a single name = on/off ; name = value ; etc.
 # TODO: Limit to the given (optional) configuration
@@ -223,7 +223,7 @@ def apply_config_ini(cp):
             sect = 'base'
             if '@' in ckey: sect, ckey = map(str.strip, ckey.split('@'))
             cp2 = configparser.ConfigParser()
-            cp2.read(config_path(ckey))
+            cp2.read(config_path(ckey), encoding='utf-8')
             apply_sections(cp2, sect)
             ckey = 'base'
 
@@ -270,7 +270,7 @@ if __name__ == "__main__":
 
     if ini_file:
         user_ini = configparser.ConfigParser()
-        user_ini.read(ini_file)
+        user_ini.read(ini_file, encoding='utf-8')
         apply_config_ini(user_ini)
 
 else:
@@ -279,11 +279,8 @@ else:
     #
     import pioutil
     if pioutil.is_pio_build():
-
-        Import("env")
-
         try:
-            verbose = int(env.GetProjectOption('custom_verbose'))
+            verbose = int(pioutil.env.GetProjectOption('custom_verbose'))
         except:
             pass
 

commit d62ee95d283105b4260a1e6542fb35123bd9eea4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Nov 29 14:24:20 2023 -0600

    🔨 Update config/schema scripts (#26483)

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
old mode 100644
new mode 100755
index 496af8a769..e0387a219d
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -1,8 +1,9 @@
+#!/usr/bin/env python3
 #
 # configuration.py
 # Apply options from config.ini to the existing Configuration headers
 #
-import re, shutil, configparser
+import re, shutil, configparser, datetime
 from pathlib import Path
 
 verbose = 0
@@ -43,6 +44,7 @@ def apply_opt(name, val, conf=None):
                 if val in ("on", "", None):
                     newline = re.sub(r'^(\s*)//+\s*(#define)(\s{1,3})?(\s*)', r'\1\2 \4', line)
                 elif val == "off":
+                    # TODO: Comment more lines in a multi-line define with \ continuation
                     newline = re.sub(r'^(\s*)(#define)(\s{1,3})?(\s*)', r'\1//\2 \4', line)
                 else:
                     # For options with values, enable and set the value
@@ -88,9 +90,38 @@ def apply_opt(name, val, conf=None):
                 elif not isdef:
                     break
                 linenum += 1
-            lines.insert(linenum, f"{prefix}#define {added:30} // Added by config.ini\n")
+            currtime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
+            lines.insert(linenum, f"{prefix}#define {added:30} // Added by config.ini {currtime}\n")
             fullpath.write_text(''.join(lines), encoding='utf-8')
 
+# Disable all (most) defined options in the configuration files.
+# Everything in the named sections. Section hint for exceptions may be added.
+def disable_all_options():
+    # Create a regex to match the option and capture parts of the line
+    regex = re.compile(r'^(\s*)(#define\s+)([A-Z0-9_]+\b)(\s?)(\s*)(.*?)(\s*)(//.*)?$', re.IGNORECASE)
+
+    # Disable all enabled options in both Config files
+    for file in ("Configuration.h", "Configuration_adv.h"):
+        fullpath = config_path(file)
+        lines = fullpath.read_text(encoding='utf-8').split('\n')
+        found = False
+        for i in range(len(lines)):
+            line = lines[i]
+            match = regex.match(line)
+            if match:
+                name = match[3].upper()
+                if name in ('CONFIGURATION_H_VERSION', 'CONFIGURATION_ADV_H_VERSION'): continue
+                if name.startswith('_'): continue
+                found = True
+                # Comment out the define
+                # TODO: Comment more lines in a multi-line define with \ continuation
+                lines[i] = re.sub(r'^(\s*)(#define)(\s{1,3})?(\s*)', r'\1//\2 \4', line)
+                blab(f"Disable {name}")
+
+        # If the option was found, write the modified lines
+        if found:
+            fullpath.write_text('\n'.join(lines), encoding='utf-8')
+
 # Fetch configuration files from GitHub given the path.
 # Return True if any files were fetched.
 def fetch_example(url):
@@ -130,7 +161,7 @@ def fetch_example(url):
 def section_items(cp, sectkey):
     return cp.items(sectkey) if sectkey in cp.sections() else []
 
-# Apply all items from a config section
+# Apply all items from a config section. Ignore ini_ items outside of config:base and config:root.
 def apply_ini_by_name(cp, sect):
     iniok = True
     if sect in ('config:base', 'config:root'):
@@ -206,7 +237,17 @@ def apply_config_ini(cp):
             fetch_example(ckey)
             ckey = 'base'
 
-        if ckey == 'all':
+        #
+        # [flatten] Write out Configuration.h and Configuration_adv.h files with
+        #           just the enabled options and all other content removed.
+        #
+        #if ckey == '[flatten]':
+        #   write_flat_configs()
+
+        if ckey == '[disable]':
+            disable_all_options()
+
+        elif ckey == 'all':
             apply_sections(cp)
 
         else:

commit c751dcfcf915a67b87306ac0e6a8e93e683a3668
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Tue Nov 14 00:48:01 2023 -0500

    🎨 Python ; cleanup (#26426)

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
index 250d9bbd7f..496af8a769 100644
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -194,7 +194,7 @@ def apply_config_ini(cp):
             cp2 = configparser.ConfigParser()
             cp2.read(config_path(ckey))
             apply_sections(cp2, sect)
-            ckey = 'base';
+            ckey = 'base'
 
         # (Allow 'example/' as a shortcut for 'examples/')
         elif ckey.startswith('example/'):

commit e41dc273c9d9ee05947ecd66c44c7c7a91868545
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri May 12 20:13:12 2023 -0500

    🔧 Update config.ini and script

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
index 3fc43ed6d8..250d9bbd7f 100644
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -18,7 +18,16 @@ def apply_opt(name, val, conf=None):
     if name == "lcd": name, val = val, "on"
 
     # Create a regex to match the option and capture parts of the line
-    regex = re.compile(rf'^(\s*)(//\s*)?(#define\s+)({name}\b)(\s*)(.*?)(\s*)(//.*)?$', re.IGNORECASE)
+    # 1: Indentation
+    # 2: Comment
+    # 3: #define and whitespace
+    # 4: Option name
+    # 5: First space after name
+    # 6: Remaining spaces between name and value
+    # 7: Option value
+    # 8: Whitespace after value
+    # 9: End comment
+    regex = re.compile(rf'^(\s*)(//\s*)?(#define\s+)({name}\b)(\s?)(\s*)(.*?)(\s*)(//.*)?$', re.IGNORECASE)
 
     # Find and enable and/or update all matches
     for file in ("Configuration.h", "Configuration_adv.h"):
@@ -37,10 +46,11 @@ def apply_opt(name, val, conf=None):
                     newline = re.sub(r'^(\s*)(#define)(\s{1,3})?(\s*)', r'\1//\2 \4', line)
                 else:
                     # For options with values, enable and set the value
-                    newline = match[1] + match[3] + match[4] + match[5] + val
-                    if match[8]:
-                        sp = match[7] if match[7] else ' '
-                        newline += sp + match[8]
+                    addsp = '' if match[5] else ' '
+                    newline = match[1] + match[3] + match[4] + match[5] + addsp + val + match[6]
+                    if match[9]:
+                        sp = match[8] if match[8] else ' '
+                        newline += sp + match[9]
                 lines[i] = newline
                 blab(f"Set {name} to {val}")
 

commit 894e3787028575015bb6f978ab28219bda66f58d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Feb 28 17:50:06 2023 -0600

    🔨 Improve config.ini example fetch

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
index 7a07f02d46..3fc43ed6d8 100644
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -88,6 +88,7 @@ def fetch_example(url):
     if not url.startswith('http'):
         brch = "bugfix-2.1.x"
         if '@' in url: url, brch = map(str.strip, url.split('@'))
+        if url == 'examples/default': url = 'default'
         url = f"https://raw.githubusercontent.com/MarlinFirmware/Configurations/{brch}/config/{url}"
     url = url.replace("%", "%25").replace(" ", "%20")
 
@@ -103,7 +104,7 @@ def fetch_example(url):
     import os
 
     # Reset configurations to default
-    os.system("git reset --hard HEAD")
+    os.system("git checkout HEAD Marlin/*.h")
 
     # Try to fetch the remote files
     gotfile = False
@@ -191,7 +192,7 @@ def apply_config_ini(cp):
 
         # For 'examples/<path>' fetch an example set from GitHub.
         # For https?:// do a direct fetch of the URL.
-        if ckey.startswith('examples/') or ckey.startswith('http:'):
+        if ckey.startswith('examples/') or ckey.startswith('http'):
             fetch_example(ckey)
             ckey = 'base'
 

commit f595878b5b12ba87c88e43160b3434e76c782998
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Feb 8 20:28:56 2023 -0600

    🩹 Various simple fixes

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
index 42fc91038e..7a07f02d46 100644
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -90,7 +90,7 @@ def fetch_example(url):
         if '@' in url: url, brch = map(str.strip, url.split('@'))
         url = f"https://raw.githubusercontent.com/MarlinFirmware/Configurations/{brch}/config/{url}"
     url = url.replace("%", "%25").replace(" ", "%20")
- 
+
     # Find a suitable fetch command
     if shutil.which("curl") is not None:
         fetch = "curl -L -s -S -f -o"

commit d0a965a1df3cab6522704c4a9b2e85b53b3c5c40
Author: Darren Garnier <dgarnier@reinrag.net>
Date:   Mon Jan 30 23:00:49 2023 -0500

    🔨 Fix config.ini URL fetch (#25313)

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
index d752ebc2c8..42fc91038e 100644
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -85,13 +85,12 @@ def apply_opt(name, val, conf=None):
 # Return True if any files were fetched.
 def fetch_example(url):
     if url.endswith("/"): url = url[:-1]
-    if url.startswith('http'):
-        url = url.replace("%", "%25").replace(" ", "%20")
-    else:
+    if not url.startswith('http'):
         brch = "bugfix-2.1.x"
-        if '@' in path: path, brch = map(str.strip, path.split('@'))
+        if '@' in url: url, brch = map(str.strip, url.split('@'))
         url = f"https://raw.githubusercontent.com/MarlinFirmware/Configurations/{brch}/config/{url}"
-
+    url = url.replace("%", "%25").replace(" ", "%20")
+ 
     # Find a suitable fetch command
     if shutil.which("curl") is not None:
         fetch = "curl -L -s -S -f -o"

commit 5af5c2a35c2bfa6c3128fd69f4c57a5eccc82147
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jan 11 01:19:45 2023 -0600

    🔨 Improve config.ini parser

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
index aed9fc2f3d..d752ebc2c8 100644
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -180,10 +180,11 @@ def apply_config_ini(cp):
         # For a key ending in .ini load and parse another .ini file
         if ckey.endswith('.ini'):
             sect = 'base'
-            if '@' in ckey: sect, ckey = ckey.split('@')
-            other_ini = configparser.ConfigParser()
-            other_ini.read(config_path(ckey))
-            apply_sections(other_ini, sect)
+            if '@' in ckey: sect, ckey = map(str.strip, ckey.split('@'))
+            cp2 = configparser.ConfigParser()
+            cp2.read(config_path(ckey))
+            apply_sections(cp2, sect)
+            ckey = 'base';
 
         # (Allow 'example/' as a shortcut for 'examples/')
         elif ckey.startswith('example/'):
@@ -191,11 +192,11 @@ def apply_config_ini(cp):
 
         # For 'examples/<path>' fetch an example set from GitHub.
         # For https?:// do a direct fetch of the URL.
-        elif ckey.startswith('examples/') or ckey.startswith('http'):
+        if ckey.startswith('examples/') or ckey.startswith('http:'):
             fetch_example(ckey)
             ckey = 'base'
 
-        elif ckey == 'all':
+        if ckey == 'all':
             apply_sections(cp)
 
         else:

commit c46ed8f57d55d03ae0da2b85efe315d313320438
Author: ButchMonkey <ButchMonkey@users.noreply.github.com>
Date:   Mon Sep 5 05:48:58 2022 +0100

    🔨 Fix config.ini custom items, and 'all' (#24720)

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
index 64f73d0dcf..aed9fc2f3d 100644
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -78,8 +78,8 @@ def apply_opt(name, val, conf=None):
                 elif not isdef:
                     break
                 linenum += 1
-            lines.insert(linenum, f"{prefix}#define {added} // Added by config.ini\n")
-            fullpath.write_text('\n'.join(lines), encoding='utf-8')
+            lines.insert(linenum, f"{prefix}#define {added:30} // Added by config.ini\n")
+            fullpath.write_text(''.join(lines), encoding='utf-8')
 
 # Fetch configuration files from GitHub given the path.
 # Return True if any files were fetched.
@@ -127,7 +127,7 @@ def apply_ini_by_name(cp, sect):
         iniok = False
         items = section_items(cp, 'config:base') + section_items(cp, 'config:root')
     else:
-        items = cp.items(sect)
+        items = section_items(cp, sect)
 
     for item in items:
         if iniok or not item[0].startswith('ini_'):
@@ -195,8 +195,12 @@ def apply_config_ini(cp):
             fetch_example(ckey)
             ckey = 'base'
 
-        # Apply keyed sections after external files are done
-        apply_sections(cp, 'config:' + ckey)
+        elif ckey == 'all':
+            apply_sections(cp)
+
+        else:
+            # Apply keyed sections after external files are done
+            apply_sections(cp, 'config:' + ckey)
 
 if __name__ == "__main__":
     #

commit 328f6d9affd01bbb33b865f444747a95c67a1ea2
Author: ButchMonkey <ButchMonkey@users.noreply.github.com>
Date:   Sun Sep 4 21:10:22 2022 +0100

    🔨 Fix configuration.py with encoding UTF-8 (#24719)
    
    - Opening files with Windows-1252 encoding.

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
index 93ed12fae6..64f73d0dcf 100644
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -10,7 +10,7 @@ def blab(str,level=1):
     if verbose >= level: print(f"[config] {str}")
 
 def config_path(cpath):
-    return Path("Marlin", cpath)
+    return Path("Marlin", cpath, encoding='utf-8')
 
 # Apply a single name = on/off ; name = value ; etc.
 # TODO: Limit to the given (optional) configuration
@@ -23,7 +23,7 @@ def apply_opt(name, val, conf=None):
     # Find and enable and/or update all matches
     for file in ("Configuration.h", "Configuration_adv.h"):
         fullpath = config_path(file)
-        lines = fullpath.read_text().split('\n')
+        lines = fullpath.read_text(encoding='utf-8').split('\n')
         found = False
         for i in range(len(lines)):
             line = lines[i]
@@ -46,7 +46,7 @@ def apply_opt(name, val, conf=None):
 
         # If the option was found, write the modified lines
         if found:
-            fullpath.write_text('\n'.join(lines))
+            fullpath.write_text('\n'.join(lines), encoding='utf-8')
             break
 
     # If the option didn't appear in either config file, add it
@@ -67,7 +67,7 @@ def apply_opt(name, val, conf=None):
 
         # Prepend the new option after the first set of #define lines
         fullpath = config_path("Configuration.h")
-        with fullpath.open() as f:
+        with fullpath.open(encoding='utf-8') as f:
             lines = f.readlines()
             linenum = 0
             gotdef = False
@@ -79,7 +79,7 @@ def apply_opt(name, val, conf=None):
                     break
                 linenum += 1
             lines.insert(linenum, f"{prefix}#define {added} // Added by config.ini\n")
-            fullpath.write_text('\n'.join(lines))
+            fullpath.write_text('\n'.join(lines), encoding='utf-8')
 
 # Fetch configuration files from GitHub given the path.
 # Return True if any files were fetched.

commit 306e03b03b1a51dd11b6d70ffcbfab099655e68a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Aug 19 11:00:52 2022 -0500

    🧑‍💻 Use spaces indent for Python

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
index 02395f1b8e..93ed12fae6 100644
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -7,229 +7,229 @@ from pathlib import Path
 
 verbose = 0
 def blab(str,level=1):
-	if verbose >= level: print(f"[config] {str}")
+    if verbose >= level: print(f"[config] {str}")
 
 def config_path(cpath):
-	return Path("Marlin", cpath)
+    return Path("Marlin", cpath)
 
 # Apply a single name = on/off ; name = value ; etc.
 # TODO: Limit to the given (optional) configuration
 def apply_opt(name, val, conf=None):
-	if name == "lcd": name, val = val, "on"
-
-	# Create a regex to match the option and capture parts of the line
-	regex = re.compile(rf'^(\s*)(//\s*)?(#define\s+)({name}\b)(\s*)(.*?)(\s*)(//.*)?$', re.IGNORECASE)
-
-	# Find and enable and/or update all matches
-	for file in ("Configuration.h", "Configuration_adv.h"):
-		fullpath = config_path(file)
-		lines = fullpath.read_text().split('\n')
-		found = False
-		for i in range(len(lines)):
-			line = lines[i]
-			match = regex.match(line)
-			if match and match[4].upper() == name.upper():
-				found = True
-				# For boolean options un/comment the define
-				if val in ("on", "", None):
-					newline = re.sub(r'^(\s*)//+\s*(#define)(\s{1,3})?(\s*)', r'\1\2 \4', line)
-				elif val == "off":
-					newline = re.sub(r'^(\s*)(#define)(\s{1,3})?(\s*)', r'\1//\2 \4', line)
-				else:
-					# For options with values, enable and set the value
-					newline = match[1] + match[3] + match[4] + match[5] + val
-					if match[8]:
-						sp = match[7] if match[7] else ' '
-						newline += sp + match[8]
-				lines[i] = newline
-				blab(f"Set {name} to {val}")
-
-		# If the option was found, write the modified lines
-		if found:
-			fullpath.write_text('\n'.join(lines))
-			break
-
-	# If the option didn't appear in either config file, add it
-	if not found:
-		# OFF options are added as disabled items so they appear
-		# in config dumps. Useful for custom settings.
-		prefix = ""
-		if val == "off":
-			prefix, val = "//", ""	# Item doesn't appear in config dump
-			#val = "false"			# Item appears in config dump
-
-		# Uppercase the option unless already mixed/uppercase
-		added = name.upper() if name.islower() else name
-
-		# Add the provided value after the name
-		if val != "on" and val != "" and val is not None:
-			added += " " + val
-
-		# Prepend the new option after the first set of #define lines
-		fullpath = config_path("Configuration.h")
-		with fullpath.open() as f:
-			lines = f.readlines()
-			linenum = 0
-			gotdef = False
-			for line in lines:
-				isdef = line.startswith("#define")
-				if not gotdef:
-					gotdef = isdef
-				elif not isdef:
-					break
-				linenum += 1
-			lines.insert(linenum, f"{prefix}#define {added} // Added by config.ini\n")
-			fullpath.write_text('\n'.join(lines))
+    if name == "lcd": name, val = val, "on"
+
+    # Create a regex to match the option and capture parts of the line
+    regex = re.compile(rf'^(\s*)(//\s*)?(#define\s+)({name}\b)(\s*)(.*?)(\s*)(//.*)?$', re.IGNORECASE)
+
+    # Find and enable and/or update all matches
+    for file in ("Configuration.h", "Configuration_adv.h"):
+        fullpath = config_path(file)
+        lines = fullpath.read_text().split('\n')
+        found = False
+        for i in range(len(lines)):
+            line = lines[i]
+            match = regex.match(line)
+            if match and match[4].upper() == name.upper():
+                found = True
+                # For boolean options un/comment the define
+                if val in ("on", "", None):
+                    newline = re.sub(r'^(\s*)//+\s*(#define)(\s{1,3})?(\s*)', r'\1\2 \4', line)
+                elif val == "off":
+                    newline = re.sub(r'^(\s*)(#define)(\s{1,3})?(\s*)', r'\1//\2 \4', line)
+                else:
+                    # For options with values, enable and set the value
+                    newline = match[1] + match[3] + match[4] + match[5] + val
+                    if match[8]:
+                        sp = match[7] if match[7] else ' '
+                        newline += sp + match[8]
+                lines[i] = newline
+                blab(f"Set {name} to {val}")
+
+        # If the option was found, write the modified lines
+        if found:
+            fullpath.write_text('\n'.join(lines))
+            break
+
+    # If the option didn't appear in either config file, add it
+    if not found:
+        # OFF options are added as disabled items so they appear
+        # in config dumps. Useful for custom settings.
+        prefix = ""
+        if val == "off":
+            prefix, val = "//", ""  # Item doesn't appear in config dump
+            #val = "false"          # Item appears in config dump
+
+        # Uppercase the option unless already mixed/uppercase
+        added = name.upper() if name.islower() else name
+
+        # Add the provided value after the name
+        if val != "on" and val != "" and val is not None:
+            added += " " + val
+
+        # Prepend the new option after the first set of #define lines
+        fullpath = config_path("Configuration.h")
+        with fullpath.open() as f:
+            lines = f.readlines()
+            linenum = 0
+            gotdef = False
+            for line in lines:
+                isdef = line.startswith("#define")
+                if not gotdef:
+                    gotdef = isdef
+                elif not isdef:
+                    break
+                linenum += 1
+            lines.insert(linenum, f"{prefix}#define {added} // Added by config.ini\n")
+            fullpath.write_text('\n'.join(lines))
 
 # Fetch configuration files from GitHub given the path.
 # Return True if any files were fetched.
 def fetch_example(url):
-	if url.endswith("/"): url = url[:-1]
-	if url.startswith('http'):
-		url = url.replace("%", "%25").replace(" ", "%20")
-	else:
-		brch = "bugfix-2.1.x"
-		if '@' in path: path, brch = map(str.strip, path.split('@'))
-		url = f"https://raw.githubusercontent.com/MarlinFirmware/Configurations/{brch}/config/{url}"
-
-	# Find a suitable fetch command
-	if shutil.which("curl") is not None:
-		fetch = "curl -L -s -S -f -o"
-	elif shutil.which("wget") is not None:
-		fetch = "wget -q -O"
-	else:
-		blab("Couldn't find curl or wget", -1)
-		return False
-
-	import os
-
-	# Reset configurations to default
-	os.system("git reset --hard HEAD")
-
-	# Try to fetch the remote files
-	gotfile = False
-	for fn in ("Configuration.h", "Configuration_adv.h", "_Bootscreen.h", "_Statusscreen.h"):
-		if os.system(f"{fetch} wgot {url}/{fn} >/dev/null 2>&1") == 0:
-			shutil.move('wgot', config_path(fn))
-			gotfile = True
-
-	if Path('wgot').exists(): shutil.rmtree('wgot')
-
-	return gotfile
+    if url.endswith("/"): url = url[:-1]
+    if url.startswith('http'):
+        url = url.replace("%", "%25").replace(" ", "%20")
+    else:
+        brch = "bugfix-2.1.x"
+        if '@' in path: path, brch = map(str.strip, path.split('@'))
+        url = f"https://raw.githubusercontent.com/MarlinFirmware/Configurations/{brch}/config/{url}"
+
+    # Find a suitable fetch command
+    if shutil.which("curl") is not None:
+        fetch = "curl -L -s -S -f -o"
+    elif shutil.which("wget") is not None:
+        fetch = "wget -q -O"
+    else:
+        blab("Couldn't find curl or wget", -1)
+        return False
+
+    import os
+
+    # Reset configurations to default
+    os.system("git reset --hard HEAD")
+
+    # Try to fetch the remote files
+    gotfile = False
+    for fn in ("Configuration.h", "Configuration_adv.h", "_Bootscreen.h", "_Statusscreen.h"):
+        if os.system(f"{fetch} wgot {url}/{fn} >/dev/null 2>&1") == 0:
+            shutil.move('wgot', config_path(fn))
+            gotfile = True
+
+    if Path('wgot').exists(): shutil.rmtree('wgot')
+
+    return gotfile
 
 def section_items(cp, sectkey):
-	return cp.items(sectkey) if sectkey in cp.sections() else []
+    return cp.items(sectkey) if sectkey in cp.sections() else []
 
 # Apply all items from a config section
 def apply_ini_by_name(cp, sect):
-	iniok = True
-	if sect in ('config:base', 'config:root'):
-		iniok = False
-		items = section_items(cp, 'config:base') + section_items(cp, 'config:root')
-	else:
-		items = cp.items(sect)
+    iniok = True
+    if sect in ('config:base', 'config:root'):
+        iniok = False
+        items = section_items(cp, 'config:base') + section_items(cp, 'config:root')
+    else:
+        items = cp.items(sect)
 
-	for item in items:
-		if iniok or not item[0].startswith('ini_'):
-			apply_opt(item[0], item[1])
+    for item in items:
+        if iniok or not item[0].startswith('ini_'):
+            apply_opt(item[0], item[1])
 
 # Apply all config sections from a parsed file
 def apply_all_sections(cp):
-	for sect in cp.sections():
-		if sect.startswith('config:'):
-			apply_ini_by_name(cp, sect)
+    for sect in cp.sections():
+        if sect.startswith('config:'):
+            apply_ini_by_name(cp, sect)
 
 # Apply certain config sections from a parsed file
 def apply_sections(cp, ckey='all'):
-	blab(f"Apply section key: {ckey}")
-	if ckey == 'all':
-		apply_all_sections(cp)
-	else:
-		# Apply the base/root config.ini settings after external files are done
-		if ckey in ('base', 'root'):
-			apply_ini_by_name(cp, 'config:base')
-
-		# Apply historically 'Configuration.h' settings everywhere
-		if ckey == 'basic':
-			apply_ini_by_name(cp, 'config:basic')
-
-		# Apply historically Configuration_adv.h settings everywhere
-		# (Some of which rely on defines in 'Conditionals_LCD.h')
-		elif ckey in ('adv', 'advanced'):
-			apply_ini_by_name(cp, 'config:advanced')
-
-		# Apply a specific config:<name> section directly
-		elif ckey.startswith('config:'):
-			apply_ini_by_name(cp, ckey)
+    blab(f"Apply section key: {ckey}")
+    if ckey == 'all':
+        apply_all_sections(cp)
+    else:
+        # Apply the base/root config.ini settings after external files are done
+        if ckey in ('base', 'root'):
+            apply_ini_by_name(cp, 'config:base')
+
+        # Apply historically 'Configuration.h' settings everywhere
+        if ckey == 'basic':
+            apply_ini_by_name(cp, 'config:basic')
+
+        # Apply historically Configuration_adv.h settings everywhere
+        # (Some of which rely on defines in 'Conditionals_LCD.h')
+        elif ckey in ('adv', 'advanced'):
+            apply_ini_by_name(cp, 'config:advanced')
+
+        # Apply a specific config:<name> section directly
+        elif ckey.startswith('config:'):
+            apply_ini_by_name(cp, ckey)
 
 # Apply settings from a top level config.ini
 def apply_config_ini(cp):
-	blab("=" * 20 + " Gather 'config.ini' entries...")
-
-	# Pre-scan for ini_use_config to get config_keys
-	base_items = section_items(cp, 'config:base') + section_items(cp, 'config:root')
-	config_keys = ['base']
-	for ikey, ival in base_items:
-		if ikey == 'ini_use_config':
-			config_keys = map(str.strip, ival.split(','))
-
-	# For each ini_use_config item perform an action
-	for ckey in config_keys:
-		addbase = False
-
-		# For a key ending in .ini load and parse another .ini file
-		if ckey.endswith('.ini'):
-			sect = 'base'
-			if '@' in ckey: sect, ckey = ckey.split('@')
-			other_ini = configparser.ConfigParser()
-			other_ini.read(config_path(ckey))
-			apply_sections(other_ini, sect)
-
-		# (Allow 'example/' as a shortcut for 'examples/')
-		elif ckey.startswith('example/'):
-			ckey = 'examples' + ckey[7:]
-
-		# For 'examples/<path>' fetch an example set from GitHub.
-		# For https?:// do a direct fetch of the URL.
-		elif ckey.startswith('examples/') or ckey.startswith('http'):
-			fetch_example(ckey)
-			ckey = 'base'
-
-		# Apply keyed sections after external files are done
-		apply_sections(cp, 'config:' + ckey)
+    blab("=" * 20 + " Gather 'config.ini' entries...")
+
+    # Pre-scan for ini_use_config to get config_keys
+    base_items = section_items(cp, 'config:base') + section_items(cp, 'config:root')
+    config_keys = ['base']
+    for ikey, ival in base_items:
+        if ikey == 'ini_use_config':
+            config_keys = map(str.strip, ival.split(','))
+
+    # For each ini_use_config item perform an action
+    for ckey in config_keys:
+        addbase = False
+
+        # For a key ending in .ini load and parse another .ini file
+        if ckey.endswith('.ini'):
+            sect = 'base'
+            if '@' in ckey: sect, ckey = ckey.split('@')
+            other_ini = configparser.ConfigParser()
+            other_ini.read(config_path(ckey))
+            apply_sections(other_ini, sect)
+
+        # (Allow 'example/' as a shortcut for 'examples/')
+        elif ckey.startswith('example/'):
+            ckey = 'examples' + ckey[7:]
+
+        # For 'examples/<path>' fetch an example set from GitHub.
+        # For https?:// do a direct fetch of the URL.
+        elif ckey.startswith('examples/') or ckey.startswith('http'):
+            fetch_example(ckey)
+            ckey = 'base'
+
+        # Apply keyed sections after external files are done
+        apply_sections(cp, 'config:' + ckey)
 
 if __name__ == "__main__":
-	#
-	# From command line use the given file name
-	#
-	import sys
-	args = sys.argv[1:]
-	if len(args) > 0:
-		if args[0].endswith('.ini'):
-			ini_file = args[0]
-		else:
-			print("Usage: %s <.ini file>" % sys.argv[0])
-	else:
-		ini_file = config_path('config.ini')
-
-	if ini_file:
-		user_ini = configparser.ConfigParser()
-		user_ini.read(ini_file)
-		apply_config_ini(user_ini)
+    #
+    # From command line use the given file name
+    #
+    import sys
+    args = sys.argv[1:]
+    if len(args) > 0:
+        if args[0].endswith('.ini'):
+            ini_file = args[0]
+        else:
+            print("Usage: %s <.ini file>" % sys.argv[0])
+    else:
+        ini_file = config_path('config.ini')
+
+    if ini_file:
+        user_ini = configparser.ConfigParser()
+        user_ini.read(ini_file)
+        apply_config_ini(user_ini)
 
 else:
-	#
-	# From within PlatformIO use the loaded INI file
-	#
-	import pioutil
-	if pioutil.is_pio_build():
+    #
+    # From within PlatformIO use the loaded INI file
+    #
+    import pioutil
+    if pioutil.is_pio_build():
 
-		Import("env")
+        Import("env")
 
-		try:
-			verbose = int(env.GetProjectOption('custom_verbose'))
-		except:
-			pass
+        try:
+            verbose = int(env.GetProjectOption('custom_verbose'))
+        except:
+            pass
 
-		from platformio.project.config import ProjectConfig
-		apply_config_ini(ProjectConfig())
+        from platformio.project.config import ProjectConfig
+        apply_config_ini(ProjectConfig())

commit b8bd331efd5568c90e379b966e2a558e83e0b75b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Aug 8 06:42:46 2022 -0500

    🔨 Misc. config py updates

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
index 3ab0295749..02395f1b8e 100644
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -83,16 +83,14 @@ def apply_opt(name, val, conf=None):
 
 # Fetch configuration files from GitHub given the path.
 # Return True if any files were fetched.
-def fetch_example(path):
-	if path.endswith("/"):
-		path = path[:-1]
-
-	if '@' in path:
-		path, brch = map(strip, path.split('@'))
-
-	url = path.replace("%", "%25").replace(" ", "%20")
-	if not path.startswith('http'):
-		url = "https://raw.githubusercontent.com/MarlinFirmware/Configurations/bugfix-2.1.x/config/%s" % url
+def fetch_example(url):
+	if url.endswith("/"): url = url[:-1]
+	if url.startswith('http'):
+		url = url.replace("%", "%25").replace(" ", "%20")
+	else:
+		brch = "bugfix-2.1.x"
+		if '@' in path: path, brch = map(str.strip, path.split('@'))
+		url = f"https://raw.githubusercontent.com/MarlinFirmware/Configurations/{brch}/config/{url}"
 
 	# Find a suitable fetch command
 	if shutil.which("curl") is not None:
@@ -108,16 +106,14 @@ def fetch_example(path):
 	# Reset configurations to default
 	os.system("git reset --hard HEAD")
 
-	gotfile = False
-
 	# Try to fetch the remote files
+	gotfile = False
 	for fn in ("Configuration.h", "Configuration_adv.h", "_Bootscreen.h", "_Statusscreen.h"):
-		if os.system("%s wgot %s/%s >/dev/null 2>&1" % (fetch, url, fn)) == 0:
+		if os.system(f"{fetch} wgot {url}/{fn} >/dev/null 2>&1") == 0:
 			shutil.move('wgot', config_path(fn))
 			gotfile = True
 
-	if Path('wgot').exists():
-		shutil.rmtree('wgot')
+	if Path('wgot').exists(): shutil.rmtree('wgot')
 
 	return gotfile
 
@@ -144,13 +140,13 @@ def apply_all_sections(cp):
 			apply_ini_by_name(cp, sect)
 
 # Apply certain config sections from a parsed file
-def apply_sections(cp, ckey='all', addbase=False):
-	blab("[config] apply section key: %s" % ckey)
+def apply_sections(cp, ckey='all'):
+	blab(f"Apply section key: {ckey}")
 	if ckey == 'all':
 		apply_all_sections(cp)
 	else:
 		# Apply the base/root config.ini settings after external files are done
-		if addbase or ckey in ('base', 'root'):
+		if ckey in ('base', 'root'):
 			apply_ini_by_name(cp, 'config:base')
 
 		# Apply historically 'Configuration.h' settings everywhere
@@ -175,7 +171,7 @@ def apply_config_ini(cp):
 	config_keys = ['base']
 	for ikey, ival in base_items:
 		if ikey == 'ini_use_config':
-			config_keys = [ x.strip() for x in ival.split(',') ]
+			config_keys = map(str.strip, ival.split(','))
 
 	# For each ini_use_config item perform an action
 	for ckey in config_keys:
@@ -196,11 +192,11 @@ def apply_config_ini(cp):
 		# For 'examples/<path>' fetch an example set from GitHub.
 		# For https?:// do a direct fetch of the URL.
 		elif ckey.startswith('examples/') or ckey.startswith('http'):
-			addbase = True
 			fetch_example(ckey)
+			ckey = 'base'
 
 		# Apply keyed sections after external files are done
-		apply_sections(cp, 'config:' + ckey, addbase)
+		apply_sections(cp, 'config:' + ckey)
 
 if __name__ == "__main__":
 	#

commit b7fd046d59ca472e7fac9d762f5ea34fc1688662
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Aug 4 15:48:14 2022 -0500

    🔧 Add date, version to Config Export

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
index 8e67b5a001..3ab0295749 100644
--- a/buildroot/share/PlatformIO/scripts/configuration.py
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -18,7 +18,7 @@ def apply_opt(name, val, conf=None):
 	if name == "lcd": name, val = val, "on"
 
 	# Create a regex to match the option and capture parts of the line
-	regex = re.compile(r'^(\s*)(//\s*)?(#define\s+)(' + name + r'\b)(\s*)(.*?)(\s*)(//.*)?$', re.IGNORECASE)
+	regex = re.compile(rf'^(\s*)(//\s*)?(#define\s+)({name}\b)(\s*)(.*?)(\s*)(//.*)?$', re.IGNORECASE)
 
 	# Find and enable and/or update all matches
 	for file in ("Configuration.h", "Configuration_adv.h"):
@@ -87,6 +87,9 @@ def fetch_example(path):
 	if path.endswith("/"):
 		path = path[:-1]
 
+	if '@' in path:
+		path, brch = map(strip, path.split('@'))
+
 	url = path.replace("%", "%25").replace(" ", "%20")
 	if not path.startswith('http'):
 		url = "https://raw.githubusercontent.com/MarlinFirmware/Configurations/bugfix-2.1.x/config/%s" % url

commit 1bed10c38075a15bfec380c9c7763fea336e787e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Aug 4 02:38:15 2022 -0500

    🔧 Config INI, dump options (#24528)

diff --git a/buildroot/share/PlatformIO/scripts/configuration.py b/buildroot/share/PlatformIO/scripts/configuration.py
new file mode 100644
index 0000000000..8e67b5a001
--- /dev/null
+++ b/buildroot/share/PlatformIO/scripts/configuration.py
@@ -0,0 +1,236 @@
+#
+# configuration.py
+# Apply options from config.ini to the existing Configuration headers
+#
+import re, shutil, configparser
+from pathlib import Path
+
+verbose = 0
+def blab(str,level=1):
+	if verbose >= level: print(f"[config] {str}")
+
+def config_path(cpath):
+	return Path("Marlin", cpath)
+
+# Apply a single name = on/off ; name = value ; etc.
+# TODO: Limit to the given (optional) configuration
+def apply_opt(name, val, conf=None):
+	if name == "lcd": name, val = val, "on"
+
+	# Create a regex to match the option and capture parts of the line
+	regex = re.compile(r'^(\s*)(//\s*)?(#define\s+)(' + name + r'\b)(\s*)(.*?)(\s*)(//.*)?$', re.IGNORECASE)
+
+	# Find and enable and/or update all matches
+	for file in ("Configuration.h", "Configuration_adv.h"):
+		fullpath = config_path(file)
+		lines = fullpath.read_text().split('\n')
+		found = False
+		for i in range(len(lines)):
+			line = lines[i]
+			match = regex.match(line)
+			if match and match[4].upper() == name.upper():
+				found = True
+				# For boolean options un/comment the define
+				if val in ("on", "", None):
+					newline = re.sub(r'^(\s*)//+\s*(#define)(\s{1,3})?(\s*)', r'\1\2 \4', line)
+				elif val == "off":
+					newline = re.sub(r'^(\s*)(#define)(\s{1,3})?(\s*)', r'\1//\2 \4', line)
+				else:
+					# For options with values, enable and set the value
+					newline = match[1] + match[3] + match[4] + match[5] + val
+					if match[8]:
+						sp = match[7] if match[7] else ' '
+						newline += sp + match[8]
+				lines[i] = newline
+				blab(f"Set {name} to {val}")
+
+		# If the option was found, write the modified lines
+		if found:
+			fullpath.write_text('\n'.join(lines))
+			break
+
+	# If the option didn't appear in either config file, add it
+	if not found:
+		# OFF options are added as disabled items so they appear
+		# in config dumps. Useful for custom settings.
+		prefix = ""
+		if val == "off":
+			prefix, val = "//", ""	# Item doesn't appear in config dump
+			#val = "false"			# Item appears in config dump
+
+		# Uppercase the option unless already mixed/uppercase
+		added = name.upper() if name.islower() else name
+
+		# Add the provided value after the name
+		if val != "on" and val != "" and val is not None:
+			added += " " + val
+
+		# Prepend the new option after the first set of #define lines
+		fullpath = config_path("Configuration.h")
+		with fullpath.open() as f:
+			lines = f.readlines()
+			linenum = 0
+			gotdef = False
+			for line in lines:
+				isdef = line.startswith("#define")
+				if not gotdef:
+					gotdef = isdef
+				elif not isdef:
+					break
+				linenum += 1
+			lines.insert(linenum, f"{prefix}#define {added} // Added by config.ini\n")
+			fullpath.write_text('\n'.join(lines))
+
+# Fetch configuration files from GitHub given the path.
+# Return True if any files were fetched.
+def fetch_example(path):
+	if path.endswith("/"):
+		path = path[:-1]
+
+	url = path.replace("%", "%25").replace(" ", "%20")
+	if not path.startswith('http'):
+		url = "https://raw.githubusercontent.com/MarlinFirmware/Configurations/bugfix-2.1.x/config/%s" % url
+
+	# Find a suitable fetch command
+	if shutil.which("curl") is not None:
+		fetch = "curl -L -s -S -f -o"
+	elif shutil.which("wget") is not None:
+		fetch = "wget -q -O"
+	else:
+		blab("Couldn't find curl or wget", -1)
+		return False
+
+	import os
+
+	# Reset configurations to default
+	os.system("git reset --hard HEAD")
+
+	gotfile = False
+
+	# Try to fetch the remote files
+	for fn in ("Configuration.h", "Configuration_adv.h", "_Bootscreen.h", "_Statusscreen.h"):
+		if os.system("%s wgot %s/%s >/dev/null 2>&1" % (fetch, url, fn)) == 0:
+			shutil.move('wgot', config_path(fn))
+			gotfile = True
+
+	if Path('wgot').exists():
+		shutil.rmtree('wgot')
+
+	return gotfile
+
+def section_items(cp, sectkey):
+	return cp.items(sectkey) if sectkey in cp.sections() else []
+
+# Apply all items from a config section
+def apply_ini_by_name(cp, sect):
+	iniok = True
+	if sect in ('config:base', 'config:root'):
+		iniok = False
+		items = section_items(cp, 'config:base') + section_items(cp, 'config:root')
+	else:
+		items = cp.items(sect)
+
+	for item in items:
+		if iniok or not item[0].startswith('ini_'):
+			apply_opt(item[0], item[1])
+
+# Apply all config sections from a parsed file
+def apply_all_sections(cp):
+	for sect in cp.sections():
+		if sect.startswith('config:'):
+			apply_ini_by_name(cp, sect)
+
+# Apply certain config sections from a parsed file
+def apply_sections(cp, ckey='all', addbase=False):
+	blab("[config] apply section key: %s" % ckey)
+	if ckey == 'all':
+		apply_all_sections(cp)
+	else:
+		# Apply the base/root config.ini settings after external files are done
+		if addbase or ckey in ('base', 'root'):
+			apply_ini_by_name(cp, 'config:base')
+
+		# Apply historically 'Configuration.h' settings everywhere
+		if ckey == 'basic':
+			apply_ini_by_name(cp, 'config:basic')
+
+		# Apply historically Configuration_adv.h settings everywhere
+		# (Some of which rely on defines in 'Conditionals_LCD.h')
+		elif ckey in ('adv', 'advanced'):
+			apply_ini_by_name(cp, 'config:advanced')
+
+		# Apply a specific config:<name> section directly
+		elif ckey.startswith('config:'):
+			apply_ini_by_name(cp, ckey)
+
+# Apply settings from a top level config.ini
+def apply_config_ini(cp):
+	blab("=" * 20 + " Gather 'config.ini' entries...")
+
+	# Pre-scan for ini_use_config to get config_keys
+	base_items = section_items(cp, 'config:base') + section_items(cp, 'config:root')
+	config_keys = ['base']
+	for ikey, ival in base_items:
+		if ikey == 'ini_use_config':
+			config_keys = [ x.strip() for x in ival.split(',') ]
+
+	# For each ini_use_config item perform an action
+	for ckey in config_keys:
+		addbase = False
+
+		# For a key ending in .ini load and parse another .ini file
+		if ckey.endswith('.ini'):
+			sect = 'base'
+			if '@' in ckey: sect, ckey = ckey.split('@')
+			other_ini = configparser.ConfigParser()
+			other_ini.read(config_path(ckey))
+			apply_sections(other_ini, sect)
+
+		# (Allow 'example/' as a shortcut for 'examples/')
+		elif ckey.startswith('example/'):
+			ckey = 'examples' + ckey[7:]
+
+		# For 'examples/<path>' fetch an example set from GitHub.
+		# For https?:// do a direct fetch of the URL.
+		elif ckey.startswith('examples/') or ckey.startswith('http'):
+			addbase = True
+			fetch_example(ckey)
+
+		# Apply keyed sections after external files are done
+		apply_sections(cp, 'config:' + ckey, addbase)
+
+if __name__ == "__main__":
+	#
+	# From command line use the given file name
+	#
+	import sys
+	args = sys.argv[1:]
+	if len(args) > 0:
+		if args[0].endswith('.ini'):
+			ini_file = args[0]
+		else:
+			print("Usage: %s <.ini file>" % sys.argv[0])
+	else:
+		ini_file = config_path('config.ini')
+
+	if ini_file:
+		user_ini = configparser.ConfigParser()
+		user_ini.read(ini_file)
+		apply_config_ini(user_ini)
+
+else:
+	#
+	# From within PlatformIO use the loaded INI file
+	#
+	import pioutil
+	if pioutil.is_pio_build():
+
+		Import("env")
+
+		try:
+			verbose = int(env.GetProjectOption('custom_verbose'))
+		except:
+			pass
+
+		from platformio.project.config import ProjectConfig
+		apply_config_ini(ProjectConfig())
