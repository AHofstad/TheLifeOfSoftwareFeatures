commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
deleted file mode 100644
index 9318b50d2b..0000000000
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ /dev/null
@@ -1,627 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-#include "../../../../inc/MarlinConfigPre.h"
-
-#if HAS_TFT_LVGL_UI
-
-#include "string.h"
-#include "draw_ui.h"
-#include "pic_manager.h"
-#include "draw_ready_print.h"
-#include "mks_hardware_test.h"
-
-#include "SPIFlashStorage.h"
-#include "../../../../libs/W25Qxx.h"
-
-#include "../../../../sd/cardreader.h"
-#include "../../../../MarlinCore.h"
-
-extern uint16_t DeviceCode;
-
-#if ENABLED(SDSUPPORT)
-  extern char *createFilename(char * const buffer, const dir_t &p);
-#endif
-
-static const char assets[][LONG_FILENAME_LENGTH] = {
-  // Homing screen
-  "bmp_zeroAll.bin",
-  "bmp_zero.bin",
-  "bmp_zeroX.bin",
-  "bmp_zeroY.bin",
-  "bmp_zeroZ.bin",
-  "bmp_manual_off.bin",
-
-  // Tool screen
-  "bmp_preHeat.bin",
-  "bmp_extruct.bin",
-  "bmp_mov.bin",
-  "bmp_leveling.bin",
-  "bmp_filamentchange.bin",
-  "bmp_more.bin",
-
-  // Fan screen
-  "bmp_Add.bin",
-  "bmp_Dec.bin",
-  "bmp_speed255.bin",
-  "bmp_speed127.bin",
-  "bmp_speed0.bin",
-
-  "bmp_bed.bin",
-  "bmp_step1_degree.bin",
-  "bmp_step5_degree.bin",
-  "bmp_step10_degree.bin",
-
-  // Extrusion screen
-  "bmp_in.bin",
-  "bmp_out.bin",
-  "bmp_extru1.bin",
-  #if HAS_MULTI_EXTRUDER
-    "bmp_extru2.bin",
-  #endif
-  "bmp_speed_high.bin",
-  "bmp_speed_slow.bin",
-  "bmp_speed_normal.bin",
-  "bmp_step1_mm.bin",
-  "bmp_step5_mm.bin",
-  "bmp_step10_mm.bin",
-
-  // Select file screen
-  "bmp_pageUp.bin",
-  "bmp_pageDown.bin",
-  "bmp_back.bin", //TODO: why two back buttons? Why not just one? (return / back)
-  "bmp_dir.bin",
-  "bmp_file.bin",
-
-  // Move motor screen
-  // TODO: 6 equal icons, just in diffenct rotation... it may be optimized too
-  "bmp_xAdd.bin",
-  "bmp_xDec.bin",
-  "bmp_yAdd.bin",
-  "bmp_yDec.bin",
-  "bmp_zAdd.bin",
-  "bmp_zDec.bin",
-  "bmp_step_move0_1.bin",
-  "bmp_step_move1.bin",
-  "bmp_step_move10.bin",
-
-  // Operation screen
-  "bmp_auto_off.bin",
-  "bmp_speed.bin",
-  "bmp_fan.bin",
-  "bmp_temp.bin",
-  "bmp_extrude_opr.bin",
-  "bmp_move_opr.bin",
-
-  // Change speed screen
-  "bmp_step1_percent.bin",
-  "bmp_step5_percent.bin",
-  "bmp_step10_percent.bin",
-  "bmp_extruct_sel.bin",
-  "bmp_mov_changespeed.bin",
-  "bmp_mov_sel.bin",
-  "bmp_speed_extruct.bin",
-
-  // Printing screen
-  "bmp_pause.bin",
-  "bmp_resume.bin",
-  "bmp_stop.bin",
-  "bmp_ext1_state.bin",
-  #if HAS_MULTI_EXTRUDER
-    "bmp_ext2_state.bin",
-  #endif
-  "bmp_bed_state.bin",
-  "bmp_fan_state.bin",
-  "bmp_time_state.bin",
-  "bmp_zpos_state.bin",
-  "bmp_operate.bin",
-
-  // Manual Level screen (only if auto level is disabled)
-  #if DISABLED(AUTO_BED_LEVELING_BILINEAR)
-    "bmp_leveling1.bin",
-    "bmp_leveling2.bin",
-    "bmp_leveling3.bin",
-    "bmp_leveling4.bin",
-    "bmp_leveling5.bin",
-  #endif
-
-  // Language Select screen
-  #if HAS_LANG_SELECT_SCREEN
-    "bmp_language.bin",
-    "bmp_simplified_cn.bin",
-    "bmp_simplified_cn_sel.bin",
-    "bmp_traditional_cn.bin",
-    "bmp_traditional_cn_sel.bin",
-    "bmp_english.bin",
-    "bmp_english_sel.bin",
-    "bmp_russian.bin",
-    "bmp_russian_sel.bin",
-    "bmp_spanish.bin",
-    "bmp_spanish_sel.bin",
-    "bmp_french.bin",
-    "bmp_french_sel.bin",
-    "bmp_italy.bin",
-    "bmp_italy_sel.bin",
-  #endif // HAS_LANG_SELECT_SCREEN
-
-  // G-code preview
-  #if HAS_GCODE_DEFAULT_VIEW_IN_FLASH
-    "bmp_preview.bin",
-  #endif
-
-  #if HAS_LOGO_IN_FLASH
-    "bmp_logo.bin",
-  #endif
-
-  // Settings screen
-  "bmp_about.bin",
-  "bmp_eeprom_settings.bin",
-  "bmp_machine_para.bin",
-  "bmp_function1.bin",
-
-  // Start screen
-  "bmp_printing.bin",
-  "bmp_set.bin",
-  "bmp_tool.bin",
-
-  // Base icons
-  "bmp_arrow.bin",
-  "bmp_back70x40.bin",
-  "bmp_value_blank.bin",
-  "bmp_blank_sel.bin",
-  "bmp_disable.bin",
-  "bmp_enable.bin",
-  "bmp_return.bin",
-
-  #if ENABLED(MKS_WIFI_MODULE)
-    // Wifi screen
-    "bmp_wifi.bin",
-    "bmp_cloud.bin",
-  #endif
-
-  #if ENABLED(MULTI_VOLUME)
-    "bmp_usb_disk.bin",
-    // "bmp_usb_disk_sel.bin",
-    "bmp_sd.bin",
-    // "bmp_sd_sel.bin",
-  #endif
-
-  // Babystep screen
-  "bmp_baby_move0_01.bin",
-  "bmp_baby_move0_05.bin",
-  "bmp_baby_move0_1.bin",
-
-  // More screen
-  "bmp_custom1.bin",
-  "bmp_custom2.bin",
-  "bmp_custom3.bin",
-  "bmp_custom4.bin",
-  "bmp_custom5.bin",
-  "bmp_custom6.bin",
-  "bmp_custom7.bin"
-};
-
-#if HAS_SPI_FLASH_FONT
-  static char fonts[][LONG_FILENAME_LENGTH] = { "FontUNIGBK.bin" };
-#endif
-
-uint8_t currentFlashPage = 0;
-
-uint32_t lv_get_pic_addr(uint8_t *Pname) {
-  uint8_t Pic_cnt;
-  uint8_t i, j;
-  PIC_MSG PIC;
-  uint32_t tmp_cnt = 0;
-  uint32_t addr = 0;
-
-  currentFlashPage = 0;
-
-  #if ENABLED(MARLIN_DEV_MODE)
-    SERIAL_ECHOLNPAIR("Getting picture SPI Flash Address: ", (const char*)Pname);
-  #endif
-
-  W25QXX.init(SPI_QUARTER_SPEED);
-
-  W25QXX.SPI_FLASH_BufferRead(&Pic_cnt, PIC_COUNTER_ADDR, 1);
-  if (Pic_cnt == 0xFF) Pic_cnt = 0;
-  for (i = 0; i < Pic_cnt; i++) {
-    j = 0;
-    do {
-      W25QXX.SPI_FLASH_BufferRead(&PIC.name[j], PIC_NAME_ADDR + tmp_cnt, 1);
-      tmp_cnt++;
-    } while (PIC.name[j++] != '\0');
-
-    if ((strcasecmp((char*)Pname, (char*)PIC.name)) == 0) {
-      if (DeviceCode == 0x9488 || DeviceCode == 0x5761)
-        addr = PIC_DATA_ADDR_TFT35 + i * PER_PIC_MAX_SPACE_TFT35;
-      else
-        addr = PIC_DATA_ADDR_TFT32 + i * PER_PIC_MAX_SPACE_TFT32;
-      return addr;
-    }
-  }
-  return addr;
-}
-
-const char *assetsPath = "assets";
-const char *bakPath = "_assets";
-
-void spiFlashErase_PIC() {
-  volatile uint32_t pic_sectorcnt = 0;
-  W25QXX.init(SPI_QUARTER_SPEED);
-  //erase 0x001000 -64K
-  for (pic_sectorcnt = 0; pic_sectorcnt < (64 - 4) / 4; pic_sectorcnt++) {
-    watchdog_refresh();
-    W25QXX.SPI_FLASH_SectorErase(PICINFOADDR + pic_sectorcnt * 4 * 1024);
-  }
-  //erase 64K -- 6M
-  for (pic_sectorcnt = 0; pic_sectorcnt < (PIC_SIZE_xM * 1024 / 64 - 1); pic_sectorcnt++) {
-    watchdog_refresh();
-    W25QXX.SPI_FLASH_BlockErase((pic_sectorcnt + 1) * 64 * 1024);
-  }
-}
-
-#if HAS_SPI_FLASH_FONT
-  void spiFlashErase_FONT() {
-    volatile uint32_t Font_sectorcnt = 0;
-    W25QXX.init(SPI_QUARTER_SPEED);
-    for (Font_sectorcnt = 0; Font_sectorcnt < 32-1; Font_sectorcnt++) {
-      watchdog_refresh();
-      W25QXX.SPI_FLASH_BlockErase(FONTINFOADDR + Font_sectorcnt * 64 * 1024);
-    }
-  }
-#endif
-
-uint32_t LogoWrite_Addroffset = 0;
-
-uint8_t Pic_Logo_Write(uint8_t *LogoName, uint8_t *Logo_Wbuff, uint32_t LogoWriteSize) {
-  if (LogoWriteSize <= 0) return 0;
-
-  W25QXX.SPI_FLASH_BufferWrite(Logo_Wbuff, PIC_LOGO_ADDR + LogoWrite_Addroffset, LogoWriteSize);
-
-  for (uint32_t i = 0; i < LogoWriteSize; i++) {
-    uint8_t temp1;
-    W25QXX.SPI_FLASH_BufferRead(&temp1, PIC_LOGO_ADDR + LogoWrite_Addroffset + i, 1);
-    if (*(Logo_Wbuff + i) != temp1) return 0;
-  }
-  LogoWrite_Addroffset += LogoWriteSize;
-  const uint32_t logo_maxsize = DeviceCode == 0x9488 || DeviceCode == 0x5761 ? LOGO_MAX_SIZE_TFT35 : LOGO_MAX_SIZE_TFT32;
-  if (LogoWrite_Addroffset >= logo_maxsize) LogoWrite_Addroffset = 0;
-  return 1;
-}
-
-uint32_t TitleLogoWrite_Addroffset = 0;
-uint8_t Pic_TitleLogo_Write(uint8_t *TitleLogoName, uint8_t *TitleLogo_Wbuff, uint32_t TitleLogoWriteSize) {
-  if (TitleLogoWriteSize <= 0)
-    return 0;
-  if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761))
-    W25QXX.SPI_FLASH_BufferWrite(TitleLogo_Wbuff, PIC_ICON_LOGO_ADDR_TFT35 + TitleLogoWrite_Addroffset, TitleLogoWriteSize);
-  else
-    W25QXX.SPI_FLASH_BufferWrite(TitleLogo_Wbuff, PIC_ICON_LOGO_ADDR_TFT32 + TitleLogoWrite_Addroffset, TitleLogoWriteSize);
-  TitleLogoWrite_Addroffset += TitleLogoWriteSize;
-  if (TitleLogoWrite_Addroffset >= TITLELOGO_MAX_SIZE)
-    TitleLogoWrite_Addroffset = 0;
-  return 1;
-}
-
-uint32_t default_view_addroffset_r = 0;
-void default_view_Write(uint8_t *default_view__Rbuff, uint32_t default_view_Writesize) {
-  W25QXX.SPI_FLASH_BufferWrite(default_view__Rbuff, DEFAULT_VIEW_ADDR_TFT35 + default_view_addroffset_r, default_view_Writesize);
-  default_view_addroffset_r += default_view_Writesize;
-  if (default_view_addroffset_r >= DEFAULT_VIEW_MAX_SIZE)
-    default_view_addroffset_r = 0;
-}
-
-uint32_t Pic_Info_Write(uint8_t *P_name, uint32_t P_size) {
-  uint8_t pic_counter = 0;
-  uint32_t Pic_SaveAddr;
-  uint32_t Pic_SizeSaveAddr;
-  uint32_t Pic_NameSaveAddr;
-  uint8_t Pname_temp;
-  uint32_t i, j;
-  uint32_t name_len = 0;
-  uint32_t SaveName_len = 0;
-  union union32 size_tmp;
-
-  W25QXX.SPI_FLASH_BufferRead(&pic_counter, PIC_COUNTER_ADDR, 1);
-
-  if (pic_counter == 0xFF)
-    pic_counter = 0;
-
-  if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761))
-    Pic_SaveAddr = PIC_DATA_ADDR_TFT35 + pic_counter * PER_PIC_MAX_SPACE_TFT35;
-  else
-    Pic_SaveAddr = PIC_DATA_ADDR_TFT32 + pic_counter * PER_PIC_MAX_SPACE_TFT32;
-
-  for (j = 0; j < pic_counter; j++) {
-    do {
-      W25QXX.SPI_FLASH_BufferRead(&Pname_temp, PIC_NAME_ADDR + SaveName_len, 1);
-      SaveName_len++;
-    } while (Pname_temp != '\0');
-  }
-  i = 0;
-  while ((*(P_name + i) != '\0')) {
-    i++;
-    name_len++;
-  }
-
-  Pic_NameSaveAddr = PIC_NAME_ADDR + SaveName_len;
-  W25QXX.SPI_FLASH_BufferWrite(P_name, Pic_NameSaveAddr, name_len + 1);
-  Pic_SizeSaveAddr = PIC_SIZE_ADDR + 4 * pic_counter;
-  size_tmp.dwords = P_size;
-  W25QXX.SPI_FLASH_BufferWrite(size_tmp.bytes, Pic_SizeSaveAddr, 4);
-
-  pic_counter++;
-  W25QXX.SPI_FLASH_SectorErase(PIC_COUNTER_ADDR);
-  W25QXX.SPI_FLASH_BufferWrite(&pic_counter, PIC_COUNTER_ADDR, 1);
-
-  return Pic_SaveAddr;
-}
-
-#if ENABLED(SDSUPPORT)
-
-  static void dosName2LongName(const char dosName[11], char *longName) {
-    uint8_t j = 0;
-    LOOP_L_N(i, 11) {
-      if (i == 8) longName[j++] = '.';
-      if (dosName[i] == '\0' || dosName[i] == ' ') continue;
-      longName[j++] = dosName[i];
-    }
-    longName[j] = '\0';
-  }
-
-  static int8_t arrayFindStr(const char arr[][LONG_FILENAME_LENGTH], uint8_t arraySize, const char *str) {
-    for (uint8_t a = 0; a < arraySize; a++) {
-      if (strcasecmp(arr[a], str) == 0)
-        return a;
-    }
-    return -1;
-  }
-
-  #if ENABLED(MARLIN_DEV_MODE)
-    static uint32_t totalSizes = 0, totalCompressed = 0;
-  #endif
-
-  #define ASSET_TYPE_ICON       0
-  #define ASSET_TYPE_LOGO       1
-  #define ASSET_TYPE_TITLE_LOGO 2
-  #define ASSET_TYPE_G_PREVIEW  3
-  #define ASSET_TYPE_FONT       4
-  static void loadAsset(SdFile &dir, dir_t& entry, const char *fn, int8_t assetType) {
-    SdFile file;
-    char dosFilename[FILENAME_LENGTH];
-    createFilename(dosFilename, entry);
-    if (!file.open(&dir, dosFilename, O_READ)) {
-      #if ENABLED(MARLIN_DEV_MODE)
-        SERIAL_ECHOLNPAIR("Error opening Asset: ", fn);
-      #endif
-      return;
-    }
-
-    watchdog_refresh();
-    disp_assets_update_progress(fn);
-
-    W25QXX.init(SPI_QUARTER_SPEED);
-
-    uint16_t pbr;
-    uint32_t pfileSize;
-    uint32_t totalSizeLoaded = 0;
-    uint32_t Pic_Write_Addr;
-    pfileSize = file.fileSize();
-    totalSizeLoaded += pfileSize;
-    if (assetType == ASSET_TYPE_LOGO) {
-      do {
-        watchdog_refresh();
-        pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-        Pic_Logo_Write((uint8_t *)fn, public_buf, pbr);
-      } while (pbr >= BMP_WRITE_BUF_LEN);
-    }
-    else if (assetType == ASSET_TYPE_TITLE_LOGO) {
-      do {
-        watchdog_refresh();
-        pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-        Pic_TitleLogo_Write((uint8_t *)fn, public_buf, pbr);
-      } while (pbr >= BMP_WRITE_BUF_LEN);
-    }
-    else if (assetType == ASSET_TYPE_G_PREVIEW) {
-      do {
-        watchdog_refresh();
-        pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-        default_view_Write(public_buf, pbr);
-      } while (pbr >= BMP_WRITE_BUF_LEN);
-    }
-    else if (assetType == ASSET_TYPE_ICON) {
-      Pic_Write_Addr = Pic_Info_Write((uint8_t *)fn, pfileSize);
-      SPIFlash.beginWrite(Pic_Write_Addr);
-      #if HAS_SPI_FLASH_COMPRESSION
-        do {
-          watchdog_refresh();
-          pbr = file.read(public_buf, SPI_FLASH_PageSize);
-          TERN_(MARLIN_DEV_MODE, totalSizes += pbr);
-          SPIFlash.writeData(public_buf, SPI_FLASH_PageSize);
-        } while (pbr >= SPI_FLASH_PageSize);
-      #else
-        do {
-          pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-          W25QXX.SPI_FLASH_BufferWrite(public_buf, Pic_Write_Addr, pbr);
-          Pic_Write_Addr += pbr;
-        } while (pbr >= BMP_WRITE_BUF_LEN);
-      #endif
-      #if ENABLED(MARLIN_DEV_MODE)
-        SERIAL_ECHOLNPAIR("Space used: ", fn, " - ", (SPIFlash.getCurrentPage() + 1) * SPI_FLASH_PageSize / 1024, "KB");
-        totalCompressed += (SPIFlash.getCurrentPage() + 1) * SPI_FLASH_PageSize;
-      #endif
-      SPIFlash.endWrite();
-    }
-    else if (assetType == ASSET_TYPE_FONT) {
-      Pic_Write_Addr = UNIGBK_FLASH_ADDR;
-      do {
-        watchdog_refresh();
-        pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-        W25QXX.SPI_FLASH_BufferWrite(public_buf, Pic_Write_Addr, pbr);
-        Pic_Write_Addr += pbr;
-      } while (pbr >= BMP_WRITE_BUF_LEN);
-    }
-
-    file.close();
-
-    #if ENABLED(MARLIN_DEV_MODE)
-      SERIAL_ECHOLNPAIR("Asset added: ", fn);
-    #endif
-  }
-
-  void UpdateAssets() {
-    if (!card.isMounted()) return;
-    SdFile dir, root = card.getroot();
-    if (dir.open(&root, assetsPath, O_RDONLY)) {
-
-      disp_assets_update();
-      disp_assets_update_progress("Erasing pics...");
-      watchdog_refresh();
-      spiFlashErase_PIC();
-      #if HAS_SPI_FLASH_FONT
-        disp_assets_update_progress("Erasing fonts...");
-        watchdog_refresh();
-        spiFlashErase_FONT();
-      #endif
-
-      disp_assets_update_progress("Reading files...");
-      dir_t d;
-      while (dir.readDir(&d, card.longFilename) > 0) {
-        // If we dont get a long name, but gets a short one, try it
-        if (card.longFilename[0] == 0 && d.name[0] != 0)
-          dosName2LongName((const char*)d.name, card.longFilename);
-        if (card.longFilename[0] == 0) continue;
-        if (card.longFilename[0] == '.') continue;
-
-        int8_t a = arrayFindStr(assets, COUNT(assets), card.longFilename);
-        if (a >= 0 && a < (int8_t)COUNT(assets)) {
-          uint8_t assetType = ASSET_TYPE_ICON;
-          if (strstr(assets[a], "_logo"))
-            assetType = ASSET_TYPE_LOGO;
-          else if (strstr(assets[a], "_titlelogo"))
-            assetType = ASSET_TYPE_TITLE_LOGO;
-          else if (strstr(assets[a], "_preview"))
-            assetType = ASSET_TYPE_G_PREVIEW;
-
-          loadAsset(dir, d, assets[a], assetType);
-
-          continue;
-        }
-
-        #if HAS_SPI_FLASH_FONT
-          a = arrayFindStr(fonts, COUNT(fonts), card.longFilename);
-          if (a >= 0 && a < (int8_t)COUNT(fonts))
-            loadAsset(dir, d, fonts[a], ASSET_TYPE_FONT);
-        #endif
-      }
-      dir.rename(&root, bakPath);
-    }
-    dir.close();
-
-    #if ENABLED(MARLIN_DEV_MODE)
-      uint8_t pic_counter = 0;
-      W25QXX.SPI_FLASH_BufferRead(&pic_counter, PIC_COUNTER_ADDR, 1);
-      SERIAL_ECHOLNPAIR("Total assets loaded: ", pic_counter);
-      SERIAL_ECHOLNPAIR("Total Uncompressed: ", totalSizes, ", Compressed: ", totalCompressed);
-    #endif
-  }
-
-  #if HAS_SPI_FLASH_FONT
-    void spi_flash_read_test() { W25QXX.SPI_FLASH_BufferRead(public_buf, UNIGBK_FLASH_ADDR, BMP_WRITE_BUF_LEN); }
-  #endif
-
-#endif // SDSUPPORT
-
-void Pic_Read(uint8_t *Pname, uint8_t *P_Rbuff) {
-  uint8_t i, j;
-  uint8_t Pic_cnt;
-  uint32_t tmp_cnt = 0;
-  PIC_MSG PIC;
-
-  W25QXX.SPI_FLASH_BufferRead(&Pic_cnt, PIC_COUNTER_ADDR, 1);
-  if (Pic_cnt == 0xFF)
-    Pic_cnt = 0;
-
-  for (i = 0; i < Pic_cnt; i++) {
-    j = 0;
-    do {
-      W25QXX.SPI_FLASH_BufferRead(&PIC.name[j], PIC_NAME_ADDR + tmp_cnt, 1);
-      tmp_cnt++;
-    } while (PIC.name[j++] != '\0');
-    //pic size
-    W25QXX.SPI_FLASH_BufferRead(PIC.size.bytes, PIC_SIZE_ADDR + i * 4, 4);
-
-    if ((strcmp((char*)Pname, (char*)PIC.name)) == 0) {
-      W25QXX.SPI_FLASH_BufferRead((uint8_t *)P_Rbuff, PIC_DATA_ADDR_TFT35 + i * PER_PIC_MAX_SPACE_TFT35, PIC.size.dwords);
-      break;
-    }
-  }
-}
-
-void lv_pic_test(uint8_t *P_Rbuff, uint32_t addr, uint32_t size) {
-  #if HAS_SPI_FLASH_COMPRESSION
-    if (currentFlashPage == 0)
-      SPIFlash.beginRead(addr);
-    SPIFlash.readData(P_Rbuff, size);
-    currentFlashPage++;
-  #else
-    W25QXX.init(SPI_QUARTER_SPEED);
-    W25QXX.SPI_FLASH_BufferRead((uint8_t *)P_Rbuff, addr, size);
-  #endif
-}
-
-#if HAS_SPI_FLASH_FONT
-  void get_spi_flash_data(const char *rec_buf, int addr, int size) {
-    W25QXX.init(SPI_QUARTER_SPEED);
-    W25QXX.SPI_FLASH_BufferRead((uint8_t *)rec_buf, UNIGBK_FLASH_ADDR + addr, size);
-  }
-#endif
-
-uint32_t logo_addroffset = 0;
-void Pic_Logo_Read(uint8_t *LogoName, uint8_t *Logo_Rbuff, uint32_t LogoReadsize) {
-  W25QXX.init(SPI_QUARTER_SPEED);
-  W25QXX.SPI_FLASH_BufferRead(Logo_Rbuff, PIC_LOGO_ADDR + logo_addroffset, LogoReadsize);
-  logo_addroffset += LogoReadsize;
-  if (logo_addroffset >= LOGO_MAX_SIZE_TFT35)
-    logo_addroffset = 0;
-}
-
-uint32_t default_view_addroffset = 0;
-void default_view_Read(uint8_t *default_view_Rbuff, uint32_t default_view_Readsize) {
-  W25QXX.init(SPI_QUARTER_SPEED);
-  W25QXX.SPI_FLASH_BufferRead(default_view_Rbuff, DEFAULT_VIEW_ADDR_TFT35 + default_view_addroffset, default_view_Readsize);
-  default_view_addroffset += default_view_Readsize;
-  if (default_view_addroffset >= DEFAULT_VIEW_MAX_SIZE)
-    default_view_addroffset = 0;
-}
-
-#if HAS_BAK_VIEW_IN_FLASH
-  uint32_t flash_view_addroffset = 0;
-  void flash_view_Read(uint8_t *flash_view_Rbuff, uint32_t flash_view_Readsize) {
-    W25QXX.init(SPI_QUARTER_SPEED);
-    W25QXX.SPI_FLASH_BufferRead(flash_view_Rbuff, BAK_VIEW_ADDR_TFT35 + flash_view_addroffset, flash_view_Readsize);
-    flash_view_addroffset += flash_view_Readsize;
-    if (flash_view_addroffset >= FLASH_VIEW_MAX_SIZE)
-      flash_view_addroffset = 0;
-  }
-#endif
-
-#endif // HAS_TFT_LVGL_UI

commit 138340ee99a852bc116e2a436932bed074624fde
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Apr 13 19:34:19 2021 -0300

    Multi-Volume. Select Media for LVGL (#21344)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 36f276c21b..9318b50d2b 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -197,6 +197,13 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
     "bmp_cloud.bin",
   #endif
 
+  #if ENABLED(MULTI_VOLUME)
+    "bmp_usb_disk.bin",
+    // "bmp_usb_disk_sel.bin",
+    "bmp_sd.bin",
+    // "bmp_sd_sel.bin",
+  #endif
+
   // Babystep screen
   "bmp_baby_move0_01.bin",
   "bmp_baby_move0_05.bin",

commit 3b73b115ca9366f0155986b717d4c85c31ed2f80
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Mar 29 20:36:37 2021 -0500

    Apply pointer formatting

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 8b96587fea..36f276c21b 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -370,7 +370,7 @@ uint32_t Pic_Info_Write(uint8_t *P_name, uint32_t P_size) {
 
 #if ENABLED(SDSUPPORT)
 
-  static void dosName2LongName(const char dosName[11], char* longName) {
+  static void dosName2LongName(const char dosName[11], char *longName) {
     uint8_t j = 0;
     LOOP_L_N(i, 11) {
       if (i == 8) longName[j++] = '.';
@@ -380,7 +380,7 @@ uint32_t Pic_Info_Write(uint8_t *P_name, uint32_t P_size) {
     longName[j] = '\0';
   }
 
-  static int8_t arrayFindStr(const char arr[][LONG_FILENAME_LENGTH], uint8_t arraySize, const char* str) {
+  static int8_t arrayFindStr(const char arr[][LONG_FILENAME_LENGTH], uint8_t arraySize, const char *str) {
     for (uint8_t a = 0; a < arraySize; a++) {
       if (strcasecmp(arr[a], str) == 0)
         return a;

commit 68abaeab19b41824bc151bc0f65e76ce8a2e4916
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jan 20 18:52:06 2021 -0600

    MarlinUI multi-language support (#20725)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 1cb7ed185e..8b96587fea 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -64,7 +64,6 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_speed255.bin",
   "bmp_speed127.bin",
   "bmp_speed0.bin",
-  "bmp_speed0.bin",
 
   "bmp_bed.bin",
   "bmp_step1_degree.bin",

commit 35c1b330ec62e698a455176330e7d75600af461d
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Thu Jan 14 12:41:09 2021 +0800

    MKS WiFi for TFT_LVGL_UI (#20191)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index c908b9af3a..1cb7ed185e 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -42,7 +42,7 @@ extern uint16_t DeviceCode;
 #endif
 
 static const char assets[][LONG_FILENAME_LENGTH] = {
-  //homing screen
+  // Homing screen
   "bmp_zeroAll.bin",
   "bmp_zero.bin",
   "bmp_zeroX.bin",
@@ -50,14 +50,15 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_zeroZ.bin",
   "bmp_manual_off.bin",
 
-  //tool screen
+  // Tool screen
   "bmp_preHeat.bin",
   "bmp_extruct.bin",
   "bmp_mov.bin",
   "bmp_leveling.bin",
   "bmp_filamentchange.bin",
+  "bmp_more.bin",
 
-  //fan screen
+  // Fan screen
   "bmp_Add.bin",
   "bmp_Dec.bin",
   "bmp_speed255.bin",
@@ -70,7 +71,7 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_step5_degree.bin",
   "bmp_step10_degree.bin",
 
-  //extrusion screen
+  // Extrusion screen
   "bmp_in.bin",
   "bmp_out.bin",
   "bmp_extru1.bin",
@@ -84,15 +85,15 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_step5_mm.bin",
   "bmp_step10_mm.bin",
 
-  //select file screen
+  // Select file screen
   "bmp_pageUp.bin",
   "bmp_pageDown.bin",
   "bmp_back.bin", //TODO: why two back buttons? Why not just one? (return / back)
   "bmp_dir.bin",
   "bmp_file.bin",
 
-  //move motor screen
-  //TODO: 6 equal icons, just in diffenct rotation... it may be optimized too
+  // Move motor screen
+  // TODO: 6 equal icons, just in diffenct rotation... it may be optimized too
   "bmp_xAdd.bin",
   "bmp_xDec.bin",
   "bmp_yAdd.bin",
@@ -103,7 +104,7 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_step_move1.bin",
   "bmp_step_move10.bin",
 
-  //operation screen
+  // Operation screen
   "bmp_auto_off.bin",
   "bmp_speed.bin",
   "bmp_fan.bin",
@@ -111,7 +112,7 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_extrude_opr.bin",
   "bmp_move_opr.bin",
 
-  //change speed screen
+  // Change speed screen
   "bmp_step1_percent.bin",
   "bmp_step5_percent.bin",
   "bmp_step10_percent.bin",
@@ -120,7 +121,7 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_mov_sel.bin",
   "bmp_speed_extruct.bin",
 
-  //printing screen
+  // Printing screen
   "bmp_pause.bin",
   "bmp_resume.bin",
   "bmp_stop.bin",
@@ -134,7 +135,7 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_zpos_state.bin",
   "bmp_operate.bin",
 
-  //manual leval screen (only if disabled auto level)
+  // Manual Level screen (only if auto level is disabled)
   #if DISABLED(AUTO_BED_LEVELING_BILINEAR)
     "bmp_leveling1.bin",
     "bmp_leveling2.bin",
@@ -143,7 +144,7 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
     "bmp_leveling5.bin",
   #endif
 
-  //lang select screen
+  // Language Select screen
   #if HAS_LANG_SELECT_SCREEN
     "bmp_language.bin",
     "bmp_simplified_cn.bin",
@@ -162,7 +163,7 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
     "bmp_italy_sel.bin",
   #endif // HAS_LANG_SELECT_SCREEN
 
-  // gcode preview
+  // G-code preview
   #if HAS_GCODE_DEFAULT_VIEW_IN_FLASH
     "bmp_preview.bin",
   #endif
@@ -171,20 +172,18 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
     "bmp_logo.bin",
   #endif
 
-  // settings screen
+  // Settings screen
   "bmp_about.bin",
+  "bmp_eeprom_settings.bin",
+  "bmp_machine_para.bin",
+  "bmp_function1.bin",
 
-  //start screen
+  // Start screen
   "bmp_printing.bin",
   "bmp_set.bin",
   "bmp_tool.bin",
 
-  // settings screen
-  "bmp_eeprom_settings.bin",
-  "bmp_machine_para.bin",
-  "bmp_function1.bin",
-
-  // base icons
+  // Base icons
   "bmp_arrow.bin",
   "bmp_back70x40.bin",
   "bmp_value_blank.bin",
@@ -194,14 +193,24 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_return.bin",
 
   #if ENABLED(MKS_WIFI_MODULE)
-    // wifi screen
+    // Wifi screen
     "bmp_wifi.bin",
+    "bmp_cloud.bin",
   #endif
 
-  // babystep screen
+  // Babystep screen
   "bmp_baby_move0_01.bin",
   "bmp_baby_move0_05.bin",
-  "bmp_baby_move0_1.bin"
+  "bmp_baby_move0_1.bin",
+
+  // More screen
+  "bmp_custom1.bin",
+  "bmp_custom2.bin",
+  "bmp_custom3.bin",
+  "bmp_custom4.bin",
+  "bmp_custom5.bin",
+  "bmp_custom6.bin",
+  "bmp_custom7.bin"
 };
 
 #if HAS_SPI_FLASH_FONT
@@ -235,14 +244,13 @@ uint32_t lv_get_pic_addr(uint8_t *Pname) {
     } while (PIC.name[j++] != '\0');
 
     if ((strcasecmp((char*)Pname, (char*)PIC.name)) == 0) {
-      if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761))
+      if (DeviceCode == 0x9488 || DeviceCode == 0x5761)
         addr = PIC_DATA_ADDR_TFT35 + i * PER_PIC_MAX_SPACE_TFT35;
       else
         addr = PIC_DATA_ADDR_TFT32 + i * PER_PIC_MAX_SPACE_TFT32;
       return addr;
     }
   }
-
   return addr;
 }
 

commit 44c57ab05a8f909b85f51e08c90316b41e50c455
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 21:02:35 2021 -0600

    MKS UI prelim. cleanup (#20763)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 4dd84d0212..c908b9af3a 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -36,7 +36,6 @@
 #include "../../../../MarlinCore.h"
 
 extern uint16_t DeviceCode;
-extern unsigned char bmp_public_buf[17 * 1024];
 
 #if ENABLED(SDSUPPORT)
   extern char *createFilename(char * const buffer, const dir_t &p);
@@ -55,7 +54,6 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_preHeat.bin",
   "bmp_extruct.bin",
   "bmp_mov.bin",
-  // "bmp_Zero.bin",
   "bmp_leveling.bin",
   "bmp_filamentchange.bin",
 
@@ -65,13 +63,8 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_speed255.bin",
   "bmp_speed127.bin",
   "bmp_speed0.bin",
-
-  //preheat screen
-  // "bmp_Add.bin",
-  // "bmp_Dec.bin",
   "bmp_speed0.bin",
-  // "bmp_Extru2.bin",
-  // "bmp_Extru1.bin",
+
   "bmp_bed.bin",
   "bmp_step1_degree.bin",
   "bmp_step5_degree.bin",
@@ -113,7 +106,6 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   //operation screen
   "bmp_auto_off.bin",
   "bmp_speed.bin",
-  //"bmp_Mamual.bin", //TODO: didn't find it.. changed to bmp_manual_off.bin
   "bmp_fan.bin",
   "bmp_temp.bin",
   "bmp_extrude_opr.bin",
@@ -125,7 +117,6 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_step10_percent.bin",
   "bmp_extruct_sel.bin",
   "bmp_mov_changespeed.bin",
-  // "bmp_extrude_opr.bin", equal to "bmp_Extruct.bin"
   "bmp_mov_sel.bin",
   "bmp_speed_extruct.bin",
 
@@ -182,9 +173,6 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
 
   // settings screen
   "bmp_about.bin",
-  //"bmp_Language.bin",
-  //"bmp_Fan.bin",
-  //"bmp_manual_off.bin",
 
   //start screen
   "bmp_printing.bin",
@@ -373,8 +361,6 @@ uint32_t Pic_Info_Write(uint8_t *P_name, uint32_t P_size) {
   return Pic_SaveAddr;
 }
 
-uint8_t public_buf[512];
-
 #if ENABLED(SDSUPPORT)
 
   static void dosName2LongName(const char dosName[11], char* longName) {

commit 3893114c86c195d227e023c9e702197b54b2636f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Nov 19 15:51:53 2020 -0600

    MKS WiFi preliminary changes

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 5ba7722f55..4dd84d0212 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -205,7 +205,7 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_enable.bin",
   "bmp_return.bin",
 
-  #if ENABLED(USE_WIFI_FUNCTION)
+  #if ENABLED(MKS_WIFI_MODULE)
     // wifi screen
     "bmp_wifi.bin",
   #endif

commit c60696dbae3696006cb24bfe1d51254977f4f65b
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Oct 27 17:16:35 2020 -0300

    Keep watchdog refreshed in LVGL init (#19900)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 70c48f5c8e..5ba7722f55 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -488,6 +488,7 @@ uint8_t public_buf[512];
   }
 
   void UpdateAssets() {
+    if (!card.isMounted()) return;
     SdFile dir, root = card.getroot();
     if (dir.open(&root, assetsPath, O_RDONLY)) {
 

commit 072f996af70b5ac635893eca2d4bd4bbb4f00acc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 21 12:45:27 2020 -0500

    General cleanup, mostly MKS UI (#19825)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 07ac563802..70c48f5c8e 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -206,11 +206,11 @@ static const char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_return.bin",
 
   #if ENABLED(USE_WIFI_FUNCTION)
-    //wifi screen
+    // wifi screen
     "bmp_wifi.bin",
   #endif
 
-  //babystep screen
+  // babystep screen
   "bmp_baby_move0_01.bin",
   "bmp_baby_move0_05.bin",
   "bmp_baby_move0_1.bin"

commit bf33b2f862a0141e1eabc7d864f80de2d97bf9d2
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Oct 13 20:12:34 2020 -0300

    Watchdog Refresh for LVGL Asset Load (#19724)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index d6f5fbf8b5..07ac563802 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -266,19 +266,24 @@ void spiFlashErase_PIC() {
   W25QXX.init(SPI_QUARTER_SPEED);
   //erase 0x001000 -64K
   for (pic_sectorcnt = 0; pic_sectorcnt < (64 - 4) / 4; pic_sectorcnt++) {
+    watchdog_refresh();
     W25QXX.SPI_FLASH_SectorErase(PICINFOADDR + pic_sectorcnt * 4 * 1024);
   }
   //erase 64K -- 6M
-  for (pic_sectorcnt = 0; pic_sectorcnt < (PIC_SIZE_xM * 1024 / 64 - 1); pic_sectorcnt++)
+  for (pic_sectorcnt = 0; pic_sectorcnt < (PIC_SIZE_xM * 1024 / 64 - 1); pic_sectorcnt++) {
+    watchdog_refresh();
     W25QXX.SPI_FLASH_BlockErase((pic_sectorcnt + 1) * 64 * 1024);
+  }
 }
 
 #if HAS_SPI_FLASH_FONT
   void spiFlashErase_FONT() {
     volatile uint32_t Font_sectorcnt = 0;
     W25QXX.init(SPI_QUARTER_SPEED);
-    for (Font_sectorcnt = 0; Font_sectorcnt < 32-1; Font_sectorcnt++)
+    for (Font_sectorcnt = 0; Font_sectorcnt < 32-1; Font_sectorcnt++) {
+      watchdog_refresh();
       W25QXX.SPI_FLASH_BlockErase(FONTINFOADDR + Font_sectorcnt * 64 * 1024);
+    }
   }
 #endif
 
@@ -410,6 +415,7 @@ uint8_t public_buf[512];
       return;
     }
 
+    watchdog_refresh();
     disp_assets_update_progress(fn);
 
     W25QXX.init(SPI_QUARTER_SPEED);
@@ -422,18 +428,21 @@ uint8_t public_buf[512];
     totalSizeLoaded += pfileSize;
     if (assetType == ASSET_TYPE_LOGO) {
       do {
+        watchdog_refresh();
         pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
         Pic_Logo_Write((uint8_t *)fn, public_buf, pbr);
       } while (pbr >= BMP_WRITE_BUF_LEN);
     }
     else if (assetType == ASSET_TYPE_TITLE_LOGO) {
       do {
+        watchdog_refresh();
         pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
         Pic_TitleLogo_Write((uint8_t *)fn, public_buf, pbr);
       } while (pbr >= BMP_WRITE_BUF_LEN);
     }
     else if (assetType == ASSET_TYPE_G_PREVIEW) {
       do {
+        watchdog_refresh();
         pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
         default_view_Write(public_buf, pbr);
       } while (pbr >= BMP_WRITE_BUF_LEN);
@@ -443,6 +452,7 @@ uint8_t public_buf[512];
       SPIFlash.beginWrite(Pic_Write_Addr);
       #if HAS_SPI_FLASH_COMPRESSION
         do {
+          watchdog_refresh();
           pbr = file.read(public_buf, SPI_FLASH_PageSize);
           TERN_(MARLIN_DEV_MODE, totalSizes += pbr);
           SPIFlash.writeData(public_buf, SPI_FLASH_PageSize);
@@ -463,6 +473,7 @@ uint8_t public_buf[512];
     else if (assetType == ASSET_TYPE_FONT) {
       Pic_Write_Addr = UNIGBK_FLASH_ADDR;
       do {
+        watchdog_refresh();
         pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
         W25QXX.SPI_FLASH_BufferWrite(public_buf, Pic_Write_Addr, pbr);
         Pic_Write_Addr += pbr;
@@ -482,9 +493,11 @@ uint8_t public_buf[512];
 
       disp_assets_update();
       disp_assets_update_progress("Erasing pics...");
+      watchdog_refresh();
       spiFlashErase_PIC();
       #if HAS_SPI_FLASH_FONT
         disp_assets_update_progress("Erasing fonts...");
+        watchdog_refresh();
         spiFlashErase_FONT();
       #endif
 

commit 6831341ab483a49d7daad4c704bb684d3cbbf075
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Oct 9 16:50:17 2020 -0500

    Batch appercase hex values

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index e629915309..d6f5fbf8b5 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -543,7 +543,7 @@ void Pic_Read(uint8_t *Pname, uint8_t *P_Rbuff) {
   PIC_MSG PIC;
 
   W25QXX.SPI_FLASH_BufferRead(&Pic_cnt, PIC_COUNTER_ADDR, 1);
-  if (Pic_cnt == 0xff)
+  if (Pic_cnt == 0xFF)
     Pic_cnt = 0;
 
   for (i = 0; i < Pic_cnt; i++) {

commit d8ed74904559aa8bdccc8b68acbccfbf1bf779d3
Author: makerbase <4164049@qq.com>
Date:   Mon Sep 21 09:55:02 2020 +0800

    Add MKS Robin E3P, improve LVGL UI (#19442)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 447303a887..e629915309 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -24,6 +24,7 @@
 #if HAS_TFT_LVGL_UI
 
 #include "string.h"
+#include "draw_ui.h"
 #include "pic_manager.h"
 #include "draw_ready_print.h"
 #include "mks_hardware_test.h"
@@ -41,59 +42,61 @@ extern unsigned char bmp_public_buf[17 * 1024];
   extern char *createFilename(char * const buffer, const dir_t &p);
 #endif
 
-static char assets[][LONG_FILENAME_LENGTH] = {
+static const char assets[][LONG_FILENAME_LENGTH] = {
   //homing screen
-  "bmp_Zero.bin",
+  "bmp_zeroAll.bin",
+  "bmp_zero.bin",
   "bmp_zeroX.bin",
   "bmp_zeroY.bin",
   "bmp_zeroZ.bin",
   "bmp_manual_off.bin",
 
   //tool screen
-  "bmp_PreHeat.bin",
-  "bmp_Extruct.bin",
-  "bmp_Mov.bin",
+  "bmp_preHeat.bin",
+  "bmp_extruct.bin",
+  "bmp_mov.bin",
   // "bmp_Zero.bin",
-  "bmp_Leveling.bin",
+  "bmp_leveling.bin",
+  "bmp_filamentchange.bin",
 
   //fan screen
   "bmp_Add.bin",
   "bmp_Dec.bin",
-  "bmp_Speed255.bin",
-  "bmp_Speed127.bin",
-  "bmp_Speed0.bin",
+  "bmp_speed255.bin",
+  "bmp_speed127.bin",
+  "bmp_speed0.bin",
 
   //preheat screen
   // "bmp_Add.bin",
   // "bmp_Dec.bin",
-  "bmp_Speed0.bin",
+  "bmp_speed0.bin",
   // "bmp_Extru2.bin",
   // "bmp_Extru1.bin",
-  "bmp_Bed.bin",
-  "bmp_Step1_degree.bin",
-  "bmp_Step5_degree.bin",
-  "bmp_Step10_degree.bin",
+  "bmp_bed.bin",
+  "bmp_step1_degree.bin",
+  "bmp_step5_degree.bin",
+  "bmp_step10_degree.bin",
 
   //extrusion screen
-  "bmp_In.bin",
-  "bmp_Out.bin",
-  "bmp_Extru1.bin",
-  #if EXTRUDERS > 1
-    "bmp_Extru2.bin",
+  "bmp_in.bin",
+  "bmp_out.bin",
+  "bmp_extru1.bin",
+  #if HAS_MULTI_EXTRUDER
+    "bmp_extru2.bin",
   #endif
-  "bmp_Speed_high.bin",
-  "bmp_Speed_slow.bin",
-  "bmp_Speed_normal.bin",
-  "bmp_Step1_mm.bin",
-  "bmp_Step5_mm.bin",
-  "bmp_Step10_mm.bin",
+  "bmp_speed_high.bin",
+  "bmp_speed_slow.bin",
+  "bmp_speed_normal.bin",
+  "bmp_step1_mm.bin",
+  "bmp_step5_mm.bin",
+  "bmp_step10_mm.bin",
 
   //select file screen
   "bmp_pageUp.bin",
   "bmp_pageDown.bin",
-  "bmp_Back.bin", //TODO: why two back buttons? Why not just one? (return / back)
-  "bmp_Dir.bin",
-  "bmp_File.bin",
+  "bmp_back.bin", //TODO: why two back buttons? Why not just one? (return / back)
+  "bmp_dir.bin",
+  "bmp_file.bin",
 
   //move motor screen
   //TODO: 6 equal icons, just in diffenct rotation... it may be optimized too
@@ -103,68 +106,69 @@ static char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_yDec.bin",
   "bmp_zAdd.bin",
   "bmp_zDec.bin",
-  "bmp_Step_move0_1.bin",
-  "bmp_Step_move1.bin",
-  "bmp_Step_move10.bin",
+  "bmp_step_move0_1.bin",
+  "bmp_step_move1.bin",
+  "bmp_step_move10.bin",
 
   //operation screen
   "bmp_auto_off.bin",
-  "bmp_Speed.bin",
+  "bmp_speed.bin",
   //"bmp_Mamual.bin", //TODO: didn't find it.. changed to bmp_manual_off.bin
-  "bmp_Fan.bin",
-  //"bmp_PreHeat.bin",
-  //"bmp_Extruct.bin",
-  // "bmp_Mov.bin",
+  "bmp_fan.bin",
+  "bmp_temp.bin",
+  "bmp_extrude_opr.bin",
+  "bmp_move_opr.bin",
 
   //change speed screen
-  "bmp_Step1_percent.bin",
-  "bmp_Step5_percent.bin",
-  "bmp_Step10_percent.bin",
+  "bmp_step1_percent.bin",
+  "bmp_step5_percent.bin",
+  "bmp_step10_percent.bin",
   "bmp_extruct_sel.bin",
   "bmp_mov_changespeed.bin",
   // "bmp_extrude_opr.bin", equal to "bmp_Extruct.bin"
   "bmp_mov_sel.bin",
+  "bmp_speed_extruct.bin",
 
   //printing screen
-  "bmp_Pause.bin",
-  "bmp_Resume.bin",
-  "bmp_Stop.bin",
-  "bmp_Ext1_state.bin",
-  #if EXTRUDERS > 1
-    "bmp_Ext2_state.bin",
+  "bmp_pause.bin",
+  "bmp_resume.bin",
+  "bmp_stop.bin",
+  "bmp_ext1_state.bin",
+  #if HAS_MULTI_EXTRUDER
+    "bmp_ext2_state.bin",
   #endif
-  "bmp_Bed_state.bin",
-  "bmp_Fan_state.bin",
-  "bmp_Time_state.bin",
-  "bmp_Zpos_state.bin",
-  "bmp_Operate.bin",
+  "bmp_bed_state.bin",
+  "bmp_fan_state.bin",
+  "bmp_time_state.bin",
+  "bmp_zpos_state.bin",
+  "bmp_operate.bin",
 
   //manual leval screen (only if disabled auto level)
   #if DISABLED(AUTO_BED_LEVELING_BILINEAR)
-    "bmp_Leveling1.bin",
-    "bmp_Leveling2.bin",
-    "bmp_Leveling3.bin",
-    "bmp_Leveling4.bin",
-    "bmp_Leveling5.bin",
+    "bmp_leveling1.bin",
+    "bmp_leveling2.bin",
+    "bmp_leveling3.bin",
+    "bmp_leveling4.bin",
+    "bmp_leveling5.bin",
   #endif
 
   //lang select screen
   #if HAS_LANG_SELECT_SCREEN
-    "bmp_Language.bin",
+    "bmp_language.bin",
     "bmp_simplified_cn.bin",
     "bmp_simplified_cn_sel.bin",
     "bmp_traditional_cn.bin",
     "bmp_traditional_cn_sel.bin",
-    "bmp_English.bin",
-    "bmp_English_sel.bin",
-    "bmp_Russian.bin",
-    "bmp_Russian_sel.bin",
-    "bmp_Spanish.bin",
-    "bmp_Spanish_sel.bin",
-    "bmp_French.bin",
-    "bmp_French_sel.bin",
-    "bmp_Italy.bin",
-    "bmp_Italy_sel.bin",
+    "bmp_english.bin",
+    "bmp_english_sel.bin",
+    "bmp_russian.bin",
+    "bmp_russian_sel.bin",
+    "bmp_spanish.bin",
+    "bmp_spanish_sel.bin",
+    "bmp_french.bin",
+    "bmp_french_sel.bin",
+    "bmp_italy.bin",
+    "bmp_italy_sel.bin",
   #endif // HAS_LANG_SELECT_SCREEN
 
   // gcode preview
@@ -177,21 +181,15 @@ static char assets[][LONG_FILENAME_LENGTH] = {
   #endif
 
   // settings screen
-  "bmp_About.bin",
+  "bmp_about.bin",
   //"bmp_Language.bin",
   //"bmp_Fan.bin",
   //"bmp_manual_off.bin",
 
   //start screen
   "bmp_printing.bin",
-  "bmp_Set.bin",
-  "bmp_Tool.bin",
-
-  #if ENABLED(HAS_STEALTHCHOP)
-    //"bmp_back70x40.bin",
-    "bmp_disable.bin",
-    "bmp_enable.bin",
-  #endif
+  "bmp_set.bin",
+  "bmp_tool.bin",
 
   // settings screen
   "bmp_eeprom_settings.bin",
@@ -202,14 +200,27 @@ static char assets[][LONG_FILENAME_LENGTH] = {
   "bmp_arrow.bin",
   "bmp_back70x40.bin",
   "bmp_value_blank.bin",
-  "bmp_Return.bin"
+  "bmp_blank_sel.bin",
+  "bmp_disable.bin",
+  "bmp_enable.bin",
+  "bmp_return.bin",
+
+  #if ENABLED(USE_WIFI_FUNCTION)
+    //wifi screen
+    "bmp_wifi.bin",
+  #endif
+
+  //babystep screen
+  "bmp_baby_move0_01.bin",
+  "bmp_baby_move0_05.bin",
+  "bmp_baby_move0_1.bin"
 };
 
 #if HAS_SPI_FLASH_FONT
   static char fonts[][LONG_FILENAME_LENGTH] = { "FontUNIGBK.bin" };
 #endif
 
-static uint8_t currentFlashPage = 0;
+uint8_t currentFlashPage = 0;
 
 uint32_t lv_get_pic_addr(uint8_t *Pname) {
   uint8_t Pic_cnt;
@@ -253,8 +264,13 @@ const char *bakPath = "_assets";
 void spiFlashErase_PIC() {
   volatile uint32_t pic_sectorcnt = 0;
   W25QXX.init(SPI_QUARTER_SPEED);
-  for (pic_sectorcnt = 0; pic_sectorcnt < PIC_SIZE_xM * 1024 / 64; pic_sectorcnt++)
-    W25QXX.SPI_FLASH_BlockErase(PICINFOADDR + pic_sectorcnt * 64 * 1024);
+  //erase 0x001000 -64K
+  for (pic_sectorcnt = 0; pic_sectorcnt < (64 - 4) / 4; pic_sectorcnt++) {
+    W25QXX.SPI_FLASH_SectorErase(PICINFOADDR + pic_sectorcnt * 4 * 1024);
+  }
+  //erase 64K -- 6M
+  for (pic_sectorcnt = 0; pic_sectorcnt < (PIC_SIZE_xM * 1024 / 64 - 1); pic_sectorcnt++)
+    W25QXX.SPI_FLASH_BlockErase((pic_sectorcnt + 1) * 64 * 1024);
 }
 
 #if HAS_SPI_FLASH_FONT

commit 0a1b8659871f681464f24c40b16aa64cd2f7ca8e
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Aug 8 21:24:31 2020 -0300

    W25QXX SPI Flash support (#18897)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 072213e499..447303a887 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -29,10 +29,10 @@
 #include "mks_hardware_test.h"
 
 #include "SPIFlashStorage.h"
-#include "W25Qxx.h"
+#include "../../../../libs/W25Qxx.h"
 
-#include "../../../../MarlinCore.h"
 #include "../../../../sd/cardreader.h"
+#include "../../../../MarlinCore.h"
 
 extern uint16_t DeviceCode;
 extern unsigned char bmp_public_buf[17 * 1024];

commit b2abeff9ad9fe5182afd0fd7d3e730c0894ff361
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Thu Aug 6 10:15:19 2020 -0300

    MKS Robin Nano CI Tests (#18927)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 3f87c5183f..072213e499 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -510,9 +510,8 @@ uint8_t public_buf[512];
       uint8_t pic_counter = 0;
       W25QXX.SPI_FLASH_BufferRead(&pic_counter, PIC_COUNTER_ADDR, 1);
       SERIAL_ECHOLNPAIR("Total assets loaded: ", pic_counter);
+      SERIAL_ECHOLNPAIR("Total Uncompressed: ", totalSizes, ", Compressed: ", totalCompressed);
     #endif
-
-    SERIAL_ECHOLNPAIR("Total Uncompressed: ", totalSizes, ", Compressed: ", totalCompressed);
   }
 
   #if HAS_SPI_FLASH_FONT

commit d922c002ca3d5de89f4ae2f309d1713100bec977
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Thu Aug 6 00:40:08 2020 -0300

    Followup to LVGL patch (#18920)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 771e3e062e..3f87c5183f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -482,7 +482,7 @@ uint8_t public_buf[512];
         if (card.longFilename[0] == '.') continue;
 
         int8_t a = arrayFindStr(assets, COUNT(assets), card.longFilename);
-        if (a >= 0 && a < COUNT(assets)) {
+        if (a >= 0 && a < (int8_t)COUNT(assets)) {
           uint8_t assetType = ASSET_TYPE_ICON;
           if (strstr(assets[a], "_logo"))
             assetType = ASSET_TYPE_LOGO;
@@ -498,7 +498,7 @@ uint8_t public_buf[512];
 
         #if HAS_SPI_FLASH_FONT
           a = arrayFindStr(fonts, COUNT(fonts), card.longFilename);
-          if (a >= 0 && a < COUNT(fonts))
+          if (a >= 0 && a < (int8_t)COUNT(fonts))
             loadAsset(dir, d, fonts[a], ASSET_TYPE_FONT);
         #endif
       }

commit 04b12dde492b44a2b1e18f2e38b126bc82edcfdf
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Aug 4 06:50:05 2020 -0300

    SPI Flash data compression (#18879)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 2a16bcf1b3..771e3e062e 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -23,16 +23,17 @@
 
 #if HAS_TFT_LVGL_UI
 
-#include "../../../../MarlinCore.h"
-
 #include "string.h"
-
 #include "pic_manager.h"
-#include "W25Qxx.h"
-#include "../../../../sd/cardreader.h"
 #include "draw_ready_print.h"
 #include "mks_hardware_test.h"
 
+#include "SPIFlashStorage.h"
+#include "W25Qxx.h"
+
+#include "../../../../MarlinCore.h"
+#include "../../../../sd/cardreader.h"
+
 extern uint16_t DeviceCode;
 extern unsigned char bmp_public_buf[17 * 1024];
 
@@ -205,11 +206,11 @@ static char assets[][LONG_FILENAME_LENGTH] = {
 };
 
 #if HAS_SPI_FLASH_FONT
-  static char fonts[][LONG_FILENAME_LENGTH] = {
-    "FontUNIGBK.bin",
-  };
+  static char fonts[][LONG_FILENAME_LENGTH] = { "FontUNIGBK.bin" };
 #endif
 
+static uint8_t currentFlashPage = 0;
+
 uint32_t lv_get_pic_addr(uint8_t *Pname) {
   uint8_t Pic_cnt;
   uint8_t i, j;
@@ -217,6 +218,8 @@ uint32_t lv_get_pic_addr(uint8_t *Pname) {
   uint32_t tmp_cnt = 0;
   uint32_t addr = 0;
 
+  currentFlashPage = 0;
+
   #if ENABLED(MARLIN_DEV_MODE)
     SERIAL_ECHOLNPAIR("Getting picture SPI Flash Address: ", (const char*)Pname);
   #endif
@@ -371,6 +374,10 @@ uint8_t public_buf[512];
     return -1;
   }
 
+  #if ENABLED(MARLIN_DEV_MODE)
+    static uint32_t totalSizes = 0, totalCompressed = 0;
+  #endif
+
   #define ASSET_TYPE_ICON       0
   #define ASSET_TYPE_LOGO       1
   #define ASSET_TYPE_TITLE_LOGO 2
@@ -398,43 +405,52 @@ uint8_t public_buf[512];
     pfileSize = file.fileSize();
     totalSizeLoaded += pfileSize;
     if (assetType == ASSET_TYPE_LOGO) {
-      while (1) {
+      do {
         pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-        Pic_Logo_Write((uint8_t *)fn, public_buf, pbr); //
-        if (pbr < BMP_WRITE_BUF_LEN) break;
-      }
+        Pic_Logo_Write((uint8_t *)fn, public_buf, pbr);
+      } while (pbr >= BMP_WRITE_BUF_LEN);
     }
     else if (assetType == ASSET_TYPE_TITLE_LOGO) {
-      while (1) {
+      do {
         pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-        Pic_TitleLogo_Write((uint8_t *)fn, public_buf, pbr); //
-        if (pbr < BMP_WRITE_BUF_LEN) break;
-      }
+        Pic_TitleLogo_Write((uint8_t *)fn, public_buf, pbr);
+      } while (pbr >= BMP_WRITE_BUF_LEN);
     }
     else if (assetType == ASSET_TYPE_G_PREVIEW) {
-      while (1) {
+      do {
         pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-        default_view_Write(public_buf, pbr); //
-        if (pbr < BMP_WRITE_BUF_LEN) break;
-      }
+        default_view_Write(public_buf, pbr);
+      } while (pbr >= BMP_WRITE_BUF_LEN);
     }
     else if (assetType == ASSET_TYPE_ICON) {
       Pic_Write_Addr = Pic_Info_Write((uint8_t *)fn, pfileSize);
-      while (1) {
-        pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-        W25QXX.SPI_FLASH_BufferWrite(public_buf, Pic_Write_Addr, pbr);
-        Pic_Write_Addr += pbr;
-        if (pbr < BMP_WRITE_BUF_LEN) break;
-      }
+      SPIFlash.beginWrite(Pic_Write_Addr);
+      #if HAS_SPI_FLASH_COMPRESSION
+        do {
+          pbr = file.read(public_buf, SPI_FLASH_PageSize);
+          TERN_(MARLIN_DEV_MODE, totalSizes += pbr);
+          SPIFlash.writeData(public_buf, SPI_FLASH_PageSize);
+        } while (pbr >= SPI_FLASH_PageSize);
+      #else
+        do {
+          pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+          W25QXX.SPI_FLASH_BufferWrite(public_buf, Pic_Write_Addr, pbr);
+          Pic_Write_Addr += pbr;
+        } while (pbr >= BMP_WRITE_BUF_LEN);
+      #endif
+      #if ENABLED(MARLIN_DEV_MODE)
+        SERIAL_ECHOLNPAIR("Space used: ", fn, " - ", (SPIFlash.getCurrentPage() + 1) * SPI_FLASH_PageSize / 1024, "KB");
+        totalCompressed += (SPIFlash.getCurrentPage() + 1) * SPI_FLASH_PageSize;
+      #endif
+      SPIFlash.endWrite();
     }
     else if (assetType == ASSET_TYPE_FONT) {
       Pic_Write_Addr = UNIGBK_FLASH_ADDR;
-      while (1) {
+      do {
         pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
         W25QXX.SPI_FLASH_BufferWrite(public_buf, Pic_Write_Addr, pbr);
         Pic_Write_Addr += pbr;
-        if (pbr < BMP_WRITE_BUF_LEN) break;
-      }
+      } while (pbr >= BMP_WRITE_BUF_LEN);
     }
 
     file.close();
@@ -459,13 +475,13 @@ uint8_t public_buf[512];
       disp_assets_update_progress("Reading files...");
       dir_t d;
       while (dir.readDir(&d, card.longFilename) > 0) {
-        // if we dont get a long name, but gets a short one, try it
+        // If we dont get a long name, but gets a short one, try it
         if (card.longFilename[0] == 0 && d.name[0] != 0)
           dosName2LongName((const char*)d.name, card.longFilename);
         if (card.longFilename[0] == 0) continue;
         if (card.longFilename[0] == '.') continue;
 
-        uint8_t a = arrayFindStr(assets, COUNT(assets), card.longFilename);
+        int8_t a = arrayFindStr(assets, COUNT(assets), card.longFilename);
         if (a >= 0 && a < COUNT(assets)) {
           uint8_t assetType = ASSET_TYPE_ICON;
           if (strstr(assets[a], "_logo"))
@@ -482,9 +498,8 @@ uint8_t public_buf[512];
 
         #if HAS_SPI_FLASH_FONT
           a = arrayFindStr(fonts, COUNT(fonts), card.longFilename);
-          if (a >= 0 && a < COUNT(fonts)) {
+          if (a >= 0 && a < COUNT(fonts))
             loadAsset(dir, d, fonts[a], ASSET_TYPE_FONT);
-          }
         #endif
       }
       dir.rename(&root, bakPath);
@@ -496,11 +511,13 @@ uint8_t public_buf[512];
       W25QXX.SPI_FLASH_BufferRead(&pic_counter, PIC_COUNTER_ADDR, 1);
       SERIAL_ECHOLNPAIR("Total assets loaded: ", pic_counter);
     #endif
+
+    SERIAL_ECHOLNPAIR("Total Uncompressed: ", totalSizes, ", Compressed: ", totalCompressed);
   }
 
   #if HAS_SPI_FLASH_FONT
     void spi_flash_read_test() { W25QXX.SPI_FLASH_BufferRead(public_buf, UNIGBK_FLASH_ADDR, BMP_WRITE_BUF_LEN); }
-  #endif // HAS_SPI_FLASH_FONT
+  #endif
 
 #endif // SDSUPPORT
 
@@ -531,8 +548,15 @@ void Pic_Read(uint8_t *Pname, uint8_t *P_Rbuff) {
 }
 
 void lv_pic_test(uint8_t *P_Rbuff, uint32_t addr, uint32_t size) {
-  W25QXX.init(SPI_QUARTER_SPEED);
-  W25QXX.SPI_FLASH_BufferRead((uint8_t *)P_Rbuff, addr, size);
+  #if HAS_SPI_FLASH_COMPRESSION
+    if (currentFlashPage == 0)
+      SPIFlash.beginRead(addr);
+    SPIFlash.readData(P_Rbuff, size);
+    currentFlashPage++;
+  #else
+    W25QXX.init(SPI_QUARTER_SPEED);
+    W25QXX.SPI_FLASH_BufferRead((uint8_t *)P_Rbuff, addr, size);
+  #endif
 }
 
 #if HAS_SPI_FLASH_FONT

commit 3eef000e2a7623d0d1d1f56fbf3109023f5d74c2
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sun Jul 26 01:08:30 2020 -0300

    Fix MKS Robin Nano V2 build / upload (#18784)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 3f9af712d1..2a16bcf1b3 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -249,6 +249,7 @@ const char *bakPath = "_assets";
 
 void spiFlashErase_PIC() {
   volatile uint32_t pic_sectorcnt = 0;
+  W25QXX.init(SPI_QUARTER_SPEED);
   for (pic_sectorcnt = 0; pic_sectorcnt < PIC_SIZE_xM * 1024 / 64; pic_sectorcnt++)
     W25QXX.SPI_FLASH_BlockErase(PICINFOADDR + pic_sectorcnt * 64 * 1024);
 }
@@ -256,7 +257,8 @@ void spiFlashErase_PIC() {
 #if HAS_SPI_FLASH_FONT
   void spiFlashErase_FONT() {
     volatile uint32_t Font_sectorcnt = 0;
-    for (Font_sectorcnt = 0; Font_sectorcnt < FONT_SIZE_xM * 1024 / 64; Font_sectorcnt++)
+    W25QXX.init(SPI_QUARTER_SPEED);
+    for (Font_sectorcnt = 0; Font_sectorcnt < 32-1; Font_sectorcnt++)
       W25QXX.SPI_FLASH_BlockErase(FONTINFOADDR + Font_sectorcnt * 64 * 1024);
   }
 #endif
@@ -386,6 +388,9 @@ uint8_t public_buf[512];
     }
 
     disp_assets_update_progress(fn);
+
+    W25QXX.init(SPI_QUARTER_SPEED);
+
     uint16_t pbr;
     uint32_t pfileSize;
     uint32_t totalSizeLoaded = 0;
@@ -444,11 +449,14 @@ uint8_t public_buf[512];
     if (dir.open(&root, assetsPath, O_RDONLY)) {
 
       disp_assets_update();
+      disp_assets_update_progress("Erasing pics...");
       spiFlashErase_PIC();
       #if HAS_SPI_FLASH_FONT
+        disp_assets_update_progress("Erasing fonts...");
         spiFlashErase_FONT();
       #endif
 
+      disp_assets_update_progress("Reading files...");
       dir_t d;
       while (dir.readDir(&d, card.longFilename) > 0) {
         // if we dont get a long name, but gets a short one, try it

commit d20d4591321aa467c062f0050355d2aca84e03ad
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Sat Jul 25 13:52:07 2020 +0800

    Robin nano V2, TFT LVGL UI parameters, and more (#18500)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 8cf2233715..3f9af712d1 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -21,7 +21,7 @@
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LVGL_UI)
+#if HAS_TFT_LVGL_UI
 
 #include "../../../../MarlinCore.h"
 
@@ -40,7 +40,7 @@ extern unsigned char bmp_public_buf[17 * 1024];
   extern char *createFilename(char * const buffer, const dir_t &p);
 #endif
 
-static char assets[][30] = {
+static char assets[][LONG_FILENAME_LENGTH] = {
   //homing screen
   "bmp_Zero.bin",
   "bmp_zeroX.bin",
@@ -90,7 +90,7 @@ static char assets[][30] = {
   //select file screen
   "bmp_pageUp.bin",
   "bmp_pageDown.bin",
-  //"bmp_Back.bin", //TODO: why two back buttons? Why not just one? (return / back)
+  "bmp_Back.bin", //TODO: why two back buttons? Why not just one? (return / back)
   "bmp_Dir.bin",
   "bmp_File.bin",
 
@@ -164,14 +164,18 @@ static char assets[][30] = {
     "bmp_French_sel.bin",
     "bmp_Italy.bin",
     "bmp_Italy_sel.bin",
-  #endif //HAS_LANG_SELECT_SCREEN
+  #endif // HAS_LANG_SELECT_SCREEN
 
-  //gcode preview
+  // gcode preview
   #if HAS_GCODE_DEFAULT_VIEW_IN_FLASH
     "bmp_preview.bin",
   #endif
 
-  //settings screen
+  #if HAS_LOGO_IN_FLASH
+    "bmp_logo.bin",
+  #endif
+
+  // settings screen
   "bmp_About.bin",
   //"bmp_Language.bin",
   //"bmp_Fan.bin",
@@ -182,14 +186,27 @@ static char assets[][30] = {
   "bmp_Set.bin",
   "bmp_Tool.bin",
 
-  //base icons
+  #if ENABLED(HAS_STEALTHCHOP)
+    //"bmp_back70x40.bin",
+    "bmp_disable.bin",
+    "bmp_enable.bin",
+  #endif
+
+  // settings screen
+  "bmp_eeprom_settings.bin",
+  "bmp_machine_para.bin",
+  "bmp_function1.bin",
+
+  // base icons
+  "bmp_arrow.bin",
+  "bmp_back70x40.bin",
+  "bmp_value_blank.bin",
   "bmp_Return.bin"
 };
 
 #if HAS_SPI_FLASH_FONT
-  static char fonts[][50] = {
-    "GBK16.bin",
-    "UNIGBK.bin",
+  static char fonts[][LONG_FILENAME_LENGTH] = {
+    "FontUNIGBK.bin",
   };
 #endif
 
@@ -220,22 +237,19 @@ uint32_t lv_get_pic_addr(uint8_t *Pname) {
         addr = PIC_DATA_ADDR_TFT35 + i * PER_PIC_MAX_SPACE_TFT35;
       else
         addr = PIC_DATA_ADDR_TFT32 + i * PER_PIC_MAX_SPACE_TFT32;
-      return (addr + 4);//The purpose of adding 4 is to remove 4-byte picture header information.
+      return addr;
     }
   }
 
   return addr;
 }
 
-const char *picPath = "mks_pic";
-const char *bakPath = "bak_pic";
-
-const char *fontPath = "mks_font";
-const char *bakFont = "bak_font";
+const char *assetsPath = "assets";
+const char *bakPath = "_assets";
 
 void spiFlashErase_PIC() {
   volatile uint32_t pic_sectorcnt = 0;
-  for (pic_sectorcnt = 0; pic_sectorcnt < TERN(MKS_TEST, 2, PIC_SIZE_xM * 1024 / 64); pic_sectorcnt++)
+  for (pic_sectorcnt = 0; pic_sectorcnt < PIC_SIZE_xM * 1024 / 64; pic_sectorcnt++)
     W25QXX.SPI_FLASH_BlockErase(PICINFOADDR + pic_sectorcnt * 64 * 1024);
 }
 
@@ -347,103 +361,123 @@ uint8_t public_buf[512];
     longName[j] = '\0';
   }
 
-  void UpdatePic() {
-    char *fn;
-    unsigned char logoFlag;
+  static int8_t arrayFindStr(const char arr[][LONG_FILENAME_LENGTH], uint8_t arraySize, const char* str) {
+    for (uint8_t a = 0; a < arraySize; a++) {
+      if (strcasecmp(arr[a], str) == 0)
+        return a;
+    }
+    return -1;
+  }
+
+  #define ASSET_TYPE_ICON       0
+  #define ASSET_TYPE_LOGO       1
+  #define ASSET_TYPE_TITLE_LOGO 2
+  #define ASSET_TYPE_G_PREVIEW  3
+  #define ASSET_TYPE_FONT       4
+  static void loadAsset(SdFile &dir, dir_t& entry, const char *fn, int8_t assetType) {
+    SdFile file;
+    char dosFilename[FILENAME_LENGTH];
+    createFilename(dosFilename, entry);
+    if (!file.open(&dir, dosFilename, O_READ)) {
+      #if ENABLED(MARLIN_DEV_MODE)
+        SERIAL_ECHOLNPAIR("Error opening Asset: ", fn);
+      #endif
+      return;
+    }
+
+    disp_assets_update_progress(fn);
     uint16_t pbr;
     uint32_t pfileSize;
     uint32_t totalSizeLoaded = 0;
     uint32_t Pic_Write_Addr;
+    pfileSize = file.fileSize();
+    totalSizeLoaded += pfileSize;
+    if (assetType == ASSET_TYPE_LOGO) {
+      while (1) {
+        pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+        Pic_Logo_Write((uint8_t *)fn, public_buf, pbr); //
+        if (pbr < BMP_WRITE_BUF_LEN) break;
+      }
+    }
+    else if (assetType == ASSET_TYPE_TITLE_LOGO) {
+      while (1) {
+        pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+        Pic_TitleLogo_Write((uint8_t *)fn, public_buf, pbr); //
+        if (pbr < BMP_WRITE_BUF_LEN) break;
+      }
+    }
+    else if (assetType == ASSET_TYPE_G_PREVIEW) {
+      while (1) {
+        pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+        default_view_Write(public_buf, pbr); //
+        if (pbr < BMP_WRITE_BUF_LEN) break;
+      }
+    }
+    else if (assetType == ASSET_TYPE_ICON) {
+      Pic_Write_Addr = Pic_Info_Write((uint8_t *)fn, pfileSize);
+      while (1) {
+        pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+        W25QXX.SPI_FLASH_BufferWrite(public_buf, Pic_Write_Addr, pbr);
+        Pic_Write_Addr += pbr;
+        if (pbr < BMP_WRITE_BUF_LEN) break;
+      }
+    }
+    else if (assetType == ASSET_TYPE_FONT) {
+      Pic_Write_Addr = UNIGBK_FLASH_ADDR;
+      while (1) {
+        pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+        W25QXX.SPI_FLASH_BufferWrite(public_buf, Pic_Write_Addr, pbr);
+        Pic_Write_Addr += pbr;
+        if (pbr < BMP_WRITE_BUF_LEN) break;
+      }
+    }
+
+    file.close();
+
+    #if ENABLED(MARLIN_DEV_MODE)
+      SERIAL_ECHOLNPAIR("Asset added: ", fn);
+    #endif
+  }
 
+  void UpdateAssets() {
     SdFile dir, root = card.getroot();
-    if (dir.open(&root, picPath, O_RDONLY)) {
+    if (dir.open(&root, assetsPath, O_RDONLY)) {
 
-      disp_pic_update();
+      disp_assets_update();
       spiFlashErase_PIC();
+      #if HAS_SPI_FLASH_FONT
+        spiFlashErase_FONT();
+      #endif
 
       dir_t d;
       while (dir.readDir(&d, card.longFilename) > 0) {
         // if we dont get a long name, but gets a short one, try it
-        if (card.longFilename[0] == 0 && d.name[0] != 0) {
+        if (card.longFilename[0] == 0 && d.name[0] != 0)
           dosName2LongName((const char*)d.name, card.longFilename);
-        }
+        if (card.longFilename[0] == 0) continue;
+        if (card.longFilename[0] == '.') continue;
 
-        if (card.longFilename[0] == 0)
-          continue;
-        if (card.longFilename[0] == '.')
-          continue;
+        uint8_t a = arrayFindStr(assets, COUNT(assets), card.longFilename);
+        if (a >= 0 && a < COUNT(assets)) {
+          uint8_t assetType = ASSET_TYPE_ICON;
+          if (strstr(assets[a], "_logo"))
+            assetType = ASSET_TYPE_LOGO;
+          else if (strstr(assets[a], "_titlelogo"))
+            assetType = ASSET_TYPE_TITLE_LOGO;
+          else if (strstr(assets[a], "_preview"))
+            assetType = ASSET_TYPE_G_PREVIEW;
 
-        uint8_t a = -1;
-        for(a = 0; a < COUNT(assets); a++) {
-          if (strcasecmp(assets[a], card.longFilename) == 0) {
-            break;
-          }
-        }
-        if (a < 0 || a >= COUNT(assets)) continue;
+          loadAsset(dir, d, assets[a], assetType);
 
-        fn = assets[a];
-        char dosFilename[FILENAME_LENGTH];
-        createFilename(dosFilename, d);
-
-        SdFile file;
-        if (!file.open(&dir, dosFilename, O_READ)) {
-          #if ENABLED(MARLIN_DEV_MODE)
-            SERIAL_ECHOLNPAIR("Error opening Asset: ", fn);
-          #endif
           continue;
         }
 
-        if (strstr(fn, "_logo"))
-          logoFlag = 1;
-        else if (strstr(fn, "_titlelogo"))
-          logoFlag = 2;
-        else if (strstr(fn, "_preview"))
-          logoFlag = 3;
-        else
-          logoFlag = 0;
-
-        pfileSize = file.fileSize();
-        totalSizeLoaded += pfileSize;
-        if (logoFlag == 1) {
-          while (1) {
-            pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-            Pic_Logo_Write((uint8_t *)fn, public_buf, pbr); //
-            if (pbr < BMP_WRITE_BUF_LEN)
-              break;
-          }
-        }
-        else if (logoFlag == 2) {
-          while (1) {
-            pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-            Pic_TitleLogo_Write((uint8_t *)fn, public_buf, pbr); //
-            if (pbr < BMP_WRITE_BUF_LEN)
-              break;
-          }
-        }
-        else if (logoFlag == 3) {
-          while (1) {
-            pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-            default_view_Write(public_buf, pbr); //
-            if (pbr < BMP_WRITE_BUF_LEN)
-              break;
-          }
-        }
-        else {
-          Pic_Write_Addr = Pic_Info_Write((uint8_t *)fn, pfileSize);
-          while (1) {
-            pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-            W25QXX.SPI_FLASH_BufferWrite(public_buf, Pic_Write_Addr, pbr);
-            Pic_Write_Addr += pbr;
-            if (pbr < BMP_WRITE_BUF_LEN)
-              break;
+        #if HAS_SPI_FLASH_FONT
+          a = arrayFindStr(fonts, COUNT(fonts), card.longFilename);
+          if (a >= 0 && a < COUNT(fonts)) {
+            loadAsset(dir, d, fonts[a], ASSET_TYPE_FONT);
           }
-        }
-
-        #if ENABLED(MARLIN_DEV_MODE)
-          SERIAL_ECHOLNPAIR("Asset added: ", fn);
         #endif
-
-        file.close();
       }
       dir.rename(&root, bakPath);
     }
@@ -452,62 +486,12 @@ uint8_t public_buf[512];
     #if ENABLED(MARLIN_DEV_MODE)
       uint8_t pic_counter = 0;
       W25QXX.SPI_FLASH_BufferRead(&pic_counter, PIC_COUNTER_ADDR, 1);
-      SERIAL_ECHOLNPAIR("Total assets loaded: ", pic_counter, ", Total size: ", totalSizeLoaded);
+      SERIAL_ECHOLNPAIR("Total assets loaded: ", pic_counter);
     #endif
   }
 
   #if HAS_SPI_FLASH_FONT
-
     void spi_flash_read_test() { W25QXX.SPI_FLASH_BufferRead(public_buf, UNIGBK_FLASH_ADDR, BMP_WRITE_BUF_LEN); }
-
-    void UpdateFont() {
-      char *fn;
-      uint16_t pbr;
-      uint32_t flashaddr = 0;
-
-      SdFile dir, root = card.getroot();
-      if (dir.open(&root, fontPath, O_RDONLY)) {
-
-        disp_font_update();
-        spiFlashErase_FONT();
-
-        dir_t d;
-        while (dir.readDir(&d, card.longFilename) > 0) {
-          if (card.longFilename[0] == 0)
-            break;
-
-          if (card.longFilename[0] == '.')
-            continue;
-
-          fn = card.longFilename;
-
-          if (strstr(fn, ".bin")) {
-            char dosFilename[FILENAME_LENGTH];
-            createFilename(dosFilename, d);
-            //strcat(public_buf, dosFilename);
-
-            SdFile file;
-            if (file.open(&dir, dosFilename, O_READ)) {
-
-              flashaddr = UNIGBK_FLASH_ADDR;
-              pbr = 0;
-              while (1) {
-                flashaddr += pbr;
-                pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-                W25QXX.SPI_FLASH_BufferWrite(public_buf, flashaddr, pbr);
-                if (pbr < BMP_WRITE_BUF_LEN) break;
-              }
-              file.close();
-            }
-
-          }
-        }
-
-        dir.rename(&root, bakFont);
-        dir.close();
-      }
-    }
-
   #endif // HAS_SPI_FLASH_FONT
 
 #endif // SDSUPPORT
@@ -552,6 +536,7 @@ void lv_pic_test(uint8_t *P_Rbuff, uint32_t addr, uint32_t size) {
 
 uint32_t logo_addroffset = 0;
 void Pic_Logo_Read(uint8_t *LogoName, uint8_t *Logo_Rbuff, uint32_t LogoReadsize) {
+  W25QXX.init(SPI_QUARTER_SPEED);
   W25QXX.SPI_FLASH_BufferRead(Logo_Rbuff, PIC_LOGO_ADDR + logo_addroffset, LogoReadsize);
   logo_addroffset += LogoReadsize;
   if (logo_addroffset >= LOGO_MAX_SIZE_TFT35)
@@ -561,7 +546,6 @@ void Pic_Logo_Read(uint8_t *LogoName, uint8_t *Logo_Rbuff, uint32_t LogoReadsize
 uint32_t default_view_addroffset = 0;
 void default_view_Read(uint8_t *default_view_Rbuff, uint32_t default_view_Readsize) {
   W25QXX.init(SPI_QUARTER_SPEED);
-
   W25QXX.SPI_FLASH_BufferRead(default_view_Rbuff, DEFAULT_VIEW_ADDR_TFT35 + default_view_addroffset, default_view_Readsize);
   default_view_addroffset += default_view_Readsize;
   if (default_view_addroffset >= DEFAULT_VIEW_MAX_SIZE)
@@ -572,7 +556,6 @@ void default_view_Read(uint8_t *default_view_Rbuff, uint32_t default_view_Readsi
   uint32_t flash_view_addroffset = 0;
   void flash_view_Read(uint8_t *flash_view_Rbuff, uint32_t flash_view_Readsize) {
     W25QXX.init(SPI_QUARTER_SPEED);
-
     W25QXX.SPI_FLASH_BufferRead(flash_view_Rbuff, BAK_VIEW_ADDR_TFT35 + flash_view_addroffset, flash_view_Readsize);
     flash_view_addroffset += flash_view_Readsize;
     if (flash_view_addroffset >= FLASH_VIEW_MAX_SIZE)
@@ -580,4 +563,4 @@ void default_view_Read(uint8_t *default_view_Rbuff, uint32_t default_view_Readsi
   }
 #endif
 
-#endif // TFT_LVGL_UI
+#endif // HAS_TFT_LVGL_UI

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 4e9eee8929..8cf2233715 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"

commit e5bc9d31cc87be5c7ef2bd3cd70c2599f76d2bd7
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Jul 1 03:30:24 2020 -0300

    Add TFT_LVGL_UI support (#18438)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
index 85049ed3a1..4e9eee8929 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -21,11 +21,10 @@
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LITTLE_VGL_UI)
+#if ENABLED(TFT_LVGL_UI)
 
 #include "../../../../MarlinCore.h"
 
-//#include "type_define.h"
 #include "string.h"
 
 #include "pic_manager.h"
@@ -34,10 +33,6 @@
 #include "draw_ready_print.h"
 #include "mks_hardware_test.h"
 
-//#include "gui.h"
-//#include "spi_flash.h"
-
-//uint8_t DMA_ERRO_FLAG;
 extern uint16_t DeviceCode;
 extern unsigned char bmp_public_buf[17 * 1024];
 
@@ -45,7 +40,158 @@ extern unsigned char bmp_public_buf[17 * 1024];
   extern char *createFilename(char * const buffer, const dir_t &p);
 #endif
 
-/*void SPI_FLASH_BufferRead(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead) {}*/
+static char assets[][30] = {
+  //homing screen
+  "bmp_Zero.bin",
+  "bmp_zeroX.bin",
+  "bmp_zeroY.bin",
+  "bmp_zeroZ.bin",
+  "bmp_manual_off.bin",
+
+  //tool screen
+  "bmp_PreHeat.bin",
+  "bmp_Extruct.bin",
+  "bmp_Mov.bin",
+  // "bmp_Zero.bin",
+  "bmp_Leveling.bin",
+
+  //fan screen
+  "bmp_Add.bin",
+  "bmp_Dec.bin",
+  "bmp_Speed255.bin",
+  "bmp_Speed127.bin",
+  "bmp_Speed0.bin",
+
+  //preheat screen
+  // "bmp_Add.bin",
+  // "bmp_Dec.bin",
+  "bmp_Speed0.bin",
+  // "bmp_Extru2.bin",
+  // "bmp_Extru1.bin",
+  "bmp_Bed.bin",
+  "bmp_Step1_degree.bin",
+  "bmp_Step5_degree.bin",
+  "bmp_Step10_degree.bin",
+
+  //extrusion screen
+  "bmp_In.bin",
+  "bmp_Out.bin",
+  "bmp_Extru1.bin",
+  #if EXTRUDERS > 1
+    "bmp_Extru2.bin",
+  #endif
+  "bmp_Speed_high.bin",
+  "bmp_Speed_slow.bin",
+  "bmp_Speed_normal.bin",
+  "bmp_Step1_mm.bin",
+  "bmp_Step5_mm.bin",
+  "bmp_Step10_mm.bin",
+
+  //select file screen
+  "bmp_pageUp.bin",
+  "bmp_pageDown.bin",
+  //"bmp_Back.bin", //TODO: why two back buttons? Why not just one? (return / back)
+  "bmp_Dir.bin",
+  "bmp_File.bin",
+
+  //move motor screen
+  //TODO: 6 equal icons, just in diffenct rotation... it may be optimized too
+  "bmp_xAdd.bin",
+  "bmp_xDec.bin",
+  "bmp_yAdd.bin",
+  "bmp_yDec.bin",
+  "bmp_zAdd.bin",
+  "bmp_zDec.bin",
+  "bmp_Step_move0_1.bin",
+  "bmp_Step_move1.bin",
+  "bmp_Step_move10.bin",
+
+  //operation screen
+  "bmp_auto_off.bin",
+  "bmp_Speed.bin",
+  //"bmp_Mamual.bin", //TODO: didn't find it.. changed to bmp_manual_off.bin
+  "bmp_Fan.bin",
+  //"bmp_PreHeat.bin",
+  //"bmp_Extruct.bin",
+  // "bmp_Mov.bin",
+
+  //change speed screen
+  "bmp_Step1_percent.bin",
+  "bmp_Step5_percent.bin",
+  "bmp_Step10_percent.bin",
+  "bmp_extruct_sel.bin",
+  "bmp_mov_changespeed.bin",
+  // "bmp_extrude_opr.bin", equal to "bmp_Extruct.bin"
+  "bmp_mov_sel.bin",
+
+  //printing screen
+  "bmp_Pause.bin",
+  "bmp_Resume.bin",
+  "bmp_Stop.bin",
+  "bmp_Ext1_state.bin",
+  #if EXTRUDERS > 1
+    "bmp_Ext2_state.bin",
+  #endif
+  "bmp_Bed_state.bin",
+  "bmp_Fan_state.bin",
+  "bmp_Time_state.bin",
+  "bmp_Zpos_state.bin",
+  "bmp_Operate.bin",
+
+  //manual leval screen (only if disabled auto level)
+  #if DISABLED(AUTO_BED_LEVELING_BILINEAR)
+    "bmp_Leveling1.bin",
+    "bmp_Leveling2.bin",
+    "bmp_Leveling3.bin",
+    "bmp_Leveling4.bin",
+    "bmp_Leveling5.bin",
+  #endif
+
+  //lang select screen
+  #if HAS_LANG_SELECT_SCREEN
+    "bmp_Language.bin",
+    "bmp_simplified_cn.bin",
+    "bmp_simplified_cn_sel.bin",
+    "bmp_traditional_cn.bin",
+    "bmp_traditional_cn_sel.bin",
+    "bmp_English.bin",
+    "bmp_English_sel.bin",
+    "bmp_Russian.bin",
+    "bmp_Russian_sel.bin",
+    "bmp_Spanish.bin",
+    "bmp_Spanish_sel.bin",
+    "bmp_French.bin",
+    "bmp_French_sel.bin",
+    "bmp_Italy.bin",
+    "bmp_Italy_sel.bin",
+  #endif //HAS_LANG_SELECT_SCREEN
+
+  //gcode preview
+  #if HAS_GCODE_DEFAULT_VIEW_IN_FLASH
+    "bmp_preview.bin",
+  #endif
+
+  //settings screen
+  "bmp_About.bin",
+  //"bmp_Language.bin",
+  //"bmp_Fan.bin",
+  //"bmp_manual_off.bin",
+
+  //start screen
+  "bmp_printing.bin",
+  "bmp_Set.bin",
+  "bmp_Tool.bin",
+
+  //base icons
+  "bmp_Return.bin"
+};
+
+#if HAS_SPI_FLASH_FONT
+  static char fonts[][50] = {
+    "GBK16.bin",
+    "UNIGBK.bin",
+  };
+#endif
 
 uint32_t lv_get_pic_addr(uint8_t *Pname) {
   uint8_t Pic_cnt;
@@ -54,21 +200,22 @@ uint32_t lv_get_pic_addr(uint8_t *Pname) {
   uint32_t tmp_cnt = 0;
   uint32_t addr = 0;
 
+  #if ENABLED(MARLIN_DEV_MODE)
+    SERIAL_ECHOLNPAIR("Getting picture SPI Flash Address: ", (const char*)Pname);
+  #endif
+
   W25QXX.init(SPI_QUARTER_SPEED);
 
   W25QXX.SPI_FLASH_BufferRead(&Pic_cnt, PIC_COUNTER_ADDR, 1);
-  if (Pic_cnt == 0xff)
-    Pic_cnt = 0;
+  if (Pic_cnt == 0xFF) Pic_cnt = 0;
   for (i = 0; i < Pic_cnt; i++) {
     j = 0;
-    do
-    {
+    do {
       W25QXX.SPI_FLASH_BufferRead(&PIC.name[j], PIC_NAME_ADDR + tmp_cnt, 1);
       tmp_cnt++;
-    }while (PIC.name[j++] != '\0');
-
-    if ((strcmp((char*)Pname, (char*)PIC.name)) == 0) {
+    } while (PIC.name[j++] != '\0');
 
+    if ((strcasecmp((char*)Pname, (char*)PIC.name)) == 0) {
       if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761))
         addr = PIC_DATA_ADDR_TFT35 + i * PER_PIC_MAX_SPACE_TFT35;
       else
@@ -86,111 +233,40 @@ const char *bakPath = "bak_pic";
 const char *fontPath = "mks_font";
 const char *bakFont = "bak_font";
 
-#if 1
-
 void spiFlashErase_PIC() {
-  #if 1
-    volatile uint32_t pic_sectorcnt = 0;
-
-    //LCD_Clear(BACK_COLOR);
-    //LCD_DisplayString(90,80,"SPI Flash");
-    //LCD_DisplayString(120,90,"PIC Erasing...");
-    if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761)) {
-      //LCD_ShowString(180,100,200,24,24,"SPI Flash");
-      //LCD_ShowString(170,130,200,24,24,"PIC Erasing...");
-    }
-    else {
-      //LCD_ShowString(100,90,200,24,24,"SPI Flash");
-      //LCD_ShowString(100,120,200,24,24,"PIC Erasing...");
-    }
-    #if ENABLED(MKS_TEST)
-      for (pic_sectorcnt = 0; pic_sectorcnt < 2; pic_sectorcnt++)
-        W25QXX.SPI_FLASH_BlockErase(PICINFOADDR + pic_sectorcnt * 64 * 1024);
-
-    #else
-      for (pic_sectorcnt = 0; pic_sectorcnt < PIC_SIZE_xM * 1024 / 64; pic_sectorcnt++)
-        W25QXX.SPI_FLASH_BlockErase(PICINFOADDR + pic_sectorcnt * 64 * 1024);
-
-    #endif
-    /*
-    FLASH_Unlock();
-    spiFlashEraseFlag = SPI_FLASH_ERASE_FLAG_DATA;
-    FLASH_ProgramHalfWord(SPI_FLASH_ERASE_FLAG_ADDR,spiFlashEraseFlag);
-    FLASH_Lock();
-    */
-    #if 0
-      if (DeviceCode == 0x9488)
-        LCD_ShowString(170, 130, 200, 24, 24, "PIC Erase Done");
-      else
-        LCD_ShowString(100, 120, 200, 24, 24, "PIC Erase Done");
-
-    #endif
-    //spiFlashEraseFlag = 1;
-  #endif
+  volatile uint32_t pic_sectorcnt = 0;
+  for (pic_sectorcnt = 0; pic_sectorcnt < TERN(MKS_TEST, 2, PIC_SIZE_xM * 1024 / 64); pic_sectorcnt++)
+    W25QXX.SPI_FLASH_BlockErase(PICINFOADDR + pic_sectorcnt * 64 * 1024);
 }
 
-void spiFlashErase_FONT() {
-  volatile uint32_t Font_sectorcnt = 0;
-
-  //LCD_Clear(BACK_COLOR);
-  if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761)) {
-    //LCD_ShowString(180,100,200,24,24,"SPI Flash");
-    //LCD_ShowString(170,130,200,24,24,"FONT Erasing...");
+#if HAS_SPI_FLASH_FONT
+  void spiFlashErase_FONT() {
+    volatile uint32_t Font_sectorcnt = 0;
+    for (Font_sectorcnt = 0; Font_sectorcnt < FONT_SIZE_xM * 1024 / 64; Font_sectorcnt++)
+      W25QXX.SPI_FLASH_BlockErase(FONTINFOADDR + Font_sectorcnt * 64 * 1024);
   }
-  else {
-    //LCD_ShowString(100,90,200,24,24,"SPI Flash");
-    //LCD_ShowString(90,120,200,24,24,"FONT Erasing...");
-  }
-
-  for (Font_sectorcnt = 0; Font_sectorcnt < FONT_SIZE_xM * 1024 / 64; Font_sectorcnt++)
-    W25QXX.SPI_FLASH_BlockErase(FONTINFOADDR + Font_sectorcnt * 64 * 1024);
-
-  /*
-  FLASH_Unlock();
-  spiFlashEraseFlag = SPI_FLASH_ERASE_FLAG_DATA;
-  FLASH_ProgramHalfWord(SPI_FLASH_ERASE_FLAG_ADDR,spiFlashEraseFlag);
-  FLASH_Lock();
-  */
-  #if 0
-    if (DeviceCode == 0x9488)
-      LCD_ShowString(170, 130, 200, 24, 24, "FONT Erase Done");
-    else
-      LCD_ShowString(90, 120, 200, 24, 24, "FONT Erase Done");
-    //LCD_DisplayString(120,90,"FONT Erase Done");
-  #endif
-  //spiFlashEraseFlag = 1;
-}
+#endif
 
 uint32_t LogoWrite_Addroffset = 0;
 
 uint8_t Pic_Logo_Write(uint8_t *LogoName, uint8_t *Logo_Wbuff, uint32_t LogoWriteSize) {
-  //uint16_t n;
-  uint32_t i;
-  uint8_t temp1;
-  static uint32_t logo_maxsize;
-
   if (LogoWriteSize <= 0) return 0;
 
   W25QXX.SPI_FLASH_BufferWrite(Logo_Wbuff, PIC_LOGO_ADDR + LogoWrite_Addroffset, LogoWriteSize);
 
-  for (i = 0; i < LogoWriteSize; i++) {
+  for (uint32_t i = 0; i < LogoWriteSize; i++) {
+    uint8_t temp1;
     W25QXX.SPI_FLASH_BufferRead(&temp1, PIC_LOGO_ADDR + LogoWrite_Addroffset + i, 1);
     if (*(Logo_Wbuff + i) != temp1) return 0;
   }
   LogoWrite_Addroffset += LogoWriteSize;
-  if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761))
-    logo_maxsize = LOGO_MAX_SIZE_TFT35;
-  else
-    logo_maxsize = LOGO_MAX_SIZE_TFT32;
-  if (LogoWrite_Addroffset >= logo_maxsize)
-    LogoWrite_Addroffset = 0;
+  const uint32_t logo_maxsize = DeviceCode == 0x9488 || DeviceCode == 0x5761 ? LOGO_MAX_SIZE_TFT35 : LOGO_MAX_SIZE_TFT32;
+  if (LogoWrite_Addroffset >= logo_maxsize) LogoWrite_Addroffset = 0;
   return 1;
 }
 
 uint32_t TitleLogoWrite_Addroffset = 0;
 uint8_t Pic_TitleLogo_Write(uint8_t *TitleLogoName, uint8_t *TitleLogo_Wbuff, uint32_t TitleLogoWriteSize) {
-  //uint32_t i;
-  //uint8_t temp1;
   if (TitleLogoWriteSize <= 0)
     return 0;
   if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761))
@@ -216,18 +292,11 @@ uint32_t Pic_Info_Write(uint8_t *P_name, uint32_t P_size) {
   uint32_t Pic_SaveAddr;
   uint32_t Pic_SizeSaveAddr;
   uint32_t Pic_NameSaveAddr;
-  //uint8_t temp;
   uint8_t Pname_temp;
   uint32_t i, j;
   uint32_t name_len = 0;
   uint32_t SaveName_len = 0;
   union union32 size_tmp;
-  //union union32 size1;
-  //uint8_t Pn[PIC_NAME_MAX_LEN];
-  //uint8_t cnt_temp;
-  //uint16_t n0;
-  //uint32_t Name_saveAddr = 0;
-  //uint8_t pic_position;
 
   W25QXX.SPI_FLASH_BufferRead(&pic_counter, PIC_COUNTER_ADDR, 1);
 
@@ -266,386 +335,182 @@ uint32_t Pic_Info_Write(uint8_t *P_name, uint32_t P_size) {
 
 uint8_t public_buf[512];
 
-//uint8_t public_buf_test[512];
-  #if ENABLED(SDSUPPORT)
-void UpdatePic() {
-  //int r;
-  //unsigned char *p;
-  //char rootPath[10]={0};
-  char *fn;
-  unsigned char logoFlag;
-  uint16_t pbr;
-  uint32_t pfileSize;
-  uint32_t Pic_Write_Addr;
-  /*----------------------------------*/
-
-  // FILINFO fno;
-  //DIR dir;
-  //char tmp[30];
-  #if 0//_USE_LFN
-    static char lfn[_MAX_LFN + 1];
-    finfo.lfname = lfn;
-    finfo.lfsize = sizeof(lfn);
-  #endif
-  //SdFile curDir;
-  //if (f_opendir(&dirs, picPath) == FR_OK)
-  //card.cd(picPath);
-
-  //const uint16_t fileCnt = card.get_num_Files();
-
-  //SdFile *curDir;
-  //SdFile dir;
-  //dir.open(picPath, O_READ);
-  //const char * const fname = card.diveToFile(true, curDir, picPath);
-  //if (!fname) return;
-
-  SdFile dir, root = card.getroot();
-  if (dir.open(&root, picPath, O_RDONLY)) {
-
-    disp_pic_update();
-    spiFlashErase_PIC();
-
-    dir_t d;
-    while (dir.readDir(&d, card.longFilename) > 0) {
-      #if 1
-        /*
-        if (power_det == 0) {
-          PW_DET_ON;
-          power_det=0;
-        }
-        SPI_FLASH_Init();
-        */
+#if ENABLED(SDSUPPORT)
 
-        //for (uint16_t i = 0; i < fileCnt; i++) {
-        //res = f_readdir(&dirs, &finfo);
-        //card.getfilename_sorted(i);
+  static void dosName2LongName(const char dosName[11], char* longName) {
+    uint8_t j = 0;
+    LOOP_L_N(i, 11) {
+      if (i == 8) longName[j++] = '.';
+      if (dosName[i] == '\0' || dosName[i] == ' ') continue;
+      longName[j++] = dosName[i];
+    }
+    longName[j] = '\0';
+  }
+
+  void UpdatePic() {
+    char *fn;
+    unsigned char logoFlag;
+    uint16_t pbr;
+    uint32_t pfileSize;
+    uint32_t totalSizeLoaded = 0;
+    uint32_t Pic_Write_Addr;
+
+    SdFile dir, root = card.getroot();
+    if (dir.open(&root, picPath, O_RDONLY)) {
+
+      disp_pic_update();
+      spiFlashErase_PIC();
+
+      dir_t d;
+      while (dir.readDir(&d, card.longFilename) > 0) {
+        // if we dont get a long name, but gets a short one, try it
+        if (card.longFilename[0] == 0 && d.name[0] != 0) {
+          dosName2LongName((const char*)d.name, card.longFilename);
+        }
 
         if (card.longFilename[0] == 0)
-          break;
-        /*if ( card.filename[0] == '.')
-        continue;
-      */
+          continue;
         if (card.longFilename[0] == '.')
           continue;
 
-        fn = card.longFilename;
+        uint8_t a = -1;
+        for(a = 0; a < COUNT(assets); a++) {
+          if (strcasecmp(assets[a], card.longFilename) == 0) {
+            break;
+          }
+        }
+        if (a < 0 || a >= COUNT(assets)) continue;
 
-        /*if ((finfo.lfname[0] == 0) || (finfo.lfname == 0))
-          fn = finfo.fname;
-        else
-          fn = finfo.lfname;*/
+        fn = assets[a];
+        char dosFilename[FILENAME_LENGTH];
+        createFilename(dosFilename, d);
 
-        /*   if (fno.fattrib & AM_DIR)
-        {
+        SdFile file;
+        if (!file.open(&dir, dosFilename, O_READ)) {
+          #if ENABLED(MARLIN_DEV_MODE)
+            SERIAL_ECHOLNPAIR("Error opening Asset: ", fn);
+          #endif
           continue;
         }
-        else */
-        //{
-        //if ((strstr(fn, ".gco")) || (strstr(fn, ".GCO")) || (fno.fattrib & AM_DIR))
-        if (strstr(fn, ".bin")) {
-          if (strstr(fn, "_logo"))
-            logoFlag = 1;
-          else if (strstr(fn, "_titlelogo"))
-            logoFlag = 2;
-          else if (strstr(fn, "_preview"))
-            logoFlag = 3;
-          else
-            logoFlag = 0;
-
-          //public_buf[0] = '\0';
-          //strcat(public_buf, picPath);
-          //strcat(public_buf, "/");
-          char dosFilename[FILENAME_LENGTH];
-          createFilename(dosFilename, d);
-          //strcat(public_buf, dosFilename);
-
-          SdFile file;
-          if (file.open(&dir, dosFilename, O_READ)) {
-            #if 1
-            /*LCD_Clear(BACK_COLOR);
-
-            if ((DeviceCode==0x9488)||(DeviceCode==0x5761)) {
-              LCD_ShowString(170,100,200,24,24,(u8 *)fn);
-              LCD_ShowString(180,130,200,24,24,"Updating...");
-            }
-            else {
-              LCD_ShowString(90,90,200,24,24,(u8 *)fn);
-              LCD_ShowString(90,120,200,24,24,"Updating...");
-            }
-            */
-            if (logoFlag == 1) {
-              while (1) {
-                pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-                Pic_Logo_Write((uint8_t *)fn, public_buf, pbr); //
-                if (pbr < BMP_WRITE_BUF_LEN) break;
-              }
-            }
-            else if (logoFlag == 2) {
-              while (1) {
-                pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-                Pic_TitleLogo_Write((uint8_t *)fn, public_buf, pbr); //
-                if (pbr < BMP_WRITE_BUF_LEN) break;
-              }
-            }
-            else if (logoFlag == 3) {
-              while (1)
-              {
-                pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-                default_view_Write(public_buf, pbr); //
-                if (pbr < BMP_WRITE_BUF_LEN) break;
-              }
-            }
-            else {
-              pfileSize = file.fileSize();
-              Pic_Write_Addr = Pic_Info_Write((uint8_t *)fn, pfileSize);
-              //uint32_t addr_test = Pic_Write_Addr;
-              //memset(bmp_public_buf, 0xff, BMP_WRITE_BUF_LEN);
-              while (1)
-              {
-                pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
-                W25QXX.SPI_FLASH_BufferWrite(public_buf, Pic_Write_Addr, pbr);
-                Pic_Write_Addr += pbr;
-                if (pbr < BMP_WRITE_BUF_LEN) break;
-              }
-              //W25QXX.SPI_FLASH_BufferRead(public_buf_test,addr_test,BMP_WRITE_BUF_LEN);
-            }
 
-            /*--------------read test--------------------*/
-            /*
-            BufferSet(picBuffer, 0xff, PICTURE_MAX_SIZE);
-            if (logoFlag == 0)
-            {
-              PicMsg_Init();
-              Pic_Read(fn,picBuffer);
-            }
-            else
-              Pic_Logo_Read(fn,picBuffer,PICTURE_MAX_SIZE);
-            */
-            /*--------------read test--------------------*/
-
-            file.close();
-            #endif
+        if (strstr(fn, "_logo"))
+          logoFlag = 1;
+        else if (strstr(fn, "_titlelogo"))
+          logoFlag = 2;
+        else if (strstr(fn, "_preview"))
+          logoFlag = 3;
+        else
+          logoFlag = 0;
+
+        pfileSize = file.fileSize();
+        totalSizeLoaded += pfileSize;
+        if (logoFlag == 1) {
+          while (1) {
+            pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+            Pic_Logo_Write((uint8_t *)fn, public_buf, pbr); //
+            if (pbr < BMP_WRITE_BUF_LEN)
+              break;
           }
-
         }
-        //}
-        //}
-        /*
-            LCD_Clear(LCD_COLOR_BLACK);
-            //LCD_ShowString(110,100,200,24,24,"Complete");
-            LCD_DisplayString(110,80,"Complete");
-            delay(0xfffff);
-        */
-        //r = f_chdir("/");
-        #if 1
-          //SdFile dir, root = card.getroot();
-          /*if (dir.open(&root, bakPath, O_RDONLY))
-      {
-        dir.remove();
-      }*/
-
-          //r = f_rename(picPath, bakPath);
-
-
-          //update_flag_ok = 1;
+        else if (logoFlag == 2) {
+          while (1) {
+            pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+            Pic_TitleLogo_Write((uint8_t *)fn, public_buf, pbr); //
+            if (pbr < BMP_WRITE_BUF_LEN)
+              break;
+          }
+        }
+        else if (logoFlag == 3) {
+          while (1) {
+            pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+            default_view_Write(public_buf, pbr); //
+            if (pbr < BMP_WRITE_BUF_LEN)
+              break;
+          }
+        }
+        else {
+          Pic_Write_Addr = Pic_Info_Write((uint8_t *)fn, pfileSize);
+          while (1) {
+            pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+            W25QXX.SPI_FLASH_BufferWrite(public_buf, Pic_Write_Addr, pbr);
+            Pic_Write_Addr += pbr;
+            if (pbr < BMP_WRITE_BUF_LEN)
+              break;
+          }
+        }
+
+        #if ENABLED(MARLIN_DEV_MODE)
+          SERIAL_ECHOLNPAIR("Asset added: ", fn);
         #endif
-      #endif
+
+        file.close();
+      }
+      dir.rename(&root, bakPath);
     }
-    dir.rename(&root, bakPath);
+    dir.close();
+
+    #if ENABLED(MARLIN_DEV_MODE)
+      uint8_t pic_counter = 0;
+      W25QXX.SPI_FLASH_BufferRead(&pic_counter, PIC_COUNTER_ADDR, 1);
+      SERIAL_ECHOLNPAIR("Total assets loaded: ", pic_counter, ", Total size: ", totalSizeLoaded);
+    #endif
   }
-}
 
+  #if HAS_SPI_FLASH_FONT
 
-void spi_flash_read_test() {W25QXX.SPI_FLASH_BufferRead(public_buf, UNIGBK_FLASH_ADDR, BMP_WRITE_BUF_LEN);}
-
-void UpdateFont() {
-  //int r;
-  //unsigned char *p;
-  //char rootPath[10]={0};
-  char *fn;
-  //unsigned char logoFlag;
-  uint16_t pbr;
-  uint32_t flashaddr = 0;
-  //uint32_t pfileSize;
-  //uint32_t Pic_Write_Addr;
-  /*----------------------------------*/
-
-  // FILINFO fno;
-  //DIR dir;
-  //char tmp[30];
-  #if 0//_USE_LFN
-    static char lfn[_MAX_LFN + 1];
-    finfo.lfname = lfn;
-    finfo.lfsize = sizeof(lfn);
-  #endif
-  //SdFile curDir;
-  //if (f_opendir(&dirs, picPath) == FR_OK)
-  //card.cd(picPath);
-
-  //const uint16_t fileCnt = card.get_num_Files();
-
-  //SdFile *curDir;
-  //SdFile dir;
-  //dir.open(picPath, O_READ);
-  //const char * const fname = card.diveToFile(true, curDir, picPath);
-  //if (!fname) return;
-
-  SdFile dir, root = card.getroot();
-  if (dir.open(&root, fontPath, O_RDONLY)) {
-
-    disp_font_update();
-    spiFlashErase_FONT();
-
-    dir_t d;
-    while (dir.readDir(&d, card.longFilename) > 0)
-    {
-      #if 1
-        /*if (power_det == 0)
-        {
-          PW_DET_ON;
-          power_det=0;
-        }
-        SPI_FLASH_Init();*/
+    void spi_flash_read_test() { W25QXX.SPI_FLASH_BufferRead(public_buf, UNIGBK_FLASH_ADDR, BMP_WRITE_BUF_LEN); }
 
+    void UpdateFont() {
+      char *fn;
+      uint16_t pbr;
+      uint32_t flashaddr = 0;
 
-        //for (uint16_t i = 0; i < fileCnt; i++)
-        //{
-        //res = f_readdir(&dirs, &finfo);
-        //card.getfilename_sorted(i);
+      SdFile dir, root = card.getroot();
+      if (dir.open(&root, fontPath, O_RDONLY)) {
 
-        if (card.longFilename[0] == 0)
-          break;
-        /*if ( card.filename[0] == '.')
-        continue;
-      */
-        if (card.longFilename[0] == '.')
-          continue;
+        disp_font_update();
+        spiFlashErase_FONT();
 
-        fn = card.longFilename;
+        dir_t d;
+        while (dir.readDir(&d, card.longFilename) > 0) {
+          if (card.longFilename[0] == 0)
+            break;
 
-        /*if ((finfo.lfname[0] == 0) || (finfo.lfname == 0))
-          fn = finfo.fname;
-        else
-          fn = finfo.lfname;*/
+          if (card.longFilename[0] == '.')
+            continue;
+
+          fn = card.longFilename;
+
+          if (strstr(fn, ".bin")) {
+            char dosFilename[FILENAME_LENGTH];
+            createFilename(dosFilename, d);
+            //strcat(public_buf, dosFilename);
+
+            SdFile file;
+            if (file.open(&dir, dosFilename, O_READ)) {
 
-        /*   if (fno.fattrib & AM_DIR)
-        {
-        continue;
-        }
-        else */
-        //{
-        //if ((strstr(fn, ".gco")) || (strstr(fn, ".GCO")) || (fno.fattrib & AM_DIR))
-        if (strstr(fn, ".bin")) {
-          char dosFilename[FILENAME_LENGTH];
-          createFilename(dosFilename, d);
-          //strcat(public_buf, dosFilename);
-
-          SdFile file;
-          if (file.open(&dir, dosFilename, O_READ)) {
-
-            #if 1
-              /*LCD_Clear(BACK_COLOR);
-
-              if ((DeviceCode==0x9488)||(DeviceCode==0x5761))
-              {
-                LCD_ShowString(170,100,200,24,24,(u8 *)fn);
-                LCD_ShowString(180,130,200,24,24,"Updating...");
-              }
-              else
-              {
-                LCD_ShowString(90,90,200,24,24,(u8 *)fn);
-                LCD_ShowString(90,120,200,24,24,"Updating...");
-              }
-              */
               flashaddr = UNIGBK_FLASH_ADDR;
               pbr = 0;
-              while (1)
-              {
+              while (1) {
                 flashaddr += pbr;
                 pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
                 W25QXX.SPI_FLASH_BufferWrite(public_buf, flashaddr, pbr);
-                //W25QXX.SPI_FLASH_BufferRead(public_buf_test,flashaddr,pbr);
-                /*if (UNIGBKFlag == 1)
-                {
-                  fontrate = (uint16_t)(((float)(flashaddr - UNIGBK_FLASH_ADDR)/(float)(psrc.fsize))*100);
-                }
-                else
-                {
-                  fontrate = (uint16_t)(((float)(flashaddr - GBK_FLASH_ADDR)/(float)(psrc.fsize))*100);
-                }
-
-                if (fontrate > 99) fontrate=99;
-
-                if (fontrate < 10)
-                {
-                  fontString[0] = fontrate%10 + 0x30;
-                  fontString[1] = '%';
-                  fontString[2] = '\0';
-                }
-                else
-                {
-                  fontString[0] = fontrate/10 + 0x30;
-                  fontString[1] = fontrate%10 + 0x30;
-                  fontString[2] = '%';
-                  fontString[3] = '\0';
-                }*/
-                //LCD_DisplayString(140,130,fontString);
-                if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761)) {
-                  //LCD_ShowString(200,160,200,24,24,fontString);
-                }
-                else {
-                  //LCD_ShowString(140,150,200,24,24,fontString);
-                }
                 if (pbr < BMP_WRITE_BUF_LEN) break;
               }
-              /*--------------read test--------------------*/
-              /*
-              BufferSet(picBuffer, 0xff, PICTURE_MAX_SIZE);
-              if (logoFlag == 0)
-              {
-                PicMsg_Init();
-                Pic_Read(fn,picBuffer);
-              }
-              else
-                Pic_Logo_Read(fn,picBuffer,PICTURE_MAX_SIZE);
-              */
-              /*--------------read test--------------------*/
-
               file.close();
-            #endif
-          }
+            }
 
+          }
         }
-        //}
-        //}
-        /*
-            LCD_Clear(LCD_COLOR_BLACK);
-            //LCD_ShowString(110,100,200,24,24,"Complete");
-            LCD_DisplayString(110,80,"Complete");
-            delay(0xfffff);
-        */
-        //r = f_chdir("/");
-        #if 1
-          //SdFile dir, root = card.getroot();
-          /*if (dir.open(&root, bakPath, O_RDONLY))
-      {
-        dir.remove();
-      }*/
-          dir.rename(&root, bakFont);
-          //r = f_rename(picPath, bakPath);
-
-
-          //update_flag_ok = 1;
-        #endif
-      #endif
+
+        dir.rename(&root, bakFont);
+        dir.close();
+      }
     }
-  }
-}
-  #endif // SDSUPPORT
 
-#endif
+  #endif // HAS_SPI_FLASH_FONT
 
-#if 1
+#endif // SDSUPPORT
 
 void Pic_Read(uint8_t *Pname, uint8_t *P_Rbuff) {
   uint8_t i, j;
@@ -653,30 +518,21 @@ void Pic_Read(uint8_t *Pname, uint8_t *P_Rbuff) {
   uint32_t tmp_cnt = 0;
   PIC_MSG PIC;
 
-  //void SPI_FLASH_BufferRead(u8* pBuffer, u32 ReadAddr, u16 NumByteToRead);
-
   W25QXX.SPI_FLASH_BufferRead(&Pic_cnt, PIC_COUNTER_ADDR, 1);
   if (Pic_cnt == 0xff)
     Pic_cnt = 0;
 
   for (i = 0; i < Pic_cnt; i++) {
-    //pic name
     j = 0;
-    do
-    {
+    do {
       W25QXX.SPI_FLASH_BufferRead(&PIC.name[j], PIC_NAME_ADDR + tmp_cnt, 1);
       tmp_cnt++;
-    }while (PIC.name[j++] != '\0');
+    } while (PIC.name[j++] != '\0');
     //pic size
     W25QXX.SPI_FLASH_BufferRead(PIC.size.bytes, PIC_SIZE_ADDR + i * 4, 4);
 
     if ((strcmp((char*)Pname, (char*)PIC.name)) == 0) {
       W25QXX.SPI_FLASH_BufferRead((uint8_t *)P_Rbuff, PIC_DATA_ADDR_TFT35 + i * PER_PIC_MAX_SPACE_TFT35, PIC.size.dwords);
-      /*if (DMA_ERRO_FLAG)
-      {
-        DMA_ERRO_FLAG = 0;
-        SPI_FLASH_BufferRead((uint8_t *)P_Rbuff,PIC_DATA_ADDR+i*PER_PIC_MAX_SPACE,PIC.size.dwords);
-      }*/
       break;
     }
   }
@@ -685,41 +541,34 @@ void Pic_Read(uint8_t *Pname, uint8_t *P_Rbuff) {
 void lv_pic_test(uint8_t *P_Rbuff, uint32_t addr, uint32_t size) {
   W25QXX.init(SPI_QUARTER_SPEED);
   W25QXX.SPI_FLASH_BufferRead((uint8_t *)P_Rbuff, addr, size);
-  /*if (DMA_ERRO_FLAG) {
-    DMA_ERRO_FLAG = 0;
-    SPI_FLASH_BufferRead((uint8_t *)P_Rbuff,addr,size);
-  }*/
-
 }
 
-void get_spi_flash_data(const char *rec_buf, int addr, int size) {
-  W25QXX.init(SPI_QUARTER_SPEED);
-  W25QXX.SPI_FLASH_BufferRead((uint8_t *)rec_buf, UNIGBK_FLASH_ADDR + addr, size);
-}
-
-#endif
-
-#if 1
-
-  uint32_t logo_addroffset = 0;
-  void Pic_Logo_Read(uint8_t *LogoName, uint8_t *Logo_Rbuff, uint32_t LogoReadsize) {
-    W25QXX.SPI_FLASH_BufferRead(Logo_Rbuff, PIC_LOGO_ADDR + logo_addroffset, LogoReadsize);
-    logo_addroffset += LogoReadsize;
-    if (logo_addroffset >= LOGO_MAX_SIZE_TFT35)
-      logo_addroffset = 0;
+#if HAS_SPI_FLASH_FONT
+  void get_spi_flash_data(const char *rec_buf, int addr, int size) {
+    W25QXX.init(SPI_QUARTER_SPEED);
+    W25QXX.SPI_FLASH_BufferRead((uint8_t *)rec_buf, UNIGBK_FLASH_ADDR + addr, size);
   }
+#endif
 
-  uint32_t default_view_addroffset = 0;
-  void default_view_Read(uint8_t *default_view_Rbuff, uint32_t default_view_Readsize) {
-    W25QXX.init(SPI_QUARTER_SPEED);
+uint32_t logo_addroffset = 0;
+void Pic_Logo_Read(uint8_t *LogoName, uint8_t *Logo_Rbuff, uint32_t LogoReadsize) {
+  W25QXX.SPI_FLASH_BufferRead(Logo_Rbuff, PIC_LOGO_ADDR + logo_addroffset, LogoReadsize);
+  logo_addroffset += LogoReadsize;
+  if (logo_addroffset >= LOGO_MAX_SIZE_TFT35)
+    logo_addroffset = 0;
+}
 
-    W25QXX.SPI_FLASH_BufferRead(default_view_Rbuff, DEFAULT_VIEW_ADDR_TFT35 + default_view_addroffset + 4, default_view_Readsize);
-    default_view_addroffset += default_view_Readsize;
-    if (default_view_addroffset >= DEFAULT_VIEW_MAX_SIZE)
-      default_view_addroffset = 0;
+uint32_t default_view_addroffset = 0;
+void default_view_Read(uint8_t *default_view_Rbuff, uint32_t default_view_Readsize) {
+  W25QXX.init(SPI_QUARTER_SPEED);
 
-  }
+  W25QXX.SPI_FLASH_BufferRead(default_view_Rbuff, DEFAULT_VIEW_ADDR_TFT35 + default_view_addroffset, default_view_Readsize);
+  default_view_addroffset += default_view_Readsize;
+  if (default_view_addroffset >= DEFAULT_VIEW_MAX_SIZE)
+    default_view_addroffset = 0;
+}
 
+#if HAS_BAK_VIEW_IN_FLASH
   uint32_t flash_view_addroffset = 0;
   void flash_view_Read(uint8_t *flash_view_Rbuff, uint32_t flash_view_Readsize) {
     W25QXX.init(SPI_QUARTER_SPEED);
@@ -728,9 +577,7 @@ void get_spi_flash_data(const char *rec_buf, int addr, int size) {
     flash_view_addroffset += flash_view_Readsize;
     if (flash_view_addroffset >= FLASH_VIEW_MAX_SIZE)
       flash_view_addroffset = 0;
-
   }
-
 #endif
 
-#endif // TFT_LITTLE_VGL_UI
+#endif // TFT_LVGL_UI

commit 642112d3eb7c1af9a52feec8134c85ed3e34891c
Author: makerbase <4164049@qq.com>
Date:   Tue Jun 16 10:05:33 2020 +0800

    Add MKS UI (TFT_LITTLE_VGL_UI) (#18071)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
new file mode 100644
index 0000000000..85049ed3a1
--- /dev/null
+++ b/Marlin/src/lcd/extui/lib/mks_ui/pic_manager.cpp
@@ -0,0 +1,736 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(TFT_LITTLE_VGL_UI)
+
+#include "../../../../MarlinCore.h"
+
+//#include "type_define.h"
+#include "string.h"
+
+#include "pic_manager.h"
+#include "W25Qxx.h"
+#include "../../../../sd/cardreader.h"
+#include "draw_ready_print.h"
+#include "mks_hardware_test.h"
+
+//#include "gui.h"
+//#include "spi_flash.h"
+
+//uint8_t DMA_ERRO_FLAG;
+extern uint16_t DeviceCode;
+extern unsigned char bmp_public_buf[17 * 1024];
+
+#if ENABLED(SDSUPPORT)
+  extern char *createFilename(char * const buffer, const dir_t &p);
+#endif
+
+/*void SPI_FLASH_BufferRead(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead) {}*/
+
+uint32_t lv_get_pic_addr(uint8_t *Pname) {
+  uint8_t Pic_cnt;
+  uint8_t i, j;
+  PIC_MSG PIC;
+  uint32_t tmp_cnt = 0;
+  uint32_t addr = 0;
+
+  W25QXX.init(SPI_QUARTER_SPEED);
+
+  W25QXX.SPI_FLASH_BufferRead(&Pic_cnt, PIC_COUNTER_ADDR, 1);
+  if (Pic_cnt == 0xff)
+    Pic_cnt = 0;
+  for (i = 0; i < Pic_cnt; i++) {
+    j = 0;
+    do
+    {
+      W25QXX.SPI_FLASH_BufferRead(&PIC.name[j], PIC_NAME_ADDR + tmp_cnt, 1);
+      tmp_cnt++;
+    }while (PIC.name[j++] != '\0');
+
+    if ((strcmp((char*)Pname, (char*)PIC.name)) == 0) {
+
+      if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761))
+        addr = PIC_DATA_ADDR_TFT35 + i * PER_PIC_MAX_SPACE_TFT35;
+      else
+        addr = PIC_DATA_ADDR_TFT32 + i * PER_PIC_MAX_SPACE_TFT32;
+      return (addr + 4);//The purpose of adding 4 is to remove 4-byte picture header information.
+    }
+  }
+
+  return addr;
+}
+
+const char *picPath = "mks_pic";
+const char *bakPath = "bak_pic";
+
+const char *fontPath = "mks_font";
+const char *bakFont = "bak_font";
+
+#if 1
+
+void spiFlashErase_PIC() {
+  #if 1
+    volatile uint32_t pic_sectorcnt = 0;
+
+    //LCD_Clear(BACK_COLOR);
+    //LCD_DisplayString(90,80,"SPI Flash");
+    //LCD_DisplayString(120,90,"PIC Erasing...");
+    if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761)) {
+      //LCD_ShowString(180,100,200,24,24,"SPI Flash");
+      //LCD_ShowString(170,130,200,24,24,"PIC Erasing...");
+    }
+    else {
+      //LCD_ShowString(100,90,200,24,24,"SPI Flash");
+      //LCD_ShowString(100,120,200,24,24,"PIC Erasing...");
+    }
+    #if ENABLED(MKS_TEST)
+      for (pic_sectorcnt = 0; pic_sectorcnt < 2; pic_sectorcnt++)
+        W25QXX.SPI_FLASH_BlockErase(PICINFOADDR + pic_sectorcnt * 64 * 1024);
+
+    #else
+      for (pic_sectorcnt = 0; pic_sectorcnt < PIC_SIZE_xM * 1024 / 64; pic_sectorcnt++)
+        W25QXX.SPI_FLASH_BlockErase(PICINFOADDR + pic_sectorcnt * 64 * 1024);
+
+    #endif
+    /*
+    FLASH_Unlock();
+    spiFlashEraseFlag = SPI_FLASH_ERASE_FLAG_DATA;
+    FLASH_ProgramHalfWord(SPI_FLASH_ERASE_FLAG_ADDR,spiFlashEraseFlag);
+    FLASH_Lock();
+    */
+    #if 0
+      if (DeviceCode == 0x9488)
+        LCD_ShowString(170, 130, 200, 24, 24, "PIC Erase Done");
+      else
+        LCD_ShowString(100, 120, 200, 24, 24, "PIC Erase Done");
+
+    #endif
+    //spiFlashEraseFlag = 1;
+  #endif
+}
+
+void spiFlashErase_FONT() {
+  volatile uint32_t Font_sectorcnt = 0;
+
+  //LCD_Clear(BACK_COLOR);
+  if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761)) {
+    //LCD_ShowString(180,100,200,24,24,"SPI Flash");
+    //LCD_ShowString(170,130,200,24,24,"FONT Erasing...");
+  }
+  else {
+    //LCD_ShowString(100,90,200,24,24,"SPI Flash");
+    //LCD_ShowString(90,120,200,24,24,"FONT Erasing...");
+  }
+
+  for (Font_sectorcnt = 0; Font_sectorcnt < FONT_SIZE_xM * 1024 / 64; Font_sectorcnt++)
+    W25QXX.SPI_FLASH_BlockErase(FONTINFOADDR + Font_sectorcnt * 64 * 1024);
+
+  /*
+  FLASH_Unlock();
+  spiFlashEraseFlag = SPI_FLASH_ERASE_FLAG_DATA;
+  FLASH_ProgramHalfWord(SPI_FLASH_ERASE_FLAG_ADDR,spiFlashEraseFlag);
+  FLASH_Lock();
+  */
+  #if 0
+    if (DeviceCode == 0x9488)
+      LCD_ShowString(170, 130, 200, 24, 24, "FONT Erase Done");
+    else
+      LCD_ShowString(90, 120, 200, 24, 24, "FONT Erase Done");
+    //LCD_DisplayString(120,90,"FONT Erase Done");
+  #endif
+  //spiFlashEraseFlag = 1;
+}
+
+uint32_t LogoWrite_Addroffset = 0;
+
+uint8_t Pic_Logo_Write(uint8_t *LogoName, uint8_t *Logo_Wbuff, uint32_t LogoWriteSize) {
+  //uint16_t n;
+  uint32_t i;
+  uint8_t temp1;
+  static uint32_t logo_maxsize;
+
+  if (LogoWriteSize <= 0) return 0;
+
+  W25QXX.SPI_FLASH_BufferWrite(Logo_Wbuff, PIC_LOGO_ADDR + LogoWrite_Addroffset, LogoWriteSize);
+
+  for (i = 0; i < LogoWriteSize; i++) {
+    W25QXX.SPI_FLASH_BufferRead(&temp1, PIC_LOGO_ADDR + LogoWrite_Addroffset + i, 1);
+    if (*(Logo_Wbuff + i) != temp1) return 0;
+  }
+  LogoWrite_Addroffset += LogoWriteSize;
+  if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761))
+    logo_maxsize = LOGO_MAX_SIZE_TFT35;
+  else
+    logo_maxsize = LOGO_MAX_SIZE_TFT32;
+  if (LogoWrite_Addroffset >= logo_maxsize)
+    LogoWrite_Addroffset = 0;
+  return 1;
+}
+
+uint32_t TitleLogoWrite_Addroffset = 0;
+uint8_t Pic_TitleLogo_Write(uint8_t *TitleLogoName, uint8_t *TitleLogo_Wbuff, uint32_t TitleLogoWriteSize) {
+  //uint32_t i;
+  //uint8_t temp1;
+  if (TitleLogoWriteSize <= 0)
+    return 0;
+  if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761))
+    W25QXX.SPI_FLASH_BufferWrite(TitleLogo_Wbuff, PIC_ICON_LOGO_ADDR_TFT35 + TitleLogoWrite_Addroffset, TitleLogoWriteSize);
+  else
+    W25QXX.SPI_FLASH_BufferWrite(TitleLogo_Wbuff, PIC_ICON_LOGO_ADDR_TFT32 + TitleLogoWrite_Addroffset, TitleLogoWriteSize);
+  TitleLogoWrite_Addroffset += TitleLogoWriteSize;
+  if (TitleLogoWrite_Addroffset >= TITLELOGO_MAX_SIZE)
+    TitleLogoWrite_Addroffset = 0;
+  return 1;
+}
+
+uint32_t default_view_addroffset_r = 0;
+void default_view_Write(uint8_t *default_view__Rbuff, uint32_t default_view_Writesize) {
+  W25QXX.SPI_FLASH_BufferWrite(default_view__Rbuff, DEFAULT_VIEW_ADDR_TFT35 + default_view_addroffset_r, default_view_Writesize);
+  default_view_addroffset_r += default_view_Writesize;
+  if (default_view_addroffset_r >= DEFAULT_VIEW_MAX_SIZE)
+    default_view_addroffset_r = 0;
+}
+
+uint32_t Pic_Info_Write(uint8_t *P_name, uint32_t P_size) {
+  uint8_t pic_counter = 0;
+  uint32_t Pic_SaveAddr;
+  uint32_t Pic_SizeSaveAddr;
+  uint32_t Pic_NameSaveAddr;
+  //uint8_t temp;
+  uint8_t Pname_temp;
+  uint32_t i, j;
+  uint32_t name_len = 0;
+  uint32_t SaveName_len = 0;
+  union union32 size_tmp;
+  //union union32 size1;
+  //uint8_t Pn[PIC_NAME_MAX_LEN];
+  //uint8_t cnt_temp;
+  //uint16_t n0;
+  //uint32_t Name_saveAddr = 0;
+  //uint8_t pic_position;
+
+  W25QXX.SPI_FLASH_BufferRead(&pic_counter, PIC_COUNTER_ADDR, 1);
+
+  if (pic_counter == 0xFF)
+    pic_counter = 0;
+
+  if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761))
+    Pic_SaveAddr = PIC_DATA_ADDR_TFT35 + pic_counter * PER_PIC_MAX_SPACE_TFT35;
+  else
+    Pic_SaveAddr = PIC_DATA_ADDR_TFT32 + pic_counter * PER_PIC_MAX_SPACE_TFT32;
+
+  for (j = 0; j < pic_counter; j++) {
+    do {
+      W25QXX.SPI_FLASH_BufferRead(&Pname_temp, PIC_NAME_ADDR + SaveName_len, 1);
+      SaveName_len++;
+    } while (Pname_temp != '\0');
+  }
+  i = 0;
+  while ((*(P_name + i) != '\0')) {
+    i++;
+    name_len++;
+  }
+
+  Pic_NameSaveAddr = PIC_NAME_ADDR + SaveName_len;
+  W25QXX.SPI_FLASH_BufferWrite(P_name, Pic_NameSaveAddr, name_len + 1);
+  Pic_SizeSaveAddr = PIC_SIZE_ADDR + 4 * pic_counter;
+  size_tmp.dwords = P_size;
+  W25QXX.SPI_FLASH_BufferWrite(size_tmp.bytes, Pic_SizeSaveAddr, 4);
+
+  pic_counter++;
+  W25QXX.SPI_FLASH_SectorErase(PIC_COUNTER_ADDR);
+  W25QXX.SPI_FLASH_BufferWrite(&pic_counter, PIC_COUNTER_ADDR, 1);
+
+  return Pic_SaveAddr;
+}
+
+uint8_t public_buf[512];
+
+//uint8_t public_buf_test[512];
+  #if ENABLED(SDSUPPORT)
+void UpdatePic() {
+  //int r;
+  //unsigned char *p;
+  //char rootPath[10]={0};
+  char *fn;
+  unsigned char logoFlag;
+  uint16_t pbr;
+  uint32_t pfileSize;
+  uint32_t Pic_Write_Addr;
+  /*----------------------------------*/
+
+  // FILINFO fno;
+  //DIR dir;
+  //char tmp[30];
+  #if 0//_USE_LFN
+    static char lfn[_MAX_LFN + 1];
+    finfo.lfname = lfn;
+    finfo.lfsize = sizeof(lfn);
+  #endif
+  //SdFile curDir;
+  //if (f_opendir(&dirs, picPath) == FR_OK)
+  //card.cd(picPath);
+
+  //const uint16_t fileCnt = card.get_num_Files();
+
+  //SdFile *curDir;
+  //SdFile dir;
+  //dir.open(picPath, O_READ);
+  //const char * const fname = card.diveToFile(true, curDir, picPath);
+  //if (!fname) return;
+
+  SdFile dir, root = card.getroot();
+  if (dir.open(&root, picPath, O_RDONLY)) {
+
+    disp_pic_update();
+    spiFlashErase_PIC();
+
+    dir_t d;
+    while (dir.readDir(&d, card.longFilename) > 0) {
+      #if 1
+        /*
+        if (power_det == 0) {
+          PW_DET_ON;
+          power_det=0;
+        }
+        SPI_FLASH_Init();
+        */
+
+        //for (uint16_t i = 0; i < fileCnt; i++) {
+        //res = f_readdir(&dirs, &finfo);
+        //card.getfilename_sorted(i);
+
+        if (card.longFilename[0] == 0)
+          break;
+        /*if ( card.filename[0] == '.')
+        continue;
+      */
+        if (card.longFilename[0] == '.')
+          continue;
+
+        fn = card.longFilename;
+
+        /*if ((finfo.lfname[0] == 0) || (finfo.lfname == 0))
+          fn = finfo.fname;
+        else
+          fn = finfo.lfname;*/
+
+        /*   if (fno.fattrib & AM_DIR)
+        {
+          continue;
+        }
+        else */
+        //{
+        //if ((strstr(fn, ".gco")) || (strstr(fn, ".GCO")) || (fno.fattrib & AM_DIR))
+        if (strstr(fn, ".bin")) {
+          if (strstr(fn, "_logo"))
+            logoFlag = 1;
+          else if (strstr(fn, "_titlelogo"))
+            logoFlag = 2;
+          else if (strstr(fn, "_preview"))
+            logoFlag = 3;
+          else
+            logoFlag = 0;
+
+          //public_buf[0] = '\0';
+          //strcat(public_buf, picPath);
+          //strcat(public_buf, "/");
+          char dosFilename[FILENAME_LENGTH];
+          createFilename(dosFilename, d);
+          //strcat(public_buf, dosFilename);
+
+          SdFile file;
+          if (file.open(&dir, dosFilename, O_READ)) {
+            #if 1
+            /*LCD_Clear(BACK_COLOR);
+
+            if ((DeviceCode==0x9488)||(DeviceCode==0x5761)) {
+              LCD_ShowString(170,100,200,24,24,(u8 *)fn);
+              LCD_ShowString(180,130,200,24,24,"Updating...");
+            }
+            else {
+              LCD_ShowString(90,90,200,24,24,(u8 *)fn);
+              LCD_ShowString(90,120,200,24,24,"Updating...");
+            }
+            */
+            if (logoFlag == 1) {
+              while (1) {
+                pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+                Pic_Logo_Write((uint8_t *)fn, public_buf, pbr); //
+                if (pbr < BMP_WRITE_BUF_LEN) break;
+              }
+            }
+            else if (logoFlag == 2) {
+              while (1) {
+                pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+                Pic_TitleLogo_Write((uint8_t *)fn, public_buf, pbr); //
+                if (pbr < BMP_WRITE_BUF_LEN) break;
+              }
+            }
+            else if (logoFlag == 3) {
+              while (1)
+              {
+                pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+                default_view_Write(public_buf, pbr); //
+                if (pbr < BMP_WRITE_BUF_LEN) break;
+              }
+            }
+            else {
+              pfileSize = file.fileSize();
+              Pic_Write_Addr = Pic_Info_Write((uint8_t *)fn, pfileSize);
+              //uint32_t addr_test = Pic_Write_Addr;
+              //memset(bmp_public_buf, 0xff, BMP_WRITE_BUF_LEN);
+              while (1)
+              {
+                pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+                W25QXX.SPI_FLASH_BufferWrite(public_buf, Pic_Write_Addr, pbr);
+                Pic_Write_Addr += pbr;
+                if (pbr < BMP_WRITE_BUF_LEN) break;
+              }
+              //W25QXX.SPI_FLASH_BufferRead(public_buf_test,addr_test,BMP_WRITE_BUF_LEN);
+            }
+
+            /*--------------read test--------------------*/
+            /*
+            BufferSet(picBuffer, 0xff, PICTURE_MAX_SIZE);
+            if (logoFlag == 0)
+            {
+              PicMsg_Init();
+              Pic_Read(fn,picBuffer);
+            }
+            else
+              Pic_Logo_Read(fn,picBuffer,PICTURE_MAX_SIZE);
+            */
+            /*--------------read test--------------------*/
+
+            file.close();
+            #endif
+          }
+
+        }
+        //}
+        //}
+        /*
+            LCD_Clear(LCD_COLOR_BLACK);
+            //LCD_ShowString(110,100,200,24,24,"Complete");
+            LCD_DisplayString(110,80,"Complete");
+            delay(0xfffff);
+        */
+        //r = f_chdir("/");
+        #if 1
+          //SdFile dir, root = card.getroot();
+          /*if (dir.open(&root, bakPath, O_RDONLY))
+      {
+        dir.remove();
+      }*/
+
+          //r = f_rename(picPath, bakPath);
+
+
+          //update_flag_ok = 1;
+        #endif
+      #endif
+    }
+    dir.rename(&root, bakPath);
+  }
+}
+
+
+void spi_flash_read_test() {W25QXX.SPI_FLASH_BufferRead(public_buf, UNIGBK_FLASH_ADDR, BMP_WRITE_BUF_LEN);}
+
+void UpdateFont() {
+  //int r;
+  //unsigned char *p;
+  //char rootPath[10]={0};
+  char *fn;
+  //unsigned char logoFlag;
+  uint16_t pbr;
+  uint32_t flashaddr = 0;
+  //uint32_t pfileSize;
+  //uint32_t Pic_Write_Addr;
+  /*----------------------------------*/
+
+  // FILINFO fno;
+  //DIR dir;
+  //char tmp[30];
+  #if 0//_USE_LFN
+    static char lfn[_MAX_LFN + 1];
+    finfo.lfname = lfn;
+    finfo.lfsize = sizeof(lfn);
+  #endif
+  //SdFile curDir;
+  //if (f_opendir(&dirs, picPath) == FR_OK)
+  //card.cd(picPath);
+
+  //const uint16_t fileCnt = card.get_num_Files();
+
+  //SdFile *curDir;
+  //SdFile dir;
+  //dir.open(picPath, O_READ);
+  //const char * const fname = card.diveToFile(true, curDir, picPath);
+  //if (!fname) return;
+
+  SdFile dir, root = card.getroot();
+  if (dir.open(&root, fontPath, O_RDONLY)) {
+
+    disp_font_update();
+    spiFlashErase_FONT();
+
+    dir_t d;
+    while (dir.readDir(&d, card.longFilename) > 0)
+    {
+      #if 1
+        /*if (power_det == 0)
+        {
+          PW_DET_ON;
+          power_det=0;
+        }
+        SPI_FLASH_Init();*/
+
+
+        //for (uint16_t i = 0; i < fileCnt; i++)
+        //{
+        //res = f_readdir(&dirs, &finfo);
+        //card.getfilename_sorted(i);
+
+        if (card.longFilename[0] == 0)
+          break;
+        /*if ( card.filename[0] == '.')
+        continue;
+      */
+        if (card.longFilename[0] == '.')
+          continue;
+
+        fn = card.longFilename;
+
+        /*if ((finfo.lfname[0] == 0) || (finfo.lfname == 0))
+          fn = finfo.fname;
+        else
+          fn = finfo.lfname;*/
+
+        /*   if (fno.fattrib & AM_DIR)
+        {
+        continue;
+        }
+        else */
+        //{
+        //if ((strstr(fn, ".gco")) || (strstr(fn, ".GCO")) || (fno.fattrib & AM_DIR))
+        if (strstr(fn, ".bin")) {
+          char dosFilename[FILENAME_LENGTH];
+          createFilename(dosFilename, d);
+          //strcat(public_buf, dosFilename);
+
+          SdFile file;
+          if (file.open(&dir, dosFilename, O_READ)) {
+
+            #if 1
+              /*LCD_Clear(BACK_COLOR);
+
+              if ((DeviceCode==0x9488)||(DeviceCode==0x5761))
+              {
+                LCD_ShowString(170,100,200,24,24,(u8 *)fn);
+                LCD_ShowString(180,130,200,24,24,"Updating...");
+              }
+              else
+              {
+                LCD_ShowString(90,90,200,24,24,(u8 *)fn);
+                LCD_ShowString(90,120,200,24,24,"Updating...");
+              }
+              */
+              flashaddr = UNIGBK_FLASH_ADDR;
+              pbr = 0;
+              while (1)
+              {
+                flashaddr += pbr;
+                pbr = file.read(public_buf, BMP_WRITE_BUF_LEN);
+                W25QXX.SPI_FLASH_BufferWrite(public_buf, flashaddr, pbr);
+                //W25QXX.SPI_FLASH_BufferRead(public_buf_test,flashaddr,pbr);
+                /*if (UNIGBKFlag == 1)
+                {
+                  fontrate = (uint16_t)(((float)(flashaddr - UNIGBK_FLASH_ADDR)/(float)(psrc.fsize))*100);
+                }
+                else
+                {
+                  fontrate = (uint16_t)(((float)(flashaddr - GBK_FLASH_ADDR)/(float)(psrc.fsize))*100);
+                }
+
+                if (fontrate > 99) fontrate=99;
+
+                if (fontrate < 10)
+                {
+                  fontString[0] = fontrate%10 + 0x30;
+                  fontString[1] = '%';
+                  fontString[2] = '\0';
+                }
+                else
+                {
+                  fontString[0] = fontrate/10 + 0x30;
+                  fontString[1] = fontrate%10 + 0x30;
+                  fontString[2] = '%';
+                  fontString[3] = '\0';
+                }*/
+                //LCD_DisplayString(140,130,fontString);
+                if ((DeviceCode == 0x9488) || (DeviceCode == 0x5761)) {
+                  //LCD_ShowString(200,160,200,24,24,fontString);
+                }
+                else {
+                  //LCD_ShowString(140,150,200,24,24,fontString);
+                }
+                if (pbr < BMP_WRITE_BUF_LEN) break;
+              }
+              /*--------------read test--------------------*/
+              /*
+              BufferSet(picBuffer, 0xff, PICTURE_MAX_SIZE);
+              if (logoFlag == 0)
+              {
+                PicMsg_Init();
+                Pic_Read(fn,picBuffer);
+              }
+              else
+                Pic_Logo_Read(fn,picBuffer,PICTURE_MAX_SIZE);
+              */
+              /*--------------read test--------------------*/
+
+              file.close();
+            #endif
+          }
+
+        }
+        //}
+        //}
+        /*
+            LCD_Clear(LCD_COLOR_BLACK);
+            //LCD_ShowString(110,100,200,24,24,"Complete");
+            LCD_DisplayString(110,80,"Complete");
+            delay(0xfffff);
+        */
+        //r = f_chdir("/");
+        #if 1
+          //SdFile dir, root = card.getroot();
+          /*if (dir.open(&root, bakPath, O_RDONLY))
+      {
+        dir.remove();
+      }*/
+          dir.rename(&root, bakFont);
+          //r = f_rename(picPath, bakPath);
+
+
+          //update_flag_ok = 1;
+        #endif
+      #endif
+    }
+  }
+}
+  #endif // SDSUPPORT
+
+#endif
+
+#if 1
+
+void Pic_Read(uint8_t *Pname, uint8_t *P_Rbuff) {
+  uint8_t i, j;
+  uint8_t Pic_cnt;
+  uint32_t tmp_cnt = 0;
+  PIC_MSG PIC;
+
+  //void SPI_FLASH_BufferRead(u8* pBuffer, u32 ReadAddr, u16 NumByteToRead);
+
+  W25QXX.SPI_FLASH_BufferRead(&Pic_cnt, PIC_COUNTER_ADDR, 1);
+  if (Pic_cnt == 0xff)
+    Pic_cnt = 0;
+
+  for (i = 0; i < Pic_cnt; i++) {
+    //pic name
+    j = 0;
+    do
+    {
+      W25QXX.SPI_FLASH_BufferRead(&PIC.name[j], PIC_NAME_ADDR + tmp_cnt, 1);
+      tmp_cnt++;
+    }while (PIC.name[j++] != '\0');
+    //pic size
+    W25QXX.SPI_FLASH_BufferRead(PIC.size.bytes, PIC_SIZE_ADDR + i * 4, 4);
+
+    if ((strcmp((char*)Pname, (char*)PIC.name)) == 0) {
+      W25QXX.SPI_FLASH_BufferRead((uint8_t *)P_Rbuff, PIC_DATA_ADDR_TFT35 + i * PER_PIC_MAX_SPACE_TFT35, PIC.size.dwords);
+      /*if (DMA_ERRO_FLAG)
+      {
+        DMA_ERRO_FLAG = 0;
+        SPI_FLASH_BufferRead((uint8_t *)P_Rbuff,PIC_DATA_ADDR+i*PER_PIC_MAX_SPACE,PIC.size.dwords);
+      }*/
+      break;
+    }
+  }
+}
+
+void lv_pic_test(uint8_t *P_Rbuff, uint32_t addr, uint32_t size) {
+  W25QXX.init(SPI_QUARTER_SPEED);
+  W25QXX.SPI_FLASH_BufferRead((uint8_t *)P_Rbuff, addr, size);
+  /*if (DMA_ERRO_FLAG) {
+    DMA_ERRO_FLAG = 0;
+    SPI_FLASH_BufferRead((uint8_t *)P_Rbuff,addr,size);
+  }*/
+
+}
+
+void get_spi_flash_data(const char *rec_buf, int addr, int size) {
+  W25QXX.init(SPI_QUARTER_SPEED);
+  W25QXX.SPI_FLASH_BufferRead((uint8_t *)rec_buf, UNIGBK_FLASH_ADDR + addr, size);
+}
+
+#endif
+
+#if 1
+
+  uint32_t logo_addroffset = 0;
+  void Pic_Logo_Read(uint8_t *LogoName, uint8_t *Logo_Rbuff, uint32_t LogoReadsize) {
+    W25QXX.SPI_FLASH_BufferRead(Logo_Rbuff, PIC_LOGO_ADDR + logo_addroffset, LogoReadsize);
+    logo_addroffset += LogoReadsize;
+    if (logo_addroffset >= LOGO_MAX_SIZE_TFT35)
+      logo_addroffset = 0;
+  }
+
+  uint32_t default_view_addroffset = 0;
+  void default_view_Read(uint8_t *default_view_Rbuff, uint32_t default_view_Readsize) {
+    W25QXX.init(SPI_QUARTER_SPEED);
+
+    W25QXX.SPI_FLASH_BufferRead(default_view_Rbuff, DEFAULT_VIEW_ADDR_TFT35 + default_view_addroffset + 4, default_view_Readsize);
+    default_view_addroffset += default_view_Readsize;
+    if (default_view_addroffset >= DEFAULT_VIEW_MAX_SIZE)
+      default_view_addroffset = 0;
+
+  }
+
+  uint32_t flash_view_addroffset = 0;
+  void flash_view_Read(uint8_t *flash_view_Rbuff, uint32_t flash_view_Readsize) {
+    W25QXX.init(SPI_QUARTER_SPEED);
+
+    W25QXX.SPI_FLASH_BufferRead(flash_view_Rbuff, BAK_VIEW_ADDR_TFT35 + flash_view_addroffset, flash_view_Readsize);
+    flash_view_addroffset += flash_view_Readsize;
+    if (flash_view_addroffset >= FLASH_VIEW_MAX_SIZE)
+      flash_view_addroffset = 0;
+
+  }
+
+#endif
+
+#endif // TFT_LITTLE_VGL_UI
