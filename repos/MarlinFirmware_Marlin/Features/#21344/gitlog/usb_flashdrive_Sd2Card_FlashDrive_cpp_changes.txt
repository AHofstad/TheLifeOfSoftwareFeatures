commit d364babbc0cdb73337d86e2c4fd9170b46b7361a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 26 14:29:21 2023 -0500

    üßë‚Äçüíª Change HAL_PATH macro for easier HAL relocation (#25743)

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index b5968b7021..76d69c789e 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -84,10 +84,10 @@
 #elif ENABLED(USE_OTG_USB_HOST)
 
   #if HAS_SD_HOST_DRIVE
-    #include HAL_PATH(../../HAL, msc_sd.h)
+    #include HAL_PATH(../.., msc_sd.h)
   #endif
 
-  #include HAL_PATH(../../HAL, usb_host.h)
+  #include HAL_PATH(../.., usb_host.h)
 
   #define UHS_START usb.start()
   #define rREVISION 0

commit aacc2d3dc5657b17a26cde09d0146486ea72b17e
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Wed Jul 20 04:08:19 2022 -0400

    üêõ Fix Archim2 USB Hang (#24314)

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 7d698247e5..b5968b7021 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -159,18 +159,18 @@ void DiskIODriver_USBFlash::idle() {
       static uint8_t laststate = 232;
       if (task_state != laststate) {
         laststate = task_state;
-        #define UHS_USB_DEBUG(x) case UHS_STATE(x): SERIAL_ECHOLNPGM(#x); break
+        #define UHS_USB_DEBUG(x,y) case UHS_STATE(x): SERIAL_ECHOLNPGM(y); break
         switch (task_state) {
-          UHS_USB_DEBUG(IDLE);
-          UHS_USB_DEBUG(RESET_DEVICE);
-          UHS_USB_DEBUG(RESET_NOT_COMPLETE);
-          UHS_USB_DEBUG(DEBOUNCE);
-          UHS_USB_DEBUG(DEBOUNCE_NOT_COMPLETE);
-          UHS_USB_DEBUG(WAIT_SOF);
-          UHS_USB_DEBUG(ERROR);
-          UHS_USB_DEBUG(CONFIGURING);
-          UHS_USB_DEBUG(CONFIGURING_DONE);
-          UHS_USB_DEBUG(RUNNING);
+          UHS_USB_DEBUG(IDLE, "IDLE");
+          UHS_USB_DEBUG(RESET_DEVICE, "RESET_DEVICE");
+          UHS_USB_DEBUG(RESET_NOT_COMPLETE, "RESET_NOT_COMPLETE");
+          UHS_USB_DEBUG(DEBOUNCE, "DEBOUNCE");
+          UHS_USB_DEBUG(DEBOUNCE_NOT_COMPLETE, "DEBOUNCE_NOT_COMPLETE");
+          UHS_USB_DEBUG(WAIT_SOF, "WAIT_SOF");
+          UHS_USB_DEBUG(ERROR, "ERROR");
+          UHS_USB_DEBUG(CONFIGURING, "CONFIGURING");
+          UHS_USB_DEBUG(CONFIGURING_DONE, "CONFIGURING_DONE");
+          UHS_USB_DEBUG(RUNNING, "RUNNING");
           default:
             SERIAL_ECHOLNPGM("UHS_USB_HOST_STATE: ", task_state);
             break;

commit 54e7b933cdb6d0bf0d69fd661b585100d76e3c88
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jul 3 10:32:47 2022 -0500

    ‚ôªÔ∏è Encapsulate PID in class (#24389)

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index a681af4efa..7d698247e5 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -62,7 +62,7 @@
   #define USB_HOST_MANUAL_POLL // Optimization to shut off IRQ automatically
 
   // Workarounds to keep Marlin's watchdog timer from barking...
-  void marlin_yield() { thermalManager.manage_heater(); }
+  void marlin_yield() { thermalManager.task(); }
   #define SYSTEM_OR_SPECIAL_YIELD(...) marlin_yield();
   #define delay(x) safe_delay(x)
 

commit e4a8c693b0b3f0659ac2c324a9b60e6a93bd766e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 10 03:45:28 2022 -0500

    üé®  Misc. USB flash code cleanup

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 05671167c8..a681af4efa 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -61,10 +61,8 @@
   #define USB_NO_TEST_UNIT_READY // Required for removable media adapter
   #define USB_HOST_MANUAL_POLL // Optimization to shut off IRQ automatically
 
-  // Workarounds for keeping Marlin's watchdog timer from barking...
-  void marlin_yield() {
-    thermalManager.manage_heater();
-  }
+  // Workarounds to keep Marlin's watchdog timer from barking...
+  void marlin_yield() { thermalManager.manage_heater(); }
   #define SYSTEM_OR_SPECIAL_YIELD(...) marlin_yield();
   #define delay(x) safe_delay(x)
 
@@ -82,6 +80,7 @@
 
   #define UHS_START  (usb.Init() == 0)
   #define UHS_STATE(state) UHS_USB_HOST_STATE_##state
+
 #elif ENABLED(USE_OTG_USB_HOST)
 
   #if HAS_SD_HOST_DRIVE
@@ -93,7 +92,9 @@
   #define UHS_START usb.start()
   #define rREVISION 0
   #define UHS_STATE(state) USB_STATE_##state
+
 #else
+
   #include "lib-uhs2/Usb.h"
   #include "lib-uhs2/masstorage.h"
 
@@ -102,6 +103,7 @@
 
   #define UHS_START usb.start()
   #define UHS_STATE(state) USB_STATE_##state
+
 #endif
 
 #include "Sd2Card_FlashDrive.h"
@@ -271,11 +273,11 @@ bool DiskIODriver_USBFlash::init(const uint8_t, const pin_t) {
   if (!isInserted()) return false;
 
   #if USB_DEBUG >= 1
-  const uint32_t sectorSize = bulk.GetSectorSize(0);
-  if (sectorSize != 512) {
-    SERIAL_ECHOLNPGM("Expecting sector size of 512. Got: ", sectorSize);
-    return false;
-  }
+    const uint32_t sectorSize = bulk.GetSectorSize(0);
+    if (sectorSize != 512) {
+      SERIAL_ECHOLNPGM("Expecting sector size of 512. Got: ", sectorSize);
+      return false;
+    }
   #endif
 
   #if USB_DEBUG >= 3

commit 7f1286a11f87065c4e666985e679cf9c77d668bf
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 17:05:11 2021 -0500

    üé® Apply F() to status message

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 5991a9fb83..05671167c8 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -126,7 +126,7 @@ bool DiskIODriver_USBFlash::usbStartup() {
     SERIAL_ECHOPGM("Starting USB host...");
     if (!UHS_START) {
       SERIAL_ECHOLNPGM(" failed.");
-      LCD_MESSAGEPGM(MSG_MEDIA_USB_FAILED);
+      LCD_MESSAGE(MSG_MEDIA_USB_FAILED);
       return false;
     }
 
@@ -221,7 +221,7 @@ void DiskIODriver_USBFlash::idle() {
           #if USB_DEBUG >= 1
             SERIAL_ECHOLNPGM("Waiting for media");
           #endif
-          LCD_MESSAGEPGM(MSG_MEDIA_WAITING);
+          LCD_MESSAGE(MSG_MEDIA_WAITING);
           GOTO_STATE_AFTER_DELAY(state, 2000);
         }
         break;
@@ -236,7 +236,7 @@ void DiskIODriver_USBFlash::idle() {
         SERIAL_ECHOLNPGM("USB device removed");
       #endif
       if (state != MEDIA_READY)
-        LCD_MESSAGEPGM(MSG_MEDIA_USB_REMOVED);
+        LCD_MESSAGE(MSG_MEDIA_USB_REMOVED);
       GOTO_STATE_AFTER_DELAY(WAIT_FOR_DEVICE, 0);
     }
 
@@ -245,12 +245,12 @@ void DiskIODriver_USBFlash::idle() {
       #if USB_DEBUG >= 1
         SERIAL_ECHOLNPGM("Media removed");
       #endif
-      LCD_MESSAGEPGM(MSG_MEDIA_REMOVED);
+      LCD_MESSAGE(MSG_MEDIA_REMOVED);
       GOTO_STATE_AFTER_DELAY(WAIT_FOR_DEVICE, 0);
     }
 
     else if (task_state == UHS_STATE(ERROR)) {
-      LCD_MESSAGEPGM(MSG_MEDIA_READ_ERROR);
+      LCD_MESSAGE(MSG_MEDIA_READ_ERROR);
       GOTO_STATE_AFTER_DELAY(MEDIA_ERROR, 0);
     }
   }

commit 754b31918a73cb08c322102be5d3926d2ac59c18
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 9 04:57:05 2021 -0500

    üé® Fewer serial macros

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 1975418415..5991a9fb83 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -34,9 +34,9 @@
 #define USB_STARTUP_DELAY 0
 
 // uncomment to get 'printf' console debugging. NOT FOR UNO!
-//#define HOST_DEBUG(...)     {char s[255]; sprintf(s,__VA_ARGS__); SERIAL_ECHOLNPAIR("UHS:",s);}
-//#define BS_HOST_DEBUG(...)  {char s[255]; sprintf(s,__VA_ARGS__); SERIAL_ECHOLNPAIR("UHS:",s);}
-//#define MAX_HOST_DEBUG(...) {char s[255]; sprintf(s,__VA_ARGS__); SERIAL_ECHOLNPAIR("UHS:",s);}
+//#define HOST_DEBUG(...)     {char s[255]; sprintf(s,__VA_ARGS__); SERIAL_ECHOLNPGM("UHS:",s);}
+//#define BS_HOST_DEBUG(...)  {char s[255]; sprintf(s,__VA_ARGS__); SERIAL_ECHOLNPGM("UHS:",s);}
+//#define MAX_HOST_DEBUG(...) {char s[255]; sprintf(s,__VA_ARGS__); SERIAL_ECHOLNPGM("UHS:",s);}
 
 #if ENABLED(USB_FLASH_DRIVE_SUPPORT)
 
@@ -170,7 +170,7 @@ void DiskIODriver_USBFlash::idle() {
           UHS_USB_DEBUG(CONFIGURING_DONE);
           UHS_USB_DEBUG(RUNNING);
           default:
-            SERIAL_ECHOLNPAIR("UHS_USB_HOST_STATE: ", task_state);
+            SERIAL_ECHOLNPGM("UHS_USB_HOST_STATE: ", task_state);
             break;
         }
       }
@@ -273,14 +273,14 @@ bool DiskIODriver_USBFlash::init(const uint8_t, const pin_t) {
   #if USB_DEBUG >= 1
   const uint32_t sectorSize = bulk.GetSectorSize(0);
   if (sectorSize != 512) {
-    SERIAL_ECHOLNPAIR("Expecting sector size of 512. Got: ", sectorSize);
+    SERIAL_ECHOLNPGM("Expecting sector size of 512. Got: ", sectorSize);
     return false;
   }
   #endif
 
   #if USB_DEBUG >= 3
     lun0_capacity = bulk.GetCapacity(0);
-    SERIAL_ECHOLNPAIR("LUN Capacity (in blocks): ", lun0_capacity);
+    SERIAL_ECHOLNPGM("LUN Capacity (in blocks): ", lun0_capacity);
   #endif
   return true;
 }
@@ -299,11 +299,11 @@ bool DiskIODriver_USBFlash::readBlock(uint32_t block, uint8_t *dst) {
   if (!isInserted()) return false;
   #if USB_DEBUG >= 3
     if (block >= lun0_capacity) {
-      SERIAL_ECHOLNPAIR("Attempt to read past end of LUN: ", block);
+      SERIAL_ECHOLNPGM("Attempt to read past end of LUN: ", block);
       return false;
     }
     #if USB_DEBUG >= 4
-      SERIAL_ECHOLNPAIR("Read block ", block);
+      SERIAL_ECHOLNPGM("Read block ", block);
     #endif
   #endif
   return bulk.Read(0, block, 512, 1, dst) == 0;
@@ -313,11 +313,11 @@ bool DiskIODriver_USBFlash::writeBlock(uint32_t block, const uint8_t *src) {
   if (!isInserted()) return false;
   #if USB_DEBUG >= 3
     if (block >= lun0_capacity) {
-      SERIAL_ECHOLNPAIR("Attempt to write past end of LUN: ", block);
+      SERIAL_ECHOLNPGM("Attempt to write past end of LUN: ", block);
       return false;
     }
     #if USB_DEBUG >= 4
-      SERIAL_ECHOLNPAIR("Write block ", block);
+      SERIAL_ECHOLNPGM("Write block ", block);
     #endif
   #endif
   return bulk.Write(0, block, 512, 1, src) == 0;

commit 138340ee99a852bc116e2a436932bed074624fde
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Apr 13 19:34:19 2021 -0300

    Multi-Volume. Select Media for LVGL (#21344)

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index dc9efcb672..1975418415 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -121,7 +121,7 @@ static enum {
   uint32_t lun0_capacity;
 #endif
 
-bool Sd2Card::usbStartup() {
+bool DiskIODriver_USBFlash::usbStartup() {
   if (state <= DO_STARTUP) {
     SERIAL_ECHOPGM("Starting USB host...");
     if (!UHS_START) {
@@ -147,7 +147,7 @@ bool Sd2Card::usbStartup() {
 // the USB library to monitor for such events. This function also takes care
 // of initializing the USB library for the first time.
 
-void Sd2Card::idle() {
+void DiskIODriver_USBFlash::idle() {
   usb.Task();
 
   const uint8_t task_state = usb.getUsbTaskState();
@@ -258,16 +258,16 @@ void Sd2Card::idle() {
 
 // Marlin calls this function to check whether an USB drive is inserted.
 // This is equivalent to polling the SD_DETECT when using SD cards.
-bool Sd2Card::isInserted() {
+bool DiskIODriver_USBFlash::isInserted() {
   return state == MEDIA_READY;
 }
 
-bool Sd2Card::isReady() {
-  return state > DO_STARTUP;
+bool DiskIODriver_USBFlash::isReady() {
+  return state > DO_STARTUP && usb.getUsbTaskState() == UHS_STATE(RUNNING);
 }
 
 // Marlin calls this to initialize an SD card once it is inserted.
-bool Sd2Card::init(const uint8_t, const pin_t) {
+bool DiskIODriver_USBFlash::init(const uint8_t, const pin_t) {
   if (!isInserted()) return false;
 
   #if USB_DEBUG >= 1
@@ -286,7 +286,7 @@ bool Sd2Card::init(const uint8_t, const pin_t) {
 }
 
 // Returns the capacity of the card in blocks.
-uint32_t Sd2Card::cardSize() {
+uint32_t DiskIODriver_USBFlash::cardSize() {
   if (!isInserted()) return false;
   #if USB_DEBUG < 3
     const uint32_t
@@ -295,7 +295,7 @@ uint32_t Sd2Card::cardSize() {
   return lun0_capacity;
 }
 
-bool Sd2Card::readBlock(uint32_t block, uint8_t *dst) {
+bool DiskIODriver_USBFlash::readBlock(uint32_t block, uint8_t *dst) {
   if (!isInserted()) return false;
   #if USB_DEBUG >= 3
     if (block >= lun0_capacity) {
@@ -309,7 +309,7 @@ bool Sd2Card::readBlock(uint32_t block, uint8_t *dst) {
   return bulk.Read(0, block, 512, 1, dst) == 0;
 }
 
-bool Sd2Card::writeBlock(uint32_t block, const uint8_t *src) {
+bool DiskIODriver_USBFlash::writeBlock(uint32_t block, const uint8_t *src) {
   if (!isInserted()) return false;
   #if USB_DEBUG >= 3
     if (block >= lun0_capacity) {

commit 3b73b115ca9366f0155986b717d4c85c31ed2f80
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Mar 29 20:36:37 2021 -0500

    Apply pointer formatting

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 6dc7063122..dc9efcb672 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -295,7 +295,7 @@ uint32_t Sd2Card::cardSize() {
   return lun0_capacity;
 }
 
-bool Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
+bool Sd2Card::readBlock(uint32_t block, uint8_t *dst) {
   if (!isInserted()) return false;
   #if USB_DEBUG >= 3
     if (block >= lun0_capacity) {
@@ -309,7 +309,7 @@ bool Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
   return bulk.Read(0, block, 512, 1, dst) == 0;
 }
 
-bool Sd2Card::writeBlock(uint32_t block, const uint8_t* src) {
+bool Sd2Card::writeBlock(uint32_t block, const uint8_t *src) {
   if (!isInserted()) return false;
   #if USB_DEBUG >= 3
     if (block >= lun0_capacity) {

commit dbd28eecc9cd4b5954a4fd1ed0c02bd9788c279b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 10 12:05:05 2021 -0600

    Number serial from 1 to match settings

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index c6e3c73f52..6dc7063122 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -54,7 +54,7 @@
   #define UHS_DEVICE_WINDOWS_USB_SPEC_VIOLATION_DESCRIPTOR_DEVICE 1
   #define UHS_HOST_MAX_INTERFACE_DRIVERS 2
   #define MASS_MAX_SUPPORTED_LUN 1
-  #define USB_HOST_SERIAL MYSERIAL0
+  #define USB_HOST_SERIAL MYSERIAL1
 
   // Workaround for certain issues with UHS3
   #define SKIP_PAGE3F // Required for IOGEAR media adapter

commit c840bbc970c2684c2c9c193ee967c03dd621d99a
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Fri Jan 1 17:31:15 2021 -0300

    Prefix SD SPI pins (SCK, MISO, MOSI, SS) (#20606)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 28a18cd9d8..c6e3c73f52 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -50,7 +50,7 @@
 
 #if ENABLED(USE_UHS3_USB)
   #define NO_AUTO_SPEED
-  #define UHS_MAX3421E_SPD 8000000 >> SPI_SPEED
+  #define UHS_MAX3421E_SPD 8000000 >> SD_SPI_SPEED
   #define UHS_DEVICE_WINDOWS_USB_SPEC_VIOLATION_DESCRIPTOR_DEVICE 1
   #define UHS_HOST_MAX_INTERFACE_DRIVERS 2
   #define MASS_MAX_SUPPORTED_LUN 1

commit 84ab088b4093c997d3a3e005ca90bfd756839299
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Dec 29 02:16:38 2020 -0300

    USB FD via native USB Host + MSC (#20571)

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 539d316542..28a18cd9d8 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -44,8 +44,9 @@
 #include "../../core/serial.h"
 #include "../../module/temperature.h"
 
-static_assert(USB_CS_PIN   != -1, "USB_CS_PIN must be defined");
-static_assert(USB_INTR_PIN != -1, "USB_INTR_PIN must be defined");
+#if DISABLED(USE_OTG_USB_HOST) && !PINS_EXIST(USB_CS, USB_INTR)
+  #error "USB_FLASH_DRIVE_SUPPORT requires USB_CS_PIN and USB_INTR_PIN to be defined."
+#endif
 
 #if ENABLED(USE_UHS3_USB)
   #define NO_AUTO_SPEED
@@ -81,6 +82,17 @@ static_assert(USB_INTR_PIN != -1, "USB_INTR_PIN must be defined");
 
   #define UHS_START  (usb.Init() == 0)
   #define UHS_STATE(state) UHS_USB_HOST_STATE_##state
+#elif ENABLED(USE_OTG_USB_HOST)
+
+  #if HAS_SD_HOST_DRIVE
+    #include HAL_PATH(../../HAL, msc_sd.h)
+  #endif
+
+  #include HAL_PATH(../../HAL, usb_host.h)
+
+  #define UHS_START usb.start()
+  #define rREVISION 0
+  #define UHS_STATE(state) USB_STATE_##state
 #else
   #include "lib-uhs2/Usb.h"
   #include "lib-uhs2/masstorage.h"
@@ -250,7 +262,7 @@ bool Sd2Card::isInserted() {
   return state == MEDIA_READY;
 }
 
-bool Sd2Card::ready() {
+bool Sd2Card::isReady() {
   return state > DO_STARTUP;
 }
 

commit eaf6777a6643a6fab23ceaaa4699cb2466ea6b83
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 16 19:36:25 2020 -0500

    Rename ultralcd => marlinui

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index a097df5105..539d316542 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -94,7 +94,7 @@ static_assert(USB_INTR_PIN != -1, "USB_INTR_PIN must be defined");
 
 #include "Sd2Card_FlashDrive.h"
 
-#include "../../lcd/ultralcd.h"
+#include "../../lcd/marlinui.h"
 
 static enum {
   UNINITIALIZED,

commit a445746a8b6dd752de725eb67d264153c3b393d7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Sep 6 21:40:58 2020 -0500

    Clean up LCD conditionals, DWIN

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 78f338fdae..a097df5105 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -94,9 +94,7 @@ static_assert(USB_INTR_PIN != -1, "USB_INTR_PIN must be defined");
 
 #include "Sd2Card_FlashDrive.h"
 
-#if HAS_DISPLAY
-  #include "../../lcd/ultralcd.h"
-#endif
+#include "../../lcd/ultralcd.h"
 
 static enum {
   UNINITIALIZED,
@@ -116,9 +114,7 @@ bool Sd2Card::usbStartup() {
     SERIAL_ECHOPGM("Starting USB host...");
     if (!UHS_START) {
       SERIAL_ECHOLNPGM(" failed.");
-      #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
-        LCD_MESSAGEPGM(MSG_MEDIA_USB_FAILED);
-      #endif
+      LCD_MESSAGEPGM(MSG_MEDIA_USB_FAILED);
       return false;
     }
 
@@ -213,9 +209,7 @@ void Sd2Card::idle() {
           #if USB_DEBUG >= 1
             SERIAL_ECHOLNPGM("Waiting for media");
           #endif
-          #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
-            LCD_MESSAGEPGM(MSG_MEDIA_WAITING);
-          #endif
+          LCD_MESSAGEPGM(MSG_MEDIA_WAITING);
           GOTO_STATE_AFTER_DELAY(state, 2000);
         }
         break;
@@ -229,11 +223,9 @@ void Sd2Card::idle() {
       #if USB_DEBUG >= 1
         SERIAL_ECHOLNPGM("USB device removed");
       #endif
-      #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
-        if (state != MEDIA_READY)
-          LCD_MESSAGEPGM(MSG_MEDIA_USB_REMOVED);
-      #endif
-      GOTO_STATE_AFTER_DELAY( WAIT_FOR_DEVICE, 0 );
+      if (state != MEDIA_READY)
+        LCD_MESSAGEPGM(MSG_MEDIA_USB_REMOVED);
+      GOTO_STATE_AFTER_DELAY(WAIT_FOR_DEVICE, 0);
     }
 
     else if (state > WAIT_FOR_LUN && !bulk.LUNIsGood(0)) {
@@ -241,17 +233,13 @@ void Sd2Card::idle() {
       #if USB_DEBUG >= 1
         SERIAL_ECHOLNPGM("Media removed");
       #endif
-      #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
-        LCD_MESSAGEPGM(MSG_MEDIA_REMOVED);
-      #endif
-      GOTO_STATE_AFTER_DELAY( WAIT_FOR_DEVICE, 0 );
+      LCD_MESSAGEPGM(MSG_MEDIA_REMOVED);
+      GOTO_STATE_AFTER_DELAY(WAIT_FOR_DEVICE, 0);
     }
 
     else if (task_state == UHS_STATE(ERROR)) {
-        #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
-          LCD_MESSAGEPGM(MSG_MEDIA_READ_ERROR);
-        #endif
-        GOTO_STATE_AFTER_DELAY( MEDIA_ERROR, 0 );
+      LCD_MESSAGEPGM(MSG_MEDIA_READ_ERROR);
+      GOTO_STATE_AFTER_DELAY(MEDIA_ERROR, 0);
     }
   }
 }

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index c132b4a3b6..78f338fdae 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 2d75e75d4c..c132b4a3b6 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit d0e1166cce60381fbdad1105d13765806a525d99
Author: Dirk O. Kaar <19971886+dok-net@users.noreply.github.com>
Date:   Fri Jan 3 02:01:38 2020 +0100

    Fix Visual Micro "Arduino IDE for Visual Studio" support (#16418)

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 12f02c19f0..2d75e75d4c 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -40,7 +40,7 @@
 
 #if ENABLED(USB_FLASH_DRIVE_SUPPORT)
 
-#include "../../Marlin.h"
+#include "../../MarlinCore.h"
 #include "../../core/serial.h"
 #include "../../module/temperature.h"
 

commit 068c303742dc9df785bce68eda858dc72bd6e55c
Author: Ludy <Ludy87@users.noreply.github.com>
Date:   Sun Sep 8 07:15:25 2019 +0200

    More translatable LCD strings (#15190)

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index a50d874eb0..12f02c19f0 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -117,7 +117,7 @@ bool Sd2Card::usbStartup() {
     if (!UHS_START) {
       SERIAL_ECHOLNPGM(" failed.");
       #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
-        LCD_MESSAGEPGM("USB start failed");
+        LCD_MESSAGEPGM(MSG_MEDIA_USB_FAILED);
       #endif
       return false;
     }
@@ -214,7 +214,7 @@ void Sd2Card::idle() {
             SERIAL_ECHOLNPGM("Waiting for media");
           #endif
           #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
-            LCD_MESSAGEPGM("Waiting for media");
+            LCD_MESSAGEPGM(MSG_MEDIA_WAITING);
           #endif
           GOTO_STATE_AFTER_DELAY(state, 2000);
         }
@@ -231,7 +231,7 @@ void Sd2Card::idle() {
       #endif
       #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
         if (state != MEDIA_READY)
-          LCD_MESSAGEPGM("USB device removed");
+          LCD_MESSAGEPGM(MSG_MEDIA_USB_REMOVED);
       #endif
       GOTO_STATE_AFTER_DELAY( WAIT_FOR_DEVICE, 0 );
     }
@@ -242,14 +242,14 @@ void Sd2Card::idle() {
         SERIAL_ECHOLNPGM("Media removed");
       #endif
       #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
-        LCD_MESSAGEPGM("Media removed");
+        LCD_MESSAGEPGM(MSG_MEDIA_REMOVED);
       #endif
       GOTO_STATE_AFTER_DELAY( WAIT_FOR_DEVICE, 0 );
     }
 
     else if (task_state == UHS_STATE(ERROR)) {
         #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
-          LCD_MESSAGEPGM("Media read error");
+          LCD_MESSAGEPGM(MSG_MEDIA_READ_ERROR);
         #endif
         GOTO_STATE_AFTER_DELAY( MEDIA_ERROR, 0 );
     }

commit da601d5114e5d43ff3b9d9b73d2ef2c10a2dc9d2
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Sat Aug 24 00:47:19 2019 -0600

    Update USB_FLASH_DRIVE_SUPPORT (#15021)

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index d63a2b9f0f..a50d874eb0 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -22,12 +22,75 @@
 
 #include "../../inc/MarlinConfigPre.h"
 
+/**
+ * Adjust USB_DEBUG to select debugging verbosity.
+ *    0 - no debug messages
+ *    1 - basic insertion/removal messages
+ *    2 - show USB state transitions
+ *    3 - perform block range checking
+ *    4 - print each block access
+ */
+#define USB_DEBUG         1
+#define USB_STARTUP_DELAY 0
+
+// uncomment to get 'printf' console debugging. NOT FOR UNO!
+//#define HOST_DEBUG(...)     {char s[255]; sprintf(s,__VA_ARGS__); SERIAL_ECHOLNPAIR("UHS:",s);}
+//#define BS_HOST_DEBUG(...)  {char s[255]; sprintf(s,__VA_ARGS__); SERIAL_ECHOLNPAIR("UHS:",s);}
+//#define MAX_HOST_DEBUG(...) {char s[255]; sprintf(s,__VA_ARGS__); SERIAL_ECHOLNPAIR("UHS:",s);}
+
 #if ENABLED(USB_FLASH_DRIVE_SUPPORT)
 
+#include "../../Marlin.h"
 #include "../../core/serial.h"
+#include "../../module/temperature.h"
+
+static_assert(USB_CS_PIN   != -1, "USB_CS_PIN must be defined");
+static_assert(USB_INTR_PIN != -1, "USB_INTR_PIN must be defined");
+
+#if ENABLED(USE_UHS3_USB)
+  #define NO_AUTO_SPEED
+  #define UHS_MAX3421E_SPD 8000000 >> SPI_SPEED
+  #define UHS_DEVICE_WINDOWS_USB_SPEC_VIOLATION_DESCRIPTOR_DEVICE 1
+  #define UHS_HOST_MAX_INTERFACE_DRIVERS 2
+  #define MASS_MAX_SUPPORTED_LUN 1
+  #define USB_HOST_SERIAL MYSERIAL0
+
+  // Workaround for certain issues with UHS3
+  #define SKIP_PAGE3F // Required for IOGEAR media adapter
+  #define USB_NO_TEST_UNIT_READY // Required for removable media adapter
+  #define USB_HOST_MANUAL_POLL // Optimization to shut off IRQ automatically
+
+  // Workarounds for keeping Marlin's watchdog timer from barking...
+  void marlin_yield() {
+    thermalManager.manage_heater();
+  }
+  #define SYSTEM_OR_SPECIAL_YIELD(...) marlin_yield();
+  #define delay(x) safe_delay(x)
+
+  #define LOAD_USB_HOST_SYSTEM
+  #define LOAD_USB_HOST_SHIELD
+  #define LOAD_UHS_BULK_STORAGE
+
+  #define MARLIN_UHS_WRITE_SS(v) WRITE(USB_CS_PIN, v)
+  #define MARLIN_UHS_READ_IRQ()  READ(USB_INTR_PIN)
+
+  #include "lib-uhs3/UHS_host/UHS_host.h"
+
+  MAX3421E_HOST usb(USB_CS_PIN, USB_INTR_PIN);
+  UHS_Bulk_Storage bulk(&usb);
+
+  #define UHS_START  (usb.Init() == 0)
+  #define UHS_STATE(state) UHS_USB_HOST_STATE_##state
+#else
+  #include "lib-uhs2/Usb.h"
+  #include "lib-uhs2/masstorage.h"
 
-#include "lib/Usb.h"
-#include "lib/masstorage.h"
+  USB usb;
+  BulkOnly bulk(&usb);
+
+  #define UHS_START usb.start()
+  #define UHS_STATE(state) USB_STATE_##state
+#endif
 
 #include "Sd2Card_FlashDrive.h"
 
@@ -35,10 +98,41 @@
   #include "../../lcd/ultralcd.h"
 #endif
 
-USB usb;
-BulkOnly bulk(&usb);
+static enum {
+  UNINITIALIZED,
+  DO_STARTUP,
+  WAIT_FOR_DEVICE,
+  WAIT_FOR_LUN,
+  MEDIA_READY,
+  MEDIA_ERROR
+} state;
+
+#if USB_DEBUG >= 3
+  uint32_t lun0_capacity;
+#endif
+
+bool Sd2Card::usbStartup() {
+  if (state <= DO_STARTUP) {
+    SERIAL_ECHOPGM("Starting USB host...");
+    if (!UHS_START) {
+      SERIAL_ECHOLNPGM(" failed.");
+      #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
+        LCD_MESSAGEPGM("USB start failed");
+      #endif
+      return false;
+    }
 
-Sd2Card::state_t Sd2Card::state;
+    // SPI quick test - check revision register
+    switch (usb.regRd(rREVISION)) {
+      case 0x01: SERIAL_ECHOLNPGM("rev.01 started"); break;
+      case 0x12: SERIAL_ECHOLNPGM("rev.02 started"); break;
+      case 0x13: SERIAL_ECHOLNPGM("rev.03 started"); break;
+      default:   SERIAL_ECHOLNPGM("started. rev unknown."); break;
+    }
+    state = WAIT_FOR_DEVICE;
+  }
+  return true;
+}
 
 // The USB library needs to be called periodically to detect USB thumbdrive
 // insertion and removals. Call this idle() function periodically to allow
@@ -46,75 +140,145 @@ Sd2Card::state_t Sd2Card::state;
 // of initializing the USB library for the first time.
 
 void Sd2Card::idle() {
-  static uint32_t next_retry;
-
-  switch (state) {
-    case USB_HOST_DELAY_INIT:
-      next_retry = millis() + 2000;
-      state = USB_HOST_WAITING;
-      break;
-    case USB_HOST_WAITING:
-      if (ELAPSED(millis(), next_retry)) {
-        next_retry = millis() + 2000;
-        state = USB_HOST_UNINITIALIZED;
-      }
-      break;
-    case USB_HOST_UNINITIALIZED:
-      SERIAL_ECHOPGM("Starting USB host...");
-      if (!usb.start()) {
-        SERIAL_ECHOPGM(" Failed. Retrying in 2s.");
-        #if HAS_DISPLAY
-          LCD_MESSAGEPGM("USB start failed");
-        #endif
-        state = USB_HOST_DELAY_INIT;
+  usb.Task();
+
+  const uint8_t task_state = usb.getUsbTaskState();
+
+  #if USB_DEBUG >= 2
+    if (state > DO_STARTUP) {
+      static uint8_t laststate = 232;
+      if (task_state != laststate) {
+        laststate = task_state;
+        #define UHS_USB_DEBUG(x) case UHS_STATE(x): SERIAL_ECHOLNPGM(#x); break
+        switch (task_state) {
+          UHS_USB_DEBUG(IDLE);
+          UHS_USB_DEBUG(RESET_DEVICE);
+          UHS_USB_DEBUG(RESET_NOT_COMPLETE);
+          UHS_USB_DEBUG(DEBOUNCE);
+          UHS_USB_DEBUG(DEBOUNCE_NOT_COMPLETE);
+          UHS_USB_DEBUG(WAIT_SOF);
+          UHS_USB_DEBUG(ERROR);
+          UHS_USB_DEBUG(CONFIGURING);
+          UHS_USB_DEBUG(CONFIGURING_DONE);
+          UHS_USB_DEBUG(RUNNING);
+          default:
+            SERIAL_ECHOLNPAIR("UHS_USB_HOST_STATE: ", task_state);
+            break;
+        }
       }
-      else
-        state = USB_HOST_INITIALIZED;
-      SERIAL_EOL();
-      break;
-    case USB_HOST_INITIALIZED:
-      const uint8_t lastUsbTaskState = usb.getUsbTaskState();
-      usb.Task();
-      const uint8_t newUsbTaskState  = usb.getUsbTaskState();
-
-      if (lastUsbTaskState == USB_STATE_RUNNING && newUsbTaskState != USB_STATE_RUNNING) {
-        // the user pulled the flash drive. Make sure the bulk storage driver releases the address
-        #ifdef USB_DEBUG
-          SERIAL_ECHOLNPGM("USB drive removed");
+    }
+  #endif
+
+  static millis_t next_state_ms = millis();
+
+  #define GOTO_STATE_AFTER_DELAY(STATE, DELAY) do{ state = STATE; next_state_ms  = millis() + DELAY; }while(0)
+
+  if (ELAPSED(millis(), next_state_ms)) {
+    GOTO_STATE_AFTER_DELAY(state, 250); // Default delay
+
+    switch (state) {
+
+      case UNINITIALIZED:
+        #ifndef MANUAL_USB_STARTUP
+          GOTO_STATE_AFTER_DELAY( DO_STARTUP, USB_STARTUP_DELAY );
         #endif
-        //bulk.Release();
-      }
-      if (lastUsbTaskState != USB_STATE_RUNNING && newUsbTaskState == USB_STATE_RUNNING) {
-        #ifdef USB_DEBUG
-          SERIAL_ECHOLNPGM("USB drive inserted");
+        break;
+
+      case DO_STARTUP: usbStartup(); break;
+
+      case WAIT_FOR_DEVICE:
+        if (task_state == UHS_STATE(RUNNING)) {
+          #if USB_DEBUG >= 1
+            SERIAL_ECHOLNPGM("USB device inserted");
+          #endif
+          GOTO_STATE_AFTER_DELAY( WAIT_FOR_LUN, 250 );
+        }
+        break;
+
+      case WAIT_FOR_LUN:
+        /* USB device is inserted, but if it is an SD card,
+         * adapter it may not have an SD card in it yet. */
+        if (bulk.LUNIsGood(0)) {
+          #if USB_DEBUG >= 1
+            SERIAL_ECHOLNPGM("LUN is good");
+          #endif
+          GOTO_STATE_AFTER_DELAY( MEDIA_READY, 100 );
+        }
+        else {
+          #ifdef USB_HOST_MANUAL_POLL
+            // Make sure we catch disconnect events
+            usb.busprobe();
+            usb.VBUS_changed();
+          #endif
+          #if USB_DEBUG >= 1
+            SERIAL_ECHOLNPGM("Waiting for media");
+          #endif
+          #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
+            LCD_MESSAGEPGM("Waiting for media");
+          #endif
+          GOTO_STATE_AFTER_DELAY(state, 2000);
+        }
+        break;
+
+      case MEDIA_READY: break;
+      case MEDIA_ERROR: break;
+    }
+
+    if (state > WAIT_FOR_DEVICE && task_state != UHS_STATE(RUNNING)) {
+      // Handle device removal events
+      #if USB_DEBUG >= 1
+        SERIAL_ECHOLNPGM("USB device removed");
+      #endif
+      #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
+        if (state != MEDIA_READY)
+          LCD_MESSAGEPGM("USB device removed");
+      #endif
+      GOTO_STATE_AFTER_DELAY( WAIT_FOR_DEVICE, 0 );
+    }
+
+    else if (state > WAIT_FOR_LUN && !bulk.LUNIsGood(0)) {
+      // Handle media removal events
+      #if USB_DEBUG >= 1
+        SERIAL_ECHOLNPGM("Media removed");
+      #endif
+      #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
+        LCD_MESSAGEPGM("Media removed");
+      #endif
+      GOTO_STATE_AFTER_DELAY( WAIT_FOR_DEVICE, 0 );
+    }
+
+    else if (task_state == UHS_STATE(ERROR)) {
+        #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
+          LCD_MESSAGEPGM("Media read error");
         #endif
-      }
-      break;
+        GOTO_STATE_AFTER_DELAY( MEDIA_ERROR, 0 );
+    }
   }
 }
 
 // Marlin calls this function to check whether an USB drive is inserted.
 // This is equivalent to polling the SD_DETECT when using SD cards.
 bool Sd2Card::isInserted() {
-  return usb.getUsbTaskState() == USB_STATE_RUNNING;
+  return state == MEDIA_READY;
 }
 
-// Marlin calls this to initialize an SD card once it is inserted.
-bool Sd2Card::init(const uint8_t sckRateID/*=0*/, const pin_t chipSelectPin/*=SD_CHIP_SELECT_PIN*/) {
-  if (!ready()) return false;
+bool Sd2Card::ready() {
+  return state > DO_STARTUP;
+}
 
-  if (!bulk.LUNIsGood(0)) {
-    SERIAL_ECHOLNPGM("LUN zero is not good");
-    return false;
-  }
+// Marlin calls this to initialize an SD card once it is inserted.
+bool Sd2Card::init(const uint8_t, const pin_t) {
+  if (!isInserted()) return false;
 
+  #if USB_DEBUG >= 1
   const uint32_t sectorSize = bulk.GetSectorSize(0);
   if (sectorSize != 512) {
     SERIAL_ECHOLNPAIR("Expecting sector size of 512. Got: ", sectorSize);
     return false;
   }
+  #endif
 
-  #ifdef USB_DEBUG
+  #if USB_DEBUG >= 3
     lun0_capacity = bulk.GetCapacity(0);
     SERIAL_ECHOLNPAIR("LUN Capacity (in blocks): ", lun0_capacity);
   #endif
@@ -123,8 +287,8 @@ bool Sd2Card::init(const uint8_t sckRateID/*=0*/, const pin_t chipSelectPin/*=SD
 
 // Returns the capacity of the card in blocks.
 uint32_t Sd2Card::cardSize() {
-  if (!ready()) return 0;
-  #ifndef USB_DEBUG
+  if (!isInserted()) return false;
+  #if USB_DEBUG < 3
     const uint32_t
   #endif
       lun0_capacity = bulk.GetCapacity(0);
@@ -132,13 +296,13 @@ uint32_t Sd2Card::cardSize() {
 }
 
 bool Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
-  if (!ready()) return false;
-  #ifdef USB_DEBUG
+  if (!isInserted()) return false;
+  #if USB_DEBUG >= 3
     if (block >= lun0_capacity) {
       SERIAL_ECHOLNPAIR("Attempt to read past end of LUN: ", block);
       return false;
     }
-    #if USB_DEBUG > 1
+    #if USB_DEBUG >= 4
       SERIAL_ECHOLNPAIR("Read block ", block);
     #endif
   #endif
@@ -146,13 +310,13 @@ bool Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
 }
 
 bool Sd2Card::writeBlock(uint32_t block, const uint8_t* src) {
-  if (!ready()) return false;
-  #ifdef USB_DEBUG
+  if (!isInserted()) return false;
+  #if USB_DEBUG >= 3
     if (block >= lun0_capacity) {
       SERIAL_ECHOLNPAIR("Attempt to write past end of LUN: ", block);
       return false;
     }
-    #if USB_DEBUG > 1
+    #if USB_DEBUG >= 4
       SERIAL_ECHOLNPAIR("Write block ", block);
     #endif
   #endif

commit 27c487bab744a22aeb580a0471591adba040bc68
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Wed Jul 17 02:12:39 2019 -0600

    Print progress enhancements (#14647)

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 05cc1fd855..d63a2b9f0f 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -31,7 +31,7 @@
 
 #include "Sd2Card_FlashDrive.h"
 
-#if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
+#if HAS_DISPLAY
   #include "../../lcd/ultralcd.h"
 #endif
 
@@ -63,7 +63,7 @@ void Sd2Card::idle() {
       SERIAL_ECHOPGM("Starting USB host...");
       if (!usb.start()) {
         SERIAL_ECHOPGM(" Failed. Retrying in 2s.");
-        #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
+        #if HAS_DISPLAY
           LCD_MESSAGEPGM("USB start failed");
         #endif
         state = USB_HOST_DELAY_INIT;

commit 70586d3a6c0d9318e92dbe7fac26790120acb6a6
Author: Ludy <Ludy87@users.noreply.github.com>
Date:   Thu Jul 11 20:48:15 2019 +0200

    Update (c) comments (#14584)

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 8de27cb319..05cc1fd855 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit 49cf92dc36424cf828436f32e72263eca39a1cc3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 16 23:43:06 2019 -0500

    Extended condition macros (#13419)
    
    Allow `ENABLED`, `DISABLED`, `PIN_EXISTS`, and `BUTTON_EXISTS` to take multiple arguments. Also add:
    - Alias `ANY(...)` for `!DISABLED(...)`
    - Alias `ANY_PIN(...)` for `PIN_EXISTS(a) || PIN_EXISTS(b) ...`
    - Alias `EITHER(A,B)` for `ANY(...)`
    - Alias `ALL(...)` and `BOTH(A,B)` for `ENABLED(...)`
    - `NONE(...)` for `DISABLED(...)`

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 9a98797f5f..8de27cb319 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -31,7 +31,7 @@
 
 #include "Sd2Card_FlashDrive.h"
 
-#if ENABLED(ULTRA_LCD) || ENABLED(EXTENSIBLE_UI)
+#if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
   #include "../../lcd/ultralcd.h"
 #endif
 
@@ -63,7 +63,7 @@ void Sd2Card::idle() {
       SERIAL_ECHOPGM("Starting USB host...");
       if (!usb.start()) {
         SERIAL_ECHOPGM(" Failed. Retrying in 2s.");
-        #if ENABLED(ULTRA_LCD) || ENABLED(EXTENSIBLE_UI)
+        #if EITHER(ULTRA_LCD, EXTENSIBLE_UI)
           LCD_MESSAGEPGM("USB start failed");
         #endif
         state = USB_HOST_DELAY_INIT;

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 38762b6448..9a98797f5f 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm

commit ce563d7c2e1f61dfb76f3f14e125b4f74f6d41fe
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Jan 19 16:56:12 2019 -0600

    Various general cleanups
    
    Mostly from the L6470-oriented PR

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 6cf6dd8c3b..38762b6448 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -110,7 +110,7 @@ bool Sd2Card::init(const uint8_t sckRateID/*=0*/, const pin_t chipSelectPin/*=SD
 
   const uint32_t sectorSize = bulk.GetSectorSize(0);
   if (sectorSize != 512) {
-    SERIAL_ECHOLNPAIR("Expecting sector size of 512, got:", sectorSize);
+    SERIAL_ECHOLNPAIR("Expecting sector size of 512. Got: ", sectorSize);
     return false;
   }
 

commit 60cb36bef3644640f2eb1c9d2b30189e41e81ef2
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Tue Jan 1 14:17:48 2019 -0700

    Misc. improvements (#12747)
    
    * Make ExtUI respect MAXTEMP limits
      - Temperatures are now clamped by MAXTEMP limits rather than arbitrary values.
    * Speed up USB init, add status
      - Speed up USB initialization
      - Show status message if init failed
    * Enable status messages for EXTENSIBLE_UI
    * Adjust max limit to MAX_TEMP - 15
    * Misc. tweaks to formatting, const, etc.

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index f4fda4b3c9..6cf6dd8c3b 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -31,6 +31,10 @@
 
 #include "Sd2Card_FlashDrive.h"
 
+#if ENABLED(ULTRA_LCD) || ENABLED(EXTENSIBLE_UI)
+  #include "../../lcd/ultralcd.h"
+#endif
+
 USB usb;
 BulkOnly bulk(&usb);
 
@@ -46,25 +50,27 @@ void Sd2Card::idle() {
 
   switch (state) {
     case USB_HOST_DELAY_INIT:
-      next_retry = millis() + 10000;
+      next_retry = millis() + 2000;
       state = USB_HOST_WAITING;
       break;
     case USB_HOST_WAITING:
       if (ELAPSED(millis(), next_retry)) {
-        next_retry = millis() + 10000;
+        next_retry = millis() + 2000;
         state = USB_HOST_UNINITIALIZED;
       }
       break;
     case USB_HOST_UNINITIALIZED:
-      SERIAL_ECHOLNPGM("Starting USB host");
+      SERIAL_ECHOPGM("Starting USB host...");
       if (!usb.start()) {
-        SERIAL_ECHOLNPGM("USB host failed to start. Will retry in 10 seconds.");
+        SERIAL_ECHOPGM(" Failed. Retrying in 2s.");
+        #if ENABLED(ULTRA_LCD) || ENABLED(EXTENSIBLE_UI)
+          LCD_MESSAGEPGM("USB start failed");
+        #endif
         state = USB_HOST_DELAY_INIT;
       }
-      else {
-        SERIAL_ECHOLNPGM("USB host initialized");
+      else
         state = USB_HOST_INITIALIZED;
-      }
+      SERIAL_EOL();
       break;
     case USB_HOST_INITIALIZED:
       const uint8_t lastUsbTaskState = usb.getUsbTaskState();
@@ -91,10 +97,10 @@ void Sd2Card::idle() {
 // This is equivalent to polling the SD_DETECT when using SD cards.
 bool Sd2Card::isInserted() {
   return usb.getUsbTaskState() == USB_STATE_RUNNING;
-};
+}
 
 // Marlin calls this to initialize an SD card once it is inserted.
-bool Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
+bool Sd2Card::init(const uint8_t sckRateID/*=0*/, const pin_t chipSelectPin/*=SD_CHIP_SELECT_PIN*/) {
   if (!ready()) return false;
 
   if (!bulk.LUNIsGood(0)) {
@@ -121,7 +127,7 @@ uint32_t Sd2Card::cardSize() {
   #ifndef USB_DEBUG
     const uint32_t
   #endif
-  lun0_capacity = bulk.GetCapacity(0);
+      lun0_capacity = bulk.GetCapacity(0);
   return lun0_capacity;
 }
 

commit 44369d536a658a7ab5c75f33646ab170a5250825
Author: Ludy <Ludy87@users.noreply.github.com>
Date:   Sun Oct 21 06:21:27 2018 +0200

    Use millis_t where needed (#12152)

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index db827344fc..f4fda4b3c9 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -50,7 +50,7 @@ void Sd2Card::idle() {
       state = USB_HOST_WAITING;
       break;
     case USB_HOST_WAITING:
-      if (millis() > next_retry) {
+      if (ELAPSED(millis(), next_retry)) {
         next_retry = millis() + 10000;
         state = USB_HOST_UNINITIALIZED;
       }

commit 71e19baf691a5252841cca5871a29d7a65b62e5f
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Thu Oct 18 20:20:56 2018 -0600

    Fix kill => disable_all_heaters => print_job_timer.stop (#12146)
    
    - Remove `print_job_timer.stop()` from `disable_all_heaters`
    - Call `print_job_timer.stop()` for relevant `disable_all_heaters()`.
    - Split up `kill()` for watchdog interrupt safety

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 94821463ad..db827344fc 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -38,7 +38,7 @@ Sd2Card::state_t Sd2Card::state;
 
 // The USB library needs to be called periodically to detect USB thumbdrive
 // insertion and removals. Call this idle() function periodically to allow
-// the USB libary to monitor for such events. This function also takes care
+// the USB library to monitor for such events. This function also takes care
 // of initializing the USB library for the first time.
 
 void Sd2Card::idle() {

commit 5b7dd553d3543d2e1a9305eca6060e35fe2fbed9
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Thu Oct 18 10:34:07 2018 -0600

    Fix sd_mmc_spi_mem capacity; clean up USB code (#12134)
    
    - Fix an error in the return value of `sd_mmc_spi_read_capacity` which was causing the host OS to read beyond the last sector in the card.
    - Clean up the USB flashdrive code and add better debugging.

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
index 369b3d38d4..94821463ad 100644
--- a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -24,49 +24,22 @@
 
 #if ENABLED(USB_FLASH_DRIVE_SUPPORT)
 
+#include "../../core/serial.h"
+
 #include "lib/Usb.h"
 #include "lib/masstorage.h"
 
 #include "Sd2Card_FlashDrive.h"
 
-#include <SPI.h>
-
-#include "../../core/serial.h"
-
 USB usb;
 BulkOnly bulk(&usb);
 
 Sd2Card::state_t Sd2Card::state;
-uint32_t         Sd2Card::block;
-
-bool Sd2Card::usbHostReady() {
-  return state == USB_HOST_INITIALIZED;
-}
-
-bool Sd2Card::isInserted() {
-  return usb.getUsbTaskState() == USB_STATE_RUNNING;
-}
-
-// Marlin calls this whenever an SD card is detected, so this method
-// should not be used to initialize the USB host library
-bool Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
-  if (!usbHostReady()) return false;
 
-  if (!bulk.LUNIsGood(0)) {
-    SERIAL_ECHOLNPGM("LUN zero is not good\n");
-    return false;
-  }
-
-  SERIAL_ECHOLNPAIR("LUN Capacity: ",bulk.GetCapacity(0));
-
-  const uint32_t sectorSize = bulk.GetSectorSize(0);
-  if (sectorSize != 512) {
-    SERIAL_ECHOLNPAIR("Expecting sector size of 512, got: ",sectorSize);
-    return false;
-  }
-
-  return true;
-}
+// The USB library needs to be called periodically to detect USB thumbdrive
+// insertion and removals. Call this idle() function periodically to allow
+// the USB libary to monitor for such events. This function also takes care
+// of initializing the USB library for the first time.
 
 void Sd2Card::idle() {
   static uint32_t next_retry;
@@ -100,60 +73,84 @@ void Sd2Card::idle() {
 
       if (lastUsbTaskState == USB_STATE_RUNNING && newUsbTaskState != USB_STATE_RUNNING) {
         // the user pulled the flash drive. Make sure the bulk storage driver releases the address
-        SERIAL_ECHOLNPGM("Drive removed\n");
+        #ifdef USB_DEBUG
+          SERIAL_ECHOLNPGM("USB drive removed");
+        #endif
         //bulk.Release();
       }
-      if (lastUsbTaskState != USB_STATE_RUNNING && newUsbTaskState == USB_STATE_RUNNING)
-        SERIAL_ECHOLNPGM("Drive inserted\n");
+      if (lastUsbTaskState != USB_STATE_RUNNING && newUsbTaskState == USB_STATE_RUNNING) {
+        #ifdef USB_DEBUG
+          SERIAL_ECHOLNPGM("USB drive inserted");
+        #endif
+      }
       break;
   }
 }
 
-uint32_t Sd2Card::cardSize() {
-  if (!usbHostReady()) return 0;
-  return bulk.GetCapacity(0);
-}
-
-bool Sd2Card::readData(uint8_t* dst) {
-  return readBlock(block++, dst);
-}
+// Marlin calls this function to check whether an USB drive is inserted.
+// This is equivalent to polling the SD_DETECT when using SD cards.
+bool Sd2Card::isInserted() {
+  return usb.getUsbTaskState() == USB_STATE_RUNNING;
+};
 
-bool Sd2Card::readStart(uint32_t blockNumber) {
-  block = blockNumber;
-  return true;
-}
+// Marlin calls this to initialize an SD card once it is inserted.
+bool Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
+  if (!ready()) return false;
 
-bool Sd2Card::readStop() {
-  return usbHostReady();
-}
+  if (!bulk.LUNIsGood(0)) {
+    SERIAL_ECHOLNPGM("LUN zero is not good");
+    return false;
+  }
 
-bool Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
-  if (!usbHostReady()) {
-    SERIAL_ECHOLNPGM("Read from uninitalized USB host");
+  const uint32_t sectorSize = bulk.GetSectorSize(0);
+  if (sectorSize != 512) {
+    SERIAL_ECHOLNPAIR("Expecting sector size of 512, got:", sectorSize);
     return false;
   }
-  return bulk.Read(0, block, 512, 1, dst) == 0;
-}
 
-bool Sd2Card::writeData(const uint8_t* src) {
-  return writeBlock(block++, src);
+  #ifdef USB_DEBUG
+    lun0_capacity = bulk.GetCapacity(0);
+    SERIAL_ECHOLNPAIR("LUN Capacity (in blocks): ", lun0_capacity);
+  #endif
+  return true;
 }
 
-bool Sd2Card::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
-  block = blockNumber;
-  return true;
+// Returns the capacity of the card in blocks.
+uint32_t Sd2Card::cardSize() {
+  if (!ready()) return 0;
+  #ifndef USB_DEBUG
+    const uint32_t
+  #endif
+  lun0_capacity = bulk.GetCapacity(0);
+  return lun0_capacity;
 }
 
-bool Sd2Card::writeStop() {
-  return usbHostReady();
+bool Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
+  if (!ready()) return false;
+  #ifdef USB_DEBUG
+    if (block >= lun0_capacity) {
+      SERIAL_ECHOLNPAIR("Attempt to read past end of LUN: ", block);
+      return false;
+    }
+    #if USB_DEBUG > 1
+      SERIAL_ECHOLNPAIR("Read block ", block);
+    #endif
+  #endif
+  return bulk.Read(0, block, 512, 1, dst) == 0;
 }
 
-bool Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
-  if (!usbHostReady()) {
-    SERIAL_ECHOLNPGM("Write to uninitalized USB host");
-    return false;
-  }
-  return bulk.Write(0, blockNumber, 512, 1, src) == 0;
+bool Sd2Card::writeBlock(uint32_t block, const uint8_t* src) {
+  if (!ready()) return false;
+  #ifdef USB_DEBUG
+    if (block >= lun0_capacity) {
+      SERIAL_ECHOLNPAIR("Attempt to write past end of LUN: ", block);
+      return false;
+    }
+    #if USB_DEBUG > 1
+      SERIAL_ECHOLNPAIR("Write block ", block);
+    #endif
+  #endif
+  return bulk.Write(0, block, 512, 1, src) == 0;
 }
 
 #endif // USB_FLASH_DRIVE_SUPPORT

commit 2067619a269f2b4a6e52fdcb1f968e48b952a7d1
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Mon Jul 2 09:06:17 2018 -0600

    Add USB_FLASH_DRIVE_SUPPORT

diff --git a/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
new file mode 100644
index 0000000000..369b3d38d4
--- /dev/null
+++ b/Marlin/src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp
@@ -0,0 +1,159 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../inc/MarlinConfigPre.h"
+
+#if ENABLED(USB_FLASH_DRIVE_SUPPORT)
+
+#include "lib/Usb.h"
+#include "lib/masstorage.h"
+
+#include "Sd2Card_FlashDrive.h"
+
+#include <SPI.h>
+
+#include "../../core/serial.h"
+
+USB usb;
+BulkOnly bulk(&usb);
+
+Sd2Card::state_t Sd2Card::state;
+uint32_t         Sd2Card::block;
+
+bool Sd2Card::usbHostReady() {
+  return state == USB_HOST_INITIALIZED;
+}
+
+bool Sd2Card::isInserted() {
+  return usb.getUsbTaskState() == USB_STATE_RUNNING;
+}
+
+// Marlin calls this whenever an SD card is detected, so this method
+// should not be used to initialize the USB host library
+bool Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
+  if (!usbHostReady()) return false;
+
+  if (!bulk.LUNIsGood(0)) {
+    SERIAL_ECHOLNPGM("LUN zero is not good\n");
+    return false;
+  }
+
+  SERIAL_ECHOLNPAIR("LUN Capacity: ",bulk.GetCapacity(0));
+
+  const uint32_t sectorSize = bulk.GetSectorSize(0);
+  if (sectorSize != 512) {
+    SERIAL_ECHOLNPAIR("Expecting sector size of 512, got: ",sectorSize);
+    return false;
+  }
+
+  return true;
+}
+
+void Sd2Card::idle() {
+  static uint32_t next_retry;
+
+  switch (state) {
+    case USB_HOST_DELAY_INIT:
+      next_retry = millis() + 10000;
+      state = USB_HOST_WAITING;
+      break;
+    case USB_HOST_WAITING:
+      if (millis() > next_retry) {
+        next_retry = millis() + 10000;
+        state = USB_HOST_UNINITIALIZED;
+      }
+      break;
+    case USB_HOST_UNINITIALIZED:
+      SERIAL_ECHOLNPGM("Starting USB host");
+      if (!usb.start()) {
+        SERIAL_ECHOLNPGM("USB host failed to start. Will retry in 10 seconds.");
+        state = USB_HOST_DELAY_INIT;
+      }
+      else {
+        SERIAL_ECHOLNPGM("USB host initialized");
+        state = USB_HOST_INITIALIZED;
+      }
+      break;
+    case USB_HOST_INITIALIZED:
+      const uint8_t lastUsbTaskState = usb.getUsbTaskState();
+      usb.Task();
+      const uint8_t newUsbTaskState  = usb.getUsbTaskState();
+
+      if (lastUsbTaskState == USB_STATE_RUNNING && newUsbTaskState != USB_STATE_RUNNING) {
+        // the user pulled the flash drive. Make sure the bulk storage driver releases the address
+        SERIAL_ECHOLNPGM("Drive removed\n");
+        //bulk.Release();
+      }
+      if (lastUsbTaskState != USB_STATE_RUNNING && newUsbTaskState == USB_STATE_RUNNING)
+        SERIAL_ECHOLNPGM("Drive inserted\n");
+      break;
+  }
+}
+
+uint32_t Sd2Card::cardSize() {
+  if (!usbHostReady()) return 0;
+  return bulk.GetCapacity(0);
+}
+
+bool Sd2Card::readData(uint8_t* dst) {
+  return readBlock(block++, dst);
+}
+
+bool Sd2Card::readStart(uint32_t blockNumber) {
+  block = blockNumber;
+  return true;
+}
+
+bool Sd2Card::readStop() {
+  return usbHostReady();
+}
+
+bool Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
+  if (!usbHostReady()) {
+    SERIAL_ECHOLNPGM("Read from uninitalized USB host");
+    return false;
+  }
+  return bulk.Read(0, block, 512, 1, dst) == 0;
+}
+
+bool Sd2Card::writeData(const uint8_t* src) {
+  return writeBlock(block++, src);
+}
+
+bool Sd2Card::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
+  block = blockNumber;
+  return true;
+}
+
+bool Sd2Card::writeStop() {
+  return usbHostReady();
+}
+
+bool Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
+  if (!usbHostReady()) {
+    SERIAL_ECHOLNPGM("Write to uninitalized USB host");
+    return false;
+  }
+  return bulk.Write(0, blockNumber, 512, 1, src) == 0;
+}
+
+#endif // USB_FLASH_DRIVE_SUPPORT
