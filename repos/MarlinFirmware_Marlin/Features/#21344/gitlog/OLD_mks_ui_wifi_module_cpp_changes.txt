commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
deleted file mode 100644
index 4dd092e64b..0000000000
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ /dev/null
@@ -1,1844 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-#include "../../../../inc/MarlinConfigPre.h"
-
-#if BOTH(HAS_TFT_LVGL_UI, MKS_WIFI_MODULE)
-
-#include "draw_ui.h"
-#include "wifi_module.h"
-#include "wifi_upload.h"
-#include "SPI_TFT.h"
-
-#include "../../../../MarlinCore.h"
-#include "../../../../module/temperature.h"
-#include "../../../../gcode/queue.h"
-#include "../../../../gcode/gcode.h"
-#include "../../../../lcd/marlinui.h"
-#include "../../../../sd/cardreader.h"
-#include "../../../../module/planner.h"
-#include "../../../../module/servo.h"
-#include "../../../../module/probe.h"
-
-#if DISABLED(EMERGENCY_PARSER)
-  #include "../../../../module/motion.h"
-#endif
-#if ENABLED(POWER_LOSS_RECOVERY)
-  #include "../../../../feature/powerloss.h"
-#endif
-#if ENABLED(PARK_HEAD_ON_PAUSE)
-  #include "../../../../feature/pause.h"
-#endif
-
-#define WIFI_SET()        WRITE(WIFI_RESET_PIN, HIGH);
-#define WIFI_RESET()      WRITE(WIFI_RESET_PIN, LOW);
-#define WIFI_IO1_SET()      WRITE(WIFI_IO1_PIN, HIGH);
-#define WIFI_IO1_RESET()    WRITE(WIFI_IO1_PIN, LOW);
-
-extern uint8_t Explore_Disk (char *path , uint8_t recu_level);
-
-extern uint8_t commands_in_queue;
-extern uint8_t sel_id;
-
-int usartFifoAvailable(SZ_USART_FIFO *fifo);
-int readUsartFifo(SZ_USART_FIFO *fifo, int8_t *buf, int32_t len);
-int writeUsartFifo(SZ_USART_FIFO * fifo, int8_t * buf, int32_t len);
-extern unsigned int  getTickDiff(unsigned int curTick, unsigned int  lastTick);
-
-volatile SZ_USART_FIFO  WifiRxFifo;
-
-#define WAIT_ESP_TRANS_TIMEOUT_TICK 10500
-
-int cfg_cloud_flag = 0;
-
-extern PRINT_TIME print_time;
-
-char wifi_firm_ver[20] = { 0 };
-WIFI_GCODE_BUFFER espGcodeFifo;
-extern uint8_t pause_resum;
-
-uint8_t wifi_connect_flg = 0;
-extern volatile uint8_t get_temp_flag;
-
-#define WIFI_MODE 2
-#define WIFI_AP_MODE  3
-
-int upload_result = 0;
-
-uint32_t upload_time = 0;
-uint32_t upload_size = 0;
-
-volatile WIFI_STATE wifi_link_state;
-WIFI_PARA wifiPara;
-IP_PARA ipPara;
-CLOUD_PARA cloud_para;
-
-char wifi_check_time = 0;
-
-extern uint8_t gCurDir[100];
-
-extern uint32_t wifi_loop_cycle;
-
-volatile TRANSFER_STATE esp_state;
-
-uint8_t left_to_send = 0;
-uint8_t left_to_save[96] = { 0 };
-
-volatile WIFI_DMA_RCV_FIFO wifiDmaRcvFifo;
-
-volatile WIFI_TRANS_ERROR wifiTransError;
-
-static bool need_ok_later = false;
-
-extern volatile WIFI_STATE wifi_link_state;
-extern WIFI_PARA wifiPara;
-extern IP_PARA ipPara;
-extern CLOUD_PARA cloud_para;
-
-extern bool once_flag, flash_preview_begin, default_preview_flg, gcode_preview_over;
-extern bool flash_dma_mode;
-
-uint32_t getWifiTick() { return millis(); }
-
-uint32_t getWifiTickDiff(int32_t lastTick, int32_t curTick) {
-  if (lastTick <= curTick)
-    return (curTick - lastTick) * TICK_CYCLE;
-  else
-    return (0xFFFFFFFF - lastTick + curTick) * TICK_CYCLE;
-}
-
-void wifi_delay(int n) {
-  uint32_t begin = getWifiTick();
-  uint32_t end = begin;
-  while (getWifiTickDiff(begin, end) < (uint32_t)n) {
-    watchdog_refresh();
-    end = getWifiTick();
-  }
-}
-
-void wifi_reset() {
-  uint32_t start, now;
-  start = getWifiTick();
-  now = start;
-  WIFI_RESET();
-  while (getWifiTickDiff(start, now) < 500)
-    now = getWifiTick();
-
-  WIFI_SET();
-}
-
-void mount_file_sys(uint8_t disk_type) {
-  if (disk_type == FILE_SYS_SD) {
-    TERN_(SDSUPPORT, card.mount());
-  }
-  else if (disk_type == FILE_SYS_USB) {
-  }
-}
-
-#include <libmaple/timer.h>
-#include <libmaple/util.h>
-#include <libmaple/rcc.h>
-
-#include <boards.h>
-#include <wirish.h>
-
-#include <libmaple/dma.h>
-#include <libmaple/bitband.h>
-
-#include <libmaple/libmaple.h>
-#include <libmaple/gpio.h>
-#include <libmaple/usart.h>
-#include <libmaple/ring_buffer.h>
-
-void changeFlashMode(const bool dmaMode) {
-  if (flash_dma_mode != dmaMode) {
-    flash_dma_mode = dmaMode;
-    if (!flash_dma_mode) {
-      dma_disable(DMA1, DMA_CH5);
-      dma_clear_isr_bits(DMA1, DMA_CH4);
-    }
-  }
-}
-
-static bool longName2DosName(const char *longName, char *dosName) {
-  uint8_t i;
-  for (i = FILENAME_LENGTH; i--;) dosName[i] = '\0';
-  while (*longName) {
-    uint8_t c = *longName++;
-    if (c == '.') { // For a dot...
-      if (i == 0) return false;
-      strcat_P(dosName, PSTR(".GCO"));
-      break;
-    }
-    else {
-      if (c < 0x21 || c == 0x7F) return false;                  // Check size, non-printable characters
-      // Fail for illegal characters
-      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
-      while (const uint8_t b = pgm_read_byte(p++)) if (b == c) return false;
-      dosName[i++] = c + (WITHIN(c, 'a', 'z') ? 'A' - 'a' : 0); // Uppercase required for 8.3 name
-    }
-    if (i >= 5) {
-      strcat_P(dosName, PSTR("~1.GCO"));
-      break;
-    }
-  }
-  return dosName[0] != '\0'; // Return true if any name was set
-}
-
-static int storeRcvData(volatile uint8_t *bufToCpy, int32_t len) {
-  unsigned char tmpW = wifiDmaRcvFifo.write_cur;
-
-  if (len > UDISKBUFLEN) return 0;
-
-  if (wifiDmaRcvFifo.state[tmpW] == udisk_buf_empty) {
-    memcpy((unsigned char *) wifiDmaRcvFifo.bufferAddr[tmpW], (uint8_t *)bufToCpy, len);
-    wifiDmaRcvFifo.state[tmpW] = udisk_buf_full;
-    wifiDmaRcvFifo.write_cur = (tmpW + 1) % TRANS_RCV_FIFO_BLOCK_NUM;
-    return 1;
-  }
-  return 0;
-}
-
-static void esp_dma_pre() {
-  dma_channel_reg_map *channel_regs = dma_tube_regs(DMA1, DMA_CH5);
-
-  CBI32(channel_regs->CCR, 0);
-  channel_regs->CMAR = (uint32_t)WIFISERIAL.usart_device->rb->buf;
-  channel_regs->CNDTR = 0x0000;
-  channel_regs->CNDTR = UART_RX_BUFFER_SIZE;
-  DMA1->regs->IFCR = 0xF0000;
-  SBI32(channel_regs->CCR, 0);
-}
-
-static void dma_ch5_irq_handle() {
-    uint8 status_bits = dma_get_isr_bits(DMA1, DMA_CH5);
-    dma_clear_isr_bits(DMA1, DMA_CH5);
-    if (status_bits & 0x8) {
-      // DMA transmit Error
-    }
-    else if (status_bits & 0x2) {
-      // DMA transmit complete
-      if (esp_state == TRANSFER_IDLE)
-        esp_state = TRANSFERING;
-
-      if (storeRcvData(WIFISERIAL.usart_device->rb->buf, UART_RX_BUFFER_SIZE)) {
-        esp_dma_pre();
-        if (wifiTransError.flag != 0x1)
-          WIFI_IO1_RESET();
-      }
-      else {
-        WIFI_IO1_SET();
-        esp_state = TRANSFER_STORE;
-      }
-    }
-    else if (status_bits & 0x4) {
-      // DMA transmit half
-      WIFI_IO1_SET();
-    }
-}
-
-static void wifi_usart_dma_init() {
-  dma_init(DMA1);
-  uint32_t flags = ( DMA_MINC_MODE | DMA_TRNS_CMPLT | DMA_HALF_TRNS | DMA_TRNS_ERR);
-  dma_xfer_size dma_bit_size = DMA_SIZE_8BITS;
-  dma_setup_transfer(DMA1, DMA_CH5, &USART1_BASE->DR, dma_bit_size,
-             (volatile void*)WIFISERIAL.usart_device->rb->buf, dma_bit_size, flags);// Transmit buffer DMA
-  dma_set_priority(DMA1, DMA_CH5, DMA_PRIORITY_LOW);
-  dma_attach_interrupt(DMA1, DMA_CH5, &dma_ch5_irq_handle);
-
-  dma_clear_isr_bits(DMA1, DMA_CH5);
-  dma_set_num_transfers(DMA1, DMA_CH5, UART_RX_BUFFER_SIZE);
-
-  bb_peri_set_bit(&USART1_BASE->CR3, USART_CR3_DMAR_BIT, 1);
-  dma_enable(DMA1, DMA_CH5);   // enable transmit
-
-  for (uint8_t i = 0; i < TRANS_RCV_FIFO_BLOCK_NUM; i++) {
-    wifiDmaRcvFifo.bufferAddr[i] = &bmp_public_buf[1024 * i];
-    wifiDmaRcvFifo.state[i] = udisk_buf_empty;
-  }
-
-  memset(wifiDmaRcvFifo.bufferAddr[0], 0, 1024 * TRANS_RCV_FIFO_BLOCK_NUM);
-  wifiDmaRcvFifo.read_cur = 0;
-  wifiDmaRcvFifo.write_cur = 0;
-}
-
-void esp_port_begin(uint8_t interrupt) {
-  WifiRxFifo.uart_read_point = 0;
-  WifiRxFifo.uart_write_point = 0;
-
-  #if 1
-
-    #if ENABLED(MKS_WIFI_MODULE)
-      WIFISERIAL.end();
-      if (interrupt) {
-        for (uint16_t i = 0; i < 65535; i++) { /*nada*/ }
-        WIFISERIAL.begin(WIFI_BAUDRATE);
-        millis_t serial_connect_timeout = millis() + 1000UL;
-        while (PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
-      }
-      else {
-        WIFISERIAL.usart_device->regs->CR1 &= ~USART_CR1_RXNEIE;
-        WIFISERIAL.begin(WIFI_UPLOAD_BAUDRATE);
-        wifi_usart_dma_init();
-      }
-    #endif
-
-  #else
-
-    #if MKS_WIFI_MODULE
-      WIFISERIAL.end();
-      for (uint16_t i = 0; i < 65535; i++) { /*nada*/ }
-      WIFISERIAL.begin(interrupt ? WIFI_BAUDRATE : WIFI_UPLOAD_BAUDRATE);
-      millis_t serial_connect_timeout = millis() + 1000UL;
-      while (PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
-    #endif
-    if (!interrupt) wifi_usart_dma_init();
-
-  #endif
-}
-
-#if ENABLED(MKS_WIFI_MODULE)
-
-  int raw_send_to_wifi(uint8_t *buf, int len) {
-    if (buf == 0 || len <= 0) return 0;
-    for (int i = 0; i < len; i++)
-      WIFISERIAL.write(*(buf + i));
-    return len;
-  }
-
-#endif
-
-void wifi_ret_ack() {}
-
-uint8_t buf_to_wifi[256];
-int index_to_wifi = 0;
-int package_to_wifi(WIFI_RET_TYPE type, uint8_t *buf, int len) {
-  uint8_t wifi_ret_head = 0xA5;
-  uint8_t wifi_ret_tail = 0xFC;
-
-  if (type == WIFI_PARA_SET) {
-    int data_offset = 4;
-    int apLen = strlen((const char *)uiCfg.wifi_name);
-    int keyLen = strlen((const char *)uiCfg.wifi_key);
-
-    ZERO(buf_to_wifi);
-    index_to_wifi = 0;
-
-    buf_to_wifi[data_offset] = gCfgItems.wifi_mode_sel;
-    buf_to_wifi[data_offset + 1]  = apLen;
-    memcpy(&buf_to_wifi[data_offset + 2], (const char *)uiCfg.wifi_name, apLen);
-    buf_to_wifi[data_offset + apLen + 2]  = keyLen;
-    memcpy(&buf_to_wifi[data_offset + apLen + 3], (const char *)uiCfg.wifi_key, keyLen);
-    buf_to_wifi[data_offset + apLen + keyLen + 3] = wifi_ret_tail;
-
-    index_to_wifi = apLen + keyLen + 3;
-
-    buf_to_wifi[0] = wifi_ret_head;
-    buf_to_wifi[1] = type;
-    buf_to_wifi[2] = index_to_wifi & 0xFF;
-    buf_to_wifi[3] = (index_to_wifi >> 8) & 0xFF;
-
-    raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
-
-    ZERO(buf_to_wifi);
-    index_to_wifi = 0;
-  }
-  else if (type == WIFI_TRANS_INF) {
-    if (len > (int)(sizeof(buf_to_wifi) - index_to_wifi - 5)) {
-      ZERO(buf_to_wifi);
-      index_to_wifi = 0;
-      return 0;
-    }
-
-   if (len > 0) {
-      memcpy(&buf_to_wifi[4 + index_to_wifi], buf, len);
-      index_to_wifi += len;
-
-      if (index_to_wifi < 1)
-        return 0;
-
-       if (buf_to_wifi[index_to_wifi + 3] == '\n') {
-        // mask "wait" "busy" "X:"
-        if (((buf_to_wifi[4] == 'w') && (buf_to_wifi[5] == 'a') && (buf_to_wifi[6] == 'i')  && (buf_to_wifi[7] == 't') )
-          || ((buf_to_wifi[4] == 'b') && (buf_to_wifi[5] == 'u') && (buf_to_wifi[6] == 's')  && (buf_to_wifi[7] == 'y') )
-          || ((buf_to_wifi[4] == 'X') && (buf_to_wifi[5] == ':') )
-        ) {
-          ZERO(buf_to_wifi);
-          index_to_wifi = 0;
-          return 0;
-        }
-
-        buf_to_wifi[0] = wifi_ret_head;
-        buf_to_wifi[1] = type;
-        buf_to_wifi[2] = index_to_wifi & 0xFF;
-        buf_to_wifi[3] = (index_to_wifi >> 8) & 0xFF;
-        buf_to_wifi[4 + index_to_wifi] = wifi_ret_tail;
-
-        raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
-
-        ZERO(buf_to_wifi);
-        index_to_wifi = 0;
-      }
-    }
-  }
-  else if (type == WIFI_EXCEP_INF) {
-    ZERO(buf_to_wifi);
-
-    buf_to_wifi[0] = wifi_ret_head;
-    buf_to_wifi[1] = type;
-    buf_to_wifi[2] = 1;
-    buf_to_wifi[3] = 0;
-    buf_to_wifi[4] = *buf;
-    buf_to_wifi[5] = wifi_ret_tail;
-
-    raw_send_to_wifi(buf_to_wifi, 6);
-
-    ZERO(buf_to_wifi);
-    index_to_wifi = 0;
-  }
-  else if (type == WIFI_CLOUD_CFG) {
-    int data_offset = 4;
-    int urlLen = strlen((const char *)uiCfg.cloud_hostUrl);
-
-    ZERO(buf_to_wifi);
-    index_to_wifi = 0;
-
-    buf_to_wifi[data_offset] = gCfgItems.cloud_enable ? 0x0A : 0x05;
-    buf_to_wifi[data_offset + 1]  = urlLen;
-    memcpy(&buf_to_wifi[data_offset + 2], (const char *)uiCfg.cloud_hostUrl, urlLen);
-    buf_to_wifi[data_offset + urlLen + 2] = uiCfg.cloud_port & 0xFF;
-    buf_to_wifi[data_offset + urlLen + 3] = (uiCfg.cloud_port >> 8) & 0xFF;
-    buf_to_wifi[data_offset + urlLen + 4] = wifi_ret_tail;
-
-    index_to_wifi = urlLen + 4;
-
-    buf_to_wifi[0] = wifi_ret_head;
-    buf_to_wifi[1] = type;
-    buf_to_wifi[2] = index_to_wifi & 0xFF;
-    buf_to_wifi[3] = (index_to_wifi >> 8) & 0xFF;
-
-    raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
-
-    ZERO(buf_to_wifi);
-    index_to_wifi = 0;
-  }
-  else if (type == WIFI_CLOUD_UNBIND) {
-    ZERO(buf_to_wifi);
-
-    buf_to_wifi[0] = wifi_ret_head;
-    buf_to_wifi[1] = type;
-    buf_to_wifi[2] = 0;
-    buf_to_wifi[3] = 0;
-    buf_to_wifi[4] = wifi_ret_tail;
-
-    raw_send_to_wifi(buf_to_wifi, 5);
-
-    ZERO(buf_to_wifi);
-    index_to_wifi = 0;
-  }
-  return 1;
-}
-
-#define SEND_OK_TO_WIFI send_to_wifi((uint8_t *)"ok\r\n", strlen("ok\r\n"))
-int send_to_wifi(uint8_t *buf, int len) { return package_to_wifi(WIFI_TRANS_INF, buf, len); }
-
-void set_cur_file_sys(int fileType) { gCfgItems.fileSysType = fileType; }
-
-void get_file_list(char *path) {
-  if (!path) return;
-
-  if (gCfgItems.fileSysType == FILE_SYS_SD) {
-    TERN_(SDSUPPORT, card.mount());
-  }
-  else if (gCfgItems.fileSysType == FILE_SYS_USB) {
-    // udisk
-  }
-  Explore_Disk(path, 0);
-}
-
-char wait_ip_back_flag = 0;
-
-typedef struct {
-  int write_index;
-  uint8_t saveFileName[30];
-  uint8_t fileTransfer;
-  uint32_t fileLen;
-  uint32_t tick_begin;
-  uint32_t tick_end;
-} FILE_WRITER;
-
-FILE_WRITER file_writer;
-
-int32_t lastFragment = 0;
-
-char saveFilePath[50];
-
-static SdFile upload_file, *upload_curDir;
-static filepos_t pos;
-
-int write_to_file(char *buf, int len) {
-  int i;
-  int res = 0;
-
-  for (i = 0; i < len; i++) {
-    public_buf[file_writer.write_index++] = buf[i];
-    if (file_writer.write_index >= 512) {
-      res = upload_file.write(public_buf, file_writer.write_index);
-
-      if (res == -1) {
-        upload_file.close();
-        const char * const fname = card.diveToFile(true, upload_curDir, saveFilePath);
-
-        if (upload_file.open(upload_curDir, fname, O_WRITE)) {
-          upload_file.setpos(&pos);
-          res = upload_file.write(public_buf, file_writer.write_index);
-        }
-      }
-
-      if (res == -1) return -1;
-
-      upload_file.getpos(&pos);
-      file_writer.write_index = 0;
-    }
-  }
-
-  if (res == -1) {
-    ZERO(public_buf);
-    file_writer.write_index = 0;
-    return  -1;
-  }
-
-  return 0;
-}
-
-#define ESP_PROTOC_HEAD (uint8_t)0xA5
-#define ESP_PROTOC_TAIL   (uint8_t)0xFC
-
-#define ESP_TYPE_NET        (uint8_t)0x0
-#define ESP_TYPE_GCODE        (uint8_t)0x1
-#define ESP_TYPE_FILE_FIRST     (uint8_t)0x2
-#define ESP_TYPE_FILE_FRAGMENT    (uint8_t)0x3
-
-#define ESP_TYPE_WIFI_LIST    (uint8_t)0x4
-
-uint8_t esp_msg_buf[UART_RX_BUFFER_SIZE] = { 0 };
-uint16_t esp_msg_index = 0;
-
-typedef struct {
-  uint8_t head;
-  uint8_t type;
-  uint16_t dataLen;
-  uint8_t *data;
-  uint8_t tail;
-} ESP_PROTOC_FRAME;
-
-static int cut_msg_head(uint8_t *msg, uint16_t msgLen, uint16_t cutLen) {
-  if (msgLen < cutLen) return 0;
-
-  else if (msgLen == cutLen) {
-    memset(msg, 0, msgLen);
-    return 0;
-  }
-
-  for (int i = 0; i < (msgLen - cutLen); i++)
-    msg[i] = msg[cutLen + i];
-
-  memset(&msg[msgLen - cutLen], 0, cutLen);
-
-  return msgLen - cutLen;
-}
-
-uint8_t Explore_Disk(char *path , uint8_t recu_level) {
-  char tmp[200];
-  char Fstream[200];
-
-  if (!path) return 0;
-
-  const uint8_t fileCnt = card.get_num_Files();
-
-  for (uint8_t i = 0; i < fileCnt; i++) {
-    card.getfilename_sorted(SD_ORDER(i, fileCnt));
-    ZERO(tmp);
-    strcpy(tmp, card.filename);
-
-    ZERO(Fstream);
-    strcpy(Fstream, tmp);
-
-    if (card.flag.filenameIsDir && recu_level <= 10)
-      strcat_P(Fstream, PSTR(".DIR"));
-
-    strcat_P(Fstream, PSTR("\r\n"));
-    send_to_wifi((uint8_t*)Fstream, strlen(Fstream));
-  }
-
-  return fileCnt;
-}
-
-static void wifi_gcode_exec(uint8_t *cmd_line) {
-  int8_t tempBuf[100] = { 0 };
-  uint8_t *tmpStr = 0;
-  int  cmd_value;
-  volatile int print_rate;
-  if (strchr((char *)cmd_line, '\n') && (strchr((char *)cmd_line, 'G') || strchr((char *)cmd_line, 'M') || strchr((char *)cmd_line, 'T'))) {
-    tmpStr = (uint8_t *)strchr((char *)cmd_line, '\n');
-    if (tmpStr) *tmpStr = '\0';
-
-    tmpStr = (uint8_t *)strchr((char *)cmd_line, '\r');
-    if (tmpStr) *tmpStr = '\0';
-
-    tmpStr = (uint8_t *)strchr((char *)cmd_line, '*');
-    if (tmpStr) *tmpStr = '\0';
-
-    tmpStr = (uint8_t *)strchr((char *)cmd_line, 'M');
-    if (tmpStr) {
-      cmd_value = atoi((char *)(tmpStr + 1));
-      tmpStr = (uint8_t *)strchr((char *)tmpStr, ' ');
-
-      switch (cmd_value) {
-
-        case 20: // M20: Print SD / µdisk file
-          file_writer.fileTransfer = 0;
-          if (uiCfg.print_state == IDLE) {
-            int index = 0;
-
-            if (tmpStr == 0) {
-              gCfgItems.fileSysType = FILE_SYS_SD;
-              send_to_wifi((uint8_t *)"Begin file list\r\n", strlen("Begin file list\r\n"));
-              get_file_list((char *)"0:/");
-              send_to_wifi((uint8_t *)"End file list\r\n", strlen("End file list\r\n"));
-              SEND_OK_TO_WIFI;
-              break;
-            }
-
-            while (tmpStr[index] == ' ') index++;
-
-            if (gCfgItems.wifi_type == ESP_WIFI) {
-              char *path = (char *)tempBuf;
-
-              if (strlen((char *)&tmpStr[index]) < 80) {
-                send_to_wifi((uint8_t *)"Begin file list\r\n", strlen("Begin file list\r\n"));
-
-                if (strncmp((char *)&tmpStr[index], "1:", 2) == 0)
-                  gCfgItems.fileSysType = FILE_SYS_SD;
-                else if (strncmp((char *)&tmpStr[index], "0:", 2) == 0)
-                  gCfgItems.fileSysType = FILE_SYS_USB;
-
-                strcpy((char *)path, (char *)&tmpStr[index]);
-                get_file_list(path);
-                send_to_wifi((uint8_t *)"End file list\r\n", strlen("End file list\r\n"));
-              }
-              SEND_OK_TO_WIFI;
-            }
-          }
-          break;
-
-        case 21:
-          /*init sd card*/
-          SEND_OK_TO_WIFI;
-          break;
-
-        case 23:
-          /*select the file*/
-          if (uiCfg.print_state == IDLE) {
-            int index = 0;
-            while (tmpStr[index] == ' ') index++;
-
-            if (strstr_P((char *)&tmpStr[index], PSTR(".g")) || strstr_P((char *)&tmpStr[index], PSTR(".G"))) {
-              if (strlen((char *)&tmpStr[index]) < 80) {
-                ZERO(list_file.file_name[sel_id]);
-                ZERO(list_file.long_name[sel_id]);
-                uint8_t has_path_selected = 0;
-
-                if (gCfgItems.wifi_type == ESP_WIFI) {
-                  if (strncmp_P((char *)&tmpStr[index], PSTR("1:"), 2) == 0) {
-                    gCfgItems.fileSysType = FILE_SYS_SD;
-                    has_path_selected = 1;
-                  }
-                  else if (strncmp_P((char *)&tmpStr[index], PSTR("0:"), 2) == 0) {
-                    gCfgItems.fileSysType = FILE_SYS_USB;
-                    has_path_selected = 1;
-                  }
-                  else if (tmpStr[index] != '/')
-                    strcat_P((char *)list_file.file_name[sel_id], PSTR("/"));
-
-                  if (file_writer.fileTransfer == 1) {
-                    char dosName[FILENAME_LENGTH];
-                    uint8_t fileName[sizeof(list_file.file_name[sel_id])];
-                    fileName[0] = '\0';
-                    if (has_path_selected == 1) {
-                      strcat((char *)fileName, (char *)&tmpStr[index + 3]);
-                      strcat_P((char *)list_file.file_name[sel_id], PSTR("/"));
-                    }
-                    else strcat((char *)fileName, (char *)&tmpStr[index]);
-                    if (!longName2DosName((const char *)fileName, dosName))
-                      strcpy_P(list_file.file_name[sel_id], PSTR("notValid"));
-                    strcat((char *)list_file.file_name[sel_id], dosName);
-                    strcat((char *)list_file.long_name[sel_id], dosName);
-                  }
-                  else {
-                    strcat((char *)list_file.file_name[sel_id], (char *)&tmpStr[index]);
-                    strcat((char *)list_file.long_name[sel_id], (char *)&tmpStr[index]);
-                  }
-
-                }
-                else
-                  strcpy(list_file.file_name[sel_id], (char *)&tmpStr[index]);
-
-                char *cur_name=strrchr(list_file.file_name[sel_id],'/');
-
-                card.openFileRead(cur_name);
-
-                if (card.isFileOpen())
-                  send_to_wifi((uint8_t *)"File selected\r\n", strlen("File selected\r\n"));
-                else {
-                  send_to_wifi((uint8_t *)"file.open failed\r\n", strlen("file.open failed\r\n"));
-                  strcpy_P(list_file.file_name[sel_id], PSTR("notValid"));
-                }
-                SEND_OK_TO_WIFI;
-              }
-            }
-          }
-          break;
-
-        case 24:
-          if (strcmp_P(list_file.file_name[sel_id], PSTR("notValid")) != 0) {
-            if (uiCfg.print_state == IDLE) {
-              clear_cur_ui();
-              reset_print_time();
-              start_print_time();
-              preview_gcode_prehandle(list_file.file_name[sel_id]);
-              uiCfg.print_state = WORKING;
-              lv_draw_printing();
-
-              #if ENABLED(SDSUPPORT)
-                if (!gcode_preview_over) {
-                  char *cur_name = strrchr(list_file.file_name[sel_id], '/');
-
-                  card.endFilePrint();
-
-                  SdFile file;
-                  SdFile *curDir;
-                  card.endFilePrint();
-                  const char * const fname = card.diveToFile(true, curDir, cur_name);
-                  if (!fname) return;
-                  if (file.open(curDir, fname, O_READ)) {
-                    gCfgItems.curFilesize = file.fileSize();
-                    file.close();
-                    update_spi_flash();
-                  }
-                  card.openFileRead(cur_name);
-                  if (card.isFileOpen()) {
-                    //saved_feedrate_percentage = feedrate_percentage;
-                    feedrate_percentage = 100;
-                    planner.flow_percentage[0] = 100;
-                    planner.e_factor[0] = planner.flow_percentage[0] * 0.01f;
-                    #if EXTRUDERS == 2
-                      planner.flow_percentage[1] = 100;
-                      planner.e_factor[1] = planner.flow_percentage[1] * 0.01f;
-                    #endif
-                    card.startFileprint();
-                    TERN_(POWER_LOSS_RECOVERY, recovery.prepare());
-                    once_flag = false;
-                  }
-                }
-              #endif
-            }
-            else if (uiCfg.print_state == PAUSED) {
-              uiCfg.print_state = RESUMING;
-              clear_cur_ui();
-              start_print_time();
-
-              if (gCfgItems.from_flash_pic)
-                flash_preview_begin = true;
-              else
-                default_preview_flg = true;
-              lv_draw_printing();
-            }
-            else if (uiCfg.print_state == REPRINTING) {
-              uiCfg.print_state = REPRINTED;
-              clear_cur_ui();
-              start_print_time();
-              if (gCfgItems.from_flash_pic)
-                flash_preview_begin = true;
-              else
-                default_preview_flg = true;
-              lv_draw_printing();
-            }
-          }
-          SEND_OK_TO_WIFI;
-          break;
-
-        case 25:
-          /*pause print file*/
-          if (uiCfg.print_state == WORKING) {
-            stop_print_time();
-
-            clear_cur_ui();
-
-            #if ENABLED(SDSUPPORT)
-              card.pauseSDPrint();
-              uiCfg.print_state = PAUSING;
-            #endif
-            if (gCfgItems.from_flash_pic)
-              flash_preview_begin = true;
-            else
-              default_preview_flg = true;
-            lv_draw_printing();
-            SEND_OK_TO_WIFI;
-          }
-          break;
-
-        case 26:
-          /*stop print file*/
-          if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED) || (uiCfg.print_state == REPRINTING)) {
-            stop_print_time();
-
-            clear_cur_ui();
-            #if ENABLED(SDSUPPORT)
-              uiCfg.print_state = IDLE;
-              card.flag.abort_sd_printing = true;
-            #endif
-
-            lv_draw_ready_print();
-
-            SEND_OK_TO_WIFI;
-          }
-          break;
-
-        case 27:
-          /*report print rate*/
-          if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)|| (uiCfg.print_state == REPRINTING)) {
-            print_rate = uiCfg.totalSend;
-            ZERO(tempBuf);
-            sprintf_P((char *)tempBuf, PSTR("M27 %d\r\n"), print_rate);
-            send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
-          }
-          break;
-
-        case 28:
-          /*begin to transfer file to filesys*/
-          if (uiCfg.print_state == IDLE) {
-
-            int index = 0;
-            while (tmpStr[index] == ' ') index++;
-
-            if (strstr_P((char *)&tmpStr[index], PSTR(".g")) || strstr_P((char *)&tmpStr[index], PSTR(".G"))) {
-              strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
-
-              if (gCfgItems.fileSysType == FILE_SYS_SD) {
-                ZERO(tempBuf);
-                sprintf_P((char *)tempBuf, PSTR("%s"), file_writer.saveFileName);
-              }
-              else if (gCfgItems.fileSysType == FILE_SYS_USB) {
-                ZERO(tempBuf);
-                sprintf_P((char *)tempBuf, PSTR("%s"), (char *)file_writer.saveFileName);
-              }
-              mount_file_sys(gCfgItems.fileSysType);
-
-              #if ENABLED(SDSUPPORT)
-                char *cur_name = strrchr(list_file.file_name[sel_id], '/');
-                card.openFileWrite(cur_name);
-                if (card.isFileOpen()) {
-                  ZERO(file_writer.saveFileName);
-                  strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
-                  ZERO(tempBuf);
-                  sprintf_P((char *)tempBuf, PSTR("Writing to file: %s\r\n"), (char *)file_writer.saveFileName);
-                  wifi_ret_ack();
-                  send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
-                  wifi_link_state = WIFI_WAIT_TRANS_START;
-                }
-                else {
-                  wifi_link_state = WIFI_CONNECTED;
-                  clear_cur_ui();
-                  lv_draw_dialog(DIALOG_TRANSFER_NO_DEVICE);
-                }
-              #endif
-            }
-          }
-          break;
-
-        case 105:
-        case 991:
-          ZERO(tempBuf);
-          if (cmd_value == 105) {
-
-            SEND_OK_TO_WIFI;
-
-            char *outBuf = (char *)tempBuf;
-            char tbuf[34];
-
-            sprintf_P(tbuf, PSTR("%d /%d"), thermalManager.wholeDegHotend(0), thermalManager.degTargetHotend(0));
-
-            const int tlen = strlen(tbuf);
-
-            sprintf_P(outBuf, PSTR("T:%s"), tbuf);
-            outBuf += 2 + tlen;
-
-            strcpy_P(outBuf, PSTR(" B:"));
-            outBuf += 3;
-            #if HAS_HEATED_BED
-              sprintf_P(outBuf, PSTR("%d /%d"), thermalManager.wholeDegBed(), thermalManager.degTargetBed());
-            #else
-              strcpy_P(outBuf, PSTR("0 /0"));
-            #endif
-            outBuf += 4;
-
-            strcat_P(outBuf, PSTR(" T0:"));
-            strcat(outBuf, tbuf);
-            outBuf += 4 + tlen;
-
-            strcat_P(outBuf, PSTR(" T1:"));
-            outBuf += 4;
-            #if HAS_MULTI_HOTEND
-              sprintf_P(outBuf, PSTR("%d /%d"), thermalManager.wholeDegHotend(1), thermalManager.degTargetHotend(1));
-            #else
-              strcat_P(outBuf, PSTR("0 /0"));
-            #endif
-            outBuf += 4;
-
-            strcat_P(outBuf, PSTR(" @:0 B@:0\r\n"));
-          }
-          else {
-            sprintf_P((char *)tempBuf, PSTR("T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n"),
-              thermalManager.wholeDegHotend(0), thermalManager.degTargetHotend(0),
-              #if HAS_HEATED_BED
-                thermalManager.wholeDegBed(), thermalManager.degTargetBed(),
-              #else
-                0, 0,
-              #endif
-              thermalManager.wholeDegHotend(0), thermalManager.degTargetHotend(0),
-              #if HAS_MULTI_HOTEND
-                thermalManager.wholeDegHotend(1), thermalManager.degTargetHotend(1)
-              #else
-                0, 0
-              #endif
-            );
-          }
-
-          send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
-          queue.enqueue_one_P(PSTR("M105"));
-          break;
-
-        case 992:
-          if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)) {
-            ZERO(tempBuf);
-            sprintf_P((char *)tempBuf, PSTR("M992 %d%d:%d%d:%d%d\r\n"), print_time.hours/10, print_time.hours%10, print_time.minutes/10, print_time.minutes%10, print_time.seconds/10, print_time.seconds%10);
-            wifi_ret_ack();
-            send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
-          }
-          break;
-
-        case 994:
-          if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)) {
-            ZERO(tempBuf);
-            if (strlen((char *)list_file.file_name[sel_id]) > (100 - 1)) return;
-            sprintf_P((char *)tempBuf, PSTR("M994 %s;%d\n"), list_file.file_name[sel_id], (int)gCfgItems.curFilesize);
-            wifi_ret_ack();
-            send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
-          }
-          break;
-
-        case 997:
-          if (uiCfg.print_state == IDLE) {
-            wifi_ret_ack();
-            send_to_wifi((uint8_t *)"M997 IDLE\r\n", strlen("M997 IDLE\r\n"));
-          }
-          else if (uiCfg.print_state == WORKING) {
-            wifi_ret_ack();
-            send_to_wifi((uint8_t *)"M997 PRINTING\r\n", strlen("M997 PRINTING\r\n"));
-          }
-          else if (uiCfg.print_state == PAUSED) {
-            wifi_ret_ack();
-            send_to_wifi((uint8_t *)"M997 PAUSE\r\n", strlen("M997 PAUSE\r\n"));
-          }
-          else if (uiCfg.print_state == REPRINTING) {
-            wifi_ret_ack();
-            send_to_wifi((uint8_t *)"M997 PAUSE\r\n", strlen("M997 PAUSE\r\n"));
-          }
-          if (!uiCfg.command_send) get_wifi_list_command_send();
-          break;
-
-        case 998:
-          if (uiCfg.print_state == IDLE) {
-            int v = atoi((char *)tmpStr);
-            if (v == 0)
-              set_cur_file_sys(0);
-            else if (v == 1)
-              set_cur_file_sys(1);
-            wifi_ret_ack();
-          }
-          break;
-
-        case 115:
-          ZERO(tempBuf);
-          SEND_OK_TO_WIFI;
-          send_to_wifi((uint8_t *)"FIRMWARE_NAME:Robin_nano\r\n", strlen("FIRMWARE_NAME:Robin_nano\r\n"));
-          break;
-
-        default:
-          strcat_P((char *)cmd_line, PSTR("\n"));
-
-          if (espGcodeFifo.wait_tick > 5) {
-            uint32_t left;
-            if (espGcodeFifo.r > espGcodeFifo.w)
-              left = espGcodeFifo.r - espGcodeFifo.w - 1;
-            else
-              left = WIFI_GCODE_BUFFER_SIZE + espGcodeFifo.r - espGcodeFifo.w - 1;
-
-            if (left >= strlen((const char *)cmd_line)) {
-              uint32_t index = 0;
-              while (index < strlen((const char *)cmd_line)) {
-                espGcodeFifo.Buffer[espGcodeFifo.w] = cmd_line[index] ;
-                espGcodeFifo.w = (espGcodeFifo.w + 1) % WIFI_GCODE_BUFFER_SIZE;
-                index++;
-              }
-              if (left - WIFI_GCODE_BUFFER_LEAST_SIZE >= strlen((const char *)cmd_line))
-                SEND_OK_TO_WIFI;
-              else
-                need_ok_later = true;
-            }
-          }
-          break;
-      }
-    }
-    else {
-      strcat_P((char *)cmd_line, PSTR("\n"));
-
-      if (espGcodeFifo.wait_tick > 5) {
-        uint32_t left_g;
-        if (espGcodeFifo.r > espGcodeFifo.w)
-          left_g = espGcodeFifo.r - espGcodeFifo.w - 1;
-        else
-          left_g = WIFI_GCODE_BUFFER_SIZE + espGcodeFifo.r - espGcodeFifo.w - 1;
-
-        if (left_g >= strlen((const char *)cmd_line)) {
-          uint32_t index = 0;
-          while (index < strlen((const char *)cmd_line)) {
-            espGcodeFifo.Buffer[espGcodeFifo.w] = cmd_line[index] ;
-            espGcodeFifo.w = (espGcodeFifo.w + 1) % WIFI_GCODE_BUFFER_SIZE;
-            index++;
-          }
-          if (left_g - WIFI_GCODE_BUFFER_LEAST_SIZE >= strlen((const char *)cmd_line))
-            SEND_OK_TO_WIFI;
-          else
-            need_ok_later = true;
-        }
-      }
-    }
-  }
-}
-
-static int32_t charAtArray(const uint8_t *_array, uint32_t _arrayLen, uint8_t _char) {
-  for (uint32_t i = 0; i < _arrayLen; i++)
-    if (*(_array + i) == _char) return i;
-  return -1;
-}
-
-void get_wifi_list_command_send() {
-  uint8_t cmd_wifi_list[] = { 0xA5, 0x07, 0x00, 0x00, 0xFC };
-  raw_send_to_wifi(cmd_wifi_list, COUNT(cmd_wifi_list));
-}
-
-static void net_msg_handle(uint8_t * msg, uint16_t msgLen) {
-  int wifiNameLen, wifiKeyLen, hostLen, id_len, ver_len;
-
-  if (msgLen <= 0) return;
-
-  // ip
-  sprintf_P(ipPara.ip_addr, PSTR("%d.%d.%d.%d"), msg[0], msg[1], msg[2], msg[3]);
-
-  // port
-  // connect state
-  switch (msg[6]) {
-    case 0x0A: wifi_link_state = WIFI_CONNECTED; break;
-    case 0x0E: wifi_link_state = WIFI_EXCEPTION; break;
-    default:   wifi_link_state = WIFI_NOT_CONFIG; break;
-  }
-
-  // mode
-  wifiPara.mode = msg[7];
-
-  // wifi name
-  wifiNameLen = msg[8];
-  wifiKeyLen = msg[9 + wifiNameLen];
-  if (wifiNameLen < 32) {
-    ZERO(wifiPara.ap_name);
-    memcpy(wifiPara.ap_name, &msg[9], wifiNameLen);
-
-    memset(&wifi_list.wifiConnectedName, 0, sizeof(wifi_list.wifiConnectedName));
-    memcpy(&wifi_list.wifiConnectedName, &msg[9], wifiNameLen);
-
-    // wifi key
-    if (wifiKeyLen < 64) {
-      ZERO(wifiPara.keyCode);
-      memcpy(wifiPara.keyCode, &msg[10 + wifiNameLen], wifiKeyLen);
-    }
-  }
-
-  cloud_para.state =msg[10 + wifiNameLen + wifiKeyLen];
-  hostLen = msg[11 + wifiNameLen + wifiKeyLen];
-  if (cloud_para.state) {
-    if (hostLen < 96) {
-      ZERO(cloud_para.hostUrl);
-      memcpy(cloud_para.hostUrl, &msg[12 + wifiNameLen + wifiKeyLen], hostLen);
-    }
-    cloud_para.port = msg[12 + wifiNameLen + wifiKeyLen + hostLen] + (msg[13 + wifiNameLen + wifiKeyLen + hostLen] << 8);
-  }
-
-  // id
-  id_len = msg[14 + wifiNameLen + wifiKeyLen + hostLen];
-  if (id_len == 20) {
-    ZERO(cloud_para.id);
-    memcpy(cloud_para.id, (const char *)&msg[15 + wifiNameLen + wifiKeyLen + hostLen], id_len);
-  }
-  ver_len = msg[15 + wifiNameLen + wifiKeyLen + hostLen + id_len];
-  if (ver_len < 20) {
-    ZERO(wifi_firm_ver);
-    memcpy(wifi_firm_ver, (const char *)&msg[16 + wifiNameLen + wifiKeyLen + hostLen + id_len], ver_len);
-  }
-
-  if (uiCfg.configWifi) {
-    if ((wifiPara.mode != gCfgItems.wifi_mode_sel)
-      || (strncmp(wifiPara.ap_name, (const char *)uiCfg.wifi_name, 32) != 0)
-      || (strncmp(wifiPara.keyCode, (const char *)uiCfg.wifi_key, 64) != 0)) {
-      package_to_wifi(WIFI_PARA_SET, (uint8_t *)0, 0);
-    }
-    else uiCfg.configWifi = false;
-  }
-  if (cfg_cloud_flag == 1) {
-    if (((cloud_para.state >> 4) != (char)gCfgItems.cloud_enable)
-      || (strncmp(cloud_para.hostUrl, (const char *)uiCfg.cloud_hostUrl, 96) != 0)
-      || (cloud_para.port != uiCfg.cloud_port)) {
-      package_to_wifi(WIFI_CLOUD_CFG, (uint8_t *)0, 0);
-    }
-    else cfg_cloud_flag = 0;
-  }
-}
-
-static void wifi_list_msg_handle(uint8_t * msg, uint16_t msgLen) {
-  int wifiNameLen,wifiMsgIdex = 1;
-  int8_t wifi_name_is_same = 0;
-  int8_t i, j;
-  int8_t wifi_name_num = 0;
-  uint8_t *str = 0;
-  int8_t valid_name_num;
-
-  if (msgLen <= 0) return;
-  if (disp_state == KEYBOARD_UI) return;
-
-  wifi_list.getNameNum = msg[0];
-
-  if (wifi_list.getNameNum < 20) {
-    uiCfg.command_send = true;
-    ZERO(wifi_list.wifiName);
-    wifi_name_num = wifi_list.getNameNum;
-    valid_name_num = 0;
-    str = wifi_list.wifiName[0];
-
-    if (wifi_list.getNameNum > 0) wifi_list.currentWifipage = 1;
-
-    for (i = 0; i < wifi_list.getNameNum; i++) {
-      wifiNameLen = msg[wifiMsgIdex++];
-      if (wifiNameLen < 32) {
-        memset(str, 0, WIFI_NAME_BUFFER_SIZE);
-        memcpy(str, &msg[wifiMsgIdex], wifiNameLen);
-        for (j = 0; j < valid_name_num; j++) {
-          if (strcmp((const char *)str, (const char *)wifi_list.wifiName[j]) == 0) {
-            wifi_name_is_same = 1;
-            break;
-          }
-        }
-
-        if (wifi_name_is_same != 1 && str[0] > 0x80)
-          wifi_name_is_same = 1;
-
-        if (wifi_name_is_same == 1) {
-          wifi_name_is_same = 0;
-          wifiMsgIdex  +=  wifiNameLen;
-          wifiMsgIdex  +=  1;
-          wifi_name_num--;
-          //i--;
-          continue;
-        }
-        if (i < WIFI_TOTAL_NUMBER - 1)
-          str = wifi_list.wifiName[++valid_name_num];
-      }
-      wifiMsgIdex += wifiNameLen;
-      wifi_list.RSSI[i] = msg[wifiMsgIdex++];
-    }
-    wifi_list.getNameNum = wifi_name_num;
-    wifi_list.getPage = wifi_list.getNameNum / NUMBER_OF_PAGE + ((wifi_list.getNameNum % NUMBER_OF_PAGE) != 0);
-    wifi_list.nameIndex = 0;
-
-    if (disp_state == WIFI_LIST_UI) disp_wifi_list();
-  }
-}
-
-static void gcode_msg_handle(uint8_t * msg, uint16_t msgLen) {
-  uint8_t gcodeBuf[100] = { 0 };
-  char *index_s, *index_e;
-
-  if (msgLen <= 0) return;
-
-  index_s = (char *)msg;
-  index_e = (char *)strchr((char *)msg, '\n');
-  if (*msg == 'N') {
-    index_s = (char *)strchr((char *)msg, ' ');
-    while (*index_s == ' ') index_s++;
-  }
-  while ((index_e != 0) && ((int)index_s < (int)index_e)) {
-    if ((int)(index_e - index_s) < (int)sizeof(gcodeBuf)) {
-      ZERO(gcodeBuf);
-      memcpy(gcodeBuf, index_s, index_e - index_s + 1);
-      wifi_gcode_exec(gcodeBuf);
-    }
-    while ((*index_e == '\r') || (*index_e == '\n')) index_e++;
-    index_s = index_e;
-    index_e = (char *)strchr(index_s, '\n');
-  }
-}
-
-void utf8_2_unicode(uint8_t *source, uint8_t Len) {
-  uint8_t i = 0, char_i = 0, char_byte_num = 0;
-  uint16_t u16_h, u16_m, u16_l, u16_value;
-  uint8_t FileName_unicode[30];
-
-  ZERO(FileName_unicode);
-
-  while (1) {
-    char_byte_num = source[i] & 0xF0;
-    if (source[i] < 0x80) {
-      //ASCII --1byte
-      FileName_unicode[char_i] = source[i];
-      i += 1;
-      char_i += 1;
-    }
-    else if (char_byte_num == 0xC0 || char_byte_num == 0xD0) {
-      //--2byte
-      u16_h = (((uint16_t)source[i] << 8) & 0x1F00) >> 2;
-      u16_l = ((uint16_t)source[i + 1] & 0x003F);
-      u16_value = (u16_h | u16_l);
-      FileName_unicode[char_i] = (uint8_t)((u16_value & 0xFF00) >> 8);
-      FileName_unicode[char_i + 1] = (uint8_t)(u16_value & 0x00FF);
-      i += 2;
-      char_i += 2;
-    }
-    else if (char_byte_num == 0xE0) {
-      //--3byte
-      u16_h = (((uint16_t)source[i] << 8) & 0x0F00) << 4;
-      u16_m = (((uint16_t)source[i + 1] << 8) & 0x3F00) >> 2;
-      u16_l = ((uint16_t)source[i + 2] & 0x003F);
-      u16_value = (u16_h | u16_m | u16_l);
-      FileName_unicode[char_i] = (uint8_t)((u16_value & 0xFF00) >> 8);
-      FileName_unicode[char_i + 1] = (uint8_t)(u16_value & 0x00FF);
-      i += 3;
-      char_i += 2;
-    }
-    else if (char_byte_num == 0xF0) {
-      //--4byte
-      i += 4;
-      //char_i += 3;
-    }
-    else
-      break;
-
-    if (i >= Len || i >= 255) break;
-  }
-  COPY(source, FileName_unicode);
-}
-
-static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
-  uint8_t fileNameLen = *msg;
-
-  if (msgLen != fileNameLen + 5) return;
-
-  file_writer.fileLen = *((uint32_t *)(msg + 1));
-  ZERO(file_writer.saveFileName);
-
-  memcpy(file_writer.saveFileName, msg + 5, fileNameLen);
-
-  utf8_2_unicode(file_writer.saveFileName,fileNameLen);
-
-  ZERO(public_buf);
-
-  if (strlen((const char *)file_writer.saveFileName) > sizeof(saveFilePath))
-    return;
-
-  ZERO(saveFilePath);
-
-  if (gCfgItems.fileSysType == FILE_SYS_SD) {
-    TERN_(SDSUPPORT, card.mount());
-  }
-  else if (gCfgItems.fileSysType == FILE_SYS_USB) {
-
-  }
-  file_writer.write_index = 0;
-  lastFragment = -1;
-
-  wifiTransError.flag = 0;
-  wifiTransError.start_tick = 0;
-  wifiTransError.now_tick = 0;
-
-  TERN_(SDSUPPORT, card.closefile());
-
-  wifi_delay(1000);
-
-  #if ENABLED(SDSUPPORT)
-
-    char dosName[FILENAME_LENGTH];
-
-    if (!longName2DosName((const char *)file_writer.saveFileName, dosName)) {
-      clear_cur_ui();
-      upload_result = 2;
-      wifiTransError.flag = 1;
-      wifiTransError.start_tick = getWifiTick();
-      lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
-      return;
-    }
-    strcpy((char *)saveFilePath, dosName);
-
-    card.cdroot();
-    upload_file.close();
-    const char * const fname = card.diveToFile(true, upload_curDir, saveFilePath);
-
-    if (!upload_file.open(upload_curDir, fname, O_CREAT | O_APPEND | O_WRITE | O_TRUNC)) {
-      clear_cur_ui();
-      upload_result = 2;
-
-      wifiTransError.flag = 1;
-      wifiTransError.start_tick = getWifiTick();
-
-      lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
-      return;
-    }
-
-  #endif // SDSUPPORT
-
-  wifi_link_state = WIFI_TRANS_FILE;
-
-  upload_result = 1;
-
-  clear_cur_ui();
-  lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
-
-  lv_task_handler();
-
-  file_writer.tick_begin = getWifiTick();
-
-  file_writer.fileTransfer = 1;
-}
-
-#define FRAG_MASK ~_BV32(31)
-
-static void file_fragment_msg_handle(uint8_t * msg, uint16_t msgLen) {
-  uint32_t frag = *((uint32_t *)msg);
-  if ((frag & FRAG_MASK) != (uint32_t)(lastFragment + 1)) {
-    ZERO(public_buf);
-    file_writer.write_index = 0;
-    wifi_link_state = WIFI_CONNECTED;
-    upload_result = 2;
-  }
-  else {
-    if (write_to_file((char *)msg + 4, msgLen - 4) < 0) {
-      ZERO(public_buf);
-      file_writer.write_index = 0;
-      wifi_link_state = WIFI_CONNECTED;
-      upload_result = 2;
-      return;
-    }
-    lastFragment = frag;
-
-    if ((frag & (~FRAG_MASK)) != 0) {
-      int res = upload_file.write(public_buf, file_writer.write_index);
-      if (res == -1) {
-        upload_file.close();
-        const char * const fname = card.diveToFile(true, upload_curDir, saveFilePath);
-        if (upload_file.open(upload_curDir, fname, O_WRITE)) {
-          upload_file.setpos(&pos);
-          res = upload_file.write(public_buf, file_writer.write_index);
-        }
-      }
-      upload_file.close();
-      SdFile file, *curDir;
-      const char * const fname = card.diveToFile(true, curDir, saveFilePath);
-      if (file.open(curDir, fname, O_RDWR)) {
-        gCfgItems.curFilesize = file.fileSize();
-        file.close();
-      }
-      else {
-        ZERO(public_buf);
-        file_writer.write_index = 0;
-        wifi_link_state = WIFI_CONNECTED;
-        upload_result = 2;
-        return;
-      }
-      ZERO(public_buf);
-      file_writer.write_index = 0;
-      file_writer.tick_end = getWifiTick();
-      upload_time = getWifiTickDiff(file_writer.tick_begin, file_writer.tick_end) / 1000;
-      upload_size = gCfgItems.curFilesize;
-      wifi_link_state = WIFI_CONNECTED;
-      upload_result = 3;
-    }
-  }
-}
-
-void esp_data_parser(char *cmdRxBuf, int len) {
-  int32_t head_pos, tail_pos;
-  uint16_t cpyLen;
-  int16_t leftLen = len;
-  bool loop_again = false;
-
-  ESP_PROTOC_FRAME esp_frame;
-
-  while (leftLen > 0 || loop_again) {
-    loop_again = false;
-
-    if (esp_msg_index != 0) {
-      head_pos = 0;
-      cpyLen = (leftLen < (int16_t)((sizeof(esp_msg_buf) - esp_msg_index)) ? leftLen : sizeof(esp_msg_buf) - esp_msg_index);
-
-      memcpy(&esp_msg_buf[esp_msg_index], cmdRxBuf + len - leftLen, cpyLen);
-
-      esp_msg_index += cpyLen;
-
-      leftLen = leftLen - cpyLen;
-      tail_pos = charAtArray(esp_msg_buf, esp_msg_index, ESP_PROTOC_TAIL);
-
-      if (tail_pos == -1) {
-        if (esp_msg_index >= sizeof(esp_msg_buf)) {
-          ZERO(esp_msg_buf);
-          esp_msg_index = 0;
-        }
-        return;
-      }
-    }
-    else {
-      head_pos = charAtArray((uint8_t const *)&cmdRxBuf[len - leftLen], leftLen, ESP_PROTOC_HEAD);
-      if (head_pos == -1) return;
-
-      ZERO(esp_msg_buf);
-      memcpy(esp_msg_buf, &cmdRxBuf[len - leftLen + head_pos], leftLen - head_pos);
-
-      esp_msg_index = leftLen - head_pos;
-
-      leftLen = 0;
-      head_pos = 0;
-      tail_pos = charAtArray(esp_msg_buf, esp_msg_index, ESP_PROTOC_TAIL);
-      if (tail_pos == -1) {
-        if (esp_msg_index >= sizeof(esp_msg_buf)) {
-          ZERO(esp_msg_buf);
-          esp_msg_index = 0;
-        }
-        return;
-      }
-    }
-
-    esp_frame.type = esp_msg_buf[1];
-    if (  esp_frame.type != ESP_TYPE_NET
-       && esp_frame.type != ESP_TYPE_GCODE
-       && esp_frame.type != ESP_TYPE_FILE_FIRST
-       && esp_frame.type != ESP_TYPE_FILE_FRAGMENT
-       && esp_frame.type != ESP_TYPE_WIFI_LIST
-    ) {
-      ZERO(esp_msg_buf);
-      esp_msg_index = 0;
-      return;
-    }
-
-    esp_frame.dataLen = esp_msg_buf[2] + (esp_msg_buf[3] << 8);
-
-    if ((int)(4 + esp_frame.dataLen) > (int)(sizeof(esp_msg_buf))) {
-      ZERO(esp_msg_buf);
-      esp_msg_index = 0;
-      return;
-    }
-
-    if (esp_msg_buf[4 + esp_frame.dataLen] != ESP_PROTOC_TAIL) {
-      if (esp_msg_index >= sizeof(esp_msg_buf)) {
-        ZERO(esp_msg_buf);
-        esp_msg_index = 0;
-      }
-      return;
-    }
-
-    esp_frame.data = &esp_msg_buf[4];
-    switch (esp_frame.type) {
-      case ESP_TYPE_NET:
-        net_msg_handle(esp_frame.data, esp_frame.dataLen);
-        break;
-      case ESP_TYPE_GCODE:
-        gcode_msg_handle(esp_frame.data, esp_frame.dataLen);
-        break;
-      case ESP_TYPE_FILE_FIRST:
-        file_first_msg_handle(esp_frame.data, esp_frame.dataLen);
-        break;
-      case ESP_TYPE_FILE_FRAGMENT:
-        file_fragment_msg_handle(esp_frame.data, esp_frame.dataLen);
-        break;
-      case ESP_TYPE_WIFI_LIST:
-        wifi_list_msg_handle(esp_frame.data, esp_frame.dataLen);
-        break;
-      default: break;
-    }
-
-    esp_msg_index = cut_msg_head(esp_msg_buf, esp_msg_index, esp_frame.dataLen  + 5);
-    if (esp_msg_index > 0) {
-      if (charAtArray(esp_msg_buf, esp_msg_index,  ESP_PROTOC_HEAD) == -1) {
-        ZERO(esp_msg_buf);
-        esp_msg_index = 0;
-        return;
-      }
-      if ((charAtArray(esp_msg_buf, esp_msg_index,  ESP_PROTOC_HEAD) != -1) && (charAtArray(esp_msg_buf, esp_msg_index, ESP_PROTOC_TAIL) != -1))
-        loop_again = true;
-    }
-  }
-}
-
-int32_t tick_net_time1, tick_net_time2;
-int32_t readWifiFifo(uint8_t *retBuf, uint32_t bufLen) {
-  unsigned char tmpR = wifiDmaRcvFifo.read_cur;
-  if (bufLen >= UDISKBUFLEN && wifiDmaRcvFifo.state[tmpR] == udisk_buf_full) {
-    memcpy(retBuf, (unsigned char *)wifiDmaRcvFifo.bufferAddr[tmpR], UDISKBUFLEN);
-    wifiDmaRcvFifo.state[tmpR] = udisk_buf_empty;
-    wifiDmaRcvFifo.read_cur = (tmpR + 1) % TRANS_RCV_FIFO_BLOCK_NUM;
-    return UDISKBUFLEN;
-  }
-  return 0;
-}
-
-void stopEspTransfer() {
-  if (wifi_link_state == WIFI_TRANS_FILE)
-  wifi_link_state = WIFI_CONNECTED;
-
-  TERN_(SDSUPPORT, card.closefile());
-
-  if (upload_result != 3) {
-    wifiTransError.flag = 1;
-    wifiTransError.start_tick = getWifiTick();
-    card.removeFile((const char *)saveFilePath);
-  }
-
-  wifi_delay(200);
-  WIFI_IO1_SET();
-
-  // disable dma
-  dma_clear_isr_bits(DMA1, DMA_CH5);
-  bb_peri_set_bit(&USART1_BASE->CR3, USART_CR3_DMAR_BIT, 0);
-  dma_disable(DMA1, DMA_CH5);
-
-  wifi_delay(200);
-  changeFlashMode(true); // Set SPI flash to use DMA mode
-  esp_port_begin(1);
-  wifi_delay(200);
-
-  W25QXX.init(SPI_QUARTER_SPEED);
-
-  TERN_(HAS_TFT_LVGL_UI_SPI, SPI_TFT.spi_init(SPI_FULL_SPEED));
-  TERN_(HAS_SERVOS, servo_init());
-  TERN_(HAS_Z_SERVO_PROBE, probe.servo_probe_init());
-
-  if (wifiTransError.flag != 0x1) WIFI_IO1_RESET();
-}
-
-void wifi_rcv_handle() {
-  int32_t len = 0;
-  uint8_t ucStr[(UART_RX_BUFFER_SIZE) + 1] = {0};
-  int8_t getDataF = 0;
-  if (wifi_link_state == WIFI_TRANS_FILE) {
-    #if 0
-      if (WIFISERIAL.available() == UART_RX_BUFFER_SIZE) {
-        for (uint16_t i=0;i<UART_RX_BUFFER_SIZE;i++) {
-          ucStr[i] = WIFISERIAL.read();
-          len++;
-        }
-      }
-    #else
-      len = readWifiFifo(ucStr, UART_RX_BUFFER_SIZE);
-    #endif
-    if (len > 0) {
-      esp_data_parser((char *)ucStr, len);
-      if (wifi_link_state == WIFI_CONNECTED) {
-        clear_cur_ui();
-        lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
-        stopEspTransfer();
-      }
-      getDataF = 1;
-    }
-    if (esp_state == TRANSFER_STORE) {
-      if (storeRcvData(WIFISERIAL.usart_device->rb->buf, UART_RX_BUFFER_SIZE)) {
-        esp_state = TRANSFERING;
-        esp_dma_pre();
-        if (wifiTransError.flag != 0x1) WIFI_IO1_RESET();
-      }
-      else
-        WIFI_IO1_SET();
-    }
-  }
-  else {
-    len = readWifiBuf((int8_t *)ucStr, UART_RX_BUFFER_SIZE);
-    if (len > 0) {
-      esp_data_parser((char *)ucStr, len);
-      if (wifi_link_state == WIFI_TRANS_FILE) {
-        changeFlashMode(false); // Set SPI flash to use non-DMA mode
-        wifi_delay(10);
-        esp_port_begin(0);
-        wifi_delay(10);
-        tick_net_time1 = 0;
-      }
-      if (wifiTransError.flag != 0x1) WIFI_IO1_RESET();
-      getDataF = 1;
-    }
-    if (need_ok_later && !queue.ring_buffer.full()) {
-      need_ok_later = false;
-      send_to_wifi((uint8_t *)"ok\r\n", strlen("ok\r\n"));
-    }
-  }
-
-  if (getDataF == 1) {
-    tick_net_time1 = getWifiTick();
-  }
-  else {
-    tick_net_time2 = getWifiTick();
-
-    if (wifi_link_state == WIFI_TRANS_FILE) {
-      if (tick_net_time1 && getWifiTickDiff(tick_net_time1, tick_net_time2) > 8000) {
-        wifi_link_state = WIFI_CONNECTED;
-        upload_result = 2;
-        clear_cur_ui();
-        stopEspTransfer();
-        lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
-      }
-    }
-    if (tick_net_time1 && getWifiTickDiff(tick_net_time1, tick_net_time2) > 10000)
-      wifi_link_state = WIFI_NOT_CONFIG;
-
-    if (tick_net_time1 && getWifiTickDiff(tick_net_time1, tick_net_time2) > 120000) {
-      wifi_link_state = WIFI_NOT_CONFIG;
-      wifi_reset();
-      tick_net_time1 = getWifiTick();
-    }
-  }
-
-  if (wifiTransError.flag == 0x1) {
-    wifiTransError.now_tick = getWifiTick();
-    if (getWifiTickDiff(wifiTransError.start_tick, wifiTransError.now_tick) > WAIT_ESP_TRANS_TIMEOUT_TICK) {
-      wifiTransError.flag = 0;
-      WIFI_IO1_RESET();
-    }
-  }
-}
-
-void wifi_looping() {
-  do {
-    wifi_rcv_handle();
-    watchdog_refresh();
-  } while (wifi_link_state == WIFI_TRANS_FILE);
-}
-
-void mks_esp_wifi_init() {
-  wifi_link_state = WIFI_NOT_CONFIG;
-
-  SET_OUTPUT(WIFI_RESET_PIN);
-  WIFI_SET();
-  SET_OUTPUT(WIFI_IO1_PIN);
-  SET_INPUT_PULLUP(WIFI_IO0_PIN);
-  WIFI_IO1_SET();
-
-  esp_state = TRANSFER_IDLE;
-  esp_port_begin(1);
-
-  wifi_reset();
-
-  #if 0
-  if (update_flag == 0) {
-    res = f_open(&esp_upload.uploadFile, ESP_WEB_FIRMWARE_FILE,  FA_OPEN_EXISTING | FA_READ);
-
-      if (res ==  FR_OK) {
-        f_close(&esp_upload.uploadFile);
-
-        wifi_delay(2000);
-
-        if (usartFifoAvailable((SZ_USART_FIFO *)&WifiRxFifo) < 20) {
-          return;
-        }
-
-        clear_cur_ui();
-
-        draw_dialog(DIALOG_TYPE_UPDATE_ESP_FIRMWARE);
-        if (wifi_upload(1) >= 0) {
-
-          f_unlink("1:/MKS_WIFI_CUR");
-          f_rename(ESP_WEB_FIRMWARE_FILE,"/MKS_WIFI_CUR");
-        }
-        draw_return_ui();
-        update_flag = 1;
-      }
-
-    }
-    if (update_flag == 0) {
-      res = f_open(&esp_upload.uploadFile, ESP_WEB_FILE,  FA_OPEN_EXISTING | FA_READ);
-      if (res ==  FR_OK) {
-        f_close(&esp_upload.uploadFile);
-
-        wifi_delay(2000);
-
-        if (usartFifoAvailable((SZ_USART_FIFO *)&WifiRxFifo) < 20) {
-          return;
-        }
-
-        clear_cur_ui();
-
-        draw_dialog(DIALOG_TYPE_UPDATE_ESP_DATA);
-
-        if (wifi_upload(2) >= 0) {
-
-          f_unlink("1:/MKS_WEB_CONTROL_CUR");
-          f_rename(ESP_WEB_FILE,"/MKS_WEB_CONTROL_CUR");
-        }
-        draw_return_ui();
-      }
-    }
-  #endif
-  wifiPara.decodeType = WIFI_DECODE_TYPE;
-  wifiPara.baud = 115200;
-  wifi_link_state = WIFI_NOT_CONFIG;
-}
-
-void mks_wifi_firmware_update() {
-  card.openFileRead((char *)ESP_FIRMWARE_FILE);
-
-  if (card.isFileOpen()) {
-    card.closefile();
-
-    wifi_delay(2000);
-
-    if (usartFifoAvailable((SZ_USART_FIFO *)&WifiRxFifo) < 20)
-      return;
-
-    clear_cur_ui();
-
-    lv_draw_dialog(DIALOG_TYPE_UPDATE_ESP_FIRMWARE);
-
-    lv_task_handler();
-    watchdog_refresh();
-
-    if (wifi_upload(0) >= 0) {
-      card.removeFile((char *)ESP_FIRMWARE_FILE_RENAME);
-      SdFile file, *curDir;
-      const char * const fname = card.diveToFile(true, curDir, ESP_FIRMWARE_FILE);
-      if (file.open(curDir, fname, O_READ)) {
-        file.rename(curDir, (char *)ESP_FIRMWARE_FILE_RENAME);
-        file.close();
-      }
-    }
-    clear_cur_ui();
-  }
-}
-
-#define BUF_INC_POINTER(p)  ((p + 1 == UART_FIFO_BUFFER_SIZE) ? 0:(p + 1))
-
-int usartFifoAvailable(SZ_USART_FIFO *fifo) {
-  return WIFISERIAL.available();
-}
-
-void get_wifi_commands() {
-  static char wifi_line_buffer[MAX_CMD_SIZE];
-  static bool wifi_comment_mode = false;
-  static int wifi_read_count = 0;
-
-  if (espGcodeFifo.wait_tick > 5) {
-    while (!queue.ring_buffer.full() && (espGcodeFifo.r != espGcodeFifo.w)) {
-
-      espGcodeFifo.wait_tick = 0;
-
-      char wifi_char = espGcodeFifo.Buffer[espGcodeFifo.r];
-
-      espGcodeFifo.r = (espGcodeFifo.r + 1) % WIFI_GCODE_BUFFER_SIZE;
-
-      /**
-       * If the character ends the line
-       */
-      if (wifi_char == '\n' || wifi_char == '\r') {
-
-        wifi_comment_mode = false; // end of line == end of comment
-
-        if (!wifi_read_count) continue; // skip empty lines
-
-        wifi_line_buffer[wifi_read_count] = 0; // terminate string
-        wifi_read_count = 0; //reset buffer
-
-        char* command = wifi_line_buffer;
-        while (*command == ' ') command++; // skip any leading spaces
-
-          // Movement commands alert when stopped
-          if (IsStopped()) {
-          char* gpos = strchr(command, 'G');
-          if (gpos) {
-            switch (strtol(gpos + 1, nullptr, 10)) {
-              case 0 ... 1:
-              #if ENABLED(ARC_SUPPORT)
-                case 2 ... 3:
-              #endif
-              #if ENABLED(BEZIER_CURVE_SUPPORT)
-                case 5:
-              #endif
-                SERIAL_ECHOLNPGM(STR_ERR_STOPPED);
-                LCD_MESSAGEPGM(MSG_STOPPED);
-                break;
-            }
-          }
-        }
-
-        #if DISABLED(EMERGENCY_PARSER)
-          // Process critical commands early
-          if (strcmp(command, "M108") == 0) {
-            wait_for_heatup = false;
-            TERN_(HAS_LCD_MENU, wait_for_user = false);
-          }
-          if (strcmp(command, "M112") == 0) kill(M112_KILL_STR, nullptr, true);
-          if (strcmp(command, "M410") == 0) quickstop_stepper();
-        #endif
-
-        // Add the command to the queue
-        queue.enqueue_one_P(wifi_line_buffer);
-      }
-      else if (wifi_read_count >= MAX_CMD_SIZE - 1) {
-
-      }
-      else { // it's not a newline, carriage return or escape char
-        if (wifi_char == ';') wifi_comment_mode = true;
-        if (!wifi_comment_mode) wifi_line_buffer[wifi_read_count++] = wifi_char;
-      }
-    }
-  } // queue has space, serial has data
-  else
-    espGcodeFifo.wait_tick++;
-}
-
-int readWifiBuf(int8_t *buf, int32_t len) {
-  int i = 0;
-  while (i < len && WIFISERIAL.available())
-    buf[i++] = WIFISERIAL.read();
-  return i;
-}
-
-#endif // HAS_TFT_LVGL_UI && MKS_WIFI_MODULE

commit c4620bb5285438e41fa4c39229aa2a39859877ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 23 20:19:23 2021 -0500

    Add whole-degree accessors, simplify some temperature-related features (#21685)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index 1162f7a228..4dd092e64b 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -885,7 +885,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             char *outBuf = (char *)tempBuf;
             char tbuf[34];
 
-            sprintf_P(tbuf, PSTR("%d /%d"), (int)thermalManager.degHotend(0), (int)thermalManager.degTargetHotend(0));
+            sprintf_P(tbuf, PSTR("%d /%d"), thermalManager.wholeDegHotend(0), thermalManager.degTargetHotend(0));
 
             const int tlen = strlen(tbuf);
 
@@ -895,7 +895,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             strcpy_P(outBuf, PSTR(" B:"));
             outBuf += 3;
             #if HAS_HEATED_BED
-              sprintf_P(outBuf, PSTR("%d /%d"), (int)thermalManager.degBed(), (int)thermalManager.degTargetBed());
+              sprintf_P(outBuf, PSTR("%d /%d"), thermalManager.wholeDegBed(), thermalManager.degTargetBed());
             #else
               strcpy_P(outBuf, PSTR("0 /0"));
             #endif
@@ -908,7 +908,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             strcat_P(outBuf, PSTR(" T1:"));
             outBuf += 4;
             #if HAS_MULTI_HOTEND
-              sprintf_P(outBuf, PSTR("%d /%d"), (int)thermalManager.degHotend(1), (int)thermalManager.degTargetHotend(1));
+              sprintf_P(outBuf, PSTR("%d /%d"), thermalManager.wholeDegHotend(1), thermalManager.degTargetHotend(1));
             #else
               strcat_P(outBuf, PSTR("0 /0"));
             #endif
@@ -918,15 +918,15 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           }
           else {
             sprintf_P((char *)tempBuf, PSTR("T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n"),
-              thermalManager.degHotend(0), thermalManager.degTargetHotend(0),
+              thermalManager.wholeDegHotend(0), thermalManager.degTargetHotend(0),
               #if HAS_HEATED_BED
-                thermalManager.degBed(), thermalManager.degTargetBed(),
+                thermalManager.wholeDegBed(), thermalManager.degTargetBed(),
               #else
                 0, 0,
               #endif
-              thermalManager.degHotend(0), thermalManager.degTargetHotend(0),
+              thermalManager.wholeDegHotend(0), thermalManager.degTargetHotend(0),
               #if HAS_MULTI_HOTEND
-                thermalManager.degHotend(1), thermalManager.degTargetHotend(1)
+                thermalManager.wholeDegHotend(1), thermalManager.degTargetHotend(1)
               #else
                 0, 0
               #endif

commit 138340ee99a852bc116e2a436932bed074624fde
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Apr 13 19:34:19 2021 -0300

    Multi-Volume. Select Media for LVGL (#21344)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index 6c2afeafd3..1162f7a228 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -1142,7 +1142,7 @@ static void wifi_list_msg_handle(uint8_t * msg, uint16_t msgLen) {
   int8_t valid_name_num;
 
   if (msgLen <= 0) return;
-  if (disp_state == KEY_BOARD_UI) return;
+  if (disp_state == KEYBOARD_UI) return;
 
   wifi_list.getNameNum = msg[0];
 

commit 84c79d753156a396fca43dd62cd693454efac882
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Apr 13 15:07:25 2021 -0500

    Followup to sprintf cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index 51c492703e..6c2afeafd3 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -178,14 +178,14 @@ void changeFlashMode(const bool dmaMode) {
   }
 }
 
-static bool longName2DosName(const char *longName, uint8_t *dosName) {
+static bool longName2DosName(const char *longName, char *dosName) {
   uint8_t i;
   for (i = FILENAME_LENGTH; i--;) dosName[i] = '\0';
   while (*longName) {
     uint8_t c = *longName++;
     if (c == '.') { // For a dot...
       if (i == 0) return false;
-      strcat_P((char *)dosName, PSTR(".GCO"));
+      strcat_P(dosName, PSTR(".GCO"));
       break;
     }
     else {
@@ -196,7 +196,7 @@ static bool longName2DosName(const char *longName, uint8_t *dosName) {
       dosName[i++] = c + (WITHIN(c, 'a', 'z') ? 'A' - 'a' : 0); // Uppercase required for 8.3 name
     }
     if (i >= 5) {
-      strcat_P((char *)dosName, PSTR("~1.GCO"));
+      strcat_P(dosName, PSTR("~1.GCO"));
       break;
     }
   }
@@ -478,7 +478,7 @@ char wait_ip_back_flag = 0;
 
 typedef struct {
   int write_index;
-  char saveFileName[30];
+  uint8_t saveFileName[30];
   uint8_t fileTransfer;
   uint32_t fileLen;
   uint32_t tick_begin;
@@ -593,7 +593,7 @@ uint8_t Explore_Disk(char *path , uint8_t recu_level) {
 }
 
 static void wifi_gcode_exec(uint8_t *cmd_line) {
-  char tempBuf[100] = { 0 };
+  int8_t tempBuf[100] = { 0 };
   uint8_t *tmpStr = 0;
   int  cmd_value;
   volatile int print_rate;
@@ -631,7 +631,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             while (tmpStr[index] == ' ') index++;
 
             if (gCfgItems.wifi_type == ESP_WIFI) {
-              char *path = tempBuf;
+              char *path = (char *)tempBuf;
 
               if (strlen((char *)&tmpStr[index]) < 80) {
                 send_to_wifi((uint8_t *)"Begin file list\r\n", strlen("Begin file list\r\n"));
@@ -680,7 +680,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
                     strcat_P((char *)list_file.file_name[sel_id], PSTR("/"));
 
                   if (file_writer.fileTransfer == 1) {
-                    uint8_t dosName[FILENAME_LENGTH];
+                    char dosName[FILENAME_LENGTH];
                     uint8_t fileName[sizeof(list_file.file_name[sel_id])];
                     fileName[0] = '\0';
                     if (has_path_selected == 1) {
@@ -690,8 +690,8 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
                     else strcat((char *)fileName, (char *)&tmpStr[index]);
                     if (!longName2DosName((const char *)fileName, dosName))
                       strcpy_P(list_file.file_name[sel_id], PSTR("notValid"));
-                    strcat((char *)list_file.file_name[sel_id], (char *)dosName);
-                    strcat((char *)list_file.long_name[sel_id], (char *)dosName);
+                    strcat((char *)list_file.file_name[sel_id], dosName);
+                    strcat((char *)list_file.long_name[sel_id], dosName);
                   }
                   else {
                     strcat((char *)list_file.file_name[sel_id], (char *)&tmpStr[index]);
@@ -828,8 +828,8 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)|| (uiCfg.print_state == REPRINTING)) {
             print_rate = uiCfg.totalSend;
             ZERO(tempBuf);
-            sprintf_P(tempBuf, PSTR("M27 %d\r\n"), print_rate);
-            send_to_wifi((uint8_t *)tempBuf, strlen(tempBuf));
+            sprintf_P((char *)tempBuf, PSTR("M27 %d\r\n"), print_rate);
+            send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
           }
           break;
 
@@ -841,15 +841,15 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             while (tmpStr[index] == ' ') index++;
 
             if (strstr_P((char *)&tmpStr[index], PSTR(".g")) || strstr_P((char *)&tmpStr[index], PSTR(".G"))) {
-              strcpy(file_writer.saveFileName, (char *)&tmpStr[index]);
+              strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
 
               if (gCfgItems.fileSysType == FILE_SYS_SD) {
                 ZERO(tempBuf);
-                sprintf_P(tempBuf, PSTR("%s"), file_writer.saveFileName);
+                sprintf_P((char *)tempBuf, PSTR("%s"), file_writer.saveFileName);
               }
               else if (gCfgItems.fileSysType == FILE_SYS_USB) {
                 ZERO(tempBuf);
-                sprintf_P(tempBuf, PSTR("%s"), file_writer.saveFileName);
+                sprintf_P((char *)tempBuf, PSTR("%s"), (char *)file_writer.saveFileName);
               }
               mount_file_sys(gCfgItems.fileSysType);
 
@@ -858,11 +858,11 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
                 card.openFileWrite(cur_name);
                 if (card.isFileOpen()) {
                   ZERO(file_writer.saveFileName);
-                  strcpy(file_writer.saveFileName, (char *)&tmpStr[index]);
+                  strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
                   ZERO(tempBuf);
-                  sprintf_P(tempBuf, PSTR("Writing to file: %s\r\n"), file_writer.saveFileName);
+                  sprintf_P((char *)tempBuf, PSTR("Writing to file: %s\r\n"), (char *)file_writer.saveFileName);
                   wifi_ret_ack();
-                  send_to_wifi((uint8_t *)tempBuf, strlen(tempBuf));
+                  send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
                   wifi_link_state = WIFI_WAIT_TRANS_START;
                 }
                 else {
@@ -882,7 +882,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
 
             SEND_OK_TO_WIFI;
 
-            char *outBuf = tempBuf;
+            char *outBuf = (char *)tempBuf;
             char tbuf[34];
 
             sprintf_P(tbuf, PSTR("%d /%d"), (int)thermalManager.degHotend(0), (int)thermalManager.degTargetHotend(0));
@@ -917,7 +917,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             strcat_P(outBuf, PSTR(" @:0 B@:0\r\n"));
           }
           else {
-            sprintf_P(tempBuf, PSTR("T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n"),
+            sprintf_P((char *)tempBuf, PSTR("T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n"),
               thermalManager.degHotend(0), thermalManager.degTargetHotend(0),
               #if HAS_HEATED_BED
                 thermalManager.degBed(), thermalManager.degTargetBed(),
@@ -933,16 +933,16 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             );
           }
 
-          send_to_wifi((uint8_t *)tempBuf, strlen(tempBuf));
+          send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
           queue.enqueue_one_P(PSTR("M105"));
           break;
 
         case 992:
           if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)) {
             ZERO(tempBuf);
-            sprintf_P(tempBuf, PSTR("M992 %d%d:%d%d:%d%d\r\n"), print_time.hours/10, print_time.hours%10, print_time.minutes/10, print_time.minutes%10, print_time.seconds/10, print_time.seconds%10);
+            sprintf_P((char *)tempBuf, PSTR("M992 %d%d:%d%d:%d%d\r\n"), print_time.hours/10, print_time.hours%10, print_time.minutes/10, print_time.minutes%10, print_time.seconds/10, print_time.seconds%10);
             wifi_ret_ack();
-            send_to_wifi((uint8_t *)tempBuf, strlen(tempBuf));
+            send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
           }
           break;
 
@@ -950,9 +950,9 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)) {
             ZERO(tempBuf);
             if (strlen((char *)list_file.file_name[sel_id]) > (100 - 1)) return;
-            sprintf_P(tempBuf, PSTR("M994 %s;%d\n"), list_file.file_name[sel_id], (int)gCfgItems.curFilesize);
+            sprintf_P((char *)tempBuf, PSTR("M994 %s;%d\n"), list_file.file_name[sel_id], (int)gCfgItems.curFilesize);
             wifi_ret_ack();
-            send_to_wifi((uint8_t *)tempBuf, strlen(tempBuf));
+            send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
           }
           break;
 
@@ -1279,7 +1279,7 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
 
   ZERO(public_buf);
 
-  if (strlen(file_writer.saveFileName) > sizeof(saveFilePath))
+  if (strlen((const char *)file_writer.saveFileName) > sizeof(saveFilePath))
     return;
 
   ZERO(saveFilePath);
@@ -1305,7 +1305,7 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
 
     char dosName[FILENAME_LENGTH];
 
-    if (!longName2DosName(file_writer.saveFileName, dosName)) {
+    if (!longName2DosName((const char *)file_writer.saveFileName, dosName)) {
       clear_cur_ui();
       upload_result = 2;
       wifiTransError.flag = 1;
@@ -1313,7 +1313,7 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
       lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
       return;
     }
-    strcpy(saveFilePath, dosName);
+    strcpy((char *)saveFilePath, dosName);
 
     card.cdroot();
     upload_file.close();

commit 4e314ef6d4b29ea453431b5a37416dee39163c66
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Apr 13 03:49:20 2021 -0500

    More MKS UI sprintf

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index 957e245882..51c492703e 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -478,7 +478,7 @@ char wait_ip_back_flag = 0;
 
 typedef struct {
   int write_index;
-  uint8_t saveFileName[30];
+  char saveFileName[30];
   uint8_t fileTransfer;
   uint32_t fileLen;
   uint32_t tick_begin;
@@ -593,7 +593,7 @@ uint8_t Explore_Disk(char *path , uint8_t recu_level) {
 }
 
 static void wifi_gcode_exec(uint8_t *cmd_line) {
-  int8_t tempBuf[100] = { 0 };
+  char tempBuf[100] = { 0 };
   uint8_t *tmpStr = 0;
   int  cmd_value;
   volatile int print_rate;
@@ -631,7 +631,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             while (tmpStr[index] == ' ') index++;
 
             if (gCfgItems.wifi_type == ESP_WIFI) {
-              char *path = (char *)tempBuf;
+              char *path = tempBuf;
 
               if (strlen((char *)&tmpStr[index]) < 80) {
                 send_to_wifi((uint8_t *)"Begin file list\r\n", strlen("Begin file list\r\n"));
@@ -828,8 +828,8 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)|| (uiCfg.print_state == REPRINTING)) {
             print_rate = uiCfg.totalSend;
             ZERO(tempBuf);
-            sprintf_P((char *)tempBuf, PSTR("M27 %d\r\n"), print_rate);
-            send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
+            sprintf_P(tempBuf, PSTR("M27 %d\r\n"), print_rate);
+            send_to_wifi((uint8_t *)tempBuf, strlen(tempBuf));
           }
           break;
 
@@ -841,15 +841,15 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             while (tmpStr[index] == ' ') index++;
 
             if (strstr_P((char *)&tmpStr[index], PSTR(".g")) || strstr_P((char *)&tmpStr[index], PSTR(".G"))) {
-              strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
+              strcpy(file_writer.saveFileName, (char *)&tmpStr[index]);
 
               if (gCfgItems.fileSysType == FILE_SYS_SD) {
                 ZERO(tempBuf);
-                sprintf_P((char *)tempBuf, PSTR("%s"), file_writer.saveFileName);
+                sprintf_P(tempBuf, PSTR("%s"), file_writer.saveFileName);
               }
               else if (gCfgItems.fileSysType == FILE_SYS_USB) {
                 ZERO(tempBuf);
-                sprintf_P((char *)tempBuf, PSTR("%s"), (char *)file_writer.saveFileName);
+                sprintf_P(tempBuf, PSTR("%s"), file_writer.saveFileName);
               }
               mount_file_sys(gCfgItems.fileSysType);
 
@@ -858,11 +858,11 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
                 card.openFileWrite(cur_name);
                 if (card.isFileOpen()) {
                   ZERO(file_writer.saveFileName);
-                  strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
+                  strcpy(file_writer.saveFileName, (char *)&tmpStr[index]);
                   ZERO(tempBuf);
-                  sprintf_P((char *)tempBuf, PSTR("Writing to file: %s\r\n"), (char *)file_writer.saveFileName);
+                  sprintf_P(tempBuf, PSTR("Writing to file: %s\r\n"), file_writer.saveFileName);
                   wifi_ret_ack();
-                  send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
+                  send_to_wifi((uint8_t *)tempBuf, strlen(tempBuf));
                   wifi_link_state = WIFI_WAIT_TRANS_START;
                 }
                 else {
@@ -882,7 +882,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
 
             SEND_OK_TO_WIFI;
 
-            char *outBuf = (char *)tempBuf;
+            char *outBuf = tempBuf;
             char tbuf[34];
 
             sprintf_P(tbuf, PSTR("%d /%d"), (int)thermalManager.degHotend(0), (int)thermalManager.degTargetHotend(0));
@@ -917,7 +917,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             strcat_P(outBuf, PSTR(" @:0 B@:0\r\n"));
           }
           else {
-            sprintf_P((char *)tempBuf, PSTR("T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n"),
+            sprintf_P(tempBuf, PSTR("T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n"),
               thermalManager.degHotend(0), thermalManager.degTargetHotend(0),
               #if HAS_HEATED_BED
                 thermalManager.degBed(), thermalManager.degTargetBed(),
@@ -933,16 +933,16 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             );
           }
 
-          send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
+          send_to_wifi((uint8_t *)tempBuf, strlen(tempBuf));
           queue.enqueue_one_P(PSTR("M105"));
           break;
 
         case 992:
           if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)) {
             ZERO(tempBuf);
-            sprintf_P((char *)tempBuf, PSTR("M992 %d%d:%d%d:%d%d\r\n"), print_time.hours/10, print_time.hours%10, print_time.minutes/10, print_time.minutes%10, print_time.seconds/10, print_time.seconds%10);
+            sprintf_P(tempBuf, PSTR("M992 %d%d:%d%d:%d%d\r\n"), print_time.hours/10, print_time.hours%10, print_time.minutes/10, print_time.minutes%10, print_time.seconds/10, print_time.seconds%10);
             wifi_ret_ack();
-            send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
+            send_to_wifi((uint8_t *)tempBuf, strlen(tempBuf));
           }
           break;
 
@@ -950,9 +950,9 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)) {
             ZERO(tempBuf);
             if (strlen((char *)list_file.file_name[sel_id]) > (100 - 1)) return;
-            sprintf_P((char *)tempBuf, PSTR("M994 %s;%d\n"), list_file.file_name[sel_id], (int)gCfgItems.curFilesize);
+            sprintf_P(tempBuf, PSTR("M994 %s;%d\n"), list_file.file_name[sel_id], (int)gCfgItems.curFilesize);
             wifi_ret_ack();
-            send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
+            send_to_wifi((uint8_t *)tempBuf, strlen(tempBuf));
           }
           break;
 
@@ -1279,7 +1279,7 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
 
   ZERO(public_buf);
 
-  if (strlen((const char *)file_writer.saveFileName) > sizeof(saveFilePath))
+  if (strlen(file_writer.saveFileName) > sizeof(saveFilePath))
     return;
 
   ZERO(saveFilePath);
@@ -1303,9 +1303,9 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
 
   #if ENABLED(SDSUPPORT)
 
-    uint8_t dosName[FILENAME_LENGTH];
+    char dosName[FILENAME_LENGTH];
 
-    if (!longName2DosName((const char *)file_writer.saveFileName,dosName)) {
+    if (!longName2DosName(file_writer.saveFileName, dosName)) {
       clear_cur_ui();
       upload_result = 2;
       wifiTransError.flag = 1;

commit e0ed57db67ff191452f00808dc696c80dd8e03f7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 12 23:40:32 2021 -0500

    Remove extraneous MKS UI sprintf

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index 1057a0c689..957e245882 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -883,7 +883,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             SEND_OK_TO_WIFI;
 
             char *outBuf = (char *)tempBuf;
-            char str_1[16], tbuf[34];
+            char tbuf[34];
 
             sprintf_P(tbuf, PSTR("%d /%d"), (int)thermalManager.degHotend(0), (int)thermalManager.degTargetHotend(0));
 
@@ -1313,7 +1313,7 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
       lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
       return;
     }
-    sprintf_P((char *)saveFilePath, PSTR("%s"), dosName);
+    strcpy(saveFilePath, dosName);
 
     card.cdroot();
     upload_file.close();

commit 746eae15f36e4211a22d53b8e12e82edb55a13e5
Author: Malderin <52313714+Malderin@users.noreply.github.com>
Date:   Tue Apr 6 04:55:00 2021 +0300

    Cast celsius to int for MKS LVGL UI (#21502)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index a74ecd2f1e..1057a0c689 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -885,9 +885,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             char *outBuf = (char *)tempBuf;
             char str_1[16], tbuf[34];
 
-            dtostrf(thermalManager.degHotend(0), 1, 1, tbuf);
-            strcat_P(tbuf, PSTR(" /"));
-            strcat(tbuf, dtostrf(thermalManager.degTargetHotend(0), 1, 1, str_1));
+            sprintf_P(tbuf, PSTR("%d /%d"), (int)thermalManager.degHotend(0), (int)thermalManager.degTargetHotend(0));
 
             const int tlen = strlen(tbuf);
 
@@ -897,9 +895,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             strcpy_P(outBuf, PSTR(" B:"));
             outBuf += 3;
             #if HAS_HEATED_BED
-              strcpy(outBuf, dtostrf(thermalManager.degBed(), 1, 1, str_1));
-              strcat_P(outBuf, PSTR(" /"));
-              strcat(outBuf, dtostrf(thermalManager.degTargetBed(), 1, 1, str_1));
+              sprintf_P(outBuf, PSTR("%d /%d"), (int)thermalManager.degBed(), (int)thermalManager.degTargetBed());
             #else
               strcpy_P(outBuf, PSTR("0 /0"));
             #endif
@@ -912,9 +908,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             strcat_P(outBuf, PSTR(" T1:"));
             outBuf += 4;
             #if HAS_MULTI_HOTEND
-              strcat(outBuf, dtostrf(thermalManager.degHotend(1), 1, 1, str_1));
-              strcat_P(outBuf, PSTR(" /"));
-              strcat(outBuf, dtostrf(thermalManager.degTargetHotend(1), 1, 1, str_1));
+              sprintf_P(outBuf, PSTR("%d /%d"), (int)thermalManager.degHotend(1), (int)thermalManager.degTargetHotend(1));
             #else
               strcat_P(outBuf, PSTR("0 /0"));
             #endif

commit 98b2b45264c142053b6ddb015472d4fe2a08c78d
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Apr 4 18:35:58 2021 -0400

    Revert "Optimized string-to-number functions" (#21532)
    
    This reverts #21484

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index ac07dc0102..a74ecd2f1e 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -1799,7 +1799,7 @@ void get_wifi_commands() {
           if (IsStopped()) {
           char* gpos = strchr(command, 'G');
           if (gpos) {
-            switch (parse_int32(gpos + 1)) {
+            switch (strtol(gpos + 1, nullptr, 10)) {
               case 0 ... 1:
               #if ENABLED(ARC_SUPPORT)
                 case 2 ... 3:

commit 20d2061f22790bb30cf3b934bef2be54d931293e
Author: Ramiro Polla <ramiropolla@users.noreply.github.com>
Date:   Wed Mar 31 04:20:33 2021 +0200

    Optimized string-to-number functions (#21484)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index a74ecd2f1e..ac07dc0102 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -1799,7 +1799,7 @@ void get_wifi_commands() {
           if (IsStopped()) {
           char* gpos = strchr(command, 'G');
           if (gpos) {
-            switch (strtol(gpos + 1, nullptr, 10)) {
+            switch (parse_int32(gpos + 1)) {
               case 0 ... 1:
               #if ENABLED(ARC_SUPPORT)
                 case 2 ... 3:

commit 3b73b115ca9366f0155986b717d4c85c31ed2f80
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Mar 29 20:36:37 2021 -0500

    Apply pointer formatting

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index 44aa2300e2..a74ecd2f1e 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -53,7 +53,7 @@
 #define WIFI_IO1_SET()      WRITE(WIFI_IO1_PIN, HIGH);
 #define WIFI_IO1_RESET()    WRITE(WIFI_IO1_PIN, LOW);
 
-extern uint8_t Explore_Disk (char* path , uint8_t recu_level);
+extern uint8_t Explore_Disk (char *path , uint8_t recu_level);
 
 extern uint8_t commands_in_queue;
 extern uint8_t sel_id;
@@ -566,7 +566,7 @@ static int cut_msg_head(uint8_t *msg, uint16_t msgLen, uint16_t cutLen) {
   return msgLen - cutLen;
 }
 
-uint8_t Explore_Disk(char* path , uint8_t recu_level) {
+uint8_t Explore_Disk(char *path , uint8_t recu_level) {
   char tmp[200];
   char Fstream[200];
 

commit a335cf2edf66db08ab12d3800784b58ad992f6a9
Author: Malderin <52313714+Malderin@users.noreply.github.com>
Date:   Mon Mar 29 11:19:38 2021 +0300

    Fix MKS LVGL UI Main screen / print buttons (#21468)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index ddf7173297..44aa2300e2 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -897,9 +897,9 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             strcpy_P(outBuf, PSTR(" B:"));
             outBuf += 3;
             #if HAS_HEATED_BED
-              strcpy(outBuf, dtostrf(thermalManager.temp_bed.celsius, 1, 1, str_1));
+              strcpy(outBuf, dtostrf(thermalManager.degBed(), 1, 1, str_1));
               strcat_P(outBuf, PSTR(" /"));
-              strcat(outBuf, dtostrf(thermalManager.temp_bed.target, 1, 1, str_1));
+              strcat(outBuf, dtostrf(thermalManager.degTargetBed(), 1, 1, str_1));
             #else
               strcpy_P(outBuf, PSTR("0 /0"));
             #endif
@@ -924,15 +924,15 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           }
           else {
             sprintf_P((char *)tempBuf, PSTR("T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n"),
-              (int)thermalManager.degHotend(0), (int)thermalManager.degTargetHotend(0),
+              thermalManager.degHotend(0), thermalManager.degTargetHotend(0),
               #if HAS_HEATED_BED
-                (int)thermalManager.temp_bed.celsius, (int)thermalManager.temp_bed.target,
+                thermalManager.degBed(), thermalManager.degTargetBed(),
               #else
                 0, 0,
               #endif
-              (int)thermalManager.degHotend(0), (int)thermalManager.degTargetHotend(0),
+              thermalManager.degHotend(0), thermalManager.degTargetHotend(0),
               #if HAS_MULTI_HOTEND
-                (int)thermalManager.degHotend(1), (int)thermalManager.degTargetHotend(1)
+                thermalManager.degHotend(1), thermalManager.degTargetHotend(1)
               #else
                 0, 0
               #endif

commit 72cc5a49e6fdcf7246b6bded66a4b4fc043054a3
Author: Sola <42537573+solawc@users.noreply.github.com>
Date:   Sat Mar 6 23:04:05 2021 +0800

    MKS H43 fixup (#21267)
    
    Co-authored-by: makerbase <4164049@qq.com>
    Co-authored-by: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index 02ca16e007..ddf7173297 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -885,9 +885,9 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             char *outBuf = (char *)tempBuf;
             char str_1[16], tbuf[34];
 
-            dtostrf(thermalManager.temp_hotend[0].celsius, 1, 1, tbuf);
+            dtostrf(thermalManager.degHotend(0), 1, 1, tbuf);
             strcat_P(tbuf, PSTR(" /"));
-            strcat(tbuf, dtostrf(thermalManager.temp_hotend[0].target, 1, 1, str_1));
+            strcat(tbuf, dtostrf(thermalManager.degTargetHotend(0), 1, 1, str_1));
 
             const int tlen = strlen(tbuf);
 
@@ -912,9 +912,9 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             strcat_P(outBuf, PSTR(" T1:"));
             outBuf += 4;
             #if HAS_MULTI_HOTEND
-              strcat(outBuf, dtostrf(thermalManager.temp_hotend[1].celsius, 1, 1, str_1));
+              strcat(outBuf, dtostrf(thermalManager.degHotend(1), 1, 1, str_1));
               strcat_P(outBuf, PSTR(" /"));
-              strcat(outBuf, dtostrf(thermalManager.temp_hotend[1].target, 1, 1, str_1));
+              strcat(outBuf, dtostrf(thermalManager.degTargetHotend(1), 1, 1, str_1));
             #else
               strcat_P(outBuf, PSTR("0 /0"));
             #endif
@@ -924,15 +924,15 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           }
           else {
             sprintf_P((char *)tempBuf, PSTR("T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n"),
-              (int)thermalManager.temp_hotend[0].celsius, (int)thermalManager.temp_hotend[0].target,
+              (int)thermalManager.degHotend(0), (int)thermalManager.degTargetHotend(0),
               #if HAS_HEATED_BED
                 (int)thermalManager.temp_bed.celsius, (int)thermalManager.temp_bed.target,
               #else
                 0, 0,
               #endif
-              (int)thermalManager.temp_hotend[0].celsius, (int)thermalManager.temp_hotend[0].target,
+              (int)thermalManager.degHotend(0), (int)thermalManager.degTargetHotend(0),
               #if HAS_MULTI_HOTEND
-                (int)thermalManager.temp_hotend[1].celsius, (int)thermalManager.temp_hotend[1].target
+                (int)thermalManager.degHotend(1), (int)thermalManager.degTargetHotend(1)
               #else
                 0, 0
               #endif

commit c76008bd6a7bc0f88fec7fa58f11cfec88ab366f
Author: Sola <42537573+solawc@users.noreply.github.com>
Date:   Sun Feb 28 07:35:32 2021 +0800

    MKS H43 controller (#20609)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index 5622956579..02ca16e007 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -1231,13 +1231,13 @@ void utf8_2_unicode(uint8_t *source, uint8_t Len) {
 
   while (1) {
     char_byte_num = source[i] & 0xF0;
-    if (source[i] < 0X80) {
+    if (source[i] < 0x80) {
       //ASCII --1byte
       FileName_unicode[char_i] = source[i];
       i += 1;
       char_i += 1;
     }
-    else if (char_byte_num == 0XC0 || char_byte_num == 0XD0) {
+    else if (char_byte_num == 0xC0 || char_byte_num == 0xD0) {
       //--2byte
       u16_h = (((uint16_t)source[i] << 8) & 0x1F00) >> 2;
       u16_l = ((uint16_t)source[i + 1] & 0x003F);
@@ -1247,7 +1247,7 @@ void utf8_2_unicode(uint8_t *source, uint8_t Len) {
       i += 2;
       char_i += 2;
     }
-    else if (char_byte_num == 0XE0) {
+    else if (char_byte_num == 0xE0) {
       //--3byte
       u16_h = (((uint16_t)source[i] << 8) & 0x0F00) << 4;
       u16_m = (((uint16_t)source[i + 1] << 8) & 0x3F00) >> 2;
@@ -1258,7 +1258,7 @@ void utf8_2_unicode(uint8_t *source, uint8_t Len) {
       i += 3;
       char_i += 2;
     }
-    else if (char_byte_num == 0XF0) {
+    else if (char_byte_num == 0xF0) {
       //--4byte
       i += 4;
       //char_i += 3;

commit ec42be346d5c0d072feb8a1b63ef2fdbd6dc1e98
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Fri Feb 26 23:54:46 2021 +0100

    Fix and improve G-code queue (#21122)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index 71cdb0f7d4..5622956579 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -1613,7 +1613,7 @@ void wifi_rcv_handle() {
       if (wifiTransError.flag != 0x1) WIFI_IO1_RESET();
       getDataF = 1;
     }
-    if (need_ok_later &&  (queue.length < BUFSIZE)) {
+    if (need_ok_later && !queue.ring_buffer.full()) {
       need_ok_later = false;
       send_to_wifi((uint8_t *)"ok\r\n", strlen("ok\r\n"));
     }
@@ -1772,7 +1772,7 @@ void get_wifi_commands() {
   static int wifi_read_count = 0;
 
   if (espGcodeFifo.wait_tick > 5) {
-    while ((queue.length < BUFSIZE) && (espGcodeFifo.r != espGcodeFifo.w)) {
+    while (!queue.ring_buffer.full() && (espGcodeFifo.r != espGcodeFifo.w)) {
 
       espGcodeFifo.wait_tick = 0;
 

commit 57e4b82b66e0d98a370e1928a64840d2a9d5f501
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Mon Feb 8 10:36:57 2021 +0800

    Fix: Unsupported use of %f in printf (#21001)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index 785e854c52..71cdb0f7d4 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -874,38 +874,64 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             }
           }
           break;
+
         case 105:
         case 991:
           ZERO(tempBuf);
           if (cmd_value == 105) {
+
             SEND_OK_TO_WIFI;
-            sprintf_P((char *)tempBuf, PSTR("T:%.1f /%.1f B:%.1f /%.1f T0:%.1f /%.1f T1:%.1f /%.1f @:0 B@:0\r\n"),
 
-            (float)thermalManager.temp_hotend[0].celsius, (float)thermalManager.temp_hotend[0].target,
+            char *outBuf = (char *)tempBuf;
+            char str_1[16], tbuf[34];
+
+            dtostrf(thermalManager.temp_hotend[0].celsius, 1, 1, tbuf);
+            strcat_P(tbuf, PSTR(" /"));
+            strcat(tbuf, dtostrf(thermalManager.temp_hotend[0].target, 1, 1, str_1));
+
+            const int tlen = strlen(tbuf);
+
+            sprintf_P(outBuf, PSTR("T:%s"), tbuf);
+            outBuf += 2 + tlen;
+
+            strcpy_P(outBuf, PSTR(" B:"));
+            outBuf += 3;
             #if HAS_HEATED_BED
-              (float)thermalManager.temp_bed.celsius, (float)thermalManager.temp_bed.target,
+              strcpy(outBuf, dtostrf(thermalManager.temp_bed.celsius, 1, 1, str_1));
+              strcat_P(outBuf, PSTR(" /"));
+              strcat(outBuf, dtostrf(thermalManager.temp_bed.target, 1, 1, str_1));
             #else
-              0.0f, 0.0f,
+              strcpy_P(outBuf, PSTR("0 /0"));
             #endif
-            (float)thermalManager.temp_hotend[0].celsius, (float)thermalManager.temp_hotend[0].target,
-            #if DISABLED(SINGLENOZZLE) && HAS_MULTI_EXTRUDER
-              (float)thermalManager.temp_hotend[1].celsius, (float)thermalManager.temp_hotend[1].target
+            outBuf += 4;
+
+            strcat_P(outBuf, PSTR(" T0:"));
+            strcat(outBuf, tbuf);
+            outBuf += 4 + tlen;
+
+            strcat_P(outBuf, PSTR(" T1:"));
+            outBuf += 4;
+            #if HAS_MULTI_HOTEND
+              strcat(outBuf, dtostrf(thermalManager.temp_hotend[1].celsius, 1, 1, str_1));
+              strcat_P(outBuf, PSTR(" /"));
+              strcat(outBuf, dtostrf(thermalManager.temp_hotend[1].target, 1, 1, str_1));
             #else
-              0.0f, 0.0f
+              strcat_P(outBuf, PSTR("0 /0"));
             #endif
-            );
+            outBuf += 4;
+
+            strcat_P(outBuf, PSTR(" @:0 B@:0\r\n"));
           }
           else {
             sprintf_P((char *)tempBuf, PSTR("T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n"),
-
-            (int)thermalManager.temp_hotend[0].celsius, (int)thermalManager.temp_hotend[0].target,
-            #if HAS_HEATED_BED
-              (int)thermalManager.temp_bed.celsius, (int)thermalManager.temp_bed.target,
-            #else
-              0, 0,
-            #endif
-            (int)thermalManager.temp_hotend[0].celsius, (int)thermalManager.temp_hotend[0].target,
-              #if DISABLED(SINGLENOZZLE) && HAS_MULTI_EXTRUDER
+              (int)thermalManager.temp_hotend[0].celsius, (int)thermalManager.temp_hotend[0].target,
+              #if HAS_HEATED_BED
+                (int)thermalManager.temp_bed.celsius, (int)thermalManager.temp_bed.target,
+              #else
+                0, 0,
+              #endif
+              (int)thermalManager.temp_hotend[0].celsius, (int)thermalManager.temp_hotend[0].target,
+              #if HAS_MULTI_HOTEND
                 (int)thermalManager.temp_hotend[1].celsius, (int)thermalManager.temp_hotend[1].target
               #else
                 0, 0

commit d33fe2378c25d258b02440aef6cc31e36753f98f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jan 22 15:01:19 2021 -0600

    Move common strings (#20846)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index fa01b7196f..785e854c52 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -21,15 +21,13 @@
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if HAS_TFT_LVGL_UI
+#if BOTH(HAS_TFT_LVGL_UI, MKS_WIFI_MODULE)
 
 #include "draw_ui.h"
 #include "wifi_module.h"
 #include "wifi_upload.h"
 #include "SPI_TFT.h"
 
-#if ENABLED(MKS_WIFI_MODULE)
-
 #include "../../../../MarlinCore.h"
 #include "../../../../module/temperature.h"
 #include "../../../../gcode/queue.h"
@@ -459,7 +457,6 @@ int package_to_wifi(WIFI_RET_TYPE type, uint8_t *buf, int len) {
   return 1;
 }
 
-
 #define SEND_OK_TO_WIFI send_to_wifi((uint8_t *)"ok\r\n", strlen("ok\r\n"))
 int send_to_wifi(uint8_t *buf, int len) { return package_to_wifi(WIFI_TRANS_INF, buf, len); }
 
@@ -553,7 +550,6 @@ typedef struct {
   uint8_t tail;
 } ESP_PROTOC_FRAME;
 
-
 static int cut_msg_head(uint8_t *msg, uint16_t msgLen, uint16_t cutLen) {
   if (msgLen < cutLen) return 0;
 
@@ -1707,7 +1703,6 @@ void mks_esp_wifi_init() {
   wifi_link_state = WIFI_NOT_CONFIG;
 }
 
-
 void mks_wifi_firmware_update() {
   card.openFileRead((char *)ESP_FIRMWARE_FILE);
 
@@ -1826,5 +1821,4 @@ int readWifiBuf(int8_t *buf, int32_t len) {
   return i;
 }
 
-#endif // MKS_WIFI_MODULE
-#endif // HAS_TFT_LVGL_UI
+#endif // HAS_TFT_LVGL_UI && MKS_WIFI_MODULE

commit c0870d417a68ff4303100f165282d41be9129a5c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jan 21 03:40:07 2021 -0600

    Move some MarlinCore and MarlinUI code (#20832)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index 1f8676126c..fa01b7196f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -39,6 +39,10 @@
 #include "../../../../module/planner.h"
 #include "../../../../module/servo.h"
 #include "../../../../module/probe.h"
+
+#if DISABLED(EMERGENCY_PARSER)
+  #include "../../../../module/motion.h"
+#endif
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "../../../../feature/powerloss.h"
 #endif

commit d0f953218f928f8b79d42818d8c93a8903b551b2
Author: Rockman18 <rockman18.spam@gmail.com>
Date:   Tue Jan 19 23:26:25 2021 +0100

    Fix, consolidate PSTR aliases (#20812)
    
    Co-authored-by: Jason Smith <jason.inet@gmail.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index bf4f75017f..1f8676126c 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -1663,7 +1663,7 @@ void mks_esp_wifi_init() {
 
         clear_cur_ui();
 
-        draw_dialog(DIALOG_TYPE_UPDATE_ESP_FIRMARE);
+        draw_dialog(DIALOG_TYPE_UPDATE_ESP_FIRMWARE);
         if (wifi_upload(1) >= 0) {
 
           f_unlink("1:/MKS_WIFI_CUR");
@@ -1717,7 +1717,7 @@ void mks_wifi_firmware_update() {
 
     clear_cur_ui();
 
-    lv_draw_dialog(DIALOG_TYPE_UPDATE_ESP_FIRMARE);
+    lv_draw_dialog(DIALOG_TYPE_UPDATE_ESP_FIRMWARE);
 
     lv_task_handler();
     watchdog_refresh();

commit 40c8f2001d2274dd34868d2e83ba65a09bcfba17
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 16 20:43:46 2021 -0600

    Apply bool to some MKS UI

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index eefdbafbda..bf4f75017f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -953,7 +953,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             wifi_ret_ack();
             send_to_wifi((uint8_t *)"M997 PAUSE\r\n", strlen("M997 PAUSE\r\n"));
           }
-          if (uiCfg.command_send == 0) get_wifi_list_command_send();
+          if (!uiCfg.command_send) get_wifi_list_command_send();
           break;
 
         case 998:
@@ -1095,13 +1095,13 @@ static void net_msg_handle(uint8_t * msg, uint16_t msgLen) {
     memcpy(wifi_firm_ver, (const char *)&msg[16 + wifiNameLen + wifiKeyLen + hostLen + id_len], ver_len);
   }
 
-  if (uiCfg.configWifi == 1) {
+  if (uiCfg.configWifi) {
     if ((wifiPara.mode != gCfgItems.wifi_mode_sel)
       || (strncmp(wifiPara.ap_name, (const char *)uiCfg.wifi_name, 32) != 0)
       || (strncmp(wifiPara.keyCode, (const char *)uiCfg.wifi_key, 64) != 0)) {
       package_to_wifi(WIFI_PARA_SET, (uint8_t *)0, 0);
     }
-    else uiCfg.configWifi = 0;
+    else uiCfg.configWifi = false;
   }
   if (cfg_cloud_flag == 1) {
     if (((cloud_para.state >> 4) != (char)gCfgItems.cloud_enable)
@@ -1127,7 +1127,7 @@ static void wifi_list_msg_handle(uint8_t * msg, uint16_t msgLen) {
   wifi_list.getNameNum = msg[0];
 
   if (wifi_list.getNameNum < 20) {
-    uiCfg.command_send = 1;
+    uiCfg.command_send = true;
     ZERO(wifi_list.wifiName);
     wifi_name_num = wifi_list.getNameNum;
     valid_name_num = 0;

commit c753fc690f6cdd181213304224eee029988ffd34
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 14 00:23:56 2021 -0600

    More MKS UI prelim. cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index dce4ce5977..eefdbafbda 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -183,7 +183,7 @@ static bool longName2DosName(const char *longName, uint8_t *dosName) {
     uint8_t c = *longName++;
     if (c == '.') { // For a dot...
       if (i == 0) return false;
-      strcat((char *)dosName, ".GCO");
+      strcat_P((char *)dosName, PSTR(".GCO"));
       break;
     }
     else {
@@ -194,7 +194,7 @@ static bool longName2DosName(const char *longName, uint8_t *dosName) {
       dosName[i++] = c + (WITHIN(c, 'a', 'z') ? 'A' - 'a' : 0); // Uppercase required for 8.3 name
     }
     if (i >= 5) {
-      strcat((char *)dosName, "~1.GCO");
+      strcat_P((char *)dosName, PSTR("~1.GCO"));
       break;
     }
   }
@@ -212,7 +212,6 @@ static int storeRcvData(volatile uint8_t *bufToCpy, int32_t len) {
     wifiDmaRcvFifo.write_cur = (tmpW + 1) % TRANS_RCV_FIFO_BLOCK_NUM;
     return 1;
   }
-
   return 0;
 }
 
@@ -253,6 +252,7 @@ static void dma_ch5_irq_handle() {
       WIFI_IO1_SET();
     }
 }
+
 static void wifi_usart_dma_init() {
   dma_init(DMA1);
   uint32_t flags = ( DMA_MINC_MODE | DMA_TRNS_CMPLT | DMA_HALF_TRNS | DMA_TRNS_ERR);
@@ -289,7 +289,7 @@ void esp_port_begin(uint8_t interrupt) {
       if (interrupt) {
         for (uint16_t i = 0; i < 65535; i++) { /*nada*/ }
         WIFISERIAL.begin(WIFI_BAUDRATE);
-        uint32_t serial_connect_timeout = millis() + 1000UL;
+        millis_t serial_connect_timeout = millis() + 1000UL;
         while (PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
       }
       else {
@@ -305,7 +305,7 @@ void esp_port_begin(uint8_t interrupt) {
       WIFISERIAL.end();
       for (uint16_t i = 0; i < 65535; i++) { /*nada*/ }
       WIFISERIAL.begin(interrupt ? WIFI_BAUDRATE : WIFI_UPLOAD_BAUDRATE);
-      uint32_t serial_connect_timeout = millis() + 1000UL;
+      millis_t serial_connect_timeout = millis() + 1000UL;
       while (PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
     #endif
     if (!interrupt) wifi_usart_dma_init();
@@ -511,16 +511,16 @@ int write_to_file(char *buf, int len) {
           res = upload_file.write(public_buf, file_writer.write_index);
         }
       }
-      if (res == -1) {
-        return  -1;
-      }
+
+      if (res == -1) return -1;
+
       upload_file.getpos(&pos);
       file_writer.write_index = 0;
     }
   }
 
   if (res == -1) {
-    memset(public_buf, 0, sizeof(public_buf));
+    ZERO(public_buf);
     file_writer.write_index = 0;
     return  -1;
   }
@@ -576,17 +576,16 @@ uint8_t Explore_Disk(char* path , uint8_t recu_level) {
 
   for (uint8_t i = 0; i < fileCnt; i++) {
     card.getfilename_sorted(SD_ORDER(i, fileCnt));
-
-    memset(tmp, 0, sizeof(tmp));
+    ZERO(tmp);
     strcpy(tmp, card.filename);
 
     ZERO(Fstream);
     strcpy(Fstream, tmp);
 
     if (card.flag.filenameIsDir && recu_level <= 10)
-      strcat(Fstream, ".DIR");
+      strcat_P(Fstream, PSTR(".DIR"));
 
-    strcat(Fstream, "\r\n");
+    strcat_P(Fstream, PSTR("\r\n"));
     send_to_wifi((uint8_t*)Fstream, strlen(Fstream));
   }
 
@@ -662,23 +661,23 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             int index = 0;
             while (tmpStr[index] == ' ') index++;
 
-            if (strstr((char *)&tmpStr[index], ".g") || strstr((char *)&tmpStr[index], ".G")) {
+            if (strstr_P((char *)&tmpStr[index], PSTR(".g")) || strstr_P((char *)&tmpStr[index], PSTR(".G"))) {
               if (strlen((char *)&tmpStr[index]) < 80) {
                 ZERO(list_file.file_name[sel_id]);
                 ZERO(list_file.long_name[sel_id]);
                 uint8_t has_path_selected = 0;
 
                 if (gCfgItems.wifi_type == ESP_WIFI) {
-                  if (strncmp((char *)&tmpStr[index], "1:", 2) == 0) {
+                  if (strncmp_P((char *)&tmpStr[index], PSTR("1:"), 2) == 0) {
                     gCfgItems.fileSysType = FILE_SYS_SD;
                     has_path_selected = 1;
                   }
-                  else if (strncmp((char *)&tmpStr[index], "0:", 2) == 0) {
+                  else if (strncmp_P((char *)&tmpStr[index], PSTR("0:"), 2) == 0) {
                     gCfgItems.fileSysType = FILE_SYS_USB;
                     has_path_selected = 1;
                   }
                   else if (tmpStr[index] != '/')
-                      strcat((char *)list_file.file_name[sel_id], "/");
+                    strcat_P((char *)list_file.file_name[sel_id], PSTR("/"));
 
                   if (file_writer.fileTransfer == 1) {
                     uint8_t dosName[FILENAME_LENGTH];
@@ -686,12 +685,11 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
                     fileName[0] = '\0';
                     if (has_path_selected == 1) {
                       strcat((char *)fileName, (char *)&tmpStr[index + 3]);
-                      strcat((char *)list_file.file_name[sel_id], "/");
+                      strcat_P((char *)list_file.file_name[sel_id], PSTR("/"));
                     }
                     else strcat((char *)fileName, (char *)&tmpStr[index]);
-                    if (!longName2DosName((const char *)fileName, dosName)) {
-                      strcpy(list_file.file_name[sel_id], "notValid");
-                    }
+                    if (!longName2DosName((const char *)fileName, dosName))
+                      strcpy_P(list_file.file_name[sel_id], PSTR("notValid"));
                     strcat((char *)list_file.file_name[sel_id], (char *)dosName);
                     strcat((char *)list_file.long_name[sel_id], (char *)dosName);
                   }
@@ -712,7 +710,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
                   send_to_wifi((uint8_t *)"File selected\r\n", strlen("File selected\r\n"));
                 else {
                   send_to_wifi((uint8_t *)"file.open failed\r\n", strlen("file.open failed\r\n"));
-                  strcpy(list_file.file_name[sel_id], "notValid");
+                  strcpy_P(list_file.file_name[sel_id], PSTR("notValid"));
                 }
                 SEND_OK_TO_WIFI;
               }
@@ -721,7 +719,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           break;
 
         case 24:
-          if (strcmp(list_file.file_name[sel_id], "notValid") != 0) {
+          if (strcmp_P(list_file.file_name[sel_id], PSTR("notValid")) != 0) {
             if (uiCfg.print_state == IDLE) {
               clear_cur_ui();
               reset_print_time();
@@ -830,7 +828,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)|| (uiCfg.print_state == REPRINTING)) {
             print_rate = uiCfg.totalSend;
             ZERO(tempBuf);
-            sprintf((char *)tempBuf, "M27 %d\r\n", print_rate);
+            sprintf_P((char *)tempBuf, PSTR("M27 %d\r\n"), print_rate);
             send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
           }
           break;
@@ -842,16 +840,16 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             int index = 0;
             while (tmpStr[index] == ' ') index++;
 
-            if (strstr((char *)&tmpStr[index], ".g") || strstr((char *)&tmpStr[index], ".G")) {
+            if (strstr_P((char *)&tmpStr[index], PSTR(".g")) || strstr_P((char *)&tmpStr[index], PSTR(".G"))) {
               strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
 
               if (gCfgItems.fileSysType == FILE_SYS_SD) {
                 ZERO(tempBuf);
-                sprintf((char *)tempBuf, "%s", file_writer.saveFileName);
+                sprintf_P((char *)tempBuf, PSTR("%s"), file_writer.saveFileName);
               }
               else if (gCfgItems.fileSysType == FILE_SYS_USB) {
                 ZERO(tempBuf);
-                sprintf((char *)tempBuf, "%s", (char *)file_writer.saveFileName);
+                sprintf_P((char *)tempBuf, PSTR("%s"), (char *)file_writer.saveFileName);
               }
               mount_file_sys(gCfgItems.fileSysType);
 
@@ -862,7 +860,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
                   ZERO(file_writer.saveFileName);
                   strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
                   ZERO(tempBuf);
-                  sprintf((char *)tempBuf, "Writing to file: %s\r\n", (char *)file_writer.saveFileName);
+                  sprintf_P((char *)tempBuf, PSTR("Writing to file: %s\r\n"), (char *)file_writer.saveFileName);
                   wifi_ret_ack();
                   send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
                   wifi_link_state = WIFI_WAIT_TRANS_START;
@@ -881,7 +879,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           ZERO(tempBuf);
           if (cmd_value == 105) {
             SEND_OK_TO_WIFI;
-            sprintf((char *)tempBuf,"T:%.1f /%.1f B:%.1f /%.1f T0:%.1f /%.1f T1:%.1f /%.1f @:0 B@:0\r\n",
+            sprintf_P((char *)tempBuf, PSTR("T:%.1f /%.1f B:%.1f /%.1f T0:%.1f /%.1f T1:%.1f /%.1f @:0 B@:0\r\n"),
 
             (float)thermalManager.temp_hotend[0].celsius, (float)thermalManager.temp_hotend[0].target,
             #if HAS_HEATED_BED
@@ -890,7 +888,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
               0.0f, 0.0f,
             #endif
             (float)thermalManager.temp_hotend[0].celsius, (float)thermalManager.temp_hotend[0].target,
-            #if !defined(SINGLENOZZLE) && HAS_MULTI_EXTRUDER
+            #if DISABLED(SINGLENOZZLE) && HAS_MULTI_EXTRUDER
               (float)thermalManager.temp_hotend[1].celsius, (float)thermalManager.temp_hotend[1].target
             #else
               0.0f, 0.0f
@@ -898,7 +896,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             );
           }
           else {
-            sprintf((char *)tempBuf,"T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n",
+            sprintf_P((char *)tempBuf, PSTR("T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n"),
 
             (int)thermalManager.temp_hotend[0].celsius, (int)thermalManager.temp_hotend[0].target,
             #if HAS_HEATED_BED
@@ -907,7 +905,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
               0, 0,
             #endif
             (int)thermalManager.temp_hotend[0].celsius, (int)thermalManager.temp_hotend[0].target,
-              #if !defined(SINGLENOZZLE) && HAS_MULTI_EXTRUDER
+              #if DISABLED(SINGLENOZZLE) && HAS_MULTI_EXTRUDER
                 (int)thermalManager.temp_hotend[1].celsius, (int)thermalManager.temp_hotend[1].target
               #else
                 0, 0
@@ -922,7 +920,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
         case 992:
           if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)) {
             ZERO(tempBuf);
-            sprintf((char *)tempBuf, "M992 %d%d:%d%d:%d%d\r\n", print_time.hours/10, print_time.hours%10, print_time.minutes/10, print_time.minutes%10, print_time.seconds/10, print_time.seconds%10);
+            sprintf_P((char *)tempBuf, PSTR("M992 %d%d:%d%d:%d%d\r\n"), print_time.hours/10, print_time.hours%10, print_time.minutes/10, print_time.minutes%10, print_time.seconds/10, print_time.seconds%10);
             wifi_ret_ack();
             send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
           }
@@ -932,7 +930,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)) {
             ZERO(tempBuf);
             if (strlen((char *)list_file.file_name[sel_id]) > (100 - 1)) return;
-            sprintf((char *)tempBuf, "M994 %s;%d\n", list_file.file_name[sel_id],(int)gCfgItems.curFilesize);
+            sprintf_P((char *)tempBuf, PSTR("M994 %s;%d\n"), list_file.file_name[sel_id], (int)gCfgItems.curFilesize);
             wifi_ret_ack();
             send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
           }
@@ -976,7 +974,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           break;
 
         default:
-          strcat((char *)cmd_line, "\n");
+          strcat_P((char *)cmd_line, PSTR("\n"));
 
           if (espGcodeFifo.wait_tick > 5) {
             uint32_t left;
@@ -1002,7 +1000,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
       }
     }
     else {
-      strcat((char *)cmd_line, "\n");
+      strcat_P((char *)cmd_line, PSTR("\n"));
 
       if (espGcodeFifo.wait_tick > 5) {
         uint32_t left_g;
@@ -1045,7 +1043,7 @@ static void net_msg_handle(uint8_t * msg, uint16_t msgLen) {
   if (msgLen <= 0) return;
 
   // ip
-  sprintf(ipPara.ip_addr, "%d.%d.%d.%d", msg[0], msg[1], msg[2], msg[3]);
+  sprintf_P(ipPara.ip_addr, PSTR("%d.%d.%d.%d"), msg[0], msg[1], msg[2], msg[3]);
 
   // port
   // connect state
@@ -1143,16 +1141,15 @@ static void wifi_list_msg_handle(uint8_t * msg, uint16_t msgLen) {
         memset(str, 0, WIFI_NAME_BUFFER_SIZE);
         memcpy(str, &msg[wifiMsgIdex], wifiNameLen);
         for (j = 0; j < valid_name_num; j++) {
-          if (strcmp((const char *)str,(const char *)wifi_list.wifiName[j]) == 0) {
+          if (strcmp((const char *)str, (const char *)wifi_list.wifiName[j]) == 0) {
             wifi_name_is_same = 1;
             break;
           }
         }
-        if (wifi_name_is_same != 1) {
-            if (str[0] > 0x80) {
-              wifi_name_is_same = 1;
-            }
-        }
+
+        if (wifi_name_is_same != 1 && str[0] > 0x80)
+          wifi_name_is_same = 1;
+
         if (wifi_name_is_same == 1) {
           wifi_name_is_same = 0;
           wifiMsgIdex  +=  wifiNameLen;
@@ -1199,7 +1196,7 @@ static void gcode_msg_handle(uint8_t * msg, uint16_t msgLen) {
   }
 }
 
-void utf8_2_unicode(uint8_t *source,uint8_t Len) {
+void utf8_2_unicode(uint8_t *source, uint8_t Len) {
   uint8_t i = 0, char_i = 0, char_byte_num = 0;
   uint16_t u16_h, u16_m, u16_l, u16_value;
   uint8_t FileName_unicode[30];
@@ -1216,7 +1213,6 @@ void utf8_2_unicode(uint8_t *source,uint8_t Len) {
     }
     else if (char_byte_num == 0XC0 || char_byte_num == 0XD0) {
       //--2byte
-
       u16_h = (((uint16_t)source[i] << 8) & 0x1F00) >> 2;
       u16_l = ((uint16_t)source[i + 1] & 0x003F);
       u16_value = (u16_h | u16_l);
@@ -1241,9 +1237,9 @@ void utf8_2_unicode(uint8_t *source,uint8_t Len) {
       i += 4;
       //char_i += 3;
     }
-    else {
+    else
       break;
-    }
+
     if (i >= Len || i >= 255) break;
   }
   COPY(source, FileName_unicode);
@@ -1297,7 +1293,7 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
       lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
       return;
     }
-    sprintf((char *)saveFilePath, "%s", dosName);
+    sprintf_P((char *)saveFilePath, PSTR("%s"), dosName);
 
     card.cdroot();
     upload_file.close();
@@ -1386,8 +1382,7 @@ static void file_fragment_msg_handle(uint8_t * msg, uint16_t msgLen) {
 }
 
 void esp_data_parser(char *cmdRxBuf, int len) {
-  int32_t head_pos;
-  int32_t tail_pos;
+  int32_t head_pos, tail_pos;
   uint16_t cpyLen;
   int16_t leftLen = len;
   bool loop_again = false;

commit 35c1b330ec62e698a455176330e7d75600af461d
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Thu Jan 14 12:41:09 2021 +0800

    MKS WiFi for TFT_LVGL_UI (#20191)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index a8537dd3de..dce4ce5977 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -26,6 +26,7 @@
 #include "draw_ui.h"
 #include "wifi_module.h"
 #include "wifi_upload.h"
+#include "SPI_TFT.h"
 
 #if ENABLED(MKS_WIFI_MODULE)
 
@@ -36,6 +37,8 @@
 #include "../../../../lcd/marlinui.h"
 #include "../../../../sd/cardreader.h"
 #include "../../../../module/planner.h"
+#include "../../../../module/servo.h"
+#include "../../../../module/probe.h"
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "../../../../feature/powerloss.h"
 #endif
@@ -109,10 +112,9 @@ extern IP_PARA ipPara;
 extern CLOUD_PARA cloud_para;
 
 extern bool once_flag, flash_preview_begin, default_preview_flg, gcode_preview_over;
+extern bool flash_dma_mode;
 
-uint32_t getWifiTick() {
-  return millis();
-}
+uint32_t getWifiTick() { return millis(); }
 
 uint32_t getWifiTickDiff(int32_t lastTick, int32_t curTick) {
   if (lastTick <= curTick)
@@ -149,40 +151,123 @@ void mount_file_sys(uint8_t disk_type) {
   }
 }
 
-static void dma_init() {
-  #if 0
-  __HAL_RCC_DMA1_CLK_ENABLE();
-
-  //HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
-  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 4, 0);
-  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
-
-  hdma_usart1_rx.Instance = DMA1_Channel5;
-  //hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
-  hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
-  hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
-  hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
-  hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
-  hdma_usart1_rx.Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
-  hdma_usart1_rx.Init.Mode = DMA_NORMAL;
-  hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
-  if (HAL_DMA_Init((DMA_HandleTypeDef *)&hdma_usart1_rx) != HAL_OK) {
-    Error_Handler();
+#include <libmaple/timer.h>
+#include <libmaple/util.h>
+#include <libmaple/rcc.h>
+
+#include <boards.h>
+#include <wirish.h>
+
+#include <libmaple/dma.h>
+#include <libmaple/bitband.h>
+
+#include <libmaple/libmaple.h>
+#include <libmaple/gpio.h>
+#include <libmaple/usart.h>
+#include <libmaple/ring_buffer.h>
+
+void changeFlashMode(const bool dmaMode) {
+  if (flash_dma_mode != dmaMode) {
+    flash_dma_mode = dmaMode;
+    if (!flash_dma_mode) {
+      dma_disable(DMA1, DMA_CH5);
+      dma_clear_isr_bits(DMA1, DMA_CH4);
+    }
   }
+}
 
+static bool longName2DosName(const char *longName, uint8_t *dosName) {
+  uint8_t i;
+  for (i = FILENAME_LENGTH; i--;) dosName[i] = '\0';
+  while (*longName) {
+    uint8_t c = *longName++;
+    if (c == '.') { // For a dot...
+      if (i == 0) return false;
+      strcat((char *)dosName, ".GCO");
+      break;
+    }
+    else {
+      if (c < 0x21 || c == 0x7F) return false;                  // Check size, non-printable characters
+      // Fail for illegal characters
+      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
+      while (const uint8_t b = pgm_read_byte(p++)) if (b == c) return false;
+      dosName[i++] = c + (WITHIN(c, 'a', 'z') ? 'A' - 'a' : 0); // Uppercase required for 8.3 name
+    }
+    if (i >= 5) {
+      strcat((char *)dosName, "~1.GCO");
+      break;
+    }
+  }
+  return dosName[0] != '\0'; // Return true if any name was set
+}
 
-  HAL_DMA_Start_IT((DMA_HandleTypeDef *)&hdma_usart1_rx,
-      (uint32_t)&huart1.Instance->DR,
-      (uint32_t)(&WifiRxFifo.uartTxBuffer[0]),
-      UART_RX_BUFFER_SIZE);
+static int storeRcvData(volatile uint8_t *bufToCpy, int32_t len) {
+  unsigned char tmpW = wifiDmaRcvFifo.write_cur;
 
-    //HAL_UART_Receive_DMA(&huart1,(uint8_t*)&WifiRxFifo.uartTxBuffer[0], UART_RX_BUFFER_SIZE);
+  if (len > UDISKBUFLEN) return 0;
 
-      /* Enable the DMA transfer for the receiver request by setting the DMAR bit
-       in the UART CR3 register */
-      SET_BIT(huart1.Instance->CR3, USART_CR3_DMAR);
+  if (wifiDmaRcvFifo.state[tmpW] == udisk_buf_empty) {
+    memcpy((unsigned char *) wifiDmaRcvFifo.bufferAddr[tmpW], (uint8_t *)bufToCpy, len);
+    wifiDmaRcvFifo.state[tmpW] = udisk_buf_full;
+    wifiDmaRcvFifo.write_cur = (tmpW + 1) % TRANS_RCV_FIFO_BLOCK_NUM;
+    return 1;
+  }
+
+  return 0;
+}
+
+static void esp_dma_pre() {
+  dma_channel_reg_map *channel_regs = dma_tube_regs(DMA1, DMA_CH5);
+
+  CBI32(channel_regs->CCR, 0);
+  channel_regs->CMAR = (uint32_t)WIFISERIAL.usart_device->rb->buf;
+  channel_regs->CNDTR = 0x0000;
+  channel_regs->CNDTR = UART_RX_BUFFER_SIZE;
+  DMA1->regs->IFCR = 0xF0000;
+  SBI32(channel_regs->CCR, 0);
+}
+
+static void dma_ch5_irq_handle() {
+    uint8 status_bits = dma_get_isr_bits(DMA1, DMA_CH5);
+    dma_clear_isr_bits(DMA1, DMA_CH5);
+    if (status_bits & 0x8) {
+      // DMA transmit Error
+    }
+    else if (status_bits & 0x2) {
+      // DMA transmit complete
+      if (esp_state == TRANSFER_IDLE)
+        esp_state = TRANSFERING;
+
+      if (storeRcvData(WIFISERIAL.usart_device->rb->buf, UART_RX_BUFFER_SIZE)) {
+        esp_dma_pre();
+        if (wifiTransError.flag != 0x1)
+          WIFI_IO1_RESET();
+      }
+      else {
+        WIFI_IO1_SET();
+        esp_state = TRANSFER_STORE;
+      }
+    }
+    else if (status_bits & 0x4) {
+      // DMA transmit half
+      WIFI_IO1_SET();
+    }
+}
+static void wifi_usart_dma_init() {
+  dma_init(DMA1);
+  uint32_t flags = ( DMA_MINC_MODE | DMA_TRNS_CMPLT | DMA_HALF_TRNS | DMA_TRNS_ERR);
+  dma_xfer_size dma_bit_size = DMA_SIZE_8BITS;
+  dma_setup_transfer(DMA1, DMA_CH5, &USART1_BASE->DR, dma_bit_size,
+             (volatile void*)WIFISERIAL.usart_device->rb->buf, dma_bit_size, flags);// Transmit buffer DMA
+  dma_set_priority(DMA1, DMA_CH5, DMA_PRIORITY_LOW);
+  dma_attach_interrupt(DMA1, DMA_CH5, &dma_ch5_irq_handle);
+
+  dma_clear_isr_bits(DMA1, DMA_CH5);
+  dma_set_num_transfers(DMA1, DMA_CH5, UART_RX_BUFFER_SIZE);
+
+  bb_peri_set_bit(&USART1_BASE->CR3, USART_CR3_DMAR_BIT, 1);
+  dma_enable(DMA1, DMA_CH5);   // enable transmit
 
-  #endif
   for (uint8_t i = 0; i < TRANS_RCV_FIFO_BLOCK_NUM; i++) {
     wifiDmaRcvFifo.bufferAddr[i] = &bmp_public_buf[1024 * i];
     wifiDmaRcvFifo.state[i] = udisk_buf_empty;
@@ -193,113 +278,39 @@ static void dma_init() {
   wifiDmaRcvFifo.write_cur = 0;
 }
 
-static void wifi_deInit() {
-  #if 0
-  HAL_DMA_Abort((DMA_HandleTypeDef *)&hdma_usart1_rx);
-  HAL_DMA_DeInit((DMA_HandleTypeDef *)&hdma_usart1_rx);
-  __HAL_DMA_DISABLE((DMA_HandleTypeDef *)&hdma_usart1_rx);
-  #endif
-}
-
-extern uint8_t mksUsart1Rx;
-
 void esp_port_begin(uint8_t interrupt) {
   WifiRxFifo.uart_read_point = 0;
   WifiRxFifo.uart_write_point = 0;
-  #if 0
-  NVIC_InitTypeDef NVIC_InitStructure;
 
-  USART_InitTypeDef USART_InitStructure;
-  GPIO_InitTypeDef GPIO_InitStruct;
+  #if 1
 
-  WifiRxFifo.uart_read_point = 0;
-  WifiRxFifo.uart_write_point = 0;
-  memset((uint8_t*)WifiRxFifo.uartTxBuffer, 0, sizeof(WifiRxFifo.uartTxBuffer));
-
-  if (interrupt) {
-  #if TAN
-    wifi_deInit ();
-
-    //SZ_STM32_COMInit(COM1, 115200);
-    __HAL_UART_ENABLE_IT(USART1, USART_IT_RXNE);
-
-    USART_InitStructure.USART_BaudRate = 115200;        //���ڵĲ����ʣ�����115200 ��ߴ�4.5Mbits/s
-    USART_InitStructure.USART_WordLength = USART_WordLength_8b; //�����ֳ���(8λ��9λ)
-    USART_InitStructure.USART_StopBits = USART_StopBits_1;    //�����õ�ֹͣλ-֧��1��2��ֹͣλ
-    USART_InitStructure.USART_Parity = USART_Parity_No;     //����żУ��
-    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; //��Ӳ��������
-    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; //˫��ģʽ��ʹ�ܷ��ͺͽ���
-
-    __HAL_RCC_USART1_CLK_ENABLE();
-
-    GPIO_InitStruct.Pin = TFT_WIFI_TX_Pin|TFT_WIFI_RX_Pin;
-    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
-    GPIO_InitStruct.Pull = GPIO_PULLUP;
-    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
-    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
-    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
-      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
-      GPIO_InitStruct.Pin = TFT_WIFI_RX_Pin;
-      HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
-
-    USART_Init(USART1, &USART_InitStructure);
-
-    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
-  //  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
-  //  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
-    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
-    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
-    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
-
-    NVIC_Init(&NVIC_InitStructure);
-    #else
-    HAL_UART_DeInit(&huart1);
-    MX_USART1_UART_Init(3);
-    //__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
-    HAL_UART_Receive_IT(&huart1,&mksUsart1Rx,1);
+    #if ENABLED(MKS_WIFI_MODULE)
+      WIFISERIAL.end();
+      if (interrupt) {
+        for (uint16_t i = 0; i < 65535; i++) { /*nada*/ }
+        WIFISERIAL.begin(WIFI_BAUDRATE);
+        uint32_t serial_connect_timeout = millis() + 1000UL;
+        while (PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
+      }
+      else {
+        WIFISERIAL.usart_device->regs->CR1 &= ~USART_CR1_RXNEIE;
+        WIFISERIAL.begin(WIFI_UPLOAD_BAUDRATE);
+        wifi_usart_dma_init();
+      }
     #endif
-  }
-  else{
-    #if 0
-    NVIC_DisableIRQ(SZ_STM32_COM1_IRQn);
-
-    USART_Cmd(SZ_STM32_COM1, DISABLE);
-
-    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, DISABLE);
-    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 
-    SZ_STM32_COMInit(COM1, 1958400);
+  #else
 
-    USART_Cmd(SZ_STM32_COM1, ENABLE);
-
-    wifi_delay(10);
-
-    dma_init();
+    #if MKS_WIFI_MODULE
+      WIFISERIAL.end();
+      for (uint16_t i = 0; i < 65535; i++) { /*nada*/ }
+      WIFISERIAL.begin(interrupt ? WIFI_BAUDRATE : WIFI_UPLOAD_BAUDRATE);
+      uint32_t serial_connect_timeout = millis() + 1000UL;
+      while (PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
     #endif
-    HAL_UART_DeInit(&huart1);
-    MX_USART1_UART_Init(5);
-        //dma1_5_IRQ_sel = 1;
-    dma_init();
-  }
-  #endif
-
-  #if ENABLED(MKS_WIFI_MODULE)
-    WIFISERIAL.end();
-    for (uint16_t i = 0; i < 65535; i++) { /*nada*/ }
-    WIFISERIAL.begin(interrupt ? WIFI_BAUDRATE : WIFI_UPLOAD_BAUDRATE);
+    if (!interrupt) wifi_usart_dma_init();
 
-    const millis_t serial_connect_timeout = millis() + 1000UL;
-    while (/*!WIFISERIAL && */PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
-
-    if (interrupt) {
-      //for (uint8_t i=0;i<100;i++) WIFISERIAL.write(0x33);
-    }
-    else {
-      //for (uint16_t i=0;i<65535;i++); //WIFISERIAL.write(0x33);
-    }
   #endif
-
-  if (!interrupt) dma_init();
 }
 
 #if ENABLED(MKS_WIFI_MODULE)
@@ -441,10 +452,12 @@ int package_to_wifi(WIFI_RET_TYPE type, uint8_t *buf, int len) {
     ZERO(buf_to_wifi);
     index_to_wifi = 0;
   }
+  return 1;
 }
 
 
-int send_to_wifi(char *buf, int len) { return package_to_wifi(WIFI_TRANS_INF, buf, len); }
+#define SEND_OK_TO_WIFI send_to_wifi((uint8_t *)"ok\r\n", strlen("ok\r\n"))
+int send_to_wifi(uint8_t *buf, int len) { return package_to_wifi(WIFI_TRANS_INF, buf, len); }
 
 void set_cur_file_sys(int fileType) { gCfgItems.fileSysType = fileType; }
 
@@ -463,9 +476,9 @@ void get_file_list(char *path) {
 char wait_ip_back_flag = 0;
 
 typedef struct {
-  char write_buf[513];
   int write_index;
   uint8_t saveFileName[30];
+  uint8_t fileTransfer;
   uint32_t fileLen;
   uint32_t tick_begin;
   uint32_t tick_end;
@@ -475,22 +488,43 @@ FILE_WRITER file_writer;
 
 int32_t lastFragment = 0;
 
-char lastBinaryCmd[50] = { 0 };
+char saveFilePath[50];
 
-int total_write = 0;
-char binary_head[2] = { 0, 0 };
-unsigned char binary_data_len = 0;
+static SdFile upload_file, *upload_curDir;
+static filepos_t pos;
 
 int write_to_file(char *buf, int len) {
-  for (int i = 0; i < len; i++) {
-    file_writer.write_buf[file_writer.write_index++] = buf[i];
+  int i;
+  int res = 0;
+
+  for (i = 0; i < len; i++) {
+    public_buf[file_writer.write_index++] = buf[i];
     if (file_writer.write_index >= 512) {
-      int res = card.write(file_writer.write_buf, file_writer.write_index);
-      if (res == -1) return -1;
-      ZERO(file_writer.write_buf);
+      res = upload_file.write(public_buf, file_writer.write_index);
+
+      if (res == -1) {
+        upload_file.close();
+        const char * const fname = card.diveToFile(true, upload_curDir, saveFilePath);
+
+        if (upload_file.open(upload_curDir, fname, O_WRITE)) {
+          upload_file.setpos(&pos);
+          res = upload_file.write(public_buf, file_writer.write_index);
+        }
+      }
+      if (res == -1) {
+        return  -1;
+      }
+      upload_file.getpos(&pos);
       file_writer.write_index = 0;
     }
   }
+
+  if (res == -1) {
+    memset(public_buf, 0, sizeof(public_buf));
+    file_writer.write_index = 0;
+    return  -1;
+  }
+
   return 0;
 }
 
@@ -543,10 +577,8 @@ uint8_t Explore_Disk(char* path , uint8_t recu_level) {
   for (uint8_t i = 0; i < fileCnt; i++) {
     card.getfilename_sorted(SD_ORDER(i, fileCnt));
 
-    //if (card.longFilename[0] == 0)
-      strcpy(tmp, card.filename);
-    //else
-    //  strcpy(tmp, card.longFilename);
+    memset(tmp, 0, sizeof(tmp));
+    strcpy(tmp, card.filename);
 
     ZERO(Fstream);
     strcpy(Fstream, tmp);
@@ -584,6 +616,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
       switch (cmd_value) {
 
         case 20: // M20: Print SD / µdisk file
+          file_writer.fileTransfer = 0;
           if (uiCfg.print_state == IDLE) {
             int index = 0;
 
@@ -591,8 +624,8 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
               gCfgItems.fileSysType = FILE_SYS_SD;
               send_to_wifi((uint8_t *)"Begin file list\r\n", strlen("Begin file list\r\n"));
               get_file_list((char *)"0:/");
-              send_to_wifi((char *)"End file list\r\n", strlen("End file list\r\n"));
-              send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+              send_to_wifi((uint8_t *)"End file list\r\n", strlen("End file list\r\n"));
+              SEND_OK_TO_WIFI;
               break;
             }
 
@@ -613,14 +646,14 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
                 get_file_list(path);
                 send_to_wifi((uint8_t *)"End file list\r\n", strlen("End file list\r\n"));
               }
-              send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+              SEND_OK_TO_WIFI;
             }
           }
           break;
 
         case 21:
           /*init sd card*/
-          send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+          SEND_OK_TO_WIFI;
           break;
 
         case 23:
@@ -632,15 +665,40 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             if (strstr((char *)&tmpStr[index], ".g") || strstr((char *)&tmpStr[index], ".G")) {
               if (strlen((char *)&tmpStr[index]) < 80) {
                 ZERO(list_file.file_name[sel_id]);
+                ZERO(list_file.long_name[sel_id]);
+                uint8_t has_path_selected = 0;
 
                 if (gCfgItems.wifi_type == ESP_WIFI) {
-                  if (strncmp((char *)&tmpStr[index], "1:", 2) == 0)
+                  if (strncmp((char *)&tmpStr[index], "1:", 2) == 0) {
                     gCfgItems.fileSysType = FILE_SYS_SD;
-                  else if (strncmp((char *)&tmpStr[index], "0:", 2) == 0)
+                    has_path_selected = 1;
+                  }
+                  else if (strncmp((char *)&tmpStr[index], "0:", 2) == 0) {
                     gCfgItems.fileSysType = FILE_SYS_USB;
+                    has_path_selected = 1;
+                  }
                   else if (tmpStr[index] != '/')
-                    strcat((char *)list_file.file_name[0], "/");
-                  strcat((char *)list_file.file_name[sel_id], (char *)&tmpStr[index]);
+                      strcat((char *)list_file.file_name[sel_id], "/");
+
+                  if (file_writer.fileTransfer == 1) {
+                    uint8_t dosName[FILENAME_LENGTH];
+                    uint8_t fileName[sizeof(list_file.file_name[sel_id])];
+                    fileName[0] = '\0';
+                    if (has_path_selected == 1) {
+                      strcat((char *)fileName, (char *)&tmpStr[index + 3]);
+                      strcat((char *)list_file.file_name[sel_id], "/");
+                    }
+                    else strcat((char *)fileName, (char *)&tmpStr[index]);
+                    if (!longName2DosName((const char *)fileName, dosName)) {
+                      strcpy(list_file.file_name[sel_id], "notValid");
+                    }
+                    strcat((char *)list_file.file_name[sel_id], (char *)dosName);
+                    strcat((char *)list_file.long_name[sel_id], (char *)dosName);
+                  }
+                  else {
+                    strcat((char *)list_file.file_name[sel_id], (char *)&tmpStr[index]);
+                    strcat((char *)list_file.long_name[sel_id], (char *)&tmpStr[index]);
+                  }
 
                 }
                 else
@@ -656,7 +714,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
                   send_to_wifi((uint8_t *)"file.open failed\r\n", strlen("file.open failed\r\n"));
                   strcpy(list_file.file_name[sel_id], "notValid");
                 }
-                send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+                SEND_OK_TO_WIFI;
               }
             }
           }
@@ -680,6 +738,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
 
                   SdFile file;
                   SdFile *curDir;
+                  card.endFilePrint();
                   const char * const fname = card.diveToFile(true, curDir, cur_name);
                   if (!fname) return;
                   if (file.open(curDir, fname, O_READ)) {
@@ -726,7 +785,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
               lv_draw_printing();
             }
           }
-          send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+          SEND_OK_TO_WIFI;
           break;
 
         case 25:
@@ -745,7 +804,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             else
               default_preview_flg = true;
             lv_draw_printing();
-            send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+            SEND_OK_TO_WIFI;
           }
           break;
 
@@ -762,7 +821,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
 
             lv_draw_ready_print();
 
-            send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+            SEND_OK_TO_WIFI;
           }
           break;
 
@@ -805,8 +864,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
                   ZERO(tempBuf);
                   sprintf((char *)tempBuf, "Writing to file: %s\r\n", (char *)file_writer.saveFileName);
                   wifi_ret_ack();
-                  send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
-                  total_write = 0;
+                  send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
                   wifi_link_state = WIFI_WAIT_TRANS_START;
                 }
                 else {
@@ -822,7 +880,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
         case 991:
           ZERO(tempBuf);
           if (cmd_value == 105) {
-            send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+            SEND_OK_TO_WIFI;
             sprintf((char *)tempBuf,"T:%.1f /%.1f B:%.1f /%.1f T0:%.1f /%.1f T1:%.1f /%.1f @:0 B@:0\r\n",
 
             (float)thermalManager.temp_hotend[0].celsius, (float)thermalManager.temp_hotend[0].target,
@@ -891,7 +949,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           }
           else if (uiCfg.print_state == PAUSED) {
             wifi_ret_ack();
-            send_to_wifi((char *)"M997 PAUSE\r\n", strlen("M997 PAUSE\r\n"));
+            send_to_wifi((uint8_t *)"M997 PAUSE\r\n", strlen("M997 PAUSE\r\n"));
           }
           else if (uiCfg.print_state == REPRINTING) {
             wifi_ret_ack();
@@ -913,8 +971,8 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
 
         case 115:
           ZERO(tempBuf);
-          send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
-          send_to_wifi((char *)"FIRMWARE_NAME:Robin_nano\r\n", strlen("FIRMWARE_NAME:Robin_nano\r\n"));
+          SEND_OK_TO_WIFI;
+          send_to_wifi((uint8_t *)"FIRMWARE_NAME:Robin_nano\r\n", strlen("FIRMWARE_NAME:Robin_nano\r\n"));
           break;
 
         default:
@@ -935,7 +993,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
                 index++;
               }
               if (left - WIFI_GCODE_BUFFER_LEAST_SIZE >= strlen((const char *)cmd_line))
-                send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+                SEND_OK_TO_WIFI;
               else
                 need_ok_later = true;
             }
@@ -961,7 +1019,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             index++;
           }
           if (left_g - WIFI_GCODE_BUFFER_LEAST_SIZE >= strlen((const char *)cmd_line))
-            send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+            SEND_OK_TO_WIFI;
           else
             need_ok_later = true;
         }
@@ -1191,29 +1249,6 @@ void utf8_2_unicode(uint8_t *source,uint8_t Len) {
   COPY(source, FileName_unicode);
 }
 
-char saveFilePath[50];
-
-static bool longName2DosName(const char* longName, uint8_t* dosName) {
-  uint8_t i = 11;
-  while (i--) dosName[i] = '\0';
-  while (*longName) {
-    uint8_t c = *longName++;
-    if (c == '.') {                   // For a dot...
-      if (i == 0) return false;
-      else { strcat((char *)dosName,".GCO"); return dosName[0] != '\0'; }
-    }
-    else {
-      // Fail for illegal characters
-      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
-      while (uint8_t b = pgm_read_byte(p++)) if (b == c) return false;
-      if (c < 0x21 || c == 0x7F) return false;           // Check size, non-printable characters
-      dosName[i++] = (c < 'a' || c > 'z') ? (c) : (c + ('A' - 'a')); // Uppercase required for 8.3 name
-    }
-    if (i >= 5) strcat((char *)dosName,"~1.GCO");
-  }
-  return dosName[0] != '\0';              // Return true if any name was set
-}
-
 static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
   uint8_t fileNameLen = *msg;
 
@@ -1226,7 +1261,7 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
 
   utf8_2_unicode(file_writer.saveFileName,fileNameLen);
 
-  ZERO(file_writer.write_buf);
+  ZERO(public_buf);
 
   if (strlen((const char *)file_writer.saveFileName) > sizeof(saveFilePath))
     return;
@@ -1234,11 +1269,7 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
   ZERO(saveFilePath);
 
   if (gCfgItems.fileSysType == FILE_SYS_SD) {
-    //sprintf((char *)saveFilePath, "/%s", file_writer.saveFileName);
-    card.mount();
-
-    //ZERO(list_file.long_name[sel_id]);
-    //memcpy(list_file.long_name[sel_id],file_writer.saveFileName,sizeof(list_file.long_name[sel_id]));
+    TERN_(SDSUPPORT, card.mount());
   }
   else if (gCfgItems.fileSysType == FILE_SYS_USB) {
 
@@ -1266,26 +1297,19 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
       lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
       return;
     }
-    sprintf((char *)saveFilePath, "/%s", dosName);
-
-    ZERO(list_file.long_name[sel_id]);
-    memcpy(list_file.long_name[sel_id], dosName, sizeof(dosName));
+    sprintf((char *)saveFilePath, "%s", dosName);
 
-    char *cur_name=strrchr((const char *)saveFilePath,'/');
+    card.cdroot();
+    upload_file.close();
+    const char * const fname = card.diveToFile(true, upload_curDir, saveFilePath);
 
-    SdFile file;
-    SdFile *curDir;
-    card.endFilePrint();
-    const char * const fname = card.diveToFile(true, curDir, cur_name);
-    if (!fname) return;
-    if (file.open(curDir, fname, O_CREAT | O_APPEND | O_WRITE | O_TRUNC)) {
-      gCfgItems.curFilesize = file.fileSize();
-    }
-    else {
+    if (!upload_file.open(upload_curDir, fname, O_CREAT | O_APPEND | O_WRITE | O_TRUNC)) {
       clear_cur_ui();
       upload_result = 2;
+
       wifiTransError.flag = 1;
       wifiTransError.start_tick = getWifiTick();
+
       lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
       return;
     }
@@ -1302,22 +1326,23 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
   lv_task_handler();
 
   file_writer.tick_begin = getWifiTick();
+
+  file_writer.fileTransfer = 1;
 }
 
-#define FRAG_MASK _BV32(31)
+#define FRAG_MASK ~_BV32(31)
 
 static void file_fragment_msg_handle(uint8_t * msg, uint16_t msgLen) {
   uint32_t frag = *((uint32_t *)msg);
-
   if ((frag & FRAG_MASK) != (uint32_t)(lastFragment + 1)) {
-    ZERO(file_writer.write_buf);
+    ZERO(public_buf);
     file_writer.write_index = 0;
     wifi_link_state = WIFI_CONNECTED;
     upload_result = 2;
   }
   else {
     if (write_to_file((char *)msg + 4, msgLen - 4) < 0) {
-      ZERO(file_writer.write_buf);
+      ZERO(public_buf);
       file_writer.write_index = 0;
       wifi_link_state = WIFI_CONNECTED;
       upload_result = 2;
@@ -1325,16 +1350,31 @@ static void file_fragment_msg_handle(uint8_t * msg, uint16_t msgLen) {
     }
     lastFragment = frag;
 
-    if ((frag & (~FRAG_MASK))) {
-      int res = card.write(file_writer.write_buf, file_writer.write_index);
+    if ((frag & (~FRAG_MASK)) != 0) {
+      int res = upload_file.write(public_buf, file_writer.write_index);
       if (res == -1) {
-        ZERO(file_writer.write_buf);
+        upload_file.close();
+        const char * const fname = card.diveToFile(true, upload_curDir, saveFilePath);
+        if (upload_file.open(upload_curDir, fname, O_WRITE)) {
+          upload_file.setpos(&pos);
+          res = upload_file.write(public_buf, file_writer.write_index);
+        }
+      }
+      upload_file.close();
+      SdFile file, *curDir;
+      const char * const fname = card.diveToFile(true, curDir, saveFilePath);
+      if (file.open(curDir, fname, O_RDWR)) {
+        gCfgItems.curFilesize = file.fileSize();
+        file.close();
+      }
+      else {
+        ZERO(public_buf);
         file_writer.write_index = 0;
         wifi_link_state = WIFI_CONNECTED;
         upload_result = 2;
         return;
       }
-      ZERO(file_writer.write_buf);
+      ZERO(public_buf);
       file_writer.write_index = 0;
       file_writer.tick_end = getWifiTick();
       upload_time = getWifiTickDiff(file_writer.tick_begin, file_writer.tick_end) / 1000;
@@ -1342,7 +1382,6 @@ static void file_fragment_msg_handle(uint8_t * msg, uint16_t msgLen) {
       wifi_link_state = WIFI_CONNECTED;
       upload_result = 3;
     }
-
   }
 }
 
@@ -1453,7 +1492,6 @@ void esp_data_parser(char *cmdRxBuf, int len) {
         esp_msg_index = 0;
         return;
       }
-
       if ((charAtArray(esp_msg_buf, esp_msg_index,  ESP_PROTOC_HEAD) != -1) && (charAtArray(esp_msg_buf, esp_msg_index, ESP_PROTOC_TAIL) != -1))
         loop_again = true;
     }
@@ -1461,19 +1499,6 @@ void esp_data_parser(char *cmdRxBuf, int len) {
 }
 
 int32_t tick_net_time1, tick_net_time2;
-
-int storeRcvData(int32_t len) {
-  unsigned char tmpW = wifiDmaRcvFifo.write_cur;
-  if (len <= UDISKBUFLEN && wifiDmaRcvFifo.state[tmpW] == udisk_buf_empty) {
-    for (uint16_t i = 0; i < len; i++)
-      wifiDmaRcvFifo.bufferAddr[tmpW][i] = WIFISERIAL.read();
-    wifiDmaRcvFifo.state[tmpW] = udisk_buf_full;
-    wifiDmaRcvFifo.write_cur = (tmpW + 1) % TRANS_RCV_FIFO_BLOCK_NUM;
-    return 1;
-  }
-  return 0;
-}
-
 int32_t readWifiFifo(uint8_t *retBuf, uint32_t bufLen) {
   unsigned char tmpR = wifiDmaRcvFifo.read_cur;
   if (bufLen >= UDISKBUFLEN && wifiDmaRcvFifo.state[tmpR] == udisk_buf_full) {
@@ -1496,20 +1521,33 @@ void stopEspTransfer() {
     wifiTransError.start_tick = getWifiTick();
     card.removeFile((const char *)saveFilePath);
   }
-  else {
-  }
+
   wifi_delay(200);
   WIFI_IO1_SET();
-  //exchangeFlashMode(1);  //change spi flash to use dma mode
+
+  // disable dma
+  dma_clear_isr_bits(DMA1, DMA_CH5);
+  bb_peri_set_bit(&USART1_BASE->CR3, USART_CR3_DMAR_BIT, 0);
+  dma_disable(DMA1, DMA_CH5);
+
+  wifi_delay(200);
+  changeFlashMode(true); // Set SPI flash to use DMA mode
   esp_port_begin(1);
+  wifi_delay(200);
+
+  W25QXX.init(SPI_QUARTER_SPEED);
+
+  TERN_(HAS_TFT_LVGL_UI_SPI, SPI_TFT.spi_init(SPI_FULL_SPEED));
+  TERN_(HAS_SERVOS, servo_init());
+  TERN_(HAS_Z_SERVO_PROBE, probe.servo_probe_init());
+
   if (wifiTransError.flag != 0x1) WIFI_IO1_RESET();
 }
 
 void wifi_rcv_handle() {
   int32_t len = 0;
-  uint8_t ucStr[(UART_RX_BUFFER_SIZE) + 1] = { 0 };
+  uint8_t ucStr[(UART_RX_BUFFER_SIZE) + 1] = {0};
   int8_t getDataF = 0;
-
   if (wifi_link_state == WIFI_TRANS_FILE) {
     #if 0
       if (WIFISERIAL.available() == UART_RX_BUFFER_SIZE) {
@@ -1531,9 +1569,9 @@ void wifi_rcv_handle() {
       getDataF = 1;
     }
     if (esp_state == TRANSFER_STORE) {
-      if (storeRcvData(UART_RX_BUFFER_SIZE)) {
+      if (storeRcvData(WIFISERIAL.usart_device->rb->buf, UART_RX_BUFFER_SIZE)) {
         esp_state = TRANSFERING;
-        //esp_dma_pre();
+        esp_dma_pre();
         if (wifiTransError.flag != 0x1) WIFI_IO1_RESET();
       }
       else
@@ -1541,13 +1579,11 @@ void wifi_rcv_handle() {
     }
   }
   else {
-    //len = readUsartFifo((SZ_USART_FIFO *)&WifiRxFifo, (int8_t *)ucStr, UART_RX_BUFFER_SIZE);
     len = readWifiBuf((int8_t *)ucStr, UART_RX_BUFFER_SIZE);
     if (len > 0) {
       esp_data_parser((char *)ucStr, len);
-
       if (wifi_link_state == WIFI_TRANS_FILE) {
-        //exchangeFlashMode(0);  //change spi flash not use dma mode
+        changeFlashMode(false); // Set SPI flash to use non-DMA mode
         wifi_delay(10);
         esp_port_begin(0);
         wifi_delay(10);
@@ -1558,7 +1594,7 @@ void wifi_rcv_handle() {
     }
     if (need_ok_later &&  (queue.length < BUFSIZE)) {
       need_ok_later = false;
-      send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+      send_to_wifi((uint8_t *)"ok\r\n", strlen("ok\r\n"));
     }
   }
 
@@ -1569,7 +1605,7 @@ void wifi_rcv_handle() {
     tick_net_time2 = getWifiTick();
 
     if (wifi_link_state == WIFI_TRANS_FILE) {
-      if ((tick_net_time1 != 0) && (getWifiTickDiff(tick_net_time1, tick_net_time2) > 4500)) {
+      if (tick_net_time1 && getWifiTickDiff(tick_net_time1, tick_net_time2) > 8000) {
         wifi_link_state = WIFI_CONNECTED;
         upload_result = 2;
         clear_cur_ui();
@@ -1577,11 +1613,10 @@ void wifi_rcv_handle() {
         lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
       }
     }
-
-    if ((tick_net_time1 != 0) && (getWifiTickDiff(tick_net_time1, tick_net_time2) > 10000))
+    if (tick_net_time1 && getWifiTickDiff(tick_net_time1, tick_net_time2) > 10000)
       wifi_link_state = WIFI_NOT_CONFIG;
 
-    if ((tick_net_time1 != 0) && (getWifiTickDiff(tick_net_time1, tick_net_time2) > 120000)) {
+    if (tick_net_time1 && getWifiTickDiff(tick_net_time1, tick_net_time2) > 120000) {
       wifi_link_state = WIFI_NOT_CONFIG;
       wifi_reset();
       tick_net_time1 = getWifiTick();
@@ -1598,7 +1633,10 @@ void wifi_rcv_handle() {
 }
 
 void wifi_looping() {
-  do { wifi_rcv_handle(); } while (wifi_link_state == WIFI_TRANS_FILE);
+  do {
+    wifi_rcv_handle();
+    watchdog_refresh();
+  } while (wifi_link_state == WIFI_TRANS_FILE);
 }
 
 void mks_esp_wifi_init() {
@@ -1616,32 +1654,8 @@ void mks_esp_wifi_init() {
   wifi_reset();
 
   #if 0
-    res = f_open(&esp_upload.uploadFile, ESP_FIRMWARE_FILE,  FA_OPEN_EXISTING | FA_READ);
-
-    if (res ==  FR_OK) {
-      f_close(&esp_upload.uploadFile);
-
-      wifi_delay(2000);
-
-      if (usartFifoAvailable((SZ_USART_FIFO *)&WifiRxFifo) < 20) {
-        return;
-      }
-
-      clear_cur_ui();
-
-      draw_dialog(DIALOG_TYPE_UPDATE_ESP_FIRMARE);
-
-      if (wifi_upload(0) >= 0) {
-
-        f_unlink("1:/MKS_WIFI_CUR");
-        f_rename(ESP_FIRMWARE_FILE,"/MKS_WIFI_CUR");
-      }
-      draw_return_ui();
-
-      update_flag = 1;
-    }
-    if (update_flag == 0) {
-      res = f_open(&esp_upload.uploadFile, ESP_WEB_FIRMWARE_FILE,  FA_OPEN_EXISTING | FA_READ);
+  if (update_flag == 0) {
+    res = f_open(&esp_upload.uploadFile, ESP_WEB_FIRMWARE_FILE,  FA_OPEN_EXISTING | FA_READ);
 
       if (res ==  FR_OK) {
         f_close(&esp_upload.uploadFile);
@@ -1694,32 +1708,42 @@ void mks_esp_wifi_init() {
   wifi_link_state = WIFI_NOT_CONFIG;
 }
 
-#define BUF_INC_POINTER(p)  ((p + 1 == UART_FIFO_BUFFER_SIZE) ? 0 : (p + 1))
 
-int usartFifoAvailable(SZ_USART_FIFO *fifo) {
-  int diff = fifo->uart_write_point - fifo->uart_read_point;
-  if (diff < 0) diff += UART_FIFO_BUFFER_SIZE;
-  return diff;
-}
+void mks_wifi_firmware_update() {
+  card.openFileRead((char *)ESP_FIRMWARE_FILE);
+
+  if (card.isFileOpen()) {
+    card.closefile();
+
+    wifi_delay(2000);
 
-int readUsartFifo(SZ_USART_FIFO *fifo, int8_t *buf, int32_t len) {
-  int i = 0 ;
-  while (i < len && fifo->uart_read_point != fifo->uart_write_point) {
-    buf[i++] = fifo->uartTxBuffer[fifo->uart_read_point];
-    fifo->uart_read_point = BUF_INC_POINTER(fifo->uart_read_point);
+    if (usartFifoAvailable((SZ_USART_FIFO *)&WifiRxFifo) < 20)
+      return;
+
+    clear_cur_ui();
+
+    lv_draw_dialog(DIALOG_TYPE_UPDATE_ESP_FIRMARE);
+
+    lv_task_handler();
+    watchdog_refresh();
+
+    if (wifi_upload(0) >= 0) {
+      card.removeFile((char *)ESP_FIRMWARE_FILE_RENAME);
+      SdFile file, *curDir;
+      const char * const fname = card.diveToFile(true, curDir, ESP_FIRMWARE_FILE);
+      if (file.open(curDir, fname, O_READ)) {
+        file.rename(curDir, (char *)ESP_FIRMWARE_FILE_RENAME);
+        file.close();
+      }
+    }
+    clear_cur_ui();
   }
-  return i;
 }
 
-int writeUsartFifo(SZ_USART_FIFO *fifo, int8_t *buf, int32_t len) {
-  if (buf == 0 || len <= 0) return -1;
+#define BUF_INC_POINTER(p)  ((p + 1 == UART_FIFO_BUFFER_SIZE) ? 0:(p + 1))
 
-  int i = 0 ;
-  while (i < len && fifo->uart_read_point != BUF_INC_POINTER(fifo->uart_write_point)) {
-    fifo->uartTxBuffer[fifo->uart_write_point] = buf[i++];
-    fifo->uart_write_point = BUF_INC_POINTER(fifo->uart_write_point);
-  }
-  return i;
+int usartFifoAvailable(SZ_USART_FIFO *fifo) {
+  return WIFISERIAL.available();
 }
 
 void get_wifi_commands() {
@@ -1791,10 +1815,9 @@ void get_wifi_commands() {
         if (!wifi_comment_mode) wifi_line_buffer[wifi_read_count++] = wifi_char;
       }
     }
-  }// queue has space, serial has data
-  else {
+  } // queue has space, serial has data
+  else
     espGcodeFifo.wait_tick++;
-  }
 }
 
 int readWifiBuf(int8_t *buf, int32_t len) {

commit 44c57ab05a8f909b85f51e08c90316b41e50c455
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 21:02:35 2021 -0600

    MKS UI prelim. cleanup (#20763)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index f38145aa80..a8537dd3de 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -110,8 +110,6 @@ extern CLOUD_PARA cloud_para;
 
 extern bool once_flag, flash_preview_begin, default_preview_flg, gcode_preview_over;
 
-extern uint8_t bmp_public_buf[17 * 1024];
-
 uint32_t getWifiTick() {
   return millis();
 }
@@ -126,8 +124,10 @@ uint32_t getWifiTickDiff(int32_t lastTick, int32_t curTick) {
 void wifi_delay(int n) {
   uint32_t begin = getWifiTick();
   uint32_t end = begin;
-  while (getWifiTickDiff(begin, end) < (uint32_t)n)
+  while (getWifiTickDiff(begin, end) < (uint32_t)n) {
+    watchdog_refresh();
     end = getWifiTick();
+  }
 }
 
 void wifi_reset() {
@@ -304,7 +304,7 @@ void esp_port_begin(uint8_t interrupt) {
 
 #if ENABLED(MKS_WIFI_MODULE)
 
-  int raw_send_to_wifi(char *buf, int len) {
+  int raw_send_to_wifi(uint8_t *buf, int len) {
     if (buf == 0 || len <= 0) return 0;
     for (int i = 0; i < len; i++)
       WIFISERIAL.write(*(buf + i));
@@ -315,11 +315,11 @@ void esp_port_begin(uint8_t interrupt) {
 
 void wifi_ret_ack() {}
 
-char buf_to_wifi[256];
+uint8_t buf_to_wifi[256];
 int index_to_wifi = 0;
-int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
-  char wifi_ret_head = 0xA5;
-  char wifi_ret_tail = 0xFC;
+int package_to_wifi(WIFI_RET_TYPE type, uint8_t *buf, int len) {
+  uint8_t wifi_ret_head = 0xA5;
+  uint8_t wifi_ret_tail = 0xFC;
 
   if (type == WIFI_PARA_SET) {
     int data_offset = 4;
@@ -331,9 +331,9 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
 
     buf_to_wifi[data_offset] = gCfgItems.wifi_mode_sel;
     buf_to_wifi[data_offset + 1]  = apLen;
-    strncpy(&buf_to_wifi[data_offset + 2], (const char *)uiCfg.wifi_name, apLen);
+    memcpy(&buf_to_wifi[data_offset + 2], (const char *)uiCfg.wifi_name, apLen);
     buf_to_wifi[data_offset + apLen + 2]  = keyLen;
-    strncpy(&buf_to_wifi[data_offset + apLen + 3], (const char *)uiCfg.wifi_key, keyLen);
+    memcpy(&buf_to_wifi[data_offset + apLen + 3], (const char *)uiCfg.wifi_key, keyLen);
     buf_to_wifi[data_offset + apLen + keyLen + 3] = wifi_ret_tail;
 
     index_to_wifi = apLen + keyLen + 3;
@@ -410,7 +410,7 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
 
     buf_to_wifi[data_offset] = gCfgItems.cloud_enable ? 0x0A : 0x05;
     buf_to_wifi[data_offset + 1]  = urlLen;
-    strncpy(&buf_to_wifi[data_offset + 2], (const char *)uiCfg.cloud_hostUrl, urlLen);
+    memcpy(&buf_to_wifi[data_offset + 2], (const char *)uiCfg.cloud_hostUrl, urlLen);
     buf_to_wifi[data_offset + urlLen + 2] = uiCfg.cloud_port & 0xFF;
     buf_to_wifi[data_offset + urlLen + 3] = (uiCfg.cloud_port >> 8) & 0xFF;
     buf_to_wifi[data_offset + urlLen + 4] = wifi_ret_tail;
@@ -555,7 +555,7 @@ uint8_t Explore_Disk(char* path , uint8_t recu_level) {
       strcat(Fstream, ".DIR");
 
     strcat(Fstream, "\r\n");
-    send_to_wifi(Fstream, strlen(Fstream));
+    send_to_wifi((uint8_t*)Fstream, strlen(Fstream));
   }
 
   return fileCnt;
@@ -589,7 +589,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
 
             if (tmpStr == 0) {
               gCfgItems.fileSysType = FILE_SYS_SD;
-              send_to_wifi((char *)"Begin file list\r\n", strlen("Begin file list\r\n"));
+              send_to_wifi((uint8_t *)"Begin file list\r\n", strlen("Begin file list\r\n"));
               get_file_list((char *)"0:/");
               send_to_wifi((char *)"End file list\r\n", strlen("End file list\r\n"));
               send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
@@ -602,7 +602,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
               char *path = (char *)tempBuf;
 
               if (strlen((char *)&tmpStr[index]) < 80) {
-                send_to_wifi((char *)"Begin file list\r\n", strlen("Begin file list\r\n"));
+                send_to_wifi((uint8_t *)"Begin file list\r\n", strlen("Begin file list\r\n"));
 
                 if (strncmp((char *)&tmpStr[index], "1:", 2) == 0)
                   gCfgItems.fileSysType = FILE_SYS_SD;
@@ -611,7 +611,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
 
                 strcpy((char *)path, (char *)&tmpStr[index]);
                 get_file_list(path);
-                send_to_wifi((char *)"End file list\r\n", strlen("End file list\r\n"));
+                send_to_wifi((uint8_t *)"End file list\r\n", strlen("End file list\r\n"));
               }
               send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
             }
@@ -651,9 +651,9 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
                 card.openFileRead(cur_name);
 
                 if (card.isFileOpen())
-                  send_to_wifi((char *)"File selected\r\n", strlen("File selected\r\n"));
+                  send_to_wifi((uint8_t *)"File selected\r\n", strlen("File selected\r\n"));
                 else {
-                  send_to_wifi((char *)"file.open failed\r\n", strlen("file.open failed\r\n"));
+                  send_to_wifi((uint8_t *)"file.open failed\r\n", strlen("file.open failed\r\n"));
                   strcpy(list_file.file_name[sel_id], "notValid");
                 }
                 send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
@@ -772,7 +772,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             print_rate = uiCfg.totalSend;
             ZERO(tempBuf);
             sprintf((char *)tempBuf, "M27 %d\r\n", print_rate);
-            send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
+            send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
           }
           break;
 
@@ -857,7 +857,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             );
           }
 
-          send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
+          send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
           queue.enqueue_one_P(PSTR("M105"));
           break;
 
@@ -866,7 +866,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             ZERO(tempBuf);
             sprintf((char *)tempBuf, "M992 %d%d:%d%d:%d%d\r\n", print_time.hours/10, print_time.hours%10, print_time.minutes/10, print_time.minutes%10, print_time.seconds/10, print_time.seconds%10);
             wifi_ret_ack();
-            send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
+            send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
           }
           break;
 
@@ -876,18 +876,18 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             if (strlen((char *)list_file.file_name[sel_id]) > (100 - 1)) return;
             sprintf((char *)tempBuf, "M994 %s;%d\n", list_file.file_name[sel_id],(int)gCfgItems.curFilesize);
             wifi_ret_ack();
-            send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
+            send_to_wifi((uint8_t *)tempBuf, strlen((char *)tempBuf));
           }
           break;
 
         case 997:
           if (uiCfg.print_state == IDLE) {
             wifi_ret_ack();
-            send_to_wifi((char *)"M997 IDLE\r\n", strlen("M997 IDLE\r\n"));
+            send_to_wifi((uint8_t *)"M997 IDLE\r\n", strlen("M997 IDLE\r\n"));
           }
           else if (uiCfg.print_state == WORKING) {
             wifi_ret_ack();
-            send_to_wifi((char *)"M997 PRINTING\r\n", strlen("M997 PRINTING\r\n"));
+            send_to_wifi((uint8_t *)"M997 PRINTING\r\n", strlen("M997 PRINTING\r\n"));
           }
           else if (uiCfg.print_state == PAUSED) {
             wifi_ret_ack();
@@ -895,7 +895,7 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           }
           else if (uiCfg.print_state == REPRINTING) {
             wifi_ret_ack();
-            send_to_wifi((char *)"M997 PAUSE\r\n", strlen("M997 PAUSE\r\n"));
+            send_to_wifi((uint8_t *)"M997 PAUSE\r\n", strlen("M997 PAUSE\r\n"));
           }
           if (uiCfg.command_send == 0) get_wifi_list_command_send();
           break;
@@ -977,8 +977,8 @@ static int32_t charAtArray(const uint8_t *_array, uint32_t _arrayLen, uint8_t _c
 }
 
 void get_wifi_list_command_send() {
-  char buf[] = { 0xA5, 0x07, 0x00, 0x00, 0xFC };
-  raw_send_to_wifi(buf, 5);
+  uint8_t cmd_wifi_list[] = { 0xA5, 0x07, 0x00, 0x00, 0xFC };
+  raw_send_to_wifi(cmd_wifi_list, COUNT(cmd_wifi_list));
 }
 
 static void net_msg_handle(uint8_t * msg, uint16_t msgLen) {
@@ -1043,7 +1043,7 @@ static void net_msg_handle(uint8_t * msg, uint16_t msgLen) {
     if ((wifiPara.mode != gCfgItems.wifi_mode_sel)
       || (strncmp(wifiPara.ap_name, (const char *)uiCfg.wifi_name, 32) != 0)
       || (strncmp(wifiPara.keyCode, (const char *)uiCfg.wifi_key, 64) != 0)) {
-      package_to_wifi(WIFI_PARA_SET, (char *)0, 0);
+      package_to_wifi(WIFI_PARA_SET, (uint8_t *)0, 0);
     }
     else uiCfg.configWifi = 0;
   }
@@ -1051,7 +1051,7 @@ static void net_msg_handle(uint8_t * msg, uint16_t msgLen) {
     if (((cloud_para.state >> 4) != (char)gCfgItems.cloud_enable)
       || (strncmp(cloud_para.hostUrl, (const char *)uiCfg.cloud_hostUrl, 96) != 0)
       || (cloud_para.port != uiCfg.cloud_port)) {
-      package_to_wifi(WIFI_CLOUD_CFG, (char *)0, 0);
+      package_to_wifi(WIFI_CLOUD_CFG, (uint8_t *)0, 0);
     }
     else cfg_cloud_flag = 0;
   }
@@ -1091,17 +1091,13 @@ static void wifi_list_msg_handle(uint8_t * msg, uint16_t msgLen) {
           }
         }
         if (wifi_name_is_same != 1) {
-          //for (j=0;j<wifiNameLen;j++) {
             if (str[0] > 0x80) {
               wifi_name_is_same = 1;
-              //break;
             }
-          //}
         }
         if (wifi_name_is_same == 1) {
           wifi_name_is_same = 0;
           wifiMsgIdex  +=  wifiNameLen;
-          //wifi_list.RSSI[i] = msg[wifiMsgIdex];
           wifiMsgIdex  +=  1;
           wifi_name_num--;
           //i--;

commit 7f3dcb3e8a8cc1a82c1d9315e9fada5ff59058f2
Author: Johan van der Vyver <9843081+jvandervyver@users.noreply.github.com>
Date:   Wed Jan 13 02:05:49 2021 +0200

    Multi-platform DWIN_CREALITY_LCD support (#20738)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index eeeff4fa31..f38145aa80 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -282,27 +282,24 @@ void esp_port_begin(uint8_t interrupt) {
     dma_init();
   }
   #endif
-  if (interrupt) {
-    #if ENABLED(MKS_WIFI_MODULE)
-      WIFISERIAL.end();
-      for (uint16_t i = 0; i < 65535; i++);
-      WIFISERIAL.begin(WIFI_BAUDRATE);
-      uint32_t serial_connect_timeout = millis() + 1000UL;
-        while (/*!WIFISERIAL && */PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
-      //for (uint8_t i=0;i<100;i++)WIFISERIAL.write(0x33);
-    #endif
-  }
-  else {
-    #if ENABLED(MKS_WIFI_MODULE)
-      WIFISERIAL.end();
-      for (uint16_t i = 0; i < 65535; i++);
-      WIFISERIAL.begin(WIFI_UPLOAD_BAUDRATE);
-      uint32_t serial_connect_timeout = millis() + 1000UL;
-        while (/*!WIFISERIAL && */PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
-      //for (uint16_t i=0;i<65535;i++);//WIFISERIAL.write(0x33);
-    #endif
-    dma_init();
-  }
+
+  #if ENABLED(MKS_WIFI_MODULE)
+    WIFISERIAL.end();
+    for (uint16_t i = 0; i < 65535; i++) { /*nada*/ }
+    WIFISERIAL.begin(interrupt ? WIFI_BAUDRATE : WIFI_UPLOAD_BAUDRATE);
+
+    const millis_t serial_connect_timeout = millis() + 1000UL;
+    while (/*!WIFISERIAL && */PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
+
+    if (interrupt) {
+      //for (uint8_t i=0;i<100;i++) WIFISERIAL.write(0x33);
+    }
+    else {
+      //for (uint16_t i=0;i<65535;i++); //WIFISERIAL.write(0x33);
+    }
+  #endif
+
+  if (!interrupt) dma_init();
 }
 
 #if ENABLED(MKS_WIFI_MODULE)

commit 3893114c86c195d227e023c9e702197b54b2636f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Nov 19 15:51:53 2020 -0600

    MKS WiFi preliminary changes

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index bfc23f238c..eeeff4fa31 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -27,7 +27,7 @@
 #include "wifi_module.h"
 #include "wifi_upload.h"
 
-#if ENABLED(USE_WIFI_FUNCTION)
+#if ENABLED(MKS_WIFI_MODULE)
 
 #include "../../../../MarlinCore.h"
 #include "../../../../module/temperature.h"
@@ -283,7 +283,7 @@ void esp_port_begin(uint8_t interrupt) {
   }
   #endif
   if (interrupt) {
-    #if ENABLED(USE_WIFI_FUNCTION)
+    #if ENABLED(MKS_WIFI_MODULE)
       WIFISERIAL.end();
       for (uint16_t i = 0; i < 65535; i++);
       WIFISERIAL.begin(WIFI_BAUDRATE);
@@ -293,7 +293,7 @@ void esp_port_begin(uint8_t interrupt) {
     #endif
   }
   else {
-    #if ENABLED(USE_WIFI_FUNCTION)
+    #if ENABLED(MKS_WIFI_MODULE)
       WIFISERIAL.end();
       for (uint16_t i = 0; i < 65535; i++);
       WIFISERIAL.begin(WIFI_UPLOAD_BAUDRATE);
@@ -305,7 +305,7 @@ void esp_port_begin(uint8_t interrupt) {
   }
 }
 
-#if ENABLED(USE_WIFI_FUNCTION)
+#if ENABLED(MKS_WIFI_MODULE)
 
   int raw_send_to_wifi(char *buf, int len) {
     if (buf == 0 || len <= 0) return 0;
@@ -1811,5 +1811,5 @@ int readWifiBuf(int8_t *buf, int32_t len) {
   return i;
 }
 
-#endif // USE_WIFI_FUNCTION
+#endif // MKS_WIFI_MODULE
 #endif // HAS_TFT_LVGL_UI

commit 072f996af70b5ac635893eca2d4bd4bbb4f00acc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 21 12:45:27 2020 -0500

    General cleanup, mostly MKS UI (#19825)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index e4fb4ece03..bfc23f238c 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -66,14 +66,13 @@ int cfg_cloud_flag = 0;
 
 extern PRINT_TIME print_time;
 
-char wifi_firm_ver[20] = {0};
+char wifi_firm_ver[20] = { 0 };
 WIFI_GCODE_BUFFER espGcodeFifo;
 extern uint8_t pause_resum;
 
 uint8_t wifi_connect_flg = 0;
 extern volatile uint8_t get_temp_flag;
 
-
 #define WIFI_MODE 2
 #define WIFI_AP_MODE  3
 
@@ -96,7 +95,7 @@ extern uint32_t wifi_loop_cycle;
 volatile TRANSFER_STATE esp_state;
 
 uint8_t left_to_send = 0;
-uint8_t left_to_save[96] = {0};
+uint8_t left_to_save[96] = { 0 };
 
 volatile WIFI_DMA_RCV_FIFO wifiDmaRcvFifo;
 
@@ -109,53 +108,44 @@ extern WIFI_PARA wifiPara;
 extern IP_PARA ipPara;
 extern CLOUD_PARA cloud_para;
 
-extern uint8_t once_flag;
-extern uint8_t flash_preview_begin;
-extern uint8_t default_preview_flg;
-extern uint8_t gcode_preview_over;
+extern bool once_flag, flash_preview_begin, default_preview_flg, gcode_preview_over;
 
 extern uint8_t bmp_public_buf[17 * 1024];
 
-uint32_t   getWifiTick() {
+uint32_t getWifiTick() {
   return millis();
 }
 
-uint32_t  getWifiTickDiff(int32_t lastTick, int32_t  curTick) {
-  if (lastTick <= curTick) {
+uint32_t getWifiTickDiff(int32_t lastTick, int32_t curTick) {
+  if (lastTick <= curTick)
     return (curTick - lastTick) * TICK_CYCLE;
-  }
-  else {
+  else
     return (0xFFFFFFFF - lastTick + curTick) * TICK_CYCLE;
-  }
 }
 
 void wifi_delay(int n) {
   uint32_t begin = getWifiTick();
   uint32_t end = begin;
-
-  while (getWifiTickDiff(begin, end) < (uint32_t)n) {
+  while (getWifiTickDiff(begin, end) < (uint32_t)n)
     end = getWifiTick();
-  }
 }
 
 void wifi_reset() {
   uint32_t start, now;
   start = getWifiTick();
   now = start;
-        WIFI_RESET();
-  while (getWifiTickDiff(start, now) < 500) {
+  WIFI_RESET();
+  while (getWifiTickDiff(start, now) < 500)
     now = getWifiTick();
-  }
-    WIFI_SET();
 
+  WIFI_SET();
 }
 
 void mount_file_sys(uint8_t disk_type) {
   if (disk_type == FILE_SYS_SD) {
-    card.mount();
+    TERN_(SDSUPPORT, card.mount());
   }
   else if (disk_type == FILE_SYS_USB) {
-
   }
 }
 
@@ -201,7 +191,6 @@ static void dma_init() {
   memset(wifiDmaRcvFifo.bufferAddr[0], 0, 1024 * TRANS_RCV_FIFO_BLOCK_NUM);
   wifiDmaRcvFifo.read_cur = 0;
   wifiDmaRcvFifo.write_cur = 0;
-
 }
 
 static void wifi_deInit() {
@@ -300,7 +289,7 @@ void esp_port_begin(uint8_t interrupt) {
       WIFISERIAL.begin(WIFI_BAUDRATE);
       uint32_t serial_connect_timeout = millis() + 1000UL;
         while (/*!WIFISERIAL && */PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
-      //for(uint8_t i=0;i<100;i++)WIFISERIAL.write(0x33);
+      //for (uint8_t i=0;i<100;i++)WIFISERIAL.write(0x33);
     #endif
   }
   else {
@@ -310,7 +299,7 @@ void esp_port_begin(uint8_t interrupt) {
       WIFISERIAL.begin(WIFI_UPLOAD_BAUDRATE);
       uint32_t serial_connect_timeout = millis() + 1000UL;
         while (/*!WIFISERIAL && */PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
-      //for(uint16_t i=0;i<65535;i++);//WIFISERIAL.write(0x33);
+      //for (uint16_t i=0;i<65535;i++);//WIFISERIAL.write(0x33);
     #endif
     dma_init();
   }
@@ -318,16 +307,14 @@ void esp_port_begin(uint8_t interrupt) {
 
 #if ENABLED(USE_WIFI_FUNCTION)
 
-int raw_send_to_wifi(char *buf, int len) {
-  if (buf == 0 || len <= 0) return 0;
-
-  for (int i = 0; i < len; i++)
-    WIFISERIAL.write(*(buf + i));
-
-  return len;
-}
+  int raw_send_to_wifi(char *buf, int len) {
+    if (buf == 0 || len <= 0) return 0;
+    for (int i = 0; i < len; i++)
+      WIFISERIAL.write(*(buf + i));
+    return len;
+  }
 
-#endif // USE_WIFI_FUNCTION
+#endif
 
 void wifi_ret_ack() {}
 
@@ -342,7 +329,7 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
     int apLen = strlen((const char *)uiCfg.wifi_name);
     int keyLen = strlen((const char *)uiCfg.wifi_key);
 
-    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    ZERO(buf_to_wifi);
     index_to_wifi = 0;
 
     buf_to_wifi[data_offset] = gCfgItems.wifi_mode_sel;
@@ -361,18 +348,17 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
 
     raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
 
-    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    ZERO(buf_to_wifi);
     index_to_wifi = 0;
-
   }
   else if (type == WIFI_TRANS_INF) {
     if (len > (int)(sizeof(buf_to_wifi) - index_to_wifi - 5)) {
-      memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+      ZERO(buf_to_wifi);
       index_to_wifi = 0;
       return 0;
     }
 
-     if (len > 0) {
+   if (len > 0) {
       memcpy(&buf_to_wifi[4 + index_to_wifi], buf, len);
       index_to_wifi += len;
 
@@ -380,12 +366,12 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
         return 0;
 
        if (buf_to_wifi[index_to_wifi + 3] == '\n') {
-        //mask "wait" "busy" "X:"
+        // mask "wait" "busy" "X:"
         if (((buf_to_wifi[4] == 'w') && (buf_to_wifi[5] == 'a') && (buf_to_wifi[6] == 'i')  && (buf_to_wifi[7] == 't') )
           || ((buf_to_wifi[4] == 'b') && (buf_to_wifi[5] == 'u') && (buf_to_wifi[6] == 's')  && (buf_to_wifi[7] == 'y') )
           || ((buf_to_wifi[4] == 'X') && (buf_to_wifi[5] == ':') )
-          ) {
-          memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+        ) {
+          ZERO(buf_to_wifi);
           index_to_wifi = 0;
           return 0;
         }
@@ -398,13 +384,13 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
 
         raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
 
-        memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
-         index_to_wifi = 0;
-       }
+        ZERO(buf_to_wifi);
+        index_to_wifi = 0;
+      }
     }
   }
   else if (type == WIFI_EXCEP_INF) {
-    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    ZERO(buf_to_wifi);
 
     buf_to_wifi[0] = wifi_ret_head;
     buf_to_wifi[1] = type;
@@ -415,25 +401,21 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
 
     raw_send_to_wifi(buf_to_wifi, 6);
 
-    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    ZERO(buf_to_wifi);
     index_to_wifi = 0;
   }
   else if (type == WIFI_CLOUD_CFG) {
     int data_offset = 4;
     int urlLen = strlen((const char *)uiCfg.cloud_hostUrl);
 
-    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    ZERO(buf_to_wifi);
     index_to_wifi = 0;
 
-    if (gCfgItems.cloud_enable == true)
-      buf_to_wifi[data_offset] = 0x0A;
-    else
-      buf_to_wifi[data_offset] = 0x05;
-
+    buf_to_wifi[data_offset] = gCfgItems.cloud_enable ? 0x0A : 0x05;
     buf_to_wifi[data_offset + 1]  = urlLen;
     strncpy(&buf_to_wifi[data_offset + 2], (const char *)uiCfg.cloud_hostUrl, urlLen);
-    buf_to_wifi[data_offset + urlLen + 2]  = uiCfg.cloud_port & 0xFF;
-    buf_to_wifi[data_offset + urlLen + 3]  = (uiCfg.cloud_port >> 8) & 0xFF;
+    buf_to_wifi[data_offset + urlLen + 2] = uiCfg.cloud_port & 0xFF;
+    buf_to_wifi[data_offset + urlLen + 3] = (uiCfg.cloud_port >> 8) & 0xFF;
     buf_to_wifi[data_offset + urlLen + 4] = wifi_ret_tail;
 
     index_to_wifi = urlLen + 4;
@@ -445,11 +427,11 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
 
     raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
 
-    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    ZERO(buf_to_wifi);
     index_to_wifi = 0;
   }
   else if (type == WIFI_CLOUD_UNBIND) {
-    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    ZERO(buf_to_wifi);
 
     buf_to_wifi[0] = wifi_ret_head;
     buf_to_wifi[1] = type;
@@ -459,7 +441,7 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
 
     raw_send_to_wifi(buf_to_wifi, 5);
 
-    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    ZERO(buf_to_wifi);
     index_to_wifi = 0;
   }
 }
@@ -467,22 +449,16 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
 
 int send_to_wifi(char *buf, int len) { return package_to_wifi(WIFI_TRANS_INF, buf, len); }
 
-void set_cur_file_sys(int fileType) {
-  gCfgItems.fileSysType = fileType;
-}
+void set_cur_file_sys(int fileType) { gCfgItems.fileSysType = fileType; }
 
 void get_file_list(char *path) {
-  if ( path == 0) {
-    return;
-  }
+  if (!path) return;
 
   if (gCfgItems.fileSysType == FILE_SYS_SD) {
-    #if ENABLED(SDSUPPORT)
-    card.mount();
-    #endif
+    TERN_(SDSUPPORT, card.mount());
   }
   else if (gCfgItems.fileSysType == FILE_SYS_USB) {
-    //udisk
+    // udisk
   }
   Explore_Disk(path, 0);
 }
@@ -502,24 +478,19 @@ FILE_WRITER file_writer;
 
 int32_t lastFragment = 0;
 
-char lastBinaryCmd[50] = {0};
+char lastBinaryCmd[50] = { 0 };
 
 int total_write = 0;
-char binary_head[2] = {0, 0};
+char binary_head[2] = { 0, 0 };
 unsigned char binary_data_len = 0;
 
 int write_to_file(char *buf, int len) {
-  int i;
-  int res;
-
-  for (i = 0; i < len; i++) {
+  for (int i = 0; i < len; i++) {
     file_writer.write_buf[file_writer.write_index++] = buf[i];
     if (file_writer.write_index >= 512) {
-      res = card.write(file_writer.write_buf, file_writer.write_index);
-      if (res == -1) {
-        return  -1;
-      }
-      memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
+      int res = card.write(file_writer.write_buf, file_writer.write_index);
+      if (res == -1) return -1;
+      ZERO(file_writer.write_buf);
       file_writer.write_index = 0;
     }
   }
@@ -536,7 +507,7 @@ int write_to_file(char *buf, int len) {
 
 #define ESP_TYPE_WIFI_LIST    (uint8_t)0x4
 
-uint8_t esp_msg_buf[UART_RX_BUFFER_SIZE] = {0};
+uint8_t esp_msg_buf[UART_RX_BUFFER_SIZE] = { 0 };
 uint16_t esp_msg_index = 0;
 
 typedef struct {
@@ -564,93 +535,71 @@ static int cut_msg_head(uint8_t *msg, uint16_t msgLen, uint16_t cutLen) {
   return msgLen - cutLen;
 }
 
+uint8_t Explore_Disk(char* path , uint8_t recu_level) {
+  char tmp[200];
+  char Fstream[200];
 
-uint8_t Explore_Disk (char* path , uint8_t recu_level) {
-    char tmp[200];
-    char Fstream[200];
-
-  if (path == 0)return 0;
+  if (!path) return 0;
 
   const uint8_t fileCnt = card.get_num_Files();
 
   for (uint8_t i = 0; i < fileCnt; i++) {
-    const uint16_t nr =
-          #if ENABLED(SDCARD_RATHERRECENTFIRST) && DISABLED(SDCARD_SORT_ALPHA)
-              fileCnt - 1 -
-            #endif
-          i;
-
-          #if ENABLED(SDCARD_SORT_ALPHA)
-            card.getfilename_sorted(nr);
-          #else
-            card.getfilename_sorted(nr);
-          #endif
-      memset(tmp, 0, sizeof(tmp));
-      //if (card.longFilename[0] == 0)
-        strcpy(tmp, card.filename);
-      //else
-        //strcpy(tmp, card.longFilename);
-
-      memset(Fstream, 0, sizeof(Fstream));
-      strcpy(Fstream, tmp);
-
-          if (card.flag.filenameIsDir && (recu_level <= 10)) {
-        strcat(Fstream, ".DIR\r\n");
-        send_to_wifi(Fstream, strlen(Fstream));
-          }
-          else {
-              strcat(Fstream, "\r\n");
-        send_to_wifi(Fstream, strlen(Fstream));
-          }
+    card.getfilename_sorted(SD_ORDER(i, fileCnt));
+
+    //if (card.longFilename[0] == 0)
+      strcpy(tmp, card.filename);
+    //else
+    //  strcpy(tmp, card.longFilename);
+
+    ZERO(Fstream);
+    strcpy(Fstream, tmp);
+
+    if (card.flag.filenameIsDir && recu_level <= 10)
+      strcat(Fstream, ".DIR");
+
+    strcat(Fstream, "\r\n");
+    send_to_wifi(Fstream, strlen(Fstream));
   }
 
   return fileCnt;
 }
 
 static void wifi_gcode_exec(uint8_t *cmd_line) {
-  int8_t  tempBuf[100] = {0};
+  int8_t tempBuf[100] = { 0 };
   uint8_t *tmpStr = 0;
   int  cmd_value;
   volatile int print_rate;
-  if ((strstr((char *)&cmd_line[0], "\n") != 0) && ((strstr((char *)&cmd_line[0], "G") != 0) || (strstr((char *)&cmd_line[0], "M") != 0) || (strstr((char *)&cmd_line[0], "T") != 0) )) {
+  if (strchr((char *)cmd_line, '\n') && (strchr((char *)cmd_line, 'G') || strchr((char *)cmd_line, 'M') || strchr((char *)cmd_line, 'T'))) {
+    tmpStr = (uint8_t *)strchr((char *)cmd_line, '\n');
+    if (tmpStr) *tmpStr = '\0';
 
-    tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "\n");
-    if (tmpStr) {
-      *tmpStr = '\0';
-    }
-    tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "\r");
-    if (tmpStr) {
-      *tmpStr = '\0';
-    }
-    tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "*");
+    tmpStr = (uint8_t *)strchr((char *)cmd_line, '\r');
+    if (tmpStr) *tmpStr = '\0';
+
+    tmpStr = (uint8_t *)strchr((char *)cmd_line, '*');
+    if (tmpStr) *tmpStr = '\0';
+
+    tmpStr = (uint8_t *)strchr((char *)cmd_line, 'M');
     if (tmpStr) {
-      *tmpStr = '\0';
-    }
-    tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "M");
-    if ( tmpStr) {
       cmd_value = atoi((char *)(tmpStr + 1));
-      tmpStr = (uint8_t *)strstr((char *)tmpStr, " ");
+      tmpStr = (uint8_t *)strchr((char *)tmpStr, ' ');
 
       switch (cmd_value) {
 
-        case 20: //print sd / udisk file
+        case 20: // M20: Print SD / µdisk file
           if (uiCfg.print_state == IDLE) {
             int index = 0;
 
             if (tmpStr == 0) {
               gCfgItems.fileSysType = FILE_SYS_SD;
               send_to_wifi((char *)"Begin file list\r\n", strlen("Begin file list\r\n"));
-
               get_file_list((char *)"0:/");
-
               send_to_wifi((char *)"End file list\r\n", strlen("End file list\r\n"));
-
               send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
               break;
             }
 
-            while (tmpStr[index] == ' ')
-              index++;
+            while (tmpStr[index] == ' ') index++;
 
             if (gCfgItems.wifi_type == ESP_WIFI) {
               char *path = (char *)tempBuf;
@@ -658,13 +607,11 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
               if (strlen((char *)&tmpStr[index]) < 80) {
                 send_to_wifi((char *)"Begin file list\r\n", strlen("Begin file list\r\n"));
 
-                if (strncmp((char *)&tmpStr[index], "1:", 2) == 0) {
+                if (strncmp((char *)&tmpStr[index], "1:", 2) == 0)
                   gCfgItems.fileSysType = FILE_SYS_SD;
-
-                }
-                else if (strncmp((char *)&tmpStr[index], "0:", 2) == 0) {
+                else if (strncmp((char *)&tmpStr[index], "0:", 2) == 0)
                   gCfgItems.fileSysType = FILE_SYS_USB;
-                }
+
                 strcpy((char *)path, (char *)&tmpStr[index]);
                 get_file_list(path);
                 send_to_wifi((char *)"End file list\r\n", strlen("End file list\r\n"));
@@ -683,49 +630,37 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           /*select the file*/
           if (uiCfg.print_state == IDLE) {
             int index = 0;
-            while (tmpStr[index] == ' ')
-              index++;
+            while (tmpStr[index] == ' ') index++;
 
             if (strstr((char *)&tmpStr[index], ".g") || strstr((char *)&tmpStr[index], ".G")) {
               if (strlen((char *)&tmpStr[index]) < 80) {
-                memset(list_file.file_name[sel_id], 0, sizeof(list_file.file_name[sel_id]));
+                ZERO(list_file.file_name[sel_id]);
 
                 if (gCfgItems.wifi_type == ESP_WIFI) {
-                  if (strncmp((char *)&tmpStr[index], "1:", 2) == 0) {
+                  if (strncmp((char *)&tmpStr[index], "1:", 2) == 0)
                     gCfgItems.fileSysType = FILE_SYS_SD;
-
-                  }
-                  else if (strncmp((char *)&tmpStr[index], "0:", 2) == 0) {
+                  else if (strncmp((char *)&tmpStr[index], "0:", 2) == 0)
                     gCfgItems.fileSysType = FILE_SYS_USB;
-                  }
-                  else {
-                    if (tmpStr[index] != '/')
-                      strcat((char *)list_file.file_name[0], "/");
-                  }
+                  else if (tmpStr[index] != '/')
+                    strcat((char *)list_file.file_name[0], "/");
                   strcat((char *)list_file.file_name[sel_id], (char *)&tmpStr[index]);
 
                 }
-                else {
+                else
                   strcpy(list_file.file_name[sel_id], (char *)&tmpStr[index]);
-                }
 
                 char *cur_name=strrchr(list_file.file_name[sel_id],'/');
 
                 card.openFileRead(cur_name);
 
-                if (card.isFileOpen()) {
+                if (card.isFileOpen())
                   send_to_wifi((char *)"File selected\r\n", strlen("File selected\r\n"));
-
-                }
                 else {
                   send_to_wifi((char *)"file.open failed\r\n", strlen("file.open failed\r\n"));
                   strcpy(list_file.file_name[sel_id], "notValid");
                 }
                 send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
-
               }
-
-
             }
           }
           break;
@@ -740,60 +675,57 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
               uiCfg.print_state = WORKING;
               lv_draw_printing();
 
-              if (gcode_preview_over != 1) {
-                #if ENABLED(SDSUPPORT)
-                char *cur_name;
-                cur_name=strrchr(list_file.file_name[sel_id],'/');
-
-                SdFile file;
-                SdFile *curDir;
-                card.endFilePrint();
-                const char * const fname = card.diveToFile(true, curDir, cur_name);
-                if (!fname) return;
-                if (file.open(curDir, fname, O_READ)) {
-                  gCfgItems.curFilesize = file.fileSize();
-                  file.close();
-                  update_spi_flash();
-                }
-                card.openFileRead(cur_name);
-                if (card.isFileOpen()) {
-                          feedrate_percentage = 100;
-                                    //saved_feedrate_percentage = feedrate_percentage;
-                                    planner.flow_percentage[0] = 100;
-                                    planner.e_factor[0]= planner.flow_percentage[0]*0.01;
-                                    if (EXTRUDERS==2) {
-                                        planner.flow_percentage[1] = 100;
-                                        planner.e_factor[1]= planner.flow_percentage[1]*0.01;
-                                    }
-                      card.startFileprint();
-                      #if ENABLED(POWER_LOSS_RECOVERY)
-                        recovery.prepare();
-                      #endif
-                      once_flag = 0;
+              #if ENABLED(SDSUPPORT)
+                if (!gcode_preview_over) {
+                  char *cur_name = strrchr(list_file.file_name[sel_id], '/');
+
+                  card.endFilePrint();
+
+                  SdFile file;
+                  SdFile *curDir;
+                  const char * const fname = card.diveToFile(true, curDir, cur_name);
+                  if (!fname) return;
+                  if (file.open(curDir, fname, O_READ)) {
+                    gCfgItems.curFilesize = file.fileSize();
+                    file.close();
+                    update_spi_flash();
+                  }
+                  card.openFileRead(cur_name);
+                  if (card.isFileOpen()) {
+                    //saved_feedrate_percentage = feedrate_percentage;
+                    feedrate_percentage = 100;
+                    planner.flow_percentage[0] = 100;
+                    planner.e_factor[0] = planner.flow_percentage[0] * 0.01f;
+                    #if EXTRUDERS == 2
+                      planner.flow_percentage[1] = 100;
+                      planner.e_factor[1] = planner.flow_percentage[1] * 0.01f;
+                    #endif
+                    card.startFileprint();
+                    TERN_(POWER_LOSS_RECOVERY, recovery.prepare());
+                    once_flag = false;
+                  }
                 }
-                #endif
-
-              }
+              #endif
             }
             else if (uiCfg.print_state == PAUSED) {
               uiCfg.print_state = RESUMING;
               clear_cur_ui();
               start_print_time();
 
-              if (gCfgItems.from_flash_pic==1)
-                flash_preview_begin = 1;
+              if (gCfgItems.from_flash_pic)
+                flash_preview_begin = true;
               else
-                default_preview_flg = 1;
-                                  lv_draw_printing();
+                default_preview_flg = true;
+              lv_draw_printing();
             }
             else if (uiCfg.print_state == REPRINTING) {
               uiCfg.print_state = REPRINTED;
               clear_cur_ui();
               start_print_time();
-              if (gCfgItems.from_flash_pic==1)
-                flash_preview_begin = 1;
+              if (gCfgItems.from_flash_pic)
+                flash_preview_begin = true;
               else
-                default_preview_flg = 1;
+                default_preview_flg = true;
               lv_draw_printing();
             }
           }
@@ -808,13 +740,13 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             clear_cur_ui();
 
             #if ENABLED(SDSUPPORT)
-             card.pauseSDPrint();
-             uiCfg.print_state = PAUSING;
-             #endif
-            if (gCfgItems.from_flash_pic==1)
-              flash_preview_begin = 1;
+              card.pauseSDPrint();
+              uiCfg.print_state = PAUSING;
+            #endif
+            if (gCfgItems.from_flash_pic)
+              flash_preview_begin = true;
             else
-              default_preview_flg = 1;
+              default_preview_flg = true;
             lv_draw_printing();
             send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
           }
@@ -826,9 +758,9 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
             stop_print_time();
 
             clear_cur_ui();
-                              #if ENABLED(SDSUPPORT)
-            uiCfg.print_state = IDLE;
-            card.flag.abort_sd_printing = true;
+            #if ENABLED(SDSUPPORT)
+              uiCfg.print_state = IDLE;
+              card.flag.abort_sd_printing = true;
             #endif
 
             lv_draw_ready_print();
@@ -841,15 +773,10 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           /*report print rate*/
           if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)|| (uiCfg.print_state == REPRINTING)) {
             print_rate = uiCfg.totalSend;
-
-            memset((char *)tempBuf, 0, sizeof(tempBuf));
-
+            ZERO(tempBuf);
             sprintf((char *)tempBuf, "M27 %d\r\n", print_rate);
-
             send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
-
           }
-
           break;
 
         case 28:
@@ -857,112 +784,105 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
           if (uiCfg.print_state == IDLE) {
 
             int index = 0;
-            while (tmpStr[index] == ' ')
-              index++;
+            while (tmpStr[index] == ' ') index++;
 
             if (strstr((char *)&tmpStr[index], ".g") || strstr((char *)&tmpStr[index], ".G")) {
               strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
 
               if (gCfgItems.fileSysType == FILE_SYS_SD) {
-                memset(tempBuf, 0, sizeof(tempBuf));
+                ZERO(tempBuf);
                 sprintf((char *)tempBuf, "%s", file_writer.saveFileName);
               }
               else if (gCfgItems.fileSysType == FILE_SYS_USB) {
-                memset(tempBuf, 0, sizeof(tempBuf));
+                ZERO(tempBuf);
                 sprintf((char *)tempBuf, "%s", (char *)file_writer.saveFileName);
               }
               mount_file_sys(gCfgItems.fileSysType);
 
               #if ENABLED(SDSUPPORT)
-              char *cur_name=strrchr(list_file.file_name[sel_id],'/');
-              card.openFileWrite(cur_name);
-              if (card.isFileOpen()) {
-                memset(file_writer.saveFileName, 0, sizeof(file_writer.saveFileName));
-                strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
-                memset(tempBuf, 0, sizeof(tempBuf));
-                sprintf((char *)tempBuf, "Writing to file: %s\r\n", (char *)file_writer.saveFileName);
-                wifi_ret_ack();
-                send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
-
-                total_write = 0;
-                wifi_link_state = WIFI_WAIT_TRANS_START;
-
-              }
-              else{
-                wifi_link_state = WIFI_CONNECTED;
-                clear_cur_ui();
-                lv_draw_dialog(DIALOG_TRANSFER_NO_DEVICE);
-              }
+                char *cur_name = strrchr(list_file.file_name[sel_id], '/');
+                card.openFileWrite(cur_name);
+                if (card.isFileOpen()) {
+                  ZERO(file_writer.saveFileName);
+                  strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
+                  ZERO(tempBuf);
+                  sprintf((char *)tempBuf, "Writing to file: %s\r\n", (char *)file_writer.saveFileName);
+                  wifi_ret_ack();
+                  send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
+                  total_write = 0;
+                  wifi_link_state = WIFI_WAIT_TRANS_START;
+                }
+                else {
+                  wifi_link_state = WIFI_CONNECTED;
+                  clear_cur_ui();
+                  lv_draw_dialog(DIALOG_TRANSFER_NO_DEVICE);
+                }
               #endif
-
             }
-
           }
           break;
         case 105:
         case 991:
-          memset(tempBuf, 0, sizeof(tempBuf));
+          ZERO(tempBuf);
           if (cmd_value == 105) {
             send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
             sprintf((char *)tempBuf,"T:%.1f /%.1f B:%.1f /%.1f T0:%.1f /%.1f T1:%.1f /%.1f @:0 B@:0\r\n",
 
-            (float)thermalManager.temp_hotend[0].celsius,(float)thermalManager.temp_hotend[0].target,
+            (float)thermalManager.temp_hotend[0].celsius, (float)thermalManager.temp_hotend[0].target,
             #if HAS_HEATED_BED
-              (float)thermalManager.temp_bed.celsius,(float)thermalManager.temp_bed.target,
+              (float)thermalManager.temp_bed.celsius, (float)thermalManager.temp_bed.target,
             #else
-              (float)0,(float)0,
+              0.0f, 0.0f,
             #endif
-            (float)thermalManager.temp_hotend[0].celsius,(float)thermalManager.temp_hotend[0].target,
+            (float)thermalManager.temp_hotend[0].celsius, (float)thermalManager.temp_hotend[0].target,
             #if !defined(SINGLENOZZLE) && HAS_MULTI_EXTRUDER
-              (float)thermalManager.temp_hotend[1].celsius,(float)thermalManager.temp_hotend[1].target
+              (float)thermalManager.temp_hotend[1].celsius, (float)thermalManager.temp_hotend[1].target
             #else
-              (float)0,(float)0
+              0.0f, 0.0f
             #endif
             );
           }
           else {
             sprintf((char *)tempBuf,"T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n",
 
-            (int)thermalManager.temp_hotend[0].celsius,(int)thermalManager.temp_hotend[0].target,
+            (int)thermalManager.temp_hotend[0].celsius, (int)thermalManager.temp_hotend[0].target,
             #if HAS_HEATED_BED
-              (int)thermalManager.temp_bed.celsius,(int)thermalManager.temp_bed.target,
-            #else
-              0,0,
-            #endif
-            (int)thermalManager.temp_hotend[0].celsius,(int)thermalManager.temp_hotend[0].target,
-            #if !defined(SINGLENOZZLE) && HAS_MULTI_EXTRUDER
-              (int)thermalManager.temp_hotend[1].celsius,(int)thermalManager.temp_hotend[1].target
+              (int)thermalManager.temp_bed.celsius, (int)thermalManager.temp_bed.target,
             #else
-              0,0
+              0, 0,
             #endif
+            (int)thermalManager.temp_hotend[0].celsius, (int)thermalManager.temp_hotend[0].target,
+              #if !defined(SINGLENOZZLE) && HAS_MULTI_EXTRUDER
+                (int)thermalManager.temp_hotend[1].celsius, (int)thermalManager.temp_hotend[1].target
+              #else
+                0, 0
+              #endif
             );
           }
 
           send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
-
           queue.enqueue_one_P(PSTR("M105"));
-
           break;
+
         case 992:
           if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)) {
-            memset(tempBuf,0,sizeof(tempBuf));
+            ZERO(tempBuf);
             sprintf((char *)tempBuf, "M992 %d%d:%d%d:%d%d\r\n", print_time.hours/10, print_time.hours%10, print_time.minutes/10, print_time.minutes%10, print_time.seconds/10, print_time.seconds%10);
             wifi_ret_ack();
             send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
           }
-
           break;
+
         case 994:
           if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)) {
-            memset(tempBuf,0,sizeof(tempBuf));
-            if (strlen((char *)list_file.file_name[sel_id]) > (100-1)) {
-              return;
-            }
+            ZERO(tempBuf);
+            if (strlen((char *)list_file.file_name[sel_id]) > (100 - 1)) return;
             sprintf((char *)tempBuf, "M994 %s;%d\n", list_file.file_name[sel_id],(int)gCfgItems.curFilesize);
             wifi_ret_ack();
             send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
           }
           break;
+
         case 997:
           if (uiCfg.print_state == IDLE) {
             wifi_ret_ack();
@@ -985,18 +905,17 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
 
         case 998:
           if (uiCfg.print_state == IDLE) {
-            if (atoi((char *)tmpStr) == 0) {
+            int v = atoi((char *)tmpStr);
+            if (v == 0)
               set_cur_file_sys(0);
-            }
-            else if (atoi((char *)tmpStr) == 1) {
+            else if (v == 1)
               set_cur_file_sys(1);
-            }
             wifi_ret_ack();
           }
           break;
 
         case 115:
-          memset(tempBuf,0,sizeof(tempBuf));
+          ZERO(tempBuf);
           send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
           send_to_wifi((char *)"FIRMWARE_NAME:Robin_nano\r\n", strlen("FIRMWARE_NAME:Robin_nano\r\n"));
           break;
@@ -1004,55 +923,50 @@ static void wifi_gcode_exec(uint8_t *cmd_line) {
         default:
           strcat((char *)cmd_line, "\n");
 
-              uint32_t left;
-
-              if (espGcodeFifo.wait_tick> 5) {
-
-                if (espGcodeFifo.r >  espGcodeFifo.w)
-                  left =  espGcodeFifo.r - espGcodeFifo.w - 1;
-                else
-                  left = WIFI_GCODE_BUFFER_SIZE + espGcodeFifo.r - espGcodeFifo.w - 1;
-                if (left >= strlen((const char *)cmd_line)) {
-                  uint32_t index = 0;
-                  while (index < strlen((const char *)cmd_line)) {
-                    espGcodeFifo.Buffer[espGcodeFifo.w] = cmd_line[index] ;
-                    espGcodeFifo.w =  (espGcodeFifo.w + 1) % WIFI_GCODE_BUFFER_SIZE;
-                    index++;
-                  }
+          if (espGcodeFifo.wait_tick > 5) {
+            uint32_t left;
+            if (espGcodeFifo.r > espGcodeFifo.w)
+              left = espGcodeFifo.r - espGcodeFifo.w - 1;
+            else
+              left = WIFI_GCODE_BUFFER_SIZE + espGcodeFifo.r - espGcodeFifo.w - 1;
+
+            if (left >= strlen((const char *)cmd_line)) {
+              uint32_t index = 0;
+              while (index < strlen((const char *)cmd_line)) {
+                espGcodeFifo.Buffer[espGcodeFifo.w] = cmd_line[index] ;
+                espGcodeFifo.w = (espGcodeFifo.w + 1) % WIFI_GCODE_BUFFER_SIZE;
+                index++;
+              }
               if (left - WIFI_GCODE_BUFFER_LEAST_SIZE >= strlen((const char *)cmd_line))
                 send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
               else
                 need_ok_later = true;
-
-                }
-
-              }
+            }
+          }
           break;
-
       }
     }
-    else{
+    else {
       strcat((char *)cmd_line, "\n");
-      uint32_t left_g;
 
-        if (espGcodeFifo.wait_tick > 5) {
-
-        if (espGcodeFifo.r >  espGcodeFifo.w)
-          left_g =  espGcodeFifo.r - espGcodeFifo.w - 1;
+      if (espGcodeFifo.wait_tick > 5) {
+        uint32_t left_g;
+        if (espGcodeFifo.r > espGcodeFifo.w)
+          left_g = espGcodeFifo.r - espGcodeFifo.w - 1;
         else
           left_g = WIFI_GCODE_BUFFER_SIZE + espGcodeFifo.r - espGcodeFifo.w - 1;
+
         if (left_g >= strlen((const char *)cmd_line)) {
           uint32_t index = 0;
           while (index < strlen((const char *)cmd_line)) {
             espGcodeFifo.Buffer[espGcodeFifo.w] = cmd_line[index] ;
-            espGcodeFifo.w =  (espGcodeFifo.w + 1) % WIFI_GCODE_BUFFER_SIZE;
+            espGcodeFifo.w = (espGcodeFifo.w + 1) % WIFI_GCODE_BUFFER_SIZE;
             index++;
           }
-        if (left_g - WIFI_GCODE_BUFFER_LEAST_SIZE >= strlen((const char *)cmd_line))
-          send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
-        else
-          need_ok_later = true;
-
+          if (left_g - WIFI_GCODE_BUFFER_LEAST_SIZE >= strlen((const char *)cmd_line))
+            send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+          else
+            need_ok_later = true;
         }
       }
     }
@@ -1066,12 +980,7 @@ static int32_t charAtArray(const uint8_t *_array, uint32_t _arrayLen, uint8_t _c
 }
 
 void get_wifi_list_command_send() {
-  char buf[6] = {0};
-  buf[0] = 0xA5;
-  buf[1] = 0x07;
-  buf[2] = 0x00;
-  buf[3] = 0x00;
-  buf[4] = 0xFC;
+  char buf[] = { 0xA5, 0x07, 0x00, 0x00, 0xFC };
   raw_send_to_wifi(buf, 5);
 }
 
@@ -1079,60 +988,57 @@ static void net_msg_handle(uint8_t * msg, uint16_t msgLen) {
   int wifiNameLen, wifiKeyLen, hostLen, id_len, ver_len;
 
   if (msgLen <= 0) return;
-  //ip
+
+  // ip
   sprintf(ipPara.ip_addr, "%d.%d.%d.%d", msg[0], msg[1], msg[2], msg[3]);
 
-  //port
-  //connect state
-  if (msg[6] == 0x0A)
-    wifi_link_state = WIFI_CONNECTED;
-  else if (msg[6] == 0x0E)
-    wifi_link_state = WIFI_EXCEPTION;
-  else
-    wifi_link_state = WIFI_NOT_CONFIG;
+  // port
+  // connect state
+  switch (msg[6]) {
+    case 0x0A: wifi_link_state = WIFI_CONNECTED; break;
+    case 0x0E: wifi_link_state = WIFI_EXCEPTION; break;
+    default:   wifi_link_state = WIFI_NOT_CONFIG; break;
+  }
 
-  //mode
+  // mode
   wifiPara.mode = msg[7];
 
-
-  //wifi name
+  // wifi name
   wifiNameLen = msg[8];
   wifiKeyLen = msg[9 + wifiNameLen];
   if (wifiNameLen < 32) {
-    memset(wifiPara.ap_name, 0, sizeof(wifiPara.ap_name));
+    ZERO(wifiPara.ap_name);
     memcpy(wifiPara.ap_name, &msg[9], wifiNameLen);
 
-    memset(&wifi_list.wifiConnectedName,0,sizeof(wifi_list.wifiConnectedName));
-    memcpy(&wifi_list.wifiConnectedName,&msg[9],wifiNameLen);
+    memset(&wifi_list.wifiConnectedName, 0, sizeof(wifi_list.wifiConnectedName));
+    memcpy(&wifi_list.wifiConnectedName, &msg[9], wifiNameLen);
 
-    //wifi key
+    // wifi key
     if (wifiKeyLen < 64) {
-      memset(wifiPara.keyCode, 0, sizeof(wifiPara.keyCode));
+      ZERO(wifiPara.keyCode);
       memcpy(wifiPara.keyCode, &msg[10 + wifiNameLen], wifiKeyLen);
     }
   }
 
-
   cloud_para.state =msg[10 + wifiNameLen + wifiKeyLen];
   hostLen = msg[11 + wifiNameLen + wifiKeyLen];
   if (cloud_para.state) {
     if (hostLen < 96) {
-      memset(cloud_para.hostUrl, 0, sizeof(cloud_para.hostUrl));
+      ZERO(cloud_para.hostUrl);
       memcpy(cloud_para.hostUrl, &msg[12 + wifiNameLen + wifiKeyLen], hostLen);
     }
     cloud_para.port = msg[12 + wifiNameLen + wifiKeyLen + hostLen] + (msg[13 + wifiNameLen + wifiKeyLen + hostLen] << 8);
-
   }
 
   // id
   id_len = msg[14 + wifiNameLen + wifiKeyLen + hostLen];
   if (id_len == 20) {
-    memset(cloud_para.id, 0, sizeof(cloud_para.id));
+    ZERO(cloud_para.id);
     memcpy(cloud_para.id, (const char *)&msg[15 + wifiNameLen + wifiKeyLen + hostLen], id_len);
   }
   ver_len = msg[15 + wifiNameLen + wifiKeyLen + hostLen + id_len];
   if (ver_len < 20) {
-    memset(wifi_firm_ver, 0, sizeof(wifi_firm_ver));
+    ZERO(wifi_firm_ver);
     memcpy(wifi_firm_ver, (const char *)&msg[16 + wifiNameLen + wifiKeyLen + hostLen + id_len], ver_len);
   }
 
@@ -1155,35 +1061,29 @@ static void net_msg_handle(uint8_t * msg, uint16_t msgLen) {
 }
 
 static void wifi_list_msg_handle(uint8_t * msg, uint16_t msgLen) {
-  int wifiNameLen,wifiMsgIdex=1;
-  int8_t wifi_name_is_same=0;
-  int8_t i,j;
-  int8_t wifi_name_num=0;
-  uint8_t *str=0;
+  int wifiNameLen,wifiMsgIdex = 1;
+  int8_t wifi_name_is_same = 0;
+  int8_t i, j;
+  int8_t wifi_name_num = 0;
+  uint8_t *str = 0;
   int8_t valid_name_num;
 
-  if (msgLen <= 0)
-    return;
-  if (disp_state == KEY_BOARD_UI)
-    return;
+  if (msgLen <= 0) return;
+  if (disp_state == KEY_BOARD_UI) return;
 
   wifi_list.getNameNum = msg[0];
 
   if (wifi_list.getNameNum < 20) {
     uiCfg.command_send = 1;
-
-    memset(wifi_list.wifiName,0,sizeof(wifi_list.wifiName));
-
+    ZERO(wifi_list.wifiName);
     wifi_name_num = wifi_list.getNameNum;
-
-    valid_name_num=0;
-    str = wifi_list.wifiName[valid_name_num];
+    valid_name_num = 0;
+    str = wifi_list.wifiName[0];
 
     if (wifi_list.getNameNum > 0) wifi_list.currentWifipage = 1;
 
-    for (i = 0; i <wifi_list.getNameNum; i++) {
-      wifiNameLen = msg[wifiMsgIdex];
-      wifiMsgIdex  +=  1;
+    for (i = 0; i < wifi_list.getNameNum; i++) {
+      wifiNameLen = msg[wifiMsgIdex++];
       if (wifiNameLen < 32) {
         memset(str, 0, WIFI_NAME_BUFFER_SIZE);
         memcpy(str, &msg[wifiMsgIdex], wifiNameLen);
@@ -1194,8 +1094,7 @@ static void wifi_list_msg_handle(uint8_t * msg, uint16_t msgLen) {
           }
         }
         if (wifi_name_is_same != 1) {
-          //for(j=0;j<wifiNameLen;j++)
-          //{
+          //for (j=0;j<wifiNameLen;j++) {
             if (str[0] > 0x80) {
               wifi_name_is_same = 1;
               //break;
@@ -1211,65 +1110,50 @@ static void wifi_list_msg_handle(uint8_t * msg, uint16_t msgLen) {
           //i--;
           continue;
         }
-        if (i < WIFI_TOTAL_NUMBER-1) {
+        if (i < WIFI_TOTAL_NUMBER - 1)
           str = wifi_list.wifiName[++valid_name_num];
-        }
       }
-      wifiMsgIdex  +=  wifiNameLen;
-      wifi_list.RSSI[i] = msg[wifiMsgIdex];
-      wifiMsgIdex  +=  1;
+      wifiMsgIdex += wifiNameLen;
+      wifi_list.RSSI[i] = msg[wifiMsgIdex++];
     }
     wifi_list.getNameNum = wifi_name_num;
-    if (wifi_list.getNameNum % NUMBER_OF_PAGE == 0) {
-      wifi_list.getPage = wifi_list.getNameNum/NUMBER_OF_PAGE;
-    }
-    else {
-      wifi_list.getPage = wifi_list.getNameNum/NUMBER_OF_PAGE + 1;
-    }
+    wifi_list.getPage = wifi_list.getNameNum / NUMBER_OF_PAGE + ((wifi_list.getNameNum % NUMBER_OF_PAGE) != 0);
     wifi_list.nameIndex = 0;
-    if (disp_state == WIFI_LIST_UI)
-    disp_wifi_list();
+
+    if (disp_state == WIFI_LIST_UI) disp_wifi_list();
   }
 }
 
 static void gcode_msg_handle(uint8_t * msg, uint16_t msgLen) {
-  uint8_t gcodeBuf[100] = {0};
-  char *index_s;
-  char *index_e;
+  uint8_t gcodeBuf[100] = { 0 };
+  char *index_s, *index_e;
 
-  if (msgLen <= 0)
-    return;
+  if (msgLen <= 0) return;
 
   index_s = (char *)msg;
-  index_e = (char *)strstr((char *)msg, "\n");
+  index_e = (char *)strchr((char *)msg, '\n');
   if (*msg == 'N') {
-    index_s = (char *)strstr((char *)msg, " ");
-    while ((*index_s) == ' ') {
-      index_s++;
-    }
+    index_s = (char *)strchr((char *)msg, ' ');
+    while (*index_s == ' ') index_s++;
   }
   while ((index_e != 0) && ((int)index_s < (int)index_e)) {
     if ((int)(index_e - index_s) < (int)sizeof(gcodeBuf)) {
-      memset(gcodeBuf, 0, sizeof(gcodeBuf));
-
+      ZERO(gcodeBuf);
       memcpy(gcodeBuf, index_s, index_e - index_s + 1);
-
       wifi_gcode_exec(gcodeBuf);
     }
-    while ((*index_e == '\r') || (*index_e == '\n'))
-      index_e++;
-
+    while ((*index_e == '\r') || (*index_e == '\n')) index_e++;
     index_s = index_e;
-    index_e = (char *)strstr(index_s, "\n");
+    index_e = (char *)strchr(index_s, '\n');
   }
 }
 
 void utf8_2_unicode(uint8_t *source,uint8_t Len) {
-  uint8_t  i=0,char_i=0,char_byte_num=0;
-  uint16_t  u16_h,u16_m,u16_l,u16_value;
+  uint8_t i = 0, char_i = 0, char_byte_num = 0;
+  uint16_t u16_h, u16_m, u16_l, u16_value;
   uint8_t FileName_unicode[30];
 
-  memset(FileName_unicode, 0, sizeof(FileName_unicode));
+  ZERO(FileName_unicode);
 
   while (1) {
     char_byte_num = source[i] & 0xF0;
@@ -1282,8 +1166,8 @@ void utf8_2_unicode(uint8_t *source,uint8_t Len) {
     else if (char_byte_num == 0XC0 || char_byte_num == 0XD0) {
       //--2byte
 
-      u16_h = (((uint16_t)source[i] <<8) & 0x1F00) >> 2;
-      u16_l = ((uint16_t)source[i+1] & 0x003F);
+      u16_h = (((uint16_t)source[i] << 8) & 0x1F00) >> 2;
+      u16_l = ((uint16_t)source[i + 1] & 0x003F);
       u16_value = (u16_h | u16_l);
       FileName_unicode[char_i] = (uint8_t)((u16_value & 0xFF00) >> 8);
       FileName_unicode[char_i + 1] = (uint8_t)(u16_value & 0x00FF);
@@ -1292,9 +1176,9 @@ void utf8_2_unicode(uint8_t *source,uint8_t Len) {
     }
     else if (char_byte_num == 0XE0) {
       //--3byte
-      u16_h = (((uint16_t)source[i] <<8 ) & 0x0F00) << 4;
-      u16_m = (((uint16_t)source[i+1] << 8) & 0x3F00) >> 2;
-      u16_l = ((uint16_t)source[i+2] & 0x003F);
+      u16_h = (((uint16_t)source[i] << 8) & 0x0F00) << 4;
+      u16_m = (((uint16_t)source[i + 1] << 8) & 0x3F00) >> 2;
+      u16_l = ((uint16_t)source[i + 2] & 0x003F);
       u16_value = (u16_h | u16_m | u16_l);
       FileName_unicode[char_i] = (uint8_t)((u16_value & 0xFF00) >> 8);
       FileName_unicode[char_i + 1] = (uint8_t)(u16_value & 0x00FF);
@@ -1309,9 +1193,9 @@ void utf8_2_unicode(uint8_t *source,uint8_t Len) {
     else {
       break;
     }
-    if (i >= Len || i >= 255)break;
+    if (i >= Len || i >= 255) break;
   }
-  memcpy(source, FileName_unicode, sizeof(FileName_unicode));
+  COPY(source, FileName_unicode);
 }
 
 char saveFilePath[50];
@@ -1343,18 +1227,18 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
   if (msgLen != fileNameLen + 5) return;
 
   file_writer.fileLen = *((uint32_t *)(msg + 1));
-  memset(file_writer.saveFileName, 0, sizeof(file_writer.saveFileName));
+  ZERO(file_writer.saveFileName);
 
   memcpy(file_writer.saveFileName, msg + 5, fileNameLen);
 
   utf8_2_unicode(file_writer.saveFileName,fileNameLen);
 
-  memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
+  ZERO(file_writer.write_buf);
 
   if (strlen((const char *)file_writer.saveFileName) > sizeof(saveFilePath))
     return;
 
-  memset(saveFilePath, 0, sizeof(saveFilePath));
+  ZERO(saveFilePath);
 
   if (gCfgItems.fileSysType == FILE_SYS_SD) {
     //sprintf((char *)saveFilePath, "/%s", file_writer.saveFileName);
@@ -1392,7 +1276,7 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
     sprintf((char *)saveFilePath, "/%s", dosName);
 
     ZERO(list_file.long_name[sel_id]);
-    memcpy(list_file.long_name[sel_id],dosName,sizeof(dosName));
+    memcpy(list_file.long_name[sel_id], dosName, sizeof(dosName));
 
     char *cur_name=strrchr((const char *)saveFilePath,'/');
 
@@ -1412,7 +1296,8 @@ static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
       lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
       return;
     }
-  #endif
+
+  #endif // SDSUPPORT
 
   wifi_link_state = WIFI_TRANS_FILE;
 
@@ -1432,14 +1317,14 @@ static void file_fragment_msg_handle(uint8_t * msg, uint16_t msgLen) {
   uint32_t frag = *((uint32_t *)msg);
 
   if ((frag & FRAG_MASK) != (uint32_t)(lastFragment + 1)) {
-    memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
+    ZERO(file_writer.write_buf);
     file_writer.write_index = 0;
     wifi_link_state = WIFI_CONNECTED;
     upload_result = 2;
   }
   else {
     if (write_to_file((char *)msg + 4, msgLen - 4) < 0) {
-      memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
+      ZERO(file_writer.write_buf);
       file_writer.write_index = 0;
       wifi_link_state = WIFI_CONNECTED;
       upload_result = 2;
@@ -1450,13 +1335,13 @@ static void file_fragment_msg_handle(uint8_t * msg, uint16_t msgLen) {
     if ((frag & (~FRAG_MASK))) {
       int res = card.write(file_writer.write_buf, file_writer.write_index);
       if (res == -1) {
-        memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
+        ZERO(file_writer.write_buf);
         file_writer.write_index = 0;
         wifi_link_state = WIFI_CONNECTED;
         upload_result = 2;
         return;
       }
-      memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
+      ZERO(file_writer.write_buf);
       file_writer.write_index = 0;
       file_writer.tick_end = getWifiTick();
       upload_time = getWifiTickDiff(file_writer.tick_begin, file_writer.tick_end) / 1000;
@@ -1493,7 +1378,7 @@ void esp_data_parser(char *cmdRxBuf, int len) {
 
       if (tail_pos == -1) {
         if (esp_msg_index >= sizeof(esp_msg_buf)) {
-          memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+          ZERO(esp_msg_buf);
           esp_msg_index = 0;
         }
         return;
@@ -1503,7 +1388,7 @@ void esp_data_parser(char *cmdRxBuf, int len) {
       head_pos = charAtArray((uint8_t const *)&cmdRxBuf[len - leftLen], leftLen, ESP_PROTOC_HEAD);
       if (head_pos == -1) return;
 
-      memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+      ZERO(esp_msg_buf);
       memcpy(esp_msg_buf, &cmdRxBuf[len - leftLen + head_pos], leftLen - head_pos);
 
       esp_msg_index = leftLen - head_pos;
@@ -1513,7 +1398,7 @@ void esp_data_parser(char *cmdRxBuf, int len) {
       tail_pos = charAtArray(esp_msg_buf, esp_msg_index, ESP_PROTOC_TAIL);
       if (tail_pos == -1) {
         if (esp_msg_index >= sizeof(esp_msg_buf)) {
-          memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+          ZERO(esp_msg_buf);
           esp_msg_index = 0;
         }
         return;
@@ -1521,10 +1406,13 @@ void esp_data_parser(char *cmdRxBuf, int len) {
     }
 
     esp_frame.type = esp_msg_buf[1];
-    if ((esp_frame.type != ESP_TYPE_NET) && (esp_frame.type != ESP_TYPE_GCODE)
-       && (esp_frame.type != ESP_TYPE_FILE_FIRST) && (esp_frame.type != ESP_TYPE_FILE_FRAGMENT)
-       &&(esp_frame.type != ESP_TYPE_WIFI_LIST)) {
-      memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+    if (  esp_frame.type != ESP_TYPE_NET
+       && esp_frame.type != ESP_TYPE_GCODE
+       && esp_frame.type != ESP_TYPE_FILE_FIRST
+       && esp_frame.type != ESP_TYPE_FILE_FRAGMENT
+       && esp_frame.type != ESP_TYPE_WIFI_LIST
+    ) {
+      ZERO(esp_msg_buf);
       esp_msg_index = 0;
       return;
     }
@@ -1532,14 +1420,14 @@ void esp_data_parser(char *cmdRxBuf, int len) {
     esp_frame.dataLen = esp_msg_buf[2] + (esp_msg_buf[3] << 8);
 
     if ((int)(4 + esp_frame.dataLen) > (int)(sizeof(esp_msg_buf))) {
-      memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+      ZERO(esp_msg_buf);
       esp_msg_index = 0;
       return;
     }
 
     if (esp_msg_buf[4 + esp_frame.dataLen] != ESP_PROTOC_TAIL) {
       if (esp_msg_index >= sizeof(esp_msg_buf)) {
-        memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+        ZERO(esp_msg_buf);
         esp_msg_index = 0;
       }
       return;
@@ -1568,7 +1456,7 @@ void esp_data_parser(char *cmdRxBuf, int len) {
     esp_msg_index = cut_msg_head(esp_msg_buf, esp_msg_index, esp_frame.dataLen  + 5);
     if (esp_msg_index > 0) {
       if (charAtArray(esp_msg_buf, esp_msg_index,  ESP_PROTOC_HEAD) == -1) {
-        memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+        ZERO(esp_msg_buf);
         esp_msg_index = 0;
         return;
       }
@@ -1626,7 +1514,7 @@ void stopEspTransfer() {
 
 void wifi_rcv_handle() {
   int32_t len = 0;
-  uint8_t ucStr[(UART_RX_BUFFER_SIZE) + 1] = {0};
+  uint8_t ucStr[(UART_RX_BUFFER_SIZE) + 1] = { 0 };
   int8_t getDataF = 0;
 
   if (wifi_link_state == WIFI_TRANS_FILE) {
@@ -1717,7 +1605,7 @@ void wifi_rcv_handle() {
 }
 
 void wifi_looping() {
-   do { wifi_rcv_handle(); } while (wifi_link_state == WIFI_TRANS_FILE);
+  do { wifi_rcv_handle(); } while (wifi_link_state == WIFI_TRANS_FILE);
 }
 
 void mks_esp_wifi_init() {

commit eaf6777a6643a6fab23ceaaa4699cb2466ea6b83
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 16 19:36:25 2020 -0500

    Rename ultralcd => marlinui

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index f5d954792e..e4fb4ece03 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -33,7 +33,7 @@
 #include "../../../../module/temperature.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../gcode/gcode.h"
-#include "../../../../lcd/ultralcd.h"
+#include "../../../../lcd/marlinui.h"
 #include "../../../../sd/cardreader.h"
 #include "../../../../module/planner.h"
 #if ENABLED(POWER_LOSS_RECOVERY)

commit 6831341ab483a49d7daad4c704bb684d3cbbf075
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Oct 9 16:50:17 2020 -0500

    Batch appercase hex values

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
index 5c025f13f9..f5d954792e 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -125,7 +125,7 @@ uint32_t  getWifiTickDiff(int32_t lastTick, int32_t  curTick) {
     return (curTick - lastTick) * TICK_CYCLE;
   }
   else {
-    return (0xffffffff - lastTick + curTick) * TICK_CYCLE;
+    return (0xFFFFFFFF - lastTick + curTick) * TICK_CYCLE;
   }
 }
 
@@ -334,8 +334,8 @@ void wifi_ret_ack() {}
 char buf_to_wifi[256];
 int index_to_wifi = 0;
 int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
-  char wifi_ret_head = 0xa5;
-  char wifi_ret_tail = 0xfc;
+  char wifi_ret_head = 0xA5;
+  char wifi_ret_tail = 0xFC;
 
   if (type == WIFI_PARA_SET) {
     int data_offset = 4;
@@ -356,8 +356,8 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
 
     buf_to_wifi[0] = wifi_ret_head;
     buf_to_wifi[1] = type;
-    buf_to_wifi[2] = index_to_wifi & 0xff;
-    buf_to_wifi[3] = (index_to_wifi >> 8) & 0xff;
+    buf_to_wifi[2] = index_to_wifi & 0xFF;
+    buf_to_wifi[3] = (index_to_wifi >> 8) & 0xFF;
 
     raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
 
@@ -392,8 +392,8 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
 
         buf_to_wifi[0] = wifi_ret_head;
         buf_to_wifi[1] = type;
-        buf_to_wifi[2] = index_to_wifi & 0xff;
-        buf_to_wifi[3] = (index_to_wifi >> 8) & 0xff;
+        buf_to_wifi[2] = index_to_wifi & 0xFF;
+        buf_to_wifi[3] = (index_to_wifi >> 8) & 0xFF;
         buf_to_wifi[4 + index_to_wifi] = wifi_ret_tail;
 
         raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
@@ -426,22 +426,22 @@ int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
     index_to_wifi = 0;
 
     if (gCfgItems.cloud_enable == true)
-      buf_to_wifi[data_offset] = 0x0a;
+      buf_to_wifi[data_offset] = 0x0A;
     else
       buf_to_wifi[data_offset] = 0x05;
 
     buf_to_wifi[data_offset + 1]  = urlLen;
     strncpy(&buf_to_wifi[data_offset + 2], (const char *)uiCfg.cloud_hostUrl, urlLen);
-    buf_to_wifi[data_offset + urlLen + 2]  = uiCfg.cloud_port & 0xff;
-    buf_to_wifi[data_offset + urlLen + 3]  = (uiCfg.cloud_port >> 8) & 0xff;
+    buf_to_wifi[data_offset + urlLen + 2]  = uiCfg.cloud_port & 0xFF;
+    buf_to_wifi[data_offset + urlLen + 3]  = (uiCfg.cloud_port >> 8) & 0xFF;
     buf_to_wifi[data_offset + urlLen + 4] = wifi_ret_tail;
 
     index_to_wifi = urlLen + 4;
 
     buf_to_wifi[0] = wifi_ret_head;
     buf_to_wifi[1] = type;
-    buf_to_wifi[2] = index_to_wifi & 0xff;
-    buf_to_wifi[3] = (index_to_wifi >> 8) & 0xff;
+    buf_to_wifi[2] = index_to_wifi & 0xFF;
+    buf_to_wifi[3] = (index_to_wifi >> 8) & 0xFF;
 
     raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
 
@@ -526,8 +526,8 @@ int write_to_file(char *buf, int len) {
   return 0;
 }
 
-#define ESP_PROTOC_HEAD (uint8_t)0xa5
-#define ESP_PROTOC_TAIL   (uint8_t)0xfc
+#define ESP_PROTOC_HEAD (uint8_t)0xA5
+#define ESP_PROTOC_TAIL   (uint8_t)0xFC
 
 #define ESP_TYPE_NET        (uint8_t)0x0
 #define ESP_TYPE_GCODE        (uint8_t)0x1
@@ -1282,22 +1282,22 @@ void utf8_2_unicode(uint8_t *source,uint8_t Len) {
     else if (char_byte_num == 0XC0 || char_byte_num == 0XD0) {
       //--2byte
 
-      u16_h = (((uint16_t)source[i] <<8) & 0x1f00) >> 2;
-      u16_l = ((uint16_t)source[i+1] & 0x003f);
+      u16_h = (((uint16_t)source[i] <<8) & 0x1F00) >> 2;
+      u16_l = ((uint16_t)source[i+1] & 0x003F);
       u16_value = (u16_h | u16_l);
-      FileName_unicode[char_i] = (uint8_t)((u16_value & 0xff00) >> 8);
-      FileName_unicode[char_i + 1] = (uint8_t)(u16_value & 0x00ff);
+      FileName_unicode[char_i] = (uint8_t)((u16_value & 0xFF00) >> 8);
+      FileName_unicode[char_i + 1] = (uint8_t)(u16_value & 0x00FF);
       i += 2;
       char_i += 2;
     }
     else if (char_byte_num == 0XE0) {
       //--3byte
-      u16_h = (((uint16_t)source[i] <<8 ) & 0x0f00) << 4;
-      u16_m = (((uint16_t)source[i+1] << 8) & 0x3f00) >> 2;
-      u16_l = ((uint16_t)source[i+2] & 0x003f);
+      u16_h = (((uint16_t)source[i] <<8 ) & 0x0F00) << 4;
+      u16_m = (((uint16_t)source[i+1] << 8) & 0x3F00) >> 2;
+      u16_l = ((uint16_t)source[i+2] & 0x003F);
       u16_value = (u16_h | u16_m | u16_l);
-      FileName_unicode[char_i] = (uint8_t)((u16_value & 0xff00) >> 8);
-      FileName_unicode[char_i + 1] = (uint8_t)(u16_value & 0x00ff);
+      FileName_unicode[char_i] = (uint8_t)((u16_value & 0xFF00) >> 8);
+      FileName_unicode[char_i + 1] = (uint8_t)(u16_value & 0x00FF);
       i += 3;
       char_i += 2;
     }

commit d8ed74904559aa8bdccc8b68acbccfbf1bf779d3
Author: makerbase <4164049@qq.com>
Date:   Mon Sep 21 09:55:02 2020 +0800

    Add MKS Robin E3P, improve LVGL UI (#19442)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
new file mode 100644
index 0000000000..5c025f13f9
--- /dev/null
+++ b/Marlin/src/lcd/extui/lib/mks_ui/wifi_module.cpp
@@ -0,0 +1,1927 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../../inc/MarlinConfigPre.h"
+
+#if HAS_TFT_LVGL_UI
+
+#include "draw_ui.h"
+#include "wifi_module.h"
+#include "wifi_upload.h"
+
+#if ENABLED(USE_WIFI_FUNCTION)
+
+#include "../../../../MarlinCore.h"
+#include "../../../../module/temperature.h"
+#include "../../../../gcode/queue.h"
+#include "../../../../gcode/gcode.h"
+#include "../../../../lcd/ultralcd.h"
+#include "../../../../sd/cardreader.h"
+#include "../../../../module/planner.h"
+#if ENABLED(POWER_LOSS_RECOVERY)
+  #include "../../../../feature/powerloss.h"
+#endif
+#if ENABLED(PARK_HEAD_ON_PAUSE)
+  #include "../../../../feature/pause.h"
+#endif
+
+#define WIFI_SET()        WRITE(WIFI_RESET_PIN, HIGH);
+#define WIFI_RESET()      WRITE(WIFI_RESET_PIN, LOW);
+#define WIFI_IO1_SET()      WRITE(WIFI_IO1_PIN, HIGH);
+#define WIFI_IO1_RESET()    WRITE(WIFI_IO1_PIN, LOW);
+
+extern uint8_t Explore_Disk (char* path , uint8_t recu_level);
+
+extern uint8_t commands_in_queue;
+extern uint8_t sel_id;
+
+int usartFifoAvailable(SZ_USART_FIFO *fifo);
+int readUsartFifo(SZ_USART_FIFO *fifo, int8_t *buf, int32_t len);
+int writeUsartFifo(SZ_USART_FIFO * fifo, int8_t * buf, int32_t len);
+extern unsigned int  getTickDiff(unsigned int curTick, unsigned int  lastTick);
+
+volatile SZ_USART_FIFO  WifiRxFifo;
+
+#define WAIT_ESP_TRANS_TIMEOUT_TICK 10500
+
+int cfg_cloud_flag = 0;
+
+extern PRINT_TIME print_time;
+
+char wifi_firm_ver[20] = {0};
+WIFI_GCODE_BUFFER espGcodeFifo;
+extern uint8_t pause_resum;
+
+uint8_t wifi_connect_flg = 0;
+extern volatile uint8_t get_temp_flag;
+
+
+#define WIFI_MODE 2
+#define WIFI_AP_MODE  3
+
+int upload_result = 0;
+
+uint32_t upload_time = 0;
+uint32_t upload_size = 0;
+
+volatile WIFI_STATE wifi_link_state;
+WIFI_PARA wifiPara;
+IP_PARA ipPara;
+CLOUD_PARA cloud_para;
+
+char wifi_check_time = 0;
+
+extern uint8_t gCurDir[100];
+
+extern uint32_t wifi_loop_cycle;
+
+volatile TRANSFER_STATE esp_state;
+
+uint8_t left_to_send = 0;
+uint8_t left_to_save[96] = {0};
+
+volatile WIFI_DMA_RCV_FIFO wifiDmaRcvFifo;
+
+volatile WIFI_TRANS_ERROR wifiTransError;
+
+static bool need_ok_later = false;
+
+extern volatile WIFI_STATE wifi_link_state;
+extern WIFI_PARA wifiPara;
+extern IP_PARA ipPara;
+extern CLOUD_PARA cloud_para;
+
+extern uint8_t once_flag;
+extern uint8_t flash_preview_begin;
+extern uint8_t default_preview_flg;
+extern uint8_t gcode_preview_over;
+
+extern uint8_t bmp_public_buf[17 * 1024];
+
+uint32_t   getWifiTick() {
+  return millis();
+}
+
+uint32_t  getWifiTickDiff(int32_t lastTick, int32_t  curTick) {
+  if (lastTick <= curTick) {
+    return (curTick - lastTick) * TICK_CYCLE;
+  }
+  else {
+    return (0xffffffff - lastTick + curTick) * TICK_CYCLE;
+  }
+}
+
+void wifi_delay(int n) {
+  uint32_t begin = getWifiTick();
+  uint32_t end = begin;
+
+  while (getWifiTickDiff(begin, end) < (uint32_t)n) {
+    end = getWifiTick();
+  }
+}
+
+void wifi_reset() {
+  uint32_t start, now;
+  start = getWifiTick();
+  now = start;
+        WIFI_RESET();
+  while (getWifiTickDiff(start, now) < 500) {
+    now = getWifiTick();
+  }
+    WIFI_SET();
+
+}
+
+void mount_file_sys(uint8_t disk_type) {
+  if (disk_type == FILE_SYS_SD) {
+    card.mount();
+  }
+  else if (disk_type == FILE_SYS_USB) {
+
+  }
+}
+
+static void dma_init() {
+  #if 0
+  __HAL_RCC_DMA1_CLK_ENABLE();
+
+  //HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
+  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 4, 0);
+  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
+
+  hdma_usart1_rx.Instance = DMA1_Channel5;
+  //hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
+  hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
+  hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
+  hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
+  hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
+  hdma_usart1_rx.Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
+  hdma_usart1_rx.Init.Mode = DMA_NORMAL;
+  hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
+  if (HAL_DMA_Init((DMA_HandleTypeDef *)&hdma_usart1_rx) != HAL_OK) {
+    Error_Handler();
+  }
+
+
+  HAL_DMA_Start_IT((DMA_HandleTypeDef *)&hdma_usart1_rx,
+      (uint32_t)&huart1.Instance->DR,
+      (uint32_t)(&WifiRxFifo.uartTxBuffer[0]),
+      UART_RX_BUFFER_SIZE);
+
+    //HAL_UART_Receive_DMA(&huart1,(uint8_t*)&WifiRxFifo.uartTxBuffer[0], UART_RX_BUFFER_SIZE);
+
+      /* Enable the DMA transfer for the receiver request by setting the DMAR bit
+       in the UART CR3 register */
+      SET_BIT(huart1.Instance->CR3, USART_CR3_DMAR);
+
+  #endif
+  for (uint8_t i = 0; i < TRANS_RCV_FIFO_BLOCK_NUM; i++) {
+    wifiDmaRcvFifo.bufferAddr[i] = &bmp_public_buf[1024 * i];
+    wifiDmaRcvFifo.state[i] = udisk_buf_empty;
+  }
+
+  memset(wifiDmaRcvFifo.bufferAddr[0], 0, 1024 * TRANS_RCV_FIFO_BLOCK_NUM);
+  wifiDmaRcvFifo.read_cur = 0;
+  wifiDmaRcvFifo.write_cur = 0;
+
+}
+
+static void wifi_deInit() {
+  #if 0
+  HAL_DMA_Abort((DMA_HandleTypeDef *)&hdma_usart1_rx);
+  HAL_DMA_DeInit((DMA_HandleTypeDef *)&hdma_usart1_rx);
+  __HAL_DMA_DISABLE((DMA_HandleTypeDef *)&hdma_usart1_rx);
+  #endif
+}
+
+extern uint8_t mksUsart1Rx;
+
+void esp_port_begin(uint8_t interrupt) {
+  WifiRxFifo.uart_read_point = 0;
+  WifiRxFifo.uart_write_point = 0;
+  #if 0
+  NVIC_InitTypeDef NVIC_InitStructure;
+
+  USART_InitTypeDef USART_InitStructure;
+  GPIO_InitTypeDef GPIO_InitStruct;
+
+  WifiRxFifo.uart_read_point = 0;
+  WifiRxFifo.uart_write_point = 0;
+  memset((uint8_t*)WifiRxFifo.uartTxBuffer, 0, sizeof(WifiRxFifo.uartTxBuffer));
+
+  if (interrupt) {
+  #if TAN
+    wifi_deInit ();
+
+    //SZ_STM32_COMInit(COM1, 115200);
+    __HAL_UART_ENABLE_IT(USART1, USART_IT_RXNE);
+
+    USART_InitStructure.USART_BaudRate = 115200;        //���ڵĲ����ʣ�����115200 ��ߴ�4.5Mbits/s
+    USART_InitStructure.USART_WordLength = USART_WordLength_8b; //�����ֳ���(8λ��9λ)
+    USART_InitStructure.USART_StopBits = USART_StopBits_1;    //�����õ�ֹͣλ-֧��1��2��ֹͣλ
+    USART_InitStructure.USART_Parity = USART_Parity_No;     //����żУ��
+    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; //��Ӳ��������
+    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; //˫��ģʽ��ʹ�ܷ��ͺͽ���
+
+    __HAL_RCC_USART1_CLK_ENABLE();
+
+    GPIO_InitStruct.Pin = TFT_WIFI_TX_Pin|TFT_WIFI_RX_Pin;
+    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
+    GPIO_InitStruct.Pull = GPIO_PULLUP;
+    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
+    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
+    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
+      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
+      GPIO_InitStruct.Pin = TFT_WIFI_RX_Pin;
+      HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
+
+    USART_Init(USART1, &USART_InitStructure);
+
+    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
+  //  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
+  //  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
+    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
+    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
+    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
+
+    NVIC_Init(&NVIC_InitStructure);
+    #else
+    HAL_UART_DeInit(&huart1);
+    MX_USART1_UART_Init(3);
+    //__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
+    HAL_UART_Receive_IT(&huart1,&mksUsart1Rx,1);
+    #endif
+  }
+  else{
+    #if 0
+    NVIC_DisableIRQ(SZ_STM32_COM1_IRQn);
+
+    USART_Cmd(SZ_STM32_COM1, DISABLE);
+
+    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, DISABLE);
+    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
+
+    SZ_STM32_COMInit(COM1, 1958400);
+
+    USART_Cmd(SZ_STM32_COM1, ENABLE);
+
+    wifi_delay(10);
+
+    dma_init();
+    #endif
+    HAL_UART_DeInit(&huart1);
+    MX_USART1_UART_Init(5);
+        //dma1_5_IRQ_sel = 1;
+    dma_init();
+  }
+  #endif
+  if (interrupt) {
+    #if ENABLED(USE_WIFI_FUNCTION)
+      WIFISERIAL.end();
+      for (uint16_t i = 0; i < 65535; i++);
+      WIFISERIAL.begin(WIFI_BAUDRATE);
+      uint32_t serial_connect_timeout = millis() + 1000UL;
+        while (/*!WIFISERIAL && */PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
+      //for(uint8_t i=0;i<100;i++)WIFISERIAL.write(0x33);
+    #endif
+  }
+  else {
+    #if ENABLED(USE_WIFI_FUNCTION)
+      WIFISERIAL.end();
+      for (uint16_t i = 0; i < 65535; i++);
+      WIFISERIAL.begin(WIFI_UPLOAD_BAUDRATE);
+      uint32_t serial_connect_timeout = millis() + 1000UL;
+        while (/*!WIFISERIAL && */PENDING(millis(), serial_connect_timeout)) { /*nada*/ }
+      //for(uint16_t i=0;i<65535;i++);//WIFISERIAL.write(0x33);
+    #endif
+    dma_init();
+  }
+}
+
+#if ENABLED(USE_WIFI_FUNCTION)
+
+int raw_send_to_wifi(char *buf, int len) {
+  if (buf == 0 || len <= 0) return 0;
+
+  for (int i = 0; i < len; i++)
+    WIFISERIAL.write(*(buf + i));
+
+  return len;
+}
+
+#endif // USE_WIFI_FUNCTION
+
+void wifi_ret_ack() {}
+
+char buf_to_wifi[256];
+int index_to_wifi = 0;
+int package_to_wifi(WIFI_RET_TYPE type,char *buf, int len) {
+  char wifi_ret_head = 0xa5;
+  char wifi_ret_tail = 0xfc;
+
+  if (type == WIFI_PARA_SET) {
+    int data_offset = 4;
+    int apLen = strlen((const char *)uiCfg.wifi_name);
+    int keyLen = strlen((const char *)uiCfg.wifi_key);
+
+    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    index_to_wifi = 0;
+
+    buf_to_wifi[data_offset] = gCfgItems.wifi_mode_sel;
+    buf_to_wifi[data_offset + 1]  = apLen;
+    strncpy(&buf_to_wifi[data_offset + 2], (const char *)uiCfg.wifi_name, apLen);
+    buf_to_wifi[data_offset + apLen + 2]  = keyLen;
+    strncpy(&buf_to_wifi[data_offset + apLen + 3], (const char *)uiCfg.wifi_key, keyLen);
+    buf_to_wifi[data_offset + apLen + keyLen + 3] = wifi_ret_tail;
+
+    index_to_wifi = apLen + keyLen + 3;
+
+    buf_to_wifi[0] = wifi_ret_head;
+    buf_to_wifi[1] = type;
+    buf_to_wifi[2] = index_to_wifi & 0xff;
+    buf_to_wifi[3] = (index_to_wifi >> 8) & 0xff;
+
+    raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
+
+    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    index_to_wifi = 0;
+
+  }
+  else if (type == WIFI_TRANS_INF) {
+    if (len > (int)(sizeof(buf_to_wifi) - index_to_wifi - 5)) {
+      memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+      index_to_wifi = 0;
+      return 0;
+    }
+
+     if (len > 0) {
+      memcpy(&buf_to_wifi[4 + index_to_wifi], buf, len);
+      index_to_wifi += len;
+
+      if (index_to_wifi < 1)
+        return 0;
+
+       if (buf_to_wifi[index_to_wifi + 3] == '\n') {
+        //mask "wait" "busy" "X:"
+        if (((buf_to_wifi[4] == 'w') && (buf_to_wifi[5] == 'a') && (buf_to_wifi[6] == 'i')  && (buf_to_wifi[7] == 't') )
+          || ((buf_to_wifi[4] == 'b') && (buf_to_wifi[5] == 'u') && (buf_to_wifi[6] == 's')  && (buf_to_wifi[7] == 'y') )
+          || ((buf_to_wifi[4] == 'X') && (buf_to_wifi[5] == ':') )
+          ) {
+          memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+          index_to_wifi = 0;
+          return 0;
+        }
+
+        buf_to_wifi[0] = wifi_ret_head;
+        buf_to_wifi[1] = type;
+        buf_to_wifi[2] = index_to_wifi & 0xff;
+        buf_to_wifi[3] = (index_to_wifi >> 8) & 0xff;
+        buf_to_wifi[4 + index_to_wifi] = wifi_ret_tail;
+
+        raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
+
+        memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+         index_to_wifi = 0;
+       }
+    }
+  }
+  else if (type == WIFI_EXCEP_INF) {
+    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+
+    buf_to_wifi[0] = wifi_ret_head;
+    buf_to_wifi[1] = type;
+    buf_to_wifi[2] = 1;
+    buf_to_wifi[3] = 0;
+    buf_to_wifi[4] = *buf;
+    buf_to_wifi[5] = wifi_ret_tail;
+
+    raw_send_to_wifi(buf_to_wifi, 6);
+
+    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    index_to_wifi = 0;
+  }
+  else if (type == WIFI_CLOUD_CFG) {
+    int data_offset = 4;
+    int urlLen = strlen((const char *)uiCfg.cloud_hostUrl);
+
+    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    index_to_wifi = 0;
+
+    if (gCfgItems.cloud_enable == true)
+      buf_to_wifi[data_offset] = 0x0a;
+    else
+      buf_to_wifi[data_offset] = 0x05;
+
+    buf_to_wifi[data_offset + 1]  = urlLen;
+    strncpy(&buf_to_wifi[data_offset + 2], (const char *)uiCfg.cloud_hostUrl, urlLen);
+    buf_to_wifi[data_offset + urlLen + 2]  = uiCfg.cloud_port & 0xff;
+    buf_to_wifi[data_offset + urlLen + 3]  = (uiCfg.cloud_port >> 8) & 0xff;
+    buf_to_wifi[data_offset + urlLen + 4] = wifi_ret_tail;
+
+    index_to_wifi = urlLen + 4;
+
+    buf_to_wifi[0] = wifi_ret_head;
+    buf_to_wifi[1] = type;
+    buf_to_wifi[2] = index_to_wifi & 0xff;
+    buf_to_wifi[3] = (index_to_wifi >> 8) & 0xff;
+
+    raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
+
+    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    index_to_wifi = 0;
+  }
+  else if (type == WIFI_CLOUD_UNBIND) {
+    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+
+    buf_to_wifi[0] = wifi_ret_head;
+    buf_to_wifi[1] = type;
+    buf_to_wifi[2] = 0;
+    buf_to_wifi[3] = 0;
+    buf_to_wifi[4] = wifi_ret_tail;
+
+    raw_send_to_wifi(buf_to_wifi, 5);
+
+    memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
+    index_to_wifi = 0;
+  }
+}
+
+
+int send_to_wifi(char *buf, int len) { return package_to_wifi(WIFI_TRANS_INF, buf, len); }
+
+void set_cur_file_sys(int fileType) {
+  gCfgItems.fileSysType = fileType;
+}
+
+void get_file_list(char *path) {
+  if ( path == 0) {
+    return;
+  }
+
+  if (gCfgItems.fileSysType == FILE_SYS_SD) {
+    #if ENABLED(SDSUPPORT)
+    card.mount();
+    #endif
+  }
+  else if (gCfgItems.fileSysType == FILE_SYS_USB) {
+    //udisk
+  }
+  Explore_Disk(path, 0);
+}
+
+char wait_ip_back_flag = 0;
+
+typedef struct {
+  char write_buf[513];
+  int write_index;
+  uint8_t saveFileName[30];
+  uint32_t fileLen;
+  uint32_t tick_begin;
+  uint32_t tick_end;
+} FILE_WRITER;
+
+FILE_WRITER file_writer;
+
+int32_t lastFragment = 0;
+
+char lastBinaryCmd[50] = {0};
+
+int total_write = 0;
+char binary_head[2] = {0, 0};
+unsigned char binary_data_len = 0;
+
+int write_to_file(char *buf, int len) {
+  int i;
+  int res;
+
+  for (i = 0; i < len; i++) {
+    file_writer.write_buf[file_writer.write_index++] = buf[i];
+    if (file_writer.write_index >= 512) {
+      res = card.write(file_writer.write_buf, file_writer.write_index);
+      if (res == -1) {
+        return  -1;
+      }
+      memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
+      file_writer.write_index = 0;
+    }
+  }
+  return 0;
+}
+
+#define ESP_PROTOC_HEAD (uint8_t)0xa5
+#define ESP_PROTOC_TAIL   (uint8_t)0xfc
+
+#define ESP_TYPE_NET        (uint8_t)0x0
+#define ESP_TYPE_GCODE        (uint8_t)0x1
+#define ESP_TYPE_FILE_FIRST     (uint8_t)0x2
+#define ESP_TYPE_FILE_FRAGMENT    (uint8_t)0x3
+
+#define ESP_TYPE_WIFI_LIST    (uint8_t)0x4
+
+uint8_t esp_msg_buf[UART_RX_BUFFER_SIZE] = {0};
+uint16_t esp_msg_index = 0;
+
+typedef struct {
+  uint8_t head;
+  uint8_t type;
+  uint16_t dataLen;
+  uint8_t *data;
+  uint8_t tail;
+} ESP_PROTOC_FRAME;
+
+
+static int cut_msg_head(uint8_t *msg, uint16_t msgLen, uint16_t cutLen) {
+  if (msgLen < cutLen) return 0;
+
+  else if (msgLen == cutLen) {
+    memset(msg, 0, msgLen);
+    return 0;
+  }
+
+  for (int i = 0; i < (msgLen - cutLen); i++)
+    msg[i] = msg[cutLen + i];
+
+  memset(&msg[msgLen - cutLen], 0, cutLen);
+
+  return msgLen - cutLen;
+}
+
+
+uint8_t Explore_Disk (char* path , uint8_t recu_level) {
+    char tmp[200];
+    char Fstream[200];
+
+  if (path == 0)return 0;
+
+  const uint8_t fileCnt = card.get_num_Files();
+
+  for (uint8_t i = 0; i < fileCnt; i++) {
+    const uint16_t nr =
+          #if ENABLED(SDCARD_RATHERRECENTFIRST) && DISABLED(SDCARD_SORT_ALPHA)
+              fileCnt - 1 -
+            #endif
+          i;
+
+          #if ENABLED(SDCARD_SORT_ALPHA)
+            card.getfilename_sorted(nr);
+          #else
+            card.getfilename_sorted(nr);
+          #endif
+      memset(tmp, 0, sizeof(tmp));
+      //if (card.longFilename[0] == 0)
+        strcpy(tmp, card.filename);
+      //else
+        //strcpy(tmp, card.longFilename);
+
+      memset(Fstream, 0, sizeof(Fstream));
+      strcpy(Fstream, tmp);
+
+          if (card.flag.filenameIsDir && (recu_level <= 10)) {
+        strcat(Fstream, ".DIR\r\n");
+        send_to_wifi(Fstream, strlen(Fstream));
+          }
+          else {
+              strcat(Fstream, "\r\n");
+        send_to_wifi(Fstream, strlen(Fstream));
+          }
+  }
+
+  return fileCnt;
+}
+
+static void wifi_gcode_exec(uint8_t *cmd_line) {
+  int8_t  tempBuf[100] = {0};
+  uint8_t *tmpStr = 0;
+  int  cmd_value;
+  volatile int print_rate;
+  if ((strstr((char *)&cmd_line[0], "\n") != 0) && ((strstr((char *)&cmd_line[0], "G") != 0) || (strstr((char *)&cmd_line[0], "M") != 0) || (strstr((char *)&cmd_line[0], "T") != 0) )) {
+
+    tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "\n");
+    if (tmpStr) {
+      *tmpStr = '\0';
+    }
+    tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "\r");
+    if (tmpStr) {
+      *tmpStr = '\0';
+    }
+    tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "*");
+    if (tmpStr) {
+      *tmpStr = '\0';
+    }
+    tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "M");
+    if ( tmpStr) {
+      cmd_value = atoi((char *)(tmpStr + 1));
+      tmpStr = (uint8_t *)strstr((char *)tmpStr, " ");
+
+      switch (cmd_value) {
+
+        case 20: //print sd / udisk file
+          if (uiCfg.print_state == IDLE) {
+            int index = 0;
+
+            if (tmpStr == 0) {
+              gCfgItems.fileSysType = FILE_SYS_SD;
+              send_to_wifi((char *)"Begin file list\r\n", strlen("Begin file list\r\n"));
+
+              get_file_list((char *)"0:/");
+
+              send_to_wifi((char *)"End file list\r\n", strlen("End file list\r\n"));
+
+              send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+              break;
+            }
+
+            while (tmpStr[index] == ' ')
+              index++;
+
+            if (gCfgItems.wifi_type == ESP_WIFI) {
+              char *path = (char *)tempBuf;
+
+              if (strlen((char *)&tmpStr[index]) < 80) {
+                send_to_wifi((char *)"Begin file list\r\n", strlen("Begin file list\r\n"));
+
+                if (strncmp((char *)&tmpStr[index], "1:", 2) == 0) {
+                  gCfgItems.fileSysType = FILE_SYS_SD;
+
+                }
+                else if (strncmp((char *)&tmpStr[index], "0:", 2) == 0) {
+                  gCfgItems.fileSysType = FILE_SYS_USB;
+                }
+                strcpy((char *)path, (char *)&tmpStr[index]);
+                get_file_list(path);
+                send_to_wifi((char *)"End file list\r\n", strlen("End file list\r\n"));
+              }
+              send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+            }
+          }
+          break;
+
+        case 21:
+          /*init sd card*/
+          send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+          break;
+
+        case 23:
+          /*select the file*/
+          if (uiCfg.print_state == IDLE) {
+            int index = 0;
+            while (tmpStr[index] == ' ')
+              index++;
+
+            if (strstr((char *)&tmpStr[index], ".g") || strstr((char *)&tmpStr[index], ".G")) {
+              if (strlen((char *)&tmpStr[index]) < 80) {
+                memset(list_file.file_name[sel_id], 0, sizeof(list_file.file_name[sel_id]));
+
+                if (gCfgItems.wifi_type == ESP_WIFI) {
+                  if (strncmp((char *)&tmpStr[index], "1:", 2) == 0) {
+                    gCfgItems.fileSysType = FILE_SYS_SD;
+
+                  }
+                  else if (strncmp((char *)&tmpStr[index], "0:", 2) == 0) {
+                    gCfgItems.fileSysType = FILE_SYS_USB;
+                  }
+                  else {
+                    if (tmpStr[index] != '/')
+                      strcat((char *)list_file.file_name[0], "/");
+                  }
+                  strcat((char *)list_file.file_name[sel_id], (char *)&tmpStr[index]);
+
+                }
+                else {
+                  strcpy(list_file.file_name[sel_id], (char *)&tmpStr[index]);
+                }
+
+                char *cur_name=strrchr(list_file.file_name[sel_id],'/');
+
+                card.openFileRead(cur_name);
+
+                if (card.isFileOpen()) {
+                  send_to_wifi((char *)"File selected\r\n", strlen("File selected\r\n"));
+
+                }
+                else {
+                  send_to_wifi((char *)"file.open failed\r\n", strlen("file.open failed\r\n"));
+                  strcpy(list_file.file_name[sel_id], "notValid");
+                }
+                send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+
+              }
+
+
+            }
+          }
+          break;
+
+        case 24:
+          if (strcmp(list_file.file_name[sel_id], "notValid") != 0) {
+            if (uiCfg.print_state == IDLE) {
+              clear_cur_ui();
+              reset_print_time();
+              start_print_time();
+              preview_gcode_prehandle(list_file.file_name[sel_id]);
+              uiCfg.print_state = WORKING;
+              lv_draw_printing();
+
+              if (gcode_preview_over != 1) {
+                #if ENABLED(SDSUPPORT)
+                char *cur_name;
+                cur_name=strrchr(list_file.file_name[sel_id],'/');
+
+                SdFile file;
+                SdFile *curDir;
+                card.endFilePrint();
+                const char * const fname = card.diveToFile(true, curDir, cur_name);
+                if (!fname) return;
+                if (file.open(curDir, fname, O_READ)) {
+                  gCfgItems.curFilesize = file.fileSize();
+                  file.close();
+                  update_spi_flash();
+                }
+                card.openFileRead(cur_name);
+                if (card.isFileOpen()) {
+                          feedrate_percentage = 100;
+                                    //saved_feedrate_percentage = feedrate_percentage;
+                                    planner.flow_percentage[0] = 100;
+                                    planner.e_factor[0]= planner.flow_percentage[0]*0.01;
+                                    if (EXTRUDERS==2) {
+                                        planner.flow_percentage[1] = 100;
+                                        planner.e_factor[1]= planner.flow_percentage[1]*0.01;
+                                    }
+                      card.startFileprint();
+                      #if ENABLED(POWER_LOSS_RECOVERY)
+                        recovery.prepare();
+                      #endif
+                      once_flag = 0;
+                }
+                #endif
+
+              }
+            }
+            else if (uiCfg.print_state == PAUSED) {
+              uiCfg.print_state = RESUMING;
+              clear_cur_ui();
+              start_print_time();
+
+              if (gCfgItems.from_flash_pic==1)
+                flash_preview_begin = 1;
+              else
+                default_preview_flg = 1;
+                                  lv_draw_printing();
+            }
+            else if (uiCfg.print_state == REPRINTING) {
+              uiCfg.print_state = REPRINTED;
+              clear_cur_ui();
+              start_print_time();
+              if (gCfgItems.from_flash_pic==1)
+                flash_preview_begin = 1;
+              else
+                default_preview_flg = 1;
+              lv_draw_printing();
+            }
+          }
+          send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+          break;
+
+        case 25:
+          /*pause print file*/
+          if (uiCfg.print_state == WORKING) {
+            stop_print_time();
+
+            clear_cur_ui();
+
+            #if ENABLED(SDSUPPORT)
+             card.pauseSDPrint();
+             uiCfg.print_state = PAUSING;
+             #endif
+            if (gCfgItems.from_flash_pic==1)
+              flash_preview_begin = 1;
+            else
+              default_preview_flg = 1;
+            lv_draw_printing();
+            send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+          }
+          break;
+
+        case 26:
+          /*stop print file*/
+          if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED) || (uiCfg.print_state == REPRINTING)) {
+            stop_print_time();
+
+            clear_cur_ui();
+                              #if ENABLED(SDSUPPORT)
+            uiCfg.print_state = IDLE;
+            card.flag.abort_sd_printing = true;
+            #endif
+
+            lv_draw_ready_print();
+
+            send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+          }
+          break;
+
+        case 27:
+          /*report print rate*/
+          if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)|| (uiCfg.print_state == REPRINTING)) {
+            print_rate = uiCfg.totalSend;
+
+            memset((char *)tempBuf, 0, sizeof(tempBuf));
+
+            sprintf((char *)tempBuf, "M27 %d\r\n", print_rate);
+
+            send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
+
+          }
+
+          break;
+
+        case 28:
+          /*begin to transfer file to filesys*/
+          if (uiCfg.print_state == IDLE) {
+
+            int index = 0;
+            while (tmpStr[index] == ' ')
+              index++;
+
+            if (strstr((char *)&tmpStr[index], ".g") || strstr((char *)&tmpStr[index], ".G")) {
+              strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
+
+              if (gCfgItems.fileSysType == FILE_SYS_SD) {
+                memset(tempBuf, 0, sizeof(tempBuf));
+                sprintf((char *)tempBuf, "%s", file_writer.saveFileName);
+              }
+              else if (gCfgItems.fileSysType == FILE_SYS_USB) {
+                memset(tempBuf, 0, sizeof(tempBuf));
+                sprintf((char *)tempBuf, "%s", (char *)file_writer.saveFileName);
+              }
+              mount_file_sys(gCfgItems.fileSysType);
+
+              #if ENABLED(SDSUPPORT)
+              char *cur_name=strrchr(list_file.file_name[sel_id],'/');
+              card.openFileWrite(cur_name);
+              if (card.isFileOpen()) {
+                memset(file_writer.saveFileName, 0, sizeof(file_writer.saveFileName));
+                strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
+                memset(tempBuf, 0, sizeof(tempBuf));
+                sprintf((char *)tempBuf, "Writing to file: %s\r\n", (char *)file_writer.saveFileName);
+                wifi_ret_ack();
+                send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
+
+                total_write = 0;
+                wifi_link_state = WIFI_WAIT_TRANS_START;
+
+              }
+              else{
+                wifi_link_state = WIFI_CONNECTED;
+                clear_cur_ui();
+                lv_draw_dialog(DIALOG_TRANSFER_NO_DEVICE);
+              }
+              #endif
+
+            }
+
+          }
+          break;
+        case 105:
+        case 991:
+          memset(tempBuf, 0, sizeof(tempBuf));
+          if (cmd_value == 105) {
+            send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+            sprintf((char *)tempBuf,"T:%.1f /%.1f B:%.1f /%.1f T0:%.1f /%.1f T1:%.1f /%.1f @:0 B@:0\r\n",
+
+            (float)thermalManager.temp_hotend[0].celsius,(float)thermalManager.temp_hotend[0].target,
+            #if HAS_HEATED_BED
+              (float)thermalManager.temp_bed.celsius,(float)thermalManager.temp_bed.target,
+            #else
+              (float)0,(float)0,
+            #endif
+            (float)thermalManager.temp_hotend[0].celsius,(float)thermalManager.temp_hotend[0].target,
+            #if !defined(SINGLENOZZLE) && HAS_MULTI_EXTRUDER
+              (float)thermalManager.temp_hotend[1].celsius,(float)thermalManager.temp_hotend[1].target
+            #else
+              (float)0,(float)0
+            #endif
+            );
+          }
+          else {
+            sprintf((char *)tempBuf,"T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n",
+
+            (int)thermalManager.temp_hotend[0].celsius,(int)thermalManager.temp_hotend[0].target,
+            #if HAS_HEATED_BED
+              (int)thermalManager.temp_bed.celsius,(int)thermalManager.temp_bed.target,
+            #else
+              0,0,
+            #endif
+            (int)thermalManager.temp_hotend[0].celsius,(int)thermalManager.temp_hotend[0].target,
+            #if !defined(SINGLENOZZLE) && HAS_MULTI_EXTRUDER
+              (int)thermalManager.temp_hotend[1].celsius,(int)thermalManager.temp_hotend[1].target
+            #else
+              0,0
+            #endif
+            );
+          }
+
+          send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
+
+          queue.enqueue_one_P(PSTR("M105"));
+
+          break;
+        case 992:
+          if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)) {
+            memset(tempBuf,0,sizeof(tempBuf));
+            sprintf((char *)tempBuf, "M992 %d%d:%d%d:%d%d\r\n", print_time.hours/10, print_time.hours%10, print_time.minutes/10, print_time.minutes%10, print_time.seconds/10, print_time.seconds%10);
+            wifi_ret_ack();
+            send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
+          }
+
+          break;
+        case 994:
+          if ((uiCfg.print_state == WORKING) || (uiCfg.print_state == PAUSED)) {
+            memset(tempBuf,0,sizeof(tempBuf));
+            if (strlen((char *)list_file.file_name[sel_id]) > (100-1)) {
+              return;
+            }
+            sprintf((char *)tempBuf, "M994 %s;%d\n", list_file.file_name[sel_id],(int)gCfgItems.curFilesize);
+            wifi_ret_ack();
+            send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
+          }
+          break;
+        case 997:
+          if (uiCfg.print_state == IDLE) {
+            wifi_ret_ack();
+            send_to_wifi((char *)"M997 IDLE\r\n", strlen("M997 IDLE\r\n"));
+          }
+          else if (uiCfg.print_state == WORKING) {
+            wifi_ret_ack();
+            send_to_wifi((char *)"M997 PRINTING\r\n", strlen("M997 PRINTING\r\n"));
+          }
+          else if (uiCfg.print_state == PAUSED) {
+            wifi_ret_ack();
+            send_to_wifi((char *)"M997 PAUSE\r\n", strlen("M997 PAUSE\r\n"));
+          }
+          else if (uiCfg.print_state == REPRINTING) {
+            wifi_ret_ack();
+            send_to_wifi((char *)"M997 PAUSE\r\n", strlen("M997 PAUSE\r\n"));
+          }
+          if (uiCfg.command_send == 0) get_wifi_list_command_send();
+          break;
+
+        case 998:
+          if (uiCfg.print_state == IDLE) {
+            if (atoi((char *)tmpStr) == 0) {
+              set_cur_file_sys(0);
+            }
+            else if (atoi((char *)tmpStr) == 1) {
+              set_cur_file_sys(1);
+            }
+            wifi_ret_ack();
+          }
+          break;
+
+        case 115:
+          memset(tempBuf,0,sizeof(tempBuf));
+          send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+          send_to_wifi((char *)"FIRMWARE_NAME:Robin_nano\r\n", strlen("FIRMWARE_NAME:Robin_nano\r\n"));
+          break;
+
+        default:
+          strcat((char *)cmd_line, "\n");
+
+              uint32_t left;
+
+              if (espGcodeFifo.wait_tick> 5) {
+
+                if (espGcodeFifo.r >  espGcodeFifo.w)
+                  left =  espGcodeFifo.r - espGcodeFifo.w - 1;
+                else
+                  left = WIFI_GCODE_BUFFER_SIZE + espGcodeFifo.r - espGcodeFifo.w - 1;
+                if (left >= strlen((const char *)cmd_line)) {
+                  uint32_t index = 0;
+                  while (index < strlen((const char *)cmd_line)) {
+                    espGcodeFifo.Buffer[espGcodeFifo.w] = cmd_line[index] ;
+                    espGcodeFifo.w =  (espGcodeFifo.w + 1) % WIFI_GCODE_BUFFER_SIZE;
+                    index++;
+                  }
+              if (left - WIFI_GCODE_BUFFER_LEAST_SIZE >= strlen((const char *)cmd_line))
+                send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+              else
+                need_ok_later = true;
+
+                }
+
+              }
+          break;
+
+      }
+    }
+    else{
+      strcat((char *)cmd_line, "\n");
+      uint32_t left_g;
+
+        if (espGcodeFifo.wait_tick > 5) {
+
+        if (espGcodeFifo.r >  espGcodeFifo.w)
+          left_g =  espGcodeFifo.r - espGcodeFifo.w - 1;
+        else
+          left_g = WIFI_GCODE_BUFFER_SIZE + espGcodeFifo.r - espGcodeFifo.w - 1;
+        if (left_g >= strlen((const char *)cmd_line)) {
+          uint32_t index = 0;
+          while (index < strlen((const char *)cmd_line)) {
+            espGcodeFifo.Buffer[espGcodeFifo.w] = cmd_line[index] ;
+            espGcodeFifo.w =  (espGcodeFifo.w + 1) % WIFI_GCODE_BUFFER_SIZE;
+            index++;
+          }
+        if (left_g - WIFI_GCODE_BUFFER_LEAST_SIZE >= strlen((const char *)cmd_line))
+          send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+        else
+          need_ok_later = true;
+
+        }
+      }
+    }
+  }
+}
+
+static int32_t charAtArray(const uint8_t *_array, uint32_t _arrayLen, uint8_t _char) {
+  for (uint32_t i = 0; i < _arrayLen; i++)
+    if (*(_array + i) == _char) return i;
+  return -1;
+}
+
+void get_wifi_list_command_send() {
+  char buf[6] = {0};
+  buf[0] = 0xA5;
+  buf[1] = 0x07;
+  buf[2] = 0x00;
+  buf[3] = 0x00;
+  buf[4] = 0xFC;
+  raw_send_to_wifi(buf, 5);
+}
+
+static void net_msg_handle(uint8_t * msg, uint16_t msgLen) {
+  int wifiNameLen, wifiKeyLen, hostLen, id_len, ver_len;
+
+  if (msgLen <= 0) return;
+  //ip
+  sprintf(ipPara.ip_addr, "%d.%d.%d.%d", msg[0], msg[1], msg[2], msg[3]);
+
+  //port
+  //connect state
+  if (msg[6] == 0x0A)
+    wifi_link_state = WIFI_CONNECTED;
+  else if (msg[6] == 0x0E)
+    wifi_link_state = WIFI_EXCEPTION;
+  else
+    wifi_link_state = WIFI_NOT_CONFIG;
+
+  //mode
+  wifiPara.mode = msg[7];
+
+
+  //wifi name
+  wifiNameLen = msg[8];
+  wifiKeyLen = msg[9 + wifiNameLen];
+  if (wifiNameLen < 32) {
+    memset(wifiPara.ap_name, 0, sizeof(wifiPara.ap_name));
+    memcpy(wifiPara.ap_name, &msg[9], wifiNameLen);
+
+    memset(&wifi_list.wifiConnectedName,0,sizeof(wifi_list.wifiConnectedName));
+    memcpy(&wifi_list.wifiConnectedName,&msg[9],wifiNameLen);
+
+    //wifi key
+    if (wifiKeyLen < 64) {
+      memset(wifiPara.keyCode, 0, sizeof(wifiPara.keyCode));
+      memcpy(wifiPara.keyCode, &msg[10 + wifiNameLen], wifiKeyLen);
+    }
+  }
+
+
+  cloud_para.state =msg[10 + wifiNameLen + wifiKeyLen];
+  hostLen = msg[11 + wifiNameLen + wifiKeyLen];
+  if (cloud_para.state) {
+    if (hostLen < 96) {
+      memset(cloud_para.hostUrl, 0, sizeof(cloud_para.hostUrl));
+      memcpy(cloud_para.hostUrl, &msg[12 + wifiNameLen + wifiKeyLen], hostLen);
+    }
+    cloud_para.port = msg[12 + wifiNameLen + wifiKeyLen + hostLen] + (msg[13 + wifiNameLen + wifiKeyLen + hostLen] << 8);
+
+  }
+
+  // id
+  id_len = msg[14 + wifiNameLen + wifiKeyLen + hostLen];
+  if (id_len == 20) {
+    memset(cloud_para.id, 0, sizeof(cloud_para.id));
+    memcpy(cloud_para.id, (const char *)&msg[15 + wifiNameLen + wifiKeyLen + hostLen], id_len);
+  }
+  ver_len = msg[15 + wifiNameLen + wifiKeyLen + hostLen + id_len];
+  if (ver_len < 20) {
+    memset(wifi_firm_ver, 0, sizeof(wifi_firm_ver));
+    memcpy(wifi_firm_ver, (const char *)&msg[16 + wifiNameLen + wifiKeyLen + hostLen + id_len], ver_len);
+  }
+
+  if (uiCfg.configWifi == 1) {
+    if ((wifiPara.mode != gCfgItems.wifi_mode_sel)
+      || (strncmp(wifiPara.ap_name, (const char *)uiCfg.wifi_name, 32) != 0)
+      || (strncmp(wifiPara.keyCode, (const char *)uiCfg.wifi_key, 64) != 0)) {
+      package_to_wifi(WIFI_PARA_SET, (char *)0, 0);
+    }
+    else uiCfg.configWifi = 0;
+  }
+  if (cfg_cloud_flag == 1) {
+    if (((cloud_para.state >> 4) != (char)gCfgItems.cloud_enable)
+      || (strncmp(cloud_para.hostUrl, (const char *)uiCfg.cloud_hostUrl, 96) != 0)
+      || (cloud_para.port != uiCfg.cloud_port)) {
+      package_to_wifi(WIFI_CLOUD_CFG, (char *)0, 0);
+    }
+    else cfg_cloud_flag = 0;
+  }
+}
+
+static void wifi_list_msg_handle(uint8_t * msg, uint16_t msgLen) {
+  int wifiNameLen,wifiMsgIdex=1;
+  int8_t wifi_name_is_same=0;
+  int8_t i,j;
+  int8_t wifi_name_num=0;
+  uint8_t *str=0;
+  int8_t valid_name_num;
+
+  if (msgLen <= 0)
+    return;
+  if (disp_state == KEY_BOARD_UI)
+    return;
+
+  wifi_list.getNameNum = msg[0];
+
+  if (wifi_list.getNameNum < 20) {
+    uiCfg.command_send = 1;
+
+    memset(wifi_list.wifiName,0,sizeof(wifi_list.wifiName));
+
+    wifi_name_num = wifi_list.getNameNum;
+
+    valid_name_num=0;
+    str = wifi_list.wifiName[valid_name_num];
+
+    if (wifi_list.getNameNum > 0) wifi_list.currentWifipage = 1;
+
+    for (i = 0; i <wifi_list.getNameNum; i++) {
+      wifiNameLen = msg[wifiMsgIdex];
+      wifiMsgIdex  +=  1;
+      if (wifiNameLen < 32) {
+        memset(str, 0, WIFI_NAME_BUFFER_SIZE);
+        memcpy(str, &msg[wifiMsgIdex], wifiNameLen);
+        for (j = 0; j < valid_name_num; j++) {
+          if (strcmp((const char *)str,(const char *)wifi_list.wifiName[j]) == 0) {
+            wifi_name_is_same = 1;
+            break;
+          }
+        }
+        if (wifi_name_is_same != 1) {
+          //for(j=0;j<wifiNameLen;j++)
+          //{
+            if (str[0] > 0x80) {
+              wifi_name_is_same = 1;
+              //break;
+            }
+          //}
+        }
+        if (wifi_name_is_same == 1) {
+          wifi_name_is_same = 0;
+          wifiMsgIdex  +=  wifiNameLen;
+          //wifi_list.RSSI[i] = msg[wifiMsgIdex];
+          wifiMsgIdex  +=  1;
+          wifi_name_num--;
+          //i--;
+          continue;
+        }
+        if (i < WIFI_TOTAL_NUMBER-1) {
+          str = wifi_list.wifiName[++valid_name_num];
+        }
+      }
+      wifiMsgIdex  +=  wifiNameLen;
+      wifi_list.RSSI[i] = msg[wifiMsgIdex];
+      wifiMsgIdex  +=  1;
+    }
+    wifi_list.getNameNum = wifi_name_num;
+    if (wifi_list.getNameNum % NUMBER_OF_PAGE == 0) {
+      wifi_list.getPage = wifi_list.getNameNum/NUMBER_OF_PAGE;
+    }
+    else {
+      wifi_list.getPage = wifi_list.getNameNum/NUMBER_OF_PAGE + 1;
+    }
+    wifi_list.nameIndex = 0;
+    if (disp_state == WIFI_LIST_UI)
+    disp_wifi_list();
+  }
+}
+
+static void gcode_msg_handle(uint8_t * msg, uint16_t msgLen) {
+  uint8_t gcodeBuf[100] = {0};
+  char *index_s;
+  char *index_e;
+
+  if (msgLen <= 0)
+    return;
+
+  index_s = (char *)msg;
+  index_e = (char *)strstr((char *)msg, "\n");
+  if (*msg == 'N') {
+    index_s = (char *)strstr((char *)msg, " ");
+    while ((*index_s) == ' ') {
+      index_s++;
+    }
+  }
+  while ((index_e != 0) && ((int)index_s < (int)index_e)) {
+    if ((int)(index_e - index_s) < (int)sizeof(gcodeBuf)) {
+      memset(gcodeBuf, 0, sizeof(gcodeBuf));
+
+      memcpy(gcodeBuf, index_s, index_e - index_s + 1);
+
+      wifi_gcode_exec(gcodeBuf);
+    }
+    while ((*index_e == '\r') || (*index_e == '\n'))
+      index_e++;
+
+    index_s = index_e;
+    index_e = (char *)strstr(index_s, "\n");
+  }
+}
+
+void utf8_2_unicode(uint8_t *source,uint8_t Len) {
+  uint8_t  i=0,char_i=0,char_byte_num=0;
+  uint16_t  u16_h,u16_m,u16_l,u16_value;
+  uint8_t FileName_unicode[30];
+
+  memset(FileName_unicode, 0, sizeof(FileName_unicode));
+
+  while (1) {
+    char_byte_num = source[i] & 0xF0;
+    if (source[i] < 0X80) {
+      //ASCII --1byte
+      FileName_unicode[char_i] = source[i];
+      i += 1;
+      char_i += 1;
+    }
+    else if (char_byte_num == 0XC0 || char_byte_num == 0XD0) {
+      //--2byte
+
+      u16_h = (((uint16_t)source[i] <<8) & 0x1f00) >> 2;
+      u16_l = ((uint16_t)source[i+1] & 0x003f);
+      u16_value = (u16_h | u16_l);
+      FileName_unicode[char_i] = (uint8_t)((u16_value & 0xff00) >> 8);
+      FileName_unicode[char_i + 1] = (uint8_t)(u16_value & 0x00ff);
+      i += 2;
+      char_i += 2;
+    }
+    else if (char_byte_num == 0XE0) {
+      //--3byte
+      u16_h = (((uint16_t)source[i] <<8 ) & 0x0f00) << 4;
+      u16_m = (((uint16_t)source[i+1] << 8) & 0x3f00) >> 2;
+      u16_l = ((uint16_t)source[i+2] & 0x003f);
+      u16_value = (u16_h | u16_m | u16_l);
+      FileName_unicode[char_i] = (uint8_t)((u16_value & 0xff00) >> 8);
+      FileName_unicode[char_i + 1] = (uint8_t)(u16_value & 0x00ff);
+      i += 3;
+      char_i += 2;
+    }
+    else if (char_byte_num == 0XF0) {
+      //--4byte
+      i += 4;
+      //char_i += 3;
+    }
+    else {
+      break;
+    }
+    if (i >= Len || i >= 255)break;
+  }
+  memcpy(source, FileName_unicode, sizeof(FileName_unicode));
+}
+
+char saveFilePath[50];
+
+static bool longName2DosName(const char* longName, uint8_t* dosName) {
+  uint8_t i = 11;
+  while (i--) dosName[i] = '\0';
+  while (*longName) {
+    uint8_t c = *longName++;
+    if (c == '.') {                   // For a dot...
+      if (i == 0) return false;
+      else { strcat((char *)dosName,".GCO"); return dosName[0] != '\0'; }
+    }
+    else {
+      // Fail for illegal characters
+      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
+      while (uint8_t b = pgm_read_byte(p++)) if (b == c) return false;
+      if (c < 0x21 || c == 0x7F) return false;           // Check size, non-printable characters
+      dosName[i++] = (c < 'a' || c > 'z') ? (c) : (c + ('A' - 'a')); // Uppercase required for 8.3 name
+    }
+    if (i >= 5) strcat((char *)dosName,"~1.GCO");
+  }
+  return dosName[0] != '\0';              // Return true if any name was set
+}
+
+static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen) {
+  uint8_t fileNameLen = *msg;
+
+  if (msgLen != fileNameLen + 5) return;
+
+  file_writer.fileLen = *((uint32_t *)(msg + 1));
+  memset(file_writer.saveFileName, 0, sizeof(file_writer.saveFileName));
+
+  memcpy(file_writer.saveFileName, msg + 5, fileNameLen);
+
+  utf8_2_unicode(file_writer.saveFileName,fileNameLen);
+
+  memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
+
+  if (strlen((const char *)file_writer.saveFileName) > sizeof(saveFilePath))
+    return;
+
+  memset(saveFilePath, 0, sizeof(saveFilePath));
+
+  if (gCfgItems.fileSysType == FILE_SYS_SD) {
+    //sprintf((char *)saveFilePath, "/%s", file_writer.saveFileName);
+    card.mount();
+
+    //ZERO(list_file.long_name[sel_id]);
+    //memcpy(list_file.long_name[sel_id],file_writer.saveFileName,sizeof(list_file.long_name[sel_id]));
+  }
+  else if (gCfgItems.fileSysType == FILE_SYS_USB) {
+
+  }
+  file_writer.write_index = 0;
+  lastFragment = -1;
+
+  wifiTransError.flag = 0;
+  wifiTransError.start_tick = 0;
+  wifiTransError.now_tick = 0;
+
+  TERN_(SDSUPPORT, card.closefile());
+
+  wifi_delay(1000);
+
+  #if ENABLED(SDSUPPORT)
+
+    uint8_t dosName[FILENAME_LENGTH];
+
+    if (!longName2DosName((const char *)file_writer.saveFileName,dosName)) {
+      clear_cur_ui();
+      upload_result = 2;
+      wifiTransError.flag = 1;
+      wifiTransError.start_tick = getWifiTick();
+      lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
+      return;
+    }
+    sprintf((char *)saveFilePath, "/%s", dosName);
+
+    ZERO(list_file.long_name[sel_id]);
+    memcpy(list_file.long_name[sel_id],dosName,sizeof(dosName));
+
+    char *cur_name=strrchr((const char *)saveFilePath,'/');
+
+    SdFile file;
+    SdFile *curDir;
+    card.endFilePrint();
+    const char * const fname = card.diveToFile(true, curDir, cur_name);
+    if (!fname) return;
+    if (file.open(curDir, fname, O_CREAT | O_APPEND | O_WRITE | O_TRUNC)) {
+      gCfgItems.curFilesize = file.fileSize();
+    }
+    else {
+      clear_cur_ui();
+      upload_result = 2;
+      wifiTransError.flag = 1;
+      wifiTransError.start_tick = getWifiTick();
+      lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
+      return;
+    }
+  #endif
+
+  wifi_link_state = WIFI_TRANS_FILE;
+
+  upload_result = 1;
+
+  clear_cur_ui();
+  lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
+
+  lv_task_handler();
+
+  file_writer.tick_begin = getWifiTick();
+}
+
+#define FRAG_MASK _BV32(31)
+
+static void file_fragment_msg_handle(uint8_t * msg, uint16_t msgLen) {
+  uint32_t frag = *((uint32_t *)msg);
+
+  if ((frag & FRAG_MASK) != (uint32_t)(lastFragment + 1)) {
+    memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
+    file_writer.write_index = 0;
+    wifi_link_state = WIFI_CONNECTED;
+    upload_result = 2;
+  }
+  else {
+    if (write_to_file((char *)msg + 4, msgLen - 4) < 0) {
+      memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
+      file_writer.write_index = 0;
+      wifi_link_state = WIFI_CONNECTED;
+      upload_result = 2;
+      return;
+    }
+    lastFragment = frag;
+
+    if ((frag & (~FRAG_MASK))) {
+      int res = card.write(file_writer.write_buf, file_writer.write_index);
+      if (res == -1) {
+        memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
+        file_writer.write_index = 0;
+        wifi_link_state = WIFI_CONNECTED;
+        upload_result = 2;
+        return;
+      }
+      memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
+      file_writer.write_index = 0;
+      file_writer.tick_end = getWifiTick();
+      upload_time = getWifiTickDiff(file_writer.tick_begin, file_writer.tick_end) / 1000;
+      upload_size = gCfgItems.curFilesize;
+      wifi_link_state = WIFI_CONNECTED;
+      upload_result = 3;
+    }
+
+  }
+}
+
+void esp_data_parser(char *cmdRxBuf, int len) {
+  int32_t head_pos;
+  int32_t tail_pos;
+  uint16_t cpyLen;
+  int16_t leftLen = len;
+  bool loop_again = false;
+
+  ESP_PROTOC_FRAME esp_frame;
+
+  while (leftLen > 0 || loop_again) {
+    loop_again = false;
+
+    if (esp_msg_index != 0) {
+      head_pos = 0;
+      cpyLen = (leftLen < (int16_t)((sizeof(esp_msg_buf) - esp_msg_index)) ? leftLen : sizeof(esp_msg_buf) - esp_msg_index);
+
+      memcpy(&esp_msg_buf[esp_msg_index], cmdRxBuf + len - leftLen, cpyLen);
+
+      esp_msg_index += cpyLen;
+
+      leftLen = leftLen - cpyLen;
+      tail_pos = charAtArray(esp_msg_buf, esp_msg_index, ESP_PROTOC_TAIL);
+
+      if (tail_pos == -1) {
+        if (esp_msg_index >= sizeof(esp_msg_buf)) {
+          memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+          esp_msg_index = 0;
+        }
+        return;
+      }
+    }
+    else {
+      head_pos = charAtArray((uint8_t const *)&cmdRxBuf[len - leftLen], leftLen, ESP_PROTOC_HEAD);
+      if (head_pos == -1) return;
+
+      memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+      memcpy(esp_msg_buf, &cmdRxBuf[len - leftLen + head_pos], leftLen - head_pos);
+
+      esp_msg_index = leftLen - head_pos;
+
+      leftLen = 0;
+      head_pos = 0;
+      tail_pos = charAtArray(esp_msg_buf, esp_msg_index, ESP_PROTOC_TAIL);
+      if (tail_pos == -1) {
+        if (esp_msg_index >= sizeof(esp_msg_buf)) {
+          memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+          esp_msg_index = 0;
+        }
+        return;
+      }
+    }
+
+    esp_frame.type = esp_msg_buf[1];
+    if ((esp_frame.type != ESP_TYPE_NET) && (esp_frame.type != ESP_TYPE_GCODE)
+       && (esp_frame.type != ESP_TYPE_FILE_FIRST) && (esp_frame.type != ESP_TYPE_FILE_FRAGMENT)
+       &&(esp_frame.type != ESP_TYPE_WIFI_LIST)) {
+      memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+      esp_msg_index = 0;
+      return;
+    }
+
+    esp_frame.dataLen = esp_msg_buf[2] + (esp_msg_buf[3] << 8);
+
+    if ((int)(4 + esp_frame.dataLen) > (int)(sizeof(esp_msg_buf))) {
+      memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+      esp_msg_index = 0;
+      return;
+    }
+
+    if (esp_msg_buf[4 + esp_frame.dataLen] != ESP_PROTOC_TAIL) {
+      if (esp_msg_index >= sizeof(esp_msg_buf)) {
+        memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+        esp_msg_index = 0;
+      }
+      return;
+    }
+
+    esp_frame.data = &esp_msg_buf[4];
+    switch (esp_frame.type) {
+      case ESP_TYPE_NET:
+        net_msg_handle(esp_frame.data, esp_frame.dataLen);
+        break;
+      case ESP_TYPE_GCODE:
+        gcode_msg_handle(esp_frame.data, esp_frame.dataLen);
+        break;
+      case ESP_TYPE_FILE_FIRST:
+        file_first_msg_handle(esp_frame.data, esp_frame.dataLen);
+        break;
+      case ESP_TYPE_FILE_FRAGMENT:
+        file_fragment_msg_handle(esp_frame.data, esp_frame.dataLen);
+        break;
+      case ESP_TYPE_WIFI_LIST:
+        wifi_list_msg_handle(esp_frame.data, esp_frame.dataLen);
+        break;
+      default: break;
+    }
+
+    esp_msg_index = cut_msg_head(esp_msg_buf, esp_msg_index, esp_frame.dataLen  + 5);
+    if (esp_msg_index > 0) {
+      if (charAtArray(esp_msg_buf, esp_msg_index,  ESP_PROTOC_HEAD) == -1) {
+        memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
+        esp_msg_index = 0;
+        return;
+      }
+
+      if ((charAtArray(esp_msg_buf, esp_msg_index,  ESP_PROTOC_HEAD) != -1) && (charAtArray(esp_msg_buf, esp_msg_index, ESP_PROTOC_TAIL) != -1))
+        loop_again = true;
+    }
+  }
+}
+
+int32_t tick_net_time1, tick_net_time2;
+
+int storeRcvData(int32_t len) {
+  unsigned char tmpW = wifiDmaRcvFifo.write_cur;
+  if (len <= UDISKBUFLEN && wifiDmaRcvFifo.state[tmpW] == udisk_buf_empty) {
+    for (uint16_t i = 0; i < len; i++)
+      wifiDmaRcvFifo.bufferAddr[tmpW][i] = WIFISERIAL.read();
+    wifiDmaRcvFifo.state[tmpW] = udisk_buf_full;
+    wifiDmaRcvFifo.write_cur = (tmpW + 1) % TRANS_RCV_FIFO_BLOCK_NUM;
+    return 1;
+  }
+  return 0;
+}
+
+int32_t readWifiFifo(uint8_t *retBuf, uint32_t bufLen) {
+  unsigned char tmpR = wifiDmaRcvFifo.read_cur;
+  if (bufLen >= UDISKBUFLEN && wifiDmaRcvFifo.state[tmpR] == udisk_buf_full) {
+    memcpy(retBuf, (unsigned char *)wifiDmaRcvFifo.bufferAddr[tmpR], UDISKBUFLEN);
+    wifiDmaRcvFifo.state[tmpR] = udisk_buf_empty;
+    wifiDmaRcvFifo.read_cur = (tmpR + 1) % TRANS_RCV_FIFO_BLOCK_NUM;
+    return UDISKBUFLEN;
+  }
+  return 0;
+}
+
+void stopEspTransfer() {
+  if (wifi_link_state == WIFI_TRANS_FILE)
+  wifi_link_state = WIFI_CONNECTED;
+
+  TERN_(SDSUPPORT, card.closefile());
+
+  if (upload_result != 3) {
+    wifiTransError.flag = 1;
+    wifiTransError.start_tick = getWifiTick();
+    card.removeFile((const char *)saveFilePath);
+  }
+  else {
+  }
+  wifi_delay(200);
+  WIFI_IO1_SET();
+  //exchangeFlashMode(1);  //change spi flash to use dma mode
+  esp_port_begin(1);
+  if (wifiTransError.flag != 0x1) WIFI_IO1_RESET();
+}
+
+void wifi_rcv_handle() {
+  int32_t len = 0;
+  uint8_t ucStr[(UART_RX_BUFFER_SIZE) + 1] = {0};
+  int8_t getDataF = 0;
+
+  if (wifi_link_state == WIFI_TRANS_FILE) {
+    #if 0
+      if (WIFISERIAL.available() == UART_RX_BUFFER_SIZE) {
+        for (uint16_t i=0;i<UART_RX_BUFFER_SIZE;i++) {
+          ucStr[i] = WIFISERIAL.read();
+          len++;
+        }
+      }
+    #else
+      len = readWifiFifo(ucStr, UART_RX_BUFFER_SIZE);
+    #endif
+    if (len > 0) {
+      esp_data_parser((char *)ucStr, len);
+      if (wifi_link_state == WIFI_CONNECTED) {
+        clear_cur_ui();
+        lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
+        stopEspTransfer();
+      }
+      getDataF = 1;
+    }
+    if (esp_state == TRANSFER_STORE) {
+      if (storeRcvData(UART_RX_BUFFER_SIZE)) {
+        esp_state = TRANSFERING;
+        //esp_dma_pre();
+        if (wifiTransError.flag != 0x1) WIFI_IO1_RESET();
+      }
+      else
+        WIFI_IO1_SET();
+    }
+  }
+  else {
+    //len = readUsartFifo((SZ_USART_FIFO *)&WifiRxFifo, (int8_t *)ucStr, UART_RX_BUFFER_SIZE);
+    len = readWifiBuf((int8_t *)ucStr, UART_RX_BUFFER_SIZE);
+    if (len > 0) {
+      esp_data_parser((char *)ucStr, len);
+
+      if (wifi_link_state == WIFI_TRANS_FILE) {
+        //exchangeFlashMode(0);  //change spi flash not use dma mode
+        wifi_delay(10);
+        esp_port_begin(0);
+        wifi_delay(10);
+        tick_net_time1 = 0;
+      }
+      if (wifiTransError.flag != 0x1) WIFI_IO1_RESET();
+      getDataF = 1;
+    }
+    if (need_ok_later &&  (queue.length < BUFSIZE)) {
+      need_ok_later = false;
+      send_to_wifi((char *)"ok\r\n", strlen("ok\r\n"));
+    }
+  }
+
+  if (getDataF == 1) {
+    tick_net_time1 = getWifiTick();
+  }
+  else {
+    tick_net_time2 = getWifiTick();
+
+    if (wifi_link_state == WIFI_TRANS_FILE) {
+      if ((tick_net_time1 != 0) && (getWifiTickDiff(tick_net_time1, tick_net_time2) > 4500)) {
+        wifi_link_state = WIFI_CONNECTED;
+        upload_result = 2;
+        clear_cur_ui();
+        stopEspTransfer();
+        lv_draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
+      }
+    }
+
+    if ((tick_net_time1 != 0) && (getWifiTickDiff(tick_net_time1, tick_net_time2) > 10000))
+      wifi_link_state = WIFI_NOT_CONFIG;
+
+    if ((tick_net_time1 != 0) && (getWifiTickDiff(tick_net_time1, tick_net_time2) > 120000)) {
+      wifi_link_state = WIFI_NOT_CONFIG;
+      wifi_reset();
+      tick_net_time1 = getWifiTick();
+    }
+  }
+
+  if (wifiTransError.flag == 0x1) {
+    wifiTransError.now_tick = getWifiTick();
+    if (getWifiTickDiff(wifiTransError.start_tick, wifiTransError.now_tick) > WAIT_ESP_TRANS_TIMEOUT_TICK) {
+      wifiTransError.flag = 0;
+      WIFI_IO1_RESET();
+    }
+  }
+}
+
+void wifi_looping() {
+   do { wifi_rcv_handle(); } while (wifi_link_state == WIFI_TRANS_FILE);
+}
+
+void mks_esp_wifi_init() {
+  wifi_link_state = WIFI_NOT_CONFIG;
+
+  SET_OUTPUT(WIFI_RESET_PIN);
+  WIFI_SET();
+  SET_OUTPUT(WIFI_IO1_PIN);
+  SET_INPUT_PULLUP(WIFI_IO0_PIN);
+  WIFI_IO1_SET();
+
+  esp_state = TRANSFER_IDLE;
+  esp_port_begin(1);
+
+  wifi_reset();
+
+  #if 0
+    res = f_open(&esp_upload.uploadFile, ESP_FIRMWARE_FILE,  FA_OPEN_EXISTING | FA_READ);
+
+    if (res ==  FR_OK) {
+      f_close(&esp_upload.uploadFile);
+
+      wifi_delay(2000);
+
+      if (usartFifoAvailable((SZ_USART_FIFO *)&WifiRxFifo) < 20) {
+        return;
+      }
+
+      clear_cur_ui();
+
+      draw_dialog(DIALOG_TYPE_UPDATE_ESP_FIRMARE);
+
+      if (wifi_upload(0) >= 0) {
+
+        f_unlink("1:/MKS_WIFI_CUR");
+        f_rename(ESP_FIRMWARE_FILE,"/MKS_WIFI_CUR");
+      }
+      draw_return_ui();
+
+      update_flag = 1;
+    }
+    if (update_flag == 0) {
+      res = f_open(&esp_upload.uploadFile, ESP_WEB_FIRMWARE_FILE,  FA_OPEN_EXISTING | FA_READ);
+
+      if (res ==  FR_OK) {
+        f_close(&esp_upload.uploadFile);
+
+        wifi_delay(2000);
+
+        if (usartFifoAvailable((SZ_USART_FIFO *)&WifiRxFifo) < 20) {
+          return;
+        }
+
+        clear_cur_ui();
+
+        draw_dialog(DIALOG_TYPE_UPDATE_ESP_FIRMARE);
+        if (wifi_upload(1) >= 0) {
+
+          f_unlink("1:/MKS_WIFI_CUR");
+          f_rename(ESP_WEB_FIRMWARE_FILE,"/MKS_WIFI_CUR");
+        }
+        draw_return_ui();
+        update_flag = 1;
+      }
+
+    }
+    if (update_flag == 0) {
+      res = f_open(&esp_upload.uploadFile, ESP_WEB_FILE,  FA_OPEN_EXISTING | FA_READ);
+      if (res ==  FR_OK) {
+        f_close(&esp_upload.uploadFile);
+
+        wifi_delay(2000);
+
+        if (usartFifoAvailable((SZ_USART_FIFO *)&WifiRxFifo) < 20) {
+          return;
+        }
+
+        clear_cur_ui();
+
+        draw_dialog(DIALOG_TYPE_UPDATE_ESP_DATA);
+
+        if (wifi_upload(2) >= 0) {
+
+          f_unlink("1:/MKS_WEB_CONTROL_CUR");
+          f_rename(ESP_WEB_FILE,"/MKS_WEB_CONTROL_CUR");
+        }
+        draw_return_ui();
+      }
+    }
+  #endif
+  wifiPara.decodeType = WIFI_DECODE_TYPE;
+  wifiPara.baud = 115200;
+  wifi_link_state = WIFI_NOT_CONFIG;
+}
+
+#define BUF_INC_POINTER(p)  ((p + 1 == UART_FIFO_BUFFER_SIZE) ? 0 : (p + 1))
+
+int usartFifoAvailable(SZ_USART_FIFO *fifo) {
+  int diff = fifo->uart_write_point - fifo->uart_read_point;
+  if (diff < 0) diff += UART_FIFO_BUFFER_SIZE;
+  return diff;
+}
+
+int readUsartFifo(SZ_USART_FIFO *fifo, int8_t *buf, int32_t len) {
+  int i = 0 ;
+  while (i < len && fifo->uart_read_point != fifo->uart_write_point) {
+    buf[i++] = fifo->uartTxBuffer[fifo->uart_read_point];
+    fifo->uart_read_point = BUF_INC_POINTER(fifo->uart_read_point);
+  }
+  return i;
+}
+
+int writeUsartFifo(SZ_USART_FIFO *fifo, int8_t *buf, int32_t len) {
+  if (buf == 0 || len <= 0) return -1;
+
+  int i = 0 ;
+  while (i < len && fifo->uart_read_point != BUF_INC_POINTER(fifo->uart_write_point)) {
+    fifo->uartTxBuffer[fifo->uart_write_point] = buf[i++];
+    fifo->uart_write_point = BUF_INC_POINTER(fifo->uart_write_point);
+  }
+  return i;
+}
+
+void get_wifi_commands() {
+  static char wifi_line_buffer[MAX_CMD_SIZE];
+  static bool wifi_comment_mode = false;
+  static int wifi_read_count = 0;
+
+  if (espGcodeFifo.wait_tick > 5) {
+    while ((queue.length < BUFSIZE) && (espGcodeFifo.r != espGcodeFifo.w)) {
+
+      espGcodeFifo.wait_tick = 0;
+
+      char wifi_char = espGcodeFifo.Buffer[espGcodeFifo.r];
+
+      espGcodeFifo.r = (espGcodeFifo.r + 1) % WIFI_GCODE_BUFFER_SIZE;
+
+      /**
+       * If the character ends the line
+       */
+      if (wifi_char == '\n' || wifi_char == '\r') {
+
+        wifi_comment_mode = false; // end of line == end of comment
+
+        if (!wifi_read_count) continue; // skip empty lines
+
+        wifi_line_buffer[wifi_read_count] = 0; // terminate string
+        wifi_read_count = 0; //reset buffer
+
+        char* command = wifi_line_buffer;
+        while (*command == ' ') command++; // skip any leading spaces
+
+          // Movement commands alert when stopped
+          if (IsStopped()) {
+          char* gpos = strchr(command, 'G');
+          if (gpos) {
+            switch (strtol(gpos + 1, nullptr, 10)) {
+              case 0 ... 1:
+              #if ENABLED(ARC_SUPPORT)
+                case 2 ... 3:
+              #endif
+              #if ENABLED(BEZIER_CURVE_SUPPORT)
+                case 5:
+              #endif
+                SERIAL_ECHOLNPGM(STR_ERR_STOPPED);
+                LCD_MESSAGEPGM(MSG_STOPPED);
+                break;
+            }
+          }
+        }
+
+        #if DISABLED(EMERGENCY_PARSER)
+          // Process critical commands early
+          if (strcmp(command, "M108") == 0) {
+            wait_for_heatup = false;
+            TERN_(HAS_LCD_MENU, wait_for_user = false);
+          }
+          if (strcmp(command, "M112") == 0) kill(M112_KILL_STR, nullptr, true);
+          if (strcmp(command, "M410") == 0) quickstop_stepper();
+        #endif
+
+        // Add the command to the queue
+        queue.enqueue_one_P(wifi_line_buffer);
+      }
+      else if (wifi_read_count >= MAX_CMD_SIZE - 1) {
+
+      }
+      else { // it's not a newline, carriage return or escape char
+        if (wifi_char == ';') wifi_comment_mode = true;
+        if (!wifi_comment_mode) wifi_line_buffer[wifi_read_count++] = wifi_char;
+      }
+    }
+  }// queue has space, serial has data
+  else {
+    espGcodeFifo.wait_tick++;
+  }
+}
+
+int readWifiBuf(int8_t *buf, int32_t len) {
+  int i = 0;
+  while (i < len && WIFISERIAL.available())
+    buf[i++] = WIFISERIAL.read();
+  return i;
+}
+
+#endif // USE_WIFI_FUNCTION
+#endif // HAS_TFT_LVGL_UI
