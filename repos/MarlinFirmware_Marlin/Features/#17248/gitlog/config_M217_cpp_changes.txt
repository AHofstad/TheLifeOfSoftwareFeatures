commit 669814d0d408a622f020a55971ba04030e4fa4bf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Feb 7 23:40:54 2024 -0600

    ‚ú® MARLIN_SMALL_BUILD option (#26775)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 59737d3b04..df275c2d31 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -164,6 +164,8 @@ void GcodeSuite::M217() {
 }
 
 void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
+  TERN_(MARLIN_SMALL_BUILD, return);
+
   report_heading_etc(forReplay, F(STR_TOOL_CHANGING));
 
   SERIAL_ECHOPGM("  M217");

commit 994aa9f6923e2307d13badd26a15e6d57525955f
Author: plampix <plampix@users.noreply.github.com>
Date:   Fri Jan 5 00:09:53 2024 +0100

    ‚ö°Ô∏è Slimmer null T command (#26615)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 5ef06e4823..59737d3b04 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -25,7 +25,10 @@
 #if HAS_MULTI_EXTRUDER
 
 #include "../gcode.h"
-#include "../../module/tool_change.h"
+
+#if HAS_TOOLCHANGE
+  #include "../../module/tool_change.h"
+#endif
 
 #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
   #include "../../module/motion.h" // for active_extruder
@@ -119,7 +122,7 @@ void GcodeSuite::M217() {
     #endif
   #endif
 
-  #if HAS_Z_AXIS
+  #if HAS_Z_AXIS && HAS_TOOLCHANGE
     if (parser.seenval('Z')) { toolchange_settings.z_raise = parser.value_linear_units(); }
   #endif
 

commit 52693f72afca243ace00a7a57365301f5f8c42c0
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jan 4 13:01:45 2024 -0600

    üé® Clean up some checks & includes

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 908a19fae7..5ef06e4823 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -28,11 +28,9 @@
 #include "../../module/tool_change.h"
 
 #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
-  #include "../../module/motion.h"
+  #include "../../module/motion.h" // for active_extruder
 #endif
 
-#include "../../MarlinCore.h" // for SP_X_STR, etc.
-
 /**
  * M217 - Set toolchange parameters
  *

commit 1f9bfc5c7491d802d242623f8253b1f52c0917a3
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Wed May 10 06:59:25 2023 +1200

    üö∏ Optional X-Axis (#25418)
    
    Co-authored-by: alextrical <35117191+alextrical@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index b360739e21..908a19fae7 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -95,7 +95,9 @@ void GcodeSuite::M217() {
 
   #if ENABLED(TOOLCHANGE_PARK)
     if (parser.seenval('W')) { toolchange_settings.enable_park = parser.value_linear_units(); }
-    if (parser.seenval('X')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.x = constrain(v, X_MIN_POS, X_MAX_POS); }
+    #if HAS_X_AXIS
+      if (parser.seenval('X')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.x = constrain(v, X_MIN_POS, X_MAX_POS); }
+    #endif
     #if HAS_Y_AXIS
       if (parser.seenval('Y')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.y = constrain(v, Y_MIN_POS, Y_MAX_POS); }
     #endif
@@ -183,25 +185,27 @@ void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
     #endif
 
     #if ENABLED(TOOLCHANGE_PARK)
-    {
       SERIAL_ECHOPGM(" W", LINEAR_UNIT(toolchange_settings.enable_park));
-      SERIAL_ECHOPGM_P(
-            SP_X_STR, LINEAR_UNIT(toolchange_settings.change_point.x)
-        #if HAS_Y_AXIS
-          , SP_Y_STR, LINEAR_UNIT(toolchange_settings.change_point.y)
-        #endif
-        #if SECONDARY_AXES >= 1
-          , LIST_N(DOUBLE(SECONDARY_AXES)
-              , SP_I_STR,   I_AXIS_UNIT(toolchange_settings.change_point.i)
-              , SP_J_STR,   J_AXIS_UNIT(toolchange_settings.change_point.j)
-              , SP_K_STR,   K_AXIS_UNIT(toolchange_settings.change_point.k)
-              , SP_C_STR,   U_AXIS_UNIT(toolchange_settings.change_point.u)
-              , PSTR(" H"), V_AXIS_UNIT(toolchange_settings.change_point.v)
-              , PSTR(" O"), W_AXIS_UNIT(toolchange_settings.change_point.w)
-            )
-        #endif
-      );
-    }
+      #if NUM_AXES
+      {
+        SERIAL_ECHOPGM_P(
+          SP_X_STR, LINEAR_UNIT(toolchange_settings.change_point.x)
+          #if HAS_Y_AXIS
+            , SP_Y_STR, LINEAR_UNIT(toolchange_settings.change_point.y)
+          #endif
+          #if SECONDARY_AXES >= 1
+            , LIST_N(DOUBLE(SECONDARY_AXES)
+                , SP_I_STR,   I_AXIS_UNIT(toolchange_settings.change_point.i)
+                , SP_J_STR,   J_AXIS_UNIT(toolchange_settings.change_point.j)
+                , SP_K_STR,   K_AXIS_UNIT(toolchange_settings.change_point.k)
+                , SP_C_STR,   U_AXIS_UNIT(toolchange_settings.change_point.u)
+                , PSTR(" H"), V_AXIS_UNIT(toolchange_settings.change_point.v)
+                , PSTR(" O"), W_AXIS_UNIT(toolchange_settings.change_point.w)
+              )
+          #endif
+        );
+      }
+      #endif
     #endif
 
     #if ENABLED(TOOLCHANGE_FS_PRIME_FIRST_USED)

commit 9e5c143b87e4fc97a875e56aa9ec7d411c36d923
Author: studiodyne <diabolomix@hotmail.fr>
Date:   Sun Aug 28 00:43:32 2022 +0200

    ‚ú® M217 G wipe retract length

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 989e4d0870..b360739e21 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -43,13 +43,14 @@
  *  S[linear]     Swap length
  *  B[linear]     Extra Swap resume length
  *  E[linear]     Extra Prime length (as used by M217 Q)
- *  P[linear/min] Prime speed
+ *  G[linear]     Cutting wipe retract length (<=100mm)
  *  R[linear/min] Retract speed
  *  U[linear/min] UnRetract speed
+ *  P[linear/min] Prime speed
  *  V[linear]     0/1 Enable auto prime first extruder used
  *  W[linear]     0/1 Enable park & Z Raise
  *  X[linear]     Park X (Requires TOOLCHANGE_PARK)
- *  Y[linear]     Park Y (Requires TOOLCHANGE_PARK)
+ *  Y[linear]     Park Y (Requires TOOLCHANGE_PARK and NUM_AXES >= 2)
  *  I[linear]     Park I (Requires TOOLCHANGE_PARK and NUM_AXES >= 4)
  *  J[linear]     Park J (Requires TOOLCHANGE_PARK and NUM_AXES >= 5)
  *  K[linear]     Park K (Requires TOOLCHANGE_PARK and NUM_AXES >= 6)
@@ -79,6 +80,7 @@ void GcodeSuite::M217() {
     if (parser.seenval('B')) { const float v = parser.value_linear_units(); toolchange_settings.extra_resume = constrain(v, -10, 10); }
     if (parser.seenval('E')) { const float v = parser.value_linear_units(); toolchange_settings.extra_prime = constrain(v, 0, max_extrude); }
     if (parser.seenval('P')) { const int16_t v = parser.value_linear_units(); toolchange_settings.prime_speed = constrain(v, 10, 5400); }
+    if (parser.seenval('G')) { const int16_t v = parser.value_linear_units(); toolchange_settings.wipe_retract = constrain(v, 0, 100); }
     if (parser.seenval('R')) { const int16_t v = parser.value_linear_units(); toolchange_settings.retract_speed = constrain(v, 10, 5400); }
     if (parser.seenval('U')) { const int16_t v = parser.value_linear_units(); toolchange_settings.unretract_speed = constrain(v, 10, 5400); }
     #if TOOLCHANGE_FS_FAN >= 0 && HAS_FAN
@@ -164,21 +166,24 @@ void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
   SERIAL_ECHOPGM("  M217");
 
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
-    SERIAL_ECHOPGM(" S", LINEAR_UNIT(toolchange_settings.swap_length));
-    SERIAL_ECHOPGM_P(SP_B_STR, LINEAR_UNIT(toolchange_settings.extra_resume),
-                     SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime),
-                     SP_P_STR, LINEAR_UNIT(toolchange_settings.prime_speed));
-    SERIAL_ECHOPGM(" R", LINEAR_UNIT(toolchange_settings.retract_speed),
-                   " U", LINEAR_UNIT(toolchange_settings.unretract_speed),
-                   " F", toolchange_settings.fan_speed,
-                   " D", toolchange_settings.fan_time);
+    SERIAL_ECHOPGM_P(
+      PSTR(" S"), LINEAR_UNIT(toolchange_settings.swap_length),
+        SP_B_STR, LINEAR_UNIT(toolchange_settings.extra_resume),
+        SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime),
+        SP_P_STR, LINEAR_UNIT(toolchange_settings.prime_speed),
+      PSTR(" G"), LINEAR_UNIT(toolchange_settings.wipe_retract),
+      PSTR(" R"), LINEAR_UNIT(toolchange_settings.retract_speed),
+      PSTR(" U"), LINEAR_UNIT(toolchange_settings.unretract_speed),
+      PSTR(" F"), toolchange_settings.fan_speed,
+      PSTR(" D"), toolchange_settings.fan_time
+    );
 
     #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
-      SERIAL_ECHOPGM(" A", migration.automode);
-      SERIAL_ECHOPGM(" L", LINEAR_UNIT(migration.last));
+      SERIAL_ECHOPGM(" A", migration.automode, " L", LINEAR_UNIT(migration.last));
     #endif
 
     #if ENABLED(TOOLCHANGE_PARK)
+    {
       SERIAL_ECHOPGM(" W", LINEAR_UNIT(toolchange_settings.enable_park));
       SERIAL_ECHOPGM_P(
             SP_X_STR, LINEAR_UNIT(toolchange_settings.change_point.x)
@@ -196,6 +201,7 @@ void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
             )
         #endif
       );
+    }
     #endif
 
     #if ENABLED(TOOLCHANGE_FS_PRIME_FIRST_USED)

commit 6ee34331b7a0e5ea82768f4df5f3956ce5322742
Author: Robert Brenckman <Robbery525@gmail.com>
Date:   Sun Apr 10 01:24:07 2022 -0400

    üêõ Fix Tool Change priming (#21142)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index b8f1aa846b..989e4d0870 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -34,31 +34,31 @@
 #include "../../MarlinCore.h" // for SP_X_STR, etc.
 
 /**
- * M217 - Set SINGLENOZZLE toolchange parameters
+ * M217 - Set toolchange parameters
  *
  *  // Tool change command
  *  Q           Prime active tool and exit
  *
  *  // Tool change settings
- *  S[linear]   Swap length
- *  B[linear]   Extra Swap length
- *  E[linear]   Prime length
- *  P[linear/m] Prime speed
- *  R[linear/m] Retract speed
- *  U[linear/m] UnRetract speed
- *  V[linear]   0/1 Enable auto prime first extruder used
- *  W[linear]   0/1 Enable park & Z Raise
- *  X[linear]   Park X (Requires TOOLCHANGE_PARK)
- *  Y[linear]   Park Y (Requires TOOLCHANGE_PARK)
- *  I[linear]   Park I (Requires TOOLCHANGE_PARK and NUM_AXES >= 4)
- *  J[linear]   Park J (Requires TOOLCHANGE_PARK and NUM_AXES >= 5)
- *  K[linear]   Park K (Requires TOOLCHANGE_PARK and NUM_AXES >= 6)
- *  C[linear]   Park U (Requires TOOLCHANGE_PARK and NUM_AXES >= 7)
- *  H[linear]   Park V (Requires TOOLCHANGE_PARK and NUM_AXES >= 8)
- *  O[linear]   Park W (Requires TOOLCHANGE_PARK and NUM_AXES >= 9)
- *  Z[linear]   Z Raise
- *  F[linear]   Fan Speed 0-255
- *  G[linear/s] Fan time
+ *  S[linear]     Swap length
+ *  B[linear]     Extra Swap resume length
+ *  E[linear]     Extra Prime length (as used by M217 Q)
+ *  P[linear/min] Prime speed
+ *  R[linear/min] Retract speed
+ *  U[linear/min] UnRetract speed
+ *  V[linear]     0/1 Enable auto prime first extruder used
+ *  W[linear]     0/1 Enable park & Z Raise
+ *  X[linear]     Park X (Requires TOOLCHANGE_PARK)
+ *  Y[linear]     Park Y (Requires TOOLCHANGE_PARK)
+ *  I[linear]     Park I (Requires TOOLCHANGE_PARK and NUM_AXES >= 4)
+ *  J[linear]     Park J (Requires TOOLCHANGE_PARK and NUM_AXES >= 5)
+ *  K[linear]     Park K (Requires TOOLCHANGE_PARK and NUM_AXES >= 6)
+ *  C[linear]     Park U (Requires TOOLCHANGE_PARK and NUM_AXES >= 7)
+ *  H[linear]     Park V (Requires TOOLCHANGE_PARK and NUM_AXES >= 8)
+ *  O[linear]     Park W (Requires TOOLCHANGE_PARK and NUM_AXES >= 9)
+ *  Z[linear]     Z Raise
+ *  F[speed]      Fan Speed 0-255
+ *  D[seconds]    Fan time
  *
  * Tool migration settings
  *  A[0|1]      Enable auto-migration on runout
@@ -82,8 +82,8 @@ void GcodeSuite::M217() {
     if (parser.seenval('R')) { const int16_t v = parser.value_linear_units(); toolchange_settings.retract_speed = constrain(v, 10, 5400); }
     if (parser.seenval('U')) { const int16_t v = parser.value_linear_units(); toolchange_settings.unretract_speed = constrain(v, 10, 5400); }
     #if TOOLCHANGE_FS_FAN >= 0 && HAS_FAN
-      if (parser.seenval('F')) { const int16_t v = parser.value_linear_units(); toolchange_settings.fan_speed = constrain(v, 0, 255); }
-      if (parser.seenval('G')) { const int16_t v = parser.value_linear_units(); toolchange_settings.fan_time = constrain(v, 1, 30); }
+      if (parser.seenval('F')) { const uint16_t v = parser.value_ushort(); toolchange_settings.fan_speed = constrain(v, 0, 255); }
+      if (parser.seenval('D')) { const uint16_t v = parser.value_ushort(); toolchange_settings.fan_time = constrain(v, 1, 30); }
     #endif
   #endif
 
@@ -171,7 +171,7 @@ void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
     SERIAL_ECHOPGM(" R", LINEAR_UNIT(toolchange_settings.retract_speed),
                    " U", LINEAR_UNIT(toolchange_settings.unretract_speed),
                    " F", toolchange_settings.fan_speed,
-                   " G", toolchange_settings.fan_time);
+                   " D", toolchange_settings.fan_time);
 
     #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
       SERIAL_ECHOPGM(" A", migration.automode);
@@ -186,13 +186,13 @@ void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
           , SP_Y_STR, LINEAR_UNIT(toolchange_settings.change_point.y)
         #endif
         #if SECONDARY_AXES >= 1
-          , LIST_N(DOUBLE(SECONDARY_AXES),
-              PSTR(" I"), I_AXIS_UNIT(toolchange_settings.change_point.i),
-              PSTR(" J"), J_AXIS_UNIT(toolchange_settings.change_point.j),
-              PSTR(" K"), K_AXIS_UNIT(toolchange_settings.change_point.k),
-              SP_C_STR,   U_AXIS_UNIT(toolchange_settings.change_point.u),
-              PSTR(" H"), V_AXIS_UNIT(toolchange_settings.change_point.v),
-              PSTR(" O"), W_AXIS_UNIT(toolchange_settings.change_point.w)
+          , LIST_N(DOUBLE(SECONDARY_AXES)
+              , SP_I_STR,   I_AXIS_UNIT(toolchange_settings.change_point.i)
+              , SP_J_STR,   J_AXIS_UNIT(toolchange_settings.change_point.j)
+              , SP_K_STR,   K_AXIS_UNIT(toolchange_settings.change_point.k)
+              , SP_C_STR,   U_AXIS_UNIT(toolchange_settings.change_point.u)
+              , PSTR(" H"), V_AXIS_UNIT(toolchange_settings.change_point.v)
+              , PSTR(" O"), W_AXIS_UNIT(toolchange_settings.change_point.w)
             )
         #endif
       );

commit 6567e0e0aa0dc429dcfc65870a7471b55c63f506
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 9 19:17:04 2022 -0500

    üé® Misc. 9-axis cleanup

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index ad96b2b659..b8f1aa846b 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -192,7 +192,7 @@ void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
               PSTR(" K"), K_AXIS_UNIT(toolchange_settings.change_point.k),
               SP_C_STR,   U_AXIS_UNIT(toolchange_settings.change_point.u),
               PSTR(" H"), V_AXIS_UNIT(toolchange_settings.change_point.v),
-              PSTR(" O"), W_AXIS_UNIT(toolchange_settings.change_point.w),
+              PSTR(" O"), W_AXIS_UNIT(toolchange_settings.change_point.w)
             )
         #endif
       );

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 344adc34e3..ad96b2b659 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -50,9 +50,12 @@
  *  W[linear]   0/1 Enable park & Z Raise
  *  X[linear]   Park X (Requires TOOLCHANGE_PARK)
  *  Y[linear]   Park Y (Requires TOOLCHANGE_PARK)
- *  I[linear]   Park I (Requires TOOLCHANGE_PARK and LINEAR_AXES >= 4)
- *  J[linear]   Park J (Requires TOOLCHANGE_PARK and LINEAR_AXES >= 5)
- *  K[linear]   Park K (Requires TOOLCHANGE_PARK and LINEAR_AXES >= 6)
+ *  I[linear]   Park I (Requires TOOLCHANGE_PARK and NUM_AXES >= 4)
+ *  J[linear]   Park J (Requires TOOLCHANGE_PARK and NUM_AXES >= 5)
+ *  K[linear]   Park K (Requires TOOLCHANGE_PARK and NUM_AXES >= 6)
+ *  C[linear]   Park U (Requires TOOLCHANGE_PARK and NUM_AXES >= 7)
+ *  H[linear]   Park V (Requires TOOLCHANGE_PARK and NUM_AXES >= 8)
+ *  O[linear]   Park W (Requires TOOLCHANGE_PARK and NUM_AXES >= 9)
  *  Z[linear]   Z Raise
  *  F[linear]   Fan Speed 0-255
  *  G[linear/s] Fan time
@@ -95,13 +98,22 @@ void GcodeSuite::M217() {
       if (parser.seenval('Y')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.y = constrain(v, Y_MIN_POS, Y_MAX_POS); }
     #endif
     #if HAS_I_AXIS
-      if (parser.seenval('I')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.i = constrain(v, I_MIN_POS, I_MAX_POS); }
+      if (parser.seenval('I')) { const int16_t v = parser.TERN(AXIS4_ROTATES, value_int, value_linear_units)(); toolchange_settings.change_point.i = constrain(v, I_MIN_POS, I_MAX_POS); }
     #endif
     #if HAS_J_AXIS
-      if (parser.seenval('J')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.j = constrain(v, J_MIN_POS, J_MAX_POS); }
+      if (parser.seenval('J')) { const int16_t v = parser.TERN(AXIS5_ROTATES, value_int, value_linear_units)(); toolchange_settings.change_point.j = constrain(v, J_MIN_POS, J_MAX_POS); }
     #endif
     #if HAS_K_AXIS
-      if (parser.seenval('K')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.k = constrain(v, K_MIN_POS, K_MAX_POS); }
+      if (parser.seenval('K')) { const int16_t v = parser.TERN(AXIS6_ROTATES, value_int, value_linear_units)(); toolchange_settings.change_point.k = constrain(v, K_MIN_POS, K_MAX_POS); }
+    #endif
+    #if HAS_U_AXIS
+      if (parser.seenval('C')) { const int16_t v = parser.TERN(AXIS7_ROTATES, value_int, value_linear_units)(); toolchange_settings.change_point.u = constrain(v, U_MIN_POS, U_MAX_POS); }
+    #endif
+    #if HAS_V_AXIS
+      if (parser.seenval('H')) { const int16_t v = parser.TERN(AXIS8_ROTATES, value_int, value_linear_units)(); toolchange_settings.change_point.v = constrain(v, V_MIN_POS, V_MAX_POS); }
+    #endif
+    #if HAS_W_AXIS
+      if (parser.seenval('O')) { const int16_t v = parser.TERN(AXIS9_ROTATES, value_int, value_linear_units)(); toolchange_settings.change_point.w = constrain(v, W_MIN_POS, W_MAX_POS); }
     #endif
   #endif
 
@@ -167,24 +179,23 @@ void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
     #endif
 
     #if ENABLED(TOOLCHANGE_PARK)
-    {
       SERIAL_ECHOPGM(" W", LINEAR_UNIT(toolchange_settings.enable_park));
       SERIAL_ECHOPGM_P(
             SP_X_STR, LINEAR_UNIT(toolchange_settings.change_point.x)
         #if HAS_Y_AXIS
           , SP_Y_STR, LINEAR_UNIT(toolchange_settings.change_point.y)
         #endif
-        #if HAS_I_AXIS
-          , SP_I_STR, LINEAR_UNIT(toolchange_settings.change_point.i)
-        #endif
-        #if HAS_J_AXIS
-          , SP_J_STR, LINEAR_UNIT(toolchange_settings.change_point.j)
-        #endif
-        #if HAS_K_AXIS
-          , SP_K_STR, LINEAR_UNIT(toolchange_settings.change_point.k)
+        #if SECONDARY_AXES >= 1
+          , LIST_N(DOUBLE(SECONDARY_AXES),
+              PSTR(" I"), I_AXIS_UNIT(toolchange_settings.change_point.i),
+              PSTR(" J"), J_AXIS_UNIT(toolchange_settings.change_point.j),
+              PSTR(" K"), K_AXIS_UNIT(toolchange_settings.change_point.k),
+              SP_C_STR,   U_AXIS_UNIT(toolchange_settings.change_point.u),
+              PSTR(" H"), V_AXIS_UNIT(toolchange_settings.change_point.v),
+              PSTR(" O"), W_AXIS_UNIT(toolchange_settings.change_point.w),
+            )
         #endif
       );
-    }
     #endif
 
     #if ENABLED(TOOLCHANGE_FS_PRIME_FIRST_USED)

commit 40481947fc1f11a01235c5c55333a4437fc45c5f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jan 14 03:14:13 2022 -0600

    üßë‚Äçüíª Misc. updates for extra axes (#23521)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 7576272a48..344adc34e3 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -50,6 +50,9 @@
  *  W[linear]   0/1 Enable park & Z Raise
  *  X[linear]   Park X (Requires TOOLCHANGE_PARK)
  *  Y[linear]   Park Y (Requires TOOLCHANGE_PARK)
+ *  I[linear]   Park I (Requires TOOLCHANGE_PARK and LINEAR_AXES >= 4)
+ *  J[linear]   Park J (Requires TOOLCHANGE_PARK and LINEAR_AXES >= 5)
+ *  K[linear]   Park K (Requires TOOLCHANGE_PARK and LINEAR_AXES >= 6)
  *  Z[linear]   Z Raise
  *  F[linear]   Fan Speed 0-255
  *  G[linear/s] Fan time
@@ -88,10 +91,23 @@ void GcodeSuite::M217() {
   #if ENABLED(TOOLCHANGE_PARK)
     if (parser.seenval('W')) { toolchange_settings.enable_park = parser.value_linear_units(); }
     if (parser.seenval('X')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.x = constrain(v, X_MIN_POS, X_MAX_POS); }
-    if (parser.seenval('Y')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.y = constrain(v, Y_MIN_POS, Y_MAX_POS); }
+    #if HAS_Y_AXIS
+      if (parser.seenval('Y')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.y = constrain(v, Y_MIN_POS, Y_MAX_POS); }
+    #endif
+    #if HAS_I_AXIS
+      if (parser.seenval('I')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.i = constrain(v, I_MIN_POS, I_MAX_POS); }
+    #endif
+    #if HAS_J_AXIS
+      if (parser.seenval('J')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.j = constrain(v, J_MIN_POS, J_MAX_POS); }
+    #endif
+    #if HAS_K_AXIS
+      if (parser.seenval('K')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.k = constrain(v, K_MIN_POS, K_MAX_POS); }
+    #endif
   #endif
 
-  if (parser.seenval('Z')) { toolchange_settings.z_raise = parser.value_linear_units(); }
+  #if HAS_Z_AXIS
+    if (parser.seenval('Z')) { toolchange_settings.z_raise = parser.value_linear_units(); }
+  #endif
 
   #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
     migration.target = 0;       // 0 = disabled
@@ -151,9 +167,24 @@ void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
     #endif
 
     #if ENABLED(TOOLCHANGE_PARK)
+    {
       SERIAL_ECHOPGM(" W", LINEAR_UNIT(toolchange_settings.enable_park));
-      SERIAL_ECHOPGM_P(SP_X_STR, LINEAR_UNIT(toolchange_settings.change_point.x));
-      SERIAL_ECHOPGM_P(SP_Y_STR, LINEAR_UNIT(toolchange_settings.change_point.y));
+      SERIAL_ECHOPGM_P(
+            SP_X_STR, LINEAR_UNIT(toolchange_settings.change_point.x)
+        #if HAS_Y_AXIS
+          , SP_Y_STR, LINEAR_UNIT(toolchange_settings.change_point.y)
+        #endif
+        #if HAS_I_AXIS
+          , SP_I_STR, LINEAR_UNIT(toolchange_settings.change_point.i)
+        #endif
+        #if HAS_J_AXIS
+          , SP_J_STR, LINEAR_UNIT(toolchange_settings.change_point.j)
+        #endif
+        #if HAS_K_AXIS
+          , SP_K_STR, LINEAR_UNIT(toolchange_settings.change_point.k)
+        #endif
+      );
+    }
     #endif
 
     #if ENABLED(TOOLCHANGE_FS_PRIME_FIRST_USED)

commit d7fede3a6324cd6b1ec91a9c8e248fce8f0d7cf2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 27 13:40:01 2021 -0500

    üé® Apply F() to G-code report header

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 1299259b53..7576272a48 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -131,7 +131,7 @@ void GcodeSuite::M217() {
 }
 
 void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
-  report_heading_etc(forReplay, PSTR(STR_TOOL_CHANGING));
+  report_heading_etc(forReplay, F(STR_TOOL_CHANGING));
 
   SERIAL_ECHOPGM("  M217");
 

commit 520b97083e52efdd47ab434b97823e48d85ade62
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 27 11:03:07 2021 -0500

    üé® Apply F() to serial macros

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 923a27d7df..1299259b53 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -138,8 +138,8 @@ void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
     SERIAL_ECHOPGM(" S", LINEAR_UNIT(toolchange_settings.swap_length));
     SERIAL_ECHOPGM_P(SP_B_STR, LINEAR_UNIT(toolchange_settings.extra_resume),
-                      SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime),
-                      SP_P_STR, LINEAR_UNIT(toolchange_settings.prime_speed));
+                     SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime),
+                     SP_P_STR, LINEAR_UNIT(toolchange_settings.prime_speed));
     SERIAL_ECHOPGM(" R", LINEAR_UNIT(toolchange_settings.retract_speed),
                    " U", LINEAR_UNIT(toolchange_settings.unretract_speed),
                    " F", toolchange_settings.fan_speed,

commit dc5bef62ba185461ba969db6af996ebc93a33ba7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 23 10:01:37 2021 -0500

    üé® Various multi-axis patches (#22823)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 11d8c43ef0..923a27d7df 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -141,9 +141,9 @@ void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
                       SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime),
                       SP_P_STR, LINEAR_UNIT(toolchange_settings.prime_speed));
     SERIAL_ECHOPGM(" R", LINEAR_UNIT(toolchange_settings.retract_speed),
-                    " U", LINEAR_UNIT(toolchange_settings.unretract_speed),
-                    " F", toolchange_settings.fan_speed,
-                    " G", toolchange_settings.fan_time);
+                   " U", LINEAR_UNIT(toolchange_settings.unretract_speed),
+                   " F", toolchange_settings.fan_speed,
+                   " G", toolchange_settings.fan_time);
 
     #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
       SERIAL_ECHOPGM(" A", migration.automode);

commit 754b31918a73cb08c322102be5d3926d2ac59c18
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 9 04:57:05 2021 -0500

    üé® Fewer serial macros

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 72b7d16ac0..11d8c43ef0 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -136,33 +136,33 @@ void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
   SERIAL_ECHOPGM("  M217");
 
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
-    SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length));
-    SERIAL_ECHOPAIR_P(SP_B_STR, LINEAR_UNIT(toolchange_settings.extra_resume),
+    SERIAL_ECHOPGM(" S", LINEAR_UNIT(toolchange_settings.swap_length));
+    SERIAL_ECHOPGM_P(SP_B_STR, LINEAR_UNIT(toolchange_settings.extra_resume),
                       SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime),
                       SP_P_STR, LINEAR_UNIT(toolchange_settings.prime_speed));
-    SERIAL_ECHOPAIR(" R", LINEAR_UNIT(toolchange_settings.retract_speed),
+    SERIAL_ECHOPGM(" R", LINEAR_UNIT(toolchange_settings.retract_speed),
                     " U", LINEAR_UNIT(toolchange_settings.unretract_speed),
                     " F", toolchange_settings.fan_speed,
                     " G", toolchange_settings.fan_time);
 
     #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
-      SERIAL_ECHOPAIR(" A", migration.automode);
-      SERIAL_ECHOPAIR(" L", LINEAR_UNIT(migration.last));
+      SERIAL_ECHOPGM(" A", migration.automode);
+      SERIAL_ECHOPGM(" L", LINEAR_UNIT(migration.last));
     #endif
 
     #if ENABLED(TOOLCHANGE_PARK)
-      SERIAL_ECHOPAIR(" W", LINEAR_UNIT(toolchange_settings.enable_park));
-      SERIAL_ECHOPAIR_P(SP_X_STR, LINEAR_UNIT(toolchange_settings.change_point.x));
-      SERIAL_ECHOPAIR_P(SP_Y_STR, LINEAR_UNIT(toolchange_settings.change_point.y));
+      SERIAL_ECHOPGM(" W", LINEAR_UNIT(toolchange_settings.enable_park));
+      SERIAL_ECHOPGM_P(SP_X_STR, LINEAR_UNIT(toolchange_settings.change_point.x));
+      SERIAL_ECHOPGM_P(SP_Y_STR, LINEAR_UNIT(toolchange_settings.change_point.y));
     #endif
 
     #if ENABLED(TOOLCHANGE_FS_PRIME_FIRST_USED)
-      SERIAL_ECHOPAIR(" V", LINEAR_UNIT(enable_first_prime));
+      SERIAL_ECHOPGM(" V", LINEAR_UNIT(enable_first_prime));
     #endif
 
   #endif
 
-  SERIAL_ECHOLNPAIR_P(SP_Z_STR, LINEAR_UNIT(toolchange_settings.z_raise));
+  SERIAL_ECHOLNPGM_P(SP_Z_STR, LINEAR_UNIT(toolchange_settings.z_raise));
 }
 
 #endif // HAS_MULTI_EXTRUDER

commit 79c72ed821564507b0ef46cbb26f9577585e2ccc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 7 18:06:10 2021 -0500

    üé® Standardize G-code reporting

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 2035ae55ab..72b7d16ac0 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -33,44 +33,6 @@
 
 #include "../../MarlinCore.h" // for SP_X_STR, etc.
 
-void M217_report(const bool eeprom=false) {
-
-  #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
-    SERIAL_ECHOPGM_P(eeprom ? PSTR("  M217") : PSTR("Toolchange:"));
-    SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length));
-    SERIAL_ECHOPAIR_P(SP_B_STR, LINEAR_UNIT(toolchange_settings.extra_resume),
-                      SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime),
-                      SP_P_STR, LINEAR_UNIT(toolchange_settings.prime_speed));
-    SERIAL_ECHOPAIR(" R", LINEAR_UNIT(toolchange_settings.retract_speed),
-                    " U", LINEAR_UNIT(toolchange_settings.unretract_speed),
-                    " F", toolchange_settings.fan_speed,
-                    " G", toolchange_settings.fan_time);
-
-    #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
-      SERIAL_ECHOPAIR(" A", migration.automode);
-      SERIAL_ECHOPAIR(" L", LINEAR_UNIT(migration.last));
-    #endif
-
-    #if ENABLED(TOOLCHANGE_PARK)
-      SERIAL_ECHOPAIR(" W", LINEAR_UNIT(toolchange_settings.enable_park));
-      SERIAL_ECHOPAIR_P(SP_X_STR, LINEAR_UNIT(toolchange_settings.change_point.x));
-      SERIAL_ECHOPAIR_P(SP_Y_STR, LINEAR_UNIT(toolchange_settings.change_point.y));
-    #endif
-
-    #if ENABLED(TOOLCHANGE_FS_PRIME_FIRST_USED)
-      SERIAL_ECHOPAIR(" V", LINEAR_UNIT(enable_first_prime));
-    #endif
-
-  #else
-
-    UNUSED(eeprom);
-
-  #endif
-
-  SERIAL_ECHOPAIR_P(SP_Z_STR, LINEAR_UNIT(toolchange_settings.z_raise));
-  SERIAL_EOL();
-}
-
 /**
  * M217 - Set SINGLENOZZLE toolchange parameters
  *
@@ -168,4 +130,39 @@ void GcodeSuite::M217() {
   M217_report();
 }
 
+void GcodeSuite::M217_report(const bool forReplay/*=true*/) {
+  report_heading_etc(forReplay, PSTR(STR_TOOL_CHANGING));
+
+  SERIAL_ECHOPGM("  M217");
+
+  #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
+    SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length));
+    SERIAL_ECHOPAIR_P(SP_B_STR, LINEAR_UNIT(toolchange_settings.extra_resume),
+                      SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime),
+                      SP_P_STR, LINEAR_UNIT(toolchange_settings.prime_speed));
+    SERIAL_ECHOPAIR(" R", LINEAR_UNIT(toolchange_settings.retract_speed),
+                    " U", LINEAR_UNIT(toolchange_settings.unretract_speed),
+                    " F", toolchange_settings.fan_speed,
+                    " G", toolchange_settings.fan_time);
+
+    #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
+      SERIAL_ECHOPAIR(" A", migration.automode);
+      SERIAL_ECHOPAIR(" L", LINEAR_UNIT(migration.last));
+    #endif
+
+    #if ENABLED(TOOLCHANGE_PARK)
+      SERIAL_ECHOPAIR(" W", LINEAR_UNIT(toolchange_settings.enable_park));
+      SERIAL_ECHOPAIR_P(SP_X_STR, LINEAR_UNIT(toolchange_settings.change_point.x));
+      SERIAL_ECHOPAIR_P(SP_Y_STR, LINEAR_UNIT(toolchange_settings.change_point.y));
+    #endif
+
+    #if ENABLED(TOOLCHANGE_FS_PRIME_FIRST_USED)
+      SERIAL_ECHOPAIR(" V", LINEAR_UNIT(enable_first_prime));
+    #endif
+
+  #endif
+
+  SERIAL_ECHOLNPAIR_P(SP_Z_STR, LINEAR_UNIT(toolchange_settings.z_raise));
+}
+
 #endif // HAS_MULTI_EXTRUDER

commit dd42831cba7334c5d106ba435bdb41b6135971bb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Feb 28 19:43:46 2021 -0600

    Serial macros cleanup

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index ebe1dbc03c..2035ae55ab 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -36,7 +36,7 @@
 void M217_report(const bool eeprom=false) {
 
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
-    serialprintPGM(eeprom ? PSTR("  M217") : PSTR("Toolchange:"));
+    SERIAL_ECHOPGM_P(eeprom ? PSTR("  M217") : PSTR("Toolchange:"));
     SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length));
     SERIAL_ECHOPAIR_P(SP_B_STR, LINEAR_UNIT(toolchange_settings.extra_resume),
                       SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime),

commit e7c711996bd3080f5e343eff5556736cbf2e2416
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Mon Feb 8 07:37:24 2021 +0100

    Serial refactor. Default 8-bit ECHO to int, not char (#20985)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index f2fefb5756..ebe1dbc03c 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -47,7 +47,7 @@ void M217_report(const bool eeprom=false) {
                     " G", toolchange_settings.fan_time);
 
     #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
-      SERIAL_ECHOPAIR(" A", int(migration.automode));
+      SERIAL_ECHOPAIR(" A", migration.automode);
       SERIAL_ECHOPAIR(" L", LINEAR_UNIT(migration.last));
     #endif
 

commit d33fe2378c25d258b02440aef6cc31e36753f98f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jan 22 15:01:19 2021 -0600

    Move common strings (#20846)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index b57dec31f3..f2fefb5756 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -33,8 +33,6 @@
 
 #include "../../MarlinCore.h" // for SP_X_STR, etc.
 
-extern const char SP_X_STR[], SP_Y_STR[], SP_Z_STR[];
-
 void M217_report(const bool eeprom=false) {
 
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)

commit 76d8d1742c1d4a1efe0fd6c0645d3fc656bfd0b2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 20 18:29:08 2020 -0500

    Add multi-extruder condition

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 0d049ede16..b57dec31f3 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -22,7 +22,7 @@
 
 #include "../../inc/MarlinConfigPre.h"
 
-#if EXTRUDERS > 1
+#if HAS_MULTI_EXTRUDER
 
 #include "../gcode.h"
 #include "../../module/tool_change.h"
@@ -170,4 +170,4 @@ void GcodeSuite::M217() {
   M217_report();
 }
 
-#endif // EXTRUDERS > 1
+#endif // HAS_MULTI_EXTRUDER

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index a87f23e3b9..0d049ede16 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit dc6d8357a681cc99e04c5980c0ac66009c173e85
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Jun 27 23:27:28 2020 -0500

    Reduce string duplication

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index a3a9d7b0aa..a87f23e3b9 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -39,9 +39,9 @@ void M217_report(const bool eeprom=false) {
 
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
     serialprintPGM(eeprom ? PSTR("  M217") : PSTR("Toolchange:"));
-    SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length),
-                    " B", LINEAR_UNIT(toolchange_settings.extra_resume));
-    SERIAL_ECHOPAIR_P(SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime),
+    SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length));
+    SERIAL_ECHOPAIR_P(SP_B_STR, LINEAR_UNIT(toolchange_settings.extra_resume),
+                      SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime),
                       SP_P_STR, LINEAR_UNIT(toolchange_settings.prime_speed));
     SERIAL_ECHOPAIR(" R", LINEAR_UNIT(toolchange_settings.retract_speed),
                     " U", LINEAR_UNIT(toolchange_settings.unretract_speed),

commit c1dcc56a0b5bc110289ac9c4aeefa8263c5174d4
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sat Jun 27 22:57:01 2020 -0400

    Tool Change Migration fixes and debugging (#18448)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index a1e53e5ecb..a3a9d7b0aa 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -49,7 +49,7 @@ void M217_report(const bool eeprom=false) {
                     " G", toolchange_settings.fan_time);
 
     #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
-      SERIAL_ECHOPAIR(" N", int(migration.automode));
+      SERIAL_ECHOPAIR(" A", int(migration.automode));
       SERIAL_ECHOPAIR(" L", LINEAR_UNIT(migration.last));
     #endif
 

commit 8b3c7dda755ebce5bd57a7ce52891a137ea12b35
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 27 04:41:18 2020 -0500

    Add HAS_FAN and others

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 6e8c899fb0..a1e53e5ecb 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -115,7 +115,7 @@ void GcodeSuite::M217() {
     if (parser.seenval('P')) { const int16_t v = parser.value_linear_units(); toolchange_settings.prime_speed = constrain(v, 10, 5400); }
     if (parser.seenval('R')) { const int16_t v = parser.value_linear_units(); toolchange_settings.retract_speed = constrain(v, 10, 5400); }
     if (parser.seenval('U')) { const int16_t v = parser.value_linear_units(); toolchange_settings.unretract_speed = constrain(v, 10, 5400); }
-    #if TOOLCHANGE_FS_FAN >= 0 && FAN_COUNT > 0
+    #if TOOLCHANGE_FS_FAN >= 0 && HAS_FAN
       if (parser.seenval('F')) { const int16_t v = parser.value_linear_units(); toolchange_settings.fan_speed = constrain(v, 0, 255); }
       if (parser.seenval('G')) { const int16_t v = parser.value_linear_units(); toolchange_settings.fan_time = constrain(v, 1, 30); }
     #endif

commit 2f6262c27b11598293839f6d46f3b340ee6a1f4c
Author: studiodyne <42887851+studiodyne@users.noreply.github.com>
Date:   Thu Apr 23 04:03:28 2020 +0200

    Automatic Tool Migration feature (#17248)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 44e69c4298..6e8c899fb0 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -27,6 +27,10 @@
 #include "../gcode.h"
 #include "../../module/tool_change.h"
 
+#if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
+  #include "../../module/motion.h"
+#endif
+
 #include "../../MarlinCore.h" // for SP_X_STR, etc.
 
 extern const char SP_X_STR[], SP_Y_STR[], SP_Z_STR[];
@@ -35,16 +39,30 @@ void M217_report(const bool eeprom=false) {
 
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
     serialprintPGM(eeprom ? PSTR("  M217") : PSTR("Toolchange:"));
-    SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length));
-    SERIAL_ECHOPAIR_P(SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime));
-    SERIAL_ECHOPAIR_P(SP_P_STR, LINEAR_UNIT(toolchange_settings.prime_speed));
-    SERIAL_ECHOPAIR(" R", LINEAR_UNIT(toolchange_settings.retract_speed));
+    SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length),
+                    " B", LINEAR_UNIT(toolchange_settings.extra_resume));
+    SERIAL_ECHOPAIR_P(SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime),
+                      SP_P_STR, LINEAR_UNIT(toolchange_settings.prime_speed));
+    SERIAL_ECHOPAIR(" R", LINEAR_UNIT(toolchange_settings.retract_speed),
+                    " U", LINEAR_UNIT(toolchange_settings.unretract_speed),
+                    " F", toolchange_settings.fan_speed,
+                    " G", toolchange_settings.fan_time);
+
+    #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
+      SERIAL_ECHOPAIR(" N", int(migration.automode));
+      SERIAL_ECHOPAIR(" L", LINEAR_UNIT(migration.last));
+    #endif
 
     #if ENABLED(TOOLCHANGE_PARK)
+      SERIAL_ECHOPAIR(" W", LINEAR_UNIT(toolchange_settings.enable_park));
       SERIAL_ECHOPAIR_P(SP_X_STR, LINEAR_UNIT(toolchange_settings.change_point.x));
       SERIAL_ECHOPAIR_P(SP_Y_STR, LINEAR_UNIT(toolchange_settings.change_point.y));
     #endif
 
+    #if ENABLED(TOOLCHANGE_FS_PRIME_FIRST_USED)
+      SERIAL_ECHOPAIR(" V", LINEAR_UNIT(enable_first_prime));
+    #endif
+
   #else
 
     UNUSED(eeprom);
@@ -58,48 +76,98 @@ void M217_report(const bool eeprom=false) {
 /**
  * M217 - Set SINGLENOZZLE toolchange parameters
  *
+ *  // Tool change command
+ *  Q           Prime active tool and exit
+ *
+ *  // Tool change settings
  *  S[linear]   Swap length
- *  E[linear]   Purge length
+ *  B[linear]   Extra Swap length
+ *  E[linear]   Prime length
  *  P[linear/m] Prime speed
  *  R[linear/m] Retract speed
+ *  U[linear/m] UnRetract speed
+ *  V[linear]   0/1 Enable auto prime first extruder used
+ *  W[linear]   0/1 Enable park & Z Raise
  *  X[linear]   Park X (Requires TOOLCHANGE_PARK)
  *  Y[linear]   Park Y (Requires TOOLCHANGE_PARK)
  *  Z[linear]   Z Raise
+ *  F[linear]   Fan Speed 0-255
+ *  G[linear/s] Fan time
+ *
+ * Tool migration settings
+ *  A[0|1]      Enable auto-migration on runout
+ *  L[index]    Last extruder to use for auto-migration
+ *
+ * Tool migration command
+ *  T[index]    Migrate to next extruder or the given extruder
  */
 void GcodeSuite::M217() {
 
-  #define SPR_PARAM
-  #define XY_PARAM
-
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
 
-    #undef SPR_PARAM
-    #define SPR_PARAM "SPRE"
+    static constexpr float max_extrude = TERN(PREVENT_LENGTHY_EXTRUDE, EXTRUDE_MAXLENGTH, 500);
 
-    static constexpr float max_extrude =
-      #if ENABLED(PREVENT_LENGTHY_EXTRUDE)
-        EXTRUDE_MAXLENGTH
-      #else
-        500
-      #endif
-    ;
+    if (parser.seen('Q')) { tool_change_prime(); return; }
 
     if (parser.seenval('S')) { const float v = parser.value_linear_units(); toolchange_settings.swap_length = constrain(v, 0, max_extrude); }
+    if (parser.seenval('B')) { const float v = parser.value_linear_units(); toolchange_settings.extra_resume = constrain(v, -10, 10); }
     if (parser.seenval('E')) { const float v = parser.value_linear_units(); toolchange_settings.extra_prime = constrain(v, 0, max_extrude); }
     if (parser.seenval('P')) { const int16_t v = parser.value_linear_units(); toolchange_settings.prime_speed = constrain(v, 10, 5400); }
     if (parser.seenval('R')) { const int16_t v = parser.value_linear_units(); toolchange_settings.retract_speed = constrain(v, 10, 5400); }
+    if (parser.seenval('U')) { const int16_t v = parser.value_linear_units(); toolchange_settings.unretract_speed = constrain(v, 10, 5400); }
+    #if TOOLCHANGE_FS_FAN >= 0 && FAN_COUNT > 0
+      if (parser.seenval('F')) { const int16_t v = parser.value_linear_units(); toolchange_settings.fan_speed = constrain(v, 0, 255); }
+      if (parser.seenval('G')) { const int16_t v = parser.value_linear_units(); toolchange_settings.fan_time = constrain(v, 1, 30); }
+    #endif
+  #endif
+
+  #if ENABLED(TOOLCHANGE_FS_PRIME_FIRST_USED)
+    if (parser.seenval('V')) { enable_first_prime = parser.value_linear_units(); }
   #endif
 
   #if ENABLED(TOOLCHANGE_PARK)
-    #undef XY_PARAM
-    #define XY_PARAM "XY"
-    if (parser.seenval('X')) { toolchange_settings.change_point.x = parser.value_linear_units(); }
-    if (parser.seenval('Y')) { toolchange_settings.change_point.y = parser.value_linear_units(); }
+    if (parser.seenval('W')) { toolchange_settings.enable_park = parser.value_linear_units(); }
+    if (parser.seenval('X')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.x = constrain(v, X_MIN_POS, X_MAX_POS); }
+    if (parser.seenval('Y')) { const int16_t v = parser.value_linear_units(); toolchange_settings.change_point.y = constrain(v, Y_MIN_POS, Y_MAX_POS); }
   #endif
 
   if (parser.seenval('Z')) { toolchange_settings.z_raise = parser.value_linear_units(); }
 
-  if (!parser.seen(SPR_PARAM XY_PARAM "Z")) M217_report();
+  #if ENABLED(TOOLCHANGE_MIGRATION_FEATURE)
+    migration.target = 0;       // 0 = disabled
+
+    if (parser.seenval('L')) {  // Last
+      const int16_t lval = parser.value_int();
+      if (WITHIN(lval, 0, EXTRUDERS - 1)) {
+        migration.last = lval;
+        migration.automode = (active_extruder < migration.last);
+      }
+    }
+
+    if (parser.seen('A'))       // Auto on/off
+      migration.automode = parser.value_bool();
+
+    if (parser.seen('T')) {     // Migrate now
+      if (parser.has_value()) {
+        const int16_t tval = parser.value_int();
+        if (WITHIN(tval, 0, EXTRUDERS - 1) && tval != active_extruder) {
+          migration.target = tval + 1;
+          extruder_migration();
+          migration.target = 0; // disable
+          return;
+        }
+        else
+          migration.target = 0; // disable
+      }
+      else {
+        extruder_migration();
+        return;
+      }
+    }
+
+  #endif
+
+  M217_report();
 }
 
 #endif // EXTRUDERS > 1

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index d14ceaa0e5..44e69c4298 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit 0e72c315a0be49e98758d9744ac0117b0904b7e1
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Feb 1 17:05:42 2020 -0600

    Minor string storage optimization

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 57178950cb..d14ceaa0e5 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -37,7 +37,7 @@ void M217_report(const bool eeprom=false) {
     serialprintPGM(eeprom ? PSTR("  M217") : PSTR("Toolchange:"));
     SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length));
     SERIAL_ECHOPAIR_P(SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime));
-    SERIAL_ECHOPAIR(" P", LINEAR_UNIT(toolchange_settings.prime_speed));
+    SERIAL_ECHOPAIR_P(SP_P_STR, LINEAR_UNIT(toolchange_settings.prime_speed));
     SERIAL_ECHOPAIR(" R", LINEAR_UNIT(toolchange_settings.retract_speed));
 
     #if ENABLED(TOOLCHANGE_PARK)

commit d0e1166cce60381fbdad1105d13765806a525d99
Author: Dirk O. Kaar <19971886+dok-net@users.noreply.github.com>
Date:   Fri Jan 3 02:01:38 2020 +0100

    Fix Visual Micro "Arduino IDE for Visual Studio" support (#16418)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 3fe3feb0de..57178950cb 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -27,7 +27,7 @@
 #include "../gcode.h"
 #include "../../module/tool_change.h"
 
-#include "../../Marlin.h" // for SP_X_STR, etc.
+#include "../../MarlinCore.h" // for SP_X_STR, etc.
 
 extern const char SP_X_STR[], SP_Y_STR[], SP_Z_STR[];
 

commit f83bc0aa13e8cf2d92ec138576cc3a620e74a982
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Nov 29 04:45:07 2019 -0600

    Optimize common strings
    
    Saves 128 bytes in testing with `mftest mega 1 -y`

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index ade8c280f7..3fe3feb0de 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -27,18 +27,22 @@
 #include "../gcode.h"
 #include "../../module/tool_change.h"
 
+#include "../../Marlin.h" // for SP_X_STR, etc.
+
+extern const char SP_X_STR[], SP_Y_STR[], SP_Z_STR[];
+
 void M217_report(const bool eeprom=false) {
 
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
     serialprintPGM(eeprom ? PSTR("  M217") : PSTR("Toolchange:"));
     SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length));
-    SERIAL_ECHOPAIR(" E", LINEAR_UNIT(toolchange_settings.extra_prime));
+    SERIAL_ECHOPAIR_P(SP_E_STR, LINEAR_UNIT(toolchange_settings.extra_prime));
     SERIAL_ECHOPAIR(" P", LINEAR_UNIT(toolchange_settings.prime_speed));
     SERIAL_ECHOPAIR(" R", LINEAR_UNIT(toolchange_settings.retract_speed));
 
     #if ENABLED(TOOLCHANGE_PARK)
-      SERIAL_ECHOPAIR(" X", LINEAR_UNIT(toolchange_settings.change_point.x));
-      SERIAL_ECHOPAIR(" Y", LINEAR_UNIT(toolchange_settings.change_point.y));
+      SERIAL_ECHOPAIR_P(SP_X_STR, LINEAR_UNIT(toolchange_settings.change_point.x));
+      SERIAL_ECHOPAIR_P(SP_Y_STR, LINEAR_UNIT(toolchange_settings.change_point.y));
     #endif
 
   #else
@@ -47,7 +51,7 @@ void M217_report(const bool eeprom=false) {
 
   #endif
 
-  SERIAL_ECHOPAIR(" Z", LINEAR_UNIT(toolchange_settings.z_raise));
+  SERIAL_ECHOPAIR_P(SP_Z_STR, LINEAR_UNIT(toolchange_settings.z_raise));
   SERIAL_EOL();
 }
 

commit ce02c6cee2bf17590d929d078d71cc37f67e00d1
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Jul 14 12:40:58 2019 -0400

    Variable tool change purge (#14618)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index e337992ab0..ade8c280f7 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -32,6 +32,7 @@ void M217_report(const bool eeprom=false) {
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
     serialprintPGM(eeprom ? PSTR("  M217") : PSTR("Toolchange:"));
     SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length));
+    SERIAL_ECHOPAIR(" E", LINEAR_UNIT(toolchange_settings.extra_prime));
     SERIAL_ECHOPAIR(" P", LINEAR_UNIT(toolchange_settings.prime_speed));
     SERIAL_ECHOPAIR(" R", LINEAR_UNIT(toolchange_settings.retract_speed));
 
@@ -54,6 +55,7 @@ void M217_report(const bool eeprom=false) {
  * M217 - Set SINGLENOZZLE toolchange parameters
  *
  *  S[linear]   Swap length
+ *  E[linear]   Purge length
  *  P[linear/m] Prime speed
  *  R[linear/m] Retract speed
  *  X[linear]   Park X (Requires TOOLCHANGE_PARK)
@@ -68,18 +70,29 @@ void GcodeSuite::M217() {
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
 
     #undef SPR_PARAM
-    #define SPR_PARAM "SPR"
-
-    if (parser.seenval('S')) { const float v = parser.value_linear_units(); toolchange_settings.swap_length = constrain(v, 0, 500); }
+    #define SPR_PARAM "SPRE"
+
+    static constexpr float max_extrude =
+      #if ENABLED(PREVENT_LENGTHY_EXTRUDE)
+        EXTRUDE_MAXLENGTH
+      #else
+        500
+      #endif
+    ;
+
+    if (parser.seenval('S')) { const float v = parser.value_linear_units(); toolchange_settings.swap_length = constrain(v, 0, max_extrude); }
+    if (parser.seenval('E')) { const float v = parser.value_linear_units(); toolchange_settings.extra_prime = constrain(v, 0, max_extrude); }
     if (parser.seenval('P')) { const int16_t v = parser.value_linear_units(); toolchange_settings.prime_speed = constrain(v, 10, 5400); }
     if (parser.seenval('R')) { const int16_t v = parser.value_linear_units(); toolchange_settings.retract_speed = constrain(v, 10, 5400); }
   #endif
+
   #if ENABLED(TOOLCHANGE_PARK)
     #undef XY_PARAM
     #define XY_PARAM "XY"
     if (parser.seenval('X')) { toolchange_settings.change_point.x = parser.value_linear_units(); }
     if (parser.seenval('Y')) { toolchange_settings.change_point.y = parser.value_linear_units(); }
   #endif
+
   if (parser.seenval('Z')) { toolchange_settings.z_raise = parser.value_linear_units(); }
 
   if (!parser.seen(SPR_PARAM XY_PARAM "Z")) M217_report();

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 89ae9b6eeb..e337992ab0 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit 5e38d706978cdc93e25540d91dd48642bd6490f1
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 8 18:17:14 2019 -0500

    Fix M217 report label, general cleanup

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 31271ba2ca..89ae9b6eeb 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -30,7 +30,7 @@
 void M217_report(const bool eeprom=false) {
 
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
-    serialprintPGM(eeprom ? PSTR("  M217") : PSTR("Singlenozzle:"));
+    serialprintPGM(eeprom ? PSTR("  M217") : PSTR("Toolchange:"));
     SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length));
     SERIAL_ECHOPAIR(" P", LINEAR_UNIT(toolchange_settings.prime_speed));
     SERIAL_ECHOPAIR(" R", LINEAR_UNIT(toolchange_settings.retract_speed));

commit 3f36a385120fd3db0b2f6ba76cfbd8d235ead6ee
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 3 01:49:21 2019 -0600

    Clean up some pre-serial-redirect includes

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index bcdaf4e687..31271ba2ca 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -27,10 +27,6 @@
 #include "../gcode.h"
 #include "../../module/tool_change.h"
 
-#if NUM_SERIAL > 1
-  #include "../../gcode/queue.h"
-#endif
-
 void M217_report(const bool eeprom=false) {
 
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)

commit e15354e387cc825390fc4eaaf3ae4b784a8fd588
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 23 22:53:01 2019 -0600

    Simplify serial port redirect (#13234)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 23bbcf54c2..bcdaf4e687 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -33,19 +33,15 @@
 
 void M217_report(const bool eeprom=false) {
 
-  #if NUM_SERIAL > 1
-    const int16_t port = command_queue_port[cmd_queue_index_r];
-  #endif
-
   #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
-    serialprintPGM_P(port, eeprom ? PSTR("  M217") : PSTR("Singlenozzle:"));
-    SERIAL_ECHOPAIR_P(port, " S", LINEAR_UNIT(toolchange_settings.swap_length));
-    SERIAL_ECHOPAIR_P(port, " P", LINEAR_UNIT(toolchange_settings.prime_speed));
-    SERIAL_ECHOPAIR_P(port, " R", LINEAR_UNIT(toolchange_settings.retract_speed));
+    serialprintPGM(eeprom ? PSTR("  M217") : PSTR("Singlenozzle:"));
+    SERIAL_ECHOPAIR(" S", LINEAR_UNIT(toolchange_settings.swap_length));
+    SERIAL_ECHOPAIR(" P", LINEAR_UNIT(toolchange_settings.prime_speed));
+    SERIAL_ECHOPAIR(" R", LINEAR_UNIT(toolchange_settings.retract_speed));
 
     #if ENABLED(TOOLCHANGE_PARK)
-      SERIAL_ECHOPAIR_P(port, " X", LINEAR_UNIT(toolchange_settings.change_point.x));
-      SERIAL_ECHOPAIR_P(port, " Y", LINEAR_UNIT(toolchange_settings.change_point.y));
+      SERIAL_ECHOPAIR(" X", LINEAR_UNIT(toolchange_settings.change_point.x));
+      SERIAL_ECHOPAIR(" Y", LINEAR_UNIT(toolchange_settings.change_point.y));
     #endif
 
   #else
@@ -54,7 +50,7 @@ void M217_report(const bool eeprom=false) {
 
   #endif
 
-  SERIAL_ECHOPAIR_P(port, " Z", LINEAR_UNIT(toolchange_settings.z_raise));
+  SERIAL_ECHOPAIR(" Z", LINEAR_UNIT(toolchange_settings.z_raise));
   SERIAL_EOL();
 }
 

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index f23b9550f9..23bbcf54c2 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm

commit 5b24ce9024b77eb1b9650cacb2339bcaba9c1d42
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Nov 26 16:51:57 2018 -0600

    Hide M217 compile warning

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index c9e2c56a5f..f23b9550f9 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -48,6 +48,10 @@ void M217_report(const bool eeprom=false) {
       SERIAL_ECHOPAIR_P(port, " Y", LINEAR_UNIT(toolchange_settings.change_point.y));
     #endif
 
+  #else
+
+    UNUSED(eeprom);
+
   #endif
 
   SERIAL_ECHOPAIR_P(port, " Z", LINEAR_UNIT(toolchange_settings.z_raise));

commit 6471a75a228d8d60416f7b405e888064e7e8c8da
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Tue Nov 6 22:52:20 2018 -0500

    Combine more tool-change variables (#12137)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 15d79da0ab..c9e2c56a5f 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -37,13 +37,13 @@ void M217_report(const bool eeprom=false) {
     const int16_t port = command_queue_port[cmd_queue_index_r];
   #endif
 
-  #if ENABLED(SINGLENOZZLE)
+  #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
     serialprintPGM_P(port, eeprom ? PSTR("  M217") : PSTR("Singlenozzle:"));
     SERIAL_ECHOPAIR_P(port, " S", LINEAR_UNIT(toolchange_settings.swap_length));
     SERIAL_ECHOPAIR_P(port, " P", LINEAR_UNIT(toolchange_settings.prime_speed));
     SERIAL_ECHOPAIR_P(port, " R", LINEAR_UNIT(toolchange_settings.retract_speed));
 
-    #if ENABLED(SINGLENOZZLE_SWAP_PARK)
+    #if ENABLED(TOOLCHANGE_PARK)
       SERIAL_ECHOPAIR_P(port, " X", LINEAR_UNIT(toolchange_settings.change_point.x));
       SERIAL_ECHOPAIR_P(port, " Y", LINEAR_UNIT(toolchange_settings.change_point.y));
     #endif
@@ -60,8 +60,8 @@ void M217_report(const bool eeprom=false) {
  *  S[linear]   Swap length
  *  P[linear/m] Prime speed
  *  R[linear/m] Retract speed
- *  X[linear]   Park X (Requires SINGLENOZZLE_SWAP_PARK)
- *  Y[linear]   Park Y (Requires SINGLENOZZLE_SWAP_PARK)
+ *  X[linear]   Park X (Requires TOOLCHANGE_PARK)
+ *  Y[linear]   Park Y (Requires TOOLCHANGE_PARK)
  *  Z[linear]   Z Raise
  */
 void GcodeSuite::M217() {
@@ -69,7 +69,7 @@ void GcodeSuite::M217() {
   #define SPR_PARAM
   #define XY_PARAM
 
-  #if ENABLED(SINGLENOZZLE)
+  #if ENABLED(TOOLCHANGE_FILAMENT_SWAP)
 
     #undef SPR_PARAM
     #define SPR_PARAM "SPR"
@@ -77,20 +77,16 @@ void GcodeSuite::M217() {
     if (parser.seenval('S')) { const float v = parser.value_linear_units(); toolchange_settings.swap_length = constrain(v, 0, 500); }
     if (parser.seenval('P')) { const int16_t v = parser.value_linear_units(); toolchange_settings.prime_speed = constrain(v, 10, 5400); }
     if (parser.seenval('R')) { const int16_t v = parser.value_linear_units(); toolchange_settings.retract_speed = constrain(v, 10, 5400); }
-
-    #if ENABLED(SINGLENOZZLE_SWAP_PARK)
-      #undef XY_PARAM
-      #define XY_PARAM "XY"
-      if (parser.seenval('X')) { toolchange_settings.change_point.x = parser.value_linear_units(); }
-      if (parser.seenval('Y')) { toolchange_settings.change_point.y = parser.value_linear_units(); }
-    #endif
-
   #endif
-
+  #if ENABLED(TOOLCHANGE_PARK)
+    #undef XY_PARAM
+    #define XY_PARAM "XY"
+    if (parser.seenval('X')) { toolchange_settings.change_point.x = parser.value_linear_units(); }
+    if (parser.seenval('Y')) { toolchange_settings.change_point.y = parser.value_linear_units(); }
+  #endif
   if (parser.seenval('Z')) { toolchange_settings.z_raise = parser.value_linear_units(); }
 
   if (!parser.seen(SPR_PARAM XY_PARAM "Z")) M217_report();
-
 }
 
 #endif // EXTRUDERS > 1

commit e4cf175163054b9e4c3ffe78876289822cb9a923
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Nov 3 01:16:37 2018 -0500

    Synchronize on M204, M205 (#12302)
    
    * Add parser.seen for multiple parameters
    * Fix M666, use !seen for report
    * Synchronize on M204, M205

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index f928e42b57..15d79da0ab 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -66,24 +66,30 @@ void M217_report(const bool eeprom=false) {
  */
 void GcodeSuite::M217() {
 
-  bool report = true;
+  #define SPR_PARAM
+  #define XY_PARAM
 
   #if ENABLED(SINGLENOZZLE)
 
-    if (parser.seenval('S')) { report = false; const float v = parser.value_linear_units(); toolchange_settings.swap_length = constrain(v, 0, 500); }
-    if (parser.seenval('P')) { report = false; const int16_t v = parser.value_linear_units(); toolchange_settings.prime_speed = constrain(v, 10, 5400); }
-    if (parser.seenval('R')) { report = false; const int16_t v = parser.value_linear_units(); toolchange_settings.retract_speed = constrain(v, 10, 5400); }
+    #undef SPR_PARAM
+    #define SPR_PARAM "SPR"
+
+    if (parser.seenval('S')) { const float v = parser.value_linear_units(); toolchange_settings.swap_length = constrain(v, 0, 500); }
+    if (parser.seenval('P')) { const int16_t v = parser.value_linear_units(); toolchange_settings.prime_speed = constrain(v, 10, 5400); }
+    if (parser.seenval('R')) { const int16_t v = parser.value_linear_units(); toolchange_settings.retract_speed = constrain(v, 10, 5400); }
 
     #if ENABLED(SINGLENOZZLE_SWAP_PARK)
-      if (parser.seenval('X')) { report = false; toolchange_settings.change_point.x = parser.value_linear_units(); }
-      if (parser.seenval('Y')) { report = false; toolchange_settings.change_point.y = parser.value_linear_units(); }
+      #undef XY_PARAM
+      #define XY_PARAM "XY"
+      if (parser.seenval('X')) { toolchange_settings.change_point.x = parser.value_linear_units(); }
+      if (parser.seenval('Y')) { toolchange_settings.change_point.y = parser.value_linear_units(); }
     #endif
 
   #endif
 
-  if (parser.seenval('Z')) { report = false; toolchange_settings.z_raise = parser.value_linear_units(); }
+  if (parser.seenval('Z')) { toolchange_settings.z_raise = parser.value_linear_units(); }
 
-  if (report) M217_report();
+  if (!parser.seen(SPR_PARAM XY_PARAM "Z")) M217_report();
 
 }
 

commit 3ec38727305862c881f268e2fc27f8188b5bc767
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Wed Oct 17 12:11:41 2018 -0400

    Single Z raise value for all tool-changing / parking (#12090)
    
    * Universal tool-change Z lift
    * Add TOOLCHANGE_ZRAISE to example configs
    * Park/unpark changes to example configs
    * Implement DEBUG_DXC_MODE

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 454aa7eeb4..f928e42b57 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -22,7 +22,7 @@
 
 #include "../../inc/MarlinConfigPre.h"
 
-#if ENABLED(SINGLENOZZLE)
+#if EXTRUDERS > 1
 
 #include "../gcode.h"
 #include "../../module/tool_change.h"
@@ -32,18 +32,25 @@
 #endif
 
 void M217_report(const bool eeprom=false) {
+
   #if NUM_SERIAL > 1
     const int16_t port = command_queue_port[cmd_queue_index_r];
   #endif
-  serialprintPGM_P(port, eeprom ? PSTR("  M217") : PSTR("Singlenozzle:"));
-  SERIAL_ECHOPAIR_P(port, " S", LINEAR_UNIT(sn_settings.swap_length));
-  SERIAL_ECHOPAIR_P(port, " P", LINEAR_UNIT(sn_settings.prime_speed));
-  SERIAL_ECHOPAIR_P(port, " R", LINEAR_UNIT(sn_settings.retract_speed));
-  #if ENABLED(SINGLENOZZLE_SWAP_PARK)
-    SERIAL_ECHOPAIR_P(port, " X", LINEAR_UNIT(sn_settings.change_point.x));
-    SERIAL_ECHOPAIR_P(port, " Y", LINEAR_UNIT(sn_settings.change_point.y));
+
+  #if ENABLED(SINGLENOZZLE)
+    serialprintPGM_P(port, eeprom ? PSTR("  M217") : PSTR("Singlenozzle:"));
+    SERIAL_ECHOPAIR_P(port, " S", LINEAR_UNIT(toolchange_settings.swap_length));
+    SERIAL_ECHOPAIR_P(port, " P", LINEAR_UNIT(toolchange_settings.prime_speed));
+    SERIAL_ECHOPAIR_P(port, " R", LINEAR_UNIT(toolchange_settings.retract_speed));
+
+    #if ENABLED(SINGLENOZZLE_SWAP_PARK)
+      SERIAL_ECHOPAIR_P(port, " X", LINEAR_UNIT(toolchange_settings.change_point.x));
+      SERIAL_ECHOPAIR_P(port, " Y", LINEAR_UNIT(toolchange_settings.change_point.y));
+    #endif
+
   #endif
-  SERIAL_ECHOPAIR_P(port, " Z", LINEAR_UNIT(sn_settings.z_raise));
+
+  SERIAL_ECHOPAIR_P(port, " Z", LINEAR_UNIT(toolchange_settings.z_raise));
   SERIAL_EOL();
 }
 
@@ -61,19 +68,23 @@ void GcodeSuite::M217() {
 
   bool report = true;
 
-  if (parser.seenval('S')) { report = false; const float v = parser.value_linear_units(); sn_settings.swap_length = constrain(v, 0, 500); }
-  if (parser.seenval('P')) { report = false; const int16_t v = parser.value_linear_units(); sn_settings.prime_speed = constrain(v, 10, 5400); }
-  if (parser.seenval('R')) { report = false; const int16_t v = parser.value_linear_units(); sn_settings.retract_speed = constrain(v, 10, 5400); }
+  #if ENABLED(SINGLENOZZLE)
+
+    if (parser.seenval('S')) { report = false; const float v = parser.value_linear_units(); toolchange_settings.swap_length = constrain(v, 0, 500); }
+    if (parser.seenval('P')) { report = false; const int16_t v = parser.value_linear_units(); toolchange_settings.prime_speed = constrain(v, 10, 5400); }
+    if (parser.seenval('R')) { report = false; const int16_t v = parser.value_linear_units(); toolchange_settings.retract_speed = constrain(v, 10, 5400); }
+
+    #if ENABLED(SINGLENOZZLE_SWAP_PARK)
+      if (parser.seenval('X')) { report = false; toolchange_settings.change_point.x = parser.value_linear_units(); }
+      if (parser.seenval('Y')) { report = false; toolchange_settings.change_point.y = parser.value_linear_units(); }
+    #endif
 
-  #if ENABLED(SINGLENOZZLE_SWAP_PARK)
-    if (parser.seenval('X')) { report = false; sn_settings.change_point.x = parser.value_linear_units(); }
-    if (parser.seenval('Y')) { report = false; sn_settings.change_point.y = parser.value_linear_units(); }
   #endif
 
-  if (parser.seenval('Z')) { report = false; sn_settings.z_raise = parser.value_linear_units(); }
+  if (parser.seenval('Z')) { report = false; toolchange_settings.z_raise = parser.value_linear_units(); }
 
   if (report) M217_report();
 
 }
 
-#endif // SINGLENOZZLE
+#endif // EXTRUDERS > 1

commit 951b25163e8b9e09212594b47c26434f23dc1a1e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Oct 13 23:08:20 2018 -0500

    Extend M217 with configurable park/raise (#12076)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index e0abbc4240..454aa7eeb4 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -36,25 +36,41 @@ void M217_report(const bool eeprom=false) {
     const int16_t port = command_queue_port[cmd_queue_index_r];
   #endif
   serialprintPGM_P(port, eeprom ? PSTR("  M217") : PSTR("Singlenozzle:"));
-  SERIAL_ECHOPAIR_P(port, " S", sn_settings.swap_length);
-  SERIAL_ECHOPAIR_P(port, " P", sn_settings.prime_speed);
-  SERIAL_ECHOLNPAIR_P(port, " R", sn_settings.retract_speed);
+  SERIAL_ECHOPAIR_P(port, " S", LINEAR_UNIT(sn_settings.swap_length));
+  SERIAL_ECHOPAIR_P(port, " P", LINEAR_UNIT(sn_settings.prime_speed));
+  SERIAL_ECHOPAIR_P(port, " R", LINEAR_UNIT(sn_settings.retract_speed));
+  #if ENABLED(SINGLENOZZLE_SWAP_PARK)
+    SERIAL_ECHOPAIR_P(port, " X", LINEAR_UNIT(sn_settings.change_point.x));
+    SERIAL_ECHOPAIR_P(port, " Y", LINEAR_UNIT(sn_settings.change_point.y));
+  #endif
+  SERIAL_ECHOPAIR_P(port, " Z", LINEAR_UNIT(sn_settings.z_raise));
+  SERIAL_EOL();
 }
 
 /**
  * M217 - Set SINGLENOZZLE toolchange parameters
  *
- *  S[mm]   Swap length
- *  P[mm/m] Prime speed
- *  R[mm/m] Retract speed
+ *  S[linear]   Swap length
+ *  P[linear/m] Prime speed
+ *  R[linear/m] Retract speed
+ *  X[linear]   Park X (Requires SINGLENOZZLE_SWAP_PARK)
+ *  Y[linear]   Park Y (Requires SINGLENOZZLE_SWAP_PARK)
+ *  Z[linear]   Z Raise
  */
 void GcodeSuite::M217() {
 
   bool report = true;
 
-  if (parser.seenval('S')) { report = false; const float v = parser.value_float(); sn_settings.swap_length = constrain(v, 0, 500); }
-  if (parser.seenval('P')) { report = false; const int16_t v = parser.value_int(); sn_settings.prime_speed = constrain(v, 10, 5400); }
-  if (parser.seenval('R')) { report = false; const int16_t v = parser.value_int(); sn_settings.retract_speed = constrain(v, 10, 5400); }
+  if (parser.seenval('S')) { report = false; const float v = parser.value_linear_units(); sn_settings.swap_length = constrain(v, 0, 500); }
+  if (parser.seenval('P')) { report = false; const int16_t v = parser.value_linear_units(); sn_settings.prime_speed = constrain(v, 10, 5400); }
+  if (parser.seenval('R')) { report = false; const int16_t v = parser.value_linear_units(); sn_settings.retract_speed = constrain(v, 10, 5400); }
+
+  #if ENABLED(SINGLENOZZLE_SWAP_PARK)
+    if (parser.seenval('X')) { report = false; sn_settings.change_point.x = parser.value_linear_units(); }
+    if (parser.seenval('Y')) { report = false; sn_settings.change_point.y = parser.value_linear_units(); }
+  #endif
+
+  if (parser.seenval('Z')) { report = false; sn_settings.z_raise = parser.value_linear_units(); }
 
   if (report) M217_report();
 

commit d556dc18650e2185791834d7fe70b4acf45254bc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 10 09:45:20 2018 -0500

    Fix and improve EEPROM storage (#12054)
    
    * Clean up Temperature PID
    * Improve EEPROM read/write/validate
    * Group `SINGLENOZZLE` saved settings
    * Group planner saved settings
    * Group filament change saved settings
    * Group skew saved settings
    * Group `FWRETRACT` saved settings

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 2b3d8d2cc4..e0abbc4240 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -36,9 +36,9 @@ void M217_report(const bool eeprom=false) {
     const int16_t port = command_queue_port[cmd_queue_index_r];
   #endif
   serialprintPGM_P(port, eeprom ? PSTR("  M217") : PSTR("Singlenozzle:"));
-  SERIAL_ECHOPAIR_P(port, " S", singlenozzle_swap_length);
-  SERIAL_ECHOPAIR_P(port, " P", singlenozzle_prime_speed);
-  SERIAL_ECHOLNPAIR_P(port, " R", singlenozzle_retract_speed);
+  SERIAL_ECHOPAIR_P(port, " S", sn_settings.swap_length);
+  SERIAL_ECHOPAIR_P(port, " P", sn_settings.prime_speed);
+  SERIAL_ECHOLNPAIR_P(port, " R", sn_settings.retract_speed);
 }
 
 /**
@@ -52,9 +52,9 @@ void GcodeSuite::M217() {
 
   bool report = true;
 
-  if (parser.seenval('S')) { report = false; const float v = parser.value_float(); singlenozzle_swap_length = constrain(v, 0, 500); }
-  if (parser.seenval('P')) { report = false; const int16_t v = parser.value_int(); singlenozzle_prime_speed = constrain(v, 10, 5400); }
-  if (parser.seenval('R')) { report = false; const int16_t v = parser.value_int(); singlenozzle_retract_speed = constrain(v, 10, 5400); }
+  if (parser.seenval('S')) { report = false; const float v = parser.value_float(); sn_settings.swap_length = constrain(v, 0, 500); }
+  if (parser.seenval('P')) { report = false; const int16_t v = parser.value_int(); sn_settings.prime_speed = constrain(v, 10, 5400); }
+  if (parser.seenval('R')) { report = false; const int16_t v = parser.value_int(); sn_settings.retract_speed = constrain(v, 10, 5400); }
 
   if (report) M217_report();
 

commit ee253991d4eeecacd022833ca72eff1c344b54ba
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Mon Oct 8 16:39:55 2018 -0400

    Various fixups for single-nozzle filament swap (#12036)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
index 630c826d4b..2b3d8d2cc4 100644
--- a/Marlin/src/gcode/config/M217.cpp
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -45,8 +45,8 @@ void M217_report(const bool eeprom=false) {
  * M217 - Set SINGLENOZZLE toolchange parameters
  *
  *  S[mm]   Swap length
- *  P[mm/s] Prime speed
- *  R[mm/s] Retract speed
+ *  P[mm/m] Prime speed
+ *  R[mm/m] Retract speed
  */
 void GcodeSuite::M217() {
 

commit 74cd6cb4fc90e4c483e7a97a313c0257790f1375
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Oct 7 18:06:14 2018 -0400

    Single nozzle filament change (#11994)

diff --git a/Marlin/src/gcode/config/M217.cpp b/Marlin/src/gcode/config/M217.cpp
new file mode 100644
index 0000000000..630c826d4b
--- /dev/null
+++ b/Marlin/src/gcode/config/M217.cpp
@@ -0,0 +1,63 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../inc/MarlinConfigPre.h"
+
+#if ENABLED(SINGLENOZZLE)
+
+#include "../gcode.h"
+#include "../../module/tool_change.h"
+
+#if NUM_SERIAL > 1
+  #include "../../gcode/queue.h"
+#endif
+
+void M217_report(const bool eeprom=false) {
+  #if NUM_SERIAL > 1
+    const int16_t port = command_queue_port[cmd_queue_index_r];
+  #endif
+  serialprintPGM_P(port, eeprom ? PSTR("  M217") : PSTR("Singlenozzle:"));
+  SERIAL_ECHOPAIR_P(port, " S", singlenozzle_swap_length);
+  SERIAL_ECHOPAIR_P(port, " P", singlenozzle_prime_speed);
+  SERIAL_ECHOLNPAIR_P(port, " R", singlenozzle_retract_speed);
+}
+
+/**
+ * M217 - Set SINGLENOZZLE toolchange parameters
+ *
+ *  S[mm]   Swap length
+ *  P[mm/s] Prime speed
+ *  R[mm/s] Retract speed
+ */
+void GcodeSuite::M217() {
+
+  bool report = true;
+
+  if (parser.seenval('S')) { report = false; const float v = parser.value_float(); singlenozzle_swap_length = constrain(v, 0, 500); }
+  if (parser.seenval('P')) { report = false; const int16_t v = parser.value_int(); singlenozzle_prime_speed = constrain(v, 10, 5400); }
+  if (parser.seenval('R')) { report = false; const int16_t v = parser.value_int(); singlenozzle_retract_speed = constrain(v, 10, 5400); }
+
+  if (report) M217_report();
+
+}
+
+#endif // SINGLENOZZLE
