commit ee99eed3bf9f5d811b596058932b88d8ed5298a1
Author: Mihai <299015+mh-dm@users.noreply.github.com>
Date:   Mon Jul 15 21:57:25 2024 +0300

    🚸 Improved menu responsiveness with MarlinUI + U8Glib. (#26555)
    
    Co-authored-by: Jason Smith <jason.inet@gmail.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 14bf42700f..96484442fe 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -642,24 +642,21 @@ public:
   #if !HAS_WIRED_LCD
     static void quick_feedback(const bool=true) {}
   #endif
 
   static void completion_feedback(const bool good=true);
 
   #if HAS_MEDIA
     #if ALL(SCROLL_LONG_FILENAMES, HAS_MARLINUI_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
-    #if MARLINUI_SCROLL_NAME
-      static uint8_t filename_scroll_pos, filename_scroll_max;
-    #endif
-    static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
+    static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, const bool doScroll);
   #endif
 
   #if HAS_PREHEAT
     enum PreheatTarget : uint8_t { PT_HOTEND, PT_BED, PT_FAN, PT_CHAMBER, PT_ALL = 0xFF };
     static preheat_t material_preset[PREHEAT_COUNT];
     static FSTR_P get_preheat_label(const uint8_t m);
     static void apply_preheat(const uint8_t m, const uint8_t pmask, const uint8_t e=active_extruder);
     static void preheat_set_fan(const uint8_t m) { TERN_(HAS_FAN, apply_preheat(m, _BV(PT_FAN))); }
     static void preheat_hotend(const uint8_t m, const uint8_t e=active_extruder) { TERN_(HAS_HOTEND, apply_preheat(m, _BV(PT_HOTEND))); }
     static void preheat_hotend_and_fan(const uint8_t m, const uint8_t e=active_extruder) { preheat_hotend(m, e); preheat_set_fan(m); }

commit 571783fc04314b0cac57948d343690fc1ea10a06
Author: David Buezas <dbuezas@users.noreply.github.com>
Date:   Sat Jul 6 23:41:02 2024 +0100

    🚸 SD card wake on insert, status screen on remove (#27197)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index cc130327a9..14bf42700f 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -297,20 +297,21 @@ public:
       static uint8_t sleep_timeout_minutes;
     #else
       static constexpr uint8_t sleep_timeout_minutes = DISPLAY_SLEEP_MINUTES;
     #endif
     static constexpr uint8_t sleep_timeout_min = 0;
     static constexpr uint8_t sleep_timeout_max = 99;
     static millis_t screen_timeout_ms;
     static void refresh_screen_timeout();
   #endif
 
+  // Sleep or wake the display (e.g., by turning the backlight off/on).
   static void sleep_display(const bool=true) IF_DISABLED(HAS_DISPLAY_SLEEP, {});
   static void wake_display() { sleep_display(false); }
 
   #if HAS_PRINT_PROGRESS_PERMYRIAD
     typedef uint16_t progress_t;
     #define PROGRESS_SCALE 100U
     #define PROGRESS_MASK 0x7FFF
   #else
     typedef uint8_t progress_t;
     #define PROGRESS_SCALE 1U
@@ -736,31 +737,31 @@ public:
       static void ubl_plot(const uint8_t x_plot, const uint8_t y_plot);
     #endif
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void ubl_mesh_edit_start(const_float_t initial);
       static float ubl_mesh_value();
     #endif
 
     static void draw_select_screen_prompt(FSTR_P const fpre, const char * const string=nullptr, FSTR_P const fsuf=nullptr);
 
-  #else
+  #else // !HAS_MARLINUI_MENU
 
     static void return_to_status() {}
 
     static constexpr bool on_status_screen() { return true; }
 
     #if HAS_WIRED_LCD
       FORCE_INLINE static void run_current_screen() { status_screen(); }
     #endif
 
-  #endif
+  #endif // !HAS_MARLINUI_MENU
 
   #if ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI)
     static bool lcd_clicked;
     static bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }
   #else
     static constexpr bool lcd_clicked = false;

commit 1f9fc665ec21f95666801aa4fccc4f4f71932018
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jun 26 18:27:05 2024 -0500

    🚸 MarlinUI:: clear_for_drawing

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 6a29110be8..cc130327a9 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -200,25 +200,28 @@ class MarlinUI {
 public:
 
   MarlinUI() {
     TERN_(HAS_MARLINUI_MENU, currentScreen = status_screen);
   }
 
   static void init();
 
   #if HAS_DISPLAY || HAS_DWIN_E3V2
     static void init_lcd();
+    // Erase the LCD contents. Do the lowest-level thing required to clear the LCD.
+    static void clear_lcd();
   #else
     static void init_lcd() {}
+    static void clear_lcd() {}
   #endif
 
-  static void reinit_lcd() { TERN_(REINIT_NOISY_SPI_LCD, init_lcd()); }
+  static void reinit_lcd() { TERN_(REINIT_NOISY_LCD, init_lcd()); }
 
   #if HAS_WIRED_LCD
     static bool detected();
   #else
     static bool detected() { return true; }
   #endif
 
   #if HAS_MULTI_LANGUAGE
     static uint8_t language;
     static void set_language(const uint8_t lang);
@@ -239,23 +242,20 @@ public:
   #endif
 
   static void chirp() {
     TERN_(HAS_CHIRP, TERN(USE_MARLINUI_BUZZER, buzz, BUZZ)(LCD_FEEDBACK_FREQUENCY_DURATION_MS, LCD_FEEDBACK_FREQUENCY_HZ));
   }
 
   #if ENABLED(LCD_HAS_STATUS_INDICATORS)
     static void update_indicators();
   #endif
 
-  // LCD implementations
-  static void clear_lcd();
-
   #if ALL(HAS_MARLINUI_MENU, TOUCH_SCREEN_CALIBRATION)
     static void check_touch_calibration() {
       if (touch_calibration.need_calibration()) currentScreen = touch_calibration_screen;
     }
   #endif
 
   #if (HAS_WIRED_LCD && HAS_ENCODER_ACTION && HAS_MARLINUI_ENCODER) || HAS_DWIN_E3V2 || HAS_TFT_LVGL_UI
     #define MARLINUI_ENCODER_DELTA 1
     static int8_t get_encoder_delta(const millis_t &now=millis());
   #endif
@@ -513,20 +513,23 @@ public:
   // Periodic or as-needed display update
   static void update() IF_DISABLED(HAS_UI_UPDATE, {});
 
   // Tell the screen to redraw on the next call
   FORCE_INLINE static void refresh() {
     TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
   }
 
   #if HAS_DISPLAY
 
+    // Clear the LCD before new drawing. Some LCDs do nothing because they redraw frequently.
+    static void clear_for_drawing();
+
     static void abort_print();
     static void pause_print();
     static void resume_print();
 
     #if ENABLED(FLOWMETER_SAFETY)
       static void flow_fault();
     #endif
 
     #if ALL(HAS_MARLINUI_MENU, PSU_CONTROL)
       static void poweroff();
@@ -623,20 +626,21 @@ public:
     #endif
 
     static void draw_kill_screen();
     static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
     #if DISABLED(LIGHTWEIGHT_UI)
       static void draw_status_message(const bool blink);
     #endif
 
   #else // No LCD
 
+    static void clear_for_drawing() {}
     static void kill_screen(FSTR_P const, FSTR_P const) {}
 
   #endif
 
   #if !HAS_WIRED_LCD
     static void quick_feedback(const bool=true) {}
   #endif
 
   static void completion_feedback(const bool good=true);
 

commit 7b21cd5d7253a95e1a65760b4817d7f6475ff280
Author: David Buezas <dbuezas@users.noreply.github.com>
Date:   Wed Jun 26 23:04:58 2024 +0200

    🩹 Don't reinit i2c LCDs (#27194)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 835102546d..6a29110be8 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -204,21 +204,21 @@ public:
   }
 
   static void init();
 
   #if HAS_DISPLAY || HAS_DWIN_E3V2
     static void init_lcd();
   #else
     static void init_lcd() {}
   #endif
 
-  static void reinit_lcd() { TERN_(REINIT_NOISY_LCD, init_lcd()); }
+  static void reinit_lcd() { TERN_(REINIT_NOISY_SPI_LCD, init_lcd()); }
 
   #if HAS_WIRED_LCD
     static bool detected();
   #else
     static bool detected() { return true; }
   #endif
 
   #if HAS_MULTI_LANGUAGE
     static uint8_t language;
     static void set_language(const uint8_t lang);

commit fde330af5a4143affc8bbc74af246e8bb5ac9c46
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Sun May 19 22:50:24 2024 -0400

    🎨 Fix MarlinUI "untyped" string args (#27046)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 53300a4400..835102546d 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -175,21 +175,21 @@ typedef bool (*statusResetFunc_t)();
       const float pre = valref;
       if (min != max) { if (diff < 0) NOLESS(valref, rmin); else NOMORE(valref, rmax); }
       return pre != valref;
     }
     #if IS_KINEMATIC
       static bool processing;
     #else
       static bool constexpr processing = false;
     #endif
     static void task();
-    static void soon(const AxisEnum axis OPTARG(MULTI_E_MANUAL, const int8_t eindex=active_extruder));
+    static void soon(const AxisEnum move_axis OPTARG(MULTI_E_MANUAL, const int8_t eindex=active_extruder));
   };
 
   void lcd_move_axis(const AxisEnum);
 
 #endif
 
 ////////////////////////////////////////////
 //////////// MarlinUI Singleton ////////////
 ////////////////////////////////////////////
 
@@ -363,21 +363,21 @@ public:
         static void drawInter();
       #endif
       static void rotate_progress();
     #else
       static void rotate_progress() {}
     #endif
   #else
     static constexpr uint8_t get_progress_percent() { return 0; }
   #endif
 
-  static void host_notify_P(PGM_P const fstr);
+  static void host_notify_P(PGM_P const pstr);
   static void host_notify(FSTR_P const fstr) { host_notify_P(FTOP(fstr)); }
   static void host_notify(const char * const cstr);
 
   #if HAS_STATUS_MESSAGE
 
     #if ANY(HAS_WIRED_LCD, DWIN_LCD_PROUI)
       #if ENABLED(STATUS_MESSAGE_SCROLLING)
         #define MAX_MESSAGE_LENGTH _MAX(LONG_FILENAME_LENGTH, MAX_LANG_CHARSIZE * 2 * (LCD_WIDTH))
       #else
         #define MAX_MESSAGE_LENGTH (MAX_LANG_CHARSIZE * (LCD_WIDTH))

commit feca9a33d5c9a06aa3c0b878acfbb8a552b70c1b
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Mon May 20 11:51:52 2024 +1200

    ✨ SHOW_CUSTOM_BOOTSCREEN for HD44780 (#26793)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index ad4be03900..53300a4400 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -98,21 +98,22 @@ typedef bool (*statusResetFunc_t)();
 #if HAS_MARLINUI_U8GLIB
   enum MarlinFont : uint8_t {
     FONT_STATUSMENU = 1,
     FONT_EDIT,
     FONT_MENU
   };
 #else
   enum HD44780CharSet : uint8_t {
     CHARSET_MENU,
     CHARSET_INFO,
-    CHARSET_BOOT
+    CHARSET_BOOT,
+    CHARSET_BOOT_CUSTOM
   };
 #endif
 
 #if HAS_PREHEAT
   typedef struct {
     #if HAS_HOTEND
       celsius_t hotend_temp;
     #endif
     #if HAS_HEATED_BED
       celsius_t bed_temp;

commit a3960dfa53394f9d105cbd23dc260ed81ff884f4
Author: David Buezas <dbuezas@users.noreply.github.com>
Date:   Thu May 9 23:20:57 2024 +0200

    🚸 New encoder logic & debounce (#26723)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index f21d2565be..ad4be03900 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -247,20 +247,25 @@ public:
 
   // LCD implementations
   static void clear_lcd();
 
   #if ALL(HAS_MARLINUI_MENU, TOUCH_SCREEN_CALIBRATION)
     static void check_touch_calibration() {
       if (touch_calibration.need_calibration()) currentScreen = touch_calibration_screen;
     }
   #endif
 
+  #if (HAS_WIRED_LCD && HAS_ENCODER_ACTION && HAS_MARLINUI_ENCODER) || HAS_DWIN_E3V2 || HAS_TFT_LVGL_UI
+    #define MARLINUI_ENCODER_DELTA 1
+    static int8_t get_encoder_delta(const millis_t &now=millis());
+  #endif
+
   #if HAS_MEDIA
     #define MEDIA_MENU_GATEWAY TERN(PASSWORD_ON_SD_PRINT_MENU, password.media_gatekeeper, menu_media)
     static void media_changed(const uint8_t old_stat, const uint8_t stat);
   #endif
 
   #if HAS_LCD_BRIGHTNESS
     #ifndef LCD_BRIGHTNESS_MIN
       #define LCD_BRIGHTNESS_MIN   1
     #endif
     #ifndef LCD_BRIGHTNESS_MAX

commit 87e94f456348e944ba4487aed436c762dd718966
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon Apr 1 16:05:11 2024 -0400

    🚸 Update ProUI Plot graph - part 2 (#26563)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 3388c2047b..f21d2565be 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -46,20 +46,24 @@
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
   #include "../feature/pause.h"
 #endif
 
 #if ENABLED(DWIN_CREALITY_LCD)
   #include "e3v2/creality/dwin.h"
 #elif ENABLED(DWIN_LCD_PROUI)
   #include "e3v2/proui/dwin.h"
 #endif
 
+#if ALL(HAS_STATUS_MESSAGE, IS_DWIN_MARLINUI)
+  #include "e3v2/marlinui/marlinui_dwin.h" // for LCD_WIDTH
+#endif
+
 typedef bool (*statusResetFunc_t)();
 
 #if HAS_WIRED_LCD
 
   enum LCDViewAction : uint8_t {
     LCDVIEW_NONE,
     LCDVIEW_REDRAW_NOW,
     LCDVIEW_CALL_REDRAW_NEXT,
     LCDVIEW_CLEAR_CALL_REDRAW,
     LCDVIEW_CALL_NO_REDRAW
@@ -746,21 +750,21 @@ public:
     static bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }
   #else
     static constexpr bool lcd_clicked = false;
     static bool use_click() { return false; }
   #endif
 
-  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_LCD_PROUI, DWIN_CREALITY_LCD_JYERSUI)
+  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_JYERSUI)
     static void pause_show_message(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
   #else
     static void _pause_show_message() {}
     #define pause_show_message(...) _pause_show_message()
   #endif
 
   //
   // EEPROM: Reset / Init / Load / Store
   //
   #if HAS_MARLINUI_MENU

commit 466282f322ae4f42a8f3db5e3c9765c38445fdc8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Mar 31 18:20:37 2024 -0500

    🩹 Misc. changes from ProUI / ExtUI updates (#26928)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index ff87852f11..3388c2047b 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -290,28 +290,20 @@ public:
     #endif
     static constexpr uint8_t sleep_timeout_min = 0;
     static constexpr uint8_t sleep_timeout_max = 99;
     static millis_t screen_timeout_ms;
     static void refresh_screen_timeout();
   #endif
 
   static void sleep_display(const bool=true) IF_DISABLED(HAS_DISPLAY_SLEEP, {});
   static void wake_display() { sleep_display(false); }
 
-  #if HAS_DWIN_E3V2_BASIC
-    static void refresh();
-  #else
-    FORCE_INLINE static void refresh() {
-      TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
-    }
-  #endif
-
   #if HAS_PRINT_PROGRESS_PERMYRIAD
     typedef uint16_t progress_t;
     #define PROGRESS_SCALE 100U
     #define PROGRESS_MASK 0x7FFF
   #else
     typedef uint8_t progress_t;
     #define PROGRESS_SCALE 1U
     #define PROGRESS_MASK 0x7F
   #endif
 
@@ -386,20 +378,21 @@ public:
 
     static MString<MAX_MESSAGE_LENGTH> status_message;
     static uint8_t alert_level; // Higher levels block lower levels
 
     #if HAS_STATUS_MESSAGE_TIMEOUT
       static millis_t status_message_expire_ms; // Reset some status messages after a timeout
     #endif
 
     #if ENABLED(STATUS_MESSAGE_SCROLLING)
       static uint8_t status_scroll_offset;
+      static void reset_status_scroll() { status_scroll_offset = 0; }
       static void advance_status_scroll();
       static char* status_and_len(uint8_t &len);
     #endif
 
     static bool has_status() { return !status_message.empty(); }
 
     /**
      * Try to set the alert level.
      * @param level Alert level. Negative to ignore and reset the level. Non-zero never expires.
      * @return      TRUE if the level could NOT be set.
@@ -503,20 +496,25 @@ public:
    * @param pfmt    A constant format P-string
    */
   static void status_printf_P(int8_t level, PGM_P const pfmt, ...);
 
   template<typename... Args>
   static void status_printf(int8_t level, FSTR_P const ffmt, Args... more) { status_printf_P(level, FTOP(ffmt), more...); }
 
   // Periodic or as-needed display update
   static void update() IF_DISABLED(HAS_UI_UPDATE, {});
 
+  // Tell the screen to redraw on the next call
+  FORCE_INLINE static void refresh() {
+    TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
+  }
+
   #if HAS_DISPLAY
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
 
     #if ENABLED(FLOWMETER_SAFETY)
       static void flow_fault();
     #endif
 

commit 4aa48beb378fec6a6e7de0c8c3c7fe47f6551c24
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Feb 7 18:25:13 2024 -0600

    🚸 Adjust encoder multiplier

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 04f4aea24f..ff87852f11 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -651,38 +651,36 @@ public:
     static void preheat_hotend(const uint8_t m, const uint8_t e=active_extruder) { TERN_(HAS_HOTEND, apply_preheat(m, _BV(PT_HOTEND))); }
     static void preheat_hotend_and_fan(const uint8_t m, const uint8_t e=active_extruder) { preheat_hotend(m, e); preheat_set_fan(m); }
     static void preheat_bed(const uint8_t m) { TERN_(HAS_HEATED_BED, apply_preheat(m, _BV(PT_BED))); }
     static void preheat_all(const uint8_t m) { apply_preheat(m, PT_ALL); }
   #endif
 
   static void reset_status_timeout(const millis_t ms) {
     TERN(HAS_SCREEN_TIMEOUT, return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS, UNUSED(ms));
   }
 
+  #if ALL(HAS_MARLINUI_MENU, ENCODER_RATE_MULTIPLIER)
+    static bool encoder_multiplier_enabled;
+    static void enable_encoder_multiplier(const bool onoff) { encoder_multiplier_enabled = onoff; }
+  #else
+    static void enable_encoder_multiplier(const bool) {}
+  #endif
+
   #if HAS_MARLINUI_MENU
 
     #if HAS_TOUCH_BUTTONS
       static uint8_t touch_buttons;
       static uint16_t repeat_delay;
     #else
       static constexpr uint8_t touch_buttons = 0;
     #endif
 
-    #if ENABLED(ENCODER_RATE_MULTIPLIER)
-      static bool encoderRateMultiplierEnabled;
-      static millis_t lastEncoderMovementMillis;
-      static void enable_encoder_multiplier(const bool onoff);
-      #define ENCODER_RATE_MULTIPLY(F) (ui.encoderRateMultiplierEnabled = F)
-    #else
-      #define ENCODER_RATE_MULTIPLY(F) NOOP
-    #endif
-
     // Manual Movement
     static ManualMove manual_move;
     static bool can_show_slider() { return !external_control && currentScreen != manual_move.screen_ptr; }
 
     // Select Screen (modal NO/YES style dialog)
     static bool selection;
     static void set_selection(const bool sel) { selection = sel; }
     static bool update_selection();
 
     static void synchronize(FSTR_P const msg=nullptr);

commit 1dee4d92c61b14458cd394d1f609f0dc80282092
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Feb 4 12:09:08 2024 -0600

    🔧 TOUCH_IDLE_SLEEP_MINS => DISPLAY_SLEEP_MINUTES
    
    Follow up to #26517

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index d578826e49..04f4aea24f 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -285,23 +285,25 @@ public:
   #elif HAS_DISPLAY_SLEEP
     #if ENABLED(EDITABLE_DISPLAY_TIMEOUT)
       static uint8_t sleep_timeout_minutes;
     #else
       static constexpr uint8_t sleep_timeout_minutes = DISPLAY_SLEEP_MINUTES;
     #endif
     static constexpr uint8_t sleep_timeout_min = 0;
     static constexpr uint8_t sleep_timeout_max = 99;
     static millis_t screen_timeout_ms;
     static void refresh_screen_timeout();
-    static void sleep_display(const bool sleep=true);
   #endif
 
+  static void sleep_display(const bool=true) IF_DISABLED(HAS_DISPLAY_SLEEP, {});
+  static void wake_display() { sleep_display(false); }
+
   #if HAS_DWIN_E3V2_BASIC
     static void refresh();
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }
   #endif
 
   #if HAS_PRINT_PROGRESS_PERMYRIAD
     typedef uint16_t progress_t;
@@ -575,43 +577,34 @@ public:
         static void _set_contrast(); // Implementation-specific
         static void set_contrast(const uint8_t value);
         FORCE_INLINE static void refresh_contrast() { set_contrast(contrast); }
       #endif
 
       #if ALL(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
         static millis_t next_filament_display;
         static void pause_filament_display(const millis_t ms=millis()) { next_filament_display = ms + 5000UL; }
       #endif
 
-      #if HAS_TOUCH_SLEEP
-        static void wakeup_screen();
-      #endif
-
       static void quick_feedback(const bool clear_buttons=true);
-      #if HAS_SOUND
-        static void completion_feedback(const bool good=true);
-      #else
-        static void completion_feedback(const bool=true) { TERN_(HAS_TOUCH_SLEEP, wakeup_screen()); }
-      #endif
 
       #if ENABLED(ADVANCED_PAUSE_FEATURE)
         static void draw_hotend_status(const uint8_t row, const uint8_t extruder);
       #endif
 
       #if HAS_TOUCH_BUTTONS
         static bool on_edit_screen;
         static void screen_click(const uint8_t row, const uint8_t col, const uint8_t x, const uint8_t y);
       #endif
 
       static void status_screen();
 
-    #endif
+    #endif // HAS_WIRED_LCD
 
     #if HAS_MARLINUI_U8GLIB
       static bool drawing_screen, first_page;
     #else
       static constexpr bool drawing_screen = false, first_page = true;
     #endif
 
     #if IS_DWIN_MARLINUI
       static bool did_first_redraw;
     #endif
@@ -628,23 +621,24 @@ public:
     #endif
 
   #else // No LCD
 
     static void kill_screen(FSTR_P const, FSTR_P const) {}
 
   #endif
 
   #if !HAS_WIRED_LCD
     static void quick_feedback(const bool=true) {}
-    static void completion_feedback(const bool=true) {}
   #endif
 
+  static void completion_feedback(const bool good=true);
+
   #if HAS_MEDIA
     #if ALL(SCROLL_LONG_FILENAMES, HAS_MARLINUI_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif
     static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
   #endif
 

commit dd3b5a10a09e2a83918af1cf6f8782fd0c473f98
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 21 22:00:37 2024 -0600

    Misc. aesthetic adjustments
    
    Co-Authored-By: Andrew <18502096+classicrocker883@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index c661e635cc..d578826e49 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -458,37 +458,37 @@ public:
   static void set_alert(const char * const cstr, const int8_t level=1) { _set_alert(cstr, level, false); }
   static void set_alert_P(PGM_P const pstr, const int8_t level=1)      { _set_alert(pstr, level, true);  }
   static void set_alert(FSTR_P const fstr, const int8_t level=1)       { set_alert_P(FTOP(fstr), level); }
 
   /**
    * @brief Set Status with a C-string and alert level.
    *
    * @param fstr  A constant F-string to set as the status.
    * @param level Alert level. Negative to ignore and reset the level. Non-zero never expires.
    */
-  static void set_status_and_level(const char * const cstr, const int8_t level) { _set_status_and_level(cstr, level, false); }
+  static void set_status_and_level(const char * const cstr, const int8_t level=0) { _set_status_and_level(cstr, level, false); }
 
   /**
    * @brief Set Status with a P-string and alert level.
    *
    * @param ustr  A C- or P-string, according to pgm.
    * @param level Alert level. Negative to ignore and reset the level. Non-zero never expires.
    */
-  static void set_status_and_level_P(PGM_P const pstr, const int8_t level) { _set_status_and_level(pstr, level, true); }
+  static void set_status_and_level_P(PGM_P const pstr, const int8_t level=0) { _set_status_and_level(pstr, level, true); }
 
   /**
    * @brief Set Status with a fixed string and alert level.
    *
    * @param fstr  A constant F-string to set as the status.
    * @param level Alert level. Negative to ignore and reset the level. Non-zero never expires.
    */
-  static void set_status_and_level(FSTR_P const fstr, const int8_t level) { set_status_and_level_P(FTOP(fstr), level); }
+  static void set_status_and_level(FSTR_P const fstr, const int8_t level=0) { set_status_and_level_P(FTOP(fstr), level); }
 
   static void set_max_status(FSTR_P const fstr) { set_status_and_level(fstr, 127); }
   static void set_min_status(FSTR_P const fstr) { set_status_and_level(fstr,  -1); }
 
   /**
    * @brief Set a persistent status with a C-string.
    *
    * @param cstr    A C-string to set as the status.
    */
   static void set_status_no_expire_P(PGM_P const pstr)      { set_status_P(pstr, true); }

commit 12d7995a18d3ce59c871e11c4940bbaeb9c352fc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 9 18:45:17 2024 -0600

    🎨 Minor temp / UI refactor

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index a463701f56..c661e635cc 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -498,23 +498,24 @@ public:
   /**
    * @brief Set a status with a format string and parameters.
    *
    * @param pfmt    A constant format P-string
    */
   static void status_printf_P(int8_t level, PGM_P const pfmt, ...);
 
   template<typename... Args>
   static void status_printf(int8_t level, FSTR_P const ffmt, Args... more) { status_printf_P(level, FTOP(ffmt), more...); }
 
-  #if HAS_DISPLAY
+  // Periodic or as-needed display update
+  static void update() IF_DISABLED(HAS_UI_UPDATE, {});
 
-    static void update();
+  #if HAS_DISPLAY
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
 
     #if ENABLED(FLOWMETER_SAFETY)
       static void flow_fault();
     #endif
 
     #if ALL(HAS_MARLINUI_MENU, PSU_CONTROL)
@@ -621,21 +622,20 @@ public:
     #endif
 
     static void draw_kill_screen();
     static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
     #if DISABLED(LIGHTWEIGHT_UI)
       static void draw_status_message(const bool blink);
     #endif
 
   #else // No LCD
 
-    static void update() {}
     static void kill_screen(FSTR_P const, FSTR_P const) {}
 
   #endif
 
   #if !HAS_WIRED_LCD
     static void quick_feedback(const bool=true) {}
     static void completion_feedback(const bool=true) {}
   #endif
 
   #if HAS_MEDIA

commit 06710e54de8c83af77a4f57d458f6463fbfcad93
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Wed Dec 13 00:33:03 2023 -0500

    ✨ EDITABLE_DISPLAY_TIMEOUT (#26517)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 595b89b6e0..a463701f56 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -265,31 +265,39 @@ public:
     #ifndef LCD_BRIGHTNESS_DEFAULT
       #define LCD_BRIGHTNESS_DEFAULT LCD_BRIGHTNESS_MAX
     #endif
     static uint8_t brightness;
     static bool backlight;
     static void _set_brightness(); // Implementation-specific
     static void set_brightness(const uint8_t value);
     FORCE_INLINE static void refresh_brightness() { set_brightness(brightness); }
   #endif
 
-  #if LCD_BACKLIGHT_TIMEOUT_MINS
+  #if HAS_BACKLIGHT_TIMEOUT
+    #if ENABLED(EDITABLE_DISPLAY_TIMEOUT)
+      static uint8_t backlight_timeout_minutes;
+    #else
+      static constexpr uint8_t backlight_timeout_minutes = LCD_BACKLIGHT_TIMEOUT_MINS;
+    #endif
     static constexpr uint8_t backlight_timeout_min = 0;
     static constexpr uint8_t backlight_timeout_max = 99;
-    static uint8_t backlight_timeout_minutes;
     static millis_t backlight_off_ms;
     static void refresh_backlight_timeout();
   #elif HAS_DISPLAY_SLEEP
+    #if ENABLED(EDITABLE_DISPLAY_TIMEOUT)
+      static uint8_t sleep_timeout_minutes;
+    #else
+      static constexpr uint8_t sleep_timeout_minutes = DISPLAY_SLEEP_MINUTES;
+    #endif
     static constexpr uint8_t sleep_timeout_min = 0;
     static constexpr uint8_t sleep_timeout_max = 99;
-    static uint8_t sleep_timeout_minutes;
-    static millis_t screen_timeout_millis;
+    static millis_t screen_timeout_ms;
     static void refresh_screen_timeout();
     static void sleep_display(const bool sleep=true);
   #endif
 
   #if HAS_DWIN_E3V2_BASIC
     static void refresh();
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }

commit d5d45e85e4b88e531e4c519f8c40281ea2826364
Author: David Buezas <dbuezas@users.noreply.github.com>
Date:   Tue Dec 5 04:31:34 2023 +0100

    ✨ DOUBLE_LCD_FRAMERATE (#26500)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 7dd5b6b2d8..595b89b6e0 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -81,21 +81,21 @@ typedef bool (*statusResetFunc_t)();
 
     typedef void (*screenFunc_t)();
     typedef void (*menuAction_t)();
 
   #endif // HAS_MARLINUI_MENU
 
 #endif // HAS_WIRED_LCD
 
 #if ANY(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
   #define LCD_WITH_BLINK 1
-  #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_BUTTONS, 50, 100)
+  #define LCD_UPDATE_INTERVAL DIV_TERN(DOUBLE_LCD_FRAMERATE, TERN(HAS_TOUCH_BUTTONS, 50, 100), 2)
 #endif
 
 #if HAS_MARLINUI_U8GLIB
   enum MarlinFont : uint8_t {
     FONT_STATUSMENU = 1,
     FONT_EDIT,
     FONT_MENU
   };
 #else
   enum HD44780CharSet : uint8_t {

commit 376673df284333ed499dd6a1e8ab52c317d2af73
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Nov 20 00:53:35 2023 -0600

    🚸 Minor touch calibration improvement (#26445)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 69235dda36..7dd5b6b2d8 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -653,21 +653,21 @@ public:
   #endif
 
   static void reset_status_timeout(const millis_t ms) {
     TERN(HAS_SCREEN_TIMEOUT, return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS, UNUSED(ms));
   }
 
   #if HAS_MARLINUI_MENU
 
     #if HAS_TOUCH_BUTTONS
       static uint8_t touch_buttons;
-      static uint8_t repeat_delay;
+      static uint16_t repeat_delay;
     #else
       static constexpr uint8_t touch_buttons = 0;
     #endif
 
     #if ENABLED(ENCODER_RATE_MULTIPLIER)
       static bool encoderRateMultiplierEnabled;
       static millis_t lastEncoderMovementMillis;
       static void enable_encoder_multiplier(const bool onoff);
       #define ENCODER_RATE_MULTIPLY(F) (ui.encoderRateMultiplierEnabled = F)
     #else

commit 2a88e7600298fef27e8cbbe01b708959515677fb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 25 19:41:32 2023 -0500

    🧑‍💻 Misc. LCD / string updates

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 9c301e03f6..69235dda36 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -722,21 +722,21 @@ public:
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void ubl_plot(const uint8_t x_plot, const uint8_t y_plot);
     #endif
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void ubl_mesh_edit_start(const_float_t initial);
       static float ubl_mesh_value();
     #endif
 
-    static void draw_select_screen_prompt(FSTR_P const pref, const char * const string=nullptr, FSTR_P const suff=nullptr);
+    static void draw_select_screen_prompt(FSTR_P const fpre, const char * const string=nullptr, FSTR_P const fsuf=nullptr);
 
   #else
 
     static void return_to_status() {}
 
     static constexpr bool on_status_screen() { return true; }
 
     #if HAS_WIRED_LCD
       FORCE_INLINE static void run_current_screen() { status_screen(); }
     #endif

commit 57d26f7e4f614ee4e05e7e97fdc7109d8cfdc702
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Wed Jul 5 08:21:54 2023 +0200

    🩹 Fix HOST_STATUS_NOTIFICATIONS compile (#26040)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 3a39d840e2..9c301e03f6 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -354,21 +354,20 @@ public:
     #else
       static void rotate_progress() {}
     #endif
   #else
     static constexpr uint8_t get_progress_percent() { return 0; }
   #endif
 
   static void host_notify_P(PGM_P const fstr);
   static void host_notify(FSTR_P const fstr) { host_notify_P(FTOP(fstr)); }
   static void host_notify(const char * const cstr);
-  static void host_status();
 
   #if HAS_STATUS_MESSAGE
 
     #if ANY(HAS_WIRED_LCD, DWIN_LCD_PROUI)
       #if ENABLED(STATUS_MESSAGE_SCROLLING)
         #define MAX_MESSAGE_LENGTH _MAX(LONG_FILENAME_LENGTH, MAX_LANG_CHARSIZE * 2 * (LCD_WIDTH))
       #else
         #define MAX_MESSAGE_LENGTH (MAX_LANG_CHARSIZE * (LCD_WIDTH))
       #endif
     #else

commit 3ea87ad54c1e445a1c8cfef1489809edae5decb3
Author: Alexander Gavrilenko <jmz52@users.noreply.github.com>
Date:   Sun Jul 2 04:16:12 2023 +0300

    ✨ SPI TFT / Touchscreen for STM32H7 (#25784)
    
    Co-authored-by: thisiskeithb <13375512+thisiskeithb@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 8810dcac72..3a39d840e2 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -498,21 +498,24 @@ public:
   template<typename... Args>
   static void status_printf(int8_t level, FSTR_P const ffmt, Args... more) { status_printf_P(level, FTOP(ffmt), more...); }
 
   #if HAS_DISPLAY
 
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
-    static void flow_fault();
+
+    #if ENABLED(FLOWMETER_SAFETY)
+      static void flow_fault();
+    #endif
 
     #if ALL(HAS_MARLINUI_MENU, PSU_CONTROL)
       static void poweroff();
     #endif
 
     #if LCD_WITH_BLINK
       static bool get_blink();
     #endif
 
     #if HAS_WIRED_LCD

commit 574dd34c49fde76e1e736b8a7e1ea579d724ff22
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jun 27 13:19:36 2023 -0500

    ♻️ String helper class (#24390)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 6e0205bdfb..8810dcac72 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -46,22 +46,20 @@
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
   #include "../feature/pause.h"
 #endif
 
 #if ENABLED(DWIN_CREALITY_LCD)
   #include "e3v2/creality/dwin.h"
 #elif ENABLED(DWIN_LCD_PROUI)
   #include "e3v2/proui/dwin.h"
 #endif
 
-#define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
-
 typedef bool (*statusResetFunc_t)();
 
 #if HAS_WIRED_LCD
 
   enum LCDViewAction : uint8_t {
     LCDVIEW_NONE,
     LCDVIEW_REDRAW_NOW,
     LCDVIEW_CALL_REDRAW_NEXT,
     LCDVIEW_CLEAR_CALL_REDRAW,
     LCDVIEW_CALL_NO_REDRAW
@@ -353,63 +351,159 @@ public:
         static void drawInter();
       #endif
       static void rotate_progress();
     #else
       static void rotate_progress() {}
     #endif
   #else
     static constexpr uint8_t get_progress_percent() { return 0; }
   #endif
 
+  static void host_notify_P(PGM_P const fstr);
+  static void host_notify(FSTR_P const fstr) { host_notify_P(FTOP(fstr)); }
+  static void host_notify(const char * const cstr);
+  static void host_status();
+
   #if HAS_STATUS_MESSAGE
 
     #if ANY(HAS_WIRED_LCD, DWIN_LCD_PROUI)
       #if ENABLED(STATUS_MESSAGE_SCROLLING)
         #define MAX_MESSAGE_LENGTH _MAX(LONG_FILENAME_LENGTH, MAX_LANG_CHARSIZE * 2 * (LCD_WIDTH))
       #else
         #define MAX_MESSAGE_LENGTH (MAX_LANG_CHARSIZE * (LCD_WIDTH))
       #endif
     #else
       #define MAX_MESSAGE_LENGTH 63
     #endif
 
-    static char status_message[];
+    static MString<MAX_MESSAGE_LENGTH> status_message;
     static uint8_t alert_level; // Higher levels block lower levels
 
     #if HAS_STATUS_MESSAGE_TIMEOUT
       static millis_t status_message_expire_ms; // Reset some status messages after a timeout
     #endif
 
     #if ENABLED(STATUS_MESSAGE_SCROLLING)
       static uint8_t status_scroll_offset;
       static void advance_status_scroll();
       static char* status_and_len(uint8_t &len);
     #endif
 
-    static bool has_status();
+    static bool has_status() { return !status_message.empty(); }
+
+    /**
+     * Try to set the alert level.
+     * @param level Alert level. Negative to ignore and reset the level. Non-zero never expires.
+     * @return      TRUE if the level could NOT be set.
+     */
+    static bool set_alert_level(int8_t &level);
+
     static void reset_status(const bool no_welcome=false);
-    static void set_alert_status(FSTR_P const fstr);
     static void reset_alert_level() { alert_level = 0; }
 
     static statusResetFunc_t status_reset_callback;
     static void set_status_reset_fn(const statusResetFunc_t fn=nullptr) { status_reset_callback = fn; }
+
   #else
+
+    #define MAX_MESSAGE_LENGTH 1
     static constexpr bool has_status() { return false; }
+
+    static bool set_alert_level(int8_t) { return false; }
+
     static void reset_status(const bool=false) {}
-    static void set_alert_status(FSTR_P const) {}
     static void reset_alert_level() {}
+
     static void set_status_reset_fn(const statusResetFunc_t=nullptr) {}
+
   #endif
 
-  static void set_status(const char * const cstr, const bool persist=false);
-  static void set_status(FSTR_P const fstr, const int8_t level=0);
-  static void status_printf(int8_t level, FSTR_P const fmt, ...);
+  /**
+   * @brief Set Status with a C- or P-string and alert level.
+   *
+   * @param ustr  A C- or P-string, according to pgm.
+   * @param level Alert level. Negative to ignore and reset the level. Non-zero never expires.
+   * @param pgm   Program string flag. Only relevant on AVR.
+   */
+  static void _set_status_and_level(const char * const ustr, int8_t level, const bool pgm=false);
+
+  /**
+   * @brief Set Status with a C- or P-string and persistence flag.
+   *
+   * @param ustr    A C- or P-string, according to pgm.
+   * @param persist Don't expire (Requires STATUS_EXPIRE_SECONDS) - and set alert level to 1.
+   * @param pgm     Program string flag. Only relevant on AVR.
+   */
+  static void _set_status(const char * const ustr, const bool persist, const bool pgm=false);
+
+  /**
+   * @brief Set Alert with a C- or P-string and alert level.
+   *
+   * @param ustr  A C- or P-string, according to pgm.
+   * @param level Alert level. Negative to ignore and reset the level. Non-zero never expires.
+   * @param pgm   Program string flag. Only relevant on AVR.
+   */
+  static void _set_alert(const char * const ustr, int8_t level, const bool pgm=false);
+
+  static void set_status(const char * const cstr, const bool persist=false) { _set_status(cstr, persist, false); }
+  static void set_status_P(PGM_P const pstr, const bool persist=false)      { _set_status(pstr, persist, true);  }
+  static void set_status(FSTR_P const fstr, const bool persist=false)       { set_status_P(FTOP(fstr), persist); }
+
+  static void set_alert(const char * const cstr, const int8_t level=1) { _set_alert(cstr, level, false); }
+  static void set_alert_P(PGM_P const pstr, const int8_t level=1)      { _set_alert(pstr, level, true);  }
+  static void set_alert(FSTR_P const fstr, const int8_t level=1)       { set_alert_P(FTOP(fstr), level); }
+
+  /**
+   * @brief Set Status with a C-string and alert level.
+   *
+   * @param fstr  A constant F-string to set as the status.
+   * @param level Alert level. Negative to ignore and reset the level. Non-zero never expires.
+   */
+  static void set_status_and_level(const char * const cstr, const int8_t level) { _set_status_and_level(cstr, level, false); }
+
+  /**
+   * @brief Set Status with a P-string and alert level.
+   *
+   * @param ustr  A C- or P-string, according to pgm.
+   * @param level Alert level. Negative to ignore and reset the level. Non-zero never expires.
+   */
+  static void set_status_and_level_P(PGM_P const pstr, const int8_t level) { _set_status_and_level(pstr, level, true); }
+
+  /**
+   * @brief Set Status with a fixed string and alert level.
+   *
+   * @param fstr  A constant F-string to set as the status.
+   * @param level Alert level. Negative to ignore and reset the level. Non-zero never expires.
+   */
+  static void set_status_and_level(FSTR_P const fstr, const int8_t level) { set_status_and_level_P(FTOP(fstr), level); }
+
+  static void set_max_status(FSTR_P const fstr) { set_status_and_level(fstr, 127); }
+  static void set_min_status(FSTR_P const fstr) { set_status_and_level(fstr,  -1); }
+
+  /**
+   * @brief Set a persistent status with a C-string.
+   *
+   * @param cstr    A C-string to set as the status.
+   */
+  static void set_status_no_expire_P(PGM_P const pstr)      { set_status_P(pstr, true); }
+  static void set_status_no_expire(const char * const cstr) { set_status(cstr, true); }
+  static void set_status_no_expire(FSTR_P const fstr)       { set_status(fstr, true); }
+
+  /**
+   * @brief Set a status with a format string and parameters.
+   *
+   * @param pfmt    A constant format P-string
+   */
+  static void status_printf_P(int8_t level, PGM_P const pfmt, ...);
+
+  template<typename... Args>
+  static void status_printf(int8_t level, FSTR_P const ffmt, Args... more) { status_printf_P(level, FTOP(ffmt), more...); }
 
   #if HAS_DISPLAY
 
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 
@@ -802,14 +896,14 @@ private:
       static void tft_idle();
       #if ENABLED(TOUCH_SCREEN)
         static bool touch_pressed();
       #endif
     #endif
   #endif
 };
 
 #define LCD_MESSAGE_F(S)       ui.set_status(F(S))
 #define LCD_MESSAGE(M)         ui.set_status(GET_TEXT_F(M))
-#define LCD_MESSAGE_MIN(M)     ui.set_status(GET_TEXT_F(M), -1)
-#define LCD_MESSAGE_MAX(M)     ui.set_status(GET_TEXT_F(M), 99)
-#define LCD_ALERTMESSAGE_F(S)  ui.set_alert_status(F(S))
-#define LCD_ALERTMESSAGE(M)    ui.set_alert_status(GET_TEXT_F(M))
+#define LCD_MESSAGE_MIN(M)     ui.set_min_status(GET_TEXT_F(M))
+#define LCD_MESSAGE_MAX(M)     ui.set_max_status(GET_TEXT_F(M))
+#define LCD_ALERTMESSAGE_F(S)  ui.set_alert(F(S))
+#define LCD_ALERTMESSAGE(M)    ui.set_alert(GET_TEXT_F(M))

commit 2218bab542c839f4d1d09640f7c7a1444e38a23b
Author: mjbogusz <mjbogusz@users.noreply.github.com>
Date:   Fri Jun 23 11:56:34 2023 +0200

    🚸 Color UI remaining time (#24843)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index f811545ef6..6e0205bdfb 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -290,30 +290,31 @@ public:
   #endif
 
   #if HAS_DWIN_E3V2_BASIC
     static void refresh();
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }
   #endif
 
+  #if HAS_PRINT_PROGRESS_PERMYRIAD
+    typedef uint16_t progress_t;
+    #define PROGRESS_SCALE 100U
+    #define PROGRESS_MASK 0x7FFF
+  #else
+    typedef uint8_t progress_t;
+    #define PROGRESS_SCALE 1U
+    #define PROGRESS_MASK 0x7F
+  #endif
+
   #if HAS_PRINT_PROGRESS
-    #if HAS_PRINT_PROGRESS_PERMYRIAD
-      typedef uint16_t progress_t;
-      #define PROGRESS_SCALE 100U
-      #define PROGRESS_MASK 0x7FFF
-    #else
-      typedef uint8_t progress_t;
-      #define PROGRESS_SCALE 1U
-      #define PROGRESS_MASK 0x7F
-    #endif
     #if ENABLED(SET_PROGRESS_PERCENT)
       static progress_t progress_override;
       static void set_progress(const progress_t p) { progress_override = _MIN(p, 100U * (PROGRESS_SCALE)); }
       static void set_progress_done() { progress_override = (PROGRESS_MASK + 1U) + 100U * (PROGRESS_SCALE); }
       static void progress_reset() { if (progress_override & (PROGRESS_MASK + 1U)) set_progress(0); }
     #endif
     #if ANY(SHOW_REMAINING_TIME, SET_PROGRESS_MANUALLY)
       static uint32_t _calculated_remaining_time() {
         const duration_t elapsed = print_job_timer.duration();
         const progress_t progress = _get_progress();

commit 86c811660ebf0b3fcbae2f34273d4c9d0c22abc4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:30:34 2023 -0500

    🧑‍💻 Remove LOOP macros (#25917)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 7819afe978..f811545ef6 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -720,21 +720,21 @@ public:
     static void update_buttons();
 
     #if ENABLED(ENCODER_NOISE_FILTER)
       /**
        * Some printers may have issues with EMI noise especially using a motherboard with 3.3V logic levels
        * it may cause the logical LOW to float into the undefined region and register as a logical HIGH
        * causing it to erroneously register as if someone clicked the button and in worst case make the
        * printer unusable in practice.
        */
       static bool hw_button_pressed() {
-        LOOP_L_N(s, ENCODER_SAMPLES) {
+        for (uint8_t s = 0; s < ENCODER_SAMPLES; ++s) {
           if (!BUTTON_CLICK()) return false;
           safe_delay(1);
         }
         return true;
       }
     #else
       static bool hw_button_pressed() { return BUTTON_CLICK(); }
     #endif
 
     #if ANY(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)

commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    🧑‍💻 Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index ccdbd64322..7819afe978 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -81,21 +81,21 @@ typedef bool (*statusResetFunc_t)();
       inline void wrap_string(uint8_t &col, uint8_t &row, const char * const string, const bool wordwrap=false) { _wrap_string(col, row, string, read_byte_ram, wordwrap); }
     #endif
 
     typedef void (*screenFunc_t)();
     typedef void (*menuAction_t)();
 
   #endif // HAS_MARLINUI_MENU
 
 #endif // HAS_WIRED_LCD
 
-#if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
+#if ANY(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
   #define LCD_WITH_BLINK 1
   #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_BUTTONS, 50, 100)
 #endif
 
 #if HAS_MARLINUI_U8GLIB
   enum MarlinFont : uint8_t {
     FONT_STATUSMENU = 1,
     FONT_EDIT,
     FONT_MENU
   };
@@ -239,21 +239,21 @@ public:
     TERN_(HAS_CHIRP, TERN(USE_MARLINUI_BUZZER, buzz, BUZZ)(LCD_FEEDBACK_FREQUENCY_DURATION_MS, LCD_FEEDBACK_FREQUENCY_HZ));
   }
 
   #if ENABLED(LCD_HAS_STATUS_INDICATORS)
     static void update_indicators();
   #endif
 
   // LCD implementations
   static void clear_lcd();
 
-  #if BOTH(HAS_MARLINUI_MENU, TOUCH_SCREEN_CALIBRATION)
+  #if ALL(HAS_MARLINUI_MENU, TOUCH_SCREEN_CALIBRATION)
     static void check_touch_calibration() {
       if (touch_calibration.need_calibration()) currentScreen = touch_calibration_screen;
     }
   #endif
 
   #if HAS_MEDIA
     #define MEDIA_MENU_GATEWAY TERN(PASSWORD_ON_SD_PRINT_MENU, password.media_gatekeeper, menu_media)
     static void media_changed(const uint8_t old_stat, const uint8_t stat);
   #endif
 
@@ -306,21 +306,21 @@ public:
       typedef uint8_t progress_t;
       #define PROGRESS_SCALE 1U
       #define PROGRESS_MASK 0x7F
     #endif
     #if ENABLED(SET_PROGRESS_PERCENT)
       static progress_t progress_override;
       static void set_progress(const progress_t p) { progress_override = _MIN(p, 100U * (PROGRESS_SCALE)); }
       static void set_progress_done() { progress_override = (PROGRESS_MASK + 1U) + 100U * (PROGRESS_SCALE); }
       static void progress_reset() { if (progress_override & (PROGRESS_MASK + 1U)) set_progress(0); }
     #endif
-    #if EITHER(SHOW_REMAINING_TIME, SET_PROGRESS_MANUALLY)
+    #if ANY(SHOW_REMAINING_TIME, SET_PROGRESS_MANUALLY)
       static uint32_t _calculated_remaining_time() {
         const duration_t elapsed = print_job_timer.duration();
         const progress_t progress = _get_progress();
         return progress ? elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress : 0;
       }
       #if ENABLED(SET_REMAINING_TIME)
         static uint32_t remaining_time;
         FORCE_INLINE static void set_remaining_time(const uint32_t r) { remaining_time = r; }
         FORCE_INLINE static uint32_t get_remaining_time() { return remaining_time ?: _calculated_remaining_time(); }
         FORCE_INLINE static void reset_remaining_time() { set_remaining_time(0); }
@@ -354,21 +354,21 @@ public:
       static void rotate_progress();
     #else
       static void rotate_progress() {}
     #endif
   #else
     static constexpr uint8_t get_progress_percent() { return 0; }
   #endif
 
   #if HAS_STATUS_MESSAGE
 
-    #if EITHER(HAS_WIRED_LCD, DWIN_LCD_PROUI)
+    #if ANY(HAS_WIRED_LCD, DWIN_LCD_PROUI)
       #if ENABLED(STATUS_MESSAGE_SCROLLING)
         #define MAX_MESSAGE_LENGTH _MAX(LONG_FILENAME_LENGTH, MAX_LANG_CHARSIZE * 2 * (LCD_WIDTH))
       #else
         #define MAX_MESSAGE_LENGTH (MAX_LANG_CHARSIZE * (LCD_WIDTH))
       #endif
     #else
       #define MAX_MESSAGE_LENGTH 63
     #endif
 
     static char status_message[];
@@ -405,21 +405,21 @@ public:
 
   #if HAS_DISPLAY
 
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 
-    #if BOTH(HAS_MARLINUI_MENU, PSU_CONTROL)
+    #if ALL(HAS_MARLINUI_MENU, PSU_CONTROL)
       static void poweroff();
     #endif
 
     #if LCD_WITH_BLINK
       static bool get_blink();
     #endif
 
     #if HAS_WIRED_LCD
 
       static millis_t next_button_update_ms;
@@ -464,21 +464,21 @@ public:
 
       static uint8_t lcd_status_update_delay;
 
       #if HAS_LCD_CONTRAST
         static uint8_t contrast;
         static void _set_contrast(); // Implementation-specific
         static void set_contrast(const uint8_t value);
         FORCE_INLINE static void refresh_contrast() { set_contrast(contrast); }
       #endif
 
-      #if BOTH(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
+      #if ALL(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
         static millis_t next_filament_display;
         static void pause_filament_display(const millis_t ms=millis()) { next_filament_display = ms + 5000UL; }
       #endif
 
       #if HAS_TOUCH_SLEEP
         static void wakeup_screen();
       #endif
 
       static void quick_feedback(const bool clear_buttons=true);
       #if HAS_SOUND
@@ -503,21 +503,21 @@ public:
     #if HAS_MARLINUI_U8GLIB
       static bool drawing_screen, first_page;
     #else
       static constexpr bool drawing_screen = false, first_page = true;
     #endif
 
     #if IS_DWIN_MARLINUI
       static bool did_first_redraw;
     #endif
 
-    #if EITHER(BABYSTEP_GFX_OVERLAY, MESH_EDIT_GFX_OVERLAY)
+    #if ANY(BABYSTEP_GFX_OVERLAY, MESH_EDIT_GFX_OVERLAY)
       static void zoffset_overlay(const int8_t dir);
       static void zoffset_overlay(const_float_t zvalue);
     #endif
 
     static void draw_kill_screen();
     static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
     #if DISABLED(LIGHTWEIGHT_UI)
       static void draw_status_message(const bool blink);
     #endif
 
@@ -527,21 +527,21 @@ public:
     static void kill_screen(FSTR_P const, FSTR_P const) {}
 
   #endif
 
   #if !HAS_WIRED_LCD
     static void quick_feedback(const bool=true) {}
     static void completion_feedback(const bool=true) {}
   #endif
 
   #if HAS_MEDIA
-    #if BOTH(SCROLL_LONG_FILENAMES, HAS_MARLINUI_MENU)
+    #if ALL(SCROLL_LONG_FILENAMES, HAS_MARLINUI_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif
     static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
   #endif
 
   #if HAS_PREHEAT
     enum PreheatTarget : uint8_t { PT_HOTEND, PT_BED, PT_FAN, PT_CHAMBER, PT_ALL = 0xFF };
@@ -639,21 +639,21 @@ public:
     static void return_to_status() {}
 
     static constexpr bool on_status_screen() { return true; }
 
     #if HAS_WIRED_LCD
       FORCE_INLINE static void run_current_screen() { status_screen(); }
     #endif
 
   #endif
 
-  #if EITHER(HAS_MARLINUI_MENU, EXTENSIBLE_UI)
+  #if ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI)
     static bool lcd_clicked;
     static bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }
   #else
     static constexpr bool lcd_clicked = false;
     static bool use_click() { return false; }
   #endif
@@ -677,31 +677,31 @@ public:
       static void init_eeprom();
       static void load_settings();
       static void store_settings();
     #endif
     static void eeprom_alert(const EEPROM_Error) TERN_(EEPROM_AUTO_INIT, {});
   #endif
 
   //
   // Special handling if a move is underway
   //
-  #if ANY(DELTA_CALIBRATION_MENU, DELTA_AUTO_CALIBRATION, PROBE_OFFSET_WIZARD, X_AXIS_TWIST_COMPENSATION) || (ENABLED(LCD_BED_LEVELING) && EITHER(PROBE_MANUALLY, MESH_BED_LEVELING))
+  #if ANY(DELTA_CALIBRATION_MENU, DELTA_AUTO_CALIBRATION, PROBE_OFFSET_WIZARD, X_AXIS_TWIST_COMPENSATION) || (ENABLED(LCD_BED_LEVELING) && ANY(PROBE_MANUALLY, MESH_BED_LEVELING))
     #define LCD_HAS_WAIT_FOR_MOVE 1
     static bool wait_for_move;
   #else
     static constexpr bool wait_for_move = false;
   #endif
 
   //
   // Block interaction while under external control
   //
-  #if HAS_MARLINUI_MENU && EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
+  #if HAS_MARLINUI_MENU && ANY(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
     static bool external_control;
     FORCE_INLINE static void capture() { external_control = true; }
     FORCE_INLINE static void release() { external_control = false; }
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void external_encoder();
     #endif
   #else
     static constexpr bool external_control = false;
   #endif
 
@@ -730,36 +730,36 @@ public:
         LOOP_L_N(s, ENCODER_SAMPLES) {
           if (!BUTTON_CLICK()) return false;
           safe_delay(1);
         }
         return true;
       }
     #else
       static bool hw_button_pressed() { return BUTTON_CLICK(); }
     #endif
 
-    #if EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
+    #if ANY(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
       static void wait_for_release();
     #endif
 
     static uint32_t encoderPosition;
 
     #define ENCODERBASE (TERN(REVERSE_ENCODER_DIRECTION, -1, +1))
 
-    #if EITHER(REVERSE_MENU_DIRECTION, REVERSE_SELECT_DIRECTION)
+    #if ANY(REVERSE_MENU_DIRECTION, REVERSE_SELECT_DIRECTION)
       static int8_t encoderDirection;
     #else
       static constexpr int8_t encoderDirection = ENCODERBASE;
     #endif
 
     FORCE_INLINE static void encoder_direction_normal() {
-      #if EITHER(REVERSE_MENU_DIRECTION, REVERSE_SELECT_DIRECTION)
+      #if ANY(REVERSE_MENU_DIRECTION, REVERSE_SELECT_DIRECTION)
         encoderDirection = ENCODERBASE;
       #endif
     }
 
     FORCE_INLINE static void encoder_direction_menus() {
       TERN_(REVERSE_MENU_DIRECTION, encoderDirection = -(ENCODERBASE));
     }
 
     FORCE_INLINE static void encoder_direction_select() {
       TERN_(REVERSE_SELECT_DIRECTION, encoderDirection = -(ENCODERBASE));

commit 5bc84bf08cb47741537fe705dbfe19eee5396d4e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri May 19 23:30:48 2023 -0500

    🚸 Improve EEPROM validation (#25860)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 9c5e192fb2..ccdbd64322 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -20,20 +20,24 @@
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfig.h"
 #include "../sd/cardreader.h"
 #include "../module/motion.h"
 #include "../libs/buzzer.h"
 #include "buttons.h"
 
+#if ENABLED(EEPROM_SETTINGS)
+  #include "../module/settings.h"
+#endif
+
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "tft_io/touch_calibration.h"
 #endif
 
 #if E_MANUAL > 1
   #define MULTI_E_MANUAL 1
 #endif
 
 #if HAS_PRINT_PROGRESS
   #include "../module/printcounter.h"
@@ -667,26 +671,21 @@ public:
   #if HAS_MARLINUI_MENU
     static void reset_settings();
   #endif
 
   #if ENABLED(EEPROM_SETTINGS)
     #if HAS_MARLINUI_MENU
       static void init_eeprom();
       static void load_settings();
       static void store_settings();
     #endif
-    #if DISABLED(EEPROM_AUTO_INIT)
-      static void eeprom_alert(const uint8_t msgid);
-      static void eeprom_alert_crc()     { eeprom_alert(0); }
-      static void eeprom_alert_index()   { eeprom_alert(1); }
-      static void eeprom_alert_version() { eeprom_alert(2); }
-    #endif
+    static void eeprom_alert(const EEPROM_Error) TERN_(EEPROM_AUTO_INIT, {});
   #endif
 
   //
   // Special handling if a move is underway
   //
   #if ANY(DELTA_CALIBRATION_MENU, DELTA_AUTO_CALIBRATION, PROBE_OFFSET_WIZARD, X_AXIS_TWIST_COMPENSATION) || (ENABLED(LCD_BED_LEVELING) && EITHER(PROBE_MANUALLY, MESH_BED_LEVELING))
     #define LCD_HAS_WAIT_FOR_MOVE 1
     static bool wait_for_move;
   #else
     static constexpr bool wait_for_move = false;

commit 10ed5ab01c43a09429e1eb885196308fca71f492
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 23 03:17:55 2023 -0500

    🚸 Improve PAUSE_PROBE_DEPLOY_WHEN_TRIGGERED (#25681)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 65176507fc..9c5e192fb2 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -221,21 +221,21 @@ public:
     static void update_language_font();
   #endif
 
   #if ENABLED(SOUND_MENU_ITEM)
     static bool sound_on; // Initialized by settings.load()
   #else
     static constexpr bool sound_on = true;
   #endif
 
   #if USE_MARLINUI_BUZZER
-    static void buzz(const long duration, const uint16_t freq);
+    static void buzz(const long duration, const uint16_t freq=0);
   #endif
 
   static void chirp() {
     TERN_(HAS_CHIRP, TERN(USE_MARLINUI_BUZZER, buzz, BUZZ)(LCD_FEEDBACK_FREQUENCY_DURATION_MS, LCD_FEEDBACK_FREQUENCY_HZ));
   }
 
   #if ENABLED(LCD_HAS_STATUS_INDICATORS)
     static void update_indicators();
   #endif
 

commit 5664c02d077e028f84a24efd96c2eebe97ce8763
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 22:43:09 2023 -0500

    🧑‍💻 Generalize SDSUPPORT as HAS_MEDIA
    
    In preparation for single- and multi-volume refactoring.

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index de1e30fe4e..65176507fc 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -241,21 +241,21 @@ public:
 
   // LCD implementations
   static void clear_lcd();
 
   #if BOTH(HAS_MARLINUI_MENU, TOUCH_SCREEN_CALIBRATION)
     static void check_touch_calibration() {
       if (touch_calibration.need_calibration()) currentScreen = touch_calibration_screen;
     }
   #endif
 
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     #define MEDIA_MENU_GATEWAY TERN(PASSWORD_ON_SD_PRINT_MENU, password.media_gatekeeper, menu_media)
     static void media_changed(const uint8_t old_stat, const uint8_t stat);
   #endif
 
   #if HAS_LCD_BRIGHTNESS
     #ifndef LCD_BRIGHTNESS_MIN
       #define LCD_BRIGHTNESS_MIN   1
     #endif
     #ifndef LCD_BRIGHTNESS_MAX
       #define LCD_BRIGHTNESS_MAX 255
@@ -460,21 +460,21 @@ public:
 
       static uint8_t lcd_status_update_delay;
 
       #if HAS_LCD_CONTRAST
         static uint8_t contrast;
         static void _set_contrast(); // Implementation-specific
         static void set_contrast(const uint8_t value);
         FORCE_INLINE static void refresh_contrast() { set_contrast(contrast); }
       #endif
 
-      #if BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
+      #if BOTH(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
         static millis_t next_filament_display;
         static void pause_filament_display(const millis_t ms=millis()) { next_filament_display = ms + 5000UL; }
       #endif
 
       #if HAS_TOUCH_SLEEP
         static void wakeup_screen();
       #endif
 
       static void quick_feedback(const bool clear_buttons=true);
       #if HAS_SOUND
@@ -522,21 +522,21 @@ public:
     static void update() {}
     static void kill_screen(FSTR_P const, FSTR_P const) {}
 
   #endif
 
   #if !HAS_WIRED_LCD
     static void quick_feedback(const bool=true) {}
     static void completion_feedback(const bool=true) {}
   #endif
 
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     #if BOTH(SCROLL_LONG_FILENAMES, HAS_MARLINUI_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif
     static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
   #endif
 
   #if HAS_PREHEAT

commit 5d8d38a911f96dadd56471f6dacaa6bda64b66fb
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sun Apr 23 08:59:51 2023 +1200

    🩹 Status / Host Prompt followup (#25720)
    
    Followup to #25679
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 32d747da43..de1e30fe4e 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -487,25 +487,20 @@ public:
         static void draw_hotend_status(const uint8_t row, const uint8_t extruder);
       #endif
 
       #if HAS_TOUCH_BUTTONS
         static bool on_edit_screen;
         static void screen_click(const uint8_t row, const uint8_t col, const uint8_t x, const uint8_t y);
       #endif
 
       static void status_screen();
 
-    #else
-
-      static void quick_feedback(const bool=true) {}
-      static void completion_feedback(const bool=true) {}
-
     #endif
 
     #if HAS_MARLINUI_U8GLIB
       static bool drawing_screen, first_page;
     #else
       static constexpr bool drawing_screen = false, first_page = true;
     #endif
 
     #if IS_DWIN_MARLINUI
       static bool did_first_redraw;
@@ -522,20 +517,25 @@ public:
       static void draw_status_message(const bool blink);
     #endif
 
   #else // No LCD
 
     static void update() {}
     static void kill_screen(FSTR_P const, FSTR_P const) {}
 
   #endif
 
+  #if !HAS_WIRED_LCD
+    static void quick_feedback(const bool=true) {}
+    static void completion_feedback(const bool=true) {}
+  #endif
+
   #if ENABLED(SDSUPPORT)
     #if BOTH(SCROLL_LONG_FILENAMES, HAS_MARLINUI_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif
     static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
   #endif
 

commit 9a1c02591ba4c3d5b41f4c64edd819ea1860b75b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 14 17:51:45 2023 -0500

    🧑‍💻 Status Message cleanup

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 9d6d235e96..32d747da43 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -462,20 +462,21 @@ public:
 
       #if HAS_LCD_CONTRAST
         static uint8_t contrast;
         static void _set_contrast(); // Implementation-specific
         static void set_contrast(const uint8_t value);
         FORCE_INLINE static void refresh_contrast() { set_contrast(contrast); }
       #endif
 
       #if BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
         static millis_t next_filament_display;
+        static void pause_filament_display(const millis_t ms=millis()) { next_filament_display = ms + 5000UL; }
       #endif
 
       #if HAS_TOUCH_SLEEP
         static void wakeup_screen();
       #endif
 
       static void quick_feedback(const bool clear_buttons=true);
       #if HAS_SOUND
         static void completion_feedback(const bool good=true);
       #else
@@ -486,20 +487,25 @@ public:
         static void draw_hotend_status(const uint8_t row, const uint8_t extruder);
       #endif
 
       #if HAS_TOUCH_BUTTONS
         static bool on_edit_screen;
         static void screen_click(const uint8_t row, const uint8_t col, const uint8_t x, const uint8_t y);
       #endif
 
       static void status_screen();
 
+    #else
+
+      static void quick_feedback(const bool=true) {}
+      static void completion_feedback(const bool=true) {}
+
     #endif
 
     #if HAS_MARLINUI_U8GLIB
       static bool drawing_screen, first_page;
     #else
       static constexpr bool drawing_screen = false, first_page = true;
     #endif
 
     #if IS_DWIN_MARLINUI
       static bool did_first_redraw;
@@ -796,12 +802,14 @@ private:
       static void tft_idle();
       #if ENABLED(TOUCH_SCREEN)
         static bool touch_pressed();
       #endif
     #endif
   #endif
 };
 
 #define LCD_MESSAGE_F(S)       ui.set_status(F(S))
 #define LCD_MESSAGE(M)         ui.set_status(GET_TEXT_F(M))
+#define LCD_MESSAGE_MIN(M)     ui.set_status(GET_TEXT_F(M), -1)
+#define LCD_MESSAGE_MAX(M)     ui.set_status(GET_TEXT_F(M), 99)
 #define LCD_ALERTMESSAGE_F(S)  ui.set_alert_status(F(S))
 #define LCD_ALERTMESSAGE(M)    ui.set_alert_status(GET_TEXT_F(M))

commit 65b97438fa92743ac5b2659ae55013a4c413da39
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 15 19:13:09 2023 -0500

    🩹 Fan Menu / Status fixes
    
    Followup to #21888

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index fa18878c1b..9d6d235e96 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -496,21 +496,20 @@ public:
     #endif
 
     #if HAS_MARLINUI_U8GLIB
       static bool drawing_screen, first_page;
     #else
       static constexpr bool drawing_screen = false, first_page = true;
     #endif
 
     #if IS_DWIN_MARLINUI
       static bool did_first_redraw;
-      static bool old_is_printing;
     #endif
 
     #if EITHER(BABYSTEP_GFX_OVERLAY, MESH_EDIT_GFX_OVERLAY)
       static void zoffset_overlay(const int8_t dir);
       static void zoffset_overlay(const_float_t zvalue);
     #endif
 
     static void draw_kill_screen();
     static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
     #if DISABLED(LIGHTWEIGHT_UI)

commit 96bc084f3d791bc93265f217181986863e8e5fc7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 18 02:15:16 2023 -0600

    🎨 Misc. LCD cleanup (#25400)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 827a71a29d..fa18878c1b 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -499,21 +499,21 @@ public:
       static bool drawing_screen, first_page;
     #else
       static constexpr bool drawing_screen = false, first_page = true;
     #endif
 
     #if IS_DWIN_MARLINUI
       static bool did_first_redraw;
       static bool old_is_printing;
     #endif
 
-    #if EITHER(BABYSTEP_ZPROBE_GFX_OVERLAY, MESH_EDIT_GFX_OVERLAY)
+    #if EITHER(BABYSTEP_GFX_OVERLAY, MESH_EDIT_GFX_OVERLAY)
       static void zoffset_overlay(const int8_t dir);
       static void zoffset_overlay(const_float_t zvalue);
     #endif
 
     static void draw_kill_screen();
     static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
     #if DISABLED(LIGHTWEIGHT_UI)
       static void draw_status_message(const bool blink);
     #endif
 

commit b7c23631c5840e2338cae531b171459e9e9c5301
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sun Jan 22 15:08:37 2023 +1300

    🐛 Fix misc. UI issues (#25252)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index ec19f8bd34..827a71a29d 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -327,34 +327,36 @@ public:
         static uint32_t interaction_time;
         FORCE_INLINE static void set_interaction_time(const uint32_t r) { interaction_time = r; }
         FORCE_INLINE static void reset_interaction_time() { set_interaction_time(0); }
       #endif
     #endif
     static progress_t _get_progress();
     #if HAS_PRINT_PROGRESS_PERMYRIAD
       FORCE_INLINE static uint16_t get_progress_permyriad() { return _get_progress(); }
     #endif
     static uint8_t get_progress_percent() { return uint8_t(_get_progress() / (PROGRESS_SCALE)); }
-    #if LCD_WITH_BLINK
+    #if LCD_WITH_BLINK && HAS_EXTRA_PROGRESS
       #if ENABLED(SHOW_PROGRESS_PERCENT)
         static void drawPercent();
       #endif
       #if ENABLED(SHOW_ELAPSED_TIME)
         static void drawElapsed();
       #endif
       #if ENABLED(SHOW_REMAINING_TIME)
         static void drawRemain();
       #endif
       #if ENABLED(SHOW_INTERACTION_TIME)
         static void drawInter();
       #endif
       static void rotate_progress();
+    #else
+      static void rotate_progress() {}
     #endif
   #else
     static constexpr uint8_t get_progress_percent() { return 0; }
   #endif
 
   #if HAS_STATUS_MESSAGE
 
     #if EITHER(HAS_WIRED_LCD, DWIN_LCD_PROUI)
       #if ENABLED(STATUS_MESSAGE_SCROLLING)
         #define MAX_MESSAGE_LENGTH _MAX(LONG_FILENAME_LENGTH, MAX_LANG_CHARSIZE * 2 * (LCD_WIDTH))

commit 81f88fefdc1d32fade897ddd0daff604c92b5da0
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Mon Oct 24 17:44:52 2022 -0400

    🐛 Fix FTDUI Status Screen Timeout (#24899)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index b1a98248bb..ec19f8bd34 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -538,21 +538,21 @@ public:
     static FSTR_P get_preheat_label(const uint8_t m);
     static void apply_preheat(const uint8_t m, const uint8_t pmask, const uint8_t e=active_extruder);
     static void preheat_set_fan(const uint8_t m) { TERN_(HAS_FAN, apply_preheat(m, _BV(PT_FAN))); }
     static void preheat_hotend(const uint8_t m, const uint8_t e=active_extruder) { TERN_(HAS_HOTEND, apply_preheat(m, _BV(PT_HOTEND))); }
     static void preheat_hotend_and_fan(const uint8_t m, const uint8_t e=active_extruder) { preheat_hotend(m, e); preheat_set_fan(m); }
     static void preheat_bed(const uint8_t m) { TERN_(HAS_HEATED_BED, apply_preheat(m, _BV(PT_BED))); }
     static void preheat_all(const uint8_t m) { apply_preheat(m, PT_ALL); }
   #endif
 
   static void reset_status_timeout(const millis_t ms) {
-    TERN(SCREENS_CAN_TIME_OUT, return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS, UNUSED(ms));
+    TERN(HAS_SCREEN_TIMEOUT, return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS, UNUSED(ms));
   }
 
   #if HAS_MARLINUI_MENU
 
     #if HAS_TOUCH_BUTTONS
       static uint8_t touch_buttons;
       static uint8_t repeat_delay;
     #else
       static constexpr uint8_t touch_buttons = 0;
     #endif
@@ -589,25 +589,25 @@ public:
 
     static void return_to_status();
     static bool on_status_screen() { return currentScreen == status_screen; }
     FORCE_INLINE static void run_current_screen() { (*currentScreen)(); }
 
     #if ENABLED(LIGHTWEIGHT_UI)
       static void lcd_in_status(const bool inStatus);
     #endif
 
     FORCE_INLINE static bool screen_is_sticky() {
-      return TERN1(SCREENS_CAN_TIME_OUT, defer_return_to_status);
+      return TERN1(HAS_SCREEN_TIMEOUT, defer_return_to_status);
     }
 
     FORCE_INLINE static void defer_status_screen(const bool defer=true) {
-      TERN(SCREENS_CAN_TIME_OUT, defer_return_to_status = defer, UNUSED(defer));
+      TERN(HAS_SCREEN_TIMEOUT, defer_return_to_status = defer, UNUSED(defer));
     }
 
     static void goto_previous_screen_no_defer() {
       defer_status_screen(false);
       goto_previous_screen();
     }
 
     #if ENABLED(SD_REPRINT_LAST_SELECTED_FILE)
       static void reselect_last_file();
     #endif
@@ -771,21 +771,21 @@ public:
   #if ENABLED(TOUCH_SCREEN_CALIBRATION)
     static void touch_calibration_screen();
   #endif
 
   #if HAS_GRAPHICAL_TFT
     static void move_axis_screen();
   #endif
 
 private:
 
-  #if SCREENS_CAN_TIME_OUT
+  #if HAS_SCREEN_TIMEOUT
     static millis_t return_to_status_ms;
     static bool defer_return_to_status;
   #else
     static constexpr bool defer_return_to_status = false;
   #endif
 
   #if HAS_STATUS_MESSAGE
     static void finish_status(const bool persist);
   #endif
 

commit f595e40ceb0c79d7f0d6438636658dfcfa2a75b8
Author: EvilGremlin <22657714+EvilGremlin@users.noreply.github.com>
Date:   Sun Oct 9 18:30:47 2022 +0300

    ♻️ Set Progress without LCD (#24767)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index d2e3708907..b1a98248bb 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -18,32 +18,31 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfig.h"
 #include "../sd/cardreader.h"
 #include "../module/motion.h"
 #include "../libs/buzzer.h"
-
 #include "buttons.h"
 
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "tft_io/touch_calibration.h"
 #endif
 
 #if E_MANUAL > 1
   #define MULTI_E_MANUAL 1
 #endif
 
-#if HAS_DISPLAY
+#if HAS_PRINT_PROGRESS
   #include "../module/printcounter.h"
 #endif
 
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
   #include "../feature/pause.h"
 #endif
 
 #if ENABLED(DWIN_CREALITY_LCD)
   #include "e3v2/creality/dwin.h"
 #elif ENABLED(DWIN_LCD_PROUI)
@@ -79,20 +78,21 @@ typedef bool (*statusResetFunc_t)();
     #endif
 
     typedef void (*screenFunc_t)();
     typedef void (*menuAction_t)();
 
   #endif // HAS_MARLINUI_MENU
 
 #endif // HAS_WIRED_LCD
 
 #if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
+  #define LCD_WITH_BLINK 1
   #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_BUTTONS, 50, 100)
 #endif
 
 #if HAS_MARLINUI_U8GLIB
   enum MarlinFont : uint8_t {
     FONT_STATUSMENU = 1,
     FONT_EDIT,
     FONT_MENU
   };
 #else
@@ -296,46 +296,66 @@ public:
   #if HAS_PRINT_PROGRESS
     #if HAS_PRINT_PROGRESS_PERMYRIAD
       typedef uint16_t progress_t;
       #define PROGRESS_SCALE 100U
       #define PROGRESS_MASK 0x7FFF
     #else
       typedef uint8_t progress_t;
       #define PROGRESS_SCALE 1U
       #define PROGRESS_MASK 0x7F
     #endif
-    #if ENABLED(LCD_SET_PROGRESS_MANUALLY)
+    #if ENABLED(SET_PROGRESS_PERCENT)
       static progress_t progress_override;
       static void set_progress(const progress_t p) { progress_override = _MIN(p, 100U * (PROGRESS_SCALE)); }
       static void set_progress_done() { progress_override = (PROGRESS_MASK + 1U) + 100U * (PROGRESS_SCALE); }
       static void progress_reset() { if (progress_override & (PROGRESS_MASK + 1U)) set_progress(0); }
     #endif
-    #if ENABLED(SHOW_REMAINING_TIME)
+    #if EITHER(SHOW_REMAINING_TIME, SET_PROGRESS_MANUALLY)
       static uint32_t _calculated_remaining_time() {
         const duration_t elapsed = print_job_timer.duration();
         const progress_t progress = _get_progress();
         return progress ? elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress : 0;
       }
-      #if ENABLED(USE_M73_REMAINING_TIME)
+      #if ENABLED(SET_REMAINING_TIME)
         static uint32_t remaining_time;
         FORCE_INLINE static void set_remaining_time(const uint32_t r) { remaining_time = r; }
         FORCE_INLINE static uint32_t get_remaining_time() { return remaining_time ?: _calculated_remaining_time(); }
         FORCE_INLINE static void reset_remaining_time() { set_remaining_time(0); }
       #else
         FORCE_INLINE static uint32_t get_remaining_time() { return _calculated_remaining_time(); }
       #endif
+      #if ENABLED(SET_INTERACTION_TIME)
+        static uint32_t interaction_time;
+        FORCE_INLINE static void set_interaction_time(const uint32_t r) { interaction_time = r; }
+        FORCE_INLINE static void reset_interaction_time() { set_interaction_time(0); }
+      #endif
     #endif
     static progress_t _get_progress();
     #if HAS_PRINT_PROGRESS_PERMYRIAD
       FORCE_INLINE static uint16_t get_progress_permyriad() { return _get_progress(); }
     #endif
     static uint8_t get_progress_percent() { return uint8_t(_get_progress() / (PROGRESS_SCALE)); }
+    #if LCD_WITH_BLINK
+      #if ENABLED(SHOW_PROGRESS_PERCENT)
+        static void drawPercent();
+      #endif
+      #if ENABLED(SHOW_ELAPSED_TIME)
+        static void drawElapsed();
+      #endif
+      #if ENABLED(SHOW_REMAINING_TIME)
+        static void drawRemain();
+      #endif
+      #if ENABLED(SHOW_INTERACTION_TIME)
+        static void drawInter();
+      #endif
+      static void rotate_progress();
+    #endif
   #else
     static constexpr uint8_t get_progress_percent() { return 0; }
   #endif
 
   #if HAS_STATUS_MESSAGE
 
     #if EITHER(HAS_WIRED_LCD, DWIN_LCD_PROUI)
       #if ENABLED(STATUS_MESSAGE_SCROLLING)
         #define MAX_MESSAGE_LENGTH _MAX(LONG_FILENAME_LENGTH, MAX_LANG_CHARSIZE * 2 * (LCD_WIDTH))
       #else
@@ -383,21 +403,21 @@ public:
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 
     #if BOTH(HAS_MARLINUI_MENU, PSU_CONTROL)
       static void poweroff();
     #endif
 
-    #if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
+    #if LCD_WITH_BLINK
       static bool get_blink();
     #endif
 
     #if HAS_WIRED_LCD
 
       static millis_t next_button_update_ms;
 
       static LCDViewAction lcdDrawUpdate;
       FORCE_INLINE static bool should_draw() { return bool(lcdDrawUpdate); }
       FORCE_INLINE static void refresh(const LCDViewAction type) { lcdDrawUpdate = type; }

commit 2f91154cbdcec3b81da9913bdd16556e8c775d06
Author: EvilGremlin <22657714+EvilGremlin@users.noreply.github.com>
Date:   Thu Aug 25 20:16:55 2022 +0300

    ♻️ Display sleep minutes, encoder disable option (#24618)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index b2a9bb5de9..d2e3708907 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -263,34 +263,33 @@ public:
     #ifndef LCD_BRIGHTNESS_DEFAULT
       #define LCD_BRIGHTNESS_DEFAULT LCD_BRIGHTNESS_MAX
     #endif
     static uint8_t brightness;
     static bool backlight;
     static void _set_brightness(); // Implementation-specific
     static void set_brightness(const uint8_t value);
     FORCE_INLINE static void refresh_brightness() { set_brightness(brightness); }
   #endif
 
-  #if LCD_BACKLIGHT_TIMEOUT
-    #define LCD_BKL_TIMEOUT_MIN 1u
-    #define LCD_BKL_TIMEOUT_MAX UINT16_MAX // Slightly more than 18 hours
-    static uint16_t lcd_backlight_timeout;
+  #if LCD_BACKLIGHT_TIMEOUT_MINS
+    static constexpr uint8_t backlight_timeout_min = 0;
+    static constexpr uint8_t backlight_timeout_max = 99;
+    static uint8_t backlight_timeout_minutes;
     static millis_t backlight_off_ms;
     static void refresh_backlight_timeout();
   #elif HAS_DISPLAY_SLEEP
-    #define SLEEP_TIMEOUT_MIN 0
-    #define SLEEP_TIMEOUT_MAX 99
+    static constexpr uint8_t sleep_timeout_min = 0;
+    static constexpr uint8_t sleep_timeout_max = 99;
     static uint8_t sleep_timeout_minutes;
     static millis_t screen_timeout_millis;
     static void refresh_screen_timeout();
-    static void sleep_on();
-    static void sleep_off();
+    static void sleep_display(const bool sleep=true);
   #endif
 
   #if HAS_DWIN_E3V2_BASIC
     static void refresh();
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }
   #endif
 

commit f4b6870ad151d5b00083c077c501ce1522c0027d
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Sat Jul 30 17:51:25 2022 -0700

    ✨ Encoder Noise Filter (#24538)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 6bd9ec8737..b2a9bb5de9 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -687,25 +687,21 @@ public:
       static volatile uint8_t keypad_buttons;
       static bool handle_keypad();
     #endif
     #if HAS_SLOW_BUTTONS
       static volatile uint8_t slow_buttons;
       static uint8_t read_slow_buttons();
     #endif
 
     static void update_buttons();
 
-    #if HAS_ENCODER_NOISE
-      #ifndef ENCODER_SAMPLES
-        #define ENCODER_SAMPLES 10
-      #endif
-
+    #if ENABLED(ENCODER_NOISE_FILTER)
       /**
        * Some printers may have issues with EMI noise especially using a motherboard with 3.3V logic levels
        * it may cause the logical LOW to float into the undefined region and register as a logical HIGH
        * causing it to erroneously register as if someone clicked the button and in worst case make the
        * printer unusable in practice.
        */
       static bool hw_button_pressed() {
         LOOP_L_N(s, ENCODER_SAMPLES) {
           if (!BUTTON_CLICK()) return false;
           safe_delay(1);

commit 007af4776880fda761e925bce383ac41a7769833
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jul 22 21:59:00 2022 -0500

    ✨ Reinstate JyersUI

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index a4166c4100..6bd9ec8737 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -76,24 +76,26 @@ typedef bool (*statusResetFunc_t)();
       void _wrap_string(uint8_t &col, uint8_t &row, const char * const string, read_byte_cb_t cb_read_byte, const bool wordwrap=false);
       inline void wrap_string_P(uint8_t &col, uint8_t &row, PGM_P const pstr, const bool wordwrap=false) { _wrap_string(col, row, pstr, read_byte_rom, wordwrap); }
       inline void wrap_string(uint8_t &col, uint8_t &row, const char * const string, const bool wordwrap=false) { _wrap_string(col, row, string, read_byte_ram, wordwrap); }
     #endif
 
     typedef void (*screenFunc_t)();
     typedef void (*menuAction_t)();
 
   #endif // HAS_MARLINUI_MENU
 
-  #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_BUTTONS, 50, 100)
-
 #endif // HAS_WIRED_LCD
 
+#if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
+  #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_BUTTONS, 50, 100)
+#endif
+
 #if HAS_MARLINUI_U8GLIB
   enum MarlinFont : uint8_t {
     FONT_STATUSMENU = 1,
     FONT_EDIT,
     FONT_MENU
   };
 #else
   enum HD44780CharSet : uint8_t {
     CHARSET_MENU,
     CHARSET_INFO,
@@ -382,21 +384,21 @@ public:
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 
     #if BOTH(HAS_MARLINUI_MENU, PSU_CONTROL)
       static void poweroff();
     #endif
 
-    #if HAS_WIRED_LCD
+    #if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
       static bool get_blink();
     #endif
 
     #if HAS_WIRED_LCD
 
       static millis_t next_button_update_ms;
 
       static LCDViewAction lcdDrawUpdate;
       FORCE_INLINE static bool should_draw() { return bool(lcdDrawUpdate); }
       FORCE_INLINE static void refresh(const LCDViewAction type) { lcdDrawUpdate = type; }
@@ -619,21 +621,21 @@ public:
     static bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }
   #else
     static constexpr bool lcd_clicked = false;
     static bool use_click() { return false; }
   #endif
 
-  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_LCD_PROUI)
+  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_LCD_PROUI, DWIN_CREALITY_LCD_JYERSUI)
     static void pause_show_message(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
   #else
     static void _pause_show_message() {}
     #define pause_show_message(...) _pause_show_message()
   #endif
 
   //
   // EEPROM: Reset / Init / Load / Store
   //
   #if HAS_MARLINUI_MENU

commit 5f2908a117ab45cf9e5a03a39e499979a40bf0f3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 18 19:53:36 2022 -0500

    ♻️ Small sound / buzz refactor (#24520)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 9d2fba446a..a4166c4100 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -218,26 +218,26 @@ public:
   #if HAS_MARLINUI_U8GLIB
     static void update_language_font();
   #endif
 
   #if ENABLED(SOUND_MENU_ITEM)
     static bool sound_on; // Initialized by settings.load()
   #else
     static constexpr bool sound_on = true;
   #endif
 
-  #if HAS_BUZZER
+  #if USE_MARLINUI_BUZZER
     static void buzz(const long duration, const uint16_t freq);
   #endif
 
-  FORCE_INLINE static void chirp() {
-    TERN_(HAS_CHIRP, TERN(HAS_BUZZER, buzz, BUZZ)(LCD_FEEDBACK_FREQUENCY_DURATION_MS, LCD_FEEDBACK_FREQUENCY_HZ));
+  static void chirp() {
+    TERN_(HAS_CHIRP, TERN(USE_MARLINUI_BUZZER, buzz, BUZZ)(LCD_FEEDBACK_FREQUENCY_DURATION_MS, LCD_FEEDBACK_FREQUENCY_HZ));
   }
 
   #if ENABLED(LCD_HAS_STATUS_INDICATORS)
     static void update_indicators();
   #endif
 
   // LCD implementations
   static void clear_lcd();
 
   #if BOTH(HAS_MARLINUI_MENU, TOUCH_SCREEN_CALIBRATION)
@@ -446,21 +446,21 @@ public:
 
       #if BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
         static millis_t next_filament_display;
       #endif
 
       #if HAS_TOUCH_SLEEP
         static void wakeup_screen();
       #endif
 
       static void quick_feedback(const bool clear_buttons=true);
-      #if HAS_BUZZER
+      #if HAS_SOUND
         static void completion_feedback(const bool good=true);
       #else
         static void completion_feedback(const bool=true) { TERN_(HAS_TOUCH_SLEEP, wakeup_screen()); }
       #endif
 
       #if ENABLED(ADVANCED_PAUSE_FEATURE)
         static void draw_hotend_status(const uint8_t row, const uint8_t extruder);
       #endif
 
       #if HAS_TOUCH_BUTTONS

commit ed2071aabdebf0c1d9b82b6d8575b8fefae763c4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 18 19:52:47 2022 -0500

    🩹 Fix manual move titles (#24518)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 3e7a9ca1b1..9d2fba446a 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -169,20 +169,22 @@ typedef bool (*statusResetFunc_t)();
     }
     #if IS_KINEMATIC
       static bool processing;
     #else
       static bool constexpr processing = false;
     #endif
     static void task();
     static void soon(const AxisEnum axis OPTARG(MULTI_E_MANUAL, const int8_t eindex=active_extruder));
   };
 
+  void lcd_move_axis(const AxisEnum);
+
 #endif
 
 ////////////////////////////////////////////
 //////////// MarlinUI Singleton ////////////
 ////////////////////////////////////////////
 
 class MarlinUI;
 extern MarlinUI ui;
 
 class MarlinUI {

commit f65f7a685bea9f4eddaf2049e4435f2043b88ffe
Author: Jason Smith <jason.inet@gmail.com>
Date:   Thu Jul 7 21:43:56 2022 -0700

    🩹 Fix LCD_BACKLIGHT_TIMEOUT compile (#24463)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 82b8d78a02..3e7a9ca1b1 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -25,24 +25,20 @@
 #include "../sd/cardreader.h"
 #include "../module/motion.h"
 #include "../libs/buzzer.h"
 
 #include "buttons.h"
 
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "tft_io/touch_calibration.h"
 #endif
 
-#if ANY(HAS_MARLINUI_MENU, ULTIPANEL_FEEDMULTIPLY, SOFT_RESET_ON_KILL)
-  #define HAS_ENCODER_ACTION 1
-#endif
-
 #if E_MANUAL > 1
   #define MULTI_E_MANUAL 1
 #endif
 
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
   #include "../feature/pause.h"
@@ -264,22 +260,22 @@ public:
       #define LCD_BRIGHTNESS_DEFAULT LCD_BRIGHTNESS_MAX
     #endif
     static uint8_t brightness;
     static bool backlight;
     static void _set_brightness(); // Implementation-specific
     static void set_brightness(const uint8_t value);
     FORCE_INLINE static void refresh_brightness() { set_brightness(brightness); }
   #endif
 
   #if LCD_BACKLIGHT_TIMEOUT
-    #define LCD_BKL_TIMEOUT_MIN 1
-    #define LCD_BKL_TIMEOUT_MAX (60*60*18) // 18 hours max within uint16_t
+    #define LCD_BKL_TIMEOUT_MIN 1u
+    #define LCD_BKL_TIMEOUT_MAX UINT16_MAX // Slightly more than 18 hours
     static uint16_t lcd_backlight_timeout;
     static millis_t backlight_off_ms;
     static void refresh_backlight_timeout();
   #elif HAS_DISPLAY_SLEEP
     #define SLEEP_TIMEOUT_MIN 0
     #define SLEEP_TIMEOUT_MAX 99
     static uint8_t sleep_timeout_minutes;
     static millis_t screen_timeout_millis;
     static void refresh_screen_timeout();
     static void sleep_on();

commit f73fad1b2fa6e70b3d632969ecf2773bee826643
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jul 6 19:34:45 2022 -0500

    🔥 Remove JyersUI (#24459)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 1c2c484323..82b8d78a02 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -80,25 +80,23 @@ typedef bool (*statusResetFunc_t)();
       void _wrap_string(uint8_t &col, uint8_t &row, const char * const string, read_byte_cb_t cb_read_byte, const bool wordwrap=false);
       inline void wrap_string_P(uint8_t &col, uint8_t &row, PGM_P const pstr, const bool wordwrap=false) { _wrap_string(col, row, pstr, read_byte_rom, wordwrap); }
       inline void wrap_string(uint8_t &col, uint8_t &row, const char * const string, const bool wordwrap=false) { _wrap_string(col, row, string, read_byte_ram, wordwrap); }
     #endif
 
     typedef void (*screenFunc_t)();
     typedef void (*menuAction_t)();
 
   #endif // HAS_MARLINUI_MENU
 
-#endif // HAS_WIRED_LCD
-
-#if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
   #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_BUTTONS, 50, 100)
-#endif
+
+#endif // HAS_WIRED_LCD
 
 #if HAS_MARLINUI_U8GLIB
   enum MarlinFont : uint8_t {
     FONT_STATUSMENU = 1,
     FONT_EDIT,
     FONT_MENU
   };
 #else
   enum HD44780CharSet : uint8_t {
     CHARSET_MENU,
@@ -386,21 +384,21 @@ public:
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 
     #if BOTH(HAS_MARLINUI_MENU, PSU_CONTROL)
       static void poweroff();
     #endif
 
-    #if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
+    #if HAS_WIRED_LCD
       static bool get_blink();
     #endif
 
     #if HAS_WIRED_LCD
 
       static millis_t next_button_update_ms;
 
       static LCDViewAction lcdDrawUpdate;
       FORCE_INLINE static bool should_draw() { return bool(lcdDrawUpdate); }
       FORCE_INLINE static void refresh(const LCDViewAction type) { lcdDrawUpdate = type; }
@@ -623,21 +621,21 @@ public:
     static bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }
   #else
     static constexpr bool lcd_clicked = false;
     static bool use_click() { return false; }
   #endif
 
-  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_LCD_PROUI, DWIN_CREALITY_LCD_JYERSUI)
+  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_LCD_PROUI)
     static void pause_show_message(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
   #else
     static void _pause_show_message() {}
     #define pause_show_message(...) _pause_show_message()
   #endif
 
   //
   // EEPROM: Reset / Init / Load / Store
   //
   #if HAS_MARLINUI_MENU

commit d8545551fed8498f1c420ec3b301d4d77d0de8b5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jun 26 05:47:18 2022 -0500

    🐛 Fix Manual Move axis selection (#24404)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 8ae8a8b7f5..1c2c484323 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -130,55 +130,54 @@ typedef bool (*statusResetFunc_t)();
     #if MULTI_E_MANUAL
       static int8_t e_index;
     #else
       static int8_t constexpr e_index = 0;
     #endif
     static millis_t start_time;
     #if IS_KINEMATIC
       static xyze_pos_t all_axes_destination;
     #endif
   public:
+    static screenFunc_t screen_ptr;
     static float menu_scale;
     #if IS_KINEMATIC
       static float offset;
     #endif
+    #if ENABLED(MANUAL_E_MOVES_RELATIVE)
+      static float e_origin;
+    #endif
     template <typename T>
-    void set_destination(const T& dest) {
+    static void set_destination(const T& dest) {
       #if IS_KINEMATIC
         // Moves are segmented, so the entire move is not submitted at once.
         // Using a separate variable prevents corrupting the in-progress move.
         all_axes_destination = current_position;
         all_axes_destination.set(dest);
       #else
         // Moves are submitted as single line to the planner using buffer_line.
         current_position.set(dest);
       #endif
     }
-    float axis_value(const AxisEnum axis) {
+    static float axis_value(const AxisEnum axis) {
       return NATIVE_TO_LOGICAL(processing ? destination[axis] : SUM_TERN(IS_KINEMATIC, current_position[axis], offset), axis);
     }
-    bool apply_diff(const AxisEnum axis, const_float_t diff, const_float_t min, const_float_t max) {
+    static bool apply_diff(const AxisEnum axis, const_float_t diff, const_float_t min, const_float_t max) {
       #if IS_KINEMATIC
         float &valref = offset;
         const float rmin = min - current_position[axis], rmax = max - current_position[axis];
       #else
         float &valref = current_position[axis];
         const float rmin = min, rmax = max;
       #endif
       valref += diff;
       const float pre = valref;
-      if (min != max) {
-        if (diff < 0)
-          NOLESS(valref, rmin);
-        else
-          NOMORE(valref, rmax);
-      }
+      if (min != max) { if (diff < 0) NOLESS(valref, rmin); else NOMORE(valref, rmax); }
       return pre != valref;
     }
     #if IS_KINEMATIC
       static bool processing;
     #else
       static bool constexpr processing = false;
     #endif
     static void task();
     static void soon(const AxisEnum axis OPTARG(MULTI_E_MANUAL, const int8_t eindex=active_extruder));
   };
@@ -545,20 +544,21 @@ public:
       static bool encoderRateMultiplierEnabled;
       static millis_t lastEncoderMovementMillis;
       static void enable_encoder_multiplier(const bool onoff);
       #define ENCODER_RATE_MULTIPLY(F) (ui.encoderRateMultiplierEnabled = F)
     #else
       #define ENCODER_RATE_MULTIPLY(F) NOOP
     #endif
 
     // Manual Movement
     static ManualMove manual_move;
+    static bool can_show_slider() { return !external_control && currentScreen != manual_move.screen_ptr; }
 
     // Select Screen (modal NO/YES style dialog)
     static bool selection;
     static void set_selection(const bool sel) { selection = sel; }
     static bool update_selection();
 
     static void synchronize(FSTR_P const msg=nullptr);
 
     static screenFunc_t currentScreen;
     static bool screen_changed;

commit 58d1b1be289a6e51a36f8a8b2d24baa59a99e9ff
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Wed Jun 22 22:08:24 2022 +1200

    🩹 Fix DGUS (MKS) compile (#24378)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 66e5e0c261..8ae8a8b7f5 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -495,21 +495,20 @@ public:
 
     static void draw_kill_screen();
     static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
     #if DISABLED(LIGHTWEIGHT_UI)
       static void draw_status_message(const bool blink);
     #endif
 
   #else // No LCD
 
     static void update() {}
-    static void return_to_status() {}
     static void kill_screen(FSTR_P const, FSTR_P const) {}
 
   #endif
 
   #if ENABLED(SDSUPPORT)
     #if BOTH(SCROLL_LONG_FILENAMES, HAS_MARLINUI_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
@@ -602,20 +601,22 @@ public:
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void ubl_mesh_edit_start(const_float_t initial);
       static float ubl_mesh_value();
     #endif
 
     static void draw_select_screen_prompt(FSTR_P const pref, const char * const string=nullptr, FSTR_P const suff=nullptr);
 
   #else
 
+    static void return_to_status() {}
+
     static constexpr bool on_status_screen() { return true; }
 
     #if HAS_WIRED_LCD
       FORCE_INLINE static void run_current_screen() { status_screen(); }
     #endif
 
   #endif
 
   #if EITHER(HAS_MARLINUI_MENU, EXTENSIBLE_UI)
     static bool lcd_clicked;

commit a5e1d4c50ae40c8203d8490be83ef86e16ebf1c2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 22 19:56:46 2022 -0500

    ♻️ Apply F() to more LCD code (#24228)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index c27ced6fdd..66e5e0c261 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -513,21 +513,21 @@ public:
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif
     static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
   #endif
 
   #if HAS_PREHEAT
     enum PreheatTarget : uint8_t { PT_HOTEND, PT_BED, PT_FAN, PT_CHAMBER, PT_ALL = 0xFF };
     static preheat_t material_preset[PREHEAT_COUNT];
-    static PGM_P get_preheat_label(const uint8_t m);
+    static FSTR_P get_preheat_label(const uint8_t m);
     static void apply_preheat(const uint8_t m, const uint8_t pmask, const uint8_t e=active_extruder);
     static void preheat_set_fan(const uint8_t m) { TERN_(HAS_FAN, apply_preheat(m, _BV(PT_FAN))); }
     static void preheat_hotend(const uint8_t m, const uint8_t e=active_extruder) { TERN_(HAS_HOTEND, apply_preheat(m, _BV(PT_HOTEND))); }
     static void preheat_hotend_and_fan(const uint8_t m, const uint8_t e=active_extruder) { preheat_hotend(m, e); preheat_set_fan(m); }
     static void preheat_bed(const uint8_t m) { TERN_(HAS_HEATED_BED, apply_preheat(m, _BV(PT_BED))); }
     static void preheat_all(const uint8_t m) { apply_preheat(m, PT_ALL); }
   #endif
 
   static void reset_status_timeout(const millis_t ms) {
     TERN(SCREENS_CAN_TIME_OUT, return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS, UNUSED(ms));
@@ -552,21 +552,21 @@ public:
     #endif
 
     // Manual Movement
     static ManualMove manual_move;
 
     // Select Screen (modal NO/YES style dialog)
     static bool selection;
     static void set_selection(const bool sel) { selection = sel; }
     static bool update_selection();
 
-    static void synchronize(PGM_P const msg=nullptr);
+    static void synchronize(FSTR_P const msg=nullptr);
 
     static screenFunc_t currentScreen;
     static bool screen_changed;
     static void goto_screen(const screenFunc_t screen, const uint16_t encoder=0, const uint8_t top=0, const uint8_t items=0);
     static void push_current_screen();
 
     // goto_previous_screen and go_back may also be used as menu item callbacks
     static void _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, const bool is_back));
     static void goto_previous_screen() { _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, false)); }
     static void go_back()              { _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, true)); }
@@ -598,21 +598,21 @@ public:
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void ubl_plot(const uint8_t x_plot, const uint8_t y_plot);
     #endif
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void ubl_mesh_edit_start(const_float_t initial);
       static float ubl_mesh_value();
     #endif
 
-    static void draw_select_screen_prompt(PGM_P const pref, const char * const string=nullptr, PGM_P const suff=nullptr);
+    static void draw_select_screen_prompt(FSTR_P const pref, const char * const string=nullptr, FSTR_P const suff=nullptr);
 
   #else
 
     static constexpr bool on_status_screen() { return true; }
 
     #if HAS_WIRED_LCD
       FORCE_INLINE static void run_current_screen() { status_screen(); }
     #endif
 
   #endif

commit 04fe50936e23a8aca7a400591e700c1220f68b3f
Author: Pauli Jokela <pauli.jokela@didstopia.com>
Date:   Thu May 12 05:23:16 2022 +0300

    ✨ SOUND_ON_DEFAULT option (#24102)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index cb2d8f8672..c27ced6fdd 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -14,29 +14,26 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
+#include "../inc/MarlinConfig.h"
 #include "../sd/cardreader.h"
 #include "../module/motion.h"
-#include "buttons.h"
+#include "../libs/buzzer.h"
 
-#include "../inc/MarlinConfig.h"
-
-#if HAS_BUZZER
-  #include "../libs/buzzer.h"
-#endif
+#include "buttons.h"
 
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "tft_io/touch_calibration.h"
 #endif
 
 #if ANY(HAS_MARLINUI_MENU, ULTIPANEL_FEEDMULTIPLY, SOFT_RESET_ON_KILL)
   #define HAS_ENCODER_ACTION 1
 #endif
 
 #if E_MANUAL > 1
@@ -185,20 +182,23 @@ typedef bool (*statusResetFunc_t)();
     static void task();
     static void soon(const AxisEnum axis OPTARG(MULTI_E_MANUAL, const int8_t eindex=active_extruder));
   };
 
 #endif
 
 ////////////////////////////////////////////
 //////////// MarlinUI Singleton ////////////
 ////////////////////////////////////////////
 
+class MarlinUI;
+extern MarlinUI ui;
+
 class MarlinUI {
 public:
 
   MarlinUI() {
     TERN_(HAS_MARLINUI_MENU, currentScreen = status_screen);
   }
 
   static void init();
 
   #if HAS_DISPLAY || HAS_DWIN_E3V2
@@ -218,31 +218,31 @@ public:
   #if HAS_MULTI_LANGUAGE
     static uint8_t language;
     static void set_language(const uint8_t lang);
   #endif
 
   #if HAS_MARLINUI_U8GLIB
     static void update_language_font();
   #endif
 
   #if ENABLED(SOUND_MENU_ITEM)
-    static bool buzzer_enabled; // Initialized by settings.load()
+    static bool sound_on; // Initialized by settings.load()
   #else
-    static constexpr bool buzzer_enabled = true;
+    static constexpr bool sound_on = true;
   #endif
 
   #if HAS_BUZZER
     static void buzz(const long duration, const uint16_t freq);
   #endif
 
   FORCE_INLINE static void chirp() {
-    TERN_(HAS_CHIRP, buzz(LCD_FEEDBACK_FREQUENCY_DURATION_MS, LCD_FEEDBACK_FREQUENCY_HZ));
+    TERN_(HAS_CHIRP, TERN(HAS_BUZZER, buzz, BUZZ)(LCD_FEEDBACK_FREQUENCY_DURATION_MS, LCD_FEEDBACK_FREQUENCY_HZ));
   }
 
   #if ENABLED(LCD_HAS_STATUS_INDICATORS)
     static void update_indicators();
   #endif
 
   // LCD implementations
   static void clear_lcd();
 
   #if BOTH(HAS_MARLINUI_MENU, TOUCH_SCREEN_CALIBRATION)
@@ -779,16 +779,14 @@ private:
     static void draw_status_screen();
     #if HAS_GRAPHICAL_TFT
       static void tft_idle();
       #if ENABLED(TOUCH_SCREEN)
         static bool touch_pressed();
       #endif
     #endif
   #endif
 };
 
-extern MarlinUI ui;
-
 #define LCD_MESSAGE_F(S)       ui.set_status(F(S))
 #define LCD_MESSAGE(M)         ui.set_status(GET_TEXT_F(M))
 #define LCD_ALERTMESSAGE_F(S)  ui.set_alert_status(F(S))
 #define LCD_ALERTMESSAGE(M)    ui.set_alert_status(GET_TEXT_F(M))

commit 0ff3035f3a45c6a818e6ca0dd6f82b6a47e6b78d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Apr 21 07:07:04 2022 -0500

    🚸 Prevent accidental button press

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 4cff3c30f2..cb2d8f8672 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -710,22 +710,20 @@ public:
         LOOP_L_N(s, ENCODER_SAMPLES) {
           if (!BUTTON_CLICK()) return false;
           safe_delay(1);
         }
         return true;
       }
     #else
       static bool hw_button_pressed() { return BUTTON_CLICK(); }
     #endif
 
-    static bool button_pressed() { return hw_button_pressed() || TERN0(TOUCH_SCREEN, touch_pressed()); }
-
     #if EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
       static void wait_for_release();
     #endif
 
     static uint32_t encoderPosition;
 
     #define ENCODERBASE (TERN(REVERSE_ENCODER_DIRECTION, -1, +1))
 
     #if EITHER(REVERSE_MENU_DIRECTION, REVERSE_SELECT_DIRECTION)
       static int8_t encoderDirection;
@@ -743,23 +741,26 @@ public:
       TERN_(REVERSE_MENU_DIRECTION, encoderDirection = -(ENCODERBASE));
     }
 
     FORCE_INLINE static void encoder_direction_select() {
       TERN_(REVERSE_SELECT_DIRECTION, encoderDirection = -(ENCODERBASE));
     }
 
   #else
 
     static void update_buttons() {}
+    static bool hw_button_pressed() { return false; }
 
   #endif
 
+  static bool button_pressed() { return hw_button_pressed() || TERN0(TOUCH_SCREEN, touch_pressed()); }
+
   #if ENABLED(TOUCH_SCREEN_CALIBRATION)
     static void touch_calibration_screen();
   #endif
 
   #if HAS_GRAPHICAL_TFT
     static void move_axis_screen();
   #endif
 
 private:
 

commit 32e6767b5acfc57ced0a58c269ff5ae1d6f5cfd2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Apr 4 15:57:03 2022 -0500

    ✨ DOGM Display Sleep (#23992)
    
    Co-authored-by: borland1 <barryorlando@hotmail.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index d9404541d2..4cff3c30f2 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -272,20 +272,28 @@ public:
     static void set_brightness(const uint8_t value);
     FORCE_INLINE static void refresh_brightness() { set_brightness(brightness); }
   #endif
 
   #if LCD_BACKLIGHT_TIMEOUT
     #define LCD_BKL_TIMEOUT_MIN 1
     #define LCD_BKL_TIMEOUT_MAX (60*60*18) // 18 hours max within uint16_t
     static uint16_t lcd_backlight_timeout;
     static millis_t backlight_off_ms;
     static void refresh_backlight_timeout();
+  #elif HAS_DISPLAY_SLEEP
+    #define SLEEP_TIMEOUT_MIN 0
+    #define SLEEP_TIMEOUT_MAX 99
+    static uint8_t sleep_timeout_minutes;
+    static millis_t screen_timeout_millis;
+    static void refresh_screen_timeout();
+    static void sleep_on();
+    static void sleep_off();
   #endif
 
   #if HAS_DWIN_E3V2_BASIC
     static void refresh();
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }
   #endif
 

commit b7ffcd6941e8d75fefc5c454ad0e334d554c4cea
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Sat Mar 26 06:34:20 2022 +0700

    ✨ STATUS_MESSAGE_TIMEOUT_SEC (#23135)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 17852a5039..d9404541d2 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -337,20 +337,24 @@ public:
       #else
         #define MAX_MESSAGE_LENGTH (MAX_LANG_CHARSIZE * (LCD_WIDTH))
       #endif
     #else
       #define MAX_MESSAGE_LENGTH 63
     #endif
 
     static char status_message[];
     static uint8_t alert_level; // Higher levels block lower levels
 
+    #if HAS_STATUS_MESSAGE_TIMEOUT
+      static millis_t status_message_expire_ms; // Reset some status messages after a timeout
+    #endif
+
     #if ENABLED(STATUS_MESSAGE_SCROLLING)
       static uint8_t status_scroll_offset;
       static void advance_status_scroll();
       static char* status_and_len(uint8_t &len);
     #endif
 
     static bool has_status();
     static void reset_status(const bool no_welcome=false);
     static void set_alert_status(FSTR_P const fstr);
     static void reset_alert_level() { alert_level = 0; }

commit fd742616ba6fd2db1607df197dea142cbf1a9d3f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 25 17:35:00 2022 -0500

    🚸 Clear "heating/cooling" message on temp reached

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index b9e2e9b692..17852a5039 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -52,20 +52,22 @@
 #endif
 
 #if ENABLED(DWIN_CREALITY_LCD)
   #include "e3v2/creality/dwin.h"
 #elif ENABLED(DWIN_LCD_PROUI)
   #include "e3v2/proui/dwin.h"
 #endif
 
 #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
 
+typedef bool (*statusResetFunc_t)();
+
 #if HAS_WIRED_LCD
 
   enum LCDViewAction : uint8_t {
     LCDVIEW_NONE,
     LCDVIEW_REDRAW_NOW,
     LCDVIEW_CALL_REDRAW_NEXT,
     LCDVIEW_CLEAR_CALL_REDRAW,
     LCDVIEW_CALL_NO_REDRAW
   };
 
@@ -345,25 +347,29 @@ public:
     #if ENABLED(STATUS_MESSAGE_SCROLLING)
       static uint8_t status_scroll_offset;
       static void advance_status_scroll();
       static char* status_and_len(uint8_t &len);
     #endif
 
     static bool has_status();
     static void reset_status(const bool no_welcome=false);
     static void set_alert_status(FSTR_P const fstr);
     static void reset_alert_level() { alert_level = 0; }
+
+    static statusResetFunc_t status_reset_callback;
+    static void set_status_reset_fn(const statusResetFunc_t fn=nullptr) { status_reset_callback = fn; }
   #else
     static constexpr bool has_status() { return false; }
     static void reset_status(const bool=false) {}
     static void set_alert_status(FSTR_P const) {}
     static void reset_alert_level() {}
+    static void set_status_reset_fn(const statusResetFunc_t=nullptr) {}
   #endif
 
   static void set_status(const char * const cstr, const bool persist=false);
   static void set_status(FSTR_P const fstr, const int8_t level=0);
   static void status_printf(int8_t level, FSTR_P const fmt, ...);
 
   #if HAS_DISPLAY
 
     static void update();
 

commit 8dfdf51678a4a3975df8250bedf3489fd4835796
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 25 17:09:55 2022 -0500

    🎨 Format, use status macros

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 7a6b3992b4..b9e2e9b692 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -32,24 +32,20 @@
 #endif
 
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "tft_io/touch_calibration.h"
 #endif
 
 #if ANY(HAS_MARLINUI_MENU, ULTIPANEL_FEEDMULTIPLY, SOFT_RESET_ON_KILL)
   #define HAS_ENCODER_ACTION 1
 #endif
 
-#if HAS_STATUS_MESSAGE
-  #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
-#endif
-
 #if E_MANUAL > 1
   #define MULTI_E_MANUAL 1
 #endif
 
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
   #include "../feature/pause.h"

commit 4ff063440d5bbf00b43c933caffe83940b58b4f0
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 25 17:09:26 2022 -0500

    🐛 Fix status_printf alert level

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 30c22188e4..7a6b3992b4 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -358,21 +358,21 @@ public:
     static void reset_alert_level() { alert_level = 0; }
   #else
     static constexpr bool has_status() { return false; }
     static void reset_status(const bool=false) {}
     static void set_alert_status(FSTR_P const) {}
     static void reset_alert_level() {}
   #endif
 
   static void set_status(const char * const cstr, const bool persist=false);
   static void set_status(FSTR_P const fstr, const int8_t level=0);
-  static void status_printf(const uint8_t level, FSTR_P const fmt, ...);
+  static void status_printf(int8_t level, FSTR_P const fmt, ...);
 
   #if HAS_DISPLAY
 
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 

commit 4a50d89bdb5415403f02c3427fa4ad235fd316d7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Mar 24 20:29:50 2022 -0500

    ✏️ Encoder noise followup
    
    Followup to #23925

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index b28687ee91..30c22188e4 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -682,22 +682,22 @@ public:
     static void update_buttons();
 
     #if HAS_ENCODER_NOISE
       #ifndef ENCODER_SAMPLES
         #define ENCODER_SAMPLES 10
       #endif
 
       /**
        * Some printers may have issues with EMI noise especially using a motherboard with 3.3V logic levels
        * it may cause the logical LOW to float into the undefined region and register as a logical HIGH
-       * causing it to errorenously register as if someone clicked the button and in worst case make the printer
-       * unusable in practice.
+       * causing it to erroneously register as if someone clicked the button and in worst case make the
+       * printer unusable in practice.
        */
       static bool hw_button_pressed() {
         LOOP_L_N(s, ENCODER_SAMPLES) {
           if (!BUTTON_CLICK()) return false;
           safe_delay(1);
         }
         return true;
       }
     #else
       static bool hw_button_pressed() { return BUTTON_CLICK(); }

commit a8cf2909f79105bfafce207cd3b914e63f5c8545
Author: Fredrik Andersson <fredrikandersson@mac.com>
Date:   Mon Mar 21 02:14:45 2022 +0100

    ✨ Encoder button noise filter (#23925)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 83eb332105..b28687ee91 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -673,21 +673,45 @@ public:
     #if IS_RRW_KEYPAD
       static volatile uint8_t keypad_buttons;
       static bool handle_keypad();
     #endif
     #if HAS_SLOW_BUTTONS
       static volatile uint8_t slow_buttons;
       static uint8_t read_slow_buttons();
     #endif
 
     static void update_buttons();
-    static bool button_pressed() { return BUTTON_CLICK() || TERN(TOUCH_SCREEN, touch_pressed(), false); }
+
+    #if HAS_ENCODER_NOISE
+      #ifndef ENCODER_SAMPLES
+        #define ENCODER_SAMPLES 10
+      #endif
+
+      /**
+       * Some printers may have issues with EMI noise especially using a motherboard with 3.3V logic levels
+       * it may cause the logical LOW to float into the undefined region and register as a logical HIGH
+       * causing it to errorenously register as if someone clicked the button and in worst case make the printer
+       * unusable in practice.
+       */
+      static bool hw_button_pressed() {
+        LOOP_L_N(s, ENCODER_SAMPLES) {
+          if (!BUTTON_CLICK()) return false;
+          safe_delay(1);
+        }
+        return true;
+      }
+    #else
+      static bool hw_button_pressed() { return BUTTON_CLICK(); }
+    #endif
+
+    static bool button_pressed() { return hw_button_pressed() || TERN0(TOUCH_SCREEN, touch_pressed()); }
+
     #if EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
       static void wait_for_release();
     #endif
 
     static uint32_t encoderPosition;
 
     #define ENCODERBASE (TERN(REVERSE_ENCODER_DIRECTION, -1, +1))
 
     #if EITHER(REVERSE_MENU_DIRECTION, REVERSE_SELECT_DIRECTION)
       static int8_t encoderDirection;

commit 79b38e0e14074b52e0aeb98b08a686a99a9b1aad
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Fri Mar 11 15:06:49 2022 -0500

    🚸 Update Ender3 V2/S1 Pro UI (#23878)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 36cbb14c5c..83eb332105 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -360,29 +360,20 @@ public:
     static constexpr bool has_status() { return false; }
     static void reset_status(const bool=false) {}
     static void set_alert_status(FSTR_P const) {}
     static void reset_alert_level() {}
   #endif
 
   static void set_status(const char * const cstr, const bool persist=false);
   static void set_status(FSTR_P const fstr, const int8_t level=0);
   static void status_printf(const uint8_t level, FSTR_P const fmt, ...);
 
-  #if EITHER(HAS_DISPLAY, DWIN_LCD_PROUI)
-    static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
-    #if DISABLED(LIGHTWEIGHT_UI)
-      static void draw_status_message(const bool blink);
-    #endif
-  #else
-    static void kill_screen(FSTR_P const, FSTR_P const) {}
-  #endif
-
   #if HAS_DISPLAY
 
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 
     #if BOTH(HAS_MARLINUI_MENU, PSU_CONTROL)
@@ -482,25 +473,30 @@ public:
       static bool did_first_redraw;
       static bool old_is_printing;
     #endif
 
     #if EITHER(BABYSTEP_ZPROBE_GFX_OVERLAY, MESH_EDIT_GFX_OVERLAY)
       static void zoffset_overlay(const int8_t dir);
       static void zoffset_overlay(const_float_t zvalue);
     #endif
 
     static void draw_kill_screen();
+    static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
+    #if DISABLED(LIGHTWEIGHT_UI)
+      static void draw_status_message(const bool blink);
+    #endif
 
   #else // No LCD
 
     static void update() {}
     static void return_to_status() {}
+    static void kill_screen(FSTR_P const, FSTR_P const) {}
 
   #endif
 
   #if ENABLED(SDSUPPORT)
     #if BOTH(SCROLL_LONG_FILENAMES, HAS_MARLINUI_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif

commit 48b5362cf02ff12c9e9fc4d5825ceebe457ea34b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Mar 10 22:07:47 2022 -0600

    🔧 DWIN_CREALITY_LCD_ENHANCED => DWIN_LCD_PROUI
    
    Followup to #23624

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 15e9f73d65..36cbb14c5c 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -50,21 +50,21 @@
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
   #include "../feature/pause.h"
 #endif
 
 #if ENABLED(DWIN_CREALITY_LCD)
   #include "e3v2/creality/dwin.h"
-#elif ENABLED(DWIN_CREALITY_LCD_ENHANCED)
+#elif ENABLED(DWIN_LCD_PROUI)
   #include "e3v2/proui/dwin.h"
 #endif
 
 #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
 
 #if HAS_WIRED_LCD
 
   enum LCDViewAction : uint8_t {
     LCDVIEW_NONE,
     LCDVIEW_REDRAW_NOW,
@@ -326,21 +326,21 @@ public:
     #if HAS_PRINT_PROGRESS_PERMYRIAD
       FORCE_INLINE static uint16_t get_progress_permyriad() { return _get_progress(); }
     #endif
     static uint8_t get_progress_percent() { return uint8_t(_get_progress() / (PROGRESS_SCALE)); }
   #else
     static constexpr uint8_t get_progress_percent() { return 0; }
   #endif
 
   #if HAS_STATUS_MESSAGE
 
-    #if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_ENHANCED)
+    #if EITHER(HAS_WIRED_LCD, DWIN_LCD_PROUI)
       #if ENABLED(STATUS_MESSAGE_SCROLLING)
         #define MAX_MESSAGE_LENGTH _MAX(LONG_FILENAME_LENGTH, MAX_LANG_CHARSIZE * 2 * (LCD_WIDTH))
       #else
         #define MAX_MESSAGE_LENGTH (MAX_LANG_CHARSIZE * (LCD_WIDTH))
       #endif
     #else
       #define MAX_MESSAGE_LENGTH 63
     #endif
 
     static char status_message[];
@@ -360,21 +360,21 @@ public:
     static constexpr bool has_status() { return false; }
     static void reset_status(const bool=false) {}
     static void set_alert_status(FSTR_P const) {}
     static void reset_alert_level() {}
   #endif
 
   static void set_status(const char * const cstr, const bool persist=false);
   static void set_status(FSTR_P const fstr, const int8_t level=0);
   static void status_printf(const uint8_t level, FSTR_P const fmt, ...);
 
-  #if EITHER(HAS_DISPLAY, DWIN_CREALITY_LCD_ENHANCED)
+  #if EITHER(HAS_DISPLAY, DWIN_LCD_PROUI)
     static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
     #if DISABLED(LIGHTWEIGHT_UI)
       static void draw_status_message(const bool blink);
     #endif
   #else
     static void kill_screen(FSTR_P const, FSTR_P const) {}
   #endif
 
   #if HAS_DISPLAY
 
@@ -612,21 +612,21 @@ public:
     static bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }
   #else
     static constexpr bool lcd_clicked = false;
     static bool use_click() { return false; }
   #endif
 
-  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_ENHANCED, DWIN_CREALITY_LCD_JYERSUI)
+  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_LCD_PROUI, DWIN_CREALITY_LCD_JYERSUI)
     static void pause_show_message(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
   #else
     static void _pause_show_message() {}
     #define pause_show_message(...) _pause_show_message()
   #endif
 
   //
   // EEPROM: Reset / Init / Load / Store
   //
   #if HAS_MARLINUI_MENU

commit 0e7be8e8c4b1a7ca351ce19b462cac2d27fab82d
Author: M. FURIC Franck <francknos@gmail.com>
Date:   Sat Feb 26 23:54:04 2022 +0100

    ✨ LCD Backlight Timer (#23768)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 17c2468737..15e9f73d65 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -268,20 +268,28 @@ public:
     #ifndef LCD_BRIGHTNESS_DEFAULT
       #define LCD_BRIGHTNESS_DEFAULT LCD_BRIGHTNESS_MAX
     #endif
     static uint8_t brightness;
     static bool backlight;
     static void _set_brightness(); // Implementation-specific
     static void set_brightness(const uint8_t value);
     FORCE_INLINE static void refresh_brightness() { set_brightness(brightness); }
   #endif
 
+  #if LCD_BACKLIGHT_TIMEOUT
+    #define LCD_BKL_TIMEOUT_MIN 1
+    #define LCD_BKL_TIMEOUT_MAX (60*60*18) // 18 hours max within uint16_t
+    static uint16_t lcd_backlight_timeout;
+    static millis_t backlight_off_ms;
+    static void refresh_backlight_timeout();
+  #endif
+
   #if HAS_DWIN_E3V2_BASIC
     static void refresh();
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }
   #endif
 
   #if HAS_PRINT_PROGRESS
     #if HAS_PRINT_PROGRESS_PERMYRIAD

commit 03516f05191b888b5378f0426bc86f41b6cb2d03
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Feb 13 14:44:24 2022 -0500

    ♻️ No ui.reinit_lcd on any ExtUI (#23722)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 5885866e5b..17c2468737 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -202,20 +202,22 @@ public:
   }
 
   static void init();
 
   #if HAS_DISPLAY || HAS_DWIN_E3V2
     static void init_lcd();
   #else
     static void init_lcd() {}
   #endif
 
+  static void reinit_lcd() { TERN_(REINIT_NOISY_LCD, init_lcd()); }
+
   #if HAS_WIRED_LCD
     static bool detected();
   #else
     static bool detected() { return true; }
   #endif
 
   #if HAS_MULTI_LANGUAGE
     static uint8_t language;
     static void set_language(const uint8_t lang);
   #endif

commit 0564cb188f1a74dc9ecfb55b793f4225424a9ca4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 5 10:30:17 2022 -0600

    🚸 Enhanced UI => Professional UI - with updates (#23624)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 273abbe54a..5885866e5b 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -51,21 +51,21 @@
   #include "../module/printcounter.h"
 #endif
 
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
   #include "../feature/pause.h"
 #endif
 
 #if ENABLED(DWIN_CREALITY_LCD)
   #include "e3v2/creality/dwin.h"
 #elif ENABLED(DWIN_CREALITY_LCD_ENHANCED)
-  #include "e3v2/enhanced/dwin.h"
+  #include "e3v2/proui/dwin.h"
 #endif
 
 #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
 
 #if HAS_WIRED_LCD
 
   enum LCDViewAction : uint8_t {
     LCDVIEW_NONE,
     LCDVIEW_REDRAW_NOW,
     LCDVIEW_CALL_REDRAW_NEXT,
@@ -256,22 +256,22 @@ public:
     static void media_changed(const uint8_t old_stat, const uint8_t stat);
   #endif
 
   #if HAS_LCD_BRIGHTNESS
     #ifndef LCD_BRIGHTNESS_MIN
       #define LCD_BRIGHTNESS_MIN   1
     #endif
     #ifndef LCD_BRIGHTNESS_MAX
       #define LCD_BRIGHTNESS_MAX 255
     #endif
-    #ifndef DEFAULT_LCD_BRIGHTNESS
-      #define DEFAULT_LCD_BRIGHTNESS LCD_BRIGHTNESS_MAX
+    #ifndef LCD_BRIGHTNESS_DEFAULT
+      #define LCD_BRIGHTNESS_DEFAULT LCD_BRIGHTNESS_MAX
     #endif
     static uint8_t brightness;
     static bool backlight;
     static void _set_brightness(); // Implementation-specific
     static void set_brightness(const uint8_t value);
     FORCE_INLINE static void refresh_brightness() { set_brightness(brightness); }
   #endif
 
   #if HAS_DWIN_E3V2_BASIC
     static void refresh();

commit ab46b7e2f298826a5512569d6e79bb59a7a6b8ea
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jan 25 15:33:03 2022 -0600

    🧑‍💻 HAS_MARLINUI_MENU, HAS_MANUAL_MOVE_MENU

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 3217d3531b..273abbe54a 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -28,37 +28,37 @@
 #include "../inc/MarlinConfig.h"
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "tft_io/touch_calibration.h"
 #endif
 
-#if ANY(HAS_LCD_MENU, ULTIPANEL_FEEDMULTIPLY, SOFT_RESET_ON_KILL)
+#if ANY(HAS_MARLINUI_MENU, ULTIPANEL_FEEDMULTIPLY, SOFT_RESET_ON_KILL)
   #define HAS_ENCODER_ACTION 1
 #endif
 
 #if HAS_STATUS_MESSAGE
   #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
 #endif
 
 #if E_MANUAL > 1
   #define MULTI_E_MANUAL 1
 #endif
 
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
-#if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_LCD_MENU, EXTENSIBLE_UI, HAS_DWIN_E3V2)
+#if ENABLED(ADVANCED_PAUSE_FEATURE)
   #include "../feature/pause.h"
 #endif
 
 #if ENABLED(DWIN_CREALITY_LCD)
   #include "e3v2/creality/dwin.h"
 #elif ENABLED(DWIN_CREALITY_LCD_ENHANCED)
   #include "e3v2/enhanced/dwin.h"
 #endif
 
 #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
@@ -70,34 +70,34 @@
     LCDVIEW_REDRAW_NOW,
     LCDVIEW_CALL_REDRAW_NEXT,
     LCDVIEW_CLEAR_CALL_REDRAW,
     LCDVIEW_CALL_NO_REDRAW
   };
 
   #if HAS_ADC_BUTTONS
     uint8_t get_ADC_keyValue();
   #endif
 
-  #if HAS_LCD_MENU
+  #if HAS_MARLINUI_MENU
 
     #include "lcdprint.h"
 
     #if !HAS_GRAPHICAL_TFT
       void _wrap_string(uint8_t &col, uint8_t &row, const char * const string, read_byte_cb_t cb_read_byte, const bool wordwrap=false);
       inline void wrap_string_P(uint8_t &col, uint8_t &row, PGM_P const pstr, const bool wordwrap=false) { _wrap_string(col, row, pstr, read_byte_rom, wordwrap); }
       inline void wrap_string(uint8_t &col, uint8_t &row, const char * const string, const bool wordwrap=false) { _wrap_string(col, row, string, read_byte_ram, wordwrap); }
     #endif
 
     typedef void (*screenFunc_t)();
     typedef void (*menuAction_t)();
 
-  #endif // HAS_LCD_MENU
+  #endif // HAS_MARLINUI_MENU
 
 #endif // HAS_WIRED_LCD
 
 #if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
   #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_BUTTONS, 50, 100)
 #endif
 
 #if HAS_MARLINUI_U8GLIB
   enum MarlinFont : uint8_t {
     FONT_STATUSMENU = 1,
@@ -119,21 +119,21 @@
     #endif
     #if HAS_HEATED_BED
       celsius_t bed_temp;
     #endif
     #if HAS_FAN
       uint16_t fan_speed;
     #endif
   } preheat_t;
 #endif
 
-#if HAS_LCD_MENU
+#if HAS_MARLINUI_MENU
 
   // Manual Movement class
   class ManualMove {
   private:
     static AxisEnum axis;
     #if MULTI_E_MANUAL
       static int8_t e_index;
     #else
       static int8_t constexpr e_index = 0;
     #endif
@@ -191,21 +191,21 @@
 #endif
 
 ////////////////////////////////////////////
 //////////// MarlinUI Singleton ////////////
 ////////////////////////////////////////////
 
 class MarlinUI {
 public:
 
   MarlinUI() {
-    TERN_(HAS_LCD_MENU, currentScreen = status_screen);
+    TERN_(HAS_MARLINUI_MENU, currentScreen = status_screen);
   }
 
   static void init();
 
   #if HAS_DISPLAY || HAS_DWIN_E3V2
     static void init_lcd();
   #else
     static void init_lcd() {}
   #endif
 
@@ -238,21 +238,21 @@ public:
     TERN_(HAS_CHIRP, buzz(LCD_FEEDBACK_FREQUENCY_DURATION_MS, LCD_FEEDBACK_FREQUENCY_HZ));
   }
 
   #if ENABLED(LCD_HAS_STATUS_INDICATORS)
     static void update_indicators();
   #endif
 
   // LCD implementations
   static void clear_lcd();
 
-  #if BOTH(HAS_LCD_MENU, TOUCH_SCREEN_CALIBRATION)
+  #if BOTH(HAS_MARLINUI_MENU, TOUCH_SCREEN_CALIBRATION)
     static void check_touch_calibration() {
       if (touch_calibration.need_calibration()) currentScreen = touch_calibration_screen;
     }
   #endif
 
   #if ENABLED(SDSUPPORT)
     #define MEDIA_MENU_GATEWAY TERN(PASSWORD_ON_SD_PRINT_MENU, password.media_gatekeeper, menu_media)
     static void media_changed(const uint8_t old_stat, const uint8_t stat);
   #endif
 
@@ -368,21 +368,21 @@ public:
 
   #if HAS_DISPLAY
 
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 
-    #if BOTH(HAS_LCD_MENU, PSU_CONTROL)
+    #if BOTH(HAS_MARLINUI_MENU, PSU_CONTROL)
       static void poweroff();
     #endif
 
     #if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
       static bool get_blink();
     #endif
 
     #if HAS_WIRED_LCD
 
       static millis_t next_button_update_ms;
@@ -481,21 +481,21 @@ public:
     static void draw_kill_screen();
 
   #else // No LCD
 
     static void update() {}
     static void return_to_status() {}
 
   #endif
 
   #if ENABLED(SDSUPPORT)
-    #if BOTH(SCROLL_LONG_FILENAMES, HAS_LCD_MENU)
+    #if BOTH(SCROLL_LONG_FILENAMES, HAS_MARLINUI_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif
     static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
   #endif
 
   #if HAS_PREHEAT
     enum PreheatTarget : uint8_t { PT_HOTEND, PT_BED, PT_FAN, PT_CHAMBER, PT_ALL = 0xFF };
@@ -506,21 +506,21 @@ public:
     static void preheat_hotend(const uint8_t m, const uint8_t e=active_extruder) { TERN_(HAS_HOTEND, apply_preheat(m, _BV(PT_HOTEND))); }
     static void preheat_hotend_and_fan(const uint8_t m, const uint8_t e=active_extruder) { preheat_hotend(m, e); preheat_set_fan(m); }
     static void preheat_bed(const uint8_t m) { TERN_(HAS_HEATED_BED, apply_preheat(m, _BV(PT_BED))); }
     static void preheat_all(const uint8_t m) { apply_preheat(m, PT_ALL); }
   #endif
 
   static void reset_status_timeout(const millis_t ms) {
     TERN(SCREENS_CAN_TIME_OUT, return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS, UNUSED(ms));
   }
 
-  #if HAS_LCD_MENU
+  #if HAS_MARLINUI_MENU
 
     #if HAS_TOUCH_BUTTONS
       static uint8_t touch_buttons;
       static uint8_t repeat_delay;
     #else
       static constexpr uint8_t touch_buttons = 0;
     #endif
 
     #if ENABLED(ENCODER_RATE_MULTIPLIER)
       static bool encoderRateMultiplierEnabled;
@@ -590,48 +590,48 @@ public:
   #else
 
     static constexpr bool on_status_screen() { return true; }
 
     #if HAS_WIRED_LCD
       FORCE_INLINE static void run_current_screen() { status_screen(); }
     #endif
 
   #endif
 
-  #if EITHER(HAS_LCD_MENU, EXTENSIBLE_UI)
+  #if EITHER(HAS_MARLINUI_MENU, EXTENSIBLE_UI)
     static bool lcd_clicked;
     static bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }
   #else
     static constexpr bool lcd_clicked = false;
     static bool use_click() { return false; }
   #endif
 
-  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_LCD_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_ENHANCED, DWIN_CREALITY_LCD_JYERSUI)
+  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_ENHANCED, DWIN_CREALITY_LCD_JYERSUI)
     static void pause_show_message(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
   #else
     static void _pause_show_message() {}
     #define pause_show_message(...) _pause_show_message()
   #endif
 
   //
   // EEPROM: Reset / Init / Load / Store
   //
-  #if HAS_LCD_MENU
+  #if HAS_MARLINUI_MENU
     static void reset_settings();
   #endif
 
   #if ENABLED(EEPROM_SETTINGS)
-    #if HAS_LCD_MENU
+    #if HAS_MARLINUI_MENU
       static void init_eeprom();
       static void load_settings();
       static void store_settings();
     #endif
     #if DISABLED(EEPROM_AUTO_INIT)
       static void eeprom_alert(const uint8_t msgid);
       static void eeprom_alert_crc()     { eeprom_alert(0); }
       static void eeprom_alert_index()   { eeprom_alert(1); }
       static void eeprom_alert_version() { eeprom_alert(2); }
     #endif
@@ -643,21 +643,21 @@ public:
   #if ANY(DELTA_CALIBRATION_MENU, DELTA_AUTO_CALIBRATION, PROBE_OFFSET_WIZARD, X_AXIS_TWIST_COMPENSATION) || (ENABLED(LCD_BED_LEVELING) && EITHER(PROBE_MANUALLY, MESH_BED_LEVELING))
     #define LCD_HAS_WAIT_FOR_MOVE 1
     static bool wait_for_move;
   #else
     static constexpr bool wait_for_move = false;
   #endif
 
   //
   // Block interaction while under external control
   //
-  #if HAS_LCD_MENU && EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
+  #if HAS_MARLINUI_MENU && EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
     static bool external_control;
     FORCE_INLINE static void capture() { external_control = true; }
     FORCE_INLINE static void release() { external_control = false; }
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void external_encoder();
     #endif
   #else
     static constexpr bool external_control = false;
   #endif
 

commit d5f2334140e6f8ead29d3648b371547ebe72c7aa
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Jan 22 10:14:47 2022 -0600

    ♻️ Adjust LCD init, contrast default, settings load

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index dcf74b9e27..3217d3531b 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -14,33 +14,30 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
+#include "../sd/cardreader.h"
 #include "../module/motion.h"
 #include "buttons.h"
 
 #include "../inc/MarlinConfig.h"
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
-#if ENABLED(SDSUPPORT)
-  #include "../sd/cardreader.h"
-#endif
-
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "tft_io/touch_calibration.h"
 #endif
 
 #if ANY(HAS_LCD_MENU, ULTIPANEL_FEEDMULTIPLY, SOFT_RESET_ON_KILL)
   #define HAS_ENCODER_ACTION 1
 #endif
 
 #if HAS_STATUS_MESSAGE
   #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
@@ -197,20 +194,34 @@
 //////////// MarlinUI Singleton ////////////
 ////////////////////////////////////////////
 
 class MarlinUI {
 public:
 
   MarlinUI() {
     TERN_(HAS_LCD_MENU, currentScreen = status_screen);
   }
 
+  static void init();
+
+  #if HAS_DISPLAY || HAS_DWIN_E3V2
+    static void init_lcd();
+  #else
+    static void init_lcd() {}
+  #endif
+
+  #if HAS_WIRED_LCD
+    static bool detected();
+  #else
+    static bool detected() { return true; }
+  #endif
+
   #if HAS_MULTI_LANGUAGE
     static uint8_t language;
     static void set_language(const uint8_t lang);
   #endif
 
   #if HAS_MARLINUI_U8GLIB
     static void update_language_font();
   #endif
 
   #if ENABLED(SOUND_MENU_ITEM)
@@ -263,28 +274,20 @@ public:
   #endif
 
   #if HAS_DWIN_E3V2_BASIC
     static void refresh();
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }
   #endif
 
-  #if HAS_WIRED_LCD
-    static bool detected();
-    static void init_lcd();
-  #else
-    static bool detected() { return true; }
-    static void init_lcd() {}
-  #endif
-
   #if HAS_PRINT_PROGRESS
     #if HAS_PRINT_PROGRESS_PERMYRIAD
       typedef uint16_t progress_t;
       #define PROGRESS_SCALE 100U
       #define PROGRESS_MASK 0x7FFF
     #else
       typedef uint8_t progress_t;
       #define PROGRESS_SCALE 1U
       #define PROGRESS_MASK 0x7F
     #endif
@@ -358,21 +361,20 @@ public:
     static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
     #if DISABLED(LIGHTWEIGHT_UI)
       static void draw_status_message(const bool blink);
     #endif
   #else
     static void kill_screen(FSTR_P const, FSTR_P const) {}
   #endif
 
   #if HAS_DISPLAY
 
-    static void init();
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 
     #if BOTH(HAS_LCD_MENU, PSU_CONTROL)
       static void poweroff();
     #endif
@@ -473,21 +475,20 @@ public:
 
     #if EITHER(BABYSTEP_ZPROBE_GFX_OVERLAY, MESH_EDIT_GFX_OVERLAY)
       static void zoffset_overlay(const int8_t dir);
       static void zoffset_overlay(const_float_t zvalue);
     #endif
 
     static void draw_kill_screen();
 
   #else // No LCD
 
-    static void init() {}
     static void update() {}
     static void return_to_status() {}
 
   #endif
 
   #if ENABLED(SDSUPPORT)
     #if BOTH(SCROLL_LONG_FILENAMES, HAS_LCD_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME

commit d8f73997b68da57454471b3b63056ce067cca10b
Author: Taylor Talkington <taylor.talkington@gmail.com>
Date:   Mon Jan 17 08:07:45 2022 -0500

    💄 Improve Ender3 v2 DWIN MarlinUI (#23369)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index c2b26b6f47..dcf74b9e27 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -461,20 +461,21 @@ public:
     #endif
 
     #if HAS_MARLINUI_U8GLIB
       static bool drawing_screen, first_page;
     #else
       static constexpr bool drawing_screen = false, first_page = true;
     #endif
 
     #if IS_DWIN_MARLINUI
       static bool did_first_redraw;
+      static bool old_is_printing;
     #endif
 
     #if EITHER(BABYSTEP_ZPROBE_GFX_OVERLAY, MESH_EDIT_GFX_OVERLAY)
       static void zoffset_overlay(const int8_t dir);
       static void zoffset_overlay(const_float_t zvalue);
     #endif
 
     static void draw_kill_screen();
 
   #else // No LCD

commit e16813d713f51bb5c563eb83ecb5e32c0053e16a
Author: Jim Watson <j-watson@ntlworld.com>
Date:   Wed Jan 12 16:13:21 2022 +0000

    🐛 Fix SHOW_REMAINING_TIME compile (#23503)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 8134780999..c2b26b6f47 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -286,34 +286,34 @@ public:
     #else
       typedef uint8_t progress_t;
       #define PROGRESS_SCALE 1U
       #define PROGRESS_MASK 0x7F
     #endif
     #if ENABLED(LCD_SET_PROGRESS_MANUALLY)
       static progress_t progress_override;
       static void set_progress(const progress_t p) { progress_override = _MIN(p, 100U * (PROGRESS_SCALE)); }
       static void set_progress_done() { progress_override = (PROGRESS_MASK + 1U) + 100U * (PROGRESS_SCALE); }
       static void progress_reset() { if (progress_override & (PROGRESS_MASK + 1U)) set_progress(0); }
-      #if ENABLED(SHOW_REMAINING_TIME)
-        static uint32_t _calculated_remaining_time() {
-          const duration_t elapsed = print_job_timer.duration();
-          const progress_t progress = _get_progress();
-          return progress ? elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress : 0;
-        }
-        #if ENABLED(USE_M73_REMAINING_TIME)
-          static uint32_t remaining_time;
-          FORCE_INLINE static void set_remaining_time(const uint32_t r) { remaining_time = r; }
-          FORCE_INLINE static uint32_t get_remaining_time() { return remaining_time ?: _calculated_remaining_time(); }
-          FORCE_INLINE static void reset_remaining_time() { set_remaining_time(0); }
-        #else
-          FORCE_INLINE static uint32_t get_remaining_time() { return _calculated_remaining_time(); }
-        #endif
+    #endif
+    #if ENABLED(SHOW_REMAINING_TIME)
+      static uint32_t _calculated_remaining_time() {
+        const duration_t elapsed = print_job_timer.duration();
+        const progress_t progress = _get_progress();
+        return progress ? elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress : 0;
+      }
+      #if ENABLED(USE_M73_REMAINING_TIME)
+        static uint32_t remaining_time;
+        FORCE_INLINE static void set_remaining_time(const uint32_t r) { remaining_time = r; }
+        FORCE_INLINE static uint32_t get_remaining_time() { return remaining_time ?: _calculated_remaining_time(); }
+        FORCE_INLINE static void reset_remaining_time() { set_remaining_time(0); }
+      #else
+        FORCE_INLINE static uint32_t get_remaining_time() { return _calculated_remaining_time(); }
       #endif
     #endif
     static progress_t _get_progress();
     #if HAS_PRINT_PROGRESS_PERMYRIAD
       FORCE_INLINE static uint16_t get_progress_permyriad() { return _get_progress(); }
     #endif
     static uint8_t get_progress_percent() { return uint8_t(_get_progress() / (PROGRESS_SCALE)); }
   #else
     static constexpr uint8_t get_progress_percent() { return 0; }
   #endif

commit 2ded50ba3fcbc6fec77a1697e9e846fcb6c68f66
Author: mistic100 <contact@git.strangeplanet.fr>
Date:   Sat Jan 8 10:51:21 2022 +0100

    🚸 Wait for cooldown in MarlinUI power-off (#23476)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index f409970e42..8134780999 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -366,21 +366,21 @@ public:
   #if HAS_DISPLAY
 
     static void init();
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 
-    #if BOTH(PSU_CONTROL, PS_OFF_CONFIRM)
+    #if BOTH(HAS_LCD_MENU, PSU_CONTROL)
       static void poweroff();
     #endif
 
     #if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
       static bool get_blink();
     #endif
 
     #if HAS_WIRED_LCD
 
       static millis_t next_button_update_ms;

commit 13adcd5c08b7065a32f59d00c17c9bc3a351429c
Author: David Ross Smith <5095074+DragRedSim@users.noreply.github.com>
Date:   Fri Jan 7 22:44:44 2022 +1100

    🚑️ Fix preheat target bug
    
    Fixes Jyers/Marlin#1651

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index e9aa0a6da5..f409970e42 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -489,36 +489,34 @@ public:
     #if BOTH(SCROLL_LONG_FILENAMES, HAS_LCD_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif
     static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
   #endif
 
   #if HAS_PREHEAT
-    enum PreheatMask : uint8_t { PM_HOTEND = _BV(0), PM_BED = _BV(1), PM_FAN = _BV(2), PM_CHAMBER = _BV(3) };
+    enum PreheatTarget : uint8_t { PT_HOTEND, PT_BED, PT_FAN, PT_CHAMBER, PT_ALL = 0xFF };
     static preheat_t material_preset[PREHEAT_COUNT];
     static PGM_P get_preheat_label(const uint8_t m);
     static void apply_preheat(const uint8_t m, const uint8_t pmask, const uint8_t e=active_extruder);
-    static void preheat_set_fan(const uint8_t m) { TERN_(HAS_FAN, apply_preheat(m, PM_FAN)); }
-    static void preheat_hotend(const uint8_t m, const uint8_t e=active_extruder) { TERN_(HAS_HOTEND, apply_preheat(m, PM_HOTEND)); }
+    static void preheat_set_fan(const uint8_t m) { TERN_(HAS_FAN, apply_preheat(m, _BV(PT_FAN))); }
+    static void preheat_hotend(const uint8_t m, const uint8_t e=active_extruder) { TERN_(HAS_HOTEND, apply_preheat(m, _BV(PT_HOTEND))); }
     static void preheat_hotend_and_fan(const uint8_t m, const uint8_t e=active_extruder) { preheat_hotend(m, e); preheat_set_fan(m); }
-    static void preheat_bed(const uint8_t m) { TERN_(HAS_HEATED_BED, apply_preheat(m, PM_BED)); }
-    static void preheat_all(const uint8_t m) { apply_preheat(m, 0xFF); }
+    static void preheat_bed(const uint8_t m) { TERN_(HAS_HEATED_BED, apply_preheat(m, _BV(PT_BED))); }
+    static void preheat_all(const uint8_t m) { apply_preheat(m, PT_ALL); }
   #endif
 
-  #if SCREENS_CAN_TIME_OUT
-    static void reset_status_timeout(const millis_t ms) { return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS; }
-  #else
-    static void reset_status_timeout(const millis_t) {}
-  #endif
+  static void reset_status_timeout(const millis_t ms) {
+    TERN(SCREENS_CAN_TIME_OUT, return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS, UNUSED(ms));
+  }
 
   #if HAS_LCD_MENU
 
     #if HAS_TOUCH_BUTTONS
       static uint8_t touch_buttons;
       static uint8_t repeat_delay;
     #else
       static constexpr uint8_t touch_buttons = 0;
     #endif
 

commit 6fb2d8a25f096d084348a6f6930f515d947474d4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Dec 28 02:57:24 2021 -0600

    🧑‍💻 Remove extraneous 'inline' hints

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 7014040097..e9aa0a6da5 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -267,41 +267,41 @@ public:
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }
   #endif
 
   #if HAS_WIRED_LCD
     static bool detected();
     static void init_lcd();
   #else
-    static inline bool detected() { return true; }
-    static inline void init_lcd() {}
+    static bool detected() { return true; }
+    static void init_lcd() {}
   #endif
 
   #if HAS_PRINT_PROGRESS
     #if HAS_PRINT_PROGRESS_PERMYRIAD
       typedef uint16_t progress_t;
       #define PROGRESS_SCALE 100U
       #define PROGRESS_MASK 0x7FFF
     #else
       typedef uint8_t progress_t;
       #define PROGRESS_SCALE 1U
       #define PROGRESS_MASK 0x7F
     #endif
     #if ENABLED(LCD_SET_PROGRESS_MANUALLY)
       static progress_t progress_override;
       static void set_progress(const progress_t p) { progress_override = _MIN(p, 100U * (PROGRESS_SCALE)); }
       static void set_progress_done() { progress_override = (PROGRESS_MASK + 1U) + 100U * (PROGRESS_SCALE); }
       static void progress_reset() { if (progress_override & (PROGRESS_MASK + 1U)) set_progress(0); }
       #if ENABLED(SHOW_REMAINING_TIME)
-        static inline uint32_t _calculated_remaining_time() {
+        static uint32_t _calculated_remaining_time() {
           const duration_t elapsed = print_job_timer.duration();
           const progress_t progress = _get_progress();
           return progress ? elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress : 0;
         }
         #if ENABLED(USE_M73_REMAINING_TIME)
           static uint32_t remaining_time;
           FORCE_INLINE static void set_remaining_time(const uint32_t r) { remaining_time = r; }
           FORCE_INLINE static uint32_t get_remaining_time() { return remaining_time ?: _calculated_remaining_time(); }
           FORCE_INLINE static void reset_remaining_time() { set_remaining_time(0); }
         #else
@@ -335,39 +335,39 @@ public:
 
     #if ENABLED(STATUS_MESSAGE_SCROLLING)
       static uint8_t status_scroll_offset;
       static void advance_status_scroll();
       static char* status_and_len(uint8_t &len);
     #endif
 
     static bool has_status();
     static void reset_status(const bool no_welcome=false);
     static void set_alert_status(FSTR_P const fstr);
-    static inline void reset_alert_level() { alert_level = 0; }
+    static void reset_alert_level() { alert_level = 0; }
   #else
     static constexpr bool has_status() { return false; }
-    static inline void reset_status(const bool=false) {}
-    static inline void set_alert_status(FSTR_P const) {}
-    static inline void reset_alert_level() {}
+    static void reset_status(const bool=false) {}
+    static void set_alert_status(FSTR_P const) {}
+    static void reset_alert_level() {}
   #endif
 
   static void set_status(const char * const cstr, const bool persist=false);
   static void set_status(FSTR_P const fstr, const int8_t level=0);
   static void status_printf(const uint8_t level, FSTR_P const fmt, ...);
 
   #if EITHER(HAS_DISPLAY, DWIN_CREALITY_LCD_ENHANCED)
     static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
     #if DISABLED(LIGHTWEIGHT_UI)
       static void draw_status_message(const bool blink);
     #endif
   #else
-    static inline void kill_screen(FSTR_P const, FSTR_P const) {}
+    static void kill_screen(FSTR_P const, FSTR_P const) {}
   #endif
 
   #if HAS_DISPLAY
 
     static void init();
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
@@ -437,21 +437,21 @@ public:
       #endif
 
       #if HAS_TOUCH_SLEEP
         static void wakeup_screen();
       #endif
 
       static void quick_feedback(const bool clear_buttons=true);
       #if HAS_BUZZER
         static void completion_feedback(const bool good=true);
       #else
-        static inline void completion_feedback(const bool=true) { TERN_(HAS_TOUCH_SLEEP, wakeup_screen()); }
+        static void completion_feedback(const bool=true) { TERN_(HAS_TOUCH_SLEEP, wakeup_screen()); }
       #endif
 
       #if ENABLED(ADVANCED_PAUSE_FEATURE)
         static void draw_hotend_status(const uint8_t row, const uint8_t extruder);
       #endif
 
       #if HAS_TOUCH_BUTTONS
         static bool on_edit_screen;
         static void screen_click(const uint8_t row, const uint8_t col, const uint8_t x, const uint8_t y);
       #endif
@@ -472,52 +472,52 @@ public:
 
     #if EITHER(BABYSTEP_ZPROBE_GFX_OVERLAY, MESH_EDIT_GFX_OVERLAY)
       static void zoffset_overlay(const int8_t dir);
       static void zoffset_overlay(const_float_t zvalue);
     #endif
 
     static void draw_kill_screen();
 
   #else // No LCD
 
-    static inline void init() {}
-    static inline void update() {}
-    static inline void return_to_status() {}
+    static void init() {}
+    static void update() {}
+    static void return_to_status() {}
 
   #endif
 
   #if ENABLED(SDSUPPORT)
     #if BOTH(SCROLL_LONG_FILENAMES, HAS_LCD_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif
     static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
   #endif
 
   #if HAS_PREHEAT
     enum PreheatMask : uint8_t { PM_HOTEND = _BV(0), PM_BED = _BV(1), PM_FAN = _BV(2), PM_CHAMBER = _BV(3) };
     static preheat_t material_preset[PREHEAT_COUNT];
     static PGM_P get_preheat_label(const uint8_t m);
     static void apply_preheat(const uint8_t m, const uint8_t pmask, const uint8_t e=active_extruder);
-    static inline void preheat_set_fan(const uint8_t m) { TERN_(HAS_FAN, apply_preheat(m, PM_FAN)); }
-    static inline void preheat_hotend(const uint8_t m, const uint8_t e=active_extruder) { TERN_(HAS_HOTEND, apply_preheat(m, PM_HOTEND)); }
-    static inline void preheat_hotend_and_fan(const uint8_t m, const uint8_t e=active_extruder) { preheat_hotend(m, e); preheat_set_fan(m); }
-    static inline void preheat_bed(const uint8_t m) { TERN_(HAS_HEATED_BED, apply_preheat(m, PM_BED)); }
-    static inline void preheat_all(const uint8_t m) { apply_preheat(m, 0xFF); }
+    static void preheat_set_fan(const uint8_t m) { TERN_(HAS_FAN, apply_preheat(m, PM_FAN)); }
+    static void preheat_hotend(const uint8_t m, const uint8_t e=active_extruder) { TERN_(HAS_HOTEND, apply_preheat(m, PM_HOTEND)); }
+    static void preheat_hotend_and_fan(const uint8_t m, const uint8_t e=active_extruder) { preheat_hotend(m, e); preheat_set_fan(m); }
+    static void preheat_bed(const uint8_t m) { TERN_(HAS_HEATED_BED, apply_preheat(m, PM_BED)); }
+    static void preheat_all(const uint8_t m) { apply_preheat(m, 0xFF); }
   #endif
 
   #if SCREENS_CAN_TIME_OUT
-    static inline void reset_status_timeout(const millis_t ms) { return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS; }
+    static void reset_status_timeout(const millis_t ms) { return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS; }
   #else
-    static inline void reset_status_timeout(const millis_t) {}
+    static void reset_status_timeout(const millis_t) {}
   #endif
 
   #if HAS_LCD_MENU
 
     #if HAS_TOUCH_BUTTONS
       static uint8_t touch_buttons;
       static uint8_t repeat_delay;
     #else
       static constexpr uint8_t touch_buttons = 0;
     #endif
@@ -541,40 +541,40 @@ public:
 
     static void synchronize(PGM_P const msg=nullptr);
 
     static screenFunc_t currentScreen;
     static bool screen_changed;
     static void goto_screen(const screenFunc_t screen, const uint16_t encoder=0, const uint8_t top=0, const uint8_t items=0);
     static void push_current_screen();
 
     // goto_previous_screen and go_back may also be used as menu item callbacks
     static void _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, const bool is_back));
-    static inline void goto_previous_screen() { _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, false)); }
-    static inline void go_back()              { _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, true)); }
+    static void goto_previous_screen() { _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, false)); }
+    static void go_back()              { _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, true)); }
 
     static void return_to_status();
-    static inline bool on_status_screen() { return currentScreen == status_screen; }
+    static bool on_status_screen() { return currentScreen == status_screen; }
     FORCE_INLINE static void run_current_screen() { (*currentScreen)(); }
 
     #if ENABLED(LIGHTWEIGHT_UI)
       static void lcd_in_status(const bool inStatus);
     #endif
 
     FORCE_INLINE static bool screen_is_sticky() {
       return TERN1(SCREENS_CAN_TIME_OUT, defer_return_to_status);
     }
 
     FORCE_INLINE static void defer_status_screen(const bool defer=true) {
       TERN(SCREENS_CAN_TIME_OUT, defer_return_to_status = defer, UNUSED(defer));
     }
 
-    static inline void goto_previous_screen_no_defer() {
+    static void goto_previous_screen_no_defer() {
       defer_status_screen(false);
       goto_previous_screen();
     }
 
     #if ENABLED(SD_REPRINT_LAST_SELECTED_FILE)
       static void reselect_last_file();
     #endif
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void ubl_plot(const uint8_t x_plot, const uint8_t y_plot);
@@ -592,55 +592,55 @@ public:
     static constexpr bool on_status_screen() { return true; }
 
     #if HAS_WIRED_LCD
       FORCE_INLINE static void run_current_screen() { status_screen(); }
     #endif
 
   #endif
 
   #if EITHER(HAS_LCD_MENU, EXTENSIBLE_UI)
     static bool lcd_clicked;
-    static inline bool use_click() {
+    static bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }
   #else
     static constexpr bool lcd_clicked = false;
-    static inline bool use_click() { return false; }
+    static bool use_click() { return false; }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_LCD_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_ENHANCED, DWIN_CREALITY_LCD_JYERSUI)
     static void pause_show_message(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
   #else
-    static inline void _pause_show_message() {}
+    static void _pause_show_message() {}
     #define pause_show_message(...) _pause_show_message()
   #endif
 
   //
   // EEPROM: Reset / Init / Load / Store
   //
   #if HAS_LCD_MENU
     static void reset_settings();
   #endif
 
   #if ENABLED(EEPROM_SETTINGS)
     #if HAS_LCD_MENU
       static void init_eeprom();
       static void load_settings();
       static void store_settings();
     #endif
     #if DISABLED(EEPROM_AUTO_INIT)
       static void eeprom_alert(const uint8_t msgid);
-      static inline void eeprom_alert_crc()     { eeprom_alert(0); }
-      static inline void eeprom_alert_index()   { eeprom_alert(1); }
-      static inline void eeprom_alert_version() { eeprom_alert(2); }
+      static void eeprom_alert_crc()     { eeprom_alert(0); }
+      static void eeprom_alert_index()   { eeprom_alert(1); }
+      static void eeprom_alert_version() { eeprom_alert(2); }
     #endif
   #endif
 
   //
   // Special handling if a move is underway
   //
   #if ANY(DELTA_CALIBRATION_MENU, DELTA_AUTO_CALIBRATION, PROBE_OFFSET_WIZARD, X_AXIS_TWIST_COMPENSATION) || (ENABLED(LCD_BED_LEVELING) && EITHER(PROBE_MANUALLY, MESH_BED_LEVELING))
     #define LCD_HAS_WAIT_FOR_MOVE 1
     static bool wait_for_move;
   #else
@@ -667,21 +667,21 @@ public:
     #if IS_RRW_KEYPAD
       static volatile uint8_t keypad_buttons;
       static bool handle_keypad();
     #endif
     #if HAS_SLOW_BUTTONS
       static volatile uint8_t slow_buttons;
       static uint8_t read_slow_buttons();
     #endif
 
     static void update_buttons();
-    static inline bool button_pressed() { return BUTTON_CLICK() || TERN(TOUCH_SCREEN, touch_pressed(), false); }
+    static bool button_pressed() { return BUTTON_CLICK() || TERN(TOUCH_SCREEN, touch_pressed(), false); }
     #if EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
       static void wait_for_release();
     #endif
 
     static uint32_t encoderPosition;
 
     #define ENCODERBASE (TERN(REVERSE_ENCODER_DIRECTION, -1, +1))
 
     #if EITHER(REVERSE_MENU_DIRECTION, REVERSE_SELECT_DIRECTION)
       static int8_t encoderDirection;
@@ -698,21 +698,21 @@ public:
     FORCE_INLINE static void encoder_direction_menus() {
       TERN_(REVERSE_MENU_DIRECTION, encoderDirection = -(ENCODERBASE));
     }
 
     FORCE_INLINE static void encoder_direction_select() {
       TERN_(REVERSE_SELECT_DIRECTION, encoderDirection = -(ENCODERBASE));
     }
 
   #else
 
-    static inline void update_buttons() {}
+    static void update_buttons() {}
 
   #endif
 
   #if ENABLED(TOUCH_SCREEN_CALIBRATION)
     static void touch_calibration_screen();
   #endif
 
   #if HAS_GRAPHICAL_TFT
     static void move_axis_screen();
   #endif

commit a16a059312b0ddb822da2769b5ba5372f9857c48
Author: Giuseppe499 <giuseppe499@live.it>
Date:   Tue Dec 7 02:53:51 2021 +0100

    ✨ X Twist Compensation & Calibration (#23238)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index ed5b539eaf..7014040097 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -633,21 +633,21 @@ public:
       static void eeprom_alert(const uint8_t msgid);
       static inline void eeprom_alert_crc()     { eeprom_alert(0); }
       static inline void eeprom_alert_index()   { eeprom_alert(1); }
       static inline void eeprom_alert_version() { eeprom_alert(2); }
     #endif
   #endif
 
   //
   // Special handling if a move is underway
   //
-  #if ANY(DELTA_CALIBRATION_MENU, DELTA_AUTO_CALIBRATION, PROBE_OFFSET_WIZARD) || (ENABLED(LCD_BED_LEVELING) && EITHER(PROBE_MANUALLY, MESH_BED_LEVELING))
+  #if ANY(DELTA_CALIBRATION_MENU, DELTA_AUTO_CALIBRATION, PROBE_OFFSET_WIZARD, X_AXIS_TWIST_COMPENSATION) || (ENABLED(LCD_BED_LEVELING) && EITHER(PROBE_MANUALLY, MESH_BED_LEVELING))
     #define LCD_HAS_WAIT_FOR_MOVE 1
     static bool wait_for_move;
   #else
     static constexpr bool wait_for_move = false;
   #endif
 
   //
   // Block interaction while under external control
   //
   #if HAS_LCD_MENU && EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)

commit b4b16b63ff40aaba9e482294e8f34403eb51e632
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Wed Nov 10 11:31:35 2021 -0500

    🚸 Expose sub-options for E3V2 Enhanced (#23099)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 4f797d899d..ed5b539eaf 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -349,20 +349,23 @@ public:
     static inline void set_alert_status(FSTR_P const) {}
     static inline void reset_alert_level() {}
   #endif
 
   static void set_status(const char * const cstr, const bool persist=false);
   static void set_status(FSTR_P const fstr, const int8_t level=0);
   static void status_printf(const uint8_t level, FSTR_P const fmt, ...);
 
   #if EITHER(HAS_DISPLAY, DWIN_CREALITY_LCD_ENHANCED)
     static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
+    #if DISABLED(LIGHTWEIGHT_UI)
+      static void draw_status_message(const bool blink);
+    #endif
   #else
     static inline void kill_screen(FSTR_P const, FSTR_P const) {}
   #endif
 
   #if HAS_DISPLAY
 
     static void init();
     static void update();
 
     static void abort_print();
@@ -437,24 +440,20 @@ public:
         static void wakeup_screen();
       #endif
 
       static void quick_feedback(const bool clear_buttons=true);
       #if HAS_BUZZER
         static void completion_feedback(const bool good=true);
       #else
         static inline void completion_feedback(const bool=true) { TERN_(HAS_TOUCH_SLEEP, wakeup_screen()); }
       #endif
 
-      #if DISABLED(LIGHTWEIGHT_UI)
-        static void draw_status_message(const bool blink);
-      #endif
-
       #if ENABLED(ADVANCED_PAUSE_FEATURE)
         static void draw_hotend_status(const uint8_t row, const uint8_t extruder);
       #endif
 
       #if HAS_TOUCH_BUTTONS
         static bool on_edit_screen;
         static void screen_click(const uint8_t row, const uint8_t col, const uint8_t x, const uint8_t y);
       #endif
 
       static void status_screen();

commit b09038fcc72bc8df4ec8a7014597586e0b0390ca
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 27 20:01:44 2021 -0500

    🎨 Standard material presets behavior

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 63e1eb5b0d..4f797d899d 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -49,21 +49,20 @@
 #if E_MANUAL > 1
   #define MULTI_E_MANUAL 1
 #endif
 
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
 #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_LCD_MENU, EXTENSIBLE_UI, HAS_DWIN_E3V2)
   #include "../feature/pause.h"
-  #include "../module/motion.h" // for active_extruder
 #endif
 
 #if ENABLED(DWIN_CREALITY_LCD)
   #include "e3v2/creality/dwin.h"
 #elif ENABLED(DWIN_CREALITY_LCD_ENHANCED)
   #include "e3v2/enhanced/dwin.h"
 #endif
 
 #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
 
@@ -491,22 +490,29 @@ public:
     #if BOTH(SCROLL_LONG_FILENAMES, HAS_LCD_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif
     static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
   #endif
 
   #if HAS_PREHEAT
+    enum PreheatMask : uint8_t { PM_HOTEND = _BV(0), PM_BED = _BV(1), PM_FAN = _BV(2), PM_CHAMBER = _BV(3) };
     static preheat_t material_preset[PREHEAT_COUNT];
     static PGM_P get_preheat_label(const uint8_t m);
+    static void apply_preheat(const uint8_t m, const uint8_t pmask, const uint8_t e=active_extruder);
+    static inline void preheat_set_fan(const uint8_t m) { TERN_(HAS_FAN, apply_preheat(m, PM_FAN)); }
+    static inline void preheat_hotend(const uint8_t m, const uint8_t e=active_extruder) { TERN_(HAS_HOTEND, apply_preheat(m, PM_HOTEND)); }
+    static inline void preheat_hotend_and_fan(const uint8_t m, const uint8_t e=active_extruder) { preheat_hotend(m, e); preheat_set_fan(m); }
+    static inline void preheat_bed(const uint8_t m) { TERN_(HAS_HEATED_BED, apply_preheat(m, PM_BED)); }
+    static inline void preheat_all(const uint8_t m) { apply_preheat(m, 0xFF); }
   #endif
 
   #if SCREENS_CAN_TIME_OUT
     static inline void reset_status_timeout(const millis_t ms) { return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS; }
   #else
     static inline void reset_status_timeout(const millis_t) {}
   #endif
 
   #if HAS_LCD_MENU
 

commit 1d80464ba77bc576426f15af28a633bf48d769ad
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 27 21:15:58 2021 -0500

    🎨 Define HAS_PREHEAT conditional

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 883850d6e0..63e1eb5b0d 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -109,21 +109,21 @@
     FONT_MENU
   };
 #else
   enum HD44780CharSet : uint8_t {
     CHARSET_MENU,
     CHARSET_INFO,
     CHARSET_BOOT
   };
 #endif
 
-#if PREHEAT_COUNT
+#if HAS_PREHEAT
   typedef struct {
     #if HAS_HOTEND
       celsius_t hotend_temp;
     #endif
     #if HAS_HEATED_BED
       celsius_t bed_temp;
     #endif
     #if HAS_FAN
       uint16_t fan_speed;
     #endif
@@ -490,21 +490,21 @@ public:
   #if ENABLED(SDSUPPORT)
     #if BOTH(SCROLL_LONG_FILENAMES, HAS_LCD_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif
     static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
   #endif
 
-  #if PREHEAT_COUNT
+  #if HAS_PREHEAT
     static preheat_t material_preset[PREHEAT_COUNT];
     static PGM_P get_preheat_label(const uint8_t m);
   #endif
 
   #if SCREENS_CAN_TIME_OUT
     static inline void reset_status_timeout(const millis_t ms) { return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS; }
   #else
     static inline void reset_status_timeout(const millis_t) {}
   #endif
 

commit 65b950a489c35b1d5547da3a504af4dad8cde3d7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 20:15:52 2021 -0500

    🎨 Apply F() to kill / sendinfoscreen

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index bc8442c576..883850d6e0 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -349,23 +349,23 @@ public:
     static inline void reset_status(const bool=false) {}
     static inline void set_alert_status(FSTR_P const) {}
     static inline void reset_alert_level() {}
   #endif
 
   static void set_status(const char * const cstr, const bool persist=false);
   static void set_status(FSTR_P const fstr, const int8_t level=0);
   static void status_printf(const uint8_t level, FSTR_P const fmt, ...);
 
   #if EITHER(HAS_DISPLAY, DWIN_CREALITY_LCD_ENHANCED)
-    static void kill_screen(PGM_P const lcd_error, PGM_P const lcd_component);
+    static void kill_screen(FSTR_P const lcd_error, FSTR_P const lcd_component);
   #else
-    static inline void kill_screen(PGM_P const, PGM_P const) {}
+    static inline void kill_screen(FSTR_P const, FSTR_P const) {}
   #endif
 
   #if HAS_DISPLAY
 
     static void init();
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();

commit 7f1286a11f87065c4e666985e679cf9c77d668bf
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 17:05:11 2021 -0500

    🎨 Apply F() to status message

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 02d5bf06bd..bc8442c576 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -335,35 +335,33 @@ public:
     static uint8_t alert_level; // Higher levels block lower levels
 
     #if ENABLED(STATUS_MESSAGE_SCROLLING)
       static uint8_t status_scroll_offset;
       static void advance_status_scroll();
       static char* status_and_len(uint8_t &len);
     #endif
 
     static bool has_status();
     static void reset_status(const bool no_welcome=false);
-    static void set_status(const char * const message, const bool persist=false);
-    static void set_status_P(PGM_P const message, const int8_t level=0);
-    static void status_printf_P(const uint8_t level, PGM_P const fmt, ...);
-    static void set_alert_status_P(PGM_P const message);
+    static void set_alert_status(FSTR_P const fstr);
     static inline void reset_alert_level() { alert_level = 0; }
   #else
     static constexpr bool has_status() { return false; }
     static inline void reset_status(const bool=false) {}
-    static void set_status(const char *message, const bool=false);
-    static void set_status_P(PGM_P message, const int8_t=0);
-    static void status_printf_P(const uint8_t, PGM_P message, ...);
-    static inline void set_alert_status_P(PGM_P const) {}
+    static inline void set_alert_status(FSTR_P const) {}
     static inline void reset_alert_level() {}
   #endif
 
+  static void set_status(const char * const cstr, const bool persist=false);
+  static void set_status(FSTR_P const fstr, const int8_t level=0);
+  static void status_printf(const uint8_t level, FSTR_P const fmt, ...);
+
   #if EITHER(HAS_DISPLAY, DWIN_CREALITY_LCD_ENHANCED)
     static void kill_screen(PGM_P const lcd_error, PGM_P const lcd_component);
   #else
     static inline void kill_screen(PGM_P const, PGM_P const) {}
   #endif
 
   #if HAS_DISPLAY
 
     static void init();
     static void update();
@@ -733,15 +731,14 @@ private:
       static void tft_idle();
       #if ENABLED(TOUCH_SCREEN)
         static bool touch_pressed();
       #endif
     #endif
   #endif
 };
 
 extern MarlinUI ui;
 
-#define LCD_MESSAGEPGM_P(x)      ui.set_status_P(x)
-#define LCD_ALERTMESSAGEPGM_P(x) ui.set_alert_status_P(x)
-
-#define LCD_MESSAGEPGM(x)        LCD_MESSAGEPGM_P(GET_TEXT(x))
-#define LCD_ALERTMESSAGEPGM(x)   LCD_ALERTMESSAGEPGM_P(GET_TEXT(x))
+#define LCD_MESSAGE_F(S)       ui.set_status(F(S))
+#define LCD_MESSAGE(M)         ui.set_status(GET_TEXT_F(M))
+#define LCD_ALERTMESSAGE_F(S)  ui.set_alert_status(F(S))
+#define LCD_ALERTMESSAGE(M)    ui.set_alert_status(GET_TEXT_F(M))

commit eb784d6e55c84c05b2a5353899d8bc25276e0640
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Oct 2 02:33:14 2021 -0500

    🎨 Rename MarlinUI::zoffset_overlay

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 270ee3afce..02d5bf06bd 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -467,20 +467,25 @@ public:
     #if HAS_MARLINUI_U8GLIB
       static bool drawing_screen, first_page;
     #else
       static constexpr bool drawing_screen = false, first_page = true;
     #endif
 
     #if IS_DWIN_MARLINUI
       static bool did_first_redraw;
     #endif
 
+    #if EITHER(BABYSTEP_ZPROBE_GFX_OVERLAY, MESH_EDIT_GFX_OVERLAY)
+      static void zoffset_overlay(const int8_t dir);
+      static void zoffset_overlay(const_float_t zvalue);
+    #endif
+
     static void draw_kill_screen();
 
   #else // No LCD
 
     static inline void init() {}
     static inline void update() {}
     static inline void return_to_status() {}
 
   #endif
 

commit 1ac7a56a823b5012250dd7259a9a7a46d3bfcde5
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Sat Sep 25 05:59:43 2021 -0500

    🐛 E3V2 Brightness followup (#22821)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 49ecd89957..270ee3afce 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -240,31 +240,32 @@ public:
       if (touch_calibration.need_calibration()) currentScreen = touch_calibration_screen;
     }
   #endif
 
   #if ENABLED(SDSUPPORT)
     #define MEDIA_MENU_GATEWAY TERN(PASSWORD_ON_SD_PRINT_MENU, password.media_gatekeeper, menu_media)
     static void media_changed(const uint8_t old_stat, const uint8_t stat);
   #endif
 
   #if HAS_LCD_BRIGHTNESS
-    #ifndef MIN_LCD_BRIGHTNESS
-      #define MIN_LCD_BRIGHTNESS   1
+    #ifndef LCD_BRIGHTNESS_MIN
+      #define LCD_BRIGHTNESS_MIN   1
     #endif
-    #ifndef MAX_LCD_BRIGHTNESS
-      #define MAX_LCD_BRIGHTNESS 255
+    #ifndef LCD_BRIGHTNESS_MAX
+      #define LCD_BRIGHTNESS_MAX 255
     #endif
     #ifndef DEFAULT_LCD_BRIGHTNESS
-      #define DEFAULT_LCD_BRIGHTNESS MAX_LCD_BRIGHTNESS
+      #define DEFAULT_LCD_BRIGHTNESS LCD_BRIGHTNESS_MAX
     #endif
     static uint8_t brightness;
     static bool backlight;
+    static void _set_brightness(); // Implementation-specific
     static void set_brightness(const uint8_t value);
     FORCE_INLINE static void refresh_brightness() { set_brightness(brightness); }
   #endif
 
   #if HAS_DWIN_E3V2_BASIC
     static void refresh();
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }
@@ -418,22 +419,23 @@ public:
         static void draw_progress_bar(const uint8_t percent);
         #if PROGRESS_MSG_EXPIRE > 0
           static millis_t expire_status_ms; // = 0
           FORCE_INLINE static void reset_progress_bar_timeout() { expire_status_ms = 0; }
         #endif
       #endif
 
       static uint8_t lcd_status_update_delay;
 
       #if HAS_LCD_CONTRAST
-        static int16_t contrast;
-        static void set_contrast(const int16_t value);
+        static uint8_t contrast;
+        static void _set_contrast(); // Implementation-specific
+        static void set_contrast(const uint8_t value);
         FORCE_INLINE static void refresh_contrast() { set_contrast(contrast); }
       #endif
 
       #if BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
         static millis_t next_filament_display;
       #endif
 
       #if HAS_TOUCH_SLEEP
         static void wakeup_screen();
       #endif

commit 5b5a8798f8fe202e86c008088f847a3edb51cc71
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Sep 15 19:48:29 2021 -0500

    🎨 Consolidate Ender-3 V2 DWIN common code (#22778)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index be016f8683..49ecd89957 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -14,26 +14,25 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
-#include "../inc/MarlinConfig.h"
-
 #include "../module/motion.h"
-
 #include "buttons.h"
 
+#include "../inc/MarlinConfig.h"
+
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
 
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "tft_io/touch_calibration.h"

commit c2e4b1626f0cce82a55e8de9dc98ed9381e1d9ad
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Tue Sep 14 04:07:08 2021 +0200

    ✨ TFT Screen/Backlight Sleep (#22617)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index e947ac9e5e..be016f8683 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -428,25 +428,29 @@ public:
       #if HAS_LCD_CONTRAST
         static int16_t contrast;
         static void set_contrast(const int16_t value);
         FORCE_INLINE static void refresh_contrast() { set_contrast(contrast); }
       #endif
 
       #if BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
         static millis_t next_filament_display;
       #endif
 
+      #if HAS_TOUCH_SLEEP
+        static void wakeup_screen();
+      #endif
+
       static void quick_feedback(const bool clear_buttons=true);
       #if HAS_BUZZER
         static void completion_feedback(const bool good=true);
       #else
-        static inline void completion_feedback(const bool=true) {}
+        static inline void completion_feedback(const bool=true) { TERN_(HAS_TOUCH_SLEEP, wakeup_screen()); }
       #endif
 
       #if DISABLED(LIGHTWEIGHT_UI)
         static void draw_status_message(const bool blink);
       #endif
 
       #if ENABLED(ADVANCED_PAUSE_FEATURE)
         static void draw_hotend_status(const uint8_t row, const uint8_t extruder);
       #endif
 

commit 453e60958a8cde6d7541b4dc3a99d054b53eb695
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 11 01:32:39 2021 -0500

    🐛 Followup to JyersUI
    
    Fix #22735, #22736

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index d3a3c9d521..e947ac9e5e 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -589,21 +589,21 @@ public:
     static inline bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }
   #else
     static constexpr bool lcd_clicked = false;
     static inline bool use_click() { return false; }
   #endif
 
-  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_LCD_MENU, EXTENSIBLE_UI, HAS_DWIN_E3V2)
+  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_LCD_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_ENHANCED, DWIN_CREALITY_LCD_JYERSUI)
     static void pause_show_message(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
   #else
     static inline void _pause_show_message() {}
     #define pause_show_message(...) _pause_show_message()
   #endif
 
   //
   // EEPROM: Reset / Init / Load / Store
   //
   #if HAS_LCD_MENU

commit 0f61d9e4dd4d4e4f27e5c688ab2c5dbd0f03af84
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Tue Sep 7 02:15:24 2021 -0500

    ✨ Ender-3 V2 CrealityUI Enhanced (#21942)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 268d018508..d3a3c9d521 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -48,25 +48,31 @@
 #endif
 
 #if E_MANUAL > 1
   #define MULTI_E_MANUAL 1
 #endif
 
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
-#if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_LCD_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_JYERSUI)
+#if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_LCD_MENU, EXTENSIBLE_UI, HAS_DWIN_E3V2)
   #include "../feature/pause.h"
   #include "../module/motion.h" // for active_extruder
 #endif
 
+#if ENABLED(DWIN_CREALITY_LCD)
+  #include "e3v2/creality/dwin.h"
+#elif ENABLED(DWIN_CREALITY_LCD_ENHANCED)
+  #include "e3v2/enhanced/dwin.h"
+#endif
+
 #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
 
 #if HAS_WIRED_LCD
 
   enum LCDViewAction : uint8_t {
     LCDVIEW_NONE,
     LCDVIEW_REDRAW_NOW,
     LCDVIEW_CALL_REDRAW_NEXT,
     LCDVIEW_CLEAR_CALL_REDRAW,
     LCDVIEW_CALL_NO_REDRAW
@@ -250,21 +256,21 @@ public:
     #endif
     #ifndef DEFAULT_LCD_BRIGHTNESS
       #define DEFAULT_LCD_BRIGHTNESS MAX_LCD_BRIGHTNESS
     #endif
     static uint8_t brightness;
     static bool backlight;
     static void set_brightness(const uint8_t value);
     FORCE_INLINE static void refresh_brightness() { set_brightness(brightness); }
   #endif
 
-  #if ENABLED(DWIN_CREALITY_LCD)
+  #if HAS_DWIN_E3V2_BASIC
     static void refresh();
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }
   #endif
 
   #if HAS_WIRED_LCD
     static bool detected();
     static void init_lcd();
@@ -308,21 +314,21 @@ public:
     #if HAS_PRINT_PROGRESS_PERMYRIAD
       FORCE_INLINE static uint16_t get_progress_permyriad() { return _get_progress(); }
     #endif
     static uint8_t get_progress_percent() { return uint8_t(_get_progress() / (PROGRESS_SCALE)); }
   #else
     static constexpr uint8_t get_progress_percent() { return 0; }
   #endif
 
   #if HAS_STATUS_MESSAGE
 
-    #if HAS_WIRED_LCD
+    #if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_ENHANCED)
       #if ENABLED(STATUS_MESSAGE_SCROLLING)
         #define MAX_MESSAGE_LENGTH _MAX(LONG_FILENAME_LENGTH, MAX_LANG_CHARSIZE * 2 * (LCD_WIDTH))
       #else
         #define MAX_MESSAGE_LENGTH (MAX_LANG_CHARSIZE * (LCD_WIDTH))
       #endif
     #else
       #define MAX_MESSAGE_LENGTH 63
     #endif
 
     static char status_message[];
@@ -344,20 +350,26 @@ public:
   #else
     static constexpr bool has_status() { return false; }
     static inline void reset_status(const bool=false) {}
     static void set_status(const char *message, const bool=false);
     static void set_status_P(PGM_P message, const int8_t=0);
     static void status_printf_P(const uint8_t, PGM_P message, ...);
     static inline void set_alert_status_P(PGM_P const) {}
     static inline void reset_alert_level() {}
   #endif
 
+  #if EITHER(HAS_DISPLAY, DWIN_CREALITY_LCD_ENHANCED)
+    static void kill_screen(PGM_P const lcd_error, PGM_P const lcd_component);
+  #else
+    static inline void kill_screen(PGM_P const, PGM_P const) {}
+  #endif
+
   #if HAS_DISPLAY
 
     static void init();
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 
@@ -450,21 +462,20 @@ public:
     #if HAS_MARLINUI_U8GLIB
       static bool drawing_screen, first_page;
     #else
       static constexpr bool drawing_screen = false, first_page = true;
     #endif
 
     #if IS_DWIN_MARLINUI
       static bool did_first_redraw;
     #endif
 
-    static void kill_screen(PGM_P const lcd_error, PGM_P const lcd_component);
     static void draw_kill_screen();
 
   #else // No LCD
 
     static inline void init() {}
     static inline void update() {}
     static inline void return_to_status() {}
 
   #endif
 
@@ -578,21 +589,21 @@ public:
     static inline bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }
   #else
     static constexpr bool lcd_clicked = false;
     static inline bool use_click() { return false; }
   #endif
 
-  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_LCD_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_JYERSUI)
+  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_LCD_MENU, EXTENSIBLE_UI, HAS_DWIN_E3V2)
     static void pause_show_message(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
   #else
     static inline void _pause_show_message() {}
     #define pause_show_message(...) _pause_show_message()
   #endif
 
   //
   // EEPROM: Reset / Init / Load / Store
   //
   #if HAS_LCD_MENU

commit 43a9c71ef7a1c9e9e294707017d372d344c774ce
Author: Jyers <76993396+Jyers@users.noreply.github.com>
Date:   Mon Sep 6 21:06:27 2021 -0700

    ✨ Ender-3 V2 with Jyers UI (#22422)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index edee8f0cc2..268d018508 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -48,60 +48,62 @@
 #endif
 
 #if E_MANUAL > 1
   #define MULTI_E_MANUAL 1
 #endif
 
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
-#if ENABLED(ADVANCED_PAUSE_FEATURE) && EITHER(HAS_LCD_MENU, EXTENSIBLE_UI)
+#if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_LCD_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_JYERSUI)
   #include "../feature/pause.h"
   #include "../module/motion.h" // for active_extruder
 #endif
 
 #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
 
 #if HAS_WIRED_LCD
 
   enum LCDViewAction : uint8_t {
     LCDVIEW_NONE,
     LCDVIEW_REDRAW_NOW,
     LCDVIEW_CALL_REDRAW_NEXT,
     LCDVIEW_CLEAR_CALL_REDRAW,
     LCDVIEW_CALL_NO_REDRAW
   };
 
   #if HAS_ADC_BUTTONS
     uint8_t get_ADC_keyValue();
   #endif
 
-  #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_BUTTONS, 50, 100)
-
   #if HAS_LCD_MENU
 
     #include "lcdprint.h"
 
     #if !HAS_GRAPHICAL_TFT
       void _wrap_string(uint8_t &col, uint8_t &row, const char * const string, read_byte_cb_t cb_read_byte, const bool wordwrap=false);
       inline void wrap_string_P(uint8_t &col, uint8_t &row, PGM_P const pstr, const bool wordwrap=false) { _wrap_string(col, row, pstr, read_byte_rom, wordwrap); }
       inline void wrap_string(uint8_t &col, uint8_t &row, const char * const string, const bool wordwrap=false) { _wrap_string(col, row, string, read_byte_ram, wordwrap); }
     #endif
 
     typedef void (*screenFunc_t)();
     typedef void (*menuAction_t)();
 
   #endif // HAS_LCD_MENU
 
 #endif // HAS_WIRED_LCD
 
+#if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
+  #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_BUTTONS, 50, 100)
+#endif
+
 #if HAS_MARLINUI_U8GLIB
   enum MarlinFont : uint8_t {
     FONT_STATUSMENU = 1,
     FONT_EDIT,
     FONT_MENU
   };
 #else
   enum HD44780CharSet : uint8_t {
     CHARSET_MENU,
     CHARSET_INFO,
@@ -356,20 +358,24 @@ public:
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 
     #if BOTH(PSU_CONTROL, PS_OFF_CONFIRM)
       static void poweroff();
     #endif
 
+    #if EITHER(HAS_WIRED_LCD, DWIN_CREALITY_LCD_JYERSUI)
+      static bool get_blink();
+    #endif
+
     #if HAS_WIRED_LCD
 
       static millis_t next_button_update_ms;
 
       static LCDViewAction lcdDrawUpdate;
       FORCE_INLINE static bool should_draw() { return bool(lcdDrawUpdate); }
       FORCE_INLINE static void refresh(const LCDViewAction type) { lcdDrawUpdate = type; }
 
       #if ENABLED(SHOW_CUSTOM_BOOTSCREEN)
         static void draw_custom_bootscreen(const uint8_t frame=0);
@@ -444,21 +450,20 @@ public:
     #if HAS_MARLINUI_U8GLIB
       static bool drawing_screen, first_page;
     #else
       static constexpr bool drawing_screen = false, first_page = true;
     #endif
 
     #if IS_DWIN_MARLINUI
       static bool did_first_redraw;
     #endif
 
-    static bool get_blink();
     static void kill_screen(PGM_P const lcd_error, PGM_P const lcd_component);
     static void draw_kill_screen();
 
   #else // No LCD
 
     static inline void init() {}
     static inline void update() {}
     static inline void return_to_status() {}
 
   #endif
@@ -573,21 +578,21 @@ public:
     static inline bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }
   #else
     static constexpr bool lcd_clicked = false;
     static inline bool use_click() { return false; }
   #endif
 
-  #if ENABLED(ADVANCED_PAUSE_FEATURE) && EITHER(HAS_LCD_MENU, EXTENSIBLE_UI)
+  #if ENABLED(ADVANCED_PAUSE_FEATURE) && ANY(HAS_LCD_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_JYERSUI)
     static void pause_show_message(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
   #else
     static inline void _pause_show_message() {}
     #define pause_show_message(...) _pause_show_message()
   #endif
 
   //
   // EEPROM: Reset / Init / Load / Store
   //
   #if HAS_LCD_MENU

commit 7d416bd055e3ccddf765208b2937dcc1fcd4ea8b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Aug 22 05:25:07 2021 -0500

    ✨ MarlinUI for Ender 3 v2 DWIN LCD (#22594)
    
    Co-Authored-By: Taylor Talkington <taylor.talkington@gmail.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 9930796a01..edee8f0cc2 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -380,36 +380,36 @@ public:
         #ifndef BOOTSCREEN_TIMEOUT
           #define BOOTSCREEN_TIMEOUT 2500
         #endif
         static void draw_marlin_bootscreen(const bool line2=false);
         static void show_marlin_bootscreen();
         static void show_bootscreen();
         static void bootscreen_completion(const millis_t sofar);
       #endif
 
       #if HAS_MARLINUI_U8GLIB
-
         static void set_font(const MarlinFont font_nr);
+      #elif IS_DWIN_MARLINUI
+        static void set_font(const uint8_t font_nr);
+      #endif
 
-      #else
-
+      #if HAS_MARLINUI_HD44780
         static void set_custom_characters(const HD44780CharSet screen_charset=CHARSET_INFO);
+      #endif
 
-        #if ENABLED(LCD_PROGRESS_BAR)
-          static millis_t progress_bar_ms;  // Start time for the current progress bar cycle
-          static void draw_progress_bar(const uint8_t percent);
-          #if PROGRESS_MSG_EXPIRE > 0
-            static millis_t expire_status_ms; // = 0
-            FORCE_INLINE static void reset_progress_bar_timeout() { expire_status_ms = 0; }
-          #endif
+      #if ENABLED(LCD_PROGRESS_BAR) && !HAS_MARLINUI_U8GLIB
+        static millis_t progress_bar_ms;  // Start time for the current progress bar cycle
+        static void draw_progress_bar(const uint8_t percent);
+        #if PROGRESS_MSG_EXPIRE > 0
+          static millis_t expire_status_ms; // = 0
+          FORCE_INLINE static void reset_progress_bar_timeout() { expire_status_ms = 0; }
         #endif
-
       #endif
 
       static uint8_t lcd_status_update_delay;
 
       #if HAS_LCD_CONTRAST
         static int16_t contrast;
         static void set_contrast(const int16_t value);
         FORCE_INLINE static void refresh_contrast() { set_contrast(contrast); }
       #endif
 
@@ -440,20 +440,24 @@ public:
       static void status_screen();
 
     #endif
 
     #if HAS_MARLINUI_U8GLIB
       static bool drawing_screen, first_page;
     #else
       static constexpr bool drawing_screen = false, first_page = true;
     #endif
 
+    #if IS_DWIN_MARLINUI
+      static bool did_first_redraw;
+    #endif
+
     static bool get_blink();
     static void kill_screen(PGM_P const lcd_error, PGM_P const lcd_component);
     static void draw_kill_screen();
 
   #else // No LCD
 
     static inline void init() {}
     static inline void update() {}
     static inline void return_to_status() {}
 

commit 1e33c1a2a78392e9182442db043384b0f96cca20
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Aug 1 14:28:53 2021 -0500

    M256 LCD brightness (#22478)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index dfa49b0fa2..9930796a01 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -232,20 +232,36 @@ public:
     static void check_touch_calibration() {
       if (touch_calibration.need_calibration()) currentScreen = touch_calibration_screen;
     }
   #endif
 
   #if ENABLED(SDSUPPORT)
     #define MEDIA_MENU_GATEWAY TERN(PASSWORD_ON_SD_PRINT_MENU, password.media_gatekeeper, menu_media)
     static void media_changed(const uint8_t old_stat, const uint8_t stat);
   #endif
 
+  #if HAS_LCD_BRIGHTNESS
+    #ifndef MIN_LCD_BRIGHTNESS
+      #define MIN_LCD_BRIGHTNESS   1
+    #endif
+    #ifndef MAX_LCD_BRIGHTNESS
+      #define MAX_LCD_BRIGHTNESS 255
+    #endif
+    #ifndef DEFAULT_LCD_BRIGHTNESS
+      #define DEFAULT_LCD_BRIGHTNESS MAX_LCD_BRIGHTNESS
+    #endif
+    static uint8_t brightness;
+    static bool backlight;
+    static void set_brightness(const uint8_t value);
+    FORCE_INLINE static void refresh_brightness() { set_brightness(brightness); }
+  #endif
+
   #if ENABLED(DWIN_CREALITY_LCD)
     static void refresh();
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }
   #endif
 
   #if HAS_WIRED_LCD
     static bool detected();

commit 9bb5b10c0c9cf5a61d2bfb9dfdb6cfe210b6002b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jul 31 05:32:13 2021 -0500

    🚚 Relocate and adjust DWIN E3V2 (#22471)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 4f11ded53f..dfa49b0fa2 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -289,20 +289,31 @@ public:
     static progress_t _get_progress();
     #if HAS_PRINT_PROGRESS_PERMYRIAD
       FORCE_INLINE static uint16_t get_progress_permyriad() { return _get_progress(); }
     #endif
     static uint8_t get_progress_percent() { return uint8_t(_get_progress() / (PROGRESS_SCALE)); }
   #else
     static constexpr uint8_t get_progress_percent() { return 0; }
   #endif
 
   #if HAS_STATUS_MESSAGE
+
+    #if HAS_WIRED_LCD
+      #if ENABLED(STATUS_MESSAGE_SCROLLING)
+        #define MAX_MESSAGE_LENGTH _MAX(LONG_FILENAME_LENGTH, MAX_LANG_CHARSIZE * 2 * (LCD_WIDTH))
+      #else
+        #define MAX_MESSAGE_LENGTH (MAX_LANG_CHARSIZE * (LCD_WIDTH))
+      #endif
+    #else
+      #define MAX_MESSAGE_LENGTH 63
+    #endif
+
     static char status_message[];
     static uint8_t alert_level; // Higher levels block lower levels
 
     #if ENABLED(STATUS_MESSAGE_SCROLLING)
       static uint8_t status_scroll_offset;
       static void advance_status_scroll();
       static char* status_and_len(uint8_t &len);
     #endif
 
     static bool has_status();

commit b34a009bb1e114addf2d831171fab967d93a651f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jul 18 19:56:28 2021 -0500

    🐛 Change font for selected language (#22381)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index bf7215d383..4f11ded53f 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -193,27 +193,25 @@
 
 class MarlinUI {
 public:
 
   MarlinUI() {
     TERN_(HAS_LCD_MENU, currentScreen = status_screen);
   }
 
   #if HAS_MULTI_LANGUAGE
     static uint8_t language;
-    static inline void set_language(const uint8_t lang) {
-      if (lang < NUM_LANGUAGES) {
-        language = lang;
-        return_to_status();
-        refresh();
-      }
-    }
+    static void set_language(const uint8_t lang);
+  #endif
+
+  #if HAS_MARLINUI_U8GLIB
+    static void update_language_font();
   #endif
 
   #if ENABLED(SOUND_MENU_ITEM)
     static bool buzzer_enabled; // Initialized by settings.load()
   #else
     static constexpr bool buzzer_enabled = true;
   #endif
 
   #if HAS_BUZZER
     static void buzz(const long duration, const uint16_t freq);

commit 3ba5eda0b28498a3e557669496e0d6ffec875876
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Fri Jul 9 19:24:14 2021 -0400

    📺 ExtUI pause state response (#22164)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 56ef741b54..bf7215d383 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -48,21 +48,21 @@
 #endif
 
 #if E_MANUAL > 1
   #define MULTI_E_MANUAL 1
 #endif
 
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
-#if BOTH(HAS_LCD_MENU, ADVANCED_PAUSE_FEATURE)
+#if ENABLED(ADVANCED_PAUSE_FEATURE) && EITHER(HAS_LCD_MENU, EXTENSIBLE_UI)
   #include "../feature/pause.h"
   #include "../module/motion.h" // for active_extruder
 #endif
 
 #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
 
 #if HAS_WIRED_LCD
 
   enum LCDViewAction : uint8_t {
     LCDVIEW_NONE,
@@ -544,21 +544,21 @@ public:
     static inline bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }
   #else
     static constexpr bool lcd_clicked = false;
     static inline bool use_click() { return false; }
   #endif
 
-  #if BOTH(HAS_LCD_MENU, ADVANCED_PAUSE_FEATURE)
+  #if ENABLED(ADVANCED_PAUSE_FEATURE) && EITHER(HAS_LCD_MENU, EXTENSIBLE_UI)
     static void pause_show_message(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
   #else
     static inline void _pause_show_message() {}
     #define pause_show_message(...) _pause_show_message()
   #endif
 
   //
   // EEPROM: Reset / Init / Load / Store
   //
   #if HAS_LCD_MENU

commit 26bfc267977ddc444513c793c18f76847e23310e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jul 9 17:09:58 2021 -0500

    🎨 Check flags without ENABLED

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 7531fae674..56ef741b54 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -104,50 +104,50 @@
 #else
   enum HD44780CharSet : uint8_t {
     CHARSET_MENU,
     CHARSET_INFO,
     CHARSET_BOOT
   };
 #endif
 
 #if PREHEAT_COUNT
   typedef struct {
-    #if ENABLED(HAS_HOTEND)
+    #if HAS_HOTEND
       celsius_t hotend_temp;
     #endif
-    #if ENABLED(HAS_HEATED_BED)
+    #if HAS_HEATED_BED
       celsius_t bed_temp;
     #endif
-    #if ENABLED(HAS_FAN)
+    #if HAS_FAN
       uint16_t fan_speed;
     #endif
   } preheat_t;
 #endif
 
 #if HAS_LCD_MENU
 
   // Manual Movement class
   class ManualMove {
   private:
     static AxisEnum axis;
     #if MULTI_E_MANUAL
       static int8_t e_index;
     #else
       static int8_t constexpr e_index = 0;
     #endif
     static millis_t start_time;
-    #if ENABLED(IS_KINEMATIC)
+    #if IS_KINEMATIC
       static xyze_pos_t all_axes_destination;
     #endif
   public:
     static float menu_scale;
-    #if ENABLED(IS_KINEMATIC)
+    #if IS_KINEMATIC
       static float offset;
     #endif
     template <typename T>
     void set_destination(const T& dest) {
       #if IS_KINEMATIC
         // Moves are segmented, so the entire move is not submitted at once.
         // Using a separate variable prevents corrupting the in-progress move.
         all_axes_destination = current_position;
         all_axes_destination.set(dest);
       #else

commit 61c48b8513f445e4c57e4bf3e4c46ea6e7b39808
Author: Cytown <cytown@gmail.com>
Date:   Wed Jun 30 01:58:11 2021 +0800

    🚸 Retain power during Pause (#22227)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 87ecc48366..7531fae674 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -522,24 +522,27 @@ public:
       static void ubl_plot(const uint8_t x_plot, const uint8_t y_plot);
     #endif
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void ubl_mesh_edit_start(const_float_t initial);
       static float ubl_mesh_value();
     #endif
 
     static void draw_select_screen_prompt(PGM_P const pref, const char * const string=nullptr, PGM_P const suff=nullptr);
 
-  #elif HAS_WIRED_LCD
+  #else
 
     static constexpr bool on_status_screen() { return true; }
-    FORCE_INLINE static void run_current_screen() { status_screen(); }
+
+    #if HAS_WIRED_LCD
+      FORCE_INLINE static void run_current_screen() { status_screen(); }
+    #endif
 
   #endif
 
   #if EITHER(HAS_LCD_MENU, EXTENSIBLE_UI)
     static bool lcd_clicked;
     static inline bool use_click() {
       const bool click = lcd_clicked;
       lcd_clicked = false;
       return click;
     }

commit f9051e5469cdd99bcb93bc46124e95984c279984
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jun 27 00:33:44 2021 -0500

    ♻️ Refactor status screen timeout

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index fa2b09b873..87ecc48366 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -442,24 +442,27 @@ public:
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif
     static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
   #endif
 
   #if PREHEAT_COUNT
     static preheat_t material_preset[PREHEAT_COUNT];
     static PGM_P get_preheat_label(const uint8_t m);
   #endif
 
+  #if SCREENS_CAN_TIME_OUT
+    static inline void reset_status_timeout(const millis_t ms) { return_to_status_ms = ms + LCD_TIMEOUT_TO_STATUS; }
+  #else
+    static inline void reset_status_timeout(const millis_t) {}
+  #endif
+
   #if HAS_LCD_MENU
-    #if LCD_TIMEOUT_TO_STATUS
-      static millis_t return_to_status_ms;
-    #endif
 
     #if HAS_TOUCH_BUTTONS
       static uint8_t touch_buttons;
       static uint8_t repeat_delay;
     #else
       static constexpr uint8_t touch_buttons = 0;
     #endif
 
     #if ENABLED(ENCODER_RATE_MULTIPLIER)
       static bool encoderRateMultiplierEnabled;
@@ -476,41 +479,41 @@ public:
     // Select Screen (modal NO/YES style dialog)
     static bool selection;
     static void set_selection(const bool sel) { selection = sel; }
     static bool update_selection();
 
     static void synchronize(PGM_P const msg=nullptr);
 
     static screenFunc_t currentScreen;
     static bool screen_changed;
     static void goto_screen(const screenFunc_t screen, const uint16_t encoder=0, const uint8_t top=0, const uint8_t items=0);
-    static void save_previous_screen();
+    static void push_current_screen();
 
     // goto_previous_screen and go_back may also be used as menu item callbacks
     static void _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, const bool is_back));
     static inline void goto_previous_screen() { _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, false)); }
     static inline void go_back()              { _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, true)); }
 
     static void return_to_status();
     static inline bool on_status_screen() { return currentScreen == status_screen; }
     FORCE_INLINE static void run_current_screen() { (*currentScreen)(); }
 
     #if ENABLED(LIGHTWEIGHT_UI)
       static void lcd_in_status(const bool inStatus);
     #endif
 
+    FORCE_INLINE static bool screen_is_sticky() {
+      return TERN1(SCREENS_CAN_TIME_OUT, defer_return_to_status);
+    }
+
     FORCE_INLINE static void defer_status_screen(const bool defer=true) {
-      #if LCD_TIMEOUT_TO_STATUS > 0
-        defer_return_to_status = defer;
-      #else
-        UNUSED(defer);
-      #endif
+      TERN(SCREENS_CAN_TIME_OUT, defer_return_to_status = defer, UNUSED(defer));
     }
 
     static inline void goto_previous_screen_no_defer() {
       defer_status_screen(false);
       goto_previous_screen();
     }
 
     #if ENABLED(SD_REPRINT_LAST_SELECTED_FILE)
       static void reselect_last_file();
     #endif
@@ -648,30 +651,32 @@ public:
   #if ENABLED(TOUCH_SCREEN_CALIBRATION)
     static void touch_calibration_screen();
   #endif
 
   #if HAS_GRAPHICAL_TFT
     static void move_axis_screen();
   #endif
 
 private:
 
+  #if SCREENS_CAN_TIME_OUT
+    static millis_t return_to_status_ms;
+    static bool defer_return_to_status;
+  #else
+    static constexpr bool defer_return_to_status = false;
+  #endif
+
   #if HAS_STATUS_MESSAGE
     static void finish_status(const bool persist);
   #endif
 
   #if HAS_WIRED_LCD
-    #if HAS_LCD_MENU && LCD_TIMEOUT_TO_STATUS > 0
-      static bool defer_return_to_status;
-    #else
-      static constexpr bool defer_return_to_status = false;
-    #endif
     static void draw_status_screen();
     #if HAS_GRAPHICAL_TFT
       static void tft_idle();
       #if ENABLED(TOUCH_SCREEN)
         static bool touch_pressed();
       #endif
     #endif
   #endif
 };
 

commit 0bd113b944d041192146692de50e33fe4d6c0fd8
Author: Cytown <cytown@gmail.com>
Date:   Thu Jun 24 00:40:32 2021 +0800

    ✨ Power-off confirm / beep options (#22191)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 14514e2a65..fa2b09b873 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -327,20 +327,24 @@ public:
   #if HAS_DISPLAY
 
     static void init();
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
     static void flow_fault();
 
+    #if BOTH(PSU_CONTROL, PS_OFF_CONFIRM)
+      static void poweroff();
+    #endif
+
     #if HAS_WIRED_LCD
 
       static millis_t next_button_update_ms;
 
       static LCDViewAction lcdDrawUpdate;
       FORCE_INLINE static bool should_draw() { return bool(lcdDrawUpdate); }
       FORCE_INLINE static void refresh(const LCDViewAction type) { lcdDrawUpdate = type; }
 
       #if ENABLED(SHOW_CUSTOM_BOOTSCREEN)
         static void draw_custom_bootscreen(const uint8_t frame=0);

commit a3e8bb99e472042c7db0b2d0be8d515ee715cf28
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Jun 13 23:08:46 2021 -0400

    🎨 ExtUI "user click" and other tweaks (#22122)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 766e46c66b..14514e2a65 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -467,23 +467,20 @@ public:
     #endif
 
     // Manual Movement
     static ManualMove manual_move;
 
     // Select Screen (modal NO/YES style dialog)
     static bool selection;
     static void set_selection(const bool sel) { selection = sel; }
     static bool update_selection();
 
-    static bool lcd_clicked;
-    static bool use_click();
-
     static void synchronize(PGM_P const msg=nullptr);
 
     static screenFunc_t currentScreen;
     static bool screen_changed;
     static void goto_screen(const screenFunc_t screen, const uint16_t encoder=0, const uint8_t top=0, const uint8_t items=0);
     static void save_previous_screen();
 
     // goto_previous_screen and go_back may also be used as menu item callbacks
     static void _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, const bool is_back));
     static inline void goto_previous_screen() { _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, false)); }
@@ -520,26 +517,37 @@ public:
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void ubl_mesh_edit_start(const_float_t initial);
       static float ubl_mesh_value();
     #endif
 
     static void draw_select_screen_prompt(PGM_P const pref, const char * const string=nullptr, PGM_P const suff=nullptr);
 
   #elif HAS_WIRED_LCD
 
-    static constexpr bool lcd_clicked = false;
     static constexpr bool on_status_screen() { return true; }
     FORCE_INLINE static void run_current_screen() { status_screen(); }
 
   #endif
 
+  #if EITHER(HAS_LCD_MENU, EXTENSIBLE_UI)
+    static bool lcd_clicked;
+    static inline bool use_click() {
+      const bool click = lcd_clicked;
+      lcd_clicked = false;
+      return click;
+    }
+  #else
+    static constexpr bool lcd_clicked = false;
+    static inline bool use_click() { return false; }
+  #endif
+
   #if BOTH(HAS_LCD_MENU, ADVANCED_PAUSE_FEATURE)
     static void pause_show_message(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
   #else
     static inline void _pause_show_message() {}
     #define pause_show_message(...) _pause_show_message()
   #endif
 
   //
   // EEPROM: Reset / Init / Load / Store
   //

commit 84fd0eff17d089e3f75f6585d4bba47f15c00ba7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 23 21:33:22 2021 -0500

    🎨 Macros for optional arguments (#21969)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index ba0221713b..766e46c66b 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -175,25 +175,21 @@
           NOMORE(valref, rmax);
       }
       return pre != valref;
     }
     #if IS_KINEMATIC
       static bool processing;
     #else
       static bool constexpr processing = false;
     #endif
     static void task();
-    static void soon(const AxisEnum axis
-      #if MULTI_E_MANUAL
-        , const int8_t eindex=-1
-      #endif
-    );
+    static void soon(const AxisEnum axis OPTARG(MULTI_E_MANUAL, const int8_t eindex=active_extruder));
   };
 
 #endif
 
 ////////////////////////////////////////////
 //////////// MarlinUI Singleton ////////////
 ////////////////////////////////////////////
 
 class MarlinUI {
 public:

commit 000388b1d9e38a2678e8235a5d4dc3163f853c02
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 20 17:12:18 2021 -0500

    🎨 MULTI_MANUAL => MULTI_E_MANUAL

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 085e2e0b7e..ba0221713b 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -41,21 +41,21 @@
 
 #if ANY(HAS_LCD_MENU, ULTIPANEL_FEEDMULTIPLY, SOFT_RESET_ON_KILL)
   #define HAS_ENCODER_ACTION 1
 #endif
 
 #if HAS_STATUS_MESSAGE
   #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
 #endif
 
 #if E_MANUAL > 1
-  #define MULTI_MANUAL 1
+  #define MULTI_E_MANUAL 1
 #endif
 
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
 #if BOTH(HAS_LCD_MENU, ADVANCED_PAUSE_FEATURE)
   #include "../feature/pause.h"
   #include "../module/motion.h" // for active_extruder
 #endif
@@ -122,21 +122,21 @@
     #endif
   } preheat_t;
 #endif
 
 #if HAS_LCD_MENU
 
   // Manual Movement class
   class ManualMove {
   private:
     static AxisEnum axis;
-    #if MULTI_MANUAL
+    #if MULTI_E_MANUAL
       static int8_t e_index;
     #else
       static int8_t constexpr e_index = 0;
     #endif
     static millis_t start_time;
     #if ENABLED(IS_KINEMATIC)
       static xyze_pos_t all_axes_destination;
     #endif
   public:
     static float menu_scale;
@@ -176,21 +176,21 @@
       }
       return pre != valref;
     }
     #if IS_KINEMATIC
       static bool processing;
     #else
       static bool constexpr processing = false;
     #endif
     static void task();
     static void soon(const AxisEnum axis
-      #if MULTI_MANUAL
+      #if MULTI_E_MANUAL
         , const int8_t eindex=-1
       #endif
     );
   };
 
 #endif
 
 ////////////////////////////////////////////
 //////////// MarlinUI Singleton ////////////
 ////////////////////////////////////////////

commit 2e0a1f1afff71a29e5fb5eb99c509d0de5384087
Author: David <davidtgbe@hotmail.com>
Date:   Wed Apr 28 11:08:21 2021 +0200

    Color UI Move Screen for 320x240 TFT (#21708)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 8befa1d980..085e2e0b7e 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -148,27 +148,48 @@
       #if IS_KINEMATIC
         // Moves are segmented, so the entire move is not submitted at once.
         // Using a separate variable prevents corrupting the in-progress move.
         all_axes_destination = current_position;
         all_axes_destination.set(dest);
       #else
         // Moves are submitted as single line to the planner using buffer_line.
         current_position.set(dest);
       #endif
     }
+    float axis_value(const AxisEnum axis) {
+      return NATIVE_TO_LOGICAL(processing ? destination[axis] : SUM_TERN(IS_KINEMATIC, current_position[axis], offset), axis);
+    }
+    bool apply_diff(const AxisEnum axis, const_float_t diff, const_float_t min, const_float_t max) {
+      #if IS_KINEMATIC
+        float &valref = offset;
+        const float rmin = min - current_position[axis], rmax = max - current_position[axis];
+      #else
+        float &valref = current_position[axis];
+        const float rmin = min, rmax = max;
+      #endif
+      valref += diff;
+      const float pre = valref;
+      if (min != max) {
+        if (diff < 0)
+          NOLESS(valref, rmin);
+        else
+          NOMORE(valref, rmax);
+      }
+      return pre != valref;
+    }
     #if IS_KINEMATIC
       static bool processing;
     #else
       static bool constexpr processing = false;
     #endif
     static void task();
-    static void soon(AxisEnum axis
+    static void soon(const AxisEnum axis
       #if MULTI_MANUAL
         , const int8_t eindex=-1
       #endif
     );
   };
 
 #endif
 
 ////////////////////////////////////////////
 //////////// MarlinUI Singleton ////////////

commit d3a2c6a0b47fba8f560ff9ea60e73eb2610ff527
Author: fedetony <45215920+fedetony@users.noreply.github.com>
Date:   Sat Apr 24 09:53:52 2021 +0200

    Soft Reset via Serial or post-kill button click (#21652)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 8cbb9ebd19..8befa1d980 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -32,21 +32,21 @@
 #endif
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
 
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "tft_io/touch_calibration.h"
 #endif
 
-#if EITHER(HAS_LCD_MENU, ULTIPANEL_FEEDMULTIPLY)
+#if ANY(HAS_LCD_MENU, ULTIPANEL_FEEDMULTIPLY, SOFT_RESET_ON_KILL)
   #define HAS_ENCODER_ACTION 1
 #endif
 
 #if HAS_STATUS_MESSAGE
   #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
 #endif
 
 #if E_MANUAL > 1
   #define MULTI_MANUAL 1
 #endif

commit a29aefc9c0c02c23862fded29e3f950ead339238
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 24 01:29:30 2021 -0500

    Move last bootscreen delay to end of setup (#21665)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 24fedb039e..8cbb9ebd19 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -330,20 +330,21 @@ public:
         static void show_custom_bootscreen();
       #endif
 
       #if ENABLED(SHOW_BOOTSCREEN)
         #ifndef BOOTSCREEN_TIMEOUT
           #define BOOTSCREEN_TIMEOUT 2500
         #endif
         static void draw_marlin_bootscreen(const bool line2=false);
         static void show_marlin_bootscreen();
         static void show_bootscreen();
+        static void bootscreen_completion(const millis_t sofar);
       #endif
 
       #if HAS_MARLINUI_U8GLIB
 
         static void set_font(const MarlinFont font_nr);
 
       #else
 
         static void set_custom_characters(const HD44780CharSet screen_charset=CHARSET_INFO);
 

commit 62f37669dc506a6e579389ca549ce5993548944d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Apr 1 17:59:57 2021 -0500

    Replace 'const float &' with 'const_float_t' (#21505)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 57e6fc26e6..24fedb039e 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -494,21 +494,21 @@ public:
 
     #if ENABLED(SD_REPRINT_LAST_SELECTED_FILE)
       static void reselect_last_file();
     #endif
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void ubl_plot(const uint8_t x_plot, const uint8_t y_plot);
     #endif
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
-      static void ubl_mesh_edit_start(const float &initial);
+      static void ubl_mesh_edit_start(const_float_t initial);
       static float ubl_mesh_value();
     #endif
 
     static void draw_select_screen_prompt(PGM_P const pref, const char * const string=nullptr, PGM_P const suff=nullptr);
 
   #elif HAS_WIRED_LCD
 
     static constexpr bool lcd_clicked = false;
     static constexpr bool on_status_screen() { return true; }
     FORCE_INLINE static void run_current_screen() { status_screen(); }

commit 3b73b115ca9366f0155986b717d4c85c31ed2f80
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Mar 29 20:36:37 2021 -0500

    Apply pointer formatting

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index f85771f562..57e6fc26e6 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -285,29 +285,29 @@ public:
     static uint8_t alert_level; // Higher levels block lower levels
 
     #if ENABLED(STATUS_MESSAGE_SCROLLING)
       static uint8_t status_scroll_offset;
       static void advance_status_scroll();
       static char* status_and_len(uint8_t &len);
     #endif
 
     static bool has_status();
     static void reset_status(const bool no_welcome=false);
-    static void set_status(const char* const message, const bool persist=false);
+    static void set_status(const char * const message, const bool persist=false);
     static void set_status_P(PGM_P const message, const int8_t level=0);
     static void status_printf_P(const uint8_t level, PGM_P const fmt, ...);
     static void set_alert_status_P(PGM_P const message);
     static inline void reset_alert_level() { alert_level = 0; }
   #else
     static constexpr bool has_status() { return false; }
     static inline void reset_status(const bool=false) {}
-    static void set_status(const char* message, const bool=false);
+    static void set_status(const char *message, const bool=false);
     static void set_status_P(PGM_P message, const int8_t=0);
     static void status_printf_P(const uint8_t, PGM_P message, ...);
     static inline void set_alert_status_P(PGM_P const) {}
     static inline void reset_alert_level() {}
   #endif
 
   #if HAS_DISPLAY
 
     static void init();
     static void update();

commit ccdbffbf3f599f0860c643647ce6c40f1eb5a4cd
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Mon Mar 29 01:41:56 2021 -0500

    Laser Coolant Flow Meter / Safety Shutdown (#21431)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index cc08284d17..f85771f562 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -36,20 +36,24 @@
 #endif
 
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "tft_io/touch_calibration.h"
 #endif
 
 #if EITHER(HAS_LCD_MENU, ULTIPANEL_FEEDMULTIPLY)
   #define HAS_ENCODER_ACTION 1
 #endif
 
+#if HAS_STATUS_MESSAGE
+  #define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
+#endif
+
 #if E_MANUAL > 1
   #define MULTI_MANUAL 1
 #endif
 
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
 #if BOTH(HAS_LCD_MENU, ADVANCED_PAUSE_FEATURE)
   #include "../feature/pause.h"
@@ -304,20 +308,21 @@ public:
   #endif
 
   #if HAS_DISPLAY
 
     static void init();
     static void update();
 
     static void abort_print();
     static void pause_print();
     static void resume_print();
+    static void flow_fault();
 
     #if HAS_WIRED_LCD
 
       static millis_t next_button_update_ms;
 
       static LCDViewAction lcdDrawUpdate;
       FORCE_INLINE static bool should_draw() { return bool(lcdDrawUpdate); }
       FORCE_INLINE static void refresh(const LCDViewAction type) { lcdDrawUpdate = type; }
 
       #if ENABLED(SHOW_CUSTOM_BOOTSCREEN)

commit 30e7e2c2766d7dbbe0144344287994f1969dfadd
Author: Martijn Bosgraaf <drywfiltiarn+github@gmail.com>
Date:   Wed Mar 24 18:21:11 2021 +0100

    Extend M106/M107 for better laser module support (#16082)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 490d78401e..cc08284d17 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -49,20 +49,22 @@
 
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
 #if BOTH(HAS_LCD_MENU, ADVANCED_PAUSE_FEATURE)
   #include "../feature/pause.h"
   #include "../module/motion.h" // for active_extruder
 #endif
 
+#define START_OF_UTF8_CHAR(C) (((C) & 0xC0u) != 0x80U)
+
 #if HAS_WIRED_LCD
 
   enum LCDViewAction : uint8_t {
     LCDVIEW_NONE,
     LCDVIEW_REDRAW_NOW,
     LCDVIEW_CALL_REDRAW_NEXT,
     LCDVIEW_CLEAR_CALL_REDRAW,
     LCDVIEW_CALL_NO_REDRAW
   };
 

commit 2d2291d00eab6159de24eb7ff74001b1d6dd29e4
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Mar 24 05:40:28 2021 -0500

    More IntelliSense-friendly declarations

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index a18a3384af..490d78401e 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -98,42 +98,52 @@
 #else
   enum HD44780CharSet : uint8_t {
     CHARSET_MENU,
     CHARSET_INFO,
     CHARSET_BOOT
   };
 #endif
 
 #if PREHEAT_COUNT
   typedef struct {
-    TERN_(HAS_HOTEND,     celsius_t hotend_temp);
-    TERN_(HAS_HEATED_BED, celsius_t bed_temp   );
-    TERN_(HAS_FAN,        uint16_t  fan_speed  );
+    #if ENABLED(HAS_HOTEND)
+      celsius_t hotend_temp;
+    #endif
+    #if ENABLED(HAS_HEATED_BED)
+      celsius_t bed_temp;
+    #endif
+    #if ENABLED(HAS_FAN)
+      uint16_t fan_speed;
+    #endif
   } preheat_t;
 #endif
 
 #if HAS_LCD_MENU
 
   // Manual Movement class
   class ManualMove {
   private:
     static AxisEnum axis;
     #if MULTI_MANUAL
       static int8_t e_index;
     #else
       static int8_t constexpr e_index = 0;
     #endif
     static millis_t start_time;
-    TERN_(IS_KINEMATIC, static xyze_pos_t all_axes_destination);
+    #if ENABLED(IS_KINEMATIC)
+      static xyze_pos_t all_axes_destination;
+    #endif
   public:
     static float menu_scale;
-    TERN_(IS_KINEMATIC, static float offset);
+    #if ENABLED(IS_KINEMATIC)
+      static float offset;
+    #endif
     template <typename T>
     void set_destination(const T& dest) {
       #if IS_KINEMATIC
         // Moves are segmented, so the entire move is not submitted at once.
         // Using a separate variable prevents corrupting the in-progress move.
         all_axes_destination = current_position;
         all_axes_destination.set(dest);
       #else
         // Moves are submitted as single line to the planner using buffer_line.
         current_position.set(dest);

commit da4b6896f7e4f102d8c2164e7aecf22cf2922fe2
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Mar 24 03:28:48 2021 -0500

    Group UBL parameters, add comments

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 6f5703e622..a18a3384af 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -78,25 +78,20 @@
 
     #if !HAS_GRAPHICAL_TFT
       void _wrap_string(uint8_t &col, uint8_t &row, const char * const string, read_byte_cb_t cb_read_byte, const bool wordwrap=false);
       inline void wrap_string_P(uint8_t &col, uint8_t &row, PGM_P const pstr, const bool wordwrap=false) { _wrap_string(col, row, pstr, read_byte_rom, wordwrap); }
       inline void wrap_string(uint8_t &col, uint8_t &row, const char * const string, const bool wordwrap=false) { _wrap_string(col, row, string, read_byte_ram, wordwrap); }
     #endif
 
     typedef void (*screenFunc_t)();
     typedef void (*menuAction_t)();
 
-    #if ENABLED(AUTO_BED_LEVELING_UBL)
-      void lcd_mesh_edit_setup(const float &initial);
-      float lcd_mesh_edit();
-    #endif
-
   #endif // HAS_LCD_MENU
 
 #endif // HAS_WIRED_LCD
 
 #if HAS_MARLINUI_U8GLIB
   enum MarlinFont : uint8_t {
     FONT_STATUSMENU = 1,
     FONT_EDIT,
     FONT_MENU
   };
@@ -481,20 +476,25 @@ public:
     }
 
     #if ENABLED(SD_REPRINT_LAST_SELECTED_FILE)
       static void reselect_last_file();
     #endif
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       static void ubl_plot(const uint8_t x_plot, const uint8_t y_plot);
     #endif
 
+    #if ENABLED(AUTO_BED_LEVELING_UBL)
+      static void ubl_mesh_edit_start(const float &initial);
+      static float ubl_mesh_value();
+    #endif
+
     static void draw_select_screen_prompt(PGM_P const pref, const char * const string=nullptr, PGM_P const suff=nullptr);
 
   #elif HAS_WIRED_LCD
 
     static constexpr bool lcd_clicked = false;
     static constexpr bool on_status_screen() { return true; }
     FORCE_INLINE static void run_current_screen() { status_screen(); }
 
   #endif
 

commit e5ff55a1be7646b6159e6dedac50bfbe57e6dfa0
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 24 04:11:43 2021 -0500

    Add typedef celsius_t (#21374)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 1c9e80c75e..6f5703e622 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -103,23 +103,23 @@
 #else
   enum HD44780CharSet : uint8_t {
     CHARSET_MENU,
     CHARSET_INFO,
     CHARSET_BOOT
   };
 #endif
 
 #if PREHEAT_COUNT
   typedef struct {
-    TERN_(HAS_HOTEND,     uint16_t hotend_temp);
-    TERN_(HAS_HEATED_BED, uint16_t bed_temp   );
-    TERN_(HAS_FAN,        uint16_t fan_speed  );
+    TERN_(HAS_HOTEND,     celsius_t hotend_temp);
+    TERN_(HAS_HEATED_BED, celsius_t bed_temp   );
+    TERN_(HAS_FAN,        uint16_t  fan_speed  );
   } preheat_t;
 #endif
 
 #if HAS_LCD_MENU
 
   // Manual Movement class
   class ManualMove {
   private:
     static AxisEnum axis;
     #if MULTI_MANUAL

commit 35e9c131d63dca39b5c6de8abe64bfdd89b3c640
Author: ellensp <ellensp@hotmail.com>
Date:   Mon Feb 15 23:42:33 2021 +1300

    Fix remaining time divide-by-zero (#21080)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 2e55c9ad1d..1c9e80c75e 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -241,21 +241,21 @@ public:
     #endif
     #if ENABLED(LCD_SET_PROGRESS_MANUALLY)
       static progress_t progress_override;
       static void set_progress(const progress_t p) { progress_override = _MIN(p, 100U * (PROGRESS_SCALE)); }
       static void set_progress_done() { progress_override = (PROGRESS_MASK + 1U) + 100U * (PROGRESS_SCALE); }
       static void progress_reset() { if (progress_override & (PROGRESS_MASK + 1U)) set_progress(0); }
       #if ENABLED(SHOW_REMAINING_TIME)
         static inline uint32_t _calculated_remaining_time() {
           const duration_t elapsed = print_job_timer.duration();
           const progress_t progress = _get_progress();
-          return elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
+          return progress ? elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress : 0;
         }
         #if ENABLED(USE_M73_REMAINING_TIME)
           static uint32_t remaining_time;
           FORCE_INLINE static void set_remaining_time(const uint32_t r) { remaining_time = r; }
           FORCE_INLINE static uint32_t get_remaining_time() { return remaining_time ?: _calculated_remaining_time(); }
           FORCE_INLINE static void reset_remaining_time() { set_remaining_time(0); }
         #else
           FORCE_INLINE static uint32_t get_remaining_time() { return _calculated_remaining_time(); }
         #endif
       #endif

commit c0870d417a68ff4303100f165282d41be9129a5c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jan 21 03:40:07 2021 -0600

    Move some MarlinCore and MarlinUI code (#20832)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 95a521d5dd..2e55c9ad1d 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -44,28 +44,26 @@
 #endif
 
 #if E_MANUAL > 1
   #define MULTI_MANUAL 1
 #endif
 
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
-#if HAS_WIRED_LCD
-
-  #include "../MarlinCore.h"
+#if BOTH(HAS_LCD_MENU, ADVANCED_PAUSE_FEATURE)
+  #include "../feature/pause.h"
+  #include "../module/motion.h" // for active_extruder
+#endif
 
-  #if ENABLED(ADVANCED_PAUSE_FEATURE)
-    #include "../feature/pause.h"
-    #include "../module/motion.h" // for active_extruder
-  #endif
+#if HAS_WIRED_LCD
 
   enum LCDViewAction : uint8_t {
     LCDVIEW_NONE,
     LCDVIEW_REDRAW_NOW,
     LCDVIEW_CALL_REDRAW_NEXT,
     LCDVIEW_CLEAR_CALL_REDRAW,
     LCDVIEW_CALL_NO_REDRAW
   };
 
   #if HAS_ADC_BUTTONS
@@ -80,26 +78,20 @@
 
     #if !HAS_GRAPHICAL_TFT
       void _wrap_string(uint8_t &col, uint8_t &row, const char * const string, read_byte_cb_t cb_read_byte, const bool wordwrap=false);
       inline void wrap_string_P(uint8_t &col, uint8_t &row, PGM_P const pstr, const bool wordwrap=false) { _wrap_string(col, row, pstr, read_byte_rom, wordwrap); }
       inline void wrap_string(uint8_t &col, uint8_t &row, const char * const string, const bool wordwrap=false) { _wrap_string(col, row, string, read_byte_ram, wordwrap); }
     #endif
 
     typedef void (*screenFunc_t)();
     typedef void (*menuAction_t)();
 
-    #if ENABLED(ADVANCED_PAUSE_FEATURE)
-      void lcd_pause_show_message(const PauseMessage message,
-                                  const PauseMode mode=PAUSE_MODE_SAME,
-                                  const uint8_t extruder=active_extruder);
-    #endif
-
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       void lcd_mesh_edit_setup(const float &initial);
       float lcd_mesh_edit();
     #endif
 
   #endif // HAS_LCD_MENU
 
 #endif // HAS_WIRED_LCD
 
 #if HAS_MARLINUI_U8GLIB
@@ -499,20 +491,27 @@ public:
     static void draw_select_screen_prompt(PGM_P const pref, const char * const string=nullptr, PGM_P const suff=nullptr);
 
   #elif HAS_WIRED_LCD
 
     static constexpr bool lcd_clicked = false;
     static constexpr bool on_status_screen() { return true; }
     FORCE_INLINE static void run_current_screen() { status_screen(); }
 
   #endif
 
+  #if BOTH(HAS_LCD_MENU, ADVANCED_PAUSE_FEATURE)
+    static void pause_show_message(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
+  #else
+    static inline void _pause_show_message() {}
+    #define pause_show_message(...) _pause_show_message()
+  #endif
+
   //
   // EEPROM: Reset / Init / Load / Store
   //
   #if HAS_LCD_MENU
     static void reset_settings();
   #endif
 
   #if ENABLED(EEPROM_SETTINGS)
     #if HAS_LCD_MENU
       static void init_eeprom();

commit 68abaeab19b41824bc151bc0f65e76ce8a2e4916
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jan 20 18:52:06 2021 -0600

    MarlinUI multi-language support (#20725)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index a64483fcb0..95a521d5dd 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -171,20 +171,31 @@
 //////////// MarlinUI Singleton ////////////
 ////////////////////////////////////////////
 
 class MarlinUI {
 public:
 
   MarlinUI() {
     TERN_(HAS_LCD_MENU, currentScreen = status_screen);
   }
 
+  #if HAS_MULTI_LANGUAGE
+    static uint8_t language;
+    static inline void set_language(const uint8_t lang) {
+      if (lang < NUM_LANGUAGES) {
+        language = lang;
+        return_to_status();
+        refresh();
+      }
+    }
+  #endif
+
   #if ENABLED(SOUND_MENU_ITEM)
     static bool buzzer_enabled; // Initialized by settings.load()
   #else
     static constexpr bool buzzer_enabled = true;
   #endif
 
   #if HAS_BUZZER
     static void buzz(const long duration, const uint16_t freq);
   #endif
 

commit 4a897310252341f203371cb2e99f93bf9c035143
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 20:43:52 2021 -0600

    Rotary encoder cleanup (#20753)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index a926dd58f4..a64483fcb0 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -18,49 +18,37 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfig.h"
 
 #include "../module/motion.h"
 
+#include "buttons.h"
+
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
 
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "tft_io/touch_calibration.h"
 #endif
 
 #if EITHER(HAS_LCD_MENU, ULTIPANEL_FEEDMULTIPLY)
   #define HAS_ENCODER_ACTION 1
 #endif
-#if ((!HAS_ADC_BUTTONS && IS_NEWPANEL) || BUTTONS_EXIST(EN1, EN2)) && !IS_TFTGLCD_PANEL
-  #define HAS_ENCODER_WHEEL 1
-#endif
-#if HAS_ENCODER_WHEEL || ANY_BUTTON(ENC, BACK, UP, DWN, LFT, RT)
-  #define HAS_DIGITAL_BUTTONS 1
-#endif
-#if !HAS_ADC_BUTTONS && (IS_RRW_KEYPAD || (HAS_WIRED_LCD && !IS_NEWPANEL))
-  #define HAS_SHIFT_ENCODER 1
-#endif
-
-// I2C buttons must be read in the main thread
-#if ANY(LCD_I2C_VIKI, LCD_I2C_PANELOLU2, IS_TFTGLCD_PANEL)
-  #define HAS_SLOW_BUTTONS 1
-#endif
 
 #if E_MANUAL > 1
   #define MULTI_MANUAL 1
 #endif
 
 #if HAS_DISPLAY
   #include "../module/printcounter.h"
 #endif
 
 #if HAS_WIRED_LCD
@@ -107,144 +95,20 @@
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       void lcd_mesh_edit_setup(const float &initial);
       float lcd_mesh_edit();
     #endif
 
   #endif // HAS_LCD_MENU
 
 #endif // HAS_WIRED_LCD
 
-#if IS_RRW_KEYPAD
-  #define BTN_OFFSET          0 // Bit offset into buttons for shift register values
-
-  #define BLEN_KEYPAD_F3      0
-  #define BLEN_KEYPAD_F2      1
-  #define BLEN_KEYPAD_F1      2
-  #define BLEN_KEYPAD_DOWN    3
-  #define BLEN_KEYPAD_RIGHT   4
-  #define BLEN_KEYPAD_MIDDLE  5
-  #define BLEN_KEYPAD_UP      6
-  #define BLEN_KEYPAD_LEFT    7
-
-  #define EN_KEYPAD_F1      _BV(BTN_OFFSET + BLEN_KEYPAD_F1)
-  #define EN_KEYPAD_F2      _BV(BTN_OFFSET + BLEN_KEYPAD_F2)
-  #define EN_KEYPAD_F3      _BV(BTN_OFFSET + BLEN_KEYPAD_F3)
-  #define EN_KEYPAD_DOWN    _BV(BTN_OFFSET + BLEN_KEYPAD_DOWN)
-  #define EN_KEYPAD_RIGHT   _BV(BTN_OFFSET + BLEN_KEYPAD_RIGHT)
-  #define EN_KEYPAD_MIDDLE  _BV(BTN_OFFSET + BLEN_KEYPAD_MIDDLE)
-  #define EN_KEYPAD_UP      _BV(BTN_OFFSET + BLEN_KEYPAD_UP)
-  #define EN_KEYPAD_LEFT    _BV(BTN_OFFSET + BLEN_KEYPAD_LEFT)
-
-  #define RRK(B) (keypad_buttons & (B))
-
-  #ifdef EN_C
-    #define BUTTON_CLICK() ((buttons & EN_C) || RRK(EN_KEYPAD_MIDDLE))
-  #else
-    #define BUTTON_CLICK() RRK(EN_KEYPAD_MIDDLE)
-  #endif
-
-#endif // IS_RRW_KEYPAD
-
-#if HAS_DIGITAL_BUTTONS
-
-  // Wheel spin pins where BA is 00, 10, 11, 01 (1 bit always changes)
-  #define BLEN_A 0
-  #define BLEN_B 1
-
-  #define EN_A _BV(BLEN_A)
-  #define EN_B _BV(BLEN_B)
-
-  #define BUTTON_PRESSED(BN) !READ(BTN_## BN)
-
-  #if BUTTON_EXISTS(ENC) || HAS_TOUCH_BUTTONS
-    #define BLEN_C 2
-    #define EN_C _BV(BLEN_C)
-  #endif
-
-  #if ENABLED(LCD_I2C_VIKI)
-
-    #include <LiquidTWI2.h>
-
-    #define B_I2C_BTN_OFFSET 3 // (the first three bit positions reserved for EN_A, EN_B, EN_C)
-
-    // button and encoder bit positions within 'buttons'
-    #define B_LE (BUTTON_LEFT   << B_I2C_BTN_OFFSET)      // The remaining normalized buttons are all read via I2C
-    #define B_UP (BUTTON_UP     << B_I2C_BTN_OFFSET)
-    #define B_MI (BUTTON_SELECT << B_I2C_BTN_OFFSET)
-    #define B_DW (BUTTON_DOWN   << B_I2C_BTN_OFFSET)
-    #define B_RI (BUTTON_RIGHT  << B_I2C_BTN_OFFSET)
-
-    #if BUTTON_EXISTS(ENC)                                // The pause/stop/restart button is connected to BTN_ENC when used
-      #define B_ST (EN_C)                                 // Map the pause/stop/resume button into its normalized functional name
-      #define BUTTON_CLICK() (buttons & (B_MI|B_RI|B_ST)) // Pause/stop also acts as click until a proper pause/stop is implemented.
-    #else
-      #define BUTTON_CLICK() (buttons & (B_MI|B_RI))
-    #endif
-
-    // I2C buttons take too long to read inside an interrupt context and so we read them during lcd_update
-
-  #elif ENABLED(LCD_I2C_PANELOLU2)
-
-    #if !BUTTON_EXISTS(ENC) // Use I2C if not directly connected to a pin
-
-      #define B_I2C_BTN_OFFSET 3 // (the first three bit positions reserved for EN_A, EN_B, EN_C)
-
-      #define B_MI (PANELOLU2_ENCODER_C << B_I2C_BTN_OFFSET) // requires LiquidTWI2 library v1.2.3 or later
-
-      #define BUTTON_CLICK() (buttons & B_MI)
-
-    #endif
-
-  #endif
-
-#else
-
-  #undef BUTTON_EXISTS
-  #define BUTTON_EXISTS(...) false
-
-  // Shift register bits correspond to buttons:
-  #define BL_LE 7   // Left
-  #define BL_UP 6   // Up
-  #define BL_MI 5   // Middle
-  #define BL_DW 4   // Down
-  #define BL_RI 3   // Right
-  #define BL_ST 2   // Red Button
-  #define B_LE _BV(BL_LE)
-  #define B_UP _BV(BL_UP)
-  #define B_MI _BV(BL_MI)
-  #define B_DW _BV(BL_DW)
-  #define B_RI _BV(BL_RI)
-  #define B_ST _BV(BL_ST)
-
-  #ifndef BUTTON_CLICK
-    #define BUTTON_CLICK() (buttons & (B_MI|B_ST))
-  #endif
-
-#endif
-
-#if BUTTON_EXISTS(BACK) || EITHER(HAS_TOUCH_BUTTONS, IS_TFTGLCD_PANEL)
-  #define BLEN_D 3
-  #define EN_D _BV(BLEN_D)
-  #define LCD_BACK_CLICKED() (buttons & EN_D)
-#else
-  #define LCD_BACK_CLICKED() false
-#endif
-
-#ifndef BUTTON_CLICK
-  #ifdef EN_C
-    #define BUTTON_CLICK() (buttons & EN_C)
-  #else
-    #define BUTTON_CLICK() false
-  #endif
-#endif
-
 #if HAS_MARLINUI_U8GLIB
   enum MarlinFont : uint8_t {
     FONT_STATUSMENU = 1,
     FONT_EDIT,
     FONT_MENU
   };
 #else
   enum HD44780CharSet : uint8_t {
     CHARSET_MENU,
     CHARSET_INFO,
@@ -549,20 +413,22 @@ public:
   #endif
 
   #if HAS_LCD_MENU
     #if LCD_TIMEOUT_TO_STATUS
       static millis_t return_to_status_ms;
     #endif
 
     #if HAS_TOUCH_BUTTONS
       static uint8_t touch_buttons;
       static uint8_t repeat_delay;
+    #else
+      static constexpr uint8_t touch_buttons = 0;
     #endif
 
     #if ENABLED(ENCODER_RATE_MULTIPLIER)
       static bool encoderRateMultiplierEnabled;
       static millis_t lastEncoderMovementMillis;
       static void enable_encoder_multiplier(const bool onoff);
       #define ENCODER_RATE_MULTIPLY(F) (ui.encoderRateMultiplierEnabled = F)
     #else
       #define ENCODER_RATE_MULTIPLY(F) NOOP
     #endif

commit 1d63fe6542d761b00d3e76296e02f600f0a83c09
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 2 19:01:09 2021 -0600

    Add ALL_AXES manual move for UBL mesh editing
    
    Co-Authored-By: Jason Smith <20053467+sjasonsmith@users.noreply.github.com>
    
    #20620

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index d7285927a3..a926dd58f4 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -16,20 +16,22 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfig.h"
 
+#include "../module/motion.h"
+
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
 
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "tft_io/touch_calibration.h"
@@ -263,23 +265,36 @@
   // Manual Movement class
   class ManualMove {
   private:
     static AxisEnum axis;
     #if MULTI_MANUAL
       static int8_t e_index;
     #else
       static int8_t constexpr e_index = 0;
     #endif
     static millis_t start_time;
+    TERN_(IS_KINEMATIC, static xyze_pos_t all_axes_destination);
   public:
     static float menu_scale;
     TERN_(IS_KINEMATIC, static float offset);
+    template <typename T>
+    void set_destination(const T& dest) {
+      #if IS_KINEMATIC
+        // Moves are segmented, so the entire move is not submitted at once.
+        // Using a separate variable prevents corrupting the in-progress move.
+        all_axes_destination = current_position;
+        all_axes_destination.set(dest);
+      #else
+        // Moves are submitted as single line to the planner using buffer_line.
+        current_position.set(dest);
+      #endif
+    }
     #if IS_KINEMATIC
       static bool processing;
     #else
       static bool constexpr processing = false;
     #endif
     static void task();
     static void soon(AxisEnum axis
       #if MULTI_MANUAL
         , const int8_t eindex=-1
       #endif

commit 9f53738339db172635d38e7a78c87890d7b5a636
Author: Jason Smith <jason.inet@gmail.com>
Date:   Fri Jan 1 18:08:10 2021 -0800

    Fix UBL mesh edit delta moves (#20620)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index e162dbdd2e..d7285927a3 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -255,35 +255,36 @@
     TERN_(HAS_HOTEND,     uint16_t hotend_temp);
     TERN_(HAS_HEATED_BED, uint16_t bed_temp   );
     TERN_(HAS_FAN,        uint16_t fan_speed  );
   } preheat_t;
 #endif
 
 #if HAS_LCD_MENU
 
   // Manual Movement class
   class ManualMove {
-  public:
+  private:
+    static AxisEnum axis;
+    #if MULTI_MANUAL
+      static int8_t e_index;
+    #else
+      static int8_t constexpr e_index = 0;
+    #endif
     static millis_t start_time;
+  public:
     static float menu_scale;
     TERN_(IS_KINEMATIC, static float offset);
     #if IS_KINEMATIC
       static bool processing;
     #else
       static bool constexpr processing = false;
     #endif
-    #if MULTI_MANUAL
-      static int8_t e_index;
-    #else
-      static int8_t constexpr e_index = 0;
-    #endif
-    static uint8_t axis;
     static void task();
     static void soon(AxisEnum axis
       #if MULTI_MANUAL
         , const int8_t eindex=-1
       #endif
     );
   };
 
 #endif
 

commit 2d88a2cfb7a85104414154ae66a92b2d63dda352
Author: LinFor <linfor@gmail.com>
Date:   Thu Dec 24 01:37:17 2020 +0300

    Remaining Time for FTDI EVE, bp for ExtUI (#20549)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 8e968abda0..e162dbdd2e 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -50,20 +50,24 @@
 
 // I2C buttons must be read in the main thread
 #if ANY(LCD_I2C_VIKI, LCD_I2C_PANELOLU2, IS_TFTGLCD_PANEL)
   #define HAS_SLOW_BUTTONS 1
 #endif
 
 #if E_MANUAL > 1
   #define MULTI_MANUAL 1
 #endif
 
+#if HAS_DISPLAY
+  #include "../module/printcounter.h"
+#endif
+
 #if HAS_WIRED_LCD
 
   #include "../MarlinCore.h"
 
   #if ENABLED(ADVANCED_PAUSE_FEATURE)
     #include "../feature/pause.h"
     #include "../module/motion.h" // for active_extruder
   #endif
 
   enum LCDViewAction : uint8_t {
@@ -350,25 +354,34 @@ public:
     #else
       typedef uint8_t progress_t;
       #define PROGRESS_SCALE 1U
       #define PROGRESS_MASK 0x7F
     #endif
     #if ENABLED(LCD_SET_PROGRESS_MANUALLY)
       static progress_t progress_override;
       static void set_progress(const progress_t p) { progress_override = _MIN(p, 100U * (PROGRESS_SCALE)); }
       static void set_progress_done() { progress_override = (PROGRESS_MASK + 1U) + 100U * (PROGRESS_SCALE); }
       static void progress_reset() { if (progress_override & (PROGRESS_MASK + 1U)) set_progress(0); }
-      #if BOTH(LCD_SET_PROGRESS_MANUALLY, USE_M73_REMAINING_TIME)
-        static uint32_t remaining_time;
-        FORCE_INLINE static void set_remaining_time(const uint32_t r) { remaining_time = r; }
-        FORCE_INLINE static uint32_t get_remaining_time() { return remaining_time; }
-        FORCE_INLINE static void reset_remaining_time() { set_remaining_time(0); }
+      #if ENABLED(SHOW_REMAINING_TIME)
+        static inline uint32_t _calculated_remaining_time() {
+          const duration_t elapsed = print_job_timer.duration();
+          const progress_t progress = _get_progress();
+          return elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
+        }
+        #if ENABLED(USE_M73_REMAINING_TIME)
+          static uint32_t remaining_time;
+          FORCE_INLINE static void set_remaining_time(const uint32_t r) { remaining_time = r; }
+          FORCE_INLINE static uint32_t get_remaining_time() { return remaining_time ?: _calculated_remaining_time(); }
+          FORCE_INLINE static void reset_remaining_time() { set_remaining_time(0); }
+        #else
+          FORCE_INLINE static uint32_t get_remaining_time() { return _calculated_remaining_time(); }
+        #endif
       #endif
     #endif
     static progress_t _get_progress();
     #if HAS_PRINT_PROGRESS_PERMYRIAD
       FORCE_INLINE static uint16_t get_progress_permyriad() { return _get_progress(); }
     #endif
     static uint8_t get_progress_percent() { return uint8_t(_get_progress() / (PROGRESS_SCALE)); }
   #else
     static constexpr uint8_t get_progress_percent() { return 0; }
   #endif

commit 649965ae32eca5140ea66d1265a69576e2a2c669
Author: swissnorp <67485708+swissnorp@users.noreply.github.com>
Date:   Thu Nov 26 04:38:00 2020 +0100

    Probe Offset Wizard improvements (#20239)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index ccf995bd71..8e968abda0 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -617,21 +617,21 @@ public:
       static void eeprom_alert(const uint8_t msgid);
       static inline void eeprom_alert_crc()     { eeprom_alert(0); }
       static inline void eeprom_alert_index()   { eeprom_alert(1); }
       static inline void eeprom_alert_version() { eeprom_alert(2); }
     #endif
   #endif
 
   //
   // Special handling if a move is underway
   //
-  #if EITHER(DELTA_CALIBRATION_MENU, DELTA_AUTO_CALIBRATION) || (ENABLED(LCD_BED_LEVELING) && EITHER(PROBE_MANUALLY, MESH_BED_LEVELING)) || (ENABLED(PROBE_OFFSET_WIZARD) && defined(PROBE_OFFSET_WIZARD_XY_POS))
+  #if ANY(DELTA_CALIBRATION_MENU, DELTA_AUTO_CALIBRATION, PROBE_OFFSET_WIZARD) || (ENABLED(LCD_BED_LEVELING) && EITHER(PROBE_MANUALLY, MESH_BED_LEVELING))
     #define LCD_HAS_WAIT_FOR_MOVE 1
     static bool wait_for_move;
   #else
     static constexpr bool wait_for_move = false;
   #endif
 
   //
   // Block interaction while under external control
   //
   #if HAS_LCD_MENU && EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)

commit 6f272e13c5ce132c0bd7fdc2401ceadad5f3b06c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 22 18:44:17 2020 -0600

    Allow Status Message without LCD (#20246)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 3311f55ed5..ccf995bd71 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -366,38 +366,52 @@ public:
     #endif
     static progress_t _get_progress();
     #if HAS_PRINT_PROGRESS_PERMYRIAD
       FORCE_INLINE static uint16_t get_progress_permyriad() { return _get_progress(); }
     #endif
     static uint8_t get_progress_percent() { return uint8_t(_get_progress() / (PROGRESS_SCALE)); }
   #else
     static constexpr uint8_t get_progress_percent() { return 0; }
   #endif
 
-  #if HAS_DISPLAY
-
-    static void init();
-    static void update();
-    static void set_alert_status_P(PGM_P const message);
-
+  #if HAS_STATUS_MESSAGE
     static char status_message[];
-    static bool has_status();
-
     static uint8_t alert_level; // Higher levels block lower levels
-    static inline void reset_alert_level() { alert_level = 0; }
 
     #if ENABLED(STATUS_MESSAGE_SCROLLING)
       static uint8_t status_scroll_offset;
       static void advance_status_scroll();
       static char* status_and_len(uint8_t &len);
     #endif
 
+    static bool has_status();
+    static void reset_status(const bool no_welcome=false);
+    static void set_status(const char* const message, const bool persist=false);
+    static void set_status_P(PGM_P const message, const int8_t level=0);
+    static void status_printf_P(const uint8_t level, PGM_P const fmt, ...);
+    static void set_alert_status_P(PGM_P const message);
+    static inline void reset_alert_level() { alert_level = 0; }
+  #else
+    static constexpr bool has_status() { return false; }
+    static inline void reset_status(const bool=false) {}
+    static void set_status(const char* message, const bool=false);
+    static void set_status_P(PGM_P message, const int8_t=0);
+    static void status_printf_P(const uint8_t, PGM_P message, ...);
+    static inline void set_alert_status_P(PGM_P const) {}
+    static inline void reset_alert_level() {}
+  #endif
+
+  #if HAS_DISPLAY
+
+    static void init();
+    static void update();
+
     static void abort_print();
     static void pause_print();
     static void resume_print();
 
     #if HAS_WIRED_LCD
 
       static millis_t next_button_update_ms;
 
       static LCDViewAction lcdDrawUpdate;
       FORCE_INLINE static bool should_draw() { return bool(lcdDrawUpdate); }
@@ -474,39 +488,26 @@ public:
 
     #if HAS_MARLINUI_U8GLIB
       static bool drawing_screen, first_page;
     #else
       static constexpr bool drawing_screen = false, first_page = true;
     #endif
 
     static bool get_blink();
     static void kill_screen(PGM_P const lcd_error, PGM_P const lcd_component);
     static void draw_kill_screen();
-    static void set_status(const char* const message, const bool persist=false);
-    static void set_status_P(PGM_P const message, const int8_t level=0);
-    static void status_printf_P(const uint8_t level, PGM_P const fmt, ...);
-    static void reset_status(const bool no_welcome=false);
 
   #else // No LCD
 
-    // Send status to host as a notification
-    static void set_status(const char* message, const bool=false);
-    static void set_status_P(PGM_P message, const int8_t=0);
-    static void status_printf_P(const uint8_t, PGM_P message, ...);
-
     static inline void init() {}
     static inline void update() {}
     static inline void return_to_status() {}
-    static inline void set_alert_status_P(PGM_P const) {}
-    static inline void reset_status(const bool=false) {}
-    static inline void reset_alert_level() {}
-    static constexpr bool has_status() { return false; }
 
   #endif
 
   #if ENABLED(SDSUPPORT)
     #if BOTH(SCROLL_LONG_FILENAMES, HAS_LCD_MENU)
       #define MARLINUI_SCROLL_NAME 1
     #endif
     #if MARLINUI_SCROLL_NAME
       static uint8_t filename_scroll_pos, filename_scroll_max;
     #endif
@@ -695,21 +696,21 @@ public:
   #if ENABLED(TOUCH_SCREEN_CALIBRATION)
     static void touch_calibration_screen();
   #endif
 
   #if HAS_GRAPHICAL_TFT
     static void move_axis_screen();
   #endif
 
 private:
 
-  #if HAS_DISPLAY
+  #if HAS_STATUS_MESSAGE
     static void finish_status(const bool persist);
   #endif
 
   #if HAS_WIRED_LCD
     #if HAS_LCD_MENU && LCD_TIMEOUT_TO_STATUS > 0
       static bool defer_return_to_status;
     #else
       static constexpr bool defer_return_to_status = false;
     #endif
     static void draw_status_screen();

commit ecd8227de0c17427f9f8d76cfc279acbc5a0a188
Author: Thomas Niccolo Reyes <niccoreyes@gmail.com>
Date:   Wed Nov 18 12:30:32 2020 +0800

    Open File Browser on Media Insert (option) (#20151)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 6ce59132bf..3311f55ed5 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -315,20 +315,21 @@ public:
   // LCD implementations
   static void clear_lcd();
 
   #if BOTH(HAS_LCD_MENU, TOUCH_SCREEN_CALIBRATION)
     static void check_touch_calibration() {
       if (touch_calibration.need_calibration()) currentScreen = touch_calibration_screen;
     }
   #endif
 
   #if ENABLED(SDSUPPORT)
+    #define MEDIA_MENU_GATEWAY TERN(PASSWORD_ON_SD_PRINT_MENU, password.media_gatekeeper, menu_media)
     static void media_changed(const uint8_t old_stat, const uint8_t stat);
   #endif
 
   #if ENABLED(DWIN_CREALITY_LCD)
     static void refresh();
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }
   #endif

commit 5768ee0f9ebb09b69b6e3acfe4f1b4876291f169
Author: wmariz <11435639+wmariz@users.noreply.github.com>
Date:   Wed Nov 18 00:54:21 2020 -0300

    Probe Wizard XY position (#20167)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index 0445c641ba..6ce59132bf 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -615,21 +615,21 @@ public:
       static void eeprom_alert(const uint8_t msgid);
       static inline void eeprom_alert_crc()     { eeprom_alert(0); }
       static inline void eeprom_alert_index()   { eeprom_alert(1); }
       static inline void eeprom_alert_version() { eeprom_alert(2); }
     #endif
   #endif
 
   //
   // Special handling if a move is underway
   //
-  #if EITHER(DELTA_CALIBRATION_MENU, DELTA_AUTO_CALIBRATION) || (ENABLED(LCD_BED_LEVELING) && EITHER(PROBE_MANUALLY, MESH_BED_LEVELING))
+  #if EITHER(DELTA_CALIBRATION_MENU, DELTA_AUTO_CALIBRATION) || (ENABLED(LCD_BED_LEVELING) && EITHER(PROBE_MANUALLY, MESH_BED_LEVELING)) || (ENABLED(PROBE_OFFSET_WIZARD) && defined(PROBE_OFFSET_WIZARD_XY_POS))
     #define LCD_HAS_WAIT_FOR_MOVE 1
     static bool wait_for_move;
   #else
     static constexpr bool wait_for_move = false;
   #endif
 
   //
   // Block interaction while under external control
   //
   #if HAS_LCD_MENU && EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)

commit ea371618da71dc43e6aee95a8e479c8797867e04
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sun Nov 15 19:39:58 2020 -0300

    Add Touch Calibration screen (#20049)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index ed02f4000b..0445c641ba 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -24,20 +24,24 @@
 #include "../inc/MarlinConfig.h"
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
 
+#if ENABLED(TOUCH_SCREEN_CALIBRATION)
+  #include "tft_io/touch_calibration.h"
+#endif
+
 #if EITHER(HAS_LCD_MENU, ULTIPANEL_FEEDMULTIPLY)
   #define HAS_ENCODER_ACTION 1
 #endif
 #if ((!HAS_ADC_BUTTONS && IS_NEWPANEL) || BUTTONS_EXIST(EN1, EN2)) && !IS_TFTGLCD_PANEL
   #define HAS_ENCODER_WHEEL 1
 #endif
 #if HAS_ENCODER_WHEEL || ANY_BUTTON(ENC, BACK, UP, DWN, LFT, RT)
   #define HAS_DIGITAL_BUTTONS 1
 #endif
 #if !HAS_ADC_BUTTONS && (IS_RRW_KEYPAD || (HAS_WIRED_LCD && !IS_NEWPANEL))
@@ -67,21 +71,21 @@
     LCDVIEW_REDRAW_NOW,
     LCDVIEW_CALL_REDRAW_NEXT,
     LCDVIEW_CLEAR_CALL_REDRAW,
     LCDVIEW_CALL_NO_REDRAW
   };
 
   #if HAS_ADC_BUTTONS
     uint8_t get_ADC_keyValue();
   #endif
 
-  #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_XPT2046, 50, 100)
+  #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_BUTTONS, 50, 100)
 
   #if HAS_LCD_MENU
 
     #include "lcdprint.h"
 
     #if !HAS_GRAPHICAL_TFT
       void _wrap_string(uint8_t &col, uint8_t &row, const char * const string, read_byte_cb_t cb_read_byte, const bool wordwrap=false);
       inline void wrap_string_P(uint8_t &col, uint8_t &row, PGM_P const pstr, const bool wordwrap=false) { _wrap_string(col, row, pstr, read_byte_rom, wordwrap); }
       inline void wrap_string(uint8_t &col, uint8_t &row, const char * const string, const bool wordwrap=false) { _wrap_string(col, row, string, read_byte_ram, wordwrap); }
     #endif
@@ -139,21 +143,21 @@
 
   // Wheel spin pins where BA is 00, 10, 11, 01 (1 bit always changes)
   #define BLEN_A 0
   #define BLEN_B 1
 
   #define EN_A _BV(BLEN_A)
   #define EN_B _BV(BLEN_B)
 
   #define BUTTON_PRESSED(BN) !READ(BTN_## BN)
 
-  #if BUTTON_EXISTS(ENC) || HAS_TOUCH_XPT2046
+  #if BUTTON_EXISTS(ENC) || HAS_TOUCH_BUTTONS
     #define BLEN_C 2
     #define EN_C _BV(BLEN_C)
   #endif
 
   #if ENABLED(LCD_I2C_VIKI)
 
     #include <LiquidTWI2.h>
 
     #define B_I2C_BTN_OFFSET 3 // (the first three bit positions reserved for EN_A, EN_B, EN_C)
 
@@ -205,21 +209,21 @@
   #define B_DW _BV(BL_DW)
   #define B_RI _BV(BL_RI)
   #define B_ST _BV(BL_ST)
 
   #ifndef BUTTON_CLICK
     #define BUTTON_CLICK() (buttons & (B_MI|B_ST))
   #endif
 
 #endif
 
-#if BUTTON_EXISTS(BACK) || EITHER(HAS_TOUCH_XPT2046, IS_TFTGLCD_PANEL)
+#if BUTTON_EXISTS(BACK) || EITHER(HAS_TOUCH_BUTTONS, IS_TFTGLCD_PANEL)
   #define BLEN_D 3
   #define EN_D _BV(BLEN_D)
   #define LCD_BACK_CLICKED() (buttons & EN_D)
 #else
   #define LCD_BACK_CLICKED() false
 #endif
 
 #ifndef BUTTON_CLICK
   #ifdef EN_C
     #define BUTTON_CLICK() (buttons & EN_C)
@@ -304,20 +308,26 @@ public:
     TERN_(HAS_CHIRP, buzz(LCD_FEEDBACK_FREQUENCY_DURATION_MS, LCD_FEEDBACK_FREQUENCY_HZ));
   }
 
   #if ENABLED(LCD_HAS_STATUS_INDICATORS)
     static void update_indicators();
   #endif
 
   // LCD implementations
   static void clear_lcd();
 
+  #if BOTH(HAS_LCD_MENU, TOUCH_SCREEN_CALIBRATION)
+    static void check_touch_calibration() {
+      if (touch_calibration.need_calibration()) currentScreen = touch_calibration_screen;
+    }
+  #endif
+
   #if ENABLED(SDSUPPORT)
     static void media_changed(const uint8_t old_stat, const uint8_t stat);
   #endif
 
   #if ENABLED(DWIN_CREALITY_LCD)
     static void refresh();
   #else
     FORCE_INLINE static void refresh() {
       TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
     }
@@ -445,21 +455,21 @@ public:
       #endif
 
       #if DISABLED(LIGHTWEIGHT_UI)
         static void draw_status_message(const bool blink);
       #endif
 
       #if ENABLED(ADVANCED_PAUSE_FEATURE)
         static void draw_hotend_status(const uint8_t row, const uint8_t extruder);
       #endif
 
-      #if HAS_TOUCH_XPT2046
+      #if HAS_TOUCH_BUTTONS
         static bool on_edit_screen;
         static void screen_click(const uint8_t row, const uint8_t col, const uint8_t x, const uint8_t y);
       #endif
 
       static void status_screen();
 
     #endif
 
     #if HAS_MARLINUI_U8GLIB
       static bool drawing_screen, first_page;
@@ -505,21 +515,21 @@ public:
   #if PREHEAT_COUNT
     static preheat_t material_preset[PREHEAT_COUNT];
     static PGM_P get_preheat_label(const uint8_t m);
   #endif
 
   #if HAS_LCD_MENU
     #if LCD_TIMEOUT_TO_STATUS
       static millis_t return_to_status_ms;
     #endif
 
-    #if HAS_TOUCH_XPT2046
+    #if HAS_TOUCH_BUTTONS
       static uint8_t touch_buttons;
       static uint8_t repeat_delay;
     #endif
 
     #if ENABLED(ENCODER_RATE_MULTIPLIER)
       static bool encoderRateMultiplierEnabled;
       static millis_t lastEncoderMovementMillis;
       static void enable_encoder_multiplier(const bool onoff);
       #define ENCODER_RATE_MULTIPLY(F) (ui.encoderRateMultiplierEnabled = F)
     #else
@@ -675,21 +685,21 @@ public:
       TERN_(REVERSE_SELECT_DIRECTION, encoderDirection = -(ENCODERBASE));
     }
 
   #else
 
     static inline void update_buttons() {}
 
   #endif
 
   #if ENABLED(TOUCH_SCREEN_CALIBRATION)
-    static void touch_calibration();
+    static void touch_calibration_screen();
   #endif
 
   #if HAS_GRAPHICAL_TFT
     static void move_axis_screen();
   #endif
 
 private:
 
   #if HAS_DISPLAY
     static void finish_status(const bool persist);

commit f8ee6f8b3176b6df7bc3d23119a4bee36c6ff0d8
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Nov 10 22:39:34 2020 -0300

    Fix UI compile issues (#20092)

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index d0b66aee45..ed02f4000b 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -73,26 +73,24 @@
   #if HAS_ADC_BUTTONS
     uint8_t get_ADC_keyValue();
   #endif
 
   #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_XPT2046, 50, 100)
 
   #if HAS_LCD_MENU
 
     #include "lcdprint.h"
 
-    void _wrap_string(uint8_t &col, uint8_t &row, const char * const string, read_byte_cb_t cb_read_byte, const bool wordwrap=false);
-    inline void wrap_string_P(uint8_t &col, uint8_t &row, PGM_P const pstr, const bool wordwrap=false) { _wrap_string(col, row, pstr, read_byte_rom, wordwrap); }
-    inline void wrap_string(uint8_t &col, uint8_t &row, const char * const string, const bool wordwrap=false) { _wrap_string(col, row, string, read_byte_ram, wordwrap); }
-
-    #if ENABLED(SDSUPPORT)
-      #include "../sd/cardreader.h"
+    #if !HAS_GRAPHICAL_TFT
+      void _wrap_string(uint8_t &col, uint8_t &row, const char * const string, read_byte_cb_t cb_read_byte, const bool wordwrap=false);
+      inline void wrap_string_P(uint8_t &col, uint8_t &row, PGM_P const pstr, const bool wordwrap=false) { _wrap_string(col, row, pstr, read_byte_rom, wordwrap); }
+      inline void wrap_string(uint8_t &col, uint8_t &row, const char * const string, const bool wordwrap=false) { _wrap_string(col, row, string, read_byte_ram, wordwrap); }
     #endif
 
     typedef void (*screenFunc_t)();
     typedef void (*menuAction_t)();
 
     #if ENABLED(ADVANCED_PAUSE_FEATURE)
       void lcd_pause_show_message(const PauseMessage message,
                                   const PauseMode mode=PAUSE_MODE_SAME,
                                   const uint8_t extruder=active_extruder);
     #endif

commit c0b4f4eb47ee9d657581035737383d15b3706b79
Author: Lucas Seiki Oshiro <lucasseikioshiro@gmail.com>
Date:   Tue Oct 27 22:41:12 2020 -0300

    "Sound: ON/OFF" menu item (#19901)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
index bf9e47e0c8..d0b66aee45 100644
--- a/Marlin/src/lcd/marlinui.h
+++ b/Marlin/src/lcd/marlinui.h
@@ -285,20 +285,26 @@
 //////////// MarlinUI Singleton ////////////
 ////////////////////////////////////////////
 
 class MarlinUI {
 public:
 
   MarlinUI() {
     TERN_(HAS_LCD_MENU, currentScreen = status_screen);
   }
 
+  #if ENABLED(SOUND_MENU_ITEM)
+    static bool buzzer_enabled; // Initialized by settings.load()
+  #else
+    static constexpr bool buzzer_enabled = true;
+  #endif
+
   #if HAS_BUZZER
     static void buzz(const long duration, const uint16_t freq);
   #endif
 
   FORCE_INLINE static void chirp() {
     TERN_(HAS_CHIRP, buzz(LCD_FEEDBACK_FREQUENCY_DURATION_MS, LCD_FEEDBACK_FREQUENCY_HZ));
   }
 
   #if ENABLED(LCD_HAS_STATUS_INDICATORS)
     static void update_indicators();

commit eaf6777a6643a6fab23ceaaa4699cb2466ea6b83
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 16 19:36:25 2020 -0500

    Rename ultralcd => marlinui

diff --git a/Marlin/src/lcd/marlinui.h b/Marlin/src/lcd/marlinui.h
new file mode 100644
index 0000000000..bf9e47e0c8
--- /dev/null
+++ b/Marlin/src/lcd/marlinui.h
@@ -0,0 +1,716 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+#include "../inc/MarlinConfig.h"
+
+#if HAS_BUZZER
+  #include "../libs/buzzer.h"
+#endif
+
+#if ENABLED(SDSUPPORT)
+  #include "../sd/cardreader.h"
+#endif
+
+#if EITHER(HAS_LCD_MENU, ULTIPANEL_FEEDMULTIPLY)
+  #define HAS_ENCODER_ACTION 1
+#endif
+#if ((!HAS_ADC_BUTTONS && IS_NEWPANEL) || BUTTONS_EXIST(EN1, EN2)) && !IS_TFTGLCD_PANEL
+  #define HAS_ENCODER_WHEEL 1
+#endif
+#if HAS_ENCODER_WHEEL || ANY_BUTTON(ENC, BACK, UP, DWN, LFT, RT)
+  #define HAS_DIGITAL_BUTTONS 1
+#endif
+#if !HAS_ADC_BUTTONS && (IS_RRW_KEYPAD || (HAS_WIRED_LCD && !IS_NEWPANEL))
+  #define HAS_SHIFT_ENCODER 1
+#endif
+
+// I2C buttons must be read in the main thread
+#if ANY(LCD_I2C_VIKI, LCD_I2C_PANELOLU2, IS_TFTGLCD_PANEL)
+  #define HAS_SLOW_BUTTONS 1
+#endif
+
+#if E_MANUAL > 1
+  #define MULTI_MANUAL 1
+#endif
+
+#if HAS_WIRED_LCD
+
+  #include "../MarlinCore.h"
+
+  #if ENABLED(ADVANCED_PAUSE_FEATURE)
+    #include "../feature/pause.h"
+    #include "../module/motion.h" // for active_extruder
+  #endif
+
+  enum LCDViewAction : uint8_t {
+    LCDVIEW_NONE,
+    LCDVIEW_REDRAW_NOW,
+    LCDVIEW_CALL_REDRAW_NEXT,
+    LCDVIEW_CLEAR_CALL_REDRAW,
+    LCDVIEW_CALL_NO_REDRAW
+  };
+
+  #if HAS_ADC_BUTTONS
+    uint8_t get_ADC_keyValue();
+  #endif
+
+  #define LCD_UPDATE_INTERVAL TERN(HAS_TOUCH_XPT2046, 50, 100)
+
+  #if HAS_LCD_MENU
+
+    #include "lcdprint.h"
+
+    void _wrap_string(uint8_t &col, uint8_t &row, const char * const string, read_byte_cb_t cb_read_byte, const bool wordwrap=false);
+    inline void wrap_string_P(uint8_t &col, uint8_t &row, PGM_P const pstr, const bool wordwrap=false) { _wrap_string(col, row, pstr, read_byte_rom, wordwrap); }
+    inline void wrap_string(uint8_t &col, uint8_t &row, const char * const string, const bool wordwrap=false) { _wrap_string(col, row, string, read_byte_ram, wordwrap); }
+
+    #if ENABLED(SDSUPPORT)
+      #include "../sd/cardreader.h"
+    #endif
+
+    typedef void (*screenFunc_t)();
+    typedef void (*menuAction_t)();
+
+    #if ENABLED(ADVANCED_PAUSE_FEATURE)
+      void lcd_pause_show_message(const PauseMessage message,
+                                  const PauseMode mode=PAUSE_MODE_SAME,
+                                  const uint8_t extruder=active_extruder);
+    #endif
+
+    #if ENABLED(AUTO_BED_LEVELING_UBL)
+      void lcd_mesh_edit_setup(const float &initial);
+      float lcd_mesh_edit();
+    #endif
+
+  #endif // HAS_LCD_MENU
+
+#endif // HAS_WIRED_LCD
+
+#if IS_RRW_KEYPAD
+  #define BTN_OFFSET          0 // Bit offset into buttons for shift register values
+
+  #define BLEN_KEYPAD_F3      0
+  #define BLEN_KEYPAD_F2      1
+  #define BLEN_KEYPAD_F1      2
+  #define BLEN_KEYPAD_DOWN    3
+  #define BLEN_KEYPAD_RIGHT   4
+  #define BLEN_KEYPAD_MIDDLE  5
+  #define BLEN_KEYPAD_UP      6
+  #define BLEN_KEYPAD_LEFT    7
+
+  #define EN_KEYPAD_F1      _BV(BTN_OFFSET + BLEN_KEYPAD_F1)
+  #define EN_KEYPAD_F2      _BV(BTN_OFFSET + BLEN_KEYPAD_F2)
+  #define EN_KEYPAD_F3      _BV(BTN_OFFSET + BLEN_KEYPAD_F3)
+  #define EN_KEYPAD_DOWN    _BV(BTN_OFFSET + BLEN_KEYPAD_DOWN)
+  #define EN_KEYPAD_RIGHT   _BV(BTN_OFFSET + BLEN_KEYPAD_RIGHT)
+  #define EN_KEYPAD_MIDDLE  _BV(BTN_OFFSET + BLEN_KEYPAD_MIDDLE)
+  #define EN_KEYPAD_UP      _BV(BTN_OFFSET + BLEN_KEYPAD_UP)
+  #define EN_KEYPAD_LEFT    _BV(BTN_OFFSET + BLEN_KEYPAD_LEFT)
+
+  #define RRK(B) (keypad_buttons & (B))
+
+  #ifdef EN_C
+    #define BUTTON_CLICK() ((buttons & EN_C) || RRK(EN_KEYPAD_MIDDLE))
+  #else
+    #define BUTTON_CLICK() RRK(EN_KEYPAD_MIDDLE)
+  #endif
+
+#endif // IS_RRW_KEYPAD
+
+#if HAS_DIGITAL_BUTTONS
+
+  // Wheel spin pins where BA is 00, 10, 11, 01 (1 bit always changes)
+  #define BLEN_A 0
+  #define BLEN_B 1
+
+  #define EN_A _BV(BLEN_A)
+  #define EN_B _BV(BLEN_B)
+
+  #define BUTTON_PRESSED(BN) !READ(BTN_## BN)
+
+  #if BUTTON_EXISTS(ENC) || HAS_TOUCH_XPT2046
+    #define BLEN_C 2
+    #define EN_C _BV(BLEN_C)
+  #endif
+
+  #if ENABLED(LCD_I2C_VIKI)
+
+    #include <LiquidTWI2.h>
+
+    #define B_I2C_BTN_OFFSET 3 // (the first three bit positions reserved for EN_A, EN_B, EN_C)
+
+    // button and encoder bit positions within 'buttons'
+    #define B_LE (BUTTON_LEFT   << B_I2C_BTN_OFFSET)      // The remaining normalized buttons are all read via I2C
+    #define B_UP (BUTTON_UP     << B_I2C_BTN_OFFSET)
+    #define B_MI (BUTTON_SELECT << B_I2C_BTN_OFFSET)
+    #define B_DW (BUTTON_DOWN   << B_I2C_BTN_OFFSET)
+    #define B_RI (BUTTON_RIGHT  << B_I2C_BTN_OFFSET)
+
+    #if BUTTON_EXISTS(ENC)                                // The pause/stop/restart button is connected to BTN_ENC when used
+      #define B_ST (EN_C)                                 // Map the pause/stop/resume button into its normalized functional name
+      #define BUTTON_CLICK() (buttons & (B_MI|B_RI|B_ST)) // Pause/stop also acts as click until a proper pause/stop is implemented.
+    #else
+      #define BUTTON_CLICK() (buttons & (B_MI|B_RI))
+    #endif
+
+    // I2C buttons take too long to read inside an interrupt context and so we read them during lcd_update
+
+  #elif ENABLED(LCD_I2C_PANELOLU2)
+
+    #if !BUTTON_EXISTS(ENC) // Use I2C if not directly connected to a pin
+
+      #define B_I2C_BTN_OFFSET 3 // (the first three bit positions reserved for EN_A, EN_B, EN_C)
+
+      #define B_MI (PANELOLU2_ENCODER_C << B_I2C_BTN_OFFSET) // requires LiquidTWI2 library v1.2.3 or later
+
+      #define BUTTON_CLICK() (buttons & B_MI)
+
+    #endif
+
+  #endif
+
+#else
+
+  #undef BUTTON_EXISTS
+  #define BUTTON_EXISTS(...) false
+
+  // Shift register bits correspond to buttons:
+  #define BL_LE 7   // Left
+  #define BL_UP 6   // Up
+  #define BL_MI 5   // Middle
+  #define BL_DW 4   // Down
+  #define BL_RI 3   // Right
+  #define BL_ST 2   // Red Button
+  #define B_LE _BV(BL_LE)
+  #define B_UP _BV(BL_UP)
+  #define B_MI _BV(BL_MI)
+  #define B_DW _BV(BL_DW)
+  #define B_RI _BV(BL_RI)
+  #define B_ST _BV(BL_ST)
+
+  #ifndef BUTTON_CLICK
+    #define BUTTON_CLICK() (buttons & (B_MI|B_ST))
+  #endif
+
+#endif
+
+#if BUTTON_EXISTS(BACK) || EITHER(HAS_TOUCH_XPT2046, IS_TFTGLCD_PANEL)
+  #define BLEN_D 3
+  #define EN_D _BV(BLEN_D)
+  #define LCD_BACK_CLICKED() (buttons & EN_D)
+#else
+  #define LCD_BACK_CLICKED() false
+#endif
+
+#ifndef BUTTON_CLICK
+  #ifdef EN_C
+    #define BUTTON_CLICK() (buttons & EN_C)
+  #else
+    #define BUTTON_CLICK() false
+  #endif
+#endif
+
+#if HAS_MARLINUI_U8GLIB
+  enum MarlinFont : uint8_t {
+    FONT_STATUSMENU = 1,
+    FONT_EDIT,
+    FONT_MENU
+  };
+#else
+  enum HD44780CharSet : uint8_t {
+    CHARSET_MENU,
+    CHARSET_INFO,
+    CHARSET_BOOT
+  };
+#endif
+
+#if PREHEAT_COUNT
+  typedef struct {
+    TERN_(HAS_HOTEND,     uint16_t hotend_temp);
+    TERN_(HAS_HEATED_BED, uint16_t bed_temp   );
+    TERN_(HAS_FAN,        uint16_t fan_speed  );
+  } preheat_t;
+#endif
+
+#if HAS_LCD_MENU
+
+  // Manual Movement class
+  class ManualMove {
+  public:
+    static millis_t start_time;
+    static float menu_scale;
+    TERN_(IS_KINEMATIC, static float offset);
+    #if IS_KINEMATIC
+      static bool processing;
+    #else
+      static bool constexpr processing = false;
+    #endif
+    #if MULTI_MANUAL
+      static int8_t e_index;
+    #else
+      static int8_t constexpr e_index = 0;
+    #endif
+    static uint8_t axis;
+    static void task();
+    static void soon(AxisEnum axis
+      #if MULTI_MANUAL
+        , const int8_t eindex=-1
+      #endif
+    );
+  };
+
+#endif
+
+////////////////////////////////////////////
+//////////// MarlinUI Singleton ////////////
+////////////////////////////////////////////
+
+class MarlinUI {
+public:
+
+  MarlinUI() {
+    TERN_(HAS_LCD_MENU, currentScreen = status_screen);
+  }
+
+  #if HAS_BUZZER
+    static void buzz(const long duration, const uint16_t freq);
+  #endif
+
+  FORCE_INLINE static void chirp() {
+    TERN_(HAS_CHIRP, buzz(LCD_FEEDBACK_FREQUENCY_DURATION_MS, LCD_FEEDBACK_FREQUENCY_HZ));
+  }
+
+  #if ENABLED(LCD_HAS_STATUS_INDICATORS)
+    static void update_indicators();
+  #endif
+
+  // LCD implementations
+  static void clear_lcd();
+
+  #if ENABLED(SDSUPPORT)
+    static void media_changed(const uint8_t old_stat, const uint8_t stat);
+  #endif
+
+  #if ENABLED(DWIN_CREALITY_LCD)
+    static void refresh();
+  #else
+    FORCE_INLINE static void refresh() {
+      TERN_(HAS_WIRED_LCD, refresh(LCDVIEW_CLEAR_CALL_REDRAW));
+    }
+  #endif
+
+  #if HAS_WIRED_LCD
+    static bool detected();
+    static void init_lcd();
+  #else
+    static inline bool detected() { return true; }
+    static inline void init_lcd() {}
+  #endif
+
+  #if HAS_PRINT_PROGRESS
+    #if HAS_PRINT_PROGRESS_PERMYRIAD
+      typedef uint16_t progress_t;
+      #define PROGRESS_SCALE 100U
+      #define PROGRESS_MASK 0x7FFF
+    #else
+      typedef uint8_t progress_t;
+      #define PROGRESS_SCALE 1U
+      #define PROGRESS_MASK 0x7F
+    #endif
+    #if ENABLED(LCD_SET_PROGRESS_MANUALLY)
+      static progress_t progress_override;
+      static void set_progress(const progress_t p) { progress_override = _MIN(p, 100U * (PROGRESS_SCALE)); }
+      static void set_progress_done() { progress_override = (PROGRESS_MASK + 1U) + 100U * (PROGRESS_SCALE); }
+      static void progress_reset() { if (progress_override & (PROGRESS_MASK + 1U)) set_progress(0); }
+      #if BOTH(LCD_SET_PROGRESS_MANUALLY, USE_M73_REMAINING_TIME)
+        static uint32_t remaining_time;
+        FORCE_INLINE static void set_remaining_time(const uint32_t r) { remaining_time = r; }
+        FORCE_INLINE static uint32_t get_remaining_time() { return remaining_time; }
+        FORCE_INLINE static void reset_remaining_time() { set_remaining_time(0); }
+      #endif
+    #endif
+    static progress_t _get_progress();
+    #if HAS_PRINT_PROGRESS_PERMYRIAD
+      FORCE_INLINE static uint16_t get_progress_permyriad() { return _get_progress(); }
+    #endif
+    static uint8_t get_progress_percent() { return uint8_t(_get_progress() / (PROGRESS_SCALE)); }
+  #else
+    static constexpr uint8_t get_progress_percent() { return 0; }
+  #endif
+
+  #if HAS_DISPLAY
+
+    static void init();
+    static void update();
+    static void set_alert_status_P(PGM_P const message);
+
+    static char status_message[];
+    static bool has_status();
+
+    static uint8_t alert_level; // Higher levels block lower levels
+    static inline void reset_alert_level() { alert_level = 0; }
+
+    #if ENABLED(STATUS_MESSAGE_SCROLLING)
+      static uint8_t status_scroll_offset;
+      static void advance_status_scroll();
+      static char* status_and_len(uint8_t &len);
+    #endif
+
+    static void abort_print();
+    static void pause_print();
+    static void resume_print();
+
+    #if HAS_WIRED_LCD
+
+      static millis_t next_button_update_ms;
+
+      static LCDViewAction lcdDrawUpdate;
+      FORCE_INLINE static bool should_draw() { return bool(lcdDrawUpdate); }
+      FORCE_INLINE static void refresh(const LCDViewAction type) { lcdDrawUpdate = type; }
+
+      #if ENABLED(SHOW_CUSTOM_BOOTSCREEN)
+        static void draw_custom_bootscreen(const uint8_t frame=0);
+        static void show_custom_bootscreen();
+      #endif
+
+      #if ENABLED(SHOW_BOOTSCREEN)
+        #ifndef BOOTSCREEN_TIMEOUT
+          #define BOOTSCREEN_TIMEOUT 2500
+        #endif
+        static void draw_marlin_bootscreen(const bool line2=false);
+        static void show_marlin_bootscreen();
+        static void show_bootscreen();
+      #endif
+
+      #if HAS_MARLINUI_U8GLIB
+
+        static void set_font(const MarlinFont font_nr);
+
+      #else
+
+        static void set_custom_characters(const HD44780CharSet screen_charset=CHARSET_INFO);
+
+        #if ENABLED(LCD_PROGRESS_BAR)
+          static millis_t progress_bar_ms;  // Start time for the current progress bar cycle
+          static void draw_progress_bar(const uint8_t percent);
+          #if PROGRESS_MSG_EXPIRE > 0
+            static millis_t expire_status_ms; // = 0
+            FORCE_INLINE static void reset_progress_bar_timeout() { expire_status_ms = 0; }
+          #endif
+        #endif
+
+      #endif
+
+      static uint8_t lcd_status_update_delay;
+
+      #if HAS_LCD_CONTRAST
+        static int16_t contrast;
+        static void set_contrast(const int16_t value);
+        FORCE_INLINE static void refresh_contrast() { set_contrast(contrast); }
+      #endif
+
+      #if BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
+        static millis_t next_filament_display;
+      #endif
+
+      static void quick_feedback(const bool clear_buttons=true);
+      #if HAS_BUZZER
+        static void completion_feedback(const bool good=true);
+      #else
+        static inline void completion_feedback(const bool=true) {}
+      #endif
+
+      #if DISABLED(LIGHTWEIGHT_UI)
+        static void draw_status_message(const bool blink);
+      #endif
+
+      #if ENABLED(ADVANCED_PAUSE_FEATURE)
+        static void draw_hotend_status(const uint8_t row, const uint8_t extruder);
+      #endif
+
+      #if HAS_TOUCH_XPT2046
+        static bool on_edit_screen;
+        static void screen_click(const uint8_t row, const uint8_t col, const uint8_t x, const uint8_t y);
+      #endif
+
+      static void status_screen();
+
+    #endif
+
+    #if HAS_MARLINUI_U8GLIB
+      static bool drawing_screen, first_page;
+    #else
+      static constexpr bool drawing_screen = false, first_page = true;
+    #endif
+
+    static bool get_blink();
+    static void kill_screen(PGM_P const lcd_error, PGM_P const lcd_component);
+    static void draw_kill_screen();
+    static void set_status(const char* const message, const bool persist=false);
+    static void set_status_P(PGM_P const message, const int8_t level=0);
+    static void status_printf_P(const uint8_t level, PGM_P const fmt, ...);
+    static void reset_status(const bool no_welcome=false);
+
+  #else // No LCD
+
+    // Send status to host as a notification
+    static void set_status(const char* message, const bool=false);
+    static void set_status_P(PGM_P message, const int8_t=0);
+    static void status_printf_P(const uint8_t, PGM_P message, ...);
+
+    static inline void init() {}
+    static inline void update() {}
+    static inline void return_to_status() {}
+    static inline void set_alert_status_P(PGM_P const) {}
+    static inline void reset_status(const bool=false) {}
+    static inline void reset_alert_level() {}
+    static constexpr bool has_status() { return false; }
+
+  #endif
+
+  #if ENABLED(SDSUPPORT)
+    #if BOTH(SCROLL_LONG_FILENAMES, HAS_LCD_MENU)
+      #define MARLINUI_SCROLL_NAME 1
+    #endif
+    #if MARLINUI_SCROLL_NAME
+      static uint8_t filename_scroll_pos, filename_scroll_max;
+    #endif
+    static const char * scrolled_filename(CardReader &theCard, const uint8_t maxlen, uint8_t hash, const bool doScroll);
+  #endif
+
+  #if PREHEAT_COUNT
+    static preheat_t material_preset[PREHEAT_COUNT];
+    static PGM_P get_preheat_label(const uint8_t m);
+  #endif
+
+  #if HAS_LCD_MENU
+    #if LCD_TIMEOUT_TO_STATUS
+      static millis_t return_to_status_ms;
+    #endif
+
+    #if HAS_TOUCH_XPT2046
+      static uint8_t touch_buttons;
+      static uint8_t repeat_delay;
+    #endif
+
+    #if ENABLED(ENCODER_RATE_MULTIPLIER)
+      static bool encoderRateMultiplierEnabled;
+      static millis_t lastEncoderMovementMillis;
+      static void enable_encoder_multiplier(const bool onoff);
+      #define ENCODER_RATE_MULTIPLY(F) (ui.encoderRateMultiplierEnabled = F)
+    #else
+      #define ENCODER_RATE_MULTIPLY(F) NOOP
+    #endif
+
+    // Manual Movement
+    static ManualMove manual_move;
+
+    // Select Screen (modal NO/YES style dialog)
+    static bool selection;
+    static void set_selection(const bool sel) { selection = sel; }
+    static bool update_selection();
+
+    static bool lcd_clicked;
+    static bool use_click();
+
+    static void synchronize(PGM_P const msg=nullptr);
+
+    static screenFunc_t currentScreen;
+    static bool screen_changed;
+    static void goto_screen(const screenFunc_t screen, const uint16_t encoder=0, const uint8_t top=0, const uint8_t items=0);
+    static void save_previous_screen();
+
+    // goto_previous_screen and go_back may also be used as menu item callbacks
+    static void _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, const bool is_back));
+    static inline void goto_previous_screen() { _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, false)); }
+    static inline void go_back()              { _goto_previous_screen(TERN_(TURBO_BACK_MENU_ITEM, true)); }
+
+    static void return_to_status();
+    static inline bool on_status_screen() { return currentScreen == status_screen; }
+    FORCE_INLINE static void run_current_screen() { (*currentScreen)(); }
+
+    #if ENABLED(LIGHTWEIGHT_UI)
+      static void lcd_in_status(const bool inStatus);
+    #endif
+
+    FORCE_INLINE static void defer_status_screen(const bool defer=true) {
+      #if LCD_TIMEOUT_TO_STATUS > 0
+        defer_return_to_status = defer;
+      #else
+        UNUSED(defer);
+      #endif
+    }
+
+    static inline void goto_previous_screen_no_defer() {
+      defer_status_screen(false);
+      goto_previous_screen();
+    }
+
+    #if ENABLED(SD_REPRINT_LAST_SELECTED_FILE)
+      static void reselect_last_file();
+    #endif
+
+    #if ENABLED(AUTO_BED_LEVELING_UBL)
+      static void ubl_plot(const uint8_t x_plot, const uint8_t y_plot);
+    #endif
+
+    static void draw_select_screen_prompt(PGM_P const pref, const char * const string=nullptr, PGM_P const suff=nullptr);
+
+  #elif HAS_WIRED_LCD
+
+    static constexpr bool lcd_clicked = false;
+    static constexpr bool on_status_screen() { return true; }
+    FORCE_INLINE static void run_current_screen() { status_screen(); }
+
+  #endif
+
+  //
+  // EEPROM: Reset / Init / Load / Store
+  //
+  #if HAS_LCD_MENU
+    static void reset_settings();
+  #endif
+
+  #if ENABLED(EEPROM_SETTINGS)
+    #if HAS_LCD_MENU
+      static void init_eeprom();
+      static void load_settings();
+      static void store_settings();
+    #endif
+    #if DISABLED(EEPROM_AUTO_INIT)
+      static void eeprom_alert(const uint8_t msgid);
+      static inline void eeprom_alert_crc()     { eeprom_alert(0); }
+      static inline void eeprom_alert_index()   { eeprom_alert(1); }
+      static inline void eeprom_alert_version() { eeprom_alert(2); }
+    #endif
+  #endif
+
+  //
+  // Special handling if a move is underway
+  //
+  #if EITHER(DELTA_CALIBRATION_MENU, DELTA_AUTO_CALIBRATION) || (ENABLED(LCD_BED_LEVELING) && EITHER(PROBE_MANUALLY, MESH_BED_LEVELING))
+    #define LCD_HAS_WAIT_FOR_MOVE 1
+    static bool wait_for_move;
+  #else
+    static constexpr bool wait_for_move = false;
+  #endif
+
+  //
+  // Block interaction while under external control
+  //
+  #if HAS_LCD_MENU && EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
+    static bool external_control;
+    FORCE_INLINE static void capture() { external_control = true; }
+    FORCE_INLINE static void release() { external_control = false; }
+    #if ENABLED(AUTO_BED_LEVELING_UBL)
+      static void external_encoder();
+    #endif
+  #else
+    static constexpr bool external_control = false;
+  #endif
+
+  #if HAS_ENCODER_ACTION
+
+    static volatile uint8_t buttons;
+    #if IS_RRW_KEYPAD
+      static volatile uint8_t keypad_buttons;
+      static bool handle_keypad();
+    #endif
+    #if HAS_SLOW_BUTTONS
+      static volatile uint8_t slow_buttons;
+      static uint8_t read_slow_buttons();
+    #endif
+
+    static void update_buttons();
+    static inline bool button_pressed() { return BUTTON_CLICK() || TERN(TOUCH_SCREEN, touch_pressed(), false); }
+    #if EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
+      static void wait_for_release();
+    #endif
+
+    static uint32_t encoderPosition;
+
+    #define ENCODERBASE (TERN(REVERSE_ENCODER_DIRECTION, -1, +1))
+
+    #if EITHER(REVERSE_MENU_DIRECTION, REVERSE_SELECT_DIRECTION)
+      static int8_t encoderDirection;
+    #else
+      static constexpr int8_t encoderDirection = ENCODERBASE;
+    #endif
+
+    FORCE_INLINE static void encoder_direction_normal() {
+      #if EITHER(REVERSE_MENU_DIRECTION, REVERSE_SELECT_DIRECTION)
+        encoderDirection = ENCODERBASE;
+      #endif
+    }
+
+    FORCE_INLINE static void encoder_direction_menus() {
+      TERN_(REVERSE_MENU_DIRECTION, encoderDirection = -(ENCODERBASE));
+    }
+
+    FORCE_INLINE static void encoder_direction_select() {
+      TERN_(REVERSE_SELECT_DIRECTION, encoderDirection = -(ENCODERBASE));
+    }
+
+  #else
+
+    static inline void update_buttons() {}
+
+  #endif
+
+  #if ENABLED(TOUCH_SCREEN_CALIBRATION)
+    static void touch_calibration();
+  #endif
+
+  #if HAS_GRAPHICAL_TFT
+    static void move_axis_screen();
+  #endif
+
+private:
+
+  #if HAS_DISPLAY
+    static void finish_status(const bool persist);
+  #endif
+
+  #if HAS_WIRED_LCD
+    #if HAS_LCD_MENU && LCD_TIMEOUT_TO_STATUS > 0
+      static bool defer_return_to_status;
+    #else
+      static constexpr bool defer_return_to_status = false;
+    #endif
+    static void draw_status_screen();
+    #if HAS_GRAPHICAL_TFT
+      static void tft_idle();
+      #if ENABLED(TOUCH_SCREEN)
+        static bool touch_pressed();
+      #endif
+    #endif
+  #endif
+};
+
+extern MarlinUI ui;
+
+#define LCD_MESSAGEPGM_P(x)      ui.set_status_P(x)
+#define LCD_ALERTMESSAGEPGM_P(x) ui.set_alert_status_P(x)
+
+#define LCD_MESSAGEPGM(x)        LCD_MESSAGEPGM_P(GET_TEXT(x))
+#define LCD_ALERTMESSAGEPGM(x)   LCD_ALERTMESSAGEPGM_P(GET_TEXT(x))
