commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    üßë‚Äçüíª Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 88551f5eb6..957541a361 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -25,7 +25,7 @@
 
 #include "../../MarlinCore.h"
 
-#if BOTH(FWRETRACT, FWRETRACT_AUTORETRACT)
+#if ALL(FWRETRACT, FWRETRACT_AUTORETRACT)
   #include "../../feature/fwretract.h"
 #endif
 
@@ -72,7 +72,7 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
     }
   #endif
 
-  #if BOTH(FWRETRACT, FWRETRACT_AUTORETRACT)
+  #if ALL(FWRETRACT, FWRETRACT_AUTORETRACT)
 
     if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
       // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves
@@ -91,7 +91,7 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
 
   #endif // FWRETRACT
 
-  #if EITHER(IS_SCARA, POLAR)
+  #if ANY(IS_SCARA, POLAR)
     fast_move ? prepare_fast_move_to_destination() : prepare_line_to_destination();
   #else
     prepare_line_to_destination();

commit 842489a5dc2d4e0c7f80c4bde031355383848360
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Feb 8 19:36:22 2023 -0600

    üêõ Don't skip G2/G3 E-only moves

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index b10f1ac920..88551f5eb6 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -45,91 +45,75 @@ extern xyze_pos_t destination;
  * G0, G1: Coordinated movement of X Y Z E axes
  */
 void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
+  if (!MOTION_CONDITIONS) return;
 
-  if (IsRunning()
-    #if ENABLED(NO_MOTION_BEFORE_HOMING)
-      && !homing_needed_error(
-        NUM_AXIS_GANG(
-            (parser.seen_test('X') ? _BV(X_AXIS) : 0),
-          | (parser.seen_test('Y') ? _BV(Y_AXIS) : 0),
-          | (parser.seen_test('Z') ? _BV(Z_AXIS) : 0),
-          | (parser.seen_test(AXIS4_NAME) ? _BV(I_AXIS) : 0),
-          | (parser.seen_test(AXIS5_NAME) ? _BV(J_AXIS) : 0),
-          | (parser.seen_test(AXIS6_NAME) ? _BV(K_AXIS) : 0),
-          | (parser.seen_test(AXIS7_NAME) ? _BV(U_AXIS) : 0),
-          | (parser.seen_test(AXIS8_NAME) ? _BV(V_AXIS) : 0),
-          | (parser.seen_test(AXIS9_NAME) ? _BV(W_AXIS) : 0))
-      )
-    #endif
-  ) {
-    TERN_(FULL_REPORT_TO_HOST_FEATURE, set_and_report_grblstate(M_RUNNING));
+  TERN_(FULL_REPORT_TO_HOST_FEATURE, set_and_report_grblstate(M_RUNNING));
 
-    #ifdef G0_FEEDRATE
-      feedRate_t old_feedrate;
-      #if ENABLED(VARIABLE_G0_FEEDRATE)
-        if (fast_move) {
-          old_feedrate = feedrate_mm_s;             // Back up the (old) motion mode feedrate
-          feedrate_mm_s = fast_move_feedrate;       // Get G0 feedrate from last usage
-        }
-      #endif
-    #endif
-
-    get_destination_from_command();                 // Get X Y [Z[I[J[K]]]] [E] F (and set cutter power)
-
-    #ifdef G0_FEEDRATE
+  #ifdef G0_FEEDRATE
+    feedRate_t old_feedrate;
+    #if ENABLED(VARIABLE_G0_FEEDRATE)
       if (fast_move) {
-        #if ENABLED(VARIABLE_G0_FEEDRATE)
-          fast_move_feedrate = feedrate_mm_s;       // Save feedrate for the next G0
-        #else
-          old_feedrate = feedrate_mm_s;             // Back up the (new) motion mode feedrate
-          feedrate_mm_s = MMM_TO_MMS(G0_FEEDRATE);  // Get the fixed G0 feedrate
-        #endif
+        old_feedrate = feedrate_mm_s;             // Back up the (old) motion mode feedrate
+        feedrate_mm_s = fast_move_feedrate;       // Get G0 feedrate from last usage
       }
     #endif
+  #endif
 
-    #if BOTH(FWRETRACT, FWRETRACT_AUTORETRACT)
-
-      if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
-        // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves
-        if (fwretract.autoretract_enabled && parser.seen_test('E')
-          && !parser.seen(STR_AXES_MAIN)
-        ) {
-          const float echange = destination.e - current_position.e;
-          // Is this a retract or recover move?
-          if (WITHIN(ABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && fwretract.retracted[active_extruder] == (echange > 0.0)) {
-            current_position.e = destination.e;       // Hide a G1-based retract/recover from calculations
-            sync_plan_position_e();                   // AND from the planner
-            return fwretract.retract(echange < 0.0);  // Firmware-based retract/recover (double-retract ignored)
-          }
+  get_destination_from_command();                 // Get X Y [Z[I[J[K]]]] [E] F (and set cutter power)
+
+  #ifdef G0_FEEDRATE
+    if (fast_move) {
+      #if ENABLED(VARIABLE_G0_FEEDRATE)
+        fast_move_feedrate = feedrate_mm_s;       // Save feedrate for the next G0
+      #else
+        old_feedrate = feedrate_mm_s;             // Back up the (new) motion mode feedrate
+        feedrate_mm_s = MMM_TO_MMS(G0_FEEDRATE);  // Get the fixed G0 feedrate
+      #endif
+    }
+  #endif
+
+  #if BOTH(FWRETRACT, FWRETRACT_AUTORETRACT)
+
+    if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
+      // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves
+      if (fwretract.autoretract_enabled && parser.seen_test('E')
+        && !parser.seen(STR_AXES_MAIN)
+      ) {
+        const float echange = destination.e - current_position.e;
+        // Is this a retract or recover move?
+        if (WITHIN(ABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && fwretract.retracted[active_extruder] == (echange > 0.0)) {
+          current_position.e = destination.e;       // Hide a G1-based retract/recover from calculations
+          sync_plan_position_e();                   // AND from the planner
+          return fwretract.retract(echange < 0.0);  // Firmware-based retract/recover (double-retract ignored)
         }
       }
+    }
 
-    #endif // FWRETRACT
+  #endif // FWRETRACT
 
-    #if EITHER(IS_SCARA, POLAR)
-      fast_move ? prepare_fast_move_to_destination() : prepare_line_to_destination();
-    #else
-      prepare_line_to_destination();
-    #endif
+  #if EITHER(IS_SCARA, POLAR)
+    fast_move ? prepare_fast_move_to_destination() : prepare_line_to_destination();
+  #else
+    prepare_line_to_destination();
+  #endif
 
-    #ifdef G0_FEEDRATE
-      // Restore the motion mode feedrate
-      if (fast_move) feedrate_mm_s = old_feedrate;
-    #endif
+  #ifdef G0_FEEDRATE
+    // Restore the motion mode feedrate
+    if (fast_move) feedrate_mm_s = old_feedrate;
+  #endif
 
-    #if ENABLED(NANODLP_Z_SYNC)
-      #if ENABLED(NANODLP_ALL_AXIS)
-        #define _MOVE_SYNC parser.seenval('X') || parser.seenval('Y') || parser.seenval('Z')  // For any move wait and output sync message
-      #else
-        #define _MOVE_SYNC parser.seenval('Z')  // Only for Z move
-      #endif
-      if (_MOVE_SYNC) {
-        planner.synchronize();
-        SERIAL_ECHOLNPGM(STR_Z_MOVE_COMP);
-      }
-      TERN_(FULL_REPORT_TO_HOST_FEATURE, set_and_report_grblstate(M_IDLE));
+  #if ENABLED(NANODLP_Z_SYNC)
+    #if ENABLED(NANODLP_ALL_AXIS)
+      #define _MOVE_SYNC parser.seenval('X') || parser.seenval('Y') || parser.seenval('Z')  // For any move wait and output sync message
     #else
-      TERN_(FULL_REPORT_TO_HOST_FEATURE, report_current_grblstate_moving());
+      #define _MOVE_SYNC parser.seenval('Z')  // Only for Z move
     #endif
-  }
+    if (_MOVE_SYNC) {
+      planner.synchronize();
+      SERIAL_ECHOLNPGM(STR_Z_MOVE_COMP);
+    }
+    TERN_(FULL_REPORT_TO_HOST_FEATURE, set_and_report_grblstate(M_IDLE));
+  #else
+    TERN_(FULL_REPORT_TO_HOST_FEATURE, report_current_grblstate_moving());
+  #endif
 }

commit 7717beb79362522b8239d5af62b32ff3d0e2d748
Author: kadir ilkimen <kadirilkimen@gmail.com>
Date:   Wed Jan 11 06:29:38 2023 +0200

    ‚ú® Polar Kinematics (#25214)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index cee2f05080..b10f1ac920 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -106,7 +106,7 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
 
     #endif // FWRETRACT
 
-    #if IS_SCARA
+    #if EITHER(IS_SCARA, POLAR)
       fast_move ? prepare_fast_move_to_destination() : prepare_line_to_destination();
     #else
       prepare_line_to_destination();

commit 21c48d9f927c81d7b7cf6fc3641ce01a831a16ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jul 27 04:24:50 2022 -0500

    üßë‚Äçüíª  Update planner/stepper includes

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 933bf3d5d9..cee2f05080 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -32,7 +32,7 @@
 #include "../../sd/cardreader.h"
 
 #if ENABLED(NANODLP_Z_SYNC)
-  #include "../../module/stepper.h"
+  #include "../../module/planner.h"
 #endif
 
 extern xyze_pos_t destination;

commit 31413a7d773e384753dd889ca2f5dcd8aa1fdeca
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon May 23 21:59:36 2022 -0500

    üßë‚Äçüíª Combined axis strings

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index d647894d27..933bf3d5d9 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -92,7 +92,7 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
       if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
         // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves
         if (fwretract.autoretract_enabled && parser.seen_test('E')
-          && !parser.seen(NUM_AXIS_GANG("X", "Y", "Z", STR_I, STR_J, STR_K, STR_U, STR_V, STR_W))
+          && !parser.seen(STR_AXES_MAIN)
         ) {
           const float echange = destination.e - current_position.e;
           // Is this a retract or recover move?

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 493fd00da1..d647894d27 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -49,13 +49,16 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
   if (IsRunning()
     #if ENABLED(NO_MOTION_BEFORE_HOMING)
       && !homing_needed_error(
-        LINEAR_AXIS_GANG(
+        NUM_AXIS_GANG(
             (parser.seen_test('X') ? _BV(X_AXIS) : 0),
           | (parser.seen_test('Y') ? _BV(Y_AXIS) : 0),
           | (parser.seen_test('Z') ? _BV(Z_AXIS) : 0),
           | (parser.seen_test(AXIS4_NAME) ? _BV(I_AXIS) : 0),
           | (parser.seen_test(AXIS5_NAME) ? _BV(J_AXIS) : 0),
-          | (parser.seen_test(AXIS6_NAME) ? _BV(K_AXIS) : 0))
+          | (parser.seen_test(AXIS6_NAME) ? _BV(K_AXIS) : 0),
+          | (parser.seen_test(AXIS7_NAME) ? _BV(U_AXIS) : 0),
+          | (parser.seen_test(AXIS8_NAME) ? _BV(V_AXIS) : 0),
+          | (parser.seen_test(AXIS9_NAME) ? _BV(W_AXIS) : 0))
       )
     #endif
   ) {
@@ -89,7 +92,7 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
       if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
         // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves
         if (fwretract.autoretract_enabled && parser.seen_test('E')
-          && !parser.seen(LINEAR_AXIS_GANG("X", "Y", "Z", STR_I, STR_J, STR_K))
+          && !parser.seen(NUM_AXIS_GANG("X", "Y", "Z", STR_I, STR_J, STR_K, STR_U, STR_V, STR_W))
         ) {
           const float echange = destination.e - current_position.e;
           // Is this a retract or recover move?

commit 9665a4434cee0386fa2a63a058b6f2598943ee98
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jan 10 02:51:34 2022 -0600

    üßë‚Äçüíª Fewer string macros

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index cc6979b74c..493fd00da1 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -89,7 +89,7 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
       if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
         // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves
         if (fwretract.autoretract_enabled && parser.seen_test('E')
-          && !parser.seen(LINEAR_AXIS_GANG("X", "Y", "Z", AXIS4_STR, AXIS5_STR, AXIS6_STR))
+          && !parser.seen(LINEAR_AXIS_GANG("X", "Y", "Z", STR_I, STR_J, STR_K))
         ) {
           const float echange = destination.e - current_position.e;
           // Is this a retract or recover move?

commit 4b4de71304a426e0d9b2696dae4e82eb55ba7079
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Aug 29 13:57:47 2021 -0500

    ‚ö°Ô∏è Improve G2/G3 arc handling (#22599)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index eb79180c69..cc6979b74c 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -71,7 +71,7 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
       #endif
     #endif
 
-    get_destination_from_command();                 // Get X Y Z E F (and set cutter power)
+    get_destination_from_command();                 // Get X Y [Z[I[J[K]]]] [E] F (and set cutter power)
 
     #ifdef G0_FEEDRATE
       if (fast_move) {

commit 7726af9c5348c1c7d0fd9a56eca87d00cd75fee6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Jun 5 09:18:47 2021 +0200

    üèóÔ∏è Support for up to 6 linear axes (#19112)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 30f8248037..eb79180c69 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -52,7 +52,10 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
         LINEAR_AXIS_GANG(
             (parser.seen_test('X') ? _BV(X_AXIS) : 0),
           | (parser.seen_test('Y') ? _BV(Y_AXIS) : 0),
-          | (parser.seen_test('Z') ? _BV(Z_AXIS) : 0))
+          | (parser.seen_test('Z') ? _BV(Z_AXIS) : 0),
+          | (parser.seen_test(AXIS4_NAME) ? _BV(I_AXIS) : 0),
+          | (parser.seen_test(AXIS5_NAME) ? _BV(J_AXIS) : 0),
+          | (parser.seen_test(AXIS6_NAME) ? _BV(K_AXIS) : 0))
       )
     #endif
   ) {
@@ -85,7 +88,9 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
 
       if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
         // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves
-        if (fwretract.autoretract_enabled && parser.seen_test('E') && !parser.seen(LINEAR_AXIS_GANG("X", "Y", "Z"))) {
+        if (fwretract.autoretract_enabled && parser.seen_test('E')
+          && !parser.seen(LINEAR_AXIS_GANG("X", "Y", "Z", AXIS4_STR, AXIS5_STR, AXIS6_STR))
+        ) {
           const float echange = destination.e - current_position.e;
           // Is this a retract or recover move?
           if (WITHIN(ABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && fwretract.retracted[active_extruder] == (echange > 0.0)) {

commit dd4990252e891cdfe56cb7d6e3bbe1e6289be649
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon May 24 16:38:57 2021 -0500

    ‚ôªÔ∏è Refactor Linear / Logical / Distinct Axes (#21953)
    
    * More patches supporting EXTRUDERS 0
    * Extend types in prep for more axes

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 73c5b11714..30f8248037 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -49,9 +49,11 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
   if (IsRunning()
     #if ENABLED(NO_MOTION_BEFORE_HOMING)
       && !homing_needed_error(
-          (parser.seen_test('X') ? _BV(X_AXIS) : 0)
-        | (parser.seen_test('Y') ? _BV(Y_AXIS) : 0)
-        | (parser.seen_test('Z') ? _BV(Z_AXIS) : 0) )
+        LINEAR_AXIS_GANG(
+            (parser.seen_test('X') ? _BV(X_AXIS) : 0),
+          | (parser.seen_test('Y') ? _BV(Y_AXIS) : 0),
+          | (parser.seen_test('Z') ? _BV(Z_AXIS) : 0))
+      )
     #endif
   ) {
     TERN_(FULL_REPORT_TO_HOST_FEATURE, set_and_report_grblstate(M_RUNNING));
@@ -83,7 +85,7 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
 
       if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
         // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves
-        if (fwretract.autoretract_enabled && parser.seen('E') && !parser.seen("XYZ")) {
+        if (fwretract.autoretract_enabled && parser.seen_test('E') && !parser.seen(LINEAR_AXIS_GANG("X", "Y", "Z"))) {
           const float echange = destination.e - current_position.e;
           // Is this a retract or recover move?
           if (WITHIN(ABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && fwretract.retracted[active_extruder] == (echange > 0.0)) {

commit abbe3f0dc7aa23bae4aa26f6d6b09a4a0665a1a0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 18 22:46:59 2021 -0500

    üé® Misc cleanup and fixes

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 089e00ab95..73c5b11714 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -83,7 +83,7 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
 
       if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
         // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves
-        if (fwretract.autoretract_enabled && parser.seen('E') && !(parser.seen('X') || parser.seen('Y') || parser.seen('Z'))) {
+        if (fwretract.autoretract_enabled && parser.seen('E') && !parser.seen("XYZ")) {
           const float echange = destination.e - current_position.e;
           // Is this a retract or recover move?
           if (WITHIN(ABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && fwretract.retracted[active_extruder] == (echange > 0.0)) {

commit 49548c343deb1e7f38f6027af20c02a79dbe5031
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 9 03:50:51 2021 -0500

    Optimize G-code flag parameters (#21849)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 64c07d1d89..089e00ab95 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -49,9 +49,9 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
   if (IsRunning()
     #if ENABLED(NO_MOTION_BEFORE_HOMING)
       && !homing_needed_error(
-          (parser.seen('X') ? _BV(X_AXIS) : 0)
-        | (parser.seen('Y') ? _BV(Y_AXIS) : 0)
-        | (parser.seen('Z') ? _BV(Z_AXIS) : 0) )
+          (parser.seen_test('X') ? _BV(X_AXIS) : 0)
+        | (parser.seen_test('Y') ? _BV(Y_AXIS) : 0)
+        | (parser.seen_test('Z') ? _BV(Z_AXIS) : 0) )
     #endif
   ) {
     TERN_(FULL_REPORT_TO_HOST_FEATURE, set_and_report_grblstate(M_RUNNING));

commit 32dba5e0c735166d3bb54783efbf0d5d1b275b66
Author: fedetony <45215920+fedetony@users.noreply.github.com>
Date:   Fri Apr 16 08:59:28 2021 +0200

    Realtime Reporting, S000, P000, R000 (#19330)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 9ac49bd93c..64c07d1d89 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -54,6 +54,7 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
         | (parser.seen('Z') ? _BV(Z_AXIS) : 0) )
     #endif
   ) {
+    TERN_(FULL_REPORT_TO_HOST_FEATURE, set_and_report_grblstate(M_RUNNING));
 
     #ifdef G0_FEEDRATE
       feedRate_t old_feedrate;
@@ -116,6 +117,9 @@ void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
         planner.synchronize();
         SERIAL_ECHOLNPGM(STR_Z_MOVE_COMP);
       }
+      TERN_(FULL_REPORT_TO_HOST_FEATURE, set_and_report_grblstate(M_IDLE));
+    #else
+      TERN_(FULL_REPORT_TO_HOST_FEATURE, report_current_grblstate_moving());
     #endif
   }
 }

commit 7e0524109ed7217cbfcb2a8c2383d2a3005e81d9
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Oct 4 17:29:12 2020 -0500

    Add HAS_FAST_MOVES

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index b6ddf9634b..9ac49bd93c 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -44,11 +44,7 @@ extern xyze_pos_t destination;
 /**
  * G0, G1: Coordinated movement of X Y Z E axes
  */
-void GcodeSuite::G0_G1(
-  #if IS_SCARA || defined(G0_FEEDRATE)
-    const bool fast_move/*=false*/
-  #endif
-) {
+void GcodeSuite::G0_G1(TERN_(HAS_FAST_MOVES, const bool fast_move/*=false*/)) {
 
   if (IsRunning()
     #if ENABLED(NO_MOTION_BEFORE_HOMING)

commit a12ac5e1754f0f66babde400a0406b6cdbff983e
Author: swissnorp <67485708+swissnorp@users.noreply.github.com>
Date:   Thu Aug 27 23:05:53 2020 +0200

    Mark axes not-homed with HOME_AFTER_DEACTIVATE (#18907)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 3aa082c25e..b6ddf9634b 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -52,7 +52,7 @@ void GcodeSuite::G0_G1(
 
   if (IsRunning()
     #if ENABLED(NO_MOTION_BEFORE_HOMING)
-      && !axis_unhomed_error(
+      && !homing_needed_error(
           (parser.seen('X') ? _BV(X_AXIS) : 0)
         | (parser.seen('Y') ? _BV(Y_AXIS) : 0)
         | (parser.seen('Z') ? _BV(Z_AXIS) : 0) )

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index df0825a512..3aa082c25e 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit df8b7dfc406be095a62b5445b69c40034d418823
Author: Ben <jediminer543@users.noreply.github.com>
Date:   Fri Apr 3 01:31:08 2020 +0100

    Various Laser / Spindle improvements (#15335)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 069d76fdad..df0825a512 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -69,7 +69,7 @@ void GcodeSuite::G0_G1(
       #endif
     #endif
 
-    get_destination_from_command();                 // Process X Y Z E F parameters
+    get_destination_from_command();                 // Get X Y Z E F (and set cutter power)
 
     #ifdef G0_FEEDRATE
       if (fast_move) {

commit 49c5f614c6ac9326275a2daf8f771df41041f142
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 1 16:59:04 2020 -0600

    Minor motion style changes

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 8f0dfc71b2..069d76fdad 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -100,9 +100,9 @@ void GcodeSuite::G0_G1(
     #endif // FWRETRACT
 
     #if IS_SCARA
-      fast_move ? prepare_fast_move_to_destination() : prepare_move_to_destination();
+      fast_move ? prepare_fast_move_to_destination() : prepare_line_to_destination();
     #else
-      prepare_move_to_destination();
+      prepare_line_to_destination();
     #endif
 
     #ifdef G0_FEEDRATE

commit e78f607ef33044eecde744e77beea87532817c47
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Feb 26 03:02:03 2020 -0600

    Use a STR_ prefix for non-translated strings

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 73329e7fc9..8f0dfc71b2 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -118,7 +118,7 @@ void GcodeSuite::G0_G1(
       #endif
       if (_MOVE_SYNC) {
         planner.synchronize();
-        SERIAL_ECHOLNPGM(MSG_Z_MOVE_COMP);
+        SERIAL_ECHOLNPGM(STR_Z_MOVE_COMP);
       }
     #endif
   }

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 4dd13ca017..73329e7fc9 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit d0e1166cce60381fbdad1105d13765806a525d99
Author: Dirk O. Kaar <19971886+dok-net@users.noreply.github.com>
Date:   Fri Jan 3 02:01:38 2020 +0100

    Fix Visual Micro "Arduino IDE for Visual Studio" support (#16418)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 36bc29026e..4dd13ca017 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -23,7 +23,7 @@
 #include "../gcode.h"
 #include "../../module/motion.h"
 
-#include "../../Marlin.h"
+#include "../../MarlinCore.h"
 
 #if BOTH(FWRETRACT, FWRETRACT_AUTORETRACT)
   #include "../../feature/fwretract.h"

commit 50e4545255605eb506c20eb107270038b0fe7bdb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 29 04:25:39 2019 -0500

    Add custom types for position (#15204)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index fed70f553e..36bc29026e 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -35,7 +35,7 @@
   #include "../../module/stepper.h"
 #endif
 
-extern float destination[XYZE];
+extern xyze_pos_t destination;
 
 #if ENABLED(VARIABLE_G0_FEEDRATE)
   feedRate_t fast_move_feedrate = MMM_TO_MMS(G0_FEEDRATE);
@@ -87,12 +87,12 @@ void GcodeSuite::G0_G1(
       if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
         // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves
         if (fwretract.autoretract_enabled && parser.seen('E') && !(parser.seen('X') || parser.seen('Y') || parser.seen('Z'))) {
-          const float echange = destination[E_AXIS] - current_position[E_AXIS];
+          const float echange = destination.e - current_position.e;
           // Is this a retract or recover move?
           if (WITHIN(ABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && fwretract.retracted[active_extruder] == (echange > 0.0)) {
-            current_position[E_AXIS] = destination[E_AXIS]; // Hide a G1-based retract/recover from calculations
-            sync_plan_position_e();                         // AND from the planner
-            return fwretract.retract(echange < 0.0);        // Firmware-based retract/recover (double-retract ignored)
+            current_position.e = destination.e;       // Hide a G1-based retract/recover from calculations
+            sync_plan_position_e();                   // AND from the planner
+            return fwretract.retract(echange < 0.0);  // Firmware-based retract/recover (double-retract ignored)
           }
         }
       }

commit 455dabb18334c89878a75be62bccebd9f537574d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 26 01:28:09 2019 -0500

    Add a feedRate_t data type (#15349)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 82f9bdd67d..fed70f553e 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -38,7 +38,7 @@
 extern float destination[XYZE];
 
 #if ENABLED(VARIABLE_G0_FEEDRATE)
-  float saved_g0_feedrate_mm_s = MMM_TO_MMS(G0_FEEDRATE);
+  feedRate_t fast_move_feedrate = MMM_TO_MMS(G0_FEEDRATE);
 #endif
 
 /**
@@ -46,7 +46,7 @@ extern float destination[XYZE];
  */
 void GcodeSuite::G0_G1(
   #if IS_SCARA || defined(G0_FEEDRATE)
-    bool fast_move/*=false*/
+    const bool fast_move/*=false*/
   #endif
 ) {
 
@@ -60,23 +60,23 @@ void GcodeSuite::G0_G1(
   ) {
 
     #ifdef G0_FEEDRATE
-      float saved_feedrate_mm_s;
+      feedRate_t old_feedrate;
       #if ENABLED(VARIABLE_G0_FEEDRATE)
         if (fast_move) {
-          saved_feedrate_mm_s = feedrate_mm_s;      // Back up the (old) motion mode feedrate
-          feedrate_mm_s = saved_g0_feedrate_mm_s;   // Get G0 feedrate from last usage
+          old_feedrate = feedrate_mm_s;             // Back up the (old) motion mode feedrate
+          feedrate_mm_s = fast_move_feedrate;       // Get G0 feedrate from last usage
         }
       #endif
     #endif
 
-    get_destination_from_command(); // For X Y Z E F
+    get_destination_from_command();                 // Process X Y Z E F parameters
 
     #ifdef G0_FEEDRATE
       if (fast_move) {
         #if ENABLED(VARIABLE_G0_FEEDRATE)
-          saved_g0_feedrate_mm_s = feedrate_mm_s;   // Save feedrate for the next G0
+          fast_move_feedrate = feedrate_mm_s;       // Save feedrate for the next G0
         #else
-          saved_feedrate_mm_s = feedrate_mm_s;      // Back up the (new) motion mode feedrate
+          old_feedrate = feedrate_mm_s;             // Back up the (new) motion mode feedrate
           feedrate_mm_s = MMM_TO_MMS(G0_FEEDRATE);  // Get the fixed G0 feedrate
         #endif
       }
@@ -100,14 +100,14 @@ void GcodeSuite::G0_G1(
     #endif // FWRETRACT
 
     #if IS_SCARA
-      fast_move ? prepare_uninterpolated_move_to_destination() : prepare_move_to_destination();
+      fast_move ? prepare_fast_move_to_destination() : prepare_move_to_destination();
     #else
       prepare_move_to_destination();
     #endif
 
     #ifdef G0_FEEDRATE
       // Restore the motion mode feedrate
-      if (fast_move) feedrate_mm_s = saved_feedrate_mm_s;
+      if (fast_move) feedrate_mm_s = old_feedrate;
     #endif
 
     #if ENABLED(NANODLP_Z_SYNC)

commit b2e1f77f58a67ac02503cbe36b22a21e5afaeac0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Sep 25 21:01:29 2019 -0500

    Fix extraneous "Home XYZ First" message

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 8d88ac91dd..82f9bdd67d 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -52,7 +52,10 @@ void GcodeSuite::G0_G1(
 
   if (IsRunning()
     #if ENABLED(NO_MOTION_BEFORE_HOMING)
-      && !axis_unhomed_error(parser.seen('X'), parser.seen('Y'), parser.seen('Z'))
+      && !axis_unhomed_error(
+          (parser.seen('X') ? _BV(X_AXIS) : 0)
+        | (parser.seen('Y') ? _BV(Y_AXIS) : 0)
+        | (parser.seen('Z') ? _BV(Z_AXIS) : 0) )
     #endif
   ) {
 

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 7e0e9f7b90..8d88ac91dd 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit 49cf92dc36424cf828436f32e72263eca39a1cc3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 16 23:43:06 2019 -0500

    Extended condition macros (#13419)
    
    Allow `ENABLED`, `DISABLED`, `PIN_EXISTS`, and `BUTTON_EXISTS` to take multiple arguments. Also add:
    - Alias `ANY(...)` for `!DISABLED(...)`
    - Alias `ANY_PIN(...)` for `PIN_EXISTS(a) || PIN_EXISTS(b) ...`
    - Alias `EITHER(A,B)` for `ANY(...)`
    - Alias `ALL(...)` and `BOTH(A,B)` for `ENABLED(...)`
    - `NONE(...)` for `DISABLED(...)`

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index cbec67b276..7e0e9f7b90 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -25,7 +25,7 @@
 
 #include "../../Marlin.h"
 
-#if ENABLED(FWRETRACT) && ENABLED(FWRETRACT_AUTORETRACT)
+#if BOTH(FWRETRACT, FWRETRACT_AUTORETRACT)
   #include "../../feature/fwretract.h"
 #endif
 
@@ -79,7 +79,7 @@ void GcodeSuite::G0_G1(
       }
     #endif
 
-    #if ENABLED(FWRETRACT) && ENABLED(FWRETRACT_AUTORETRACT)
+    #if BOTH(FWRETRACT, FWRETRACT_AUTORETRACT)
 
       if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
         // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 32e9e6f6a5..cbec67b276 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm

commit a07ac6312f29b3f500c49c32b50374d57e0a3986
Author: TheSFReader <TheSFReader@gmail.com>
Date:   Thu Oct 25 17:35:16 2018 +0200

    G0 feedrate may be fixed or variable (#12172)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index fa0904d1b0..32e9e6f6a5 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -37,40 +37,48 @@
 
 extern float destination[XYZE];
 
-#if ENABLED(G0_FEEDRATE)
-  float saved_g0_feedrate_mm_s =  MMM_TO_MMS(DEFAULT_G0_FEEDRATE);
-#endif
-
-#if ENABLED(NO_MOTION_BEFORE_HOMING)
-  #define G0_G1_CONDITION !axis_unhomed_error(parser.seen('X'), parser.seen('Y'), parser.seen('Z'))
-#else
-  #define G0_G1_CONDITION true
+#if ENABLED(VARIABLE_G0_FEEDRATE)
+  float saved_g0_feedrate_mm_s = MMM_TO_MMS(G0_FEEDRATE);
 #endif
 
 /**
  * G0, G1: Coordinated movement of X Y Z E axes
  */
 void GcodeSuite::G0_G1(
-  #if IS_SCARA || ENABLED(G0_FEEDRATE)
+  #if IS_SCARA || defined(G0_FEEDRATE)
     bool fast_move/*=false*/
   #endif
 ) {
-  #if ENABLED(G0_FEEDRATE)
-    float saved_g1_feedrate_mm_s;
-  #endif
 
-  if (IsRunning() && G0_G1_CONDITION) {
+  if (IsRunning()
+    #if ENABLED(NO_MOTION_BEFORE_HOMING)
+      && !axis_unhomed_error(parser.seen('X'), parser.seen('Y'), parser.seen('Z'))
+    #endif
+  ) {
+
+    #ifdef G0_FEEDRATE
+      float saved_feedrate_mm_s;
+      #if ENABLED(VARIABLE_G0_FEEDRATE)
+        if (fast_move) {
+          saved_feedrate_mm_s = feedrate_mm_s;      // Back up the (old) motion mode feedrate
+          feedrate_mm_s = saved_g0_feedrate_mm_s;   // Get G0 feedrate from last usage
+        }
+      #endif
+    #endif
 
-    #if ENABLED(G0_FEEDRATE)
+    get_destination_from_command(); // For X Y Z E F
+
+    #ifdef G0_FEEDRATE
       if (fast_move) {
-        // Save standard feedrate before setting feedrate to fast/g0
-        saved_g1_feedrate_mm_s = feedrate_mm_s;
-        feedrate_mm_s = saved_g0_feedrate_mm_s;
+        #if ENABLED(VARIABLE_G0_FEEDRATE)
+          saved_g0_feedrate_mm_s = feedrate_mm_s;   // Save feedrate for the next G0
+        #else
+          saved_feedrate_mm_s = feedrate_mm_s;      // Back up the (new) motion mode feedrate
+          feedrate_mm_s = MMM_TO_MMS(G0_FEEDRATE);  // Get the fixed G0 feedrate
+        #endif
       }
     #endif
 
-    get_destination_from_command(); // For X Y Z E F
-
     #if ENABLED(FWRETRACT) && ENABLED(FWRETRACT_AUTORETRACT)
 
       if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
@@ -94,12 +102,9 @@ void GcodeSuite::G0_G1(
       prepare_move_to_destination();
     #endif
 
-    #if ENABLED(G0_FEEDRATE)
-      // save G0 feedrate, and restore standard feedrate as soon as possible
-      if (fast_move) {
-        saved_g0_feedrate_mm_s = feedrate_mm_s;
-        feedrate_mm_s = saved_g1_feedrate_mm_s;
-      }
+    #ifdef G0_FEEDRATE
+      // Restore the motion mode feedrate
+      if (fast_move) feedrate_mm_s = saved_feedrate_mm_s;
     #endif
 
     #if ENABLED(NANODLP_Z_SYNC)

commit 84b59d58fb71366e4ef1f3cde79873bff53ea2d6
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 16 02:02:20 2018 -0500

    Clean up whitespace

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index be2927b335..fa0904d1b0 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -58,9 +58,9 @@ void GcodeSuite::G0_G1(
   #if ENABLED(G0_FEEDRATE)
     float saved_g1_feedrate_mm_s;
   #endif
-  
+
   if (IsRunning() && G0_G1_CONDITION) {
-    
+
     #if ENABLED(G0_FEEDRATE)
       if (fast_move) {
         // Save standard feedrate before setting feedrate to fast/g0
@@ -95,13 +95,13 @@ void GcodeSuite::G0_G1(
     #endif
 
     #if ENABLED(G0_FEEDRATE)
-      // save G0 feedrate, and restore standard feedrate as soon as possible 
+      // save G0 feedrate, and restore standard feedrate as soon as possible
       if (fast_move) {
         saved_g0_feedrate_mm_s = feedrate_mm_s;
         feedrate_mm_s = saved_g1_feedrate_mm_s;
       }
     #endif
-    
+
     #if ENABLED(NANODLP_Z_SYNC)
       #if ENABLED(NANODLP_ALL_AXIS)
         #define _MOVE_SYNC parser.seenval('X') || parser.seenval('Y') || parser.seenval('Z')  // For any move wait and output sync message

commit af939c158ac8e774fbdbbfba6908a02a9e26e745
Author: TheSFReader <TheSFReader@gmail.com>
Date:   Tue Oct 16 08:49:51 2018 +0200

    Option for G0 to have a separate feedrate (#12089)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 223bd87fb7..be2927b335 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -37,6 +37,10 @@
 
 extern float destination[XYZE];
 
+#if ENABLED(G0_FEEDRATE)
+  float saved_g0_feedrate_mm_s =  MMM_TO_MMS(DEFAULT_G0_FEEDRATE);
+#endif
+
 #if ENABLED(NO_MOTION_BEFORE_HOMING)
   #define G0_G1_CONDITION !axis_unhomed_error(parser.seen('X'), parser.seen('Y'), parser.seen('Z'))
 #else
@@ -47,11 +51,24 @@ extern float destination[XYZE];
  * G0, G1: Coordinated movement of X Y Z E axes
  */
 void GcodeSuite::G0_G1(
-  #if IS_SCARA
+  #if IS_SCARA || ENABLED(G0_FEEDRATE)
     bool fast_move/*=false*/
   #endif
 ) {
+  #if ENABLED(G0_FEEDRATE)
+    float saved_g1_feedrate_mm_s;
+  #endif
+  
   if (IsRunning() && G0_G1_CONDITION) {
+    
+    #if ENABLED(G0_FEEDRATE)
+      if (fast_move) {
+        // Save standard feedrate before setting feedrate to fast/g0
+        saved_g1_feedrate_mm_s = feedrate_mm_s;
+        feedrate_mm_s = saved_g0_feedrate_mm_s;
+      }
+    #endif
+
     get_destination_from_command(); // For X Y Z E F
 
     #if ENABLED(FWRETRACT) && ENABLED(FWRETRACT_AUTORETRACT)
@@ -77,6 +94,14 @@ void GcodeSuite::G0_G1(
       prepare_move_to_destination();
     #endif
 
+    #if ENABLED(G0_FEEDRATE)
+      // save G0 feedrate, and restore standard feedrate as soon as possible 
+      if (fast_move) {
+        saved_g0_feedrate_mm_s = feedrate_mm_s;
+        feedrate_mm_s = saved_g1_feedrate_mm_s;
+      }
+    #endif
+    
     #if ENABLED(NANODLP_Z_SYNC)
       #if ENABLED(NANODLP_ALL_AXIS)
         #define _MOVE_SYNC parser.seenval('X') || parser.seenval('Y') || parser.seenval('Z')  // For any move wait and output sync message

commit 93839e2f73c78fd2448c15c5ffefef62fd53fe6b
Author: Victor Tseng <palatis@gmail.com>
Date:   Sat Sep 29 05:52:56 2018 +0800

    Add option to enable/disable autoretract altogether (#11904)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index b0e088b821..223bd87fb7 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -25,7 +25,7 @@
 
 #include "../../Marlin.h"
 
-#if ENABLED(FWRETRACT)
+#if ENABLED(FWRETRACT) && ENABLED(FWRETRACT_AUTORETRACT)
   #include "../../feature/fwretract.h"
 #endif
 
@@ -54,7 +54,7 @@ void GcodeSuite::G0_G1(
   if (IsRunning() && G0_G1_CONDITION) {
     get_destination_from_command(); // For X Y Z E F
 
-    #if ENABLED(FWRETRACT)
+    #if ENABLED(FWRETRACT) && ENABLED(FWRETRACT_AUTORETRACT)
 
       if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
         // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves

commit 99ecdf59af907ebb8d2d847863614094bb576e3f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun May 13 01:10:34 2018 -0500

    Smarter MIN, MAX, ABS macros
    
    Use macros that explicitly avoid double-evaluation and can be used for any datatype, replacing `min`, `max`, `abs`, `fabs`, `labs`, and `FABS`.
    
    Co-Authored-By: ejtagle <ejtagle@hotmail.com>

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index d3091fecc5..b0e088b821 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -61,7 +61,7 @@ void GcodeSuite::G0_G1(
         if (fwretract.autoretract_enabled && parser.seen('E') && !(parser.seen('X') || parser.seen('Y') || parser.seen('Z'))) {
           const float echange = destination[E_AXIS] - current_position[E_AXIS];
           // Is this a retract or recover move?
-          if (WITHIN(FABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && fwretract.retracted[active_extruder] == (echange > 0.0)) {
+          if (WITHIN(ABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && fwretract.retracted[active_extruder] == (echange > 0.0)) {
             current_position[E_AXIS] = destination[E_AXIS]; // Hide a G1-based retract/recover from calculations
             sync_plan_position_e();                         // AND from the planner
             return fwretract.retract(echange < 0.0);        // Firmware-based retract/recover (double-retract ignored)

commit 306f0f2135e4b2aed749a0d1b870abf17d883e38
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat May 12 01:38:02 2018 -0500

    Move Stepper::synchronize to Planner (#10713)
    
    Co-Authored-By: ejtagle <ejtagle@hotmail.com>

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 46a4cf826b..d3091fecc5 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -84,7 +84,7 @@ void GcodeSuite::G0_G1(
         #define _MOVE_SYNC parser.seenval('Z')  // Only for Z move
       #endif
       if (_MOVE_SYNC) {
-        stepper.synchronize();
+        planner.synchronize();
         SERIAL_ECHOLNPGM(MSG_Z_MOVE_COMP);
       }
     #endif

commit d1f14202a9bf9824dfa3c1ce5551ae457bf2b66d
Author: Rob Power <robpower@users.noreply.github.com>
Date:   Wed Mar 28 20:03:34 2018 +0200

    [2.0.x] NANODLP_Z_SYNC requires linear axes (#10240)

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 98f297f13c..46a4cf826b 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -79,7 +79,7 @@ void GcodeSuite::G0_G1(
 
     #if ENABLED(NANODLP_Z_SYNC)
       #if ENABLED(NANODLP_ALL_AXIS)
-        #define _MOVE_SYNC true                 // For any move wait and output sync message
+        #define _MOVE_SYNC parser.seenval('X') || parser.seenval('Y') || parser.seenval('Z')  // For any move wait and output sync message
       #else
         #define _MOVE_SYNC parser.seenval('Z')  // Only for Z move
       #endif

commit 5595098063175645ca36141d5c050b0ff5c0fe7d
Author: robpower <dev@robpower.info>
Date:   Fri Dec 15 20:34:41 2017 +0100

    V2 Extended NanoDLP_Z_Move_Sync to G4 & G28,Added all axis option.

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 8d485e3744..98f297f13c 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -78,8 +78,12 @@ void GcodeSuite::G0_G1(
     #endif
 
     #if ENABLED(NANODLP_Z_SYNC)
-      // If G0/G1 command include Z-axis, wait for move and output sync text.
-      if (parser.seenval('Z')) {
+      #if ENABLED(NANODLP_ALL_AXIS)
+        #define _MOVE_SYNC true                 // For any move wait and output sync message
+      #else
+        #define _MOVE_SYNC parser.seenval('Z')  // Only for Z move
+      #endif
+      if (_MOVE_SYNC) {
         stepper.synchronize();
         SERIAL_ECHOLNPGM(MSG_Z_MOVE_COMP);
       }

commit ab03a31cc99f6dcead63d21e0b1c492c9f531a52
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Nov 24 14:04:14 2017 -0600

    Patch G0/G1 for NANODLP_Z_SYNC

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 5d5ceddfd3..8d485e3744 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -31,6 +31,10 @@
 
 #include "../../sd/cardreader.h"
 
+#if ENABLED(NANODLP_Z_SYNC)
+  #include "../../module/stepper.h"
+#endif
+
 extern float destination[XYZE];
 
 #if ENABLED(NO_MOTION_BEFORE_HOMING)

commit dc82babe8ec605c5514f589f6895c174c2fafbb1
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Nov 24 00:28:06 2017 -0600

    Implement NANODLP_Z_SYNC for 2.0.x

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index e3ed1ca408..5d5ceddfd3 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -72,5 +72,13 @@ void GcodeSuite::G0_G1(
     #else
       prepare_move_to_destination();
     #endif
+
+    #if ENABLED(NANODLP_Z_SYNC)
+      // If G0/G1 command include Z-axis, wait for move and output sync text.
+      if (parser.seenval('Z')) {
+        stepper.synchronize();
+        SERIAL_ECHOLNPGM(MSG_Z_MOVE_COMP);
+      }
+    #endif
   }
 }

commit 727a403ba1aa64c39998720f8e64e676238fef4d
Author: GMagician <3684609+GMagician@users.noreply.github.com>
Date:   Tue Oct 31 04:50:22 2017 +0100

    [2.0.x] Fix NO_MOTION_BEFORE_HOMING unwanted behaviour (#8176)
    
    * [2.0.x] Fix NO_MOTION_BEFORE_HOMING unwanted behaviour
    
    NO_MOTION_BEFORE_HOMING should prevent XYZ movements only when homing is not done.
    E axes should be allowed
    
    * Update G0_G1.cpp
    
    * Update G0_G1.cpp

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 1d34cb667a..e3ed1ca408 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -33,6 +33,12 @@
 
 extern float destination[XYZE];
 
+#if ENABLED(NO_MOTION_BEFORE_HOMING)
+  #define G0_G1_CONDITION !axis_unhomed_error(parser.seen('X'), parser.seen('Y'), parser.seen('Z'))
+#else
+  #define G0_G1_CONDITION true
+#endif
+
 /**
  * G0, G1: Coordinated movement of X Y Z E axes
  */
@@ -41,7 +47,7 @@ void GcodeSuite::G0_G1(
     bool fast_move/*=false*/
   #endif
 ) {
-  if (MOTION_CONDITIONS) {
+  if (IsRunning() && G0_G1_CONDITION) {
     get_destination_from_command(); // For X Y Z E F
 
     #if ENABLED(FWRETRACT)

commit 90af1fe5eefd353c9fb9c40430f45031147fd675
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Oct 1 21:34:58 2017 -0500

    Implement NO_MOTION_BEFORE_HOMING option

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index d2fe3f98b2..1d34cb667a 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -41,7 +41,7 @@ void GcodeSuite::G0_G1(
     bool fast_move/*=false*/
   #endif
 ) {
-  if (IsRunning()) {
+  if (MOTION_CONDITIONS) {
     get_destination_from_command(); // For X Y Z E F
 
     #if ENABLED(FWRETRACT)

commit a98e9874dbf24a73874ecbda86b5fe739a8223d0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Sep 7 22:40:32 2017 -0500

    FWRETRACT as a feature

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index 4ec0221e4e..d2fe3f98b2 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -25,6 +25,10 @@
 
 #include "../../Marlin.h"
 
+#if ENABLED(FWRETRACT)
+  #include "../../feature/fwretract.h"
+#endif
+
 #include "../../sd/cardreader.h"
 
 extern float destination[XYZE];
@@ -41,18 +45,20 @@ void GcodeSuite::G0_G1(
     get_destination_from_command(); // For X Y Z E F
 
     #if ENABLED(FWRETRACT)
+
       if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
         // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves
-        if (autoretract_enabled && parser.seen('E') && !(parser.seen('X') || parser.seen('Y') || parser.seen('Z'))) {
+        if (fwretract.autoretract_enabled && parser.seen('E') && !(parser.seen('X') || parser.seen('Y') || parser.seen('Z'))) {
           const float echange = destination[E_AXIS] - current_position[E_AXIS];
           // Is this a retract or recover move?
-          if (WITHIN(FABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && retracted[active_extruder] == (echange > 0.0)) {
+          if (WITHIN(FABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && fwretract.retracted[active_extruder] == (echange > 0.0)) {
             current_position[E_AXIS] = destination[E_AXIS]; // Hide a G1-based retract/recover from calculations
             sync_plan_position_e();                         // AND from the planner
-            return retract(echange < 0.0);                  // Firmware-based retract/recover (double-retract ignored)
+            return fwretract.retract(echange < 0.0);        // Firmware-based retract/recover (double-retract ignored)
           }
         }
       }
+
     #endif // FWRETRACT
 
     #if IS_SCARA

commit 722786966ad284a708502d18ac5daad02012bfc8
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Sep 7 22:33:16 2017 -0500

    Add gcode.cpp, motion.*, queue.* - Apply to some G-codes.

diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
new file mode 100644
index 0000000000..4ec0221e4e
--- /dev/null
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -0,0 +1,64 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../gcode.h"
+#include "../../module/motion.h"
+
+#include "../../Marlin.h"
+
+#include "../../sd/cardreader.h"
+
+extern float destination[XYZE];
+
+/**
+ * G0, G1: Coordinated movement of X Y Z E axes
+ */
+void GcodeSuite::G0_G1(
+  #if IS_SCARA
+    bool fast_move/*=false*/
+  #endif
+) {
+  if (IsRunning()) {
+    get_destination_from_command(); // For X Y Z E F
+
+    #if ENABLED(FWRETRACT)
+      if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
+        // When M209 Autoretract is enabled, convert E-only moves to firmware retract/recover moves
+        if (autoretract_enabled && parser.seen('E') && !(parser.seen('X') || parser.seen('Y') || parser.seen('Z'))) {
+          const float echange = destination[E_AXIS] - current_position[E_AXIS];
+          // Is this a retract or recover move?
+          if (WITHIN(FABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && retracted[active_extruder] == (echange > 0.0)) {
+            current_position[E_AXIS] = destination[E_AXIS]; // Hide a G1-based retract/recover from calculations
+            sync_plan_position_e();                         // AND from the planner
+            return retract(echange < 0.0);                  // Firmware-based retract/recover (double-retract ignored)
+          }
+        }
+      }
+    #endif // FWRETRACT
+
+    #if IS_SCARA
+      fast_move ? prepare_uninterpolated_move_to_destination() : prepare_move_to_destination();
+    #else
+      prepare_move_to_destination();
+    #endif
+  }
+}
