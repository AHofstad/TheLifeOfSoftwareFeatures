commit 87e94f456348e944ba4487aed436c762dd718966
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon Apr 1 16:05:11 2024 -0400

    üö∏ Update ProUI Plot graph - part 2 (#26563)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 8756c339e3..74a4f236c0 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -16,20 +16,22 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 /**
  * feature/pause.cpp - Pause feature support functions
  * This may be combined with related G-codes if features are consolidated.
+ *
+ * Note: Calls to ui.pause_show_message are passed to either ExtUI or MarlinUI.
  */
 
 #include "../inc/MarlinConfigPre.h"
 
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
 
 //#define DEBUG_PAUSE_RESUME
 
 #include "../MarlinCore.h"
 #include "../gcode/gcode.h"
@@ -53,22 +55,20 @@
 #if HAS_FILAMENT_SENSOR
   #include "runout.h"
 #endif
 
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "host_actions.h"
 #endif
 
 #if ENABLED(EXTENSIBLE_UI)
   #include "../lcd/extui/ui_api.h"
-#elif ENABLED(DWIN_LCD_PROUI)
-  #include "../lcd/e3v2/proui/dwin.h"
 #endif
 
 #include "../lcd/marlinui.h"
 
 #if HAS_SOUND
   #include "../libs/buzzer.h"
 #endif
 
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "powerloss.h"
@@ -141,21 +141,21 @@ static xyze_pos_t resume_position;
  */
 static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=PAUSE_MODE_SAME) {
   DEBUG_SECTION(est, "ensure_safe_temperature", true);
   DEBUG_ECHOLNPGM("... wait:", wait, " mode:", mode);
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder))
       thermalManager.setTargetHotend(thermalManager.extrude_min_temp, active_extruder);
   #endif
 
-  ui.pause_show_message(PAUSE_MESSAGE_HEATING, mode); UNUSED(mode);
+  ui.pause_show_message(PAUSE_MESSAGE_HEATING, mode);
 
   if (wait) return thermalManager.wait_for_hotend(active_extruder);
 
   // Allow interruption by Emergency Parser M108
   wait_for_heatup = TERN1(PREVENT_COLD_EXTRUSION, !thermalManager.allow_cold_extrude);
   while (wait_for_heatup && ABS(thermalManager.wholeDegHotend(active_extruder) - thermalManager.degTargetHotend(active_extruder)) > (TEMP_WINDOW))
     idle();
   wait_for_heatup = false;
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
@@ -281,22 +281,22 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
         unscaled_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       TERN_(HOST_PROMPT_SUPPORT, hostui.filament_load_prompt()); // Initiate another host prompt.
 
       #if M600_PURGE_MORE_RESUMABLE
         if (show_lcd) {
           // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
-          #if ANY(HAS_MARLINUI_MENU, DWIN_LCD_PROUI)
-            ui.pause_show_message(PAUSE_MESSAGE_OPTION); // Also sets PAUSE_RESPONSE_WAIT_FOR
+          #if ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI)
+            ui.pause_show_message(PAUSE_MESSAGE_OPTION); // MarlinUI and MKS UI also set PAUSE_RESPONSE_WAIT_FOR
           #else
             pause_menu_response = PAUSE_RESPONSE_WAIT_FOR;
           #endif
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (TERN0(M600_PURGE_MORE_RESUMABLE, pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
 

commit 6d407767e7692d66bc93a0012d71268770e4835c
Author: plampix <plampix@users.noreply.github.com>
Date:   Wed Jan 3 16:43:18 2024 +0100

    üîß CONFIGURE_FILAMENT_CHANGE - Optional M603 (#26613)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index f098ad9c51..8756c339e3 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -82,21 +82,23 @@
 
 // private:
 
 static xyze_pos_t resume_position;
 
 #if M600_PURGE_MORE_RESUMABLE
   PauseMenuResponse pause_menu_response;
   PauseMode pause_mode = PAUSE_MODE_PAUSE_PRINT;
 #endif
 
-fil_change_settings_t fc_settings[EXTRUDERS];
+#if ENABLED(CONFIGURE_FILAMENT_CHANGE)
+  fil_change_settings_t fc_settings[EXTRUDERS];
+#endif
 
 #if HAS_MEDIA
   #include "../sd/cardreader.h"
 #endif
 
 #if ENABLED(EMERGENCY_PARSER)
   #define _PMSG(L) L##_M108
 #else
   #define _PMSG(L) L##_LCD
 #endif

commit 0878b99b2cb38ffd40faa12d9e3de3bd659af205
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 30 19:21:56 2023 -0500

    üåê Language Import/Export (#25889)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 02287a51b8..f098ad9c51 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -539,21 +539,25 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.heater_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       ui.pause_show_message(PAUSE_MESSAGE_HEAT);
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
 
       TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_HEATER_TIMEOUT), GET_TEXT_F(MSG_REHEAT)));
 
-      TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_HEATER_TIMEOUT)));
+      #if ENABLED(TOUCH_UI_FTDI_EVE)
+        ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_FTDI_HEATER_TIMEOUT));
+      #elif ENABLED(EXTENSIBLE_UI)
+        ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_HEATER_TIMEOUT));
+      #endif
 
       TERN_(HAS_RESUME_CONTINUE, wait_for_user_response(0, true)); // Wait for LCD click or M108
 
       TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_INFO, GET_TEXT_F(MSG_REHEATING)));
 
       LCD_MESSAGE(MSG_REHEATING);
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 

commit 2ef71c6ebaa1f1b496eb369879fe22c69cf9adb4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jun 12 16:38:14 2023 -0500

    ‚ôªÔ∏è Simplify SERIAL_ECHO (#25928)
    
    Since this increases AVR code size, try to optimize further.

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 66f7ad15ed..02287a51b8 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -495,21 +495,21 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
  *
  * Used by M125 and M600
  */
 
 void show_continue_prompt(const bool is_reload) {
   DEBUG_SECTION(scp, "pause_print", true);
   DEBUG_ECHOLNPGM("... is_reload:", is_reload);
 
   ui.pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING);
   SERIAL_ECHO_START();
-  SERIAL_ECHOF(is_reload ? F(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : F(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
+  SERIAL_ECHO(is_reload ? F(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : F(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(wfc, "wait_for_confirmation", true);
   DEBUG_ECHOLNPGM("... is_reload:", is_reload, " maxbeep:", max_beep_count DXC_SAY);
 
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 

commit 6136e48df5c8e2aee3447b99beb8464231895b69
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Sat Jun 3 23:09:29 2023 +0200

    üêõ Fix M25/M125 for LCDs with ui.resume_print (#24877)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 6e57f6e2dc..66f7ad15ed 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -395,22 +395,20 @@ bool unload_filament(const_float_t unload_length, const bool show_lcd/*=false*/,
  * - Call unload_filament (if a length was specified)
  *
  * Return 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
 bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool show_lcd/*=false*/, const_float_t unload_length/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(pp, "pause_print", true);
   DEBUG_ECHOLNPGM("... park.x:", park_point.x, " y:", park_point.y, " z:", park_point.z, " unloadlen:", unload_length, " showlcd:", show_lcd DXC_SAY);
 
-  UNUSED(show_lcd);
-
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       hostui.paused();
     #elif defined(ACTION_ON_PAUSE)
       hostui.pause();
     #endif
   #endif
 

commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    üßë‚Äçüíª Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 504a9f61c7..6e57f6e2dc 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -203,21 +203,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_FILAMENTLOAD)));
 
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0' + TERN0(MULTI_FILAMENT_SENSOR, active_extruder);
       hostui.prompt_do(PROMPT_USER_CONTINUE, F("Load Filament T"), tool, FPSTR(CONTINUE_STR));
     #endif
 
     while (wait_for_user) {
       impatient_beep(max_beep_count);
-      #if BOTH(FILAMENT_CHANGE_RESUME_ON_INSERT, FILAMENT_RUNOUT_SENSOR)
+      #if ALL(FILAMENT_CHANGE_RESUME_ON_INSERT, FILAMENT_RUNOUT_SENSOR)
         #if MULTI_FILAMENT_SENSOR
           #define _CASE_INSERTED(N) case N-1: if (READ(FIL_RUNOUT##N##_PIN) != FIL_RUNOUT##N##_STATE) wait_for_user = false; break;
           switch (active_extruder) {
             REPEAT_1(NUM_RUNOUT_SENSORS, _CASE_INSERTED)
           }
         #else
           if (READ(FIL_RUNOUT_PIN) != FIL_RUNOUT_STATE) wait_for_user = false;
         #endif
       #endif
       idle_no_sleep();
@@ -279,21 +279,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
         unscaled_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       TERN_(HOST_PROMPT_SUPPORT, hostui.filament_load_prompt()); // Initiate another host prompt.
 
       #if M600_PURGE_MORE_RESUMABLE
         if (show_lcd) {
           // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
-          #if EITHER(HAS_MARLINUI_MENU, DWIN_LCD_PROUI)
+          #if ANY(HAS_MARLINUI_MENU, DWIN_LCD_PROUI)
             ui.pause_show_message(PAUSE_MESSAGE_OPTION); // Also sets PAUSE_RESPONSE_WAIT_FOR
           #else
             pause_menu_response = PAUSE_RESPONSE_WAIT_FOR;
           #endif
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (TERN0(M600_PURGE_MORE_RESUMABLE, pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
@@ -324,32 +324,32 @@ inline void disable_active_extruder() {
  *
  * - Fail if the a safe temperature was not reached
  * - Show "wait for unload" placard
  * - Retract, pause, then unload filament
  * - Disable E stepper (on most machines)
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
 bool unload_filament(const_float_t unload_length, const bool show_lcd/*=false*/,
                      const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
-                     #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
+                     #if ALL(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
                        , const_float_t mix_multiplier/*=1.0*/
                      #endif
 ) {
   DEBUG_SECTION(uf, "unload_filament", true);
   DEBUG_ECHOLNPGM("... unloadlen:", unload_length, " showlcd:", show_lcd, " mode:", mode
-    #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
+    #if ALL(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
       , " mixmult:", mix_multiplier
     #endif
   );
 
-  #if !BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
+  #if !ALL(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
     constexpr float mix_multiplier = 1.0f;
   #endif
 
   if (!ensure_safe_temperature(false, mode)) {
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_STATUS);
     return false;
   }
 
   if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_UNLOAD, mode);
 
@@ -438,21 +438,21 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
 
   #if ENABLED(POWER_LOSS_RECOVERY)
     // Save PLR info in case the power goes out while parked
     const float park_raise = do_park ? nozzle.park_mode_0_height(park_point.z) - current_position.z : POWER_LOSS_ZRAISE;
     if (was_sd_printing && recovery.enabled) recovery.save(true, park_raise, do_park);
   #endif
 
   // Wait for buffered blocks to complete
   planner.synchronize();
 
-  #if BOTH(ADVANCED_PAUSE_FANS_PAUSE, HAS_FAN)
+  #if ALL(ADVANCED_PAUSE_FANS_PAUSE, HAS_FAN)
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder)) {
     DEBUG_ECHOLNPGM("... retract:", retract);
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       const bool leveling_was_enabled = planner.leveling_active; // save leveling state
       set_bed_leveling_enabled(false);  // turn off leveling

commit 4812ed5053983212c9ec8a6229a150a1af7822f1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon May 1 18:45:42 2023 -0500

    üé® Misc. code cleanup

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 7b814e57f7..504a9f61c7 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -438,21 +438,21 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
 
   #if ENABLED(POWER_LOSS_RECOVERY)
     // Save PLR info in case the power goes out while parked
     const float park_raise = do_park ? nozzle.park_mode_0_height(park_point.z) - current_position.z : POWER_LOSS_ZRAISE;
     if (was_sd_printing && recovery.enabled) recovery.save(true, park_raise, do_park);
   #endif
 
   // Wait for buffered blocks to complete
   planner.synchronize();
 
-  #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
+  #if BOTH(ADVANCED_PAUSE_FANS_PAUSE, HAS_FAN)
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder)) {
     DEBUG_ECHOLNPGM("... retract:", retract);
 
     #if ENABLED(AUTO_BED_LEVELING_UBL)
       const bool leveling_was_enabled = planner.leveling_active; // save leveling state
       set_bed_leveling_enabled(false);  // turn off leveling

commit 5664c02d077e028f84a24efd96c2eebe97ce8763
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 22:43:09 2023 -0500

    üßë‚Äçüíª Generalize SDSUPPORT as HAS_MEDIA
    
    In preparation for single- and multi-volume refactoring.

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 35d1fd79f9..7b814e57f7 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -84,21 +84,21 @@
 
 static xyze_pos_t resume_position;
 
 #if M600_PURGE_MORE_RESUMABLE
   PauseMenuResponse pause_menu_response;
   PauseMode pause_mode = PAUSE_MODE_PAUSE_PRINT;
 #endif
 
 fil_change_settings_t fc_settings[EXTRUDERS];
 
-#if ENABLED(SDSUPPORT)
+#if HAS_MEDIA
   #include "../sd/cardreader.h"
 #endif
 
 #if ENABLED(EMERGENCY_PARSER)
   #define _PMSG(L) L##_M108
 #else
   #define _PMSG(L) L##_LCD
 #endif
 
 #if HAS_SOUND
@@ -413,21 +413,21 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
       hostui.pause();
     #endif
   #endif
 
   TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_open(PROMPT_INFO, F("Pause"), FPSTR(DISMISS_STR)));
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     const bool was_sd_printing = IS_SD_PRINTING();
     if (was_sd_printing) {
       card.pauseSDPrint();
       ++did_pause_print; // Indicate SD pause also
     }
   #endif
 
   print_job_timer.pause();
 
   // Save current position
@@ -694,21 +694,21 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
     hostui.resume();
   #endif
 
   --did_pause_print;
 
   TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_open(PROMPT_INFO, F("Resuming"), FPSTR(DISMISS_STR)));
 
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     if (did_pause_print) {
       --did_pause_print;
       card.startOrResumeFilePrinting();
       // Write PLR now to update the z axis value
       TERN_(POWER_LOSS_RECOVERY, if (recovery.enabled) recovery.save(true));
     }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(false);

commit 78bdf34b7bc56a0a8aa193cfd824ad2841ed25dc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 14 18:06:56 2023 -0500

    üßë‚Äçüíª HostUI::continue_prompt method

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 9e0f51fad6..35d1fd79f9 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -255,21 +255,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE)));
-    TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE), FPSTR(CONTINUE_STR)));
+    TERN_(HOST_PROMPT_SUPPORT, hostui.continue_prompt(GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE)));
     wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       unscaled_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
@@ -523,21 +523,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
   HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
-  TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_NOZZLE_PARKED), FPSTR(CONTINUE_STR)));
+  TERN_(HOST_PROMPT_SUPPORT, hostui.continue_prompt(GET_TEXT_F(MSG_NOZZLE_PARKED)));
   TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_NOZZLE_PARKED)));
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
     impatient_beep(max_beep_count);
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.heater_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
@@ -563,21 +563,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       ensure_safe_temperature(false);
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
-      TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_REHEATDONE), FPSTR(CONTINUE_STR)));
+      TERN_(HOST_PROMPT_SUPPORT, hostui.continue_prompt(GET_TEXT_F(MSG_REHEATDONE)));
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_REHEATDONE));
       #else
         LCD_MESSAGE(MSG_REHEATDONE);
       #endif
 
       IF_DISABLED(PAUSE_REHEAT_FAST_RESUME, wait_for_user = true);
 
       nozzle_timed_out = false;
       first_impatient_beep(max_beep_count);

commit 9a1c02591ba4c3d5b41f4c64edd819ea1860b75b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 14 17:51:45 2023 -0500

    üßë‚Äçüíª Status Message cleanup

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 488f5920c2..9e0f51fad6 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -194,21 +194,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
 
   if (pause_for_user) {
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
     first_impatient_beep(max_beep_count);
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
 
-    TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(F("Load Filament")));
+    TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_FILAMENTLOAD)));
 
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0' + TERN0(MULTI_FILAMENT_SENSOR, active_extruder);
       hostui.prompt_do(PROMPT_USER_CONTINUE, F("Load Filament T"), tool, FPSTR(CONTINUE_STR));
     #endif
 
     while (wait_for_user) {
       impatient_beep(max_beep_count);
       #if BOTH(FILAMENT_CHANGE_RESUME_ON_INSERT, FILAMENT_RUNOUT_SENSOR)
         #if MULTI_FILAMENT_SENSOR
@@ -458,21 +458,21 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
       set_bed_leveling_enabled(false);  // turn off leveling
     #endif
 
     unscaled_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
     TERN_(AUTO_BED_LEVELING_UBL, set_bed_leveling_enabled(leveling_was_enabled)); // restore leveling
   }
 
   // If axes don't need to home then the nozzle can park
   if (do_park) nozzle.park(0, park_point); // Park the nozzle by doing a Minimum Z Raise followed by an XY Move
-  TERN_(DWIN_LCD_PROUI, if (!do_park) ui.set_status(GET_TEXT_F(MSG_PARK_FAILED)));
+  if (!do_park) LCD_MESSAGE(MSG_PARK_FAILED);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
 
   // Unload the filament, if specified
   if (unload_length)
     unload_filament(unload_length, show_lcd, PAUSE_MODE_CHANGE_FILAMENT);
@@ -547,41 +547,42 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
 
       TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_HEATER_TIMEOUT), GET_TEXT_F(MSG_REHEAT)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_HEATER_TIMEOUT)));
 
       TERN_(HAS_RESUME_CONTINUE, wait_for_user_response(0, true)); // Wait for LCD click or M108
 
       TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_INFO, GET_TEXT_F(MSG_REHEATING)));
 
-      TERN_(EXTENSIBLE_UI, ExtUI::onStatusChanged(GET_TEXT_F(MSG_REHEATING)));
-
-      TERN_(DWIN_LCD_PROUI, LCD_MESSAGE(MSG_REHEATING));
+      LCD_MESSAGE(MSG_REHEATING);
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature(false);
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
       TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_REHEATDONE), FPSTR(CONTINUE_STR)));
-      TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_REHEATDONE)));
-      TERN_(DWIN_LCD_PROUI, LCD_MESSAGE(MSG_REHEATDONE));
+      #if ENABLED(EXTENSIBLE_UI)
+        ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_REHEATDONE));
+      #else
+        LCD_MESSAGE(MSG_REHEATDONE);
+      #endif
 
       IF_DISABLED(PAUSE_REHEAT_FAST_RESUME, wait_for_user = true);
 
       nozzle_timed_out = false;
       first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
   TERN_(DUAL_X_CARRIAGE, set_duplication_enabled(saved_ext_dup_mode, saved_ext));
 }

commit fbb1c82bc2acbbe3339e2283a797126b3c3ea515
Author: Piotr Paczy≈Ñski <ppaczyn@gmail.com>
Date:   Sat Mar 18 11:01:10 2023 +0100

    üêõ Prevent MPC E-permm overrun in Load Filament (#25531)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 83d149fa09..488f5920c2 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -227,20 +227,22 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
   if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_LOAD, mode);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
 
   TERN_(BELTPRINTER, do_blocking_move_to_xy(0.00, 50.00));
 
+  TERN_(MPCTEMP, MPC::e_paused = true);
+
   // Slow Load filament
   if (slow_load_length) unscaled_e_move(slow_load_length, FILAMENT_CHANGE_SLOW_LOAD_FEEDRATE);
 
   // Fast Load Filament
   if (fast_load_length) {
     #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
       const float saved_acceleration = planner.settings.retract_acceleration;
       planner.settings.retract_acceleration = FILAMENT_CHANGE_FAST_LOAD_ACCEL;
     #endif
 
@@ -290,20 +292,23 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
             pause_menu_response = PAUSE_RESPONSE_WAIT_FOR;
           #endif
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (TERN0(M600_PURGE_MORE_RESUMABLE, pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
 
   #endif
+
+  TERN_(MPCTEMP, MPC::e_paused = false);
+
   TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_end());
 
   return true;
 }
 
 /**
  * Disabling E steppers for manual filament change should be fine
  * as long as users don't spin the E motor ridiculously fast and
  * send current back to their board, potentially frying it.
  */

commit c66b3cf8a429c427c014f33171407c634da735f1
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Sun Jan 8 04:22:21 2023 -0500

    üö∏ ProUI updates (#25176)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 83cb66fae4..83d149fa09 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -403,21 +403,20 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       hostui.paused();
     #elif defined(ACTION_ON_PAUSE)
       hostui.pause();
     #endif
   #endif
 
   TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_open(PROMPT_INFO, F("Pause"), FPSTR(DISMISS_STR)));
-  TERN_(DWIN_LCD_PROUI, DWIN_Print_Pause());
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)
     const bool was_sd_printing = IS_SD_PRINTING();
     if (was_sd_printing) {
       card.pauseSDPrint();
       ++did_pause_print; // Indicate SD pause also
@@ -454,20 +453,21 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
       set_bed_leveling_enabled(false);  // turn off leveling
     #endif
 
     unscaled_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
     TERN_(AUTO_BED_LEVELING_UBL, set_bed_leveling_enabled(leveling_was_enabled)); // restore leveling
   }
 
   // If axes don't need to home then the nozzle can park
   if (do_park) nozzle.park(0, park_point); // Park the nozzle by doing a Minimum Z Raise followed by an XY Move
+  TERN_(DWIN_LCD_PROUI, if (!do_park) ui.set_status(GET_TEXT_F(MSG_PARK_FAILED)));
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
 
   // Unload the filament, if specified
   if (unload_length)
     unload_filament(unload_length, show_lcd, PAUSE_MODE_CHANGE_FILAMENT);
@@ -703,20 +703,15 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
       TERN_(POWER_LOSS_RECOVERY, if (recovery.enabled) recovery.save(true));
     }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(false);
   #endif
 
   TERN_(HAS_FILAMENT_SENSOR, runout.reset());
 
-  #if ENABLED(DWIN_LCD_PROUI)
-    DWIN_Print_Resume();
-    HMI_ReturnScreen();
-  #else
-    ui.reset_status();
-    ui.return_to_status();
-  #endif
+  ui.reset_status();
+  ui.return_to_status();
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit e60a7d8292b48f11a9f1d62e2f15cef94de0a205
Author: Ashley 'DrToxic' Devine <41945324+DrToxic@users.noreply.github.com>
Date:   Thu Jan 5 23:06:35 2023 +0000

    üé® Misc. cleanup (#25194)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 91d25d7187..83cb66fae4 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -204,21 +204,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(F("Load Filament")));
 
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0' + TERN0(MULTI_FILAMENT_SENSOR, active_extruder);
       hostui.prompt_do(PROMPT_USER_CONTINUE, F("Load Filament T"), tool, FPSTR(CONTINUE_STR));
     #endif
 
     while (wait_for_user) {
       impatient_beep(max_beep_count);
       #if BOTH(FILAMENT_CHANGE_RESUME_ON_INSERT, FILAMENT_RUNOUT_SENSOR)
-        #if ENABLED(MULTI_FILAMENT_SENSOR)
+        #if MULTI_FILAMENT_SENSOR
           #define _CASE_INSERTED(N) case N-1: if (READ(FIL_RUNOUT##N##_PIN) != FIL_RUNOUT##N##_STATE) wait_for_user = false; break;
           switch (active_extruder) {
             REPEAT_1(NUM_RUNOUT_SENSORS, _CASE_INSERTED)
           }
         #else
           if (READ(FIL_RUNOUT_PIN) != FIL_RUNOUT_STATE) wait_for_user = false;
         #endif
       #endif
       idle_no_sleep();
     }

commit b6794f6a7e076d3276a3589dbcd4ebc3eea1a44e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Dec 1 23:39:17 2022 -0600

    üé® Misc. cleanup

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 1c2ea59d4d..91d25d7187 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -465,23 +465,21 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
 
   // Unload the filament, if specified
   if (unload_length)
     unload_filament(unload_length, show_lcd, PAUSE_MODE_CHANGE_FILAMENT);
 
-  #if ENABLED(DUAL_X_CARRIAGE)
-    set_duplication_enabled(saved_ext_dup_mode, saved_ext);
-  #endif
+  TERN_(DUAL_X_CARRIAGE, set_duplication_enabled(saved_ext_dup_mode, saved_ext));
 
   // Disable the Extruder for manual change
   disable_active_extruder();
 
   return true;
 }
 
 /**
  * For Paused Print:
  * - Show "Press button (or M108) to resume"
@@ -573,23 +571,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_REHEATDONE)));
       TERN_(DWIN_LCD_PROUI, LCD_MESSAGE(MSG_REHEATDONE));
 
       IF_DISABLED(PAUSE_REHEAT_FAST_RESUME, wait_for_user = true);
 
       nozzle_timed_out = false;
       first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
-  #if ENABLED(DUAL_X_CARRIAGE)
-    set_duplication_enabled(saved_ext_dup_mode, saved_ext);
-  #endif
+  TERN_(DUAL_X_CARRIAGE, set_duplication_enabled(saved_ext_dup_mode, saved_ext));
 }
 
 /**
  * Resume or Start print procedure
  *
  * - If not paused, do nothing and return
  * - Reset heater idle timers
  * - Load filament if specified, but only if:
  *   - a nozzle timed out, or
  *   - the nozzle is already heated.

commit 21c48d9f927c81d7b7cf6fc3641ce01a831a16ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jul 27 04:24:50 2022 -0500

    üßë‚Äçüíª  Update planner/stepper includes

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 78572b0795..1c2ea59d4d 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -28,24 +28,27 @@
 #include "../inc/MarlinConfigPre.h"
 
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
 
 //#define DEBUG_PAUSE_RESUME
 
 #include "../MarlinCore.h"
 #include "../gcode/gcode.h"
 #include "../module/motion.h"
 #include "../module/planner.h"
-#include "../module/stepper.h"
 #include "../module/printcounter.h"
 #include "../module/temperature.h"
 
+#if HAS_EXTRUDERS
+  #include "../module/stepper.h"
+#endif
+
 #if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "bedlevel/bedlevel.h"
 #endif
 
 #if ENABLED(FWRETRACT)
   #include "fwretract.h"
 #endif
 
 #if HAS_FILAMENT_SENSOR
   #include "runout.h"

commit 5f2908a117ab45cf9e5a03a39e499979a40bf0f3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 18 19:53:36 2022 -0500

    ‚ôªÔ∏è Small sound / buzz refactor (#24520)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index e9cb2df594..78572b0795 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -56,21 +56,21 @@
 #endif
 
 #if ENABLED(EXTENSIBLE_UI)
   #include "../lcd/extui/ui_api.h"
 #elif ENABLED(DWIN_LCD_PROUI)
   #include "../lcd/e3v2/proui/dwin.h"
 #endif
 
 #include "../lcd/marlinui.h"
 
-#if HAS_BUZZER
+#if HAS_SOUND
   #include "../libs/buzzer.h"
 #endif
 
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "powerloss.h"
 #endif
 
 #include "../libs/nozzle.h"
 #include "pause.h"
 
@@ -91,21 +91,21 @@ fil_change_settings_t fc_settings[EXTRUDERS];
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
 
 #if ENABLED(EMERGENCY_PARSER)
   #define _PMSG(L) L##_M108
 #else
   #define _PMSG(L) L##_LCD
 #endif
 
-#if HAS_BUZZER
+#if HAS_SOUND
   static void impatient_beep(const int8_t max_beep_count, const bool restart=false) {
 
     if (TERN0(HAS_MARLINUI_MENU, pause_mode == PAUSE_MODE_PAUSE_PRINT)) return;
 
     static millis_t next_buzz = 0;
     static int8_t runout_beep = 0;
 
     if (restart) next_buzz = runout_beep = 0;
 
     const bool always = max_beep_count < 0;

commit 58d1b1be289a6e51a36f8a8b2d24baa59a99e9ff
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Wed Jun 22 22:08:24 2022 +1200

    ü©π Fix DGUS (MKS) compile (#24378)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index ac5852f91a..e9cb2df594 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -704,16 +704,20 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
       TERN_(POWER_LOSS_RECOVERY, if (recovery.enabled) recovery.save(true));
     }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(false);
   #endif
 
   TERN_(HAS_FILAMENT_SENSOR, runout.reset());
 
-  TERN(DWIN_LCD_PROUI, DWIN_Print_Resume(), ui.reset_status());
-  TERN_(HAS_MARLINUI_MENU, ui.return_to_status());
-  TERN_(DWIN_LCD_PROUI, HMI_ReturnScreen());
+  #if ENABLED(DWIN_LCD_PROUI)
+    DWIN_Print_Resume();
+    HMI_ReturnScreen();
+  #else
+    ui.reset_status();
+    ui.return_to_status();
+  #endif
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit f31d3c67496ff0ea3937a727539db12be4ee4675
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 10 06:31:39 2022 -0500

    ü©π Fix ADVANCED_PAUSE_RESUME_PRIME check
    
    Fixes #23824

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 636ac32042..ac5852f91a 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -665,22 +665,23 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       unscaled_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
   if (resume_position.e < 0) unscaled_e_move(resume_position.e, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
-  #if ADVANCED_PAUSE_RESUME_PRIME != 0
-    unscaled_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
+  #ifdef ADVANCED_PAUSE_RESUME_PRIME
+    if (ADVANCED_PAUSE_RESUME_PRIME != 0)
+      unscaled_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
   #endif
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination.e = current_position.e = resume_position.e));
 
   ui.pause_show_message(PAUSE_MESSAGE_STATUS);
 
   #ifdef ACTION_ON_RESUMED
     hostui.resumed();

commit 79b38e0e14074b52e0aeb98b08a686a99a9b1aad
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Fri Mar 11 15:06:49 2022 -0500

    üö∏ Update Ender3 V2/S1 Pro UI (#23878)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 79780021cf..636ac32042 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -400,20 +400,21 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       hostui.paused();
     #elif defined(ACTION_ON_PAUSE)
       hostui.pause();
     #endif
   #endif
 
   TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_open(PROMPT_INFO, F("Pause"), FPSTR(DISMISS_STR)));
+  TERN_(DWIN_LCD_PROUI, DWIN_Print_Pause());
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)
     const bool was_sd_printing = IS_SD_PRINTING();
     if (was_sd_printing) {
       card.pauseSDPrint();
       ++did_pause_print; // Indicate SD pause also
@@ -702,16 +703,16 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
       TERN_(POWER_LOSS_RECOVERY, if (recovery.enabled) recovery.save(true));
     }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(false);
   #endif
 
   TERN_(HAS_FILAMENT_SENSOR, runout.reset());
 
-  TERN_(HAS_STATUS_MESSAGE, ui.reset_status());
+  TERN(DWIN_LCD_PROUI, DWIN_Print_Resume(), ui.reset_status());
   TERN_(HAS_MARLINUI_MENU, ui.return_to_status());
   TERN_(DWIN_LCD_PROUI, HMI_ReturnScreen());
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit 48b5362cf02ff12c9e9fc4d5825ceebe457ea34b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Mar 10 22:07:47 2022 -0600

    üîß DWIN_CREALITY_LCD_ENHANCED => DWIN_LCD_PROUI
    
    Followup to #23624

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 69c25cbe33..79780021cf 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -50,21 +50,21 @@
 #if HAS_FILAMENT_SENSOR
   #include "runout.h"
 #endif
 
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "host_actions.h"
 #endif
 
 #if ENABLED(EXTENSIBLE_UI)
   #include "../lcd/extui/ui_api.h"
-#elif ENABLED(DWIN_CREALITY_LCD_ENHANCED)
+#elif ENABLED(DWIN_LCD_PROUI)
   #include "../lcd/e3v2/proui/dwin.h"
 #endif
 
 #include "../lcd/marlinui.h"
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #if ENABLED(POWER_LOSS_RECOVERY)
@@ -274,21 +274,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
         unscaled_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       TERN_(HOST_PROMPT_SUPPORT, hostui.filament_load_prompt()); // Initiate another host prompt.
 
       #if M600_PURGE_MORE_RESUMABLE
         if (show_lcd) {
           // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
-          #if EITHER(HAS_MARLINUI_MENU, DWIN_CREALITY_LCD_ENHANCED)
+          #if EITHER(HAS_MARLINUI_MENU, DWIN_LCD_PROUI)
             ui.pause_show_message(PAUSE_MESSAGE_OPTION); // Also sets PAUSE_RESPONSE_WAIT_FOR
           #else
             pause_menu_response = PAUSE_RESPONSE_WAIT_FOR;
           #endif
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (TERN0(M600_PURGE_MORE_RESUMABLE, pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
@@ -542,39 +542,39 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_HEATER_TIMEOUT), GET_TEXT_F(MSG_REHEAT)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_HEATER_TIMEOUT)));
 
       TERN_(HAS_RESUME_CONTINUE, wait_for_user_response(0, true)); // Wait for LCD click or M108
 
       TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_INFO, GET_TEXT_F(MSG_REHEATING)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onStatusChanged(GET_TEXT_F(MSG_REHEATING)));
 
-      TERN_(DWIN_CREALITY_LCD_ENHANCED, LCD_MESSAGE(MSG_REHEATING));
+      TERN_(DWIN_LCD_PROUI, LCD_MESSAGE(MSG_REHEATING));
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature(false);
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
       TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_REHEATDONE), FPSTR(CONTINUE_STR)));
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_REHEATDONE)));
-      TERN_(DWIN_CREALITY_LCD_ENHANCED, LCD_MESSAGE(MSG_REHEATDONE));
+      TERN_(DWIN_LCD_PROUI, LCD_MESSAGE(MSG_REHEATDONE));
 
       IF_DISABLED(PAUSE_REHEAT_FAST_RESUME, wait_for_user = true);
 
       nozzle_timed_out = false;
       first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
   #if ENABLED(DUAL_X_CARRIAGE)
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
@@ -704,14 +704,14 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(false);
   #endif
 
   TERN_(HAS_FILAMENT_SENSOR, runout.reset());
 
   TERN_(HAS_STATUS_MESSAGE, ui.reset_status());
   TERN_(HAS_MARLINUI_MENU, ui.return_to_status());
-  TERN_(DWIN_CREALITY_LCD_ENHANCED, HMI_ReturnScreen());
+  TERN_(DWIN_LCD_PROUI, HMI_ReturnScreen());
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit 0564cb188f1a74dc9ecfb55b793f4225424a9ca4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 5 10:30:17 2022 -0600

    üö∏ Enhanced UI => Professional UI - with updates (#23624)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 147164c166..69c25cbe33 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -51,21 +51,21 @@
   #include "runout.h"
 #endif
 
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "host_actions.h"
 #endif
 
 #if ENABLED(EXTENSIBLE_UI)
   #include "../lcd/extui/ui_api.h"
 #elif ENABLED(DWIN_CREALITY_LCD_ENHANCED)
-  #include "../lcd/e3v2/enhanced/dwin.h"
+  #include "../lcd/e3v2/proui/dwin.h"
 #endif
 
 #include "../lcd/marlinui.h"
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "powerloss.h"

commit 668020777f73231f27da1c09de68b04305e10d9c
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Fri Feb 4 19:00:35 2022 -0600

    ü©π Prevent Z error with UBL + Park unscaled E move (#23568)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 08f540f2ee..147164c166 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -32,20 +32,24 @@
 //#define DEBUG_PAUSE_RESUME
 
 #include "../MarlinCore.h"
 #include "../gcode/gcode.h"
 #include "../module/motion.h"
 #include "../module/planner.h"
 #include "../module/stepper.h"
 #include "../module/printcounter.h"
 #include "../module/temperature.h"
 
+#if ENABLED(AUTO_BED_LEVELING_UBL)
+  #include "bedlevel/bedlevel.h"
+#endif
+
 #if ENABLED(FWRETRACT)
   #include "fwretract.h"
 #endif
 
 #if HAS_FILAMENT_SENSOR
   #include "runout.h"
 #endif
 
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "host_actions.h"
@@ -433,21 +437,29 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
   // Wait for buffered blocks to complete
   planner.synchronize();
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder)) {
     DEBUG_ECHOLNPGM("... retract:", retract);
+
+    #if ENABLED(AUTO_BED_LEVELING_UBL)
+      const bool leveling_was_enabled = planner.leveling_active; // save leveling state
+      set_bed_leveling_enabled(false);  // turn off leveling
+    #endif
+
     unscaled_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
+
+    TERN_(AUTO_BED_LEVELING_UBL, set_bed_leveling_enabled(leveling_was_enabled)); // restore leveling
   }
 
   // If axes don't need to home then the nozzle can park
   if (do_park) nozzle.park(0, park_point); // Park the nozzle by doing a Minimum Z Raise followed by an XY Move
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
@@ -633,23 +645,30 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
   if (!axes_should_home()) {
     // Move XY back to saved position
     destination.set(resume_position.x, resume_position.y, current_position.z, current_position.e);
     prepare_internal_move_to_destination(NOZZLE_PARK_XY_FEEDRATE);
 
     // Move Z back to saved position
     destination.z = resume_position.z;
     prepare_internal_move_to_destination(NOZZLE_PARK_Z_FEEDRATE);
   }
 
+  #if ENABLED(AUTO_BED_LEVELING_UBL)
+    const bool leveling_was_enabled = planner.leveling_active; // save leveling state
+    set_bed_leveling_enabled(false);  // turn off leveling
+  #endif
+
   // Unretract
   unscaled_e_move(PAUSE_PARK_RETRACT_LENGTH, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
+  TERN_(AUTO_BED_LEVELING_UBL, set_bed_leveling_enabled(leveling_was_enabled)); // restore leveling
+
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       unscaled_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
   if (resume_position.e < 0) unscaled_e_move(resume_position.e, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
   #if ADVANCED_PAUSE_RESUME_PRIME != 0

commit ab46b7e2f298826a5512569d6e79bb59a7a6b8ea
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jan 25 15:33:03 2022 -0600

    üßë‚Äçüíª HAS_MARLINUI_MENU, HAS_MANUAL_MOVE_MENU

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 191c0e4b08..08f540f2ee 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -90,21 +90,21 @@ fil_change_settings_t fc_settings[EXTRUDERS];
 
 #if ENABLED(EMERGENCY_PARSER)
   #define _PMSG(L) L##_M108
 #else
   #define _PMSG(L) L##_LCD
 #endif
 
 #if HAS_BUZZER
   static void impatient_beep(const int8_t max_beep_count, const bool restart=false) {
 
-    if (TERN0(HAS_LCD_MENU, pause_mode == PAUSE_MODE_PAUSE_PRINT)) return;
+    if (TERN0(HAS_MARLINUI_MENU, pause_mode == PAUSE_MODE_PAUSE_PRINT)) return;
 
     static millis_t next_buzz = 0;
     static int8_t runout_beep = 0;
 
     if (restart) next_buzz = runout_beep = 0;
 
     const bool always = max_beep_count < 0;
 
     const millis_t ms = millis();
     if (ELAPSED(ms, next_buzz)) {
@@ -270,21 +270,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
         unscaled_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       TERN_(HOST_PROMPT_SUPPORT, hostui.filament_load_prompt()); // Initiate another host prompt.
 
       #if M600_PURGE_MORE_RESUMABLE
         if (show_lcd) {
           // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
-          #if EITHER(HAS_LCD_MENU, DWIN_CREALITY_LCD_ENHANCED)
+          #if EITHER(HAS_MARLINUI_MENU, DWIN_CREALITY_LCD_ENHANCED)
             ui.pause_show_message(PAUSE_MESSAGE_OPTION); // Also sets PAUSE_RESPONSE_WAIT_FOR
           #else
             pause_menu_response = PAUSE_RESPONSE_WAIT_FOR;
           #endif
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (TERN0(M600_PURGE_MORE_RESUMABLE, pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
@@ -684,15 +684,15 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
     }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(false);
   #endif
 
   TERN_(HAS_FILAMENT_SENSOR, runout.reset());
 
   TERN_(HAS_STATUS_MESSAGE, ui.reset_status());
-  TERN_(HAS_LCD_MENU, ui.return_to_status());
+  TERN_(HAS_MARLINUI_MENU, ui.return_to_status());
   TERN_(DWIN_CREALITY_LCD_ENHANCED, HMI_ReturnScreen());
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit 589a6d7f6bbf2254958aa92d8707c51fcbcd8dd3
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Wed Nov 10 11:55:20 2021 -0500

    üö∏ Fix up E3V2 Enhanced (#23100)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index d97ac2a0ac..191c0e4b08 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -247,21 +247,20 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE)));
     TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE), FPSTR(CONTINUE_STR)));
-    TERN_(DWIN_CREALITY_LCD_ENHANCED, DWIN_Popup_Confirm(ICON_BLTouch, GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE), FPSTR(CONTINUE_STR)));
     wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       unscaled_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"

commit ee28a14e8e7f6b33fe5813dbedcd85380207c345
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Oct 15 00:24:08 2021 -0500

    üé® Refactor Host Actions as singleton

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 643c4ef9fc..d97ac2a0ac 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -191,21 +191,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
 
     first_impatient_beep(max_beep_count);
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(F("Load Filament")));
 
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0' + TERN0(MULTI_FILAMENT_SENSOR, active_extruder);
-      host_prompt_do(PROMPT_USER_CONTINUE, F("Load Filament T"), tool, FPSTR(CONTINUE_STR));
+      hostui.prompt_do(PROMPT_USER_CONTINUE, F("Load Filament T"), tool, FPSTR(CONTINUE_STR));
     #endif
 
     while (wait_for_user) {
       impatient_beep(max_beep_count);
       #if BOTH(FILAMENT_CHANGE_RESUME_ON_INSERT, FILAMENT_RUNOUT_SENSOR)
         #if ENABLED(MULTI_FILAMENT_SENSOR)
           #define _CASE_INSERTED(N) case N-1: if (READ(FIL_RUNOUT##N##_PIN) != FIL_RUNOUT##N##_STATE) wait_for_user = false; break;
           switch (active_extruder) {
             REPEAT_1(NUM_RUNOUT_SENSORS, _CASE_INSERTED)
           }
@@ -246,59 +246,59 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE)));
-    TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE), FPSTR(CONTINUE_STR)));
+    TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE), FPSTR(CONTINUE_STR)));
     TERN_(DWIN_CREALITY_LCD_ENHANCED, DWIN_Popup_Confirm(ICON_BLTouch, GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE), FPSTR(CONTINUE_STR)));
     wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       unscaled_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
         if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
         // Extrude filament to get into hotend
         unscaled_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
-      TERN_(HOST_PROMPT_SUPPORT, filament_load_host_prompt()); // Initiate another host prompt.
+      TERN_(HOST_PROMPT_SUPPORT, hostui.filament_load_prompt()); // Initiate another host prompt.
 
       #if M600_PURGE_MORE_RESUMABLE
         if (show_lcd) {
           // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
           #if EITHER(HAS_LCD_MENU, DWIN_CREALITY_LCD_ENHANCED)
             ui.pause_show_message(PAUSE_MESSAGE_OPTION); // Also sets PAUSE_RESPONSE_WAIT_FOR
           #else
             pause_menu_response = PAUSE_RESPONSE_WAIT_FOR;
           #endif
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (TERN0(M600_PURGE_MORE_RESUMABLE, pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
 
   #endif
-  TERN_(HOST_PROMPT_SUPPORT, host_action_prompt_end());
+  TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_end());
 
   return true;
 }
 
 /**
  * Disabling E steppers for manual filament change should be fine
  * as long as users don't spin the E motor ridiculously fast and
  * send current back to their board, potentially frying it.
  */
 inline void disable_active_extruder() {
@@ -390,27 +390,27 @@ uint8_t did_pause_print = 0;
 bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool show_lcd/*=false*/, const_float_t unload_length/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(pp, "pause_print", true);
   DEBUG_ECHOLNPGM("... park.x:", park_point.x, " y:", park_point.y, " z:", park_point.z, " unloadlen:", unload_length, " showlcd:", show_lcd DXC_SAY);
 
   UNUSED(show_lcd);
 
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
-      host_action_paused();
+      hostui.paused();
     #elif defined(ACTION_ON_PAUSE)
-      host_action_pause();
+      hostui.pause();
     #endif
   #endif
 
-  TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, F("Pause"), FPSTR(DISMISS_STR)));
+  TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_open(PROMPT_INFO, F("Pause"), FPSTR(DISMISS_STR)));
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)
     const bool was_sd_printing = IS_SD_PRINTING();
     if (was_sd_printing) {
       card.pauseSDPrint();
       ++did_pause_print; // Indicate SD pause also
@@ -505,63 +505,63 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
   HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
-  TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_NOZZLE_PARKED), FPSTR(CONTINUE_STR)));
+  TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_NOZZLE_PARKED), FPSTR(CONTINUE_STR)));
   TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_NOZZLE_PARKED)));
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
     impatient_beep(max_beep_count);
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.heater_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       ui.pause_show_message(PAUSE_MESSAGE_HEAT);
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
 
-      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_HEATER_TIMEOUT), GET_TEXT_F(MSG_REHEAT)));
+      TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_HEATER_TIMEOUT), GET_TEXT_F(MSG_REHEAT)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_HEATER_TIMEOUT)));
 
       TERN_(HAS_RESUME_CONTINUE, wait_for_user_response(0, true)); // Wait for LCD click or M108
 
-      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_INFO, GET_TEXT_F(MSG_REHEATING)));
+      TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_INFO, GET_TEXT_F(MSG_REHEATING)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onStatusChanged(GET_TEXT_F(MSG_REHEATING)));
 
       TERN_(DWIN_CREALITY_LCD_ENHANCED, LCD_MESSAGE(MSG_REHEATING));
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature(false);
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
-      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_REHEATDONE), FPSTR(CONTINUE_STR)));
+      TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_REHEATDONE), FPSTR(CONTINUE_STR)));
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_REHEATDONE)));
       TERN_(DWIN_CREALITY_LCD_ENHANCED, LCD_MESSAGE(MSG_REHEATDONE));
 
       IF_DISABLED(PAUSE_REHEAT_FAST_RESUME, wait_for_user = true);
 
       nozzle_timed_out = false;
       first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
@@ -657,28 +657,28 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
     unscaled_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
   #endif
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination.e = current_position.e = resume_position.e));
 
   ui.pause_show_message(PAUSE_MESSAGE_STATUS);
 
   #ifdef ACTION_ON_RESUMED
-    host_action_resumed();
+    hostui.resumed();
   #elif defined(ACTION_ON_RESUME)
-    host_action_resume();
+    hostui.resume();
   #endif
 
   --did_pause_print;
 
-  TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, F("Resuming"), FPSTR(DISMISS_STR)));
+  TERN_(HOST_PROMPT_SUPPORT, hostui.prompt_open(PROMPT_INFO, F("Resuming"), FPSTR(DISMISS_STR)));
 
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       --did_pause_print;
       card.startOrResumeFilePrinting();
       // Write PLR now to update the z axis value
       TERN_(POWER_LOSS_RECOVERY, if (recovery.enabled) recovery.save(true));

commit 65b950a489c35b1d5547da3a504af4dad8cde3d7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 20:15:52 2021 -0500

    üé® Apply F() to kill / sendinfoscreen

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 8a35a87eeb..643c4ef9fc 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -247,21 +247,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE)));
     TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE), FPSTR(CONTINUE_STR)));
-    TERN_(DWIN_CREALITY_LCD_ENHANCED, DWIN_Popup_Confirm(ICON_BLTouch, GET_TEXT(MSG_FILAMENT_CHANGE_PURGE), CONTINUE_STR));
+    TERN_(DWIN_CREALITY_LCD_ENHANCED, DWIN_Popup_Confirm(ICON_BLTouch, GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE), FPSTR(CONTINUE_STR)));
     wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       unscaled_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"

commit 12b5d997a2cee538e5026a68f8e0cfdd53248986
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 25 22:11:48 2021 -0500

    üé® Apply F() to some ExtUI functions

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 9b7404d852..8a35a87eeb 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -187,21 +187,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
 
   if (pause_for_user) {
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
     first_impatient_beep(max_beep_count);
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
 
-    TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Load Filament")));
+    TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(F("Load Filament")));
 
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0' + TERN0(MULTI_FILAMENT_SENSOR, active_extruder);
       host_prompt_do(PROMPT_USER_CONTINUE, F("Load Filament T"), tool, FPSTR(CONTINUE_STR));
     #endif
 
     while (wait_for_user) {
       impatient_beep(max_beep_count);
       #if BOTH(FILAMENT_CHANGE_RESUME_ON_INSERT, FILAMENT_RUNOUT_SENSOR)
         #if ENABLED(MULTI_FILAMENT_SENSOR)
@@ -245,21 +245,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
   }
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
-    TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_FILAMENT_CHANGE_PURGE)));
+    TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE)));
     TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE), FPSTR(CONTINUE_STR)));
     TERN_(DWIN_CREALITY_LCD_ENHANCED, DWIN_Popup_Confirm(ICON_BLTouch, GET_TEXT(MSG_FILAMENT_CHANGE_PURGE), CONTINUE_STR));
     wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       unscaled_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
@@ -506,63 +506,63 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_NOZZLE_PARKED), FPSTR(CONTINUE_STR)));
-  TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_NOZZLE_PARKED)));
+  TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_NOZZLE_PARKED)));
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
     impatient_beep(max_beep_count);
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.heater_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       ui.pause_show_message(PAUSE_MESSAGE_HEAT);
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_HEATER_TIMEOUT), GET_TEXT_F(MSG_REHEAT)));
 
-      TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_HEATER_TIMEOUT)));
+      TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_HEATER_TIMEOUT)));
 
       TERN_(HAS_RESUME_CONTINUE, wait_for_user_response(0, true)); // Wait for LCD click or M108
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_INFO, GET_TEXT_F(MSG_REHEATING)));
 
-      TERN_(EXTENSIBLE_UI, ExtUI::onStatusChanged_P(GET_TEXT(MSG_REHEATING)));
+      TERN_(EXTENSIBLE_UI, ExtUI::onStatusChanged(GET_TEXT_F(MSG_REHEATING)));
 
       TERN_(DWIN_CREALITY_LCD_ENHANCED, LCD_MESSAGE(MSG_REHEATING));
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature(false);
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_REHEATDONE), FPSTR(CONTINUE_STR)));
-      TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_REHEATDONE)));
+      TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired(GET_TEXT_F(MSG_REHEATDONE)));
       TERN_(DWIN_CREALITY_LCD_ENHANCED, LCD_MESSAGE(MSG_REHEATDONE));
 
       IF_DISABLED(PAUSE_REHEAT_FAST_RESUME, wait_for_user = true);
 
       nozzle_timed_out = false;
       first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
   #if ENABLED(DUAL_X_CARRIAGE)

commit 008bf1bcaef181cd1b74638692e2465bb9e07a4d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 27 11:55:08 2021 -0500

    üé® Apply F() to Host Actions strings

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 75255d87ac..9b7404d852 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -191,21 +191,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
 
     first_impatient_beep(max_beep_count);
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Load Filament")));
 
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0' + TERN0(MULTI_FILAMENT_SENSOR, active_extruder);
-      host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool, CONTINUE_STR);
+      host_prompt_do(PROMPT_USER_CONTINUE, F("Load Filament T"), tool, FPSTR(CONTINUE_STR));
     #endif
 
     while (wait_for_user) {
       impatient_beep(max_beep_count);
       #if BOTH(FILAMENT_CHANGE_RESUME_ON_INSERT, FILAMENT_RUNOUT_SENSOR)
         #if ENABLED(MULTI_FILAMENT_SENSOR)
           #define _CASE_INSERTED(N) case N-1: if (READ(FIL_RUNOUT##N##_PIN) != FIL_RUNOUT##N##_STATE) wait_for_user = false; break;
           switch (active_extruder) {
             REPEAT_1(NUM_RUNOUT_SENSORS, _CASE_INSERTED)
           }
@@ -246,21 +246,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_FILAMENT_CHANGE_PURGE)));
-    TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_FILAMENT_CHANGE_PURGE), CONTINUE_STR));
+    TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_FILAMENT_CHANGE_PURGE), FPSTR(CONTINUE_STR)));
     TERN_(DWIN_CREALITY_LCD_ENHANCED, DWIN_Popup_Confirm(ICON_BLTouch, GET_TEXT(MSG_FILAMENT_CHANGE_PURGE), CONTINUE_STR));
     wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       unscaled_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
@@ -396,21 +396,21 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
     #elif defined(ACTION_ON_PAUSE)
       host_action_pause();
     #endif
   #endif
 
-  TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, PSTR("Pause"), DISMISS_STR));
+  TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, F("Pause"), FPSTR(DISMISS_STR)));
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)
     const bool was_sd_printing = IS_SD_PRINTING();
     if (was_sd_printing) {
       card.pauseSDPrint();
       ++did_pause_print; // Indicate SD pause also
@@ -505,63 +505,63 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
   HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
-  TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_NOZZLE_PARKED), CONTINUE_STR));
+  TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_NOZZLE_PARKED), FPSTR(CONTINUE_STR)));
   TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_NOZZLE_PARKED)));
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
     impatient_beep(max_beep_count);
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.heater_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       ui.pause_show_message(PAUSE_MESSAGE_HEAT);
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
 
-      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_HEATER_TIMEOUT), GET_TEXT(MSG_REHEAT)));
+      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_HEATER_TIMEOUT), GET_TEXT_F(MSG_REHEAT)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_HEATER_TIMEOUT)));
 
       TERN_(HAS_RESUME_CONTINUE, wait_for_user_response(0, true)); // Wait for LCD click or M108
 
-      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_INFO, GET_TEXT(MSG_REHEATING)));
+      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_INFO, GET_TEXT_F(MSG_REHEATING)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onStatusChanged_P(GET_TEXT(MSG_REHEATING)));
 
       TERN_(DWIN_CREALITY_LCD_ENHANCED, LCD_MESSAGE(MSG_REHEATING));
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature(false);
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
-      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_REHEATDONE), CONTINUE_STR));
+      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT_F(MSG_REHEATDONE), FPSTR(CONTINUE_STR)));
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_REHEATDONE)));
       TERN_(DWIN_CREALITY_LCD_ENHANCED, LCD_MESSAGE(MSG_REHEATDONE));
 
       IF_DISABLED(PAUSE_REHEAT_FAST_RESUME, wait_for_user = true);
 
       nozzle_timed_out = false;
       first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
@@ -664,21 +664,21 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
   ui.pause_show_message(PAUSE_MESSAGE_STATUS);
 
   #ifdef ACTION_ON_RESUMED
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif
 
   --did_pause_print;
 
-  TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, PSTR("Resuming"), DISMISS_STR));
+  TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, F("Resuming"), FPSTR(DISMISS_STR)));
 
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       --did_pause_print;
       card.startOrResumeFilePrinting();
       // Write PLR now to update the z axis value
       TERN_(POWER_LOSS_RECOVERY, if (recovery.enabled) recovery.save(true));

commit 7f1286a11f87065c4e666985e679cf9c77d668bf
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 17:05:11 2021 -0500

    üé® Apply F() to status message

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 28f5caa3cb..75255d87ac 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -531,39 +531,39 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_HEATER_TIMEOUT), GET_TEXT(MSG_REHEAT)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_HEATER_TIMEOUT)));
 
       TERN_(HAS_RESUME_CONTINUE, wait_for_user_response(0, true)); // Wait for LCD click or M108
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_INFO, GET_TEXT(MSG_REHEATING)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onStatusChanged_P(GET_TEXT(MSG_REHEATING)));
 
-      TERN_(DWIN_CREALITY_LCD_ENHANCED, ui.set_status_P(GET_TEXT(MSG_REHEATING)));
+      TERN_(DWIN_CREALITY_LCD_ENHANCED, LCD_MESSAGE(MSG_REHEATING));
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature(false);
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_REHEATDONE), CONTINUE_STR));
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_REHEATDONE)));
-      TERN_(DWIN_CREALITY_LCD_ENHANCED, ui.set_status_P(GET_TEXT(MSG_REHEATDONE)));
+      TERN_(DWIN_CREALITY_LCD_ENHANCED, LCD_MESSAGE(MSG_REHEATDONE));
 
       IF_DISABLED(PAUSE_REHEAT_FAST_RESUME, wait_for_user = true);
 
       nozzle_timed_out = false;
       first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
   #if ENABLED(DUAL_X_CARRIAGE)
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);

commit 520b97083e52efdd47ab434b97823e48d85ade62
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 27 11:03:07 2021 -0500

    üé® Apply F() to serial macros

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index d54326116e..28f5caa3cb 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -479,21 +479,21 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
  *
  * Used by M125 and M600
  */
 
 void show_continue_prompt(const bool is_reload) {
   DEBUG_SECTION(scp, "pause_print", true);
   DEBUG_ECHOLNPGM("... is_reload:", is_reload);
 
   ui.pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING);
   SERIAL_ECHO_START();
-  SERIAL_ECHOPGM_P(is_reload ? PSTR(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
+  SERIAL_ECHOF(is_reload ? F(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : F(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(wfc, "wait_for_confirmation", true);
   DEBUG_ECHOLNPGM("... is_reload:", is_reload, " maxbeep:", max_beep_count DXC_SAY);
 
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 

commit 33e0855e2c173680865aaa6c6aa93047d63fc469
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 01:07:51 2021 -0500

    ‚ö°Ô∏è Handle shared enable pins (#22824)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 24cd52e548..d54326116e 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -295,22 +295,22 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
 
   return true;
 }
 
 /**
  * Disabling E steppers for manual filament change should be fine
  * as long as users don't spin the E motor ridiculously fast and
  * send current back to their board, potentially frying it.
  */
 inline void disable_active_extruder() {
-  #if HAS_E_STEPPER_ENABLE
-    disable_e_stepper(active_extruder);
+  #if HAS_EXTRUDERS
+    stepper.DISABLE_EXTRUDER(active_extruder);
     safe_delay(100);
   #endif
 }
 
 /**
  * Unload filament from the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - Show "wait for unload" placard
  * - Retract, pause, then unload filament

commit b88117d6364b8919a8a7df6c80d8132af98a6afc
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Sep 21 06:25:13 2021 -0500

    üé® Fix L64xx enable, clean up conditionals

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 6dfd19a3a0..24cd52e548 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -200,21 +200,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
       const char tool = '0' + TERN0(MULTI_FILAMENT_SENSOR, active_extruder);
       host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool, CONTINUE_STR);
     #endif
 
     while (wait_for_user) {
       impatient_beep(max_beep_count);
       #if BOTH(FILAMENT_CHANGE_RESUME_ON_INSERT, FILAMENT_RUNOUT_SENSOR)
         #if ENABLED(MULTI_FILAMENT_SENSOR)
           #define _CASE_INSERTED(N) case N-1: if (READ(FIL_RUNOUT##N##_PIN) != FIL_RUNOUT##N##_STATE) wait_for_user = false; break;
           switch (active_extruder) {
-            REPEAT_S(1, INCREMENT(NUM_RUNOUT_SENSORS), _CASE_INSERTED)
+            REPEAT_1(NUM_RUNOUT_SENSORS, _CASE_INSERTED)
           }
         #else
           if (READ(FIL_RUNOUT_PIN) != FIL_RUNOUT_STATE) wait_for_user = false;
         #endif
       #endif
       idle_no_sleep();
     }
   }
 
   if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_LOAD, mode);

commit 08a40c43750eb49521849792520d8d819c0fcd29
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Thu Sep 16 03:46:16 2021 -0400

    ‚ú® Improve pause/filament change for ExtUI (#22655)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index f9e3d1b9c2..6dfd19a3a0 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -196,20 +196,30 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Load Filament")));
 
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0' + TERN0(MULTI_FILAMENT_SENSOR, active_extruder);
       host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool, CONTINUE_STR);
     #endif
 
     while (wait_for_user) {
       impatient_beep(max_beep_count);
+      #if BOTH(FILAMENT_CHANGE_RESUME_ON_INSERT, FILAMENT_RUNOUT_SENSOR)
+        #if ENABLED(MULTI_FILAMENT_SENSOR)
+          #define _CASE_INSERTED(N) case N-1: if (READ(FIL_RUNOUT##N##_PIN) != FIL_RUNOUT##N##_STATE) wait_for_user = false; break;
+          switch (active_extruder) {
+            REPEAT_S(1, INCREMENT(NUM_RUNOUT_SENSORS), _CASE_INSERTED)
+          }
+        #else
+          if (READ(FIL_RUNOUT_PIN) != FIL_RUNOUT_STATE) wait_for_user = false;
+        #endif
+      #endif
       idle_no_sleep();
     }
   }
 
   if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_LOAD, mode);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
@@ -538,28 +548,26 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_REHEATDONE), CONTINUE_STR));
-
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_REHEATDONE)));
-
       TERN_(DWIN_CREALITY_LCD_ENHANCED, ui.set_status_P(GET_TEXT(MSG_REHEATDONE)));
 
-      wait_for_user = true;
-      nozzle_timed_out = false;
+      IF_DISABLED(PAUSE_REHEAT_FAST_RESUME, wait_for_user = true);
 
+      nozzle_timed_out = false;
       first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
   #if ENABLED(DUAL_X_CARRIAGE)
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 }
 
 /**

commit 6b9b2c5d7382b30dabc2f1fb360d62a819f5ec3d
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 11 02:15:05 2021 -0500

    ü©π Warn about user feedback requirement

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index d9b2521403..f9e3d1b9c2 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -515,21 +515,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       ui.pause_show_message(PAUSE_MESSAGE_HEAT);
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_HEATER_TIMEOUT), GET_TEXT(MSG_REHEAT)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_HEATER_TIMEOUT)));
 
-      wait_for_user_response(0, true); // Wait for LCD click or M108
+      TERN_(HAS_RESUME_CONTINUE, wait_for_user_response(0, true)); // Wait for LCD click or M108
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_INFO, GET_TEXT(MSG_REHEATING)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onStatusChanged_P(GET_TEXT(MSG_REHEATING)));
 
       TERN_(DWIN_CREALITY_LCD_ENHANCED, ui.set_status_P(GET_TEXT(MSG_REHEATING)));
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 

commit 754b31918a73cb08c322102be5d3926d2ac59c18
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 9 04:57:05 2021 -0500

    üé® Fewer serial macros

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index f1d6dbb985..d9b2521403 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -125,21 +125,21 @@ fil_change_settings_t fc_settings[EXTRUDERS];
  * Ensure a safe temperature for extrusion
  *
  * - Fail if the TARGET temperature is too low
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
  */
 static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=PAUSE_MODE_SAME) {
   DEBUG_SECTION(est, "ensure_safe_temperature", true);
-  DEBUG_ECHOLNPAIR("... wait:", wait, " mode:", mode);
+  DEBUG_ECHOLNPGM("... wait:", wait, " mode:", mode);
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder))
       thermalManager.setTargetHotend(thermalManager.extrude_min_temp, active_extruder);
   #endif
 
   ui.pause_show_message(PAUSE_MESSAGE_HEATING, mode); UNUSED(mode);
 
   if (wait) return thermalManager.wait_for_hotend(active_extruder);
 
@@ -171,21 +171,21 @@ static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=P
  * - Return when "Continue" is selected
  *
  * Returns 'true' if load was completed, 'false' for abort
  */
 bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load_length/*=0*/, const_float_t purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                    const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                    DXC_ARGS
 ) {
   DEBUG_SECTION(lf, "load_filament", true);
-  DEBUG_ECHOLNPAIR("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", max_beep_count, " showlcd:", show_lcd, " pauseforuser:", pause_for_user, " pausemode:", mode DXC_SAY);
+  DEBUG_ECHOLNPGM("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", max_beep_count, " showlcd:", show_lcd, " pauseforuser:", pause_for_user, " pausemode:", mode DXC_SAY);
 
   if (!ensure_safe_temperature(false, mode)) {
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_STATUS, mode);
     return false;
   }
 
   if (pause_for_user) {
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
@@ -308,21 +308,21 @@ inline void disable_active_extruder() {
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
 bool unload_filament(const_float_t unload_length, const bool show_lcd/*=false*/,
                      const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                      #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
                        , const_float_t mix_multiplier/*=1.0*/
                      #endif
 ) {
   DEBUG_SECTION(uf, "unload_filament", true);
-  DEBUG_ECHOLNPAIR("... unloadlen:", unload_length, " showlcd:", show_lcd, " mode:", mode
+  DEBUG_ECHOLNPGM("... unloadlen:", unload_length, " showlcd:", show_lcd, " mode:", mode
     #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
       , " mixmult:", mix_multiplier
     #endif
   );
 
   #if !BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
     constexpr float mix_multiplier = 1.0f;
   #endif
 
   if (!ensure_safe_temperature(false, mode)) {
@@ -372,21 +372,21 @@ bool unload_filament(const_float_t unload_length, const bool show_lcd/*=false*/,
  * - Initial retract, if current temperature is hot enough
  * - Park the nozzle at the given position
  * - Call unload_filament (if a length was specified)
  *
  * Return 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
 bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool show_lcd/*=false*/, const_float_t unload_length/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(pp, "pause_print", true);
-  DEBUG_ECHOLNPAIR("... park.x:", park_point.x, " y:", park_point.y, " z:", park_point.z, " unloadlen:", unload_length, " showlcd:", show_lcd DXC_SAY);
+  DEBUG_ECHOLNPGM("... park.x:", park_point.x, " y:", park_point.y, " z:", park_point.z, " unloadlen:", unload_length, " showlcd:", show_lcd DXC_SAY);
 
   UNUSED(show_lcd);
 
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
     #elif defined(ACTION_ON_PAUSE)
       host_action_pause();
@@ -423,21 +423,21 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
 
   // Wait for buffered blocks to complete
   planner.synchronize();
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder)) {
-    DEBUG_ECHOLNPAIR("... retract:", retract);
+    DEBUG_ECHOLNPGM("... retract:", retract);
     unscaled_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
   }
 
   // If axes don't need to home then the nozzle can park
   if (do_park) nozzle.park(0, park_point); // Park the nozzle by doing a Minimum Z Raise followed by an XY Move
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
@@ -465,30 +465,30 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
  * - Show "Insert filament and press button to continue"
  *
  * - Wait for a click before returning
  * - Heaters can time out and must reheat before continuing
  *
  * Used by M125 and M600
  */
 
 void show_continue_prompt(const bool is_reload) {
   DEBUG_SECTION(scp, "pause_print", true);
-  DEBUG_ECHOLNPAIR("... is_reload:", is_reload);
+  DEBUG_ECHOLNPGM("... is_reload:", is_reload);
 
   ui.pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING);
   SERIAL_ECHO_START();
   SERIAL_ECHOPGM_P(is_reload ? PSTR(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(wfc, "wait_for_confirmation", true);
-  DEBUG_ECHOLNPAIR("... is_reload:", is_reload, " maxbeep:", max_beep_count DXC_SAY);
+  DEBUG_ECHOLNPGM("... is_reload:", is_reload, " maxbeep:", max_beep_count DXC_SAY);
 
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 
   first_impatient_beep(max_beep_count);
 
   // Start the heater idle timers
   const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
@@ -577,24 +577,24 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
  * - Re-prime the nozzle...
  *   -  FWRETRACT: Recover/prime from the prior G10.
  *   - !FWRETRACT: Retract by resume_position.e, if negative.
  *                 Not sure how this logic comes into use.
  * - Sync the planner E to resume_position.e
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
 void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_length/*=0*/, const_float_t purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/, const celsius_t targetTemp/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(rp, "resume_print", true);
-  DEBUG_ECHOLNPAIR("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", max_beep_count, " targetTemp:", targetTemp DXC_SAY);
+  DEBUG_ECHOLNPGM("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", max_beep_count, " targetTemp:", targetTemp DXC_SAY);
 
   /*
-  SERIAL_ECHOLNPAIR(
+  SERIAL_ECHOLNPGM(
     "start of resume_print()\ndual_x_carriage_mode:", dual_x_carriage_mode,
     "\nextruder_duplication_enabled:", extruder_duplication_enabled,
     "\nactive_extruder:", active_extruder,
     "\n"
   );
   //*/
 
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out

commit 0f61d9e4dd4d4e4f27e5c688ab2c5dbd0f03af84
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Tue Sep 7 02:15:24 2021 -0500

    ‚ú® Ender-3 V2 CrealityUI Enhanced (#21942)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 9a402141e6..f1d6dbb985 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -46,20 +46,22 @@
 #if HAS_FILAMENT_SENSOR
   #include "runout.h"
 #endif
 
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "host_actions.h"
 #endif
 
 #if ENABLED(EXTENSIBLE_UI)
   #include "../lcd/extui/ui_api.h"
+#elif ENABLED(DWIN_CREALITY_LCD_ENHANCED)
+  #include "../lcd/e3v2/enhanced/dwin.h"
 #endif
 
 #include "../lcd/marlinui.h"
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "powerloss.h"
@@ -235,20 +237,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_FILAMENT_CHANGE_PURGE)));
     TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_FILAMENT_CHANGE_PURGE), CONTINUE_STR));
+    TERN_(DWIN_CREALITY_LCD_ENHANCED, DWIN_Popup_Confirm(ICON_BLTouch, GET_TEXT(MSG_FILAMENT_CHANGE_PURGE), CONTINUE_STR));
     wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       unscaled_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
@@ -258,21 +261,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
         unscaled_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       TERN_(HOST_PROMPT_SUPPORT, filament_load_host_prompt()); // Initiate another host prompt.
 
       #if M600_PURGE_MORE_RESUMABLE
         if (show_lcd) {
           // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
-          #if HAS_LCD_MENU
+          #if EITHER(HAS_LCD_MENU, DWIN_CREALITY_LCD_ENHANCED)
             ui.pause_show_message(PAUSE_MESSAGE_OPTION); // Also sets PAUSE_RESPONSE_WAIT_FOR
           #else
             pause_menu_response = PAUSE_RESPONSE_WAIT_FOR;
           #endif
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (TERN0(M600_PURGE_MORE_RESUMABLE, pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
@@ -518,35 +521,42 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_HEATER_TIMEOUT), GET_TEXT(MSG_REHEAT)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_HEATER_TIMEOUT)));
 
       wait_for_user_response(0, true); // Wait for LCD click or M108
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_INFO, GET_TEXT(MSG_REHEATING)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onStatusChanged_P(GET_TEXT(MSG_REHEATING)));
 
+      TERN_(DWIN_CREALITY_LCD_ENHANCED, ui.set_status_P(GET_TEXT(MSG_REHEATING)));
+
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature(false);
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
+
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_REHEATDONE), CONTINUE_STR));
+
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_REHEATDONE)));
+
+      TERN_(DWIN_CREALITY_LCD_ENHANCED, ui.set_status_P(GET_TEXT(MSG_REHEATDONE)));
+
       wait_for_user = true;
       nozzle_timed_out = false;
 
       first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
   #if ENABLED(DUAL_X_CARRIAGE)
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
@@ -668,13 +678,14 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(false);
   #endif
 
   TERN_(HAS_FILAMENT_SENSOR, runout.reset());
 
   TERN_(HAS_STATUS_MESSAGE, ui.reset_status());
   TERN_(HAS_LCD_MENU, ui.return_to_status());
+  TERN_(DWIN_CREALITY_LCD_ENHANCED, HMI_ReturnScreen());
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit fb29135c74a258eaa0ba824c9c1f00762ed59183
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Aug 29 20:44:55 2021 -0500

    ‚ú® Creality3D CR-30 PrintMill

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 79a8af66e2..9a402141e6 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -206,20 +206,22 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
   }
 
   if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_LOAD, mode);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
 
+  TERN_(BELTPRINTER, do_blocking_move_to_xy(0.00, 50.00));
+
   // Slow Load filament
   if (slow_load_length) unscaled_e_move(slow_load_length, FILAMENT_CHANGE_SLOW_LOAD_FEEDRATE);
 
   // Fast Load Filament
   if (fast_load_length) {
     #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
       const float saved_acceleration = planner.settings.retract_acceleration;
       planner.settings.retract_acceleration = FILAMENT_CHANGE_FAST_LOAD_ACCEL;
     #endif
 
@@ -599,21 +601,21 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
   load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
 
   if (targetTemp > 0) {
     thermalManager.setTargetHotend(targetTemp, active_extruder);
     thermalManager.wait_for_hotend(active_extruder, false);
   }
 
   ui.pause_show_message(PAUSE_MESSAGE_RESUME);
 
   // Check Temperature before moving hotend
-  ensure_safe_temperature();
+  ensure_safe_temperature(DISABLED(BELTPRINTER));
 
   // Retract to prevent oozing
   unscaled_e_move(-(PAUSE_PARK_RETRACT_LENGTH), feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
   if (!axes_should_home()) {
     // Move XY back to saved position
     destination.set(resume_position.x, resume_position.y, current_position.z, current_position.e);
     prepare_internal_move_to_destination(NOZZLE_PARK_XY_FEEDRATE);
 
     // Move Z back to saved position

commit 7d416bd055e3ccddf765208b2937dcc1fcd4ea8b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Aug 22 05:25:07 2021 -0500

    ‚ú® MarlinUI for Ender 3 v2 DWIN LCD (#22594)
    
    Co-Authored-By: Taylor Talkington <taylor.talkington@gmail.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index d24a60a0b0..79a8af66e2 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -231,22 +231,22 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
   }
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
-    TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Filament Purging...")));
-    TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purging..."), CONTINUE_STR));
+    TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_FILAMENT_CHANGE_PURGE)));
+    TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_FILAMENT_CHANGE_PURGE), CONTINUE_STR));
     wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       unscaled_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"

commit 536cf287a6f642aa3eccd290b421b0e3869f018a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Aug 21 18:00:55 2021 -0500

    üé® Misc code and spacing cleanup

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 94c564a9aa..d24a60a0b0 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -184,27 +184,28 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
   }
 
   if (pause_for_user) {
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
     first_impatient_beep(max_beep_count);
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
+
+    TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Load Filament")));
+
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0' + TERN0(MULTI_FILAMENT_SENSOR, active_extruder);
       host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool, CONTINUE_STR);
     #endif
 
-    TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Load Filament")));
-
     while (wait_for_user) {
       impatient_beep(max_beep_count);
       idle_no_sleep();
     }
   }
 
   if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_LOAD, mode);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
@@ -230,22 +231,22 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
   }
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
-    TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purging..."), CONTINUE_STR));
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Filament Purging...")));
+    TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purging..."), CONTINUE_STR));
     wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       unscaled_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
@@ -265,21 +266,21 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
           #if HAS_LCD_MENU
             ui.pause_show_message(PAUSE_MESSAGE_OPTION); // Also sets PAUSE_RESPONSE_WAIT_FOR
           #else
             pause_menu_response = PAUSE_RESPONSE_WAIT_FOR;
           #endif
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
-    } while (TERN0(M600_PURGE_MORE_RESUMABLE, show_lcd && pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
+    } while (TERN0(M600_PURGE_MORE_RESUMABLE, pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
 
   #endif
   TERN_(HOST_PROMPT_SUPPORT, host_action_prompt_end());
 
   return true;
 }
 
 /**
  * Disabling E steppers for manual filament change should be fine
  * as long as users don't spin the E motor ridiculously fast and

commit 3b57c3316a7024223ed4d00173e38206cabe4f8b
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jul 25 02:19:30 2021 -0500

    Misc. Cleanup

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 2bd3033808..94c564a9aa 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -528,22 +528,22 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature(false);
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
-      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), CONTINUE_STR));
-      TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Reheat finished.")));
+      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_REHEATDONE), CONTINUE_STR));
+      TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_REHEATDONE)));
       wait_for_user = true;
       nozzle_timed_out = false;
 
       first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
   #if ENABLED(DUAL_X_CARRIAGE)
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif

commit 8e56f9366de1b0d78600064aca3f905b4d1d7300
Author: tobuh <32395668+tobuh@users.noreply.github.com>
Date:   Mon May 10 14:24:35 2021 +0200

    Fix and improve Power-Loss Recovery (#21779)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 58e0c3df0d..2bd3033808 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -399,44 +399,53 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool
       card.pauseSDPrint();
       ++did_pause_print; // Indicate SD pause also
     }
   #endif
 
   print_job_timer.pause();
 
   // Save current position
   resume_position = current_position;
 
+  // Will the nozzle be parking?
+  const bool do_park = !axes_should_home();
+
+  #if ENABLED(POWER_LOSS_RECOVERY)
+    // Save PLR info in case the power goes out while parked
+    const float park_raise = do_park ? nozzle.park_mode_0_height(park_point.z) - current_position.z : POWER_LOSS_ZRAISE;
+    if (was_sd_printing && recovery.enabled) recovery.save(true, park_raise, do_park);
+  #endif
+
   // Wait for buffered blocks to complete
   planner.synchronize();
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder)) {
     DEBUG_ECHOLNPAIR("... retract:", retract);
     unscaled_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
   }
 
-  // Park the nozzle by doing a Minimum Z Raise followed by an XY Move
-  if (!axes_should_home())
-    nozzle.park(0, park_point);
+  // If axes don't need to home then the nozzle can park
+  if (do_park) nozzle.park(0, park_point); // Park the nozzle by doing a Minimum Z Raise followed by an XY Move
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
 
-  if (unload_length)   // Unload the filament
+  // Unload the filament, if specified
+  if (unload_length)
     unload_filament(unload_length, show_lcd, PAUSE_MODE_CHANGE_FILAMENT);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   // Disable the Extruder for manual change
   disable_active_extruder();
 
   return true;

commit b65cdbed91782c83188706a9c340de9c503cf430
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat May 8 04:35:35 2021 -0500

    Signal SD completion later (#21840)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 93b4a2aa81..58e0c3df0d 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -642,21 +642,21 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
   --did_pause_print;
 
   TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, PSTR("Resuming"), DISMISS_STR));
 
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       --did_pause_print;
-      card.startFileprint();
+      card.startOrResumeFilePrinting();
       // Write PLR now to update the z axis value
       TERN_(POWER_LOSS_RECOVERY, if (recovery.enabled) recovery.save(true));
     }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(false);
   #endif
 
   TERN_(HAS_FILAMENT_SENSOR, runout.reset());

commit dfc906930c9b31ddd4d70e9c0ccf15e369abd188
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon May 3 20:55:05 2021 -0500

    Pause and PLR refinements
    
    - Move `pause_print` argument `unload_length` after `show_lcd` so it's next to `DXC_ARGS`.
    - Tweak the position and conditions of PLR save in `resume_print`.
    - Add `Nozzle::park_mode_0_height` accessor to get the raised Z height.
    - Remove extraneous `recovery.save` from `dwin.cpp`.
    - Move PLR `info.volumetric...` to `flag`.
    - Remove some G-code spaces in PLR code
    - Document `pause.h` function declarations.

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 867502712c..93b4a2aa81 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -309,21 +309,21 @@ bool unload_filament(const_float_t unload_length, const bool show_lcd/*=false*/,
                      #endif
 ) {
   DEBUG_SECTION(uf, "unload_filament", true);
   DEBUG_ECHOLNPAIR("... unloadlen:", unload_length, " showlcd:", show_lcd, " mode:", mode
     #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
       , " mixmult:", mix_multiplier
     #endif
   );
 
   #if !BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
-    constexpr float mix_multiplier = 1.0;
+    constexpr float mix_multiplier = 1.0f;
   #endif
 
   if (!ensure_safe_temperature(false, mode)) {
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_STATUS);
     return false;
   }
 
   if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_UNLOAD, mode);
 
   // Retract filament
@@ -364,21 +364,21 @@ bool unload_filament(const_float_t unload_length, const bool show_lcd/*=false*/,
  * - Abort if TARGET temperature is too low
  * - Display "wait for start of filament change" (if a length was specified)
  * - Initial retract, if current temperature is hot enough
  * - Park the nozzle at the given position
  * - Call unload_filament (if a length was specified)
  *
  * Return 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
-bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const_float_t unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
+bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const bool show_lcd/*=false*/, const_float_t unload_length/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(pp, "pause_print", true);
   DEBUG_ECHOLNPAIR("... park.x:", park_point.x, " y:", park_point.y, " z:", park_point.z, " unloadlen:", unload_length, " showlcd:", show_lcd DXC_SAY);
 
   UNUSED(show_lcd);
 
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
@@ -387,21 +387,22 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const_float
     #endif
   #endif
 
   TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, PSTR("Pause"), DISMISS_STR));
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)
-    if (IS_SD_PRINTING()) {
+    const bool was_sd_printing = IS_SD_PRINTING();
+    if (was_sd_printing) {
       card.pauseSDPrint();
       ++did_pause_print; // Indicate SD pause also
     }
   #endif
 
   print_job_timer.pause();
 
   // Save current position
   resume_position = current_position;
 
@@ -411,21 +412,21 @@ bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const_float
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder)) {
     DEBUG_ECHOLNPAIR("... retract:", retract);
     unscaled_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
   }
 
-  // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
+  // Park the nozzle by doing a Minimum Z Raise followed by an XY Move
   if (!axes_should_home())
     nozzle.park(0, park_point);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
 
   if (unload_length)   // Unload the filament
@@ -623,43 +624,45 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
   // If resume_position is negative
   if (resume_position.e < 0) unscaled_e_move(resume_position.e, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
   #if ADVANCED_PAUSE_RESUME_PRIME != 0
     unscaled_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
   #endif
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination.e = current_position.e = resume_position.e));
 
-  // Write PLR now to update the z axis value
-  TERN_(POWER_LOSS_RECOVERY, if (recovery.enabled) recovery.save(true));
-
   ui.pause_show_message(PAUSE_MESSAGE_STATUS);
 
   #ifdef ACTION_ON_RESUMED
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif
 
   --did_pause_print;
 
   TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, PSTR("Resuming"), DISMISS_STR));
 
+  // Resume the print job timer if it was running
+  if (print_job_timer.isPaused()) print_job_timer.start();
+
   #if ENABLED(SDSUPPORT)
-    if (did_pause_print) { card.startFileprint(); --did_pause_print; }
+    if (did_pause_print) {
+      --did_pause_print;
+      card.startFileprint();
+      // Write PLR now to update the z axis value
+      TERN_(POWER_LOSS_RECOVERY, if (recovery.enabled) recovery.save(true));
+    }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(false);
   #endif
 
   TERN_(HAS_FILAMENT_SENSOR, runout.reset());
 
-  // Resume the print job timer if it was running
-  if (print_job_timer.isPaused()) print_job_timer.start();
-
   TERN_(HAS_STATUS_MESSAGE, ui.reset_status());
   TERN_(HAS_LCD_MENU, ui.return_to_status());
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit 8b5e7429d7b874e9a9d1a6afbba74c11b36813ba
Author: Sebastiaan Dammann <sebastiaandammann@outlook.com>
Date:   Sat Apr 24 08:01:17 2021 +0200

    Prevent extrusion on M600 un-park (#21670)
    
    Fixes #21669

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 6552eaa42c..867502712c 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -595,21 +595,21 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
   ui.pause_show_message(PAUSE_MESSAGE_RESUME);
 
   // Check Temperature before moving hotend
   ensure_safe_temperature();
 
   // Retract to prevent oozing
   unscaled_e_move(-(PAUSE_PARK_RETRACT_LENGTH), feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
   if (!axes_should_home()) {
     // Move XY back to saved position
-    destination.set(resume_position.x, resume_position.y, current_position.z);
+    destination.set(resume_position.x, resume_position.y, current_position.z, current_position.e);
     prepare_internal_move_to_destination(NOZZLE_PARK_XY_FEEDRATE);
 
     // Move Z back to saved position
     destination.z = resume_position.z;
     prepare_internal_move_to_destination(NOZZLE_PARK_Z_FEEDRATE);
   }
 
   // Unretract
   unscaled_e_move(PAUSE_PARK_RETRACT_LENGTH, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 

commit c4620bb5285438e41fa4c39229aa2a39859877ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 23 20:19:23 2021 -0500

    Add whole-degree accessors, simplify some temperature-related features (#21685)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 192c7f6345..6552eaa42c 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -136,21 +136,21 @@ static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=P
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder))
       thermalManager.setTargetHotend(thermalManager.extrude_min_temp, active_extruder);
   #endif
 
   ui.pause_show_message(PAUSE_MESSAGE_HEATING, mode); UNUSED(mode);
 
   if (wait) return thermalManager.wait_for_hotend(active_extruder);
 
   // Allow interruption by Emergency Parser M108
   wait_for_heatup = TERN1(PREVENT_COLD_EXTRUSION, !thermalManager.allow_cold_extrude);
-  while (wait_for_heatup && ABS(thermalManager.degHotend(active_extruder) - thermalManager.degTargetHotend(active_extruder)) > TEMP_WINDOW)
+  while (wait_for_heatup && ABS(thermalManager.wholeDegHotend(active_extruder) - thermalManager.degTargetHotend(active_extruder)) > (TEMP_WINDOW))
     idle();
   wait_for_heatup = false;
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     // A user can cancel wait-for-heating with M108
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
       SERIAL_ECHO_MSG(STR_ERR_HOTEND_TOO_COLD);
       return false;
     }
   #endif

commit a58276c4c1a7dbcac815a65473d1d0f8f36d5978
Author: BigTreeTech <38851044+bigtreetech@users.noreply.github.com>
Date:   Fri Apr 23 07:43:28 2021 +0800

    Enable Purge More / Resume with EP + Host Prompt (#21671)
    
    Co-authored-by: Msq001 <alansayyeah@gmail.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 8a1701d0b6..192c7f6345 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -68,21 +68,21 @@
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 #define DEBUG_OUT ENABLED(DEBUG_PAUSE_RESUME)
 #include "../core/debug_out.h"
 
 // private:
 
 static xyze_pos_t resume_position;
 
-#if HAS_LCD_MENU
+#if M600_PURGE_MORE_RESUMABLE
   PauseMenuResponse pause_menu_response;
   PauseMode pause_mode = PAUSE_MODE_PAUSE_PRINT;
 #endif
 
 fil_change_settings_t fc_settings[EXTRUDERS];
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
 
@@ -250,32 +250,36 @@ bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load
       if (purge_length > 0) {
         // "Wait for filament purge"
         if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
         // Extrude filament to get into hotend
         unscaled_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       TERN_(HOST_PROMPT_SUPPORT, filament_load_host_prompt()); // Initiate another host prompt.
 
-      #if HAS_LCD_MENU
+      #if M600_PURGE_MORE_RESUMABLE
         if (show_lcd) {
           // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
-          ui.pause_show_message(PAUSE_MESSAGE_OPTION);
+          #if HAS_LCD_MENU
+            ui.pause_show_message(PAUSE_MESSAGE_OPTION); // Also sets PAUSE_RESPONSE_WAIT_FOR
+          #else
+            pause_menu_response = PAUSE_RESPONSE_WAIT_FOR;
+          #endif
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
-    } while (TERN0(HAS_LCD_MENU, show_lcd && pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
+    } while (TERN0(M600_PURGE_MORE_RESUMABLE, show_lcd && pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
 
   #endif
   TERN_(HOST_PROMPT_SUPPORT, host_action_prompt_end());
 
   return true;
 }
 
 /**
  * Disabling E steppers for manual filament change should be fine
  * as long as users don't spin the E motor ridiculously fast and

commit a5d6f6ac9880090d2412bbea0027885b95c98ea2
Author: espr14 <espr14@gmail.com>
Date:   Tue Apr 13 03:10:21 2021 +0200

    Fix Resume Print with UBL (#21564)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 5990c09a90..8a1701d0b6 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -590,25 +590,27 @@ void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_
 
   ui.pause_show_message(PAUSE_MESSAGE_RESUME);
 
   // Check Temperature before moving hotend
   ensure_safe_temperature();
 
   // Retract to prevent oozing
   unscaled_e_move(-(PAUSE_PARK_RETRACT_LENGTH), feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
   if (!axes_should_home()) {
-    // Move XY to starting position, then Z
-    do_blocking_move_to_xy(resume_position, feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
+    // Move XY back to saved position
+    destination.set(resume_position.x, resume_position.y, current_position.z);
+    prepare_internal_move_to_destination(NOZZLE_PARK_XY_FEEDRATE);
 
-    // Move Z_AXIS to saved position
-    do_blocking_move_to_z(resume_position.z, feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
+    // Move Z back to saved position
+    destination.z = resume_position.z;
+    prepare_internal_move_to_destination(NOZZLE_PARK_Z_FEEDRATE);
   }
 
   // Unretract
   unscaled_e_move(PAUSE_PARK_RETRACT_LENGTH, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       unscaled_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);

commit 62f37669dc506a6e579389ca549ce5993548944d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Apr 1 17:59:57 2021 -0500

    Replace 'const float &' with 'const_float_t' (#21505)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index a934b0ead0..5990c09a90 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -163,21 +163,21 @@ static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=P
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard
  * - Load and purge filament
  * - Show "Purge more" / "Continue" menu
  * - Return when "Continue" is selected
  *
  * Returns 'true' if load was completed, 'false' for abort
  */
-bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
+bool load_filament(const_float_t slow_load_length/*=0*/, const_float_t fast_load_length/*=0*/, const_float_t purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                    const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                    DXC_ARGS
 ) {
   DEBUG_SECTION(lf, "load_filament", true);
   DEBUG_ECHOLNPAIR("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", max_beep_count, " showlcd:", show_lcd, " pauseforuser:", pause_for_user, " pausemode:", mode DXC_SAY);
 
   if (!ensure_safe_temperature(false, mode)) {
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_STATUS, mode);
     return false;
@@ -291,24 +291,24 @@ inline void disable_active_extruder() {
 /**
  * Unload filament from the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - Show "wait for unload" placard
  * - Retract, pause, then unload filament
  * - Disable E stepper (on most machines)
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
-bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
+bool unload_filament(const_float_t unload_length, const bool show_lcd/*=false*/,
                      const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                      #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
-                       , const float &mix_multiplier/*=1.0*/
+                       , const_float_t mix_multiplier/*=1.0*/
                      #endif
 ) {
   DEBUG_SECTION(uf, "unload_filament", true);
   DEBUG_ECHOLNPAIR("... unloadlen:", unload_length, " showlcd:", show_lcd, " mode:", mode
     #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
       , " mixmult:", mix_multiplier
     #endif
   );
 
   #if !BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
@@ -360,21 +360,21 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
  * - Abort if TARGET temperature is too low
  * - Display "wait for start of filament change" (if a length was specified)
  * - Initial retract, if current temperature is hot enough
  * - Park the nozzle at the given position
  * - Call unload_filament (if a length was specified)
  *
  * Return 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
-bool pause_print(const float &retract, const xyz_pos_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
+bool pause_print(const_float_t retract, const xyz_pos_t &park_point, const_float_t unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
   DEBUG_SECTION(pp, "pause_print", true);
   DEBUG_ECHOLNPAIR("... park.x:", park_point.x, " y:", park_point.y, " z:", park_point.z, " unloadlen:", unload_length, " showlcd:", show_lcd DXC_SAY);
 
   UNUSED(show_lcd);
 
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
@@ -548,21 +548,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
  * - Move the nozzle back to resume_position
  * - Unretract
  * - Re-prime the nozzle...
  *   -  FWRETRACT: Recover/prime from the prior G10.
  *   - !FWRETRACT: Retract by resume_position.e, if negative.
  *                 Not sure how this logic comes into use.
  * - Sync the planner E to resume_position.e
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
-void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/, const celsius_t targetTemp/*=0*/ DXC_ARGS) {
+void resume_print(const_float_t slow_load_length/*=0*/, const_float_t fast_load_length/*=0*/, const_float_t purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/, const celsius_t targetTemp/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(rp, "resume_print", true);
   DEBUG_ECHOLNPAIR("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", max_beep_count, " targetTemp:", targetTemp DXC_SAY);
 
   /*
   SERIAL_ECHOLNPAIR(
     "start of resume_print()\ndual_x_carriage_mode:", dual_x_carriage_mode,
     "\nextruder_duplication_enabled:", extruder_duplication_enabled,
     "\nactive_extruder:", active_extruder,
     "\n"
   );

commit 930752d46e6aacb484ea89dacae6baf823d78d62
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Wed Mar 24 10:12:57 2021 -0500

    Ender 3 V2 Status Line (#21369)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 5f3338139a..a934b0ead0 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -645,15 +645,15 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(false);
   #endif
 
   TERN_(HAS_FILAMENT_SENSOR, runout.reset());
 
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 
-  TERN_(HAS_DISPLAY, ui.reset_status());
+  TERN_(HAS_STATUS_MESSAGE, ui.reset_status());
   TERN_(HAS_LCD_MENU, ui.return_to_status());
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit e5ff55a1be7646b6159e6dedac50bfbe57e6dfa0
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 24 04:11:43 2021 -0500

    Add typedef celsius_t (#21374)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index a6a28925ed..5f3338139a 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -548,21 +548,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
  * - Move the nozzle back to resume_position
  * - Unretract
  * - Re-prime the nozzle...
  *   -  FWRETRACT: Recover/prime from the prior G10.
  *   - !FWRETRACT: Retract by resume_position.e, if negative.
  *                 Not sure how this logic comes into use.
  * - Sync the planner E to resume_position.e
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
-void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/, int16_t targetTemp/*=0*/ DXC_ARGS) {
+void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/, const celsius_t targetTemp/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(rp, "resume_print", true);
   DEBUG_ECHOLNPAIR("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", max_beep_count, " targetTemp:", targetTemp DXC_SAY);
 
   /*
   SERIAL_ECHOLNPAIR(
     "start of resume_print()\ndual_x_carriage_mode:", dual_x_carriage_mode,
     "\nextruder_duplication_enabled:", extruder_duplication_enabled,
     "\nactive_extruder:", active_extruder,
     "\n"
   );
@@ -570,23 +570,22 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
 
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.heater_idle[e].timed_out;
     thermalManager.reset_hotend_idle_timer(e);
   }
 
-  if (targetTemp > thermalManager.degTargetHotend(active_extruder)) {
+  if (targetTemp > thermalManager.degTargetHotend(active_extruder))
     thermalManager.setTargetHotend(targetTemp, active_extruder);
-  }
 
   // Load the new filament
   load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
 
   if (targetTemp > 0) {
     thermalManager.setTargetHotend(targetTemp, active_extruder);
     thermalManager.wait_for_hotend(active_extruder, false);
   }
 
   ui.pause_show_message(PAUSE_MESSAGE_RESUME);

commit 1aa421efe54eef40a5ba2ba7706908a4ca384586
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Feb 28 19:50:17 2021 -0600

    Filament sensor cleanup

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index c1f951e764..a6a28925ed 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -185,25 +185,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
 
   if (pause_for_user) {
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
     first_impatient_beep(max_beep_count);
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
     #if ENABLED(HOST_PROMPT_SUPPORT)
-      const char tool = '0'
-        #if NUM_RUNOUT_SENSORS > 1
-          + active_extruder
-        #endif
-      ;
+      const char tool = '0' + TERN0(MULTI_FILAMENT_SENSOR, active_extruder);
       host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool, CONTINUE_STR);
     #endif
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Load Filament")));
 
     while (wait_for_user) {
       impatient_beep(max_beep_count);
       idle_no_sleep();
     }
   }

commit dd42831cba7334c5d106ba435bdb41b6135971bb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Feb 28 19:43:46 2021 -0600

    Serial macros cleanup

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index e0b4f88f9b..c1f951e764 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -453,21 +453,21 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
  *
  * Used by M125 and M600
  */
 
 void show_continue_prompt(const bool is_reload) {
   DEBUG_SECTION(scp, "pause_print", true);
   DEBUG_ECHOLNPAIR("... is_reload:", is_reload);
 
   ui.pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING);
   SERIAL_ECHO_START();
-  serialprintPGM(is_reload ? PSTR(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
+  SERIAL_ECHOPGM_P(is_reload ? PSTR(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(wfc, "wait_for_confirmation", true);
   DEBUG_ECHOLNPAIR("... is_reload:", is_reload, " maxbeep:", max_beep_count DXC_SAY);
 
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 

commit 83a156ef47be2f8e43e346bacbbcff809e4127bb
Author: Arjan Mels <43108771+arjanmels@users.noreply.github.com>
Date:   Sat Feb 27 20:32:57 2021 +0100

    Fix M876 when called from EP (#21210)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 012e6c6e50..e0b4f88f9b 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -252,21 +252,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
         if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
         // Extrude filament to get into hotend
         unscaled_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
-      TERN_(HOST_PROMPT_SUPPORT, filament_load_host_prompt()); // Initiate another host prompt. (NOTE: host_response_handler may also do this!)
+      TERN_(HOST_PROMPT_SUPPORT, filament_load_host_prompt()); // Initiate another host prompt.
 
       #if HAS_LCD_MENU
         if (show_lcd) {
           // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
           ui.pause_show_message(PAUSE_MESSAGE_OPTION);
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif

commit e7c711996bd3080f5e343eff5556736cbf2e2416
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Mon Feb 8 07:37:24 2021 +0100

    Serial refactor. Default 8-bit ECHO to int, not char (#20985)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 5ab4f2b146..012e6c6e50 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -123,21 +123,21 @@ fil_change_settings_t fc_settings[EXTRUDERS];
  * Ensure a safe temperature for extrusion
  *
  * - Fail if the TARGET temperature is too low
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
  */
 static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=PAUSE_MODE_SAME) {
   DEBUG_SECTION(est, "ensure_safe_temperature", true);
-  DEBUG_ECHOLNPAIR("... wait:", int(wait), " mode:", int(mode));
+  DEBUG_ECHOLNPAIR("... wait:", wait, " mode:", mode);
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder))
       thermalManager.setTargetHotend(thermalManager.extrude_min_temp, active_extruder);
   #endif
 
   ui.pause_show_message(PAUSE_MESSAGE_HEATING, mode); UNUSED(mode);
 
   if (wait) return thermalManager.wait_for_hotend(active_extruder);
 
@@ -169,21 +169,21 @@ static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=P
  * - Return when "Continue" is selected
  *
  * Returns 'true' if load was completed, 'false' for abort
  */
 bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                    const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                    DXC_ARGS
 ) {
   DEBUG_SECTION(lf, "load_filament", true);
-  DEBUG_ECHOLNPAIR("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", int(max_beep_count), " showlcd:", int(show_lcd), " pauseforuser:", int(pause_for_user), " pausemode:", int(mode) DXC_SAY);
+  DEBUG_ECHOLNPAIR("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", max_beep_count, " showlcd:", show_lcd, " pauseforuser:", pause_for_user, " pausemode:", mode DXC_SAY);
 
   if (!ensure_safe_temperature(false, mode)) {
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_STATUS, mode);
     return false;
   }
 
   if (pause_for_user) {
     if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
@@ -302,21 +302,21 @@ inline void disable_active_extruder() {
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
 bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
                      const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                      #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
                        , const float &mix_multiplier/*=1.0*/
                      #endif
 ) {
   DEBUG_SECTION(uf, "unload_filament", true);
-  DEBUG_ECHOLNPAIR("... unloadlen:", unload_length, " showlcd:", int(show_lcd), " mode:", int(mode)
+  DEBUG_ECHOLNPAIR("... unloadlen:", unload_length, " showlcd:", show_lcd, " mode:", mode
     #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
       , " mixmult:", mix_multiplier
     #endif
   );
 
   #if !BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
     constexpr float mix_multiplier = 1.0;
   #endif
 
   if (!ensure_safe_temperature(false, mode)) {
@@ -366,21 +366,21 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
  * - Initial retract, if current temperature is hot enough
  * - Park the nozzle at the given position
  * - Call unload_filament (if a length was specified)
  *
  * Return 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
 bool pause_print(const float &retract, const xyz_pos_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
   DEBUG_SECTION(pp, "pause_print", true);
-  DEBUG_ECHOLNPAIR("... park.x:", park_point.x, " y:", park_point.y, " z:", park_point.z, " unloadlen:", unload_length, " showlcd:", int(show_lcd) DXC_SAY);
+  DEBUG_ECHOLNPAIR("... park.x:", park_point.x, " y:", park_point.y, " z:", park_point.z, " unloadlen:", unload_length, " showlcd:", show_lcd DXC_SAY);
 
   UNUSED(show_lcd);
 
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
     #elif defined(ACTION_ON_PAUSE)
       host_action_pause();
@@ -449,30 +449,30 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
  * - Show "Insert filament and press button to continue"
  *
  * - Wait for a click before returning
  * - Heaters can time out and must reheat before continuing
  *
  * Used by M125 and M600
  */
 
 void show_continue_prompt(const bool is_reload) {
   DEBUG_SECTION(scp, "pause_print", true);
-  DEBUG_ECHOLNPAIR("... is_reload:", int(is_reload));
+  DEBUG_ECHOLNPAIR("... is_reload:", is_reload);
 
   ui.pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING);
   SERIAL_ECHO_START();
   serialprintPGM(is_reload ? PSTR(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(wfc, "wait_for_confirmation", true);
-  DEBUG_ECHOLNPAIR("... is_reload:", is_reload, " maxbeep:", int(max_beep_count) DXC_SAY);
+  DEBUG_ECHOLNPAIR("... is_reload:", is_reload, " maxbeep:", max_beep_count DXC_SAY);
 
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 
   first_impatient_beep(max_beep_count);
 
   // Start the heater idle timers
   const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
@@ -554,21 +554,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
  * - Re-prime the nozzle...
  *   -  FWRETRACT: Recover/prime from the prior G10.
  *   - !FWRETRACT: Retract by resume_position.e, if negative.
  *                 Not sure how this logic comes into use.
  * - Sync the planner E to resume_position.e
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
 void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/, int16_t targetTemp/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(rp, "resume_print", true);
-  DEBUG_ECHOLNPAIR("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", int(max_beep_count), " targetTemp:", targetTemp DXC_SAY);
+  DEBUG_ECHOLNPAIR("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", max_beep_count, " targetTemp:", targetTemp DXC_SAY);
 
   /*
   SERIAL_ECHOLNPAIR(
     "start of resume_print()\ndual_x_carriage_mode:", dual_x_carriage_mode,
     "\nextruder_duplication_enabled:", extruder_duplication_enabled,
     "\nactive_extruder:", active_extruder,
     "\n"
   );
   //*/
 

commit c0870d417a68ff4303100f165282d41be9129a5c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jan 21 03:40:07 2021 -0600

    Move some MarlinCore and MarlinUI code (#20832)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index c8265a154f..5ab4f2b146 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -130,24 +130,21 @@ fil_change_settings_t fc_settings[EXTRUDERS];
  */
 static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=PAUSE_MODE_SAME) {
   DEBUG_SECTION(est, "ensure_safe_temperature", true);
   DEBUG_ECHOLNPAIR("... wait:", int(wait), " mode:", int(mode));
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder))
       thermalManager.setTargetHotend(thermalManager.extrude_min_temp, active_extruder);
   #endif
 
-  #if HAS_LCD_MENU
-    lcd_pause_show_message(PAUSE_MESSAGE_HEATING, mode);
-  #endif
-  UNUSED(mode);
+  ui.pause_show_message(PAUSE_MESSAGE_HEATING, mode); UNUSED(mode);
 
   if (wait) return thermalManager.wait_for_hotend(active_extruder);
 
   // Allow interruption by Emergency Parser M108
   wait_for_heatup = TERN1(PREVENT_COLD_EXTRUSION, !thermalManager.allow_cold_extrude);
   while (wait_for_heatup && ABS(thermalManager.degHotend(active_extruder) - thermalManager.degTargetHotend(active_extruder)) > TEMP_WINDOW)
     idle();
   wait_for_heatup = false;
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
@@ -174,33 +171,27 @@ static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=P
  * Returns 'true' if load was completed, 'false' for abort
  */
 bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                    const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                    DXC_ARGS
 ) {
   DEBUG_SECTION(lf, "load_filament", true);
   DEBUG_ECHOLNPAIR("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", int(max_beep_count), " showlcd:", int(show_lcd), " pauseforuser:", int(pause_for_user), " pausemode:", int(mode) DXC_SAY);
 
-  UNUSED(show_lcd);
-
   if (!ensure_safe_temperature(false, mode)) {
-    #if HAS_LCD_MENU
-      if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS, mode);
-    #endif
+    if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_STATUS, mode);
     return false;
   }
 
   if (pause_for_user) {
-    #if HAS_LCD_MENU
-      if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_INSERT, mode);
-    #endif
+    if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
     first_impatient_beep(max_beep_count);
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0'
         #if NUM_RUNOUT_SENSORS > 1
           + active_extruder
@@ -210,23 +201,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     #endif
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Load Filament")));
 
     while (wait_for_user) {
       impatient_beep(max_beep_count);
       idle_no_sleep();
     }
   }
 
-  #if HAS_LCD_MENU
-    if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_LOAD, mode);
-  #endif
+  if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_LOAD, mode);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     set_duplication_enabled(false, DXC_ext);
   #endif
 
   // Slow Load filament
   if (slow_load_length) unscaled_e_move(slow_load_length, FILAMENT_CHANGE_SLOW_LOAD_FEEDRATE);
 
@@ -243,52 +232,48 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
       planner.settings.retract_acceleration = saved_acceleration;
     #endif
   }
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
-    #if HAS_LCD_MENU
-      if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
-    #endif
+    if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
     TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purging..."), CONTINUE_STR));
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Filament Purging...")));
     wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       unscaled_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
-        #if HAS_LCD_MENU
-          if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
-        #endif
+        if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_PURGE);
 
         // Extrude filament to get into hotend
         unscaled_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       TERN_(HOST_PROMPT_SUPPORT, filament_load_host_prompt()); // Initiate another host prompt. (NOTE: host_response_handler may also do this!)
 
       #if HAS_LCD_MENU
         if (show_lcd) {
           // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
-          lcd_pause_show_message(PAUSE_MESSAGE_OPTION);
+          ui.pause_show_message(PAUSE_MESSAGE_OPTION);
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (TERN0(HAS_LCD_MENU, show_lcd && pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
 
   #endif
   TERN_(HOST_PROMPT_SUPPORT, host_action_prompt_end());
 
@@ -323,36 +308,30 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
                        , const float &mix_multiplier/*=1.0*/
                      #endif
 ) {
   DEBUG_SECTION(uf, "unload_filament", true);
   DEBUG_ECHOLNPAIR("... unloadlen:", unload_length, " showlcd:", int(show_lcd), " mode:", int(mode)
     #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
       , " mixmult:", mix_multiplier
     #endif
   );
 
-  UNUSED(show_lcd);
-
   #if !BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
     constexpr float mix_multiplier = 1.0;
   #endif
 
   if (!ensure_safe_temperature(false, mode)) {
-    #if HAS_LCD_MENU
-      if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
-    #endif
+    if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_STATUS);
     return false;
   }
 
-  #if HAS_LCD_MENU
-    if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_UNLOAD, mode);
-  #endif
+  if (show_lcd) ui.pause_show_message(PAUSE_MESSAGE_UNLOAD, mode);
 
   // Retract filament
   unscaled_e_move(-(FILAMENT_UNLOAD_PURGE_RETRACT) * mix_multiplier, (PAUSE_PARK_RETRACT_FEEDRATE) * mix_multiplier);
 
   // Wait for filament to cool
   safe_delay(FILAMENT_UNLOAD_PURGE_DELAY);
 
   // Quickly purge
   unscaled_e_move((FILAMENT_UNLOAD_PURGE_RETRACT + FILAMENT_UNLOAD_PURGE_LENGTH) * mix_multiplier,
                   (FILAMENT_UNLOAD_PURGE_FEEDRATE) * mix_multiplier);
@@ -472,21 +451,21 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
  * - Wait for a click before returning
  * - Heaters can time out and must reheat before continuing
  *
  * Used by M125 and M600
  */
 
 void show_continue_prompt(const bool is_reload) {
   DEBUG_SECTION(scp, "pause_print", true);
   DEBUG_ECHOLNPAIR("... is_reload:", int(is_reload));
 
-  TERN_(HAS_LCD_MENU, lcd_pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING));
+  ui.pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING);
   SERIAL_ECHO_START();
   serialprintPGM(is_reload ? PSTR(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   DEBUG_SECTION(wfc, "wait_for_confirmation", true);
   DEBUG_ECHOLNPAIR("... is_reload:", is_reload, " maxbeep:", int(max_beep_count) DXC_SAY);
 
   bool nozzle_timed_out = false;
 
@@ -513,21 +492,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
   while (wait_for_user) {
     impatient_beep(max_beep_count);
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.heater_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
-      TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_HEAT));
+      ui.pause_show_message(PAUSE_MESSAGE_HEAT);
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_HEATER_TIMEOUT), GET_TEXT(MSG_REHEAT)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_HEATER_TIMEOUT)));
 
       wait_for_user_response(0, true); // Wait for LCD click or M108
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_INFO, GET_TEXT(MSG_REHEATING)));
 
@@ -607,21 +586,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   }
 
   // Load the new filament
   load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
 
   if (targetTemp > 0) {
     thermalManager.setTargetHotend(targetTemp, active_extruder);
     thermalManager.wait_for_hotend(active_extruder, false);
   }
 
-  TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_RESUME));
+  ui.pause_show_message(PAUSE_MESSAGE_RESUME);
 
   // Check Temperature before moving hotend
   ensure_safe_temperature();
 
   // Retract to prevent oozing
   unscaled_e_move(-(PAUSE_PARK_RETRACT_LENGTH), feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
   if (!axes_should_home()) {
     // Move XY to starting position, then Z
     do_blocking_move_to_xy(resume_position, feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
@@ -646,21 +625,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
     unscaled_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
   #endif
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination.e = current_position.e = resume_position.e));
 
   // Write PLR now to update the z axis value
   TERN_(POWER_LOSS_RECOVERY, if (recovery.enabled) recovery.save(true));
 
-  TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_STATUS));
+  ui.pause_show_message(PAUSE_MESSAGE_STATUS);
 
   #ifdef ACTION_ON_RESUMED
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif
 
   --did_pause_print;
 
   TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, PSTR("Resuming"), DISMISS_STR));

commit 465840e1fb2dd5ce4c996d78ae8764f0d8ec8ea5
Author: Belin Fieldson <thebelin@gmail.com>
Date:   Fri Dec 4 03:49:30 2020 -0700

    Loosen E on pause for fila-manipulation (#20346)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 1593b0cc57..c8265a154f 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -288,20 +288,32 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
 
       // Keep looping if "Purge More" was selected
     } while (TERN0(HAS_LCD_MENU, show_lcd && pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
 
   #endif
   TERN_(HOST_PROMPT_SUPPORT, host_action_prompt_end());
 
   return true;
 }
 
+/**
+ * Disabling E steppers for manual filament change should be fine
+ * as long as users don't spin the E motor ridiculously fast and
+ * send current back to their board, potentially frying it.
+ */
+inline void disable_active_extruder() {
+  #if HAS_E_STEPPER_ENABLE
+    disable_e_stepper(active_extruder);
+    safe_delay(100);
+  #endif
+}
+
 /**
  * Unload filament from the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - Show "wait for unload" placard
  * - Retract, pause, then unload filament
  * - Disable E stepper (on most machines)
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
@@ -350,25 +362,22 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
     const float saved_acceleration = planner.settings.retract_acceleration;
     planner.settings.retract_acceleration = FILAMENT_CHANGE_UNLOAD_ACCEL;
   #endif
 
   unscaled_e_move(unload_length * mix_multiplier, (FILAMENT_CHANGE_UNLOAD_FEEDRATE) * mix_multiplier);
 
   #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
     planner.settings.retract_acceleration = saved_acceleration;
   #endif
 
-  // Disable E steppers for manual change
-  #if HAS_E_STEPPER_ENABLE
-    disable_e_stepper(active_extruder);
-    safe_delay(100);
-  #endif
+  // Disable the Extruder for manual change
+  disable_active_extruder();
 
   return true;
 }
 
 // public:
 
 /**
  * Pause procedure
  *
  * - Abort if already paused
@@ -440,20 +449,23 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
     set_duplication_enabled(false, DXC_ext);
   #endif
 
   if (unload_length)   // Unload the filament
     unload_filament(unload_length, show_lcd, PAUSE_MODE_CHANGE_FILAMENT);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
+  // Disable the Extruder for manual change
+  disable_active_extruder();
+
   return true;
 }
 
 /**
  * For Paused Print:
  * - Show "Press button (or M108) to resume"
  *
  * For Filament Change:
  * - Show "Insert filament and press button to continue"
  *

commit 4258ff1a689705e1c002d354a17a6fc2f6b2564f
Author: pseudex <pseudaex@gmail.com>
Date:   Tue Nov 24 23:20:06 2020 +0100

    Allow cold Filament Load/Unload with M302 P1 (#20262)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 024338f242..1593b0cc57 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -135,24 +135,24 @@ static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=P
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder))
       thermalManager.setTargetHotend(thermalManager.extrude_min_temp, active_extruder);
   #endif
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_HEATING, mode);
   #endif
   UNUSED(mode);
 
-  if (wait)
-    return thermalManager.wait_for_hotend(active_extruder);
+  if (wait) return thermalManager.wait_for_hotend(active_extruder);
 
-  wait_for_heatup = true; // Allow interruption by Emergency Parser M108
+  // Allow interruption by Emergency Parser M108
+  wait_for_heatup = TERN1(PREVENT_COLD_EXTRUSION, !thermalManager.allow_cold_extrude);
   while (wait_for_heatup && ABS(thermalManager.degHotend(active_extruder) - thermalManager.degTargetHotend(active_extruder)) > TEMP_WINDOW)
     idle();
   wait_for_heatup = false;
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     // A user can cancel wait-for-heating with M108
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
       SERIAL_ECHO_MSG(STR_ERR_HOTEND_TOO_COLD);
       return false;
     }

commit 7a04df47f254dc80defaec376d76c113f50dfee6
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Nov 21 20:16:03 2020 -0300

    Fix Load Filament wait (#20243)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 0a3609b3a1..024338f242 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -192,21 +192,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
 
   if (pause_for_user) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     #endif
     SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
     first_impatient_beep(max_beep_count);
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
-
+    wait_for_user = true;    // LCD click or M108 will clear this
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0'
         #if NUM_RUNOUT_SENSORS > 1
           + active_extruder
         #endif
       ;
       host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool, CONTINUE_STR);
     #endif
 
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Load Filament")));

commit 35b9e9b4a5628252b22d78dc0657531ccbb3d8e8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Oct 19 00:25:51 2020 -0500

    Tweak a host prompt call

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 6f970d1a4c..0a3609b3a1 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -192,31 +192,32 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
 
   if (pause_for_user) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     #endif
     SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
     first_impatient_beep(max_beep_count);
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
+
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0'
         #if NUM_RUNOUT_SENSORS > 1
           + active_extruder
         #endif
       ;
-      host_action_prompt_begin(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool);
-      host_action_prompt_button(CONTINUE_STR);
-      host_action_prompt_show();
+      host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool, CONTINUE_STR);
     #endif
+
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Load Filament")));
+
     while (wait_for_user) {
       impatient_beep(max_beep_count);
       idle_no_sleep();
     }
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_LOAD, mode);
   #endif
 

commit eaf6777a6643a6fab23ceaaa4699cb2466ea6b83
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 16 19:36:25 2020 -0500

    Rename ultralcd => marlinui

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index dbf27ad8b8..6f970d1a4c 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -48,21 +48,21 @@
 #endif
 
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "host_actions.h"
 #endif
 
 #if ENABLED(EXTENSIBLE_UI)
   #include "../lcd/extui/ui_api.h"
 #endif
 
-#include "../lcd/ultralcd.h"
+#include "../lcd/marlinui.h"
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "powerloss.h"
 #endif
 
 #include "../libs/nozzle.h"

commit 418b3e5ee26c0284561f07cf462af27971715d12
Author: nb-rapidia <43864438+nb-rapidia@users.noreply.github.com>
Date:   Fri Oct 16 14:59:55 2020 -0700

    Fix IDEX layer shift and DIR states (#19756)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index ffc04af91f..dbf27ad8b8 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -216,45 +216,42 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     }
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_LOAD, mode);
   #endif
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
-    active_extruder = DXC_ext;
-    extruder_duplication_enabled = false;
+    set_duplication_enabled(false, DXC_ext);
   #endif
 
   // Slow Load filament
   if (slow_load_length) unscaled_e_move(slow_load_length, FILAMENT_CHANGE_SLOW_LOAD_FEEDRATE);
 
   // Fast Load Filament
   if (fast_load_length) {
     #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
       const float saved_acceleration = planner.settings.retract_acceleration;
       planner.settings.retract_acceleration = FILAMENT_CHANGE_FAST_LOAD_ACCEL;
     #endif
 
     unscaled_e_move(fast_load_length, FILAMENT_CHANGE_FAST_LOAD_FEEDRATE);
 
     #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
       planner.settings.retract_acceleration = saved_acceleration;
     #endif
   }
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
-    active_extruder = saved_ext;
-    extruder_duplication_enabled = saved_ext_dup_mode;
-    stepper.set_directions();
+    set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
     #endif
 
     TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purging..."), CONTINUE_STR));
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Filament Purging...")));
@@ -432,31 +429,28 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
     unscaled_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
   }
 
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
   if (!axes_should_home())
     nozzle.park(0, park_point);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
-    active_extruder = DXC_ext;
-    extruder_duplication_enabled = false;
+    set_duplication_enabled(false, DXC_ext);
   #endif
 
   if (unload_length)   // Unload the filament
     unload_filament(unload_length, show_lcd, PAUSE_MODE_CHANGE_FILAMENT);
 
   #if ENABLED(DUAL_X_CARRIAGE)
-    active_extruder = saved_ext;
-    extruder_duplication_enabled = saved_ext_dup_mode;
-    stepper.set_directions();
+    set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 
   return true;
 }
 
 /**
  * For Paused Print:
  * - Show "Press button (or M108) to resume"
  *
  * For Filament Change:
@@ -488,22 +482,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
   first_impatient_beep(max_beep_count);
 
   // Start the heater idle timers
   const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
   HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
-    active_extruder = DXC_ext;
-    extruder_duplication_enabled = false;
+    set_duplication_enabled(false, DXC_ext);
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_NOZZLE_PARKED), CONTINUE_STR));
   TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_NOZZLE_PARKED)));
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
     impatient_beep(max_beep_count);
 
@@ -543,23 +536,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), CONTINUE_STR));
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Reheat finished.")));
       wait_for_user = true;
       nozzle_timed_out = false;
 
       first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
   #if ENABLED(DUAL_X_CARRIAGE)
-    active_extruder = saved_ext;
-    extruder_duplication_enabled = saved_ext_dup_mode;
-    stepper.set_directions();
+    set_duplication_enabled(saved_ext_dup_mode, saved_ext);
   #endif
 }
 
 /**
  * Resume or Start print procedure
  *
  * - If not paused, do nothing and return
  * - Reset heater idle timers
  * - Load filament if specified, but only if:
  *   - a nozzle timed out, or

commit 72e3238c3f4fc2a9bf0c69d13a839924581a9490
Author: rlojek <rlojek@users.noreply.github.com>
Date:   Thu Oct 15 20:44:57 2020 +0200

    Fix ADVANCED_PAUSE && !PREVENT_COLD_EXTRUSION (#19740)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 0ab6594021..ffc04af91f 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -125,22 +125,24 @@ fil_change_settings_t fc_settings[EXTRUDERS];
  * - Fail if the TARGET temperature is too low
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
  */
 static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=PAUSE_MODE_SAME) {
   DEBUG_SECTION(est, "ensure_safe_temperature", true);
   DEBUG_ECHOLNPAIR("... wait:", int(wait), " mode:", int(mode));
 
-  if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder))
-    thermalManager.setTargetHotend(thermalManager.extrude_min_temp, active_extruder);
+  #if ENABLED(PREVENT_COLD_EXTRUSION)
+    if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder))
+      thermalManager.setTargetHotend(thermalManager.extrude_min_temp, active_extruder);
+  #endif
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_HEATING, mode);
   #endif
   UNUSED(mode);
 
   if (wait)
     return thermalManager.wait_for_hotend(active_extruder);
 
   wait_for_heatup = true; // Allow interruption by Emergency Parser M108

commit 98427ea92ac538374f8366542c5a51bc213780b5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Oct 10 12:07:00 2020 -0500

    Save PLR on resume from pause (#19676)
    
    Co-Authored-By: shahab <32130261+SHBnik@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index a36ff50756..0ab6594021 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -54,20 +54,24 @@
 #if ENABLED(EXTENSIBLE_UI)
   #include "../lcd/extui/ui_api.h"
 #endif
 
 #include "../lcd/ultralcd.h"
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
+#if ENABLED(POWER_LOSS_RECOVERY)
+  #include "powerloss.h"
+#endif
+
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 #define DEBUG_OUT ENABLED(DEBUG_PAUSE_RESUME)
 #include "../core/debug_out.h"
 
 // private:
 
 static xyze_pos_t resume_position;
 
@@ -633,20 +637,23 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   // If resume_position is negative
   if (resume_position.e < 0) unscaled_e_move(resume_position.e, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
   #if ADVANCED_PAUSE_RESUME_PRIME != 0
     unscaled_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
   #endif
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination.e = current_position.e = resume_position.e));
 
+  // Write PLR now to update the z axis value
+  TERN_(POWER_LOSS_RECOVERY, if (recovery.enabled) recovery.save(true));
+
   TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_STATUS));
 
   #ifdef ACTION_ON_RESUMED
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif
 
   --did_pause_print;
 

commit e56295851f9931506ac6673aa1d222114d2f82f6
Author: Ilya <xxorza@gmail.com>
Date:   Thu Oct 1 15:51:11 2020 -0700

    No move on Park = No move on Resume (#19569)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index f8a7d83260..a36ff50756 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -605,25 +605,27 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   }
 
   TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_RESUME));
 
   // Check Temperature before moving hotend
   ensure_safe_temperature();
 
   // Retract to prevent oozing
   unscaled_e_move(-(PAUSE_PARK_RETRACT_LENGTH), feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
-  // Move XY to starting position, then Z
-  do_blocking_move_to_xy(resume_position, feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
+  if (!axes_should_home()) {
+    // Move XY to starting position, then Z
+    do_blocking_move_to_xy(resume_position, feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
 
-  // Move Z_AXIS to saved position
-  do_blocking_move_to_z(resume_position.z, feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
+    // Move Z_AXIS to saved position
+    do_blocking_move_to_z(resume_position.z, feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
+  }
 
   // Unretract
   unscaled_e_move(PAUSE_PARK_RETRACT_LENGTH, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       unscaled_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif

commit 979876e958e73e642b51eb655461c92947fe1deb
Author: ellensp <ellensp@hotmail.com>
Date:   Mon Sep 14 16:58:39 2020 +1200

    Improve temperature runaway, idle timeout (#19339)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index efc6510756..f8a7d83260 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -477,40 +477,40 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 
   first_impatient_beep(max_beep_count);
 
   // Start the heater idle timers
   const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
-  HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
+  HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_NOZZLE_PARKED), CONTINUE_STR));
   TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_NOZZLE_PARKED)));
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
     impatient_beep(max_beep_count);
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
-      HOTEND_LOOP() nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
+      HOTEND_LOOP() nozzle_timed_out |= thermalManager.heater_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_HEAT));
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_HEATER_TIMEOUT), GET_TEXT(MSG_REHEAT)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_HEATER_TIMEOUT)));
@@ -526,21 +526,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature(false);
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
-      HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
+      HOTEND_LOOP() thermalManager.heater_idle[e].start(nozzle_timeout);
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), CONTINUE_STR));
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Reheat finished.")));
       wait_for_user = true;
       nozzle_timed_out = false;
 
       first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
   #if ENABLED(DUAL_X_CARRIAGE)
@@ -581,21 +581,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
     "\nactive_extruder:", active_extruder,
     "\n"
   );
   //*/
 
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
-    nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
+    nozzle_timed_out |= thermalManager.heater_idle[e].timed_out;
     thermalManager.reset_hotend_idle_timer(e);
   }
 
   if (targetTemp > thermalManager.degTargetHotend(active_extruder)) {
     thermalManager.setTargetHotend(targetTemp, active_extruder);
   }
 
   // Load the new filament
   load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
 

commit b2ba9009d045fc21e7a923e92ab9a91e4275247d
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Thu Sep 10 23:47:58 2020 +0200

    Fix "too cold" in M600 (#19332)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 4089e2b87b..efc6510756 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -374,49 +374,36 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
  * - Initial retract, if current temperature is hot enough
  * - Park the nozzle at the given position
  * - Call unload_filament (if a length was specified)
  *
  * Return 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
 bool pause_print(const float &retract, const xyz_pos_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
   DEBUG_SECTION(pp, "pause_print", true);
-  DEBUG_ECHOLNPAIR("... retract:", retract, " park.x:", park_point.x, " y:", park_point.y, " z:", park_point.z, " unloadlen:", unload_length, " showlcd:", int(show_lcd) DXC_SAY);
+  DEBUG_ECHOLNPAIR("... park.x:", park_point.x, " y:", park_point.y, " z:", park_point.z, " unloadlen:", unload_length, " showlcd:", int(show_lcd) DXC_SAY);
 
   UNUSED(show_lcd);
 
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
     #elif defined(ACTION_ON_PAUSE)
       host_action_pause();
     #endif
   #endif
 
   TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, PSTR("Pause"), DISMISS_STR));
 
-  if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
-    SERIAL_ECHO_MSG(STR_ERR_HOTEND_TOO_COLD);
-
-    #if HAS_LCD_MENU
-      if (show_lcd) { // Show status screen
-        lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
-        LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
-      }
-    #endif
-
-    return false; // unable to reach safe temperature
-  }
-
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)
     if (IS_SD_PRINTING()) {
       card.pauseSDPrint();
       ++did_pause_print; // Indicate SD pause also
     }
   #endif
@@ -427,22 +414,24 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
   resume_position = current_position;
 
   // Wait for buffered blocks to complete
   planner.synchronize();
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
-  if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
+  if (retract && thermalManager.hotEnoughToExtrude(active_extruder)) {
+    DEBUG_ECHOLNPAIR("... retract:", retract);
     unscaled_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
+  }
 
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
   if (!axes_should_home())
     nozzle.park(0, park_point);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
@@ -596,25 +585,26 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
 
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
     thermalManager.reset_hotend_idle_timer(e);
   }
 
-  if (targetTemp > thermalManager.degTargetHotend(active_extruder))
+  if (targetTemp > thermalManager.degTargetHotend(active_extruder)) {
     thermalManager.setTargetHotend(targetTemp, active_extruder);
+  }
 
-  if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) // Load the new filament
-    load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
+  // Load the new filament
+  load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
 
   if (targetTemp > 0) {
     thermalManager.setTargetHotend(targetTemp, active_extruder);
     thermalManager.wait_for_hotend(active_extruder, false);
   }
 
   TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_RESUME));
 
   // Check Temperature before moving hotend
   ensure_safe_temperature();

commit 828a582f4dfc719dbb519b89cccf621a5184d2a1
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Tue Sep 8 04:29:45 2020 +0200

    Make M600 heat up the nozzle. Reset runout on fail. (#19298)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index a7ed93425c..4089e2b87b 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -22,20 +22,22 @@
 
 /**
  * feature/pause.cpp - Pause feature support functions
  * This may be combined with related G-codes if features are consolidated.
  */
 
 #include "../inc/MarlinConfigPre.h"
 
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
 
+//#define DEBUG_PAUSE_RESUME
+
 #include "../MarlinCore.h"
 #include "../gcode/gcode.h"
 #include "../module/motion.h"
 #include "../module/planner.h"
 #include "../module/stepper.h"
 #include "../module/printcounter.h"
 #include "../module/temperature.h"
 
 #if ENABLED(FWRETRACT)
   #include "fwretract.h"
@@ -55,20 +57,23 @@
 
 #include "../lcd/ultralcd.h"
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #include "../libs/nozzle.h"
 #include "pause.h"
 
+#define DEBUG_OUT ENABLED(DEBUG_PAUSE_RESUME)
+#include "../core/debug_out.h"
+
 // private:
 
 static xyze_pos_t resume_position;
 
 #if HAS_LCD_MENU
   PauseMenuResponse pause_menu_response;
   PauseMode pause_mode = PAUSE_MODE_PAUSE_PRINT;
 #endif
 
 fil_change_settings_t fc_settings[EXTRUDERS];
@@ -113,39 +118,46 @@ fil_change_settings_t fc_settings[EXTRUDERS];
 /**
  * Ensure a safe temperature for extrusion
  *
  * - Fail if the TARGET temperature is too low
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
  */
 static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=PAUSE_MODE_SAME) {
+  DEBUG_SECTION(est, "ensure_safe_temperature", true);
+  DEBUG_ECHOLNPAIR("... wait:", int(wait), " mode:", int(mode));
 
-  #if ENABLED(PREVENT_COLD_EXTRUSION)
-    if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
-      SERIAL_ECHO_MSG(STR_ERR_HOTEND_TOO_COLD);
-      return false;
-    }
-  #endif
+  if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder))
+    thermalManager.setTargetHotend(thermalManager.extrude_min_temp, active_extruder);
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_HEATING, mode);
-  #else
-    UNUSED(mode);
   #endif
+  UNUSED(mode);
 
   if (wait)
     return thermalManager.wait_for_hotend(active_extruder);
 
-  while (ABS(thermalManager.degHotend(active_extruder) - thermalManager.degTargetHotend(active_extruder)) > TEMP_WINDOW)
+  wait_for_heatup = true; // Allow interruption by Emergency Parser M108
+  while (wait_for_heatup && ABS(thermalManager.degHotend(active_extruder) - thermalManager.degTargetHotend(active_extruder)) > TEMP_WINDOW)
     idle();
+  wait_for_heatup = false;
+
+  #if ENABLED(PREVENT_COLD_EXTRUSION)
+    // A user can cancel wait-for-heating with M108
+    if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
+      SERIAL_ECHO_MSG(STR_ERR_HOTEND_TOO_COLD);
+      return false;
+    }
+  #endif
 
   return true;
 }
 
 /**
  * Load filament into the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard
@@ -153,21 +165,24 @@ static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=P
  * - Show "Purge more" / "Continue" menu
  * - Return when "Continue" is selected
  *
  * Returns 'true' if load was completed, 'false' for abort
  */
 bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                    const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                    DXC_ARGS
 ) {
-  TERN(HAS_LCD_MENU,,UNUSED(show_lcd));
+  DEBUG_SECTION(lf, "load_filament", true);
+  DEBUG_ECHOLNPAIR("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", int(max_beep_count), " showlcd:", int(show_lcd), " pauseforuser:", int(pause_for_user), " pausemode:", int(mode) DXC_SAY);
+
+  UNUSED(show_lcd);
 
   if (!ensure_safe_temperature(false, mode)) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS, mode);
     #endif
     return false;
   }
 
   if (pause_for_user) {
     #if HAS_LCD_MENU
@@ -285,21 +300,28 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
  * - Disable E stepper (on most machines)
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
 bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
                      const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                      #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
                        , const float &mix_multiplier/*=1.0*/
                      #endif
 ) {
-  TERN(HAS_LCD_MENU,,UNUSED(show_lcd));
+  DEBUG_SECTION(uf, "unload_filament", true);
+  DEBUG_ECHOLNPAIR("... unloadlen:", unload_length, " showlcd:", int(show_lcd), " mode:", int(mode)
+    #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
+      , " mixmult:", mix_multiplier
+    #endif
+  );
+
+  UNUSED(show_lcd);
 
   #if !BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
     constexpr float mix_multiplier = 1.0;
   #endif
 
   if (!ensure_safe_temperature(false, mode)) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
     #endif
     return false;
@@ -351,21 +373,24 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
  * - Display "wait for start of filament change" (if a length was specified)
  * - Initial retract, if current temperature is hot enough
  * - Park the nozzle at the given position
  * - Call unload_filament (if a length was specified)
  *
  * Return 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
 bool pause_print(const float &retract, const xyz_pos_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
-  TERN(HAS_LCD_MENU,,UNUSED(show_lcd));
+  DEBUG_SECTION(pp, "pause_print", true);
+  DEBUG_ECHOLNPAIR("... retract:", retract, " park.x:", park_point.x, " y:", park_point.y, " z:", park_point.z, " unloadlen:", unload_length, " showlcd:", int(show_lcd) DXC_SAY);
+
+  UNUSED(show_lcd);
 
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
     #elif defined(ACTION_ON_PAUSE)
       host_action_pause();
     #endif
   #endif
@@ -442,26 +467,32 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
  * For Filament Change:
  * - Show "Insert filament and press button to continue"
  *
  * - Wait for a click before returning
  * - Heaters can time out and must reheat before continuing
  *
  * Used by M125 and M600
  */
 
 void show_continue_prompt(const bool is_reload) {
+  DEBUG_SECTION(scp, "pause_print", true);
+  DEBUG_ECHOLNPAIR("... is_reload:", int(is_reload));
+
   TERN_(HAS_LCD_MENU, lcd_pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING));
   SERIAL_ECHO_START();
   serialprintPGM(is_reload ? PSTR(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
+  DEBUG_SECTION(wfc, "wait_for_confirmation", true);
+  DEBUG_ECHOLNPAIR("... is_reload:", is_reload, " maxbeep:", int(max_beep_count) DXC_SAY);
+
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 
   first_impatient_beep(max_beep_count);
 
   // Start the heater idle timers
   const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
   HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
@@ -544,20 +575,23 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
  * - Unretract
  * - Re-prime the nozzle...
  *   -  FWRETRACT: Recover/prime from the prior G10.
  *   - !FWRETRACT: Retract by resume_position.e, if negative.
  *                 Not sure how this logic comes into use.
  * - Sync the planner E to resume_position.e
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
 void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/, int16_t targetTemp/*=0*/ DXC_ARGS) {
+  DEBUG_SECTION(rp, "resume_print", true);
+  DEBUG_ECHOLNPAIR("... slowlen:", slow_load_length, " fastlen:", fast_load_length, " purgelen:", purge_length, " maxbeep:", int(max_beep_count), " targetTemp:", targetTemp DXC_SAY);
+
   /*
   SERIAL_ECHOLNPAIR(
     "start of resume_print()\ndual_x_carriage_mode:", dual_x_carriage_mode,
     "\nextruder_duplication_enabled:", extruder_duplication_enabled,
     "\nactive_extruder:", active_extruder,
     "\n"
   );
   //*/
 
   if (!did_pause_print) return;

commit a12ac5e1754f0f66babde400a0406b6cdbff983e
Author: swissnorp <67485708+swissnorp@users.noreply.github.com>
Date:   Thu Aug 27 23:05:53 2020 +0200

    Mark axes not-homed with HOME_AFTER_DEACTIVATE (#18907)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 2cb9c2df71..a7ed93425c 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -406,21 +406,21 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
     unscaled_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
-  if (!axes_need_homing())
+  if (!axes_should_home())
     nozzle.park(0, park_point);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   if (unload_length)   // Unload the filament

commit 1b097d0467173ed99eb4ee403481522977303a9e
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Fri Aug 14 20:38:00 2020 +0700

    Wait for hotend temp before Resume move (#19009)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 77f352c399..2cb9c2df71 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -575,34 +575,35 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) // Load the new filament
     load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
 
   if (targetTemp > 0) {
     thermalManager.setTargetHotend(targetTemp, active_extruder);
     thermalManager.wait_for_hotend(active_extruder, false);
   }
 
   TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_RESUME));
 
+  // Check Temperature before moving hotend
+  ensure_safe_temperature();
+
   // Retract to prevent oozing
   unscaled_e_move(-(PAUSE_PARK_RETRACT_LENGTH), feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position, feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
 
   // Move Z_AXIS to saved position
   do_blocking_move_to_z(resume_position.z, feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
 
   // Unretract
   unscaled_e_move(PAUSE_PARK_RETRACT_LENGTH, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
-  ensure_safe_temperature();
-
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       unscaled_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
   if (resume_position.e < 0) unscaled_e_move(resume_position.e, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
   #if ADVANCED_PAUSE_RESUME_PRIME != 0

commit 0bc8d315d8346352e0a1c2b993e21b87ed454c63
Author: ManuelMcLure <manuel@mclure.org>
Date:   Sat Jul 25 19:09:56 2020 -0700

    Close host's Filament Change dialog (#18785)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 291401ca0d..77f352c399 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -264,20 +264,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
           wait_for_user = false;
           lcd_pause_show_message(PAUSE_MESSAGE_OPTION);
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (TERN0(HAS_LCD_MENU, show_lcd && pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
 
   #endif
+  TERN_(HOST_PROMPT_SUPPORT, host_action_prompt_end());
 
   return true;
 }
 
 /**
  * Unload filament from the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - Show "wait for unload" placard
  * - Retract, pause, then unload filament

commit e1191ded02bbc78a9d008ec79fb5ab3af794163b
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Thu Jul 23 00:01:56 2020 -0400

    Fast Filament Change temperature check (#18738)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 5ed6e4d974..291401ca0d 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -112,36 +112,42 @@ fil_change_settings_t fc_settings[EXTRUDERS];
 
 /**
  * Ensure a safe temperature for extrusion
  *
  * - Fail if the TARGET temperature is too low
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
  */
-static bool ensure_safe_temperature(const PauseMode mode=PAUSE_MODE_SAME) {
+static bool ensure_safe_temperature(const bool wait=true, const PauseMode mode=PAUSE_MODE_SAME) {
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
       SERIAL_ECHO_MSG(STR_ERR_HOTEND_TOO_COLD);
       return false;
     }
   #endif
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_HEATING, mode);
   #else
     UNUSED(mode);
   #endif
 
-  return thermalManager.wait_for_hotend(active_extruder);
+  if (wait)
+    return thermalManager.wait_for_hotend(active_extruder);
+
+  while (ABS(thermalManager.degHotend(active_extruder) - thermalManager.degTargetHotend(active_extruder)) > TEMP_WINDOW)
+    idle();
+
+  return true;
 }
 
 /**
  * Load filament into the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard
  * - Load and purge filament
  * - Show "Purge more" / "Continue" menu
@@ -149,21 +155,21 @@ static bool ensure_safe_temperature(const PauseMode mode=PAUSE_MODE_SAME) {
  *
  * Returns 'true' if load was completed, 'false' for abort
  */
 bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                    const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                    DXC_ARGS
 ) {
   TERN(HAS_LCD_MENU,,UNUSED(show_lcd));
 
-  if (!ensure_safe_temperature(mode)) {
+  if (!ensure_safe_temperature(false, mode)) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS, mode);
     #endif
     return false;
   }
 
   if (pause_for_user) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     #endif
@@ -284,21 +290,21 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
                      #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
                        , const float &mix_multiplier/*=1.0*/
                      #endif
 ) {
   TERN(HAS_LCD_MENU,,UNUSED(show_lcd));
 
   #if !BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
     constexpr float mix_multiplier = 1.0;
   #endif
 
-  if (!ensure_safe_temperature(mode)) {
+  if (!ensure_safe_temperature(false, mode)) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
     #endif
     return false;
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_UNLOAD, mode);
   #endif
 
@@ -491,21 +497,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       wait_for_user_response(0, true); // Wait for LCD click or M108
 
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_INFO, GET_TEXT(MSG_REHEATING)));
 
       TERN_(EXTENSIBLE_UI, ExtUI::onStatusChanged_P(GET_TEXT(MSG_REHEATING)));
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
-      ensure_safe_temperature();
+      ensure_safe_temperature(false);
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), CONTINUE_STR));
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Reheat finished.")));
@@ -580,20 +586,22 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
 
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position, feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
 
   // Move Z_AXIS to saved position
   do_blocking_move_to_z(resume_position.z, feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
 
   // Unretract
   unscaled_e_move(PAUSE_PARK_RETRACT_LENGTH, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
+  ensure_safe_temperature();
+
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       unscaled_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
   if (resume_position.e < 0) unscaled_e_move(resume_position.e, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
   #if ADVANCED_PAUSE_RESUME_PRIME != 0

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 931ddb34a3..5ed6e4d974 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 /**
  * feature/pause.cpp - Pause feature support functions
  * This may be combined with related G-codes if features are consolidated.
  */
 
 #include "../inc/MarlinConfigPre.h"
 

commit 1475fd312a1572e1d43978f669bce02a72f63dab
Author: chestwood96 <adi.joachim12@gmail.com>
Date:   Mon May 11 09:06:31 2020 +0200

    M600 R<resume temperature> (#17919)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index f3c57bc923..931ddb34a3 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -77,40 +77,44 @@ fil_change_settings_t fc_settings[EXTRUDERS];
   #include "../sd/cardreader.h"
 #endif
 
 #if ENABLED(EMERGENCY_PARSER)
   #define _PMSG(L) L##_M108
 #else
   #define _PMSG(L) L##_LCD
 #endif
 
 #if HAS_BUZZER
-  static void filament_change_beep(const int8_t max_beep_count, const bool init=false) {
+  static void impatient_beep(const int8_t max_beep_count, const bool restart=false) {
 
     if (TERN0(HAS_LCD_MENU, pause_mode == PAUSE_MODE_PAUSE_PRINT)) return;
 
     static millis_t next_buzz = 0;
     static int8_t runout_beep = 0;
 
-    if (init) next_buzz = runout_beep = 0;
+    if (restart) next_buzz = runout_beep = 0;
+
+    const bool always = max_beep_count < 0;
 
     const millis_t ms = millis();
     if (ELAPSED(ms, next_buzz)) {
-      if (max_beep_count < 0 || runout_beep < max_beep_count + 5) { // Only beep as long as we're supposed to
-        next_buzz = ms + ((max_beep_count < 0 || runout_beep < max_beep_count) ? 1000 : 500);
+      if (always || runout_beep < max_beep_count + 5) { // Only beep as long as we're supposed to
+        next_buzz = ms + ((always || runout_beep < max_beep_count) ? 1000 : 500);
         BUZZ(50, 880 - (runout_beep & 1) * 220);
         runout_beep++;
       }
     }
   }
+  inline void first_impatient_beep(const int8_t max_beep_count) { impatient_beep(max_beep_count, true); }
 #else
-  inline void filament_change_beep(const int8_t, const bool=false) {}
+  inline void impatient_beep(const int8_t, const bool=false) {}
+  inline void first_impatient_beep(const int8_t) {}
 #endif
 
 /**
  * Ensure a safe temperature for extrusion
  *
  * - Fail if the TARGET temperature is too low
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
@@ -158,36 +162,36 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     #endif
     return false;
   }
 
   if (pause_for_user) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     #endif
     SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
-    filament_change_beep(max_beep_count, true);
+    first_impatient_beep(max_beep_count);
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0'
         #if NUM_RUNOUT_SENSORS > 1
           + active_extruder
         #endif
       ;
       host_action_prompt_begin(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool);
       host_action_prompt_button(CONTINUE_STR);
       host_action_prompt_show();
     #endif
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Load Filament")));
     while (wait_for_user) {
-      filament_change_beep(max_beep_count);
+      impatient_beep(max_beep_count);
       idle_no_sleep();
     }
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_LOAD, mode);
   #endif
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
@@ -441,41 +445,41 @@ void show_continue_prompt(const bool is_reload) {
   TERN_(HAS_LCD_MENU, lcd_pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING));
   SERIAL_ECHO_START();
   serialprintPGM(is_reload ? PSTR(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 
-  filament_change_beep(max_beep_count, true);
+  first_impatient_beep(max_beep_count);
 
   // Start the heater idle timers
   const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
   HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_NOZZLE_PARKED), CONTINUE_STR));
   TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_NOZZLE_PARKED)));
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
-    filament_change_beep(max_beep_count);
+    impatient_beep(max_beep_count);
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_HEAT));
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
@@ -501,21 +505,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), CONTINUE_STR));
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Reheat finished.")));
       wait_for_user = true;
       nozzle_timed_out = false;
 
-      filament_change_beep(max_beep_count, true);
+      first_impatient_beep(max_beep_count);
     }
     idle_no_sleep();
   }
   #if ENABLED(DUAL_X_CARRIAGE)
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 }
 
@@ -532,42 +536,50 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
  * - Move the nozzle back to resume_position
  * - Unretract
  * - Re-prime the nozzle...
  *   -  FWRETRACT: Recover/prime from the prior G10.
  *   - !FWRETRACT: Retract by resume_position.e, if negative.
  *                 Not sure how this logic comes into use.
  * - Sync the planner E to resume_position.e
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
-void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
+void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/, int16_t targetTemp/*=0*/ DXC_ARGS) {
   /*
   SERIAL_ECHOLNPAIR(
     "start of resume_print()\ndual_x_carriage_mode:", dual_x_carriage_mode,
     "\nextruder_duplication_enabled:", extruder_duplication_enabled,
     "\nactive_extruder:", active_extruder,
     "\n"
   );
   //*/
 
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
     thermalManager.reset_hotend_idle_timer(e);
   }
 
+  if (targetTemp > thermalManager.degTargetHotend(active_extruder))
+    thermalManager.setTargetHotend(targetTemp, active_extruder);
+
   if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) // Load the new filament
     load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
 
+  if (targetTemp > 0) {
+    thermalManager.setTargetHotend(targetTemp, active_extruder);
+    thermalManager.wait_for_hotend(active_extruder, false);
+  }
+
   TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_RESUME));
 
   // Retract to prevent oozing
   unscaled_e_move(-(PAUSE_PARK_RETRACT_LENGTH), feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position, feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
 
   // Move Z_AXIS to saved position
   do_blocking_move_to_z(resume_position.z, feedRate_t(NOZZLE_PARK_Z_FEEDRATE));

commit 0eeb5e2a29f2f76f0e5eeff661d3161c2910736b
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Apr 25 12:31:21 2020 -0500

    General cleanup: pause, MarlinCore

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 396819324c..f3c57bc923 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -95,20 +95,22 @@ fil_change_settings_t fc_settings[EXTRUDERS];
 
     const millis_t ms = millis();
     if (ELAPSED(ms, next_buzz)) {
       if (max_beep_count < 0 || runout_beep < max_beep_count + 5) { // Only beep as long as we're supposed to
         next_buzz = ms + ((max_beep_count < 0 || runout_beep < max_beep_count) ? 1000 : 500);
         BUZZ(50, 880 - (runout_beep & 1) * 220);
         runout_beep++;
       }
     }
   }
+#else
+  inline void filament_change_beep(const int8_t, const bool=false) {}
 #endif
 
 /**
  * Ensure a safe temperature for extrusion
  *
  * - Fail if the TARGET temperature is too low
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
@@ -141,57 +143,51 @@ static bool ensure_safe_temperature(const PauseMode mode=PAUSE_MODE_SAME) {
  * - Show "Purge more" / "Continue" menu
  * - Return when "Continue" is selected
  *
  * Returns 'true' if load was completed, 'false' for abort
  */
 bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                    const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                    DXC_ARGS
 ) {
-  #if !HAS_LCD_MENU
-    UNUSED(show_lcd);
-  #endif
+  TERN(HAS_LCD_MENU,,UNUSED(show_lcd));
 
   if (!ensure_safe_temperature(mode)) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS, mode);
     #endif
     return false;
   }
 
   if (pause_for_user) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     #endif
     SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
-    #if HAS_BUZZER
-      filament_change_beep(max_beep_count, true);
-    #else
-      UNUSED(max_beep_count);
-    #endif
+    filament_change_beep(max_beep_count, true);
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0'
         #if NUM_RUNOUT_SENSORS > 1
           + active_extruder
         #endif
       ;
       host_action_prompt_begin(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool);
       host_action_prompt_button(CONTINUE_STR);
       host_action_prompt_show();
     #endif
     TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Load Filament")));
     while (wait_for_user) {
-      TERN_(HAS_BUZZER, filament_change_beep(max_beep_count));
+      filament_change_beep(max_beep_count);
       idle_no_sleep();
     }
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_LOAD, mode);
   #endif
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
@@ -278,23 +274,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
  * - Disable E stepper (on most machines)
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
 bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
                      const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                      #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
                        , const float &mix_multiplier/*=1.0*/
                      #endif
 ) {
-  #if !HAS_LCD_MENU
-    UNUSED(show_lcd);
-  #endif
+  TERN(HAS_LCD_MENU,,UNUSED(show_lcd));
 
   #if !BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
     constexpr float mix_multiplier = 1.0;
   #endif
 
   if (!ensure_safe_temperature(mode)) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
     #endif
     return false;
@@ -346,24 +340,21 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
  * - Display "wait for start of filament change" (if a length was specified)
  * - Initial retract, if current temperature is hot enough
  * - Park the nozzle at the given position
  * - Call unload_filament (if a length was specified)
  *
  * Return 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
 bool pause_print(const float &retract, const xyz_pos_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
-
-  #if !HAS_LCD_MENU
-    UNUSED(show_lcd);
-  #endif
+  TERN(HAS_LCD_MENU,,UNUSED(show_lcd));
 
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
     #elif defined(ACTION_ON_PAUSE)
       host_action_pause();
     #endif
   #endif
@@ -450,45 +441,41 @@ void show_continue_prompt(const bool is_reload) {
   TERN_(HAS_LCD_MENU, lcd_pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING));
   SERIAL_ECHO_START();
   serialprintPGM(is_reload ? PSTR(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 
-  #if HAS_BUZZER
-    filament_change_beep(max_beep_count, true);
-  #else
-    UNUSED(max_beep_count);
-  #endif
+  filament_change_beep(max_beep_count, true);
 
   // Start the heater idle timers
   const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
   HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_NOZZLE_PARKED), CONTINUE_STR));
   TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_NOZZLE_PARKED)));
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
-    TERN_(HAS_BUZZER, filament_change_beep(max_beep_count));
+    filament_change_beep(max_beep_count);
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_HEAT));
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
@@ -514,21 +501,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
       TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), CONTINUE_STR));
       TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Reheat finished.")));
       wait_for_user = true;
       nozzle_timed_out = false;
 
-      TERN_(HAS_BUZZER, filament_change_beep(max_beep_count, true));
+      filament_change_beep(max_beep_count, true);
     }
     idle_no_sleep();
   }
   #if ENABLED(DUAL_X_CARRIAGE)
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 }
 

commit 8b3c7dda755ebce5bd57a7ce52891a137ea12b35
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 27 04:41:18 2020 -0500

    Add HAS_FAN and others

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 4b50d3df26..396819324c 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -395,21 +395,21 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
   #endif
 
   print_job_timer.pause();
 
   // Save current position
   resume_position = current_position;
 
   // Wait for buffered blocks to complete
   planner.synchronize();
 
-  #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
+  #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
     unscaled_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
   if (!axes_need_homing())
     nozzle.park(0, park_point);
@@ -614,21 +614,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   #endif
 
   --did_pause_print;
 
   TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, PSTR("Resuming"), DISMISS_STR));
 
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) { card.startFileprint(); --did_pause_print; }
   #endif
 
-  #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
+  #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && HAS_FAN
     thermalManager.set_fans_paused(false);
   #endif
 
   TERN_(HAS_FILAMENT_SENSOR, runout.reset());
 
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 
   TERN_(HAS_DISPLAY, ui.reset_status());
   TERN_(HAS_LCD_MENU, ui.return_to_status());

commit d2a5d51f69ff35961d65577f4855e63d123381fd
Author: Ond≈ôej Nov√Ω <ondrej.novy@firma.seznam.cz>
Date:   Sat Apr 25 05:39:08 2020 +0200

    Add NOZZLE_PARK_Z_RAISE_MIN (#17624)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 64ef914372..4b50d3df26 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -405,21 +405,21 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
     unscaled_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
   if (!axes_need_homing())
-    nozzle.park(2, park_point);
+    nozzle.park(0, park_point);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   if (unload_length)   // Unload the filament
     unload_filament(unload_length, show_lcd, PAUSE_MODE_CHANGE_FILAMENT);

commit 468b813bc1f2ce5026736f27f9e48c36fefa9e9e
Author: Ond≈ôej Nov√Ω <ondrej.novy@firma.seznam.cz>
Date:   Wed Apr 22 23:43:06 2020 +0200

    Better ooze prevention during pause (#17625)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 3eb786752c..64ef914372 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -534,25 +534,27 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
 /**
  * Resume or Start print procedure
  *
  * - If not paused, do nothing and return
  * - Reset heater idle timers
  * - Load filament if specified, but only if:
  *   - a nozzle timed out, or
  *   - the nozzle is already heated.
  * - Display "wait for print to resume"
+ * - Retract to prevent oozing
+ * - Move the nozzle back to resume_position
+ * - Unretract
  * - Re-prime the nozzle...
  *   -  FWRETRACT: Recover/prime from the prior G10.
  *   - !FWRETRACT: Retract by resume_position.e, if negative.
  *                 Not sure how this logic comes into use.
- * - Move the nozzle back to resume_position
  * - Sync the planner E to resume_position.e
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
 void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   /*
   SERIAL_ECHOLNPAIR(
     "start of resume_print()\ndual_x_carriage_mode:", dual_x_carriage_mode,
     "\nextruder_duplication_enabled:", extruder_duplication_enabled,
     "\nactive_extruder:", active_extruder,
@@ -567,36 +569,41 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
     thermalManager.reset_hotend_idle_timer(e);
   }
 
   if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) // Load the new filament
     load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
 
   TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_RESUME));
 
+  // Retract to prevent oozing
+  unscaled_e_move(-(PAUSE_PARK_RETRACT_LENGTH), feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
+
+  // Move XY to starting position, then Z
+  do_blocking_move_to_xy(resume_position, feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
+
+  // Move Z_AXIS to saved position
+  do_blocking_move_to_z(resume_position.z, feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
+
+  // Unretract
+  unscaled_e_move(PAUSE_PARK_RETRACT_LENGTH, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
+
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       unscaled_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
   if (resume_position.e < 0) unscaled_e_move(resume_position.e, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
-
-  // Move XY to starting position, then Z
-  do_blocking_move_to_xy(resume_position, feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
-
-  // Move Z_AXIS to saved position
-  do_blocking_move_to_z(resume_position.z, feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
-
   #if ADVANCED_PAUSE_RESUME_PRIME != 0
     unscaled_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
   #endif
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination.e = current_position.e = resume_position.e));
 
   TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_STATUS));
 
@@ -604,24 +611,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif
 
   --did_pause_print;
 
   TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, PSTR("Resuming"), DISMISS_STR));
 
   #if ENABLED(SDSUPPORT)
-    if (did_pause_print) {
-      card.startFileprint();
-      --did_pause_print;
-    }
+    if (did_pause_print) { card.startFileprint(); --did_pause_print; }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
     thermalManager.set_fans_paused(false);
   #endif
 
   TERN_(HAS_FILAMENT_SENSOR, runout.reset());
 
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();

commit 6d90d1e1f552dca5e21bc61b676b8e8ce731b280
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 22 16:35:03 2020 -0500

    Apply TERN to compact code (#17619)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 3b4ac9c27a..3eb786752c 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -79,23 +79,21 @@ fil_change_settings_t fc_settings[EXTRUDERS];
 
 #if ENABLED(EMERGENCY_PARSER)
   #define _PMSG(L) L##_M108
 #else
   #define _PMSG(L) L##_LCD
 #endif
 
 #if HAS_BUZZER
   static void filament_change_beep(const int8_t max_beep_count, const bool init=false) {
 
-    #if HAS_LCD_MENU
-      if (pause_mode == PAUSE_MODE_PAUSE_PRINT) return;
-    #endif
+    if (TERN0(HAS_LCD_MENU, pause_mode == PAUSE_MODE_PAUSE_PRINT)) return;
 
     static millis_t next_buzz = 0;
     static int8_t runout_beep = 0;
 
     if (init) next_buzz = runout_beep = 0;
 
     const millis_t ms = millis();
     if (ELAPSED(ms, next_buzz)) {
       if (max_beep_count < 0 || runout_beep < max_beep_count + 5) { // Only beep as long as we're supposed to
         next_buzz = ms + ((max_beep_count < 0 || runout_beep < max_beep_count) ? 1000 : 500);
@@ -177,27 +175,23 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0'
         #if NUM_RUNOUT_SENSORS > 1
           + active_extruder
         #endif
       ;
       host_action_prompt_begin(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool);
       host_action_prompt_button(CONTINUE_STR);
       host_action_prompt_show();
     #endif
-    #if ENABLED(EXTENSIBLE_UI)
-      ExtUI::onUserConfirmRequired_P(PSTR("Load Filament"));
-    #endif
+    TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Load Filament")));
     while (wait_for_user) {
-      #if HAS_BUZZER
-        filament_change_beep(max_beep_count);
-      #endif
+      TERN_(HAS_BUZZER, filament_change_beep(max_beep_count));
       idle_no_sleep();
     }
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_LOAD, mode);
   #endif
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
@@ -228,64 +222,54 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
     #endif
 
-    #if ENABLED(HOST_PROMPT_SUPPORT)
-      host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purging..."), CONTINUE_STR);
-    #endif
-    #if ENABLED(EXTENSIBLE_UI)
-      ExtUI::onUserConfirmRequired_P(PSTR("Filament Purging..."));
-    #endif
+    TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purging..."), CONTINUE_STR));
+    TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Filament Purging...")));
     wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       unscaled_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
         #if HAS_LCD_MENU
           if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
         #endif
 
         // Extrude filament to get into hotend
         unscaled_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
-      #if ENABLED(HOST_PROMPT_SUPPORT)
-        filament_load_host_prompt();  // Initiate another host prompt. (NOTE: host_response_handler may also do this!)
-      #endif
+      TERN_(HOST_PROMPT_SUPPORT, filament_load_host_prompt()); // Initiate another host prompt. (NOTE: host_response_handler may also do this!)
 
       #if HAS_LCD_MENU
         if (show_lcd) {
           // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
           lcd_pause_show_message(PAUSE_MESSAGE_OPTION);
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
-    } while (false
-      #if HAS_LCD_MENU
-        || (show_lcd && pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE)
-      #endif
-    );
+    } while (TERN0(HAS_LCD_MENU, show_lcd && pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE));
 
   #endif
 
   return true;
 }
 
 /**
  * Unload filament from the hotend
  *
  * - Fail if the a safe temperature was not reached
@@ -377,23 +361,21 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
     #elif defined(ACTION_ON_PAUSE)
       host_action_pause();
     #endif
   #endif
 
-  #if ENABLED(HOST_PROMPT_SUPPORT)
-    host_prompt_open(PROMPT_INFO, PSTR("Pause"), DISMISS_STR);
-  #endif
+  TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, PSTR("Pause"), DISMISS_STR));
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ECHO_MSG(STR_ERR_HOTEND_TOO_COLD);
 
     #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
         lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
     #endif
@@ -458,23 +440,21 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
  * For Filament Change:
  * - Show "Insert filament and press button to continue"
  *
  * - Wait for a click before returning
  * - Heaters can time out and must reheat before continuing
  *
  * Used by M125 and M600
  */
 
 void show_continue_prompt(const bool is_reload) {
-  #if HAS_LCD_MENU
-    lcd_pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING);
-  #endif
+  TERN_(HAS_LCD_MENU, lcd_pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING));
   SERIAL_ECHO_START();
   serialprintPGM(is_reload ? PSTR(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 
   #if HAS_BUZZER
@@ -490,86 +470,65 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
-  #if ENABLED(HOST_PROMPT_SUPPORT)
-    host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_NOZZLE_PARKED), CONTINUE_STR);
-  #endif
-  #if ENABLED(EXTENSIBLE_UI)
-    ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_NOZZLE_PARKED));
-  #endif
+  TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_NOZZLE_PARKED), CONTINUE_STR));
+  TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_NOZZLE_PARKED)));
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
-    #if HAS_BUZZER
-      filament_change_beep(max_beep_count);
-    #endif
+    TERN_(HAS_BUZZER, filament_change_beep(max_beep_count));
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
-      #if HAS_LCD_MENU
-        lcd_pause_show_message(PAUSE_MESSAGE_HEAT);
-      #endif
+      TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_HEAT));
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
 
-      #if ENABLED(HOST_PROMPT_SUPPORT)
-        host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_HEATER_TIMEOUT), GET_TEXT(MSG_REHEAT));
-      #endif
+      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_HEATER_TIMEOUT), GET_TEXT(MSG_REHEAT)));
 
-      #if ENABLED(EXTENSIBLE_UI)
-        ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_HEATER_TIMEOUT));
-      #endif
+      TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_HEATER_TIMEOUT)));
 
       wait_for_user_response(0, true); // Wait for LCD click or M108
 
-      #if ENABLED(HOST_PROMPT_SUPPORT)
-        host_prompt_do(PROMPT_INFO, GET_TEXT(MSG_REHEATING));
-      #endif
-      #if ENABLED(EXTENSIBLE_UI)
-        ExtUI::onStatusChanged_P(GET_TEXT(MSG_REHEATING));
-      #endif
+      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_INFO, GET_TEXT(MSG_REHEATING)));
+
+      TERN_(EXTENSIBLE_UI, ExtUI::onStatusChanged_P(GET_TEXT(MSG_REHEATING)));
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
-      #if ENABLED(HOST_PROMPT_SUPPORT)
-        host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), CONTINUE_STR);
-      #endif
-      #if ENABLED(EXTENSIBLE_UI)
-        ExtUI::onUserConfirmRequired_P(PSTR("Reheat finished."));
-      #endif
+      TERN_(HOST_PROMPT_SUPPORT, host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), CONTINUE_STR));
+      TERN_(EXTENSIBLE_UI, ExtUI::onUserConfirmRequired_P(PSTR("Reheat finished.")));
       wait_for_user = true;
       nozzle_timed_out = false;
 
-      #if HAS_BUZZER
-        filament_change_beep(max_beep_count, true);
-      #endif
+      TERN_(HAS_BUZZER, filament_change_beep(max_beep_count, true));
     }
     idle_no_sleep();
   }
   #if ENABLED(DUAL_X_CARRIAGE)
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 }
 
@@ -606,23 +565,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
     thermalManager.reset_hotend_idle_timer(e);
   }
 
   if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) // Load the new filament
     load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
 
-  #if HAS_LCD_MENU
-    lcd_pause_show_message(PAUSE_MESSAGE_RESUME);
-  #endif
+  TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_RESUME));
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       unscaled_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
   if (resume_position.e < 0) unscaled_e_move(resume_position.e, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
@@ -634,53 +591,43 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   do_blocking_move_to_z(resume_position.z, feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
 
   #if ADVANCED_PAUSE_RESUME_PRIME != 0
     unscaled_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
   #endif
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination.e = current_position.e = resume_position.e));
 
-  #if HAS_LCD_MENU
-    lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
-  #endif
+  TERN_(HAS_LCD_MENU, lcd_pause_show_message(PAUSE_MESSAGE_STATUS));
 
   #ifdef ACTION_ON_RESUMED
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif
 
   --did_pause_print;
 
-  #if ENABLED(HOST_PROMPT_SUPPORT)
-    host_prompt_open(PROMPT_INFO, PSTR("Resuming"), DISMISS_STR);
-  #endif
+  TERN_(HOST_PROMPT_SUPPORT, host_prompt_open(PROMPT_INFO, PSTR("Resuming"), DISMISS_STR));
 
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
     thermalManager.set_fans_paused(false);
   #endif
 
-  #if HAS_FILAMENT_SENSOR
-    runout.reset();
-  #endif
+  TERN_(HAS_FILAMENT_SENSOR, runout.reset());
 
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 
-  #if HAS_DISPLAY
-    ui.reset_status();
-    #if HAS_LCD_MENU
-      ui.return_to_status();
-    #endif
-  #endif
+  TERN_(HAS_DISPLAY, ui.reset_status());
+  TERN_(HAS_LCD_MENU, ui.return_to_status());
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit 000ec9fc139413c7702e8e295a29a21f6a6226e8
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 20 09:43:15 2020 -0500

    Ensure language.h include order
    
    See #17604

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 657f427656..3b4ac9c27a 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -46,21 +46,20 @@
 #endif
 
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "host_actions.h"
 #endif
 
 #if ENABLED(EXTENSIBLE_UI)
   #include "../lcd/extui/ui_api.h"
 #endif
 
-#include "../core/language.h"
 #include "../lcd/ultralcd.h"
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 // private:

commit 2824e67d95a115ae8bde00608c5768cfd4cccd5f
Author: Desuuuu <contact@desuuuu.com>
Date:   Thu Apr 16 07:33:31 2020 +0200

    Add ExtUI::onStatusChanged_P (#17543)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 259b130822..657f427656 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -529,21 +529,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_HEATER_TIMEOUT));
       #endif
 
       wait_for_user_response(0, true); // Wait for LCD click or M108
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_INFO, GET_TEXT(MSG_REHEATING));
       #endif
       #if ENABLED(EXTENSIBLE_UI)
-        ExtUI::onStatusChanged(GET_TEXT(MSG_REHEATING));
+        ExtUI::onStatusChanged_P(GET_TEXT(MSG_REHEATING));
       #endif
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);

commit 0e06aaa2bc5c58e018fcdd466ae8836ac0c38e13
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Apr 3 19:49:45 2020 -0500

    Add millis helper macros

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 23fa2fee01..259b130822 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -478,21 +478,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
   show_continue_prompt(is_reload);
 
   #if HAS_BUZZER
     filament_change_beep(max_beep_count, true);
   #else
     UNUSED(max_beep_count);
   #endif
 
   // Start the heater idle timers
-  const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
+  const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
   HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
@@ -542,21 +542,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
-      const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
+      const millis_t nozzle_timeout = SEC_TO_MS(PAUSE_PARK_NOZZLE_TIMEOUT);
 
       HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), CONTINUE_STR);
       #endif
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onUserConfirmRequired_P(PSTR("Reheat finished."));
       #endif
       wait_for_user = true;
       nozzle_timed_out = false;

commit be0e313c078c7425de7bc45a0371756ee2571056
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Thu Apr 2 13:24:55 2020 -0600

    Touch UI additions, bug fixes (#17379)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 9c615b6ff8..23fa2fee01 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -492,58 +492,58 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   #if ENABLED(HOST_PROMPT_SUPPORT)
-    host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Nozzle Parked"), CONTINUE_STR);
+    host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_NOZZLE_PARKED), CONTINUE_STR);
   #endif
   #if ENABLED(EXTENSIBLE_UI)
-    ExtUI::onUserConfirmRequired_P(PSTR("Nozzle Parked"));
+    ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_NOZZLE_PARKED));
   #endif
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
     #if HAS_BUZZER
       filament_change_beep(max_beep_count);
     #endif
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       #if HAS_LCD_MENU
         lcd_pause_show_message(PAUSE_MESSAGE_HEAT);
       #endif
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
-        host_prompt_do(PROMPT_USER_CONTINUE, PSTR("HeaterTimeout"), PSTR("Reheat"));
+        host_prompt_do(PROMPT_USER_CONTINUE, GET_TEXT(MSG_HEATER_TIMEOUT), GET_TEXT(MSG_REHEAT));
       #endif
 
       #if ENABLED(EXTENSIBLE_UI)
-        ExtUI::onUserConfirmRequired_P(PSTR("HeaterTimeout"));
+        ExtUI::onUserConfirmRequired_P(GET_TEXT(MSG_HEATER_TIMEOUT));
       #endif
 
       wait_for_user_response(0, true); // Wait for LCD click or M108
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
-        host_prompt_do(PROMPT_INFO, PSTR("Reheating"));
+        host_prompt_do(PROMPT_INFO, GET_TEXT(MSG_REHEATING));
       #endif
       #if ENABLED(EXTENSIBLE_UI)
-        ExtUI::onStatusChanged(PSTR("Reheating..."));
+        ExtUI::onStatusChanged(GET_TEXT(MSG_REHEATING));
       #endif
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);

commit 765a9f3471b8a6b67c23f79cc6965e2f795f284a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 29 16:26:55 2020 -0500

    do_pause_e_move => unscaled_e_move

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index de73163cbd..9c615b6ff8 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -127,29 +127,20 @@ static bool ensure_safe_temperature(const PauseMode mode=PAUSE_MODE_SAME) {
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_HEATING, mode);
   #else
     UNUSED(mode);
   #endif
 
   return thermalManager.wait_for_hotend(active_extruder);
 }
 
-void do_pause_e_move(const float &length, const feedRate_t &fr_mm_s) {
-  #if HAS_FILAMENT_SENSOR
-    runout.reset();
-  #endif
-  current_position.e += length / planner.e_factor[active_extruder];
-  line_to_current_position(fr_mm_s);
-  planner.synchronize();
-}
-
 /**
  * Load filament into the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard
  * - Load and purge filament
  * - Show "Purge more" / "Continue" menu
  * - Return when "Continue" is selected
  *
@@ -210,30 +201,30 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
   #endif
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Slow Load filament
-  if (slow_load_length) do_pause_e_move(slow_load_length, FILAMENT_CHANGE_SLOW_LOAD_FEEDRATE);
+  if (slow_load_length) unscaled_e_move(slow_load_length, FILAMENT_CHANGE_SLOW_LOAD_FEEDRATE);
 
   // Fast Load Filament
   if (fast_load_length) {
     #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
       const float saved_acceleration = planner.settings.retract_acceleration;
       planner.settings.retract_acceleration = FILAMENT_CHANGE_FAST_LOAD_ACCEL;
     #endif
 
-    do_pause_e_move(fast_load_length, FILAMENT_CHANGE_FAST_LOAD_FEEDRATE);
+    unscaled_e_move(fast_load_length, FILAMENT_CHANGE_FAST_LOAD_FEEDRATE);
 
     #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
       planner.settings.retract_acceleration = saved_acceleration;
     #endif
   }
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
@@ -246,34 +237,34 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     #endif
 
     #if ENABLED(HOST_PROMPT_SUPPORT)
       host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purging..."), CONTINUE_STR);
     #endif
     #if ENABLED(EXTENSIBLE_UI)
       ExtUI::onUserConfirmRequired_P(PSTR("Filament Purging..."));
     #endif
     wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
-      do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
+      unscaled_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
         #if HAS_LCD_MENU
           if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
         #endif
 
         // Extrude filament to get into hotend
-        do_pause_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
+        unscaled_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         filament_load_host_prompt();  // Initiate another host prompt. (NOTE: host_response_handler may also do this!)
       #endif
 
       #if HAS_LCD_MENU
         if (show_lcd) {
           // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
@@ -324,36 +315,36 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
     #endif
     return false;
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_UNLOAD, mode);
   #endif
 
   // Retract filament
-  do_pause_e_move(-(FILAMENT_UNLOAD_PURGE_RETRACT) * mix_multiplier, (PAUSE_PARK_RETRACT_FEEDRATE) * mix_multiplier);
+  unscaled_e_move(-(FILAMENT_UNLOAD_PURGE_RETRACT) * mix_multiplier, (PAUSE_PARK_RETRACT_FEEDRATE) * mix_multiplier);
 
   // Wait for filament to cool
   safe_delay(FILAMENT_UNLOAD_PURGE_DELAY);
 
   // Quickly purge
-  do_pause_e_move((FILAMENT_UNLOAD_PURGE_RETRACT + FILAMENT_UNLOAD_PURGE_LENGTH) * mix_multiplier,
+  unscaled_e_move((FILAMENT_UNLOAD_PURGE_RETRACT + FILAMENT_UNLOAD_PURGE_LENGTH) * mix_multiplier,
                   (FILAMENT_UNLOAD_PURGE_FEEDRATE) * mix_multiplier);
 
   // Unload filament
   #if FILAMENT_CHANGE_UNLOAD_ACCEL > 0
     const float saved_acceleration = planner.settings.retract_acceleration;
     planner.settings.retract_acceleration = FILAMENT_CHANGE_UNLOAD_ACCEL;
   #endif
 
-  do_pause_e_move(unload_length * mix_multiplier, (FILAMENT_CHANGE_UNLOAD_FEEDRATE) * mix_multiplier);
+  unscaled_e_move(unload_length * mix_multiplier, (FILAMENT_CHANGE_UNLOAD_FEEDRATE) * mix_multiplier);
 
   #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
     planner.settings.retract_acceleration = saved_acceleration;
   #endif
 
   // Disable E steppers for manual change
   #if HAS_E_STEPPER_ENABLE
     disable_e_stepper(active_extruder);
     safe_delay(100);
   #endif
@@ -429,21 +420,21 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
 
   // Wait for buffered blocks to complete
   planner.synchronize();
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
-    do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
+    unscaled_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
   if (!axes_need_homing())
     nozzle.park(2, park_point);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
@@ -624,34 +615,34 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
     load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_RESUME);
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
-      do_pause_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
+      unscaled_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
-  if (resume_position.e < 0) do_pause_e_move(resume_position.e, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
+  if (resume_position.e < 0) unscaled_e_move(resume_position.e, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position, feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
 
   // Move Z_AXIS to saved position
   do_blocking_move_to_z(resume_position.z, feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
 
   #if ADVANCED_PAUSE_RESUME_PRIME != 0
-    do_pause_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
+    unscaled_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
   #endif
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination.e = current_position.e = resume_position.e));
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
   #endif
 

commit 747b964295118d425ad41cd7593dae48ccf9f14f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 28 03:18:53 2020 -0500

    Clean up user-wait, SD completion (#17315)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index fb69803ee7..de73163cbd 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -177,21 +177,20 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     #endif
     SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
     #if HAS_BUZZER
       filament_change_beep(max_beep_count, true);
     #else
       UNUSED(max_beep_count);
     #endif
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
-    wait_for_user = true;    // LCD click or M108 will clear this
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0'
         #if NUM_RUNOUT_SENSORS > 1
           + active_extruder
         #endif
       ;
       host_action_prompt_begin(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool);
       host_action_prompt_button(CONTINUE_STR);
       host_action_prompt_show();
     #endif
@@ -239,27 +238,27 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
     #endif
 
-    wait_for_user = true;
     #if ENABLED(HOST_PROMPT_SUPPORT)
       host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purging..."), CONTINUE_STR);
     #endif
     #if ENABLED(EXTENSIBLE_UI)
       ExtUI::onUserConfirmRequired_P(PSTR("Filament Purging..."));
     #endif
+    wait_for_user = true; // A click or M108 breaks the purge_length loop
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
         #if HAS_LCD_MENU
@@ -501,27 +500,27 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
-  wait_for_user = true;    // LCD click or M108 will clear this
   #if ENABLED(HOST_PROMPT_SUPPORT)
     host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Nozzle Parked"), CONTINUE_STR);
   #endif
   #if ENABLED(EXTENSIBLE_UI)
     ExtUI::onUserConfirmRequired_P(PSTR("Nozzle Parked"));
   #endif
+  wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
     #if HAS_BUZZER
       filament_change_beep(max_beep_count);
     #endif
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
@@ -533,22 +532,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("HeaterTimeout"), PSTR("Reheat"));
       #endif
 
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onUserConfirmRequired_P(PSTR("HeaterTimeout"));
       #endif
 
-      // Wait for LCD click or M108
-      while (wait_for_user) idle_no_sleep();
+      wait_for_user_response(0, true); // Wait for LCD click or M108
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_INFO, PSTR("Reheating"));
       #endif
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onStatusChanged(PSTR("Reheating..."));
       #endif
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);

commit 6bead0c1b04152f6a291d851f6cd4029fe0fc616
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 16:29:29 2020 -0500

    Shorter paths to HAL, ExtUI (#17156)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 175a2d21cd..fb69803ee7 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -43,21 +43,21 @@
 
 #if HAS_FILAMENT_SENSOR
   #include "runout.h"
 #endif
 
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "host_actions.h"
 #endif
 
 #if ENABLED(EXTENSIBLE_UI)
-  #include "../lcd/extensible_ui/ui_api.h"
+  #include "../lcd/extui/ui_api.h"
 #endif
 
 #include "../core/language.h"
 #include "../lcd/ultralcd.h"
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #include "../libs/nozzle.h"

commit 77b82d300a2afdc9b96d23ab0abb929ca0df36b4
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Feb 27 06:34:48 2020 -0600

    Add idle_no_sleep

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 95b5cc953f..175a2d21cd 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -195,21 +195,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
       host_action_prompt_button(CONTINUE_STR);
       host_action_prompt_show();
     #endif
     #if ENABLED(EXTENSIBLE_UI)
       ExtUI::onUserConfirmRequired_P(PSTR("Load Filament"));
     #endif
     while (wait_for_user) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
-      idle(true);
+      idle_no_sleep();
     }
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_LOAD, mode);
   #endif
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
@@ -273,21 +273,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
       #if ENABLED(HOST_PROMPT_SUPPORT)
         filament_load_host_prompt();  // Initiate another host prompt. (NOTE: host_response_handler may also do this!)
       #endif
 
       #if HAS_LCD_MENU
         if (show_lcd) {
           // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
           lcd_pause_show_message(PAUSE_MESSAGE_OPTION);
-          while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle(true);
+          while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle_no_sleep();
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (false
       #if HAS_LCD_MENU
         || (show_lcd && pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE)
       #endif
     );
 
@@ -534,21 +534,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("HeaterTimeout"), PSTR("Reheat"));
       #endif
 
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onUserConfirmRequired_P(PSTR("HeaterTimeout"));
       #endif
 
       // Wait for LCD click or M108
-      while (wait_for_user) idle(true);
+      while (wait_for_user) idle_no_sleep();
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_INFO, PSTR("Reheating"));
       #endif
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onStatusChanged(PSTR("Reheating..."));
       #endif
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
@@ -569,22 +569,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onUserConfirmRequired_P(PSTR("Reheat finished."));
       #endif
       wait_for_user = true;
       nozzle_timed_out = false;
 
       #if HAS_BUZZER
         filament_change_beep(max_beep_count, true);
       #endif
     }
-
-    idle(true);
+    idle_no_sleep();
   }
   #if ENABLED(DUAL_X_CARRIAGE)
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 }
 
 /**
  * Resume or Start print procedure

commit 5ebba4b19fbfc4126e092cc382d0f878e3234f77
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Feb 26 04:11:03 2020 -0600

    More serial strings

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index cfda05612b..95b5cc953f 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -168,21 +168,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS, mode);
     #endif
     return false;
   }
 
   if (pause_for_user) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     #endif
-    SERIAL_ECHO_MSG(_PMSG(MSG_FILAMENT_CHANGE_INSERT));
+    SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_INSERT));
 
     #if HAS_BUZZER
       filament_change_beep(max_beep_count, true);
     #else
       UNUSED(max_beep_count);
     #endif
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
     #if ENABLED(HOST_PROMPT_SUPPORT)
@@ -473,21 +473,21 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
  * - Heaters can time out and must reheat before continuing
  *
  * Used by M125 and M600
  */
 
 void show_continue_prompt(const bool is_reload) {
   #if HAS_LCD_MENU
     lcd_pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING);
   #endif
   SERIAL_ECHO_START();
-  serialprintPGM(is_reload ? PSTR(_PMSG(MSG_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(MSG_FILAMENT_CHANGE_WAIT) "\n"));
+  serialprintPGM(is_reload ? PSTR(_PMSG(STR_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(STR_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 
   #if HAS_BUZZER
     filament_change_beep(max_beep_count, true);
   #else
@@ -523,21 +523,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       #if HAS_LCD_MENU
         lcd_pause_show_message(PAUSE_MESSAGE_HEAT);
       #endif
-      SERIAL_ECHO_MSG(_PMSG(MSG_FILAMENT_CHANGE_HEAT));
+      SERIAL_ECHO_MSG(_PMSG(STR_FILAMENT_CHANGE_HEAT));
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("HeaterTimeout"), PSTR("Reheat"));
       #endif
 
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onUserConfirmRequired_P(PSTR("HeaterTimeout"));
       #endif
 
       // Wait for LCD click or M108

commit e78f607ef33044eecde744e77beea87532817c47
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Feb 26 03:02:03 2020 -0600

    Use a STR_ prefix for non-translated strings

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 9fd279fe5d..cfda05612b 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -113,21 +113,21 @@ fil_change_settings_t fc_settings[EXTRUDERS];
  * - Fail if the TARGET temperature is too low
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
  */
 static bool ensure_safe_temperature(const PauseMode mode=PAUSE_MODE_SAME) {
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
-      SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
+      SERIAL_ECHO_MSG(STR_ERR_HOTEND_TOO_COLD);
       return false;
     }
   #endif
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_HEATING, mode);
   #else
     UNUSED(mode);
   #endif
 
@@ -393,21 +393,21 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
     #elif defined(ACTION_ON_PAUSE)
       host_action_pause();
     #endif
   #endif
 
   #if ENABLED(HOST_PROMPT_SUPPORT)
     host_prompt_open(PROMPT_INFO, PSTR("Pause"), DISMISS_STR);
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
-    SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
+    SERIAL_ECHO_MSG(STR_ERR_HOTEND_TOO_COLD);
 
     #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
         lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
     #endif
 
     return false; // unable to reach safe temperature
   }

commit 073e4443e8b8624078138a0c6f422cccc2959a86
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Feb 14 00:05:06 2020 -0600

    Optimize "Dismiss" string

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 5a7cde2046..9fd279fe5d 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -389,21 +389,21 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
     #elif defined(ACTION_ON_PAUSE)
       host_action_pause();
     #endif
   #endif
 
   #if ENABLED(HOST_PROMPT_SUPPORT)
-    host_prompt_open(PROMPT_INFO, PSTR("Pause"), PSTR("Dismiss"));
+    host_prompt_open(PROMPT_INFO, PSTR("Pause"), DISMISS_STR);
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
 
     #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
         lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
@@ -660,21 +660,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
 
   #ifdef ACTION_ON_RESUMED
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif
 
   --did_pause_print;
 
   #if ENABLED(HOST_PROMPT_SUPPORT)
-    host_prompt_open(PROMPT_INFO, PSTR("Resuming"), PSTR("Dismiss"));
+    host_prompt_open(PROMPT_INFO, PSTR("Resuming"), DISMISS_STR);
   #endif
 
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0

commit 00ba053c90ebbe6d430a48912bc3e00c8a1041c8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Feb 13 23:39:27 2020 -0600

    Clean up host actions code (#16856)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 0bf8fe4b98..5a7cde2046 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -60,39 +60,44 @@
   #include "../libs/buzzer.h"
 #endif
 
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 // private:
 
 static xyze_pos_t resume_position;
 
-PauseMode pause_mode = PAUSE_MODE_PAUSE_PRINT;
-
-PauseMenuResponse pause_menu_response;
+#if HAS_LCD_MENU
+  PauseMenuResponse pause_menu_response;
+  PauseMode pause_mode = PAUSE_MODE_PAUSE_PRINT;
+#endif
 
 fil_change_settings_t fc_settings[EXTRUDERS];
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
 
 #if ENABLED(EMERGENCY_PARSER)
   #define _PMSG(L) L##_M108
 #else
   #define _PMSG(L) L##_LCD
 #endif
 
 #if HAS_BUZZER
   static void filament_change_beep(const int8_t max_beep_count, const bool init=false) {
-    if (pause_mode == PAUSE_MODE_PAUSE_PRINT) return;
+
+    #if HAS_LCD_MENU
+      if (pause_mode == PAUSE_MODE_PAUSE_PRINT) return;
+    #endif
+
     static millis_t next_buzz = 0;
     static int8_t runout_beep = 0;
 
     if (init) next_buzz = runout_beep = 0;
 
     const millis_t ms = millis();
     if (ELAPSED(ms, next_buzz)) {
       if (max_beep_count < 0 || runout_beep < max_beep_count + 5) { // Only beep as long as we're supposed to
         next_buzz = ms + ((max_beep_count < 0 || runout_beep < max_beep_count) ? 1000 : 500);
         BUZZ(50, 880 - (runout_beep & 1) * 220);
@@ -179,25 +184,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     #endif
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
     #if ENABLED(HOST_PROMPT_SUPPORT)
       const char tool = '0'
         #if NUM_RUNOUT_SENSORS > 1
           + active_extruder
         #endif
       ;
-      host_prompt_reason = PROMPT_USER_CONTINUE;
-      host_action_prompt_end();
-      host_action_prompt_begin(PSTR("Load Filament T"), false);
-      SERIAL_CHAR(tool);
-      SERIAL_EOL();
+      host_action_prompt_begin(PROMPT_USER_CONTINUE, PSTR("Load Filament T"), tool);
       host_action_prompt_button(CONTINUE_STR);
       host_action_prompt_show();
     #endif
     #if ENABLED(EXTENSIBLE_UI)
       ExtUI::onUserConfirmRequired_P(PSTR("Load Filament"));
     #endif
     while (wait_for_user) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
@@ -240,63 +241,49 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
     #endif
 
     wait_for_user = true;
     #if ENABLED(HOST_PROMPT_SUPPORT)
-      host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purge Running..."), CONTINUE_STR);
+      host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purging..."), CONTINUE_STR);
     #endif
     #if ENABLED(EXTENSIBLE_UI)
-      ExtUI::onUserConfirmRequired_P(PSTR("Filament Purge Running..."));
+      ExtUI::onUserConfirmRequired_P(PSTR("Filament Purging..."));
     #endif
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
         #if HAS_LCD_MENU
           if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
         #endif
 
         // Extrude filament to get into hotend
         do_pause_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
-      // Show "Purge More" / "Resume" menu and wait for reply
       #if ENABLED(HOST_PROMPT_SUPPORT)
-        host_prompt_reason = PROMPT_FILAMENT_RUNOUT;
-        host_action_prompt_end();   // Close current prompt
-        host_action_prompt_begin(PSTR("Paused"));
-        host_action_prompt_button(PSTR("PurgeMore"));
-        if (false
-          #if HAS_FILAMENT_SENSOR
-            || runout.filament_ran_out
-          #endif
-        )
-          host_action_prompt_button(PSTR("DisableRunout"));
-        else {
-          host_prompt_reason = PROMPT_FILAMENT_RUNOUT;
-          host_action_prompt_button(CONTINUE_STR);
-        }
-        host_action_prompt_show();
+        filament_load_host_prompt();  // Initiate another host prompt. (NOTE: host_response_handler may also do this!)
       #endif
 
       #if HAS_LCD_MENU
         if (show_lcd) {
+          // Show "Purge More" / "Resume" menu and wait for reply
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
           lcd_pause_show_message(PAUSE_MESSAGE_OPTION);
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle(true);
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (false
       #if HAS_LCD_MENU

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 6a2f148ea3..0bf8fe4b98 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 9caf5c05e7e408c7192e689e4ed5fe2735bb2995
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jan 30 03:24:43 2020 -0600

    Refactor heater watch, job timer auto-start (#16725)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 10a1ba6a96..6a2f148ea3 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -557,21 +557,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       while (wait_for_user) idle(true);
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_INFO, PSTR("Reheating"));
       #endif
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onStatusChanged(PSTR("Reheating..."));
       #endif
 
       // Re-enable the heaters if they timed out
-      HOTEND_LOOP() thermalManager.reset_heater_idle_timer(e);
+      HOTEND_LOOP() thermalManager.reset_hotend_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
@@ -626,21 +626,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
     "\n"
   );
   //*/
 
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
-    thermalManager.reset_heater_idle_timer(e);
+    thermalManager.reset_hotend_idle_timer(e);
   }
 
   if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) // Load the new filament
     load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_RESUME);
   #endif
 
   // Intelligent resuming

commit d0e1166cce60381fbdad1105d13765806a525d99
Author: Dirk O. Kaar <19971886+dok-net@users.noreply.github.com>
Date:   Fri Jan 3 02:01:38 2020 +0100

    Fix Visual Micro "Arduino IDE for Visual Studio" support (#16418)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index b314aa7d06..10a1ba6a96 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -22,21 +22,21 @@
 
 /**
  * feature/pause.cpp - Pause feature support functions
  * This may be combined with related G-codes if features are consolidated.
  */
 
 #include "../inc/MarlinConfigPre.h"
 
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
 
-#include "../Marlin.h"
+#include "../MarlinCore.h"
 #include "../gcode/gcode.h"
 #include "../module/motion.h"
 #include "../module/planner.h"
 #include "../module/stepper.h"
 #include "../module/printcounter.h"
 #include "../module/temperature.h"
 
 #if ENABLED(FWRETRACT)
   #include "fwretract.h"
 #endif

commit 0be8b22d3cae0858e855b1fff6af70ac4bfb7492
Author: rado79 <51396577+rado79@users.noreply.github.com>
Date:   Thu Jan 2 04:56:58 2020 +0100

    Add FILAMENT_UNLOAD_PURGE_FEEDRATE (#16372)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 4c4f3aa0d4..b314aa7d06 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -345,21 +345,21 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
   #endif
 
   // Retract filament
   do_pause_e_move(-(FILAMENT_UNLOAD_PURGE_RETRACT) * mix_multiplier, (PAUSE_PARK_RETRACT_FEEDRATE) * mix_multiplier);
 
   // Wait for filament to cool
   safe_delay(FILAMENT_UNLOAD_PURGE_DELAY);
 
   // Quickly purge
   do_pause_e_move((FILAMENT_UNLOAD_PURGE_RETRACT + FILAMENT_UNLOAD_PURGE_LENGTH) * mix_multiplier,
-                  planner.settings.max_feedrate_mm_s[E_AXIS] * mix_multiplier);
+                  (FILAMENT_UNLOAD_PURGE_FEEDRATE) * mix_multiplier);
 
   // Unload filament
   #if FILAMENT_CHANGE_UNLOAD_ACCEL > 0
     const float saved_acceleration = planner.settings.retract_acceleration;
     planner.settings.retract_acceleration = FILAMENT_CHANGE_UNLOAD_ACCEL;
   #endif
 
   do_pause_e_move(unload_length * mix_multiplier, (FILAMENT_CHANGE_UNLOAD_FEEDRATE) * mix_multiplier);
 
   #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0

commit f8065da48f59f403ad7bf3204b3338db8b4b31f4
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Sun Dec 22 01:35:35 2019 +0100

    Reset runout.ran_out on resume (#16230)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 4ec0a2b608..4c4f3aa0d4 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -687,20 +687,24 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
     thermalManager.set_fans_paused(false);
   #endif
 
+  #if HAS_FILAMENT_SENSOR
+    runout.reset();
+  #endif
+
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 
   #if HAS_DISPLAY
     ui.reset_status();
     #if HAS_LCD_MENU
       ui.return_to_status();
     #endif
   #endif
 }

commit 303ddb862ac6da09f9760792c88fcf3a164d791a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Dec 12 22:14:36 2019 -0600

    Tweak some config names

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index ce6c5a6261..4ec0a2b608 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -338,27 +338,27 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
     #endif
     return false;
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_UNLOAD, mode);
   #endif
 
   // Retract filament
-  do_pause_e_move(-(FILAMENT_UNLOAD_RETRACT_LENGTH) * mix_multiplier, (PAUSE_PARK_RETRACT_FEEDRATE) * mix_multiplier);
+  do_pause_e_move(-(FILAMENT_UNLOAD_PURGE_RETRACT) * mix_multiplier, (PAUSE_PARK_RETRACT_FEEDRATE) * mix_multiplier);
 
   // Wait for filament to cool
-  safe_delay(FILAMENT_UNLOAD_DELAY);
+  safe_delay(FILAMENT_UNLOAD_PURGE_DELAY);
 
   // Quickly purge
-  do_pause_e_move((FILAMENT_UNLOAD_RETRACT_LENGTH + FILAMENT_UNLOAD_PURGE_LENGTH) * mix_multiplier,
+  do_pause_e_move((FILAMENT_UNLOAD_PURGE_RETRACT + FILAMENT_UNLOAD_PURGE_LENGTH) * mix_multiplier,
                   planner.settings.max_feedrate_mm_s[E_AXIS] * mix_multiplier);
 
   // Unload filament
   #if FILAMENT_CHANGE_UNLOAD_ACCEL > 0
     const float saved_acceleration = planner.settings.retract_acceleration;
     planner.settings.retract_acceleration = FILAMENT_CHANGE_UNLOAD_ACCEL;
   #endif
 
   do_pause_e_move(unload_length * mix_multiplier, (FILAMENT_CHANGE_UNLOAD_FEEDRATE) * mix_multiplier);
 

commit f83bc0aa13e8cf2d92ec138576cc3a620e74a982
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Nov 29 04:45:07 2019 -0600

    Optimize common strings
    
    Saves 128 bytes in testing with `mftest mega 1 -y`

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 47722c87e3..ce6c5a6261 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -184,21 +184,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
       const char tool = '0'
         #if NUM_RUNOUT_SENSORS > 1
           + active_extruder
         #endif
       ;
       host_prompt_reason = PROMPT_USER_CONTINUE;
       host_action_prompt_end();
       host_action_prompt_begin(PSTR("Load Filament T"), false);
       SERIAL_CHAR(tool);
       SERIAL_EOL();
-      host_action_prompt_button(PSTR("Continue"));
+      host_action_prompt_button(CONTINUE_STR);
       host_action_prompt_show();
     #endif
     #if ENABLED(EXTENSIBLE_UI)
       ExtUI::onUserConfirmRequired_P(PSTR("Load Filament"));
     #endif
     while (wait_for_user) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
       idle(true);
@@ -240,21 +240,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
     #endif
 
     wait_for_user = true;
     #if ENABLED(HOST_PROMPT_SUPPORT)
-      host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purge Running..."), PSTR("Continue"));
+      host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purge Running..."), CONTINUE_STR);
     #endif
     #if ENABLED(EXTENSIBLE_UI)
       ExtUI::onUserConfirmRequired_P(PSTR("Filament Purge Running..."));
     #endif
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
@@ -276,21 +276,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
         host_action_prompt_begin(PSTR("Paused"));
         host_action_prompt_button(PSTR("PurgeMore"));
         if (false
           #if HAS_FILAMENT_SENSOR
             || runout.filament_ran_out
           #endif
         )
           host_action_prompt_button(PSTR("DisableRunout"));
         else {
           host_prompt_reason = PROMPT_FILAMENT_RUNOUT;
-          host_action_prompt_button(PSTR("Continue"));
+          host_action_prompt_button(CONTINUE_STR);
         }
         host_action_prompt_show();
       #endif
 
       #if HAS_LCD_MENU
         if (show_lcd) {
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
           lcd_pause_show_message(PAUSE_MESSAGE_OPTION);
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle(true);
@@ -516,21 +516,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   wait_for_user = true;    // LCD click or M108 will clear this
   #if ENABLED(HOST_PROMPT_SUPPORT)
-    host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Nozzle Parked"), PSTR("Continue"));
+    host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Nozzle Parked"), CONTINUE_STR);
   #endif
   #if ENABLED(EXTENSIBLE_UI)
     ExtUI::onUserConfirmRequired_P(PSTR("Nozzle Parked"));
   #endif
   while (wait_for_user) {
     #if HAS_BUZZER
       filament_change_beep(max_beep_count);
     #endif
 
     // If the nozzle has timed out...
@@ -570,21 +570,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       ensure_safe_temperature();
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
       HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
       #if ENABLED(HOST_PROMPT_SUPPORT)
-        host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), PSTR("Continue"));
+        host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), CONTINUE_STR);
       #endif
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onUserConfirmRequired_P(PSTR("Reheat finished."));
       #endif
       wait_for_user = true;
       nozzle_timed_out = false;
 
       #if HAS_BUZZER
         filament_change_beep(max_beep_count, true);
       #endif

commit 41b5d720e283df989f3a4e0a3a33fbe6667aff7d
Author: Roman Moravƒç√≠k <roman.moravcik@gmail.com>
Date:   Wed Nov 6 22:58:06 2019 +0100

    Fix filament Change heading on LCD (#15783)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 07f1d7d1b2..47722c87e3 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -457,21 +457,21 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
     nozzle.park(2, park_point);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   if (unload_length)   // Unload the filament
-    unload_filament(unload_length, show_lcd);
+    unload_filament(unload_length, show_lcd, PAUSE_MODE_CHANGE_FILAMENT);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 
   return true;
 }
 
@@ -630,21 +630,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
     thermalManager.reset_heater_idle_timer(e);
   }
 
   if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) // Load the new filament
-    load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_PAUSE_PRINT DXC_PASS);
+    load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_SAME DXC_PASS);
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_RESUME);
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);

commit 6a865a614620d71521bd3dc032adffe0bf82378c
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Wed Oct 9 18:46:10 2019 -0600

    Multi-language support (#15453)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index b319bbab6e..07f1d7d1b2 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -46,20 +46,21 @@
 #endif
 
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "host_actions.h"
 #endif
 
 #if ENABLED(EXTENSIBLE_UI)
   #include "../lcd/extensible_ui/ui_api.h"
 #endif
 
+#include "../core/language.h"
 #include "../lcd/ultralcd.h"
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 // private:
@@ -69,20 +70,26 @@ static xyze_pos_t resume_position;
 PauseMode pause_mode = PAUSE_MODE_PAUSE_PRINT;
 
 PauseMenuResponse pause_menu_response;
 
 fil_change_settings_t fc_settings[EXTRUDERS];
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
 
+#if ENABLED(EMERGENCY_PARSER)
+  #define _PMSG(L) L##_M108
+#else
+  #define _PMSG(L) L##_LCD
+#endif
+
 #if HAS_BUZZER
   static void filament_change_beep(const int8_t max_beep_count, const bool init=false) {
     if (pause_mode == PAUSE_MODE_PAUSE_PRINT) return;
     static millis_t next_buzz = 0;
     static int8_t runout_beep = 0;
 
     if (init) next_buzz = runout_beep = 0;
 
     const millis_t ms = millis();
     if (ELAPSED(ms, next_buzz)) {
@@ -156,21 +163,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS, mode);
     #endif
     return false;
   }
 
   if (pause_for_user) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     #endif
-    SERIAL_ECHO_MSG(MSG_FILAMENT_CHANGE_INSERT);
+    SERIAL_ECHO_MSG(_PMSG(MSG_FILAMENT_CHANGE_INSERT));
 
     #if HAS_BUZZER
       filament_change_beep(max_beep_count, true);
     #else
       UNUSED(max_beep_count);
     #endif
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
     #if ENABLED(HOST_PROMPT_SUPPORT)
@@ -181,21 +188,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
       ;
       host_prompt_reason = PROMPT_USER_CONTINUE;
       host_action_prompt_end();
       host_action_prompt_begin(PSTR("Load Filament T"), false);
       SERIAL_CHAR(tool);
       SERIAL_EOL();
       host_action_prompt_button(PSTR("Continue"));
       host_action_prompt_show();
     #endif
     #if ENABLED(EXTENSIBLE_UI)
-      ExtUI::onUserConfirmRequired(PSTR("Load Filament"));
+      ExtUI::onUserConfirmRequired_P(PSTR("Load Filament"));
     #endif
     while (wait_for_user) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
       idle(true);
     }
   }
 
   #if HAS_LCD_MENU
@@ -236,21 +243,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
 
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
     #endif
 
     wait_for_user = true;
     #if ENABLED(HOST_PROMPT_SUPPORT)
       host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purge Running..."), PSTR("Continue"));
     #endif
     #if ENABLED(EXTENSIBLE_UI)
-      ExtUI::onUserConfirmRequired(PSTR("Filament Purge Running..."));
+      ExtUI::onUserConfirmRequired_P(PSTR("Filament Purge Running..."));
     #endif
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
@@ -474,28 +481,20 @@ bool pause_print(const float &retract, const xyz_pos_t &park_point, const float
  *
  * For Filament Change:
  * - Show "Insert filament and press button to continue"
  *
  * - Wait for a click before returning
  * - Heaters can time out and must reheat before continuing
  *
  * Used by M125 and M600
  */
 
-#if (HAS_LCD_MENU || ENABLED(EXTENSIBLE_UI)) && ENABLED(EMERGENCY_PARSER)
-  #define _PMSG(L) L
-#elif ENABLED(EMERGENCY_PARSER)
-  #define _PMSG(L) L##_M108
-#else
-  #define _PMSG(L) L##_LCD
-#endif
-
 void show_continue_prompt(const bool is_reload) {
   #if HAS_LCD_MENU
     lcd_pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING);
   #endif
   SERIAL_ECHO_START();
   serialprintPGM(is_reload ? PSTR(_PMSG(MSG_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(MSG_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   bool nozzle_timed_out = false;
@@ -520,21 +519,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   wait_for_user = true;    // LCD click or M108 will clear this
   #if ENABLED(HOST_PROMPT_SUPPORT)
     host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Nozzle Parked"), PSTR("Continue"));
   #endif
   #if ENABLED(EXTENSIBLE_UI)
-    ExtUI::onUserConfirmRequired(PSTR("Nozzle Parked"));
+    ExtUI::onUserConfirmRequired_P(PSTR("Nozzle Parked"));
   #endif
   while (wait_for_user) {
     #if HAS_BUZZER
       filament_change_beep(max_beep_count);
     #endif
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
 
@@ -544,21 +543,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       #if HAS_LCD_MENU
         lcd_pause_show_message(PAUSE_MESSAGE_HEAT);
       #endif
       SERIAL_ECHO_MSG(_PMSG(MSG_FILAMENT_CHANGE_HEAT));
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("HeaterTimeout"), PSTR("Reheat"));
       #endif
 
       #if ENABLED(EXTENSIBLE_UI)
-        ExtUI::onUserConfirmRequired(PSTR("HeaterTimeout"));
+        ExtUI::onUserConfirmRequired_P(PSTR("HeaterTimeout"));
       #endif
 
       // Wait for LCD click or M108
       while (wait_for_user) idle(true);
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_INFO, PSTR("Reheating"));
       #endif
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onStatusChanged(PSTR("Reheating..."));
@@ -574,21 +573,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
       HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), PSTR("Continue"));
       #endif
       #if ENABLED(EXTENSIBLE_UI)
-        ExtUI::onUserConfirmRequired("Reheat finished.");
+        ExtUI::onUserConfirmRequired_P(PSTR("Reheat finished."));
       #endif
       wait_for_user = true;
       nozzle_timed_out = false;
 
       #if HAS_BUZZER
         filament_change_beep(max_beep_count, true);
       #endif
     }
 
     idle(true);

commit 6b945eb548c7478e38dac161edc717a177c6d9ef
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 2 19:05:12 2019 -0500

    Show "FILAMENT CHANGE" during filament change

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 632433094e..b319bbab6e 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -233,24 +233,24 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
     #endif
 
     wait_for_user = true;
     #if ENABLED(HOST_PROMPT_SUPPORT)
-      host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Continuous Purge Running..."), PSTR("Continue"));
+      host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Filament Purge Running..."), PSTR("Continue"));
     #endif
     #if ENABLED(EXTENSIBLE_UI)
-      ExtUI::onUserConfirmRequired(PSTR("Continuous Purge Running..."));
+      ExtUI::onUserConfirmRequired(PSTR("Filament Purge Running..."));
     #endif
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"

commit 72d791a73682fa676959189c89dbf34e85bbfe61
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 2 18:54:20 2019 -0500

    Standardize active/paused functions

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 60f82e0f05..632433094e 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -374,21 +374,21 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
  * Pause procedure
  *
  * - Abort if already paused
  * - Send host action for pause, if configured
  * - Abort if TARGET temperature is too low
  * - Display "wait for start of filament change" (if a length was specified)
  * - Initial retract, if current temperature is hot enough
  * - Park the nozzle at the given position
  * - Call unload_filament (if a length was specified)
  *
- * Returns 'true' if pause was completed, 'false' for abort
+ * Return 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
 bool pause_print(const float &retract, const xyz_pos_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
 
   #if !HAS_LCD_MENU
     UNUSED(show_lcd);
   #endif
 
   if (did_pause_print) return false; // already paused
@@ -596,21 +596,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
   #if ENABLED(DUAL_X_CARRIAGE)
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 }
 
 /**
  * Resume or Start print procedure
  *
- * - Abort if not paused
+ * - If not paused, do nothing and return
  * - Reset heater idle timers
  * - Load filament if specified, but only if:
  *   - a nozzle timed out, or
  *   - the nozzle is already heated.
  * - Display "wait for print to resume"
  * - Re-prime the nozzle...
  *   -  FWRETRACT: Recover/prime from the prior G10.
  *   - !FWRETRACT: Retract by resume_position.e, if negative.
  *                 Not sure how this logic comes into use.
  * - Move the nozzle back to resume_position

commit b198f321c85bd03120fa340036bc915c2cf48236
Author: Timm <saeugetier@googlemail.com>
Date:   Tue Oct 1 02:57:22 2019 +0200

    Add missing motion inline methods (#15433)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index ccb6f6323d..60f82e0f05 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -648,21 +648,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
   if (resume_position.e < 0) do_pause_e_move(resume_position.e, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
   // Move XY to starting position, then Z
-  do_blocking_move_to_xy(xy_pos_t(resume_position), feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
+  do_blocking_move_to_xy(resume_position, feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
 
   // Move Z_AXIS to saved position
   do_blocking_move_to_z(resume_position.z, feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
 
   #if ADVANCED_PAUSE_RESUME_PRIME != 0
     do_pause_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
   #endif
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position

commit 50e4545255605eb506c20eb107270038b0fe7bdb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 29 04:25:39 2019 -0500

    Add custom types for position (#15204)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index ff200d0afb..ccb6f6323d 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -57,21 +57,21 @@
 
 #if HAS_BUZZER
   #include "../libs/buzzer.h"
 #endif
 
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 // private:
 
-static float resume_position[XYZE];
+static xyze_pos_t resume_position;
 
 PauseMode pause_mode = PAUSE_MODE_PAUSE_PRINT;
 
 PauseMenuResponse pause_menu_response;
 
 fil_change_settings_t fc_settings[EXTRUDERS];
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
@@ -119,22 +119,22 @@ static bool ensure_safe_temperature(const PauseMode mode=PAUSE_MODE_SAME) {
     UNUSED(mode);
   #endif
 
   return thermalManager.wait_for_hotend(active_extruder);
 }
 
 void do_pause_e_move(const float &length, const feedRate_t &fr_mm_s) {
   #if HAS_FILAMENT_SENSOR
     runout.reset();
   #endif
-  current_position[E_AXIS] += length / planner.e_factor[active_extruder];
-  planner.buffer_line(current_position, fr_mm_s, active_extruder);
+  current_position.e += length / planner.e_factor[active_extruder];
+  line_to_current_position(fr_mm_s);
   planner.synchronize();
 }
 
 /**
  * Load filament into the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard
  * - Load and purge filament
@@ -378,21 +378,21 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
  * - Abort if TARGET temperature is too low
  * - Display "wait for start of filament change" (if a length was specified)
  * - Initial retract, if current temperature is hot enough
  * - Park the nozzle at the given position
  * - Call unload_filament (if a length was specified)
  *
  * Returns 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
-bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
+bool pause_print(const float &retract, const xyz_pos_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
 
   #if !HAS_LCD_MENU
     UNUSED(show_lcd);
   #endif
 
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
@@ -425,21 +425,21 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   #if ENABLED(SDSUPPORT)
     if (IS_SD_PRINTING()) {
       card.pauseSDPrint();
       ++did_pause_print; // Indicate SD pause also
     }
   #endif
 
   print_job_timer.pause();
 
   // Save current position
-  COPY(resume_position, current_position);
+  resume_position = current_position;
 
   // Wait for buffered blocks to complete
   planner.synchronize();
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
@@ -604,24 +604,24 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
  * Resume or Start print procedure
  *
  * - Abort if not paused
  * - Reset heater idle timers
  * - Load filament if specified, but only if:
  *   - a nozzle timed out, or
  *   - the nozzle is already heated.
  * - Display "wait for print to resume"
  * - Re-prime the nozzle...
  *   -  FWRETRACT: Recover/prime from the prior G10.
- *   - !FWRETRACT: Retract by resume_position[E], if negative.
+ *   - !FWRETRACT: Retract by resume_position.e, if negative.
  *                 Not sure how this logic comes into use.
  * - Move the nozzle back to resume_position
- * - Sync the planner E to resume_position[E]
+ * - Sync the planner E to resume_position.e
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
 void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   /*
   SERIAL_ECHOLNPAIR(
     "start of resume_print()\ndual_x_carriage_mode:", dual_x_carriage_mode,
     "\nextruder_duplication_enabled:", extruder_duplication_enabled,
     "\nactive_extruder:", active_extruder,
     "\n"
@@ -645,35 +645,35 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
-  if (resume_position[E_AXIS] < 0) do_pause_e_move(resume_position[E_AXIS], feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
+  if (resume_position.e < 0) do_pause_e_move(resume_position.e, feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
   // Move XY to starting position, then Z
-  do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
+  do_blocking_move_to_xy(xy_pos_t(resume_position), feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
 
   // Move Z_AXIS to saved position
-  do_blocking_move_to_z(resume_position[Z_AXIS], feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
+  do_blocking_move_to_z(resume_position.z, feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
 
   #if ADVANCED_PAUSE_RESUME_PRIME != 0
     do_pause_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
   #endif
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
-  planner.set_e_position_mm((destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]));
+  planner.set_e_position_mm((destination.e = current_position.e = resume_position.e));
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
   #endif
 
   #ifdef ACTION_ON_RESUMED
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif

commit 5221e2d991ccae7ff4283a60afb240165c8f0199
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Fri Sep 27 18:06:26 2019 -0400

    Restore Host Prompt Info (#15387)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index cf9f1838d4..ff200d0afb 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -394,20 +394,24 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
     #elif defined(ACTION_ON_PAUSE)
       host_action_pause();
     #endif
   #endif
 
+  #if ENABLED(HOST_PROMPT_SUPPORT)
+    host_prompt_open(PROMPT_INFO, PSTR("Pause"), PSTR("Dismiss"));
+  #endif
+
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
 
     #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
         lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
     #endif
 
@@ -547,21 +551,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       #endif
 
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onUserConfirmRequired(PSTR("HeaterTimeout"));
       #endif
 
       // Wait for LCD click or M108
       while (wait_for_user) idle(true);
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
-        host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheating"));
+        host_prompt_do(PROMPT_INFO, PSTR("Reheating"));
       #endif
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onStatusChanged(PSTR("Reheating..."));
       #endif
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_heater_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
@@ -669,20 +673,24 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   #endif
 
   #ifdef ACTION_ON_RESUMED
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif
 
   --did_pause_print;
 
+  #if ENABLED(HOST_PROMPT_SUPPORT)
+    host_prompt_open(PROMPT_INFO, PSTR("Resuming"), PSTR("Dismiss"));
+  #endif
+
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
     thermalManager.set_fans_paused(false);
   #endif

commit 455dabb18334c89878a75be62bccebd9f537574d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 26 01:28:09 2019 -0500

    Add a feedRate_t data type (#15349)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 8c014af96d..cf9f1838d4 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -115,21 +115,21 @@ static bool ensure_safe_temperature(const PauseMode mode=PAUSE_MODE_SAME) {
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_HEATING, mode);
   #else
     UNUSED(mode);
   #endif
 
   return thermalManager.wait_for_hotend(active_extruder);
 }
 
-void do_pause_e_move(const float &length, const float &fr_mm_s) {
+void do_pause_e_move(const float &length, const feedRate_t &fr_mm_s) {
   #if HAS_FILAMENT_SENSOR
     runout.reset();
   #endif
   current_position[E_AXIS] += length / planner.e_factor[active_extruder];
   planner.buffer_line(current_position, fr_mm_s, active_extruder);
   planner.synchronize();
 }
 
 /**
  * Load filament into the hotend
@@ -641,30 +641,30 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
-  if (resume_position[E_AXIS] < 0) do_pause_e_move(resume_position[E_AXIS], PAUSE_PARK_RETRACT_FEEDRATE);
+  if (resume_position[E_AXIS] < 0) do_pause_e_move(resume_position[E_AXIS], feedRate_t(PAUSE_PARK_RETRACT_FEEDRATE));
 
   // Move XY to starting position, then Z
-  do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], NOZZLE_PARK_XY_FEEDRATE);
+  do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], feedRate_t(NOZZLE_PARK_XY_FEEDRATE));
 
   // Move Z_AXIS to saved position
-  do_blocking_move_to_z(resume_position[Z_AXIS], NOZZLE_PARK_Z_FEEDRATE);
+  do_blocking_move_to_z(resume_position[Z_AXIS], feedRate_t(NOZZLE_PARK_Z_FEEDRATE));
 
   #if ADVANCED_PAUSE_RESUME_PRIME != 0
-    do_pause_e_move(ADVANCED_PAUSE_RESUME_PRIME, ADVANCED_PAUSE_PURGE_FEEDRATE);
+    do_pause_e_move(ADVANCED_PAUSE_RESUME_PRIME, feedRate_t(ADVANCED_PAUSE_PURGE_FEEDRATE));
   #endif
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]));
 
   #if HAS_LCD_MENU
     lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
   #endif
 

commit b2e1f77f58a67ac02503cbe36b22a21e5afaeac0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Sep 25 21:01:29 2019 -0500

    Fix extraneous "Home XYZ First" message

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index d8642cf362..8c014af96d 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -435,21 +435,21 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
     do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
-  if (!axis_unhomed_error())
+  if (!axes_need_homing())
     nozzle.park(2, park_point);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   if (unload_length)   // Unload the filament

commit 7a569ad4d06d2d5541b76f03942cf4d7ab5bc119
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Mon Sep 16 15:49:46 2019 -0600

    LULZBOT_TOUCH_UI fixes. Fix some warnings. (#15276)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index fb3177d8f4..d8642cf362 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -493,20 +493,22 @@ void show_continue_prompt(const bool is_reload) {
   serialprintPGM(is_reload ? PSTR(_PMSG(MSG_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(MSG_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 
   #if HAS_BUZZER
     filament_change_beep(max_beep_count, true);
+  #else
+    UNUSED(max_beep_count);
   #endif
 
   // Start the heater idle timers
   const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
   HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;

commit 841c8ce0d9bdc67af010692014800431a278dd46
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 9 15:43:06 2019 -0500

    Remove PROMPT_INFO / PROMPT_GCODE_INFO (#15210)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index f1b8227b74..fb3177d8f4 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -392,23 +392,20 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   #endif
 
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
     #elif defined(ACTION_ON_PAUSE)
       host_action_pause();
     #endif
-    #if ENABLED(HOST_PROMPT_SUPPORT)
-      host_prompt_open(PROMPT_INFO, PSTR("Pause"));
-    #endif
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
 
     #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
         lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
@@ -670,24 +667,20 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   #endif
 
   #ifdef ACTION_ON_RESUMED
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif
 
   --did_pause_print;
 
-  #if ENABLED(HOST_PROMPT_SUPPORT)
-    host_prompt_open(PROMPT_INFO, PSTR("Resume"));
-  #endif
-
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
     thermalManager.set_fans_paused(false);
   #endif

commit f218405c36d03094f00d867fcebec07072ba7d44
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Aug 25 05:46:02 2019 -0400

    Fix ExtUI invalid speed, timer (#15031)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index aca275b39d..f1b8227b74 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -181,21 +181,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
       ;
       host_prompt_reason = PROMPT_USER_CONTINUE;
       host_action_prompt_end();
       host_action_prompt_begin(PSTR("Load Filament T"), false);
       SERIAL_CHAR(tool);
       SERIAL_EOL();
       host_action_prompt_button(PSTR("Continue"));
       host_action_prompt_show();
     #endif
     #if ENABLED(EXTENSIBLE_UI)
-      ExtUI::onStatusChanged(PSTR("Load Filament"));
+      ExtUI::onUserConfirmRequired(PSTR("Load Filament"));
     #endif
     while (wait_for_user) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
       idle(true);
     }
   }
 
   #if HAS_LCD_MENU
@@ -236,21 +236,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
 
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
     #endif
 
     wait_for_user = true;
     #if ENABLED(HOST_PROMPT_SUPPORT)
       host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Continuous Purge Running..."), PSTR("Continue"));
     #endif
     #if ENABLED(EXTENSIBLE_UI)
-      ExtUI::onStatusChanged(PSTR("Continuous Purge Running..."));
+      ExtUI::onUserConfirmRequired(PSTR("Continuous Purge Running..."));
     #endif
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
@@ -517,21 +517,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   wait_for_user = true;    // LCD click or M108 will clear this
   #if ENABLED(HOST_PROMPT_SUPPORT)
     host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Nozzle Parked"), PSTR("Continue"));
   #endif
   #if ENABLED(EXTENSIBLE_UI)
-    ExtUI::onStatusChanged(PSTR("Nozzle Parked"));
+    ExtUI::onUserConfirmRequired(PSTR("Nozzle Parked"));
   #endif
   while (wait_for_user) {
     #if HAS_BUZZER
       filament_change_beep(max_beep_count);
     #endif
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
 
@@ -541,21 +541,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       #if HAS_LCD_MENU
         lcd_pause_show_message(PAUSE_MESSAGE_HEAT);
       #endif
       SERIAL_ECHO_MSG(_PMSG(MSG_FILAMENT_CHANGE_HEAT));
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("HeaterTimeout"), PSTR("Reheat"));
       #endif
 
       #if ENABLED(EXTENSIBLE_UI)
-        ExtUI::onStatusChanged(PSTR("HeaterTimeout"));
+        ExtUI::onUserConfirmRequired(PSTR("HeaterTimeout"));
       #endif
 
       // Wait for LCD click or M108
       while (wait_for_user) idle(true);
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheating"));
       #endif
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onStatusChanged(PSTR("Reheating..."));

commit af5a7a2925e558847dd731a545dbd5b95b06ff53
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Aug 18 22:03:26 2019 -0400

    Add missing ExtUI user confirmation (#14992)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 17dd469632..aca275b39d 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -180,20 +180,23 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
         #endif
       ;
       host_prompt_reason = PROMPT_USER_CONTINUE;
       host_action_prompt_end();
       host_action_prompt_begin(PSTR("Load Filament T"), false);
       SERIAL_CHAR(tool);
       SERIAL_EOL();
       host_action_prompt_button(PSTR("Continue"));
       host_action_prompt_show();
     #endif
+    #if ENABLED(EXTENSIBLE_UI)
+      ExtUI::onStatusChanged(PSTR("Load Filament"));
+    #endif
     while (wait_for_user) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
       idle(true);
     }
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_LOAD, mode);
@@ -232,20 +235,23 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
     #endif
 
     wait_for_user = true;
     #if ENABLED(HOST_PROMPT_SUPPORT)
       host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Continuous Purge Running..."), PSTR("Continue"));
     #endif
+    #if ENABLED(EXTENSIBLE_UI)
+      ExtUI::onStatusChanged(PSTR("Continuous Purge Running..."));
+    #endif
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
         #if HAS_LCD_MENU
@@ -510,20 +516,23 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   wait_for_user = true;    // LCD click or M108 will clear this
   #if ENABLED(HOST_PROMPT_SUPPORT)
     host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Nozzle Parked"), PSTR("Continue"));
   #endif
+  #if ENABLED(EXTENSIBLE_UI)
+    ExtUI::onStatusChanged(PSTR("Nozzle Parked"));
+  #endif
   while (wait_for_user) {
     #if HAS_BUZZER
       filament_change_beep(max_beep_count);
     #endif
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
@@ -531,20 +540,24 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
     if (nozzle_timed_out) {
       #if HAS_LCD_MENU
         lcd_pause_show_message(PAUSE_MESSAGE_HEAT);
       #endif
       SERIAL_ECHO_MSG(_PMSG(MSG_FILAMENT_CHANGE_HEAT));
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("HeaterTimeout"), PSTR("Reheat"));
       #endif
 
+      #if ENABLED(EXTENSIBLE_UI)
+        ExtUI::onStatusChanged(PSTR("HeaterTimeout"));
+      #endif
+
       // Wait for LCD click or M108
       while (wait_for_user) idle(true);
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheating"));
       #endif
       #if ENABLED(EXTENSIBLE_UI)
         ExtUI::onStatusChanged(PSTR("Reheating..."));
       #endif
 

commit 179d6c4ed115e67ae826b5738e0009c6be2d58ea
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Wed Aug 14 20:05:15 2019 -0600

    Add STARTUP_SCRIPT option. M17 parity with M18. (#14953)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 5700591ca3..17dd469632 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -346,22 +346,22 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
     const float saved_acceleration = planner.settings.retract_acceleration;
     planner.settings.retract_acceleration = FILAMENT_CHANGE_UNLOAD_ACCEL;
   #endif
 
   do_pause_e_move(unload_length * mix_multiplier, (FILAMENT_CHANGE_UNLOAD_FEEDRATE) * mix_multiplier);
 
   #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
     planner.settings.retract_acceleration = saved_acceleration;
   #endif
 
-  // Disable extruders steppers for manual filament changing (only on boards that have separate ENABLE_PINS)
-  #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE_E0(TMC2660) || AXIS_DRIVER_TYPE_E1(TMC2660) || AXIS_DRIVER_TYPE_E2(TMC2660) || AXIS_DRIVER_TYPE_E3(TMC2660) || AXIS_DRIVER_TYPE_E4(TMC2660) || AXIS_DRIVER_TYPE_E5(TMC2660)
+  // Disable E steppers for manual change
+  #if HAS_E_STEPPER_ENABLE
     disable_e_stepper(active_extruder);
     safe_delay(100);
   #endif
 
   return true;
 }
 
 // public:
 
 /**

commit c4bb458763c810f29025fc6b2c5829022ed509c7
Author: Ludy <Ludy87@users.noreply.github.com>
Date:   Mon Jul 29 02:14:50 2019 +0200

    BUZZ cleanup (#14760)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index fddf42d7b1..5700591ca3 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -47,21 +47,25 @@
 
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "host_actions.h"
 #endif
 
 #if ENABLED(EXTENSIBLE_UI)
   #include "../lcd/extensible_ui/ui_api.h"
 #endif
 
 #include "../lcd/ultralcd.h"
-#include "../libs/buzzer.h"
+
+#if HAS_BUZZER
+  #include "../libs/buzzer.h"
+#endif
+
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 // private:
 
 static float resume_position[XYZE];
 
 PauseMode pause_mode = PAUSE_MODE_PAUSE_PRINT;
 
 PauseMenuResponse pause_menu_response;

commit b8cc61262f5d4f322f537e7eb2ac75bec9490249
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Wed Jul 17 04:41:04 2019 -0400

    Finish G12, update Nozzle::clean (#14642)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 74009c9f30..fddf42d7b1 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -429,21 +429,21 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
     thermalManager.set_fans_paused(true);
   #endif
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
     do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
   if (!axis_unhomed_error())
-    Nozzle::park(2, park_point);
+    nozzle.park(2, park_point);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   if (unload_length)   // Unload the filament
     unload_filament(unload_length, show_lcd);

commit d16954dc885f75869b572549c5e90561b89a95bc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jun 29 22:49:50 2019 -0500

    Make KEEPALIVE_STATE a scoped auto-restore (#14446)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 73e33f1aad..74009c9f30 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -182,21 +182,20 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
       SERIAL_EOL();
       host_action_prompt_button(PSTR("Continue"));
       host_action_prompt_show();
     #endif
     while (wait_for_user) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
       idle(true);
     }
-    KEEPALIVE_STATE(IN_HANDLER);
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_LOAD, mode);
   #endif
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
@@ -271,21 +270,20 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
         }
         host_action_prompt_show();
       #endif
 
       #if HAS_LCD_MENU
         if (show_lcd) {
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
           lcd_pause_show_message(PAUSE_MESSAGE_OPTION);
           while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle(true);
-          KEEPALIVE_STATE(IN_HANDLER);
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (false
       #if HAS_LCD_MENU
         || (show_lcd && pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE)
       #endif
     );
 
@@ -573,21 +571,20 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       #endif
     }
 
     idle(true);
   }
   #if ENABLED(DUAL_X_CARRIAGE)
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
-  KEEPALIVE_STATE(IN_HANDLER);
 }
 
 /**
  * Resume or Start print procedure
  *
  * - Abort if not paused
  * - Reset heater idle timers
  * - Load filament if specified, but only if:
  *   - a nozzle timed out, or
  *   - the nozzle is already heated.

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 131acdd7c9..73e33f1aad 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -1,16 +1,16 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.

commit 49ea1c635ac845aa875b22a939b1b96d89154ba8
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Thu Jun 20 15:37:20 2019 -0600

    Fix missing dependencies (#14339)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 28f2a9fd00..131acdd7c9 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -676,15 +676,17 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
     thermalManager.set_fans_paused(false);
   #endif
 
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 
   #if HAS_DISPLAY
     ui.reset_status();
-    ui.return_to_status();
+    #if HAS_LCD_MENU
+      ui.return_to_status();
+    #endif
   #endif
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit 34ae76025eb7f481a5b6e8e43fe77d79a0807127
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Tue May 28 22:36:14 2019 -0400

    Clear Pausing message after M600 park (#14171)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 4ebc41028c..28f2a9fd00 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -674,16 +674,17 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
     }
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
     thermalManager.set_fans_paused(false);
   #endif
 
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 
-  #if HAS_LCD_MENU
+  #if HAS_DISPLAY
+    ui.reset_status();
     ui.return_to_status();
   #endif
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit 227f29090d1c46a4da79db3ae4f84bd96ea8a0ee
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Fri May 10 14:56:13 2019 -0600

    Add heater timeouts to ExtUI (#13970)
    
    - Add local UI methods to get heater timeout state.
    - Add methods to resume timed-out heaters.
    - Re-enable heaters on UI temperature request.
    - Make `ExtUI` show a dialog box if pause needs a button press after reheat.

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 75882a9e56..4ebc41028c 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -42,20 +42,24 @@
 #endif
 
 #if HAS_FILAMENT_SENSOR
   #include "runout.h"
 #endif
 
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "host_actions.h"
 #endif
 
+#if ENABLED(EXTENSIBLE_UI)
+  #include "../lcd/extensible_ui/ui_api.h"
+#endif
+
 #include "../lcd/ultralcd.h"
 #include "../libs/buzzer.h"
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 // private:
 
 static float resume_position[XYZE];
 
 PauseMode pause_mode = PAUSE_MODE_PAUSE_PRINT;
@@ -531,37 +535,43 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("HeaterTimeout"), PSTR("Reheat"));
       #endif
 
       // Wait for LCD click or M108
       while (wait_for_user) idle(true);
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheating"));
       #endif
+      #if ENABLED(EXTENSIBLE_UI)
+        ExtUI::onStatusChanged(PSTR("Reheating..."));
+      #endif
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_heater_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
       HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), PSTR("Continue"));
       #endif
+      #if ENABLED(EXTENSIBLE_UI)
+        ExtUI::onUserConfirmRequired("Reheat finished.");
+      #endif
       wait_for_user = true;
       nozzle_timed_out = false;
 
       #if HAS_BUZZER
         filament_change_beep(max_beep_count, true);
       #endif
     }
 
     idle(true);
   }

commit 3fcab8dbf1f0746a6d3825a9ec099fedbd958943
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sat May 4 16:50:44 2019 -0400

    Option to disable fans during pause (#13820)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 7d5135151c..75882a9e56 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -417,20 +417,24 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   #endif
 
   print_job_timer.pause();
 
   // Save current position
   COPY(resume_position, current_position);
 
   // Wait for buffered blocks to complete
   planner.synchronize();
 
+  #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
+    thermalManager.set_fans_paused(true);
+  #endif
+
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
     do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
   if (!axis_unhomed_error())
     Nozzle::park(2, park_point);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
@@ -653,19 +657,23 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
     host_prompt_open(PROMPT_INFO, PSTR("Resume"));
   #endif
 
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif
 
+  #if ENABLED(ADVANCED_PAUSE_FANS_PAUSE) && FAN_COUNT > 0
+    thermalManager.set_fans_paused(false);
+  #endif
+
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 
   #if HAS_LCD_MENU
     ui.return_to_status();
   #endif
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit ee243e4edfe45fa855d4ff71abf8a9a118b66369
Author: Thomas Moore <tcm0116@users.noreply.github.com>
Date:   Wed May 1 22:55:58 2019 -0400

    Fix mixing extruder filament change (#13803)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 99dbb380e5..7d5135151c 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -295,53 +295,60 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
  *
  * - Fail if the a safe temperature was not reached
  * - Show "wait for unload" placard
  * - Retract, pause, then unload filament
  * - Disable E stepper (on most machines)
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
 bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
                      const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
+                     #if BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
+                       , const float &mix_multiplier/*=1.0*/
+                     #endif
 ) {
   #if !HAS_LCD_MENU
     UNUSED(show_lcd);
   #endif
 
+  #if !BOTH(FILAMENT_UNLOAD_ALL_EXTRUDERS, MIXING_EXTRUDER)
+    constexpr float mix_multiplier = 1.0;
+  #endif
+
   if (!ensure_safe_temperature(mode)) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
     #endif
-
     return false;
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_UNLOAD, mode);
   #endif
 
   // Retract filament
-  do_pause_e_move(-FILAMENT_UNLOAD_RETRACT_LENGTH, PAUSE_PARK_RETRACT_FEEDRATE);
+  do_pause_e_move(-(FILAMENT_UNLOAD_RETRACT_LENGTH) * mix_multiplier, (PAUSE_PARK_RETRACT_FEEDRATE) * mix_multiplier);
 
   // Wait for filament to cool
   safe_delay(FILAMENT_UNLOAD_DELAY);
 
   // Quickly purge
-  do_pause_e_move(FILAMENT_UNLOAD_RETRACT_LENGTH + FILAMENT_UNLOAD_PURGE_LENGTH, planner.settings.max_feedrate_mm_s[E_AXIS]);
+  do_pause_e_move((FILAMENT_UNLOAD_RETRACT_LENGTH + FILAMENT_UNLOAD_PURGE_LENGTH) * mix_multiplier,
+                  planner.settings.max_feedrate_mm_s[E_AXIS] * mix_multiplier);
 
   // Unload filament
   #if FILAMENT_CHANGE_UNLOAD_ACCEL > 0
     const float saved_acceleration = planner.settings.retract_acceleration;
     planner.settings.retract_acceleration = FILAMENT_CHANGE_UNLOAD_ACCEL;
   #endif
 
-  do_pause_e_move(unload_length, FILAMENT_CHANGE_UNLOAD_FEEDRATE);
+  do_pause_e_move(unload_length * mix_multiplier, (FILAMENT_CHANGE_UNLOAD_FEEDRATE) * mix_multiplier);
 
   #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
     planner.settings.retract_acceleration = saved_acceleration;
   #endif
 
   // Disable extruders steppers for manual filament changing (only on boards that have separate ENABLE_PINS)
   #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE_E0(TMC2660) || AXIS_DRIVER_TYPE_E1(TMC2660) || AXIS_DRIVER_TYPE_E2(TMC2660) || AXIS_DRIVER_TYPE_E3(TMC2660) || AXIS_DRIVER_TYPE_E4(TMC2660) || AXIS_DRIVER_TYPE_E5(TMC2660)
     disable_e_stepper(active_extruder);
     safe_delay(100);
   #endif

commit 610fb4668393265bbe2f18fe96a329b832ddc0c3
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Fri Apr 26 03:32:01 2019 -0400

    Fix some ExtUI issues (#13799)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 75705e1593..99dbb380e5 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -649,14 +649,16 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif
 
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 
-  ui.reset_status();
+  #if HAS_LCD_MENU
+    ui.return_to_status();
+  #endif
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit 9a515cbd3268b30eb7a4dc9ea0f96f3a253d9063
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Mar 14 02:26:07 2019 -0500

    Fix Pause Print message and behavior (#13394)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index e67370c78b..75705e1593 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -51,30 +51,33 @@
 
 #include "../lcd/ultralcd.h"
 #include "../libs/buzzer.h"
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 // private:
 
 static float resume_position[XYZE];
 
-AdvancedPauseMenuResponse advanced_pause_menu_response;
+PauseMode pause_mode = PAUSE_MODE_PAUSE_PRINT;
+
+PauseMenuResponse pause_menu_response;
 
 fil_change_settings_t fc_settings[EXTRUDERS];
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
 
 #if HAS_BUZZER
   static void filament_change_beep(const int8_t max_beep_count, const bool init=false) {
+    if (pause_mode == PAUSE_MODE_PAUSE_PRINT) return;
     static millis_t next_buzz = 0;
     static int8_t runout_beep = 0;
 
     if (init) next_buzz = runout_beep = 0;
 
     const millis_t ms = millis();
     if (ELAPSED(ms, next_buzz)) {
       if (max_beep_count < 0 || runout_beep < max_beep_count + 5) { // Only beep as long as we're supposed to
         next_buzz = ms + ((max_beep_count < 0 || runout_beep < max_beep_count) ? 1000 : 500);
         BUZZ(50, 880 - (runout_beep & 1) * 220);
@@ -86,31 +89,31 @@ fil_change_settings_t fc_settings[EXTRUDERS];
 
 /**
  * Ensure a safe temperature for extrusion
  *
  * - Fail if the TARGET temperature is too low
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
  */
-static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_MODE_SAME) {
+static bool ensure_safe_temperature(const PauseMode mode=PAUSE_MODE_SAME) {
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
       SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
       return false;
     }
   #endif
 
   #if HAS_LCD_MENU
-    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_HEATING, mode);
+    lcd_pause_show_message(PAUSE_MESSAGE_HEATING, mode);
   #else
     UNUSED(mode);
   #endif
 
   return thermalManager.wait_for_hotend(active_extruder);
 }
 
 void do_pause_e_move(const float &length, const float &fr_mm_s) {
   #if HAS_FILAMENT_SENSOR
     runout.reset();
@@ -127,37 +130,37 @@ void do_pause_e_move(const float &length, const float &fr_mm_s) {
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard
  * - Load and purge filament
  * - Show "Purge more" / "Continue" menu
  * - Return when "Continue" is selected
  *
  * Returns 'true' if load was completed, 'false' for abort
  */
 bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
-                   const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
+                   const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
                    DXC_ARGS
 ) {
   #if !HAS_LCD_MENU
     UNUSED(show_lcd);
   #endif
 
   if (!ensure_safe_temperature(mode)) {
     #if HAS_LCD_MENU
-      if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS, mode);
+      if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS, mode);
     #endif
     return false;
   }
 
   if (pause_for_user) {
     #if HAS_LCD_MENU
-      if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT, mode);
+      if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_INSERT, mode);
     #endif
     SERIAL_ECHO_MSG(MSG_FILAMENT_CHANGE_INSERT);
 
     #if HAS_BUZZER
       filament_change_beep(max_beep_count, true);
     #else
       UNUSED(max_beep_count);
     #endif
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
@@ -179,21 +182,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     while (wait_for_user) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
       idle(true);
     }
     KEEPALIVE_STATE(IN_HANDLER);
   }
 
   #if HAS_LCD_MENU
-    if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD, mode);
+    if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_LOAD, mode);
   #endif
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Slow Load filament
@@ -215,38 +218,38 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     #if HAS_LCD_MENU
-      if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE);
+      if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
     #endif
 
     wait_for_user = true;
     #if ENABLED(HOST_PROMPT_SUPPORT)
       host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Continuous Purge Running..."), PSTR("Continue"));
     #endif
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
         #if HAS_LCD_MENU
-          if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE);
+          if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_PURGE);
         #endif
 
         // Extrude filament to get into hotend
         do_pause_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       // Show "Purge More" / "Resume" menu and wait for reply
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_reason = PROMPT_FILAMENT_RUNOUT;
         host_action_prompt_end();   // Close current prompt
@@ -262,65 +265,65 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
           host_prompt_reason = PROMPT_FILAMENT_RUNOUT;
           host_action_prompt_button(PSTR("Continue"));
         }
         host_action_prompt_show();
       #endif
 
       #if HAS_LCD_MENU
         if (show_lcd) {
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
-          lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION);
-          while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
+          lcd_pause_show_message(PAUSE_MESSAGE_OPTION);
+          while (pause_menu_response == PAUSE_RESPONSE_WAIT_FOR) idle(true);
           KEEPALIVE_STATE(IN_HANDLER);
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (false
       #if HAS_LCD_MENU
-        || (show_lcd && advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE)
+        || (show_lcd && pause_menu_response == PAUSE_RESPONSE_EXTRUDE_MORE)
       #endif
     );
 
   #endif
 
   return true;
 }
 
 /**
  * Unload filament from the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - Show "wait for unload" placard
  * - Retract, pause, then unload filament
  * - Disable E stepper (on most machines)
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
 bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
-                     const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
+                     const PauseMode mode/*=PAUSE_MODE_PAUSE_PRINT*/
 ) {
   #if !HAS_LCD_MENU
     UNUSED(show_lcd);
   #endif
 
   if (!ensure_safe_temperature(mode)) {
     #if HAS_LCD_MENU
-      if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
+      if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
     #endif
 
     return false;
   }
 
   #if HAS_LCD_MENU
-    if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_UNLOAD, mode);
+    if (show_lcd) lcd_pause_show_message(PAUSE_MESSAGE_UNLOAD, mode);
   #endif
 
   // Retract filament
   do_pause_e_move(-FILAMENT_UNLOAD_RETRACT_LENGTH, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Wait for filament to cool
   safe_delay(FILAMENT_UNLOAD_DELAY);
 
   // Quickly purge
   do_pause_e_move(FILAMENT_UNLOAD_RETRACT_LENGTH + FILAMENT_UNLOAD_PURGE_LENGTH, planner.settings.max_feedrate_mm_s[E_AXIS]);
@@ -380,21 +383,21 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
     #if ENABLED(HOST_PROMPT_SUPPORT)
       host_prompt_open(PROMPT_INFO, PSTR("Pause"));
     #endif
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
 
     #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
+        lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
     #endif
 
     return false; // unable to reach safe temperature
   }
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
@@ -457,21 +460,21 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
 #if (HAS_LCD_MENU || ENABLED(EXTENSIBLE_UI)) && ENABLED(EMERGENCY_PARSER)
   #define _PMSG(L) L
 #elif ENABLED(EMERGENCY_PARSER)
   #define _PMSG(L) L##_M108
 #else
   #define _PMSG(L) L##_LCD
 #endif
 
 void show_continue_prompt(const bool is_reload) {
   #if HAS_LCD_MENU
-    lcd_advanced_pause_show_message(is_reload ? ADVANCED_PAUSE_MESSAGE_INSERT : ADVANCED_PAUSE_MESSAGE_WAITING);
+    lcd_pause_show_message(is_reload ? PAUSE_MESSAGE_INSERT : PAUSE_MESSAGE_WAITING);
   #endif
   SERIAL_ECHO_START();
   serialprintPGM(is_reload ? PSTR(_PMSG(MSG_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(MSG_FILAMENT_CHANGE_WAIT) "\n"));
 }
 
 void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   bool nozzle_timed_out = false;
 
   show_continue_prompt(is_reload);
 
@@ -503,21 +506,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
     #endif
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       #if HAS_LCD_MENU
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_HEAT);
+        lcd_pause_show_message(PAUSE_MESSAGE_HEAT);
       #endif
       SERIAL_ECHO_MSG(_PMSG(MSG_FILAMENT_CHANGE_HEAT));
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("HeaterTimeout"), PSTR("Reheat"));
       #endif
 
       // Wait for LCD click or M108
       while (wait_for_user) idle(true);
 
@@ -590,24 +593,24 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
     thermalManager.reset_heater_idle_timer(e);
   }
 
   if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) // Load the new filament
-    load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, ADVANCED_PAUSE_MODE_PAUSE_PRINT DXC_PASS);
+    load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, PAUSE_MODE_PAUSE_PRINT DXC_PASS);
 
   #if HAS_LCD_MENU
-    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
+    lcd_pause_show_message(PAUSE_MESSAGE_RESUME);
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
@@ -621,21 +624,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
 
   #if ADVANCED_PAUSE_RESUME_PRIME != 0
     do_pause_e_move(ADVANCED_PAUSE_RESUME_PRIME, ADVANCED_PAUSE_PURGE_FEEDRATE);
   #endif
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]));
 
   #if HAS_LCD_MENU
-    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
+    lcd_pause_show_message(PAUSE_MESSAGE_STATUS);
   #endif
 
   #ifdef ACTION_ON_RESUMED
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif
 
   --did_pause_print;
 

commit 645ca7af7ac27af9d6690659dc71ff9867b34b6c
Author: 3dlabsio <shane@warnertci.com>
Date:   Thu Mar 7 00:09:39 2019 -0800

    M141 Heated Chamber, Temperature rework (#12201)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index bffac7acd6..e67370c78b 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -475,22 +475,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
   show_continue_prompt(is_reload);
 
   #if HAS_BUZZER
     filament_change_beep(max_beep_count, true);
   #endif
 
   // Start the heater idle timers
   const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
-  HOTEND_LOOP()
-    thermalManager.start_heater_idle_timer(e, nozzle_timeout);
+  HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
@@ -498,21 +497,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
   #if ENABLED(HOST_PROMPT_SUPPORT)
     host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Nozzle Parked"), PSTR("Continue"));
   #endif
   while (wait_for_user) {
     #if HAS_BUZZER
       filament_change_beep(max_beep_count);
     #endif
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
-      HOTEND_LOOP() nozzle_timed_out |= thermalManager.is_heater_idle(e);
+      HOTEND_LOOP() nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       #if HAS_LCD_MENU
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_HEAT);
       #endif
       SERIAL_ECHO_MSG(_PMSG(MSG_FILAMENT_CHANGE_HEAT));
 
       #if ENABLED(HOST_PROMPT_SUPPORT)
@@ -531,22 +530,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
-      HOTEND_LOOP()
-        thermalManager.start_heater_idle_timer(e, nozzle_timeout);
+      HOTEND_LOOP() thermalManager.hotend_idle[e].start(nozzle_timeout);
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), PSTR("Continue"));
       #endif
       wait_for_user = true;
       nozzle_timed_out = false;
 
       #if HAS_BUZZER
         filament_change_beep(max_beep_count, true);
       #endif
     }
@@ -587,21 +585,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
     "\nactive_extruder:", active_extruder,
     "\n"
   );
   //*/
 
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
-    nozzle_timed_out |= thermalManager.is_heater_idle(e);
+    nozzle_timed_out |= thermalManager.hotend_idle[e].timed_out;
     thermalManager.reset_heater_idle_timer(e);
   }
 
   if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) // Load the new filament
     load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, ADVANCED_PAUSE_MODE_PAUSE_PRINT DXC_PASS);
 
   #if HAS_LCD_MENU
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
   #endif
 

commit cfdb38eda4b4d993bac4a0e8600e776429b42b6e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Mar 5 06:46:19 2019 -0600

    Allow SERIAL_ECHOPAIR to take up to 12 pairs (#13311)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 1a61fe90e6..bffac7acd6 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -574,25 +574,26 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
  *   -  FWRETRACT: Recover/prime from the prior G10.
  *   - !FWRETRACT: Retract by resume_position[E], if negative.
  *                 Not sure how this logic comes into use.
  * - Move the nozzle back to resume_position
  * - Sync the planner E to resume_position[E]
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
 void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   /*
-  SERIAL_ECHOLNPGM("start of resume_print()");
-  SERIAL_ECHOPAIR("\ndual_x_carriage_mode:", dual_x_carriage_mode);
-  SERIAL_ECHOPAIR("\nextruder_duplication_enabled:", extruder_duplication_enabled);
-  SERIAL_ECHOPAIR("\nactive_extruder:", active_extruder);
-  SERIAL_ECHOLNPGM("\n");
+  SERIAL_ECHOLNPAIR(
+    "start of resume_print()\ndual_x_carriage_mode:", dual_x_carriage_mode,
+    "\nextruder_duplication_enabled:", extruder_duplication_enabled,
+    "\nactive_extruder:", active_extruder,
+    "\n"
+  );
   //*/
 
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }

commit 52665f54adb01018f495cfc452e6f742281bffd0
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Tue Feb 19 15:37:18 2019 -0500

    Fix bad Purge More logic (#13193)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 7dc63786d6..1a61fe90e6 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -130,20 +130,24 @@ void do_pause_e_move(const float &length, const float &fr_mm_s) {
  * - Show "Purge more" / "Continue" menu
  * - Return when "Continue" is selected
  *
  * Returns 'true' if load was completed, 'false' for abort
  */
 bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                    const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
                    DXC_ARGS
 ) {
+  #if !HAS_LCD_MENU
+    UNUSED(show_lcd);
+  #endif
+
   if (!ensure_safe_temperature(mode)) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS, mode);
     #endif
     return false;
   }
 
   if (pause_for_user) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT, mode);
@@ -176,22 +180,20 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
       idle(true);
     }
     KEEPALIVE_STATE(IN_HANDLER);
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD, mode);
-  #else
-    UNUSED(show_lcd);
   #endif
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Slow Load filament
@@ -269,21 +271,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
           wait_for_user = false;
           lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION);
           while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
           KEEPALIVE_STATE(IN_HANDLER);
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (false
       #if HAS_LCD_MENU
-        && show_lcd && advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE
+        || (show_lcd && advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE)
       #endif
     );
 
   #endif
 
   return true;
 }
 
 /**
  * Unload filament from the hotend
@@ -291,32 +293,34 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
  * - Fail if the a safe temperature was not reached
  * - Show "wait for unload" placard
  * - Retract, pause, then unload filament
  * - Disable E stepper (on most machines)
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
 bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
                      const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
 ) {
+  #if !HAS_LCD_MENU
+    UNUSED(show_lcd);
+  #endif
+
   if (!ensure_safe_temperature(mode)) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
     #endif
 
     return false;
   }
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_UNLOAD, mode);
-  #else
-    UNUSED(show_lcd);
   #endif
 
   // Retract filament
   do_pause_e_move(-FILAMENT_UNLOAD_RETRACT_LENGTH, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Wait for filament to cool
   safe_delay(FILAMENT_UNLOAD_DELAY);
 
   // Quickly purge
   do_pause_e_move(FILAMENT_UNLOAD_RETRACT_LENGTH + FILAMENT_UNLOAD_PURGE_LENGTH, planner.settings.max_feedrate_mm_s[E_AXIS]);
@@ -354,20 +358,24 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
  * - Initial retract, if current temperature is hot enough
  * - Park the nozzle at the given position
  * - Call unload_filament (if a length was specified)
  *
  * Returns 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
 bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
 
+  #if !HAS_LCD_MENU
+    UNUSED(show_lcd);
+  #endif
+
   if (did_pause_print) return false; // already paused
 
   #if ENABLED(HOST_ACTION_COMMANDS)
     #ifdef ACTION_ON_PAUSED
       host_action_paused();
     #elif defined(ACTION_ON_PAUSE)
       host_action_pause();
     #endif
     #if ENABLED(HOST_PROMPT_SUPPORT)
       host_prompt_open(PROMPT_INFO, PSTR("Pause"));
@@ -375,22 +383,20 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
 
     #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
-    #else
-      UNUSED(show_lcd);
     #endif
 
     return false; // unable to reach safe temperature
   }
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)

commit e00aad84afe1660bc27da6e3ea4db1f73a183474
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Feb 14 16:41:46 2019 -0600

    Add M240 parameters D I J R S

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 5226807e6c..7dc63786d6 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -104,26 +104,26 @@ static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_
 
   #if HAS_LCD_MENU
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_HEATING, mode);
   #else
     UNUSED(mode);
   #endif
 
   return thermalManager.wait_for_hotend(active_extruder);
 }
 
-void do_pause_e_move(const float &length, const float &fr) {
+void do_pause_e_move(const float &length, const float &fr_mm_s) {
   #if HAS_FILAMENT_SENSOR
     runout.reset();
   #endif
   current_position[E_AXIS] += length / planner.e_factor[active_extruder];
-  planner.buffer_line(current_position, fr, active_extruder);
+  planner.buffer_line(current_position, fr_mm_s, active_extruder);
   planner.synchronize();
 }
 
 /**
  * Load filament into the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard
  * - Load and purge filament

commit 7cf9b93f26f728f0104dc9b930f6b23096639d98
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 20:08:34 2019 -0600

    Add HAS_FILAMENT_SENSOR ahead of 12962

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index f0e5c74f86..5226807e6c 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -34,21 +34,21 @@
 #include "../module/motion.h"
 #include "../module/planner.h"
 #include "../module/stepper.h"
 #include "../module/printcounter.h"
 #include "../module/temperature.h"
 
 #if ENABLED(FWRETRACT)
   #include "fwretract.h"
 #endif
 
-#if ENABLED(FILAMENT_RUNOUT_SENSOR)
+#if HAS_FILAMENT_SENSOR
   #include "runout.h"
 #endif
 
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "host_actions.h"
 #endif
 
 #include "../lcd/ultralcd.h"
 #include "../libs/buzzer.h"
 #include "../libs/nozzle.h"
@@ -105,21 +105,21 @@ static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_
   #if HAS_LCD_MENU
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_HEATING, mode);
   #else
     UNUSED(mode);
   #endif
 
   return thermalManager.wait_for_hotend(active_extruder);
 }
 
 void do_pause_e_move(const float &length, const float &fr) {
-  #if ENABLED(FILAMENT_RUNOUT_SENSOR)
+  #if HAS_FILAMENT_SENSOR
     runout.reset();
   #endif
   current_position[E_AXIS] += length / planner.e_factor[active_extruder];
   planner.buffer_line(current_position, fr, active_extruder);
   planner.synchronize();
 }
 
 /**
  * Load filament into the hotend
  *
@@ -244,21 +244,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
         do_pause_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       // Show "Purge More" / "Resume" menu and wait for reply
       #if ENABLED(HOST_PROMPT_SUPPORT)
         host_prompt_reason = PROMPT_FILAMENT_RUNOUT;
         host_action_prompt_end();   // Close current prompt
         host_action_prompt_begin(PSTR("Paused"));
         host_action_prompt_button(PSTR("PurgeMore"));
         if (false
-          #if ENABLED(FILAMENT_RUNOUT_SENSOR)
+          #if HAS_FILAMENT_SENSOR
             || runout.filament_ran_out
           #endif
         )
           host_action_prompt_button(PSTR("DisableRunout"));
         else {
           host_prompt_reason = PROMPT_FILAMENT_RUNOUT;
           host_action_prompt_button(PSTR("Continue"));
         }
         host_action_prompt_show();
       #endif

commit 7f1b69b0c83ae914ed9ae35fdad9f79814069652
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Tue Feb 12 16:55:47 2019 -0500

    Add HOST_PROMPT_SUPPORT (#13039)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 1ca40f0010..f0e5c74f86 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -38,20 +38,24 @@
 #include "../module/temperature.h"
 
 #if ENABLED(FWRETRACT)
   #include "fwretract.h"
 #endif
 
 #if ENABLED(FILAMENT_RUNOUT_SENSOR)
   #include "runout.h"
 #endif
 
+#if ENABLED(HOST_ACTION_COMMANDS)
+  #include "host_actions.h"
+#endif
+
 #include "../lcd/ultralcd.h"
 #include "../libs/buzzer.h"
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 // private:
 
 static float resume_position[XYZE];
 
 AdvancedPauseMenuResponse advanced_pause_menu_response;
@@ -147,20 +151,34 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     SERIAL_ECHO_MSG(MSG_FILAMENT_CHANGE_INSERT);
 
     #if HAS_BUZZER
       filament_change_beep(max_beep_count, true);
     #else
       UNUSED(max_beep_count);
     #endif
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
+    #if ENABLED(HOST_PROMPT_SUPPORT)
+      const char tool = '0'
+        #if NUM_RUNOUT_SENSORS > 1
+          + active_extruder
+        #endif
+      ;
+      host_prompt_reason = PROMPT_USER_CONTINUE;
+      host_action_prompt_end();
+      host_action_prompt_begin(PSTR("Load Filament T"), false);
+      SERIAL_CHAR(tool);
+      SERIAL_EOL();
+      host_action_prompt_button(PSTR("Continue"));
+      host_action_prompt_show();
+    #endif
     while (wait_for_user) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
       idle(true);
     }
     KEEPALIVE_STATE(IN_HANDLER);
   }
 
   #if HAS_LCD_MENU
@@ -199,38 +217,59 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     stepper.set_directions();
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     #if HAS_LCD_MENU
       if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE);
     #endif
 
     wait_for_user = true;
+    #if ENABLED(HOST_PROMPT_SUPPORT)
+      host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Continuous Purge Running..."), PSTR("Continue"));
+    #endif
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
         #if HAS_LCD_MENU
           if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE);
         #endif
 
         // Extrude filament to get into hotend
         do_pause_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       // Show "Purge More" / "Resume" menu and wait for reply
+      #if ENABLED(HOST_PROMPT_SUPPORT)
+        host_prompt_reason = PROMPT_FILAMENT_RUNOUT;
+        host_action_prompt_end();   // Close current prompt
+        host_action_prompt_begin(PSTR("Paused"));
+        host_action_prompt_button(PSTR("PurgeMore"));
+        if (false
+          #if ENABLED(FILAMENT_RUNOUT_SENSOR)
+            || runout.filament_ran_out
+          #endif
+        )
+          host_action_prompt_button(PSTR("DisableRunout"));
+        else {
+          host_prompt_reason = PROMPT_FILAMENT_RUNOUT;
+          host_action_prompt_button(PSTR("Continue"));
+        }
+        host_action_prompt_show();
+      #endif
+
       #if HAS_LCD_MENU
         if (show_lcd) {
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
           lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION);
           while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
           KEEPALIVE_STATE(IN_HANDLER);
         }
       #endif
 
@@ -317,24 +356,29 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
  * - Call unload_filament (if a length was specified)
  *
  * Returns 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
 bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
 
   if (did_pause_print) return false; // already paused
 
-  #ifdef ACTION_ON_PAUSED
-    host_action_paused();
-  #elif defined(ACTION_ON_PAUSE)
-    host_action_pause();
+  #if ENABLED(HOST_ACTION_COMMANDS)
+    #ifdef ACTION_ON_PAUSED
+      host_action_paused();
+    #elif defined(ACTION_ON_PAUSE)
+      host_action_pause();
+    #endif
+    #if ENABLED(HOST_PROMPT_SUPPORT)
+      host_prompt_open(PROMPT_INFO, PSTR("Pause"));
+    #endif
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
 
     #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
@@ -438,56 +482,68 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   wait_for_user = true;    // LCD click or M108 will clear this
-
+  #if ENABLED(HOST_PROMPT_SUPPORT)
+    host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Nozzle Parked"), PSTR("Continue"));
+  #endif
   while (wait_for_user) {
     #if HAS_BUZZER
       filament_change_beep(max_beep_count);
     #endif
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.is_heater_idle(e);
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       #if HAS_LCD_MENU
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_HEAT);
       #endif
       SERIAL_ECHO_MSG(_PMSG(MSG_FILAMENT_CHANGE_HEAT));
 
+      #if ENABLED(HOST_PROMPT_SUPPORT)
+        host_prompt_do(PROMPT_USER_CONTINUE, PSTR("HeaterTimeout"), PSTR("Reheat"));
+      #endif
+
       // Wait for LCD click or M108
       while (wait_for_user) idle(true);
 
+      #if ENABLED(HOST_PROMPT_SUPPORT)
+        host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheating"));
+      #endif
+
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_heater_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 
       // Show the prompt to continue
       show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
       HOTEND_LOOP()
         thermalManager.start_heater_idle_timer(e, nozzle_timeout);
-
+      #if ENABLED(HOST_PROMPT_SUPPORT)
+        host_prompt_do(PROMPT_USER_CONTINUE, PSTR("Reheat Done"), PSTR("Continue"));
+      #endif
       wait_for_user = true;
       nozzle_timed_out = false;
 
       #if HAS_BUZZER
         filament_change_beep(max_beep_count, true);
       #endif
     }
 
     idle(true);
   }
@@ -571,20 +627,24 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   #endif
 
   #ifdef ACTION_ON_RESUMED
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif
 
   --did_pause_print;
 
+  #if ENABLED(HOST_PROMPT_SUPPORT)
+    host_prompt_open(PROMPT_INFO, PSTR("Resume"));
+  #endif
+
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif
 
   // Resume the print job timer if it was running
   if (print_job_timer.isPaused()) print_job_timer.start();
 

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 06e238460c..1ca40f0010 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 413e303ad53caca43c123fbfc8c3ee7298ee9219
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Wed Feb 6 07:39:42 2019 -0500

    More Advanced Pause options (#12984)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 2bba4da4ff..06e238460c 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -101,20 +101,23 @@ static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_
   #if HAS_LCD_MENU
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_HEATING, mode);
   #else
     UNUSED(mode);
   #endif
 
   return thermalManager.wait_for_hotend(active_extruder);
 }
 
 void do_pause_e_move(const float &length, const float &fr) {
+  #if ENABLED(FILAMENT_RUNOUT_SENSOR)
+    runout.reset();
+  #endif
   current_position[E_AXIS] += length / planner.e_factor[active_extruder];
   planner.buffer_line(current_position, fr, active_extruder);
   planner.synchronize();
 }
 
 /**
  * Load filament into the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
@@ -435,20 +438,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   wait_for_user = true;    // LCD click or M108 will clear this
+
   while (wait_for_user) {
     #if HAS_BUZZER
       filament_change_beep(max_beep_count);
     #endif
 
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.is_heater_idle(e);
 
     // Wait for the user to press the button to re-heat the nozzle, then
@@ -547,28 +551,28 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
 
   // If resume_position is negative
   if (resume_position[E_AXIS] < 0) do_pause_e_move(resume_position[E_AXIS], PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], NOZZLE_PARK_XY_FEEDRATE);
 
   // Move Z_AXIS to saved position
   do_blocking_move_to_z(resume_position[Z_AXIS], NOZZLE_PARK_Z_FEEDRATE);
 
+  #if ADVANCED_PAUSE_RESUME_PRIME != 0
+    do_pause_e_move(ADVANCED_PAUSE_RESUME_PRIME, ADVANCED_PAUSE_PURGE_FEEDRATE);
+  #endif
+
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]));
 
-  #if ENABLED(FILAMENT_RUNOUT_SENSOR)
-    runout.reset();
-  #endif
-
   #if HAS_LCD_MENU
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
   #endif
 
   #ifdef ACTION_ON_RESUMED
     host_action_resumed();
   #elif defined(ACTION_ON_RESUME)
     host_action_resume();
   #endif
 

commit d4d1b28a06caa57d26e300c1b814b2b8b62120cd
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 4 03:41:55 2019 -0600

    Fix some include paths

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 5474aff2bb..2bba4da4ff 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -31,25 +31,25 @@
 
 #include "../Marlin.h"
 #include "../gcode/gcode.h"
 #include "../module/motion.h"
 #include "../module/planner.h"
 #include "../module/stepper.h"
 #include "../module/printcounter.h"
 #include "../module/temperature.h"
 
 #if ENABLED(FWRETRACT)
-  #include "../feature/fwretract.h"
+  #include "fwretract.h"
 #endif
 
 #if ENABLED(FILAMENT_RUNOUT_SENSOR)
-  #include "../feature/runout.h"
+  #include "runout.h"
 #endif
 
 #include "../lcd/ultralcd.h"
 #include "../libs/buzzer.h"
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 // private:
 
 static float resume_position[XYZE];

commit afe79ba22b2f880c8743b0b73fd4c523190e0a3f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 4 02:22:48 2019 -0600

    Minor code cleanup

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 788daeac08..5474aff2bb 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -225,25 +225,23 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
         if (show_lcd) {
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
           lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION);
           while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
           KEEPALIVE_STATE(IN_HANDLER);
         }
       #endif
 
       // Keep looping if "Purge More" was selected
-    } while (
+    } while (false
       #if HAS_LCD_MENU
-        show_lcd && advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE
-      #else
-        0
+        && show_lcd && advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE
       #endif
     );
 
   #endif
 
   return true;
 }
 
 /**
  * Unload filament from the hotend

commit 4fa1c52688917b139f1a2a68dd9028a592d4567a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Feb 2 23:32:48 2019 -0600

    Tweak serial output code

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 867e3b52ac..788daeac08 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -510,25 +510,25 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
  *   -  FWRETRACT: Recover/prime from the prior G10.
  *   - !FWRETRACT: Retract by resume_position[E], if negative.
  *                 Not sure how this logic comes into use.
  * - Move the nozzle back to resume_position
  * - Sync the planner E to resume_position[E]
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
 void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   /*
-  SERIAL_ECHOPGM("start of resume_print()\n");
+  SERIAL_ECHOLNPGM("start of resume_print()");
   SERIAL_ECHOPAIR("\ndual_x_carriage_mode:", dual_x_carriage_mode);
   SERIAL_ECHOPAIR("\nextruder_duplication_enabled:", extruder_duplication_enabled);
   SERIAL_ECHOPAIR("\nactive_extruder:", active_extruder);
-  SERIAL_ECHOPGM("\n\n");
+  SERIAL_ECHOLNPGM("\n");
   //*/
 
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }

commit a79d80c78ec53f50915ead10e657a7e047bec4ca
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Mon Jan 28 06:10:25 2019 +0100

    Minor cleanup of pause code (#13030)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 043c211ee3..867e3b52ac 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -322,34 +322,30 @@ uint8_t did_pause_print = 0;
 bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
 
   if (did_pause_print) return false; // already paused
 
   #ifdef ACTION_ON_PAUSED
     host_action_paused();
   #elif defined(ACTION_ON_PAUSE)
     host_action_pause();
   #endif
 
-  #if HAS_LCD_MENU
-    if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT, ADVANCED_PAUSE_MODE_PAUSE_PRINT);
-  #else
-    UNUSED(show_lcd);
-  #endif
-
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
 
     #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
+    #else
+      UNUSED(show_lcd);
     #endif
 
     return false; // unable to reach safe temperature
   }
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)

commit 48a3502656b29439ae7172d24259353dc3183dd9
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Jan 27 23:43:13 2019 -0500

    Remote streamer improvements (#12982)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 7857bcff35..043c211ee3 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -316,22 +316,24 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
  * - Call unload_filament (if a length was specified)
  *
  * Returns 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
 bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
 
   if (did_pause_print) return false; // already paused
 
-  #ifdef ACTION_ON_PAUSE
-    SERIAL_ECHOLNPGM("//action:" ACTION_ON_PAUSE);
+  #ifdef ACTION_ON_PAUSED
+    host_action_paused();
+  #elif defined(ACTION_ON_PAUSE)
+    host_action_pause();
   #endif
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT, ADVANCED_PAUSE_MODE_PAUSE_PRINT);
   #else
     UNUSED(show_lcd);
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
@@ -563,22 +565,24 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   planner.set_e_position_mm((destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]));
 
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     runout.reset();
   #endif
 
   #if HAS_LCD_MENU
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
   #endif
 
-  #ifdef ACTION_ON_RESUME
-    SERIAL_ECHOLNPGM("//action:" ACTION_ON_RESUME);
+  #ifdef ACTION_ON_RESUMED
+    host_action_resumed();
+  #elif defined(ACTION_ON_RESUME)
+    host_action_resume();
   #endif
 
   --did_pause_print;
 
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif

commit f4d1f13358426336695100c253c151cb6036ca0f
Author: InsanityAutomation <d.menzel@insanityautomation.com>
Date:   Mon Jan 21 13:50:30 2019 -0500

    Warn on cold extrusion, dont error

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index fb26bbdedb..7857bcff35 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -86,21 +86,21 @@ fil_change_settings_t fc_settings[EXTRUDERS];
  * - Fail if the TARGET temperature is too low
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
  */
 static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_MODE_SAME) {
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
-      SERIAL_ERROR_MSG(MSG_ERR_HOTEND_TOO_COLD);
+      SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
       return false;
     }
   #endif
 
   #if HAS_LCD_MENU
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_HEATING, mode);
   #else
     UNUSED(mode);
   #endif
 
@@ -327,21 +327,21 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_PAUSE);
   #endif
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT, ADVANCED_PAUSE_MODE_PAUSE_PRINT);
   #else
     UNUSED(show_lcd);
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
-    SERIAL_ERROR_MSG(MSG_ERR_HOTEND_TOO_COLD);
+    SERIAL_ECHO_MSG(MSG_ERR_HOTEND_TOO_COLD);
 
     #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
     #endif
 
     return false; // unable to reach safe temperature
   }

commit 2f35747f294c4b3dc3e6920b34e208f89bd4841d
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Wed Jan 23 19:06:54 2019 -0600

    L6470 SPI daisy chain support (#12895)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index f1fdde6cc5..fb26bbdedb 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -287,21 +287,21 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
     planner.settings.retract_acceleration = FILAMENT_CHANGE_UNLOAD_ACCEL;
   #endif
 
   do_pause_e_move(unload_length, FILAMENT_CHANGE_UNLOAD_FEEDRATE);
 
   #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
     planner.settings.retract_acceleration = saved_acceleration;
   #endif
 
   // Disable extruders steppers for manual filament changing (only on boards that have separate ENABLE_PINS)
-  #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE(E0, TMC2660) || AXIS_DRIVER_TYPE(E1, TMC2660) || AXIS_DRIVER_TYPE(E2, TMC2660) || AXIS_DRIVER_TYPE(E3, TMC2660) || AXIS_DRIVER_TYPE(E4, TMC2660) || AXIS_DRIVER_TYPE(E5, TMC2660)
+  #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE_E0(TMC2660) || AXIS_DRIVER_TYPE_E1(TMC2660) || AXIS_DRIVER_TYPE_E2(TMC2660) || AXIS_DRIVER_TYPE_E3(TMC2660) || AXIS_DRIVER_TYPE_E4(TMC2660) || AXIS_DRIVER_TYPE_E5(TMC2660)
     disable_e_stepper(active_extruder);
     safe_delay(100);
   #endif
 
   return true;
 }
 
 // public:
 
 /**

commit c98623983774b9773800bc7dcef695c4bad81c0e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Nov 29 16:58:58 2018 -0600

    A single SERIAL_ECHO macro type (#12557)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 6d447cd221..f1fdde6cc5 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -86,22 +86,21 @@ fil_change_settings_t fc_settings[EXTRUDERS];
  * - Fail if the TARGET temperature is too low
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
  */
 static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_MODE_SAME) {
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
-      SERIAL_ERROR_START();
-      SERIAL_ERRORLNPGM(MSG_ERR_HOTEND_TOO_COLD);
+      SERIAL_ERROR_MSG(MSG_ERR_HOTEND_TOO_COLD);
       return false;
     }
   #endif
 
   #if HAS_LCD_MENU
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_HEATING, mode);
   #else
     UNUSED(mode);
   #endif
 
@@ -135,22 +134,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     #if HAS_LCD_MENU
       if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS, mode);
     #endif
     return false;
   }
 
   if (pause_for_user) {
     #if HAS_LCD_MENU
       if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT, mode);
     #endif
-    SERIAL_ECHO_START();
-    SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT);
+    SERIAL_ECHO_MSG(MSG_FILAMENT_CHANGE_INSERT);
 
     #if HAS_BUZZER
       filament_change_beep(max_beep_count, true);
     #else
       UNUSED(max_beep_count);
     #endif
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
     while (wait_for_user) {
@@ -329,22 +327,21 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_PAUSE);
   #endif
 
   #if HAS_LCD_MENU
     if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT, ADVANCED_PAUSE_MODE_PAUSE_PRINT);
   #else
     UNUSED(show_lcd);
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
-    SERIAL_ERROR_START();
-    SERIAL_ERRORLNPGM(MSG_ERR_HOTEND_TOO_COLD);
+    SERIAL_ERROR_MSG(MSG_ERR_HOTEND_TOO_COLD);
 
     #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
     #endif
 
     return false; // unable to reach safe temperature
   }
@@ -457,22 +454,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
     // If the nozzle has timed out...
     if (!nozzle_timed_out)
       HOTEND_LOOP() nozzle_timed_out |= thermalManager.is_heater_idle(e);
 
     // Wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       #if HAS_LCD_MENU
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_HEAT);
       #endif
-      SERIAL_ECHO_START();
-      SERIAL_ECHOLNPGM(_PMSG(MSG_FILAMENT_CHANGE_HEAT));
+      SERIAL_ECHO_MSG(_PMSG(MSG_FILAMENT_CHANGE_HEAT));
 
       // Wait for LCD click or M108
       while (wait_for_user) idle(true);
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_heater_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 

commit 03ef2d6c82048564db284bc3965595c561bf5840
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Nov 28 19:28:31 2018 -0600

    Fix "paused" message and M125 called by M25 (#12551)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 0736bfebd8..6d447cd221 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -38,24 +38,21 @@
 #include "../module/temperature.h"
 
 #if ENABLED(FWRETRACT)
   #include "../feature/fwretract.h"
 #endif
 
 #if ENABLED(FILAMENT_RUNOUT_SENSOR)
   #include "../feature/runout.h"
 #endif
 
-#if HAS_LCD_MENU
-  #include "../lcd/ultralcd.h"
-#endif
-
+#include "../lcd/ultralcd.h"
 #include "../libs/buzzer.h"
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 // private:
 
 static float resume_position[XYZE];
 
 AdvancedPauseMenuResponse advanced_pause_menu_response;
 
@@ -524,21 +521,21 @@ void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
 void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   /*
   SERIAL_ECHOPGM("start of resume_print()\n");
   SERIAL_ECHOPAIR("\ndual_x_carriage_mode:", dual_x_carriage_mode);
   SERIAL_ECHOPAIR("\nextruder_duplication_enabled:", extruder_duplication_enabled);
   SERIAL_ECHOPAIR("\nactive_extruder:", active_extruder);
   SERIAL_ECHOPGM("\n\n");
-  */
+  //*/
 
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }
 
@@ -583,16 +580,17 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
 
   --did_pause_print;
 
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif
 
-  #if ENABLED(ULTRA_LCD)
-    ui.reset_status();
-  #endif
+  // Resume the print job timer if it was running
+  if (print_job_timer.isPaused()) print_job_timer.start();
+
+  ui.reset_status();
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit c1e17037e55cfb3220a0f3b190d3f2df8fd72724
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Sat Nov 17 21:21:44 2018 -0700

    Various fixes for MarlinUI and ExtUI (#12439)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 04d7682dfd..0736bfebd8 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -392,28 +392,33 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   #if ENABLED(DUAL_X_CARRIAGE)
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 
   return true;
 }
 
 /**
+ * For Paused Print:
+ * - Show "Press button (or M108) to resume"
+ *
+ * For Filament Change:
  * - Show "Insert filament and press button to continue"
+ *
  * - Wait for a click before returning
- * - Heaters can time out, reheated before accepting a click
+ * - Heaters can time out and must reheat before continuing
  *
  * Used by M125 and M600
  */
 
-#if HAS_LCD_MENU && ENABLED(EMERGENCY_PARSER)
+#if (HAS_LCD_MENU || ENABLED(EXTENSIBLE_UI)) && ENABLED(EMERGENCY_PARSER)
   #define _PMSG(L) L
 #elif ENABLED(EMERGENCY_PARSER)
   #define _PMSG(L) L##_M108
 #else
   #define _PMSG(L) L##_LCD
 #endif
 
 void show_continue_prompt(const bool is_reload) {
   #if HAS_LCD_MENU
     lcd_advanced_pause_show_message(is_reload ? ADVANCED_PAUSE_MESSAGE_INSERT : ADVANCED_PAUSE_MESSAGE_WAITING);

commit a0c795b097a30eff006c8dff178abf5f1f1907fa
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 11 12:16:24 2018 -0600

    Encapsulate common display code in a singleton (#12395)
    
    * Encapsulate common LCD code in a singleton
    * Depend more UBL code on UBL_DEVEL_DEBUGGING
      - Since most users don't need the debugging on at all times, this helps reduce the default build size for UBL by over 2K, a little closer to fitting on 128K boards.

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index b26babf730..04d7682dfd 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -579,15 +579,15 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   --did_pause_print;
 
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif
 
   #if ENABLED(ULTRA_LCD)
-    lcd_reset_status();
+    ui.reset_status();
   #endif
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit 488a17b3f5224ccd50f0cbc916a1e7c7ccf1ad6b
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Nov 6 20:52:39 2018 -0600

    Use IS_SD_PRINTING() more

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index bbdceb3bb9..b26babf730 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -350,25 +350,26 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
     #endif
 
     return false; // unable to reach safe temperature
   }
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)
-    if (card.sdprinting) {
+    if (IS_SD_PRINTING()) {
       card.pauseSDPrint();
       ++did_pause_print; // Indicate SD pause also
     }
   #endif
+
   print_job_timer.pause();
 
   // Save current position
   COPY(resume_position, current_position);
 
   // Wait for buffered blocks to complete
   planner.synchronize();
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))

commit e574f015680f88137b2ccb0fa159ebd5749c26fb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Nov 6 19:25:57 2018 -0600

    More advanced pause tweaks (#12356)
    
    * Followup to LCD_TIMEOUT_TO_STATUS=0
    * Make continuous purge screen fit 20x4
    * Unify purge message modes
    * Preserve last-set pause header mode

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index ab04999c4d..bbdceb3bb9 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -85,21 +85,21 @@ fil_change_settings_t fc_settings[EXTRUDERS];
 
 /**
  * Ensure a safe temperature for extrusion
  *
  * - Fail if the TARGET temperature is too low
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
  */
-static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_MODE_PAUSE_PRINT) {
+static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_MODE_SAME) {
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
       SERIAL_ERROR_START();
       SERIAL_ERRORLNPGM(MSG_ERR_HOTEND_TOO_COLD);
       return false;
     }
   #endif
 
   #if HAS_LCD_MENU
@@ -127,37 +127,30 @@ void do_pause_e_move(const float &length, const float &fr) {
  * - Show "Purge more" / "Continue" menu
  * - Return when "Continue" is selected
  *
  * Returns 'true' if load was completed, 'false' for abort
  */
 bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                    const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
                    DXC_ARGS
 ) {
-  #if DISABLED(ULTIPANEL)
-    UNUSED(show_lcd);
-  #endif
-
   if (!ensure_safe_temperature(mode)) {
     #if HAS_LCD_MENU
-      if (show_lcd) // Show status screen
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
+      if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS, mode);
     #endif
-
     return false;
   }
 
   if (pause_for_user) {
     #if HAS_LCD_MENU
-      if (show_lcd) // Show "insert filament"
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT, mode);
+      if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT, mode);
     #endif
     SERIAL_ECHO_START();
     SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT);
 
     #if HAS_BUZZER
       filament_change_beep(max_beep_count, true);
     #else
       UNUSED(max_beep_count);
     #endif
 
@@ -166,22 +159,23 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     while (wait_for_user) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
       idle(true);
     }
     KEEPALIVE_STATE(IN_HANDLER);
   }
 
   #if HAS_LCD_MENU
-    if (show_lcd) // Show "wait for load" message
-      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD, mode);
+    if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD, mode);
+  #else
+    UNUSED(show_lcd);
   #endif
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Slow Load filament
@@ -203,49 +197,47 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     #if HAS_LCD_MENU
-      if (show_lcd)
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_CONTINUOUS_PURGE);
+      if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE);
     #endif
 
     wait_for_user = true;
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
         #if HAS_LCD_MENU
-          if (show_lcd)
-            lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE, mode);
+          if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE);
         #endif
 
         // Extrude filament to get into hotend
         do_pause_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       // Show "Purge More" / "Resume" menu and wait for reply
       #if HAS_LCD_MENU
         if (show_lcd) {
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
-          lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION, mode);
+          lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION);
           while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
           KEEPALIVE_STATE(IN_HANDLER);
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (
       #if HAS_LCD_MENU
         show_lcd && advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE
       #else
@@ -266,32 +258,30 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
  * - Retract, pause, then unload filament
  * - Disable E stepper (on most machines)
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
 bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
                      const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
 ) {
   if (!ensure_safe_temperature(mode)) {
     #if HAS_LCD_MENU
-      if (show_lcd) // Show status screen
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
+      if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
     #endif
 
     return false;
   }
 
-  #if DISABLED(ULTIPANEL)
-    UNUSED(show_lcd);
+  #if HAS_LCD_MENU
+    if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_UNLOAD, mode);
   #else
-    if (show_lcd)
-      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_UNLOAD, mode);
+    UNUSED(show_lcd);
   #endif
 
   // Retract filament
   do_pause_e_move(-FILAMENT_UNLOAD_RETRACT_LENGTH, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Wait for filament to cool
   safe_delay(FILAMENT_UNLOAD_DELAY);
 
   // Quickly purge
   do_pause_e_move(FILAMENT_UNLOAD_RETRACT_LENGTH + FILAMENT_UNLOAD_PURGE_LENGTH, planner.settings.max_feedrate_mm_s[E_AXIS]);
@@ -336,22 +326,23 @@ uint8_t did_pause_print = 0;
 
 bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
 
   if (did_pause_print) return false; // already paused
 
   #ifdef ACTION_ON_PAUSE
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_PAUSE);
   #endif
 
   #if HAS_LCD_MENU
-    if (show_lcd) // Show initial message
-      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT);
+    if (show_lcd) lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT, ADVANCED_PAUSE_MODE_PAUSE_PRINT);
+  #else
+    UNUSED(show_lcd);
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ERROR_START();
     SERIAL_ERRORLNPGM(MSG_ERR_HOTEND_TOO_COLD);
 
     #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
@@ -542,21 +533,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }
 
   if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) // Load the new filament
     load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, ADVANCED_PAUSE_MODE_PAUSE_PRINT DXC_PASS);
 
   #if HAS_LCD_MENU
-    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME); // "Wait for print to resume"
+    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
@@ -570,21 +561,20 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]));
 
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     runout.reset();
   #endif
 
   #if HAS_LCD_MENU
-    // Show status screen
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
   #endif
 
   #ifdef ACTION_ON_RESUME
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_RESUME);
   #endif
 
   --did_pause_print;
 
   #if ENABLED(SDSUPPORT)

commit 4c5ca89d8cc6a5818d47762e583492d98a99d1f6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Nov 6 04:13:48 2018 -0600

    Show the appropriate pause message (#12348)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 751152b2c7..ab04999c4d 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -96,21 +96,21 @@ static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
       SERIAL_ERROR_START();
       SERIAL_ERRORLNPGM(MSG_ERR_HOTEND_TOO_COLD);
       return false;
     }
   #endif
 
   #if HAS_LCD_MENU
-    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_WAIT_FOR_NOZZLES_TO_HEAT, mode);
+    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_HEATING, mode);
   #else
     UNUSED(mode);
   #endif
 
   return thermalManager.wait_for_hotend(active_extruder);
 }
 
 void do_pause_e_move(const float &length, const float &fr) {
   current_position[E_AXIS] += length / planner.e_factor[active_extruder];
   planner.buffer_line(current_position, fr, active_extruder);
@@ -406,28 +406,41 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   return true;
 }
 
 /**
  * - Show "Insert filament and press button to continue"
  * - Wait for a click before returning
  * - Heaters can time out, reheated before accepting a click
  *
  * Used by M125 and M600
  */
-void wait_for_filament_reload(const int8_t max_beep_count/*=0*/ DXC_ARGS) {
-  bool nozzle_timed_out = false;
 
+#if HAS_LCD_MENU && ENABLED(EMERGENCY_PARSER)
+  #define _PMSG(L) L
+#elif ENABLED(EMERGENCY_PARSER)
+  #define _PMSG(L) L##_M108
+#else
+  #define _PMSG(L) L##_LCD
+#endif
+
+void show_continue_prompt(const bool is_reload) {
   #if HAS_LCD_MENU
-    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
+    lcd_advanced_pause_show_message(is_reload ? ADVANCED_PAUSE_MESSAGE_INSERT : ADVANCED_PAUSE_MESSAGE_WAITING);
   #endif
   SERIAL_ECHO_START();
-  SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_INSERT);
+  serialprintPGM(is_reload ? PSTR(_PMSG(MSG_FILAMENT_CHANGE_INSERT) "\n") : PSTR(_PMSG(MSG_FILAMENT_CHANGE_WAIT) "\n"));
+}
+
+void wait_for_confirmation(const bool is_reload/*=false*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
+  bool nozzle_timed_out = false;
+
+  show_continue_prompt(is_reload);
 
   #if HAS_BUZZER
     filament_change_beep(max_beep_count, true);
   #endif
 
   // Start the heater idle timers
   const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
   HOTEND_LOOP()
     thermalManager.start_heater_idle_timer(e, nozzle_timeout);
@@ -440,67 +453,52 @@ void wait_for_filament_reload(const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   #endif
 
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
     #if HAS_BUZZER
       filament_change_beep(max_beep_count);
     #endif
 
-    // If the nozzle has timed out, wait for the user to press the button to re-heat the nozzle, then
-    // re-heat the nozzle, re-show the insert screen, restart the idle timers, and start over
+    // If the nozzle has timed out...
     if (!nozzle_timed_out)
-      HOTEND_LOOP()
-        nozzle_timed_out |= thermalManager.is_heater_idle(e);
+      HOTEND_LOOP() nozzle_timed_out |= thermalManager.is_heater_idle(e);
 
+    // Wait for the user to press the button to re-heat the nozzle, then
+    // re-heat the nozzle, re-show the continue prompt, restart idle timers, start over
     if (nozzle_timed_out) {
       #if HAS_LCD_MENU
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_CLICK_TO_HEAT_NOZZLE);
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_HEAT);
       #endif
       SERIAL_ECHO_START();
-      #if HAS_LCD_MENU && ENABLED(EMERGENCY_PARSER)
-        SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_HEAT);
-      #elif ENABLED(EMERGENCY_PARSER)
-        SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_HEAT_M108);
-      #else
-        SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_HEAT_LCD);
-      #endif
+      SERIAL_ECHOLNPGM(_PMSG(MSG_FILAMENT_CHANGE_HEAT));
 
       // Wait for LCD click or M108
       while (wait_for_user) idle(true);
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_heater_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 
-      #if HAS_LCD_MENU
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
-      #endif
-      SERIAL_ECHO_START();
-      #if HAS_LCD_MENU && ENABLED(EMERGENCY_PARSER)
-        SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT);
-      #elif ENABLED(EMERGENCY_PARSER)
-        SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT_M108);
-      #else
-        SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT_LCD);
-      #endif
+      // Show the prompt to continue
+      show_continue_prompt(is_reload);
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
       HOTEND_LOOP()
         thermalManager.start_heater_idle_timer(e, nozzle_timeout);
 
-      wait_for_user = true; // Wait for user to load filament
+      wait_for_user = true;
       nozzle_timed_out = false;
 
       #if HAS_BUZZER
         filament_change_beep(max_beep_count, true);
       #endif
     }
 
     idle(true);
   }
   #if ENABLED(DUAL_X_CARRIAGE)

commit 3583e2b4490e8fd6778d18003641c2fdd333e8a5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Oct 30 16:34:45 2018 -0500

    Followup to Menu Refactor (#12275)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 6c232b5db8..751152b2c7 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -38,21 +38,21 @@
 #include "../module/temperature.h"
 
 #if ENABLED(FWRETRACT)
   #include "../feature/fwretract.h"
 #endif
 
 #if ENABLED(FILAMENT_RUNOUT_SENSOR)
   #include "../feature/runout.h"
 #endif
 
-#if ENABLED(ULTIPANEL)
+#if HAS_LCD_MENU
   #include "../lcd/ultralcd.h"
 #endif
 
 #include "../libs/buzzer.h"
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 // private:
 
 static float resume_position[XYZE];
@@ -95,21 +95,21 @@ fil_change_settings_t fc_settings[EXTRUDERS];
 static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_MODE_PAUSE_PRINT) {
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
       SERIAL_ERROR_START();
       SERIAL_ERRORLNPGM(MSG_ERR_HOTEND_TOO_COLD);
       return false;
     }
   #endif
 
-  #if ENABLED(ULTIPANEL)
+  #if HAS_LCD_MENU
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_WAIT_FOR_NOZZLES_TO_HEAT, mode);
   #else
     UNUSED(mode);
   #endif
 
   return thermalManager.wait_for_hotend(active_extruder);
 }
 
 void do_pause_e_move(const float &length, const float &fr) {
   current_position[E_AXIS] += length / planner.e_factor[active_extruder];
@@ -132,30 +132,30 @@ void do_pause_e_move(const float &length, const float &fr) {
 bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                    const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
                    DXC_ARGS
 ) {
   #if DISABLED(ULTIPANEL)
     UNUSED(show_lcd);
   #endif
 
   if (!ensure_safe_temperature(mode)) {
-    #if ENABLED(ULTIPANEL)
+    #if HAS_LCD_MENU
       if (show_lcd) // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
     #endif
 
     return false;
   }
 
   if (pause_for_user) {
-    #if ENABLED(ULTIPANEL)
+    #if HAS_LCD_MENU
       if (show_lcd) // Show "insert filament"
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT, mode);
     #endif
     SERIAL_ECHO_START();
     SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT);
 
     #if HAS_BUZZER
       filament_change_beep(max_beep_count, true);
     #else
       UNUSED(max_beep_count);
@@ -165,21 +165,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     wait_for_user = true;    // LCD click or M108 will clear this
     while (wait_for_user) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
       idle(true);
     }
     KEEPALIVE_STATE(IN_HANDLER);
   }
 
-  #if ENABLED(ULTIPANEL)
+  #if HAS_LCD_MENU
     if (show_lcd) // Show "wait for load" message
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD, mode);
   #endif
 
   #if ENABLED(DUAL_X_CARRIAGE)
     const int8_t saved_ext        = active_extruder;
     const bool saved_ext_dup_mode = extruder_duplication_enabled;
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
@@ -202,58 +202,58 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
   }
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
-    #if ENABLED(ULTIPANEL)
+    #if HAS_LCD_MENU
       if (show_lcd)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_CONTINUOUS_PURGE);
     #endif
 
     wait_for_user = true;
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
-        #if ENABLED(ULTIPANEL)
+        #if HAS_LCD_MENU
           if (show_lcd)
             lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE, mode);
         #endif
 
         // Extrude filament to get into hotend
         do_pause_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       // Show "Purge More" / "Resume" menu and wait for reply
-      #if ENABLED(ULTIPANEL)
+      #if HAS_LCD_MENU
         if (show_lcd) {
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
           lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION, mode);
           while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
           KEEPALIVE_STATE(IN_HANDLER);
         }
       #endif
 
       // Keep looping if "Purge More" was selected
     } while (
-      #if ENABLED(ULTIPANEL)
+      #if HAS_LCD_MENU
         show_lcd && advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE
       #else
         0
       #endif
     );
 
   #endif
 
   return true;
 }
@@ -265,21 +265,21 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
  * - Show "wait for unload" placard
  * - Retract, pause, then unload filament
  * - Disable E stepper (on most machines)
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
 bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
                      const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
 ) {
   if (!ensure_safe_temperature(mode)) {
-    #if ENABLED(ULTIPANEL)
+    #if HAS_LCD_MENU
       if (show_lcd) // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
     #endif
 
     return false;
   }
 
   #if DISABLED(ULTIPANEL)
     UNUSED(show_lcd);
   #else
@@ -335,30 +335,30 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
 uint8_t did_pause_print = 0;
 
 bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
 
   if (did_pause_print) return false; // already paused
 
   #ifdef ACTION_ON_PAUSE
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_PAUSE);
   #endif
 
-  #if ENABLED(ULTIPANEL)
+  #if HAS_LCD_MENU
     if (show_lcd) // Show initial message
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT);
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ERROR_START();
     SERIAL_ERRORLNPGM(MSG_ERR_HOTEND_TOO_COLD);
 
-    #if ENABLED(ULTIPANEL)
+    #if HAS_LCD_MENU
       if (show_lcd) { // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
     #endif
 
     return false; // unable to reach safe temperature
   }
 
   // Indicate that the printer is paused
@@ -409,21 +409,21 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
 /**
  * - Show "Insert filament and press button to continue"
  * - Wait for a click before returning
  * - Heaters can time out, reheated before accepting a click
  *
  * Used by M125 and M600
  */
 void wait_for_filament_reload(const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   bool nozzle_timed_out = false;
 
-  #if ENABLED(ULTIPANEL)
+  #if HAS_LCD_MENU
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
   #endif
   SERIAL_ECHO_START();
   SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_INSERT);
 
   #if HAS_BUZZER
     filament_change_beep(max_beep_count, true);
   #endif
 
   // Start the heater idle timers
@@ -447,46 +447,46 @@ void wait_for_filament_reload(const int8_t max_beep_count/*=0*/ DXC_ARGS) {
       filament_change_beep(max_beep_count);
     #endif
 
     // If the nozzle has timed out, wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the insert screen, restart the idle timers, and start over
     if (!nozzle_timed_out)
       HOTEND_LOOP()
         nozzle_timed_out |= thermalManager.is_heater_idle(e);
 
     if (nozzle_timed_out) {
-      #if ENABLED(ULTIPANEL)
+      #if HAS_LCD_MENU
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_CLICK_TO_HEAT_NOZZLE);
       #endif
       SERIAL_ECHO_START();
-      #if ENABLED(ULTIPANEL) && ENABLED(EMERGENCY_PARSER)
+      #if HAS_LCD_MENU && ENABLED(EMERGENCY_PARSER)
         SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_HEAT);
       #elif ENABLED(EMERGENCY_PARSER)
         SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_HEAT_M108);
       #else
         SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_HEAT_LCD);
       #endif
 
       // Wait for LCD click or M108
       while (wait_for_user) idle(true);
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_heater_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 
-      #if ENABLED(ULTIPANEL)
+      #if HAS_LCD_MENU
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
       #endif
       SERIAL_ECHO_START();
-      #if ENABLED(ULTIPANEL) && ENABLED(EMERGENCY_PARSER)
+      #if HAS_LCD_MENU && ENABLED(EMERGENCY_PARSER)
         SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT);
       #elif ENABLED(EMERGENCY_PARSER)
         SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT_M108);
       #else
         SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT_LCD);
       #endif
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
@@ -543,21 +543,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }
 
   if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) // Load the new filament
     load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, ADVANCED_PAUSE_MODE_PAUSE_PRINT DXC_PASS);
 
-  #if ENABLED(ULTIPANEL)
+  #if HAS_LCD_MENU
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME); // "Wait for print to resume"
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
@@ -571,21 +571,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   do_blocking_move_to_z(resume_position[Z_AXIS], NOZZLE_PARK_Z_FEEDRATE);
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]));
 
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     runout.reset();
   #endif
 
-  #if ENABLED(ULTIPANEL)
+  #if HAS_LCD_MENU
     // Show status screen
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
   #endif
 
   #ifdef ACTION_ON_RESUME
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_RESUME);
   #endif
 
   --did_pause_print;
 

commit e48cbff10dcc469501c4530e4e4d1da4993e7f49
Author: Roman Moravƒç√≠k <roman.moravcik@gmail.com>
Date:   Wed Oct 24 22:00:07 2018 +0200

    Fixed redefinition warnings of MSG_HOTEND_TOO_COLD. (#12203)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 58a9c9d64a..6c232b5db8 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -90,21 +90,21 @@ fil_change_settings_t fc_settings[EXTRUDERS];
  * - Display LCD placard with temperature status
  * - Return when heating is done or aborted
  *
  * Returns 'true' if heating was completed, 'false' for abort
  */
 static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_MODE_PAUSE_PRINT) {
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
       SERIAL_ERROR_START();
-      SERIAL_ERRORLNPGM(MSG_HOTEND_TOO_COLD);
+      SERIAL_ERRORLNPGM(MSG_ERR_HOTEND_TOO_COLD);
       return false;
     }
   #endif
 
   #if ENABLED(ULTIPANEL)
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_WAIT_FOR_NOZZLES_TO_HEAT, mode);
   #else
     UNUSED(mode);
   #endif
 
@@ -342,21 +342,21 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_PAUSE);
   #endif
 
   #if ENABLED(ULTIPANEL)
     if (show_lcd) // Show initial message
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT);
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ERROR_START();
-    SERIAL_ERRORLNPGM(MSG_HOTEND_TOO_COLD);
+    SERIAL_ERRORLNPGM(MSG_ERR_HOTEND_TOO_COLD);
 
     #if ENABLED(ULTIPANEL)
       if (show_lcd) { // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
         LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
       }
     #endif
 
     return false; // unable to reach safe temperature
   }

commit f98f4ac7eaab5f509da5cd94420821f23fe7aeea
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Tue Oct 16 15:58:29 2018 -0600

    Fix and improve EXTENSIBLE_UI (#12117)
    
    - Add methods to access print counter data
    - Clean up some inconsistent method names
    - Clear lcd status after filament change
    - Implement `lcd_reset_status` so it works like UltraLCD

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index d7fe9c7e05..58a9c9d64a 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -588,13 +588,17 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
   #endif
 
   --did_pause_print;
 
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif
+
+  #if ENABLED(ULTRA_LCD)
+    lcd_reset_status();
+  #endif
 }
 
 #endif // ADVANCED_PAUSE_FEATURE

commit d556dc18650e2185791834d7fe70b4acf45254bc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 10 09:45:20 2018 -0500

    Fix and improve EEPROM storage (#12054)
    
    * Clean up Temperature PID
    * Improve EEPROM read/write/validate
    * Group `SINGLENOZZLE` saved settings
    * Group planner saved settings
    * Group filament change saved settings
    * Group skew saved settings
    * Group `FWRETRACT` saved settings

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index bda88ec6e3..d7fe9c7e05 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -18,21 +18,21 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 /**
  * feature/pause.cpp - Pause feature support functions
  * This may be combined with related G-codes if features are consolidated.
  */
 
-#include "../inc/MarlinConfig.h"
+#include "../inc/MarlinConfigPre.h"
 
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
 
 #include "../Marlin.h"
 #include "../gcode/gcode.h"
 #include "../module/motion.h"
 #include "../module/planner.h"
 #include "../module/stepper.h"
 #include "../module/printcounter.h"
 #include "../module/temperature.h"
@@ -52,22 +52,21 @@
 #include "../libs/buzzer.h"
 #include "../libs/nozzle.h"
 #include "pause.h"
 
 // private:
 
 static float resume_position[XYZE];
 
 AdvancedPauseMenuResponse advanced_pause_menu_response;
 
-float filament_change_unload_length[EXTRUDERS],
-      filament_change_load_length[EXTRUDERS];
+fil_change_settings_t fc_settings[EXTRUDERS];
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
 
 #if HAS_BUZZER
   static void filament_change_beep(const int8_t max_beep_count, const bool init=false) {
     static millis_t next_buzz = 0;
     static int8_t runout_beep = 0;
 
@@ -184,28 +183,28 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
     active_extruder = DXC_ext;
     extruder_duplication_enabled = false;
   #endif
 
   // Slow Load filament
   if (slow_load_length) do_pause_e_move(slow_load_length, FILAMENT_CHANGE_SLOW_LOAD_FEEDRATE);
 
   // Fast Load Filament
   if (fast_load_length) {
     #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
-      const float saved_acceleration = planner.retract_acceleration;
-      planner.retract_acceleration = FILAMENT_CHANGE_FAST_LOAD_ACCEL;
+      const float saved_acceleration = planner.settings.retract_acceleration;
+      planner.settings.retract_acceleration = FILAMENT_CHANGE_FAST_LOAD_ACCEL;
     #endif
 
     do_pause_e_move(fast_load_length, FILAMENT_CHANGE_FAST_LOAD_FEEDRATE);
 
     #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
-      planner.retract_acceleration = saved_acceleration;
+      planner.settings.retract_acceleration = saved_acceleration;
     #endif
   }
 
   #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
     active_extruder = saved_ext;
     extruder_duplication_enabled = saved_ext_dup_mode;
     stepper.set_directions();
   #endif
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
@@ -288,32 +287,32 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_UNLOAD, mode);
   #endif
 
   // Retract filament
   do_pause_e_move(-FILAMENT_UNLOAD_RETRACT_LENGTH, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Wait for filament to cool
   safe_delay(FILAMENT_UNLOAD_DELAY);
 
   // Quickly purge
-  do_pause_e_move(FILAMENT_UNLOAD_RETRACT_LENGTH + FILAMENT_UNLOAD_PURGE_LENGTH, planner.max_feedrate_mm_s[E_AXIS]);
+  do_pause_e_move(FILAMENT_UNLOAD_RETRACT_LENGTH + FILAMENT_UNLOAD_PURGE_LENGTH, planner.settings.max_feedrate_mm_s[E_AXIS]);
 
   // Unload filament
   #if FILAMENT_CHANGE_UNLOAD_ACCEL > 0
-    const float saved_acceleration = planner.retract_acceleration;
-    planner.retract_acceleration = FILAMENT_CHANGE_UNLOAD_ACCEL;
+    const float saved_acceleration = planner.settings.retract_acceleration;
+    planner.settings.retract_acceleration = FILAMENT_CHANGE_UNLOAD_ACCEL;
   #endif
 
   do_pause_e_move(unload_length, FILAMENT_CHANGE_UNLOAD_FEEDRATE);
 
   #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
-    planner.retract_acceleration = saved_acceleration;
+    planner.settings.retract_acceleration = saved_acceleration;
   #endif
 
   // Disable extruders steppers for manual filament changing (only on boards that have separate ENABLE_PINS)
   #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE(E0, TMC2660) || AXIS_DRIVER_TYPE(E1, TMC2660) || AXIS_DRIVER_TYPE(E2, TMC2660) || AXIS_DRIVER_TYPE(E3, TMC2660) || AXIS_DRIVER_TYPE(E4, TMC2660) || AXIS_DRIVER_TYPE(E5, TMC2660)
     disable_e_stepper(active_extruder);
     safe_delay(100);
   #endif
 
   return true;
 }
@@ -552,21 +551,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
     load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, ADVANCED_PAUSE_MODE_PAUSE_PRINT DXC_PASS);
 
   #if ENABLED(ULTIPANEL)
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME); // "Wait for print to resume"
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
-      do_pause_e_move(-fwretract.retract_length, fwretract.retract_feedrate_mm_s);
+      do_pause_e_move(-fwretract.settings.retract_length, fwretract.settings.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
   if (resume_position[E_AXIS] < 0) do_pause_e_move(resume_position[E_AXIS], PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], NOZZLE_PARK_XY_FEEDRATE);
 
   // Move Z_AXIS to saved position
   do_blocking_move_to_z(resume_position[Z_AXIS], NOZZLE_PARK_Z_FEEDRATE);

commit 74cd6cb4fc90e4c483e7a97a313c0257790f1375
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Oct 7 18:06:14 2018 -0400

    Single nozzle filament change (#11994)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 0828875871..bda88ec6e3 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -105,21 +105,21 @@ static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_
 
   #if ENABLED(ULTIPANEL)
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_WAIT_FOR_NOZZLES_TO_HEAT, mode);
   #else
     UNUSED(mode);
   #endif
 
   return thermalManager.wait_for_hotend(active_extruder);
 }
 
-static void do_pause_e_move(const float &length, const float &fr) {
+void do_pause_e_move(const float &length, const float &fr) {
   current_position[E_AXIS] += length / planner.e_factor[active_extruder];
   planner.buffer_line(current_position, fr, active_extruder);
   planner.synchronize();
 }
 
 /**
  * Load filament into the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108

commit c447d759167bb118c2f26febdae71dd60c64977a
Author: teemuatlut <teemu.mantykallio@live.fi>
Date:   Sun Oct 7 01:18:10 2018 +0300

    Add support for TMC2660 (#11998)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 625b80360f..0828875871 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -303,21 +303,21 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
     planner.retract_acceleration = FILAMENT_CHANGE_UNLOAD_ACCEL;
   #endif
 
   do_pause_e_move(unload_length, FILAMENT_CHANGE_UNLOAD_FEEDRATE);
 
   #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
     planner.retract_acceleration = saved_acceleration;
   #endif
 
   // Disable extruders steppers for manual filament changing (only on boards that have separate ENABLE_PINS)
-  #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN
+  #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE(E0, TMC2660) || AXIS_DRIVER_TYPE(E1, TMC2660) || AXIS_DRIVER_TYPE(E2, TMC2660) || AXIS_DRIVER_TYPE(E3, TMC2660) || AXIS_DRIVER_TYPE(E4, TMC2660) || AXIS_DRIVER_TYPE(E5, TMC2660)
     disable_e_stepper(active_extruder);
     safe_delay(100);
   #endif
 
   return true;
 }
 
 // public:
 
 /**

commit cf0b9eb37cd8ce188941c3cfbe33a68ca39be297
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Oct 6 16:36:24 2018 -0500

    no need to use destination in do_pause_e_move

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index b5adb4add3..625b80360f 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -106,24 +106,22 @@ static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_
   #if ENABLED(ULTIPANEL)
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_WAIT_FOR_NOZZLES_TO_HEAT, mode);
   #else
     UNUSED(mode);
   #endif
 
   return thermalManager.wait_for_hotend(active_extruder);
 }
 
 static void do_pause_e_move(const float &length, const float &fr) {
-  set_destination_from_current();
-  destination[E_AXIS] += length / planner.e_factor[active_extruder];
-  planner.buffer_line(destination, fr, active_extruder);
-  set_current_from_destination();
+  current_position[E_AXIS] += length / planner.e_factor[active_extruder];
+  planner.buffer_line(current_position, fr, active_extruder);
   planner.synchronize();
 }
 
 /**
  * Load filament into the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard
  * - Load and purge filament

commit e4389f7d2308a8c3df2a961a511724513b519a4d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 29 01:44:47 2018 -0500

    Standard methods to wait for heating (#11949)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index f96254b44f..b5adb4add3 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -102,26 +102,21 @@ static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_
       return false;
     }
   #endif
 
   #if ENABLED(ULTIPANEL)
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_WAIT_FOR_NOZZLES_TO_HEAT, mode);
   #else
     UNUSED(mode);
   #endif
 
-  wait_for_heatup = true; // M108 will clear this
-  while (wait_for_heatup && thermalManager.wait_for_heating(active_extruder)) idle();
-  const bool status = wait_for_heatup;
-  wait_for_heatup = false;
-
-  return status;
+  return thermalManager.wait_for_hotend(active_extruder);
 }
 
 static void do_pause_e_move(const float &length, const float &fr) {
   set_destination_from_current();
   destination[E_AXIS] += length / planner.e_factor[active_extruder];
   planner.buffer_line(destination, fr, active_extruder);
   set_current_from_destination();
   planner.synchronize();
 }
 

commit 1667ed9d1ca3065df44d123c609f5b7d8b442338
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Sep 28 18:14:32 2018 -0500

    Pause should use ECHOLNPGM

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 2b7f547dd6..f96254b44f 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -460,46 +460,46 @@ void wait_for_filament_reload(const int8_t max_beep_count/*=0*/ DXC_ARGS) {
     if (!nozzle_timed_out)
       HOTEND_LOOP()
         nozzle_timed_out |= thermalManager.is_heater_idle(e);
 
     if (nozzle_timed_out) {
       #if ENABLED(ULTIPANEL)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_CLICK_TO_HEAT_NOZZLE);
       #endif
       SERIAL_ECHO_START();
       #if ENABLED(ULTIPANEL) && ENABLED(EMERGENCY_PARSER)
-        SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_HEAT);
+        SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_HEAT);
       #elif ENABLED(EMERGENCY_PARSER)
-        SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_HEAT_M108);
+        SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_HEAT_M108);
       #else
-        SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_HEAT_LCD);
+        SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_HEAT_LCD);
       #endif
 
       // Wait for LCD click or M108
       while (wait_for_user) idle(true);
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_heater_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 
       #if ENABLED(ULTIPANEL)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
       #endif
       SERIAL_ECHO_START();
       #if ENABLED(ULTIPANEL) && ENABLED(EMERGENCY_PARSER)
-        SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_INSERT);
+        SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT);
       #elif ENABLED(EMERGENCY_PARSER)
-        SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_INSERT_M108);
+        SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT_M108);
       #else
-        SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_INSERT_LCD);
+        SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT_LCD);
       #endif
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
       HOTEND_LOOP()
         thermalManager.start_heater_idle_timer(e, nozzle_timeout);
 
       wait_for_user = true; // Wait for user to load filament
       nozzle_timed_out = false;

commit 0780913848eea5048947808dfcc9143131f094d3
Author: Roxy-3D <Roxy-3D@users.noreply.github.com>
Date:   Mon Sep 17 01:06:22 2018 -0500

    IDEX Improvements (#11848)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 0af61060d6..2b7f547dd6 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -133,20 +133,21 @@ static void do_pause_e_move(const float &length, const float &fr) {
  * - Show "wait for load" placard
  * - Load and purge filament
  * - Show "Purge more" / "Continue" menu
  * - Return when "Continue" is selected
  *
  * Returns 'true' if load was completed, 'false' for abort
  */
 bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                    const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
+                   DXC_ARGS
 ) {
   #if DISABLED(ULTIPANEL)
     UNUSED(show_lcd);
   #endif
 
   if (!ensure_safe_temperature(mode)) {
     #if ENABLED(ULTIPANEL)
       if (show_lcd) // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
     #endif
@@ -177,37 +178,50 @@ bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_l
       idle(true);
     }
     KEEPALIVE_STATE(IN_HANDLER);
   }
 
   #if ENABLED(ULTIPANEL)
     if (show_lcd) // Show "wait for load" message
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD, mode);
   #endif
 
+  #if ENABLED(DUAL_X_CARRIAGE)
+    const int8_t saved_ext        = active_extruder;
+    const bool saved_ext_dup_mode = extruder_duplication_enabled;
+    active_extruder = DXC_ext;
+    extruder_duplication_enabled = false;
+  #endif
+
   // Slow Load filament
   if (slow_load_length) do_pause_e_move(slow_load_length, FILAMENT_CHANGE_SLOW_LOAD_FEEDRATE);
 
   // Fast Load Filament
   if (fast_load_length) {
     #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
       const float saved_acceleration = planner.retract_acceleration;
       planner.retract_acceleration = FILAMENT_CHANGE_FAST_LOAD_ACCEL;
     #endif
 
     do_pause_e_move(fast_load_length, FILAMENT_CHANGE_FAST_LOAD_FEEDRATE);
 
     #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
       planner.retract_acceleration = saved_acceleration;
     #endif
   }
 
+  #if ENABLED(DUAL_X_CARRIAGE)      // Tie the two extruders movement back together.
+    active_extruder = saved_ext;
+    extruder_duplication_enabled = saved_ext_dup_mode;
+    stepper.set_directions();
+  #endif
+
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     #if ENABLED(ULTIPANEL)
       if (show_lcd)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_CONTINUOUS_PURGE);
     #endif
 
     wait_for_user = true;
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
       do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
@@ -321,21 +335,22 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
  * - Abort if TARGET temperature is too low
  * - Display "wait for start of filament change" (if a length was specified)
  * - Initial retract, if current temperature is hot enough
  * - Park the nozzle at the given position
  * - Call unload_filament (if a length was specified)
  *
  * Returns 'true' if pause was completed, 'false' for abort
  */
 uint8_t did_pause_print = 0;
 
-bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/) {
+bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/ DXC_ARGS) {
+
   if (did_pause_print) return false; // already paused
 
   #ifdef ACTION_ON_PAUSE
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_PAUSE);
   #endif
 
   #if ENABLED(ULTIPANEL)
     if (show_lcd) // Show initial message
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT);
   #endif
@@ -373,53 +388,72 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   planner.synchronize();
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
     do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
   if (!axis_unhomed_error())
     Nozzle::park(2, park_point);
 
-  // Unload the filament
-  if (unload_length)
+  #if ENABLED(DUAL_X_CARRIAGE)
+    const int8_t saved_ext        = active_extruder;
+    const bool saved_ext_dup_mode = extruder_duplication_enabled;
+    active_extruder = DXC_ext;
+    extruder_duplication_enabled = false;
+  #endif
+
+  if (unload_length)   // Unload the filament
     unload_filament(unload_length, show_lcd);
 
+  #if ENABLED(DUAL_X_CARRIAGE)
+    active_extruder = saved_ext;
+    extruder_duplication_enabled = saved_ext_dup_mode;
+    stepper.set_directions();
+  #endif
+
   return true;
 }
 
 /**
  * - Show "Insert filament and press button to continue"
  * - Wait for a click before returning
  * - Heaters can time out, reheated before accepting a click
  *
  * Used by M125 and M600
  */
-void wait_for_filament_reload(const int8_t max_beep_count/*=0*/) {
+void wait_for_filament_reload(const int8_t max_beep_count/*=0*/ DXC_ARGS) {
   bool nozzle_timed_out = false;
 
   #if ENABLED(ULTIPANEL)
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
   #endif
   SERIAL_ECHO_START();
   SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_INSERT);
 
   #if HAS_BUZZER
     filament_change_beep(max_beep_count, true);
   #endif
 
   // Start the heater idle timers
   const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
   HOTEND_LOOP()
     thermalManager.start_heater_idle_timer(e, nozzle_timeout);
 
+  #if ENABLED(DUAL_X_CARRIAGE)
+    const int8_t saved_ext        = active_extruder;
+    const bool saved_ext_dup_mode = extruder_duplication_enabled;
+    active_extruder = DXC_ext;
+    extruder_duplication_enabled = false;
+  #endif
+
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
     #if HAS_BUZZER
       filament_change_beep(max_beep_count);
     #endif
 
     // If the nozzle has timed out, wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the insert screen, restart the idle timers, and start over
@@ -470,20 +504,25 @@ void wait_for_filament_reload(const int8_t max_beep_count/*=0*/) {
       wait_for_user = true; // Wait for user to load filament
       nozzle_timed_out = false;
 
       #if HAS_BUZZER
         filament_change_beep(max_beep_count, true);
       #endif
     }
 
     idle(true);
   }
+  #if ENABLED(DUAL_X_CARRIAGE)
+    active_extruder = saved_ext;
+    extruder_duplication_enabled = saved_ext_dup_mode;
+    stepper.set_directions();
+  #endif
   KEEPALIVE_STATE(IN_HANDLER);
 }
 
 /**
  * Resume or Start print procedure
  *
  * - Abort if not paused
  * - Reset heater idle timers
  * - Load filament if specified, but only if:
  *   - a nozzle timed out, or
@@ -491,38 +530,43 @@ void wait_for_filament_reload(const int8_t max_beep_count/*=0*/) {
  * - Display "wait for print to resume"
  * - Re-prime the nozzle...
  *   -  FWRETRACT: Recover/prime from the prior G10.
  *   - !FWRETRACT: Retract by resume_position[E], if negative.
  *                 Not sure how this logic comes into use.
  * - Move the nozzle back to resume_position
  * - Sync the planner E to resume_position[E]
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
-void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/) {
+void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/ DXC_ARGS) {
+  /*
+  SERIAL_ECHOPGM("start of resume_print()\n");
+  SERIAL_ECHOPAIR("\ndual_x_carriage_mode:", dual_x_carriage_mode);
+  SERIAL_ECHOPAIR("\nextruder_duplication_enabled:", extruder_duplication_enabled);
+  SERIAL_ECHOPAIR("\nactive_extruder:", active_extruder);
+  SERIAL_ECHOPGM("\n\n");
+  */
+
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }
 
-  if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) {
-    // Load the new filament
-    load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out);
-  }
+  if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) // Load the new filament
+    load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out, ADVANCED_PAUSE_MODE_PAUSE_PRINT DXC_PASS);
 
   #if ENABLED(ULTIPANEL)
-    // "Wait for print to resume"
-    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
+    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME); // "Wait for print to resume"
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.retract_length, fwretract.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative

commit c437bb08f12f1c0535cc78a761b49a18f2dc2a12
Author: Thomas Moore <tcm0116@users.noreply.github.com>
Date:   Sun Sep 16 22:24:15 2018 -0400

    Overhaul of the planner (#11578)
    
    - Move FWRETRACT to the planner
    - Combine leveling, skew, etc. in a single modifier method
    - Have kinematic and non-kinematic moves call one planner method

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 62e66122ef..0af61060d6 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -113,21 +113,21 @@ static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_
   while (wait_for_heatup && thermalManager.wait_for_heating(active_extruder)) idle();
   const bool status = wait_for_heatup;
   wait_for_heatup = false;
 
   return status;
 }
 
 static void do_pause_e_move(const float &length, const float &fr) {
   set_destination_from_current();
   destination[E_AXIS] += length / planner.e_factor[active_extruder];
-  planner.buffer_line_kinematic(destination, fr, active_extruder);
+  planner.buffer_line(destination, fr, active_extruder);
   set_current_from_destination();
   planner.synchronize();
 }
 
 /**
  * Load filament into the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard

commit 8f686aa449237c4e9ac5eb184e9b35427156fae9
Author: Giuliano <3684609+GMagician@users.noreply.github.com>
Date:   Tue Jul 17 04:49:29 2018 +0200

    [2.0.x] Fix change filament crash (#11269)
    
    Prevent crash, on filament change, when printer is not homed

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index d2188c7c7a..62e66122ef 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -369,25 +369,23 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   // Save current position
   COPY(resume_position, current_position);
 
   // Wait for buffered blocks to complete
   planner.synchronize();
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
     do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
-  #if ENABLED(NO_MOTION_BEFORE_HOMING)
-    if (!axis_unhomed_error())
-  #endif
-      // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
-      Nozzle::park(2, park_point);
+  // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
+  if (!axis_unhomed_error())
+    Nozzle::park(2, park_point);
 
   // Unload the filament
   if (unload_length)
     unload_filament(unload_length, show_lcd);
 
   return true;
 }
 
 /**
  * - Show "Insert filament and press button to continue"

commit 6919e876561eb2729419212e7887b6d34748bc93
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon May 28 17:39:23 2018 -0500

    Minor cleanup of multi-stepping logic

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index fa06193ab9..d2188c7c7a 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -526,21 +526,21 @@ void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_le
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.retract_length, fwretract.retract_feedrate_mm_s);
   #endif
 
   // If resume_position is negative
   if (resume_position[E_AXIS] < 0) do_pause_e_move(resume_position[E_AXIS], PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], NOZZLE_PARK_XY_FEEDRATE);
 
-  // Set Z_AXIS to saved position
+  // Move Z_AXIS to saved position
   do_blocking_move_to_z(resume_position[Z_AXIS], NOZZLE_PARK_Z_FEEDRATE);
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm((destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]));
 
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     runout.reset();
   #endif
 

commit 306f0f2135e4b2aed749a0d1b870abf17d883e38
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat May 12 01:38:02 2018 -0500

    Move Stepper::synchronize to Planner (#10713)
    
    Co-Authored-By: ejtagle <ejtagle@hotmail.com>

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 913316ecf9..fa06193ab9 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -115,21 +115,21 @@ static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_
   wait_for_heatup = false;
 
   return status;
 }
 
 static void do_pause_e_move(const float &length, const float &fr) {
   set_destination_from_current();
   destination[E_AXIS] += length / planner.e_factor[active_extruder];
   planner.buffer_line_kinematic(destination, fr, active_extruder);
   set_current_from_destination();
-  stepper.synchronize();
+  planner.synchronize();
 }
 
 /**
  * Load filament into the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard
  * - Load and purge filament
  * - Show "Purge more" / "Continue" menu
@@ -363,21 +363,21 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
       card.pauseSDPrint();
       ++did_pause_print; // Indicate SD pause also
     }
   #endif
   print_job_timer.pause();
 
   // Save current position
   COPY(resume_position, current_position);
 
   // Wait for buffered blocks to complete
-  stepper.synchronize();
+  planner.synchronize();
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
     do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   #if ENABLED(NO_MOTION_BEFORE_HOMING)
     if (!axis_unhomed_error())
   #endif
       // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
       Nozzle::park(2, park_point);

commit bfe223e1209af4e50917e752124c7215a4c38953
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu May 3 20:51:10 2018 -0500

    Adjust usage of stepper.synchronize

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 9666366544..913316ecf9 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -114,22 +114,22 @@ static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_
   const bool status = wait_for_heatup;
   wait_for_heatup = false;
 
   return status;
 }
 
 static void do_pause_e_move(const float &length, const float &fr) {
   set_destination_from_current();
   destination[E_AXIS] += length / planner.e_factor[active_extruder];
   planner.buffer_line_kinematic(destination, fr, active_extruder);
-  stepper.synchronize();
   set_current_from_destination();
+  stepper.synchronize();
 }
 
 /**
  * Load filament into the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard
  * - Load and purge filament
  * - Show "Purge more" / "Continue" menu
@@ -359,26 +359,26 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)
     if (card.sdprinting) {
       card.pauseSDPrint();
       ++did_pause_print; // Indicate SD pause also
     }
   #endif
   print_job_timer.pause();
 
-  // Wait for synchronize steppers
-  stepper.synchronize();
-
   // Save current position
   COPY(resume_position, current_position);
 
+  // Wait for buffered blocks to complete
+  stepper.synchronize();
+
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
     do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   #if ENABLED(NO_MOTION_BEFORE_HOMING)
     if (!axis_unhomed_error())
   #endif
       // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
       Nozzle::park(2, park_point);
 

commit 2d9b0a66fe8bbd417f6b1dfef9651667aef383c1
Author: Sean <noingwhat@gmail.com>
Date:   Tue Mar 20 11:19:10 2018 -0700

    Add Filament Change accelerations

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 0c5b742934..9666366544 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -130,21 +130,21 @@ static void do_pause_e_move(const float &length, const float &fr) {
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard
  * - Load and purge filament
  * - Show "Purge more" / "Continue" menu
  * - Return when "Continue" is selected
  *
  * Returns 'true' if load was completed, 'false' for abort
  */
-bool load_filament(const float &load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
+bool load_filament(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                    const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                    const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
 ) {
   #if DISABLED(ULTIPANEL)
     UNUSED(show_lcd);
   #endif
 
   if (!ensure_safe_temperature(mode)) {
     #if ENABLED(ULTIPANEL)
       if (show_lcd) // Show status screen
@@ -177,47 +177,61 @@ bool load_filament(const float &load_length/*=0*/, const float &purge_length/*=0
       idle(true);
     }
     KEEPALIVE_STATE(IN_HANDLER);
   }
 
   #if ENABLED(ULTIPANEL)
     if (show_lcd) // Show "wait for load" message
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD, mode);
   #endif
 
-  // Load filament
-  if (load_length) do_pause_e_move(load_length, FILAMENT_CHANGE_LOAD_FEEDRATE);
+  // Slow Load filament
+  if (slow_load_length) do_pause_e_move(slow_load_length, FILAMENT_CHANGE_SLOW_LOAD_FEEDRATE);
+
+  // Fast Load Filament
+  if (fast_load_length) {
+    #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
+      const float saved_acceleration = planner.retract_acceleration;
+      planner.retract_acceleration = FILAMENT_CHANGE_FAST_LOAD_ACCEL;
+    #endif
+
+    do_pause_e_move(fast_load_length, FILAMENT_CHANGE_FAST_LOAD_FEEDRATE);
+
+    #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
+      planner.retract_acceleration = saved_acceleration;
+    #endif
+  }
 
   #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
     #if ENABLED(ULTIPANEL)
       if (show_lcd)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_CONTINUOUS_PURGE);
     #endif
 
     wait_for_user = true;
     for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
-      do_pause_e_move(1, ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
+      do_pause_e_move(1, ADVANCED_PAUSE_PURGE_FEEDRATE);
     wait_for_user = false;
 
   #else
 
     do {
       if (purge_length > 0) {
         // "Wait for filament purge"
         #if ENABLED(ULTIPANEL)
           if (show_lcd)
             lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE, mode);
         #endif
 
         // Extrude filament to get into hotend
-        do_pause_e_move(purge_length, ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
+        do_pause_e_move(purge_length, ADVANCED_PAUSE_PURGE_FEEDRATE);
       }
 
       // Show "Purge More" / "Resume" menu and wait for reply
       #if ENABLED(ULTIPANEL)
         if (show_lcd) {
           KEEPALIVE_STATE(PAUSED_FOR_USER);
           wait_for_user = false;
           lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION, mode);
           while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
           KEEPALIVE_STATE(IN_HANDLER);
@@ -226,21 +240,21 @@ bool load_filament(const float &load_length/*=0*/, const float &purge_length/*=0
 
       // Keep looping if "Purge More" was selected
     } while (
       #if ENABLED(ULTIPANEL)
         show_lcd && advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE
       #else
         0
       #endif
     );
 
-  #endif      
+  #endif
 
   return true;
 }
 
 /**
  * Unload filament from the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - Show "wait for unload" placard
  * - Retract, pause, then unload filament
@@ -270,22 +284,31 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
   // Retract filament
   do_pause_e_move(-FILAMENT_UNLOAD_RETRACT_LENGTH, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Wait for filament to cool
   safe_delay(FILAMENT_UNLOAD_DELAY);
 
   // Quickly purge
   do_pause_e_move(FILAMENT_UNLOAD_RETRACT_LENGTH + FILAMENT_UNLOAD_PURGE_LENGTH, planner.max_feedrate_mm_s[E_AXIS]);
 
   // Unload filament
+  #if FILAMENT_CHANGE_UNLOAD_ACCEL > 0
+    const float saved_acceleration = planner.retract_acceleration;
+    planner.retract_acceleration = FILAMENT_CHANGE_UNLOAD_ACCEL;
+  #endif
+
   do_pause_e_move(unload_length, FILAMENT_CHANGE_UNLOAD_FEEDRATE);
 
+  #if FILAMENT_CHANGE_FAST_LOAD_ACCEL > 0
+    planner.retract_acceleration = saved_acceleration;
+  #endif
+
   // Disable extruders steppers for manual filament changing (only on boards that have separate ENABLE_PINS)
   #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN
     disable_e_stepper(active_extruder);
     safe_delay(100);
   #endif
 
   return true;
 }
 
 // public:
@@ -470,58 +493,59 @@ void wait_for_filament_reload(const int8_t max_beep_count/*=0*/) {
  * - Display "wait for print to resume"
  * - Re-prime the nozzle...
  *   -  FWRETRACT: Recover/prime from the prior G10.
  *   - !FWRETRACT: Retract by resume_position[E], if negative.
  *                 Not sure how this logic comes into use.
  * - Move the nozzle back to resume_position
  * - Sync the planner E to resume_position[E]
  * - Send host action for resume, if configured
  * - Resume the current SD print job, if any
  */
-void resume_print(const float &load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_EXTRUDE_LENGTH*/, const int8_t max_beep_count/*=0*/) {
+void resume_print(const float &slow_load_length/*=0*/, const float &fast_load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_PURGE_LENGTH*/, const int8_t max_beep_count/*=0*/) {
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }
 
   if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) {
     // Load the new filament
-    load_filament(load_length, purge_length, max_beep_count, true, nozzle_timed_out);
+    load_filament(slow_load_length, fast_load_length, purge_length, max_beep_count, true, nozzle_timed_out);
   }
 
   #if ENABLED(ULTIPANEL)
     // "Wait for print to resume"
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.retract_length, fwretract.retract_feedrate_mm_s);
   #endif
+
   // If resume_position is negative
   if (resume_position[E_AXIS] < 0) do_pause_e_move(resume_position[E_AXIS], PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], NOZZLE_PARK_XY_FEEDRATE);
 
   // Set Z_AXIS to saved position
   do_blocking_move_to_z(resume_position[Z_AXIS], NOZZLE_PARK_Z_FEEDRATE);
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
-  planner.set_e_position_mm(destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]);
+  planner.set_e_position_mm((destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]));
 
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     runout.reset();
   #endif
 
   #if ENABLED(ULTIPANEL)
     // Show status screen
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
   #endif
 

commit 2fa0a73c2ce89b11b20a8126490555df38180516
Author: Sean <noingwhat@gmail.com>
Date:   Tue Mar 20 11:33:01 2018 -0700

    Implement filament change continuous purge

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index ba28e0f571..0c5b742934 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -180,51 +180,67 @@ bool load_filament(const float &load_length/*=0*/, const float &purge_length/*=0
   }
 
   #if ENABLED(ULTIPANEL)
     if (show_lcd) // Show "wait for load" message
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD, mode);
   #endif
 
   // Load filament
   if (load_length) do_pause_e_move(load_length, FILAMENT_CHANGE_LOAD_FEEDRATE);
 
-  do {
-    if (purge_length > 0) {
-      // "Wait for filament purge"
-      #if ENABLED(ULTIPANEL)
-        if (show_lcd)
-          lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE, mode);
-      #endif
-
-      // Extrude filament to get into hotend
-      do_pause_e_move(purge_length, ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
-    }
+  #if ENABLED(ADVANCED_PAUSE_CONTINUOUS_PURGE)
 
-    // Show "Purge More" / "Resume" menu and wait for reply
     #if ENABLED(ULTIPANEL)
-      if (show_lcd) {
-        KEEPALIVE_STATE(PAUSED_FOR_USER);
-        wait_for_user = false;
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION, mode);
-        while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
-        KEEPALIVE_STATE(IN_HANDLER);
-      }
+      if (show_lcd)
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_CONTINUOUS_PURGE);
     #endif
 
-    // Keep looping if "Purge More" was selected
-  } while (
-    #if ENABLED(ULTIPANEL)
-      show_lcd && advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE
-    #else
-      0
-    #endif
-  );
+    wait_for_user = true;
+    for (float purge_count = purge_length; purge_count > 0 && wait_for_user; --purge_count)
+      do_pause_e_move(1, ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
+    wait_for_user = false;
+
+  #else
+
+    do {
+      if (purge_length > 0) {
+        // "Wait for filament purge"
+        #if ENABLED(ULTIPANEL)
+          if (show_lcd)
+            lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE, mode);
+        #endif
+
+        // Extrude filament to get into hotend
+        do_pause_e_move(purge_length, ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
+      }
+
+      // Show "Purge More" / "Resume" menu and wait for reply
+      #if ENABLED(ULTIPANEL)
+        if (show_lcd) {
+          KEEPALIVE_STATE(PAUSED_FOR_USER);
+          wait_for_user = false;
+          lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION, mode);
+          while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
+          KEEPALIVE_STATE(IN_HANDLER);
+        }
+      #endif
+
+      // Keep looping if "Purge More" was selected
+    } while (
+      #if ENABLED(ULTIPANEL)
+        show_lcd && advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE
+      #else
+        0
+      #endif
+    );
+
+  #endif      
 
   return true;
 }
 
 /**
  * Unload filament from the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - Show "wait for unload" placard
  * - Retract, pause, then unload filament

commit 5968a3e60eac512ade0c9482ab723ee0f33fb5a7
Author: teemuatlut <teemu.mantykallio@live.fi>
Date:   Thu Feb 22 20:28:46 2018 +0200

    Add ADVANCED_PAUSE_FEATURE include

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 846b370c98..ba28e0f571 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -44,20 +44,21 @@
 #if ENABLED(FILAMENT_RUNOUT_SENSOR)
   #include "../feature/runout.h"
 #endif
 
 #if ENABLED(ULTIPANEL)
   #include "../lcd/ultralcd.h"
 #endif
 
 #include "../libs/buzzer.h"
 #include "../libs/nozzle.h"
+#include "pause.h"
 
 // private:
 
 static float resume_position[XYZE];
 
 AdvancedPauseMenuResponse advanced_pause_menu_response;
 
 float filament_change_unload_length[EXTRUDERS],
       filament_change_load_length[EXTRUDERS];
 

commit d3ca82d8c24b94a0073d5839ddca6569a6d013a1
Author: Studiodyne <diabolomix@hotmail.fr>
Date:   Sun Feb 18 09:42:09 2018 +0100

    Support for multiple filament runout sensors

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 63c55fc914..846b370c98 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -493,21 +493,21 @@ void resume_print(const float &load_length/*=0*/, const float &purge_length/*=AD
   do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], NOZZLE_PARK_XY_FEEDRATE);
 
   // Set Z_AXIS to saved position
   do_blocking_move_to_z(resume_position[Z_AXIS], NOZZLE_PARK_Z_FEEDRATE);
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm(destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]);
 
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
-    filament_ran_out = false;
+    runout.reset();
   #endif
 
   #if ENABLED(ULTIPANEL)
     // Show status screen
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
   #endif
 
   #ifdef ACTION_ON_RESUME
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_RESUME);
   #endif

commit c46de340b774913520d3f99d57c9356c97477194
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Feb 3 20:05:23 2018 -0600

    Clean up trailing whitespace

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index a0e8d765b2..63c55fc914 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -481,21 +481,21 @@ void resume_print(const float &load_length/*=0*/, const float &purge_length/*=AD
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.retract_length, fwretract.retract_feedrate_mm_s);
   #endif
   // If resume_position is negative
   if (resume_position[E_AXIS] < 0) do_pause_e_move(resume_position[E_AXIS], PAUSE_PARK_RETRACT_FEEDRATE);
-  
+
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], NOZZLE_PARK_XY_FEEDRATE);
 
   // Set Z_AXIS to saved position
   do_blocking_move_to_z(resume_position[Z_AXIS], NOZZLE_PARK_Z_FEEDRATE);
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm(destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]);
 

commit 51d080d2c1fc633956869ae4f0b76021004fe445
Author: studiodyne <diabolomix@hotmail.fr>
Date:   Mon Jan 29 21:57:37 2018 +0100

    Update Pause

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 5425e35700..a0e8d765b2 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -478,25 +478,24 @@ void resume_print(const float &load_length/*=0*/, const float &purge_length/*=AD
   #if ENABLED(ULTIPANEL)
     // "Wait for print to resume"
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.retract_length, fwretract.retract_feedrate_mm_s);
-  #else
-    // If resume_position is negative
-    if (resume_position[E_AXIS] < 0) do_pause_e_move(resume_position[E_AXIS], PAUSE_PARK_RETRACT_FEEDRATE);
   #endif
-
+  // If resume_position is negative
+  if (resume_position[E_AXIS] < 0) do_pause_e_move(resume_position[E_AXIS], PAUSE_PARK_RETRACT_FEEDRATE);
+  
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], NOZZLE_PARK_XY_FEEDRATE);
 
   // Set Z_AXIS to saved position
   do_blocking_move_to_z(resume_position[Z_AXIS], NOZZLE_PARK_Z_FEEDRATE);
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm(destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]);
 

commit 3db35ba9be05355fdad018fb9128335e03097f7a
Author: Thomas Moore <tcm0116@users.noreply.github.com>
Date:   Mon Jan 22 10:21:42 2018 -0600

    [2.0.x] Fix change filament for delta machines (#9295)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index c22fbb8330..5425e35700 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -112,40 +112,40 @@ static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_
   while (wait_for_heatup && thermalManager.wait_for_heating(active_extruder)) idle();
   const bool status = wait_for_heatup;
   wait_for_heatup = false;
 
   return status;
 }
 
 static void do_pause_e_move(const float &length, const float &fr) {
   set_destination_from_current();
   destination[E_AXIS] += length / planner.e_factor[active_extruder];
-  buffer_line_to_destination(fr);
+  planner.buffer_line_kinematic(destination, fr, active_extruder);
   stepper.synchronize();
   set_current_from_destination();
 }
 
 /**
  * Load filament into the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - If pausing for confirmation, wait for a click or M108
  * - Show "wait for load" placard
  * - Load and purge filament
  * - Show "Purge more" / "Continue" menu
  * - Return when "Continue" is selected
  *
  * Returns 'true' if load was completed, 'false' for abort
  */
 bool load_filament(const float &load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
-                          const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
-                          const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
+                   const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
+                   const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
 ) {
   #if DISABLED(ULTIPANEL)
     UNUSED(show_lcd);
   #endif
 
   if (!ensure_safe_temperature(mode)) {
     #if ENABLED(ULTIPANEL)
       if (show_lcd) // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
     #endif
@@ -225,21 +225,21 @@ bool load_filament(const float &load_length/*=0*/, const float &purge_length/*=0
  * Unload filament from the hotend
  *
  * - Fail if the a safe temperature was not reached
  * - Show "wait for unload" placard
  * - Retract, pause, then unload filament
  * - Disable E stepper (on most machines)
  *
  * Returns 'true' if unload was completed, 'false' for abort
  */
 bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
-                            const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
+                     const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
 ) {
   if (!ensure_safe_temperature(mode)) {
     #if ENABLED(ULTIPANEL)
       if (show_lcd) // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
     #endif
 
     return false;
   }
 
@@ -329,22 +329,25 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   // Wait for synchronize steppers
   stepper.synchronize();
 
   // Save current position
   COPY(resume_position, current_position);
 
   // Initial retract before move to filament change position
   if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
     do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
-  // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
-  Nozzle::park(2, park_point);
+  #if ENABLED(NO_MOTION_BEFORE_HOMING)
+    if (!axis_unhomed_error())
+  #endif
+      // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
+      Nozzle::park(2, park_point);
 
   // Unload the filament
   if (unload_length)
     unload_filament(unload_length, show_lcd);
 
   return true;
 }
 
 /**
  * - Show "Insert filament and press button to continue"

commit b1cd012aa6b9ec5347a0a009037063bbe1fb19e4
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jan 22 04:37:40 2018 -0600

    Clean up and document load/unload/pause/resume

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 167e4cb74b..c22fbb8330 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -76,20 +76,29 @@ float filament_change_unload_length[EXTRUDERS],
     if (ELAPSED(ms, next_buzz)) {
       if (max_beep_count < 0 || runout_beep < max_beep_count + 5) { // Only beep as long as we're supposed to
         next_buzz = ms + ((max_beep_count < 0 || runout_beep < max_beep_count) ? 1000 : 500);
         BUZZ(50, 880 - (runout_beep & 1) * 220);
         runout_beep++;
       }
     }
   }
 #endif
 
+/**
+ * Ensure a safe temperature for extrusion
+ *
+ * - Fail if the TARGET temperature is too low
+ * - Display LCD placard with temperature status
+ * - Return when heating is done or aborted
+ *
+ * Returns 'true' if heating was completed, 'false' for abort
+ */
 static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_MODE_PAUSE_PRINT) {
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
       SERIAL_ERROR_START();
       SERIAL_ERRORLNPGM(MSG_HOTEND_TOO_COLD);
       return false;
     }
   #endif
 
@@ -108,21 +117,33 @@ static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_
 }
 
 static void do_pause_e_move(const float &length, const float &fr) {
   set_destination_from_current();
   destination[E_AXIS] += length / planner.e_factor[active_extruder];
   buffer_line_to_destination(fr);
   stepper.synchronize();
   set_current_from_destination();
 }
 
-bool load_filament(const float &load_length/*=0*/, const float &extrude_length/*=0*/, const int8_t max_beep_count/*=0*/,
+/**
+ * Load filament into the hotend
+ *
+ * - Fail if the a safe temperature was not reached
+ * - If pausing for confirmation, wait for a click or M108
+ * - Show "wait for load" placard
+ * - Load and purge filament
+ * - Show "Purge more" / "Continue" menu
+ * - Return when "Continue" is selected
+ *
+ * Returns 'true' if load was completed, 'false' for abort
+ */
+bool load_filament(const float &load_length/*=0*/, const float &purge_length/*=0*/, const int8_t max_beep_count/*=0*/,
                           const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
                           const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
 ) {
   #if DISABLED(ULTIPANEL)
     UNUSED(show_lcd);
   #endif
 
   if (!ensure_safe_temperature(mode)) {
     #if ENABLED(ULTIPANEL)
       if (show_lcd) // Show status screen
@@ -151,62 +172,72 @@ bool load_filament(const float &load_length/*=0*/, const float &extrude_length/*
     while (wait_for_user) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count);
       #endif
       idle(true);
     }
     KEEPALIVE_STATE(IN_HANDLER);
   }
 
   #if ENABLED(ULTIPANEL)
-    if (show_lcd) // Show "load" message
+    if (show_lcd) // Show "wait for load" message
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD, mode);
   #endif
 
   // Load filament
-  do_pause_e_move(load_length, FILAMENT_CHANGE_LOAD_FEEDRATE);
+  if (load_length) do_pause_e_move(load_length, FILAMENT_CHANGE_LOAD_FEEDRATE);
 
   do {
-    if (extrude_length > 0) {
+    if (purge_length > 0) {
       // "Wait for filament purge"
       #if ENABLED(ULTIPANEL)
         if (show_lcd)
           lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE, mode);
       #endif
 
       // Extrude filament to get into hotend
-      do_pause_e_move(extrude_length, ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
+      do_pause_e_move(purge_length, ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
     }
 
-    // Show "Extrude More" / "Resume" menu and wait for reply
+    // Show "Purge More" / "Resume" menu and wait for reply
     #if ENABLED(ULTIPANEL)
       if (show_lcd) {
         KEEPALIVE_STATE(PAUSED_FOR_USER);
         wait_for_user = false;
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION, mode);
         while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
         KEEPALIVE_STATE(IN_HANDLER);
       }
     #endif
 
-    // Keep looping if "Extrude More" was selected
+    // Keep looping if "Purge More" was selected
   } while (
     #if ENABLED(ULTIPANEL)
       show_lcd && advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE
     #else
       0
     #endif
   );
 
   return true;
 }
 
+/**
+ * Unload filament from the hotend
+ *
+ * - Fail if the a safe temperature was not reached
+ * - Show "wait for unload" placard
+ * - Retract, pause, then unload filament
+ * - Disable E stepper (on most machines)
+ *
+ * Returns 'true' if unload was completed, 'false' for abort
+ */
 bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
                             const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
 ) {
   if (!ensure_safe_temperature(mode)) {
     #if ENABLED(ULTIPANEL)
       if (show_lcd) // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
     #endif
 
     return false;
@@ -235,20 +266,33 @@ bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
   #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN
     disable_e_stepper(active_extruder);
     safe_delay(100);
   #endif
 
   return true;
 }
 
 // public:
 
+/**
+ * Pause procedure
+ *
+ * - Abort if already paused
+ * - Send host action for pause, if configured
+ * - Abort if TARGET temperature is too low
+ * - Display "wait for start of filament change" (if a length was specified)
+ * - Initial retract, if current temperature is hot enough
+ * - Park the nozzle at the given position
+ * - Call unload_filament (if a length was specified)
+ *
+ * Returns 'true' if pause was completed, 'false' for abort
+ */
 uint8_t did_pause_print = 0;
 
 bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/) {
   if (did_pause_print) return false; // already paused
 
   #ifdef ACTION_ON_PAUSE
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_PAUSE);
   #endif
 
   #if ENABLED(ULTIPANEL)
@@ -270,21 +314,21 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
     return false; // unable to reach safe temperature
   }
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)
     if (card.sdprinting) {
       card.pauseSDPrint();
-      ++did_pause_print;
+      ++did_pause_print; // Indicate SD pause also
     }
   #endif
   print_job_timer.pause();
 
   // Wait for synchronize steppers
   stepper.synchronize();
 
   // Save current position
   COPY(resume_position, current_position);
 
@@ -295,20 +339,27 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
   Nozzle::park(2, park_point);
 
   // Unload the filament
   if (unload_length)
     unload_filament(unload_length, show_lcd);
 
   return true;
 }
 
+/**
+ * - Show "Insert filament and press button to continue"
+ * - Wait for a click before returning
+ * - Heaters can time out, reheated before accepting a click
+ *
+ * Used by M125 and M600
+ */
 void wait_for_filament_reload(const int8_t max_beep_count/*=0*/) {
   bool nozzle_timed_out = false;
 
   #if ENABLED(ULTIPANEL)
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
   #endif
   SERIAL_ECHO_START();
   SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_INSERT);
 
   #if HAS_BUZZER
@@ -381,48 +432,65 @@ void wait_for_filament_reload(const int8_t max_beep_count/*=0*/) {
       #if HAS_BUZZER
         filament_change_beep(max_beep_count, true);
       #endif
     }
 
     idle(true);
   }
   KEEPALIVE_STATE(IN_HANDLER);
 }
 
-void resume_print(const float &load_length/*=0*/, const float &extrude_length/*=ADVANCED_PAUSE_EXTRUDE_LENGTH*/, const int8_t max_beep_count/*=0*/) {
-  bool nozzle_timed_out = false;
-
+/**
+ * Resume or Start print procedure
+ *
+ * - Abort if not paused
+ * - Reset heater idle timers
+ * - Load filament if specified, but only if:
+ *   - a nozzle timed out, or
+ *   - the nozzle is already heated.
+ * - Display "wait for print to resume"
+ * - Re-prime the nozzle...
+ *   -  FWRETRACT: Recover/prime from the prior G10.
+ *   - !FWRETRACT: Retract by resume_position[E], if negative.
+ *                 Not sure how this logic comes into use.
+ * - Move the nozzle back to resume_position
+ * - Sync the planner E to resume_position[E]
+ * - Send host action for resume, if configured
+ * - Resume the current SD print job, if any
+ */
+void resume_print(const float &load_length/*=0*/, const float &purge_length/*=ADVANCED_PAUSE_EXTRUDE_LENGTH*/, const int8_t max_beep_count/*=0*/) {
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
+  bool nozzle_timed_out = false;
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }
 
   if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) {
     // Load the new filament
-    load_filament(load_length, extrude_length, max_beep_count, true, nozzle_timed_out);
+    load_filament(load_length, purge_length, max_beep_count, true, nozzle_timed_out);
   }
 
   #if ENABLED(ULTIPANEL)
     // "Wait for print to resume"
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.retract_length, fwretract.retract_feedrate_mm_s);
   #else
-    // If resume_position negative
+    // If resume_position is negative
     if (resume_position[E_AXIS] < 0) do_pause_e_move(resume_position[E_AXIS], PAUSE_PARK_RETRACT_FEEDRATE);
   #endif
 
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], NOZZLE_PARK_XY_FEEDRATE);
 
   // Set Z_AXIS to saved position
   do_blocking_move_to_z(resume_position[Z_AXIS], NOZZLE_PARK_Z_FEEDRATE);
 
   // Now all extrusion positions are resumed and ready to be confirmed

commit 266086670b6ec1a80d883182e2d26270f0627937
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jan 22 04:30:49 2018 -0600

    Better LCD message when heating needed

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index cdb51e32c3..167e4cb74b 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -254,22 +254,24 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   #if ENABLED(ULTIPANEL)
     if (show_lcd) // Show initial message
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT);
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
     SERIAL_ERROR_START();
     SERIAL_ERRORLNPGM(MSG_HOTEND_TOO_COLD);
 
     #if ENABLED(ULTIPANEL)
-      if (show_lcd) // Show status screen
+      if (show_lcd) { // Show status screen
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
+        LCD_MESSAGEPGM(MSG_M600_TOO_COLD);
+      }
     #endif
 
     return false; // unable to reach safe temperature
   }
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)

commit 61bf8478a2a10f083462f4292a44671b944bce0e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jan 22 04:29:29 2018 -0600

    Add hotEnough methods

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 43244acbc9..cdb51e32c3 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -280,21 +280,21 @@ bool pause_print(const float &retract, const point_t &park_point, const float &u
   #endif
   print_job_timer.pause();
 
   // Wait for synchronize steppers
   stepper.synchronize();
 
   // Save current position
   COPY(resume_position, current_position);
 
   // Initial retract before move to filament change position
-  if (retract && !thermalManager.tooColdToExtrude(active_extruder))
+  if (retract && thermalManager.hotEnoughToExtrude(active_extruder))
     do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
   Nozzle::park(2, park_point);
 
   // Unload the filament
   if (unload_length)
     unload_filament(unload_length, show_lcd);
 
   return true;
@@ -390,21 +390,21 @@ void resume_print(const float &load_length/*=0*/, const float &extrude_length/*=
   bool nozzle_timed_out = false;
 
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }
 
-  if (nozzle_timed_out || !thermalManager.tooColdToExtrude(active_extruder)) {
+  if (nozzle_timed_out || thermalManager.hotEnoughToExtrude(active_extruder)) {
     // Load the new filament
     load_filament(load_length, extrude_length, max_beep_count, true, nozzle_timed_out);
   }
 
   #if ENABLED(ULTIPANEL)
     // "Wait for print to resume"
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
   #endif
 
   // Intelligent resuming

commit 7541316bb49303ce97e062da601e26426321c4ba
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 4 05:06:34 2018 -0600

    Add M701/M702 Filament Load/Unload, M603

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index ccdeb429dd..43244acbc9 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -20,21 +20,21 @@
  *
  */
 
 /**
  * feature/pause.cpp - Pause feature support functions
  * This may be combined with related G-codes if features are consolidated.
  */
 
 #include "../inc/MarlinConfig.h"
 
-#if ENABLED(ADVANCED_PAUSE_FEATURE) || ENABLED(PARK_HEAD_ON_PAUSE)
+#if ENABLED(ADVANCED_PAUSE_FEATURE)
 
 #include "../Marlin.h"
 #include "../gcode/gcode.h"
 #include "../module/motion.h"
 #include "../module/planner.h"
 #include "../module/stepper.h"
 #include "../module/printcounter.h"
 #include "../module/temperature.h"
 
 #if ENABLED(FWRETRACT)
@@ -49,292 +49,366 @@
   #include "../lcd/ultralcd.h"
 #endif
 
 #include "../libs/buzzer.h"
 #include "../libs/nozzle.h"
 
 // private:
 
 static float resume_position[XYZE];
 
+AdvancedPauseMenuResponse advanced_pause_menu_response;
+
+float filament_change_unload_length[EXTRUDERS],
+      filament_change_load_length[EXTRUDERS];
+
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
 #endif
 
 #if HAS_BUZZER
   static void filament_change_beep(const int8_t max_beep_count, const bool init=false) {
     static millis_t next_buzz = 0;
     static int8_t runout_beep = 0;
 
     if (init) next_buzz = runout_beep = 0;
 
     const millis_t ms = millis();
     if (ELAPSED(ms, next_buzz)) {
       if (max_beep_count < 0 || runout_beep < max_beep_count + 5) { // Only beep as long as we're supposed to
-        next_buzz = ms + ((max_beep_count < 0 || runout_beep < max_beep_count) ? 2500 : 400);
-        BUZZ(300, 2000);
+        next_buzz = ms + ((max_beep_count < 0 || runout_beep < max_beep_count) ? 1000 : 500);
+        BUZZ(50, 880 - (runout_beep & 1) * 220);
         runout_beep++;
       }
     }
   }
 #endif
 
-static void ensure_safe_temperature() {
-  bool heaters_heating = true;
-
-  wait_for_heatup = true;    // M108 will clear this
-  while (wait_for_heatup && heaters_heating) {
-    idle();
-    heaters_heating = false;
-    HOTEND_LOOP() {
-      if (thermalManager.degTargetHotend(e) && abs(thermalManager.degHotend(e) - thermalManager.degTargetHotend(e)) > TEMP_HYSTERESIS) {
-        heaters_heating = true;
-        #if ENABLED(ULTIPANEL)
-          lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_WAIT_FOR_NOZZLES_TO_HEAT);
-        #endif
-        break;
-      }
+static bool ensure_safe_temperature(const AdvancedPauseMode mode=ADVANCED_PAUSE_MODE_PAUSE_PRINT) {
+
+  #if ENABLED(PREVENT_COLD_EXTRUSION)
+    if (!DEBUGGING(DRYRUN) && thermalManager.targetTooColdToExtrude(active_extruder)) {
+      SERIAL_ERROR_START();
+      SERIAL_ERRORLNPGM(MSG_HOTEND_TOO_COLD);
+      return false;
     }
-  }
+  #endif
+
+  #if ENABLED(ULTIPANEL)
+    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_WAIT_FOR_NOZZLES_TO_HEAT, mode);
+  #else
+    UNUSED(mode);
+  #endif
+
+  wait_for_heatup = true; // M108 will clear this
+  while (wait_for_heatup && thermalManager.wait_for_heating(active_extruder)) idle();
+  const bool status = wait_for_heatup;
+  wait_for_heatup = false;
+
+  return status;
 }
 
-void do_pause_e_move(const float &length, const float fr) {
-  current_position[E_AXIS] += length / planner.e_factor[active_extruder];
+static void do_pause_e_move(const float &length, const float &fr) {
   set_destination_from_current();
-  #if IS_KINEMATIC
-    planner.buffer_line_kinematic(destination, fr, active_extruder);
+  destination[E_AXIS] += length / planner.e_factor[active_extruder];
+  buffer_line_to_destination(fr);
+  stepper.synchronize();
+  set_current_from_destination();
+}
+
+bool load_filament(const float &load_length/*=0*/, const float &extrude_length/*=0*/, const int8_t max_beep_count/*=0*/,
+                          const bool show_lcd/*=false*/, const bool pause_for_user/*=false*/,
+                          const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
+) {
+  #if DISABLED(ULTIPANEL)
+    UNUSED(show_lcd);
+  #endif
+
+  if (!ensure_safe_temperature(mode)) {
+    #if ENABLED(ULTIPANEL)
+      if (show_lcd) // Show status screen
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
+    #endif
+
+    return false;
+  }
+
+  if (pause_for_user) {
+    #if ENABLED(ULTIPANEL)
+      if (show_lcd) // Show "insert filament"
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT, mode);
+    #endif
+    SERIAL_ECHO_START();
+    SERIAL_ECHOLNPGM(MSG_FILAMENT_CHANGE_INSERT);
+
+    #if HAS_BUZZER
+      filament_change_beep(max_beep_count, true);
+    #else
+      UNUSED(max_beep_count);
+    #endif
+
+    KEEPALIVE_STATE(PAUSED_FOR_USER);
+    wait_for_user = true;    // LCD click or M108 will clear this
+    while (wait_for_user) {
+      #if HAS_BUZZER
+        filament_change_beep(max_beep_count);
+      #endif
+      idle(true);
+    }
+    KEEPALIVE_STATE(IN_HANDLER);
+  }
+
+  #if ENABLED(ULTIPANEL)
+    if (show_lcd) // Show "load" message
+      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD, mode);
+  #endif
+
+  // Load filament
+  do_pause_e_move(load_length, FILAMENT_CHANGE_LOAD_FEEDRATE);
+
+  do {
+    if (extrude_length > 0) {
+      // "Wait for filament purge"
+      #if ENABLED(ULTIPANEL)
+        if (show_lcd)
+          lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_PURGE, mode);
+      #endif
+
+      // Extrude filament to get into hotend
+      do_pause_e_move(extrude_length, ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
+    }
+
+    // Show "Extrude More" / "Resume" menu and wait for reply
+    #if ENABLED(ULTIPANEL)
+      if (show_lcd) {
+        KEEPALIVE_STATE(PAUSED_FOR_USER);
+        wait_for_user = false;
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION, mode);
+        while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
+        KEEPALIVE_STATE(IN_HANDLER);
+      }
+    #endif
+
+    // Keep looping if "Extrude More" was selected
+  } while (
+    #if ENABLED(ULTIPANEL)
+      show_lcd && advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE
+    #else
+      0
+    #endif
+  );
+
+  return true;
+}
+
+bool unload_filament(const float &unload_length, const bool show_lcd/*=false*/,
+                            const AdvancedPauseMode mode/*=ADVANCED_PAUSE_MODE_PAUSE_PRINT*/
+) {
+  if (!ensure_safe_temperature(mode)) {
+    #if ENABLED(ULTIPANEL)
+      if (show_lcd) // Show status screen
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
+    #endif
+
+    return false;
+  }
+
+  #if DISABLED(ULTIPANEL)
+    UNUSED(show_lcd);
   #else
-    buffer_line_to_destination(fr);
+    if (show_lcd)
+      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_UNLOAD, mode);
   #endif
-  stepper.synchronize();
+
+  // Retract filament
+  do_pause_e_move(-FILAMENT_UNLOAD_RETRACT_LENGTH, PAUSE_PARK_RETRACT_FEEDRATE);
+
+  // Wait for filament to cool
+  safe_delay(FILAMENT_UNLOAD_DELAY);
+
+  // Quickly purge
+  do_pause_e_move(FILAMENT_UNLOAD_RETRACT_LENGTH + FILAMENT_UNLOAD_PURGE_LENGTH, planner.max_feedrate_mm_s[E_AXIS]);
+
+  // Unload filament
+  do_pause_e_move(unload_length, FILAMENT_CHANGE_UNLOAD_FEEDRATE);
+
+  // Disable extruders steppers for manual filament changing (only on boards that have separate ENABLE_PINS)
+  #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN
+    disable_e_stepper(active_extruder);
+    safe_delay(100);
+  #endif
+
+  return true;
 }
 
 // public:
 
 uint8_t did_pause_print = 0;
 
-bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/,
-                 const int8_t max_beep_count/*=0*/, const bool show_lcd/*=false*/
-) {
+bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/, const bool show_lcd/*=false*/) {
   if (did_pause_print) return false; // already paused
 
   #ifdef ACTION_ON_PAUSE
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_PAUSE);
   #endif
 
-  if (!DEBUGGING(DRYRUN) && unload_length != 0) {
-    #if ENABLED(PREVENT_COLD_EXTRUSION)
-      if (!thermalManager.allow_cold_extrude &&
-          thermalManager.degTargetHotend(active_extruder) < thermalManager.extrude_min_temp) {
-        SERIAL_ERROR_START();
-        SERIAL_ERRORLNPGM(MSG_TOO_COLD_FOR_M600);
-        return false;
-      }
+  #if ENABLED(ULTIPANEL)
+    if (show_lcd) // Show initial message
+      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT);
+  #endif
+
+  if (!DEBUGGING(DRYRUN) && unload_length && thermalManager.targetTooColdToExtrude(active_extruder)) {
+    SERIAL_ERROR_START();
+    SERIAL_ERRORLNPGM(MSG_HOTEND_TOO_COLD);
+
+    #if ENABLED(ULTIPANEL)
+      if (show_lcd) // Show status screen
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
     #endif
 
-    ensure_safe_temperature(); // wait for extruder to heat up before unloading
+    return false; // unable to reach safe temperature
   }
 
   // Indicate that the printer is paused
   ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)
-    if (IS_SD_PRINTING) {
+    if (card.sdprinting) {
       card.pauseSDPrint();
       ++did_pause_print;
     }
   #endif
   print_job_timer.pause();
 
-  // Show initial message and wait for synchronize steppers
-  if (show_lcd) {
-    #if ENABLED(ULTIPANEL)
-      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT);
-    #endif
-  }
-
+  // Wait for synchronize steppers
   stepper.synchronize();
-  COPY(resume_position, current_position); // Save current position for later
+
+  // Save current position
+  COPY(resume_position, current_position);
 
   // Initial retract before move to filament change position
   if (retract && !thermalManager.tooColdToExtrude(active_extruder))
     do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
   Nozzle::park(2, park_point);
 
-  if (unload_length != 0) {
-    if (show_lcd) {
-      #if ENABLED(ULTIPANEL)
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_UNLOAD);
-        idle();
-      #endif
-    }
+  // Unload the filament
+  if (unload_length)
+    unload_filament(unload_length, show_lcd);
 
-    // Unload filament
-    do_pause_e_move(unload_length, FILAMENT_CHANGE_UNLOAD_FEEDRATE);
-  }
+  return true;
+}
 
-  if (show_lcd) {
-    #if ENABLED(ULTIPANEL)
-      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
-    #endif
-  }
+void wait_for_filament_reload(const int8_t max_beep_count/*=0*/) {
+  bool nozzle_timed_out = false;
 
-  #if HAS_BUZZER
-    filament_change_beep(max_beep_count, true);
+  #if ENABLED(ULTIPANEL)
+    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
   #endif
+  SERIAL_ECHO_START();
+  SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_INSERT);
 
-  idle();
-
-  // Disable extruders steppers for manual filament changing (only on boards that have separate ENABLE_PINS)
-  #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN
-    disable_e_steppers();
-    safe_delay(100);
+  #if HAS_BUZZER
+    filament_change_beep(max_beep_count, true);
   #endif
 
   // Start the heater idle timers
   const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
   HOTEND_LOOP()
     thermalManager.start_heater_idle_timer(e, nozzle_timeout);
 
-  return true;
-}
-
-void wait_for_filament_reload(const int8_t max_beep_count/*=0*/) {
-  bool nozzle_timed_out = false;
-
   // Wait for filament insert by user and press button
   KEEPALIVE_STATE(PAUSED_FOR_USER);
   wait_for_user = true;    // LCD click or M108 will clear this
   while (wait_for_user) {
     #if HAS_BUZZER
       filament_change_beep(max_beep_count);
     #endif
 
     // If the nozzle has timed out, wait for the user to press the button to re-heat the nozzle, then
     // re-heat the nozzle, re-show the insert screen, restart the idle timers, and start over
     if (!nozzle_timed_out)
       HOTEND_LOOP()
         nozzle_timed_out |= thermalManager.is_heater_idle(e);
 
     if (nozzle_timed_out) {
       #if ENABLED(ULTIPANEL)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_CLICK_TO_HEAT_NOZZLE);
       #endif
+      SERIAL_ECHO_START();
+      #if ENABLED(ULTIPANEL) && ENABLED(EMERGENCY_PARSER)
+        SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_HEAT);
+      #elif ENABLED(EMERGENCY_PARSER)
+        SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_HEAT_M108);
+      #else
+        SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_HEAT_LCD);
+      #endif
 
       // Wait for LCD click or M108
       while (wait_for_user) idle(true);
 
       // Re-enable the heaters if they timed out
       HOTEND_LOOP() thermalManager.reset_heater_idle_timer(e);
 
       // Wait for the heaters to reach the target temperatures
       ensure_safe_temperature();
 
       #if ENABLED(ULTIPANEL)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
       #endif
+      SERIAL_ECHO_START();
+      #if ENABLED(ULTIPANEL) && ENABLED(EMERGENCY_PARSER)
+        SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_INSERT);
+      #elif ENABLED(EMERGENCY_PARSER)
+        SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_INSERT_M108);
+      #else
+        SERIAL_ERRORLNPGM(MSG_FILAMENT_CHANGE_INSERT_LCD);
+      #endif
 
       // Start the heater idle timers
       const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
 
       HOTEND_LOOP()
         thermalManager.start_heater_idle_timer(e, nozzle_timeout);
 
-      wait_for_user = true; /* Wait for user to load filament */
+      wait_for_user = true; // Wait for user to load filament
       nozzle_timed_out = false;
 
       #if HAS_BUZZER
         filament_change_beep(max_beep_count, true);
       #endif
     }
 
     idle(true);
   }
   KEEPALIVE_STATE(IN_HANDLER);
 }
 
-void resume_print(const float &load_length/*=0*/, const float &initial_extrude_length/*=0*/, const int8_t max_beep_count/*=0*/) {
+void resume_print(const float &load_length/*=0*/, const float &extrude_length/*=ADVANCED_PAUSE_EXTRUDE_LENGTH*/, const int8_t max_beep_count/*=0*/) {
   bool nozzle_timed_out = false;
 
   if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }
 
-  if (nozzle_timed_out) ensure_safe_temperature();
-
-  #if HAS_BUZZER
-    filament_change_beep(max_beep_count, true);
-  #endif
-
-  if (load_length != 0) {
-    #if ENABLED(ULTIPANEL)
-      // Show "insert filament"
-      if (nozzle_timed_out)
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
-    #endif
-
-    KEEPALIVE_STATE(PAUSED_FOR_USER);
-    wait_for_user = true;    // LCD click or M108 will clear this
-    while (wait_for_user && nozzle_timed_out) {
-      #if HAS_BUZZER
-        filament_change_beep(max_beep_count);
-      #endif
-      idle(true);
-    }
-    KEEPALIVE_STATE(IN_HANDLER);
-
-    #if ENABLED(ULTIPANEL)
-      // Show "load" message
-      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD);
-    #endif
-
-    // Load filament
-    do_pause_e_move(load_length, FILAMENT_CHANGE_LOAD_FEEDRATE);
+  if (nozzle_timed_out || !thermalManager.tooColdToExtrude(active_extruder)) {
+    // Load the new filament
+    load_filament(load_length, extrude_length, max_beep_count, true, nozzle_timed_out);
   }
 
-  #if ENABLED(ULTIPANEL) && ADVANCED_PAUSE_EXTRUDE_LENGTH > 0
-
-    if (!thermalManager.tooColdToExtrude(active_extruder)) {
-      float extrude_length = initial_extrude_length;
-
-      do {
-        if (extrude_length > 0) {
-          // "Wait for filament extrude"
-          lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_EXTRUDE);
-
-          // Extrude filament to get into hotend
-          do_pause_e_move(extrude_length, ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
-        }
-
-        // Show "Extrude More" / "Resume" menu and wait for reply
-        KEEPALIVE_STATE(PAUSED_FOR_USER);
-        wait_for_user = false;
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION);
-        while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
-        KEEPALIVE_STATE(IN_HANDLER);
-
-        extrude_length = ADVANCED_PAUSE_EXTRUDE_LENGTH;
-
-        // Keep looping if "Extrude More" was selected
-      } while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE);
-    }
-
-  #endif
-
   #if ENABLED(ULTIPANEL)
     // "Wait for print to resume"
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
   #endif
 
   // Intelligent resuming
   #if ENABLED(FWRETRACT)
     // If retracted before goto pause
     if (fwretract.retracted[active_extruder])
       do_pause_e_move(-fwretract.retract_length, fwretract.retract_feedrate_mm_s);
@@ -351,29 +425,29 @@ void resume_print(const float &load_length/*=0*/, const float &initial_extrude_l
 
   // Now all extrusion positions are resumed and ready to be confirmed
   // Set extruder to saved position
   planner.set_e_position_mm(destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]);
 
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     filament_ran_out = false;
   #endif
 
   #if ENABLED(ULTIPANEL)
-    // Show pause status screen
+    // Show status screen
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
   #endif
 
   #ifdef ACTION_ON_RESUME
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_RESUME);
   #endif
 
   --did_pause_print;
 
   #if ENABLED(SDSUPPORT)
     if (did_pause_print) {
       card.startFileprint();
       --did_pause_print;
     }
   #endif
 }
 
-#endif // ADVANCED_PAUSE_FEATURE || PARK_HEAD_ON_PAUSE
+#endif // ADVANCED_PAUSE_FEATURE

commit 31582caa078f6384f9dddacc26deec44347262ef
Author: studiodyne <diabolomix@hotmail.fr>
Date:   Thu Jan 4 06:18:27 2018 +0100

    2.0  Fix for bad Pause extruder position resuming (#9029)

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 92f4f9d6be..ccdeb429dd 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -30,20 +30,24 @@
 #if ENABLED(ADVANCED_PAUSE_FEATURE) || ENABLED(PARK_HEAD_ON_PAUSE)
 
 #include "../Marlin.h"
 #include "../gcode/gcode.h"
 #include "../module/motion.h"
 #include "../module/planner.h"
 #include "../module/stepper.h"
 #include "../module/printcounter.h"
 #include "../module/temperature.h"
 
+#if ENABLED(FWRETRACT)
+  #include "../feature/fwretract.h"
+#endif
+
 #if ENABLED(FILAMENT_RUNOUT_SENSOR)
   #include "../feature/runout.h"
 #endif
 
 #if ENABLED(ULTIPANEL)
   #include "../lcd/ultralcd.h"
 #endif
 
 #include "../libs/buzzer.h"
 #include "../libs/nozzle.h"
@@ -322,27 +326,40 @@ void resume_print(const float &load_length/*=0*/, const float &initial_extrude_l
       } while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE);
     }
 
   #endif
 
   #if ENABLED(ULTIPANEL)
     // "Wait for print to resume"
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
   #endif
 
-  // Set extruder to saved position
-  planner.set_e_position_mm((current_position[E_AXIS] = resume_position[E_AXIS]));
+  // Intelligent resuming
+  #if ENABLED(FWRETRACT)
+    // If retracted before goto pause
+    if (fwretract.retracted[active_extruder])
+      do_pause_e_move(-fwretract.retract_length, fwretract.retract_feedrate_mm_s);
+  #else
+    // If resume_position negative
+    if (resume_position[E_AXIS] < 0) do_pause_e_move(resume_position[E_AXIS], PAUSE_PARK_RETRACT_FEEDRATE);
+  #endif
 
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], NOZZLE_PARK_XY_FEEDRATE);
+
+  // Set Z_AXIS to saved position
   do_blocking_move_to_z(resume_position[Z_AXIS], NOZZLE_PARK_Z_FEEDRATE);
 
+  // Now all extrusion positions are resumed and ready to be confirmed
+  // Set extruder to saved position
+  planner.set_e_position_mm(destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS]);
+
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     filament_ran_out = false;
   #endif
 
   #if ENABLED(ULTIPANEL)
     // Show pause status screen
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
   #endif
 
   #ifdef ACTION_ON_RESUME

commit 9686ffedeffa75ef3299512f9f032bcf216ec8b6
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Dec 30 04:03:41 2017 -0600

    Single pause flag also indicates SD print pause

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index f41e346ef5..92f4f9d6be 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -47,21 +47,20 @@
 
 #include "../libs/buzzer.h"
 #include "../libs/nozzle.h"
 
 // private:
 
 static float resume_position[XYZE];
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
-  static bool sd_print_paused = false;
 #endif
 
 #if HAS_BUZZER
   static void filament_change_beep(const int8_t max_beep_count, const bool init=false) {
     static millis_t next_buzz = 0;
     static int8_t runout_beep = 0;
 
     if (init) next_buzz = runout_beep = 0;
 
     const millis_t ms = millis();
@@ -100,52 +99,52 @@ void do_pause_e_move(const float &length, const float fr) {
   #if IS_KINEMATIC
     planner.buffer_line_kinematic(destination, fr, active_extruder);
   #else
     buffer_line_to_destination(fr);
   #endif
   stepper.synchronize();
 }
 
 // public:
 
-bool move_away_flag = false;
+uint8_t did_pause_print = 0;
 
 bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/,
                  const int8_t max_beep_count/*=0*/, const bool show_lcd/*=false*/
 ) {
-  if (move_away_flag) return false; // already paused
+  if (did_pause_print) return false; // already paused
 
   #ifdef ACTION_ON_PAUSE
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_PAUSE);
   #endif
 
   if (!DEBUGGING(DRYRUN) && unload_length != 0) {
     #if ENABLED(PREVENT_COLD_EXTRUSION)
       if (!thermalManager.allow_cold_extrude &&
           thermalManager.degTargetHotend(active_extruder) < thermalManager.extrude_min_temp) {
         SERIAL_ERROR_START();
         SERIAL_ERRORLNPGM(MSG_TOO_COLD_FOR_M600);
         return false;
       }
     #endif
 
     ensure_safe_temperature(); // wait for extruder to heat up before unloading
   }
 
   // Indicate that the printer is paused
-  move_away_flag = true;
+  ++did_pause_print;
 
   // Pause the print job and timer
   #if ENABLED(SDSUPPORT)
     if (IS_SD_PRINTING) {
       card.pauseSDPrint();
-      sd_print_paused = true;
+      ++did_pause_print;
     }
   #endif
   print_job_timer.pause();
 
   // Show initial message and wait for synchronize steppers
   if (show_lcd) {
     #if ENABLED(ULTIPANEL)
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT);
     #endif
   }
@@ -249,21 +248,21 @@ void wait_for_filament_reload(const int8_t max_beep_count/*=0*/) {
     }
 
     idle(true);
   }
   KEEPALIVE_STATE(IN_HANDLER);
 }
 
 void resume_print(const float &load_length/*=0*/, const float &initial_extrude_length/*=0*/, const int8_t max_beep_count/*=0*/) {
   bool nozzle_timed_out = false;
 
-  if (!move_away_flag) return;
+  if (!did_pause_print) return;
 
   // Re-enable the heaters if they timed out
   HOTEND_LOOP() {
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }
 
   if (nozzle_timed_out) ensure_safe_temperature();
 
   #if HAS_BUZZER
@@ -343,21 +342,21 @@ void resume_print(const float &load_length/*=0*/, const float &initial_extrude_l
 
   #if ENABLED(ULTIPANEL)
     // Show pause status screen
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
   #endif
 
   #ifdef ACTION_ON_RESUME
     SERIAL_ECHOLNPGM("//action:" ACTION_ON_RESUME);
   #endif
 
+  --did_pause_print;
+
   #if ENABLED(SDSUPPORT)
-    if (sd_print_paused) {
+    if (did_pause_print) {
       card.startFileprint();
-      sd_print_paused = false;
+      --did_pause_print;
     }
   #endif
-
-  move_away_flag = false;
 }
 
 #endif // ADVANCED_PAUSE_FEATURE || PARK_HEAD_ON_PAUSE

commit f704f405af4d9e32d26dfaaf40fd73c604487123
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Dec 25 01:36:42 2017 -0600

    Add pause/resume actions on M600, M125

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 6322b8958a..f41e346ef5 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -107,20 +107,24 @@ void do_pause_e_move(const float &length, const float fr) {
 
 // public:
 
 bool move_away_flag = false;
 
 bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/,
                  const int8_t max_beep_count/*=0*/, const bool show_lcd/*=false*/
 ) {
   if (move_away_flag) return false; // already paused
 
+  #ifdef ACTION_ON_PAUSE
+    SERIAL_ECHOLNPGM("//action:" ACTION_ON_PAUSE);
+  #endif
+
   if (!DEBUGGING(DRYRUN) && unload_length != 0) {
     #if ENABLED(PREVENT_COLD_EXTRUSION)
       if (!thermalManager.allow_cold_extrude &&
           thermalManager.degTargetHotend(active_extruder) < thermalManager.extrude_min_temp) {
         SERIAL_ERROR_START();
         SERIAL_ERRORLNPGM(MSG_TOO_COLD_FOR_M600);
         return false;
       }
     #endif
 
@@ -335,20 +339,24 @@ void resume_print(const float &load_length/*=0*/, const float &initial_extrude_l
 
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     filament_ran_out = false;
   #endif
 
   #if ENABLED(ULTIPANEL)
     // Show pause status screen
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
   #endif
 
+  #ifdef ACTION_ON_RESUME
+    SERIAL_ECHOLNPGM("//action:" ACTION_ON_RESUME);
+  #endif
+
   #if ENABLED(SDSUPPORT)
     if (sd_print_paused) {
       card.startFileprint();
       sd_print_paused = false;
     }
   #endif
 
   move_away_flag = false;
 }
 

commit f0a8a1a85344207870bc7528fa9dd445d5263adf
Author: Thomas Moore <tcm0116@users.noreply.github.com>
Date:   Mon Dec 25 01:38:06 2017 -0600

    [2.0.x] Use NOZZLE_PARK_FEATURE for ADVANCED_PAUSE_FEATURE (#8866)
    
    * Use NOZZLE_PARK_FEATURE for ADVANCED_PAUSE_FEATURE

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 6c5132d017..6322b8958a 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -39,20 +39,21 @@
 
 #if ENABLED(FILAMENT_RUNOUT_SENSOR)
   #include "../feature/runout.h"
 #endif
 
 #if ENABLED(ULTIPANEL)
   #include "../lcd/ultralcd.h"
 #endif
 
 #include "../libs/buzzer.h"
+#include "../libs/nozzle.h"
 
 // private:
 
 static float resume_position[XYZE];
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
   static bool sd_print_paused = false;
 #endif
 
@@ -101,26 +102,26 @@ void do_pause_e_move(const float &length, const float fr) {
   #else
     buffer_line_to_destination(fr);
   #endif
   stepper.synchronize();
 }
 
 // public:
 
 bool move_away_flag = false;
 
-bool pause_print(const float &retract, const float &z_lift, const float &x_pos, const float &y_pos,
-                        const float &unload_length/*=0*/ , const int8_t max_beep_count/*=0*/, const bool show_lcd/*=false*/
+bool pause_print(const float &retract, const point_t &park_point, const float &unload_length/*=0*/,
+                 const int8_t max_beep_count/*=0*/, const bool show_lcd/*=false*/
 ) {
   if (move_away_flag) return false; // already paused
 
-  if (!DEBUGGING(DRYRUN) && (unload_length != 0 || retract != 0)) {
+  if (!DEBUGGING(DRYRUN) && unload_length != 0) {
     #if ENABLED(PREVENT_COLD_EXTRUSION)
       if (!thermalManager.allow_cold_extrude &&
           thermalManager.degTargetHotend(active_extruder) < thermalManager.extrude_min_temp) {
         SERIAL_ERROR_START();
         SERIAL_ERRORLNPGM(MSG_TOO_COLD_FOR_M600);
         return false;
       }
     #endif
 
     ensure_safe_temperature(); // wait for extruder to heat up before unloading
@@ -142,28 +143,25 @@ bool pause_print(const float &retract, const float &z_lift, const float &x_pos,
   if (show_lcd) {
     #if ENABLED(ULTIPANEL)
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT);
     #endif
   }
 
   stepper.synchronize();
   COPY(resume_position, current_position); // Save current position for later
 
   // Initial retract before move to filament change position
-  if (retract) do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
+  if (retract && !thermalManager.tooColdToExtrude(active_extruder))
+    do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
-  // Lift Z axis
-  if (z_lift > 0)
-    do_blocking_move_to_z(current_position[Z_AXIS] + z_lift, PAUSE_PARK_Z_FEEDRATE);
-
-  // Move XY axes to filament exchange position
-  do_blocking_move_to_xy(x_pos, y_pos, PAUSE_PARK_XY_FEEDRATE);
+  // Park the nozzle by moving up by z_lift and then moving to (x_pos, y_pos)
+  Nozzle::park(2, park_point);
 
   if (unload_length != 0) {
     if (show_lcd) {
       #if ENABLED(ULTIPANEL)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_UNLOAD);
         idle();
       #endif
     }
 
     // Unload filament
@@ -289,56 +287,58 @@ void resume_print(const float &load_length/*=0*/, const float &initial_extrude_l
       // Show "load" message
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD);
     #endif
 
     // Load filament
     do_pause_e_move(load_length, FILAMENT_CHANGE_LOAD_FEEDRATE);
   }
 
   #if ENABLED(ULTIPANEL) && ADVANCED_PAUSE_EXTRUDE_LENGTH > 0
 
-    float extrude_length = initial_extrude_length;
+    if (!thermalManager.tooColdToExtrude(active_extruder)) {
+      float extrude_length = initial_extrude_length;
 
-    do {
-      if (extrude_length > 0) {
-        // "Wait for filament extrude"
-        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_EXTRUDE);
+      do {
+        if (extrude_length > 0) {
+          // "Wait for filament extrude"
+          lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_EXTRUDE);
 
-        // Extrude filament to get into hotend
-        do_pause_e_move(extrude_length, ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
-      }
+          // Extrude filament to get into hotend
+          do_pause_e_move(extrude_length, ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
+        }
 
-      // Show "Extrude More" / "Resume" menu and wait for reply
-      KEEPALIVE_STATE(PAUSED_FOR_USER);
-      wait_for_user = false;
-      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION);
-      while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
-      KEEPALIVE_STATE(IN_HANDLER);
+        // Show "Extrude More" / "Resume" menu and wait for reply
+        KEEPALIVE_STATE(PAUSED_FOR_USER);
+        wait_for_user = false;
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION);
+        while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
+        KEEPALIVE_STATE(IN_HANDLER);
 
-      extrude_length = ADVANCED_PAUSE_EXTRUDE_LENGTH;
+        extrude_length = ADVANCED_PAUSE_EXTRUDE_LENGTH;
 
-      // Keep looping if "Extrude More" was selected
-    } while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE);
+        // Keep looping if "Extrude More" was selected
+      } while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE);
+    }
 
   #endif
 
   #if ENABLED(ULTIPANEL)
     // "Wait for print to resume"
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
   #endif
 
   // Set extruder to saved position
   planner.set_e_position_mm((current_position[E_AXIS] = resume_position[E_AXIS]));
 
   // Move XY to starting position, then Z
-  do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], PAUSE_PARK_XY_FEEDRATE);
-  do_blocking_move_to_z(resume_position[Z_AXIS], PAUSE_PARK_Z_FEEDRATE);
+  do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], NOZZLE_PARK_XY_FEEDRATE);
+  do_blocking_move_to_z(resume_position[Z_AXIS], NOZZLE_PARK_Z_FEEDRATE);
 
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     filament_ran_out = false;
   #endif
 
   #if ENABLED(ULTIPANEL)
     // Show pause status screen
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
   #endif
 

commit cba9c1cf9e7831a86acbdc35fe405fb600e0f6e3
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Nov 10 02:26:49 2017 -0600

    Add pre-calculated planner.e_factor

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index b58577b6ad..6c5132d017 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -87,21 +87,21 @@ static void ensure_safe_temperature() {
         #if ENABLED(ULTIPANEL)
           lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_WAIT_FOR_NOZZLES_TO_HEAT);
         #endif
         break;
       }
     }
   }
 }
 
 void do_pause_e_move(const float &length, const float fr) {
-  current_position[E_AXIS] += length * 100.0 / planner.flow_percentage[active_extruder] / planner.volumetric_multiplier[active_extruder];
+  current_position[E_AXIS] += length / planner.e_factor[active_extruder];
   set_destination_from_current();
   #if IS_KINEMATIC
     planner.buffer_line_kinematic(destination, fr, active_extruder);
   #else
     buffer_line_to_destination(fr);
   #endif
   stepper.synchronize();
 }
 
 // public:

commit 600c85226ec85ca5851f0a2472f87c2b083f78af
Author: Thomas Moore <tcm0116@gmail.com>
Date:   Thu Nov 9 22:50:32 2017 -0600

    Normalize load/unload length in M600

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index ede4248df9..b58577b6ad 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -87,21 +87,21 @@ static void ensure_safe_temperature() {
         #if ENABLED(ULTIPANEL)
           lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_WAIT_FOR_NOZZLES_TO_HEAT);
         #endif
         break;
       }
     }
   }
 }
 
 void do_pause_e_move(const float &length, const float fr) {
-  current_position[E_AXIS] += length;
+  current_position[E_AXIS] += length * 100.0 / planner.flow_percentage[active_extruder] / planner.volumetric_multiplier[active_extruder];
   set_destination_from_current();
   #if IS_KINEMATIC
     planner.buffer_line_kinematic(destination, fr, active_extruder);
   #else
     buffer_line_to_destination(fr);
   #endif
   stepper.synchronize();
 }
 
 // public:

commit 0cfb936dd124d22a6079a5e85802ddc14f0b4328
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Nov 8 22:13:33 2017 -0600

    Clarify some motion code

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 54ac5488b3..ede4248df9 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -92,21 +92,21 @@ static void ensure_safe_temperature() {
     }
   }
 }
 
 void do_pause_e_move(const float &length, const float fr) {
   current_position[E_AXIS] += length;
   set_destination_from_current();
   #if IS_KINEMATIC
     planner.buffer_line_kinematic(destination, fr, active_extruder);
   #else
-    line_to_destination(fr);
+    buffer_line_to_destination(fr);
   #endif
   stepper.synchronize();
 }
 
 // public:
 
 bool move_away_flag = false;
 
 bool pause_print(const float &retract, const float &z_lift, const float &x_pos, const float &y_pos,
                         const float &unload_length/*=0*/ , const int8_t max_beep_count/*=0*/, const bool show_lcd/*=false*/

commit 8181220bfd82884288a94376245c957fcd73bc3c
Author: studiodyne <diabolomix@hotmail.fr>
Date:   Mon Oct 23 16:34:16 2017 +0200

    Fix position sync in M600 pause/resume

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index c1bc4057f9..54ac5488b3 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -86,30 +86,35 @@ static void ensure_safe_temperature() {
         heaters_heating = true;
         #if ENABLED(ULTIPANEL)
           lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_WAIT_FOR_NOZZLES_TO_HEAT);
         #endif
         break;
       }
     }
   }
 }
 
+void do_pause_e_move(const float &length, const float fr) {
+  current_position[E_AXIS] += length;
+  set_destination_from_current();
+  #if IS_KINEMATIC
+    planner.buffer_line_kinematic(destination, fr, active_extruder);
+  #else
+    line_to_destination(fr);
+  #endif
+  stepper.synchronize();
+}
+
 // public:
 
 bool move_away_flag = false;
 
-#if IS_KINEMATIC
-  #define RUNPLAN(RATE_MM_S) planner.buffer_line_kinematic(destination, RATE_MM_S, active_extruder)
-#else
-  #define RUNPLAN(RATE_MM_S) line_to_destination(RATE_MM_S)
-#endif
-
 bool pause_print(const float &retract, const float &z_lift, const float &x_pos, const float &y_pos,
                         const float &unload_length/*=0*/ , const int8_t max_beep_count/*=0*/, const bool show_lcd/*=false*/
 ) {
   if (move_away_flag) return false; // already paused
 
   if (!DEBUGGING(DRYRUN) && (unload_length != 0 || retract != 0)) {
     #if ENABLED(PREVENT_COLD_EXTRUSION)
       if (!thermalManager.allow_cold_extrude &&
           thermalManager.degTargetHotend(active_extruder) < thermalManager.extrude_min_temp) {
         SERIAL_ERROR_START();
@@ -133,52 +138,43 @@ bool pause_print(const float &retract, const float &z_lift, const float &x_pos,
   #endif
   print_job_timer.pause();
 
   // Show initial message and wait for synchronize steppers
   if (show_lcd) {
     #if ENABLED(ULTIPANEL)
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT);
     #endif
   }
 
-  // Save current position
   stepper.synchronize();
-  COPY(resume_position, current_position);
-
-  if (retract) {
-    // Initial retract before move to filament change position
-    set_destination_from_current();
-    destination[E_AXIS] += retract;
-    RUNPLAN(PAUSE_PARK_RETRACT_FEEDRATE);
-    stepper.synchronize();
-  }
+  COPY(resume_position, current_position); // Save current position for later
+
+  // Initial retract before move to filament change position
+  if (retract) do_pause_e_move(retract, PAUSE_PARK_RETRACT_FEEDRATE);
 
   // Lift Z axis
   if (z_lift > 0)
     do_blocking_move_to_z(current_position[Z_AXIS] + z_lift, PAUSE_PARK_Z_FEEDRATE);
 
   // Move XY axes to filament exchange position
   do_blocking_move_to_xy(x_pos, y_pos, PAUSE_PARK_XY_FEEDRATE);
 
   if (unload_length != 0) {
     if (show_lcd) {
       #if ENABLED(ULTIPANEL)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_UNLOAD);
         idle();
       #endif
     }
 
     // Unload filament
-    set_destination_from_current();
-    destination[E_AXIS] += unload_length;
-    RUNPLAN(FILAMENT_CHANGE_UNLOAD_FEEDRATE);
-    stepper.synchronize();
+    do_pause_e_move(unload_length, FILAMENT_CHANGE_UNLOAD_FEEDRATE);
   }
 
   if (show_lcd) {
     #if ENABLED(ULTIPANEL)
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
     #endif
   }
 
   #if HAS_BUZZER
     filament_change_beep(max_beep_count, true);
@@ -265,22 +261,20 @@ void resume_print(const float &load_length/*=0*/, const float &initial_extrude_l
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }
 
   if (nozzle_timed_out) ensure_safe_temperature();
 
   #if HAS_BUZZER
     filament_change_beep(max_beep_count, true);
   #endif
 
-  set_destination_from_current();
-
   if (load_length != 0) {
     #if ENABLED(ULTIPANEL)
       // Show "insert filament"
       if (nozzle_timed_out)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
     #endif
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
     while (wait_for_user && nozzle_timed_out) {
@@ -290,38 +284,34 @@ void resume_print(const float &load_length/*=0*/, const float &initial_extrude_l
       idle(true);
     }
     KEEPALIVE_STATE(IN_HANDLER);
 
     #if ENABLED(ULTIPANEL)
       // Show "load" message
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD);
     #endif
 
     // Load filament
-    destination[E_AXIS] += load_length;
-    RUNPLAN(FILAMENT_CHANGE_LOAD_FEEDRATE);
-    stepper.synchronize();
+    do_pause_e_move(load_length, FILAMENT_CHANGE_LOAD_FEEDRATE);
   }
 
   #if ENABLED(ULTIPANEL) && ADVANCED_PAUSE_EXTRUDE_LENGTH > 0
 
     float extrude_length = initial_extrude_length;
 
     do {
       if (extrude_length > 0) {
         // "Wait for filament extrude"
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_EXTRUDE);
 
         // Extrude filament to get into hotend
-        destination[E_AXIS] += extrude_length;
-        RUNPLAN(ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
-        stepper.synchronize();
+        do_pause_e_move(extrude_length, ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
       }
 
       // Show "Extrude More" / "Resume" menu and wait for reply
       KEEPALIVE_STATE(PAUSED_FOR_USER);
       wait_for_user = false;
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION);
       while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
       KEEPALIVE_STATE(IN_HANDLER);
 
       extrude_length = ADVANCED_PAUSE_EXTRUDE_LENGTH;
@@ -330,33 +320,32 @@ void resume_print(const float &load_length/*=0*/, const float &initial_extrude_l
     } while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE);
 
   #endif
 
   #if ENABLED(ULTIPANEL)
     // "Wait for print to resume"
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
   #endif
 
   // Set extruder to saved position
-  destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS];
-  planner.set_e_position_mm(current_position[E_AXIS]);
+  planner.set_e_position_mm((current_position[E_AXIS] = resume_position[E_AXIS]));
 
   // Move XY to starting position, then Z
   do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], PAUSE_PARK_XY_FEEDRATE);
   do_blocking_move_to_z(resume_position[Z_AXIS], PAUSE_PARK_Z_FEEDRATE);
 
   #if ENABLED(FILAMENT_RUNOUT_SENSOR)
     filament_ran_out = false;
   #endif
 
   #if ENABLED(ULTIPANEL)
-    // Show status screen
+    // Show pause status screen
     lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
   #endif
 
   #if ENABLED(SDSUPPORT)
     if (sd_print_paused) {
       card.startFileprint();
       sd_print_paused = false;
     }
   #endif
 

commit 72156a2029d329c7dc251f5e576103fda691372d
Author: Roxy-3D <Roxy-3D@users.noreply.github.com>
Date:   Sat Oct 21 11:42:26 2017 -0500

    change to better (more clear) names (#8050)
    
    set_destination_to_current() changed to set_destination_from_current()
    
    set_current_to_destination() changed to set_current_from_destination()

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 6f5e32ab08..c1bc4057f9 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -139,21 +139,21 @@ bool pause_print(const float &retract, const float &z_lift, const float &x_pos,
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT);
     #endif
   }
 
   // Save current position
   stepper.synchronize();
   COPY(resume_position, current_position);
 
   if (retract) {
     // Initial retract before move to filament change position
-    set_destination_to_current();
+    set_destination_from_current();
     destination[E_AXIS] += retract;
     RUNPLAN(PAUSE_PARK_RETRACT_FEEDRATE);
     stepper.synchronize();
   }
 
   // Lift Z axis
   if (z_lift > 0)
     do_blocking_move_to_z(current_position[Z_AXIS] + z_lift, PAUSE_PARK_Z_FEEDRATE);
 
   // Move XY axes to filament exchange position
@@ -161,21 +161,21 @@ bool pause_print(const float &retract, const float &z_lift, const float &x_pos,
 
   if (unload_length != 0) {
     if (show_lcd) {
       #if ENABLED(ULTIPANEL)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_UNLOAD);
         idle();
       #endif
     }
 
     // Unload filament
-    set_destination_to_current();
+    set_destination_from_current();
     destination[E_AXIS] += unload_length;
     RUNPLAN(FILAMENT_CHANGE_UNLOAD_FEEDRATE);
     stepper.synchronize();
   }
 
   if (show_lcd) {
     #if ENABLED(ULTIPANEL)
       lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
     #endif
   }
@@ -265,21 +265,21 @@ void resume_print(const float &load_length/*=0*/, const float &initial_extrude_l
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }
 
   if (nozzle_timed_out) ensure_safe_temperature();
 
   #if HAS_BUZZER
     filament_change_beep(max_beep_count, true);
   #endif
 
-  set_destination_to_current();
+  set_destination_from_current();
 
   if (load_length != 0) {
     #if ENABLED(ULTIPANEL)
       // Show "insert filament"
       if (nozzle_timed_out)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
     #endif
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this

commit f8e8fcb978e3c2eab7eb001566593aefa04c3fab
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 10 02:35:20 2017 -0500

    Move FILAMENT_RUNOUT_SENSOR to a feature

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 025352ab4a..6f5e32ab08 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -30,20 +30,24 @@
 #if ENABLED(ADVANCED_PAUSE_FEATURE) || ENABLED(PARK_HEAD_ON_PAUSE)
 
 #include "../Marlin.h"
 #include "../gcode/gcode.h"
 #include "../module/motion.h"
 #include "../module/planner.h"
 #include "../module/stepper.h"
 #include "../module/printcounter.h"
 #include "../module/temperature.h"
 
+#if ENABLED(FILAMENT_RUNOUT_SENSOR)
+  #include "../feature/runout.h"
+#endif
+
 #if ENABLED(ULTIPANEL)
   #include "../lcd/ultralcd.h"
 #endif
 
 #include "../libs/buzzer.h"
 
 // private:
 
 static float resume_position[XYZE];
 

commit a03e70d46cfc467f16bc070187ae449bf222bf09
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Oct 1 18:36:18 2017 -0500

    Fix M600 resume_print
    
    Derived from #7811 and #7779

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index 7c7f7c0067..025352ab4a 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -261,20 +261,22 @@ void resume_print(const float &load_length/*=0*/, const float &initial_extrude_l
     nozzle_timed_out |= thermalManager.is_heater_idle(e);
     thermalManager.reset_heater_idle_timer(e);
   }
 
   if (nozzle_timed_out) ensure_safe_temperature();
 
   #if HAS_BUZZER
     filament_change_beep(max_beep_count, true);
   #endif
 
+  set_destination_to_current();
+
   if (load_length != 0) {
     #if ENABLED(ULTIPANEL)
       // Show "insert filament"
       if (nozzle_timed_out)
         lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
     #endif
 
     KEEPALIVE_STATE(PAUSED_FOR_USER);
     wait_for_user = true;    // LCD click or M108 will clear this
     while (wait_for_user && nozzle_timed_out) {

commit 0cb00f52d94773411e405ae10a463a4687b70658
Author: Thomas Moore <tcm0116@gmail.com>
Date:   Sat Sep 30 16:06:43 2017 -0500

    Cleanup warnings

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
index ae538c65db..7c7f7c0067 100644
--- a/Marlin/src/feature/pause.cpp
+++ b/Marlin/src/feature/pause.cpp
@@ -45,35 +45,37 @@
 
 // private:
 
 static float resume_position[XYZE];
 
 #if ENABLED(SDSUPPORT)
   #include "../sd/cardreader.h"
   static bool sd_print_paused = false;
 #endif
 
-static void filament_change_beep(const int8_t max_beep_count, const bool init=false) {
-  static millis_t next_buzz = 0;
-  static int8_t runout_beep = 0;
-
-  if (init) next_buzz = runout_beep = 0;
-
-  const millis_t ms = millis();
-  if (ELAPSED(ms, next_buzz)) {
-    if (max_beep_count < 0 || runout_beep < max_beep_count + 5) { // Only beep as long as we're supposed to
-      next_buzz = ms + ((max_beep_count < 0 || runout_beep < max_beep_count) ? 2500 : 400);
-      BUZZ(300, 2000);
-      runout_beep++;
+#if HAS_BUZZER
+  static void filament_change_beep(const int8_t max_beep_count, const bool init=false) {
+    static millis_t next_buzz = 0;
+    static int8_t runout_beep = 0;
+
+    if (init) next_buzz = runout_beep = 0;
+
+    const millis_t ms = millis();
+    if (ELAPSED(ms, next_buzz)) {
+      if (max_beep_count < 0 || runout_beep < max_beep_count + 5) { // Only beep as long as we're supposed to
+        next_buzz = ms + ((max_beep_count < 0 || runout_beep < max_beep_count) ? 2500 : 400);
+        BUZZ(300, 2000);
+        runout_beep++;
+      }
     }
   }
-}
+#endif
 
 static void ensure_safe_temperature() {
   bool heaters_heating = true;
 
   wait_for_heatup = true;    // M108 will clear this
   while (wait_for_heatup && heaters_heating) {
     idle();
     heaters_heating = false;
     HOTEND_LOOP() {
       if (thermalManager.degTargetHotend(e) && abs(thermalManager.degHotend(e) - thermalManager.degTargetHotend(e)) > TEMP_HYSTERESIS) {

commit be0e4a4ad066d20ffb4ede4eb468b43f4a784c62
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 16 02:13:07 2017 -0500

    Consolidate pause, apply to M125, M600, M24

diff --git a/Marlin/src/feature/pause.cpp b/Marlin/src/feature/pause.cpp
new file mode 100644
index 0000000000..ae538c65db
--- /dev/null
+++ b/Marlin/src/feature/pause.cpp
@@ -0,0 +1,358 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * feature/pause.cpp - Pause feature support functions
+ * This may be combined with related G-codes if features are consolidated.
+ */
+
+#include "../inc/MarlinConfig.h"
+
+#if ENABLED(ADVANCED_PAUSE_FEATURE) || ENABLED(PARK_HEAD_ON_PAUSE)
+
+#include "../Marlin.h"
+#include "../gcode/gcode.h"
+#include "../module/motion.h"
+#include "../module/planner.h"
+#include "../module/stepper.h"
+#include "../module/printcounter.h"
+#include "../module/temperature.h"
+
+#if ENABLED(ULTIPANEL)
+  #include "../lcd/ultralcd.h"
+#endif
+
+#include "../libs/buzzer.h"
+
+// private:
+
+static float resume_position[XYZE];
+
+#if ENABLED(SDSUPPORT)
+  #include "../sd/cardreader.h"
+  static bool sd_print_paused = false;
+#endif
+
+static void filament_change_beep(const int8_t max_beep_count, const bool init=false) {
+  static millis_t next_buzz = 0;
+  static int8_t runout_beep = 0;
+
+  if (init) next_buzz = runout_beep = 0;
+
+  const millis_t ms = millis();
+  if (ELAPSED(ms, next_buzz)) {
+    if (max_beep_count < 0 || runout_beep < max_beep_count + 5) { // Only beep as long as we're supposed to
+      next_buzz = ms + ((max_beep_count < 0 || runout_beep < max_beep_count) ? 2500 : 400);
+      BUZZ(300, 2000);
+      runout_beep++;
+    }
+  }
+}
+
+static void ensure_safe_temperature() {
+  bool heaters_heating = true;
+
+  wait_for_heatup = true;    // M108 will clear this
+  while (wait_for_heatup && heaters_heating) {
+    idle();
+    heaters_heating = false;
+    HOTEND_LOOP() {
+      if (thermalManager.degTargetHotend(e) && abs(thermalManager.degHotend(e) - thermalManager.degTargetHotend(e)) > TEMP_HYSTERESIS) {
+        heaters_heating = true;
+        #if ENABLED(ULTIPANEL)
+          lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_WAIT_FOR_NOZZLES_TO_HEAT);
+        #endif
+        break;
+      }
+    }
+  }
+}
+
+// public:
+
+bool move_away_flag = false;
+
+#if IS_KINEMATIC
+  #define RUNPLAN(RATE_MM_S) planner.buffer_line_kinematic(destination, RATE_MM_S, active_extruder)
+#else
+  #define RUNPLAN(RATE_MM_S) line_to_destination(RATE_MM_S)
+#endif
+
+bool pause_print(const float &retract, const float &z_lift, const float &x_pos, const float &y_pos,
+                        const float &unload_length/*=0*/ , const int8_t max_beep_count/*=0*/, const bool show_lcd/*=false*/
+) {
+  if (move_away_flag) return false; // already paused
+
+  if (!DEBUGGING(DRYRUN) && (unload_length != 0 || retract != 0)) {
+    #if ENABLED(PREVENT_COLD_EXTRUSION)
+      if (!thermalManager.allow_cold_extrude &&
+          thermalManager.degTargetHotend(active_extruder) < thermalManager.extrude_min_temp) {
+        SERIAL_ERROR_START();
+        SERIAL_ERRORLNPGM(MSG_TOO_COLD_FOR_M600);
+        return false;
+      }
+    #endif
+
+    ensure_safe_temperature(); // wait for extruder to heat up before unloading
+  }
+
+  // Indicate that the printer is paused
+  move_away_flag = true;
+
+  // Pause the print job and timer
+  #if ENABLED(SDSUPPORT)
+    if (IS_SD_PRINTING) {
+      card.pauseSDPrint();
+      sd_print_paused = true;
+    }
+  #endif
+  print_job_timer.pause();
+
+  // Show initial message and wait for synchronize steppers
+  if (show_lcd) {
+    #if ENABLED(ULTIPANEL)
+      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INIT);
+    #endif
+  }
+
+  // Save current position
+  stepper.synchronize();
+  COPY(resume_position, current_position);
+
+  if (retract) {
+    // Initial retract before move to filament change position
+    set_destination_to_current();
+    destination[E_AXIS] += retract;
+    RUNPLAN(PAUSE_PARK_RETRACT_FEEDRATE);
+    stepper.synchronize();
+  }
+
+  // Lift Z axis
+  if (z_lift > 0)
+    do_blocking_move_to_z(current_position[Z_AXIS] + z_lift, PAUSE_PARK_Z_FEEDRATE);
+
+  // Move XY axes to filament exchange position
+  do_blocking_move_to_xy(x_pos, y_pos, PAUSE_PARK_XY_FEEDRATE);
+
+  if (unload_length != 0) {
+    if (show_lcd) {
+      #if ENABLED(ULTIPANEL)
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_UNLOAD);
+        idle();
+      #endif
+    }
+
+    // Unload filament
+    set_destination_to_current();
+    destination[E_AXIS] += unload_length;
+    RUNPLAN(FILAMENT_CHANGE_UNLOAD_FEEDRATE);
+    stepper.synchronize();
+  }
+
+  if (show_lcd) {
+    #if ENABLED(ULTIPANEL)
+      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
+    #endif
+  }
+
+  #if HAS_BUZZER
+    filament_change_beep(max_beep_count, true);
+  #endif
+
+  idle();
+
+  // Disable extruders steppers for manual filament changing (only on boards that have separate ENABLE_PINS)
+  #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN
+    disable_e_steppers();
+    safe_delay(100);
+  #endif
+
+  // Start the heater idle timers
+  const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
+
+  HOTEND_LOOP()
+    thermalManager.start_heater_idle_timer(e, nozzle_timeout);
+
+  return true;
+}
+
+void wait_for_filament_reload(const int8_t max_beep_count/*=0*/) {
+  bool nozzle_timed_out = false;
+
+  // Wait for filament insert by user and press button
+  KEEPALIVE_STATE(PAUSED_FOR_USER);
+  wait_for_user = true;    // LCD click or M108 will clear this
+  while (wait_for_user) {
+    #if HAS_BUZZER
+      filament_change_beep(max_beep_count);
+    #endif
+
+    // If the nozzle has timed out, wait for the user to press the button to re-heat the nozzle, then
+    // re-heat the nozzle, re-show the insert screen, restart the idle timers, and start over
+    if (!nozzle_timed_out)
+      HOTEND_LOOP()
+        nozzle_timed_out |= thermalManager.is_heater_idle(e);
+
+    if (nozzle_timed_out) {
+      #if ENABLED(ULTIPANEL)
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_CLICK_TO_HEAT_NOZZLE);
+      #endif
+
+      // Wait for LCD click or M108
+      while (wait_for_user) idle(true);
+
+      // Re-enable the heaters if they timed out
+      HOTEND_LOOP() thermalManager.reset_heater_idle_timer(e);
+
+      // Wait for the heaters to reach the target temperatures
+      ensure_safe_temperature();
+
+      #if ENABLED(ULTIPANEL)
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
+      #endif
+
+      // Start the heater idle timers
+      const millis_t nozzle_timeout = (millis_t)(PAUSE_PARK_NOZZLE_TIMEOUT) * 1000UL;
+
+      HOTEND_LOOP()
+        thermalManager.start_heater_idle_timer(e, nozzle_timeout);
+
+      wait_for_user = true; /* Wait for user to load filament */
+      nozzle_timed_out = false;
+
+      #if HAS_BUZZER
+        filament_change_beep(max_beep_count, true);
+      #endif
+    }
+
+    idle(true);
+  }
+  KEEPALIVE_STATE(IN_HANDLER);
+}
+
+void resume_print(const float &load_length/*=0*/, const float &initial_extrude_length/*=0*/, const int8_t max_beep_count/*=0*/) {
+  bool nozzle_timed_out = false;
+
+  if (!move_away_flag) return;
+
+  // Re-enable the heaters if they timed out
+  HOTEND_LOOP() {
+    nozzle_timed_out |= thermalManager.is_heater_idle(e);
+    thermalManager.reset_heater_idle_timer(e);
+  }
+
+  if (nozzle_timed_out) ensure_safe_temperature();
+
+  #if HAS_BUZZER
+    filament_change_beep(max_beep_count, true);
+  #endif
+
+  if (load_length != 0) {
+    #if ENABLED(ULTIPANEL)
+      // Show "insert filament"
+      if (nozzle_timed_out)
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_INSERT);
+    #endif
+
+    KEEPALIVE_STATE(PAUSED_FOR_USER);
+    wait_for_user = true;    // LCD click or M108 will clear this
+    while (wait_for_user && nozzle_timed_out) {
+      #if HAS_BUZZER
+        filament_change_beep(max_beep_count);
+      #endif
+      idle(true);
+    }
+    KEEPALIVE_STATE(IN_HANDLER);
+
+    #if ENABLED(ULTIPANEL)
+      // Show "load" message
+      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_LOAD);
+    #endif
+
+    // Load filament
+    destination[E_AXIS] += load_length;
+    RUNPLAN(FILAMENT_CHANGE_LOAD_FEEDRATE);
+    stepper.synchronize();
+  }
+
+  #if ENABLED(ULTIPANEL) && ADVANCED_PAUSE_EXTRUDE_LENGTH > 0
+
+    float extrude_length = initial_extrude_length;
+
+    do {
+      if (extrude_length > 0) {
+        // "Wait for filament extrude"
+        lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_EXTRUDE);
+
+        // Extrude filament to get into hotend
+        destination[E_AXIS] += extrude_length;
+        RUNPLAN(ADVANCED_PAUSE_EXTRUDE_FEEDRATE);
+        stepper.synchronize();
+      }
+
+      // Show "Extrude More" / "Resume" menu and wait for reply
+      KEEPALIVE_STATE(PAUSED_FOR_USER);
+      wait_for_user = false;
+      lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_OPTION);
+      while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_WAIT_FOR) idle(true);
+      KEEPALIVE_STATE(IN_HANDLER);
+
+      extrude_length = ADVANCED_PAUSE_EXTRUDE_LENGTH;
+
+      // Keep looping if "Extrude More" was selected
+    } while (advanced_pause_menu_response == ADVANCED_PAUSE_RESPONSE_EXTRUDE_MORE);
+
+  #endif
+
+  #if ENABLED(ULTIPANEL)
+    // "Wait for print to resume"
+    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_RESUME);
+  #endif
+
+  // Set extruder to saved position
+  destination[E_AXIS] = current_position[E_AXIS] = resume_position[E_AXIS];
+  planner.set_e_position_mm(current_position[E_AXIS]);
+
+  // Move XY to starting position, then Z
+  do_blocking_move_to_xy(resume_position[X_AXIS], resume_position[Y_AXIS], PAUSE_PARK_XY_FEEDRATE);
+  do_blocking_move_to_z(resume_position[Z_AXIS], PAUSE_PARK_Z_FEEDRATE);
+
+  #if ENABLED(FILAMENT_RUNOUT_SENSOR)
+    filament_ran_out = false;
+  #endif
+
+  #if ENABLED(ULTIPANEL)
+    // Show status screen
+    lcd_advanced_pause_show_message(ADVANCED_PAUSE_MESSAGE_STATUS);
+  #endif
+
+  #if ENABLED(SDSUPPORT)
+    if (sd_print_paused) {
+      card.startFileprint();
+      sd_print_paused = false;
+    }
+  #endif
+
+  move_away_flag = false;
+}
+
+#endif // ADVANCED_PAUSE_FEATURE || PARK_HEAD_ON_PAUSE
