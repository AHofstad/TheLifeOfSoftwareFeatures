commit 5859ff0280b51b3130e1d13740bfae79eff4d23e
Author: Vert <45634861+Vertabreak@users.noreply.github.com>
Date:   Sat May 13 17:51:12 2023 -0400

    ‚ú® NUM_REDUNDANT_FANS (#25808)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index 6ba64cd7ba..afa2ebfc56 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -61,9 +61,7 @@
 void GcodeSuite::M106() {
   const uint8_t pfan = parser.byteval('P', _ALT_P);
   if (pfan >= _CNT_P) return;
-  #if REDUNDANT_PART_COOLING_FAN
-    if (pfan == REDUNDANT_PART_COOLING_FAN) return;
-  #endif
+  if (FAN_IS_REDUNDANT(pfan)) return;
 
   #if ENABLED(EXTRA_FAN_SPEED)
     const uint16_t t = parser.intval('T');
@@ -102,9 +100,7 @@ void GcodeSuite::M106() {
 void GcodeSuite::M107() {
   const uint8_t pfan = parser.byteval('P', _ALT_P);
   if (pfan >= _CNT_P) return;
-  #if REDUNDANT_PART_COOLING_FAN
-    if (pfan == REDUNDANT_PART_COOLING_FAN) return;
-  #endif
+  if (FAN_IS_REDUNDANT(pfan)) return;
 
   thermalManager.set_fan_speed(pfan, 0);
 

commit 03bb28c277ce1c8e98c7b418ce607ecd58c58c4f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jul 14 02:21:50 2022 -0500

    üé® Misc. temperature cleanup

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index ae517c977b..6ba64cd7ba 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -85,7 +85,7 @@ void GcodeSuite::M106() {
   if (!got_preset && parser.seenval('S'))
     speed = parser.value_ushort();
 
-  TERN_(FOAMCUTTER_XYUV, speed *= 2.55); // Get command in % of max heat
+  TERN_(FOAMCUTTER_XYUV, speed *= 2.55f); // Get command in % of max heat
 
   // Set speed, with constraint
   thermalManager.set_fan_speed(pfan, speed);

commit 307dfb15ca88f424dcb4cf579e4542e77dfb0eaf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jun 26 22:24:59 2022 -0500

    ‚ôªÔ∏è Planner flags refactor

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index 98e87c415d..ae517c977b 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -90,7 +90,7 @@ void GcodeSuite::M106() {
   // Set speed, with constraint
   thermalManager.set_fan_speed(pfan, speed);
 
-  TERN_(LASER_SYNCHRONOUS_M106_M107, planner.buffer_sync_block(BLOCK_FLAG_SYNC_FANS));
+  TERN_(LASER_SYNCHRONOUS_M106_M107, planner.buffer_sync_block(BLOCK_BIT_SYNC_FANS));
 
   if (TERN0(DUAL_X_CARRIAGE, idex_is_duplicating()))  // pfan == 0 when duplicating
     thermalManager.set_fan_speed(1 - pfan, speed);
@@ -111,7 +111,7 @@ void GcodeSuite::M107() {
   if (TERN0(DUAL_X_CARRIAGE, idex_is_duplicating()))  // pfan == 0 when duplicating
     thermalManager.set_fan_speed(1 - pfan, 0);
 
-  TERN_(LASER_SYNCHRONOUS_M106_M107, planner.buffer_sync_block(BLOCK_FLAG_SYNC_FANS));
+  TERN_(LASER_SYNCHRONOUS_M106_M107, planner.buffer_sync_block(BLOCK_BIT_SYNC_FANS));
 }
 
 #endif // HAS_FAN

commit 1d80464ba77bc576426f15af28a633bf48d769ad
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 27 21:15:58 2021 -0500

    üé® Define HAS_PREHEAT conditional

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index 3f85c53d78..98e87c415d 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -32,7 +32,7 @@
   #include "../../module/planner.h"
 #endif
 
-#if PREHEAT_COUNT
+#if HAS_PREHEAT
   #include "../../lcd/marlinui.h"
 #endif
 
@@ -75,7 +75,7 @@ void GcodeSuite::M106() {
   uint16_t speed = dspeed;
 
   // Accept 'I' if temperature presets are defined
-  #if PREHEAT_COUNT
+  #if HAS_PREHEAT
     const bool got_preset = parser.seenval('I');
     if (got_preset) speed = ui.material_preset[_MIN(parser.value_byte(), PREHEAT_COUNT - 1)].fan_speed;
   #else

commit d436c93f371336df31287be4fefe7b87876bcdb8
Author: ellensp <ellensp@hotmail.com>
Date:   Tue Jun 15 11:45:54 2021 +1200

    ‚ú® Redundant Part Cooling Fan (#21888)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index dcb0d34ffe..3f85c53d78 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -60,39 +60,40 @@
  */
 void GcodeSuite::M106() {
   const uint8_t pfan = parser.byteval('P', _ALT_P);
+  if (pfan >= _CNT_P) return;
+  #if REDUNDANT_PART_COOLING_FAN
+    if (pfan == REDUNDANT_PART_COOLING_FAN) return;
+  #endif
 
-  if (pfan < _CNT_P) {
-
-    #if ENABLED(EXTRA_FAN_SPEED)
-      const uint16_t t = parser.intval('T');
-      if (t > 0) return thermalManager.set_temp_fan_speed(pfan, t);
-    #endif
+  #if ENABLED(EXTRA_FAN_SPEED)
+    const uint16_t t = parser.intval('T');
+    if (t > 0) return thermalManager.set_temp_fan_speed(pfan, t);
+  #endif
 
-    const uint16_t dspeed = parser.seen_test('A') ? thermalManager.fan_speed[active_extruder] : 255;
+  const uint16_t dspeed = parser.seen_test('A') ? thermalManager.fan_speed[active_extruder] : 255;
 
-    uint16_t speed = dspeed;
+  uint16_t speed = dspeed;
 
-    // Accept 'I' if temperature presets are defined
-    #if PREHEAT_COUNT
-      const bool got_preset = parser.seenval('I');
-      if (got_preset) speed = ui.material_preset[_MIN(parser.value_byte(), PREHEAT_COUNT - 1)].fan_speed;
-    #else
-      constexpr bool got_preset = false;
-    #endif
+  // Accept 'I' if temperature presets are defined
+  #if PREHEAT_COUNT
+    const bool got_preset = parser.seenval('I');
+    if (got_preset) speed = ui.material_preset[_MIN(parser.value_byte(), PREHEAT_COUNT - 1)].fan_speed;
+  #else
+    constexpr bool got_preset = false;
+  #endif
 
-    if (!got_preset && parser.seenval('S'))
-      speed = parser.value_ushort();
+  if (!got_preset && parser.seenval('S'))
+    speed = parser.value_ushort();
 
-    TERN_(FOAMCUTTER_XYUV, speed *= 2.55); // Get command in % of max heat
+  TERN_(FOAMCUTTER_XYUV, speed *= 2.55); // Get command in % of max heat
 
-    // Set speed, with constraint
-    thermalManager.set_fan_speed(pfan, speed);
+  // Set speed, with constraint
+  thermalManager.set_fan_speed(pfan, speed);
 
-    TERN_(LASER_SYNCHRONOUS_M106_M107, planner.buffer_sync_block(BLOCK_FLAG_SYNC_FANS));
+  TERN_(LASER_SYNCHRONOUS_M106_M107, planner.buffer_sync_block(BLOCK_FLAG_SYNC_FANS));
 
-    if (TERN0(DUAL_X_CARRIAGE, idex_is_duplicating()))  // pfan == 0 when duplicating
-      thermalManager.set_fan_speed(1 - pfan, speed);
-  }
+  if (TERN0(DUAL_X_CARRIAGE, idex_is_duplicating()))  // pfan == 0 when duplicating
+    thermalManager.set_fan_speed(1 - pfan, speed);
 }
 
 /**
@@ -101,6 +102,9 @@ void GcodeSuite::M106() {
 void GcodeSuite::M107() {
   const uint8_t pfan = parser.byteval('P', _ALT_P);
   if (pfan >= _CNT_P) return;
+  #if REDUNDANT_PART_COOLING_FAN
+    if (pfan == REDUNDANT_PART_COOLING_FAN) return;
+  #endif
 
   thermalManager.set_fan_speed(pfan, 0);
 

commit 7726af9c5348c1c7d0fd9a56eca87d00cd75fee6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Jun 5 09:18:47 2021 +0200

    üèóÔ∏è Support for up to 6 linear axes (#19112)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index 73dc82b8df..dcb0d34ffe 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -83,6 +83,8 @@ void GcodeSuite::M106() {
     if (!got_preset && parser.seenval('S'))
       speed = parser.value_ushort();
 
+    TERN_(FOAMCUTTER_XYUV, speed *= 2.55); // Get command in % of max heat
+
     // Set speed, with constraint
     thermalManager.set_fan_speed(pfan, speed);
 

commit 49548c343deb1e7f38f6027af20c02a79dbe5031
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 9 03:50:51 2021 -0500

    Optimize G-code flag parameters (#21849)

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index 3ce08aafb6..73dc82b8df 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -68,7 +68,7 @@ void GcodeSuite::M106() {
       if (t > 0) return thermalManager.set_temp_fan_speed(pfan, t);
     #endif
 
-    const uint16_t dspeed = parser.seen('A') ? thermalManager.fan_speed[active_extruder] : 255;
+    const uint16_t dspeed = parser.seen_test('A') ? thermalManager.fan_speed[active_extruder] : 255;
 
     uint16_t speed = dspeed;
 

commit 30e7e2c2766d7dbbe0144344287994f1969dfadd
Author: Martijn Bosgraaf <drywfiltiarn+github@gmail.com>
Date:   Wed Mar 24 18:21:11 2021 +0100

    Extend M106/M107 for better laser module support (#16082)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index b7d64c99ea..3ce08aafb6 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -28,6 +28,10 @@
 #include "../../module/motion.h"
 #include "../../module/temperature.h"
 
+#if ENABLED(LASER_SYNCHRONOUS_M106_M107)
+  #include "../../module/planner.h"
+#endif
+
 #if PREHEAT_COUNT
   #include "../../lcd/marlinui.h"
 #endif
@@ -82,6 +86,8 @@ void GcodeSuite::M106() {
     // Set speed, with constraint
     thermalManager.set_fan_speed(pfan, speed);
 
+    TERN_(LASER_SYNCHRONOUS_M106_M107, planner.buffer_sync_block(BLOCK_FLAG_SYNC_FANS));
+
     if (TERN0(DUAL_X_CARRIAGE, idex_is_duplicating()))  // pfan == 0 when duplicating
       thermalManager.set_fan_speed(1 - pfan, speed);
   }
@@ -92,12 +98,14 @@ void GcodeSuite::M106() {
  */
 void GcodeSuite::M107() {
   const uint8_t pfan = parser.byteval('P', _ALT_P);
-  if (pfan < _CNT_P) {
-    thermalManager.set_fan_speed(pfan, 0);
+  if (pfan >= _CNT_P) return;
 
-    if (TERN0(DUAL_X_CARRIAGE, idex_is_duplicating()))  // pfan == 0 when duplicating
-      thermalManager.set_fan_speed(1 - pfan, 0);
-  }
+  thermalManager.set_fan_speed(pfan, 0);
+
+  if (TERN0(DUAL_X_CARRIAGE, idex_is_duplicating()))  // pfan == 0 when duplicating
+    thermalManager.set_fan_speed(1 - pfan, 0);
+
+  TERN_(LASER_SYNCHRONOUS_M106_M107, planner.buffer_sync_block(BLOCK_FLAG_SYNC_FANS));
 }
 
 #endif // HAS_FAN

commit 969268166eafa09e2ddc8f0eece35178a89fc46b
Author: Kachidoki <Kachidoki2807@users.noreply.github.com>
Date:   Sat Feb 27 20:45:12 2021 +0100

    Duplicate fan speed in M106/7 IDEX Duplication Mode (#21208)

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index 9c70f1ebc7..b7d64c99ea 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -81,6 +81,9 @@ void GcodeSuite::M106() {
 
     // Set speed, with constraint
     thermalManager.set_fan_speed(pfan, speed);
+
+    if (TERN0(DUAL_X_CARRIAGE, idex_is_duplicating()))  // pfan == 0 when duplicating
+      thermalManager.set_fan_speed(1 - pfan, speed);
   }
 }
 
@@ -88,8 +91,13 @@ void GcodeSuite::M106() {
  * M107: Fan Off
  */
 void GcodeSuite::M107() {
-  const uint8_t p = parser.byteval('P', _ALT_P);
-  thermalManager.set_fan_speed(p, 0);
+  const uint8_t pfan = parser.byteval('P', _ALT_P);
+  if (pfan < _CNT_P) {
+    thermalManager.set_fan_speed(pfan, 0);
+
+    if (TERN0(DUAL_X_CARRIAGE, idex_is_duplicating()))  // pfan == 0 when duplicating
+      thermalManager.set_fan_speed(1 - pfan, 0);
+  }
 }
 
 #endif // HAS_FAN

commit eaf6777a6643a6fab23ceaaa4699cb2466ea6b83
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 16 19:36:25 2020 -0500

    Rename ultralcd => marlinui

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index 17ff8c3c8f..9c70f1ebc7 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -29,7 +29,7 @@
 #include "../../module/temperature.h"
 
 #if PREHEAT_COUNT
-  #include "../../lcd/ultralcd.h"
+  #include "../../lcd/marlinui.h"
 #endif
 
 #if ENABLED(SINGLENOZZLE)

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index ffc00eafa3..17ff8c3c8f 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit b0c6cfb0511b8d71fec26ab91cd945f3d623b3c0
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Thu Jul 9 10:11:57 2020 +0200

    MarlinUI support for up to 5 Material Presets (#18488)
    
    - Add `I` preset parameter to `G26`, `M106`, `M140`, and `M190`.
    - Extend menu items to permit a string interpolation.
    - Keep material names in a list and interpolate in menu items.
    - Extend material presets to support up to 5 predefined materials.
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index 7fbc53297e..ffc00eafa3 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -28,6 +28,10 @@
 #include "../../module/motion.h"
 #include "../../module/temperature.h"
 
+#if PREHEAT_COUNT
+  #include "../../lcd/ultralcd.h"
+#endif
+
 #if ENABLED(SINGLENOZZLE)
   #define _ALT_P active_extruder
   #define _CNT_P EXTRUDERS
@@ -39,6 +43,7 @@
 /**
  * M106: Set Fan Speed
  *
+ *  I<index> Material Preset index (if material presets are defined)
  *  S<int>   Speed between 0-255
  *  P<index> Fan index, if more than one fan
  *
@@ -50,19 +55,32 @@
  *           3-255 = Set the speed for use with T2
  */
 void GcodeSuite::M106() {
-  const uint8_t p = parser.byteval('P', _ALT_P);
+  const uint8_t pfan = parser.byteval('P', _ALT_P);
 
-  if (p < _CNT_P) {
+  if (pfan < _CNT_P) {
 
     #if ENABLED(EXTRA_FAN_SPEED)
       const uint16_t t = parser.intval('T');
-      if (t > 0) return thermalManager.set_temp_fan_speed(p, t);
+      if (t > 0) return thermalManager.set_temp_fan_speed(pfan, t);
+    #endif
+
+    const uint16_t dspeed = parser.seen('A') ? thermalManager.fan_speed[active_extruder] : 255;
+
+    uint16_t speed = dspeed;
+
+    // Accept 'I' if temperature presets are defined
+    #if PREHEAT_COUNT
+      const bool got_preset = parser.seenval('I');
+      if (got_preset) speed = ui.material_preset[_MIN(parser.value_byte(), PREHEAT_COUNT - 1)].fan_speed;
+    #else
+      constexpr bool got_preset = false;
     #endif
-    uint16_t d = parser.seen('A') ? thermalManager.fan_speed[active_extruder] : 255;
-    uint16_t s = parser.ushortval('S', d);
-    NOMORE(s, 255U);
 
-    thermalManager.set_fan_speed(p, s);
+    if (!got_preset && parser.seenval('S'))
+      speed = parser.value_ushort();
+
+    // Set speed, with constraint
+    thermalManager.set_fan_speed(pfan, speed);
   }
 }
 

commit 8b3c7dda755ebce5bd57a7ce52891a137ea12b35
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 27 04:41:18 2020 -0500

    Add HAS_FAN and others

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
index 2415484d51..7fbc53297e 100644
--- a/Marlin/src/gcode/temp/M106_M107.cpp
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -22,7 +22,7 @@
 
 #include "../../inc/MarlinConfig.h"
 
-#if FAN_COUNT > 0
+#if HAS_FAN
 
 #include "../gcode.h"
 #include "../../module/motion.h"
@@ -74,4 +74,4 @@ void GcodeSuite::M107() {
   thermalManager.set_fan_speed(p, 0);
 }
 
-#endif // FAN_COUNT > 0
+#endif // HAS_FAN

commit 6bead0c1b04152f6a291d851f6cd4029fe0fc616
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 16:29:29 2020 -0500

    Shorter paths to HAL, ExtUI (#17156)

diff --git a/Marlin/src/gcode/temp/M106_M107.cpp b/Marlin/src/gcode/temp/M106_M107.cpp
new file mode 100644
index 0000000000..2415484d51
--- /dev/null
+++ b/Marlin/src/gcode/temp/M106_M107.cpp
@@ -0,0 +1,77 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../inc/MarlinConfig.h"
+
+#if FAN_COUNT > 0
+
+#include "../gcode.h"
+#include "../../module/motion.h"
+#include "../../module/temperature.h"
+
+#if ENABLED(SINGLENOZZLE)
+  #define _ALT_P active_extruder
+  #define _CNT_P EXTRUDERS
+#else
+  #define _ALT_P _MIN(active_extruder, FAN_COUNT - 1)
+  #define _CNT_P FAN_COUNT
+#endif
+
+/**
+ * M106: Set Fan Speed
+ *
+ *  S<int>   Speed between 0-255
+ *  P<index> Fan index, if more than one fan
+ *
+ * With EXTRA_FAN_SPEED enabled:
+ *
+ *  T<int>   Restore/Use/Set Temporary Speed:
+ *           1     = Restore previous speed after T2
+ *           2     = Use temporary speed set with T3-255
+ *           3-255 = Set the speed for use with T2
+ */
+void GcodeSuite::M106() {
+  const uint8_t p = parser.byteval('P', _ALT_P);
+
+  if (p < _CNT_P) {
+
+    #if ENABLED(EXTRA_FAN_SPEED)
+      const uint16_t t = parser.intval('T');
+      if (t > 0) return thermalManager.set_temp_fan_speed(p, t);
+    #endif
+    uint16_t d = parser.seen('A') ? thermalManager.fan_speed[active_extruder] : 255;
+    uint16_t s = parser.ushortval('S', d);
+    NOMORE(s, 255U);
+
+    thermalManager.set_fan_speed(p, s);
+  }
+}
+
+/**
+ * M107: Fan Off
+ */
+void GcodeSuite::M107() {
+  const uint8_t p = parser.byteval('P', _ALT_P);
+  thermalManager.set_fan_speed(p, 0);
+}
+
+#endif // FAN_COUNT > 0
