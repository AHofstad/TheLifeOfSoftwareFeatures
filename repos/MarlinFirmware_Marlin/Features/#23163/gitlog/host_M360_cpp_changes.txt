commit da96607b65ecc910178413d6979c128add9d098e
Author: Vovodroid <vovodroid@users.noreply.github.com>
Date:   Sat Jan 20 00:38:25 2024 +0200

    üîß Adjust DEFAULT_EJERK settings (#26665)

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 3986200e08..8d6bb4771a 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -175,20 +175,24 @@ void GcodeSuite::M360() {
   #if HAS_HEATED_BED
     config_line(F("MaxBedTemp"), BED_MAX_TARGET);
   #endif
 
   //
   // Per-Extruder settings
   //
   config_line(F("NumExtruder"), EXTRUDERS);
   #if HAS_EXTRUDERS
     EXTRUDER_LOOP() {
-      config_line_e(e, JERK_STR, TERN(HAS_LINEAR_E_JERK, planner.max_e_jerk[E_INDEX_N(e)], TERN(CLASSIC_JERK, planner.max_jerk.e, DEFAULT_EJERK)));
+      #if HAS_LINEAR_E_JERK
+        config_line_e(e, JERK_STR, planner.max_e_jerk[E_INDEX_N(e)]);
+      #elif ENABLED(CLASSIC_JERK)
+        config_line_e(e, JERK_STR, planner.max_jerk.e);
+      #endif
       config_line_e(e, F("MaxSpeed"), planner.settings.max_feedrate_mm_s[E_AXIS_N(e)]);
       config_line_e(e, F("Acceleration"), planner.settings.max_acceleration_mm_per_s2[E_AXIS_N(e)]);
       config_line_e(e, F("Diameter"), TERN(NO_VOLUMETRICS, DEFAULT_NOMINAL_FILAMENT_DIA, planner.filament_size[e]));
       config_line_e(e, F("MaxTemp"), thermalManager.hotend_maxtemp[e]);
     }
   #endif
 }
 
 #endif

commit 15f26b402123d087f62728e1f1763a2b96f8d21d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Dec 27 01:25:51 2023 -0600

    üßë‚Äçüíª AS_CHAR => C (#26569)

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 87aad88952..3986200e08 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -30,21 +30,21 @@
 #include "../../module/planner.h"
 
 #if HAS_EXTRUDERS
   #include "../../module/temperature.h"
 #endif
 
 static void config_prefix(PGM_P const name, PGM_P const pref=nullptr, const int8_t ind=-1) {
   SERIAL_ECHOPGM("Config:");
   if (pref) SERIAL_ECHOPGM_P(pref);
   if (ind >= 0) { SERIAL_ECHO(ind); SERIAL_CHAR(':'); }
-  SERIAL_ECHOPGM_P(name, AS_CHAR(':'));
+  SERIAL_ECHOPGM_P(name, C(':'));
 }
 static void config_line(PGM_P const name, const float val, PGM_P const pref=nullptr, const int8_t ind=-1) {
   config_prefix(name, pref, ind);
   SERIAL_ECHOLN(val);
 }
 static void config_line(FSTR_P const name, const float val, FSTR_P const pref=nullptr, const int8_t ind=-1) {
   config_line(FTOP(name), val, FTOP(pref) , ind);
 }
 static void config_line_e(const int8_t e, PGM_P const name, const float val) {
   config_line(name, val, PSTR("Extr."), e + 1);

commit 75da3555ee0910f3d572f4b8176afecdc941524b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Dec 14 10:03:11 2023 -0600

    üîß Update CLASSIC_JERK conditionals

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 9649e99e17..87aad88952 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -84,21 +84,21 @@ void GcodeSuite::M360() {
   // Homing Directions
   //
   PGMSTR(H_DIR_STR, "HomeDir");
   config_line(H_DIR_STR, X_HOME_DIR, X_STR);
   config_line(H_DIR_STR, Y_HOME_DIR, Y_STR);
   config_line(H_DIR_STR, Z_HOME_DIR, Z_STR);
 
   //
   // XYZ Axis Jerk
   //
-  #if HAS_CLASSIC_JERK
+  #if ENABLED(CLASSIC_JERK)
     if (planner.max_jerk.x == planner.max_jerk.y)
       config_line(F("XY"), planner.max_jerk.x, FPSTR(JERK_STR));
     else {
       config_line(X_STR, planner.max_jerk.x, JERK_STR);
       config_line(Y_STR, planner.max_jerk.y, JERK_STR);
     }
     config_line(Z_STR, planner.max_jerk.z, JERK_STR);
   #endif
 
   //
@@ -175,20 +175,20 @@ void GcodeSuite::M360() {
   #if HAS_HEATED_BED
     config_line(F("MaxBedTemp"), BED_MAX_TARGET);
   #endif
 
   //
   // Per-Extruder settings
   //
   config_line(F("NumExtruder"), EXTRUDERS);
   #if HAS_EXTRUDERS
     EXTRUDER_LOOP() {
-      config_line_e(e, JERK_STR, TERN(HAS_LINEAR_E_JERK, planner.max_e_jerk[E_INDEX_N(e)], TERN(HAS_CLASSIC_JERK, planner.max_jerk.e, DEFAULT_EJERK)));
+      config_line_e(e, JERK_STR, TERN(HAS_LINEAR_E_JERK, planner.max_e_jerk[E_INDEX_N(e)], TERN(CLASSIC_JERK, planner.max_jerk.e, DEFAULT_EJERK)));
       config_line_e(e, F("MaxSpeed"), planner.settings.max_feedrate_mm_s[E_AXIS_N(e)]);
       config_line_e(e, F("Acceleration"), planner.settings.max_acceleration_mm_per_s2[E_AXIS_N(e)]);
       config_line_e(e, F("Diameter"), TERN(NO_VOLUMETRICS, DEFAULT_NOMINAL_FILAMENT_DIA, planner.filament_size[e]));
       config_line_e(e, F("MaxTemp"), thermalManager.hotend_maxtemp[e]);
     }
   #endif
 }
 
 #endif

commit 5664c02d077e028f84a24efd96c2eebe97ce8763
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 22:43:09 2023 -0500

    üßë‚Äçüíª Generalize SDSUPPORT as HAS_MEDIA
    
    In preparation for single- and multi-volume refactoring.

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index d8e166dad8..9649e99e17 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -63,21 +63,21 @@ void GcodeSuite::M360() {
   PGMSTR(Z_STR,    "Z");
   PGMSTR(JERK_STR, "Jerk");
 
   //
   // Basics and Enabled items
   //
   config_line(F("Baudrate"),                    BAUDRATE);
   config_line(F("InputBuffer"),                 MAX_CMD_SIZE);
   config_line(F("PrintlineCache"),              BUFSIZE);
   config_line(F("MixingExtruder"),              ENABLED(MIXING_EXTRUDER));
-  config_line(F("SDCard"),                      ENABLED(SDSUPPORT));
+  config_line(F("SDCard"),                      ENABLED(HAS_MEDIA));
   config_line(F("Fan"),                         ENABLED(HAS_FAN));
   config_line(F("LCD"),                         ENABLED(HAS_DISPLAY));
   config_line(F("SoftwarePowerSwitch"),         1);
   config_line(F("SupportLocalFilamentchange"),  ENABLED(ADVANCED_PAUSE_FEATURE));
   config_line(F("CaseLights"),                  ENABLED(CASE_LIGHT_ENABLE));
   config_line(F("ZProbe"),                      ENABLED(HAS_BED_PROBE));
   config_line(F("Autolevel"),                   ENABLED(HAS_LEVELING));
   config_line(F("EEPROM"),                      ENABLED(EEPROM_SETTINGS));
 
   //

commit 7717beb79362522b8239d5af62b32ff3d0e2d748
Author: kadir ilkimen <kadirilkimen@gmail.com>
Date:   Wed Jan 11 06:29:38 2023 +0200

    ‚ú® Polar Kinematics (#25214)

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index b3a95a35aa..d8e166dad8 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -154,20 +154,21 @@ void GcodeSuite::M360() {
   config_line(P_ACC_STR, _ACCEL(Y, acceleration), Y_STR);
   config_line(P_ACC_STR, _ACCEL(Z, acceleration), Z_STR);
   config_line(T_ACC_STR, _ACCEL(X, travel_acceleration), X_STR);
   config_line(T_ACC_STR, _ACCEL(Y, travel_acceleration), Y_STR);
   config_line(T_ACC_STR, _ACCEL(Z, travel_acceleration), Z_STR);
 
   config_prefix(PSTR("PrinterType"));
   SERIAL_ECHOLNPGM(
     TERN_(DELTA,         "Delta")
     TERN_(IS_SCARA,      "SCARA")
+    TERN_(POLAR,         "Polar")
     TERN_(IS_CORE,       "Core")
     TERN_(MARKFORGED_XY, "MarkForgedXY")
     TERN_(MARKFORGED_YX, "MarkForgedYX")
     TERN_(IS_CARTESIAN,  "Cartesian")
   );
 
   //
   // Heated Bed
   //
   config_line(F("HeatedBed"), ENABLED(HAS_HEATED_BED));

commit 6b47db3a68668022aa096d6983c89df3f926dc30
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Mar 22 20:34:00 2022 -0500

    üé® General cleanup, comments

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 1feb57996a..b3a95a35aa 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -173,21 +173,21 @@ void GcodeSuite::M360() {
   config_line(F("HeatedBed"), ENABLED(HAS_HEATED_BED));
   #if HAS_HEATED_BED
     config_line(F("MaxBedTemp"), BED_MAX_TARGET);
   #endif
 
   //
   // Per-Extruder settings
   //
   config_line(F("NumExtruder"), EXTRUDERS);
   #if HAS_EXTRUDERS
-    LOOP_L_N(e, EXTRUDERS) {
+    EXTRUDER_LOOP() {
       config_line_e(e, JERK_STR, TERN(HAS_LINEAR_E_JERK, planner.max_e_jerk[E_INDEX_N(e)], TERN(HAS_CLASSIC_JERK, planner.max_jerk.e, DEFAULT_EJERK)));
       config_line_e(e, F("MaxSpeed"), planner.settings.max_feedrate_mm_s[E_AXIS_N(e)]);
       config_line_e(e, F("Acceleration"), planner.settings.max_acceleration_mm_per_s2[E_AXIS_N(e)]);
       config_line_e(e, F("Diameter"), TERN(NO_VOLUMETRICS, DEFAULT_NOMINAL_FILAMENT_DIA, planner.filament_size[e]));
       config_line_e(e, F("MaxTemp"), thermalManager.hotend_maxtemp[e]);
     }
   #endif
 }
 
 #endif

commit e5154ec28179c7dc7b58a830412e7cb09c2f878c
Author: John Robertson <john@cirtech.co.uk>
Date:   Tue Nov 23 21:24:24 2021 +0000

    ‚ú® MarkForged YX kinematics (#23163)

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index b1b558b033..1feb57996a 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -155,21 +155,22 @@ void GcodeSuite::M360() {
   config_line(P_ACC_STR, _ACCEL(Z, acceleration), Z_STR);
   config_line(T_ACC_STR, _ACCEL(X, travel_acceleration), X_STR);
   config_line(T_ACC_STR, _ACCEL(Y, travel_acceleration), Y_STR);
   config_line(T_ACC_STR, _ACCEL(Z, travel_acceleration), Z_STR);
 
   config_prefix(PSTR("PrinterType"));
   SERIAL_ECHOLNPGM(
     TERN_(DELTA,         "Delta")
     TERN_(IS_SCARA,      "SCARA")
     TERN_(IS_CORE,       "Core")
-    TERN_(MARKFORGED_XY, "MarkForged")
+    TERN_(MARKFORGED_XY, "MarkForgedXY")
+    TERN_(MARKFORGED_YX, "MarkForgedYX")
     TERN_(IS_CARTESIAN,  "Cartesian")
   );
 
   //
   // Heated Bed
   //
   config_line(F("HeatedBed"), ENABLED(HAS_HEATED_BED));
   #if HAS_HEATED_BED
     config_line(F("MaxBedTemp"), BED_MAX_TARGET);
   #endif

commit e52c30d43a171fe6ce21a83589ac17d467e9a11c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 5 21:19:28 2021 -0500

    üêõ Followup to F() in config_line
    
    Followup to 1dafd1887e

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 29b7ae602b..b1b558b033 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -86,46 +86,46 @@ void GcodeSuite::M360() {
   PGMSTR(H_DIR_STR, "HomeDir");
   config_line(H_DIR_STR, X_HOME_DIR, X_STR);
   config_line(H_DIR_STR, Y_HOME_DIR, Y_STR);
   config_line(H_DIR_STR, Z_HOME_DIR, Z_STR);
 
   //
   // XYZ Axis Jerk
   //
   #if HAS_CLASSIC_JERK
     if (planner.max_jerk.x == planner.max_jerk.y)
-      config_line(F("XY"), planner.max_jerk.x, JERK_STR);
+      config_line(F("XY"), planner.max_jerk.x, FPSTR(JERK_STR));
     else {
       config_line(X_STR, planner.max_jerk.x, JERK_STR);
       config_line(Y_STR, planner.max_jerk.y, JERK_STR);
     }
     config_line(Z_STR, planner.max_jerk.z, JERK_STR);
   #endif
 
   //
   // Firmware Retraction
   //
   config_line(F("SupportG10G11"), ENABLED(FWRETRACT));
   #if ENABLED(FWRETRACT)
     PGMSTR(RET_STR, "Retraction");
     PGMSTR(UNRET_STR, "RetractionUndo");
     PGMSTR(SPEED_STR, "Speed");
     // M10 Retract with swap (long) moves
-    config_line(F("Length"),     fwretract.settings.retract_length, RET_STR);
-    config_line(SPEED_STR,          fwretract.settings.retract_feedrate_mm_s, RET_STR);
-    config_line(F("ZLift"),      fwretract.settings.retract_zraise, RET_STR);
-    config_line(F("LongLength"), fwretract.settings.swap_retract_length, RET_STR);
+    config_line(F("Length"),     fwretract.settings.retract_length, FPSTR(RET_STR));
+    config_line(SPEED_STR,       fwretract.settings.retract_feedrate_mm_s, RET_STR);
+    config_line(F("ZLift"),      fwretract.settings.retract_zraise, FPSTR(RET_STR));
+    config_line(F("LongLength"), fwretract.settings.swap_retract_length, FPSTR(RET_STR));
     // M11 Recover (undo) with swap (long) moves
-    config_line(SPEED_STR,               fwretract.settings.retract_recover_feedrate_mm_s, UNRET_STR);
-    config_line(F("ExtraLength"),     fwretract.settings.retract_recover_extra, UNRET_STR);
-    config_line(F("ExtraLongLength"), fwretract.settings.swap_retract_recover_extra, UNRET_STR);
-    config_line(F("LongSpeed"),       fwretract.settings.swap_retract_recover_feedrate_mm_s, UNRET_STR);
+    config_line(SPEED_STR,            fwretract.settings.retract_recover_feedrate_mm_s, UNRET_STR);
+    config_line(F("ExtraLength"),     fwretract.settings.retract_recover_extra, FPSTR(UNRET_STR));
+    config_line(F("ExtraLongLength"), fwretract.settings.swap_retract_recover_extra, FPSTR(UNRET_STR));
+    config_line(F("LongSpeed"),       fwretract.settings.swap_retract_recover_feedrate_mm_s, FPSTR(UNRET_STR));
   #endif
 
   //
   // Workspace boundaries
   //
   const xyz_pos_t dmin = { X_MIN_POS, Y_MIN_POS, Z_MIN_POS },
                   dmax = { X_MAX_POS, Y_MAX_POS, Z_MAX_POS };
   xyz_pos_t cmin = dmin, cmax = dmax;
   apply_motion_limits(cmin);
   apply_motion_limits(cmax);

commit 1dafd1887e40399faf16e3455e3670ed3acfac52
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 27 13:46:42 2021 -0500

    üé® Apply F() to various reports

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 1830dea3bf..29b7ae602b 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -36,90 +36,96 @@
 static void config_prefix(PGM_P const name, PGM_P const pref=nullptr, const int8_t ind=-1) {
   SERIAL_ECHOPGM("Config:");
   if (pref) SERIAL_ECHOPGM_P(pref);
   if (ind >= 0) { SERIAL_ECHO(ind); SERIAL_CHAR(':'); }
   SERIAL_ECHOPGM_P(name, AS_CHAR(':'));
 }
 static void config_line(PGM_P const name, const float val, PGM_P const pref=nullptr, const int8_t ind=-1) {
   config_prefix(name, pref, ind);
   SERIAL_ECHOLN(val);
 }
+static void config_line(FSTR_P const name, const float val, FSTR_P const pref=nullptr, const int8_t ind=-1) {
+  config_line(FTOP(name), val, FTOP(pref) , ind);
+}
 static void config_line_e(const int8_t e, PGM_P const name, const float val) {
   config_line(name, val, PSTR("Extr."), e + 1);
 }
+static void config_line_e(const int8_t e, FSTR_P const name, const float val) {
+  config_line_e(e, FTOP(name), val);
+}
 
 /**
  * M360: Report Firmware configuration
  *       in RepRapFirmware-compatible format
  */
 void GcodeSuite::M360() {
   PGMSTR(X_STR,    "X");
   PGMSTR(Y_STR,    "Y");
   PGMSTR(Z_STR,    "Z");
   PGMSTR(JERK_STR, "Jerk");
 
   //
   // Basics and Enabled items
   //
-  config_line(PSTR("Baudrate"),                   BAUDRATE);
-  config_line(PSTR("InputBuffer"),                MAX_CMD_SIZE);
-  config_line(PSTR("PrintlineCache"),             BUFSIZE);
-  config_line(PSTR("MixingExtruder"),             ENABLED(MIXING_EXTRUDER));
-  config_line(PSTR("SDCard"),                     ENABLED(SDSUPPORT));
-  config_line(PSTR("Fan"),                        ENABLED(HAS_FAN));
-  config_line(PSTR("LCD"),                        ENABLED(HAS_DISPLAY));
-  config_line(PSTR("SoftwarePowerSwitch"), 1);
-  config_line(PSTR("SupportLocalFilamentchange"), ENABLED(ADVANCED_PAUSE_FEATURE));
-  config_line(PSTR("CaseLights"),                 ENABLED(CASE_LIGHT_ENABLE));
-  config_line(PSTR("ZProbe"),                     ENABLED(HAS_BED_PROBE));
-  config_line(PSTR("Autolevel"),                  ENABLED(HAS_LEVELING));
-  config_line(PSTR("EEPROM"),                     ENABLED(EEPROM_SETTINGS));
+  config_line(F("Baudrate"),                    BAUDRATE);
+  config_line(F("InputBuffer"),                 MAX_CMD_SIZE);
+  config_line(F("PrintlineCache"),              BUFSIZE);
+  config_line(F("MixingExtruder"),              ENABLED(MIXING_EXTRUDER));
+  config_line(F("SDCard"),                      ENABLED(SDSUPPORT));
+  config_line(F("Fan"),                         ENABLED(HAS_FAN));
+  config_line(F("LCD"),                         ENABLED(HAS_DISPLAY));
+  config_line(F("SoftwarePowerSwitch"),         1);
+  config_line(F("SupportLocalFilamentchange"),  ENABLED(ADVANCED_PAUSE_FEATURE));
+  config_line(F("CaseLights"),                  ENABLED(CASE_LIGHT_ENABLE));
+  config_line(F("ZProbe"),                      ENABLED(HAS_BED_PROBE));
+  config_line(F("Autolevel"),                   ENABLED(HAS_LEVELING));
+  config_line(F("EEPROM"),                      ENABLED(EEPROM_SETTINGS));
 
   //
   // Homing Directions
   //
   PGMSTR(H_DIR_STR, "HomeDir");
   config_line(H_DIR_STR, X_HOME_DIR, X_STR);
   config_line(H_DIR_STR, Y_HOME_DIR, Y_STR);
   config_line(H_DIR_STR, Z_HOME_DIR, Z_STR);
 
   //
   // XYZ Axis Jerk
   //
   #if HAS_CLASSIC_JERK
     if (planner.max_jerk.x == planner.max_jerk.y)
-      config_line(PSTR("XY"), planner.max_jerk.x, JERK_STR);
+      config_line(F("XY"), planner.max_jerk.x, JERK_STR);
     else {
       config_line(X_STR, planner.max_jerk.x, JERK_STR);
       config_line(Y_STR, planner.max_jerk.y, JERK_STR);
     }
     config_line(Z_STR, planner.max_jerk.z, JERK_STR);
   #endif
 
   //
   // Firmware Retraction
   //
-  config_line(PSTR("SupportG10G11"), ENABLED(FWRETRACT));
+  config_line(F("SupportG10G11"), ENABLED(FWRETRACT));
   #if ENABLED(FWRETRACT)
     PGMSTR(RET_STR, "Retraction");
     PGMSTR(UNRET_STR, "RetractionUndo");
     PGMSTR(SPEED_STR, "Speed");
     // M10 Retract with swap (long) moves
-    config_line(PSTR("Length"),     fwretract.settings.retract_length, RET_STR);
+    config_line(F("Length"),     fwretract.settings.retract_length, RET_STR);
     config_line(SPEED_STR,          fwretract.settings.retract_feedrate_mm_s, RET_STR);
-    config_line(PSTR("ZLift"),      fwretract.settings.retract_zraise, RET_STR);
-    config_line(PSTR("LongLength"), fwretract.settings.swap_retract_length, RET_STR);
+    config_line(F("ZLift"),      fwretract.settings.retract_zraise, RET_STR);
+    config_line(F("LongLength"), fwretract.settings.swap_retract_length, RET_STR);
     // M11 Recover (undo) with swap (long) moves
     config_line(SPEED_STR,               fwretract.settings.retract_recover_feedrate_mm_s, UNRET_STR);
-    config_line(PSTR("ExtraLength"),     fwretract.settings.retract_recover_extra, UNRET_STR);
-    config_line(PSTR("ExtraLongLength"), fwretract.settings.swap_retract_recover_extra, UNRET_STR);
-    config_line(PSTR("LongSpeed"),       fwretract.settings.swap_retract_recover_feedrate_mm_s, UNRET_STR);
+    config_line(F("ExtraLength"),     fwretract.settings.retract_recover_extra, UNRET_STR);
+    config_line(F("ExtraLongLength"), fwretract.settings.swap_retract_recover_extra, UNRET_STR);
+    config_line(F("LongSpeed"),       fwretract.settings.swap_retract_recover_feedrate_mm_s, UNRET_STR);
   #endif
 
   //
   // Workspace boundaries
   //
   const xyz_pos_t dmin = { X_MIN_POS, Y_MIN_POS, Z_MIN_POS },
                   dmax = { X_MAX_POS, Y_MAX_POS, Z_MAX_POS };
   xyz_pos_t cmin = dmin, cmax = dmax;
   apply_motion_limits(cmin);
   apply_motion_limits(cmax);
@@ -156,31 +162,31 @@ void GcodeSuite::M360() {
     TERN_(DELTA,         "Delta")
     TERN_(IS_SCARA,      "SCARA")
     TERN_(IS_CORE,       "Core")
     TERN_(MARKFORGED_XY, "MarkForged")
     TERN_(IS_CARTESIAN,  "Cartesian")
   );
 
   //
   // Heated Bed
   //
-  config_line(PSTR("HeatedBed"), ENABLED(HAS_HEATED_BED));
+  config_line(F("HeatedBed"), ENABLED(HAS_HEATED_BED));
   #if HAS_HEATED_BED
-    config_line(PSTR("MaxBedTemp"), BED_MAX_TARGET);
+    config_line(F("MaxBedTemp"), BED_MAX_TARGET);
   #endif
 
   //
   // Per-Extruder settings
   //
-  config_line(PSTR("NumExtruder"), EXTRUDERS);
+  config_line(F("NumExtruder"), EXTRUDERS);
   #if HAS_EXTRUDERS
     LOOP_L_N(e, EXTRUDERS) {
       config_line_e(e, JERK_STR, TERN(HAS_LINEAR_E_JERK, planner.max_e_jerk[E_INDEX_N(e)], TERN(HAS_CLASSIC_JERK, planner.max_jerk.e, DEFAULT_EJERK)));
-      config_line_e(e, PSTR("MaxSpeed"), planner.settings.max_feedrate_mm_s[E_AXIS_N(e)]);
-      config_line_e(e, PSTR("Acceleration"), planner.settings.max_acceleration_mm_per_s2[E_AXIS_N(e)]);
-      config_line_e(e, PSTR("Diameter"), TERN(NO_VOLUMETRICS, DEFAULT_NOMINAL_FILAMENT_DIA, planner.filament_size[e]));
-      config_line_e(e, PSTR("MaxTemp"), thermalManager.hotend_maxtemp[e]);
+      config_line_e(e, F("MaxSpeed"), planner.settings.max_feedrate_mm_s[E_AXIS_N(e)]);
+      config_line_e(e, F("Acceleration"), planner.settings.max_acceleration_mm_per_s2[E_AXIS_N(e)]);
+      config_line_e(e, F("Diameter"), TERN(NO_VOLUMETRICS, DEFAULT_NOMINAL_FILAMENT_DIA, planner.filament_size[e]));
+      config_line_e(e, F("MaxTemp"), thermalManager.hotend_maxtemp[e]);
     }
   #endif
 }
 
 #endif

commit 323b38ee88dbf2a4691a20439dbb95a824822199
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Sep 16 04:36:26 2021 -0500

    üí° Adjust headers, formatting

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index cec8df7542..1830dea3bf 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -12,20 +12,21 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
+
 #include "../../inc/MarlinConfig.h"
 
 #if ENABLED(REPETIER_GCODE_M360)
 
 #include "../gcode.h"
 
 #include "../../module/motion.h"
 #include "../../module/planner.h"
 
 #if HAS_EXTRUDERS

commit 754b31918a73cb08c322102be5d3926d2ac59c18
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 9 04:57:05 2021 -0500

    üé® Fewer serial macros

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 7a0b8e3ab0..cec8df7542 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -29,21 +29,21 @@
 #include "../../module/planner.h"
 
 #if HAS_EXTRUDERS
   #include "../../module/temperature.h"
 #endif
 
 static void config_prefix(PGM_P const name, PGM_P const pref=nullptr, const int8_t ind=-1) {
   SERIAL_ECHOPGM("Config:");
   if (pref) SERIAL_ECHOPGM_P(pref);
   if (ind >= 0) { SERIAL_ECHO(ind); SERIAL_CHAR(':'); }
-  SERIAL_ECHOPAIR_P(name, AS_CHAR(':'));
+  SERIAL_ECHOPGM_P(name, AS_CHAR(':'));
 }
 static void config_line(PGM_P const name, const float val, PGM_P const pref=nullptr, const int8_t ind=-1) {
   config_prefix(name, pref, ind);
   SERIAL_ECHOLN(val);
 }
 static void config_line_e(const int8_t e, PGM_P const name, const float val) {
   config_line(name, val, PSTR("Extr."), e + 1);
 }
 
 /**

commit 2de54dab84d82ef69fb9ac3bd9025444f4f84813
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri May 21 08:23:09 2021 -0500

    üé® Move HAS_EXTRUDERS

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index f3c242526d..7a0b8e3ab0 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -21,21 +21,21 @@
  */
 #include "../../inc/MarlinConfig.h"
 
 #if ENABLED(REPETIER_GCODE_M360)
 
 #include "../gcode.h"
 
 #include "../../module/motion.h"
 #include "../../module/planner.h"
 
-#if EXTRUDERS
+#if HAS_EXTRUDERS
   #include "../../module/temperature.h"
 #endif
 
 static void config_prefix(PGM_P const name, PGM_P const pref=nullptr, const int8_t ind=-1) {
   SERIAL_ECHOPGM("Config:");
   if (pref) SERIAL_ECHOPGM_P(pref);
   if (ind >= 0) { SERIAL_ECHO(ind); SERIAL_CHAR(':'); }
   SERIAL_ECHOPAIR_P(name, AS_CHAR(':'));
 }
 static void config_line(PGM_P const name, const float val, PGM_P const pref=nullptr, const int8_t ind=-1) {
@@ -164,21 +164,21 @@ void GcodeSuite::M360() {
   //
   config_line(PSTR("HeatedBed"), ENABLED(HAS_HEATED_BED));
   #if HAS_HEATED_BED
     config_line(PSTR("MaxBedTemp"), BED_MAX_TARGET);
   #endif
 
   //
   // Per-Extruder settings
   //
   config_line(PSTR("NumExtruder"), EXTRUDERS);
-  #if EXTRUDERS
+  #if HAS_EXTRUDERS
     LOOP_L_N(e, EXTRUDERS) {
       config_line_e(e, JERK_STR, TERN(HAS_LINEAR_E_JERK, planner.max_e_jerk[E_INDEX_N(e)], TERN(HAS_CLASSIC_JERK, planner.max_jerk.e, DEFAULT_EJERK)));
       config_line_e(e, PSTR("MaxSpeed"), planner.settings.max_feedrate_mm_s[E_AXIS_N(e)]);
       config_line_e(e, PSTR("Acceleration"), planner.settings.max_acceleration_mm_per_s2[E_AXIS_N(e)]);
       config_line_e(e, PSTR("Diameter"), TERN(NO_VOLUMETRICS, DEFAULT_NOMINAL_FILAMENT_DIA, planner.filament_size[e]));
       config_line_e(e, PSTR("MaxTemp"), thermalManager.hotend_maxtemp[e]);
     }
   #endif
 }
 

commit cfa6c7d45ba72d1a0b26e6308191e008dcd0d9c9
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Mar 19 16:34:10 2021 -0500

    Improve max temp / target

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 50a4e45426..f3c242526d 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -170,16 +170,16 @@ void GcodeSuite::M360() {
   //
   // Per-Extruder settings
   //
   config_line(PSTR("NumExtruder"), EXTRUDERS);
   #if EXTRUDERS
     LOOP_L_N(e, EXTRUDERS) {
       config_line_e(e, JERK_STR, TERN(HAS_LINEAR_E_JERK, planner.max_e_jerk[E_INDEX_N(e)], TERN(HAS_CLASSIC_JERK, planner.max_jerk.e, DEFAULT_EJERK)));
       config_line_e(e, PSTR("MaxSpeed"), planner.settings.max_feedrate_mm_s[E_AXIS_N(e)]);
       config_line_e(e, PSTR("Acceleration"), planner.settings.max_acceleration_mm_per_s2[E_AXIS_N(e)]);
       config_line_e(e, PSTR("Diameter"), TERN(NO_VOLUMETRICS, DEFAULT_NOMINAL_FILAMENT_DIA, planner.filament_size[e]));
-      config_line_e(e, PSTR("MaxTemp"), thermalManager.heater_maxtemp[e]);
+      config_line_e(e, PSTR("MaxTemp"), thermalManager.hotend_maxtemp[e]);
     }
   #endif
 }
 
 #endif

commit dd42831cba7334c5d106ba435bdb41b6135971bb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Feb 28 19:43:46 2021 -0600

    Serial macros cleanup

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index b0bd4a3b8e..50a4e45426 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -27,24 +27,23 @@
 
 #include "../../module/motion.h"
 #include "../../module/planner.h"
 
 #if EXTRUDERS
   #include "../../module/temperature.h"
 #endif
 
 static void config_prefix(PGM_P const name, PGM_P const pref=nullptr, const int8_t ind=-1) {
   SERIAL_ECHOPGM("Config:");
-  if (pref) serialprintPGM(pref);
+  if (pref) SERIAL_ECHOPGM_P(pref);
   if (ind >= 0) { SERIAL_ECHO(ind); SERIAL_CHAR(':'); }
-  serialprintPGM(name);
-  SERIAL_CHAR(':');
+  SERIAL_ECHOPAIR_P(name, AS_CHAR(':'));
 }
 static void config_line(PGM_P const name, const float val, PGM_P const pref=nullptr, const int8_t ind=-1) {
   config_prefix(name, pref, ind);
   SERIAL_ECHOLN(val);
 }
 static void config_line_e(const int8_t e, PGM_P const name, const float val) {
   config_line(name, val, PSTR("Extr."), e + 1);
 }
 
 /**

commit e7c711996bd3080f5e343eff5556736cbf2e2416
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Mon Feb 8 07:37:24 2021 +0100

    Serial refactor. Default 8-bit ECHO to int, not char (#20985)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index f49a32cc61..b0bd4a3b8e 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -28,21 +28,21 @@
 #include "../../module/motion.h"
 #include "../../module/planner.h"
 
 #if EXTRUDERS
   #include "../../module/temperature.h"
 #endif
 
 static void config_prefix(PGM_P const name, PGM_P const pref=nullptr, const int8_t ind=-1) {
   SERIAL_ECHOPGM("Config:");
   if (pref) serialprintPGM(pref);
-  if (ind >= 0) { SERIAL_ECHO(int(ind)); SERIAL_CHAR(':'); }
+  if (ind >= 0) { SERIAL_ECHO(ind); SERIAL_CHAR(':'); }
   serialprintPGM(name);
   SERIAL_CHAR(':');
 }
 static void config_line(PGM_P const name, const float val, PGM_P const pref=nullptr, const int8_t ind=-1) {
   config_prefix(name, pref, ind);
   SERIAL_ECHOLN(val);
 }
 static void config_line_e(const int8_t e, PGM_P const name, const float val) {
   config_line(name, val, PSTR("Extr."), e + 1);
 }

commit c710b6e06cfcf20f95e1b55dd3d0fd1d32bde63a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Nov 13 18:47:34 2020 -0600

    Optimize M360

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 9970dc4df9..f49a32cc61 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -21,57 +21,65 @@
  */
 #include "../../inc/MarlinConfig.h"
 
 #if ENABLED(REPETIER_GCODE_M360)
 
 #include "../gcode.h"
 
 #include "../../module/motion.h"
 #include "../../module/planner.h"
 
-static void config_prefix(PGM_P const name, PGM_P const pref=nullptr) {
+#if EXTRUDERS
+  #include "../../module/temperature.h"
+#endif
+
+static void config_prefix(PGM_P const name, PGM_P const pref=nullptr, const int8_t ind=-1) {
   SERIAL_ECHOPGM("Config:");
   if (pref) serialprintPGM(pref);
+  if (ind >= 0) { SERIAL_ECHO(int(ind)); SERIAL_CHAR(':'); }
   serialprintPGM(name);
   SERIAL_CHAR(':');
 }
-static void config_line(PGM_P const name, const float val, PGM_P const pref=nullptr) {
-  config_prefix(name, pref);
+static void config_line(PGM_P const name, const float val, PGM_P const pref=nullptr, const int8_t ind=-1) {
+  config_prefix(name, pref, ind);
   SERIAL_ECHOLN(val);
 }
+static void config_line_e(const int8_t e, PGM_P const name, const float val) {
+  config_line(name, val, PSTR("Extr."), e + 1);
+}
 
 /**
  * M360: Report Firmware configuration
  *       in RepRapFirmware-compatible format
  */
 void GcodeSuite::M360() {
   PGMSTR(X_STR,    "X");
   PGMSTR(Y_STR,    "Y");
   PGMSTR(Z_STR,    "Z");
   PGMSTR(JERK_STR, "Jerk");
 
   //
   // Basics and Enabled items
   //
-  config_line(PSTR("Baudrate"), BAUDRATE);
-  config_line(PSTR("InputBuffer"), MAX_CMD_SIZE);
-  config_line(PSTR("PrintlineCache"), BUFSIZE);
-  config_line(PSTR("MixingExtruder"), ENABLED(MIXING_EXTRUDER));
-  config_line(PSTR("SDCard"), ENABLED(SDSUPPORT));
-  config_line(PSTR("Fan"), ENABLED(HAS_FAN));
-  config_line(PSTR("LCD"), ENABLED(HAS_DISPLAY));
+  config_line(PSTR("Baudrate"),                   BAUDRATE);
+  config_line(PSTR("InputBuffer"),                MAX_CMD_SIZE);
+  config_line(PSTR("PrintlineCache"),             BUFSIZE);
+  config_line(PSTR("MixingExtruder"),             ENABLED(MIXING_EXTRUDER));
+  config_line(PSTR("SDCard"),                     ENABLED(SDSUPPORT));
+  config_line(PSTR("Fan"),                        ENABLED(HAS_FAN));
+  config_line(PSTR("LCD"),                        ENABLED(HAS_DISPLAY));
   config_line(PSTR("SoftwarePowerSwitch"), 1);
   config_line(PSTR("SupportLocalFilamentchange"), ENABLED(ADVANCED_PAUSE_FEATURE));
-  config_line(PSTR("CaseLights"), ENABLED(CASE_LIGHT_ENABLE));
-  config_line(PSTR("ZProbe"), ENABLED(HAS_BED_PROBE));
-  config_line(PSTR("Autolevel"), ENABLED(HAS_LEVELING));
-  config_line(PSTR("EEPROM"), ENABLED(EEPROM_SETTINGS));
+  config_line(PSTR("CaseLights"),                 ENABLED(CASE_LIGHT_ENABLE));
+  config_line(PSTR("ZProbe"),                     ENABLED(HAS_BED_PROBE));
+  config_line(PSTR("Autolevel"),                  ENABLED(HAS_LEVELING));
+  config_line(PSTR("EEPROM"),                     ENABLED(EEPROM_SETTINGS));
 
   //
   // Homing Directions
   //
   PGMSTR(H_DIR_STR, "HomeDir");
   config_line(H_DIR_STR, X_HOME_DIR, X_STR);
   config_line(H_DIR_STR, Y_HOME_DIR, Y_STR);
   config_line(H_DIR_STR, Z_HOME_DIR, Z_STR);
 
   //
@@ -89,29 +97,29 @@ void GcodeSuite::M360() {
 
   //
   // Firmware Retraction
   //
   config_line(PSTR("SupportG10G11"), ENABLED(FWRETRACT));
   #if ENABLED(FWRETRACT)
     PGMSTR(RET_STR, "Retraction");
     PGMSTR(UNRET_STR, "RetractionUndo");
     PGMSTR(SPEED_STR, "Speed");
     // M10 Retract with swap (long) moves
-    config_line(PSTR("Length"), fwretract.settings.retract_length, RET_STR);
-    config_line(SPEED_STR, fwretract.settings.retract_feedrate_mm_s, RET_STR);
-    config_line(PSTR("ZLift"), fwretract.settings.retract_zraise, RET_STR);
+    config_line(PSTR("Length"),     fwretract.settings.retract_length, RET_STR);
+    config_line(SPEED_STR,          fwretract.settings.retract_feedrate_mm_s, RET_STR);
+    config_line(PSTR("ZLift"),      fwretract.settings.retract_zraise, RET_STR);
     config_line(PSTR("LongLength"), fwretract.settings.swap_retract_length, RET_STR);
     // M11 Recover (undo) with swap (long) moves
-    config_line(SPEED_STR, fwretract.settings.retract_recover_feedrate_mm_s, UNRET_STR);
-    config_line(PSTR("ExtraLength"), fwretract.settings.retract_recover_extra, UNRET_STR);
+    config_line(SPEED_STR,               fwretract.settings.retract_recover_feedrate_mm_s, UNRET_STR);
+    config_line(PSTR("ExtraLength"),     fwretract.settings.retract_recover_extra, UNRET_STR);
     config_line(PSTR("ExtraLongLength"), fwretract.settings.swap_retract_recover_extra, UNRET_STR);
-    config_line(PSTR("LongSpeed"), fwretract.settings.swap_retract_recover_feedrate_mm_s, UNRET_STR);
+    config_line(PSTR("LongSpeed"),       fwretract.settings.swap_retract_recover_feedrate_mm_s, UNRET_STR);
   #endif
 
   //
   // Workspace boundaries
   //
   const xyz_pos_t dmin = { X_MIN_POS, Y_MIN_POS, Z_MIN_POS },
                   dmax = { X_MAX_POS, Y_MAX_POS, Z_MAX_POS };
   xyz_pos_t cmin = dmin, cmax = dmax;
   apply_motion_limits(cmin);
   apply_motion_limits(cmax);
@@ -158,32 +166,21 @@ void GcodeSuite::M360() {
   config_line(PSTR("HeatedBed"), ENABLED(HAS_HEATED_BED));
   #if HAS_HEATED_BED
     config_line(PSTR("MaxBedTemp"), BED_MAX_TARGET);
   #endif
 
   //
   // Per-Extruder settings
   //
   config_line(PSTR("NumExtruder"), EXTRUDERS);
   #if EXTRUDERS
-    #define DIAM_VALUE(N) TERN(NO_VOLUMETRICS, DEFAULT_NOMINAL_FILAMENT_DIA, planner.filament_size[N])
-    #if HAS_LINEAR_E_JERK
-      #define E_JERK_VAL(N) planner.max_e_jerk[E_INDEX_N(N)]
-    #elif HAS_CLASSIC_JERK
-      #define E_JERK_VAL(N) planner.max_jerk.e
-    #else
-      #define E_JERK_VAL(N) DEFAULT_EJERK
-    #endif
-    #define _EXTR_ITEM(N) do{ \
-      PGMSTR(EXTR_STR, "Extr." STRINGIFY(INCREMENT(N)) ":"); \
-      config_line(JERK_STR, E_JERK_VAL(N), EXTR_STR); \
-      config_line(PSTR("MaxSpeed"), planner.settings.max_feedrate_mm_s[E_AXIS_N(N)], EXTR_STR); \
-      config_line(PSTR("Acceleration"), planner.settings.max_acceleration_mm_per_s2[E_AXIS_N(N)], EXTR_STR); \
-      config_line(PSTR("Diameter"), DIAM_VALUE(N), EXTR_STR); \
-      config_line(PSTR("MaxTemp"), (HEATER_##N##_MAXTEMP) - (HOTEND_OVERSHOOT), EXTR_STR); \
-    }while(0)
-
-    REPEAT(EXTRUDERS, _EXTR_ITEM);
+    LOOP_L_N(e, EXTRUDERS) {
+      config_line_e(e, JERK_STR, TERN(HAS_LINEAR_E_JERK, planner.max_e_jerk[E_INDEX_N(e)], TERN(HAS_CLASSIC_JERK, planner.max_jerk.e, DEFAULT_EJERK)));
+      config_line_e(e, PSTR("MaxSpeed"), planner.settings.max_feedrate_mm_s[E_AXIS_N(e)]);
+      config_line_e(e, PSTR("Acceleration"), planner.settings.max_acceleration_mm_per_s2[E_AXIS_N(e)]);
+      config_line_e(e, PSTR("Diameter"), TERN(NO_VOLUMETRICS, DEFAULT_NOMINAL_FILAMENT_DIA, planner.filament_size[e]));
+      config_line_e(e, PSTR("MaxTemp"), thermalManager.heater_maxtemp[e]);
+    }
   #endif
 }
 
 #endif

commit e97e6865c3e587a04ae2878e72a8dfb137534b7e
Author: Victor Sokolov <gzigzigzeo@gmail.com>
Date:   Fri Sep 4 05:12:53 2020 +0400

    MarkForged kinematics (#19235)

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 87ca23becd..9970dc4df9 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -138,24 +138,25 @@ void GcodeSuite::M360() {
   PGMSTR(T_ACC_STR, "TravelAccel");
   config_line(P_ACC_STR, _ACCEL(X, acceleration), X_STR);
   config_line(P_ACC_STR, _ACCEL(Y, acceleration), Y_STR);
   config_line(P_ACC_STR, _ACCEL(Z, acceleration), Z_STR);
   config_line(T_ACC_STR, _ACCEL(X, travel_acceleration), X_STR);
   config_line(T_ACC_STR, _ACCEL(Y, travel_acceleration), Y_STR);
   config_line(T_ACC_STR, _ACCEL(Z, travel_acceleration), Z_STR);
 
   config_prefix(PSTR("PrinterType"));
   SERIAL_ECHOLNPGM(
-    TERN_(DELTA,        "Delta")
-    TERN_(IS_SCARA,     "SCARA")
-    TERN_(IS_CORE,      "Core")
-    TERN_(IS_CARTESIAN, "Cartesian")
+    TERN_(DELTA,         "Delta")
+    TERN_(IS_SCARA,      "SCARA")
+    TERN_(IS_CORE,       "Core")
+    TERN_(MARKFORGED_XY, "MarkForged")
+    TERN_(IS_CARTESIAN,  "Cartesian")
   );
 
   //
   // Heated Bed
   //
   config_line(PSTR("HeatedBed"), ENABLED(HAS_HEATED_BED));
   #if HAS_HEATED_BED
     config_line(PSTR("MaxBedTemp"), BED_MAX_TARGET);
   #endif
 

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 146abe24d4..87ca23becd 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../inc/MarlinConfig.h"
 
 #if ENABLED(REPETIER_GCODE_M360)
 
 #include "../gcode.h"
 
 #include "../../module/motion.h"
 #include "../../module/planner.h"

commit 6027055695f6fa49b857bec0552bf362e0b2bb56
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jul 21 04:00:39 2020 -0500

    Optimize LCD, Wifi, etc. libraries (#18730)

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 63a0b6dfc4..146abe24d4 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -108,22 +108,21 @@ void GcodeSuite::M360() {
   #endif
 
   //
   // Workspace boundaries
   //
   const xyz_pos_t dmin = { X_MIN_POS, Y_MIN_POS, Z_MIN_POS },
                   dmax = { X_MAX_POS, Y_MAX_POS, Z_MAX_POS };
   xyz_pos_t cmin = dmin, cmax = dmax;
   apply_motion_limits(cmin);
   apply_motion_limits(cmax);
-  const xyz_pos_t lmin = dmin.asLogical(), lmax = dmax.asLogical(),
-                  wmin = cmin.asLogical(), wmax = cmax.asLogical();
+  const xyz_pos_t wmin = cmin.asLogical(), wmax = cmax.asLogical();
 
   PGMSTR(MIN_STR, "Min");
   PGMSTR(MAX_STR, "Max");
   PGMSTR(SIZE_STR, "Size");
   config_line(MIN_STR, wmin.x, X_STR);
   config_line(MIN_STR, wmin.y, Y_STR);
   config_line(MIN_STR, wmin.z, Z_STR);
   config_line(MAX_STR, wmax.x, X_STR);
   config_line(MAX_STR, wmax.y, Y_STR);
   config_line(MAX_STR, wmax.z, Z_STR);

commit 91fe0e1022ee740262792d6a857c7226745f8c75
Author: Gurmeet Athwal <gurmeet.athwal@gmail.com>
Date:   Sun May 10 10:06:04 2020 +0530

    Fix line ending in M360 (#17917)

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
index 5c00be30b4..63a0b6dfc4 100644
--- a/Marlin/src/gcode/host/M360.cpp
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -86,21 +86,21 @@ void GcodeSuite::M360() {
     }
     config_line(Z_STR, planner.max_jerk.z, JERK_STR);
   #endif
 
   //
   // Firmware Retraction
   //
   config_line(PSTR("SupportG10G11"), ENABLED(FWRETRACT));
   #if ENABLED(FWRETRACT)
     PGMSTR(RET_STR, "Retraction");
-    PGMSTR(UNRET_STR, "RetractionUndo"),
+    PGMSTR(UNRET_STR, "RetractionUndo");
     PGMSTR(SPEED_STR, "Speed");
     // M10 Retract with swap (long) moves
     config_line(PSTR("Length"), fwretract.settings.retract_length, RET_STR);
     config_line(SPEED_STR, fwretract.settings.retract_feedrate_mm_s, RET_STR);
     config_line(PSTR("ZLift"), fwretract.settings.retract_zraise, RET_STR);
     config_line(PSTR("LongLength"), fwretract.settings.swap_retract_length, RET_STR);
     // M11 Recover (undo) with swap (long) moves
     config_line(SPEED_STR, fwretract.settings.retract_recover_feedrate_mm_s, UNRET_STR);
     config_line(PSTR("ExtraLength"), fwretract.settings.retract_recover_extra, UNRET_STR);
     config_line(PSTR("ExtraLongLength"), fwretract.settings.swap_retract_recover_extra, UNRET_STR);

commit a4c981469e317b30ff21fba109e1b126e5dcafcf
Author: Gurmeet Athwal <gurmeet.athwal@gmail.com>
Date:   Wed May 6 10:04:04 2020 +0530

    Extended reporting options (#16741)

diff --git a/Marlin/src/gcode/host/M360.cpp b/Marlin/src/gcode/host/M360.cpp
new file mode 100644
index 0000000000..5c00be30b4
--- /dev/null
+++ b/Marlin/src/gcode/host/M360.cpp
@@ -0,0 +1,189 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../inc/MarlinConfig.h"
+
+#if ENABLED(REPETIER_GCODE_M360)
+
+#include "../gcode.h"
+
+#include "../../module/motion.h"
+#include "../../module/planner.h"
+
+static void config_prefix(PGM_P const name, PGM_P const pref=nullptr) {
+  SERIAL_ECHOPGM("Config:");
+  if (pref) serialprintPGM(pref);
+  serialprintPGM(name);
+  SERIAL_CHAR(':');
+}
+static void config_line(PGM_P const name, const float val, PGM_P const pref=nullptr) {
+  config_prefix(name, pref);
+  SERIAL_ECHOLN(val);
+}
+
+/**
+ * M360: Report Firmware configuration
+ *       in RepRapFirmware-compatible format
+ */
+void GcodeSuite::M360() {
+  PGMSTR(X_STR,    "X");
+  PGMSTR(Y_STR,    "Y");
+  PGMSTR(Z_STR,    "Z");
+  PGMSTR(JERK_STR, "Jerk");
+
+  //
+  // Basics and Enabled items
+  //
+  config_line(PSTR("Baudrate"), BAUDRATE);
+  config_line(PSTR("InputBuffer"), MAX_CMD_SIZE);
+  config_line(PSTR("PrintlineCache"), BUFSIZE);
+  config_line(PSTR("MixingExtruder"), ENABLED(MIXING_EXTRUDER));
+  config_line(PSTR("SDCard"), ENABLED(SDSUPPORT));
+  config_line(PSTR("Fan"), ENABLED(HAS_FAN));
+  config_line(PSTR("LCD"), ENABLED(HAS_DISPLAY));
+  config_line(PSTR("SoftwarePowerSwitch"), 1);
+  config_line(PSTR("SupportLocalFilamentchange"), ENABLED(ADVANCED_PAUSE_FEATURE));
+  config_line(PSTR("CaseLights"), ENABLED(CASE_LIGHT_ENABLE));
+  config_line(PSTR("ZProbe"), ENABLED(HAS_BED_PROBE));
+  config_line(PSTR("Autolevel"), ENABLED(HAS_LEVELING));
+  config_line(PSTR("EEPROM"), ENABLED(EEPROM_SETTINGS));
+
+  //
+  // Homing Directions
+  //
+  PGMSTR(H_DIR_STR, "HomeDir");
+  config_line(H_DIR_STR, X_HOME_DIR, X_STR);
+  config_line(H_DIR_STR, Y_HOME_DIR, Y_STR);
+  config_line(H_DIR_STR, Z_HOME_DIR, Z_STR);
+
+  //
+  // XYZ Axis Jerk
+  //
+  #if HAS_CLASSIC_JERK
+    if (planner.max_jerk.x == planner.max_jerk.y)
+      config_line(PSTR("XY"), planner.max_jerk.x, JERK_STR);
+    else {
+      config_line(X_STR, planner.max_jerk.x, JERK_STR);
+      config_line(Y_STR, planner.max_jerk.y, JERK_STR);
+    }
+    config_line(Z_STR, planner.max_jerk.z, JERK_STR);
+  #endif
+
+  //
+  // Firmware Retraction
+  //
+  config_line(PSTR("SupportG10G11"), ENABLED(FWRETRACT));
+  #if ENABLED(FWRETRACT)
+    PGMSTR(RET_STR, "Retraction");
+    PGMSTR(UNRET_STR, "RetractionUndo"),
+    PGMSTR(SPEED_STR, "Speed");
+    // M10 Retract with swap (long) moves
+    config_line(PSTR("Length"), fwretract.settings.retract_length, RET_STR);
+    config_line(SPEED_STR, fwretract.settings.retract_feedrate_mm_s, RET_STR);
+    config_line(PSTR("ZLift"), fwretract.settings.retract_zraise, RET_STR);
+    config_line(PSTR("LongLength"), fwretract.settings.swap_retract_length, RET_STR);
+    // M11 Recover (undo) with swap (long) moves
+    config_line(SPEED_STR, fwretract.settings.retract_recover_feedrate_mm_s, UNRET_STR);
+    config_line(PSTR("ExtraLength"), fwretract.settings.retract_recover_extra, UNRET_STR);
+    config_line(PSTR("ExtraLongLength"), fwretract.settings.swap_retract_recover_extra, UNRET_STR);
+    config_line(PSTR("LongSpeed"), fwretract.settings.swap_retract_recover_feedrate_mm_s, UNRET_STR);
+  #endif
+
+  //
+  // Workspace boundaries
+  //
+  const xyz_pos_t dmin = { X_MIN_POS, Y_MIN_POS, Z_MIN_POS },
+                  dmax = { X_MAX_POS, Y_MAX_POS, Z_MAX_POS };
+  xyz_pos_t cmin = dmin, cmax = dmax;
+  apply_motion_limits(cmin);
+  apply_motion_limits(cmax);
+  const xyz_pos_t lmin = dmin.asLogical(), lmax = dmax.asLogical(),
+                  wmin = cmin.asLogical(), wmax = cmax.asLogical();
+
+  PGMSTR(MIN_STR, "Min");
+  PGMSTR(MAX_STR, "Max");
+  PGMSTR(SIZE_STR, "Size");
+  config_line(MIN_STR, wmin.x, X_STR);
+  config_line(MIN_STR, wmin.y, Y_STR);
+  config_line(MIN_STR, wmin.z, Z_STR);
+  config_line(MAX_STR, wmax.x, X_STR);
+  config_line(MAX_STR, wmax.y, Y_STR);
+  config_line(MAX_STR, wmax.z, Z_STR);
+  config_line(SIZE_STR, wmax.x - wmin.x, X_STR);
+  config_line(SIZE_STR, wmax.y - wmin.y, Y_STR);
+  config_line(SIZE_STR, wmax.z - wmin.z, Z_STR);
+
+  //
+  // Print and Travel Acceleration
+  //
+  #define _ACCEL(A,B) _MIN(planner.settings.max_acceleration_mm_per_s2[A##_AXIS], planner.settings.B)
+  PGMSTR(P_ACC_STR, "PrintAccel");
+  PGMSTR(T_ACC_STR, "TravelAccel");
+  config_line(P_ACC_STR, _ACCEL(X, acceleration), X_STR);
+  config_line(P_ACC_STR, _ACCEL(Y, acceleration), Y_STR);
+  config_line(P_ACC_STR, _ACCEL(Z, acceleration), Z_STR);
+  config_line(T_ACC_STR, _ACCEL(X, travel_acceleration), X_STR);
+  config_line(T_ACC_STR, _ACCEL(Y, travel_acceleration), Y_STR);
+  config_line(T_ACC_STR, _ACCEL(Z, travel_acceleration), Z_STR);
+
+  config_prefix(PSTR("PrinterType"));
+  SERIAL_ECHOLNPGM(
+    TERN_(DELTA,        "Delta")
+    TERN_(IS_SCARA,     "SCARA")
+    TERN_(IS_CORE,      "Core")
+    TERN_(IS_CARTESIAN, "Cartesian")
+  );
+
+  //
+  // Heated Bed
+  //
+  config_line(PSTR("HeatedBed"), ENABLED(HAS_HEATED_BED));
+  #if HAS_HEATED_BED
+    config_line(PSTR("MaxBedTemp"), BED_MAX_TARGET);
+  #endif
+
+  //
+  // Per-Extruder settings
+  //
+  config_line(PSTR("NumExtruder"), EXTRUDERS);
+  #if EXTRUDERS
+    #define DIAM_VALUE(N) TERN(NO_VOLUMETRICS, DEFAULT_NOMINAL_FILAMENT_DIA, planner.filament_size[N])
+    #if HAS_LINEAR_E_JERK
+      #define E_JERK_VAL(N) planner.max_e_jerk[E_INDEX_N(N)]
+    #elif HAS_CLASSIC_JERK
+      #define E_JERK_VAL(N) planner.max_jerk.e
+    #else
+      #define E_JERK_VAL(N) DEFAULT_EJERK
+    #endif
+    #define _EXTR_ITEM(N) do{ \
+      PGMSTR(EXTR_STR, "Extr." STRINGIFY(INCREMENT(N)) ":"); \
+      config_line(JERK_STR, E_JERK_VAL(N), EXTR_STR); \
+      config_line(PSTR("MaxSpeed"), planner.settings.max_feedrate_mm_s[E_AXIS_N(N)], EXTR_STR); \
+      config_line(PSTR("Acceleration"), planner.settings.max_acceleration_mm_per_s2[E_AXIS_N(N)], EXTR_STR); \
+      config_line(PSTR("Diameter"), DIAM_VALUE(N), EXTR_STR); \
+      config_line(PSTR("MaxTemp"), (HEATER_##N##_MAXTEMP) - (HOTEND_OVERSHOOT), EXTR_STR); \
+    }while(0)
+
+    REPEAT(EXTRUDERS, _EXTR_ITEM);
+  #endif
+}
+
+#endif
