commit 9bb5b10c0c9cf5a61d2bfb9dfdb6cfe210b6002b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jul 31 05:32:13 2021 -0500

    🚚 Relocate and adjust DWIN E3V2 (#22471)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
deleted file mode 100644
index 38017b64d6..0000000000
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ /dev/null
@@ -1,4143 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-
-/**
- * DWIN by Creality3D
- */
-
-#include "../../../inc/MarlinConfigPre.h"
-
-#if ENABLED(DWIN_CREALITY_LCD)
-
-#include "dwin.h"
-
-#if ANY(AUTO_BED_LEVELING_BILINEAR, AUTO_BED_LEVELING_LINEAR, AUTO_BED_LEVELING_3POINT) && DISABLED(PROBE_MANUALLY)
-  #define HAS_ONESTEP_LEVELING 1
-#endif
-
-#if ANY(BABYSTEPPING, HAS_BED_PROBE, HAS_WORKSPACE_OFFSET)
-  #define HAS_ZOFFSET_ITEM 1
-#endif
-
-#if !HAS_BED_PROBE && ENABLED(BABYSTEPPING)
-  #define JUST_BABYSTEP 1
-#endif
-
-#include <WString.h>
-#include <stdio.h>
-#include <string.h>
-
-#include "../../fontutils.h"
-#include "../../marlinui.h"
-
-#include "../../../sd/cardreader.h"
-
-#include "../../../MarlinCore.h"
-#include "../../../core/serial.h"
-#include "../../../core/macros.h"
-#include "../../../gcode/queue.h"
-
-#include "../../../module/temperature.h"
-#include "../../../module/printcounter.h"
-#include "../../../module/motion.h"
-#include "../../../module/planner.h"
-
-#if ENABLED(EEPROM_SETTINGS)
-  #include "../../../module/settings.h"
-#endif
-
-#if ENABLED(HOST_ACTION_COMMANDS)
-  #include "../../../feature/host_actions.h"
-#endif
-
-#if HAS_ONESTEP_LEVELING
-  #include "../../../feature/bedlevel/bedlevel.h"
-#endif
-
-#if HAS_BED_PROBE
-  #include "../../../module/probe.h"
-#endif
-
-#if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
-  #include "../../../feature/babystep.h"
-#endif
-
-#if ENABLED(POWER_LOSS_RECOVERY)
-  #include "../../../feature/powerloss.h"
-#endif
-
-#ifndef MACHINE_SIZE
-  #define MACHINE_SIZE STRINGIFY(X_BED_SIZE) "x" STRINGIFY(Y_BED_SIZE) "x" STRINGIFY(Z_MAX_POS)
-#endif
-#ifndef CORP_WEBSITE
-  #define CORP_WEBSITE WEBSITE_URL
-#endif
-
-#define PAUSE_HEAT
-
-#define USE_STRING_HEADINGS
-//#define USE_STRING_TITLES
-
-#define DWIN_FONT_MENU font8x16
-#define DWIN_FONT_STAT font10x20
-#define DWIN_FONT_HEAD font10x20
-
-#define MENU_CHAR_LIMIT  24
-#define STATUS_Y        360
-
-// Print speed limit
-#define MIN_PRINT_SPEED  10
-#define MAX_PRINT_SPEED 999
-
-// Feedspeed limit (max feedspeed = DEFAULT_MAX_FEEDRATE * 2)
-#define MIN_MAXFEEDSPEED      1
-#define MIN_MAXACCELERATION   1
-#define MIN_MAXJERK           0.1
-#define MIN_STEP              1
-
-#define FEEDRATE_E      (60)
-
-// Minimum unit (0.1) : multiple (10)
-#define UNITFDIGITS 1
-#define MINUNITMULT pow(10, UNITFDIGITS)
-
-#define ENCODER_WAIT_MS                  20
-#define DWIN_VAR_UPDATE_INTERVAL         1024
-#define DWIN_SCROLL_UPDATE_INTERVAL      SEC_TO_MS(2)
-#define DWIN_REMAIN_TIME_UPDATE_INTERVAL SEC_TO_MS(20)
-
-constexpr uint16_t TROWS = 6, MROWS = TROWS - 1,        // Total rows, and other-than-Back
-                   TITLE_HEIGHT = 30,                   // Title bar height
-                   MLINE = 53,                          // Menu line height
-                   LBLX = 60,                           // Menu item label X
-                   MENU_CHR_W = 8, STAT_CHR_W = 10;
-
-#define MBASE(L) (49 + MLINE * (L))
-
-#define BABY_Z_VAR TERN(HAS_BED_PROBE, probe.offset.z, dwin_zoffset)
-
-/* Value Init */
-HMI_value_t HMI_ValueStruct;
-HMI_Flag_t HMI_flag{0};
-
-millis_t dwin_heat_time = 0;
-
-uint8_t checkkey = 0;
-
-typedef struct {
-  uint8_t now, last;
-  void set(uint8_t v) { now = last = v; }
-  void reset() { set(0); }
-  bool changed() { bool c = (now != last); if (c) last = now; return c; }
-  bool dec() { if (now) now--; return changed(); }
-  bool inc(uint8_t v) { if (now < (v - 1)) now++; else now = (v - 1); return changed(); }
-} select_t;
-
-select_t select_page{0}, select_file{0}, select_print{0}, select_prepare{0}
-         , select_control{0}, select_axis{0}, select_temp{0}, select_motion{0}, select_tune{0}
-         , select_advset{0}, select_PLA{0}, select_ABS{0}
-         , select_speed{0}
-         , select_acc{0}
-         , select_jerk{0}
-         , select_step{0}
-         , select_item{0}
-         ;
-
-uint8_t index_file     = MROWS,
-        index_prepare  = MROWS,
-        index_control  = MROWS,
-        index_leveling = MROWS,
-        index_tune     = MROWS,
-        index_advset   = MROWS;
-
-bool dwin_abort_flag = false; // Flag to reset feedrate, return to Home
-
-constexpr float default_max_feedrate[]        = DEFAULT_MAX_FEEDRATE;
-constexpr float default_max_acceleration[]    = DEFAULT_MAX_ACCELERATION;
-
-#if HAS_CLASSIC_JERK
-  constexpr float default_max_jerk[]          = { DEFAULT_XJERK, DEFAULT_YJERK, DEFAULT_ZJERK, DEFAULT_EJERK };
-#endif
-
-static uint8_t _card_percent = 0;
-static uint16_t _remain_time = 0;
-
-#if ENABLED(PAUSE_HEAT)
-  #if HAS_HOTEND
-    uint16_t resume_hotend_temp = 0;
-  #endif
-  #if HAS_HEATED_BED
-    uint16_t resume_bed_temp = 0;
-  #endif
-#endif
-
-#if HAS_ZOFFSET_ITEM
-  float dwin_zoffset = 0, last_zoffset = 0;
-#endif
-
-#define DWIN_LANGUAGE_EEPROM_ADDRESS 0x01   // Between 0x01 and 0x63 (EEPROM_OFFSET-1)
-                                            // BL24CXX::check() uses 0x00
-
-inline bool HMI_IsChinese() { return HMI_flag.language == DWIN_CHINESE; }
-
-void HMI_SetLanguageCache() {
-  DWIN_JPG_CacheTo1(HMI_IsChinese() ? Language_Chinese : Language_English);
-}
-
-void HMI_SetLanguage() {
-  #if BOTH(EEPROM_SETTINGS, IIC_BL24CXX_EEPROM)
-    BL24CXX::read(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language, sizeof(HMI_flag.language));
-  #endif
-  HMI_SetLanguageCache();
-}
-
-void HMI_ToggleLanguage() {
-  HMI_flag.language = HMI_IsChinese() ? DWIN_ENGLISH : DWIN_CHINESE;
-  HMI_SetLanguageCache();
-  #if BOTH(EEPROM_SETTINGS, IIC_BL24CXX_EEPROM)
-    BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language, sizeof(HMI_flag.language));
-  #endif
-}
-
-void DWIN_Draw_Signed_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, long value) {
-  if (value < 0) {
-    DWIN_Draw_String(false, true, size, Color_White, bColor, x - 6, y, F("-"));
-    DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, -value);
-  }
-  else {
-    DWIN_Draw_String(false, true, size, Color_White, bColor, x - 6, y, F(" "));
-    DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, value);
-  }
-}
-
-void ICON_Print() {
-  if (select_page.now == 0) {
-    DWIN_ICON_Show(ICON, ICON_Print_1, 17, 130);
-    DWIN_Draw_Rectangle(0, Color_White, 17, 130, 126, 229);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 58, 201);
-    else
-      DWIN_Frame_AreaCopy(1, 1, 451, 31, 463, 57, 201);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Print_0, 17, 130);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 1, 405, 28, 420, 58, 201);
-    else
-      DWIN_Frame_AreaCopy(1, 1, 423, 31, 435, 57, 201);
-  }
-}
-
-void ICON_Prepare() {
-  if (select_page.now == 1) {
-    DWIN_ICON_Show(ICON, ICON_Prepare_1, 145, 130);
-    DWIN_Draw_Rectangle(0, Color_White, 145, 130, 254, 229);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 31, 447, 58, 460, 186, 201);
-    else
-      DWIN_Frame_AreaCopy(1, 33, 451, 82, 466, 175, 201);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Prepare_0, 145, 130);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 31, 405, 58, 420, 186, 201);
-    else
-      DWIN_Frame_AreaCopy(1, 33, 423, 82, 438, 175, 201);
-  }
-}
-
-void ICON_Control() {
-  if (select_page.now == 2) {
-    DWIN_ICON_Show(ICON, ICON_Control_1, 17, 246);
-    DWIN_Draw_Rectangle(0, Color_White, 17, 246, 126, 345);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 61, 447, 88, 460, 58, 318);
-    else
-      DWIN_Frame_AreaCopy(1, 85, 451, 132, 463, 48, 318);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Control_0, 17, 246);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 61, 405, 88, 420, 58, 318);
-    else
-      DWIN_Frame_AreaCopy(1, 85, 423, 132, 434, 48, 318);
-  }
-}
-
-void ICON_StartInfo(bool show) {
-  if (show) {
-    DWIN_ICON_Show(ICON, ICON_Info_1, 145, 246);
-    DWIN_Draw_Rectangle(0, Color_White, 145, 246, 254, 345);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 91, 447, 118, 460, 186, 318);
-    else
-      DWIN_Frame_AreaCopy(1, 132, 451, 159, 466, 186, 318);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Info_0, 145, 246);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 91, 405, 118, 420, 186, 318);
-    else
-      DWIN_Frame_AreaCopy(1, 132, 423, 159, 435, 186, 318);
-  }
-}
-
-void ICON_Leveling(bool show) {
-  if (show) {
-    DWIN_ICON_Show(ICON, ICON_Leveling_1, 145, 246);
-    DWIN_Draw_Rectangle(0, Color_White, 145, 246, 254, 345);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 211, 447, 238, 460, 186, 318);
-    else
-      DWIN_Frame_AreaCopy(1, 84, 437, 120,  449, 182, 318);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Leveling_0, 145, 246);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 211, 405, 238, 420, 186, 318);
-    else
-      DWIN_Frame_AreaCopy(1, 84, 465, 120, 478, 182, 318);
-  }
-}
-
-void ICON_Tune() {
-  if (select_print.now == 0) {
-    DWIN_ICON_Show(ICON, ICON_Setup_1, 8, 252);
-    DWIN_Draw_Rectangle(0, Color_White, 8, 252, 87, 351);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 121, 447, 148, 458, 34, 325);
-    else
-      DWIN_Frame_AreaCopy(1,   0, 466,  34, 476, 31, 325);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Setup_0, 8, 252);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 121, 405, 148, 420, 34, 325);
-    else
-      DWIN_Frame_AreaCopy(1,   0, 438,  32, 448, 31, 325);
-  }
-}
-
-void ICON_Pause() {
-  if (select_print.now == 1) {
-    DWIN_ICON_Show(ICON, ICON_Pause_1, 96, 252);
-    DWIN_Draw_Rectangle(0, Color_White, 96, 252, 175, 351);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 181, 447, 208, 459, 124, 325);
-    else
-      DWIN_Frame_AreaCopy(1, 177, 451, 216, 462, 116, 325);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Pause_0, 96, 252);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 181, 405, 208, 420, 124, 325);
-    else
-      DWIN_Frame_AreaCopy(1, 177, 423, 215, 433, 116, 325);
-  }
-}
-
-void ICON_Continue() {
-  if (select_print.now == 1) {
-    DWIN_ICON_Show(ICON, ICON_Continue_1, 96, 252);
-    DWIN_Draw_Rectangle(0, Color_White, 96, 252, 175, 351);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 124, 325);
-    else
-      DWIN_Frame_AreaCopy(1, 1, 452, 32, 464, 121, 325);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Continue_0, 96, 252);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 1, 405, 28, 420, 124, 325);
-    else
-      DWIN_Frame_AreaCopy(1, 1, 424, 31, 434, 121, 325);
-  }
-}
-
-void ICON_Stop() {
-  if (select_print.now == 2) {
-    DWIN_ICON_Show(ICON, ICON_Stop_1, 184, 252);
-    DWIN_Draw_Rectangle(0, Color_White, 184, 252, 263, 351);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 151, 447, 178, 459, 210, 325);
-    else
-      DWIN_Frame_AreaCopy(1, 218, 452, 249, 466, 209, 325);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Stop_0, 184, 252);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 151, 405, 178, 420, 210, 325);
-    else
-      DWIN_Frame_AreaCopy(1, 218, 423, 247, 436, 209, 325);
-  }
-}
-
-void Clear_Title_Bar() {
-  DWIN_Draw_Rectangle(1, Color_Bg_Blue, 0, 0, DWIN_WIDTH, 30);
-}
-
-void Draw_Title(const char * const title) {
-  DWIN_Draw_String(false, false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, (char*)title);
-}
-
-void Draw_Title(const __FlashStringHelper * title) {
-  DWIN_Draw_String(false, false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, (char*)title);
-}
-
-void Clear_Menu_Area() {
-  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 31, DWIN_WIDTH, STATUS_Y - 1);
-}
-
-void Clear_Main_Window() {
-  Clear_Title_Bar();
-  Clear_Menu_Area();
-}
-
-void Clear_Popup_Area() {
-  Clear_Title_Bar();
-  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 31, DWIN_WIDTH, DWIN_HEIGHT);
-}
-
-void Draw_Popup_Bkgd_105() {
-  DWIN_Draw_Rectangle(1, Color_Bg_Window, 14, 105, 258, 374);
-}
-
-void Draw_More_Icon(const uint8_t line) {
-  DWIN_ICON_Show(ICON, ICON_More, 226, MBASE(line) - 3);
-}
-
-void Draw_Menu_Cursor(const uint8_t line) {
-  // DWIN_ICON_Show(ICON,ICON_Rectangle, 0, MBASE(line) - 18);
-  DWIN_Draw_Rectangle(1, Rectangle_Color, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
-}
-
-void Erase_Menu_Cursor(const uint8_t line) {
-  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
-}
-
-void Move_Highlight(const int16_t from, const uint16_t newline) {
-  Erase_Menu_Cursor(newline - from);
-  Draw_Menu_Cursor(newline);
-}
-
-void Add_Menu_Line() {
-  Move_Highlight(1, MROWS);
-  DWIN_Draw_Line(Line_Color, 16, MBASE(MROWS + 1) - 20, 256, MBASE(MROWS + 1) - 19);
-}
-
-void Scroll_Menu(const uint8_t dir) {
-  DWIN_Frame_AreaMove(1, dir, MLINE, Color_Bg_Black, 0, 31, DWIN_WIDTH, 349);
-  switch (dir) {
-    case DWIN_SCROLL_DOWN: Move_Highlight(-1, 0); break;
-    case DWIN_SCROLL_UP:   Add_Menu_Line(); break;
-  }
-}
-
-inline uint16_t nr_sd_menu_items() {
-  return card.get_num_Files() + !card.flag.workDirIsRoot;
-}
-
-void Draw_Menu_Icon(const uint8_t line, const uint8_t icon) {
-  DWIN_ICON_Show(ICON, icon, 26, MBASE(line) - 3);
-}
-
-void Erase_Menu_Text(const uint8_t line) {
-  DWIN_Draw_Rectangle(1, Color_Bg_Black, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
-}
-
-void Draw_Menu_Item(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
-  if (label) DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, (char*)label);
-  if (icon) Draw_Menu_Icon(line, icon);
-  if (more) Draw_More_Icon(line);
-}
-
-void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
-  Draw_Menu_Item(line, icon, label, more);
-  DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
-}
-
-void Draw_Chkb_Line(const uint8_t line, const bool mode) {
-  DWIN_Draw_Checkbox(Color_White, Color_Bg_Black, 225, MBASE(line) - 1, mode);
-}
-
-// The "Back" label is always on the first line
-void Draw_Back_Label() {
-  if (HMI_IsChinese())
-    DWIN_Frame_AreaCopy(1, 129, 72, 156, 84, LBLX, MBASE(0));
-  else
-    DWIN_Frame_AreaCopy(1, 226, 179, 256, 189, LBLX, MBASE(0));
-}
-
-// Draw "Back" line at the top
-void Draw_Back_First(const bool is_sel=true) {
-  Draw_Menu_Line(0, ICON_Back);
-  Draw_Back_Label();
-  if (is_sel) Draw_Menu_Cursor(0);
-}
-
-inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, auto &valref) {
-  if (encoder_diffState == ENCODER_DIFF_CW)
-    valref += EncoderRate.encoderMoveValue;
-  else if (encoder_diffState == ENCODER_DIFF_CCW)
-    valref -= EncoderRate.encoderMoveValue;
-  return encoder_diffState == ENCODER_DIFF_ENTER;
-}
-
-//
-// Draw Menus
-//
-
-#define MOTION_CASE_RATE   1
-#define MOTION_CASE_ACCEL  2
-#define MOTION_CASE_JERK   (MOTION_CASE_ACCEL + ENABLED(HAS_CLASSIC_JERK))
-#define MOTION_CASE_STEPS  (MOTION_CASE_JERK + 1)
-#define MOTION_CASE_TOTAL  MOTION_CASE_STEPS
-
-#define PREPARE_CASE_MOVE  1
-#define PREPARE_CASE_DISA  2
-#define PREPARE_CASE_HOME  3
-#define PREPARE_CASE_ZOFF (PREPARE_CASE_HOME + ENABLED(HAS_ZOFFSET_ITEM))
-#define PREPARE_CASE_PLA  (PREPARE_CASE_ZOFF + ENABLED(HAS_HOTEND))
-#define PREPARE_CASE_ABS  (PREPARE_CASE_PLA + ENABLED(HAS_HOTEND))
-#define PREPARE_CASE_COOL (PREPARE_CASE_ABS + EITHER(HAS_HOTEND, HAS_HEATED_BED))
-#define PREPARE_CASE_LANG (PREPARE_CASE_COOL + 1)
-#define PREPARE_CASE_TOTAL PREPARE_CASE_LANG
-
-#define CONTROL_CASE_TEMP 1
-#define CONTROL_CASE_MOVE  (CONTROL_CASE_TEMP + 1)
-#define CONTROL_CASE_SAVE  (CONTROL_CASE_MOVE + ENABLED(EEPROM_SETTINGS))
-#define CONTROL_CASE_LOAD  (CONTROL_CASE_SAVE + ENABLED(EEPROM_SETTINGS))
-#define CONTROL_CASE_RESET (CONTROL_CASE_LOAD + ENABLED(EEPROM_SETTINGS))
-#define CONTROL_CASE_ADVSET (CONTROL_CASE_RESET + 1)
-#define CONTROL_CASE_INFO  (CONTROL_CASE_ADVSET + 1)
-#define CONTROL_CASE_TOTAL CONTROL_CASE_INFO
-
-#define TUNE_CASE_SPEED 1
-#define TUNE_CASE_TEMP (TUNE_CASE_SPEED + ENABLED(HAS_HOTEND))
-#define TUNE_CASE_BED  (TUNE_CASE_TEMP + ENABLED(HAS_HEATED_BED))
-#define TUNE_CASE_FAN  (TUNE_CASE_BED + ENABLED(HAS_FAN))
-#define TUNE_CASE_ZOFF (TUNE_CASE_FAN + ENABLED(HAS_ZOFFSET_ITEM))
-#define TUNE_CASE_TOTAL TUNE_CASE_ZOFF
-
-#define TEMP_CASE_TEMP (0 + ENABLED(HAS_HOTEND))
-#define TEMP_CASE_BED  (TEMP_CASE_TEMP + ENABLED(HAS_HEATED_BED))
-#define TEMP_CASE_FAN  (TEMP_CASE_BED + ENABLED(HAS_FAN))
-#define TEMP_CASE_PLA  (TEMP_CASE_FAN + ENABLED(HAS_HOTEND))
-#define TEMP_CASE_ABS  (TEMP_CASE_PLA + ENABLED(HAS_HOTEND))
-#define TEMP_CASE_TOTAL TEMP_CASE_ABS
-
-#define PREHEAT_CASE_TEMP (0 + ENABLED(HAS_HOTEND))
-#define PREHEAT_CASE_BED  (PREHEAT_CASE_TEMP + ENABLED(HAS_HEATED_BED))
-#define PREHEAT_CASE_FAN  (PREHEAT_CASE_BED + ENABLED(HAS_FAN))
-#define PREHEAT_CASE_SAVE (PREHEAT_CASE_FAN + ENABLED(EEPROM_SETTINGS))
-#define PREHEAT_CASE_TOTAL PREHEAT_CASE_SAVE
-
-#define ADVSET_CASE_HOMEOFF   1
-#define ADVSET_CASE_PROBEOFF  (ADVSET_CASE_HOMEOFF + ENABLED(HAS_ONESTEP_LEVELING))
-#define ADVSET_CASE_HEPID     (ADVSET_CASE_PROBEOFF + ENABLED(HAS_HOTEND))
-#define ADVSET_CASE_BEDPID    (ADVSET_CASE_HEPID + ENABLED(HAS_HEATED_BED))
-#define ADVSET_CASE_PWRLOSSR  (ADVSET_CASE_BEDPID + ENABLED(POWER_LOSS_RECOVERY))
-#define ADVSET_CASE_TOTAL     ADVSET_CASE_PWRLOSSR
-
-//
-// Draw Menus
-//
-
-void DWIN_Draw_Label(const uint16_t y, char *string) {
-  DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, y, string);
-}
-void DWIN_Draw_Label(const uint16_t y, const __FlashStringHelper *title) {
-  DWIN_Draw_Label(y, (char*)title);
-}
-
-void draw_move_en(const uint16_t line) {
-  #ifdef USE_STRING_TITLES
-    DWIN_Draw_Label(line, F("Move"));
-  #else
-    DWIN_Frame_AreaCopy(1, 69, 61, 102, 71, LBLX, line); // "Move"
-  #endif
-}
-
-void DWIN_Frame_TitleCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) { DWIN_Frame_AreaCopy(id, x1, y1, x2, y2, 14, 8); }
-
-void Item_Prepare_Move(const uint8_t row) {
-  if (HMI_IsChinese())
-    DWIN_Frame_AreaCopy(1, 159, 70, 200, 84, LBLX, MBASE(row));
-  else
-    draw_move_en(MBASE(row)); // "Move"
-  Draw_Menu_Line(row, ICON_Axis);
-  Draw_More_Icon(row);
-}
-
-void Item_Prepare_Disable(const uint8_t row) {
-  if (HMI_IsChinese())
-    DWIN_Frame_AreaCopy(1, 204, 70, 259, 82, LBLX, MBASE(row));
-  else {
-    #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_DISABLE_STEPPERS));
-    #else
-      DWIN_Frame_AreaCopy(1, 103, 59, 200, 74, LBLX, MBASE(row)); // "Disable Stepper"
-    #endif
-  }
-  Draw_Menu_Line(row, ICON_CloseMotor);
-}
-
-void Item_Prepare_Home(const uint8_t row) {
-  if (HMI_IsChinese())
-    DWIN_Frame_AreaCopy(1, 0, 89, 41, 101, LBLX, MBASE(row));
-  else {
-    #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_AUTO_HOME));
-    #else
-      DWIN_Frame_AreaCopy(1, 202, 61, 271, 71, LBLX, MBASE(row)); // "Auto Home"
-    #endif
-  }
-  Draw_Menu_Line(row, ICON_Homing);
-}
-
-#if HAS_ZOFFSET_ITEM
-
-  void Item_Prepare_Offset(const uint8_t row) {
-    if (HMI_IsChinese()) {
-      #if HAS_BED_PROBE
-        DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(row));
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
-      #else
-        DWIN_Frame_AreaCopy(1, 43, 89, 98, 101, LBLX, MBASE(row));
-      #endif
-    }
-    else {
-      #if HAS_BED_PROBE
-        #ifdef USE_STRING_TITLES
-          DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
-        #else
-          DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(row));    // "Z-Offset"
-        #endif
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
-      #else
-        #ifdef USE_STRING_TITLES
-          DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_SET_HOME_OFFSETS));
-        #else
-          DWIN_Frame_AreaCopy(1, 1, 76, 106, 86, LBLX, MBASE(row));       // "Set home offsets"
-        #endif
-      #endif
-    }
-    Draw_Menu_Line(row, ICON_SetHome);
-  }
-
-#endif
-
-#if HAS_HOTEND
-  void Item_Prepare_PLA(const uint8_t row) {
-    if (HMI_IsChinese()) {
-      DWIN_Frame_AreaCopy(1, 100, 89, 151, 101, LBLX, MBASE(row));
-    }
-    else {
-      #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(MBASE(row), F("Preheat " PREHEAT_1_LABEL));
-      #else
-        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
-        DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(row));  // "PLA"
-      #endif
-    }
-    Draw_Menu_Line(row, ICON_PLAPreheat);
-  }
-
-  void Item_Prepare_ABS(const uint8_t row) {
-    if (HMI_IsChinese()) {
-      DWIN_Frame_AreaCopy(1, 180, 89, 233, 100, LBLX, MBASE(row));
-    }
-    else {
-      #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(MBASE(row), F("Preheat " PREHEAT_2_LABEL));
-      #else
-        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
-        DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(row));  // "ABS"
-      #endif
-    }
-    Draw_Menu_Line(row, ICON_ABSPreheat);
-  }
-#endif
-
-#if HAS_PREHEAT
-  void Item_Prepare_Cool(const uint8_t row) {
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1,   1, 104,  56, 117, LBLX, MBASE(row));
-    else {
-      #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_COOLDOWN));
-      #else
-        DWIN_Frame_AreaCopy(1, 200,  76, 264,  86, LBLX, MBASE(row));      // "Cooldown"
-      #endif
-    }
-    Draw_Menu_Line(row, ICON_Cool);
-  }
-#endif
-
-void Item_Prepare_Lang(const uint8_t row) {
-  if (HMI_IsChinese())
-    DWIN_Frame_AreaCopy(1, 239, 134, 266, 146, LBLX, MBASE(row));
-  else {
-    #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(row), F("UI Language"));
-    #else
-      DWIN_Frame_AreaCopy(1, 0, 194, 121, 207, LBLX, MBASE(row)); // "Language selection"
-    #endif
-  }
-  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, 226, MBASE(row), HMI_IsChinese() ? F("CN") : F("EN"));
-  Draw_Menu_Icon(row, ICON_Language);
-}
-
-void Draw_Prepare_Menu() {
-  Clear_Main_Window();
-
-  const int16_t scroll = MROWS - index_prepare; // Scrolled-up lines
-  #define PSCROL(L) (scroll + (L))
-  #define PVISI(L)  WITHIN(PSCROL(L), 0, MROWS)
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 133, 1, 160, 13);   // "Prepare"
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_PREPARE));
-    #else
-      DWIN_Frame_TitleCopy(1, 178, 2, 229, 14); // "Prepare"
-    #endif
-  }
-
-  if (PVISI(0)) Draw_Back_First(select_prepare.now == 0);                         // < Back
-  if (PVISI(PREPARE_CASE_MOVE)) Item_Prepare_Move(PSCROL(PREPARE_CASE_MOVE));     // Move >
-  if (PVISI(PREPARE_CASE_DISA)) Item_Prepare_Disable(PSCROL(PREPARE_CASE_DISA));  // Disable Stepper
-  if (PVISI(PREPARE_CASE_HOME)) Item_Prepare_Home(PSCROL(PREPARE_CASE_HOME));     // Auto Home
-  #if HAS_ZOFFSET_ITEM
-    if (PVISI(PREPARE_CASE_ZOFF)) Item_Prepare_Offset(PSCROL(PREPARE_CASE_ZOFF)); // Edit Z-Offset / Babystep / Set Home Offset
-  #endif
-  #if HAS_HOTEND
-    if (PVISI(PREPARE_CASE_PLA)) Item_Prepare_PLA(PSCROL(PREPARE_CASE_PLA));      // Preheat PLA
-    if (PVISI(PREPARE_CASE_ABS)) Item_Prepare_ABS(PSCROL(PREPARE_CASE_ABS));      // Preheat ABS
-  #endif
-  #if HAS_PREHEAT
-    if (PVISI(PREPARE_CASE_COOL)) Item_Prepare_Cool(PSCROL(PREPARE_CASE_COOL));   // Cooldown
-  #endif
-  if (PVISI(PREPARE_CASE_LANG)) Item_Prepare_Lang(PSCROL(PREPARE_CASE_LANG));     // Language CN/EN
-
-  if (select_prepare.now) Draw_Menu_Cursor(PSCROL(select_prepare.now));
-}
-
-void Item_Control_Info(const uint16_t line) {
-  if (HMI_IsChinese())
-    DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, line);
-  else {
-    #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(line, F("Info"));
-    #else
-      DWIN_Frame_AreaCopy(1, 0, 104, 24, 114, LBLX, line);
-    #endif
-  }
-}
-
-void Draw_Control_Menu() {
-  Clear_Main_Window();
-
-  #if CONTROL_CASE_TOTAL >= 6
-    const int16_t scroll = MROWS - index_control; // Scrolled-up lines
-    #define CSCROL(L) (scroll + (L))
-  #else
-    #define CSCROL(L) (L)
-  #endif
-  #define CLINE(L)  MBASE(CSCROL(L))
-  #define CVISI(L)  WITHIN(CSCROL(L), 0, MROWS)
-
-  if (CVISI(0)) Draw_Back_First(select_control.now == 0);                         // < Back
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 103, 1, 130, 14);                                     // "Control"
-
-    DWIN_Frame_AreaCopy(1,  57, 104,  84, 116, LBLX, CLINE(CONTROL_CASE_TEMP));   // Temperature >
-    DWIN_Frame_AreaCopy(1,  87, 104, 114, 116, LBLX, CLINE(CONTROL_CASE_MOVE));   // Motion >
-
-    #if ENABLED(EEPROM_SETTINGS)
-      DWIN_Frame_AreaCopy(1, 117, 104, 172, 116, LBLX, CLINE(CONTROL_CASE_SAVE));   // Store Configuration
-      DWIN_Frame_AreaCopy(1, 174, 103, 229, 116, LBLX, CLINE(CONTROL_CASE_LOAD));   // Read Configuration
-      DWIN_Frame_AreaCopy(1,   1, 118,  56, 131, LBLX, CLINE(CONTROL_CASE_RESET));  // Reset Configuration
-    #endif
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_CONTROL));
-    #else
-      DWIN_Frame_TitleCopy(1, 128, 2, 176, 12);                                         // "Control"
-    #endif
-    #ifdef USE_STRING_TITLES
-      if (CVISI(CONTROL_CASE_TEMP)) DWIN_Draw_Label(CLINE(CONTROL_CASE_TEMP), GET_TEXT_F(MSG_TEMPERATURE));
-      if (CVISI(CONTROL_CASE_MOVE)) DWIN_Draw_Label(CLINE(CONTROL_CASE_MOVE), GET_TEXT_F(MSG_MOTION));
-      #if ENABLED(EEPROM_SETTINGS)
-        if (CVISI(CONTROL_CASE_SAVE)) DWIN_Draw_Label(CLINE(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
-        if (CVISI(CONTROL_CASE_LOAD)) DWIN_Draw_Label(CLINE(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));
-        if (CVISI(CONTROL_CASE_RESET)) DWIN_Draw_Label(CLINE(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
-      #endif
-    #else
-      if (CVISI(CONTROL_CASE_TEMP)) DWIN_Frame_AreaCopy(1,  1, 89,  83, 101, LBLX, CLINE(CONTROL_CASE_TEMP));           // Temperature >
-      if (CVISI(CONTROL_CASE_MOVE)) DWIN_Frame_AreaCopy(1, 84, 89, 128,  99, LBLX, CLINE(CONTROL_CASE_MOVE));           // Motion >
-      #if ENABLED(EEPROM_SETTINGS)
-        if (CVISI(CONTROL_CASE_SAVE)) DWIN_Frame_AreaCopy(1, 148,  89, 268, 101, LBLX     , CLINE(CONTROL_CASE_SAVE));  // "Store Configuration"
-        if (CVISI(CONTROL_CASE_LOAD)) {
-          DWIN_Frame_AreaCopy(1,  26, 104,  57, 114, LBLX     , CLINE(CONTROL_CASE_LOAD));  // "Read"
-          DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 34, CLINE(CONTROL_CASE_LOAD));  // "Configuration"
-        }
-        if (CVISI(CONTROL_CASE_RESET)) {
-          DWIN_Frame_AreaCopy(1,  59, 104,  93, 114, LBLX     , CLINE(CONTROL_CASE_RESET)); // "Reset"
-          DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 37, CLINE(CONTROL_CASE_RESET)); // "Configuration"
-        }
-      #endif
-    #endif
-  }
-
-  if (CVISI(CONTROL_CASE_ADVSET)) {
-    DWIN_Draw_Label(CLINE(CONTROL_CASE_ADVSET), GET_TEXT_F(MSG_ADVANCED_SETTINGS));  // Advanced Settings
-  }
-
-  if (CVISI(CONTROL_CASE_INFO)) Item_Control_Info(CLINE(CONTROL_CASE_INFO));
-
-  if (select_control.now && CVISI(select_control.now))
-    Draw_Menu_Cursor(CSCROL(select_control.now));
-
-  // Draw icons and lines
-  #define _TEMP_ICON(N, I, M) do { \
-    if (CVISI(N)) { \
-      Draw_Menu_Line(CSCROL(N), I); \
-      if (M) { \
-        Draw_More_Icon(CSCROL(N)); \
-      } \
-    } \
-  } while(0)
-
-  _TEMP_ICON(CONTROL_CASE_TEMP, ICON_Temperature, true);
-  _TEMP_ICON(CONTROL_CASE_MOVE, ICON_Motion, true);
-
-  #if ENABLED(EEPROM_SETTINGS)
-    _TEMP_ICON(CONTROL_CASE_SAVE, ICON_WriteEEPROM, false);
-    _TEMP_ICON(CONTROL_CASE_LOAD, ICON_ReadEEPROM, false);
-    _TEMP_ICON(CONTROL_CASE_RESET, ICON_ResumeEEPROM, false);
-  #endif
-
-  _TEMP_ICON(CONTROL_CASE_ADVSET, ICON_AdvSet, true);
-  _TEMP_ICON(CONTROL_CASE_INFO, ICON_Info, true);
-}
-
-void Draw_Tune_Menu() {
-  Clear_Main_Window();
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_AreaCopy(1, 73, 2, 100, 13, 14, 9);
-    DWIN_Frame_AreaCopy(1, 116, 164, 171, 176, LBLX, MBASE(TUNE_CASE_SPEED));
-    #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(TUNE_CASE_TEMP));
-    #endif
-    #if HAS_HEATED_BED
-      DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX, MBASE(TUNE_CASE_BED));
-    #endif
-    #if HAS_FAN
-      DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX, MBASE(TUNE_CASE_FAN));
-    #endif
-    #if HAS_ZOFFSET_ITEM
-      DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(TUNE_CASE_ZOFF));
-    #endif
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_TUNE));
-    #else
-      DWIN_Frame_AreaCopy(1, 94, 2, 126, 12, 14, 9);
-    #endif
-    #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(TUNE_CASE_SPEED), GET_TEXT_F(MSG_SPEED));
-      #if HAS_HOTEND
-        DWIN_Draw_Label(MBASE(TUNE_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
-      #endif
-      #if HAS_HEATED_BED
-        DWIN_Draw_Label(MBASE(TUNE_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
-      #endif
-      #if HAS_FAN
-        DWIN_Draw_Label(MBASE(TUNE_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
-      #endif
-      DWIN_Draw_Label(MBASE(TUNE_CASE_ZOFF), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
-    #else
-      DWIN_Frame_AreaCopy(1, 1, 179, 92, 190, LBLX, MBASE(TUNE_CASE_SPEED));      // Print speed
-      #if HAS_HOTEND
-        DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(TUNE_CASE_TEMP));  // Hotend...
-        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(TUNE_CASE_TEMP)); // ...Temperature
-      #endif
-      #if HAS_HEATED_BED
-        DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX, MBASE(TUNE_CASE_BED));   // Bed...
-        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 27, MBASE(TUNE_CASE_BED));  // ...Temperature
-      #endif
-      #if HAS_FAN
-        DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX, MBASE(TUNE_CASE_FAN));      // Fan speed
-      #endif
-      #if HAS_ZOFFSET_ITEM
-        DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(TUNE_CASE_ZOFF));   // Z-offset
-      #endif
-    #endif
-  }
-
-  Draw_Back_First(select_tune.now == 0);
-  if (select_tune.now) Draw_Menu_Cursor(select_tune.now);
-
-  Draw_Menu_Line(TUNE_CASE_SPEED, ICON_Speed);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_SPEED), feedrate_percentage);
-
-  #if HAS_HOTEND
-    Draw_Menu_Line(TUNE_CASE_TEMP, ICON_HotendTemp);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP), thermalManager.degTargetHotend(0));
-  #endif
-  #if HAS_HEATED_BED
-    Draw_Menu_Line(TUNE_CASE_BED, ICON_BedTemp);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED), thermalManager.degTargetBed());
-  #endif
-  #if HAS_FAN
-    Draw_Menu_Line(TUNE_CASE_FAN, ICON_FanSpeed);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_FAN), thermalManager.fan_speed[0]);
-  #endif
-  #if HAS_ZOFFSET_ITEM
-    Draw_Menu_Line(TUNE_CASE_ZOFF, ICON_Zoffset);
-    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(TUNE_CASE_ZOFF), BABY_Z_VAR * 100);
-  #endif
-}
-
-void draw_max_en(const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 245, 119, 269, 129, LBLX, line);   // "Max"
-}
-void draw_max_accel_en(const uint16_t line) {
-  draw_max_en(line);
-  DWIN_Frame_AreaCopy(1, 1, 135, 79, 145, LBLX + 27, line); // "Acceleration"
-}
-void draw_speed_en(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 184, 119, 224, 132, LBLX + inset, line); // "Speed"
-}
-void draw_jerk_en(const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 64, 119, 106, 129, LBLX + 27, line); // "Jerk"
-}
-void draw_steps_per_mm(const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 1, 151, 101, 161, LBLX, line);   // "Steps-per-mm"
-}
-void say_x(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 95, 104, 102, 114, LBLX + inset, line); // "X"
-}
-void say_y(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 104, 104, 110, 114, LBLX + inset, line); // "Y"
-}
-void say_z(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 112, 104, 120, 114, LBLX + inset, line); // "Z"
-}
-void say_e(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 237, 119, 244, 129, LBLX + inset, line); // "E"
-}
-
-void Draw_Motion_Menu() {
-  Clear_Main_Window();
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28);                                     // "Motion"
-    DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, MBASE(MOTION_CASE_RATE));  // Max speed
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(MOTION_CASE_ACCEL));        // Max...
-    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(MOTION_CASE_ACCEL) + 1); // ...Acceleration
-    #if HAS_CLASSIC_JERK
-      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(MOTION_CASE_JERK));        // Max...
-      DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(MOTION_CASE_JERK) + 1);  // ...
-      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 54, MBASE(MOTION_CASE_JERK));   // ...Jerk
-    #endif
-    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(MOTION_CASE_STEPS));         // Flow ratio
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_MOTION));
-    #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);                                        // "Motion"
-    #endif
-    #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(MOTION_CASE_RATE), F("Feedrate"));
-      DWIN_Draw_Label(MBASE(MOTION_CASE_ACCEL), GET_TEXT_F(MSG_ACCELERATION));
-      #if HAS_CLASSIC_JERK
-        DWIN_Draw_Label(MBASE(MOTION_CASE_JERK), GET_TEXT_F(MSG_JERK));
-      #endif
-      DWIN_Draw_Label(MBASE(MOTION_CASE_STEPS), GET_TEXT_F(MSG_STEPS_PER_MM));
-    #else
-      draw_max_en(MBASE(MOTION_CASE_RATE)); draw_speed_en(27, MBASE(MOTION_CASE_RATE)); // "Max Speed"
-      draw_max_accel_en(MBASE(MOTION_CASE_ACCEL));                                      // "Max Acceleration"
-      #if HAS_CLASSIC_JERK
-        draw_max_en(MBASE(MOTION_CASE_JERK)); draw_jerk_en(MBASE(MOTION_CASE_JERK));    // "Max Jerk"
-      #endif
-      draw_steps_per_mm(MBASE(MOTION_CASE_STEPS));                                      // "Steps-per-mm"
-    #endif
-  }
-
-  Draw_Back_First(select_motion.now == 0);
-  if (select_motion.now) Draw_Menu_Cursor(select_motion.now);
-
-  uint8_t i = 0;
-  #define _MOTION_ICON(N) Draw_Menu_Line(++i, ICON_MaxSpeed + (N) - 1)
-  _MOTION_ICON(MOTION_CASE_RATE); Draw_More_Icon(i);
-  _MOTION_ICON(MOTION_CASE_ACCEL); Draw_More_Icon(i);
-  #if HAS_CLASSIC_JERK
-    _MOTION_ICON(MOTION_CASE_JERK); Draw_More_Icon(i);
-  #endif
-  _MOTION_ICON(MOTION_CASE_STEPS); Draw_More_Icon(i);
-}
-
-//
-// Draw Popup Windows
-//
-#if HAS_HOTEND || HAS_HEATED_BED
-
-  void DWIN_Popup_Temperature(const bool toohigh) {
-    Clear_Popup_Area();
-    Draw_Popup_Bkgd_105();
-    if (toohigh) {
-      DWIN_ICON_Show(ICON, ICON_TempTooHigh, 102, 165);
-      if (HMI_IsChinese()) {
-        DWIN_Frame_AreaCopy(1, 103, 371, 237, 386, 52, 285);
-        DWIN_Frame_AreaCopy(1, 151, 389, 185, 402, 187, 285);
-        DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
-      }
-      else {
-        DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
-        DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, 92, 300, F("is too high"));
-      }
-    }
-    else {
-      DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 165);
-      if (HMI_IsChinese()) {
-        DWIN_Frame_AreaCopy(1, 103, 371, 270, 386, 52, 285);
-        DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
-      }
-      else {
-        DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
-        DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, 92, 300, F("is too low"));
-      }
-    }
-  }
-
-#endif
-
-void Draw_Popup_Bkgd_60() {
-  DWIN_Draw_Rectangle(1, Color_Bg_Window, 14, 60, 258, 330);
-}
-
-#if HAS_HOTEND
-
-  void Popup_Window_ETempTooLow() {
-    Clear_Main_Window();
-    Draw_Popup_Bkgd_60();
-    DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 105);
-    if (HMI_IsChinese()) {
-      DWIN_Frame_AreaCopy(1, 103, 371, 136, 386, 69, 240);
-      DWIN_Frame_AreaCopy(1, 170, 371, 270, 386, 102, 240);
-      DWIN_ICON_Show(ICON, ICON_Confirm_C, 86, 280);
-    }
-    else {
-      DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, 20, 235, F("Nozzle is too cold"));
-      DWIN_ICON_Show(ICON, ICON_Confirm_E, 86, 280);
-    }
-  }
-
-#endif
-
-void Popup_Window_Resume() {
-  Clear_Popup_Area();
-  Draw_Popup_Bkgd_105();
-  if (HMI_IsChinese()) {
-    DWIN_Frame_AreaCopy(1, 160, 338, 235, 354, 98, 135);
-    DWIN_Frame_AreaCopy(1, 103, 321, 271, 335, 52, 192);
-    DWIN_ICON_Show(ICON, ICON_Cancel_C,    26, 307);
-    DWIN_ICON_Show(ICON, ICON_Continue_C, 146, 307);
-  }
-  else {
-    DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 14) / 2, 115, F("Continue Print"));
-    DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 192, F("It looks like the last"));
-    DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 212, F("file was interrupted."));
-    DWIN_ICON_Show(ICON, ICON_Cancel_E,    26, 307);
-    DWIN_ICON_Show(ICON, ICON_Continue_E, 146, 307);
-  }
-}
-
-void Popup_Window_Home(const bool parking/*=false*/) {
-  Clear_Main_Window();
-  Draw_Popup_Bkgd_60();
-  DWIN_ICON_Show(ICON, ICON_BLTouch, 101, 105);
-  if (HMI_IsChinese()) {
-    DWIN_Frame_AreaCopy(1, 0, 371, 33, 386, 85, 240);
-    DWIN_Frame_AreaCopy(1, 203, 286, 271, 302, 118, 240);
-    DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
-  }
-  else {
-    DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * (parking ? 7 : 10)) / 2, 230, parking ? F("Parking") : F("Homing XYZ"));
-    DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
-  }
-}
-
-#if HAS_ONESTEP_LEVELING
-
-  void Popup_Window_Leveling() {
-    Clear_Main_Window();
-    Draw_Popup_Bkgd_60();
-    DWIN_ICON_Show(ICON, ICON_AutoLeveling, 101, 105);
-    if (HMI_IsChinese()) {
-      DWIN_Frame_AreaCopy(1, 0, 371, 100, 386, 84, 240);
-      DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
-    }
-    else {
-      DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 13) / 2, 230, GET_TEXT_F(MSG_BED_LEVELING));
-      DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
-    }
-  }
-
-#endif
-
-void Draw_Select_Highlight(const bool sel) {
-  HMI_flag.select_flag = sel;
-  const uint16_t c1 = sel ? Select_Color : Color_Bg_Window,
-                 c2 = sel ? Color_Bg_Window : Select_Color;
-  DWIN_Draw_Rectangle(0, c1, 25, 279, 126, 318);
-  DWIN_Draw_Rectangle(0, c1, 24, 278, 127, 319);
-  DWIN_Draw_Rectangle(0, c2, 145, 279, 246, 318);
-  DWIN_Draw_Rectangle(0, c2, 144, 278, 247, 319);
-}
-
-void Popup_window_PauseOrStop() {
-  Clear_Main_Window();
-  Draw_Popup_Bkgd_60();
-  if (HMI_IsChinese()) {
-         if (select_print.now == 1) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);
-    else if (select_print.now == 2) DWIN_Frame_AreaCopy(1, 221, 320, 253, 336, 98, 150);
-    DWIN_Frame_AreaCopy(1, 220, 304, 264, 319, 130, 150);
-    DWIN_ICON_Show(ICON, ICON_Confirm_C, 26, 280);
-    DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 280);
-  }
-  else {
-         if (select_print.now == 1) DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 11) / 2, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
-    else if (select_print.now == 2) DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 10) / 2, 150, GET_TEXT_F(MSG_STOP_PRINT));
-    DWIN_ICON_Show(ICON, ICON_Confirm_E, 26, 280);
-    DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 280);
-  }
-  Draw_Select_Highlight(true);
-}
-
-void Draw_Printing_Screen() {
-  if (HMI_IsChinese()) {
-    DWIN_Frame_AreaCopy(1, 30,  1,  71, 14,  14,   9);  // Tune
-    DWIN_Frame_AreaCopy(1,  0, 72,  63, 86,  41, 188);  // Pause
-    DWIN_Frame_AreaCopy(1, 65, 72, 128, 86, 176, 188);  // Stop
-  }
-  else {
-    DWIN_Frame_AreaCopy(1, 40,  2,  92, 14,  14,   9);  // Tune
-    DWIN_Frame_AreaCopy(1,  0, 44,  96, 58,  41, 188);  // Pause
-    DWIN_Frame_AreaCopy(1, 98, 44, 152, 58, 176, 188);  // Stop
-  }
-}
-
-void Draw_Print_ProgressBar() {
-  DWIN_ICON_Show(ICON, ICON_Bar, 15, 93);
-  DWIN_Draw_Rectangle(1, BarFill_Color, 16 + _card_percent * 240 / 100, 93, 256, 113);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Percent_Color, Color_Bg_Black, 2, 117, 133, _card_percent);
-  DWIN_Draw_String(false, false, font8x16, Percent_Color, Color_Bg_Black, 133, 133, F("%"));
-}
-
-void Draw_Print_ProgressElapsed() {
-  duration_t elapsed = print_job_timer.duration(); // print timer
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 42, 212, elapsed.value / 3600);
-  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, 58, 212, F(":"));
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 66, 212, (elapsed.value % 3600) / 60);
-}
-
-void Draw_Print_ProgressRemain() {
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 176, 212, _remain_time / 3600);
-  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, 192, 212, F(":"));
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 200, 212, (_remain_time % 3600) / 60);
-}
-
-void Goto_PrintProcess() {
-  checkkey = PrintProcess;
-
-  Clear_Main_Window();
-  Draw_Printing_Screen();
-
-  ICON_Tune();
-  if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
-  ICON_Stop();
-
-  // Copy into filebuf string before entry
-  char * const name = card.longest_filename();
-  const int8_t npos = _MAX(0U, DWIN_WIDTH - strlen(name) * MENU_CHR_W) / 2;
-  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, npos, 60, name);
-
-  DWIN_ICON_Show(ICON, ICON_PrintTime, 17, 193);
-  DWIN_ICON_Show(ICON, ICON_RemainTime, 150, 191);
-
-  Draw_Print_ProgressBar();
-  Draw_Print_ProgressElapsed();
-  Draw_Print_ProgressRemain();
-}
-
-void Goto_MainMenu() {
-  checkkey = MainMenu;
-
-  Clear_Main_Window();
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_AreaCopy(1, 2, 2, 27, 14, 14, 9); // "Home"
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_MAIN));
-    #else
-      DWIN_Frame_AreaCopy(1, 0, 2, 39, 12, 14, 9);
-    #endif
-  }
-
-  DWIN_ICON_Show(ICON, ICON_LOGO, 71, 52);
-
-  ICON_Print();
-  ICON_Prepare();
-  ICON_Control();
-  TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(select_page.now == 3);
-}
-
-inline ENCODER_DiffState get_encoder_state() {
-  static millis_t Encoder_ms = 0;
-  const millis_t ms = millis();
-  if (PENDING(ms, Encoder_ms)) return ENCODER_DIFF_NO;
-  const ENCODER_DiffState state = Encoder_ReceiveAnalyze();
-  if (state != ENCODER_DIFF_NO) Encoder_ms = ms + ENCODER_WAIT_MS;
-  return state;
-}
-
-void HMI_Plan_Move(const feedRate_t fr_mm_s) {
-  if (!planner.is_full()) {
-    planner.synchronize();
-    planner.buffer_line(current_position, fr_mm_s);
-    DWIN_UpdateLCD();
-  }
-}
-
-void HMI_Move_Done(const AxisEnum axis) {
-  EncoderRate.enabled = false;
-  planner.synchronize();
-  checkkey = AxisMove;
-  DWIN_UpdateLCD();
-}
-
-void HMI_Move_X() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scaled))
-      return HMI_Move_Done(X_AXIS);
-    LIMIT(HMI_ValueStruct.Move_X_scaled, (X_MIN_POS) * MINUNITMULT, (X_MAX_POS) * MINUNITMULT);
-    current_position.x = HMI_ValueStruct.Move_X_scaled / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
-    DWIN_UpdateLCD();
-    HMI_Plan_Move(homing_feedrate(X_AXIS));
-  }
-}
-
-void HMI_Move_Y() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scaled))
-      return HMI_Move_Done(Y_AXIS);
-    LIMIT(HMI_ValueStruct.Move_Y_scaled, (Y_MIN_POS) * MINUNITMULT, (Y_MAX_POS) * MINUNITMULT);
-    current_position.y = HMI_ValueStruct.Move_Y_scaled / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
-    DWIN_UpdateLCD();
-    HMI_Plan_Move(homing_feedrate(Y_AXIS));
-  }
-}
-
-void HMI_Move_Z() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scaled))
-      return HMI_Move_Done(Z_AXIS);
-    LIMIT(HMI_ValueStruct.Move_Z_scaled, (Z_MIN_POS) * MINUNITMULT, (Z_MAX_POS) * MINUNITMULT);
-    current_position.z = HMI_ValueStruct.Move_Z_scaled / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
-    DWIN_UpdateLCD();
-    HMI_Plan_Move(homing_feedrate(Z_AXIS));
-  }
-}
-
-#if HAS_HOTEND
-
-  void HMI_Move_E() {
-    static float last_E_scaled = 0;
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_E_scaled)) {
-        last_E_scaled = HMI_ValueStruct.Move_E_scaled;
-        return HMI_Move_Done(E_AXIS);
-      }
-      LIMIT(HMI_ValueStruct.Move_E_scaled, last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT, last_E_scaled + (EXTRUDE_MAXLENGTH) * MINUNITMULT);
-      current_position.e = HMI_ValueStruct.Move_E_scaled / MINUNITMULT;
-      DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
-      DWIN_UpdateLCD();
-      HMI_Plan_Move(MMM_TO_MMS(FEEDRATE_E));
-    }
-  }
-
-#endif
-
-#if HAS_ZOFFSET_ITEM
-
-  bool printer_busy() { return planner.movesplanned() || printingIsActive(); }
-
-  void HMI_Zoffset() {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      uint8_t zoff_line;
-      switch (HMI_ValueStruct.show_mode) {
-        case -4: zoff_line = PREPARE_CASE_ZOFF + MROWS - index_prepare; break;
-        default: zoff_line = TUNE_CASE_ZOFF + MROWS - index_tune;
-      }
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.offset_value)) {
-        EncoderRate.enabled = false;
-        #if HAS_BED_PROBE
-          probe.offset.z = dwin_zoffset;
-          TERN_(EEPROM_SETTINGS, settings.save());
-        #endif
-        checkkey = HMI_ValueStruct.show_mode == -4 ? Prepare : Tune;
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
-        DWIN_UpdateLCD();
-        return;
-      }
-      LIMIT(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
-      last_zoffset = dwin_zoffset;
-      dwin_zoffset = HMI_ValueStruct.offset_value / 100.0f;
-      #if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
-        if (BABYSTEP_ALLOWED()) babystep.add_mm(Z_AXIS, dwin_zoffset - last_zoffset);
-      #endif
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(zoff_line), HMI_ValueStruct.offset_value);
-      DWIN_UpdateLCD();
-    }
-  }
-
-#endif // HAS_ZOFFSET_ITEM
-
-#if HAS_HOTEND
-
-  void HMI_ETemp() {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      uint8_t temp_line;
-      switch (HMI_ValueStruct.show_mode) {
-        case -1: temp_line = TEMP_CASE_TEMP; break;
-        case -2: temp_line = PREHEAT_CASE_TEMP; break;
-        case -3: temp_line = PREHEAT_CASE_TEMP; break;
-        default: temp_line = TUNE_CASE_TEMP + MROWS - index_tune;
-      }
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.E_Temp)) {
-        EncoderRate.enabled = false;
-        if (HMI_ValueStruct.show_mode == -2) {
-          checkkey = PLAPreheat;
-          ui.material_preset[0].hotend_temp = HMI_ValueStruct.E_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), ui.material_preset[0].hotend_temp);
-          return;
-        }
-        else if (HMI_ValueStruct.show_mode == -3) {
-          checkkey = ABSPreheat;
-          ui.material_preset[1].hotend_temp = HMI_ValueStruct.E_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), ui.material_preset[1].hotend_temp);
-          return;
-        }
-        else if (HMI_ValueStruct.show_mode == -1) // Temperature
-          checkkey = TemperatureID;
-        else
-          checkkey = Tune;
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
-        thermalManager.setTargetHotend(HMI_ValueStruct.E_Temp, 0);
-        return;
-      }
-      // E_Temp limit
-      LIMIT(HMI_ValueStruct.E_Temp, HEATER_0_MINTEMP, thermalManager.hotend_max_target(0));
-      // E_Temp value
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
-    }
-  }
-
-#endif // HAS_HOTEND
-
-#if HAS_HEATED_BED
-
-  void HMI_BedTemp() {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      uint8_t bed_line;
-      switch (HMI_ValueStruct.show_mode) {
-        case -1: bed_line = TEMP_CASE_BED; break;
-        case -2: bed_line = PREHEAT_CASE_BED; break;
-        case -3: bed_line = PREHEAT_CASE_BED; break;
-        default: bed_line = TUNE_CASE_BED + MROWS - index_tune;
-      }
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Bed_Temp)) {
-        EncoderRate.enabled = false;
-        if (HMI_ValueStruct.show_mode == -2) {
-          checkkey = PLAPreheat;
-          ui.material_preset[0].bed_temp = HMI_ValueStruct.Bed_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), ui.material_preset[0].bed_temp);
-          return;
-        }
-        else if (HMI_ValueStruct.show_mode == -3) {
-          checkkey = ABSPreheat;
-          ui.material_preset[1].bed_temp = HMI_ValueStruct.Bed_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), ui.material_preset[1].bed_temp);
-          return;
-        }
-        else if (HMI_ValueStruct.show_mode == -1)
-          checkkey = TemperatureID;
-        else
-          checkkey = Tune;
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
-        thermalManager.setTargetBed(HMI_ValueStruct.Bed_Temp);
-        return;
-      }
-      // Bed_Temp limit
-      LIMIT(HMI_ValueStruct.Bed_Temp, BED_MINTEMP, BED_MAX_TARGET);
-      // Bed_Temp value
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
-    }
-  }
-
-#endif // HAS_HEATED_BED
-
-#if HAS_PREHEAT && HAS_FAN
-
-  void HMI_FanSpeed() {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      uint8_t fan_line;
-      switch (HMI_ValueStruct.show_mode) {
-        case -1: fan_line = TEMP_CASE_FAN; break;
-        case -2: fan_line = PREHEAT_CASE_FAN; break;
-        case -3: fan_line = PREHEAT_CASE_FAN; break;
-        default: fan_line = TUNE_CASE_FAN + MROWS - index_tune;
-      }
-
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Fan_speed)) {
-        EncoderRate.enabled = false;
-        if (HMI_ValueStruct.show_mode == -2) {
-          checkkey = PLAPreheat;
-          ui.material_preset[0].fan_speed = HMI_ValueStruct.Fan_speed;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), ui.material_preset[0].fan_speed);
-          return;
-        }
-        else if (HMI_ValueStruct.show_mode == -3) {
-          checkkey = ABSPreheat;
-          ui.material_preset[1].fan_speed = HMI_ValueStruct.Fan_speed;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), ui.material_preset[1].fan_speed);
-          return;
-        }
-        else if (HMI_ValueStruct.show_mode == -1)
-          checkkey = TemperatureID;
-        else
-          checkkey = Tune;
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
-        thermalManager.set_fan_speed(0, HMI_ValueStruct.Fan_speed);
-        return;
-      }
-      // Fan_speed limit
-      LIMIT(HMI_ValueStruct.Fan_speed, 0, 255);
-      // Fan_speed value
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
-    }
-  }
-
-#endif // HAS_PREHEAT && HAS_FAN
-
-void HMI_PrintSpeed() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.print_speed)) {
-      checkkey = Tune;
-      EncoderRate.enabled = false;
-      feedrate_percentage = HMI_ValueStruct.print_speed;
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
-      return;
-    }
-    // print_speed limit
-    LIMIT(HMI_ValueStruct.print_speed, MIN_PRINT_SPEED, MAX_PRINT_SPEED);
-    // print_speed value
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
-  }
-}
-
-#define LAST_AXIS TERN(HAS_HOTEND, E_AXIS, Z_AXIS)
-
-void HMI_MaxFeedspeedXYZE() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Feedspeed)) {
-      checkkey = MaxSpeed;
-      EncoderRate.enabled = false;
-      if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
-        planner.set_max_feedrate(HMI_flag.feedspeed_axis, HMI_ValueStruct.Max_Feedspeed);
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
-      return;
-    }
-    // MaxFeedspeed limit
-    if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
-      NOMORE(HMI_ValueStruct.Max_Feedspeed, default_max_feedrate[HMI_flag.feedspeed_axis] * 2);
-    if (HMI_ValueStruct.Max_Feedspeed < MIN_MAXFEEDSPEED) HMI_ValueStruct.Max_Feedspeed = MIN_MAXFEEDSPEED;
-    // MaxFeedspeed value
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
-  }
-}
-
-void HMI_MaxAccelerationXYZE() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Acceleration)) {
-      checkkey = MaxAcceleration;
-      EncoderRate.enabled = false;
-      if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
-        planner.set_max_acceleration(HMI_flag.acc_axis, HMI_ValueStruct.Max_Acceleration);
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
-      return;
-    }
-    // MaxAcceleration limit
-    if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
-      NOMORE(HMI_ValueStruct.Max_Acceleration, default_max_acceleration[HMI_flag.acc_axis] * 2);
-    if (HMI_ValueStruct.Max_Acceleration < MIN_MAXACCELERATION) HMI_ValueStruct.Max_Acceleration = MIN_MAXACCELERATION;
-    // MaxAcceleration value
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
-  }
-}
-
-#if HAS_CLASSIC_JERK
-
-  void HMI_MaxJerkXYZE() {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Jerk_scaled)) {
-        checkkey = MaxJerk;
-        EncoderRate.enabled = false;
-        if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
-          planner.set_max_jerk(HMI_flag.jerk_axis, HMI_ValueStruct.Max_Jerk_scaled / 10);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
-        return;
-      }
-      // MaxJerk limit
-      if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
-        NOMORE(HMI_ValueStruct.Max_Jerk_scaled, default_max_jerk[HMI_flag.jerk_axis] * 2 * MINUNITMULT);
-      NOLESS(HMI_ValueStruct.Max_Jerk_scaled, (MIN_MAXJERK) * MINUNITMULT);
-      // MaxJerk value
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
-    }
-  }
-
-#endif // HAS_CLASSIC_JERK
-
-void HMI_StepXYZE() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Step_scaled)) {
-      checkkey = Step;
-      EncoderRate.enabled = false;
-      if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
-        planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step_scaled / 10;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
-      return;
-    }
-    // Step limit
-    if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
-      NOMORE(HMI_ValueStruct.Max_Step_scaled, 999.9 * MINUNITMULT);
-    NOLESS(HMI_ValueStruct.Max_Step_scaled, MIN_STEP);
-    // Step value
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
-  }
-}
-
-// Draw X, Y, Z and blink if in an un-homed or un-trusted state
-void _update_axis_value(const AxisEnum axis, const uint16_t x, const uint16_t y, const bool blink, const bool force) {
-  const bool draw_qmark = axis_should_home(axis),
-             draw_empty = NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING) && !draw_qmark && !axis_is_trusted(axis);
-
-  // Check for a position change
-  static xyz_pos_t oldpos = { -1, -1, -1 };
-  const float p = current_position[axis];
-  const bool changed = oldpos[axis] != p;
-  if (changed) oldpos[axis] = p;
-
-  if (force || changed || draw_qmark || draw_empty) {
-    if (blink && draw_qmark)
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, x, y, F("???.?"));
-    else if (blink && draw_empty)
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, x, y, F("     "));
-    else
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, x, y, p * 10);
-  }
-}
-
-void _draw_xyz_position(const bool force) {
-  //SERIAL_ECHOPGM("Draw XYZ:");
-  static bool _blink = false;
-  const bool blink = !!(millis() & 0x400UL);
-  if (force || blink != _blink) {
-    _blink = blink;
-    //SERIAL_ECHOPGM(" (blink)");
-    _update_axis_value(X_AXIS,  35, 459, blink, true);
-    _update_axis_value(Y_AXIS, 120, 459, blink, true);
-    _update_axis_value(Z_AXIS, 205, 459, blink, true);
-  }
-  //SERIAL_EOL();
-}
-
-void update_variable() {
-  #if HAS_HOTEND
-    static celsius_t _hotendtemp = 0, _hotendtarget = 0;
-    const celsius_t hc = thermalManager.wholeDegHotend(0),
-                    ht = thermalManager.degTargetHotend(0);
-    const bool _new_hotend_temp = _hotendtemp != hc,
-               _new_hotend_target = _hotendtarget != ht;
-    if (_new_hotend_temp) _hotendtemp = hc;
-    if (_new_hotend_target) _hotendtarget = ht;
-  #endif
-  #if HAS_HEATED_BED
-    static celsius_t _bedtemp = 0, _bedtarget = 0;
-    const celsius_t bc = thermalManager.wholeDegBed(),
-                    bt = thermalManager.degTargetBed();
-    const bool _new_bed_temp = _bedtemp != bc,
-               _new_bed_target = _bedtarget != bt;
-    if (_new_bed_temp) _bedtemp = bc;
-    if (_new_bed_target) _bedtarget = bt;
-  #endif
-  #if HAS_FAN
-    static uint8_t _fanspeed = 0;
-    const bool _new_fanspeed = _fanspeed != thermalManager.fan_speed[0];
-    if (_new_fanspeed) _fanspeed = thermalManager.fan_speed[0];
-  #endif
-
-  if (checkkey == Tune) {
-    // Tune page temperature update
-    #if HAS_HOTEND
-      if (_new_hotend_target)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), _hotendtarget);
-    #endif
-    #if HAS_HEATED_BED
-      if (_new_bed_target)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), _bedtarget);
-    #endif
-    #if HAS_FAN
-      if (_new_fanspeed)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), _fanspeed);
-    #endif
-  }
-  else if (checkkey == TemperatureID) {
-    // Temperature page temperature update
-    #if HAS_HOTEND
-      if (_new_hotend_target)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_TEMP), _hotendtarget);
-    #endif
-    #if HAS_HEATED_BED
-      if (_new_bed_target)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_BED), _bedtarget);
-    #endif
-    #if HAS_FAN
-      if (_new_fanspeed)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_FAN), _fanspeed);
-    #endif
-  }
-
-  // Bottom temperature update
-
-  #if HAS_HOTEND
-    if (_new_hotend_temp)
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 384, _hotendtemp);
-    if (_new_hotend_target)
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 384, _hotendtarget);
-
-    static int16_t _flow = planner.flow_percentage[0];
-    if (_flow != planner.flow_percentage[0]) {
-      _flow = planner.flow_percentage[0];
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 417, _flow);
-    }
-  #endif
-
-  #if HAS_HEATED_BED
-    if (_new_bed_temp)
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 417, _bedtemp);
-    if (_new_bed_target)
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 417, _bedtarget);
-  #endif
-
-  static int16_t _feedrate = 100;
-  if (_feedrate != feedrate_percentage) {
-    _feedrate = feedrate_percentage;
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 384, _feedrate);
-  }
-
-  #if HAS_FAN
-    if (_new_fanspeed) {
-      _fanspeed = thermalManager.fan_speed[0];
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 195 + 2 * STAT_CHR_W, 384, _fanspeed);
-    }
-  #endif
-
-  static float _offset = 0;
-  if (BABY_Z_VAR != _offset) {
-    _offset = BABY_Z_VAR;
-    if (BABY_Z_VAR < 0) {
-      DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, -_offset * 100);
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
-    }
-    else {
-      DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, _offset * 100);
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
-    }
-  }
-
-  _draw_xyz_position(false);
-}
-
-/**
- * Read and cache the working directory.
- *
- * TODO: New code can follow the pattern of menu_media.cpp
- * and rely on Marlin caching for performance. No need to
- * cache files here.
- */
-
-#ifndef strcasecmp_P
-  #define strcasecmp_P(a, b) strcasecmp((a), (b))
-#endif
-
-void make_name_without_ext(char *dst, char *src, size_t maxlen=MENU_CHAR_LIMIT) {
-  char * const name = card.longest_filename();
-  size_t pos        = strlen(name); // index of ending nul
-
-  // For files, remove the extension
-  // which may be .gcode, .gco, or .g
-  if (!card.flag.filenameIsDir)
-    while (pos && src[pos] != '.') pos--; // find last '.' (stop at 0)
-
-  size_t len = pos;   // nul or '.'
-  if (len > maxlen) { // Keep the name short
-    pos        = len = maxlen; // move nul down
-    dst[--pos] = '.'; // insert dots
-    dst[--pos] = '.';
-    dst[--pos] = '.';
-  }
-
-  dst[len] = '\0';    // end it
-
-  // Copy down to 0
-  while (pos--) dst[pos] = src[pos];
-}
-
-void HMI_SDCardInit() { card.cdroot(); }
-
-void MarlinUI::refresh() { /* Nothing to see here */ }
-
-#define ICON_Folder ICON_More
-
-#if ENABLED(SCROLL_LONG_FILENAMES)
-
-  char shift_name[LONG_FILENAME_LENGTH + 1];
-  int8_t shift_amt; // = 0
-  millis_t shift_ms; // = 0
-
-  // Init the shift name based on the highlighted item
-  void Init_Shift_Name() {
-    const bool is_subdir = !card.flag.workDirIsRoot;
-    const int8_t filenum = select_file.now - 1 - is_subdir; // Skip "Back" and ".."
-    const uint16_t fileCnt = card.get_num_Files();
-    if (WITHIN(filenum, 0, fileCnt - 1)) {
-      card.getfilename_sorted(SD_ORDER(filenum, fileCnt));
-      char * const name = card.longest_filename();
-      make_name_without_ext(shift_name, name, 100);
-    }
-  }
-
-  void Init_SDItem_Shift() {
-    shift_amt = 0;
-    shift_ms  = select_file.now > 0 && strlen(shift_name) > MENU_CHAR_LIMIT
-           ? millis() + 750UL : 0;
-  }
-
-#endif
-
-/**
- * Display an SD item, adding a CDUP for subfolders.
- */
-void Draw_SDItem(const uint16_t item, int16_t row=-1) {
-  if (row < 0) row = item + 1 + MROWS - index_file;
-  const bool is_subdir = !card.flag.workDirIsRoot;
-  if (is_subdir && item == 0) {
-    Draw_Menu_Line(row, ICON_Folder, "..");
-    return;
-  }
-
-  card.getfilename_sorted(SD_ORDER(item - is_subdir, card.get_num_Files()));
-  char * const name = card.longest_filename();
-
-  #if ENABLED(SCROLL_LONG_FILENAMES)
-    // Init the current selected name
-    // This is used during scroll drawing
-    if (item == select_file.now - 1) {
-      make_name_without_ext(shift_name, name, 100);
-      Init_SDItem_Shift();
-    }
-  #endif
-
-  // Draw the file/folder with name aligned left
-  char str[strlen(name) + 1];
-  make_name_without_ext(str, name);
-  Draw_Menu_Line(row, card.flag.filenameIsDir ? ICON_Folder : ICON_File, str);
-}
-
-#if ENABLED(SCROLL_LONG_FILENAMES)
-
-  void Draw_SDItem_Shifted(uint8_t &shift) {
-    // Limit to the number of chars past the cutoff
-    const size_t len = strlen(shift_name);
-    NOMORE(shift, _MAX(len - MENU_CHAR_LIMIT, 0U));
-
-    // Shorten to the available space
-    const size_t lastchar = _MIN((signed)len, shift + MENU_CHAR_LIMIT);
-
-    const char c = shift_name[lastchar];
-    shift_name[lastchar] = '\0';
-
-    const uint8_t row = select_file.now + MROWS - index_file; // skip "Back" and scroll
-    Erase_Menu_Text(row);
-    Draw_Menu_Line(row, 0, &shift_name[shift]);
-
-    shift_name[lastchar] = c;
-  }
-
-#endif
-
-// Redraw the first set of SD Files
-void Redraw_SD_List() {
-  select_file.reset();
-  index_file = MROWS;
-
-  Clear_Menu_Area(); // Leave title bar unchanged
-
-  Draw_Back_First();
-
-  if (card.isMounted()) {
-    // As many files as will fit
-    LOOP_L_N(i, _MIN(nr_sd_menu_items(), MROWS))
-      Draw_SDItem(i, i + 1);
-
-    TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());
-  }
-  else {
-    DWIN_Draw_Rectangle(1, Color_Bg_Red, 10, MBASE(3) - 10, DWIN_WIDTH - 10, MBASE(4));
-    DWIN_Draw_String(false, false, font16x32, Color_Yellow, Color_Bg_Red, ((DWIN_WIDTH) - 8 * 16) / 2, MBASE(3), F("No Media"));
-  }
-}
-
-bool DWIN_lcd_sd_status = false;
-
-void SDCard_Up() {
-  card.cdup();
-  Redraw_SD_List();
-  DWIN_lcd_sd_status = false; // On next DWIN_Update
-}
-
-void SDCard_Folder(char * const dirname) {
-  card.cd(dirname);
-  Redraw_SD_List();
-  DWIN_lcd_sd_status = false; // On next DWIN_Update
-}
-
-//
-// Watch for media mount / unmount
-//
-void HMI_SDCardUpdate() {
-  if (HMI_flag.home_flag) return;
-  if (DWIN_lcd_sd_status != card.isMounted()) {
-    DWIN_lcd_sd_status = card.isMounted();
-    //SERIAL_ECHOLNPAIR("HMI_SDCardUpdate: ", DWIN_lcd_sd_status);
-    if (DWIN_lcd_sd_status) {
-      if (checkkey == SelectFile)
-        Redraw_SD_List();
-    }
-    else {
-      // clean file icon
-      if (checkkey == SelectFile) {
-        Redraw_SD_List();
-      }
-      else if (checkkey == PrintProcess || checkkey == Tune || printingIsActive()) {
-        // TODO: Move card removed abort handling
-        //       to CardReader::manage_media.
-        card.abortFilePrintSoon();
-        wait_for_heatup = wait_for_user = false;
-        dwin_abort_flag = true; // Reset feedrate, return to Home
-      }
-    }
-    DWIN_UpdateLCD();
-  }
-}
-
-//
-// The status area is always on-screen, except during
-// full-screen modal dialogs. (TODO: Keep alive during dialogs)
-//
-void Draw_Status_Area(const bool with_update) {
-
-  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, STATUS_Y, DWIN_WIDTH, DWIN_HEIGHT - 1);
-
-  #if HAS_HOTEND
-    DWIN_ICON_Show(ICON, ICON_HotendTemp, 10, 383);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 384, thermalManager.wholeDegHotend(0));
-    DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 384, F("/"));
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 384, thermalManager.degTargetHotend(0));
-
-    DWIN_ICON_Show(ICON, ICON_StepE, 112, 417);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 417, planner.flow_percentage[0]);
-    DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 417, F("%"));
-  #endif
-
-  #if HAS_HEATED_BED
-    DWIN_ICON_Show(ICON, ICON_BedTemp, 10, 416);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 417, thermalManager.wholeDegBed());
-    DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 417, F("/"));
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 417, thermalManager.degTargetBed());
-  #endif
-
-  DWIN_ICON_Show(ICON, ICON_Speed, 113, 383);
-  DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 384, feedrate_percentage);
-  DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 384, F("%"));
-
-  #if HAS_FAN
-    DWIN_ICON_Show(ICON, ICON_FanSpeed, 187, 383);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 195 + 2 * STAT_CHR_W, 384, thermalManager.fan_speed[0]);
-  #endif
-
-  #if HAS_ZOFFSET_ITEM
-    DWIN_ICON_Show(ICON, ICON_Zoffset, 187, 416);
-  #endif
-
-  if (BABY_Z_VAR < 0) {
-    DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, -BABY_Z_VAR * 100);
-    DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
-  }
-  else {
-    DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, BABY_Z_VAR * 100);
-    DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
-  }
-
-  DWIN_Draw_Rectangle(1, Line_Color, 0, 449, DWIN_WIDTH, 451);
-
-  DWIN_ICON_Show(ICON, ICON_MaxSpeedX,  10, 456);
-  DWIN_ICON_Show(ICON, ICON_MaxSpeedY,  95, 456);
-  DWIN_ICON_Show(ICON, ICON_MaxSpeedZ, 180, 456);
-  _draw_xyz_position(true);
-
-  if (with_update) {
-    DWIN_UpdateLCD();
-    delay(5);
-  }
-}
-
-void HMI_StartFrame(const bool with_update) {
-  Goto_MainMenu();
-  Draw_Status_Area(with_update);
-}
-
-void Draw_Info_Menu() {
-  Clear_Main_Window();
-
-  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(MACHINE_SIZE) * MENU_CHR_W) / 2, 122, F(MACHINE_SIZE));
-  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, F(SHORT_BUILD_VERSION));
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 30, 17, 57, 29); // "Info"
-
-    DWIN_Frame_AreaCopy(1, 197, 149, 252, 161, 108, 102);
-    DWIN_Frame_AreaCopy(1, 1, 164, 56, 176, 108, 175);
-    DWIN_Frame_AreaCopy(1, 58, 164, 113, 176, 105, 248);
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_INFO_SCREEN));
-    #else
-      DWIN_Frame_TitleCopy(1, 190, 16, 215, 26); // "Info"
-    #endif
-
-    DWIN_Frame_AreaCopy(1, 120, 150, 146, 161, 124, 102);
-    DWIN_Frame_AreaCopy(1, 146, 151, 254, 161, 82, 175);
-    DWIN_Frame_AreaCopy(1, 0, 165, 94, 175, 89, 248);
-  }
-  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE));
-
-  Draw_Back_First();
-  LOOP_L_N(i, 3) {
-    DWIN_ICON_Show(ICON, ICON_PrintSize + i, 26, 99 + i * 73);
-    DWIN_Draw_Line(Line_Color, 16, MBASE(2) + i * 73, 256, 156 + i * 73);
-  }
-}
-
-void Draw_Print_File_Menu() {
-  Clear_Title_Bar();
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 0, 31, 55, 44); // "Print file"
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title("Print file"); // TODO: GET_TEXT_F
-    #else
-      DWIN_Frame_TitleCopy(1, 52, 31, 137, 41); // "Print file"
-    #endif
-  }
-
-  Redraw_SD_List();
-}
-
-/* Main Process */
-void HMI_MainMenu() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_page.inc(4)) {
-      switch (select_page.now) {
-        case 0: ICON_Print(); break;
-        case 1: ICON_Print(); ICON_Prepare(); break;
-        case 2: ICON_Prepare(); ICON_Control(); break;
-        case 3: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(1); break;
-      }
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_page.dec()) {
-      switch (select_page.now) {
-        case 0: ICON_Print(); ICON_Prepare(); break;
-        case 1: ICON_Prepare(); ICON_Control(); break;
-        case 2: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(0); break;
-        case 3: TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(1); break;
-      }
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_page.now) {
-      case 0: // Print File
-        checkkey = SelectFile;
-        Draw_Print_File_Menu();
-        break;
-
-      case 1: // Prepare
-        checkkey = Prepare;
-        select_prepare.reset();
-        index_prepare = MROWS;
-        Draw_Prepare_Menu();
-        break;
-
-      case 2: // Control
-        checkkey = Control;
-        select_control.reset();
-        index_control = MROWS;
-        Draw_Control_Menu();
-        break;
-
-      case 3: // Leveling or Info
-        #if HAS_ONESTEP_LEVELING
-          checkkey = Leveling;
-          HMI_Leveling();
-        #else
-          checkkey = Info;
-          Draw_Info_Menu();
-        #endif
-        break;
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-// Select (and Print) File
-void HMI_SelectFile() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-
-  const uint16_t hasUpDir = !card.flag.workDirIsRoot;
-
-  if (encoder_diffState == ENCODER_DIFF_NO) {
-    #if ENABLED(SCROLL_LONG_FILENAMES)
-      if (shift_ms && select_file.now >= 1 + hasUpDir) {
-        // Scroll selected filename every second
-        const millis_t ms = millis();
-        if (ELAPSED(ms, shift_ms)) {
-          const bool was_reset = shift_amt < 0;
-          shift_ms = ms + 375UL + was_reset * 250UL;  // ms per character
-          uint8_t shift_new = shift_amt + 1;           // Try to shift by...
-          Draw_SDItem_Shifted(shift_new);             // Draw the item
-          if (!was_reset && shift_new == 0)           // Was it limited to 0?
-            shift_ms = 0;                             // No scrolling needed
-          else if (shift_new == shift_amt)            // Scroll reached the end
-            shift_new = -1;                           // Reset
-          shift_amt = shift_new;                      // Set new scroll
-        }
-      }
-    #endif
-    return;
-  }
-
-  // First pause is long. Easy.
-  // On reset, long pause must be after 0.
-
-  const uint16_t fullCnt = nr_sd_menu_items();
-
-  if (encoder_diffState == ENCODER_DIFF_CW && fullCnt) {
-    if (select_file.inc(1 + fullCnt)) {
-      const uint8_t itemnum = select_file.now - 1;              // -1 for "Back"
-      if (TERN0(SCROLL_LONG_FILENAMES, shift_ms)) {             // If line was shifted
-        Erase_Menu_Text(itemnum + MROWS - index_file);          // Erase and
-        Draw_SDItem(itemnum - 1);                               // redraw
-      }
-      if (select_file.now > MROWS && select_file.now > index_file) { // Cursor past the bottom
-        index_file = select_file.now;                           // New bottom line
-        Scroll_Menu(DWIN_SCROLL_UP);
-        Draw_SDItem(itemnum, MROWS);                            // Draw and init the shift name
-      }
-      else {
-        Move_Highlight(1, select_file.now + MROWS - index_file); // Just move highlight
-        TERN_(SCROLL_LONG_FILENAMES, Init_Shift_Name());         // ...and init the shift name
-      }
-      TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW && fullCnt) {
-    if (select_file.dec()) {
-      const uint8_t itemnum = select_file.now - 1;              // -1 for "Back"
-      if (TERN0(SCROLL_LONG_FILENAMES, shift_ms)) {             // If line was shifted
-        Erase_Menu_Text(select_file.now + 1 + MROWS - index_file); // Erase and
-        Draw_SDItem(itemnum + 1);                               // redraw
-      }
-      if (select_file.now < index_file - MROWS) {               // Cursor past the top
-        index_file--;                                           // New bottom line
-        Scroll_Menu(DWIN_SCROLL_DOWN);
-        if (index_file == MROWS) {
-          Draw_Back_First();
-          TERN_(SCROLL_LONG_FILENAMES, shift_ms = 0);
-        }
-        else {
-          Draw_SDItem(itemnum, 0);                              // Draw the item (and init shift name)
-        }
-      }
-      else {
-        Move_Highlight(-1, select_file.now + MROWS - index_file); // Just move highlight
-        TERN_(SCROLL_LONG_FILENAMES, Init_Shift_Name());        // ...and init the shift name
-      }
-      TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());        // Reset left. Init timer.
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    if (select_file.now == 0) { // Back
-      select_page.set(0);
-      Goto_MainMenu();
-    }
-    else if (hasUpDir && select_file.now == 1) { // CD-Up
-      SDCard_Up();
-      goto HMI_SelectFileExit;
-    }
-    else {
-      const uint16_t filenum = select_file.now - 1 - hasUpDir;
-      card.getfilename_sorted(SD_ORDER(filenum, card.get_num_Files()));
-
-      // Enter that folder!
-      if (card.flag.filenameIsDir) {
-        SDCard_Folder(card.filename);
-        goto HMI_SelectFileExit;
-      }
-
-      // Reset highlight for next entry
-      select_print.reset();
-      select_file.reset();
-
-      // Start choice and print SD file
-      HMI_flag.heat_flag = true;
-      HMI_flag.print_finish = false;
-      HMI_ValueStruct.show_mode = 0;
-
-      card.openAndPrintFile(card.filename);
-
-      #if HAS_FAN
-        // All fans on for Ender 3 v2 ?
-        // The slicer should manage this for us.
-        //for (uint8_t i = 0; i < FAN_COUNT; i++)
-        //  thermalManager.fan_speed[i] = 255;
-      #endif
-
-      Goto_PrintProcess();
-    }
-  }
-HMI_SelectFileExit:
-  DWIN_UpdateLCD();
-}
-
-/* Printing */
-void HMI_Printing() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  if (HMI_flag.done_confirm_flag) {
-    if (encoder_diffState == ENCODER_DIFF_ENTER) {
-      HMI_flag.done_confirm_flag = false;
-      dwin_abort_flag = true; // Reset feedrate, return to Home
-    }
-    return;
-  }
-
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_print.inc(3)) {
-      switch (select_print.now) {
-        case 0: ICON_Tune(); break;
-        case 1:
-          ICON_Tune();
-          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
-          break;
-        case 2:
-          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
-          ICON_Stop();
-          break;
-      }
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_print.dec()) {
-      switch (select_print.now) {
-        case 0:
-          ICON_Tune();
-          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
-          break;
-        case 1:
-          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
-          ICON_Stop();
-          break;
-        case 2: ICON_Stop(); break;
-      }
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_print.now) {
-      case 0: // Tune
-        checkkey = Tune;
-        HMI_ValueStruct.show_mode = 0;
-        select_tune.reset();
-        index_tune = MROWS;
-        Draw_Tune_Menu();
-        break;
-      case 1: // Pause
-        if (HMI_flag.pause_flag) {
-          ICON_Pause();
-
-          char cmd[40];
-          cmd[0] = '\0';
-
-          #if BOTH(HAS_HEATED_BED, PAUSE_HEAT)
-            if (resume_bed_temp) sprintf_P(cmd, PSTR("M190 S%i\n"), resume_bed_temp);
-          #endif
-          #if BOTH(HAS_HOTEND, PAUSE_HEAT)
-            if (resume_hotend_temp) sprintf_P(&cmd[strlen(cmd)], PSTR("M109 S%i\n"), resume_hotend_temp);
-          #endif
-
-          strcat_P(cmd, M24_STR);
-          queue.inject(cmd);
-        }
-        else {
-          HMI_flag.select_flag = true;
-          checkkey = Print_window;
-          Popup_window_PauseOrStop();
-        }
-        break;
-
-      case 2: // Stop
-        HMI_flag.select_flag = true;
-        checkkey = Print_window;
-        Popup_window_PauseOrStop();
-        break;
-
-      default: break;
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-/* Pause and Stop window */
-void HMI_PauseOrStop() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  if (encoder_diffState == ENCODER_DIFF_CW)
-    Draw_Select_Highlight(false);
-  else if (encoder_diffState == ENCODER_DIFF_CCW)
-    Draw_Select_Highlight(true);
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    if (select_print.now == 1) { // pause window
-      if (HMI_flag.select_flag) {
-        HMI_flag.pause_action = true;
-        ICON_Continue();
-        queue.inject_P(PSTR("M25"));
-      }
-      else {
-        // cancel pause
-      }
-      Goto_PrintProcess();
-    }
-    else if (select_print.now == 2) { // stop window
-      if (HMI_flag.select_flag) {
-        checkkey = Back_Main;
-        if (HMI_flag.home_flag) planner.synchronize(); // Wait for planner moves to finish!
-        wait_for_heatup = wait_for_user = false;       // Stop waiting for heating/user
-        card.abortFilePrintSoon();                     // Let the main loop handle SD abort
-        dwin_abort_flag = true;                        // Reset feedrate, return to Home
-        #ifdef ACTION_ON_CANCEL
-          host_action_cancel();
-        #endif
-        Popup_Window_Home(true);
-      }
-      else
-        Goto_PrintProcess(); // cancel stop
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-void Draw_Move_Menu() {
-  Clear_Main_Window();
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 192, 1, 233, 14); // "Move"
-    DWIN_Frame_AreaCopy(1, 58, 118, 106, 132, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 109, 118, 157, 132, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 160, 118, 209, 132, LBLX, MBASE(3));
-    #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 212, 118, 253, 131, LBLX, MBASE(4));
-    #endif
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_MOVE_AXIS));
-    #else
-      DWIN_Frame_TitleCopy(1, 231, 2, 265, 12);                     // "Move"
-    #endif
-    draw_move_en(MBASE(1)); say_x(36, MBASE(1));                    // "Move X"
-    draw_move_en(MBASE(2)); say_y(36, MBASE(2));                    // "Move Y"
-    draw_move_en(MBASE(3)); say_z(36, MBASE(3));                    // "Move Z"
-    #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 123, 192, 176, 202, LBLX, MBASE(4));   // "Extruder"
-    #endif
-  }
-
-  Draw_Back_First(select_axis.now == 0);
-  if (select_axis.now) Draw_Menu_Cursor(select_axis.now);
-
-  // Draw separators and icons
-  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MoveX + i);
-}
-
-void Draw_AdvSet_Menu() {
-  Clear_Main_Window();
-
-  #if ADVSET_CASE_TOTAL >= 6
-    const int16_t scroll = MROWS - index_advset; // Scrolled-up lines
-    #define ASCROL(L) (scroll + (L))
-  #else
-    #define ASCROL(L) (L)
-  #endif
-
-  #define AVISI(L)  WITHIN(ASCROL(L), 0, MROWS)
-
-  Draw_Title(GET_TEXT_F(MSG_ADVANCED_SETTINGS));
-
-  if (AVISI(0)) Draw_Back_First(select_advset.now == 0);
-  if (AVISI(ADVSET_CASE_HOMEOFF)) Draw_Menu_Line(ASCROL(ADVSET_CASE_HOMEOFF), ICON_HomeOff, GET_TEXT(MSG_SET_HOME_OFFSETS),true);  // Home Offset >
-  #if HAS_ONESTEP_LEVELING
-    if (AVISI(ADVSET_CASE_PROBEOFF)) Draw_Menu_Line(ASCROL(ADVSET_CASE_PROBEOFF), ICON_ProbeOff, GET_TEXT(MSG_ZPROBE_OFFSETS),true);  // Probe Offset >
-  #endif
-  if (AVISI(ADVSET_CASE_HEPID)) Draw_Menu_Line(ASCROL(ADVSET_CASE_HEPID), ICON_PIDNozzle, "Hotend PID", false);  // Nozzle PID
-  if (AVISI(ADVSET_CASE_BEDPID)) Draw_Menu_Line(ASCROL(ADVSET_CASE_BEDPID), ICON_PIDbed, "Bed PID", false);  // Bed PID
-  #if ENABLED(POWER_LOSS_RECOVERY)
-    if (AVISI(ADVSET_CASE_PWRLOSSR)) {
-      Draw_Menu_Line(ASCROL(ADVSET_CASE_PWRLOSSR), ICON_Motion, "Power-loss recovery", false);  // Power-loss recovery
-      Draw_Chkb_Line(ASCROL(ADVSET_CASE_PWRLOSSR), recovery.enabled);
-    }
-  #endif
-  if (select_advset.now) Draw_Menu_Cursor(ASCROL(select_advset.now));
-}
-
-void Draw_HomeOff_Menu() {
-  Clear_Main_Window();
-  Draw_Title(GET_TEXT_F(MSG_SET_HOME_OFFSETS));                 // Home Offsets
-  Draw_Back_First(select_item.now == 0);
-  Draw_Menu_Line(1, ICON_HomeOffX, GET_TEXT(MSG_HOME_OFFSET_X));  // Home X Offset
-  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Home_OffX_scaled);
-  Draw_Menu_Line(2, ICON_HomeOffY, GET_TEXT(MSG_HOME_OFFSET_Y));  // Home Y Offset
-  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Home_OffY_scaled);
-  Draw_Menu_Line(3, ICON_HomeOffZ, GET_TEXT(MSG_HOME_OFFSET_Z));  // Home Y Offset
-  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Home_OffZ_scaled);
-  if (select_item.now) Draw_Menu_Cursor(select_item.now);
-}
-
-#if HAS_ONESTEP_LEVELING
-  void Draw_ProbeOff_Menu() {
-    Clear_Main_Window();
-    Draw_Title(GET_TEXT_F(MSG_ZPROBE_OFFSETS));                 // Probe Offsets
-    Draw_Back_First(select_item.now == 0);
-    Draw_Menu_Line(1, ICON_ProbeOffX, GET_TEXT(MSG_ZPROBE_XOFFSET));  // Probe X Offset
-    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Probe_OffX_scaled);
-    Draw_Menu_Line(2, ICON_ProbeOffY, GET_TEXT(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
-    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Probe_OffY_scaled);
-    if (select_item.now) Draw_Menu_Cursor(select_item.now);
-  }
-#endif
-
-#include "../../../libs/buzzer.h"
-
-void HMI_AudioFeedback(const bool success=true) {
-  #if HAS_BUZZER
-    if (success) {
-      buzzer.tone(100, 659);
-      buzzer.tone(10, 0);
-      buzzer.tone(100, 698);
-    }
-    else
-      buzzer.tone(40, 440);
-  #endif
-}
-
-/* Prepare */
-void HMI_Prepare() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_prepare.inc(1 + PREPARE_CASE_TOTAL)) {
-      if (select_prepare.now > MROWS && select_prepare.now > index_prepare) {
-        index_prepare = select_prepare.now;
-
-        // Scroll up and draw a blank bottom line
-        Scroll_Menu(DWIN_SCROLL_UP);
-        Draw_Menu_Icon(MROWS, ICON_Axis + select_prepare.now - 1);
-
-        // Draw "More" icon for sub-menus
-        if (index_prepare < 7) Draw_More_Icon(MROWS - index_prepare + 1);
-
-        #if HAS_HOTEND
-          if (index_prepare == PREPARE_CASE_ABS) Item_Prepare_ABS(MROWS);
-        #endif
-        #if HAS_PREHEAT
-          if (index_prepare == PREPARE_CASE_COOL) Item_Prepare_Cool(MROWS);
-        #endif
-        if (index_prepare == PREPARE_CASE_LANG) Item_Prepare_Lang(MROWS);
-      }
-      else {
-        Move_Highlight(1, select_prepare.now + MROWS - index_prepare);
-      }
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_prepare.dec()) {
-      if (select_prepare.now < index_prepare - MROWS) {
-        index_prepare--;
-        Scroll_Menu(DWIN_SCROLL_DOWN);
-
-        if (index_prepare == MROWS)
-          Draw_Back_First();
-        else
-          Draw_Menu_Line(0, ICON_Axis + select_prepare.now - 1);
-
-        if (index_prepare < 7) Draw_More_Icon(MROWS - index_prepare + 1);
-
-             if (index_prepare == 6) Item_Prepare_Move(0);
-        else if (index_prepare == 7) Item_Prepare_Disable(0);
-        else if (index_prepare == 8) Item_Prepare_Home(0);
-      }
-      else {
-        Move_Highlight(-1, select_prepare.now + MROWS - index_prepare);
-      }
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_prepare.now) {
-      case 0: // Back
-        select_page.set(1);
-        Goto_MainMenu();
-        break;
-      case PREPARE_CASE_MOVE: // Axis move
-        checkkey = AxisMove;
-        select_axis.reset();
-        Draw_Move_Menu();
-
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(1), current_position.x * MINUNITMULT);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(2), current_position.y * MINUNITMULT);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), current_position.z * MINUNITMULT);
-        #if HAS_HOTEND
-          HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
-          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
-        #endif
-        break;
-      case PREPARE_CASE_DISA: // Disable steppers
-        queue.inject_P(PSTR("M84"));
-        break;
-      case PREPARE_CASE_HOME: // Homing
-        checkkey = Last_Prepare;
-        index_prepare = MROWS;
-        queue.inject_P(G28_STR); // G28 will set home_flag
-        Popup_Window_Home();
-        break;
-      #if HAS_ZOFFSET_ITEM
-        case PREPARE_CASE_ZOFF: // Z-offset
-          #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
-            checkkey = Homeoffset;
-            HMI_ValueStruct.show_mode = -4;
-            HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
-            DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(PREPARE_CASE_ZOFF + MROWS - index_prepare), HMI_ValueStruct.offset_value);
-            EncoderRate.enabled = true;
-          #else
-            // Apply workspace offset, making the current position 0,0,0
-            queue.inject_P(PSTR("G92 X0 Y0 Z0"));
-            HMI_AudioFeedback();
-          #endif
-          break;
-      #endif
-      #if HAS_PREHEAT
-        case PREPARE_CASE_PLA: // PLA preheat
-          TERN_(HAS_HOTEND, thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0));
-          TERN_(HAS_HEATED_BED, thermalManager.setTargetBed(ui.material_preset[0].bed_temp));
-          TERN_(HAS_FAN, thermalManager.set_fan_speed(0, ui.material_preset[0].fan_speed));
-          break;
-        case PREPARE_CASE_ABS: // ABS preheat
-          TERN_(HAS_HOTEND, thermalManager.setTargetHotend(ui.material_preset[1].hotend_temp, 0));
-          TERN_(HAS_HEATED_BED, thermalManager.setTargetBed(ui.material_preset[1].bed_temp));
-          TERN_(HAS_FAN, thermalManager.set_fan_speed(0, ui.material_preset[1].fan_speed));
-          break;
-        case PREPARE_CASE_COOL: // Cool
-          TERN_(HAS_FAN, thermalManager.zero_fan_speeds());
-          #if HAS_HOTEND || HAS_HEATED_BED
-            thermalManager.disable_all_heaters();
-          #endif
-          break;
-      #endif
-      case PREPARE_CASE_LANG: // Toggle Language
-        HMI_ToggleLanguage();
-        Draw_Prepare_Menu();
-        break;
-      default: break;
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-void Draw_Temperature_Menu() {
-  Clear_Main_Window();
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 236, 2, 263, 13); // "Temperature"
-    #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(TEMP_CASE_TEMP));
-    #endif
-    #if HAS_HEATED_BED
-      DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX, MBASE(TEMP_CASE_BED));
-    #endif
-    #if HAS_FAN
-      DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX, MBASE(TEMP_CASE_FAN));
-    #endif
-    #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 100, 89, 178, 101, LBLX, MBASE(TEMP_CASE_PLA));
-      DWIN_Frame_AreaCopy(1, 180, 89, 260, 100, LBLX, MBASE(TEMP_CASE_ABS));
-    #endif
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_TEMPERATURE));
-    #else
-      DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                       // "Temperature"
-    #endif
-    #ifdef USE_STRING_TITLES
-      #if HAS_HOTEND
-        DWIN_Draw_Label(MBASE(TEMP_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
-      #endif
-      #if HAS_HEATED_BED
-        DWIN_Draw_Label(MBASE(TEMP_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
-      #endif
-      #if HAS_FAN
-        DWIN_Draw_Label(MBASE(TEMP_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
-      #endif
-      #if HAS_HOTEND
-        DWIN_Draw_Label(MBASE(TEMP_CASE_PLA), F("PLA Preheat Settings"));
-        DWIN_Draw_Label(MBASE(TEMP_CASE_ABS), F("ABS Preheat Settings"));
-      #endif
-    #else
-      #if HAS_HOTEND
-        DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(TEMP_CASE_TEMP));      // Nozzle...
-        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(TEMP_CASE_TEMP));     // ...Temperature
-      #endif
-      #if HAS_HEATED_BED
-        DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX, MBASE(TEMP_CASE_BED));       // Bed...
-        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 27, MBASE(TEMP_CASE_BED));      // ...Temperature
-      #endif
-      #if HAS_FAN
-        DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX, MBASE(TEMP_CASE_FAN));          // Fan speed
-      #endif
-      #if HAS_HOTEND
-        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(TEMP_CASE_PLA));         // Preheat...
-        DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(TEMP_CASE_PLA));    // ...PLA
-        DWIN_Frame_AreaCopy(1, 131, 119, 182, 132, LBLX + 79, MBASE(TEMP_CASE_PLA));  // PLA setting
-        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(TEMP_CASE_ABS));         // Preheat...
-        DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(TEMP_CASE_ABS));    // ...ABS
-        DWIN_Frame_AreaCopy(1, 131, 119, 182, 132, LBLX + 81, MBASE(TEMP_CASE_ABS));  // ABS setting
-      #endif
-    #endif
-  }
-
-  Draw_Back_First(select_temp.now == 0);
-  if (select_temp.now) Draw_Menu_Cursor(select_temp.now);
-
-  // Draw icons and lines
-  uint8_t i = 0;
-  #define _TMENU_ICON(N) Draw_Menu_Line(++i, ICON_SetEndTemp + (N) - 1)
-  #if HAS_HOTEND
-    _TMENU_ICON(TEMP_CASE_TEMP);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.degTargetHotend(0));
-  #endif
-  #if HAS_HEATED_BED
-    _TMENU_ICON(TEMP_CASE_BED);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.degTargetBed());
-  #endif
-  #if HAS_FAN
-    _TMENU_ICON(TEMP_CASE_FAN);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.fan_speed[0]);
-  #endif
-  #if HAS_HOTEND
-    // PLA/ABS items have submenus
-    _TMENU_ICON(TEMP_CASE_PLA);
-    Draw_More_Icon(i);
-    _TMENU_ICON(TEMP_CASE_ABS);
-    Draw_More_Icon(i);
-  #endif
-}
-
-/* Control */
-void HMI_Control() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_control.inc(1 + CONTROL_CASE_TOTAL)) {
-      if (select_control.now > MROWS && select_control.now > index_control) {
-        index_control = select_control.now;
-
-        // Scroll up and draw a blank bottom line
-        Scroll_Menu(DWIN_SCROLL_UP);
-
-        switch (index_control) {  // Last menu items
-          case CONTROL_CASE_ADVSET:  // Advanced Settings >
-            Draw_Menu_Item(MROWS, ICON_AdvSet, GET_TEXT(MSG_ADVANCED_SETTINGS), true);
-            break;
-          case CONTROL_CASE_INFO:    // Info >
-            Item_Control_Info(MBASE(MROWS));
-            Draw_Menu_Icon(MROWS, ICON_Info);
-            break;
-          default: break;
-        }
-
-      }
-      else {
-        Move_Highlight(1, select_control.now + MROWS - index_control);
-      }
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_control.dec()) {
-      if (select_control.now < index_control - MROWS) {
-        index_control--;
-        Scroll_Menu(DWIN_SCROLL_DOWN);
-        switch (index_control) {  // First menu items
-          case MROWS :
-          Draw_Back_First();
-            break;
-          case MROWS + 1: // Temperature >
-            Draw_Menu_Line(0, ICON_Temperature, GET_TEXT(MSG_TEMPERATURE), true);
-            break;
-          case MROWS + 2: // Move >
-            Draw_Menu_Line(0, ICON_Motion, GET_TEXT(MSG_MOTION), true);
-          default: break;
-        }
-      }
-      else {
-        Move_Highlight(-1, select_control.now + MROWS - index_control);
-      }
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_control.now) {
-      case 0: // Back
-        select_page.set(2);
-        Goto_MainMenu();
-        break;
-      case CONTROL_CASE_TEMP: // Temperature
-        checkkey = TemperatureID;
-        HMI_ValueStruct.show_mode = -1;
-        select_temp.reset();
-        Draw_Temperature_Menu();
-        break;
-      case CONTROL_CASE_MOVE: // Motion
-        checkkey = Motion;
-        select_motion.reset();
-        Draw_Motion_Menu();
-        break;
-      #if ENABLED(EEPROM_SETTINGS)
-        case CONTROL_CASE_SAVE: { // Write EEPROM
-          const bool success = settings.save();
-          HMI_AudioFeedback(success);
-        } break;
-        case CONTROL_CASE_LOAD: { // Read EEPROM
-          const bool success = settings.load();
-          HMI_AudioFeedback(success);
-        } break;
-        case CONTROL_CASE_RESET: // Reset EEPROM
-          settings.reset();
-          HMI_AudioFeedback();
-          break;
-      #endif
-      case CONTROL_CASE_ADVSET: // Advanced Settings
-        checkkey = AdvSet;
-        select_advset.reset();
-        Draw_AdvSet_Menu();
-        break;
-      case CONTROL_CASE_INFO: // Info
-        checkkey = Info;
-        Draw_Info_Menu();
-        break;
-      default: break;
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-
-#if HAS_ONESTEP_LEVELING
-
-  /* Leveling */
-  void HMI_Leveling() {
-    Popup_Window_Leveling();
-    DWIN_UpdateLCD();
-    queue.inject_P(PSTR("G28O\nG29"));
-  }
-
-#endif
-
-/* Axis Move */
-void HMI_AxisMove() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  #if ENABLED(PREVENT_COLD_EXTRUSION)
-    // popup window resume
-    if (HMI_flag.ETempTooLow_flag) {
-      if (encoder_diffState == ENCODER_DIFF_ENTER) {
-        HMI_flag.ETempTooLow_flag = false;
-        HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
-        Draw_Move_Menu();
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), 0);
-        DWIN_UpdateLCD();
-      }
-      return;
-    }
-  #endif
-
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_axis.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_axis.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_axis.dec()) Move_Highlight(-1, select_axis.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_axis.now) {
-      case 0: // Back
-        checkkey = Prepare;
-        select_prepare.set(1);
-        index_prepare = MROWS;
-        Draw_Prepare_Menu();
-        break;
-      case 1: // X axis move
-        checkkey = Move_X;
-        HMI_ValueStruct.Move_X_scaled = current_position.x * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
-        EncoderRate.enabled = true;
-        break;
-      case 2: // Y axis move
-        checkkey = Move_Y;
-        HMI_ValueStruct.Move_Y_scaled = current_position.y * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
-        EncoderRate.enabled = true;
-        break;
-      case 3: // Z axis move
-        checkkey = Move_Z;
-        HMI_ValueStruct.Move_Z_scaled = current_position.z * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
-        EncoderRate.enabled = true;
-        break;
-        #if HAS_HOTEND
-          case 4: // Extruder
-            // window tips
-            #ifdef PREVENT_COLD_EXTRUSION
-              if (thermalManager.tooColdToExtrude(0)) {
-                HMI_flag.ETempTooLow_flag = true;
-                Popup_Window_ETempTooLow();
-                DWIN_UpdateLCD();
-                return;
-              }
-            #endif
-            checkkey = Extruder;
-            HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
-            DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
-            EncoderRate.enabled = true;
-            break;
-        #endif
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-/* TemperatureID */
-void HMI_Temperature() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_temp.inc(1 + TEMP_CASE_TOTAL)) Move_Highlight(1, select_temp.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_temp.dec()) Move_Highlight(-1, select_temp.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_temp.now) {
-      case 0: // Back
-        checkkey = Control;
-        select_control.set(1);
-        index_control = MROWS;
-        Draw_Control_Menu();
-        break;
-      #if HAS_HOTEND
-        case TEMP_CASE_TEMP: // Nozzle temperature
-          checkkey = ETemp;
-          HMI_ValueStruct.E_Temp = thermalManager.degTargetHotend(0);
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(1), HMI_ValueStruct.E_Temp);
-          EncoderRate.enabled = true;
-          break;
-      #endif
-      #if HAS_HEATED_BED
-        case TEMP_CASE_BED: // Bed temperature
-          checkkey = BedTemp;
-          HMI_ValueStruct.Bed_Temp = thermalManager.degTargetBed();
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(2), HMI_ValueStruct.Bed_Temp);
-          EncoderRate.enabled = true;
-          break;
-      #endif
-      #if HAS_FAN
-        case TEMP_CASE_FAN: // Fan speed
-          checkkey = FanSpeed;
-          HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(3), HMI_ValueStruct.Fan_speed);
-          EncoderRate.enabled = true;
-          break;
-      #endif
-      #if HAS_HOTEND
-        case TEMP_CASE_PLA: { // PLA preheat setting
-          checkkey = PLAPreheat;
-          select_PLA.reset();
-          HMI_ValueStruct.show_mode = -2;
-
-          Clear_Main_Window();
-
-          if (HMI_IsChinese()) {
-            DWIN_Frame_TitleCopy(1, 59, 16, 139, 29);                                         // "PLA Settings"
-            DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_TEMP));
-            DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(PREHEAT_CASE_TEMP));     // PLA nozzle temp
-            #if HAS_HEATED_BED
-              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_BED));
-              DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX + 24, MBASE(PREHEAT_CASE_BED));  // PLA bed temp
-            #endif
-            #if HAS_FAN
-              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_FAN));
-              DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX + 24, MBASE(PREHEAT_CASE_FAN)); // PLA fan speed
-            #endif
-            #if ENABLED(EEPROM_SETTINGS)
-              DWIN_Frame_AreaCopy(1, 72, 148, 151, 162, LBLX, MBASE(PREHEAT_CASE_SAVE));      // Save PLA configuration
-            #endif
-          }
-          else {
-            #ifdef USE_STRING_HEADINGS
-              Draw_Title("PLA Settings"); // TODO: GET_TEXT_F
-            #else
-              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                       // "PLA Settings"
-            #endif
-            #ifdef USE_STRING_TITLES
-              DWIN_Draw_Label(MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
-              #if HAS_HEATED_BED
-                DWIN_Draw_Label(MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
-              #endif
-              #if HAS_FAN
-                DWIN_Draw_Label(MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
-              #endif
-              #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Draw_Label(MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
-              #endif
-            #else
-              DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_TEMP));
-              DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(PREHEAT_CASE_TEMP));
-              DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(PREHEAT_CASE_TEMP));      // PLA nozzle temp
-              #if HAS_HEATED_BED
-                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_BED) + 3);
-                DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(PREHEAT_CASE_BED) + 3);
-                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 54, MBASE(PREHEAT_CASE_BED) + 3); // PLA bed temp
-              #endif
-              #if HAS_FAN
-                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_FAN));
-                DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(PREHEAT_CASE_FAN));    // PLA fan speed
-              #endif
-              #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(PREHEAT_CASE_SAVE));      // Save PLA configuration
-              #endif
-            #endif
-          }
-
-          Draw_Back_First();
-
-          uint8_t i = 0;
-          Draw_Menu_Line(++i, ICON_SetEndTemp);
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[0].hotend_temp);
-          #if HAS_HEATED_BED
-            Draw_Menu_Line(++i, ICON_SetBedTemp);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[0].bed_temp);
-          #endif
-          #if HAS_FAN
-            Draw_Menu_Line(++i, ICON_FanSpeed);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[0].fan_speed);
-          #endif
-          #if ENABLED(EEPROM_SETTINGS)
-            Draw_Menu_Line(++i, ICON_WriteEEPROM);
-          #endif
-        } break;
-
-        case TEMP_CASE_ABS: { // ABS preheat setting
-          checkkey = ABSPreheat;
-          select_ABS.reset();
-          HMI_ValueStruct.show_mode = -3;
-
-          Clear_Main_Window();
-
-          if (HMI_IsChinese()) {
-            DWIN_Frame_TitleCopy(1, 142, 16, 223, 29);                                        // "ABS Settings"
-
-            DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_TEMP));
-            DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(PREHEAT_CASE_TEMP));    // ABS nozzle temp
-            #if HAS_HEATED_BED
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_BED));
-              DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX + 24, MBASE(PREHEAT_CASE_BED));  // ABS bed temp
-            #endif
-            #if HAS_FAN
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_FAN));
-              DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX + 24, MBASE(PREHEAT_CASE_FAN)); // ABS fan speed
-            #endif
-            #if ENABLED(EEPROM_SETTINGS)
-              DWIN_Frame_AreaCopy(1, 72, 148, 151, 162, LBLX, MBASE(PREHEAT_CASE_SAVE));
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX + 28, MBASE(PREHEAT_CASE_SAVE) + 2);   // Save ABS configuration
-            #endif
-          }
-          else {
-            #ifdef USE_STRING_HEADINGS
-              Draw_Title("ABS Settings"); // TODO: GET_TEXT_F
-            #else
-              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                                  // "ABS Settings"
-            #endif
-            #ifdef USE_STRING_TITLES
-              DWIN_Draw_Label(MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
-              #if HAS_HEATED_BED
-                DWIN_Draw_Label(MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
-              #endif
-              #if HAS_FAN
-                DWIN_Draw_Label(MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
-              #endif
-              #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Draw_Label(MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
-              #endif
-            #else
-              DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_TEMP));
-              DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(PREHEAT_CASE_TEMP));
-              DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(PREHEAT_CASE_TEMP));      // ABS nozzle temp
-              #if HAS_HEATED_BED
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_BED) + 3);
-                DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(PREHEAT_CASE_BED) + 3);
-                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 54, MBASE(PREHEAT_CASE_BED) + 3); // ABS bed temp
-              #endif
-              #if HAS_FAN
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_FAN));
-                DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(PREHEAT_CASE_FAN));             // ABS fan speed
-              #endif
-              #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(PREHEAT_CASE_SAVE));
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 33, MBASE(PREHEAT_CASE_SAVE));                     // Save ABS configuration
-              #endif
-            #endif
-          }
-
-          Draw_Back_First();
-
-          uint8_t i = 0;
-          Draw_Menu_Line(++i, ICON_SetEndTemp);
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[1].hotend_temp);
-          #if HAS_HEATED_BED
-            Draw_Menu_Line(++i, ICON_SetBedTemp);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[1].bed_temp);
-          #endif
-          #if HAS_FAN
-            Draw_Menu_Line(++i, ICON_FanSpeed);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[1].fan_speed);
-          #endif
-          #if ENABLED(EEPROM_SETTINGS)
-            Draw_Menu_Line(++i, ICON_WriteEEPROM);
-          #endif
-
-        } break;
-
-      #endif // HAS_HOTEND
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-void Draw_Max_Speed_Menu() {
-  Clear_Main_Window();
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Max Speed (mm/s)"
-
-    auto say_max_speed = [](const uint16_t row) {
-      DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, row);              // "Max speed"
-    };
-
-    say_max_speed(MBASE(1));                                              // "Max speed"
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 58, MBASE(1));      // X
-    say_max_speed(MBASE(2));                                              // "Max speed"
-    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 58, MBASE(2) + 3);      // Y
-    say_max_speed(MBASE(3));                                              // "Max speed"
-    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 58, MBASE(3) + 3);     // Z
-    #if HAS_HOTEND
-      say_max_speed(MBASE(4));                                            // "Max speed"
-      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 58, MBASE(4) + 3);  // E
-    #endif
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title("Max Speed (mm/s)"); // TODO: GET_TEXT_F
-    #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Max Speed (mm/s)"
-    #endif
-    #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(1), F("Max Feedrate X"));
-      DWIN_Draw_Label(MBASE(2), F("Max Feedrate Y"));
-      DWIN_Draw_Label(MBASE(3), F("Max Feedrate Z"));
-      #if HAS_HOTEND
-        DWIN_Draw_Label(MBASE(4), F("Max Feedrate E"));
-      #endif
-    #else
-      draw_max_en(MBASE(1));          // "Max"
-      DWIN_Frame_AreaCopy(1, 184, 119, 234, 132, LBLX + 27, MBASE(1)); // "Speed X"
-
-      draw_max_en(MBASE(2));          // "Max"
-      draw_speed_en(27, MBASE(2));    // "Speed"
-      say_y(70, MBASE(2));            // "Y"
-
-      draw_max_en(MBASE(3));          // "Max"
-      draw_speed_en(27, MBASE(3));    // "Speed"
-      say_z(70, MBASE(3));            // "Z"
-
-      #if HAS_HOTEND
-        draw_max_en(MBASE(4));        // "Max"
-        draw_speed_en(27, MBASE(4));  // "Speed"
-        say_e(70, MBASE(4));          // "E"
-      #endif
-    #endif
-  }
-
-  Draw_Back_First();
-  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedX + i);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(1), planner.settings.max_feedrate_mm_s[X_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(2), planner.settings.max_feedrate_mm_s[Y_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(3), planner.settings.max_feedrate_mm_s[Z_AXIS]);
-  #if HAS_HOTEND
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(4), planner.settings.max_feedrate_mm_s[E_AXIS]);
-  #endif
-}
-
-void Draw_Max_Accel_Menu() {
-  Clear_Main_Window();
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Acceleration"
-
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(1) + 1);
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 71, MBASE(1));   // Max acceleration X
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(2) + 1);
-    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 71, MBASE(2) + 2);   // Max acceleration Y
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(3) + 1);
-    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 71, MBASE(3) + 2);  // Max acceleration Z
-    #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(4));
-      DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(4) + 1);
-      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 71, MBASE(4) + 2); // Max acceleration E
-    #endif
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_ACCELERATION));
-    #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);          // "Acceleration"
-    #endif
-    #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(1), F("Max Accel X"));
-      DWIN_Draw_Label(MBASE(2), F("Max Accel Y"));
-      DWIN_Draw_Label(MBASE(3), F("Max Accel Z"));
-      #if HAS_HOTEND
-        DWIN_Draw_Label(MBASE(4), F("Max Accel E"));
-      #endif
-    #else
-      draw_max_accel_en(MBASE(1)); say_x(108, MBASE(1));  // "Max Acceleration X"
-      draw_max_accel_en(MBASE(2)); say_y(108, MBASE(2));  // "Max Acceleration Y"
-      draw_max_accel_en(MBASE(3)); say_z(108, MBASE(3));  // "Max Acceleration Z"
-      #if HAS_HOTEND
-        draw_max_accel_en(MBASE(4)); say_e(108, MBASE(4)); // "Max Acceleration E"
-      #endif
-    #endif
-  }
-
-  Draw_Back_First();
-  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxAccX + i);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(1), planner.settings.max_acceleration_mm_per_s2[X_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(2), planner.settings.max_acceleration_mm_per_s2[Y_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(3), planner.settings.max_acceleration_mm_per_s2[Z_AXIS]);
-  #if HAS_HOTEND
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(4), planner.settings.max_acceleration_mm_per_s2[E_AXIS]);
-  #endif
-}
-
-#if HAS_CLASSIC_JERK
-  void Draw_Max_Jerk_Menu() {
-    Clear_Main_Window();
-
-    if (HMI_IsChinese()) {
-      DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Jerk"
-
-      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(1));
-      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(1) + 1);
-      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(1));
-      DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 83, MBASE(1));        // Max Jerk speed X
-      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(2));
-      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(2) + 1);
-      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(2));
-      DWIN_Frame_AreaCopy(1,   1, 150,   7, 160, LBLX + 83, MBASE(2) + 3);    // Max Jerk speed Y
-      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(3));
-      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(3) + 1);
-      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(3));
-      DWIN_Frame_AreaCopy(1,   9, 150,  16, 160, LBLX + 83, MBASE(3) + 3);    // Max Jerk speed Z
-      #if HAS_HOTEND
-        DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(4));
-        DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(4) + 1);
-        DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(4));
-        DWIN_Frame_AreaCopy(1,  18, 150,  25, 160, LBLX + 83, MBASE(4) + 3);  // Max Jerk speed E
-      #endif
-    }
-    else {
-      #ifdef USE_STRING_HEADINGS
-        Draw_Title(GET_TEXT_F(MSG_JERK));
-      #else
-        DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Jerk"
-      #endif
-      #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(MBASE(1), F("Max Jerk X"));
-        DWIN_Draw_Label(MBASE(2), F("Max Jerk Y"));
-        DWIN_Draw_Label(MBASE(3), F("Max Jerk Z"));
-        #if HAS_HOTEND
-          DWIN_Draw_Label(MBASE(4), F("Max Jerk E"));
-        #endif
-      #else
-        draw_max_en(MBASE(1));          // "Max"
-        draw_jerk_en(MBASE(1));         // "Jerk"
-        draw_speed_en(72, MBASE(1));    // "Speed"
-        say_x(115, MBASE(1));           // "X"
-
-        draw_max_en(MBASE(2));          // "Max"
-        draw_jerk_en(MBASE(2));         // "Jerk"
-        draw_speed_en(72, MBASE(2));    // "Speed"
-        say_y(115, MBASE(2));           // "Y"
-
-        draw_max_en(MBASE(3));          // "Max"
-        draw_jerk_en(MBASE(3));         // "Jerk"
-        draw_speed_en(72, MBASE(3));    // "Speed"
-        say_z(115, MBASE(3));           // "Z"
-
-        #if HAS_HOTEND
-          draw_max_en(MBASE(4));        // "Max"
-          draw_jerk_en(MBASE(4));       // "Jerk"
-          draw_speed_en(72, MBASE(4));  // "Speed"
-          say_e(115, MBASE(4));         // "E"
-        #endif
-      #endif
-    }
-
-    Draw_Back_First();
-    LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
-    #if HAS_HOTEND
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
-    #endif
-  }
-#endif
-
-void Draw_Steps_Menu() {
-  Clear_Main_Window();
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Steps per mm"
-
-    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 44, MBASE(1)); // Transmission Ratio X
-    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 44, MBASE(2) + 3); // Transmission Ratio Y
-    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 44, MBASE(3) + 3); // Transmission Ratio Z
-    #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(4));
-      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 44, MBASE(4) + 3); // Transmission Ratio E
-    #endif
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_STEPS_PER_MM));
-    #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Steps per mm"
-    #endif
-    #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(1), F("Steps/mm X"));
-      DWIN_Draw_Label(MBASE(2), F("Steps/mm Y"));
-      DWIN_Draw_Label(MBASE(3), F("Steps/mm Z"));
-      #if HAS_HOTEND
-        DWIN_Draw_Label(MBASE(4), F("Steps/mm E"));
-      #endif
-    #else
-      draw_steps_per_mm(MBASE(1)); say_x(103, MBASE(1)); // "Steps-per-mm X"
-      draw_steps_per_mm(MBASE(2)); say_y(103, MBASE(2)); // "Y"
-      draw_steps_per_mm(MBASE(3)); say_z(103, MBASE(3)); // "Z"
-      #if HAS_HOTEND
-        draw_steps_per_mm(MBASE(4)); say_e(103, MBASE(4)); // "E"
-      #endif
-    #endif
-  }
-
-  Draw_Back_First();
-  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_StepX + i);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(1), planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(2), planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(3), planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
-  #if HAS_HOTEND
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(4), planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
-  #endif
-}
-
-/* Motion */
-void HMI_Motion() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_motion.inc(1 + MOTION_CASE_TOTAL)) Move_Highlight(1, select_motion.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_motion.dec()) Move_Highlight(-1, select_motion.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_motion.now) {
-      case 0: // Back
-        checkkey = Control;
-        select_control.set(CONTROL_CASE_MOVE);
-        index_control = MROWS;
-        Draw_Control_Menu();
-        break;
-      case MOTION_CASE_RATE:   // Max speed
-        checkkey = MaxSpeed;
-        select_speed.reset();
-        Draw_Max_Speed_Menu();
-        break;
-      case MOTION_CASE_ACCEL:  // Max acceleration
-        checkkey = MaxAcceleration;
-        select_acc.reset();
-        Draw_Max_Accel_Menu();
-        break;
-      #if HAS_CLASSIC_JERK
-        case MOTION_CASE_JERK: // Max jerk
-          checkkey = MaxJerk;
-          select_jerk.reset();
-          Draw_Max_Jerk_Menu();
-         break;
-      #endif
-      case MOTION_CASE_STEPS:  // Steps per mm
-        checkkey = Step;
-        select_step.reset();
-        Draw_Steps_Menu();
-        break;
-      default: break;
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-/* Advanced Settings */
-void HMI_AdvSet() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_advset.inc(1 + ADVSET_CASE_TOTAL)) {
-      if (select_advset.now > MROWS && select_advset.now > index_advset) {
-        index_advset = select_advset.now;
-
-        // Scroll up and draw a blank bottom line
-        Scroll_Menu(DWIN_SCROLL_UP);
-
-        //switch (index_advset) {  // Redraw last menu items
-        //  default: break;
-        //}
-
-      }
-      else {
-        Move_Highlight(1, select_advset.now + MROWS - index_advset);
-      }
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_advset.dec()) {
-      if (select_advset.now < index_advset - MROWS) {
-        index_advset--;
-        Scroll_Menu(DWIN_SCROLL_DOWN);
-
-        //switch (index_advset) {  // Redraw first menu items
-        //  default: break;
-        //}
-      }
-      else {
-        Move_Highlight(-1, select_advset.now + MROWS - index_advset);
-      }
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_advset.now) {
-      case 0: // Back
-        checkkey = Control;
-        select_control.set(CONTROL_CASE_ADVSET);
-        index_control = CONTROL_CASE_ADVSET;
-        Draw_Control_Menu();
-        break;
-
-      #if HAS_HOME_OFFSET
-        case ADVSET_CASE_HOMEOFF:   // Home Offsets
-          checkkey = HomeOff;
-          select_item.reset();
-          HMI_ValueStruct.Home_OffX_scaled = home_offset[X_AXIS] * 10;
-          HMI_ValueStruct.Home_OffY_scaled = home_offset[Y_AXIS] * 10;
-          HMI_ValueStruct.Home_OffZ_scaled = home_offset[Z_AXIS] * 10;
-          Draw_HomeOff_Menu();
-          break;
-      #endif
-
-      #if HAS_ONESTEP_LEVELING
-        case ADVSET_CASE_PROBEOFF:   // Probe Offsets
-          checkkey = ProbeOff;
-          select_item.reset();
-          HMI_ValueStruct.Probe_OffX_scaled = probe.offset.x * 10;
-          HMI_ValueStruct.Probe_OffY_scaled = probe.offset.y * 10;
-          Draw_ProbeOff_Menu();
-          break;
-      #endif
-
-      #if HAS_HOTEND
-        case ADVSET_CASE_HEPID:   // Nozzle PID Autotune
-          thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0);
-          thermalManager.PID_autotune(ui.material_preset[0].hotend_temp, H_E0, 10, true);
-          break;
-      #endif
-
-      #if HAS_HEATED_BED
-        case ADVSET_CASE_BEDPID:  // Bed PID Autotune
-          thermalManager.setTargetBed(ui.material_preset[0].bed_temp);
-          thermalManager.PID_autotune(ui.material_preset[0].bed_temp, H_BED, 10, true);
-          break;
-      #endif
-
-      #if ENABLED(POWER_LOSS_RECOVERY)
-        case ADVSET_CASE_PWRLOSSR:  // Power-loss recovery
-          recovery.enable(!recovery.enabled);
-          Draw_Chkb_Line(ADVSET_CASE_PWRLOSSR + MROWS - index_advset, recovery.enabled);
-          break;
-      #endif
-      default: break;
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-#if HAS_HOME_OFFSET
-
-  /* Home Offset */
-  void HMI_HomeOff() {
-    ENCODER_DiffState encoder_diffState = get_encoder_state();
-    if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-    // Avoid flicker by updating only the previous menu
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      if (select_item.inc(1 + 3)) Move_Highlight(1, select_item.now);
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      if (select_item.dec()) Move_Highlight(-1, select_item.now);
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-      switch (select_item.now) {
-        case 0: // Back
-          checkkey = AdvSet;
-          select_advset.set(ADVSET_CASE_HOMEOFF);
-          Draw_AdvSet_Menu();
-          break;
-        case 1: // Home Offset X
-          checkkey = HomeOffX;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Home_OffX_scaled);
-          EncoderRate.enabled = true;
-          break;
-        case 2: // Home Offset Y
-          checkkey = HomeOffY;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Home_OffY_scaled);
-          EncoderRate.enabled = true;
-          break;
-        case 3: // Home Offset Z
-          checkkey = HomeOffZ;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Home_OffZ_scaled);
-          EncoderRate.enabled = true;
-          break;
-        default: break;
-      }
-    }
-    DWIN_UpdateLCD();
-  }
-
-  void HMI_HomeOffN(const AxisEnum axis, float &posScaled, const_float_t lo, const_float_t hi) {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      if (Apply_Encoder(encoder_diffState, posScaled)) {
-        checkkey = HomeOff;
-        EncoderRate.enabled = false;
-        set_home_offset(axis, posScaled / 10);
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(select_item.now), posScaled);
-        return;
-      }
-      LIMIT(posScaled, lo, hi);
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 216, MBASE(select_item.now), posScaled);
-    }
-  }
-
-  void HMI_HomeOffX() { HMI_HomeOffN(X_AXIS, HMI_ValueStruct.Home_OffX_scaled, -500, 500); }
-  void HMI_HomeOffY() { HMI_HomeOffN(Y_AXIS, HMI_ValueStruct.Home_OffY_scaled, -500, 500); }
-  void HMI_HomeOffZ() { HMI_HomeOffN(Z_AXIS, HMI_ValueStruct.Home_OffZ_scaled,  -20,  20); }
-
-#endif // HAS_HOME_OFFSET
-
-#if HAS_ONESTEP_LEVELING
-  /*Probe Offset */
-  void HMI_ProbeOff() {
-    ENCODER_DiffState encoder_diffState = get_encoder_state();
-    if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-    // Avoid flicker by updating only the previous menu
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      if (select_item.inc(1 + 2)) Move_Highlight(1, select_item.now);
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      if (select_item.dec()) Move_Highlight(-1, select_item.now);
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-      switch (select_item.now) {
-        case 0: // Back
-          checkkey = AdvSet;
-          select_advset.set(ADVSET_CASE_PROBEOFF);
-          Draw_AdvSet_Menu();
-          break;
-        case 1: // Probe Offset X
-          checkkey = ProbeOffX;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Probe_OffX_scaled);
-          EncoderRate.enabled = true;
-          break;
-        case 2: // Probe Offset X
-          checkkey = ProbeOffY;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Probe_OffY_scaled);
-          EncoderRate.enabled = true;
-          break;
-      }
-    }
-    DWIN_UpdateLCD();
-  }
-
-  void HMI_ProbeOffN(float &posScaled, float &offset_ref) {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      if (Apply_Encoder(encoder_diffState, posScaled)) {
-        checkkey = ProbeOff;
-        EncoderRate.enabled = false;
-        offset_ref = posScaled / 10;
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(select_item.now), posScaled);
-        return;
-      }
-      LIMIT(posScaled, -500, 500);
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 216, MBASE(select_item.now), posScaled);
-    }
-  }
-
-  void HMI_ProbeOffX() { HMI_ProbeOffN(HMI_ValueStruct.Probe_OffX_scaled, probe.offset.x); }
-  void HMI_ProbeOffY() { HMI_ProbeOffN(HMI_ValueStruct.Probe_OffY_scaled, probe.offset.y); }
-
-#endif // HAS_ONESTEP_LEVELING
-
-/* Info */
-void HMI_Info() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    #if HAS_ONESTEP_LEVELING
-      checkkey = Control;
-      select_control.set(CONTROL_CASE_INFO);
-      Draw_Control_Menu();
-    #else
-      select_page.set(3);
-      Goto_MainMenu();
-    #endif
-  }
-  DWIN_UpdateLCD();
-}
-
-/* Tune */
-void HMI_Tune() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_tune.inc(1 + TUNE_CASE_TOTAL)) {
-      if (select_tune.now > MROWS && select_tune.now > index_tune) {
-        index_tune = select_tune.now;
-        Scroll_Menu(DWIN_SCROLL_UP);
-      }
-      else {
-        Move_Highlight(1, select_tune.now + MROWS - index_tune);
-      }
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_tune.dec()) {
-      if (select_tune.now < index_tune - MROWS) {
-        index_tune--;
-        Scroll_Menu(DWIN_SCROLL_DOWN);
-        if (index_tune == MROWS) Draw_Back_First();
-      }
-      else {
-        Move_Highlight(-1, select_tune.now + MROWS - index_tune);
-      }
-    }
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_tune.now) {
-      case 0: { // Back
-        select_print.set(0);
-        Goto_PrintProcess();
-      }
-      break;
-      case TUNE_CASE_SPEED: // Print speed
-        checkkey = PrintSpeed;
-        HMI_ValueStruct.print_speed = feedrate_percentage;
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_SPEED + MROWS - index_tune), HMI_ValueStruct.print_speed);
-        EncoderRate.enabled = true;
-        break;
-      #if HAS_HOTEND
-        case TUNE_CASE_TEMP: // Nozzle temp
-          checkkey = ETemp;
-          HMI_ValueStruct.E_Temp = thermalManager.degTargetHotend(0);
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), HMI_ValueStruct.E_Temp);
-          EncoderRate.enabled = true;
-          break;
-      #endif
-      #if HAS_HEATED_BED
-        case TUNE_CASE_BED: // Bed temp
-          checkkey = BedTemp;
-          HMI_ValueStruct.Bed_Temp = thermalManager.degTargetBed();
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), HMI_ValueStruct.Bed_Temp);
-          EncoderRate.enabled = true;
-          break;
-      #endif
-      #if HAS_FAN
-        case TUNE_CASE_FAN: // Fan speed
-          checkkey = FanSpeed;
-          HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), HMI_ValueStruct.Fan_speed);
-          EncoderRate.enabled = true;
-          break;
-      #endif
-      #if HAS_ZOFFSET_ITEM
-        case TUNE_CASE_ZOFF: // Z-offset
-          #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
-            checkkey = Homeoffset;
-            HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
-            DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(TUNE_CASE_ZOFF + MROWS - index_tune), HMI_ValueStruct.offset_value);
-            EncoderRate.enabled = true;
-          #else
-            // Apply workspace offset, making the current position 0,0,0
-            queue.inject_P(PSTR("G92 X0 Y0 Z0"));
-            HMI_AudioFeedback();
-          #endif
-        break;
-      #endif
-      default: break;
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-#if HAS_PREHEAT
-
-  /* PLA Preheat */
-  void HMI_PLAPreheatSetting() {
-    ENCODER_DiffState encoder_diffState = get_encoder_state();
-    if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-    // Avoid flicker by updating only the previous menu
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      if (select_PLA.inc(1 + PREHEAT_CASE_TOTAL)) Move_Highlight(1, select_PLA.now);
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      if (select_PLA.dec()) Move_Highlight(-1, select_PLA.now);
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-      switch (select_PLA.now) {
-        case 0: // Back
-          checkkey = TemperatureID;
-          select_temp.now = TEMP_CASE_PLA;
-          HMI_ValueStruct.show_mode = -1;
-          Draw_Temperature_Menu();
-          break;
-        #if HAS_HOTEND
-          case PREHEAT_CASE_TEMP: // Nozzle temperature
-            checkkey = ETemp;
-            HMI_ValueStruct.E_Temp = ui.material_preset[0].hotend_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_TEMP), ui.material_preset[0].hotend_temp);
-            EncoderRate.enabled = true;
-            break;
-        #endif
-        #if HAS_HEATED_BED
-          case PREHEAT_CASE_BED: // Bed temperature
-            checkkey = BedTemp;
-            HMI_ValueStruct.Bed_Temp = ui.material_preset[0].bed_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_BED), ui.material_preset[0].bed_temp);
-            EncoderRate.enabled = true;
-            break;
-        #endif
-        #if HAS_FAN
-          case PREHEAT_CASE_FAN: // Fan speed
-            checkkey = FanSpeed;
-            HMI_ValueStruct.Fan_speed = ui.material_preset[0].fan_speed;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_FAN), ui.material_preset[0].fan_speed);
-            EncoderRate.enabled = true;
-            break;
-        #endif
-        #if ENABLED(EEPROM_SETTINGS)
-          case 4: { // Save PLA configuration
-            const bool success = settings.save();
-            HMI_AudioFeedback(success);
-          } break;
-        #endif
-        default: break;
-      }
-    }
-    DWIN_UpdateLCD();
-  }
-
-  /* ABS Preheat */
-  void HMI_ABSPreheatSetting() {
-    ENCODER_DiffState encoder_diffState = get_encoder_state();
-    if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-    // Avoid flicker by updating only the previous menu
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      if (select_ABS.inc(1 + PREHEAT_CASE_TOTAL)) Move_Highlight(1, select_ABS.now);
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      if (select_ABS.dec()) Move_Highlight(-1, select_ABS.now);
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-      switch (select_ABS.now) {
-        case 0: // Back
-          checkkey = TemperatureID;
-          select_temp.now = TEMP_CASE_ABS;
-          HMI_ValueStruct.show_mode = -1;
-          Draw_Temperature_Menu();
-          break;
-        #if HAS_HOTEND
-          case PREHEAT_CASE_TEMP: // Set nozzle temperature
-            checkkey = ETemp;
-            HMI_ValueStruct.E_Temp = ui.material_preset[1].hotend_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_TEMP), ui.material_preset[1].hotend_temp);
-            EncoderRate.enabled = true;
-            break;
-        #endif
-        #if HAS_HEATED_BED
-          case PREHEAT_CASE_BED: // Set bed temperature
-            checkkey = BedTemp;
-            HMI_ValueStruct.Bed_Temp = ui.material_preset[1].bed_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_BED), ui.material_preset[1].bed_temp);
-            EncoderRate.enabled = true;
-            break;
-        #endif
-        #if HAS_FAN
-          case PREHEAT_CASE_FAN: // Set fan speed
-            checkkey = FanSpeed;
-            HMI_ValueStruct.Fan_speed = ui.material_preset[1].fan_speed;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_FAN), ui.material_preset[1].fan_speed);
-            EncoderRate.enabled = true;
-            break;
-        #endif
-        #if ENABLED(EEPROM_SETTINGS)
-          case PREHEAT_CASE_SAVE: { // Save ABS configuration
-            const bool success = settings.save();
-            HMI_AudioFeedback(success);
-          } break;
-        #endif
-        default: break;
-      }
-    }
-    DWIN_UpdateLCD();
-  }
-
-#endif
-
-/* Max Speed */
-void HMI_MaxSpeed() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_speed.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_speed.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_speed.dec()) Move_Highlight(-1, select_speed.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    if (WITHIN(select_speed.now, 1, 4)) {
-      checkkey = MaxSpeed_value;
-      HMI_flag.feedspeed_axis = AxisEnum(select_speed.now - 1);
-      HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[HMI_flag.feedspeed_axis];
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
-      EncoderRate.enabled = true;
-    }
-    else { // Back
-      checkkey = Motion;
-      select_motion.now = MOTION_CASE_RATE;
-      Draw_Motion_Menu();
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-/* Max Acceleration */
-void HMI_MaxAcceleration() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_acc.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_acc.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_acc.dec()) Move_Highlight(-1, select_acc.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    if (WITHIN(select_acc.now, 1, 4)) {
-      checkkey = MaxAcceleration_value;
-      HMI_flag.acc_axis = AxisEnum(select_acc.now - 1);
-      HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[HMI_flag.acc_axis];
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
-      EncoderRate.enabled = true;
-    }
-    else { // Back
-      checkkey = Motion;
-      select_motion.now = MOTION_CASE_ACCEL;
-      Draw_Motion_Menu();
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-#if HAS_CLASSIC_JERK
-  /* Max Jerk */
-  void HMI_MaxJerk() {
-    ENCODER_DiffState encoder_diffState = get_encoder_state();
-    if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-    // Avoid flicker by updating only the previous menu
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      if (select_jerk.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_jerk.now);
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      if (select_jerk.dec()) Move_Highlight(-1, select_jerk.now);
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-      if (WITHIN(select_jerk.now, 1, 4)) {
-        checkkey = MaxJerk_value;
-        HMI_flag.jerk_axis = AxisEnum(select_jerk.now - 1);
-        HMI_ValueStruct.Max_Jerk_scaled = planner.max_jerk[HMI_flag.jerk_axis] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
-        EncoderRate.enabled = true;
-      }
-      else { // Back
-        checkkey = Motion;
-        select_motion.now = MOTION_CASE_JERK;
-        Draw_Motion_Menu();
-      }
-    }
-    DWIN_UpdateLCD();
-  }
-#endif // HAS_CLASSIC_JERK
-
-/* Step */
-void HMI_Step() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_step.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_step.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_step.dec()) Move_Highlight(-1, select_step.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    if (WITHIN(select_step.now, 1, 4)) {
-      checkkey = Step_value;
-      HMI_flag.step_axis = AxisEnum(select_step.now - 1);
-      HMI_ValueStruct.Max_Step_scaled = planner.settings.axis_steps_per_mm[HMI_flag.step_axis] * MINUNITMULT;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
-      EncoderRate.enabled = true;
-    }
-    else { // Back
-      checkkey = Motion;
-      select_motion.now = MOTION_CASE_STEPS;
-      Draw_Motion_Menu();
-    }
-  }
-  DWIN_UpdateLCD();
-}
-
-void HMI_Init() {
-  HMI_SDCardInit();
-
-  for (uint16_t t = 0; t <= 100; t += 2) {
-    DWIN_ICON_Show(ICON, ICON_Bar, 15, 260);
-    DWIN_Draw_Rectangle(1, Color_Bg_Black, 15 + t * 242 / 100, 260, 257, 280);
-    DWIN_UpdateLCD();
-    delay(20);
-  }
-
-  HMI_SetLanguage();
-}
-
-void DWIN_Update() {
-  EachMomentUpdate();   // Status update
-  HMI_SDCardUpdate();   // SD card update
-  DWIN_HandleScreen();  // Rotary encoder update
-}
-
-void EachMomentUpdate() {
-  static millis_t next_var_update_ms = 0, next_rts_update_ms = 0;
-
-  const millis_t ms = millis();
-  if (ELAPSED(ms, next_var_update_ms)) {
-    next_var_update_ms = ms + DWIN_VAR_UPDATE_INTERVAL;
-    update_variable();
-  }
-
-  if (PENDING(ms, next_rts_update_ms)) return;
-  next_rts_update_ms = ms + DWIN_SCROLL_UPDATE_INTERVAL;
-
-  if (checkkey == PrintProcess) {
-    // if print done
-    if (HMI_flag.print_finish && !HMI_flag.done_confirm_flag) {
-      HMI_flag.print_finish = false;
-      HMI_flag.done_confirm_flag = true;
-
-      TERN_(POWER_LOSS_RECOVERY, recovery.cancel());
-
-      planner.finish_and_disable();
-
-      // show percent bar and value
-      _card_percent = 0;
-      Draw_Print_ProgressBar();
-
-      // show print done confirm
-      DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 250, DWIN_WIDTH - 1, STATUS_Y);
-      DWIN_ICON_Show(ICON, HMI_IsChinese() ? ICON_Confirm_C : ICON_Confirm_E, 86, 283);
-    }
-    else if (HMI_flag.pause_flag != printingIsPaused()) {
-      // print status update
-      HMI_flag.pause_flag = printingIsPaused();
-      if (HMI_flag.pause_flag) ICON_Continue(); else ICON_Pause();
-    }
-  }
-
-  // pause after homing
-  if (HMI_flag.pause_action && printingIsPaused() && !planner.has_blocks_queued()) {
-    HMI_flag.pause_action = false;
-    #if ENABLED(PAUSE_HEAT)
-      TERN_(HAS_HOTEND, resume_hotend_temp = thermalManager.degTargetHotend(0));
-      TERN_(HAS_HEATED_BED, resume_bed_temp = thermalManager.degTargetBed());
-      thermalManager.disable_all_heaters();
-    #endif
-    queue.inject_P(PSTR("G1 F1200 X0 Y0"));
-  }
-
-  if (card.isPrinting() && checkkey == PrintProcess) { // print process
-    const uint8_t card_pct = card.percentDone();
-    static uint8_t last_cardpercentValue = 101;
-    if (last_cardpercentValue != card_pct) { // print percent
-      last_cardpercentValue = card_pct;
-      if (card_pct) {
-        _card_percent = card_pct;
-        Draw_Print_ProgressBar();
-      }
-    }
-
-    duration_t elapsed = print_job_timer.duration(); // print timer
-
-    // Print time so far
-    static uint16_t last_Printtime = 0;
-    const uint16_t min = (elapsed.value % 3600) / 60;
-    if (last_Printtime != min) { // 1 minute update
-      last_Printtime = min;
-      Draw_Print_ProgressElapsed();
-    }
-
-    // Estimate remaining time every 20 seconds
-    static millis_t next_remain_time_update = 0;
-    if (_card_percent > 1 && ELAPSED(ms, next_remain_time_update) && !HMI_flag.heat_flag) {
-      _remain_time = (elapsed.value - dwin_heat_time) / (_card_percent * 0.01f) - (elapsed.value - dwin_heat_time);
-      next_remain_time_update += DWIN_REMAIN_TIME_UPDATE_INTERVAL;
-      Draw_Print_ProgressRemain();
-    }
-  }
-  else if (dwin_abort_flag && !HMI_flag.home_flag) { // Print Stop
-    dwin_abort_flag = false;
-    HMI_ValueStruct.print_speed = feedrate_percentage = 100;
-    dwin_zoffset = BABY_Z_VAR;
-    select_page.set(0);
-    Goto_MainMenu();
-  }
-  #if ENABLED(POWER_LOSS_RECOVERY)
-    else if (DWIN_lcd_sd_status && recovery.dwin_flag) { // resume print before power off
-      static bool recovery_flag = false;
-
-      recovery.dwin_flag = false;
-      recovery_flag = true;
-
-      auto update_selection = [&](const bool sel) {
-        HMI_flag.select_flag = sel;
-        const uint16_t c1 = sel ? Color_Bg_Window : Select_Color;
-        DWIN_Draw_Rectangle(0, c1, 25, 306, 126, 345);
-        DWIN_Draw_Rectangle(0, c1, 24, 305, 127, 346);
-        const uint16_t c2 = sel ? Select_Color : Color_Bg_Window;
-        DWIN_Draw_Rectangle(0, c2, 145, 306, 246, 345);
-        DWIN_Draw_Rectangle(0, c2, 144, 305, 247, 346);
-      };
-
-      Popup_Window_Resume();
-      update_selection(true);
-
-      // TODO: Get the name of the current file from someplace
-      //
-      //(void)recovery.interrupted_file_exists();
-      char * const name = card.longest_filename();
-      const int8_t npos = _MAX(0U, DWIN_WIDTH - strlen(name) * (MENU_CHR_W)) / 2;
-      DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, npos, 252, name);
-      DWIN_UpdateLCD();
-
-      while (recovery_flag) {
-        ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-        if (encoder_diffState != ENCODER_DIFF_NO) {
-          if (encoder_diffState == ENCODER_DIFF_ENTER) {
-            recovery_flag = false;
-            if (HMI_flag.select_flag) break;
-            TERN_(POWER_LOSS_RECOVERY, queue.inject_P(PSTR("M1000C")));
-            HMI_StartFrame(true);
-            return;
-          }
-          else
-            update_selection(encoder_diffState == ENCODER_DIFF_CW);
-
-          DWIN_UpdateLCD();
-        }
-      }
-
-      select_print.set(0);
-      HMI_ValueStruct.show_mode = 0;
-      queue.inject_P(PSTR("M1000"));
-      Goto_PrintProcess();
-      Draw_Status_Area(true);
-    }
-  #endif
-
-  DWIN_UpdateLCD();
-}
-
-void DWIN_HandleScreen() {
-  switch (checkkey) {
-    case MainMenu:        HMI_MainMenu(); break;
-    case SelectFile:      HMI_SelectFile(); break;
-    case Prepare:         HMI_Prepare(); break;
-    case Control:         HMI_Control(); break;
-    case Leveling:        break;
-    case PrintProcess:    HMI_Printing(); break;
-    case Print_window:    HMI_PauseOrStop(); break;
-    case AxisMove:        HMI_AxisMove(); break;
-    case TemperatureID:   HMI_Temperature(); break;
-    case Motion:          HMI_Motion(); break;
-    case AdvSet:          HMI_AdvSet(); break;
-    #if HAS_HOME_OFFSET
-      case HomeOff:       HMI_HomeOff(); break;
-      case HomeOffX:      HMI_HomeOffX(); break;
-      case HomeOffY:      HMI_HomeOffY(); break;
-      case HomeOffZ:      HMI_HomeOffZ(); break;
-    #endif
-    #if HAS_ONESTEP_LEVELING
-      case ProbeOff:      HMI_ProbeOff(); break;
-      case ProbeOffX:     HMI_ProbeOffX(); break;
-      case ProbeOffY:     HMI_ProbeOffY(); break;
-    #endif
-    case Info:            HMI_Info(); break;
-    case Tune:            HMI_Tune(); break;
-    #if HAS_PREHEAT
-      case PLAPreheat:    HMI_PLAPreheatSetting(); break;
-      case ABSPreheat:    HMI_ABSPreheatSetting(); break;
-    #endif
-    case MaxSpeed:        HMI_MaxSpeed(); break;
-    case MaxAcceleration: HMI_MaxAcceleration(); break;
-    #if HAS_CLASSIC_JERK
-      case MaxJerk:       HMI_MaxJerk(); break;
-    #endif
-    case Step:            HMI_Step(); break;
-    case Move_X:          HMI_Move_X(); break;
-    case Move_Y:          HMI_Move_Y(); break;
-    case Move_Z:          HMI_Move_Z(); break;
-    #if HAS_HOTEND
-      case Extruder:      HMI_Move_E(); break;
-      case ETemp:         HMI_ETemp(); break;
-    #endif
-    #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
-      case Homeoffset:    HMI_Zoffset(); break;
-    #endif
-    #if HAS_HEATED_BED
-      case BedTemp:       HMI_BedTemp(); break;
-    #endif
-    #if HAS_PREHEAT && HAS_FAN
-      case FanSpeed:      HMI_FanSpeed(); break;
-    #endif
-    case PrintSpeed:      HMI_PrintSpeed(); break;
-    case MaxSpeed_value:  HMI_MaxFeedspeedXYZE(); break;
-    case MaxAcceleration_value: HMI_MaxAccelerationXYZE(); break;
-    #if HAS_CLASSIC_JERK
-      case MaxJerk_value: HMI_MaxJerkXYZE(); break;
-    #endif
-    case Step_value:      HMI_StepXYZE(); break;
-    default: break;
-  }
-}
-
-void DWIN_CompletedHoming() {
-  HMI_flag.home_flag = false;
-  dwin_zoffset = TERN0(HAS_BED_PROBE, probe.offset.z);
-  if (checkkey == Last_Prepare) {
-    checkkey = Prepare;
-    select_prepare.now = PREPARE_CASE_HOME;
-    index_prepare = MROWS;
-    Draw_Prepare_Menu();
-  }
-  else if (checkkey == Back_Main) {
-    HMI_ValueStruct.print_speed = feedrate_percentage = 100;
-    planner.finish_and_disable();
-    Goto_MainMenu();
-  }
-}
-
-void DWIN_CompletedLeveling() {
-  if (checkkey == Leveling) Goto_MainMenu();
-}
-
-void DWIN_StatusChanged(const char *text) {
-  DWIN_Draw_Rectangle(1, Color_Bg_Blue, 0, STATUS_Y, DWIN_WIDTH, STATUS_Y + 20);
-  const int8_t x = _MAX(0U, DWIN_WIDTH - strlen_P(text) * MENU_CHR_W) / 2;
-  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Blue, x, STATUS_Y + 2, F(text));
-  DWIN_UpdateLCD();
-}
-
-void DWIN_StatusChanged_P(PGM_P const pstr) {
-  char str[strlen_P((const char*)pstr) + 1];
-  strcpy_P(str, (const char*)pstr);
-  DWIN_StatusChanged(str);
-}
-
-// GUI extension
-void DWIN_Draw_Checkbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool mode=false) {
-  DWIN_Draw_String(false,true,font8x16,Select_Color,bcolor,x+4,y,F(mode ? "x" : " "));
-  DWIN_Draw_Rectangle(0,color,x+2,y+2,x+17,y+17);
-}
-
-#endif // DWIN_CREALITY_LCD

commit 52718f3385fd663fc573c551b2dfb8123141a591
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jul 25 03:58:16 2021 -0500

    🎨 Add DWIN_StatusChanged_P

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 114590a043..38017b64d6 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -4128,6 +4128,12 @@ void DWIN_StatusChanged(const char *text) {
   DWIN_UpdateLCD();
 }
 
+void DWIN_StatusChanged_P(PGM_P const pstr) {
+  char str[strlen_P((const char*)pstr) + 1];
+  strcpy_P(str, (const char*)pstr);
+  DWIN_StatusChanged(str);
+}
+
 // GUI extension
 void DWIN_Draw_Checkbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool mode=false) {
   DWIN_Draw_String(false,true,font8x16,Select_Color,bcolor,x+4,y,F(mode ? "x" : " "));

commit 315a722b420226be0c07c05abf95a5b666caf1e6
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jul 12 22:52:17 2021 -0500

    🐛 TM3D fixes and improvements
    
    Co-Authored-By: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 9aea68dfcb..114590a043 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -2417,13 +2417,15 @@ void Draw_HomeOff_Menu() {
 #include "../../../libs/buzzer.h"
 
 void HMI_AudioFeedback(const bool success=true) {
-  if (success) {
-    buzzer.tone(100, 659);
-    buzzer.tone(10, 0);
-    buzzer.tone(100, 698);
-  }
-  else
-    buzzer.tone(40, 440);
+  #if HAS_BUZZER
+    if (success) {
+      buzzer.tone(100, 659);
+      buzzer.tone(10, 0);
+      buzzer.tone(100, 698);
+    }
+    else
+      buzzer.tone(40, 440);
+  #endif
 }
 
 /* Prepare */

commit 26bfc267977ddc444513c793c18f76847e23310e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jul 9 17:09:58 2021 -0500

    🎨 Check flags without ENABLED

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 777b56ac0e..9aea68dfcb 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -182,10 +182,10 @@ static uint8_t _card_percent = 0;
 static uint16_t _remain_time = 0;
 
 #if ENABLED(PAUSE_HEAT)
-  #if ENABLED(HAS_HOTEND)
+  #if HAS_HOTEND
     uint16_t resume_hotend_temp = 0;
   #endif
-  #if ENABLED(HAS_HEATED_BED)
+  #if HAS_HEATED_BED
     uint16_t resume_bed_temp = 0;
   #endif
 #endif

commit 7726af9c5348c1c7d0fd9a56eca87d00cd75fee6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Jun 5 09:18:47 2021 +0200

    🏗️ Support for up to 6 linear axes (#19112)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 76118d6814..777b56ac0e 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1235,7 +1235,7 @@ inline ENCODER_DiffState get_encoder_state() {
 void HMI_Plan_Move(const feedRate_t fr_mm_s) {
   if (!planner.is_full()) {
     planner.synchronize();
-    planner.buffer_line(current_position, fr_mm_s, active_extruder);
+    planner.buffer_line(current_position, fr_mm_s);
     DWIN_UpdateLCD();
   }
 }

commit b65cdbed91782c83188706a9c340de9c503cf430
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat May 8 04:35:35 2021 -0500

    Signal SD completion later (#21840)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 620b267bd2..76118d6814 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1891,7 +1891,7 @@ void HMI_SDCardUpdate() {
       else if (checkkey == PrintProcess || checkkey == Tune || printingIsActive()) {
         // TODO: Move card removed abort handling
         //       to CardReader::manage_media.
-        card.flag.abort_sd_printing = true;
+        card.abortFilePrintSoon();
         wait_for_heatup = wait_for_user = false;
         dwin_abort_flag = true; // Reset feedrate, return to Home
       }
@@ -2311,7 +2311,7 @@ void HMI_PauseOrStop() {
         checkkey = Back_Main;
         if (HMI_flag.home_flag) planner.synchronize(); // Wait for planner moves to finish!
         wait_for_heatup = wait_for_user = false;       // Stop waiting for heating/user
-        card.flag.abort_sd_printing = true;            // Let the main loop handle SD abort
+        card.abortFilePrintSoon();                     // Let the main loop handle SD abort
         dwin_abort_flag = true;                        // Reset feedrate, return to Home
         #ifdef ACTION_ON_CANCEL
           host_action_cancel();

commit 57025b75e13f05ec53b9117c890f0e5a8db8d01e
Author: Adrian DC <AdrianDC@users.noreply.github.com>
Date:   Sat May 8 08:46:21 2021 +0200

    Fix E3V2 Control Menu icon/text order (#21838)
    
    Fixes #21837

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index dc729263db..620b267bd2 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -815,8 +815,6 @@ void Draw_Control_Menu() {
 
   if (CVISI(CONTROL_CASE_ADVSET)) {
     DWIN_Draw_Label(CLINE(CONTROL_CASE_ADVSET), GET_TEXT_F(MSG_ADVANCED_SETTINGS));  // Advanced Settings
-    Draw_More_Icon(CSCROL(CONTROL_CASE_ADVSET));
-    Draw_Menu_Line(CSCROL(CONTROL_CASE_ADVSET), ICON_AdvSet);
   }
 
   if (CVISI(CONTROL_CASE_INFO)) Item_Control_Info(CLINE(CONTROL_CASE_INFO));
@@ -825,23 +823,26 @@ void Draw_Control_Menu() {
     Draw_Menu_Cursor(CSCROL(select_control.now));
 
   // Draw icons and lines
-  uint8_t i = 0;
-  #define _TEMP_ICON(N) do{ ++i; if (CVISI(i)) Draw_Menu_Line(CSCROL(i), ICON_Temperature + (N) - 1); }while(0)
-
-  _TEMP_ICON(CONTROL_CASE_TEMP);
-  if (CVISI(i)) Draw_More_Icon(CSCROL(i));
-
-  _TEMP_ICON(CONTROL_CASE_MOVE);
-  Draw_More_Icon(CSCROL(i));
+  #define _TEMP_ICON(N, I, M) do { \
+    if (CVISI(N)) { \
+      Draw_Menu_Line(CSCROL(N), I); \
+      if (M) { \
+        Draw_More_Icon(CSCROL(N)); \
+      } \
+    } \
+  } while(0)
+
+  _TEMP_ICON(CONTROL_CASE_TEMP, ICON_Temperature, true);
+  _TEMP_ICON(CONTROL_CASE_MOVE, ICON_Motion, true);
 
   #if ENABLED(EEPROM_SETTINGS)
-    _TEMP_ICON(CONTROL_CASE_SAVE);
-    _TEMP_ICON(CONTROL_CASE_LOAD);
-    _TEMP_ICON(CONTROL_CASE_RESET);
+    _TEMP_ICON(CONTROL_CASE_SAVE, ICON_WriteEEPROM, false);
+    _TEMP_ICON(CONTROL_CASE_LOAD, ICON_ReadEEPROM, false);
+    _TEMP_ICON(CONTROL_CASE_RESET, ICON_ResumeEEPROM, false);
   #endif
 
-  _TEMP_ICON(CONTROL_CASE_INFO);
-  if (CVISI(CONTROL_CASE_INFO)) Draw_More_Icon(CSCROL(i));
+  _TEMP_ICON(CONTROL_CASE_ADVSET, ICON_AdvSet, true);
+  _TEMP_ICON(CONTROL_CASE_INFO, ICON_Info, true);
 }
 
 void Draw_Tune_Menu() {
@@ -2653,11 +2654,12 @@ void HMI_Control() {
         Scroll_Menu(DWIN_SCROLL_UP);
 
         switch (index_control) {  // Last menu items
-          case CONTROL_CASE_ADVSET:  // Advance Settings >
+          case CONTROL_CASE_ADVSET:  // Advanced Settings >
             Draw_Menu_Item(MROWS, ICON_AdvSet, GET_TEXT(MSG_ADVANCED_SETTINGS), true);
             break;
           case CONTROL_CASE_INFO:    // Info >
-            Draw_Menu_Item(MROWS, ICON_Info, GET_TEXT(MSG_INFO_SCREEN), true);
+            Item_Control_Info(MBASE(MROWS));
+            Draw_Menu_Icon(MROWS, ICON_Info);
             break;
           default: break;
         }
@@ -2721,7 +2723,7 @@ void HMI_Control() {
           HMI_AudioFeedback();
           break;
       #endif
-      case CONTROL_CASE_ADVSET: // Advance Settings
+      case CONTROL_CASE_ADVSET: // Advanced Settings
         checkkey = AdvSet;
         select_advset.reset();
         Draw_AdvSet_Menu();

commit dfc906930c9b31ddd4d70e9c0ccf15e369abd188
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon May 3 20:55:05 2021 -0500

    Pause and PLR refinements
    
    - Move `pause_print` argument `unload_length` after `show_lcd` so it's next to `DXC_ARGS`.
    - Tweak the position and conditions of PLR save in `resume_print`.
    - Add `Nozzle::park_mode_0_height` accessor to get the raised Z height.
    - Remove extraneous `recovery.save` from `dwin.cpp`.
    - Move PLR `info.volumetric...` to `flag`.
    - Remove some G-code spaces in PLR code
    - Document `pause.h` function declarations.

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 9fdf401b57..dc729263db 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -2298,9 +2298,6 @@ void HMI_PauseOrStop() {
       if (HMI_flag.select_flag) {
         HMI_flag.pause_action = true;
         ICON_Continue();
-        #if ENABLED(POWER_LOSS_RECOVERY)
-          if (recovery.enabled) recovery.save(true);
-        #endif
         queue.inject_P(PSTR("M25"));
       }
       else {

commit fe7f5ca7f4448238f2878efd26ac8dcefe950808
Author: Adrian DC <AdrianDC@users.noreply.github.com>
Date:   Tue Apr 27 06:42:28 2021 +0200

    Fix E3V2 Advanced Settings with PLR off (#21700)
    
    Fixes #21534

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 51d192e26f..9fdf401b57 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -2381,10 +2381,12 @@ void Draw_AdvSet_Menu() {
   #endif
   if (AVISI(ADVSET_CASE_HEPID)) Draw_Menu_Line(ASCROL(ADVSET_CASE_HEPID), ICON_PIDNozzle, "Hotend PID", false);  // Nozzle PID
   if (AVISI(ADVSET_CASE_BEDPID)) Draw_Menu_Line(ASCROL(ADVSET_CASE_BEDPID), ICON_PIDbed, "Bed PID", false);  // Bed PID
-  if (AVISI(ADVSET_CASE_PWRLOSSR)) {
-    Draw_Menu_Line(ASCROL(ADVSET_CASE_PWRLOSSR), ICON_Motion, "Power-loss recovery", false);  // Power-loss recovery
-    Draw_Chkb_Line(ASCROL(ADVSET_CASE_PWRLOSSR), recovery.enabled);
-  }
+  #if ENABLED(POWER_LOSS_RECOVERY)
+    if (AVISI(ADVSET_CASE_PWRLOSSR)) {
+      Draw_Menu_Line(ASCROL(ADVSET_CASE_PWRLOSSR), ICON_Motion, "Power-loss recovery", false);  // Power-loss recovery
+      Draw_Chkb_Line(ASCROL(ADVSET_CASE_PWRLOSSR), recovery.enabled);
+    }
+  #endif
   if (select_advset.now) Draw_Menu_Cursor(ASCROL(select_advset.now));
 }
 
@@ -3409,10 +3411,12 @@ void HMI_AdvSet() {
           break;
       #endif
 
-      case ADVSET_CASE_PWRLOSSR:  // Power-loss recovery
-        recovery.enable(!recovery.enabled);
-        Draw_Chkb_Line(ADVSET_CASE_PWRLOSSR + MROWS - index_advset, recovery.enabled);
-        break;
+      #if ENABLED(POWER_LOSS_RECOVERY)
+        case ADVSET_CASE_PWRLOSSR:  // Power-loss recovery
+          recovery.enable(!recovery.enabled);
+          Draw_Chkb_Line(ADVSET_CASE_PWRLOSSR + MROWS - index_advset, recovery.enabled);
+          break;
+      #endif
       default: break;
     }
   }

commit e59192b9ea6f6fd7fa66192e363c69589c86e652
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 25 04:15:13 2021 -0500

    Fix HMI_HomeOffN axis
    
    Followup to #21534

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 891732e641..51d192e26f 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -3461,13 +3461,13 @@ void HMI_AdvSet() {
     DWIN_UpdateLCD();
   }
 
-  void HMI_HomeOffN(float &posScaled, const_float_t lo, const_float_t hi) {
+  void HMI_HomeOffN(const AxisEnum axis, float &posScaled, const_float_t lo, const_float_t hi) {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState != ENCODER_DIFF_NO) {
       if (Apply_Encoder(encoder_diffState, posScaled)) {
         checkkey = HomeOff;
         EncoderRate.enabled = false;
-        set_home_offset(X_AXIS, posScaled / 10);
+        set_home_offset(axis, posScaled / 10);
         DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(select_item.now), posScaled);
         return;
       }
@@ -3476,9 +3476,9 @@ void HMI_AdvSet() {
     }
   }
 
-  void HMI_HomeOffX() { HMI_HomeOffN(HMI_ValueStruct.Home_OffX_scaled, -500, 500); }
-  void HMI_HomeOffY() { HMI_HomeOffN(HMI_ValueStruct.Home_OffY_scaled, -500, 500); }
-  void HMI_HomeOffZ() { HMI_HomeOffN(HMI_ValueStruct.Home_OffZ_scaled,  -20,  20); }
+  void HMI_HomeOffX() { HMI_HomeOffN(X_AXIS, HMI_ValueStruct.Home_OffX_scaled, -500, 500); }
+  void HMI_HomeOffY() { HMI_HomeOffN(Y_AXIS, HMI_ValueStruct.Home_OffY_scaled, -500, 500); }
+  void HMI_HomeOffZ() { HMI_HomeOffN(Z_AXIS, HMI_ValueStruct.Home_OffZ_scaled,  -20,  20); }
 
 #endif // HAS_HOME_OFFSET
 

commit 13f3ccb85da31e2e48a22f79568c93d7ba52f3bc
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Sat Apr 24 18:50:44 2021 -0500

    E3V2 DWIN Advanced Settings (#21534)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 534975ffc1..891732e641 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -154,18 +154,20 @@ typedef struct {
 
 select_t select_page{0}, select_file{0}, select_print{0}, select_prepare{0}
          , select_control{0}, select_axis{0}, select_temp{0}, select_motion{0}, select_tune{0}
-         , select_PLA{0}, select_ABS{0}
+         , select_advset{0}, select_PLA{0}, select_ABS{0}
          , select_speed{0}
          , select_acc{0}
          , select_jerk{0}
          , select_step{0}
+         , select_item{0}
          ;
 
 uint8_t index_file     = MROWS,
         index_prepare  = MROWS,
         index_control  = MROWS,
         index_leveling = MROWS,
-        index_tune     = MROWS;
+        index_tune     = MROWS,
+        index_advset   = MROWS;
 
 bool dwin_abort_flag = false; // Flag to reset feedrate, return to Home
 
@@ -462,12 +464,21 @@ void Erase_Menu_Text(const uint8_t line) {
   DWIN_Draw_Rectangle(1, Color_Bg_Black, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
 }
 
-void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr) {
+void Draw_Menu_Item(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
   if (label) DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, (char*)label);
   if (icon) Draw_Menu_Icon(line, icon);
+  if (more) Draw_More_Icon(line);
+}
+
+void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
+  Draw_Menu_Item(line, icon, label, more);
   DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
 
+void Draw_Chkb_Line(const uint8_t line, const bool mode) {
+  DWIN_Draw_Checkbox(Color_White, Color_Bg_Black, 225, MBASE(line) - 1, mode);
+}
+
 // The "Back" label is always on the first line
 void Draw_Back_Label() {
   if (HMI_IsChinese())
@@ -516,7 +527,8 @@ inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, auto &valr
 #define CONTROL_CASE_SAVE  (CONTROL_CASE_MOVE + ENABLED(EEPROM_SETTINGS))
 #define CONTROL_CASE_LOAD  (CONTROL_CASE_SAVE + ENABLED(EEPROM_SETTINGS))
 #define CONTROL_CASE_RESET (CONTROL_CASE_LOAD + ENABLED(EEPROM_SETTINGS))
-#define CONTROL_CASE_INFO  (CONTROL_CASE_RESET + 1)
+#define CONTROL_CASE_ADVSET (CONTROL_CASE_RESET + 1)
+#define CONTROL_CASE_INFO  (CONTROL_CASE_ADVSET + 1)
 #define CONTROL_CASE_TOTAL CONTROL_CASE_INFO
 
 #define TUNE_CASE_SPEED 1
@@ -539,6 +551,13 @@ inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, auto &valr
 #define PREHEAT_CASE_SAVE (PREHEAT_CASE_FAN + ENABLED(EEPROM_SETTINGS))
 #define PREHEAT_CASE_TOTAL PREHEAT_CASE_SAVE
 
+#define ADVSET_CASE_HOMEOFF   1
+#define ADVSET_CASE_PROBEOFF  (ADVSET_CASE_HOMEOFF + ENABLED(HAS_ONESTEP_LEVELING))
+#define ADVSET_CASE_HEPID     (ADVSET_CASE_PROBEOFF + ENABLED(HAS_HOTEND))
+#define ADVSET_CASE_BEDPID    (ADVSET_CASE_HEPID + ENABLED(HAS_HEATED_BED))
+#define ADVSET_CASE_PWRLOSSR  (ADVSET_CASE_BEDPID + ENABLED(POWER_LOSS_RECOVERY))
+#define ADVSET_CASE_TOTAL     ADVSET_CASE_PWRLOSSR
+
 //
 // Draw Menus
 //
@@ -770,26 +789,36 @@ void Draw_Control_Menu() {
       DWIN_Frame_TitleCopy(1, 128, 2, 176, 12);                                         // "Control"
     #endif
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(CLINE(CONTROL_CASE_TEMP), GET_TEXT_F(MSG_TEMPERATURE));
-      DWIN_Draw_Label(CLINE(CONTROL_CASE_MOVE), GET_TEXT_F(MSG_MOTION));
+      if (CVISI(CONTROL_CASE_TEMP)) DWIN_Draw_Label(CLINE(CONTROL_CASE_TEMP), GET_TEXT_F(MSG_TEMPERATURE));
+      if (CVISI(CONTROL_CASE_MOVE)) DWIN_Draw_Label(CLINE(CONTROL_CASE_MOVE), GET_TEXT_F(MSG_MOTION));
       #if ENABLED(EEPROM_SETTINGS)
-        DWIN_Draw_Label(CLINE(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
-        DWIN_Draw_Label(CLINE(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));
-        DWIN_Draw_Label(CLINE(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
+        if (CVISI(CONTROL_CASE_SAVE)) DWIN_Draw_Label(CLINE(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+        if (CVISI(CONTROL_CASE_LOAD)) DWIN_Draw_Label(CLINE(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));
+        if (CVISI(CONTROL_CASE_RESET)) DWIN_Draw_Label(CLINE(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
       #endif
     #else
-      DWIN_Frame_AreaCopy(1,  1, 89,  83, 101, LBLX, CLINE(CONTROL_CASE_TEMP));           // Temperature >
-      DWIN_Frame_AreaCopy(1, 84, 89, 128,  99, LBLX, CLINE(CONTROL_CASE_MOVE));           // Motion >
+      if (CVISI(CONTROL_CASE_TEMP)) DWIN_Frame_AreaCopy(1,  1, 89,  83, 101, LBLX, CLINE(CONTROL_CASE_TEMP));           // Temperature >
+      if (CVISI(CONTROL_CASE_MOVE)) DWIN_Frame_AreaCopy(1, 84, 89, 128,  99, LBLX, CLINE(CONTROL_CASE_MOVE));           // Motion >
       #if ENABLED(EEPROM_SETTINGS)
-        DWIN_Frame_AreaCopy(1, 148,  89, 268, 101, LBLX     , CLINE(CONTROL_CASE_SAVE));  // "Store Configuration"
-        DWIN_Frame_AreaCopy(1,  26, 104,  57, 114, LBLX     , CLINE(CONTROL_CASE_LOAD));  // "Read"
-        DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 34, CLINE(CONTROL_CASE_LOAD));  // "Configuration"
-        DWIN_Frame_AreaCopy(1,  59, 104,  93, 114, LBLX     , CLINE(CONTROL_CASE_RESET)); // "Reset"
-        DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 37, CLINE(CONTROL_CASE_RESET)); // "Configuration"
+        if (CVISI(CONTROL_CASE_SAVE)) DWIN_Frame_AreaCopy(1, 148,  89, 268, 101, LBLX     , CLINE(CONTROL_CASE_SAVE));  // "Store Configuration"
+        if (CVISI(CONTROL_CASE_LOAD)) {
+          DWIN_Frame_AreaCopy(1,  26, 104,  57, 114, LBLX     , CLINE(CONTROL_CASE_LOAD));  // "Read"
+          DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 34, CLINE(CONTROL_CASE_LOAD));  // "Configuration"
+        }
+        if (CVISI(CONTROL_CASE_RESET)) {
+          DWIN_Frame_AreaCopy(1,  59, 104,  93, 114, LBLX     , CLINE(CONTROL_CASE_RESET)); // "Reset"
+          DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 37, CLINE(CONTROL_CASE_RESET)); // "Configuration"
+        }
       #endif
     #endif
   }
 
+  if (CVISI(CONTROL_CASE_ADVSET)) {
+    DWIN_Draw_Label(CLINE(CONTROL_CASE_ADVSET), GET_TEXT_F(MSG_ADVANCED_SETTINGS));  // Advanced Settings
+    Draw_More_Icon(CSCROL(CONTROL_CASE_ADVSET));
+    Draw_Menu_Line(CSCROL(CONTROL_CASE_ADVSET), ICON_AdvSet);
+  }
+
   if (CVISI(CONTROL_CASE_INFO)) Item_Control_Info(CLINE(CONTROL_CASE_INFO));
 
   if (select_control.now && CVISI(select_control.now))
@@ -1785,7 +1814,7 @@ void Draw_SDItem(const uint16_t item, int16_t row=-1) {
 
 #if ENABLED(SCROLL_LONG_FILENAMES)
 
-  void Draw_SDItem_Shifted(int8_t &shift) {
+  void Draw_SDItem_Shifted(uint8_t &shift) {
     // Limit to the number of chars past the cutoff
     const size_t len = strlen(shift_name);
     NOMORE(shift, _MAX(len - MENU_CHAR_LIMIT, 0U));
@@ -2060,7 +2089,7 @@ void HMI_SelectFile() {
         if (ELAPSED(ms, shift_ms)) {
           const bool was_reset = shift_amt < 0;
           shift_ms = ms + 375UL + was_reset * 250UL;  // ms per character
-          int8_t shift_new = shift_amt + 1;           // Try to shift by...
+          uint8_t shift_new = shift_amt + 1;           // Try to shift by...
           Draw_SDItem_Shifted(shift_new);             // Draw the item
           if (!was_reset && shift_new == 0)           // Was it limited to 0?
             shift_ms = 0;                             // No scrolling needed
@@ -2331,6 +2360,60 @@ void Draw_Move_Menu() {
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MoveX + i);
 }
 
+void Draw_AdvSet_Menu() {
+  Clear_Main_Window();
+
+  #if ADVSET_CASE_TOTAL >= 6
+    const int16_t scroll = MROWS - index_advset; // Scrolled-up lines
+    #define ASCROL(L) (scroll + (L))
+  #else
+    #define ASCROL(L) (L)
+  #endif
+
+  #define AVISI(L)  WITHIN(ASCROL(L), 0, MROWS)
+
+  Draw_Title(GET_TEXT_F(MSG_ADVANCED_SETTINGS));
+
+  if (AVISI(0)) Draw_Back_First(select_advset.now == 0);
+  if (AVISI(ADVSET_CASE_HOMEOFF)) Draw_Menu_Line(ASCROL(ADVSET_CASE_HOMEOFF), ICON_HomeOff, GET_TEXT(MSG_SET_HOME_OFFSETS),true);  // Home Offset >
+  #if HAS_ONESTEP_LEVELING
+    if (AVISI(ADVSET_CASE_PROBEOFF)) Draw_Menu_Line(ASCROL(ADVSET_CASE_PROBEOFF), ICON_ProbeOff, GET_TEXT(MSG_ZPROBE_OFFSETS),true);  // Probe Offset >
+  #endif
+  if (AVISI(ADVSET_CASE_HEPID)) Draw_Menu_Line(ASCROL(ADVSET_CASE_HEPID), ICON_PIDNozzle, "Hotend PID", false);  // Nozzle PID
+  if (AVISI(ADVSET_CASE_BEDPID)) Draw_Menu_Line(ASCROL(ADVSET_CASE_BEDPID), ICON_PIDbed, "Bed PID", false);  // Bed PID
+  if (AVISI(ADVSET_CASE_PWRLOSSR)) {
+    Draw_Menu_Line(ASCROL(ADVSET_CASE_PWRLOSSR), ICON_Motion, "Power-loss recovery", false);  // Power-loss recovery
+    Draw_Chkb_Line(ASCROL(ADVSET_CASE_PWRLOSSR), recovery.enabled);
+  }
+  if (select_advset.now) Draw_Menu_Cursor(ASCROL(select_advset.now));
+}
+
+void Draw_HomeOff_Menu() {
+  Clear_Main_Window();
+  Draw_Title(GET_TEXT_F(MSG_SET_HOME_OFFSETS));                 // Home Offsets
+  Draw_Back_First(select_item.now == 0);
+  Draw_Menu_Line(1, ICON_HomeOffX, GET_TEXT(MSG_HOME_OFFSET_X));  // Home X Offset
+  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Home_OffX_scaled);
+  Draw_Menu_Line(2, ICON_HomeOffY, GET_TEXT(MSG_HOME_OFFSET_Y));  // Home Y Offset
+  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Home_OffY_scaled);
+  Draw_Menu_Line(3, ICON_HomeOffZ, GET_TEXT(MSG_HOME_OFFSET_Z));  // Home Y Offset
+  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Home_OffZ_scaled);
+  if (select_item.now) Draw_Menu_Cursor(select_item.now);
+}
+
+#if HAS_ONESTEP_LEVELING
+  void Draw_ProbeOff_Menu() {
+    Clear_Main_Window();
+    Draw_Title(GET_TEXT_F(MSG_ZPROBE_OFFSETS));                 // Probe Offsets
+    Draw_Back_First(select_item.now == 0);
+    Draw_Menu_Line(1, ICON_ProbeOffX, GET_TEXT(MSG_ZPROBE_XOFFSET));  // Probe X Offset
+    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Probe_OffX_scaled);
+    Draw_Menu_Line(2, ICON_ProbeOffY, GET_TEXT(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
+    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Probe_OffY_scaled);
+    if (select_item.now) Draw_Menu_Cursor(select_item.now);
+  }
+#endif
+
 #include "../../../libs/buzzer.h"
 
 void HMI_AudioFeedback(const bool success=true) {
@@ -2566,14 +2649,20 @@ void HMI_Control() {
     if (select_control.inc(1 + CONTROL_CASE_TOTAL)) {
       if (select_control.now > MROWS && select_control.now > index_control) {
         index_control = select_control.now;
+
+        // Scroll up and draw a blank bottom line
         Scroll_Menu(DWIN_SCROLL_UP);
-        Draw_Menu_Icon(MROWS, ICON_Temperature + index_control - 1);
-        Draw_More_Icon(CONTROL_CASE_TEMP + MROWS - index_control); // Temperature >
-        Draw_More_Icon(CONTROL_CASE_MOVE + MROWS - index_control); // Motion >
-        if (index_control > MROWS) {
-          Draw_More_Icon(CONTROL_CASE_INFO + MROWS - index_control); // Info >
-          Item_Control_Info(MBASE(CONTROL_CASE_INFO - 1));
+
+        switch (index_control) {  // Last menu items
+          case CONTROL_CASE_ADVSET:  // Advance Settings >
+            Draw_Menu_Item(MROWS, ICON_AdvSet, GET_TEXT(MSG_ADVANCED_SETTINGS), true);
+            break;
+          case CONTROL_CASE_INFO:    // Info >
+            Draw_Menu_Item(MROWS, ICON_Info, GET_TEXT(MSG_INFO_SCREEN), true);
+            break;
+          default: break;
         }
+
       }
       else {
         Move_Highlight(1, select_control.now + MROWS - index_control);
@@ -2585,12 +2674,17 @@ void HMI_Control() {
       if (select_control.now < index_control - MROWS) {
         index_control--;
         Scroll_Menu(DWIN_SCROLL_DOWN);
-        if (index_control == MROWS)
+        switch (index_control) {  // First menu items
+          case MROWS :
           Draw_Back_First();
-        else
-          Draw_Menu_Line(0, ICON_Temperature + select_control.now - 1);
-        Draw_More_Icon(0 + MROWS - index_control + 1); // Temperature >
-        Draw_More_Icon(1 + MROWS - index_control + 1); // Motion >
+            break;
+          case MROWS + 1: // Temperature >
+            Draw_Menu_Line(0, ICON_Temperature, GET_TEXT(MSG_TEMPERATURE), true);
+            break;
+          case MROWS + 2: // Move >
+            Draw_Menu_Line(0, ICON_Motion, GET_TEXT(MSG_MOTION), true);
+          default: break;
+        }
       }
       else {
         Move_Highlight(-1, select_control.now + MROWS - index_control);
@@ -2628,6 +2722,11 @@ void HMI_Control() {
           HMI_AudioFeedback();
           break;
       #endif
+      case CONTROL_CASE_ADVSET: // Advance Settings
+        checkkey = AdvSet;
+        select_advset.reset();
+        Draw_AdvSet_Menu();
+        break;
       case CONTROL_CASE_INFO: // Info
         checkkey = Info;
         Draw_Info_Menu();
@@ -3227,6 +3326,217 @@ void HMI_Motion() {
   DWIN_UpdateLCD();
 }
 
+/* Advanced Settings */
+void HMI_AdvSet() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_advset.inc(1 + ADVSET_CASE_TOTAL)) {
+      if (select_advset.now > MROWS && select_advset.now > index_advset) {
+        index_advset = select_advset.now;
+
+        // Scroll up and draw a blank bottom line
+        Scroll_Menu(DWIN_SCROLL_UP);
+
+        //switch (index_advset) {  // Redraw last menu items
+        //  default: break;
+        //}
+
+      }
+      else {
+        Move_Highlight(1, select_advset.now + MROWS - index_advset);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_advset.dec()) {
+      if (select_advset.now < index_advset - MROWS) {
+        index_advset--;
+        Scroll_Menu(DWIN_SCROLL_DOWN);
+
+        //switch (index_advset) {  // Redraw first menu items
+        //  default: break;
+        //}
+      }
+      else {
+        Move_Highlight(-1, select_advset.now + MROWS - index_advset);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_advset.now) {
+      case 0: // Back
+        checkkey = Control;
+        select_control.set(CONTROL_CASE_ADVSET);
+        index_control = CONTROL_CASE_ADVSET;
+        Draw_Control_Menu();
+        break;
+
+      #if HAS_HOME_OFFSET
+        case ADVSET_CASE_HOMEOFF:   // Home Offsets
+          checkkey = HomeOff;
+          select_item.reset();
+          HMI_ValueStruct.Home_OffX_scaled = home_offset[X_AXIS] * 10;
+          HMI_ValueStruct.Home_OffY_scaled = home_offset[Y_AXIS] * 10;
+          HMI_ValueStruct.Home_OffZ_scaled = home_offset[Z_AXIS] * 10;
+          Draw_HomeOff_Menu();
+          break;
+      #endif
+
+      #if HAS_ONESTEP_LEVELING
+        case ADVSET_CASE_PROBEOFF:   // Probe Offsets
+          checkkey = ProbeOff;
+          select_item.reset();
+          HMI_ValueStruct.Probe_OffX_scaled = probe.offset.x * 10;
+          HMI_ValueStruct.Probe_OffY_scaled = probe.offset.y * 10;
+          Draw_ProbeOff_Menu();
+          break;
+      #endif
+
+      #if HAS_HOTEND
+        case ADVSET_CASE_HEPID:   // Nozzle PID Autotune
+          thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0);
+          thermalManager.PID_autotune(ui.material_preset[0].hotend_temp, H_E0, 10, true);
+          break;
+      #endif
+
+      #if HAS_HEATED_BED
+        case ADVSET_CASE_BEDPID:  // Bed PID Autotune
+          thermalManager.setTargetBed(ui.material_preset[0].bed_temp);
+          thermalManager.PID_autotune(ui.material_preset[0].bed_temp, H_BED, 10, true);
+          break;
+      #endif
+
+      case ADVSET_CASE_PWRLOSSR:  // Power-loss recovery
+        recovery.enable(!recovery.enabled);
+        Draw_Chkb_Line(ADVSET_CASE_PWRLOSSR + MROWS - index_advset, recovery.enabled);
+        break;
+      default: break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+#if HAS_HOME_OFFSET
+
+  /* Home Offset */
+  void HMI_HomeOff() {
+    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+    // Avoid flicker by updating only the previous menu
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      if (select_item.inc(1 + 3)) Move_Highlight(1, select_item.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      if (select_item.dec()) Move_Highlight(-1, select_item.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      switch (select_item.now) {
+        case 0: // Back
+          checkkey = AdvSet;
+          select_advset.set(ADVSET_CASE_HOMEOFF);
+          Draw_AdvSet_Menu();
+          break;
+        case 1: // Home Offset X
+          checkkey = HomeOffX;
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Home_OffX_scaled);
+          EncoderRate.enabled = true;
+          break;
+        case 2: // Home Offset Y
+          checkkey = HomeOffY;
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Home_OffY_scaled);
+          EncoderRate.enabled = true;
+          break;
+        case 3: // Home Offset Z
+          checkkey = HomeOffZ;
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Home_OffZ_scaled);
+          EncoderRate.enabled = true;
+          break;
+        default: break;
+      }
+    }
+    DWIN_UpdateLCD();
+  }
+
+  void HMI_HomeOffN(float &posScaled, const_float_t lo, const_float_t hi) {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      if (Apply_Encoder(encoder_diffState, posScaled)) {
+        checkkey = HomeOff;
+        EncoderRate.enabled = false;
+        set_home_offset(X_AXIS, posScaled / 10);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(select_item.now), posScaled);
+        return;
+      }
+      LIMIT(posScaled, lo, hi);
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 216, MBASE(select_item.now), posScaled);
+    }
+  }
+
+  void HMI_HomeOffX() { HMI_HomeOffN(HMI_ValueStruct.Home_OffX_scaled, -500, 500); }
+  void HMI_HomeOffY() { HMI_HomeOffN(HMI_ValueStruct.Home_OffY_scaled, -500, 500); }
+  void HMI_HomeOffZ() { HMI_HomeOffN(HMI_ValueStruct.Home_OffZ_scaled,  -20,  20); }
+
+#endif // HAS_HOME_OFFSET
+
+#if HAS_ONESTEP_LEVELING
+  /*Probe Offset */
+  void HMI_ProbeOff() {
+    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+    // Avoid flicker by updating only the previous menu
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      if (select_item.inc(1 + 2)) Move_Highlight(1, select_item.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      if (select_item.dec()) Move_Highlight(-1, select_item.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      switch (select_item.now) {
+        case 0: // Back
+          checkkey = AdvSet;
+          select_advset.set(ADVSET_CASE_PROBEOFF);
+          Draw_AdvSet_Menu();
+          break;
+        case 1: // Probe Offset X
+          checkkey = ProbeOffX;
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Probe_OffX_scaled);
+          EncoderRate.enabled = true;
+          break;
+        case 2: // Probe Offset X
+          checkkey = ProbeOffY;
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Probe_OffY_scaled);
+          EncoderRate.enabled = true;
+          break;
+      }
+    }
+    DWIN_UpdateLCD();
+  }
+
+  void HMI_ProbeOffN(float &posScaled, float &offset_ref) {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      if (Apply_Encoder(encoder_diffState, posScaled)) {
+        checkkey = ProbeOff;
+        EncoderRate.enabled = false;
+        offset_ref = posScaled / 10;
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(select_item.now), posScaled);
+        return;
+      }
+      LIMIT(posScaled, -500, 500);
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 216, MBASE(select_item.now), posScaled);
+    }
+  }
+
+  void HMI_ProbeOffX() { HMI_ProbeOffN(HMI_ValueStruct.Probe_OffX_scaled, probe.offset.x); }
+  void HMI_ProbeOffY() { HMI_ProbeOffN(HMI_ValueStruct.Probe_OffY_scaled, probe.offset.y); }
+
+#endif // HAS_ONESTEP_LEVELING
+
 /* Info */
 void HMI_Info() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
@@ -3735,6 +4045,18 @@ void DWIN_HandleScreen() {
     case AxisMove:        HMI_AxisMove(); break;
     case TemperatureID:   HMI_Temperature(); break;
     case Motion:          HMI_Motion(); break;
+    case AdvSet:          HMI_AdvSet(); break;
+    #if HAS_HOME_OFFSET
+      case HomeOff:       HMI_HomeOff(); break;
+      case HomeOffX:      HMI_HomeOffX(); break;
+      case HomeOffY:      HMI_HomeOffY(); break;
+      case HomeOffZ:      HMI_HomeOffZ(); break;
+    #endif
+    #if HAS_ONESTEP_LEVELING
+      case ProbeOff:      HMI_ProbeOff(); break;
+      case ProbeOffX:     HMI_ProbeOffX(); break;
+      case ProbeOffY:     HMI_ProbeOffY(); break;
+    #endif
     case Info:            HMI_Info(); break;
     case Tune:            HMI_Tune(); break;
     #if HAS_PREHEAT
@@ -3801,4 +4123,10 @@ void DWIN_StatusChanged(const char *text) {
   DWIN_UpdateLCD();
 }
 
+// GUI extension
+void DWIN_Draw_Checkbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool mode=false) {
+  DWIN_Draw_String(false,true,font8x16,Select_Color,bcolor,x+4,y,F(mode ? "x" : " "));
+  DWIN_Draw_Rectangle(0,color,x+2,y+2,x+17,y+17);
+}
+
 #endif // DWIN_CREALITY_LCD

commit dfcccb63a1f3d8098ebfef8c64753f735bcf0b0d
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Apr 24 05:20:55 2021 -0500

    Use temperature accessors

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index cb7fb2728e..534975ffc1 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -2709,7 +2709,7 @@ void HMI_AxisMove() {
           case 4: // Extruder
             // window tips
             #ifdef PREVENT_COLD_EXTRUSION
-              if (thermalManager.wholeDegHotend(0) < (EXTRUDE_MINTEMP)) {
+              if (thermalManager.tooColdToExtrude(0)) {
                 HMI_flag.ETempTooLow_flag = true;
                 Popup_Window_ETempTooLow();
                 DWIN_UpdateLCD();

commit c4620bb5285438e41fa4c39229aa2a39859877ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 23 20:19:23 2021 -0500

    Add whole-degree accessors, simplify some temperature-related features (#21685)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index b86e7cbe60..cb7fb2728e 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1583,7 +1583,7 @@ void _draw_xyz_position(const bool force) {
 void update_variable() {
   #if HAS_HOTEND
     static celsius_t _hotendtemp = 0, _hotendtarget = 0;
-    const celsius_t hc = thermalManager.degHotend(0),
+    const celsius_t hc = thermalManager.wholeDegHotend(0),
                     ht = thermalManager.degTargetHotend(0);
     const bool _new_hotend_temp = _hotendtemp != hc,
                _new_hotend_target = _hotendtarget != ht;
@@ -1592,7 +1592,7 @@ void update_variable() {
   #endif
   #if HAS_HEATED_BED
     static celsius_t _bedtemp = 0, _bedtarget = 0;
-    const celsius_t bc = thermalManager.degBed(),
+    const celsius_t bc = thermalManager.wholeDegBed(),
                     bt = thermalManager.degTargetBed();
     const bool _new_bed_temp = _bedtemp != bc,
                _new_bed_target = _bedtarget != bt;
@@ -1880,7 +1880,7 @@ void Draw_Status_Area(const bool with_update) {
 
   #if HAS_HOTEND
     DWIN_ICON_Show(ICON, ICON_HotendTemp, 10, 383);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 384, thermalManager.degHotend(0));
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 384, thermalManager.wholeDegHotend(0));
     DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 384, F("/"));
     DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 384, thermalManager.degTargetHotend(0));
 
@@ -1891,7 +1891,7 @@ void Draw_Status_Area(const bool with_update) {
 
   #if HAS_HEATED_BED
     DWIN_ICON_Show(ICON, ICON_BedTemp, 10, 416);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 417, thermalManager.degBed());
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 417, thermalManager.wholeDegBed());
     DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 417, F("/"));
     DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 417, thermalManager.degTargetBed());
   #endif
@@ -2709,7 +2709,7 @@ void HMI_AxisMove() {
           case 4: // Extruder
             // window tips
             #ifdef PREVENT_COLD_EXTRUSION
-              if (thermalManager.degHotend(0) < EXTRUDE_MINTEMP) {
+              if (thermalManager.wholeDegHotend(0) < (EXTRUDE_MINTEMP)) {
                 HMI_flag.ETempTooLow_flag = true;
                 Popup_Window_ETempTooLow();
                 DWIN_UpdateLCD();

commit 30e7e2c2766d7dbbe0144344287994f1969dfadd
Author: Martijn Bosgraaf <drywfiltiarn+github@gmail.com>
Date:   Wed Mar 24 18:21:11 2021 +0100

    Extend M106/M107 for better laser module support (#16082)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 87ad93cf1d..b86e7cbe60 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -2152,7 +2152,7 @@ void HMI_SelectFile() {
 
       card.openAndPrintFile(card.filename);
 
-      #if FAN_COUNT > 0
+      #if HAS_FAN
         // All fans on for Ender 3 v2 ?
         // The slicer should manage this for us.
         //for (uint8_t i = 0; i < FAN_COUNT; i++)

commit 930752d46e6aacb484ea89dacae6baf823d78d62
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Wed Mar 24 10:12:57 2021 -0500

    Ender 3 V2 Status Line (#21369)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index d543ff0508..87ad93cf1d 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -402,7 +402,7 @@ void Draw_Title(const __FlashStringHelper * title) {
 }
 
 void Clear_Menu_Area() {
-  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 31, DWIN_WIDTH, STATUS_Y);
+  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 31, DWIN_WIDTH, STATUS_Y - 1);
 }
 
 void Clear_Main_Window() {
@@ -3794,4 +3794,11 @@ void DWIN_CompletedLeveling() {
   if (checkkey == Leveling) Goto_MainMenu();
 }
 
+void DWIN_StatusChanged(const char *text) {
+  DWIN_Draw_Rectangle(1, Color_Bg_Blue, 0, STATUS_Y, DWIN_WIDTH, STATUS_Y + 20);
+  const int8_t x = _MAX(0U, DWIN_WIDTH - strlen_P(text) * MENU_CHR_W) / 2;
+  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Blue, x, STATUS_Y + 2, F(text));
+  DWIN_UpdateLCD();
+}
+
 #endif // DWIN_CREALITY_LCD

commit 2d2291d00eab6159de24eb7ff74001b1d6dd29e4
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Mar 24 05:40:28 2021 -0500

    More IntelliSense-friendly declarations

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 0e9b93525d..d543ff0508 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -180,8 +180,12 @@ static uint8_t _card_percent = 0;
 static uint16_t _remain_time = 0;
 
 #if ENABLED(PAUSE_HEAT)
-  TERN_(HAS_HOTEND, uint16_t resume_hotend_temp = 0);
-  TERN_(HAS_HEATED_BED, uint16_t resume_bed_temp = 0);
+  #if ENABLED(HAS_HOTEND)
+    uint16_t resume_hotend_temp = 0;
+  #endif
+  #if ENABLED(HAS_HEATED_BED)
+    uint16_t resume_bed_temp = 0;
+  #endif
 #endif
 
 #if HAS_ZOFFSET_ITEM

commit e5ff55a1be7646b6159e6dedac50bfbe57e6dfa0
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 24 04:11:43 2021 -0500

    Add typedef celsius_t (#21374)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 60a22f22f1..0e9b93525d 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1578,20 +1578,22 @@ void _draw_xyz_position(const bool force) {
 
 void update_variable() {
   #if HAS_HOTEND
-    static float _hotendtemp = 0;
-    const bool _new_hotend_temp = _hotendtemp != thermalManager.temp_hotend[0].celsius;
-    if (_new_hotend_temp) _hotendtemp = thermalManager.temp_hotend[0].celsius;
-    static int16_t _hotendtarget = 0;
-    const bool _new_hotend_target = _hotendtarget != thermalManager.temp_hotend[0].target;
-    if (_new_hotend_target) _hotendtarget = thermalManager.temp_hotend[0].target;
+    static celsius_t _hotendtemp = 0, _hotendtarget = 0;
+    const celsius_t hc = thermalManager.degHotend(0),
+                    ht = thermalManager.degTargetHotend(0);
+    const bool _new_hotend_temp = _hotendtemp != hc,
+               _new_hotend_target = _hotendtarget != ht;
+    if (_new_hotend_temp) _hotendtemp = hc;
+    if (_new_hotend_target) _hotendtarget = ht;
   #endif
   #if HAS_HEATED_BED
-    static float _bedtemp = 0;
-    const bool _new_bed_temp = _bedtemp != thermalManager.temp_bed.celsius;
-    if (_new_bed_temp) _bedtemp = thermalManager.temp_bed.celsius;
-    static int16_t _bedtarget = 0;
-    const bool _new_bed_target = _bedtarget != thermalManager.temp_bed.target;
-    if (_new_bed_target) _bedtarget = thermalManager.temp_bed.target;
+    static celsius_t _bedtemp = 0, _bedtarget = 0;
+    const celsius_t bc = thermalManager.degBed(),
+                    bt = thermalManager.degTargetBed();
+    const bool _new_bed_temp = _bedtemp != bc,
+               _new_bed_target = _bedtarget != bt;
+    if (_new_bed_temp) _bedtemp = bc;
+    if (_new_bed_target) _bedtarget = bt;
   #endif
   #if HAS_FAN
     static uint8_t _fanspeed = 0;

commit 58f0330d3f51115dbc8cda792105fe66d4c61241
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Mar 19 16:41:47 2021 -0500

    MKS / E3V2 LCD code cleanup

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index c77e1ebd10..60a22f22f1 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -102,19 +102,11 @@
 #define DWIN_FONT_HEAD font10x20
 
 #define MENU_CHAR_LIMIT  24
-#define STATUS_Y 360
-
-// Fan speed limit
-#define FANON           255
-#define FANOFF          0
+#define STATUS_Y        360
 
 // Print speed limit
-#define MAX_PRINT_SPEED   999
-#define MIN_PRINT_SPEED   10
-
-#if HAS_HEATED_BED
-  #define MIN_BED_TEMP  BED_MINTEMP
-#endif
+#define MIN_PRINT_SPEED  10
+#define MAX_PRINT_SPEED 999
 
 // Feedspeed limit (max feedspeed = DEFAULT_MAX_FEEDRATE * 2)
 #define MIN_MAXFEEDSPEED      1
@@ -883,11 +875,11 @@ void Draw_Tune_Menu() {
 
   #if HAS_HOTEND
     Draw_Menu_Line(TUNE_CASE_TEMP, ICON_HotendTemp);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP), thermalManager.temp_hotend[0].target);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP), thermalManager.degTargetHotend(0));
   #endif
   #if HAS_HEATED_BED
     Draw_Menu_Line(TUNE_CASE_BED, ICON_BedTemp);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED), thermalManager.temp_bed.target);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED), thermalManager.degTargetBed());
   #endif
   #if HAS_FAN
     Draw_Menu_Line(TUNE_CASE_FAN, ICON_FanSpeed);
@@ -1394,7 +1386,7 @@ void HMI_Move_Z() {
         return;
       }
       // Bed_Temp limit
-      LIMIT(HMI_ValueStruct.Bed_Temp, MIN_BED_TEMP, BED_MAX_TARGET);
+      LIMIT(HMI_ValueStruct.Bed_Temp, BED_MINTEMP, BED_MAX_TARGET);
       // Bed_Temp value
       DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
     }
@@ -1438,7 +1430,7 @@ void HMI_Move_Z() {
         return;
       }
       // Fan_speed limit
-      LIMIT(HMI_ValueStruct.Fan_speed, FANOFF, FANON);
+      LIMIT(HMI_ValueStruct.Fan_speed, 0, 255);
       // Fan_speed value
       DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
     }
@@ -1882,9 +1874,9 @@ void Draw_Status_Area(const bool with_update) {
 
   #if HAS_HOTEND
     DWIN_ICON_Show(ICON, ICON_HotendTemp, 10, 383);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 384, thermalManager.temp_hotend[0].celsius);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 384, thermalManager.degHotend(0));
     DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 384, F("/"));
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 384, thermalManager.temp_hotend[0].target);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 384, thermalManager.degTargetHotend(0));
 
     DWIN_ICON_Show(ICON, ICON_StepE, 112, 417);
     DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 417, planner.flow_percentage[0]);
@@ -1893,9 +1885,9 @@ void Draw_Status_Area(const bool with_update) {
 
   #if HAS_HEATED_BED
     DWIN_ICON_Show(ICON, ICON_BedTemp, 10, 416);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 417, thermalManager.temp_bed.celsius);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 417, thermalManager.degBed());
     DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 417, F("/"));
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 417, thermalManager.temp_bed.target);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 417, thermalManager.degTargetBed());
   #endif
 
   DWIN_ICON_Show(ICON, ICON_Speed, 113, 383);
@@ -2157,8 +2149,8 @@ void HMI_SelectFile() {
       #if FAN_COUNT > 0
         // All fans on for Ender 3 v2 ?
         // The slicer should manage this for us.
-        // for (uint8_t i = 0; i < FAN_COUNT; i++)
-        //  thermalManager.fan_speed[i] = FANON;
+        //for (uint8_t i = 0; i < FAN_COUNT; i++)
+        //  thermalManager.fan_speed[i] = 255;
       #endif
 
       Goto_PrintProcess();
@@ -2539,11 +2531,11 @@ void Draw_Temperature_Menu() {
   #define _TMENU_ICON(N) Draw_Menu_Line(++i, ICON_SetEndTemp + (N) - 1)
   #if HAS_HOTEND
     _TMENU_ICON(TEMP_CASE_TEMP);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.temp_hotend[0].target);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.degTargetHotend(0));
   #endif
   #if HAS_HEATED_BED
     _TMENU_ICON(TEMP_CASE_BED);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.temp_bed.target);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.degTargetBed());
   #endif
   #if HAS_FAN
     _TMENU_ICON(TEMP_CASE_FAN);
@@ -2711,7 +2703,7 @@ void HMI_AxisMove() {
           case 4: // Extruder
             // window tips
             #ifdef PREVENT_COLD_EXTRUSION
-              if (thermalManager.temp_hotend[0].celsius < EXTRUDE_MINTEMP) {
+              if (thermalManager.degHotend(0) < EXTRUDE_MINTEMP) {
                 HMI_flag.ETempTooLow_flag = true;
                 Popup_Window_ETempTooLow();
                 DWIN_UpdateLCD();
@@ -2752,16 +2744,16 @@ void HMI_Temperature() {
       #if HAS_HOTEND
         case TEMP_CASE_TEMP: // Nozzle temperature
           checkkey = ETemp;
-          HMI_ValueStruct.E_Temp = thermalManager.temp_hotend[0].target;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(1), thermalManager.temp_hotend[0].target);
+          HMI_ValueStruct.E_Temp = thermalManager.degTargetHotend(0);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(1), HMI_ValueStruct.E_Temp);
           EncoderRate.enabled = true;
           break;
       #endif
       #if HAS_HEATED_BED
         case TEMP_CASE_BED: // Bed temperature
           checkkey = BedTemp;
-          HMI_ValueStruct.Bed_Temp = thermalManager.temp_bed.target;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(2), thermalManager.temp_bed.target);
+          HMI_ValueStruct.Bed_Temp = thermalManager.degTargetBed();
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(2), HMI_ValueStruct.Bed_Temp);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -2769,7 +2761,7 @@ void HMI_Temperature() {
         case TEMP_CASE_FAN: // Fan speed
           checkkey = FanSpeed;
           HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(3), thermalManager.fan_speed[0]);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(3), HMI_ValueStruct.Fan_speed);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -2801,7 +2793,7 @@ void HMI_Temperature() {
             #ifdef USE_STRING_HEADINGS
               Draw_Title("PLA Settings"); // TODO: GET_TEXT_F
             #else
-              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                             // "PLA Settings"
+              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                       // "PLA Settings"
             #endif
             #ifdef USE_STRING_TITLES
               DWIN_Draw_Label(MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
@@ -2817,7 +2809,7 @@ void HMI_Temperature() {
             #else
               DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_TEMP));
               DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(PREHEAT_CASE_TEMP));
-              DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(PREHEAT_CASE_TEMP)); // PLA nozzle temp
+              DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(PREHEAT_CASE_TEMP));      // PLA nozzle temp
               #if HAS_HEATED_BED
                 DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_BED) + 3);
                 DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(PREHEAT_CASE_BED) + 3);
@@ -2828,7 +2820,7 @@ void HMI_Temperature() {
                 DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(PREHEAT_CASE_FAN));    // PLA fan speed
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(PREHEAT_CASE_SAVE));          // Save PLA configuration
+                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(PREHEAT_CASE_SAVE));      // Save PLA configuration
               #endif
             #endif
           }
@@ -3285,22 +3277,22 @@ void HMI_Tune() {
       case TUNE_CASE_SPEED: // Print speed
         checkkey = PrintSpeed;
         HMI_ValueStruct.print_speed = feedrate_percentage;
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_SPEED + MROWS - index_tune), feedrate_percentage);
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_SPEED + MROWS - index_tune), HMI_ValueStruct.print_speed);
         EncoderRate.enabled = true;
         break;
       #if HAS_HOTEND
         case TUNE_CASE_TEMP: // Nozzle temp
           checkkey = ETemp;
-          HMI_ValueStruct.E_Temp = thermalManager.temp_hotend[0].target;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), thermalManager.temp_hotend[0].target);
+          HMI_ValueStruct.E_Temp = thermalManager.degTargetHotend(0);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), HMI_ValueStruct.E_Temp);
           EncoderRate.enabled = true;
           break;
       #endif
       #if HAS_HEATED_BED
         case TUNE_CASE_BED: // Bed temp
           checkkey = BedTemp;
-          HMI_ValueStruct.Bed_Temp = thermalManager.temp_bed.target;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), thermalManager.temp_bed.target);
+          HMI_ValueStruct.Bed_Temp = thermalManager.degTargetBed();
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), HMI_ValueStruct.Bed_Temp);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -3308,7 +3300,7 @@ void HMI_Tune() {
         case TUNE_CASE_FAN: // Fan speed
           checkkey = FanSpeed;
           HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), thermalManager.fan_speed[0]);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), HMI_ValueStruct.Fan_speed);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -3626,8 +3618,8 @@ void EachMomentUpdate() {
   if (HMI_flag.pause_action && printingIsPaused() && !planner.has_blocks_queued()) {
     HMI_flag.pause_action = false;
     #if ENABLED(PAUSE_HEAT)
-      TERN_(HAS_HOTEND, resume_hotend_temp = thermalManager.temp_hotend[0].target);
-      TERN_(HAS_HEATED_BED, resume_bed_temp = thermalManager.temp_bed.target);
+      TERN_(HAS_HOTEND, resume_hotend_temp = thermalManager.degTargetHotend(0));
+      TERN_(HAS_HEATED_BED, resume_bed_temp = thermalManager.degTargetBed());
       thermalManager.disable_all_heaters();
     #endif
     queue.inject_P(PSTR("G1 F1200 X0 Y0"));

commit cfa6c7d45ba72d1a0b26e6308191e008dcd0d9c9
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Mar 19 16:34:10 2021 -0500

    Improve max temp / target

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 97a9fbd4da..c77e1ebd10 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -112,12 +112,6 @@
 #define MAX_PRINT_SPEED   999
 #define MIN_PRINT_SPEED   10
 
-// Temp limits
-#if HAS_HOTEND
-  #define MAX_E_TEMP    (HEATER_0_MAXTEMP - (HOTEND_OVERSHOOT))
-  #define MIN_E_TEMP    HEATER_0_MINTEMP
-#endif
-
 #if HAS_HEATED_BED
   #define MIN_BED_TEMP  BED_MINTEMP
 #endif
@@ -1357,7 +1351,7 @@ void HMI_Move_Z() {
         return;
       }
       // E_Temp limit
-      LIMIT(HMI_ValueStruct.E_Temp, MIN_E_TEMP, MAX_E_TEMP);
+      LIMIT(HMI_ValueStruct.E_Temp, HEATER_0_MINTEMP, thermalManager.hotend_max_target(0));
       // E_Temp value
       DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
     }

commit deaefbf1dcb823f22a8f9edd3fbba069ef9257b9
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Mar 17 02:48:21 2021 -0500

    Minor E3 V2 dwin cleanup

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index e046bb90f5..97a9fbd4da 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1469,19 +1469,21 @@ void HMI_PrintSpeed() {
   }
 }
 
+#define LAST_AXIS TERN(HAS_HOTEND, E_AXIS, Z_AXIS)
+
 void HMI_MaxFeedspeedXYZE() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
     if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Feedspeed)) {
       checkkey = MaxSpeed;
       EncoderRate.enabled = false;
-      if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, E_AXIS))
+      if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
         planner.set_max_feedrate(HMI_flag.feedspeed_axis, HMI_ValueStruct.Max_Feedspeed);
       DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
       return;
     }
     // MaxFeedspeed limit
-    if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, E_AXIS))
+    if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
       NOMORE(HMI_ValueStruct.Max_Feedspeed, default_max_feedrate[HMI_flag.feedspeed_axis] * 2);
     if (HMI_ValueStruct.Max_Feedspeed < MIN_MAXFEEDSPEED) HMI_ValueStruct.Max_Feedspeed = MIN_MAXFEEDSPEED;
     // MaxFeedspeed value
@@ -1495,17 +1497,13 @@ void HMI_MaxAccelerationXYZE() {
     if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Acceleration)) {
       checkkey = MaxAcceleration;
       EncoderRate.enabled = false;
-      if (HMI_flag.acc_axis == X_AXIS) planner.set_max_acceleration(X_AXIS, HMI_ValueStruct.Max_Acceleration);
-      else if (HMI_flag.acc_axis == Y_AXIS) planner.set_max_acceleration(Y_AXIS, HMI_ValueStruct.Max_Acceleration);
-      else if (HMI_flag.acc_axis == Z_AXIS) planner.set_max_acceleration(Z_AXIS, HMI_ValueStruct.Max_Acceleration);
-      #if HAS_HOTEND
-        else if (HMI_flag.acc_axis == E_AXIS) planner.set_max_acceleration(E_AXIS, HMI_ValueStruct.Max_Acceleration);
-      #endif
+      if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
+        planner.set_max_acceleration(HMI_flag.acc_axis, HMI_ValueStruct.Max_Acceleration);
       DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
       return;
     }
     // MaxAcceleration limit
-    if (WITHIN(HMI_flag.acc_axis, X_AXIS, E_AXIS))
+    if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
       NOMORE(HMI_ValueStruct.Max_Acceleration, default_max_acceleration[HMI_flag.acc_axis] * 2);
     if (HMI_ValueStruct.Max_Acceleration < MIN_MAXACCELERATION) HMI_ValueStruct.Max_Acceleration = MIN_MAXACCELERATION;
     // MaxAcceleration value
@@ -1521,13 +1519,13 @@ void HMI_MaxAccelerationXYZE() {
       if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Jerk_scaled)) {
         checkkey = MaxJerk;
         EncoderRate.enabled = false;
-        if (WITHIN(HMI_flag.jerk_axis, X_AXIS, E_AXIS))
+        if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
           planner.set_max_jerk(HMI_flag.jerk_axis, HMI_ValueStruct.Max_Jerk_scaled / 10);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
         return;
       }
       // MaxJerk limit
-      if (WITHIN(HMI_flag.jerk_axis, X_AXIS, E_AXIS))
+      if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
         NOMORE(HMI_ValueStruct.Max_Jerk_scaled, default_max_jerk[HMI_flag.jerk_axis] * 2 * MINUNITMULT);
       NOLESS(HMI_ValueStruct.Max_Jerk_scaled, (MIN_MAXJERK) * MINUNITMULT);
       // MaxJerk value
@@ -1543,13 +1541,13 @@ void HMI_StepXYZE() {
     if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Step_scaled)) {
       checkkey = Step;
       EncoderRate.enabled = false;
-      if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
+      if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
         planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step_scaled / 10;
       DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
       return;
     }
     // Step limit
-    if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
+    if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
       NOMORE(HMI_ValueStruct.Max_Step_scaled, 999.9 * MINUNITMULT);
     NOLESS(HMI_ValueStruct.Max_Step_scaled, MIN_STEP);
     // Step value

commit e27a2a96a034a2e0b1e6b48c68ddec9651956a27
Author: Steven Haigh <netwiz@crc.id.au>
Date:   Mon Feb 15 11:21:47 2021 +1100

    E3V2 Status Area followup (#21072)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 5e7c1ef4c7..e046bb90f5 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1675,7 +1675,7 @@ void update_variable() {
   }
 
   #if HAS_FAN
-    if (_fanspeed != thermalManager.fan_speed[0]) {
+    if (_new_fanspeed) {
       _fanspeed = thermalManager.fan_speed[0];
       DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 195 + 2 * STAT_CHR_W, 384, _fanspeed);
     }

commit db82a25177d0add09883c5475a248cb062e5eda3
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Feb 14 17:45:36 2021 -0500

    E3V2 DWIN live movement (#21035)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 367e86232c..5e7c1ef4c7 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1212,69 +1212,57 @@ inline ENCODER_DiffState get_encoder_state() {
   return state;
 }
 
+void HMI_Plan_Move(const feedRate_t fr_mm_s) {
+  if (!planner.is_full()) {
+    planner.synchronize();
+    planner.buffer_line(current_position, fr_mm_s, active_extruder);
+    DWIN_UpdateLCD();
+  }
+}
+
+void HMI_Move_Done(const AxisEnum axis) {
+  EncoderRate.enabled = false;
+  planner.synchronize();
+  checkkey = AxisMove;
+  DWIN_UpdateLCD();
+}
+
 void HMI_Move_X() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scaled)) {
-      checkkey = AxisMove;
-      EncoderRate.enabled = false;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
-      if (!planner.is_full()) {
-        // Wait for planner moves to finish!
-        planner.synchronize();
-        planner.buffer_line(current_position, homing_feedrate(X_AXIS), active_extruder);
-      }
-      DWIN_UpdateLCD();
-      return;
-    }
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scaled))
+      return HMI_Move_Done(X_AXIS);
     LIMIT(HMI_ValueStruct.Move_X_scaled, (X_MIN_POS) * MINUNITMULT, (X_MAX_POS) * MINUNITMULT);
     current_position.x = HMI_ValueStruct.Move_X_scaled / MINUNITMULT;
     DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
     DWIN_UpdateLCD();
+    HMI_Plan_Move(homing_feedrate(X_AXIS));
   }
 }
 
 void HMI_Move_Y() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scaled)) {
-      checkkey = AxisMove;
-      EncoderRate.enabled = false;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
-      if (!planner.is_full()) {
-        // Wait for planner moves to finish!
-        planner.synchronize();
-        planner.buffer_line(current_position, homing_feedrate(Y_AXIS), active_extruder);
-      }
-      DWIN_UpdateLCD();
-      return;
-    }
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scaled))
+      return HMI_Move_Done(Y_AXIS);
     LIMIT(HMI_ValueStruct.Move_Y_scaled, (Y_MIN_POS) * MINUNITMULT, (Y_MAX_POS) * MINUNITMULT);
     current_position.y = HMI_ValueStruct.Move_Y_scaled / MINUNITMULT;
     DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
     DWIN_UpdateLCD();
+    HMI_Plan_Move(homing_feedrate(Y_AXIS));
   }
 }
 
 void HMI_Move_Z() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scaled)) {
-      checkkey = AxisMove;
-      EncoderRate.enabled = false;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
-      if (!planner.is_full()) {
-        // Wait for planner moves to finish!
-        planner.synchronize();
-        planner.buffer_line(current_position, homing_feedrate(Z_AXIS), active_extruder);
-      }
-      DWIN_UpdateLCD();
-      return;
-    }
-    LIMIT(HMI_ValueStruct.Move_Z_scaled, Z_MIN_POS * MINUNITMULT, Z_MAX_POS * MINUNITMULT);
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scaled))
+      return HMI_Move_Done(Z_AXIS);
+    LIMIT(HMI_ValueStruct.Move_Z_scaled, (Z_MIN_POS) * MINUNITMULT, (Z_MAX_POS) * MINUNITMULT);
     current_position.z = HMI_ValueStruct.Move_Z_scaled / MINUNITMULT;
     DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
     DWIN_UpdateLCD();
+    HMI_Plan_Move(homing_feedrate(Z_AXIS));
   }
 }
 
@@ -1285,24 +1273,14 @@ void HMI_Move_Z() {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState != ENCODER_DIFF_NO) {
       if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_E_scaled)) {
-        checkkey = AxisMove;
-        EncoderRate.enabled = false;
         last_E_scaled = HMI_ValueStruct.Move_E_scaled;
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
-        if (!planner.is_full()) {
-          planner.synchronize(); // Wait for planner moves to finish!
-          planner.buffer_line(current_position, MMM_TO_MMS(FEEDRATE_E), active_extruder);
-        }
-        DWIN_UpdateLCD();
-        return;
+        return HMI_Move_Done(E_AXIS);
       }
-      if ((HMI_ValueStruct.Move_E_scaled - last_E_scaled) > (EXTRUDE_MAXLENGTH) * MINUNITMULT)
-        HMI_ValueStruct.Move_E_scaled = last_E_scaled + (EXTRUDE_MAXLENGTH) * MINUNITMULT;
-      else if ((last_E_scaled - HMI_ValueStruct.Move_E_scaled) > (EXTRUDE_MAXLENGTH) * MINUNITMULT)
-        HMI_ValueStruct.Move_E_scaled = last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT;
+      LIMIT(HMI_ValueStruct.Move_E_scaled, last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT, last_E_scaled + (EXTRUDE_MAXLENGTH) * MINUNITMULT);
       current_position.e = HMI_ValueStruct.Move_E_scaled / MINUNITMULT;
       DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
       DWIN_UpdateLCD();
+      HMI_Plan_Move(MMM_TO_MMS(FEEDRATE_E));
     }
   }
 

commit b2f77bb0507fd5cd7029d3bed207b5a52f7c9fe4
Author: InsanityAutomation <d.menzel@insanityautomation.com>
Date:   Wed Feb 10 07:34:37 2021 -0500

    Use configuration website, fix edit color

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index d7af1208ad..367e86232c 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -88,11 +88,8 @@
 #ifndef MACHINE_SIZE
   #define MACHINE_SIZE STRINGIFY(X_BED_SIZE) "x" STRINGIFY(Y_BED_SIZE) "x" STRINGIFY(Z_MAX_POS)
 #endif
-#ifndef CORP_WEBSITE_C
-  #define CORP_WEBSITE_C "www.cxsw3d.com"
-#endif
-#ifndef CORP_WEBSITE_E
-  #define CORP_WEBSITE_E "www.creality.com"
+#ifndef CORP_WEBSITE
+  #define CORP_WEBSITE WEBSITE_URL
 #endif
 
 #define PAUSE_HEAT
@@ -1232,7 +1229,7 @@ void HMI_Move_X() {
     }
     LIMIT(HMI_ValueStruct.Move_X_scaled, (X_MIN_POS) * MINUNITMULT, (X_MAX_POS) * MINUNITMULT);
     current_position.x = HMI_ValueStruct.Move_X_scaled / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
     DWIN_UpdateLCD();
   }
 }
@@ -1254,7 +1251,7 @@ void HMI_Move_Y() {
     }
     LIMIT(HMI_ValueStruct.Move_Y_scaled, (Y_MIN_POS) * MINUNITMULT, (Y_MAX_POS) * MINUNITMULT);
     current_position.y = HMI_ValueStruct.Move_Y_scaled / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
     DWIN_UpdateLCD();
   }
 }
@@ -1276,7 +1273,7 @@ void HMI_Move_Z() {
     }
     LIMIT(HMI_ValueStruct.Move_Z_scaled, Z_MIN_POS * MINUNITMULT, Z_MAX_POS * MINUNITMULT);
     current_position.z = HMI_ValueStruct.Move_Z_scaled / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
     DWIN_UpdateLCD();
   }
 }
@@ -1304,7 +1301,7 @@ void HMI_Move_Z() {
       else if ((last_E_scaled - HMI_ValueStruct.Move_E_scaled) > (EXTRUDE_MAXLENGTH) * MINUNITMULT)
         HMI_ValueStruct.Move_E_scaled = last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT;
       current_position.e = HMI_ValueStruct.Move_E_scaled / MINUNITMULT;
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
+      DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
       DWIN_UpdateLCD();
     }
   }
@@ -1983,7 +1980,6 @@ void Draw_Info_Menu() {
     DWIN_Frame_AreaCopy(1, 197, 149, 252, 161, 108, 102);
     DWIN_Frame_AreaCopy(1, 1, 164, 56, 176, 108, 175);
     DWIN_Frame_AreaCopy(1, 58, 164, 113, 176, 105, 248);
-    DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE_C) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE_C));
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -1995,8 +1991,8 @@ void Draw_Info_Menu() {
     DWIN_Frame_AreaCopy(1, 120, 150, 146, 161, 124, 102);
     DWIN_Frame_AreaCopy(1, 146, 151, 254, 161, 82, 175);
     DWIN_Frame_AreaCopy(1, 0, 165, 94, 175, 89, 248);
-    DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE_E) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE_E));
   }
+  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE));
 
   Draw_Back_First();
   LOOP_L_N(i, 3) {

commit 3c41f108df202089ef4e01daaa0b2a4c8bdb63ee
Author: Jyers <76993396+Jyers@users.noreply.github.com>
Date:   Fri Feb 12 05:55:06 2021 -0500

    Improved Ender 3 V2 display status area (#20983)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 1f231954cc..d7af1208ad 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -138,6 +138,7 @@
 #define MINUNITMULT pow(10, UNITFDIGITS)
 
 #define ENCODER_WAIT_MS                  20
+#define DWIN_VAR_UPDATE_INTERVAL         1024
 #define DWIN_SCROLL_UPDATE_INTERVAL      SEC_TO_MS(2)
 #define DWIN_REMAIN_TIME_UPDATE_INTERVAL SEC_TO_MS(20)
 
@@ -1581,6 +1582,41 @@ void HMI_StepXYZE() {
   }
 }
 
+// Draw X, Y, Z and blink if in an un-homed or un-trusted state
+void _update_axis_value(const AxisEnum axis, const uint16_t x, const uint16_t y, const bool blink, const bool force) {
+  const bool draw_qmark = axis_should_home(axis),
+             draw_empty = NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING) && !draw_qmark && !axis_is_trusted(axis);
+
+  // Check for a position change
+  static xyz_pos_t oldpos = { -1, -1, -1 };
+  const float p = current_position[axis];
+  const bool changed = oldpos[axis] != p;
+  if (changed) oldpos[axis] = p;
+
+  if (force || changed || draw_qmark || draw_empty) {
+    if (blink && draw_qmark)
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, x, y, F("???.?"));
+    else if (blink && draw_empty)
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, x, y, F("     "));
+    else
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, x, y, p * 10);
+  }
+}
+
+void _draw_xyz_position(const bool force) {
+  //SERIAL_ECHOPGM("Draw XYZ:");
+  static bool _blink = false;
+  const bool blink = !!(millis() & 0x400UL);
+  if (force || blink != _blink) {
+    _blink = blink;
+    //SERIAL_ECHOPGM(" (blink)");
+    _update_axis_value(X_AXIS,  35, 459, blink, true);
+    _update_axis_value(Y_AXIS, 120, 459, blink, true);
+    _update_axis_value(Z_AXIS, 205, 459, blink, true);
+  }
+  //SERIAL_EOL();
+}
+
 void update_variable() {
   #if HAS_HOTEND
     static float _hotendtemp = 0;
@@ -1639,29 +1675,51 @@ void update_variable() {
 
   #if HAS_HOTEND
     if (_new_hotend_temp)
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33, 382, _hotendtemp);
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 384, _hotendtemp);
     if (_new_hotend_target)
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 4 * STAT_CHR_W + 6, 382, _hotendtarget);
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 384, _hotendtarget);
+
+    static int16_t _flow = planner.flow_percentage[0];
+    if (_flow != planner.flow_percentage[0]) {
+      _flow = planner.flow_percentage[0];
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 417, _flow);
+    }
   #endif
 
   #if HAS_HEATED_BED
     if (_new_bed_temp)
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178, 382, _bedtemp);
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 417, _bedtemp);
     if (_new_bed_target)
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178 + 4 * STAT_CHR_W + 6, 382, _bedtarget);
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 417, _bedtarget);
   #endif
 
   static int16_t _feedrate = 100;
   if (_feedrate != feedrate_percentage) {
     _feedrate = feedrate_percentage;
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 2 * STAT_CHR_W, 429, _feedrate);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 384, _feedrate);
   }
-  #if HAS_ZOFFSET_ITEM
-    if (last_zoffset != BABY_Z_VAR) {
-      last_zoffset = BABY_Z_VAR;
-      DWIN_Draw_Signed_Float(DWIN_FONT_STAT, Color_Bg_Black, 2, 2, 178 + STAT_CHR_W, 429, last_zoffset * 100);
+
+  #if HAS_FAN
+    if (_fanspeed != thermalManager.fan_speed[0]) {
+      _fanspeed = thermalManager.fan_speed[0];
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 195 + 2 * STAT_CHR_W, 384, _fanspeed);
     }
   #endif
+
+  static float _offset = 0;
+  if (BABY_Z_VAR != _offset) {
+    _offset = BABY_Z_VAR;
+    if (BABY_Z_VAR < 0) {
+      DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, -_offset * 100);
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
+    }
+    else {
+      DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, _offset * 100);
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
+    }
+  }
+
+  _draw_xyz_position(false);
 }
 
 /**
@@ -1853,39 +1911,55 @@ void HMI_SDCardUpdate() {
 //
 void Draw_Status_Area(const bool with_update) {
 
-  // Clear the bottom area of the screen
   DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, STATUS_Y, DWIN_WIDTH, DWIN_HEIGHT - 1);
 
-  //
-  // Status Area
-  //
   #if HAS_HOTEND
-    DWIN_ICON_Show(ICON, ICON_HotendTemp, 13, 381);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
-    DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 33 + 3 * STAT_CHR_W + 5, 383, F("/"));
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
-  #endif
-  #if HOTENDS > 1
-    // DWIN_ICON_Show(ICON,ICON_HotendTemp, 13, 381);
+    DWIN_ICON_Show(ICON, ICON_HotendTemp, 10, 383);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 384, thermalManager.temp_hotend[0].celsius);
+    DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 384, F("/"));
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 384, thermalManager.temp_hotend[0].target);
+
+    DWIN_ICON_Show(ICON, ICON_StepE, 112, 417);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 417, planner.flow_percentage[0]);
+    DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 417, F("%"));
   #endif
 
   #if HAS_HEATED_BED
-    DWIN_ICON_Show(ICON, ICON_BedTemp, 158, 381);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178, 382, thermalManager.temp_bed.celsius);
-    DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 178 + 3 * STAT_CHR_W + 5, 383, F("/"));
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
+    DWIN_ICON_Show(ICON, ICON_BedTemp, 10, 416);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 417, thermalManager.temp_bed.celsius);
+    DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 417, F("/"));
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 417, thermalManager.temp_bed.target);
   #endif
 
-  DWIN_ICON_Show(ICON, ICON_Speed, 13, 429);
-  DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
-  DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 33 + 5 * STAT_CHR_W + 2, 429, F("%"));
+  DWIN_ICON_Show(ICON, ICON_Speed, 113, 383);
+  DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 384, feedrate_percentage);
+  DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 384, F("%"));
+
+  #if HAS_FAN
+    DWIN_ICON_Show(ICON, ICON_FanSpeed, 187, 383);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 195 + 2 * STAT_CHR_W, 384, thermalManager.fan_speed[0]);
+  #endif
 
   #if HAS_ZOFFSET_ITEM
-    DWIN_ICON_Show(ICON, ICON_Zoffset, 158, 428);
-    dwin_zoffset = BABY_Z_VAR;
-    DWIN_Draw_Signed_Float(DWIN_FONT_STAT, Color_Bg_Black, 2, 2, 178, 429, dwin_zoffset * 100);
+    DWIN_ICON_Show(ICON, ICON_Zoffset, 187, 416);
   #endif
 
+  if (BABY_Z_VAR < 0) {
+    DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, -BABY_Z_VAR * 100);
+    DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
+  }
+  else {
+    DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, BABY_Z_VAR * 100);
+    DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
+  }
+
+  DWIN_Draw_Rectangle(1, Line_Color, 0, 449, DWIN_WIDTH, 451);
+
+  DWIN_ICON_Show(ICON, ICON_MaxSpeedX,  10, 456);
+  DWIN_ICON_Show(ICON, ICON_MaxSpeedY,  95, 456);
+  DWIN_ICON_Show(ICON, ICON_MaxSpeedZ, 180, 456);
+  _draw_xyz_position(true);
+
   if (with_update) {
     DWIN_UpdateLCD();
     delay(5);
@@ -3546,14 +3620,17 @@ void DWIN_Update() {
 }
 
 void EachMomentUpdate() {
-  static millis_t next_rts_update_ms = 0;
+  static millis_t next_var_update_ms = 0, next_rts_update_ms = 0;
+
   const millis_t ms = millis();
+  if (ELAPSED(ms, next_var_update_ms)) {
+    next_var_update_ms = ms + DWIN_VAR_UPDATE_INTERVAL;
+    update_variable();
+  }
+
   if (PENDING(ms, next_rts_update_ms)) return;
   next_rts_update_ms = ms + DWIN_SCROLL_UPDATE_INTERVAL;
 
-  // variable update
-  update_variable();
-
   if (checkkey == PrintProcess) {
     // if print done
     if (HMI_flag.print_finish && !HMI_flag.done_confirm_flag) {

commit 01215f5015d04ac37c6ec230323772737a983948
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Feb 12 03:52:21 2021 -0600

    Ender 3 V2 DWIN cleanup (#21061)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 04171b9d79..1f231954cc 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -98,6 +98,7 @@
 #define PAUSE_HEAT
 
 #define USE_STRING_HEADINGS
+//#define USE_STRING_TITLES
 
 #define DWIN_FONT_MENU font8x16
 #define DWIN_FONT_STAT font10x20
@@ -136,9 +137,9 @@
 #define UNITFDIGITS 1
 #define MINUNITMULT pow(10, UNITFDIGITS)
 
-#define ENCODER_WAIT    20
-#define DWIN_SCROLL_UPDATE_INTERVAL 2000
-#define DWIN_REMAIN_TIME_UPDATE_INTERVAL 20000
+#define ENCODER_WAIT_MS                  20
+#define DWIN_SCROLL_UPDATE_INTERVAL      SEC_TO_MS(2)
+#define DWIN_REMAIN_TIME_UPDATE_INTERVAL SEC_TO_MS(20)
 
 constexpr uint16_t TROWS = 6, MROWS = TROWS - 1,        // Total rows, and other-than-Back
                    TITLE_HEIGHT = 30,                   // Title bar height
@@ -400,28 +401,28 @@ void ICON_Stop() {
   }
 }
 
-inline void Clear_Title_Bar() {
+void Clear_Title_Bar() {
   DWIN_Draw_Rectangle(1, Color_Bg_Blue, 0, 0, DWIN_WIDTH, 30);
 }
 
-inline void Draw_Title(const char * const title) {
+void Draw_Title(const char * const title) {
   DWIN_Draw_String(false, false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, (char*)title);
 }
 
-inline void Draw_Title(const __FlashStringHelper * title) {
+void Draw_Title(const __FlashStringHelper * title) {
   DWIN_Draw_String(false, false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, (char*)title);
 }
 
-inline void Clear_Menu_Area() {
+void Clear_Menu_Area() {
   DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 31, DWIN_WIDTH, STATUS_Y);
 }
 
-inline void Clear_Main_Window() {
+void Clear_Main_Window() {
   Clear_Title_Bar();
   Clear_Menu_Area();
 }
 
-inline void Clear_Popup_Area() {
+void Clear_Popup_Area() {
   Clear_Title_Bar();
   DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 31, DWIN_WIDTH, DWIN_HEIGHT);
 }
@@ -430,30 +431,30 @@ void Draw_Popup_Bkgd_105() {
   DWIN_Draw_Rectangle(1, Color_Bg_Window, 14, 105, 258, 374);
 }
 
-inline void Draw_More_Icon(const uint8_t line) {
+void Draw_More_Icon(const uint8_t line) {
   DWIN_ICON_Show(ICON, ICON_More, 226, MBASE(line) - 3);
 }
 
-inline void Draw_Menu_Cursor(const uint8_t line) {
+void Draw_Menu_Cursor(const uint8_t line) {
   // DWIN_ICON_Show(ICON,ICON_Rectangle, 0, MBASE(line) - 18);
   DWIN_Draw_Rectangle(1, Rectangle_Color, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
 }
 
-inline void Erase_Menu_Cursor(const uint8_t line) {
+void Erase_Menu_Cursor(const uint8_t line) {
   DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
 }
 
-inline void Move_Highlight(const int16_t from, const uint16_t newline) {
+void Move_Highlight(const int16_t from, const uint16_t newline) {
   Erase_Menu_Cursor(newline - from);
   Draw_Menu_Cursor(newline);
 }
 
-inline void Add_Menu_Line() {
+void Add_Menu_Line() {
   Move_Highlight(1, MROWS);
   DWIN_Draw_Line(Line_Color, 16, MBASE(MROWS + 1) - 20, 256, MBASE(MROWS + 1) - 19);
 }
 
-inline void Scroll_Menu(const uint8_t dir) {
+void Scroll_Menu(const uint8_t dir) {
   DWIN_Frame_AreaMove(1, dir, MLINE, Color_Bg_Black, 0, 31, DWIN_WIDTH, 349);
   switch (dir) {
     case DWIN_SCROLL_DOWN: Move_Highlight(-1, 0); break;
@@ -465,22 +466,22 @@ inline uint16_t nr_sd_menu_items() {
   return card.get_num_Files() + !card.flag.workDirIsRoot;
 }
 
-inline void Draw_Menu_Icon(const uint8_t line, const uint8_t icon) {
+void Draw_Menu_Icon(const uint8_t line, const uint8_t icon) {
   DWIN_ICON_Show(ICON, icon, 26, MBASE(line) - 3);
 }
 
-inline void Erase_Menu_Text(const uint8_t line) {
+void Erase_Menu_Text(const uint8_t line) {
   DWIN_Draw_Rectangle(1, Color_Bg_Black, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
 }
 
-inline void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr) {
+void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr) {
   if (label) DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, (char*)label);
   if (icon) Draw_Menu_Icon(line, icon);
   DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
 
 // The "Back" label is always on the first line
-inline void Draw_Back_Label() {
+void Draw_Back_Label() {
   if (HMI_IsChinese())
     DWIN_Frame_AreaCopy(1, 129, 72, 156, 84, LBLX, MBASE(0));
   else
@@ -488,7 +489,7 @@ inline void Draw_Back_Label() {
 }
 
 // Draw "Back" line at the top
-inline void Draw_Back_First(const bool is_sel=true) {
+void Draw_Back_First(const bool is_sel=true) {
   Draw_Menu_Line(0, ICON_Back);
   Draw_Back_Label();
   if (is_sel) Draw_Menu_Cursor(0);
@@ -554,40 +555,61 @@ inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, auto &valr
 // Draw Menus
 //
 
-inline void draw_move_en(const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 69, 61, 102, 71, LBLX, line); // "Move"
+void DWIN_Draw_Label(const uint16_t y, char *string) {
+  DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, y, string);
+}
+void DWIN_Draw_Label(const uint16_t y, const __FlashStringHelper *title) {
+  DWIN_Draw_Label(y, (char*)title);
+}
+
+void draw_move_en(const uint16_t line) {
+  #ifdef USE_STRING_TITLES
+    DWIN_Draw_Label(line, F("Move"));
+  #else
+    DWIN_Frame_AreaCopy(1, 69, 61, 102, 71, LBLX, line); // "Move"
+  #endif
 }
 
-inline void DWIN_Frame_TitleCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) { DWIN_Frame_AreaCopy(id, x1, y1, x2, y2, 14, 8); }
+void DWIN_Frame_TitleCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) { DWIN_Frame_AreaCopy(id, x1, y1, x2, y2, 14, 8); }
 
-inline void Item_Prepare_Move(const uint8_t row) {
+void Item_Prepare_Move(const uint8_t row) {
   if (HMI_IsChinese())
     DWIN_Frame_AreaCopy(1, 159, 70, 200, 84, LBLX, MBASE(row));
   else
-    draw_move_en(MBASE(row)); // "Move >"
+    draw_move_en(MBASE(row)); // "Move"
   Draw_Menu_Line(row, ICON_Axis);
   Draw_More_Icon(row);
 }
 
-inline void Item_Prepare_Disable(const uint8_t row) {
+void Item_Prepare_Disable(const uint8_t row) {
   if (HMI_IsChinese())
     DWIN_Frame_AreaCopy(1, 204, 70, 259, 82, LBLX, MBASE(row));
-  else
-    DWIN_Frame_AreaCopy(1, 103, 59, 200, 74, LBLX, MBASE(row)); // "Disable Stepper"
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_DISABLE_STEPPERS));
+    #else
+      DWIN_Frame_AreaCopy(1, 103, 59, 200, 74, LBLX, MBASE(row)); // "Disable Stepper"
+    #endif
+  }
   Draw_Menu_Line(row, ICON_CloseMotor);
 }
 
-inline void Item_Prepare_Home(const uint8_t row) {
+void Item_Prepare_Home(const uint8_t row) {
   if (HMI_IsChinese())
     DWIN_Frame_AreaCopy(1, 0, 89, 41, 101, LBLX, MBASE(row));
-  else
-    DWIN_Frame_AreaCopy(1, 202, 61, 271, 71, LBLX, MBASE(row)); // "Auto Home"
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_AUTO_HOME));
+    #else
+      DWIN_Frame_AreaCopy(1, 202, 61, 271, 71, LBLX, MBASE(row)); // "Auto Home"
+    #endif
+  }
   Draw_Menu_Line(row, ICON_Homing);
 }
 
 #if HAS_ZOFFSET_ITEM
 
-  inline void Item_Prepare_Offset(const uint8_t row) {
+  void Item_Prepare_Offset(const uint8_t row) {
     if (HMI_IsChinese()) {
       #if HAS_BED_PROBE
         DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(row));
@@ -598,10 +620,18 @@ inline void Item_Prepare_Home(const uint8_t row) {
     }
     else {
       #if HAS_BED_PROBE
-        DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(row));    // "Z-Offset"
+        #ifdef USE_STRING_TITLES
+          DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+        #else
+          DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(row));    // "Z-Offset"
+        #endif
         DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
       #else
-        DWIN_Frame_AreaCopy(1, 1, 76, 106, 86, LBLX, MBASE(row));       // "..."
+        #ifdef USE_STRING_TITLES
+          DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_SET_HOME_OFFSETS));
+        #else
+          DWIN_Frame_AreaCopy(1, 1, 76, 106, 86, LBLX, MBASE(row));       // "Set home offsets"
+        #endif
       #endif
     }
     Draw_Menu_Line(row, ICON_SetHome);
@@ -610,52 +640,67 @@ inline void Item_Prepare_Home(const uint8_t row) {
 #endif
 
 #if HAS_HOTEND
-  inline void Item_Prepare_PLA(const uint8_t row) {
+  void Item_Prepare_PLA(const uint8_t row) {
     if (HMI_IsChinese()) {
       DWIN_Frame_AreaCopy(1, 100, 89, 151, 101, LBLX, MBASE(row));
     }
     else {
-      DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
-      DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(row));  // "PLA"
+      #ifdef USE_STRING_TITLES
+        DWIN_Draw_Label(MBASE(row), F("Preheat " PREHEAT_1_LABEL));
+      #else
+        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
+        DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(row));  // "PLA"
+      #endif
     }
     Draw_Menu_Line(row, ICON_PLAPreheat);
   }
 
-  inline void Item_Prepare_ABS(const uint8_t row) {
+  void Item_Prepare_ABS(const uint8_t row) {
     if (HMI_IsChinese()) {
       DWIN_Frame_AreaCopy(1, 180, 89, 233, 100, LBLX, MBASE(row));
     }
     else {
-      DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
-      DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(row));  // "ABS"
+      #ifdef USE_STRING_TITLES
+        DWIN_Draw_Label(MBASE(row), F("Preheat " PREHEAT_2_LABEL));
+      #else
+        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
+        DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(row));  // "ABS"
+      #endif
     }
     Draw_Menu_Line(row, ICON_ABSPreheat);
   }
 #endif
 
 #if HAS_PREHEAT
-  inline void Item_Prepare_Cool(const uint8_t row) {
+  void Item_Prepare_Cool(const uint8_t row) {
     if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1,   1, 104,  56, 117, LBLX, MBASE(row));
-    else
-      DWIN_Frame_AreaCopy(1, 200,  76, 264,  86, LBLX, MBASE(row));      // "Cooldown"
+    else {
+      #ifdef USE_STRING_TITLES
+        DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_COOLDOWN));
+      #else
+        DWIN_Frame_AreaCopy(1, 200,  76, 264,  86, LBLX, MBASE(row));      // "Cooldown"
+      #endif
+    }
     Draw_Menu_Line(row, ICON_Cool);
   }
 #endif
 
-inline void Item_Prepare_Lang(const uint8_t row) {
-  if (HMI_IsChinese()) {
+void Item_Prepare_Lang(const uint8_t row) {
+  if (HMI_IsChinese())
     DWIN_Frame_AreaCopy(1, 239, 134, 266, 146, LBLX, MBASE(row));
-    DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, 226, MBASE(row), F("CN"));
-  }
   else {
-    DWIN_Frame_AreaCopy(1, 0, 194, 121, 207, LBLX, MBASE(row)); // "Language selection"
-    DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, 226, MBASE(row), F("EN"));
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(row), F("UI Language"));
+    #else
+      DWIN_Frame_AreaCopy(1, 0, 194, 121, 207, LBLX, MBASE(row)); // "Language selection"
+    #endif
   }
+  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, 226, MBASE(row), HMI_IsChinese() ? F("CN") : F("EN"));
   Draw_Menu_Icon(row, ICON_Language);
 }
 
-inline void Draw_Prepare_Menu() {
+void Draw_Prepare_Menu() {
   Clear_Main_Window();
 
   const int16_t scroll = MROWS - index_prepare; // Scrolled-up lines
@@ -692,7 +737,19 @@ inline void Draw_Prepare_Menu() {
   if (select_prepare.now) Draw_Menu_Cursor(PSCROL(select_prepare.now));
 }
 
-inline void Draw_Control_Menu() {
+void Item_Control_Info(const uint16_t line) {
+  if (HMI_IsChinese())
+    DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, line);
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(line, F("Info"));
+    #else
+      DWIN_Frame_AreaCopy(1, 0, 104, 24, 114, LBLX, line);
+    #endif
+  }
+}
+
+void Draw_Control_Menu() {
   Clear_Main_Window();
 
   #if CONTROL_CASE_TOTAL >= 6
@@ -717,36 +774,36 @@ inline void Draw_Control_Menu() {
       DWIN_Frame_AreaCopy(1, 174, 103, 229, 116, LBLX, CLINE(CONTROL_CASE_LOAD));   // Read Configuration
       DWIN_Frame_AreaCopy(1,   1, 118,  56, 131, LBLX, CLINE(CONTROL_CASE_RESET));  // Reset Configuration
     #endif
-
-    if (CVISI(CONTROL_CASE_INFO))
-      DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, CLINE(CONTROL_CASE_TEMP)); // Info >
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_CONTROL));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, CLINE(CONTROL_CASE_TEMP), GET_TEXT_F(MSG_TEMPERATURE));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, CLINE(CONTROL_CASE_MOVE), GET_TEXT_F(MSG_MOTION));
+    #else
+      DWIN_Frame_TitleCopy(1, 128, 2, 176, 12);                                         // "Control"
+    #endif
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(CLINE(CONTROL_CASE_TEMP), GET_TEXT_F(MSG_TEMPERATURE));
+      DWIN_Draw_Label(CLINE(CONTROL_CASE_MOVE), GET_TEXT_F(MSG_MOTION));
       #if ENABLED(EEPROM_SETTINGS)
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, CLINE(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, CLINE(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, CLINE(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
+        DWIN_Draw_Label(CLINE(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+        DWIN_Draw_Label(CLINE(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));
+        DWIN_Draw_Label(CLINE(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
       #endif
-      if (CVISI(CONTROL_CASE_INFO)) DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, CLINE(CONTROL_CASE_INFO), F("Info"));
     #else
-      DWIN_Frame_TitleCopy(1, 128, 2, 176, 12);                                           // "Control"
       DWIN_Frame_AreaCopy(1,  1, 89,  83, 101, LBLX, CLINE(CONTROL_CASE_TEMP));           // Temperature >
       DWIN_Frame_AreaCopy(1, 84, 89, 128,  99, LBLX, CLINE(CONTROL_CASE_MOVE));           // Motion >
       #if ENABLED(EEPROM_SETTINGS)
-        DWIN_Frame_AreaCopy(1, 148,  89, 268, 101, LBLX     , CLINE(CONTROL_CASE_SAVE     // "Store Configuration"
+        DWIN_Frame_AreaCopy(1, 148,  89, 268, 101, LBLX     , CLINE(CONTROL_CASE_SAVE));  // "Store Configuration"
         DWIN_Frame_AreaCopy(1,  26, 104,  57, 114, LBLX     , CLINE(CONTROL_CASE_LOAD));  // "Read"
         DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 34, CLINE(CONTROL_CASE_LOAD));  // "Configuration"
         DWIN_Frame_AreaCopy(1,  59, 104,  93, 114, LBLX     , CLINE(CONTROL_CASE_RESET)); // "Reset"
         DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 37, CLINE(CONTROL_CASE_RESET)); // "Configuration"
       #endif
-      if (CVISI(CONTROL_CASE_INFO)) DWIN_Frame_AreaCopy(1, 0, 104, 25, 115, LBLX, CLINE(CONTROL_CASE_INFO));  // Info >
     #endif
   }
 
+  if (CVISI(CONTROL_CASE_INFO)) Item_Control_Info(CLINE(CONTROL_CASE_INFO));
+
   if (select_control.now && CVISI(select_control.now))
     Draw_Menu_Cursor(CSCROL(select_control.now));
 
@@ -770,7 +827,7 @@ inline void Draw_Control_Menu() {
   if (CVISI(CONTROL_CASE_INFO)) Draw_More_Icon(CSCROL(i));
 }
 
-inline void Draw_Tune_Menu() {
+void Draw_Tune_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
@@ -792,19 +849,22 @@ inline void Draw_Tune_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_TUNE));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TUNE_CASE_SPEED), GET_TEXT_F(MSG_SPEED));
+    #else
+      DWIN_Frame_AreaCopy(1, 94, 2, 126, 12, 14, 9);
+    #endif
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(TUNE_CASE_SPEED), GET_TEXT_F(MSG_SPEED));
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TUNE_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+        DWIN_Draw_Label(MBASE(TUNE_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
       #endif
       #if HAS_HEATED_BED
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TUNE_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+        DWIN_Draw_Label(MBASE(TUNE_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
       #endif
       #if HAS_FAN
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TUNE_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+        DWIN_Draw_Label(MBASE(TUNE_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
       #endif
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TUNE_CASE_ZOFF), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+      DWIN_Draw_Label(MBASE(TUNE_CASE_ZOFF), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
     #else
-      DWIN_Frame_AreaCopy(1, 94, 2, 126, 12, 14, 9);
       DWIN_Frame_AreaCopy(1, 1, 179, 92, 190, LBLX, MBASE(TUNE_CASE_SPEED));      // Print speed
       #if HAS_HOTEND
         DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(TUNE_CASE_TEMP));  // Hotend...
@@ -847,36 +907,36 @@ inline void Draw_Tune_Menu() {
   #endif
 }
 
-inline void draw_max_en(const uint16_t line) {
+void draw_max_en(const uint16_t line) {
   DWIN_Frame_AreaCopy(1, 245, 119, 269, 129, LBLX, line);   // "Max"
 }
-inline void draw_max_accel_en(const uint16_t line) {
+void draw_max_accel_en(const uint16_t line) {
   draw_max_en(line);
   DWIN_Frame_AreaCopy(1, 1, 135, 79, 145, LBLX + 27, line); // "Acceleration"
 }
-inline void draw_speed_en(const uint16_t inset, const uint16_t line) {
+void draw_speed_en(const uint16_t inset, const uint16_t line) {
   DWIN_Frame_AreaCopy(1, 184, 119, 224, 132, LBLX + inset, line); // "Speed"
 }
-inline void draw_jerk_en(const uint16_t line) {
+void draw_jerk_en(const uint16_t line) {
   DWIN_Frame_AreaCopy(1, 64, 119, 106, 129, LBLX + 27, line); // "Jerk"
 }
-inline void draw_steps_per_mm(const uint16_t line) {
+void draw_steps_per_mm(const uint16_t line) {
   DWIN_Frame_AreaCopy(1, 1, 151, 101, 161, LBLX, line);   // "Steps-per-mm"
 }
-inline void say_x(const uint16_t inset, const uint16_t line) {
+void say_x(const uint16_t inset, const uint16_t line) {
   DWIN_Frame_AreaCopy(1, 95, 104, 102, 114, LBLX + inset, line); // "X"
 }
-inline void say_y(const uint16_t inset, const uint16_t line) {
+void say_y(const uint16_t inset, const uint16_t line) {
   DWIN_Frame_AreaCopy(1, 104, 104, 110, 114, LBLX + inset, line); // "Y"
 }
-inline void say_z(const uint16_t inset, const uint16_t line) {
+void say_z(const uint16_t inset, const uint16_t line) {
   DWIN_Frame_AreaCopy(1, 112, 104, 120, 114, LBLX + inset, line); // "Z"
 }
-inline void say_e(const uint16_t inset, const uint16_t line) {
+void say_e(const uint16_t inset, const uint16_t line) {
   DWIN_Frame_AreaCopy(1, 237, 119, 244, 129, LBLX + inset, line); // "E"
 }
 
-inline void Draw_Motion_Menu() {
+void Draw_Motion_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
@@ -894,14 +954,17 @@ inline void Draw_Motion_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_MOTION));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(MOTION_CASE_RATE), F("Feedrate"));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(MOTION_CASE_ACCEL), GET_TEXT_F(MSG_ACCELERATION));
+    #else
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);                                        // "Motion"
+    #endif
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(MOTION_CASE_RATE), F("Feedrate"));
+      DWIN_Draw_Label(MBASE(MOTION_CASE_ACCEL), GET_TEXT_F(MSG_ACCELERATION));
       #if HAS_CLASSIC_JERK
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(MOTION_CASE_JERK), GET_TEXT_F(MSG_JERK));
+        DWIN_Draw_Label(MBASE(MOTION_CASE_JERK), GET_TEXT_F(MSG_JERK));
       #endif
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(MOTION_CASE_STEPS), GET_TEXT_F(MSG_STEPS_PER_MM));
+      DWIN_Draw_Label(MBASE(MOTION_CASE_STEPS), GET_TEXT_F(MSG_STEPS_PER_MM));
     #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);                                        // "Motion"
       draw_max_en(MBASE(MOTION_CASE_RATE)); draw_speed_en(27, MBASE(MOTION_CASE_RATE)); // "Max Speed"
       draw_max_accel_en(MBASE(MOTION_CASE_ACCEL));                                      // "Max Acceleration"
       #if HAS_CLASSIC_JERK
@@ -959,7 +1022,7 @@ inline void Draw_Motion_Menu() {
 
 #endif
 
-inline void Draw_Popup_Bkgd_60() {
+void Draw_Popup_Bkgd_60() {
   DWIN_Draw_Rectangle(1, Color_Bg_Window, 14, 60, 258, 330);
 }
 
@@ -1147,7 +1210,7 @@ inline ENCODER_DiffState get_encoder_state() {
   const millis_t ms = millis();
   if (PENDING(ms, Encoder_ms)) return ENCODER_DIFF_NO;
   const ENCODER_DiffState state = Encoder_ReceiveAnalyze();
-  if (state != ENCODER_DIFF_NO) Encoder_ms = ms + ENCODER_WAIT;
+  if (state != ENCODER_DIFF_NO) Encoder_ms = ms + ENCODER_WAIT_MS;
   return state;
 }
 
@@ -1369,7 +1432,7 @@ void HMI_Move_Z() {
 
 #endif // HAS_HEATED_BED
 
-#if HAS_PREHEAT
+#if HAS_PREHEAT && HAS_FAN
 
   void HMI_FanSpeed() {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
@@ -1411,7 +1474,7 @@ void HMI_Move_Z() {
     }
   }
 
-#endif // HAS_PREHEAT
+#endif // HAS_PREHEAT && HAS_FAN
 
 void HMI_PrintSpeed() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
@@ -1519,86 +1582,84 @@ void HMI_StepXYZE() {
 }
 
 void update_variable() {
-  TERN_(HAS_HOTEND, static float last_temp_hotend_target = 0);
-  TERN_(HAS_HEATED_BED, static float last_temp_bed_target = 0);
-  TERN_(HAS_FAN, static uint8_t last_fan_speed = 0);
+  #if HAS_HOTEND
+    static float _hotendtemp = 0;
+    const bool _new_hotend_temp = _hotendtemp != thermalManager.temp_hotend[0].celsius;
+    if (_new_hotend_temp) _hotendtemp = thermalManager.temp_hotend[0].celsius;
+    static int16_t _hotendtarget = 0;
+    const bool _new_hotend_target = _hotendtarget != thermalManager.temp_hotend[0].target;
+    if (_new_hotend_target) _hotendtarget = thermalManager.temp_hotend[0].target;
+  #endif
+  #if HAS_HEATED_BED
+    static float _bedtemp = 0;
+    const bool _new_bed_temp = _bedtemp != thermalManager.temp_bed.celsius;
+    if (_new_bed_temp) _bedtemp = thermalManager.temp_bed.celsius;
+    static int16_t _bedtarget = 0;
+    const bool _new_bed_target = _bedtarget != thermalManager.temp_bed.target;
+    if (_new_bed_target) _bedtarget = thermalManager.temp_bed.target;
+  #endif
+  #if HAS_FAN
+    static uint8_t _fanspeed = 0;
+    const bool _new_fanspeed = _fanspeed != thermalManager.fan_speed[0];
+    if (_new_fanspeed) _fanspeed = thermalManager.fan_speed[0];
+  #endif
 
-  /* Tune page temperature update */
   if (checkkey == Tune) {
+    // Tune page temperature update
     #if HAS_HOTEND
-      if (last_temp_hotend_target != thermalManager.temp_hotend[0].target) {
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), thermalManager.temp_hotend[0].target);
-        last_temp_hotend_target = thermalManager.temp_hotend[0].target;
-      }
+      if (_new_hotend_target)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), _hotendtarget);
     #endif
     #if HAS_HEATED_BED
-      if (last_temp_bed_target != thermalManager.temp_bed.target) {
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), thermalManager.temp_bed.target);
-        last_temp_bed_target = thermalManager.temp_bed.target;
-      }
+      if (_new_bed_target)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), _bedtarget);
     #endif
     #if HAS_FAN
-      if (last_fan_speed != thermalManager.fan_speed[0]) {
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), thermalManager.fan_speed[0]);
-        last_fan_speed = thermalManager.fan_speed[0];
-      }
+      if (_new_fanspeed)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), _fanspeed);
     #endif
   }
-
-  /* Temperature page temperature update */
-  if (checkkey == TemperatureID) {
+  else if (checkkey == TemperatureID) {
+    // Temperature page temperature update
     #if HAS_HOTEND
-      if (last_temp_hotend_target != thermalManager.temp_hotend[0].target) {
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_TEMP), thermalManager.temp_hotend[0].target);
-        last_temp_hotend_target = thermalManager.temp_hotend[0].target;
-      }
+      if (_new_hotend_target)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_TEMP), _hotendtarget);
     #endif
     #if HAS_HEATED_BED
-      if (last_temp_bed_target != thermalManager.temp_bed.target) {
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_BED), thermalManager.temp_bed.target);
-        last_temp_bed_target = thermalManager.temp_bed.target;
-      }
+      if (_new_bed_target)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_BED), _bedtarget);
     #endif
     #if HAS_FAN
-      if (last_fan_speed != thermalManager.fan_speed[0]) {
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_FAN), thermalManager.fan_speed[0]);
-        last_fan_speed = thermalManager.fan_speed[0];
-      }
+      if (_new_fanspeed)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_FAN), _fanspeed);
     #endif
   }
 
-  /* Bottom temperature update */
+  // Bottom temperature update
+
   #if HAS_HOTEND
-    static float _hotendtemp = 0;
-    if (_hotendtemp != thermalManager.temp_hotend[0].celsius) {
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
-      _hotendtemp = thermalManager.temp_hotend[0].celsius;
-    }
-    if (last_temp_hotend_target != thermalManager.temp_hotend[0].target) {
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
-      last_temp_hotend_target = thermalManager.temp_hotend[0].target;
-    }
+    if (_new_hotend_temp)
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33, 382, _hotendtemp);
+    if (_new_hotend_target)
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 4 * STAT_CHR_W + 6, 382, _hotendtarget);
   #endif
+
   #if HAS_HEATED_BED
-    static float _bedtemp = 0;
-    if (_bedtemp != thermalManager.temp_bed.celsius) {
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178, 382, thermalManager.temp_bed.celsius);
-      _bedtemp = thermalManager.temp_bed.celsius;
-    }
-    if (last_temp_bed_target != thermalManager.temp_bed.target) {
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
-      last_temp_bed_target = thermalManager.temp_bed.target;
-    }
+    if (_new_bed_temp)
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178, 382, _bedtemp);
+    if (_new_bed_target)
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178 + 4 * STAT_CHR_W + 6, 382, _bedtarget);
   #endif
-  static uint16_t last_speed = 0;
-  if (last_speed != feedrate_percentage) {
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
-    last_speed = feedrate_percentage;
+
+  static int16_t _feedrate = 100;
+  if (_feedrate != feedrate_percentage) {
+    _feedrate = feedrate_percentage;
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 2 * STAT_CHR_W, 429, _feedrate);
   }
   #if HAS_ZOFFSET_ITEM
     if (last_zoffset != BABY_Z_VAR) {
-      DWIN_Draw_Signed_Float(DWIN_FONT_STAT, Color_Bg_Black, 2, 2, 178 + STAT_CHR_W, 429, BABY_Z_VAR * 100);
       last_zoffset = BABY_Z_VAR;
+      DWIN_Draw_Signed_Float(DWIN_FONT_STAT, Color_Bg_Black, 2, 2, 178 + STAT_CHR_W, 429, last_zoffset * 100);
     }
   #endif
 }
@@ -1615,7 +1676,7 @@ void update_variable() {
   #define strcasecmp_P(a, b) strcasecmp((a), (b))
 #endif
 
-inline void make_name_without_ext(char *dst, char *src, size_t maxlen=MENU_CHAR_LIMIT) {
+void make_name_without_ext(char *dst, char *src, size_t maxlen=MENU_CHAR_LIMIT) {
   char * const name = card.longest_filename();
   size_t pos        = strlen(name); // index of ending nul
 
@@ -1638,7 +1699,7 @@ inline void make_name_without_ext(char *dst, char *src, size_t maxlen=MENU_CHAR_
   while (pos--) dst[pos] = src[pos];
 }
 
-inline void HMI_SDCardInit() { card.cdroot(); }
+void HMI_SDCardInit() { card.cdroot(); }
 
 void MarlinUI::refresh() { /* Nothing to see here */ }
 
@@ -1651,7 +1712,7 @@ void MarlinUI::refresh() { /* Nothing to see here */ }
   millis_t shift_ms; // = 0
 
   // Init the shift name based on the highlighted item
-  inline void Init_Shift_Name() {
+  void Init_Shift_Name() {
     const bool is_subdir = !card.flag.workDirIsRoot;
     const int8_t filenum = select_file.now - 1 - is_subdir; // Skip "Back" and ".."
     const uint16_t fileCnt = card.get_num_Files();
@@ -1662,7 +1723,7 @@ void MarlinUI::refresh() { /* Nothing to see here */ }
     }
   }
 
-  inline void Init_SDItem_Shift() {
+  void Init_SDItem_Shift() {
     shift_amt = 0;
     shift_ms  = select_file.now > 0 && strlen(shift_name) > MENU_CHAR_LIMIT
            ? millis() + 750UL : 0;
@@ -1673,7 +1734,7 @@ void MarlinUI::refresh() { /* Nothing to see here */ }
 /**
  * Display an SD item, adding a CDUP for subfolders.
  */
-inline void Draw_SDItem(const uint16_t item, int16_t row=-1) {
+void Draw_SDItem(const uint16_t item, int16_t row=-1) {
   if (row < 0) row = item + 1 + MROWS - index_file;
   const bool is_subdir = !card.flag.workDirIsRoot;
   if (is_subdir && item == 0) {
@@ -1701,7 +1762,7 @@ inline void Draw_SDItem(const uint16_t item, int16_t row=-1) {
 
 #if ENABLED(SCROLL_LONG_FILENAMES)
 
-  inline void Draw_SDItem_Shifted(int8_t &shift) {
+  void Draw_SDItem_Shifted(int8_t &shift) {
     // Limit to the number of chars past the cutoff
     const size_t len = strlen(shift_name);
     NOMORE(shift, _MAX(len - MENU_CHAR_LIMIT, 0U));
@@ -1722,7 +1783,7 @@ inline void Draw_SDItem(const uint16_t item, int16_t row=-1) {
 #endif
 
 // Redraw the first set of SD Files
-inline void Redraw_SD_List() {
+void Redraw_SD_List() {
   select_file.reset();
   index_file = MROWS;
 
@@ -1745,13 +1806,13 @@ inline void Redraw_SD_List() {
 
 bool DWIN_lcd_sd_status = false;
 
-inline void SDCard_Up() {
+void SDCard_Up() {
   card.cdup();
   Redraw_SD_List();
   DWIN_lcd_sd_status = false; // On next DWIN_Update
 }
 
-inline void SDCard_Folder(char * const dirname) {
+void SDCard_Folder(char * const dirname) {
   card.cd(dirname);
   Redraw_SD_List();
   DWIN_lcd_sd_status = false; // On next DWIN_Update
@@ -1764,7 +1825,7 @@ void HMI_SDCardUpdate() {
   if (HMI_flag.home_flag) return;
   if (DWIN_lcd_sd_status != card.isMounted()) {
     DWIN_lcd_sd_status = card.isMounted();
-    // SERIAL_ECHOLNPAIR("HMI_SDCardUpdate: ", DWIN_lcd_sd_status);
+    //SERIAL_ECHOLNPAIR("HMI_SDCardUpdate: ", DWIN_lcd_sd_status);
     if (DWIN_lcd_sd_status) {
       if (checkkey == SelectFile)
         Redraw_SD_List();
@@ -1836,11 +1897,11 @@ void HMI_StartFrame(const bool with_update) {
   Draw_Status_Area(with_update);
 }
 
-inline void Draw_Info_Menu() {
+void Draw_Info_Menu() {
   Clear_Main_Window();
 
-  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(MACHINE_SIZE) * MENU_CHR_W) / 2, 122, (char*)MACHINE_SIZE);
-  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, (char*)SHORT_BUILD_VERSION);
+  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(MACHINE_SIZE) * MENU_CHR_W) / 2, 122, F(MACHINE_SIZE));
+  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, F(SHORT_BUILD_VERSION));
 
   if (HMI_IsChinese()) {
     DWIN_Frame_TitleCopy(1, 30, 17, 57, 29); // "Info"
@@ -1848,7 +1909,7 @@ inline void Draw_Info_Menu() {
     DWIN_Frame_AreaCopy(1, 197, 149, 252, 161, 108, 102);
     DWIN_Frame_AreaCopy(1, 1, 164, 56, 176, 108, 175);
     DWIN_Frame_AreaCopy(1, 58, 164, 113, 176, 105, 248);
-    DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE_C) * MENU_CHR_W) / 2, 268, (char*)CORP_WEBSITE_C);
+    DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE_C) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE_C));
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -1860,7 +1921,7 @@ inline void Draw_Info_Menu() {
     DWIN_Frame_AreaCopy(1, 120, 150, 146, 161, 124, 102);
     DWIN_Frame_AreaCopy(1, 146, 151, 254, 161, 82, 175);
     DWIN_Frame_AreaCopy(1, 0, 165, 94, 175, 89, 248);
-    DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE_E) * MENU_CHR_W) / 2, 268, (char*)CORP_WEBSITE_E);
+    DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE_E) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE_E));
   }
 
   Draw_Back_First();
@@ -1870,7 +1931,7 @@ inline void Draw_Info_Menu() {
   }
 }
 
-inline void Draw_Print_File_Menu() {
+void Draw_Print_File_Menu() {
   Clear_Title_Bar();
 
   if (HMI_IsChinese()) {
@@ -2199,7 +2260,7 @@ void HMI_PauseOrStop() {
   DWIN_UpdateLCD();
 }
 
-inline void Draw_Move_Menu() {
+void Draw_Move_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
@@ -2340,19 +2401,17 @@ void HMI_Prepare() {
           #endif
           break;
       #endif
-      #if HAS_HOTEND
+      #if HAS_PREHEAT
         case PREPARE_CASE_PLA: // PLA preheat
-          thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0);
-          thermalManager.setTargetBed(ui.material_preset[0].bed_temp);
-          thermalManager.set_fan_speed(0, ui.material_preset[0].fan_speed);
+          TERN_(HAS_HOTEND, thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0));
+          TERN_(HAS_HEATED_BED, thermalManager.setTargetBed(ui.material_preset[0].bed_temp));
+          TERN_(HAS_FAN, thermalManager.set_fan_speed(0, ui.material_preset[0].fan_speed));
           break;
         case PREPARE_CASE_ABS: // ABS preheat
-          thermalManager.setTargetHotend(ui.material_preset[1].hotend_temp, 0);
-          thermalManager.setTargetBed(ui.material_preset[1].bed_temp);
-          thermalManager.set_fan_speed(0, ui.material_preset[1].fan_speed);
+          TERN_(HAS_HOTEND, thermalManager.setTargetHotend(ui.material_preset[1].hotend_temp, 0));
+          TERN_(HAS_HEATED_BED, thermalManager.setTargetBed(ui.material_preset[1].bed_temp));
+          TERN_(HAS_FAN, thermalManager.set_fan_speed(0, ui.material_preset[1].fan_speed));
           break;
-      #endif
-      #if HAS_PREHEAT
         case PREPARE_CASE_COOL: // Cool
           TERN_(HAS_FAN, thermalManager.zero_fan_speeds());
           #if HAS_HOTEND || HAS_HEATED_BED
@@ -2392,21 +2451,24 @@ void Draw_Temperature_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_TEMPERATURE));
+    #else
+      DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                       // "Temperature"
+    #endif
+    #ifdef USE_STRING_TITLES
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TEMP_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+        DWIN_Draw_Label(MBASE(TEMP_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
       #endif
       #if HAS_HEATED_BED
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TEMP_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+        DWIN_Draw_Label(MBASE(TEMP_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
       #endif
       #if HAS_FAN
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TEMP_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+        DWIN_Draw_Label(MBASE(TEMP_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
       #endif
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TEMP_CASE_PLA), F("PLA Preheat Settings"));
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TEMP_CASE_ABS), F("ABS Preheat Settings"));
+        DWIN_Draw_Label(MBASE(TEMP_CASE_PLA), F("PLA Preheat Settings"));
+        DWIN_Draw_Label(MBASE(TEMP_CASE_ABS), F("ABS Preheat Settings"));
       #endif
     #else
-      DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                       // "Temperature"
       #if HAS_HOTEND
         DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(TEMP_CASE_TEMP));      // Nozzle...
         DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(TEMP_CASE_TEMP));     // ...Temperature
@@ -2472,10 +2534,7 @@ void HMI_Control() {
         Draw_More_Icon(CONTROL_CASE_MOVE + MROWS - index_control); // Motion >
         if (index_control > MROWS) {
           Draw_More_Icon(CONTROL_CASE_INFO + MROWS - index_control); // Info >
-          if (HMI_IsChinese())
-            DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, MBASE(CONTROL_CASE_INFO - 1));
-          else
-            DWIN_Frame_AreaCopy(1, 0, 104, 24, 114, LBLX, MBASE(CONTROL_CASE_INFO - 1));
+          Item_Control_Info(MBASE(CONTROL_CASE_INFO - 1));
         }
       }
       else {
@@ -2701,18 +2760,21 @@ void HMI_Temperature() {
           else {
             #ifdef USE_STRING_HEADINGS
               Draw_Title("PLA Settings"); // TODO: GET_TEXT_F
-              DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
+            #else
+              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                             // "PLA Settings"
+            #endif
+            #ifdef USE_STRING_TITLES
+              DWIN_Draw_Label(MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
               #if HAS_HEATED_BED
-                DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
+                DWIN_Draw_Label(MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
               #endif
               #if HAS_FAN
-                DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+                DWIN_Draw_Label(MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+                DWIN_Draw_Label(MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
               #endif
             #else
-              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                             // "PLA Settings"
               DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_TEMP));
               DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(PREHEAT_CASE_TEMP));
               DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(PREHEAT_CASE_TEMP)); // PLA nozzle temp
@@ -2777,18 +2839,21 @@ void HMI_Temperature() {
           else {
             #ifdef USE_STRING_HEADINGS
               Draw_Title("ABS Settings"); // TODO: GET_TEXT_F
-              DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
+            #else
+              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                                  // "ABS Settings"
+            #endif
+            #ifdef USE_STRING_TITLES
+              DWIN_Draw_Label(MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
               #if HAS_HEATED_BED
-                DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
+                DWIN_Draw_Label(MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
               #endif
               #if HAS_FAN
-                DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+                DWIN_Draw_Label(MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+                DWIN_Draw_Label(MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
               #endif
             #else
-              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                                  // "ABS Settings"
               DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_TEMP));
               DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(PREHEAT_CASE_TEMP));
               DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(PREHEAT_CASE_TEMP));      // ABS nozzle temp
@@ -2833,7 +2898,7 @@ void HMI_Temperature() {
   DWIN_UpdateLCD();
 }
 
-inline void Draw_Max_Speed_Menu() {
+void Draw_Max_Speed_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
@@ -2857,15 +2922,17 @@ inline void Draw_Max_Speed_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title("Max Speed (mm/s)"); // TODO: GET_TEXT_F
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(1), F("Max Feedrate X"));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(2), F("Max Feedrate Y"));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(3), F("Max Feedrate Z"));
+    #else
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Max Speed (mm/s)"
+    #endif
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(1), F("Max Feedrate X"));
+      DWIN_Draw_Label(MBASE(2), F("Max Feedrate Y"));
+      DWIN_Draw_Label(MBASE(3), F("Max Feedrate Z"));
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(4), F("Max Feedrate E"));
+        DWIN_Draw_Label(MBASE(4), F("Max Feedrate E"));
       #endif
     #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Max Speed (mm/s)"
-
       draw_max_en(MBASE(1));          // "Max"
       DWIN_Frame_AreaCopy(1, 184, 119, 234, 132, LBLX + 27, MBASE(1)); // "Speed X"
 
@@ -2895,7 +2962,7 @@ inline void Draw_Max_Speed_Menu() {
   #endif
 }
 
-inline void Draw_Max_Accel_Menu() {
+void Draw_Max_Accel_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
@@ -2919,14 +2986,17 @@ inline void Draw_Max_Accel_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_ACCELERATION));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(1), F("Max Accel X"));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(2), F("Max Accel Y"));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(3), F("Max Accel Z"));
+    #else
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);          // "Acceleration"
+    #endif
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(1), F("Max Accel X"));
+      DWIN_Draw_Label(MBASE(2), F("Max Accel Y"));
+      DWIN_Draw_Label(MBASE(3), F("Max Accel Z"));
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(4), F("Max Accel E"));
+        DWIN_Draw_Label(MBASE(4), F("Max Accel E"));
       #endif
     #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);          // "Acceleration"
       draw_max_accel_en(MBASE(1)); say_x(108, MBASE(1));  // "Max Acceleration X"
       draw_max_accel_en(MBASE(2)); say_y(108, MBASE(2));  // "Max Acceleration Y"
       draw_max_accel_en(MBASE(3)); say_z(108, MBASE(3));  // "Max Acceleration Z"
@@ -2947,7 +3017,7 @@ inline void Draw_Max_Accel_Menu() {
 }
 
 #if HAS_CLASSIC_JERK
-  inline void Draw_Max_Jerk_Menu() {
+  void Draw_Max_Jerk_Menu() {
     Clear_Main_Window();
 
     if (HMI_IsChinese()) {
@@ -2975,14 +3045,17 @@ inline void Draw_Max_Accel_Menu() {
     else {
       #ifdef USE_STRING_HEADINGS
         Draw_Title(GET_TEXT_F(MSG_JERK));
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(1), F("Max Jerk X"));
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(2), F("Max Jerk Y"));
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(3), F("Max Jerk Z"));
+      #else
+        DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Jerk"
+      #endif
+      #ifdef USE_STRING_TITLES
+        DWIN_Draw_Label(MBASE(1), F("Max Jerk X"));
+        DWIN_Draw_Label(MBASE(2), F("Max Jerk Y"));
+        DWIN_Draw_Label(MBASE(3), F("Max Jerk Z"));
         #if HAS_HOTEND
-          DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(4), F("Max Jerk E"));
+          DWIN_Draw_Label(MBASE(4), F("Max Jerk E"));
         #endif
       #else
-        DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Jerk"
         draw_max_en(MBASE(1));          // "Max"
         draw_jerk_en(MBASE(1));         // "Jerk"
         draw_speed_en(72, MBASE(1));    // "Speed"
@@ -3018,7 +3091,7 @@ inline void Draw_Max_Accel_Menu() {
   }
 #endif
 
-inline void Draw_Steps_Menu() {
+void Draw_Steps_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
@@ -3038,14 +3111,17 @@ inline void Draw_Steps_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_STEPS_PER_MM));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(1), F("Steps/mm X"));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(2), F("Steps/mm Y"));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(3), F("Steps/mm Z"));
+    #else
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Steps per mm"
+    #endif
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(1), F("Steps/mm X"));
+      DWIN_Draw_Label(MBASE(2), F("Steps/mm Y"));
+      DWIN_Draw_Label(MBASE(3), F("Steps/mm Z"));
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(4), F("Steps/mm E"));
+        DWIN_Draw_Label(MBASE(4), F("Steps/mm E"));
       #endif
     #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Steps per mm"
       draw_steps_per_mm(MBASE(1)); say_x(103, MBASE(1)); // "Steps-per-mm X"
       draw_steps_per_mm(MBASE(2)); say_y(103, MBASE(2)); // "Y"
       draw_steps_per_mm(MBASE(3)); say_z(103, MBASE(3)); // "Z"
@@ -3539,7 +3615,7 @@ void EachMomentUpdate() {
     static millis_t next_remain_time_update = 0;
     if (_card_percent > 1 && ELAPSED(ms, next_remain_time_update) && !HMI_flag.heat_flag) {
       _remain_time = (elapsed.value - dwin_heat_time) / (_card_percent * 0.01f) - (elapsed.value - dwin_heat_time);
-      next_remain_time_update += SEC_TO_MS(20);
+      next_remain_time_update += DWIN_REMAIN_TIME_UPDATE_INTERVAL;
       Draw_Print_ProgressRemain();
     }
   }
@@ -3602,6 +3678,7 @@ void EachMomentUpdate() {
       Draw_Status_Area(true);
     }
   #endif
+
   DWIN_UpdateLCD();
 }
 
@@ -3642,7 +3719,7 @@ void DWIN_HandleScreen() {
     #if HAS_HEATED_BED
       case BedTemp:       HMI_BedTemp(); break;
     #endif
-    #if HAS_PREHEAT
+    #if HAS_PREHEAT && HAS_FAN
       case FanSpeed:      HMI_FanSpeed(); break;
     #endif
     case PrintSpeed:      HMI_PrintSpeed(); break;

commit 653d73ff074c2d8f6cfafb95a7ddf53dae50be4e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 8 21:31:26 2021 -0600

    Reheat bed first

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 69889b6b06..04171b9d79 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -2127,12 +2127,12 @@ void HMI_Printing() {
           char cmd[40];
           cmd[0] = '\0';
 
-          #if BOTH(HAS_HOTEND, PAUSE_HEAT)
-            if (resume_hotend_temp) sprintf_P(&cmd[strlen(cmd)], PSTR("M109 S%i\n"), resume_hotend_temp);
-          #endif
           #if BOTH(HAS_HEATED_BED, PAUSE_HEAT)
             if (resume_bed_temp) sprintf_P(cmd, PSTR("M190 S%i\n"), resume_bed_temp);
           #endif
+          #if BOTH(HAS_HOTEND, PAUSE_HEAT)
+            if (resume_hotend_temp) sprintf_P(&cmd[strlen(cmd)], PSTR("M109 S%i\n"), resume_hotend_temp);
+          #endif
 
           strcat_P(cmd, M24_STR);
           queue.inject(cmd);

commit 662d81c801eaa6323ef8f5c99fb2d2206812a0ce
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Feb 8 21:27:00 2021 -0600

    Ender 3 V2 DWIN cleanup (#21026)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 55554a98cf..69889b6b06 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -191,16 +191,12 @@ constexpr float default_max_acceleration[]    = DEFAULT_MAX_ACCELERATION;
   constexpr float default_max_jerk[]          = { DEFAULT_XJERK, DEFAULT_YJERK, DEFAULT_ZJERK, DEFAULT_EJERK };
 #endif
 
-uint8_t Percentrecord = 0;
-uint16_t remain_time = 0;
+static uint8_t _card_percent = 0;
+static uint16_t _remain_time = 0;
 
 #if ENABLED(PAUSE_HEAT)
-  #if HAS_HOTEND
-    uint16_t temphot = 0;
-  #endif
-  #if HAS_HEATED_BED
-    uint16_t tempbed = 0;
-  #endif
+  TERN_(HAS_HOTEND, uint16_t resume_hotend_temp = 0);
+  TERN_(HAS_HEATED_BED, uint16_t resume_bed_temp = 0);
 #endif
 
 #if HAS_ZOFFSET_ITEM
@@ -1081,8 +1077,8 @@ void Draw_Printing_Screen() {
 
 void Draw_Print_ProgressBar() {
   DWIN_ICON_Show(ICON, ICON_Bar, 15, 93);
-  DWIN_Draw_Rectangle(1, BarFill_Color, 16 + Percentrecord * 240 / 100, 93, 256, 113);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Percent_Color, Color_Bg_Black, 2, 117, 133, Percentrecord);
+  DWIN_Draw_Rectangle(1, BarFill_Color, 16 + _card_percent * 240 / 100, 93, 256, 113);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Percent_Color, Color_Bg_Black, 2, 117, 133, _card_percent);
   DWIN_Draw_String(false, false, font8x16, Percent_Color, Color_Bg_Black, 133, 133, F("%"));
 }
 
@@ -1094,9 +1090,9 @@ void Draw_Print_ProgressElapsed() {
 }
 
 void Draw_Print_ProgressRemain() {
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 176, 212, remain_time / 3600);
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 176, 212, _remain_time / 3600);
   DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, 192, 212, F(":"));
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 200, 212, (remain_time % 3600) / 60);
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 200, 212, (_remain_time % 3600) / 60);
 }
 
 void Goto_PrintProcess() {
@@ -1158,10 +1154,10 @@ inline ENCODER_DiffState get_encoder_state() {
 void HMI_Move_X() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scale)) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scaled)) {
       checkkey = AxisMove;
       EncoderRate.enabled = false;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
         planner.synchronize();
@@ -1170,10 +1166,9 @@ void HMI_Move_X() {
       DWIN_UpdateLCD();
       return;
     }
-    NOLESS(HMI_ValueStruct.Move_X_scale, (X_MIN_POS) * MINUNITMULT);
-    NOMORE(HMI_ValueStruct.Move_X_scale, (X_MAX_POS) * MINUNITMULT);
-    current_position.x = HMI_ValueStruct.Move_X_scale / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
+    LIMIT(HMI_ValueStruct.Move_X_scaled, (X_MIN_POS) * MINUNITMULT, (X_MAX_POS) * MINUNITMULT);
+    current_position.x = HMI_ValueStruct.Move_X_scaled / MINUNITMULT;
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
     DWIN_UpdateLCD();
   }
 }
@@ -1181,10 +1176,10 @@ void HMI_Move_X() {
 void HMI_Move_Y() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scale)) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scaled)) {
       checkkey = AxisMove;
       EncoderRate.enabled = false;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
         planner.synchronize();
@@ -1193,10 +1188,9 @@ void HMI_Move_Y() {
       DWIN_UpdateLCD();
       return;
     }
-    NOLESS(HMI_ValueStruct.Move_Y_scale, (Y_MIN_POS) * MINUNITMULT);
-    NOMORE(HMI_ValueStruct.Move_Y_scale, (Y_MAX_POS) * MINUNITMULT);
-    current_position.y = HMI_ValueStruct.Move_Y_scale / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
+    LIMIT(HMI_ValueStruct.Move_Y_scaled, (Y_MIN_POS) * MINUNITMULT, (Y_MAX_POS) * MINUNITMULT);
+    current_position.y = HMI_ValueStruct.Move_Y_scaled / MINUNITMULT;
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
     DWIN_UpdateLCD();
   }
 }
@@ -1204,10 +1198,10 @@ void HMI_Move_Y() {
 void HMI_Move_Z() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scale)) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scaled)) {
       checkkey = AxisMove;
       EncoderRate.enabled = false;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
         planner.synchronize();
@@ -1216,10 +1210,9 @@ void HMI_Move_Z() {
       DWIN_UpdateLCD();
       return;
     }
-    NOLESS(HMI_ValueStruct.Move_Z_scale, Z_MIN_POS * MINUNITMULT);
-    NOMORE(HMI_ValueStruct.Move_Z_scale, Z_MAX_POS * MINUNITMULT);
-    current_position.z = HMI_ValueStruct.Move_Z_scale / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+    LIMIT(HMI_ValueStruct.Move_Z_scaled, Z_MIN_POS * MINUNITMULT, Z_MAX_POS * MINUNITMULT);
+    current_position.z = HMI_ValueStruct.Move_Z_scaled / MINUNITMULT;
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
     DWIN_UpdateLCD();
   }
 }
@@ -1227,14 +1220,14 @@ void HMI_Move_Z() {
 #if HAS_HOTEND
 
   void HMI_Move_E() {
-    static float last_E_scale = 0;
+    static float last_E_scaled = 0;
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState != ENCODER_DIFF_NO) {
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_E_scale)) {
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_E_scaled)) {
         checkkey = AxisMove;
         EncoderRate.enabled = false;
-        last_E_scale = HMI_ValueStruct.Move_E_scale;
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+        last_E_scaled = HMI_ValueStruct.Move_E_scaled;
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
         if (!planner.is_full()) {
           planner.synchronize(); // Wait for planner moves to finish!
           planner.buffer_line(current_position, MMM_TO_MMS(FEEDRATE_E), active_extruder);
@@ -1242,12 +1235,12 @@ void HMI_Move_Z() {
         DWIN_UpdateLCD();
         return;
       }
-      if ((HMI_ValueStruct.Move_E_scale - last_E_scale) > (EXTRUDE_MAXLENGTH) * MINUNITMULT)
-        HMI_ValueStruct.Move_E_scale = last_E_scale + (EXTRUDE_MAXLENGTH) * MINUNITMULT;
-      else if ((last_E_scale - HMI_ValueStruct.Move_E_scale) > (EXTRUDE_MAXLENGTH) * MINUNITMULT)
-        HMI_ValueStruct.Move_E_scale = last_E_scale - (EXTRUDE_MAXLENGTH) * MINUNITMULT;
-      current_position.e = HMI_ValueStruct.Move_E_scale / MINUNITMULT;
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+      if ((HMI_ValueStruct.Move_E_scaled - last_E_scaled) > (EXTRUDE_MAXLENGTH) * MINUNITMULT)
+        HMI_ValueStruct.Move_E_scaled = last_E_scaled + (EXTRUDE_MAXLENGTH) * MINUNITMULT;
+      else if ((last_E_scaled - HMI_ValueStruct.Move_E_scaled) > (EXTRUDE_MAXLENGTH) * MINUNITMULT)
+        HMI_ValueStruct.Move_E_scaled = last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT;
+      current_position.e = HMI_ValueStruct.Move_E_scaled / MINUNITMULT;
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
       DWIN_UpdateLCD();
     }
   }
@@ -1277,8 +1270,7 @@ void HMI_Move_Z() {
         DWIN_UpdateLCD();
         return;
       }
-      NOLESS(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100);
-      NOMORE(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
+      LIMIT(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
       last_zoffset = dwin_zoffset;
       dwin_zoffset = HMI_ValueStruct.offset_value / 100.0f;
       #if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
@@ -1326,8 +1318,7 @@ void HMI_Move_Z() {
         return;
       }
       // E_Temp limit
-      NOMORE(HMI_ValueStruct.E_Temp, MAX_E_TEMP);
-      NOLESS(HMI_ValueStruct.E_Temp, MIN_E_TEMP);
+      LIMIT(HMI_ValueStruct.E_Temp, MIN_E_TEMP, MAX_E_TEMP);
       // E_Temp value
       DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
     }
@@ -1370,8 +1361,7 @@ void HMI_Move_Z() {
         return;
       }
       // Bed_Temp limit
-      NOMORE(HMI_ValueStruct.Bed_Temp, BED_MAX_TARGET);
-      NOLESS(HMI_ValueStruct.Bed_Temp, MIN_BED_TEMP);
+      LIMIT(HMI_ValueStruct.Bed_Temp, MIN_BED_TEMP, BED_MAX_TARGET);
       // Bed_Temp value
       DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
     }
@@ -1415,8 +1405,7 @@ void HMI_Move_Z() {
         return;
       }
       // Fan_speed limit
-      NOMORE(HMI_ValueStruct.Fan_speed, FANON);
-      NOLESS(HMI_ValueStruct.Fan_speed, FANOFF);
+      LIMIT(HMI_ValueStruct.Fan_speed, FANOFF, FANON);
       // Fan_speed value
       DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
     }
@@ -1435,8 +1424,7 @@ void HMI_PrintSpeed() {
       return;
     }
     // print_speed limit
-    NOMORE(HMI_ValueStruct.print_speed, MAX_PRINT_SPEED);
-    NOLESS(HMI_ValueStruct.print_speed, MIN_PRINT_SPEED);
+    LIMIT(HMI_ValueStruct.print_speed, MIN_PRINT_SPEED, MAX_PRINT_SPEED);
     // print_speed value
     DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
   }
@@ -1491,20 +1479,20 @@ void HMI_MaxAccelerationXYZE() {
   void HMI_MaxJerkXYZE() {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState != ENCODER_DIFF_NO) {
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Jerk)) {
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Jerk_scaled)) {
         checkkey = MaxJerk;
         EncoderRate.enabled = false;
         if (WITHIN(HMI_flag.jerk_axis, X_AXIS, E_AXIS))
-          planner.set_max_jerk(HMI_flag.jerk_axis, HMI_ValueStruct.Max_Jerk / 10);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
+          planner.set_max_jerk(HMI_flag.jerk_axis, HMI_ValueStruct.Max_Jerk_scaled / 10);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
         return;
       }
       // MaxJerk limit
       if (WITHIN(HMI_flag.jerk_axis, X_AXIS, E_AXIS))
-        NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[HMI_flag.jerk_axis] * 2 * MINUNITMULT);
-      NOLESS(HMI_ValueStruct.Max_Jerk, (MIN_MAXJERK) * MINUNITMULT);
+        NOMORE(HMI_ValueStruct.Max_Jerk_scaled, default_max_jerk[HMI_flag.jerk_axis] * 2 * MINUNITMULT);
+      NOLESS(HMI_ValueStruct.Max_Jerk_scaled, (MIN_MAXJERK) * MINUNITMULT);
       // MaxJerk value
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
     }
   }
 
@@ -1513,43 +1501,41 @@ void HMI_MaxAccelerationXYZE() {
 void HMI_StepXYZE() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Step)) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Step_scaled)) {
       checkkey = Step;
       EncoderRate.enabled = false;
       if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
-        planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step / 10;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+        planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step_scaled / 10;
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
       return;
     }
     // Step limit
     if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
-      NOMORE(HMI_ValueStruct.Max_Step, 999.9 * MINUNITMULT);
-    NOLESS(HMI_ValueStruct.Max_Step, MIN_STEP);
+      NOMORE(HMI_ValueStruct.Max_Step_scaled, 999.9 * MINUNITMULT);
+    NOLESS(HMI_ValueStruct.Max_Step_scaled, MIN_STEP);
     // Step value
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
   }
 }
 
 void update_variable() {
-  #if HAS_HOTEND
-    static float last_temp_hotend_target = 0, last_temp_hotend_current = 0;
-  #endif
-  #if HAS_HEATED_BED
-    static float last_temp_bed_target = 0, last_temp_bed_current = 0;
-  #endif
-  #if HAS_FAN
-    static uint8_t last_fan_speed = 0;
-  #endif
+  TERN_(HAS_HOTEND, static float last_temp_hotend_target = 0);
+  TERN_(HAS_HEATED_BED, static float last_temp_bed_target = 0);
+  TERN_(HAS_FAN, static uint8_t last_fan_speed = 0);
 
   /* Tune page temperature update */
   if (checkkey == Tune) {
     #if HAS_HOTEND
-      if (last_temp_hotend_target != thermalManager.temp_hotend[0].target)
+      if (last_temp_hotend_target != thermalManager.temp_hotend[0].target) {
         DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), thermalManager.temp_hotend[0].target);
+        last_temp_hotend_target = thermalManager.temp_hotend[0].target;
+      }
     #endif
     #if HAS_HEATED_BED
-      if (last_temp_bed_target != thermalManager.temp_bed.target)
+      if (last_temp_bed_target != thermalManager.temp_bed.target) {
         DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), thermalManager.temp_bed.target);
+        last_temp_bed_target = thermalManager.temp_bed.target;
+      }
     #endif
     #if HAS_FAN
       if (last_fan_speed != thermalManager.fan_speed[0]) {
@@ -1562,12 +1548,16 @@ void update_variable() {
   /* Temperature page temperature update */
   if (checkkey == TemperatureID) {
     #if HAS_HOTEND
-      if (last_temp_hotend_target != thermalManager.temp_hotend[0].target)
+      if (last_temp_hotend_target != thermalManager.temp_hotend[0].target) {
         DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_TEMP), thermalManager.temp_hotend[0].target);
+        last_temp_hotend_target = thermalManager.temp_hotend[0].target;
+      }
     #endif
     #if HAS_HEATED_BED
-      if (last_temp_bed_target != thermalManager.temp_bed.target)
+      if (last_temp_bed_target != thermalManager.temp_bed.target) {
         DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_BED), thermalManager.temp_bed.target);
+        last_temp_bed_target = thermalManager.temp_bed.target;
+      }
     #endif
     #if HAS_FAN
       if (last_fan_speed != thermalManager.fan_speed[0]) {
@@ -1579,9 +1569,10 @@ void update_variable() {
 
   /* Bottom temperature update */
   #if HAS_HOTEND
-    if (last_temp_hotend_current != thermalManager.temp_hotend[0].celsius) {
+    static float _hotendtemp = 0;
+    if (_hotendtemp != thermalManager.temp_hotend[0].celsius) {
       DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
-      last_temp_hotend_current = thermalManager.temp_hotend[0].celsius;
+      _hotendtemp = thermalManager.temp_hotend[0].celsius;
     }
     if (last_temp_hotend_target != thermalManager.temp_hotend[0].target) {
       DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
@@ -1589,9 +1580,10 @@ void update_variable() {
     }
   #endif
   #if HAS_HEATED_BED
-    if (last_temp_bed_current != thermalManager.temp_bed.celsius) {
+    static float _bedtemp = 0;
+    if (_bedtemp != thermalManager.temp_bed.celsius) {
       DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178, 382, thermalManager.temp_bed.celsius);
-      last_temp_bed_current = thermalManager.temp_bed.celsius;
+      _bedtemp = thermalManager.temp_bed.celsius;
     }
     if (last_temp_bed_target != thermalManager.temp_bed.target) {
       DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
@@ -2135,13 +2127,11 @@ void HMI_Printing() {
           char cmd[40];
           cmd[0] = '\0';
 
-          #if ENABLED(PAUSE_HEAT)
-            #if HAS_HEATED_BED
-              if (tempbed) sprintf_P(cmd, PSTR("M190 S%i\n"), tempbed);
-            #endif
-            #if HAS_HOTEND
-              if (temphot) sprintf_P(&cmd[strlen(cmd)], PSTR("M109 S%i\n"), temphot);
-            #endif
+          #if BOTH(HAS_HOTEND, PAUSE_HEAT)
+            if (resume_hotend_temp) sprintf_P(&cmd[strlen(cmd)], PSTR("M109 S%i\n"), resume_hotend_temp);
+          #endif
+          #if BOTH(HAS_HEATED_BED, PAUSE_HEAT)
+            if (resume_bed_temp) sprintf_P(cmd, PSTR("M190 S%i\n"), resume_bed_temp);
           #endif
 
           strcat_P(cmd, M24_STR);
@@ -2322,8 +2312,8 @@ void HMI_Prepare() {
         DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(2), current_position.y * MINUNITMULT);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), current_position.z * MINUNITMULT);
         #if HAS_HOTEND
-          HMI_ValueStruct.Move_E_scale = current_position.e * MINUNITMULT;
-          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+          HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
+          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
         #endif
         break;
       case PREPARE_CASE_DISA: // Disable steppers
@@ -2573,11 +2563,11 @@ void HMI_AxisMove() {
     if (HMI_flag.ETempTooLow_flag) {
       if (encoder_diffState == ENCODER_DIFF_ENTER) {
         HMI_flag.ETempTooLow_flag = false;
-        HMI_ValueStruct.Move_E_scale = current_position.e * MINUNITMULT;
+        HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
         Draw_Move_Menu();
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
         DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), 0);
         DWIN_UpdateLCD();
       }
@@ -2602,20 +2592,20 @@ void HMI_AxisMove() {
         break;
       case 1: // X axis move
         checkkey = Move_X;
-        HMI_ValueStruct.Move_X_scale = current_position.x * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
+        HMI_ValueStruct.Move_X_scaled = current_position.x * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
         EncoderRate.enabled = true;
         break;
       case 2: // Y axis move
         checkkey = Move_Y;
-        HMI_ValueStruct.Move_Y_scale = current_position.y * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
+        HMI_ValueStruct.Move_Y_scaled = current_position.y * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
         EncoderRate.enabled = true;
         break;
       case 3: // Z axis move
         checkkey = Move_Z;
-        HMI_ValueStruct.Move_Z_scale = current_position.z * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+        HMI_ValueStruct.Move_Z_scaled = current_position.z * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
         EncoderRate.enabled = true;
         break;
         #if HAS_HOTEND
@@ -2630,8 +2620,8 @@ void HMI_AxisMove() {
               }
             #endif
             checkkey = Extruder;
-            HMI_ValueStruct.Move_E_scale = current_position.e * MINUNITMULT;
-            DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+            HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
+            DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3417,8 +3407,8 @@ void HMI_MaxAcceleration() {
       if (WITHIN(select_jerk.now, 1, 4)) {
         checkkey = MaxJerk_value;
         HMI_flag.jerk_axis = AxisEnum(select_jerk.now - 1);
-        HMI_ValueStruct.Max_Jerk = planner.max_jerk[HMI_flag.jerk_axis] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
+        HMI_ValueStruct.Max_Jerk_scaled = planner.max_jerk[HMI_flag.jerk_axis] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
         EncoderRate.enabled = true;
       }
       else { // Back
@@ -3447,8 +3437,8 @@ void HMI_Step() {
     if (WITHIN(select_step.now, 1, 4)) {
       checkkey = Step_value;
       HMI_flag.step_axis = AxisEnum(select_step.now - 1);
-      HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[HMI_flag.step_axis] * MINUNITMULT;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+      HMI_ValueStruct.Max_Step_scaled = planner.settings.axis_steps_per_mm[HMI_flag.step_axis] * MINUNITMULT;
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
       EncoderRate.enabled = true;
     }
     else { // Back
@@ -3499,7 +3489,7 @@ void EachMomentUpdate() {
       planner.finish_and_disable();
 
       // show percent bar and value
-      Percentrecord = 0;
+      _card_percent = 0;
       Draw_Print_ProgressBar();
 
       // show print done confirm
@@ -3517,12 +3507,8 @@ void EachMomentUpdate() {
   if (HMI_flag.pause_action && printingIsPaused() && !planner.has_blocks_queued()) {
     HMI_flag.pause_action = false;
     #if ENABLED(PAUSE_HEAT)
-      #if HAS_HEATED_BED
-        tempbed = thermalManager.temp_bed.target;
-      #endif
-      #if HAS_HOTEND
-        temphot = thermalManager.temp_hotend[0].target;
-      #endif
+      TERN_(HAS_HOTEND, resume_hotend_temp = thermalManager.temp_hotend[0].target);
+      TERN_(HAS_HEATED_BED, resume_bed_temp = thermalManager.temp_bed.target);
       thermalManager.disable_all_heaters();
     #endif
     queue.inject_P(PSTR("G1 F1200 X0 Y0"));
@@ -3534,7 +3520,7 @@ void EachMomentUpdate() {
     if (last_cardpercentValue != card_pct) { // print percent
       last_cardpercentValue = card_pct;
       if (card_pct) {
-        Percentrecord = card_pct;
+        _card_percent = card_pct;
         Draw_Print_ProgressBar();
       }
     }
@@ -3551,8 +3537,8 @@ void EachMomentUpdate() {
 
     // Estimate remaining time every 20 seconds
     static millis_t next_remain_time_update = 0;
-    if (Percentrecord > 1 && ELAPSED(ms, next_remain_time_update) && !HMI_flag.heat_flag) {
-      remain_time = (elapsed.value - dwin_heat_time) / (Percentrecord * 0.01f) - (elapsed.value - dwin_heat_time);
+    if (_card_percent > 1 && ELAPSED(ms, next_remain_time_update) && !HMI_flag.heat_flag) {
+      _remain_time = (elapsed.value - dwin_heat_time) / (_card_percent * 0.01f) - (elapsed.value - dwin_heat_time);
       next_remain_time_update += SEC_TO_MS(20);
       Draw_Print_ProgressRemain();
     }

commit e7c711996bd3080f5e343eff5556736cbf2e2416
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Mon Feb 8 07:37:24 2021 +0100

    Serial refactor. Default 8-bit ECHO to int, not char (#20985)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 39f161f5ad..55554a98cf 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1772,7 +1772,7 @@ void HMI_SDCardUpdate() {
   if (HMI_flag.home_flag) return;
   if (DWIN_lcd_sd_status != card.isMounted()) {
     DWIN_lcd_sd_status = card.isMounted();
-    // SERIAL_ECHOLNPAIR("HMI_SDCardUpdate: ", int(DWIN_lcd_sd_status));
+    // SERIAL_ECHOLNPAIR("HMI_SDCardUpdate: ", DWIN_lcd_sd_status);
     if (DWIN_lcd_sd_status) {
       if (checkkey == SelectFile)
         Redraw_SD_List();

commit 9d0e64a725290233d6002017147c578ffd32c504
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jan 28 20:40:20 2021 -0600

    AutoReport class (Temperature, Cardreader) (#20913)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index e0caa0722f..39f161f5ad 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -3553,7 +3553,7 @@ void EachMomentUpdate() {
     static millis_t next_remain_time_update = 0;
     if (Percentrecord > 1 && ELAPSED(ms, next_remain_time_update) && !HMI_flag.heat_flag) {
       remain_time = (elapsed.value - dwin_heat_time) / (Percentrecord * 0.01f) - (elapsed.value - dwin_heat_time);
-      next_remain_time_update += 20 * 1000UL;
+      next_remain_time_update += SEC_TO_MS(20);
       Draw_Print_ProgressRemain();
     }
   }

commit e9425d711d1493c969e398287db67e36bafe3ac6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 24 20:13:02 2021 -0600

    Fix Ender 3 V2 DWIN manual move (#20837)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index b872ce32aa..e0caa0722f 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -132,8 +132,9 @@
 
 #define FEEDRATE_E      (60)
 
-// Mininum unit (0.1) : multiple (10)
-#define MINUNITMULT     10
+// Minimum unit (0.1) : multiple (10)
+#define UNITFDIGITS 1
+#define MINUNITMULT pow(10, UNITFDIGITS)
 
 #define ENCODER_WAIT    20
 #define DWIN_SCROLL_UPDATE_INTERVAL 2000
@@ -1171,8 +1172,8 @@ void HMI_Move_X() {
     }
     NOLESS(HMI_ValueStruct.Move_X_scale, (X_MIN_POS) * MINUNITMULT);
     NOMORE(HMI_ValueStruct.Move_X_scale, (X_MAX_POS) * MINUNITMULT);
-    current_position.x = HMI_ValueStruct.Move_X_scale / 10;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
+    current_position.x = HMI_ValueStruct.Move_X_scale / MINUNITMULT;
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
     DWIN_UpdateLCD();
   }
 }
@@ -1194,8 +1195,8 @@ void HMI_Move_Y() {
     }
     NOLESS(HMI_ValueStruct.Move_Y_scale, (Y_MIN_POS) * MINUNITMULT);
     NOMORE(HMI_ValueStruct.Move_Y_scale, (Y_MAX_POS) * MINUNITMULT);
-    current_position.y = HMI_ValueStruct.Move_Y_scale / 10;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
+    current_position.y = HMI_ValueStruct.Move_Y_scale / MINUNITMULT;
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
     DWIN_UpdateLCD();
   }
 }
@@ -1206,7 +1207,7 @@ void HMI_Move_Z() {
     if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scale)) {
       checkkey = AxisMove;
       EncoderRate.enabled = false;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
         planner.synchronize();
@@ -1217,8 +1218,8 @@ void HMI_Move_Z() {
     }
     NOLESS(HMI_ValueStruct.Move_Z_scale, Z_MIN_POS * MINUNITMULT);
     NOMORE(HMI_ValueStruct.Move_Z_scale, Z_MAX_POS * MINUNITMULT);
-    current_position.z = HMI_ValueStruct.Move_Z_scale / 10;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+    current_position.z = HMI_ValueStruct.Move_Z_scale / MINUNITMULT;
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
     DWIN_UpdateLCD();
   }
 }
@@ -1233,7 +1234,7 @@ void HMI_Move_Z() {
         checkkey = AxisMove;
         EncoderRate.enabled = false;
         last_E_scale = HMI_ValueStruct.Move_E_scale;
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
         if (!planner.is_full()) {
           planner.synchronize(); // Wait for planner moves to finish!
           planner.buffer_line(current_position, MMM_TO_MMS(FEEDRATE_E), active_extruder);
@@ -1245,8 +1246,8 @@ void HMI_Move_Z() {
         HMI_ValueStruct.Move_E_scale = last_E_scale + (EXTRUDE_MAXLENGTH) * MINUNITMULT;
       else if ((last_E_scale - HMI_ValueStruct.Move_E_scale) > (EXTRUDE_MAXLENGTH) * MINUNITMULT)
         HMI_ValueStruct.Move_E_scale = last_E_scale - (EXTRUDE_MAXLENGTH) * MINUNITMULT;
-      current_position.e = HMI_ValueStruct.Move_E_scale / 10;
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+      current_position.e = HMI_ValueStruct.Move_E_scale / MINUNITMULT;
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
       DWIN_UpdateLCD();
     }
   }
@@ -1503,7 +1504,7 @@ void HMI_MaxAccelerationXYZE() {
         NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[HMI_flag.jerk_axis] * 2 * MINUNITMULT);
       NOLESS(HMI_ValueStruct.Max_Jerk, (MIN_MAXJERK) * MINUNITMULT);
       // MaxJerk value
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
     }
   }
 
@@ -1525,7 +1526,7 @@ void HMI_StepXYZE() {
       NOMORE(HMI_ValueStruct.Max_Step, 999.9 * MINUNITMULT);
     NOLESS(HMI_ValueStruct.Max_Step, MIN_STEP);
     // Step value
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
   }
 }
 
@@ -2317,13 +2318,12 @@ void HMI_Prepare() {
         select_axis.reset();
         Draw_Move_Menu();
 
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), current_position.x * MINUNITMULT);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), current_position.y * MINUNITMULT);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(3), current_position.z * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(1), current_position.x * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(2), current_position.y * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), current_position.z * MINUNITMULT);
         #if HAS_HOTEND
-          current_position.e = HMI_ValueStruct.Move_E_scale = 0.0;
-          sync_plan_position_e();
-          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), 0.0);
+          HMI_ValueStruct.Move_E_scale = current_position.e * MINUNITMULT;
+          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
         #endif
         break;
       case PREPARE_CASE_DISA: // Disable steppers
@@ -2573,8 +2573,7 @@ void HMI_AxisMove() {
     if (HMI_flag.ETempTooLow_flag) {
       if (encoder_diffState == ENCODER_DIFF_ENTER) {
         HMI_flag.ETempTooLow_flag = false;
-        current_position.e = HMI_ValueStruct.Move_E_scale = 0;
-        sync_plan_position_e();
+        HMI_ValueStruct.Move_E_scale = current_position.e * MINUNITMULT;
         Draw_Move_Menu();
         DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
@@ -3020,11 +3019,11 @@ inline void Draw_Max_Accel_Menu() {
 
     Draw_Back_First();
     LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
     #if HAS_HOTEND
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
     #endif
   }
 #endif
@@ -3068,11 +3067,11 @@ inline void Draw_Steps_Menu() {
 
   Draw_Back_First();
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_StepX + i);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(1), planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(2), planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(3), planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(1), planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(2), planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(3), planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
   #if HAS_HOTEND
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(4), planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(4), planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
   #endif
 }
 
@@ -3419,7 +3418,7 @@ void HMI_MaxAcceleration() {
         checkkey = MaxJerk_value;
         HMI_flag.jerk_axis = AxisEnum(select_jerk.now - 1);
         HMI_ValueStruct.Max_Jerk = planner.max_jerk[HMI_flag.jerk_axis] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
         EncoderRate.enabled = true;
       }
       else { // Back
@@ -3449,7 +3448,7 @@ void HMI_Step() {
       checkkey = Step_value;
       HMI_flag.step_axis = AxisEnum(select_step.now - 1);
       HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[HMI_flag.step_axis] * MINUNITMULT;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
       EncoderRate.enabled = true;
     }
     else { // Back

commit d879853e8f9902a407dbf3282fa12fc7d49d3c94
Author: Jason Smith <jason.inet@gmail.com>
Date:   Thu Jan 21 02:14:24 2021 -0800

    Ender 3 V2: Sync reset E in manual move (#20806)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index e1655d0ed9..b872ce32aa 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -2321,9 +2321,9 @@ void HMI_Prepare() {
         DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), current_position.y * MINUNITMULT);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(3), current_position.z * MINUNITMULT);
         #if HAS_HOTEND
-          queue.inject_P(PSTR("G92 E0"));
-          current_position.e = HMI_ValueStruct.Move_E_scale = 0;
-          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), 0);
+          current_position.e = HMI_ValueStruct.Move_E_scale = 0.0;
+          sync_plan_position_e();
+          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), 0.0);
         #endif
         break;
       case PREPARE_CASE_DISA: // Disable steppers
@@ -2574,6 +2574,7 @@ void HMI_AxisMove() {
       if (encoder_diffState == ENCODER_DIFF_ENTER) {
         HMI_flag.ETempTooLow_flag = false;
         current_position.e = HMI_ValueStruct.Move_E_scale = 0;
+        sync_plan_position_e();
         Draw_Move_Menu();
         DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);

commit fb41413b7614a256302f4bfcdb7ad7bcad50f7a5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 16 20:43:24 2021 -0600

    Optimize some G-code strings

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 3126c46fb8..e1655d0ed9 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -2332,7 +2332,7 @@ void HMI_Prepare() {
       case PREPARE_CASE_HOME: // Homing
         checkkey = Last_Prepare;
         index_prepare = MROWS;
-        queue.inject_P(PSTR("G28")); // G28 will set home_flag
+        queue.inject_P(G28_STR); // G28 will set home_flag
         Popup_Window_Home();
         break;
       #if HAS_ZOFFSET_ITEM

commit 9dba7cd371b15cfb36cea833637e99a5ceebd2a4
Author: Jelmer van der Stel <steljwagh@users.noreply.github.com>
Date:   Sat Jan 16 00:23:04 2021 +0100

    Fix Ender 3 V2 encoder (#20784)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index ca1d7223f1..3126c46fb8 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -502,8 +502,7 @@ inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, auto &valr
     valref += EncoderRate.encoderMoveValue;
   else if (encoder_diffState == ENCODER_DIFF_CCW)
     valref -= EncoderRate.encoderMoveValue;
-  else if (encoder_diffState == ENCODER_DIFF_ENTER)
-    return true;
+  return encoder_diffState == ENCODER_DIFF_ENTER;
 }
 
 //

commit 4472ba2b6bc0835d0fcc039ad66d9dab40e13010
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 18:08:16 2021 -0600

    Ok to use C++11 'auto'

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 5adf6e8abb..ca1d7223f1 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -497,21 +497,13 @@ inline void Draw_Back_First(const bool is_sel=true) {
   if (is_sel) Draw_Menu_Cursor(0);
 }
 
-#define APPLY_ENCODER_F \
-  if (encoder_diffState == ENCODER_DIFF_CW)          \
-    valref += EncoderRate.encoderMoveValue;          \
-  else if (encoder_diffState == ENCODER_DIFF_CCW)    \
-    valref -= EncoderRate.encoderMoveValue;          \
-  else if (encoder_diffState == ENCODER_DIFF_ENTER)  \
-    return true;                                     \
-  return false;
-
-inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, int16_t &valref) {
-  APPLY_ENCODER_F
-}
-
-inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, float &valref) {
-  APPLY_ENCODER_F
+inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, auto &valref) {
+  if (encoder_diffState == ENCODER_DIFF_CW)
+    valref += EncoderRate.encoderMoveValue;
+  else if (encoder_diffState == ENCODER_DIFF_CCW)
+    valref -= EncoderRate.encoderMoveValue;
+  else if (encoder_diffState == ENCODER_DIFF_ENTER)
+    return true;
 }
 
 //

commit 7f3dcb3e8a8cc1a82c1d9315e9fada5ff59058f2
Author: Johan van der Vyver <9843081+jvandervyver@users.noreply.github.com>
Date:   Wed Jan 13 02:05:49 2021 +0200

    Multi-platform DWIN_CREALITY_LCD support (#20738)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 5a9d555970..5adf6e8abb 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -497,14 +497,21 @@ inline void Draw_Back_First(const bool is_sel=true) {
   if (is_sel) Draw_Menu_Cursor(0);
 }
 
-inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, auto &valref) {
-  if (encoder_diffState == ENCODER_DIFF_CW)
-    valref += EncoderRate.encoderMoveValue;
-  else if (encoder_diffState == ENCODER_DIFF_CCW)
-    valref -= EncoderRate.encoderMoveValue;
-  else if (encoder_diffState == ENCODER_DIFF_ENTER)
-    return true;
+#define APPLY_ENCODER_F \
+  if (encoder_diffState == ENCODER_DIFF_CW)          \
+    valref += EncoderRate.encoderMoveValue;          \
+  else if (encoder_diffState == ENCODER_DIFF_CCW)    \
+    valref -= EncoderRate.encoderMoveValue;          \
+  else if (encoder_diffState == ENCODER_DIFF_ENTER)  \
+    return true;                                     \
   return false;
+
+inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, int16_t &valref) {
+  APPLY_ENCODER_F
+}
+
+inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, float &valref) {
+  APPLY_ENCODER_F
 }
 
 //

commit 71bec0824c7457a922f2fc53ab79f8a9499021b8
Author: Dick Streefland <dick@streefland.net>
Date:   Mon Dec 21 08:47:49 2020 +0100

    Get E3V2 DWIN `MACHINE_SIZE` from config (#20526)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 38e41ba11e..5a9d555970 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -86,7 +86,7 @@
 #endif
 
 #ifndef MACHINE_SIZE
-  #define MACHINE_SIZE "220x220x250"
+  #define MACHINE_SIZE STRINGIFY(X_BED_SIZE) "x" STRINGIFY(Y_BED_SIZE) "x" STRINGIFY(Z_MAX_POS)
 #endif
 #ifndef CORP_WEBSITE_C
   #define CORP_WEBSITE_C "www.cxsw3d.com"

commit 20b3af1cc2c4a5e8505d1aae3419ab9418ed88ab
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Dec 16 22:18:40 2020 -0600

    Use homing_feedrate function

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index db44782fde..38e41ba11e 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1166,7 +1166,7 @@ void HMI_Move_X() {
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
         planner.synchronize();
-        planner.buffer_line(current_position, MMM_TO_MMS(HOMING_FEEDRATE_XY), active_extruder);
+        planner.buffer_line(current_position, homing_feedrate(X_AXIS), active_extruder);
       }
       DWIN_UpdateLCD();
       return;
@@ -1189,7 +1189,7 @@ void HMI_Move_Y() {
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
         planner.synchronize();
-        planner.buffer_line(current_position, MMM_TO_MMS(HOMING_FEEDRATE_XY), active_extruder);
+        planner.buffer_line(current_position, homing_feedrate(Y_AXIS), active_extruder);
       }
       DWIN_UpdateLCD();
       return;
@@ -1212,7 +1212,7 @@ void HMI_Move_Z() {
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
         planner.synchronize();
-        planner.buffer_line(current_position, MMM_TO_MMS(HOMING_FEEDRATE_Z), active_extruder);
+        planner.buffer_line(current_position, homing_feedrate(Z_AXIS), active_extruder);
       }
       DWIN_UpdateLCD();
       return;

commit 087a6fea13bb9f9c1f261607e7b7dbbca94a4cbd
Author: leodoener <leodoener@gmail.com>
Date:   Sat Dec 12 03:20:24 2020 +0100

    Fix SDCARD_SORT_ALPHA on Ender 3 V2 (#20443)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 5a21000698..db44782fde 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1690,7 +1690,7 @@ inline void Draw_SDItem(const uint16_t item, int16_t row=-1) {
     return;
   }
 
-  card.getfilename_sorted(item - is_subdir);
+  card.getfilename_sorted(SD_ORDER(item - is_subdir, card.get_num_Files()));
   char * const name = card.longest_filename();
 
   #if ENABLED(SCROLL_LONG_FILENAMES)

commit a4d6908d556afd77cf66ef7a8adc7c34fee81674
Author: Jason Smith <jason.inet@gmail.com>
Date:   Wed Dec 2 03:23:34 2020 -0800

    Permit SD EEPROM emulation on E3V2 (#20353)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 89ab77ba3c..5a21000698 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -216,7 +216,7 @@ void HMI_SetLanguageCache() {
 }
 
 void HMI_SetLanguage() {
-  #if ENABLED(EEPROM_SETTINGS)
+  #if BOTH(EEPROM_SETTINGS, IIC_BL24CXX_EEPROM)
     BL24CXX::read(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language, sizeof(HMI_flag.language));
   #endif
   HMI_SetLanguageCache();
@@ -225,7 +225,7 @@ void HMI_SetLanguage() {
 void HMI_ToggleLanguage() {
   HMI_flag.language = HMI_IsChinese() ? DWIN_ENGLISH : DWIN_CHINESE;
   HMI_SetLanguageCache();
-  #if ENABLED(EEPROM_SETTINGS)
+  #if BOTH(EEPROM_SETTINGS, IIC_BL24CXX_EEPROM)
     BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language, sizeof(HMI_flag.language));
   #endif
 }

commit a4618309ce9746a731d92a69ccb49183dfc0828d
Author: Jason Smith <jason.inet@gmail.com>
Date:   Wed Dec 2 01:31:06 2020 -0800

    Fix E3V2 DWIN Jerk Menu (#20352)
    
    * Fix E3V2 DWIN build without CLASSIC_JERK
    * Fix jerk edits applying to wrong index

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index a96b1dcb73..89ab77ba3c 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -185,7 +185,10 @@ bool dwin_abort_flag = false; // Flag to reset feedrate, return to Home
 
 constexpr float default_max_feedrate[]        = DEFAULT_MAX_FEEDRATE;
 constexpr float default_max_acceleration[]    = DEFAULT_MAX_ACCELERATION;
-constexpr float default_max_jerk[]            = { DEFAULT_XJERK, DEFAULT_YJERK, DEFAULT_ZJERK, DEFAULT_EJERK };
+
+#if HAS_CLASSIC_JERK
+  constexpr float default_max_jerk[]          = { DEFAULT_XJERK, DEFAULT_YJERK, DEFAULT_ZJERK, DEFAULT_EJERK };
+#endif
 
 uint8_t Percentrecord = 0;
 uint16_t remain_time = 0;
@@ -1492,8 +1495,8 @@ void HMI_MaxAccelerationXYZE() {
       if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Jerk)) {
         checkkey = MaxJerk;
         EncoderRate.enabled = false;
-        if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
-          planner.set_max_jerk(HMI_flag.step_axis, HMI_ValueStruct.Max_Jerk / 10);
+        if (WITHIN(HMI_flag.jerk_axis, X_AXIS, E_AXIS))
+          planner.set_max_jerk(HMI_flag.jerk_axis, HMI_ValueStruct.Max_Jerk / 10);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
         return;
       }
@@ -2955,75 +2958,77 @@ inline void Draw_Max_Accel_Menu() {
   #endif
 }
 
-inline void Draw_Max_Jerk_Menu() {
-  Clear_Main_Window();
+#if HAS_CLASSIC_JERK
+  inline void Draw_Max_Jerk_Menu() {
+    Clear_Main_Window();
 
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Jerk"
-
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(1));
-    DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(1) + 1);
-    DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 83, MBASE(1));        // Max Jerk speed X
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(2));
-    DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(2) + 1);
-    DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(2));
-    DWIN_Frame_AreaCopy(1,   1, 150,   7, 160, LBLX + 83, MBASE(2) + 3);    // Max Jerk speed Y
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(3));
-    DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(3) + 1);
-    DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(3));
-    DWIN_Frame_AreaCopy(1,   9, 150,  16, 160, LBLX + 83, MBASE(3) + 3);    // Max Jerk speed Z
-    #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(4));
-      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(4) + 1);
-      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(4));
-      DWIN_Frame_AreaCopy(1,  18, 150,  25, 160, LBLX + 83, MBASE(4) + 3);  // Max Jerk speed E
-    #endif
-  }
-  else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_JERK));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(1), F("Max Jerk X"));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(2), F("Max Jerk Y"));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(3), F("Max Jerk Z"));
+    if (HMI_IsChinese()) {
+      DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Jerk"
+
+      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(1));
+      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(1) + 1);
+      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(1));
+      DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 83, MBASE(1));        // Max Jerk speed X
+      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(2));
+      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(2) + 1);
+      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(2));
+      DWIN_Frame_AreaCopy(1,   1, 150,   7, 160, LBLX + 83, MBASE(2) + 3);    // Max Jerk speed Y
+      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(3));
+      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(3) + 1);
+      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(3));
+      DWIN_Frame_AreaCopy(1,   9, 150,  16, 160, LBLX + 83, MBASE(3) + 3);    // Max Jerk speed Z
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(4), F("Max Jerk E"));
+        DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(4));
+        DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(4) + 1);
+        DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(4));
+        DWIN_Frame_AreaCopy(1,  18, 150,  25, 160, LBLX + 83, MBASE(4) + 3);  // Max Jerk speed E
       #endif
-    #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Jerk"
-      draw_max_en(MBASE(1));          // "Max"
-      draw_jerk_en(MBASE(1));         // "Jerk"
-      draw_speed_en(72, MBASE(1));    // "Speed"
-      say_x(115, MBASE(1));           // "X"
-
-      draw_max_en(MBASE(2));          // "Max"
-      draw_jerk_en(MBASE(2));         // "Jerk"
-      draw_speed_en(72, MBASE(2));    // "Speed"
-      say_y(115, MBASE(2));           // "Y"
-
-      draw_max_en(MBASE(3));          // "Max"
-      draw_jerk_en(MBASE(3));         // "Jerk"
-      draw_speed_en(72, MBASE(3));    // "Speed"
-      say_z(115, MBASE(3));           // "Z"
+    }
+    else {
+      #ifdef USE_STRING_HEADINGS
+        Draw_Title(GET_TEXT_F(MSG_JERK));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(1), F("Max Jerk X"));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(2), F("Max Jerk Y"));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(3), F("Max Jerk Z"));
+        #if HAS_HOTEND
+          DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(4), F("Max Jerk E"));
+        #endif
+      #else
+        DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Jerk"
+        draw_max_en(MBASE(1));          // "Max"
+        draw_jerk_en(MBASE(1));         // "Jerk"
+        draw_speed_en(72, MBASE(1));    // "Speed"
+        say_x(115, MBASE(1));           // "X"
+
+        draw_max_en(MBASE(2));          // "Max"
+        draw_jerk_en(MBASE(2));         // "Jerk"
+        draw_speed_en(72, MBASE(2));    // "Speed"
+        say_y(115, MBASE(2));           // "Y"
+
+        draw_max_en(MBASE(3));          // "Max"
+        draw_jerk_en(MBASE(3));         // "Jerk"
+        draw_speed_en(72, MBASE(3));    // "Speed"
+        say_z(115, MBASE(3));           // "Z"
 
-      #if HAS_HOTEND
-        draw_max_en(MBASE(4));        // "Max"
-        draw_jerk_en(MBASE(4));       // "Jerk"
-        draw_speed_en(72, MBASE(4));  // "Speed"
-        say_e(115, MBASE(4));         // "E"
+        #if HAS_HOTEND
+          draw_max_en(MBASE(4));        // "Max"
+          draw_jerk_en(MBASE(4));       // "Jerk"
+          draw_speed_en(72, MBASE(4));  // "Speed"
+          say_e(115, MBASE(4));         // "E"
+        #endif
       #endif
+    }
+
+    Draw_Back_First();
+    LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
+    #if HAS_HOTEND
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
     #endif
   }
-
-  Draw_Back_First();
-  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
-  #if HAS_HOTEND
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
-  #endif
-}
+#endif
 
 inline void Draw_Steps_Menu() {
   Clear_Main_Window();
@@ -3636,7 +3641,9 @@ void DWIN_HandleScreen() {
     #endif
     case MaxSpeed:        HMI_MaxSpeed(); break;
     case MaxAcceleration: HMI_MaxAcceleration(); break;
-    case MaxJerk:         HMI_MaxJerk(); break;
+    #if HAS_CLASSIC_JERK
+      case MaxJerk:       HMI_MaxJerk(); break;
+    #endif
     case Step:            HMI_Step(); break;
     case Move_X:          HMI_Move_X(); break;
     case Move_Y:          HMI_Move_Y(); break;
@@ -3657,7 +3664,9 @@ void DWIN_HandleScreen() {
     case PrintSpeed:      HMI_PrintSpeed(); break;
     case MaxSpeed_value:  HMI_MaxFeedspeedXYZE(); break;
     case MaxAcceleration_value: HMI_MaxAccelerationXYZE(); break;
-    case MaxJerk_value:   HMI_MaxJerkXYZE(); break;
+    #if HAS_CLASSIC_JERK
+      case MaxJerk_value: HMI_MaxJerkXYZE(); break;
+    #endif
     case Step_value:      HMI_StepXYZE(); break;
     default: break;
   }

commit 0d080cea83b2666c105613678de212d7c828cbb1
Author: Jason Smith <jason.inet@gmail.com>
Date:   Tue Dec 1 00:29:21 2020 -0800

    Fix E3V2 Control Menu when returning from Info (#20338)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 7e2259e17f..a96b1dcb73 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -726,14 +726,14 @@ inline void Draw_Control_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_CONTROL));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(CONTROL_CASE_TEMP), GET_TEXT_F(MSG_TEMPERATURE));
-      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(CONTROL_CASE_MOVE), GET_TEXT_F(MSG_MOTION));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, CLINE(CONTROL_CASE_TEMP), GET_TEXT_F(MSG_TEMPERATURE));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, CLINE(CONTROL_CASE_MOVE), GET_TEXT_F(MSG_MOTION));
       #if ENABLED(EEPROM_SETTINGS)
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));
-        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, CLINE(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, CLINE(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, CLINE(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
       #endif
-      if (CVISI(CONTROL_CASE_INFO)) DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(CONTROL_CASE_INFO), F("Info"));
+      if (CVISI(CONTROL_CASE_INFO)) DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, CLINE(CONTROL_CASE_INFO), F("Info"));
     #else
       DWIN_Frame_TitleCopy(1, 128, 2, 176, 12);                                           // "Control"
       DWIN_Frame_AreaCopy(1,  1, 89,  83, 101, LBLX, CLINE(CONTROL_CASE_TEMP));           // Temperature >

commit 87ede6fa1b2ffb81d921264958b665f17b7326ab
Author: Jason Smith <jason.inet@gmail.com>
Date:   Mon Nov 30 04:44:34 2020 -0800

    Increase E3V2 DWIN steps/mm range to 999.9 (#20324)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index e9e6ef69e5..7e2259e17f 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -186,7 +186,6 @@ bool dwin_abort_flag = false; // Flag to reset feedrate, return to Home
 constexpr float default_max_feedrate[]        = DEFAULT_MAX_FEEDRATE;
 constexpr float default_max_acceleration[]    = DEFAULT_MAX_ACCELERATION;
 constexpr float default_max_jerk[]            = { DEFAULT_XJERK, DEFAULT_YJERK, DEFAULT_ZJERK, DEFAULT_EJERK };
-constexpr float default_axis_steps_per_unit[] = DEFAULT_AXIS_STEPS_PER_UNIT;
 
 uint8_t Percentrecord = 0;
 uint16_t remain_time = 0;
@@ -1522,7 +1521,7 @@ void HMI_StepXYZE() {
     }
     // Step limit
     if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
-      NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[HMI_flag.step_axis] * 2 * MINUNITMULT);
+      NOMORE(HMI_ValueStruct.Max_Step, 999.9 * MINUNITMULT);
     NOLESS(HMI_ValueStruct.Max_Step, MIN_STEP);
     // Step value
     DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);

commit 8fd8772a6fffe63d99d0b88aec7a77d283df8584
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 29 19:06:40 2020 -0600

    Adjust axis homed / trusted methods (#20323)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index fe2397fa6b..e9e6ef69e5 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1281,8 +1281,7 @@ void HMI_Move_Z() {
       last_zoffset = dwin_zoffset;
       dwin_zoffset = HMI_ValueStruct.offset_value / 100.0f;
       #if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
-        if ( (ENABLED(BABYSTEP_WITHOUT_HOMING) || all_axes_known()) && (ENABLED(BABYSTEP_ALWAYS_AVAILABLE) || printer_busy()) )
-          babystep.add_mm(Z_AXIS, dwin_zoffset - last_zoffset);
+        if (BABYSTEP_ALLOWED()) babystep.add_mm(Z_AXIS, dwin_zoffset - last_zoffset);
       #endif
       DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(zoff_line), HMI_ValueStruct.offset_value);
       DWIN_UpdateLCD();

commit 18fb4b1ce1cff0843bb2ac2cb810dd15081747b4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Nov 7 17:43:47 2020 -0600

    MSG_AUTOSTART => MSG_RUN_AUTO_FILES

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 5c6022d09e..fe2397fa6b 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -2144,7 +2144,7 @@ void HMI_Printing() {
             #endif
           #endif
 
-          strcat_P(cmd, PSTR("M24"));
+          strcat_P(cmd, M24_STR);
           queue.inject(cmd);
         }
         else {

commit 7e55cbf79820b6741d91194b6252623f85c57c1e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Nov 3 17:17:37 2020 -0600

    DWIN cleanup, preserve Z offset

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 45704d5724..5c6022d09e 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -594,7 +594,7 @@ inline void Item_Prepare_Home(const uint8_t row) {
     if (HMI_IsChinese()) {
       #if HAS_BED_PROBE
         DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(row));
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
       #else
         DWIN_Frame_AreaCopy(1, 43, 89, 98, 101, LBLX, MBASE(row));
       #endif
@@ -602,7 +602,7 @@ inline void Item_Prepare_Home(const uint8_t row) {
     else {
       #if HAS_BED_PROBE
         DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(row));    // "Z-Offset"
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
       #else
         DWIN_Frame_AreaCopy(1, 1, 76, 106, 86, LBLX, MBASE(row));       // "..."
       #endif
@@ -1271,14 +1271,8 @@ void HMI_Move_Z() {
           probe.offset.z = dwin_zoffset;
           TERN_(EEPROM_SETTINGS, settings.save());
         #endif
-        if (HMI_ValueStruct.show_mode == -4) {
-          checkkey = Prepare;
-          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
-        }
-        else {
-          checkkey = Tune;
-          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
-        }
+        checkkey = HMI_ValueStruct.show_mode == -4 ? Prepare : Tune;
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
         DWIN_UpdateLCD();
         return;
       }
@@ -1311,11 +1305,7 @@ void HMI_Move_Z() {
       }
       if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.E_Temp)) {
         EncoderRate.enabled = false;
-        if (HMI_ValueStruct.show_mode == -1) { // temperature
-          checkkey = TemperatureID;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
-        }
-        else if (HMI_ValueStruct.show_mode == -2) {
+        if (HMI_ValueStruct.show_mode == -2) {
           checkkey = PLAPreheat;
           ui.material_preset[0].hotend_temp = HMI_ValueStruct.E_Temp;
           DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), ui.material_preset[0].hotend_temp);
@@ -1327,10 +1317,11 @@ void HMI_Move_Z() {
           DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), ui.material_preset[1].hotend_temp);
           return;
         }
-        else { // tune
+        else if (HMI_ValueStruct.show_mode == -1) // Temperature
+          checkkey = TemperatureID;
+        else
           checkkey = Tune;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
-        }
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
         thermalManager.setTargetHotend(HMI_ValueStruct.E_Temp, 0);
         return;
       }
@@ -1358,11 +1349,7 @@ void HMI_Move_Z() {
       }
       if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Bed_Temp)) {
         EncoderRate.enabled = false;
-        if (HMI_ValueStruct.show_mode == -1) {
-          checkkey = TemperatureID;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
-        }
-        else if (HMI_ValueStruct.show_mode == -2) {
+        if (HMI_ValueStruct.show_mode == -2) {
           checkkey = PLAPreheat;
           ui.material_preset[0].bed_temp = HMI_ValueStruct.Bed_Temp;
           DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), ui.material_preset[0].bed_temp);
@@ -1374,10 +1361,11 @@ void HMI_Move_Z() {
           DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), ui.material_preset[1].bed_temp);
           return;
         }
-        else {
+        else if (HMI_ValueStruct.show_mode == -1)
+          checkkey = TemperatureID;
+        else
           checkkey = Tune;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
-        }
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
         thermalManager.setTargetBed(HMI_ValueStruct.Bed_Temp);
         return;
       }
@@ -1406,11 +1394,7 @@ void HMI_Move_Z() {
 
       if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Fan_speed)) {
         EncoderRate.enabled = false;
-        if (HMI_ValueStruct.show_mode == -1) {
-          checkkey = TemperatureID;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
-        }
-        else if (HMI_ValueStruct.show_mode == -2) {
+        if (HMI_ValueStruct.show_mode == -2) {
           checkkey = PLAPreheat;
           ui.material_preset[0].fan_speed = HMI_ValueStruct.Fan_speed;
           DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), ui.material_preset[0].fan_speed);
@@ -1422,10 +1406,11 @@ void HMI_Move_Z() {
           DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), ui.material_preset[1].fan_speed);
           return;
         }
-        else {
+        else if (HMI_ValueStruct.show_mode == -1)
+          checkkey = TemperatureID;
+        else
           checkkey = Tune;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
-        }
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
         thermalManager.set_fan_speed(0, HMI_ValueStruct.Fan_speed);
         return;
       }
@@ -1844,7 +1829,8 @@ void Draw_Status_Area(const bool with_update) {
 
   #if HAS_ZOFFSET_ITEM
     DWIN_ICON_Show(ICON, ICON_Zoffset, 158, 428);
-    DWIN_Draw_Signed_Float(DWIN_FONT_STAT, Color_Bg_Black, 2, 2, 178, 429, BABY_Z_VAR * 100);
+    dwin_zoffset = BABY_Z_VAR;
+    DWIN_Draw_Signed_Float(DWIN_FONT_STAT, Color_Bg_Black, 2, 2, 178, 429, dwin_zoffset * 100);
   #endif
 
   if (with_update) {
@@ -3573,7 +3559,7 @@ void EachMomentUpdate() {
   else if (dwin_abort_flag && !HMI_flag.home_flag) { // Print Stop
     dwin_abort_flag = false;
     HMI_ValueStruct.print_speed = feedrate_percentage = 100;
-    dwin_zoffset = TERN0(HAS_BED_PROBE, probe.offset.z);
+    dwin_zoffset = BABY_Z_VAR;
     select_page.set(0);
     Goto_MainMenu();
   }
@@ -3681,6 +3667,7 @@ void DWIN_HandleScreen() {
 
 void DWIN_CompletedHoming() {
   HMI_flag.home_flag = false;
+  dwin_zoffset = TERN0(HAS_BED_PROBE, probe.offset.z);
   if (checkkey == Last_Prepare) {
     checkkey = Prepare;
     select_prepare.now = PREPARE_CASE_HOME;
@@ -3689,7 +3676,6 @@ void DWIN_CompletedHoming() {
   }
   else if (checkkey == Back_Main) {
     HMI_ValueStruct.print_speed = feedrate_percentage = 100;
-    dwin_zoffset = TERN0(HAS_BED_PROBE, probe.offset.z);
     planner.finish_and_disable();
     Goto_MainMenu();
   }

commit eaf6777a6643a6fab23ceaaa4699cb2466ea6b83
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 16 19:36:25 2020 -0500

    Rename ultralcd => marlinui

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 2808749737..45704d5724 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -47,7 +47,7 @@
 #include <string.h>
 
 #include "../../fontutils.h"
-#include "../../ultralcd.h"
+#include "../../marlinui.h"
 
 #include "../../../sd/cardreader.h"
 

commit f95a2f6d91cb1ca779d6c22cf9e1d3db24ac295a
Author: signetica <66766598+signetica@users.noreply.github.com>
Date:   Tue Oct 6 15:58:28 2020 -0600

    Fix Ender-3 V2 DWIN Stop SD Print (#19642)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 85263a89ab..2808749737 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -181,7 +181,7 @@ uint8_t index_file     = MROWS,
         index_leveling = MROWS,
         index_tune     = MROWS;
 
-bool dwin_abort_flag = false;
+bool dwin_abort_flag = false; // Flag to reset feedrate, return to Home
 
 constexpr float default_max_feedrate[]        = DEFAULT_MAX_FEEDRATE;
 constexpr float default_max_acceleration[]    = DEFAULT_MAX_ACCELERATION;
@@ -1801,8 +1801,8 @@ void HMI_SDCardUpdate() {
         // TODO: Move card removed abort handling
         //       to CardReader::manage_media.
         card.flag.abort_sd_printing = true;
-        wait_for_heatup = false;
-        dwin_abort_flag = true;
+        wait_for_heatup = wait_for_user = false;
+        dwin_abort_flag = true; // Reset feedrate, return to Home
       }
     }
     DWIN_UpdateLCD();
@@ -2097,7 +2097,7 @@ void HMI_Printing() {
   if (HMI_flag.done_confirm_flag) {
     if (encoder_diffState == ENCODER_DIFF_ENTER) {
       HMI_flag.done_confirm_flag = false;
-      dwin_abort_flag = true;
+      dwin_abort_flag = true; // Reset feedrate, return to Home
     }
     return;
   }
@@ -2206,25 +2206,15 @@ void HMI_PauseOrStop() {
     }
     else if (select_print.now == 2) { // stop window
       if (HMI_flag.select_flag) {
-        wait_for_heatup = false; // Stop waiting for heater
-
-        #if 0
-          // TODO: In ExtUI or MarlinUI add a common stop event
-          // card.flag.abort_sd_printing = true;
-        #else
-          checkkey = Back_Main;
-          // Wait for planner moves to finish!
-          if (HMI_flag.home_flag) planner.synchronize();
-          card.endFilePrint();
-          #ifdef ACTION_ON_CANCEL
-            host_action_cancel();
-          #endif
-          #ifdef EVENT_GCODE_SD_ABORT
-            Popup_Window_Home(true);
-            queue.inject_P(PSTR(EVENT_GCODE_SD_ABORT));
-          #endif
-          dwin_abort_flag = true;
+        checkkey = Back_Main;
+        if (HMI_flag.home_flag) planner.synchronize(); // Wait for planner moves to finish!
+        wait_for_heatup = wait_for_user = false;       // Stop waiting for heating/user
+        card.flag.abort_sd_printing = true;            // Let the main loop handle SD abort
+        dwin_abort_flag = true;                        // Reset feedrate, return to Home
+        #ifdef ACTION_ON_CANCEL
+          host_action_cancel();
         #endif
+        Popup_Window_Home(true);
       }
       else
         Goto_PrintProcess(); // cancel stop
@@ -3584,13 +3574,6 @@ void EachMomentUpdate() {
     dwin_abort_flag = false;
     HMI_ValueStruct.print_speed = feedrate_percentage = 100;
     dwin_zoffset = TERN0(HAS_BED_PROBE, probe.offset.z);
-
-    planner.finish_and_disable();
-
-    #if DISABLED(SD_ABORT_NO_COOLDOWN)
-      thermalManager.disable_all_heaters();
-    #endif
-
     select_page.set(0);
     Goto_MainMenu();
   }

commit 169ec65e72c0f2f9cc4523c9a32f1d49fccc0253
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 27 16:51:16 2020 -0500

    Fix up E3 DWIN Power Panic

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 55fcd842de..85263a89ab 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -991,15 +991,15 @@ void Popup_Window_Resume() {
   if (HMI_IsChinese()) {
     DWIN_Frame_AreaCopy(1, 160, 338, 235, 354, 98, 135);
     DWIN_Frame_AreaCopy(1, 103, 321, 271, 335, 52, 192);
-    DWIN_ICON_Show(ICON, ICON_Continue_C, 26, 307);
-    DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 307);
+    DWIN_ICON_Show(ICON, ICON_Cancel_C,    26, 307);
+    DWIN_ICON_Show(ICON, ICON_Continue_C, 146, 307);
   }
   else {
     DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 14) / 2, 115, F("Continue Print"));
     DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 192, F("It looks like the last"));
     DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 212, F("file was interrupted."));
-    DWIN_ICON_Show(ICON, ICON_Continue_E, 26, 307);
-    DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 307);
+    DWIN_ICON_Show(ICON, ICON_Cancel_E,    26, 307);
+    DWIN_ICON_Show(ICON, ICON_Continue_E, 146, 307);
   }
 }
 
@@ -3597,45 +3597,30 @@ void EachMomentUpdate() {
   #if ENABLED(POWER_LOSS_RECOVERY)
     else if (DWIN_lcd_sd_status && recovery.dwin_flag) { // resume print before power off
       static bool recovery_flag = false;
-      recovery.dwin_flag = false;
 
-      recovery.load();
-      if (!recovery.valid()) return recovery.purge();
+      recovery.dwin_flag = false;
+      recovery_flag = true;
 
-      auto draw_first_option = [](const bool sel) {
+      auto update_selection = [&](const bool sel) {
+        HMI_flag.select_flag = sel;
         const uint16_t c1 = sel ? Color_Bg_Window : Select_Color;
         DWIN_Draw_Rectangle(0, c1, 25, 306, 126, 345);
         DWIN_Draw_Rectangle(0, c1, 24, 305, 127, 346);
-      };
-
-      auto update_selection = [&](const bool sel) {
-        HMI_flag.select_flag = sel;
-        draw_first_option(sel);
         const uint16_t c2 = sel ? Select_Color : Color_Bg_Window;
         DWIN_Draw_Rectangle(0, c2, 145, 306, 246, 345);
         DWIN_Draw_Rectangle(0, c2, 144, 305, 247, 346);
       };
 
-      const uint16_t fileCnt = card.get_num_Files();
-      for (uint16_t i = 0; i < fileCnt; i++) {
-        // TODO: Resume print via M1000 then update the UI
-        // with the active filename which can come from CardReader.
-        card.getfilename_sorted(SD_ORDER(i, fileCnt));
-        if (!strcmp(card.filename, &recovery.info.sd_filename[1])) { // Resume print before power failure while have the same file
-          recovery_flag = true;
-          HMI_flag.select_flag = true;
-          Popup_Window_Resume();
-          draw_first_option(false);
-          char * const name = card.longest_filename();
-          const int8_t npos = _MAX(0, DWIN_WIDTH - strlen(name) * (MENU_CHR_W)) / 2;
-          DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, npos, 252, name);
-          DWIN_UpdateLCD();
-          break;
-        }
-      }
+      Popup_Window_Resume();
+      update_selection(true);
 
-      // if hasn't resumable G-code file
-      if (!recovery_flag) return;
+      // TODO: Get the name of the current file from someplace
+      //
+      //(void)recovery.interrupted_file_exists();
+      char * const name = card.longest_filename();
+      const int8_t npos = _MAX(0U, DWIN_WIDTH - strlen(name) * (MENU_CHR_W)) / 2;
+      DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, npos, 252, name);
+      DWIN_UpdateLCD();
 
       while (recovery_flag) {
         ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
@@ -3643,12 +3628,12 @@ void EachMomentUpdate() {
           if (encoder_diffState == ENCODER_DIFF_ENTER) {
             recovery_flag = false;
             if (HMI_flag.select_flag) break;
-            TERN_(POWER_LOSS_RECOVERY, recovery.cancel());
+            TERN_(POWER_LOSS_RECOVERY, queue.inject_P(PSTR("M1000C")));
             HMI_StartFrame(true);
             return;
           }
           else
-            update_selection(encoder_diffState == ENCODER_DIFF_CCW);
+            update_selection(encoder_diffState == ENCODER_DIFF_CW);
 
           DWIN_UpdateLCD();
         }
@@ -3656,9 +3641,9 @@ void EachMomentUpdate() {
 
       select_print.set(0);
       HMI_ValueStruct.show_mode = 0;
-      HMI_StartFrame(false);
-      recovery.resume();
-      return;
+      queue.inject_P(PSTR("M1000"));
+      Goto_PrintProcess();
+      Draw_Status_Area(true);
     }
   #endif
   DWIN_UpdateLCD();

commit 4424645e04c9e75462d36de8f7a82e67cc9c262e
Author: qwewer0 <57561110+qwewer0@users.noreply.github.com>
Date:   Mon Sep 28 21:53:50 2020 +0200

    Multi-line comments cleanup (#19535)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 2aaf66854c..55fcd842de 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1632,7 +1632,6 @@ void update_variable() {
  * TODO: New code can follow the pattern of menu_media.cpp
  * and rely on Marlin caching for performance. No need to
  * cache files here.
- *
  */
 
 #ifndef strcasecmp_P

commit be7bbadabeb49c5e57d61fb2367cc5c994a5a6db
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 28 04:39:29 2020 -0500

    Default E3 V2 to English

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index c0096d379d..2aaf66854c 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -151,7 +151,7 @@ constexpr uint16_t TROWS = 6, MROWS = TROWS - 1,        // Total rows, and other
 
 /* Value Init */
 HMI_value_t HMI_ValueStruct;
-HMI_Flag HMI_flag{0};
+HMI_Flag_t HMI_flag{0};
 
 millis_t dwin_heat_time = 0;
 
@@ -173,7 +173,6 @@ select_t select_page{0}, select_file{0}, select_print{0}, select_prepare{0}
          , select_acc{0}
          , select_jerk{0}
          , select_step{0}
-         // , select_leveling{0}
          ;
 
 uint8_t index_file     = MROWS,
@@ -208,22 +207,24 @@ uint16_t remain_time = 0;
 #define DWIN_LANGUAGE_EEPROM_ADDRESS 0x01   // Between 0x01 and 0x63 (EEPROM_OFFSET-1)
                                             // BL24CXX::check() uses 0x00
 
+inline bool HMI_IsChinese() { return HMI_flag.language == DWIN_CHINESE; }
+
 void HMI_SetLanguageCache() {
-  DWIN_JPG_CacheTo1(HMI_flag.language_chinese ? Language_Chinese : Language_English);
+  DWIN_JPG_CacheTo1(HMI_IsChinese() ? Language_Chinese : Language_English);
 }
 
 void HMI_SetLanguage() {
   #if ENABLED(EEPROM_SETTINGS)
-    BL24CXX::read(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language_chinese, sizeof(HMI_flag.language_chinese));
+    BL24CXX::read(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language, sizeof(HMI_flag.language));
   #endif
   HMI_SetLanguageCache();
 }
 
 void HMI_ToggleLanguage() {
-  HMI_flag.language_chinese ^= true;
+  HMI_flag.language = HMI_IsChinese() ? DWIN_ENGLISH : DWIN_CHINESE;
   HMI_SetLanguageCache();
   #if ENABLED(EEPROM_SETTINGS)
-    BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language_chinese, sizeof(HMI_flag.language_chinese));
+    BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language, sizeof(HMI_flag.language));
   #endif
 }
 
@@ -242,14 +243,14 @@ void ICON_Print() {
   if (select_page.now == 0) {
     DWIN_ICON_Show(ICON, ICON_Print_1, 17, 130);
     DWIN_Draw_Rectangle(0, Color_White, 17, 130, 126, 229);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 58, 201);
     else
       DWIN_Frame_AreaCopy(1, 1, 451, 31, 463, 57, 201);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Print_0, 17, 130);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 1, 405, 28, 420, 58, 201);
     else
       DWIN_Frame_AreaCopy(1, 1, 423, 31, 435, 57, 201);
@@ -260,14 +261,14 @@ void ICON_Prepare() {
   if (select_page.now == 1) {
     DWIN_ICON_Show(ICON, ICON_Prepare_1, 145, 130);
     DWIN_Draw_Rectangle(0, Color_White, 145, 130, 254, 229);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 31, 447, 58, 460, 186, 201);
     else
       DWIN_Frame_AreaCopy(1, 33, 451, 82, 466, 175, 201);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Prepare_0, 145, 130);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 31, 405, 58, 420, 186, 201);
     else
       DWIN_Frame_AreaCopy(1, 33, 423, 82, 438, 175, 201);
@@ -278,14 +279,14 @@ void ICON_Control() {
   if (select_page.now == 2) {
     DWIN_ICON_Show(ICON, ICON_Control_1, 17, 246);
     DWIN_Draw_Rectangle(0, Color_White, 17, 246, 126, 345);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 61, 447, 88, 460, 58, 318);
     else
       DWIN_Frame_AreaCopy(1, 85, 451, 132, 463, 48, 318);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Control_0, 17, 246);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 61, 405, 88, 420, 58, 318);
     else
       DWIN_Frame_AreaCopy(1, 85, 423, 132, 434, 48, 318);
@@ -296,14 +297,14 @@ void ICON_StartInfo(bool show) {
   if (show) {
     DWIN_ICON_Show(ICON, ICON_Info_1, 145, 246);
     DWIN_Draw_Rectangle(0, Color_White, 145, 246, 254, 345);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 91, 447, 118, 460, 186, 318);
     else
       DWIN_Frame_AreaCopy(1, 132, 451, 159, 466, 186, 318);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Info_0, 145, 246);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 91, 405, 118, 420, 186, 318);
     else
       DWIN_Frame_AreaCopy(1, 132, 423, 159, 435, 186, 318);
@@ -314,14 +315,14 @@ void ICON_Leveling(bool show) {
   if (show) {
     DWIN_ICON_Show(ICON, ICON_Leveling_1, 145, 246);
     DWIN_Draw_Rectangle(0, Color_White, 145, 246, 254, 345);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 211, 447, 238, 460, 186, 318);
     else
       DWIN_Frame_AreaCopy(1, 84, 437, 120,  449, 182, 318);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Leveling_0, 145, 246);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 211, 405, 238, 420, 186, 318);
     else
       DWIN_Frame_AreaCopy(1, 84, 465, 120, 478, 182, 318);
@@ -332,14 +333,14 @@ void ICON_Tune() {
   if (select_print.now == 0) {
     DWIN_ICON_Show(ICON, ICON_Setup_1, 8, 252);
     DWIN_Draw_Rectangle(0, Color_White, 8, 252, 87, 351);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 121, 447, 148, 458, 34, 325);
     else
       DWIN_Frame_AreaCopy(1,   0, 466,  34, 476, 31, 325);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Setup_0, 8, 252);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 121, 405, 148, 420, 34, 325);
     else
       DWIN_Frame_AreaCopy(1,   0, 438,  32, 448, 31, 325);
@@ -350,14 +351,14 @@ void ICON_Pause() {
   if (select_print.now == 1) {
     DWIN_ICON_Show(ICON, ICON_Pause_1, 96, 252);
     DWIN_Draw_Rectangle(0, Color_White, 96, 252, 175, 351);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 181, 447, 208, 459, 124, 325);
     else
       DWIN_Frame_AreaCopy(1, 177, 451, 216, 462, 116, 325);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Pause_0, 96, 252);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 181, 405, 208, 420, 124, 325);
     else
       DWIN_Frame_AreaCopy(1, 177, 423, 215, 433, 116, 325);
@@ -368,14 +369,14 @@ void ICON_Continue() {
   if (select_print.now == 1) {
     DWIN_ICON_Show(ICON, ICON_Continue_1, 96, 252);
     DWIN_Draw_Rectangle(0, Color_White, 96, 252, 175, 351);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 124, 325);
     else
       DWIN_Frame_AreaCopy(1, 1, 452, 32, 464, 121, 325);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Continue_0, 96, 252);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 1, 405, 28, 420, 124, 325);
     else
       DWIN_Frame_AreaCopy(1, 1, 424, 31, 434, 121, 325);
@@ -386,14 +387,14 @@ void ICON_Stop() {
   if (select_print.now == 2) {
     DWIN_ICON_Show(ICON, ICON_Stop_1, 184, 252);
     DWIN_Draw_Rectangle(0, Color_White, 184, 252, 263, 351);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 151, 447, 178, 459, 210, 325);
     else
       DWIN_Frame_AreaCopy(1, 218, 452, 249, 466, 209, 325);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Stop_0, 184, 252);
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1, 151, 405, 178, 420, 210, 325);
     else
       DWIN_Frame_AreaCopy(1, 218, 423, 247, 436, 209, 325);
@@ -481,7 +482,7 @@ inline void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char
 
 // The "Back" label is always on the first line
 inline void Draw_Back_Label() {
-  if (HMI_flag.language_chinese)
+  if (HMI_IsChinese())
     DWIN_Frame_AreaCopy(1, 129, 72, 156, 84, LBLX, MBASE(0));
   else
     DWIN_Frame_AreaCopy(1, 226, 179, 256, 189, LBLX, MBASE(0));
@@ -563,7 +564,7 @@ inline void draw_move_en(const uint16_t line) {
 inline void DWIN_Frame_TitleCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) { DWIN_Frame_AreaCopy(id, x1, y1, x2, y2, 14, 8); }
 
 inline void Item_Prepare_Move(const uint8_t row) {
-  if (HMI_flag.language_chinese)
+  if (HMI_IsChinese())
     DWIN_Frame_AreaCopy(1, 159, 70, 200, 84, LBLX, MBASE(row));
   else
     draw_move_en(MBASE(row)); // "Move >"
@@ -572,7 +573,7 @@ inline void Item_Prepare_Move(const uint8_t row) {
 }
 
 inline void Item_Prepare_Disable(const uint8_t row) {
-  if (HMI_flag.language_chinese)
+  if (HMI_IsChinese())
     DWIN_Frame_AreaCopy(1, 204, 70, 259, 82, LBLX, MBASE(row));
   else
     DWIN_Frame_AreaCopy(1, 103, 59, 200, 74, LBLX, MBASE(row)); // "Disable Stepper"
@@ -580,7 +581,7 @@ inline void Item_Prepare_Disable(const uint8_t row) {
 }
 
 inline void Item_Prepare_Home(const uint8_t row) {
-  if (HMI_flag.language_chinese)
+  if (HMI_IsChinese())
     DWIN_Frame_AreaCopy(1, 0, 89, 41, 101, LBLX, MBASE(row));
   else
     DWIN_Frame_AreaCopy(1, 202, 61, 271, 71, LBLX, MBASE(row)); // "Auto Home"
@@ -590,7 +591,7 @@ inline void Item_Prepare_Home(const uint8_t row) {
 #if HAS_ZOFFSET_ITEM
 
   inline void Item_Prepare_Offset(const uint8_t row) {
-    if (HMI_flag.language_chinese) {
+    if (HMI_IsChinese()) {
       #if HAS_BED_PROBE
         DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(row));
         DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
@@ -613,7 +614,7 @@ inline void Item_Prepare_Home(const uint8_t row) {
 
 #if HAS_HOTEND
   inline void Item_Prepare_PLA(const uint8_t row) {
-    if (HMI_flag.language_chinese) {
+    if (HMI_IsChinese()) {
       DWIN_Frame_AreaCopy(1, 100, 89, 151, 101, LBLX, MBASE(row));
     }
     else {
@@ -624,7 +625,7 @@ inline void Item_Prepare_Home(const uint8_t row) {
   }
 
   inline void Item_Prepare_ABS(const uint8_t row) {
-    if (HMI_flag.language_chinese) {
+    if (HMI_IsChinese()) {
       DWIN_Frame_AreaCopy(1, 180, 89, 233, 100, LBLX, MBASE(row));
     }
     else {
@@ -637,7 +638,7 @@ inline void Item_Prepare_Home(const uint8_t row) {
 
 #if HAS_PREHEAT
   inline void Item_Prepare_Cool(const uint8_t row) {
-    if (HMI_flag.language_chinese)
+    if (HMI_IsChinese())
       DWIN_Frame_AreaCopy(1,   1, 104,  56, 117, LBLX, MBASE(row));
     else
       DWIN_Frame_AreaCopy(1, 200,  76, 264,  86, LBLX, MBASE(row));      // "Cooldown"
@@ -646,7 +647,7 @@ inline void Item_Prepare_Home(const uint8_t row) {
 #endif
 
 inline void Item_Prepare_Lang(const uint8_t row) {
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_AreaCopy(1, 239, 134, 266, 146, LBLX, MBASE(row));
     DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, 226, MBASE(row), F("CN"));
   }
@@ -664,7 +665,7 @@ inline void Draw_Prepare_Menu() {
   #define PSCROL(L) (scroll + (L))
   #define PVISI(L)  WITHIN(PSCROL(L), 0, MROWS)
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_TitleCopy(1, 133, 1, 160, 13);   // "Prepare"
   }
   else {
@@ -708,7 +709,7 @@ inline void Draw_Control_Menu() {
 
   if (CVISI(0)) Draw_Back_First(select_control.now == 0);                         // < Back
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_TitleCopy(1, 103, 1, 130, 14);                                     // "Control"
 
     DWIN_Frame_AreaCopy(1,  57, 104,  84, 116, LBLX, CLINE(CONTROL_CASE_TEMP));   // Temperature >
@@ -775,7 +776,7 @@ inline void Draw_Control_Menu() {
 inline void Draw_Tune_Menu() {
   Clear_Main_Window();
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_AreaCopy(1, 73, 2, 100, 13, 14, 9);
     DWIN_Frame_AreaCopy(1, 116, 164, 171, 176, LBLX, MBASE(TUNE_CASE_SPEED));
     #if HAS_HOTEND
@@ -881,7 +882,7 @@ inline void say_e(const uint16_t inset, const uint16_t line) {
 inline void Draw_Motion_Menu() {
   Clear_Main_Window();
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_TitleCopy(1, 1, 16, 28, 28);                                     // "Motion"
     DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, MBASE(MOTION_CASE_RATE));  // Max speed
     DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(MOTION_CASE_ACCEL));        // Max...
@@ -936,7 +937,7 @@ inline void Draw_Motion_Menu() {
     Draw_Popup_Bkgd_105();
     if (toohigh) {
       DWIN_ICON_Show(ICON, ICON_TempTooHigh, 102, 165);
-      if (HMI_flag.language_chinese) {
+      if (HMI_IsChinese()) {
         DWIN_Frame_AreaCopy(1, 103, 371, 237, 386, 52, 285);
         DWIN_Frame_AreaCopy(1, 151, 389, 185, 402, 187, 285);
         DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
@@ -948,7 +949,7 @@ inline void Draw_Motion_Menu() {
     }
     else {
       DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 165);
-      if (HMI_flag.language_chinese) {
+      if (HMI_IsChinese()) {
         DWIN_Frame_AreaCopy(1, 103, 371, 270, 386, 52, 285);
         DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
       }
@@ -971,7 +972,7 @@ inline void Draw_Popup_Bkgd_60() {
     Clear_Main_Window();
     Draw_Popup_Bkgd_60();
     DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 105);
-    if (HMI_flag.language_chinese) {
+    if (HMI_IsChinese()) {
       DWIN_Frame_AreaCopy(1, 103, 371, 136, 386, 69, 240);
       DWIN_Frame_AreaCopy(1, 170, 371, 270, 386, 102, 240);
       DWIN_ICON_Show(ICON, ICON_Confirm_C, 86, 280);
@@ -987,7 +988,7 @@ inline void Draw_Popup_Bkgd_60() {
 void Popup_Window_Resume() {
   Clear_Popup_Area();
   Draw_Popup_Bkgd_105();
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_AreaCopy(1, 160, 338, 235, 354, 98, 135);
     DWIN_Frame_AreaCopy(1, 103, 321, 271, 335, 52, 192);
     DWIN_ICON_Show(ICON, ICON_Continue_C, 26, 307);
@@ -1006,7 +1007,7 @@ void Popup_Window_Home(const bool parking/*=false*/) {
   Clear_Main_Window();
   Draw_Popup_Bkgd_60();
   DWIN_ICON_Show(ICON, ICON_BLTouch, 101, 105);
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_AreaCopy(1, 0, 371, 33, 386, 85, 240);
     DWIN_Frame_AreaCopy(1, 203, 286, 271, 302, 118, 240);
     DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
@@ -1023,7 +1024,7 @@ void Popup_Window_Home(const bool parking/*=false*/) {
     Clear_Main_Window();
     Draw_Popup_Bkgd_60();
     DWIN_ICON_Show(ICON, ICON_AutoLeveling, 101, 105);
-    if (HMI_flag.language_chinese) {
+    if (HMI_IsChinese()) {
       DWIN_Frame_AreaCopy(1, 0, 371, 100, 386, 84, 240);
       DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
     }
@@ -1048,7 +1049,7 @@ void Draw_Select_Highlight(const bool sel) {
 void Popup_window_PauseOrStop() {
   Clear_Main_Window();
   Draw_Popup_Bkgd_60();
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
          if (select_print.now == 1) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);
     else if (select_print.now == 2) DWIN_Frame_AreaCopy(1, 221, 320, 253, 336, 98, 150);
     DWIN_Frame_AreaCopy(1, 220, 304, 264, 319, 130, 150);
@@ -1065,7 +1066,7 @@ void Popup_window_PauseOrStop() {
 }
 
 void Draw_Printing_Screen() {
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_AreaCopy(1, 30,  1,  71, 14,  14,   9);  // Tune
     DWIN_Frame_AreaCopy(1,  0, 72,  63, 86,  41, 188);  // Pause
     DWIN_Frame_AreaCopy(1, 65, 72, 128, 86, 176, 188);  // Stop
@@ -1125,7 +1126,7 @@ void Goto_MainMenu() {
 
   Clear_Main_Window();
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_AreaCopy(1, 2, 2, 27, 14, 14, 9); // "Home"
   }
   else {
@@ -1864,7 +1865,7 @@ inline void Draw_Info_Menu() {
   DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(MACHINE_SIZE) * MENU_CHR_W) / 2, 122, (char*)MACHINE_SIZE);
   DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, (char*)SHORT_BUILD_VERSION);
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_TitleCopy(1, 30, 17, 57, 29); // "Info"
 
     DWIN_Frame_AreaCopy(1, 197, 149, 252, 161, 108, 102);
@@ -1895,7 +1896,7 @@ inline void Draw_Info_Menu() {
 inline void Draw_Print_File_Menu() {
   Clear_Title_Bar();
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_TitleCopy(1, 0, 31, 55, 44); // "Print file"
   }
   else {
@@ -2226,9 +2227,8 @@ void HMI_PauseOrStop() {
           dwin_abort_flag = true;
         #endif
       }
-      else {
+      else
         Goto_PrintProcess(); // cancel stop
-      }
     }
   }
   DWIN_UpdateLCD();
@@ -2237,7 +2237,7 @@ void HMI_PauseOrStop() {
 inline void Draw_Move_Menu() {
   Clear_Main_Window();
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_TitleCopy(1, 192, 1, 233, 14); // "Move"
     DWIN_Frame_AreaCopy(1, 58, 118, 106, 132, LBLX, MBASE(1));
     DWIN_Frame_AreaCopy(1, 109, 118, 157, 132, LBLX, MBASE(2));
@@ -2409,7 +2409,7 @@ void HMI_Prepare() {
 void Draw_Temperature_Menu() {
   Clear_Main_Window();
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_TitleCopy(1, 236, 2, 263, 13); // "Temperature"
     #if HAS_HOTEND
       DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(TEMP_CASE_TEMP));
@@ -2508,7 +2508,7 @@ void HMI_Control() {
         Draw_More_Icon(CONTROL_CASE_MOVE + MROWS - index_control); // Motion >
         if (index_control > MROWS) {
           Draw_More_Icon(CONTROL_CASE_INFO + MROWS - index_control); // Info >
-          if (HMI_flag.language_chinese)
+          if (HMI_IsChinese())
             DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, MBASE(CONTROL_CASE_INFO - 1));
           else
             DWIN_Frame_AreaCopy(1, 0, 104, 24, 114, LBLX, MBASE(CONTROL_CASE_INFO - 1));
@@ -2718,7 +2718,7 @@ void HMI_Temperature() {
 
           Clear_Main_Window();
 
-          if (HMI_flag.language_chinese) {
+          if (HMI_IsChinese()) {
             DWIN_Frame_TitleCopy(1, 59, 16, 139, 29);                                         // "PLA Settings"
             DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_TEMP));
             DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(PREHEAT_CASE_TEMP));     // PLA nozzle temp
@@ -2792,7 +2792,7 @@ void HMI_Temperature() {
 
           Clear_Main_Window();
 
-          if (HMI_flag.language_chinese) {
+          if (HMI_IsChinese()) {
             DWIN_Frame_TitleCopy(1, 142, 16, 223, 29);                                        // "ABS Settings"
 
             DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_TEMP));
@@ -2872,7 +2872,7 @@ void HMI_Temperature() {
 inline void Draw_Max_Speed_Menu() {
   Clear_Main_Window();
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Max Speed (mm/s)"
 
     auto say_max_speed = [](const uint16_t row) {
@@ -2934,7 +2934,7 @@ inline void Draw_Max_Speed_Menu() {
 inline void Draw_Max_Accel_Menu() {
   Clear_Main_Window();
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Acceleration"
 
     DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(1));
@@ -2985,7 +2985,7 @@ inline void Draw_Max_Accel_Menu() {
 inline void Draw_Max_Jerk_Menu() {
   Clear_Main_Window();
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Jerk"
 
     DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(1));
@@ -3055,7 +3055,7 @@ inline void Draw_Max_Jerk_Menu() {
 inline void Draw_Steps_Menu() {
   Clear_Main_Window();
 
-  if (HMI_flag.language_chinese) {
+  if (HMI_IsChinese()) {
     DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Steps per mm"
 
     DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(1));
@@ -3528,7 +3528,7 @@ void EachMomentUpdate() {
 
       // show print done confirm
       DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 250, DWIN_WIDTH - 1, STATUS_Y);
-      DWIN_ICON_Show(ICON, HMI_flag.language_chinese ? ICON_Confirm_C : ICON_Confirm_E, 86, 283);
+      DWIN_ICON_Show(ICON, HMI_IsChinese() ? ICON_Confirm_C : ICON_Confirm_E, 86, 283);
     }
     else if (HMI_flag.pause_flag != printingIsPaused()) {
       // print status update

commit 3245a5fdf65df729f5b8bace87cc8684532a9ab1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 27 16:48:03 2020 -0500

    E3 DWIN: "No Media" message

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 1bd49d4dd2..c0096d379d 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1753,11 +1753,17 @@ inline void Redraw_SD_List() {
 
   Draw_Back_First();
 
-  // As many files as will fit
-  LOOP_L_N(i, _MIN(nr_sd_menu_items(), MROWS))
-    Draw_SDItem(i, i + 1);
+  if (card.isMounted()) {
+    // As many files as will fit
+    LOOP_L_N(i, _MIN(nr_sd_menu_items(), MROWS))
+      Draw_SDItem(i, i + 1);
 
-  TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());
+    TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());
+  }
+  else {
+    DWIN_Draw_Rectangle(1, Color_Bg_Red, 10, MBASE(3) - 10, DWIN_WIDTH - 10, MBASE(4));
+    DWIN_Draw_String(false, false, font16x32, Color_Yellow, Color_Bg_Red, ((DWIN_WIDTH) - 8 * 16) / 2, MBASE(3), F("No Media"));
+  }
 }
 
 bool DWIN_lcd_sd_status = false;

commit 37cf156223058d7c2d576dbffc39e7b2987254ef
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 27 16:46:26 2020 -0500

    E3 DWIN: General cleanup

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index faf9720fa7..1bd49d4dd2 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -494,6 +494,16 @@ inline void Draw_Back_First(const bool is_sel=true) {
   if (is_sel) Draw_Menu_Cursor(0);
 }
 
+inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, auto &valref) {
+  if (encoder_diffState == ENCODER_DIFF_CW)
+    valref += EncoderRate.encoderMoveValue;
+  else if (encoder_diffState == ENCODER_DIFF_CCW)
+    valref -= EncoderRate.encoderMoveValue;
+  else if (encoder_diffState == ENCODER_DIFF_ENTER)
+    return true;
+  return false;
+}
+
 //
 // Draw Menus
 //
@@ -1146,13 +1156,7 @@ inline ENCODER_DiffState get_encoder_state() {
 void HMI_Move_X() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      HMI_ValueStruct.Move_X_scale += EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      HMI_ValueStruct.Move_X_scale -= EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scale)) {
       checkkey = AxisMove;
       EncoderRate.enabled = false;
       DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
@@ -1175,13 +1179,7 @@ void HMI_Move_X() {
 void HMI_Move_Y() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      HMI_ValueStruct.Move_Y_scale += EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      HMI_ValueStruct.Move_Y_scale -= EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scale)) {
       checkkey = AxisMove;
       EncoderRate.enabled = false;
       DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
@@ -1204,13 +1202,7 @@ void HMI_Move_Y() {
 void HMI_Move_Z() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      HMI_ValueStruct.Move_Z_scale += EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      HMI_ValueStruct.Move_Z_scale -= EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scale)) {
       checkkey = AxisMove;
       EncoderRate.enabled = false;
       DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
@@ -1236,13 +1228,7 @@ void HMI_Move_Z() {
     static float last_E_scale = 0;
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState != ENCODER_DIFF_NO) {
-      if (encoder_diffState == ENCODER_DIFF_CW) {
-        HMI_ValueStruct.Move_E_scale += EncoderRate.encoderMoveValue;
-      }
-      else if (encoder_diffState == ENCODER_DIFF_CCW) {
-        HMI_ValueStruct.Move_E_scale -= EncoderRate.encoderMoveValue;
-      }
-      else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_E_scale)) {
         checkkey = AxisMove;
         EncoderRate.enabled = false;
         last_E_scale = HMI_ValueStruct.Move_E_scale;
@@ -1278,11 +1264,7 @@ void HMI_Move_Z() {
         case -4: zoff_line = PREPARE_CASE_ZOFF + MROWS - index_prepare; break;
         default: zoff_line = TUNE_CASE_ZOFF + MROWS - index_tune;
       }
-      if (encoder_diffState == ENCODER_DIFF_CW)
-        HMI_ValueStruct.offset_value += EncoderRate.encoderMoveValue;
-      else if (encoder_diffState == ENCODER_DIFF_CCW)
-        HMI_ValueStruct.offset_value -= EncoderRate.encoderMoveValue;
-      else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.offset_value)) {
         EncoderRate.enabled = false;
         #if HAS_BED_PROBE
           probe.offset.z = dwin_zoffset;
@@ -1326,13 +1308,7 @@ void HMI_Move_Z() {
         case -3: temp_line = PREHEAT_CASE_TEMP; break;
         default: temp_line = TUNE_CASE_TEMP + MROWS - index_tune;
       }
-      if (encoder_diffState == ENCODER_DIFF_CW) {
-        HMI_ValueStruct.E_Temp += EncoderRate.encoderMoveValue;
-      }
-      else if (encoder_diffState == ENCODER_DIFF_CCW) {
-        HMI_ValueStruct.E_Temp -= EncoderRate.encoderMoveValue;
-      }
-      else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.E_Temp)) {
         EncoderRate.enabled = false;
         if (HMI_ValueStruct.show_mode == -1) { // temperature
           checkkey = TemperatureID;
@@ -1379,13 +1355,7 @@ void HMI_Move_Z() {
         case -3: bed_line = PREHEAT_CASE_BED; break;
         default: bed_line = TUNE_CASE_BED + MROWS - index_tune;
       }
-      if (encoder_diffState == ENCODER_DIFF_CW) {
-        HMI_ValueStruct.Bed_Temp += EncoderRate.encoderMoveValue;
-      }
-      else if (encoder_diffState == ENCODER_DIFF_CCW) {
-        HMI_ValueStruct.Bed_Temp -= EncoderRate.encoderMoveValue;
-      }
-      else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Bed_Temp)) {
         EncoderRate.enabled = false;
         if (HMI_ValueStruct.show_mode == -1) {
           checkkey = TemperatureID;
@@ -1433,13 +1403,7 @@ void HMI_Move_Z() {
         default: fan_line = TUNE_CASE_FAN + MROWS - index_tune;
       }
 
-      if (encoder_diffState == ENCODER_DIFF_CW) {
-        HMI_ValueStruct.Fan_speed += EncoderRate.encoderMoveValue;
-      }
-      else if (encoder_diffState == ENCODER_DIFF_CCW) {
-        HMI_ValueStruct.Fan_speed -= EncoderRate.encoderMoveValue;
-      }
-      else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Fan_speed)) {
         EncoderRate.enabled = false;
         if (HMI_ValueStruct.show_mode == -1) {
           checkkey = TemperatureID;
@@ -1477,13 +1441,7 @@ void HMI_Move_Z() {
 void HMI_PrintSpeed() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      HMI_ValueStruct.print_speed += EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      HMI_ValueStruct.print_speed -= EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.print_speed)) {
       checkkey = Tune;
       EncoderRate.enabled = false;
       feedrate_percentage = HMI_ValueStruct.print_speed;
@@ -1501,13 +1459,7 @@ void HMI_PrintSpeed() {
 void HMI_MaxFeedspeedXYZE() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      HMI_ValueStruct.Max_Feedspeed += EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      HMI_ValueStruct.Max_Feedspeed -= EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Feedspeed)) {
       checkkey = MaxSpeed;
       EncoderRate.enabled = false;
       if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, E_AXIS))
@@ -1527,9 +1479,7 @@ void HMI_MaxFeedspeedXYZE() {
 void HMI_MaxAccelerationXYZE() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (encoder_diffState == ENCODER_DIFF_CW) { HMI_ValueStruct.Max_Acceleration += EncoderRate.encoderMoveValue;}
-    else if (encoder_diffState == ENCODER_DIFF_CCW) { HMI_ValueStruct.Max_Acceleration -= EncoderRate.encoderMoveValue;}
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Acceleration)) {
       checkkey = MaxAcceleration;
       EncoderRate.enabled = false;
       if (HMI_flag.acc_axis == X_AXIS) planner.set_max_acceleration(X_AXIS, HMI_ValueStruct.Max_Acceleration);
@@ -1555,11 +1505,7 @@ void HMI_MaxAccelerationXYZE() {
   void HMI_MaxJerkXYZE() {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState != ENCODER_DIFF_NO) {
-      if (encoder_diffState == ENCODER_DIFF_CW)
-        HMI_ValueStruct.Max_Jerk += EncoderRate.encoderMoveValue;
-      else if (encoder_diffState == ENCODER_DIFF_CCW)
-        HMI_ValueStruct.Max_Jerk -= EncoderRate.encoderMoveValue;
-      else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Jerk)) {
         checkkey = MaxJerk;
         EncoderRate.enabled = false;
         if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
@@ -1581,13 +1527,7 @@ void HMI_MaxAccelerationXYZE() {
 void HMI_StepXYZE() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      HMI_ValueStruct.Max_Step += EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      HMI_ValueStruct.Max_Step -= EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Step)) {
       checkkey = Step;
       EncoderRate.enabled = false;
       if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
@@ -1842,7 +1782,7 @@ void HMI_SDCardUpdate() {
   if (DWIN_lcd_sd_status != card.isMounted()) {
     DWIN_lcd_sd_status = card.isMounted();
     // SERIAL_ECHOLNPAIR("HMI_SDCardUpdate: ", int(DWIN_lcd_sd_status));
-    if (card.isMounted()) {
+    if (DWIN_lcd_sd_status) {
       if (checkkey == SelectFile)
         Redraw_SD_List();
     }
@@ -1863,10 +1803,11 @@ void HMI_SDCardUpdate() {
   }
 }
 
-/* Start Frame */
-
-void HMI_StartFrame(const bool with_update) {
-  Goto_MainMenu();
+//
+// The status area is always on-screen, except during
+// full-screen modal dialogs. (TODO: Keep alive during dialogs)
+//
+void Draw_Status_Area(const bool with_update) {
 
   // Clear the bottom area of the screen
   DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, STATUS_Y, DWIN_WIDTH, DWIN_HEIGHT - 1);
@@ -1906,6 +1847,11 @@ void HMI_StartFrame(const bool with_update) {
   }
 }
 
+void HMI_StartFrame(const bool with_update) {
+  Goto_MainMenu();
+  Draw_Status_Area(with_update);
+}
+
 inline void Draw_Info_Menu() {
   Clear_Main_Window();
 
@@ -2233,12 +2179,10 @@ void HMI_PauseOrStop() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
-  if (encoder_diffState == ENCODER_DIFF_CW) {
+  if (encoder_diffState == ENCODER_DIFF_CW)
     Draw_Select_Highlight(false);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+  else if (encoder_diffState == ENCODER_DIFF_CCW)
     Draw_Select_Highlight(true);
-  }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (select_print.now == 1) { // pause window
       if (HMI_flag.select_flag) {

commit 4975e93350ee46aad323aa985f5c53e735aa26cf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 27 02:01:56 2020 -0500

    Tweak MMU beeps, misc. cleanup

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 131c96bef1..faf9720fa7 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -1099,7 +1099,7 @@ void Goto_PrintProcess() {
 
   // Copy into filebuf string before entry
   char * const name = card.longest_filename();
-  const int8_t npos = _MAX(0, DWIN_WIDTH - strlen(name) * MENU_CHR_W) / 2;
+  const int8_t npos = _MAX(0U, DWIN_WIDTH - strlen(name) * MENU_CHR_W) / 2;
   DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, npos, 60, name);
 
   DWIN_ICON_Show(ICON, ICON_PrintTime, 17, 193);
@@ -1787,7 +1787,7 @@ inline void Draw_SDItem(const uint16_t item, int16_t row=-1) {
   inline void Draw_SDItem_Shifted(int8_t &shift) {
     // Limit to the number of chars past the cutoff
     const size_t len = strlen(shift_name);
-    NOMORE(shift, _MAX((signed)len - MENU_CHAR_LIMIT, 0));
+    NOMORE(shift, _MAX(len - MENU_CHAR_LIMIT, 0U));
 
     // Shorten to the available space
     const size_t lastchar = _MIN((signed)len, shift + MENU_CHAR_LIMIT);

commit b5e4511de8c4b147d791e90bb102299e77ee4fb0
Author: enigmaquip <enigmaquip@users.noreply.github.com>
Date:   Sat Sep 19 09:19:45 2020 -0600

    Fix Creality DWIN Control menu icons (#19441)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index ca3a5cccff..131c96bef1 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -744,7 +744,7 @@ inline void Draw_Control_Menu() {
 
   // Draw icons and lines
   uint8_t i = 0;
-  #define _TEMP_ICON(N) do{ ++i; if (CVISI(i)) Draw_Menu_Line(CSCROL(i), ICON_SetEndTemp + (N) - 1); }while(0)
+  #define _TEMP_ICON(N) do{ ++i; if (CVISI(i)) Draw_Menu_Line(CSCROL(i), ICON_Temperature + (N) - 1); }while(0)
 
   _TEMP_ICON(CONTROL_CASE_TEMP);
   if (CVISI(i)) Draw_More_Icon(CSCROL(i));

commit 435e1535cc6f3b06d82a62cbb2697281f7cedbc8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 19 07:56:01 2020 -0500

    Change some dwin defines

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index d45511f5bc..ca3a5cccff 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -99,9 +99,9 @@
 
 #define USE_STRING_HEADINGS
 
-#define MENU_FONT   font8x16
-#define STAT_FONT   font10x20
-#define HEADER_FONT font10x20
+#define DWIN_FONT_MENU font8x16
+#define DWIN_FONT_STAT font10x20
+#define DWIN_FONT_HEAD font10x20
 
 #define MENU_CHAR_LIMIT  24
 #define STATUS_Y 360
@@ -229,19 +229,19 @@ void HMI_ToggleLanguage() {
 
 void DWIN_Draw_Signed_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, long value) {
   if (value < 0) {
-    DWIN_Draw_String(false, true, size, White, bColor, x - 6, y, F("-"));
-    DWIN_Draw_FloatValue(true, true, 0, size, White, bColor, iNum, fNum, x, y, -value);
+    DWIN_Draw_String(false, true, size, Color_White, bColor, x - 6, y, F("-"));
+    DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, -value);
   }
   else {
-    DWIN_Draw_String(false, true, size, White, bColor, x - 6, y, F(" "));
-    DWIN_Draw_FloatValue(true, true, 0, size, White, bColor, iNum, fNum, x, y, value);
+    DWIN_Draw_String(false, true, size, Color_White, bColor, x - 6, y, F(" "));
+    DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, value);
   }
 }
 
 void ICON_Print() {
   if (select_page.now == 0) {
     DWIN_ICON_Show(ICON, ICON_Print_1, 17, 130);
-    DWIN_Draw_Rectangle(0, White, 17, 130, 126, 229);
+    DWIN_Draw_Rectangle(0, Color_White, 17, 130, 126, 229);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 58, 201);
     else
@@ -259,7 +259,7 @@ void ICON_Print() {
 void ICON_Prepare() {
   if (select_page.now == 1) {
     DWIN_ICON_Show(ICON, ICON_Prepare_1, 145, 130);
-    DWIN_Draw_Rectangle(0, White, 145, 130, 254, 229);
+    DWIN_Draw_Rectangle(0, Color_White, 145, 130, 254, 229);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 31, 447, 58, 460, 186, 201);
     else
@@ -277,7 +277,7 @@ void ICON_Prepare() {
 void ICON_Control() {
   if (select_page.now == 2) {
     DWIN_ICON_Show(ICON, ICON_Control_1, 17, 246);
-    DWIN_Draw_Rectangle(0, White, 17, 246, 126, 345);
+    DWIN_Draw_Rectangle(0, Color_White, 17, 246, 126, 345);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 61, 447, 88, 460, 58, 318);
     else
@@ -295,7 +295,7 @@ void ICON_Control() {
 void ICON_StartInfo(bool show) {
   if (show) {
     DWIN_ICON_Show(ICON, ICON_Info_1, 145, 246);
-    DWIN_Draw_Rectangle(0, White, 145, 246, 254, 345);
+    DWIN_Draw_Rectangle(0, Color_White, 145, 246, 254, 345);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 91, 447, 118, 460, 186, 318);
     else
@@ -313,7 +313,7 @@ void ICON_StartInfo(bool show) {
 void ICON_Leveling(bool show) {
   if (show) {
     DWIN_ICON_Show(ICON, ICON_Leveling_1, 145, 246);
-    DWIN_Draw_Rectangle(0, White, 145, 246, 254, 345);
+    DWIN_Draw_Rectangle(0, Color_White, 145, 246, 254, 345);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 211, 447, 238, 460, 186, 318);
     else
@@ -331,7 +331,7 @@ void ICON_Leveling(bool show) {
 void ICON_Tune() {
   if (select_print.now == 0) {
     DWIN_ICON_Show(ICON, ICON_Setup_1, 8, 252);
-    DWIN_Draw_Rectangle(0, White, 8, 252, 87, 351);
+    DWIN_Draw_Rectangle(0, Color_White, 8, 252, 87, 351);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 121, 447, 148, 458, 34, 325);
     else
@@ -349,7 +349,7 @@ void ICON_Tune() {
 void ICON_Pause() {
   if (select_print.now == 1) {
     DWIN_ICON_Show(ICON, ICON_Pause_1, 96, 252);
-    DWIN_Draw_Rectangle(0, White, 96, 252, 175, 351);
+    DWIN_Draw_Rectangle(0, Color_White, 96, 252, 175, 351);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 181, 447, 208, 459, 124, 325);
     else
@@ -367,7 +367,7 @@ void ICON_Pause() {
 void ICON_Continue() {
   if (select_print.now == 1) {
     DWIN_ICON_Show(ICON, ICON_Continue_1, 96, 252);
-    DWIN_Draw_Rectangle(0, White, 96, 252, 175, 351);
+    DWIN_Draw_Rectangle(0, Color_White, 96, 252, 175, 351);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 124, 325);
     else
@@ -385,7 +385,7 @@ void ICON_Continue() {
 void ICON_Stop() {
   if (select_print.now == 2) {
     DWIN_ICON_Show(ICON, ICON_Stop_1, 184, 252);
-    DWIN_Draw_Rectangle(0, White, 184, 252, 263, 351);
+    DWIN_Draw_Rectangle(0, Color_White, 184, 252, 263, 351);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 151, 447, 178, 459, 210, 325);
     else
@@ -401,19 +401,19 @@ void ICON_Stop() {
 }
 
 inline void Clear_Title_Bar() {
-  DWIN_Draw_Rectangle(1, Background_blue, 0, 0, DWIN_WIDTH, 30);
+  DWIN_Draw_Rectangle(1, Color_Bg_Blue, 0, 0, DWIN_WIDTH, 30);
 }
 
 inline void Draw_Title(const char * const title) {
-  DWIN_Draw_String(false, false, HEADER_FONT, White, Background_blue, 14, 4, (char*)title);
+  DWIN_Draw_String(false, false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, (char*)title);
 }
 
 inline void Draw_Title(const __FlashStringHelper * title) {
-  DWIN_Draw_String(false, false, HEADER_FONT, White, Background_blue, 14, 4, (char*)title);
+  DWIN_Draw_String(false, false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, (char*)title);
 }
 
 inline void Clear_Menu_Area() {
-  DWIN_Draw_Rectangle(1, Background_black, 0, 31, DWIN_WIDTH, STATUS_Y);
+  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 31, DWIN_WIDTH, STATUS_Y);
 }
 
 inline void Clear_Main_Window() {
@@ -423,11 +423,11 @@ inline void Clear_Main_Window() {
 
 inline void Clear_Popup_Area() {
   Clear_Title_Bar();
-  DWIN_Draw_Rectangle(1, Background_black, 0, 31, DWIN_WIDTH, DWIN_HEIGHT);
+  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 31, DWIN_WIDTH, DWIN_HEIGHT);
 }
 
 void Draw_Popup_Bkgd_105() {
-  DWIN_Draw_Rectangle(1, Background_window, 14, 105, 258, 374);
+  DWIN_Draw_Rectangle(1, Color_Bg_Window, 14, 105, 258, 374);
 }
 
 inline void Draw_More_Icon(const uint8_t line) {
@@ -440,7 +440,7 @@ inline void Draw_Menu_Cursor(const uint8_t line) {
 }
 
 inline void Erase_Menu_Cursor(const uint8_t line) {
-  DWIN_Draw_Rectangle(1, Background_black, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
+  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
 }
 
 inline void Move_Highlight(const int16_t from, const uint16_t newline) {
@@ -454,7 +454,7 @@ inline void Add_Menu_Line() {
 }
 
 inline void Scroll_Menu(const uint8_t dir) {
-  DWIN_Frame_AreaMove(1, dir, MLINE, Background_black, 0, 31, DWIN_WIDTH, 349);
+  DWIN_Frame_AreaMove(1, dir, MLINE, Color_Bg_Black, 0, 31, DWIN_WIDTH, 349);
   switch (dir) {
     case DWIN_SCROLL_DOWN: Move_Highlight(-1, 0); break;
     case DWIN_SCROLL_UP:   Add_Menu_Line(); break;
@@ -470,11 +470,11 @@ inline void Draw_Menu_Icon(const uint8_t line, const uint8_t icon) {
 }
 
 inline void Erase_Menu_Text(const uint8_t line) {
-  DWIN_Draw_Rectangle(1, Background_black, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
+  DWIN_Draw_Rectangle(1, Color_Bg_Black, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
 }
 
 inline void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr) {
-  if (label) DWIN_Draw_String(false, false, font8x16, White, Background_black, LBLX, MBASE(line) - 1, (char*)label);
+  if (label) DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, (char*)label);
   if (icon) Draw_Menu_Icon(line, icon);
   DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
@@ -583,7 +583,7 @@ inline void Item_Prepare_Home(const uint8_t row) {
     if (HMI_flag.language_chinese) {
       #if HAS_BED_PROBE
         DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(row));
-        DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
       #else
         DWIN_Frame_AreaCopy(1, 43, 89, 98, 101, LBLX, MBASE(row));
       #endif
@@ -591,7 +591,7 @@ inline void Item_Prepare_Home(const uint8_t row) {
     else {
       #if HAS_BED_PROBE
         DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(row));    // "Z-Offset"
-        DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
       #else
         DWIN_Frame_AreaCopy(1, 1, 76, 106, 86, LBLX, MBASE(row));       // "..."
       #endif
@@ -638,11 +638,11 @@ inline void Item_Prepare_Home(const uint8_t row) {
 inline void Item_Prepare_Lang(const uint8_t row) {
   if (HMI_flag.language_chinese) {
     DWIN_Frame_AreaCopy(1, 239, 134, 266, 146, LBLX, MBASE(row));
-    DWIN_Draw_String(false, false, font8x16, White, Background_black, 226, MBASE(row), F("CN"));
+    DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, 226, MBASE(row), F("CN"));
   }
   else {
     DWIN_Frame_AreaCopy(1, 0, 194, 121, 207, LBLX, MBASE(row)); // "Language selection"
-    DWIN_Draw_String(false, false, font8x16, White, Background_black, 226, MBASE(row), F("EN"));
+    DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, 226, MBASE(row), F("EN"));
   }
   Draw_Menu_Icon(row, ICON_Language);
 }
@@ -716,14 +716,14 @@ inline void Draw_Control_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_CONTROL));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(CONTROL_CASE_TEMP), GET_TEXT_F(MSG_TEMPERATURE));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(CONTROL_CASE_MOVE), GET_TEXT_F(MSG_MOTION));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(CONTROL_CASE_TEMP), GET_TEXT_F(MSG_TEMPERATURE));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(CONTROL_CASE_MOVE), GET_TEXT_F(MSG_MOTION));
       #if ENABLED(EEPROM_SETTINGS)
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
       #endif
-      if (CVISI(CONTROL_CASE_INFO)) DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(CONTROL_CASE_INFO), F("Info"));
+      if (CVISI(CONTROL_CASE_INFO)) DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(CONTROL_CASE_INFO), F("Info"));
     #else
       DWIN_Frame_TitleCopy(1, 128, 2, 176, 12);                                           // "Control"
       DWIN_Frame_AreaCopy(1,  1, 89,  83, 101, LBLX, CLINE(CONTROL_CASE_TEMP));           // Temperature >
@@ -784,17 +784,17 @@ inline void Draw_Tune_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_TUNE));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TUNE_CASE_SPEED), GET_TEXT_F(MSG_SPEED));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TUNE_CASE_SPEED), GET_TEXT_F(MSG_SPEED));
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TUNE_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TUNE_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
       #endif
       #if HAS_HEATED_BED
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TUNE_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TUNE_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
       #endif
       #if HAS_FAN
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TUNE_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TUNE_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
       #endif
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TUNE_CASE_ZOFF), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TUNE_CASE_ZOFF), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
     #else
       DWIN_Frame_AreaCopy(1, 94, 2, 126, 12, 14, 9);
       DWIN_Frame_AreaCopy(1, 1, 179, 92, 190, LBLX, MBASE(TUNE_CASE_SPEED));      // Print speed
@@ -819,23 +819,23 @@ inline void Draw_Tune_Menu() {
   if (select_tune.now) Draw_Menu_Cursor(select_tune.now);
 
   Draw_Menu_Line(TUNE_CASE_SPEED, ICON_Speed);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_SPEED), feedrate_percentage);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_SPEED), feedrate_percentage);
 
   #if HAS_HOTEND
     Draw_Menu_Line(TUNE_CASE_TEMP, ICON_HotendTemp);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_TEMP), thermalManager.temp_hotend[0].target);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP), thermalManager.temp_hotend[0].target);
   #endif
   #if HAS_HEATED_BED
     Draw_Menu_Line(TUNE_CASE_BED, ICON_BedTemp);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_BED), thermalManager.temp_bed.target);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED), thermalManager.temp_bed.target);
   #endif
   #if HAS_FAN
     Draw_Menu_Line(TUNE_CASE_FAN, ICON_FanSpeed);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_FAN), thermalManager.fan_speed[0]);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_FAN), thermalManager.fan_speed[0]);
   #endif
   #if HAS_ZOFFSET_ITEM
     Draw_Menu_Line(TUNE_CASE_ZOFF, ICON_Zoffset);
-    DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(TUNE_CASE_ZOFF), BABY_Z_VAR * 100);
+    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(TUNE_CASE_ZOFF), BABY_Z_VAR * 100);
   #endif
 }
 
@@ -886,12 +886,12 @@ inline void Draw_Motion_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_MOTION));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(MOTION_CASE_RATE), F("Feedrate"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(MOTION_CASE_ACCEL), GET_TEXT_F(MSG_ACCELERATION));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(MOTION_CASE_RATE), F("Feedrate"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(MOTION_CASE_ACCEL), GET_TEXT_F(MSG_ACCELERATION));
       #if HAS_CLASSIC_JERK
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(MOTION_CASE_JERK), GET_TEXT_F(MSG_JERK));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(MOTION_CASE_JERK), GET_TEXT_F(MSG_JERK));
       #endif
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(MOTION_CASE_STEPS), GET_TEXT_F(MSG_STEPS_PER_MM));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(MOTION_CASE_STEPS), GET_TEXT_F(MSG_STEPS_PER_MM));
     #else
       DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);                                        // "Motion"
       draw_max_en(MBASE(MOTION_CASE_RATE)); draw_speed_en(27, MBASE(MOTION_CASE_RATE)); // "Max Speed"
@@ -932,8 +932,8 @@ inline void Draw_Motion_Menu() {
         DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
       }
       else {
-        DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, F("Nozzle or Bed temperature"));
-        DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 300, F("is too high"));
+        DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
+        DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, 92, 300, F("is too high"));
       }
     }
     else {
@@ -943,8 +943,8 @@ inline void Draw_Motion_Menu() {
         DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
       }
       else {
-        DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, F("Nozzle or Bed temperature"));
-        DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 300, F("is too low"));
+        DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
+        DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, 92, 300, F("is too low"));
       }
     }
   }
@@ -952,7 +952,7 @@ inline void Draw_Motion_Menu() {
 #endif
 
 inline void Draw_Popup_Bkgd_60() {
-  DWIN_Draw_Rectangle(1, Background_window, 14, 60, 258, 330);
+  DWIN_Draw_Rectangle(1, Color_Bg_Window, 14, 60, 258, 330);
 }
 
 #if HAS_HOTEND
@@ -967,7 +967,7 @@ inline void Draw_Popup_Bkgd_60() {
       DWIN_ICON_Show(ICON, ICON_Confirm_C, 86, 280);
     }
     else {
-      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 20, 235, F("Nozzle is too cold"));
+      DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, 20, 235, F("Nozzle is too cold"));
       DWIN_ICON_Show(ICON, ICON_Confirm_E, 86, 280);
     }
   }
@@ -984,9 +984,9 @@ void Popup_Window_Resume() {
     DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 307);
   }
   else {
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 14) / 2, 115, F("Continue Print"));
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 22) / 2, 192, F("It looks like the last"));
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 22) / 2, 212, F("file was interrupted."));
+    DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 14) / 2, 115, F("Continue Print"));
+    DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 192, F("It looks like the last"));
+    DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 212, F("file was interrupted."));
     DWIN_ICON_Show(ICON, ICON_Continue_E, 26, 307);
     DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 307);
   }
@@ -1002,8 +1002,8 @@ void Popup_Window_Home(const bool parking/*=false*/) {
     DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
   }
   else {
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * (parking ? 7 : 10)) / 2, 230, parking ? F("Parking") : F("Homing XYZ"));
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
+    DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * (parking ? 7 : 10)) / 2, 230, parking ? F("Parking") : F("Homing XYZ"));
+    DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
   }
 }
 
@@ -1018,8 +1018,8 @@ void Popup_Window_Home(const bool parking/*=false*/) {
       DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
     }
     else {
-      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 13) / 2, 230, GET_TEXT_F(MSG_BED_LEVELING));
-      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
+      DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 13) / 2, 230, GET_TEXT_F(MSG_BED_LEVELING));
+      DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
     }
   }
 
@@ -1027,8 +1027,8 @@ void Popup_Window_Home(const bool parking/*=false*/) {
 
 void Draw_Select_Highlight(const bool sel) {
   HMI_flag.select_flag = sel;
-  const uint16_t c1 = sel ? Select_Color : Background_window,
-                 c2 = sel ? Background_window : Select_Color;
+  const uint16_t c1 = sel ? Select_Color : Color_Bg_Window,
+                 c2 = sel ? Color_Bg_Window : Select_Color;
   DWIN_Draw_Rectangle(0, c1, 25, 279, 126, 318);
   DWIN_Draw_Rectangle(0, c1, 24, 278, 127, 319);
   DWIN_Draw_Rectangle(0, c2, 145, 279, 246, 318);
@@ -1046,8 +1046,8 @@ void Popup_window_PauseOrStop() {
     DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 280);
   }
   else {
-         if (select_print.now == 1) DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 11) / 2, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
-    else if (select_print.now == 2) DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 10) / 2, 150, GET_TEXT_F(MSG_STOP_PRINT));
+         if (select_print.now == 1) DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 11) / 2, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
+    else if (select_print.now == 2) DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 10) / 2, 150, GET_TEXT_F(MSG_STOP_PRINT));
     DWIN_ICON_Show(ICON, ICON_Confirm_E, 26, 280);
     DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 280);
   }
@@ -1070,21 +1070,21 @@ void Draw_Printing_Screen() {
 void Draw_Print_ProgressBar() {
   DWIN_ICON_Show(ICON, ICON_Bar, 15, 93);
   DWIN_Draw_Rectangle(1, BarFill_Color, 16 + Percentrecord * 240 / 100, 93, 256, 113);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Percent_Color, Background_black, 2, 117, 133, Percentrecord);
-  DWIN_Draw_String(false, false, font8x16, Percent_Color, Background_black, 133, 133, F("%"));
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Percent_Color, Color_Bg_Black, 2, 117, 133, Percentrecord);
+  DWIN_Draw_String(false, false, font8x16, Percent_Color, Color_Bg_Black, 133, 133, F("%"));
 }
 
 void Draw_Print_ProgressElapsed() {
   duration_t elapsed = print_job_timer.duration(); // print timer
-  DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 42, 212, elapsed.value / 3600);
-  DWIN_Draw_String(false, false, font8x16, White, Background_black, 58, 212, F(":"));
-  DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 66, 212, (elapsed.value % 3600) / 60);
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 42, 212, elapsed.value / 3600);
+  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, 58, 212, F(":"));
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 66, 212, (elapsed.value % 3600) / 60);
 }
 
 void Draw_Print_ProgressRemain() {
-  DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 176, 212, remain_time / 3600);
-  DWIN_Draw_String(false, false, font8x16, White, Background_black, 192, 212, F(":"));
-  DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 200, 212, (remain_time % 3600) / 60);
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 176, 212, remain_time / 3600);
+  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, 192, 212, F(":"));
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 200, 212, (remain_time % 3600) / 60);
 }
 
 void Goto_PrintProcess() {
@@ -1100,7 +1100,7 @@ void Goto_PrintProcess() {
   // Copy into filebuf string before entry
   char * const name = card.longest_filename();
   const int8_t npos = _MAX(0, DWIN_WIDTH - strlen(name) * MENU_CHR_W) / 2;
-  DWIN_Draw_String(false, false, font8x16, White, Background_black, npos, 60, name);
+  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, npos, 60, name);
 
   DWIN_ICON_Show(ICON, ICON_PrintTime, 17, 193);
   DWIN_ICON_Show(ICON, ICON_RemainTime, 150, 191);
@@ -1155,7 +1155,7 @@ void HMI_Move_X() {
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       checkkey = AxisMove;
       EncoderRate.enabled = false;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
         planner.synchronize();
@@ -1167,7 +1167,7 @@ void HMI_Move_X() {
     NOLESS(HMI_ValueStruct.Move_X_scale, (X_MIN_POS) * MINUNITMULT);
     NOMORE(HMI_ValueStruct.Move_X_scale, (X_MAX_POS) * MINUNITMULT);
     current_position.x = HMI_ValueStruct.Move_X_scale / 10;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
     DWIN_UpdateLCD();
   }
 }
@@ -1184,7 +1184,7 @@ void HMI_Move_Y() {
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       checkkey = AxisMove;
       EncoderRate.enabled = false;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
         planner.synchronize();
@@ -1196,7 +1196,7 @@ void HMI_Move_Y() {
     NOLESS(HMI_ValueStruct.Move_Y_scale, (Y_MIN_POS) * MINUNITMULT);
     NOMORE(HMI_ValueStruct.Move_Y_scale, (Y_MAX_POS) * MINUNITMULT);
     current_position.y = HMI_ValueStruct.Move_Y_scale / 10;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
     DWIN_UpdateLCD();
   }
 }
@@ -1213,7 +1213,7 @@ void HMI_Move_Z() {
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       checkkey = AxisMove;
       EncoderRate.enabled = false;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
         planner.synchronize();
@@ -1225,7 +1225,7 @@ void HMI_Move_Z() {
     NOLESS(HMI_ValueStruct.Move_Z_scale, Z_MIN_POS * MINUNITMULT);
     NOMORE(HMI_ValueStruct.Move_Z_scale, Z_MAX_POS * MINUNITMULT);
     current_position.z = HMI_ValueStruct.Move_Z_scale / 10;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
     DWIN_UpdateLCD();
   }
 }
@@ -1246,7 +1246,7 @@ void HMI_Move_Z() {
         checkkey = AxisMove;
         EncoderRate.enabled = false;
         last_E_scale = HMI_ValueStruct.Move_E_scale;
-        DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
         if (!planner.is_full()) {
           planner.synchronize(); // Wait for planner moves to finish!
           planner.buffer_line(current_position, MMM_TO_MMS(FEEDRATE_E), active_extruder);
@@ -1290,11 +1290,11 @@ void HMI_Move_Z() {
         #endif
         if (HMI_ValueStruct.show_mode == -4) {
           checkkey = Prepare;
-          DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
+          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
         }
         else {
           checkkey = Tune;
-          DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
+          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
         }
         DWIN_UpdateLCD();
         return;
@@ -1336,23 +1336,23 @@ void HMI_Move_Z() {
         EncoderRate.enabled = false;
         if (HMI_ValueStruct.show_mode == -1) { // temperature
           checkkey = TemperatureID;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
         }
         else if (HMI_ValueStruct.show_mode == -2) {
           checkkey = PLAPreheat;
           ui.material_preset[0].hotend_temp = HMI_ValueStruct.E_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(temp_line), ui.material_preset[0].hotend_temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), ui.material_preset[0].hotend_temp);
           return;
         }
         else if (HMI_ValueStruct.show_mode == -3) {
           checkkey = ABSPreheat;
           ui.material_preset[1].hotend_temp = HMI_ValueStruct.E_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(temp_line), ui.material_preset[1].hotend_temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), ui.material_preset[1].hotend_temp);
           return;
         }
         else { // tune
           checkkey = Tune;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
         }
         thermalManager.setTargetHotend(HMI_ValueStruct.E_Temp, 0);
         return;
@@ -1361,7 +1361,7 @@ void HMI_Move_Z() {
       NOMORE(HMI_ValueStruct.E_Temp, MAX_E_TEMP);
       NOLESS(HMI_ValueStruct.E_Temp, MIN_E_TEMP);
       // E_Temp value
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
     }
   }
 
@@ -1389,23 +1389,23 @@ void HMI_Move_Z() {
         EncoderRate.enabled = false;
         if (HMI_ValueStruct.show_mode == -1) {
           checkkey = TemperatureID;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
         }
         else if (HMI_ValueStruct.show_mode == -2) {
           checkkey = PLAPreheat;
           ui.material_preset[0].bed_temp = HMI_ValueStruct.Bed_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(bed_line), ui.material_preset[0].bed_temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), ui.material_preset[0].bed_temp);
           return;
         }
         else if (HMI_ValueStruct.show_mode == -3) {
           checkkey = ABSPreheat;
           ui.material_preset[1].bed_temp = HMI_ValueStruct.Bed_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(bed_line), ui.material_preset[1].bed_temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), ui.material_preset[1].bed_temp);
           return;
         }
         else {
           checkkey = Tune;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
         }
         thermalManager.setTargetBed(HMI_ValueStruct.Bed_Temp);
         return;
@@ -1414,7 +1414,7 @@ void HMI_Move_Z() {
       NOMORE(HMI_ValueStruct.Bed_Temp, BED_MAX_TARGET);
       NOLESS(HMI_ValueStruct.Bed_Temp, MIN_BED_TEMP);
       // Bed_Temp value
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
     }
   }
 
@@ -1443,23 +1443,23 @@ void HMI_Move_Z() {
         EncoderRate.enabled = false;
         if (HMI_ValueStruct.show_mode == -1) {
           checkkey = TemperatureID;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
         }
         else if (HMI_ValueStruct.show_mode == -2) {
           checkkey = PLAPreheat;
           ui.material_preset[0].fan_speed = HMI_ValueStruct.Fan_speed;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(fan_line), ui.material_preset[0].fan_speed);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), ui.material_preset[0].fan_speed);
           return;
         }
         else if (HMI_ValueStruct.show_mode == -3) {
           checkkey = ABSPreheat;
           ui.material_preset[1].fan_speed = HMI_ValueStruct.Fan_speed;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(fan_line), ui.material_preset[1].fan_speed);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), ui.material_preset[1].fan_speed);
           return;
         }
         else {
           checkkey = Tune;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
         }
         thermalManager.set_fan_speed(0, HMI_ValueStruct.Fan_speed);
         return;
@@ -1468,7 +1468,7 @@ void HMI_Move_Z() {
       NOMORE(HMI_ValueStruct.Fan_speed, FANON);
       NOLESS(HMI_ValueStruct.Fan_speed, FANOFF);
       // Fan_speed value
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
     }
   }
 
@@ -1487,14 +1487,14 @@ void HMI_PrintSpeed() {
       checkkey = Tune;
       EncoderRate.enabled = false;
       feedrate_percentage = HMI_ValueStruct.print_speed;
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
       return;
     }
     // print_speed limit
     NOMORE(HMI_ValueStruct.print_speed, MAX_PRINT_SPEED);
     NOLESS(HMI_ValueStruct.print_speed, MIN_PRINT_SPEED);
     // print_speed value
-    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
   }
 }
 
@@ -1512,7 +1512,7 @@ void HMI_MaxFeedspeedXYZE() {
       EncoderRate.enabled = false;
       if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, E_AXIS))
         planner.set_max_feedrate(HMI_flag.feedspeed_axis, HMI_ValueStruct.Max_Feedspeed);
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
       return;
     }
     // MaxFeedspeed limit
@@ -1520,7 +1520,7 @@ void HMI_MaxFeedspeedXYZE() {
       NOMORE(HMI_ValueStruct.Max_Feedspeed, default_max_feedrate[HMI_flag.feedspeed_axis] * 2);
     if (HMI_ValueStruct.Max_Feedspeed < MIN_MAXFEEDSPEED) HMI_ValueStruct.Max_Feedspeed = MIN_MAXFEEDSPEED;
     // MaxFeedspeed value
-    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
   }
 }
 
@@ -1538,7 +1538,7 @@ void HMI_MaxAccelerationXYZE() {
       #if HAS_HOTEND
         else if (HMI_flag.acc_axis == E_AXIS) planner.set_max_acceleration(E_AXIS, HMI_ValueStruct.Max_Acceleration);
       #endif
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
       return;
     }
     // MaxAcceleration limit
@@ -1546,7 +1546,7 @@ void HMI_MaxAccelerationXYZE() {
       NOMORE(HMI_ValueStruct.Max_Acceleration, default_max_acceleration[HMI_flag.acc_axis] * 2);
     if (HMI_ValueStruct.Max_Acceleration < MIN_MAXACCELERATION) HMI_ValueStruct.Max_Acceleration = MIN_MAXACCELERATION;
     // MaxAcceleration value
-    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
   }
 }
 
@@ -1564,7 +1564,7 @@ void HMI_MaxAccelerationXYZE() {
         EncoderRate.enabled = false;
         if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
           planner.set_max_jerk(HMI_flag.step_axis, HMI_ValueStruct.Max_Jerk / 10);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
         return;
       }
       // MaxJerk limit
@@ -1572,7 +1572,7 @@ void HMI_MaxAccelerationXYZE() {
         NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[HMI_flag.jerk_axis] * 2 * MINUNITMULT);
       NOLESS(HMI_ValueStruct.Max_Jerk, (MIN_MAXJERK) * MINUNITMULT);
       // MaxJerk value
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
     }
   }
 
@@ -1592,7 +1592,7 @@ void HMI_StepXYZE() {
       EncoderRate.enabled = false;
       if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
         planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step / 10;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
       return;
     }
     // Step limit
@@ -1600,7 +1600,7 @@ void HMI_StepXYZE() {
       NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[HMI_flag.step_axis] * 2 * MINUNITMULT);
     NOLESS(HMI_ValueStruct.Max_Step, MIN_STEP);
     // Step value
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
   }
 }
 
@@ -1619,15 +1619,15 @@ void update_variable() {
   if (checkkey == Tune) {
     #if HAS_HOTEND
       if (last_temp_hotend_target != thermalManager.temp_hotend[0].target)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), thermalManager.temp_hotend[0].target);
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), thermalManager.temp_hotend[0].target);
     #endif
     #if HAS_HEATED_BED
       if (last_temp_bed_target != thermalManager.temp_bed.target)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), thermalManager.temp_bed.target);
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), thermalManager.temp_bed.target);
     #endif
     #if HAS_FAN
       if (last_fan_speed != thermalManager.fan_speed[0]) {
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), thermalManager.fan_speed[0]);
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), thermalManager.fan_speed[0]);
         last_fan_speed = thermalManager.fan_speed[0];
       }
     #endif
@@ -1637,15 +1637,15 @@ void update_variable() {
   if (checkkey == TemperatureID) {
     #if HAS_HOTEND
       if (last_temp_hotend_target != thermalManager.temp_hotend[0].target)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TEMP_CASE_TEMP), thermalManager.temp_hotend[0].target);
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_TEMP), thermalManager.temp_hotend[0].target);
     #endif
     #if HAS_HEATED_BED
       if (last_temp_bed_target != thermalManager.temp_bed.target)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TEMP_CASE_BED), thermalManager.temp_bed.target);
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_BED), thermalManager.temp_bed.target);
     #endif
     #if HAS_FAN
       if (last_fan_speed != thermalManager.fan_speed[0]) {
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TEMP_CASE_FAN), thermalManager.fan_speed[0]);
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_FAN), thermalManager.fan_speed[0]);
         last_fan_speed = thermalManager.fan_speed[0];
       }
     #endif
@@ -1654,32 +1654,32 @@ void update_variable() {
   /* Bottom temperature update */
   #if HAS_HOTEND
     if (last_temp_hotend_current != thermalManager.temp_hotend[0].celsius) {
-      DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
       last_temp_hotend_current = thermalManager.temp_hotend[0].celsius;
     }
     if (last_temp_hotend_target != thermalManager.temp_hotend[0].target) {
-      DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
       last_temp_hotend_target = thermalManager.temp_hotend[0].target;
     }
   #endif
   #if HAS_HEATED_BED
     if (last_temp_bed_current != thermalManager.temp_bed.celsius) {
-      DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178, 382, thermalManager.temp_bed.celsius);
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178, 382, thermalManager.temp_bed.celsius);
       last_temp_bed_current = thermalManager.temp_bed.celsius;
     }
     if (last_temp_bed_target != thermalManager.temp_bed.target) {
-      DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
       last_temp_bed_target = thermalManager.temp_bed.target;
     }
   #endif
   static uint16_t last_speed = 0;
   if (last_speed != feedrate_percentage) {
-    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
     last_speed = feedrate_percentage;
   }
   #if HAS_ZOFFSET_ITEM
     if (last_zoffset != BABY_Z_VAR) {
-      DWIN_Draw_Signed_Float(STAT_FONT, Background_black, 2, 2, 178 + STAT_CHR_W, 429, BABY_Z_VAR * 100);
+      DWIN_Draw_Signed_Float(DWIN_FONT_STAT, Color_Bg_Black, 2, 2, 178 + STAT_CHR_W, 429, BABY_Z_VAR * 100);
       last_zoffset = BABY_Z_VAR;
     }
   #endif
@@ -1869,16 +1869,16 @@ void HMI_StartFrame(const bool with_update) {
   Goto_MainMenu();
 
   // Clear the bottom area of the screen
-  DWIN_Draw_Rectangle(1, Background_black, 0, STATUS_Y, DWIN_WIDTH, DWIN_HEIGHT - 1);
+  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, STATUS_Y, DWIN_WIDTH, DWIN_HEIGHT - 1);
 
   //
   // Status Area
   //
   #if HAS_HOTEND
     DWIN_ICON_Show(ICON, ICON_HotendTemp, 13, 381);
-    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
-    DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + 3 * STAT_CHR_W + 5, 383, F("/"));
-    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
+    DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 33 + 3 * STAT_CHR_W + 5, 383, F("/"));
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
   #endif
   #if HOTENDS > 1
     // DWIN_ICON_Show(ICON,ICON_HotendTemp, 13, 381);
@@ -1886,18 +1886,18 @@ void HMI_StartFrame(const bool with_update) {
 
   #if HAS_HEATED_BED
     DWIN_ICON_Show(ICON, ICON_BedTemp, 158, 381);
-    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178, 382, thermalManager.temp_bed.celsius);
-    DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 178 + 3 * STAT_CHR_W + 5, 383, F("/"));
-    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178, 382, thermalManager.temp_bed.celsius);
+    DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 178 + 3 * STAT_CHR_W + 5, 383, F("/"));
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
   #endif
 
   DWIN_ICON_Show(ICON, ICON_Speed, 13, 429);
-  DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
-  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + 5 * STAT_CHR_W + 2, 429, F("%"));
+  DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
+  DWIN_Draw_String(false, false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 33 + 5 * STAT_CHR_W + 2, 429, F("%"));
 
   #if HAS_ZOFFSET_ITEM
     DWIN_ICON_Show(ICON, ICON_Zoffset, 158, 428);
-    DWIN_Draw_Signed_Float(STAT_FONT, Background_black, 2, 2, 178, 429, BABY_Z_VAR * 100);
+    DWIN_Draw_Signed_Float(DWIN_FONT_STAT, Color_Bg_Black, 2, 2, 178, 429, BABY_Z_VAR * 100);
   #endif
 
   if (with_update) {
@@ -1909,8 +1909,8 @@ void HMI_StartFrame(const bool with_update) {
 inline void Draw_Info_Menu() {
   Clear_Main_Window();
 
-  DWIN_Draw_String(false, false, font8x16, White, Background_black, (DWIN_WIDTH - strlen(MACHINE_SIZE) * MENU_CHR_W) / 2, 122, (char*)MACHINE_SIZE);
-  DWIN_Draw_String(false, false, font8x16, White, Background_black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, (char*)SHORT_BUILD_VERSION);
+  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(MACHINE_SIZE) * MENU_CHR_W) / 2, 122, (char*)MACHINE_SIZE);
+  DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, (char*)SHORT_BUILD_VERSION);
 
   if (HMI_flag.language_chinese) {
     DWIN_Frame_TitleCopy(1, 30, 17, 57, 29); // "Info"
@@ -1918,7 +1918,7 @@ inline void Draw_Info_Menu() {
     DWIN_Frame_AreaCopy(1, 197, 149, 252, 161, 108, 102);
     DWIN_Frame_AreaCopy(1, 1, 164, 56, 176, 108, 175);
     DWIN_Frame_AreaCopy(1, 58, 164, 113, 176, 105, 248);
-    DWIN_Draw_String(false, false, font8x16, White, Background_black, (DWIN_WIDTH - strlen(CORP_WEBSITE_C) * MENU_CHR_W) / 2, 268, (char*)CORP_WEBSITE_C);
+    DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE_C) * MENU_CHR_W) / 2, 268, (char*)CORP_WEBSITE_C);
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -1930,7 +1930,7 @@ inline void Draw_Info_Menu() {
     DWIN_Frame_AreaCopy(1, 120, 150, 146, 161, 124, 102);
     DWIN_Frame_AreaCopy(1, 146, 151, 254, 161, 82, 175);
     DWIN_Frame_AreaCopy(1, 0, 165, 94, 175, 89, 248);
-    DWIN_Draw_String(false, false, font8x16, White, Background_black, (DWIN_WIDTH - strlen(CORP_WEBSITE_E) * MENU_CHR_W) / 2, 268, (char*)CORP_WEBSITE_E);
+    DWIN_Draw_String(false, false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE_E) * MENU_CHR_W) / 2, 268, (char*)CORP_WEBSITE_E);
   }
 
   Draw_Back_First();
@@ -2393,13 +2393,13 @@ void HMI_Prepare() {
         select_axis.reset();
         Draw_Move_Menu();
 
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), current_position.x * MINUNITMULT);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), current_position.y * MINUNITMULT);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), current_position.z * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), current_position.x * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), current_position.y * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(3), current_position.z * MINUNITMULT);
         #if HAS_HOTEND
           queue.inject_P(PSTR("G92 E0"));
           current_position.e = HMI_ValueStruct.Move_E_scale = 0;
-          DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), 0);
+          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), 0);
         #endif
         break;
       case PREPARE_CASE_DISA: // Disable steppers
@@ -2479,17 +2479,17 @@ void Draw_Temperature_Menu() {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_TEMPERATURE));
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TEMP_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TEMP_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
       #endif
       #if HAS_HEATED_BED
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TEMP_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TEMP_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
       #endif
       #if HAS_FAN
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TEMP_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TEMP_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
       #endif
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TEMP_CASE_PLA), F("PLA Preheat Settings"));
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TEMP_CASE_ABS), F("ABS Preheat Settings"));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TEMP_CASE_PLA), F("PLA Preheat Settings"));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(TEMP_CASE_ABS), F("ABS Preheat Settings"));
       #endif
     #else
       DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                       // "Temperature"
@@ -2523,15 +2523,15 @@ void Draw_Temperature_Menu() {
   #define _TMENU_ICON(N) Draw_Menu_Line(++i, ICON_SetEndTemp + (N) - 1)
   #if HAS_HOTEND
     _TMENU_ICON(TEMP_CASE_TEMP);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), thermalManager.temp_hotend[0].target);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.temp_hotend[0].target);
   #endif
   #if HAS_HEATED_BED
     _TMENU_ICON(TEMP_CASE_BED);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), thermalManager.temp_bed.target);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.temp_bed.target);
   #endif
   #if HAS_FAN
     _TMENU_ICON(TEMP_CASE_FAN);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), thermalManager.fan_speed[0]);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.fan_speed[0]);
   #endif
   #if HAS_HOTEND
     // PLA/ABS items have submenus
@@ -2651,10 +2651,10 @@ void HMI_AxisMove() {
         HMI_flag.ETempTooLow_flag = false;
         current_position.e = HMI_ValueStruct.Move_E_scale = 0;
         Draw_Move_Menu();
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
-        DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), 0);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), 0);
         DWIN_UpdateLCD();
       }
       return;
@@ -2679,19 +2679,19 @@ void HMI_AxisMove() {
       case 1: // X axis move
         checkkey = Move_X;
         HMI_ValueStruct.Move_X_scale = current_position.x * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
         EncoderRate.enabled = true;
         break;
       case 2: // Y axis move
         checkkey = Move_Y;
         HMI_ValueStruct.Move_Y_scale = current_position.y * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
         EncoderRate.enabled = true;
         break;
       case 3: // Z axis move
         checkkey = Move_Z;
         HMI_ValueStruct.Move_Z_scale = current_position.z * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
         EncoderRate.enabled = true;
         break;
         #if HAS_HOTEND
@@ -2740,7 +2740,7 @@ void HMI_Temperature() {
         case TEMP_CASE_TEMP: // Nozzle temperature
           checkkey = ETemp;
           HMI_ValueStruct.E_Temp = thermalManager.temp_hotend[0].target;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1), thermalManager.temp_hotend[0].target);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(1), thermalManager.temp_hotend[0].target);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -2748,7 +2748,7 @@ void HMI_Temperature() {
         case TEMP_CASE_BED: // Bed temperature
           checkkey = BedTemp;
           HMI_ValueStruct.Bed_Temp = thermalManager.temp_bed.target;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2), thermalManager.temp_bed.target);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(2), thermalManager.temp_bed.target);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -2756,7 +2756,7 @@ void HMI_Temperature() {
         case TEMP_CASE_FAN: // Fan speed
           checkkey = FanSpeed;
           HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3), thermalManager.fan_speed[0]);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(3), thermalManager.fan_speed[0]);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -2787,15 +2787,15 @@ void HMI_Temperature() {
           else {
             #ifdef USE_STRING_HEADINGS
               Draw_Title("PLA Settings"); // TODO: GET_TEXT_F
-              DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
+              DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
               #if HAS_HEATED_BED
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
+                DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
               #endif
               #if HAS_FAN
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+                DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+                DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
               #endif
             #else
               DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                             // "PLA Settings"
@@ -2821,14 +2821,14 @@ void HMI_Temperature() {
 
           uint8_t i = 0;
           Draw_Menu_Line(++i, ICON_SetEndTemp);
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), ui.material_preset[0].hotend_temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[0].hotend_temp);
           #if HAS_HEATED_BED
             Draw_Menu_Line(++i, ICON_SetBedTemp);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), ui.material_preset[0].bed_temp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[0].bed_temp);
           #endif
           #if HAS_FAN
             Draw_Menu_Line(++i, ICON_FanSpeed);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), ui.material_preset[0].fan_speed);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[0].fan_speed);
           #endif
           #if ENABLED(EEPROM_SETTINGS)
             Draw_Menu_Line(++i, ICON_WriteEEPROM);
@@ -2863,15 +2863,15 @@ void HMI_Temperature() {
           else {
             #ifdef USE_STRING_HEADINGS
               Draw_Title("ABS Settings"); // TODO: GET_TEXT_F
-              DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
+              DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
               #if HAS_HEATED_BED
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
+                DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
               #endif
               #if HAS_FAN
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+                DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+                DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
               #endif
             #else
               DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                                  // "ABS Settings"
@@ -2898,14 +2898,14 @@ void HMI_Temperature() {
 
           uint8_t i = 0;
           Draw_Menu_Line(++i, ICON_SetEndTemp);
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), ui.material_preset[1].hotend_temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[1].hotend_temp);
           #if HAS_HEATED_BED
             Draw_Menu_Line(++i, ICON_SetBedTemp);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), ui.material_preset[1].bed_temp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[1].bed_temp);
           #endif
           #if HAS_FAN
             Draw_Menu_Line(++i, ICON_FanSpeed);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), ui.material_preset[1].fan_speed);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[1].fan_speed);
           #endif
           #if ENABLED(EEPROM_SETTINGS)
             Draw_Menu_Line(++i, ICON_WriteEEPROM);
@@ -2943,11 +2943,11 @@ inline void Draw_Max_Speed_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title("Max Speed (mm/s)"); // TODO: GET_TEXT_F
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Max Feedrate X"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), F("Max Feedrate Y"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), F("Max Feedrate Z"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(1), F("Max Feedrate X"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(2), F("Max Feedrate Y"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(3), F("Max Feedrate Z"));
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), F("Max Feedrate E"));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(4), F("Max Feedrate E"));
       #endif
     #else
       DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Max Speed (mm/s)"
@@ -2973,11 +2973,11 @@ inline void Draw_Max_Speed_Menu() {
 
   Draw_Back_First();
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedX + i);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(1), planner.settings.max_feedrate_mm_s[X_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(2), planner.settings.max_feedrate_mm_s[Y_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(3), planner.settings.max_feedrate_mm_s[Z_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(1), planner.settings.max_feedrate_mm_s[X_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(2), planner.settings.max_feedrate_mm_s[Y_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(3), planner.settings.max_feedrate_mm_s[Z_AXIS]);
   #if HAS_HOTEND
-    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(4), planner.settings.max_feedrate_mm_s[E_AXIS]);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(4), planner.settings.max_feedrate_mm_s[E_AXIS]);
   #endif
 }
 
@@ -3005,11 +3005,11 @@ inline void Draw_Max_Accel_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_ACCELERATION));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Max Accel X"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), F("Max Accel Y"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), F("Max Accel Z"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(1), F("Max Accel X"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(2), F("Max Accel Y"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(3), F("Max Accel Z"));
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), F("Max Accel E"));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(4), F("Max Accel E"));
       #endif
     #else
       DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);          // "Acceleration"
@@ -3024,11 +3024,11 @@ inline void Draw_Max_Accel_Menu() {
 
   Draw_Back_First();
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxAccX + i);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(1), planner.settings.max_acceleration_mm_per_s2[X_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(2), planner.settings.max_acceleration_mm_per_s2[Y_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(3), planner.settings.max_acceleration_mm_per_s2[Z_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(1), planner.settings.max_acceleration_mm_per_s2[X_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(2), planner.settings.max_acceleration_mm_per_s2[Y_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(3), planner.settings.max_acceleration_mm_per_s2[Z_AXIS]);
   #if HAS_HOTEND
-    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(4), planner.settings.max_acceleration_mm_per_s2[E_AXIS]);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(4), planner.settings.max_acceleration_mm_per_s2[E_AXIS]);
   #endif
 }
 
@@ -3060,11 +3060,11 @@ inline void Draw_Max_Jerk_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_JERK));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Max Jerk X"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), F("Max Jerk Y"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), F("Max Jerk Z"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(1), F("Max Jerk X"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(2), F("Max Jerk Y"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(3), F("Max Jerk Z"));
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), F("Max Jerk E"));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(4), F("Max Jerk E"));
       #endif
     #else
       DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Jerk"
@@ -3094,11 +3094,11 @@ inline void Draw_Max_Jerk_Menu() {
 
   Draw_Back_First();
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
   #if HAS_HOTEND
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
   #endif
 }
 
@@ -3122,11 +3122,11 @@ inline void Draw_Steps_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_STEPS_PER_MM));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Steps/mm X"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), F("Steps/mm Y"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), F("Steps/mm Z"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(1), F("Steps/mm X"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(2), F("Steps/mm Y"));
+      DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(3), F("Steps/mm Z"));
       #if HAS_HOTEND
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), F("Steps/mm E"));
+        DWIN_Draw_String(false, true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(4), F("Steps/mm E"));
       #endif
     #else
       DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Steps per mm"
@@ -3141,11 +3141,11 @@ inline void Draw_Steps_Menu() {
 
   Draw_Back_First();
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_StepX + i);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(1), planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(2), planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(3), planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(1), planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(2), planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(3), planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
   #if HAS_HOTEND
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(4), planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(4), planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
   #endif
 }
 
@@ -3253,14 +3253,14 @@ void HMI_Tune() {
       case TUNE_CASE_SPEED: // Print speed
         checkkey = PrintSpeed;
         HMI_ValueStruct.print_speed = feedrate_percentage;
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(TUNE_CASE_SPEED + MROWS - index_tune), feedrate_percentage);
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_SPEED + MROWS - index_tune), feedrate_percentage);
         EncoderRate.enabled = true;
         break;
       #if HAS_HOTEND
         case TUNE_CASE_TEMP: // Nozzle temp
           checkkey = ETemp;
           HMI_ValueStruct.E_Temp = thermalManager.temp_hotend[0].target;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), thermalManager.temp_hotend[0].target);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), thermalManager.temp_hotend[0].target);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -3268,7 +3268,7 @@ void HMI_Tune() {
         case TUNE_CASE_BED: // Bed temp
           checkkey = BedTemp;
           HMI_ValueStruct.Bed_Temp = thermalManager.temp_bed.target;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), thermalManager.temp_bed.target);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), thermalManager.temp_bed.target);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -3276,7 +3276,7 @@ void HMI_Tune() {
         case TUNE_CASE_FAN: // Fan speed
           checkkey = FanSpeed;
           HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), thermalManager.fan_speed[0]);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), thermalManager.fan_speed[0]);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -3326,7 +3326,7 @@ void HMI_Tune() {
           case PREHEAT_CASE_TEMP: // Nozzle temperature
             checkkey = ETemp;
             HMI_ValueStruct.E_Temp = ui.material_preset[0].hotend_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_TEMP), ui.material_preset[0].hotend_temp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_TEMP), ui.material_preset[0].hotend_temp);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3334,7 +3334,7 @@ void HMI_Tune() {
           case PREHEAT_CASE_BED: // Bed temperature
             checkkey = BedTemp;
             HMI_ValueStruct.Bed_Temp = ui.material_preset[0].bed_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_BED), ui.material_preset[0].bed_temp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_BED), ui.material_preset[0].bed_temp);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3342,7 +3342,7 @@ void HMI_Tune() {
           case PREHEAT_CASE_FAN: // Fan speed
             checkkey = FanSpeed;
             HMI_ValueStruct.Fan_speed = ui.material_preset[0].fan_speed;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_FAN), ui.material_preset[0].fan_speed);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_FAN), ui.material_preset[0].fan_speed);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3382,7 +3382,7 @@ void HMI_Tune() {
           case PREHEAT_CASE_TEMP: // Set nozzle temperature
             checkkey = ETemp;
             HMI_ValueStruct.E_Temp = ui.material_preset[1].hotend_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_TEMP), ui.material_preset[1].hotend_temp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_TEMP), ui.material_preset[1].hotend_temp);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3390,7 +3390,7 @@ void HMI_Tune() {
           case PREHEAT_CASE_BED: // Set bed temperature
             checkkey = BedTemp;
             HMI_ValueStruct.Bed_Temp = ui.material_preset[1].bed_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_BED), ui.material_preset[1].bed_temp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_BED), ui.material_preset[1].bed_temp);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3398,7 +3398,7 @@ void HMI_Tune() {
           case PREHEAT_CASE_FAN: // Set fan speed
             checkkey = FanSpeed;
             HMI_ValueStruct.Fan_speed = ui.material_preset[1].fan_speed;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_FAN), ui.material_preset[1].fan_speed);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_FAN), ui.material_preset[1].fan_speed);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3433,7 +3433,7 @@ void HMI_MaxSpeed() {
       checkkey = MaxSpeed_value;
       HMI_flag.feedspeed_axis = AxisEnum(select_speed.now - 1);
       HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[HMI_flag.feedspeed_axis];
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
       EncoderRate.enabled = true;
     }
     else { // Back
@@ -3462,7 +3462,7 @@ void HMI_MaxAcceleration() {
       checkkey = MaxAcceleration_value;
       HMI_flag.acc_axis = AxisEnum(select_acc.now - 1);
       HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[HMI_flag.acc_axis];
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
       EncoderRate.enabled = true;
     }
     else { // Back
@@ -3492,7 +3492,7 @@ void HMI_MaxAcceleration() {
         checkkey = MaxJerk_value;
         HMI_flag.jerk_axis = AxisEnum(select_jerk.now - 1);
         HMI_ValueStruct.Max_Jerk = planner.max_jerk[HMI_flag.jerk_axis] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
         EncoderRate.enabled = true;
       }
       else { // Back
@@ -3522,7 +3522,7 @@ void HMI_Step() {
       checkkey = Step_value;
       HMI_flag.step_axis = AxisEnum(select_step.now - 1);
       HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[HMI_flag.step_axis] * MINUNITMULT;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
       EncoderRate.enabled = true;
     }
     else { // Back
@@ -3539,7 +3539,7 @@ void HMI_Init() {
 
   for (uint16_t t = 0; t <= 100; t += 2) {
     DWIN_ICON_Show(ICON, ICON_Bar, 15, 260);
-    DWIN_Draw_Rectangle(1, Background_black, 15 + t * 242 / 100, 260, 257, 280);
+    DWIN_Draw_Rectangle(1, Color_Bg_Black, 15 + t * 242 / 100, 260, 257, 280);
     DWIN_UpdateLCD();
     delay(20);
   }
@@ -3577,7 +3577,7 @@ void EachMomentUpdate() {
       Draw_Print_ProgressBar();
 
       // show print done confirm
-      DWIN_Draw_Rectangle(1, Background_black, 0, 250, DWIN_WIDTH - 1, STATUS_Y);
+      DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 250, DWIN_WIDTH - 1, STATUS_Y);
       DWIN_ICON_Show(ICON, HMI_flag.language_chinese ? ICON_Confirm_C : ICON_Confirm_E, 86, 283);
     }
     else if (HMI_flag.pause_flag != printingIsPaused()) {
@@ -3654,7 +3654,7 @@ void EachMomentUpdate() {
       if (!recovery.valid()) return recovery.purge();
 
       auto draw_first_option = [](const bool sel) {
-        const uint16_t c1 = sel ? Background_window : Select_Color;
+        const uint16_t c1 = sel ? Color_Bg_Window : Select_Color;
         DWIN_Draw_Rectangle(0, c1, 25, 306, 126, 345);
         DWIN_Draw_Rectangle(0, c1, 24, 305, 127, 346);
       };
@@ -3662,7 +3662,7 @@ void EachMomentUpdate() {
       auto update_selection = [&](const bool sel) {
         HMI_flag.select_flag = sel;
         draw_first_option(sel);
-        const uint16_t c2 = sel ? Select_Color : Background_window;
+        const uint16_t c2 = sel ? Select_Color : Color_Bg_Window;
         DWIN_Draw_Rectangle(0, c2, 145, 306, 246, 345);
         DWIN_Draw_Rectangle(0, c2, 144, 305, 247, 346);
       };
@@ -3679,7 +3679,7 @@ void EachMomentUpdate() {
           draw_first_option(false);
           char * const name = card.longest_filename();
           const int8_t npos = _MAX(0, DWIN_WIDTH - strlen(name) * (MENU_CHR_W)) / 2;
-          DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, npos, 252, name);
+          DWIN_Draw_String(false, true, font8x16, Popup_Text_Color, Color_Bg_Window, npos, 252, name);
           DWIN_UpdateLCD();
           break;
         }

commit 073b7f1e3a77f6d00d58bb144fe3aa96ce3770f3
Author: cosmoderp <36945803+cosmoderp@users.noreply.github.com>
Date:   Thu Sep 17 06:35:04 2020 -0400

    E3 V2 DWIN: Z-Offset, cleanup, versatility (#19384)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index c942929805..d45511f5bc 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -28,15 +28,19 @@
 
 #if ENABLED(DWIN_CREALITY_LCD)
 
+#include "dwin.h"
+
 #if ANY(AUTO_BED_LEVELING_BILINEAR, AUTO_BED_LEVELING_LINEAR, AUTO_BED_LEVELING_3POINT) && DISABLED(PROBE_MANUALLY)
   #define HAS_ONESTEP_LEVELING 1
 #endif
 
-#if HAS_HOTEND || HAS_HEATED_BED || HAS_FAN
-  #define HAS_COOLDOWN 1
+#if ANY(BABYSTEPPING, HAS_BED_PROBE, HAS_WORKSPACE_OFFSET)
+  #define HAS_ZOFFSET_ITEM 1
 #endif
 
-#include "dwin.h"
+#if !HAS_BED_PROBE && ENABLED(BABYSTEPPING)
+  #define JUST_BABYSTEP 1
+#endif
 
 #include <WString.h>
 #include <stdio.h>
@@ -52,8 +56,6 @@
 #include "../../../core/macros.h"
 #include "../../../gcode/queue.h"
 
-#include "../../../feature/babystep.h"
-
 #include "../../../module/temperature.h"
 #include "../../../module/printcounter.h"
 #include "../../../module/motion.h"
@@ -75,6 +77,10 @@
   #include "../../../module/probe.h"
 #endif
 
+#if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
+  #include "../../../feature/babystep.h"
+#endif
+
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "../../../feature/powerloss.h"
 #endif
@@ -89,7 +95,7 @@
   #define CORP_WEBSITE_E "www.creality.com"
 #endif
 
-#define PAUSE_HEAT true
+#define PAUSE_HEAT
 
 #define USE_STRING_HEADINGS
 
@@ -98,6 +104,7 @@
 #define HEADER_FONT font10x20
 
 #define MENU_CHAR_LIMIT  24
+#define STATUS_Y 360
 
 // Fan speed limit
 #define FANON           255
@@ -146,11 +153,9 @@ constexpr uint16_t TROWS = 6, MROWS = TROWS - 1,        // Total rows, and other
 HMI_value_t HMI_ValueStruct;
 HMI_Flag HMI_flag{0};
 
-millis_t Encoder_ms     = 0;
-millis_t Wait_ms        = 0;
 millis_t dwin_heat_time = 0;
 
-int checkkey = 0, last_checkkey = 0;
+uint8_t checkkey = 0;
 
 typedef struct {
   uint8_t now, last;
@@ -158,7 +163,7 @@ typedef struct {
   void reset() { set(0); }
   bool changed() { bool c = (now != last); if (c) last = now; return c; }
   bool dec() { if (now) now--; return changed(); }
-  bool inc(uint8_t v) { if (now < v) now++; else now = v; return changed(); }
+  bool inc(uint8_t v) { if (now < (v - 1)) now++; else now = (v - 1); return changed(); }
 } select_t;
 
 select_t select_page{0}, select_file{0}, select_print{0}, select_prepare{0}
@@ -175,13 +180,9 @@ uint8_t index_file     = MROWS,
         index_prepare  = MROWS,
         index_control  = MROWS,
         index_leveling = MROWS,
-        index_tune     = 5;
-
-// char filebuf[50];
-
-uint8_t countbuf = 0;
+        index_tune     = MROWS;
 
-bool recovery_flag = false, abort_flag = false;
+bool dwin_abort_flag = false;
 
 constexpr float default_max_feedrate[]        = DEFAULT_MAX_FEEDRATE;
 constexpr float default_max_acceleration[]    = DEFAULT_MAX_ACCELERATION;
@@ -189,38 +190,41 @@ constexpr float default_max_jerk[]            = { DEFAULT_XJERK, DEFAULT_YJERK,
 constexpr float default_axis_steps_per_unit[] = DEFAULT_AXIS_STEPS_PER_UNIT;
 
 uint8_t Percentrecord = 0;
-uint16_t last_Printtime = 0, remain_time = 0;
-float last_temp_hotend_target = 0, last_temp_bed_target = 0;
-float last_temp_hotend_current = 0, last_temp_bed_current = 0;
-uint8_t last_fan_speed = 0;
-uint16_t last_speed = 0;
-float last_E_scale = 0;
-bool DWIN_lcd_sd_status = 0;
-bool pause_action_flag = 0;
-int temphot = 0, tempbed = 0;
-float dwin_zoffset = 0;
-float last_zoffset = 0;
+uint16_t remain_time = 0;
+
+#if ENABLED(PAUSE_HEAT)
+  #if HAS_HOTEND
+    uint16_t temphot = 0;
+  #endif
+  #if HAS_HEATED_BED
+    uint16_t tempbed = 0;
+  #endif
+#endif
+
+#if HAS_ZOFFSET_ITEM
+  float dwin_zoffset = 0, last_zoffset = 0;
+#endif
 
 #define DWIN_LANGUAGE_EEPROM_ADDRESS 0x01   // Between 0x01 and 0x63 (EEPROM_OFFSET-1)
                                             // BL24CXX::check() uses 0x00
 
-void HMI_SetLanguage(void) {
-  BL24CXX::read(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language_chinese, sizeof(HMI_flag.language_chinese));
-  if (HMI_flag.language_chinese)
-    DWIN_JPG_CacheTo1(Language_Chinese);
-  else
-    DWIN_JPG_CacheTo1(Language_English);
+void HMI_SetLanguageCache() {
+  DWIN_JPG_CacheTo1(HMI_flag.language_chinese ? Language_Chinese : Language_English);
 }
 
-void HMI_SetAndSaveLanguageWestern(void) {
-  HMI_flag.language_chinese = false;
-  DWIN_JPG_CacheTo1(Language_English);
-  BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language_chinese, sizeof(HMI_flag.language_chinese));
+void HMI_SetLanguage() {
+  #if ENABLED(EEPROM_SETTINGS)
+    BL24CXX::read(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language_chinese, sizeof(HMI_flag.language_chinese));
+  #endif
+  HMI_SetLanguageCache();
 }
-void HMI_SetAndSaveLanguageChinese(void) {
-  HMI_flag.language_chinese = true;
-  DWIN_JPG_CacheTo1(Language_Chinese);
-  BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language_chinese, sizeof(HMI_flag.language_chinese));
+
+void HMI_ToggleLanguage() {
+  HMI_flag.language_chinese ^= true;
+  HMI_SetLanguageCache();
+  #if ENABLED(EEPROM_SETTINGS)
+    BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language_chinese, sizeof(HMI_flag.language_chinese));
+  #endif
 }
 
 void DWIN_Draw_Signed_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, long value) {
@@ -331,14 +335,14 @@ void ICON_Tune() {
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 121, 447, 148, 458, 34, 325);
     else
-      DWIN_Frame_AreaCopy(1, 1, 465, 34, 477, 31, 325);
+      DWIN_Frame_AreaCopy(1,   0, 466,  34, 476, 31, 325);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Setup_0, 8, 252);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 121, 405, 148, 420, 34, 325);
     else
-      DWIN_Frame_AreaCopy(1, 1, 438, 32, 448, 31, 325);
+      DWIN_Frame_AreaCopy(1,   0, 438,  32, 448, 31, 325);
   }
 }
 
@@ -367,7 +371,7 @@ void ICON_Continue() {
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 124, 325);
     else
-      DWIN_Frame_AreaCopy(1, 1, 451, 32, 463, 121, 325);
+      DWIN_Frame_AreaCopy(1, 1, 452, 32, 464, 121, 325);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Continue_0, 96, 252);
@@ -385,7 +389,7 @@ void ICON_Stop() {
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 151, 447, 178, 459, 210, 325);
     else
-      DWIN_Frame_AreaCopy(1, 218, 451, 249, 465, 209, 325);
+      DWIN_Frame_AreaCopy(1, 218, 452, 249, 466, 209, 325);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Stop_0, 184, 252);
@@ -396,8 +400,8 @@ void ICON_Stop() {
   }
 }
 
-inline void Clear_Title_Bar(void) {
-  DWIN_Draw_Rectangle(1, Background_blue,   0,  0,  DWIN_WIDTH,  30);
+inline void Clear_Title_Bar() {
+  DWIN_Draw_Rectangle(1, Background_blue, 0, 0, DWIN_WIDTH, 30);
 }
 
 inline void Draw_Title(const char * const title) {
@@ -408,21 +412,21 @@ inline void Draw_Title(const __FlashStringHelper * title) {
   DWIN_Draw_String(false, false, HEADER_FONT, White, Background_blue, 14, 4, (char*)title);
 }
 
-inline void Clear_Menu_Area(void) {
-  DWIN_Draw_Rectangle(1, Background_black,  0,  31, DWIN_WIDTH,  360);
+inline void Clear_Menu_Area() {
+  DWIN_Draw_Rectangle(1, Background_black, 0, 31, DWIN_WIDTH, STATUS_Y);
 }
 
-inline void Clear_Main_Window(void) {
+inline void Clear_Main_Window() {
   Clear_Title_Bar();
   Clear_Menu_Area();
 }
 
-inline void Clear_Popup_Area(void) {
+inline void Clear_Popup_Area() {
   Clear_Title_Bar();
   DWIN_Draw_Rectangle(1, Background_black, 0, 31, DWIN_WIDTH, DWIN_HEIGHT);
 }
 
-void Draw_Popup_Bkgd_105(void) {
+void Draw_Popup_Bkgd_105() {
   DWIN_Draw_Rectangle(1, Background_window, 14, 105, 258, 374);
 }
 
@@ -476,7 +480,7 @@ inline void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char
 }
 
 // The "Back" label is always on the first line
-inline void Draw_Back_Label(void) {
+inline void Draw_Back_Label() {
   if (HMI_flag.language_chinese)
     DWIN_Frame_AreaCopy(1, 129, 72, 156, 84, LBLX, MBASE(0));
   else
@@ -494,13 +498,61 @@ inline void Draw_Back_First(const bool is_sel=true) {
 // Draw Menus
 //
 
+#define MOTION_CASE_RATE   1
+#define MOTION_CASE_ACCEL  2
+#define MOTION_CASE_JERK   (MOTION_CASE_ACCEL + ENABLED(HAS_CLASSIC_JERK))
+#define MOTION_CASE_STEPS  (MOTION_CASE_JERK + 1)
+#define MOTION_CASE_TOTAL  MOTION_CASE_STEPS
+
+#define PREPARE_CASE_MOVE  1
+#define PREPARE_CASE_DISA  2
+#define PREPARE_CASE_HOME  3
+#define PREPARE_CASE_ZOFF (PREPARE_CASE_HOME + ENABLED(HAS_ZOFFSET_ITEM))
+#define PREPARE_CASE_PLA  (PREPARE_CASE_ZOFF + ENABLED(HAS_HOTEND))
+#define PREPARE_CASE_ABS  (PREPARE_CASE_PLA + ENABLED(HAS_HOTEND))
+#define PREPARE_CASE_COOL (PREPARE_CASE_ABS + EITHER(HAS_HOTEND, HAS_HEATED_BED))
+#define PREPARE_CASE_LANG (PREPARE_CASE_COOL + 1)
+#define PREPARE_CASE_TOTAL PREPARE_CASE_LANG
+
+#define CONTROL_CASE_TEMP 1
+#define CONTROL_CASE_MOVE  (CONTROL_CASE_TEMP + 1)
+#define CONTROL_CASE_SAVE  (CONTROL_CASE_MOVE + ENABLED(EEPROM_SETTINGS))
+#define CONTROL_CASE_LOAD  (CONTROL_CASE_SAVE + ENABLED(EEPROM_SETTINGS))
+#define CONTROL_CASE_RESET (CONTROL_CASE_LOAD + ENABLED(EEPROM_SETTINGS))
+#define CONTROL_CASE_INFO  (CONTROL_CASE_RESET + 1)
+#define CONTROL_CASE_TOTAL CONTROL_CASE_INFO
+
+#define TUNE_CASE_SPEED 1
+#define TUNE_CASE_TEMP (TUNE_CASE_SPEED + ENABLED(HAS_HOTEND))
+#define TUNE_CASE_BED  (TUNE_CASE_TEMP + ENABLED(HAS_HEATED_BED))
+#define TUNE_CASE_FAN  (TUNE_CASE_BED + ENABLED(HAS_FAN))
+#define TUNE_CASE_ZOFF (TUNE_CASE_FAN + ENABLED(HAS_ZOFFSET_ITEM))
+#define TUNE_CASE_TOTAL TUNE_CASE_ZOFF
+
+#define TEMP_CASE_TEMP (0 + ENABLED(HAS_HOTEND))
+#define TEMP_CASE_BED  (TEMP_CASE_TEMP + ENABLED(HAS_HEATED_BED))
+#define TEMP_CASE_FAN  (TEMP_CASE_BED + ENABLED(HAS_FAN))
+#define TEMP_CASE_PLA  (TEMP_CASE_FAN + ENABLED(HAS_HOTEND))
+#define TEMP_CASE_ABS  (TEMP_CASE_PLA + ENABLED(HAS_HOTEND))
+#define TEMP_CASE_TOTAL TEMP_CASE_ABS
+
+#define PREHEAT_CASE_TEMP (0 + ENABLED(HAS_HOTEND))
+#define PREHEAT_CASE_BED  (PREHEAT_CASE_TEMP + ENABLED(HAS_HEATED_BED))
+#define PREHEAT_CASE_FAN  (PREHEAT_CASE_BED + ENABLED(HAS_FAN))
+#define PREHEAT_CASE_SAVE (PREHEAT_CASE_FAN + ENABLED(EEPROM_SETTINGS))
+#define PREHEAT_CASE_TOTAL PREHEAT_CASE_SAVE
+
+//
+// Draw Menus
+//
+
 inline void draw_move_en(const uint16_t line) {
   DWIN_Frame_AreaCopy(1, 69, 61, 102, 71, LBLX, line); // "Move"
 }
 
 inline void DWIN_Frame_TitleCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) { DWIN_Frame_AreaCopy(id, x1, y1, x2, y2, 14, 8); }
 
-inline void Prepare_Item_Move(const uint8_t row) {
+inline void Item_Prepare_Move(const uint8_t row) {
   if (HMI_flag.language_chinese)
     DWIN_Frame_AreaCopy(1, 159, 70, 200, 84, LBLX, MBASE(row));
   else
@@ -509,7 +561,7 @@ inline void Prepare_Item_Move(const uint8_t row) {
   Draw_More_Icon(row);
 }
 
-inline void Prepare_Item_Disable(const uint8_t row) {
+inline void Item_Prepare_Disable(const uint8_t row) {
   if (HMI_flag.language_chinese)
     DWIN_Frame_AreaCopy(1, 204, 70, 259, 82, LBLX, MBASE(row));
   else
@@ -517,7 +569,7 @@ inline void Prepare_Item_Disable(const uint8_t row) {
   Draw_Menu_Line(row, ICON_CloseMotor);
 }
 
-inline void Prepare_Item_Home(const uint8_t row) {
+inline void Item_Prepare_Home(const uint8_t row) {
   if (HMI_flag.language_chinese)
     DWIN_Frame_AreaCopy(1, 0, 89, 41, 101, LBLX, MBASE(row));
   else
@@ -525,57 +577,65 @@ inline void Prepare_Item_Home(const uint8_t row) {
   Draw_Menu_Line(row, ICON_Homing);
 }
 
-inline void Prepare_Item_Offset(const uint8_t row) {
-  if (HMI_flag.language_chinese) {
-    #if HAS_BED_PROBE
-      DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(row));
-      DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
-    #else
-      DWIN_Frame_AreaCopy(1, 43, 89, 98, 101, LBLX, MBASE(row));
-    #endif
-  }
-  else {
-    #if HAS_BED_PROBE
-      DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(row));    // "Z-Offset"
-      DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
-    #else
-      DWIN_Frame_AreaCopy(1, 1, 76, 106, 86, LBLX, MBASE(row));       // "..."
-    #endif
-  }
-  Draw_Menu_Line(row, ICON_SetHome);
-}
+#if HAS_ZOFFSET_ITEM
 
-inline void Prepare_Item_PLA(const uint8_t row) {
-  if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 100, 89, 151, 101, LBLX, MBASE(row));
-  }
-  else {
-    DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
-    DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(row));  // "PLA"
+  inline void Item_Prepare_Offset(const uint8_t row) {
+    if (HMI_flag.language_chinese) {
+      #if HAS_BED_PROBE
+        DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(row));
+        DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
+      #else
+        DWIN_Frame_AreaCopy(1, 43, 89, 98, 101, LBLX, MBASE(row));
+      #endif
+    }
+    else {
+      #if HAS_BED_PROBE
+        DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(row));    // "Z-Offset"
+        DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
+      #else
+        DWIN_Frame_AreaCopy(1, 1, 76, 106, 86, LBLX, MBASE(row));       // "..."
+      #endif
+    }
+    Draw_Menu_Line(row, ICON_SetHome);
   }
-  Draw_Menu_Line(row, ICON_PLAPreheat);
-}
 
-inline void Prepare_Item_ABS(const uint8_t row) {
-  if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 180, 89, 233, 100, LBLX, MBASE(row));
+#endif
+
+#if HAS_HOTEND
+  inline void Item_Prepare_PLA(const uint8_t row) {
+    if (HMI_flag.language_chinese) {
+      DWIN_Frame_AreaCopy(1, 100, 89, 151, 101, LBLX, MBASE(row));
+    }
+    else {
+      DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
+      DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(row));  // "PLA"
+    }
+    Draw_Menu_Line(row, ICON_PLAPreheat);
   }
-  else {
-    DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
-    DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(row));  // "ABS"
+
+  inline void Item_Prepare_ABS(const uint8_t row) {
+    if (HMI_flag.language_chinese) {
+      DWIN_Frame_AreaCopy(1, 180, 89, 233, 100, LBLX, MBASE(row));
+    }
+    else {
+      DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
+      DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(row));  // "ABS"
+    }
+    Draw_Menu_Line(row, ICON_ABSPreheat);
   }
-  Draw_Menu_Line(row, ICON_ABSPreheat);
-}
+#endif
 
-inline void Prepare_Item_Cool(const uint8_t row) {
-  if (HMI_flag.language_chinese)
-    DWIN_Frame_AreaCopy(1,   1, 104,  56, 117, LBLX, MBASE(row));
-  else
-    DWIN_Frame_AreaCopy(1, 200,  76, 264,  86, LBLX, MBASE(row));      // "Cooldown"
-  Draw_Menu_Line(row, ICON_Cool);
-}
+#if HAS_PREHEAT
+  inline void Item_Prepare_Cool(const uint8_t row) {
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1,   1, 104,  56, 117, LBLX, MBASE(row));
+    else
+      DWIN_Frame_AreaCopy(1, 200,  76, 264,  86, LBLX, MBASE(row));      // "Cooldown"
+    Draw_Menu_Line(row, ICON_Cool);
+  }
+#endif
 
-inline void Prepare_Item_Lang(const uint8_t row) {
+inline void Item_Prepare_Lang(const uint8_t row) {
   if (HMI_flag.language_chinese) {
     DWIN_Frame_AreaCopy(1, 239, 134, 266, 146, LBLX, MBASE(row));
     DWIN_Draw_String(false, false, font8x16, White, Background_black, 226, MBASE(row), F("CN"));
@@ -605,15 +665,21 @@ inline void Draw_Prepare_Menu() {
     #endif
   }
 
-  if (PVISI(0)) Draw_Back_First(select_prepare.now == 0); // < Back
-  if (PVISI(1)) Prepare_Item_Move(PSCROL(1));       // Move >
-  if (PVISI(2)) Prepare_Item_Disable(PSCROL(2));    // Disable Stepper
-  if (PVISI(3)) Prepare_Item_Home(PSCROL(3));       // Auto Home
-  if (PVISI(4)) Prepare_Item_Offset(PSCROL(4));     // Z-Offset
-  if (PVISI(5)) Prepare_Item_PLA(PSCROL(5));        // Preheat PLA
-  if (PVISI(6)) Prepare_Item_ABS(PSCROL(6));        // Preheat ABS
-  if (PVISI(7)) Prepare_Item_Cool(PSCROL(7));       // Cooldown
-  if (PVISI(8)) Prepare_Item_Lang(PSCROL(8));       // Language CN/EN
+  if (PVISI(0)) Draw_Back_First(select_prepare.now == 0);                         // < Back
+  if (PVISI(PREPARE_CASE_MOVE)) Item_Prepare_Move(PSCROL(PREPARE_CASE_MOVE));     // Move >
+  if (PVISI(PREPARE_CASE_DISA)) Item_Prepare_Disable(PSCROL(PREPARE_CASE_DISA));  // Disable Stepper
+  if (PVISI(PREPARE_CASE_HOME)) Item_Prepare_Home(PSCROL(PREPARE_CASE_HOME));     // Auto Home
+  #if HAS_ZOFFSET_ITEM
+    if (PVISI(PREPARE_CASE_ZOFF)) Item_Prepare_Offset(PSCROL(PREPARE_CASE_ZOFF)); // Edit Z-Offset / Babystep / Set Home Offset
+  #endif
+  #if HAS_HOTEND
+    if (PVISI(PREPARE_CASE_PLA)) Item_Prepare_PLA(PSCROL(PREPARE_CASE_PLA));      // Preheat PLA
+    if (PVISI(PREPARE_CASE_ABS)) Item_Prepare_ABS(PSCROL(PREPARE_CASE_ABS));      // Preheat ABS
+  #endif
+  #if HAS_PREHEAT
+    if (PVISI(PREPARE_CASE_COOL)) Item_Prepare_Cool(PSCROL(PREPARE_CASE_COOL));   // Cooldown
+  #endif
+  if (PVISI(PREPARE_CASE_LANG)) Item_Prepare_Lang(PSCROL(PREPARE_CASE_LANG));     // Language CN/EN
 
   if (select_prepare.now) Draw_Menu_Cursor(PSCROL(select_prepare.now));
 }
@@ -621,52 +687,55 @@ inline void Draw_Prepare_Menu() {
 inline void Draw_Control_Menu() {
   Clear_Main_Window();
 
-  const int16_t scroll = TERN(HAS_ONESTEP_LEVELING, MROWS - index_control, 0);    // Scrolled-up lines
-
-  #define CSCROL(L) (scroll + (L))
+  #if CONTROL_CASE_TOTAL >= 6
+    const int16_t scroll = MROWS - index_control; // Scrolled-up lines
+    #define CSCROL(L) (scroll + (L))
+  #else
+    #define CSCROL(L) (L)
+  #endif
   #define CLINE(L)  MBASE(CSCROL(L))
   #define CVISI(L)  WITHIN(CSCROL(L), 0, MROWS)
 
   if (CVISI(0)) Draw_Back_First(select_control.now == 0);                         // < Back
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 103,   1, 130, 14, 14, 8);
-    DWIN_Frame_AreaCopy(1,  57, 104, 84, 116, LBLX, CLINE(1));  // Temperature >
-    DWIN_Frame_AreaCopy(1,  87, 104, 114, 116, LBLX, CLINE(2)); // Motion >
-    DWIN_Frame_AreaCopy(1, 117, 104, 172, 116, LBLX, CLINE(3)); // Store Config
-    DWIN_Frame_AreaCopy(1, 174, 103, 229, 116, LBLX, CLINE(4)); // Read Config
-    DWIN_Frame_AreaCopy(1,   1, 118, 56, 131, LBLX, CLINE(5));  // Reset Config
+    DWIN_Frame_TitleCopy(1, 103, 1, 130, 14);                                     // "Control"
+
+    DWIN_Frame_AreaCopy(1,  57, 104,  84, 116, LBLX, CLINE(CONTROL_CASE_TEMP));   // Temperature >
+    DWIN_Frame_AreaCopy(1,  87, 104, 114, 116, LBLX, CLINE(CONTROL_CASE_MOVE));   // Motion >
+
+    #if ENABLED(EEPROM_SETTINGS)
+      DWIN_Frame_AreaCopy(1, 117, 104, 172, 116, LBLX, CLINE(CONTROL_CASE_SAVE));   // Store Configuration
+      DWIN_Frame_AreaCopy(1, 174, 103, 229, 116, LBLX, CLINE(CONTROL_CASE_LOAD));   // Read Configuration
+      DWIN_Frame_AreaCopy(1,   1, 118,  56, 131, LBLX, CLINE(CONTROL_CASE_RESET));  // Reset Configuration
+    #endif
 
-    if (CVISI(6))
-      DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, CLINE(6)); // Info >
+    if (CVISI(CONTROL_CASE_INFO))
+      DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, CLINE(CONTROL_CASE_TEMP)); // Info >
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_CONTROL));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), GET_TEXT_F(MSG_TEMPERATURE));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), GET_TEXT_F(MSG_MOTION));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(CONTROL_CASE_TEMP), GET_TEXT_F(MSG_TEMPERATURE));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(CONTROL_CASE_MOVE), GET_TEXT_F(MSG_MOTION));
       #if ENABLED(EEPROM_SETTINGS)
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), GET_TEXT_F(MSG_STORE_EEPROM));
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), GET_TEXT_F(MSG_LOAD_EEPROM));
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(5), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
-        if (CVISI(6)) DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(6), F("Info"));
-      #else
-        if (CVISI(3)) DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), F("Info"));
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
       #endif
+      if (CVISI(CONTROL_CASE_INFO)) DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(CONTROL_CASE_INFO), F("Info"));
     #else
-      DWIN_Frame_AreaCopy(1, 128, 2, 176, 12, 14, 8);
-      DWIN_Frame_AreaCopy(1,   1,    89, 83, 101, LBLX, CLINE(1));      // Temperature >
-      DWIN_Frame_AreaCopy(1,  84,    89, 128, 99,   LBLX, CLINE(2));    // Motion >
+      DWIN_Frame_TitleCopy(1, 128, 2, 176, 12);                                           // "Control"
+      DWIN_Frame_AreaCopy(1,  1, 89,  83, 101, LBLX, CLINE(CONTROL_CASE_TEMP));           // Temperature >
+      DWIN_Frame_AreaCopy(1, 84, 89, 128,  99, LBLX, CLINE(CONTROL_CASE_MOVE));           // Motion >
       #if ENABLED(EEPROM_SETTINGS)
-        DWIN_Frame_AreaCopy(1, 148, 89, 268, 101, LBLX, CLINE(3));      // "Store Configuration"
-        DWIN_Frame_AreaCopy(1, 26, 104, 57, 114, LBLX, CLINE(4));       // "Read"
-        DWIN_Frame_AreaCopy(1, 182, 89, 268, 101, LBLX + 34, CLINE(4)); // "Configuration"
-        DWIN_Frame_AreaCopy(1, 59, 104, 93, 114, LBLX, CLINE(5));       // "Reset"
-        DWIN_Frame_AreaCopy(1, 182, 89, 268, 101, LBLX + 37, CLINE(5)); // "Configuration"
-        if (CVISI(6)) DWIN_Frame_AreaCopy(1, 0, 104, 25, 115, LBLX, CLINE(6)); // Info >
-      #else
-        if (CVISI(3)) DWIN_Frame_AreaCopy(1, 0, 104, 25, 115, LBLX, CLINE(3)); // Info >
+        DWIN_Frame_AreaCopy(1, 148,  89, 268, 101, LBLX     , CLINE(CONTROL_CASE_SAVE     // "Store Configuration"
+        DWIN_Frame_AreaCopy(1,  26, 104,  57, 114, LBLX     , CLINE(CONTROL_CASE_LOAD));  // "Read"
+        DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 34, CLINE(CONTROL_CASE_LOAD));  // "Configuration"
+        DWIN_Frame_AreaCopy(1,  59, 104,  93, 114, LBLX     , CLINE(CONTROL_CASE_RESET)); // "Reset"
+        DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 37, CLINE(CONTROL_CASE_RESET)); // "Configuration"
       #endif
+      if (CVISI(CONTROL_CASE_INFO)) DWIN_Frame_AreaCopy(1, 0, 104, 25, 115, LBLX, CLINE(CONTROL_CASE_INFO));  // Info >
     #endif
   }
 
@@ -674,12 +743,23 @@ inline void Draw_Control_Menu() {
     Draw_Menu_Cursor(CSCROL(select_control.now));
 
   // Draw icons and lines
-  LOOP_L_N(i, 6)
-  if (CVISI(i + 1)) Draw_Menu_Line(CSCROL(i + 1), ICON_Temperature + i);
+  uint8_t i = 0;
+  #define _TEMP_ICON(N) do{ ++i; if (CVISI(i)) Draw_Menu_Line(CSCROL(i), ICON_SetEndTemp + (N) - 1); }while(0)
+
+  _TEMP_ICON(CONTROL_CASE_TEMP);
+  if (CVISI(i)) Draw_More_Icon(CSCROL(i));
+
+  _TEMP_ICON(CONTROL_CASE_MOVE);
+  Draw_More_Icon(CSCROL(i));
 
-  Draw_More_Icon(CSCROL(1));
-  Draw_More_Icon(CSCROL(2));
-  if (CVISI(6)) Draw_More_Icon(CSCROL(6));
+  #if ENABLED(EEPROM_SETTINGS)
+    _TEMP_ICON(CONTROL_CASE_SAVE);
+    _TEMP_ICON(CONTROL_CASE_LOAD);
+    _TEMP_ICON(CONTROL_CASE_RESET);
+  #endif
+
+  _TEMP_ICON(CONTROL_CASE_INFO);
+  if (CVISI(CONTROL_CASE_INFO)) Draw_More_Icon(CSCROL(i));
 }
 
 inline void Draw_Tune_Menu() {
@@ -687,46 +767,76 @@ inline void Draw_Tune_Menu() {
 
   if (HMI_flag.language_chinese) {
     DWIN_Frame_AreaCopy(1, 73, 2, 100, 13, 14, 9);
-    DWIN_Frame_AreaCopy(1, 116, 164, 171, 176, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX, MBASE(4));
-    DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(5));
+    DWIN_Frame_AreaCopy(1, 116, 164, 171, 176, LBLX, MBASE(TUNE_CASE_SPEED));
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(TUNE_CASE_TEMP));
+    #endif
+    #if HAS_HEATED_BED
+      DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX, MBASE(TUNE_CASE_BED));
+    #endif
+    #if HAS_FAN
+      DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX, MBASE(TUNE_CASE_FAN));
+    #endif
+    #if HAS_ZOFFSET_ITEM
+      DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(TUNE_CASE_ZOFF));
+    #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_TUNE));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), GET_TEXT_F(MSG_SPEED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), GET_TEXT_F(MSG_FAN_SPEED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(5), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TUNE_CASE_SPEED), GET_TEXT_F(MSG_SPEED));
+      #if HAS_HOTEND
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TUNE_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+      #endif
+      #if HAS_HEATED_BED
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TUNE_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+      #endif
+      #if HAS_FAN
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TUNE_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+      #endif
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TUNE_CASE_ZOFF), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
     #else
       DWIN_Frame_AreaCopy(1, 94, 2, 126, 12, 14, 9);
-      DWIN_Frame_AreaCopy(1, 1, 179, 92, 190, LBLX, MBASE(1)); // print speed
-      DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(2)); // Hotend...
-      DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(2)); // ...Temperature
-      DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX, MBASE(3)); // Bed...
-      DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 27, MBASE(3)); // ...Temperature
-      DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX, MBASE(4)); // fan speed
-      DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(5)); // Z-offset
+      DWIN_Frame_AreaCopy(1, 1, 179, 92, 190, LBLX, MBASE(TUNE_CASE_SPEED));      // Print speed
+      #if HAS_HOTEND
+        DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(TUNE_CASE_TEMP));  // Hotend...
+        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(TUNE_CASE_TEMP)); // ...Temperature
+      #endif
+      #if HAS_HEATED_BED
+        DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX, MBASE(TUNE_CASE_BED));   // Bed...
+        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 27, MBASE(TUNE_CASE_BED));  // ...Temperature
+      #endif
+      #if HAS_FAN
+        DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX, MBASE(TUNE_CASE_FAN));      // Fan speed
+      #endif
+      #if HAS_ZOFFSET_ITEM
+        DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(TUNE_CASE_ZOFF));   // Z-offset
+      #endif
     #endif
   }
 
   Draw_Back_First(select_tune.now == 0);
   if (select_tune.now) Draw_Menu_Cursor(select_tune.now);
 
-  Draw_Menu_Line(1, ICON_Speed);
-  Draw_Menu_Line(2, ICON_HotendTemp);
-  Draw_Menu_Line(3, ICON_BedTemp);
-  Draw_Menu_Line(4, ICON_FanSpeed);
-  Draw_Menu_Line(5, ICON_Zoffset);
+  Draw_Menu_Line(TUNE_CASE_SPEED, ICON_Speed);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_SPEED), feedrate_percentage);
 
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), feedrate_percentage);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), thermalManager.temp_hotend[0].target);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), thermalManager.temp_bed.target);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(4), thermalManager.fan_speed[0]);
-  DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(5), BABY_Z_VAR * 100);
+  #if HAS_HOTEND
+    Draw_Menu_Line(TUNE_CASE_TEMP, ICON_HotendTemp);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_TEMP), thermalManager.temp_hotend[0].target);
+  #endif
+  #if HAS_HEATED_BED
+    Draw_Menu_Line(TUNE_CASE_BED, ICON_BedTemp);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_BED), thermalManager.temp_bed.target);
+  #endif
+  #if HAS_FAN
+    Draw_Menu_Line(TUNE_CASE_FAN, ICON_FanSpeed);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_FAN), thermalManager.fan_speed[0]);
+  #endif
+  #if HAS_ZOFFSET_ITEM
+    Draw_Menu_Line(TUNE_CASE_ZOFF, ICON_Zoffset);
+    DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(TUNE_CASE_ZOFF), BABY_Z_VAR * 100);
+  #endif
 }
 
 inline void draw_max_en(const uint16_t line) {
@@ -762,74 +872,84 @@ inline void Draw_Motion_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 1, 16, 28, 28, 14, 8);
-
-    DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, MBASE(1));        // Max speed
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(2));        // Max...
-    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(2) + 1); // ...acceleration
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(3));        // Max...
-    DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(3) + 1);  // ...
-    DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 54, MBASE(3));   // ...jerk
-    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(4));        // Flow ratio
+    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28);                                     // "Motion"
+    DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, MBASE(MOTION_CASE_RATE));  // Max speed
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(MOTION_CASE_ACCEL));        // Max...
+    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(MOTION_CASE_ACCEL) + 1); // ...Acceleration
+    #if HAS_CLASSIC_JERK
+      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(MOTION_CASE_JERK));        // Max...
+      DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(MOTION_CASE_JERK) + 1);  // ...
+      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 54, MBASE(MOTION_CASE_JERK));   // ...Jerk
+    #endif
+    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(MOTION_CASE_STEPS));         // Flow ratio
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_MOTION));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Feedrate"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), GET_TEXT_F(MSG_ACCELERATION));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), GET_TEXT_F(MSG_JERK));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), GET_TEXT_F(MSG_STEPS_PER_MM));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(MOTION_CASE_RATE), F("Feedrate"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(MOTION_CASE_ACCEL), GET_TEXT_F(MSG_ACCELERATION));
+      #if HAS_CLASSIC_JERK
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(MOTION_CASE_JERK), GET_TEXT_F(MSG_JERK));
+      #endif
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(MOTION_CASE_STEPS), GET_TEXT_F(MSG_STEPS_PER_MM));
     #else
-      DWIN_Frame_AreaCopy(1, 144, 16, 189, 26, 14, 8);
-      draw_max_en(MBASE(1)); draw_speed_en(27, MBASE(1)); // "Max Speed"
-      draw_max_accel_en(MBASE(2));                        // "Max Acceleration"
-      draw_max_en(MBASE(3)); draw_jerk_en(MBASE(3));      // "Max Jerk"
-      draw_steps_per_mm(MBASE(4));                        // "Steps-per-mm"
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);                                        // "Motion"
+      draw_max_en(MBASE(MOTION_CASE_RATE)); draw_speed_en(27, MBASE(MOTION_CASE_RATE)); // "Max Speed"
+      draw_max_accel_en(MBASE(MOTION_CASE_ACCEL));                                      // "Max Acceleration"
+      #if HAS_CLASSIC_JERK
+        draw_max_en(MBASE(MOTION_CASE_JERK)); draw_jerk_en(MBASE(MOTION_CASE_JERK));    // "Max Jerk"
+      #endif
+      draw_steps_per_mm(MBASE(MOTION_CASE_STEPS));                                      // "Steps-per-mm"
     #endif
   }
 
   Draw_Back_First(select_motion.now == 0);
   if (select_motion.now) Draw_Menu_Cursor(select_motion.now);
 
-  LOOP_L_N(i, 4) Draw_Menu_Line(i + 1, ICON_MaxSpeed + i);
-
-  Draw_More_Icon(1);
-  Draw_More_Icon(2);
-  Draw_More_Icon(3);
-  Draw_More_Icon(4);
+  uint8_t i = 0;
+  #define _MOTION_ICON(N) Draw_Menu_Line(++i, ICON_MaxSpeed + (N) - 1)
+  _MOTION_ICON(MOTION_CASE_RATE); Draw_More_Icon(i);
+  _MOTION_ICON(MOTION_CASE_ACCEL); Draw_More_Icon(i);
+  #if HAS_CLASSIC_JERK
+    _MOTION_ICON(MOTION_CASE_JERK); Draw_More_Icon(i);
+  #endif
+  _MOTION_ICON(MOTION_CASE_STEPS); Draw_More_Icon(i);
 }
 
 //
 // Draw Popup Windows
 //
-
-void Popup_Window_Temperature(const bool toohigh) {
-  Clear_Popup_Area();
-  Draw_Popup_Bkgd_105();
-  if (toohigh) {
-    DWIN_ICON_Show(ICON, ICON_TempTooHigh, 102, 165);
-    if (HMI_flag.language_chinese) {
-      DWIN_Frame_AreaCopy(1, 103, 371, 237, 386, 52, 285);
-      DWIN_Frame_AreaCopy(1, 151, 389, 185, 402, 187, 285);
-      DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
-    }
-    else {
-      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, F("Nozzle or Bed temperature"));
-      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 300, F("is too high"));
-    }
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 165);
-    if (HMI_flag.language_chinese) {
-      DWIN_Frame_AreaCopy(1, 103, 371, 270, 386, 52, 285);
-      DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
+#if HAS_HOTEND || HAS_HEATED_BED
+
+  void DWIN_Popup_Temperature(const bool toohigh) {
+    Clear_Popup_Area();
+    Draw_Popup_Bkgd_105();
+    if (toohigh) {
+      DWIN_ICON_Show(ICON, ICON_TempTooHigh, 102, 165);
+      if (HMI_flag.language_chinese) {
+        DWIN_Frame_AreaCopy(1, 103, 371, 237, 386, 52, 285);
+        DWIN_Frame_AreaCopy(1, 151, 389, 185, 402, 187, 285);
+        DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
+      }
+      else {
+        DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, F("Nozzle or Bed temperature"));
+        DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 300, F("is too high"));
+      }
     }
     else {
-      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, F("Nozzle or Bed temperature"));
-      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 300, F("is too low"));
+      DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 165);
+      if (HMI_flag.language_chinese) {
+        DWIN_Frame_AreaCopy(1, 103, 371, 270, 386, 52, 285);
+        DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
+      }
+      else {
+        DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, F("Nozzle or Bed temperature"));
+        DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 300, F("is too low"));
+      }
     }
   }
-}
+
+#endif
 
 inline void Draw_Popup_Bkgd_60() {
   DWIN_Draw_Rectangle(1, Background_window, 14, 60, 258, 330);
@@ -837,7 +957,7 @@ inline void Draw_Popup_Bkgd_60() {
 
 #if HAS_HOTEND
 
-  void Popup_Window_ETempTooLow(void) {
+  void Popup_Window_ETempTooLow() {
     Clear_Main_Window();
     Draw_Popup_Bkgd_60();
     DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 105);
@@ -854,7 +974,7 @@ inline void Draw_Popup_Bkgd_60() {
 
 #endif
 
-void Popup_Window_Resume(void) {
+void Popup_Window_Resume() {
   Clear_Popup_Area();
   Draw_Popup_Bkgd_105();
   if (HMI_flag.language_chinese) {
@@ -864,15 +984,15 @@ void Popup_Window_Resume(void) {
     DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 307);
   }
   else {
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 120, 115, F("Tips"));
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 24, 192, F("I see the file stopped"));
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 68, 212, F("unexpectedly last time"));
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 14) / 2, 115, F("Continue Print"));
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 22) / 2, 192, F("It looks like the last"));
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 22) / 2, 212, F("file was interrupted."));
     DWIN_ICON_Show(ICON, ICON_Continue_E, 26, 307);
     DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 307);
   }
 }
 
-void Popup_Window_Home(void) {
+void Popup_Window_Home(const bool parking/*=false*/) {
   Clear_Main_Window();
   Draw_Popup_Bkgd_60();
   DWIN_ICON_Show(ICON, ICON_BLTouch, 101, 105);
@@ -882,24 +1002,28 @@ void Popup_Window_Home(void) {
     DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
   }
   else {
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 80, 230, GET_TEXT_F(MSG_LEVEL_BED_HOMING));
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 24, 260, F("Please wait until completed"));
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * (parking ? 7 : 10)) / 2, 230, parking ? F("Parking") : F("Homing XYZ"));
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
   }
 }
 
-void Popup_Window_Leveling(void) {
-  Clear_Main_Window();
-  Draw_Popup_Bkgd_60();
-  DWIN_ICON_Show(ICON, ICON_AutoLeveling, 101, 105);
-  if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 0, 371, 100, 386, 84, 240);
-    DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
-  }
-  else {
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 76, 230, GET_TEXT_F(MSG_BED_LEVELING));
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 24, 260, F("Please wait until completed"));
+#if HAS_ONESTEP_LEVELING
+
+  void Popup_Window_Leveling() {
+    Clear_Main_Window();
+    Draw_Popup_Bkgd_60();
+    DWIN_ICON_Show(ICON, ICON_AutoLeveling, 101, 105);
+    if (HMI_flag.language_chinese) {
+      DWIN_Frame_AreaCopy(1, 0, 371, 100, 386, 84, 240);
+      DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
+    }
+    else {
+      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 13) / 2, 230, GET_TEXT_F(MSG_BED_LEVELING));
+      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
+    }
   }
-}
+
+#endif
 
 void Draw_Select_Highlight(const bool sel) {
   HMI_flag.select_flag = sel;
@@ -911,34 +1035,34 @@ void Draw_Select_Highlight(const bool sel) {
   DWIN_Draw_Rectangle(0, c2, 144, 278, 247, 319);
 }
 
-void Popup_window_PauseOrStop(void) {
+void Popup_window_PauseOrStop() {
   Clear_Main_Window();
   Draw_Popup_Bkgd_60();
   if (HMI_flag.language_chinese) {
-    if (select_print.now == 1) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);
+         if (select_print.now == 1) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);
     else if (select_print.now == 2) DWIN_Frame_AreaCopy(1, 221, 320, 253, 336, 98, 150);
     DWIN_Frame_AreaCopy(1, 220, 304, 264, 319, 130, 150);
     DWIN_ICON_Show(ICON, ICON_Confirm_C, 26, 280);
     DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 280);
   }
   else {
-    if (select_print.now == 1) DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 88, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
-    else if (select_print.now == 2) DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 150, GET_TEXT_F(MSG_STOP_PRINT));
+         if (select_print.now == 1) DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 11) / 2, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
+    else if (select_print.now == 2) DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, (272 - 8 * 10) / 2, 150, GET_TEXT_F(MSG_STOP_PRINT));
     DWIN_ICON_Show(ICON, ICON_Confirm_E, 26, 280);
     DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 280);
   }
   Draw_Select_Highlight(true);
 }
 
-void Draw_Printing_Screen(void) {
+void Draw_Printing_Screen() {
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 30,  1, 71, 14,  14,   9);   // Tune
-    DWIN_Frame_AreaCopy(1,  0, 72, 63, 86,  41, 188);   // Pause
+    DWIN_Frame_AreaCopy(1, 30,  1,  71, 14,  14,   9);  // Tune
+    DWIN_Frame_AreaCopy(1,  0, 72,  63, 86,  41, 188);  // Pause
     DWIN_Frame_AreaCopy(1, 65, 72, 128, 86, 176, 188);  // Stop
   }
   else {
-    DWIN_Frame_AreaCopy(1, 40,  2, 92, 14,  14,   9);   // Tune
-    DWIN_Frame_AreaCopy(1,  0, 44, 96, 58,  41, 188);   // Pause
+    DWIN_Frame_AreaCopy(1, 40,  2,  92, 14,  14,   9);  // Tune
+    DWIN_Frame_AreaCopy(1,  0, 44,  96, 58,  41, 188);  // Pause
     DWIN_Frame_AreaCopy(1, 98, 44, 152, 58, 176, 188);  // Stop
   }
 }
@@ -963,7 +1087,7 @@ void Draw_Print_ProgressRemain() {
   DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 200, 212, (remain_time % 3600) / 60);
 }
 
-void Goto_PrintProcess(void) {
+void Goto_PrintProcess() {
   checkkey = PrintProcess;
 
   Clear_Main_Window();
@@ -986,7 +1110,7 @@ void Goto_PrintProcess(void) {
   Draw_Print_ProgressRemain();
 }
 
-void Goto_MainMenu(void) {
+void Goto_MainMenu() {
   checkkey = MainMenu;
 
   Clear_Main_Window();
@@ -1011,6 +1135,7 @@ void Goto_MainMenu(void) {
 }
 
 inline ENCODER_DiffState get_encoder_state() {
+  static millis_t Encoder_ms = 0;
   const millis_t ms = millis();
   if (PENDING(ms, Encoder_ms)) return ENCODER_DIFF_NO;
   const ENCODER_DiffState state = Encoder_ReceiveAnalyze();
@@ -1018,7 +1143,7 @@ inline ENCODER_DiffState get_encoder_state() {
   return state;
 }
 
-void HMI_Move_X(void) {
+void HMI_Move_X() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
     if (encoder_diffState == ENCODER_DIFF_CW) {
@@ -1029,7 +1154,7 @@ void HMI_Move_X(void) {
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       checkkey = AxisMove;
-      EncoderRate.encoderRateEnabled = 0;
+      EncoderRate.enabled = false;
       DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
@@ -1047,7 +1172,7 @@ void HMI_Move_X(void) {
   }
 }
 
-void HMI_Move_Y(void) {
+void HMI_Move_Y() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
     if (encoder_diffState == ENCODER_DIFF_CW) {
@@ -1058,7 +1183,7 @@ void HMI_Move_Y(void) {
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       checkkey = AxisMove;
-      EncoderRate.encoderRateEnabled = 0;
+      EncoderRate.enabled = false;
       DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
@@ -1076,7 +1201,7 @@ void HMI_Move_Y(void) {
   }
 }
 
-void HMI_Move_Z(void) {
+void HMI_Move_Z() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
     if (encoder_diffState == ENCODER_DIFF_CW) {
@@ -1087,7 +1212,7 @@ void HMI_Move_Z(void) {
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       checkkey = AxisMove;
-      EncoderRate.encoderRateEnabled = 0;
+      EncoderRate.enabled = false;
       DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
       if (!planner.is_full()) {
         // Wait for planner moves to finish!
@@ -1107,7 +1232,8 @@ void HMI_Move_Z(void) {
 
 #if HAS_HOTEND
 
-  void HMI_Move_E(void) {
+  void HMI_Move_E() {
+    static float last_E_scale = 0;
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState != ENCODER_DIFF_NO) {
       if (encoder_diffState == ENCODER_DIFF_CW) {
@@ -1118,7 +1244,7 @@ void HMI_Move_Z(void) {
       }
       else if (encoder_diffState == ENCODER_DIFF_ENTER) {
         checkkey = AxisMove;
-        EncoderRate.encoderRateEnabled = 0;
+        EncoderRate.enabled = false;
         last_E_scale = HMI_ValueStruct.Move_E_scale;
         DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
         if (!planner.is_full()) {
@@ -1140,53 +1266,66 @@ void HMI_Move_Z(void) {
 
 #endif
 
-void HMI_Zoffset(void) {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    last_zoffset = dwin_zoffset;
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      HMI_ValueStruct.offset_value += EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      HMI_ValueStruct.offset_value -= EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-      EncoderRate.encoderRateEnabled = 0;
-      dwin_zoffset = HMI_ValueStruct.offset_value / 100;
-      #if HAS_BED_PROBE
-        if (WITHIN(dwin_zoffset - last_zoffset, Z_PROBE_OFFSET_RANGE_MIN, Z_PROBE_OFFSET_RANGE_MAX))
-          probe.offset.z = dwin_zoffset;
-        TERN_(EEPROM_SETTINGS, settings.save());
-      #elif ENABLED(BABYSTEPPING)
-        babystep.add_mm(Z_AXIS, dwin_zoffset - last_zoffset);
-      #endif
+#if HAS_ZOFFSET_ITEM
 
-      if (HMI_ValueStruct.show_mode == -4) {
-        checkkey = Prepare;
-        DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(4 + MROWS - index_prepare), TERN(HAS_BED_PROBE, probe.offset.z * 100, HMI_ValueStruct.offset_value));
+  bool printer_busy() { return planner.movesplanned() || printingIsActive(); }
+
+  void HMI_Zoffset() {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      uint8_t zoff_line;
+      switch (HMI_ValueStruct.show_mode) {
+        case -4: zoff_line = PREPARE_CASE_ZOFF + MROWS - index_prepare; break;
+        default: zoff_line = TUNE_CASE_ZOFF + MROWS - index_tune;
       }
-      else {
-        checkkey = Tune;
-        DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(5 + MROWS - index_tune), TERN(HAS_BED_PROBE, probe.offset.z * 100, HMI_ValueStruct.offset_value));
+      if (encoder_diffState == ENCODER_DIFF_CW)
+        HMI_ValueStruct.offset_value += EncoderRate.encoderMoveValue;
+      else if (encoder_diffState == ENCODER_DIFF_CCW)
+        HMI_ValueStruct.offset_value -= EncoderRate.encoderMoveValue;
+      else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+        EncoderRate.enabled = false;
+        #if HAS_BED_PROBE
+          probe.offset.z = dwin_zoffset;
+          TERN_(EEPROM_SETTINGS, settings.save());
+        #endif
+        if (HMI_ValueStruct.show_mode == -4) {
+          checkkey = Prepare;
+          DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
+        }
+        else {
+          checkkey = Tune;
+          DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
+        }
+        DWIN_UpdateLCD();
+        return;
       }
+      NOLESS(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100);
+      NOMORE(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
+      last_zoffset = dwin_zoffset;
+      dwin_zoffset = HMI_ValueStruct.offset_value / 100.0f;
+      #if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
+        if ( (ENABLED(BABYSTEP_WITHOUT_HOMING) || all_axes_known()) && (ENABLED(BABYSTEP_ALWAYS_AVAILABLE) || printer_busy()) )
+          babystep.add_mm(Z_AXIS, dwin_zoffset - last_zoffset);
+      #endif
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(zoff_line), HMI_ValueStruct.offset_value);
       DWIN_UpdateLCD();
-      return;
     }
-    NOLESS(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100);
-    NOMORE(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
-    if (HMI_ValueStruct.show_mode == -4)
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(4 + MROWS - index_prepare), HMI_ValueStruct.offset_value);
-    else
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(5 + MROWS - index_tune), HMI_ValueStruct.offset_value);
-    DWIN_UpdateLCD();
   }
-}
+
+#endif // HAS_ZOFFSET_ITEM
 
 #if HAS_HOTEND
 
-  void HMI_ETemp(void) {
+  void HMI_ETemp() {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState != ENCODER_DIFF_NO) {
+      uint8_t temp_line;
+      switch (HMI_ValueStruct.show_mode) {
+        case -1: temp_line = TEMP_CASE_TEMP; break;
+        case -2: temp_line = PREHEAT_CASE_TEMP; break;
+        case -3: temp_line = PREHEAT_CASE_TEMP; break;
+        default: temp_line = TUNE_CASE_TEMP + MROWS - index_tune;
+      }
       if (encoder_diffState == ENCODER_DIFF_CW) {
         HMI_ValueStruct.E_Temp += EncoderRate.encoderMoveValue;
       }
@@ -1194,26 +1333,26 @@ void HMI_Zoffset(void) {
         HMI_ValueStruct.E_Temp -= EncoderRate.encoderMoveValue;
       }
       else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
-        EncoderRate.encoderRateEnabled = 0;
+        EncoderRate.enabled = false;
         if (HMI_ValueStruct.show_mode == -1) { // temperature
           checkkey = TemperatureID;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), HMI_ValueStruct.E_Temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
         }
         else if (HMI_ValueStruct.show_mode == -2) {
           checkkey = PLAPreheat;
           ui.material_preset[0].hotend_temp = HMI_ValueStruct.E_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), ui.material_preset[0].hotend_temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(temp_line), ui.material_preset[0].hotend_temp);
           return;
         }
         else if (HMI_ValueStruct.show_mode == -3) {
           checkkey = ABSPreheat;
           ui.material_preset[1].hotend_temp = HMI_ValueStruct.E_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), ui.material_preset[1].hotend_temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(temp_line), ui.material_preset[1].hotend_temp);
           return;
         }
         else { // tune
           checkkey = Tune;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2 + MROWS - index_tune), HMI_ValueStruct.E_Temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
         }
         thermalManager.setTargetHotend(HMI_ValueStruct.E_Temp, 0);
         return;
@@ -1222,10 +1361,7 @@ void HMI_Zoffset(void) {
       NOMORE(HMI_ValueStruct.E_Temp, MAX_E_TEMP);
       NOLESS(HMI_ValueStruct.E_Temp, MIN_E_TEMP);
       // E_Temp value
-      if (HMI_ValueStruct.show_mode >= 0) // tune
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2 + MROWS - index_tune), HMI_ValueStruct.E_Temp);
-      else // other page
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1), HMI_ValueStruct.E_Temp);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
     }
   }
 
@@ -1233,9 +1369,16 @@ void HMI_Zoffset(void) {
 
 #if HAS_HEATED_BED
 
-  void HMI_BedTemp(void) {
+  void HMI_BedTemp() {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState != ENCODER_DIFF_NO) {
+      uint8_t bed_line;
+      switch (HMI_ValueStruct.show_mode) {
+        case -1: bed_line = TEMP_CASE_BED; break;
+        case -2: bed_line = PREHEAT_CASE_BED; break;
+        case -3: bed_line = PREHEAT_CASE_BED; break;
+        default: bed_line = TUNE_CASE_BED + MROWS - index_tune;
+      }
       if (encoder_diffState == ENCODER_DIFF_CW) {
         HMI_ValueStruct.Bed_Temp += EncoderRate.encoderMoveValue;
       }
@@ -1243,26 +1386,26 @@ void HMI_Zoffset(void) {
         HMI_ValueStruct.Bed_Temp -= EncoderRate.encoderMoveValue;
       }
       else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
-        EncoderRate.encoderRateEnabled = 0;
+        EncoderRate.enabled = false;
         if (HMI_ValueStruct.show_mode == -1) {
           checkkey = TemperatureID;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), HMI_ValueStruct.Bed_Temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
         }
         else if (HMI_ValueStruct.show_mode == -2) {
           checkkey = PLAPreheat;
           ui.material_preset[0].bed_temp = HMI_ValueStruct.Bed_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), ui.material_preset[0].bed_temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(bed_line), ui.material_preset[0].bed_temp);
           return;
         }
         else if (HMI_ValueStruct.show_mode == -3) {
           checkkey = ABSPreheat;
           ui.material_preset[1].bed_temp = HMI_ValueStruct.Bed_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), ui.material_preset[1].bed_temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(bed_line), ui.material_preset[1].bed_temp);
           return;
         }
         else {
           checkkey = Tune;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3 + MROWS - index_tune), HMI_ValueStruct.Bed_Temp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
         }
         thermalManager.setTargetBed(HMI_ValueStruct.Bed_Temp);
         return;
@@ -1271,20 +1414,25 @@ void HMI_Zoffset(void) {
       NOMORE(HMI_ValueStruct.Bed_Temp, BED_MAX_TARGET);
       NOLESS(HMI_ValueStruct.Bed_Temp, MIN_BED_TEMP);
       // Bed_Temp value
-      if (HMI_ValueStruct.show_mode >= 0) // tune page
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3 + MROWS - index_tune), HMI_ValueStruct.Bed_Temp);
-      else // other page
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2), HMI_ValueStruct.Bed_Temp);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
     }
   }
 
 #endif // HAS_HEATED_BED
 
-#if HAS_FAN
+#if HAS_PREHEAT
 
-  void HMI_FanSpeed(void) {
+  void HMI_FanSpeed() {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState != ENCODER_DIFF_NO) {
+      uint8_t fan_line;
+      switch (HMI_ValueStruct.show_mode) {
+        case -1: fan_line = TEMP_CASE_FAN; break;
+        case -2: fan_line = PREHEAT_CASE_FAN; break;
+        case -3: fan_line = PREHEAT_CASE_FAN; break;
+        default: fan_line = TUNE_CASE_FAN + MROWS - index_tune;
+      }
+
       if (encoder_diffState == ENCODER_DIFF_CW) {
         HMI_ValueStruct.Fan_speed += EncoderRate.encoderMoveValue;
       }
@@ -1292,26 +1440,26 @@ void HMI_Zoffset(void) {
         HMI_ValueStruct.Fan_speed -= EncoderRate.encoderMoveValue;
       }
       else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
-        EncoderRate.encoderRateEnabled = 0;
+        EncoderRate.enabled = false;
         if (HMI_ValueStruct.show_mode == -1) {
           checkkey = TemperatureID;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), HMI_ValueStruct.Fan_speed);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
         }
         else if (HMI_ValueStruct.show_mode == -2) {
           checkkey = PLAPreheat;
           ui.material_preset[0].fan_speed = HMI_ValueStruct.Fan_speed;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), ui.material_preset[0].fan_speed);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(fan_line), ui.material_preset[0].fan_speed);
           return;
         }
         else if (HMI_ValueStruct.show_mode == -3) {
           checkkey = ABSPreheat;
           ui.material_preset[1].fan_speed = HMI_ValueStruct.Fan_speed;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), ui.material_preset[1].fan_speed);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(fan_line), ui.material_preset[1].fan_speed);
           return;
         }
         else {
           checkkey = Tune;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(4 + MROWS - index_tune), HMI_ValueStruct.Fan_speed);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
         }
         thermalManager.set_fan_speed(0, HMI_ValueStruct.Fan_speed);
         return;
@@ -1320,16 +1468,13 @@ void HMI_Zoffset(void) {
       NOMORE(HMI_ValueStruct.Fan_speed, FANON);
       NOLESS(HMI_ValueStruct.Fan_speed, FANOFF);
       // Fan_speed value
-      if (HMI_ValueStruct.show_mode >= 0) // tune page
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(4 + MROWS - index_tune), HMI_ValueStruct.Fan_speed);
-      else // other page
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3), HMI_ValueStruct.Fan_speed);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
     }
   }
 
-#endif // HAS_FAN
+#endif // HAS_PREHEAT
 
-void HMI_PrintSpeed(void) {
+void HMI_PrintSpeed() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
     if (encoder_diffState == ENCODER_DIFF_CW) {
@@ -1340,20 +1485,20 @@ void HMI_PrintSpeed(void) {
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
       checkkey = Tune;
-      EncoderRate.encoderRateEnabled = 0;
+      EncoderRate.enabled = false;
       feedrate_percentage = HMI_ValueStruct.print_speed;
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1 + MROWS - index_tune), HMI_ValueStruct.print_speed);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
       return;
     }
     // print_speed limit
     NOMORE(HMI_ValueStruct.print_speed, MAX_PRINT_SPEED);
     NOLESS(HMI_ValueStruct.print_speed, MIN_PRINT_SPEED);
     // print_speed value
-    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1 + MROWS - index_tune), HMI_ValueStruct.print_speed);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
   }
 }
 
-void HMI_MaxFeedspeedXYZE(void) {
+void HMI_MaxFeedspeedXYZE() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
     if (encoder_diffState == ENCODER_DIFF_CW) {
@@ -1364,82 +1509,76 @@ void HMI_MaxFeedspeedXYZE(void) {
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
       checkkey = MaxSpeed;
-      EncoderRate.encoderRateEnabled = 0;
-      if (WITHIN(HMI_flag.feedspeed_flag, X_AXIS, E_AXIS))
-        planner.set_max_feedrate(HMI_flag.feedspeed_flag, HMI_ValueStruct.Max_Feedspeed);
+      EncoderRate.enabled = false;
+      if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, E_AXIS))
+        planner.set_max_feedrate(HMI_flag.feedspeed_axis, HMI_ValueStruct.Max_Feedspeed);
       DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
       return;
     }
     // MaxFeedspeed limit
-    if (WITHIN(HMI_flag.feedspeed_flag, X_AXIS, E_AXIS))
-      NOMORE(HMI_ValueStruct.Max_Feedspeed, default_max_feedrate[HMI_flag.feedspeed_flag] * 2);
+    if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, E_AXIS))
+      NOMORE(HMI_ValueStruct.Max_Feedspeed, default_max_feedrate[HMI_flag.feedspeed_axis] * 2);
     if (HMI_ValueStruct.Max_Feedspeed < MIN_MAXFEEDSPEED) HMI_ValueStruct.Max_Feedspeed = MIN_MAXFEEDSPEED;
     // MaxFeedspeed value
     DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
   }
 }
 
-void HMI_MaxAccelerationXYZE(void) {
+void HMI_MaxAccelerationXYZE() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
     if (encoder_diffState == ENCODER_DIFF_CW) { HMI_ValueStruct.Max_Acceleration += EncoderRate.encoderMoveValue;}
     else if (encoder_diffState == ENCODER_DIFF_CCW) { HMI_ValueStruct.Max_Acceleration -= EncoderRate.encoderMoveValue;}
     else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
       checkkey = MaxAcceleration;
-      EncoderRate.encoderRateEnabled = 0;
-      if (HMI_flag.acc_flag == X_AXIS) planner.set_max_acceleration(X_AXIS, HMI_ValueStruct.Max_Acceleration);
-      else if (HMI_flag.acc_flag == Y_AXIS) planner.set_max_acceleration(Y_AXIS, HMI_ValueStruct.Max_Acceleration);
-      else if (HMI_flag.acc_flag == Z_AXIS) planner.set_max_acceleration(Z_AXIS, HMI_ValueStruct.Max_Acceleration);
+      EncoderRate.enabled = false;
+      if (HMI_flag.acc_axis == X_AXIS) planner.set_max_acceleration(X_AXIS, HMI_ValueStruct.Max_Acceleration);
+      else if (HMI_flag.acc_axis == Y_AXIS) planner.set_max_acceleration(Y_AXIS, HMI_ValueStruct.Max_Acceleration);
+      else if (HMI_flag.acc_axis == Z_AXIS) planner.set_max_acceleration(Z_AXIS, HMI_ValueStruct.Max_Acceleration);
       #if HAS_HOTEND
-        else if (HMI_flag.acc_flag == E_AXIS) planner.set_max_acceleration(E_AXIS, HMI_ValueStruct.Max_Acceleration);
+        else if (HMI_flag.acc_axis == E_AXIS) planner.set_max_acceleration(E_AXIS, HMI_ValueStruct.Max_Acceleration);
       #endif
       DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
       return;
     }
     // MaxAcceleration limit
-    if (WITHIN(HMI_flag.acc_flag, X_AXIS, E_AXIS))
-      NOMORE(HMI_ValueStruct.Max_Acceleration, default_max_acceleration[HMI_flag.acc_flag] * 2);
+    if (WITHIN(HMI_flag.acc_axis, X_AXIS, E_AXIS))
+      NOMORE(HMI_ValueStruct.Max_Acceleration, default_max_acceleration[HMI_flag.acc_axis] * 2);
     if (HMI_ValueStruct.Max_Acceleration < MIN_MAXACCELERATION) HMI_ValueStruct.Max_Acceleration = MIN_MAXACCELERATION;
     // MaxAcceleration value
     DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
   }
 }
 
-void HMI_MaxJerkXYZE(void) {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      HMI_ValueStruct.Max_Jerk += EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      HMI_ValueStruct.Max_Jerk -= EncoderRate.encoderMoveValue;
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
-      checkkey = MaxJerk;
-      EncoderRate.encoderRateEnabled = 0;
-           if (HMI_flag.jerk_flag == X_AXIS) planner.set_max_jerk(X_AXIS, HMI_ValueStruct.Max_Jerk / 10);
-      else if (HMI_flag.jerk_flag == Y_AXIS) planner.set_max_jerk(Y_AXIS, HMI_ValueStruct.Max_Jerk / 10);
-      else if (HMI_flag.jerk_flag == Z_AXIS) planner.set_max_jerk(Z_AXIS, HMI_ValueStruct.Max_Jerk / 10);
-      else if (HMI_flag.jerk_flag == E_AXIS) planner.set_max_jerk(E_AXIS, HMI_ValueStruct.Max_Jerk / 10);
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
-      return;
+#if HAS_CLASSIC_JERK
+
+  void HMI_MaxJerkXYZE() {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      if (encoder_diffState == ENCODER_DIFF_CW)
+        HMI_ValueStruct.Max_Jerk += EncoderRate.encoderMoveValue;
+      else if (encoder_diffState == ENCODER_DIFF_CCW)
+        HMI_ValueStruct.Max_Jerk -= EncoderRate.encoderMoveValue;
+      else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+        checkkey = MaxJerk;
+        EncoderRate.enabled = false;
+        if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
+          planner.set_max_jerk(HMI_flag.step_axis, HMI_ValueStruct.Max_Jerk / 10);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
+        return;
+      }
+      // MaxJerk limit
+      if (WITHIN(HMI_flag.jerk_axis, X_AXIS, E_AXIS))
+        NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[HMI_flag.jerk_axis] * 2 * MINUNITMULT);
+      NOLESS(HMI_ValueStruct.Max_Jerk, (MIN_MAXJERK) * MINUNITMULT);
+      // MaxJerk value
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
     }
-    // MaxJerk limit
-    if (HMI_flag.jerk_flag == X_AXIS)
-      NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[X_AXIS] * 2 * MINUNITMULT);
-    else if (HMI_flag.jerk_flag == Y_AXIS)
-      NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[Y_AXIS] * 2 * MINUNITMULT);
-    else if (HMI_flag.jerk_flag == Z_AXIS)
-      NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[Z_AXIS] * 2 * MINUNITMULT);
-    else if (HMI_flag.jerk_flag == E_AXIS)
-      NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[E_AXIS] * 2 * MINUNITMULT);
-    NOLESS(HMI_ValueStruct.Max_Jerk, (MIN_MAXJERK) * MINUNITMULT);
-    // MaxJerk value
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
   }
-}
 
-void HMI_StepXYZE(void) {
+#endif // HAS_CLASSIC_JERK
+
+void HMI_StepXYZE() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
     if (encoder_diffState == ENCODER_DIFF_CW) {
@@ -1450,71 +1589,100 @@ void HMI_StepXYZE(void) {
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
       checkkey = Step;
-      EncoderRate.encoderRateEnabled = 0;
-      if (WITHIN(HMI_flag.step_flag, X_AXIS, E_AXIS))
-        planner.settings.axis_steps_per_mm[HMI_flag.step_flag] = HMI_ValueStruct.Max_Step / 10;
+      EncoderRate.enabled = false;
+      if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
+        planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step / 10;
       DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
       return;
     }
     // Step limit
-    if (WITHIN(HMI_flag.step_flag, X_AXIS, E_AXIS))
-      NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[HMI_flag.step_flag] * 2 * MINUNITMULT);
+    if (WITHIN(HMI_flag.step_axis, X_AXIS, E_AXIS))
+      NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[HMI_flag.step_axis] * 2 * MINUNITMULT);
     NOLESS(HMI_ValueStruct.Max_Step, MIN_STEP);
     // Step value
     DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
   }
 }
 
-void update_variable(void) {
+void update_variable() {
+  #if HAS_HOTEND
+    static float last_temp_hotend_target = 0, last_temp_hotend_current = 0;
+  #endif
+  #if HAS_HEATED_BED
+    static float last_temp_bed_target = 0, last_temp_bed_current = 0;
+  #endif
+  #if HAS_FAN
+    static uint8_t last_fan_speed = 0;
+  #endif
+
   /* Tune page temperature update */
   if (checkkey == Tune) {
-    if (last_temp_hotend_target != thermalManager.temp_hotend[0].target)
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2 + MROWS - index_tune), thermalManager.temp_hotend[0].target);
-    if (last_temp_bed_target != thermalManager.temp_bed.target)
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3 + MROWS - index_tune), thermalManager.temp_bed.target);
-    if (last_fan_speed != thermalManager.fan_speed[0]) {
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(4 + MROWS - index_tune), thermalManager.fan_speed[0]);
-      last_fan_speed = thermalManager.fan_speed[0];
-    }
+    #if HAS_HOTEND
+      if (last_temp_hotend_target != thermalManager.temp_hotend[0].target)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), thermalManager.temp_hotend[0].target);
+    #endif
+    #if HAS_HEATED_BED
+      if (last_temp_bed_target != thermalManager.temp_bed.target)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), thermalManager.temp_bed.target);
+    #endif
+    #if HAS_FAN
+      if (last_fan_speed != thermalManager.fan_speed[0]) {
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), thermalManager.fan_speed[0]);
+        last_fan_speed = thermalManager.fan_speed[0];
+      }
+    #endif
   }
 
   /* Temperature page temperature update */
   if (checkkey == TemperatureID) {
-    if (last_temp_hotend_target != thermalManager.temp_hotend[0].target)
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), thermalManager.temp_hotend[0].target);
-    if (last_temp_bed_target != thermalManager.temp_bed.target)
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), thermalManager.temp_bed.target);
-    if (last_fan_speed != thermalManager.fan_speed[0]) {
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), thermalManager.fan_speed[0]);
-      last_fan_speed = thermalManager.fan_speed[0];
-    }
+    #if HAS_HOTEND
+      if (last_temp_hotend_target != thermalManager.temp_hotend[0].target)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TEMP_CASE_TEMP), thermalManager.temp_hotend[0].target);
+    #endif
+    #if HAS_HEATED_BED
+      if (last_temp_bed_target != thermalManager.temp_bed.target)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TEMP_CASE_BED), thermalManager.temp_bed.target);
+    #endif
+    #if HAS_FAN
+      if (last_fan_speed != thermalManager.fan_speed[0]) {
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(TEMP_CASE_FAN), thermalManager.fan_speed[0]);
+        last_fan_speed = thermalManager.fan_speed[0];
+      }
+    #endif
   }
 
   /* Bottom temperature update */
-  if (last_temp_hotend_current != thermalManager.temp_hotend[0].celsius) {
-    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
-    last_temp_hotend_current = thermalManager.temp_hotend[0].celsius;
-  }
-  if (last_temp_hotend_target != thermalManager.temp_hotend[0].target) {
-    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
-    last_temp_hotend_target = thermalManager.temp_hotend[0].target;
-  }
-  if (last_temp_bed_current != thermalManager.temp_bed.celsius) {
-    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178, 382, thermalManager.temp_bed.celsius);
-    last_temp_bed_current = thermalManager.temp_bed.celsius;
-  }
-  if (last_temp_bed_target != thermalManager.temp_bed.target) {
-    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
-    last_temp_bed_target = thermalManager.temp_bed.target;
-  }
+  #if HAS_HOTEND
+    if (last_temp_hotend_current != thermalManager.temp_hotend[0].celsius) {
+      DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
+      last_temp_hotend_current = thermalManager.temp_hotend[0].celsius;
+    }
+    if (last_temp_hotend_target != thermalManager.temp_hotend[0].target) {
+      DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
+      last_temp_hotend_target = thermalManager.temp_hotend[0].target;
+    }
+  #endif
+  #if HAS_HEATED_BED
+    if (last_temp_bed_current != thermalManager.temp_bed.celsius) {
+      DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178, 382, thermalManager.temp_bed.celsius);
+      last_temp_bed_current = thermalManager.temp_bed.celsius;
+    }
+    if (last_temp_bed_target != thermalManager.temp_bed.target) {
+      DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
+      last_temp_bed_target = thermalManager.temp_bed.target;
+    }
+  #endif
+  static uint16_t last_speed = 0;
   if (last_speed != feedrate_percentage) {
     DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
     last_speed = feedrate_percentage;
   }
-  if (last_zoffset != BABY_Z_VAR) {
-    DWIN_Draw_Signed_Float(STAT_FONT, Background_black, 2, 2, 178 + STAT_CHR_W, 429, BABY_Z_VAR * 100);
-    last_zoffset = BABY_Z_VAR;
-  }
+  #if HAS_ZOFFSET_ITEM
+    if (last_zoffset != BABY_Z_VAR) {
+      DWIN_Draw_Signed_Float(STAT_FONT, Background_black, 2, 2, 178 + STAT_CHR_W, 429, BABY_Z_VAR * 100);
+      last_zoffset = BABY_Z_VAR;
+    }
+  #endif
 }
 
 /**
@@ -1553,38 +1721,37 @@ inline void make_name_without_ext(char *dst, char *src, size_t maxlen=MENU_CHAR_
   while (pos--) dst[pos] = src[pos];
 }
 
-inline void HMI_SDCardInit(void) { card.cdroot(); }
+inline void HMI_SDCardInit() { card.cdroot(); }
 
-void MarlinUI::refresh() {
-  // The card was mounted or unmounted
-  // or some other status change occurred
-  // DWIN_lcd_sd_status = false; // On next DWIN_Update
-  // HMI_SDCardUpdate();
-}
+void MarlinUI::refresh() { /* Nothing to see here */ }
 
 #define ICON_Folder ICON_More
 
-char shift_name[LONG_FILENAME_LENGTH + 1];
-int8_t shift_amt; // = 0
-millis_t shift_ms; // = 0
+#if ENABLED(SCROLL_LONG_FILENAMES)
 
-// Init the shift name based on the highlighted item
-inline void Init_Shift_Name() {
-  const bool is_subdir = !card.flag.workDirIsRoot;
-  const int8_t filenum = select_file.now - 1 - is_subdir; // Skip "Back" and ".."
-  const uint16_t fileCnt = card.get_num_Files();
-  if (WITHIN(filenum, 0, fileCnt - 1)) {
-    card.getfilename_sorted(SD_ORDER(filenum, fileCnt));
-    char * const name = card.longest_filename();
-    make_name_without_ext(shift_name, name, 100);
+  char shift_name[LONG_FILENAME_LENGTH + 1];
+  int8_t shift_amt; // = 0
+  millis_t shift_ms; // = 0
+
+  // Init the shift name based on the highlighted item
+  inline void Init_Shift_Name() {
+    const bool is_subdir = !card.flag.workDirIsRoot;
+    const int8_t filenum = select_file.now - 1 - is_subdir; // Skip "Back" and ".."
+    const uint16_t fileCnt = card.get_num_Files();
+    if (WITHIN(filenum, 0, fileCnt - 1)) {
+      card.getfilename_sorted(SD_ORDER(filenum, fileCnt));
+      char * const name = card.longest_filename();
+      make_name_without_ext(shift_name, name, 100);
+    }
   }
-}
 
-inline void Init_SDItem_Shift() {
-  shift_amt = 0;
-  shift_ms  = select_file.now > 0 && strlen(shift_name) > MENU_CHAR_LIMIT
-         ? millis() + 750UL : 0;
-}
+  inline void Init_SDItem_Shift() {
+    shift_amt = 0;
+    shift_ms  = select_file.now > 0 && strlen(shift_name) > MENU_CHAR_LIMIT
+           ? millis() + 750UL : 0;
+  }
+
+#endif
 
 /**
  * Display an SD item, adding a CDUP for subfolders.
@@ -1600,37 +1767,42 @@ inline void Draw_SDItem(const uint16_t item, int16_t row=-1) {
   card.getfilename_sorted(item - is_subdir);
   char * const name = card.longest_filename();
 
-  // Init the current selected name
-  // This is used during scroll drawing
-  if (item == select_file.now - 1) {
-    make_name_without_ext(shift_name, name, 100);
-    Init_SDItem_Shift();
-  }
+  #if ENABLED(SCROLL_LONG_FILENAMES)
+    // Init the current selected name
+    // This is used during scroll drawing
+    if (item == select_file.now - 1) {
+      make_name_without_ext(shift_name, name, 100);
+      Init_SDItem_Shift();
+    }
+  #endif
 
+  // Draw the file/folder with name aligned left
   char str[strlen(name) + 1];
-
   make_name_without_ext(str, name);
-
   Draw_Menu_Line(row, card.flag.filenameIsDir ? ICON_Folder : ICON_File, str);
 }
 
-inline void Draw_SDItem_Shifted(int8_t &shift) {
-  // Limit to the number of chars past the cutoff
-  const size_t len = strlen(shift_name);
-  NOMORE(shift, _MAX((signed)len - MENU_CHAR_LIMIT, 0));
+#if ENABLED(SCROLL_LONG_FILENAMES)
 
-  // Shorten to the available space
-  const size_t lastchar = _MIN((signed)len, shift + MENU_CHAR_LIMIT);
+  inline void Draw_SDItem_Shifted(int8_t &shift) {
+    // Limit to the number of chars past the cutoff
+    const size_t len = strlen(shift_name);
+    NOMORE(shift, _MAX((signed)len - MENU_CHAR_LIMIT, 0));
 
-  const char c = shift_name[lastchar];
-  shift_name[lastchar] = '\0';
+    // Shorten to the available space
+    const size_t lastchar = _MIN((signed)len, shift + MENU_CHAR_LIMIT);
 
-  const uint8_t row = select_file.now + MROWS - index_file; // skip "Back" and scroll
-  Erase_Menu_Text(row);
-  Draw_Menu_Line(row, 0, &shift_name[shift]);
+    const char c = shift_name[lastchar];
+    shift_name[lastchar] = '\0';
 
-  shift_name[lastchar] = c;
-}
+    const uint8_t row = select_file.now + MROWS - index_file; // skip "Back" and scroll
+    Erase_Menu_Text(row);
+    Draw_Menu_Line(row, 0, &shift_name[shift]);
+
+    shift_name[lastchar] = c;
+  }
+
+#endif
 
 // Redraw the first set of SD Files
 inline void Redraw_SD_List() {
@@ -1645,10 +1817,12 @@ inline void Redraw_SD_List() {
   LOOP_L_N(i, _MIN(nr_sd_menu_items(), MROWS))
     Draw_SDItem(i, i + 1);
 
-  Init_SDItem_Shift();
+  TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());
 }
 
-inline void SDCard_Up(void) {
+bool DWIN_lcd_sd_status = false;
+
+inline void SDCard_Up() {
   card.cdup();
   Redraw_SD_List();
   DWIN_lcd_sd_status = false; // On next DWIN_Update
@@ -1663,7 +1837,7 @@ inline void SDCard_Folder(char * const dirname) {
 //
 // Watch for media mount / unmount
 //
-void HMI_SDCardUpdate(void) {
+void HMI_SDCardUpdate() {
   if (HMI_flag.home_flag) return;
   if (DWIN_lcd_sd_status != card.isMounted()) {
     DWIN_lcd_sd_status = card.isMounted();
@@ -1681,40 +1855,50 @@ void HMI_SDCardUpdate(void) {
         // TODO: Move card removed abort handling
         //       to CardReader::manage_media.
         card.flag.abort_sd_printing = true;
-        wait_for_heatup             = false;
-        abort_flag                  = true;
+        wait_for_heatup = false;
+        dwin_abort_flag = true;
       }
     }
     DWIN_UpdateLCD();
   }
 }
 
-/* Start */
+/* Start Frame */
+
 void HMI_StartFrame(const bool with_update) {
   Goto_MainMenu();
 
-  DWIN_Draw_Rectangle(1, Background_black,  0,  360, DWIN_WIDTH, DWIN_HEIGHT - 1);
+  // Clear the bottom area of the screen
+  DWIN_Draw_Rectangle(1, Background_black, 0, STATUS_Y, DWIN_WIDTH, DWIN_HEIGHT - 1);
 
-  DWIN_ICON_Show(ICON, ICON_HotendTemp, 13, 381);
+  //
+  // Status Area
+  //
+  #if HAS_HOTEND
+    DWIN_ICON_Show(ICON, ICON_HotendTemp, 13, 381);
+    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
+    DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + 3 * STAT_CHR_W + 5, 383, F("/"));
+    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
+  #endif
   #if HOTENDS > 1
     // DWIN_ICON_Show(ICON,ICON_HotendTemp, 13, 381);
   #endif
-  DWIN_ICON_Show(ICON, ICON_BedTemp,   158, 381);
-  DWIN_ICON_Show(ICON, ICON_Speed,      13, 429);
-  DWIN_ICON_Show(ICON, ICON_Zoffset,   158, 428);
 
-  // Draw initial Status Area
-  DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
-  DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
-  DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178, 382, thermalManager.temp_bed.celsius);
-  DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
+  #if HAS_HEATED_BED
+    DWIN_ICON_Show(ICON, ICON_BedTemp, 158, 381);
+    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178, 382, thermalManager.temp_bed.celsius);
+    DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 178 + 3 * STAT_CHR_W + 5, 383, F("/"));
+    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
+  #endif
 
+  DWIN_ICON_Show(ICON, ICON_Speed, 13, 429);
   DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
   DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + 5 * STAT_CHR_W + 2, 429, F("%"));
 
-  DWIN_Draw_Signed_Float(STAT_FONT, Background_black, 2, 2, 178, 429, BABY_Z_VAR * 100);
-  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + 3 * STAT_CHR_W + 5, 383, F("/"));
-  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 178 + 3 * STAT_CHR_W + 5, 383, F("/"));
+  #if HAS_ZOFFSET_ITEM
+    DWIN_ICON_Show(ICON, ICON_Zoffset, 158, 428);
+    DWIN_Draw_Signed_Float(STAT_FONT, Background_black, 2, 2, 178, 429, BABY_Z_VAR * 100);
+  #endif
 
   if (with_update) {
     DWIN_UpdateLCD();
@@ -1774,12 +1958,12 @@ inline void Draw_Print_File_Menu() {
 }
 
 /* Main Process */
-void HMI_MainMenu(void) {
+void HMI_MainMenu() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_page.inc(3)) {
+    if (select_page.inc(4)) {
       switch (select_page.now) {
         case 0: ICON_Print(); break;
         case 1: ICON_Print(); ICON_Prepare(); break;
@@ -1834,27 +2018,29 @@ void HMI_MainMenu(void) {
 }
 
 // Select (and Print) File
-void HMI_SelectFile(void) {
+void HMI_SelectFile() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
 
   const uint16_t hasUpDir = !card.flag.workDirIsRoot;
 
   if (encoder_diffState == ENCODER_DIFF_NO) {
-    if (shift_ms && select_file.now >= 1 + hasUpDir) {
-      // Scroll selected filename every second
-      const millis_t ms = millis();
-      if (ELAPSED(ms, shift_ms)) {
-        const bool was_reset = shift_amt < 0;
-        shift_ms = ms + 375UL + was_reset * 250UL;  // ms per character
-        int8_t shift_new = shift_amt + 1;           // Try to shift by...
-        Draw_SDItem_Shifted(shift_new);             // Draw the item
-        if (!was_reset && shift_new == 0)           // Was it limited to 0?
-          shift_ms = 0;                             // No scrolling needed
-        else if (shift_new == shift_amt)            // Scroll reached the end
-          shift_new = -1;                           // Reset
-        shift_amt = shift_new;                      // Set new scroll
+    #if ENABLED(SCROLL_LONG_FILENAMES)
+      if (shift_ms && select_file.now >= 1 + hasUpDir) {
+        // Scroll selected filename every second
+        const millis_t ms = millis();
+        if (ELAPSED(ms, shift_ms)) {
+          const bool was_reset = shift_amt < 0;
+          shift_ms = ms + 375UL + was_reset * 250UL;  // ms per character
+          int8_t shift_new = shift_amt + 1;           // Try to shift by...
+          Draw_SDItem_Shifted(shift_new);             // Draw the item
+          if (!was_reset && shift_new == 0)           // Was it limited to 0?
+            shift_ms = 0;                             // No scrolling needed
+          else if (shift_new == shift_amt)            // Scroll reached the end
+            shift_new = -1;                           // Reset
+          shift_amt = shift_new;                      // Set new scroll
+        }
       }
-    }
+    #endif
     return;
   }
 
@@ -1864,10 +2050,10 @@ void HMI_SelectFile(void) {
   const uint16_t fullCnt = nr_sd_menu_items();
 
   if (encoder_diffState == ENCODER_DIFF_CW && fullCnt) {
-    if (select_file.inc(fullCnt)) {
+    if (select_file.inc(1 + fullCnt)) {
       const uint8_t itemnum = select_file.now - 1;              // -1 for "Back"
-      if (shift_ms) {                                           // If line was shifted
-        Erase_Menu_Text(select_file.now - 1 + MROWS - index_file); // Erase and
+      if (TERN0(SCROLL_LONG_FILENAMES, shift_ms)) {             // If line was shifted
+        Erase_Menu_Text(itemnum + MROWS - index_file);          // Erase and
         Draw_SDItem(itemnum - 1);                               // redraw
       }
       if (select_file.now > MROWS && select_file.now > index_file) { // Cursor past the bottom
@@ -1877,15 +2063,15 @@ void HMI_SelectFile(void) {
       }
       else {
         Move_Highlight(1, select_file.now + MROWS - index_file); // Just move highlight
-        Init_Shift_Name();                                      // ...and init the shift name
+        TERN_(SCROLL_LONG_FILENAMES, Init_Shift_Name());         // ...and init the shift name
       }
-      Init_SDItem_Shift();
+      TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW && fullCnt) {
     if (select_file.dec()) {
       const uint8_t itemnum = select_file.now - 1;              // -1 for "Back"
-      if (shift_ms) {                                           // If line was shifted
+      if (TERN0(SCROLL_LONG_FILENAMES, shift_ms)) {             // If line was shifted
         Erase_Menu_Text(select_file.now + 1 + MROWS - index_file); // Erase and
         Draw_SDItem(itemnum + 1);                               // redraw
       }
@@ -1894,7 +2080,7 @@ void HMI_SelectFile(void) {
         Scroll_Menu(DWIN_SCROLL_DOWN);
         if (index_file == MROWS) {
           Draw_Back_First();
-          shift_ms = 0;
+          TERN_(SCROLL_LONG_FILENAMES, shift_ms = 0);
         }
         else {
           Draw_SDItem(itemnum, 0);                              // Draw the item (and init shift name)
@@ -1902,19 +2088,17 @@ void HMI_SelectFile(void) {
       }
       else {
         Move_Highlight(-1, select_file.now + MROWS - index_file); // Just move highlight
-        Init_Shift_Name();                                      // ...and init the shift name
+        TERN_(SCROLL_LONG_FILENAMES, Init_Shift_Name());        // ...and init the shift name
       }
-      Init_SDItem_Shift();                                      // Reset left. Init timer.
+      TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());        // Reset left. Init timer.
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    if (select_file.now == 0) {
-      /* back */
+    if (select_file.now == 0) { // Back
       select_page.set(0);
       Goto_MainMenu();
     }
-    else if (hasUpDir && select_file.now == 1) {
-      /* CDUP */
+    else if (hasUpDir && select_file.now == 1) { // CD-Up
       SDCard_Up();
       goto HMI_SelectFileExit;
     }
@@ -1933,8 +2117,8 @@ void HMI_SelectFile(void) {
       select_file.reset();
 
       // Start choice and print SD file
-      HMI_flag.heat_flag        = 1;
-      HMI_flag.print_finish     = 0;
+      HMI_flag.heat_flag = true;
+      HMI_flag.print_finish = false;
       HMI_ValueStruct.show_mode = 0;
 
       card.openAndPrintFile(card.filename);
@@ -1954,21 +2138,21 @@ HMI_SelectFileExit:
 }
 
 /* Printing */
-void HMI_Printing(void) {
+void HMI_Printing() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
-  if (HMI_flag.confirm_flag) {
+  if (HMI_flag.done_confirm_flag) {
     if (encoder_diffState == ENCODER_DIFF_ENTER) {
-      HMI_flag.confirm_flag = 0;
-      abort_flag            = 1;
+      HMI_flag.done_confirm_flag = false;
+      dwin_abort_flag = true;
     }
     return;
   }
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_print.inc(2)) {
+    if (select_print.inc(3)) {
       switch (select_print.now) {
         case 0: ICON_Tune(); break;
         case 1:
@@ -1999,15 +2183,14 @@ void HMI_Printing(void) {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_print.now) {
-      case 0: // Setting
+      case 0: // Tune
         checkkey = Tune;
         HMI_ValueStruct.show_mode = 0;
         select_tune.reset();
-        index_tune = 5;
+        index_tune = MROWS;
         Draw_Tune_Menu();
         break;
       case 1: // Pause
-        /* pause */
         if (HMI_flag.pause_flag) {
           ICON_Pause();
 
@@ -2015,23 +2198,26 @@ void HMI_Printing(void) {
           cmd[0] = '\0';
 
           #if ENABLED(PAUSE_HEAT)
-            if (tempbed) sprintf_P(cmd, PSTR("M190 S%i\n"), tempbed);
-            if (temphot) sprintf_P(&cmd[strlen(cmd)], PSTR("M109 S%i\n"), temphot);
+            #if HAS_HEATED_BED
+              if (tempbed) sprintf_P(cmd, PSTR("M190 S%i\n"), tempbed);
+            #endif
+            #if HAS_HOTEND
+              if (temphot) sprintf_P(&cmd[strlen(cmd)], PSTR("M109 S%i\n"), temphot);
+            #endif
           #endif
 
           strcat_P(cmd, PSTR("M24"));
           queue.inject(cmd);
         }
         else {
-          HMI_flag.select_flag = 1;
+          HMI_flag.select_flag = true;
           checkkey = Print_window;
           Popup_window_PauseOrStop();
         }
         break;
 
       case 2: // Stop
-        /* stop */
-        HMI_flag.select_flag = 1;
+        HMI_flag.select_flag = true;
         checkkey = Print_window;
         Popup_window_PauseOrStop();
         break;
@@ -2043,7 +2229,7 @@ void HMI_Printing(void) {
 }
 
 /* Pause and Stop window */
-void HMI_PauseOrStop(void) {
+void HMI_PauseOrStop() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
@@ -2056,7 +2242,7 @@ void HMI_PauseOrStop(void) {
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (select_print.now == 1) { // pause window
       if (HMI_flag.select_flag) {
-        pause_action_flag = 1;
+        HMI_flag.pause_action = true;
         ICON_Continue();
         #if ENABLED(POWER_LOSS_RECOVERY)
           if (recovery.enabled) recovery.save(true);
@@ -2084,10 +2270,10 @@ void HMI_PauseOrStop(void) {
             host_action_cancel();
           #endif
           #ifdef EVENT_GCODE_SD_ABORT
-            Popup_Window_Home();
+            Popup_Window_Home(true);
             queue.inject_P(PSTR(EVENT_GCODE_SD_ABORT));
           #endif
-          abort_flag = true;
+          dwin_abort_flag = true;
         #endif
       }
       else {
@@ -2114,20 +2300,20 @@ inline void Draw_Move_Menu() {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_MOVE_AXIS));
     #else
-      DWIN_Frame_TitleCopy(1, 231, 2, 265, 12);              // "Move"
+      DWIN_Frame_TitleCopy(1, 231, 2, 265, 12);                     // "Move"
     #endif
     draw_move_en(MBASE(1)); say_x(36, MBASE(1));                    // "Move X"
     draw_move_en(MBASE(2)); say_y(36, MBASE(2));                    // "Move Y"
     draw_move_en(MBASE(3)); say_z(36, MBASE(3));                    // "Move Z"
     #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 123, 192, 176, 202, LBLX, MBASE(4)); // "Extruder"
+      DWIN_Frame_AreaCopy(1, 123, 192, 176, 202, LBLX, MBASE(4));   // "Extruder"
     #endif
   }
 
   Draw_Back_First(select_axis.now == 0);
   if (select_axis.now) Draw_Menu_Cursor(select_axis.now);
 
-  // Draw separators so it looks like a menu
+  // Draw separators and icons
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MoveX + i);
 }
 
@@ -2144,13 +2330,13 @@ void HMI_AudioFeedback(const bool success=true) {
 }
 
 /* Prepare */
-void HMI_Prepare(void) {
+void HMI_Prepare() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_prepare.inc(8)) {
+    if (select_prepare.inc(1 + PREPARE_CASE_TOTAL)) {
       if (select_prepare.now > MROWS && select_prepare.now > index_prepare) {
         index_prepare = select_prepare.now;
 
@@ -2161,9 +2347,13 @@ void HMI_Prepare(void) {
         // Draw "More" icon for sub-menus
         if (index_prepare < 7) Draw_More_Icon(MROWS - index_prepare + 1);
 
-        if (index_prepare == 6) Prepare_Item_ABS(MROWS);
-        else if (index_prepare == 7) Prepare_Item_Cool(MROWS);
-        else if (index_prepare == 8) Prepare_Item_Lang(MROWS);
+        #if HAS_HOTEND
+          if (index_prepare == PREPARE_CASE_ABS) Item_Prepare_ABS(MROWS);
+        #endif
+        #if HAS_PREHEAT
+          if (index_prepare == PREPARE_CASE_COOL) Item_Prepare_Cool(MROWS);
+        #endif
+        if (index_prepare == PREPARE_CASE_LANG) Item_Prepare_Lang(MROWS);
       }
       else {
         Move_Highlight(1, select_prepare.now + MROWS - index_prepare);
@@ -2183,9 +2373,9 @@ void HMI_Prepare(void) {
 
         if (index_prepare < 7) Draw_More_Icon(MROWS - index_prepare + 1);
 
-        if (index_prepare == 6) Prepare_Item_Move(0);
-        else if (index_prepare == 7) Prepare_Item_Disable(0);
-        else if (index_prepare == 8) Prepare_Item_Home(0);
+             if (index_prepare == 6) Item_Prepare_Move(0);
+        else if (index_prepare == 7) Item_Prepare_Disable(0);
+        else if (index_prepare == 8) Item_Prepare_Home(0);
       }
       else {
         Move_Highlight(-1, select_prepare.now + MROWS - index_prepare);
@@ -2198,67 +2388,66 @@ void HMI_Prepare(void) {
         select_page.set(1);
         Goto_MainMenu();
         break;
-      case 1: // axis move
+      case PREPARE_CASE_MOVE: // Axis move
         checkkey = AxisMove;
         select_axis.reset();
         Draw_Move_Menu();
 
-        queue.inject_P(PSTR("G92 E0"));
-        current_position.e = HMI_ValueStruct.Move_E_scale = 0;
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), current_position.x * MINUNITMULT);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), current_position.y * MINUNITMULT);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), current_position.z * MINUNITMULT);
         #if HAS_HOTEND
-          DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), current_position.e * MINUNITMULT);
+          queue.inject_P(PSTR("G92 E0"));
+          current_position.e = HMI_ValueStruct.Move_E_scale = 0;
+          DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), 0);
         #endif
         break;
-      case 2: // close motion
+      case PREPARE_CASE_DISA: // Disable steppers
         queue.inject_P(PSTR("M84"));
         break;
-      case 3: // homing
+      case PREPARE_CASE_HOME: // Homing
         checkkey = Last_Prepare;
         index_prepare = MROWS;
         queue.inject_P(PSTR("G28")); // G28 will set home_flag
         Popup_Window_Home();
         break;
-      case 4: // Z-offset
-        #if HAS_BED_PROBE
-          checkkey = Homeoffset;
-          HMI_ValueStruct.show_mode = -4;
-          HMI_ValueStruct.offset_value = probe.offset.z * 100;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(4 + MROWS - index_prepare), HMI_ValueStruct.offset_value);
-          EncoderRate.encoderRateEnabled = 1;
-        #else
-          // Apply workspace offset, making the current position 0,0,0
-          queue.inject_P(PSTR("G92 X0 Y0 Z0"));
-          HMI_AudioFeedback();
-        #endif
-        break;
-      case 5: // PLA preheat
-        thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0);
-        thermalManager.setTargetBed(ui.material_preset[0].bed_temp);
-        thermalManager.set_fan_speed(0, ui.material_preset[0].fan_speed);
-        break;
-      case 6: // ABS preheat
-        thermalManager.setTargetHotend(ui.material_preset[1].hotend_temp, 0);
-        thermalManager.setTargetBed(ui.material_preset[1].bed_temp);
-        thermalManager.set_fan_speed(0, ui.material_preset[1].fan_speed);
-        break;
-      case 7: // cool
-        thermalManager.zero_fan_speeds();
-        thermalManager.disable_all_heaters();
-        break;
-      case 8: // language
-        /* select language */
-        HMI_flag.language_chinese ^= true;
-        if (HMI_flag.language_chinese) {
-          HMI_SetAndSaveLanguageChinese();
-          DWIN_JPG_CacheTo1(Language_Chinese);
-        }
-        else {
-          HMI_SetAndSaveLanguageWestern();
-          DWIN_JPG_CacheTo1(Language_English);
-        }
+      #if HAS_ZOFFSET_ITEM
+        case PREPARE_CASE_ZOFF: // Z-offset
+          #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
+            checkkey = Homeoffset;
+            HMI_ValueStruct.show_mode = -4;
+            HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
+            DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(PREPARE_CASE_ZOFF + MROWS - index_prepare), HMI_ValueStruct.offset_value);
+            EncoderRate.enabled = true;
+          #else
+            // Apply workspace offset, making the current position 0,0,0
+            queue.inject_P(PSTR("G92 X0 Y0 Z0"));
+            HMI_AudioFeedback();
+          #endif
+          break;
+      #endif
+      #if HAS_HOTEND
+        case PREPARE_CASE_PLA: // PLA preheat
+          thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0);
+          thermalManager.setTargetBed(ui.material_preset[0].bed_temp);
+          thermalManager.set_fan_speed(0, ui.material_preset[0].fan_speed);
+          break;
+        case PREPARE_CASE_ABS: // ABS preheat
+          thermalManager.setTargetHotend(ui.material_preset[1].hotend_temp, 0);
+          thermalManager.setTargetBed(ui.material_preset[1].bed_temp);
+          thermalManager.set_fan_speed(0, ui.material_preset[1].fan_speed);
+          break;
+      #endif
+      #if HAS_PREHEAT
+        case PREPARE_CASE_COOL: // Cool
+          TERN_(HAS_FAN, thermalManager.zero_fan_speeds());
+          #if HAS_HOTEND || HAS_HEATED_BED
+            thermalManager.disable_all_heaters();
+          #endif
+          break;
+      #endif
+      case PREPARE_CASE_LANG: // Toggle Language
+        HMI_ToggleLanguage();
         Draw_Prepare_Menu();
         break;
       default: break;
@@ -2271,72 +2460,108 @@ void Draw_Temperature_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 236, 2, 263, 13, 14, 8);
-
-    DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 100, 89, 178, 101, LBLX, MBASE(4));
-    DWIN_Frame_AreaCopy(1, 180, 89, 260, 100, LBLX, MBASE(5));
+    DWIN_Frame_TitleCopy(1, 236, 2, 263, 13); // "Temperature"
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(TEMP_CASE_TEMP));
+    #endif
+    #if HAS_HEATED_BED
+      DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX, MBASE(TEMP_CASE_BED));
+    #endif
+    #if HAS_FAN
+      DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX, MBASE(TEMP_CASE_FAN));
+    #endif
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 100, 89, 178, 101, LBLX, MBASE(TEMP_CASE_PLA));
+      DWIN_Frame_AreaCopy(1, 180, 89, 260, 100, LBLX, MBASE(TEMP_CASE_ABS));
+    #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_TEMPERATURE));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), GET_TEXT_F(MSG_FAN_SPEED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), F("PLA Preheat Settings"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(5), F("ABS Preheat Settings"));
+      #if HAS_HOTEND
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TEMP_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+      #endif
+      #if HAS_HEATED_BED
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TEMP_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+      #endif
+      #if HAS_FAN
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TEMP_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+      #endif
+      #if HAS_HOTEND
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TEMP_CASE_PLA), F("PLA Preheat Settings"));
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(TEMP_CASE_ABS), F("ABS Preheat Settings"));
+      #endif
     #else
-      DWIN_Frame_AreaCopy(1, 56, 16, 141, 28, 14, 8);
-      DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(1));           // Nozzle...
-      DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(1));      // ...Temperature
-      DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX, MBASE(2));           // Bed...
-      DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 27, MBASE(2));      // ...Temperature
-      DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX, MBASE(3));              // Fan speed
-      DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(4));             // Preheat...
-      DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(4));        // ...PLA
-      DWIN_Frame_AreaCopy(1, 131, 119, 182, 132, LBLX + 79, MBASE(4));  // PLA setting
-      DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(5));             // Preheat...
-      DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(5));        // ...ABS
-      DWIN_Frame_AreaCopy(1, 131, 119, 182, 132, LBLX + 81, MBASE(5));      // ABS setting
+      DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                       // "Temperature"
+      #if HAS_HOTEND
+        DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(TEMP_CASE_TEMP));      // Nozzle...
+        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(TEMP_CASE_TEMP));     // ...Temperature
+      #endif
+      #if HAS_HEATED_BED
+        DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX, MBASE(TEMP_CASE_BED));       // Bed...
+        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 27, MBASE(TEMP_CASE_BED));      // ...Temperature
+      #endif
+      #if HAS_FAN
+        DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX, MBASE(TEMP_CASE_FAN));          // Fan speed
+      #endif
+      #if HAS_HOTEND
+        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(TEMP_CASE_PLA));         // Preheat...
+        DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(TEMP_CASE_PLA));    // ...PLA
+        DWIN_Frame_AreaCopy(1, 131, 119, 182, 132, LBLX + 79, MBASE(TEMP_CASE_PLA));  // PLA setting
+        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(TEMP_CASE_ABS));         // Preheat...
+        DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(TEMP_CASE_ABS));    // ...ABS
+        DWIN_Frame_AreaCopy(1, 131, 119, 182, 132, LBLX + 81, MBASE(TEMP_CASE_ABS));  // ABS setting
+      #endif
     #endif
   }
 
   Draw_Back_First(select_temp.now == 0);
   if (select_temp.now) Draw_Menu_Cursor(select_temp.now);
 
-  LOOP_L_N(i, 5) Draw_Menu_Line(i + 1, ICON_SetEndTemp + i);
-
-  Draw_More_Icon(4);
-  Draw_More_Icon(5);
-
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), thermalManager.temp_hotend[0].target);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), thermalManager.temp_bed.target);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), thermalManager.fan_speed[0]);
+  // Draw icons and lines
+  uint8_t i = 0;
+  #define _TMENU_ICON(N) Draw_Menu_Line(++i, ICON_SetEndTemp + (N) - 1)
+  #if HAS_HOTEND
+    _TMENU_ICON(TEMP_CASE_TEMP);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), thermalManager.temp_hotend[0].target);
+  #endif
+  #if HAS_HEATED_BED
+    _TMENU_ICON(TEMP_CASE_BED);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), thermalManager.temp_bed.target);
+  #endif
+  #if HAS_FAN
+    _TMENU_ICON(TEMP_CASE_FAN);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), thermalManager.fan_speed[0]);
+  #endif
+  #if HAS_HOTEND
+    // PLA/ABS items have submenus
+    _TMENU_ICON(TEMP_CASE_PLA);
+    Draw_More_Icon(i);
+    _TMENU_ICON(TEMP_CASE_ABS);
+    Draw_More_Icon(i);
+  #endif
 }
 
 /* Control */
-void HMI_Control(void) {
+void HMI_Control() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    #define CONTROL_ITEMS (5 + ENABLED(HAS_ONESTEP_LEVELING))
-    if (select_control.inc(CONTROL_ITEMS)) {
+    if (select_control.inc(1 + CONTROL_CASE_TOTAL)) {
       if (select_control.now > MROWS && select_control.now > index_control) {
         index_control = select_control.now;
         Scroll_Menu(DWIN_SCROLL_UP);
-        Draw_Menu_Icon(MROWS, ICON_Temperature + select_control.now - 1);
-        Draw_More_Icon(1 + MROWS - index_control); // Temperature >
-        Draw_More_Icon(2 + MROWS - index_control); // Motion >
+        Draw_Menu_Icon(MROWS, ICON_Temperature + index_control - 1);
+        Draw_More_Icon(CONTROL_CASE_TEMP + MROWS - index_control); // Temperature >
+        Draw_More_Icon(CONTROL_CASE_MOVE + MROWS - index_control); // Motion >
         if (index_control > MROWS) {
-          Draw_More_Icon(6 + MROWS - index_control); // Info >
+          Draw_More_Icon(CONTROL_CASE_INFO + MROWS - index_control); // Info >
           if (HMI_flag.language_chinese)
-            DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, MBASE(5));
+            DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, MBASE(CONTROL_CASE_INFO - 1));
           else
-            DWIN_Frame_AreaCopy(1, 0, 104, 24, 114, LBLX, MBASE(5));
+            DWIN_Frame_AreaCopy(1, 0, 104, 24, 114, LBLX, MBASE(CONTROL_CASE_INFO - 1));
         }
       }
       else {
@@ -2367,33 +2592,32 @@ void HMI_Control(void) {
         select_page.set(2);
         Goto_MainMenu();
         break;
-      case 1: // temperature
+      case CONTROL_CASE_TEMP: // Temperature
         checkkey = TemperatureID;
         HMI_ValueStruct.show_mode = -1;
         select_temp.reset();
         Draw_Temperature_Menu();
         break;
-      case 2: // motion
+      case CONTROL_CASE_MOVE: // Motion
         checkkey = Motion;
         select_motion.reset();
         Draw_Motion_Menu();
         break;
-      case 3:
       #if ENABLED(EEPROM_SETTINGS)
-        { // write EEPROM
+        case CONTROL_CASE_SAVE: { // Write EEPROM
           const bool success = settings.save();
           HMI_AudioFeedback(success);
         } break;
-        case 4: { // read EEPROM
+        case CONTROL_CASE_LOAD: { // Read EEPROM
           const bool success = settings.load();
           HMI_AudioFeedback(success);
         } break;
-        case 5: // resume EEPROM
+        case CONTROL_CASE_RESET: // Reset EEPROM
           settings.reset();
           HMI_AudioFeedback();
           break;
-        case 6: // info
       #endif
+      case CONTROL_CASE_INFO: // Info
         checkkey = Info;
         Draw_Info_Menu();
         break;
@@ -2407,7 +2631,7 @@ void HMI_Control(void) {
 #if HAS_ONESTEP_LEVELING
 
   /* Leveling */
-  void HMI_Leveling(void) {
+  void HMI_Leveling() {
     Popup_Window_Leveling();
     DWIN_UpdateLCD();
     queue.inject_P(PSTR("G28O\nG29"));
@@ -2416,21 +2640,21 @@ void HMI_Control(void) {
 #endif
 
 /* Axis Move */
-void HMI_AxisMove(void) {
+void HMI_AxisMove() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
-  #if HAS_HOTEND
+  #if ENABLED(PREVENT_COLD_EXTRUSION)
     // popup window resume
     if (HMI_flag.ETempTooLow_flag) {
       if (encoder_diffState == ENCODER_DIFF_ENTER) {
-        HMI_flag.ETempTooLow_flag = 0;
-        Draw_Move_Menu();
+        HMI_flag.ETempTooLow_flag = false;
         current_position.e = HMI_ValueStruct.Move_E_scale = 0;
+        Draw_Move_Menu();
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
-        DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+        DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), 0);
         DWIN_UpdateLCD();
       }
       return;
@@ -2439,7 +2663,7 @@ void HMI_AxisMove(void) {
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_axis.inc(4)) Move_Highlight(1, select_axis.now);
+    if (select_axis.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_axis.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
     if (select_axis.dec()) Move_Highlight(-1, select_axis.now);
@@ -2456,26 +2680,26 @@ void HMI_AxisMove(void) {
         checkkey = Move_X;
         HMI_ValueStruct.Move_X_scale = current_position.x * MINUNITMULT;
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
-        EncoderRate.encoderRateEnabled = 1;
+        EncoderRate.enabled = true;
         break;
       case 2: // Y axis move
         checkkey = Move_Y;
         HMI_ValueStruct.Move_Y_scale = current_position.y * MINUNITMULT;
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
-        EncoderRate.encoderRateEnabled = 1;
+        EncoderRate.enabled = true;
         break;
       case 3: // Z axis move
         checkkey = Move_Z;
         HMI_ValueStruct.Move_Z_scale = current_position.z * MINUNITMULT;
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
-        EncoderRate.encoderRateEnabled = 1;
+        EncoderRate.enabled = true;
         break;
         #if HAS_HOTEND
           case 4: // Extruder
             // window tips
             #ifdef PREVENT_COLD_EXTRUSION
               if (thermalManager.temp_hotend[0].celsius < EXTRUDE_MINTEMP) {
-                HMI_flag.ETempTooLow_flag = 1;
+                HMI_flag.ETempTooLow_flag = true;
                 Popup_Window_ETempTooLow();
                 DWIN_UpdateLCD();
                 return;
@@ -2484,7 +2708,7 @@ void HMI_AxisMove(void) {
             checkkey = Extruder;
             HMI_ValueStruct.Move_E_scale = current_position.e * MINUNITMULT;
             DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
-            EncoderRate.encoderRateEnabled = 1;
+            EncoderRate.enabled = true;
             break;
         #endif
     }
@@ -2493,13 +2717,13 @@ void HMI_AxisMove(void) {
 }
 
 /* TemperatureID */
-void HMI_Temperature(void) {
+void HMI_Temperature() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_temp.inc(5)) Move_Highlight(1, select_temp.now);
+    if (select_temp.inc(1 + TEMP_CASE_TOTAL)) Move_Highlight(1, select_temp.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
     if (select_temp.dec()) Move_Highlight(-1, select_temp.now);
@@ -2512,141 +2736,184 @@ void HMI_Temperature(void) {
         index_control = MROWS;
         Draw_Control_Menu();
         break;
-        #if HAS_HOTEND
-          case 1: // nozzle temperature
-            checkkey = ETemp;
-            HMI_ValueStruct.E_Temp = thermalManager.temp_hotend[0].target;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1), thermalManager.temp_hotend[0].target);
-            EncoderRate.encoderRateEnabled = 1;
-            break;
-        #endif
-        #if HAS_HEATED_BED
-          case 2: // bed temperature
-            checkkey = BedTemp;
-            HMI_ValueStruct.Bed_Temp = thermalManager.temp_bed.target;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2), thermalManager.temp_bed.target);
-            EncoderRate.encoderRateEnabled = 1;
-            break;
-        #endif
-        #if HAS_FAN
-          case 3: // fan speed
-            checkkey = FanSpeed;
-            HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3), thermalManager.fan_speed[0]);
-            EncoderRate.encoderRateEnabled = 1;
-            break;
-        #endif
-        #if HAS_HOTEND
-          case 4: // PLA preheat setting
-            checkkey = PLAPreheat;
-            select_PLA.reset();
-            HMI_ValueStruct.show_mode = -2;
-
-            Clear_Main_Window();
-
-            if (HMI_flag.language_chinese) {
-              DWIN_Frame_AreaCopy(1, 59, 16, 139, 29, 14, 8);
-
-              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(1));
-              DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(1)); // PLA nozzle temp
-              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(2));
-              DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX + 24, MBASE(2)); // PLA bed temp
-              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(3));
-              DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX + 24, MBASE(3)); // PLA fan speed
-              DWIN_Frame_AreaCopy(1, 72, 148, 151, 162, LBLX, MBASE(4)); // save PLA configuration
-            }
-            else {
-              #ifdef USE_STRING_HEADINGS
-                Draw_Title("PLA Settings"); // TODO: GET_TEXT_F
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Nozzle Temp"));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), F("Bed Temp"));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), GET_TEXT_F(MSG_FAN_SPEED));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), GET_TEXT_F(MSG_STORE_EEPROM));
-              #else
-                DWIN_Frame_AreaCopy(1, 56, 16, 141, 28, 14, 8);
-                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(1));
-                DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(1));
-                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(1)); // PLA nozzle temp
-                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(2) + 3);
-                DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(2) + 3);
-                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 54, MBASE(2) + 3); // PLA bed temp
-                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(3));
-                DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(3)); // PLA fan speed
-                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(4)); // save PLA configuration
-              #endif
-            }
-
-            Draw_Back_First();
-
-            Draw_Menu_Line(1, ICON_SetEndTemp);
-            Draw_Menu_Line(2, ICON_SetBedTemp);
-            Draw_Menu_Line(3, ICON_FanSpeed);
+      #if HAS_HOTEND
+        case TEMP_CASE_TEMP: // Nozzle temperature
+          checkkey = ETemp;
+          HMI_ValueStruct.E_Temp = thermalManager.temp_hotend[0].target;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1), thermalManager.temp_hotend[0].target);
+          EncoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_HEATED_BED
+        case TEMP_CASE_BED: // Bed temperature
+          checkkey = BedTemp;
+          HMI_ValueStruct.Bed_Temp = thermalManager.temp_bed.target;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2), thermalManager.temp_bed.target);
+          EncoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_FAN
+        case TEMP_CASE_FAN: // Fan speed
+          checkkey = FanSpeed;
+          HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3), thermalManager.fan_speed[0]);
+          EncoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_HOTEND
+        case TEMP_CASE_PLA: { // PLA preheat setting
+          checkkey = PLAPreheat;
+          select_PLA.reset();
+          HMI_ValueStruct.show_mode = -2;
+
+          Clear_Main_Window();
+
+          if (HMI_flag.language_chinese) {
+            DWIN_Frame_TitleCopy(1, 59, 16, 139, 29);                                         // "PLA Settings"
+            DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_TEMP));
+            DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(PREHEAT_CASE_TEMP));     // PLA nozzle temp
+            #if HAS_HEATED_BED
+              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_BED));
+              DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX + 24, MBASE(PREHEAT_CASE_BED));  // PLA bed temp
+            #endif
+            #if HAS_FAN
+              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_FAN));
+              DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX + 24, MBASE(PREHEAT_CASE_FAN)); // PLA fan speed
+            #endif
             #if ENABLED(EEPROM_SETTINGS)
-              Draw_Menu_Line(4, ICON_WriteEEPROM);
+              DWIN_Frame_AreaCopy(1, 72, 148, 151, 162, LBLX, MBASE(PREHEAT_CASE_SAVE));      // Save PLA configuration
+            #endif
+          }
+          else {
+            #ifdef USE_STRING_HEADINGS
+              Draw_Title("PLA Settings"); // TODO: GET_TEXT_F
+              DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
+              #if HAS_HEATED_BED
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
+              #endif
+              #if HAS_FAN
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+              #endif
+              #if ENABLED(EEPROM_SETTINGS)
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+              #endif
+            #else
+              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                             // "PLA Settings"
+              DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_TEMP));
+              DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(PREHEAT_CASE_TEMP));
+              DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(PREHEAT_CASE_TEMP)); // PLA nozzle temp
+              #if HAS_HEATED_BED
+                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_BED) + 3);
+                DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(PREHEAT_CASE_BED) + 3);
+                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 54, MBASE(PREHEAT_CASE_BED) + 3); // PLA bed temp
+              #endif
+              #if HAS_FAN
+                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_FAN));
+                DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(PREHEAT_CASE_FAN));    // PLA fan speed
+              #endif
+              #if ENABLED(EEPROM_SETTINGS)
+                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(PREHEAT_CASE_SAVE));          // Save PLA configuration
+              #endif
             #endif
+          }
 
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), ui.material_preset[0].hotend_temp);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), ui.material_preset[0].bed_temp);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), ui.material_preset[0].fan_speed);
+          Draw_Back_First();
 
-            break;
+          uint8_t i = 0;
+          Draw_Menu_Line(++i, ICON_SetEndTemp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), ui.material_preset[0].hotend_temp);
+          #if HAS_HEATED_BED
+            Draw_Menu_Line(++i, ICON_SetBedTemp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), ui.material_preset[0].bed_temp);
+          #endif
+          #if HAS_FAN
+            Draw_Menu_Line(++i, ICON_FanSpeed);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), ui.material_preset[0].fan_speed);
+          #endif
+          #if ENABLED(EEPROM_SETTINGS)
+            Draw_Menu_Line(++i, ICON_WriteEEPROM);
+          #endif
+        } break;
 
-          case 5: // ABS preheat setting
-            checkkey = ABSPreheat;
-            select_ABS.reset();
-            HMI_ValueStruct.show_mode = -3;
-
-            Clear_Main_Window();
-
-            if (HMI_flag.language_chinese) {
-              DWIN_Frame_AreaCopy(1, 142, 16, 223, 29, 14, 8);
-
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(1));
-              DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(1));       // ABS nozzle temp
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(2));
-              DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX + 24, MBASE(2));     // ABS bed temp
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(3));
-              DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX + 24, MBASE(3));    // ABS fan speed
-              DWIN_Frame_AreaCopy(1, 72, 148, 151, 162, LBLX, MBASE(4));
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX + 28, MBASE(4) + 2); // save ABS configuration
-            }
-            else {
-              #ifdef USE_STRING_HEADINGS
-                Draw_Title("ABS Settings"); // TODO: GET_TEXT_F
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Nozzle Temp"));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), F("Bed Temp"));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), GET_TEXT_F(MSG_FAN_SPEED));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), GET_TEXT_F(MSG_STORE_EEPROM));
-              #else
-                DWIN_Frame_AreaCopy(1, 56, 16, 141, 28, 14, 8);
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(1));
-                DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(1));
-                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(1));      // ABS nozzle temp
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(2) + 3);
-                DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(2) + 3);
-                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 54, MBASE(2) + 3);  // ABS bed temp
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(3));
-                DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(3));     // ABS fan speed
-                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(4));
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 33, MBASE(4));    // save ABS configuration
-              #endif
-            }
+        case TEMP_CASE_ABS: { // ABS preheat setting
+          checkkey = ABSPreheat;
+          select_ABS.reset();
+          HMI_ValueStruct.show_mode = -3;
 
-            Draw_Back_First();
+          Clear_Main_Window();
 
-            Draw_Menu_Line(1, ICON_SetEndTemp);
-            Draw_Menu_Line(2, ICON_SetBedTemp);
-            Draw_Menu_Line(3, ICON_FanSpeed);
+          if (HMI_flag.language_chinese) {
+            DWIN_Frame_TitleCopy(1, 142, 16, 223, 29);                                        // "ABS Settings"
+
+            DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_TEMP));
+            DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(PREHEAT_CASE_TEMP));    // ABS nozzle temp
+            #if HAS_HEATED_BED
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_BED));
+              DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX + 24, MBASE(PREHEAT_CASE_BED));  // ABS bed temp
+            #endif
+            #if HAS_FAN
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_FAN));
+              DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX + 24, MBASE(PREHEAT_CASE_FAN)); // ABS fan speed
+            #endif
             #if ENABLED(EEPROM_SETTINGS)
-              Draw_Menu_Line(4, ICON_WriteEEPROM);
+              DWIN_Frame_AreaCopy(1, 72, 148, 151, 162, LBLX, MBASE(PREHEAT_CASE_SAVE));
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX + 28, MBASE(PREHEAT_CASE_SAVE) + 2);   // Save ABS configuration
+            #endif
+          }
+          else {
+            #ifdef USE_STRING_HEADINGS
+              Draw_Title("ABS Settings"); // TODO: GET_TEXT_F
+              DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
+              #if HAS_HEATED_BED
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
+              #endif
+              #if HAS_FAN
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+              #endif
+              #if ENABLED(EEPROM_SETTINGS)
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+              #endif
+            #else
+              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                                  // "ABS Settings"
+              DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_TEMP));
+              DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(PREHEAT_CASE_TEMP));
+              DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(PREHEAT_CASE_TEMP));      // ABS nozzle temp
+              #if HAS_HEATED_BED
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_BED) + 3);
+                DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(PREHEAT_CASE_BED) + 3);
+                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 54, MBASE(PREHEAT_CASE_BED) + 3); // ABS bed temp
+              #endif
+              #if HAS_FAN
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_FAN));
+                DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(PREHEAT_CASE_FAN));             // ABS fan speed
+              #endif
+              #if ENABLED(EEPROM_SETTINGS)
+                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(PREHEAT_CASE_SAVE));
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 33, MBASE(PREHEAT_CASE_SAVE));                     // Save ABS configuration
+              #endif
             #endif
+          }
 
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), ui.material_preset[1].hotend_temp);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), ui.material_preset[1].bed_temp);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), ui.material_preset[1].fan_speed);
+          Draw_Back_First();
 
-            break;
-        #endif // HAS_HOTEND
+          uint8_t i = 0;
+          Draw_Menu_Line(++i, ICON_SetEndTemp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), ui.material_preset[1].hotend_temp);
+          #if HAS_HEATED_BED
+            Draw_Menu_Line(++i, ICON_SetBedTemp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), ui.material_preset[1].bed_temp);
+          #endif
+          #if HAS_FAN
+            Draw_Menu_Line(++i, ICON_FanSpeed);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(i), ui.material_preset[1].fan_speed);
+          #endif
+          #if ENABLED(EEPROM_SETTINGS)
+            Draw_Menu_Line(++i, ICON_WriteEEPROM);
+          #endif
+
+        } break;
+
+      #endif // HAS_HOTEND
     }
   }
   DWIN_UpdateLCD();
@@ -2659,18 +2926,18 @@ inline void Draw_Max_Speed_Menu() {
     DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Max Speed (mm/s)"
 
     auto say_max_speed = [](const uint16_t row) {
-      DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, row);        // "Max speed"
+      DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, row);              // "Max speed"
     };
 
-    say_max_speed(MBASE(1));                                                // "Max speed"
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 58, MBASE(1)); // X
-    say_max_speed(MBASE(2));                                                // "Max speed"
-    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 58, MBASE(2) + 3); // Y
-    say_max_speed(MBASE(3));                                                // "Max speed"
-    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 58, MBASE(3) + 3); // Z
+    say_max_speed(MBASE(1));                                              // "Max speed"
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 58, MBASE(1));      // X
+    say_max_speed(MBASE(2));                                              // "Max speed"
+    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 58, MBASE(2) + 3);      // Y
+    say_max_speed(MBASE(3));                                              // "Max speed"
+    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 58, MBASE(3) + 3);     // Z
     #if HAS_HOTEND
-      say_max_speed(MBASE(4));                                              // "Max speed"
-      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 58, MBASE(4) + 3); // E
+      say_max_speed(MBASE(4));                                            // "Max speed"
+      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 58, MBASE(4) + 3);  // E
     #endif
   }
   else {
@@ -2745,7 +3012,7 @@ inline void Draw_Max_Accel_Menu() {
         DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), F("Max Accel E"));
       #endif
     #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);                  // "Acceleration"
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);          // "Acceleration"
       draw_max_accel_en(MBASE(1)); say_x(108, MBASE(1));  // "Max Acceleration X"
       draw_max_accel_en(MBASE(2)); say_y(108, MBASE(2));  // "Max Acceleration Y"
       draw_max_accel_en(MBASE(3)); say_z(108, MBASE(3));  // "Max Acceleration Z"
@@ -2883,13 +3150,13 @@ inline void Draw_Steps_Menu() {
 }
 
 /* Motion */
-void HMI_Motion(void) {
+void HMI_Motion() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_motion.inc(4)) Move_Highlight(1, select_motion.now);
+    if (select_motion.inc(1 + MOTION_CASE_TOTAL)) Move_Highlight(1, select_motion.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
     if (select_motion.dec()) Move_Highlight(-1, select_motion.now);
@@ -2898,26 +3165,28 @@ void HMI_Motion(void) {
     switch (select_motion.now) {
       case 0: // Back
         checkkey = Control;
-        select_control.set(2);
+        select_control.set(CONTROL_CASE_MOVE);
         index_control = MROWS;
         Draw_Control_Menu();
         break;
-      case 1: // max speed
+      case MOTION_CASE_RATE:   // Max speed
         checkkey = MaxSpeed;
         select_speed.reset();
         Draw_Max_Speed_Menu();
         break;
-      case 2: // max acceleration
+      case MOTION_CASE_ACCEL:  // Max acceleration
         checkkey = MaxAcceleration;
         select_acc.reset();
         Draw_Max_Accel_Menu();
         break;
-      case 3: // max jerk speed
-        checkkey = MaxJerk;
-        select_jerk.reset();
-        Draw_Max_Jerk_Menu();
-        break;
-      case 4: // transmission ratio
+      #if HAS_CLASSIC_JERK
+        case MOTION_CASE_JERK: // Max jerk
+          checkkey = MaxJerk;
+          select_jerk.reset();
+          Draw_Max_Jerk_Menu();
+         break;
+      #endif
+      case MOTION_CASE_STEPS:  // Steps per mm
         checkkey = Step;
         select_step.reset();
         Draw_Steps_Menu();
@@ -2929,13 +3198,13 @@ void HMI_Motion(void) {
 }
 
 /* Info */
-void HMI_Info(void) {
+void HMI_Info() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
   if (encoder_diffState == ENCODER_DIFF_ENTER) {
     #if HAS_ONESTEP_LEVELING
       checkkey = Control;
-      select_control.set(CONTROL_ITEMS);
+      select_control.set(CONTROL_CASE_INFO);
       Draw_Control_Menu();
     #else
       select_page.set(3);
@@ -2946,17 +3215,16 @@ void HMI_Info(void) {
 }
 
 /* Tune */
-void HMI_Tune(void) {
+void HMI_Tune() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_tune.inc(6)) {
+    if (select_tune.inc(1 + TUNE_CASE_TOTAL)) {
       if (select_tune.now > MROWS && select_tune.now > index_tune) {
         index_tune = select_tune.now;
         Scroll_Menu(DWIN_SCROLL_UP);
-        Prepare_Item_Lang(5);
       }
       else {
         Move_Highlight(1, select_tune.now + MROWS - index_tune);
@@ -2982,186 +3250,180 @@ void HMI_Tune(void) {
         Goto_PrintProcess();
       }
       break;
-      case 1: // Print speed
+      case TUNE_CASE_SPEED: // Print speed
         checkkey = PrintSpeed;
         HMI_ValueStruct.print_speed = feedrate_percentage;
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1 + MROWS - index_tune), feedrate_percentage);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-        #if HAS_HOTEND
-          case 2: // Nozzle temp
-            checkkey = ETemp;
-            HMI_ValueStruct.E_Temp = thermalManager.temp_hotend[0].target;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2 + MROWS - index_tune), thermalManager.temp_hotend[0].target);
-            EncoderRate.encoderRateEnabled = 1;
-            break;
-        #endif
-        #if HAS_HEATED_BED
-          case 3: // Bed temp
-            checkkey = BedTemp;
-            HMI_ValueStruct.Bed_Temp = thermalManager.temp_bed.target;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3 + MROWS - index_tune), thermalManager.temp_bed.target);
-            EncoderRate.encoderRateEnabled = 1;
-            break;
-        #endif
-        #if HAS_FAN
-          case 4: // Fan speed
-            checkkey = FanSpeed;
-            HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(4 + MROWS - index_tune), thermalManager.fan_speed[0]);
-            EncoderRate.encoderRateEnabled = 1;
-            break;
-        #endif
-      case 5: // Z-offset
-        checkkey = Homeoffset;
-        HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
-        DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(5 + MROWS - index_tune), HMI_ValueStruct.offset_value);
-        EncoderRate.encoderRateEnabled = 1;
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(TUNE_CASE_SPEED + MROWS - index_tune), feedrate_percentage);
+        EncoderRate.enabled = true;
         break;
-      case 6: // Language
-        // Select language
-        HMI_flag.language_chinese ^= true;
-
-        Clear_Main_Window();
-
-        if (HMI_flag.language_chinese) {
-          HMI_SetAndSaveLanguageChinese();
-          DWIN_JPG_CacheTo1(Language_Chinese);
-        }
-        else {
-          HMI_SetAndSaveLanguageWestern();
-          DWIN_JPG_CacheTo1(Language_English);
-        }
-
-        Draw_Tune_Menu();
+      #if HAS_HOTEND
+        case TUNE_CASE_TEMP: // Nozzle temp
+          checkkey = ETemp;
+          HMI_ValueStruct.E_Temp = thermalManager.temp_hotend[0].target;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), thermalManager.temp_hotend[0].target);
+          EncoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_HEATED_BED
+        case TUNE_CASE_BED: // Bed temp
+          checkkey = BedTemp;
+          HMI_ValueStruct.Bed_Temp = thermalManager.temp_bed.target;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), thermalManager.temp_bed.target);
+          EncoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_FAN
+        case TUNE_CASE_FAN: // Fan speed
+          checkkey = FanSpeed;
+          HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), thermalManager.fan_speed[0]);
+          EncoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_ZOFFSET_ITEM
+        case TUNE_CASE_ZOFF: // Z-offset
+          #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
+            checkkey = Homeoffset;
+            HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
+            DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(TUNE_CASE_ZOFF + MROWS - index_tune), HMI_ValueStruct.offset_value);
+            EncoderRate.enabled = true;
+          #else
+            // Apply workspace offset, making the current position 0,0,0
+            queue.inject_P(PSTR("G92 X0 Y0 Z0"));
+            HMI_AudioFeedback();
+          #endif
         break;
-
+      #endif
       default: break;
     }
   }
   DWIN_UpdateLCD();
 }
 
-/* PLA Preheat */
-void HMI_PLAPreheatSetting(void) {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
+#if HAS_PREHEAT
 
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_PLA.inc(4)) Move_Highlight(1, select_PLA.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_PLA.dec()) Move_Highlight(-1, select_PLA.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_PLA.now) {
-      case 0: // Back
-        checkkey = TemperatureID;
-        select_temp.now = 4;
-        HMI_ValueStruct.show_mode = -1;
-        Draw_Temperature_Menu();
-        break;
+  /* PLA Preheat */
+  void HMI_PLAPreheatSetting() {
+    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+    // Avoid flicker by updating only the previous menu
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      if (select_PLA.inc(1 + PREHEAT_CASE_TOTAL)) Move_Highlight(1, select_PLA.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      if (select_PLA.dec()) Move_Highlight(-1, select_PLA.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      switch (select_PLA.now) {
+        case 0: // Back
+          checkkey = TemperatureID;
+          select_temp.now = TEMP_CASE_PLA;
+          HMI_ValueStruct.show_mode = -1;
+          Draw_Temperature_Menu();
+          break;
         #if HAS_HOTEND
-          case 1: // set nozzle temperature
+          case PREHEAT_CASE_TEMP: // Nozzle temperature
             checkkey = ETemp;
             HMI_ValueStruct.E_Temp = ui.material_preset[0].hotend_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1), ui.material_preset[0].hotend_temp);
-            EncoderRate.encoderRateEnabled = 1;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_TEMP), ui.material_preset[0].hotend_temp);
+            EncoderRate.enabled = true;
             break;
         #endif
         #if HAS_HEATED_BED
-          case 2: // set bed temperature
+          case PREHEAT_CASE_BED: // Bed temperature
             checkkey = BedTemp;
             HMI_ValueStruct.Bed_Temp = ui.material_preset[0].bed_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2), ui.material_preset[0].bed_temp);
-            EncoderRate.encoderRateEnabled = 1;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_BED), ui.material_preset[0].bed_temp);
+            EncoderRate.enabled = true;
             break;
         #endif
         #if HAS_FAN
-          case 3: // set fan speed
+          case PREHEAT_CASE_FAN: // Fan speed
             checkkey = FanSpeed;
             HMI_ValueStruct.Fan_speed = ui.material_preset[0].fan_speed;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3), ui.material_preset[0].fan_speed);
-            EncoderRate.encoderRateEnabled = 1;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_FAN), ui.material_preset[0].fan_speed);
+            EncoderRate.enabled = true;
             break;
         #endif
-      #if ENABLED(EEPROM_SETTINGS)
-        case 4: { // Save PLA configuration
-          const bool success = settings.save();
-          HMI_AudioFeedback(success);
-        } break;
-      #endif
-      default: break;
+        #if ENABLED(EEPROM_SETTINGS)
+          case 4: { // Save PLA configuration
+            const bool success = settings.save();
+            HMI_AudioFeedback(success);
+          } break;
+        #endif
+        default: break;
+      }
     }
+    DWIN_UpdateLCD();
   }
-  DWIN_UpdateLCD();
-}
 
-/* ABS Preheat */
-void HMI_ABSPreheatSetting(void) {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
+  /* ABS Preheat */
+  void HMI_ABSPreheatSetting() {
+    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
 
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_ABS.inc(4)) Move_Highlight(1, select_ABS.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_ABS.dec()) Move_Highlight(-1, select_ABS.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_ABS.now) {
-      case 0: // Back
-        checkkey = TemperatureID;
-        select_temp.now = 5;
-        HMI_ValueStruct.show_mode = -1;
-        Draw_Temperature_Menu();
-        break;
+    // Avoid flicker by updating only the previous menu
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      if (select_ABS.inc(1 + PREHEAT_CASE_TOTAL)) Move_Highlight(1, select_ABS.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      if (select_ABS.dec()) Move_Highlight(-1, select_ABS.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      switch (select_ABS.now) {
+        case 0: // Back
+          checkkey = TemperatureID;
+          select_temp.now = TEMP_CASE_ABS;
+          HMI_ValueStruct.show_mode = -1;
+          Draw_Temperature_Menu();
+          break;
         #if HAS_HOTEND
-          case 1: // set nozzle temperature
+          case PREHEAT_CASE_TEMP: // Set nozzle temperature
             checkkey = ETemp;
             HMI_ValueStruct.E_Temp = ui.material_preset[1].hotend_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1), ui.material_preset[1].hotend_temp);
-            EncoderRate.encoderRateEnabled = 1;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_TEMP), ui.material_preset[1].hotend_temp);
+            EncoderRate.enabled = true;
             break;
         #endif
         #if HAS_HEATED_BED
-          case 2: // set bed temperature
+          case PREHEAT_CASE_BED: // Set bed temperature
             checkkey = BedTemp;
             HMI_ValueStruct.Bed_Temp = ui.material_preset[1].bed_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2), ui.material_preset[1].bed_temp);
-            EncoderRate.encoderRateEnabled = 1;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_BED), ui.material_preset[1].bed_temp);
+            EncoderRate.enabled = true;
             break;
         #endif
         #if HAS_FAN
-          case 3: // set fan speed
+          case PREHEAT_CASE_FAN: // Set fan speed
             checkkey = FanSpeed;
             HMI_ValueStruct.Fan_speed = ui.material_preset[1].fan_speed;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3), ui.material_preset[1].fan_speed);
-            EncoderRate.encoderRateEnabled = 1;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_FAN), ui.material_preset[1].fan_speed);
+            EncoderRate.enabled = true;
             break;
         #endif
-      #if ENABLED(EEPROM_SETTINGS)
-        case 4: { // save ABS configuration
-          const bool success = settings.save();
-          HMI_AudioFeedback(success);
-        } break;
-      #endif
-      default: break;
+        #if ENABLED(EEPROM_SETTINGS)
+          case PREHEAT_CASE_SAVE: { // Save ABS configuration
+            const bool success = settings.save();
+            HMI_AudioFeedback(success);
+          } break;
+        #endif
+        default: break;
+      }
     }
+    DWIN_UpdateLCD();
   }
-  DWIN_UpdateLCD();
-}
+
+#endif
 
 /* Max Speed */
-void HMI_MaxSpeed(void) {
+void HMI_MaxSpeed() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_speed.inc(4)) Move_Highlight(1, select_speed.now);
+    if (select_speed.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_speed.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
     if (select_speed.dec()) Move_Highlight(-1, select_speed.now);
@@ -3169,14 +3431,14 @@ void HMI_MaxSpeed(void) {
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (WITHIN(select_speed.now, 1, 4)) {
       checkkey = MaxSpeed_value;
-      HMI_flag.feedspeed_flag = AxisEnum(select_speed.now - 1);
-      HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[HMI_flag.feedspeed_flag];
+      HMI_flag.feedspeed_axis = AxisEnum(select_speed.now - 1);
+      HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[HMI_flag.feedspeed_axis];
       DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
-      EncoderRate.encoderRateEnabled = 1;
+      EncoderRate.enabled = true;
     }
     else { // Back
       checkkey = Motion;
-      select_motion.now = 1;
+      select_motion.now = MOTION_CASE_RATE;
       Draw_Motion_Menu();
     }
   }
@@ -3184,13 +3446,13 @@ void HMI_MaxSpeed(void) {
 }
 
 /* Max Acceleration */
-void HMI_MaxAcceleration(void) {
+void HMI_MaxAcceleration() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_acc.inc(4)) Move_Highlight(1, select_acc.now);
+    if (select_acc.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_acc.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
     if (select_acc.dec()) Move_Highlight(-1, select_acc.now);
@@ -3198,57 +3460,59 @@ void HMI_MaxAcceleration(void) {
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (WITHIN(select_acc.now, 1, 4)) {
       checkkey = MaxAcceleration_value;
-      HMI_flag.acc_flag = AxisEnum(select_acc.now - 1);
-      HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[HMI_flag.acc_flag];
+      HMI_flag.acc_axis = AxisEnum(select_acc.now - 1);
+      HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[HMI_flag.acc_axis];
       DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
-      EncoderRate.encoderRateEnabled = 1;
+      EncoderRate.enabled = true;
     }
     else { // Back
       checkkey = Motion;
-      select_motion.now = 2;
+      select_motion.now = MOTION_CASE_ACCEL;
       Draw_Motion_Menu();
     }
   }
   DWIN_UpdateLCD();
 }
 
-/* Max Jerk */
-void HMI_MaxJerk(void) {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
+#if HAS_CLASSIC_JERK
+  /* Max Jerk */
+  void HMI_MaxJerk() {
+    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
 
-  // Avoid flicker by updating only the previous menu
-  if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_jerk.inc(4)) Move_Highlight(1, select_jerk.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_jerk.dec()) Move_Highlight(-1, select_jerk.now);
-  }
-  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    if (WITHIN(select_jerk.now, 1, 4)) {
-      checkkey = MaxJerk_value;
-      HMI_flag.jerk_flag = AxisEnum(select_jerk.now - 1);
-      HMI_ValueStruct.Max_Jerk = planner.max_jerk[HMI_flag.jerk_flag] * MINUNITMULT;
-      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
-      EncoderRate.encoderRateEnabled = 1;
+    // Avoid flicker by updating only the previous menu
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      if (select_jerk.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_jerk.now);
     }
-    else { // Back
-      checkkey = Motion;
-      select_motion.now = 3;
-      Draw_Motion_Menu();
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      if (select_jerk.dec()) Move_Highlight(-1, select_jerk.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      if (WITHIN(select_jerk.now, 1, 4)) {
+        checkkey = MaxJerk_value;
+        HMI_flag.jerk_axis = AxisEnum(select_jerk.now - 1);
+        HMI_ValueStruct.Max_Jerk = planner.max_jerk[HMI_flag.jerk_axis] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
+        EncoderRate.enabled = true;
+      }
+      else { // Back
+        checkkey = Motion;
+        select_motion.now = MOTION_CASE_JERK;
+        Draw_Motion_Menu();
+      }
     }
+    DWIN_UpdateLCD();
   }
-  DWIN_UpdateLCD();
-}
+#endif // HAS_CLASSIC_JERK
 
 /* Step */
-void HMI_Step(void) {
+void HMI_Step() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_step.inc(4)) Move_Highlight(1, select_step.now);
+    if (select_step.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_step.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
     if (select_step.dec()) Move_Highlight(-1, select_step.now);
@@ -3256,21 +3520,21 @@ void HMI_Step(void) {
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (WITHIN(select_step.now, 1, 4)) {
       checkkey = Step_value;
-      HMI_flag.step_flag = AxisEnum(select_step.now - 1);
-      HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[HMI_flag.step_flag] * MINUNITMULT;
+      HMI_flag.step_axis = AxisEnum(select_step.now - 1);
+      HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[HMI_flag.step_axis] * MINUNITMULT;
       DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
-      EncoderRate.encoderRateEnabled = 1;
+      EncoderRate.enabled = true;
     }
     else { // Back
       checkkey = Motion;
-      select_motion.now = 4;
+      select_motion.now = MOTION_CASE_STEPS;
       Draw_Motion_Menu();
     }
   }
   DWIN_UpdateLCD();
 }
 
-void HMI_Init(void) {
+void HMI_Init() {
   HMI_SDCardInit();
 
   for (uint16_t t = 0; t <= 100; t += 2) {
@@ -3283,13 +3547,13 @@ void HMI_Init(void) {
   HMI_SetLanguage();
 }
 
-void DWIN_Update(void) {
+void DWIN_Update() {
   EachMomentUpdate();   // Status update
   HMI_SDCardUpdate();   // SD card update
   DWIN_HandleScreen();  // Rotary encoder update
 }
 
-void EachMomentUpdate(void) {
+void EachMomentUpdate() {
   static millis_t next_rts_update_ms = 0;
   const millis_t ms = millis();
   if (PENDING(ms, next_rts_update_ms)) return;
@@ -3300,9 +3564,9 @@ void EachMomentUpdate(void) {
 
   if (checkkey == PrintProcess) {
     // if print done
-    if (HMI_flag.print_finish && !HMI_flag.confirm_flag) {
-      HMI_flag.print_finish = 0;
-      HMI_flag.confirm_flag = 1;
+    if (HMI_flag.print_finish && !HMI_flag.done_confirm_flag) {
+      HMI_flag.print_finish = false;
+      HMI_flag.done_confirm_flag = true;
 
       TERN_(POWER_LOSS_RECOVERY, recovery.cancel());
 
@@ -3313,7 +3577,7 @@ void EachMomentUpdate(void) {
       Draw_Print_ProgressBar();
 
       // show print done confirm
-      DWIN_Draw_Rectangle(1, Background_black, 0, 250,  271, 360);
+      DWIN_Draw_Rectangle(1, Background_black, 0, 250, DWIN_WIDTH - 1, STATUS_Y);
       DWIN_ICON_Show(ICON, HMI_flag.language_chinese ? ICON_Confirm_C : ICON_Confirm_E, 86, 283);
     }
     else if (HMI_flag.pause_flag != printingIsPaused()) {
@@ -3324,11 +3588,15 @@ void EachMomentUpdate(void) {
   }
 
   // pause after homing
-  if (pause_action_flag && printingIsPaused() && !planner.has_blocks_queued()) {
-    pause_action_flag = 0;
+  if (HMI_flag.pause_action && printingIsPaused() && !planner.has_blocks_queued()) {
+    HMI_flag.pause_action = false;
     #if ENABLED(PAUSE_HEAT)
-      tempbed = thermalManager.temp_bed.target;
-      temphot = thermalManager.temp_hotend[0].target;
+      #if HAS_HEATED_BED
+        tempbed = thermalManager.temp_bed.target;
+      #endif
+      #if HAS_HOTEND
+        temphot = thermalManager.temp_hotend[0].target;
+      #endif
       thermalManager.disable_all_heaters();
     #endif
     queue.inject_P(PSTR("G1 F1200 X0 Y0"));
@@ -3348,6 +3616,7 @@ void EachMomentUpdate(void) {
     duration_t elapsed = print_job_timer.duration(); // print timer
 
     // Print time so far
+    static uint16_t last_Printtime = 0;
     const uint16_t min = (elapsed.value % 3600) / 60;
     if (last_Printtime != min) { // 1 minute update
       last_Printtime = min;
@@ -3356,14 +3625,14 @@ void EachMomentUpdate(void) {
 
     // Estimate remaining time every 20 seconds
     static millis_t next_remain_time_update = 0;
-    if (Percentrecord > 1 && ELAPSED(ms, next_remain_time_update) && HMI_flag.heat_flag == 0) {
+    if (Percentrecord > 1 && ELAPSED(ms, next_remain_time_update) && !HMI_flag.heat_flag) {
       remain_time = (elapsed.value - dwin_heat_time) / (Percentrecord * 0.01f) - (elapsed.value - dwin_heat_time);
       next_remain_time_update += 20 * 1000UL;
       Draw_Print_ProgressRemain();
     }
   }
-  else if (abort_flag && !HMI_flag.home_flag) { // Print Stop
-    abort_flag = 0;
+  else if (dwin_abort_flag && !HMI_flag.home_flag) { // Print Stop
+    dwin_abort_flag = false;
     HMI_ValueStruct.print_speed = feedrate_percentage = 100;
     dwin_zoffset = TERN0(HAS_BED_PROBE, probe.offset.z);
 
@@ -3378,6 +3647,7 @@ void EachMomentUpdate(void) {
   }
   #if ENABLED(POWER_LOSS_RECOVERY)
     else if (DWIN_lcd_sd_status && recovery.dwin_flag) { // resume print before power off
+      static bool recovery_flag = false;
       recovery.dwin_flag = false;
 
       recovery.load();
@@ -3403,8 +3673,8 @@ void EachMomentUpdate(void) {
         // with the active filename which can come from CardReader.
         card.getfilename_sorted(SD_ORDER(i, fileCnt));
         if (!strcmp(card.filename, &recovery.info.sd_filename[1])) { // Resume print before power failure while have the same file
-          recovery_flag = 1;
-          HMI_flag.select_flag = 1;
+          recovery_flag = true;
+          HMI_flag.select_flag = true;
           Popup_Window_Resume();
           draw_first_option(false);
           char * const name = card.longest_filename();
@@ -3422,7 +3692,7 @@ void EachMomentUpdate(void) {
         ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
         if (encoder_diffState != ENCODER_DIFF_NO) {
           if (encoder_diffState == ENCODER_DIFF_ENTER) {
-            recovery_flag = 0;
+            recovery_flag = false;
             if (HMI_flag.select_flag) break;
             TERN_(POWER_LOSS_RECOVERY, recovery.cancel());
             HMI_StartFrame(true);
@@ -3445,7 +3715,7 @@ void EachMomentUpdate(void) {
   DWIN_UpdateLCD();
 }
 
-void DWIN_HandleScreen(void) {
+void DWIN_HandleScreen() {
   switch (checkkey) {
     case MainMenu:        HMI_MainMenu(); break;
     case SelectFile:      HMI_SelectFile(); break;
@@ -3459,8 +3729,10 @@ void DWIN_HandleScreen(void) {
     case Motion:          HMI_Motion(); break;
     case Info:            HMI_Info(); break;
     case Tune:            HMI_Tune(); break;
-    case PLAPreheat:      HMI_PLAPreheatSetting(); break;
-    case ABSPreheat:      HMI_ABSPreheatSetting(); break;
+    #if HAS_PREHEAT
+      case PLAPreheat:    HMI_PLAPreheatSetting(); break;
+      case ABSPreheat:    HMI_ABSPreheatSetting(); break;
+    #endif
     case MaxSpeed:        HMI_MaxSpeed(); break;
     case MaxAcceleration: HMI_MaxAcceleration(); break;
     case MaxJerk:         HMI_MaxJerk(); break;
@@ -3472,11 +3744,13 @@ void DWIN_HandleScreen(void) {
       case Extruder:      HMI_Move_E(); break;
       case ETemp:         HMI_ETemp(); break;
     #endif
-    case Homeoffset:      HMI_Zoffset(); break;
+    #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
+      case Homeoffset:    HMI_Zoffset(); break;
+    #endif
     #if HAS_HEATED_BED
       case BedTemp:       HMI_BedTemp(); break;
     #endif
-    #if HAS_FAN
+    #if HAS_PREHEAT
       case FanSpeed:      HMI_FanSpeed(); break;
     #endif
     case PrintSpeed:      HMI_PrintSpeed(); break;
@@ -3488,11 +3762,11 @@ void DWIN_HandleScreen(void) {
   }
 }
 
-void DWIN_CompletedHoming(void) {
+void DWIN_CompletedHoming() {
   HMI_flag.home_flag = false;
   if (checkkey == Last_Prepare) {
     checkkey = Prepare;
-    select_prepare.now = 3;
+    select_prepare.now = PREPARE_CASE_HOME;
     index_prepare = MROWS;
     Draw_Prepare_Menu();
   }
@@ -3504,7 +3778,7 @@ void DWIN_CompletedHoming(void) {
   }
 }
 
-void DWIN_CompletedLeveling(void) {
+void DWIN_CompletedLeveling() {
   if (checkkey == Leveling) Goto_MainMenu();
 }
 

commit 217bae9ff156c0c65c19606a32e42425ea39c68d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Sep 16 06:56:48 2020 -0500

    More DWIN cleanup

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 1bef8f1408..c942929805 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -32,6 +32,10 @@
   #define HAS_ONESTEP_LEVELING 1
 #endif
 
+#if HAS_HOTEND || HAS_HEATED_BED || HAS_FAN
+  #define HAS_COOLDOWN 1
+#endif
+
 #include "dwin.h"
 
 #include <WString.h>
@@ -116,7 +120,7 @@
 // Feedspeed limit (max feedspeed = DEFAULT_MAX_FEEDRATE * 2)
 #define MIN_MAXFEEDSPEED      1
 #define MIN_MAXACCELERATION   1
-#define MIN_MAXCORNER         0.1
+#define MIN_MAXJERK           0.1
 #define MIN_STEP              1
 
 #define FEEDRATE_E      (60)
@@ -134,7 +138,7 @@ constexpr uint16_t TROWS = 6, MROWS = TROWS - 1,        // Total rows, and other
                    LBLX = 60,                           // Menu item label X
                    MENU_CHR_W = 8, STAT_CHR_W = 10;
 
-#define MBASE(L) (49 + (L)*MLINE)
+#define MBASE(L) (49 + MLINE * (L))
 
 #define BABY_Z_VAR TERN(HAS_BED_PROBE, probe.offset.z, dwin_zoffset)
 
@@ -415,7 +419,7 @@ inline void Clear_Main_Window(void) {
 
 inline void Clear_Popup_Area(void) {
   Clear_Title_Bar();
-  DWIN_Draw_Rectangle(1, Background_black,  0,  31, DWIN_WIDTH, DWIN_HEIGHT);
+  DWIN_Draw_Rectangle(1, Background_black, 0, 31, DWIN_WIDTH, DWIN_HEIGHT);
 }
 
 void Draw_Popup_Bkgd_105(void) {
@@ -423,16 +427,16 @@ void Draw_Popup_Bkgd_105(void) {
 }
 
 inline void Draw_More_Icon(const uint8_t line) {
-  DWIN_ICON_Show(ICON, ICON_More, 226, 46 + line * MLINE);
+  DWIN_ICON_Show(ICON, ICON_More, 226, MBASE(line) - 3);
 }
 
 inline void Draw_Menu_Cursor(const uint8_t line) {
-  // DWIN_ICON_Show(ICON,ICON_Rectangle, 0, 31 + line * MLINE);
-  DWIN_Draw_Rectangle(1, Rectangle_Color, 0, 31 + line * MLINE, 14, 31 + (line + 1) * MLINE - 2);
+  // DWIN_ICON_Show(ICON,ICON_Rectangle, 0, MBASE(line) - 18);
+  DWIN_Draw_Rectangle(1, Rectangle_Color, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
 }
 
 inline void Erase_Menu_Cursor(const uint8_t line) {
-  DWIN_Draw_Rectangle(1, Background_black, 0, 31 + line * MLINE, 14, 31 + (line + 1) * MLINE - 2);
+  DWIN_Draw_Rectangle(1, Background_black, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
 }
 
 inline void Move_Highlight(const int16_t from, const uint16_t newline) {
@@ -442,7 +446,7 @@ inline void Move_Highlight(const int16_t from, const uint16_t newline) {
 
 inline void Add_Menu_Line() {
   Move_Highlight(1, MROWS);
-  DWIN_Draw_Line(Line_Color, 16, 82 + MROWS * MLINE, 256, 83 + MROWS * MLINE);
+  DWIN_Draw_Line(Line_Color, 16, MBASE(MROWS + 1) - 20, 256, MBASE(MROWS + 1) - 19);
 }
 
 inline void Scroll_Menu(const uint8_t dir) {
@@ -458,17 +462,17 @@ inline uint16_t nr_sd_menu_items() {
 }
 
 inline void Draw_Menu_Icon(const uint8_t line, const uint8_t icon) {
-  DWIN_ICON_Show(ICON, icon, 26, 46 + line * MLINE);
+  DWIN_ICON_Show(ICON, icon, 26, MBASE(line) - 3);
 }
 
 inline void Erase_Menu_Text(const uint8_t line) {
-  DWIN_Draw_Rectangle(1, Background_black, LBLX, 31 + line * MLINE + 4, 271, 28 + (line + 1) * MLINE - 4);
+  DWIN_Draw_Rectangle(1, Background_black, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
 }
 
 inline void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr) {
-  if (label) DWIN_Draw_String(false, false, font8x16, White, Background_black, LBLX, 48 + line * MLINE, (char*)label);
+  if (label) DWIN_Draw_String(false, false, font8x16, White, Background_black, LBLX, MBASE(line) - 1, (char*)label);
   if (icon) Draw_Menu_Icon(line, icon);
-  DWIN_Draw_Line(Line_Color, 16, 29 + (line + 1) * MLINE, 256, 30 + (line + 1) * MLINE);
+  DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
 
 // The "Back" label is always on the first line
@@ -494,6 +498,8 @@ inline void draw_move_en(const uint16_t line) {
   DWIN_Frame_AreaCopy(1, 69, 61, 102, 71, LBLX, line); // "Move"
 }
 
+inline void DWIN_Frame_TitleCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) { DWIN_Frame_AreaCopy(id, x1, y1, x2, y2, 14, 8); }
+
 inline void Prepare_Item_Move(const uint8_t row) {
   if (HMI_flag.language_chinese)
     DWIN_Frame_AreaCopy(1, 159, 70, 200, 84, LBLX, MBASE(row));
@@ -523,17 +529,17 @@ inline void Prepare_Item_Offset(const uint8_t row) {
   if (HMI_flag.language_chinese) {
     #if HAS_BED_PROBE
       DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(row));
-      DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
+      DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
     #else
       DWIN_Frame_AreaCopy(1, 43, 89, 98, 101, LBLX, MBASE(row));
     #endif
   }
   else {
     #if HAS_BED_PROBE
-      DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(row)); // "Z-Offset"
-      DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
+      DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(row));    // "Z-Offset"
+      DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), BABY_Z_VAR * 100);
     #else
-      DWIN_Frame_AreaCopy(1, 1, 76, 106, 86, LBLX, MBASE(row)); // "..."
+      DWIN_Frame_AreaCopy(1, 1, 76, 106, 86, LBLX, MBASE(row));       // "..."
     #endif
   }
   Draw_Menu_Line(row, ICON_SetHome);
@@ -544,8 +550,8 @@ inline void Prepare_Item_PLA(const uint8_t row) {
     DWIN_Frame_AreaCopy(1, 100, 89, 151, 101, LBLX, MBASE(row));
   }
   else {
-    DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row)); // "Preheat"
-    DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(row)); // "PLA"
+    DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
+    DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(row));  // "PLA"
   }
   Draw_Menu_Line(row, ICON_PLAPreheat);
 }
@@ -555,17 +561,17 @@ inline void Prepare_Item_ABS(const uint8_t row) {
     DWIN_Frame_AreaCopy(1, 180, 89, 233, 100, LBLX, MBASE(row));
   }
   else {
-    DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row)); // "Preheat"
-    DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(row)); // "ABS"
+    DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
+    DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(row));  // "ABS"
   }
   Draw_Menu_Line(row, ICON_ABSPreheat);
 }
 
 inline void Prepare_Item_Cool(const uint8_t row) {
   if (HMI_flag.language_chinese)
-    DWIN_Frame_AreaCopy(1, 1, 104, 56, 117, LBLX, MBASE(row));
+    DWIN_Frame_AreaCopy(1,   1, 104,  56, 117, LBLX, MBASE(row));
   else
-    DWIN_Frame_AreaCopy(1, 200,  76, 264, 86, LBLX, MBASE(row));  // "Cooldown"
+    DWIN_Frame_AreaCopy(1, 200,  76, 264,  86, LBLX, MBASE(row));      // "Cooldown"
   Draw_Menu_Line(row, ICON_Cool);
 }
 
@@ -589,13 +595,13 @@ inline void Draw_Prepare_Menu() {
   #define PVISI(L)  WITHIN(PSCROL(L), 0, MROWS)
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 133, 1, 160, 13, 14, 8); // "Prepare"
+    DWIN_Frame_TitleCopy(1, 133, 1, 160, 13);   // "Prepare"
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_PREPARE));
     #else
-      DWIN_Frame_AreaCopy(1, 178, 2, 229, 14, 14, 8); // "Prepare"
+      DWIN_Frame_TitleCopy(1, 178, 2, 229, 14); // "Prepare"
     #endif
   }
 
@@ -615,13 +621,13 @@ inline void Draw_Prepare_Menu() {
 inline void Draw_Control_Menu() {
   Clear_Main_Window();
 
-  const int16_t scroll = TERN(HAS_ONESTEP_LEVELING, MROWS - index_control, 0); // Scrolled-up lines
+  const int16_t scroll = TERN(HAS_ONESTEP_LEVELING, MROWS - index_control, 0);    // Scrolled-up lines
 
   #define CSCROL(L) (scroll + (L))
   #define CLINE(L)  MBASE(CSCROL(L))
   #define CVISI(L)  WITHIN(CSCROL(L), 0, MROWS)
 
-  if (CVISI(0)) Draw_Back_First(select_control.now == 0);       // < Back
+  if (CVISI(0)) Draw_Back_First(select_control.now == 0);                         // < Back
 
   if (HMI_flag.language_chinese) {
     DWIN_Frame_AreaCopy(1, 103,   1, 130, 14, 14, 8);
@@ -637,15 +643,15 @@ inline void Draw_Control_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_CONTROL));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), GET_TEXT_F(MSG_TEMPERATURE));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), GET_TEXT_F(MSG_MOTION));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), GET_TEXT_F(MSG_TEMPERATURE));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), GET_TEXT_F(MSG_MOTION));
       #if ENABLED(EEPROM_SETTINGS)
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_STORE_EEPROM));
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_LOAD_EEPROM));
-        DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
-        if (CVISI(6)) DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 5), F("Info"));
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), GET_TEXT_F(MSG_STORE_EEPROM));
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), GET_TEXT_F(MSG_LOAD_EEPROM));
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(5), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
+        if (CVISI(6)) DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(6), F("Info"));
       #else
-        if (CVISI(3)) DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Info"));
+        if (CVISI(3)) DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), F("Info"));
       #endif
     #else
       DWIN_Frame_AreaCopy(1, 128, 2, 176, 12, 14, 8);
@@ -690,11 +696,11 @@ inline void Draw_Tune_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_TUNE));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), GET_TEXT_F(MSG_SPEED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_FAN_SPEED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), GET_TEXT_F(MSG_SPEED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), GET_TEXT_F(MSG_FAN_SPEED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(5), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
     #else
       DWIN_Frame_AreaCopy(1, 94, 2, 126, 12, 14, 9);
       DWIN_Frame_AreaCopy(1, 1, 179, 92, 190, LBLX, MBASE(1)); // print speed
@@ -769,10 +775,10 @@ inline void Draw_Motion_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_MOTION));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Feedrate"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), GET_TEXT_F(MSG_ACCELERATION));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_JERK));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_STEPS_PER_MM));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Feedrate"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), GET_TEXT_F(MSG_ACCELERATION));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), GET_TEXT_F(MSG_JERK));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), GET_TEXT_F(MSG_STEPS_PER_MM));
     #else
       DWIN_Frame_AreaCopy(1, 144, 16, 189, 26, 14, 8);
       draw_max_en(MBASE(1)); draw_speed_en(27, MBASE(1)); // "Max Speed"
@@ -1035,7 +1041,7 @@ void HMI_Move_X(void) {
     }
     NOLESS(HMI_ValueStruct.Move_X_scale, (X_MIN_POS) * MINUNITMULT);
     NOMORE(HMI_ValueStruct.Move_X_scale, (X_MAX_POS) * MINUNITMULT);
-    current_position[X_AXIS] = HMI_ValueStruct.Move_X_scale / 10;
+    current_position.x = HMI_ValueStruct.Move_X_scale / 10;
     DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
     DWIN_UpdateLCD();
   }
@@ -1064,7 +1070,7 @@ void HMI_Move_Y(void) {
     }
     NOLESS(HMI_ValueStruct.Move_Y_scale, (Y_MIN_POS) * MINUNITMULT);
     NOMORE(HMI_ValueStruct.Move_Y_scale, (Y_MAX_POS) * MINUNITMULT);
-    current_position[Y_AXIS] = HMI_ValueStruct.Move_Y_scale / 10;
+    current_position.y = HMI_ValueStruct.Move_Y_scale / 10;
     DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
     DWIN_UpdateLCD();
   }
@@ -1093,13 +1099,13 @@ void HMI_Move_Z(void) {
     }
     NOLESS(HMI_ValueStruct.Move_Z_scale, Z_MIN_POS * MINUNITMULT);
     NOMORE(HMI_ValueStruct.Move_Z_scale, Z_MAX_POS * MINUNITMULT);
-    current_position[Z_AXIS] = HMI_ValueStruct.Move_Z_scale / 10;
+    current_position.z = HMI_ValueStruct.Move_Z_scale / 10;
     DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
     DWIN_UpdateLCD();
   }
 }
 
-#if EXTRUDERS
+#if HAS_HOTEND
 
   void HMI_Move_E(void) {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
@@ -1335,7 +1341,7 @@ void HMI_PrintSpeed(void) {
     else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
       checkkey = Tune;
       EncoderRate.encoderRateEnabled = 0;
-      feedrate_percentage            = HMI_ValueStruct.print_speed;
+      feedrate_percentage = HMI_ValueStruct.print_speed;
       DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1 + MROWS - index_tune), HMI_ValueStruct.print_speed);
       return;
     }
@@ -1359,22 +1365,14 @@ void HMI_MaxFeedspeedXYZE(void) {
     else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
       checkkey = MaxSpeed;
       EncoderRate.encoderRateEnabled = 0;
-      if (HMI_flag.feedspeed_flag == X_AXIS) planner.set_max_feedrate(X_AXIS, HMI_ValueStruct.Max_Feedspeed);
-      else if (HMI_flag.feedspeed_flag == Y_AXIS) planner.set_max_feedrate(Y_AXIS, HMI_ValueStruct.Max_Feedspeed);
-      else if (HMI_flag.feedspeed_flag == Z_AXIS) planner.set_max_feedrate(Z_AXIS, HMI_ValueStruct.Max_Feedspeed);
-      #if HAS_HOTEND
-        else if (HMI_flag.feedspeed_flag == E_AXIS) planner.set_max_feedrate(E_AXIS, HMI_ValueStruct.Max_Feedspeed);
-      #endif
+      if (WITHIN(HMI_flag.feedspeed_flag, X_AXIS, E_AXIS))
+        planner.set_max_feedrate(HMI_flag.feedspeed_flag, HMI_ValueStruct.Max_Feedspeed);
       DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
       return;
     }
     // MaxFeedspeed limit
-    if (HMI_flag.feedspeed_flag == X_AXIS) {if (HMI_ValueStruct.Max_Feedspeed > default_max_feedrate[X_AXIS] * 2) HMI_ValueStruct.Max_Feedspeed = default_max_feedrate[X_AXIS] * 2; }
-    else if (HMI_flag.feedspeed_flag == Y_AXIS) {if (HMI_ValueStruct.Max_Feedspeed > default_max_feedrate[Y_AXIS] * 2) HMI_ValueStruct.Max_Feedspeed = default_max_feedrate[Y_AXIS] * 2; }
-    else if (HMI_flag.feedspeed_flag == Z_AXIS) {if (HMI_ValueStruct.Max_Feedspeed > default_max_feedrate[Z_AXIS] * 2) HMI_ValueStruct.Max_Feedspeed = default_max_feedrate[Z_AXIS] * 2; }
-    #if HAS_HOTEND
-      else if (HMI_flag.feedspeed_flag == E_AXIS) {if (HMI_ValueStruct.Max_Feedspeed > default_max_feedrate[E_AXIS] * 2) HMI_ValueStruct.Max_Feedspeed = default_max_feedrate[E_AXIS] * 2; }
-    #endif
+    if (WITHIN(HMI_flag.feedspeed_flag, X_AXIS, E_AXIS))
+      NOMORE(HMI_ValueStruct.Max_Feedspeed, default_max_feedrate[HMI_flag.feedspeed_flag] * 2);
     if (HMI_ValueStruct.Max_Feedspeed < MIN_MAXFEEDSPEED) HMI_ValueStruct.Max_Feedspeed = MIN_MAXFEEDSPEED;
     // MaxFeedspeed value
     DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
@@ -1399,12 +1397,8 @@ void HMI_MaxAccelerationXYZE(void) {
       return;
     }
     // MaxAcceleration limit
-    if (HMI_flag.acc_flag == X_AXIS) {if (HMI_ValueStruct.Max_Acceleration > default_max_acceleration[X_AXIS] * 2) HMI_ValueStruct.Max_Acceleration = default_max_acceleration[X_AXIS] * 2; }
-    else if (HMI_flag.acc_flag == Y_AXIS) {if (HMI_ValueStruct.Max_Acceleration > default_max_acceleration[Y_AXIS] * 2) HMI_ValueStruct.Max_Acceleration = default_max_acceleration[Y_AXIS] * 2; }
-    else if (HMI_flag.acc_flag == Z_AXIS) {if (HMI_ValueStruct.Max_Acceleration > default_max_acceleration[Z_AXIS] * 2) HMI_ValueStruct.Max_Acceleration = default_max_acceleration[Z_AXIS] * 2; }
-    #if HAS_HOTEND
-      else if (HMI_flag.acc_flag == E_AXIS) {if (HMI_ValueStruct.Max_Acceleration > default_max_acceleration[E_AXIS] * 2) HMI_ValueStruct.Max_Acceleration = default_max_acceleration[E_AXIS] * 2; }
-    #endif
+    if (WITHIN(HMI_flag.acc_flag, X_AXIS, E_AXIS))
+      NOMORE(HMI_ValueStruct.Max_Acceleration, default_max_acceleration[HMI_flag.acc_flag] * 2);
     if (HMI_ValueStruct.Max_Acceleration < MIN_MAXACCELERATION) HMI_ValueStruct.Max_Acceleration = MIN_MAXACCELERATION;
     // MaxAcceleration value
     DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
@@ -1439,7 +1433,7 @@ void HMI_MaxJerkXYZE(void) {
       NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[Z_AXIS] * 2 * MINUNITMULT);
     else if (HMI_flag.jerk_flag == E_AXIS)
       NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[E_AXIS] * 2 * MINUNITMULT);
-    NOLESS(HMI_ValueStruct.Max_Jerk, (MIN_MAXCORNER) * MINUNITMULT);
+    NOLESS(HMI_ValueStruct.Max_Jerk, (MIN_MAXJERK) * MINUNITMULT);
     // MaxJerk value
     DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
   }
@@ -1457,22 +1451,14 @@ void HMI_StepXYZE(void) {
     else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
       checkkey = Step;
       EncoderRate.encoderRateEnabled = 0;
-      if (HMI_flag.step_flag == X_AXIS) planner.settings.axis_steps_per_mm[X_AXIS] = HMI_ValueStruct.Max_Step / 10;
-      else if (HMI_flag.step_flag == Y_AXIS) planner.settings.axis_steps_per_mm[Y_AXIS] = HMI_ValueStruct.Max_Step / 10;
-      else if (HMI_flag.step_flag == Z_AXIS) planner.settings.axis_steps_per_mm[Z_AXIS] = HMI_ValueStruct.Max_Step / 10;
-      else if (HMI_flag.step_flag == E_AXIS) planner.settings.axis_steps_per_mm[E_AXIS] = HMI_ValueStruct.Max_Step / 10;
+      if (WITHIN(HMI_flag.step_flag, X_AXIS, E_AXIS))
+        planner.settings.axis_steps_per_mm[HMI_flag.step_flag] = HMI_ValueStruct.Max_Step / 10;
       DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
       return;
     }
     // Step limit
-    if (HMI_flag.step_flag == X_AXIS)
-      NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[X_AXIS] * 2 * MINUNITMULT);
-    else if (HMI_flag.step_flag == Y_AXIS)
-      NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[Y_AXIS] * 2 * MINUNITMULT);
-    else if (HMI_flag.step_flag == Z_AXIS)
-      NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[Z_AXIS] * 2 * MINUNITMULT);
-    else if (HMI_flag.step_flag == E_AXIS)
-      NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[E_AXIS] * 2 * MINUNITMULT);
+    if (WITHIN(HMI_flag.step_flag, X_AXIS, E_AXIS))
+      NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[HMI_flag.step_flag] * 2 * MINUNITMULT);
     NOLESS(HMI_ValueStruct.Max_Step, MIN_STEP);
     // Step value
     DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
@@ -1743,7 +1729,7 @@ inline void Draw_Info_Menu() {
   DWIN_Draw_String(false, false, font8x16, White, Background_black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, (char*)SHORT_BUILD_VERSION);
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 30, 17, 57, 29, 14, 8);
+    DWIN_Frame_TitleCopy(1, 30, 17, 57, 29); // "Info"
 
     DWIN_Frame_AreaCopy(1, 197, 149, 252, 161, 108, 102);
     DWIN_Frame_AreaCopy(1, 1, 164, 56, 176, 108, 175);
@@ -1754,7 +1740,7 @@ inline void Draw_Info_Menu() {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_INFO_SCREEN));
     #else
-      DWIN_Frame_AreaCopy(1, 190, 16, 215, 26, 14, 8);
+      DWIN_Frame_TitleCopy(1, 190, 16, 215, 26); // "Info"
     #endif
 
     DWIN_Frame_AreaCopy(1, 120, 150, 146, 161, 124, 102);
@@ -1774,13 +1760,13 @@ inline void Draw_Print_File_Menu() {
   Clear_Title_Bar();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 0, 31, 55, 44, 14, 8);
+    DWIN_Frame_TitleCopy(1, 0, 31, 55, 44); // "Print file"
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title("Print file"); // TODO: GET_TEXT_F
     #else
-      DWIN_Frame_AreaCopy(1, 52, 31, 137, 41, 14, 8); // "Print file"
+      DWIN_Frame_TitleCopy(1, 52, 31, 137, 41); // "Print file"
     #endif
   }
 
@@ -1814,30 +1800,26 @@ void HMI_MainMenu(void) {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_page.now) {
-      /* Print File */
-      case 0:
+      case 0: // Print File
         checkkey = SelectFile;
         Draw_Print_File_Menu();
         break;
 
-      /* Prepare */
-      case 1:
+      case 1: // Prepare
         checkkey = Prepare;
         select_prepare.reset();
         index_prepare = MROWS;
         Draw_Prepare_Menu();
         break;
 
-      /* Control */
-      case 2:
+      case 2: // Control
         checkkey = Control;
         select_control.reset();
         index_control = MROWS;
         Draw_Control_Menu();
         break;
 
-      /* Leveling */
-      case 3:
+      case 3: // Leveling or Info
         #if HAS_ONESTEP_LEVELING
           checkkey = Leveling;
           HMI_Leveling();
@@ -1851,7 +1833,7 @@ void HMI_MainMenu(void) {
   DWIN_UpdateLCD();
 }
 
-/* Select (and Print) File */
+// Select (and Print) File
 void HMI_SelectFile(void) {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
 
@@ -2017,14 +1999,14 @@ void HMI_Printing(void) {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_print.now) {
-      case 0: // setting
+      case 0: // Setting
         checkkey = Tune;
         HMI_ValueStruct.show_mode = 0;
         select_tune.reset();
         index_tune = 5;
         Draw_Tune_Menu();
         break;
-      case 1: // pause
+      case 1: // Pause
         /* pause */
         if (HMI_flag.pause_flag) {
           ICON_Pause();
@@ -2047,7 +2029,7 @@ void HMI_Printing(void) {
         }
         break;
 
-      case 2: // stop
+      case 2: // Stop
         /* stop */
         HMI_flag.select_flag = 1;
         checkkey = Print_window;
@@ -2060,7 +2042,7 @@ void HMI_Printing(void) {
   DWIN_UpdateLCD();
 }
 
-/* pause and stop window */
+/* Pause and Stop window */
 void HMI_PauseOrStop(void) {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -2120,7 +2102,7 @@ inline void Draw_Move_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 192, 1, 233, 14, 14, 8);
+    DWIN_Frame_TitleCopy(1, 192, 1, 233, 14); // "Move"
     DWIN_Frame_AreaCopy(1, 58, 118, 106, 132, LBLX, MBASE(1));
     DWIN_Frame_AreaCopy(1, 109, 118, 157, 132, LBLX, MBASE(2));
     DWIN_Frame_AreaCopy(1, 160, 118, 209, 132, LBLX, MBASE(3));
@@ -2132,7 +2114,7 @@ inline void Draw_Move_Menu() {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_MOVE_AXIS));
     #else
-      DWIN_Frame_AreaCopy(1, 231, 2, 265, 12, 14, 8);
+      DWIN_Frame_TitleCopy(1, 231, 2, 265, 12);              // "Move"
     #endif
     draw_move_en(MBASE(1)); say_x(36, MBASE(1));                    // "Move X"
     draw_move_en(MBASE(2)); say_y(36, MBASE(2));                    // "Move Y"
@@ -2145,7 +2127,8 @@ inline void Draw_Move_Menu() {
   Draw_Back_First(select_axis.now == 0);
   if (select_axis.now) Draw_Menu_Cursor(select_axis.now);
 
-  LOOP_L_N(i, MROWS) Draw_Menu_Line(i + 1, ICON_MoveX + i);
+  // Draw separators so it looks like a menu
+  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MoveX + i);
 }
 
 #include "../../../libs/buzzer.h"
@@ -2211,7 +2194,7 @@ void HMI_Prepare(void) {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_prepare.now) {
-      case 0: // back
+      case 0: // Back
         select_page.set(1);
         Goto_MainMenu();
         break;
@@ -2222,10 +2205,12 @@ void HMI_Prepare(void) {
 
         queue.inject_P(PSTR("G92 E0"));
         current_position.e = HMI_ValueStruct.Move_E_scale = 0;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), current_position[X_AXIS] * MINUNITMULT);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), current_position[Y_AXIS] * MINUNITMULT);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), current_position[Z_AXIS] * MINUNITMULT);
-        DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), current_position.e * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), current_position.x * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), current_position.y * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), current_position.z * MINUNITMULT);
+        #if HAS_HOTEND
+          DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), current_position.e * MINUNITMULT);
+        #endif
         break;
       case 2: // close motion
         queue.inject_P(PSTR("M84"));
@@ -2297,11 +2282,11 @@ void Draw_Temperature_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_TEMPERATURE));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_FAN_SPEED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("PLA Preheat Settings"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), F("ABS Preheat Settings"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), GET_TEXT_F(MSG_FAN_SPEED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), F("PLA Preheat Settings"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(5), F("ABS Preheat Settings"));
     #else
       DWIN_Frame_AreaCopy(1, 56, 16, 141, 28, 14, 8);
       DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(1));           // Nozzle...
@@ -2378,7 +2363,7 @@ void HMI_Control(void) {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_control.now) {
-      case 0: // back
+      case 0: // Back
         select_page.set(2);
         Goto_MainMenu();
         break;
@@ -2461,7 +2446,7 @@ void HMI_AxisMove(void) {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_axis.now) {
-      case 0: // back
+      case 0: // Back
         checkkey = Prepare;
         select_prepare.set(1);
         index_prepare = MROWS;
@@ -2469,19 +2454,19 @@ void HMI_AxisMove(void) {
         break;
       case 1: // X axis move
         checkkey = Move_X;
-        HMI_ValueStruct.Move_X_scale = current_position[X_AXIS] * MINUNITMULT;
+        HMI_ValueStruct.Move_X_scale = current_position.x * MINUNITMULT;
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
         EncoderRate.encoderRateEnabled = 1;
         break;
       case 2: // Y axis move
         checkkey = Move_Y;
-        HMI_ValueStruct.Move_Y_scale = current_position[Y_AXIS] * MINUNITMULT;
+        HMI_ValueStruct.Move_Y_scale = current_position.y * MINUNITMULT;
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
         EncoderRate.encoderRateEnabled = 1;
         break;
       case 3: // Z axis move
         checkkey = Move_Z;
-        HMI_ValueStruct.Move_Z_scale = current_position[Z_AXIS] * MINUNITMULT;
+        HMI_ValueStruct.Move_Z_scale = current_position.z * MINUNITMULT;
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
         EncoderRate.encoderRateEnabled = 1;
         break;
@@ -2521,7 +2506,7 @@ void HMI_Temperature(void) {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_temp.now) {
-      case 0: // back
+      case 0: // Back
         checkkey = Control;
         select_control.set(1);
         index_control = MROWS;
@@ -2573,10 +2558,10 @@ void HMI_Temperature(void) {
             else {
               #ifdef USE_STRING_HEADINGS
                 Draw_Title("PLA Settings"); // TODO: GET_TEXT_F
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Nozzle Temp"));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), F("Bed Temp"));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_FAN_SPEED));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_STORE_EEPROM));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Nozzle Temp"));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), F("Bed Temp"));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), GET_TEXT_F(MSG_FAN_SPEED));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), GET_TEXT_F(MSG_STORE_EEPROM));
               #else
                 DWIN_Frame_AreaCopy(1, 56, 16, 141, 28, 14, 8);
                 DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(1));
@@ -2628,10 +2613,10 @@ void HMI_Temperature(void) {
             else {
               #ifdef USE_STRING_HEADINGS
                 Draw_Title("ABS Settings"); // TODO: GET_TEXT_F
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Nozzle Temp"));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), F("Bed Temp"));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_FAN_SPEED));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_STORE_EEPROM));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Nozzle Temp"));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), F("Bed Temp"));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), GET_TEXT_F(MSG_FAN_SPEED));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), GET_TEXT_F(MSG_STORE_EEPROM));
               #else
                 DWIN_Frame_AreaCopy(1, 56, 16, 141, 28, 14, 8);
                 DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(1));
@@ -2671,62 +2656,69 @@ inline void Draw_Max_Speed_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 1, 16, 28, 28, 14, 8);
+    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Max Speed (mm/s)"
 
     auto say_max_speed = [](const uint16_t row) {
-      DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, row);            // "Max speed"
+      DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, row);        // "Max speed"
     };
 
-    say_max_speed(MBASE(1));                                            // "Max speed"
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 58, MBASE(1));    // X
-    say_max_speed(MBASE(2));                                            // "Max speed"
-    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 58, MBASE(2) + 3);    // Y
-    say_max_speed(MBASE(3));                                            // "Max speed"
-    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 58, MBASE(3) + 3);   // Z
-    say_max_speed(MBASE(4));                                            // "Max speed"
-    DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 58, MBASE(4) + 3);  // E
+    say_max_speed(MBASE(1));                                                // "Max speed"
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 58, MBASE(1)); // X
+    say_max_speed(MBASE(2));                                                // "Max speed"
+    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 58, MBASE(2) + 3); // Y
+    say_max_speed(MBASE(3));                                                // "Max speed"
+    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 58, MBASE(3) + 3); // Z
+    #if HAS_HOTEND
+      say_max_speed(MBASE(4));                                              // "Max speed"
+      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 58, MBASE(4) + 3); // E
+    #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title("Max Speed (mm/s)"); // TODO: GET_TEXT_F
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Max Feedrate X"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), F("Max Feedrate Y"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Max Feedrate Z"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("Max Feedrate E"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Max Feedrate X"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), F("Max Feedrate Y"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), F("Max Feedrate Z"));
+      #if HAS_HOTEND
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), F("Max Feedrate E"));
+      #endif
     #else
-      DWIN_Frame_AreaCopy(1, 144, 16, 189, 26, 14, 8);
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Max Speed (mm/s)"
 
-      draw_max_en(MBASE(1));            // "Max"
+      draw_max_en(MBASE(1));          // "Max"
       DWIN_Frame_AreaCopy(1, 184, 119, 234, 132, LBLX + 27, MBASE(1)); // "Speed X"
 
-      draw_max_en(MBASE(2));            // "Max"
-      draw_speed_en(27, MBASE(2));  // "Speed"
-      say_y(70, MBASE(2));     // "Y"
+      draw_max_en(MBASE(2));          // "Max"
+      draw_speed_en(27, MBASE(2));    // "Speed"
+      say_y(70, MBASE(2));            // "Y"
 
-      draw_max_en(MBASE(3));            // "Max"
-      draw_speed_en(27, MBASE(3));  // "Speed"
-      say_z(70, MBASE(3));     // "Z"
+      draw_max_en(MBASE(3));          // "Max"
+      draw_speed_en(27, MBASE(3));    // "Speed"
+      say_z(70, MBASE(3));            // "Z"
 
-      draw_max_en(MBASE(4));            // "Max"
-      draw_speed_en(27, MBASE(4));  // "Speed"
-      say_e(70, MBASE(4));     // "E"
+      #if HAS_HOTEND
+        draw_max_en(MBASE(4));        // "Max"
+        draw_speed_en(27, MBASE(4));  // "Speed"
+        say_e(70, MBASE(4));          // "E"
+      #endif
     #endif
   }
 
   Draw_Back_First();
-  LOOP_L_N(i, 4) Draw_Menu_Line(i + 1, ICON_MaxSpeedX + i);
-
+  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedX + i);
   DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(1), planner.settings.max_feedrate_mm_s[X_AXIS]);
   DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(2), planner.settings.max_feedrate_mm_s[Y_AXIS]);
   DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(3), planner.settings.max_feedrate_mm_s[Z_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(4), planner.settings.max_feedrate_mm_s[E_AXIS]);
+  #if HAS_HOTEND
+    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(4), planner.settings.max_feedrate_mm_s[E_AXIS]);
+  #endif
 }
 
 inline void Draw_Max_Accel_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 1, 16, 28, 28, 14, 8);
+    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Acceleration"
 
     DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(1));
     DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(1) + 1);
@@ -2737,103 +2729,117 @@ inline void Draw_Max_Accel_Menu() {
     DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(3));
     DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(3) + 1);
     DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 71, MBASE(3) + 2);  // Max acceleration Z
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(4));
-    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(4) + 1);
-    DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 71, MBASE(4) + 2); // Max acceleration E
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(4));
+      DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(4) + 1);
+      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 71, MBASE(4) + 2); // Max acceleration E
+    #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_ACCELERATION));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Max Accel X"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), F("Max Accel Y"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Max Accel Z"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("Max Accel E"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Max Accel X"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), F("Max Accel Y"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), F("Max Accel Z"));
+      #if HAS_HOTEND
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), F("Max Accel E"));
+      #endif
     #else
-      DWIN_Frame_AreaCopy(1, 144, 16, 189, 26, 14, 8);
-      draw_max_accel_en(MBASE(1)); say_x(108, MBASE(1)); // "Max Acceleration X"
-      draw_max_accel_en(MBASE(2)); say_y(108, MBASE(2)); // "Max Acceleration Y"
-      draw_max_accel_en(MBASE(3)); say_z(108, MBASE(3)); // "Max Acceleration Z"
-      draw_max_accel_en(MBASE(4)); say_e(108, MBASE(4)); // "Max Acceleration E"
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);                  // "Acceleration"
+      draw_max_accel_en(MBASE(1)); say_x(108, MBASE(1));  // "Max Acceleration X"
+      draw_max_accel_en(MBASE(2)); say_y(108, MBASE(2));  // "Max Acceleration Y"
+      draw_max_accel_en(MBASE(3)); say_z(108, MBASE(3));  // "Max Acceleration Z"
+      #if HAS_HOTEND
+        draw_max_accel_en(MBASE(4)); say_e(108, MBASE(4)); // "Max Acceleration E"
+      #endif
     #endif
   }
 
   Draw_Back_First();
-  LOOP_L_N(i, 4) Draw_Menu_Line(i + 1, ICON_MaxAccX + i);
-
+  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxAccX + i);
   DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(1), planner.settings.max_acceleration_mm_per_s2[X_AXIS]);
   DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(2), planner.settings.max_acceleration_mm_per_s2[Y_AXIS]);
   DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(3), planner.settings.max_acceleration_mm_per_s2[Z_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(4), planner.settings.max_acceleration_mm_per_s2[E_AXIS]);
+  #if HAS_HOTEND
+    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(4), planner.settings.max_acceleration_mm_per_s2[E_AXIS]);
+  #endif
 }
 
 inline void Draw_Max_Jerk_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 1, 16, 28, 28, 14, 8);
+    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Jerk"
 
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(1) + 1);
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(1));
+    DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(1) + 1);
     DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 83, MBASE(1));    // Max jerk speed X
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(2) + 1);
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 83, MBASE(1));        // Max Jerk speed X
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(2));
+    DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(2) + 1);
     DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 83, MBASE(2) + 3);    // Max jerk speed Y
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(3) + 1);
+    DWIN_Frame_AreaCopy(1,   1, 150,   7, 160, LBLX + 83, MBASE(2) + 3);    // Max Jerk speed Y
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(3));
+    DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(3) + 1);
     DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 83, MBASE(3) + 3);   // Max jerk speed Z
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(4));
-    DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(4) + 1);
-    DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(4));
-    DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 83, MBASE(4) + 3);  // Max jerk speed E
+    DWIN_Frame_AreaCopy(1,   9, 150,  16, 160, LBLX + 83, MBASE(3) + 3);    // Max Jerk speed Z
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(4));
+      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(4) + 1);
+      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(4));
+      DWIN_Frame_AreaCopy(1,  18, 150,  25, 160, LBLX + 83, MBASE(4) + 3);  // Max Jerk speed E
+    #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_JERK));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Max Jerk X"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), F("Max Jerk Y"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Max Jerk Z"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("Max Jerk E"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Max Jerk X"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), F("Max Jerk Y"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), F("Max Jerk Z"));
+      #if HAS_HOTEND
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), F("Max Jerk E"));
+      #endif
     #else
-      DWIN_Frame_AreaCopy(1, 144, 16, 189, 26, 14, 8);
-      draw_max_en(MBASE(1));        // "Max"
-      draw_jerk_en(MBASE(1));       // "Jerk"
-      draw_speed_en(72, MBASE(1));  // "Speed"
-      say_x(115, MBASE(1));         // "X"
-
-      draw_max_en(MBASE(2));        // "Max"
-      draw_jerk_en(MBASE(2));       // "Jerk"
-      draw_speed_en(72, MBASE(2));  // "Speed"
-      say_y(115, MBASE(2));         // "Y"
-
-      draw_max_en(MBASE(3));        // "Max"
-      draw_jerk_en(MBASE(3));       // "Jerk"
-      draw_speed_en(72, MBASE(3));  // "Speed"
-      say_z(115, MBASE(3));         // "Z"
-
-      draw_max_en(MBASE(4));        // "Max"
-      draw_jerk_en(MBASE(4));       // "Jerk"
-      draw_speed_en(72, MBASE(4));  // "Speed"
-      say_e(115, MBASE(4));         // "E"
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Jerk"
+      draw_max_en(MBASE(1));          // "Max"
+      draw_jerk_en(MBASE(1));         // "Jerk"
+      draw_speed_en(72, MBASE(1));    // "Speed"
+      say_x(115, MBASE(1));           // "X"
+
+      draw_max_en(MBASE(2));          // "Max"
+      draw_jerk_en(MBASE(2));         // "Jerk"
+      draw_speed_en(72, MBASE(2));    // "Speed"
+      say_y(115, MBASE(2));           // "Y"
+
+      draw_max_en(MBASE(3));          // "Max"
+      draw_jerk_en(MBASE(3));         // "Jerk"
+      draw_speed_en(72, MBASE(3));    // "Speed"
+      say_z(115, MBASE(3));           // "Z"
+
+      #if HAS_HOTEND
+        draw_max_en(MBASE(4));        // "Max"
+        draw_jerk_en(MBASE(4));       // "Jerk"
+        draw_speed_en(72, MBASE(4));  // "Speed"
+        say_e(115, MBASE(4));         // "E"
+      #endif
     #endif
   }
 
   Draw_Back_First();
-  LOOP_L_N(i, 4) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
-
+  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
   DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
   DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
   DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
+  #if HAS_HOTEND
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
+  #endif
 }
 
 inline void Draw_Steps_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 1, 16, 28, 28, 14, 8);
+    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Steps per mm"
 
     DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(1));
     DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 44, MBASE(1)); // Transmission Ratio X
@@ -2841,32 +2847,39 @@ inline void Draw_Steps_Menu() {
     DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 44, MBASE(2) + 3); // Transmission Ratio Y
     DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(3));
     DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 44, MBASE(3) + 3); // Transmission Ratio Z
-    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(4));
-    DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 44, MBASE(4) + 3); // Transmission Ratio E
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(4));
+      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 44, MBASE(4) + 3); // Transmission Ratio E
+    #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_STEPS_PER_MM));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Steps/mm X"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), F("Steps/mm Y"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Steps/mm Z"));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("Steps/mm E"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(1), F("Steps/mm X"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(2), F("Steps/mm Y"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(3), F("Steps/mm Z"));
+      #if HAS_HOTEND
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, LBLX, MBASE(4), F("Steps/mm E"));
+      #endif
     #else
-      DWIN_Frame_AreaCopy(1, 144, 16, 189, 26, 14, 8);
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Steps per mm"
       draw_steps_per_mm(MBASE(1)); say_x(103, MBASE(1)); // "Steps-per-mm X"
       draw_steps_per_mm(MBASE(2)); say_y(103, MBASE(2)); // "Y"
       draw_steps_per_mm(MBASE(3)); say_z(103, MBASE(3)); // "Z"
-      draw_steps_per_mm(MBASE(4)); say_e(103, MBASE(4)); // "E"
+      #if HAS_HOTEND
+        draw_steps_per_mm(MBASE(4)); say_e(103, MBASE(4)); // "E"
+      #endif
     #endif
   }
 
   Draw_Back_First();
-  LOOP_L_N(i, 4) Draw_Menu_Line(i + 1, ICON_StepX + i);
-
+  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_StepX + i);
   DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(1), planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
   DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(2), planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
   DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(3), planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(4), planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
+  #if HAS_HOTEND
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(4), planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
+  #endif
 }
 
 /* Motion */
@@ -2883,7 +2896,7 @@ void HMI_Motion(void) {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_motion.now) {
-      case 0: // back
+      case 0: // Back
         checkkey = Control;
         select_control.set(2);
         index_control = MROWS;
@@ -3043,7 +3056,7 @@ void HMI_PLAPreheatSetting(void) {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_PLA.now) {
-      case 0: // back
+      case 0: // Back
         checkkey = TemperatureID;
         select_temp.now = 4;
         HMI_ValueStruct.show_mode = -1;
@@ -3074,7 +3087,7 @@ void HMI_PLAPreheatSetting(void) {
             break;
         #endif
       #if ENABLED(EEPROM_SETTINGS)
-        case 4: { // save PLA configuration
+        case 4: { // Save PLA configuration
           const bool success = settings.save();
           HMI_AudioFeedback(success);
         } break;
@@ -3099,7 +3112,7 @@ void HMI_ABSPreheatSetting(void) {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_ABS.now) {
-      case 0: // back
+      case 0: // Back
         checkkey = TemperatureID;
         select_temp.now = 5;
         HMI_ValueStruct.show_mode = -1;
@@ -3154,41 +3167,17 @@ void HMI_MaxSpeed(void) {
     if (select_speed.dec()) Move_Highlight(-1, select_speed.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_speed.now) {
-      case 0: // back
-        checkkey = Motion;
-        select_motion.now = 1;
-        Draw_Motion_Menu();
-        break;
-      case 1: // max Speed X
-        checkkey                      = MaxSpeed_value;
-        HMI_flag.feedspeed_flag       = X_AXIS;
-        HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[X_AXIS];
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      case 2: // max Speed Y
-        checkkey                      = MaxSpeed_value;
-        HMI_flag.feedspeed_flag       = Y_AXIS;
-        HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[Y_AXIS];
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      case 3: // max Speed Z
-        checkkey                      = MaxSpeed_value;
-        HMI_flag.feedspeed_flag       = Z_AXIS;
-        HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[Z_AXIS];
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      case 4: // max Speed E
-        checkkey                      = MaxSpeed_value;
-        HMI_flag.feedspeed_flag       = E_AXIS;
-        HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[E_AXIS];
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      default: break;
+    if (WITHIN(select_speed.now, 1, 4)) {
+      checkkey = MaxSpeed_value;
+      HMI_flag.feedspeed_flag = AxisEnum(select_speed.now - 1);
+      HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[HMI_flag.feedspeed_flag];
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+      EncoderRate.encoderRateEnabled = 1;
+    }
+    else { // Back
+      checkkey = Motion;
+      select_motion.now = 1;
+      Draw_Motion_Menu();
     }
   }
   DWIN_UpdateLCD();
@@ -3207,41 +3196,17 @@ void HMI_MaxAcceleration(void) {
     if (select_acc.dec()) Move_Highlight(-1, select_acc.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_acc.now) {
-      case 0: // back
-        checkkey          = Motion;
-        select_motion.now = 2;
-        Draw_Motion_Menu();
-        break;
-      case 1: // max acceleration X
-        checkkey                         = MaxAcceleration_value;
-        HMI_flag.acc_flag                = X_AXIS;
-        HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[X_AXIS];
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      case 2: // max acceleration Y
-        checkkey                         = MaxAcceleration_value;
-        HMI_flag.acc_flag                = Y_AXIS;
-        HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[Y_AXIS];
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      case 3: // max acceleration Z
-        checkkey                         = MaxAcceleration_value;
-        HMI_flag.acc_flag                = Z_AXIS;
-        HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[Z_AXIS];
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      case 4: // max acceleration E
-        checkkey                         = MaxAcceleration_value;
-        HMI_flag.acc_flag                = E_AXIS;
-        HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[E_AXIS];
-        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      default: break;
+    if (WITHIN(select_acc.now, 1, 4)) {
+      checkkey = MaxAcceleration_value;
+      HMI_flag.acc_flag = AxisEnum(select_acc.now - 1);
+      HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[HMI_flag.acc_flag];
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+      EncoderRate.encoderRateEnabled = 1;
+    }
+    else { // Back
+      checkkey = Motion;
+      select_motion.now = 2;
+      Draw_Motion_Menu();
     }
   }
   DWIN_UpdateLCD();
@@ -3260,41 +3225,17 @@ void HMI_MaxJerk(void) {
     if (select_jerk.dec()) Move_Highlight(-1, select_jerk.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_jerk.now) {
-      case 0: // back
-        checkkey          = Motion;
-        select_motion.now = 3;
-        Draw_Motion_Menu();
-        break;
-      case 1: // max jerk X
-        checkkey                 = MaxJerk_value;
-        HMI_flag.jerk_flag       = X_AXIS;
-        HMI_ValueStruct.Max_Jerk = planner.max_jerk[X_AXIS] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      case 2: // max jerk Y
-        checkkey                 = MaxJerk_value;
-        HMI_flag.jerk_flag       = Y_AXIS;
-        HMI_ValueStruct.Max_Jerk = planner.max_jerk[Y_AXIS] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      case 3: // max jerk Z
-        checkkey                 = MaxJerk_value;
-        HMI_flag.jerk_flag       = Z_AXIS;
-        HMI_ValueStruct.Max_Jerk = planner.max_jerk[Z_AXIS] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      case 4: // max jerk E
-        checkkey                 = MaxJerk_value;
-        HMI_flag.jerk_flag       = E_AXIS;
-        HMI_ValueStruct.Max_Jerk = planner.max_jerk[E_AXIS] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      default: break;
+    if (WITHIN(select_jerk.now, 1, 4)) {
+      checkkey = MaxJerk_value;
+      HMI_flag.jerk_flag = AxisEnum(select_jerk.now - 1);
+      HMI_ValueStruct.Max_Jerk = planner.max_jerk[HMI_flag.jerk_flag] * MINUNITMULT;
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
+      EncoderRate.encoderRateEnabled = 1;
+    }
+    else { // Back
+      checkkey = Motion;
+      select_motion.now = 3;
+      Draw_Motion_Menu();
     }
   }
   DWIN_UpdateLCD();
@@ -3313,41 +3254,17 @@ void HMI_Step(void) {
     if (select_step.dec()) Move_Highlight(-1, select_step.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_step.now) {
-      case 0: // back
-        checkkey = Motion;
-        select_motion.now = 4;
-        Draw_Motion_Menu();
-        break;
-      case 1: // max step X
-        checkkey                 = Step_value;
-        HMI_flag.step_flag       = X_AXIS;
-        HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      case 2: // max step Y
-        checkkey                 = Step_value;
-        HMI_flag.step_flag       = Y_AXIS;
-        HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      case 3: // max step Z
-        checkkey                 = Step_value;
-        HMI_flag.step_flag       = Z_AXIS;
-        HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      case 4: // max step E
-        checkkey                 = Step_value;
-        HMI_flag.step_flag       = E_AXIS;
-        HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
-        EncoderRate.encoderRateEnabled = 1;
-        break;
-      default: break;
+    if (WITHIN(select_step.now, 1, 4)) {
+      checkkey = Step_value;
+      HMI_flag.step_flag = AxisEnum(select_step.now - 1);
+      HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[HMI_flag.step_flag] * MINUNITMULT;
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+      EncoderRate.encoderRateEnabled = 1;
+    }
+    else { // Back
+      checkkey = Motion;
+      select_motion.now = 4;
+      Draw_Motion_Menu();
     }
   }
   DWIN_UpdateLCD();
@@ -3429,16 +3346,18 @@ void EachMomentUpdate(void) {
     }
 
     duration_t elapsed = print_job_timer.duration(); // print timer
-    /* already print time */
+
+    // Print time so far
     const uint16_t min = (elapsed.value % 3600) / 60;
     if (last_Printtime != min) { // 1 minute update
       last_Printtime = min;
       Draw_Print_ProgressElapsed();
     }
-    /* remain print time */
+
+    // Estimate remaining time every 20 seconds
     static millis_t next_remain_time_update = 0;
-    if (elapsed.minute() > 5 && ELAPSED(ms, next_remain_time_update) && HMI_flag.heat_flag == 0) { // show after 5 min and 20s update
-      remain_time = ((elapsed.value - dwin_heat_time) * ((float)card.getFileSize() / (float)card.getIndex())) - (elapsed.value - dwin_heat_time);
+    if (Percentrecord > 1 && ELAPSED(ms, next_remain_time_update) && HMI_flag.heat_flag == 0) {
+      remain_time = (elapsed.value - dwin_heat_time) / (Percentrecord * 0.01f) - (elapsed.value - dwin_heat_time);
       next_remain_time_update += 20 * 1000UL;
       Draw_Print_ProgressRemain();
     }
@@ -3528,43 +3447,43 @@ void EachMomentUpdate(void) {
 
 void DWIN_HandleScreen(void) {
   switch (checkkey) {
-    case MainMenu:              HMI_MainMenu(); break;
-    case SelectFile:            HMI_SelectFile(); break;
-    case Prepare:               HMI_Prepare(); break;
-    case Control:               HMI_Control(); break;
-    case Leveling:              break;
-    case PrintProcess:          HMI_Printing(); break;
-    case Print_window:          HMI_PauseOrStop(); break;
-    case AxisMove:              HMI_AxisMove(); break;
-    case TemperatureID:         HMI_Temperature(); break;
-    case Motion:                HMI_Motion(); break;
-    case Info:                  HMI_Info(); break;
-    case Tune:                  HMI_Tune(); break;
-    case PLAPreheat:            HMI_PLAPreheatSetting(); break;
-    case ABSPreheat:            HMI_ABSPreheatSetting(); break;
-    case MaxSpeed:              HMI_MaxSpeed(); break;
-    case MaxAcceleration:       HMI_MaxAcceleration(); break;
-    case MaxJerk:               HMI_MaxJerk(); break;
-    case Step:                  HMI_Step(); break;
-    case Move_X:                HMI_Move_X(); break;
-    case Move_Y:                HMI_Move_Y(); break;
-    case Move_Z:                HMI_Move_Z(); break;
+    case MainMenu:        HMI_MainMenu(); break;
+    case SelectFile:      HMI_SelectFile(); break;
+    case Prepare:         HMI_Prepare(); break;
+    case Control:         HMI_Control(); break;
+    case Leveling:        break;
+    case PrintProcess:    HMI_Printing(); break;
+    case Print_window:    HMI_PauseOrStop(); break;
+    case AxisMove:        HMI_AxisMove(); break;
+    case TemperatureID:   HMI_Temperature(); break;
+    case Motion:          HMI_Motion(); break;
+    case Info:            HMI_Info(); break;
+    case Tune:            HMI_Tune(); break;
+    case PLAPreheat:      HMI_PLAPreheatSetting(); break;
+    case ABSPreheat:      HMI_ABSPreheatSetting(); break;
+    case MaxSpeed:        HMI_MaxSpeed(); break;
+    case MaxAcceleration: HMI_MaxAcceleration(); break;
+    case MaxJerk:         HMI_MaxJerk(); break;
+    case Step:            HMI_Step(); break;
+    case Move_X:          HMI_Move_X(); break;
+    case Move_Y:          HMI_Move_Y(); break;
+    case Move_Z:          HMI_Move_Z(); break;
     #if HAS_HOTEND
-      case Extruder:            HMI_Move_E(); break;
-      case ETemp:               HMI_ETemp(); break;
+      case Extruder:      HMI_Move_E(); break;
+      case ETemp:         HMI_ETemp(); break;
     #endif
-    case Homeoffset:            HMI_Zoffset(); break;
+    case Homeoffset:      HMI_Zoffset(); break;
     #if HAS_HEATED_BED
-      case BedTemp:             HMI_BedTemp(); break;
+      case BedTemp:       HMI_BedTemp(); break;
     #endif
     #if HAS_FAN
-      case FanSpeed:            HMI_FanSpeed(); break;
+      case FanSpeed:      HMI_FanSpeed(); break;
     #endif
-    case PrintSpeed:            HMI_PrintSpeed(); break;
-    case MaxSpeed_value:        HMI_MaxFeedspeedXYZE(); break;
+    case PrintSpeed:      HMI_PrintSpeed(); break;
+    case MaxSpeed_value:  HMI_MaxFeedspeedXYZE(); break;
     case MaxAcceleration_value: HMI_MaxAccelerationXYZE(); break;
-    case MaxJerk_value:         HMI_MaxJerkXYZE(); break;
-    case Step_value:            HMI_StepXYZE(); break;
+    case MaxJerk_value:   HMI_MaxJerkXYZE(); break;
+    case Step_value:      HMI_StepXYZE(); break;
     default: break;
   }
 }

commit 250bfac0ccbadbd40f3d6f3fe83c33aa96d09a52
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Sep 16 04:35:30 2020 -0500

    E3 V2 DWIN cleanup

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index ccd5f2bc20..1bef8f1408 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -162,7 +162,7 @@ select_t select_page{0}, select_file{0}, select_print{0}, select_prepare{0}
          , select_PLA{0}, select_ABS{0}
          , select_speed{0}
          , select_acc{0}
-         , select_corner{0}
+         , select_jerk{0}
          , select_step{0}
          // , select_leveling{0}
          ;
@@ -235,16 +235,16 @@ void ICON_Print() {
     DWIN_ICON_Show(ICON, ICON_Print_1, 17, 130);
     DWIN_Draw_Rectangle(0, White, 17, 130, 126, 229);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 1, 447, 271 - 243, 479 - 19, 58, 201);
+      DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 58, 201);
     else
-      DWIN_Frame_AreaCopy(1, 1, 451, 271 - 240, 479 - 16, 72 - 15, 201);
+      DWIN_Frame_AreaCopy(1, 1, 451, 31, 463, 57, 201);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Print_0, 17, 130);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 1, 405, 271 - 243, 420, 58, 201);
+      DWIN_Frame_AreaCopy(1, 1, 405, 28, 420, 58, 201);
     else
-      DWIN_Frame_AreaCopy(1, 1, 423, 271 - 240, 423 + 12, 72 - 15, 201);
+      DWIN_Frame_AreaCopy(1, 1, 423, 31, 435, 57, 201);
   }
 }
 
@@ -253,16 +253,16 @@ void ICON_Prepare() {
     DWIN_ICON_Show(ICON, ICON_Prepare_1, 145, 130);
     DWIN_Draw_Rectangle(0, White, 145, 130, 254, 229);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 31, 447, 271 - 213, 479 - 19, 186, 201);
+      DWIN_Frame_AreaCopy(1, 31, 447, 58, 460, 186, 201);
     else
-      DWIN_Frame_AreaCopy(1, 33, 451, 271 - 189, 479 - 13, 200 - 25, 201);
+      DWIN_Frame_AreaCopy(1, 33, 451, 82, 466, 175, 201);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Prepare_0, 145, 130);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 31, 405, 271 - 213, 420, 186, 201);
+      DWIN_Frame_AreaCopy(1, 31, 405, 58, 420, 186, 201);
     else
-      DWIN_Frame_AreaCopy(1, 33, 423, 271 - 189, 423 + 15, 200 - 25, 201);
+      DWIN_Frame_AreaCopy(1, 33, 423, 82, 438, 175, 201);
   }
 }
 
@@ -271,16 +271,16 @@ void ICON_Control() {
     DWIN_ICON_Show(ICON, ICON_Control_1, 17, 246);
     DWIN_Draw_Rectangle(0, White, 17, 246, 126, 345);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 61, 447, 271 - 183, 479 - 19, 58, 318);
+      DWIN_Frame_AreaCopy(1, 61, 447, 88, 460, 58, 318);
     else
-      DWIN_Frame_AreaCopy(1, 85, 451, 271 - 139, 479 - 16, 72 - 24, 318);
+      DWIN_Frame_AreaCopy(1, 85, 451, 132, 463, 48, 318);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Control_0, 17, 246);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 61, 405, 271 - 183, 420, 58, 318);
+      DWIN_Frame_AreaCopy(1, 61, 405, 88, 420, 58, 318);
     else
-      DWIN_Frame_AreaCopy(1, 85, 423, 271 - 139, 479 - 45, 72 - 24, 318);
+      DWIN_Frame_AreaCopy(1, 85, 423, 132, 434, 48, 318);
   }
 }
 
@@ -289,16 +289,16 @@ void ICON_StartInfo(bool show) {
     DWIN_ICON_Show(ICON, ICON_Info_1, 145, 246);
     DWIN_Draw_Rectangle(0, White, 145, 246, 254, 345);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 91, 447, 271 - 153, 479 - 19, 186, 318);
+      DWIN_Frame_AreaCopy(1, 91, 447, 118, 460, 186, 318);
     else
-      DWIN_Frame_AreaCopy(1, 132, 451, 159, 479 - 13, 186, 318);
+      DWIN_Frame_AreaCopy(1, 132, 451, 159, 466, 186, 318);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Info_0, 145, 246);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 91, 405, 271 - 153, 420, 186, 318);
+      DWIN_Frame_AreaCopy(1, 91, 405, 118, 420, 186, 318);
     else
-      DWIN_Frame_AreaCopy(1, 132, 423, 159, 423 + 12, 186, 318);
+      DWIN_Frame_AreaCopy(1, 132, 423, 159, 435, 186, 318);
   }
 }
 
@@ -307,16 +307,16 @@ void ICON_Leveling(bool show) {
     DWIN_ICON_Show(ICON, ICON_Leveling_1, 145, 246);
     DWIN_Draw_Rectangle(0, White, 145, 246, 254, 345);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 211, 447, 238, 479 - 19, 186, 318);
+      DWIN_Frame_AreaCopy(1, 211, 447, 238, 460, 186, 318);
     else
-      DWIN_Frame_AreaCopy(1, 84, 437, 120,  449, 200 - 18, 318);
+      DWIN_Frame_AreaCopy(1, 84, 437, 120,  449, 182, 318);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Leveling_0, 145, 246);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 211, 405, 238, 420, 186, 318);
     else
-      DWIN_Frame_AreaCopy(1, 84, 465, 120, 478, 200 - 18, 318);
+      DWIN_Frame_AreaCopy(1, 84, 465, 120, 478, 182, 318);
   }
 }
 
@@ -325,16 +325,16 @@ void ICON_Tune() {
     DWIN_ICON_Show(ICON, ICON_Setup_1, 8, 252);
     DWIN_Draw_Rectangle(0, White, 8, 252, 87, 351);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 121, 447, 271 - 123, 479 - 21, 34, 325);
+      DWIN_Frame_AreaCopy(1, 121, 447, 148, 458, 34, 325);
     else
-      DWIN_Frame_AreaCopy(1, 1, 465, 271 - 237, 479 - 2, 48 - 17, 325);
+      DWIN_Frame_AreaCopy(1, 1, 465, 34, 477, 31, 325);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Setup_0, 8, 252);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 121, 405, 271 - 123, 420, 34, 325);
+      DWIN_Frame_AreaCopy(1, 121, 405, 148, 420, 34, 325);
     else
-      DWIN_Frame_AreaCopy(1, 1, 438, 271 - 239, 479 - 31, 48 - 17, 325);
+      DWIN_Frame_AreaCopy(1, 1, 438, 32, 448, 31, 325);
   }
 }
 
@@ -343,16 +343,16 @@ void ICON_Pause() {
     DWIN_ICON_Show(ICON, ICON_Pause_1, 96, 252);
     DWIN_Draw_Rectangle(0, White, 96, 252, 175, 351);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 181, 447, 271 - 63, 479 - 20, 124, 325);
+      DWIN_Frame_AreaCopy(1, 181, 447, 208, 459, 124, 325);
     else
-      DWIN_Frame_AreaCopy(1, 177, 451, 271 - 55, 479 - 17, 136 - 20, 325);
+      DWIN_Frame_AreaCopy(1, 177, 451, 216, 462, 116, 325);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Pause_0, 96, 252);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 181, 405, 271 - 63, 420, 124, 325);
+      DWIN_Frame_AreaCopy(1, 181, 405, 208, 420, 124, 325);
     else
-      DWIN_Frame_AreaCopy(1, 177, 423, 271 - 56, 479 - 46, 136 - 20, 325);
+      DWIN_Frame_AreaCopy(1, 177, 423, 215, 433, 116, 325);
   }
 }
 
@@ -361,16 +361,16 @@ void ICON_Continue() {
     DWIN_ICON_Show(ICON, ICON_Continue_1, 96, 252);
     DWIN_Draw_Rectangle(0, White, 96, 252, 175, 351);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 1, 447, 271 - 243, 479 - 19, 124, 325);
+      DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 124, 325);
     else
-      DWIN_Frame_AreaCopy(1, 1, 451, 271 - 239, 479 - 16, 136 - 15, 325);
+      DWIN_Frame_AreaCopy(1, 1, 451, 32, 463, 121, 325);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Continue_0, 96, 252);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 1, 405, 271 - 243, 420, 124, 325);
+      DWIN_Frame_AreaCopy(1, 1, 405, 28, 420, 124, 325);
     else
-      DWIN_Frame_AreaCopy(1, 1, 424, 271 - 240, 479 - 45, 136 - 15, 325);
+      DWIN_Frame_AreaCopy(1, 1, 424, 31, 434, 121, 325);
   }
 }
 
@@ -379,16 +379,16 @@ void ICON_Stop() {
     DWIN_ICON_Show(ICON, ICON_Stop_1, 184, 252);
     DWIN_Draw_Rectangle(0, White, 184, 252, 263, 351);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 151, 447, 271 - 93, 479 - 20, 210, 325);
+      DWIN_Frame_AreaCopy(1, 151, 447, 178, 459, 210, 325);
     else
-      DWIN_Frame_AreaCopy(1, 218, 451, 271 - 22, 479 - 14, 224 - 15, 325);
+      DWIN_Frame_AreaCopy(1, 218, 451, 249, 465, 209, 325);
   }
   else {
     DWIN_ICON_Show(ICON, ICON_Stop_0, 184, 252);
     if (HMI_flag.language_chinese)
-      DWIN_Frame_AreaCopy(1, 151, 405, 271 - 93, 420, 210, 325);
+      DWIN_Frame_AreaCopy(1, 151, 405, 178, 420, 210, 325);
     else
-      DWIN_Frame_AreaCopy(1, 218, 423, 271 - 24, 479 - 43, 224 - 15, 325);
+      DWIN_Frame_AreaCopy(1, 218, 423, 247, 436, 209, 325);
   }
 }
 
@@ -405,7 +405,7 @@ inline void Draw_Title(const __FlashStringHelper * title) {
 }
 
 inline void Clear_Menu_Area(void) {
-  DWIN_Draw_Rectangle(1, Background_black,  0,  31, 272,  360);
+  DWIN_Draw_Rectangle(1, Background_black,  0,  31, DWIN_WIDTH,  360);
 }
 
 inline void Clear_Main_Window(void) {
@@ -415,11 +415,11 @@ inline void Clear_Main_Window(void) {
 
 inline void Clear_Popup_Area(void) {
   Clear_Title_Bar();
-  DWIN_Draw_Rectangle(1, Background_black,  0,  31, 272,  480);
+  DWIN_Draw_Rectangle(1, Background_black,  0,  31, DWIN_WIDTH, DWIN_HEIGHT);
 }
 
 void Draw_Popup_Bkgd_105(void) {
-  DWIN_Draw_Rectangle(1, Background_window, 14, 105, 271 - 13, 479 - 105);
+  DWIN_Draw_Rectangle(1, Background_window, 14, 105, 258, 374);
 }
 
 inline void Draw_More_Icon(const uint8_t line) {
@@ -446,7 +446,7 @@ inline void Add_Menu_Line() {
 }
 
 inline void Scroll_Menu(const uint8_t dir) {
-  DWIN_Frame_AreaMove(1, dir, MLINE, Background_black, 0, 31, 272, 349);
+  DWIN_Frame_AreaMove(1, dir, MLINE, Background_black, 0, 31, DWIN_WIDTH, 349);
   switch (dir) {
     case DWIN_SCROLL_DOWN: Move_Highlight(-1, 0); break;
     case DWIN_SCROLL_UP:   Add_Menu_Line(); break;
@@ -474,9 +474,9 @@ inline void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char
 // The "Back" label is always on the first line
 inline void Draw_Back_Label(void) {
   if (HMI_flag.language_chinese)
-    DWIN_Frame_AreaCopy(1, 129, 72, 271 - 115, 479 - 395, LBLX, MBASE(0));
+    DWIN_Frame_AreaCopy(1, 129, 72, 156, 84, LBLX, MBASE(0));
   else
-    DWIN_Frame_AreaCopy(1, 226, 179, 271 - 15, 479 - 290, LBLX, MBASE(0));
+    DWIN_Frame_AreaCopy(1, 226, 179, 256, 189, LBLX, MBASE(0));
 }
 
 // Draw "Back" line at the top
@@ -491,12 +491,12 @@ inline void Draw_Back_First(const bool is_sel=true) {
 //
 
 inline void draw_move_en(const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 69, 61, 271 - 169, 479 - 408, LBLX, line); // "Move"
+  DWIN_Frame_AreaCopy(1, 69, 61, 102, 71, LBLX, line); // "Move"
 }
 
 inline void Prepare_Item_Move(const uint8_t row) {
   if (HMI_flag.language_chinese)
-    DWIN_Frame_AreaCopy(1, 159, 70, 271 - 71, 479 - 395, LBLX, MBASE(row));
+    DWIN_Frame_AreaCopy(1, 159, 70, 200, 84, LBLX, MBASE(row));
   else
     draw_move_en(MBASE(row)); // "Move >"
   Draw_Menu_Line(row, ICON_Axis);
@@ -505,35 +505,35 @@ inline void Prepare_Item_Move(const uint8_t row) {
 
 inline void Prepare_Item_Disable(const uint8_t row) {
   if (HMI_flag.language_chinese)
-    DWIN_Frame_AreaCopy(1, 204, 70, 271 - 12, 479 - 397, LBLX, MBASE(row));
+    DWIN_Frame_AreaCopy(1, 204, 70, 259, 82, LBLX, MBASE(row));
   else
-    DWIN_Frame_AreaCopy(1, 103, 59, 271 - 71, 479 - 405, LBLX, MBASE(row)); // "Disable Stepper"
+    DWIN_Frame_AreaCopy(1, 103, 59, 200, 74, LBLX, MBASE(row)); // "Disable Stepper"
   Draw_Menu_Line(row, ICON_CloseMotor);
 }
 
 inline void Prepare_Item_Home(const uint8_t row) {
   if (HMI_flag.language_chinese)
-    DWIN_Frame_AreaCopy(1, 0, 89, 271 - 230, 479 - 378, LBLX, MBASE(row));
+    DWIN_Frame_AreaCopy(1, 0, 89, 41, 101, LBLX, MBASE(row));
   else
-    DWIN_Frame_AreaCopy(1, 202, 61, 271 - 0, 479 - 408, LBLX, MBASE(row)); // "Auto Home"
+    DWIN_Frame_AreaCopy(1, 202, 61, 271, 71, LBLX, MBASE(row)); // "Auto Home"
   Draw_Menu_Line(row, ICON_Homing);
 }
 
 inline void Prepare_Item_Offset(const uint8_t row) {
   if (HMI_flag.language_chinese) {
     #if HAS_BED_PROBE
-      DWIN_Frame_AreaCopy(1, 174, 164, 271 - 48, 479 - 302, LBLX, MBASE(row));
+      DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(row));
       DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
     #else
-      DWIN_Frame_AreaCopy(1, 43, 89, 271 - 173, 479 - 378, LBLX, MBASE(row));
+      DWIN_Frame_AreaCopy(1, 43, 89, 98, 101, LBLX, MBASE(row));
     #endif
   }
   else {
     #if HAS_BED_PROBE
-      DWIN_Frame_AreaCopy(1, 93, 179, 271 - 130, 479 - 290, LBLX, MBASE(row)); // "Z-Offset"
+      DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(row)); // "Z-Offset"
       DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
     #else
-      DWIN_Frame_AreaCopy(1, 1, 76, 271 - 165, 479 - 393, LBLX, MBASE(row)); // "..."
+      DWIN_Frame_AreaCopy(1, 1, 76, 106, 86, LBLX, MBASE(row)); // "..."
     #endif
   }
   Draw_Menu_Line(row, ICON_SetHome);
@@ -541,41 +541,41 @@ inline void Prepare_Item_Offset(const uint8_t row) {
 
 inline void Prepare_Item_PLA(const uint8_t row) {
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 100, 89, 271 - 93 - 27, 479 - 378, LBLX, MBASE(row));
+    DWIN_Frame_AreaCopy(1, 100, 89, 151, 101, LBLX, MBASE(row));
   }
   else {
-    DWIN_Frame_AreaCopy(1, 107, 76, 271 - 115, 479 - 393, LBLX, MBASE(row)); // "Preheat"
-    DWIN_Frame_AreaCopy(1, 157, 76, 181, 479 - 393, LBLX + 49 + 3, MBASE(row)); // "PLA"
+    DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row)); // "Preheat"
+    DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(row)); // "PLA"
   }
   Draw_Menu_Line(row, ICON_PLAPreheat);
 }
 
 inline void Prepare_Item_ABS(const uint8_t row) {
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 180, 89, 271 - 11 - 27, 479 - 379, LBLX, MBASE(row));
+    DWIN_Frame_AreaCopy(1, 180, 89, 233, 100, LBLX, MBASE(row));
   }
   else {
-    DWIN_Frame_AreaCopy(1, 107, 76, 271 - 115, 479 - 393, LBLX, MBASE(row)); // "Preheat"
-    DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX + 49 + 3, MBASE(row)); // "ABS"
+    DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row)); // "Preheat"
+    DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(row)); // "ABS"
   }
   Draw_Menu_Line(row, ICON_ABSPreheat);
 }
 
 inline void Prepare_Item_Cool(const uint8_t row) {
   if (HMI_flag.language_chinese)
-    DWIN_Frame_AreaCopy(1, 1, 104, 271 - 215, 479 - 362, LBLX, MBASE(row));
+    DWIN_Frame_AreaCopy(1, 1, 104, 56, 117, LBLX, MBASE(row));
   else
-    DWIN_Frame_AreaCopy(1, 200,  76, 271 - 7, 479 - 393, LBLX, MBASE(row));// "Cooldown"
+    DWIN_Frame_AreaCopy(1, 200,  76, 264, 86, LBLX, MBASE(row));  // "Cooldown"
   Draw_Menu_Line(row, ICON_Cool);
 }
 
 inline void Prepare_Item_Lang(const uint8_t row) {
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 239, 134, 271 - 5, 479 - 333, LBLX, MBASE(row));
+    DWIN_Frame_AreaCopy(1, 239, 134, 266, 146, LBLX, MBASE(row));
     DWIN_Draw_String(false, false, font8x16, White, Background_black, 226, MBASE(row), F("CN"));
   }
   else {
-    DWIN_Frame_AreaCopy(1, 0, 194, 271 - 150, 479 - 272, LBLX, MBASE(row)); // "Language selection"
+    DWIN_Frame_AreaCopy(1, 0, 194, 121, 207, LBLX, MBASE(row)); // "Language selection"
     DWIN_Draw_String(false, false, font8x16, White, Background_black, 226, MBASE(row), F("EN"));
   }
   Draw_Menu_Icon(row, ICON_Language);
@@ -589,13 +589,13 @@ inline void Draw_Prepare_Menu() {
   #define PVISI(L)  WITHIN(PSCROL(L), 0, MROWS)
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 133, 1, 271 - 111, 479 - 465 - 1, 14, 8); // "Prepare"
+    DWIN_Frame_AreaCopy(1, 133, 1, 160, 13, 14, 8); // "Prepare"
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_PREPARE));
     #else
-      DWIN_Frame_AreaCopy(1, 178, 2, 271 - 42, 479 - 464 - 1, 14, 8); // "Prepare"
+      DWIN_Frame_AreaCopy(1, 178, 2, 229, 14, 14, 8); // "Prepare"
     #endif
   }
 
@@ -621,18 +621,18 @@ inline void Draw_Control_Menu() {
   #define CLINE(L)  MBASE(CSCROL(L))
   #define CVISI(L)  WITHIN(CSCROL(L), 0, MROWS)
 
-  if (CVISI(0)) Draw_Back_First(select_control.now == 0);                        // < Back
+  if (CVISI(0)) Draw_Back_First(select_control.now == 0);       // < Back
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 103,   1, 271 - 141, 479 - 465, 14, 8);
-    DWIN_Frame_AreaCopy(1,  57, 104, 271 - 187, 479 - 363, LBLX, CLINE(1));  // Temperature >
-    DWIN_Frame_AreaCopy(1,  87, 104, 271 - 157, 479 - 363, LBLX, CLINE(2));  // Motion >
-    DWIN_Frame_AreaCopy(1, 117, 104, 271 - 99, 479 - 363, LBLX, CLINE(3));   // Store Config
-    DWIN_Frame_AreaCopy(1, 174, 103, 271 - 42, 479 - 363, LBLX, CLINE(4));   // Read Config
-    DWIN_Frame_AreaCopy(1,   1, 118, 271 - 215, 479 - 348, LBLX, CLINE(5));  // Reset Config
+    DWIN_Frame_AreaCopy(1, 103,   1, 130, 14, 14, 8);
+    DWIN_Frame_AreaCopy(1,  57, 104, 84, 116, LBLX, CLINE(1));  // Temperature >
+    DWIN_Frame_AreaCopy(1,  87, 104, 114, 116, LBLX, CLINE(2)); // Motion >
+    DWIN_Frame_AreaCopy(1, 117, 104, 172, 116, LBLX, CLINE(3)); // Store Config
+    DWIN_Frame_AreaCopy(1, 174, 103, 229, 116, LBLX, CLINE(4)); // Read Config
+    DWIN_Frame_AreaCopy(1,   1, 118, 56, 131, LBLX, CLINE(5));  // Reset Config
 
     if (CVISI(6))
-      DWIN_Frame_AreaCopy(1, 231, 104, 271 - 13, 479 - 363, LBLX, CLINE(6)); // Info >
+      DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, CLINE(6)); // Info >
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -648,18 +648,18 @@ inline void Draw_Control_Menu() {
         if (CVISI(3)) DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Info"));
       #endif
     #else
-      DWIN_Frame_AreaCopy(1, 128, 2, 271 - 95, 479 - 467, 14, 8);
-      DWIN_Frame_AreaCopy(1,   1,    89, 271 - 188, 479 - 377 - 1, LBLX, CLINE(1));// Temperature >
-      DWIN_Frame_AreaCopy(1,  84,    89, 271 - 143, 479 - 380,   LBLX, CLINE(2));// Motion >
+      DWIN_Frame_AreaCopy(1, 128, 2, 176, 12, 14, 8);
+      DWIN_Frame_AreaCopy(1,   1,    89, 83, 101, LBLX, CLINE(1));      // Temperature >
+      DWIN_Frame_AreaCopy(1,  84,    89, 128, 99,   LBLX, CLINE(2));    // Motion >
       #if ENABLED(EEPROM_SETTINGS)
-        DWIN_Frame_AreaCopy(1, 131 + 17, 89, 271 -  3, 479 - 377 - 1, LBLX, CLINE(3));// "Store Configuration"
-        DWIN_Frame_AreaCopy(1, 26, 104, 271 - 214, 479 - 365, LBLX, CLINE(4));   // "Read"
-        DWIN_Frame_AreaCopy(1, 131 + 51, 89, 271 - 3, 479 - 377 - 1, LBLX + 31 + 3, CLINE(4)); // "Configuration"
-        DWIN_Frame_AreaCopy(1, 59, 104, 271 - 178, 479 - 365, LBLX, CLINE(5));   // "Reset"
-        DWIN_Frame_AreaCopy(1, 131 + 51, 89, 271 - 3, 479 - 377 - 1, LBLX + 34 + 3, CLINE(5)); // "Configuration"
-        if (CVISI(6)) DWIN_Frame_AreaCopy(1, 0, 104, 25, 115, LBLX, CLINE(6));   // Info >
+        DWIN_Frame_AreaCopy(1, 148, 89, 268, 101, LBLX, CLINE(3));      // "Store Configuration"
+        DWIN_Frame_AreaCopy(1, 26, 104, 57, 114, LBLX, CLINE(4));       // "Read"
+        DWIN_Frame_AreaCopy(1, 182, 89, 268, 101, LBLX + 34, CLINE(4)); // "Configuration"
+        DWIN_Frame_AreaCopy(1, 59, 104, 93, 114, LBLX, CLINE(5));       // "Reset"
+        DWIN_Frame_AreaCopy(1, 182, 89, 268, 101, LBLX + 37, CLINE(5)); // "Configuration"
+        if (CVISI(6)) DWIN_Frame_AreaCopy(1, 0, 104, 25, 115, LBLX, CLINE(6)); // Info >
       #else
-        if (CVISI(3)) DWIN_Frame_AreaCopy(1, 0, 104, 25, 115, LBLX, CLINE(3));   // Info >
+        if (CVISI(3)) DWIN_Frame_AreaCopy(1, 0, 104, 25, 115, LBLX, CLINE(3)); // Info >
       #endif
     #endif
   }
@@ -680,12 +680,12 @@ inline void Draw_Tune_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 73, 2, 271 - 171, 479 - 466, 14, 9);
-    DWIN_Frame_AreaCopy(1, 116, 164, 271 - 100, 479 - 303, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 1, 134, 271 - 215, 479 - 333, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 58, 134, 271 - 158, 479 - 333, LBLX, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 115, 134, 271 - 101, 479 - 333, LBLX, MBASE(4));
-    DWIN_Frame_AreaCopy(1, 174, 164, 271 - 48, 479 - 302, LBLX, MBASE(5));
+    DWIN_Frame_AreaCopy(1, 73, 2, 100, 13, 14, 9);
+    DWIN_Frame_AreaCopy(1, 116, 164, 171, 176, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX, MBASE(4));
+    DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(5));
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -696,14 +696,14 @@ inline void Draw_Tune_Menu() {
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_FAN_SPEED));
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
     #else
-      DWIN_Frame_AreaCopy(1, 94, 2, 271 - 145, 479 - 467, 14, 9);
-      DWIN_Frame_AreaCopy(1, 1, 179, 271 - 179, 479 - 287 - 2, LBLX, MBASE(1)); // print speed
-      DWIN_Frame_AreaCopy(1, 197, 104, 271 - 33, 479 - 365, LBLX, MBASE(2)); // Hotend...
-      DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 41 + 3, MBASE(2)); // ...Temperature
-      DWIN_Frame_AreaCopy(1, 240, 104, 271 - 7, 479 - 365, LBLX, MBASE(3)); // Bed...
-      DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 24 + 3, MBASE(3)); // ...Temperature
-      DWIN_Frame_AreaCopy(1, 0, 119, 271 - 207, 479 - 347, LBLX, MBASE(4)); // fan speed
-      DWIN_Frame_AreaCopy(1, 93, 179, 271 - 130, 479 - 290, LBLX, MBASE(5)); // Z-offset
+      DWIN_Frame_AreaCopy(1, 94, 2, 126, 12, 14, 9);
+      DWIN_Frame_AreaCopy(1, 1, 179, 92, 190, LBLX, MBASE(1)); // print speed
+      DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(2)); // Hotend...
+      DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(2)); // ...Temperature
+      DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX, MBASE(3)); // Bed...
+      DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 27, MBASE(3)); // ...Temperature
+      DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX, MBASE(4)); // fan speed
+      DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(5)); // Z-offset
     #endif
   }
 
@@ -724,47 +724,47 @@ inline void Draw_Tune_Menu() {
 }
 
 inline void draw_max_en(const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 245, 119, 271 - 2, 479 - 350, LBLX, line);   // "Max"
+  DWIN_Frame_AreaCopy(1, 245, 119, 269, 129, LBLX, line);   // "Max"
 }
 inline void draw_max_accel_en(const uint16_t line) {
   draw_max_en(line);
-  DWIN_Frame_AreaCopy(1, 1, 135, 271 - 192, 479 - 334, LBLX + 24 + 3, line); // "Acceleration"
+  DWIN_Frame_AreaCopy(1, 1, 135, 79, 145, LBLX + 27, line); // "Acceleration"
 }
 inline void draw_speed_en(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 184, 119, 224, 479 - 347, LBLX + inset, line); // "Speed"
+  DWIN_Frame_AreaCopy(1, 184, 119, 224, 132, LBLX + inset, line); // "Speed"
 }
-inline void draw_corner_en(const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 64, 119, 271 - 165, 479 - 350, LBLX + 24 + 3, line); // "Corner"
+inline void draw_jerk_en(const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 64, 119, 106, 129, LBLX + 27, line); // "Jerk"
 }
 inline void draw_steps_per_mm(const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 1, 151, 271 - 170, 479 - 318, LBLX, line);   // "Steps-per-mm"
+  DWIN_Frame_AreaCopy(1, 1, 151, 101, 161, LBLX, line);   // "Steps-per-mm"
 }
 inline void say_x(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 95, 104, 271 - 169, 479 - 365, LBLX + inset, line); // "X"
+  DWIN_Frame_AreaCopy(1, 95, 104, 102, 114, LBLX + inset, line); // "X"
 }
 inline void say_y(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 104, 104, 271 - 161, 479 - 365, LBLX + inset, line); // "Y"
+  DWIN_Frame_AreaCopy(1, 104, 104, 110, 114, LBLX + inset, line); // "Y"
 }
 inline void say_z(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 112, 104, 271 - 151, 479 - 365, LBLX + inset, line); // "Z"
+  DWIN_Frame_AreaCopy(1, 112, 104, 120, 114, LBLX + inset, line); // "Z"
 }
 inline void say_e(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 237, 119, 271 - 27, 479 - 350, LBLX + inset, line); // "E"
+  DWIN_Frame_AreaCopy(1, 237, 119, 244, 129, LBLX + inset, line); // "E"
 }
 
 inline void Draw_Motion_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 1, 16, 271 - 243, 479 - 451, 14, 8);
+    DWIN_Frame_AreaCopy(1, 1, 16, 28, 28, 14, 8);
 
-    DWIN_Frame_AreaCopy(1, 173, 133, 228, 479 - 332, LBLX, MBASE(1));     // max speed
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(2));     // max...
-    DWIN_Frame_AreaCopy(1, 28, 149, 271 - 202, 479 - 318, LBLX + 27, MBASE(2) + 1); // ...acceleration
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(3));     // max...
-    DWIN_Frame_AreaCopy(1, 1, 180, 271 - 243, 479 - 287, LBLX + 27, MBASE(3) + 1); // ...
-    DWIN_Frame_AreaCopy(1, 202, 133, 228, 479 - 332, LBLX + 54, MBASE(3)); // ...jerk
-    DWIN_Frame_AreaCopy(1, 153, 148, 271 - 77, 479 - 318, LBLX, MBASE(4)); // flow ratio
+    DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, MBASE(1));        // Max speed
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(2));        // Max...
+    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(2) + 1); // ...acceleration
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(3));        // Max...
+    DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(3) + 1);  // ...
+    DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 54, MBASE(3));   // ...jerk
+    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(4));        // Flow ratio
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -774,11 +774,11 @@ inline void Draw_Motion_Menu() {
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_JERK));
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_STEPS_PER_MM));
     #else
-      DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
-      draw_max_en(MBASE(1)); draw_speed_en(24 + 3, MBASE(1));               // "Max Speed"
-      draw_max_accel_en(MBASE(2));                                          // "Max Acceleration"
-      draw_max_en(MBASE(3)); draw_corner_en(MBASE(3));                      // "Max Corner"
-      draw_steps_per_mm(MBASE(4));                                          // "Steps-per-mm"
+      DWIN_Frame_AreaCopy(1, 144, 16, 189, 26, 14, 8);
+      draw_max_en(MBASE(1)); draw_speed_en(27, MBASE(1)); // "Max Speed"
+      draw_max_accel_en(MBASE(2));                        // "Max Acceleration"
+      draw_max_en(MBASE(3)); draw_jerk_en(MBASE(3));      // "Max Jerk"
+      draw_steps_per_mm(MBASE(4));                        // "Steps-per-mm"
     #endif
   }
 
@@ -803,9 +803,9 @@ void Popup_Window_Temperature(const bool toohigh) {
   if (toohigh) {
     DWIN_ICON_Show(ICON, ICON_TempTooHigh, 102, 165);
     if (HMI_flag.language_chinese) {
-      DWIN_Frame_AreaCopy(1, 103, 371, 237, 479 - 93, 52, 285);
+      DWIN_Frame_AreaCopy(1, 103, 371, 237, 386, 52, 285);
       DWIN_Frame_AreaCopy(1, 151, 389, 185, 402, 187, 285);
-      DWIN_Frame_AreaCopy(1, 189, 389, 271 - 0, 402, 95, 310);
+      DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
     }
     else {
       DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, F("Nozzle or Bed temperature"));
@@ -815,8 +815,8 @@ void Popup_Window_Temperature(const bool toohigh) {
   else {
     DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 165);
     if (HMI_flag.language_chinese) {
-      DWIN_Frame_AreaCopy(1, 103, 371, 271 - 1, 479 - 93, 52, 285);
-      DWIN_Frame_AreaCopy(1, 189, 389, 271 - 0, 402, 95, 310);
+      DWIN_Frame_AreaCopy(1, 103, 371, 270, 386, 52, 285);
+      DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
     }
     else {
       DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, F("Nozzle or Bed temperature"));
@@ -826,7 +826,7 @@ void Popup_Window_Temperature(const bool toohigh) {
 }
 
 inline void Draw_Popup_Bkgd_60() {
-  DWIN_Draw_Rectangle(1, Background_window, 14, 60, 271 - 13, 330);
+  DWIN_Draw_Rectangle(1, Background_window, 14, 60, 258, 330);
 }
 
 #if HAS_HOTEND
@@ -836,8 +836,8 @@ inline void Draw_Popup_Bkgd_60() {
     Draw_Popup_Bkgd_60();
     DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 105);
     if (HMI_flag.language_chinese) {
-      DWIN_Frame_AreaCopy(1, 103, 371, 136, 479 - 93, 69, 240);
-      DWIN_Frame_AreaCopy(1, 170, 371, 271 - 1, 479 - 93, 69 + 33, 240);
+      DWIN_Frame_AreaCopy(1, 103, 371, 136, 386, 69, 240);
+      DWIN_Frame_AreaCopy(1, 170, 371, 270, 386, 102, 240);
       DWIN_ICON_Show(ICON, ICON_Confirm_C, 86, 280);
     }
     else {
@@ -852,8 +852,8 @@ void Popup_Window_Resume(void) {
   Clear_Popup_Area();
   Draw_Popup_Bkgd_105();
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 160, 338, 271 - 36, 479 - 125, 98, 135);
-    DWIN_Frame_AreaCopy(1, 103, 321, 271 - 0, 479 - 144, 52, 192);
+    DWIN_Frame_AreaCopy(1, 160, 338, 235, 354, 98, 135);
+    DWIN_Frame_AreaCopy(1, 103, 321, 271, 335, 52, 192);
     DWIN_ICON_Show(ICON, ICON_Continue_C, 26, 307);
     DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 307);
   }
@@ -926,14 +926,14 @@ void Popup_window_PauseOrStop(void) {
 
 void Draw_Printing_Screen(void) {
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 30,  1, 271 - 200, 479 - 465,  14,   9);// Tune
-    DWIN_Frame_AreaCopy(1,  0, 72, 271 - 208, 479 - 393,  41, 188);// Pause
-    DWIN_Frame_AreaCopy(1, 65, 72, 271 - 143, 479 - 393, 176, 188); // Stop
+    DWIN_Frame_AreaCopy(1, 30,  1, 71, 14,  14,   9);   // Tune
+    DWIN_Frame_AreaCopy(1,  0, 72, 63, 86,  41, 188);   // Pause
+    DWIN_Frame_AreaCopy(1, 65, 72, 128, 86, 176, 188);  // Stop
   }
   else {
-    DWIN_Frame_AreaCopy(1, 40,  2, 271 - 179, 479 - 464 - 1,  14,   9);// Tune
-    DWIN_Frame_AreaCopy(1,  0, 44, 271 - 175, 479 - 420 - 1,  41, 188);// Pause
-    DWIN_Frame_AreaCopy(1, 98, 44, 271 - 119, 479 - 420 - 1, 176, 188); // Stop
+    DWIN_Frame_AreaCopy(1, 40,  2, 92, 14,  14,   9);   // Tune
+    DWIN_Frame_AreaCopy(1,  0, 44, 96, 58,  41, 188);   // Pause
+    DWIN_Frame_AreaCopy(1, 98, 44, 152, 58, 176, 188);  // Stop
   }
 }
 
@@ -941,20 +941,20 @@ void Draw_Print_ProgressBar() {
   DWIN_ICON_Show(ICON, ICON_Bar, 15, 93);
   DWIN_Draw_Rectangle(1, BarFill_Color, 16 + Percentrecord * 240 / 100, 93, 256, 113);
   DWIN_Draw_IntValue(true, true, 0, font8x16, Percent_Color, Background_black, 2, 117, 133, Percentrecord);
-  DWIN_Draw_String(false, false, font8x16, Percent_Color, Background_black, 117 + 16, 133, F("%"));
+  DWIN_Draw_String(false, false, font8x16, Percent_Color, Background_black, 133, 133, F("%"));
 }
 
 void Draw_Print_ProgressElapsed() {
   duration_t elapsed = print_job_timer.duration(); // print timer
   DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 42, 212, elapsed.value / 3600);
-  DWIN_Draw_String(false, false, font8x16, White, Background_black, 42 + 16, 212, F(":"));
-  DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 42 + 24, 212, (elapsed.value % 3600) / 60);
+  DWIN_Draw_String(false, false, font8x16, White, Background_black, 58, 212, F(":"));
+  DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 66, 212, (elapsed.value % 3600) / 60);
 }
 
 void Draw_Print_ProgressRemain() {
   DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 176, 212, remain_time / 3600);
-  DWIN_Draw_String(false, false, font8x16, White, Background_black, 176 + 16, 212, F(":"));
-  DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 176 + 24, 212, (remain_time % 3600) / 60);
+  DWIN_Draw_String(false, false, font8x16, White, Background_black, 192, 212, F(":"));
+  DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 200, 212, (remain_time % 3600) / 60);
 }
 
 void Goto_PrintProcess(void) {
@@ -986,13 +986,13 @@ void Goto_MainMenu(void) {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 2, 2, 271 - 244, 479 - 465, 14, 9); // "Home"
+    DWIN_Frame_AreaCopy(1, 2, 2, 27, 14, 14, 9); // "Home"
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_MAIN));
     #else
-      DWIN_Frame_AreaCopy(1, 0, 2, 271 - 232, 479 - 467, 14, 9);
+      DWIN_Frame_AreaCopy(1, 0, 2, 39, 12, 14, 9);
     #endif
   }
 
@@ -1411,37 +1411,37 @@ void HMI_MaxAccelerationXYZE(void) {
   }
 }
 
-void HMI_MaxCornerXYZE(void) {
+void HMI_MaxJerkXYZE(void) {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
     if (encoder_diffState == ENCODER_DIFF_CW) {
-      HMI_ValueStruct.Max_Corner += EncoderRate.encoderMoveValue;
+      HMI_ValueStruct.Max_Jerk += EncoderRate.encoderMoveValue;
     }
     else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      HMI_ValueStruct.Max_Corner -= EncoderRate.encoderMoveValue;
+      HMI_ValueStruct.Max_Jerk -= EncoderRate.encoderMoveValue;
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
-      checkkey = MaxCorner;
+      checkkey = MaxJerk;
       EncoderRate.encoderRateEnabled = 0;
-      if (HMI_flag.corner_flag == X_AXIS) planner.set_max_jerk(X_AXIS, HMI_ValueStruct.Max_Corner / 10);
-      else if (HMI_flag.corner_flag == Y_AXIS) planner.set_max_jerk(Y_AXIS, HMI_ValueStruct.Max_Corner / 10);
-      else if (HMI_flag.corner_flag == Z_AXIS) planner.set_max_jerk(Z_AXIS, HMI_ValueStruct.Max_Corner / 10);
-      else if (HMI_flag.corner_flag == E_AXIS) planner.set_max_jerk(E_AXIS, HMI_ValueStruct.Max_Corner / 10);
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(select_corner.now), HMI_ValueStruct.Max_Corner);
+           if (HMI_flag.jerk_flag == X_AXIS) planner.set_max_jerk(X_AXIS, HMI_ValueStruct.Max_Jerk / 10);
+      else if (HMI_flag.jerk_flag == Y_AXIS) planner.set_max_jerk(Y_AXIS, HMI_ValueStruct.Max_Jerk / 10);
+      else if (HMI_flag.jerk_flag == Z_AXIS) planner.set_max_jerk(Z_AXIS, HMI_ValueStruct.Max_Jerk / 10);
+      else if (HMI_flag.jerk_flag == E_AXIS) planner.set_max_jerk(E_AXIS, HMI_ValueStruct.Max_Jerk / 10);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
       return;
     }
-    // MaxCorner limit
-    if (HMI_flag.corner_flag == X_AXIS)
-      NOMORE(HMI_ValueStruct.Max_Corner, default_max_jerk[X_AXIS] * 2 * MINUNITMULT);
-    else if (HMI_flag.corner_flag == Y_AXIS)
-      NOMORE(HMI_ValueStruct.Max_Corner, default_max_jerk[Y_AXIS] * 2 * MINUNITMULT);
-    else if (HMI_flag.corner_flag == Z_AXIS)
-      NOMORE(HMI_ValueStruct.Max_Corner, default_max_jerk[Z_AXIS] * 2 * MINUNITMULT);
-    else if (HMI_flag.corner_flag == E_AXIS)
-      NOMORE(HMI_ValueStruct.Max_Corner, default_max_jerk[E_AXIS] * 2 * MINUNITMULT);
-    NOLESS(HMI_ValueStruct.Max_Corner, (MIN_MAXCORNER) * MINUNITMULT);
-    // MaxCorner value
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_corner.now), HMI_ValueStruct.Max_Corner);
+    // MaxJerk limit
+    if (HMI_flag.jerk_flag == X_AXIS)
+      NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[X_AXIS] * 2 * MINUNITMULT);
+    else if (HMI_flag.jerk_flag == Y_AXIS)
+      NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[Y_AXIS] * 2 * MINUNITMULT);
+    else if (HMI_flag.jerk_flag == Z_AXIS)
+      NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[Z_AXIS] * 2 * MINUNITMULT);
+    else if (HMI_flag.jerk_flag == E_AXIS)
+      NOMORE(HMI_ValueStruct.Max_Jerk, default_max_jerk[E_AXIS] * 2 * MINUNITMULT);
+    NOLESS(HMI_ValueStruct.Max_Jerk, (MIN_MAXCORNER) * MINUNITMULT);
+    // MaxJerk value
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
   }
 }
 
@@ -1707,7 +1707,7 @@ void HMI_SDCardUpdate(void) {
 void HMI_StartFrame(const bool with_update) {
   Goto_MainMenu();
 
-  DWIN_Draw_Rectangle(1, Background_black,  0,  360,  272, 479);
+  DWIN_Draw_Rectangle(1, Background_black,  0,  360, DWIN_WIDTH, DWIN_HEIGHT - 1);
 
   DWIN_ICON_Show(ICON, ICON_HotendTemp, 13, 381);
   #if HOTENDS > 1
@@ -1724,7 +1724,7 @@ void HMI_StartFrame(const bool with_update) {
   DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
 
   DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
-  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + (2 + 3) * STAT_CHR_W + 2, 429, F("%"));
+  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + 5 * STAT_CHR_W + 2, 429, F("%"));
 
   DWIN_Draw_Signed_Float(STAT_FONT, Background_black, 2, 2, 178, 429, BABY_Z_VAR * 100);
   DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + 3 * STAT_CHR_W + 5, 383, F("/"));
@@ -1743,23 +1743,23 @@ inline void Draw_Info_Menu() {
   DWIN_Draw_String(false, false, font8x16, White, Background_black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, (char*)SHORT_BUILD_VERSION);
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 30, 17, 271 - 214, 479 - 450, 14, 8);
+    DWIN_Frame_AreaCopy(1, 30, 17, 57, 29, 14, 8);
 
-    DWIN_Frame_AreaCopy(1, 197, 149, 271 - 19, 479 - 318, 108, 102);
-    DWIN_Frame_AreaCopy(1, 1, 164, 271 - 215, 479 - 303, 108, 175);
-    DWIN_Frame_AreaCopy(1, 58, 164, 271 - 158, 479 - 303, 105, 248);
+    DWIN_Frame_AreaCopy(1, 197, 149, 252, 161, 108, 102);
+    DWIN_Frame_AreaCopy(1, 1, 164, 56, 176, 108, 175);
+    DWIN_Frame_AreaCopy(1, 58, 164, 113, 176, 105, 248);
     DWIN_Draw_String(false, false, font8x16, White, Background_black, (DWIN_WIDTH - strlen(CORP_WEBSITE_C) * MENU_CHR_W) / 2, 268, (char*)CORP_WEBSITE_C);
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_INFO_SCREEN));
     #else
-      DWIN_Frame_AreaCopy(1, 190, 16, 271 - 56, 479 - 453, 14, 8);
+      DWIN_Frame_AreaCopy(1, 190, 16, 215, 26, 14, 8);
     #endif
 
-    DWIN_Frame_AreaCopy(1, 120, 150, 146, 479 - 318, 124, 102);
-    DWIN_Frame_AreaCopy(1, 146, 151, 271 - 17, 479 - 318, 82, 175);
-    DWIN_Frame_AreaCopy(1, 0, 165, 271 - 177, 479 - 304, 89, 248);
+    DWIN_Frame_AreaCopy(1, 120, 150, 146, 161, 124, 102);
+    DWIN_Frame_AreaCopy(1, 146, 151, 254, 161, 82, 175);
+    DWIN_Frame_AreaCopy(1, 0, 165, 94, 175, 89, 248);
     DWIN_Draw_String(false, false, font8x16, White, Background_black, (DWIN_WIDTH - strlen(CORP_WEBSITE_E) * MENU_CHR_W) / 2, 268, (char*)CORP_WEBSITE_E);
   }
 
@@ -1774,13 +1774,13 @@ inline void Draw_Print_File_Menu() {
   Clear_Title_Bar();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 0, 31, 271 - 216, 479 - 435, 14, 8);
+    DWIN_Frame_AreaCopy(1, 0, 31, 55, 44, 14, 8);
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title("Print file"); // TODO: GET_TEXT_F
     #else
-      DWIN_Frame_AreaCopy(1, 52, 31, 271 - 134, 479 - 438, 14, 8); // "Print file"
+      DWIN_Frame_AreaCopy(1, 52, 31, 137, 41, 14, 8); // "Print file"
     #endif
   }
 
@@ -2054,8 +2054,7 @@ void HMI_Printing(void) {
         Popup_window_PauseOrStop();
         break;
 
-      default:
-        break;
+      default: break;
     }
   }
   DWIN_UpdateLCD();
@@ -2121,25 +2120,25 @@ inline void Draw_Move_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 192, 1, 271 - 38, 479 - 465, 14, 8);
-    DWIN_Frame_AreaCopy(1, 58, 118, 271 - 165, 479 - 347, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 109, 118, 271 - 114, 479 - 347, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 160, 118, 271 - 62, 479 - 347, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 192, 1, 233, 14, 14, 8);
+    DWIN_Frame_AreaCopy(1, 58, 118, 106, 132, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 109, 118, 157, 132, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 160, 118, 209, 132, LBLX, MBASE(3));
     #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 212, 118, 271 - 18, 479 - 348, LBLX, MBASE(4));
+      DWIN_Frame_AreaCopy(1, 212, 118, 253, 131, LBLX, MBASE(4));
     #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_MOVE_AXIS));
     #else
-      DWIN_Frame_AreaCopy(1, 231, 2, 271 - 6, 479 - 467, 14, 8);
+      DWIN_Frame_AreaCopy(1, 231, 2, 265, 12, 14, 8);
     #endif
-    draw_move_en(MBASE(1)); say_x(33 + 3, MBASE(1));                    // "Move X"
-    draw_move_en(MBASE(2)); say_y(33 + 3, MBASE(2));                    // "Move Y"
-    draw_move_en(MBASE(3)); say_z(33 + 3, MBASE(3));                    // "Move Z"
+    draw_move_en(MBASE(1)); say_x(36, MBASE(1));                    // "Move X"
+    draw_move_en(MBASE(2)); say_y(36, MBASE(2));                    // "Move Y"
+    draw_move_en(MBASE(3)); say_z(36, MBASE(3));                    // "Move Z"
     #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 123, 192, 271 - 95, 479 - 277, LBLX, MBASE(4)); // "Extruder"
+      DWIN_Frame_AreaCopy(1, 123, 192, 176, 202, LBLX, MBASE(4)); // "Extruder"
     #endif
   }
 
@@ -2277,8 +2276,7 @@ void HMI_Prepare(void) {
         }
         Draw_Prepare_Menu();
         break;
-      default:
-        break;
+      default: break;
     }
   }
   DWIN_UpdateLCD();
@@ -2288,13 +2286,13 @@ void Draw_Temperature_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 236, 2, 271 - 8, 479 - 466, 14, 8);
+    DWIN_Frame_AreaCopy(1, 236, 2, 263, 13, 14, 8);
 
-    DWIN_Frame_AreaCopy(1, 1, 134, 271 - 215, 479 - 333, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 58, 134, 271 - 158, 479 - 333, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 115, 134, 271 - 101, 479 - 333, LBLX, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 100, 89, 271 - 93, 479 - 378, LBLX, MBASE(4));
-    DWIN_Frame_AreaCopy(1, 180, 89, 271 - 11, 479 - 379, LBLX, MBASE(5));
+    DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 100, 89, 178, 101, LBLX, MBASE(4));
+    DWIN_Frame_AreaCopy(1, 180, 89, 260, 100, LBLX, MBASE(5));
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -2305,18 +2303,18 @@ void Draw_Temperature_Menu() {
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("PLA Preheat Settings"));
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), F("ABS Preheat Settings"));
     #else
-      DWIN_Frame_AreaCopy(1, 56, 16, 271 - 130, 479 - 450 - 1, 14, 8);
-      DWIN_Frame_AreaCopy(1, 197, 104, 271 - 33, 479 - 365, LBLX, MBASE(1));                    // Nozzle...
-      DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 41 + 3, MBASE(1));         // ...Temperature
-      DWIN_Frame_AreaCopy(1, 240, 104, 271 - 7, 479 - 365, LBLX, MBASE(2));                     // Bed...
-      DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 24 + 3, MBASE(2));         // ...Temperature
-      DWIN_Frame_AreaCopy(1, 0, 119, 271 - 207, 479 - 347, LBLX, MBASE(3));                     // Fan speed
-      DWIN_Frame_AreaCopy(1, 107, 76, 271 - 115, 479 - 393, LBLX, MBASE(4));                    // Preheat...
-      DWIN_Frame_AreaCopy(1, 157, 76, 181, 479 - 393, LBLX + 49 + 3, MBASE(4));                 // ...PLA
-      DWIN_Frame_AreaCopy(1, 131, 119, 271 - 89, 479 - 347, LBLX + 49 + 24 + 6, MBASE(4));      // PLA setting
-      DWIN_Frame_AreaCopy(1, 107, 76, 271 - 115, 479 - 393, LBLX, MBASE(5));                    // Preheat...
-      DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX + 49 + 3, MBASE(5));                 // ...ABS
-      DWIN_Frame_AreaCopy(1, 131, 119, 271 - 89, 479 - 347, LBLX + 49 + 3 + 26 + 3, MBASE(5));  // ABS setting
+      DWIN_Frame_AreaCopy(1, 56, 16, 141, 28, 14, 8);
+      DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(1));           // Nozzle...
+      DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(1));      // ...Temperature
+      DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX, MBASE(2));           // Bed...
+      DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 27, MBASE(2));      // ...Temperature
+      DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX, MBASE(3));              // Fan speed
+      DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(4));             // Preheat...
+      DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(4));        // ...PLA
+      DWIN_Frame_AreaCopy(1, 131, 119, 182, 132, LBLX + 79, MBASE(4));  // PLA setting
+      DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(5));             // Preheat...
+      DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(5));        // ...ABS
+      DWIN_Frame_AreaCopy(1, 131, 119, 182, 132, LBLX + 81, MBASE(5));      // ABS setting
     #endif
   }
 
@@ -2351,9 +2349,9 @@ void HMI_Control(void) {
         if (index_control > MROWS) {
           Draw_More_Icon(6 + MROWS - index_control); // Info >
           if (HMI_flag.language_chinese)
-            DWIN_Frame_AreaCopy(1, 231, 104, 271 - 13, 479 - 363, LBLX, MBASE(5));
+            DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, MBASE(5));
           else
-            DWIN_Frame_AreaCopy(1, 0, 104, 271 - 247, 479 - 365, LBLX, MBASE(5));
+            DWIN_Frame_AreaCopy(1, 0, 104, 24, 114, LBLX, MBASE(5));
         }
       }
       else {
@@ -2414,8 +2412,7 @@ void HMI_Control(void) {
         checkkey = Info;
         Draw_Info_Menu();
         break;
-      default:
-        break;
+      default: break;
     }
   }
   DWIN_UpdateLCD();
@@ -2563,15 +2560,15 @@ void HMI_Temperature(void) {
             Clear_Main_Window();
 
             if (HMI_flag.language_chinese) {
-              DWIN_Frame_AreaCopy(1, 59, 16, 271 - 132, 479 - 450, 14, 8);
-
-              DWIN_Frame_AreaCopy(1, 100, 89, 124, 479 - 378, LBLX, MBASE(1));
-              DWIN_Frame_AreaCopy(1, 1, 134, 271 - 215, 479 - 333, LBLX + 24, MBASE(1)); // PLA nozzle temp
-              DWIN_Frame_AreaCopy(1, 100, 89, 124, 479 - 378, LBLX, MBASE(2));
-              DWIN_Frame_AreaCopy(1, 58, 134, 271 - 158, 479 - 333, LBLX + 24, MBASE(2)); // PLA bed temp
-              DWIN_Frame_AreaCopy(1, 100, 89, 124, 479 - 378, LBLX, MBASE(3));
-              DWIN_Frame_AreaCopy(1, 115, 134, 271 - 101, 479 - 333, LBLX + 24, MBASE(3)); // PLA fan speed
-              DWIN_Frame_AreaCopy(1, 72, 148, 271 - 120, 479 - 317, LBLX, MBASE(4)); // save PLA configuration
+              DWIN_Frame_AreaCopy(1, 59, 16, 139, 29, 14, 8);
+
+              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(1));
+              DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(1)); // PLA nozzle temp
+              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(2));
+              DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX + 24, MBASE(2)); // PLA bed temp
+              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(3));
+              DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX + 24, MBASE(3)); // PLA fan speed
+              DWIN_Frame_AreaCopy(1, 72, 148, 151, 162, LBLX, MBASE(4)); // save PLA configuration
             }
             else {
               #ifdef USE_STRING_HEADINGS
@@ -2581,16 +2578,16 @@ void HMI_Temperature(void) {
                 DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_FAN_SPEED));
                 DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_STORE_EEPROM));
               #else
-                DWIN_Frame_AreaCopy(1, 56, 16, 271 - 130, 479 - 450 - 1, 14, 8);
-                DWIN_Frame_AreaCopy(1, 157, 76, 181, 479 - 393, LBLX, MBASE(1));
-                DWIN_Frame_AreaCopy(1, 197, 104, 271 - 33, 479 - 365, LBLX + 24 + 3, MBASE(1));
-                DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 24 + 41 + 6, MBASE(1)); // PLA nozzle temp
-                DWIN_Frame_AreaCopy(1, 157, 76, 181, 479 - 393, LBLX, MBASE(2) + 3);
-                DWIN_Frame_AreaCopy(1, 240, 104, 271 - 7, 479 - 365, LBLX + 24 + 3, MBASE(2) + 3);
-                DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 24 + 24 + 6, MBASE(2) + 3); // PLA bed temp
-                DWIN_Frame_AreaCopy(1, 157, 76, 181, 479 - 393, LBLX, MBASE(3));
-                DWIN_Frame_AreaCopy(1, 0, 119, 271 - 207, 479 - 347, LBLX + 24 + 3, MBASE(3)); // PLA fan speed
-                DWIN_Frame_AreaCopy(1, 97, 165, 271 - 42, 479 - 301 - 1, LBLX, MBASE(4)); // save PLA configuration
+                DWIN_Frame_AreaCopy(1, 56, 16, 141, 28, 14, 8);
+                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(1));
+                DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(1));
+                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(1)); // PLA nozzle temp
+                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(2) + 3);
+                DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(2) + 3);
+                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 54, MBASE(2) + 3); // PLA bed temp
+                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(3));
+                DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(3)); // PLA fan speed
+                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(4)); // save PLA configuration
               #endif
             }
 
@@ -2617,16 +2614,16 @@ void HMI_Temperature(void) {
             Clear_Main_Window();
 
             if (HMI_flag.language_chinese) {
-              DWIN_Frame_AreaCopy(1, 142, 16, 271 - 48, 479 - 450, 14, 8);
-
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 479 - 379, LBLX, MBASE(1));
-              DWIN_Frame_AreaCopy(1, 1, 134, 271 - 215, 479 - 333, LBLX + 24, MBASE(1)); // ABS nozzle temp
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 479 - 379, LBLX, MBASE(2));
-              DWIN_Frame_AreaCopy(1, 58, 134, 271 - 158, 479 - 333, LBLX + 24, MBASE(2)); // ABS bed temp
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 479 - 379, LBLX, MBASE(3));
-              DWIN_Frame_AreaCopy(1, 115, 134, 271 - 101, 479 - 333, LBLX + 24, MBASE(3)); // ABS fan speed
-              DWIN_Frame_AreaCopy(1, 72, 148, 271 - 120, 479 - 317, LBLX, MBASE(4));
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 479 - 379, LBLX + 28, MBASE(4) + 2); // save ABS configuration
+              DWIN_Frame_AreaCopy(1, 142, 16, 223, 29, 14, 8);
+
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(1));
+              DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(1));       // ABS nozzle temp
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(2));
+              DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX + 24, MBASE(2));     // ABS bed temp
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(3));
+              DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX + 24, MBASE(3));    // ABS fan speed
+              DWIN_Frame_AreaCopy(1, 72, 148, 151, 162, LBLX, MBASE(4));
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX + 28, MBASE(4) + 2); // save ABS configuration
             }
             else {
               #ifdef USE_STRING_HEADINGS
@@ -2636,17 +2633,17 @@ void HMI_Temperature(void) {
                 DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_FAN_SPEED));
                 DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_STORE_EEPROM));
               #else
-                DWIN_Frame_AreaCopy(1, 56, 16, 271 - 130, 479 - 450 - 1, 14, 8);
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX, MBASE(1));
-                DWIN_Frame_AreaCopy(1, 197, 104, 271 - 33, 479 - 365, LBLX + 24 + 3, MBASE(1));
-                DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 24 + 41 + 6, MBASE(1)); // ABS nozzle temp
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX, MBASE(2) + 3);
-                DWIN_Frame_AreaCopy(1, 240, 104, 271 - 7, 479 - 365, LBLX + 24 + 3, MBASE(2) + 3);
-                DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 24 + 24 + 6, MBASE(2) + 3); // ABS bed temp
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX, MBASE(3));
-                DWIN_Frame_AreaCopy(1, 0, 119, 271 - 207, 479 - 347, LBLX + 24 + 3, MBASE(3)); // ABS fan speed
-                DWIN_Frame_AreaCopy(1, 97, 165, 271 - 42, 479 - 301 - 1, LBLX, MBASE(4));
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX + 33, MBASE(4));  // save ABS configuration
+                DWIN_Frame_AreaCopy(1, 56, 16, 141, 28, 14, 8);
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(1));
+                DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(1));
+                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(1));      // ABS nozzle temp
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(2) + 3);
+                DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(2) + 3);
+                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 54, MBASE(2) + 3);  // ABS bed temp
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(3));
+                DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(3));     // ABS fan speed
+                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(4));
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 33, MBASE(4));    // save ABS configuration
               #endif
             }
 
@@ -2674,20 +2671,20 @@ inline void Draw_Max_Speed_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 1, 16, 271 - 243, 479 - 451, 14, 8);
+    DWIN_Frame_AreaCopy(1, 1, 16, 28, 28, 14, 8);
 
     auto say_max_speed = [](const uint16_t row) {
-      DWIN_Frame_AreaCopy(1, 173, 133, 228, 479 - 332, LBLX, row);        // "Max speed"
+      DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, row);            // "Max speed"
     };
 
-    say_max_speed(MBASE(1));                                                // "Max speed"
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 479 - 332, LBLX + 55 + 3, MBASE(1)); // X
-    say_max_speed(MBASE(2));                                                // "Max speed"
-    DWIN_Frame_AreaCopy(1, 1, 150, 271 - 264, 479 - 319, LBLX + 55 + 3, MBASE(2) + 3); // Y
-    say_max_speed(MBASE(3));                                                // "Max speed"
-    DWIN_Frame_AreaCopy(1, 9, 150, 271 - 255, 479 - 319, LBLX + 55 + 3, MBASE(3) + 3); // Z
-    say_max_speed(MBASE(4));                                                // "Max speed"
-    DWIN_Frame_AreaCopy(1, 18, 150, 271 - 246, 479 - 319, LBLX + 55 + 3, MBASE(4) + 3); // E
+    say_max_speed(MBASE(1));                                            // "Max speed"
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 58, MBASE(1));    // X
+    say_max_speed(MBASE(2));                                            // "Max speed"
+    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 58, MBASE(2) + 3);    // Y
+    say_max_speed(MBASE(3));                                            // "Max speed"
+    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 58, MBASE(3) + 3);   // Z
+    say_max_speed(MBASE(4));                                            // "Max speed"
+    DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 58, MBASE(4) + 3);  // E
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -2697,22 +2694,22 @@ inline void Draw_Max_Speed_Menu() {
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Max Feedrate Z"));
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("Max Feedrate E"));
     #else
-      DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
+      DWIN_Frame_AreaCopy(1, 144, 16, 189, 26, 14, 8);
 
       draw_max_en(MBASE(1));            // "Max"
-      DWIN_Frame_AreaCopy(1, 184, 119, 271 - 37, 479 - 347, LBLX + 24 + 3, MBASE(1)); // "Speed X"
+      DWIN_Frame_AreaCopy(1, 184, 119, 234, 132, LBLX + 27, MBASE(1)); // "Speed X"
 
       draw_max_en(MBASE(2));            // "Max"
-      draw_speed_en(24 + 3, MBASE(2));  // "Speed"
-      say_y(24 + 40 + 6, MBASE(2));     // "Y"
+      draw_speed_en(27, MBASE(2));  // "Speed"
+      say_y(70, MBASE(2));     // "Y"
 
       draw_max_en(MBASE(3));            // "Max"
-      draw_speed_en(24 + 3, MBASE(3));  // "Speed"
-      say_z(24 + 40 + 6, MBASE(3));     // "Z"
+      draw_speed_en(27, MBASE(3));  // "Speed"
+      say_z(70, MBASE(3));     // "Z"
 
       draw_max_en(MBASE(4));            // "Max"
-      draw_speed_en(24 + 3, MBASE(4));  // "Speed"
-      say_e(24 + 40 + 6, MBASE(4));     // "E"
+      draw_speed_en(27, MBASE(4));  // "Speed"
+      say_e(70, MBASE(4));     // "E"
     #endif
   }
 
@@ -2729,20 +2726,20 @@ inline void Draw_Max_Accel_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 1, 16, 271 - 243, 479 - 451, 14, 8);
-
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 28, 149, 271 - 202, 479 - 318, LBLX + 27, MBASE(1) + 1);
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 479 - 332, LBLX + 27 + 41 + 3, MBASE(1)); // max acceleration X
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 28, 149, 271 - 202, 479 - 318, LBLX + 27, MBASE(2) + 1);
-    DWIN_Frame_AreaCopy(1, 1, 150, 271 - 264, 479 - 319, LBLX + 27 + 41 + 3, MBASE(2) + 2); // max acceleration Y
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 28, 149, 271 - 202, 479 - 318, LBLX + 27, MBASE(3) + 1);
-    DWIN_Frame_AreaCopy(1, 9, 150, 271 - 255, 479 - 319, LBLX + 27 + 41 + 3, MBASE(3) + 2); // max acceleration Z
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(4));
-    DWIN_Frame_AreaCopy(1, 28, 149, 271 - 202, 479 - 318, LBLX + 27, MBASE(4) + 1);
-    DWIN_Frame_AreaCopy(1, 18, 150, 271 - 246, 479 - 319, LBLX + 27 + 41 + 3, MBASE(4) + 2); // max acceleration E
+    DWIN_Frame_AreaCopy(1, 1, 16, 28, 28, 14, 8);
+
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(1) + 1);
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 71, MBASE(1));   // Max acceleration X
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(2) + 1);
+    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 71, MBASE(2) + 2);   // Max acceleration Y
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(3) + 1);
+    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 71, MBASE(3) + 2);  // Max acceleration Z
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(4));
+    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(4) + 1);
+    DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 71, MBASE(4) + 2); // Max acceleration E
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -2752,11 +2749,11 @@ inline void Draw_Max_Accel_Menu() {
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Max Accel Z"));
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("Max Accel E"));
     #else
-      DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
-      draw_max_accel_en(MBASE(1)); say_x(24 + 78 + 6, MBASE(1)); // "Max Acceleration X"
-      draw_max_accel_en(MBASE(2)); say_y(24 + 78 + 6, MBASE(2)); // "Max Acceleration Y"
-      draw_max_accel_en(MBASE(3)); say_z(24 + 78 + 6, MBASE(3)); // "Max Acceleration Z"
-      draw_max_accel_en(MBASE(4)); say_e(24 + 78 + 6, MBASE(4)); // "Max Acceleration E"
+      DWIN_Frame_AreaCopy(1, 144, 16, 189, 26, 14, 8);
+      draw_max_accel_en(MBASE(1)); say_x(108, MBASE(1)); // "Max Acceleration X"
+      draw_max_accel_en(MBASE(2)); say_y(108, MBASE(2)); // "Max Acceleration Y"
+      draw_max_accel_en(MBASE(3)); say_z(108, MBASE(3)); // "Max Acceleration Z"
+      draw_max_accel_en(MBASE(4)); say_e(108, MBASE(4)); // "Max Acceleration E"
     #endif
   }
 
@@ -2773,24 +2770,24 @@ inline void Draw_Max_Jerk_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 1, 16, 271 - 243, 479 - 451, 14, 8);
-
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 1, 180, 271 - 243, 479 - 287, LBLX + 27, MBASE(1) + 1);
-    DWIN_Frame_AreaCopy(1, 202, 133, 228, 479 - 332, LBLX + 53, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 479 - 332, LBLX + 80 + 3, MBASE(1)); // max corner speed X
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 1, 180, 271 - 243, 479 - 287, LBLX + 27, MBASE(2) + 1);
-    DWIN_Frame_AreaCopy(1, 202, 133, 228, 479 - 332, LBLX + 53, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 1, 150, 271 - 264, 479 - 319, LBLX + 80 + 3, MBASE(2) + 3); // max corner speed Y
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 1, 180, 271 - 243, 479 - 287, LBLX + 27, MBASE(3) + 1);
-    DWIN_Frame_AreaCopy(1, 202, 133, 228, 479 - 332, LBLX + 53, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 9, 150, 271 - 255, 479 - 319, LBLX + 80 + 3, MBASE(3) + 3); // max corner speed Z
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(4));
-    DWIN_Frame_AreaCopy(1, 1, 180, 271 - 243, 479 - 287, LBLX + 27, MBASE(4) + 1);
-    DWIN_Frame_AreaCopy(1, 202, 133, 228, 479 - 332, LBLX + 53, MBASE(4));
-    DWIN_Frame_AreaCopy(1, 18, 150, 271 - 246, 479 - 319, LBLX + 80 + 3, MBASE(4) + 3); // max corner speed E
+    DWIN_Frame_AreaCopy(1, 1, 16, 28, 28, 14, 8);
+
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(1) + 1);
+    DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 83, MBASE(1));    // Max jerk speed X
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(2) + 1);
+    DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 83, MBASE(2) + 3);    // Max jerk speed Y
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(3) + 1);
+    DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 83, MBASE(3) + 3);   // Max jerk speed Z
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(4));
+    DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(4) + 1);
+    DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(4));
+    DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 83, MBASE(4) + 3);  // Max jerk speed E
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -2800,31 +2797,31 @@ inline void Draw_Max_Jerk_Menu() {
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Max Jerk Z"));
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("Max Jerk E"));
     #else
-      DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
-      draw_max_en(MBASE(1));            // "Max"
-      draw_corner_en(MBASE(1));         // "Corner"
-      draw_speed_en(66 + 6, MBASE(1));  // "Speed"
-      say_x(106 + 9, MBASE(1));         // "X"
-
-      draw_max_en(MBASE(2));            // "Max"
-      draw_corner_en(MBASE(2));         // "Corner"
-      draw_speed_en(66 + 6, MBASE(2));  // "Speed"
-      say_y(106 + 9, MBASE(2));         // "Y"
-
-      draw_max_en(MBASE(3));            // "Max"
-      draw_corner_en(MBASE(3));         // "Corner"
-      draw_speed_en(66 + 6, MBASE(3));  // "Speed"
-      say_z(106 + 9, MBASE(3));         // "Z"
-
-      draw_max_en(MBASE(4));            // "Max"
-      draw_corner_en(MBASE(4));         // "Corner"
-      draw_speed_en(66 + 6, MBASE(4));  // "Speed"
-      say_e(106 + 9, MBASE(4));         // "E"
+      DWIN_Frame_AreaCopy(1, 144, 16, 189, 26, 14, 8);
+      draw_max_en(MBASE(1));        // "Max"
+      draw_jerk_en(MBASE(1));       // "Jerk"
+      draw_speed_en(72, MBASE(1));  // "Speed"
+      say_x(115, MBASE(1));         // "X"
+
+      draw_max_en(MBASE(2));        // "Max"
+      draw_jerk_en(MBASE(2));       // "Jerk"
+      draw_speed_en(72, MBASE(2));  // "Speed"
+      say_y(115, MBASE(2));         // "Y"
+
+      draw_max_en(MBASE(3));        // "Max"
+      draw_jerk_en(MBASE(3));       // "Jerk"
+      draw_speed_en(72, MBASE(3));  // "Speed"
+      say_z(115, MBASE(3));         // "Z"
+
+      draw_max_en(MBASE(4));        // "Max"
+      draw_jerk_en(MBASE(4));       // "Jerk"
+      draw_speed_en(72, MBASE(4));  // "Speed"
+      say_e(115, MBASE(4));         // "E"
     #endif
   }
 
   Draw_Back_First();
-  LOOP_L_N(i, 4) Draw_Menu_Line(i + 1, ICON_MaxSpeedCornerX + i);
+  LOOP_L_N(i, 4) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
 
   DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
   DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
@@ -2836,16 +2833,16 @@ inline void Draw_Steps_Menu() {
   Clear_Main_Window();
 
   if (HMI_flag.language_chinese) {
-    DWIN_Frame_AreaCopy(1, 1, 16, 271 - 243, 479 - 451, 14, 8);
+    DWIN_Frame_AreaCopy(1, 1, 16, 28, 28, 14, 8);
 
-    DWIN_Frame_AreaCopy(1, 153, 148, 271 - 77, 479 - 318, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 479 - 332, LBLX + 41 + 3, MBASE(1)); // Transmission Ratio X
-    DWIN_Frame_AreaCopy(1, 153, 148, 271 - 77, 479 - 318, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 1, 150, 271 - 264, 479 - 319, LBLX + 41 + 3, MBASE(2) + 3); // Transmission Ratio Y
-    DWIN_Frame_AreaCopy(1, 153, 148, 271 - 77, 479 - 318, LBLX, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 9, 150, 271 - 255, 479 - 319, LBLX + 41 + 3, MBASE(3) + 3); // Transmission Ratio Z
-    DWIN_Frame_AreaCopy(1, 153, 148, 271 - 77, 479 - 318, LBLX, MBASE(4));
-    DWIN_Frame_AreaCopy(1, 18, 150, 271 - 246, 479 - 319, LBLX + 41 + 3, MBASE(4) + 3); // Transmission Ratio E
+    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 44, MBASE(1)); // Transmission Ratio X
+    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 44, MBASE(2) + 3); // Transmission Ratio Y
+    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 44, MBASE(3) + 3); // Transmission Ratio Z
+    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(4));
+    DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 44, MBASE(4) + 3); // Transmission Ratio E
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -2855,11 +2852,11 @@ inline void Draw_Steps_Menu() {
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Steps/mm Z"));
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("Steps/mm E"));
     #else
-      DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
-      draw_steps_per_mm(MBASE(1)); say_x(100 + 3, MBASE(1)); // "Steps-per-mm X"
-      draw_steps_per_mm(MBASE(2)); say_y(100 + 3, MBASE(2)); // "Y"
-      draw_steps_per_mm(MBASE(3)); say_z(100 + 3, MBASE(3)); // "Z"
-      draw_steps_per_mm(MBASE(4)); say_e(100 + 3, MBASE(4)); // "E"
+      DWIN_Frame_AreaCopy(1, 144, 16, 189, 26, 14, 8);
+      draw_steps_per_mm(MBASE(1)); say_x(103, MBASE(1)); // "Steps-per-mm X"
+      draw_steps_per_mm(MBASE(2)); say_y(103, MBASE(2)); // "Y"
+      draw_steps_per_mm(MBASE(3)); say_z(103, MBASE(3)); // "Z"
+      draw_steps_per_mm(MBASE(4)); say_e(103, MBASE(4)); // "E"
     #endif
   }
 
@@ -2902,9 +2899,9 @@ void HMI_Motion(void) {
         select_acc.reset();
         Draw_Max_Accel_Menu();
         break;
-      case 3: // max corner speed
-        checkkey = MaxCorner;
-        select_corner.reset();
+      case 3: // max jerk speed
+        checkkey = MaxJerk;
+        select_jerk.reset();
         Draw_Max_Jerk_Menu();
         break;
       case 4: // transmission ratio
@@ -2912,8 +2909,7 @@ void HMI_Motion(void) {
         select_step.reset();
         Draw_Steps_Menu();
         break;
-      default:
-        break;
+      default: break;
     }
   }
   DWIN_UpdateLCD();
@@ -3139,8 +3135,7 @@ void HMI_ABSPreheatSetting(void) {
           HMI_AudioFeedback(success);
         } break;
       #endif
-      default:
-        break;
+      default: break;
     }
   }
   DWIN_UpdateLCD();
@@ -3193,8 +3188,7 @@ void HMI_MaxSpeed(void) {
         DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
         EncoderRate.encoderRateEnabled = 1;
         break;
-      default:
-        break;
+      default: break;
     }
   }
   DWIN_UpdateLCD();
@@ -3247,62 +3241,60 @@ void HMI_MaxAcceleration(void) {
         DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
         EncoderRate.encoderRateEnabled = 1;
         break;
-      default:
-        break;
+      default: break;
     }
   }
   DWIN_UpdateLCD();
 }
 
-/* Max Corner */
-void HMI_MaxCorner(void) {
+/* Max Jerk */
+void HMI_MaxJerk(void) {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_corner.inc(4)) Move_Highlight(1, select_corner.now);
+    if (select_jerk.inc(4)) Move_Highlight(1, select_jerk.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_corner.dec()) Move_Highlight(-1, select_corner.now);
+    if (select_jerk.dec()) Move_Highlight(-1, select_jerk.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    switch (select_corner.now) {
+    switch (select_jerk.now) {
       case 0: // back
         checkkey          = Motion;
         select_motion.now = 3;
         Draw_Motion_Menu();
         break;
-      case 1: // max corner X
-        checkkey                   = MaxCorner_value;
-        HMI_flag.corner_flag       = X_AXIS;
-        HMI_ValueStruct.Max_Corner = planner.max_jerk[X_AXIS] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_corner.now), HMI_ValueStruct.Max_Corner);
+      case 1: // max jerk X
+        checkkey                 = MaxJerk_value;
+        HMI_flag.jerk_flag       = X_AXIS;
+        HMI_ValueStruct.Max_Jerk = planner.max_jerk[X_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
         EncoderRate.encoderRateEnabled = 1;
         break;
-      case 2: // max corner Y
-        checkkey                   = MaxCorner_value;
-        HMI_flag.corner_flag       = Y_AXIS;
-        HMI_ValueStruct.Max_Corner = planner.max_jerk[Y_AXIS] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_corner.now), HMI_ValueStruct.Max_Corner);
+      case 2: // max jerk Y
+        checkkey                 = MaxJerk_value;
+        HMI_flag.jerk_flag       = Y_AXIS;
+        HMI_ValueStruct.Max_Jerk = planner.max_jerk[Y_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
         EncoderRate.encoderRateEnabled = 1;
         break;
-      case 3: // max corner Z
-        checkkey                   = MaxCorner_value;
-        HMI_flag.corner_flag       = Z_AXIS;
-        HMI_ValueStruct.Max_Corner = planner.max_jerk[Z_AXIS] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_corner.now), HMI_ValueStruct.Max_Corner);
+      case 3: // max jerk Z
+        checkkey                 = MaxJerk_value;
+        HMI_flag.jerk_flag       = Z_AXIS;
+        HMI_ValueStruct.Max_Jerk = planner.max_jerk[Z_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
         EncoderRate.encoderRateEnabled = 1;
         break;
-      case 4: // max corner E
-        checkkey                   = MaxCorner_value;
-        HMI_flag.corner_flag       = E_AXIS;
-        HMI_ValueStruct.Max_Corner = planner.max_jerk[E_AXIS] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_corner.now), HMI_ValueStruct.Max_Corner);
+      case 4: // max jerk E
+        checkkey                 = MaxJerk_value;
+        HMI_flag.jerk_flag       = E_AXIS;
+        HMI_ValueStruct.Max_Jerk = planner.max_jerk[E_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk);
         EncoderRate.encoderRateEnabled = 1;
         break;
-      default:
-        break;
+      default: break;
     }
   }
   DWIN_UpdateLCD();
@@ -3355,8 +3347,7 @@ void HMI_Step(void) {
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
         EncoderRate.encoderRateEnabled = 1;
         break;
-      default:
-        break;
+      default: break;
     }
   }
   DWIN_UpdateLCD();
@@ -3406,7 +3397,7 @@ void EachMomentUpdate(void) {
 
       // show print done confirm
       DWIN_Draw_Rectangle(1, Background_black, 0, 250,  271, 360);
-      DWIN_ICON_Show(ICON, HMI_flag.language_chinese ? ICON_Confirm_C : ICON_Confirm_E, 86, 302 - 19);
+      DWIN_ICON_Show(ICON, HMI_flag.language_chinese ? ICON_Confirm_C : ICON_Confirm_E, 86, 283);
     }
     else if (HMI_flag.pause_flag != printingIsPaused()) {
       // print status update
@@ -3553,7 +3544,7 @@ void DWIN_HandleScreen(void) {
     case ABSPreheat:            HMI_ABSPreheatSetting(); break;
     case MaxSpeed:              HMI_MaxSpeed(); break;
     case MaxAcceleration:       HMI_MaxAcceleration(); break;
-    case MaxCorner:             HMI_MaxCorner(); break;
+    case MaxJerk:               HMI_MaxJerk(); break;
     case Step:                  HMI_Step(); break;
     case Move_X:                HMI_Move_X(); break;
     case Move_Y:                HMI_Move_Y(); break;
@@ -3572,7 +3563,7 @@ void DWIN_HandleScreen(void) {
     case PrintSpeed:            HMI_PrintSpeed(); break;
     case MaxSpeed_value:        HMI_MaxFeedspeedXYZE(); break;
     case MaxAcceleration_value: HMI_MaxAccelerationXYZE(); break;
-    case MaxCorner_value:       HMI_MaxCornerXYZE(); break;
+    case MaxJerk_value:         HMI_MaxJerkXYZE(); break;
     case Step_value:            HMI_StepXYZE(); break;
     default: break;
   }

commit 0f9eb480aa7309e6b876e2643cd26a9425f5fd88
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 14 02:48:45 2020 -0500

    Allow E3 V2 DWIN without EEPROM, POWER_LOSS_RECOVERY

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 8aa908e423..ccd5f2bc20 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -48,15 +48,17 @@
 #include "../../../core/macros.h"
 #include "../../../gcode/queue.h"
 
-#include "../../../feature/powerloss.h"
 #include "../../../feature/babystep.h"
 
-#include "../../../module/settings.h"
 #include "../../../module/temperature.h"
 #include "../../../module/printcounter.h"
 #include "../../../module/motion.h"
 #include "../../../module/planner.h"
 
+#if ENABLED(EEPROM_SETTINGS)
+  #include "../../../module/settings.h"
+#endif
+
 #if ENABLED(HOST_ACTION_COMMANDS)
   #include "../../../feature/host_actions.h"
 #endif
@@ -69,6 +71,10 @@
   #include "../../../module/probe.h"
 #endif
 
+#if ENABLED(POWER_LOSS_RECOVERY)
+  #include "../../../feature/powerloss.h"
+#endif
+
 #ifndef MACHINE_SIZE
   #define MACHINE_SIZE "220x220x250"
 #endif
@@ -130,7 +136,7 @@ constexpr uint16_t TROWS = 6, MROWS = TROWS - 1,        // Total rows, and other
 
 #define MBASE(L) (49 + (L)*MLINE)
 
-#define BABY_Z_VAR TERN(HAS_BED_PROBE, probe.offset.z, zprobe_zoffset)
+#define BABY_Z_VAR TERN(HAS_BED_PROBE, probe.offset.z, dwin_zoffset)
 
 /* Value Init */
 HMI_value_t HMI_ValueStruct;
@@ -188,8 +194,8 @@ float last_E_scale = 0;
 bool DWIN_lcd_sd_status = 0;
 bool pause_action_flag = 0;
 int temphot = 0, tempbed = 0;
-float zprobe_zoffset = 0;
-float last_zoffset = 0, last_probe_zoffset = 0;
+float dwin_zoffset = 0;
+float last_zoffset = 0;
 
 #define DWIN_LANGUAGE_EEPROM_ADDRESS 0x01   // Between 0x01 and 0x63 (EEPROM_OFFSET-1)
                                             // BL24CXX::check() uses 0x00
@@ -213,7 +219,7 @@ void HMI_SetAndSaveLanguageChinese(void) {
   BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language_chinese, sizeof(HMI_flag.language_chinese));
 }
 
-void show_plus_or_minus(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, long value) {
+void DWIN_Draw_Signed_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, long value) {
   if (value < 0) {
     DWIN_Draw_String(false, true, size, White, bColor, x - 6, y, F("-"));
     DWIN_Draw_FloatValue(true, true, 0, size, White, bColor, iNum, fNum, x, y, -value);
@@ -517,7 +523,7 @@ inline void Prepare_Item_Offset(const uint8_t row) {
   if (HMI_flag.language_chinese) {
     #if HAS_BED_PROBE
       DWIN_Frame_AreaCopy(1, 174, 164, 271 - 48, 479 - 302, LBLX, MBASE(row));
-      show_plus_or_minus(font8x16, Background_black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
+      DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
     #else
       DWIN_Frame_AreaCopy(1, 43, 89, 271 - 173, 479 - 378, LBLX, MBASE(row));
     #endif
@@ -525,7 +531,7 @@ inline void Prepare_Item_Offset(const uint8_t row) {
   else {
     #if HAS_BED_PROBE
       DWIN_Frame_AreaCopy(1, 93, 179, 271 - 130, 479 - 290, LBLX, MBASE(row)); // "Z-Offset"
-      show_plus_or_minus(font8x16, Background_black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
+      DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
     #else
       DWIN_Frame_AreaCopy(1, 1, 76, 271 - 165, 479 - 393, LBLX, MBASE(row)); // "..."
     #endif
@@ -633,22 +639,28 @@ inline void Draw_Control_Menu() {
       Draw_Title(GET_TEXT_F(MSG_CONTROL));
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), GET_TEXT_F(MSG_TEMPERATURE));
       DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), GET_TEXT_F(MSG_MOTION));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_STORE_EEPROM));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_LOAD_EEPROM));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
-      if (CVISI(6))
-          DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 5), F("Info"));
+      #if ENABLED(EEPROM_SETTINGS)
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_STORE_EEPROM));
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_LOAD_EEPROM));
+        DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
+        if (CVISI(6)) DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 5), F("Info"));
+      #else
+        if (CVISI(3)) DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Info"));
+      #endif
     #else
       DWIN_Frame_AreaCopy(1, 128, 2, 271 - 95, 479 - 467, 14, 8);
       DWIN_Frame_AreaCopy(1,   1,    89, 271 - 188, 479 - 377 - 1, LBLX, CLINE(1));// Temperature >
       DWIN_Frame_AreaCopy(1,  84,    89, 271 - 143, 479 - 380,   LBLX, CLINE(2));// Motion >
-      DWIN_Frame_AreaCopy(1, 131 + 17, 89, 271 -  3, 479 - 377 - 1, LBLX, CLINE(3));// "Store Configuration"
-      DWIN_Frame_AreaCopy(1, 26, 104, 271 - 214, 479 - 365, LBLX, CLINE(4));   // "Read"
-      DWIN_Frame_AreaCopy(1, 131 + 51, 89, 271 - 3, 479 - 377 - 1, LBLX + 31 + 3, CLINE(4)); // "Configuration"
-      DWIN_Frame_AreaCopy(1, 59, 104, 271 - 178, 479 - 365, LBLX, CLINE(5));   // "Reset"
-      DWIN_Frame_AreaCopy(1, 131 + 51, 89, 271 - 3, 479 - 377 - 1, LBLX + 34 + 3, CLINE(5)); // "Configuration"
-      if (CVISI(6))
-        DWIN_Frame_AreaCopy(1, 0, 104, 25, 115, LBLX, CLINE(6));               // Info >
+      #if ENABLED(EEPROM_SETTINGS)
+        DWIN_Frame_AreaCopy(1, 131 + 17, 89, 271 -  3, 479 - 377 - 1, LBLX, CLINE(3));// "Store Configuration"
+        DWIN_Frame_AreaCopy(1, 26, 104, 271 - 214, 479 - 365, LBLX, CLINE(4));   // "Read"
+        DWIN_Frame_AreaCopy(1, 131 + 51, 89, 271 - 3, 479 - 377 - 1, LBLX + 31 + 3, CLINE(4)); // "Configuration"
+        DWIN_Frame_AreaCopy(1, 59, 104, 271 - 178, 479 - 365, LBLX, CLINE(5));   // "Reset"
+        DWIN_Frame_AreaCopy(1, 131 + 51, 89, 271 - 3, 479 - 377 - 1, LBLX + 34 + 3, CLINE(5)); // "Configuration"
+        if (CVISI(6)) DWIN_Frame_AreaCopy(1, 0, 104, 25, 115, LBLX, CLINE(6));   // Info >
+      #else
+        if (CVISI(3)) DWIN_Frame_AreaCopy(1, 0, 104, 25, 115, LBLX, CLINE(3));   // Info >
+      #endif
     #endif
   }
 
@@ -708,7 +720,7 @@ inline void Draw_Tune_Menu() {
   DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), thermalManager.temp_hotend[0].target);
   DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), thermalManager.temp_bed.target);
   DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(4), thermalManager.fan_speed[0]);
-  show_plus_or_minus(font8x16, Background_black, 2, 2, 202, MBASE(5), BABY_Z_VAR * 100);
+  DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(5), BABY_Z_VAR * 100);
 }
 
 inline void draw_max_en(const uint16_t line) {
@@ -1102,7 +1114,7 @@ void HMI_Move_Z(void) {
         checkkey = AxisMove;
         EncoderRate.encoderRateEnabled = 0;
         last_E_scale = HMI_ValueStruct.Move_E_scale;
-        show_plus_or_minus(font8x16, Background_black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+        DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
         if (!planner.is_full()) {
           planner.synchronize(); // Wait for planner moves to finish!
           planner.buffer_line(current_position, MMM_TO_MMS(FEEDRATE_E), active_extruder);
@@ -1115,7 +1127,7 @@ void HMI_Move_Z(void) {
       else if ((last_E_scale - HMI_ValueStruct.Move_E_scale) > (EXTRUDE_MAXLENGTH) * MINUNITMULT)
         HMI_ValueStruct.Move_E_scale = last_E_scale - (EXTRUDE_MAXLENGTH) * MINUNITMULT;
       current_position.e = HMI_ValueStruct.Move_E_scale / 10;
-      show_plus_or_minus(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
       DWIN_UpdateLCD();
     }
   }
@@ -1125,7 +1137,7 @@ void HMI_Move_Z(void) {
 void HMI_Zoffset(void) {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    last_zoffset = zprobe_zoffset;
+    last_zoffset = dwin_zoffset;
     if (encoder_diffState == ENCODER_DIFF_CW) {
       HMI_ValueStruct.offset_value += EncoderRate.encoderMoveValue;
     }
@@ -1134,24 +1146,22 @@ void HMI_Zoffset(void) {
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       EncoderRate.encoderRateEnabled = 0;
-      zprobe_zoffset                 = HMI_ValueStruct.offset_value / 100;
+      dwin_zoffset = HMI_ValueStruct.offset_value / 100;
       #if HAS_BED_PROBE
-        if (WITHIN(zprobe_zoffset - last_zoffset, Z_PROBE_OFFSET_RANGE_MIN, Z_PROBE_OFFSET_RANGE_MAX))
-          probe.offset.z = zprobe_zoffset;
-        settings.save();
+        if (WITHIN(dwin_zoffset - last_zoffset, Z_PROBE_OFFSET_RANGE_MIN, Z_PROBE_OFFSET_RANGE_MAX))
+          probe.offset.z = dwin_zoffset;
+        TERN_(EEPROM_SETTINGS, settings.save());
       #elif ENABLED(BABYSTEPPING)
-        babystep.add_mm(Z_AXIS, (zprobe_zoffset - last_zoffset));
-      #else
-        UNUSED(zprobe_zoffset - last_zoffset);
+        babystep.add_mm(Z_AXIS, dwin_zoffset - last_zoffset);
       #endif
 
       if (HMI_ValueStruct.show_mode == -4) {
         checkkey = Prepare;
-        show_plus_or_minus(font8x16, Background_black, 2, 2, 202, MBASE(4 + MROWS - index_prepare), TERN(HAS_BED_PROBE, probe.offset.z * 100, HMI_ValueStruct.offset_value));
+        DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(4 + MROWS - index_prepare), TERN(HAS_BED_PROBE, probe.offset.z * 100, HMI_ValueStruct.offset_value));
       }
       else {
         checkkey = Tune;
-        show_plus_or_minus(font8x16, Background_black, 2, 2, 202, MBASE(5 + MROWS - index_tune), TERN(HAS_BED_PROBE, probe.offset.z * 100, HMI_ValueStruct.offset_value));
+        DWIN_Draw_Signed_Float(font8x16, Background_black, 2, 2, 202, MBASE(5 + MROWS - index_tune), TERN(HAS_BED_PROBE, probe.offset.z * 100, HMI_ValueStruct.offset_value));
       }
       DWIN_UpdateLCD();
       return;
@@ -1159,9 +1169,9 @@ void HMI_Zoffset(void) {
     NOLESS(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100);
     NOMORE(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
     if (HMI_ValueStruct.show_mode == -4)
-      show_plus_or_minus(font8x16, Select_Color, 2, 2, 202, MBASE(4 + MROWS - index_prepare), HMI_ValueStruct.offset_value);
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(4 + MROWS - index_prepare), HMI_ValueStruct.offset_value);
     else
-      show_plus_or_minus(font8x16, Select_Color, 2, 2, 202, MBASE(5 + MROWS - index_tune), HMI_ValueStruct.offset_value);
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(5 + MROWS - index_tune), HMI_ValueStruct.offset_value);
     DWIN_UpdateLCD();
   }
 }
@@ -1213,7 +1223,7 @@ void HMI_Zoffset(void) {
     }
   }
 
-#endif // if HAS_HOTEND
+#endif // HAS_HOTEND
 
 #if HAS_HEATED_BED
 
@@ -1262,7 +1272,7 @@ void HMI_Zoffset(void) {
     }
   }
 
-#endif // if HAS_HEATED_BED
+#endif // HAS_HEATED_BED
 
 #if HAS_FAN
 
@@ -1311,7 +1321,7 @@ void HMI_Zoffset(void) {
     }
   }
 
-#endif // if HAS_FAN
+#endif // HAS_FAN
 
 void HMI_PrintSpeed(void) {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
@@ -1515,27 +1525,20 @@ void update_variable(void) {
     DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
     last_speed = feedrate_percentage;
   }
-  #if HAS_BED_PROBE
-    if (last_probe_zoffset != probe.offset.z) {
-      show_plus_or_minus(STAT_FONT, Background_black, 2, 2, 178 + STAT_CHR_W, 429, probe.offset.z * 100);
-      last_probe_zoffset = probe.offset.z;
-    }
-  #else
-    if (last_zoffset != zprobe_zoffset) {
-      show_plus_or_minus(STAT_FONT, Background_black, 2, 2, 178 + STAT_CHR_W, 429, zprobe_zoffset * 100);
-      last_zoffset = zprobe_zoffset;
-    }
-  #endif
+  if (last_zoffset != BABY_Z_VAR) {
+    DWIN_Draw_Signed_Float(STAT_FONT, Background_black, 2, 2, 178 + STAT_CHR_W, 429, BABY_Z_VAR * 100);
+    last_zoffset = BABY_Z_VAR;
+  }
 }
 
 /**
-* Read and cache the working directory.
-*
-* TODO: New code can follow the pattern of menu_media.cpp
-* and rely on Marlin caching for performance. No need to
-* cache files here.
-*
-*/
+ * Read and cache the working directory.
+ *
+ * TODO: New code can follow the pattern of menu_media.cpp
+ * and rely on Marlin caching for performance. No need to
+ * cache files here.
+ *
+ */
 
 #ifndef strcasecmp_P
   #define strcasecmp_P(a, b) strcasecmp((a), (b))
@@ -1723,7 +1726,7 @@ void HMI_StartFrame(const bool with_update) {
   DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
   DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + (2 + 3) * STAT_CHR_W + 2, 429, F("%"));
 
-  show_plus_or_minus(STAT_FONT, Background_black, 2, 2, 178, 429, BABY_Z_VAR * 100);
+  DWIN_Draw_Signed_Float(STAT_FONT, Background_black, 2, 2, 178, 429, BABY_Z_VAR * 100);
   DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + 3 * STAT_CHR_W + 5, 383, F("/"));
   DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 178 + 3 * STAT_CHR_W + 5, 383, F("/"));
 
@@ -2223,7 +2226,7 @@ void HMI_Prepare(void) {
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), current_position[X_AXIS] * MINUNITMULT);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), current_position[Y_AXIS] * MINUNITMULT);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), current_position[Z_AXIS] * MINUNITMULT);
-        show_plus_or_minus(font8x16, Background_black, 3, 1, 216, MBASE(4), current_position.e * MINUNITMULT);
+        DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), current_position.e * MINUNITMULT);
         break;
       case 2: // close motion
         queue.inject_P(PSTR("M84"));
@@ -2237,9 +2240,9 @@ void HMI_Prepare(void) {
       case 4: // Z-offset
         #if HAS_BED_PROBE
           checkkey = Homeoffset;
-          HMI_ValueStruct.show_mode    = -4;
+          HMI_ValueStruct.show_mode = -4;
           HMI_ValueStruct.offset_value = probe.offset.z * 100;
-          show_plus_or_minus(font8x16, Select_Color, 2, 2, 202, MBASE(4 + MROWS - index_prepare), HMI_ValueStruct.offset_value);
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(4 + MROWS - index_prepare), HMI_ValueStruct.offset_value);
           EncoderRate.encoderRateEnabled = 1;
         #else
           // Apply workspace offset, making the current position 0,0,0
@@ -2392,19 +2395,22 @@ void HMI_Control(void) {
         select_motion.reset();
         Draw_Motion_Menu();
         break;
-      case 3: { // write EEPROM
-        const bool success = settings.save();
-        HMI_AudioFeedback(success);
-      } break;
-      case 4: { // read EEPROM
-        const bool success = settings.load();
-        HMI_AudioFeedback(success);
-      } break;
-      case 5: // resume EEPROM
-        settings.reset();
-        HMI_AudioFeedback();
-        break;
-      case 6: // info
+      case 3:
+      #if ENABLED(EEPROM_SETTINGS)
+        { // write EEPROM
+          const bool success = settings.save();
+          HMI_AudioFeedback(success);
+        } break;
+        case 4: { // read EEPROM
+          const bool success = settings.load();
+          HMI_AudioFeedback(success);
+        } break;
+        case 5: // resume EEPROM
+          settings.reset();
+          HMI_AudioFeedback();
+          break;
+        case 6: // info
+      #endif
         checkkey = Info;
         Draw_Info_Menu();
         break;
@@ -2442,7 +2448,7 @@ void HMI_AxisMove(void) {
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
         DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
-        show_plus_or_minus(font8x16, Background_black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+        DWIN_Draw_Signed_Float(font8x16, Background_black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
         DWIN_UpdateLCD();
       }
       return;
@@ -2495,7 +2501,7 @@ void HMI_AxisMove(void) {
             #endif
             checkkey = Extruder;
             HMI_ValueStruct.Move_E_scale = current_position.e * MINUNITMULT;
-            show_plus_or_minus(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+            DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
             EncoderRate.encoderRateEnabled = 1;
             break;
         #endif
@@ -2593,7 +2599,9 @@ void HMI_Temperature(void) {
             Draw_Menu_Line(1, ICON_SetEndTemp);
             Draw_Menu_Line(2, ICON_SetBedTemp);
             Draw_Menu_Line(3, ICON_FanSpeed);
-            Draw_Menu_Line(4, ICON_WriteEEPROM);
+            #if ENABLED(EEPROM_SETTINGS)
+              Draw_Menu_Line(4, ICON_WriteEEPROM);
+            #endif
 
             DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), ui.material_preset[0].hotend_temp);
             DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), ui.material_preset[0].bed_temp);
@@ -2647,14 +2655,16 @@ void HMI_Temperature(void) {
             Draw_Menu_Line(1, ICON_SetEndTemp);
             Draw_Menu_Line(2, ICON_SetBedTemp);
             Draw_Menu_Line(3, ICON_FanSpeed);
-            Draw_Menu_Line(4, ICON_WriteEEPROM);
+            #if ENABLED(EEPROM_SETTINGS)
+              Draw_Menu_Line(4, ICON_WriteEEPROM);
+            #endif
 
             DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), ui.material_preset[1].hotend_temp);
             DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), ui.material_preset[1].bed_temp);
             DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), ui.material_preset[1].fan_speed);
 
             break;
-        #endif // if HAS_HOTEND
+        #endif // HAS_HOTEND
     }
   }
   DWIN_UpdateLCD();
@@ -2996,7 +3006,7 @@ void HMI_Tune(void) {
       case 5: // Z-offset
         checkkey = Homeoffset;
         HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
-        show_plus_or_minus(font8x16, Select_Color, 2, 2, 202, MBASE(5 + MROWS - index_tune), HMI_ValueStruct.offset_value);
+        DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(5 + MROWS - index_tune), HMI_ValueStruct.offset_value);
         EncoderRate.encoderRateEnabled = 1;
         break;
       case 6: // Language
@@ -3067,10 +3077,12 @@ void HMI_PLAPreheatSetting(void) {
             EncoderRate.encoderRateEnabled = 1;
             break;
         #endif
-      case 4: { // save PLA configuration
-        const bool success = settings.save();
-        HMI_AudioFeedback(success);
-      } break;
+      #if ENABLED(EEPROM_SETTINGS)
+        case 4: { // save PLA configuration
+          const bool success = settings.save();
+          HMI_AudioFeedback(success);
+        } break;
+      #endif
       default: break;
     }
   }
@@ -3121,10 +3133,12 @@ void HMI_ABSPreheatSetting(void) {
             EncoderRate.encoderRateEnabled = 1;
             break;
         #endif
-      case 4: { // save ABS configuration
-        const bool success = settings.save();
-        HMI_AudioFeedback(success);
-      } break;
+      #if ENABLED(EEPROM_SETTINGS)
+        case 4: { // save ABS configuration
+          const bool success = settings.save();
+          HMI_AudioFeedback(success);
+        } break;
+      #endif
       default:
         break;
     }
@@ -3441,7 +3455,7 @@ void EachMomentUpdate(void) {
   else if (abort_flag && !HMI_flag.home_flag) { // Print Stop
     abort_flag = 0;
     HMI_ValueStruct.print_speed = feedrate_percentage = 100;
-    zprobe_zoffset = TERN(HAS_BED_PROBE, probe.offset.z, 0);
+    dwin_zoffset = TERN0(HAS_BED_PROBE, probe.offset.z);
 
     planner.finish_and_disable();
 
@@ -3452,70 +3466,72 @@ void EachMomentUpdate(void) {
     select_page.set(0);
     Goto_MainMenu();
   }
-  else if (DWIN_lcd_sd_status && recovery.dwin_flag) { // resume print before power off
-    recovery.dwin_flag = false;
-
-    recovery.load();
-    if (!recovery.valid()) return recovery.purge();
-
-    auto draw_first_option = [](const bool sel) {
-      const uint16_t c1 = sel ? Background_window : Select_Color;
-      DWIN_Draw_Rectangle(0, c1, 25, 306, 126, 345);
-      DWIN_Draw_Rectangle(0, c1, 24, 305, 127, 346);
-    };
-
-    auto update_selection = [&](const bool sel) {
-      HMI_flag.select_flag = sel;
-      draw_first_option(sel);
-      const uint16_t c2 = sel ? Select_Color : Background_window;
-      DWIN_Draw_Rectangle(0, c2, 145, 306, 246, 345);
-      DWIN_Draw_Rectangle(0, c2, 144, 305, 247, 346);
-    };
-
-    const uint16_t fileCnt = card.get_num_Files();
-    for (uint16_t i = 0; i < fileCnt; i++) {
-      // TODO: Resume print via M1000 then update the UI
-      // with the active filename which can come from CardReader.
-      card.getfilename_sorted(SD_ORDER(i, fileCnt));
-      if (!strcmp(card.filename, &recovery.info.sd_filename[1])) { // Resume print before power failure while have the same file
-        recovery_flag = 1;
-        HMI_flag.select_flag = 1;
-        Popup_Window_Resume();
-        draw_first_option(false);
-        char * const name = card.longest_filename();
-        const int8_t npos = _MAX(0, DWIN_WIDTH - strlen(name) * (MENU_CHR_W)) / 2;
-        DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, npos, 252, name);
-        DWIN_UpdateLCD();
-        break;
+  #if ENABLED(POWER_LOSS_RECOVERY)
+    else if (DWIN_lcd_sd_status && recovery.dwin_flag) { // resume print before power off
+      recovery.dwin_flag = false;
+
+      recovery.load();
+      if (!recovery.valid()) return recovery.purge();
+
+      auto draw_first_option = [](const bool sel) {
+        const uint16_t c1 = sel ? Background_window : Select_Color;
+        DWIN_Draw_Rectangle(0, c1, 25, 306, 126, 345);
+        DWIN_Draw_Rectangle(0, c1, 24, 305, 127, 346);
+      };
+
+      auto update_selection = [&](const bool sel) {
+        HMI_flag.select_flag = sel;
+        draw_first_option(sel);
+        const uint16_t c2 = sel ? Select_Color : Background_window;
+        DWIN_Draw_Rectangle(0, c2, 145, 306, 246, 345);
+        DWIN_Draw_Rectangle(0, c2, 144, 305, 247, 346);
+      };
+
+      const uint16_t fileCnt = card.get_num_Files();
+      for (uint16_t i = 0; i < fileCnt; i++) {
+        // TODO: Resume print via M1000 then update the UI
+        // with the active filename which can come from CardReader.
+        card.getfilename_sorted(SD_ORDER(i, fileCnt));
+        if (!strcmp(card.filename, &recovery.info.sd_filename[1])) { // Resume print before power failure while have the same file
+          recovery_flag = 1;
+          HMI_flag.select_flag = 1;
+          Popup_Window_Resume();
+          draw_first_option(false);
+          char * const name = card.longest_filename();
+          const int8_t npos = _MAX(0, DWIN_WIDTH - strlen(name) * (MENU_CHR_W)) / 2;
+          DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, npos, 252, name);
+          DWIN_UpdateLCD();
+          break;
+        }
       }
-    }
 
-    // if hasn't resumable G-code file
-    if (!recovery_flag) return;
+      // if hasn't resumable G-code file
+      if (!recovery_flag) return;
+
+      while (recovery_flag) {
+        ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+        if (encoder_diffState != ENCODER_DIFF_NO) {
+          if (encoder_diffState == ENCODER_DIFF_ENTER) {
+            recovery_flag = 0;
+            if (HMI_flag.select_flag) break;
+            TERN_(POWER_LOSS_RECOVERY, recovery.cancel());
+            HMI_StartFrame(true);
+            return;
+          }
+          else
+            update_selection(encoder_diffState == ENCODER_DIFF_CCW);
 
-    while (recovery_flag) {
-      ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-      if (encoder_diffState != ENCODER_DIFF_NO) {
-        if (encoder_diffState == ENCODER_DIFF_ENTER) {
-          recovery_flag = 0;
-          if (HMI_flag.select_flag) break;
-          TERN_(POWER_LOSS_RECOVERY, recovery.cancel());
-          HMI_StartFrame(true);
-          return;
+          DWIN_UpdateLCD();
         }
-        else
-          update_selection(encoder_diffState == ENCODER_DIFF_CCW);
-
-        DWIN_UpdateLCD();
       }
-    }
 
-    select_print.set(0);
-    HMI_ValueStruct.show_mode = 0;
-    HMI_StartFrame(false);
-    recovery.resume();
-    return;
-  }
+      select_print.set(0);
+      HMI_ValueStruct.show_mode = 0;
+      HMI_StartFrame(false);
+      recovery.resume();
+      return;
+    }
+  #endif
   DWIN_UpdateLCD();
 }
 
@@ -3572,7 +3588,7 @@ void DWIN_CompletedHoming(void) {
   }
   else if (checkkey == Back_Main) {
     HMI_ValueStruct.print_speed = feedrate_percentage = 100;
-    zprobe_zoffset = TERN0(BLTOUCH, probe.offset.z);
+    dwin_zoffset = TERN0(HAS_BED_PROBE, probe.offset.z);
     planner.finish_and_disable();
     Goto_MainMenu();
   }

commit 94244c1d933a859676a81e3ed241d5a7e74b98a9
Author: Jesse S <jschmidt@aerospike.com>
Date:   Sat Sep 12 19:50:15 2020 -0700

    Highlight Creality DWIN menu icons (#19368)

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index b7e72f09a1..8aa908e423 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -227,6 +227,7 @@ void show_plus_or_minus(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNu
 void ICON_Print() {
   if (select_page.now == 0) {
     DWIN_ICON_Show(ICON, ICON_Print_1, 17, 130);
+    DWIN_Draw_Rectangle(0, White, 17, 130, 126, 229);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 1, 447, 271 - 243, 479 - 19, 58, 201);
     else
@@ -244,6 +245,7 @@ void ICON_Print() {
 void ICON_Prepare() {
   if (select_page.now == 1) {
     DWIN_ICON_Show(ICON, ICON_Prepare_1, 145, 130);
+    DWIN_Draw_Rectangle(0, White, 145, 130, 254, 229);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 31, 447, 271 - 213, 479 - 19, 186, 201);
     else
@@ -261,6 +263,7 @@ void ICON_Prepare() {
 void ICON_Control() {
   if (select_page.now == 2) {
     DWIN_ICON_Show(ICON, ICON_Control_1, 17, 246);
+    DWIN_Draw_Rectangle(0, White, 17, 246, 126, 345);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 61, 447, 271 - 183, 479 - 19, 58, 318);
     else
@@ -278,6 +281,7 @@ void ICON_Control() {
 void ICON_StartInfo(bool show) {
   if (show) {
     DWIN_ICON_Show(ICON, ICON_Info_1, 145, 246);
+    DWIN_Draw_Rectangle(0, White, 145, 246, 254, 345);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 91, 447, 271 - 153, 479 - 19, 186, 318);
     else
@@ -295,6 +299,7 @@ void ICON_StartInfo(bool show) {
 void ICON_Leveling(bool show) {
   if (show) {
     DWIN_ICON_Show(ICON, ICON_Leveling_1, 145, 246);
+    DWIN_Draw_Rectangle(0, White, 145, 246, 254, 345);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 211, 447, 238, 479 - 19, 186, 318);
     else
@@ -312,6 +317,7 @@ void ICON_Leveling(bool show) {
 void ICON_Tune() {
   if (select_print.now == 0) {
     DWIN_ICON_Show(ICON, ICON_Setup_1, 8, 252);
+    DWIN_Draw_Rectangle(0, White, 8, 252, 87, 351);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 121, 447, 271 - 123, 479 - 21, 34, 325);
     else
@@ -329,6 +335,7 @@ void ICON_Tune() {
 void ICON_Pause() {
   if (select_print.now == 1) {
     DWIN_ICON_Show(ICON, ICON_Pause_1, 96, 252);
+    DWIN_Draw_Rectangle(0, White, 96, 252, 175, 351);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 181, 447, 271 - 63, 479 - 20, 124, 325);
     else
@@ -346,6 +353,7 @@ void ICON_Pause() {
 void ICON_Continue() {
   if (select_print.now == 1) {
     DWIN_ICON_Show(ICON, ICON_Continue_1, 96, 252);
+    DWIN_Draw_Rectangle(0, White, 96, 252, 175, 351);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 1, 447, 271 - 243, 479 - 19, 124, 325);
     else
@@ -363,6 +371,7 @@ void ICON_Continue() {
 void ICON_Stop() {
   if (select_print.now == 2) {
     DWIN_ICON_Show(ICON, ICON_Stop_1, 184, 252);
+    DWIN_Draw_Rectangle(0, White, 184, 252, 263, 351);
     if (HMI_flag.language_chinese)
       DWIN_Frame_AreaCopy(1, 151, 447, 271 - 93, 479 - 20, 210, 325);
     else

commit b33f4ba30030c04bbb958020076d8f782bdf2f85
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 10 20:52:00 2020 -0500

    Use F() for Ender 3 V2 DWIN

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
index 1d9c83e6da..b7e72f09a1 100644
--- a/Marlin/src/lcd/dwin/e3v2/dwin.cpp
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -215,11 +215,11 @@ void HMI_SetAndSaveLanguageChinese(void) {
 
 void show_plus_or_minus(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, long value) {
   if (value < 0) {
-    DWIN_Draw_String(false, true, size, White, bColor, x - 6, y, (char*)"-");
+    DWIN_Draw_String(false, true, size, White, bColor, x - 6, y, F("-"));
     DWIN_Draw_FloatValue(true, true, 0, size, White, bColor, iNum, fNum, x, y, -value);
   }
   else {
-    DWIN_Draw_String(false, true, size, White, bColor, x - 6, y, (char*)" ");
+    DWIN_Draw_String(false, true, size, White, bColor, x - 6, y, F(" "));
     DWIN_Draw_FloatValue(true, true, 0, size, White, bColor, iNum, fNum, x, y, value);
   }
 }
@@ -557,11 +557,11 @@ inline void Prepare_Item_Cool(const uint8_t row) {
 inline void Prepare_Item_Lang(const uint8_t row) {
   if (HMI_flag.language_chinese) {
     DWIN_Frame_AreaCopy(1, 239, 134, 271 - 5, 479 - 333, LBLX, MBASE(row));
-    DWIN_Draw_String(false, false, font8x16, White, Background_black, 226, MBASE(row), (char*)"CN");
+    DWIN_Draw_String(false, false, font8x16, White, Background_black, 226, MBASE(row), F("CN"));
   }
   else {
     DWIN_Frame_AreaCopy(1, 0, 194, 271 - 150, 479 - 272, LBLX, MBASE(row)); // "Language selection"
-    DWIN_Draw_String(false, false, font8x16, White, Background_black, 226, MBASE(row), (char*)"EN");
+    DWIN_Draw_String(false, false, font8x16, White, Background_black, 226, MBASE(row), F("EN"));
   }
   Draw_Menu_Icon(row, ICON_Language);
 }
@@ -622,13 +622,13 @@ inline void Draw_Control_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_CONTROL));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)GET_TEXT_F(MSG_TEMPERATURE));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)GET_TEXT_F(MSG_MOTION));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)GET_TEXT_F(MSG_STORE_EEPROM));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)GET_TEXT_F(MSG_LOAD_EEPROM));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), (char*)GET_TEXT_F(MSG_RESTORE_DEFAULTS));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), GET_TEXT_F(MSG_TEMPERATURE));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), GET_TEXT_F(MSG_MOTION));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_STORE_EEPROM));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_LOAD_EEPROM));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
       if (CVISI(6))
-          DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 5), (char*)"Info");
+          DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 5), F("Info"));
     #else
       DWIN_Frame_AreaCopy(1, 128, 2, 271 - 95, 479 - 467, 14, 8);
       DWIN_Frame_AreaCopy(1,   1,    89, 271 - 188, 479 - 377 - 1, LBLX, CLINE(1));// Temperature >
@@ -669,11 +669,11 @@ inline void Draw_Tune_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_TUNE));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)GET_TEXT_F(MSG_SPEED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)GET_TEXT_F(MSG_FAN_SPEED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), (char*)GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), GET_TEXT_F(MSG_SPEED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_FAN_SPEED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
     #else
       DWIN_Frame_AreaCopy(1, 94, 2, 271 - 145, 479 - 467, 14, 9);
       DWIN_Frame_AreaCopy(1, 1, 179, 271 - 179, 479 - 287 - 2, LBLX, MBASE(1)); // print speed
@@ -748,10 +748,10 @@ inline void Draw_Motion_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_MOTION));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Feedrate");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)GET_TEXT_F(MSG_ACCELERATION));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)GET_TEXT_F(MSG_JERK));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)GET_TEXT_F(MSG_STEPS_PER_MM));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Feedrate"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), GET_TEXT_F(MSG_ACCELERATION));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_JERK));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_STEPS_PER_MM));
     #else
       DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
       draw_max_en(MBASE(1)); draw_speed_en(24 + 3, MBASE(1));               // "Max Speed"
@@ -787,8 +787,8 @@ void Popup_Window_Temperature(const bool toohigh) {
       DWIN_Frame_AreaCopy(1, 189, 389, 271 - 0, 402, 95, 310);
     }
     else {
-      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, (char*)"Nozzle or Bed temperature");
-      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 300, (char*)"is too high");
+      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, F("Nozzle or Bed temperature"));
+      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 300, F("is too high"));
     }
   }
   else {
@@ -798,8 +798,8 @@ void Popup_Window_Temperature(const bool toohigh) {
       DWIN_Frame_AreaCopy(1, 189, 389, 271 - 0, 402, 95, 310);
     }
     else {
-      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, (char*)"Nozzle or Bed temperature");
-      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 300, (char*)"is too low");
+      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, F("Nozzle or Bed temperature"));
+      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 300, F("is too low"));
     }
   }
 }
@@ -820,7 +820,7 @@ inline void Draw_Popup_Bkgd_60() {
       DWIN_ICON_Show(ICON, ICON_Confirm_C, 86, 280);
     }
     else {
-      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 20, 235, (char*)"Nozzle is too cold");
+      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 20, 235, F("Nozzle is too cold"));
       DWIN_ICON_Show(ICON, ICON_Confirm_E, 86, 280);
     }
   }
@@ -837,9 +837,9 @@ void Popup_Window_Resume(void) {
     DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 307);
   }
   else {
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 120, 115, (char*)"Tips");
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 24, 192, (char*)"I see the file stopped");
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 68, 212, (char*)"unexpectedly last time");
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 120, 115, F("Tips"));
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 24, 192, F("I see the file stopped"));
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 68, 212, F("unexpectedly last time"));
     DWIN_ICON_Show(ICON, ICON_Continue_E, 26, 307);
     DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 307);
   }
@@ -855,8 +855,8 @@ void Popup_Window_Home(void) {
     DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
   }
   else {
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 80, 230, (char*)GET_TEXT_F(MSG_LEVEL_BED_HOMING));
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 24, 260, (char*)"Please wait until completed");
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 80, 230, GET_TEXT_F(MSG_LEVEL_BED_HOMING));
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 24, 260, F("Please wait until completed"));
   }
 }
 
@@ -869,8 +869,8 @@ void Popup_Window_Leveling(void) {
     DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
   }
   else {
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 76, 230, (char*)GET_TEXT_F(MSG_BED_LEVELING));
-    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 24, 260, (char*)"Please wait until completed");
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 76, 230, GET_TEXT_F(MSG_BED_LEVELING));
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 24, 260, F("Please wait until completed"));
   }
 }
 
@@ -895,8 +895,8 @@ void Popup_window_PauseOrStop(void) {
     DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 280);
   }
   else {
-    if (select_print.now == 1) DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 88, 150, (char*)GET_TEXT_F(MSG_PAUSE_PRINT));
-    else if (select_print.now == 2) DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 150, (char*)GET_TEXT_F(MSG_STOP_PRINT));
+    if (select_print.now == 1) DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 88, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
+    else if (select_print.now == 2) DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 150, GET_TEXT_F(MSG_STOP_PRINT));
     DWIN_ICON_Show(ICON, ICON_Confirm_E, 26, 280);
     DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 280);
   }
@@ -920,19 +920,19 @@ void Draw_Print_ProgressBar() {
   DWIN_ICON_Show(ICON, ICON_Bar, 15, 93);
   DWIN_Draw_Rectangle(1, BarFill_Color, 16 + Percentrecord * 240 / 100, 93, 256, 113);
   DWIN_Draw_IntValue(true, true, 0, font8x16, Percent_Color, Background_black, 2, 117, 133, Percentrecord);
-  DWIN_Draw_String(false, false, font8x16, Percent_Color, Background_black, 117 + 16, 133, (char*)"%");
+  DWIN_Draw_String(false, false, font8x16, Percent_Color, Background_black, 117 + 16, 133, F("%"));
 }
 
 void Draw_Print_ProgressElapsed() {
   duration_t elapsed = print_job_timer.duration(); // print timer
   DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 42, 212, elapsed.value / 3600);
-  DWIN_Draw_String(false, false, font8x16, White, Background_black, 42 + 16, 212, (char*)":");
+  DWIN_Draw_String(false, false, font8x16, White, Background_black, 42 + 16, 212, F(":"));
   DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 42 + 24, 212, (elapsed.value % 3600) / 60);
 }
 
 void Draw_Print_ProgressRemain() {
   DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 176, 212, remain_time / 3600);
-  DWIN_Draw_String(false, false, font8x16, White, Background_black, 176 + 16, 212, (char*)":");
+  DWIN_Draw_String(false, false, font8x16, White, Background_black, 176 + 16, 212, F(":"));
   DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 176 + 24, 212, (remain_time % 3600) / 60);
 }
 
@@ -1595,7 +1595,7 @@ inline void Draw_SDItem(const uint16_t item, int16_t row=-1) {
   if (row < 0) row = item + 1 + MROWS - index_file;
   const bool is_subdir = !card.flag.workDirIsRoot;
   if (is_subdir && item == 0) {
-    Draw_Menu_Line(row, ICON_Folder, (char*)"..");
+    Draw_Menu_Line(row, ICON_Folder, "..");
     return;
   }
 
@@ -1712,11 +1712,11 @@ void HMI_StartFrame(const bool with_update) {
   DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
 
   DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
-  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + (2 + 3) * STAT_CHR_W + 2, 429, (char*)"%");
+  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + (2 + 3) * STAT_CHR_W + 2, 429, F("%"));
 
   show_plus_or_minus(STAT_FONT, Background_black, 2, 2, 178, 429, BABY_Z_VAR * 100);
-  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + 3 * STAT_CHR_W + 5, 383, (char*)"/");
-  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 178 + 3 * STAT_CHR_W + 5, 383, (char*)"/");
+  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + 3 * STAT_CHR_W + 5, 383, F("/"));
+  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 178 + 3 * STAT_CHR_W + 5, 383, F("/"));
 
   if (with_update) {
     DWIN_UpdateLCD();
@@ -2287,11 +2287,11 @@ void Draw_Temperature_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_TEMPERATURE));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)GET_TEXT_F(MSG_FAN_SPEED));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)"PLA Preheat Settings");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), (char*)"ABS Preheat Settings");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_FAN_SPEED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("PLA Preheat Settings"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), F("ABS Preheat Settings"));
     #else
       DWIN_Frame_AreaCopy(1, 56, 16, 271 - 130, 479 - 450 - 1, 14, 8);
       DWIN_Frame_AreaCopy(1, 197, 104, 271 - 33, 479 - 365, LBLX, MBASE(1));                    // Nozzle...
@@ -2561,10 +2561,10 @@ void HMI_Temperature(void) {
             else {
               #ifdef USE_STRING_HEADINGS
                 Draw_Title("PLA Settings"); // TODO: GET_TEXT_F
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Nozzle Temp");
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)"Bed Temp");
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)GET_TEXT_F(MSG_FAN_SPEED));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)GET_TEXT_F(MSG_STORE_EEPROM));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Nozzle Temp"));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), F("Bed Temp"));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_FAN_SPEED));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_STORE_EEPROM));
               #else
                 DWIN_Frame_AreaCopy(1, 56, 16, 271 - 130, 479 - 450 - 1, 14, 8);
                 DWIN_Frame_AreaCopy(1, 157, 76, 181, 479 - 393, LBLX, MBASE(1));
@@ -2614,10 +2614,10 @@ void HMI_Temperature(void) {
             else {
               #ifdef USE_STRING_HEADINGS
                 Draw_Title("ABS Settings"); // TODO: GET_TEXT_F
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Nozzle Temp");
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)"Bed Temp");
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)GET_TEXT_F(MSG_FAN_SPEED));
-                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)GET_TEXT_F(MSG_STORE_EEPROM));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Nozzle Temp"));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), F("Bed Temp"));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), GET_TEXT_F(MSG_FAN_SPEED));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), GET_TEXT_F(MSG_STORE_EEPROM));
               #else
                 DWIN_Frame_AreaCopy(1, 56, 16, 271 - 130, 479 - 450 - 1, 14, 8);
                 DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX, MBASE(1));
@@ -2673,10 +2673,10 @@ inline void Draw_Max_Speed_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title("Max Speed (mm/s)"); // TODO: GET_TEXT_F
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Max Feedrate X");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)"Max Feedrate Y");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)"Max Feedrate Z");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)"Max Feedrate E");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Max Feedrate X"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), F("Max Feedrate Y"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Max Feedrate Z"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("Max Feedrate E"));
     #else
       DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
 
@@ -2728,10 +2728,10 @@ inline void Draw_Max_Accel_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_ACCELERATION));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Max Accel X");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)"Max Accel Y");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)"Max Accel Z");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)"Max Accel E");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Max Accel X"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), F("Max Accel Y"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Max Accel Z"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("Max Accel E"));
     #else
       DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
       draw_max_accel_en(MBASE(1)); say_x(24 + 78 + 6, MBASE(1)); // "Max Acceleration X"
@@ -2776,10 +2776,10 @@ inline void Draw_Max_Jerk_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_JERK));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Max Jerk X");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)"Max Jerk Y");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)"Max Jerk Z");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)"Max Jerk E");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Max Jerk X"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), F("Max Jerk Y"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Max Jerk Z"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("Max Jerk E"));
     #else
       DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
       draw_max_en(MBASE(1));            // "Max"
@@ -2831,10 +2831,10 @@ inline void Draw_Steps_Menu() {
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_STEPS_PER_MM));
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Steps/mm X");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)"Steps/mm Y");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)"Steps/mm Z");
-      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)"Steps/mm E");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), F("Steps/mm X"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), F("Steps/mm Y"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), F("Steps/mm Z"));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), F("Steps/mm E"));
     #else
       DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
       draw_steps_per_mm(MBASE(1)); say_x(100 + 3, MBASE(1)); // "Steps-per-mm X"

commit a445746a8b6dd752de725eb67d264153c3b393d7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Sep 6 21:40:58 2020 -0500

    Clean up LCD conditionals, DWIN

diff --git a/Marlin/src/lcd/dwin/e3v2/dwin.cpp b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
new file mode 100644
index 0000000000..1d9c83e6da
--- /dev/null
+++ b/Marlin/src/lcd/dwin/e3v2/dwin.cpp
@@ -0,0 +1,3576 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * DWIN by Creality3D
+ */
+
+#include "../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(DWIN_CREALITY_LCD)
+
+#if ANY(AUTO_BED_LEVELING_BILINEAR, AUTO_BED_LEVELING_LINEAR, AUTO_BED_LEVELING_3POINT) && DISABLED(PROBE_MANUALLY)
+  #define HAS_ONESTEP_LEVELING 1
+#endif
+
+#include "dwin.h"
+
+#include <WString.h>
+#include <stdio.h>
+#include <string.h>
+
+#include "../../fontutils.h"
+#include "../../ultralcd.h"
+
+#include "../../../sd/cardreader.h"
+
+#include "../../../MarlinCore.h"
+#include "../../../core/serial.h"
+#include "../../../core/macros.h"
+#include "../../../gcode/queue.h"
+
+#include "../../../feature/powerloss.h"
+#include "../../../feature/babystep.h"
+
+#include "../../../module/settings.h"
+#include "../../../module/temperature.h"
+#include "../../../module/printcounter.h"
+#include "../../../module/motion.h"
+#include "../../../module/planner.h"
+
+#if ENABLED(HOST_ACTION_COMMANDS)
+  #include "../../../feature/host_actions.h"
+#endif
+
+#if HAS_ONESTEP_LEVELING
+  #include "../../../feature/bedlevel/bedlevel.h"
+#endif
+
+#if HAS_BED_PROBE
+  #include "../../../module/probe.h"
+#endif
+
+#ifndef MACHINE_SIZE
+  #define MACHINE_SIZE "220x220x250"
+#endif
+#ifndef CORP_WEBSITE_C
+  #define CORP_WEBSITE_C "www.cxsw3d.com"
+#endif
+#ifndef CORP_WEBSITE_E
+  #define CORP_WEBSITE_E "www.creality.com"
+#endif
+
+#define PAUSE_HEAT true
+
+#define USE_STRING_HEADINGS
+
+#define MENU_FONT   font8x16
+#define STAT_FONT   font10x20
+#define HEADER_FONT font10x20
+
+#define MENU_CHAR_LIMIT  24
+
+// Fan speed limit
+#define FANON           255
+#define FANOFF          0
+
+// Print speed limit
+#define MAX_PRINT_SPEED   999
+#define MIN_PRINT_SPEED   10
+
+// Temp limits
+#if HAS_HOTEND
+  #define MAX_E_TEMP    (HEATER_0_MAXTEMP - (HOTEND_OVERSHOOT))
+  #define MIN_E_TEMP    HEATER_0_MINTEMP
+#endif
+
+#if HAS_HEATED_BED
+  #define MIN_BED_TEMP  BED_MINTEMP
+#endif
+
+// Feedspeed limit (max feedspeed = DEFAULT_MAX_FEEDRATE * 2)
+#define MIN_MAXFEEDSPEED      1
+#define MIN_MAXACCELERATION   1
+#define MIN_MAXCORNER         0.1
+#define MIN_STEP              1
+
+#define FEEDRATE_E      (60)
+
+// Mininum unit (0.1) : multiple (10)
+#define MINUNITMULT     10
+
+#define ENCODER_WAIT    20
+#define DWIN_SCROLL_UPDATE_INTERVAL 2000
+#define DWIN_REMAIN_TIME_UPDATE_INTERVAL 20000
+
+constexpr uint16_t TROWS = 6, MROWS = TROWS - 1,        // Total rows, and other-than-Back
+                   TITLE_HEIGHT = 30,                   // Title bar height
+                   MLINE = 53,                          // Menu line height
+                   LBLX = 60,                           // Menu item label X
+                   MENU_CHR_W = 8, STAT_CHR_W = 10;
+
+#define MBASE(L) (49 + (L)*MLINE)
+
+#define BABY_Z_VAR TERN(HAS_BED_PROBE, probe.offset.z, zprobe_zoffset)
+
+/* Value Init */
+HMI_value_t HMI_ValueStruct;
+HMI_Flag HMI_flag{0};
+
+millis_t Encoder_ms     = 0;
+millis_t Wait_ms        = 0;
+millis_t dwin_heat_time = 0;
+
+int checkkey = 0, last_checkkey = 0;
+
+typedef struct {
+  uint8_t now, last;
+  void set(uint8_t v) { now = last = v; }
+  void reset() { set(0); }
+  bool changed() { bool c = (now != last); if (c) last = now; return c; }
+  bool dec() { if (now) now--; return changed(); }
+  bool inc(uint8_t v) { if (now < v) now++; else now = v; return changed(); }
+} select_t;
+
+select_t select_page{0}, select_file{0}, select_print{0}, select_prepare{0}
+         , select_control{0}, select_axis{0}, select_temp{0}, select_motion{0}, select_tune{0}
+         , select_PLA{0}, select_ABS{0}
+         , select_speed{0}
+         , select_acc{0}
+         , select_corner{0}
+         , select_step{0}
+         // , select_leveling{0}
+         ;
+
+uint8_t index_file     = MROWS,
+        index_prepare  = MROWS,
+        index_control  = MROWS,
+        index_leveling = MROWS,
+        index_tune     = 5;
+
+// char filebuf[50];
+
+uint8_t countbuf = 0;
+
+bool recovery_flag = false, abort_flag = false;
+
+constexpr float default_max_feedrate[]        = DEFAULT_MAX_FEEDRATE;
+constexpr float default_max_acceleration[]    = DEFAULT_MAX_ACCELERATION;
+constexpr float default_max_jerk[]            = { DEFAULT_XJERK, DEFAULT_YJERK, DEFAULT_ZJERK, DEFAULT_EJERK };
+constexpr float default_axis_steps_per_unit[] = DEFAULT_AXIS_STEPS_PER_UNIT;
+
+uint8_t Percentrecord = 0;
+uint16_t last_Printtime = 0, remain_time = 0;
+float last_temp_hotend_target = 0, last_temp_bed_target = 0;
+float last_temp_hotend_current = 0, last_temp_bed_current = 0;
+uint8_t last_fan_speed = 0;
+uint16_t last_speed = 0;
+float last_E_scale = 0;
+bool DWIN_lcd_sd_status = 0;
+bool pause_action_flag = 0;
+int temphot = 0, tempbed = 0;
+float zprobe_zoffset = 0;
+float last_zoffset = 0, last_probe_zoffset = 0;
+
+#define DWIN_LANGUAGE_EEPROM_ADDRESS 0x01   // Between 0x01 and 0x63 (EEPROM_OFFSET-1)
+                                            // BL24CXX::check() uses 0x00
+
+void HMI_SetLanguage(void) {
+  BL24CXX::read(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language_chinese, sizeof(HMI_flag.language_chinese));
+  if (HMI_flag.language_chinese)
+    DWIN_JPG_CacheTo1(Language_Chinese);
+  else
+    DWIN_JPG_CacheTo1(Language_English);
+}
+
+void HMI_SetAndSaveLanguageWestern(void) {
+  HMI_flag.language_chinese = false;
+  DWIN_JPG_CacheTo1(Language_English);
+  BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language_chinese, sizeof(HMI_flag.language_chinese));
+}
+void HMI_SetAndSaveLanguageChinese(void) {
+  HMI_flag.language_chinese = true;
+  DWIN_JPG_CacheTo1(Language_Chinese);
+  BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language_chinese, sizeof(HMI_flag.language_chinese));
+}
+
+void show_plus_or_minus(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, long value) {
+  if (value < 0) {
+    DWIN_Draw_String(false, true, size, White, bColor, x - 6, y, (char*)"-");
+    DWIN_Draw_FloatValue(true, true, 0, size, White, bColor, iNum, fNum, x, y, -value);
+  }
+  else {
+    DWIN_Draw_String(false, true, size, White, bColor, x - 6, y, (char*)" ");
+    DWIN_Draw_FloatValue(true, true, 0, size, White, bColor, iNum, fNum, x, y, value);
+  }
+}
+
+void ICON_Print() {
+  if (select_page.now == 0) {
+    DWIN_ICON_Show(ICON, ICON_Print_1, 17, 130);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 1, 447, 271 - 243, 479 - 19, 58, 201);
+    else
+      DWIN_Frame_AreaCopy(1, 1, 451, 271 - 240, 479 - 16, 72 - 15, 201);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Print_0, 17, 130);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 1, 405, 271 - 243, 420, 58, 201);
+    else
+      DWIN_Frame_AreaCopy(1, 1, 423, 271 - 240, 423 + 12, 72 - 15, 201);
+  }
+}
+
+void ICON_Prepare() {
+  if (select_page.now == 1) {
+    DWIN_ICON_Show(ICON, ICON_Prepare_1, 145, 130);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 31, 447, 271 - 213, 479 - 19, 186, 201);
+    else
+      DWIN_Frame_AreaCopy(1, 33, 451, 271 - 189, 479 - 13, 200 - 25, 201);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Prepare_0, 145, 130);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 31, 405, 271 - 213, 420, 186, 201);
+    else
+      DWIN_Frame_AreaCopy(1, 33, 423, 271 - 189, 423 + 15, 200 - 25, 201);
+  }
+}
+
+void ICON_Control() {
+  if (select_page.now == 2) {
+    DWIN_ICON_Show(ICON, ICON_Control_1, 17, 246);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 61, 447, 271 - 183, 479 - 19, 58, 318);
+    else
+      DWIN_Frame_AreaCopy(1, 85, 451, 271 - 139, 479 - 16, 72 - 24, 318);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Control_0, 17, 246);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 61, 405, 271 - 183, 420, 58, 318);
+    else
+      DWIN_Frame_AreaCopy(1, 85, 423, 271 - 139, 479 - 45, 72 - 24, 318);
+  }
+}
+
+void ICON_StartInfo(bool show) {
+  if (show) {
+    DWIN_ICON_Show(ICON, ICON_Info_1, 145, 246);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 91, 447, 271 - 153, 479 - 19, 186, 318);
+    else
+      DWIN_Frame_AreaCopy(1, 132, 451, 159, 479 - 13, 186, 318);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Info_0, 145, 246);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 91, 405, 271 - 153, 420, 186, 318);
+    else
+      DWIN_Frame_AreaCopy(1, 132, 423, 159, 423 + 12, 186, 318);
+  }
+}
+
+void ICON_Leveling(bool show) {
+  if (show) {
+    DWIN_ICON_Show(ICON, ICON_Leveling_1, 145, 246);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 211, 447, 238, 479 - 19, 186, 318);
+    else
+      DWIN_Frame_AreaCopy(1, 84, 437, 120,  449, 200 - 18, 318);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Leveling_0, 145, 246);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 211, 405, 238, 420, 186, 318);
+    else
+      DWIN_Frame_AreaCopy(1, 84, 465, 120, 478, 200 - 18, 318);
+  }
+}
+
+void ICON_Tune() {
+  if (select_print.now == 0) {
+    DWIN_ICON_Show(ICON, ICON_Setup_1, 8, 252);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 121, 447, 271 - 123, 479 - 21, 34, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 1, 465, 271 - 237, 479 - 2, 48 - 17, 325);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Setup_0, 8, 252);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 121, 405, 271 - 123, 420, 34, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 1, 438, 271 - 239, 479 - 31, 48 - 17, 325);
+  }
+}
+
+void ICON_Pause() {
+  if (select_print.now == 1) {
+    DWIN_ICON_Show(ICON, ICON_Pause_1, 96, 252);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 181, 447, 271 - 63, 479 - 20, 124, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 177, 451, 271 - 55, 479 - 17, 136 - 20, 325);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Pause_0, 96, 252);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 181, 405, 271 - 63, 420, 124, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 177, 423, 271 - 56, 479 - 46, 136 - 20, 325);
+  }
+}
+
+void ICON_Continue() {
+  if (select_print.now == 1) {
+    DWIN_ICON_Show(ICON, ICON_Continue_1, 96, 252);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 1, 447, 271 - 243, 479 - 19, 124, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 1, 451, 271 - 239, 479 - 16, 136 - 15, 325);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Continue_0, 96, 252);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 1, 405, 271 - 243, 420, 124, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 1, 424, 271 - 240, 479 - 45, 136 - 15, 325);
+  }
+}
+
+void ICON_Stop() {
+  if (select_print.now == 2) {
+    DWIN_ICON_Show(ICON, ICON_Stop_1, 184, 252);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 151, 447, 271 - 93, 479 - 20, 210, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 218, 451, 271 - 22, 479 - 14, 224 - 15, 325);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Stop_0, 184, 252);
+    if (HMI_flag.language_chinese)
+      DWIN_Frame_AreaCopy(1, 151, 405, 271 - 93, 420, 210, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 218, 423, 271 - 24, 479 - 43, 224 - 15, 325);
+  }
+}
+
+inline void Clear_Title_Bar(void) {
+  DWIN_Draw_Rectangle(1, Background_blue,   0,  0,  DWIN_WIDTH,  30);
+}
+
+inline void Draw_Title(const char * const title) {
+  DWIN_Draw_String(false, false, HEADER_FONT, White, Background_blue, 14, 4, (char*)title);
+}
+
+inline void Draw_Title(const __FlashStringHelper * title) {
+  DWIN_Draw_String(false, false, HEADER_FONT, White, Background_blue, 14, 4, (char*)title);
+}
+
+inline void Clear_Menu_Area(void) {
+  DWIN_Draw_Rectangle(1, Background_black,  0,  31, 272,  360);
+}
+
+inline void Clear_Main_Window(void) {
+  Clear_Title_Bar();
+  Clear_Menu_Area();
+}
+
+inline void Clear_Popup_Area(void) {
+  Clear_Title_Bar();
+  DWIN_Draw_Rectangle(1, Background_black,  0,  31, 272,  480);
+}
+
+void Draw_Popup_Bkgd_105(void) {
+  DWIN_Draw_Rectangle(1, Background_window, 14, 105, 271 - 13, 479 - 105);
+}
+
+inline void Draw_More_Icon(const uint8_t line) {
+  DWIN_ICON_Show(ICON, ICON_More, 226, 46 + line * MLINE);
+}
+
+inline void Draw_Menu_Cursor(const uint8_t line) {
+  // DWIN_ICON_Show(ICON,ICON_Rectangle, 0, 31 + line * MLINE);
+  DWIN_Draw_Rectangle(1, Rectangle_Color, 0, 31 + line * MLINE, 14, 31 + (line + 1) * MLINE - 2);
+}
+
+inline void Erase_Menu_Cursor(const uint8_t line) {
+  DWIN_Draw_Rectangle(1, Background_black, 0, 31 + line * MLINE, 14, 31 + (line + 1) * MLINE - 2);
+}
+
+inline void Move_Highlight(const int16_t from, const uint16_t newline) {
+  Erase_Menu_Cursor(newline - from);
+  Draw_Menu_Cursor(newline);
+}
+
+inline void Add_Menu_Line() {
+  Move_Highlight(1, MROWS);
+  DWIN_Draw_Line(Line_Color, 16, 82 + MROWS * MLINE, 256, 83 + MROWS * MLINE);
+}
+
+inline void Scroll_Menu(const uint8_t dir) {
+  DWIN_Frame_AreaMove(1, dir, MLINE, Background_black, 0, 31, 272, 349);
+  switch (dir) {
+    case DWIN_SCROLL_DOWN: Move_Highlight(-1, 0); break;
+    case DWIN_SCROLL_UP:   Add_Menu_Line(); break;
+  }
+}
+
+inline uint16_t nr_sd_menu_items() {
+  return card.get_num_Files() + !card.flag.workDirIsRoot;
+}
+
+inline void Draw_Menu_Icon(const uint8_t line, const uint8_t icon) {
+  DWIN_ICON_Show(ICON, icon, 26, 46 + line * MLINE);
+}
+
+inline void Erase_Menu_Text(const uint8_t line) {
+  DWIN_Draw_Rectangle(1, Background_black, LBLX, 31 + line * MLINE + 4, 271, 28 + (line + 1) * MLINE - 4);
+}
+
+inline void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr) {
+  if (label) DWIN_Draw_String(false, false, font8x16, White, Background_black, LBLX, 48 + line * MLINE, (char*)label);
+  if (icon) Draw_Menu_Icon(line, icon);
+  DWIN_Draw_Line(Line_Color, 16, 29 + (line + 1) * MLINE, 256, 30 + (line + 1) * MLINE);
+}
+
+// The "Back" label is always on the first line
+inline void Draw_Back_Label(void) {
+  if (HMI_flag.language_chinese)
+    DWIN_Frame_AreaCopy(1, 129, 72, 271 - 115, 479 - 395, LBLX, MBASE(0));
+  else
+    DWIN_Frame_AreaCopy(1, 226, 179, 271 - 15, 479 - 290, LBLX, MBASE(0));
+}
+
+// Draw "Back" line at the top
+inline void Draw_Back_First(const bool is_sel=true) {
+  Draw_Menu_Line(0, ICON_Back);
+  Draw_Back_Label();
+  if (is_sel) Draw_Menu_Cursor(0);
+}
+
+//
+// Draw Menus
+//
+
+inline void draw_move_en(const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 69, 61, 271 - 169, 479 - 408, LBLX, line); // "Move"
+}
+
+inline void Prepare_Item_Move(const uint8_t row) {
+  if (HMI_flag.language_chinese)
+    DWIN_Frame_AreaCopy(1, 159, 70, 271 - 71, 479 - 395, LBLX, MBASE(row));
+  else
+    draw_move_en(MBASE(row)); // "Move >"
+  Draw_Menu_Line(row, ICON_Axis);
+  Draw_More_Icon(row);
+}
+
+inline void Prepare_Item_Disable(const uint8_t row) {
+  if (HMI_flag.language_chinese)
+    DWIN_Frame_AreaCopy(1, 204, 70, 271 - 12, 479 - 397, LBLX, MBASE(row));
+  else
+    DWIN_Frame_AreaCopy(1, 103, 59, 271 - 71, 479 - 405, LBLX, MBASE(row)); // "Disable Stepper"
+  Draw_Menu_Line(row, ICON_CloseMotor);
+}
+
+inline void Prepare_Item_Home(const uint8_t row) {
+  if (HMI_flag.language_chinese)
+    DWIN_Frame_AreaCopy(1, 0, 89, 271 - 230, 479 - 378, LBLX, MBASE(row));
+  else
+    DWIN_Frame_AreaCopy(1, 202, 61, 271 - 0, 479 - 408, LBLX, MBASE(row)); // "Auto Home"
+  Draw_Menu_Line(row, ICON_Homing);
+}
+
+inline void Prepare_Item_Offset(const uint8_t row) {
+  if (HMI_flag.language_chinese) {
+    #if HAS_BED_PROBE
+      DWIN_Frame_AreaCopy(1, 174, 164, 271 - 48, 479 - 302, LBLX, MBASE(row));
+      show_plus_or_minus(font8x16, Background_black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
+    #else
+      DWIN_Frame_AreaCopy(1, 43, 89, 271 - 173, 479 - 378, LBLX, MBASE(row));
+    #endif
+  }
+  else {
+    #if HAS_BED_PROBE
+      DWIN_Frame_AreaCopy(1, 93, 179, 271 - 130, 479 - 290, LBLX, MBASE(row)); // "Z-Offset"
+      show_plus_or_minus(font8x16, Background_black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
+    #else
+      DWIN_Frame_AreaCopy(1, 1, 76, 271 - 165, 479 - 393, LBLX, MBASE(row)); // "..."
+    #endif
+  }
+  Draw_Menu_Line(row, ICON_SetHome);
+}
+
+inline void Prepare_Item_PLA(const uint8_t row) {
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 100, 89, 271 - 93 - 27, 479 - 378, LBLX, MBASE(row));
+  }
+  else {
+    DWIN_Frame_AreaCopy(1, 107, 76, 271 - 115, 479 - 393, LBLX, MBASE(row)); // "Preheat"
+    DWIN_Frame_AreaCopy(1, 157, 76, 181, 479 - 393, LBLX + 49 + 3, MBASE(row)); // "PLA"
+  }
+  Draw_Menu_Line(row, ICON_PLAPreheat);
+}
+
+inline void Prepare_Item_ABS(const uint8_t row) {
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 180, 89, 271 - 11 - 27, 479 - 379, LBLX, MBASE(row));
+  }
+  else {
+    DWIN_Frame_AreaCopy(1, 107, 76, 271 - 115, 479 - 393, LBLX, MBASE(row)); // "Preheat"
+    DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX + 49 + 3, MBASE(row)); // "ABS"
+  }
+  Draw_Menu_Line(row, ICON_ABSPreheat);
+}
+
+inline void Prepare_Item_Cool(const uint8_t row) {
+  if (HMI_flag.language_chinese)
+    DWIN_Frame_AreaCopy(1, 1, 104, 271 - 215, 479 - 362, LBLX, MBASE(row));
+  else
+    DWIN_Frame_AreaCopy(1, 200,  76, 271 - 7, 479 - 393, LBLX, MBASE(row));// "Cooldown"
+  Draw_Menu_Line(row, ICON_Cool);
+}
+
+inline void Prepare_Item_Lang(const uint8_t row) {
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 239, 134, 271 - 5, 479 - 333, LBLX, MBASE(row));
+    DWIN_Draw_String(false, false, font8x16, White, Background_black, 226, MBASE(row), (char*)"CN");
+  }
+  else {
+    DWIN_Frame_AreaCopy(1, 0, 194, 271 - 150, 479 - 272, LBLX, MBASE(row)); // "Language selection"
+    DWIN_Draw_String(false, false, font8x16, White, Background_black, 226, MBASE(row), (char*)"EN");
+  }
+  Draw_Menu_Icon(row, ICON_Language);
+}
+
+inline void Draw_Prepare_Menu() {
+  Clear_Main_Window();
+
+  const int16_t scroll = MROWS - index_prepare; // Scrolled-up lines
+  #define PSCROL(L) (scroll + (L))
+  #define PVISI(L)  WITHIN(PSCROL(L), 0, MROWS)
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 133, 1, 271 - 111, 479 - 465 - 1, 14, 8); // "Prepare"
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_PREPARE));
+    #else
+      DWIN_Frame_AreaCopy(1, 178, 2, 271 - 42, 479 - 464 - 1, 14, 8); // "Prepare"
+    #endif
+  }
+
+  if (PVISI(0)) Draw_Back_First(select_prepare.now == 0); // < Back
+  if (PVISI(1)) Prepare_Item_Move(PSCROL(1));       // Move >
+  if (PVISI(2)) Prepare_Item_Disable(PSCROL(2));    // Disable Stepper
+  if (PVISI(3)) Prepare_Item_Home(PSCROL(3));       // Auto Home
+  if (PVISI(4)) Prepare_Item_Offset(PSCROL(4));     // Z-Offset
+  if (PVISI(5)) Prepare_Item_PLA(PSCROL(5));        // Preheat PLA
+  if (PVISI(6)) Prepare_Item_ABS(PSCROL(6));        // Preheat ABS
+  if (PVISI(7)) Prepare_Item_Cool(PSCROL(7));       // Cooldown
+  if (PVISI(8)) Prepare_Item_Lang(PSCROL(8));       // Language CN/EN
+
+  if (select_prepare.now) Draw_Menu_Cursor(PSCROL(select_prepare.now));
+}
+
+inline void Draw_Control_Menu() {
+  Clear_Main_Window();
+
+  const int16_t scroll = TERN(HAS_ONESTEP_LEVELING, MROWS - index_control, 0); // Scrolled-up lines
+
+  #define CSCROL(L) (scroll + (L))
+  #define CLINE(L)  MBASE(CSCROL(L))
+  #define CVISI(L)  WITHIN(CSCROL(L), 0, MROWS)
+
+  if (CVISI(0)) Draw_Back_First(select_control.now == 0);                        // < Back
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 103,   1, 271 - 141, 479 - 465, 14, 8);
+    DWIN_Frame_AreaCopy(1,  57, 104, 271 - 187, 479 - 363, LBLX, CLINE(1));  // Temperature >
+    DWIN_Frame_AreaCopy(1,  87, 104, 271 - 157, 479 - 363, LBLX, CLINE(2));  // Motion >
+    DWIN_Frame_AreaCopy(1, 117, 104, 271 - 99, 479 - 363, LBLX, CLINE(3));   // Store Config
+    DWIN_Frame_AreaCopy(1, 174, 103, 271 - 42, 479 - 363, LBLX, CLINE(4));   // Read Config
+    DWIN_Frame_AreaCopy(1,   1, 118, 271 - 215, 479 - 348, LBLX, CLINE(5));  // Reset Config
+
+    if (CVISI(6))
+      DWIN_Frame_AreaCopy(1, 231, 104, 271 - 13, 479 - 363, LBLX, CLINE(6)); // Info >
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_CONTROL));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)GET_TEXT_F(MSG_TEMPERATURE));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)GET_TEXT_F(MSG_MOTION));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)GET_TEXT_F(MSG_STORE_EEPROM));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)GET_TEXT_F(MSG_LOAD_EEPROM));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), (char*)GET_TEXT_F(MSG_RESTORE_DEFAULTS));
+      if (CVISI(6))
+          DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 5), (char*)"Info");
+    #else
+      DWIN_Frame_AreaCopy(1, 128, 2, 271 - 95, 479 - 467, 14, 8);
+      DWIN_Frame_AreaCopy(1,   1,    89, 271 - 188, 479 - 377 - 1, LBLX, CLINE(1));// Temperature >
+      DWIN_Frame_AreaCopy(1,  84,    89, 271 - 143, 479 - 380,   LBLX, CLINE(2));// Motion >
+      DWIN_Frame_AreaCopy(1, 131 + 17, 89, 271 -  3, 479 - 377 - 1, LBLX, CLINE(3));// "Store Configuration"
+      DWIN_Frame_AreaCopy(1, 26, 104, 271 - 214, 479 - 365, LBLX, CLINE(4));   // "Read"
+      DWIN_Frame_AreaCopy(1, 131 + 51, 89, 271 - 3, 479 - 377 - 1, LBLX + 31 + 3, CLINE(4)); // "Configuration"
+      DWIN_Frame_AreaCopy(1, 59, 104, 271 - 178, 479 - 365, LBLX, CLINE(5));   // "Reset"
+      DWIN_Frame_AreaCopy(1, 131 + 51, 89, 271 - 3, 479 - 377 - 1, LBLX + 34 + 3, CLINE(5)); // "Configuration"
+      if (CVISI(6))
+        DWIN_Frame_AreaCopy(1, 0, 104, 25, 115, LBLX, CLINE(6));               // Info >
+    #endif
+  }
+
+  if (select_control.now && CVISI(select_control.now))
+    Draw_Menu_Cursor(CSCROL(select_control.now));
+
+  // Draw icons and lines
+  LOOP_L_N(i, 6)
+  if (CVISI(i + 1)) Draw_Menu_Line(CSCROL(i + 1), ICON_Temperature + i);
+
+  Draw_More_Icon(CSCROL(1));
+  Draw_More_Icon(CSCROL(2));
+  if (CVISI(6)) Draw_More_Icon(CSCROL(6));
+}
+
+inline void Draw_Tune_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 73, 2, 271 - 171, 479 - 466, 14, 9);
+    DWIN_Frame_AreaCopy(1, 116, 164, 271 - 100, 479 - 303, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 1, 134, 271 - 215, 479 - 333, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 58, 134, 271 - 158, 479 - 333, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 115, 134, 271 - 101, 479 - 333, LBLX, MBASE(4));
+    DWIN_Frame_AreaCopy(1, 174, 164, 271 - 48, 479 - 302, LBLX, MBASE(5));
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_TUNE));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)GET_TEXT_F(MSG_SPEED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)GET_TEXT_F(MSG_FAN_SPEED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), (char*)GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+    #else
+      DWIN_Frame_AreaCopy(1, 94, 2, 271 - 145, 479 - 467, 14, 9);
+      DWIN_Frame_AreaCopy(1, 1, 179, 271 - 179, 479 - 287 - 2, LBLX, MBASE(1)); // print speed
+      DWIN_Frame_AreaCopy(1, 197, 104, 271 - 33, 479 - 365, LBLX, MBASE(2)); // Hotend...
+      DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 41 + 3, MBASE(2)); // ...Temperature
+      DWIN_Frame_AreaCopy(1, 240, 104, 271 - 7, 479 - 365, LBLX, MBASE(3)); // Bed...
+      DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 24 + 3, MBASE(3)); // ...Temperature
+      DWIN_Frame_AreaCopy(1, 0, 119, 271 - 207, 479 - 347, LBLX, MBASE(4)); // fan speed
+      DWIN_Frame_AreaCopy(1, 93, 179, 271 - 130, 479 - 290, LBLX, MBASE(5)); // Z-offset
+    #endif
+  }
+
+  Draw_Back_First(select_tune.now == 0);
+  if (select_tune.now) Draw_Menu_Cursor(select_tune.now);
+
+  Draw_Menu_Line(1, ICON_Speed);
+  Draw_Menu_Line(2, ICON_HotendTemp);
+  Draw_Menu_Line(3, ICON_BedTemp);
+  Draw_Menu_Line(4, ICON_FanSpeed);
+  Draw_Menu_Line(5, ICON_Zoffset);
+
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), feedrate_percentage);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), thermalManager.temp_hotend[0].target);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), thermalManager.temp_bed.target);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(4), thermalManager.fan_speed[0]);
+  show_plus_or_minus(font8x16, Background_black, 2, 2, 202, MBASE(5), BABY_Z_VAR * 100);
+}
+
+inline void draw_max_en(const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 245, 119, 271 - 2, 479 - 350, LBLX, line);   // "Max"
+}
+inline void draw_max_accel_en(const uint16_t line) {
+  draw_max_en(line);
+  DWIN_Frame_AreaCopy(1, 1, 135, 271 - 192, 479 - 334, LBLX + 24 + 3, line); // "Acceleration"
+}
+inline void draw_speed_en(const uint16_t inset, const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 184, 119, 224, 479 - 347, LBLX + inset, line); // "Speed"
+}
+inline void draw_corner_en(const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 64, 119, 271 - 165, 479 - 350, LBLX + 24 + 3, line); // "Corner"
+}
+inline void draw_steps_per_mm(const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 1, 151, 271 - 170, 479 - 318, LBLX, line);   // "Steps-per-mm"
+}
+inline void say_x(const uint16_t inset, const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 95, 104, 271 - 169, 479 - 365, LBLX + inset, line); // "X"
+}
+inline void say_y(const uint16_t inset, const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 104, 104, 271 - 161, 479 - 365, LBLX + inset, line); // "Y"
+}
+inline void say_z(const uint16_t inset, const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 112, 104, 271 - 151, 479 - 365, LBLX + inset, line); // "Z"
+}
+inline void say_e(const uint16_t inset, const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 237, 119, 271 - 27, 479 - 350, LBLX + inset, line); // "E"
+}
+
+inline void Draw_Motion_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 1, 16, 271 - 243, 479 - 451, 14, 8);
+
+    DWIN_Frame_AreaCopy(1, 173, 133, 228, 479 - 332, LBLX, MBASE(1));     // max speed
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(2));     // max...
+    DWIN_Frame_AreaCopy(1, 28, 149, 271 - 202, 479 - 318, LBLX + 27, MBASE(2) + 1); // ...acceleration
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(3));     // max...
+    DWIN_Frame_AreaCopy(1, 1, 180, 271 - 243, 479 - 287, LBLX + 27, MBASE(3) + 1); // ...
+    DWIN_Frame_AreaCopy(1, 202, 133, 228, 479 - 332, LBLX + 54, MBASE(3)); // ...jerk
+    DWIN_Frame_AreaCopy(1, 153, 148, 271 - 77, 479 - 318, LBLX, MBASE(4)); // flow ratio
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_MOTION));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Feedrate");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)GET_TEXT_F(MSG_ACCELERATION));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)GET_TEXT_F(MSG_JERK));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)GET_TEXT_F(MSG_STEPS_PER_MM));
+    #else
+      DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
+      draw_max_en(MBASE(1)); draw_speed_en(24 + 3, MBASE(1));               // "Max Speed"
+      draw_max_accel_en(MBASE(2));                                          // "Max Acceleration"
+      draw_max_en(MBASE(3)); draw_corner_en(MBASE(3));                      // "Max Corner"
+      draw_steps_per_mm(MBASE(4));                                          // "Steps-per-mm"
+    #endif
+  }
+
+  Draw_Back_First(select_motion.now == 0);
+  if (select_motion.now) Draw_Menu_Cursor(select_motion.now);
+
+  LOOP_L_N(i, 4) Draw_Menu_Line(i + 1, ICON_MaxSpeed + i);
+
+  Draw_More_Icon(1);
+  Draw_More_Icon(2);
+  Draw_More_Icon(3);
+  Draw_More_Icon(4);
+}
+
+//
+// Draw Popup Windows
+//
+
+void Popup_Window_Temperature(const bool toohigh) {
+  Clear_Popup_Area();
+  Draw_Popup_Bkgd_105();
+  if (toohigh) {
+    DWIN_ICON_Show(ICON, ICON_TempTooHigh, 102, 165);
+    if (HMI_flag.language_chinese) {
+      DWIN_Frame_AreaCopy(1, 103, 371, 237, 479 - 93, 52, 285);
+      DWIN_Frame_AreaCopy(1, 151, 389, 185, 402, 187, 285);
+      DWIN_Frame_AreaCopy(1, 189, 389, 271 - 0, 402, 95, 310);
+    }
+    else {
+      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, (char*)"Nozzle or Bed temperature");
+      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 300, (char*)"is too high");
+    }
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 165);
+    if (HMI_flag.language_chinese) {
+      DWIN_Frame_AreaCopy(1, 103, 371, 271 - 1, 479 - 93, 52, 285);
+      DWIN_Frame_AreaCopy(1, 189, 389, 271 - 0, 402, 95, 310);
+    }
+    else {
+      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 36, 300, (char*)"Nozzle or Bed temperature");
+      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 300, (char*)"is too low");
+    }
+  }
+}
+
+inline void Draw_Popup_Bkgd_60() {
+  DWIN_Draw_Rectangle(1, Background_window, 14, 60, 271 - 13, 330);
+}
+
+#if HAS_HOTEND
+
+  void Popup_Window_ETempTooLow(void) {
+    Clear_Main_Window();
+    Draw_Popup_Bkgd_60();
+    DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 105);
+    if (HMI_flag.language_chinese) {
+      DWIN_Frame_AreaCopy(1, 103, 371, 136, 479 - 93, 69, 240);
+      DWIN_Frame_AreaCopy(1, 170, 371, 271 - 1, 479 - 93, 69 + 33, 240);
+      DWIN_ICON_Show(ICON, ICON_Confirm_C, 86, 280);
+    }
+    else {
+      DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 20, 235, (char*)"Nozzle is too cold");
+      DWIN_ICON_Show(ICON, ICON_Confirm_E, 86, 280);
+    }
+  }
+
+#endif
+
+void Popup_Window_Resume(void) {
+  Clear_Popup_Area();
+  Draw_Popup_Bkgd_105();
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 160, 338, 271 - 36, 479 - 125, 98, 135);
+    DWIN_Frame_AreaCopy(1, 103, 321, 271 - 0, 479 - 144, 52, 192);
+    DWIN_ICON_Show(ICON, ICON_Continue_C, 26, 307);
+    DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 307);
+  }
+  else {
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 120, 115, (char*)"Tips");
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 24, 192, (char*)"I see the file stopped");
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 68, 212, (char*)"unexpectedly last time");
+    DWIN_ICON_Show(ICON, ICON_Continue_E, 26, 307);
+    DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 307);
+  }
+}
+
+void Popup_Window_Home(void) {
+  Clear_Main_Window();
+  Draw_Popup_Bkgd_60();
+  DWIN_ICON_Show(ICON, ICON_BLTouch, 101, 105);
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 0, 371, 33, 386, 85, 240);
+    DWIN_Frame_AreaCopy(1, 203, 286, 271, 302, 118, 240);
+    DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
+  }
+  else {
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 80, 230, (char*)GET_TEXT_F(MSG_LEVEL_BED_HOMING));
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 24, 260, (char*)"Please wait until completed");
+  }
+}
+
+void Popup_Window_Leveling(void) {
+  Clear_Main_Window();
+  Draw_Popup_Bkgd_60();
+  DWIN_ICON_Show(ICON, ICON_AutoLeveling, 101, 105);
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 0, 371, 100, 386, 84, 240);
+    DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
+  }
+  else {
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 76, 230, (char*)GET_TEXT_F(MSG_BED_LEVELING));
+    DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 24, 260, (char*)"Please wait until completed");
+  }
+}
+
+void Draw_Select_Highlight(const bool sel) {
+  HMI_flag.select_flag = sel;
+  const uint16_t c1 = sel ? Select_Color : Background_window,
+                 c2 = sel ? Background_window : Select_Color;
+  DWIN_Draw_Rectangle(0, c1, 25, 279, 126, 318);
+  DWIN_Draw_Rectangle(0, c1, 24, 278, 127, 319);
+  DWIN_Draw_Rectangle(0, c2, 145, 279, 246, 318);
+  DWIN_Draw_Rectangle(0, c2, 144, 278, 247, 319);
+}
+
+void Popup_window_PauseOrStop(void) {
+  Clear_Main_Window();
+  Draw_Popup_Bkgd_60();
+  if (HMI_flag.language_chinese) {
+    if (select_print.now == 1) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);
+    else if (select_print.now == 2) DWIN_Frame_AreaCopy(1, 221, 320, 253, 336, 98, 150);
+    DWIN_Frame_AreaCopy(1, 220, 304, 264, 319, 130, 150);
+    DWIN_ICON_Show(ICON, ICON_Confirm_C, 26, 280);
+    DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 280);
+  }
+  else {
+    if (select_print.now == 1) DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 88, 150, (char*)GET_TEXT_F(MSG_PAUSE_PRINT));
+    else if (select_print.now == 2) DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, 92, 150, (char*)GET_TEXT_F(MSG_STOP_PRINT));
+    DWIN_ICON_Show(ICON, ICON_Confirm_E, 26, 280);
+    DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 280);
+  }
+  Draw_Select_Highlight(true);
+}
+
+void Draw_Printing_Screen(void) {
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 30,  1, 271 - 200, 479 - 465,  14,   9);// Tune
+    DWIN_Frame_AreaCopy(1,  0, 72, 271 - 208, 479 - 393,  41, 188);// Pause
+    DWIN_Frame_AreaCopy(1, 65, 72, 271 - 143, 479 - 393, 176, 188); // Stop
+  }
+  else {
+    DWIN_Frame_AreaCopy(1, 40,  2, 271 - 179, 479 - 464 - 1,  14,   9);// Tune
+    DWIN_Frame_AreaCopy(1,  0, 44, 271 - 175, 479 - 420 - 1,  41, 188);// Pause
+    DWIN_Frame_AreaCopy(1, 98, 44, 271 - 119, 479 - 420 - 1, 176, 188); // Stop
+  }
+}
+
+void Draw_Print_ProgressBar() {
+  DWIN_ICON_Show(ICON, ICON_Bar, 15, 93);
+  DWIN_Draw_Rectangle(1, BarFill_Color, 16 + Percentrecord * 240 / 100, 93, 256, 113);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Percent_Color, Background_black, 2, 117, 133, Percentrecord);
+  DWIN_Draw_String(false, false, font8x16, Percent_Color, Background_black, 117 + 16, 133, (char*)"%");
+}
+
+void Draw_Print_ProgressElapsed() {
+  duration_t elapsed = print_job_timer.duration(); // print timer
+  DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 42, 212, elapsed.value / 3600);
+  DWIN_Draw_String(false, false, font8x16, White, Background_black, 42 + 16, 212, (char*)":");
+  DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 42 + 24, 212, (elapsed.value % 3600) / 60);
+}
+
+void Draw_Print_ProgressRemain() {
+  DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 176, 212, remain_time / 3600);
+  DWIN_Draw_String(false, false, font8x16, White, Background_black, 176 + 16, 212, (char*)":");
+  DWIN_Draw_IntValue(true, true, 1, font8x16, White, Background_black, 2, 176 + 24, 212, (remain_time % 3600) / 60);
+}
+
+void Goto_PrintProcess(void) {
+  checkkey = PrintProcess;
+
+  Clear_Main_Window();
+  Draw_Printing_Screen();
+
+  ICON_Tune();
+  if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+  ICON_Stop();
+
+  // Copy into filebuf string before entry
+  char * const name = card.longest_filename();
+  const int8_t npos = _MAX(0, DWIN_WIDTH - strlen(name) * MENU_CHR_W) / 2;
+  DWIN_Draw_String(false, false, font8x16, White, Background_black, npos, 60, name);
+
+  DWIN_ICON_Show(ICON, ICON_PrintTime, 17, 193);
+  DWIN_ICON_Show(ICON, ICON_RemainTime, 150, 191);
+
+  Draw_Print_ProgressBar();
+  Draw_Print_ProgressElapsed();
+  Draw_Print_ProgressRemain();
+}
+
+void Goto_MainMenu(void) {
+  checkkey = MainMenu;
+
+  Clear_Main_Window();
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 2, 2, 271 - 244, 479 - 465, 14, 9); // "Home"
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_MAIN));
+    #else
+      DWIN_Frame_AreaCopy(1, 0, 2, 271 - 232, 479 - 467, 14, 9);
+    #endif
+  }
+
+  DWIN_ICON_Show(ICON, ICON_LOGO, 71, 52);
+
+  ICON_Print();
+  ICON_Prepare();
+  ICON_Control();
+  TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(select_page.now == 3);
+}
+
+inline ENCODER_DiffState get_encoder_state() {
+  const millis_t ms = millis();
+  if (PENDING(ms, Encoder_ms)) return ENCODER_DIFF_NO;
+  const ENCODER_DiffState state = Encoder_ReceiveAnalyze();
+  if (state != ENCODER_DIFF_NO) Encoder_ms = ms + ENCODER_WAIT;
+  return state;
+}
+
+void HMI_Move_X(void) {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      HMI_ValueStruct.Move_X_scale += EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      HMI_ValueStruct.Move_X_scale -= EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      checkkey = AxisMove;
+      EncoderRate.encoderRateEnabled = 0;
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
+      if (!planner.is_full()) {
+        // Wait for planner moves to finish!
+        planner.synchronize();
+        planner.buffer_line(current_position, MMM_TO_MMS(HOMING_FEEDRATE_XY), active_extruder);
+      }
+      DWIN_UpdateLCD();
+      return;
+    }
+    NOLESS(HMI_ValueStruct.Move_X_scale, (X_MIN_POS) * MINUNITMULT);
+    NOMORE(HMI_ValueStruct.Move_X_scale, (X_MAX_POS) * MINUNITMULT);
+    current_position[X_AXIS] = HMI_ValueStruct.Move_X_scale / 10;
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
+    DWIN_UpdateLCD();
+  }
+}
+
+void HMI_Move_Y(void) {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      HMI_ValueStruct.Move_Y_scale += EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      HMI_ValueStruct.Move_Y_scale -= EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      checkkey = AxisMove;
+      EncoderRate.encoderRateEnabled = 0;
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
+      if (!planner.is_full()) {
+        // Wait for planner moves to finish!
+        planner.synchronize();
+        planner.buffer_line(current_position, MMM_TO_MMS(HOMING_FEEDRATE_XY), active_extruder);
+      }
+      DWIN_UpdateLCD();
+      return;
+    }
+    NOLESS(HMI_ValueStruct.Move_Y_scale, (Y_MIN_POS) * MINUNITMULT);
+    NOMORE(HMI_ValueStruct.Move_Y_scale, (Y_MAX_POS) * MINUNITMULT);
+    current_position[Y_AXIS] = HMI_ValueStruct.Move_Y_scale / 10;
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
+    DWIN_UpdateLCD();
+  }
+}
+
+void HMI_Move_Z(void) {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      HMI_ValueStruct.Move_Z_scale += EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      HMI_ValueStruct.Move_Z_scale -= EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      checkkey = AxisMove;
+      EncoderRate.encoderRateEnabled = 0;
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+      if (!planner.is_full()) {
+        // Wait for planner moves to finish!
+        planner.synchronize();
+        planner.buffer_line(current_position, MMM_TO_MMS(HOMING_FEEDRATE_Z), active_extruder);
+      }
+      DWIN_UpdateLCD();
+      return;
+    }
+    NOLESS(HMI_ValueStruct.Move_Z_scale, Z_MIN_POS * MINUNITMULT);
+    NOMORE(HMI_ValueStruct.Move_Z_scale, Z_MAX_POS * MINUNITMULT);
+    current_position[Z_AXIS] = HMI_ValueStruct.Move_Z_scale / 10;
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+    DWIN_UpdateLCD();
+  }
+}
+
+#if EXTRUDERS
+
+  void HMI_Move_E(void) {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      if (encoder_diffState == ENCODER_DIFF_CW) {
+        HMI_ValueStruct.Move_E_scale += EncoderRate.encoderMoveValue;
+      }
+      else if (encoder_diffState == ENCODER_DIFF_CCW) {
+        HMI_ValueStruct.Move_E_scale -= EncoderRate.encoderMoveValue;
+      }
+      else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+        checkkey = AxisMove;
+        EncoderRate.encoderRateEnabled = 0;
+        last_E_scale = HMI_ValueStruct.Move_E_scale;
+        show_plus_or_minus(font8x16, Background_black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+        if (!planner.is_full()) {
+          planner.synchronize(); // Wait for planner moves to finish!
+          planner.buffer_line(current_position, MMM_TO_MMS(FEEDRATE_E), active_extruder);
+        }
+        DWIN_UpdateLCD();
+        return;
+      }
+      if ((HMI_ValueStruct.Move_E_scale - last_E_scale) > (EXTRUDE_MAXLENGTH) * MINUNITMULT)
+        HMI_ValueStruct.Move_E_scale = last_E_scale + (EXTRUDE_MAXLENGTH) * MINUNITMULT;
+      else if ((last_E_scale - HMI_ValueStruct.Move_E_scale) > (EXTRUDE_MAXLENGTH) * MINUNITMULT)
+        HMI_ValueStruct.Move_E_scale = last_E_scale - (EXTRUDE_MAXLENGTH) * MINUNITMULT;
+      current_position.e = HMI_ValueStruct.Move_E_scale / 10;
+      show_plus_or_minus(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+      DWIN_UpdateLCD();
+    }
+  }
+
+#endif
+
+void HMI_Zoffset(void) {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    last_zoffset = zprobe_zoffset;
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      HMI_ValueStruct.offset_value += EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      HMI_ValueStruct.offset_value -= EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      EncoderRate.encoderRateEnabled = 0;
+      zprobe_zoffset                 = HMI_ValueStruct.offset_value / 100;
+      #if HAS_BED_PROBE
+        if (WITHIN(zprobe_zoffset - last_zoffset, Z_PROBE_OFFSET_RANGE_MIN, Z_PROBE_OFFSET_RANGE_MAX))
+          probe.offset.z = zprobe_zoffset;
+        settings.save();
+      #elif ENABLED(BABYSTEPPING)
+        babystep.add_mm(Z_AXIS, (zprobe_zoffset - last_zoffset));
+      #else
+        UNUSED(zprobe_zoffset - last_zoffset);
+      #endif
+
+      if (HMI_ValueStruct.show_mode == -4) {
+        checkkey = Prepare;
+        show_plus_or_minus(font8x16, Background_black, 2, 2, 202, MBASE(4 + MROWS - index_prepare), TERN(HAS_BED_PROBE, probe.offset.z * 100, HMI_ValueStruct.offset_value));
+      }
+      else {
+        checkkey = Tune;
+        show_plus_or_minus(font8x16, Background_black, 2, 2, 202, MBASE(5 + MROWS - index_tune), TERN(HAS_BED_PROBE, probe.offset.z * 100, HMI_ValueStruct.offset_value));
+      }
+      DWIN_UpdateLCD();
+      return;
+    }
+    NOLESS(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100);
+    NOMORE(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
+    if (HMI_ValueStruct.show_mode == -4)
+      show_plus_or_minus(font8x16, Select_Color, 2, 2, 202, MBASE(4 + MROWS - index_prepare), HMI_ValueStruct.offset_value);
+    else
+      show_plus_or_minus(font8x16, Select_Color, 2, 2, 202, MBASE(5 + MROWS - index_tune), HMI_ValueStruct.offset_value);
+    DWIN_UpdateLCD();
+  }
+}
+
+#if HAS_HOTEND
+
+  void HMI_ETemp(void) {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      if (encoder_diffState == ENCODER_DIFF_CW) {
+        HMI_ValueStruct.E_Temp += EncoderRate.encoderMoveValue;
+      }
+      else if (encoder_diffState == ENCODER_DIFF_CCW) {
+        HMI_ValueStruct.E_Temp -= EncoderRate.encoderMoveValue;
+      }
+      else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+        EncoderRate.encoderRateEnabled = 0;
+        if (HMI_ValueStruct.show_mode == -1) { // temperature
+          checkkey = TemperatureID;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), HMI_ValueStruct.E_Temp);
+        }
+        else if (HMI_ValueStruct.show_mode == -2) {
+          checkkey = PLAPreheat;
+          ui.material_preset[0].hotend_temp = HMI_ValueStruct.E_Temp;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), ui.material_preset[0].hotend_temp);
+          return;
+        }
+        else if (HMI_ValueStruct.show_mode == -3) {
+          checkkey = ABSPreheat;
+          ui.material_preset[1].hotend_temp = HMI_ValueStruct.E_Temp;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), ui.material_preset[1].hotend_temp);
+          return;
+        }
+        else { // tune
+          checkkey = Tune;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2 + MROWS - index_tune), HMI_ValueStruct.E_Temp);
+        }
+        thermalManager.setTargetHotend(HMI_ValueStruct.E_Temp, 0);
+        return;
+      }
+      // E_Temp limit
+      NOMORE(HMI_ValueStruct.E_Temp, MAX_E_TEMP);
+      NOLESS(HMI_ValueStruct.E_Temp, MIN_E_TEMP);
+      // E_Temp value
+      if (HMI_ValueStruct.show_mode >= 0) // tune
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2 + MROWS - index_tune), HMI_ValueStruct.E_Temp);
+      else // other page
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1), HMI_ValueStruct.E_Temp);
+    }
+  }
+
+#endif // if HAS_HOTEND
+
+#if HAS_HEATED_BED
+
+  void HMI_BedTemp(void) {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      if (encoder_diffState == ENCODER_DIFF_CW) {
+        HMI_ValueStruct.Bed_Temp += EncoderRate.encoderMoveValue;
+      }
+      else if (encoder_diffState == ENCODER_DIFF_CCW) {
+        HMI_ValueStruct.Bed_Temp -= EncoderRate.encoderMoveValue;
+      }
+      else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+        EncoderRate.encoderRateEnabled = 0;
+        if (HMI_ValueStruct.show_mode == -1) {
+          checkkey = TemperatureID;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), HMI_ValueStruct.Bed_Temp);
+        }
+        else if (HMI_ValueStruct.show_mode == -2) {
+          checkkey = PLAPreheat;
+          ui.material_preset[0].bed_temp = HMI_ValueStruct.Bed_Temp;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), ui.material_preset[0].bed_temp);
+          return;
+        }
+        else if (HMI_ValueStruct.show_mode == -3) {
+          checkkey = ABSPreheat;
+          ui.material_preset[1].bed_temp = HMI_ValueStruct.Bed_Temp;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), ui.material_preset[1].bed_temp);
+          return;
+        }
+        else {
+          checkkey = Tune;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3 + MROWS - index_tune), HMI_ValueStruct.Bed_Temp);
+        }
+        thermalManager.setTargetBed(HMI_ValueStruct.Bed_Temp);
+        return;
+      }
+      // Bed_Temp limit
+      NOMORE(HMI_ValueStruct.Bed_Temp, BED_MAX_TARGET);
+      NOLESS(HMI_ValueStruct.Bed_Temp, MIN_BED_TEMP);
+      // Bed_Temp value
+      if (HMI_ValueStruct.show_mode >= 0) // tune page
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3 + MROWS - index_tune), HMI_ValueStruct.Bed_Temp);
+      else // other page
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2), HMI_ValueStruct.Bed_Temp);
+    }
+  }
+
+#endif // if HAS_HEATED_BED
+
+#if HAS_FAN
+
+  void HMI_FanSpeed(void) {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      if (encoder_diffState == ENCODER_DIFF_CW) {
+        HMI_ValueStruct.Fan_speed += EncoderRate.encoderMoveValue;
+      }
+      else if (encoder_diffState == ENCODER_DIFF_CCW) {
+        HMI_ValueStruct.Fan_speed -= EncoderRate.encoderMoveValue;
+      }
+      else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+        EncoderRate.encoderRateEnabled = 0;
+        if (HMI_ValueStruct.show_mode == -1) {
+          checkkey = TemperatureID;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), HMI_ValueStruct.Fan_speed);
+        }
+        else if (HMI_ValueStruct.show_mode == -2) {
+          checkkey = PLAPreheat;
+          ui.material_preset[0].fan_speed = HMI_ValueStruct.Fan_speed;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), ui.material_preset[0].fan_speed);
+          return;
+        }
+        else if (HMI_ValueStruct.show_mode == -3) {
+          checkkey = ABSPreheat;
+          ui.material_preset[1].fan_speed = HMI_ValueStruct.Fan_speed;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), ui.material_preset[1].fan_speed);
+          return;
+        }
+        else {
+          checkkey = Tune;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(4 + MROWS - index_tune), HMI_ValueStruct.Fan_speed);
+        }
+        thermalManager.set_fan_speed(0, HMI_ValueStruct.Fan_speed);
+        return;
+      }
+      // Fan_speed limit
+      NOMORE(HMI_ValueStruct.Fan_speed, FANON);
+      NOLESS(HMI_ValueStruct.Fan_speed, FANOFF);
+      // Fan_speed value
+      if (HMI_ValueStruct.show_mode >= 0) // tune page
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(4 + MROWS - index_tune), HMI_ValueStruct.Fan_speed);
+      else // other page
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3), HMI_ValueStruct.Fan_speed);
+    }
+  }
+
+#endif // if HAS_FAN
+
+void HMI_PrintSpeed(void) {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      HMI_ValueStruct.print_speed += EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      HMI_ValueStruct.print_speed -= EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+      checkkey = Tune;
+      EncoderRate.encoderRateEnabled = 0;
+      feedrate_percentage            = HMI_ValueStruct.print_speed;
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1 + MROWS - index_tune), HMI_ValueStruct.print_speed);
+      return;
+    }
+    // print_speed limit
+    NOMORE(HMI_ValueStruct.print_speed, MAX_PRINT_SPEED);
+    NOLESS(HMI_ValueStruct.print_speed, MIN_PRINT_SPEED);
+    // print_speed value
+    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1 + MROWS - index_tune), HMI_ValueStruct.print_speed);
+  }
+}
+
+void HMI_MaxFeedspeedXYZE(void) {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      HMI_ValueStruct.Max_Feedspeed += EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      HMI_ValueStruct.Max_Feedspeed -= EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+      checkkey = MaxSpeed;
+      EncoderRate.encoderRateEnabled = 0;
+      if (HMI_flag.feedspeed_flag == X_AXIS) planner.set_max_feedrate(X_AXIS, HMI_ValueStruct.Max_Feedspeed);
+      else if (HMI_flag.feedspeed_flag == Y_AXIS) planner.set_max_feedrate(Y_AXIS, HMI_ValueStruct.Max_Feedspeed);
+      else if (HMI_flag.feedspeed_flag == Z_AXIS) planner.set_max_feedrate(Z_AXIS, HMI_ValueStruct.Max_Feedspeed);
+      #if HAS_HOTEND
+        else if (HMI_flag.feedspeed_flag == E_AXIS) planner.set_max_feedrate(E_AXIS, HMI_ValueStruct.Max_Feedspeed);
+      #endif
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+      return;
+    }
+    // MaxFeedspeed limit
+    if (HMI_flag.feedspeed_flag == X_AXIS) {if (HMI_ValueStruct.Max_Feedspeed > default_max_feedrate[X_AXIS] * 2) HMI_ValueStruct.Max_Feedspeed = default_max_feedrate[X_AXIS] * 2; }
+    else if (HMI_flag.feedspeed_flag == Y_AXIS) {if (HMI_ValueStruct.Max_Feedspeed > default_max_feedrate[Y_AXIS] * 2) HMI_ValueStruct.Max_Feedspeed = default_max_feedrate[Y_AXIS] * 2; }
+    else if (HMI_flag.feedspeed_flag == Z_AXIS) {if (HMI_ValueStruct.Max_Feedspeed > default_max_feedrate[Z_AXIS] * 2) HMI_ValueStruct.Max_Feedspeed = default_max_feedrate[Z_AXIS] * 2; }
+    #if HAS_HOTEND
+      else if (HMI_flag.feedspeed_flag == E_AXIS) {if (HMI_ValueStruct.Max_Feedspeed > default_max_feedrate[E_AXIS] * 2) HMI_ValueStruct.Max_Feedspeed = default_max_feedrate[E_AXIS] * 2; }
+    #endif
+    if (HMI_ValueStruct.Max_Feedspeed < MIN_MAXFEEDSPEED) HMI_ValueStruct.Max_Feedspeed = MIN_MAXFEEDSPEED;
+    // MaxFeedspeed value
+    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+  }
+}
+
+void HMI_MaxAccelerationXYZE(void) {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (encoder_diffState == ENCODER_DIFF_CW) { HMI_ValueStruct.Max_Acceleration += EncoderRate.encoderMoveValue;}
+    else if (encoder_diffState == ENCODER_DIFF_CCW) { HMI_ValueStruct.Max_Acceleration -= EncoderRate.encoderMoveValue;}
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+      checkkey = MaxAcceleration;
+      EncoderRate.encoderRateEnabled = 0;
+      if (HMI_flag.acc_flag == X_AXIS) planner.set_max_acceleration(X_AXIS, HMI_ValueStruct.Max_Acceleration);
+      else if (HMI_flag.acc_flag == Y_AXIS) planner.set_max_acceleration(Y_AXIS, HMI_ValueStruct.Max_Acceleration);
+      else if (HMI_flag.acc_flag == Z_AXIS) planner.set_max_acceleration(Z_AXIS, HMI_ValueStruct.Max_Acceleration);
+      #if HAS_HOTEND
+        else if (HMI_flag.acc_flag == E_AXIS) planner.set_max_acceleration(E_AXIS, HMI_ValueStruct.Max_Acceleration);
+      #endif
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+      return;
+    }
+    // MaxAcceleration limit
+    if (HMI_flag.acc_flag == X_AXIS) {if (HMI_ValueStruct.Max_Acceleration > default_max_acceleration[X_AXIS] * 2) HMI_ValueStruct.Max_Acceleration = default_max_acceleration[X_AXIS] * 2; }
+    else if (HMI_flag.acc_flag == Y_AXIS) {if (HMI_ValueStruct.Max_Acceleration > default_max_acceleration[Y_AXIS] * 2) HMI_ValueStruct.Max_Acceleration = default_max_acceleration[Y_AXIS] * 2; }
+    else if (HMI_flag.acc_flag == Z_AXIS) {if (HMI_ValueStruct.Max_Acceleration > default_max_acceleration[Z_AXIS] * 2) HMI_ValueStruct.Max_Acceleration = default_max_acceleration[Z_AXIS] * 2; }
+    #if HAS_HOTEND
+      else if (HMI_flag.acc_flag == E_AXIS) {if (HMI_ValueStruct.Max_Acceleration > default_max_acceleration[E_AXIS] * 2) HMI_ValueStruct.Max_Acceleration = default_max_acceleration[E_AXIS] * 2; }
+    #endif
+    if (HMI_ValueStruct.Max_Acceleration < MIN_MAXACCELERATION) HMI_ValueStruct.Max_Acceleration = MIN_MAXACCELERATION;
+    // MaxAcceleration value
+    DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+  }
+}
+
+void HMI_MaxCornerXYZE(void) {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      HMI_ValueStruct.Max_Corner += EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      HMI_ValueStruct.Max_Corner -= EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+      checkkey = MaxCorner;
+      EncoderRate.encoderRateEnabled = 0;
+      if (HMI_flag.corner_flag == X_AXIS) planner.set_max_jerk(X_AXIS, HMI_ValueStruct.Max_Corner / 10);
+      else if (HMI_flag.corner_flag == Y_AXIS) planner.set_max_jerk(Y_AXIS, HMI_ValueStruct.Max_Corner / 10);
+      else if (HMI_flag.corner_flag == Z_AXIS) planner.set_max_jerk(Z_AXIS, HMI_ValueStruct.Max_Corner / 10);
+      else if (HMI_flag.corner_flag == E_AXIS) planner.set_max_jerk(E_AXIS, HMI_ValueStruct.Max_Corner / 10);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(select_corner.now), HMI_ValueStruct.Max_Corner);
+      return;
+    }
+    // MaxCorner limit
+    if (HMI_flag.corner_flag == X_AXIS)
+      NOMORE(HMI_ValueStruct.Max_Corner, default_max_jerk[X_AXIS] * 2 * MINUNITMULT);
+    else if (HMI_flag.corner_flag == Y_AXIS)
+      NOMORE(HMI_ValueStruct.Max_Corner, default_max_jerk[Y_AXIS] * 2 * MINUNITMULT);
+    else if (HMI_flag.corner_flag == Z_AXIS)
+      NOMORE(HMI_ValueStruct.Max_Corner, default_max_jerk[Z_AXIS] * 2 * MINUNITMULT);
+    else if (HMI_flag.corner_flag == E_AXIS)
+      NOMORE(HMI_ValueStruct.Max_Corner, default_max_jerk[E_AXIS] * 2 * MINUNITMULT);
+    NOLESS(HMI_ValueStruct.Max_Corner, (MIN_MAXCORNER) * MINUNITMULT);
+    // MaxCorner value
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_corner.now), HMI_ValueStruct.Max_Corner);
+  }
+}
+
+void HMI_StepXYZE(void) {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      HMI_ValueStruct.Max_Step += EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      HMI_ValueStruct.Max_Step -= EncoderRate.encoderMoveValue;
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) { // return
+      checkkey = Step;
+      EncoderRate.encoderRateEnabled = 0;
+      if (HMI_flag.step_flag == X_AXIS) planner.settings.axis_steps_per_mm[X_AXIS] = HMI_ValueStruct.Max_Step / 10;
+      else if (HMI_flag.step_flag == Y_AXIS) planner.settings.axis_steps_per_mm[Y_AXIS] = HMI_ValueStruct.Max_Step / 10;
+      else if (HMI_flag.step_flag == Z_AXIS) planner.settings.axis_steps_per_mm[Z_AXIS] = HMI_ValueStruct.Max_Step / 10;
+      else if (HMI_flag.step_flag == E_AXIS) planner.settings.axis_steps_per_mm[E_AXIS] = HMI_ValueStruct.Max_Step / 10;
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+      return;
+    }
+    // Step limit
+    if (HMI_flag.step_flag == X_AXIS)
+      NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[X_AXIS] * 2 * MINUNITMULT);
+    else if (HMI_flag.step_flag == Y_AXIS)
+      NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[Y_AXIS] * 2 * MINUNITMULT);
+    else if (HMI_flag.step_flag == Z_AXIS)
+      NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[Z_AXIS] * 2 * MINUNITMULT);
+    else if (HMI_flag.step_flag == E_AXIS)
+      NOMORE(HMI_ValueStruct.Max_Step, default_axis_steps_per_unit[E_AXIS] * 2 * MINUNITMULT);
+    NOLESS(HMI_ValueStruct.Max_Step, MIN_STEP);
+    // Step value
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+  }
+}
+
+void update_variable(void) {
+  /* Tune page temperature update */
+  if (checkkey == Tune) {
+    if (last_temp_hotend_target != thermalManager.temp_hotend[0].target)
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2 + MROWS - index_tune), thermalManager.temp_hotend[0].target);
+    if (last_temp_bed_target != thermalManager.temp_bed.target)
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3 + MROWS - index_tune), thermalManager.temp_bed.target);
+    if (last_fan_speed != thermalManager.fan_speed[0]) {
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(4 + MROWS - index_tune), thermalManager.fan_speed[0]);
+      last_fan_speed = thermalManager.fan_speed[0];
+    }
+  }
+
+  /* Temperature page temperature update */
+  if (checkkey == TemperatureID) {
+    if (last_temp_hotend_target != thermalManager.temp_hotend[0].target)
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), thermalManager.temp_hotend[0].target);
+    if (last_temp_bed_target != thermalManager.temp_bed.target)
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), thermalManager.temp_bed.target);
+    if (last_fan_speed != thermalManager.fan_speed[0]) {
+      DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), thermalManager.fan_speed[0]);
+      last_fan_speed = thermalManager.fan_speed[0];
+    }
+  }
+
+  /* Bottom temperature update */
+  if (last_temp_hotend_current != thermalManager.temp_hotend[0].celsius) {
+    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
+    last_temp_hotend_current = thermalManager.temp_hotend[0].celsius;
+  }
+  if (last_temp_hotend_target != thermalManager.temp_hotend[0].target) {
+    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
+    last_temp_hotend_target = thermalManager.temp_hotend[0].target;
+  }
+  if (last_temp_bed_current != thermalManager.temp_bed.celsius) {
+    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178, 382, thermalManager.temp_bed.celsius);
+    last_temp_bed_current = thermalManager.temp_bed.celsius;
+  }
+  if (last_temp_bed_target != thermalManager.temp_bed.target) {
+    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
+    last_temp_bed_target = thermalManager.temp_bed.target;
+  }
+  if (last_speed != feedrate_percentage) {
+    DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
+    last_speed = feedrate_percentage;
+  }
+  #if HAS_BED_PROBE
+    if (last_probe_zoffset != probe.offset.z) {
+      show_plus_or_minus(STAT_FONT, Background_black, 2, 2, 178 + STAT_CHR_W, 429, probe.offset.z * 100);
+      last_probe_zoffset = probe.offset.z;
+    }
+  #else
+    if (last_zoffset != zprobe_zoffset) {
+      show_plus_or_minus(STAT_FONT, Background_black, 2, 2, 178 + STAT_CHR_W, 429, zprobe_zoffset * 100);
+      last_zoffset = zprobe_zoffset;
+    }
+  #endif
+}
+
+/**
+* Read and cache the working directory.
+*
+* TODO: New code can follow the pattern of menu_media.cpp
+* and rely on Marlin caching for performance. No need to
+* cache files here.
+*
+*/
+
+#ifndef strcasecmp_P
+  #define strcasecmp_P(a, b) strcasecmp((a), (b))
+#endif
+
+inline void make_name_without_ext(char *dst, char *src, size_t maxlen=MENU_CHAR_LIMIT) {
+  char * const name = card.longest_filename();
+  size_t pos        = strlen(name); // index of ending nul
+
+  // For files, remove the extension
+  // which may be .gcode, .gco, or .g
+  if (!card.flag.filenameIsDir)
+    while (pos && src[pos] != '.') pos--; // find last '.' (stop at 0)
+
+  size_t len = pos;   // nul or '.'
+  if (len > maxlen) { // Keep the name short
+    pos        = len = maxlen; // move nul down
+    dst[--pos] = '.'; // insert dots
+    dst[--pos] = '.';
+    dst[--pos] = '.';
+  }
+
+  dst[len] = '\0';    // end it
+
+  // Copy down to 0
+  while (pos--) dst[pos] = src[pos];
+}
+
+inline void HMI_SDCardInit(void) { card.cdroot(); }
+
+void MarlinUI::refresh() {
+  // The card was mounted or unmounted
+  // or some other status change occurred
+  // DWIN_lcd_sd_status = false; // On next DWIN_Update
+  // HMI_SDCardUpdate();
+}
+
+#define ICON_Folder ICON_More
+
+char shift_name[LONG_FILENAME_LENGTH + 1];
+int8_t shift_amt; // = 0
+millis_t shift_ms; // = 0
+
+// Init the shift name based on the highlighted item
+inline void Init_Shift_Name() {
+  const bool is_subdir = !card.flag.workDirIsRoot;
+  const int8_t filenum = select_file.now - 1 - is_subdir; // Skip "Back" and ".."
+  const uint16_t fileCnt = card.get_num_Files();
+  if (WITHIN(filenum, 0, fileCnt - 1)) {
+    card.getfilename_sorted(SD_ORDER(filenum, fileCnt));
+    char * const name = card.longest_filename();
+    make_name_without_ext(shift_name, name, 100);
+  }
+}
+
+inline void Init_SDItem_Shift() {
+  shift_amt = 0;
+  shift_ms  = select_file.now > 0 && strlen(shift_name) > MENU_CHAR_LIMIT
+         ? millis() + 750UL : 0;
+}
+
+/**
+ * Display an SD item, adding a CDUP for subfolders.
+ */
+inline void Draw_SDItem(const uint16_t item, int16_t row=-1) {
+  if (row < 0) row = item + 1 + MROWS - index_file;
+  const bool is_subdir = !card.flag.workDirIsRoot;
+  if (is_subdir && item == 0) {
+    Draw_Menu_Line(row, ICON_Folder, (char*)"..");
+    return;
+  }
+
+  card.getfilename_sorted(item - is_subdir);
+  char * const name = card.longest_filename();
+
+  // Init the current selected name
+  // This is used during scroll drawing
+  if (item == select_file.now - 1) {
+    make_name_without_ext(shift_name, name, 100);
+    Init_SDItem_Shift();
+  }
+
+  char str[strlen(name) + 1];
+
+  make_name_without_ext(str, name);
+
+  Draw_Menu_Line(row, card.flag.filenameIsDir ? ICON_Folder : ICON_File, str);
+}
+
+inline void Draw_SDItem_Shifted(int8_t &shift) {
+  // Limit to the number of chars past the cutoff
+  const size_t len = strlen(shift_name);
+  NOMORE(shift, _MAX((signed)len - MENU_CHAR_LIMIT, 0));
+
+  // Shorten to the available space
+  const size_t lastchar = _MIN((signed)len, shift + MENU_CHAR_LIMIT);
+
+  const char c = shift_name[lastchar];
+  shift_name[lastchar] = '\0';
+
+  const uint8_t row = select_file.now + MROWS - index_file; // skip "Back" and scroll
+  Erase_Menu_Text(row);
+  Draw_Menu_Line(row, 0, &shift_name[shift]);
+
+  shift_name[lastchar] = c;
+}
+
+// Redraw the first set of SD Files
+inline void Redraw_SD_List() {
+  select_file.reset();
+  index_file = MROWS;
+
+  Clear_Menu_Area(); // Leave title bar unchanged
+
+  Draw_Back_First();
+
+  // As many files as will fit
+  LOOP_L_N(i, _MIN(nr_sd_menu_items(), MROWS))
+    Draw_SDItem(i, i + 1);
+
+  Init_SDItem_Shift();
+}
+
+inline void SDCard_Up(void) {
+  card.cdup();
+  Redraw_SD_List();
+  DWIN_lcd_sd_status = false; // On next DWIN_Update
+}
+
+inline void SDCard_Folder(char * const dirname) {
+  card.cd(dirname);
+  Redraw_SD_List();
+  DWIN_lcd_sd_status = false; // On next DWIN_Update
+}
+
+//
+// Watch for media mount / unmount
+//
+void HMI_SDCardUpdate(void) {
+  if (HMI_flag.home_flag) return;
+  if (DWIN_lcd_sd_status != card.isMounted()) {
+    DWIN_lcd_sd_status = card.isMounted();
+    // SERIAL_ECHOLNPAIR("HMI_SDCardUpdate: ", int(DWIN_lcd_sd_status));
+    if (card.isMounted()) {
+      if (checkkey == SelectFile)
+        Redraw_SD_List();
+    }
+    else {
+      // clean file icon
+      if (checkkey == SelectFile) {
+        Redraw_SD_List();
+      }
+      else if (checkkey == PrintProcess || checkkey == Tune || printingIsActive()) {
+        // TODO: Move card removed abort handling
+        //       to CardReader::manage_media.
+        card.flag.abort_sd_printing = true;
+        wait_for_heatup             = false;
+        abort_flag                  = true;
+      }
+    }
+    DWIN_UpdateLCD();
+  }
+}
+
+/* Start */
+void HMI_StartFrame(const bool with_update) {
+  Goto_MainMenu();
+
+  DWIN_Draw_Rectangle(1, Background_black,  0,  360,  272, 479);
+
+  DWIN_ICON_Show(ICON, ICON_HotendTemp, 13, 381);
+  #if HOTENDS > 1
+    // DWIN_ICON_Show(ICON,ICON_HotendTemp, 13, 381);
+  #endif
+  DWIN_ICON_Show(ICON, ICON_BedTemp,   158, 381);
+  DWIN_ICON_Show(ICON, ICON_Speed,      13, 429);
+  DWIN_ICON_Show(ICON, ICON_Zoffset,   158, 428);
+
+  // Draw initial Status Area
+  DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33, 382, thermalManager.temp_hotend[0].celsius);
+  DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_hotend[0].target);
+  DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178, 382, thermalManager.temp_bed.celsius);
+  DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 178 + 4 * STAT_CHR_W + 6, 382, thermalManager.temp_bed.target);
+
+  DWIN_Draw_IntValue(true, true, 0, STAT_FONT, White, Background_black, 3, 33 + 2 * STAT_CHR_W, 429, feedrate_percentage);
+  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + (2 + 3) * STAT_CHR_W + 2, 429, (char*)"%");
+
+  show_plus_or_minus(STAT_FONT, Background_black, 2, 2, 178, 429, BABY_Z_VAR * 100);
+  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 33 + 3 * STAT_CHR_W + 5, 383, (char*)"/");
+  DWIN_Draw_String(false, false, STAT_FONT, White, Background_black, 178 + 3 * STAT_CHR_W + 5, 383, (char*)"/");
+
+  if (with_update) {
+    DWIN_UpdateLCD();
+    delay(5);
+  }
+}
+
+inline void Draw_Info_Menu() {
+  Clear_Main_Window();
+
+  DWIN_Draw_String(false, false, font8x16, White, Background_black, (DWIN_WIDTH - strlen(MACHINE_SIZE) * MENU_CHR_W) / 2, 122, (char*)MACHINE_SIZE);
+  DWIN_Draw_String(false, false, font8x16, White, Background_black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, (char*)SHORT_BUILD_VERSION);
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 30, 17, 271 - 214, 479 - 450, 14, 8);
+
+    DWIN_Frame_AreaCopy(1, 197, 149, 271 - 19, 479 - 318, 108, 102);
+    DWIN_Frame_AreaCopy(1, 1, 164, 271 - 215, 479 - 303, 108, 175);
+    DWIN_Frame_AreaCopy(1, 58, 164, 271 - 158, 479 - 303, 105, 248);
+    DWIN_Draw_String(false, false, font8x16, White, Background_black, (DWIN_WIDTH - strlen(CORP_WEBSITE_C) * MENU_CHR_W) / 2, 268, (char*)CORP_WEBSITE_C);
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_INFO_SCREEN));
+    #else
+      DWIN_Frame_AreaCopy(1, 190, 16, 271 - 56, 479 - 453, 14, 8);
+    #endif
+
+    DWIN_Frame_AreaCopy(1, 120, 150, 146, 479 - 318, 124, 102);
+    DWIN_Frame_AreaCopy(1, 146, 151, 271 - 17, 479 - 318, 82, 175);
+    DWIN_Frame_AreaCopy(1, 0, 165, 271 - 177, 479 - 304, 89, 248);
+    DWIN_Draw_String(false, false, font8x16, White, Background_black, (DWIN_WIDTH - strlen(CORP_WEBSITE_E) * MENU_CHR_W) / 2, 268, (char*)CORP_WEBSITE_E);
+  }
+
+  Draw_Back_First();
+  LOOP_L_N(i, 3) {
+    DWIN_ICON_Show(ICON, ICON_PrintSize + i, 26, 99 + i * 73);
+    DWIN_Draw_Line(Line_Color, 16, MBASE(2) + i * 73, 256, 156 + i * 73);
+  }
+}
+
+inline void Draw_Print_File_Menu() {
+  Clear_Title_Bar();
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 0, 31, 271 - 216, 479 - 435, 14, 8);
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title("Print file"); // TODO: GET_TEXT_F
+    #else
+      DWIN_Frame_AreaCopy(1, 52, 31, 271 - 134, 479 - 438, 14, 8); // "Print file"
+    #endif
+  }
+
+  Redraw_SD_List();
+}
+
+/* Main Process */
+void HMI_MainMenu(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_page.inc(3)) {
+      switch (select_page.now) {
+        case 0: ICON_Print(); break;
+        case 1: ICON_Print(); ICON_Prepare(); break;
+        case 2: ICON_Prepare(); ICON_Control(); break;
+        case 3: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(1); break;
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_page.dec()) {
+      switch (select_page.now) {
+        case 0: ICON_Print(); ICON_Prepare(); break;
+        case 1: ICON_Prepare(); ICON_Control(); break;
+        case 2: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(0); break;
+        case 3: TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(1); break;
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_page.now) {
+      /* Print File */
+      case 0:
+        checkkey = SelectFile;
+        Draw_Print_File_Menu();
+        break;
+
+      /* Prepare */
+      case 1:
+        checkkey = Prepare;
+        select_prepare.reset();
+        index_prepare = MROWS;
+        Draw_Prepare_Menu();
+        break;
+
+      /* Control */
+      case 2:
+        checkkey = Control;
+        select_control.reset();
+        index_control = MROWS;
+        Draw_Control_Menu();
+        break;
+
+      /* Leveling */
+      case 3:
+        #if HAS_ONESTEP_LEVELING
+          checkkey = Leveling;
+          HMI_Leveling();
+        #else
+          checkkey = Info;
+          Draw_Info_Menu();
+        #endif
+        break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* Select (and Print) File */
+void HMI_SelectFile(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+
+  const uint16_t hasUpDir = !card.flag.workDirIsRoot;
+
+  if (encoder_diffState == ENCODER_DIFF_NO) {
+    if (shift_ms && select_file.now >= 1 + hasUpDir) {
+      // Scroll selected filename every second
+      const millis_t ms = millis();
+      if (ELAPSED(ms, shift_ms)) {
+        const bool was_reset = shift_amt < 0;
+        shift_ms = ms + 375UL + was_reset * 250UL;  // ms per character
+        int8_t shift_new = shift_amt + 1;           // Try to shift by...
+        Draw_SDItem_Shifted(shift_new);             // Draw the item
+        if (!was_reset && shift_new == 0)           // Was it limited to 0?
+          shift_ms = 0;                             // No scrolling needed
+        else if (shift_new == shift_amt)            // Scroll reached the end
+          shift_new = -1;                           // Reset
+        shift_amt = shift_new;                      // Set new scroll
+      }
+    }
+    return;
+  }
+
+  // First pause is long. Easy.
+  // On reset, long pause must be after 0.
+
+  const uint16_t fullCnt = nr_sd_menu_items();
+
+  if (encoder_diffState == ENCODER_DIFF_CW && fullCnt) {
+    if (select_file.inc(fullCnt)) {
+      const uint8_t itemnum = select_file.now - 1;              // -1 for "Back"
+      if (shift_ms) {                                           // If line was shifted
+        Erase_Menu_Text(select_file.now - 1 + MROWS - index_file); // Erase and
+        Draw_SDItem(itemnum - 1);                               // redraw
+      }
+      if (select_file.now > MROWS && select_file.now > index_file) { // Cursor past the bottom
+        index_file = select_file.now;                           // New bottom line
+        Scroll_Menu(DWIN_SCROLL_UP);
+        Draw_SDItem(itemnum, MROWS);                            // Draw and init the shift name
+      }
+      else {
+        Move_Highlight(1, select_file.now + MROWS - index_file); // Just move highlight
+        Init_Shift_Name();                                      // ...and init the shift name
+      }
+      Init_SDItem_Shift();
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW && fullCnt) {
+    if (select_file.dec()) {
+      const uint8_t itemnum = select_file.now - 1;              // -1 for "Back"
+      if (shift_ms) {                                           // If line was shifted
+        Erase_Menu_Text(select_file.now + 1 + MROWS - index_file); // Erase and
+        Draw_SDItem(itemnum + 1);                               // redraw
+      }
+      if (select_file.now < index_file - MROWS) {               // Cursor past the top
+        index_file--;                                           // New bottom line
+        Scroll_Menu(DWIN_SCROLL_DOWN);
+        if (index_file == MROWS) {
+          Draw_Back_First();
+          shift_ms = 0;
+        }
+        else {
+          Draw_SDItem(itemnum, 0);                              // Draw the item (and init shift name)
+        }
+      }
+      else {
+        Move_Highlight(-1, select_file.now + MROWS - index_file); // Just move highlight
+        Init_Shift_Name();                                      // ...and init the shift name
+      }
+      Init_SDItem_Shift();                                      // Reset left. Init timer.
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    if (select_file.now == 0) {
+      /* back */
+      select_page.set(0);
+      Goto_MainMenu();
+    }
+    else if (hasUpDir && select_file.now == 1) {
+      /* CDUP */
+      SDCard_Up();
+      goto HMI_SelectFileExit;
+    }
+    else {
+      const uint16_t filenum = select_file.now - 1 - hasUpDir;
+      card.getfilename_sorted(SD_ORDER(filenum, card.get_num_Files()));
+
+      // Enter that folder!
+      if (card.flag.filenameIsDir) {
+        SDCard_Folder(card.filename);
+        goto HMI_SelectFileExit;
+      }
+
+      // Reset highlight for next entry
+      select_print.reset();
+      select_file.reset();
+
+      // Start choice and print SD file
+      HMI_flag.heat_flag        = 1;
+      HMI_flag.print_finish     = 0;
+      HMI_ValueStruct.show_mode = 0;
+
+      card.openAndPrintFile(card.filename);
+
+      #if FAN_COUNT > 0
+        // All fans on for Ender 3 v2 ?
+        // The slicer should manage this for us.
+        // for (uint8_t i = 0; i < FAN_COUNT; i++)
+        //  thermalManager.fan_speed[i] = FANON;
+      #endif
+
+      Goto_PrintProcess();
+    }
+  }
+HMI_SelectFileExit:
+  DWIN_UpdateLCD();
+}
+
+/* Printing */
+void HMI_Printing(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  if (HMI_flag.confirm_flag) {
+    if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      HMI_flag.confirm_flag = 0;
+      abort_flag            = 1;
+    }
+    return;
+  }
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_print.inc(2)) {
+      switch (select_print.now) {
+        case 0: ICON_Tune(); break;
+        case 1:
+          ICON_Tune();
+          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+          break;
+        case 2:
+          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+          ICON_Stop();
+          break;
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_print.dec()) {
+      switch (select_print.now) {
+        case 0:
+          ICON_Tune();
+          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+          break;
+        case 1:
+          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+          ICON_Stop();
+          break;
+        case 2: ICON_Stop(); break;
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_print.now) {
+      case 0: // setting
+        checkkey = Tune;
+        HMI_ValueStruct.show_mode = 0;
+        select_tune.reset();
+        index_tune = 5;
+        Draw_Tune_Menu();
+        break;
+      case 1: // pause
+        /* pause */
+        if (HMI_flag.pause_flag) {
+          ICON_Pause();
+
+          char cmd[40];
+          cmd[0] = '\0';
+
+          #if ENABLED(PAUSE_HEAT)
+            if (tempbed) sprintf_P(cmd, PSTR("M190 S%i\n"), tempbed);
+            if (temphot) sprintf_P(&cmd[strlen(cmd)], PSTR("M109 S%i\n"), temphot);
+          #endif
+
+          strcat_P(cmd, PSTR("M24"));
+          queue.inject(cmd);
+        }
+        else {
+          HMI_flag.select_flag = 1;
+          checkkey = Print_window;
+          Popup_window_PauseOrStop();
+        }
+        break;
+
+      case 2: // stop
+        /* stop */
+        HMI_flag.select_flag = 1;
+        checkkey = Print_window;
+        Popup_window_PauseOrStop();
+        break;
+
+      default:
+        break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* pause and stop window */
+void HMI_PauseOrStop(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    Draw_Select_Highlight(false);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    Draw_Select_Highlight(true);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    if (select_print.now == 1) { // pause window
+      if (HMI_flag.select_flag) {
+        pause_action_flag = 1;
+        ICON_Continue();
+        #if ENABLED(POWER_LOSS_RECOVERY)
+          if (recovery.enabled) recovery.save(true);
+        #endif
+        queue.inject_P(PSTR("M25"));
+      }
+      else {
+        // cancel pause
+      }
+      Goto_PrintProcess();
+    }
+    else if (select_print.now == 2) { // stop window
+      if (HMI_flag.select_flag) {
+        wait_for_heatup = false; // Stop waiting for heater
+
+        #if 0
+          // TODO: In ExtUI or MarlinUI add a common stop event
+          // card.flag.abort_sd_printing = true;
+        #else
+          checkkey = Back_Main;
+          // Wait for planner moves to finish!
+          if (HMI_flag.home_flag) planner.synchronize();
+          card.endFilePrint();
+          #ifdef ACTION_ON_CANCEL
+            host_action_cancel();
+          #endif
+          #ifdef EVENT_GCODE_SD_ABORT
+            Popup_Window_Home();
+            queue.inject_P(PSTR(EVENT_GCODE_SD_ABORT));
+          #endif
+          abort_flag = true;
+        #endif
+      }
+      else {
+        Goto_PrintProcess(); // cancel stop
+      }
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+inline void Draw_Move_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 192, 1, 271 - 38, 479 - 465, 14, 8);
+    DWIN_Frame_AreaCopy(1, 58, 118, 271 - 165, 479 - 347, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 109, 118, 271 - 114, 479 - 347, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 160, 118, 271 - 62, 479 - 347, LBLX, MBASE(3));
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 212, 118, 271 - 18, 479 - 348, LBLX, MBASE(4));
+    #endif
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_MOVE_AXIS));
+    #else
+      DWIN_Frame_AreaCopy(1, 231, 2, 271 - 6, 479 - 467, 14, 8);
+    #endif
+    draw_move_en(MBASE(1)); say_x(33 + 3, MBASE(1));                    // "Move X"
+    draw_move_en(MBASE(2)); say_y(33 + 3, MBASE(2));                    // "Move Y"
+    draw_move_en(MBASE(3)); say_z(33 + 3, MBASE(3));                    // "Move Z"
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 123, 192, 271 - 95, 479 - 277, LBLX, MBASE(4)); // "Extruder"
+    #endif
+  }
+
+  Draw_Back_First(select_axis.now == 0);
+  if (select_axis.now) Draw_Menu_Cursor(select_axis.now);
+
+  LOOP_L_N(i, MROWS) Draw_Menu_Line(i + 1, ICON_MoveX + i);
+}
+
+#include "../../../libs/buzzer.h"
+
+void HMI_AudioFeedback(const bool success=true) {
+  if (success) {
+    buzzer.tone(100, 659);
+    buzzer.tone(10, 0);
+    buzzer.tone(100, 698);
+  }
+  else
+    buzzer.tone(40, 440);
+}
+
+/* Prepare */
+void HMI_Prepare(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_prepare.inc(8)) {
+      if (select_prepare.now > MROWS && select_prepare.now > index_prepare) {
+        index_prepare = select_prepare.now;
+
+        // Scroll up and draw a blank bottom line
+        Scroll_Menu(DWIN_SCROLL_UP);
+        Draw_Menu_Icon(MROWS, ICON_Axis + select_prepare.now - 1);
+
+        // Draw "More" icon for sub-menus
+        if (index_prepare < 7) Draw_More_Icon(MROWS - index_prepare + 1);
+
+        if (index_prepare == 6) Prepare_Item_ABS(MROWS);
+        else if (index_prepare == 7) Prepare_Item_Cool(MROWS);
+        else if (index_prepare == 8) Prepare_Item_Lang(MROWS);
+      }
+      else {
+        Move_Highlight(1, select_prepare.now + MROWS - index_prepare);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_prepare.dec()) {
+      if (select_prepare.now < index_prepare - MROWS) {
+        index_prepare--;
+        Scroll_Menu(DWIN_SCROLL_DOWN);
+
+        if (index_prepare == MROWS)
+          Draw_Back_First();
+        else
+          Draw_Menu_Line(0, ICON_Axis + select_prepare.now - 1);
+
+        if (index_prepare < 7) Draw_More_Icon(MROWS - index_prepare + 1);
+
+        if (index_prepare == 6) Prepare_Item_Move(0);
+        else if (index_prepare == 7) Prepare_Item_Disable(0);
+        else if (index_prepare == 8) Prepare_Item_Home(0);
+      }
+      else {
+        Move_Highlight(-1, select_prepare.now + MROWS - index_prepare);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_prepare.now) {
+      case 0: // back
+        select_page.set(1);
+        Goto_MainMenu();
+        break;
+      case 1: // axis move
+        checkkey = AxisMove;
+        select_axis.reset();
+        Draw_Move_Menu();
+
+        queue.inject_P(PSTR("G92 E0"));
+        current_position.e = HMI_ValueStruct.Move_E_scale = 0;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), current_position[X_AXIS] * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), current_position[Y_AXIS] * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), current_position[Z_AXIS] * MINUNITMULT);
+        show_plus_or_minus(font8x16, Background_black, 3, 1, 216, MBASE(4), current_position.e * MINUNITMULT);
+        break;
+      case 2: // close motion
+        queue.inject_P(PSTR("M84"));
+        break;
+      case 3: // homing
+        checkkey = Last_Prepare;
+        index_prepare = MROWS;
+        queue.inject_P(PSTR("G28")); // G28 will set home_flag
+        Popup_Window_Home();
+        break;
+      case 4: // Z-offset
+        #if HAS_BED_PROBE
+          checkkey = Homeoffset;
+          HMI_ValueStruct.show_mode    = -4;
+          HMI_ValueStruct.offset_value = probe.offset.z * 100;
+          show_plus_or_minus(font8x16, Select_Color, 2, 2, 202, MBASE(4 + MROWS - index_prepare), HMI_ValueStruct.offset_value);
+          EncoderRate.encoderRateEnabled = 1;
+        #else
+          // Apply workspace offset, making the current position 0,0,0
+          queue.inject_P(PSTR("G92 X0 Y0 Z0"));
+          HMI_AudioFeedback();
+        #endif
+        break;
+      case 5: // PLA preheat
+        thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0);
+        thermalManager.setTargetBed(ui.material_preset[0].bed_temp);
+        thermalManager.set_fan_speed(0, ui.material_preset[0].fan_speed);
+        break;
+      case 6: // ABS preheat
+        thermalManager.setTargetHotend(ui.material_preset[1].hotend_temp, 0);
+        thermalManager.setTargetBed(ui.material_preset[1].bed_temp);
+        thermalManager.set_fan_speed(0, ui.material_preset[1].fan_speed);
+        break;
+      case 7: // cool
+        thermalManager.zero_fan_speeds();
+        thermalManager.disable_all_heaters();
+        break;
+      case 8: // language
+        /* select language */
+        HMI_flag.language_chinese ^= true;
+        if (HMI_flag.language_chinese) {
+          HMI_SetAndSaveLanguageChinese();
+          DWIN_JPG_CacheTo1(Language_Chinese);
+        }
+        else {
+          HMI_SetAndSaveLanguageWestern();
+          DWIN_JPG_CacheTo1(Language_English);
+        }
+        Draw_Prepare_Menu();
+        break;
+      default:
+        break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+void Draw_Temperature_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 236, 2, 271 - 8, 479 - 466, 14, 8);
+
+    DWIN_Frame_AreaCopy(1, 1, 134, 271 - 215, 479 - 333, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 58, 134, 271 - 158, 479 - 333, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 115, 134, 271 - 101, 479 - 333, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 100, 89, 271 - 93, 479 - 378, LBLX, MBASE(4));
+    DWIN_Frame_AreaCopy(1, 180, 89, 271 - 11, 479 - 379, LBLX, MBASE(5));
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_TEMPERATURE));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)GET_TEXT_F(MSG_FAN_SPEED));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)"PLA Preheat Settings");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 4), (char*)"ABS Preheat Settings");
+    #else
+      DWIN_Frame_AreaCopy(1, 56, 16, 271 - 130, 479 - 450 - 1, 14, 8);
+      DWIN_Frame_AreaCopy(1, 197, 104, 271 - 33, 479 - 365, LBLX, MBASE(1));                    // Nozzle...
+      DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 41 + 3, MBASE(1));         // ...Temperature
+      DWIN_Frame_AreaCopy(1, 240, 104, 271 - 7, 479 - 365, LBLX, MBASE(2));                     // Bed...
+      DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 24 + 3, MBASE(2));         // ...Temperature
+      DWIN_Frame_AreaCopy(1, 0, 119, 271 - 207, 479 - 347, LBLX, MBASE(3));                     // Fan speed
+      DWIN_Frame_AreaCopy(1, 107, 76, 271 - 115, 479 - 393, LBLX, MBASE(4));                    // Preheat...
+      DWIN_Frame_AreaCopy(1, 157, 76, 181, 479 - 393, LBLX + 49 + 3, MBASE(4));                 // ...PLA
+      DWIN_Frame_AreaCopy(1, 131, 119, 271 - 89, 479 - 347, LBLX + 49 + 24 + 6, MBASE(4));      // PLA setting
+      DWIN_Frame_AreaCopy(1, 107, 76, 271 - 115, 479 - 393, LBLX, MBASE(5));                    // Preheat...
+      DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX + 49 + 3, MBASE(5));                 // ...ABS
+      DWIN_Frame_AreaCopy(1, 131, 119, 271 - 89, 479 - 347, LBLX + 49 + 3 + 26 + 3, MBASE(5));  // ABS setting
+    #endif
+  }
+
+  Draw_Back_First(select_temp.now == 0);
+  if (select_temp.now) Draw_Menu_Cursor(select_temp.now);
+
+  LOOP_L_N(i, 5) Draw_Menu_Line(i + 1, ICON_SetEndTemp + i);
+
+  Draw_More_Icon(4);
+  Draw_More_Icon(5);
+
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), thermalManager.temp_hotend[0].target);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), thermalManager.temp_bed.target);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), thermalManager.fan_speed[0]);
+}
+
+/* Control */
+void HMI_Control(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    #define CONTROL_ITEMS (5 + ENABLED(HAS_ONESTEP_LEVELING))
+    if (select_control.inc(CONTROL_ITEMS)) {
+      if (select_control.now > MROWS && select_control.now > index_control) {
+        index_control = select_control.now;
+        Scroll_Menu(DWIN_SCROLL_UP);
+        Draw_Menu_Icon(MROWS, ICON_Temperature + select_control.now - 1);
+        Draw_More_Icon(1 + MROWS - index_control); // Temperature >
+        Draw_More_Icon(2 + MROWS - index_control); // Motion >
+        if (index_control > MROWS) {
+          Draw_More_Icon(6 + MROWS - index_control); // Info >
+          if (HMI_flag.language_chinese)
+            DWIN_Frame_AreaCopy(1, 231, 104, 271 - 13, 479 - 363, LBLX, MBASE(5));
+          else
+            DWIN_Frame_AreaCopy(1, 0, 104, 271 - 247, 479 - 365, LBLX, MBASE(5));
+        }
+      }
+      else {
+        Move_Highlight(1, select_control.now + MROWS - index_control);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_control.dec()) {
+      if (select_control.now < index_control - MROWS) {
+        index_control--;
+        Scroll_Menu(DWIN_SCROLL_DOWN);
+        if (index_control == MROWS)
+          Draw_Back_First();
+        else
+          Draw_Menu_Line(0, ICON_Temperature + select_control.now - 1);
+        Draw_More_Icon(0 + MROWS - index_control + 1); // Temperature >
+        Draw_More_Icon(1 + MROWS - index_control + 1); // Motion >
+      }
+      else {
+        Move_Highlight(-1, select_control.now + MROWS - index_control);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_control.now) {
+      case 0: // back
+        select_page.set(2);
+        Goto_MainMenu();
+        break;
+      case 1: // temperature
+        checkkey = TemperatureID;
+        HMI_ValueStruct.show_mode = -1;
+        select_temp.reset();
+        Draw_Temperature_Menu();
+        break;
+      case 2: // motion
+        checkkey = Motion;
+        select_motion.reset();
+        Draw_Motion_Menu();
+        break;
+      case 3: { // write EEPROM
+        const bool success = settings.save();
+        HMI_AudioFeedback(success);
+      } break;
+      case 4: { // read EEPROM
+        const bool success = settings.load();
+        HMI_AudioFeedback(success);
+      } break;
+      case 5: // resume EEPROM
+        settings.reset();
+        HMI_AudioFeedback();
+        break;
+      case 6: // info
+        checkkey = Info;
+        Draw_Info_Menu();
+        break;
+      default:
+        break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+
+#if HAS_ONESTEP_LEVELING
+
+  /* Leveling */
+  void HMI_Leveling(void) {
+    Popup_Window_Leveling();
+    DWIN_UpdateLCD();
+    queue.inject_P(PSTR("G28O\nG29"));
+  }
+
+#endif
+
+/* Axis Move */
+void HMI_AxisMove(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  #if HAS_HOTEND
+    // popup window resume
+    if (HMI_flag.ETempTooLow_flag) {
+      if (encoder_diffState == ENCODER_DIFF_ENTER) {
+        HMI_flag.ETempTooLow_flag = 0;
+        Draw_Move_Menu();
+        current_position.e = HMI_ValueStruct.Move_E_scale = 0;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+        show_plus_or_minus(font8x16, Background_black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+        DWIN_UpdateLCD();
+      }
+      return;
+    }
+  #endif
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_axis.inc(4)) Move_Highlight(1, select_axis.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_axis.dec()) Move_Highlight(-1, select_axis.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_axis.now) {
+      case 0: // back
+        checkkey = Prepare;
+        select_prepare.set(1);
+        index_prepare = MROWS;
+        Draw_Prepare_Menu();
+        break;
+      case 1: // X axis move
+        checkkey = Move_X;
+        HMI_ValueStruct.Move_X_scale = current_position[X_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scale);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 2: // Y axis move
+        checkkey = Move_Y;
+        HMI_ValueStruct.Move_Y_scale = current_position[Y_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scale);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 3: // Z axis move
+        checkkey = Move_Z;
+        HMI_ValueStruct.Move_Z_scale = current_position[Z_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scale);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+        #if HAS_HOTEND
+          case 4: // Extruder
+            // window tips
+            #ifdef PREVENT_COLD_EXTRUSION
+              if (thermalManager.temp_hotend[0].celsius < EXTRUDE_MINTEMP) {
+                HMI_flag.ETempTooLow_flag = 1;
+                Popup_Window_ETempTooLow();
+                DWIN_UpdateLCD();
+                return;
+              }
+            #endif
+            checkkey = Extruder;
+            HMI_ValueStruct.Move_E_scale = current_position.e * MINUNITMULT;
+            show_plus_or_minus(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scale);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* TemperatureID */
+void HMI_Temperature(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_temp.inc(5)) Move_Highlight(1, select_temp.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_temp.dec()) Move_Highlight(-1, select_temp.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_temp.now) {
+      case 0: // back
+        checkkey = Control;
+        select_control.set(1);
+        index_control = MROWS;
+        Draw_Control_Menu();
+        break;
+        #if HAS_HOTEND
+          case 1: // nozzle temperature
+            checkkey = ETemp;
+            HMI_ValueStruct.E_Temp = thermalManager.temp_hotend[0].target;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1), thermalManager.temp_hotend[0].target);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+        #if HAS_HEATED_BED
+          case 2: // bed temperature
+            checkkey = BedTemp;
+            HMI_ValueStruct.Bed_Temp = thermalManager.temp_bed.target;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2), thermalManager.temp_bed.target);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+        #if HAS_FAN
+          case 3: // fan speed
+            checkkey = FanSpeed;
+            HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3), thermalManager.fan_speed[0]);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+        #if HAS_HOTEND
+          case 4: // PLA preheat setting
+            checkkey = PLAPreheat;
+            select_PLA.reset();
+            HMI_ValueStruct.show_mode = -2;
+
+            Clear_Main_Window();
+
+            if (HMI_flag.language_chinese) {
+              DWIN_Frame_AreaCopy(1, 59, 16, 271 - 132, 479 - 450, 14, 8);
+
+              DWIN_Frame_AreaCopy(1, 100, 89, 124, 479 - 378, LBLX, MBASE(1));
+              DWIN_Frame_AreaCopy(1, 1, 134, 271 - 215, 479 - 333, LBLX + 24, MBASE(1)); // PLA nozzle temp
+              DWIN_Frame_AreaCopy(1, 100, 89, 124, 479 - 378, LBLX, MBASE(2));
+              DWIN_Frame_AreaCopy(1, 58, 134, 271 - 158, 479 - 333, LBLX + 24, MBASE(2)); // PLA bed temp
+              DWIN_Frame_AreaCopy(1, 100, 89, 124, 479 - 378, LBLX, MBASE(3));
+              DWIN_Frame_AreaCopy(1, 115, 134, 271 - 101, 479 - 333, LBLX + 24, MBASE(3)); // PLA fan speed
+              DWIN_Frame_AreaCopy(1, 72, 148, 271 - 120, 479 - 317, LBLX, MBASE(4)); // save PLA configuration
+            }
+            else {
+              #ifdef USE_STRING_HEADINGS
+                Draw_Title("PLA Settings"); // TODO: GET_TEXT_F
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Nozzle Temp");
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)"Bed Temp");
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)GET_TEXT_F(MSG_FAN_SPEED));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)GET_TEXT_F(MSG_STORE_EEPROM));
+              #else
+                DWIN_Frame_AreaCopy(1, 56, 16, 271 - 130, 479 - 450 - 1, 14, 8);
+                DWIN_Frame_AreaCopy(1, 157, 76, 181, 479 - 393, LBLX, MBASE(1));
+                DWIN_Frame_AreaCopy(1, 197, 104, 271 - 33, 479 - 365, LBLX + 24 + 3, MBASE(1));
+                DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 24 + 41 + 6, MBASE(1)); // PLA nozzle temp
+                DWIN_Frame_AreaCopy(1, 157, 76, 181, 479 - 393, LBLX, MBASE(2) + 3);
+                DWIN_Frame_AreaCopy(1, 240, 104, 271 - 7, 479 - 365, LBLX + 24 + 3, MBASE(2) + 3);
+                DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 24 + 24 + 6, MBASE(2) + 3); // PLA bed temp
+                DWIN_Frame_AreaCopy(1, 157, 76, 181, 479 - 393, LBLX, MBASE(3));
+                DWIN_Frame_AreaCopy(1, 0, 119, 271 - 207, 479 - 347, LBLX + 24 + 3, MBASE(3)); // PLA fan speed
+                DWIN_Frame_AreaCopy(1, 97, 165, 271 - 42, 479 - 301 - 1, LBLX, MBASE(4)); // save PLA configuration
+              #endif
+            }
+
+            Draw_Back_First();
+
+            Draw_Menu_Line(1, ICON_SetEndTemp);
+            Draw_Menu_Line(2, ICON_SetBedTemp);
+            Draw_Menu_Line(3, ICON_FanSpeed);
+            Draw_Menu_Line(4, ICON_WriteEEPROM);
+
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), ui.material_preset[0].hotend_temp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), ui.material_preset[0].bed_temp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), ui.material_preset[0].fan_speed);
+
+            break;
+
+          case 5: // ABS preheat setting
+            checkkey = ABSPreheat;
+            select_ABS.reset();
+            HMI_ValueStruct.show_mode = -3;
+
+            Clear_Main_Window();
+
+            if (HMI_flag.language_chinese) {
+              DWIN_Frame_AreaCopy(1, 142, 16, 271 - 48, 479 - 450, 14, 8);
+
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 479 - 379, LBLX, MBASE(1));
+              DWIN_Frame_AreaCopy(1, 1, 134, 271 - 215, 479 - 333, LBLX + 24, MBASE(1)); // ABS nozzle temp
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 479 - 379, LBLX, MBASE(2));
+              DWIN_Frame_AreaCopy(1, 58, 134, 271 - 158, 479 - 333, LBLX + 24, MBASE(2)); // ABS bed temp
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 479 - 379, LBLX, MBASE(3));
+              DWIN_Frame_AreaCopy(1, 115, 134, 271 - 101, 479 - 333, LBLX + 24, MBASE(3)); // ABS fan speed
+              DWIN_Frame_AreaCopy(1, 72, 148, 271 - 120, 479 - 317, LBLX, MBASE(4));
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 479 - 379, LBLX + 28, MBASE(4) + 2); // save ABS configuration
+            }
+            else {
+              #ifdef USE_STRING_HEADINGS
+                Draw_Title("ABS Settings"); // TODO: GET_TEXT_F
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Nozzle Temp");
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)"Bed Temp");
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)GET_TEXT_F(MSG_FAN_SPEED));
+                DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)GET_TEXT_F(MSG_STORE_EEPROM));
+              #else
+                DWIN_Frame_AreaCopy(1, 56, 16, 271 - 130, 479 - 450 - 1, 14, 8);
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX, MBASE(1));
+                DWIN_Frame_AreaCopy(1, 197, 104, 271 - 33, 479 - 365, LBLX + 24 + 3, MBASE(1));
+                DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 24 + 41 + 6, MBASE(1)); // ABS nozzle temp
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX, MBASE(2) + 3);
+                DWIN_Frame_AreaCopy(1, 240, 104, 271 - 7, 479 - 365, LBLX + 24 + 3, MBASE(2) + 3);
+                DWIN_Frame_AreaCopy(1, 1, 89, 271 - 188, 479 - 377 - 1, LBLX + 24 + 24 + 6, MBASE(2) + 3); // ABS bed temp
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX, MBASE(3));
+                DWIN_Frame_AreaCopy(1, 0, 119, 271 - 207, 479 - 347, LBLX + 24 + 3, MBASE(3)); // ABS fan speed
+                DWIN_Frame_AreaCopy(1, 97, 165, 271 - 42, 479 - 301 - 1, LBLX, MBASE(4));
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 479 - 393, LBLX + 33, MBASE(4));  // save ABS configuration
+              #endif
+            }
+
+            Draw_Back_First();
+
+            Draw_Menu_Line(1, ICON_SetEndTemp);
+            Draw_Menu_Line(2, ICON_SetBedTemp);
+            Draw_Menu_Line(3, ICON_FanSpeed);
+            Draw_Menu_Line(4, ICON_WriteEEPROM);
+
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(1), ui.material_preset[1].hotend_temp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(2), ui.material_preset[1].bed_temp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 3, 216, MBASE(3), ui.material_preset[1].fan_speed);
+
+            break;
+        #endif // if HAS_HOTEND
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+inline void Draw_Max_Speed_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 1, 16, 271 - 243, 479 - 451, 14, 8);
+
+    auto say_max_speed = [](const uint16_t row) {
+      DWIN_Frame_AreaCopy(1, 173, 133, 228, 479 - 332, LBLX, row);        // "Max speed"
+    };
+
+    say_max_speed(MBASE(1));                                                // "Max speed"
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 479 - 332, LBLX + 55 + 3, MBASE(1)); // X
+    say_max_speed(MBASE(2));                                                // "Max speed"
+    DWIN_Frame_AreaCopy(1, 1, 150, 271 - 264, 479 - 319, LBLX + 55 + 3, MBASE(2) + 3); // Y
+    say_max_speed(MBASE(3));                                                // "Max speed"
+    DWIN_Frame_AreaCopy(1, 9, 150, 271 - 255, 479 - 319, LBLX + 55 + 3, MBASE(3) + 3); // Z
+    say_max_speed(MBASE(4));                                                // "Max speed"
+    DWIN_Frame_AreaCopy(1, 18, 150, 271 - 246, 479 - 319, LBLX + 55 + 3, MBASE(4) + 3); // E
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title("Max Speed (mm/s)"); // TODO: GET_TEXT_F
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Max Feedrate X");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)"Max Feedrate Y");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)"Max Feedrate Z");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)"Max Feedrate E");
+    #else
+      DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
+
+      draw_max_en(MBASE(1));            // "Max"
+      DWIN_Frame_AreaCopy(1, 184, 119, 271 - 37, 479 - 347, LBLX + 24 + 3, MBASE(1)); // "Speed X"
+
+      draw_max_en(MBASE(2));            // "Max"
+      draw_speed_en(24 + 3, MBASE(2));  // "Speed"
+      say_y(24 + 40 + 6, MBASE(2));     // "Y"
+
+      draw_max_en(MBASE(3));            // "Max"
+      draw_speed_en(24 + 3, MBASE(3));  // "Speed"
+      say_z(24 + 40 + 6, MBASE(3));     // "Z"
+
+      draw_max_en(MBASE(4));            // "Max"
+      draw_speed_en(24 + 3, MBASE(4));  // "Speed"
+      say_e(24 + 40 + 6, MBASE(4));     // "E"
+    #endif
+  }
+
+  Draw_Back_First();
+  LOOP_L_N(i, 4) Draw_Menu_Line(i + 1, ICON_MaxSpeedX + i);
+
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(1), planner.settings.max_feedrate_mm_s[X_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(2), planner.settings.max_feedrate_mm_s[Y_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(3), planner.settings.max_feedrate_mm_s[Z_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(4), planner.settings.max_feedrate_mm_s[E_AXIS]);
+}
+
+inline void Draw_Max_Accel_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 1, 16, 271 - 243, 479 - 451, 14, 8);
+
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 28, 149, 271 - 202, 479 - 318, LBLX + 27, MBASE(1) + 1);
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 479 - 332, LBLX + 27 + 41 + 3, MBASE(1)); // max acceleration X
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 28, 149, 271 - 202, 479 - 318, LBLX + 27, MBASE(2) + 1);
+    DWIN_Frame_AreaCopy(1, 1, 150, 271 - 264, 479 - 319, LBLX + 27 + 41 + 3, MBASE(2) + 2); // max acceleration Y
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 28, 149, 271 - 202, 479 - 318, LBLX + 27, MBASE(3) + 1);
+    DWIN_Frame_AreaCopy(1, 9, 150, 271 - 255, 479 - 319, LBLX + 27 + 41 + 3, MBASE(3) + 2); // max acceleration Z
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(4));
+    DWIN_Frame_AreaCopy(1, 28, 149, 271 - 202, 479 - 318, LBLX + 27, MBASE(4) + 1);
+    DWIN_Frame_AreaCopy(1, 18, 150, 271 - 246, 479 - 319, LBLX + 27 + 41 + 3, MBASE(4) + 2); // max acceleration E
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_ACCELERATION));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Max Accel X");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)"Max Accel Y");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)"Max Accel Z");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)"Max Accel E");
+    #else
+      DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
+      draw_max_accel_en(MBASE(1)); say_x(24 + 78 + 6, MBASE(1)); // "Max Acceleration X"
+      draw_max_accel_en(MBASE(2)); say_y(24 + 78 + 6, MBASE(2)); // "Max Acceleration Y"
+      draw_max_accel_en(MBASE(3)); say_z(24 + 78 + 6, MBASE(3)); // "Max Acceleration Z"
+      draw_max_accel_en(MBASE(4)); say_e(24 + 78 + 6, MBASE(4)); // "Max Acceleration E"
+    #endif
+  }
+
+  Draw_Back_First();
+  LOOP_L_N(i, 4) Draw_Menu_Line(i + 1, ICON_MaxAccX + i);
+
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(1), planner.settings.max_acceleration_mm_per_s2[X_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(2), planner.settings.max_acceleration_mm_per_s2[Y_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(3), planner.settings.max_acceleration_mm_per_s2[Z_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, White, Background_black, 4, 210, MBASE(4), planner.settings.max_acceleration_mm_per_s2[E_AXIS]);
+}
+
+inline void Draw_Max_Jerk_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 1, 16, 271 - 243, 479 - 451, 14, 8);
+
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 1, 180, 271 - 243, 479 - 287, LBLX + 27, MBASE(1) + 1);
+    DWIN_Frame_AreaCopy(1, 202, 133, 228, 479 - 332, LBLX + 53, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 479 - 332, LBLX + 80 + 3, MBASE(1)); // max corner speed X
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 1, 180, 271 - 243, 479 - 287, LBLX + 27, MBASE(2) + 1);
+    DWIN_Frame_AreaCopy(1, 202, 133, 228, 479 - 332, LBLX + 53, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 1, 150, 271 - 264, 479 - 319, LBLX + 80 + 3, MBASE(2) + 3); // max corner speed Y
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 1, 180, 271 - 243, 479 - 287, LBLX + 27, MBASE(3) + 1);
+    DWIN_Frame_AreaCopy(1, 202, 133, 228, 479 - 332, LBLX + 53, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 9, 150, 271 - 255, 479 - 319, LBLX + 80 + 3, MBASE(3) + 3); // max corner speed Z
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 479 - 332, LBLX, MBASE(4));
+    DWIN_Frame_AreaCopy(1, 1, 180, 271 - 243, 479 - 287, LBLX + 27, MBASE(4) + 1);
+    DWIN_Frame_AreaCopy(1, 202, 133, 228, 479 - 332, LBLX + 53, MBASE(4));
+    DWIN_Frame_AreaCopy(1, 18, 150, 271 - 246, 479 - 319, LBLX + 80 + 3, MBASE(4) + 3); // max corner speed E
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_JERK));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Max Jerk X");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)"Max Jerk Y");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)"Max Jerk Z");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)"Max Jerk E");
+    #else
+      DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
+      draw_max_en(MBASE(1));            // "Max"
+      draw_corner_en(MBASE(1));         // "Corner"
+      draw_speed_en(66 + 6, MBASE(1));  // "Speed"
+      say_x(106 + 9, MBASE(1));         // "X"
+
+      draw_max_en(MBASE(2));            // "Max"
+      draw_corner_en(MBASE(2));         // "Corner"
+      draw_speed_en(66 + 6, MBASE(2));  // "Speed"
+      say_y(106 + 9, MBASE(2));         // "Y"
+
+      draw_max_en(MBASE(3));            // "Max"
+      draw_corner_en(MBASE(3));         // "Corner"
+      draw_speed_en(66 + 6, MBASE(3));  // "Speed"
+      say_z(106 + 9, MBASE(3));         // "Z"
+
+      draw_max_en(MBASE(4));            // "Max"
+      draw_corner_en(MBASE(4));         // "Corner"
+      draw_speed_en(66 + 6, MBASE(4));  // "Speed"
+      say_e(106 + 9, MBASE(4));         // "E"
+    #endif
+  }
+
+  Draw_Back_First();
+  LOOP_L_N(i, 4) Draw_Menu_Line(i + 1, ICON_MaxSpeedCornerX + i);
+
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
+}
+
+inline void Draw_Steps_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_flag.language_chinese) {
+    DWIN_Frame_AreaCopy(1, 1, 16, 271 - 243, 479 - 451, 14, 8);
+
+    DWIN_Frame_AreaCopy(1, 153, 148, 271 - 77, 479 - 318, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 479 - 332, LBLX + 41 + 3, MBASE(1)); // Transmission Ratio X
+    DWIN_Frame_AreaCopy(1, 153, 148, 271 - 77, 479 - 318, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 1, 150, 271 - 264, 479 - 319, LBLX + 41 + 3, MBASE(2) + 3); // Transmission Ratio Y
+    DWIN_Frame_AreaCopy(1, 153, 148, 271 - 77, 479 - 318, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 9, 150, 271 - 255, 479 - 319, LBLX + 41 + 3, MBASE(3) + 3); // Transmission Ratio Z
+    DWIN_Frame_AreaCopy(1, 153, 148, 271 - 77, 479 - 318, LBLX, MBASE(4));
+    DWIN_Frame_AreaCopy(1, 18, 150, 271 - 246, 479 - 319, LBLX + 41 + 3, MBASE(4) + 3); // Transmission Ratio E
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_STEPS_PER_MM));
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 0), (char*)"Steps/mm X");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 1), (char*)"Steps/mm Y");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 2), (char*)"Steps/mm Z");
+      DWIN_Draw_String(false, true, font8x16, White, Background_black, 60, 102 + (MLINE * 3), (char*)"Steps/mm E");
+    #else
+      DWIN_Frame_AreaCopy(1, 144, 16, 271 - 82, 479 - 453, 14, 8);
+      draw_steps_per_mm(MBASE(1)); say_x(100 + 3, MBASE(1)); // "Steps-per-mm X"
+      draw_steps_per_mm(MBASE(2)); say_y(100 + 3, MBASE(2)); // "Y"
+      draw_steps_per_mm(MBASE(3)); say_z(100 + 3, MBASE(3)); // "Z"
+      draw_steps_per_mm(MBASE(4)); say_e(100 + 3, MBASE(4)); // "E"
+    #endif
+  }
+
+  Draw_Back_First();
+  LOOP_L_N(i, 4) Draw_Menu_Line(i + 1, ICON_StepX + i);
+
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(1), planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(2), planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(3), planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Background_black, 3, 1, 210, MBASE(4), planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
+}
+
+/* Motion */
+void HMI_Motion(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_motion.inc(4)) Move_Highlight(1, select_motion.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_motion.dec()) Move_Highlight(-1, select_motion.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_motion.now) {
+      case 0: // back
+        checkkey = Control;
+        select_control.set(2);
+        index_control = MROWS;
+        Draw_Control_Menu();
+        break;
+      case 1: // max speed
+        checkkey = MaxSpeed;
+        select_speed.reset();
+        Draw_Max_Speed_Menu();
+        break;
+      case 2: // max acceleration
+        checkkey = MaxAcceleration;
+        select_acc.reset();
+        Draw_Max_Accel_Menu();
+        break;
+      case 3: // max corner speed
+        checkkey = MaxCorner;
+        select_corner.reset();
+        Draw_Max_Jerk_Menu();
+        break;
+      case 4: // transmission ratio
+        checkkey = Step;
+        select_step.reset();
+        Draw_Steps_Menu();
+        break;
+      default:
+        break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* Info */
+void HMI_Info(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+  if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    #if HAS_ONESTEP_LEVELING
+      checkkey = Control;
+      select_control.set(CONTROL_ITEMS);
+      Draw_Control_Menu();
+    #else
+      select_page.set(3);
+      Goto_MainMenu();
+    #endif
+  }
+  DWIN_UpdateLCD();
+}
+
+/* Tune */
+void HMI_Tune(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_tune.inc(6)) {
+      if (select_tune.now > MROWS && select_tune.now > index_tune) {
+        index_tune = select_tune.now;
+        Scroll_Menu(DWIN_SCROLL_UP);
+        Prepare_Item_Lang(5);
+      }
+      else {
+        Move_Highlight(1, select_tune.now + MROWS - index_tune);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_tune.dec()) {
+      if (select_tune.now < index_tune - MROWS) {
+        index_tune--;
+        Scroll_Menu(DWIN_SCROLL_DOWN);
+        if (index_tune == MROWS) Draw_Back_First();
+      }
+      else {
+        Move_Highlight(-1, select_tune.now + MROWS - index_tune);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_tune.now) {
+      case 0: { // Back
+        select_print.set(0);
+        Goto_PrintProcess();
+      }
+      break;
+      case 1: // Print speed
+        checkkey = PrintSpeed;
+        HMI_ValueStruct.print_speed = feedrate_percentage;
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1 + MROWS - index_tune), feedrate_percentage);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+        #if HAS_HOTEND
+          case 2: // Nozzle temp
+            checkkey = ETemp;
+            HMI_ValueStruct.E_Temp = thermalManager.temp_hotend[0].target;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2 + MROWS - index_tune), thermalManager.temp_hotend[0].target);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+        #if HAS_HEATED_BED
+          case 3: // Bed temp
+            checkkey = BedTemp;
+            HMI_ValueStruct.Bed_Temp = thermalManager.temp_bed.target;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3 + MROWS - index_tune), thermalManager.temp_bed.target);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+        #if HAS_FAN
+          case 4: // Fan speed
+            checkkey = FanSpeed;
+            HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(4 + MROWS - index_tune), thermalManager.fan_speed[0]);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+      case 5: // Z-offset
+        checkkey = Homeoffset;
+        HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
+        show_plus_or_minus(font8x16, Select_Color, 2, 2, 202, MBASE(5 + MROWS - index_tune), HMI_ValueStruct.offset_value);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 6: // Language
+        // Select language
+        HMI_flag.language_chinese ^= true;
+
+        Clear_Main_Window();
+
+        if (HMI_flag.language_chinese) {
+          HMI_SetAndSaveLanguageChinese();
+          DWIN_JPG_CacheTo1(Language_Chinese);
+        }
+        else {
+          HMI_SetAndSaveLanguageWestern();
+          DWIN_JPG_CacheTo1(Language_English);
+        }
+
+        Draw_Tune_Menu();
+        break;
+
+      default: break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* PLA Preheat */
+void HMI_PLAPreheatSetting(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_PLA.inc(4)) Move_Highlight(1, select_PLA.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_PLA.dec()) Move_Highlight(-1, select_PLA.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_PLA.now) {
+      case 0: // back
+        checkkey = TemperatureID;
+        select_temp.now = 4;
+        HMI_ValueStruct.show_mode = -1;
+        Draw_Temperature_Menu();
+        break;
+        #if HAS_HOTEND
+          case 1: // set nozzle temperature
+            checkkey = ETemp;
+            HMI_ValueStruct.E_Temp = ui.material_preset[0].hotend_temp;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1), ui.material_preset[0].hotend_temp);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+        #if HAS_HEATED_BED
+          case 2: // set bed temperature
+            checkkey = BedTemp;
+            HMI_ValueStruct.Bed_Temp = ui.material_preset[0].bed_temp;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2), ui.material_preset[0].bed_temp);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+        #if HAS_FAN
+          case 3: // set fan speed
+            checkkey = FanSpeed;
+            HMI_ValueStruct.Fan_speed = ui.material_preset[0].fan_speed;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3), ui.material_preset[0].fan_speed);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+      case 4: { // save PLA configuration
+        const bool success = settings.save();
+        HMI_AudioFeedback(success);
+      } break;
+      default: break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* ABS Preheat */
+void HMI_ABSPreheatSetting(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_ABS.inc(4)) Move_Highlight(1, select_ABS.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_ABS.dec()) Move_Highlight(-1, select_ABS.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_ABS.now) {
+      case 0: // back
+        checkkey = TemperatureID;
+        select_temp.now = 5;
+        HMI_ValueStruct.show_mode = -1;
+        Draw_Temperature_Menu();
+        break;
+        #if HAS_HOTEND
+          case 1: // set nozzle temperature
+            checkkey = ETemp;
+            HMI_ValueStruct.E_Temp = ui.material_preset[1].hotend_temp;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(1), ui.material_preset[1].hotend_temp);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+        #if HAS_HEATED_BED
+          case 2: // set bed temperature
+            checkkey = BedTemp;
+            HMI_ValueStruct.Bed_Temp = ui.material_preset[1].bed_temp;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(2), ui.material_preset[1].bed_temp);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+        #if HAS_FAN
+          case 3: // set fan speed
+            checkkey = FanSpeed;
+            HMI_ValueStruct.Fan_speed = ui.material_preset[1].fan_speed;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 3, 216, MBASE(3), ui.material_preset[1].fan_speed);
+            EncoderRate.encoderRateEnabled = 1;
+            break;
+        #endif
+      case 4: { // save ABS configuration
+        const bool success = settings.save();
+        HMI_AudioFeedback(success);
+      } break;
+      default:
+        break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* Max Speed */
+void HMI_MaxSpeed(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_speed.inc(4)) Move_Highlight(1, select_speed.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_speed.dec()) Move_Highlight(-1, select_speed.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_speed.now) {
+      case 0: // back
+        checkkey = Motion;
+        select_motion.now = 1;
+        Draw_Motion_Menu();
+        break;
+      case 1: // max Speed X
+        checkkey                      = MaxSpeed_value;
+        HMI_flag.feedspeed_flag       = X_AXIS;
+        HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[X_AXIS];
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 2: // max Speed Y
+        checkkey                      = MaxSpeed_value;
+        HMI_flag.feedspeed_flag       = Y_AXIS;
+        HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[Y_AXIS];
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 3: // max Speed Z
+        checkkey                      = MaxSpeed_value;
+        HMI_flag.feedspeed_flag       = Z_AXIS;
+        HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[Z_AXIS];
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 4: // max Speed E
+        checkkey                      = MaxSpeed_value;
+        HMI_flag.feedspeed_flag       = E_AXIS;
+        HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[E_AXIS];
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      default:
+        break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* Max Acceleration */
+void HMI_MaxAcceleration(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_acc.inc(4)) Move_Highlight(1, select_acc.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_acc.dec()) Move_Highlight(-1, select_acc.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_acc.now) {
+      case 0: // back
+        checkkey          = Motion;
+        select_motion.now = 2;
+        Draw_Motion_Menu();
+        break;
+      case 1: // max acceleration X
+        checkkey                         = MaxAcceleration_value;
+        HMI_flag.acc_flag                = X_AXIS;
+        HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[X_AXIS];
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 2: // max acceleration Y
+        checkkey                         = MaxAcceleration_value;
+        HMI_flag.acc_flag                = Y_AXIS;
+        HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[Y_AXIS];
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 3: // max acceleration Z
+        checkkey                         = MaxAcceleration_value;
+        HMI_flag.acc_flag                = Z_AXIS;
+        HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[Z_AXIS];
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 4: // max acceleration E
+        checkkey                         = MaxAcceleration_value;
+        HMI_flag.acc_flag                = E_AXIS;
+        HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[E_AXIS];
+        DWIN_Draw_IntValue(true, true, 0, font8x16, White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      default:
+        break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* Max Corner */
+void HMI_MaxCorner(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_corner.inc(4)) Move_Highlight(1, select_corner.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_corner.dec()) Move_Highlight(-1, select_corner.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_corner.now) {
+      case 0: // back
+        checkkey          = Motion;
+        select_motion.now = 3;
+        Draw_Motion_Menu();
+        break;
+      case 1: // max corner X
+        checkkey                   = MaxCorner_value;
+        HMI_flag.corner_flag       = X_AXIS;
+        HMI_ValueStruct.Max_Corner = planner.max_jerk[X_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_corner.now), HMI_ValueStruct.Max_Corner);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 2: // max corner Y
+        checkkey                   = MaxCorner_value;
+        HMI_flag.corner_flag       = Y_AXIS;
+        HMI_ValueStruct.Max_Corner = planner.max_jerk[Y_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_corner.now), HMI_ValueStruct.Max_Corner);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 3: // max corner Z
+        checkkey                   = MaxCorner_value;
+        HMI_flag.corner_flag       = Z_AXIS;
+        HMI_ValueStruct.Max_Corner = planner.max_jerk[Z_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_corner.now), HMI_ValueStruct.Max_Corner);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 4: // max corner E
+        checkkey                   = MaxCorner_value;
+        HMI_flag.corner_flag       = E_AXIS;
+        HMI_ValueStruct.Max_Corner = planner.max_jerk[E_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_corner.now), HMI_ValueStruct.Max_Corner);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      default:
+        break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* Step */
+void HMI_Step(void) {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_step.inc(4)) Move_Highlight(1, select_step.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_step.dec()) Move_Highlight(-1, select_step.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_step.now) {
+      case 0: // back
+        checkkey = Motion;
+        select_motion.now = 4;
+        Draw_Motion_Menu();
+        break;
+      case 1: // max step X
+        checkkey                 = Step_value;
+        HMI_flag.step_flag       = X_AXIS;
+        HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 2: // max step Y
+        checkkey                 = Step_value;
+        HMI_flag.step_flag       = Y_AXIS;
+        HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 3: // max step Z
+        checkkey                 = Step_value;
+        HMI_flag.step_flag       = Z_AXIS;
+        HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      case 4: // max step E
+        checkkey                 = Step_value;
+        HMI_flag.step_flag       = E_AXIS;
+        HMI_ValueStruct.Max_Step = planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, White, Select_Color, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step);
+        EncoderRate.encoderRateEnabled = 1;
+        break;
+      default:
+        break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+void HMI_Init(void) {
+  HMI_SDCardInit();
+
+  for (uint16_t t = 0; t <= 100; t += 2) {
+    DWIN_ICON_Show(ICON, ICON_Bar, 15, 260);
+    DWIN_Draw_Rectangle(1, Background_black, 15 + t * 242 / 100, 260, 257, 280);
+    DWIN_UpdateLCD();
+    delay(20);
+  }
+
+  HMI_SetLanguage();
+}
+
+void DWIN_Update(void) {
+  EachMomentUpdate();   // Status update
+  HMI_SDCardUpdate();   // SD card update
+  DWIN_HandleScreen();  // Rotary encoder update
+}
+
+void EachMomentUpdate(void) {
+  static millis_t next_rts_update_ms = 0;
+  const millis_t ms = millis();
+  if (PENDING(ms, next_rts_update_ms)) return;
+  next_rts_update_ms = ms + DWIN_SCROLL_UPDATE_INTERVAL;
+
+  // variable update
+  update_variable();
+
+  if (checkkey == PrintProcess) {
+    // if print done
+    if (HMI_flag.print_finish && !HMI_flag.confirm_flag) {
+      HMI_flag.print_finish = 0;
+      HMI_flag.confirm_flag = 1;
+
+      TERN_(POWER_LOSS_RECOVERY, recovery.cancel());
+
+      planner.finish_and_disable();
+
+      // show percent bar and value
+      Percentrecord = 0;
+      Draw_Print_ProgressBar();
+
+      // show print done confirm
+      DWIN_Draw_Rectangle(1, Background_black, 0, 250,  271, 360);
+      DWIN_ICON_Show(ICON, HMI_flag.language_chinese ? ICON_Confirm_C : ICON_Confirm_E, 86, 302 - 19);
+    }
+    else if (HMI_flag.pause_flag != printingIsPaused()) {
+      // print status update
+      HMI_flag.pause_flag = printingIsPaused();
+      if (HMI_flag.pause_flag) ICON_Continue(); else ICON_Pause();
+    }
+  }
+
+  // pause after homing
+  if (pause_action_flag && printingIsPaused() && !planner.has_blocks_queued()) {
+    pause_action_flag = 0;
+    #if ENABLED(PAUSE_HEAT)
+      tempbed = thermalManager.temp_bed.target;
+      temphot = thermalManager.temp_hotend[0].target;
+      thermalManager.disable_all_heaters();
+    #endif
+    queue.inject_P(PSTR("G1 F1200 X0 Y0"));
+  }
+
+  if (card.isPrinting() && checkkey == PrintProcess) { // print process
+    const uint8_t card_pct = card.percentDone();
+    static uint8_t last_cardpercentValue = 101;
+    if (last_cardpercentValue != card_pct) { // print percent
+      last_cardpercentValue = card_pct;
+      if (card_pct) {
+        Percentrecord = card_pct;
+        Draw_Print_ProgressBar();
+      }
+    }
+
+    duration_t elapsed = print_job_timer.duration(); // print timer
+    /* already print time */
+    const uint16_t min = (elapsed.value % 3600) / 60;
+    if (last_Printtime != min) { // 1 minute update
+      last_Printtime = min;
+      Draw_Print_ProgressElapsed();
+    }
+    /* remain print time */
+    static millis_t next_remain_time_update = 0;
+    if (elapsed.minute() > 5 && ELAPSED(ms, next_remain_time_update) && HMI_flag.heat_flag == 0) { // show after 5 min and 20s update
+      remain_time = ((elapsed.value - dwin_heat_time) * ((float)card.getFileSize() / (float)card.getIndex())) - (elapsed.value - dwin_heat_time);
+      next_remain_time_update += 20 * 1000UL;
+      Draw_Print_ProgressRemain();
+    }
+  }
+  else if (abort_flag && !HMI_flag.home_flag) { // Print Stop
+    abort_flag = 0;
+    HMI_ValueStruct.print_speed = feedrate_percentage = 100;
+    zprobe_zoffset = TERN(HAS_BED_PROBE, probe.offset.z, 0);
+
+    planner.finish_and_disable();
+
+    #if DISABLED(SD_ABORT_NO_COOLDOWN)
+      thermalManager.disable_all_heaters();
+    #endif
+
+    select_page.set(0);
+    Goto_MainMenu();
+  }
+  else if (DWIN_lcd_sd_status && recovery.dwin_flag) { // resume print before power off
+    recovery.dwin_flag = false;
+
+    recovery.load();
+    if (!recovery.valid()) return recovery.purge();
+
+    auto draw_first_option = [](const bool sel) {
+      const uint16_t c1 = sel ? Background_window : Select_Color;
+      DWIN_Draw_Rectangle(0, c1, 25, 306, 126, 345);
+      DWIN_Draw_Rectangle(0, c1, 24, 305, 127, 346);
+    };
+
+    auto update_selection = [&](const bool sel) {
+      HMI_flag.select_flag = sel;
+      draw_first_option(sel);
+      const uint16_t c2 = sel ? Select_Color : Background_window;
+      DWIN_Draw_Rectangle(0, c2, 145, 306, 246, 345);
+      DWIN_Draw_Rectangle(0, c2, 144, 305, 247, 346);
+    };
+
+    const uint16_t fileCnt = card.get_num_Files();
+    for (uint16_t i = 0; i < fileCnt; i++) {
+      // TODO: Resume print via M1000 then update the UI
+      // with the active filename which can come from CardReader.
+      card.getfilename_sorted(SD_ORDER(i, fileCnt));
+      if (!strcmp(card.filename, &recovery.info.sd_filename[1])) { // Resume print before power failure while have the same file
+        recovery_flag = 1;
+        HMI_flag.select_flag = 1;
+        Popup_Window_Resume();
+        draw_first_option(false);
+        char * const name = card.longest_filename();
+        const int8_t npos = _MAX(0, DWIN_WIDTH - strlen(name) * (MENU_CHR_W)) / 2;
+        DWIN_Draw_String(false, true, font8x16, Font_window, Background_window, npos, 252, name);
+        DWIN_UpdateLCD();
+        break;
+      }
+    }
+
+    // if hasn't resumable G-code file
+    if (!recovery_flag) return;
+
+    while (recovery_flag) {
+      ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+      if (encoder_diffState != ENCODER_DIFF_NO) {
+        if (encoder_diffState == ENCODER_DIFF_ENTER) {
+          recovery_flag = 0;
+          if (HMI_flag.select_flag) break;
+          TERN_(POWER_LOSS_RECOVERY, recovery.cancel());
+          HMI_StartFrame(true);
+          return;
+        }
+        else
+          update_selection(encoder_diffState == ENCODER_DIFF_CCW);
+
+        DWIN_UpdateLCD();
+      }
+    }
+
+    select_print.set(0);
+    HMI_ValueStruct.show_mode = 0;
+    HMI_StartFrame(false);
+    recovery.resume();
+    return;
+  }
+  DWIN_UpdateLCD();
+}
+
+void DWIN_HandleScreen(void) {
+  switch (checkkey) {
+    case MainMenu:              HMI_MainMenu(); break;
+    case SelectFile:            HMI_SelectFile(); break;
+    case Prepare:               HMI_Prepare(); break;
+    case Control:               HMI_Control(); break;
+    case Leveling:              break;
+    case PrintProcess:          HMI_Printing(); break;
+    case Print_window:          HMI_PauseOrStop(); break;
+    case AxisMove:              HMI_AxisMove(); break;
+    case TemperatureID:         HMI_Temperature(); break;
+    case Motion:                HMI_Motion(); break;
+    case Info:                  HMI_Info(); break;
+    case Tune:                  HMI_Tune(); break;
+    case PLAPreheat:            HMI_PLAPreheatSetting(); break;
+    case ABSPreheat:            HMI_ABSPreheatSetting(); break;
+    case MaxSpeed:              HMI_MaxSpeed(); break;
+    case MaxAcceleration:       HMI_MaxAcceleration(); break;
+    case MaxCorner:             HMI_MaxCorner(); break;
+    case Step:                  HMI_Step(); break;
+    case Move_X:                HMI_Move_X(); break;
+    case Move_Y:                HMI_Move_Y(); break;
+    case Move_Z:                HMI_Move_Z(); break;
+    #if HAS_HOTEND
+      case Extruder:            HMI_Move_E(); break;
+      case ETemp:               HMI_ETemp(); break;
+    #endif
+    case Homeoffset:            HMI_Zoffset(); break;
+    #if HAS_HEATED_BED
+      case BedTemp:             HMI_BedTemp(); break;
+    #endif
+    #if HAS_FAN
+      case FanSpeed:            HMI_FanSpeed(); break;
+    #endif
+    case PrintSpeed:            HMI_PrintSpeed(); break;
+    case MaxSpeed_value:        HMI_MaxFeedspeedXYZE(); break;
+    case MaxAcceleration_value: HMI_MaxAccelerationXYZE(); break;
+    case MaxCorner_value:       HMI_MaxCornerXYZE(); break;
+    case Step_value:            HMI_StepXYZE(); break;
+    default: break;
+  }
+}
+
+void DWIN_CompletedHoming(void) {
+  HMI_flag.home_flag = false;
+  if (checkkey == Last_Prepare) {
+    checkkey = Prepare;
+    select_prepare.now = 3;
+    index_prepare = MROWS;
+    Draw_Prepare_Menu();
+  }
+  else if (checkkey == Back_Main) {
+    HMI_ValueStruct.print_speed = feedrate_percentage = 100;
+    zprobe_zoffset = TERN0(BLTOUCH, probe.offset.z);
+    planner.finish_and_disable();
+    Goto_MainMenu();
+  }
+}
+
+void DWIN_CompletedLeveling(void) {
+  if (checkkey == Leveling) Goto_MainMenu();
+}
+
+#endif // DWIN_CREALITY_LCD
