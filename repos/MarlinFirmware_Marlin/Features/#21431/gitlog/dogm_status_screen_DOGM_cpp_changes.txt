commit 7dc7195696bde1405ba8b78b18233712bf72573b
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Sat Apr 6 21:17:00 2024 -0700

    🩹 Fix active extruder indicator (#26834)
    
    * 🩹 No active extruder when any of several incompatible features are enabled

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 24165019b4..747e462b1d 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -323,7 +323,7 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
 
       } // PAGE_CONTAINS
 
-      #if HAS_MULTI_EXTRUDER && DISABLED(SLIM_LCD_MENUS)
+      #if HAS_MULTI_EXTRUDER && NONE(SLIM_LCD_MENUS, STATUS_HOTEND_NUMBERLESS, SINGLENOZZLE)
         if (active_extruder == heater_id)
           u8g.drawBitmapP(_MAX(0, STATUS_HOTEND_X(heater_id) - 6), STATUS_HEATERS_Y + 3, 1, 5, status_active_extruder_indicator_bmp);
       #endif

commit 5639237e2b174715413f9ffc6f6421db9150d9d6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jan 29 20:38:03 2024 -0600

    🎨 Misc. cleanup 29-01

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 5d1a3363fb..24165019b4 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -376,7 +376,6 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
 
       #define BAR_TALL (STATUS_HEATERS_HEIGHT - 2)
 
-
       // Draw a heating progress bar, if specified
       #if ANY(STATUS_HEAT_PERCENT, STATUS_HEAT_POWER)
         uint8_t tall = 0;

commit f1a53407e7c99559f9073f11ab91e7b305ec7770
Author: Anson Liu <ansonl@users.noreply.github.com>
Date:   Tue Jan 23 08:24:49 2024 -0800

    🚸 DOGM active extruder indicator (#26152)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 636d10bbe9..5d1a3363fb 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -323,6 +323,11 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
 
       } // PAGE_CONTAINS
 
+      #if HAS_MULTI_EXTRUDER && DISABLED(SLIM_LCD_MENUS)
+        if (active_extruder == heater_id)
+          u8g.drawBitmapP(_MAX(0, STATUS_HOTEND_X(heater_id) - 6), STATUS_HEATERS_Y + 3, 1, 5, status_active_extruder_indicator_bmp);
+      #endif
+
     #endif // !STATUS_COMBINE_HEATERS
 
     if (PAGE_UNDER(7)) {

commit 7d751a20b1fc6ef920cbc56a68450302ac1eb973
Author: German Borisov <Borisov.German@gmail.com>
Date:   Fri Jan 19 22:17:36 2024 +0300

    ✨ Status Screen flow adjustment (#26627)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index e294d9c3df..636d10bbe9 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -888,7 +888,12 @@ void MarlinUI::draw_status_screen() {
     lcd_put_lchar(3, EXTRAS_2_BASELINE, LCD_STR_FEEDRATE[0]);
 
     set_font(FONT_STATUSMENU);
-    lcd_put_u8str(12, EXTRAS_2_BASELINE, i16tostr3rj(feedrate_percentage));
+
+    #if ENABLED(ULTIPANEL_FLOWPERCENT)
+      lcd_put_u8str(12, EXTRAS_2_BASELINE, i16tostr3rj(planner.flow_percentage[active_extruder]));
+    #else
+      lcd_put_u8str(12, EXTRAS_2_BASELINE, i16tostr3rj(feedrate_percentage));
+    #endif
     lcd_put_u8str(F("%"));
 
     //

commit bb557e5195a6177bc7386fce0176274aede60b64
Author: Dennis <16547088+soligen2010@users.noreply.github.com>
Date:   Sun Dec 24 22:40:20 2023 -0500

    🩹 Fix string buffer warning (#26550)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index ad9e382661..e294d9c3df 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -479,16 +479,16 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 // Prepare strings for progress display
 #if ANY(HAS_EXTRA_PROGRESS, HAS_PRINT_PROGRESS)
   static MarlinUI::progress_t progress = 0;
-  static MString<12> progressString;
+  static MString<13> progressString;
 #endif
 
 #if HAS_EXTRA_PROGRESS
 
   #if HAS_TIME_DISPLAY
     static void prepare_time_string(const duration_t &time, char prefix) {
-      char str[10];
+      char str[13];
       const uint8_t time_len = time.toDigital(str, time.value >= 60*60*24L);  // 5 to 8 chars
-      progressString.set(prefix, ':', spaces_t(10 - time_len), str);                 // 2 to 5 spaces
+      progressString.set(prefix, ':', spaces_t(10 - time_len), str);          // 2 to 5 spaces
     }
   #endif
   #if ENABLED(SHOW_PROGRESS_PERCENT)

commit 473817f2f4758924c56351a3672354a141834929
Author: mikemerryguy <57319047+mikemerryguy@users.noreply.github.com>
Date:   Sat Dec 9 02:38:31 2023 -0500

    🚸 Adjust Progress / Completion (#26466)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index d38d28c8cd..ad9e382661 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -91,6 +91,18 @@
 #define EXTRAS_BASELINE (40 + INFO_FONT_ASCENT)
 #define STATUS_BASELINE (LCD_PIXEL_HEIGHT - INFO_FONT_DESCENT)
 
+#define PCENTERED           // Center percent value over progress bar, else right-align
+#define PROGRESS_BAR_X      TERN(PCENTERED, 54, 40)
+#define PROGRESS_BAR_Y      (EXTRAS_BASELINE + TERN(PCENTERED, 1, -3))
+#define PCT_X               TERN(PCENTERED, PROGRESS_BAR_X, LCD_PIXEL_WIDTH - TERN(PRINT_PROGRESS_SHOW_DECIMALS, 5, 4) * INFO_FONT_WIDTH)
+#define PCT_Y               (EXTRAS_BASELINE + TERN(PCENTERED, 0, 3))
+#define PROGRESS_BAR_WIDTH  TERN(PCENTERED, LCD_PIXEL_WIDTH - PROGRESS_BAR_X, PCT_X - PROGRESS_BAR_X - 1)
+#define PROGRESS_BAR_HEIGHT TERN(PCENTERED, 4, 5)
+
+#if DISABLED(PCENTERED) && HAS_TIME_DISPLAY
+  #error "PCENTERED is required for extra progress display options."
+#endif
+
 #if ANIM_HBCC
   enum HeatBits : uint8_t {
     DRAWBIT_HOTEND,
@@ -188,10 +200,6 @@
   }
 #endif
 
-#define PROGRESS_BAR_X 54
-#define PROGRESS_BAR_Y (EXTRAS_BASELINE + 1)
-#define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
-
 FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, const uint8_t ty) {
   const char *str;
   uint8_t len;
@@ -471,46 +479,44 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 // Prepare strings for progress display
 #if ANY(HAS_EXTRA_PROGRESS, HAS_PRINT_PROGRESS)
   static MarlinUI::progress_t progress = 0;
-  static char bufferc[13];
+  static MString<12> progressString;
 #endif
 
 #if HAS_EXTRA_PROGRESS
 
-  static void prepare_time_string(const duration_t &time, char prefix) {
-    char str[13];
-    memset(&bufferc[2], 0x20, 5); // partialy fill with spaces to avoid artifacts and terminator
-    bufferc[0] = prefix;
-    bufferc[1] = ':';
-    int str_length = time.toDigital(str, time.value >= 60*60*24L);
-    strcpy(&bufferc[sizeof(bufferc) - str_length - 1], str);
-  }
-
+  #if HAS_TIME_DISPLAY
+    static void prepare_time_string(const duration_t &time, char prefix) {
+      char str[10];
+      const uint8_t time_len = time.toDigital(str, time.value >= 60*60*24L);  // 5 to 8 chars
+      progressString.set(prefix, ':', spaces_t(10 - time_len), str);                 // 2 to 5 spaces
+    }
+  #endif
   #if ENABLED(SHOW_PROGRESS_PERCENT)
     void MarlinUI::drawPercent() {
-      if (progress != 0) {
-        #define PCENTERED 1  // center percent value over progress bar, else align to the right
-        #define PPOS TERN(PCENTERED, 4, 0)
-        #define PLEN TERN(PRINT_PROGRESS_SHOW_DECIMALS, 4, 3)
-        memset(&bufferc, 0x20, 12);
-        memcpy(&bufferc[PPOS], TERN(PRINT_PROGRESS_SHOW_DECIMALS, permyriadtostr4(progress), ui8tostr3rj(progress / (PROGRESS_SCALE))), PLEN);
-        bufferc[PPOS+PLEN] = '%';
-      }
+      if (progress == 0) return;
+      progressString.set(
+        OPTITEM(PCENTERED, spaces_t(4))
+        TERN(PRINT_PROGRESS_SHOW_DECIMALS, permyriadtostr4(progress), ui8tostr3rj(progress / (PROGRESS_SCALE))), '%'
+      );
     }
   #endif
   #if ENABLED(SHOW_REMAINING_TIME)
     void MarlinUI::drawRemain() {
       if (printJobOngoing() && get_remaining_time() != 0)
-        prepare_time_string(get_remaining_time(), 'R'); }
+        prepare_time_string(get_remaining_time(), 'R');
+    }
   #endif
   #if ENABLED(SHOW_INTERACTION_TIME)
     void MarlinUI::drawInter() {
       if (printingIsActive() && interaction_time)
-        prepare_time_string(interaction_time, 'C'); }
+        prepare_time_string(interaction_time, 'C');
+    }
   #endif
   #if ENABLED(SHOW_ELAPSED_TIME)
     void MarlinUI::drawElapsed() {
       if (printJobOngoing())
-        prepare_time_string(print_job_timer.duration(), 'E'); }
+        prepare_time_string(print_job_timer.duration(), 'E');
+    }
   #endif
 
 #endif // HAS_EXTRA_PROGRESS
@@ -779,17 +785,17 @@ void MarlinUI::draw_status_screen() {
 
   #if HAS_PRINT_PROGRESS
     // Progress bar frame
-    if (PAGE_CONTAINS(PROGRESS_BAR_Y, PROGRESS_BAR_Y + 3))
-      u8g.drawFrame(PROGRESS_BAR_X, PROGRESS_BAR_Y, PROGRESS_BAR_WIDTH, 4);
+    if (PAGE_CONTAINS(PROGRESS_BAR_Y, PROGRESS_BAR_Y + PROGRESS_BAR_HEIGHT - 1))
+      u8g.drawFrame(PROGRESS_BAR_X, PROGRESS_BAR_Y, PROGRESS_BAR_WIDTH, PROGRESS_BAR_HEIGHT);
 
     // Progress bar solid part
-    if (PAGE_CONTAINS(PROGRESS_BAR_Y + 1, PROGRESS_BAR_Y + 2))
-      u8g.drawBox(PROGRESS_BAR_X + 1, PROGRESS_BAR_Y + 1, progress_bar_solid_width, 2);
+    if (PAGE_CONTAINS(PROGRESS_BAR_Y + 1, PROGRESS_BAR_Y + PROGRESS_BAR_HEIGHT - 3))
+      u8g.drawBox(PROGRESS_BAR_X + 1, PROGRESS_BAR_Y + 1, progress_bar_solid_width, PROGRESS_BAR_HEIGHT - 2);
 
     // Progress strings
-    if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)) {
+    if (PAGE_CONTAINS(PCT_Y - INFO_FONT_ASCENT, PCT_Y - 1)) {
       ui.rotate_progress();
-      lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, bufferc);
+      lcd_put_u8str(PCT_X, PCT_Y, progressString);
     }
   #endif
 

commit 4e31fa66e2f402ac574ec4afa52447824444d90d
Author: Dmitry Pogrebnyak <aterlux@mail.ru>
Date:   Fri Aug 4 22:59:17 2023 +0300

    ✨ STATUS_HEAT_POWER (#25268)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 2067a8428d..d38d28c8cd 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -247,14 +247,13 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
     const celsius_t temp = thermalManager.wholeDegHotend(heater_id),
                   target = thermalManager.degTargetHotend(heater_id);
 
-    #if DISABLED(STATUS_HOTEND_ANIM)
-      #define STATIC_HOTEND true
-      #define HOTEND_DOT    isHeat
-    #else
-      #define STATIC_HOTEND false
-      #define HOTEND_DOT    false
+    #if ENABLED(STATUS_HEAT_POWER)
+      const uint16_t power = thermalManager.getHeaterPower(heater_id);
     #endif
 
+    #define STATIC_HOTEND DISABLED(STATUS_HOTEND_ANIM)
+    #define HOTEND_DOT TERN(STATUS_HOTEND_ANIM, false, isHeat)
+
     #if ENABLED(STATUS_HOTEND_NUMBERLESS)
       #define OFF_BMP(N) TERN(STATUS_HOTEND_INVERTED, status_hotend_b_bmp, status_hotend_a_bmp)
       #define ON_BMP(N)  TERN(STATUS_HOTEND_INVERTED, status_hotend_a_bmp, status_hotend_b_bmp)
@@ -285,23 +284,34 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
 
         #define BAR_TALL (STATUS_HEATERS_HEIGHT - 2)
 
-        const float prop = target - 20,
-                    perc = prop > 0 && temp >= 20 ? (temp - 20) / prop : 0;
-        uint8_t tall = uint8_t(perc * BAR_TALL + 0.5f);
-        NOMORE(tall, BAR_TALL);
-
         // Draw hotend bitmap, either whole or split by the heating percent
         const uint8_t hx = STATUS_HOTEND_X(heater_id),
                       bw = STATUS_HOTEND_BYTEWIDTH(heater_id);
-        #if ENABLED(STATUS_HEAT_PERCENT)
-          if (isHeat && tall <= BAR_TALL) {
+        #if ANY(STATUS_HEAT_PERCENT, STATUS_HEAT_POWER)
+          uint8_t tall = 0;
+          #if ENABLED(STATUS_HEAT_POWER)
+            // Rounded int. At least 1 pixel tall on minimal PWM.
+            tall = power ? (power >= 127 ? BAR_TALL : (uint16_t((uint8_t(power) * BAR_TALL) + 127U) / 128U)) : 0;
+          #elif ENABLED(STATUS_HEAT_PERCENT)
+            const float prop = target - 20,
+                        perc = prop > 0 && temp >= 20 ? (temp - 20) / prop : 0;
+            tall = uint8_t(perc * BAR_TALL + 0.5f);
+          #endif
+
+          NOMORE(tall, BAR_TALL);
+
+          const bool draw_partial = isHeat && tall < BAR_TALL;
+          if (draw_partial) {
             const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
             u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, ph, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), false));
             u8g.drawBitmapP(hx, STATUS_HEATERS_Y + ph, bw, tall + 1, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), true) + ph * bw);
           }
-          else
+        #else
+          constexpr bool draw_partial = false;
         #endif
-            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), isHeat));
+
+        if (!draw_partial)
+          u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), isHeat));
 
       } // PAGE_CONTAINS
 
@@ -342,29 +352,31 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
     const celsius_t temp = thermalManager.wholeDegBed(),
                   target = thermalManager.degTargetBed();
 
-    #if ENABLED(STATUS_HEAT_PERCENT) || DISABLED(STATUS_BED_ANIM)
+    #if ANY(STATUS_HEAT_PERCENT, STATUS_HEAT_POWER) || DISABLED(STATUS_BED_ANIM)
       const bool isHeat = BED_ALT();
     #endif
 
-    #if DISABLED(STATUS_BED_ANIM)
-      #define STATIC_BED    true
-      #define BED_DOT       isHeat
-    #else
-      #define STATIC_BED    false
-      #define BED_DOT       false
-    #endif
+    #define STATIC_BED DISABLED(STATUS_BED_ANIM)
+    #define BED_DOT TERN(STATUS_BED_ANIM, false, isHeat)
 
     if (PAGE_CONTAINS(STATUS_HEATERS_Y, STATUS_HEATERS_BOT)) {
 
       #define BAR_TALL (STATUS_HEATERS_HEIGHT - 2)
 
-      const float prop = target - 20,
-                  perc = prop > 0 && temp >= 20 ? (temp - 20) / prop : 0;
-      uint8_t tall = uint8_t(perc * BAR_TALL + 0.5f);
-      NOMORE(tall, BAR_TALL);
 
       // Draw a heating progress bar, if specified
-      #if ENABLED(STATUS_HEAT_PERCENT)
+      #if ANY(STATUS_HEAT_PERCENT, STATUS_HEAT_POWER)
+        uint8_t tall = 0;
+        #if ENABLED(STATUS_HEAT_POWER)
+          const uint16_t power = thermalManager.getHeaterPower(H_BED);
+          tall = power ? (power >= 127) ? BAR_TALL : uint16_t((uint8_t(power) * BAR_TALL) + 127U) / 128U : 0;
+        #elif ENABLED(STATUS_HEAT_PERCENT)
+          const float prop = target - 20,
+                      perc = prop > 0 && temp >= 20 ? (temp - 20) / prop : 0;
+          tall = uint8_t(perc * BAR_TALL + 0.5f);
+        #endif
+
+        NOMORE(tall, BAR_TALL);
 
         if (isHeat) {
           const uint8_t bx = STATUS_BED_X + STATUS_BED_WIDTH;
@@ -538,9 +550,11 @@ void MarlinUI::draw_status_screen() {
     #if ANIM_HBCC
       uint8_t new_bits = 0;
       #if ANIM_HOTEND
-        HOTEND_LOOP() if (thermalManager.isHeatingHotend(e)) SBI(new_bits, DRAWBIT_HOTEND + e);
+        HOTEND_LOOP() if (thermalManager.TERN(STATUS_HEAT_POWER, getHeaterPower(heater_id_t(e)), isHeatingHotend(e))) SBI(new_bits, DRAWBIT_HOTEND + e);
+      #endif
+      #if ANIM_BED
+        if (TERN(STATUS_HEAT_POWER, (thermalManager.degTargetBed() || thermalManager.getHeaterPower(H_BED)), thermalManager.isHeatingBed())) SBI(new_bits, DRAWBIT_BED);
       #endif
-      if (TERN0(ANIM_BED, thermalManager.isHeatingBed())) SBI(new_bits, DRAWBIT_BED);
       #if DO_DRAW_CHAMBER && HAS_HEATED_CHAMBER
         if (thermalManager.isHeatingChamber()) SBI(new_bits, DRAWBIT_CHAMBER);
       #endif

commit a0e3dea8b879aba8e0d2d7e4dc6a6447b3fe76ad
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jul 20 20:25:39 2023 -0500

    🚸 ColorUI Touch Calibrate in CW order

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 5bce83849f..2067a8428d 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -773,7 +773,7 @@ void MarlinUI::draw_status_screen() {
       u8g.drawBox(PROGRESS_BAR_X + 1, PROGRESS_BAR_Y + 1, progress_bar_solid_width, 2);
 
     // Progress strings
-    if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)){
+    if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)) {
       ui.rotate_progress();
       lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, bufferc);
     }

commit 574dd34c49fde76e1e736b8a7e1ea579d724ff22
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jun 27 13:19:36 2023 -0500

    ♻️ String helper class (#24390)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 12cee1fc80..5bce83849f 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -915,7 +915,7 @@ void MarlinUI::draw_status_message(const bool blink) {
 
   // Get the UTF8 character count of the string
   uint8_t lcd_width = LCD_WIDTH, pixel_width = LCD_PIXEL_WIDTH,
-          slen = utf8_strlen(status_message);
+          slen = status_message.glyphs();
 
   #if HAS_POWER_MONITOR
     if (power_monitor.display_enabled()) {

commit 86c811660ebf0b3fcbae2f34273d4c9d0c22abc4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:30:34 2023 -0500

    🧑‍💻 Remove LOOP macros (#25917)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 61181f9a00..12cee1fc80 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -672,7 +672,7 @@ void MarlinUI::draw_status_screen() {
   if (PAGE_UNDER(6 + 1 + 12 + 1 + 6 + 1)) {
     // Extruders
     #if DO_DRAW_HOTENDS
-      LOOP_L_N(e, MAX_HOTEND_DRAW) _draw_hotend_status((heater_id_t)e, blink);
+      for (uint8_t e = 0; e < MAX_HOTEND_DRAW; ++e) _draw_hotend_status((heater_id_t)e, blink);
     #endif
 
     // Laser / Spindle

commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    🧑‍💻 Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 7d1f090d1e..61181f9a00 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -55,7 +55,7 @@
   #include "../../feature/spindle_laser.h"
 #endif
 
-#if EITHER(HAS_COOLER, LASER_COOLANT_FLOW_METER)
+#if ANY(HAS_COOLER, LASER_COOLANT_FLOW_METER)
   #include "../../feature/cooler.h"
 #endif
 
@@ -127,7 +127,7 @@
   #define MAX_HOTEND_DRAW _MIN(HOTENDS, ((LCD_PIXEL_WIDTH - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
 #endif
 
-#if EITHER(DO_DRAW_BED, DO_DRAW_HOTENDS)
+#if ANY(DO_DRAW_BED, DO_DRAW_HOTENDS)
   #define STATUS_HEATERS_BOT (STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)
 #endif
 
@@ -457,7 +457,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 }
 
 // Prepare strings for progress display
-#if EITHER(HAS_EXTRA_PROGRESS, HAS_PRINT_PROGRESS)
+#if ANY(HAS_EXTRA_PROGRESS, HAS_PRINT_PROGRESS)
   static MarlinUI::progress_t progress = 0;
   static char bufferc[13];
 #endif
@@ -512,7 +512,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 void MarlinUI::draw_status_screen() {
   #if NUM_AXES
     constexpr int xystorage = TERN(INCH_MODE_SUPPORT, 8, 5);
-    #if EITHER(HAS_X_AXIS, LCD_SHOW_E_TOTAL)
+    #if ANY(HAS_X_AXIS, LCD_SHOW_E_TOTAL)
       static char xstring[TERN(LCD_SHOW_E_TOTAL, 12, xystorage)];
     #endif
     #if HAS_Y_AXIS
@@ -612,7 +612,7 @@ void MarlinUI::draw_status_screen() {
 
   #if DO_DRAW_BED && DISABLED(STATUS_COMBINE_HEATERS)
     #if ANIM_BED
-      #if BOTH(HAS_LEVELING, STATUS_ALT_BED_BITMAP)
+      #if ALL(HAS_LEVELING, STATUS_ALT_BED_BITMAP)
         #define BED_BITMAP(S) ((S) \
           ? (planner.leveling_active ? status_bed_leveled_on_bmp : status_bed_on_bmp) \
           : (planner.leveling_active ? status_bed_leveled_bmp : status_bed_bmp))
@@ -783,7 +783,7 @@ void MarlinUI::draw_status_screen() {
   // XYZ Coordinates
   //
 
-  #if EITHER(XYZ_NO_FRAME, XYZ_HOLLOW_FRAME)
+  #if ANY(XYZ_NO_FRAME, XYZ_HOLLOW_FRAME)
     #define XYZ_FRAME_TOP 29
     #define XYZ_FRAME_HEIGHT INFO_FONT_ASCENT + 3
   #else
@@ -890,7 +890,7 @@ void MarlinUI::draw_status_screen() {
   if (PAGE_CONTAINS(STATUS_BASELINE - INFO_FONT_ASCENT, STATUS_BASELINE + INFO_FONT_DESCENT)) {
     lcd_moveto(0, STATUS_BASELINE);
 
-    #if BOTH(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
+    #if ALL(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
       // Alternate Status message and Filament display
       if (ELAPSED(millis(), next_filament_display)) {
         lcd_put_u8str(F(LCD_STR_FILAM_DIA));

commit 1f9bfc5c7491d802d242623f8253b1f52c0917a3
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Wed May 10 06:59:25 2023 +1200

    🚸 Optional X-Axis (#25418)
    
    Co-authored-by: alextrical <35117191+alextrical@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index cb3515a694..7d1f090d1e 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -510,20 +510,24 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
  * Use the PAGE_CONTAINS macros to avoid pointless draw calls.
  */
 void MarlinUI::draw_status_screen() {
-  constexpr int xystorage = TERN(INCH_MODE_SUPPORT, 8, 5);
-  static char xstring[TERN(LCD_SHOW_E_TOTAL, 12, xystorage)];
-  #if HAS_Y_AXIS
-    static char ystring[xystorage];
-  #endif
-  #if HAS_Z_AXIS
-    static char zstring[8];
+  #if NUM_AXES
+    constexpr int xystorage = TERN(INCH_MODE_SUPPORT, 8, 5);
+    #if EITHER(HAS_X_AXIS, LCD_SHOW_E_TOTAL)
+      static char xstring[TERN(LCD_SHOW_E_TOTAL, 12, xystorage)];
+    #endif
+    #if HAS_Y_AXIS
+      static char ystring[xystorage];
+    #endif
+    #if HAS_Z_AXIS
+      static char zstring[8];
+    #endif
   #endif
 
   #if ENABLED(FILAMENT_LCD_DISPLAY)
     static char wstring[5], mstring[4];
   #endif
 
-  const bool show_e_total = TERN0(LCD_SHOW_E_TOTAL, printingIsActive());
+  const bool show_e_total = TERN1(HAS_X_AXIS, TERN0(LCD_SHOW_E_TOTAL, printingIsActive()));
 
   #if HAS_PRINT_PROGRESS
     static u8g_uint_t progress_bar_solid_width = 0;
@@ -544,10 +548,9 @@ void MarlinUI::draw_status_screen() {
       draw_bits = new_bits;
     #endif
 
-    const xyz_pos_t lpos = current_position.asLogical();
-    const bool is_inch = parser.using_inch_units();
-    #if HAS_Z_AXIS
-      strcpy(zstring, is_inch ? ftostr42_52(LINEAR_UNIT(lpos.z)) : ftostr52sp(lpos.z));
+    #if NUM_AXES
+      const xyz_pos_t lpos = current_position.asLogical();
+      const bool is_inch = parser.using_inch_units();
     #endif
 
     if (show_e_total) {
@@ -557,10 +560,12 @@ void MarlinUI::draw_status_screen() {
       #endif
     }
     else {
-      strcpy(xstring, is_inch ? ftostr53_63(LINEAR_UNIT(lpos.x)) : ftostr4sign(lpos.x));
+      TERN_(HAS_X_AXIS, strcpy(xstring, is_inch ? ftostr53_63(LINEAR_UNIT(lpos.x)) : ftostr4sign(lpos.x)));
       TERN_(HAS_Y_AXIS, strcpy(ystring, is_inch ? ftostr53_63(LINEAR_UNIT(lpos.y)) : ftostr4sign(lpos.y)));
     }
 
+    TERN_(HAS_Z_AXIS, strcpy(zstring, is_inch ? ftostr42_52(LINEAR_UNIT(lpos.z)) : ftostr52sp(lpos.z)));
+
     #if ENABLED(FILAMENT_LCD_DISPLAY)
       strcpy(wstring, ftostr12ns(filwidth.measured_mm));
       strcpy(mstring, i16tostr3rj(planner.volumetric_percent(parser.volumetric_enabled)));
@@ -839,15 +844,13 @@ void MarlinUI::draw_status_screen() {
           #endif
         }
         else {
-          _draw_axis_value(X_AXIS, xstring, blink);
+          TERN_(HAS_X_AXIS, _draw_axis_value(X_AXIS, xstring, blink));
           TERN_(HAS_Y_AXIS, _draw_axis_value(Y_AXIS, ystring, blink));
         }
 
       #endif
 
-      #if HAS_Z_AXIS
-        _draw_axis_value(Z_AXIS, zstring, blink);
-      #endif
+      TERN_(HAS_Z_AXIS, _draw_axis_value(Z_AXIS, zstring, blink));
 
       #if NONE(XYZ_NO_FRAME, XYZ_HOLLOW_FRAME)
         u8g.setColorIndex(1); // black on white

commit 5664c02d077e028f84a24efd96c2eebe97ce8763
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 22:43:09 2023 -0500

    🧑‍💻 Generalize SDSUPPORT as HAS_MEDIA
    
    In preparation for single- and multi-volume refactoring.

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 22e71251ff..cb3515a694 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -67,7 +67,7 @@
   #include "../../feature/power_monitor.h"
 #endif
 
-#if ENABLED(SDSUPPORT)
+#if HAS_MEDIA
   #include "../../sd/cardreader.h"
 #endif
 
@@ -742,7 +742,7 @@ void MarlinUI::draw_status_screen() {
     #endif
   }
 
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     //
     // SD Card Symbol
     //
@@ -756,7 +756,7 @@ void MarlinUI::draw_status_screen() {
       // Corner pixel
       u8g.drawPixel(50, 43);         // 43 (or 42)
     }
-  #endif // SDSUPPORT
+  #endif // HAS_MEDIA
 
   #if HAS_PRINT_PROGRESS
     // Progress bar frame
@@ -871,7 +871,7 @@ void MarlinUI::draw_status_screen() {
     //
     // Filament sensor display if SD is disabled
     //
-    #if ENABLED(FILAMENT_LCD_DISPLAY) && DISABLED(SDSUPPORT)
+    #if ENABLED(FILAMENT_LCD_DISPLAY) && !HAS_MEDIA
       lcd_put_u8str(56, EXTRAS_2_BASELINE, wstring);
       lcd_put_u8str(102, EXTRAS_2_BASELINE, mstring);
       lcd_put_u8str(F("%"));
@@ -887,7 +887,7 @@ void MarlinUI::draw_status_screen() {
   if (PAGE_CONTAINS(STATUS_BASELINE - INFO_FONT_ASCENT, STATUS_BASELINE + INFO_FONT_DESCENT)) {
     lcd_moveto(0, STATUS_BASELINE);
 
-    #if BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
+    #if BOTH(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
       // Alternate Status message and Filament display
       if (ELAPSED(millis(), next_filament_display)) {
         lcd_put_u8str(F(LCD_STR_FILAM_DIA));

commit f0c8c9182090f8929ec4766683ec2d6902d4bc00
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 3 20:44:24 2023 -0600

    🧑‍💻 Width/Magnitude-based types (#25458)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 091c531abb..22e71251ff 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -96,9 +96,10 @@
     DRAWBIT_HOTEND,
     DRAWBIT_BED = HOTENDS,
     DRAWBIT_CHAMBER,
-    DRAWBIT_CUTTER
+    DRAWBIT_CUTTER,
+    DRAWBIT_COUNT
   };
-  IF<(DRAWBIT_CUTTER > 7), uint16_t, uint8_t>::type draw_bits;
+  bits_t(DRAWBIT_COUNT) draw_bits;
 #endif
 
 #if ANIM_HOTEND

commit f9f6662a8c4692cc67006fb302068c96a0e86ac1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Feb 23 21:08:31 2023 -0600

    ♻️ Stepper options refactor (#25422)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 721dcb63ff..091c531abb 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -524,7 +524,9 @@ void MarlinUI::draw_status_screen() {
 
   const bool show_e_total = TERN0(LCD_SHOW_E_TOTAL, printingIsActive());
 
-  static u8g_uint_t progress_bar_solid_width = 0;
+  #if HAS_PRINT_PROGRESS
+    static u8g_uint_t progress_bar_solid_width = 0;
+  #endif
 
   // At the first page, generate new display values
   if (first_page) {

commit db01960a0e8a7d37173914c601a9bf413f911a86
Author: Trivalik <3148279+trivalik@users.noreply.github.com>
Date:   Sun Feb 12 05:14:53 2023 +0100

    🚸 Negative temperature display option (#25036)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 8bdba42342..721dcb63ff 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -192,14 +192,26 @@
 #define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
 
 FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, const uint8_t ty) {
-  if (temp < 0)
-    lcd_put_u8str(tx - 3 * (INFO_FONT_WIDTH) / 2 + 1, ty, F("err"));
+  const char *str;
+  uint8_t len;
+  if (temp >= 0) {
+    str = i16tostr3left(temp);
+    len = strlen(str);
+    lcd_moveto(tx + 1 - len * (INFO_FONT_WIDTH) / 2, ty);
+  }
   else {
-    const char *str = i16tostr3rj(temp);
-    const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
-    lcd_put_u8str(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty, &str[3-len]);
-    lcd_put_lchar(LCD_STR_DEGREE[0]);
+    #if ENABLED(SHOW_TEMPERATURE_BELOW_ZERO)
+      str = i16tostr3left((-temp) % 100);
+      len = strlen(str) + 1;
+      lcd_moveto(tx + 1 - len * (INFO_FONT_WIDTH) / 2, ty);
+      lcd_put_lchar('-');
+    #else
+      lcd_put_u8str(tx + 1 - 3 * (INFO_FONT_WIDTH) / 2, ty, F("err"));
+      return;
+    #endif
   }
+  lcd_put_u8str(str);
+  lcd_put_lchar(LCD_STR_DEGREE[0]);
 }
 
 #if DO_DRAW_FLOWMETER

commit 57a7e28145de06d58be25d5d873586970e6db3d0
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Wed Feb 1 02:43:06 2023 -0600

    🩹 Fix progress DOGM compile error (#25319)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 03e83c2181..8bdba42342 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -444,9 +444,12 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 }
 
 // Prepare strings for progress display
-#if HAS_EXTRA_PROGRESS
+#if EITHER(HAS_EXTRA_PROGRESS, HAS_PRINT_PROGRESS)
   static MarlinUI::progress_t progress = 0;
   static char bufferc[13];
+#endif
+
+#if HAS_EXTRA_PROGRESS
 
   static void prepare_time_string(const duration_t &time, char prefix) {
     char str[13];
@@ -484,7 +487,8 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
       if (printJobOngoing())
         prepare_time_string(print_job_timer.duration(), 'E'); }
   #endif
-#endif // HAS_PRINT_PROGRESS
+
+#endif // HAS_EXTRA_PROGRESS
 
 /**
  * Draw the Status Screen for a 128x64 DOGM (U8glib) display.

commit b7c23631c5840e2338cae531b171459e9e9c5301
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sun Jan 22 15:08:37 2023 +1300

    🐛 Fix misc. UI issues (#25252)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index cba58f5c02..03e83c2181 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -444,7 +444,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 }
 
 // Prepare strings for progress display
-#if HAS_PRINT_PROGRESS
+#if HAS_EXTRA_PROGRESS
   static MarlinUI::progress_t progress = 0;
   static char bufferc[13];
 

commit eeea21a9678f6c441ea98a8afa881b5b5e775051
Author: EvilGremlin <22657714+EvilGremlin@users.noreply.github.com>
Date:   Sat Dec 17 07:45:55 2022 +0300

    🐛 Fix DOGM time overflow, alignment (#25103)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index d0910c44ba..cba58f5c02 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -449,7 +449,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   static char bufferc[13];
 
   static void prepare_time_string(const duration_t &time, char prefix) {
-    char str[9];
+    char str[13];
     memset(&bufferc[2], 0x20, 5); // partialy fill with spaces to avoid artifacts and terminator
     bufferc[0] = prefix;
     bufferc[1] = ':';

commit b169d623e3284846bcda9829b12f20ce90e3762c
Author: EvilGremlin <22657714+EvilGremlin@users.noreply.github.com>
Date:   Thu Dec 8 01:08:53 2022 +0300

    🚸 Progress display followup (#24879)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 4283ab59cb..d0910c44ba 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -445,50 +445,44 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 
 // Prepare strings for progress display
 #if HAS_PRINT_PROGRESS
-  #define _PRGR_INFO_X(len) (LCD_PIXEL_WIDTH - (len) * (MENU_FONT_WIDTH))
-  #define PCENTERED 1  // center percent value over progress bar, else align to the right
-  static uint8_t lastProgress = 0xFF;
-  static u8g_uint_t progress_bar_solid_width = 0;
+  static MarlinUI::progress_t progress = 0;
+  static char bufferc[13];
+
+  static void prepare_time_string(const duration_t &time, char prefix) {
+    char str[9];
+    memset(&bufferc[2], 0x20, 5); // partialy fill with spaces to avoid artifacts and terminator
+    bufferc[0] = prefix;
+    bufferc[1] = ':';
+    int str_length = time.toDigital(str, time.value >= 60*60*24L);
+    strcpy(&bufferc[sizeof(bufferc) - str_length - 1], str);
+  }
+
   #if ENABLED(SHOW_PROGRESS_PERCENT)
-    static char progress_string[5];
-    static u8g_uint_t progress_x_pos;
     void MarlinUI::drawPercent() {
-      if (progress_string[0]) {
-        lcd_put_u8str(progress_x_pos, EXTRAS_BASELINE, progress_string);
-        lcd_put_u8str(F("%"));
+      if (progress != 0) {
+        #define PCENTERED 1  // center percent value over progress bar, else align to the right
+        #define PPOS TERN(PCENTERED, 4, 0)
+        #define PLEN TERN(PRINT_PROGRESS_SHOW_DECIMALS, 4, 3)
+        memset(&bufferc, 0x20, 12);
+        memcpy(&bufferc[PPOS], TERN(PRINT_PROGRESS_SHOW_DECIMALS, permyriadtostr4(progress), ui8tostr3rj(progress / (PROGRESS_SCALE))), PLEN);
+        bufferc[PPOS+PLEN] = '%';
       }
     }
   #endif
   #if ENABLED(SHOW_REMAINING_TIME)
-    static char remaining_string[10];
-    static u8g_uint_t remaining_x_pos = 0;
     void MarlinUI::drawRemain() {
-      if (printJobOngoing()){
-        lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, F("R:"));
-        lcd_put_u8str(remaining_x_pos, EXTRAS_BASELINE, remaining_string);
-      }
-    }
+      if (printJobOngoing() && get_remaining_time() != 0)
+        prepare_time_string(get_remaining_time(), 'R'); }
   #endif
   #if ENABLED(SHOW_INTERACTION_TIME)
-    static char interaction_string[10];
-    static u8g_uint_t interaction_x_pos = 0;
     void MarlinUI::drawInter() {
-      if (printingIsActive() && interaction_string[0]) {
-        lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, F("C:"));
-        lcd_put_u8str(interaction_x_pos, EXTRAS_BASELINE, interaction_string);
-      }
-    }
+      if (printingIsActive() && interaction_time)
+        prepare_time_string(interaction_time, 'C'); }
   #endif
   #if ENABLED(SHOW_ELAPSED_TIME)
-    static char elapsed_string[10];
-    static u8g_uint_t elapsed_x_pos = 0;
-    static uint8_t lastElapsed;
     void MarlinUI::drawElapsed() {
-      if (printJobOngoing()) {
-        lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, F("E:"));
-        lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
-      }
-    }
+      if (printJobOngoing())
+        prepare_time_string(print_job_timer.duration(), 'E'); }
   #endif
 #endif // HAS_PRINT_PROGRESS
 
@@ -514,6 +508,8 @@ void MarlinUI::draw_status_screen() {
 
   const bool show_e_total = TERN0(LCD_SHOW_E_TOTAL, printingIsActive());
 
+  static u8g_uint_t progress_bar_solid_width = 0;
+
   // At the first page, generate new display values
   if (first_page) {
     #if ANIM_HBCC
@@ -551,59 +547,16 @@ void MarlinUI::draw_status_screen() {
       strcpy(mstring, i16tostr3rj(planner.volumetric_percent(parser.volumetric_enabled)));
     #endif
 
-    // Progress / elapsed / estimation updates and string formatting to avoid float math on each LCD draw
+    // Progress update to avoid float math on each LCD draw
     #if HAS_PRINT_PROGRESS
-      const progress_t progress = TERN(HAS_PRINT_PROGRESS_PERMYRIAD, get_progress_permyriad, get_progress_percent)();
-      duration_t elapsedt = print_job_timer.duration();
-      const uint8_t p = progress & 0xFF, ev = elapsedt.value & 0xFF;
+      progress = TERN(HAS_PRINT_PROGRESS_PERMYRIAD, get_progress_permyriad, get_progress_percent)();
+
+      static uint8_t lastProgress = 0xFF;
+      const uint8_t p = progress & 0xFF;
       if (p != lastProgress) {
         lastProgress = p;
-
         progress_bar_solid_width = u8g_uint_t((PROGRESS_BAR_WIDTH - 2) * (progress / (PROGRESS_SCALE)) * 0.01f);
-
-        #if ENABLED(SHOW_PROGRESS_PERCENT)
-          if (progress == 0)
-            progress_string[0] = '\0';
-          else
-            strcpy(progress_string, TERN(PRINT_PROGRESS_SHOW_DECIMALS, permyriadtostr4(progress), ui8tostr3rj(progress / (PROGRESS_SCALE))));
-          progress_x_pos = TERN(PCENTERED, 77, _PRGR_INFO_X(strlen(progress_string) + 1));
-        #endif
       }
-
-      #if ENABLED(SHOW_INTERACTION_TIME)
-        if (!(interaction_time)) {
-          interaction_string[0] = '\0';
-          interaction_x_pos = _PRGR_INFO_X(0);
-        }
-        else {
-          const duration_t interactt = ui.interaction_time;
-          interactt.toDigital(interaction_string, interactt.value >= 60*60*24L);
-          interaction_x_pos = _PRGR_INFO_X(strlen(interaction_string));
-        }
-      #endif
-
-      #if ENABLED(SHOW_ELAPSED_TIME)
-        if (ev != lastElapsed) {
-          lastElapsed = ev;
-          const uint8_t len = elapsedt.toDigital(elapsed_string, elapsedt.value >= 60*60*24L);
-          elapsed_x_pos = _PRGR_INFO_X(len);
-        }
-      #endif
-
-      #if ENABLED(SHOW_REMAINING_TIME)
-        if (!(ev & 0x3)) {
-          uint32_t timeval = get_remaining_time();
-          if (!timeval) {
-            remaining_string[0] = '\0';
-            remaining_x_pos = _PRGR_INFO_X(0);
-          }
-          else {
-            const duration_t remaint = timeval;
-            const uint8_t len = remaint.toDigital(remaining_string, remaint.value >= 60*60*24L);
-            remaining_x_pos = _PRGR_INFO_X(len);
-          }
-        }
-      #endif
     #endif
   }
 
@@ -796,8 +749,10 @@ void MarlinUI::draw_status_screen() {
       u8g.drawBox(PROGRESS_BAR_X + 1, PROGRESS_BAR_Y + 1, progress_bar_solid_width, 2);
 
     // Progress strings
-    if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1))
+    if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)){
       ui.rotate_progress();
+      lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, bufferc);
+    }
   #endif
 
   //

commit 50e3e4d8628aeb2e2d106e341b9244e272965796
Author: Thomas Buck <taucher.bodensee@googlemail.com>
Date:   Sun Nov 27 01:59:13 2022 +0100

    🚸 Optional Cutter/Laser status for HD44780 (#25003)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 83f492e124..4283ab59cb 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -455,7 +455,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     void MarlinUI::drawPercent() {
       if (progress_string[0]) {
         lcd_put_u8str(progress_x_pos, EXTRAS_BASELINE, progress_string);
-        lcd_put_lchar('%');
+        lcd_put_u8str(F("%"));
       }
     }
   #endif
@@ -705,7 +705,7 @@ void MarlinUI::draw_status_screen() {
           lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, cutter_power2str(cutter.unitPower));
         #elif CUTTER_UNIT_IS(RPM)
           lcd_put_u8str(STATUS_CUTTER_TEXT_X - 2, STATUS_CUTTER_TEXT_Y, ftostr61rj(float(cutter.unitPower) / 1000));
-          lcd_put_lchar('K');
+          lcd_put_u8str(F("K"));
         #else
           lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, cutter_power2str(cutter.unitPower));
         #endif
@@ -892,7 +892,7 @@ void MarlinUI::draw_status_screen() {
 
     set_font(FONT_STATUSMENU);
     lcd_put_u8str(12, EXTRAS_2_BASELINE, i16tostr3rj(feedrate_percentage));
-    lcd_put_lchar('%');
+    lcd_put_u8str(F("%"));
 
     //
     // Filament sensor display if SD is disabled
@@ -900,7 +900,7 @@ void MarlinUI::draw_status_screen() {
     #if ENABLED(FILAMENT_LCD_DISPLAY) && DISABLED(SDSUPPORT)
       lcd_put_u8str(56, EXTRAS_2_BASELINE, wstring);
       lcd_put_u8str(102, EXTRAS_2_BASELINE, mstring);
-      lcd_put_lchar('%');
+      lcd_put_u8str(F("%"));
       set_font(FONT_MENU);
       lcd_put_lchar(47, EXTRAS_2_BASELINE, LCD_STR_FILAM_DIA[0]); // lcd_put_u8str(F(LCD_STR_FILAM_DIA));
       lcd_put_lchar(93, EXTRAS_2_BASELINE, LCD_STR_FILAM_MUL[0]);
@@ -917,12 +917,12 @@ void MarlinUI::draw_status_screen() {
       // Alternate Status message and Filament display
       if (ELAPSED(millis(), next_filament_display)) {
         lcd_put_u8str(F(LCD_STR_FILAM_DIA));
-        lcd_put_lchar(':');
+        lcd_put_u8str(F(":"));
         lcd_put_u8str(wstring);
         lcd_put_u8str(F("  " LCD_STR_FILAM_MUL));
-        lcd_put_lchar(':');
+        lcd_put_u8str(F(":"));
         lcd_put_u8str(mstring);
-        lcd_put_lchar('%');
+        lcd_put_u8str(F("%"));
         return;
       }
     #endif
@@ -955,7 +955,7 @@ void MarlinUI::draw_status_message(const bool blink) {
     if (slen <= lcd_width) {
       // The string fits within the line. Print with no scrolling
       lcd_put_u8str(status_message);
-      while (slen < lcd_width) { lcd_put_lchar(' '); ++slen; }
+      while (slen < lcd_width) { lcd_put_u8str(F(" ")); ++slen; }
     }
     else {
       // String is longer than the available space
@@ -973,14 +973,14 @@ void MarlinUI::draw_status_message(const bool blink) {
       // If the remaining string doesn't completely fill the screen
       if (rlen < lcd_width) {
         uint8_t chars = lcd_width - rlen;       // Amount of space left in characters
-        lcd_put_lchar(' ');                     // Always at 1+ spaces left, draw a space
+        lcd_put_u8str(F(" "));                     // Always at 1+ spaces left, draw a space
         if (--chars) {                          // Draw a second space if there's room
-          lcd_put_lchar(' ');
+          lcd_put_u8str(F(" "));
           if (--chars) {                        // Draw a third space if there's room
-            lcd_put_lchar(' ');
+            lcd_put_u8str(F(" "));
             if (--chars) {                      // Print a second copy of the message
               lcd_put_u8str_max(status_message, pixel_width - (rlen + 2) * (MENU_FONT_WIDTH));
-              lcd_put_lchar(' ');
+              lcd_put_u8str(F(" "));
             }
           }
         }
@@ -995,7 +995,7 @@ void MarlinUI::draw_status_message(const bool blink) {
     lcd_put_u8str_max(status_message, pixel_width);
 
     // Fill the rest with spaces
-    for (; slen < lcd_width; ++slen) lcd_put_lchar(' ');
+    for (; slen < lcd_width; ++slen) lcd_put_u8str(F(" "));
 
   #endif // !STATUS_MESSAGE_SCROLLING
 

commit 52096599b30d4d49b3fee61a85102054a2d298d8
Author: karliss <karlis3p70l1ij@gmail.com>
Date:   Tue Oct 18 04:01:18 2022 +0300

    🐛 Fix compile without Y/Z (#24858)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 81119c0a10..83f492e124 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -438,7 +438,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   else if (axis_should_home(axis))
     while (const char c = *value++) lcd_put_lchar(c <= '.' ? c : '?');
   else if (NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING) && !axis_is_trusted(axis))
-    lcd_put_u8str(axis == Z_AXIS ? F("       ") : F("    "));
+    lcd_put_u8str(TERN0(HAS_Z_AXIS, axis == Z_AXIS) ? F("       ") : F("    "));
   else
     lcd_put_u8str(value);
 }
@@ -500,7 +500,13 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
  */
 void MarlinUI::draw_status_screen() {
   constexpr int xystorage = TERN(INCH_MODE_SUPPORT, 8, 5);
-  static char xstring[TERN(LCD_SHOW_E_TOTAL, 12, xystorage)], ystring[xystorage], zstring[8];
+  static char xstring[TERN(LCD_SHOW_E_TOTAL, 12, xystorage)];
+  #if HAS_Y_AXIS
+    static char ystring[xystorage];
+  #endif
+  #if HAS_Z_AXIS
+    static char zstring[8];
+  #endif
 
   #if ENABLED(FILAMENT_LCD_DISPLAY)
     static char wstring[5], mstring[4];
@@ -525,7 +531,9 @@ void MarlinUI::draw_status_screen() {
 
     const xyz_pos_t lpos = current_position.asLogical();
     const bool is_inch = parser.using_inch_units();
-    strcpy(zstring, is_inch ? ftostr42_52(LINEAR_UNIT(lpos.z)) : ftostr52sp(lpos.z));
+    #if HAS_Z_AXIS
+      strcpy(zstring, is_inch ? ftostr42_52(LINEAR_UNIT(lpos.z)) : ftostr52sp(lpos.z));
+    #endif
 
     if (show_e_total) {
       #if ENABLED(LCD_SHOW_E_TOTAL)
@@ -535,7 +543,7 @@ void MarlinUI::draw_status_screen() {
     }
     else {
       strcpy(xstring, is_inch ? ftostr53_63(LINEAR_UNIT(lpos.x)) : ftostr4sign(lpos.x));
-      strcpy(ystring, is_inch ? ftostr53_63(LINEAR_UNIT(lpos.y)) : ftostr4sign(lpos.y));
+      TERN_(HAS_Y_AXIS, strcpy(ystring, is_inch ? ftostr53_63(LINEAR_UNIT(lpos.y)) : ftostr4sign(lpos.y)));
     }
 
     #if ENABLED(FILAMENT_LCD_DISPLAY)
@@ -858,12 +866,14 @@ void MarlinUI::draw_status_screen() {
         }
         else {
           _draw_axis_value(X_AXIS, xstring, blink);
-          _draw_axis_value(Y_AXIS, ystring, blink);
+          TERN_(HAS_Y_AXIS, _draw_axis_value(Y_AXIS, ystring, blink));
         }
 
       #endif
 
-      _draw_axis_value(Z_AXIS, zstring, blink);
+      #if HAS_Z_AXIS
+        _draw_axis_value(Z_AXIS, zstring, blink);
+      #endif
 
       #if NONE(XYZ_NO_FRAME, XYZ_HOLLOW_FRAME)
         u8g.setColorIndex(1); // black on white

commit f595e40ceb0c79d7f0d6438636658dfcfa2a75b8
Author: EvilGremlin <22657714+EvilGremlin@users.noreply.github.com>
Date:   Sun Oct 9 18:30:47 2022 +0300

    ♻️ Set Progress without LCD (#24767)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 67039d52de..81119c0a10 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -40,9 +40,7 @@
 
 #include "../../gcode/parser.h" // for units (and volumetric)
 
-#if ENABLED(LCD_SHOW_E_TOTAL)
-  #include "../../MarlinCore.h" // for printingIsActive()
-#endif
+#include "../../MarlinCore.h" // for printingIsActive()
 
 #if ENABLED(FILAMENT_LCD_DISPLAY)
   #include "../../feature/filwidth.h"
@@ -445,6 +443,55 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     lcd_put_u8str(value);
 }
 
+// Prepare strings for progress display
+#if HAS_PRINT_PROGRESS
+  #define _PRGR_INFO_X(len) (LCD_PIXEL_WIDTH - (len) * (MENU_FONT_WIDTH))
+  #define PCENTERED 1  // center percent value over progress bar, else align to the right
+  static uint8_t lastProgress = 0xFF;
+  static u8g_uint_t progress_bar_solid_width = 0;
+  #if ENABLED(SHOW_PROGRESS_PERCENT)
+    static char progress_string[5];
+    static u8g_uint_t progress_x_pos;
+    void MarlinUI::drawPercent() {
+      if (progress_string[0]) {
+        lcd_put_u8str(progress_x_pos, EXTRAS_BASELINE, progress_string);
+        lcd_put_lchar('%');
+      }
+    }
+  #endif
+  #if ENABLED(SHOW_REMAINING_TIME)
+    static char remaining_string[10];
+    static u8g_uint_t remaining_x_pos = 0;
+    void MarlinUI::drawRemain() {
+      if (printJobOngoing()){
+        lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, F("R:"));
+        lcd_put_u8str(remaining_x_pos, EXTRAS_BASELINE, remaining_string);
+      }
+    }
+  #endif
+  #if ENABLED(SHOW_INTERACTION_TIME)
+    static char interaction_string[10];
+    static u8g_uint_t interaction_x_pos = 0;
+    void MarlinUI::drawInter() {
+      if (printingIsActive() && interaction_string[0]) {
+        lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, F("C:"));
+        lcd_put_u8str(interaction_x_pos, EXTRAS_BASELINE, interaction_string);
+      }
+    }
+  #endif
+  #if ENABLED(SHOW_ELAPSED_TIME)
+    static char elapsed_string[10];
+    static u8g_uint_t elapsed_x_pos = 0;
+    static uint8_t lastElapsed;
+    void MarlinUI::drawElapsed() {
+      if (printJobOngoing()) {
+        lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, F("E:"));
+        lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
+      }
+    }
+  #endif
+#endif // HAS_PRINT_PROGRESS
+
 /**
  * Draw the Status Screen for a 128x64 DOGM (U8glib) display.
  *
@@ -459,30 +506,6 @@ void MarlinUI::draw_status_screen() {
     static char wstring[5], mstring[4];
   #endif
 
-  #if HAS_PRINT_PROGRESS
-    #if DISABLED(SHOW_SD_PERCENT)
-      #define _SD_INFO_X(len) (PROGRESS_BAR_X + (PROGRESS_BAR_WIDTH) / 2 - (len) * (MENU_FONT_WIDTH) / 2)
-    #else
-      #define _SD_INFO_X(len) (LCD_PIXEL_WIDTH - (len) * (MENU_FONT_WIDTH))
-    #endif
-
-    #if ENABLED(SHOW_SD_PERCENT)
-      static char progress_string[5];
-    #endif
-    static uint8_t lastElapsed = 0xFF, lastProgress = 0xFF;
-    static u8g_uint_t elapsed_x_pos = 0, progress_bar_solid_width = 0;
-    static char elapsed_string[16];
-    #if ENABLED(SHOW_REMAINING_TIME)
-      static u8g_uint_t estimation_x_pos = 0;
-      static char estimation_string[10];
-      #if BOTH(SHOW_SD_PERCENT, ROTATE_PROGRESS_DISPLAY)
-        static u8g_uint_t progress_x_pos = 0;
-        static uint8_t progress_state = 0;
-        static bool prev_blink = 0;
-      #endif
-    #endif
-  #endif
-
   const bool show_e_total = TERN0(LCD_SHOW_E_TOTAL, printingIsActive());
 
   // At the first page, generate new display values
@@ -523,61 +546,59 @@ void MarlinUI::draw_status_screen() {
     // Progress / elapsed / estimation updates and string formatting to avoid float math on each LCD draw
     #if HAS_PRINT_PROGRESS
       const progress_t progress = TERN(HAS_PRINT_PROGRESS_PERMYRIAD, get_progress_permyriad, get_progress_percent)();
-      duration_t elapsed = print_job_timer.duration();
-      const uint8_t p = progress & 0xFF, ev = elapsed.value & 0xFF;
+      duration_t elapsedt = print_job_timer.duration();
+      const uint8_t p = progress & 0xFF, ev = elapsedt.value & 0xFF;
       if (p != lastProgress) {
         lastProgress = p;
 
         progress_bar_solid_width = u8g_uint_t((PROGRESS_BAR_WIDTH - 2) * (progress / (PROGRESS_SCALE)) * 0.01f);
 
-        #if ENABLED(SHOW_SD_PERCENT)
-          if (progress == 0) {
+        #if ENABLED(SHOW_PROGRESS_PERCENT)
+          if (progress == 0)
             progress_string[0] = '\0';
-            #if ENABLED(SHOW_REMAINING_TIME)
-              estimation_string[0] = '\0';
-              estimation_x_pos = _SD_INFO_X(0);
-            #endif
-          }
           else
             strcpy(progress_string, TERN(PRINT_PROGRESS_SHOW_DECIMALS, permyriadtostr4(progress), ui8tostr3rj(progress / (PROGRESS_SCALE))));
-
-          #if BOTH(SHOW_REMAINING_TIME, ROTATE_PROGRESS_DISPLAY) // Tri-state progress display mode
-            progress_x_pos = _SD_INFO_X(strlen(progress_string) + 1);
-          #endif
+          progress_x_pos = TERN(PCENTERED, 77, _PRGR_INFO_X(strlen(progress_string) + 1));
         #endif
       }
 
-      constexpr bool can_show_days = DISABLED(SHOW_SD_PERCENT) || ENABLED(ROTATE_PROGRESS_DISPLAY);
-      if (ev != lastElapsed) {
-        lastElapsed = ev;
-        const uint8_t len = elapsed.toDigital(elapsed_string, can_show_days && elapsed.value >= 60*60*24L);
-        elapsed_x_pos = _SD_INFO_X(len);
-
-        #if ENABLED(SHOW_REMAINING_TIME)
-          if (!(ev & 0x3)) {
-            uint32_t timeval = (0
-              #if BOTH(LCD_SET_PROGRESS_MANUALLY, USE_M73_REMAINING_TIME)
-                + get_remaining_time()
-              #endif
-            );
-            if (!timeval && progress > 0) timeval = elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
-            if (!timeval) {
-              estimation_string[0] = '\0';
-              estimation_x_pos = _SD_INFO_X(0);
-            }
-            else {
-              duration_t estimation = timeval;
-              const uint8_t len = estimation.toDigital(estimation_string, can_show_days && estimation.value >= 60*60*24L);
-              estimation_x_pos = _SD_INFO_X(len + !BOTH(SHOW_SD_PERCENT, ROTATE_PROGRESS_DISPLAY));
-            }
+      #if ENABLED(SHOW_INTERACTION_TIME)
+        if (!(interaction_time)) {
+          interaction_string[0] = '\0';
+          interaction_x_pos = _PRGR_INFO_X(0);
+        }
+        else {
+          const duration_t interactt = ui.interaction_time;
+          interactt.toDigital(interaction_string, interactt.value >= 60*60*24L);
+          interaction_x_pos = _PRGR_INFO_X(strlen(interaction_string));
+        }
+      #endif
+
+      #if ENABLED(SHOW_ELAPSED_TIME)
+        if (ev != lastElapsed) {
+          lastElapsed = ev;
+          const uint8_t len = elapsedt.toDigital(elapsed_string, elapsedt.value >= 60*60*24L);
+          elapsed_x_pos = _PRGR_INFO_X(len);
+        }
+      #endif
+
+      #if ENABLED(SHOW_REMAINING_TIME)
+        if (!(ev & 0x3)) {
+          uint32_t timeval = get_remaining_time();
+          if (!timeval) {
+            remaining_string[0] = '\0';
+            remaining_x_pos = _PRGR_INFO_X(0);
           }
-        #endif
-      }
+          else {
+            const duration_t remaint = timeval;
+            const uint8_t len = remaint.toDigital(remaining_string, remaint.value >= 60*60*24L);
+            remaining_x_pos = _PRGR_INFO_X(len);
+          }
+        }
+      #endif
     #endif
   }
 
-  const bool blink = get_blink();
-
   // Status Menu Font
   set_font(FONT_STATUSMENU);
 
@@ -634,6 +655,8 @@ void MarlinUI::draw_status_screen() {
       u8g.drawBitmapP(STATUS_CHAMBER_X, chambery, STATUS_CHAMBER_BYTEWIDTH, chamberh, CHAMBER_BITMAP(CHAMBER_ALT()));
   #endif
 
+  const bool blink = ui.get_blink();
+
   #if DO_DRAW_FAN
     #if STATUS_FAN_FRAMES > 2
       static bool old_blink;
@@ -664,8 +687,7 @@ void MarlinUI::draw_status_screen() {
   if (PAGE_UNDER(6 + 1 + 12 + 1 + 6 + 1)) {
     // Extruders
     #if DO_DRAW_HOTENDS
-      LOOP_L_N(e, MAX_HOTEND_DRAW)
-        _draw_hotend_status((heater_id_t)e, blink);
+      LOOP_L_N(e, MAX_HOTEND_DRAW) _draw_hotend_status((heater_id_t)e, blink);
     #endif
 
     // Laser / Spindle
@@ -757,74 +779,18 @@ void MarlinUI::draw_status_screen() {
   #endif // SDSUPPORT
 
   #if HAS_PRINT_PROGRESS
-    //
     // Progress bar frame
-    //
-
     if (PAGE_CONTAINS(PROGRESS_BAR_Y, PROGRESS_BAR_Y + 3))
       u8g.drawFrame(PROGRESS_BAR_X, PROGRESS_BAR_Y, PROGRESS_BAR_WIDTH, 4);
 
-    //
     // Progress bar solid part
-    //
-
     if (PAGE_CONTAINS(PROGRESS_BAR_Y + 1, PROGRESS_BAR_Y + 2))
       u8g.drawBox(PROGRESS_BAR_X + 1, PROGRESS_BAR_Y + 1, progress_bar_solid_width, 2);
 
-    if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)) {
-
-      #if ALL(SHOW_SD_PERCENT, SHOW_REMAINING_TIME, ROTATE_PROGRESS_DISPLAY)
-
-        if (prev_blink != blink) {
-          prev_blink = blink;
-          if (++progress_state >= 3) progress_state = 0;
-        }
-
-        if (progress_state == 0) {
-          if (progress_string[0]) {
-            lcd_put_u8str(progress_x_pos, EXTRAS_BASELINE, progress_string);
-            lcd_put_lchar('%');
-          }
-        }
-        else if (progress_state == 2 && estimation_string[0]) {
-          lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, F("R:"));
-          lcd_put_u8str(estimation_x_pos, EXTRAS_BASELINE, estimation_string);
-        }
-        else if (elapsed_string[0]) {
-          lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, F("E:"));
-          lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
-        }
-
-      #else // !SHOW_SD_PERCENT || !SHOW_REMAINING_TIME || !ROTATE_PROGRESS_DISPLAY
-
-        //
-        // SD Percent Complete
-        //
-
-        #if ENABLED(SHOW_SD_PERCENT)
-          if (progress_string[0]) {
-            lcd_put_u8str(55, EXTRAS_BASELINE, progress_string); // Percent complete
-            lcd_put_lchar('%');
-          }
-        #endif
-
-        //
-        // Elapsed Time
-        //
-
-        #if ENABLED(SHOW_REMAINING_TIME)
-          if (blink && estimation_string[0]) {
-            lcd_put_lchar(estimation_x_pos, EXTRAS_BASELINE, 'R');
-            lcd_put_u8str(estimation_string);
-          }
-          else
-        #endif
-            lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
-
-      #endif // !SHOW_SD_PERCENT || !SHOW_REMAINING_TIME || !ROTATE_PROGRESS_DISPLAY
-    }
-
-  #endif // HAS_PRINT_PROGRESS
+    // Progress strings
+    if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1))
+      ui.rotate_progress();
+  #endif
 
   //
   // XYZ Coordinates

commit 6a67ad4e4aacf7e7314f9e15fd8fe8489b73742b
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Wed Jul 6 07:46:39 2022 -0500

    ⚡️ Fix and improve Inline Laser Power (#22690)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 858c6ea781..67039d52de 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -670,7 +670,7 @@ void MarlinUI::draw_status_screen() {
 
     // Laser / Spindle
     #if DO_DRAW_CUTTER
-      if (cutter.isReady && PAGE_CONTAINS(STATUS_CUTTER_TEXT_Y - INFO_FONT_ASCENT, STATUS_CUTTER_TEXT_Y - 1)) {
+      if (cutter.isReadyForUI && PAGE_CONTAINS(STATUS_CUTTER_TEXT_Y - INFO_FONT_ASCENT, STATUS_CUTTER_TEXT_Y - 1)) {
         #if CUTTER_UNIT_IS(PERCENT)
           lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, cutter_power2str(cutter.unitPower));
         #elif CUTTER_UNIT_IS(RPM)

commit cb4a79173be3e8ed1ff45e7c346df1c28e744d5a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jul 1 04:49:37 2022 -0500

    🩹 Remove poison wchar_t macro

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 010a1397f6..858c6ea781 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -200,7 +200,7 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
     const char *str = i16tostr3rj(temp);
     const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
     lcd_put_u8str(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty, &str[3-len]);
-    lcd_put_wchar(LCD_STR_DEGREE[0]);
+    lcd_put_lchar(LCD_STR_DEGREE[0]);
   }
 }
 
@@ -432,13 +432,13 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   const bool is_inch = parser.using_inch_units();
   const AxisEnum a = TERN(LCD_SHOW_E_TOTAL, axis == E_AXIS ? X_AXIS : axis, axis);
   const uint8_t offs = a * (is_inch ? XYZ_SPACING_IN : XYZ_SPACING);
-  lcd_put_wchar((is_inch ? X_LABEL_POS_IN : X_LABEL_POS) + offs, XYZ_BASELINE, AXIS_CHAR(axis));
+  lcd_put_lchar((is_inch ? X_LABEL_POS_IN : X_LABEL_POS) + offs, XYZ_BASELINE, AXIS_CHAR(axis));
   lcd_moveto((is_inch ? X_VALUE_POS_IN : X_VALUE_POS) + offs, XYZ_BASELINE);
 
   if (blink)
     lcd_put_u8str(value);
   else if (axis_should_home(axis))
-    while (const char c = *value++) lcd_put_wchar(c <= '.' ? c : '?');
+    while (const char c = *value++) lcd_put_lchar(c <= '.' ? c : '?');
   else if (NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING) && !axis_is_trusted(axis))
     lcd_put_u8str(axis == Z_AXIS ? F("       ") : F("    "));
   else
@@ -675,7 +675,7 @@ void MarlinUI::draw_status_screen() {
           lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, cutter_power2str(cutter.unitPower));
         #elif CUTTER_UNIT_IS(RPM)
           lcd_put_u8str(STATUS_CUTTER_TEXT_X - 2, STATUS_CUTTER_TEXT_Y, ftostr61rj(float(cutter.unitPower) / 1000));
-          lcd_put_wchar('K');
+          lcd_put_lchar('K');
         #else
           lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, cutter_power2str(cutter.unitPower));
         #endif
@@ -734,7 +734,7 @@ void MarlinUI::draw_status_screen() {
             }
           #endif
           lcd_put_u8str(STATUS_FAN_TEXT_X, STATUS_FAN_TEXT_Y, i16tostr3rj(thermalManager.pwmToPercent(spd)));
-          lcd_put_wchar(c);
+          lcd_put_lchar(c);
         }
       }
     #endif
@@ -783,7 +783,7 @@ void MarlinUI::draw_status_screen() {
         if (progress_state == 0) {
           if (progress_string[0]) {
             lcd_put_u8str(progress_x_pos, EXTRAS_BASELINE, progress_string);
-            lcd_put_wchar('%');
+            lcd_put_lchar('%');
           }
         }
         else if (progress_state == 2 && estimation_string[0]) {
@@ -804,7 +804,7 @@ void MarlinUI::draw_status_screen() {
         #if ENABLED(SHOW_SD_PERCENT)
           if (progress_string[0]) {
             lcd_put_u8str(55, EXTRAS_BASELINE, progress_string); // Percent complete
-            lcd_put_wchar('%');
+            lcd_put_lchar('%');
           }
         #endif
 
@@ -814,7 +814,7 @@ void MarlinUI::draw_status_screen() {
 
         #if ENABLED(SHOW_REMAINING_TIME)
           if (blink && estimation_string[0]) {
-            lcd_put_wchar(estimation_x_pos, EXTRAS_BASELINE, 'R');
+            lcd_put_lchar(estimation_x_pos, EXTRAS_BASELINE, 'R');
             lcd_put_u8str(estimation_string);
           }
           else
@@ -912,11 +912,11 @@ void MarlinUI::draw_status_screen() {
 
   if (PAGE_CONTAINS(EXTRAS_2_BASELINE - INFO_FONT_ASCENT, EXTRAS_2_BASELINE - 1)) {
     set_font(FONT_MENU);
-    lcd_put_wchar(3, EXTRAS_2_BASELINE, LCD_STR_FEEDRATE[0]);
+    lcd_put_lchar(3, EXTRAS_2_BASELINE, LCD_STR_FEEDRATE[0]);
 
     set_font(FONT_STATUSMENU);
     lcd_put_u8str(12, EXTRAS_2_BASELINE, i16tostr3rj(feedrate_percentage));
-    lcd_put_wchar('%');
+    lcd_put_lchar('%');
 
     //
     // Filament sensor display if SD is disabled
@@ -924,10 +924,10 @@ void MarlinUI::draw_status_screen() {
     #if ENABLED(FILAMENT_LCD_DISPLAY) && DISABLED(SDSUPPORT)
       lcd_put_u8str(56, EXTRAS_2_BASELINE, wstring);
       lcd_put_u8str(102, EXTRAS_2_BASELINE, mstring);
-      lcd_put_wchar('%');
+      lcd_put_lchar('%');
       set_font(FONT_MENU);
-      lcd_put_wchar(47, EXTRAS_2_BASELINE, LCD_STR_FILAM_DIA[0]); // lcd_put_u8str(F(LCD_STR_FILAM_DIA));
-      lcd_put_wchar(93, EXTRAS_2_BASELINE, LCD_STR_FILAM_MUL[0]);
+      lcd_put_lchar(47, EXTRAS_2_BASELINE, LCD_STR_FILAM_DIA[0]); // lcd_put_u8str(F(LCD_STR_FILAM_DIA));
+      lcd_put_lchar(93, EXTRAS_2_BASELINE, LCD_STR_FILAM_MUL[0]);
     #endif
   }
 
@@ -941,12 +941,12 @@ void MarlinUI::draw_status_screen() {
       // Alternate Status message and Filament display
       if (ELAPSED(millis(), next_filament_display)) {
         lcd_put_u8str(F(LCD_STR_FILAM_DIA));
-        lcd_put_wchar(':');
+        lcd_put_lchar(':');
         lcd_put_u8str(wstring);
         lcd_put_u8str(F("  " LCD_STR_FILAM_MUL));
-        lcd_put_wchar(':');
+        lcd_put_lchar(':');
         lcd_put_u8str(mstring);
-        lcd_put_wchar('%');
+        lcd_put_lchar('%');
         return;
       }
     #endif
@@ -979,7 +979,7 @@ void MarlinUI::draw_status_message(const bool blink) {
     if (slen <= lcd_width) {
       // The string fits within the line. Print with no scrolling
       lcd_put_u8str(status_message);
-      while (slen < lcd_width) { lcd_put_wchar(' '); ++slen; }
+      while (slen < lcd_width) { lcd_put_lchar(' '); ++slen; }
     }
     else {
       // String is longer than the available space
@@ -997,14 +997,14 @@ void MarlinUI::draw_status_message(const bool blink) {
       // If the remaining string doesn't completely fill the screen
       if (rlen < lcd_width) {
         uint8_t chars = lcd_width - rlen;       // Amount of space left in characters
-        lcd_put_wchar(' ');                     // Always at 1+ spaces left, draw a space
+        lcd_put_lchar(' ');                     // Always at 1+ spaces left, draw a space
         if (--chars) {                          // Draw a second space if there's room
-          lcd_put_wchar(' ');
+          lcd_put_lchar(' ');
           if (--chars) {                        // Draw a third space if there's room
-            lcd_put_wchar(' ');
+            lcd_put_lchar(' ');
             if (--chars) {                      // Print a second copy of the message
               lcd_put_u8str_max(status_message, pixel_width - (rlen + 2) * (MENU_FONT_WIDTH));
-              lcd_put_wchar(' ');
+              lcd_put_lchar(' ');
             }
           }
         }
@@ -1019,7 +1019,7 @@ void MarlinUI::draw_status_message(const bool blink) {
     lcd_put_u8str_max(status_message, pixel_width);
 
     // Fill the rest with spaces
-    for (; slen < lcd_width; ++slen) lcd_put_wchar(' ');
+    for (; slen < lcd_width; ++slen) lcd_put_lchar(' ');
 
   #endif // !STATUS_MESSAGE_SCROLLING
 

commit a0a963fe1d989c7ef04b9f5f42dc42590bff1203
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Tue Apr 26 05:03:16 2022 +0200

    🩹 Fix "elapsed" text on DOGLCD (#24087)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 47b5a3e20b..010a1397f6 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -791,7 +791,7 @@ void MarlinUI::draw_status_screen() {
           lcd_put_u8str(estimation_x_pos, EXTRAS_BASELINE, estimation_string);
         }
         else if (elapsed_string[0]) {
-          lcd_put_u8str_P(PROGRESS_BAR_X, EXTRAS_BASELINE, E_LBL);
+          lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, F("E:"));
           lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
         }
 

commit 8b8defeacc5f7ba2bac63baf65c1d3b1ef60177c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 3 20:52:27 2022 -0500

    🏗️ Extend AXIS_CHAR to include E
    
    Co-Authored-By: DerAndere <26200979+DerAndere1@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index c9a44e0c64..47b5a3e20b 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -432,7 +432,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   const bool is_inch = parser.using_inch_units();
   const AxisEnum a = TERN(LCD_SHOW_E_TOTAL, axis == E_AXIS ? X_AXIS : axis, axis);
   const uint8_t offs = a * (is_inch ? XYZ_SPACING_IN : XYZ_SPACING);
-  lcd_put_wchar((is_inch ? X_LABEL_POS_IN : X_LABEL_POS) + offs, XYZ_BASELINE, axis_codes[axis]);
+  lcd_put_wchar((is_inch ? X_LABEL_POS_IN : X_LABEL_POS) + offs, XYZ_BASELINE, AXIS_CHAR(axis));
   lcd_moveto((is_inch ? X_VALUE_POS_IN : X_VALUE_POS) + offs, XYZ_BASELINE);
 
   if (blink)

commit 755c196cfa92fa1b9e139d39e83e490305822212
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Mar 4 15:18:27 2022 -0600

    🚸 12345.6 num-to-string

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index cac8ffd6ac..c9a44e0c64 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -674,7 +674,7 @@ void MarlinUI::draw_status_screen() {
         #if CUTTER_UNIT_IS(PERCENT)
           lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, cutter_power2str(cutter.unitPower));
         #elif CUTTER_UNIT_IS(RPM)
-          lcd_put_u8str(STATUS_CUTTER_TEXT_X - 2, STATUS_CUTTER_TEXT_Y, ftostr51rj(float(cutter.unitPower) / 1000));
+          lcd_put_u8str(STATUS_CUTTER_TEXT_X - 2, STATUS_CUTTER_TEXT_Y, ftostr61rj(float(cutter.unitPower) / 1000));
           lcd_put_wchar('K');
         #else
           lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, cutter_power2str(cutter.unitPower));

commit 3315ff8856fba816f73abb3164393136ebe9062b
Author: Taylor Talkington <taylor.talkington@gmail.com>
Date:   Mon Jan 17 00:34:50 2022 -0500

    💄 MarlinUI+DOGM leveled bed bitmaps (#23539)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index aabca82fde..cac8ffd6ac 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -49,6 +49,10 @@
   #include "../../module/planner.h"
 #endif
 
+#if HAS_LEVELING
+  #include "../../module/planner.h"
+#endif
+
 #if HAS_CUTTER
   #include "../../feature/spindle_laser.h"
 #endif
@@ -602,7 +606,13 @@ void MarlinUI::draw_status_screen() {
 
   #if DO_DRAW_BED && DISABLED(STATUS_COMBINE_HEATERS)
     #if ANIM_BED
-      #define BED_BITMAP(S) ((S) ? status_bed_on_bmp : status_bed_bmp)
+      #if BOTH(HAS_LEVELING, STATUS_ALT_BED_BITMAP)
+        #define BED_BITMAP(S) ((S) \
+          ? (planner.leveling_active ? status_bed_leveled_on_bmp : status_bed_on_bmp) \
+          : (planner.leveling_active ? status_bed_leveled_bmp : status_bed_bmp))
+      #else
+        #define BED_BITMAP(S) ((S) ? status_bed_on_bmp : status_bed_bmp)
+      #endif
     #else
       #define BED_BITMAP(S) status_bed_bmp
     #endif

commit 24d1d3eb5cc4e7415e77393d35e40fb4124bc672
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jan 12 09:47:22 2022 -0600

    💡 Misc. cleanup, comments

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 52554e5df8..aabca82fde 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -57,7 +57,7 @@
   #include "../../feature/cooler.h"
 #endif
 
-#if ENABLED(I2C_AMMETER)
+#if DO_DRAW_AMMETER
   #include "../../feature/ammeter.h"
 #endif
 

commit 1f3f9cb68ce9c9adad55a98ccea07e491d7b9785
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 19 05:52:41 2021 -0500

    🎨 Pragma GCC cleanup

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 847c13d3ac..52554e5df8 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -862,17 +862,15 @@ void MarlinUI::draw_status_screen() {
             mix_label = PSTR("Mx");
           }
 
+        #pragma GCC diagnostic push
         #if GCC_VERSION <= 50000
-          #pragma GCC diagnostic push
           #pragma GCC diagnostic ignored "-Wformat-overflow"
         #endif
 
         sprintf_P(mixer_messages, PSTR(S_FMT " %d;%d%% "), mix_label, int(mixer.mix[0]), int(mixer.mix[1]));
         lcd_put_u8str(X_LABEL_POS, XYZ_BASELINE, mixer_messages);
 
-        #if GCC_VERSION <= 50000
-          #pragma GCC diagnostic pop
-        #endif
+        #pragma GCC diagnostic pop
 
       #else
 

commit eeffac697c5d7b69e01e38ed1602dbd21a366e93
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 25 23:52:41 2021 -0500

    🎨 Apply F() to UTF-8/MMU2 string put

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 8b707ba7c7..847c13d3ac 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -191,7 +191,7 @@
 
 FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, const uint8_t ty) {
   if (temp < 0)
-    lcd_put_u8str(tx - 3 * (INFO_FONT_WIDTH) / 2 + 1, ty, "err");
+    lcd_put_u8str(tx - 3 * (INFO_FONT_WIDTH) / 2 + 1, ty, F("err"));
   else {
     const char *str = i16tostr3rj(temp);
     const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
@@ -436,7 +436,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   else if (axis_should_home(axis))
     while (const char c = *value++) lcd_put_wchar(c <= '.' ? c : '?');
   else if (NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING) && !axis_is_trusted(axis))
-    lcd_put_u8str_P(axis == Z_AXIS ? PSTR("       ") : PSTR("    "));
+    lcd_put_u8str(axis == Z_AXIS ? F("       ") : F("    "));
   else
     lcd_put_u8str(value);
 }
@@ -777,7 +777,7 @@ void MarlinUI::draw_status_screen() {
           }
         }
         else if (progress_state == 2 && estimation_string[0]) {
-          lcd_put_u8str_P(PROGRESS_BAR_X, EXTRAS_BASELINE, PSTR("R:"));
+          lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, F("R:"));
           lcd_put_u8str(estimation_x_pos, EXTRAS_BASELINE, estimation_string);
         }
         else if (elapsed_string[0]) {
@@ -879,7 +879,7 @@ void MarlinUI::draw_status_screen() {
         if (show_e_total) {
           #if ENABLED(LCD_SHOW_E_TOTAL)
             _draw_axis_value(E_AXIS, xstring, true);
-            lcd_put_u8str_P(PSTR("       "));
+            lcd_put_u8str(F("       "));
           #endif
         }
         else {
@@ -918,7 +918,7 @@ void MarlinUI::draw_status_screen() {
       lcd_put_u8str(102, EXTRAS_2_BASELINE, mstring);
       lcd_put_wchar('%');
       set_font(FONT_MENU);
-      lcd_put_wchar(47, EXTRAS_2_BASELINE, LCD_STR_FILAM_DIA[0]); // lcd_put_u8str_P(PSTR(LCD_STR_FILAM_DIA));
+      lcd_put_wchar(47, EXTRAS_2_BASELINE, LCD_STR_FILAM_DIA[0]); // lcd_put_u8str(F(LCD_STR_FILAM_DIA));
       lcd_put_wchar(93, EXTRAS_2_BASELINE, LCD_STR_FILAM_MUL[0]);
     #endif
   }
@@ -932,10 +932,10 @@ void MarlinUI::draw_status_screen() {
     #if BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
       // Alternate Status message and Filament display
       if (ELAPSED(millis(), next_filament_display)) {
-        lcd_put_u8str_P(PSTR(LCD_STR_FILAM_DIA));
+        lcd_put_u8str(F(LCD_STR_FILAM_DIA));
         lcd_put_wchar(':');
         lcd_put_u8str(wstring);
-        lcd_put_u8str_P(PSTR("  " LCD_STR_FILAM_MUL));
+        lcd_put_u8str(F("  " LCD_STR_FILAM_MUL));
         lcd_put_wchar(':');
         lcd_put_u8str(mstring);
         lcd_put_wchar('%');

commit 09af42e1af38b441d44ddcc71b9d6906ce68b51d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Aug 17 06:18:19 2021 -0500

    Clean up CrealityUI and MarlinUI (#22586)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 5fe8b61bf4..8b707ba7c7 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -456,13 +456,13 @@ void MarlinUI::draw_status_screen() {
   #endif
 
   #if HAS_PRINT_PROGRESS
-    #if DISABLED(DOGM_SD_PERCENT)
+    #if DISABLED(SHOW_SD_PERCENT)
       #define _SD_INFO_X(len) (PROGRESS_BAR_X + (PROGRESS_BAR_WIDTH) / 2 - (len) * (MENU_FONT_WIDTH) / 2)
     #else
       #define _SD_INFO_X(len) (LCD_PIXEL_WIDTH - (len) * (MENU_FONT_WIDTH))
     #endif
 
-    #if ENABLED(DOGM_SD_PERCENT)
+    #if ENABLED(SHOW_SD_PERCENT)
       static char progress_string[5];
     #endif
     static uint8_t lastElapsed = 0xFF, lastProgress = 0xFF;
@@ -471,7 +471,7 @@ void MarlinUI::draw_status_screen() {
     #if ENABLED(SHOW_REMAINING_TIME)
       static u8g_uint_t estimation_x_pos = 0;
       static char estimation_string[10];
-      #if BOTH(DOGM_SD_PERCENT, ROTATE_PROGRESS_DISPLAY)
+      #if BOTH(SHOW_SD_PERCENT, ROTATE_PROGRESS_DISPLAY)
         static u8g_uint_t progress_x_pos = 0;
         static uint8_t progress_state = 0;
         static bool prev_blink = 0;
@@ -526,7 +526,7 @@ void MarlinUI::draw_status_screen() {
 
         progress_bar_solid_width = u8g_uint_t((PROGRESS_BAR_WIDTH - 2) * (progress / (PROGRESS_SCALE)) * 0.01f);
 
-        #if ENABLED(DOGM_SD_PERCENT)
+        #if ENABLED(SHOW_SD_PERCENT)
           if (progress == 0) {
             progress_string[0] = '\0';
             #if ENABLED(SHOW_REMAINING_TIME)
@@ -543,7 +543,7 @@ void MarlinUI::draw_status_screen() {
         #endif
       }
 
-      constexpr bool can_show_days = DISABLED(DOGM_SD_PERCENT) || ENABLED(ROTATE_PROGRESS_DISPLAY);
+      constexpr bool can_show_days = DISABLED(SHOW_SD_PERCENT) || ENABLED(ROTATE_PROGRESS_DISPLAY);
       if (ev != lastElapsed) {
         lastElapsed = ev;
         const uint8_t len = elapsed.toDigital(elapsed_string, can_show_days && elapsed.value >= 60*60*24L);
@@ -564,11 +564,7 @@ void MarlinUI::draw_status_screen() {
             else {
               duration_t estimation = timeval;
               const uint8_t len = estimation.toDigital(estimation_string, can_show_days && estimation.value >= 60*60*24L);
-              estimation_x_pos = _SD_INFO_X(len
-                #if !BOTH(DOGM_SD_PERCENT, ROTATE_PROGRESS_DISPLAY)
-                  + 1
-                #endif
-              );
+              estimation_x_pos = _SD_INFO_X(len + !BOTH(SHOW_SD_PERCENT, ROTATE_PROGRESS_DISPLAY));
             }
           }
         #endif
@@ -767,7 +763,7 @@ void MarlinUI::draw_status_screen() {
 
     if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)) {
 
-      #if ALL(DOGM_SD_PERCENT, SHOW_REMAINING_TIME, ROTATE_PROGRESS_DISPLAY)
+      #if ALL(SHOW_SD_PERCENT, SHOW_REMAINING_TIME, ROTATE_PROGRESS_DISPLAY)
 
         if (prev_blink != blink) {
           prev_blink = blink;
@@ -789,13 +785,13 @@ void MarlinUI::draw_status_screen() {
           lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
         }
 
-      #else // !DOGM_SD_PERCENT || !SHOW_REMAINING_TIME || !ROTATE_PROGRESS_DISPLAY
+      #else // !SHOW_SD_PERCENT || !SHOW_REMAINING_TIME || !ROTATE_PROGRESS_DISPLAY
 
         //
         // SD Percent Complete
         //
 
-        #if ENABLED(DOGM_SD_PERCENT)
+        #if ENABLED(SHOW_SD_PERCENT)
           if (progress_string[0]) {
             lcd_put_u8str(55, EXTRAS_BASELINE, progress_string); // Percent complete
             lcd_put_wchar('%');
@@ -815,7 +811,7 @@ void MarlinUI::draw_status_screen() {
         #endif
             lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
 
-      #endif // !DOGM_SD_PERCENT || !SHOW_REMAINING_TIME || !ROTATE_PROGRESS_DISPLAY
+      #endif // !SHOW_SD_PERCENT || !SHOW_REMAINING_TIME || !ROTATE_PROGRESS_DISPLAY
     }
 
   #endif // HAS_PRINT_PROGRESS

commit 178f9a77a88b333470725e0e19d033859721656b
Author: ellensp <ellensp@hotmail.com>
Date:   Wed Jul 21 07:44:15 2021 +1200

    🐛 Fix STATUS_COMBINE_HEATERS compile (#22405)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index a66aca6d19..5fe8b61bf4 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -264,29 +264,33 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
       #define HOTEND_BITMAP(N,S) status_hotend_a_bmp
     #endif
 
-    if (PAGE_CONTAINS(STATUS_HEATERS_Y, STATUS_HEATERS_BOT)) {
+    #if DISABLED(STATUS_COMBINE_HEATERS)
 
-      #define BAR_TALL (STATUS_HEATERS_HEIGHT - 2)
+      if (PAGE_CONTAINS(STATUS_HEATERS_Y, STATUS_HEATERS_BOT)) {
 
-      const float prop = target - 20,
-                  perc = prop > 0 && temp >= 20 ? (temp - 20) / prop : 0;
-      uint8_t tall = uint8_t(perc * BAR_TALL + 0.5f);
-      NOMORE(tall, BAR_TALL);
+        #define BAR_TALL (STATUS_HEATERS_HEIGHT - 2)
 
-      // Draw hotend bitmap, either whole or split by the heating percent
-      const uint8_t hx = STATUS_HOTEND_X(heater_id),
-                    bw = STATUS_HOTEND_BYTEWIDTH(heater_id);
-      #if ENABLED(STATUS_HEAT_PERCENT)
-        if (isHeat && tall <= BAR_TALL) {
-          const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
-          u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, ph, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), false));
-          u8g.drawBitmapP(hx, STATUS_HEATERS_Y + ph, bw, tall + 1, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), true) + ph * bw);
-        }
-        else
-      #endif
-          u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), isHeat));
+        const float prop = target - 20,
+                    perc = prop > 0 && temp >= 20 ? (temp - 20) / prop : 0;
+        uint8_t tall = uint8_t(perc * BAR_TALL + 0.5f);
+        NOMORE(tall, BAR_TALL);
 
-    } // PAGE_CONTAINS
+        // Draw hotend bitmap, either whole or split by the heating percent
+        const uint8_t hx = STATUS_HOTEND_X(heater_id),
+                      bw = STATUS_HOTEND_BYTEWIDTH(heater_id);
+        #if ENABLED(STATUS_HEAT_PERCENT)
+          if (isHeat && tall <= BAR_TALL) {
+            const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
+            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, ph, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), false));
+            u8g.drawBitmapP(hx, STATUS_HEATERS_Y + ph, bw, tall + 1, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), true) + ph * bw);
+          }
+          else
+        #endif
+            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), isHeat));
+
+      } // PAGE_CONTAINS
+
+    #endif // !STATUS_COMBINE_HEATERS
 
     if (PAGE_UNDER(7)) {
       #if HEATER_IDLE_HANDLER

commit 286f6ba0bd2ab4d405fc83d913399130fa063f9a
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Sun Jul 18 20:11:24 2021 -0500

    🐛 Fix Ammeter display on DOGM (#22384)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index d58be4dbaf..a66aca6d19 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -57,6 +57,10 @@
   #include "../../feature/cooler.h"
 #endif
 
+#if ENABLED(I2C_AMMETER)
+  #include "../../feature/ammeter.h"
+#endif
+
 #if HAS_POWER_MONITOR
   #include "../../feature/power_monitor.h"
 #endif

commit 6bf6973e9d02caab4dab8190e1191b7675cd8549
Author: ellensp <ellensp@hotmail.com>
Date:   Tue Jun 22 08:09:21 2021 +1200

    🐛 Fix heater display options/compile (#22185)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 8309c3a00e..d58be4dbaf 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -236,18 +236,12 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
       #define HOTEND_DOT    false
     #endif
 
-    #if ANIM_HOTEND && BOTH(STATUS_HOTEND_INVERTED, STATUS_HOTEND_NUMBERLESS)
-      #define OFF_BMP(N) status_hotend_b_bmp
-      #define ON_BMP(N)  status_hotend_a_bmp
-    #elif ANIM_HOTEND && DISABLED(STATUS_HOTEND_INVERTED) && ENABLED(STATUS_HOTEND_NUMBERLESS)
-      #define OFF_BMP(N) status_hotend_a_bmp
-      #define ON_BMP(N)  status_hotend_b_bmp
-    #elif BOTH(ANIM_HOTEND, STATUS_HOTEND_INVERTED)
-      #define OFF_BMP(N) status_hotend##N##_b_bmp
-      #define ON_BMP(N)  status_hotend##N##_a_bmp
+    #if ENABLED(STATUS_HOTEND_NUMBERLESS)
+      #define OFF_BMP(N) TERN(STATUS_HOTEND_INVERTED, status_hotend_b_bmp, status_hotend_a_bmp)
+      #define ON_BMP(N)  TERN(STATUS_HOTEND_INVERTED, status_hotend_a_bmp, status_hotend_b_bmp)
     #else
-      #define OFF_BMP(N) status_hotend##N##_a_bmp
-      #define ON_BMP(N)  status_hotend##N##_b_bmp
+      #define OFF_BMP(N) TERN(STATUS_HOTEND_INVERTED, status_hotend##N##_b_bmp, status_hotend##N##_a_bmp)
+      #define ON_BMP(N)  TERN(STATUS_HOTEND_INVERTED, status_hotend##N##_a_bmp, status_hotend##N##_b_bmp)
     #endif
 
     #if STATUS_HOTEND_BITMAPS > 1
@@ -275,20 +269,18 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
       uint8_t tall = uint8_t(perc * BAR_TALL + 0.5f);
       NOMORE(tall, BAR_TALL);
 
-      #if ANIM_HOTEND
-        // Draw hotend bitmap, either whole or split by the heating percent
-        const uint8_t hx = STATUS_HOTEND_X(heater_id),
-                      bw = STATUS_HOTEND_BYTEWIDTH(heater_id);
-        #if ENABLED(STATUS_HEAT_PERCENT)
-          if (isHeat && tall <= BAR_TALL) {
-            const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
-            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, ph, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), false));
-            u8g.drawBitmapP(hx, STATUS_HEATERS_Y + ph, bw, tall + 1, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), true) + ph * bw);
-          }
-          else
-        #endif
-            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), isHeat));
+      // Draw hotend bitmap, either whole or split by the heating percent
+      const uint8_t hx = STATUS_HOTEND_X(heater_id),
+                    bw = STATUS_HOTEND_BYTEWIDTH(heater_id);
+      #if ENABLED(STATUS_HEAT_PERCENT)
+        if (isHeat && tall <= BAR_TALL) {
+          const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
+          u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, ph, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), false));
+          u8g.drawBitmapP(hx, STATUS_HEATERS_Y + ph, bw, tall + 1, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), true) + ph * bw);
+        }
+        else
       #endif
+          u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), isHeat));
 
     } // PAGE_CONTAINS
 

commit d320545066676338d4a0142268931bb66eedfccc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jun 8 07:51:28 2021 -0500

    🎨 Laser Ammeter followup (#22079)
    
    Followup to #21835

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 00e8af66e2..8309c3a00e 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -207,7 +207,7 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
 
 #if DO_DRAW_AMMETER
   FORCE_INLINE void _draw_centered_current(const float current, const uint8_t tx, const uint8_t ty) {
-    const char *str = ftostr31ns(current);           
+    const char *str = ftostr31ns(current);
     const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
     lcd_put_u8str(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty, &str[3-len]);
   }
@@ -697,7 +697,7 @@ void MarlinUI::draw_status_screen() {
       const uint8_t ammetery = STATUS_AMMETER_Y(status_ammeter_bmp_mA),
                     ammeterh = STATUS_AMMETER_HEIGHT(status_ammeter_bmp_mA);
        if (PAGE_CONTAINS(ammetery, ammetery + ammeterh - 1))
-        u8g.drawBitmapP(STATUS_AMMETER_X, ammetery, STATUS_AMMETER_BYTEWIDTH, ammeterh, (ammeter.current < .1) ? status_ammeter_bmp_mA : status_ammeter_bmp_A);
+        u8g.drawBitmapP(STATUS_AMMETER_X, ammetery, STATUS_AMMETER_BYTEWIDTH, ammeterh, (ammeter.current < 0.1f) ? status_ammeter_bmp_mA : status_ammeter_bmp_A);
     #endif
 
     // Heated Bed

commit 002e1d49fe7e39ca82730876f0a384bb60ce4190
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Mon Jun 7 14:15:09 2021 -0500

    Add Laser Based I2C Ammeter Feature (#21835)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index f05958e675..00e8af66e2 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -205,6 +205,14 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
   }
 #endif
 
+#if DO_DRAW_AMMETER
+  FORCE_INLINE void _draw_centered_current(const float current, const uint8_t tx, const uint8_t ty) {
+    const char *str = ftostr31ns(current);           
+    const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
+    lcd_put_u8str(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty, &str[3-len]);
+  }
+#endif
+
 #if DO_DRAW_HOTENDS
 
   // Draw hotend bitmap with current and target temperatures
@@ -404,6 +412,13 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
   }
 #endif
 
+#if DO_DRAW_AMMETER
+  FORCE_INLINE void _draw_ammeter_status() {
+    if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
+      _draw_centered_current(ammeter.read(), STATUS_AMMETER_TEXT_X, 28);
+  }
+#endif
+
 //
 // Before homing, blink '123' <-> '???'.
 // Homed but unknown... '123' <-> '   '.
@@ -677,6 +692,13 @@ void MarlinUI::draw_status_screen() {
         u8g.drawBitmapP(STATUS_FLOWMETER_X, flowmetery, STATUS_FLOWMETER_BYTEWIDTH, flowmeterh, blink && cooler.flowpulses ? status_flowmeter_bmp2 : status_flowmeter_bmp1);
     #endif
 
+    // Laser Ammeter
+    #if DO_DRAW_AMMETER
+      const uint8_t ammetery = STATUS_AMMETER_Y(status_ammeter_bmp_mA),
+                    ammeterh = STATUS_AMMETER_HEIGHT(status_ammeter_bmp_mA);
+       if (PAGE_CONTAINS(ammetery, ammetery + ammeterh - 1))
+        u8g.drawBitmapP(STATUS_AMMETER_X, ammetery, STATUS_AMMETER_BYTEWIDTH, ammeterh, (ammeter.current < .1) ? status_ammeter_bmp_mA : status_ammeter_bmp_A);
+    #endif
 
     // Heated Bed
     TERN_(DO_DRAW_BED, _draw_bed_status(blink));
@@ -690,6 +712,9 @@ void MarlinUI::draw_status_screen() {
     // Flowmeter
     TERN_(DO_DRAW_FLOWMETER, _draw_flowmeter_status());
 
+    // Flowmeter
+    TERN_(DO_DRAW_AMMETER, _draw_ammeter_status());
+
     // Fan, if a bitmap was provided
     #if DO_DRAW_FAN
       if (PAGE_CONTAINS(STATUS_FAN_TEXT_Y - INFO_FONT_ASCENT, STATUS_FAN_TEXT_Y - 1)) {

commit dd4990252e891cdfe56cb7d6e3bbe1e6289be649
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon May 24 16:38:57 2021 -0500

    ♻️ Refactor Linear / Logical / Distinct Axes (#21953)
    
    * More patches supporting EXTRUDERS 0
    * Extend types in prep for more axes

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 010d9a6680..f05958e675 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -856,8 +856,10 @@ void MarlinUI::draw_status_screen() {
       #else
 
         if (show_e_total) {
-          _draw_axis_value(E_AXIS, xstring, true);
-          lcd_put_u8str_P(PSTR("       "));
+          #if ENABLED(LCD_SHOW_E_TOTAL)
+            _draw_axis_value(E_AXIS, xstring, true);
+            lcd_put_u8str_P(PSTR("       "));
+          #endif
         }
         else {
           _draw_axis_value(X_AXIS, xstring, blink);

commit b65cdbed91782c83188706a9c340de9c503cf430
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat May 8 04:35:35 2021 -0500

    Signal SD completion later (#21840)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 33cb9575f1..010d9a6680 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -41,7 +41,7 @@
 #include "../../gcode/parser.h" // for units (and volumetric)
 
 #if ENABLED(LCD_SHOW_E_TOTAL)
-  #include "../../MarlinCore.h" // for printingIsActive(), marlin_state and MF_SD_COMPLETE
+  #include "../../MarlinCore.h" // for printingIsActive()
 #endif
 
 #if ENABLED(FILAMENT_LCD_DISPLAY)
@@ -464,7 +464,7 @@ void MarlinUI::draw_status_screen() {
     #endif
   #endif
 
-  const bool show_e_total = TERN0(LCD_SHOW_E_TOTAL, printingIsActive() || marlin_state == MF_SD_COMPLETE);
+  const bool show_e_total = TERN0(LCD_SHOW_E_TOTAL, printingIsActive());
 
   // At the first page, generate new display values
   if (first_page) {

commit 01741576ebea06faa4ec98623a28eab19251f111
Author: charlespick <charles.pickering19@gmail.com>
Date:   Fri May 7 23:44:34 2021 -0700

    Active MMU slot indicator (#21842)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 681e8da01d..33cb9575f1 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -274,12 +274,12 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
         #if ENABLED(STATUS_HEAT_PERCENT)
           if (isHeat && tall <= BAR_TALL) {
             const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
-            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, ph, HOTEND_BITMAP(heater_id, false));
-            u8g.drawBitmapP(hx, STATUS_HEATERS_Y + ph, bw, tall + 1, HOTEND_BITMAP(heater_id, true) + ph * bw);
+            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, ph, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), false));
+            u8g.drawBitmapP(hx, STATUS_HEATERS_Y + ph, bw, tall + 1, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), true) + ph * bw);
           }
           else
         #endif
-            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(heater_id, isHeat));
+            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(TERN(HAS_MMU, active_extruder, heater_id), isHeat));
       #endif
 
     } // PAGE_CONTAINS

commit f09fa69e867d1cfb18cbad720a5c1e566cb1bab4
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat May 8 01:41:40 2021 -0500

    Add and apply REPEAT_1 macro

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 68b75900ef..681e8da01d 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -243,9 +243,11 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
     #endif
 
     #if STATUS_HOTEND_BITMAPS > 1
-      static const unsigned char* const status_hotend_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, OFF_BMP(1), OFF_BMP(2), OFF_BMP(3), OFF_BMP(4), OFF_BMP(5), OFF_BMP(6));
+      #define _OFF_BMP(N) OFF_BMP(N),
+      #define _ON_BMP(N)   ON_BMP(N),
+      static const unsigned char* const status_hotend_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = { REPEAT_1(STATUS_HOTEND_BITMAPS, _OFF_BMP) };
       #if ANIM_HOTEND
-        static const unsigned char* const status_hotend_on_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, ON_BMP(1), ON_BMP(2), ON_BMP(3), ON_BMP(4), ON_BMP(5), ON_BMP(6));
+        static const unsigned char* const status_hotend_on_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = { REPEAT_1(STATUS_HOTEND_BITMAPS, _ON_BMP) };
         #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr((S) ? &status_hotend_on_gfx[(N) % (STATUS_HOTEND_BITMAPS)] : &status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
       #else
         #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr(&status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])

commit e4f60f82a4cbcac1921b6bf444fa803910e2adf3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 30 03:21:59 2021 -0500

    Heater error status

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 81e89f7cf5..68b75900ef 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -186,10 +186,14 @@
 #define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
 
 FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, const uint8_t ty) {
-  const char *str = i16tostr3rj(temp);
-  const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
-  lcd_put_u8str(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty, &str[3-len]);
-  lcd_put_wchar(LCD_STR_DEGREE[0]);
+  if (temp < 0)
+    lcd_put_u8str(tx - 3 * (INFO_FONT_WIDTH) / 2 + 1, ty, "err");
+  else {
+    const char *str = i16tostr3rj(temp);
+    const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
+    lcd_put_u8str(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty, &str[3-len]);
+    lcd_put_wchar(LCD_STR_DEGREE[0]);
+  }
 }
 
 #if DO_DRAW_FLOWMETER

commit c4620bb5285438e41fa4c39229aa2a39859877ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 23 20:19:23 2021 -0500

    Add whole-degree accessors, simplify some temperature-related features (#21685)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index e2bffb7fe0..81e89f7cf5 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -213,7 +213,7 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
 
     const uint8_t tx = STATUS_HOTEND_TEXT_X(heater_id);
 
-    const celsius_t temp = thermalManager.degHotend(heater_id),
+    const celsius_t temp = thermalManager.wholeDegHotend(heater_id),
                   target = thermalManager.degTargetHotend(heater_id);
 
     #if DISABLED(STATUS_HOTEND_ANIM)
@@ -310,7 +310,7 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
 
     const uint8_t tx = STATUS_BED_TEXT_X;
 
-    const celsius_t temp = thermalManager.degBed(),
+    const celsius_t temp = thermalManager.wholeDegBed(),
                   target = thermalManager.degTargetBed();
 
     #if ENABLED(STATUS_HEAT_PERCENT) || DISABLED(STATUS_BED_ANIM)
@@ -380,14 +380,14 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
         _draw_centered_temp(thermalManager.degTargetChamber(), STATUS_CHAMBER_TEXT_X, 7);
     #endif
     if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
-      _draw_centered_temp(thermalManager.degChamber(), STATUS_CHAMBER_TEXT_X, 28);
+      _draw_centered_temp(thermalManager.wholeDegChamber(), STATUS_CHAMBER_TEXT_X, 28);
   }
 #endif
 
 #if DO_DRAW_COOLER
   FORCE_INLINE void _draw_cooler_status() {
     if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
-      _draw_centered_temp(thermalManager.degCooler(), STATUS_COOLER_TEXT_X, 28);
+      _draw_centered_temp(thermalManager.wholeDegCooler(), STATUS_COOLER_TEXT_X, 28);
   }
 #endif
 

commit cc5297d637d2a0a784e336210c366baf250785d0
Author: XDA-Bam <1209896+XDA-Bam@users.noreply.github.com>
Date:   Wed Apr 14 11:42:04 2021 +0200

    Space-separate scrolling Status Message (#21523)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 119de19d9d..e2bffb7fe0 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -959,13 +959,16 @@ void MarlinUI::draw_status_message(const bool blink) {
 
       // If the remaining string doesn't completely fill the screen
       if (rlen < lcd_width) {
-        lcd_put_wchar('.');                     // Always at 1+ spaces left, draw a dot
         uint8_t chars = lcd_width - rlen;       // Amount of space left in characters
-        if (--chars) {                          // Draw a second dot if there's space
-          lcd_put_wchar('.');
-          if (--chars) {                        // Print a second copy of the message
-            lcd_put_u8str_max(status_message, pixel_width - (rlen + 2) * (MENU_FONT_WIDTH));
+        lcd_put_wchar(' ');                     // Always at 1+ spaces left, draw a space
+        if (--chars) {                          // Draw a second space if there's room
+          lcd_put_wchar(' ');
+          if (--chars) {                        // Draw a third space if there's room
             lcd_put_wchar(' ');
+            if (--chars) {                      // Print a second copy of the message
+              lcd_put_u8str_max(status_message, pixel_width - (rlen + 2) * (MENU_FONT_WIDTH));
+              lcd_put_wchar(' ');
+            }
           }
         }
       }

commit a5f0075a600b6cc607e7e3b2d7c2571d39c91280
Author: gmarsh <garymarsh23@gmail.com>
Date:   Tue Apr 13 17:17:52 2021 -0300

    Fix and improve Power Monitor (#21551)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 7e638a645e..119de19d9d 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -136,7 +136,7 @@
     #if ENABLED(POWER_MONITOR_CURRENT)
       const bool iflag = power_monitor.current_display_enabled();
     #endif
-    #if HAS_POWER_MONITOR_VREF
+    #if ENABLED(POWER_MONITOR_VOLTAGE)
       const bool vflag = power_monitor.voltage_display_enabled();
     #endif
 
@@ -148,7 +148,7 @@
       }
     #elif ENABLED(POWER_MONITOR_CURRENT)
       power_monitor.display_item = 0;
-    #elif HAS_POWER_MONITOR_VREF
+    #elif ENABLED(POWER_MONITOR_VOLTAGE)
       power_monitor.display_item = 1;
     #endif
 
@@ -157,7 +157,7 @@
       #if ENABLED(POWER_MONITOR_CURRENT)
         if (power_monitor.display_item == 0 && !iflag) ++power_monitor.display_item;
       #endif
-      #if HAS_POWER_MONITOR_VREF
+      #if ENABLED(POWER_MONITOR_VOLTAGE)
         if (power_monitor.display_item == 1 && !vflag) ++power_monitor.display_item;
       #endif
       #if HAS_POWER_MONITOR_WATTS
@@ -170,7 +170,7 @@
       #if ENABLED(POWER_MONITOR_CURRENT)                // Current
         case 0: if (iflag) power_monitor.draw_current(); break;
       #endif
-      #if HAS_POWER_MONITOR_VREF                        // Voltage
+      #if ENABLED(POWER_MONITOR_VOLTAGE)                        // Voltage
         case 1: if (vflag) power_monitor.draw_voltage(); break;
       #endif
       #if HAS_POWER_MONITOR_WATTS                       // Power

commit fd99ea09ecb41bc1dfc5e4109e0d6c7de1f87424
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Apr 13 04:00:39 2021 -0500

    Add fan percent accessors

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 793bcd752f..7e638a645e 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -696,7 +696,7 @@ void MarlinUI::draw_status_screen() {
               c = '*';
             }
           #endif
-          lcd_put_u8str(STATUS_FAN_TEXT_X, STATUS_FAN_TEXT_Y, i16tostr3rj(thermalManager.fanPercent(spd)));
+          lcd_put_u8str(STATUS_FAN_TEXT_X, STATUS_FAN_TEXT_Y, i16tostr3rj(thermalManager.pwmToPercent(spd)));
           lcd_put_wchar(c);
         }
       }

commit 24a095c5c14b60bcbffc2807d2c8cc8e9af46e90
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Apr 12 16:49:53 2021 -0500

    Reduce math library code size by 3.4KB (#21575)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 921dee0e34..793bcd752f 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -835,13 +835,17 @@ void MarlinUI::draw_status_screen() {
             mix_label = PSTR("Mx");
           }
 
-        #pragma GCC diagnostic push
-        #pragma GCC diagnostic ignored "-Wformat-overflow"
+        #if GCC_VERSION <= 50000
+          #pragma GCC diagnostic push
+          #pragma GCC diagnostic ignored "-Wformat-overflow"
+        #endif
 
         sprintf_P(mixer_messages, PSTR(S_FMT " %d;%d%% "), mix_label, int(mixer.mix[0]), int(mixer.mix[1]));
         lcd_put_u8str(X_LABEL_POS, XYZ_BASELINE, mixer_messages);
 
-        #pragma GCC diagnostic pop
+        #if GCC_VERSION <= 50000
+          #pragma GCC diagnostic pop
+        #endif
 
       #else
 

commit 235ba926021709e293f33b7229690406761298e4
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Thu Apr 1 19:29:49 2021 -0500

    Followup to Laser Flow Meter (#21498)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 2ec462c34a..921dee0e34 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -53,7 +53,7 @@
   #include "../../feature/spindle_laser.h"
 #endif
 
-#if HAS_COOLER || HAS_FLOWMETER
+#if EITHER(HAS_COOLER, LASER_COOLANT_FLOW_METER)
   #include "../../feature/cooler.h"
 #endif
 

commit ccdbffbf3f599f0860c643647ce6c40f1eb5a4cd
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Mon Mar 29 01:41:56 2021 -0500

    Laser Coolant Flow Meter / Safety Shutdown (#21431)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 7d97a1cdcf..2ec462c34a 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -53,6 +53,10 @@
   #include "../../feature/spindle_laser.h"
 #endif
 
+#if HAS_COOLER || HAS_FLOWMETER
+  #include "../../feature/cooler.h"
+#endif
+
 #if HAS_POWER_MONITOR
   #include "../../feature/power_monitor.h"
 #endif
@@ -83,40 +87,34 @@
 
 #if ANIM_HBCC
   enum HeatBits : uint8_t {
-    HEATBIT_HOTEND,
-    HEATBIT_BED = HOTENDS,
-    HEATBIT_CHAMBER,
-    HEATBIT_COOLER,
-    HEATBIT_CUTTER
+    DRAWBIT_HOTEND,
+    DRAWBIT_BED = HOTENDS,
+    DRAWBIT_CHAMBER,
+    DRAWBIT_CUTTER
   };
-  IF<(HEATBIT_CUTTER > 7), uint16_t, uint8_t>::type heat_bits;
+  IF<(DRAWBIT_CUTTER > 7), uint16_t, uint8_t>::type draw_bits;
 #endif
 
 #if ANIM_HOTEND
-  #define HOTEND_ALT(N) TEST(heat_bits, HEATBIT_HOTEND + N)
+  #define HOTEND_ALT(N) TEST(draw_bits, DRAWBIT_HOTEND + N)
 #else
   #define HOTEND_ALT(N) false
 #endif
 #if ANIM_BED
-  #define BED_ALT() TEST(heat_bits, HEATBIT_BED)
+  #define BED_ALT() TEST(draw_bits, DRAWBIT_BED)
 #else
   #define BED_ALT() false
 #endif
 #if ANIM_CHAMBER
-  #define CHAMBER_ALT() TEST(heat_bits, HEATBIT_CHAMBER)
+  #define CHAMBER_ALT() TEST(draw_bits, DRAWBIT_CHAMBER)
 #else
   #define CHAMBER_ALT() false
 #endif
 #if ANIM_CUTTER
-  #define CUTTER_ALT(N) TEST(heat_bits, HEATBIT_CUTTER)
+  #define CUTTER_ALT(N) TEST(draw_bits, DRAWBIT_CUTTER)
 #else
   #define CUTTER_ALT() false
 #endif
-#if ANIM_COOLER
-  #define COOLER_ALT(N) TEST(heat_bits, HEATBIT_COOLER)
-#else
-  #define COOLER_ALT() false
-#endif
 
 #if DO_DRAW_HOTENDS
   #define MAX_HOTEND_DRAW _MIN(HOTENDS, ((LCD_PIXEL_WIDTH - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
@@ -194,6 +192,15 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
   lcd_put_wchar(LCD_STR_DEGREE[0]);
 }
 
+#if DO_DRAW_FLOWMETER
+  FORCE_INLINE void _draw_centered_flowrate(const float flow, const uint8_t tx, const uint8_t ty) {
+    const char *str = ftostr11ns(flow);
+    const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
+    lcd_put_u8str(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty, &str[3-len]);
+    lcd_put_u8str("L");
+  }
+#endif
+
 #if DO_DRAW_HOTENDS
 
   // Draw hotend bitmap with current and target temperatures
@@ -384,6 +391,13 @@ FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, co
   }
 #endif
 
+#if DO_DRAW_FLOWMETER
+  FORCE_INLINE void _draw_flowmeter_status() {
+    if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
+      _draw_centered_flowrate(cooler.flowrate, STATUS_FLOWMETER_TEXT_X, 28);
+  }
+#endif
+
 //
 // Before homing, blink '123' <-> '???'.
 // Homed but unknown... '123' <-> '   '.
@@ -451,17 +465,14 @@ void MarlinUI::draw_status_screen() {
     #if ANIM_HBCC
       uint8_t new_bits = 0;
       #if ANIM_HOTEND
-        HOTEND_LOOP() if (thermalManager.isHeatingHotend(e)) SBI(new_bits, HEATBIT_HOTEND + e);
+        HOTEND_LOOP() if (thermalManager.isHeatingHotend(e)) SBI(new_bits, DRAWBIT_HOTEND + e);
       #endif
-      if (TERN0(ANIM_BED, thermalManager.isHeatingBed())) SBI(new_bits, HEATBIT_BED);
+      if (TERN0(ANIM_BED, thermalManager.isHeatingBed())) SBI(new_bits, DRAWBIT_BED);
       #if DO_DRAW_CHAMBER && HAS_HEATED_CHAMBER
-        if (thermalManager.isHeatingChamber()) SBI(new_bits, HEATBIT_CHAMBER);
-      #endif
-      #if DO_DRAW_COOLER && HAS_COOLER
-        if (thermalManager.isLaserCooling()) SBI(new_bits, HEATBIT_COOLER);
+        if (thermalManager.isHeatingChamber()) SBI(new_bits, DRAWBIT_CHAMBER);
       #endif
-      if (TERN0(ANIM_CUTTER, cutter.enabled())) SBI(new_bits, HEATBIT_CUTTER);
-      heat_bits = new_bits;
+      if (TERN0(ANIM_CUTTER, cutter.enabled())) SBI(new_bits, DRAWBIT_CUTTER);
+      draw_bits = new_bits;
     #endif
 
     const xyz_pos_t lpos = current_position.asLogical();
@@ -646,17 +657,21 @@ void MarlinUI::draw_status_screen() {
 
     // Laser Cooler
     #if DO_DRAW_COOLER
-      #if ANIM_COOLER
-        #define COOLER_BITMAP(S) ((S) ? status_cooler_bmp : status_cooler_on_bmp)
-      #else
-        #define COOLER_BITMAP(S) status_cooler_bmp
-      #endif
-      const uint8_t coolery = STATUS_COOLER_Y(COOLER_ALT()),
-                    coolerh = STATUS_COOLER_HEIGHT(COOLER_ALT());
+      const uint8_t coolery = STATUS_COOLER_Y(status_cooler_bmp1),
+                    coolerh = STATUS_COOLER_HEIGHT(status_cooler_bmp1);
       if (PAGE_CONTAINS(coolery, coolery + coolerh - 1))
-        u8g.drawBitmapP(STATUS_COOLER_X, coolery, STATUS_COOLER_BYTEWIDTH, coolerh, COOLER_BITMAP(COOLER_ALT()));
+        u8g.drawBitmapP(STATUS_COOLER_X, coolery, STATUS_COOLER_BYTEWIDTH, coolerh, blink && cooler.enabled ? status_cooler_bmp2 : status_cooler_bmp1);
     #endif
 
+    // Laser Cooler Flow Meter
+    #if DO_DRAW_FLOWMETER
+      const uint8_t flowmetery = STATUS_FLOWMETER_Y(status_flowmeter_bmp1),
+                    flowmeterh = STATUS_FLOWMETER_HEIGHT(status_flowmeter_bmp1);
+       if (PAGE_CONTAINS(flowmetery, flowmetery + flowmeterh - 1))
+        u8g.drawBitmapP(STATUS_FLOWMETER_X, flowmetery, STATUS_FLOWMETER_BYTEWIDTH, flowmeterh, blink && cooler.flowpulses ? status_flowmeter_bmp2 : status_flowmeter_bmp1);
+    #endif
+
+
     // Heated Bed
     TERN_(DO_DRAW_BED, _draw_bed_status(blink));
 
@@ -666,6 +681,9 @@ void MarlinUI::draw_status_screen() {
     // Cooler
     TERN_(DO_DRAW_COOLER, _draw_cooler_status());
 
+    // Flowmeter
+    TERN_(DO_DRAW_FLOWMETER, _draw_flowmeter_status());
+
     // Fan, if a bitmap was provided
     #if DO_DRAW_FAN
       if (PAGE_CONTAINS(STATUS_FAN_TEXT_Y - INFO_FONT_ASCENT, STATUS_FAN_TEXT_Y - 1)) {

commit e5ff55a1be7646b6159e6dedac50bfbe57e6dfa0
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 24 04:11:43 2021 -0500

    Add typedef celsius_t (#21374)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 892ab5218b..7d97a1cdcf 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -187,7 +187,7 @@
 #define PROGRESS_BAR_Y (EXTRAS_BASELINE + 1)
 #define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
 
-FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, const uint8_t ty) {
+FORCE_INLINE void _draw_centered_temp(const celsius_t temp, const uint8_t tx, const uint8_t ty) {
   const char *str = i16tostr3rj(temp);
   const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
   lcd_put_u8str(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty, &str[3-len]);
@@ -206,8 +206,8 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 
     const uint8_t tx = STATUS_HOTEND_TEXT_X(heater_id);
 
-    const float temp = thermalManager.degHotend(heater_id),
-              target = thermalManager.degTargetHotend(heater_id);
+    const celsius_t temp = thermalManager.degHotend(heater_id),
+                  target = thermalManager.degTargetHotend(heater_id);
 
     #if DISABLED(STATUS_HOTEND_ANIM)
       #define STATIC_HOTEND true
@@ -277,11 +277,11 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
       #else
         constexpr bool dodraw = true;
       #endif
-      if (dodraw) _draw_centered_temp(target + 0.5, tx, 7);
+      if (dodraw) _draw_centered_temp(target, tx, 7);
     }
 
     if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
-      _draw_centered_temp(temp + 0.5f, tx, 28);
+      _draw_centered_temp(temp, tx, 28);
 
     if (STATIC_HOTEND && HOTEND_DOT && PAGE_CONTAINS(17, 19)) {
       u8g.setColorIndex(0); // set to white on black
@@ -303,8 +303,8 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 
     const uint8_t tx = STATUS_BED_TEXT_X;
 
-    const float temp = thermalManager.degBed(),
-              target = thermalManager.degTargetBed();
+    const celsius_t temp = thermalManager.degBed(),
+                  target = thermalManager.degTargetBed();
 
     #if ENABLED(STATUS_HEAT_PERCENT) || DISABLED(STATUS_BED_ANIM)
       const bool isHeat = BED_ALT();
@@ -350,11 +350,11 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
       #else
         constexpr bool dodraw = true;
       #endif
-      if (dodraw) _draw_centered_temp(target + 0.5, tx, 7);
+      if (dodraw) _draw_centered_temp(target, tx, 7);
     }
 
     if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
-      _draw_centered_temp(temp + 0.5f, tx, 28);
+      _draw_centered_temp(temp, tx, 28);
 
     if (STATIC_BED && BED_DOT && PAGE_CONTAINS(17, 19)) {
       u8g.setColorIndex(0); // set to white on black
@@ -370,10 +370,10 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
   FORCE_INLINE void _draw_chamber_status() {
     #if HAS_HEATED_CHAMBER
       if (PAGE_UNDER(7))
-        _draw_centered_temp(thermalManager.degTargetChamber() + 0.5f, STATUS_CHAMBER_TEXT_X, 7);
+        _draw_centered_temp(thermalManager.degTargetChamber(), STATUS_CHAMBER_TEXT_X, 7);
     #endif
     if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
-      _draw_centered_temp(thermalManager.degChamber() + 0.5f, STATUS_CHAMBER_TEXT_X, 28);
+      _draw_centered_temp(thermalManager.degChamber(), STATUS_CHAMBER_TEXT_X, 28);
   }
 #endif
 

commit b95e548ddbcbc1c088eabc17992d0a06f82ac167
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Sat Mar 6 14:13:28 2021 -0600

    Cooler (for Laser) - M143, M193 (#21255)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 8ae6ab6627..892ab5218b 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -86,6 +86,7 @@
     HEATBIT_HOTEND,
     HEATBIT_BED = HOTENDS,
     HEATBIT_CHAMBER,
+    HEATBIT_COOLER,
     HEATBIT_CUTTER
   };
   IF<(HEATBIT_CUTTER > 7), uint16_t, uint8_t>::type heat_bits;
@@ -111,6 +112,11 @@
 #else
   #define CUTTER_ALT() false
 #endif
+#if ANIM_COOLER
+  #define COOLER_ALT(N) TEST(heat_bits, HEATBIT_COOLER)
+#else
+  #define COOLER_ALT() false
+#endif
 
 #if DO_DRAW_HOTENDS
   #define MAX_HOTEND_DRAW _MIN(HOTENDS, ((LCD_PIXEL_WIDTH - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
@@ -361,18 +367,22 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 #endif // DO_DRAW_BED
 
 #if DO_DRAW_CHAMBER
-
   FORCE_INLINE void _draw_chamber_status() {
     #if HAS_HEATED_CHAMBER
       if (PAGE_UNDER(7))
         _draw_centered_temp(thermalManager.degTargetChamber() + 0.5f, STATUS_CHAMBER_TEXT_X, 7);
     #endif
-
     if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
       _draw_centered_temp(thermalManager.degChamber() + 0.5f, STATUS_CHAMBER_TEXT_X, 28);
   }
+#endif
 
-#endif // DO_DRAW_CHAMBER
+#if DO_DRAW_COOLER
+  FORCE_INLINE void _draw_cooler_status() {
+    if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
+      _draw_centered_temp(thermalManager.degCooler(), STATUS_COOLER_TEXT_X, 28);
+  }
+#endif
 
 //
 // Before homing, blink '123' <-> '???'.
@@ -447,6 +457,9 @@ void MarlinUI::draw_status_screen() {
       #if DO_DRAW_CHAMBER && HAS_HEATED_CHAMBER
         if (thermalManager.isHeatingChamber()) SBI(new_bits, HEATBIT_CHAMBER);
       #endif
+      #if DO_DRAW_COOLER && HAS_COOLER
+        if (thermalManager.isLaserCooling()) SBI(new_bits, HEATBIT_COOLER);
+      #endif
       if (TERN0(ANIM_CUTTER, cutter.enabled())) SBI(new_bits, HEATBIT_CUTTER);
       heat_bits = new_bits;
     #endif
@@ -631,12 +644,28 @@ void MarlinUI::draw_status_screen() {
       }
     #endif
 
+    // Laser Cooler
+    #if DO_DRAW_COOLER
+      #if ANIM_COOLER
+        #define COOLER_BITMAP(S) ((S) ? status_cooler_bmp : status_cooler_on_bmp)
+      #else
+        #define COOLER_BITMAP(S) status_cooler_bmp
+      #endif
+      const uint8_t coolery = STATUS_COOLER_Y(COOLER_ALT()),
+                    coolerh = STATUS_COOLER_HEIGHT(COOLER_ALT());
+      if (PAGE_CONTAINS(coolery, coolery + coolerh - 1))
+        u8g.drawBitmapP(STATUS_COOLER_X, coolery, STATUS_COOLER_BYTEWIDTH, coolerh, COOLER_BITMAP(COOLER_ALT()));
+    #endif
+
     // Heated Bed
     TERN_(DO_DRAW_BED, _draw_bed_status(blink));
 
     // Heated Chamber
     TERN_(DO_DRAW_CHAMBER, _draw_chamber_status());
 
+    // Cooler
+    TERN_(DO_DRAW_COOLER, _draw_cooler_status());
+
     // Fan, if a bitmap was provided
     #if DO_DRAW_FAN
       if (PAGE_CONTAINS(STATUS_FAN_TEXT_Y - INFO_FONT_ASCENT, STATUS_FAN_TEXT_Y - 1)) {

commit d7ca3ea27c9e891907949029c12f8c9340ea0d95
Author: Kairali <kairali@yandex.ru>
Date:   Mon Jan 25 12:48:31 2021 +0500

    "Move … code" followup (#20874)
    
    Fix regression from #20832

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 985041ede5..8ae6ab6627 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -40,6 +40,10 @@
 
 #include "../../gcode/parser.h" // for units (and volumetric)
 
+#if ENABLED(LCD_SHOW_E_TOTAL)
+  #include "../../MarlinCore.h" // for printingIsActive(), marlin_state and MF_SD_COMPLETE
+#endif
+
 #if ENABLED(FILAMENT_LCD_DISPLAY)
   #include "../../feature/filwidth.h"
   #include "../../module/planner.h"

commit d33fe2378c25d258b02440aef6cc31e36753f98f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jan 22 15:01:19 2021 -0600

    Move common strings (#20846)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 406e7b8640..985041ede5 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -703,7 +703,6 @@ void MarlinUI::draw_status_screen() {
           lcd_put_u8str(estimation_x_pos, EXTRAS_BASELINE, estimation_string);
         }
         else if (elapsed_string[0]) {
-          extern const char E_LBL[];
           lcd_put_u8str_P(PROGRESS_BAR_X, EXTRAS_BASELINE, E_LBL);
           lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
         }

commit 0681b8096c3f488e677b01606481f46152904485
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 21 17:30:47 2021 -0600

    Fix undefined E_LBL

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 985041ede5..406e7b8640 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -703,6 +703,7 @@ void MarlinUI::draw_status_screen() {
           lcd_put_u8str(estimation_x_pos, EXTRAS_BASELINE, estimation_string);
         }
         else if (elapsed_string[0]) {
+          extern const char E_LBL[];
           lcd_put_u8str_P(PROGRESS_BAR_X, EXTRAS_BASELINE, E_LBL);
           lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
         }

commit 1fc0dcdc9701146d7e8b126bb3ba0517c172e484
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Wed Dec 23 22:50:24 2020 -0600

    Cutter Power in percent format (#20410)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>
    Co-authored-by: Jason Smith <jason.inet@gmail.com>
    Co-authored-by: Luu Lac <45380455+shitcreek@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 751d47da55..985041ede5 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -618,7 +618,6 @@ void MarlinUI::draw_status_screen() {
       if (cutter.isReady && PAGE_CONTAINS(STATUS_CUTTER_TEXT_Y - INFO_FONT_ASCENT, STATUS_CUTTER_TEXT_Y - 1)) {
         #if CUTTER_UNIT_IS(PERCENT)
           lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, cutter_power2str(cutter.unitPower));
-          lcd_put_wchar('%');
         #elif CUTTER_UNIT_IS(RPM)
           lcd_put_u8str(STATUS_CUTTER_TEXT_X - 2, STATUS_CUTTER_TEXT_Y, ftostr51rj(float(cutter.unitPower) / 1000));
           lcd_put_wchar('K');

commit e6c15eee45cfb306a4b52a7e60a61599cce3fa54
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Thu Dec 24 00:34:09 2020 -0300

    Fix DOGM status message scrolling (#20557)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 29acb86941..751d47da55 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -892,6 +892,10 @@ void MarlinUI::draw_status_message(const bool blink) {
     }
     else {
       // String is longer than the available space
+      if (blink != last_blink) {
+        last_blink = blink;
+        advance_status_scroll();
+      }
 
       // Get a pointer to the next valid UTF8 character
       // and the string remaining length
@@ -911,11 +915,6 @@ void MarlinUI::draw_status_message(const bool blink) {
           }
         }
       }
-
-      if (last_blink != blink) {
-        last_blink = blink;
-        advance_status_scroll();
-      }
     }
 
   #else // !STATUS_MESSAGE_SCROLLING

commit 8fd8772a6fffe63d99d0b88aec7a77d283df8584
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 29 19:06:40 2020 -0600

    Adjust axis homed / trusted methods (#20323)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 882b2fef50..29acb86941 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -384,18 +384,12 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 
   if (blink)
     lcd_put_u8str(value);
-  else {
-    if (!TEST(axis_homed, axis))
-      while (const char c = *value++) lcd_put_wchar(c <= '.' ? c : '?');
-    else {
-      #if NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING)
-        if (!TEST(axis_known_position, axis))
-          lcd_put_u8str_P(axis == Z_AXIS ? PSTR("       ") : PSTR("    "));
-        else
-      #endif
-          lcd_put_u8str(value);
-    }
-  }
+  else if (axis_should_home(axis))
+    while (const char c = *value++) lcd_put_wchar(c <= '.' ? c : '?');
+  else if (NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING) && !axis_is_trusted(axis))
+    lcd_put_u8str_P(axis == Z_AXIS ? PSTR("       ") : PSTR("    "));
+  else
+    lcd_put_u8str(value);
 }
 
 /**

commit 62680bb356b4449661145ecbd6978d286c639a23
Author: rdhoggattjr <64983896+rdhoggattjr@users.noreply.github.com>
Date:   Mon Nov 23 23:02:54 2020 -0600

    LCD position in current units (#20145)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 9fef625826..882b2fef50 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -38,10 +38,11 @@
 #include "../../module/motion.h"
 #include "../../module/temperature.h"
 
+#include "../../gcode/parser.h" // for units (and volumetric)
+
 #if ENABLED(FILAMENT_LCD_DISPLAY)
   #include "../../feature/filwidth.h"
   #include "../../module/planner.h"
-  #include "../../gcode/parser.h"
 #endif
 
 #if HAS_CUTTER
@@ -67,6 +68,11 @@
 #define X_LABEL_POS      3
 #define X_VALUE_POS     11
 #define XYZ_SPACING     37
+
+#define X_LABEL_POS_IN (X_LABEL_POS - 2)
+#define X_VALUE_POS_IN (X_VALUE_POS - 5)
+#define XYZ_SPACING_IN (XYZ_SPACING + 9)
+
 #define XYZ_BASELINE    (30 + INFO_FONT_ASCENT)
 #define EXTRAS_BASELINE (40 + INFO_FONT_ASCENT)
 #define STATUS_BASELINE (LCD_PIXEL_HEIGHT - INFO_FONT_DESCENT)
@@ -370,10 +376,12 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 // Homed and known, display constantly.
 //
 FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const bool blink) {
+  const bool is_inch = parser.using_inch_units();
   const AxisEnum a = TERN(LCD_SHOW_E_TOTAL, axis == E_AXIS ? X_AXIS : axis, axis);
-  const uint8_t offs = (XYZ_SPACING) * a;
-  lcd_put_wchar(X_LABEL_POS + offs, XYZ_BASELINE, axis_codes[axis]);
-  lcd_moveto(X_VALUE_POS + offs, XYZ_BASELINE);
+  const uint8_t offs = a * (is_inch ? XYZ_SPACING_IN : XYZ_SPACING);
+  lcd_put_wchar((is_inch ? X_LABEL_POS_IN : X_LABEL_POS) + offs, XYZ_BASELINE, axis_codes[axis]);
+  lcd_moveto((is_inch ? X_VALUE_POS_IN : X_VALUE_POS) + offs, XYZ_BASELINE);
+
   if (blink)
     lcd_put_u8str(value);
   else {
@@ -390,9 +398,16 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   }
 }
 
+/**
+ * Draw the Status Screen for a 128x64 DOGM (U8glib) display.
+ *
+ * Called as needed to update the current display stripe.
+ * Use the PAGE_CONTAINS macros to avoid pointless draw calls.
+ */
 void MarlinUI::draw_status_screen() {
+  constexpr int xystorage = TERN(INCH_MODE_SUPPORT, 8, 5);
+  static char xstring[TERN(LCD_SHOW_E_TOTAL, 12, xystorage)], ystring[xystorage], zstring[8];
 
-  static char xstring[TERN(LCD_SHOW_E_TOTAL, 12, 5)], ystring[5], zstring[8];
   #if ENABLED(FILAMENT_LCD_DISPLAY)
     static char wstring[5], mstring[4];
   #endif
@@ -439,7 +454,8 @@ void MarlinUI::draw_status_screen() {
     #endif
 
     const xyz_pos_t lpos = current_position.asLogical();
-    strcpy(zstring, ftostr52sp(lpos.z));
+    const bool is_inch = parser.using_inch_units();
+    strcpy(zstring, is_inch ? ftostr42_52(LINEAR_UNIT(lpos.z)) : ftostr52sp(lpos.z));
 
     if (show_e_total) {
       #if ENABLED(LCD_SHOW_E_TOTAL)
@@ -448,8 +464,8 @@ void MarlinUI::draw_status_screen() {
       #endif
     }
     else {
-      strcpy(xstring, ftostr4sign(lpos.x));
-      strcpy(ystring, ftostr4sign(lpos.y));
+      strcpy(xstring, is_inch ? ftostr53_63(LINEAR_UNIT(lpos.x)) : ftostr4sign(lpos.x));
+      strcpy(ystring, is_inch ? ftostr53_63(LINEAR_UNIT(lpos.y)) : ftostr4sign(lpos.y));
     }
 
     #if ENABLED(FILAMENT_LCD_DISPLAY)
@@ -854,6 +870,9 @@ void MarlinUI::draw_status_screen() {
   }
 }
 
+/**
+ * Draw the Status Message area
+ */
 void MarlinUI::draw_status_message(const bool blink) {
 
   // Get the UTF8 character count of the string

commit 1d43e81be01391ebdc451cf9b7cdd3e425dba4cc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Nov 13 18:27:31 2020 -0600

    Fix compile warnings, serial alias

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 85654b9189..9fef625826 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -774,9 +774,15 @@ void MarlinUI::draw_status_screen() {
             mixer.update_mix_from_vtool();
             mix_label = PSTR("Mx");
           }
+
+        #pragma GCC diagnostic push
+        #pragma GCC diagnostic ignored "-Wformat-overflow"
+
         sprintf_P(mixer_messages, PSTR(S_FMT " %d;%d%% "), mix_label, int(mixer.mix[0]), int(mixer.mix[1]));
         lcd_put_u8str(X_LABEL_POS, XYZ_BASELINE, mixer_messages);
 
+        #pragma GCC diagnostic pop
+
       #else
 
         if (show_e_total) {

commit ce904475312fbe573efadf96e125fcf284a8bbd6
Author: Jason Smith <jason.inet@gmail.com>
Date:   Thu Nov 5 16:15:29 2020 -0800

    Fix 0 extruders & bed compile (#20030)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index d07474d810..85654b9189 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -104,6 +104,9 @@
 
 #if DO_DRAW_HOTENDS
   #define MAX_HOTEND_DRAW _MIN(HOTENDS, ((LCD_PIXEL_WIDTH - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
+#endif
+
+#if EITHER(DO_DRAW_BED, DO_DRAW_HOTENDS)
   #define STATUS_HEATERS_BOT (STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)
 #endif
 

commit eaf6777a6643a6fab23ceaaa4699cb2466ea6b83
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 16 19:36:25 2020 -0500

    Rename ultralcd => marlinui

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 987924201a..d07474d810 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -30,8 +30,8 @@
 #if HAS_MARLINUI_U8GLIB && DISABLED(LIGHTWEIGHT_UI)
 
 #include "dogm_Statusscreen.h"
-#include "ultralcd_DOGM.h"
-#include "../ultralcd.h"
+#include "marlinui_DOGM.h"
+#include "../marlinui.h"
 #include "../lcdprint.h"
 #include "../../libs/numtostr.h"
 

commit f1e563d8cfd3cecc63b2f7a44bdab0a417b94d36
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 6 19:17:18 2020 -0500

    Fix small font section directive, mixer warning

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 82b6e768c6..987924201a 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -758,7 +758,7 @@ void MarlinUI::draw_status_screen() {
 
         // Two-component mix / gradient instead of XY
 
-        char mixer_messages[12];
+        char mixer_messages[15];
         PGM_P mix_label;
         #if ENABLED(GRADIENT_MIX)
           if (mixer.gradient.enabled) {

commit c2c6a679ea4bdf48ce1800a8831fcec36c09ce53
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 28 01:13:27 2020 -0500

    Rename LCD conditionals (#19533)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 4b51c2949b..82b6e768c6 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -27,7 +27,7 @@
 
 #include "../../inc/MarlinConfigPre.h"
 
-#if HAS_GRAPHICAL_LCD && DISABLED(LIGHTWEIGHT_UI)
+#if HAS_MARLINUI_U8GLIB && DISABLED(LIGHTWEIGHT_UI)
 
 #include "dogm_Statusscreen.h"
 #include "ultralcd_DOGM.h"
@@ -913,4 +913,4 @@ void MarlinUI::draw_status_message(const bool blink) {
   #endif
 }
 
-#endif // HAS_GRAPHICAL_LCD && !LIGHTWEIGHT_UI
+#endif // HAS_MARLINUI_U8GLIB && !LIGHTWEIGHT_UI

commit 979876e958e73e642b51eb655461c92947fe1deb
Author: ellensp <ellensp@hotmail.com>
Date:   Mon Sep 14 16:58:39 2020 +1200

    Improve temperature runaway, idle timeout (#19339)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index f668e453cc..4b51c2949b 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -254,7 +254,7 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 
     if (PAGE_UNDER(7)) {
       #if HEATER_IDLE_HANDLER
-        const bool dodraw = (blink || !thermalManager.hotend_idle[heater_id].timed_out);
+        const bool dodraw = (blink || !thermalManager.heater_idle[heater_id].timed_out);
       #else
         constexpr bool dodraw = true;
       #endif
@@ -327,7 +327,7 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 
     if (PAGE_UNDER(7)) {
       #if HEATER_IDLE_HANDLER
-        const bool dodraw = (blink || !thermalManager.bed_idle.timed_out);
+        const bool dodraw = (blink || !thermalManager.heater_idle[thermalManager.IDLE_INDEX_BED].timed_out);
       #else
         constexpr bool dodraw = true;
       #endif

commit 49ca16c3fb103e8e29f64107ba664aa82917b9f1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 13 18:06:14 2020 -0500

    heater_ind_t => heater_id_t

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index bdd9f25703..f668e453cc 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -178,17 +178,17 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 #if DO_DRAW_HOTENDS
 
   // Draw hotend bitmap with current and target temperatures
-  FORCE_INLINE void _draw_hotend_status(const heater_ind_t heater, const bool blink) {
+  FORCE_INLINE void _draw_hotend_status(const heater_id_t heater_id, const bool blink) {
     #if !HEATER_IDLE_HANDLER
       UNUSED(blink);
     #endif
 
-    const bool isHeat = HOTEND_ALT(heater);
+    const bool isHeat = HOTEND_ALT(heater_id);
 
-    const uint8_t tx = STATUS_HOTEND_TEXT_X(heater);
+    const uint8_t tx = STATUS_HOTEND_TEXT_X(heater_id);
 
-    const float temp = thermalManager.degHotend(heater),
-              target = thermalManager.degTargetHotend(heater);
+    const float temp = thermalManager.degHotend(heater_id),
+              target = thermalManager.degTargetHotend(heater_id);
 
     #if DISABLED(STATUS_HOTEND_ANIM)
       #define STATIC_HOTEND true
@@ -237,24 +237,24 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 
       #if ANIM_HOTEND
         // Draw hotend bitmap, either whole or split by the heating percent
-        const uint8_t hx = STATUS_HOTEND_X(heater),
-                      bw = STATUS_HOTEND_BYTEWIDTH(heater);
+        const uint8_t hx = STATUS_HOTEND_X(heater_id),
+                      bw = STATUS_HOTEND_BYTEWIDTH(heater_id);
         #if ENABLED(STATUS_HEAT_PERCENT)
           if (isHeat && tall <= BAR_TALL) {
             const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
-            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, ph, HOTEND_BITMAP(heater, false));
-            u8g.drawBitmapP(hx, STATUS_HEATERS_Y + ph, bw, tall + 1, HOTEND_BITMAP(heater, true) + ph * bw);
+            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, ph, HOTEND_BITMAP(heater_id, false));
+            u8g.drawBitmapP(hx, STATUS_HEATERS_Y + ph, bw, tall + 1, HOTEND_BITMAP(heater_id, true) + ph * bw);
           }
           else
         #endif
-            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(heater, isHeat));
+            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(heater_id, isHeat));
       #endif
 
     } // PAGE_CONTAINS
 
     if (PAGE_UNDER(7)) {
       #if HEATER_IDLE_HANDLER
-        const bool dodraw = (blink || !thermalManager.hotend_idle[heater].timed_out);
+        const bool dodraw = (blink || !thermalManager.hotend_idle[heater_id].timed_out);
       #else
         constexpr bool dodraw = true;
       #endif
@@ -597,7 +597,7 @@ void MarlinUI::draw_status_screen() {
     // Extruders
     #if DO_DRAW_HOTENDS
       LOOP_L_N(e, MAX_HOTEND_DRAW)
-        _draw_hotend_status((heater_ind_t)e, blink);
+        _draw_hotend_status((heater_id_t)e, blink);
     #endif
 
     // Laser / Spindle

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index ae8952ab33..bdd9f25703 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit 12e7106a8afaceb01f41a1bf61e24049c6e7b49e
Author: ellensp <ellensp@hotmail.com>
Date:   Tue Jul 7 11:53:26 2020 +1200

    Update and fix POWER_MONITOR (#18561)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 8be9b27dda..ae8952ab33 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -113,22 +113,26 @@
 
     lcd_moveto(x, y);
 
+    #if HAS_POWER_MONITOR_WATTS
+      const bool wflag = power_monitor.power_display_enabled();
+    #endif
     #if ENABLED(POWER_MONITOR_CURRENT)
       const bool iflag = power_monitor.current_display_enabled();
     #endif
     #if HAS_POWER_MONITOR_VREF
       const bool vflag = power_monitor.voltage_display_enabled();
     #endif
-    #if HAS_POWER_MONITOR_WATTS
-      const bool wflag = power_monitor.power_display_enabled();
-    #endif
 
-    #if ENABLED(POWER_MONITOR_CURRENT) || HAS_POWER_MONITOR_VREF
-      // cycle between current, voltage, and power
+    #if HAS_POWER_MONITOR_WATTS
+      // Cycle between current, voltage, and power
       if (ELAPSED(millis(), power_monitor.display_item_ms)) {
         power_monitor.display_item_ms = millis() + 1000UL;
         ++power_monitor.display_item;
       }
+    #elif ENABLED(POWER_MONITOR_CURRENT)
+      power_monitor.display_item = 0;
+    #elif HAS_POWER_MONITOR_VREF
+      power_monitor.display_item = 1;
     #endif
 
     // ensure we have the right one selected for display
@@ -139,7 +143,7 @@
       #if HAS_POWER_MONITOR_VREF
         if (power_monitor.display_item == 1 && !vflag) ++power_monitor.display_item;
       #endif
-      #if ENABLED(POWER_MONITOR_CURRENT)
+      #if HAS_POWER_MONITOR_WATTS
         if (power_monitor.display_item == 2 && !wflag) ++power_monitor.display_item;
       #endif
       if (power_monitor.display_item >= 3) power_monitor.display_item = 0;

commit f445bc26e52de36239e595ee3fbd2d25abc97258
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 25 16:39:22 2020 -0500

    Minor LCD cleanup, improvement

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 72bdf1e96a..8be9b27dda 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -414,7 +414,7 @@ void MarlinUI::draw_status_screen() {
     #endif
   #endif
 
-  const bool showxy = TERN1(LCD_SHOW_E_TOTAL, !printingIsActive());
+  const bool show_e_total = TERN0(LCD_SHOW_E_TOTAL, printingIsActive() || marlin_state == MF_SD_COMPLETE);
 
   // At the first page, generate new display values
   if (first_page) {
@@ -434,16 +434,16 @@ void MarlinUI::draw_status_screen() {
     const xyz_pos_t lpos = current_position.asLogical();
     strcpy(zstring, ftostr52sp(lpos.z));
 
-    if (showxy) {
-      strcpy(xstring, ftostr4sign(lpos.x));
-      strcpy(ystring, ftostr4sign(lpos.y));
-    }
-    else {
+    if (show_e_total) {
       #if ENABLED(LCD_SHOW_E_TOTAL)
         const uint8_t escale = e_move_accumulator >= 100000.0f ? 10 : 1; // After 100m switch to cm
         sprintf_P(xstring, PSTR("%ld%cm"), uint32_t(_MAX(e_move_accumulator, 0.0f)) / escale, escale == 10 ? 'c' : 'm'); // 1234567mm
       #endif
     }
+    else {
+      strcpy(xstring, ftostr4sign(lpos.x));
+      strcpy(ystring, ftostr4sign(lpos.y));
+    }
 
     #if ENABLED(FILAMENT_LCD_DISPLAY)
       strcpy(wstring, ftostr12ns(filwidth.measured_mm));
@@ -772,14 +772,14 @@ void MarlinUI::draw_status_screen() {
 
       #else
 
-        if (showxy) {
-          _draw_axis_value(X_AXIS, xstring, blink);
-          _draw_axis_value(Y_AXIS, ystring, blink);
-        }
-        else {
+        if (show_e_total) {
           _draw_axis_value(E_AXIS, xstring, true);
           lcd_put_u8str_P(PSTR("       "));
         }
+        else {
+          _draw_axis_value(X_AXIS, xstring, blink);
+          _draw_axis_value(Y_AXIS, ystring, blink);
+        }
 
       #endif
 

commit 424569b4c4bf112a3939724b30bad528a76a2b08
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jun 18 15:23:03 2020 -0500

    Power monitor and display (#17437)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 6fc6b2f614..72bdf1e96a 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -48,6 +48,10 @@
   #include "../../feature/spindle_laser.h"
 #endif
 
+#if HAS_POWER_MONITOR
+  #include "../../feature/power_monitor.h"
+#endif
+
 #if ENABLED(SDSUPPORT)
   #include "../../sd/cardreader.h"
 #endif
@@ -103,6 +107,59 @@
   #define STATUS_HEATERS_BOT (STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)
 #endif
 
+#if HAS_POWER_MONITOR
+
+  void display_power_monitor(const uint8_t x, const uint8_t y) {
+
+    lcd_moveto(x, y);
+
+    #if ENABLED(POWER_MONITOR_CURRENT)
+      const bool iflag = power_monitor.current_display_enabled();
+    #endif
+    #if HAS_POWER_MONITOR_VREF
+      const bool vflag = power_monitor.voltage_display_enabled();
+    #endif
+    #if HAS_POWER_MONITOR_WATTS
+      const bool wflag = power_monitor.power_display_enabled();
+    #endif
+
+    #if ENABLED(POWER_MONITOR_CURRENT) || HAS_POWER_MONITOR_VREF
+      // cycle between current, voltage, and power
+      if (ELAPSED(millis(), power_monitor.display_item_ms)) {
+        power_monitor.display_item_ms = millis() + 1000UL;
+        ++power_monitor.display_item;
+      }
+    #endif
+
+    // ensure we have the right one selected for display
+    for (uint8_t i = 0; i < 3; i++) {
+      #if ENABLED(POWER_MONITOR_CURRENT)
+        if (power_monitor.display_item == 0 && !iflag) ++power_monitor.display_item;
+      #endif
+      #if HAS_POWER_MONITOR_VREF
+        if (power_monitor.display_item == 1 && !vflag) ++power_monitor.display_item;
+      #endif
+      #if ENABLED(POWER_MONITOR_CURRENT)
+        if (power_monitor.display_item == 2 && !wflag) ++power_monitor.display_item;
+      #endif
+      if (power_monitor.display_item >= 3) power_monitor.display_item = 0;
+    }
+
+    switch (power_monitor.display_item) {
+      #if ENABLED(POWER_MONITOR_CURRENT)                // Current
+        case 0: if (iflag) power_monitor.draw_current(); break;
+      #endif
+      #if HAS_POWER_MONITOR_VREF                        // Voltage
+        case 1: if (vflag) power_monitor.draw_voltage(); break;
+      #endif
+      #if HAS_POWER_MONITOR_WATTS                       // Power
+        case 2: if (wflag) power_monitor.draw_power(); break;
+      #endif
+      default: break;
+    }
+  }
+#endif
+
 #define PROGRESS_BAR_X 54
 #define PROGRESS_BAR_Y (EXTRAS_BASELINE + 1)
 #define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
@@ -787,16 +844,25 @@ void MarlinUI::draw_status_screen() {
 void MarlinUI::draw_status_message(const bool blink) {
 
   // Get the UTF8 character count of the string
-  uint8_t slen = utf8_strlen(status_message);
+  uint8_t lcd_width = LCD_WIDTH, pixel_width = LCD_PIXEL_WIDTH,
+          slen = utf8_strlen(status_message);
+
+  #if HAS_POWER_MONITOR
+    if (power_monitor.display_enabled()) {
+      // make room at the end of the status line for the power monitor reading
+      lcd_width -= 6;
+      pixel_width -= (MENU_FONT_WIDTH) * 6;
+    }
+  #endif
 
   #if ENABLED(STATUS_MESSAGE_SCROLLING)
 
     static bool last_blink = false;
 
-    if (slen <= LCD_WIDTH) {
+    if (slen <= lcd_width) {
       // The string fits within the line. Print with no scrolling
       lcd_put_u8str(status_message);
-      while (slen < LCD_WIDTH) { lcd_put_wchar(' '); ++slen; }
+      while (slen < lcd_width) { lcd_put_wchar(' '); ++slen; }
     }
     else {
       // String is longer than the available space
@@ -805,20 +871,21 @@ void MarlinUI::draw_status_message(const bool blink) {
       // and the string remaining length
       uint8_t rlen;
       const char *stat = status_and_len(rlen);
-      lcd_put_u8str_max(stat, LCD_PIXEL_WIDTH);
+      lcd_put_u8str_max(stat, pixel_width);
 
       // If the remaining string doesn't completely fill the screen
-      if (rlen < LCD_WIDTH) {
+      if (rlen < lcd_width) {
         lcd_put_wchar('.');                     // Always at 1+ spaces left, draw a dot
-        uint8_t chars = LCD_WIDTH - rlen;       // Amount of space left in characters
+        uint8_t chars = lcd_width - rlen;       // Amount of space left in characters
         if (--chars) {                          // Draw a second dot if there's space
           lcd_put_wchar('.');
           if (--chars) {                        // Print a second copy of the message
-            lcd_put_u8str_max(status_message, LCD_PIXEL_WIDTH - (rlen + 2) * (MENU_FONT_WIDTH));
+            lcd_put_u8str_max(status_message, pixel_width - (rlen + 2) * (MENU_FONT_WIDTH));
             lcd_put_wchar(' ');
           }
         }
       }
+
       if (last_blink != blink) {
         last_blink = blink;
         advance_status_scroll();
@@ -830,12 +897,16 @@ void MarlinUI::draw_status_message(const bool blink) {
     UNUSED(blink);
 
     // Just print the string to the LCD
-    lcd_put_u8str_max(status_message, LCD_PIXEL_WIDTH);
+    lcd_put_u8str_max(status_message, pixel_width);
 
     // Fill the rest with spaces
-    for (; slen < LCD_WIDTH; ++slen) lcd_put_wchar(' ');
+    for (; slen < lcd_width; ++slen) lcd_put_wchar(' ');
 
   #endif // !STATUS_MESSAGE_SCROLLING
+
+  #if HAS_POWER_MONITOR
+    display_power_monitor(pixel_width + MENU_FONT_WIDTH, STATUS_BASELINE);
+  #endif
 }
 
 #endif // HAS_GRAPHICAL_LCD && !LIGHTWEIGHT_UI

commit eda2fd8dbea69cb8f571f2992cb11334b2cb7a2f
Author: Luu Lac <45380455+shitcreek@users.noreply.github.com>
Date:   Mon Jun 8 00:47:31 2020 -0500

    Improvements for Laser / Spindle (#17661)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 69827edfad..6fc6b2f614 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -541,12 +541,15 @@ void MarlinUI::draw_status_screen() {
 
     // Laser / Spindle
     #if DO_DRAW_CUTTER
-      if (cutter.power && PAGE_CONTAINS(STATUS_CUTTER_TEXT_Y - INFO_FONT_ASCENT, STATUS_CUTTER_TEXT_Y - 1)) {
-        lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, cutter_power2str(cutter.power));
-        #if CUTTER_DISPLAY_IS(PERCENT)
+      if (cutter.isReady && PAGE_CONTAINS(STATUS_CUTTER_TEXT_Y - INFO_FONT_ASCENT, STATUS_CUTTER_TEXT_Y - 1)) {
+        #if CUTTER_UNIT_IS(PERCENT)
+          lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, cutter_power2str(cutter.unitPower));
           lcd_put_wchar('%');
-        #elif CUTTER_DISPLAY_IS(RPM)
+        #elif CUTTER_UNIT_IS(RPM)
+          lcd_put_u8str(STATUS_CUTTER_TEXT_X - 2, STATUS_CUTTER_TEXT_Y, ftostr51rj(float(cutter.unitPower) / 1000));
           lcd_put_wchar('K');
+        #else
+          lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, cutter_power2str(cutter.unitPower));
         #endif
       }
     #endif

commit 076b2112a39966e3c5781dfcec393c90b70303ce
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Thu Jun 4 06:20:19 2020 +0200

    Fix spindle power LCD display (#18189)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index fc67f9432a..69827edfad 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -542,7 +542,7 @@ void MarlinUI::draw_status_screen() {
     // Laser / Spindle
     #if DO_DRAW_CUTTER
       if (cutter.power && PAGE_CONTAINS(STATUS_CUTTER_TEXT_Y - INFO_FONT_ASCENT, STATUS_CUTTER_TEXT_Y - 1)) {
-        lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, i16tostr3rj(cutter.power));
+        lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, cutter_power2str(cutter.power));
         #if CUTTER_DISPLAY_IS(PERCENT)
           lcd_put_wchar('%');
         #elif CUTTER_DISPLAY_IS(RPM)

commit 8292136f776424aa6b48e7193b531713d7d7ccd0
Author: Leo <leo@nutz.de>
Date:   Fri May 22 22:41:32 2020 +0200

    Move DOGM progress bar up 1px (#18060)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index ee0b90bebf..fc67f9432a 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -104,7 +104,7 @@
 #endif
 
 #define PROGRESS_BAR_X 54
-#define PROGRESS_BAR_Y (EXTRAS_BASELINE + 2)
+#define PROGRESS_BAR_Y (EXTRAS_BASELINE + 1)
 #define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
 
 FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, const uint8_t ty) {

commit 7664e552f10dae45935d3ba6c23dcf51c2f2f9eb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon May 11 23:19:56 2020 -0500

    Finish DOGM progress bar
    
    Fixes #17940

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 8c67ff10ab..ee0b90bebf 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -597,15 +597,15 @@ void MarlinUI::draw_status_screen() {
     // Progress bar frame
     //
 
-    if (PAGE_CONTAINS(49, 52))
+    if (PAGE_CONTAINS(PROGRESS_BAR_Y, PROGRESS_BAR_Y + 3))
       u8g.drawFrame(PROGRESS_BAR_X, PROGRESS_BAR_Y, PROGRESS_BAR_WIDTH, 4);
 
     //
     // Progress bar solid part
     //
 
-    if (PAGE_CONTAINS(50, 51))     // 50-51 (or just 50)
-      u8g.drawBox(PROGRESS_BAR_X + 1, 50, progress_bar_solid_width, 2);
+    if (PAGE_CONTAINS(PROGRESS_BAR_Y + 1, PROGRESS_BAR_Y + 2))
+      u8g.drawBox(PROGRESS_BAR_X + 1, PROGRESS_BAR_Y + 1, progress_bar_solid_width, 2);
 
     if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)) {
 

commit 39f703310b8da3b95ad08c3eecd642d76e88fd78
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 5 17:55:35 2020 -0500

    Move S_FMT to HAL, apply to mixer

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 5fea16bf97..8c67ff10ab 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -695,19 +695,19 @@ void MarlinUI::draw_status_screen() {
         // Two-component mix / gradient instead of XY
 
         char mixer_messages[12];
-        const char *mix_label;
+        PGM_P mix_label;
         #if ENABLED(GRADIENT_MIX)
           if (mixer.gradient.enabled) {
             mixer.update_mix_from_gradient();
-            mix_label = "Gr";
+            mix_label = PSTR("Gr");
           }
           else
         #endif
           {
             mixer.update_mix_from_vtool();
-            mix_label = "Mx";
+            mix_label = PSTR("Mx");
           }
-        sprintf_P(mixer_messages, PSTR("%s %d;%d%% "), mix_label, int(mixer.mix[0]), int(mixer.mix[1]));
+        sprintf_P(mixer_messages, PSTR(S_FMT " %d;%d%% "), mix_label, int(mixer.mix[0]), int(mixer.mix[1]));
         lcd_put_u8str(X_LABEL_POS, XYZ_BASELINE, mixer_messages);
 
       #else

commit 9a6934874a920afb91f0473add66f102c18f4798
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun May 3 01:24:39 2020 -0500

    Add XYZ_NO_FRAME option

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index d149a9345d..5fea16bf97 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -104,6 +104,7 @@
 #endif
 
 #define PROGRESS_BAR_X 54
+#define PROGRESS_BAR_Y (EXTRAS_BASELINE + 2)
 #define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
 
 FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, const uint8_t ty) {
@@ -597,7 +598,7 @@ void MarlinUI::draw_status_screen() {
     //
 
     if (PAGE_CONTAINS(49, 52))
-      u8g.drawFrame(PROGRESS_BAR_X, 49, PROGRESS_BAR_WIDTH, 4);
+      u8g.drawFrame(PROGRESS_BAR_X, PROGRESS_BAR_Y, PROGRESS_BAR_WIDTH, 4);
 
     //
     // Progress bar solid part
@@ -638,7 +639,7 @@ void MarlinUI::draw_status_screen() {
 
         #if ENABLED(DOGM_SD_PERCENT)
           if (progress_string[0]) {
-            lcd_put_u8str(55, 48, progress_string); // Percent complete
+            lcd_put_u8str(55, EXTRAS_BASELINE, progress_string); // Percent complete
             lcd_put_wchar('%');
           }
         #endif
@@ -665,7 +666,7 @@ void MarlinUI::draw_status_screen() {
   // XYZ Coordinates
   //
 
-  #if ENABLED(XYZ_HOLLOW_FRAME)
+  #if EITHER(XYZ_NO_FRAME, XYZ_HOLLOW_FRAME)
     #define XYZ_FRAME_TOP 29
     #define XYZ_FRAME_HEIGHT INFO_FONT_ASCENT + 3
   #else
@@ -675,15 +676,17 @@ void MarlinUI::draw_status_screen() {
 
   if (PAGE_CONTAINS(XYZ_FRAME_TOP, XYZ_FRAME_TOP + XYZ_FRAME_HEIGHT - 1)) {
 
-    #if ENABLED(XYZ_HOLLOW_FRAME)
-      u8g.drawFrame(0, XYZ_FRAME_TOP, LCD_PIXEL_WIDTH, XYZ_FRAME_HEIGHT); // 8: 29-40  7: 29-39
-    #else
-      u8g.drawBox(0, XYZ_FRAME_TOP, LCD_PIXEL_WIDTH, XYZ_FRAME_HEIGHT);   // 8: 30-39  7: 30-37
+    #if DISABLED(XYZ_NO_FRAME)
+      #if ENABLED(XYZ_HOLLOW_FRAME)
+        u8g.drawFrame(0, XYZ_FRAME_TOP, LCD_PIXEL_WIDTH, XYZ_FRAME_HEIGHT); // 8: 29-40  7: 29-39
+      #else
+        u8g.drawBox(0, XYZ_FRAME_TOP, LCD_PIXEL_WIDTH, XYZ_FRAME_HEIGHT);   // 8: 30-39  7: 30-37
+      #endif
     #endif
 
     if (PAGE_CONTAINS(XYZ_BASELINE - (INFO_FONT_ASCENT - 1), XYZ_BASELINE)) {
 
-      #if DISABLED(XYZ_HOLLOW_FRAME)
+      #if NONE(XYZ_NO_FRAME, XYZ_HOLLOW_FRAME)
         u8g.setColorIndex(0); // white on black
       #endif
 
@@ -722,7 +725,7 @@ void MarlinUI::draw_status_screen() {
 
       _draw_axis_value(Z_AXIS, zstring, blink);
 
-      #if DISABLED(XYZ_HOLLOW_FRAME)
+      #if NONE(XYZ_NO_FRAME, XYZ_HOLLOW_FRAME)
         u8g.setColorIndex(1); // black on white
       #endif
     }
@@ -770,10 +773,11 @@ void MarlinUI::draw_status_screen() {
         lcd_put_wchar(':');
         lcd_put_u8str(mstring);
         lcd_put_wchar('%');
+        return;
       }
-      else
     #endif
-        draw_status_message(blink);
+
+    draw_status_message(blink);
   }
 }
 

commit ab2b98e4255b0b9579af9627e884ac3dfc1d30bb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Apr 23 21:42:38 2020 -0500

    Apply composite tests

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 537153208b..d149a9345d 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -142,7 +142,7 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
     #elif ANIM_HOTEND && DISABLED(STATUS_HOTEND_INVERTED) && ENABLED(STATUS_HOTEND_NUMBERLESS)
       #define OFF_BMP(N) status_hotend_a_bmp
       #define ON_BMP(N)  status_hotend_b_bmp
-    #elif ANIM_HOTEND && ENABLED(STATUS_HOTEND_INVERTED)
+    #elif BOTH(ANIM_HOTEND, STATUS_HOTEND_INVERTED)
       #define OFF_BMP(N) status_hotend##N##_b_bmp
       #define ON_BMP(N)  status_hotend##N##_a_bmp
     #else

commit 6d90d1e1f552dca5e21bc61b676b8e8ce731b280
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 22 16:35:03 2020 -0500

    Apply TERN to compact code (#17619)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index f2703ead7a..537153208b 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -56,7 +56,7 @@
   #include "../../module/printcounter.h"
 #endif
 
-#if DUAL_MIXING_EXTRUDER
+#if HAS_DUAL_MIXING
   #include "../../feature/mixing.h"
 #endif
 
@@ -365,15 +365,11 @@ void MarlinUI::draw_status_screen() {
       #if ANIM_HOTEND
         HOTEND_LOOP() if (thermalManager.isHeatingHotend(e)) SBI(new_bits, HEATBIT_HOTEND + e);
       #endif
-      #if ANIM_BED
-        if (thermalManager.isHeatingBed()) SBI(new_bits, HEATBIT_BED);
-      #endif
+      if (TERN0(ANIM_BED, thermalManager.isHeatingBed())) SBI(new_bits, HEATBIT_BED);
       #if DO_DRAW_CHAMBER && HAS_HEATED_CHAMBER
         if (thermalManager.isHeatingChamber()) SBI(new_bits, HEATBIT_CHAMBER);
       #endif
-      #if ANIM_CUTTER
-        if (cutter.enabled()) SBI(new_bits, HEATBIT_CUTTER);
-      #endif
+      if (TERN0(ANIM_CUTTER, cutter.enabled())) SBI(new_bits, HEATBIT_CUTTER);
       heat_bits = new_bits;
     #endif
 
@@ -555,14 +551,10 @@ void MarlinUI::draw_status_screen() {
     #endif
 
     // Heated Bed
-    #if DO_DRAW_BED
-      _draw_bed_status(blink);
-    #endif
+    TERN_(DO_DRAW_BED, _draw_bed_status(blink));
 
     // Heated Chamber
-    #if DO_DRAW_CHAMBER
-      _draw_chamber_status();
-    #endif
+    TERN_(DO_DRAW_CHAMBER, _draw_chamber_status());
 
     // Fan, if a bitmap was provided
     #if DO_DRAW_FAN
@@ -695,7 +687,7 @@ void MarlinUI::draw_status_screen() {
         u8g.setColorIndex(0); // white on black
       #endif
 
-      #if DUAL_MIXING_EXTRUDER
+      #if HAS_DUAL_MIXING
 
         // Two-component mix / gradient instead of XY
 

commit 4cdd51cd3a5b57862bfe4758fd8812d1e2fcad94
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Apr 9 20:58:21 2020 -0500

    Apply TERN to status screen

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index b4bba3782c..f2703ead7a 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -305,12 +305,7 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 // Homed and known, display constantly.
 //
 FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const bool blink) {
-  const AxisEnum a = (
-    #if ENABLED(LCD_SHOW_E_TOTAL)
-      axis == E_AXIS ? X_AXIS :
-    #endif
-    axis
-  );
+  const AxisEnum a = TERN(LCD_SHOW_E_TOTAL, axis == E_AXIS ? X_AXIS : axis, axis);
   const uint8_t offs = (XYZ_SPACING) * a;
   lcd_put_wchar(X_LABEL_POS + offs, XYZ_BASELINE, axis_codes[axis]);
   lcd_moveto(X_VALUE_POS + offs, XYZ_BASELINE);
@@ -332,11 +327,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 
 void MarlinUI::draw_status_screen() {
 
-  static char xstring[5
-    #if ENABLED(LCD_SHOW_E_TOTAL)
-      + 7
-    #endif
-  ], ystring[5], zstring[8];
+  static char xstring[TERN(LCD_SHOW_E_TOTAL, 12, 5)], ystring[5], zstring[8];
   #if ENABLED(FILAMENT_LCD_DISPLAY)
     static char wstring[5], mstring[4];
   #endif
@@ -365,11 +356,7 @@ void MarlinUI::draw_status_screen() {
     #endif
   #endif
 
-  const bool showxy = (true
-    #if ENABLED(LCD_SHOW_E_TOTAL)
-      && !printingIsActive()
-    #endif
-  );
+  const bool showxy = TERN1(LCD_SHOW_E_TOTAL, !printingIsActive());
 
   // At the first page, generate new display values
   if (first_page) {
@@ -411,13 +398,7 @@ void MarlinUI::draw_status_screen() {
 
     // Progress / elapsed / estimation updates and string formatting to avoid float math on each LCD draw
     #if HAS_PRINT_PROGRESS
-      const progress_t progress =
-        #if HAS_PRINT_PROGRESS_PERMYRIAD
-          get_progress_permyriad()
-        #else
-          get_progress_percent()
-        #endif
-      ;
+      const progress_t progress = TERN(HAS_PRINT_PROGRESS_PERMYRIAD, get_progress_permyriad, get_progress_percent)();
       duration_t elapsed = print_job_timer.duration();
       const uint8_t p = progress & 0xFF, ev = elapsed.value & 0xFF;
       if (p != lastProgress) {
@@ -433,15 +414,9 @@ void MarlinUI::draw_status_screen() {
               estimation_x_pos = _SD_INFO_X(0);
             #endif
           }
-          else {
-            strcpy(progress_string, (
-              #if ENABLED(PRINT_PROGRESS_SHOW_DECIMALS)
-                permyriadtostr4(progress)
-              #else
-                ui8tostr3rj(progress / (PROGRESS_SCALE))
-              #endif
-            ));
-          }
+          else
+            strcpy(progress_string, TERN(PRINT_PROGRESS_SHOW_DECIMALS, permyriadtostr4(progress), ui8tostr3rj(progress / (PROGRESS_SCALE))));
+
           #if BOTH(SHOW_REMAINING_TIME, ROTATE_PROGRESS_DISPLAY) // Tri-state progress display mode
             progress_x_pos = _SD_INFO_X(strlen(progress_string) + 1);
           #endif

commit df8b7dfc406be095a62b5445b69c40034d418823
Author: Ben <jediminer543@users.noreply.github.com>
Date:   Fri Apr 3 01:31:08 2020 +0100

    Various Laser / Spindle improvements (#15335)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index be414ab303..b4bba3782c 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -570,8 +570,12 @@ void MarlinUI::draw_status_screen() {
     // Laser / Spindle
     #if DO_DRAW_CUTTER
       if (cutter.power && PAGE_CONTAINS(STATUS_CUTTER_TEXT_Y - INFO_FONT_ASCENT, STATUS_CUTTER_TEXT_Y - 1)) {
-        lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, i16tostr3rj(cutter.powerPercent(cutter.power)));
-        lcd_put_wchar('%');
+        lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, i16tostr3rj(cutter.power));
+        #if CUTTER_DISPLAY_IS(PERCENT)
+          lcd_put_wchar('%');
+        #elif CUTTER_DISPLAY_IS(RPM)
+          lcd_put_wchar('K');
+        #endif
       }
     #endif
 

commit 2fc0df1b392e9dc8c89f77b64fd64865785e24d5
Author: Pascal de Bruijn <pmjdebruijn@pcode.nl>
Date:   Mon Mar 16 20:11:55 2020 +0100

    Shorter LCD remaining time to prevent overlap (#17181)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 92f935f04b..be414ab303 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -448,10 +448,10 @@ void MarlinUI::draw_status_screen() {
         #endif
       }
 
+      constexpr bool can_show_days = DISABLED(DOGM_SD_PERCENT) || ENABLED(ROTATE_PROGRESS_DISPLAY);
       if (ev != lastElapsed) {
         lastElapsed = ev;
-        const bool has_days = (elapsed.value >= 60*60*24L);
-        const uint8_t len = elapsed.toDigital(elapsed_string, has_days);
+        const uint8_t len = elapsed.toDigital(elapsed_string, can_show_days && elapsed.value >= 60*60*24L);
         elapsed_x_pos = _SD_INFO_X(len);
 
         #if ENABLED(SHOW_REMAINING_TIME)
@@ -468,8 +468,7 @@ void MarlinUI::draw_status_screen() {
             }
             else {
               duration_t estimation = timeval;
-              const bool has_days = (estimation.value >= 60*60*24L);
-              const uint8_t len = estimation.toDigital(estimation_string, has_days);
+              const uint8_t len = estimation.toDigital(estimation_string, can_show_days && estimation.value >= 60*60*24L);
               estimation_x_pos = _SD_INFO_X(len
                 #if !BOTH(DOGM_SD_PERCENT, ROTATE_PROGRESS_DISPLAY)
                   + 1

commit 118bd2f8b2a1f81884cb55a8fc00b708a51aa15b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 23:18:16 2020 -0500

    Apply loop shorthand macros (#17159)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 6d76b8ce70..92f935f04b 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -564,7 +564,7 @@ void MarlinUI::draw_status_screen() {
   if (PAGE_UNDER(6 + 1 + 12 + 1 + 6 + 1)) {
     // Extruders
     #if DO_DRAW_HOTENDS
-      for (uint8_t e = 0; e < MAX_HOTEND_DRAW; ++e)
+      LOOP_L_N(e, MAX_HOTEND_DRAW)
         _draw_hotend_status((heater_ind_t)e, blink);
     #endif
 

commit 13118dbd8d9142d7698ca113cb05d1feae3b1bd3
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 8 19:42:18 2020 -0500

    Additional numtostr functions

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 908dfdf8f2..6d76b8ce70 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -107,7 +107,7 @@
 #define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
 
 FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, const uint8_t ty) {
-  const char *str = i16tostr3(temp);
+  const char *str = i16tostr3rj(temp);
   const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
   lcd_put_u8str(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty, &str[3-len]);
   lcd_put_wchar(LCD_STR_DEGREE[0]);
@@ -406,7 +406,7 @@ void MarlinUI::draw_status_screen() {
 
     #if ENABLED(FILAMENT_LCD_DISPLAY)
       strcpy(wstring, ftostr12ns(filwidth.measured_mm));
-      strcpy(mstring, i16tostr3(planner.volumetric_percent(parser.volumetric_enabled)));
+      strcpy(mstring, i16tostr3rj(planner.volumetric_percent(parser.volumetric_enabled)));
     #endif
 
     // Progress / elapsed / estimation updates and string formatting to avoid float math on each LCD draw
@@ -438,7 +438,7 @@ void MarlinUI::draw_status_screen() {
               #if ENABLED(PRINT_PROGRESS_SHOW_DECIMALS)
                 permyriadtostr4(progress)
               #else
-                ui8tostr3(progress / (PROGRESS_SCALE))
+                ui8tostr3rj(progress / (PROGRESS_SCALE))
               #endif
             ));
           }
@@ -571,7 +571,7 @@ void MarlinUI::draw_status_screen() {
     // Laser / Spindle
     #if DO_DRAW_CUTTER
       if (cutter.power && PAGE_CONTAINS(STATUS_CUTTER_TEXT_Y - INFO_FONT_ASCENT, STATUS_CUTTER_TEXT_Y - 1)) {
-        lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, i16tostr3(cutter.powerPercent(cutter.power)));
+        lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, i16tostr3rj(cutter.powerPercent(cutter.power)));
         lcd_put_wchar('%');
       }
     #endif
@@ -598,7 +598,7 @@ void MarlinUI::draw_status_screen() {
               c = '*';
             }
           #endif
-          lcd_put_u8str(STATUS_FAN_TEXT_X, STATUS_FAN_TEXT_Y, i16tostr3(thermalManager.fanPercent(spd)));
+          lcd_put_u8str(STATUS_FAN_TEXT_X, STATUS_FAN_TEXT_Y, i16tostr3rj(thermalManager.fanPercent(spd)));
           lcd_put_wchar(c);
         }
       }
@@ -768,7 +768,7 @@ void MarlinUI::draw_status_screen() {
     lcd_put_wchar(3, EXTRAS_2_BASELINE, LCD_STR_FEEDRATE[0]);
 
     set_font(FONT_STATUSMENU);
-    lcd_put_u8str(12, EXTRAS_2_BASELINE, i16tostr3(feedrate_percentage));
+    lcd_put_u8str(12, EXTRAS_2_BASELINE, i16tostr3rj(feedrate_percentage));
     lcd_put_wchar('%');
 
     //

commit 5e9a10dbaeaa885a670af0bd7ef3e7c068f5a7b8
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 1 07:36:25 2020 -0600

    Use PSTR for common labels

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 1ea1424d30..908dfdf8f2 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -652,11 +652,11 @@ void MarlinUI::draw_status_screen() {
           }
         }
         else if (progress_state == 2 && estimation_string[0]) {
-          lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, "R:");
+          lcd_put_u8str_P(PROGRESS_BAR_X, EXTRAS_BASELINE, PSTR("R:"));
           lcd_put_u8str(estimation_x_pos, EXTRAS_BASELINE, estimation_string);
         }
         else if (elapsed_string[0]) {
-          lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, "E:");
+          lcd_put_u8str_P(PROGRESS_BAR_X, EXTRAS_BASELINE, E_LBL);
           lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
         }
 

commit 6fd7f4fe1bfeed6c3b145c760752a379c3bb5cf0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Feb 26 08:09:57 2020 -0600

    Fix unified status bed temp display

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 75f1c8bddb..1ea1424d30 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -188,21 +188,6 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
             u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(heater, isHeat));
       #endif
 
-      // Draw a heating progress bar, if specified
-      #if DO_DRAW_BED && ENABLED(STATUS_HEAT_PERCENT)
-
-        if (STATIC_HOTEND && isHeat) {
-          const uint8_t bx = STATUS_HOTEND_X(heater) + STATUS_HOTEND_WIDTH(heater) + 1;
-          u8g.drawFrame(bx, STATUS_HEATERS_Y, 3, STATUS_HEATERS_HEIGHT);
-          if (tall) {
-            const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
-            if (PAGE_OVER(STATUS_HEATERS_Y + ph))
-              u8g.drawVLine(bx + 1, STATUS_HEATERS_Y + ph, tall);
-          }
-        }
-
-      #endif
-
     } // PAGE_CONTAINS
 
     if (PAGE_UNDER(7)) {
@@ -240,11 +225,11 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
     const float temp = thermalManager.degBed(),
               target = thermalManager.degTargetBed();
 
-    #if ENABLED(STATUS_HEAT_PERCENT) || (DO_DRAW_BED && DISABLED(STATUS_BED_ANIM))
+    #if ENABLED(STATUS_HEAT_PERCENT) || DISABLED(STATUS_BED_ANIM)
       const bool isHeat = BED_ALT();
     #endif
 
-    #if DO_DRAW_BED && DISABLED(STATUS_BED_ANIM)
+    #if DISABLED(STATUS_BED_ANIM)
       #define STATIC_BED    true
       #define BED_DOT       isHeat
     #else
@@ -513,7 +498,7 @@ void MarlinUI::draw_status_screen() {
       u8g.drawBitmapP(STATUS_HEATERS_X, STATUS_HEATERS_Y, STATUS_HEATERS_BYTEWIDTH, STATUS_HEATERS_HEIGHT, status_heaters_bmp);
   #endif
 
-  #if DO_DRAW_CUTTER
+  #if DO_DRAW_CUTTER && DISABLED(STATUS_COMBINE_HEATERS)
     #if ANIM_CUTTER
       #define CUTTER_BITMAP(S) ((S) ? status_cutter_on_bmp : status_cutter_bmp)
     #else
@@ -537,7 +522,7 @@ void MarlinUI::draw_status_screen() {
       u8g.drawBitmapP(STATUS_BED_X, bedy, STATUS_BED_BYTEWIDTH, bedh, BED_BITMAP(BED_ALT()));
   #endif
 
-  #if DO_DRAW_CHAMBER
+  #if DO_DRAW_CHAMBER && DISABLED(STATUS_COMBINE_HEATERS)
     #if ANIM_CHAMBER
       #define CHAMBER_BITMAP(S) ((S) ? status_chamber_on_bmp : status_chamber_bmp)
     #else

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 8774b72e4f..75f1c8bddb 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit d70dad6807422996bcf90599afcb277a9fee7bdc
Author: Justin <justinwilczek@gmail.com>
Date:   Sun Jan 5 02:08:24 2020 -0600

    Fix permyriad progress bar (#16460)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index bf2804d3a8..8774b72e4f 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -438,7 +438,7 @@ void MarlinUI::draw_status_screen() {
       if (p != lastProgress) {
         lastProgress = p;
 
-        progress_bar_solid_width = u8g_uint_t((PROGRESS_BAR_WIDTH - 2) * progress / (PROGRESS_SCALE) * 0.01f);
+        progress_bar_solid_width = u8g_uint_t((PROGRESS_BAR_WIDTH - 2) * (progress / (PROGRESS_SCALE)) * 0.01f);
 
         #if ENABLED(DOGM_SD_PERCENT)
           if (progress == 0) {

commit 92ad97372973a770cce2ee34fd131482a3dd312b
Author: Jason Smith <jason.inet@gmail.com>
Date:   Wed Jan 1 19:58:16 2020 -0800

    Fix some DOGM warnings (#16363)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 2f6da518bd..bf2804d3a8 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -235,13 +235,15 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
       UNUSED(blink);
     #endif
 
-    const bool isHeat = BED_ALT();
-
     const uint8_t tx = STATUS_BED_TEXT_X;
 
     const float temp = thermalManager.degBed(),
               target = thermalManager.degTargetBed();
 
+    #if ENABLED(STATUS_HEAT_PERCENT) || (DO_DRAW_BED && DISABLED(STATUS_BED_ANIM))
+      const bool isHeat = BED_ALT();
+    #endif
+
     #if DO_DRAW_BED && DISABLED(STATUS_BED_ANIM)
       #define STATIC_BED    true
       #define BED_DOT       isHeat

commit 6a514a1e8e96bcd26985615377523d1e45ca7b10
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 8 21:46:23 2019 -0500

    Move status screen defines

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 6607c37876..2f6da518bd 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -67,20 +67,6 @@
 #define EXTRAS_BASELINE (40 + INFO_FONT_ASCENT)
 #define STATUS_BASELINE (LCD_PIXEL_HEIGHT - INFO_FONT_DESCENT)
 
-#define DO_DRAW_LOGO (STATUS_LOGO_WIDTH && ENABLED(CUSTOM_STATUS_SCREEN_IMAGE))
-#define DO_DRAW_HOTENDS (HOTENDS > 0)
-#define DO_DRAW_CUTTER (HAS_CUTTER)
-#define DO_DRAW_BED (HAS_HEATED_BED && STATUS_BED_WIDTH && HOTENDS <= 4)
-#define DO_DRAW_CHAMBER (HAS_TEMP_CHAMBER && STATUS_CHAMBER_WIDTH && HOTENDS <= 4)
-#define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && HOTENDS <= 4 && defined(STATUS_FAN_FRAMES))
-
-#define ANIM_HOTEND (HOTENDS && ENABLED(STATUS_HOTEND_ANIM))
-#define ANIM_BED (DO_DRAW_BED && ENABLED(STATUS_BED_ANIM))
-#define ANIM_CHAMBER (DO_DRAW_CHAMBER && ENABLED(STATUS_CHAMBER_ANIM))
-#define ANIM_CUTTER (DO_DRAW_CUTTER && ENABLED(STATUS_CUTTER_ANIM))
-
-#define ANIM_HBCC (ANIM_HOTEND || ANIM_BED || ANIM_CHAMBER || ANIM_CUTTER)
-
 #if ANIM_HBCC
   enum HeatBits : uint8_t {
     HEATBIT_HOTEND,
@@ -90,6 +76,7 @@
   };
   IF<(HEATBIT_CUTTER > 7), uint16_t, uint8_t>::type heat_bits;
 #endif
+
 #if ANIM_HOTEND
   #define HOTEND_ALT(N) TEST(heat_bits, HEATBIT_HOTEND + N)
 #else

commit 01e4b0c067c23defa78a7c68bef872f132728875
Author: Luu Lac <45380455+shitcreek@users.noreply.github.com>
Date:   Sun Dec 1 21:20:15 2019 -0600

    Add Laser / Spindle bitmap for LCD (#16068)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 7fbd46004c..6607c37876 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -44,6 +44,10 @@
   #include "../../gcode/parser.h"
 #endif
 
+#if HAS_CUTTER
+  #include "../../feature/spindle_laser.h"
+#endif
+
 #if ENABLED(SDSUPPORT)
   #include "../../sd/cardreader.h"
 #endif
@@ -65,6 +69,7 @@
 
 #define DO_DRAW_LOGO (STATUS_LOGO_WIDTH && ENABLED(CUSTOM_STATUS_SCREEN_IMAGE))
 #define DO_DRAW_HOTENDS (HOTENDS > 0)
+#define DO_DRAW_CUTTER (HAS_CUTTER)
 #define DO_DRAW_BED (HAS_HEATED_BED && STATUS_BED_WIDTH && HOTENDS <= 4)
 #define DO_DRAW_CHAMBER (HAS_TEMP_CHAMBER && STATUS_CHAMBER_WIDTH && HOTENDS <= 4)
 #define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && HOTENDS <= 4 && defined(STATUS_FAN_FRAMES))
@@ -72,34 +77,45 @@
 #define ANIM_HOTEND (HOTENDS && ENABLED(STATUS_HOTEND_ANIM))
 #define ANIM_BED (DO_DRAW_BED && ENABLED(STATUS_BED_ANIM))
 #define ANIM_CHAMBER (DO_DRAW_CHAMBER && ENABLED(STATUS_CHAMBER_ANIM))
-
-#define ANIM_HBC (ANIM_HOTEND || ANIM_BED || ANIM_CHAMBER)
-
-#if ANIM_HBC
-  uint8_t heat_bits;
+#define ANIM_CUTTER (DO_DRAW_CUTTER && ENABLED(STATUS_CUTTER_ANIM))
+
+#define ANIM_HBCC (ANIM_HOTEND || ANIM_BED || ANIM_CHAMBER || ANIM_CUTTER)
+
+#if ANIM_HBCC
+  enum HeatBits : uint8_t {
+    HEATBIT_HOTEND,
+    HEATBIT_BED = HOTENDS,
+    HEATBIT_CHAMBER,
+    HEATBIT_CUTTER
+  };
+  IF<(HEATBIT_CUTTER > 7), uint16_t, uint8_t>::type heat_bits;
 #endif
 #if ANIM_HOTEND
-  #define HOTEND_ALT(N) TEST(heat_bits, N)
+  #define HOTEND_ALT(N) TEST(heat_bits, HEATBIT_HOTEND + N)
 #else
   #define HOTEND_ALT(N) false
 #endif
 #if ANIM_BED
-  #define BED_ALT() TEST(heat_bits, 7)
+  #define BED_ALT() TEST(heat_bits, HEATBIT_BED)
 #else
   #define BED_ALT() false
 #endif
 #if ANIM_CHAMBER
-  #define CHAMBER_ALT() TEST(heat_bits, 6)
+  #define CHAMBER_ALT() TEST(heat_bits, HEATBIT_CHAMBER)
 #else
   #define CHAMBER_ALT() false
 #endif
+#if ANIM_CUTTER
+  #define CUTTER_ALT(N) TEST(heat_bits, HEATBIT_CUTTER)
+#else
+  #define CUTTER_ALT() false
+#endif
 
-#if HOTENDS
+#if DO_DRAW_HOTENDS
   #define MAX_HOTEND_DRAW _MIN(HOTENDS, ((LCD_PIXEL_WIDTH - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
+  #define STATUS_HEATERS_BOT (STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)
 #endif
 
-#define STATUS_HEATERS_BOT (STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)
-
 #define PROGRESS_BAR_X 54
 #define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
 
@@ -112,6 +128,7 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 
 #if DO_DRAW_HOTENDS
 
+  // Draw hotend bitmap with current and target temperatures
   FORCE_INLINE void _draw_hotend_status(const heater_ind_t heater, const bool blink) {
     #if !HEATER_IDLE_HANDLER
       UNUSED(blink);
@@ -203,8 +220,7 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 
     if (PAGE_UNDER(7)) {
       #if HEATER_IDLE_HANDLER
-        const bool is_idle = thermalManager.hotend_idle[heater].timed_out,
-                   dodraw = (blink || !is_idle);
+        const bool dodraw = (blink || !thermalManager.hotend_idle[heater].timed_out);
       #else
         constexpr bool dodraw = true;
       #endif
@@ -222,10 +238,11 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 
   }
 
-#endif // HOTENDS
+#endif // DO_DRAW_HOTENDS
 
 #if DO_DRAW_BED
 
+  // Draw bed bitmap with current and target temperatures
   FORCE_INLINE void _draw_bed_status(const bool blink) {
     #if !HEATER_IDLE_HANDLER
       UNUSED(blink);
@@ -274,8 +291,7 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 
     if (PAGE_UNDER(7)) {
       #if HEATER_IDLE_HANDLER
-        const bool is_idle = thermalManager.bed_idle.timed_out,
-                   dodraw = (blink || !is_idle);
+        const bool dodraw = (blink || !thermalManager.bed_idle.timed_out);
       #else
         constexpr bool dodraw = true;
       #endif
@@ -383,16 +399,19 @@ void MarlinUI::draw_status_screen() {
 
   // At the first page, generate new display values
   if (first_page) {
-    #if ANIM_HBC
+    #if ANIM_HBCC
       uint8_t new_bits = 0;
       #if ANIM_HOTEND
-        HOTEND_LOOP() if (thermalManager.isHeatingHotend(e)) SBI(new_bits, e);
+        HOTEND_LOOP() if (thermalManager.isHeatingHotend(e)) SBI(new_bits, HEATBIT_HOTEND + e);
       #endif
       #if ANIM_BED
-        if (thermalManager.isHeatingBed()) SBI(new_bits, 7);
+        if (thermalManager.isHeatingBed()) SBI(new_bits, HEATBIT_BED);
       #endif
       #if DO_DRAW_CHAMBER && HAS_HEATED_CHAMBER
-        if (thermalManager.isHeatingChamber()) SBI(new_bits, 6);
+        if (thermalManager.isHeatingChamber()) SBI(new_bits, HEATBIT_CHAMBER);
+      #endif
+      #if ANIM_CUTTER
+        if (cutter.enabled()) SBI(new_bits, HEATBIT_CUTTER);
       #endif
       heat_bits = new_bits;
     #endif
@@ -505,6 +524,18 @@ void MarlinUI::draw_status_screen() {
       u8g.drawBitmapP(STATUS_HEATERS_X, STATUS_HEATERS_Y, STATUS_HEATERS_BYTEWIDTH, STATUS_HEATERS_HEIGHT, status_heaters_bmp);
   #endif
 
+  #if DO_DRAW_CUTTER
+    #if ANIM_CUTTER
+      #define CUTTER_BITMAP(S) ((S) ? status_cutter_on_bmp : status_cutter_bmp)
+    #else
+      #define CUTTER_BITMAP(S) status_cutter_bmp
+    #endif
+    const uint8_t cuttery = STATUS_CUTTER_Y(CUTTER_ALT()),
+                  cutterh = STATUS_CUTTER_HEIGHT(CUTTER_ALT());
+    if (PAGE_CONTAINS(cuttery, cuttery + cutterh - 1))
+      u8g.drawBitmapP(STATUS_CUTTER_X, cuttery, STATUS_CUTTER_BYTEWIDTH, cutterh, CUTTER_BITMAP(CUTTER_ALT()));
+  #endif
+
   #if DO_DRAW_BED && DISABLED(STATUS_COMBINE_HEATERS)
     #if ANIM_BED
       #define BED_BITMAP(S) ((S) ? status_bed_on_bmp : status_bed_bmp)
@@ -558,16 +589,25 @@ void MarlinUI::draw_status_screen() {
   //
   if (PAGE_UNDER(6 + 1 + 12 + 1 + 6 + 1)) {
     // Extruders
-    #if HOTENDS
+    #if DO_DRAW_HOTENDS
       for (uint8_t e = 0; e < MAX_HOTEND_DRAW; ++e)
         _draw_hotend_status((heater_ind_t)e, blink);
     #endif
 
-    // Heated bed
-    #if DO_DRAW_BED && DISABLED(STATUS_COMBINE_HEATERS) || (HAS_HEATED_BED && ENABLED(STATUS_COMBINE_HEATERS) && HOTENDS <= 4)
+    // Laser / Spindle
+    #if DO_DRAW_CUTTER
+      if (cutter.power && PAGE_CONTAINS(STATUS_CUTTER_TEXT_Y - INFO_FONT_ASCENT, STATUS_CUTTER_TEXT_Y - 1)) {
+        lcd_put_u8str(STATUS_CUTTER_TEXT_X, STATUS_CUTTER_TEXT_Y, i16tostr3(cutter.powerPercent(cutter.power)));
+        lcd_put_wchar('%');
+      }
+    #endif
+
+    // Heated Bed
+    #if DO_DRAW_BED
       _draw_bed_status(blink);
     #endif
 
+    // Heated Chamber
     #if DO_DRAW_CHAMBER
       _draw_chamber_status();
     #endif

commit 3dc49fd1c6f0be7b765300c433c905c273f36711
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Dec 1 20:06:00 2019 -0600

    Split up hotend / bed drawing

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index ee4f001e51..7fbd46004c 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -64,6 +64,7 @@
 #define STATUS_BASELINE (LCD_PIXEL_HEIGHT - INFO_FONT_DESCENT)
 
 #define DO_DRAW_LOGO (STATUS_LOGO_WIDTH && ENABLED(CUSTOM_STATUS_SCREEN_IMAGE))
+#define DO_DRAW_HOTENDS (HOTENDS > 0)
 #define DO_DRAW_BED (HAS_HEATED_BED && STATUS_BED_WIDTH && HOTENDS <= 4)
 #define DO_DRAW_CHAMBER (HAS_TEMP_CHAMBER && STATUS_CHAMBER_WIDTH && HOTENDS <= 4)
 #define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && HOTENDS <= 4 && defined(STATUS_FAN_FRAMES))
@@ -102,12 +103,6 @@
 #define PROGRESS_BAR_X 54
 #define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
 
-#if ENABLED(MARLIN_DEV_MODE)
-  #define SHOW_ON_STATE READ(X_MIN_PIN)
-#else
-  #define SHOW_ON_STATE false
-#endif
-
 FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, const uint8_t ty) {
   const char *str = i16tostr3(temp);
   const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
@@ -115,95 +110,67 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
   lcd_put_wchar(LCD_STR_DEGREE[0]);
 }
 
-FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blink) {
-  #if !HEATER_IDLE_HANDLER
-    UNUSED(blink);
-  #endif
+#if DO_DRAW_HOTENDS
 
-  #if DO_DRAW_BED && DISABLED(STATUS_COMBINE_HEATERS) || (HAS_HEATED_BED && ENABLED(STATUS_COMBINE_HEATERS) && HOTENDS <= 4)
-    const bool isBed = heater < 0;
-    #define IFBED(A,B) (isBed ? (A) : (B))
-  #else
-    #define IFBED(A,B) (B)
-  #endif
-
-  #if ENABLED(MARLIN_DEV_MODE)
-    constexpr bool isHeat = true;
-  #else
-    const bool isHeat = IFBED(BED_ALT(), HOTEND_ALT(heater));
-  #endif
-
-  #ifndef STATUS_HOTEND_TEXT_X
-    #define STATUS_HOTEND_TEXT_X(N) 0
-    #define STATUS_HEATERS_Y 0
-  #endif
+  FORCE_INLINE void _draw_hotend_status(const heater_ind_t heater, const bool blink) {
+    #if !HEATER_IDLE_HANDLER
+      UNUSED(blink);
+    #endif
 
-  const uint8_t tx = IFBED(STATUS_BED_TEXT_X, STATUS_HOTEND_TEXT_X(heater));
+    const bool isHeat = HOTEND_ALT(heater);
 
-  #if ENABLED(MARLIN_DEV_MODE)
-    const float temp = 20 + (millis() >> 8) % IFBED(100, 200),
-              target = IFBED(100, 200);
-  #else
-    const float temp = IFBED(thermalManager.degBed(), thermalManager.degHotend(heater)),
-              target = IFBED(thermalManager.degTargetBed(), thermalManager.degTargetHotend(heater));
-  #endif
+    const uint8_t tx = STATUS_HOTEND_TEXT_X(heater);
 
-  #if DISABLED(STATUS_HOTEND_ANIM)
-    #define STATIC_HOTEND true
-    #define HOTEND_DOT    isHeat
-  #else
-    #define STATIC_HOTEND false
-    #define HOTEND_DOT    false
-  #endif
+    const float temp = thermalManager.degHotend(heater),
+              target = thermalManager.degTargetHotend(heater);
 
-  #if DO_DRAW_BED && DISABLED(STATUS_BED_ANIM)
-    #define STATIC_BED    true
-    #define BED_DOT       isHeat
-  #else
-    #define STATIC_BED    false
-    #define BED_DOT       false
-  #endif
+    #if DISABLED(STATUS_HOTEND_ANIM)
+      #define STATIC_HOTEND true
+      #define HOTEND_DOT    isHeat
+    #else
+      #define STATIC_HOTEND false
+      #define HOTEND_DOT    false
+    #endif
 
-  #if ANIM_HOTEND && BOTH(STATUS_HOTEND_INVERTED, STATUS_HOTEND_NUMBERLESS)
-    #define OFF_BMP(N) status_hotend_b_bmp
-    #define ON_BMP(N)  status_hotend_a_bmp
-  #elif ANIM_HOTEND && DISABLED(STATUS_HOTEND_INVERTED) && ENABLED(STATUS_HOTEND_NUMBERLESS)
-    #define OFF_BMP(N) status_hotend_a_bmp
-    #define ON_BMP(N)  status_hotend_b_bmp
-  #elif ANIM_HOTEND && ENABLED(STATUS_HOTEND_INVERTED)
-    #define OFF_BMP(N) status_hotend##N##_b_bmp
-    #define ON_BMP(N)  status_hotend##N##_a_bmp
-  #else
-    #define OFF_BMP(N) status_hotend##N##_a_bmp
-    #define ON_BMP(N)  status_hotend##N##_b_bmp
-  #endif
+    #if ANIM_HOTEND && BOTH(STATUS_HOTEND_INVERTED, STATUS_HOTEND_NUMBERLESS)
+      #define OFF_BMP(N) status_hotend_b_bmp
+      #define ON_BMP(N)  status_hotend_a_bmp
+    #elif ANIM_HOTEND && DISABLED(STATUS_HOTEND_INVERTED) && ENABLED(STATUS_HOTEND_NUMBERLESS)
+      #define OFF_BMP(N) status_hotend_a_bmp
+      #define ON_BMP(N)  status_hotend_b_bmp
+    #elif ANIM_HOTEND && ENABLED(STATUS_HOTEND_INVERTED)
+      #define OFF_BMP(N) status_hotend##N##_b_bmp
+      #define ON_BMP(N)  status_hotend##N##_a_bmp
+    #else
+      #define OFF_BMP(N) status_hotend##N##_a_bmp
+      #define ON_BMP(N)  status_hotend##N##_b_bmp
+    #endif
 
-  #if STATUS_HOTEND_BITMAPS > 1
-    static const unsigned char* const status_hotend_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, OFF_BMP(1), OFF_BMP(2), OFF_BMP(3), OFF_BMP(4), OFF_BMP(5), OFF_BMP(6));
-    #if ANIM_HOTEND
-      static const unsigned char* const status_hotend_on_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, ON_BMP(1), ON_BMP(2), ON_BMP(3), ON_BMP(4), ON_BMP(5), ON_BMP(6));
-      #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr((S) ? &status_hotend_on_gfx[(N) % (STATUS_HOTEND_BITMAPS)] : &status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
+    #if STATUS_HOTEND_BITMAPS > 1
+      static const unsigned char* const status_hotend_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, OFF_BMP(1), OFF_BMP(2), OFF_BMP(3), OFF_BMP(4), OFF_BMP(5), OFF_BMP(6));
+      #if ANIM_HOTEND
+        static const unsigned char* const status_hotend_on_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, ON_BMP(1), ON_BMP(2), ON_BMP(3), ON_BMP(4), ON_BMP(5), ON_BMP(6));
+        #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr((S) ? &status_hotend_on_gfx[(N) % (STATUS_HOTEND_BITMAPS)] : &status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
+      #else
+        #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr(&status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
+      #endif
+    #elif ANIM_HOTEND
+      #define HOTEND_BITMAP(N,S) ((S) ? ON_BMP() : OFF_BMP())
     #else
-      #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr(&status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
+      #define HOTEND_BITMAP(N,S) status_hotend_a_bmp
     #endif
-  #elif ANIM_HOTEND
-    #define HOTEND_BITMAP(N,S) ((S) ? ON_BMP() : OFF_BMP())
-  #else
-    #define HOTEND_BITMAP(N,S) status_hotend_a_bmp
-  #endif
 
-  if (PAGE_CONTAINS(STATUS_HEATERS_Y, STATUS_HEATERS_BOT)) {
+    if (PAGE_CONTAINS(STATUS_HEATERS_Y, STATUS_HEATERS_BOT)) {
 
-    #define BAR_TALL (STATUS_HEATERS_HEIGHT - 2)
+      #define BAR_TALL (STATUS_HEATERS_HEIGHT - 2)
 
-    const float prop = target - 20,
-                perc = prop > 0 && temp >= 20 ? (temp - 20) / prop : 0;
-    uint8_t tall = uint8_t(perc * BAR_TALL + 0.5f);
-    NOMORE(tall, BAR_TALL);
+      const float prop = target - 20,
+                  perc = prop > 0 && temp >= 20 ? (temp - 20) / prop : 0;
+      uint8_t tall = uint8_t(perc * BAR_TALL + 0.5f);
+      NOMORE(tall, BAR_TALL);
 
-    #if ANIM_HOTEND
-      // Draw hotend bitmap, either whole or split by the heating percent
-      if (IFBED(0, 1)) {
+      #if ANIM_HOTEND
+        // Draw hotend bitmap, either whole or split by the heating percent
         const uint8_t hx = STATUS_HOTEND_X(heater),
                       bw = STATUS_HOTEND_BYTEWIDTH(heater);
         #if ENABLED(STATUS_HEAT_PERCENT)
@@ -215,79 +182,129 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
           else
         #endif
             u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(heater, isHeat));
-      }
-    #endif
+      #endif
 
-    // Draw a heating progress bar, if specified
-    #if DO_DRAW_BED && ENABLED(STATUS_HEAT_PERCENT)
+      // Draw a heating progress bar, if specified
+      #if DO_DRAW_BED && ENABLED(STATUS_HEAT_PERCENT)
 
-      if (IFBED(true, STATIC_HOTEND) && isHeat) {
-        const uint8_t bx = IFBED(STATUS_BED_X + STATUS_BED_WIDTH - 1, STATUS_HOTEND_X(heater) + STATUS_HOTEND_WIDTH(heater)) + 1;
-        u8g.drawFrame(bx, STATUS_HEATERS_Y, 3, STATUS_HEATERS_HEIGHT);
-        if (tall) {
-          const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
-          if (PAGE_OVER(STATUS_HEATERS_Y + ph))
-            u8g.drawVLine(bx + 1, STATUS_HEATERS_Y + ph, tall);
+        if (STATIC_HOTEND && isHeat) {
+          const uint8_t bx = STATUS_HOTEND_X(heater) + STATUS_HOTEND_WIDTH(heater) + 1;
+          u8g.drawFrame(bx, STATUS_HEATERS_Y, 3, STATUS_HEATERS_HEIGHT);
+          if (tall) {
+            const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
+            if (PAGE_OVER(STATUS_HEATERS_Y + ph))
+              u8g.drawVLine(bx + 1, STATUS_HEATERS_Y + ph, tall);
+          }
         }
-      }
 
+      #endif
+
+    } // PAGE_CONTAINS
+
+    if (PAGE_UNDER(7)) {
+      #if HEATER_IDLE_HANDLER
+        const bool is_idle = thermalManager.hotend_idle[heater].timed_out,
+                   dodraw = (blink || !is_idle);
+      #else
+        constexpr bool dodraw = true;
+      #endif
+      if (dodraw) _draw_centered_temp(target + 0.5, tx, 7);
+    }
+
+    if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
+      _draw_centered_temp(temp + 0.5f, tx, 28);
+
+    if (STATIC_HOTEND && HOTEND_DOT && PAGE_CONTAINS(17, 19)) {
+      u8g.setColorIndex(0); // set to white on black
+      u8g.drawBox(tx, 20 - 3, 2, 2);
+      u8g.setColorIndex(1); // restore black on white
+    }
+
+  }
+
+#endif // HOTENDS
+
+#if DO_DRAW_BED
+
+  FORCE_INLINE void _draw_bed_status(const bool blink) {
+    #if !HEATER_IDLE_HANDLER
+      UNUSED(blink);
     #endif
 
-  } // PAGE_CONTAINS
+    const bool isHeat = BED_ALT();
 
-  if (PAGE_UNDER(7)) {
-    #if HEATER_IDLE_HANDLER
-      const bool is_idle = IFBED(thermalManager.bed_idle.timed_out, thermalManager.hotend_idle[heater].timed_out),
-                 dodraw = (blink || !is_idle);
+    const uint8_t tx = STATUS_BED_TEXT_X;
+
+    const float temp = thermalManager.degBed(),
+              target = thermalManager.degTargetBed();
+
+    #if DO_DRAW_BED && DISABLED(STATUS_BED_ANIM)
+      #define STATIC_BED    true
+      #define BED_DOT       isHeat
     #else
-      constexpr bool dodraw = true;
+      #define STATIC_BED    false
+      #define BED_DOT       false
     #endif
-    if (dodraw) _draw_centered_temp(target + 0.5, tx, 7);
-  }
 
-  if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
-    _draw_centered_temp(temp + 0.5f, tx, 28);
+    if (PAGE_CONTAINS(STATUS_HEATERS_Y, STATUS_HEATERS_BOT)) {
 
-  if (IFBED(STATIC_BED && BED_DOT, STATIC_HOTEND && HOTEND_DOT) && PAGE_CONTAINS(17, 19)) {
-    u8g.setColorIndex(0); // set to white on black
-    u8g.drawBox(tx, IFBED(20-2, 20-3), 2, 2);
-    u8g.setColorIndex(1); // restore black on white
-  }
+      #define BAR_TALL (STATUS_HEATERS_HEIGHT - 2)
 
-}
+      const float prop = target - 20,
+                  perc = prop > 0 && temp >= 20 ? (temp - 20) / prop : 0;
+      uint8_t tall = uint8_t(perc * BAR_TALL + 0.5f);
+      NOMORE(tall, BAR_TALL);
 
-#if DO_DRAW_CHAMBER
+      // Draw a heating progress bar, if specified
+      #if ENABLED(STATUS_HEAT_PERCENT)
+
+        if (isHeat) {
+          const uint8_t bx = STATUS_BED_X + STATUS_BED_WIDTH;
+          u8g.drawFrame(bx, STATUS_HEATERS_Y, 3, STATUS_HEATERS_HEIGHT);
+          if (tall) {
+            const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
+            if (PAGE_OVER(STATUS_HEATERS_Y + ph))
+              u8g.drawVLine(bx + 1, STATUS_HEATERS_Y + ph, tall);
+          }
+        }
 
-  FORCE_INLINE void _draw_chamber_status(const bool blink) {
-    #if ENABLED(MARLIN_DEV_MODE)
-      const float temp = 10 + (millis() >> 8) % CHAMBER_MAXTEMP,
-                target = CHAMBER_MAXTEMP;
-    #else
-      const float temp = thermalManager.degChamber();
-      #if HAS_HEATED_CHAMBER
-        const float target = thermalManager.degTargetChamber();
       #endif
-    #endif
 
-    #if !HEATER_IDLE_HANDLER
-      UNUSED(blink);
-    #endif
+    } // PAGE_CONTAINS
 
     if (PAGE_UNDER(7)) {
       #if HEATER_IDLE_HANDLER
-        const bool is_idle = false, // thermalManager.chamber_idle.timed_out,
+        const bool is_idle = thermalManager.bed_idle.timed_out,
                    dodraw = (blink || !is_idle);
       #else
         constexpr bool dodraw = true;
       #endif
-      #if HAS_HEATED_CHAMBER
-        if (dodraw) _draw_centered_temp(target + 0.5, STATUS_CHAMBER_TEXT_X, 7);
-      #else
-        UNUSED(dodraw);
-      #endif
+      if (dodraw) _draw_centered_temp(target + 0.5, tx, 7);
     }
+
     if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
-      _draw_centered_temp(temp + 0.5f, STATUS_CHAMBER_TEXT_X, 28);
+      _draw_centered_temp(temp + 0.5f, tx, 28);
+
+    if (STATIC_BED && BED_DOT && PAGE_CONTAINS(17, 19)) {
+      u8g.setColorIndex(0); // set to white on black
+      u8g.drawBox(tx, 20 - 2, 2, 2);
+      u8g.setColorIndex(1); // restore black on white
+    }
+
+  }
+
+#endif // DO_DRAW_BED
+
+#if DO_DRAW_CHAMBER
+
+  FORCE_INLINE void _draw_chamber_status() {
+    #if HAS_HEATED_CHAMBER
+      if (PAGE_UNDER(7))
+        _draw_centered_temp(thermalManager.degTargetChamber() + 0.5f, STATUS_CHAMBER_TEXT_X, 7);
+    #endif
+
+    if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
+      _draw_centered_temp(thermalManager.degChamber() + 0.5f, STATUS_CHAMBER_TEXT_X, 28);
   }
 
 #endif // DO_DRAW_CHAMBER
@@ -323,17 +340,8 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   }
 }
 
-#if ENABLED(MARLIN_DEV_MODE)
-  uint16_t count_renders = 0;
-  uint32_t total_cycles = 0;
-#endif
-
 void MarlinUI::draw_status_screen() {
 
-  #if ENABLED(MARLIN_DEV_MODE)
-    if (first_page) count_renders++;
-  #endif
-
   static char xstring[5
     #if ENABLED(LCD_SHOW_E_TOTAL)
       + 7
@@ -378,13 +386,13 @@ void MarlinUI::draw_status_screen() {
     #if ANIM_HBC
       uint8_t new_bits = 0;
       #if ANIM_HOTEND
-        HOTEND_LOOP() if (thermalManager.isHeatingHotend(e) ^ SHOW_ON_STATE) SBI(new_bits, e);
+        HOTEND_LOOP() if (thermalManager.isHeatingHotend(e)) SBI(new_bits, e);
       #endif
       #if ANIM_BED
-        if (thermalManager.isHeatingBed() ^ SHOW_ON_STATE) SBI(new_bits, 7);
+        if (thermalManager.isHeatingBed()) SBI(new_bits, 7);
       #endif
       #if DO_DRAW_CHAMBER && HAS_HEATED_CHAMBER
-        if (thermalManager.isHeatingChamber() ^ SHOW_ON_STATE) SBI(new_bits, 6);
+        if (thermalManager.isHeatingChamber()) SBI(new_bits, 6);
       #endif
       heat_bits = new_bits;
     #endif
@@ -486,10 +494,6 @@ void MarlinUI::draw_status_screen() {
   // Status Menu Font
   set_font(FONT_STATUSMENU);
 
-  #if ENABLED(MARLIN_DEV_MODE)
-    TCNT5 = 0;
-  #endif
-
   #if DO_DRAW_LOGO
     if (PAGE_CONTAINS(STATUS_LOGO_Y, STATUS_LOGO_Y + STATUS_LOGO_HEIGHT - 1))
       u8g.drawBitmapP(STATUS_LOGO_X, STATUS_LOGO_Y, STATUS_LOGO_BYTEWIDTH, STATUS_LOGO_HEIGHT, status_logo_bmp);
@@ -556,16 +560,16 @@ void MarlinUI::draw_status_screen() {
     // Extruders
     #if HOTENDS
       for (uint8_t e = 0; e < MAX_HOTEND_DRAW; ++e)
-        _draw_heater_status((heater_ind_t)e, blink);
+        _draw_hotend_status((heater_ind_t)e, blink);
     #endif
 
     // Heated bed
     #if DO_DRAW_BED && DISABLED(STATUS_COMBINE_HEATERS) || (HAS_HEATED_BED && ENABLED(STATUS_COMBINE_HEATERS) && HOTENDS <= 4)
-      _draw_heater_status(H_BED, blink);
+      _draw_bed_status(blink);
     #endif
 
     #if DO_DRAW_CHAMBER
-      _draw_chamber_status(blink);
+      _draw_chamber_status();
     #endif
 
     // Fan, if a bitmap was provided
@@ -587,10 +591,6 @@ void MarlinUI::draw_status_screen() {
     #endif
   }
 
-  #if ENABLED(MARLIN_DEV_MODE)
-    total_cycles += TCNT5;
-  #endif
-
   #if ENABLED(SDSUPPORT)
     //
     // SD Card Symbol
@@ -795,17 +795,6 @@ void MarlinUI::draw_status_screen() {
 
 void MarlinUI::draw_status_message(const bool blink) {
 
-  #if ENABLED(MARLIN_DEV_MODE)
-    if (PAGE_CONTAINS(64-8, 64-1)) {
-      lcd_put_int(total_cycles);
-      lcd_put_wchar('/');
-      lcd_put_int(count_renders);
-      lcd_put_wchar('=');
-      lcd_put_int(int(total_cycles / count_renders));
-      return;
-    }
-  #endif
-
   // Get the UTF8 character count of the string
   uint8_t slen = utf8_strlen(status_message);
 

commit fc9f8d27eb0ae4d0d7439c0b33379e907ef4407d
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Tue Nov 26 15:55:22 2019 +0700

    Fix Progress / Remaining display on DOGM (#16005)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 22511d06b2..ee4f001e51 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -353,7 +353,7 @@ void MarlinUI::draw_status_screen() {
     #if ENABLED(DOGM_SD_PERCENT)
       static char progress_string[5];
     #endif
-    static uint8_t lastElapsed = 0, lastProgress = 0;
+    static uint8_t lastElapsed = 0xFF, lastProgress = 0xFF;
     static u8g_uint_t elapsed_x_pos = 0, progress_bar_solid_width = 0;
     static char elapsed_string[16];
     #if ENABLED(SHOW_REMAINING_TIME)
@@ -460,7 +460,7 @@ void MarlinUI::draw_status_screen() {
                 + get_remaining_time()
               #endif
             );
-            if (!timeval) timeval = elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
+            if (!timeval && progress > 0) timeval = elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
             if (!timeval) {
               estimation_string[0] = '\0';
               estimation_x_pos = _SD_INFO_X(0);

commit 602ca5dea6b613af44629023bd438285abd0fe45
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Nov 13 02:07:09 2019 -0600

    No USE_M73_REMAINING_TIME without LCD_SET_PROGRESS_MANUALLY

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 4211e86ca1..22511d06b2 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -456,7 +456,7 @@ void MarlinUI::draw_status_screen() {
         #if ENABLED(SHOW_REMAINING_TIME)
           if (!(ev & 0x3)) {
             uint32_t timeval = (0
-              #if ENABLED(USE_M73_REMAINING_TIME)
+              #if BOTH(LCD_SET_PROGRESS_MANUALLY, USE_M73_REMAINING_TIME)
                 + get_remaining_time()
               #endif
             );

commit e110f5abce90d139a768242780780832b09aa297
Author: Roman Moravčík <roman.moravcik@gmail.com>
Date:   Wed Nov 13 02:36:54 2019 +0100

    M73 R : Set Remaining Time (#15549)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index f93a72e582..4211e86ca1 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -455,19 +455,25 @@ void MarlinUI::draw_status_screen() {
 
         #if ENABLED(SHOW_REMAINING_TIME)
           if (!(ev & 0x3)) {
-            duration_t estimation = elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
-            if (estimation.value == 0) {
+            uint32_t timeval = (0
+              #if ENABLED(USE_M73_REMAINING_TIME)
+                + get_remaining_time()
+              #endif
+            );
+            if (!timeval) timeval = elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
+            if (!timeval) {
               estimation_string[0] = '\0';
               estimation_x_pos = _SD_INFO_X(0);
             }
             else {
+              duration_t estimation = timeval;
               const bool has_days = (estimation.value >= 60*60*24L);
               const uint8_t len = estimation.toDigital(estimation_string, has_days);
-              #if BOTH(DOGM_SD_PERCENT, ROTATE_PROGRESS_DISPLAY)
-                estimation_x_pos = _SD_INFO_X(len);
-              #else
-                estimation_x_pos = _SD_INFO_X(len + 1);
-              #endif
+              estimation_x_pos = _SD_INFO_X(len
+                #if !BOTH(DOGM_SD_PERCENT, ROTATE_PROGRESS_DISPLAY)
+                  + 1
+                #endif
+              );
             }
           }
         #endif

commit 7360e9343a70e966234dfe69046394a93c2792f7
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Sat Nov 2 19:04:31 2019 +0700

    Minor DOGM status screen fix (#15746)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index f2b6ae002f..f93a72e582 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -388,17 +388,21 @@ void MarlinUI::draw_status_screen() {
       #endif
       heat_bits = new_bits;
     #endif
+
     const xyz_pos_t lpos = current_position.asLogical();
-    if (showxy)
+    strcpy(zstring, ftostr52sp(lpos.z));
+
+    if (showxy) {
       strcpy(xstring, ftostr4sign(lpos.x));
+      strcpy(ystring, ftostr4sign(lpos.y));
+    }
     else {
       #if ENABLED(LCD_SHOW_E_TOTAL)
         const uint8_t escale = e_move_accumulator >= 100000.0f ? 10 : 1; // After 100m switch to cm
         sprintf_P(xstring, PSTR("%ld%cm"), uint32_t(_MAX(e_move_accumulator, 0.0f)) / escale, escale == 10 ? 'c' : 'm'); // 1234567mm
       #endif
     }
-    strcpy(ystring, ftostr4sign(lpos.y));
-    strcpy(zstring, ftostr52sp( lpos.z));
+
     #if ENABLED(FILAMENT_LCD_DISPLAY)
       strcpy(wstring, ftostr12ns(filwidth.measured_mm));
       strcpy(mstring, i16tostr3(planner.volumetric_percent(parser.volumetric_enabled)));

commit bdb452ed8120bdeb697525174c8d25417e5156b4
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Sat Nov 2 19:01:50 2019 +0700

    Fix missing % on DOGM Status Screen (#15748)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 0d4ff7f471..f2b6ae002f 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -438,7 +438,7 @@ void MarlinUI::draw_status_screen() {
             ));
           }
           #if BOTH(SHOW_REMAINING_TIME, ROTATE_PROGRESS_DISPLAY) // Tri-state progress display mode
-            progress_x_pos = _SD_INFO_X(strlen(progress_string));
+            progress_x_pos = _SD_INFO_X(strlen(progress_string) + 1);
           #endif
         #endif
       }

commit 78899fc24178d84f78c87ec5de287d9afbaf9f1a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Oct 27 17:58:28 2019 -0500

    Followup to E Total

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index e16a938da0..0d4ff7f471 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -298,7 +298,13 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
 // Homed and known, display constantly.
 //
 FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const bool blink) {
-  const uint8_t offs = (XYZ_SPACING) * axis;
+  const AxisEnum a = (
+    #if ENABLED(LCD_SHOW_E_TOTAL)
+      axis == E_AXIS ? X_AXIS :
+    #endif
+    axis
+  );
+  const uint8_t offs = (XYZ_SPACING) * a;
   lcd_put_wchar(X_LABEL_POS + offs, XYZ_BASELINE, axis_codes[axis]);
   lcd_moveto(X_VALUE_POS + offs, XYZ_BASELINE);
   if (blink)
@@ -361,6 +367,12 @@ void MarlinUI::draw_status_screen() {
     #endif
   #endif
 
+  const bool showxy = (true
+    #if ENABLED(LCD_SHOW_E_TOTAL)
+      && !printingIsActive()
+    #endif
+  );
+
   // At the first page, generate new display values
   if (first_page) {
     #if ANIM_HBC
@@ -377,11 +389,6 @@ void MarlinUI::draw_status_screen() {
       heat_bits = new_bits;
     #endif
     const xyz_pos_t lpos = current_position.asLogical();
-    const bool showxy = (true
-      #if ENABLED(LCD_SHOW_E_TOTAL)
-        && !printingIsActive()
-      #endif
-    );
     if (showxy)
       strcpy(xstring, ftostr4sign(lpos.x));
     else {

commit 7a342ecb935e421abfef2f8ed9a8d004f4d30a9f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Oct 27 17:49:27 2019 -0500

    Show Total E during print (#15703)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 87978635bd..e16a938da0 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -299,7 +299,7 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
 //
 FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const bool blink) {
   const uint8_t offs = (XYZ_SPACING) * axis;
-  lcd_put_wchar(X_LABEL_POS + offs, XYZ_BASELINE, 'X' + axis);
+  lcd_put_wchar(X_LABEL_POS + offs, XYZ_BASELINE, axis_codes[axis]);
   lcd_moveto(X_VALUE_POS + offs, XYZ_BASELINE);
   if (blink)
     lcd_put_u8str(value);
@@ -328,7 +328,11 @@ void MarlinUI::draw_status_screen() {
     if (first_page) count_renders++;
   #endif
 
-  static char xstring[5], ystring[5], zstring[8];
+  static char xstring[5
+    #if ENABLED(LCD_SHOW_E_TOTAL)
+      + 7
+    #endif
+  ], ystring[5], zstring[8];
   #if ENABLED(FILAMENT_LCD_DISPLAY)
     static char wstring[5], mstring[4];
   #endif
@@ -373,7 +377,19 @@ void MarlinUI::draw_status_screen() {
       heat_bits = new_bits;
     #endif
     const xyz_pos_t lpos = current_position.asLogical();
-    strcpy(xstring, ftostr4sign(lpos.x));
+    const bool showxy = (true
+      #if ENABLED(LCD_SHOW_E_TOTAL)
+        && !printingIsActive()
+      #endif
+    );
+    if (showxy)
+      strcpy(xstring, ftostr4sign(lpos.x));
+    else {
+      #if ENABLED(LCD_SHOW_E_TOTAL)
+        const uint8_t escale = e_move_accumulator >= 100000.0f ? 10 : 1; // After 100m switch to cm
+        sprintf_P(xstring, PSTR("%ld%cm"), uint32_t(_MAX(e_move_accumulator, 0.0f)) / escale, escale == 10 ? 'c' : 'm'); // 1234567mm
+      #endif
+    }
     strcpy(ystring, ftostr4sign(lpos.y));
     strcpy(zstring, ftostr52sp( lpos.z));
     #if ENABLED(FILAMENT_LCD_DISPLAY)
@@ -692,8 +708,14 @@ void MarlinUI::draw_status_screen() {
 
       #else
 
-        _draw_axis_value(X_AXIS, xstring, blink);
-        _draw_axis_value(Y_AXIS, ystring, blink);
+        if (showxy) {
+          _draw_axis_value(X_AXIS, xstring, blink);
+          _draw_axis_value(Y_AXIS, ystring, blink);
+        }
+        else {
+          _draw_axis_value(E_AXIS, xstring, true);
+          lcd_put_u8str_P(PSTR("       "));
+        }
 
       #endif
 

commit 12a244f24f063d8f99a1f2341fc83dc38a041fe7
Author: Evgeny Zyatkov <Evg33@users.noreply.github.com>
Date:   Fri Oct 25 20:27:23 2019 +0300

    Fix #endif typo (#15661)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 9dcd3319fb..87978635bd 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -639,7 +639,7 @@ void MarlinUI::draw_status_screen() {
         #endif
             lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
 
-      #else // !DOGM_SD_PERCENT || !SHOW_REMAINING_TIME || !ROTATE_PROGRESS_DISPLAY
+      #endif // !DOGM_SD_PERCENT || !SHOW_REMAINING_TIME || !ROTATE_PROGRESS_DISPLAY
     }
 
   #endif // HAS_PRINT_PROGRESS

commit 464d98d1788d9e02fdfbb0f917b0e9959266f235
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Oct 24 14:00:32 2019 -0500

    Short time prefixes, no percent prefix

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index f9a17280db..9dcd3319fb 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -335,9 +335,9 @@ void MarlinUI::draw_status_screen() {
 
   #if HAS_PRINT_PROGRESS
     #if DISABLED(DOGM_SD_PERCENT)
-      #define _SD_DURATION_X(len) (PROGRESS_BAR_X + (PROGRESS_BAR_WIDTH) / 2 - (len) * (MENU_FONT_WIDTH) / 2)
+      #define _SD_INFO_X(len) (PROGRESS_BAR_X + (PROGRESS_BAR_WIDTH) / 2 - (len) * (MENU_FONT_WIDTH) / 2)
     #else
-      #define _SD_DURATION_X(len) (LCD_PIXEL_WIDTH - (len) * (MENU_FONT_WIDTH))
+      #define _SD_INFO_X(len) (LCD_PIXEL_WIDTH - (len) * (MENU_FONT_WIDTH))
     #endif
 
     #if ENABLED(DOGM_SD_PERCENT)
@@ -350,14 +350,9 @@ void MarlinUI::draw_status_screen() {
       static u8g_uint_t estimation_x_pos = 0;
       static char estimation_string[10];
       #if BOTH(DOGM_SD_PERCENT, ROTATE_PROGRESS_DISPLAY)
-        #define PROGRESS_TIME_PREFIX "PROG"
-        #define ELAPSED_TIME_PREFIX "ELAP"
-        #define SHOW_REMAINING_TIME_PREFIX "REM"
         static u8g_uint_t progress_x_pos = 0;
         static uint8_t progress_state = 0;
         static bool prev_blink = 0;
-      #else
-        #define SHOW_REMAINING_TIME_PREFIX 'R'
       #endif
     #endif
   #endif
@@ -407,7 +402,7 @@ void MarlinUI::draw_status_screen() {
             progress_string[0] = '\0';
             #if ENABLED(SHOW_REMAINING_TIME)
               estimation_string[0] = '\0';
-              estimation_x_pos = _SD_DURATION_X(0);
+              estimation_x_pos = _SD_INFO_X(0);
             #endif
           }
           else {
@@ -420,7 +415,7 @@ void MarlinUI::draw_status_screen() {
             ));
           }
           #if BOTH(SHOW_REMAINING_TIME, ROTATE_PROGRESS_DISPLAY) // Tri-state progress display mode
-            progress_x_pos = _SD_DURATION_X(strlen(progress_string) + 1);
+            progress_x_pos = _SD_INFO_X(strlen(progress_string));
           #endif
         #endif
       }
@@ -429,22 +424,22 @@ void MarlinUI::draw_status_screen() {
         lastElapsed = ev;
         const bool has_days = (elapsed.value >= 60*60*24L);
         const uint8_t len = elapsed.toDigital(elapsed_string, has_days);
-        elapsed_x_pos = _SD_DURATION_X(len);
+        elapsed_x_pos = _SD_INFO_X(len);
 
         #if ENABLED(SHOW_REMAINING_TIME)
           if (!(ev & 0x3)) {
             duration_t estimation = elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
             if (estimation.value == 0) {
               estimation_string[0] = '\0';
-              estimation_x_pos = _SD_DURATION_X(0);
+              estimation_x_pos = _SD_INFO_X(0);
             }
             else {
               const bool has_days = (estimation.value >= 60*60*24L);
               const uint8_t len = estimation.toDigital(estimation_string, has_days);
               #if BOTH(DOGM_SD_PERCENT, ROTATE_PROGRESS_DISPLAY)
-                estimation_x_pos = _SD_DURATION_X(len);
+                estimation_x_pos = _SD_INFO_X(len);
               #else
-                estimation_x_pos = _SD_DURATION_X(len + 1);
+                estimation_x_pos = _SD_INFO_X(len + 1);
               #endif
             }
           }
@@ -605,17 +600,16 @@ void MarlinUI::draw_status_screen() {
 
         if (progress_state == 0) {
           if (progress_string[0]) {
-            lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, PROGRESS_TIME_PREFIX);
             lcd_put_u8str(progress_x_pos, EXTRAS_BASELINE, progress_string);
             lcd_put_wchar('%');
           }
         }
         else if (progress_state == 2 && estimation_string[0]) {
-          lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, SHOW_REMAINING_TIME_PREFIX);
+          lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, "R:");
           lcd_put_u8str(estimation_x_pos, EXTRAS_BASELINE, estimation_string);
         }
         else if (elapsed_string[0]) {
-          lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, ELAPSED_TIME_PREFIX);
+          lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, "E:");
           lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
         }
 
@@ -638,7 +632,7 @@ void MarlinUI::draw_status_screen() {
 
         #if ENABLED(SHOW_REMAINING_TIME)
           if (blink && estimation_string[0]) {
-            lcd_put_wchar(estimation_x_pos, EXTRAS_BASELINE, SHOW_REMAINING_TIME_PREFIX);
+            lcd_put_wchar(estimation_x_pos, EXTRAS_BASELINE, 'R');
             lcd_put_u8str(estimation_string);
           }
           else

commit ff4301a422b081cee26e32e2ef0067ee5e834563
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 24 13:42:02 2019 -0500

    Update status_screen_DOGM.cpp

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 2fa6f2fad7..f9a17280db 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -349,7 +349,7 @@ void MarlinUI::draw_status_screen() {
     #if ENABLED(SHOW_REMAINING_TIME)
       static u8g_uint_t estimation_x_pos = 0;
       static char estimation_string[10];
-      #if ENABLED(DOGM_SD_PERCENT) && ENABLED(ROTATE_PROGRESS_DISPLAY)
+      #if BOTH(DOGM_SD_PERCENT, ROTATE_PROGRESS_DISPLAY)
         #define PROGRESS_TIME_PREFIX "PROG"
         #define ELAPSED_TIME_PREFIX "ELAP"
         #define SHOW_REMAINING_TIME_PREFIX "REM"
@@ -419,8 +419,8 @@ void MarlinUI::draw_status_screen() {
               #endif
             ));
           }
-          #if ENABLED(SHOW_REMAINING_TIME)  && ENABLED(ROTATE_PROGRESS_DISPLAY) // Tristate progress display mode
-            progress_x_pos = _SD_DURATION_X(strlen(progress_string)+1);
+          #if BOTH(SHOW_REMAINING_TIME, ROTATE_PROGRESS_DISPLAY) // Tri-state progress display mode
+            progress_x_pos = _SD_DURATION_X(strlen(progress_string) + 1);
           #endif
         #endif
       }
@@ -441,7 +441,7 @@ void MarlinUI::draw_status_screen() {
             else {
               const bool has_days = (estimation.value >= 60*60*24L);
               const uint8_t len = estimation.toDigital(estimation_string, has_days);
-              #if ENABLED(DOGM_SD_PERCENT) && ENABLED(ROTATE_PROGRESS_DISPLAY)
+              #if BOTH(DOGM_SD_PERCENT, ROTATE_PROGRESS_DISPLAY)
                 estimation_x_pos = _SD_DURATION_X(len);
               #else
                 estimation_x_pos = _SD_DURATION_X(len + 1);

commit 326d5b84e7d17051f3d39033a067e540845f5197
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 24 13:39:32 2019 -0500

    Update status_screen_DOGM.cpp

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 57add84923..2fa6f2fad7 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -397,7 +397,7 @@ void MarlinUI::draw_status_screen() {
       ;
       duration_t elapsed = print_job_timer.duration();
       const uint8_t p = progress & 0xFF, ev = elapsed.value & 0xFF;
-      if (progress > 1 || p != lastProgress) {
+      if (p != lastProgress) {
         lastProgress = p;
 
         progress_bar_solid_width = u8g_uint_t((PROGRESS_BAR_WIDTH - 2) * progress / (PROGRESS_SCALE) * 0.01f);

commit 5edd5d1e1f169ec9c41c36cfc85525bc2e2b1401
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 24 13:38:39 2019 -0500

    Clean up

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index a18b383a89..57add84923 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -596,38 +596,38 @@ void MarlinUI::draw_status_screen() {
 
     if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)) {
 
-      #if ENABLED(DOGM_SD_PERCENT) && ENABLED(SHOW_REMAINING_TIME) && ENABLED(ROTATE_PROGRESS_DISPLAY)
+      #if ALL(DOGM_SD_PERCENT, SHOW_REMAINING_TIME, ROTATE_PROGRESS_DISPLAY)
+
         if (prev_blink != blink) {
           prev_blink = blink;
-          progress_state++;
-          if (progress_state >=3) progress_state = 0;
+          if (++progress_state >= 3) progress_state = 0;
         }
 
         if (progress_state == 0) {
-          if (progress_string[0] != '\0') {
+          if (progress_string[0]) {
             lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, PROGRESS_TIME_PREFIX);
             lcd_put_u8str(progress_x_pos, EXTRAS_BASELINE, progress_string);
             lcd_put_wchar('%');
           }
         }
-        else if (progress_state == 2  && estimation_string[0] != '\0') {
+        else if (progress_state == 2 && estimation_string[0]) {
           lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, SHOW_REMAINING_TIME_PREFIX);
           lcd_put_u8str(estimation_x_pos, EXTRAS_BASELINE, estimation_string);
         }
-        else if (elapsed_string[0] != '\0'){
+        else if (elapsed_string[0]) {
           lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, ELAPSED_TIME_PREFIX);
           lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
         }
-      #else
+
+      #else // !DOGM_SD_PERCENT || !SHOW_REMAINING_TIME || !ROTATE_PROGRESS_DISPLAY
 
         //
         // SD Percent Complete
         //
 
         #if ENABLED(DOGM_SD_PERCENT)
-          if (progress_string[0] != '\0') {
-            // Percent complete
-            lcd_put_u8str(55, 48, progress_string);
+          if (progress_string[0]) {
+            lcd_put_u8str(55, 48, progress_string); // Percent complete
             lcd_put_wchar('%');
           }
         #endif
@@ -637,7 +637,7 @@ void MarlinUI::draw_status_screen() {
         //
 
         #if ENABLED(SHOW_REMAINING_TIME)
-          if (blink && (estimation_string[0] != '\0')) {
+          if (blink && estimation_string[0]) {
             lcd_put_wchar(estimation_x_pos, EXTRAS_BASELINE, SHOW_REMAINING_TIME_PREFIX);
             lcd_put_u8str(estimation_string);
           }
@@ -645,8 +645,9 @@ void MarlinUI::draw_status_screen() {
         #endif
             lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
 
-      #endif
+      #else // !DOGM_SD_PERCENT || !SHOW_REMAINING_TIME || !ROTATE_PROGRESS_DISPLAY
     }
+
   #endif // HAS_PRINT_PROGRESS
 
   //

commit 2c4252676336965db2c4837c476d25766fc4d4a5
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Tue Oct 22 10:01:58 2019 +0700

    FIx Estimation String Pos

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 8ea5e9cf29..a18b383a89 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -436,7 +436,7 @@ void MarlinUI::draw_status_screen() {
             duration_t estimation = elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
             if (estimation.value == 0) {
               estimation_string[0] = '\0';
-              estimation_x_pos = _PROGRESS_CENTER_X(0);
+              estimation_x_pos = _SD_DURATION_X(0);
             }
             else {
               const bool has_days = (estimation.value >= 60*60*24L);

commit d64ab63026bee982b43d4ebbb821f44b92f391f2
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Tue Oct 22 08:16:29 2019 +0700

    Fix Estimation String Macro

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 591d0f08ad..8ea5e9cf29 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -405,8 +405,10 @@ void MarlinUI::draw_status_screen() {
         #if ENABLED(DOGM_SD_PERCENT)
           if (progress == 0) {
             progress_string[0] = '\0';
-            estimation_string[0] = '\0';
-            estimation_x_pos = _PROGRESS_CENTER_X(0);
+            #if ENABLED(SHOW_REMAINING_TIME)
+              estimation_string[0] = '\0';
+              estimation_x_pos = _SD_DURATION_X(0);
+            #endif
           }
           else {
             strcpy(progress_string, (

commit 52a8bbefcf6ce6b5869c740c88662acd5292706b
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Sun Oct 20 23:44:05 2019 +0700

    Make sure estimate time = 0 not displayed

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 752413a68c..591d0f08ad 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -432,13 +432,19 @@ void MarlinUI::draw_status_screen() {
         #if ENABLED(SHOW_REMAINING_TIME)
           if (!(ev & 0x3)) {
             duration_t estimation = elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
-            const bool has_days = (estimation.value >= 60*60*24L);
-            const uint8_t len = estimation.toDigital(estimation_string, has_days);
-            #if ENABLED(DOGM_SD_PERCENT) && ENABLED(ROTATE_PROGRESS_DISPLAY)
-              estimation_x_pos = _SD_DURATION_X(len);
-            #else
-              estimation_x_pos = _SD_DURATION_X(len + 1);
-            #endif
+            if (estimation.value == 0) {
+              estimation_string[0] = '\0';
+              estimation_x_pos = _PROGRESS_CENTER_X(0);
+            }
+            else {
+              const bool has_days = (estimation.value >= 60*60*24L);
+              const uint8_t len = estimation.toDigital(estimation_string, has_days);
+              #if ENABLED(DOGM_SD_PERCENT) && ENABLED(ROTATE_PROGRESS_DISPLAY)
+                estimation_x_pos = _SD_DURATION_X(len);
+              #else
+                estimation_x_pos = _SD_DURATION_X(len + 1);
+              #endif
+            }
           }
         #endif
       }

commit 6241bcf0c8555f1277a6bde5c7a5d73a1019dfc1
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Sun Oct 20 06:06:48 2019 +0700

    Fix Progress at the end of print.

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index a6ffe2f3ca..752413a68c 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -340,20 +340,20 @@ void MarlinUI::draw_status_screen() {
       #define _SD_DURATION_X(len) (LCD_PIXEL_WIDTH - (len) * (MENU_FONT_WIDTH))
     #endif
 
-    static uint8_t progress_bar_solid_width = 0, lastProgress = 0;
     #if ENABLED(DOGM_SD_PERCENT)
       static char progress_string[5];
     #endif
-    static uint8_t lastElapsed = 0, elapsed_x_pos = 0;
+    static uint8_t lastElapsed = 0, lastProgress = 0;
+    static u8g_uint_t elapsed_x_pos = 0, progress_bar_solid_width = 0;
     static char elapsed_string[16];
     #if ENABLED(SHOW_REMAINING_TIME)
-      static uint8_t estimation_x_pos = 0;
+      static u8g_uint_t estimation_x_pos = 0;
       static char estimation_string[10];
       #if ENABLED(DOGM_SD_PERCENT) && ENABLED(ROTATE_PROGRESS_DISPLAY)
         #define PROGRESS_TIME_PREFIX "PROG"
         #define ELAPSED_TIME_PREFIX "ELAP"
         #define SHOW_REMAINING_TIME_PREFIX "REM"
-        static uint8_t progress_x_pos = 0;
+        static u8g_uint_t progress_x_pos = 0;
         static uint8_t progress_state = 0;
         static bool prev_blink = 0;
       #else
@@ -397,19 +397,26 @@ void MarlinUI::draw_status_screen() {
       ;
       duration_t elapsed = print_job_timer.duration();
       const uint8_t p = progress & 0xFF, ev = elapsed.value & 0xFF;
-      if (progress > 1 && p != lastProgress) {
+      if (progress > 1 || p != lastProgress) {
         lastProgress = p;
 
-        progress_bar_solid_width = uint8_t((PROGRESS_BAR_WIDTH - 2) * progress / (PROGRESS_SCALE) * 0.01f);
+        progress_bar_solid_width = u8g_uint_t((PROGRESS_BAR_WIDTH - 2) * progress / (PROGRESS_SCALE) * 0.01f);
 
         #if ENABLED(DOGM_SD_PERCENT)
-          strcpy(progress_string, (
-            #if ENABLED(PRINT_PROGRESS_SHOW_DECIMALS)
-              permyriadtostr4(progress)
-            #else
-              ui8tostr3(progress / (PROGRESS_SCALE))
-            #endif
-          ));
+          if (progress == 0) {
+            progress_string[0] = '\0';
+            estimation_string[0] = '\0';
+            estimation_x_pos = _PROGRESS_CENTER_X(0);
+          }
+          else {
+            strcpy(progress_string, (
+              #if ENABLED(PRINT_PROGRESS_SHOW_DECIMALS)
+                permyriadtostr4(progress)
+              #else
+                ui8tostr3(progress / (PROGRESS_SCALE))
+              #endif
+            ));
+          }
           #if ENABLED(SHOW_REMAINING_TIME)  && ENABLED(ROTATE_PROGRESS_DISPLAY) // Tristate progress display mode
             progress_x_pos = _SD_DURATION_X(strlen(progress_string)+1);
           #endif

commit 9b88c3e79b4e8c6225784005c21b186209e0eeb5
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Thu Oct 17 05:26:09 2019 +0700

    DOGM Progress Display, option to disable display rotation

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 003da59601..a6ffe2f3ca 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -347,15 +347,17 @@ void MarlinUI::draw_status_screen() {
     static uint8_t lastElapsed = 0, elapsed_x_pos = 0;
     static char elapsed_string[16];
     #if ENABLED(SHOW_REMAINING_TIME)
-      #define SHOW_REMAINING_TIME_PREFIX 'R'
       static uint8_t estimation_x_pos = 0;
       static char estimation_string[10];
-      #if ENABLED(DOGM_SD_PERCENT)
-        #define PROGRESS_TIME_PREFIX 'P'
-        #define ELAPSED_TIME_PREFIX 'E'
+      #if ENABLED(DOGM_SD_PERCENT) && ENABLED(ROTATE_PROGRESS_DISPLAY)
+        #define PROGRESS_TIME_PREFIX "PROG"
+        #define ELAPSED_TIME_PREFIX "ELAP"
+        #define SHOW_REMAINING_TIME_PREFIX "REM"
         static uint8_t progress_x_pos = 0;
         static uint8_t progress_state = 0;
         static bool prev_blink = 0;
+      #else
+        #define SHOW_REMAINING_TIME_PREFIX 'R'
       #endif
     #endif
   #endif
@@ -408,7 +410,7 @@ void MarlinUI::draw_status_screen() {
               ui8tostr3(progress / (PROGRESS_SCALE))
             #endif
           ));
-          #if ENABLED(SHOW_REMAINING_TIME) // Tristate progress display mode
+          #if ENABLED(SHOW_REMAINING_TIME)  && ENABLED(ROTATE_PROGRESS_DISPLAY) // Tristate progress display mode
             progress_x_pos = _SD_DURATION_X(strlen(progress_string)+1);
           #endif
         #endif
@@ -425,10 +427,10 @@ void MarlinUI::draw_status_screen() {
             duration_t estimation = elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
             const bool has_days = (estimation.value >= 60*60*24L);
             const uint8_t len = estimation.toDigital(estimation_string, has_days);
-            #if ENABLED(DOGM_SD_PERCENT)
+            #if ENABLED(DOGM_SD_PERCENT) && ENABLED(ROTATE_PROGRESS_DISPLAY)
               estimation_x_pos = _SD_DURATION_X(len);
             #else
-              estimation_x_pos = _SD_DURATION_X(len + 2);
+              estimation_x_pos = _SD_DURATION_X(len + 1);
             #endif
           }
         #endif
@@ -579,7 +581,7 @@ void MarlinUI::draw_status_screen() {
 
     if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)) {
 
-      #if ENABLED(DOGM_SD_PERCENT) && ENABLED(SHOW_REMAINING_TIME)
+      #if ENABLED(DOGM_SD_PERCENT) && ENABLED(SHOW_REMAINING_TIME) && ENABLED(ROTATE_PROGRESS_DISPLAY)
         if (prev_blink != blink) {
           prev_blink = blink;
           progress_state++;
@@ -588,17 +590,17 @@ void MarlinUI::draw_status_screen() {
 
         if (progress_state == 0) {
           if (progress_string[0] != '\0') {
-            lcd_put_wchar(PROGRESS_BAR_X, EXTRAS_BASELINE, PROGRESS_TIME_PREFIX);
+            lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, PROGRESS_TIME_PREFIX);
             lcd_put_u8str(progress_x_pos, EXTRAS_BASELINE, progress_string);
             lcd_put_wchar('%');
           }
         }
         else if (progress_state == 2  && estimation_string[0] != '\0') {
-          lcd_put_wchar(PROGRESS_BAR_X, EXTRAS_BASELINE, SHOW_REMAINING_TIME_PREFIX);
+          lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, SHOW_REMAINING_TIME_PREFIX);
           lcd_put_u8str(estimation_x_pos, EXTRAS_BASELINE, estimation_string);
         }
         else if (elapsed_string[0] != '\0'){
-          lcd_put_wchar(PROGRESS_BAR_X, EXTRAS_BASELINE, ELAPSED_TIME_PREFIX);
+          lcd_put_u8str(PROGRESS_BAR_X, EXTRAS_BASELINE, ELAPSED_TIME_PREFIX);
           lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
         }
       #else
@@ -622,7 +624,6 @@ void MarlinUI::draw_status_screen() {
         #if ENABLED(SHOW_REMAINING_TIME)
           if (blink && (estimation_string[0] != '\0')) {
             lcd_put_wchar(estimation_x_pos, EXTRAS_BASELINE, SHOW_REMAINING_TIME_PREFIX);
-            lcd_put_wchar(" ");
             lcd_put_u8str(estimation_string);
           }
           else

commit 7af99d03d3da2c9f1a9b5c2d3409dd69030ad0e2
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Wed Oct 16 16:25:52 2019 +0700

    Don't show prefix if no elapsed time

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index ce6630efdc..003da59601 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -597,7 +597,7 @@ void MarlinUI::draw_status_screen() {
           lcd_put_wchar(PROGRESS_BAR_X, EXTRAS_BASELINE, SHOW_REMAINING_TIME_PREFIX);
           lcd_put_u8str(estimation_x_pos, EXTRAS_BASELINE, estimation_string);
         }
-        else {
+        else if (elapsed_string[0] != '\0'){
           lcd_put_wchar(PROGRESS_BAR_X, EXTRAS_BASELINE, ELAPSED_TIME_PREFIX);
           lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
         }

commit bf850827f7331866940ec778876d1e9d834c05ac
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Wed Oct 16 16:18:20 2019 +0700

    Fix Progress Display

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index e5ff034132..ce6630efdc 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -347,9 +347,16 @@ void MarlinUI::draw_status_screen() {
     static uint8_t lastElapsed = 0, elapsed_x_pos = 0;
     static char elapsed_string[16];
     #if ENABLED(SHOW_REMAINING_TIME)
-      #define SHOW_REMAINING_TIME_PREFIX 'E'
+      #define SHOW_REMAINING_TIME_PREFIX 'R'
       static uint8_t estimation_x_pos = 0;
       static char estimation_string[10];
+      #if ENABLED(DOGM_SD_PERCENT)
+        #define PROGRESS_TIME_PREFIX 'P'
+        #define ELAPSED_TIME_PREFIX 'E'
+        static uint8_t progress_x_pos = 0;
+        static uint8_t progress_state = 0;
+        static bool prev_blink = 0;
+      #endif
     #endif
   #endif
 
@@ -401,6 +408,9 @@ void MarlinUI::draw_status_screen() {
               ui8tostr3(progress / (PROGRESS_SCALE))
             #endif
           ));
+          #if ENABLED(SHOW_REMAINING_TIME) // Tristate progress display mode
+            progress_x_pos = _SD_DURATION_X(strlen(progress_string)+1);
+          #endif
         #endif
       }
 
@@ -415,7 +425,11 @@ void MarlinUI::draw_status_screen() {
             duration_t estimation = elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
             const bool has_days = (estimation.value >= 60*60*24L);
             const uint8_t len = estimation.toDigital(estimation_string, has_days);
-            estimation_x_pos = _SD_DURATION_X(len + 1);
+            #if ENABLED(DOGM_SD_PERCENT)
+              estimation_x_pos = _SD_DURATION_X(len);
+            #else
+              estimation_x_pos = _SD_DURATION_X(len + 2);
+            #endif
           }
         #endif
       }
@@ -563,35 +577,60 @@ void MarlinUI::draw_status_screen() {
     if (PAGE_CONTAINS(50, 51))     // 50-51 (or just 50)
       u8g.drawBox(PROGRESS_BAR_X + 1, 50, progress_bar_solid_width, 2);
 
-    //
-    // SD Percent Complete
-    //
+    if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)) {
 
-    #if ENABLED(DOGM_SD_PERCENT)
-      if (progress_string[0] != '\0')
-        if (PAGE_CONTAINS(41, 48)) {
-          // Percent complete
-          lcd_put_u8str(55, 48, progress_string);
-          lcd_put_wchar('%');
+      #if ENABLED(DOGM_SD_PERCENT) && ENABLED(SHOW_REMAINING_TIME)
+        if (prev_blink != blink) {
+          prev_blink = blink;
+          progress_state++;
+          if (progress_state >=3) progress_state = 0;
         }
-    #endif
 
-    //
-    // Elapsed Time
-    //
+        if (progress_state == 0) {
+          if (progress_string[0] != '\0') {
+            lcd_put_wchar(PROGRESS_BAR_X, EXTRAS_BASELINE, PROGRESS_TIME_PREFIX);
+            lcd_put_u8str(progress_x_pos, EXTRAS_BASELINE, progress_string);
+            lcd_put_wchar('%');
+          }
+        }
+        else if (progress_state == 2  && estimation_string[0] != '\0') {
+          lcd_put_wchar(PROGRESS_BAR_X, EXTRAS_BASELINE, SHOW_REMAINING_TIME_PREFIX);
+          lcd_put_u8str(estimation_x_pos, EXTRAS_BASELINE, estimation_string);
+        }
+        else {
+          lcd_put_wchar(PROGRESS_BAR_X, EXTRAS_BASELINE, ELAPSED_TIME_PREFIX);
+          lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
+        }
+      #else
 
-    if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)) {
+        //
+        // SD Percent Complete
+        //
+
+        #if ENABLED(DOGM_SD_PERCENT)
+          if (progress_string[0] != '\0') {
+            // Percent complete
+            lcd_put_u8str(55, 48, progress_string);
+            lcd_put_wchar('%');
+          }
+        #endif
+
+        //
+        // Elapsed Time
+        //
+
+        #if ENABLED(SHOW_REMAINING_TIME)
+          if (blink && (estimation_string[0] != '\0')) {
+            lcd_put_wchar(estimation_x_pos, EXTRAS_BASELINE, SHOW_REMAINING_TIME_PREFIX);
+            lcd_put_wchar(" ");
+            lcd_put_u8str(estimation_string);
+          }
+          else
+        #endif
+            lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
 
-      #if ENABLED(SHOW_REMAINING_TIME)
-        if (blink && (estimation_string[0] != '\0')) {
-          lcd_put_wchar(estimation_x_pos, EXTRAS_BASELINE, SHOW_REMAINING_TIME_PREFIX);
-          lcd_put_u8str(estimation_string);
-        }
-        else
       #endif
-          lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
     }
-
   #endif // HAS_PRINT_PROGRESS
 
   //

commit a988f9304d0ddc7d90dfe73613e7d23b131d1be6
Author: Tanguy Pruvot <tanguy.pruvot@gmail.com>
Date:   Mon Oct 14 20:11:59 2019 +0200

    reduce the required size with uint16_t modifiers

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 3a8f9c296e..e5ff034132 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -345,7 +345,7 @@ void MarlinUI::draw_status_screen() {
       static char progress_string[5];
     #endif
     static uint8_t lastElapsed = 0, elapsed_x_pos = 0;
-    static char elapsed_string[22];
+    static char elapsed_string[16];
     #if ENABLED(SHOW_REMAINING_TIME)
       #define SHOW_REMAINING_TIME_PREFIX 'E'
       static uint8_t estimation_x_pos = 0;

commit 21867c7fef58c238cb1b64e32e6c36b596f8ab06
Author: Tanguy Pruvot <tanguy.pruvot@gmail.com>
Date:   Mon Oct 14 19:43:41 2019 +0200

    elapsed time overflow warning fix
    
    tried to fix it with snprintf in libs/duration_t.h but its worst... :/

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 93d2d2b259..3a8f9c296e 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -345,7 +345,7 @@ void MarlinUI::draw_status_screen() {
       static char progress_string[5];
     #endif
     static uint8_t lastElapsed = 0, elapsed_x_pos = 0;
-    static char elapsed_string[10];
+    static char elapsed_string[22];
     #if ENABLED(SHOW_REMAINING_TIME)
       #define SHOW_REMAINING_TIME_PREFIX 'E'
       static uint8_t estimation_x_pos = 0;

commit b20d5a7cc627164877c95859baaa614f8afc7b99
Author: LinFor <linfor@gmail.com>
Date:   Fri Oct 11 05:03:33 2019 +0300

    Estimate Remaining Time (graphical display) (#15497)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 34d0140086..93d2d2b259 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -99,6 +99,9 @@
 
 #define STATUS_HEATERS_BOT (STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)
 
+#define PROGRESS_BAR_X 54
+#define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
+
 #if ENABLED(MARLIN_DEV_MODE)
   #define SHOW_ON_STATE READ(X_MIN_PIN)
 #else
@@ -257,7 +260,7 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
 
   FORCE_INLINE void _draw_chamber_status(const bool blink) {
     #if ENABLED(MARLIN_DEV_MODE)
-	    const float temp = 10 + (millis() >> 8) % CHAMBER_MAXTEMP,
+      const float temp = 10 + (millis() >> 8) % CHAMBER_MAXTEMP,
                 target = CHAMBER_MAXTEMP;
     #else
       const float temp = thermalManager.degChamber();
@@ -330,6 +333,26 @@ void MarlinUI::draw_status_screen() {
     static char wstring[5], mstring[4];
   #endif
 
+  #if HAS_PRINT_PROGRESS
+    #if DISABLED(DOGM_SD_PERCENT)
+      #define _SD_DURATION_X(len) (PROGRESS_BAR_X + (PROGRESS_BAR_WIDTH) / 2 - (len) * (MENU_FONT_WIDTH) / 2)
+    #else
+      #define _SD_DURATION_X(len) (LCD_PIXEL_WIDTH - (len) * (MENU_FONT_WIDTH))
+    #endif
+
+    static uint8_t progress_bar_solid_width = 0, lastProgress = 0;
+    #if ENABLED(DOGM_SD_PERCENT)
+      static char progress_string[5];
+    #endif
+    static uint8_t lastElapsed = 0, elapsed_x_pos = 0;
+    static char elapsed_string[10];
+    #if ENABLED(SHOW_REMAINING_TIME)
+      #define SHOW_REMAINING_TIME_PREFIX 'E'
+      static uint8_t estimation_x_pos = 0;
+      static char estimation_string[10];
+    #endif
+  #endif
+
   // At the first page, generate new display values
   if (first_page) {
     #if ANIM_HBC
@@ -353,6 +376,50 @@ void MarlinUI::draw_status_screen() {
       strcpy(wstring, ftostr12ns(filwidth.measured_mm));
       strcpy(mstring, i16tostr3(planner.volumetric_percent(parser.volumetric_enabled)));
     #endif
+
+    // Progress / elapsed / estimation updates and string formatting to avoid float math on each LCD draw
+    #if HAS_PRINT_PROGRESS
+      const progress_t progress =
+        #if HAS_PRINT_PROGRESS_PERMYRIAD
+          get_progress_permyriad()
+        #else
+          get_progress_percent()
+        #endif
+      ;
+      duration_t elapsed = print_job_timer.duration();
+      const uint8_t p = progress & 0xFF, ev = elapsed.value & 0xFF;
+      if (progress > 1 && p != lastProgress) {
+        lastProgress = p;
+
+        progress_bar_solid_width = uint8_t((PROGRESS_BAR_WIDTH - 2) * progress / (PROGRESS_SCALE) * 0.01f);
+
+        #if ENABLED(DOGM_SD_PERCENT)
+          strcpy(progress_string, (
+            #if ENABLED(PRINT_PROGRESS_SHOW_DECIMALS)
+              permyriadtostr4(progress)
+            #else
+              ui8tostr3(progress / (PROGRESS_SCALE))
+            #endif
+          ));
+        #endif
+      }
+
+      if (ev != lastElapsed) {
+        lastElapsed = ev;
+        const bool has_days = (elapsed.value >= 60*60*24L);
+        const uint8_t len = elapsed.toDigital(elapsed_string, has_days);
+        elapsed_x_pos = _SD_DURATION_X(len);
+
+        #if ENABLED(SHOW_REMAINING_TIME)
+          if (!(ev & 0x3)) {
+            duration_t estimation = elapsed.value * (100 * (PROGRESS_SCALE) - progress) / progress;
+            const bool has_days = (estimation.value >= 60*60*24L);
+            const uint8_t len = estimation.toDigital(estimation_string, has_days);
+            estimation_x_pos = _SD_DURATION_X(len + 1);
+          }
+        #endif
+      }
+    #endif
   }
 
   const bool blink = get_blink();
@@ -485,55 +552,44 @@ void MarlinUI::draw_status_screen() {
     //
     // Progress bar frame
     //
-    #define PROGRESS_BAR_X 54
-    #define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
 
     if (PAGE_CONTAINS(49, 52))
       u8g.drawFrame(PROGRESS_BAR_X, 49, PROGRESS_BAR_WIDTH, 4);
 
-    const uint8_t progress = get_progress();
-
-    if (progress > 1) {
-
-      //
-      // Progress bar solid part
-      //
+    //
+    // Progress bar solid part
+    //
 
-      if (PAGE_CONTAINS(50, 51))     // 50-51 (or just 50)
-        u8g.drawBox(
-          PROGRESS_BAR_X + 1, 50,
-          (uint16_t)((PROGRESS_BAR_WIDTH - 2) * progress * 0.01), 2
-        );
+    if (PAGE_CONTAINS(50, 51))     // 50-51 (or just 50)
+      u8g.drawBox(PROGRESS_BAR_X + 1, 50, progress_bar_solid_width, 2);
 
-      //
-      // SD Percent Complete
-      //
+    //
+    // SD Percent Complete
+    //
 
-      #if ENABLED(DOGM_SD_PERCENT)
+    #if ENABLED(DOGM_SD_PERCENT)
+      if (progress_string[0] != '\0')
         if (PAGE_CONTAINS(41, 48)) {
           // Percent complete
-          lcd_put_u8str(55, 48, ui8tostr3(progress));
+          lcd_put_u8str(55, 48, progress_string);
           lcd_put_wchar('%');
         }
-      #endif
-    }
+    #endif
 
     //
     // Elapsed Time
     //
 
-    #if DISABLED(DOGM_SD_PERCENT)
-      #define SD_DURATION_X (PROGRESS_BAR_X + (PROGRESS_BAR_WIDTH / 2) - len * (MENU_FONT_WIDTH / 2))
-    #else
-      #define SD_DURATION_X (LCD_PIXEL_WIDTH - len * MENU_FONT_WIDTH)
-    #endif
-
     if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)) {
-      char buffer[13];
-      duration_t elapsed = print_job_timer.duration();
-      bool has_days = (elapsed.value >= 60*60*24L);
-      uint8_t len = elapsed.toDigital(buffer, has_days);
-      lcd_put_u8str(SD_DURATION_X, EXTRAS_BASELINE, buffer);
+
+      #if ENABLED(SHOW_REMAINING_TIME)
+        if (blink && (estimation_string[0] != '\0')) {
+          lcd_put_wchar(estimation_x_pos, EXTRAS_BASELINE, SHOW_REMAINING_TIME_PREFIX);
+          lcd_put_u8str(estimation_string);
+        }
+        else
+      #endif
+          lcd_put_u8str(elapsed_x_pos, EXTRAS_BASELINE, elapsed_string);
     }
 
   #endif // HAS_PRINT_PROGRESS

commit 50e4545255605eb506c20eb107270038b0fe7bdb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 29 04:25:39 2019 -0500

    Add custom types for position (#15204)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index e9023515cf..34d0140086 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -345,9 +345,10 @@ void MarlinUI::draw_status_screen() {
       #endif
       heat_bits = new_bits;
     #endif
-    strcpy(xstring, ftostr4sign(LOGICAL_X_POSITION(current_position[X_AXIS])));
-    strcpy(ystring, ftostr4sign(LOGICAL_Y_POSITION(current_position[Y_AXIS])));
-    strcpy(zstring, ftostr52sp( LOGICAL_Z_POSITION(current_position[Z_AXIS])));
+    const xyz_pos_t lpos = current_position.asLogical();
+    strcpy(xstring, ftostr4sign(lpos.x));
+    strcpy(ystring, ftostr4sign(lpos.y));
+    strcpy(zstring, ftostr52sp( lpos.z));
     #if ENABLED(FILAMENT_LCD_DISPLAY)
       strcpy(wstring, ftostr12ns(filwidth.measured_mm));
       strcpy(mstring, i16tostr3(planner.volumetric_percent(parser.volumetric_enabled)));

commit 75927e17dd2114c14a593c12394d941eff684685
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 10 18:48:58 2019 -0500

    Filament Width Sensor singleton (#15191)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 9477bc7263..e9023515cf 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -349,13 +349,8 @@ void MarlinUI::draw_status_screen() {
     strcpy(ystring, ftostr4sign(LOGICAL_Y_POSITION(current_position[Y_AXIS])));
     strcpy(zstring, ftostr52sp( LOGICAL_Z_POSITION(current_position[Z_AXIS])));
     #if ENABLED(FILAMENT_LCD_DISPLAY)
-      strcpy(wstring, ftostr12ns(filament_width_meas));
-      strcpy(mstring, i16tostr3(100.0 * (
-          parser.volumetric_enabled
-            ? planner.volumetric_area_nominal / planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
-            : planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
-        )
-      ));
+      strcpy(wstring, ftostr12ns(filwidth.measured_mm));
+      strcpy(mstring, i16tostr3(planner.volumetric_percent(parser.volumetric_enabled)));
     #endif
   }
 

commit 584c86bed1d81548da03681bd3b3c6bd54ae0fe3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 10 02:20:49 2019 -0500

    More "zero extruders" changes (#15213)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 6fbfba06ed..9477bc7263 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -93,7 +93,10 @@
   #define CHAMBER_ALT() false
 #endif
 
-#define MAX_HOTEND_DRAW _MIN(HOTENDS, ((LCD_PIXEL_WIDTH - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
+#if HOTENDS
+  #define MAX_HOTEND_DRAW _MIN(HOTENDS, ((LCD_PIXEL_WIDTH - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
+#endif
+
 #define STATUS_HEATERS_BOT (STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)
 
 #if ENABLED(MARLIN_DEV_MODE)
@@ -127,6 +130,11 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
     const bool isHeat = IFBED(BED_ALT(), HOTEND_ALT(heater));
   #endif
 
+  #ifndef STATUS_HOTEND_TEXT_X
+    #define STATUS_HOTEND_TEXT_X(N) 0
+    #define STATUS_HEATERS_Y 0
+  #endif
+
   const uint8_t tx = IFBED(STATUS_BED_TEXT_X, STATUS_HOTEND_TEXT_X(heater));
 
   #if ENABLED(MARLIN_DEV_MODE)
@@ -424,8 +432,10 @@ void MarlinUI::draw_status_screen() {
   //
   if (PAGE_UNDER(6 + 1 + 12 + 1 + 6 + 1)) {
     // Extruders
-    for (uint8_t e = 0; e < MAX_HOTEND_DRAW; ++e)
-      _draw_heater_status((heater_ind_t)e, blink);
+    #if HOTENDS
+      for (uint8_t e = 0; e < MAX_HOTEND_DRAW; ++e)
+        _draw_heater_status((heater_ind_t)e, blink);
+    #endif
 
     // Heated bed
     #if DO_DRAW_BED && DISABLED(STATUS_COMBINE_HEATERS) || (HAS_HEATED_BED && ENABLED(STATUS_COMBINE_HEATERS) && HOTENDS <= 4)

commit 3c3a956a17db552c16bbddd93756eb44b4b38fb5
Author: Ludy <Ludy87@users.noreply.github.com>
Date:   Mon Sep 9 17:34:54 2019 +0200

    Fix compiling error BIGTREE_SKR_MINI (#15197)
    
    Let's get STM32F1 working again!

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 59bc4eb0d1..6fbfba06ed 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -271,6 +271,8 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
       #endif
       #if HAS_HEATED_CHAMBER
         if (dodraw) _draw_centered_temp(target + 0.5, STATUS_CHAMBER_TEXT_X, 7);
+      #else
+        UNUSED(dodraw);
       #endif
     }
     if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))

commit 8bca3fcf2c4be3ea707860ebb9a1bfa1c03e2d7e
Author: Luu Lac <45380455+shitcreek@users.noreply.github.com>
Date:   Sun Sep 8 02:20:18 2019 -0500

    Display chamber with HAS_TEMP_CHAMBER (#15194)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 94c700012b..59bc4eb0d1 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -65,7 +65,7 @@
 
 #define DO_DRAW_LOGO (STATUS_LOGO_WIDTH && ENABLED(CUSTOM_STATUS_SCREEN_IMAGE))
 #define DO_DRAW_BED (HAS_HEATED_BED && STATUS_BED_WIDTH && HOTENDS <= 4)
-#define DO_DRAW_CHAMBER (HAS_HEATED_CHAMBER && STATUS_CHAMBER_WIDTH && HOTENDS <= 4)
+#define DO_DRAW_CHAMBER (HAS_TEMP_CHAMBER && STATUS_CHAMBER_WIDTH && HOTENDS <= 4)
 #define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && HOTENDS <= 4 && defined(STATUS_FAN_FRAMES))
 
 #define ANIM_HOTEND (HOTENDS && ENABLED(STATUS_HOTEND_ANIM))
@@ -252,12 +252,16 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
 	    const float temp = 10 + (millis() >> 8) % CHAMBER_MAXTEMP,
                 target = CHAMBER_MAXTEMP;
     #else
-      const float temp = thermalManager.degChamber(),
-                target = thermalManager.degTargetChamber();
+      const float temp = thermalManager.degChamber();
+      #if HAS_HEATED_CHAMBER
+        const float target = thermalManager.degTargetChamber();
+      #endif
     #endif
+
     #if !HEATER_IDLE_HANDLER
       UNUSED(blink);
     #endif
+
     if (PAGE_UNDER(7)) {
       #if HEATER_IDLE_HANDLER
         const bool is_idle = false, // thermalManager.chamber_idle.timed_out,
@@ -265,13 +269,15 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
       #else
         constexpr bool dodraw = true;
       #endif
-      if (dodraw) _draw_centered_temp(target + 0.5, STATUS_CHAMBER_TEXT_X, 7);
+      #if HAS_HEATED_CHAMBER
+        if (dodraw) _draw_centered_temp(target + 0.5, STATUS_CHAMBER_TEXT_X, 7);
+      #endif
     }
     if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
       _draw_centered_temp(temp + 0.5f, STATUS_CHAMBER_TEXT_X, 28);
   }
 
-#endif
+#endif // DO_DRAW_CHAMBER
 
 //
 // Before homing, blink '123' <-> '???'.
@@ -324,7 +330,7 @@ void MarlinUI::draw_status_screen() {
       #if ANIM_BED
         if (thermalManager.isHeatingBed() ^ SHOW_ON_STATE) SBI(new_bits, 7);
       #endif
-      #if DO_DRAW_CHAMBER
+      #if DO_DRAW_CHAMBER && HAS_HEATED_CHAMBER
         if (thermalManager.isHeatingChamber() ^ SHOW_ON_STATE) SBI(new_bits, 6);
       #endif
       heat_bits = new_bits;

commit 6172cd2528e056e7ebcb710ebeec3eeb0d9696e5
Author: Ludy <Ludy87@users.noreply.github.com>
Date:   Sat Sep 7 11:52:57 2019 +0200

    CHAMBER integration to GLCD (#14981)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 4db6752b45..94c700012b 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -63,13 +63,18 @@
 #define EXTRAS_BASELINE (40 + INFO_FONT_ASCENT)
 #define STATUS_BASELINE (LCD_PIXEL_HEIGHT - INFO_FONT_DESCENT)
 
-#define DO_DRAW_BED (HAS_HEATED_BED && STATUS_BED_WIDTH && HOTENDS <= 3 && DISABLED(STATUS_COMBINE_HEATERS))
-#define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && STATUS_FAN_FRAMES)
+#define DO_DRAW_LOGO (STATUS_LOGO_WIDTH && ENABLED(CUSTOM_STATUS_SCREEN_IMAGE))
+#define DO_DRAW_BED (HAS_HEATED_BED && STATUS_BED_WIDTH && HOTENDS <= 4)
+#define DO_DRAW_CHAMBER (HAS_HEATED_CHAMBER && STATUS_CHAMBER_WIDTH && HOTENDS <= 4)
+#define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && HOTENDS <= 4 && defined(STATUS_FAN_FRAMES))
+
 #define ANIM_HOTEND (HOTENDS && ENABLED(STATUS_HOTEND_ANIM))
 #define ANIM_BED (DO_DRAW_BED && ENABLED(STATUS_BED_ANIM))
-#define ANIM_CHAMBER (HAS_HEATED_CHAMBER && ENABLED(STATUS_CHAMBER_ANIM))
+#define ANIM_CHAMBER (DO_DRAW_CHAMBER && ENABLED(STATUS_CHAMBER_ANIM))
+
+#define ANIM_HBC (ANIM_HOTEND || ANIM_BED || ANIM_CHAMBER)
 
-#if ANIM_HOTEND || ANIM_BED
+#if ANIM_HBC
   uint8_t heat_bits;
 #endif
 #if ANIM_HOTEND
@@ -109,7 +114,7 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
     UNUSED(blink);
   #endif
 
-  #if HAS_HEATED_BED
+  #if DO_DRAW_BED && DISABLED(STATUS_COMBINE_HEATERS) || (HAS_HEATED_BED && ENABLED(STATUS_COMBINE_HEATERS) && HOTENDS <= 4)
     const bool isBed = heater < 0;
     #define IFBED(A,B) (isBed ? (A) : (B))
   #else
@@ -125,11 +130,11 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
   const uint8_t tx = IFBED(STATUS_BED_TEXT_X, STATUS_HOTEND_TEXT_X(heater));
 
   #if ENABLED(MARLIN_DEV_MODE)
-    const float temp = 20 + (millis() >> 8) % IFBED(100, 200);
-    const float target = IFBED(100, 200);
+    const float temp = 20 + (millis() >> 8) % IFBED(100, 200),
+              target = IFBED(100, 200);
   #else
     const float temp = IFBED(thermalManager.degBed(), thermalManager.degHotend(heater)),
-                target = IFBED(thermalManager.degTargetBed(), thermalManager.degTargetHotend(heater));
+              target = IFBED(thermalManager.degTargetBed(), thermalManager.degTargetHotend(heater));
   #endif
 
   #if DISABLED(STATUS_HOTEND_ANIM)
@@ -140,7 +145,7 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
     #define HOTEND_DOT    false
   #endif
 
-  #if HAS_HEATED_BED && DISABLED(STATUS_BED_ANIM)
+  #if DO_DRAW_BED && DISABLED(STATUS_BED_ANIM)
     #define STATIC_BED    true
     #define BED_DOT       isHeat
   #else
@@ -148,7 +153,13 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
     #define BED_DOT       false
   #endif
 
-  #if ANIM_HOTEND && ENABLED(STATUS_HOTEND_INVERTED)
+  #if ANIM_HOTEND && BOTH(STATUS_HOTEND_INVERTED, STATUS_HOTEND_NUMBERLESS)
+    #define OFF_BMP(N) status_hotend_b_bmp
+    #define ON_BMP(N)  status_hotend_a_bmp
+  #elif ANIM_HOTEND && DISABLED(STATUS_HOTEND_INVERTED) && ENABLED(STATUS_HOTEND_NUMBERLESS)
+    #define OFF_BMP(N) status_hotend_a_bmp
+    #define ON_BMP(N)  status_hotend_b_bmp
+  #elif ANIM_HOTEND && ENABLED(STATUS_HOTEND_INVERTED)
     #define OFF_BMP(N) status_hotend##N##_b_bmp
     #define ON_BMP(N)  status_hotend##N##_a_bmp
   #else
@@ -179,10 +190,11 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
     uint8_t tall = uint8_t(perc * BAR_TALL + 0.5f);
     NOMORE(tall, BAR_TALL);
 
-    #ifdef STATUS_HOTEND_ANIM
+    #if ANIM_HOTEND
       // Draw hotend bitmap, either whole or split by the heating percent
       if (IFBED(0, 1)) {
-        const uint8_t hx = STATUS_HOTEND_X(heater), bw = STATUS_HOTEND_BYTEWIDTH(heater);
+        const uint8_t hx = STATUS_HOTEND_X(heater),
+                      bw = STATUS_HOTEND_BYTEWIDTH(heater);
         #if ENABLED(STATUS_HEAT_PERCENT)
           if (isHeat && tall <= BAR_TALL) {
             const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
@@ -196,10 +208,10 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
     #endif
 
     // Draw a heating progress bar, if specified
-    #if ENABLED(STATUS_HEAT_PERCENT)
+    #if DO_DRAW_BED && ENABLED(STATUS_HEAT_PERCENT)
 
       if (IFBED(true, STATIC_HOTEND) && isHeat) {
-        const uint8_t bx = IFBED(STATUS_BED_X + STATUS_BED_WIDTH, STATUS_HOTEND_X(heater) + STATUS_HOTEND_WIDTH(heater)) + 1;
+        const uint8_t bx = IFBED(STATUS_BED_X + STATUS_BED_WIDTH - 1, STATUS_HOTEND_X(heater) + STATUS_HOTEND_WIDTH(heater)) + 1;
         u8g.drawFrame(bx, STATUS_HEATERS_Y, 3, STATUS_HEATERS_HEIGHT);
         if (tall) {
           const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
@@ -233,11 +245,16 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
 
 }
 
-#if HAS_HEATED_CHAMBER
+#if DO_DRAW_CHAMBER
 
   FORCE_INLINE void _draw_chamber_status(const bool blink) {
-    const float temp = thermalManager.degChamber(),
+    #if ENABLED(MARLIN_DEV_MODE)
+	    const float temp = 10 + (millis() >> 8) % CHAMBER_MAXTEMP,
+                target = CHAMBER_MAXTEMP;
+    #else
+      const float temp = thermalManager.degChamber(),
                 target = thermalManager.degTargetChamber();
+    #endif
     #if !HEATER_IDLE_HANDLER
       UNUSED(blink);
     #endif
@@ -299,7 +316,7 @@ void MarlinUI::draw_status_screen() {
 
   // At the first page, generate new display values
   if (first_page) {
-    #if ANIM_HOTEND || ANIM_BED || ANIM_CHAMBER
+    #if ANIM_HBC
       uint8_t new_bits = 0;
       #if ANIM_HOTEND
         HOTEND_LOOP() if (thermalManager.isHeatingHotend(e) ^ SHOW_ON_STATE) SBI(new_bits, e);
@@ -307,14 +324,14 @@ void MarlinUI::draw_status_screen() {
       #if ANIM_BED
         if (thermalManager.isHeatingBed() ^ SHOW_ON_STATE) SBI(new_bits, 7);
       #endif
-      #if ANIM_CHAMBER
+      #if DO_DRAW_CHAMBER
         if (thermalManager.isHeatingChamber() ^ SHOW_ON_STATE) SBI(new_bits, 6);
       #endif
       heat_bits = new_bits;
     #endif
     strcpy(xstring, ftostr4sign(LOGICAL_X_POSITION(current_position[X_AXIS])));
     strcpy(ystring, ftostr4sign(LOGICAL_Y_POSITION(current_position[Y_AXIS])));
-    strcpy(zstring, ftostr52sp(LOGICAL_Z_POSITION(current_position[Z_AXIS])));
+    strcpy(zstring, ftostr52sp( LOGICAL_Z_POSITION(current_position[Z_AXIS])));
     #if ENABLED(FILAMENT_LCD_DISPLAY)
       strcpy(wstring, ftostr12ns(filament_width_meas));
       strcpy(mstring, i16tostr3(100.0 * (
@@ -335,7 +352,7 @@ void MarlinUI::draw_status_screen() {
     TCNT5 = 0;
   #endif
 
-  #if STATUS_LOGO_WIDTH
+  #if DO_DRAW_LOGO
     if (PAGE_CONTAINS(STATUS_LOGO_Y, STATUS_LOGO_Y + STATUS_LOGO_HEIGHT - 1))
       u8g.drawBitmapP(STATUS_LOGO_X, STATUS_LOGO_Y, STATUS_LOGO_BYTEWIDTH, STATUS_LOGO_HEIGHT, status_logo_bmp);
   #endif
@@ -346,13 +363,14 @@ void MarlinUI::draw_status_screen() {
       u8g.drawBitmapP(STATUS_HEATERS_X, STATUS_HEATERS_Y, STATUS_HEATERS_BYTEWIDTH, STATUS_HEATERS_HEIGHT, status_heaters_bmp);
   #endif
 
-  #if DO_DRAW_BED
+  #if DO_DRAW_BED && DISABLED(STATUS_COMBINE_HEATERS)
     #if ANIM_BED
       #define BED_BITMAP(S) ((S) ? status_bed_on_bmp : status_bed_bmp)
     #else
       #define BED_BITMAP(S) status_bed_bmp
     #endif
-    const uint8_t bedy = STATUS_BED_Y(BED_ALT()), bedh = STATUS_BED_HEIGHT(BED_ALT());
+    const uint8_t bedy = STATUS_BED_Y(BED_ALT()),
+                  bedh = STATUS_BED_HEIGHT(BED_ALT());
     if (PAGE_CONTAINS(bedy, bedy + bedh - 1))
       u8g.drawBitmapP(STATUS_BED_X, bedy, STATUS_BED_BYTEWIDTH, bedh, BED_BITMAP(BED_ALT()));
   #endif
@@ -363,12 +381,10 @@ void MarlinUI::draw_status_screen() {
     #else
       #define CHAMBER_BITMAP(S) status_chamber_bmp
     #endif
-    if (PAGE_CONTAINS(STATUS_CHAMBER_Y, STATUS_CHAMBER_Y + STATUS_CHAMBER_HEIGHT - 1))
-      u8g.drawBitmapP(
-        STATUS_CHAMBER_X, STATUS_CHAMBER_Y,
-        STATUS_CHAMBER_BYTEWIDTH, STATUS_CHAMBER_HEIGHT,
-        CHAMBER_BITMAP(CHAMBER_ALT())
-      );
+    const uint8_t chambery = STATUS_CHAMBER_Y(CHAMBER_ALT()),
+                  chamberh = STATUS_CHAMBER_HEIGHT(CHAMBER_ALT());
+    if (PAGE_CONTAINS(chambery, chambery + chamberh - 1))
+      u8g.drawBitmapP(STATUS_CHAMBER_X, chambery, STATUS_CHAMBER_BYTEWIDTH, chamberh, CHAMBER_BITMAP(CHAMBER_ALT()));
   #endif
 
   #if DO_DRAW_FAN
@@ -381,9 +397,7 @@ void MarlinUI::draw_status_screen() {
       }
     #endif
     if (PAGE_CONTAINS(STATUS_FAN_Y, STATUS_FAN_Y + STATUS_FAN_HEIGHT - 1))
-      u8g.drawBitmapP(
-        STATUS_FAN_X, STATUS_FAN_Y,
-        STATUS_FAN_BYTEWIDTH, STATUS_FAN_HEIGHT,
+      u8g.drawBitmapP(STATUS_FAN_X, STATUS_FAN_Y, STATUS_FAN_BYTEWIDTH, STATUS_FAN_HEIGHT,
         #if STATUS_FAN_FRAMES > 2
           fan_frame == 1 ? status_fan1_bmp :
           fan_frame == 2 ? status_fan2_bmp :
@@ -400,18 +414,17 @@ void MarlinUI::draw_status_screen() {
   //
   // Temperature Graphics and Info
   //
-
   if (PAGE_UNDER(6 + 1 + 12 + 1 + 6 + 1)) {
     // Extruders
     for (uint8_t e = 0; e < MAX_HOTEND_DRAW; ++e)
       _draw_heater_status((heater_ind_t)e, blink);
 
     // Heated bed
-    #if HAS_HEATED_BED && HOTENDS < 4
+    #if DO_DRAW_BED && DISABLED(STATUS_COMBINE_HEATERS) || (HAS_HEATED_BED && ENABLED(STATUS_COMBINE_HEATERS) && HOTENDS <= 4)
       _draw_heater_status(H_BED, blink);
     #endif
 
-    #if HAS_HEATED_CHAMBER
+    #if DO_DRAW_CHAMBER
       _draw_chamber_status(blink);
     #endif
 
@@ -575,7 +588,6 @@ void MarlinUI::draw_status_screen() {
   //
   // Feedrate
   //
-
   #define EXTRAS_2_BASELINE (EXTRAS_BASELINE + 3)
 
   if (PAGE_CONTAINS(EXTRAS_2_BASELINE - INFO_FONT_ASCENT, EXTRAS_2_BASELINE - 1)) {
@@ -602,7 +614,6 @@ void MarlinUI::draw_status_screen() {
   //
   // Status line
   //
-
   if (PAGE_CONTAINS(STATUS_BASELINE - INFO_FONT_ASCENT, STATUS_BASELINE + INFO_FONT_DESCENT)) {
     lcd_moveto(0, STATUS_BASELINE);
 

commit 7924e0d819fb50b3d3102b1d464e303c8214b213
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Aug 22 19:36:18 2019 -0500

    Add print at position shortcuts

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index a587d1b31b..4db6752b45 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -100,8 +100,7 @@
 FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, const uint8_t ty) {
   const char *str = i16tostr3(temp);
   const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
-  lcd_moveto(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty);
-  lcd_put_u8str(&str[3-len]);
+  lcd_put_u8str(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty, &str[3-len]);
   lcd_put_wchar(LCD_STR_DEGREE[0]);
 }
 
@@ -264,8 +263,7 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
 //
 FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const bool blink) {
   const uint8_t offs = (XYZ_SPACING) * axis;
-  lcd_moveto(X_LABEL_POS + offs, XYZ_BASELINE);
-  lcd_put_wchar('X' + axis);
+  lcd_put_wchar(X_LABEL_POS + offs, XYZ_BASELINE, 'X' + axis);
   lcd_moveto(X_VALUE_POS + offs, XYZ_BASELINE);
   if (blink)
     lcd_put_u8str(value);
@@ -429,8 +427,7 @@ void MarlinUI::draw_status_screen() {
               c = '*';
             }
           #endif
-          lcd_moveto(STATUS_FAN_TEXT_X, STATUS_FAN_TEXT_Y);
-          lcd_put_u8str(i16tostr3(thermalManager.fanPercent(spd)));
+          lcd_put_u8str(STATUS_FAN_TEXT_X, STATUS_FAN_TEXT_Y, i16tostr3(thermalManager.fanPercent(spd)));
           lcd_put_wchar(c);
         }
       }
@@ -488,8 +485,7 @@ void MarlinUI::draw_status_screen() {
       #if ENABLED(DOGM_SD_PERCENT)
         if (PAGE_CONTAINS(41, 48)) {
           // Percent complete
-          lcd_moveto(55, 48);
-          lcd_put_u8str(ui8tostr3(progress));
+          lcd_put_u8str(55, 48, ui8tostr3(progress));
           lcd_put_wchar('%');
         }
       #endif
@@ -510,8 +506,7 @@ void MarlinUI::draw_status_screen() {
       duration_t elapsed = print_job_timer.duration();
       bool has_days = (elapsed.value >= 60*60*24L);
       uint8_t len = elapsed.toDigital(buffer, has_days);
-      lcd_moveto(SD_DURATION_X, EXTRAS_BASELINE);
-      lcd_put_u8str(buffer);
+      lcd_put_u8str(SD_DURATION_X, EXTRAS_BASELINE, buffer);
     }
 
   #endif // HAS_PRINT_PROGRESS
@@ -546,8 +541,6 @@ void MarlinUI::draw_status_screen() {
 
         // Two-component mix / gradient instead of XY
 
-        lcd_moveto(X_LABEL_POS, XYZ_BASELINE);
-
         char mixer_messages[12];
         const char *mix_label;
         #if ENABLED(GRADIENT_MIX)
@@ -562,7 +555,7 @@ void MarlinUI::draw_status_screen() {
             mix_label = "Mx";
           }
         sprintf_P(mixer_messages, PSTR("%s %d;%d%% "), mix_label, int(mixer.mix[0]), int(mixer.mix[1]));
-        lcd_put_u8str(mixer_messages);
+        lcd_put_u8str(X_LABEL_POS, XYZ_BASELINE, mixer_messages);
 
       #else
 
@@ -587,28 +580,22 @@ void MarlinUI::draw_status_screen() {
 
   if (PAGE_CONTAINS(EXTRAS_2_BASELINE - INFO_FONT_ASCENT, EXTRAS_2_BASELINE - 1)) {
     set_font(FONT_MENU);
-    lcd_moveto(3, EXTRAS_2_BASELINE);
-    lcd_put_wchar(LCD_STR_FEEDRATE[0]);
+    lcd_put_wchar(3, EXTRAS_2_BASELINE, LCD_STR_FEEDRATE[0]);
 
     set_font(FONT_STATUSMENU);
-    lcd_moveto(12, EXTRAS_2_BASELINE);
-    lcd_put_u8str(i16tostr3(feedrate_percentage));
+    lcd_put_u8str(12, EXTRAS_2_BASELINE, i16tostr3(feedrate_percentage));
     lcd_put_wchar('%');
 
     //
     // Filament sensor display if SD is disabled
     //
     #if ENABLED(FILAMENT_LCD_DISPLAY) && DISABLED(SDSUPPORT)
-      lcd_moveto(56, EXTRAS_2_BASELINE);
-      lcd_put_u8str(wstring);
-      lcd_moveto(102, EXTRAS_2_BASELINE);
-      lcd_put_u8str(mstring);
+      lcd_put_u8str(56, EXTRAS_2_BASELINE, wstring);
+      lcd_put_u8str(102, EXTRAS_2_BASELINE, mstring);
       lcd_put_wchar('%');
       set_font(FONT_MENU);
-      lcd_moveto(47, EXTRAS_2_BASELINE);
-      lcd_put_wchar(LCD_STR_FILAM_DIA[0]); // lcd_put_u8str_P(PSTR(LCD_STR_FILAM_DIA));
-      lcd_moveto(93, EXTRAS_2_BASELINE);
-      lcd_put_wchar(LCD_STR_FILAM_MUL[0]);
+      lcd_put_wchar(47, EXTRAS_2_BASELINE, LCD_STR_FILAM_DIA[0]); // lcd_put_u8str_P(PSTR(LCD_STR_FILAM_DIA));
+      lcd_put_wchar(93, EXTRAS_2_BASELINE, LCD_STR_FILAM_MUL[0]);
     #endif
   }
 

commit 33d54c0d5a7397e05f02d68eb62406420e31857f
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Mon Aug 19 09:00:21 2019 +0700

    Remove extra defines (#14983)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index f04d2e89a5..a587d1b31b 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -520,10 +520,6 @@ void MarlinUI::draw_status_screen() {
   // XYZ Coordinates
   //
 
-  #define X_LABEL_POS  3
-  #define X_VALUE_POS 11
-  #define XYZ_SPACING 37
-
   #if ENABLED(XYZ_HOLLOW_FRAME)
     #define XYZ_FRAME_TOP 29
     #define XYZ_FRAME_HEIGHT INFO_FONT_ASCENT + 3

commit 80c6f98d2fe5d2cbf27f1aa1b6d38d9a2caffbc9
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jul 11 14:51:12 2019 -0500

    Fix nested _draw_chamber_status
    
    Co-Authored-By: alexscarbro <alexscarbro@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index ad220fbdfa..f04d2e89a5 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -56,14 +56,6 @@
   #include "../../feature/mixing.h"
 #endif
 
-FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, const uint8_t ty) {
-  const char *str = i16tostr3(temp);
-  const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
-  lcd_moveto(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty);
-  lcd_put_u8str(&str[3-len]);
-  lcd_put_wchar(LCD_STR_DEGREE[0]);
-}
-
 #define X_LABEL_POS      3
 #define X_VALUE_POS     11
 #define XYZ_SPACING     37
@@ -105,6 +97,14 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
   #define SHOW_ON_STATE false
 #endif
 
+FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, const uint8_t ty) {
+  const char *str = i16tostr3(temp);
+  const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
+  lcd_moveto(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty);
+  lcd_put_u8str(&str[3-len]);
+  lcd_put_wchar(LCD_STR_DEGREE[0]);
+}
+
 FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blink) {
   #if !HEATER_IDLE_HANDLER
     UNUSED(blink);
@@ -133,27 +133,6 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
                 target = IFBED(thermalManager.degTargetBed(), thermalManager.degTargetHotend(heater));
   #endif
 
-  #if HAS_HEATED_CHAMBER
-    FORCE_INLINE void _draw_chamber_status(const bool blink) {
-      const float temp = thermalManager.degChamber(),
-                  target = thermalManager.degTargetChamber();
-      #if !HEATER_IDLE_HANDLER
-        UNUSED(blink);
-      #endif
-      if (PAGE_UNDER(7)) {
-        #if HEATER_IDLE_HANDLER
-          const bool is_idle = false, // thermalManager.chamber_idle.timed_out,
-                     dodraw = (blink || !is_idle);
-        #else
-          constexpr bool dodraw = true;
-        #endif
-        if (dodraw) _draw_centered_temp(target + 0.5, STATUS_CHAMBER_TEXT_X, 7);
-      }
-      if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
-        _draw_centered_temp(temp + 0.5f, STATUS_CHAMBER_TEXT_X, 28);
-    }
-  #endif
-
   #if DISABLED(STATUS_HOTEND_ANIM)
     #define STATIC_HOTEND true
     #define HOTEND_DOT    isHeat
@@ -255,6 +234,29 @@ FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blin
 
 }
 
+#if HAS_HEATED_CHAMBER
+
+  FORCE_INLINE void _draw_chamber_status(const bool blink) {
+    const float temp = thermalManager.degChamber(),
+                target = thermalManager.degTargetChamber();
+    #if !HEATER_IDLE_HANDLER
+      UNUSED(blink);
+    #endif
+    if (PAGE_UNDER(7)) {
+      #if HEATER_IDLE_HANDLER
+        const bool is_idle = false, // thermalManager.chamber_idle.timed_out,
+                   dodraw = (blink || !is_idle);
+      #else
+        constexpr bool dodraw = true;
+      #endif
+      if (dodraw) _draw_centered_temp(target + 0.5, STATUS_CHAMBER_TEXT_X, 7);
+    }
+    if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
+      _draw_centered_temp(temp + 0.5f, STATUS_CHAMBER_TEXT_X, 28);
+  }
+
+#endif
+
 //
 // Before homing, blink '123' <-> '???'.
 // Homed but unknown... '123' <-> '   '.

commit b0d8ba38945d9a545c5088c9c379024e390c5a5e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jul 11 14:35:48 2019 -0500

    Fix ANIM_CHAMBER
    
    Co-Authored-By: alexscarbro <alexscarbro@users.noreply.github.com>

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 0e259f9439..ad220fbdfa 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -358,7 +358,7 @@ void MarlinUI::draw_status_screen() {
   #endif
 
   #if DO_DRAW_CHAMBER
-    #if ANIM_HAMBER
+    #if ANIM_CHAMBER
       #define CHAMBER_BITMAP(S) ((S) ? status_chamber_on_bmp : status_chamber_bmp)
     #else
       #define CHAMBER_BITMAP(S) status_chamber_bmp

commit fe0224104498a42a3921b97ef3902581fba6c309
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jul 5 18:20:15 2019 -0500

    NONE on combined options

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 7a5af37b8a..0e259f9439 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -271,7 +271,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     if (!TEST(axis_homed, axis))
       while (const char c = *value++) lcd_put_wchar(c <= '.' ? c : '?');
     else {
-      #if DISABLED(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING)
+      #if NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING)
         if (!TEST(axis_known_position, axis))
           lcd_put_u8str_P(axis == Z_AXIS ? PSTR("       ") : PSTR("    "));
         else

commit 750a16ad385dca893d482cb51d8af2ac3f8a1da1
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jul 5 18:01:21 2019 -0500

    Fix MIN/MAX function collision with macros

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 62e52fff20..7a5af37b8a 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -96,7 +96,7 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
   #define CHAMBER_ALT() false
 #endif
 
-#define MAX_HOTEND_DRAW MIN(HOTENDS, ((LCD_PIXEL_WIDTH - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
+#define MAX_HOTEND_DRAW _MIN(HOTENDS, ((LCD_PIXEL_WIDTH - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
 #define STATUS_HEATERS_BOT (STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)
 
 #if ENABLED(MARLIN_DEV_MODE)

commit ae9232962e7eef54de71d582b535c21df3a0f1b9
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jul 2 23:29:43 2019 -0500

    Use heater index defines

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 09b121434c..62e52fff20 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -105,7 +105,7 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
   #define SHOW_ON_STATE false
 #endif
 
-FORCE_INLINE void _draw_heater_status(const int8_t heater, const bool blink) {
+FORCE_INLINE void _draw_heater_status(const heater_ind_t heater, const bool blink) {
   #if !HEATER_IDLE_HANDLER
     UNUSED(blink);
   #endif
@@ -404,11 +404,11 @@ void MarlinUI::draw_status_screen() {
   if (PAGE_UNDER(6 + 1 + 12 + 1 + 6 + 1)) {
     // Extruders
     for (uint8_t e = 0; e < MAX_HOTEND_DRAW; ++e)
-      _draw_heater_status(e, blink);
+      _draw_heater_status((heater_ind_t)e, blink);
 
     // Heated bed
     #if HAS_HEATED_BED && HOTENDS < 4
-      _draw_heater_status(-1, blink);
+      _draw_heater_status(H_BED, blink);
     #endif
 
     #if HAS_HEATED_CHAMBER

commit a8d68b7c8a5ed440b2d12aea077ad05cadbaadfd
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jun 28 13:58:40 2019 -0500

    Common method for scaled fan speed

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index cbf1650314..09b121434c 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -423,7 +423,7 @@ void MarlinUI::draw_status_screen() {
         if (spd) {
           #if ENABLED(ADAPTIVE_FAN_SLOWING)
             if (!blink && thermalManager.fan_speed_scaler[0] < 128) {
-              spd = (spd * thermalManager.fan_speed_scaler[0]) >> 7;
+              spd = thermalManager.scaledFanSpeed(0, spd);
               c = '*';
             }
           #endif

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 15b551b48b..cbf1650314 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit 2a96d4e23ad0090dc371710d079af731136dfe97
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jun 11 05:58:43 2019 -0500

    Move number-to-string functions to libs

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index d9a0ad7fc1..15b551b48b 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -33,6 +33,7 @@
 #include "ultralcd_DOGM.h"
 #include "../ultralcd.h"
 #include "../lcdprint.h"
+#include "../../libs/numtostr.h"
 
 #include "../../module/motion.h"
 #include "../../module/temperature.h"

commit 123e58d9c3c8cf85236d8c0d6f74427b0f4196a1
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Thu May 30 19:31:50 2019 -0400

    Heated Chamber for Graphical LCD (#14190)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index a917bc2e84..d9a0ad7fc1 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -74,6 +74,7 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 #define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && STATUS_FAN_FRAMES)
 #define ANIM_HOTEND (HOTENDS && ENABLED(STATUS_HOTEND_ANIM))
 #define ANIM_BED (DO_DRAW_BED && ENABLED(STATUS_BED_ANIM))
+#define ANIM_CHAMBER (HAS_HEATED_CHAMBER && ENABLED(STATUS_CHAMBER_ANIM))
 
 #if ANIM_HOTEND || ANIM_BED
   uint8_t heat_bits;
@@ -88,6 +89,11 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 #else
   #define BED_ALT() false
 #endif
+#if ANIM_CHAMBER
+  #define CHAMBER_ALT() TEST(heat_bits, 6)
+#else
+  #define CHAMBER_ALT() false
+#endif
 
 #define MAX_HOTEND_DRAW MIN(HOTENDS, ((LCD_PIXEL_WIDTH - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
 #define STATUS_HEATERS_BOT (STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)
@@ -126,6 +132,27 @@ FORCE_INLINE void _draw_heater_status(const int8_t heater, const bool blink) {
                 target = IFBED(thermalManager.degTargetBed(), thermalManager.degTargetHotend(heater));
   #endif
 
+  #if HAS_HEATED_CHAMBER
+    FORCE_INLINE void _draw_chamber_status(const bool blink) {
+      const float temp = thermalManager.degChamber(),
+                  target = thermalManager.degTargetChamber();
+      #if !HEATER_IDLE_HANDLER
+        UNUSED(blink);
+      #endif
+      if (PAGE_UNDER(7)) {
+        #if HEATER_IDLE_HANDLER
+          const bool is_idle = false, // thermalManager.chamber_idle.timed_out,
+                     dodraw = (blink || !is_idle);
+        #else
+          constexpr bool dodraw = true;
+        #endif
+        if (dodraw) _draw_centered_temp(target + 0.5, STATUS_CHAMBER_TEXT_X, 7);
+      }
+      if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
+        _draw_centered_temp(temp + 0.5f, STATUS_CHAMBER_TEXT_X, 28);
+    }
+  #endif
+
   #if DISABLED(STATUS_HOTEND_ANIM)
     #define STATIC_HOTEND true
     #define HOTEND_DOT    isHeat
@@ -271,7 +298,7 @@ void MarlinUI::draw_status_screen() {
 
   // At the first page, generate new display values
   if (first_page) {
-    #if ANIM_HOTEND || ANIM_BED
+    #if ANIM_HOTEND || ANIM_BED || ANIM_CHAMBER
       uint8_t new_bits = 0;
       #if ANIM_HOTEND
         HOTEND_LOOP() if (thermalManager.isHeatingHotend(e) ^ SHOW_ON_STATE) SBI(new_bits, e);
@@ -279,6 +306,9 @@ void MarlinUI::draw_status_screen() {
       #if ANIM_BED
         if (thermalManager.isHeatingBed() ^ SHOW_ON_STATE) SBI(new_bits, 7);
       #endif
+      #if ANIM_CHAMBER
+        if (thermalManager.isHeatingChamber() ^ SHOW_ON_STATE) SBI(new_bits, 6);
+      #endif
       heat_bits = new_bits;
     #endif
     strcpy(xstring, ftostr4sign(LOGICAL_X_POSITION(current_position[X_AXIS])));
@@ -326,6 +356,20 @@ void MarlinUI::draw_status_screen() {
       u8g.drawBitmapP(STATUS_BED_X, bedy, STATUS_BED_BYTEWIDTH, bedh, BED_BITMAP(BED_ALT()));
   #endif
 
+  #if DO_DRAW_CHAMBER
+    #if ANIM_HAMBER
+      #define CHAMBER_BITMAP(S) ((S) ? status_chamber_on_bmp : status_chamber_bmp)
+    #else
+      #define CHAMBER_BITMAP(S) status_chamber_bmp
+    #endif
+    if (PAGE_CONTAINS(STATUS_CHAMBER_Y, STATUS_CHAMBER_Y + STATUS_CHAMBER_HEIGHT - 1))
+      u8g.drawBitmapP(
+        STATUS_CHAMBER_X, STATUS_CHAMBER_Y,
+        STATUS_CHAMBER_BYTEWIDTH, STATUS_CHAMBER_HEIGHT,
+        CHAMBER_BITMAP(CHAMBER_ALT())
+      );
+  #endif
+
   #if DO_DRAW_FAN
     #if STATUS_FAN_FRAMES > 2
       static bool old_blink;
@@ -366,6 +410,10 @@ void MarlinUI::draw_status_screen() {
       _draw_heater_status(-1, blink);
     #endif
 
+    #if HAS_HEATED_CHAMBER
+      _draw_chamber_status(blink);
+    #endif
+
     // Fan, if a bitmap was provided
     #if DO_DRAW_FAN
       if (PAGE_CONTAINS(STATUS_FAN_TEXT_Y - INFO_FONT_ASCENT, STATUS_FAN_TEXT_Y - 1)) {

commit bf28ad4b6c8deb00086851a32f65c2a97288b20d
Author: Antonio Pérez <aperez@skarcha.com>
Date:   Wed Apr 17 21:52:20 2019 +0200

    Fix clear of Z position last digit (#13731)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index e101a56829..a917bc2e84 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -245,7 +245,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     else {
       #if DISABLED(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING)
         if (!TEST(axis_known_position, axis))
-          lcd_put_u8str_P(axis == Z_AXIS ? PSTR("      ") : PSTR("    "));
+          lcd_put_u8str_P(axis == Z_AXIS ? PSTR("       ") : PSTR("    "));
         else
       #endif
           lcd_put_u8str(value);

commit b376c7e374bbbc2cb69b6009c619f923f42f84b3
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 17 05:50:06 2019 -0500

    Group DISABLED items

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 726713e662..e101a56829 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -243,7 +243,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     if (!TEST(axis_homed, axis))
       while (const char c = *value++) lcd_put_wchar(c <= '.' ? c : '?');
     else {
-      #if DISABLED(HOME_AFTER_DEACTIVATE) && DISABLED(DISABLE_REDUCED_ACCURACY_WARNING)
+      #if DISABLED(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING)
         if (!TEST(axis_known_position, axis))
           lcd_put_u8str_P(axis == Z_AXIS ? PSTR("      ") : PSTR("    "));
         else

commit 58bca6788374e6a0fcd8b3a5c513e1ad520b9a10
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 17 05:32:12 2019 -0500

    Unify status scrolling further

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 828c26322e..726713e662 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -612,31 +612,24 @@ void MarlinUI::draw_status_message(const bool blink) {
     if (slen <= LCD_WIDTH) {
       // The string fits within the line. Print with no scrolling
       lcd_put_u8str(status_message);
-      for (; slen < LCD_WIDTH; ++slen) lcd_put_wchar(' ');
+      while (slen < LCD_WIDTH) { lcd_put_wchar(' '); ++slen; }
     }
     else {
       // String is longer than the available space
 
       // Get a pointer to the next valid UTF8 character
-      const char *stat = status_message + status_scroll_offset;
-
-      // Get the string remaining length
-      const uint8_t rlen = utf8_strlen(stat);
-
-      if (rlen >= LCD_WIDTH) {
-        // The remaining string fills the screen - Print it
-        lcd_put_u8str_max(stat, LCD_PIXEL_WIDTH);
-      }
-      else {
-        // The remaining string does not completely fill the screen
-        lcd_put_u8str_max(stat, LCD_PIXEL_WIDTH);         // The string leaves space
-        uint8_t chars = LCD_WIDTH - rlen;                 // Amount of space left in characters
-
-        lcd_put_wchar('.');                               // Always at 1+ spaces left, draw a dot
-        if (--chars) {                                    // Draw a second dot if there's space
+      // and the string remaining length
+      uint8_t rlen;
+      const char *stat = status_and_len(rlen);
+      lcd_put_u8str_max(stat, LCD_PIXEL_WIDTH);
+
+      // If the remaining string doesn't completely fill the screen
+      if (rlen < LCD_WIDTH) {
+        lcd_put_wchar('.');                     // Always at 1+ spaces left, draw a dot
+        uint8_t chars = LCD_WIDTH - rlen;       // Amount of space left in characters
+        if (--chars) {                          // Draw a second dot if there's space
           lcd_put_wchar('.');
-          if (--chars) {
-            // Print a second copy of the message
+          if (--chars) {                        // Print a second copy of the message
             lcd_put_u8str_max(status_message, LCD_PIXEL_WIDTH - (rlen + 2) * (MENU_FONT_WIDTH));
             lcd_put_wchar(' ');
           }
@@ -644,15 +637,7 @@ void MarlinUI::draw_status_message(const bool blink) {
       }
       if (last_blink != blink) {
         last_blink = blink;
-
-        // Adjust by complete UTF8 characters
-        if (status_scroll_offset < slen) {
-          status_scroll_offset++;
-          while (!START_OF_UTF8_CHAR(status_message[status_scroll_offset]))
-            status_scroll_offset++;
-        }
-        else
-          status_scroll_offset = 0;
+        advance_status_scroll();
       }
     }
 

commit 49cf92dc36424cf828436f32e72263eca39a1cc3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 16 23:43:06 2019 -0500

    Extended condition macros (#13419)
    
    Allow `ENABLED`, `DISABLED`, `PIN_EXISTS`, and `BUTTON_EXISTS` to take multiple arguments. Also add:
    - Alias `ANY(...)` for `!DISABLED(...)`
    - Alias `ANY_PIN(...)` for `PIN_EXISTS(a) || PIN_EXISTS(b) ...`
    - Alias `EITHER(A,B)` for `ANY(...)`
    - Alias `ALL(...)` and `BOTH(A,B)` for `ENABLED(...)`
    - `NONE(...)` for `DISABLED(...)`

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index aabc1c8435..828c26322e 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -572,7 +572,7 @@ void MarlinUI::draw_status_screen() {
   if (PAGE_CONTAINS(STATUS_BASELINE - INFO_FONT_ASCENT, STATUS_BASELINE + INFO_FONT_DESCENT)) {
     lcd_moveto(0, STATUS_BASELINE);
 
-    #if ENABLED(FILAMENT_LCD_DISPLAY) && ENABLED(SDSUPPORT)
+    #if BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
       // Alternate Status message and Filament display
       if (ELAPSED(millis(), next_filament_display)) {
         lcd_put_u8str_P(PSTR(LCD_STR_FILAM_DIA));

commit 645ca7af7ac27af9d6690659dc71ff9867b34b6c
Author: 3dlabsio <shane@warnertci.com>
Date:   Thu Mar 7 00:09:39 2019 -0800

    M141 Heated Chamber, Temperature rework (#12201)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 1994910d74..aabc1c8435 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -208,7 +208,7 @@ FORCE_INLINE void _draw_heater_status(const int8_t heater, const bool blink) {
 
   if (PAGE_UNDER(7)) {
     #if HEATER_IDLE_HANDLER
-      const bool is_idle = IFBED(thermalManager.is_bed_idle(), thermalManager.is_heater_idle(heater)),
+      const bool is_idle = IFBED(thermalManager.bed_idle.timed_out, thermalManager.hotend_idle[heater].timed_out),
                  dodraw = (blink || !is_idle);
     #else
       constexpr bool dodraw = true;

commit 4fbbce9a35f77289798c02e4814c4b8d74c968f4
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Dec 2 18:03:29 2018 -0600

    Marlin Dev Mode for DOGM status screen

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 4366901921..1994910d74 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -92,6 +92,12 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
 #define MAX_HOTEND_DRAW MIN(HOTENDS, ((LCD_PIXEL_WIDTH - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
 #define STATUS_HEATERS_BOT (STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)
 
+#if ENABLED(MARLIN_DEV_MODE)
+  #define SHOW_ON_STATE READ(X_MIN_PIN)
+#else
+  #define SHOW_ON_STATE false
+#endif
+
 FORCE_INLINE void _draw_heater_status(const int8_t heater, const bool blink) {
   #if !HEATER_IDLE_HANDLER
     UNUSED(blink);
@@ -104,10 +110,21 @@ FORCE_INLINE void _draw_heater_status(const int8_t heater, const bool blink) {
     #define IFBED(A,B) (B)
   #endif
 
-  const bool isHeat = IFBED(BED_ALT(), HOTEND_ALT(heater));
+  #if ENABLED(MARLIN_DEV_MODE)
+    constexpr bool isHeat = true;
+  #else
+    const bool isHeat = IFBED(BED_ALT(), HOTEND_ALT(heater));
+  #endif
+
   const uint8_t tx = IFBED(STATUS_BED_TEXT_X, STATUS_HOTEND_TEXT_X(heater));
-  const float temp = IFBED(thermalManager.degBed(), thermalManager.degHotend(heater)),
-              target = IFBED(thermalManager.degTargetBed(), thermalManager.degTargetHotend(heater));
+
+  #if ENABLED(MARLIN_DEV_MODE)
+    const float temp = 20 + (millis() >> 8) % IFBED(100, 200);
+    const float target = IFBED(100, 200);
+  #else
+    const float temp = IFBED(thermalManager.degBed(), thermalManager.degHotend(heater)),
+                target = IFBED(thermalManager.degTargetBed(), thermalManager.degTargetHotend(heater));
+  #endif
 
   #if DISABLED(STATUS_HOTEND_ANIM)
     #define STATIC_HOTEND true
@@ -236,8 +253,17 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   }
 }
 
+#if ENABLED(MARLIN_DEV_MODE)
+  uint16_t count_renders = 0;
+  uint32_t total_cycles = 0;
+#endif
+
 void MarlinUI::draw_status_screen() {
 
+  #if ENABLED(MARLIN_DEV_MODE)
+    if (first_page) count_renders++;
+  #endif
+
   static char xstring[5], ystring[5], zstring[8];
   #if ENABLED(FILAMENT_LCD_DISPLAY)
     static char wstring[5], mstring[4];
@@ -248,10 +274,10 @@ void MarlinUI::draw_status_screen() {
     #if ANIM_HOTEND || ANIM_BED
       uint8_t new_bits = 0;
       #if ANIM_HOTEND
-        HOTEND_LOOP() if (thermalManager.isHeatingHotend(e)) SBI(new_bits, e);
+        HOTEND_LOOP() if (thermalManager.isHeatingHotend(e) ^ SHOW_ON_STATE) SBI(new_bits, e);
       #endif
       #if ANIM_BED
-        if (thermalManager.isHeatingBed()) SBI(new_bits, 7);
+        if (thermalManager.isHeatingBed() ^ SHOW_ON_STATE) SBI(new_bits, 7);
       #endif
       heat_bits = new_bits;
     #endif
@@ -274,6 +300,10 @@ void MarlinUI::draw_status_screen() {
   // Status Menu Font
   set_font(FONT_STATUSMENU);
 
+  #if ENABLED(MARLIN_DEV_MODE)
+    TCNT5 = 0;
+  #endif
+
   #if STATUS_LOGO_WIDTH
     if (PAGE_CONTAINS(STATUS_LOGO_Y, STATUS_LOGO_Y + STATUS_LOGO_HEIGHT - 1))
       u8g.drawBitmapP(STATUS_LOGO_X, STATUS_LOGO_Y, STATUS_LOGO_BYTEWIDTH, STATUS_LOGO_HEIGHT, status_logo_bmp);
@@ -356,6 +386,10 @@ void MarlinUI::draw_status_screen() {
     #endif
   }
 
+  #if ENABLED(MARLIN_DEV_MODE)
+    total_cycles += TCNT5;
+  #endif
+
   #if ENABLED(SDSUPPORT)
     //
     // SD Card Symbol
@@ -557,6 +591,17 @@ void MarlinUI::draw_status_screen() {
 
 void MarlinUI::draw_status_message(const bool blink) {
 
+  #if ENABLED(MARLIN_DEV_MODE)
+    if (PAGE_CONTAINS(64-8, 64-1)) {
+      lcd_put_int(total_cycles);
+      lcd_put_wchar('/');
+      lcd_put_int(count_renders);
+      lcd_put_wchar('=');
+      lcd_put_int(int(total_cycles / count_renders));
+      return;
+    }
+  #endif
+
   // Get the UTF8 character count of the string
   uint8_t slen = utf8_strlen(status_message);
 

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 76d8be74d8..4366901921 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm

commit 6de3d3437849c0710881311bc9ad4069b0aee55d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Feb 10 04:54:23 2019 -0600

    M166 Gradients, LCD Menu for 2-channel Mixer (Geeetech A10M/A20M) (#13022)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 03c499bdbc..76d8be74d8 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -51,6 +51,10 @@
   #include "../../module/printcounter.h"
 #endif
 
+#if DUAL_MIXING_EXTRUDER
+  #include "../../feature/mixing.h"
+#endif
+
 FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, const uint8_t ty) {
   const char *str = i16tostr3(temp);
   const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
@@ -59,6 +63,9 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
   lcd_put_wchar(LCD_STR_DEGREE[0]);
 }
 
+#define X_LABEL_POS      3
+#define X_VALUE_POS     11
+#define XYZ_SPACING     37
 #define XYZ_BASELINE    (30 + INFO_FONT_ASCENT)
 #define EXTRAS_BASELINE (40 + INFO_FONT_ASCENT)
 #define STATUS_BASELINE (LCD_PIXEL_HEIGHT - INFO_FONT_DESCENT)
@@ -209,6 +216,10 @@ FORCE_INLINE void _draw_heater_status(const int8_t heater, const bool blink) {
 // Homed and known, display constantly.
 //
 FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const bool blink) {
+  const uint8_t offs = (XYZ_SPACING) * axis;
+  lcd_moveto(X_LABEL_POS + offs, XYZ_BASELINE);
+  lcd_put_wchar('X' + axis);
+  lcd_moveto(X_VALUE_POS + offs, XYZ_BASELINE);
   if (blink)
     lcd_put_u8str(value);
   else {
@@ -450,19 +461,35 @@ void MarlinUI::draw_status_screen() {
         u8g.setColorIndex(0); // white on black
       #endif
 
-      lcd_moveto(0 * XYZ_SPACING + X_LABEL_POS, XYZ_BASELINE);
-      lcd_put_wchar('X');
-      lcd_moveto(0 * XYZ_SPACING + X_VALUE_POS, XYZ_BASELINE);
-      _draw_axis_value(X_AXIS, xstring, blink);
+      #if DUAL_MIXING_EXTRUDER
+
+        // Two-component mix / gradient instead of XY
+
+        lcd_moveto(X_LABEL_POS, XYZ_BASELINE);
+
+        char mixer_messages[12];
+        const char *mix_label;
+        #if ENABLED(GRADIENT_MIX)
+          if (mixer.gradient.enabled) {
+            mixer.update_mix_from_gradient();
+            mix_label = "Gr";
+          }
+          else
+        #endif
+          {
+            mixer.update_mix_from_vtool();
+            mix_label = "Mx";
+          }
+        sprintf_P(mixer_messages, PSTR("%s %d;%d%% "), mix_label, int(mixer.mix[0]), int(mixer.mix[1]));
+        lcd_put_u8str(mixer_messages);
+
+      #else
+
+        _draw_axis_value(X_AXIS, xstring, blink);
+        _draw_axis_value(Y_AXIS, ystring, blink);
 
-      lcd_moveto(1 * XYZ_SPACING + X_LABEL_POS, XYZ_BASELINE);
-      lcd_put_wchar('Y');
-      lcd_moveto(1 * XYZ_SPACING + X_VALUE_POS, XYZ_BASELINE);
-      _draw_axis_value(Y_AXIS, ystring, blink);
+      #endif
 
-      lcd_moveto(2 * XYZ_SPACING + X_LABEL_POS, XYZ_BASELINE);
-      lcd_put_wchar('Z');
-      lcd_moveto(2 * XYZ_SPACING + X_VALUE_POS, XYZ_BASELINE);
       _draw_axis_value(Z_AXIS, zstring, blink);
 
       #if DISABLED(XYZ_HOLLOW_FRAME)

commit eb78aed863cf20cc02f07b8c3e47d27ae4ed91dd
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 12 16:01:04 2019 -0600

    Rename LCD menus according to variable types (#12892)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index b265e6d6cb..03c499bdbc 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -52,7 +52,7 @@
 #endif
 
 FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, const uint8_t ty) {
-  const char *str = itostr3(temp);
+  const char *str = i16tostr3(temp);
   const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
   lcd_moveto(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty);
   lcd_put_u8str(&str[3-len]);
@@ -249,7 +249,7 @@ void MarlinUI::draw_status_screen() {
     strcpy(zstring, ftostr52sp(LOGICAL_Z_POSITION(current_position[Z_AXIS])));
     #if ENABLED(FILAMENT_LCD_DISPLAY)
       strcpy(wstring, ftostr12ns(filament_width_meas));
-      strcpy(mstring, itostr3(100.0 * (
+      strcpy(mstring, i16tostr3(100.0 * (
           parser.volumetric_enabled
             ? planner.volumetric_area_nominal / planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
             : planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
@@ -338,7 +338,7 @@ void MarlinUI::draw_status_screen() {
             }
           #endif
           lcd_moveto(STATUS_FAN_TEXT_X, STATUS_FAN_TEXT_Y);
-          lcd_put_u8str(itostr3(thermalManager.fanPercent(spd)));
+          lcd_put_u8str(i16tostr3(thermalManager.fanPercent(spd)));
           lcd_put_wchar(c);
         }
       }
@@ -393,7 +393,7 @@ void MarlinUI::draw_status_screen() {
         if (PAGE_CONTAINS(41, 48)) {
           // Percent complete
           lcd_moveto(55, 48);
-          lcd_put_u8str(itostr3(progress));
+          lcd_put_u8str(ui8tostr3(progress));
           lcd_put_wchar('%');
         }
       #endif
@@ -484,7 +484,7 @@ void MarlinUI::draw_status_screen() {
 
     set_font(FONT_STATUSMENU);
     lcd_moveto(12, EXTRAS_2_BASELINE);
-    lcd_put_u8str(itostr3(feedrate_percentage));
+    lcd_put_u8str(i16tostr3(feedrate_percentage));
     lcd_put_wchar('%');
 
     //

commit 082f6a27dece8d1883751d3f2af1c2b0f0b6802c
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sat Jan 12 01:41:48 2019 -0500

    ADAPTIVE_FAN_SLOWING extension to hotend thermal protection (#12853)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 4f044c0b2f..b265e6d6cb 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -291,7 +291,7 @@ void MarlinUI::draw_status_screen() {
       static uint8_t fan_frame;
       if (old_blink != blink) {
         old_blink = blink;
-        if (!fan_speed[0] || ++fan_frame >= STATUS_FAN_FRAMES) fan_frame = 0;
+        if (!thermalManager.fan_speed[0] || ++fan_frame >= STATUS_FAN_FRAMES) fan_frame = 0;
       }
     #endif
     if (PAGE_CONTAINS(STATUS_FAN_Y, STATUS_FAN_Y + STATUS_FAN_HEIGHT - 1))
@@ -305,7 +305,7 @@ void MarlinUI::draw_status_screen() {
             fan_frame == 3 ? status_fan3_bmp :
           #endif
         #elif STATUS_FAN_FRAMES > 1
-          blink && fan_speed[0] ? status_fan1_bmp :
+          blink && thermalManager.fan_speed[0] ? status_fan1_bmp :
         #endif
         status_fan0_bmp
       );
@@ -328,11 +328,18 @@ void MarlinUI::draw_status_screen() {
     // Fan, if a bitmap was provided
     #if DO_DRAW_FAN
       if (PAGE_CONTAINS(STATUS_FAN_TEXT_Y - INFO_FONT_ASCENT, STATUS_FAN_TEXT_Y - 1)) {
-        const int per = ((int(fan_speed[0]) + 1) * 100) / 256;
-        if (per) {
+        char c = '%';
+        uint16_t spd = thermalManager.fan_speed[0];
+        if (spd) {
+          #if ENABLED(ADAPTIVE_FAN_SLOWING)
+            if (!blink && thermalManager.fan_speed_scaler[0] < 128) {
+              spd = (spd * thermalManager.fan_speed_scaler[0]) >> 7;
+              c = '*';
+            }
+          #endif
           lcd_moveto(STATUS_FAN_TEXT_X, STATUS_FAN_TEXT_Y);
-          lcd_put_u8str(itostr3(per));
-          lcd_put_wchar('%');
+          lcd_put_u8str(itostr3(thermalManager.fanPercent(spd)));
+          lcd_put_wchar(c);
         }
       }
     #endif

commit 64389acdf1aacbd769f2d6da5ee1e6316db2d023
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Dec 3 06:17:09 2018 -0600

    Print a space after scrolling status

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index bff0cf1d20..4f044c0b2f 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -559,6 +559,7 @@ void MarlinUI::draw_status_message(const bool blink) {
           if (--chars) {
             // Print a second copy of the message
             lcd_put_u8str_max(status_message, LCD_PIXEL_WIDTH - (rlen + 2) * (MENU_FONT_WIDTH));
+            lcd_put_wchar(' ');
           }
         }
       }

commit 69d869c3d999207253a6263974b9bb1ef1a9c82d
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Nov 28 19:46:13 2018 -0600

    Tweak FR icon. Update font data.

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index bcccbf0793..bff0cf1d20 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -59,6 +59,10 @@ FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, cons
   lcd_put_wchar(LCD_STR_DEGREE[0]);
 }
 
+#define XYZ_BASELINE    (30 + INFO_FONT_ASCENT)
+#define EXTRAS_BASELINE (40 + INFO_FONT_ASCENT)
+#define STATUS_BASELINE (LCD_PIXEL_HEIGHT - INFO_FONT_DESCENT)
+
 #define DO_DRAW_BED (HAS_HEATED_BED && STATUS_BED_WIDTH && HOTENDS <= 3 && DISABLED(STATUS_COMBINE_HEATERS))
 #define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && STATUS_FAN_FRAMES)
 #define ANIM_HOTEND (HOTENDS && ENABLED(STATUS_HOTEND_ANIM))
@@ -323,7 +327,7 @@ void MarlinUI::draw_status_screen() {
 
     // Fan, if a bitmap was provided
     #if DO_DRAW_FAN
-      if (PAGE_CONTAINS(STATUS_FAN_TEXT_Y - INFO_FONT_ASCENT, STATUS_FAN_TEXT_Y)) {
+      if (PAGE_CONTAINS(STATUS_FAN_TEXT_Y - INFO_FONT_ASCENT, STATUS_FAN_TEXT_Y - 1)) {
         const int per = ((int(fan_speed[0]) + 1) * 100) / 256;
         if (per) {
           lcd_moveto(STATUS_FAN_TEXT_X, STATUS_FAN_TEXT_Y);
@@ -398,12 +402,12 @@ void MarlinUI::draw_status_screen() {
       #define SD_DURATION_X (LCD_PIXEL_WIDTH - len * MENU_FONT_WIDTH)
     #endif
 
-    if (PAGE_CONTAINS(41, 48)) {
+    if (PAGE_CONTAINS(EXTRAS_BASELINE - INFO_FONT_ASCENT, EXTRAS_BASELINE - 1)) {
       char buffer[13];
       duration_t elapsed = print_job_timer.duration();
       bool has_days = (elapsed.value >= 60*60*24L);
       uint8_t len = elapsed.toDigital(buffer, has_days);
-      lcd_moveto(SD_DURATION_X, 48);
+      lcd_moveto(SD_DURATION_X, EXTRAS_BASELINE);
       lcd_put_u8str(buffer);
     }
 
@@ -413,8 +417,6 @@ void MarlinUI::draw_status_screen() {
   // XYZ Coordinates
   //
 
-  #define XYZ_BASELINE (30 + INFO_FONT_ASCENT)
-
   #define X_LABEL_POS  3
   #define X_VALUE_POS 11
   #define XYZ_SPACING 37
@@ -465,15 +467,16 @@ void MarlinUI::draw_status_screen() {
   //
   // Feedrate
   //
-  #define EXTRAS_BASELINE 50
 
-  if (PAGE_CONTAINS(EXTRAS_BASELINE - (INFO_FONT_HEIGHT - 1), EXTRAS_BASELINE)) {
+  #define EXTRAS_2_BASELINE (EXTRAS_BASELINE + 3)
+
+  if (PAGE_CONTAINS(EXTRAS_2_BASELINE - INFO_FONT_ASCENT, EXTRAS_2_BASELINE - 1)) {
     set_font(FONT_MENU);
-    lcd_moveto(3, EXTRAS_BASELINE);
+    lcd_moveto(3, EXTRAS_2_BASELINE);
     lcd_put_wchar(LCD_STR_FEEDRATE[0]);
 
     set_font(FONT_STATUSMENU);
-    lcd_moveto(12, EXTRAS_BASELINE);
+    lcd_moveto(12, EXTRAS_2_BASELINE);
     lcd_put_u8str(itostr3(feedrate_percentage));
     lcd_put_wchar('%');
 
@@ -481,15 +484,15 @@ void MarlinUI::draw_status_screen() {
     // Filament sensor display if SD is disabled
     //
     #if ENABLED(FILAMENT_LCD_DISPLAY) && DISABLED(SDSUPPORT)
-      lcd_moveto(56, EXTRAS_BASELINE);
+      lcd_moveto(56, EXTRAS_2_BASELINE);
       lcd_put_u8str(wstring);
-      lcd_moveto(102, EXTRAS_BASELINE);
+      lcd_moveto(102, EXTRAS_2_BASELINE);
       lcd_put_u8str(mstring);
       lcd_put_wchar('%');
       set_font(FONT_MENU);
-      lcd_moveto(47, EXTRAS_BASELINE);
+      lcd_moveto(47, EXTRAS_2_BASELINE);
       lcd_put_wchar(LCD_STR_FILAM_DIA[0]); // lcd_put_u8str_P(PSTR(LCD_STR_FILAM_DIA));
-      lcd_moveto(93, EXTRAS_BASELINE);
+      lcd_moveto(93, EXTRAS_2_BASELINE);
       lcd_put_wchar(LCD_STR_FILAM_MUL[0]);
     #endif
   }
@@ -498,9 +501,7 @@ void MarlinUI::draw_status_screen() {
   // Status line
   //
 
-  #define STATUS_BASELINE (LCD_PIXEL_HEIGHT - INFO_FONT_DESCENT)
-
-  if (PAGE_CONTAINS(STATUS_BASELINE - (INFO_FONT_ASCENT - 1), STATUS_BASELINE)) {
+  if (PAGE_CONTAINS(STATUS_BASELINE - INFO_FONT_ASCENT, STATUS_BASELINE + INFO_FONT_DESCENT)) {
     lcd_moveto(0, STATUS_BASELINE);
 
     #if ENABLED(FILAMENT_LCD_DISPLAY) && ENABLED(SDSUPPORT)

commit 61db0b65b6d227d3792e3d988c5c0402b3082038
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Nov 28 14:45:38 2018 -0600

    Followup to heating progress

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index fcead8c50f..bcccbf0793 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -94,8 +94,7 @@ FORCE_INLINE void _draw_heater_status(const int8_t heater, const bool blink) {
   #endif
 
   const bool isHeat = IFBED(BED_ALT(), HOTEND_ALT(heater));
-  const uint8_t ix = IFBED(STATUS_BED_X, STATUS_HOTEND_X(heater)),
-                tx = IFBED(STATUS_BED_TEXT_X, STATUS_HOTEND_TEXT_X(heater));
+  const uint8_t tx = IFBED(STATUS_BED_TEXT_X, STATUS_HOTEND_TEXT_X(heater));
   const float temp = IFBED(thermalManager.degBed(), thermalManager.degHotend(heater)),
               target = IFBED(thermalManager.degTargetBed(), thermalManager.degTargetHotend(heater));
 
@@ -166,7 +165,7 @@ FORCE_INLINE void _draw_heater_status(const int8_t heater, const bool blink) {
     #if ENABLED(STATUS_HEAT_PERCENT)
 
       if (IFBED(true, STATIC_HOTEND) && isHeat) {
-        const uint8_t bx = ix + IFBED(STATUS_BED_WIDTH, STATUS_HOTEND_WIDTH(heater)) + 1;
+        const uint8_t bx = IFBED(STATUS_BED_X + STATUS_BED_WIDTH, STATUS_HOTEND_X(heater) + STATUS_HOTEND_WIDTH(heater)) + 1;
         u8g.drawFrame(bx, STATUS_HEATERS_Y, 3, STATUS_HEATERS_HEIGHT);
         if (tall) {
           const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;

commit 4f9ec9ab4518c74e34daa1164eb2587e7e39d7a6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Nov 27 21:15:52 2018 -0600

    Add heating progress bars (#12543)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 07b1842c86..fcead8c50f 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -51,87 +51,151 @@
   #include "../../module/printcounter.h"
 #endif
 
-FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t x, const uint8_t y) {
+FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t tx, const uint8_t ty) {
   const char *str = itostr3(temp);
   const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
-  lcd_moveto(x - len * (INFO_FONT_WIDTH) / 2 + 1, y);
+  lcd_moveto(tx - len * (INFO_FONT_WIDTH) / 2 + 1, ty);
   lcd_put_u8str(&str[3-len]);
   lcd_put_wchar(LCD_STR_DEGREE[0]);
 }
 
-#if ENABLED(MARLIN_DEV_MODE)
-  #define SHOW_ON_STATE READ(X_MIN_PIN)
+#define DO_DRAW_BED (HAS_HEATED_BED && STATUS_BED_WIDTH && HOTENDS <= 3 && DISABLED(STATUS_COMBINE_HEATERS))
+#define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && STATUS_FAN_FRAMES)
+#define ANIM_HOTEND (HOTENDS && ENABLED(STATUS_HOTEND_ANIM))
+#define ANIM_BED (DO_DRAW_BED && ENABLED(STATUS_BED_ANIM))
+
+#if ANIM_HOTEND || ANIM_BED
+  uint8_t heat_bits;
+#endif
+#if ANIM_HOTEND
+  #define HOTEND_ALT(N) TEST(heat_bits, N)
+#else
+  #define HOTEND_ALT(N) false
+#endif
+#if ANIM_BED
+  #define BED_ALT() TEST(heat_bits, 7)
 #else
-  #define SHOW_ON_STATE false
+  #define BED_ALT() false
 #endif
 
-FORCE_INLINE void _draw_heater_status(const uint8_t x, const int8_t heater, const bool blink) {
+#define MAX_HOTEND_DRAW MIN(HOTENDS, ((LCD_PIXEL_WIDTH - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
+#define STATUS_HEATERS_BOT (STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)
+
+FORCE_INLINE void _draw_heater_status(const int8_t heater, const bool blink) {
   #if !HEATER_IDLE_HANDLER
     UNUSED(blink);
   #endif
 
   #if HAS_HEATED_BED
     const bool isBed = heater < 0;
+    #define IFBED(A,B) (isBed ? (A) : (B))
   #else
-    constexpr bool isBed = false;
+    #define IFBED(A,B) (B)
   #endif
 
-  if (PAGE_UNDER(7)) {
-    #if HEATER_IDLE_HANDLER
-      const bool is_idle = (
-        #if HAS_HEATED_BED
-          isBed ? thermalManager.is_bed_idle() :
-        #endif
-        thermalManager.is_heater_idle(heater)
-      );
+  const bool isHeat = IFBED(BED_ALT(), HOTEND_ALT(heater));
+  const uint8_t ix = IFBED(STATUS_BED_X, STATUS_HOTEND_X(heater)),
+                tx = IFBED(STATUS_BED_TEXT_X, STATUS_HOTEND_TEXT_X(heater));
+  const float temp = IFBED(thermalManager.degBed(), thermalManager.degHotend(heater)),
+              target = IFBED(thermalManager.degTargetBed(), thermalManager.degTargetHotend(heater));
 
-      if (blink || !is_idle)
-    #endif
-        _draw_centered_temp(0.5 + (
-            #if HAS_HEATED_BED
-              isBed ? thermalManager.degTargetBed() :
-            #endif
-            thermalManager.degTargetHotend(heater)
-          ), x, 7
-        );
-  }
+  #if DISABLED(STATUS_HOTEND_ANIM)
+    #define STATIC_HOTEND true
+    #define HOTEND_DOT    isHeat
+  #else
+    #define STATIC_HOTEND false
+    #define HOTEND_DOT    false
+  #endif
 
-  if (PAGE_CONTAINS(21, 28))
-    _draw_centered_temp(0.5f + (
-        #if HAS_HEATED_BED
-          isBed ? thermalManager.degBed() :
-        #endif
-        thermalManager.degHotend(heater)
-      ), x, 28
-    );
+  #if HAS_HEATED_BED && DISABLED(STATUS_BED_ANIM)
+    #define STATIC_BED    true
+    #define BED_DOT       isHeat
+  #else
+    #define STATIC_BED    false
+    #define BED_DOT       false
+  #endif
 
-  #ifndef STATUS_HOTEND_ANIM
-    #define INDICATE_HOTEND    true
-    #define INDICATE_HOTEND_ON (thermalManager.isHeatingHotend(heater) ^ SHOW_ON_STATE)
+  #if ANIM_HOTEND && ENABLED(STATUS_HOTEND_INVERTED)
+    #define OFF_BMP(N) status_hotend##N##_b_bmp
+    #define ON_BMP(N)  status_hotend##N##_a_bmp
   #else
-    #define INDICATE_HOTEND    false
-    #define INDICATE_HOTEND_ON false
+    #define OFF_BMP(N) status_hotend##N##_a_bmp
+    #define ON_BMP(N)  status_hotend##N##_b_bmp
   #endif
 
-  #if HAS_HEATED_BED && !defined(STATUS_BED_ANIM)
-    #define INDICATE_BED    true
-    #define INDICATE_BED_ON (thermalManager.isHeatingBed() ^ SHOW_ON_STATE)
+  #if STATUS_HOTEND_BITMAPS > 1
+    static const unsigned char* const status_hotend_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, OFF_BMP(1), OFF_BMP(2), OFF_BMP(3), OFF_BMP(4), OFF_BMP(5), OFF_BMP(6));
+    #if ANIM_HOTEND
+      static const unsigned char* const status_hotend_on_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, ON_BMP(1), ON_BMP(2), ON_BMP(3), ON_BMP(4), ON_BMP(5), ON_BMP(6));
+      #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr((S) ? &status_hotend_on_gfx[(N) % (STATUS_HOTEND_BITMAPS)] : &status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
+    #else
+      #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr(&status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
+    #endif
+  #elif ANIM_HOTEND
+    #define HOTEND_BITMAP(N,S) ((S) ? ON_BMP() : OFF_BMP())
   #else
-    #define INDICATE_BED    false
-    #define INDICATE_BED_ON false
+    #define HOTEND_BITMAP(N,S) status_hotend_a_bmp
   #endif
 
-  if (isBed ? INDICATE_BED : INDICATE_HOTEND) {
-    if (PAGE_CONTAINS(17, 20)) {
-      const uint8_t y = 20 - (isBed ? 2 : 3);
-      if (isBed ? INDICATE_BED_ON : INDICATE_HOTEND_ON) {
-        u8g.setColorIndex(0); // set to white on black
-        u8g.drawBox(x, y, 2, 2);
-        u8g.setColorIndex(1); // restore black on white
+  if (PAGE_CONTAINS(STATUS_HEATERS_Y, STATUS_HEATERS_BOT)) {
+
+    #define BAR_TALL (STATUS_HEATERS_HEIGHT - 2)
+
+    const float prop = target - 20,
+                perc = prop > 0 && temp >= 20 ? (temp - 20) / prop : 0;
+    uint8_t tall = uint8_t(perc * BAR_TALL + 0.5f);
+    NOMORE(tall, BAR_TALL);
+
+    #ifdef STATUS_HOTEND_ANIM
+      // Draw hotend bitmap, either whole or split by the heating percent
+      if (IFBED(0, 1)) {
+        const uint8_t hx = STATUS_HOTEND_X(heater), bw = STATUS_HOTEND_BYTEWIDTH(heater);
+        #if ENABLED(STATUS_HEAT_PERCENT)
+          if (isHeat && tall <= BAR_TALL) {
+            const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
+            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, ph, HOTEND_BITMAP(heater, false));
+            u8g.drawBitmapP(hx, STATUS_HEATERS_Y + ph, bw, tall + 1, HOTEND_BITMAP(heater, true) + ph * bw);
+          }
+          else
+        #endif
+            u8g.drawBitmapP(hx, STATUS_HEATERS_Y, bw, STATUS_HEATERS_HEIGHT, HOTEND_BITMAP(heater, isHeat));
       }
-      else
-        u8g.drawBox(x, y, 2, 2);
-    }
+    #endif
+
+    // Draw a heating progress bar, if specified
+    #if ENABLED(STATUS_HEAT_PERCENT)
+
+      if (IFBED(true, STATIC_HOTEND) && isHeat) {
+        const uint8_t bx = ix + IFBED(STATUS_BED_WIDTH, STATUS_HOTEND_WIDTH(heater)) + 1;
+        u8g.drawFrame(bx, STATUS_HEATERS_Y, 3, STATUS_HEATERS_HEIGHT);
+        if (tall) {
+          const uint8_t ph = STATUS_HEATERS_HEIGHT - 1 - tall;
+          if (PAGE_OVER(STATUS_HEATERS_Y + ph))
+            u8g.drawVLine(bx + 1, STATUS_HEATERS_Y + ph, tall);
+        }
+      }
+
+    #endif
+
+  } // PAGE_CONTAINS
+
+  if (PAGE_UNDER(7)) {
+    #if HEATER_IDLE_HANDLER
+      const bool is_idle = IFBED(thermalManager.is_bed_idle(), thermalManager.is_heater_idle(heater)),
+                 dodraw = (blink || !is_idle);
+    #else
+      constexpr bool dodraw = true;
+    #endif
+    if (dodraw) _draw_centered_temp(target + 0.5, tx, 7);
+  }
+
+  if (PAGE_CONTAINS(28 - INFO_FONT_ASCENT, 28 - 1))
+    _draw_centered_temp(temp + 0.5f, tx, 28);
+
+  if (IFBED(STATIC_BED && BED_DOT, STATIC_HOTEND && HOTEND_DOT) && PAGE_CONTAINS(17, 19)) {
+    u8g.setColorIndex(0); // set to white on black
+    u8g.drawBox(tx, IFBED(20-2, 20-3), 2, 2);
+    u8g.setColorIndex(1); // restore black on white
   }
 
 }
@@ -158,94 +222,8 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   }
 }
 
-void MarlinUI::draw_status_message(const bool blink) {
-
-  // Get the UTF8 character count of the string
-  uint8_t slen = utf8_strlen(status_message);
-
-  #if ENABLED(STATUS_MESSAGE_SCROLLING)
-
-    static bool last_blink = false;
-
-    if (slen <= LCD_WIDTH) {
-      // The string fits within the line. Print with no scrolling
-      lcd_put_u8str(status_message);
-      for (; slen < LCD_WIDTH; ++slen) lcd_put_wchar(' ');
-    }
-    else {
-      // String is longer than the available space
-
-      // Get a pointer to the next valid UTF8 character
-      const char *stat = status_message + status_scroll_offset;
-
-      // Get the string remaining length
-      const uint8_t rlen = utf8_strlen(stat);
-
-      if (rlen >= LCD_WIDTH) {
-        // The remaining string fills the screen - Print it
-        lcd_put_u8str_max(stat, LCD_PIXEL_WIDTH);
-      }
-      else {
-        // The remaining string does not completely fill the screen
-        lcd_put_u8str_max(stat, LCD_PIXEL_WIDTH);         // The string leaves space
-        uint8_t chars = LCD_WIDTH - rlen;                 // Amount of space left in characters
-
-        lcd_put_wchar('.');                               // Always at 1+ spaces left, draw a dot
-        if (--chars) {                                    // Draw a second dot if there's space
-          lcd_put_wchar('.');
-          if (--chars) {
-            // Print a second copy of the message
-            lcd_put_u8str_max(status_message, LCD_PIXEL_WIDTH - (rlen + 2) * (MENU_FONT_WIDTH));
-          }
-        }
-      }
-      if (last_blink != blink) {
-        last_blink = blink;
-
-        // Adjust by complete UTF8 characters
-        if (status_scroll_offset < slen) {
-          status_scroll_offset++;
-          while (!START_OF_UTF8_CHAR(status_message[status_scroll_offset]))
-            status_scroll_offset++;
-        }
-        else
-          status_scroll_offset = 0;
-      }
-    }
-
-  #else // !STATUS_MESSAGE_SCROLLING
-
-    UNUSED(blink);
-
-    // Just print the string to the LCD
-    lcd_put_u8str_max(status_message, LCD_PIXEL_WIDTH);
-
-    // Fill the rest with spaces
-    for (; slen < LCD_WIDTH; ++slen) lcd_put_wchar(' ');
-
-  #endif // !STATUS_MESSAGE_SCROLLING
-}
-
 void MarlinUI::draw_status_screen() {
 
-  #define DO_DRAW_BED (HAS_HEATED_BED && STATUS_BED_WIDTH)
-  #define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && STATUS_FAN_FRAMES)
-  #define ANIM_END (HOTENDS && defined(STATUS_HOTEND_ANIM))
-  #define ANIM_BED (DO_DRAW_BED && defined(STATUS_BED_ANIM))
-  #if ANIM_END || ANIM_BED
-    static uint8_t heat_bits;
-  #endif
-  #if ANIM_END
-    #define HOTEND_ALT(N) TEST(heat_bits, N)
-  #else
-    #define HOTEND_ALT(N) false
-  #endif
-  #if ANIM_BED
-    #define BED_ALT TEST(heat_bits, 7)
-  #else
-    #define BED_ALT false
-  #endif
-
   static char xstring[5], ystring[5], zstring[8];
   #if ENABLED(FILAMENT_LCD_DISPLAY)
     static char wstring[5], mstring[4];
@@ -253,14 +231,15 @@ void MarlinUI::draw_status_screen() {
 
   // At the first page, generate new display values
   if (first_page) {
-    #if ANIM_END || ANIM_BED
-      heat_bits = 0;
-      #if ANIM_END
-        HOTEND_LOOP() if (thermalManager.isHeatingHotend(e) ^ SHOW_ON_STATE) SBI(heat_bits, e);
+    #if ANIM_HOTEND || ANIM_BED
+      uint8_t new_bits = 0;
+      #if ANIM_HOTEND
+        HOTEND_LOOP() if (thermalManager.isHeatingHotend(e)) SBI(new_bits, e);
       #endif
       #if ANIM_BED
-        if (thermalManager.isHeatingBed() ^ SHOW_ON_STATE) SBI(heat_bits, 7);
+        if (thermalManager.isHeatingBed()) SBI(new_bits, 7);
       #endif
+      heat_bits = new_bits;
     #endif
     strcpy(xstring, ftostr4sign(LOGICAL_X_POSITION(current_position[X_AXIS])));
     strcpy(ystring, ftostr4sign(LOGICAL_Y_POSITION(current_position[Y_AXIS])));
@@ -283,65 +262,13 @@ void MarlinUI::draw_status_screen() {
 
   #if STATUS_LOGO_WIDTH
     if (PAGE_CONTAINS(STATUS_LOGO_Y, STATUS_LOGO_Y + STATUS_LOGO_HEIGHT - 1))
-      u8g.drawBitmapP(
-        STATUS_LOGO_X, STATUS_LOGO_Y,
-        STATUS_LOGO_BYTEWIDTH, STATUS_LOGO_HEIGHT,
-        status_logo_bmp
-      );
+      u8g.drawBitmapP(STATUS_LOGO_X, STATUS_LOGO_Y, STATUS_LOGO_BYTEWIDTH, STATUS_LOGO_HEIGHT, status_logo_bmp);
   #endif
 
-  #if STATUS_HEATERS_WIDTH || STATUS_HOTEND1_WIDTH
-
-    if (PAGE_CONTAINS(STATUS_HEATERS_Y, STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)) {
-
-      #if STATUS_HEATERS_WIDTH
-
-        // Draw all heaters (and maybe the bed) in one go
-        u8g.drawBitmapP(
-          STATUS_HEATERS_X, STATUS_HEATERS_Y,
-          STATUS_HEATERS_BYTEWIDTH, STATUS_HEATERS_HEIGHT,
-          status_heaters_bmp
-        );
-
-      #else
-
-        #if ANIM_END && defined(STATUS_HOTEND_INVERTED)
-          #define OFF_BMP(N) status_hotend##N##_b_bmp
-          #define ON_BMP(N)  status_hotend##N##_a_bmp
-        #else
-          #define OFF_BMP(N) status_hotend##N##_a_bmp
-          #define ON_BMP(N)  status_hotend##N##_b_bmp
-        #endif
-
-        #if STATUS_HOTEND_BITMAPS > 1
-          static const unsigned char* const status_hotend_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, OFF_BMP(1), OFF_BMP(2), OFF_BMP(3), OFF_BMP(4), OFF_BMP(5), OFF_BMP(6));
-          #if ANIM_END
-            static const unsigned char* const status_hotend_on_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, ON_BMP(1), ON_BMP(2), ON_BMP(3), ON_BMP(4), ON_BMP(5), ON_BMP(6));
-            #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr((S) ? &status_hotend_on_gfx[(N) % (STATUS_HOTEND_BITMAPS)] : &status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
-          #else
-            #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr(&status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
-          #endif
-        #elif ANIM_END
-          #define HOTEND_BITMAP(N,S) ((S) ? ON_BMP() : OFF_BMP())
-        #else
-          #define HOTEND_BITMAP(N,S) status_hotend_a_bmp
-        #endif
-
-        #define MAX_HOTEND_DRAW MIN(HOTENDS, ((128 - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
-
-        // Draw hotends from one or more individual hotend bitmaps
-        for (uint8_t h = 0; h < MAX_HOTEND_DRAW; ++h) {
-          u8g.drawBitmapP(
-            STATUS_HOTEND_X(h), STATUS_HEATERS_Y,
-            STATUS_HOTEND_BYTEWIDTH(h), STATUS_HEATERS_HEIGHT,
-            HOTEND_BITMAP(h, HOTEND_ALT(h))
-          );
-        }
-
-      #endif
-
-    } // PAGE_CONTAINS
-
+  #if STATUS_HEATERS_WIDTH
+    // Draw all heaters (and maybe the bed) in one go
+    if (PAGE_CONTAINS(STATUS_HEATERS_Y, STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1))
+      u8g.drawBitmapP(STATUS_HEATERS_X, STATUS_HEATERS_Y, STATUS_HEATERS_BYTEWIDTH, STATUS_HEATERS_HEIGHT, status_heaters_bmp);
   #endif
 
   #if DO_DRAW_BED
@@ -350,14 +277,9 @@ void MarlinUI::draw_status_screen() {
     #else
       #define BED_BITMAP(S) status_bed_bmp
     #endif
-    const uint8_t bedy = STATUS_BED_Y(BED_ALT), bedh = STATUS_BED_HEIGHT(BED_ALT);
-    if (PAGE_CONTAINS(bedy, bedy + bedh - 1)) {
-      u8g.drawBitmapP(
-        STATUS_BED_X, bedy,
-        STATUS_BED_BYTEWIDTH, bedh,
-        BED_BITMAP(BED_ALT)
-      );
-    }
+    const uint8_t bedy = STATUS_BED_Y(BED_ALT()), bedh = STATUS_BED_HEIGHT(BED_ALT());
+    if (PAGE_CONTAINS(bedy, bedy + bedh - 1))
+      u8g.drawBitmapP(STATUS_BED_X, bedy, STATUS_BED_BYTEWIDTH, bedh, BED_BITMAP(BED_ALT()));
   #endif
 
   #if DO_DRAW_FAN
@@ -390,13 +312,14 @@ void MarlinUI::draw_status_screen() {
   // Temperature Graphics and Info
   //
 
-  if (PAGE_UNDER(28)) {
+  if (PAGE_UNDER(6 + 1 + 12 + 1 + 6 + 1)) {
     // Extruders
-    HOTEND_LOOP() _draw_heater_status(STATUS_HOTEND_TEXT_X(e), e, blink);
+    for (uint8_t e = 0; e < MAX_HOTEND_DRAW; ++e)
+      _draw_heater_status(e, blink);
 
     // Heated bed
-    #if HOTENDS < 4 && HAS_HEATED_BED
-      _draw_heater_status(STATUS_BED_TEXT_X, -1, blink);
+    #if HAS_HEATED_BED && HOTENDS < 4
+      _draw_heater_status(-1, blink);
     #endif
 
     // Fan, if a bitmap was provided
@@ -435,11 +358,8 @@ void MarlinUI::draw_status_screen() {
     #define PROGRESS_BAR_X 54
     #define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
 
-    if (PAGE_CONTAINS(49, 52))       // 49-52 (or 49-51)
-      u8g.drawFrame(
-        PROGRESS_BAR_X, 49,
-        PROGRESS_BAR_WIDTH, 4
-      );
+    if (PAGE_CONTAINS(49, 52))
+      u8g.drawFrame(PROGRESS_BAR_X, 49, PROGRESS_BAR_WIDTH, 4);
 
     const uint8_t progress = get_progress();
 
@@ -601,4 +521,72 @@ void MarlinUI::draw_status_screen() {
   }
 }
 
+void MarlinUI::draw_status_message(const bool blink) {
+
+  // Get the UTF8 character count of the string
+  uint8_t slen = utf8_strlen(status_message);
+
+  #if ENABLED(STATUS_MESSAGE_SCROLLING)
+
+    static bool last_blink = false;
+
+    if (slen <= LCD_WIDTH) {
+      // The string fits within the line. Print with no scrolling
+      lcd_put_u8str(status_message);
+      for (; slen < LCD_WIDTH; ++slen) lcd_put_wchar(' ');
+    }
+    else {
+      // String is longer than the available space
+
+      // Get a pointer to the next valid UTF8 character
+      const char *stat = status_message + status_scroll_offset;
+
+      // Get the string remaining length
+      const uint8_t rlen = utf8_strlen(stat);
+
+      if (rlen >= LCD_WIDTH) {
+        // The remaining string fills the screen - Print it
+        lcd_put_u8str_max(stat, LCD_PIXEL_WIDTH);
+      }
+      else {
+        // The remaining string does not completely fill the screen
+        lcd_put_u8str_max(stat, LCD_PIXEL_WIDTH);         // The string leaves space
+        uint8_t chars = LCD_WIDTH - rlen;                 // Amount of space left in characters
+
+        lcd_put_wchar('.');                               // Always at 1+ spaces left, draw a dot
+        if (--chars) {                                    // Draw a second dot if there's space
+          lcd_put_wchar('.');
+          if (--chars) {
+            // Print a second copy of the message
+            lcd_put_u8str_max(status_message, LCD_PIXEL_WIDTH - (rlen + 2) * (MENU_FONT_WIDTH));
+          }
+        }
+      }
+      if (last_blink != blink) {
+        last_blink = blink;
+
+        // Adjust by complete UTF8 characters
+        if (status_scroll_offset < slen) {
+          status_scroll_offset++;
+          while (!START_OF_UTF8_CHAR(status_message[status_scroll_offset]))
+            status_scroll_offset++;
+        }
+        else
+          status_scroll_offset = 0;
+      }
+    }
+
+  #else // !STATUS_MESSAGE_SCROLLING
+
+    UNUSED(blink);
+
+    // Just print the string to the LCD
+    lcd_put_u8str_max(status_message, LCD_PIXEL_WIDTH);
+
+    // Fill the rest with spaces
+    for (; slen < LCD_WIDTH; ++slen) lcd_put_wchar(' ');
+
+  #endif // !STATUS_MESSAGE_SCROLLING
+}
+
 #endif // HAS_GRAPHICAL_LCD && !LIGHTWEIGHT_UI

commit b57343c25546067218451a9c8d315d2d87386735
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Nov 23 23:14:56 2018 -0600

    Put status screen options in Configuration_adv.h

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 17b5d1558b..07b1842c86 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -229,7 +229,7 @@ void MarlinUI::draw_status_message(const bool blink) {
 void MarlinUI::draw_status_screen() {
 
   #define DO_DRAW_BED (HAS_HEATED_BED && STATUS_BED_WIDTH)
-  #define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && FAN_ANIM_FRAMES)
+  #define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && STATUS_FAN_FRAMES)
   #define ANIM_END (HOTENDS && defined(STATUS_HOTEND_ANIM))
   #define ANIM_BED (DO_DRAW_BED && defined(STATUS_BED_ANIM))
   #if ANIM_END || ANIM_BED
@@ -361,25 +361,25 @@ void MarlinUI::draw_status_screen() {
   #endif
 
   #if DO_DRAW_FAN
-    #if FAN_ANIM_FRAMES > 2
+    #if STATUS_FAN_FRAMES > 2
       static bool old_blink;
       static uint8_t fan_frame;
       if (old_blink != blink) {
         old_blink = blink;
-        if (!fan_speed[0] || ++fan_frame >= FAN_ANIM_FRAMES) fan_frame = 0;
+        if (!fan_speed[0] || ++fan_frame >= STATUS_FAN_FRAMES) fan_frame = 0;
       }
     #endif
     if (PAGE_CONTAINS(STATUS_FAN_Y, STATUS_FAN_Y + STATUS_FAN_HEIGHT - 1))
       u8g.drawBitmapP(
         STATUS_FAN_X, STATUS_FAN_Y,
         STATUS_FAN_BYTEWIDTH, STATUS_FAN_HEIGHT,
-        #if FAN_ANIM_FRAMES > 2
+        #if STATUS_FAN_FRAMES > 2
           fan_frame == 1 ? status_fan1_bmp :
           fan_frame == 2 ? status_fan2_bmp :
-          #if FAN_ANIM_FRAMES > 3
+          #if STATUS_FAN_FRAMES > 3
             fan_frame == 3 ? status_fan3_bmp :
           #endif
-        #elif FAN_ANIM_FRAMES > 1
+        #elif STATUS_FAN_FRAMES > 1
           blink && fan_speed[0] ? status_fan1_bmp :
         #endif
         status_fan0_bmp

commit ee423dcdd0e89d96b5d3b9461d71737abe8b5186
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Nov 21 00:50:06 2018 -0600

    Invert hotend bitmaps, by default

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 6ff9e7b85b..17b5d1558b 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -305,18 +305,26 @@ void MarlinUI::draw_status_screen() {
 
       #else
 
+        #if ANIM_END && defined(STATUS_HOTEND_INVERTED)
+          #define OFF_BMP(N) status_hotend##N##_b_bmp
+          #define ON_BMP(N)  status_hotend##N##_a_bmp
+        #else
+          #define OFF_BMP(N) status_hotend##N##_a_bmp
+          #define ON_BMP(N)  status_hotend##N##_b_bmp
+        #endif
+
         #if STATUS_HOTEND_BITMAPS > 1
-          static const unsigned char* const status_hotend_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, status_hotend1_bmp, status_hotend2_bmp, status_hotend3_bmp, status_hotend4_bmp, status_hotend5_bmp, status_hotend6_bmp);
+          static const unsigned char* const status_hotend_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, OFF_BMP(1), OFF_BMP(2), OFF_BMP(3), OFF_BMP(4), OFF_BMP(5), OFF_BMP(6));
           #if ANIM_END
-            static const unsigned char* const status_hotend_on_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, status_hotend1_on_bmp, status_hotend2_on_bmp, status_hotend3_on_bmp, status_hotend4_on_bmp, status_hotend5_on_bmp, status_hotend6_on_bmp);
+            static const unsigned char* const status_hotend_on_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, ON_BMP(1), ON_BMP(2), ON_BMP(3), ON_BMP(4), ON_BMP(5), ON_BMP(6));
             #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr((S) ? &status_hotend_on_gfx[(N) % (STATUS_HOTEND_BITMAPS)] : &status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
           #else
             #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr(&status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
           #endif
         #elif ANIM_END
-          #define HOTEND_BITMAP(N,S) ((S) ? status_hotend_on_bmp : status_hotend_bmp)
+          #define HOTEND_BITMAP(N,S) ((S) ? ON_BMP() : OFF_BMP())
         #else
-          #define HOTEND_BITMAP(N,S) status_hotend_bmp
+          #define HOTEND_BITMAP(N,S) status_hotend_a_bmp
         #endif
 
         #define MAX_HOTEND_DRAW MIN(HOTENDS, ((128 - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))

commit 4def8b3b5e01498d0a4358898784b08b886c3202
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Nov 20 07:36:37 2018 -0600

    Expanded options for _Statusscreen.h (#12455)
    
    See the PR for full details. The updated system will be documented on the website in the near future.

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 154a0cfe93..6ff9e7b85b 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -52,14 +52,17 @@
 #endif
 
 FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t x, const uint8_t y) {
-  const char * const str = itostr3(temp);
-  lcd_moveto(x - (str[0] != ' ' ? 0 : str[1] != ' ' ? 1 : 2) * MENU_FONT_WIDTH / 2, y);
-  lcd_put_u8str(str);
-  lcd_put_u8str_P(PSTR(LCD_STR_DEGREE " "));
+  const char *str = itostr3(temp);
+  const uint8_t len = str[0] != ' ' ? 3 : str[1] != ' ' ? 2 : 1;
+  lcd_moveto(x - len * (INFO_FONT_WIDTH) / 2 + 1, y);
+  lcd_put_u8str(&str[3-len]);
+  lcd_put_wchar(LCD_STR_DEGREE[0]);
 }
 
-#ifndef HEAT_INDICATOR_X
-  #define HEAT_INDICATOR_X 8
+#if ENABLED(MARLIN_DEV_MODE)
+  #define SHOW_ON_STATE READ(X_MIN_PIN)
+#else
+  #define SHOW_ON_STATE false
 #endif
 
 FORCE_INLINE void _draw_heater_status(const uint8_t x, const int8_t heater, const bool blink) {
@@ -93,7 +96,7 @@ FORCE_INLINE void _draw_heater_status(const uint8_t x, const int8_t heater, cons
         );
   }
 
-  if (PAGE_CONTAINS(21, 28)) {
+  if (PAGE_CONTAINS(21, 28))
     _draw_centered_temp(0.5f + (
         #if HAS_HEATED_BED
           isBed ? thermalManager.degBed() :
@@ -102,23 +105,35 @@ FORCE_INLINE void _draw_heater_status(const uint8_t x, const int8_t heater, cons
       ), x, 28
     );
 
+  #ifndef STATUS_HOTEND_ANIM
+    #define INDICATE_HOTEND    true
+    #define INDICATE_HOTEND_ON (thermalManager.isHeatingHotend(heater) ^ SHOW_ON_STATE)
+  #else
+    #define INDICATE_HOTEND    false
+    #define INDICATE_HOTEND_ON false
+  #endif
+
+  #if HAS_HEATED_BED && !defined(STATUS_BED_ANIM)
+    #define INDICATE_BED    true
+    #define INDICATE_BED_ON (thermalManager.isHeatingBed() ^ SHOW_ON_STATE)
+  #else
+    #define INDICATE_BED    false
+    #define INDICATE_BED_ON false
+  #endif
+
+  if (isBed ? INDICATE_BED : INDICATE_HOTEND) {
     if (PAGE_CONTAINS(17, 20)) {
-      const uint8_t h = isBed ? 7 : HEAT_INDICATOR_X,
-                    y = isBed ? 18 : 17;
-      if (
-        #if HAS_HEATED_BED
-          isBed ? thermalManager.isHeatingBed() :
-        #endif
-        thermalManager.isHeatingHotend(heater)
-      ) {
-        u8g.setColorIndex(0); // white on black
-        u8g.drawBox(x + h, y, 2, 2);
-        u8g.setColorIndex(1); // black on white
+      const uint8_t y = 20 - (isBed ? 2 : 3);
+      if (isBed ? INDICATE_BED_ON : INDICATE_HOTEND_ON) {
+        u8g.setColorIndex(0); // set to white on black
+        u8g.drawBox(x, y, 2, 2);
+        u8g.setColorIndex(1); // restore black on white
       }
       else
-        u8g.drawBox(x + h, y, 2, 2);
+        u8g.drawBox(x, y, 2, 2);
     }
   }
+
 }
 
 //
@@ -213,54 +228,155 @@ void MarlinUI::draw_status_message(const bool blink) {
 
 void MarlinUI::draw_status_screen() {
 
+  #define DO_DRAW_BED (HAS_HEATED_BED && STATUS_BED_WIDTH)
+  #define DO_DRAW_FAN (HAS_FAN0 && STATUS_FAN_WIDTH && FAN_ANIM_FRAMES)
+  #define ANIM_END (HOTENDS && defined(STATUS_HOTEND_ANIM))
+  #define ANIM_BED (DO_DRAW_BED && defined(STATUS_BED_ANIM))
+  #if ANIM_END || ANIM_BED
+    static uint8_t heat_bits;
+  #endif
+  #if ANIM_END
+    #define HOTEND_ALT(N) TEST(heat_bits, N)
+  #else
+    #define HOTEND_ALT(N) false
+  #endif
+  #if ANIM_BED
+    #define BED_ALT TEST(heat_bits, 7)
+  #else
+    #define BED_ALT false
+  #endif
+
+  static char xstring[5], ystring[5], zstring[8];
+  #if ENABLED(FILAMENT_LCD_DISPLAY)
+    static char wstring[5], mstring[4];
+  #endif
+
+  // At the first page, generate new display values
+  if (first_page) {
+    #if ANIM_END || ANIM_BED
+      heat_bits = 0;
+      #if ANIM_END
+        HOTEND_LOOP() if (thermalManager.isHeatingHotend(e) ^ SHOW_ON_STATE) SBI(heat_bits, e);
+      #endif
+      #if ANIM_BED
+        if (thermalManager.isHeatingBed() ^ SHOW_ON_STATE) SBI(heat_bits, 7);
+      #endif
+    #endif
+    strcpy(xstring, ftostr4sign(LOGICAL_X_POSITION(current_position[X_AXIS])));
+    strcpy(ystring, ftostr4sign(LOGICAL_Y_POSITION(current_position[Y_AXIS])));
+    strcpy(zstring, ftostr52sp(LOGICAL_Z_POSITION(current_position[Z_AXIS])));
+    #if ENABLED(FILAMENT_LCD_DISPLAY)
+      strcpy(wstring, ftostr12ns(filament_width_meas));
+      strcpy(mstring, itostr3(100.0 * (
+          parser.volumetric_enabled
+            ? planner.volumetric_area_nominal / planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
+            : planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
+        )
+      ));
+    #endif
+  }
+
   const bool blink = get_blink();
 
   // Status Menu Font
   set_font(FONT_STATUSMENU);
 
-  //
-  // Fan Animation
-  //
-  // Draw the entire heading image bitmap rather than each element
-  // separately. This is an optimization because it's slower to draw
-  // multiple elements than a single bitmap.
-  //
-  // The bitmap:
-  //  - May be offset in X
-  //  - Includes all nozzle(s), bed(s), and the fan.
-  //
-  // TODO:
-  //
-  //  - Only draw the whole header on the first
-  //    entry to the status screen. Nozzle, bed, and
-  //    fan outline bits don't change.
-  //
-  #if FAN_ANIM_FRAMES > 2
-    static bool old_blink;
-    static uint8_t fan_frame;
-    if (old_blink != blink) {
-      old_blink = blink;
-      if (!fan_speed[0] || ++fan_frame >= FAN_ANIM_FRAMES) fan_frame = 0;
+  #if STATUS_LOGO_WIDTH
+    if (PAGE_CONTAINS(STATUS_LOGO_Y, STATUS_LOGO_Y + STATUS_LOGO_HEIGHT - 1))
+      u8g.drawBitmapP(
+        STATUS_LOGO_X, STATUS_LOGO_Y,
+        STATUS_LOGO_BYTEWIDTH, STATUS_LOGO_HEIGHT,
+        status_logo_bmp
+      );
+  #endif
+
+  #if STATUS_HEATERS_WIDTH || STATUS_HOTEND1_WIDTH
+
+    if (PAGE_CONTAINS(STATUS_HEATERS_Y, STATUS_HEATERS_Y + STATUS_HEATERS_HEIGHT - 1)) {
+
+      #if STATUS_HEATERS_WIDTH
+
+        // Draw all heaters (and maybe the bed) in one go
+        u8g.drawBitmapP(
+          STATUS_HEATERS_X, STATUS_HEATERS_Y,
+          STATUS_HEATERS_BYTEWIDTH, STATUS_HEATERS_HEIGHT,
+          status_heaters_bmp
+        );
+
+      #else
+
+        #if STATUS_HOTEND_BITMAPS > 1
+          static const unsigned char* const status_hotend_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, status_hotend1_bmp, status_hotend2_bmp, status_hotend3_bmp, status_hotend4_bmp, status_hotend5_bmp, status_hotend6_bmp);
+          #if ANIM_END
+            static const unsigned char* const status_hotend_on_gfx[STATUS_HOTEND_BITMAPS] PROGMEM = ARRAY_N(STATUS_HOTEND_BITMAPS, status_hotend1_on_bmp, status_hotend2_on_bmp, status_hotend3_on_bmp, status_hotend4_on_bmp, status_hotend5_on_bmp, status_hotend6_on_bmp);
+            #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr((S) ? &status_hotend_on_gfx[(N) % (STATUS_HOTEND_BITMAPS)] : &status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
+          #else
+            #define HOTEND_BITMAP(N,S) (unsigned char*)pgm_read_ptr(&status_hotend_gfx[(N) % (STATUS_HOTEND_BITMAPS)])
+          #endif
+        #elif ANIM_END
+          #define HOTEND_BITMAP(N,S) ((S) ? status_hotend_on_bmp : status_hotend_bmp)
+        #else
+          #define HOTEND_BITMAP(N,S) status_hotend_bmp
+        #endif
+
+        #define MAX_HOTEND_DRAW MIN(HOTENDS, ((128 - (STATUS_LOGO_BYTEWIDTH + STATUS_FAN_BYTEWIDTH) * 8) / (STATUS_HEATERS_XSPACE)))
+
+        // Draw hotends from one or more individual hotend bitmaps
+        for (uint8_t h = 0; h < MAX_HOTEND_DRAW; ++h) {
+          u8g.drawBitmapP(
+            STATUS_HOTEND_X(h), STATUS_HEATERS_Y,
+            STATUS_HOTEND_BYTEWIDTH(h), STATUS_HEATERS_HEIGHT,
+            HOTEND_BITMAP(h, HOTEND_ALT(h))
+          );
+        }
+
+      #endif
+
+    } // PAGE_CONTAINS
+
+  #endif
+
+  #if DO_DRAW_BED
+    #if ANIM_BED
+      #define BED_BITMAP(S) ((S) ? status_bed_on_bmp : status_bed_bmp)
+    #else
+      #define BED_BITMAP(S) status_bed_bmp
+    #endif
+    const uint8_t bedy = STATUS_BED_Y(BED_ALT), bedh = STATUS_BED_HEIGHT(BED_ALT);
+    if (PAGE_CONTAINS(bedy, bedy + bedh - 1)) {
+      u8g.drawBitmapP(
+        STATUS_BED_X, bedy,
+        STATUS_BED_BYTEWIDTH, bedh,
+        BED_BITMAP(BED_ALT)
+      );
     }
   #endif
 
-  if (PAGE_UNDER(STATUS_SCREENHEIGHT + 1))
-    u8g.drawBitmapP(
-      STATUS_SCREEN_X, STATUS_SCREEN_Y,
-      (STATUS_SCREENWIDTH + 7) / 8, STATUS_SCREENHEIGHT,
-      #if HAS_FAN0
+  #if DO_DRAW_FAN
+    #if FAN_ANIM_FRAMES > 2
+      static bool old_blink;
+      static uint8_t fan_frame;
+      if (old_blink != blink) {
+        old_blink = blink;
+        if (!fan_speed[0] || ++fan_frame >= FAN_ANIM_FRAMES) fan_frame = 0;
+      }
+    #endif
+    if (PAGE_CONTAINS(STATUS_FAN_Y, STATUS_FAN_Y + STATUS_FAN_HEIGHT - 1))
+      u8g.drawBitmapP(
+        STATUS_FAN_X, STATUS_FAN_Y,
+        STATUS_FAN_BYTEWIDTH, STATUS_FAN_HEIGHT,
         #if FAN_ANIM_FRAMES > 2
-          fan_frame == 1 ? status_screen1_bmp :
-          fan_frame == 2 ? status_screen2_bmp :
+          fan_frame == 1 ? status_fan1_bmp :
+          fan_frame == 2 ? status_fan2_bmp :
           #if FAN_ANIM_FRAMES > 3
-            fan_frame == 3 ? status_screen3_bmp :
+            fan_frame == 3 ? status_fan3_bmp :
           #endif
-        #else
-          blink && fan_speed[0] ? status_screen1_bmp :
+        #elif FAN_ANIM_FRAMES > 1
+          blink && fan_speed[0] ? status_fan1_bmp :
         #endif
-      #endif
-      status_screen0_bmp
-    );
+        status_fan0_bmp
+      );
+  #endif
 
   //
   // Temperature Graphics and Info
@@ -268,19 +384,19 @@ void MarlinUI::draw_status_screen() {
 
   if (PAGE_UNDER(28)) {
     // Extruders
-    HOTEND_LOOP() _draw_heater_status(STATUS_SCREEN_HOTEND_TEXT_X(e), e, blink);
+    HOTEND_LOOP() _draw_heater_status(STATUS_HOTEND_TEXT_X(e), e, blink);
 
     // Heated bed
     #if HOTENDS < 4 && HAS_HEATED_BED
-      _draw_heater_status(STATUS_SCREEN_BED_TEXT_X, -1, blink);
+      _draw_heater_status(STATUS_BED_TEXT_X, -1, blink);
     #endif
 
-    #if HAS_FAN0
-      if (PAGE_CONTAINS(STATUS_SCREEN_FAN_TEXT_Y - 7, STATUS_SCREEN_FAN_TEXT_Y)) {
-        // Fan
+    // Fan, if a bitmap was provided
+    #if DO_DRAW_FAN
+      if (PAGE_CONTAINS(STATUS_FAN_TEXT_Y - INFO_FONT_ASCENT, STATUS_FAN_TEXT_Y)) {
         const int per = ((int(fan_speed[0]) + 1) * 100) / 256;
         if (per) {
-          lcd_moveto(STATUS_SCREEN_FAN_TEXT_X, STATUS_SCREEN_FAN_TEXT_Y);
+          lcd_moveto(STATUS_FAN_TEXT_X, STATUS_FAN_TEXT_Y);
           lcd_put_u8str(itostr3(per));
           lcd_put_wchar('%');
         }
@@ -384,27 +500,6 @@ void MarlinUI::draw_status_screen() {
     #define XYZ_FRAME_HEIGHT INFO_FONT_ASCENT + 1
   #endif
 
-  static char xstring[5], ystring[5], zstring[8];
-  #if ENABLED(FILAMENT_LCD_DISPLAY)
-    static char wstring[5], mstring[4];
-  #endif
-
-  // At the first page, regenerate the XYZ strings
-  if (first_page) {
-    strcpy(xstring, ftostr4sign(LOGICAL_X_POSITION(current_position[X_AXIS])));
-    strcpy(ystring, ftostr4sign(LOGICAL_Y_POSITION(current_position[Y_AXIS])));
-    strcpy(zstring, ftostr52sp(LOGICAL_Z_POSITION(current_position[Z_AXIS])));
-    #if ENABLED(FILAMENT_LCD_DISPLAY)
-      strcpy(wstring, ftostr12ns(filament_width_meas));
-      strcpy(mstring, itostr3(100.0 * (
-          parser.volumetric_enabled
-            ? planner.volumetric_area_nominal / planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
-            : planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
-        )
-      ));
-    #endif
-  }
-
   if (PAGE_CONTAINS(XYZ_FRAME_TOP, XYZ_FRAME_TOP + XYZ_FRAME_HEIGHT - 1)) {
 
     #if ENABLED(XYZ_HOLLOW_FRAME)

commit ec9d21a234656b41dd934933d42c2aaa2599d06e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Nov 20 06:58:08 2018 -0600

    Shift YZ on graphical display to fit Z+123.45

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 67dd089707..154a0cfe93 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -374,7 +374,7 @@ void MarlinUI::draw_status_screen() {
 
   #define X_LABEL_POS  3
   #define X_VALUE_POS 11
-  #define XYZ_SPACING 40
+  #define XYZ_SPACING 37
 
   #if ENABLED(XYZ_HOLLOW_FRAME)
     #define XYZ_FRAME_TOP 29

commit 826d5701627f4c725ab9e0c61a53643008c5dbbf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 18 19:58:02 2018 -0600

    Combine Travis CI option-setting commands (#12474)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index f70bd486be..67dd089707 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -37,6 +37,12 @@
 #include "../../module/motion.h"
 #include "../../module/temperature.h"
 
+#if ENABLED(FILAMENT_LCD_DISPLAY)
+  #include "../../feature/filwidth.h"
+  #include "../../module/planner.h"
+  #include "../../gcode/parser.h"
+#endif
+
 #if ENABLED(SDSUPPORT)
   #include "../../sd/cardreader.h"
 #endif
@@ -477,9 +483,7 @@ void MarlinUI::draw_status_screen() {
 
     #if ENABLED(FILAMENT_LCD_DISPLAY) && ENABLED(SDSUPPORT)
       // Alternate Status message and Filament display
-      if (PENDING(millis(), next_filament_display))
-        draw_status_message(blink);
-      else {
+      if (ELAPSED(millis(), next_filament_display)) {
         lcd_put_u8str_P(PSTR(LCD_STR_FILAM_DIA));
         lcd_put_wchar(':');
         lcd_put_u8str(wstring);
@@ -488,9 +492,9 @@ void MarlinUI::draw_status_screen() {
         lcd_put_u8str(mstring);
         lcd_put_wchar('%');
       }
-    #else
-      draw_status_message(blink);
+      else
     #endif
+        draw_status_message(blink);
   }
 }
 

commit 0ee1a92971bba0fe5ed290e2562bca71cfb5ea46
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Nov 13 01:47:45 2018 -0600

    Group status methods, share reset_status with Extensible UI (#12414)
    
    * Group status methods, share reset_status with Extensible UI
    * Move common DOGM code to headers

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index af209a07df..f70bd486be 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -30,8 +30,10 @@
 #if HAS_GRAPHICAL_LCD && DISABLED(LIGHTWEIGHT_UI)
 
 #include "dogm_Statusscreen.h"
+#include "ultralcd_DOGM.h"
 #include "../ultralcd.h"
 #include "../lcdprint.h"
+
 #include "../../module/motion.h"
 #include "../../module/temperature.h"
 

commit a0c795b097a30eff006c8dff178abf5f1f1907fa
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 11 12:16:24 2018 -0600

    Encapsulate common display code in a singleton (#12395)
    
    * Encapsulate common LCD code in a singleton
    * Depend more UBL code on UBL_DEVEL_DEBUGGING
      - Since most users don't need the debugging on at all times, this helps reduce the default build size for UBL by over 2K, a little closer to fitting on 128K boards.

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index c49fa50a05..af209a07df 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -135,35 +135,29 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   }
 }
 
-FORCE_INLINE void lcd_implementation_status_message(const bool blink) {
-  #if ENABLED(STATUS_MESSAGE_SCROLLING)
-    static bool last_blink = false;
+void MarlinUI::draw_status_message(const bool blink) {
 
-    // Get the UTF8 character count of the string
-    uint8_t slen = utf8_strlen(lcd_status_message);
+  // Get the UTF8 character count of the string
+  uint8_t slen = utf8_strlen(status_message);
 
-    // If the string fits into the LCD, just print it and do not scroll it
-    if (slen <= LCD_WIDTH) {
+  #if ENABLED(STATUS_MESSAGE_SCROLLING)
 
-      // The string isn't scrolling and may not fill the screen
-      lcd_put_u8str(lcd_status_message);
+    static bool last_blink = false;
 
-      // Fill the rest with spaces
-      while (slen < LCD_WIDTH) {
-        lcd_put_wchar(' ');
-        ++slen;
-      }
+    if (slen <= LCD_WIDTH) {
+      // The string fits within the line. Print with no scrolling
+      lcd_put_u8str(status_message);
+      for (; slen < LCD_WIDTH; ++slen) lcd_put_wchar(' ');
     }
     else {
-      // String is larger than the available space in screen.
+      // String is longer than the available space
 
       // Get a pointer to the next valid UTF8 character
-      const char *stat = lcd_status_message + status_scroll_offset;
+      const char *stat = status_message + status_scroll_offset;
 
       // Get the string remaining length
       const uint8_t rlen = utf8_strlen(stat);
 
-      // If we have enough characters to display
       if (rlen >= LCD_WIDTH) {
         // The remaining string fills the screen - Print it
         lcd_put_u8str_max(stat, LCD_PIXEL_WIDTH);
@@ -178,7 +172,7 @@ FORCE_INLINE void lcd_implementation_status_message(const bool blink) {
           lcd_put_wchar('.');
           if (--chars) {
             // Print a second copy of the message
-            lcd_put_u8str_max(lcd_status_message, LCD_PIXEL_WIDTH - ((rlen+2) * MENU_FONT_WIDTH));
+            lcd_put_u8str_max(status_message, LCD_PIXEL_WIDTH - (rlen + 2) * (MENU_FONT_WIDTH));
           }
         }
       }
@@ -188,36 +182,33 @@ FORCE_INLINE void lcd_implementation_status_message(const bool blink) {
         // Adjust by complete UTF8 characters
         if (status_scroll_offset < slen) {
           status_scroll_offset++;
-          while (!START_OF_UTF8_CHAR(lcd_status_message[status_scroll_offset]))
+          while (!START_OF_UTF8_CHAR(status_message[status_scroll_offset]))
             status_scroll_offset++;
         }
         else
           status_scroll_offset = 0;
       }
     }
-  #else
-    UNUSED(blink);
 
-    // Get the UTF8 character count of the string
-    uint8_t slen = utf8_strlen(lcd_status_message);
+  #else // !STATUS_MESSAGE_SCROLLING
+
+    UNUSED(blink);
 
     // Just print the string to the LCD
-    lcd_put_u8str_max(lcd_status_message, LCD_PIXEL_WIDTH);
+    lcd_put_u8str_max(status_message, LCD_PIXEL_WIDTH);
 
-    // Fill the rest with spaces if there are missing spaces
-    while (slen < LCD_WIDTH) {
-      lcd_put_wchar(' ');
-      ++slen;
-    }
-  #endif
+    // Fill the rest with spaces
+    for (; slen < LCD_WIDTH; ++slen) lcd_put_wchar(' ');
+
+  #endif // !STATUS_MESSAGE_SCROLLING
 }
 
-void lcd_impl_status_screen_0() {
+void MarlinUI::draw_status_screen() {
 
-  const bool blink = lcd_blink();
+  const bool blink = get_blink();
 
   // Status Menu Font
-  lcd_setFont(FONT_STATUSMENU);
+  set_font(FONT_STATUSMENU);
 
   //
   // Fan Animation
@@ -318,11 +309,9 @@ void lcd_impl_status_screen_0() {
         PROGRESS_BAR_WIDTH, 4
       );
 
-    #if DISABLED(LCD_SET_PROGRESS_MANUALLY)
-      const uint8_t progress_bar_percent = card.percentDone();
-    #endif
+    const uint8_t progress = get_progress();
 
-    if (progress_bar_percent > 1) {
+    if (progress > 1) {
 
       //
       // Progress bar solid part
@@ -331,7 +320,7 @@ void lcd_impl_status_screen_0() {
       if (PAGE_CONTAINS(50, 51))     // 50-51 (or just 50)
         u8g.drawBox(
           PROGRESS_BAR_X + 1, 50,
-          (uint16_t)((PROGRESS_BAR_WIDTH - 2) * progress_bar_percent * 0.01), 2
+          (uint16_t)((PROGRESS_BAR_WIDTH - 2) * progress * 0.01), 2
         );
 
       //
@@ -342,7 +331,7 @@ void lcd_impl_status_screen_0() {
         if (PAGE_CONTAINS(41, 48)) {
           // Percent complete
           lcd_moveto(55, 48);
-          lcd_put_u8str(itostr3(progress_bar_percent));
+          lcd_put_u8str(itostr3(progress));
           lcd_put_wchar('%');
         }
       #endif
@@ -449,11 +438,11 @@ void lcd_impl_status_screen_0() {
   #define EXTRAS_BASELINE 50
 
   if (PAGE_CONTAINS(EXTRAS_BASELINE - (INFO_FONT_HEIGHT - 1), EXTRAS_BASELINE)) {
-    lcd_setFont(FONT_MENU);
+    set_font(FONT_MENU);
     lcd_moveto(3, EXTRAS_BASELINE);
     lcd_put_wchar(LCD_STR_FEEDRATE[0]);
 
-    lcd_setFont(FONT_STATUSMENU);
+    set_font(FONT_STATUSMENU);
     lcd_moveto(12, EXTRAS_BASELINE);
     lcd_put_u8str(itostr3(feedrate_percentage));
     lcd_put_wchar('%');
@@ -467,7 +456,7 @@ void lcd_impl_status_screen_0() {
       lcd_moveto(102, EXTRAS_BASELINE);
       lcd_put_u8str(mstring);
       lcd_put_wchar('%');
-      lcd_setFont(FONT_MENU);
+      set_font(FONT_MENU);
       lcd_moveto(47, EXTRAS_BASELINE);
       lcd_put_wchar(LCD_STR_FILAM_DIA[0]); // lcd_put_u8str_P(PSTR(LCD_STR_FILAM_DIA));
       lcd_moveto(93, EXTRAS_BASELINE);
@@ -485,9 +474,9 @@ void lcd_impl_status_screen_0() {
     lcd_moveto(0, STATUS_BASELINE);
 
     #if ENABLED(FILAMENT_LCD_DISPLAY) && ENABLED(SDSUPPORT)
-      if (PENDING(millis(), previous_lcd_status_ms + 5000UL)) {  //Display both Status message line and Filament display on the last line
-        lcd_implementation_status_message(blink);
-      }
+      // Alternate Status message and Filament display
+      if (PENDING(millis(), next_filament_display))
+        draw_status_message(blink);
       else {
         lcd_put_u8str_P(PSTR(LCD_STR_FILAM_DIA));
         lcd_put_wchar(':');
@@ -498,7 +487,7 @@ void lcd_impl_status_screen_0() {
         lcd_put_wchar('%');
       }
     #else
-      lcd_implementation_status_message(blink);
+      draw_status_message(blink);
     #endif
   }
 }

commit 9c0e05552ea504b193ac45740040953a8473b93e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Nov 4 15:25:26 2018 -0600

    Suppress some compile warnings

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 003db14f33..c49fa50a05 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -359,7 +359,7 @@ void lcd_impl_status_screen_0() {
     #endif
 
     if (PAGE_CONTAINS(41, 48)) {
-      char buffer[10];
+      char buffer[13];
       duration_t elapsed = print_job_timer.duration();
       bool has_days = (elapsed.value >= 60*60*24L);
       uint8_t len = elapsed.toDigital(buffer, has_days);

commit 56d2dcb184c8ff5e868418ee0b585ba4abbc3b98
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Nov 3 06:58:59 2018 -0500

    Use first_page flag in place of page.page == 0

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index d5462c9164..003db14f33 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -212,9 +212,6 @@ FORCE_INLINE void lcd_implementation_status_message(const bool blink) {
   #endif
 }
 
-// The current graphical page being rendered
-u8g_page_t &page = ((u8g_pb_t *)((u8g.getU8g())->dev->dev_mem))->p;
-
 void lcd_impl_status_screen_0() {
 
   const bool blink = lcd_blink();
@@ -396,7 +393,7 @@ void lcd_impl_status_screen_0() {
   #endif
 
   // At the first page, regenerate the XYZ strings
-  if (page.page == 0) {
+  if (first_page) {
     strcpy(xstring, ftostr4sign(LOGICAL_X_POSITION(current_position[X_AXIS])));
     strcpy(ystring, ftostr4sign(LOGICAL_Y_POSITION(current_position[Y_AXIS])));
     strcpy(zstring, ftostr52sp(LOGICAL_Z_POSITION(current_position[Z_AXIS])));

commit 6e041b9c612da529391a8eaff3081750fd0e2fd3
Author: MasterPIC <armando_unina@yahoo.it>
Date:   Thu Nov 1 21:56:12 2018 +0100

    Use blink to show more info on LCD (#12256)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 52e6f96a8c..d5462c9164 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -282,7 +282,7 @@ void lcd_impl_status_screen_0() {
     #if HAS_FAN0
       if (PAGE_CONTAINS(STATUS_SCREEN_FAN_TEXT_Y - 7, STATUS_SCREEN_FAN_TEXT_Y)) {
         // Fan
-        const uint16_t per = (((uint16_t)fan_speed[0] + 1) * 100) / 256;
+        const int per = ((int(fan_speed[0]) + 1) * 100) / 256;
         if (per) {
           lcd_moveto(STATUS_SCREEN_FAN_TEXT_X, STATUS_SCREEN_FAN_TEXT_Y);
           lcd_put_u8str(itostr3(per));

commit b780b69c62b64c7298531255345a28701ffdd47b
Author: N95JPL <37276225+N95JPL@users.noreply.github.com>
Date:   Wed Oct 31 03:39:44 2018 +0000

    Use font ascent and descent for line positioning (#12224)

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
index 65408c6ab8..52e6f96a8c 100644
--- a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -45,7 +45,7 @@
 
 FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t x, const uint8_t y) {
   const char * const str = itostr3(temp);
-  lcd_moveto(x - (str[0] != ' ' ? 0 : str[1] != ' ' ? 1 : 2) * DOG_CHAR_WIDTH / 2, y);
+  lcd_moveto(x - (str[0] != ' ' ? 0 : str[1] != ' ' ? 1 : 2) * MENU_FONT_WIDTH / 2, y);
   lcd_put_u8str(str);
   lcd_put_u8str_P(PSTR(LCD_STR_DEGREE " "));
 }
@@ -178,7 +178,7 @@ FORCE_INLINE void lcd_implementation_status_message(const bool blink) {
           lcd_put_wchar('.');
           if (--chars) {
             // Print a second copy of the message
-            lcd_put_u8str_max(lcd_status_message, LCD_PIXEL_WIDTH - ((rlen+2) * DOG_CHAR_WIDTH));
+            lcd_put_u8str_max(lcd_status_message, LCD_PIXEL_WIDTH - ((rlen+2) * MENU_FONT_WIDTH));
           }
         }
       }
@@ -356,9 +356,9 @@ void lcd_impl_status_screen_0() {
     //
 
     #if DISABLED(DOGM_SD_PERCENT)
-      #define SD_DURATION_X (PROGRESS_BAR_X + (PROGRESS_BAR_WIDTH / 2) - len * (DOG_CHAR_WIDTH / 2))
+      #define SD_DURATION_X (PROGRESS_BAR_X + (PROGRESS_BAR_WIDTH / 2) - len * (MENU_FONT_WIDTH / 2))
     #else
-      #define SD_DURATION_X (LCD_PIXEL_WIDTH - len * DOG_CHAR_WIDTH)
+      #define SD_DURATION_X (LCD_PIXEL_WIDTH - len * MENU_FONT_WIDTH)
     #endif
 
     if (PAGE_CONTAINS(41, 48)) {
@@ -376,7 +376,7 @@ void lcd_impl_status_screen_0() {
   // XYZ Coordinates
   //
 
-  #define XYZ_BASELINE (30 + INFO_FONT_HEIGHT)
+  #define XYZ_BASELINE (30 + INFO_FONT_ASCENT)
 
   #define X_LABEL_POS  3
   #define X_VALUE_POS 11
@@ -384,10 +384,10 @@ void lcd_impl_status_screen_0() {
 
   #if ENABLED(XYZ_HOLLOW_FRAME)
     #define XYZ_FRAME_TOP 29
-    #define XYZ_FRAME_HEIGHT INFO_FONT_HEIGHT + 3
+    #define XYZ_FRAME_HEIGHT INFO_FONT_ASCENT + 3
   #else
     #define XYZ_FRAME_TOP 30
-    #define XYZ_FRAME_HEIGHT INFO_FONT_HEIGHT + 1
+    #define XYZ_FRAME_HEIGHT INFO_FONT_ASCENT + 1
   #endif
 
   static char xstring[5], ystring[5], zstring[8];
@@ -419,7 +419,7 @@ void lcd_impl_status_screen_0() {
       u8g.drawBox(0, XYZ_FRAME_TOP, LCD_PIXEL_WIDTH, XYZ_FRAME_HEIGHT);   // 8: 30-39  7: 30-37
     #endif
 
-    if (PAGE_CONTAINS(XYZ_BASELINE - (INFO_FONT_HEIGHT - 1), XYZ_BASELINE)) {
+    if (PAGE_CONTAINS(XYZ_BASELINE - (INFO_FONT_ASCENT - 1), XYZ_BASELINE)) {
 
       #if DISABLED(XYZ_HOLLOW_FRAME)
         u8g.setColorIndex(0); // white on black
@@ -449,14 +449,15 @@ void lcd_impl_status_screen_0() {
   //
   // Feedrate
   //
+  #define EXTRAS_BASELINE 50
 
-  if (PAGE_CONTAINS(51 - INFO_FONT_HEIGHT, 49)) {
+  if (PAGE_CONTAINS(EXTRAS_BASELINE - (INFO_FONT_HEIGHT - 1), EXTRAS_BASELINE)) {
     lcd_setFont(FONT_MENU);
-    lcd_moveto(3, 50);
+    lcd_moveto(3, EXTRAS_BASELINE);
     lcd_put_wchar(LCD_STR_FEEDRATE[0]);
 
     lcd_setFont(FONT_STATUSMENU);
-    lcd_moveto(12, 50);
+    lcd_moveto(12, EXTRAS_BASELINE);
     lcd_put_u8str(itostr3(feedrate_percentage));
     lcd_put_wchar('%');
 
@@ -464,15 +465,15 @@ void lcd_impl_status_screen_0() {
     // Filament sensor display if SD is disabled
     //
     #if ENABLED(FILAMENT_LCD_DISPLAY) && DISABLED(SDSUPPORT)
-      lcd_moveto(56, 50);
+      lcd_moveto(56, EXTRAS_BASELINE);
       lcd_put_u8str(wstring);
-      lcd_moveto(102, 50);
+      lcd_moveto(102, EXTRAS_BASELINE);
       lcd_put_u8str(mstring);
       lcd_put_wchar('%');
       lcd_setFont(FONT_MENU);
-      lcd_moveto(47, 50);
+      lcd_moveto(47, EXTRAS_BASELINE);
       lcd_put_wchar(LCD_STR_FILAM_DIA[0]); // lcd_put_u8str_P(PSTR(LCD_STR_FILAM_DIA));
-      lcd_moveto(93, 50);
+      lcd_moveto(93, EXTRAS_BASELINE);
       lcd_put_wchar(LCD_STR_FILAM_MUL[0]);
     #endif
   }
@@ -481,9 +482,9 @@ void lcd_impl_status_screen_0() {
   // Status line
   //
 
-  #define STATUS_BASELINE (55 + INFO_FONT_HEIGHT)
+  #define STATUS_BASELINE (LCD_PIXEL_HEIGHT - INFO_FONT_DESCENT)
 
-  if (PAGE_CONTAINS(STATUS_BASELINE - (INFO_FONT_HEIGHT - 1), STATUS_BASELINE)) {
+  if (PAGE_CONTAINS(STATUS_BASELINE - (INFO_FONT_ASCENT - 1), STATUS_BASELINE)) {
     lcd_moveto(0, STATUS_BASELINE);
 
     #if ENABLED(FILAMENT_LCD_DISPLAY) && ENABLED(SDSUPPORT)

commit a964f098b33300b23ce133bc48438684dae91efe
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Oct 27 22:06:25 2018 -0500

    Make dogm status screen a CPP

diff --git a/Marlin/src/lcd/dogm/status_screen_DOGM.cpp b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
new file mode 100644
index 0000000000..65408c6ab8
--- /dev/null
+++ b/Marlin/src/lcd/dogm/status_screen_DOGM.cpp
@@ -0,0 +1,508 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+//
+// status_screen_DOGM.cpp
+// Standard Status Screen for Graphical Display
+//
+
+#include "../../inc/MarlinConfigPre.h"
+
+#if HAS_GRAPHICAL_LCD && DISABLED(LIGHTWEIGHT_UI)
+
+#include "dogm_Statusscreen.h"
+#include "../ultralcd.h"
+#include "../lcdprint.h"
+#include "../../module/motion.h"
+#include "../../module/temperature.h"
+
+#if ENABLED(SDSUPPORT)
+  #include "../../sd/cardreader.h"
+#endif
+
+#if HAS_PRINT_PROGRESS
+  #include "../../module/printcounter.h"
+#endif
+
+FORCE_INLINE void _draw_centered_temp(const int16_t temp, const uint8_t x, const uint8_t y) {
+  const char * const str = itostr3(temp);
+  lcd_moveto(x - (str[0] != ' ' ? 0 : str[1] != ' ' ? 1 : 2) * DOG_CHAR_WIDTH / 2, y);
+  lcd_put_u8str(str);
+  lcd_put_u8str_P(PSTR(LCD_STR_DEGREE " "));
+}
+
+#ifndef HEAT_INDICATOR_X
+  #define HEAT_INDICATOR_X 8
+#endif
+
+FORCE_INLINE void _draw_heater_status(const uint8_t x, const int8_t heater, const bool blink) {
+  #if !HEATER_IDLE_HANDLER
+    UNUSED(blink);
+  #endif
+
+  #if HAS_HEATED_BED
+    const bool isBed = heater < 0;
+  #else
+    constexpr bool isBed = false;
+  #endif
+
+  if (PAGE_UNDER(7)) {
+    #if HEATER_IDLE_HANDLER
+      const bool is_idle = (
+        #if HAS_HEATED_BED
+          isBed ? thermalManager.is_bed_idle() :
+        #endif
+        thermalManager.is_heater_idle(heater)
+      );
+
+      if (blink || !is_idle)
+    #endif
+        _draw_centered_temp(0.5 + (
+            #if HAS_HEATED_BED
+              isBed ? thermalManager.degTargetBed() :
+            #endif
+            thermalManager.degTargetHotend(heater)
+          ), x, 7
+        );
+  }
+
+  if (PAGE_CONTAINS(21, 28)) {
+    _draw_centered_temp(0.5f + (
+        #if HAS_HEATED_BED
+          isBed ? thermalManager.degBed() :
+        #endif
+        thermalManager.degHotend(heater)
+      ), x, 28
+    );
+
+    if (PAGE_CONTAINS(17, 20)) {
+      const uint8_t h = isBed ? 7 : HEAT_INDICATOR_X,
+                    y = isBed ? 18 : 17;
+      if (
+        #if HAS_HEATED_BED
+          isBed ? thermalManager.isHeatingBed() :
+        #endif
+        thermalManager.isHeatingHotend(heater)
+      ) {
+        u8g.setColorIndex(0); // white on black
+        u8g.drawBox(x + h, y, 2, 2);
+        u8g.setColorIndex(1); // black on white
+      }
+      else
+        u8g.drawBox(x + h, y, 2, 2);
+    }
+  }
+}
+
+//
+// Before homing, blink '123' <-> '???'.
+// Homed but unknown... '123' <-> '   '.
+// Homed and known, display constantly.
+//
+FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const bool blink) {
+  if (blink)
+    lcd_put_u8str(value);
+  else {
+    if (!TEST(axis_homed, axis))
+      while (const char c = *value++) lcd_put_wchar(c <= '.' ? c : '?');
+    else {
+      #if DISABLED(HOME_AFTER_DEACTIVATE) && DISABLED(DISABLE_REDUCED_ACCURACY_WARNING)
+        if (!TEST(axis_known_position, axis))
+          lcd_put_u8str_P(axis == Z_AXIS ? PSTR("      ") : PSTR("    "));
+        else
+      #endif
+          lcd_put_u8str(value);
+    }
+  }
+}
+
+FORCE_INLINE void lcd_implementation_status_message(const bool blink) {
+  #if ENABLED(STATUS_MESSAGE_SCROLLING)
+    static bool last_blink = false;
+
+    // Get the UTF8 character count of the string
+    uint8_t slen = utf8_strlen(lcd_status_message);
+
+    // If the string fits into the LCD, just print it and do not scroll it
+    if (slen <= LCD_WIDTH) {
+
+      // The string isn't scrolling and may not fill the screen
+      lcd_put_u8str(lcd_status_message);
+
+      // Fill the rest with spaces
+      while (slen < LCD_WIDTH) {
+        lcd_put_wchar(' ');
+        ++slen;
+      }
+    }
+    else {
+      // String is larger than the available space in screen.
+
+      // Get a pointer to the next valid UTF8 character
+      const char *stat = lcd_status_message + status_scroll_offset;
+
+      // Get the string remaining length
+      const uint8_t rlen = utf8_strlen(stat);
+
+      // If we have enough characters to display
+      if (rlen >= LCD_WIDTH) {
+        // The remaining string fills the screen - Print it
+        lcd_put_u8str_max(stat, LCD_PIXEL_WIDTH);
+      }
+      else {
+        // The remaining string does not completely fill the screen
+        lcd_put_u8str_max(stat, LCD_PIXEL_WIDTH);         // The string leaves space
+        uint8_t chars = LCD_WIDTH - rlen;                 // Amount of space left in characters
+
+        lcd_put_wchar('.');                               // Always at 1+ spaces left, draw a dot
+        if (--chars) {                                    // Draw a second dot if there's space
+          lcd_put_wchar('.');
+          if (--chars) {
+            // Print a second copy of the message
+            lcd_put_u8str_max(lcd_status_message, LCD_PIXEL_WIDTH - ((rlen+2) * DOG_CHAR_WIDTH));
+          }
+        }
+      }
+      if (last_blink != blink) {
+        last_blink = blink;
+
+        // Adjust by complete UTF8 characters
+        if (status_scroll_offset < slen) {
+          status_scroll_offset++;
+          while (!START_OF_UTF8_CHAR(lcd_status_message[status_scroll_offset]))
+            status_scroll_offset++;
+        }
+        else
+          status_scroll_offset = 0;
+      }
+    }
+  #else
+    UNUSED(blink);
+
+    // Get the UTF8 character count of the string
+    uint8_t slen = utf8_strlen(lcd_status_message);
+
+    // Just print the string to the LCD
+    lcd_put_u8str_max(lcd_status_message, LCD_PIXEL_WIDTH);
+
+    // Fill the rest with spaces if there are missing spaces
+    while (slen < LCD_WIDTH) {
+      lcd_put_wchar(' ');
+      ++slen;
+    }
+  #endif
+}
+
+// The current graphical page being rendered
+u8g_page_t &page = ((u8g_pb_t *)((u8g.getU8g())->dev->dev_mem))->p;
+
+void lcd_impl_status_screen_0() {
+
+  const bool blink = lcd_blink();
+
+  // Status Menu Font
+  lcd_setFont(FONT_STATUSMENU);
+
+  //
+  // Fan Animation
+  //
+  // Draw the entire heading image bitmap rather than each element
+  // separately. This is an optimization because it's slower to draw
+  // multiple elements than a single bitmap.
+  //
+  // The bitmap:
+  //  - May be offset in X
+  //  - Includes all nozzle(s), bed(s), and the fan.
+  //
+  // TODO:
+  //
+  //  - Only draw the whole header on the first
+  //    entry to the status screen. Nozzle, bed, and
+  //    fan outline bits don't change.
+  //
+  #if FAN_ANIM_FRAMES > 2
+    static bool old_blink;
+    static uint8_t fan_frame;
+    if (old_blink != blink) {
+      old_blink = blink;
+      if (!fan_speed[0] || ++fan_frame >= FAN_ANIM_FRAMES) fan_frame = 0;
+    }
+  #endif
+
+  if (PAGE_UNDER(STATUS_SCREENHEIGHT + 1))
+    u8g.drawBitmapP(
+      STATUS_SCREEN_X, STATUS_SCREEN_Y,
+      (STATUS_SCREENWIDTH + 7) / 8, STATUS_SCREENHEIGHT,
+      #if HAS_FAN0
+        #if FAN_ANIM_FRAMES > 2
+          fan_frame == 1 ? status_screen1_bmp :
+          fan_frame == 2 ? status_screen2_bmp :
+          #if FAN_ANIM_FRAMES > 3
+            fan_frame == 3 ? status_screen3_bmp :
+          #endif
+        #else
+          blink && fan_speed[0] ? status_screen1_bmp :
+        #endif
+      #endif
+      status_screen0_bmp
+    );
+
+  //
+  // Temperature Graphics and Info
+  //
+
+  if (PAGE_UNDER(28)) {
+    // Extruders
+    HOTEND_LOOP() _draw_heater_status(STATUS_SCREEN_HOTEND_TEXT_X(e), e, blink);
+
+    // Heated bed
+    #if HOTENDS < 4 && HAS_HEATED_BED
+      _draw_heater_status(STATUS_SCREEN_BED_TEXT_X, -1, blink);
+    #endif
+
+    #if HAS_FAN0
+      if (PAGE_CONTAINS(STATUS_SCREEN_FAN_TEXT_Y - 7, STATUS_SCREEN_FAN_TEXT_Y)) {
+        // Fan
+        const uint16_t per = (((uint16_t)fan_speed[0] + 1) * 100) / 256;
+        if (per) {
+          lcd_moveto(STATUS_SCREEN_FAN_TEXT_X, STATUS_SCREEN_FAN_TEXT_Y);
+          lcd_put_u8str(itostr3(per));
+          lcd_put_wchar('%');
+        }
+      }
+    #endif
+  }
+
+  #if ENABLED(SDSUPPORT)
+    //
+    // SD Card Symbol
+    //
+    if (card.isFileOpen() && PAGE_CONTAINS(42, 51)) {
+      // Upper box
+      u8g.drawBox(42, 42, 8, 7);     // 42-48 (or 41-47)
+      // Right edge
+      u8g.drawBox(50, 44, 2, 5);     // 44-48 (or 43-47)
+      // Bottom hollow box
+      u8g.drawFrame(42, 49, 10, 4);  // 49-52 (or 48-51)
+      // Corner pixel
+      u8g.drawPixel(50, 43);         // 43 (or 42)
+    }
+  #endif // SDSUPPORT
+
+  #if HAS_PRINT_PROGRESS
+    //
+    // Progress bar frame
+    //
+    #define PROGRESS_BAR_X 54
+    #define PROGRESS_BAR_WIDTH (LCD_PIXEL_WIDTH - PROGRESS_BAR_X)
+
+    if (PAGE_CONTAINS(49, 52))       // 49-52 (or 49-51)
+      u8g.drawFrame(
+        PROGRESS_BAR_X, 49,
+        PROGRESS_BAR_WIDTH, 4
+      );
+
+    #if DISABLED(LCD_SET_PROGRESS_MANUALLY)
+      const uint8_t progress_bar_percent = card.percentDone();
+    #endif
+
+    if (progress_bar_percent > 1) {
+
+      //
+      // Progress bar solid part
+      //
+
+      if (PAGE_CONTAINS(50, 51))     // 50-51 (or just 50)
+        u8g.drawBox(
+          PROGRESS_BAR_X + 1, 50,
+          (uint16_t)((PROGRESS_BAR_WIDTH - 2) * progress_bar_percent * 0.01), 2
+        );
+
+      //
+      // SD Percent Complete
+      //
+
+      #if ENABLED(DOGM_SD_PERCENT)
+        if (PAGE_CONTAINS(41, 48)) {
+          // Percent complete
+          lcd_moveto(55, 48);
+          lcd_put_u8str(itostr3(progress_bar_percent));
+          lcd_put_wchar('%');
+        }
+      #endif
+    }
+
+    //
+    // Elapsed Time
+    //
+
+    #if DISABLED(DOGM_SD_PERCENT)
+      #define SD_DURATION_X (PROGRESS_BAR_X + (PROGRESS_BAR_WIDTH / 2) - len * (DOG_CHAR_WIDTH / 2))
+    #else
+      #define SD_DURATION_X (LCD_PIXEL_WIDTH - len * DOG_CHAR_WIDTH)
+    #endif
+
+    if (PAGE_CONTAINS(41, 48)) {
+      char buffer[10];
+      duration_t elapsed = print_job_timer.duration();
+      bool has_days = (elapsed.value >= 60*60*24L);
+      uint8_t len = elapsed.toDigital(buffer, has_days);
+      lcd_moveto(SD_DURATION_X, 48);
+      lcd_put_u8str(buffer);
+    }
+
+  #endif // HAS_PRINT_PROGRESS
+
+  //
+  // XYZ Coordinates
+  //
+
+  #define XYZ_BASELINE (30 + INFO_FONT_HEIGHT)
+
+  #define X_LABEL_POS  3
+  #define X_VALUE_POS 11
+  #define XYZ_SPACING 40
+
+  #if ENABLED(XYZ_HOLLOW_FRAME)
+    #define XYZ_FRAME_TOP 29
+    #define XYZ_FRAME_HEIGHT INFO_FONT_HEIGHT + 3
+  #else
+    #define XYZ_FRAME_TOP 30
+    #define XYZ_FRAME_HEIGHT INFO_FONT_HEIGHT + 1
+  #endif
+
+  static char xstring[5], ystring[5], zstring[8];
+  #if ENABLED(FILAMENT_LCD_DISPLAY)
+    static char wstring[5], mstring[4];
+  #endif
+
+  // At the first page, regenerate the XYZ strings
+  if (page.page == 0) {
+    strcpy(xstring, ftostr4sign(LOGICAL_X_POSITION(current_position[X_AXIS])));
+    strcpy(ystring, ftostr4sign(LOGICAL_Y_POSITION(current_position[Y_AXIS])));
+    strcpy(zstring, ftostr52sp(LOGICAL_Z_POSITION(current_position[Z_AXIS])));
+    #if ENABLED(FILAMENT_LCD_DISPLAY)
+      strcpy(wstring, ftostr12ns(filament_width_meas));
+      strcpy(mstring, itostr3(100.0 * (
+          parser.volumetric_enabled
+            ? planner.volumetric_area_nominal / planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
+            : planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
+        )
+      ));
+    #endif
+  }
+
+  if (PAGE_CONTAINS(XYZ_FRAME_TOP, XYZ_FRAME_TOP + XYZ_FRAME_HEIGHT - 1)) {
+
+    #if ENABLED(XYZ_HOLLOW_FRAME)
+      u8g.drawFrame(0, XYZ_FRAME_TOP, LCD_PIXEL_WIDTH, XYZ_FRAME_HEIGHT); // 8: 29-40  7: 29-39
+    #else
+      u8g.drawBox(0, XYZ_FRAME_TOP, LCD_PIXEL_WIDTH, XYZ_FRAME_HEIGHT);   // 8: 30-39  7: 30-37
+    #endif
+
+    if (PAGE_CONTAINS(XYZ_BASELINE - (INFO_FONT_HEIGHT - 1), XYZ_BASELINE)) {
+
+      #if DISABLED(XYZ_HOLLOW_FRAME)
+        u8g.setColorIndex(0); // white on black
+      #endif
+
+      lcd_moveto(0 * XYZ_SPACING + X_LABEL_POS, XYZ_BASELINE);
+      lcd_put_wchar('X');
+      lcd_moveto(0 * XYZ_SPACING + X_VALUE_POS, XYZ_BASELINE);
+      _draw_axis_value(X_AXIS, xstring, blink);
+
+      lcd_moveto(1 * XYZ_SPACING + X_LABEL_POS, XYZ_BASELINE);
+      lcd_put_wchar('Y');
+      lcd_moveto(1 * XYZ_SPACING + X_VALUE_POS, XYZ_BASELINE);
+      _draw_axis_value(Y_AXIS, ystring, blink);
+
+      lcd_moveto(2 * XYZ_SPACING + X_LABEL_POS, XYZ_BASELINE);
+      lcd_put_wchar('Z');
+      lcd_moveto(2 * XYZ_SPACING + X_VALUE_POS, XYZ_BASELINE);
+      _draw_axis_value(Z_AXIS, zstring, blink);
+
+      #if DISABLED(XYZ_HOLLOW_FRAME)
+        u8g.setColorIndex(1); // black on white
+      #endif
+    }
+  }
+
+  //
+  // Feedrate
+  //
+
+  if (PAGE_CONTAINS(51 - INFO_FONT_HEIGHT, 49)) {
+    lcd_setFont(FONT_MENU);
+    lcd_moveto(3, 50);
+    lcd_put_wchar(LCD_STR_FEEDRATE[0]);
+
+    lcd_setFont(FONT_STATUSMENU);
+    lcd_moveto(12, 50);
+    lcd_put_u8str(itostr3(feedrate_percentage));
+    lcd_put_wchar('%');
+
+    //
+    // Filament sensor display if SD is disabled
+    //
+    #if ENABLED(FILAMENT_LCD_DISPLAY) && DISABLED(SDSUPPORT)
+      lcd_moveto(56, 50);
+      lcd_put_u8str(wstring);
+      lcd_moveto(102, 50);
+      lcd_put_u8str(mstring);
+      lcd_put_wchar('%');
+      lcd_setFont(FONT_MENU);
+      lcd_moveto(47, 50);
+      lcd_put_wchar(LCD_STR_FILAM_DIA[0]); // lcd_put_u8str_P(PSTR(LCD_STR_FILAM_DIA));
+      lcd_moveto(93, 50);
+      lcd_put_wchar(LCD_STR_FILAM_MUL[0]);
+    #endif
+  }
+
+  //
+  // Status line
+  //
+
+  #define STATUS_BASELINE (55 + INFO_FONT_HEIGHT)
+
+  if (PAGE_CONTAINS(STATUS_BASELINE - (INFO_FONT_HEIGHT - 1), STATUS_BASELINE)) {
+    lcd_moveto(0, STATUS_BASELINE);
+
+    #if ENABLED(FILAMENT_LCD_DISPLAY) && ENABLED(SDSUPPORT)
+      if (PENDING(millis(), previous_lcd_status_ms + 5000UL)) {  //Display both Status message line and Filament display on the last line
+        lcd_implementation_status_message(blink);
+      }
+      else {
+        lcd_put_u8str_P(PSTR(LCD_STR_FILAM_DIA));
+        lcd_put_wchar(':');
+        lcd_put_u8str(wstring);
+        lcd_put_u8str_P(PSTR("  " LCD_STR_FILAM_MUL));
+        lcd_put_wchar(':');
+        lcd_put_u8str(mstring);
+        lcd_put_wchar('%');
+      }
+    #else
+      lcd_implementation_status_message(blink);
+    #endif
+  }
+}
+
+#endif // HAS_GRAPHICAL_LCD && !LIGHTWEIGHT_UI
