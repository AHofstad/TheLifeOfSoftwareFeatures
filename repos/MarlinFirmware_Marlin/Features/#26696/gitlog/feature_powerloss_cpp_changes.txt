commit 9a6d4b5e56e8dd6c2dda4a7c510b4ed34d19835c
Author: Ben <92957639+buppgard@users.noreply.github.com>
Date:   Tue Jun 25 23:34:33 2024 -0400

    üö∏ PLR: Add FR and Flow (#27201)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 1867aba6ed..cd5fc13dda 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -205,6 +205,9 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
     // info.sdpos and info.current_position are pre-filled from the Stepper ISR
 
     info.feedrate = uint16_t(MMS_TO_MMM(feedrate_mm_s));
+    info.feedrate_percentage = feedrate_percentage;
+    COPY(info.flow_percentage, planner.flow_percentage);
+
     info.zraise = zraise;
     info.flag.raised = raised;                      // Was Z raised before power-off?
 
@@ -216,7 +219,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
     #if DISABLED(NO_VOLUMETRICS)
       info.flag.volumetric_enabled = parser.volumetric_enabled;
       #if HAS_MULTI_EXTRUDER
-        EXTRUDER_LOOP() info.filament_size[e] = planner.filament_size[e];
+        COPY(info.filament_size, planner.filament_size);
       #else
         if (parser.volumetric_enabled) info.filament_size[0] = planner.filament_size[active_extruder];
       #endif
@@ -269,7 +272,10 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
 
         #if POWER_LOSS_RETRACT_LEN
           // Retract filament now
-          gcode.process_subcommands_now(F("G1 F3000 E-" STRINGIFY(POWER_LOSS_RETRACT_LEN)));
+          const uint16_t old_flow = planner.flow_percentage[active_extruder];
+          planner.set_flow(active_extruder, 100);
+          gcode.process_subcommands_now(F("G1F3000E-" STRINGIFY(POWER_LOSS_RETRACT_LEN)));
+          planner.set_flow(active_extruder, old_flow);
         #endif
 
         #if POWER_LOSS_ZRAISE
@@ -555,8 +561,12 @@ void PrintJobRecovery::resume() {
   // Move back down to the saved Z for printing
   PROCESS_SUBCOMMANDS_NOW(TS(F("G1F600Z"), p_float_t(z_print, 3)));
 
-  // Restore the feedrate
+  // Restore the feedrate and percentage
   PROCESS_SUBCOMMANDS_NOW(TS(F("G1F"), info.feedrate));
+  feedrate_percentage = info.feedrate_percentage;
+
+  // Flowrate percentage
+  EXTRUDER_LOOP() planner.set_flow(e, info.flow_percentage[e]);
 
   // Restore E position with G92.9
   PROCESS_SUBCOMMANDS_NOW(TS(F("G92.9E"), p_float_t(resume_pos.e, 3)));
@@ -589,7 +599,8 @@ void PrintJobRecovery::resume() {
         }
         DEBUG_EOL();
 
-        DEBUG_ECHOLNPGM("feedrate: ", info.feedrate);
+        DEBUG_ECHOLN(F("feedrate: "), info.feedrate, F(" x "), info.feedrate_percentage, '%');
+        EXTRUDER_LOOP() DEBUG_ECHOLN('E', e + 1, F(" flow %: "), info.flow_percentage[e]);
 
         DEBUG_ECHOLNPGM("zraise: ", info.zraise, " ", info.flag.raised ? "(before)" : "");
 

commit 87e94f456348e944ba4487aed436c762dd718966
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon Apr 1 16:05:11 2024 -0400

    üö∏ Update ProUI Plot graph - part 2 (#26563)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 70fac66fce..1867aba6ed 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -48,8 +48,8 @@ uint8_t PrintJobRecovery::queue_index_r;
 uint32_t PrintJobRecovery::cmd_sdpos, // = 0
          PrintJobRecovery::sdpos[BUFSIZE];
 
-#if HAS_DWIN_E3V2_BASIC
-  bool PrintJobRecovery::dwin_flag; // = false
+#if HAS_PLR_UI_FLAG
+  bool PrintJobRecovery::ui_flag_resume; // = false
 #endif
 
 #include "../sd/cardreader.h"

commit 97546bf55b20f10fa8952efbd232481e11e9f916
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Thu Jan 25 09:33:02 2024 +1300

    üö∏ PLR recover chamber temp (#26696)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 495f789f04..70fac66fce 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -228,6 +228,8 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
 
     TERN_(HAS_HEATED_BED, info.target_temperature_bed = thermalManager.degTargetBed());
 
+    TERN_(HAS_HEATED_CHAMBER, info.target_temperature_chamber = thermalManager.degTargetChamber());
+
     TERN_(HAS_FAN, COPY(info.fan_speed, thermalManager.fan_speed));
 
     #if HAS_LEVELING
@@ -383,6 +385,12 @@ void PrintJobRecovery::resume() {
     PROCESS_SUBCOMMANDS_NOW(F("M420S0"));
   #endif
 
+  #if HAS_HEATED_CHAMBER
+    // Restore the chamber temperature
+    const celsius_t ct = info.target_temperature_chamber;
+    if (ct) PROCESS_SUBCOMMANDS_NOW(TS(F("M191S"), ct));
+  #endif
+
   #if HAS_HEATED_BED
     // Restore the bed temperature
     const celsius_t bt = info.target_temperature_bed;
@@ -633,6 +641,10 @@ void PrintJobRecovery::resume() {
           DEBUG_ECHOLNPGM("target_temperature_bed: ", info.target_temperature_bed);
         #endif
 
+        #if HAS_HEATED_CHAMBER
+          DEBUG_ECHOLNPGM("target_temperature_chamber: ", info.target_temperature_chamber);
+        #endif
+
         #if HAS_FAN
           DEBUG_ECHOPGM("fan_speed: ");
           FANS_LOOP(i) {

commit ed1391ee5d5c272240b8fe18716c340d7688cb8e
Author: Vovodroid <vovodroid@users.noreply.github.com>
Date:   Wed Jan 24 22:21:00 2024 +0200

    üîß Wrap POWER_LOSS_RETRACT_LEN (#26695)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 7c90bb684a..495f789f04 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -75,16 +75,15 @@ uint32_t PrintJobRecovery::cmd_sdpos, // = 0
 
 PrintJobRecovery recovery;
 
-#ifndef POWER_LOSS_PURGE_LEN
-  #define POWER_LOSS_PURGE_LEN 0
-#endif
-
 #if DISABLED(BACKUP_POWER_SUPPLY)
   #undef POWER_LOSS_RETRACT_LEN   // No retract at outage without backup power
 #endif
 #ifndef POWER_LOSS_RETRACT_LEN
   #define POWER_LOSS_RETRACT_LEN 0
 #endif
+#ifndef POWER_LOSS_PURGE_LEN
+  #define POWER_LOSS_PURGE_LEN 0
+#endif
 
 // Allow power-loss recovery to be aborted
 #define PLR_CAN_ABORT

commit ab3497161a37ae309e030a23e0f8e3f3eb61daea
Author: ThomasToka <117008525+ThomasToka@users.noreply.github.com>
Date:   Fri Jan 12 06:56:45 2024 +0100

    üêõ Fix PLR pos/sdpos (#26365)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index ce34b3a95c..7c90bb684a 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -358,7 +358,9 @@ void PrintJobRecovery::write() {
  * Resume the saved print job
  */
 void PrintJobRecovery::resume() {
-  const uint32_t resume_sdpos = info.sdpos; // Get here before the stepper ISR overwrites it
+  // Get these fields before any moves because stepper.cpp overwrites them
+  const xyze_pos_t resume_pos = info.current_position;
+  const uint32_t resume_sdpos = info.sdpos;
 
   // Apply the dry-run flag if enabled
   if (info.flag.dryrun) marlin_debug_flags |= MARLIN_DEBUG_DRYRUN;
@@ -400,7 +402,7 @@ void PrintJobRecovery::resume() {
   #endif
 
   // Interpret the saved Z according to flags
-  const float z_print = info.current_position.z,
+  const float z_print = resume_pos.z,
               z_raised = z_print + info.zraise;
 
   //
@@ -540,7 +542,7 @@ void PrintJobRecovery::resume() {
 
   // Move back over to the saved XY
   PROCESS_SUBCOMMANDS_NOW(TS(
-    F("G1F3000X"), p_float_t(info.current_position.x, 3), 'Y', p_float_t(info.current_position.y, 3)
+    F("G1F3000X"), p_float_t(resume_pos.x, 3), 'Y', p_float_t(resume_pos.y, 3)
   ));
 
   // Move back down to the saved Z for printing
@@ -550,7 +552,7 @@ void PrintJobRecovery::resume() {
   PROCESS_SUBCOMMANDS_NOW(TS(F("G1F"), info.feedrate));
 
   // Restore E position with G92.9
-  PROCESS_SUBCOMMANDS_NOW(TS(F("G92.9E"), p_float_t(info.current_position.e, 3)));
+  PROCESS_SUBCOMMANDS_NOW(TS(F("G92.9E"), p_float_t(resume_pos.e, 3)));
 
   TERN_(GCODE_REPEAT_MARKERS, repeat = info.stored_repeat);
   TERN_(HAS_HOME_OFFSET, home_offset = info.home_offset);

commit 1d46e67de202ae436958c344506f14d2da975076
Author: Vovodroid <vovodroid@users.noreply.github.com>
Date:   Wed Jan 10 07:13:10 2024 +0200

    ‚ú® PLR_BED_THRESHOLD (#26649)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 5a25710084..ce34b3a95c 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -37,6 +37,10 @@
 
 bool PrintJobRecovery::enabled; // Initialized by settings.load()
 
+#if HAS_PLR_BED_THRESHOLD
+  celsius_t PrintJobRecovery::bed_temp_threshold; // Initialized by settings.load()
+#endif
+
 MediaFile PrintJobRecovery::file;
 job_recovery_info_t PrintJobRecovery::info;
 const char PrintJobRecovery::filename[5] = "/PLR";

commit 7c8ea8e0e06451804cfadb349d732ab4a2949396
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sun Nov 12 15:02:53 2023 +1300

    üßë‚Äçüíª Fix M808 debug (#26367)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 75ac03f00c..5a25710084 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -581,9 +581,10 @@ void PrintJobRecovery::resume() {
         DEBUG_ECHOLNPGM("zraise: ", info.zraise, " ", info.flag.raised ? "(before)" : "");
 
         #if ENABLED(GCODE_REPEAT_MARKERS)
-          DEBUG_ECHOLNPGM("repeat index: ", info.stored_repeat.index);
-          for (uint8_t i = 0; i < info.stored_repeat.index; ++i)
-            DEBUG_ECHOLNPGM("..... sdpos: ", info.stored_repeat.marker.sdpos, " count: ", info.stored_repeat.marker.counter);
+          const uint8_t ind = info.stored_repeat.count();
+          DEBUG_ECHOLNPGM("repeat markers: ", ind);
+          for (uint8_t i = ind; i--;)
+            DEBUG_ECHOLNPGM("...", i, " sdpos: ", info.stored_repeat.get_marker_sdpos(i), " count: ", info.stored_repeat.get_marker_counter(i));
         #endif
 
         #if HAS_HOME_OFFSET

commit e9b04ada1d2f14f124a0d449205deda8c372340b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Oct 23 18:51:34 2023 -0500

    ü©π Fix PLR debug with NO_VOLUMETRICS

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 7fb60349c6..75ac03f00c 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -219,15 +219,13 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
       #endif
     #endif
 
-    #if HAS_EXTRUDERS
+    #if HAS_HOTEND
       HOTEND_LOOP() info.target_temperature[e] = thermalManager.degTargetHotend(e);
     #endif
 
     TERN_(HAS_HEATED_BED, info.target_temperature_bed = thermalManager.degTargetBed());
 
-    #if HAS_FAN
-      COPY(info.fan_speed, thermalManager.fan_speed);
-    #endif
+    TERN_(HAS_FAN, COPY(info.fan_speed, thermalManager.fan_speed));
 
     #if HAS_LEVELING
       info.flag.leveling = planner.leveling_active;
@@ -672,7 +670,9 @@ void PrintJobRecovery::resume() {
 
         DEBUG_ECHOLNPGM("flag.dryrun: ", AS_DIGIT(info.flag.dryrun));
         DEBUG_ECHOLNPGM("flag.allow_cold_extrusion: ", AS_DIGIT(info.flag.allow_cold_extrusion));
-        DEBUG_ECHOLNPGM("flag.volumetric_enabled: ", AS_DIGIT(info.flag.volumetric_enabled));
+        #if DISABLED(NO_VOLUMETRICS)
+          DEBUG_ECHOLNPGM("flag.volumetric_enabled: ", AS_DIGIT(info.flag.volumetric_enabled));
+        #endif
       }
       else
         DEBUG_ECHOLNPGM("INVALID DATA");

commit 9135e3f7d3fd0d634656f1c54c70a0ba1f878bfd
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jul 20 21:10:03 2023 -0500

    üö∏ Revert M206 Home Offset behavior (#25996)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 7c49aee247..7fb60349c6 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -207,7 +207,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
 
     TERN_(GCODE_REPEAT_MARKERS, info.stored_repeat = repeat);
     TERN_(HAS_HOME_OFFSET, info.home_offset = home_offset);
-    TERN_(HAS_POSITION_SHIFT, info.position_shift = position_shift);
+    TERN_(HAS_WORKSPACE_OFFSET, info.workspace_offset = workspace_offset);
     E_TERN_(info.active_extruder = active_extruder);
 
     #if DISABLED(NO_VOLUMETRICS)
@@ -552,10 +552,7 @@ void PrintJobRecovery::resume() {
 
   TERN_(GCODE_REPEAT_MARKERS, repeat = info.stored_repeat);
   TERN_(HAS_HOME_OFFSET, home_offset = info.home_offset);
-  TERN_(HAS_POSITION_SHIFT, position_shift = info.position_shift);
-  #if HAS_HOME_OFFSET || HAS_POSITION_SHIFT
-    LOOP_NUM_AXES(i) update_workspace_offset((AxisEnum)i);
-  #endif
+  TERN_(HAS_WORKSPACE_OFFSET, workspace_offset = info.workspace_offset);
 
   // Relative axis modes
   gcode.axis_relative = info.axis_relative;
@@ -600,11 +597,11 @@ void PrintJobRecovery::resume() {
           DEBUG_EOL();
         #endif
 
-        #if HAS_POSITION_SHIFT
-          DEBUG_ECHOPGM("position_shift: ");
+        #if HAS_WORKSPACE_OFFSET
+          DEBUG_ECHOPGM("workspace_offset: ");
           LOOP_NUM_AXES(i) {
             if (i) DEBUG_CHAR(',');
-            DEBUG_ECHO(info.position_shift[i]);
+            DEBUG_ECHO(info.workspace_offset[i]);
           }
           DEBUG_EOL();
         #endif

commit 574dd34c49fde76e1e736b8a7e1ea579d724ff22
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jun 27 13:19:36 2023 -0500

    ‚ôªÔ∏è String helper class (#24390)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index a8dfadc1f6..7c49aee247 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -84,11 +84,10 @@ PrintJobRecovery recovery;
 
 // Allow power-loss recovery to be aborted
 #define PLR_CAN_ABORT
-#if ENABLED(PLR_CAN_ABORT)
-  #define PROCESS_SUBCOMMANDS_NOW(cmd) do { if (card.flag.abort_sd_printing) return; gcode.process_subcommands_now(cmd); }while(0)
-#else
-  #define PROCESS_SUBCOMMANDS_NOW(cmd) gcode.process_subcommands_now(cmd)
-#endif
+#define PROCESS_SUBCOMMANDS_NOW(cmd) do{ \
+    if (TERN0(PLR_CAN_ABORT, card.flag.abort_sd_printing)) return; \
+    gcode.process_subcommands_now(cmd); \
+  }while(0)
 
 /**
  * Clear the recovery info
@@ -272,11 +271,8 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
 
         #if POWER_LOSS_ZRAISE
           // Raise the Z axis now
-          if (zraise) {
-            char cmd[20], str_1[16];
-            sprintf_P(cmd, PSTR("G0Z%s"), dtostrf(zraise, 1, 3, str_1));
-            gcode.process_subcommands_now(cmd);
-          }
+          if (zraise)
+            gcode.process_subcommands_now(TS(F("G0Z"), p_float_t(zraise, 3)));
         #else
           UNUSED(zraise);
         #endif
@@ -360,9 +356,6 @@ void PrintJobRecovery::write() {
  * Resume the saved print job
  */
 void PrintJobRecovery::resume() {
-
-  char cmd[MAX_CMD_SIZE+16], str_1[16], str_2[16];
-
   const uint32_t resume_sdpos = info.sdpos; // Get here before the stepper ISR overwrites it
 
   // Apply the dry-run flag if enabled
@@ -388,12 +381,9 @@ void PrintJobRecovery::resume() {
   #endif
 
   #if HAS_HEATED_BED
+    // Restore the bed temperature
     const celsius_t bt = info.target_temperature_bed;
-    if (bt) {
-      // Restore the bed temperature
-      sprintf_P(cmd, PSTR("M190S%i"), bt);
-      PROCESS_SUBCOMMANDS_NOW(cmd);
-    }
+    if (bt) PROCESS_SUBCOMMANDS_NOW(TS(F("M190S"), bt));
   #endif
 
   // Heat hotend enough to soften material
@@ -401,12 +391,8 @@ void PrintJobRecovery::resume() {
     HOTEND_LOOP() {
       const celsius_t et = _MAX(info.target_temperature[e], 180);
       if (et) {
-        #if HAS_MULTI_HOTEND
-          sprintf_P(cmd, PSTR("T%iS"), e);
-          PROCESS_SUBCOMMANDS_NOW(cmd);
-        #endif
-        sprintf_P(cmd, PSTR("M109S%i"), et);
-        PROCESS_SUBCOMMANDS_NOW(cmd);
+        TERN_(HAS_MULTI_HOTEND, PROCESS_SUBCOMMANDS_NOW(TS('T', e, 'S')));
+        PROCESS_SUBCOMMANDS_NOW(TS(F("M109S"), et));
       }
     }
   #endif
@@ -427,11 +413,11 @@ void PrintJobRecovery::resume() {
     float z_now = z_raised;
 
     // If Z homing goes to max then just move back to the "raised" position
-    sprintf_P(cmd, PSTR(
-            "G28R0\n"     // Home all axes (no raise)
-            "G1Z%sF1200"  // Move Z down to (raised) height
-          ), dtostrf(z_now, 1, 3, str_1));
-    PROCESS_SUBCOMMANDS_NOW(cmd);
+    PROCESS_SUBCOMMANDS_NOW(TS(
+      F( "G28R0\n"    // Home all axes (no raise)
+         "G1F1200Z")  // Move Z down to (raised) height
+      , p_float_t(z_now, 3)
+    ));
 
   #elif DISABLED(BELTPRINTER)
 
@@ -443,15 +429,13 @@ void PrintJobRecovery::resume() {
 
     #if !HOMING_Z_DOWN
       // Set Z to the real position
-      sprintf_P(cmd, PSTR("G92.9Z%s"), dtostrf(z_now, 1, 3, str_1));
-      PROCESS_SUBCOMMANDS_NOW(cmd);
+      PROCESS_SUBCOMMANDS_NOW(TS(F("G92.9Z"), p_float_t(z_now, 3)));
     #endif
 
     // Does Z need to be raised now? It should be raised before homing XY.
     if (z_raised > z_now) {
       z_now = z_raised;
-      sprintf_P(cmd, PSTR("G1Z%sF600"), dtostrf(z_now, 1, 3, str_1));
-      PROCESS_SUBCOMMANDS_NOW(cmd);
+      PROCESS_SUBCOMMANDS_NOW(TS(F("G1F600Z"), p_float_t(z_now, 3)));
     }
 
     // Home XY with no Z raise
@@ -462,8 +446,7 @@ void PrintJobRecovery::resume() {
   #if HOMING_Z_DOWN
     // Move to a safe XY position and home Z while avoiding the print.
     const xy_pos_t p = xy_pos_t(POWER_LOSS_ZHOME_POS) TERN_(HOMING_Z_WITH_PROBE, - probe.offset_xy);
-    sprintf_P(cmd, PSTR("G1X%sY%sF1000\nG28HZ"), dtostrf(p.x, 1, 3, str_1), dtostrf(p.y, 1, 3, str_2));
-    PROCESS_SUBCOMMANDS_NOW(cmd);
+    PROCESS_SUBCOMMANDS_NOW(TS(F("G1F1000X"), p_float_t(p.x, 3), 'Y', p_float_t(p.y, 3), F("\nG28HZ")));
   #endif
 
   // Mark all axes as having been homed (no effect on current_position)
@@ -473,39 +456,30 @@ void PrintJobRecovery::resume() {
     // Restore Z fade and possibly re-enable bed leveling compensation.
     // Leveling may already be enabled due to the ENABLE_LEVELING_AFTER_G28 option.
     // TODO: Add a G28 parameter to leave leveling disabled.
-    sprintf_P(cmd, PSTR("M420S%cZ%s"), '0' + (char)info.flag.leveling, dtostrf(info.fade, 1, 1, str_1));
-    PROCESS_SUBCOMMANDS_NOW(cmd);
+    PROCESS_SUBCOMMANDS_NOW(TS(F("M420S"), '0' + (char)info.flag.leveling, 'Z', p_float_t(info.fade, 1)));
 
     #if !HOMING_Z_DOWN
       // The physical Z was adjusted at power-off so undo the M420S1 correction to Z with G92.9.
-      sprintf_P(cmd, PSTR("G92.9Z%s"), dtostrf(z_now, 1, 1, str_1));
-      PROCESS_SUBCOMMANDS_NOW(cmd);
+      PROCESS_SUBCOMMANDS_NOW(TS(F("G92.9Z"), p_float_t(z_now, 1)));
     #endif
   #endif
 
   #if ENABLED(POWER_LOSS_RECOVER_ZHOME)
     // Z was homed down to the bed, so move up to the raised height.
     z_now = z_raised;
-    sprintf_P(cmd, PSTR("G1Z%sF600"), dtostrf(z_now, 1, 3, str_1));
-    PROCESS_SUBCOMMANDS_NOW(cmd);
+    PROCESS_SUBCOMMANDS_NOW(TS(F("G1F600Z"), p_float_t(z_now, 3)));
   #endif
 
   // Recover volumetric extrusion state
   #if DISABLED(NO_VOLUMETRICS)
     #if HAS_MULTI_EXTRUDER
-      EXTRUDER_LOOP() {
-        sprintf_P(cmd, PSTR("M200T%iD%s"), e, dtostrf(info.filament_size[e], 1, 3, str_1));
-        PROCESS_SUBCOMMANDS_NOW(cmd);
-      }
-      if (!info.flag.volumetric_enabled) {
-        sprintf_P(cmd, PSTR("M200T%iD0"), info.active_extruder);
-        PROCESS_SUBCOMMANDS_NOW(cmd);
-      }
+      EXTRUDER_LOOP()
+        PROCESS_SUBCOMMANDS_NOW(TS(F("M200T"), e, F("D"), p_float_t(info.filament_size[e], 3)));
+      if (!info.flag.volumetric_enabled)
+        PROCESS_SUBCOMMANDS_NOW(TS(F("M200D0T"), info.active_extruder));
     #else
-      if (info.flag.volumetric_enabled) {
-        sprintf_P(cmd, PSTR("M200D%s"), dtostrf(info.filament_size[0], 1, 3, str_1));
-        PROCESS_SUBCOMMANDS_NOW(cmd);
-      }
+      if (info.flag.volumetric_enabled)
+        PROCESS_SUBCOMMANDS_NOW(TS(F("M200D"), p_float_t(info.filament_size[0], 3)));
     #endif
   #endif
 
@@ -514,30 +488,22 @@ void PrintJobRecovery::resume() {
     HOTEND_LOOP() {
       const celsius_t et = info.target_temperature[e];
       if (et) {
-        #if HAS_MULTI_HOTEND
-          sprintf_P(cmd, PSTR("T%iS"), e);
-          PROCESS_SUBCOMMANDS_NOW(cmd);
-        #endif
-        sprintf_P(cmd, PSTR("M109S%i"), et);
-        PROCESS_SUBCOMMANDS_NOW(cmd);
+        TERN_(HAS_MULTI_HOTEND, PROCESS_SUBCOMMANDS_NOW(TS('T', e, 'S')));
+        PROCESS_SUBCOMMANDS_NOW(TS(F("M109S"), et));
       }
     }
   #endif
 
   // Restore the previously active tool (with no_move)
   #if HAS_MULTI_EXTRUDER || HAS_MULTI_HOTEND
-    sprintf_P(cmd, PSTR("T%i S"), info.active_extruder);
-    PROCESS_SUBCOMMANDS_NOW(cmd);
+    PROCESS_SUBCOMMANDS_NOW(TS('T', info.active_extruder, 'S'));
   #endif
 
   // Restore print cooling fan speeds
   #if HAS_FAN
     FANS_LOOP(i) {
       const int f = info.fan_speed[i];
-      if (f) {
-        sprintf_P(cmd, PSTR("M106P%iS%i"), i, f);
-        PROCESS_SUBCOMMANDS_NOW(cmd);
-      }
+      if (f) PROCESS_SUBCOMMANDS_NOW(TS(F("M106P"), i, 'S', f));
     }
   #endif
 
@@ -563,8 +529,7 @@ void PrintJobRecovery::resume() {
 
   // Additional purge on resume if configured
   #if POWER_LOSS_PURGE_LEN
-    sprintf_P(cmd, PSTR("G1F3000E%d"), (POWER_LOSS_PURGE_LEN) + (POWER_LOSS_RETRACT_LEN));
-    PROCESS_SUBCOMMANDS_NOW(cmd);
+    PROCESS_SUBCOMMANDS_NOW(TS(F("G1F3000E"), (POWER_LOSS_PURGE_LEN) + (POWER_LOSS_RETRACT_LEN)));
   #endif
 
   #if ENABLED(NOZZLE_CLEAN_FEATURE)
@@ -572,23 +537,18 @@ void PrintJobRecovery::resume() {
   #endif
 
   // Move back over to the saved XY
-  sprintf_P(cmd, PSTR("G1X%sY%sF3000"),
-    dtostrf(info.current_position.x, 1, 3, str_1),
-    dtostrf(info.current_position.y, 1, 3, str_2)
-  );
-  PROCESS_SUBCOMMANDS_NOW(cmd);
+  PROCESS_SUBCOMMANDS_NOW(TS(
+    F("G1F3000X"), p_float_t(info.current_position.x, 3), 'Y', p_float_t(info.current_position.y, 3)
+  ));
 
   // Move back down to the saved Z for printing
-  sprintf_P(cmd, PSTR("G1Z%sF600"), dtostrf(z_print, 1, 3, str_1));
-  PROCESS_SUBCOMMANDS_NOW(cmd);
+  PROCESS_SUBCOMMANDS_NOW(TS(F("G1F600Z"), p_float_t(z_print, 3)));
 
   // Restore the feedrate
-  sprintf_P(cmd, PSTR("G1F%d"), info.feedrate);
-  PROCESS_SUBCOMMANDS_NOW(cmd);
+  PROCESS_SUBCOMMANDS_NOW(TS(F("G1F"), info.feedrate));
 
   // Restore E position with G92.9
-  sprintf_P(cmd, PSTR("G92.9E%s"), dtostrf(info.current_position.e, 1, 3, str_1));
-  PROCESS_SUBCOMMANDS_NOW(cmd);
+  PROCESS_SUBCOMMANDS_NOW(TS(F("G92.9E"), p_float_t(info.current_position.e, 3)));
 
   TERN_(GCODE_REPEAT_MARKERS, repeat = info.stored_repeat);
   TERN_(HAS_HOME_OFFSET, home_offset = info.home_offset);
@@ -604,10 +564,8 @@ void PrintJobRecovery::resume() {
   enable(true);
 
   // Resume the SD file from the last position
-  sprintf_P(cmd, M23_STR, &info.sd_filename[0]);
-  PROCESS_SUBCOMMANDS_NOW(cmd);
-  sprintf_P(cmd, PSTR("M24S%ldT%ld"), resume_sdpos, info.print_job_elapsed);
-  PROCESS_SUBCOMMANDS_NOW(cmd);
+  PROCESS_SUBCOMMANDS_NOW(MString<MAX_CMD_SIZE>(F("M23 "), info.sd_filename));
+  PROCESS_SUBCOMMANDS_NOW(TS(F("M24S"), resume_sdpos, 'T', info.print_job_elapsed));
 }
 
 #if ENABLED(DEBUG_POWER_LOSS_RECOVERY)

commit 2ef71c6ebaa1f1b496eb369879fe22c69cf9adb4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jun 12 16:38:14 2023 -0500

    ‚ôªÔ∏è Simplify SERIAL_ECHO (#25928)
    
    Since this increases AVR code size, try to optimize further.

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index af85a16448..a8dfadc1f6 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -613,14 +613,13 @@ void PrintJobRecovery::resume() {
 #if ENABLED(DEBUG_POWER_LOSS_RECOVERY)
 
   void PrintJobRecovery::debug(FSTR_P const prefix) {
-    DEBUG_ECHOF(prefix);
-    DEBUG_ECHOLNPGM(" Job Recovery Info...\nvalid_head:", info.valid_head, " valid_foot:", info.valid_foot);
+    DEBUG_ECHOLN(prefix, F(" Job Recovery Info...\nvalid_head:"), info.valid_head, F(" valid_foot:"), info.valid_foot);
     if (info.valid_head) {
       if (info.valid_head == info.valid_foot) {
         DEBUG_ECHOPGM("current_position: ");
         LOOP_LOGICAL_AXES(i) {
           if (i) DEBUG_CHAR(',');
-          DEBUG_DECIMAL(info.current_position[i]);
+          DEBUG_ECHO(info.current_position[i]);
         }
         DEBUG_EOL();
 
@@ -638,7 +637,7 @@ void PrintJobRecovery::resume() {
           DEBUG_ECHOPGM("home_offset: ");
           LOOP_NUM_AXES(i) {
             if (i) DEBUG_CHAR(',');
-            DEBUG_DECIMAL(info.home_offset[i]);
+            DEBUG_ECHO(info.home_offset[i]);
           }
           DEBUG_EOL();
         #endif
@@ -647,7 +646,7 @@ void PrintJobRecovery::resume() {
           DEBUG_ECHOPGM("position_shift: ");
           LOOP_NUM_AXES(i) {
             if (i) DEBUG_CHAR(',');
-            DEBUG_DECIMAL(info.position_shift[i]);
+            DEBUG_ECHO(info.position_shift[i]);
           }
           DEBUG_EOL();
         #endif

commit 86c811660ebf0b3fcbae2f34273d4c9d0c22abc4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:30:34 2023 -0500

    üßë‚Äçüíª Remove LOOP macros (#25917)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 24ff2b2195..af85a16448 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -630,7 +630,7 @@ void PrintJobRecovery::resume() {
 
         #if ENABLED(GCODE_REPEAT_MARKERS)
           DEBUG_ECHOLNPGM("repeat index: ", info.stored_repeat.index);
-          LOOP_L_N(i, info.stored_repeat.index)
+          for (uint8_t i = 0; i < info.stored_repeat.index; ++i)
             DEBUG_ECHOLNPGM("..... sdpos: ", info.stored_repeat.marker.sdpos, " count: ", info.stored_repeat.marker.counter);
         #endif
 

commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    üßë‚Äçüíª Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 29c4695ca4..24ff2b2195 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -699,7 +699,7 @@ void PrintJobRecovery::resume() {
         #endif
 
         // Mixing extruder and gradient
-        #if BOTH(MIXING_EXTRUDER, GRADIENT_MIX)
+        #if ALL(MIXING_EXTRUDER, GRADIENT_MIX)
           DEBUG_ECHOLNPGM("gradient: ", info.gradient.enabled ? "ON" : "OFF");
         #endif
 

commit 0021a58943721a81b1ef23fa5e7366cfd80a3d28
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Sun Mar 26 04:07:25 2023 -0500

    ‚ú® AnyCubic Vyper / Vyper LCD (#25405)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index dd20d04278..29c4695ca4 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -113,7 +113,7 @@ void PrintJobRecovery::changed() {
     purge();
   else if (IS_SD_PRINTING())
     save(true);
-  TERN_(EXTENSIBLE_UI, ExtUI::onSetPowerLoss(onoff));
+  TERN_(EXTENSIBLE_UI, ExtUI::onSetPowerLoss(enabled));
 }
 
 /**

commit 91b5015a8b3ec5efd1052fdf7208124ff8b4120b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 22 03:22:29 2023 -0500

    üßë‚Äçüíª ExtUI::onSetPowerLoss

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index faec893928..dd20d04278 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -113,6 +113,7 @@ void PrintJobRecovery::changed() {
     purge();
   else if (IS_SD_PRINTING())
     save(true);
+  TERN_(EXTENSIBLE_UI, ExtUI::onSetPowerLoss(onoff));
 }
 
 /**

commit c950f0f5d1e6804365506d1718e0a4029fb232cf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Feb 19 11:41:50 2023 -0600

    üßë‚Äçüíª ExtUI::onPowerLoss

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 1037f823f6..faec893928 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -31,6 +31,10 @@
 #include "powerloss.h"
 #include "../core/macros.h"
 
+#if ENABLED(EXTENSIBLE_UI)
+  #include "../lcd/extui/ui_api.h"
+#endif
+
 bool PrintJobRecovery::enabled; // Initialized by settings.load()
 
 MediaFile PrintJobRecovery::file;
@@ -313,6 +317,9 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
     // and a flag whether the raise was already done here.
     if (IS_SD_PRINTING()) save(true, zraise, ENABLED(BACKUP_POWER_SUPPLY));
 
+    // Tell the LCD about the outage, even though it is about to die
+    TERN_(EXTENSIBLE_UI, ExtUI::onPowerLoss());
+
     // Disable all heaters to reduce power loss
     thermalManager.disable_all_heaters();
 

commit aa9df38b053c2ba7f7fadb9700637d1ae9cc0948
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Feb 17 22:12:11 2023 -0600

    üö∏ Interruptible PLR (#25395)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 2825f4d4f2..1037f823f6 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -78,6 +78,14 @@ PrintJobRecovery recovery;
   #define POWER_LOSS_RETRACT_LEN 0
 #endif
 
+// Allow power-loss recovery to be aborted
+#define PLR_CAN_ABORT
+#if ENABLED(PLR_CAN_ABORT)
+  #define PROCESS_SUBCOMMANDS_NOW(cmd) do { if (card.flag.abort_sd_printing) return; gcode.process_subcommands_now(cmd); }while(0)
+#else
+  #define PROCESS_SUBCOMMANDS_NOW(cmd) gcode.process_subcommands_now(cmd)
+#endif
+
 /**
  * Clear the recovery info
  */
@@ -352,12 +360,23 @@ void PrintJobRecovery::resume() {
   // Apply the dry-run flag if enabled
   if (info.flag.dryrun) marlin_debug_flags |= MARLIN_DEBUG_DRYRUN;
 
+  #if ENABLED(DEBUG_POWER_LOSS_RECOVERY)
+    struct OnExit {
+      uint8_t old_flags;
+      OnExit() {
+        old_flags = marlin_debug_flags;
+        marlin_debug_flags |= MARLIN_DEBUG_ECHO;
+      }
+      ~OnExit() { marlin_debug_flags = old_flags; }
+    } on_exit;
+  #endif
+
   // Restore cold extrusion permission
   TERN_(PREVENT_COLD_EXTRUSION, thermalManager.allow_cold_extrude = info.flag.allow_cold_extrusion);
 
   #if HAS_LEVELING
     // Make sure leveling is off before any G92 and G28
-    gcode.process_subcommands_now(F("M420 S0 Z0"));
+    PROCESS_SUBCOMMANDS_NOW(F("M420S0"));
   #endif
 
   #if HAS_HEATED_BED
@@ -365,7 +384,7 @@ void PrintJobRecovery::resume() {
     if (bt) {
       // Restore the bed temperature
       sprintf_P(cmd, PSTR("M190S%i"), bt);
-      gcode.process_subcommands_now(cmd);
+      PROCESS_SUBCOMMANDS_NOW(cmd);
     }
   #endif
 
@@ -376,10 +395,10 @@ void PrintJobRecovery::resume() {
       if (et) {
         #if HAS_MULTI_HOTEND
           sprintf_P(cmd, PSTR("T%iS"), e);
-          gcode.process_subcommands_now(cmd);
+          PROCESS_SUBCOMMANDS_NOW(cmd);
         #endif
         sprintf_P(cmd, PSTR("M109S%i"), et);
-        gcode.process_subcommands_now(cmd);
+        PROCESS_SUBCOMMANDS_NOW(cmd);
       }
     }
   #endif
@@ -393,7 +412,7 @@ void PrintJobRecovery::resume() {
   // establish the current position as best we can.
   //
 
-  gcode.process_subcommands_now(F("G92.9E0")); // Reset E to 0
+  PROCESS_SUBCOMMANDS_NOW(F("G92.9E0")); // Reset E to 0
 
   #if Z_HOME_TO_MAX
 
@@ -404,7 +423,7 @@ void PrintJobRecovery::resume() {
             "G28R0\n"     // Home all axes (no raise)
             "G1Z%sF1200"  // Move Z down to (raised) height
           ), dtostrf(z_now, 1, 3, str_1));
-    gcode.process_subcommands_now(cmd);
+    PROCESS_SUBCOMMANDS_NOW(cmd);
 
   #elif DISABLED(BELTPRINTER)
 
@@ -417,18 +436,18 @@ void PrintJobRecovery::resume() {
     #if !HOMING_Z_DOWN
       // Set Z to the real position
       sprintf_P(cmd, PSTR("G92.9Z%s"), dtostrf(z_now, 1, 3, str_1));
-      gcode.process_subcommands_now(cmd);
+      PROCESS_SUBCOMMANDS_NOW(cmd);
     #endif
 
     // Does Z need to be raised now? It should be raised before homing XY.
     if (z_raised > z_now) {
       z_now = z_raised;
       sprintf_P(cmd, PSTR("G1Z%sF600"), dtostrf(z_now, 1, 3, str_1));
-      gcode.process_subcommands_now(cmd);
+      PROCESS_SUBCOMMANDS_NOW(cmd);
     }
 
     // Home XY with no Z raise
-    gcode.process_subcommands_now(F("G28R0XY")); // No raise during G28
+    PROCESS_SUBCOMMANDS_NOW(F("G28R0XY")); // No raise during G28
 
   #endif
 
@@ -436,7 +455,7 @@ void PrintJobRecovery::resume() {
     // Move to a safe XY position and home Z while avoiding the print.
     const xy_pos_t p = xy_pos_t(POWER_LOSS_ZHOME_POS) TERN_(HOMING_Z_WITH_PROBE, - probe.offset_xy);
     sprintf_P(cmd, PSTR("G1X%sY%sF1000\nG28HZ"), dtostrf(p.x, 1, 3, str_1), dtostrf(p.y, 1, 3, str_2));
-    gcode.process_subcommands_now(cmd);
+    PROCESS_SUBCOMMANDS_NOW(cmd);
   #endif
 
   // Mark all axes as having been homed (no effect on current_position)
@@ -447,12 +466,12 @@ void PrintJobRecovery::resume() {
     // Leveling may already be enabled due to the ENABLE_LEVELING_AFTER_G28 option.
     // TODO: Add a G28 parameter to leave leveling disabled.
     sprintf_P(cmd, PSTR("M420S%cZ%s"), '0' + (char)info.flag.leveling, dtostrf(info.fade, 1, 1, str_1));
-    gcode.process_subcommands_now(cmd);
+    PROCESS_SUBCOMMANDS_NOW(cmd);
 
     #if !HOMING_Z_DOWN
       // The physical Z was adjusted at power-off so undo the M420S1 correction to Z with G92.9.
       sprintf_P(cmd, PSTR("G92.9Z%s"), dtostrf(z_now, 1, 1, str_1));
-      gcode.process_subcommands_now(cmd);
+      PROCESS_SUBCOMMANDS_NOW(cmd);
     #endif
   #endif
 
@@ -460,7 +479,7 @@ void PrintJobRecovery::resume() {
     // Z was homed down to the bed, so move up to the raised height.
     z_now = z_raised;
     sprintf_P(cmd, PSTR("G1Z%sF600"), dtostrf(z_now, 1, 3, str_1));
-    gcode.process_subcommands_now(cmd);
+    PROCESS_SUBCOMMANDS_NOW(cmd);
   #endif
 
   // Recover volumetric extrusion state
@@ -468,16 +487,16 @@ void PrintJobRecovery::resume() {
     #if HAS_MULTI_EXTRUDER
       EXTRUDER_LOOP() {
         sprintf_P(cmd, PSTR("M200T%iD%s"), e, dtostrf(info.filament_size[e], 1, 3, str_1));
-        gcode.process_subcommands_now(cmd);
+        PROCESS_SUBCOMMANDS_NOW(cmd);
       }
       if (!info.flag.volumetric_enabled) {
         sprintf_P(cmd, PSTR("M200T%iD0"), info.active_extruder);
-        gcode.process_subcommands_now(cmd);
+        PROCESS_SUBCOMMANDS_NOW(cmd);
       }
     #else
       if (info.flag.volumetric_enabled) {
         sprintf_P(cmd, PSTR("M200D%s"), dtostrf(info.filament_size[0], 1, 3, str_1));
-        gcode.process_subcommands_now(cmd);
+        PROCESS_SUBCOMMANDS_NOW(cmd);
       }
     #endif
   #endif
@@ -489,10 +508,10 @@ void PrintJobRecovery::resume() {
       if (et) {
         #if HAS_MULTI_HOTEND
           sprintf_P(cmd, PSTR("T%iS"), e);
-          gcode.process_subcommands_now(cmd);
+          PROCESS_SUBCOMMANDS_NOW(cmd);
         #endif
         sprintf_P(cmd, PSTR("M109S%i"), et);
-        gcode.process_subcommands_now(cmd);
+        PROCESS_SUBCOMMANDS_NOW(cmd);
       }
     }
   #endif
@@ -500,7 +519,7 @@ void PrintJobRecovery::resume() {
   // Restore the previously active tool (with no_move)
   #if HAS_MULTI_EXTRUDER || HAS_MULTI_HOTEND
     sprintf_P(cmd, PSTR("T%i S"), info.active_extruder);
-    gcode.process_subcommands_now(cmd);
+    PROCESS_SUBCOMMANDS_NOW(cmd);
   #endif
 
   // Restore print cooling fan speeds
@@ -509,7 +528,7 @@ void PrintJobRecovery::resume() {
       const int f = info.fan_speed[i];
       if (f) {
         sprintf_P(cmd, PSTR("M106P%iS%i"), i, f);
-        gcode.process_subcommands_now(cmd);
+        PROCESS_SUBCOMMANDS_NOW(cmd);
       }
     }
   #endif
@@ -531,17 +550,17 @@ void PrintJobRecovery::resume() {
 
   // Un-retract if there was a retract at outage
   #if ENABLED(BACKUP_POWER_SUPPLY) && POWER_LOSS_RETRACT_LEN > 0
-    gcode.process_subcommands_now(F("G1F3000E" STRINGIFY(POWER_LOSS_RETRACT_LEN)));
+    PROCESS_SUBCOMMANDS_NOW(F("G1F3000E" STRINGIFY(POWER_LOSS_RETRACT_LEN)));
   #endif
 
   // Additional purge on resume if configured
   #if POWER_LOSS_PURGE_LEN
     sprintf_P(cmd, PSTR("G1F3000E%d"), (POWER_LOSS_PURGE_LEN) + (POWER_LOSS_RETRACT_LEN));
-    gcode.process_subcommands_now(cmd);
+    PROCESS_SUBCOMMANDS_NOW(cmd);
   #endif
 
   #if ENABLED(NOZZLE_CLEAN_FEATURE)
-    gcode.process_subcommands_now(F("G12"));
+    PROCESS_SUBCOMMANDS_NOW(F("G12"));
   #endif
 
   // Move back over to the saved XY
@@ -549,19 +568,19 @@ void PrintJobRecovery::resume() {
     dtostrf(info.current_position.x, 1, 3, str_1),
     dtostrf(info.current_position.y, 1, 3, str_2)
   );
-  gcode.process_subcommands_now(cmd);
+  PROCESS_SUBCOMMANDS_NOW(cmd);
 
   // Move back down to the saved Z for printing
   sprintf_P(cmd, PSTR("G1Z%sF600"), dtostrf(z_print, 1, 3, str_1));
-  gcode.process_subcommands_now(cmd);
+  PROCESS_SUBCOMMANDS_NOW(cmd);
 
   // Restore the feedrate
   sprintf_P(cmd, PSTR("G1F%d"), info.feedrate);
-  gcode.process_subcommands_now(cmd);
+  PROCESS_SUBCOMMANDS_NOW(cmd);
 
   // Restore E position with G92.9
   sprintf_P(cmd, PSTR("G92.9E%s"), dtostrf(info.current_position.e, 1, 3, str_1));
-  gcode.process_subcommands_now(cmd);
+  PROCESS_SUBCOMMANDS_NOW(cmd);
 
   TERN_(GCODE_REPEAT_MARKERS, repeat = info.stored_repeat);
   TERN_(HAS_HOME_OFFSET, home_offset = info.home_offset);
@@ -573,22 +592,14 @@ void PrintJobRecovery::resume() {
   // Relative axis modes
   gcode.axis_relative = info.axis_relative;
 
-  #if ENABLED(DEBUG_POWER_LOSS_RECOVERY)
-    const uint8_t old_flags = marlin_debug_flags;
-    marlin_debug_flags |= MARLIN_DEBUG_ECHO;
-  #endif
-
   // Continue to apply PLR when a file is resumed!
   enable(true);
 
   // Resume the SD file from the last position
-  char *fn = info.sd_filename;
-  sprintf_P(cmd, M23_STR, fn);
-  gcode.process_subcommands_now(cmd);
+  sprintf_P(cmd, M23_STR, &info.sd_filename[0]);
+  PROCESS_SUBCOMMANDS_NOW(cmd);
   sprintf_P(cmd, PSTR("M24S%ldT%ld"), resume_sdpos, info.print_job_elapsed);
-  gcode.process_subcommands_now(cmd);
-
-  TERN_(DEBUG_POWER_LOSS_RECOVERY, marlin_debug_flags = old_flags);
+  PROCESS_SUBCOMMANDS_NOW(cmd);
 }
 
 #if ENABLED(DEBUG_POWER_LOSS_RECOVERY)

commit 218ca0530432d6b1194ccac5fc32a72bbc9a7c96
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Feb 4 05:10:26 2023 -0300

    üßë‚Äçüíª General 'MediaFile' type alias (#24424)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index d4450adcd8..2825f4d4f2 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -33,7 +33,7 @@
 
 bool PrintJobRecovery::enabled; // Initialized by settings.load()
 
-SdFile PrintJobRecovery::file;
+MediaFile PrintJobRecovery::file;
 job_recovery_info_t PrintJobRecovery::info;
 const char PrintJobRecovery::filename[5] = "/PLR";
 uint8_t PrintJobRecovery::queue_index_r;

commit fd082df077aead6e567201d6289c020e69a87011
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 17 21:19:50 2022 -0500

    üßë‚Äçüíª Handle PLR in manage_media

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 4cbacf6e53..d4450adcd8 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -108,13 +108,18 @@ void PrintJobRecovery::changed() {
  *
  * If a saved state exists send 'M1000 S' to initiate job recovery.
  */
-void PrintJobRecovery::check() {
+bool PrintJobRecovery::check() {
   //if (!card.isMounted()) card.mount();
+  bool success = false;
   if (card.isMounted()) {
     load();
-    if (!valid()) return cancel();
-    queue.inject(F("M1000S"));
+    success = valid();
+    if (!success)
+      cancel();
+    else
+      queue.inject(F("M1000S"));
   }
+  return success;
 }
 
 /**

commit c4873a64ecd54dc0bbccb1eaeecd1b5ae2f6aef5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 3 16:14:02 2022 -0500

    üßë‚Äçüíª General and Axis-based bitfield flags (#23989)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 0fc195e7dd..4cbacf6e53 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -514,7 +514,7 @@ void PrintJobRecovery::resume() {
     EXTRUDER_LOOP() {
       if (info.retract[e] != 0.0) {
         fwretract.current_retract[e] = info.retract[e];
-        fwretract.retracted[e] = true;
+        fwretract.retracted.set(e);
       }
     }
     fwretract.current_hop = info.retract_hop;

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 74008ed55a..0fc195e7dd 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -562,7 +562,7 @@ void PrintJobRecovery::resume() {
   TERN_(HAS_HOME_OFFSET, home_offset = info.home_offset);
   TERN_(HAS_POSITION_SHIFT, position_shift = info.position_shift);
   #if HAS_HOME_OFFSET || HAS_POSITION_SHIFT
-    LOOP_LINEAR_AXES(i) update_workspace_offset((AxisEnum)i);
+    LOOP_NUM_AXES(i) update_workspace_offset((AxisEnum)i);
   #endif
 
   // Relative axis modes
@@ -612,7 +612,7 @@ void PrintJobRecovery::resume() {
 
         #if HAS_HOME_OFFSET
           DEBUG_ECHOPGM("home_offset: ");
-          LOOP_LINEAR_AXES(i) {
+          LOOP_NUM_AXES(i) {
             if (i) DEBUG_CHAR(',');
             DEBUG_DECIMAL(info.home_offset[i]);
           }
@@ -621,7 +621,7 @@ void PrintJobRecovery::resume() {
 
         #if HAS_POSITION_SHIFT
           DEBUG_ECHOPGM("position_shift: ");
-          LOOP_LINEAR_AXES(i) {
+          LOOP_NUM_AXES(i) {
             if (i) DEBUG_CHAR(',');
             DEBUG_DECIMAL(info.position_shift[i]);
           }

commit a80a303cbe057b02e8d9cd29bc94c161e48784f1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Mar 22 22:22:08 2022 -0500

    üßë‚Äçüíª EXTRUDER_LOOP macro

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 214c248d35..74008ed55a 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -196,7 +196,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
     #if DISABLED(NO_VOLUMETRICS)
       info.flag.volumetric_enabled = parser.volumetric_enabled;
       #if HAS_MULTI_EXTRUDER
-        for (int8_t e = 0; e < EXTRUDERS; e++) info.filament_size[e] = planner.filament_size[e];
+        EXTRUDER_LOOP() info.filament_size[e] = planner.filament_size[e];
       #else
         if (parser.volumetric_enabled) info.filament_size[0] = planner.filament_size[active_extruder];
       #endif
@@ -461,7 +461,7 @@ void PrintJobRecovery::resume() {
   // Recover volumetric extrusion state
   #if DISABLED(NO_VOLUMETRICS)
     #if HAS_MULTI_EXTRUDER
-      for (int8_t e = 0; e < EXTRUDERS; e++) {
+      EXTRUDER_LOOP() {
         sprintf_P(cmd, PSTR("M200T%iD%s"), e, dtostrf(info.filament_size[e], 1, 3, str_1));
         gcode.process_subcommands_now(cmd);
       }
@@ -511,7 +511,7 @@ void PrintJobRecovery::resume() {
 
   // Restore retract and hop state from an active `G10` command
   #if ENABLED(FWRETRACT)
-    LOOP_L_N(e, EXTRUDERS) {
+    EXTRUDER_LOOP() {
       if (info.retract[e] != 0.0) {
         fwretract.current_retract[e] = info.retract[e];
         fwretract.retracted[e] = true;
@@ -634,7 +634,7 @@ void PrintJobRecovery::resume() {
 
         #if DISABLED(NO_VOLUMETRICS)
           DEBUG_ECHOPGM("filament_size:");
-          LOOP_L_N(i, EXTRUDERS) DEBUG_ECHOLNPGM(" ", info.filament_size[i]);
+          EXTRUDER_LOOP() DEBUG_ECHOLNPGM(" ", info.filament_size[e]);
           DEBUG_EOL();
         #endif
 
@@ -666,7 +666,7 @@ void PrintJobRecovery::resume() {
 
         #if ENABLED(FWRETRACT)
           DEBUG_ECHOPGM("retract: ");
-          for (int8_t e = 0; e < EXTRUDERS; e++) {
+          EXTRUDER_LOOP() {
             DEBUG_ECHO(info.retract[e]);
             if (e < EXTRUDERS - 1) DEBUG_CHAR(',');
           }

commit a323d6732bf691d29ce996b6bfd11cbcc3c9f0a7
Author: MOHAMMAD RASIM <mohammad.rasim96@gmail.com>
Date:   Wed Feb 9 21:29:34 2022 +0300

    üö∏ Fix, Improve Power-Loss Recovery (#22828)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 723ec1903b..214c248d35 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -54,6 +54,10 @@ uint32_t PrintJobRecovery::cmd_sdpos, // = 0
 #include "../module/temperature.h"
 #include "../core/serial.h"
 
+#if HOMING_Z_WITH_PROBE
+  #include "../module/probe.h"
+#endif
+
 #if ENABLED(FWRETRACT)
   #include "fwretract.h"
 #endif
@@ -178,7 +182,8 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
     info.valid_foot = info.valid_head;
 
     // Machine state
-    info.current_position = current_position;
+    // info.sdpos and info.current_position are pre-filled from the Stepper ISR
+
     info.feedrate = uint16_t(MMS_TO_MMM(feedrate_mm_s));
     info.zraise = zraise;
     info.flag.raised = raised;                      // Was Z raised before power-off?
@@ -265,6 +270,10 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
 
   #endif
 
+#endif // POWER_LOSS_PIN
+
+#if PIN_EXISTS(POWER_LOSS) || ENABLED(DEBUG_POWER_LOSS_RECOVERY)
+
   /**
    * An outage was detected by a sensor pin.
    *  - If not SD printing, let the machine turn off on its own with no "KILL" screen
@@ -273,7 +282,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
    *  - If backup power is available Retract E and Raise Z
    *  - Go to the KILL screen
    */
-  void PrintJobRecovery::_outage() {
+  void PrintJobRecovery::_outage(TERN_(DEBUG_POWER_LOSS_RECOVERY, const bool simulated/*=false*/)) {
     #if ENABLED(BACKUP_POWER_SUPPLY)
       static bool lock = false;
       if (lock) return; // No re-entrance from idle() during retract_and_lift()
@@ -301,10 +310,16 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
       retract_and_lift(zraise);
     #endif
 
-    kill(GET_TEXT_F(MSG_OUTAGE_RECOVERY));
+    if (TERN0(DEBUG_POWER_LOSS_RECOVERY, simulated)) {
+      card.fileHasFinished();
+      current_position.reset();
+      sync_plan_position();
+    }
+    else
+      kill(GET_TEXT_F(MSG_OUTAGE_RECOVERY));
   }
 
-#endif
+#endif // POWER_LOSS_PIN || DEBUG_POWER_LOSS_RECOVERY
 
 /**
  * Save the recovery info the recovery file
@@ -390,14 +405,12 @@ void PrintJobRecovery::resume() {
 
     #if ENABLED(POWER_LOSS_RECOVER_ZHOME) && defined(POWER_LOSS_ZHOME_POS)
       #define HOMING_Z_DOWN 1
-    #else
-      #define HOME_XY_ONLY 1
     #endif
 
     float z_now = info.flag.raised ? z_raised : z_print;
 
-    // Reset E to 0 and set Z to the real position
-    #if HOME_XY_ONLY
+    #if !HOMING_Z_DOWN
+      // Set Z to the real position
       sprintf_P(cmd, PSTR("G92.9Z%s"), dtostrf(z_now, 1, 3, str_1));
       gcode.process_subcommands_now(cmd);
     #endif
@@ -409,15 +422,15 @@ void PrintJobRecovery::resume() {
       gcode.process_subcommands_now(cmd);
     }
 
-    // Home XY with no Z raise, and also home Z here if Z isn't homing down below.
-    gcode.process_subcommands_now(F("G28R0" TERN_(HOME_XY_ONLY, "XY"))); // No raise during G28
+    // Home XY with no Z raise
+    gcode.process_subcommands_now(F("G28R0XY")); // No raise during G28
 
   #endif
 
   #if HOMING_Z_DOWN
     // Move to a safe XY position and home Z while avoiding the print.
-    constexpr xy_pos_t p = POWER_LOSS_ZHOME_POS;
-    sprintf_P(cmd, PSTR("G1X%sY%sF1000\nG28Z"), dtostrf(p.x, 1, 3, str_1), dtostrf(p.y, 1, 3, str_2));
+    const xy_pos_t p = xy_pos_t(POWER_LOSS_ZHOME_POS) TERN_(HOMING_Z_WITH_PROBE, - probe.offset_xy);
+    sprintf_P(cmd, PSTR("G1X%sY%sF1000\nG28HZ"), dtostrf(p.x, 1, 3, str_1), dtostrf(p.y, 1, 3, str_2));
     gcode.process_subcommands_now(cmd);
   #endif
 
@@ -431,7 +444,7 @@ void PrintJobRecovery::resume() {
     sprintf_P(cmd, PSTR("M420S%cZ%s"), '0' + (char)info.flag.leveling, dtostrf(info.fade, 1, 1, str_1));
     gcode.process_subcommands_now(cmd);
 
-    #if HOME_XY_ONLY
+    #if !HOMING_Z_DOWN
       // The physical Z was adjusted at power-off so undo the M420S1 correction to Z with G92.9.
       sprintf_P(cmd, PSTR("G92.9Z%s"), dtostrf(z_now, 1, 1, str_1));
       gcode.process_subcommands_now(cmd);
@@ -513,12 +526,12 @@ void PrintJobRecovery::resume() {
 
   // Un-retract if there was a retract at outage
   #if ENABLED(BACKUP_POWER_SUPPLY) && POWER_LOSS_RETRACT_LEN > 0
-    gcode.process_subcommands_now(F("G1E" STRINGIFY(POWER_LOSS_RETRACT_LEN) "F3000"));
+    gcode.process_subcommands_now(F("G1F3000E" STRINGIFY(POWER_LOSS_RETRACT_LEN)));
   #endif
 
   // Additional purge on resume if configured
   #if POWER_LOSS_PURGE_LEN
-    sprintf_P(cmd, PSTR("G1 E%d F3000"), (POWER_LOSS_PURGE_LEN) + (POWER_LOSS_RETRACT_LEN));
+    sprintf_P(cmd, PSTR("G1F3000E%d"), (POWER_LOSS_PURGE_LEN) + (POWER_LOSS_RETRACT_LEN));
     gcode.process_subcommands_now(cmd);
   #endif
 

commit 65b950a489c35b1d5547da3a504af4dad8cde3d7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 20:15:52 2021 -0500

    üé® Apply F() to kill / sendinfoscreen

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index bc19c9b18e..723ec1903b 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -301,7 +301,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
       retract_and_lift(zraise);
     #endif
 
-    kill(GET_TEXT(MSG_OUTAGE_RECOVERY));
+    kill(GET_TEXT_F(MSG_OUTAGE_RECOVERY));
   }
 
 #endif

commit 1dafd1887e40399faf16e3455e3670ed3acfac52
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 27 13:46:42 2021 -0500

    üé® Apply F() to various reports

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 9808113ecc..bc19c9b18e 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -130,7 +130,7 @@ void PrintJobRecovery::load() {
     (void)file.read(&info, sizeof(info));
     close();
   }
-  debug(PSTR("Load"));
+  debug(F("Load"));
 }
 
 /**
@@ -311,7 +311,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
  */
 void PrintJobRecovery::write() {
 
-  debug(PSTR("Write"));
+  debug(F("Write"));
 
   open(false);
   file.seekSet(0);
@@ -575,8 +575,8 @@ void PrintJobRecovery::resume() {
 
 #if ENABLED(DEBUG_POWER_LOSS_RECOVERY)
 
-  void PrintJobRecovery::debug(PGM_P const prefix) {
-    DEBUG_ECHOPGM_P(prefix);
+  void PrintJobRecovery::debug(FSTR_P const prefix) {
+    DEBUG_ECHOF(prefix);
     DEBUG_ECHOLNPGM(" Job Recovery Info...\nvalid_head:", info.valid_head, " valid_foot:", info.valid_foot);
     if (info.valid_head) {
       if (info.valid_head == info.valid_foot) {

commit 417e2530ebc5b6c74ac34adaba8be552b407383a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 21:11:31 2021 -0500

    üé® Apply F() to G-code suite and queue

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index a551ba4c8b..9808113ecc 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -109,7 +109,7 @@ void PrintJobRecovery::check() {
   if (card.isMounted()) {
     load();
     if (!valid()) return cancel();
-    queue.inject_P(PSTR("M1000S"));
+    queue.inject(F("M1000S"));
   }
 }
 

commit 59dac3a7e41ae7964686d9dff56baba821a278f7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 18:43:52 2021 -0500

    üé® Apply F() to G-code subcommands

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 8db31daa40..a551ba4c8b 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -244,7 +244,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
 
         #if POWER_LOSS_RETRACT_LEN
           // Retract filament now
-          gcode.process_subcommands_now_P(PSTR("G1 F3000 E-" STRINGIFY(POWER_LOSS_RETRACT_LEN)));
+          gcode.process_subcommands_now(F("G1 F3000 E-" STRINGIFY(POWER_LOSS_RETRACT_LEN)));
         #endif
 
         #if POWER_LOSS_ZRAISE
@@ -337,7 +337,7 @@ void PrintJobRecovery::resume() {
 
   #if HAS_LEVELING
     // Make sure leveling is off before any G92 and G28
-    gcode.process_subcommands_now_P(PSTR("M420 S0 Z0"));
+    gcode.process_subcommands_now(F("M420 S0 Z0"));
   #endif
 
   #if HAS_HEATED_BED
@@ -373,7 +373,7 @@ void PrintJobRecovery::resume() {
   // establish the current position as best we can.
   //
 
-  gcode.process_subcommands_now_P(PSTR("G92.9E0")); // Reset E to 0
+  gcode.process_subcommands_now(F("G92.9E0")); // Reset E to 0
 
   #if Z_HOME_TO_MAX
 
@@ -410,7 +410,7 @@ void PrintJobRecovery::resume() {
     }
 
     // Home XY with no Z raise, and also home Z here if Z isn't homing down below.
-    gcode.process_subcommands_now_P(PSTR("G28R0" TERN_(HOME_XY_ONLY, "XY"))); // No raise during G28
+    gcode.process_subcommands_now(F("G28R0" TERN_(HOME_XY_ONLY, "XY"))); // No raise during G28
 
   #endif
 
@@ -513,7 +513,7 @@ void PrintJobRecovery::resume() {
 
   // Un-retract if there was a retract at outage
   #if ENABLED(BACKUP_POWER_SUPPLY) && POWER_LOSS_RETRACT_LEN > 0
-    gcode.process_subcommands_now_P(PSTR("G1E" STRINGIFY(POWER_LOSS_RETRACT_LEN) "F3000"));
+    gcode.process_subcommands_now(F("G1E" STRINGIFY(POWER_LOSS_RETRACT_LEN) "F3000"));
   #endif
 
   // Additional purge on resume if configured
@@ -523,7 +523,7 @@ void PrintJobRecovery::resume() {
   #endif
 
   #if ENABLED(NOZZLE_CLEAN_FEATURE)
-    gcode.process_subcommands_now_P(PSTR("G12"));
+    gcode.process_subcommands_now(F("G12"));
   #endif
 
   // Move back over to the saved XY

commit 33e0855e2c173680865aaa6c6aa93047d63fc469
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 01:07:51 2021 -0500

    ‚ö°Ô∏è Handle shared enable pins (#22824)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 159121ba45..8db31daa40 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -186,7 +186,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
     TERN_(GCODE_REPEAT_MARKERS, info.stored_repeat = repeat);
     TERN_(HAS_HOME_OFFSET, info.home_offset = home_offset);
     TERN_(HAS_POSITION_SHIFT, info.position_shift = position_shift);
-    TERN_(HAS_MULTI_EXTRUDER, info.active_extruder = active_extruder);
+    E_TERN_(info.active_extruder = active_extruder);
 
     #if DISABLED(NO_VOLUMETRICS)
       info.flag.volumetric_enabled = parser.volumetric_enabled;

commit 754b31918a73cb08c322102be5d3926d2ac59c18
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 9 04:57:05 2021 -0500

    üé® Fewer serial macros

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index c86cb4f0d6..159121ba45 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -577,7 +577,7 @@ void PrintJobRecovery::resume() {
 
   void PrintJobRecovery::debug(PGM_P const prefix) {
     DEBUG_ECHOPGM_P(prefix);
-    DEBUG_ECHOLNPAIR(" Job Recovery Info...\nvalid_head:", info.valid_head, " valid_foot:", info.valid_foot);
+    DEBUG_ECHOLNPGM(" Job Recovery Info...\nvalid_head:", info.valid_head, " valid_foot:", info.valid_foot);
     if (info.valid_head) {
       if (info.valid_head == info.valid_foot) {
         DEBUG_ECHOPGM("current_position: ");
@@ -587,14 +587,14 @@ void PrintJobRecovery::resume() {
         }
         DEBUG_EOL();
 
-        DEBUG_ECHOLNPAIR("feedrate: ", info.feedrate);
+        DEBUG_ECHOLNPGM("feedrate: ", info.feedrate);
 
-        DEBUG_ECHOLNPAIR("zraise: ", info.zraise, " ", info.flag.raised ? "(before)" : "");
+        DEBUG_ECHOLNPGM("zraise: ", info.zraise, " ", info.flag.raised ? "(before)" : "");
 
         #if ENABLED(GCODE_REPEAT_MARKERS)
-          DEBUG_ECHOLNPAIR("repeat index: ", info.stored_repeat.index);
+          DEBUG_ECHOLNPGM("repeat index: ", info.stored_repeat.index);
           LOOP_L_N(i, info.stored_repeat.index)
-            DEBUG_ECHOLNPAIR("..... sdpos: ", info.stored_repeat.marker.sdpos, " count: ", info.stored_repeat.marker.counter);
+            DEBUG_ECHOLNPGM("..... sdpos: ", info.stored_repeat.marker.sdpos, " count: ", info.stored_repeat.marker.counter);
         #endif
 
         #if HAS_HOME_OFFSET
@@ -616,12 +616,12 @@ void PrintJobRecovery::resume() {
         #endif
 
         #if HAS_MULTI_EXTRUDER
-          DEBUG_ECHOLNPAIR("active_extruder: ", info.active_extruder);
+          DEBUG_ECHOLNPGM("active_extruder: ", info.active_extruder);
         #endif
 
         #if DISABLED(NO_VOLUMETRICS)
           DEBUG_ECHOPGM("filament_size:");
-          LOOP_L_N(i, EXTRUDERS) DEBUG_ECHOLNPAIR(" ", info.filament_size[i]);
+          LOOP_L_N(i, EXTRUDERS) DEBUG_ECHOLNPGM(" ", info.filament_size[i]);
           DEBUG_EOL();
         #endif
 
@@ -635,7 +635,7 @@ void PrintJobRecovery::resume() {
         #endif
 
         #if HAS_HEATED_BED
-          DEBUG_ECHOLNPAIR("target_temperature_bed: ", info.target_temperature_bed);
+          DEBUG_ECHOLNPGM("target_temperature_bed: ", info.target_temperature_bed);
         #endif
 
         #if HAS_FAN
@@ -648,7 +648,7 @@ void PrintJobRecovery::resume() {
         #endif
 
         #if HAS_LEVELING
-          DEBUG_ECHOLNPAIR("leveling: ", info.flag.leveling ? "ON" : "OFF", "  fade: ", info.fade);
+          DEBUG_ECHOLNPGM("leveling: ", info.flag.leveling ? "ON" : "OFF", "  fade: ", info.fade);
         #endif
 
         #if ENABLED(FWRETRACT)
@@ -658,17 +658,17 @@ void PrintJobRecovery::resume() {
             if (e < EXTRUDERS - 1) DEBUG_CHAR(',');
           }
           DEBUG_EOL();
-          DEBUG_ECHOLNPAIR("retract_hop: ", info.retract_hop);
+          DEBUG_ECHOLNPGM("retract_hop: ", info.retract_hop);
         #endif
 
         // Mixing extruder and gradient
         #if BOTH(MIXING_EXTRUDER, GRADIENT_MIX)
-          DEBUG_ECHOLNPAIR("gradient: ", info.gradient.enabled ? "ON" : "OFF");
+          DEBUG_ECHOLNPGM("gradient: ", info.gradient.enabled ? "ON" : "OFF");
         #endif
 
-        DEBUG_ECHOLNPAIR("sd_filename: ", info.sd_filename);
-        DEBUG_ECHOLNPAIR("sdpos: ", info.sdpos);
-        DEBUG_ECHOLNPAIR("print_job_elapsed: ", info.print_job_elapsed);
+        DEBUG_ECHOLNPGM("sd_filename: ", info.sd_filename);
+        DEBUG_ECHOLNPGM("sdpos: ", info.sdpos);
+        DEBUG_ECHOLNPGM("print_job_elapsed: ", info.print_job_elapsed);
 
         DEBUG_ECHOPGM("axis_relative:");
         if (TEST(info.axis_relative, REL_X)) DEBUG_ECHOPGM(" REL_X");
@@ -679,9 +679,9 @@ void PrintJobRecovery::resume() {
         if (TEST(info.axis_relative, E_MODE_REL)) DEBUG_ECHOPGM(" E_MODE_REL");
         DEBUG_EOL();
 
-        DEBUG_ECHOLNPAIR("flag.dryrun: ", AS_DIGIT(info.flag.dryrun));
-        DEBUG_ECHOLNPAIR("flag.allow_cold_extrusion: ", AS_DIGIT(info.flag.allow_cold_extrusion));
-        DEBUG_ECHOLNPAIR("flag.volumetric_enabled: ", AS_DIGIT(info.flag.volumetric_enabled));
+        DEBUG_ECHOLNPGM("flag.dryrun: ", AS_DIGIT(info.flag.dryrun));
+        DEBUG_ECHOLNPGM("flag.allow_cold_extrusion: ", AS_DIGIT(info.flag.allow_cold_extrusion));
+        DEBUG_ECHOLNPGM("flag.volumetric_enabled: ", AS_DIGIT(info.flag.volumetric_enabled));
       }
       else
         DEBUG_ECHOLNPGM("INVALID DATA");

commit 0f61d9e4dd4d4e4f27e5c688ab2c5dbd0f03af84
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Tue Sep 7 02:15:24 2021 -0500

    ‚ú® Ender-3 V2 CrealityUI Enhanced (#21942)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 3409e6714d..c86cb4f0d6 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -40,7 +40,7 @@ uint8_t PrintJobRecovery::queue_index_r;
 uint32_t PrintJobRecovery::cmd_sdpos, // = 0
          PrintJobRecovery::sdpos[BUFSIZE];
 
-#if ENABLED(DWIN_CREALITY_LCD)
+#if HAS_DWIN_E3V2_BASIC
   bool PrintJobRecovery::dwin_flag; // = false
 #endif
 

commit fb29135c74a258eaa0ba824c9c1f00762ed59183
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Aug 29 20:44:55 2021 -0500

    ‚ú® Creality3D CR-30 PrintMill

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index a512022320..3409e6714d 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -386,7 +386,7 @@ void PrintJobRecovery::resume() {
           ), dtostrf(z_now, 1, 3, str_1));
     gcode.process_subcommands_now(cmd);
 
-  #else
+  #elif DISABLED(BELTPRINTER)
 
     #if ENABLED(POWER_LOSS_RECOVER_ZHOME) && defined(POWER_LOSS_ZHOME_POS)
       #define HOMING_Z_DOWN 1

commit 2de54dab84d82ef69fb9ac3bd9025444f4f84813
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri May 21 08:23:09 2021 -0500

    üé® Move HAS_EXTRUDERS

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index a7474794de..a512022320 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -197,7 +197,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POW
       #endif
     #endif
 
-    #if EXTRUDERS
+    #if HAS_EXTRUDERS
       HOTEND_LOOP() info.target_temperature[e] = thermalManager.degTargetHotend(e);
     #endif
 

commit 49771c4a9ed2afa1e572f82a24b5edb3de120f78
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed May 19 00:21:34 2021 -0500

    üé® Flags for homing directions

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index db78e7331b..a7474794de 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -375,7 +375,7 @@ void PrintJobRecovery::resume() {
 
   gcode.process_subcommands_now_P(PSTR("G92.9E0")); // Reset E to 0
 
-  #if Z_HOME_DIR > 0
+  #if Z_HOME_TO_MAX
 
     float z_now = z_raised;
 

commit a6e5492b088add3589aeac168136369f21614e60
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 18 22:51:19 2021 -0500

    ‚ôªÔ∏è Refactor axis counts and loops

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 3764af13d0..db78e7331b 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -549,7 +549,7 @@ void PrintJobRecovery::resume() {
   TERN_(HAS_HOME_OFFSET, home_offset = info.home_offset);
   TERN_(HAS_POSITION_SHIFT, position_shift = info.position_shift);
   #if HAS_HOME_OFFSET || HAS_POSITION_SHIFT
-    LOOP_XYZ(i) update_workspace_offset((AxisEnum)i);
+    LOOP_LINEAR_AXES(i) update_workspace_offset((AxisEnum)i);
   #endif
 
   // Relative axis modes
@@ -581,7 +581,7 @@ void PrintJobRecovery::resume() {
     if (info.valid_head) {
       if (info.valid_head == info.valid_foot) {
         DEBUG_ECHOPGM("current_position: ");
-        LOOP_XYZE(i) {
+        LOOP_LOGICAL_AXES(i) {
           if (i) DEBUG_CHAR(',');
           DEBUG_DECIMAL(info.current_position[i]);
         }
@@ -599,7 +599,7 @@ void PrintJobRecovery::resume() {
 
         #if HAS_HOME_OFFSET
           DEBUG_ECHOPGM("home_offset: ");
-          LOOP_XYZ(i) {
+          LOOP_LINEAR_AXES(i) {
             if (i) DEBUG_CHAR(',');
             DEBUG_DECIMAL(info.home_offset[i]);
           }
@@ -608,7 +608,7 @@ void PrintJobRecovery::resume() {
 
         #if HAS_POSITION_SHIFT
           DEBUG_ECHOPGM("position_shift: ");
-          LOOP_XYZ(i) {
+          LOOP_LINEAR_AXES(i) {
             if (i) DEBUG_CHAR(',');
             DEBUG_DECIMAL(info.position_shift[i]);
           }

commit e72fe0ad142a3e36b1369cbc98b996b09cdef4bd
Author: FilippoR <filippo.rossoni@gmail.com>
Date:   Thu May 13 17:56:49 2021 +0200

    fix compilation for home hon top (#21894)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 552f1d9009..3764af13d0 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -380,12 +380,11 @@ void PrintJobRecovery::resume() {
     float z_now = z_raised;
 
     // If Z homing goes to max then just move back to the "raised" position
-    gcode.process_subcommands_now_P(PSTR(
-        "G28R0\n"     // Home all axes (no raise)
-        "G1Z%sF1200"  // Move Z down to (raised) height
-      ),
-      dtostrf(z_now, 1, 3, str_1)
-    );
+    sprintf_P(cmd, PSTR(
+            "G28R0\n"     // Home all axes (no raise)
+            "G1Z%sF1200"  // Move Z down to (raised) height
+          ), dtostrf(z_now, 1, 3, str_1));
+    gcode.process_subcommands_now(cmd);
 
   #else
 

commit 8e56f9366de1b0d78600064aca3f905b4d1d7300
Author: tobuh <32395668+tobuh@users.noreply.github.com>
Date:   Mon May 10 14:24:35 2021 +0200

    Fix and improve Power-Loss Recovery (#21779)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 9d6e0b42f5..552f1d9009 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -144,7 +144,7 @@ void PrintJobRecovery::prepare() {
 /**
  * Save the current machine state to the power-loss recovery file
  */
-void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/) {
+void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=POWER_LOSS_ZRAISE*/, const bool raised/*=false*/) {
 
   // We don't check IS_SD_PRINTING here so a save may occur during a pause
 
@@ -181,14 +181,12 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
     info.current_position = current_position;
     info.feedrate = uint16_t(MMS_TO_MMM(feedrate_mm_s));
     info.zraise = zraise;
+    info.flag.raised = raised;                      // Was Z raised before power-off?
 
     TERN_(GCODE_REPEAT_MARKERS, info.stored_repeat = repeat);
     TERN_(HAS_HOME_OFFSET, info.home_offset = home_offset);
     TERN_(HAS_POSITION_SHIFT, info.position_shift = position_shift);
-
-    #if HAS_MULTI_EXTRUDER
-      info.active_extruder = active_extruder;
-    #endif
+    TERN_(HAS_MULTI_EXTRUDER, info.active_extruder = active_extruder);
 
     #if DISABLED(NO_VOLUMETRICS)
       info.flag.volumetric_enabled = parser.volumetric_enabled;
@@ -289,8 +287,9 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
       constexpr float zraise = 0;
     #endif
 
-    // Save, including the limited Z raise
-    if (IS_SD_PRINTING()) save(true, zraise);
+    // Save the current position, distance that Z was (or should be) raised,
+    // and a flag whether the raise was already done here.
+    if (IS_SD_PRINTING()) save(true, zraise, ENABLED(BACKUP_POWER_SUPPLY));
 
     // Disable all heaters to reduce power loss
     thermalManager.disable_all_heaters();
@@ -350,10 +349,10 @@ void PrintJobRecovery::resume() {
     }
   #endif
 
-  // Restore all hotend temperatures
+  // Heat hotend enough to soften material
   #if HAS_HOTEND
     HOTEND_LOOP() {
-      const celsius_t et = info.target_temperature[e];
+      const celsius_t et = _MAX(info.target_temperature[e], 180);
       if (et) {
         #if HAS_MULTI_HOTEND
           sprintf_P(cmd, PSTR("T%iS"), e);
@@ -365,37 +364,59 @@ void PrintJobRecovery::resume() {
     }
   #endif
 
+  // Interpret the saved Z according to flags
+  const float z_print = info.current_position.z,
+              z_raised = z_print + info.zraise;
+
   //
   // Home the axes that can safely be homed, and
   // establish the current position as best we can.
   //
+
+  gcode.process_subcommands_now_P(PSTR("G92.9E0")); // Reset E to 0
+
   #if Z_HOME_DIR > 0
 
-    // If Z homing goes to max...
+    float z_now = z_raised;
+
+    // If Z homing goes to max then just move back to the "raised" position
     gcode.process_subcommands_now_P(PSTR(
-      "G92.9 E0\n"                          // Reset E to 0
-      "G28R0"                               // Home all axes (no raise)
-    ));
+        "G28R0\n"     // Home all axes (no raise)
+        "G1Z%sF1200"  // Move Z down to (raised) height
+      ),
+      dtostrf(z_now, 1, 3, str_1)
+    );
 
   #else
 
-    // If a Z raise occurred at outage restore Z, otherwise raise Z now
-    sprintf_P(cmd, PSTR("G92.9 E0 " TERN(BACKUP_POWER_SUPPLY, "Z%s", "Z0\nG1Z%s")), dtostrf(info.zraise, 1, 3, str_1));
-    gcode.process_subcommands_now(cmd);
+    #if ENABLED(POWER_LOSS_RECOVER_ZHOME) && defined(POWER_LOSS_ZHOME_POS)
+      #define HOMING_Z_DOWN 1
+    #else
+      #define HOME_XY_ONLY 1
+    #endif
 
-    // Home safely with no Z raise
-    gcode.process_subcommands_now_P(PSTR(
-      "G28R0"                               // No raise during G28
-      #if IS_CARTESIAN && (DISABLED(POWER_LOSS_RECOVER_ZHOME) || defined(POWER_LOSS_ZHOME_POS))
-        "XY"                                // Don't home Z on Cartesian unless overridden
-      #endif
-    ));
+    float z_now = info.flag.raised ? z_raised : z_print;
+
+    // Reset E to 0 and set Z to the real position
+    #if HOME_XY_ONLY
+      sprintf_P(cmd, PSTR("G92.9Z%s"), dtostrf(z_now, 1, 3, str_1));
+      gcode.process_subcommands_now(cmd);
+    #endif
+
+    // Does Z need to be raised now? It should be raised before homing XY.
+    if (z_raised > z_now) {
+      z_now = z_raised;
+      sprintf_P(cmd, PSTR("G1Z%sF600"), dtostrf(z_now, 1, 3, str_1));
+      gcode.process_subcommands_now(cmd);
+    }
+
+    // Home XY with no Z raise, and also home Z here if Z isn't homing down below.
+    gcode.process_subcommands_now_P(PSTR("G28R0" TERN_(HOME_XY_ONLY, "XY"))); // No raise during G28
 
   #endif
 
-  #if ENABLED(POWER_LOSS_RECOVER_ZHOME) && defined(POWER_LOSS_ZHOME_POS)
-    // Move to a safe XY position where Z can home while avoiding the print.
-    // If Z_SAFE_HOMING is enabled, its position must also be outside the print area!
+  #if HOMING_Z_DOWN
+    // Move to a safe XY position and home Z while avoiding the print.
     constexpr xy_pos_t p = POWER_LOSS_ZHOME_POS;
     sprintf_P(cmd, PSTR("G1X%sY%sF1000\nG28Z"), dtostrf(p.x, 1, 3, str_1), dtostrf(p.y, 1, 3, str_2));
     gcode.process_subcommands_now(cmd);
@@ -404,9 +425,24 @@ void PrintJobRecovery::resume() {
   // Mark all axes as having been homed (no effect on current_position)
   set_all_homed();
 
+  #if HAS_LEVELING
+    // Restore Z fade and possibly re-enable bed leveling compensation.
+    // Leveling may already be enabled due to the ENABLE_LEVELING_AFTER_G28 option.
+    // TODO: Add a G28 parameter to leave leveling disabled.
+    sprintf_P(cmd, PSTR("M420S%cZ%s"), '0' + (char)info.flag.leveling, dtostrf(info.fade, 1, 1, str_1));
+    gcode.process_subcommands_now(cmd);
+
+    #if HOME_XY_ONLY
+      // The physical Z was adjusted at power-off so undo the M420S1 correction to Z with G92.9.
+      sprintf_P(cmd, PSTR("G92.9Z%s"), dtostrf(z_now, 1, 1, str_1));
+      gcode.process_subcommands_now(cmd);
+    #endif
+  #endif
+
   #if ENABLED(POWER_LOSS_RECOVER_ZHOME)
-    // Z was homed. Now move Z back up to the saved Z height, plus the POWER_LOSS_ZRAISE.
-    sprintf_P(cmd, PSTR("G1Z%sF500"), dtostrf(info.current_position.z + POWER_LOSS_ZRAISE, 1, 3, str_1));
+    // Z was homed down to the bed, so move up to the raised height.
+    z_now = z_raised;
+    sprintf_P(cmd, PSTR("G1Z%sF600"), dtostrf(z_now, 1, 3, str_1));
     gcode.process_subcommands_now(cmd);
   #endif
 
@@ -429,8 +465,23 @@ void PrintJobRecovery::resume() {
     #endif
   #endif
 
-  // Select the previously active tool (with no_move)
-  #if HAS_MULTI_EXTRUDER
+  // Restore all hotend temperatures
+  #if HAS_HOTEND
+    HOTEND_LOOP() {
+      const celsius_t et = info.target_temperature[e];
+      if (et) {
+        #if HAS_MULTI_HOTEND
+          sprintf_P(cmd, PSTR("T%iS"), e);
+          gcode.process_subcommands_now(cmd);
+        #endif
+        sprintf_P(cmd, PSTR("M109S%i"), et);
+        gcode.process_subcommands_now(cmd);
+      }
+    }
+  #endif
+
+  // Restore the previously active tool (with no_move)
+  #if HAS_MULTI_EXTRUDER || HAS_MULTI_HOTEND
     sprintf_P(cmd, PSTR("T%i S"), info.active_extruder);
     gcode.process_subcommands_now(cmd);
   #endif
@@ -457,15 +508,6 @@ void PrintJobRecovery::resume() {
     fwretract.current_hop = info.retract_hop;
   #endif
 
-  #if HAS_LEVELING
-    // Restore leveling state before 'G92 Z' to ensure
-    // the Z stepper count corresponds to the native Z.
-    if (info.fade || info.flag.leveling) {
-      sprintf_P(cmd, PSTR("M420S%cZ%s"), '0' + (char)info.flag.leveling, dtostrf(info.fade, 1, 1, str_1));
-      gcode.process_subcommands_now(cmd);
-    }
-  #endif
-
   #if ENABLED(GRADIENT_MIX)
     memcpy(&mixer.gradient, &info.gradient, sizeof(info.gradient));
   #endif
@@ -492,14 +534,8 @@ void PrintJobRecovery::resume() {
   );
   gcode.process_subcommands_now(cmd);
 
-  // Move back to the saved Z
-  dtostrf(info.current_position.z, 1, 3, str_1);
-  #if Z_HOME_DIR > 0 || ENABLED(POWER_LOSS_RECOVER_ZHOME)
-    sprintf_P(cmd, PSTR("G1 Z%s F500"), str_1);
-  #else
-    gcode.process_subcommands_now_P(PSTR("G1 Z0 F200"));
-    sprintf_P(cmd, PSTR("G92.9 Z%s"), str_1);
-  #endif
+  // Move back down to the saved Z for printing
+  sprintf_P(cmd, PSTR("G1Z%sF600"), dtostrf(z_print, 1, 3, str_1));
   gcode.process_subcommands_now(cmd);
 
   // Restore the feedrate
@@ -552,7 +588,15 @@ void PrintJobRecovery::resume() {
         }
         DEBUG_EOL();
 
-        DEBUG_ECHOLNPAIR("zraise: ", info.zraise);
+        DEBUG_ECHOLNPAIR("feedrate: ", info.feedrate);
+
+        DEBUG_ECHOLNPAIR("zraise: ", info.zraise, " ", info.flag.raised ? "(before)" : "");
+
+        #if ENABLED(GCODE_REPEAT_MARKERS)
+          DEBUG_ECHOLNPAIR("repeat index: ", info.stored_repeat.index);
+          LOOP_L_N(i, info.stored_repeat.index)
+            DEBUG_ECHOLNPAIR("..... sdpos: ", info.stored_repeat.marker.sdpos, " count: ", info.stored_repeat.marker.counter);
+        #endif
 
         #if HAS_HOME_OFFSET
           DEBUG_ECHOPGM("home_offset: ");
@@ -572,12 +616,16 @@ void PrintJobRecovery::resume() {
           DEBUG_EOL();
         #endif
 
-        DEBUG_ECHOLNPAIR("feedrate: ", info.feedrate);
-
         #if HAS_MULTI_EXTRUDER
           DEBUG_ECHOLNPAIR("active_extruder: ", info.active_extruder);
         #endif
 
+        #if DISABLED(NO_VOLUMETRICS)
+          DEBUG_ECHOPGM("filament_size:");
+          LOOP_L_N(i, EXTRUDERS) DEBUG_ECHOLNPAIR(" ", info.filament_size[i]);
+          DEBUG_EOL();
+        #endif
+
         #if HAS_HOTEND
           DEBUG_ECHOPGM("target_temperature: ");
           HOTEND_LOOP() {
@@ -601,8 +649,9 @@ void PrintJobRecovery::resume() {
         #endif
 
         #if HAS_LEVELING
-          DEBUG_ECHOLNPAIR("leveling: ", info.flag.leveling, " fade: ", info.fade);
+          DEBUG_ECHOLNPAIR("leveling: ", info.flag.leveling ? "ON" : "OFF", "  fade: ", info.fade);
         #endif
+
         #if ENABLED(FWRETRACT)
           DEBUG_ECHOPGM("retract: ");
           for (int8_t e = 0; e < EXTRUDERS; e++) {
@@ -612,11 +661,28 @@ void PrintJobRecovery::resume() {
           DEBUG_EOL();
           DEBUG_ECHOLNPAIR("retract_hop: ", info.retract_hop);
         #endif
+
+        // Mixing extruder and gradient
+        #if BOTH(MIXING_EXTRUDER, GRADIENT_MIX)
+          DEBUG_ECHOLNPAIR("gradient: ", info.gradient.enabled ? "ON" : "OFF");
+        #endif
+
         DEBUG_ECHOLNPAIR("sd_filename: ", info.sd_filename);
         DEBUG_ECHOLNPAIR("sdpos: ", info.sdpos);
         DEBUG_ECHOLNPAIR("print_job_elapsed: ", info.print_job_elapsed);
-        DEBUG_ECHOLNPAIR("dryrun: ", AS_DIGIT(info.flag.dryrun));
-        DEBUG_ECHOLNPAIR("allow_cold_extrusion: ", info.flag.allow_cold_extrusion);
+
+        DEBUG_ECHOPGM("axis_relative:");
+        if (TEST(info.axis_relative, REL_X)) DEBUG_ECHOPGM(" REL_X");
+        if (TEST(info.axis_relative, REL_Y)) DEBUG_ECHOPGM(" REL_Y");
+        if (TEST(info.axis_relative, REL_Z)) DEBUG_ECHOPGM(" REL_Z");
+        if (TEST(info.axis_relative, REL_E)) DEBUG_ECHOPGM(" REL_E");
+        if (TEST(info.axis_relative, E_MODE_ABS)) DEBUG_ECHOPGM(" E_MODE_ABS");
+        if (TEST(info.axis_relative, E_MODE_REL)) DEBUG_ECHOPGM(" E_MODE_REL");
+        DEBUG_EOL();
+
+        DEBUG_ECHOLNPAIR("flag.dryrun: ", AS_DIGIT(info.flag.dryrun));
+        DEBUG_ECHOLNPAIR("flag.allow_cold_extrusion: ", AS_DIGIT(info.flag.allow_cold_extrusion));
+        DEBUG_ECHOLNPAIR("flag.volumetric_enabled: ", AS_DIGIT(info.flag.volumetric_enabled));
       }
       else
         DEBUG_ECHOLNPGM("INVALID DATA");

commit b65cdbed91782c83188706a9c340de9c503cf430
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat May 8 04:35:35 2021 -0500

    Signal SD completion later (#21840)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 3736cac453..9d6e0b42f5 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -137,7 +137,7 @@ void PrintJobRecovery::load() {
  * Set info fields that won't change
  */
 void PrintJobRecovery::prepare() {
-  card.getAbsFilename(info.sd_filename);  // SD filename
+  card.getAbsFilenameInCWD(info.sd_filename);  // SD filename
   cmd_sdpos = 0;
 }
 

commit 9f7177c67dc7979ae69c0068ae9a1ece9bc7102c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri May 7 22:36:36 2021 -0500

    Misc Power Loss cleanup

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 10488af709..3736cac453 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -66,9 +66,6 @@ PrintJobRecovery recovery;
 #ifndef POWER_LOSS_PURGE_LEN
   #define POWER_LOSS_PURGE_LEN 0
 #endif
-#ifndef POWER_LOSS_ZRAISE
-  #define POWER_LOSS_ZRAISE 2     // Move on loss with backup power, or on resume without it
-#endif
 
 #if DISABLED(BACKUP_POWER_SUPPLY)
   #undef POWER_LOSS_RETRACT_LEN   // No retract at outage without backup power
@@ -256,7 +253,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
           // Raise the Z axis now
           if (zraise) {
             char cmd[20], str_1[16];
-            sprintf_P(cmd, PSTR("G0 Z%s"), dtostrf(zraise, 1, 3, str_1));
+            sprintf_P(cmd, PSTR("G0Z%s"), dtostrf(zraise, 1, 3, str_1));
             gcode.process_subcommands_now(cmd);
           }
         #else
@@ -348,7 +345,7 @@ void PrintJobRecovery::resume() {
     const celsius_t bt = info.target_temperature_bed;
     if (bt) {
       // Restore the bed temperature
-      sprintf_P(cmd, PSTR("M190 S%i"), bt);
+      sprintf_P(cmd, PSTR("M190S%i"), bt);
       gcode.process_subcommands_now(cmd);
     }
   #endif
@@ -359,10 +356,10 @@ void PrintJobRecovery::resume() {
       const celsius_t et = info.target_temperature[e];
       if (et) {
         #if HAS_MULTI_HOTEND
-          sprintf_P(cmd, PSTR("T%i S"), e);
+          sprintf_P(cmd, PSTR("T%iS"), e);
           gcode.process_subcommands_now(cmd);
         #endif
-        sprintf_P(cmd, PSTR("M109 S%i"), et);
+        sprintf_P(cmd, PSTR("M109S%i"), et);
         gcode.process_subcommands_now(cmd);
       }
     }
@@ -370,7 +367,7 @@ void PrintJobRecovery::resume() {
 
   //
   // Home the axes that can safely be homed, and
-  // establish the current position as best we can
+  // establish the current position as best we can.
   //
   #if Z_HOME_DIR > 0
 
@@ -380,7 +377,7 @@ void PrintJobRecovery::resume() {
       "G28R0"                               // Home all axes (no raise)
     ));
 
-  #else // "G92.9 E0 ..."
+  #else
 
     // If a Z raise occurred at outage restore Z, otherwise raise Z now
     sprintf_P(cmd, PSTR("G92.9 E0 " TERN(BACKUP_POWER_SUPPLY, "Z%s", "Z0\nG1Z%s")), dtostrf(info.zraise, 1, 3, str_1));
@@ -475,7 +472,7 @@ void PrintJobRecovery::resume() {
 
   // Un-retract if there was a retract at outage
   #if ENABLED(BACKUP_POWER_SUPPLY) && POWER_LOSS_RETRACT_LEN > 0
-    gcode.process_subcommands_now_P(PSTR("G1 E" STRINGIFY(POWER_LOSS_RETRACT_LEN) " F3000"));
+    gcode.process_subcommands_now_P(PSTR("G1E" STRINGIFY(POWER_LOSS_RETRACT_LEN) "F3000"));
   #endif
 
   // Additional purge on resume if configured
@@ -488,8 +485,8 @@ void PrintJobRecovery::resume() {
     gcode.process_subcommands_now_P(PSTR("G12"));
   #endif
 
-  // Move back to the saved XY
-  sprintf_P(cmd, PSTR("G1 X%s Y%s F3000"),
+  // Move back over to the saved XY
+  sprintf_P(cmd, PSTR("G1X%sY%sF3000"),
     dtostrf(info.current_position.x, 1, 3, str_1),
     dtostrf(info.current_position.y, 1, 3, str_2)
   );
@@ -506,11 +503,11 @@ void PrintJobRecovery::resume() {
   gcode.process_subcommands_now(cmd);
 
   // Restore the feedrate
-  sprintf_P(cmd, PSTR("G1 F%d"), info.feedrate);
+  sprintf_P(cmd, PSTR("G1F%d"), info.feedrate);
   gcode.process_subcommands_now(cmd);
 
   // Restore E position with G92.9
-  sprintf_P(cmd, PSTR("G92.9 E%s"), dtostrf(info.current_position.e, 1, 3, str_1));
+  sprintf_P(cmd, PSTR("G92.9E%s"), dtostrf(info.current_position.e, 1, 3, str_1));
   gcode.process_subcommands_now(cmd);
 
   TERN_(GCODE_REPEAT_MARKERS, repeat = info.stored_repeat);
@@ -535,7 +532,7 @@ void PrintJobRecovery::resume() {
   char *fn = info.sd_filename;
   sprintf_P(cmd, M23_STR, fn);
   gcode.process_subcommands_now(cmd);
-  sprintf_P(cmd, PSTR("M24 S%ld T%ld"), resume_sdpos, info.print_job_elapsed);
+  sprintf_P(cmd, PSTR("M24S%ldT%ld"), resume_sdpos, info.print_job_elapsed);
   gcode.process_subcommands_now(cmd);
 
   TERN_(DEBUG_POWER_LOSS_RECOVERY, marlin_debug_flags = old_flags);

commit dfc906930c9b31ddd4d70e9c0ccf15e369abd188
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon May 3 20:55:05 2021 -0500

    Pause and PLR refinements
    
    - Move `pause_print` argument `unload_length` after `show_lcd` so it's next to `DXC_ARGS`.
    - Tweak the position and conditions of PLR save in `resume_print`.
    - Add `Nozzle::park_mode_0_height` accessor to get the raised Z height.
    - Remove extraneous `recovery.save` from `dwin.cpp`.
    - Move PLR `info.volumetric...` to `flag`.
    - Remove some G-code spaces in PLR code
    - Document `pause.h` function declarations.

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index dd4c78726a..10488af709 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -149,6 +149,8 @@ void PrintJobRecovery::prepare() {
  */
 void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/) {
 
+  // We don't check IS_SD_PRINTING here so a save may occur during a pause
+
   #if SAVE_INFO_INTERVAL_MS > 0
     static millis_t next_save_ms; // = 0
     millis_t ms = millis();
@@ -192,7 +194,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
     #endif
 
     #if DISABLED(NO_VOLUMETRICS)
-      info.volumetric_enabled = parser.volumetric_enabled;
+      info.flag.volumetric_enabled = parser.volumetric_enabled;
       #if HAS_MULTI_EXTRUDER
         for (int8_t e = 0; e < EXTRUDERS; e++) info.filament_size[e] = planner.filament_size[e];
       #else
@@ -366,13 +368,16 @@ void PrintJobRecovery::resume() {
     }
   #endif
 
-  // Reset E, raise Z, home XY...
+  //
+  // Home the axes that can safely be homed, and
+  // establish the current position as best we can
+  //
   #if Z_HOME_DIR > 0
 
-    // If Z homing goes to max, just reset E and home all
+    // If Z homing goes to max...
     gcode.process_subcommands_now_P(PSTR(
-      "G92.9 E0\n"
-      "G28R0"
+      "G92.9 E0\n"                          // Reset E to 0
+      "G28R0"                               // Home all axes (no raise)
     ));
 
   #else // "G92.9 E0 ..."
@@ -391,19 +396,20 @@ void PrintJobRecovery::resume() {
 
   #endif
 
-  #ifdef POWER_LOSS_ZHOME_POS
-    // If defined move to a safe Z homing position that avoids the print
+  #if ENABLED(POWER_LOSS_RECOVER_ZHOME) && defined(POWER_LOSS_ZHOME_POS)
+    // Move to a safe XY position where Z can home while avoiding the print.
+    // If Z_SAFE_HOMING is enabled, its position must also be outside the print area!
     constexpr xy_pos_t p = POWER_LOSS_ZHOME_POS;
-    sprintf_P(cmd, PSTR("G1 X%s Y%s F1000\nG28Z"), dtostrf(p.x, 1, 3, str_1), dtostrf(p.y, 1, 3, str_2));
+    sprintf_P(cmd, PSTR("G1X%sY%sF1000\nG28Z"), dtostrf(p.x, 1, 3, str_1), dtostrf(p.y, 1, 3, str_2));
     gcode.process_subcommands_now(cmd);
   #endif
 
-  // Ensure that all axes are marked as homed
+  // Mark all axes as having been homed (no effect on current_position)
   set_all_homed();
 
   #if ENABLED(POWER_LOSS_RECOVER_ZHOME)
-    // Now move to ZsavedPos + POWER_LOSS_ZRAISE
-    sprintf_P(cmd, PSTR("G1 F500 Z%s"), dtostrf(info.current_position.z + POWER_LOSS_ZRAISE, 1, 3, str_1));
+    // Z was homed. Now move Z back up to the saved Z height, plus the POWER_LOSS_ZRAISE.
+    sprintf_P(cmd, PSTR("G1Z%sF500"), dtostrf(info.current_position.z + POWER_LOSS_ZRAISE, 1, 3, str_1));
     gcode.process_subcommands_now(cmd);
   #endif
 
@@ -411,16 +417,16 @@ void PrintJobRecovery::resume() {
   #if DISABLED(NO_VOLUMETRICS)
     #if HAS_MULTI_EXTRUDER
       for (int8_t e = 0; e < EXTRUDERS; e++) {
-        sprintf_P(cmd, PSTR("M200 T%i D%s"), e, dtostrf(info.filament_size[e], 1, 3, str_1));
+        sprintf_P(cmd, PSTR("M200T%iD%s"), e, dtostrf(info.filament_size[e], 1, 3, str_1));
         gcode.process_subcommands_now(cmd);
       }
-      if (!info.volumetric_enabled) {
-        sprintf_P(cmd, PSTR("M200 T%i D0"), info.active_extruder);
+      if (!info.flag.volumetric_enabled) {
+        sprintf_P(cmd, PSTR("M200T%iD0"), info.active_extruder);
         gcode.process_subcommands_now(cmd);
       }
     #else
-      if (info.volumetric_enabled) {
-        sprintf_P(cmd, PSTR("M200 D%s"), dtostrf(info.filament_size[0], 1, 3, str_1));
+      if (info.flag.volumetric_enabled) {
+        sprintf_P(cmd, PSTR("M200D%s"), dtostrf(info.filament_size[0], 1, 3, str_1));
         gcode.process_subcommands_now(cmd);
       }
     #endif
@@ -437,13 +443,13 @@ void PrintJobRecovery::resume() {
     FANS_LOOP(i) {
       const int f = info.fan_speed[i];
       if (f) {
-        sprintf_P(cmd, PSTR("M106 P%i S%i"), i, f);
+        sprintf_P(cmd, PSTR("M106P%iS%i"), i, f);
         gcode.process_subcommands_now(cmd);
       }
     }
   #endif
 
-  // Restore retract and hop state
+  // Restore retract and hop state from an active `G10` command
   #if ENABLED(FWRETRACT)
     LOOP_L_N(e, EXTRUDERS) {
       if (info.retract[e] != 0.0) {
@@ -458,7 +464,7 @@ void PrintJobRecovery::resume() {
     // Restore leveling state before 'G92 Z' to ensure
     // the Z stepper count corresponds to the native Z.
     if (info.fade || info.flag.leveling) {
-      sprintf_P(cmd, PSTR("M420 S%i Z%s"), int(info.flag.leveling), dtostrf(info.fade, 1, 1, str_1));
+      sprintf_P(cmd, PSTR("M420S%cZ%s"), '0' + (char)info.flag.leveling, dtostrf(info.fade, 1, 1, str_1));
       gcode.process_subcommands_now(cmd);
     }
   #endif
@@ -468,11 +474,11 @@ void PrintJobRecovery::resume() {
   #endif
 
   // Un-retract if there was a retract at outage
-  #if POWER_LOSS_RETRACT_LEN
+  #if ENABLED(BACKUP_POWER_SUPPLY) && POWER_LOSS_RETRACT_LEN > 0
     gcode.process_subcommands_now_P(PSTR("G1 E" STRINGIFY(POWER_LOSS_RETRACT_LEN) " F3000"));
   #endif
 
-  // Additional purge if configured
+  // Additional purge on resume if configured
   #if POWER_LOSS_PURGE_LEN
     sprintf_P(cmd, PSTR("G1 E%d F3000"), (POWER_LOSS_PURGE_LEN) + (POWER_LOSS_RETRACT_LEN));
     gcode.process_subcommands_now(cmd);

commit 1879eede0d2910cac58f2a90b95989ff4531fa6e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 7 15:43:07 2021 -0500

    Fix axis char printing

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index e45864b484..dd4c78726a 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -612,7 +612,7 @@ void PrintJobRecovery::resume() {
         DEBUG_ECHOLNPAIR("sd_filename: ", info.sd_filename);
         DEBUG_ECHOLNPAIR("sdpos: ", info.sdpos);
         DEBUG_ECHOLNPAIR("print_job_elapsed: ", info.print_job_elapsed);
-        DEBUG_ECHOLNPAIR("dryrun: ", info.flag.dryrun);
+        DEBUG_ECHOLNPAIR("dryrun: ", AS_DIGIT(info.flag.dryrun));
         DEBUG_ECHOLNPAIR("allow_cold_extrusion: ", info.flag.allow_cold_extrusion);
       }
       else

commit 62f37669dc506a6e579389ca549ce5993548944d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Apr 1 17:59:57 2021 -0500

    Replace 'const float &' with 'const_float_t' (#21505)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index cc45d6ecf0..e45864b484 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -240,7 +240,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
 
   #if ENABLED(BACKUP_POWER_SUPPLY)
 
-    void PrintJobRecovery::retract_and_lift(const float &zraise) {
+    void PrintJobRecovery::retract_and_lift(const_float_t zraise) {
       #if POWER_LOSS_RETRACT_LEN || POWER_LOSS_ZRAISE
 
         gcode.set_relative_mode(true);  // Use relative coordinates

commit e5ff55a1be7646b6159e6dedac50bfbe57e6dfa0
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 24 04:11:43 2021 -0500

    Add typedef celsius_t (#21374)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 1bb3a7e915..cc45d6ecf0 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -201,10 +201,10 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
     #endif
 
     #if EXTRUDERS
-      HOTEND_LOOP() info.target_temperature[e] = thermalManager.temp_hotend[e].target;
+      HOTEND_LOOP() info.target_temperature[e] = thermalManager.degTargetHotend(e);
     #endif
 
-    TERN_(HAS_HEATED_BED, info.target_temperature_bed = thermalManager.temp_bed.target);
+    TERN_(HAS_HEATED_BED, info.target_temperature_bed = thermalManager.degTargetBed());
 
     #if HAS_FAN
       COPY(info.fan_speed, thermalManager.fan_speed);
@@ -343,7 +343,7 @@ void PrintJobRecovery::resume() {
   #endif
 
   #if HAS_HEATED_BED
-    const int16_t bt = info.target_temperature_bed;
+    const celsius_t bt = info.target_temperature_bed;
     if (bt) {
       // Restore the bed temperature
       sprintf_P(cmd, PSTR("M190 S%i"), bt);
@@ -354,7 +354,7 @@ void PrintJobRecovery::resume() {
   // Restore all hotend temperatures
   #if HAS_HOTEND
     HOTEND_LOOP() {
-      const int16_t et = info.target_temperature[e];
+      const celsius_t et = info.target_temperature[e];
       if (et) {
         #if HAS_MULTI_HOTEND
           sprintf_P(cmd, PSTR("T%i S"), e);

commit 28404f9e87aea01489c32372ed6a6835ee1bf252
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Mar 1 06:03:36 2021 -0600

    POWER_LOSS_ZHOME_POS followup

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 7413b5bd56..1bb3a7e915 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -393,8 +393,8 @@ void PrintJobRecovery::resume() {
 
   #ifdef POWER_LOSS_ZHOME_POS
     // If defined move to a safe Z homing position that avoids the print
-    constexpr xy_pos_t homepos = POWER_LOSS_ZHOME_POS;
-    sprintf_P(cmd, PSTR("G1 X%s Y%s F1000\nG28Z", dtostrf(homepos.x, 1, 3, str_1), dtostrf(homepos.y, 1, 3, str_2)));
+    constexpr xy_pos_t p = POWER_LOSS_ZHOME_POS;
+    sprintf_P(cmd, PSTR("G1 X%s Y%s F1000\nG28Z"), dtostrf(p.x, 1, 3, str_1), dtostrf(p.y, 1, 3, str_2));
     gcode.process_subcommands_now(cmd);
   #endif
 

commit e66e51fa6d92cce79ade66893639a333ca53e88a
Author: Nick <nick@n-wells.co.uk>
Date:   Mon Mar 1 10:23:10 2021 +0000

    Safe Z homing for Power Loss Recovery (#16909)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 1b1f2bd681..7413b5bd56 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -384,18 +384,25 @@ void PrintJobRecovery::resume() {
     // Home safely with no Z raise
     gcode.process_subcommands_now_P(PSTR(
       "G28R0"                               // No raise during G28
-      #if IS_CARTESIAN && DISABLED(POWER_LOSS_RECOVER_ZHOME)
+      #if IS_CARTESIAN && (DISABLED(POWER_LOSS_RECOVER_ZHOME) || defined(POWER_LOSS_ZHOME_POS))
         "XY"                                // Don't home Z on Cartesian unless overridden
       #endif
     ));
 
   #endif
 
-  // Pretend that all axes are homed
+  #ifdef POWER_LOSS_ZHOME_POS
+    // If defined move to a safe Z homing position that avoids the print
+    constexpr xy_pos_t homepos = POWER_LOSS_ZHOME_POS;
+    sprintf_P(cmd, PSTR("G1 X%s Y%s F1000\nG28Z", dtostrf(homepos.x, 1, 3, str_1), dtostrf(homepos.y, 1, 3, str_2)));
+    gcode.process_subcommands_now(cmd);
+  #endif
+
+  // Ensure that all axes are marked as homed
   set_all_homed();
 
   #if ENABLED(POWER_LOSS_RECOVER_ZHOME)
-    // Z has been homed so restore Z to ZsavedPos + POWER_LOSS_ZRAISE
+    // Now move to ZsavedPos + POWER_LOSS_ZRAISE
     sprintf_P(cmd, PSTR("G1 F500 Z%s"), dtostrf(info.current_position.z + POWER_LOSS_ZRAISE, 1, 3, str_1));
     gcode.process_subcommands_now(cmd);
   #endif
@@ -467,7 +474,7 @@ void PrintJobRecovery::resume() {
 
   // Additional purge if configured
   #if POWER_LOSS_PURGE_LEN
-    sprintf_P(cmd, PSTR("G1 E%d F200"), (POWER_LOSS_PURGE_LEN) + (POWER_LOSS_RETRACT_LEN));
+    sprintf_P(cmd, PSTR("G1 E%d F3000"), (POWER_LOSS_PURGE_LEN) + (POWER_LOSS_RETRACT_LEN));
     gcode.process_subcommands_now(cmd);
   #endif
 
@@ -485,7 +492,7 @@ void PrintJobRecovery::resume() {
   // Move back to the saved Z
   dtostrf(info.current_position.z, 1, 3, str_1);
   #if Z_HOME_DIR > 0 || ENABLED(POWER_LOSS_RECOVER_ZHOME)
-    sprintf_P(cmd, PSTR("G1 Z%s F200"), str_1);
+    sprintf_P(cmd, PSTR("G1 Z%s F500"), str_1);
   #else
     gcode.process_subcommands_now_P(PSTR("G1 Z0 F200"));
     sprintf_P(cmd, PSTR("G92.9 Z%s"), str_1);

commit dd42831cba7334c5d106ba435bdb41b6135971bb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Feb 28 19:43:46 2021 -0600

    Serial macros cleanup

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 46b94dbc11..1b1f2bd681 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -531,7 +531,7 @@ void PrintJobRecovery::resume() {
 #if ENABLED(DEBUG_POWER_LOSS_RECOVERY)
 
   void PrintJobRecovery::debug(PGM_P const prefix) {
-    DEBUG_PRINT_P(prefix);
+    DEBUG_ECHOPGM_P(prefix);
     DEBUG_ECHOLNPAIR(" Job Recovery Info...\nvalid_head:", info.valid_head, " valid_foot:", info.valid_foot);
     if (info.valid_head) {
       if (info.valid_head == info.valid_foot) {

commit e7c711996bd3080f5e343eff5556736cbf2e2416
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Mon Feb 8 07:37:24 2021 +0100

    Serial refactor. Default 8-bit ECHO to int, not char (#20985)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index be35ff8511..46b94dbc11 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -532,7 +532,7 @@ void PrintJobRecovery::resume() {
 
   void PrintJobRecovery::debug(PGM_P const prefix) {
     DEBUG_PRINT_P(prefix);
-    DEBUG_ECHOLNPAIR(" Job Recovery Info...\nvalid_head:", int(info.valid_head), " valid_foot:", int(info.valid_foot));
+    DEBUG_ECHOLNPAIR(" Job Recovery Info...\nvalid_head:", info.valid_head, " valid_foot:", info.valid_foot);
     if (info.valid_head) {
       if (info.valid_head == info.valid_foot) {
         DEBUG_ECHOPGM("current_position: ");
@@ -565,7 +565,7 @@ void PrintJobRecovery::resume() {
         DEBUG_ECHOLNPAIR("feedrate: ", info.feedrate);
 
         #if HAS_MULTI_EXTRUDER
-          DEBUG_ECHOLNPAIR("active_extruder: ", int(info.active_extruder));
+          DEBUG_ECHOLNPAIR("active_extruder: ", info.active_extruder);
         #endif
 
         #if HAS_HOTEND
@@ -584,14 +584,14 @@ void PrintJobRecovery::resume() {
         #if HAS_FAN
           DEBUG_ECHOPGM("fan_speed: ");
           FANS_LOOP(i) {
-            DEBUG_ECHO(int(info.fan_speed[i]));
+            DEBUG_ECHO(info.fan_speed[i]);
             if (i < FAN_COUNT - 1) DEBUG_CHAR(',');
           }
           DEBUG_EOL();
         #endif
 
         #if HAS_LEVELING
-          DEBUG_ECHOLNPAIR("leveling: ", int(info.flag.leveling), " fade: ", info.fade);
+          DEBUG_ECHOLNPAIR("leveling: ", info.flag.leveling, " fade: ", info.fade);
         #endif
         #if ENABLED(FWRETRACT)
           DEBUG_ECHOPGM("retract: ");
@@ -605,8 +605,8 @@ void PrintJobRecovery::resume() {
         DEBUG_ECHOLNPAIR("sd_filename: ", info.sd_filename);
         DEBUG_ECHOLNPAIR("sdpos: ", info.sdpos);
         DEBUG_ECHOLNPAIR("print_job_elapsed: ", info.print_job_elapsed);
-        DEBUG_ECHOLNPAIR("dryrun: ", int(info.flag.dryrun));
-        DEBUG_ECHOLNPAIR("allow_cold_extrusion: ", int(info.flag.allow_cold_extrusion));
+        DEBUG_ECHOLNPAIR("dryrun: ", info.flag.dryrun);
+        DEBUG_ECHOLNPAIR("allow_cold_extrusion: ", info.flag.allow_cold_extrusion);
       }
       else
         DEBUG_ECHOLNPGM("INVALID DATA");

commit d33fe2378c25d258b02440aef6cc31e36753f98f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jan 22 15:01:19 2021 -0600

    Move common strings (#20846)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 0e669a74d4..be35ff8511 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -520,7 +520,6 @@ void PrintJobRecovery::resume() {
 
   // Resume the SD file from the last position
   char *fn = info.sd_filename;
-  extern const char M23_STR[];
   sprintf_P(cmd, M23_STR, fn);
   gcode.process_subcommands_now(cmd);
   sprintf_P(cmd, PSTR("M24 S%ld T%ld"), resume_sdpos, info.print_job_elapsed);

commit 8edcf03715953d7752a3013662362c8a93f0288c
Author: Java <javlonuser@yahoo.com>
Date:   Thu Jan 7 07:57:11 2021 +0500

    Preheat before Power Loss Recovery homing (#20697)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index c679e6b68f..0e669a74d4 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -342,6 +342,30 @@ void PrintJobRecovery::resume() {
     gcode.process_subcommands_now_P(PSTR("M420 S0 Z0"));
   #endif
 
+  #if HAS_HEATED_BED
+    const int16_t bt = info.target_temperature_bed;
+    if (bt) {
+      // Restore the bed temperature
+      sprintf_P(cmd, PSTR("M190 S%i"), bt);
+      gcode.process_subcommands_now(cmd);
+    }
+  #endif
+
+  // Restore all hotend temperatures
+  #if HAS_HOTEND
+    HOTEND_LOOP() {
+      const int16_t et = info.target_temperature[e];
+      if (et) {
+        #if HAS_MULTI_HOTEND
+          sprintf_P(cmd, PSTR("T%i S"), e);
+          gcode.process_subcommands_now(cmd);
+        #endif
+        sprintf_P(cmd, PSTR("M109 S%i"), et);
+        gcode.process_subcommands_now(cmd);
+      }
+    }
+  #endif
+
   // Reset E, raise Z, home XY...
   #if Z_HOME_DIR > 0
 
@@ -353,20 +377,11 @@ void PrintJobRecovery::resume() {
 
   #else // "G92.9 E0 ..."
 
-    // Set Z to 0, raise Z by info.zraise, and Home (XY only for Cartesian)
-    // with no raise. (Only do simulated homing in Marlin Dev Mode.)
-
-    sprintf_P(cmd, PSTR("G92.9 E0 "
-        #if ENABLED(BACKUP_POWER_SUPPLY)
-          "Z%s"                             // Z was already raised at outage
-        #else
-          "Z0\nG1Z%s"                       // Set Z=0 and Raise Z now
-        #endif
-      ),
-      dtostrf(info.zraise, 1, 3, str_1)
-    );
+    // If a Z raise occurred at outage restore Z, otherwise raise Z now
+    sprintf_P(cmd, PSTR("G92.9 E0 " TERN(BACKUP_POWER_SUPPLY, "Z%s", "Z0\nG1Z%s")), dtostrf(info.zraise, 1, 3, str_1));
     gcode.process_subcommands_now(cmd);
 
+    // Home safely with no Z raise
     gcode.process_subcommands_now_P(PSTR(
       "G28R0"                               // No raise during G28
       #if IS_CARTESIAN && DISABLED(POWER_LOSS_RECOVER_ZHOME)
@@ -404,30 +419,6 @@ void PrintJobRecovery::resume() {
     #endif
   #endif
 
-  #if HAS_HEATED_BED
-    const int16_t bt = info.target_temperature_bed;
-    if (bt) {
-      // Restore the bed temperature
-      sprintf_P(cmd, PSTR("M190 S%i"), bt);
-      gcode.process_subcommands_now(cmd);
-    }
-  #endif
-
-  // Restore all hotend temperatures
-  #if HAS_HOTEND
-    HOTEND_LOOP() {
-      const int16_t et = info.target_temperature[e];
-      if (et) {
-        #if HAS_MULTI_HOTEND
-          sprintf_P(cmd, PSTR("T%i S"), e);
-          gcode.process_subcommands_now(cmd);
-        #endif
-        sprintf_P(cmd, PSTR("M109 S%i"), et);
-        gcode.process_subcommands_now(cmd);
-      }
-    }
-  #endif
-
   // Select the previously active tool (with no_move)
   #if HAS_MULTI_EXTRUDER
     sprintf_P(cmd, PSTR("T%i S"), info.active_extruder);

commit 20b3af1cc2c4a5e8505d1aae3419ab9418ed88ab
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Dec 16 22:18:40 2020 -0600

    Use homing_feedrate function

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index c55b278a72..c679e6b68f 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -180,7 +180,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
 
     // Machine state
     info.current_position = current_position;
-    info.feedrate = uint16_t(feedrate_mm_s * 60.0f);
+    info.feedrate = uint16_t(MMS_TO_MMM(feedrate_mm_s));
     info.zraise = zraise;
 
     TERN_(GCODE_REPEAT_MARKERS, info.stored_repeat = repeat);

commit b6a32500c401877e3ee1300fa613e81086bb31d3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Nov 26 21:18:40 2020 -0600

    M808 Repeat Markers (#20084)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index c4e0ef694a..c55b278a72 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -182,6 +182,8 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
     info.current_position = current_position;
     info.feedrate = uint16_t(feedrate_mm_s * 60.0f);
     info.zraise = zraise;
+
+    TERN_(GCODE_REPEAT_MARKERS, info.stored_repeat = repeat);
     TERN_(HAS_HOME_OFFSET, info.home_offset = home_offset);
     TERN_(HAS_POSITION_SHIFT, info.position_shift = position_shift);
 
@@ -507,6 +509,7 @@ void PrintJobRecovery::resume() {
   sprintf_P(cmd, PSTR("G92.9 E%s"), dtostrf(info.current_position.e, 1, 3, str_1));
   gcode.process_subcommands_now(cmd);
 
+  TERN_(GCODE_REPEAT_MARKERS, repeat = info.stored_repeat);
   TERN_(HAS_HOME_OFFSET, home_offset = info.home_offset);
   TERN_(HAS_POSITION_SHIFT, position_shift = info.position_shift);
   #if HAS_HOME_OFFSET || HAS_POSITION_SHIFT

commit 7e902b7e295870bc3d4b69132be5d7e2c2634902
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Nov 20 21:25:51 2020 -0600

    Power-Loss cleanup

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index bef2309449..c4e0ef694a 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -180,10 +180,10 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
 
     // Machine state
     info.current_position = current_position;
+    info.feedrate = uint16_t(feedrate_mm_s * 60.0f);
     info.zraise = zraise;
     TERN_(HAS_HOME_OFFSET, info.home_offset = home_offset);
     TERN_(HAS_POSITION_SHIFT, info.position_shift = position_shift);
-    info.feedrate = uint16_t(feedrate_mm_s * 60.0f);
 
     #if HAS_MULTI_EXTRUDER
       info.active_extruder = active_extruder;
@@ -209,7 +209,7 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
     #endif
 
     #if HAS_LEVELING
-      info.leveling = planner.leveling_active;
+      info.flag.leveling = planner.leveling_active;
       info.fade = TERN0(ENABLE_LEVELING_FADE_HEIGHT, planner.z_fade_height);
     #endif
 
@@ -220,12 +220,12 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
       info.retract_hop = fwretract.current_hop;
     #endif
 
-    // Relative axis modes
-    info.axis_relative = gcode.axis_relative;
-
     // Elapsed print job time
     info.print_job_elapsed = print_job_timer.duration();
 
+    // Relative axis modes
+    info.axis_relative = gcode.axis_relative;
+
     // Misc. Marlin flags
     info.flag.dryrun = !!(marlin_debug_flags & MARLIN_DEBUG_DRYRUN);
     info.flag.allow_cold_extrusion = TERN0(PREVENT_COLD_EXTRUSION, thermalManager.allow_cold_extrude);
@@ -457,8 +457,8 @@ void PrintJobRecovery::resume() {
   #if HAS_LEVELING
     // Restore leveling state before 'G92 Z' to ensure
     // the Z stepper count corresponds to the native Z.
-    if (info.fade || info.leveling) {
-      sprintf_P(cmd, PSTR("M420 S%i Z%s"), int(info.leveling), dtostrf(info.fade, 1, 1, str_1));
+    if (info.fade || info.flag.leveling) {
+      sprintf_P(cmd, PSTR("M420 S%i Z%s"), int(info.flag.leveling), dtostrf(info.fade, 1, 1, str_1));
       gcode.process_subcommands_now(cmd);
     }
   #endif
@@ -507,15 +507,15 @@ void PrintJobRecovery::resume() {
   sprintf_P(cmd, PSTR("G92.9 E%s"), dtostrf(info.current_position.e, 1, 3, str_1));
   gcode.process_subcommands_now(cmd);
 
-  // Relative axis modes
-  gcode.axis_relative = info.axis_relative;
-
   TERN_(HAS_HOME_OFFSET, home_offset = info.home_offset);
   TERN_(HAS_POSITION_SHIFT, position_shift = info.position_shift);
   #if HAS_HOME_OFFSET || HAS_POSITION_SHIFT
     LOOP_XYZ(i) update_workspace_offset((AxisEnum)i);
   #endif
 
+  // Relative axis modes
+  gcode.axis_relative = info.axis_relative;
+
   #if ENABLED(DEBUG_POWER_LOSS_RECOVERY)
     const uint8_t old_flags = marlin_debug_flags;
     marlin_debug_flags |= MARLIN_DEBUG_ECHO;
@@ -598,7 +598,7 @@ void PrintJobRecovery::resume() {
         #endif
 
         #if HAS_LEVELING
-          DEBUG_ECHOLNPAIR("leveling: ", int(info.leveling), " fade: ", info.fade);
+          DEBUG_ECHOLNPAIR("leveling: ", int(info.flag.leveling), " fade: ", info.fade);
         #endif
         #if ENABLED(FWRETRACT)
           DEBUG_ECHOPGM("retract: ");

commit 7216b8f8045d8295a8072b617d37e8a3822a6898
Author: ellensp <ellensp@hotmail.com>
Date:   Thu Nov 12 09:35:13 2020 +1300

    Fix compile with PLR, no fan (#20096)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 874bcff46d..bef2309449 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -433,13 +433,15 @@ void PrintJobRecovery::resume() {
   #endif
 
   // Restore print cooling fan speeds
-  FANS_LOOP(i) {
-    uint8_t f = info.fan_speed[i];
-    if (f) {
-      sprintf_P(cmd, PSTR("M106 P%i S%i"), i, f);
-      gcode.process_subcommands_now(cmd);
+  #if HAS_FAN
+    FANS_LOOP(i) {
+      const int f = info.fan_speed[i];
+      if (f) {
+        sprintf_P(cmd, PSTR("M106 P%i S%i"), i, f);
+        gcode.process_subcommands_now(cmd);
+      }
     }
-  }
+  #endif
 
   // Restore retract and hop state
   #if ENABLED(FWRETRACT)

commit eaf6777a6643a6fab23ceaaa4699cb2466ea6b83
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 16 19:36:25 2020 -0500

    Rename ultralcd => marlinui

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index e4bc605bb5..874bcff46d 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -45,7 +45,7 @@ uint32_t PrintJobRecovery::cmd_sdpos, // = 0
 #endif
 
 #include "../sd/cardreader.h"
-#include "../lcd/ultralcd.h"
+#include "../lcd/marlinui.h"
 #include "../gcode/queue.h"
 #include "../gcode/gcode.h"
 #include "../module/motion.h"

commit 60155aa442f7dbd1654fd493ca3d66edb2ed99f0
Author: Nick <nick@n-wells.co.uk>
Date:   Tue Sep 29 00:53:40 2020 +0100

    Anycubic Chiron full feature support (#19505)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index faf6202dbd..e4bc605bb5 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -367,7 +367,9 @@ void PrintJobRecovery::resume() {
 
     gcode.process_subcommands_now_P(PSTR(
       "G28R0"                               // No raise during G28
-      TERN_(IS_CARTESIAN, "XY")             // Don't home Z on Cartesian
+      #if IS_CARTESIAN && DISABLED(POWER_LOSS_RECOVER_ZHOME)
+        "XY"                                // Don't home Z on Cartesian unless overridden
+      #endif
     ));
 
   #endif
@@ -375,6 +377,12 @@ void PrintJobRecovery::resume() {
   // Pretend that all axes are homed
   set_all_homed();
 
+  #if ENABLED(POWER_LOSS_RECOVER_ZHOME)
+    // Z has been homed so restore Z to ZsavedPos + POWER_LOSS_ZRAISE
+    sprintf_P(cmd, PSTR("G1 F500 Z%s"), dtostrf(info.current_position.z + POWER_LOSS_ZRAISE, 1, 3, str_1));
+    gcode.process_subcommands_now(cmd);
+  #endif
+
   // Recover volumetric extrusion state
   #if DISABLED(NO_VOLUMETRICS)
     #if HAS_MULTI_EXTRUDER
@@ -481,7 +489,7 @@ void PrintJobRecovery::resume() {
 
   // Move back to the saved Z
   dtostrf(info.current_position.z, 1, 3, str_1);
-  #if Z_HOME_DIR > 0
+  #if Z_HOME_DIR > 0 || ENABLED(POWER_LOSS_RECOVER_ZHOME)
     sprintf_P(cmd, PSTR("G1 Z%s F200"), str_1);
   #else
     gcode.process_subcommands_now_P(PSTR("G1 Z0 F200"));

commit 9142f5446a57e9a4094c45c10d753f0ce5a102aa
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 28 15:52:21 2020 -0500

    Improve Power-Loss Recovery (#19540)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index ed3a4b9fad..faf6202dbd 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -112,8 +112,7 @@ void PrintJobRecovery::check() {
   if (card.isMounted()) {
     load();
     if (!valid()) return cancel();
-    queue.inject_P(PSTR("M1000 S"));
-    TERN_(DWIN_CREALITY_LCD, dwin_flag = true);
+    queue.inject_P(PSTR("M1000S"));
   }
 }
 
@@ -227,6 +226,10 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
     // Elapsed print job time
     info.print_job_elapsed = print_job_timer.duration();
 
+    // Misc. Marlin flags
+    info.flag.dryrun = !!(marlin_debug_flags & MARLIN_DEBUG_DRYRUN);
+    info.flag.allow_cold_extrusion = TERN0(PREVENT_COLD_EXTRUSION, thermalManager.allow_cold_extrude);
+
     write();
   }
 }
@@ -326,6 +329,12 @@ void PrintJobRecovery::resume() {
 
   const uint32_t resume_sdpos = info.sdpos; // Get here before the stepper ISR overwrites it
 
+  // Apply the dry-run flag if enabled
+  if (info.flag.dryrun) marlin_debug_flags |= MARLIN_DEBUG_DRYRUN;
+
+  // Restore cold extrusion permission
+  TERN_(PREVENT_COLD_EXTRUSION, thermalManager.allow_cold_extrude = info.flag.allow_cold_extrusion);
+
   #if HAS_LEVELING
     // Make sure leveling is off before any G92 and G28
     gcode.process_subcommands_now_P(PSTR("M420 S0 Z0"));
@@ -337,7 +346,7 @@ void PrintJobRecovery::resume() {
     // If Z homing goes to max, just reset E and home all
     gcode.process_subcommands_now_P(PSTR(
       "G92.9 E0\n"
-      "G28R0" TERN_(MARLIN_DEV_MODE, "S")
+      "G28R0"
     ));
 
   #else // "G92.9 E0 ..."
@@ -358,7 +367,6 @@ void PrintJobRecovery::resume() {
 
     gcode.process_subcommands_now_P(PSTR(
       "G28R0"                               // No raise during G28
-      TERN_(MARLIN_DEV_MODE, "S")           // Simulated Homing
       TERN_(IS_CARTESIAN, "XY")             // Don't home Z on Cartesian
     ));
 
@@ -498,6 +506,14 @@ void PrintJobRecovery::resume() {
     LOOP_XYZ(i) update_workspace_offset((AxisEnum)i);
   #endif
 
+  #if ENABLED(DEBUG_POWER_LOSS_RECOVERY)
+    const uint8_t old_flags = marlin_debug_flags;
+    marlin_debug_flags |= MARLIN_DEBUG_ECHO;
+  #endif
+
+  // Continue to apply PLR when a file is resumed!
+  enable(true);
+
   // Resume the SD file from the last position
   char *fn = info.sd_filename;
   extern const char M23_STR[];
@@ -505,6 +521,8 @@ void PrintJobRecovery::resume() {
   gcode.process_subcommands_now(cmd);
   sprintf_P(cmd, PSTR("M24 S%ld T%ld"), resume_sdpos, info.print_job_elapsed);
   gcode.process_subcommands_now(cmd);
+
+  TERN_(DEBUG_POWER_LOSS_RECOVERY, marlin_debug_flags = old_flags);
 }
 
 #if ENABLED(DEBUG_POWER_LOSS_RECOVERY)
@@ -584,6 +602,8 @@ void PrintJobRecovery::resume() {
         DEBUG_ECHOLNPAIR("sd_filename: ", info.sd_filename);
         DEBUG_ECHOLNPAIR("sdpos: ", info.sdpos);
         DEBUG_ECHOLNPAIR("print_job_elapsed: ", info.print_job_elapsed);
+        DEBUG_ECHOLNPAIR("dryrun: ", int(info.flag.dryrun));
+        DEBUG_ECHOLNPAIR("allow_cold_extrusion: ", int(info.flag.allow_cold_extrusion));
       }
       else
         DEBUG_ECHOLNPGM("INVALID DATA");

commit 76d8d1742c1d4a1efe0fd6c0645d3fc656bfd0b2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 20 18:29:08 2020 -0500

    Add multi-extruder condition

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 06296dd215..ed3a4b9fad 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -186,13 +186,13 @@ void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/
     TERN_(HAS_POSITION_SHIFT, info.position_shift = position_shift);
     info.feedrate = uint16_t(feedrate_mm_s * 60.0f);
 
-    #if EXTRUDERS > 1
+    #if HAS_MULTI_EXTRUDER
       info.active_extruder = active_extruder;
     #endif
 
     #if DISABLED(NO_VOLUMETRICS)
       info.volumetric_enabled = parser.volumetric_enabled;
-      #if EXTRUDERS > 1
+      #if HAS_MULTI_EXTRUDER
         for (int8_t e = 0; e < EXTRUDERS; e++) info.filament_size[e] = planner.filament_size[e];
       #else
         if (parser.volumetric_enabled) info.filament_size[0] = planner.filament_size[active_extruder];
@@ -369,7 +369,7 @@ void PrintJobRecovery::resume() {
 
   // Recover volumetric extrusion state
   #if DISABLED(NO_VOLUMETRICS)
-    #if EXTRUDERS > 1
+    #if HAS_MULTI_EXTRUDER
       for (int8_t e = 0; e < EXTRUDERS; e++) {
         sprintf_P(cmd, PSTR("M200 T%i D%s"), e, dtostrf(info.filament_size[e], 1, 3, str_1));
         gcode.process_subcommands_now(cmd);
@@ -411,7 +411,7 @@ void PrintJobRecovery::resume() {
   #endif
 
   // Select the previously active tool (with no_move)
-  #if EXTRUDERS > 1
+  #if HAS_MULTI_EXTRUDER
     sprintf_P(cmd, PSTR("T%i S"), info.active_extruder);
     gcode.process_subcommands_now(cmd);
   #endif
@@ -543,7 +543,7 @@ void PrintJobRecovery::resume() {
 
         DEBUG_ECHOLNPAIR("feedrate: ", info.feedrate);
 
-        #if EXTRUDERS > 1
+        #if HAS_MULTI_EXTRUDER
           DEBUG_ECHOLNPAIR("active_extruder: ", int(info.active_extruder));
         #endif
 

commit e0b413cf19af87e73b0476daaddf395817db9b35
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Aug 27 16:38:02 2020 -0500

    Add set_all_homed

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 9a3eee31b5..06296dd215 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -365,7 +365,7 @@ void PrintJobRecovery::resume() {
   #endif
 
   // Pretend that all axes are homed
-  axis_homed = axis_known_position = xyz_bits;
+  set_all_homed();
 
   // Recover volumetric extrusion state
   #if DISABLED(NO_VOLUMETRICS)

commit c2d5b63a9882dc02f41017a5b2f24363a55fef8d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Aug 8 18:21:44 2020 -0500

    Fix up STATIC_ITEM (#18962)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 29a2cef97c..9a3eee31b5 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -21,7 +21,7 @@
  */
 
 /**
- * power_loss_recovery.cpp - Resume an SD print after power-loss
+ * feature/powerloss.cpp - Resume an SD print after power-loss
  */
 
 #include "../inc/MarlinConfigPre.h"

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index b9f8dfaa67..29a2cef97c 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit 76b67d55e2b55317c21c8d24d014887f2c2329eb
Author: Jason Smith <jason.inet@gmail.com>
Date:   Tue Jul 14 23:14:03 2020 -0700

    Fix some Power Loss Recovery behaviors (#18558)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 97b30435f1..b9f8dfaa67 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -66,12 +66,16 @@ PrintJobRecovery recovery;
 #ifndef POWER_LOSS_PURGE_LEN
   #define POWER_LOSS_PURGE_LEN 0
 #endif
+#ifndef POWER_LOSS_ZRAISE
+  #define POWER_LOSS_ZRAISE 2     // Move on loss with backup power, or on resume without it
+#endif
+
+#if DISABLED(BACKUP_POWER_SUPPLY)
+  #undef POWER_LOSS_RETRACT_LEN   // No retract at outage without backup power
+#endif
 #ifndef POWER_LOSS_RETRACT_LEN
   #define POWER_LOSS_RETRACT_LEN 0
 #endif
-#ifndef POWER_LOSS_ZRAISE
-  #define POWER_LOSS_ZRAISE 2
-#endif
 
 /**
  * Clear the recovery info
@@ -144,7 +148,7 @@ void PrintJobRecovery::prepare() {
 /**
  * Save the current machine state to the power-loss recovery file
  */
-void PrintJobRecovery::save(const bool force/*=false*/) {
+void PrintJobRecovery::save(const bool force/*=false*/, const float zraise/*=0*/) {
 
   #if SAVE_INFO_INTERVAL_MS > 0
     static millis_t next_save_ms; // = 0
@@ -177,6 +181,7 @@ void PrintJobRecovery::save(const bool force/*=false*/) {
 
     // Machine state
     info.current_position = current_position;
+    info.zraise = zraise;
     TERN_(HAS_HOME_OFFSET, info.home_offset = home_offset);
     TERN_(HAS_POSITION_SHIFT, info.position_shift = position_shift);
     info.feedrate = uint16_t(feedrate_mm_s * 60.0f);
@@ -228,30 +233,73 @@ void PrintJobRecovery::save(const bool force/*=false*/) {
 
 #if PIN_EXISTS(POWER_LOSS)
 
+  #if ENABLED(BACKUP_POWER_SUPPLY)
+
+    void PrintJobRecovery::retract_and_lift(const float &zraise) {
+      #if POWER_LOSS_RETRACT_LEN || POWER_LOSS_ZRAISE
+
+        gcode.set_relative_mode(true);  // Use relative coordinates
+
+        #if POWER_LOSS_RETRACT_LEN
+          // Retract filament now
+          gcode.process_subcommands_now_P(PSTR("G1 F3000 E-" STRINGIFY(POWER_LOSS_RETRACT_LEN)));
+        #endif
+
+        #if POWER_LOSS_ZRAISE
+          // Raise the Z axis now
+          if (zraise) {
+            char cmd[20], str_1[16];
+            sprintf_P(cmd, PSTR("G0 Z%s"), dtostrf(zraise, 1, 3, str_1));
+            gcode.process_subcommands_now(cmd);
+          }
+        #else
+          UNUSED(zraise);
+        #endif
+
+        //gcode.axis_relative = info.axis_relative;
+        planner.synchronize();
+      #endif
+    }
+
+  #endif
+
+  /**
+   * An outage was detected by a sensor pin.
+   *  - If not SD printing, let the machine turn off on its own with no "KILL" screen
+   *  - Disable all heaters first to save energy
+   *  - Save the recovery data for the current instant
+   *  - If backup power is available Retract E and Raise Z
+   *  - Go to the KILL screen
+   */
   void PrintJobRecovery::_outage() {
     #if ENABLED(BACKUP_POWER_SUPPLY)
       static bool lock = false;
-      if (lock) return; // No re-entrance from idle() during raise_z()
+      if (lock) return; // No re-entrance from idle() during retract_and_lift()
       lock = true;
     #endif
-    if (IS_SD_PRINTING()) save(true);
-    TERN_(BACKUP_POWER_SUPPLY, raise_z());
 
-    kill(GET_TEXT(MSG_OUTAGE_RECOVERY));
-  }
+    #if POWER_LOSS_ZRAISE
+      // Get the limited Z-raise to do now or on resume
+      const float zraise = _MAX(0, _MIN(current_position.z + POWER_LOSS_ZRAISE, Z_MAX_POS - 1) - current_position.z);
+    #else
+      constexpr float zraise = 0;
+    #endif
 
-  #if ENABLED(BACKUP_POWER_SUPPLY)
+    // Save, including the limited Z raise
+    if (IS_SD_PRINTING()) save(true, zraise);
+
+    // Disable all heaters to reduce power loss
+    thermalManager.disable_all_heaters();
 
-    void PrintJobRecovery::raise_z() {
-      // Disable all heaters to reduce power loss
-      thermalManager.disable_all_heaters();
+    #if ENABLED(BACKUP_POWER_SUPPLY)
+      // Do a hard-stop of the steppers (with possibly a loud thud)
       quickstop_stepper();
-      // Raise Z axis
-      gcode.process_subcommands_now_P(PSTR("G91\nG0 Z" STRINGIFY(POWER_LOSS_ZRAISE)));
-      planner.synchronize();
-    }
+      // With backup power a retract and raise can be done now
+      retract_and_lift(zraise);
+    #endif
 
-  #endif
+    kill(GET_TEXT(MSG_OUTAGE_RECOVERY));
+  }
 
 #endif
 
@@ -274,6 +322,8 @@ void PrintJobRecovery::write() {
  */
 void PrintJobRecovery::resume() {
 
+  char cmd[MAX_CMD_SIZE+16], str_1[16], str_2[16];
+
   const uint32_t resume_sdpos = info.sdpos; // Get here before the stepper ISR overwrites it
 
   #if HAS_LEVELING
@@ -282,52 +332,46 @@ void PrintJobRecovery::resume() {
   #endif
 
   // Reset E, raise Z, home XY...
-  gcode.process_subcommands_now_P(PSTR("G92.9 E0"
-    #if Z_HOME_DIR > 0
+  #if Z_HOME_DIR > 0
 
-      // If Z homing goes to max, just reset E and home all
-      "\n"
-      "G28R0"
-      TERN_(MARLIN_DEV_MODE, "S")
+    // If Z homing goes to max, just reset E and home all
+    gcode.process_subcommands_now_P(PSTR(
+      "G92.9 E0\n"
+      "G28R0" TERN_(MARLIN_DEV_MODE, "S")
+    ));
 
-    #else // "G92.9 E0 ..."
+  #else // "G92.9 E0 ..."
 
-      // Set Z to 0, raise Z by RECOVERY_ZRAISE, and Home (XY only for Cartesian)
-      // with no raise. (Only do simulated homing in Marlin Dev Mode.)
-      #if ENABLED(BACKUP_POWER_SUPPLY)
-        "Z" STRINGIFY(POWER_LOSS_ZRAISE)    // Z-axis was already raised at outage
-      #else
-        "Z0\n"                              // Set Z=0
-        "G1Z" STRINGIFY(POWER_LOSS_ZRAISE)  // Raise Z
-      #endif
-      "\n"
+    // Set Z to 0, raise Z by info.zraise, and Home (XY only for Cartesian)
+    // with no raise. (Only do simulated homing in Marlin Dev Mode.)
 
-      "G28R0"
-      #if ENABLED(MARLIN_DEV_MODE)
-        "S"
-      #elif !IS_KINEMATIC
-        "XY"
-      #endif
-    #endif
-  ));
-
-  // Pretend that all axes are homed
-  axis_homed = axis_known_position = xyz_bits;
+    sprintf_P(cmd, PSTR("G92.9 E0 "
+        #if ENABLED(BACKUP_POWER_SUPPLY)
+          "Z%s"                             // Z was already raised at outage
+        #else
+          "Z0\nG1Z%s"                       // Set Z=0 and Raise Z now
+        #endif
+      ),
+      dtostrf(info.zraise, 1, 3, str_1)
+    );
+    gcode.process_subcommands_now(cmd);
 
-  char cmd[MAX_CMD_SIZE+16], str_1[16], str_2[16];
+    gcode.process_subcommands_now_P(PSTR(
+      "G28R0"                               // No raise during G28
+      TERN_(MARLIN_DEV_MODE, "S")           // Simulated Homing
+      TERN_(IS_CARTESIAN, "XY")             // Don't home Z on Cartesian
+    ));
 
-  // Select the previously active tool (with no_move)
-  #if EXTRUDERS > 1
-    sprintf_P(cmd, PSTR("T%i S"), info.active_extruder);
-    gcode.process_subcommands_now(cmd);
   #endif
 
+  // Pretend that all axes are homed
+  axis_homed = axis_known_position = xyz_bits;
+
   // Recover volumetric extrusion state
   #if DISABLED(NO_VOLUMETRICS)
     #if EXTRUDERS > 1
       for (int8_t e = 0; e < EXTRUDERS; e++) {
-        dtostrf(info.filament_size[e], 1, 3, str_1);
-        sprintf_P(cmd, PSTR("M200 T%i D%s"), e, str_1);
+        sprintf_P(cmd, PSTR("M200 T%i D%s"), e, dtostrf(info.filament_size[e], 1, 3, str_1));
         gcode.process_subcommands_now(cmd);
       }
       if (!info.volumetric_enabled) {
@@ -336,8 +380,7 @@ void PrintJobRecovery::resume() {
       }
     #else
       if (info.volumetric_enabled) {
-        dtostrf(info.filament_size[0], 1, 3, str_1);
-        sprintf_P(cmd, PSTR("M200 D%s"), str_1);
+        sprintf_P(cmd, PSTR("M200 D%s"), dtostrf(info.filament_size[0], 1, 3, str_1));
         gcode.process_subcommands_now(cmd);
       }
     #endif
@@ -358,7 +401,7 @@ void PrintJobRecovery::resume() {
       const int16_t et = info.target_temperature[e];
       if (et) {
         #if HAS_MULTI_HOTEND
-          sprintf_P(cmd, PSTR("T%i"), e);
+          sprintf_P(cmd, PSTR("T%i S"), e);
           gcode.process_subcommands_now(cmd);
         #endif
         sprintf_P(cmd, PSTR("M109 S%i"), et);
@@ -367,6 +410,12 @@ void PrintJobRecovery::resume() {
     }
   #endif
 
+  // Select the previously active tool (with no_move)
+  #if EXTRUDERS > 1
+    sprintf_P(cmd, PSTR("T%i S"), info.active_extruder);
+    gcode.process_subcommands_now(cmd);
+  #endif
+
   // Restore print cooling fan speeds
   FANS_LOOP(i) {
     uint8_t f = info.fan_speed[i];
@@ -400,18 +449,21 @@ void PrintJobRecovery::resume() {
     memcpy(&mixer.gradient, &info.gradient, sizeof(info.gradient));
   #endif
 
-  // Extrude and retract to clean the nozzle
-  #if POWER_LOSS_PURGE_LEN
-    //sprintf_P(cmd, PSTR("G1 E%d F200"), POWER_LOSS_PURGE_LEN);
-    //gcode.process_subcommands_now(cmd);
-    gcode.process_subcommands_now_P(PSTR("G1 E" STRINGIFY(POWER_LOSS_PURGE_LEN) " F200"));
+  // Un-retract if there was a retract at outage
+  #if POWER_LOSS_RETRACT_LEN
+    gcode.process_subcommands_now_P(PSTR("G1 E" STRINGIFY(POWER_LOSS_RETRACT_LEN) " F3000"));
   #endif
 
-  #if POWER_LOSS_RETRACT_LEN
-    sprintf_P(cmd, PSTR("G1 E%d F3000"), POWER_LOSS_PURGE_LEN - (POWER_LOSS_RETRACT_LEN));
+  // Additional purge if configured
+  #if POWER_LOSS_PURGE_LEN
+    sprintf_P(cmd, PSTR("G1 E%d F200"), (POWER_LOSS_PURGE_LEN) + (POWER_LOSS_RETRACT_LEN));
     gcode.process_subcommands_now(cmd);
   #endif
 
+  #if ENABLED(NOZZLE_CLEAN_FEATURE)
+    gcode.process_subcommands_now_P(PSTR("G12"));
+  #endif
+
   // Move back to the saved XY
   sprintf_P(cmd, PSTR("G1 X%s Y%s F3000"),
     dtostrf(info.current_position.x, 1, 3, str_1),
@@ -429,13 +481,6 @@ void PrintJobRecovery::resume() {
   #endif
   gcode.process_subcommands_now(cmd);
 
-  // Un-retract
-  #if POWER_LOSS_PURGE_LEN
-    //sprintf_P(cmd, PSTR("G1 E%d F3000"), POWER_LOSS_PURGE_LEN);
-    //gcode.process_subcommands_now(cmd);
-    gcode.process_subcommands_now_P(PSTR("G1 E" STRINGIFY(POWER_LOSS_PURGE_LEN) " F3000"));
-  #endif
-
   // Restore the feedrate
   sprintf_P(cmd, PSTR("G1 F%d"), info.feedrate);
   gcode.process_subcommands_now(cmd);
@@ -476,6 +521,8 @@ void PrintJobRecovery::resume() {
         }
         DEBUG_EOL();
 
+        DEBUG_ECHOLNPAIR("zraise: ", info.zraise);
+
         #if HAS_HOME_OFFSET
           DEBUG_ECHOPGM("home_offset: ");
           LOOP_XYZ(i) {

commit 759d63d76a505ad11742f5e90a331b4401a99900
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jul 6 19:14:15 2020 -0500

    Tweak PLR debug

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 0ae1280213..97b30435f1 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -523,7 +523,7 @@ void PrintJobRecovery::resume() {
         #endif
 
         #if HAS_LEVELING
-          DEBUG_ECHOLNPAIR("leveling: ", int(info.leveling), "\n fade: ", int(info.fade));
+          DEBUG_ECHOLNPAIR("leveling: ", int(info.leveling), " fade: ", info.fade);
         #endif
         #if ENABLED(FWRETRACT)
           DEBUG_ECHOPGM("retract: ");

commit 25c7c43a829e3bbc581aae20d24b724a7ad8fbdb
Author: Fabio Santos <fabiosan@live.com>
Date:   Mon Jun 22 19:12:45 2020 -0700

    Add SERIAL_FLOAT_PRECISION option (#18367)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 12de2d26ff..0ae1280213 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -472,7 +472,7 @@ void PrintJobRecovery::resume() {
         DEBUG_ECHOPGM("current_position: ");
         LOOP_XYZE(i) {
           if (i) DEBUG_CHAR(',');
-          DEBUG_ECHO(info.current_position[i]);
+          DEBUG_DECIMAL(info.current_position[i]);
         }
         DEBUG_EOL();
 
@@ -480,7 +480,7 @@ void PrintJobRecovery::resume() {
           DEBUG_ECHOPGM("home_offset: ");
           LOOP_XYZ(i) {
             if (i) DEBUG_CHAR(',');
-            DEBUG_ECHO(info.home_offset[i]);
+            DEBUG_DECIMAL(info.home_offset[i]);
           }
           DEBUG_EOL();
         #endif
@@ -489,7 +489,7 @@ void PrintJobRecovery::resume() {
           DEBUG_ECHOPGM("position_shift: ");
           LOOP_XYZ(i) {
             if (i) DEBUG_CHAR(',');
-            DEBUG_ECHO(info.position_shift[i]);
+            DEBUG_DECIMAL(info.position_shift[i]);
           }
           DEBUG_EOL();
         #endif

commit f4c258dc2355fee871bec6e11095c7c4777b160d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jun 16 01:45:27 2020 -0500

    Creality Ender 3 v2 (#17719)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 0ba8737f2f..12de2d26ff 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -40,6 +40,10 @@ uint8_t PrintJobRecovery::queue_index_r;
 uint32_t PrintJobRecovery::cmd_sdpos, // = 0
          PrintJobRecovery::sdpos[BUFSIZE];
 
+#if ENABLED(DWIN_CREALITY_LCD)
+  bool PrintJobRecovery::dwin_flag; // = false
+#endif
+
 #include "../sd/cardreader.h"
 #include "../lcd/ultralcd.h"
 #include "../gcode/queue.h"
@@ -105,6 +109,7 @@ void PrintJobRecovery::check() {
     load();
     if (!valid()) return cancel();
     queue.inject_P(PSTR("M1000 S"));
+    TERN_(DWIN_CREALITY_LCD, dwin_flag = true);
   }
 }
 

commit 9fe781ccafb6be8a8b86f6e24c7d19642862c962
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon May 4 16:37:20 2020 -0500

    Tweak powerloss info

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 02a97e3436..0ba8737f2f 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -185,7 +185,7 @@ void PrintJobRecovery::save(const bool force/*=false*/) {
       #if EXTRUDERS > 1
         for (int8_t e = 0; e < EXTRUDERS; e++) info.filament_size[e] = planner.filament_size[e];
       #else
-        if (parser.volumetric_enabled) info.filament_size = planner.filament_size[active_extruder];
+        if (parser.volumetric_enabled) info.filament_size[0] = planner.filament_size[active_extruder];
       #endif
     #endif
 
@@ -331,7 +331,7 @@ void PrintJobRecovery::resume() {
       }
     #else
       if (info.volumetric_enabled) {
-        dtostrf(info.filament_size, 1, 3, str_1);
+        dtostrf(info.filament_size[0], 1, 3, str_1);
         sprintf_P(cmd, PSTR("M200 D%s"), str_1);
         gcode.process_subcommands_now(cmd);
       }

commit 8b3c7dda755ebce5bd57a7ce52891a137ea12b35
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 27 04:41:18 2020 -0500

    Add HAS_FAN and others

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index ccb85049d8..02a97e3436 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -195,7 +195,7 @@ void PrintJobRecovery::save(const bool force/*=false*/) {
 
     TERN_(HAS_HEATED_BED, info.target_temperature_bed = thermalManager.temp_bed.target);
 
-    #if FAN_COUNT
+    #if HAS_FAN
       COPY(info.fan_speed, thermalManager.fan_speed);
     #endif
 
@@ -508,7 +508,7 @@ void PrintJobRecovery::resume() {
           DEBUG_ECHOLNPAIR("target_temperature_bed: ", info.target_temperature_bed);
         #endif
 
-        #if FAN_COUNT
+        #if HAS_FAN
           DEBUG_ECHOPGM("fan_speed: ");
           FANS_LOOP(i) {
             DEBUG_ECHO(int(info.fan_speed[i]));

commit 6d90d1e1f552dca5e21bc61b676b8e8ce731b280
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 22 16:35:03 2020 -0500

    Apply TERN to compact code (#17619)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 397b88d362..ccb85049d8 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -172,12 +172,8 @@ void PrintJobRecovery::save(const bool force/*=false*/) {
 
     // Machine state
     info.current_position = current_position;
-    #if HAS_HOME_OFFSET
-      info.home_offset = home_offset;
-    #endif
-    #if HAS_POSITION_SHIFT
-      info.position_shift = position_shift;
-    #endif
+    TERN_(HAS_HOME_OFFSET, info.home_offset = home_offset);
+    TERN_(HAS_POSITION_SHIFT, info.position_shift = position_shift);
     info.feedrate = uint16_t(feedrate_mm_s * 60.0f);
 
     #if EXTRUDERS > 1
@@ -197,9 +193,7 @@ void PrintJobRecovery::save(const bool force/*=false*/) {
       HOTEND_LOOP() info.target_temperature[e] = thermalManager.temp_hotend[e].target;
     #endif
 
-    #if HAS_HEATED_BED
-      info.target_temperature_bed = thermalManager.temp_bed.target;
-    #endif
+    TERN_(HAS_HEATED_BED, info.target_temperature_bed = thermalManager.temp_bed.target);
 
     #if FAN_COUNT
       COPY(info.fan_speed, thermalManager.fan_speed);
@@ -207,18 +201,10 @@ void PrintJobRecovery::save(const bool force/*=false*/) {
 
     #if HAS_LEVELING
       info.leveling = planner.leveling_active;
-      info.fade = (
-        #if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
-          planner.z_fade_height
-        #else
-          0
-        #endif
-      );
+      info.fade = TERN0(ENABLE_LEVELING_FADE_HEIGHT, planner.z_fade_height);
     #endif
 
-    #if ENABLED(GRADIENT_MIX)
-      memcpy(&info.gradient, &mixer.gradient, sizeof(info.gradient));
-    #endif
+    TERN_(GRADIENT_MIX, memcpy(&info.gradient, &mixer.gradient, sizeof(info.gradient)));
 
     #if ENABLED(FWRETRACT)
       COPY(info.retract, fwretract.current_retract);
@@ -244,9 +230,7 @@ void PrintJobRecovery::save(const bool force/*=false*/) {
       lock = true;
     #endif
     if (IS_SD_PRINTING()) save(true);
-    #if ENABLED(BACKUP_POWER_SUPPLY)
-      raise_z();
-    #endif
+    TERN_(BACKUP_POWER_SUPPLY, raise_z());
 
     kill(GET_TEXT(MSG_OUTAGE_RECOVERY));
   }
@@ -299,9 +283,7 @@ void PrintJobRecovery::resume() {
       // If Z homing goes to max, just reset E and home all
       "\n"
       "G28R0"
-      #if ENABLED(MARLIN_DEV_MODE)
-        "S"
-      #endif
+      TERN_(MARLIN_DEV_MODE, "S")
 
     #else // "G92.9 E0 ..."
 
@@ -460,12 +442,8 @@ void PrintJobRecovery::resume() {
   // Relative axis modes
   gcode.axis_relative = info.axis_relative;
 
-  #if HAS_HOME_OFFSET
-    home_offset = info.home_offset;
-  #endif
-  #if HAS_POSITION_SHIFT
-    position_shift = info.position_shift;
-  #endif
+  TERN_(HAS_HOME_OFFSET, home_offset = info.home_offset);
+  TERN_(HAS_POSITION_SHIFT, position_shift = info.position_shift);
   #if HAS_HOME_OFFSET || HAS_POSITION_SHIFT
     LOOP_XYZ(i) update_workspace_offset((AxisEnum)i);
   #endif

commit d96c769fd6c8dcbe33b376ecbce19bd8c3c163cc
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 19 01:11:56 2020 -0500

    Move Power Loss Recovery check

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 77d0047a5c..397b88d362 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -100,10 +100,10 @@ void PrintJobRecovery::changed() {
  * If a saved state exists send 'M1000 S' to initiate job recovery.
  */
 void PrintJobRecovery::check() {
-  if (!card.isMounted()) card.mount();
+  //if (!card.isMounted()) card.mount();
   if (card.isMounted()) {
     load();
-    if (!valid()) return purge();
+    if (!valid()) return cancel();
     queue.inject_P(PSTR("M1000 S"));
   }
 }

commit 15f6f53638a6778d22a17e1900fb3a9fdc92dade
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 19 23:56:55 2020 -0500

    Add HAS_HOTEND, etc.

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 37d82eec6a..77d0047a5c 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -366,11 +366,11 @@ void PrintJobRecovery::resume() {
   #endif
 
   // Restore all hotend temperatures
-  #if HOTENDS
+  #if HAS_HOTEND
     HOTEND_LOOP() {
       const int16_t et = info.target_temperature[e];
       if (et) {
-        #if HOTENDS > 1
+        #if HAS_MULTI_HOTEND
           sprintf_P(cmd, PSTR("T%i"), e);
           gcode.process_subcommands_now(cmd);
         #endif
@@ -517,7 +517,7 @@ void PrintJobRecovery::resume() {
           DEBUG_ECHOLNPAIR("active_extruder: ", int(info.active_extruder));
         #endif
 
-        #if HOTENDS
+        #if HAS_HOTEND
           DEBUG_ECHOPGM("target_temperature: ");
           HOTEND_LOOP() {
             DEBUG_ECHO(info.target_temperature[e]);

commit a2e9a02429b0a15c88b57dff5b5341601b90685d
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 12 14:43:04 2020 -0500

    Fix PLR when card isn't mounted yet
    
    Fixes a regression from 9bff67bc747

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index bb0062d4ec..37d82eec6a 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -100,7 +100,7 @@ void PrintJobRecovery::changed() {
  * If a saved state exists send 'M1000 S' to initiate job recovery.
  */
 void PrintJobRecovery::check() {
-  //if (!card.isMounted()) card.mount();
+  if (!card.isMounted()) card.mount();
   if (card.isMounted()) {
     load();
     if (!valid()) return purge();

commit 118bd2f8b2a1f81884cb55a8fc00b708a51aa15b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 23:18:16 2020 -0500

    Apply loop shorthand macros (#17159)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
index 7666b5adc6..bb0062d4ec 100644
--- a/Marlin/src/feature/powerloss.cpp
+++ b/Marlin/src/feature/powerloss.cpp
@@ -391,7 +391,7 @@ void PrintJobRecovery::resume() {
 
   // Restore retract and hop state
   #if ENABLED(FWRETRACT)
-    for (uint8_t e = 0; e < EXTRUDERS; e++) {
+    LOOP_L_N(e, EXTRUDERS) {
       if (info.retract[e] != 0.0) {
         fwretract.current_retract[e] = info.retract[e];
         fwretract.retracted[e] = true;

commit 6bead0c1b04152f6a291d851f6cd4029fe0fc616
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 16:29:29 2020 -0500

    Shorter paths to HAL, ExtUI (#17156)

diff --git a/Marlin/src/feature/powerloss.cpp b/Marlin/src/feature/powerloss.cpp
new file mode 100644
index 0000000000..7666b5adc6
--- /dev/null
+++ b/Marlin/src/feature/powerloss.cpp
@@ -0,0 +1,566 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * power_loss_recovery.cpp - Resume an SD print after power-loss
+ */
+
+#include "../inc/MarlinConfigPre.h"
+
+#if ENABLED(POWER_LOSS_RECOVERY)
+
+#include "powerloss.h"
+#include "../core/macros.h"
+
+bool PrintJobRecovery::enabled; // Initialized by settings.load()
+
+SdFile PrintJobRecovery::file;
+job_recovery_info_t PrintJobRecovery::info;
+const char PrintJobRecovery::filename[5] = "/PLR";
+uint8_t PrintJobRecovery::queue_index_r;
+uint32_t PrintJobRecovery::cmd_sdpos, // = 0
+         PrintJobRecovery::sdpos[BUFSIZE];
+
+#include "../sd/cardreader.h"
+#include "../lcd/ultralcd.h"
+#include "../gcode/queue.h"
+#include "../gcode/gcode.h"
+#include "../module/motion.h"
+#include "../module/planner.h"
+#include "../module/printcounter.h"
+#include "../module/temperature.h"
+#include "../core/serial.h"
+
+#if ENABLED(FWRETRACT)
+  #include "fwretract.h"
+#endif
+
+#define DEBUG_OUT ENABLED(DEBUG_POWER_LOSS_RECOVERY)
+#include "../core/debug_out.h"
+
+PrintJobRecovery recovery;
+
+#ifndef POWER_LOSS_PURGE_LEN
+  #define POWER_LOSS_PURGE_LEN 0
+#endif
+#ifndef POWER_LOSS_RETRACT_LEN
+  #define POWER_LOSS_RETRACT_LEN 0
+#endif
+#ifndef POWER_LOSS_ZRAISE
+  #define POWER_LOSS_ZRAISE 2
+#endif
+
+/**
+ * Clear the recovery info
+ */
+void PrintJobRecovery::init() { memset(&info, 0, sizeof(info)); }
+
+/**
+ * Enable or disable then call changed()
+ */
+void PrintJobRecovery::enable(const bool onoff) {
+  enabled = onoff;
+  changed();
+}
+
+/**
+ * The enabled state was changed:
+ *  - Enabled: Purge the job recovery file
+ *  - Disabled: Write the job recovery file
+ */
+void PrintJobRecovery::changed() {
+  if (!enabled)
+    purge();
+  else if (IS_SD_PRINTING())
+    save(true);
+}
+
+/**
+ * Check for Print Job Recovery during setup()
+ *
+ * If a saved state exists send 'M1000 S' to initiate job recovery.
+ */
+void PrintJobRecovery::check() {
+  //if (!card.isMounted()) card.mount();
+  if (card.isMounted()) {
+    load();
+    if (!valid()) return purge();
+    queue.inject_P(PSTR("M1000 S"));
+  }
+}
+
+/**
+ * Delete the recovery file and clear the recovery data
+ */
+void PrintJobRecovery::purge() {
+  init();
+  card.removeJobRecoveryFile();
+}
+
+/**
+ * Load the recovery data, if it exists
+ */
+void PrintJobRecovery::load() {
+  if (exists()) {
+    open(true);
+    (void)file.read(&info, sizeof(info));
+    close();
+  }
+  debug(PSTR("Load"));
+}
+
+/**
+ * Set info fields that won't change
+ */
+void PrintJobRecovery::prepare() {
+  card.getAbsFilename(info.sd_filename);  // SD filename
+  cmd_sdpos = 0;
+}
+
+/**
+ * Save the current machine state to the power-loss recovery file
+ */
+void PrintJobRecovery::save(const bool force/*=false*/) {
+
+  #if SAVE_INFO_INTERVAL_MS > 0
+    static millis_t next_save_ms; // = 0
+    millis_t ms = millis();
+  #endif
+
+  #ifndef POWER_LOSS_MIN_Z_CHANGE
+    #define POWER_LOSS_MIN_Z_CHANGE 0.05  // Vase-mode-friendly out of the box
+  #endif
+
+  // Did Z change since the last call?
+  if (force
+    #if DISABLED(SAVE_EACH_CMD_MODE)      // Always save state when enabled
+      #if SAVE_INFO_INTERVAL_MS > 0       // Save if interval is elapsed
+        || ELAPSED(ms, next_save_ms)
+      #endif
+      // Save if Z is above the last-saved position by some minimum height
+      || current_position.z > info.current_position.z + POWER_LOSS_MIN_Z_CHANGE
+    #endif
+  ) {
+
+    #if SAVE_INFO_INTERVAL_MS > 0
+      next_save_ms = ms + SAVE_INFO_INTERVAL_MS;
+    #endif
+
+    // Set Head and Foot to matching non-zero values
+    if (!++info.valid_head) ++info.valid_head; // non-zero in sequence
+    //if (!IS_SD_PRINTING()) info.valid_head = 0;
+    info.valid_foot = info.valid_head;
+
+    // Machine state
+    info.current_position = current_position;
+    #if HAS_HOME_OFFSET
+      info.home_offset = home_offset;
+    #endif
+    #if HAS_POSITION_SHIFT
+      info.position_shift = position_shift;
+    #endif
+    info.feedrate = uint16_t(feedrate_mm_s * 60.0f);
+
+    #if EXTRUDERS > 1
+      info.active_extruder = active_extruder;
+    #endif
+
+    #if DISABLED(NO_VOLUMETRICS)
+      info.volumetric_enabled = parser.volumetric_enabled;
+      #if EXTRUDERS > 1
+        for (int8_t e = 0; e < EXTRUDERS; e++) info.filament_size[e] = planner.filament_size[e];
+      #else
+        if (parser.volumetric_enabled) info.filament_size = planner.filament_size[active_extruder];
+      #endif
+    #endif
+
+    #if EXTRUDERS
+      HOTEND_LOOP() info.target_temperature[e] = thermalManager.temp_hotend[e].target;
+    #endif
+
+    #if HAS_HEATED_BED
+      info.target_temperature_bed = thermalManager.temp_bed.target;
+    #endif
+
+    #if FAN_COUNT
+      COPY(info.fan_speed, thermalManager.fan_speed);
+    #endif
+
+    #if HAS_LEVELING
+      info.leveling = planner.leveling_active;
+      info.fade = (
+        #if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
+          planner.z_fade_height
+        #else
+          0
+        #endif
+      );
+    #endif
+
+    #if ENABLED(GRADIENT_MIX)
+      memcpy(&info.gradient, &mixer.gradient, sizeof(info.gradient));
+    #endif
+
+    #if ENABLED(FWRETRACT)
+      COPY(info.retract, fwretract.current_retract);
+      info.retract_hop = fwretract.current_hop;
+    #endif
+
+    // Relative axis modes
+    info.axis_relative = gcode.axis_relative;
+
+    // Elapsed print job time
+    info.print_job_elapsed = print_job_timer.duration();
+
+    write();
+  }
+}
+
+#if PIN_EXISTS(POWER_LOSS)
+
+  void PrintJobRecovery::_outage() {
+    #if ENABLED(BACKUP_POWER_SUPPLY)
+      static bool lock = false;
+      if (lock) return; // No re-entrance from idle() during raise_z()
+      lock = true;
+    #endif
+    if (IS_SD_PRINTING()) save(true);
+    #if ENABLED(BACKUP_POWER_SUPPLY)
+      raise_z();
+    #endif
+
+    kill(GET_TEXT(MSG_OUTAGE_RECOVERY));
+  }
+
+  #if ENABLED(BACKUP_POWER_SUPPLY)
+
+    void PrintJobRecovery::raise_z() {
+      // Disable all heaters to reduce power loss
+      thermalManager.disable_all_heaters();
+      quickstop_stepper();
+      // Raise Z axis
+      gcode.process_subcommands_now_P(PSTR("G91\nG0 Z" STRINGIFY(POWER_LOSS_ZRAISE)));
+      planner.synchronize();
+    }
+
+  #endif
+
+#endif
+
+/**
+ * Save the recovery info the recovery file
+ */
+void PrintJobRecovery::write() {
+
+  debug(PSTR("Write"));
+
+  open(false);
+  file.seekSet(0);
+  const int16_t ret = file.write(&info, sizeof(info));
+  if (ret == -1) DEBUG_ECHOLNPGM("Power-loss file write failed.");
+  if (!file.close()) DEBUG_ECHOLNPGM("Power-loss file close failed.");
+}
+
+/**
+ * Resume the saved print job
+ */
+void PrintJobRecovery::resume() {
+
+  const uint32_t resume_sdpos = info.sdpos; // Get here before the stepper ISR overwrites it
+
+  #if HAS_LEVELING
+    // Make sure leveling is off before any G92 and G28
+    gcode.process_subcommands_now_P(PSTR("M420 S0 Z0"));
+  #endif
+
+  // Reset E, raise Z, home XY...
+  gcode.process_subcommands_now_P(PSTR("G92.9 E0"
+    #if Z_HOME_DIR > 0
+
+      // If Z homing goes to max, just reset E and home all
+      "\n"
+      "G28R0"
+      #if ENABLED(MARLIN_DEV_MODE)
+        "S"
+      #endif
+
+    #else // "G92.9 E0 ..."
+
+      // Set Z to 0, raise Z by RECOVERY_ZRAISE, and Home (XY only for Cartesian)
+      // with no raise. (Only do simulated homing in Marlin Dev Mode.)
+      #if ENABLED(BACKUP_POWER_SUPPLY)
+        "Z" STRINGIFY(POWER_LOSS_ZRAISE)    // Z-axis was already raised at outage
+      #else
+        "Z0\n"                              // Set Z=0
+        "G1Z" STRINGIFY(POWER_LOSS_ZRAISE)  // Raise Z
+      #endif
+      "\n"
+
+      "G28R0"
+      #if ENABLED(MARLIN_DEV_MODE)
+        "S"
+      #elif !IS_KINEMATIC
+        "XY"
+      #endif
+    #endif
+  ));
+
+  // Pretend that all axes are homed
+  axis_homed = axis_known_position = xyz_bits;
+
+  char cmd[MAX_CMD_SIZE+16], str_1[16], str_2[16];
+
+  // Select the previously active tool (with no_move)
+  #if EXTRUDERS > 1
+    sprintf_P(cmd, PSTR("T%i S"), info.active_extruder);
+    gcode.process_subcommands_now(cmd);
+  #endif
+
+  // Recover volumetric extrusion state
+  #if DISABLED(NO_VOLUMETRICS)
+    #if EXTRUDERS > 1
+      for (int8_t e = 0; e < EXTRUDERS; e++) {
+        dtostrf(info.filament_size[e], 1, 3, str_1);
+        sprintf_P(cmd, PSTR("M200 T%i D%s"), e, str_1);
+        gcode.process_subcommands_now(cmd);
+      }
+      if (!info.volumetric_enabled) {
+        sprintf_P(cmd, PSTR("M200 T%i D0"), info.active_extruder);
+        gcode.process_subcommands_now(cmd);
+      }
+    #else
+      if (info.volumetric_enabled) {
+        dtostrf(info.filament_size, 1, 3, str_1);
+        sprintf_P(cmd, PSTR("M200 D%s"), str_1);
+        gcode.process_subcommands_now(cmd);
+      }
+    #endif
+  #endif
+
+  #if HAS_HEATED_BED
+    const int16_t bt = info.target_temperature_bed;
+    if (bt) {
+      // Restore the bed temperature
+      sprintf_P(cmd, PSTR("M190 S%i"), bt);
+      gcode.process_subcommands_now(cmd);
+    }
+  #endif
+
+  // Restore all hotend temperatures
+  #if HOTENDS
+    HOTEND_LOOP() {
+      const int16_t et = info.target_temperature[e];
+      if (et) {
+        #if HOTENDS > 1
+          sprintf_P(cmd, PSTR("T%i"), e);
+          gcode.process_subcommands_now(cmd);
+        #endif
+        sprintf_P(cmd, PSTR("M109 S%i"), et);
+        gcode.process_subcommands_now(cmd);
+      }
+    }
+  #endif
+
+  // Restore print cooling fan speeds
+  FANS_LOOP(i) {
+    uint8_t f = info.fan_speed[i];
+    if (f) {
+      sprintf_P(cmd, PSTR("M106 P%i S%i"), i, f);
+      gcode.process_subcommands_now(cmd);
+    }
+  }
+
+  // Restore retract and hop state
+  #if ENABLED(FWRETRACT)
+    for (uint8_t e = 0; e < EXTRUDERS; e++) {
+      if (info.retract[e] != 0.0) {
+        fwretract.current_retract[e] = info.retract[e];
+        fwretract.retracted[e] = true;
+      }
+    }
+    fwretract.current_hop = info.retract_hop;
+  #endif
+
+  #if HAS_LEVELING
+    // Restore leveling state before 'G92 Z' to ensure
+    // the Z stepper count corresponds to the native Z.
+    if (info.fade || info.leveling) {
+      sprintf_P(cmd, PSTR("M420 S%i Z%s"), int(info.leveling), dtostrf(info.fade, 1, 1, str_1));
+      gcode.process_subcommands_now(cmd);
+    }
+  #endif
+
+  #if ENABLED(GRADIENT_MIX)
+    memcpy(&mixer.gradient, &info.gradient, sizeof(info.gradient));
+  #endif
+
+  // Extrude and retract to clean the nozzle
+  #if POWER_LOSS_PURGE_LEN
+    //sprintf_P(cmd, PSTR("G1 E%d F200"), POWER_LOSS_PURGE_LEN);
+    //gcode.process_subcommands_now(cmd);
+    gcode.process_subcommands_now_P(PSTR("G1 E" STRINGIFY(POWER_LOSS_PURGE_LEN) " F200"));
+  #endif
+
+  #if POWER_LOSS_RETRACT_LEN
+    sprintf_P(cmd, PSTR("G1 E%d F3000"), POWER_LOSS_PURGE_LEN - (POWER_LOSS_RETRACT_LEN));
+    gcode.process_subcommands_now(cmd);
+  #endif
+
+  // Move back to the saved XY
+  sprintf_P(cmd, PSTR("G1 X%s Y%s F3000"),
+    dtostrf(info.current_position.x, 1, 3, str_1),
+    dtostrf(info.current_position.y, 1, 3, str_2)
+  );
+  gcode.process_subcommands_now(cmd);
+
+  // Move back to the saved Z
+  dtostrf(info.current_position.z, 1, 3, str_1);
+  #if Z_HOME_DIR > 0
+    sprintf_P(cmd, PSTR("G1 Z%s F200"), str_1);
+  #else
+    gcode.process_subcommands_now_P(PSTR("G1 Z0 F200"));
+    sprintf_P(cmd, PSTR("G92.9 Z%s"), str_1);
+  #endif
+  gcode.process_subcommands_now(cmd);
+
+  // Un-retract
+  #if POWER_LOSS_PURGE_LEN
+    //sprintf_P(cmd, PSTR("G1 E%d F3000"), POWER_LOSS_PURGE_LEN);
+    //gcode.process_subcommands_now(cmd);
+    gcode.process_subcommands_now_P(PSTR("G1 E" STRINGIFY(POWER_LOSS_PURGE_LEN) " F3000"));
+  #endif
+
+  // Restore the feedrate
+  sprintf_P(cmd, PSTR("G1 F%d"), info.feedrate);
+  gcode.process_subcommands_now(cmd);
+
+  // Restore E position with G92.9
+  sprintf_P(cmd, PSTR("G92.9 E%s"), dtostrf(info.current_position.e, 1, 3, str_1));
+  gcode.process_subcommands_now(cmd);
+
+  // Relative axis modes
+  gcode.axis_relative = info.axis_relative;
+
+  #if HAS_HOME_OFFSET
+    home_offset = info.home_offset;
+  #endif
+  #if HAS_POSITION_SHIFT
+    position_shift = info.position_shift;
+  #endif
+  #if HAS_HOME_OFFSET || HAS_POSITION_SHIFT
+    LOOP_XYZ(i) update_workspace_offset((AxisEnum)i);
+  #endif
+
+  // Resume the SD file from the last position
+  char *fn = info.sd_filename;
+  extern const char M23_STR[];
+  sprintf_P(cmd, M23_STR, fn);
+  gcode.process_subcommands_now(cmd);
+  sprintf_P(cmd, PSTR("M24 S%ld T%ld"), resume_sdpos, info.print_job_elapsed);
+  gcode.process_subcommands_now(cmd);
+}
+
+#if ENABLED(DEBUG_POWER_LOSS_RECOVERY)
+
+  void PrintJobRecovery::debug(PGM_P const prefix) {
+    DEBUG_PRINT_P(prefix);
+    DEBUG_ECHOLNPAIR(" Job Recovery Info...\nvalid_head:", int(info.valid_head), " valid_foot:", int(info.valid_foot));
+    if (info.valid_head) {
+      if (info.valid_head == info.valid_foot) {
+        DEBUG_ECHOPGM("current_position: ");
+        LOOP_XYZE(i) {
+          if (i) DEBUG_CHAR(',');
+          DEBUG_ECHO(info.current_position[i]);
+        }
+        DEBUG_EOL();
+
+        #if HAS_HOME_OFFSET
+          DEBUG_ECHOPGM("home_offset: ");
+          LOOP_XYZ(i) {
+            if (i) DEBUG_CHAR(',');
+            DEBUG_ECHO(info.home_offset[i]);
+          }
+          DEBUG_EOL();
+        #endif
+
+        #if HAS_POSITION_SHIFT
+          DEBUG_ECHOPGM("position_shift: ");
+          LOOP_XYZ(i) {
+            if (i) DEBUG_CHAR(',');
+            DEBUG_ECHO(info.position_shift[i]);
+          }
+          DEBUG_EOL();
+        #endif
+
+        DEBUG_ECHOLNPAIR("feedrate: ", info.feedrate);
+
+        #if EXTRUDERS > 1
+          DEBUG_ECHOLNPAIR("active_extruder: ", int(info.active_extruder));
+        #endif
+
+        #if HOTENDS
+          DEBUG_ECHOPGM("target_temperature: ");
+          HOTEND_LOOP() {
+            DEBUG_ECHO(info.target_temperature[e]);
+            if (e < HOTENDS - 1) DEBUG_CHAR(',');
+          }
+          DEBUG_EOL();
+        #endif
+
+        #if HAS_HEATED_BED
+          DEBUG_ECHOLNPAIR("target_temperature_bed: ", info.target_temperature_bed);
+        #endif
+
+        #if FAN_COUNT
+          DEBUG_ECHOPGM("fan_speed: ");
+          FANS_LOOP(i) {
+            DEBUG_ECHO(int(info.fan_speed[i]));
+            if (i < FAN_COUNT - 1) DEBUG_CHAR(',');
+          }
+          DEBUG_EOL();
+        #endif
+
+        #if HAS_LEVELING
+          DEBUG_ECHOLNPAIR("leveling: ", int(info.leveling), "\n fade: ", int(info.fade));
+        #endif
+        #if ENABLED(FWRETRACT)
+          DEBUG_ECHOPGM("retract: ");
+          for (int8_t e = 0; e < EXTRUDERS; e++) {
+            DEBUG_ECHO(info.retract[e]);
+            if (e < EXTRUDERS - 1) DEBUG_CHAR(',');
+          }
+          DEBUG_EOL();
+          DEBUG_ECHOLNPAIR("retract_hop: ", info.retract_hop);
+        #endif
+        DEBUG_ECHOLNPAIR("sd_filename: ", info.sd_filename);
+        DEBUG_ECHOLNPAIR("sdpos: ", info.sdpos);
+        DEBUG_ECHOLNPAIR("print_job_elapsed: ", info.print_job_elapsed);
+      }
+      else
+        DEBUG_ECHOLNPGM("INVALID DATA");
+    }
+    DEBUG_ECHOLNPGM("---");
+  }
+
+#endif // DEBUG_POWER_LOSS_RECOVERY
+
+#endif // POWER_LOSS_RECOVERY
