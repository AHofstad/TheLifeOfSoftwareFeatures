commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
deleted file mode 100644
index 3572991813..0000000000
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ /dev/null
@@ -1,275 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-#include "../../../../inc/MarlinConfigPre.h"
-
-#if HAS_TFT_LVGL_UI
-
-#include "draw_ui.h"
-#include <lv_conf.h>
-
-#include "../../../../inc/MarlinConfig.h"
-#include "../../../../gcode/queue.h"
-
-extern lv_group_t *g;
-static lv_obj_t *scr;
-
-#define LV_KB_CTRL_BTN_FLAGS (LV_BTNM_CTRL_NO_REPEAT | LV_BTNM_CTRL_CLICK_TRIG)
-
-static const char * kb_map_lc[] = {"1#", "q", "w", "e", "r", "t", "y", "u", "i", "o", "p", LV_SYMBOL_BACKSPACE, "\n",
-                                   "ABC", "a", "s", "d", "f", "g", "h", "j", "k", "l", LV_SYMBOL_NEW_LINE, "\n",
-                                   "_", "-", "z", "x", "c", "v", "b", "n", "m", ".", ",", ":", "\n",
-                                   LV_SYMBOL_CLOSE, LV_SYMBOL_LEFT, " ", LV_SYMBOL_RIGHT, LV_SYMBOL_OK, ""};
-
-static const lv_btnm_ctrl_t kb_ctrl_lc_map[] = {
-    LV_KB_CTRL_BTN_FLAGS | 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7,
-    LV_KB_CTRL_BTN_FLAGS | 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7,
-    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-    LV_KB_CTRL_BTN_FLAGS | 2, 2, 6, 2, LV_KB_CTRL_BTN_FLAGS | 2};
-
-static const char * kb_map_uc[] = {"1#", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", LV_SYMBOL_BACKSPACE, "\n",
-                                   "abc", "A", "S", "D", "F", "G", "H", "J", "K", "L", LV_SYMBOL_NEW_LINE, "\n",
-                                   "_", "-", "Z", "X", "C", "V", "B", "N", "M", ".", ",", ":", "\n",
-                                   LV_SYMBOL_CLOSE, LV_SYMBOL_LEFT, " ", LV_SYMBOL_RIGHT, LV_SYMBOL_OK, ""};
-
-static const lv_btnm_ctrl_t kb_ctrl_uc_map[] = {
-    LV_KB_CTRL_BTN_FLAGS | 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7,
-    LV_KB_CTRL_BTN_FLAGS | 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7,
-    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-    LV_KB_CTRL_BTN_FLAGS | 2, 2, 6, 2, LV_KB_CTRL_BTN_FLAGS | 2};
-
-static const char * kb_map_spec[] = {"0", "1", "2", "3", "4" ,"5", "6", "7", "8", "9", ".", LV_SYMBOL_BACKSPACE, "\n",
-                                     "abc", "+", "-", "/", "*", "=", "%", "!", "?", "#", "<", ">", "\n",
-                                     "\\",  "@", "$", "(", ")", "{", "}", "[", "]", ";", "\"", "'", "\n",
-                                     LV_SYMBOL_CLOSE, LV_SYMBOL_LEFT, " ", LV_SYMBOL_RIGHT, LV_SYMBOL_OK, ""};
-
-static const lv_btnm_ctrl_t kb_ctrl_spec_map[] = {
-    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, LV_KB_CTRL_BTN_FLAGS | 2,
-    LV_KB_CTRL_BTN_FLAGS | 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-    LV_KB_CTRL_BTN_FLAGS | 2, 2, 6, 2, LV_KB_CTRL_BTN_FLAGS | 2};
-
-static const lv_btnm_ctrl_t kb_ctrl_num_map[] = {
-        1, 1, 1, LV_KB_CTRL_BTN_FLAGS | 2,
-        1, 1, 1, LV_KB_CTRL_BTN_FLAGS | 2,
-        1, 1, 1, 2,
-        1, 1, 1, 1, 1};
-
-static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
-  if (event != LV_EVENT_VALUE_CHANGED) return;
-
-  lv_kb_ext_t * ext = (lv_kb_ext_t * )lv_obj_get_ext_attr(kb);
-  const uint16_t btn_id = lv_btnm_get_active_btn(kb);
-  if (btn_id == LV_BTNM_BTN_NONE) return;
-  if (lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_HIDDEN | LV_BTNM_CTRL_INACTIVE)) return;
-  if (lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_NO_REPEAT) && event == LV_EVENT_LONG_PRESSED_REPEAT) return;
-
-  const char * txt = lv_btnm_get_active_btn_text(kb);
-  if (!txt) return;
-
-  // Do the corresponding action according to the text of the button
-  if (strcmp(txt, "abc") == 0) {
-    lv_btnm_set_map(kb, kb_map_lc);
-    lv_btnm_set_ctrl_map(kb, kb_ctrl_lc_map);
-    return;
-  }
-  else if (strcmp(txt, "ABC") == 0) {
-    lv_btnm_set_map(kb, kb_map_uc);
-    lv_btnm_set_ctrl_map(kb, kb_ctrl_uc_map);
-    return;
-  }
-  else if (strcmp(txt, "1#") == 0) {
-    lv_btnm_set_map(kb, kb_map_spec);
-    lv_btnm_set_ctrl_map(kb, kb_ctrl_spec_map);
-    return;
-  }
-  else if (strcmp(txt, LV_SYMBOL_CLOSE) == 0) {
-    if (kb->event_cb != lv_kb_def_event_cb) {
-      lv_clear_keyboard();
-      draw_return_ui();
-    }
-    else {
-      lv_kb_set_ta(kb, nullptr); // De-assign the text area to hide its cursor if needed
-      lv_obj_del(kb);
-      return;
-    }
-    return;
-  }
-  else if (strcmp(txt, LV_SYMBOL_OK) == 0) {
-    if (kb->event_cb != lv_kb_def_event_cb) {
-      const char * ret_ta_txt = lv_ta_get_text(ext->ta);
-      switch (keyboard_value) {
-        #if ENABLED(MKS_WIFI_MODULE)
-          case wifiName:
-            memcpy(uiCfg.wifi_name,ret_ta_txt,sizeof(uiCfg.wifi_name));
-            lv_clear_keyboard();
-            draw_return_ui();
-            break;
-          case wifiPassWord:
-            memcpy(uiCfg.wifi_key,ret_ta_txt,sizeof(uiCfg.wifi_name));
-            lv_clear_keyboard();
-            draw_return_ui();
-            break;
-          case wifiConfig:
-            ZERO(uiCfg.wifi_name);
-            memcpy((void *)uiCfg.wifi_name, wifi_list.wifiName[wifi_list.nameIndex], 32);
-
-            ZERO(uiCfg.wifi_key);
-            memcpy((void *)uiCfg.wifi_key, ret_ta_txt, sizeof(uiCfg.wifi_key));
-
-            gCfgItems.wifi_mode_sel = STA_MODEL;
-
-            package_to_wifi(WIFI_PARA_SET, nullptr, 0);
-
-            public_buf_l[0] = 0xA5;
-            public_buf_l[1] = 0x09;
-            public_buf_l[2] = 0x01;
-            public_buf_l[3] = 0x00;
-            public_buf_l[4] = 0x01;
-            public_buf_l[5] = 0xFC;
-            public_buf_l[6] = 0x00;
-            raw_send_to_wifi((uint8_t*)public_buf_l, 6);
-
-            last_disp_state = KEYBOARD_UI;
-            lv_clear_keyboard();
-            wifi_tips_type = TIPS_TYPE_JOINING;
-            lv_draw_wifi_tips();
-            break;
-        #endif // MKS_WIFI_MODULE
-        case autoLevelGcodeCommand:
-          uint8_t buf[100];
-          strncpy((char *)buf,ret_ta_txt,sizeof(buf));
-          update_gcode_command(AUTO_LEVELING_COMMAND_ADDR,buf);
-          lv_clear_keyboard();
-          draw_return_ui();
-          break;
-        case GCodeCommand:
-          if (!queue.ring_buffer.full(3)) {
-            // Hook anything that goes to the serial port
-            MYSERIAL1.setHook(lv_serial_capt_hook, lv_eom_hook, 0);
-            queue.enqueue_one_now(ret_ta_txt);
-          }
-          lv_clear_keyboard();
-          // draw_return_ui is called in the end of message hook
-          break;
-        default: break;
-      }
-    }
-    else
-      lv_kb_set_ta(kb, nullptr); // De-assign the text area to hide it cursor if needed
-  return;
-  }
-
-  // Add the characters to the text area if set
-  if (!ext->ta) return;
-
-  if (strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0)
-    lv_ta_add_char(ext->ta, '\n');
-  else if (strcmp(txt, LV_SYMBOL_LEFT) == 0)
-    lv_ta_cursor_left(ext->ta);
-  else if (strcmp(txt, LV_SYMBOL_RIGHT) == 0)
-    lv_ta_cursor_right(ext->ta);
-  else if (strcmp(txt, LV_SYMBOL_BACKSPACE) == 0)
-    lv_ta_del_char(ext->ta);
-  else if (strcmp(txt, "+/-") == 0) {
-    uint16_t cur = lv_ta_get_cursor_pos(ext->ta);
-    const char * ta_txt = lv_ta_get_text(ext->ta);
-    if (ta_txt[0] == '-') {
-      lv_ta_set_cursor_pos(ext->ta, 1);
-      lv_ta_del_char(ext->ta);
-      lv_ta_add_char(ext->ta, '+');
-      lv_ta_set_cursor_pos(ext->ta, cur);
-    }
-    else if (ta_txt[0] == '+') {
-      lv_ta_set_cursor_pos(ext->ta, 1);
-      lv_ta_del_char(ext->ta);
-      lv_ta_add_char(ext->ta, '-');
-      lv_ta_set_cursor_pos(ext->ta, cur);
-    }
-    else {
-      lv_ta_set_cursor_pos(ext->ta, 0);
-      lv_ta_add_char(ext->ta, '-');
-      lv_ta_set_cursor_pos(ext->ta, cur + 1);
-    }
-  }
-  else {
-    lv_ta_add_text(ext->ta, txt);
-  }
-}
-
-void lv_draw_keyboard() {
-  scr = lv_screen_create(KEYBOARD_UI, "");
-
-  // Create styles for the keyboard
-  static lv_style_t rel_style, pr_style;
-
-  lv_style_copy(&rel_style, &lv_style_btn_rel);
-  rel_style.body.radius = 0;
-  rel_style.body.border.width = 1;
-  rel_style.body.main_color = lv_color_make(0xA9, 0x62, 0x1D);
-  rel_style.body.grad_color = lv_color_make(0xA7, 0x59, 0x0E);
-
-  lv_style_copy(&pr_style, &lv_style_btn_pr);
-  pr_style.body.radius = 0;
-  pr_style.body.border.width = 1;
-  pr_style.body.main_color = lv_color_make(0x72, 0x42, 0x15);
-  pr_style.body.grad_color = lv_color_make(0x6A, 0x3A, 0x0C);
-
-  // Create a keyboard and apply the styles
-  lv_obj_t *kb = lv_kb_create(scr, nullptr);
-  lv_obj_set_event_cb(kb, lv_kb_event_cb);
-  lv_kb_set_cursor_manage(kb, true);
-  lv_kb_set_style(kb, LV_KB_STYLE_BG, &lv_style_transp_tight);
-  lv_kb_set_style(kb, LV_KB_STYLE_BTN_REL, &rel_style);
-  lv_kb_set_style(kb, LV_KB_STYLE_BTN_PR, &pr_style);
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) {
-    }
-  #endif
-
-  // Create a text area. The keyboard will write here
-  lv_obj_t *ta = lv_ta_create(scr, nullptr);
-  lv_obj_align(ta, nullptr, LV_ALIGN_IN_TOP_MID, 0, 10);
-  switch (keyboard_value) {
-    case autoLevelGcodeCommand:
-    get_gcode_command(AUTO_LEVELING_COMMAND_ADDR,(uint8_t *)public_buf_m);
-    public_buf_m[sizeof(public_buf_m)-1] = 0;
-    lv_ta_set_text(ta, public_buf_m);
-      break;
-    case GCodeCommand:
-      // Start with uppercase by default
-      lv_btnm_set_map(kb, kb_map_uc);
-      lv_btnm_set_ctrl_map(kb, kb_ctrl_uc_map);
-      // Fallthrough
-    default:
-    lv_ta_set_text(ta, "");
-  }
-
-  // Assign the text area to the keyboard
-  lv_kb_set_ta(kb, ta);
-}
-
-void lv_clear_keyboard() {
-  lv_obj_del(scr);
-}
-
-
-#endif  // HAS_TFT_LVGL_UI

commit 138340ee99a852bc116e2a436932bed074624fde
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Apr 13 19:34:19 2021 -0300

    Multi-Volume. Select Media for LVGL (#21344)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index a05c558beb..3572991813 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -148,7 +148,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
             public_buf_l[6] = 0x00;
             raw_send_to_wifi((uint8_t*)public_buf_l, 6);
 
-            last_disp_state = KEY_BOARD_UI;
+            last_disp_state = KEYBOARD_UI;
             lv_clear_keyboard();
             wifi_tips_type = TIPS_TYPE_JOINING;
             lv_draw_wifi_tips();
@@ -216,7 +216,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
 }
 
 void lv_draw_keyboard() {
-  scr = lv_screen_create(KEY_BOARD_UI, "");
+  scr = lv_screen_create(KEYBOARD_UI, "");
 
   // Create styles for the keyboard
   static lv_style_t rel_style, pr_style;

commit 84c79d753156a396fca43dd62cd693454efac882
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Apr 13 15:07:25 2021 -0500

    Followup to sprintf cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index 1f84ca6f59..a05c558beb 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -137,7 +137,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
 
             gCfgItems.wifi_mode_sel = STA_MODEL;
 
-            package_to_wifi(WIFI_PARA_SET, (uint8_t *)0, 0);
+            package_to_wifi(WIFI_PARA_SET, nullptr, 0);
 
             public_buf_l[0] = 0xA5;
             public_buf_l[1] = 0x09;

commit dbd28eecc9cd4b5954a4fd1ed0c02bd9788c279b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 10 12:05:05 2021 -0600

    Number serial from 1 to match settings

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index 6e0d7814d0..1f84ca6f59 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -164,7 +164,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
         case GCodeCommand:
           if (!queue.ring_buffer.full(3)) {
             // Hook anything that goes to the serial port
-            MYSERIAL0.setHook(lv_serial_capt_hook, lv_eom_hook, 0);
+            MYSERIAL1.setHook(lv_serial_capt_hook, lv_eom_hook, 0);
             queue.enqueue_one_now(ret_ta_txt);
           }
           lv_clear_keyboard();

commit ec42be346d5c0d072feb8a1b63ef2fdbd6dc1e98
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Fri Feb 26 23:54:46 2021 +0100

    Fix and improve G-code queue (#21122)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index 2cf6f05a99..6e0d7814d0 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -162,7 +162,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
           draw_return_ui();
           break;
         case GCodeCommand:
-          if (queue.length <= (BUFSIZE - 3)) {
+          if (!queue.ring_buffer.full(3)) {
             // Hook anything that goes to the serial port
             MYSERIAL0.setHook(lv_serial_capt_hook, lv_eom_hook, 0);
             queue.enqueue_one_now(ret_ta_txt);

commit c74f972627ab8dcf69a637268cf86682959bd18e
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Mon Feb 1 01:18:39 2021 +0100

    LVGL UI G-code console (#20755)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index ee219d5d0d..2cf6f05a99 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -27,6 +27,7 @@
 #include <lv_conf.h>
 
 #include "../../../../inc/MarlinConfig.h"
+#include "../../../../gcode/queue.h"
 
 extern lv_group_t *g;
 static lv_obj_t *scr;
@@ -153,13 +154,22 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
             lv_draw_wifi_tips();
             break;
         #endif // MKS_WIFI_MODULE
-        case gcodeCommand:
+        case autoLevelGcodeCommand:
           uint8_t buf[100];
           strncpy((char *)buf,ret_ta_txt,sizeof(buf));
           update_gcode_command(AUTO_LEVELING_COMMAND_ADDR,buf);
           lv_clear_keyboard();
           draw_return_ui();
           break;
+        case GCodeCommand:
+          if (queue.length <= (BUFSIZE - 3)) {
+            // Hook anything that goes to the serial port
+            MYSERIAL0.setHook(lv_serial_capt_hook, lv_eom_hook, 0);
+            queue.enqueue_one_now(ret_ta_txt);
+          }
+          lv_clear_keyboard();
+          // draw_return_ui is called in the end of message hook
+          break;
         default: break;
       }
     }
@@ -238,12 +248,18 @@ void lv_draw_keyboard() {
   // Create a text area. The keyboard will write here
   lv_obj_t *ta = lv_ta_create(scr, nullptr);
   lv_obj_align(ta, nullptr, LV_ALIGN_IN_TOP_MID, 0, 10);
-  if (keyboard_value == gcodeCommand) {
+  switch (keyboard_value) {
+    case autoLevelGcodeCommand:
     get_gcode_command(AUTO_LEVELING_COMMAND_ADDR,(uint8_t *)public_buf_m);
     public_buf_m[sizeof(public_buf_m)-1] = 0;
     lv_ta_set_text(ta, public_buf_m);
-  }
-  else {
+      break;
+    case GCodeCommand:
+      // Start with uppercase by default
+      lv_btnm_set_map(kb, kb_map_uc);
+      lv_btnm_set_ctrl_map(kb, kb_ctrl_uc_map);
+      // Fallthrough
+    default:
     lv_ta_set_text(ta, "");
   }
 

commit 35c1b330ec62e698a455176330e7d75600af461d
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Thu Jan 14 12:41:09 2021 +0800

    MKS WiFi for TFT_LVGL_UI (#20191)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index 749738f6ea..ee219d5d0d 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -55,13 +55,13 @@ static const lv_btnm_ctrl_t kb_ctrl_uc_map[] = {
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
     LV_KB_CTRL_BTN_FLAGS | 2, 2, 6, 2, LV_KB_CTRL_BTN_FLAGS | 2};
 
-static const char * kb_map_spec[] = {"0", "1", "2", "3", "4" ,"5", "6", "7", "8", "9", LV_SYMBOL_BACKSPACE, "\n",
+static const char * kb_map_spec[] = {"0", "1", "2", "3", "4" ,"5", "6", "7", "8", "9", ".", LV_SYMBOL_BACKSPACE, "\n",
                                      "abc", "+", "-", "/", "*", "=", "%", "!", "?", "#", "<", ">", "\n",
                                      "\\",  "@", "$", "(", ")", "{", "}", "[", "]", ";", "\"", "'", "\n",
                                      LV_SYMBOL_CLOSE, LV_SYMBOL_LEFT, " ", LV_SYMBOL_RIGHT, LV_SYMBOL_OK, ""};
 
 static const lv_btnm_ctrl_t kb_ctrl_spec_map[] = {
-    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, LV_KB_CTRL_BTN_FLAGS | 2,
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, LV_KB_CTRL_BTN_FLAGS | 2,
     LV_KB_CTRL_BTN_FLAGS | 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
     LV_KB_CTRL_BTN_FLAGS | 2, 2, 6, 2, LV_KB_CTRL_BTN_FLAGS | 2};

commit 44c57ab05a8f909b85f51e08c90316b41e50c455
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 21:02:35 2021 -0600

    MKS UI prelim. cleanup (#20763)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index 9f7c936fb3..749738f6ea 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -73,8 +73,6 @@ static const lv_btnm_ctrl_t kb_ctrl_num_map[] = {
         1, 1, 1, 1, 1};
 
 static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
-  //LV_ASSERT_OBJ(kb, LV_OBJX_NAME);
-
   if (event != LV_EVENT_VALUE_CHANGED) return;
 
   lv_kb_ext_t * ext = (lv_kb_ext_t * )lv_obj_get_ext_attr(kb);
@@ -104,22 +102,18 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
   }
   else if (strcmp(txt, LV_SYMBOL_CLOSE) == 0) {
     if (kb->event_cb != lv_kb_def_event_cb) {
-      //lv_res_t res = lv_event_send(kb, LV_EVENT_CANCEL, nullptr);
-      //if (res != LV_RES_OK) return;
       lv_clear_keyboard();
       draw_return_ui();
     }
     else {
-      lv_kb_set_ta(kb, nullptr); // De-assign the text area  to hide it cursor if needed
+      lv_kb_set_ta(kb, nullptr); // De-assign the text area to hide its cursor if needed
       lv_obj_del(kb);
       return;
     }
-  return;
+    return;
   }
   else if (strcmp(txt, LV_SYMBOL_OK) == 0) {
     if (kb->event_cb != lv_kb_def_event_cb) {
-      //lv_res_t res = lv_event_send(kb, LV_EVENT_APPLY, nullptr);
-      //if (res != LV_RES_OK) return;
       const char * ret_ta_txt = lv_ta_get_text(ext->ta);
       switch (keyboard_value) {
         #if ENABLED(MKS_WIFI_MODULE)
@@ -142,7 +136,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
 
             gCfgItems.wifi_mode_sel = STA_MODEL;
 
-            package_to_wifi(WIFI_PARA_SET, (char *)0, 0);
+            package_to_wifi(WIFI_PARA_SET, (uint8_t *)0, 0);
 
             public_buf_l[0] = 0xA5;
             public_buf_l[1] = 0x09;
@@ -151,7 +145,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
             public_buf_l[4] = 0x01;
             public_buf_l[5] = 0xFC;
             public_buf_l[6] = 0x00;
-            raw_send_to_wifi(public_buf_l, 6);
+            raw_send_to_wifi((uint8_t*)public_buf_l, 6);
 
             last_disp_state = KEY_BOARD_UI;
             lv_clear_keyboard();
@@ -238,8 +232,6 @@ void lv_draw_keyboard() {
   lv_kb_set_style(kb, LV_KB_STYLE_BTN_PR, &pr_style);
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
-      //lv_group_add_obj(g, kb);
-      //lv_group_set_editing(g, true);
     }
   #endif
 
@@ -260,9 +252,6 @@ void lv_draw_keyboard() {
 }
 
 void lv_clear_keyboard() {
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) { /* lv_group_remove_all_objs(g); */ }
-  #endif
   lv_obj_del(scr);
 }
 

commit 3893114c86c195d227e023c9e702197b54b2636f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Nov 19 15:51:53 2020 -0600

    MKS WiFi preliminary changes

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index acf1d15325..9f7c936fb3 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -122,7 +122,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
       //if (res != LV_RES_OK) return;
       const char * ret_ta_txt = lv_ta_get_text(ext->ta);
       switch (keyboard_value) {
-        #if ENABLED(USE_WIFI_FUNCTION)
+        #if ENABLED(MKS_WIFI_MODULE)
           case wifiName:
             memcpy(uiCfg.wifi_name,ret_ta_txt,sizeof(uiCfg.wifi_name));
             lv_clear_keyboard();
@@ -158,7 +158,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
             wifi_tips_type = TIPS_TYPE_JOINING;
             lv_draw_wifi_tips();
             break;
-        #endif // USE_WIFI_FUNCTION
+        #endif // MKS_WIFI_MODULE
         case gcodeCommand:
           uint8_t buf[100];
           strncpy((char *)buf,ret_ta_txt,sizeof(buf));

commit ec23e37a4a31d12febc06922d3fa68446f58d7fb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Oct 24 17:13:10 2020 -0500

    Clean up comments, USB flash, NULLs

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index 7313ed531f..acf1d15325 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -110,7 +110,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
       draw_return_ui();
     }
     else {
-      lv_kb_set_ta(kb, nullptr); /*De-assign the text area  to hide it cursor if needed*/
+      lv_kb_set_ta(kb, nullptr); // De-assign the text area  to hide it cursor if needed
       lv_obj_del(kb);
       return;
     }
@@ -174,7 +174,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
   return;
   }
 
-  /*Add the characters to the text area if set*/
+  // Add the characters to the text area if set
   if (!ext->ta) return;
 
   if (strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0)
@@ -214,7 +214,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
 void lv_draw_keyboard() {
   scr = lv_screen_create(KEY_BOARD_UI, "");
 
-  /*Create styles for the keyboard*/
+  // Create styles for the keyboard
   static lv_style_t rel_style, pr_style;
 
   lv_style_copy(&rel_style, &lv_style_btn_rel);
@@ -229,7 +229,7 @@ void lv_draw_keyboard() {
   pr_style.body.main_color = lv_color_make(0x72, 0x42, 0x15);
   pr_style.body.grad_color = lv_color_make(0x6A, 0x3A, 0x0C);
 
-  /*Create a keyboard and apply the styles*/
+  // Create a keyboard and apply the styles
   lv_obj_t *kb = lv_kb_create(scr, nullptr);
   lv_obj_set_event_cb(kb, lv_kb_event_cb);
   lv_kb_set_cursor_manage(kb, true);
@@ -243,7 +243,7 @@ void lv_draw_keyboard() {
     }
   #endif
 
-  /*Create a text area. The keyboard will write here*/
+  // Create a text area. The keyboard will write here
   lv_obj_t *ta = lv_ta_create(scr, nullptr);
   lv_obj_align(ta, nullptr, LV_ALIGN_IN_TOP_MID, 0, 10);
   if (keyboard_value == gcodeCommand) {
@@ -255,7 +255,7 @@ void lv_draw_keyboard() {
     lv_ta_set_text(ta, "");
   }
 
-  /*Assign the text area to the keyboard*/
+  // Assign the text area to the keyboard
   lv_kb_set_ta(kb, ta);
 }
 

commit 853d01de683ab3efcbb15ef95db869e279053ee0
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 19:28:31 2020 -0300

    More LVGL UI code reduction (#19879)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index 0debf8fa8f..7313ed531f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -84,7 +84,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
   if (lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_NO_REPEAT) && event == LV_EVENT_LONG_PRESSED_REPEAT) return;
 
   const char * txt = lv_btnm_get_active_btn_text(kb);
-  if (txt == nullptr) return;
+  if (!txt) return;
 
   // Do the corresponding action according to the text of the button
   if (strcmp(txt, "abc") == 0) {
@@ -169,14 +169,13 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
         default: break;
       }
     }
-    else {
-      lv_kb_set_ta(kb, nullptr); /*De-assign the text area to hide it cursor if needed*/
-    }
+    else
+      lv_kb_set_ta(kb, nullptr); // De-assign the text area to hide it cursor if needed
   return;
   }
 
   /*Add the characters to the text area if set*/
-  if (ext->ta == nullptr) return;
+  if (!ext->ta) return;
 
   if (strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0)
     lv_ta_add_char(ext->ta, '\n');
@@ -213,15 +212,7 @@ static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
 }
 
 void lv_draw_keyboard() {
-  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != KEY_BOARD_UI) {
-    disp_state_stack._disp_index++;
-    disp_state_stack._disp_state[disp_state_stack._disp_index] = KEY_BOARD_UI;
-  }
-  disp_state = KEY_BOARD_UI;
-
-  scr = lv_screen_create();
-
-  lv_refr_now(lv_refr_get_disp_refreshing());
+  scr = lv_screen_create(KEY_BOARD_UI, "");
 
   /*Create styles for the keyboard*/
   static lv_style_t rel_style, pr_style;

commit 9630c2683c39468bf885c560a1768d8b377d9462
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 01:37:45 2020 -0300

    More MKS UI cleanup, optimization (#19869)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index 35ad439c6e..0debf8fa8f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -28,8 +28,8 @@
 
 #include "../../../../inc/MarlinConfig.h"
 
-extern lv_group_t * g;
-static lv_obj_t * scr;
+extern lv_group_t *g;
+static lv_obj_t *scr;
 
 #define LV_KB_CTRL_BTN_FLAGS (LV_BTNM_CTRL_NO_REPEAT | LV_BTNM_CTRL_CLICK_TRIG)
 
@@ -72,7 +72,7 @@ static const lv_btnm_ctrl_t kb_ctrl_num_map[] = {
         1, 1, 1, 2,
         1, 1, 1, 1, 1};
 
-static void lv_kb_event_cb(lv_obj_t * kb, lv_event_t event) {
+static void lv_kb_event_cb(lv_obj_t *kb, lv_event_t event) {
   //LV_ASSERT_OBJ(kb, LV_OBJX_NAME);
 
   if (event != LV_EVENT_VALUE_CHANGED) return;
@@ -84,7 +84,7 @@ static void lv_kb_event_cb(lv_obj_t * kb, lv_event_t event) {
   if (lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_NO_REPEAT) && event == LV_EVENT_LONG_PRESSED_REPEAT) return;
 
   const char * txt = lv_btnm_get_active_btn_text(kb);
-  if (txt == NULL) return;
+  if (txt == nullptr) return;
 
   // Do the corresponding action according to the text of the button
   if (strcmp(txt, "abc") == 0) {
@@ -104,13 +104,13 @@ static void lv_kb_event_cb(lv_obj_t * kb, lv_event_t event) {
   }
   else if (strcmp(txt, LV_SYMBOL_CLOSE) == 0) {
     if (kb->event_cb != lv_kb_def_event_cb) {
-      //lv_res_t res = lv_event_send(kb, LV_EVENT_CANCEL, NULL);
+      //lv_res_t res = lv_event_send(kb, LV_EVENT_CANCEL, nullptr);
       //if (res != LV_RES_OK) return;
       lv_clear_keyboard();
       draw_return_ui();
     }
     else {
-      lv_kb_set_ta(kb, NULL); /*De-assign the text area  to hide it cursor if needed*/
+      lv_kb_set_ta(kb, nullptr); /*De-assign the text area  to hide it cursor if needed*/
       lv_obj_del(kb);
       return;
     }
@@ -118,7 +118,7 @@ static void lv_kb_event_cb(lv_obj_t * kb, lv_event_t event) {
   }
   else if (strcmp(txt, LV_SYMBOL_OK) == 0) {
     if (kb->event_cb != lv_kb_def_event_cb) {
-      //lv_res_t res = lv_event_send(kb, LV_EVENT_APPLY, NULL);
+      //lv_res_t res = lv_event_send(kb, LV_EVENT_APPLY, nullptr);
       //if (res != LV_RES_OK) return;
       const char * ret_ta_txt = lv_ta_get_text(ext->ta);
       switch (keyboard_value) {
@@ -134,18 +134,16 @@ static void lv_kb_event_cb(lv_obj_t * kb, lv_event_t event) {
             draw_return_ui();
             break;
           case wifiConfig:
-            memset((void *)uiCfg.wifi_name, 0, sizeof(uiCfg.wifi_name));
+            ZERO(uiCfg.wifi_name);
             memcpy((void *)uiCfg.wifi_name, wifi_list.wifiName[wifi_list.nameIndex], 32);
 
-            memset((void *)uiCfg.wifi_key, 0, sizeof(uiCfg.wifi_key));
+            ZERO(uiCfg.wifi_key);
             memcpy((void *)uiCfg.wifi_key, ret_ta_txt, sizeof(uiCfg.wifi_key));
 
             gCfgItems.wifi_mode_sel = STA_MODEL;
 
             package_to_wifi(WIFI_PARA_SET, (char *)0, 0);
 
-            memset(public_buf_l,0,sizeof(public_buf_l));
-
             public_buf_l[0] = 0xA5;
             public_buf_l[1] = 0x09;
             public_buf_l[2] = 0x01;
@@ -172,13 +170,13 @@ static void lv_kb_event_cb(lv_obj_t * kb, lv_event_t event) {
       }
     }
     else {
-      lv_kb_set_ta(kb, NULL); /*De-assign the text area to hide it cursor if needed*/
+      lv_kb_set_ta(kb, nullptr); /*De-assign the text area to hide it cursor if needed*/
     }
   return;
   }
 
   /*Add the characters to the text area if set*/
-  if (ext->ta == NULL) return;
+  if (ext->ta == nullptr) return;
 
   if (strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0)
     lv_ta_add_char(ext->ta, '\n');
@@ -221,11 +219,7 @@ void lv_draw_keyboard() {
   }
   disp_state = KEY_BOARD_UI;
 
-  scr = lv_obj_create(NULL, NULL);
-
-  lv_obj_set_style(scr, &tft_style_scr);
-  lv_scr_load(scr);
-  lv_obj_clean(scr);
+  scr = lv_screen_create();
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
@@ -245,7 +239,7 @@ void lv_draw_keyboard() {
   pr_style.body.grad_color = lv_color_make(0x6A, 0x3A, 0x0C);
 
   /*Create a keyboard and apply the styles*/
-  lv_obj_t *kb = lv_kb_create(scr, NULL);
+  lv_obj_t *kb = lv_kb_create(scr, nullptr);
   lv_obj_set_event_cb(kb, lv_kb_event_cb);
   lv_kb_set_cursor_manage(kb, true);
   lv_kb_set_style(kb, LV_KB_STYLE_BG, &lv_style_transp_tight);
@@ -259,8 +253,8 @@ void lv_draw_keyboard() {
   #endif
 
   /*Create a text area. The keyboard will write here*/
-  lv_obj_t *ta = lv_ta_create(scr, NULL);
-  lv_obj_align(ta, NULL, LV_ALIGN_IN_TOP_MID, 0, 10);
+  lv_obj_t *ta = lv_ta_create(scr, nullptr);
+  lv_obj_align(ta, nullptr, LV_ALIGN_IN_TOP_MID, 0, 10);
   if (keyboard_value == gcodeCommand) {
     get_gcode_command(AUTO_LEVELING_COMMAND_ADDR,(uint8_t *)public_buf_m);
     public_buf_m[sizeof(public_buf_m)-1] = 0;

commit 072f996af70b5ac635893eca2d4bd4bbb4f00acc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 21 12:45:27 2020 -0500

    General cleanup, mostly MKS UI (#19825)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index 902472b884..35ad439c6e 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -23,11 +23,10 @@
 
 #if HAS_TFT_LVGL_UI
 
-#include "lv_conf.h"
 #include "draw_ui.h"
+#include <lv_conf.h>
 
-#include "../../../../../Configuration.h"
-#include "../../../../MarlinCore.h"
+#include "../../../../inc/MarlinConfig.h"
 
 extern lv_group_t * g;
 static lv_obj_t * scr;

commit 6831341ab483a49d7daad4c704bb684d3cbbf075
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Oct 9 16:50:17 2020 -0500

    Batch appercase hex values

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
index f126ffe1dd..902472b884 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -236,14 +236,14 @@ void lv_draw_keyboard() {
   lv_style_copy(&rel_style, &lv_style_btn_rel);
   rel_style.body.radius = 0;
   rel_style.body.border.width = 1;
-  rel_style.body.main_color = lv_color_make(0xa9, 0x62, 0x1d);
-  rel_style.body.grad_color = lv_color_make(0xa7, 0x59, 0x0e);
+  rel_style.body.main_color = lv_color_make(0xA9, 0x62, 0x1D);
+  rel_style.body.grad_color = lv_color_make(0xA7, 0x59, 0x0E);
 
   lv_style_copy(&pr_style, &lv_style_btn_pr);
   pr_style.body.radius = 0;
   pr_style.body.border.width = 1;
   pr_style.body.main_color = lv_color_make(0x72, 0x42, 0x15);
-  pr_style.body.grad_color = lv_color_make(0x6a, 0x3a, 0x0c);
+  pr_style.body.grad_color = lv_color_make(0x6A, 0x3A, 0x0C);
 
   /*Create a keyboard and apply the styles*/
   lv_obj_t *kb = lv_kb_create(scr, NULL);

commit d8ed74904559aa8bdccc8b68acbccfbf1bf779d3
Author: makerbase <4164049@qq.com>
Date:   Mon Sep 21 09:55:02 2020 +0800

    Add MKS Robin E3P, improve LVGL UI (#19442)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
new file mode 100644
index 0000000000..f126ffe1dd
--- /dev/null
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_keyboard.cpp
@@ -0,0 +1,286 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../../inc/MarlinConfigPre.h"
+
+#if HAS_TFT_LVGL_UI
+
+#include "lv_conf.h"
+#include "draw_ui.h"
+
+#include "../../../../../Configuration.h"
+#include "../../../../MarlinCore.h"
+
+extern lv_group_t * g;
+static lv_obj_t * scr;
+
+#define LV_KB_CTRL_BTN_FLAGS (LV_BTNM_CTRL_NO_REPEAT | LV_BTNM_CTRL_CLICK_TRIG)
+
+static const char * kb_map_lc[] = {"1#", "q", "w", "e", "r", "t", "y", "u", "i", "o", "p", LV_SYMBOL_BACKSPACE, "\n",
+                                   "ABC", "a", "s", "d", "f", "g", "h", "j", "k", "l", LV_SYMBOL_NEW_LINE, "\n",
+                                   "_", "-", "z", "x", "c", "v", "b", "n", "m", ".", ",", ":", "\n",
+                                   LV_SYMBOL_CLOSE, LV_SYMBOL_LEFT, " ", LV_SYMBOL_RIGHT, LV_SYMBOL_OK, ""};
+
+static const lv_btnm_ctrl_t kb_ctrl_lc_map[] = {
+    LV_KB_CTRL_BTN_FLAGS | 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7,
+    LV_KB_CTRL_BTN_FLAGS | 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7,
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    LV_KB_CTRL_BTN_FLAGS | 2, 2, 6, 2, LV_KB_CTRL_BTN_FLAGS | 2};
+
+static const char * kb_map_uc[] = {"1#", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", LV_SYMBOL_BACKSPACE, "\n",
+                                   "abc", "A", "S", "D", "F", "G", "H", "J", "K", "L", LV_SYMBOL_NEW_LINE, "\n",
+                                   "_", "-", "Z", "X", "C", "V", "B", "N", "M", ".", ",", ":", "\n",
+                                   LV_SYMBOL_CLOSE, LV_SYMBOL_LEFT, " ", LV_SYMBOL_RIGHT, LV_SYMBOL_OK, ""};
+
+static const lv_btnm_ctrl_t kb_ctrl_uc_map[] = {
+    LV_KB_CTRL_BTN_FLAGS | 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7,
+    LV_KB_CTRL_BTN_FLAGS | 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7,
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    LV_KB_CTRL_BTN_FLAGS | 2, 2, 6, 2, LV_KB_CTRL_BTN_FLAGS | 2};
+
+static const char * kb_map_spec[] = {"0", "1", "2", "3", "4" ,"5", "6", "7", "8", "9", LV_SYMBOL_BACKSPACE, "\n",
+                                     "abc", "+", "-", "/", "*", "=", "%", "!", "?", "#", "<", ">", "\n",
+                                     "\\",  "@", "$", "(", ")", "{", "}", "[", "]", ";", "\"", "'", "\n",
+                                     LV_SYMBOL_CLOSE, LV_SYMBOL_LEFT, " ", LV_SYMBOL_RIGHT, LV_SYMBOL_OK, ""};
+
+static const lv_btnm_ctrl_t kb_ctrl_spec_map[] = {
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, LV_KB_CTRL_BTN_FLAGS | 2,
+    LV_KB_CTRL_BTN_FLAGS | 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    LV_KB_CTRL_BTN_FLAGS | 2, 2, 6, 2, LV_KB_CTRL_BTN_FLAGS | 2};
+
+static const lv_btnm_ctrl_t kb_ctrl_num_map[] = {
+        1, 1, 1, LV_KB_CTRL_BTN_FLAGS | 2,
+        1, 1, 1, LV_KB_CTRL_BTN_FLAGS | 2,
+        1, 1, 1, 2,
+        1, 1, 1, 1, 1};
+
+static void lv_kb_event_cb(lv_obj_t * kb, lv_event_t event) {
+  //LV_ASSERT_OBJ(kb, LV_OBJX_NAME);
+
+  if (event != LV_EVENT_VALUE_CHANGED) return;
+
+  lv_kb_ext_t * ext = (lv_kb_ext_t * )lv_obj_get_ext_attr(kb);
+  const uint16_t btn_id = lv_btnm_get_active_btn(kb);
+  if (btn_id == LV_BTNM_BTN_NONE) return;
+  if (lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_HIDDEN | LV_BTNM_CTRL_INACTIVE)) return;
+  if (lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_NO_REPEAT) && event == LV_EVENT_LONG_PRESSED_REPEAT) return;
+
+  const char * txt = lv_btnm_get_active_btn_text(kb);
+  if (txt == NULL) return;
+
+  // Do the corresponding action according to the text of the button
+  if (strcmp(txt, "abc") == 0) {
+    lv_btnm_set_map(kb, kb_map_lc);
+    lv_btnm_set_ctrl_map(kb, kb_ctrl_lc_map);
+    return;
+  }
+  else if (strcmp(txt, "ABC") == 0) {
+    lv_btnm_set_map(kb, kb_map_uc);
+    lv_btnm_set_ctrl_map(kb, kb_ctrl_uc_map);
+    return;
+  }
+  else if (strcmp(txt, "1#") == 0) {
+    lv_btnm_set_map(kb, kb_map_spec);
+    lv_btnm_set_ctrl_map(kb, kb_ctrl_spec_map);
+    return;
+  }
+  else if (strcmp(txt, LV_SYMBOL_CLOSE) == 0) {
+    if (kb->event_cb != lv_kb_def_event_cb) {
+      //lv_res_t res = lv_event_send(kb, LV_EVENT_CANCEL, NULL);
+      //if (res != LV_RES_OK) return;
+      lv_clear_keyboard();
+      draw_return_ui();
+    }
+    else {
+      lv_kb_set_ta(kb, NULL); /*De-assign the text area  to hide it cursor if needed*/
+      lv_obj_del(kb);
+      return;
+    }
+  return;
+  }
+  else if (strcmp(txt, LV_SYMBOL_OK) == 0) {
+    if (kb->event_cb != lv_kb_def_event_cb) {
+      //lv_res_t res = lv_event_send(kb, LV_EVENT_APPLY, NULL);
+      //if (res != LV_RES_OK) return;
+      const char * ret_ta_txt = lv_ta_get_text(ext->ta);
+      switch (keyboard_value) {
+        #if ENABLED(USE_WIFI_FUNCTION)
+          case wifiName:
+            memcpy(uiCfg.wifi_name,ret_ta_txt,sizeof(uiCfg.wifi_name));
+            lv_clear_keyboard();
+            draw_return_ui();
+            break;
+          case wifiPassWord:
+            memcpy(uiCfg.wifi_key,ret_ta_txt,sizeof(uiCfg.wifi_name));
+            lv_clear_keyboard();
+            draw_return_ui();
+            break;
+          case wifiConfig:
+            memset((void *)uiCfg.wifi_name, 0, sizeof(uiCfg.wifi_name));
+            memcpy((void *)uiCfg.wifi_name, wifi_list.wifiName[wifi_list.nameIndex], 32);
+
+            memset((void *)uiCfg.wifi_key, 0, sizeof(uiCfg.wifi_key));
+            memcpy((void *)uiCfg.wifi_key, ret_ta_txt, sizeof(uiCfg.wifi_key));
+
+            gCfgItems.wifi_mode_sel = STA_MODEL;
+
+            package_to_wifi(WIFI_PARA_SET, (char *)0, 0);
+
+            memset(public_buf_l,0,sizeof(public_buf_l));
+
+            public_buf_l[0] = 0xA5;
+            public_buf_l[1] = 0x09;
+            public_buf_l[2] = 0x01;
+            public_buf_l[3] = 0x00;
+            public_buf_l[4] = 0x01;
+            public_buf_l[5] = 0xFC;
+            public_buf_l[6] = 0x00;
+            raw_send_to_wifi(public_buf_l, 6);
+
+            last_disp_state = KEY_BOARD_UI;
+            lv_clear_keyboard();
+            wifi_tips_type = TIPS_TYPE_JOINING;
+            lv_draw_wifi_tips();
+            break;
+        #endif // USE_WIFI_FUNCTION
+        case gcodeCommand:
+          uint8_t buf[100];
+          strncpy((char *)buf,ret_ta_txt,sizeof(buf));
+          update_gcode_command(AUTO_LEVELING_COMMAND_ADDR,buf);
+          lv_clear_keyboard();
+          draw_return_ui();
+          break;
+        default: break;
+      }
+    }
+    else {
+      lv_kb_set_ta(kb, NULL); /*De-assign the text area to hide it cursor if needed*/
+    }
+  return;
+  }
+
+  /*Add the characters to the text area if set*/
+  if (ext->ta == NULL) return;
+
+  if (strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0)
+    lv_ta_add_char(ext->ta, '\n');
+  else if (strcmp(txt, LV_SYMBOL_LEFT) == 0)
+    lv_ta_cursor_left(ext->ta);
+  else if (strcmp(txt, LV_SYMBOL_RIGHT) == 0)
+    lv_ta_cursor_right(ext->ta);
+  else if (strcmp(txt, LV_SYMBOL_BACKSPACE) == 0)
+    lv_ta_del_char(ext->ta);
+  else if (strcmp(txt, "+/-") == 0) {
+    uint16_t cur = lv_ta_get_cursor_pos(ext->ta);
+    const char * ta_txt = lv_ta_get_text(ext->ta);
+    if (ta_txt[0] == '-') {
+      lv_ta_set_cursor_pos(ext->ta, 1);
+      lv_ta_del_char(ext->ta);
+      lv_ta_add_char(ext->ta, '+');
+      lv_ta_set_cursor_pos(ext->ta, cur);
+    }
+    else if (ta_txt[0] == '+') {
+      lv_ta_set_cursor_pos(ext->ta, 1);
+      lv_ta_del_char(ext->ta);
+      lv_ta_add_char(ext->ta, '-');
+      lv_ta_set_cursor_pos(ext->ta, cur);
+    }
+    else {
+      lv_ta_set_cursor_pos(ext->ta, 0);
+      lv_ta_add_char(ext->ta, '-');
+      lv_ta_set_cursor_pos(ext->ta, cur + 1);
+    }
+  }
+  else {
+    lv_ta_add_text(ext->ta, txt);
+  }
+}
+
+void lv_draw_keyboard() {
+  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != KEY_BOARD_UI) {
+    disp_state_stack._disp_index++;
+    disp_state_stack._disp_state[disp_state_stack._disp_index] = KEY_BOARD_UI;
+  }
+  disp_state = KEY_BOARD_UI;
+
+  scr = lv_obj_create(NULL, NULL);
+
+  lv_obj_set_style(scr, &tft_style_scr);
+  lv_scr_load(scr);
+  lv_obj_clean(scr);
+
+  lv_refr_now(lv_refr_get_disp_refreshing());
+
+  /*Create styles for the keyboard*/
+  static lv_style_t rel_style, pr_style;
+
+  lv_style_copy(&rel_style, &lv_style_btn_rel);
+  rel_style.body.radius = 0;
+  rel_style.body.border.width = 1;
+  rel_style.body.main_color = lv_color_make(0xa9, 0x62, 0x1d);
+  rel_style.body.grad_color = lv_color_make(0xa7, 0x59, 0x0e);
+
+  lv_style_copy(&pr_style, &lv_style_btn_pr);
+  pr_style.body.radius = 0;
+  pr_style.body.border.width = 1;
+  pr_style.body.main_color = lv_color_make(0x72, 0x42, 0x15);
+  pr_style.body.grad_color = lv_color_make(0x6a, 0x3a, 0x0c);
+
+  /*Create a keyboard and apply the styles*/
+  lv_obj_t *kb = lv_kb_create(scr, NULL);
+  lv_obj_set_event_cb(kb, lv_kb_event_cb);
+  lv_kb_set_cursor_manage(kb, true);
+  lv_kb_set_style(kb, LV_KB_STYLE_BG, &lv_style_transp_tight);
+  lv_kb_set_style(kb, LV_KB_STYLE_BTN_REL, &rel_style);
+  lv_kb_set_style(kb, LV_KB_STYLE_BTN_PR, &pr_style);
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) {
+      //lv_group_add_obj(g, kb);
+      //lv_group_set_editing(g, true);
+    }
+  #endif
+
+  /*Create a text area. The keyboard will write here*/
+  lv_obj_t *ta = lv_ta_create(scr, NULL);
+  lv_obj_align(ta, NULL, LV_ALIGN_IN_TOP_MID, 0, 10);
+  if (keyboard_value == gcodeCommand) {
+    get_gcode_command(AUTO_LEVELING_COMMAND_ADDR,(uint8_t *)public_buf_m);
+    public_buf_m[sizeof(public_buf_m)-1] = 0;
+    lv_ta_set_text(ta, public_buf_m);
+  }
+  else {
+    lv_ta_set_text(ta, "");
+  }
+
+  /*Assign the text area to the keyboard*/
+  lv_kb_set_ta(kb, ta);
+}
+
+void lv_clear_keyboard() {
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) { /* lv_group_remove_all_objs(g); */ }
+  #endif
+  lv_obj_del(scr);
+}
+
+
+#endif  // HAS_TFT_LVGL_UI
