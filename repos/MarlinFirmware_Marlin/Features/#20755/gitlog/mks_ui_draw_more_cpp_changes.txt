commit 417e2530ebc5b6c74ac34adaba8be552b407383a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 21:11:31 2021 -0500

    🎨 Apply F() to G-code suite and queue

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_more.cpp b/Marlin/src/lcd/extui/mks_ui/draw_more.cpp
index 6c5fa2fa3d..a9c1dc1ec6 100644
--- a/Marlin/src/lcd/extui/mks_ui/draw_more.cpp
+++ b/Marlin/src/lcd/extui/mks_ui/draw_more.cpp
@@ -62,22 +62,22 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
   switch (obj->mks_obj_id) {
     case ID_GCODE: lv_clear_more(); lv_draw_gcode(true); break;
     #if HAS_USER_ITEM(1)
-      case ID_CUSTOM_1: queue.inject_P(PSTR(MAIN_MENU_ITEM_1_GCODE)); break;
+      case ID_CUSTOM_1: queue.inject(F(MAIN_MENU_ITEM_1_GCODE)); break;
     #endif
     #if HAS_USER_ITEM(2)
-      case ID_CUSTOM_2: queue.inject_P(PSTR(MAIN_MENU_ITEM_2_GCODE)); break;
+      case ID_CUSTOM_2: queue.inject(F(MAIN_MENU_ITEM_2_GCODE)); break;
     #endif
     #if HAS_USER_ITEM(3)
-      case ID_CUSTOM_3: queue.inject_P(PSTR(MAIN_MENU_ITEM_3_GCODE)); break;
+      case ID_CUSTOM_3: queue.inject(F(MAIN_MENU_ITEM_3_GCODE)); break;
     #endif
     #if HAS_USER_ITEM(4)
-      case ID_CUSTOM_4: queue.inject_P(PSTR(MAIN_MENU_ITEM_4_GCODE)); break;
+      case ID_CUSTOM_4: queue.inject(F(MAIN_MENU_ITEM_4_GCODE)); break;
     #endif
     #if HAS_USER_ITEM(5)
-      case ID_CUSTOM_5: queue.inject_P(PSTR(MAIN_MENU_ITEM_5_GCODE)); break;
+      case ID_CUSTOM_5: queue.inject(F(MAIN_MENU_ITEM_5_GCODE)); break;
     #endif
     #if HAS_USER_ITEM(6)
-      case ID_CUSTOM_6: queue.inject_P(PSTR(MAIN_MENU_ITEM_6_GCODE)); break;
+      case ID_CUSTOM_6: queue.inject(F(MAIN_MENU_ITEM_6_GCODE)); break;
     #endif
     case ID_M_RETURN:
       lv_clear_more();

commit 323b38ee88dbf2a4691a20439dbb95a824822199
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Sep 16 04:36:26 2021 -0500

    💡 Adjust headers, formatting

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_more.cpp b/Marlin/src/lcd/extui/mks_ui/draw_more.cpp
index e89e2f3e8a..6c5fa2fa3d 100644
--- a/Marlin/src/lcd/extui/mks_ui/draw_more.cpp
+++ b/Marlin/src/lcd/extui/mks_ui/draw_more.cpp
@@ -19,6 +19,7 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
+
 #include "../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI

commit b8cc0667bb7c5a67b2267cd86422b2485f364ac6
Author: Malderin <52313714+Malderin@users.noreply.github.com>
Date:   Sun Aug 1 06:00:18 2021 +0300

    🐛 Fix custom menus on MKS UI (#22470)

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_more.cpp b/Marlin/src/lcd/extui/mks_ui/draw_more.cpp
index d6f1c9ccca..e89e2f3e8a 100644
--- a/Marlin/src/lcd/extui/mks_ui/draw_more.cpp
+++ b/Marlin/src/lcd/extui/mks_ui/draw_more.cpp
@@ -61,22 +61,22 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
   switch (obj->mks_obj_id) {
     case ID_GCODE: lv_clear_more(); lv_draw_gcode(true); break;
     #if HAS_USER_ITEM(1)
-      case ID_CUSTOM_1: queue.inject_P(PSTR(USER_GCODE_1)); break;
+      case ID_CUSTOM_1: queue.inject_P(PSTR(MAIN_MENU_ITEM_1_GCODE)); break;
     #endif
     #if HAS_USER_ITEM(2)
-      case ID_CUSTOM_2: queue.inject_P(PSTR(USER_GCODE_2)); break;
+      case ID_CUSTOM_2: queue.inject_P(PSTR(MAIN_MENU_ITEM_2_GCODE)); break;
     #endif
     #if HAS_USER_ITEM(3)
-      case ID_CUSTOM_3: queue.inject_P(PSTR(USER_GCODE_3)); break;
+      case ID_CUSTOM_3: queue.inject_P(PSTR(MAIN_MENU_ITEM_3_GCODE)); break;
     #endif
     #if HAS_USER_ITEM(4)
-      case ID_CUSTOM_4: queue.inject_P(PSTR(USER_GCODE_4)); break;
+      case ID_CUSTOM_4: queue.inject_P(PSTR(MAIN_MENU_ITEM_4_GCODE)); break;
     #endif
     #if HAS_USER_ITEM(5)
-      case ID_CUSTOM_5: queue.inject_P(PSTR(USER_GCODE_5)); break;
+      case ID_CUSTOM_5: queue.inject_P(PSTR(MAIN_MENU_ITEM_5_GCODE)); break;
     #endif
     #if HAS_USER_ITEM(6)
-      case ID_CUSTOM_6: queue.inject_P(PSTR(USER_GCODE_6)); break;
+      case ID_CUSTOM_6: queue.inject_P(PSTR(MAIN_MENU_ITEM_6_GCODE)); break;
     #endif
     case ID_M_RETURN:
       lv_clear_more();

commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_more.cpp b/Marlin/src/lcd/extui/mks_ui/draw_more.cpp
new file mode 100644
index 0000000000..d6f1c9ccca
--- /dev/null
+++ b/Marlin/src/lcd/extui/mks_ui/draw_more.cpp
@@ -0,0 +1,202 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../inc/MarlinConfigPre.h"
+
+#if HAS_TFT_LVGL_UI
+
+#include "../../../MarlinCore.h"
+#include "draw_ready_print.h"
+#include "draw_set.h"
+#include "lv_conf.h"
+#include "draw_ui.h"
+#include "../../../gcode/queue.h"
+
+extern lv_group_t * g;
+static lv_obj_t * scr;
+
+enum {
+  ID_GCODE = 1,
+  #if HAS_USER_ITEM(1)
+    ID_CUSTOM_1,
+  #endif
+  #if HAS_USER_ITEM(2)
+    ID_CUSTOM_2,
+  #endif
+  #if HAS_USER_ITEM(3)
+    ID_CUSTOM_3,
+  #endif
+  #if HAS_USER_ITEM(4)
+    ID_CUSTOM_4,
+  #endif
+  #if HAS_USER_ITEM(5)
+    ID_CUSTOM_5,
+  #endif
+  #if HAS_USER_ITEM(6)
+    ID_CUSTOM_6,
+  #endif
+  ID_M_RETURN,
+};
+
+static void event_handler(lv_obj_t * obj, lv_event_t event) {
+  if (event != LV_EVENT_RELEASED) return;
+  switch (obj->mks_obj_id) {
+    case ID_GCODE: lv_clear_more(); lv_draw_gcode(true); break;
+    #if HAS_USER_ITEM(1)
+      case ID_CUSTOM_1: queue.inject_P(PSTR(USER_GCODE_1)); break;
+    #endif
+    #if HAS_USER_ITEM(2)
+      case ID_CUSTOM_2: queue.inject_P(PSTR(USER_GCODE_2)); break;
+    #endif
+    #if HAS_USER_ITEM(3)
+      case ID_CUSTOM_3: queue.inject_P(PSTR(USER_GCODE_3)); break;
+    #endif
+    #if HAS_USER_ITEM(4)
+      case ID_CUSTOM_4: queue.inject_P(PSTR(USER_GCODE_4)); break;
+    #endif
+    #if HAS_USER_ITEM(5)
+      case ID_CUSTOM_5: queue.inject_P(PSTR(USER_GCODE_5)); break;
+    #endif
+    #if HAS_USER_ITEM(6)
+      case ID_CUSTOM_6: queue.inject_P(PSTR(USER_GCODE_6)); break;
+    #endif
+    case ID_M_RETURN:
+      lv_clear_more();
+      lv_draw_tool();
+      break;
+  }
+}
+
+void lv_draw_more() {
+  scr = lv_screen_create(MORE_UI);
+
+  const bool enc_ena = TERN0(HAS_ROTARY_ENCODER, gCfgItems.encoder_enable);
+
+  lv_obj_t *buttonGCode = lv_imgbtn_create(scr, "F:/bmp_machine_para.bin", INTERVAL_V, titleHeight, event_handler, ID_GCODE);
+  if (enc_ena) lv_group_add_obj(g, buttonGCode);
+  lv_obj_t *labelGCode = lv_label_create_empty(buttonGCode);
+
+  #if HAS_USER_ITEM(1)
+    lv_obj_t *buttonCustom1 = lv_imgbtn_create(scr, "F:/bmp_custom1.bin", BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_CUSTOM_1);
+    if (enc_ena) lv_group_add_obj(g, buttonCustom1);
+    lv_obj_t *labelCustom1 = lv_label_create_empty(buttonCustom1);
+  #endif
+
+  #if HAS_USER_ITEM(2)
+    lv_obj_t *buttonCustom2 = lv_imgbtn_create(scr, "F:/bmp_custom2.bin", BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_CUSTOM_2);
+    if (enc_ena) lv_group_add_obj(g, buttonCustom2);
+    lv_obj_t *labelCustom2 = lv_label_create_empty(buttonCustom2);
+  #endif
+
+  #if HAS_USER_ITEM(3)
+    lv_obj_t *buttonCustom3 = lv_imgbtn_create(scr, "F:/bmp_custom3.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_CUSTOM_3);
+    if (enc_ena) lv_group_add_obj(g, buttonCustom3);
+    lv_obj_t *labelCustom3 = lv_label_create_empty(buttonCustom3);
+  #endif
+
+  #if HAS_USER_ITEM(4)
+    lv_obj_t *buttonCustom4 = lv_imgbtn_create(scr, "F:/bmp_custom4.bin", INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_CUSTOM_4);
+    if (enc_ena) lv_group_add_obj(g, buttonCustom4);
+    lv_obj_t *labelCustom4 = lv_label_create_empty(buttonCustom4);
+  #endif
+
+  #if HAS_USER_ITEM(5)
+    lv_obj_t *buttonCustom5 = lv_imgbtn_create(scr, "F:/bmp_custom5.bin", BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_CUSTOM_5);
+    if (enc_ena) lv_group_add_obj(g, buttonCustom5);
+    lv_obj_t *labelCustom5 = lv_label_create_empty(buttonCustom5);
+  #endif
+
+  #if HAS_USER_ITEM(6)
+    lv_obj_t *buttonCustom6 = lv_imgbtn_create(scr, "F:/bmp_custom6.bin", BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_CUSTOM_6);
+    if (enc_ena) lv_group_add_obj(g, buttonCustom6);
+    lv_obj_t *labelCustom6 = lv_label_create_empty(buttonCustom6);
+  #endif
+
+  lv_obj_t *buttonBack = lv_imgbtn_create(scr, "F:/bmp_return.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_M_RETURN);
+  if (enc_ena) lv_group_add_obj(g, buttonBack);
+  lv_obj_t *label_Back = lv_label_create_empty(buttonBack);
+
+  if (gCfgItems.multiple_language != 0) {
+    lv_label_set_text(labelGCode, more_menu.gcode);
+    lv_obj_align(labelGCode, buttonGCode, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    #if HAS_USER_ITEM(1)
+      lv_label_set_text(labelCustom1, more_menu.custom1);
+      lv_obj_align(labelCustom1, buttonCustom1, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    #endif
+    #if HAS_USER_ITEM(2)
+      lv_label_set_text(labelCustom2, more_menu.custom2);
+      lv_obj_align(labelCustom2, buttonCustom2, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    #endif
+    #if HAS_USER_ITEM(3)
+      lv_label_set_text(labelCustom3, more_menu.custom3);
+      lv_obj_align(labelCustom3, buttonCustom3, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    #endif
+    #if HAS_USER_ITEM(4)
+      lv_label_set_text(labelCustom4, more_menu.custom4);
+      lv_obj_align(labelCustom4, buttonCustom4, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    #endif
+    #if HAS_USER_ITEM(5)
+      lv_label_set_text(labelCustom5, more_menu.custom5);
+      lv_obj_align(labelCustom5, buttonCustom5, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    #endif
+    #if HAS_USER_ITEM(6)
+      lv_label_set_text(labelCustom6, more_menu.custom6);
+      lv_obj_align(labelCustom6, buttonCustom6, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    #endif
+    lv_label_set_text(label_Back, common_menu.text_back);
+    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+  }
+
+  #if BUTTONS_EXIST(EN1, EN2, ENC)
+    if (enc_ena) {
+      lv_group_add_obj(g, buttonGCode);
+      #if HAS_USER_ITEM(1)
+        lv_group_add_obj(g, buttonCustom1);
+      #endif
+      #if HAS_USER_ITEM(2)
+        lv_group_add_obj(g, buttonCustom2);
+      #endif
+      #if HAS_USER_ITEM(3)
+        lv_group_add_obj(g, buttonCustom3);
+      #endif
+      #if HAS_USER_ITEM(4)
+        lv_group_add_obj(g, buttonCustom4);
+      #endif
+      #if HAS_USER_ITEM(5)
+        lv_group_add_obj(g, buttonCustom5);
+      #endif
+      #if HAS_USER_ITEM(6)
+        lv_group_add_obj(g, buttonCustom6);
+      #endif
+      lv_group_add_obj(g, buttonBack);
+    }
+  #endif
+}
+
+void lv_clear_more() {
+  #if BUTTONS_EXIST(EN1, EN2, ENC)
+    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
+  #endif
+  lv_obj_del(scr);
+}
+
+#endif // HAS_TFT_LVGL_UI
