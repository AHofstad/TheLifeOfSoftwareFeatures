commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    üßë‚Äçüíª Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/HAL/STM32F1/MarlinSerial.h b/Marlin/src/HAL/STM32F1/MarlinSerial.h
index dda32fe7a2..53bcd48476 100644
--- a/Marlin/src/HAL/STM32F1/MarlinSerial.h
+++ b/Marlin/src/HAL/STM32F1/MarlinSerial.h
@@ -52,7 +52,7 @@ typedef Serial1Class<MarlinSerial> MSerialT;
 extern MSerialT MSerial1;
 extern MSerialT MSerial2;
 extern MSerialT MSerial3;
-#if EITHER(STM32_HIGH_DENSITY, STM32_XL_DENSITY)
+#if ANY(STM32_HIGH_DENSITY, STM32_XL_DENSITY)
   extern MSerialT MSerial4;
   extern MSerialT MSerial5;
 #endif

commit dbd28eecc9cd4b5954a4fd1ed0c02bd9788c279b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 10 12:05:05 2021 -0600

    Number serial from 1 to match settings

diff --git a/Marlin/src/HAL/STM32F1/MarlinSerial.h b/Marlin/src/HAL/STM32F1/MarlinSerial.h
index 692e97e618..dda32fe7a2 100644
--- a/Marlin/src/HAL/STM32F1/MarlinSerial.h
+++ b/Marlin/src/HAL/STM32F1/MarlinSerial.h
@@ -47,7 +47,7 @@ struct MarlinSerial : public HardwareSerial {
   #endif
 };
 
-typedef Serial0Type<MarlinSerial> MSerialT;
+typedef Serial1Class<MarlinSerial> MSerialT;
 
 extern MSerialT MSerial1;
 extern MSerialT MSerial2;

commit e7c711996bd3080f5e343eff5556736cbf2e2416
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Mon Feb 8 07:37:24 2021 +0100

    Serial refactor. Default 8-bit ECHO to int, not char (#20985)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/HAL/STM32F1/MarlinSerial.h b/Marlin/src/HAL/STM32F1/MarlinSerial.h
index 4c0bf0e100..692e97e618 100644
--- a/Marlin/src/HAL/STM32F1/MarlinSerial.h
+++ b/Marlin/src/HAL/STM32F1/MarlinSerial.h
@@ -28,10 +28,6 @@
 #include "../../inc/MarlinConfigPre.h"
 #include "../../core/serial_hook.h"
 
-#if HAS_TFT_LVGL_UI
-  extern "C" { extern char public_buf_m[100]; }
-#endif
-
 // Increase priority of serial interrupts, to reduce overflow errors
 #define UART_IRQ_PRIO 1
 
@@ -49,28 +45,6 @@ struct MarlinSerial : public HardwareSerial {
       nvic_irq_set_priority(c_dev()->irq_num, UART_IRQ_PRIO);
     }
   #endif
-
-  #if HAS_TFT_LVGL_UI
-    // Hook the serial write method to capture the output of GCode command sent via LCD
-    uint32_t current_wpos;
-    void (*line_callback)(void *, const char * msg);
-    void *user_pointer;
-
-    void set_hook(void (*hook)(void *, const char *), void * that) { line_callback = hook; user_pointer = that; current_wpos = 0; }
-
-    size_t write(uint8_t c) {
-      if (line_callback) {
-        if (c == '\n' || current_wpos == sizeof(public_buf_m) - 1) { // End of line, probably end of command anyway
-          public_buf_m[current_wpos] = 0;
-          line_callback(user_pointer, public_buf_m);
-          current_wpos = 0;
-        }
-        else
-          public_buf_m[current_wpos++] = c;
-      }
-      return HardwareSerial::write(c);
-    }
-  #endif
 };
 
 typedef Serial0Type<MarlinSerial> MSerialT;

commit c74f972627ab8dcf69a637268cf86682959bd18e
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Mon Feb 1 01:18:39 2021 +0100

    LVGL UI G-code console (#20755)

diff --git a/Marlin/src/HAL/STM32F1/MarlinSerial.h b/Marlin/src/HAL/STM32F1/MarlinSerial.h
index 692e97e618..4c0bf0e100 100644
--- a/Marlin/src/HAL/STM32F1/MarlinSerial.h
+++ b/Marlin/src/HAL/STM32F1/MarlinSerial.h
@@ -28,6 +28,10 @@
 #include "../../inc/MarlinConfigPre.h"
 #include "../../core/serial_hook.h"
 
+#if HAS_TFT_LVGL_UI
+  extern "C" { extern char public_buf_m[100]; }
+#endif
+
 // Increase priority of serial interrupts, to reduce overflow errors
 #define UART_IRQ_PRIO 1
 
@@ -45,6 +49,28 @@ struct MarlinSerial : public HardwareSerial {
       nvic_irq_set_priority(c_dev()->irq_num, UART_IRQ_PRIO);
     }
   #endif
+
+  #if HAS_TFT_LVGL_UI
+    // Hook the serial write method to capture the output of GCode command sent via LCD
+    uint32_t current_wpos;
+    void (*line_callback)(void *, const char * msg);
+    void *user_pointer;
+
+    void set_hook(void (*hook)(void *, const char *), void * that) { line_callback = hook; user_pointer = that; current_wpos = 0; }
+
+    size_t write(uint8_t c) {
+      if (line_callback) {
+        if (c == '\n' || current_wpos == sizeof(public_buf_m) - 1) { // End of line, probably end of command anyway
+          public_buf_m[current_wpos] = 0;
+          line_callback(user_pointer, public_buf_m);
+          current_wpos = 0;
+        }
+        else
+          public_buf_m[current_wpos++] = c;
+      }
+      return HardwareSerial::write(c);
+    }
+  #endif
 };
 
 typedef Serial0Type<MarlinSerial> MSerialT;

commit 3f01b222b2b4f77cff66096dd5a18a64828e1fa4
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Thu Jan 28 09:02:06 2021 +0100

    Refactor serial class with templates (#20783)

diff --git a/Marlin/src/HAL/STM32F1/MarlinSerial.h b/Marlin/src/HAL/STM32F1/MarlinSerial.h
index 6aa94b64ff..692e97e618 100644
--- a/Marlin/src/HAL/STM32F1/MarlinSerial.h
+++ b/Marlin/src/HAL/STM32F1/MarlinSerial.h
@@ -26,28 +26,13 @@
 #include <WString.h>
 
 #include "../../inc/MarlinConfigPre.h"
-#if ENABLED(EMERGENCY_PARSER)
-  #include "../../feature/e_parser.h"
-#endif
+#include "../../core/serial_hook.h"
 
 // Increase priority of serial interrupts, to reduce overflow errors
 #define UART_IRQ_PRIO 1
 
-class MarlinSerial : public HardwareSerial {
-public:
-  #if ENABLED(EMERGENCY_PARSER)
-    const bool ep_enabled;
-    EmergencyParser::State emergency_state;
-    inline bool emergency_parser_enabled() { return ep_enabled; }
-  #endif
-
-  MarlinSerial(struct usart_dev *usart_device, uint8 tx_pin, uint8 rx_pin, bool TERN_(EMERGENCY_PARSER, ep_capable)) :
-    HardwareSerial(usart_device, tx_pin, rx_pin)
-    #if ENABLED(EMERGENCY_PARSER)
-      , ep_enabled(ep_capable)
-      , emergency_state(EmergencyParser::State::EP_RESET)
-    #endif
-    { }
+struct MarlinSerial : public HardwareSerial {
+  MarlinSerial(struct usart_dev *usart_device, uint8 tx_pin, uint8 rx_pin) : HardwareSerial(usart_device, tx_pin, rx_pin) { }
 
   #ifdef UART_IRQ_PRIO
     // Shadow the parent methods to set IRQ priority after begin()
@@ -62,10 +47,12 @@ public:
   #endif
 };
 
-extern MarlinSerial MSerial1;
-extern MarlinSerial MSerial2;
-extern MarlinSerial MSerial3;
+typedef Serial0Type<MarlinSerial> MSerialT;
+
+extern MSerialT MSerial1;
+extern MSerialT MSerial2;
+extern MSerialT MSerial3;
 #if EITHER(STM32_HIGH_DENSITY, STM32_XL_DENSITY)
-  extern MarlinSerial MSerial4;
-  extern MarlinSerial MSerial5;
+  extern MSerialT MSerial4;
+  extern MSerialT MSerial5;
 #endif

commit da6c8317a7e7483fcb823c06f9cf953a764eacb0
Author: Jason Smith <jason.inet@gmail.com>
Date:   Thu Sep 24 18:28:48 2020 -0700

    Fix and improve STM32F1 serial (#19464)

diff --git a/Marlin/src/HAL/STM32F1/MarlinSerial.h b/Marlin/src/HAL/STM32F1/MarlinSerial.h
index b9248e50ca..6aa94b64ff 100644
--- a/Marlin/src/HAL/STM32F1/MarlinSerial.h
+++ b/Marlin/src/HAL/STM32F1/MarlinSerial.h
@@ -35,15 +35,22 @@
 
 class MarlinSerial : public HardwareSerial {
 public:
-  MarlinSerial(struct usart_dev *usart_device, uint8 tx_pin, uint8 rx_pin) :
+  #if ENABLED(EMERGENCY_PARSER)
+    const bool ep_enabled;
+    EmergencyParser::State emergency_state;
+    inline bool emergency_parser_enabled() { return ep_enabled; }
+  #endif
+
+  MarlinSerial(struct usart_dev *usart_device, uint8 tx_pin, uint8 rx_pin, bool TERN_(EMERGENCY_PARSER, ep_capable)) :
     HardwareSerial(usart_device, tx_pin, rx_pin)
     #if ENABLED(EMERGENCY_PARSER)
+      , ep_enabled(ep_capable)
       , emergency_state(EmergencyParser::State::EP_RESET)
     #endif
     { }
 
   #ifdef UART_IRQ_PRIO
-    // shadow the parent methods to set irq priority after the begin
+    // Shadow the parent methods to set IRQ priority after begin()
     void begin(uint32 baud) {
       MarlinSerial::begin(baud, SERIAL_8N1);
     }
@@ -53,14 +60,12 @@ public:
       nvic_irq_set_priority(c_dev()->irq_num, UART_IRQ_PRIO);
     }
   #endif
-
-  #if ENABLED(EMERGENCY_PARSER)
-    EmergencyParser::State emergency_state;
-  #endif
 };
 
 extern MarlinSerial MSerial1;
 extern MarlinSerial MSerial2;
 extern MarlinSerial MSerial3;
-extern MarlinSerial MSerial4;
-extern MarlinSerial MSerial5;
+#if EITHER(STM32_HIGH_DENSITY, STM32_XL_DENSITY)
+  extern MarlinSerial MSerial4;
+  extern MarlinSerial MSerial5;
+#endif

commit 4b928b2da8ae26bd4a949debe470a914e23545ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Sep 23 19:45:33 2020 -0500

    HAL and serial cleanup
    
    Co-Authored-By: Jason Smith <20053467+sjasonsmith@users.noreply.github.com>

diff --git a/Marlin/src/HAL/STM32F1/MarlinSerial.h b/Marlin/src/HAL/STM32F1/MarlinSerial.h
index eb0059bfbc..b9248e50ca 100644
--- a/Marlin/src/HAL/STM32F1/MarlinSerial.h
+++ b/Marlin/src/HAL/STM32F1/MarlinSerial.h
@@ -30,6 +30,7 @@
   #include "../../feature/e_parser.h"
 #endif
 
+// Increase priority of serial interrupts, to reduce overflow errors
 #define UART_IRQ_PRIO 1
 
 class MarlinSerial : public HardwareSerial {

commit b98946b5c1b46e9399dae8d1cc41a15b2a5ee15f
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Thu Sep 10 00:46:50 2020 -0300

    Raise STM32F1 UART IRQ Priority, add error handling (#19301)
    
    (Error handling for Overrun, Framing and Parity.)

diff --git a/Marlin/src/HAL/STM32F1/MarlinSerial.h b/Marlin/src/HAL/STM32F1/MarlinSerial.h
index 4e8a47d2f9..eb0059bfbc 100644
--- a/Marlin/src/HAL/STM32F1/MarlinSerial.h
+++ b/Marlin/src/HAL/STM32F1/MarlinSerial.h
@@ -22,6 +22,7 @@
 #pragma once
 
 #include <HardwareSerial.h>
+#include <libmaple/usart.h>
 #include <WString.h>
 
 #include "../../inc/MarlinConfigPre.h"
@@ -29,6 +30,8 @@
   #include "../../feature/e_parser.h"
 #endif
 
+#define UART_IRQ_PRIO 1
+
 class MarlinSerial : public HardwareSerial {
 public:
   MarlinSerial(struct usart_dev *usart_device, uint8 tx_pin, uint8 rx_pin) :
@@ -38,6 +41,18 @@ public:
     #endif
     { }
 
+  #ifdef UART_IRQ_PRIO
+    // shadow the parent methods to set irq priority after the begin
+    void begin(uint32 baud) {
+      MarlinSerial::begin(baud, SERIAL_8N1);
+    }
+
+    void begin(uint32 baud, uint8_t config) {
+      HardwareSerial::begin(baud, config);
+      nvic_irq_set_priority(c_dev()->irq_num, UART_IRQ_PRIO);
+    }
+  #endif
+
   #if ENABLED(EMERGENCY_PARSER)
     EmergencyParser::State emergency_state;
   #endif

commit b6ab163814270137cca1f4bf57e8d3534f6c35fc
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sun Sep 6 19:23:36 2020 -0300

    Emergency Parser for STM32F1 (#19279)

diff --git a/Marlin/src/HAL/STM32F1/MarlinSerial.h b/Marlin/src/HAL/STM32F1/MarlinSerial.h
new file mode 100644
index 0000000000..4e8a47d2f9
--- /dev/null
+++ b/Marlin/src/HAL/STM32F1/MarlinSerial.h
@@ -0,0 +1,50 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+#include <HardwareSerial.h>
+#include <WString.h>
+
+#include "../../inc/MarlinConfigPre.h"
+#if ENABLED(EMERGENCY_PARSER)
+  #include "../../feature/e_parser.h"
+#endif
+
+class MarlinSerial : public HardwareSerial {
+public:
+  MarlinSerial(struct usart_dev *usart_device, uint8 tx_pin, uint8 rx_pin) :
+    HardwareSerial(usart_device, tx_pin, rx_pin)
+    #if ENABLED(EMERGENCY_PARSER)
+      , emergency_state(EmergencyParser::State::EP_RESET)
+    #endif
+    { }
+
+  #if ENABLED(EMERGENCY_PARSER)
+    EmergencyParser::State emergency_state;
+  #endif
+};
+
+extern MarlinSerial MSerial1;
+extern MarlinSerial MSerial2;
+extern MarlinSerial MSerial3;
+extern MarlinSerial MSerial4;
+extern MarlinSerial MSerial5;
