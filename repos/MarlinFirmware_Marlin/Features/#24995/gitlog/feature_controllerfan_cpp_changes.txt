commit 12d7995a18d3ce59c871e11c4940bbaeb9c352fc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 9 18:45:17 2024 -0600

    🎨 Minor temp / UI refactor

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 816ffb23b7..acbae459e7 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -55,17 +55,19 @@ void ControllerFan::set_fan_speed(const uint8_t s) {
 }
 
 void ControllerFan::update() {
-  static millis_t lastMotorOn = 0,    // Last time a motor was turned on
-                  nextMotorCheck = 0; // Last time the state was checked
+  static millis_t lastComponentOn = 0,  // Last time a stepper, heater, etc. was turned on
+                  nextFanCheck = 0;     // Last time the state was checked
   const millis_t ms = millis();
-  if (ELAPSED(ms, nextMotorCheck)) {
-    nextMotorCheck = ms + 2500UL; // Not a time critical function, so only check every 2.5s
-
-    // If any triggers for the controller fan are true...
-    //   - At least one stepper driver is enabled
-    //   - The heated bed is enabled
-    //   - TEMP_SENSOR_BOARD is reporting >= CONTROLLER_FAN_MIN_BOARD_TEMP
-    //   - TEMP_SENSOR_SOC is reporting >= CONTROLLER_FAN_MIN_SOC_TEMP
+  if (ELAPSED(ms, nextFanCheck)) {
+    nextFanCheck = ms + 2500UL; // Not a time critical function, so only check every 2.5s
+
+    /**
+     * If any triggers for the controller fan are true...
+     *   - At least one stepper driver is enabled
+     *   - The heated bed (MOSFET) is enabled
+     *   - TEMP_SENSOR_BOARD is reporting >= CONTROLLER_FAN_MIN_BOARD_TEMP
+     *   - TEMP_SENSOR_SOC is reporting >= CONTROLLER_FAN_MIN_SOC_TEMP
+     */
     const ena_mask_t axis_mask = TERN(CONTROLLER_FAN_USE_Z_ONLY, _BV(Z_AXIS), (ena_mask_t)~TERN0(CONTROLLER_FAN_IGNORE_Z, _BV(Z_AXIS)));
     if ( (stepper.axis_enabled.bits & axis_mask)
       || TERN0(HAS_HEATED_BED, thermalManager.temp_bed.soft_pwm_amount > 0)
@@ -75,13 +77,15 @@ void ControllerFan::update() {
       #ifdef CONTROLLER_FAN_MIN_SOC_TEMP
         || thermalManager.wholeDegSoc() >= CONTROLLER_FAN_MIN_SOC_TEMP
       #endif
-    ) lastMotorOn = ms; //... set time to NOW so the fan will turn on
+    ) lastComponentOn = ms; //... set time to NOW so the fan will turn on
 
-    // Fan Settings. Set fan > 0:
-    //  - If AutoMode is on and steppers have been enabled for CONTROLLERFAN_IDLE_TIME seconds.
-    //  - If System is on idle and idle fan speed settings is activated.
+    /**
+     * Fan Settings. Set fan > 0:
+     *  - If AutoMode is on and hot components have been powered for CONTROLLERFAN_IDLE_TIME seconds.
+     *  - If System is on idle and idle fan speed settings is activated.
+     */
     set_fan_speed(
-      settings.auto_mode && lastMotorOn && PENDING(ms, lastMotorOn + SEC_TO_MS(settings.duration))
+      settings.auto_mode && lastComponentOn && PENDING(ms, lastComponentOn + SEC_TO_MS(settings.duration))
       ? settings.active_speed : settings.idle_speed
     );
 

commit 03bb28c277ce1c8e98c7b418ce607ecd58c58c4f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jul 14 02:21:50 2022 -0500

    🎨 Misc. temperature cleanup

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 4b3d9f5501..816ffb23b7 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -38,6 +38,10 @@ uint8_t ControllerFan::speed;
    const controllerFan_settings_t &ControllerFan::settings = controllerFan_defaults;
 #endif
 
+#if ENABLED(FAN_SOFT_PWM)
+  uint8_t ControllerFan::soft_pwm_speed;
+#endif
+
 void ControllerFan::setup() {
   SET_OUTPUT(CONTROLLER_FAN_PIN);
   #ifdef CONTROLLER_FAN2_PIN
@@ -98,7 +102,7 @@ void ControllerFan::update() {
     #endif
 
     #if ENABLED(FAN_SOFT_PWM)
-      thermalManager.soft_pwm_controller_speed = speed;
+      soft_pwm_speed = speed;
     #else
       if (PWM_PIN(CONTROLLER_FAN_PIN))
         hal.set_pwm_duty(pin_t(CONTROLLER_FAN_PIN), speed);

commit f5a905a64121e4ff43894d295ce6990e55aa1149
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Tue Apr 25 04:51:44 2023 +0200

    ✨ TEMP_SENSOR_SOC (#25642)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 6e5278ce74..4b3d9f5501 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -61,10 +61,16 @@ void ControllerFan::update() {
     //   - At least one stepper driver is enabled
     //   - The heated bed is enabled
     //   - TEMP_SENSOR_BOARD is reporting >= CONTROLLER_FAN_MIN_BOARD_TEMP
+    //   - TEMP_SENSOR_SOC is reporting >= CONTROLLER_FAN_MIN_SOC_TEMP
     const ena_mask_t axis_mask = TERN(CONTROLLER_FAN_USE_Z_ONLY, _BV(Z_AXIS), (ena_mask_t)~TERN0(CONTROLLER_FAN_IGNORE_Z, _BV(Z_AXIS)));
     if ( (stepper.axis_enabled.bits & axis_mask)
       || TERN0(HAS_HEATED_BED, thermalManager.temp_bed.soft_pwm_amount > 0)
-      || TERN0(HAS_CONTROLLER_FAN_MIN_BOARD_TEMP, thermalManager.wholeDegBoard() >= CONTROLLER_FAN_MIN_BOARD_TEMP)
+      #ifdef CONTROLLER_FAN_MIN_BOARD_TEMP
+        || thermalManager.wholeDegBoard() >= CONTROLLER_FAN_MIN_BOARD_TEMP
+      #endif
+      #ifdef CONTROLLER_FAN_MIN_SOC_TEMP
+        || thermalManager.wholeDegSoc() >= CONTROLLER_FAN_MIN_SOC_TEMP
+      #endif
     ) lastMotorOn = ms; //... set time to NOW so the fan will turn on
 
     // Fan Settings. Set fan > 0:

commit 72465e4eec8b7ab1e19ecff428a32e945368d622
Author: alextrical <35117191+alextrical@users.noreply.github.com>
Date:   Fri Dec 16 20:45:14 2022 +0000

    ✨ BigTreeTech EBB42 v1.1 (#24964)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index cc22c642bd..6e5278ce74 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -104,7 +104,7 @@ void ControllerFan::update() {
           hal.set_pwm_duty(pin_t(CONTROLLER_FAN2_PIN), speed);
         else
           WRITE(CONTROLLER_FAN2_PIN, speed > 0);
-      #endif      
+      #endif
     #endif
   }
 }

commit a10f4c0e53184989618e48e962a7ebdbba19758a
Author: Vovodroid <vovodroid@users.noreply.github.com>
Date:   Sat Dec 10 17:03:54 2022 +0200

    ✨ Two controller fans (#24995)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 2f25832cdc..cc22c642bd 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -40,6 +40,9 @@ uint8_t ControllerFan::speed;
 
 void ControllerFan::setup() {
   SET_OUTPUT(CONTROLLER_FAN_PIN);
+  #ifdef CONTROLLER_FAN2_PIN
+    SET_OUTPUT(CONTROLLER_FAN2_PIN);
+  #endif
   init();
 }
 
@@ -95,6 +98,13 @@ void ControllerFan::update() {
         hal.set_pwm_duty(pin_t(CONTROLLER_FAN_PIN), speed);
       else
         WRITE(CONTROLLER_FAN_PIN, speed > 0);
+
+      #ifdef CONTROLLER_FAN2_PIN
+        if (PWM_PIN(CONTROLLER_FAN2_PIN))
+          hal.set_pwm_duty(pin_t(CONTROLLER_FAN2_PIN), speed);
+        else
+          WRITE(CONTROLLER_FAN2_PIN, speed > 0);
+      #endif      
     #endif
   }
 }

commit 02c43f44c73b76c8d8d1e48b8e595ced62da2459
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Fri Oct 21 14:03:38 2022 -0400

    ✨ Controllerfan PWM scaling, kickstart (#24873)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index f42bf52ae4..2f25832cdc 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -72,6 +72,22 @@ void ControllerFan::update() {
       ? settings.active_speed : settings.idle_speed
     );
 
+    speed = CALC_FAN_SPEED(speed);
+
+    #if FAN_KICKSTART_TIME
+      static millis_t fan_kick_end = 0;
+      if (speed > FAN_OFF_PWM) {
+        if (!fan_kick_end) {
+          fan_kick_end = ms + FAN_KICKSTART_TIME; // May be longer based on slow update interval for controller fn check. Sets minimum
+          speed = FAN_KICKSTART_POWER;
+        }
+        else if (PENDING(ms, fan_kick_end))
+          speed = FAN_KICKSTART_POWER;
+      }
+      else
+        fan_kick_end = 0;
+    #endif
+
     #if ENABLED(FAN_SOFT_PWM)
       thermalManager.soft_pwm_controller_speed = speed;
     #else

commit 44eff9a23348dcc117fd1ea9b4b1ef0b54061808
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Feb 17 18:50:31 2022 -0600

    ♻️ Refactor HAL as singleton (#23357)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 59ba665e11..f42bf52ae4 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -76,7 +76,7 @@ void ControllerFan::update() {
       thermalManager.soft_pwm_controller_speed = speed;
     #else
       if (PWM_PIN(CONTROLLER_FAN_PIN))
-        set_pwm_duty(pin_t(CONTROLLER_FAN_PIN), speed);
+        hal.set_pwm_duty(pin_t(CONTROLLER_FAN_PIN), speed);
       else
         WRITE(CONTROLLER_FAN_PIN, speed > 0);
     #endif

commit 6a8b9274a31d11c396ce1bc44b3a0b872a4606dc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Dec 25 23:15:17 2021 -0600

    ⏪️ Refactor still needs work
    
    Reverting #23295

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index f42bf52ae4..59ba665e11 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -76,7 +76,7 @@ void ControllerFan::update() {
       thermalManager.soft_pwm_controller_speed = speed;
     #else
       if (PWM_PIN(CONTROLLER_FAN_PIN))
-        hal.set_pwm_duty(pin_t(CONTROLLER_FAN_PIN), speed);
+        set_pwm_duty(pin_t(CONTROLLER_FAN_PIN), speed);
       else
         WRITE(CONTROLLER_FAN_PIN, speed > 0);
     #endif

commit e211ff148c39bf5dace72de7cffbb83f19d3f1bf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Dec 24 21:33:59 2021 -0600

    ♻️ Refactor HAL as singleton (#23295)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 59ba665e11..f42bf52ae4 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -76,7 +76,7 @@ void ControllerFan::update() {
       thermalManager.soft_pwm_controller_speed = speed;
     #else
       if (PWM_PIN(CONTROLLER_FAN_PIN))
-        set_pwm_duty(pin_t(CONTROLLER_FAN_PIN), speed);
+        hal.set_pwm_duty(pin_t(CONTROLLER_FAN_PIN), speed);
       else
         WRITE(CONTROLLER_FAN_PIN, speed > 0);
     #endif

commit 8ee368b718ea7086522f9d64dc97e45a273d6832
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Sun Nov 14 05:55:31 2021 -0600

    ⚡️ Controller Fan software PWM (etc.) (#23102)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 330f3914f6..59ba665e11 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -72,10 +72,14 @@ void ControllerFan::update() {
       ? settings.active_speed : settings.idle_speed
     );
 
-    if (PWM_PIN(CONTROLLER_FAN_PIN))
-      set_pwm_duty(pin_t(CONTROLLER_FAN_PIN), speed);
-    else
-      WRITE(CONTROLLER_FAN_PIN, speed);
+    #if ENABLED(FAN_SOFT_PWM)
+      thermalManager.soft_pwm_controller_speed = speed;
+    #else
+      if (PWM_PIN(CONTROLLER_FAN_PIN))
+        set_pwm_duty(pin_t(CONTROLLER_FAN_PIN), speed);
+      else
+        WRITE(CONTROLLER_FAN_PIN, speed > 0);
+    #endif
   }
 }
 

commit da830e6ced7f7c7e509e748104245064d1c1b265
Author: Andrei M <22990561+andrei-moraru@users.noreply.github.com>
Date:   Tue Nov 2 01:47:16 2021 -0400

    ⚗️ Use pwm_set_duty over analogWrite to set PWM (#23048)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 03ef31e414..330f3914f6 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -72,9 +72,10 @@ void ControllerFan::update() {
       ? settings.active_speed : settings.idle_speed
     );
 
-    // Allow digital or PWM fan output (see M42 handling)
-    WRITE(CONTROLLER_FAN_PIN, speed);
-    analogWrite(pin_t(CONTROLLER_FAN_PIN), speed);
+    if (PWM_PIN(CONTROLLER_FAN_PIN))
+      set_pwm_duty(pin_t(CONTROLLER_FAN_PIN), speed);
+    else
+      WRITE(CONTROLLER_FAN_PIN, speed);
   }
 }
 

commit 28e2c358d1238d2d0db9e74b23e83f6e3bff89d4
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Mon Oct 18 02:40:47 2021 -0500

    🎨 Suppress type warning (#22976)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 5efddbb111..03ef31e414 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -58,7 +58,7 @@ void ControllerFan::update() {
     //   - At least one stepper driver is enabled
     //   - The heated bed is enabled
     //   - TEMP_SENSOR_BOARD is reporting >= CONTROLLER_FAN_MIN_BOARD_TEMP
-    const ena_mask_t axis_mask = TERN(CONTROLLER_FAN_USE_Z_ONLY, _BV(Z_AXIS), ~TERN0(CONTROLLER_FAN_IGNORE_Z, _BV(Z_AXIS)));
+    const ena_mask_t axis_mask = TERN(CONTROLLER_FAN_USE_Z_ONLY, _BV(Z_AXIS), (ena_mask_t)~TERN0(CONTROLLER_FAN_IGNORE_Z, _BV(Z_AXIS)));
     if ( (stepper.axis_enabled.bits & axis_mask)
       || TERN0(HAS_HEATED_BED, thermalManager.temp_bed.soft_pwm_amount > 0)
       || TERN0(HAS_CONTROLLER_FAN_MIN_BOARD_TEMP, thermalManager.wholeDegBoard() >= CONTROLLER_FAN_MIN_BOARD_TEMP)

commit 33e0855e2c173680865aaa6c6aa93047d63fc469
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 01:07:51 2021 -0500

    ⚡️ Handle shared enable pins (#22824)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 35f567fa8f..5efddbb111 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -25,7 +25,7 @@
 #if ENABLED(USE_CONTROLLER_FAN)
 
 #include "controllerfan.h"
-#include "../module/stepper/indirection.h"
+#include "../module/stepper.h"
 #include "../module/temperature.h"
 
 ControllerFan controllerFan;
@@ -54,33 +54,12 @@ void ControllerFan::update() {
   if (ELAPSED(ms, nextMotorCheck)) {
     nextMotorCheck = ms + 2500UL; // Not a time critical function, so only check every 2.5s
 
-    #define MOTOR_IS_ON(A,B) (A##_ENABLE_READ() == bool(B##_ENABLE_ON))
-    #define _OR_ENABLED_E(N) || MOTOR_IS_ON(E##N,E)
-
-    const bool motor_on = (
-      ( DISABLED(CONTROLLER_FAN_IGNORE_Z) &&
-        (    MOTOR_IS_ON(Z,Z)
-          || TERN0(HAS_Z2_ENABLE, MOTOR_IS_ON(Z2,Z))
-          || TERN0(HAS_Z3_ENABLE, MOTOR_IS_ON(Z3,Z))
-          || TERN0(HAS_Z4_ENABLE, MOTOR_IS_ON(Z4,Z))
-        )
-      ) || (
-        DISABLED(CONTROLLER_FAN_USE_Z_ONLY) &&
-        (    MOTOR_IS_ON(X,X) || MOTOR_IS_ON(Y,Y)
-          || TERN0(HAS_X2_ENABLE, MOTOR_IS_ON(X2,X))
-          || TERN0(HAS_Y2_ENABLE, MOTOR_IS_ON(Y2,Y))
-          #if E_STEPPERS
-            REPEAT(E_STEPPERS, _OR_ENABLED_E)
-          #endif
-        )
-      )
-    );
-
     // If any triggers for the controller fan are true...
     //   - At least one stepper driver is enabled
     //   - The heated bed is enabled
     //   - TEMP_SENSOR_BOARD is reporting >= CONTROLLER_FAN_MIN_BOARD_TEMP
-    if ( motor_on
+    const ena_mask_t axis_mask = TERN(CONTROLLER_FAN_USE_Z_ONLY, _BV(Z_AXIS), ~TERN0(CONTROLLER_FAN_IGNORE_Z, _BV(Z_AXIS)));
+    if ( (stepper.axis_enabled.bits & axis_mask)
       || TERN0(HAS_HEATED_BED, thermalManager.temp_bed.soft_pwm_amount > 0)
       || TERN0(HAS_CONTROLLER_FAN_MIN_BOARD_TEMP, thermalManager.wholeDegBoard() >= CONTROLLER_FAN_MIN_BOARD_TEMP)
     ) lastMotorOn = ms; //... set time to NOW so the fan will turn on

commit 2f6c8e1176202a014c2a038846cb0403cd2cafe0
Author: Katelyn Schiesser <katelyn.schiesser@gmail.com>
Date:   Sun Jul 11 18:41:33 2021 -0700

    ✨ Add TEMP_SENSOR_BOARD (#22279)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 0206467752..35f567fa8f 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -76,9 +76,14 @@ void ControllerFan::update() {
       )
     );
 
-    // If any of the drivers or the heated bed are enabled...
-    if (motor_on || TERN0(HAS_HEATED_BED, thermalManager.temp_bed.soft_pwm_amount > 0))
-      lastMotorOn = ms; //... set time to NOW so the fan will turn on
+    // If any triggers for the controller fan are true...
+    //   - At least one stepper driver is enabled
+    //   - The heated bed is enabled
+    //   - TEMP_SENSOR_BOARD is reporting >= CONTROLLER_FAN_MIN_BOARD_TEMP
+    if ( motor_on
+      || TERN0(HAS_HEATED_BED, thermalManager.temp_bed.soft_pwm_amount > 0)
+      || TERN0(HAS_CONTROLLER_FAN_MIN_BOARD_TEMP, thermalManager.wholeDegBoard() >= CONTROLLER_FAN_MIN_BOARD_TEMP)
+    ) lastMotorOn = ms; //... set time to NOW so the fan will turn on
 
     // Fan Settings. Set fan > 0:
     //  - If AutoMode is on and steppers have been enabled for CONTROLLERFAN_IDLE_TIME seconds.

commit 53e79224fc404361f6233c19466816270dd5cf1b
Author: Jason Smith <jason.inet@gmail.com>
Date:   Tue Nov 10 01:32:08 2020 -0800

    Fix Arduino DUE compilation (#20058)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index fa5a86b019..0206467752 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -34,6 +34,8 @@ uint8_t ControllerFan::speed;
 
 #if ENABLED(CONTROLLER_FAN_EDITABLE)
   controllerFan_settings_t ControllerFan::settings; // {0}
+ #else
+   const controllerFan_settings_t &ControllerFan::settings = controllerFan_defaults;
 #endif
 
 void ControllerFan::setup() {

commit 2c61e6ba2802919ec8c2caacc34865335464098f
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Thu Jul 23 22:27:40 2020 -0400

    Add CONTROLLER_FAN_IGNORE_Z (#18735)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index c9a2dad03d..fa5a86b019 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -55,30 +55,24 @@ void ControllerFan::update() {
     #define MOTOR_IS_ON(A,B) (A##_ENABLE_READ() == bool(B##_ENABLE_ON))
     #define _OR_ENABLED_E(N) || MOTOR_IS_ON(E##N,E)
 
-    const bool motor_on = MOTOR_IS_ON(Z,Z)
-      #if HAS_Z2_ENABLE
-        || MOTOR_IS_ON(Z2,Z)
-      #endif
-      #if HAS_Z3_ENABLE
-        || MOTOR_IS_ON(Z3,Z)
-      #endif
-      #if HAS_Z4_ENABLE
-        || MOTOR_IS_ON(Z4,Z)
-      #endif
-      || (DISABLED(CONTROLLER_FAN_USE_Z_ONLY) && (
-          MOTOR_IS_ON(X,X) || MOTOR_IS_ON(Y,Y)
-          #if HAS_X2_ENABLE
-            || MOTOR_IS_ON(X2,X)
-          #endif
-          #if HAS_Y2_ENABLE
-            || MOTOR_IS_ON(Y2,Y)
-          #endif
+    const bool motor_on = (
+      ( DISABLED(CONTROLLER_FAN_IGNORE_Z) &&
+        (    MOTOR_IS_ON(Z,Z)
+          || TERN0(HAS_Z2_ENABLE, MOTOR_IS_ON(Z2,Z))
+          || TERN0(HAS_Z3_ENABLE, MOTOR_IS_ON(Z3,Z))
+          || TERN0(HAS_Z4_ENABLE, MOTOR_IS_ON(Z4,Z))
+        )
+      ) || (
+        DISABLED(CONTROLLER_FAN_USE_Z_ONLY) &&
+        (    MOTOR_IS_ON(X,X) || MOTOR_IS_ON(Y,Y)
+          || TERN0(HAS_X2_ENABLE, MOTOR_IS_ON(X2,X))
+          || TERN0(HAS_Y2_ENABLE, MOTOR_IS_ON(Y2,Y))
           #if E_STEPPERS
             REPEAT(E_STEPPERS, _OR_ENABLED_E)
           #endif
         )
       )
-    ;
+    );
 
     // If any of the drivers or the heated bed are enabled...
     if (motor_on || TERN0(HAS_HEATED_BED, thermalManager.temp_bed.soft_pwm_amount > 0))

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index c329acf697..c9a2dad03d 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit 6d90d1e1f552dca5e21bc61b676b8e8ce731b280
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 22 16:35:03 2020 -0500

    Apply TERN to compact code (#17619)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index debfdea1f9..c329acf697 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -81,11 +81,8 @@ void ControllerFan::update() {
     ;
 
     // If any of the drivers or the heated bed are enabled...
-    if (motor_on
-      #if HAS_HEATED_BED
-        || thermalManager.temp_bed.soft_pwm_amount > 0
-      #endif
-    ) lastMotorOn = ms; //... set time to NOW so the fan will turn on
+    if (motor_on || TERN0(HAS_HEATED_BED, thermalManager.temp_bed.soft_pwm_amount > 0))
+      lastMotorOn = ms; //... set time to NOW so the fan will turn on
 
     // Fan Settings. Set fan > 0:
     //  - If AutoMode is on and steppers have been enabled for CONTROLLERFAN_IDLE_TIME seconds.

commit 0e06aaa2bc5c58e018fcdd466ae8836ac0c38e13
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Apr 3 19:49:45 2020 -0500

    Add millis helper macros

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 0746700407..debfdea1f9 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -91,7 +91,7 @@ void ControllerFan::update() {
     //  - If AutoMode is on and steppers have been enabled for CONTROLLERFAN_IDLE_TIME seconds.
     //  - If System is on idle and idle fan speed settings is activated.
     set_fan_speed(
-      settings.auto_mode && lastMotorOn && PENDING(ms, lastMotorOn + settings.duration * 1000UL)
+      settings.auto_mode && lastMotorOn && PENDING(ms, lastMotorOn + SEC_TO_MS(settings.duration))
       ? settings.active_speed : settings.idle_speed
     );
 

commit de45ac41ad175dafa799c15a85c05b812f284b42
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Mar 18 14:35:52 2020 -0500

    Implement CONTROLLER_FAN_USE_Z_ONLY
    
    Followup to #17149

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index ed7fca1fe7..0746700407 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -55,35 +55,36 @@ void ControllerFan::update() {
     #define MOTOR_IS_ON(A,B) (A##_ENABLE_READ() == bool(B##_ENABLE_ON))
     #define _OR_ENABLED_E(N) || MOTOR_IS_ON(E##N,E)
 
-    const bool
-    xy_motor_on = MOTOR_IS_ON(X,X) || MOTOR_IS_ON(Y,Y)
-                  #if HAS_X2_ENABLE
-                    || MOTOR_IS_ON(X2,X)
-                  #endif
-                  #if HAS_Y2_ENABLE
-                    || MOTOR_IS_ON(Y2,Y)
-                  #endif
-                  ,
-    z_motor_on  = MOTOR_IS_ON(Z,Z)
-                  #if HAS_Z2_ENABLE
-                    || MOTOR_IS_ON(Z2,Z)
-                  #endif
-                  #if HAS_Z3_ENABLE
-                    || MOTOR_IS_ON(Z3,Z)
-                  #endif
-                  #if HAS_Z4_ENABLE
-                    || MOTOR_IS_ON(Z4,Z)
-                  #endif
-                  ;
+    const bool motor_on = MOTOR_IS_ON(Z,Z)
+      #if HAS_Z2_ENABLE
+        || MOTOR_IS_ON(Z2,Z)
+      #endif
+      #if HAS_Z3_ENABLE
+        || MOTOR_IS_ON(Z3,Z)
+      #endif
+      #if HAS_Z4_ENABLE
+        || MOTOR_IS_ON(Z4,Z)
+      #endif
+      || (DISABLED(CONTROLLER_FAN_USE_Z_ONLY) && (
+          MOTOR_IS_ON(X,X) || MOTOR_IS_ON(Y,Y)
+          #if HAS_X2_ENABLE
+            || MOTOR_IS_ON(X2,X)
+          #endif
+          #if HAS_Y2_ENABLE
+            || MOTOR_IS_ON(Y2,Y)
+          #endif
+          #if E_STEPPERS
+            REPEAT(E_STEPPERS, _OR_ENABLED_E)
+          #endif
+        )
+      )
+    ;
 
-    // If any of the drivers or the bed are enabled...
-    if (xy_motor_on || z_motor_on
+    // If any of the drivers or the heated bed are enabled...
+    if (motor_on
       #if HAS_HEATED_BED
         || thermalManager.temp_bed.soft_pwm_amount > 0
       #endif
-      #if E_STEPPERS
-        REPEAT(E_STEPPERS, _OR_ENABLED_E)
-      #endif
     ) lastMotorOn = ms; //... set time to NOW so the fan will turn on
 
     // Fan Settings. Set fan > 0:

commit 83eec683c969d793b473015476d03f868b470c04
Author: Erkan Colak <erkanc@gmx.de>
Date:   Wed Mar 18 19:41:12 2020 +0100

    New Controller Fan options and M710 gcode (#17149)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index b9d8c39460..ed7fca1fe7 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -24,60 +24,79 @@
 
 #if ENABLED(USE_CONTROLLER_FAN)
 
+#include "controllerfan.h"
 #include "../module/stepper/indirection.h"
 #include "../module/temperature.h"
 
-uint8_t controllerfan_speed;
+ControllerFan controllerFan;
 
-void controllerfan_update() {
-  static millis_t lastMotorOn = 0, // Last time a motor was turned on
+uint8_t ControllerFan::speed;
+
+#if ENABLED(CONTROLLER_FAN_EDITABLE)
+  controllerFan_settings_t ControllerFan::settings; // {0}
+#endif
+
+void ControllerFan::setup() {
+  SET_OUTPUT(CONTROLLER_FAN_PIN);
+  init();
+}
+
+void ControllerFan::set_fan_speed(const uint8_t s) {
+  speed = s < (CONTROLLERFAN_SPEED_MIN) ? 0 : s; // Fan OFF below minimum
+}
+
+void ControllerFan::update() {
+  static millis_t lastMotorOn = 0,    // Last time a motor was turned on
                   nextMotorCheck = 0; // Last time the state was checked
   const millis_t ms = millis();
   if (ELAPSED(ms, nextMotorCheck)) {
     nextMotorCheck = ms + 2500UL; // Not a time critical function, so only check every 2.5s
 
-    const bool xory = X_ENABLE_READ() == bool(X_ENABLE_ON) || Y_ENABLE_READ() == bool(Y_ENABLE_ON);
+    #define MOTOR_IS_ON(A,B) (A##_ENABLE_READ() == bool(B##_ENABLE_ON))
+    #define _OR_ENABLED_E(N) || MOTOR_IS_ON(E##N,E)
+
+    const bool
+    xy_motor_on = MOTOR_IS_ON(X,X) || MOTOR_IS_ON(Y,Y)
+                  #if HAS_X2_ENABLE
+                    || MOTOR_IS_ON(X2,X)
+                  #endif
+                  #if HAS_Y2_ENABLE
+                    || MOTOR_IS_ON(Y2,Y)
+                  #endif
+                  ,
+    z_motor_on  = MOTOR_IS_ON(Z,Z)
+                  #if HAS_Z2_ENABLE
+                    || MOTOR_IS_ON(Z2,Z)
+                  #endif
+                  #if HAS_Z3_ENABLE
+                    || MOTOR_IS_ON(Z3,Z)
+                  #endif
+                  #if HAS_Z4_ENABLE
+                    || MOTOR_IS_ON(Z4,Z)
+                  #endif
+                  ;
 
     // If any of the drivers or the bed are enabled...
-    if (xory || Z_ENABLE_READ() == bool(Z_ENABLE_ON)
+    if (xy_motor_on || z_motor_on
       #if HAS_HEATED_BED
         || thermalManager.temp_bed.soft_pwm_amount > 0
       #endif
-      #if HAS_X2_ENABLE
-        || X2_ENABLE_READ() == bool(X_ENABLE_ON)
-      #endif
-      #if HAS_Y2_ENABLE
-        || Y2_ENABLE_READ() == bool(Y_ENABLE_ON)
-      #endif
-      #if HAS_Z2_ENABLE
-        || Z2_ENABLE_READ() == bool(Z_ENABLE_ON)
-      #endif
-      #if HAS_Z3_ENABLE
-        || Z3_ENABLE_READ() == bool(Z_ENABLE_ON)
-      #endif
-      #if HAS_Z4_ENABLE
-        || Z4_ENABLE_READ() == bool(Z_ENABLE_ON)
-      #endif
       #if E_STEPPERS
-        #define _OR_ENABLED_E(N) || E##N##_ENABLE_READ() == bool(E_ENABLE_ON)
         REPEAT(E_STEPPERS, _OR_ENABLED_E)
       #endif
-    ) {
-      lastMotorOn = ms; //... set time to NOW so the fan will turn on
-    }
+    ) lastMotorOn = ms; //... set time to NOW so the fan will turn on
 
-    // Fan off if no steppers have been enabled for CONTROLLERFAN_SECS seconds
-    controllerfan_speed = (!lastMotorOn || ELAPSED(ms, lastMotorOn + (CONTROLLERFAN_SECS) * 1000UL)) ? 0 : (
-      #ifdef CONTROLLERFAN_SPEED_Z_ONLY
-        xory ? CONTROLLERFAN_SPEED : CONTROLLERFAN_SPEED_Z_ONLY
-      #else
-        CONTROLLERFAN_SPEED
-      #endif
+    // Fan Settings. Set fan > 0:
+    //  - If AutoMode is on and steppers have been enabled for CONTROLLERFAN_IDLE_TIME seconds.
+    //  - If System is on idle and idle fan speed settings is activated.
+    set_fan_speed(
+      settings.auto_mode && lastMotorOn && PENDING(ms, lastMotorOn + settings.duration * 1000UL)
+      ? settings.active_speed : settings.idle_speed
     );
 
     // Allow digital or PWM fan output (see M42 handling)
-    WRITE(CONTROLLER_FAN_PIN, controllerfan_speed);
-    analogWrite(pin_t(CONTROLLER_FAN_PIN), controllerfan_speed);
+    WRITE(CONTROLLER_FAN_PIN, speed);
+    analogWrite(pin_t(CONTROLLER_FAN_PIN), speed);
   }
 }
 

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 57b552f9b0..b9d8c39460 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit 0fcf2b1110d9f0d362e5aab9cc73d963710e9865
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Mon Jan 20 00:35:07 2020 -0500

    Quad Z stepper support (#16277)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 7f02e4c189..57b552f9b0 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -55,6 +55,9 @@ void controllerfan_update() {
       #if HAS_Z3_ENABLE
         || Z3_ENABLE_READ() == bool(Z_ENABLE_ON)
       #endif
+      #if HAS_Z4_ENABLE
+        || Z4_ENABLE_READ() == bool(Z_ENABLE_ON)
+      #endif
       #if E_STEPPERS
         #define _OR_ENABLED_E(N) || E##N##_ENABLE_READ() == bool(E_ENABLE_ON)
         REPEAT(E_STEPPERS, _OR_ENABLED_E)

commit dda76e50a9e1683e988ff79be7225269a4ee8a98
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jan 19 20:05:53 2020 -0600

    Use bool in pin compare

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index b152b0bd7a..7f02e4c189 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -36,27 +36,27 @@ void controllerfan_update() {
   if (ELAPSED(ms, nextMotorCheck)) {
     nextMotorCheck = ms + 2500UL; // Not a time critical function, so only check every 2.5s
 
-    const bool xory = X_ENABLE_READ() == X_ENABLE_ON || Y_ENABLE_READ() == Y_ENABLE_ON;
+    const bool xory = X_ENABLE_READ() == bool(X_ENABLE_ON) || Y_ENABLE_READ() == bool(Y_ENABLE_ON);
 
     // If any of the drivers or the bed are enabled...
-    if (xory || Z_ENABLE_READ() == Z_ENABLE_ON
+    if (xory || Z_ENABLE_READ() == bool(Z_ENABLE_ON)
       #if HAS_HEATED_BED
         || thermalManager.temp_bed.soft_pwm_amount > 0
       #endif
       #if HAS_X2_ENABLE
-        || X2_ENABLE_READ() == X_ENABLE_ON
+        || X2_ENABLE_READ() == bool(X_ENABLE_ON)
       #endif
       #if HAS_Y2_ENABLE
-        || Y2_ENABLE_READ() == Y_ENABLE_ON
+        || Y2_ENABLE_READ() == bool(Y_ENABLE_ON)
       #endif
       #if HAS_Z2_ENABLE
-        || Z2_ENABLE_READ() == Z_ENABLE_ON
+        || Z2_ENABLE_READ() == bool(Z_ENABLE_ON)
       #endif
       #if HAS_Z3_ENABLE
-        || Z3_ENABLE_READ() == Z_ENABLE_ON
+        || Z3_ENABLE_READ() == bool(Z_ENABLE_ON)
       #endif
       #if E_STEPPERS
-        #define _OR_ENABLED_E(N) || E##N##_ENABLE_READ() == E_ENABLE_ON
+        #define _OR_ENABLED_E(N) || E##N##_ENABLE_READ() == bool(E_ENABLE_ON)
         REPEAT(E_STEPPERS, _OR_ENABLED_E)
       #endif
     ) {

commit 37849969ad231a947e904d3578d13c93a630e88e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jan 19 20:01:22 2020 -0600

    Function-like macros

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 7e4312bab1..b152b0bd7a 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -43,22 +43,22 @@ void controllerfan_update() {
       #if HAS_HEATED_BED
         || thermalManager.temp_bed.soft_pwm_amount > 0
       #endif
-        #if HAS_X2_ENABLE
-          || X2_ENABLE_READ() == X_ENABLE_ON
-        #endif
-        #if HAS_Y2_ENABLE
-          || Y2_ENABLE_READ() == Y_ENABLE_ON
-        #endif
-        #if HAS_Z2_ENABLE
-          || Z2_ENABLE_READ() == Z_ENABLE_ON
-        #endif
-        #if HAS_Z3_ENABLE
-          || Z3_ENABLE_READ() == Z_ENABLE_ON
-        #endif
-        #if E_STEPPERS
-          #define _OR_ENABLED_E(N) || E##N##_ENABLE_READ() == E_ENABLE_ON
-          REPEAT(E_STEPPERS, _OR_ENABLED_E)
-        #endif
+      #if HAS_X2_ENABLE
+        || X2_ENABLE_READ() == X_ENABLE_ON
+      #endif
+      #if HAS_Y2_ENABLE
+        || Y2_ENABLE_READ() == Y_ENABLE_ON
+      #endif
+      #if HAS_Z2_ENABLE
+        || Z2_ENABLE_READ() == Z_ENABLE_ON
+      #endif
+      #if HAS_Z3_ENABLE
+        || Z3_ENABLE_READ() == Z_ENABLE_ON
+      #endif
+      #if E_STEPPERS
+        #define _OR_ENABLED_E(N) || E##N##_ENABLE_READ() == E_ENABLE_ON
+        REPEAT(E_STEPPERS, _OR_ENABLED_E)
+      #endif
     ) {
       lastMotorOn = ms; //... set time to NOW so the fan will turn on
     }

commit 776632c503540c3bd2061b1b0812c091b3a4f6b4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Nov 9 17:59:04 2019 -0600

    Add and apply REPEAT macro (#15829)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 1a458a2a55..7e4312bab1 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -56,23 +56,9 @@ void controllerfan_update() {
           || Z3_ENABLE_READ() == Z_ENABLE_ON
         #endif
         #if E_STEPPERS
-          || E0_ENABLE_READ() == E_ENABLE_ON
-          #if E_STEPPERS > 1
-            || E1_ENABLE_READ() == E_ENABLE_ON
-            #if E_STEPPERS > 2
-              || E2_ENABLE_READ() == E_ENABLE_ON
-              #if E_STEPPERS > 3
-                || E3_ENABLE_READ() == E_ENABLE_ON
-                #if E_STEPPERS > 4
-                  || E4_ENABLE_READ() == E_ENABLE_ON
-                  #if E_STEPPERS > 5
-                    || E5_ENABLE_READ() == E_ENABLE_ON
-                  #endif // E_STEPPERS > 5
-                #endif // E_STEPPERS > 4
-              #endif // E_STEPPERS > 3
-            #endif // E_STEPPERS > 2
-          #endif // E_STEPPERS > 1
-        #endif // E_STEPPERS
+          #define _OR_ENABLED_E(N) || E##N##_ENABLE_READ() == E_ENABLE_ON
+          REPEAT(E_STEPPERS, _OR_ENABLED_E)
+        #endif
     ) {
       lastMotorOn = ms; //... set time to NOW so the fan will turn on
     }

commit 586b334c2ab61240607e878390ed1d53af86da69
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Aug 31 19:44:45 2019 -0500

    Split up stepper indirection (#15111)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 00d895aa68..1a458a2a55 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -24,7 +24,7 @@
 
 #if ENABLED(USE_CONTROLLER_FAN)
 
-#include "../module/stepper_indirection.h"
+#include "../module/stepper/indirection.h"
 #include "../module/temperature.h"
 
 uint8_t controllerfan_speed;

commit 8bdb3d997048fac4dae3ee47b0d7131aa581c644
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Fri Aug 16 20:57:19 2019 -0600

    Add CONTROLLERFAN_SPEED_Z_ONLY (#14956)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index a75f4d9822..00d895aa68 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -36,35 +36,37 @@ void controllerfan_update() {
   if (ELAPSED(ms, nextMotorCheck)) {
     nextMotorCheck = ms + 2500UL; // Not a time critical function, so only check every 2.5s
 
+    const bool xory = X_ENABLE_READ() == X_ENABLE_ON || Y_ENABLE_READ() == Y_ENABLE_ON;
+
     // If any of the drivers or the bed are enabled...
-    if (X_ENABLE_READ == X_ENABLE_ON || Y_ENABLE_READ == Y_ENABLE_ON || Z_ENABLE_READ == Z_ENABLE_ON
+    if (xory || Z_ENABLE_READ() == Z_ENABLE_ON
       #if HAS_HEATED_BED
         || thermalManager.temp_bed.soft_pwm_amount > 0
       #endif
         #if HAS_X2_ENABLE
-          || X2_ENABLE_READ == X_ENABLE_ON
+          || X2_ENABLE_READ() == X_ENABLE_ON
         #endif
         #if HAS_Y2_ENABLE
-          || Y2_ENABLE_READ == Y_ENABLE_ON
+          || Y2_ENABLE_READ() == Y_ENABLE_ON
         #endif
         #if HAS_Z2_ENABLE
-          || Z2_ENABLE_READ == Z_ENABLE_ON
+          || Z2_ENABLE_READ() == Z_ENABLE_ON
         #endif
         #if HAS_Z3_ENABLE
-          || Z3_ENABLE_READ == Z_ENABLE_ON
+          || Z3_ENABLE_READ() == Z_ENABLE_ON
         #endif
         #if E_STEPPERS
-          || E0_ENABLE_READ == E_ENABLE_ON
+          || E0_ENABLE_READ() == E_ENABLE_ON
           #if E_STEPPERS > 1
-            || E1_ENABLE_READ == E_ENABLE_ON
+            || E1_ENABLE_READ() == E_ENABLE_ON
             #if E_STEPPERS > 2
-              || E2_ENABLE_READ == E_ENABLE_ON
+              || E2_ENABLE_READ() == E_ENABLE_ON
               #if E_STEPPERS > 3
-                || E3_ENABLE_READ == E_ENABLE_ON
+                || E3_ENABLE_READ() == E_ENABLE_ON
                 #if E_STEPPERS > 4
-                  || E4_ENABLE_READ == E_ENABLE_ON
+                  || E4_ENABLE_READ() == E_ENABLE_ON
                   #if E_STEPPERS > 5
-                    || E5_ENABLE_READ == E_ENABLE_ON
+                    || E5_ENABLE_READ() == E_ENABLE_ON
                   #endif // E_STEPPERS > 5
                 #endif // E_STEPPERS > 4
               #endif // E_STEPPERS > 3
@@ -76,12 +78,17 @@ void controllerfan_update() {
     }
 
     // Fan off if no steppers have been enabled for CONTROLLERFAN_SECS seconds
-    uint8_t speed = (!lastMotorOn || ELAPSED(ms, lastMotorOn + (CONTROLLERFAN_SECS) * 1000UL)) ? 0 : CONTROLLERFAN_SPEED;
-    controllerfan_speed = speed;
+    controllerfan_speed = (!lastMotorOn || ELAPSED(ms, lastMotorOn + (CONTROLLERFAN_SECS) * 1000UL)) ? 0 : (
+      #ifdef CONTROLLERFAN_SPEED_Z_ONLY
+        xory ? CONTROLLERFAN_SPEED : CONTROLLERFAN_SPEED_Z_ONLY
+      #else
+        CONTROLLERFAN_SPEED
+      #endif
+    );
 
-    // allows digital or PWM fan output to be used (see M42 handling)
-    WRITE(CONTROLLER_FAN_PIN, speed);
-    analogWrite(pin_t(CONTROLLER_FAN_PIN), speed);
+    // Allow digital or PWM fan output (see M42 handling)
+    WRITE(CONTROLLER_FAN_PIN, controllerfan_speed);
+    analogWrite(pin_t(CONTROLLER_FAN_PIN), controllerfan_speed);
   }
 }
 

commit d4415dcf592bbb1db869316a3020d92fa5a23edb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jul 2 04:04:49 2019 -0500

    Fix analogWrite ambiguity

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index f42b735a58..a75f4d9822 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -81,7 +81,7 @@ void controllerfan_update() {
 
     // allows digital or PWM fan output to be used (see M42 handling)
     WRITE(CONTROLLER_FAN_PIN, speed);
-    analogWrite(CONTROLLER_FAN_PIN, speed);
+    analogWrite(pin_t(CONTROLLER_FAN_PIN), speed);
   }
 }
 

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 81af957873..f42b735a58 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit 67bee06e4371fca6511aae99125337b6e63560d8
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Mar 13 07:21:10 2019 -0500

    No patch needed for non-libmaple analogWrite
    
    See https://github.com/pinchies/Marlin/pull/1#issuecomment-471388743

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index e1f3bfcdbb..81af957873 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -81,7 +81,7 @@ void controllerfan_update() {
 
     // allows digital or PWM fan output to be used (see M42 handling)
     WRITE(CONTROLLER_FAN_PIN, speed);
-    ANALOG_WRITE(CONTROLLER_FAN_PIN, speed);
+    analogWrite(CONTROLLER_FAN_PIN, speed);
   }
 }
 

commit f89b375fb9ca9730a4165ac3bf9f0f9dc100a338
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 13 06:51:15 2019 -0500

    Fixes and improvements for PWM pins (#13383)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 81af957873..e1f3bfcdbb 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -81,7 +81,7 @@ void controllerfan_update() {
 
     // allows digital or PWM fan output to be used (see M42 handling)
     WRITE(CONTROLLER_FAN_PIN, speed);
-    analogWrite(CONTROLLER_FAN_PIN, speed);
+    ANALOG_WRITE(CONTROLLER_FAN_PIN, speed);
   }
 }
 

commit 645ca7af7ac27af9d6690659dc71ff9867b34b6c
Author: 3dlabsio <shane@warnertci.com>
Date:   Thu Mar 7 00:09:39 2019 -0800

    M141 Heated Chamber, Temperature rework (#12201)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 52b17ff953..81af957873 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -39,7 +39,7 @@ void controllerfan_update() {
     // If any of the drivers or the bed are enabled...
     if (X_ENABLE_READ == X_ENABLE_ON || Y_ENABLE_READ == Y_ENABLE_ON || Z_ENABLE_READ == Z_ENABLE_ON
       #if HAS_HEATED_BED
-        || thermalManager.soft_pwm_amount_bed > 0
+        || thermalManager.temp_bed.soft_pwm_amount > 0
       #endif
         #if HAS_X2_ENABLE
           || X2_ENABLE_READ == X_ENABLE_ON

commit 2f1e1dcb42e01165e800a5d00c769efecc5a9933
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Mar 1 01:51:24 2019 -0600

    Gradual step towards EXTRUDERS 0 support

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 26560f4cde..52b17ff953 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -53,22 +53,24 @@ void controllerfan_update() {
         #if HAS_Z3_ENABLE
           || Z3_ENABLE_READ == Z_ENABLE_ON
         #endif
-        || E0_ENABLE_READ == E_ENABLE_ON
-        #if E_STEPPERS > 1
-          || E1_ENABLE_READ == E_ENABLE_ON
-          #if E_STEPPERS > 2
-            || E2_ENABLE_READ == E_ENABLE_ON
-            #if E_STEPPERS > 3
-              || E3_ENABLE_READ == E_ENABLE_ON
-              #if E_STEPPERS > 4
-                || E4_ENABLE_READ == E_ENABLE_ON
-                #if E_STEPPERS > 5
-                  || E5_ENABLE_READ == E_ENABLE_ON
-                #endif
-              #endif
-            #endif
-          #endif
-        #endif
+        #if E_STEPPERS
+          || E0_ENABLE_READ == E_ENABLE_ON
+          #if E_STEPPERS > 1
+            || E1_ENABLE_READ == E_ENABLE_ON
+            #if E_STEPPERS > 2
+              || E2_ENABLE_READ == E_ENABLE_ON
+              #if E_STEPPERS > 3
+                || E3_ENABLE_READ == E_ENABLE_ON
+                #if E_STEPPERS > 4
+                  || E4_ENABLE_READ == E_ENABLE_ON
+                  #if E_STEPPERS > 5
+                    || E5_ENABLE_READ == E_ENABLE_ON
+                  #endif // E_STEPPERS > 5
+                #endif // E_STEPPERS > 4
+              #endif // E_STEPPERS > 3
+            #endif // E_STEPPERS > 2
+          #endif // E_STEPPERS > 1
+        #endif // E_STEPPERS
     ) {
       lastMotorOn = ms; //... set time to NOW so the fan will turn on
     }

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 7ee6671332..26560f4cde 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm

commit d6b0fbd7715da67a2aaeeeafb0d4dc7c1563ef98
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Oct 7 15:34:41 2018 -0500

    Use uint8_t for all fan speeds (#12032)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 1dec32647e..7ee6671332 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -27,7 +27,7 @@
 #include "../module/stepper_indirection.h"
 #include "../module/temperature.h"
 
-uint8_t controllerFanSpeed;
+uint8_t controllerfan_speed;
 
 void controllerfan_update() {
   static millis_t lastMotorOn = 0, // Last time a motor was turned on
@@ -75,7 +75,7 @@ void controllerfan_update() {
 
     // Fan off if no steppers have been enabled for CONTROLLERFAN_SECS seconds
     uint8_t speed = (!lastMotorOn || ELAPSED(ms, lastMotorOn + (CONTROLLERFAN_SECS) * 1000UL)) ? 0 : CONTROLLERFAN_SPEED;
-    controllerFanSpeed = speed;
+    controllerfan_speed = speed;
 
     // allows digital or PWM fan output to be used (see M42 handling)
     WRITE(CONTROLLER_FAN_PIN, speed);

commit 1718eff54adefc7cc95851f28df0c7e02eae3a36
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Sep 13 01:35:55 2018 -0500

    Code changes supporting up to 6 extruders

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index d0f645af69..1dec32647e 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -57,11 +57,14 @@ void controllerfan_update() {
         #if E_STEPPERS > 1
           || E1_ENABLE_READ == E_ENABLE_ON
           #if E_STEPPERS > 2
-              || E2_ENABLE_READ == E_ENABLE_ON
+            || E2_ENABLE_READ == E_ENABLE_ON
             #if E_STEPPERS > 3
-                || E3_ENABLE_READ == E_ENABLE_ON
+              || E3_ENABLE_READ == E_ENABLE_ON
               #if E_STEPPERS > 4
-                  || E4_ENABLE_READ == E_ENABLE_ON
+                || E4_ENABLE_READ == E_ENABLE_ON
+                #if E_STEPPERS > 5
+                  || E5_ENABLE_READ == E_ENABLE_ON
+                #endif
               #endif
             #endif
           #endif

commit 1a6f2b29b8dd3bc8e6ef56d4f376f49cacfc8785
Author: Holger Müller <holger@mueller-gelff.de>
Date:   Tue Jun 19 18:55:49 2018 +0200

    Add support for Triple-Z steppers/endstops

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index b98bb80a0f..d0f645af69 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -50,6 +50,9 @@ void controllerfan_update() {
         #if HAS_Z2_ENABLE
           || Z2_ENABLE_READ == Z_ENABLE_ON
         #endif
+        #if HAS_Z3_ENABLE
+          || Z3_ENABLE_READ == Z_ENABLE_ON
+        #endif
         || E0_ENABLE_READ == E_ENABLE_ON
         #if E_STEPPERS > 1
           || E1_ENABLE_READ == E_ENABLE_ON

commit 32e38fee7474d56a3e4d47bd949351d3c99c4af8
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Aug 29 01:49:30 2018 -0500

    Update Controller Fan for Y2,Z2

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index e1d6fc5ef4..b98bb80a0f 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -35,26 +35,34 @@ void controllerfan_update() {
   const millis_t ms = millis();
   if (ELAPSED(ms, nextMotorCheck)) {
     nextMotorCheck = ms + 2500UL; // Not a time critical function, so only check every 2.5s
+
+    // If any of the drivers or the bed are enabled...
     if (X_ENABLE_READ == X_ENABLE_ON || Y_ENABLE_READ == Y_ENABLE_ON || Z_ENABLE_READ == Z_ENABLE_ON
       #if HAS_HEATED_BED
         || thermalManager.soft_pwm_amount_bed > 0
       #endif
-        || E0_ENABLE_READ == E_ENABLE_ON // If any of the drivers are enabled...
+        #if HAS_X2_ENABLE
+          || X2_ENABLE_READ == X_ENABLE_ON
+        #endif
+        #if HAS_Y2_ENABLE
+          || Y2_ENABLE_READ == Y_ENABLE_ON
+        #endif
+        #if HAS_Z2_ENABLE
+          || Z2_ENABLE_READ == Z_ENABLE_ON
+        #endif
+        || E0_ENABLE_READ == E_ENABLE_ON
         #if E_STEPPERS > 1
           || E1_ENABLE_READ == E_ENABLE_ON
-          #if HAS_X2_ENABLE
-            || X2_ENABLE_READ == X_ENABLE_ON
-          #endif
           #if E_STEPPERS > 2
-            || E2_ENABLE_READ == E_ENABLE_ON
+              || E2_ENABLE_READ == E_ENABLE_ON
             #if E_STEPPERS > 3
-              || E3_ENABLE_READ == E_ENABLE_ON
+                || E3_ENABLE_READ == E_ENABLE_ON
               #if E_STEPPERS > 4
-                || E4_ENABLE_READ == E_ENABLE_ON
-              #endif // E_STEPPERS > 4
-            #endif // E_STEPPERS > 3
-          #endif // E_STEPPERS > 2
-        #endif // E_STEPPERS > 1
+                  || E4_ENABLE_READ == E_ENABLE_ON
+              #endif
+            #endif
+          #endif
+        #endif
     ) {
       lastMotorOn = ms; //... set time to NOW so the fan will turn on
     }

commit b337698f964721950136ef85d039c0da1d780bc0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri May 4 00:15:31 2018 -0500

    Additional patch for no heated bed

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 6a770b6607..e1d6fc5ef4 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -35,7 +35,10 @@ void controllerfan_update() {
   const millis_t ms = millis();
   if (ELAPSED(ms, nextMotorCheck)) {
     nextMotorCheck = ms + 2500UL; // Not a time critical function, so only check every 2.5s
-    if (X_ENABLE_READ == X_ENABLE_ON || Y_ENABLE_READ == Y_ENABLE_ON || Z_ENABLE_READ == Z_ENABLE_ON || thermalManager.soft_pwm_amount_bed > 0
+    if (X_ENABLE_READ == X_ENABLE_ON || Y_ENABLE_READ == Y_ENABLE_ON || Z_ENABLE_READ == Z_ENABLE_ON
+      #if HAS_HEATED_BED
+        || thermalManager.soft_pwm_amount_bed > 0
+      #endif
         || E0_ENABLE_READ == E_ENABLE_ON // If any of the drivers are enabled...
         #if E_STEPPERS > 1
           || E1_ENABLE_READ == E_ENABLE_ON

commit 2d749d490baba907499cdf83a8222a26354b78ce
Author: Bob-the-Kuhn <bob.kuhn@att.net>
Date:   Fri Feb 16 02:18:50 2018 -0600

    Fix / complete USE_CONTROLLER_FAN (#9666)

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index 916c9b746d..6a770b6607 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -27,6 +27,8 @@
 #include "../module/stepper_indirection.h"
 #include "../module/temperature.h"
 
+uint8_t controllerFanSpeed;
+
 void controllerfan_update() {
   static millis_t lastMotorOn = 0, // Last time a motor was turned on
                   nextMotorCheck = 0; // Last time the state was checked
@@ -56,6 +58,7 @@ void controllerfan_update() {
 
     // Fan off if no steppers have been enabled for CONTROLLERFAN_SECS seconds
     uint8_t speed = (!lastMotorOn || ELAPSED(ms, lastMotorOn + (CONTROLLERFAN_SECS) * 1000UL)) ? 0 : CONTROLLERFAN_SPEED;
+    controllerFanSpeed = speed;
 
     // allows digital or PWM fan output to be used (see M42 handling)
     WRITE(CONTROLLER_FAN_PIN, speed);

commit 12730c1303942c8a0d15c916e6fde18c96ac10fe
Author: Unknown <davejohnson3000@gmail.com>
Date:   Sat Oct 7 05:26:36 2017 -0700

    [2.0.0] Resolve USE_CONTROLLER_FAN compile errors
    
    Add to controllerfan.cpp:
    #include "../module/stepper_indirection.h"
    #include "../module/temperature.h"

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
index f13ce18fca..916c9b746d 100644
--- a/Marlin/src/feature/controllerfan.cpp
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -24,6 +24,9 @@
 
 #if ENABLED(USE_CONTROLLER_FAN)
 
+#include "../module/stepper_indirection.h"
+#include "../module/temperature.h"
+
 void controllerfan_update() {
   static millis_t lastMotorOn = 0, // Last time a motor was turned on
                   nextMotorCheck = 0; // Last time the state was checked

commit 6f92ab7eed3f2858cd09d96df37dda20a228e9c7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Sep 18 01:44:59 2017 -0500

    Move Controller Fan to feature

diff --git a/Marlin/src/feature/controllerfan.cpp b/Marlin/src/feature/controllerfan.cpp
new file mode 100644
index 0000000000..f13ce18fca
--- /dev/null
+++ b/Marlin/src/feature/controllerfan.cpp
@@ -0,0 +1,63 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../inc/MarlinConfig.h"
+
+#if ENABLED(USE_CONTROLLER_FAN)
+
+void controllerfan_update() {
+  static millis_t lastMotorOn = 0, // Last time a motor was turned on
+                  nextMotorCheck = 0; // Last time the state was checked
+  const millis_t ms = millis();
+  if (ELAPSED(ms, nextMotorCheck)) {
+    nextMotorCheck = ms + 2500UL; // Not a time critical function, so only check every 2.5s
+    if (X_ENABLE_READ == X_ENABLE_ON || Y_ENABLE_READ == Y_ENABLE_ON || Z_ENABLE_READ == Z_ENABLE_ON || thermalManager.soft_pwm_amount_bed > 0
+        || E0_ENABLE_READ == E_ENABLE_ON // If any of the drivers are enabled...
+        #if E_STEPPERS > 1
+          || E1_ENABLE_READ == E_ENABLE_ON
+          #if HAS_X2_ENABLE
+            || X2_ENABLE_READ == X_ENABLE_ON
+          #endif
+          #if E_STEPPERS > 2
+            || E2_ENABLE_READ == E_ENABLE_ON
+            #if E_STEPPERS > 3
+              || E3_ENABLE_READ == E_ENABLE_ON
+              #if E_STEPPERS > 4
+                || E4_ENABLE_READ == E_ENABLE_ON
+              #endif // E_STEPPERS > 4
+            #endif // E_STEPPERS > 3
+          #endif // E_STEPPERS > 2
+        #endif // E_STEPPERS > 1
+    ) {
+      lastMotorOn = ms; //... set time to NOW so the fan will turn on
+    }
+
+    // Fan off if no steppers have been enabled for CONTROLLERFAN_SECS seconds
+    uint8_t speed = (!lastMotorOn || ELAPSED(ms, lastMotorOn + (CONTROLLERFAN_SECS) * 1000UL)) ? 0 : CONTROLLERFAN_SPEED;
+
+    // allows digital or PWM fan output to be used (see M42 handling)
+    WRITE(CONTROLLER_FAN_PIN, speed);
+    analogWrite(CONTROLLER_FAN_PIN, speed);
+  }
+}
+
+#endif // USE_CONTROLLER_FAN
