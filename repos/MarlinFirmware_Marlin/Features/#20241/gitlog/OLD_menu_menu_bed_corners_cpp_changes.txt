commit 10983d0cfe3e353ba465cfcadf8aeb51327f1197
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 15 00:29:37 2023 -0500

    🎨 Misc. tramming menu cleanup (#25519)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
deleted file mode 100644
index 0e0051e65d..0000000000
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ /dev/null
@@ -1,365 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-
-//
-// Level Bed Corners menu
-//
-
-#include "../../inc/MarlinConfigPre.h"
-
-#if BOTH(HAS_MARLINUI_MENU, LCD_BED_TRAMMING)
-
-#include "menu_item.h"
-#include "../../module/motion.h"
-#include "../../module/planner.h"
-
-#if HAS_LEVELING
-  #include "../../feature/bedlevel/bedlevel.h"
-#endif
-
-#ifndef BED_TRAMMING_Z_HOP
-  #define BED_TRAMMING_Z_HOP 4.0
-#endif
-#ifndef BED_TRAMMING_HEIGHT
-  #define BED_TRAMMING_HEIGHT 0.0
-#endif
-
-#if ENABLED(BED_TRAMMING_USE_PROBE)
-  #include "../../module/probe.h"
-  #include "../../module/endstops.h"
-  #if ENABLED(BLTOUCH)
-    #include "../../feature/bltouch.h"
-  #endif
-  #ifndef BED_TRAMMING_PROBE_TOLERANCE
-    #define BED_TRAMMING_PROBE_TOLERANCE 0.2
-  #endif
-  float last_z;
-  int good_points;
-  bool corner_probing_done, wait_for_probe;
-
-  #if HAS_MARLINUI_U8GLIB
-    #include "../dogm/marlinui_DOGM.h"
-  #endif
-  #define GOOD_POINTS_TO_STR(N) ui8tostr2(N)
-  #define LAST_Z_TO_STR(N) ftostr53_63(N) //ftostr42_52(N)
-
-#endif
-
-static_assert(BED_TRAMMING_Z_HOP >= 0, "BED_TRAMMING_Z_HOP must be >= 0. Please update your configuration.");
-
-#ifndef BED_TRAMMING_LEVELING_ORDER
-  #define BED_TRAMMING_LEVELING_ORDER { LF, RF, LB, RB } // Default
-  //#define BED_TRAMMING_LEVELING_ORDER { LF, LB, RF  }  // 3 hard-coded points
-  //#define BED_TRAMMING_LEVELING_ORDER { LF, RF }       // 3-Point tramming - Rear
-  //#define BED_TRAMMING_LEVELING_ORDER { LF, LB }       // 3-Point tramming - Right
-  //#define BED_TRAMMING_LEVELING_ORDER { RF, RB }       // 3-Point tramming - Left
-  //#define BED_TRAMMING_LEVELING_ORDER { LB, RB }       // 3-Point tramming - Front
-#endif
-
-#define LF 1
-#define RF 2
-#define RB 3
-#define LB 4
-constexpr int lco[] = BED_TRAMMING_LEVELING_ORDER;
-constexpr bool level_corners_3_points = COUNT(lco) == 2;
-static_assert(level_corners_3_points || COUNT(lco) == 4, "BED_TRAMMING_LEVELING_ORDER must have exactly 2 or 4 corners.");
-
-constexpr int lcodiff = ABS(lco[0] - lco[1]);
-static_assert(COUNT(lco) == 4 || lcodiff == 1 || lcodiff == 3, "The first two BED_TRAMMING_LEVELING_ORDER corners must be on the same edge.");
-
-constexpr int nr_edge_points = level_corners_3_points ? 3 : 4;
-constexpr int available_points = nr_edge_points + ENABLED(BED_TRAMMING_INCLUDE_CENTER);
-constexpr int center_index = TERN(BED_TRAMMING_INCLUDE_CENTER, available_points - 1, -1);
-constexpr float inset_lfrb[4] = BED_TRAMMING_INSET_LFRB;
-constexpr xy_pos_t lf { (X_MIN_BED) + inset_lfrb[0], (Y_MIN_BED) + inset_lfrb[1] },
-                   rb { (X_MAX_BED) - inset_lfrb[2], (Y_MAX_BED) - inset_lfrb[3] };
-
-static int8_t bed_corner;
-
-/**
- * Select next corner coordinates
- */
-static void _lcd_level_bed_corners_get_next_position() {
-
-  if (level_corners_3_points) {
-    if (bed_corner >= available_points) bed_corner = 0; // Above max position -> move back to first corner
-    switch (bed_corner) {
-      case 0 ... 1:
-        // First two corners set explicitly by the configuration
-        current_position = lf;                       // Left front
-        switch (lco[bed_corner]) {
-          case RF: current_position.x = rb.x; break; // Right Front
-          case RB: current_position   = rb;   break; // Right Back
-          case LB: current_position.y = rb.y; break; // Left Back
-        }
-        break;
-
-      case 2:
-        // Determine which edge to probe for 3rd point
-        current_position.set(lf.x + (rb.x - lf.x) / 2, lf.y + (rb.y - lf.y) / 2);
-        if ((lco[0] == LB && lco[1] == RB) || (lco[0] == RB && lco[1] == LB)) current_position.y = lf.y; // Front Center
-        if ((lco[0] == LF && lco[1] == LB) || (lco[0] == LB && lco[1] == LF)) current_position.x = rb.x; // Center Right
-        if ((lco[0] == RF && lco[1] == RB) || (lco[0] == RB && lco[1] == RF)) current_position.x = lf.x; // Left Center
-        if ((lco[0] == LF && lco[1] == RF) || (lco[0] == RF && lco[1] == LF)) current_position.y = rb.y; // Center Back
-        #if DISABLED(BED_TRAMMING_INCLUDE_CENTER) && ENABLED(BED_TRAMMING_USE_PROBE)
-          bed_corner++;  // Must increment the count to ensure it resets the loop if the 3rd point is out of tolerance
-        #endif
-        break;
-
-      #if ENABLED(BED_TRAMMING_INCLUDE_CENTER)
-        case 3:
-          current_position.set(X_CENTER, Y_CENTER);
-          break;
-      #endif
-    }
-  }
-  else {
-    // Four-Corner Bed Tramming with optional center
-    if (TERN0(BED_TRAMMING_INCLUDE_CENTER, bed_corner == center_index)) {
-      current_position.set(X_CENTER, Y_CENTER);
-      TERN_(BED_TRAMMING_USE_PROBE, good_points--); // Decrement to allow one additional probe point
-    }
-    else {
-      current_position = lf;                       // Left front
-      switch (lco[bed_corner]) {
-        case RF: current_position.x = rb.x; break; // Right front
-        case RB: current_position   = rb;   break; // Right rear
-        case LB: current_position.y = rb.y; break; // Left rear
-      }
-    }
-  }
-}
-
-/**
- * Level corners, starting in the front-left corner.
- */
-#if ENABLED(BED_TRAMMING_USE_PROBE)
-
-  #define VALIDATE_POINT(X, Y, STR) static_assert(Probe::build_time::can_reach((X), (Y)), \
-    "BED_TRAMMING_INSET_LFRB " STR " inset is not reachable with the default NOZZLE_TO_PROBE offset and PROBING_MARGIN.")
-  VALIDATE_POINT(lf.x, Y_CENTER, "left"); VALIDATE_POINT(X_CENTER, lf.y, "front");
-  VALIDATE_POINT(rb.x, Y_CENTER, "right"); VALIDATE_POINT(X_CENTER, rb.y, "back");
-
-  #ifndef PAGE_CONTAINS
-    #define PAGE_CONTAINS(...) true
-  #endif
-
-  void _lcd_draw_probing() {
-    if (!ui.should_draw()) return;
-
-    TERN_(HAS_MARLINUI_U8GLIB, ui.set_font(FONT_MENU)); // Set up the font for extra info
-
-    MenuItem_static::draw(0, GET_TEXT_F(MSG_PROBING_POINT), SS_INVERT); // "Probing Mesh" heading
-
-    uint8_t cy = TERN(TFT_COLOR_UI, 3, LCD_HEIGHT - 1), y = LCD_ROW_Y(cy);
-
-    // Display # of good points found vs total needed
-    if (PAGE_CONTAINS(y - (MENU_FONT_HEIGHT), y)) {
-      SETCURSOR(TERN(TFT_COLOR_UI, 2, 0), cy);
-      lcd_put_u8str(GET_TEXT_F(MSG_BED_TRAMMING_GOOD_POINTS));
-      IF_ENABLED(TFT_COLOR_UI, lcd_moveto(12, cy));
-      lcd_put_u8str(GOOD_POINTS_TO_STR(good_points));
-      lcd_put_u8str(F("/"));
-      lcd_put_u8str(GOOD_POINTS_TO_STR(nr_edge_points));
-    }
-
-    --cy;
-    y -= MENU_LINE_HEIGHT;
-
-    // Display the Last Z value
-    if (PAGE_CONTAINS(y - (MENU_FONT_HEIGHT), y)) {
-      SETCURSOR(TERN(TFT_COLOR_UI, 2, 0), cy);
-      lcd_put_u8str(GET_TEXT_F(MSG_BED_TRAMMING_LAST_Z));
-      IF_ENABLED(TFT_COLOR_UI, lcd_moveto(12, 2));
-      lcd_put_u8str(LAST_Z_TO_STR(last_z));
-    }
-  }
-
-  void _lcd_draw_raise() {
-    if (!ui.should_draw()) return;
-    MenuItem_confirm::select_screen(
-        GET_TEXT_F(MSG_BUTTON_DONE), GET_TEXT_F(MSG_BUTTON_SKIP)
-      , []{ corner_probing_done = true; wait_for_probe = false; }
-      , []{ wait_for_probe = false; }
-      , GET_TEXT_F(MSG_BED_TRAMMING_RAISE)
-    );
-  }
-
-  void _lcd_draw_level_prompt() {
-    if (!ui.should_draw()) return;
-    MenuItem_confirm::select_screen(
-        GET_TEXT_F(TERN(HAS_LEVELING, MSG_BUTTON_LEVEL, MSG_BUTTON_DONE)),
-        TERN(HAS_LEVELING, GET_TEXT_F(MSG_BUTTON_BACK), nullptr)
-      , []{ queue.inject(TERN(HAS_LEVELING, F("G29N"), FPSTR(G28_STR))); ui.return_to_status(); }
-      , TERN(HAS_LEVELING, ui.goto_previous_screen_no_defer, []{})
-      , GET_TEXT_F(MSG_BED_TRAMMING_IN_RANGE)
-    );
-  }
-
-  bool _lcd_level_bed_corners_probe(bool verify=false) {
-    if (verify) do_blocking_move_to_z(current_position.z + BED_TRAMMING_Z_HOP); // do clearance if needed
-    TERN_(BLTOUCH, if (!bltouch.high_speed_mode) bltouch.deploy()); // Deploy in LOW SPEED MODE on every probe action
-    do_blocking_move_to_z(last_z - BED_TRAMMING_PROBE_TOLERANCE, MMM_TO_MMS(Z_PROBE_FEEDRATE_SLOW)); // Move down to lower tolerance
-    if (TEST(endstops.trigger_state(), Z_MIN_PROBE)) { // check if probe triggered
-      endstops.hit_on_purpose();
-      set_current_from_steppers_for_axis(Z_AXIS);
-      sync_plan_position();
-      TERN_(BLTOUCH, if (!bltouch.high_speed_mode) bltouch.stow()); // Stow in LOW SPEED MODE on every trigger
-      // Triggered outside tolerance range?
-      if (ABS(current_position.z - last_z) > BED_TRAMMING_PROBE_TOLERANCE) {
-        last_z = current_position.z; // Above tolerance. Set a new Z for subsequent corners.
-        good_points = 0;             // ...and start over
-      }
-      return true; // probe triggered
-    }
-    do_blocking_move_to_z(last_z); // go back to tolerance middle point before raise
-    return false; // probe not triggered
-  }
-
-  bool _lcd_level_bed_corners_raise() {
-    bool probe_triggered = false;
-    corner_probing_done = false;
-    wait_for_probe = true;
-    ui.goto_screen(_lcd_draw_raise); // show raise screen
-    ui.set_selection(true);
-    while (wait_for_probe && !probe_triggered) { // loop while waiting to bed raise and probe trigger
-      probe_triggered = PROBE_TRIGGERED();
-      if (probe_triggered) {
-        endstops.hit_on_purpose();
-        TERN_(BED_TRAMMING_AUDIO_FEEDBACK, BUZZ(200, 600));
-      }
-      idle();
-    }
-    TERN_(BLTOUCH, if (!bltouch.high_speed_mode) bltouch.stow());
-    ui.goto_screen(_lcd_draw_probing);
-    return (probe_triggered);
-  }
-
-  void _lcd_test_corners() {
-    bed_corner = TERN(BED_TRAMMING_INCLUDE_CENTER, center_index, 0);
-    last_z = BED_TRAMMING_HEIGHT;
-    endstops.enable_z_probe(true);
-    good_points = 0;
-    ui.goto_screen(_lcd_draw_probing);
-    do {
-      ui.refresh(LCDVIEW_REDRAW_NOW);
-      _lcd_draw_probing();                                // update screen with # of good points
-
-      do_blocking_move_to_z(current_position.z + BED_TRAMMING_Z_HOP + TERN0(BLTOUCH, bltouch.z_extra_clearance())); // clearance
-
-      _lcd_level_bed_corners_get_next_position();         // Select next corner coordinates
-      current_position -= probe.offset_xy;                // Account for probe offsets
-      do_blocking_move_to_xy(current_position);           // Goto corner
-
-      TERN_(BLTOUCH, if (bltouch.high_speed_mode) bltouch.deploy()); // Deploy in HIGH SPEED MODE
-      if (!_lcd_level_bed_corners_probe()) {              // Probe down to tolerance
-        if (_lcd_level_bed_corners_raise()) {             // Prompt user to raise bed if needed
-          #if ENABLED(BED_TRAMMING_VERIFY_RAISED)        // Verify
-            while (!_lcd_level_bed_corners_probe(true)) { // Loop while corner verified
-              if (!_lcd_level_bed_corners_raise()) {      // Prompt user to raise bed if needed
-                if (corner_probing_done) return;          // Done was selected
-                break;                                    // Skip was selected
-              }
-            }
-          #endif
-        }
-        else if (corner_probing_done)                     // Done was selected
-          return;
-      }
-
-      if (bed_corner != center_index) good_points++; // ignore center
-      if (++bed_corner > 3) bed_corner = 0;
-
-    } while (good_points < nr_edge_points); // loop until all points within tolerance
-
-    #if ENABLED(BLTOUCH)
-      if (bltouch.high_speed_mode) {
-        // In HIGH SPEED MODE do clearance and stow at the very end
-        do_blocking_move_to_z(current_position.z + BED_TRAMMING_Z_HOP);
-        bltouch.stow();
-      }
-    #endif
-
-    ui.goto_screen(_lcd_draw_level_prompt); // prompt for bed leveling
-    ui.set_selection(true);
-  }
-
-#else // !BED_TRAMMING_USE_PROBE
-
-  static void _lcd_goto_next_corner() {
-    line_to_z(BED_TRAMMING_Z_HOP);
-
-    // Select next corner coordinates
-    _lcd_level_bed_corners_get_next_position();
-
-    line_to_current_position(manual_feedrate_mm_s.x);
-    line_to_z(BED_TRAMMING_HEIGHT);
-    if (++bed_corner >= available_points) bed_corner = 0;
-  }
-
-#endif // !BED_TRAMMING_USE_PROBE
-
-static void _lcd_level_bed_corners_homing() {
-  _lcd_draw_homing();
-  if (!all_axes_homed()) return;
-  #if ENABLED(BED_TRAMMING_USE_PROBE)
-    _lcd_test_corners();
-    if (corner_probing_done) ui.goto_previous_screen_no_defer();
-    TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
-    endstops.enable_z_probe(false);
-  #else
-    bed_corner = 0;
-    ui.goto_screen([]{
-      MenuItem_confirm::select_screen(
-          GET_TEXT_F(MSG_BUTTON_NEXT), GET_TEXT_F(MSG_BUTTON_DONE)
-        , _lcd_goto_next_corner
-        , []{
-            line_to_z(BED_TRAMMING_Z_HOP); // Raise Z off the bed when done
-            TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
-            ui.goto_previous_screen_no_defer();
-          }
-        , GET_TEXT_F(TERN(BED_TRAMMING_INCLUDE_CENTER, MSG_LEVEL_BED_NEXT_POINT, MSG_NEXT_CORNER))
-        , (const char*)nullptr, F("?")
-      );
-    });
-    ui.set_selection(true);
-    _lcd_goto_next_corner();
-  #endif
-}
-
-void _lcd_level_bed_corners() {
-  ui.defer_status_screen();
-  if (!all_axes_trusted()) {
-    set_all_unhomed();
-    queue.inject_P(G28_STR);
-  }
-
-  // Disable leveling so the planner won't mess with us
-  #if HAS_LEVELING
-    leveling_was_active = planner.leveling_active;
-    set_bed_leveling_enabled(false);
-  #endif
-
-  ui.goto_screen(_lcd_level_bed_corners_homing);
-}
-
-#endif // HAS_MARLINUI_MENU && LCD_BED_TRAMMING

commit 50e3e4d8628aeb2e2d106e341b9244e272965796
Author: Thomas Buck <taucher.bodensee@googlemail.com>
Date:   Sun Nov 27 01:59:13 2022 +0100

    🚸 Optional Cutter/Laser status for HD44780 (#25003)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index c4a63dafc6..0e0051e65d 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -178,7 +178,7 @@ static void _lcd_level_bed_corners_get_next_position() {
       lcd_put_u8str(GET_TEXT_F(MSG_BED_TRAMMING_GOOD_POINTS));
       IF_ENABLED(TFT_COLOR_UI, lcd_moveto(12, cy));
       lcd_put_u8str(GOOD_POINTS_TO_STR(good_points));
-      lcd_put_lchar('/');
+      lcd_put_u8str(F("/"));
       lcd_put_u8str(GOOD_POINTS_TO_STR(nr_edge_points));
     }
 

commit cb4a79173be3e8ed1ff45e7c346df1c28e744d5a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jul 1 04:49:37 2022 -0500

    🩹 Remove poison wchar_t macro

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 3fe0c582cb..c4a63dafc6 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -178,7 +178,7 @@ static void _lcd_level_bed_corners_get_next_position() {
       lcd_put_u8str(GET_TEXT_F(MSG_BED_TRAMMING_GOOD_POINTS));
       IF_ENABLED(TFT_COLOR_UI, lcd_moveto(12, cy));
       lcd_put_u8str(GOOD_POINTS_TO_STR(good_points));
-      lcd_put_wchar('/');
+      lcd_put_lchar('/');
       lcd_put_u8str(GOOD_POINTS_TO_STR(nr_edge_points));
     }
 

commit 2b3ba02f09832379cffa4fc1baaa055228b82fe8
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jun 3 18:16:43 2022 -0500

    🔧 LEVEL_BED_CORNERS => LCD_BED_TRAMMING

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index c820ff15e7..3fe0c582cb 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -26,7 +26,7 @@
 
 #include "../../inc/MarlinConfigPre.h"
 
-#if BOTH(HAS_MARLINUI_MENU, LEVEL_BED_CORNERS)
+#if BOTH(HAS_MARLINUI_MENU, LCD_BED_TRAMMING)
 
 #include "menu_item.h"
 #include "../../module/motion.h"
@@ -36,21 +36,21 @@
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
-#ifndef LEVEL_CORNERS_Z_HOP
-  #define LEVEL_CORNERS_Z_HOP 4.0
+#ifndef BED_TRAMMING_Z_HOP
+  #define BED_TRAMMING_Z_HOP 4.0
 #endif
-#ifndef LEVEL_CORNERS_HEIGHT
-  #define LEVEL_CORNERS_HEIGHT 0.0
+#ifndef BED_TRAMMING_HEIGHT
+  #define BED_TRAMMING_HEIGHT 0.0
 #endif
 
-#if ENABLED(LEVEL_CORNERS_USE_PROBE)
+#if ENABLED(BED_TRAMMING_USE_PROBE)
   #include "../../module/probe.h"
   #include "../../module/endstops.h"
   #if ENABLED(BLTOUCH)
     #include "../../feature/bltouch.h"
   #endif
-  #ifndef LEVEL_CORNERS_PROBE_TOLERANCE
-    #define LEVEL_CORNERS_PROBE_TOLERANCE 0.2
+  #ifndef BED_TRAMMING_PROBE_TOLERANCE
+    #define BED_TRAMMING_PROBE_TOLERANCE 0.2
   #endif
   float last_z;
   int good_points;
@@ -64,32 +64,32 @@
 
 #endif
 
-static_assert(LEVEL_CORNERS_Z_HOP >= 0, "LEVEL_CORNERS_Z_HOP must be >= 0. Please update your configuration.");
+static_assert(BED_TRAMMING_Z_HOP >= 0, "BED_TRAMMING_Z_HOP must be >= 0. Please update your configuration.");
 
-#ifndef LEVEL_CORNERS_LEVELING_ORDER
-  #define LEVEL_CORNERS_LEVELING_ORDER { LF, RF, LB, RB } // Default
-  //#define LEVEL_CORNERS_LEVELING_ORDER { LF, LB, RF  }  // 3 hard-coded points
-  //#define LEVEL_CORNERS_LEVELING_ORDER { LF, RF }       // 3-Point tramming - Rear
-  //#define LEVEL_CORNERS_LEVELING_ORDER { LF, LB }       // 3-Point tramming - Right
-  //#define LEVEL_CORNERS_LEVELING_ORDER { RF, RB }       // 3-Point tramming - Left
-  //#define LEVEL_CORNERS_LEVELING_ORDER { LB, RB }       // 3-Point tramming - Front
+#ifndef BED_TRAMMING_LEVELING_ORDER
+  #define BED_TRAMMING_LEVELING_ORDER { LF, RF, LB, RB } // Default
+  //#define BED_TRAMMING_LEVELING_ORDER { LF, LB, RF  }  // 3 hard-coded points
+  //#define BED_TRAMMING_LEVELING_ORDER { LF, RF }       // 3-Point tramming - Rear
+  //#define BED_TRAMMING_LEVELING_ORDER { LF, LB }       // 3-Point tramming - Right
+  //#define BED_TRAMMING_LEVELING_ORDER { RF, RB }       // 3-Point tramming - Left
+  //#define BED_TRAMMING_LEVELING_ORDER { LB, RB }       // 3-Point tramming - Front
 #endif
 
 #define LF 1
 #define RF 2
 #define RB 3
 #define LB 4
-constexpr int lco[] = LEVEL_CORNERS_LEVELING_ORDER;
+constexpr int lco[] = BED_TRAMMING_LEVELING_ORDER;
 constexpr bool level_corners_3_points = COUNT(lco) == 2;
-static_assert(level_corners_3_points || COUNT(lco) == 4, "LEVEL_CORNERS_LEVELING_ORDER must have exactly 2 or 4 corners.");
+static_assert(level_corners_3_points || COUNT(lco) == 4, "BED_TRAMMING_LEVELING_ORDER must have exactly 2 or 4 corners.");
 
 constexpr int lcodiff = ABS(lco[0] - lco[1]);
-static_assert(COUNT(lco) == 4 || lcodiff == 1 || lcodiff == 3, "The first two LEVEL_CORNERS_LEVELING_ORDER corners must be on the same edge.");
+static_assert(COUNT(lco) == 4 || lcodiff == 1 || lcodiff == 3, "The first two BED_TRAMMING_LEVELING_ORDER corners must be on the same edge.");
 
 constexpr int nr_edge_points = level_corners_3_points ? 3 : 4;
-constexpr int available_points = nr_edge_points + ENABLED(LEVEL_CENTER_TOO);
-constexpr int center_index = TERN(LEVEL_CENTER_TOO, available_points - 1, -1);
-constexpr float inset_lfrb[4] = LEVEL_CORNERS_INSET_LFRB;
+constexpr int available_points = nr_edge_points + ENABLED(BED_TRAMMING_INCLUDE_CENTER);
+constexpr int center_index = TERN(BED_TRAMMING_INCLUDE_CENTER, available_points - 1, -1);
+constexpr float inset_lfrb[4] = BED_TRAMMING_INSET_LFRB;
 constexpr xy_pos_t lf { (X_MIN_BED) + inset_lfrb[0], (Y_MIN_BED) + inset_lfrb[1] },
                    rb { (X_MAX_BED) - inset_lfrb[2], (Y_MAX_BED) - inset_lfrb[3] };
 
@@ -120,12 +120,12 @@ static void _lcd_level_bed_corners_get_next_position() {
         if ((lco[0] == LF && lco[1] == LB) || (lco[0] == LB && lco[1] == LF)) current_position.x = rb.x; // Center Right
         if ((lco[0] == RF && lco[1] == RB) || (lco[0] == RB && lco[1] == RF)) current_position.x = lf.x; // Left Center
         if ((lco[0] == LF && lco[1] == RF) || (lco[0] == RF && lco[1] == LF)) current_position.y = rb.y; // Center Back
-        #if DISABLED(LEVEL_CENTER_TOO) && ENABLED(LEVEL_CORNERS_USE_PROBE)
+        #if DISABLED(BED_TRAMMING_INCLUDE_CENTER) && ENABLED(BED_TRAMMING_USE_PROBE)
           bed_corner++;  // Must increment the count to ensure it resets the loop if the 3rd point is out of tolerance
         #endif
         break;
 
-      #if ENABLED(LEVEL_CENTER_TOO)
+      #if ENABLED(BED_TRAMMING_INCLUDE_CENTER)
         case 3:
           current_position.set(X_CENTER, Y_CENTER);
           break;
@@ -134,9 +134,9 @@ static void _lcd_level_bed_corners_get_next_position() {
   }
   else {
     // Four-Corner Bed Tramming with optional center
-    if (TERN0(LEVEL_CENTER_TOO, bed_corner == center_index)) {
+    if (TERN0(BED_TRAMMING_INCLUDE_CENTER, bed_corner == center_index)) {
       current_position.set(X_CENTER, Y_CENTER);
-      TERN_(LEVEL_CORNERS_USE_PROBE, good_points--); // Decrement to allow one additional probe point
+      TERN_(BED_TRAMMING_USE_PROBE, good_points--); // Decrement to allow one additional probe point
     }
     else {
       current_position = lf;                       // Left front
@@ -152,10 +152,10 @@ static void _lcd_level_bed_corners_get_next_position() {
 /**
  * Level corners, starting in the front-left corner.
  */
-#if ENABLED(LEVEL_CORNERS_USE_PROBE)
+#if ENABLED(BED_TRAMMING_USE_PROBE)
 
   #define VALIDATE_POINT(X, Y, STR) static_assert(Probe::build_time::can_reach((X), (Y)), \
-    "LEVEL_CORNERS_INSET_LFRB " STR " inset is not reachable with the default NOZZLE_TO_PROBE offset and PROBING_MARGIN.")
+    "BED_TRAMMING_INSET_LFRB " STR " inset is not reachable with the default NOZZLE_TO_PROBE offset and PROBING_MARGIN.")
   VALIDATE_POINT(lf.x, Y_CENTER, "left"); VALIDATE_POINT(X_CENTER, lf.y, "front");
   VALIDATE_POINT(rb.x, Y_CENTER, "right"); VALIDATE_POINT(X_CENTER, rb.y, "back");
 
@@ -216,16 +216,16 @@ static void _lcd_level_bed_corners_get_next_position() {
   }
 
   bool _lcd_level_bed_corners_probe(bool verify=false) {
-    if (verify) do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP); // do clearance if needed
+    if (verify) do_blocking_move_to_z(current_position.z + BED_TRAMMING_Z_HOP); // do clearance if needed
     TERN_(BLTOUCH, if (!bltouch.high_speed_mode) bltouch.deploy()); // Deploy in LOW SPEED MODE on every probe action
-    do_blocking_move_to_z(last_z - LEVEL_CORNERS_PROBE_TOLERANCE, MMM_TO_MMS(Z_PROBE_FEEDRATE_SLOW)); // Move down to lower tolerance
+    do_blocking_move_to_z(last_z - BED_TRAMMING_PROBE_TOLERANCE, MMM_TO_MMS(Z_PROBE_FEEDRATE_SLOW)); // Move down to lower tolerance
     if (TEST(endstops.trigger_state(), Z_MIN_PROBE)) { // check if probe triggered
       endstops.hit_on_purpose();
       set_current_from_steppers_for_axis(Z_AXIS);
       sync_plan_position();
       TERN_(BLTOUCH, if (!bltouch.high_speed_mode) bltouch.stow()); // Stow in LOW SPEED MODE on every trigger
       // Triggered outside tolerance range?
-      if (ABS(current_position.z - last_z) > LEVEL_CORNERS_PROBE_TOLERANCE) {
+      if (ABS(current_position.z - last_z) > BED_TRAMMING_PROBE_TOLERANCE) {
         last_z = current_position.z; // Above tolerance. Set a new Z for subsequent corners.
         good_points = 0;             // ...and start over
       }
@@ -245,7 +245,7 @@ static void _lcd_level_bed_corners_get_next_position() {
       probe_triggered = PROBE_TRIGGERED();
       if (probe_triggered) {
         endstops.hit_on_purpose();
-        TERN_(LEVEL_CORNERS_AUDIO_FEEDBACK, BUZZ(200, 600));
+        TERN_(BED_TRAMMING_AUDIO_FEEDBACK, BUZZ(200, 600));
       }
       idle();
     }
@@ -255,8 +255,8 @@ static void _lcd_level_bed_corners_get_next_position() {
   }
 
   void _lcd_test_corners() {
-    bed_corner = TERN(LEVEL_CENTER_TOO, center_index, 0);
-    last_z = LEVEL_CORNERS_HEIGHT;
+    bed_corner = TERN(BED_TRAMMING_INCLUDE_CENTER, center_index, 0);
+    last_z = BED_TRAMMING_HEIGHT;
     endstops.enable_z_probe(true);
     good_points = 0;
     ui.goto_screen(_lcd_draw_probing);
@@ -264,7 +264,7 @@ static void _lcd_level_bed_corners_get_next_position() {
       ui.refresh(LCDVIEW_REDRAW_NOW);
       _lcd_draw_probing();                                // update screen with # of good points
 
-      do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP + TERN0(BLTOUCH, bltouch.z_extra_clearance())); // clearance
+      do_blocking_move_to_z(current_position.z + BED_TRAMMING_Z_HOP + TERN0(BLTOUCH, bltouch.z_extra_clearance())); // clearance
 
       _lcd_level_bed_corners_get_next_position();         // Select next corner coordinates
       current_position -= probe.offset_xy;                // Account for probe offsets
@@ -273,7 +273,7 @@ static void _lcd_level_bed_corners_get_next_position() {
       TERN_(BLTOUCH, if (bltouch.high_speed_mode) bltouch.deploy()); // Deploy in HIGH SPEED MODE
       if (!_lcd_level_bed_corners_probe()) {              // Probe down to tolerance
         if (_lcd_level_bed_corners_raise()) {             // Prompt user to raise bed if needed
-          #if ENABLED(LEVEL_CORNERS_VERIFY_RAISED)        // Verify
+          #if ENABLED(BED_TRAMMING_VERIFY_RAISED)        // Verify
             while (!_lcd_level_bed_corners_probe(true)) { // Loop while corner verified
               if (!_lcd_level_bed_corners_raise()) {      // Prompt user to raise bed if needed
                 if (corner_probing_done) return;          // Done was selected
@@ -294,7 +294,7 @@ static void _lcd_level_bed_corners_get_next_position() {
     #if ENABLED(BLTOUCH)
       if (bltouch.high_speed_mode) {
         // In HIGH SPEED MODE do clearance and stow at the very end
-        do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP);
+        do_blocking_move_to_z(current_position.z + BED_TRAMMING_Z_HOP);
         bltouch.stow();
       }
     #endif
@@ -303,25 +303,25 @@ static void _lcd_level_bed_corners_get_next_position() {
     ui.set_selection(true);
   }
 
-#else // !LEVEL_CORNERS_USE_PROBE
+#else // !BED_TRAMMING_USE_PROBE
 
   static void _lcd_goto_next_corner() {
-    line_to_z(LEVEL_CORNERS_Z_HOP);
+    line_to_z(BED_TRAMMING_Z_HOP);
 
     // Select next corner coordinates
     _lcd_level_bed_corners_get_next_position();
 
     line_to_current_position(manual_feedrate_mm_s.x);
-    line_to_z(LEVEL_CORNERS_HEIGHT);
+    line_to_z(BED_TRAMMING_HEIGHT);
     if (++bed_corner >= available_points) bed_corner = 0;
   }
 
-#endif // !LEVEL_CORNERS_USE_PROBE
+#endif // !BED_TRAMMING_USE_PROBE
 
 static void _lcd_level_bed_corners_homing() {
   _lcd_draw_homing();
   if (!all_axes_homed()) return;
-  #if ENABLED(LEVEL_CORNERS_USE_PROBE)
+  #if ENABLED(BED_TRAMMING_USE_PROBE)
     _lcd_test_corners();
     if (corner_probing_done) ui.goto_previous_screen_no_defer();
     TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
@@ -333,11 +333,11 @@ static void _lcd_level_bed_corners_homing() {
           GET_TEXT_F(MSG_BUTTON_NEXT), GET_TEXT_F(MSG_BUTTON_DONE)
         , _lcd_goto_next_corner
         , []{
-            line_to_z(LEVEL_CORNERS_Z_HOP); // Raise Z off the bed when done
+            line_to_z(BED_TRAMMING_Z_HOP); // Raise Z off the bed when done
             TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
             ui.goto_previous_screen_no_defer();
           }
-        , GET_TEXT_F(TERN(LEVEL_CENTER_TOO, MSG_LEVEL_BED_NEXT_POINT, MSG_NEXT_CORNER))
+        , GET_TEXT_F(TERN(BED_TRAMMING_INCLUDE_CENTER, MSG_LEVEL_BED_NEXT_POINT, MSG_NEXT_CORNER))
         , (const char*)nullptr, F("?")
       );
     });
@@ -362,4 +362,4 @@ void _lcd_level_bed_corners() {
   ui.goto_screen(_lcd_level_bed_corners_homing);
 }
 
-#endif // HAS_MARLINUI_MENU && LEVEL_BED_CORNERS
+#endif // HAS_MARLINUI_MENU && LCD_BED_TRAMMING

commit 845e2f6fb79bdb58ee88066f8ca368db9c00ca64
Author: Tanguy Pruvot <tanguy.pruvot@gmail.com>
Date:   Wed May 25 08:07:11 2022 +0200

    Use default null args in select_screen

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index b37e05f3a4..c820ff15e7 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -201,7 +201,6 @@ static void _lcd_level_bed_corners_get_next_position() {
       , []{ corner_probing_done = true; wait_for_probe = false; }
       , []{ wait_for_probe = false; }
       , GET_TEXT_F(MSG_BED_TRAMMING_RAISE)
-      , (const char*)nullptr, NUL_STR
     );
   }
 
@@ -213,7 +212,6 @@ static void _lcd_level_bed_corners_get_next_position() {
       , []{ queue.inject(TERN(HAS_LEVELING, F("G29N"), FPSTR(G28_STR))); ui.return_to_status(); }
       , TERN(HAS_LEVELING, ui.goto_previous_screen_no_defer, []{})
       , GET_TEXT_F(MSG_BED_TRAMMING_IN_RANGE)
-      , (const char*)nullptr, NUL_STR
     );
   }
 

commit a5e1d4c50ae40c8203d8490be83ef86e16ebf1c2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 22 19:56:46 2022 -0500

    ♻️ Apply F() to more LCD code (#24228)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 163a2a751a..b37e05f3a4 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -168,7 +168,7 @@ static void _lcd_level_bed_corners_get_next_position() {
 
     TERN_(HAS_MARLINUI_U8GLIB, ui.set_font(FONT_MENU)); // Set up the font for extra info
 
-    MenuItem_static::draw(0, GET_TEXT(MSG_PROBING_POINT), SS_INVERT); // "Probing Mesh" heading
+    MenuItem_static::draw(0, GET_TEXT_F(MSG_PROBING_POINT), SS_INVERT); // "Probing Mesh" heading
 
     uint8_t cy = TERN(TFT_COLOR_UI, 3, LCD_HEIGHT - 1), y = LCD_ROW_Y(cy);
 
@@ -197,10 +197,10 @@ static void _lcd_level_bed_corners_get_next_position() {
   void _lcd_draw_raise() {
     if (!ui.should_draw()) return;
     MenuItem_confirm::select_screen(
-        GET_TEXT(MSG_BUTTON_DONE), GET_TEXT(MSG_BUTTON_SKIP)
+        GET_TEXT_F(MSG_BUTTON_DONE), GET_TEXT_F(MSG_BUTTON_SKIP)
       , []{ corner_probing_done = true; wait_for_probe = false; }
       , []{ wait_for_probe = false; }
-      , GET_TEXT(MSG_BED_TRAMMING_RAISE)
+      , GET_TEXT_F(MSG_BED_TRAMMING_RAISE)
       , (const char*)nullptr, NUL_STR
     );
   }
@@ -208,11 +208,11 @@ static void _lcd_level_bed_corners_get_next_position() {
   void _lcd_draw_level_prompt() {
     if (!ui.should_draw()) return;
     MenuItem_confirm::select_screen(
-        GET_TEXT(TERN(HAS_LEVELING, MSG_BUTTON_LEVEL, MSG_BUTTON_DONE)),
-        TERN(HAS_LEVELING, GET_TEXT(MSG_BUTTON_BACK), nullptr)
+        GET_TEXT_F(TERN(HAS_LEVELING, MSG_BUTTON_LEVEL, MSG_BUTTON_DONE)),
+        TERN(HAS_LEVELING, GET_TEXT_F(MSG_BUTTON_BACK), nullptr)
       , []{ queue.inject(TERN(HAS_LEVELING, F("G29N"), FPSTR(G28_STR))); ui.return_to_status(); }
       , TERN(HAS_LEVELING, ui.goto_previous_screen_no_defer, []{})
-      , GET_TEXT(MSG_BED_TRAMMING_IN_RANGE)
+      , GET_TEXT_F(MSG_BED_TRAMMING_IN_RANGE)
       , (const char*)nullptr, NUL_STR
     );
   }
@@ -332,15 +332,15 @@ static void _lcd_level_bed_corners_homing() {
     bed_corner = 0;
     ui.goto_screen([]{
       MenuItem_confirm::select_screen(
-          GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE)
+          GET_TEXT_F(MSG_BUTTON_NEXT), GET_TEXT_F(MSG_BUTTON_DONE)
         , _lcd_goto_next_corner
         , []{
             line_to_z(LEVEL_CORNERS_Z_HOP); // Raise Z off the bed when done
             TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
             ui.goto_previous_screen_no_defer();
           }
-        , GET_TEXT(TERN(LEVEL_CENTER_TOO, MSG_LEVEL_BED_NEXT_POINT, MSG_NEXT_CORNER))
-        , (const char*)nullptr, PSTR("?")
+        , GET_TEXT_F(TERN(LEVEL_CENTER_TOO, MSG_LEVEL_BED_NEXT_POINT, MSG_NEXT_CORNER))
+        , (const char*)nullptr, F("?")
       );
     });
     ui.set_selection(true);

commit 04fe50936e23a8aca7a400591e700c1220f68b3f
Author: Pauli Jokela <pauli.jokela@didstopia.com>
Date:   Thu May 12 05:23:16 2022 +0300

    ✨ SOUND_ON_DEFAULT option (#24102)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index e3f5c460ed..163a2a751a 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -247,7 +247,7 @@ static void _lcd_level_bed_corners_get_next_position() {
       probe_triggered = PROBE_TRIGGERED();
       if (probe_triggered) {
         endstops.hit_on_purpose();
-        TERN_(LEVEL_CORNERS_AUDIO_FEEDBACK, ui.buzz(200, 600));
+        TERN_(LEVEL_CORNERS_AUDIO_FEEDBACK, BUZZ(200, 600));
       }
       idle();
     }

commit 5b35f3a95582a477e879be5cc7d1406a42d3e740
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Wed Jan 26 10:33:10 2022 -0800

    🚸 Better "Bed Tramming Done" dialog (#23616)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 7a0f2eaa49..e3f5c460ed 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -207,11 +207,13 @@ static void _lcd_level_bed_corners_get_next_position() {
 
   void _lcd_draw_level_prompt() {
     if (!ui.should_draw()) return;
-    MenuItem_confirm::confirm_screen(
-        []{ queue.inject(TERN(HAS_LEVELING, F("G29N"), FPSTR(G28_STR))); ui.return_to_status(); }
-      , ui.goto_previous_screen_no_defer
+    MenuItem_confirm::select_screen(
+        GET_TEXT(TERN(HAS_LEVELING, MSG_BUTTON_LEVEL, MSG_BUTTON_DONE)),
+        TERN(HAS_LEVELING, GET_TEXT(MSG_BUTTON_BACK), nullptr)
+      , []{ queue.inject(TERN(HAS_LEVELING, F("G29N"), FPSTR(G28_STR))); ui.return_to_status(); }
+      , TERN(HAS_LEVELING, ui.goto_previous_screen_no_defer, []{})
       , GET_TEXT(MSG_BED_TRAMMING_IN_RANGE)
-      , (const char*)nullptr, PSTR("?")
+      , (const char*)nullptr, NUL_STR
     );
   }
 

commit ab46b7e2f298826a5512569d6e79bb59a7a6b8ea
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jan 25 15:33:03 2022 -0600

    🧑‍💻 HAS_MARLINUI_MENU, HAS_MANUAL_MOVE_MENU

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 38a074eb01..7a0f2eaa49 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -26,7 +26,7 @@
 
 #include "../../inc/MarlinConfigPre.h"
 
-#if BOTH(HAS_LCD_MENU, LEVEL_BED_CORNERS)
+#if BOTH(HAS_MARLINUI_MENU, LEVEL_BED_CORNERS)
 
 #include "menu_item.h"
 #include "../../module/motion.h"
@@ -362,4 +362,4 @@ void _lcd_level_bed_corners() {
   ui.goto_screen(_lcd_level_bed_corners_homing);
 }
 
-#endif // HAS_LCD_MENU && LEVEL_BED_CORNERS
+#endif // HAS_MARLINUI_MENU && LEVEL_BED_CORNERS

commit da67deb621bcf140e2f843c030d2b2b195c39ef9
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Thu Dec 23 08:32:27 2021 +0100

    ✏️ Fix missing brace (#23337)
    
    Followup to #22916
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 5740978639..38a074eb01 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -292,7 +292,7 @@ static void _lcd_level_bed_corners_get_next_position() {
     } while (good_points < nr_edge_points); // loop until all points within tolerance
 
     #if ENABLED(BLTOUCH)
-      if (bltouch.high_speed_mode)
+      if (bltouch.high_speed_mode) {
         // In HIGH SPEED MODE do clearance and stow at the very end
         do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP);
         bltouch.stow();

commit 2893048e2955963bb307a4ca67ec26bb336de2f5
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Tue Dec 21 23:09:55 2021 -0500

    ✨ BLTouch High Speed mode runtime configuration (#22916)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 7bf247f40b..5740978639 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -217,13 +217,13 @@ static void _lcd_level_bed_corners_get_next_position() {
 
   bool _lcd_level_bed_corners_probe(bool verify=false) {
     if (verify) do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP); // do clearance if needed
-    TERN_(BLTOUCH_SLOW_MODE, bltouch.deploy()); // Deploy in LOW SPEED MODE on every probe action
+    TERN_(BLTOUCH, if (!bltouch.high_speed_mode) bltouch.deploy()); // Deploy in LOW SPEED MODE on every probe action
     do_blocking_move_to_z(last_z - LEVEL_CORNERS_PROBE_TOLERANCE, MMM_TO_MMS(Z_PROBE_FEEDRATE_SLOW)); // Move down to lower tolerance
     if (TEST(endstops.trigger_state(), Z_MIN_PROBE)) { // check if probe triggered
       endstops.hit_on_purpose();
       set_current_from_steppers_for_axis(Z_AXIS);
       sync_plan_position();
-      TERN_(BLTOUCH_SLOW_MODE, bltouch.stow()); // Stow in LOW SPEED MODE on every trigger
+      TERN_(BLTOUCH, if (!bltouch.high_speed_mode) bltouch.stow()); // Stow in LOW SPEED MODE on every trigger
       // Triggered outside tolerance range?
       if (ABS(current_position.z - last_z) > LEVEL_CORNERS_PROBE_TOLERANCE) {
         last_z = current_position.z; // Above tolerance. Set a new Z for subsequent corners.
@@ -249,7 +249,7 @@ static void _lcd_level_bed_corners_get_next_position() {
       }
       idle();
     }
-    TERN_(BLTOUCH_SLOW_MODE, bltouch.stow());
+    TERN_(BLTOUCH, if (!bltouch.high_speed_mode) bltouch.stow());
     ui.goto_screen(_lcd_draw_probing);
     return (probe_triggered);
   }
@@ -263,13 +263,14 @@ static void _lcd_level_bed_corners_get_next_position() {
     do {
       ui.refresh(LCDVIEW_REDRAW_NOW);
       _lcd_draw_probing();                                // update screen with # of good points
-      do_blocking_move_to_z(SUM_TERN(BLTOUCH_HS_MODE, current_position.z + LEVEL_CORNERS_Z_HOP, 7)); // clearance
+
+      do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP + TERN0(BLTOUCH, bltouch.z_extra_clearance())); // clearance
 
       _lcd_level_bed_corners_get_next_position();         // Select next corner coordinates
       current_position -= probe.offset_xy;                // Account for probe offsets
       do_blocking_move_to_xy(current_position);           // Goto corner
 
-      TERN_(BLTOUCH_HS_MODE, bltouch.deploy());           // Deploy in HIGH SPEED MODE
+      TERN_(BLTOUCH, if (bltouch.high_speed_mode) bltouch.deploy()); // Deploy in HIGH SPEED MODE
       if (!_lcd_level_bed_corners_probe()) {              // Probe down to tolerance
         if (_lcd_level_bed_corners_raise()) {             // Prompt user to raise bed if needed
           #if ENABLED(LEVEL_CORNERS_VERIFY_RAISED)        // Verify
@@ -290,10 +291,12 @@ static void _lcd_level_bed_corners_get_next_position() {
 
     } while (good_points < nr_edge_points); // loop until all points within tolerance
 
-    #if ENABLED(BLTOUCH_HS_MODE)
-      // In HIGH SPEED MODE do clearance and stow at the very end
-      do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP);
-      bltouch.stow();
+    #if ENABLED(BLTOUCH)
+      if (bltouch.high_speed_mode)
+        // In HIGH SPEED MODE do clearance and stow at the very end
+        do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP);
+        bltouch.stow();
+      }
     #endif
 
     ui.goto_screen(_lcd_draw_level_prompt); // prompt for bed leveling

commit a16a059312b0ddb822da2769b5ba5372f9857c48
Author: Giuseppe499 <giuseppe499@live.it>
Date:   Tue Dec 7 02:53:51 2021 +0100

    ✨ X Twist Compensation & Calibration (#23238)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 872b9b3840..7bf247f40b 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -66,10 +66,6 @@
 
 static_assert(LEVEL_CORNERS_Z_HOP >= 0, "LEVEL_CORNERS_Z_HOP must be >= 0. Please update your configuration.");
 
-#if HAS_LEVELING
-  static bool leveling_was_active = false;
-#endif
-
 #ifndef LEVEL_CORNERS_LEVELING_ORDER
   #define LEVEL_CORNERS_LEVELING_ORDER { LF, RF, LB, RB } // Default
   //#define LEVEL_CORNERS_LEVELING_ORDER { LF, LB, RF  }  // 3 hard-coded points

commit 75e0b7f8ff668217889b770a83990c532998ca95
Author: aalku <aalku7@gmail.com>
Date:   Sat Oct 30 07:17:20 2021 +0200

    ✨ Shutdown Host Action (#22908)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 79193fbef3..872b9b3840 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -213,7 +213,7 @@ static void _lcd_level_bed_corners_get_next_position() {
     if (!ui.should_draw()) return;
     MenuItem_confirm::confirm_screen(
         []{ queue.inject(TERN(HAS_LEVELING, F("G29N"), FPSTR(G28_STR))); ui.return_to_status(); }
-      , []{ ui.goto_previous_screen_no_defer(); }
+      , ui.goto_previous_screen_no_defer
       , GET_TEXT(MSG_BED_TRAMMING_IN_RANGE)
       , (const char*)nullptr, PSTR("?")
     );

commit 13bb2393e13148732861c690d523f07972f4abd8
Author: Pyro-Fox <36782094+Pyro-Fox@users.noreply.github.com>
Date:   Sat Oct 9 15:09:50 2021 -0700

    🐛 LCD string followup (#22892)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 178d466478..79193fbef3 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -179,7 +179,7 @@ static void _lcd_level_bed_corners_get_next_position() {
     // Display # of good points found vs total needed
     if (PAGE_CONTAINS(y - (MENU_FONT_HEIGHT), y)) {
       SETCURSOR(TERN(TFT_COLOR_UI, 2, 0), cy);
-      lcd_put_u8str_(GET_TEXT_F(MSG_BED_TRAMMING_GOOD_POINTS));
+      lcd_put_u8str(GET_TEXT_F(MSG_BED_TRAMMING_GOOD_POINTS));
       IF_ENABLED(TFT_COLOR_UI, lcd_moveto(12, cy));
       lcd_put_u8str(GOOD_POINTS_TO_STR(good_points));
       lcd_put_wchar('/');

commit eeffac697c5d7b69e01e38ed1602dbd21a366e93
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 25 23:52:41 2021 -0500

    🎨 Apply F() to UTF-8/MMU2 string put

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 1c7ab35e44..178d466478 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -179,7 +179,7 @@ static void _lcd_level_bed_corners_get_next_position() {
     // Display # of good points found vs total needed
     if (PAGE_CONTAINS(y - (MENU_FONT_HEIGHT), y)) {
       SETCURSOR(TERN(TFT_COLOR_UI, 2, 0), cy);
-      lcd_put_u8str_P(GET_TEXT(MSG_BED_TRAMMING_GOOD_POINTS));
+      lcd_put_u8str_(GET_TEXT_F(MSG_BED_TRAMMING_GOOD_POINTS));
       IF_ENABLED(TFT_COLOR_UI, lcd_moveto(12, cy));
       lcd_put_u8str(GOOD_POINTS_TO_STR(good_points));
       lcd_put_wchar('/');
@@ -192,7 +192,7 @@ static void _lcd_level_bed_corners_get_next_position() {
     // Display the Last Z value
     if (PAGE_CONTAINS(y - (MENU_FONT_HEIGHT), y)) {
       SETCURSOR(TERN(TFT_COLOR_UI, 2, 0), cy);
-      lcd_put_u8str_P(GET_TEXT(MSG_BED_TRAMMING_LAST_Z));
+      lcd_put_u8str(GET_TEXT_F(MSG_BED_TRAMMING_LAST_Z));
       IF_ENABLED(TFT_COLOR_UI, lcd_moveto(12, 2));
       lcd_put_u8str(LAST_Z_TO_STR(last_z));
     }

commit 417e2530ebc5b6c74ac34adaba8be552b407383a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 21:11:31 2021 -0500

    🎨 Apply F() to G-code suite and queue

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index ea9ef75aa1..1c7ab35e44 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -212,7 +212,7 @@ static void _lcd_level_bed_corners_get_next_position() {
   void _lcd_draw_level_prompt() {
     if (!ui.should_draw()) return;
     MenuItem_confirm::confirm_screen(
-        []{ queue.inject_P(TERN(HAS_LEVELING, PSTR("G29N"), G28_STR)); ui.return_to_status(); }
+        []{ queue.inject(TERN(HAS_LEVELING, F("G29N"), FPSTR(G28_STR))); ui.return_to_status(); }
       , []{ ui.goto_previous_screen_no_defer(); }
       , GET_TEXT(MSG_BED_TRAMMING_IN_RANGE)
       , (const char*)nullptr, PSTR("?")

commit d95d452b29b80e66d534b36c78262454664ce5a1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Aug 29 23:02:53 2021 -0500

    🌐 MSG_PROBING_MESH => MSG_PROBING_POINT

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 82f25ea6f3..ea9ef75aa1 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -172,7 +172,7 @@ static void _lcd_level_bed_corners_get_next_position() {
 
     TERN_(HAS_MARLINUI_U8GLIB, ui.set_font(FONT_MENU)); // Set up the font for extra info
 
-    MenuItem_static::draw(0, GET_TEXT(MSG_PROBING_MESH), SS_INVERT); // "Probing Mesh" heading
+    MenuItem_static::draw(0, GET_TEXT(MSG_PROBING_POINT), SS_INVERT); // "Probing Mesh" heading
 
     uint8_t cy = TERN(TFT_COLOR_UI, 3, LCD_HEIGHT - 1), y = LCD_ROW_Y(cy);
 

commit 9bb5b10c0c9cf5a61d2bfb9dfdb6cfe210b6002b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jul 31 05:32:13 2021 -0500

    🚚 Relocate and adjust DWIN E3V2 (#22471)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index e0c694673e..82f25ea6f3 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -187,7 +187,7 @@ static void _lcd_level_bed_corners_get_next_position() {
     }
 
     --cy;
-    y -= MENU_FONT_HEIGHT;
+    y -= MENU_LINE_HEIGHT;
 
     // Display the Last Z value
     if (PAGE_CONTAINS(y - (MENU_FONT_HEIGHT), y)) {

commit 84ca21edf76d1e2e4830b5fcc3b454db05cbe871
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jul 29 23:40:27 2021 -0500

    🎨 abs => ABS

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 767c818851..e0c694673e 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -87,7 +87,7 @@ constexpr int lco[] = LEVEL_CORNERS_LEVELING_ORDER;
 constexpr bool level_corners_3_points = COUNT(lco) == 2;
 static_assert(level_corners_3_points || COUNT(lco) == 4, "LEVEL_CORNERS_LEVELING_ORDER must have exactly 2 or 4 corners.");
 
-constexpr int lcodiff = abs(lco[0] - lco[1]);
+constexpr int lcodiff = ABS(lco[0] - lco[1]);
 static_assert(COUNT(lco) == 4 || lcodiff == 1 || lcodiff == 3, "The first two LEVEL_CORNERS_LEVELING_ORDER corners must be on the same edge.");
 
 constexpr int nr_edge_points = level_corners_3_points ? 3 : 4;

commit b1bc2e80036131cde58b4fbc02b76ac08b5a7924
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jul 25 02:12:48 2021 -0500

    🌐 Level Corners => Bed Tramming

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 4811e2c60c..767c818851 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -179,7 +179,7 @@ static void _lcd_level_bed_corners_get_next_position() {
     // Display # of good points found vs total needed
     if (PAGE_CONTAINS(y - (MENU_FONT_HEIGHT), y)) {
       SETCURSOR(TERN(TFT_COLOR_UI, 2, 0), cy);
-      lcd_put_u8str_P(GET_TEXT(MSG_LEVEL_CORNERS_GOOD_POINTS));
+      lcd_put_u8str_P(GET_TEXT(MSG_BED_TRAMMING_GOOD_POINTS));
       IF_ENABLED(TFT_COLOR_UI, lcd_moveto(12, cy));
       lcd_put_u8str(GOOD_POINTS_TO_STR(good_points));
       lcd_put_wchar('/');
@@ -192,7 +192,7 @@ static void _lcd_level_bed_corners_get_next_position() {
     // Display the Last Z value
     if (PAGE_CONTAINS(y - (MENU_FONT_HEIGHT), y)) {
       SETCURSOR(TERN(TFT_COLOR_UI, 2, 0), cy);
-      lcd_put_u8str_P(GET_TEXT(MSG_LEVEL_CORNERS_LAST_Z));
+      lcd_put_u8str_P(GET_TEXT(MSG_BED_TRAMMING_LAST_Z));
       IF_ENABLED(TFT_COLOR_UI, lcd_moveto(12, 2));
       lcd_put_u8str(LAST_Z_TO_STR(last_z));
     }
@@ -204,7 +204,7 @@ static void _lcd_level_bed_corners_get_next_position() {
         GET_TEXT(MSG_BUTTON_DONE), GET_TEXT(MSG_BUTTON_SKIP)
       , []{ corner_probing_done = true; wait_for_probe = false; }
       , []{ wait_for_probe = false; }
-      , GET_TEXT(MSG_LEVEL_CORNERS_RAISE)
+      , GET_TEXT(MSG_BED_TRAMMING_RAISE)
       , (const char*)nullptr, NUL_STR
     );
   }
@@ -214,7 +214,7 @@ static void _lcd_level_bed_corners_get_next_position() {
     MenuItem_confirm::confirm_screen(
         []{ queue.inject_P(TERN(HAS_LEVELING, PSTR("G29N"), G28_STR)); ui.return_to_status(); }
       , []{ ui.goto_previous_screen_no_defer(); }
-      , GET_TEXT(MSG_LEVEL_CORNERS_IN_RANGE)
+      , GET_TEXT(MSG_BED_TRAMMING_IN_RANGE)
       , (const char*)nullptr, PSTR("?")
     );
   }

commit 3b57c3316a7024223ed4d00173e38206cabe4f8b
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jul 25 02:19:30 2021 -0500

    Misc. Cleanup

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 0ab82a9b16..4811e2c60c 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -201,7 +201,7 @@ static void _lcd_level_bed_corners_get_next_position() {
   void _lcd_draw_raise() {
     if (!ui.should_draw()) return;
     MenuItem_confirm::select_screen(
-      GET_TEXT(MSG_BUTTON_DONE), GET_TEXT(MSG_BUTTON_SKIP)
+        GET_TEXT(MSG_BUTTON_DONE), GET_TEXT(MSG_BUTTON_SKIP)
       , []{ corner_probing_done = true; wait_for_probe = false; }
       , []{ wait_for_probe = false; }
       , GET_TEXT(MSG_LEVEL_CORNERS_RAISE)
@@ -212,9 +212,7 @@ static void _lcd_level_bed_corners_get_next_position() {
   void _lcd_draw_level_prompt() {
     if (!ui.should_draw()) return;
     MenuItem_confirm::confirm_screen(
-      []{ queue.inject_P(TERN(HAS_LEVELING, PSTR("G29N"), G28_STR));
-          ui.return_to_status();
-      }
+        []{ queue.inject_P(TERN(HAS_LEVELING, PSTR("G29N"), G28_STR)); ui.return_to_status(); }
       , []{ ui.goto_previous_screen_no_defer(); }
       , GET_TEXT(MSG_LEVEL_CORNERS_IN_RANGE)
       , (const char*)nullptr, PSTR("?")

commit 92dea8e6ccd26950eed817fce6f574fcfe866489
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 23 01:09:46 2021 -0500

    ♻️ Refactor, comment endstop/probe enums

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index d28ef1182e..0ab82a9b16 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -225,7 +225,7 @@ static void _lcd_level_bed_corners_get_next_position() {
     if (verify) do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP); // do clearance if needed
     TERN_(BLTOUCH_SLOW_MODE, bltouch.deploy()); // Deploy in LOW SPEED MODE on every probe action
     do_blocking_move_to_z(last_z - LEVEL_CORNERS_PROBE_TOLERANCE, MMM_TO_MMS(Z_PROBE_FEEDRATE_SLOW)); // Move down to lower tolerance
-    if (TEST(endstops.trigger_state(), TERN(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN, Z_MIN, Z_MIN_PROBE))) { // check if probe triggered
+    if (TEST(endstops.trigger_state(), Z_MIN_PROBE)) { // check if probe triggered
       endstops.hit_on_purpose();
       set_current_from_steppers_for_axis(Z_AXIS);
       sync_plan_position();

commit 07cac80fb028f26fd2b1badfea069c80938dfd0c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Apr 16 04:28:16 2021 -0500

    Drop extraneous inlines

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 8635661d01..d28ef1182e 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -102,7 +102,7 @@ static int8_t bed_corner;
 /**
  * Select next corner coordinates
  */
-static inline void _lcd_level_bed_corners_get_next_position() {
+static void _lcd_level_bed_corners_get_next_position() {
 
   if (level_corners_3_points) {
     if (bed_corner >= available_points) bed_corner = 0; // Above max position -> move back to first corner
@@ -268,7 +268,7 @@ static inline void _lcd_level_bed_corners_get_next_position() {
     ui.goto_screen(_lcd_draw_probing);
     do {
       ui.refresh(LCDVIEW_REDRAW_NOW);
-      _lcd_draw_probing();                                             // update screen with # of good points
+      _lcd_draw_probing();                                // update screen with # of good points
       do_blocking_move_to_z(SUM_TERN(BLTOUCH_HS_MODE, current_position.z + LEVEL_CORNERS_Z_HOP, 7)); // clearance
 
       _lcd_level_bed_corners_get_next_position();         // Select next corner coordinates
@@ -308,7 +308,7 @@ static inline void _lcd_level_bed_corners_get_next_position() {
 
 #else // !LEVEL_CORNERS_USE_PROBE
 
-  static inline void _lcd_goto_next_corner() {
+  static void _lcd_goto_next_corner() {
     line_to_z(LEVEL_CORNERS_Z_HOP);
 
     // Select next corner coordinates
@@ -321,7 +321,7 @@ static inline void _lcd_level_bed_corners_get_next_position() {
 
 #endif // !LEVEL_CORNERS_USE_PROBE
 
-static inline void _lcd_level_bed_corners_homing() {
+static void _lcd_level_bed_corners_homing() {
   _lcd_draw_homing();
   if (!all_axes_homed()) return;
   #if ENABLED(LEVEL_CORNERS_USE_PROBE)

commit 1a2cbe100c279b0dd12a70f5e9179a6f9b555e32
Author: Ramiro Polla <ramiropolla@users.noreply.github.com>
Date:   Fri Apr 9 04:03:34 2021 +0200

    Macros to eliminate 'f + 0.0' (#21568)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 4cfb4e411b..8635661d01 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -269,7 +269,7 @@ static inline void _lcd_level_bed_corners_get_next_position() {
     do {
       ui.refresh(LCDVIEW_REDRAW_NOW);
       _lcd_draw_probing();                                             // update screen with # of good points
-      do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP + TERN0(BLTOUCH_HS_MODE, 7)); // clearance
+      do_blocking_move_to_z(SUM_TERN(BLTOUCH_HS_MODE, current_position.z + LEVEL_CORNERS_Z_HOP, 7)); // clearance
 
       _lcd_level_bed_corners_get_next_position();         // Select next corner coordinates
       current_position -= probe.offset_xy;                // Account for probe offsets

commit 8fca37f3737e66150c1ed5b5793e2c48dd108b23
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Mar 23 23:54:23 2021 -0500

    Misc LCD cleanup

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 0dae8dbf41..4cfb4e411b 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -296,8 +296,11 @@ static inline void _lcd_level_bed_corners_get_next_position() {
 
     } while (good_points < nr_edge_points); // loop until all points within tolerance
 
-    TERN_(BLTOUCH_HS_MODE, do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP)); // Do clearance in HIGH SPEED MODE at the very end
-    TERN_(BLTOUCH_HS_MODE, bltouch.stow()); // Stow in HIGH SPEED MODE at the very end
+    #if ENABLED(BLTOUCH_HS_MODE)
+      // In HIGH SPEED MODE do clearance and stow at the very end
+      do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP);
+      bltouch.stow();
+    #endif
 
     ui.goto_screen(_lcd_draw_level_prompt); // prompt for bed leveling
     ui.set_selection(true);

commit ee7701c15bc91f7a05f973e03624fb14815f5027
Author: jbuck2005 <59450931+jbuck2005@users.noreply.github.com>
Date:   Sat Feb 27 16:54:43 2021 -0500

    SPEED => FEEDRATE (#21217)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 505b31876a..0dae8dbf41 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -224,7 +224,7 @@ static inline void _lcd_level_bed_corners_get_next_position() {
   bool _lcd_level_bed_corners_probe(bool verify=false) {
     if (verify) do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP); // do clearance if needed
     TERN_(BLTOUCH_SLOW_MODE, bltouch.deploy()); // Deploy in LOW SPEED MODE on every probe action
-    do_blocking_move_to_z(last_z - LEVEL_CORNERS_PROBE_TOLERANCE, MMM_TO_MMS(Z_PROBE_SPEED_SLOW)); // Move down to lower tolerance
+    do_blocking_move_to_z(last_z - LEVEL_CORNERS_PROBE_TOLERANCE, MMM_TO_MMS(Z_PROBE_FEEDRATE_SLOW)); // Move down to lower tolerance
     if (TEST(endstops.trigger_state(), TERN(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN, Z_MIN, Z_MIN_PROBE))) { // check if probe triggered
       endstops.hit_on_purpose();
       set_current_from_steppers_for_axis(Z_AXIS);

commit 45fff07a4cfd2442b8bcbb6a081eaeb1fd5810f8
Author: qwewer0 <57561110+qwewer0@users.noreply.github.com>
Date:   Thu Feb 25 16:21:17 2021 +0100

    Fix LEVEL_CORNERS_USE_PROBE with BLTOUCH_HS_MODE (#21161)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 751be18600..505b31876a 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -269,12 +269,13 @@ static inline void _lcd_level_bed_corners_get_next_position() {
     do {
       ui.refresh(LCDVIEW_REDRAW_NOW);
       _lcd_draw_probing();                                             // update screen with # of good points
-      do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP); // clearance
+      do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP + TERN0(BLTOUCH_HS_MODE, 7)); // clearance
 
       _lcd_level_bed_corners_get_next_position();         // Select next corner coordinates
       current_position -= probe.offset_xy;                // Account for probe offsets
       do_blocking_move_to_xy(current_position);           // Goto corner
 
+      TERN_(BLTOUCH_HS_MODE, bltouch.deploy());           // Deploy in HIGH SPEED MODE
       if (!_lcd_level_bed_corners_probe()) {              // Probe down to tolerance
         if (_lcd_level_bed_corners_raise()) {             // Prompt user to raise bed if needed
           #if ENABLED(LEVEL_CORNERS_VERIFY_RAISED)        // Verify
@@ -295,6 +296,9 @@ static inline void _lcd_level_bed_corners_get_next_position() {
 
     } while (good_points < nr_edge_points); // loop until all points within tolerance
 
+    TERN_(BLTOUCH_HS_MODE, do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP)); // Do clearance in HIGH SPEED MODE at the very end
+    TERN_(BLTOUCH_HS_MODE, bltouch.stow()); // Stow in HIGH SPEED MODE at the very end
+
     ui.goto_screen(_lcd_draw_level_prompt); // prompt for bed leveling
     ui.set_selection(true);
   }

commit c12be1f98cf1efdc6fc1e66c528d5975adc6626c
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Mon Jan 25 08:44:39 2021 +0100

    Graphical TFT fixes, cleanup (#20861)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 473b09d328..751be18600 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -174,12 +174,13 @@ static inline void _lcd_level_bed_corners_get_next_position() {
 
     MenuItem_static::draw(0, GET_TEXT(MSG_PROBING_MESH), SS_INVERT); // "Probing Mesh" heading
 
-    uint8_t cy = LCD_HEIGHT - 1, y = LCD_ROW_Y(cy);
+    uint8_t cy = TERN(TFT_COLOR_UI, 3, LCD_HEIGHT - 1), y = LCD_ROW_Y(cy);
 
     // Display # of good points found vs total needed
     if (PAGE_CONTAINS(y - (MENU_FONT_HEIGHT), y)) {
-      SETCURSOR(0, cy);
+      SETCURSOR(TERN(TFT_COLOR_UI, 2, 0), cy);
       lcd_put_u8str_P(GET_TEXT(MSG_LEVEL_CORNERS_GOOD_POINTS));
+      IF_ENABLED(TFT_COLOR_UI, lcd_moveto(12, cy));
       lcd_put_u8str(GOOD_POINTS_TO_STR(good_points));
       lcd_put_wchar('/');
       lcd_put_u8str(GOOD_POINTS_TO_STR(nr_edge_points));
@@ -190,8 +191,9 @@ static inline void _lcd_level_bed_corners_get_next_position() {
 
     // Display the Last Z value
     if (PAGE_CONTAINS(y - (MENU_FONT_HEIGHT), y)) {
-      SETCURSOR(0, cy);
+      SETCURSOR(TERN(TFT_COLOR_UI, 2, 0), cy);
       lcd_put_u8str_P(GET_TEXT(MSG_LEVEL_CORNERS_LAST_Z));
+      IF_ENABLED(TFT_COLOR_UI, lcd_moveto(12, 2));
       lcd_put_u8str(LAST_Z_TO_STR(last_z));
     }
   }

commit d33fe2378c25d258b02440aef6cc31e36753f98f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jan 22 15:01:19 2021 -0600

    Move common strings (#20846)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index efa5454d8c..473b09d328 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -66,8 +66,6 @@
 
 static_assert(LEVEL_CORNERS_Z_HOP >= 0, "LEVEL_CORNERS_Z_HOP must be >= 0. Please update your configuration.");
 
-extern const char G28_STR[];
-
 #if HAS_LEVELING
   static bool leveling_was_active = false;
 #endif
@@ -205,7 +203,7 @@ static inline void _lcd_level_bed_corners_get_next_position() {
       , []{ corner_probing_done = true; wait_for_probe = false; }
       , []{ wait_for_probe = false; }
       , GET_TEXT(MSG_LEVEL_CORNERS_RAISE)
-      , (const char*)nullptr, PSTR("")
+      , (const char*)nullptr, NUL_STR
     );
   }
 

commit fda9fb563bcf71aa00c38a8273c5444f4733ef9e
Author: Katelyn Schiesser <katelyn.schiesser@gmail.com>
Date:   Mon Jan 18 19:59:18 2021 -0800

    Raise Z on exit from 'Level Bed Corners' (#20817)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index bcf5aea8d7..efa5454d8c 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -39,7 +39,6 @@
 #ifndef LEVEL_CORNERS_Z_HOP
   #define LEVEL_CORNERS_Z_HOP 4.0
 #endif
-
 #ifndef LEVEL_CORNERS_HEIGHT
   #define LEVEL_CORNERS_HEIGHT 0.0
 #endif
@@ -248,7 +247,7 @@ static inline void _lcd_level_bed_corners_get_next_position() {
     wait_for_probe = true;
     ui.goto_screen(_lcd_draw_raise); // show raise screen
     ui.set_selection(true);
-    while (wait_for_probe && !probe_triggered) { //loop while waiting to bed raise and probe trigger
+    while (wait_for_probe && !probe_triggered) { // loop while waiting to bed raise and probe trigger
       probe_triggered = PROBE_TRIGGERED();
       if (probe_triggered) {
         endstops.hit_on_purpose();
@@ -269,7 +268,7 @@ static inline void _lcd_level_bed_corners_get_next_position() {
     ui.goto_screen(_lcd_draw_probing);
     do {
       ui.refresh(LCDVIEW_REDRAW_NOW);
-      _lcd_draw_probing();                                //update screen with # of good points
+      _lcd_draw_probing();                                             // update screen with # of good points
       do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP); // clearance
 
       _lcd_level_bed_corners_get_next_position();         // Select next corner coordinates
@@ -330,6 +329,7 @@ static inline void _lcd_level_bed_corners_homing() {
           GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE)
         , _lcd_goto_next_corner
         , []{
+            line_to_z(LEVEL_CORNERS_Z_HOP); // Raise Z off the bed when done
             TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
             ui.goto_previous_screen_no_defer();
           }

commit bb597dcf66ac0baa3f3528bb34c3b4aad78ad520
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 17 12:08:40 2021 -0600

    Internal G29N for G28+G29 (#20800)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 0088f306f6..bcf5aea8d7 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -213,7 +213,7 @@ static inline void _lcd_level_bed_corners_get_next_position() {
   void _lcd_draw_level_prompt() {
     if (!ui.should_draw()) return;
     MenuItem_confirm::confirm_screen(
-      []{ queue.inject_P(TERN(HAS_LEVELING, PSTR("G28\nG29"), G28_STR));
+      []{ queue.inject_P(TERN(HAS_LEVELING, PSTR("G29N"), G28_STR));
           ui.return_to_status();
       }
       , []{ ui.goto_previous_screen_no_defer(); }

commit 43a91e5963c7563c4db3fcde4f4862ea0f9670ee
Author: RFBomb <Robbery525@gmail.com>
Date:   Sat Jan 16 01:43:38 2021 -0500

    Configurable Corner Leveling point order (#20733)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 2252cbc49f..0088f306f6 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -56,6 +56,13 @@
   float last_z;
   int good_points;
   bool corner_probing_done, wait_for_probe;
+
+  #if HAS_MARLINUI_U8GLIB
+    #include "../dogm/marlinui_DOGM.h"
+  #endif
+  #define GOOD_POINTS_TO_STR(N) ui8tostr2(N)
+  #define LAST_Z_TO_STR(N) ftostr53_63(N) //ftostr42_52(N)
+
 #endif
 
 static_assert(LEVEL_CORNERS_Z_HOP >= 0, "LEVEL_CORNERS_Z_HOP must be >= 0. Please update your configuration.");
@@ -66,12 +73,89 @@ extern const char G28_STR[];
   static bool leveling_was_active = false;
 #endif
 
-static int8_t bed_corner;
+#ifndef LEVEL_CORNERS_LEVELING_ORDER
+  #define LEVEL_CORNERS_LEVELING_ORDER { LF, RF, LB, RB } // Default
+  //#define LEVEL_CORNERS_LEVELING_ORDER { LF, LB, RF  }  // 3 hard-coded points
+  //#define LEVEL_CORNERS_LEVELING_ORDER { LF, RF }       // 3-Point tramming - Rear
+  //#define LEVEL_CORNERS_LEVELING_ORDER { LF, LB }       // 3-Point tramming - Right
+  //#define LEVEL_CORNERS_LEVELING_ORDER { RF, RB }       // 3-Point tramming - Left
+  //#define LEVEL_CORNERS_LEVELING_ORDER { LB, RB }       // 3-Point tramming - Front
+#endif
+
+#define LF 1
+#define RF 2
+#define RB 3
+#define LB 4
+constexpr int lco[] = LEVEL_CORNERS_LEVELING_ORDER;
+constexpr bool level_corners_3_points = COUNT(lco) == 2;
+static_assert(level_corners_3_points || COUNT(lco) == 4, "LEVEL_CORNERS_LEVELING_ORDER must have exactly 2 or 4 corners.");
+
+constexpr int lcodiff = abs(lco[0] - lco[1]);
+static_assert(COUNT(lco) == 4 || lcodiff == 1 || lcodiff == 3, "The first two LEVEL_CORNERS_LEVELING_ORDER corners must be on the same edge.");
 
+constexpr int nr_edge_points = level_corners_3_points ? 3 : 4;
+constexpr int available_points = nr_edge_points + ENABLED(LEVEL_CENTER_TOO);
+constexpr int center_index = TERN(LEVEL_CENTER_TOO, available_points - 1, -1);
 constexpr float inset_lfrb[4] = LEVEL_CORNERS_INSET_LFRB;
 constexpr xy_pos_t lf { (X_MIN_BED) + inset_lfrb[0], (Y_MIN_BED) + inset_lfrb[1] },
                    rb { (X_MAX_BED) - inset_lfrb[2], (Y_MAX_BED) - inset_lfrb[3] };
 
+static int8_t bed_corner;
+
+/**
+ * Select next corner coordinates
+ */
+static inline void _lcd_level_bed_corners_get_next_position() {
+
+  if (level_corners_3_points) {
+    if (bed_corner >= available_points) bed_corner = 0; // Above max position -> move back to first corner
+    switch (bed_corner) {
+      case 0 ... 1:
+        // First two corners set explicitly by the configuration
+        current_position = lf;                       // Left front
+        switch (lco[bed_corner]) {
+          case RF: current_position.x = rb.x; break; // Right Front
+          case RB: current_position   = rb;   break; // Right Back
+          case LB: current_position.y = rb.y; break; // Left Back
+        }
+        break;
+
+      case 2:
+        // Determine which edge to probe for 3rd point
+        current_position.set(lf.x + (rb.x - lf.x) / 2, lf.y + (rb.y - lf.y) / 2);
+        if ((lco[0] == LB && lco[1] == RB) || (lco[0] == RB && lco[1] == LB)) current_position.y = lf.y; // Front Center
+        if ((lco[0] == LF && lco[1] == LB) || (lco[0] == LB && lco[1] == LF)) current_position.x = rb.x; // Center Right
+        if ((lco[0] == RF && lco[1] == RB) || (lco[0] == RB && lco[1] == RF)) current_position.x = lf.x; // Left Center
+        if ((lco[0] == LF && lco[1] == RF) || (lco[0] == RF && lco[1] == LF)) current_position.y = rb.y; // Center Back
+        #if DISABLED(LEVEL_CENTER_TOO) && ENABLED(LEVEL_CORNERS_USE_PROBE)
+          bed_corner++;  // Must increment the count to ensure it resets the loop if the 3rd point is out of tolerance
+        #endif
+        break;
+
+      #if ENABLED(LEVEL_CENTER_TOO)
+        case 3:
+          current_position.set(X_CENTER, Y_CENTER);
+          break;
+      #endif
+    }
+  }
+  else {
+    // Four-Corner Bed Tramming with optional center
+    if (TERN0(LEVEL_CENTER_TOO, bed_corner == center_index)) {
+      current_position.set(X_CENTER, Y_CENTER);
+      TERN_(LEVEL_CORNERS_USE_PROBE, good_points--); // Decrement to allow one additional probe point
+    }
+    else {
+      current_position = lf;                       // Left front
+      switch (lco[bed_corner]) {
+        case RF: current_position.x = rb.x; break; // Right front
+        case RB: current_position   = rb;   break; // Right rear
+        case LB: current_position.y = rb.y; break; // Left rear
+      }
+    }
+  }
+}
+
 /**
  * Level corners, starting in the front-left corner.
  */
@@ -82,8 +166,37 @@ constexpr xy_pos_t lf { (X_MIN_BED) + inset_lfrb[0], (Y_MIN_BED) + inset_lfrb[1]
   VALIDATE_POINT(lf.x, Y_CENTER, "left"); VALIDATE_POINT(X_CENTER, lf.y, "front");
   VALIDATE_POINT(rb.x, Y_CENTER, "right"); VALIDATE_POINT(X_CENTER, rb.y, "back");
 
+  #ifndef PAGE_CONTAINS
+    #define PAGE_CONTAINS(...) true
+  #endif
+
   void _lcd_draw_probing() {
-    if (ui.should_draw()) MenuItem_static::draw((LCD_HEIGHT - 1) / 2, GET_TEXT(MSG_PROBING_MESH));
+    if (!ui.should_draw()) return;
+
+    TERN_(HAS_MARLINUI_U8GLIB, ui.set_font(FONT_MENU)); // Set up the font for extra info
+
+    MenuItem_static::draw(0, GET_TEXT(MSG_PROBING_MESH), SS_INVERT); // "Probing Mesh" heading
+
+    uint8_t cy = LCD_HEIGHT - 1, y = LCD_ROW_Y(cy);
+
+    // Display # of good points found vs total needed
+    if (PAGE_CONTAINS(y - (MENU_FONT_HEIGHT), y)) {
+      SETCURSOR(0, cy);
+      lcd_put_u8str_P(GET_TEXT(MSG_LEVEL_CORNERS_GOOD_POINTS));
+      lcd_put_u8str(GOOD_POINTS_TO_STR(good_points));
+      lcd_put_wchar('/');
+      lcd_put_u8str(GOOD_POINTS_TO_STR(nr_edge_points));
+    }
+
+    --cy;
+    y -= MENU_FONT_HEIGHT;
+
+    // Display the Last Z value
+    if (PAGE_CONTAINS(y - (MENU_FONT_HEIGHT), y)) {
+      SETCURSOR(0, cy);
+      lcd_put_u8str_P(GET_TEXT(MSG_LEVEL_CORNERS_LAST_Z));
+      lcd_put_u8str(LAST_Z_TO_STR(last_z));
+    }
   }
 
   void _lcd_draw_raise() {
@@ -112,7 +225,7 @@ constexpr xy_pos_t lf { (X_MIN_BED) + inset_lfrb[0], (Y_MIN_BED) + inset_lfrb[1]
   bool _lcd_level_bed_corners_probe(bool verify=false) {
     if (verify) do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP); // do clearance if needed
     TERN_(BLTOUCH_SLOW_MODE, bltouch.deploy()); // Deploy in LOW SPEED MODE on every probe action
-    do_blocking_move_to_z(last_z - LEVEL_CORNERS_PROBE_TOLERANCE, manual_feedrate_mm_s.z); // Move down to lower tolerance
+    do_blocking_move_to_z(last_z - LEVEL_CORNERS_PROBE_TOLERANCE, MMM_TO_MMS(Z_PROBE_SPEED_SLOW)); // Move down to lower tolerance
     if (TEST(endstops.trigger_state(), TERN(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN, Z_MIN, Z_MIN_PROBE))) { // check if probe triggered
       endstops.hit_on_purpose();
       set_current_from_steppers_for_axis(Z_AXIS);
@@ -149,25 +262,18 @@ constexpr xy_pos_t lf { (X_MIN_BED) + inset_lfrb[0], (Y_MIN_BED) + inset_lfrb[1]
   }
 
   void _lcd_test_corners() {
-    ui.goto_screen(_lcd_draw_probing);
-    bed_corner = TERN(LEVEL_CENTER_TOO, 4, 0);
+    bed_corner = TERN(LEVEL_CENTER_TOO, center_index, 0);
     last_z = LEVEL_CORNERS_HEIGHT;
     endstops.enable_z_probe(true);
     good_points = 0;
-
+    ui.goto_screen(_lcd_draw_probing);
     do {
+      ui.refresh(LCDVIEW_REDRAW_NOW);
+      _lcd_draw_probing();                                //update screen with # of good points
       do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP); // clearance
-      // Select next corner coordinates
-      xy_pos_t plf = lf - probe.offset_xy, prb = rb - probe.offset_xy;
-      switch (bed_corner) {
-        case 0: current_position   = plf;   break; // copy xy
-        case 1: current_position.x = prb.x; break;
-        case 2: current_position.y = prb.y; break;
-        case 3: current_position.x = plf.x; break;
-        #if ENABLED(LEVEL_CENTER_TOO)
-          case 4: current_position.set(X_CENTER - probe.offset_xy.x, Y_CENTER - probe.offset_xy.y); break;
-        #endif
-      }
+
+      _lcd_level_bed_corners_get_next_position();         // Select next corner coordinates
+      current_position -= probe.offset_xy;                // Account for probe offsets
       do_blocking_move_to_xy(current_position);           // Goto corner
 
       if (!_lcd_level_bed_corners_probe()) {              // Probe down to tolerance
@@ -185,10 +291,10 @@ constexpr xy_pos_t lf { (X_MIN_BED) + inset_lfrb[0], (Y_MIN_BED) + inset_lfrb[1]
           return;
       }
 
-      if (bed_corner != 4) good_points++; // ignore center
+      if (bed_corner != center_index) good_points++; // ignore center
       if (++bed_corner > 3) bed_corner = 0;
 
-    } while (good_points < 4); // loop until all corners whitin tolerance
+    } while (good_points < nr_edge_points); // loop until all points within tolerance
 
     ui.goto_screen(_lcd_draw_level_prompt); // prompt for bed leveling
     ui.set_selection(true);
@@ -198,18 +304,13 @@ constexpr xy_pos_t lf { (X_MIN_BED) + inset_lfrb[0], (Y_MIN_BED) + inset_lfrb[1]
 
   static inline void _lcd_goto_next_corner() {
     line_to_z(LEVEL_CORNERS_Z_HOP);
-    switch (bed_corner) {
-      case 0: current_position   = lf;   break; // copy xy
-      case 1: current_position.x = rb.x; break;
-      case 2: current_position.y = rb.y; break;
-      case 3: current_position.x = lf.x; break;
-      #if ENABLED(LEVEL_CENTER_TOO)
-        case 4: current_position.set(X_CENTER, Y_CENTER); break;
-      #endif
-    }
+
+    // Select next corner coordinates
+    _lcd_level_bed_corners_get_next_position();
+
     line_to_current_position(manual_feedrate_mm_s.x);
     line_to_z(LEVEL_CORNERS_HEIGHT);
-    if (++bed_corner > 3 + ENABLED(LEVEL_CENTER_TOO)) bed_corner = 0;
+    if (++bed_corner >= available_points) bed_corner = 0;
   }
 
 #endif // !LEVEL_CORNERS_USE_PROBE

commit 81d7bd8f4114a82a79933340bcd644d93d2d9715
Author: Jason Smith <jason.inet@gmail.com>
Date:   Sun Dec 27 18:49:15 2020 -0800

    Validate defined probe points (#20572)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 56a97b5706..2252cbc49f 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -77,6 +77,11 @@ constexpr xy_pos_t lf { (X_MIN_BED) + inset_lfrb[0], (Y_MIN_BED) + inset_lfrb[1]
  */
 #if ENABLED(LEVEL_CORNERS_USE_PROBE)
 
+  #define VALIDATE_POINT(X, Y, STR) static_assert(Probe::build_time::can_reach((X), (Y)), \
+    "LEVEL_CORNERS_INSET_LFRB " STR " inset is not reachable with the default NOZZLE_TO_PROBE offset and PROBING_MARGIN.")
+  VALIDATE_POINT(lf.x, Y_CENTER, "left"); VALIDATE_POINT(X_CENTER, lf.y, "front");
+  VALIDATE_POINT(rb.x, Y_CENTER, "right"); VALIDATE_POINT(X_CENTER, rb.y, "back");
+
   void _lcd_draw_probing() {
     if (ui.should_draw()) MenuItem_static::draw((LCD_HEIGHT - 1) / 2, GET_TEXT(MSG_PROBING_MESH));
   }

commit c87c354403342ea12fce220116665e22efbe8194
Author: wmariz <11435639+wmariz@users.noreply.github.com>
Date:   Wed Dec 23 03:10:56 2020 -0300

    Refactor 'Level Corners with Probe' (#20460)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index acd19d69e4..56a97b5706 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -51,18 +51,11 @@
     #include "../../feature/bltouch.h"
   #endif
   #ifndef LEVEL_CORNERS_PROBE_TOLERANCE
-    #define LEVEL_CORNERS_PROBE_TOLERANCE 0.1
+    #define LEVEL_CORNERS_PROBE_TOLERANCE 0.2
   #endif
-  #if ENABLED(LEVEL_CORNERS_AUDIO_FEEDBACK)
-    #include "../../libs/buzzer.h"
-    #define PROBE_BUZZ() BUZZ(200, 600)
-  #else
-    #define PROBE_BUZZ() NOOP
-  #endif
-  static float last_z;
-  static bool corner_probing_done;
-  static bool verify_corner;
-  static int good_points;
+  float last_z;
+  int good_points;
+  bool corner_probing_done, wait_for_probe;
 #endif
 
 static_assert(LEVEL_CORNERS_Z_HOP >= 0, "LEVEL_CORNERS_Z_HOP must be >= 0. Please update your configuration.");
@@ -75,115 +68,130 @@ extern const char G28_STR[];
 
 static int8_t bed_corner;
 
+constexpr float inset_lfrb[4] = LEVEL_CORNERS_INSET_LFRB;
+constexpr xy_pos_t lf { (X_MIN_BED) + inset_lfrb[0], (Y_MIN_BED) + inset_lfrb[1] },
+                   rb { (X_MAX_BED) - inset_lfrb[2], (Y_MAX_BED) - inset_lfrb[3] };
+
 /**
  * Level corners, starting in the front-left corner.
  */
 #if ENABLED(LEVEL_CORNERS_USE_PROBE)
 
-  static inline void _lcd_level_bed_corners_probing() {
-    ui.goto_screen([]{ MenuItem_static::draw((LCD_HEIGHT - 1) / 2, GET_TEXT(MSG_PROBING_MESH)); });
+  void _lcd_draw_probing() {
+    if (ui.should_draw()) MenuItem_static::draw((LCD_HEIGHT - 1) / 2, GET_TEXT(MSG_PROBING_MESH));
+  }
 
-    float lfrb[4] = LEVEL_CORNERS_INSET_LFRB;
-    xy_pos_t lf { (X_MIN_BED) + lfrb[0] - probe.offset_xy.x , (Y_MIN_BED) + lfrb[1] - probe.offset_xy.y },
-             rb { (X_MAX_BED) - lfrb[2] - probe.offset_xy.x , (Y_MAX_BED) - lfrb[3] - probe.offset_xy.y };
+  void _lcd_draw_raise() {
+    if (!ui.should_draw()) return;
+    MenuItem_confirm::select_screen(
+      GET_TEXT(MSG_BUTTON_DONE), GET_TEXT(MSG_BUTTON_SKIP)
+      , []{ corner_probing_done = true; wait_for_probe = false; }
+      , []{ wait_for_probe = false; }
+      , GET_TEXT(MSG_LEVEL_CORNERS_RAISE)
+      , (const char*)nullptr, PSTR("")
+    );
+  }
 
-    do_blocking_move_to_z(LEVEL_CORNERS_Z_HOP - probe.offset.z);
+  void _lcd_draw_level_prompt() {
+    if (!ui.should_draw()) return;
+    MenuItem_confirm::confirm_screen(
+      []{ queue.inject_P(TERN(HAS_LEVELING, PSTR("G28\nG29"), G28_STR));
+          ui.return_to_status();
+      }
+      , []{ ui.goto_previous_screen_no_defer(); }
+      , GET_TEXT(MSG_LEVEL_CORNERS_IN_RANGE)
+      , (const char*)nullptr, PSTR("?")
+    );
+  }
 
-    switch (bed_corner) {
-      case 0: current_position   = lf;   break; // copy xy
-      case 1: current_position.x = rb.x; break;
-      case 2: current_position.y = rb.y; break;
-      case 3: current_position.x = lf.x; break;
-      #if ENABLED(LEVEL_CENTER_TOO)
-        case 4: current_position.set(X_CENTER - probe.offset_xy.x, Y_CENTER - probe.offset_xy.y); good_points--; break;
-      #endif
+  bool _lcd_level_bed_corners_probe(bool verify=false) {
+    if (verify) do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP); // do clearance if needed
+    TERN_(BLTOUCH_SLOW_MODE, bltouch.deploy()); // Deploy in LOW SPEED MODE on every probe action
+    do_blocking_move_to_z(last_z - LEVEL_CORNERS_PROBE_TOLERANCE, manual_feedrate_mm_s.z); // Move down to lower tolerance
+    if (TEST(endstops.trigger_state(), TERN(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN, Z_MIN, Z_MIN_PROBE))) { // check if probe triggered
+      endstops.hit_on_purpose();
+      set_current_from_steppers_for_axis(Z_AXIS);
+      sync_plan_position();
+      TERN_(BLTOUCH_SLOW_MODE, bltouch.stow()); // Stow in LOW SPEED MODE on every trigger
+      // Triggered outside tolerance range?
+      if (ABS(current_position.z - last_z) > LEVEL_CORNERS_PROBE_TOLERANCE) {
+        last_z = current_position.z; // Above tolerance. Set a new Z for subsequent corners.
+        good_points = 0;             // ...and start over
+      }
+      return true; // probe triggered
     }
+    do_blocking_move_to_z(last_z); // go back to tolerance middle point before raise
+    return false; // probe not triggered
+  }
 
-    do_blocking_move_to_xy(current_position);
-
-    #if ENABLED(BLTOUCH) && DISABLED(BLTOUCH_HS_MODE)
-      bltouch.deploy(); // DEPLOY in LOW SPEED MODE on every probe action
-    #endif
-    TERN_(HAS_QUIET_PROBING, probe.set_probing_paused(true));
-
-    // Move down until the probe is triggered
-    do_blocking_move_to_z(last_z - (LEVEL_CORNERS_PROBE_TOLERANCE), manual_feedrate_mm_s.z);
-
-    // Check to see if the probe was triggered
-    bool probe_triggered = TEST(endstops.trigger_state(), TERN(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN, Z_MIN, Z_MIN_PROBE));
-    if (!probe_triggered) {
-
-      static bool wait_for_probe;
-
-      ui.goto_screen([]{
-        MenuItem_confirm::select_screen(
-          GET_TEXT(MSG_BUTTON_DONE), GET_TEXT(MSG_BUTTON_SKIP)
-          , []{ corner_probing_done = true;
-                wait_for_probe = false;
-                TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
-                ui.goto_previous_screen_no_defer();
-            }
-          , []{ wait_for_probe = false; }
-          , GET_TEXT(MSG_LEVEL_CORNERS_RAISE)
-          , (const char*)nullptr, PSTR("")
-        );
-      });
-      ui.set_selection(true);
-
-      wait_for_probe = true;
-      while (wait_for_probe && !probe_triggered) {
-        probe_triggered = PROBE_TRIGGERED();
-        if (probe_triggered) PROBE_BUZZ();
-        idle();
+  bool _lcd_level_bed_corners_raise() {
+    bool probe_triggered = false;
+    corner_probing_done = false;
+    wait_for_probe = true;
+    ui.goto_screen(_lcd_draw_raise); // show raise screen
+    ui.set_selection(true);
+    while (wait_for_probe && !probe_triggered) { //loop while waiting to bed raise and probe trigger
+      probe_triggered = PROBE_TRIGGERED();
+      if (probe_triggered) {
+        endstops.hit_on_purpose();
+        TERN_(LEVEL_CORNERS_AUDIO_FEEDBACK, ui.buzz(200, 600));
       }
-      wait_for_probe = false;
-
-      TERN_(LEVEL_CORNERS_VERIFY_RAISED, verify_corner = true);
+      idle();
     }
+    TERN_(BLTOUCH_SLOW_MODE, bltouch.stow());
+    ui.goto_screen(_lcd_draw_probing);
+    return (probe_triggered);
+  }
 
-    TERN_(HAS_QUIET_PROBING, probe.set_probing_paused(false));
-
-    #if ENABLED(BLTOUCH) && DISABLED(BLTOUCH_HS_MODE)
-      bltouch.stow();
-    #endif
+  void _lcd_test_corners() {
+    ui.goto_screen(_lcd_draw_probing);
+    bed_corner = TERN(LEVEL_CENTER_TOO, 4, 0);
+    last_z = LEVEL_CORNERS_HEIGHT;
+    endstops.enable_z_probe(true);
+    good_points = 0;
 
-    if (probe_triggered) {
-      endstops.hit_on_purpose();
-      if (!WITHIN(current_position.z, last_z - (LEVEL_CORNERS_PROBE_TOLERANCE), last_z + (LEVEL_CORNERS_PROBE_TOLERANCE))) {
-        last_z = current_position.z;
-        good_points = 0;
+    do {
+      do_blocking_move_to_z(current_position.z + LEVEL_CORNERS_Z_HOP); // clearance
+      // Select next corner coordinates
+      xy_pos_t plf = lf - probe.offset_xy, prb = rb - probe.offset_xy;
+      switch (bed_corner) {
+        case 0: current_position   = plf;   break; // copy xy
+        case 1: current_position.x = prb.x; break;
+        case 2: current_position.y = prb.y; break;
+        case 3: current_position.x = plf.x; break;
+        #if ENABLED(LEVEL_CENTER_TOO)
+          case 4: current_position.set(X_CENTER - probe.offset_xy.x, Y_CENTER - probe.offset_xy.y); break;
+        #endif
       }
-      if (!verify_corner) good_points++;
-    }
-
-    if (!corner_probing_done) {
-      if (!verify_corner) bed_corner++;
-      if (bed_corner > 3) bed_corner = 0;
-      verify_corner = false;
-      if (good_points < 4)
-        _lcd_level_bed_corners_probing();
-      else {
-        ui.goto_screen([]{
-          MenuItem_confirm::confirm_screen(
-            []{ ui.goto_previous_screen_no_defer();
-                queue.inject_P(TERN(HAS_LEVELING, PSTR("G28\nG29"), G28_STR));
+      do_blocking_move_to_xy(current_position);           // Goto corner
+
+      if (!_lcd_level_bed_corners_probe()) {              // Probe down to tolerance
+        if (_lcd_level_bed_corners_raise()) {             // Prompt user to raise bed if needed
+          #if ENABLED(LEVEL_CORNERS_VERIFY_RAISED)        // Verify
+            while (!_lcd_level_bed_corners_probe(true)) { // Loop while corner verified
+              if (!_lcd_level_bed_corners_raise()) {      // Prompt user to raise bed if needed
+                if (corner_probing_done) return;          // Done was selected
+                break;                                    // Skip was selected
               }
-            , []{ ui.goto_previous_screen_no_defer(); }
-            , GET_TEXT(MSG_LEVEL_CORNERS_IN_RANGE)
-            , (const char*)nullptr, PSTR("?")
-          );
-        });
-        ui.set_selection(true);
+            }
+          #endif
+        }
+        else if (corner_probing_done)                     // Done was selected
+          return;
       }
-    }
+
+      if (bed_corner != 4) good_points++; // ignore center
+      if (++bed_corner > 3) bed_corner = 0;
+
+    } while (good_points < 4); // loop until all corners whitin tolerance
+
+    ui.goto_screen(_lcd_draw_level_prompt); // prompt for bed leveling
+    ui.set_selection(true);
   }
 
-#else
+#else // !LEVEL_CORNERS_USE_PROBE
 
   static inline void _lcd_goto_next_corner() {
-    constexpr float lfrb[4] = LEVEL_CORNERS_INSET_LFRB;
-    constexpr xy_pos_t lf { (X_MIN_BED) + lfrb[0], (Y_MIN_BED) + lfrb[1] },
-                       rb { (X_MAX_BED) - lfrb[2], (Y_MAX_BED) - lfrb[3] };
     line_to_z(LEVEL_CORNERS_Z_HOP);
     switch (bed_corner) {
       case 0: current_position   = lf;   break; // copy xy
@@ -199,33 +207,33 @@ static int8_t bed_corner;
     if (++bed_corner > 3 + ENABLED(LEVEL_CENTER_TOO)) bed_corner = 0;
   }
 
-#endif
+#endif // !LEVEL_CORNERS_USE_PROBE
 
 static inline void _lcd_level_bed_corners_homing() {
   _lcd_draw_homing();
-  if (all_axes_homed()) {
-    #if ENABLED(LEVEL_CORNERS_USE_PROBE)
-      TERN_(LEVEL_CENTER_TOO, bed_corner = 4);
-      endstops.enable_z_probe(true);
-      ui.goto_screen(_lcd_level_bed_corners_probing);
-    #else
-      bed_corner = 0;
-      ui.goto_screen([]{
-        MenuItem_confirm::select_screen(
-            GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE)
-          , _lcd_goto_next_corner
-          , []{
-              TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
-              ui.goto_previous_screen_no_defer();
-            }
-          , GET_TEXT(TERN(LEVEL_CENTER_TOO, MSG_LEVEL_BED_NEXT_POINT, MSG_NEXT_CORNER))
-          , (const char*)nullptr, PSTR("?")
-        );
-      });
-      ui.set_selection(true);
-      _lcd_goto_next_corner();
-    #endif
-  }
+  if (!all_axes_homed()) return;
+  #if ENABLED(LEVEL_CORNERS_USE_PROBE)
+    _lcd_test_corners();
+    if (corner_probing_done) ui.goto_previous_screen_no_defer();
+    TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
+    endstops.enable_z_probe(false);
+  #else
+    bed_corner = 0;
+    ui.goto_screen([]{
+      MenuItem_confirm::select_screen(
+          GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE)
+        , _lcd_goto_next_corner
+        , []{
+            TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
+            ui.goto_previous_screen_no_defer();
+          }
+        , GET_TEXT(TERN(LEVEL_CENTER_TOO, MSG_LEVEL_BED_NEXT_POINT, MSG_NEXT_CORNER))
+        , (const char*)nullptr, PSTR("?")
+      );
+    });
+    ui.set_selection(true);
+    _lcd_goto_next_corner();
+  #endif
 }
 
 void _lcd_level_bed_corners() {
@@ -241,13 +249,6 @@ void _lcd_level_bed_corners() {
     set_bed_leveling_enabled(false);
   #endif
 
-  #if ENABLED(LEVEL_CORNERS_USE_PROBE)
-    last_z = LEVEL_CORNERS_HEIGHT;
-    corner_probing_done = false;
-    verify_corner = false;
-    good_points = 0;
-  #endif
-
   ui.goto_screen(_lcd_level_bed_corners_homing);
 }
 

commit e5d0b27aafa9c33931e2abf668e498a3532b3dc2
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Dec 18 21:13:37 2020 -0600

    Rename QUIET_PROBING

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index ad91c404aa..acd19d69e4 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -104,7 +104,7 @@ static int8_t bed_corner;
     #if ENABLED(BLTOUCH) && DISABLED(BLTOUCH_HS_MODE)
       bltouch.deploy(); // DEPLOY in LOW SPEED MODE on every probe action
     #endif
-    TERN_(QUIET_PROBING, probe.set_probing_paused(true));
+    TERN_(HAS_QUIET_PROBING, probe.set_probing_paused(true));
 
     // Move down until the probe is triggered
     do_blocking_move_to_z(last_z - (LEVEL_CORNERS_PROBE_TOLERANCE), manual_feedrate_mm_s.z);
@@ -141,7 +141,7 @@ static int8_t bed_corner;
       TERN_(LEVEL_CORNERS_VERIFY_RAISED, verify_corner = true);
     }
 
-    TERN_(QUIET_PROBING, probe.set_probing_paused(false));
+    TERN_(HAS_QUIET_PROBING, probe.set_probing_paused(false));
 
     #if ENABLED(BLTOUCH) && DISABLED(BLTOUCH_HS_MODE)
       bltouch.stow();

commit 8fd8772a6fffe63d99d0b88aec7a77d283df8584
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 29 19:06:40 2020 -0600

    Adjust axis homed / trusted methods (#20323)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 52d2d0ec3d..ad91c404aa 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -230,7 +230,7 @@ static inline void _lcd_level_bed_corners_homing() {
 
 void _lcd_level_bed_corners() {
   ui.defer_status_screen();
-  if (!all_axes_known()) {
+  if (!all_axes_trusted()) {
     set_all_unhomed();
     queue.inject_P(G28_STR);
   }

commit 58ac815822b4c04f29b66ddf076156e6b4994749
Author: wmariz <11435639+wmariz@users.noreply.github.com>
Date:   Thu Nov 26 10:58:19 2020 -0300

    Level Corners with Probe option (#20241)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 16f9992c18..52d2d0ec3d 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -44,53 +44,187 @@
   #define LEVEL_CORNERS_HEIGHT 0.0
 #endif
 
+#if ENABLED(LEVEL_CORNERS_USE_PROBE)
+  #include "../../module/probe.h"
+  #include "../../module/endstops.h"
+  #if ENABLED(BLTOUCH)
+    #include "../../feature/bltouch.h"
+  #endif
+  #ifndef LEVEL_CORNERS_PROBE_TOLERANCE
+    #define LEVEL_CORNERS_PROBE_TOLERANCE 0.1
+  #endif
+  #if ENABLED(LEVEL_CORNERS_AUDIO_FEEDBACK)
+    #include "../../libs/buzzer.h"
+    #define PROBE_BUZZ() BUZZ(200, 600)
+  #else
+    #define PROBE_BUZZ() NOOP
+  #endif
+  static float last_z;
+  static bool corner_probing_done;
+  static bool verify_corner;
+  static int good_points;
+#endif
+
 static_assert(LEVEL_CORNERS_Z_HOP >= 0, "LEVEL_CORNERS_Z_HOP must be >= 0. Please update your configuration.");
 
+extern const char G28_STR[];
+
 #if HAS_LEVELING
   static bool leveling_was_active = false;
 #endif
 
+static int8_t bed_corner;
+
 /**
  * Level corners, starting in the front-left corner.
  */
-static int8_t bed_corner;
-static inline void _lcd_goto_next_corner() {
-  constexpr float lfrb[4] = LEVEL_CORNERS_INSET_LFRB;
-  constexpr xy_pos_t lf { (X_MIN_BED) + lfrb[0], (Y_MIN_BED) + lfrb[1] },
-                     rb { (X_MAX_BED) - lfrb[2], (Y_MAX_BED) - lfrb[3] };
-  line_to_z(LEVEL_CORNERS_Z_HOP);
-  switch (bed_corner) {
-    case 0: current_position   = lf;   break; // copy xy
-    case 1: current_position.x = rb.x; break;
-    case 2: current_position.y = rb.y; break;
-    case 3: current_position.x = lf.x; break;
-    #if ENABLED(LEVEL_CENTER_TOO)
-      case 4: current_position.set(X_CENTER, Y_CENTER); break;
+#if ENABLED(LEVEL_CORNERS_USE_PROBE)
+
+  static inline void _lcd_level_bed_corners_probing() {
+    ui.goto_screen([]{ MenuItem_static::draw((LCD_HEIGHT - 1) / 2, GET_TEXT(MSG_PROBING_MESH)); });
+
+    float lfrb[4] = LEVEL_CORNERS_INSET_LFRB;
+    xy_pos_t lf { (X_MIN_BED) + lfrb[0] - probe.offset_xy.x , (Y_MIN_BED) + lfrb[1] - probe.offset_xy.y },
+             rb { (X_MAX_BED) - lfrb[2] - probe.offset_xy.x , (Y_MAX_BED) - lfrb[3] - probe.offset_xy.y };
+
+    do_blocking_move_to_z(LEVEL_CORNERS_Z_HOP - probe.offset.z);
+
+    switch (bed_corner) {
+      case 0: current_position   = lf;   break; // copy xy
+      case 1: current_position.x = rb.x; break;
+      case 2: current_position.y = rb.y; break;
+      case 3: current_position.x = lf.x; break;
+      #if ENABLED(LEVEL_CENTER_TOO)
+        case 4: current_position.set(X_CENTER - probe.offset_xy.x, Y_CENTER - probe.offset_xy.y); good_points--; break;
+      #endif
+    }
+
+    do_blocking_move_to_xy(current_position);
+
+    #if ENABLED(BLTOUCH) && DISABLED(BLTOUCH_HS_MODE)
+      bltouch.deploy(); // DEPLOY in LOW SPEED MODE on every probe action
     #endif
+    TERN_(QUIET_PROBING, probe.set_probing_paused(true));
+
+    // Move down until the probe is triggered
+    do_blocking_move_to_z(last_z - (LEVEL_CORNERS_PROBE_TOLERANCE), manual_feedrate_mm_s.z);
+
+    // Check to see if the probe was triggered
+    bool probe_triggered = TEST(endstops.trigger_state(), TERN(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN, Z_MIN, Z_MIN_PROBE));
+    if (!probe_triggered) {
+
+      static bool wait_for_probe;
+
+      ui.goto_screen([]{
+        MenuItem_confirm::select_screen(
+          GET_TEXT(MSG_BUTTON_DONE), GET_TEXT(MSG_BUTTON_SKIP)
+          , []{ corner_probing_done = true;
+                wait_for_probe = false;
+                TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
+                ui.goto_previous_screen_no_defer();
+            }
+          , []{ wait_for_probe = false; }
+          , GET_TEXT(MSG_LEVEL_CORNERS_RAISE)
+          , (const char*)nullptr, PSTR("")
+        );
+      });
+      ui.set_selection(true);
+
+      wait_for_probe = true;
+      while (wait_for_probe && !probe_triggered) {
+        probe_triggered = PROBE_TRIGGERED();
+        if (probe_triggered) PROBE_BUZZ();
+        idle();
+      }
+      wait_for_probe = false;
+
+      TERN_(LEVEL_CORNERS_VERIFY_RAISED, verify_corner = true);
+    }
+
+    TERN_(QUIET_PROBING, probe.set_probing_paused(false));
+
+    #if ENABLED(BLTOUCH) && DISABLED(BLTOUCH_HS_MODE)
+      bltouch.stow();
+    #endif
+
+    if (probe_triggered) {
+      endstops.hit_on_purpose();
+      if (!WITHIN(current_position.z, last_z - (LEVEL_CORNERS_PROBE_TOLERANCE), last_z + (LEVEL_CORNERS_PROBE_TOLERANCE))) {
+        last_z = current_position.z;
+        good_points = 0;
+      }
+      if (!verify_corner) good_points++;
+    }
+
+    if (!corner_probing_done) {
+      if (!verify_corner) bed_corner++;
+      if (bed_corner > 3) bed_corner = 0;
+      verify_corner = false;
+      if (good_points < 4)
+        _lcd_level_bed_corners_probing();
+      else {
+        ui.goto_screen([]{
+          MenuItem_confirm::confirm_screen(
+            []{ ui.goto_previous_screen_no_defer();
+                queue.inject_P(TERN(HAS_LEVELING, PSTR("G28\nG29"), G28_STR));
+              }
+            , []{ ui.goto_previous_screen_no_defer(); }
+            , GET_TEXT(MSG_LEVEL_CORNERS_IN_RANGE)
+            , (const char*)nullptr, PSTR("?")
+          );
+        });
+        ui.set_selection(true);
+      }
+    }
   }
-  line_to_current_position(manual_feedrate_mm_s.x);
-  line_to_z(LEVEL_CORNERS_HEIGHT);
-  if (++bed_corner > 3 + ENABLED(LEVEL_CENTER_TOO)) bed_corner = 0;
-}
+
+#else
+
+  static inline void _lcd_goto_next_corner() {
+    constexpr float lfrb[4] = LEVEL_CORNERS_INSET_LFRB;
+    constexpr xy_pos_t lf { (X_MIN_BED) + lfrb[0], (Y_MIN_BED) + lfrb[1] },
+                       rb { (X_MAX_BED) - lfrb[2], (Y_MAX_BED) - lfrb[3] };
+    line_to_z(LEVEL_CORNERS_Z_HOP);
+    switch (bed_corner) {
+      case 0: current_position   = lf;   break; // copy xy
+      case 1: current_position.x = rb.x; break;
+      case 2: current_position.y = rb.y; break;
+      case 3: current_position.x = lf.x; break;
+      #if ENABLED(LEVEL_CENTER_TOO)
+        case 4: current_position.set(X_CENTER, Y_CENTER); break;
+      #endif
+    }
+    line_to_current_position(manual_feedrate_mm_s.x);
+    line_to_z(LEVEL_CORNERS_HEIGHT);
+    if (++bed_corner > 3 + ENABLED(LEVEL_CENTER_TOO)) bed_corner = 0;
+  }
+
+#endif
 
 static inline void _lcd_level_bed_corners_homing() {
   _lcd_draw_homing();
   if (all_axes_homed()) {
-    bed_corner = 0;
-    ui.goto_screen([]{
-      MenuItem_confirm::select_screen(
-          GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE)
-        , _lcd_goto_next_corner
-        , []{
-            TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
-            ui.goto_previous_screen_no_defer();
-          }
-        , GET_TEXT(TERN(LEVEL_CENTER_TOO, MSG_LEVEL_BED_NEXT_POINT, MSG_NEXT_CORNER))
-        , (const char*)nullptr, PSTR("?")
-      );
-    });
-    ui.set_selection(true);
-    _lcd_goto_next_corner();
+    #if ENABLED(LEVEL_CORNERS_USE_PROBE)
+      TERN_(LEVEL_CENTER_TOO, bed_corner = 4);
+      endstops.enable_z_probe(true);
+      ui.goto_screen(_lcd_level_bed_corners_probing);
+    #else
+      bed_corner = 0;
+      ui.goto_screen([]{
+        MenuItem_confirm::select_screen(
+            GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE)
+          , _lcd_goto_next_corner
+          , []{
+              TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
+              ui.goto_previous_screen_no_defer();
+            }
+          , GET_TEXT(TERN(LEVEL_CENTER_TOO, MSG_LEVEL_BED_NEXT_POINT, MSG_NEXT_CORNER))
+          , (const char*)nullptr, PSTR("?")
+        );
+      });
+      ui.set_selection(true);
+      _lcd_goto_next_corner();
+    #endif
   }
 }
 
@@ -107,6 +241,13 @@ void _lcd_level_bed_corners() {
     set_bed_leveling_enabled(false);
   #endif
 
+  #if ENABLED(LEVEL_CORNERS_USE_PROBE)
+    last_z = LEVEL_CORNERS_HEIGHT;
+    corner_probing_done = false;
+    verify_corner = false;
+    good_points = 0;
+  #endif
+
   ui.goto_screen(_lcd_level_bed_corners_homing);
 }
 

commit 4f67642122059a9270f9e3690978248355f88e72
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Aug 21 05:21:34 2020 -0500

    Header for individual menus

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 6dbe7c6d18..16f9992c18 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -28,7 +28,7 @@
 
 #if BOTH(HAS_LCD_MENU, LEVEL_BED_CORNERS)
 
-#include "menu.h"
+#include "menu_item.h"
 #include "../../module/motion.h"
 #include "../../module/planner.h"
 

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index fca5ca8af9..6dbe7c6d18 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit 52aa459a2dc08a8f803ad9ffb7aa173dc449637f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 10 00:12:56 2020 -0500

    Improved EEPROM boot error (#17916)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index fb0087ad0e..fca5ca8af9 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -86,7 +86,7 @@ static inline void _lcd_level_bed_corners_homing() {
             ui.goto_previous_screen_no_defer();
           }
         , GET_TEXT(TERN(LEVEL_CENTER_TOO, MSG_LEVEL_BED_NEXT_POINT, MSG_NEXT_CORNER))
-        , (PGM_P)nullptr, PSTR("?")
+        , (const char*)nullptr, PSTR("?")
       );
     });
     ui.set_selection(true);

commit 4f003fc7a715830da7324da2c90f8411df3b1efc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Apr 27 23:52:11 2020 -0500

    Streamline menu item logic (#17664)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 92ab856f61..fb0087ad0e 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -79,19 +79,14 @@ static inline void _lcd_level_bed_corners_homing() {
     bed_corner = 0;
     ui.goto_screen([]{
       MenuItem_confirm::select_screen(
-        GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE),
-        _lcd_goto_next_corner,
-        []{
-          TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
-          ui.goto_previous_screen_no_defer();
-        },
-        GET_TEXT(
-          #if ENABLED(LEVEL_CENTER_TOO)
-            MSG_LEVEL_BED_NEXT_POINT
-          #else
-            MSG_NEXT_CORNER
-          #endif
-        ), (PGM_P)nullptr, PSTR("?")
+          GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE)
+        , _lcd_goto_next_corner
+        , []{
+            TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
+            ui.goto_previous_screen_no_defer();
+          }
+        , GET_TEXT(TERN(LEVEL_CENTER_TOO, MSG_LEVEL_BED_NEXT_POINT, MSG_NEXT_CORNER))
+        , (PGM_P)nullptr, PSTR("?")
       );
     });
     ui.set_selection(true);

commit ab2b98e4255b0b9579af9627e884ac3dfc1d30bb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Apr 23 21:42:38 2020 -0500

    Apply composite tests

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 71eac08025..92ab856f61 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -26,7 +26,7 @@
 
 #include "../../inc/MarlinConfigPre.h"
 
-#if HAS_LCD_MENU && ENABLED(LEVEL_BED_CORNERS)
+#if BOTH(HAS_LCD_MENU, LEVEL_BED_CORNERS)
 
 #include "menu.h"
 #include "../../module/motion.h"

commit 6d90d1e1f552dca5e21bc61b676b8e8ce731b280
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 22 16:35:03 2020 -0500

    Apply TERN to compact code (#17619)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 3d0a5bf2aa..71eac08025 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -70,11 +70,7 @@ static inline void _lcd_goto_next_corner() {
   }
   line_to_current_position(manual_feedrate_mm_s.x);
   line_to_z(LEVEL_CORNERS_HEIGHT);
-  if (++bed_corner > (3
-    #if ENABLED(LEVEL_CENTER_TOO)
-      + 1
-    #endif
-  )) bed_corner = 0;
+  if (++bed_corner > 3 + ENABLED(LEVEL_CENTER_TOO)) bed_corner = 0;
 }
 
 static inline void _lcd_level_bed_corners_homing() {
@@ -86,9 +82,7 @@ static inline void _lcd_level_bed_corners_homing() {
         GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE),
         _lcd_goto_next_corner,
         []{
-          #if HAS_LEVELING
-            set_bed_leveling_enabled(leveling_was_active);
-          #endif
+          TERN_(HAS_LEVELING, set_bed_leveling_enabled(leveling_was_active));
           ui.goto_previous_screen_no_defer();
         },
         GET_TEXT(

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index f09ac15516..3d0a5bf2aa 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit 7f9c62437e5c72947acc3310d94829f132697c81
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Feb 3 00:00:35 2020 -0600

    Corner Leveling: Add inset for each side (#16759)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index a7fffb1e02..f09ac15516 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -55,33 +55,26 @@ static_assert(LEVEL_CORNERS_Z_HOP >= 0, "LEVEL_CORNERS_Z_HOP must be >= 0. Pleas
  */
 static int8_t bed_corner;
 static inline void _lcd_goto_next_corner() {
+  constexpr float lfrb[4] = LEVEL_CORNERS_INSET_LFRB;
+  constexpr xy_pos_t lf { (X_MIN_BED) + lfrb[0], (Y_MIN_BED) + lfrb[1] },
+                     rb { (X_MAX_BED) - lfrb[2], (Y_MAX_BED) - lfrb[3] };
   line_to_z(LEVEL_CORNERS_Z_HOP);
   switch (bed_corner) {
-    case 0:
-      current_position.set(X_MIN_BED + LEVEL_CORNERS_INSET, Y_MIN_BED + LEVEL_CORNERS_INSET);
-      break;
-    case 1:
-      current_position.x = X_MAX_BED - (LEVEL_CORNERS_INSET);
-      break;
-    case 2:
-      current_position.y = Y_MAX_BED - (LEVEL_CORNERS_INSET);
-      break;
-    case 3:
-      current_position.x = X_MIN_BED + LEVEL_CORNERS_INSET;
-      break;
+    case 0: current_position   = lf;   break; // copy xy
+    case 1: current_position.x = rb.x; break;
+    case 2: current_position.y = rb.y; break;
+    case 3: current_position.x = lf.x; break;
     #if ENABLED(LEVEL_CENTER_TOO)
-      case 4:
-        current_position.set(X_CENTER, Y_CENTER);
-        break;
+      case 4: current_position.set(X_CENTER, Y_CENTER); break;
     #endif
   }
-  line_to_current_position(MMM_TO_MMS(manual_feedrate_mm_m.x));
+  line_to_current_position(manual_feedrate_mm_s.x);
   line_to_z(LEVEL_CORNERS_HEIGHT);
-  if (++bed_corner > 3
+  if (++bed_corner > (3
     #if ENABLED(LEVEL_CENTER_TOO)
       + 1
     #endif
-  ) bed_corner = 0;
+  )) bed_corner = 0;
 }
 
 static inline void _lcd_level_bed_corners_homing() {

commit 84ce3a6bea0d12815261ef7fa40bd2c08f2a5573
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Nov 7 00:23:35 2019 -0600

    LCD corner screen handler lambda

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index a289b1f296..a7fffb1e02 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -88,23 +88,25 @@ static inline void _lcd_level_bed_corners_homing() {
   _lcd_draw_homing();
   if (all_axes_homed()) {
     bed_corner = 0;
-    MenuItem_confirm::select_screen(
-      GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE),
-      _lcd_goto_next_corner,
-      []{
-        #if HAS_LEVELING
-          set_bed_leveling_enabled(leveling_was_active);
-        #endif
-        ui.goto_previous_screen_no_defer();
-      },
-      GET_TEXT(
-      #if ENABLED(LEVEL_CENTER_TOO)
-        MSG_LEVEL_BED_NEXT_POINT
-      #else
-        MSG_NEXT_CORNER
-      #endif
-      ), (PGM_P)nullptr, PSTR("?")
+    ui.goto_screen([]{
+      MenuItem_confirm::select_screen(
+        GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE),
+        _lcd_goto_next_corner,
+        []{
+          #if HAS_LEVELING
+            set_bed_leveling_enabled(leveling_was_active);
+          #endif
+          ui.goto_previous_screen_no_defer();
+        },
+        GET_TEXT(
+          #if ENABLED(LEVEL_CENTER_TOO)
+            MSG_LEVEL_BED_NEXT_POINT
+          #else
+            MSG_NEXT_CORNER
+          #endif
+        ), (PGM_P)nullptr, PSTR("?")
       );
+    });
     ui.set_selection(true);
     _lcd_goto_next_corner();
   }

commit 4ee3502c8f2ed2bc68fa4a68edd7fb372850a1c4
Author: Luu Lac <45380455+shitcreek@users.noreply.github.com>
Date:   Wed Nov 6 15:54:09 2019 -0600

    Fix "confused intellisense" (#15817)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 42ddec8bed..a289b1f296 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -97,14 +97,14 @@ static inline void _lcd_level_bed_corners_homing() {
         #endif
         ui.goto_previous_screen_no_defer();
       },
-      GET_TEXT((
-        #if ENABLED(LEVEL_CENTER_TOO)
-          MSG_LEVEL_BED_NEXT_POINT
-        #else
-          MSG_NEXT_CORNER
-        #endif
-      )), (PGM_P)nullptr, PSTR("?")
-    );
+      GET_TEXT(
+      #if ENABLED(LEVEL_CENTER_TOO)
+        MSG_LEVEL_BED_NEXT_POINT
+      #else
+        MSG_NEXT_CORNER
+      #endif
+      ), (PGM_P)nullptr, PSTR("?")
+      );
     ui.set_selection(true);
     _lcd_goto_next_corner();
   }

commit 51fd226a4dabcb9ecee7173121852aba388bb5c8
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Nov 4 15:40:56 2019 -0600

    Unconfuse intellisense

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index f3c3a1d904..42ddec8bed 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -97,13 +97,13 @@ static inline void _lcd_level_bed_corners_homing() {
         #endif
         ui.goto_previous_screen_no_defer();
       },
-      GET_TEXT(
+      GET_TEXT((
         #if ENABLED(LEVEL_CENTER_TOO)
           MSG_LEVEL_BED_NEXT_POINT
         #else
           MSG_NEXT_CORNER
         #endif
-      ), (PGM_P)nullptr, PSTR("?")
+      )), (PGM_P)nullptr, PSTR("?")
     );
     ui.set_selection(true);
     _lcd_goto_next_corner();

commit ea3217cd4613d723567d9bc8ab375e68d75b294b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Nov 2 07:28:20 2019 -0500

    Move 'draw' methods into Menu Item classes (#15760)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index b2eae427ae..f3c3a1d904 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -84,31 +84,27 @@ static inline void _lcd_goto_next_corner() {
   ) bed_corner = 0;
 }
 
-static inline void menu_level_bed_corners() {
-  do_select_screen(
-    GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE),
-    _lcd_goto_next_corner,
-    []{
-      #if HAS_LEVELING
-        set_bed_leveling_enabled(leveling_was_active);
-      #endif
-      ui.goto_previous_screen_no_defer();
-    },
-    GET_TEXT(
-      #if ENABLED(LEVEL_CENTER_TOO)
-        MSG_LEVEL_BED_NEXT_POINT
-      #else
-        MSG_NEXT_CORNER
-      #endif
-    ), nullptr, PSTR("?")
-  );
-}
-
 static inline void _lcd_level_bed_corners_homing() {
   _lcd_draw_homing();
   if (all_axes_homed()) {
     bed_corner = 0;
-    ui.goto_screen(menu_level_bed_corners);
+    MenuItem_confirm::select_screen(
+      GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE),
+      _lcd_goto_next_corner,
+      []{
+        #if HAS_LEVELING
+          set_bed_leveling_enabled(leveling_was_active);
+        #endif
+        ui.goto_previous_screen_no_defer();
+      },
+      GET_TEXT(
+        #if ENABLED(LEVEL_CENTER_TOO)
+          MSG_LEVEL_BED_NEXT_POINT
+        #else
+          MSG_NEXT_CORNER
+        #endif
+      ), (PGM_P)nullptr, PSTR("?")
+    );
     ui.set_selection(true);
     _lcd_goto_next_corner();
   }

commit ca6d00b862049773135a9ef8d04d042f0af7f9d3
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Nov 1 23:51:25 2019 -0500

    Save some string flash

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index ac2a68fb36..b2eae427ae 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -118,7 +118,7 @@ void _lcd_level_bed_corners() {
   ui.defer_status_screen();
   if (!all_axes_known()) {
     set_all_unhomed();
-    queue.inject_P(PSTR("G28"));
+    queue.inject_P(G28_STR);
   }
 
   // Disable leveling so the planner won't mess with us

commit 6a865a614620d71521bd3dc032adffe0bf82378c
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Wed Oct 9 18:46:10 2019 -0600

    Multi-language support (#15453)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 13441e6f3d..ac2a68fb36 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -86,7 +86,7 @@ static inline void _lcd_goto_next_corner() {
 
 static inline void menu_level_bed_corners() {
   do_select_screen(
-    PSTR(MSG_BUTTON_NEXT), PSTR(MSG_BUTTON_DONE),
+    GET_TEXT(MSG_BUTTON_NEXT), GET_TEXT(MSG_BUTTON_DONE),
     _lcd_goto_next_corner,
     []{
       #if HAS_LEVELING
@@ -94,7 +94,7 @@ static inline void menu_level_bed_corners() {
       #endif
       ui.goto_previous_screen_no_defer();
     },
-    PSTR(
+    GET_TEXT(
       #if ENABLED(LEVEL_CENTER_TOO)
         MSG_LEVEL_BED_NEXT_POINT
       #else

commit 50e4545255605eb506c20eb107270038b0fe7bdb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 29 04:25:39 2019 -0500

    Add custom types for position (#15204)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 07629b7179..13441e6f3d 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -58,26 +58,24 @@ static inline void _lcd_goto_next_corner() {
   line_to_z(LEVEL_CORNERS_Z_HOP);
   switch (bed_corner) {
     case 0:
-      current_position[X_AXIS] = X_MIN_BED + LEVEL_CORNERS_INSET;
-      current_position[Y_AXIS] = Y_MIN_BED + LEVEL_CORNERS_INSET;
+      current_position.set(X_MIN_BED + LEVEL_CORNERS_INSET, Y_MIN_BED + LEVEL_CORNERS_INSET);
       break;
     case 1:
-      current_position[X_AXIS] = X_MAX_BED - (LEVEL_CORNERS_INSET);
+      current_position.x = X_MAX_BED - (LEVEL_CORNERS_INSET);
       break;
     case 2:
-      current_position[Y_AXIS] = Y_MAX_BED - (LEVEL_CORNERS_INSET);
+      current_position.y = Y_MAX_BED - (LEVEL_CORNERS_INSET);
       break;
     case 3:
-      current_position[X_AXIS] = X_MIN_BED + LEVEL_CORNERS_INSET;
+      current_position.x = X_MIN_BED + LEVEL_CORNERS_INSET;
       break;
     #if ENABLED(LEVEL_CENTER_TOO)
       case 4:
-        current_position[X_AXIS] = X_CENTER;
-        current_position[Y_AXIS] = Y_CENTER;
+        current_position.set(X_CENTER, Y_CENTER);
         break;
     #endif
   }
-  planner.buffer_line(current_position, MMM_TO_MMS(manual_feedrate_mm_m[X_AXIS]), active_extruder);
+  line_to_current_position(MMM_TO_MMS(manual_feedrate_mm_m.x));
   line_to_z(LEVEL_CORNERS_HEIGHT);
   if (++bed_corner > 3
     #if ENABLED(LEVEL_CENTER_TOO)

commit df1e51258a8bcc432deed9f5bd60df41a75b2c32
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Tue Sep 24 22:29:21 2019 -0400

    Add M851 X Y probe offsets (#15202)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index a559a68527..07629b7179 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -62,10 +62,10 @@ static inline void _lcd_goto_next_corner() {
       current_position[Y_AXIS] = Y_MIN_BED + LEVEL_CORNERS_INSET;
       break;
     case 1:
-      current_position[X_AXIS] = X_MAX_BED - LEVEL_CORNERS_INSET;
+      current_position[X_AXIS] = X_MAX_BED - (LEVEL_CORNERS_INSET);
       break;
     case 2:
-      current_position[Y_AXIS] = Y_MAX_BED - LEVEL_CORNERS_INSET;
+      current_position[Y_AXIS] = Y_MAX_BED - (LEVEL_CORNERS_INSET);
       break;
     case 3:
       current_position[X_AXIS] = X_MIN_BED + LEVEL_CORNERS_INSET;

commit c9aa68ef7aa358bb633b6d87232a94bfa6b7d7c8
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Thu Jul 18 07:41:15 2019 +0700

    Encoder direction: Wrangle, Revert select screen change (#14628)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 10d0e5d7cd..a559a68527 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -111,7 +111,7 @@ static inline void _lcd_level_bed_corners_homing() {
   if (all_axes_homed()) {
     bed_corner = 0;
     ui.goto_screen(menu_level_bed_corners);
-    set_ui_selection(true);
+    ui.set_selection(true);
     _lcd_goto_next_corner();
   }
 }

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 43841dd4dc..10d0e5d7cd 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit 4c872a01f284cbf181f52c84e2ba6b4618e62556
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jun 19 00:00:19 2019 -0500

    G-code queue singleton, front injection (#14236)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index fd90043d0f..43841dd4dc 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -120,7 +120,7 @@ void _lcd_level_bed_corners() {
   ui.defer_status_screen();
   if (!all_axes_known()) {
     set_all_unhomed();
-    enqueue_and_echo_commands_P(PSTR("G28"));
+    queue.inject_P(PSTR("G28"));
   }
 
   // Disable leveling so the planner won't mess with us

commit ad4ffa1d2fbd17ac09c816ba2052cdf714261042
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 9 11:45:55 2019 -0500

    Use C++ language supported 'nullptr' (#13944)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index de24ed5a56..fd90043d0f 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -102,7 +102,7 @@ static inline void menu_level_bed_corners() {
       #else
         MSG_NEXT_CORNER
       #endif
-    ), NULL, PSTR("?")
+    ), nullptr, PSTR("?")
   );
 }
 

commit 5051909c3c43ae42c14765d0adce4405b8e9a423
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 24 10:13:44 2019 -0500

    Update do_select_screen for general use (#13800)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index b36d8dd3b1..de24ed5a56 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -50,13 +50,6 @@ static_assert(LEVEL_CORNERS_Z_HOP >= 0, "LEVEL_CORNERS_Z_HOP must be >= 0. Pleas
   static bool leveling_was_active = false;
 #endif
 
-static inline void _lcd_level_bed_corners_back() {
-  #if HAS_LEVELING
-    set_bed_leveling_enabled(leveling_was_active);
-  #endif
-  ui.goto_previous_screen_no_defer();
-}
-
 /**
  * Level corners, starting in the front-left corner.
  */
@@ -94,17 +87,23 @@ static inline void _lcd_goto_next_corner() {
 }
 
 static inline void menu_level_bed_corners() {
-  START_MENU();
-  MENU_ITEM(function,
-    #if ENABLED(LEVEL_CENTER_TOO)
-      MSG_LEVEL_BED_NEXT_POINT
-    #else
-      MSG_NEXT_CORNER
-    #endif
-    , _lcd_goto_next_corner
+  do_select_screen(
+    PSTR(MSG_BUTTON_NEXT), PSTR(MSG_BUTTON_DONE),
+    _lcd_goto_next_corner,
+    []{
+      #if HAS_LEVELING
+        set_bed_leveling_enabled(leveling_was_active);
+      #endif
+      ui.goto_previous_screen_no_defer();
+    },
+    PSTR(
+      #if ENABLED(LEVEL_CENTER_TOO)
+        MSG_LEVEL_BED_NEXT_POINT
+      #else
+        MSG_NEXT_CORNER
+      #endif
+    ), NULL, PSTR("?")
   );
-  MENU_ITEM(function, MSG_BACK, _lcd_level_bed_corners_back);
-  END_MENU();
 }
 
 static inline void _lcd_level_bed_corners_homing() {
@@ -112,6 +111,7 @@ static inline void _lcd_level_bed_corners_homing() {
   if (all_axes_homed()) {
     bed_corner = 0;
     ui.goto_screen(menu_level_bed_corners);
+    set_ui_selection(true);
     _lcd_goto_next_corner();
   }
 }

commit 02dc72acb6a609761b0655953d2687bf66612e43
Author: Thomas Moore <tcm0116@users.noreply.github.com>
Date:   Sun Mar 24 21:01:18 2019 -0400

    Disable ABL when leveling corners (#13471)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index a91204864f..b36d8dd3b1 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -32,6 +32,10 @@
 #include "../../module/motion.h"
 #include "../../module/planner.h"
 
+#if HAS_LEVELING
+  #include "../../feature/bedlevel/bedlevel.h"
+#endif
+
 #ifndef LEVEL_CORNERS_Z_HOP
   #define LEVEL_CORNERS_Z_HOP 4.0
 #endif
@@ -42,11 +46,22 @@
 
 static_assert(LEVEL_CORNERS_Z_HOP >= 0, "LEVEL_CORNERS_Z_HOP must be >= 0. Please update your configuration.");
 
+#if HAS_LEVELING
+  static bool leveling_was_active = false;
+#endif
+
+static inline void _lcd_level_bed_corners_back() {
+  #if HAS_LEVELING
+    set_bed_leveling_enabled(leveling_was_active);
+  #endif
+  ui.goto_previous_screen_no_defer();
+}
+
 /**
  * Level corners, starting in the front-left corner.
  */
 static int8_t bed_corner;
-void _lcd_goto_next_corner() {
+static inline void _lcd_goto_next_corner() {
   line_to_z(LEVEL_CORNERS_Z_HOP);
   switch (bed_corner) {
     case 0:
@@ -78,7 +93,7 @@ void _lcd_goto_next_corner() {
   ) bed_corner = 0;
 }
 
-void menu_level_bed_corners() {
+static inline void menu_level_bed_corners() {
   START_MENU();
   MENU_ITEM(function,
     #if ENABLED(LEVEL_CENTER_TOO)
@@ -86,12 +101,13 @@ void menu_level_bed_corners() {
     #else
       MSG_NEXT_CORNER
     #endif
-    , _lcd_goto_next_corner);
-  MENU_ITEM(function, MSG_BACK, ui.goto_previous_screen_no_defer);
+    , _lcd_goto_next_corner
+  );
+  MENU_ITEM(function, MSG_BACK, _lcd_level_bed_corners_back);
   END_MENU();
 }
 
-void _lcd_level_bed_corners_homing() {
+static inline void _lcd_level_bed_corners_homing() {
   _lcd_draw_homing();
   if (all_axes_homed()) {
     bed_corner = 0;
@@ -106,6 +122,13 @@ void _lcd_level_bed_corners() {
     set_all_unhomed();
     enqueue_and_echo_commands_P(PSTR("G28"));
   }
+
+  // Disable leveling so the planner won't mess with us
+  #if HAS_LEVELING
+    leveling_was_active = planner.leveling_active;
+    set_bed_leveling_enabled(false);
+  #endif
+
   ui.goto_screen(_lcd_level_bed_corners_homing);
 }
 

commit d8329d858d7d2c2b2a9107f99df39a93816c0841
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Mar 23 16:30:43 2019 -0500

    Default argument to defer_status_screen

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 8d94748092..a91204864f 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -101,7 +101,7 @@ void _lcd_level_bed_corners_homing() {
 }
 
 void _lcd_level_bed_corners() {
-  ui.defer_status_screen(true);
+  ui.defer_status_screen();
   if (!all_axes_known()) {
     set_all_unhomed();
     enqueue_and_echo_commands_P(PSTR("G28"));

commit 70e6a3db8ae566553d2eb02fd9f7b916bd34fa8a
Author: drzejkopf <41212609+drzejkopf@users.noreply.github.com>
Date:   Thu Mar 21 00:26:12 2019 +0100

    Add LEVEL_CORNERS_HEIGHT to LEVEL_BED_CORNERS (#13439)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index c9b014b947..8d94748092 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -36,6 +36,10 @@
   #define LEVEL_CORNERS_Z_HOP 4.0
 #endif
 
+#ifndef LEVEL_CORNERS_HEIGHT
+  #define LEVEL_CORNERS_HEIGHT 0.0
+#endif
+
 static_assert(LEVEL_CORNERS_Z_HOP >= 0, "LEVEL_CORNERS_Z_HOP must be >= 0. Please update your configuration.");
 
 /**
@@ -66,7 +70,7 @@ void _lcd_goto_next_corner() {
     #endif
   }
   planner.buffer_line(current_position, MMM_TO_MMS(manual_feedrate_mm_m[X_AXIS]), active_extruder);
-  line_to_z(0.0);
+  line_to_z(LEVEL_CORNERS_HEIGHT);
   if (++bed_corner > 3
     #if ENABLED(LEVEL_CENTER_TOO)
       + 1

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index eeb660a4ea..c9b014b947 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm

commit a0ef6198ff012b046a680f9feb535e1941a9690f
Author: Ondřej Nový <novy@ondrej.org>
Date:   Fri Jan 11 02:15:17 2019 +0100

    Level bed corners Z-hop height option (#12858)

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 037d6be03a..eeb660a4ea 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -32,12 +32,18 @@
 #include "../../module/motion.h"
 #include "../../module/planner.h"
 
+#ifndef LEVEL_CORNERS_Z_HOP
+  #define LEVEL_CORNERS_Z_HOP 4.0
+#endif
+
+static_assert(LEVEL_CORNERS_Z_HOP >= 0, "LEVEL_CORNERS_Z_HOP must be >= 0. Please update your configuration.");
+
 /**
  * Level corners, starting in the front-left corner.
  */
 static int8_t bed_corner;
 void _lcd_goto_next_corner() {
-  line_to_z(4.0);
+  line_to_z(LEVEL_CORNERS_Z_HOP);
   switch (bed_corner) {
     case 0:
       current_position[X_AXIS] = X_MIN_BED + LEVEL_CORNERS_INSET;

commit a0c795b097a30eff006c8dff178abf5f1f1907fa
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 11 12:16:24 2018 -0600

    Encapsulate common display code in a singleton (#12395)
    
    * Encapsulate common LCD code in a singleton
    * Depend more UBL code on UBL_DEVEL_DEBUGGING
      - Since most users don't need the debugging on at all times, this helps reduce the default build size for UBL by over 2K, a little closer to fitting on 128K boards.

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 0d51ef346d..037d6be03a 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -77,7 +77,7 @@ void menu_level_bed_corners() {
       MSG_NEXT_CORNER
     #endif
     , _lcd_goto_next_corner);
-  MENU_ITEM(function, MSG_BACK, lcd_goto_previous_menu_no_defer);
+  MENU_ITEM(function, MSG_BACK, ui.goto_previous_screen_no_defer);
   END_MENU();
 }
 
@@ -85,18 +85,18 @@ void _lcd_level_bed_corners_homing() {
   _lcd_draw_homing();
   if (all_axes_homed()) {
     bed_corner = 0;
-    lcd_goto_screen(menu_level_bed_corners);
+    ui.goto_screen(menu_level_bed_corners);
     _lcd_goto_next_corner();
   }
 }
 
 void _lcd_level_bed_corners() {
-  set_defer_return_to_status(true);
+  ui.defer_status_screen(true);
   if (!all_axes_known()) {
     set_all_unhomed();
     enqueue_and_echo_commands_P(PSTR("G28"));
   }
-  lcd_goto_screen(_lcd_level_bed_corners_homing);
+  ui.goto_screen(_lcd_level_bed_corners_homing);
 }
 
 #endif // HAS_LCD_MENU && LEVEL_BED_CORNERS

commit e574f015680f88137b2ccb0fa159ebd5749c26fb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Nov 6 19:25:57 2018 -0600

    More advanced pause tweaks (#12356)
    
    * Followup to LCD_TIMEOUT_TO_STATUS=0
    * Make continuous purge screen fit 20x4
    * Unify purge message modes
    * Preserve last-set pause header mode

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
index 92b129637f..0d51ef346d 100644
--- a/Marlin/src/lcd/menu/menu_bed_corners.cpp
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -91,7 +91,7 @@ void _lcd_level_bed_corners_homing() {
 }
 
 void _lcd_level_bed_corners() {
-  defer_return_to_status = true;
+  set_defer_return_to_status(true);
   if (!all_axes_known()) {
     set_all_unhomed();
     enqueue_and_echo_commands_P(PSTR("G28"));

commit 2cff0d1f39061e2309510da0dbc8b21975f965c6
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 31 17:08:21 2018 -0500

    Move menu_level_bed_corners to its own file

diff --git a/Marlin/src/lcd/menu/menu_bed_corners.cpp b/Marlin/src/lcd/menu/menu_bed_corners.cpp
new file mode 100644
index 0000000000..92b129637f
--- /dev/null
+++ b/Marlin/src/lcd/menu/menu_bed_corners.cpp
@@ -0,0 +1,102 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+//
+// Level Bed Corners menu
+//
+
+#include "../../inc/MarlinConfigPre.h"
+
+#if HAS_LCD_MENU && ENABLED(LEVEL_BED_CORNERS)
+
+#include "menu.h"
+#include "../../module/motion.h"
+#include "../../module/planner.h"
+
+/**
+ * Level corners, starting in the front-left corner.
+ */
+static int8_t bed_corner;
+void _lcd_goto_next_corner() {
+  line_to_z(4.0);
+  switch (bed_corner) {
+    case 0:
+      current_position[X_AXIS] = X_MIN_BED + LEVEL_CORNERS_INSET;
+      current_position[Y_AXIS] = Y_MIN_BED + LEVEL_CORNERS_INSET;
+      break;
+    case 1:
+      current_position[X_AXIS] = X_MAX_BED - LEVEL_CORNERS_INSET;
+      break;
+    case 2:
+      current_position[Y_AXIS] = Y_MAX_BED - LEVEL_CORNERS_INSET;
+      break;
+    case 3:
+      current_position[X_AXIS] = X_MIN_BED + LEVEL_CORNERS_INSET;
+      break;
+    #if ENABLED(LEVEL_CENTER_TOO)
+      case 4:
+        current_position[X_AXIS] = X_CENTER;
+        current_position[Y_AXIS] = Y_CENTER;
+        break;
+    #endif
+  }
+  planner.buffer_line(current_position, MMM_TO_MMS(manual_feedrate_mm_m[X_AXIS]), active_extruder);
+  line_to_z(0.0);
+  if (++bed_corner > 3
+    #if ENABLED(LEVEL_CENTER_TOO)
+      + 1
+    #endif
+  ) bed_corner = 0;
+}
+
+void menu_level_bed_corners() {
+  START_MENU();
+  MENU_ITEM(function,
+    #if ENABLED(LEVEL_CENTER_TOO)
+      MSG_LEVEL_BED_NEXT_POINT
+    #else
+      MSG_NEXT_CORNER
+    #endif
+    , _lcd_goto_next_corner);
+  MENU_ITEM(function, MSG_BACK, lcd_goto_previous_menu_no_defer);
+  END_MENU();
+}
+
+void _lcd_level_bed_corners_homing() {
+  _lcd_draw_homing();
+  if (all_axes_homed()) {
+    bed_corner = 0;
+    lcd_goto_screen(menu_level_bed_corners);
+    _lcd_goto_next_corner();
+  }
+}
+
+void _lcd_level_bed_corners() {
+  defer_return_to_status = true;
+  if (!all_axes_known()) {
+    set_all_unhomed();
+    enqueue_and_echo_commands_P(PSTR("G28"));
+  }
+  lcd_goto_screen(_lcd_level_bed_corners_homing);
+}
+
+#endif // HAS_LCD_MENU && LEVEL_BED_CORNERS
