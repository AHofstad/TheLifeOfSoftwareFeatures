commit b17d3d3e9c68032d4b7e4ad03a7f65fb9f0fd5d0
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sat Dec 2 04:25:57 2023 +1300

    üßë‚Äçüíª More num-to-string digits / precisions (#26343)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index f8af09ebee..fde07e8368 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -40,7 +40,7 @@ const char* ui8tostr3rj(const uint8_t i);
 const char* i8tostr3rj(const int8_t x);
 
 #if HAS_PRINT_PROGRESS_PERMYRIAD
-  // Convert 16-bit unsigned permyriad value to percent: 100 / 23 / 23.4 / 3.45
+  // Convert 16-bit unsigned permyriad value to percent: _100 / __23 / 23.4 / 3.45
   const char* permyriadtostr4(const uint16_t xx);
 #endif
 
@@ -86,22 +86,34 @@ const char* ftostr53_63(const_float_t x);
 // Convert signed float to fixed-length string with 023.456 / -23.456 format
 const char* ftostr63(const_float_t x);
 
-// Convert float to fixed-length string with +12.3 / -12.3 format
+// Convert signed float to fixed-length string with +12.3 / -12.3 format
 const char* ftostr31sign(const_float_t x);
 
-// Convert float to fixed-length string with +123.4 / -123.4 format
+// Convert signed float to fixed-length string with +123.4 / -123.4 format
 const char* ftostr41sign(const_float_t x);
 
+// Convert signed float to fixed-length string with +1234.5 / +1234.5 format
+const char* ftostr51sign(const_float_t x);
+
 // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
 const char* ftostr43sign(const_float_t x, char plus=' ');
 
+// Convert signed float to string (7 chars) with -12.345 / _00.000 / +12.345 format
+const char* ftostr53sign(const_float_t x, char plus=' ');
+
 // Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format
 const char* ftostr54sign(const_float_t x, char plus=' ');
 
 // Convert unsigned float to rj string with 12345 format
 const char* ftostr5rj(const_float_t x);
 
-// Convert signed float to string with +1234.5 format
+// Convert signed float to fixed-length string with +12.3 / -12.3 format
+const char* ftostr31sign(const_float_t x);
+
+// Convert signed float to fixed-length string with +123.4 / -123.4 format
+const char* ftostr41sign(const_float_t x);
+
+// Convert signed float to fixed-length string with +1234.5 format
 const char* ftostr51sign(const_float_t x);
 
 // Convert signed float to space-padded string with -_23.4_ format
@@ -110,23 +122,41 @@ const char* ftostr52sp(const_float_t x);
 // Convert signed float to string with +123.45 format
 const char* ftostr52sign(const_float_t x);
 
-// Convert signed float to string with +12.345 format
-const char* ftostr53sign(const_float_t f);
+// Convert unsigned float to string with _2.3 / 12.3 format
+const char* ftostr31rj(const_float_t x);
 
-// Convert unsigned float to string with 12345.6 format omitting trailing zeros
+// Convert unsigned float to string with __3.4 / _23.4 / 123.4 format
+const char* ftostr41rj(const_float_t x);
+
+// Convert unsigned float to string with ___4.5 / __34.5 / _234.5 / 1234.5 format
+const char* ftostr51rj(const_float_t x);
+
+// Convert unsigned float to string with ____5.6 / ___45.6 / __345.6 / _2345.6 / 12345.6 format
 const char* ftostr61rj(const_float_t x);
 
-// Convert unsigned float to string with 12345.67 format omitting trailing zeros
+// Convert unsigned float to string with 1.23 format
+const char* ftostr32rj(const_float_t f);
+
+// Convert unsigned float to string with _2.34, 12.34 format
+const char* ftostr42rj(const_float_t f);
+
+// Convert unsigned float to string with __3.45, _23.45, 123.45 format
+const char* ftostr52rj(const_float_t f);
+
+// Convert unsigned float to string with ___4.56, __34.56, _234.56, 1234.56 format
+const char* ftostr62rj(const_float_t f);
+
+// Convert unsigned float to string with ____5.67, ___45.67, __345.67, _2345.67, 12345.67 format
 const char* ftostr72rj(const_float_t x);
 
-// Convert float to rj string with 123 or -12 format
+// Convert signed float to rj string with 123 or -12 format
 FORCE_INLINE const char* ftostr3rj(const_float_t x) { return i16tostr3rj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 
 #if ENABLED(LCD_DECIMAL_SMALL_XY)
-  // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
+  // Convert signed float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
   const char* ftostr4sign(const_float_t fx);
 #else
-  // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
+  // Convert signed float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
   FORCE_INLINE const char* ftostr4sign(const_float_t x) { return i16tostr4signrj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 #endif
 

commit fadd60441e020e9dcdd53cb592a089e1a06d3189
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue May 16 01:28:04 2023 -0500

    ü©π Improve edit menu rounding

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index 31e8db0048..f8af09ebee 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -120,7 +120,7 @@ const char* ftostr61rj(const_float_t x);
 const char* ftostr72rj(const_float_t x);
 
 // Convert float to rj string with 123 or -12 format
-FORCE_INLINE const char* ftostr3(const_float_t x) { return i16tostr3rj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
+FORCE_INLINE const char* ftostr3rj(const_float_t x) { return i16tostr3rj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 
 #if ENABLED(LCD_DECIMAL_SMALL_XY)
   // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format

commit 0021a58943721a81b1ef23fa5e7366cfd80a3d28
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Sun Mar 26 04:07:25 2023 -0500

    ‚ú® AnyCubic Vyper / Vyper LCD (#25405)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index 0c8ce0f79a..31e8db0048 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -129,3 +129,9 @@ FORCE_INLINE const char* ftostr3(const_float_t x) { return i16tostr3rj(int16_t(x
   // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
   FORCE_INLINE const char* ftostr4sign(const_float_t x) { return i16tostr4signrj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 #endif
+
+// Convert unsigned int to string 1, 12, 123 format, capped at 999
+const char* utostr3(const uint16_t x);
+
+// Convert signed float to space-padded string with 1.23, 12.34, 123.45 format
+const char* ftostr52sprj(const_float_t f);

commit c950f0f5d1e6804365506d1718e0a4029fb232cf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Feb 19 11:41:50 2023 -0600

    üßë‚Äçüíª ExtUI::onPowerLoss

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index 047b22cd17..0c8ce0f79a 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -56,7 +56,7 @@ const char* ui16tostr3rj(const uint16_t x);
 // Convert int16_t to string with 123 format
 const char* i16tostr3rj(const int16_t x);
 
-// Convert unsigned int to lj string with 123 format
+// Convert signed int to lj string with 123 format
 const char* i16tostr3left(const int16_t xx);
 
 // Convert signed int to rj string with _123, -123, _-12, or __-1 format

commit 4f7df32b775bcf7f196f73602df2a8281e60e55b
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Sun Jan 1 04:03:50 2023 +0100

    üö∏ MarlinUI edit steps/mm to 2 decimal places (#25144)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index 1704d35e88..047b22cd17 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -116,6 +116,9 @@ const char* ftostr53sign(const_float_t f);
 // Convert unsigned float to string with 12345.6 format omitting trailing zeros
 const char* ftostr61rj(const_float_t x);
 
+// Convert unsigned float to string with 12345.67 format omitting trailing zeros
+const char* ftostr72rj(const_float_t x);
+
 // Convert float to rj string with 123 or -12 format
 FORCE_INLINE const char* ftostr3(const_float_t x) { return i16tostr3rj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 

commit 755c196cfa92fa1b9e139d39e83e490305822212
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Mar 4 15:18:27 2022 -0600

    üö∏ 12345.6 num-to-string

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index b058f3cdf6..1704d35e88 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -113,8 +113,8 @@ const char* ftostr52sign(const_float_t x);
 // Convert signed float to string with +12.345 format
 const char* ftostr53sign(const_float_t f);
 
-// Convert unsigned float to string with 1234.5 format omitting trailing zeros
-const char* ftostr51rj(const_float_t x);
+// Convert unsigned float to string with 12345.6 format omitting trailing zeros
+const char* ftostr61rj(const_float_t x);
 
 // Convert float to rj string with 123 or -12 format
 FORCE_INLINE const char* ftostr3(const_float_t x) { return i16tostr3rj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }

commit d320545066676338d4a0142268931bb66eedfccc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jun 8 07:51:28 2021 -0500

    üé® Laser Ammeter followup (#22079)
    
    Followup to #21835

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index 5ebf6e1b22..b058f3cdf6 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -74,9 +74,6 @@ const char* ftostr31ns(const_float_t x);
 // Convert unsigned float to string with 123.4 format
 const char* ftostr41ns(const_float_t x);
 
-// Convert unsigned float to string with 123 format
-const char* ftostr3ns(const_float_t x);
-
 // Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
 const char* ftostr42_52(const_float_t x);
 

commit 002e1d49fe7e39ca82730876f0a384bb60ce4190
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Mon Jun 7 14:15:09 2021 -0500

    Add Laser Based I2C Ammeter Feature (#21835)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index b058f3cdf6..5ebf6e1b22 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -74,6 +74,9 @@ const char* ftostr31ns(const_float_t x);
 // Convert unsigned float to string with 123.4 format
 const char* ftostr41ns(const_float_t x);
 
+// Convert unsigned float to string with 123 format
+const char* ftostr3ns(const_float_t x);
+
 // Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
 const char* ftostr42_52(const_float_t x);
 

commit 62f37669dc506a6e579389ca549ce5993548944d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Apr 1 17:59:57 2021 -0500

    Replace 'const float &' with 'const_float_t' (#21505)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index 54cebab252..b058f3cdf6 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -21,7 +21,8 @@
  */
 #pragma once
 
-#include <stdint.h>
+#include "../inc/MarlinConfigPre.h"
+#include "../core/types.h"
 
 // Format uint8_t (0-100) as rj string with 123% / _12% / __1% format
 const char* pcttostrpctrj(const uint8_t i);
@@ -62,70 +63,66 @@ const char* i16tostr3left(const int16_t xx);
 const char* i16tostr4signrj(const int16_t x);
 
 // Convert unsigned float to string with 1.2 format
-const char* ftostr11ns(const float &x);
+const char* ftostr11ns(const_float_t x);
 
 // Convert unsigned float to string with 1.23 format
-const char* ftostr12ns(const float &x);
+const char* ftostr12ns(const_float_t x);
 
 // Convert unsigned float to string with 12.3 format
-const char* ftostr31ns(const float &x);
+const char* ftostr31ns(const_float_t x);
 
 // Convert unsigned float to string with 123.4 format
-const char* ftostr41ns(const float &x);
+const char* ftostr41ns(const_float_t x);
 
 // Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
-const char* ftostr42_52(const float &x);
+const char* ftostr42_52(const_float_t x);
 
 // Convert signed float to fixed-length string with 023.45 / -23.45 format
-const char* ftostr52(const float &x);
+const char* ftostr52(const_float_t x);
 
 // Convert signed float to fixed-length string with 12.345 / -2.345 or 023.456 / -23.456 format
-const char* ftostr53_63(const float &x);
+const char* ftostr53_63(const_float_t x);
 
 // Convert signed float to fixed-length string with 023.456 / -23.456 format
-const char* ftostr63(const float &x);
+const char* ftostr63(const_float_t x);
 
 // Convert float to fixed-length string with +12.3 / -12.3 format
-const char* ftostr31sign(const float &x);
+const char* ftostr31sign(const_float_t x);
 
 // Convert float to fixed-length string with +123.4 / -123.4 format
-const char* ftostr41sign(const float &x);
+const char* ftostr41sign(const_float_t x);
 
 // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
-const char* ftostr43sign(const float &x, char plus=' ');
+const char* ftostr43sign(const_float_t x, char plus=' ');
 
 // Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format
-const char* ftostr54sign(const float &x, char plus=' ');
+const char* ftostr54sign(const_float_t x, char plus=' ');
 
 // Convert unsigned float to rj string with 12345 format
-const char* ftostr5rj(const float &x);
+const char* ftostr5rj(const_float_t x);
 
 // Convert signed float to string with +1234.5 format
-const char* ftostr51sign(const float &x);
+const char* ftostr51sign(const_float_t x);
 
 // Convert signed float to space-padded string with -_23.4_ format
-const char* ftostr52sp(const float &x);
+const char* ftostr52sp(const_float_t x);
 
 // Convert signed float to string with +123.45 format
-const char* ftostr52sign(const float &x);
+const char* ftostr52sign(const_float_t x);
 
 // Convert signed float to string with +12.345 format
-const char* ftostr53sign(const float &f);
+const char* ftostr53sign(const_float_t f);
 
 // Convert unsigned float to string with 1234.5 format omitting trailing zeros
-const char* ftostr51rj(const float &x);
-
-#include "../core/macros.h"
+const char* ftostr51rj(const_float_t x);
 
 // Convert float to rj string with 123 or -12 format
-FORCE_INLINE const char* ftostr3(const float &x) { return i16tostr3rj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
-
-#include "../inc/MarlinConfigPre.h"
+FORCE_INLINE const char* ftostr3(const_float_t x) { return i16tostr3rj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 
 #if ENABLED(LCD_DECIMAL_SMALL_XY)
   // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
-  const char* ftostr4sign(const float &fx);
+  const char* ftostr4sign(const_float_t fx);
 #else
   // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
-  FORCE_INLINE const char* ftostr4sign(const float &x) { return i16tostr4signrj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
+  FORCE_INLINE const char* ftostr4sign(const_float_t x) { return i16tostr4signrj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 #endif

commit ccdbffbf3f599f0860c643647ce6c40f1eb5a4cd
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Mon Mar 29 01:41:56 2021 -0500

    Laser Coolant Flow Meter / Safety Shutdown (#21431)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index 40c298af42..54cebab252 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -61,6 +61,9 @@ const char* i16tostr3left(const int16_t xx);
 // Convert signed int to rj string with _123, -123, _-12, or __-1 format
 const char* i16tostr4signrj(const int16_t x);
 
+// Convert unsigned float to string with 1.2 format
+const char* ftostr11ns(const float &x);
+
 // Convert unsigned float to string with 1.23 format
 const char* ftostr12ns(const float &x);
 

commit 1fc0dcdc9701146d7e8b126bb3ba0517c172e484
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Wed Dec 23 22:50:24 2020 -0600

    Cutter Power in percent format (#20410)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>
    Co-authored-by: Jason Smith <jason.inet@gmail.com>
    Co-authored-by: Luu Lac <45380455+shitcreek@users.noreply.github.com>

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index e7c1e67e12..40c298af42 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -23,7 +23,10 @@
 
 #include <stdint.h>
 
-// Convert a full-range unsigned 8bit int to a percentage
+// Format uint8_t (0-100) as rj string with 123% / _12% / __1% format
+const char* pcttostrpctrj(const uint8_t i);
+
+// Convert uint8_t (0-255) to a percentage, format as above
 const char* ui8tostr4pctrj(const uint8_t i);
 
 // Convert uint8_t to string with 12 format

commit 60155aa442f7dbd1654fd493ca3d66edb2ed99f0
Author: Nick <nick@n-wells.co.uk>
Date:   Tue Sep 29 00:53:40 2020 +0100

    Anycubic Chiron full feature support (#19505)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index e52a7d9889..e7c1e67e12 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -26,6 +26,9 @@
 // Convert a full-range unsigned 8bit int to a percentage
 const char* ui8tostr4pctrj(const uint8_t i);
 
+// Convert uint8_t to string with 12 format
+const char* ui8tostr2(const uint8_t x);
+
 // Convert uint8_t to string with 123 format
 const char* ui8tostr3rj(const uint8_t i);
 

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index 7943ba0dc3..e52a7d9889 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once

commit 0e1cb10909b47d939d0766c35cdd3cbbd1d37def
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 13 19:59:32 2020 -0500

    Fix / improve menu items (#18644)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index ab340f52cd..7943ba0dc3 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -76,6 +76,9 @@ const char* ftostr53_63(const float &x);
 // Convert signed float to fixed-length string with 023.456 / -23.456 format
 const char* ftostr63(const float &x);
 
+// Convert float to fixed-length string with +12.3 / -12.3 format
+const char* ftostr31sign(const float &x);
+
 // Convert float to fixed-length string with +123.4 / -123.4 format
 const char* ftostr41sign(const float &x);
 

commit 424569b4c4bf112a3939724b30bad528a76a2b08
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jun 18 15:23:03 2020 -0500

    Power monitor and display (#17437)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index 8b6b83391f..ab340f52cd 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -58,6 +58,12 @@ const char* i16tostr4signrj(const int16_t x);
 // Convert unsigned float to string with 1.23 format
 const char* ftostr12ns(const float &x);
 
+// Convert unsigned float to string with 12.3 format
+const char* ftostr31ns(const float &x);
+
+// Convert unsigned float to string with 123.4 format
+const char* ftostr41ns(const float &x);
+
 // Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
 const char* ftostr42_52(const float &x);
 

commit 1f5824247f632af71b1725f8bb41e66f55b14919
Author: Joe Prints <33383148+JoePrints@users.noreply.github.com>
Date:   Tue Mar 17 15:12:52 2020 -0500

    More decimal places for babystep / Z probe offset (#17195)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index d5453e8176..8b6b83391f 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -58,17 +58,17 @@ const char* i16tostr4signrj(const int16_t x);
 // Convert unsigned float to string with 1.23 format
 const char* ftostr12ns(const float &x);
 
-// Convert signed float to fixed-length string with 12.34 / -2.34 or 023.45 / -23.45 format
+// Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
 const char* ftostr42_52(const float &x);
 
 // Convert signed float to fixed-length string with 023.45 / -23.45 format
 const char* ftostr52(const float &x);
 
 // Convert signed float to fixed-length string with 12.345 / -2.345 or 023.456 / -23.456 format
-const char* ftostr43_53(const float &x);
+const char* ftostr53_63(const float &x);
 
 // Convert signed float to fixed-length string with 023.456 / -23.456 format
-const char* ftostr53(const float &x);
+const char* ftostr63(const float &x);
 
 // Convert float to fixed-length string with +123.4 / -123.4 format
 const char* ftostr41sign(const float &x);
@@ -91,6 +91,9 @@ const char* ftostr52sp(const float &x);
 // Convert signed float to string with +123.45 format
 const char* ftostr52sign(const float &x);
 
+// Convert signed float to string with +12.345 format
+const char* ftostr53sign(const float &f);
+
 // Convert unsigned float to string with 1234.5 format omitting trailing zeros
 const char* ftostr51rj(const float &x);
 

commit 13118dbd8d9142d7698ca113cb05d1feae3b1bd3
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 8 19:42:18 2020 -0500

    Additional numtostr functions

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index ee29b26ab0..d5453e8176 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -24,13 +24,13 @@
 #include <stdint.h>
 
 // Convert a full-range unsigned 8bit int to a percentage
-const char* ui8tostr4pct(const uint8_t i);
+const char* ui8tostr4pctrj(const uint8_t i);
 
 // Convert uint8_t to string with 123 format
-const char* ui8tostr3(const uint8_t i);
+const char* ui8tostr3rj(const uint8_t i);
 
 // Convert int8_t to string with 123 format
-const char* i8tostr3(const int8_t x);
+const char* i8tostr3rj(const int8_t x);
 
 #if HAS_PRINT_PROGRESS_PERMYRIAD
   // Convert 16-bit unsigned permyriad value to percent: 100 / 23 / 23.4 / 3.45
@@ -38,22 +38,22 @@ const char* i8tostr3(const int8_t x);
 #endif
 
 // Convert uint16_t to string with 12345 format
-const char* ui16tostr5(const uint16_t x);
+const char* ui16tostr5rj(const uint16_t x);
 
 // Convert uint16_t to string with 1234 format
-const char* ui16tostr4(const uint16_t x);
+const char* ui16tostr4rj(const uint16_t x);
 
 // Convert uint16_t to string with 123 format
-const char* ui16tostr3(const uint16_t x);
+const char* ui16tostr3rj(const uint16_t x);
 
 // Convert int16_t to string with 123 format
-const char* i16tostr3(const int16_t x);
+const char* i16tostr3rj(const int16_t x);
 
 // Convert unsigned int to lj string with 123 format
 const char* i16tostr3left(const int16_t xx);
 
 // Convert signed int to rj string with _123, -123, _-12, or __-1 format
-const char* i16tostr4sign(const int16_t x);
+const char* i16tostr4signrj(const int16_t x);
 
 // Convert unsigned float to string with 1.23 format
 const char* ftostr12ns(const float &x);
@@ -64,6 +64,12 @@ const char* ftostr42_52(const float &x);
 // Convert signed float to fixed-length string with 023.45 / -23.45 format
 const char* ftostr52(const float &x);
 
+// Convert signed float to fixed-length string with 12.345 / -2.345 or 023.456 / -23.456 format
+const char* ftostr43_53(const float &x);
+
+// Convert signed float to fixed-length string with 023.456 / -23.456 format
+const char* ftostr53(const float &x);
+
 // Convert float to fixed-length string with +123.4 / -123.4 format
 const char* ftostr41sign(const float &x);
 
@@ -91,7 +97,7 @@ const char* ftostr51rj(const float &x);
 #include "../core/macros.h"
 
 // Convert float to rj string with 123 or -12 format
-FORCE_INLINE const char* ftostr3(const float &x) { return i16tostr3(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
+FORCE_INLINE const char* ftostr3(const float &x) { return i16tostr3rj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 
 #include "../inc/MarlinConfigPre.h"
 
@@ -100,5 +106,5 @@ FORCE_INLINE const char* ftostr3(const float &x) { return i16tostr3(int16_t(x +
   const char* ftostr4sign(const float &fx);
 #else
   // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
-  FORCE_INLINE const char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
+  FORCE_INLINE const char* ftostr4sign(const float &x) { return i16tostr4signrj(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 #endif

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index f18df094a3..ee29b26ab0 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit 1df90aaf0ef50efedbb0e238b44cf0eabdcc7abc
Author: Haxk20 <16738302+Haxk20@users.noreply.github.com>
Date:   Fri Oct 11 15:45:15 2019 +0200

    Followup to num2str update (#15518)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index e1b725f639..f18df094a3 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -97,7 +97,7 @@ FORCE_INLINE const char* ftostr3(const float &x) { return i16tostr3(int16_t(x +
 
 #if ENABLED(LCD_DECIMAL_SMALL_XY)
   // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
-  char* ftostr4sign(const float &fx);
+  const char* ftostr4sign(const float &fx);
 #else
   // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
   FORCE_INLINE const char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }

commit b20d5a7cc627164877c95859baaa614f8afc7b99
Author: LinFor <linfor@gmail.com>
Date:   Fri Oct 11 05:03:33 2019 +0300

    Estimate Remaining Time (graphical display) (#15497)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index 6af2ac4869..e1b725f639 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -24,69 +24,74 @@
 #include <stdint.h>
 
 // Convert a full-range unsigned 8bit int to a percentage
-char* ui8tostr4pct(const uint8_t i);
+const char* ui8tostr4pct(const uint8_t i);
 
 // Convert uint8_t to string with 123 format
-char* ui8tostr3(const uint8_t i);
+const char* ui8tostr3(const uint8_t i);
 
 // Convert int8_t to string with 123 format
-char* i8tostr3(const int8_t x);
+const char* i8tostr3(const int8_t x);
+
+#if HAS_PRINT_PROGRESS_PERMYRIAD
+  // Convert 16-bit unsigned permyriad value to percent: 100 / 23 / 23.4 / 3.45
+  const char* permyriadtostr4(const uint16_t xx);
+#endif
 
 // Convert uint16_t to string with 12345 format
-char* ui16tostr5(const uint16_t x);
+const char* ui16tostr5(const uint16_t x);
 
 // Convert uint16_t to string with 1234 format
-char* ui16tostr4(const uint16_t x);
+const char* ui16tostr4(const uint16_t x);
 
 // Convert uint16_t to string with 123 format
-char* ui16tostr3(const uint16_t x);
+const char* ui16tostr3(const uint16_t x);
 
 // Convert int16_t to string with 123 format
-char* i16tostr3(const int16_t x);
+const char* i16tostr3(const int16_t x);
 
 // Convert unsigned int to lj string with 123 format
-char* i16tostr3left(const int16_t xx);
+const char* i16tostr3left(const int16_t xx);
 
 // Convert signed int to rj string with _123, -123, _-12, or __-1 format
-char* i16tostr4sign(const int16_t x);
+const char* i16tostr4sign(const int16_t x);
 
 // Convert unsigned float to string with 1.23 format
-char* ftostr12ns(const float &x);
+const char* ftostr12ns(const float &x);
 
 // Convert signed float to fixed-length string with 12.34 / -2.34 or 023.45 / -23.45 format
-char* ftostr42_52(const float &x);
+const char* ftostr42_52(const float &x);
 
 // Convert signed float to fixed-length string with 023.45 / -23.45 format
-char* ftostr52(const float &x);
+const char* ftostr52(const float &x);
 
 // Convert float to fixed-length string with +123.4 / -123.4 format
-char* ftostr41sign(const float &x);
+const char* ftostr41sign(const float &x);
 
 // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
-char* ftostr43sign(const float &x, char plus=' ');
+const char* ftostr43sign(const float &x, char plus=' ');
 
 // Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format
-char* ftostr54sign(const float &x, char plus=' ');
+const char* ftostr54sign(const float &x, char plus=' ');
 
 // Convert unsigned float to rj string with 12345 format
-char* ftostr5rj(const float &x);
+const char* ftostr5rj(const float &x);
 
 // Convert signed float to string with +1234.5 format
-char* ftostr51sign(const float &x);
+const char* ftostr51sign(const float &x);
 
 // Convert signed float to space-padded string with -_23.4_ format
-char* ftostr52sp(const float &x);
+const char* ftostr52sp(const float &x);
 
 // Convert signed float to string with +123.45 format
-char* ftostr52sign(const float &x);
+const char* ftostr52sign(const float &x);
 
 // Convert unsigned float to string with 1234.5 format omitting trailing zeros
-char* ftostr51rj(const float &x);
+const char* ftostr51rj(const float &x);
 
 #include "../core/macros.h"
 
 // Convert float to rj string with 123 or -12 format
-FORCE_INLINE char* ftostr3(const float &x) { return i16tostr3(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
+FORCE_INLINE const char* ftostr3(const float &x) { return i16tostr3(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 
 #include "../inc/MarlinConfigPre.h"
 
@@ -95,5 +100,5 @@ FORCE_INLINE char* ftostr3(const float &x) { return i16tostr3(int16_t(x + (x < 0
   char* ftostr4sign(const float &fx);
 #else
   // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
-  FORCE_INLINE char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
+  FORCE_INLINE const char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 #endif

commit 465c6d92307ec613d0b2a7355ce67a60ba23fc0c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 14 03:05:10 2019 -0500

    Simpler Allen Key config. Fixes, cleanups from refactor (#15256)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index 1c18fd6edd..6af2ac4869 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -21,7 +21,7 @@
  */
 #pragma once
 
-#include "../inc/MarlinConfigPre.h"
+#include <stdint.h>
 
 // Convert a full-range unsigned 8bit int to a percentage
 char* ui8tostr4pct(const uint8_t i);
@@ -83,9 +83,13 @@ char* ftostr52sign(const float &x);
 // Convert unsigned float to string with 1234.5 format omitting trailing zeros
 char* ftostr51rj(const float &x);
 
+#include "../core/macros.h"
+
 // Convert float to rj string with 123 or -12 format
 FORCE_INLINE char* ftostr3(const float &x) { return i16tostr3(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 
+#include "../inc/MarlinConfigPre.h"
+
 #if ENABLED(LCD_DECIMAL_SMALL_XY)
   // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
   char* ftostr4sign(const float &fx);

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index 91f88b9843..1c18fd6edd 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit d7d80418aedad1c89e27fcba6aab9aa48187b5cc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jun 27 23:06:49 2019 -0500

    Singleton for cutting tools (#14429)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index a0da4804ed..91f88b9843 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -32,12 +32,15 @@ char* ui8tostr3(const uint8_t i);
 // Convert int8_t to string with 123 format
 char* i8tostr3(const int8_t x);
 
-// Convert uint16_t to string with 123 format
-char* ui16tostr3(const uint16_t x);
+// Convert uint16_t to string with 12345 format
+char* ui16tostr5(const uint16_t x);
 
 // Convert uint16_t to string with 1234 format
 char* ui16tostr4(const uint16_t x);
 
+// Convert uint16_t to string with 123 format
+char* ui16tostr3(const uint16_t x);
+
 // Convert int16_t to string with 123 format
 char* i16tostr3(const int16_t x);
 

commit 35aabd1834fdd88258d27bec6d3e336fdfd9c325
Author: Ludy <Ludy87@users.noreply.github.com>
Date:   Tue Jun 18 01:38:43 2019 +0200

    Fix Spindle/Laser compile error (#14312)

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index ebb79d7c26..a0da4804ed 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -27,7 +27,7 @@
 char* ui8tostr4pct(const uint8_t i);
 
 // Convert uint8_t to string with 123 format
-char* ui8tostr3(const uint8_t x);
+char* ui8tostr3(const uint8_t i);
 
 // Convert int8_t to string with 123 format
 char* i8tostr3(const int8_t x);

commit 2a96d4e23ad0090dc371710d079af731136dfe97
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jun 11 05:58:43 2019 -0500

    Move number-to-string functions to libs

diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
new file mode 100644
index 0000000000..ebb79d7c26
--- /dev/null
+++ b/Marlin/src/libs/numtostr.h
@@ -0,0 +1,92 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+#include "../inc/MarlinConfigPre.h"
+
+// Convert a full-range unsigned 8bit int to a percentage
+char* ui8tostr4pct(const uint8_t i);
+
+// Convert uint8_t to string with 123 format
+char* ui8tostr3(const uint8_t x);
+
+// Convert int8_t to string with 123 format
+char* i8tostr3(const int8_t x);
+
+// Convert uint16_t to string with 123 format
+char* ui16tostr3(const uint16_t x);
+
+// Convert uint16_t to string with 1234 format
+char* ui16tostr4(const uint16_t x);
+
+// Convert int16_t to string with 123 format
+char* i16tostr3(const int16_t x);
+
+// Convert unsigned int to lj string with 123 format
+char* i16tostr3left(const int16_t xx);
+
+// Convert signed int to rj string with _123, -123, _-12, or __-1 format
+char* i16tostr4sign(const int16_t x);
+
+// Convert unsigned float to string with 1.23 format
+char* ftostr12ns(const float &x);
+
+// Convert signed float to fixed-length string with 12.34 / -2.34 or 023.45 / -23.45 format
+char* ftostr42_52(const float &x);
+
+// Convert signed float to fixed-length string with 023.45 / -23.45 format
+char* ftostr52(const float &x);
+
+// Convert float to fixed-length string with +123.4 / -123.4 format
+char* ftostr41sign(const float &x);
+
+// Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
+char* ftostr43sign(const float &x, char plus=' ');
+
+// Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format
+char* ftostr54sign(const float &x, char plus=' ');
+
+// Convert unsigned float to rj string with 12345 format
+char* ftostr5rj(const float &x);
+
+// Convert signed float to string with +1234.5 format
+char* ftostr51sign(const float &x);
+
+// Convert signed float to space-padded string with -_23.4_ format
+char* ftostr52sp(const float &x);
+
+// Convert signed float to string with +123.45 format
+char* ftostr52sign(const float &x);
+
+// Convert unsigned float to string with 1234.5 format omitting trailing zeros
+char* ftostr51rj(const float &x);
+
+// Convert float to rj string with 123 or -12 format
+FORCE_INLINE char* ftostr3(const float &x) { return i16tostr3(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
+
+#if ENABLED(LCD_DECIMAL_SMALL_XY)
+  // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
+  char* ftostr4sign(const float &fx);
+#else
+  // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
+  FORCE_INLINE char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
+#endif
