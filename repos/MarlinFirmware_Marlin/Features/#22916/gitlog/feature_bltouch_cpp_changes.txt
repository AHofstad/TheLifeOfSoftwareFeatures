commit f5c7b190f6169f0a213ef4b088e9c4b5ef33b2b8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Apr 11 23:22:36 2023 -0500

    üêõ Fix BLTOUCH_HS_MODE config

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 1c6c1eb4aa..02f76c1392 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -22,21 +22,21 @@
 
 #include "../inc/MarlinConfig.h"
 
 #if ENABLED(BLTOUCH)
 
 #include "bltouch.h"
 
 BLTouch bltouch;
 
 bool BLTouch::od_5v_mode;         // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
-#ifdef BLTOUCH_HS_MODE
+#if HAS_BLTOUCH_HS_MODE
   bool BLTouch::high_speed_mode;  // Initialized by settings.load, 0 = Low Speed; 1 = High Speed
 #else
   constexpr bool BLTouch::high_speed_mode;
 #endif
 
 #include "../module/servo.h"
 #include "../module/probe.h"
 
 #define DEBUG_OUT ENABLED(DEBUG_LEVELING_FEATURE)
 #include "../core/debug_out.h"

commit 54aef53c4d413e9fab2151cc2c85467902c65955
Author: David Fries <David@Fries.net>
Date:   Mon Apr 10 04:38:38 2023 -0500

    ‚ö°Ô∏è Skip a redundant BLTouch::command (#25656)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index fe56341a47..1c6c1eb4aa 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -35,23 +35,28 @@ bool BLTouch::od_5v_mode;         // Initialized by settings.load, 0 = Open Drai
   constexpr bool BLTouch::high_speed_mode;
 #endif
 
 #include "../module/servo.h"
 #include "../module/probe.h"
 
 #define DEBUG_OUT ENABLED(DEBUG_LEVELING_FEATURE)
 #include "../core/debug_out.h"
 
 bool BLTouch::command(const BLTCommand cmd, const millis_t &ms) {
-  if (DEBUGGING(LEVELING)) SERIAL_ECHOLNPGM("BLTouch Command :", cmd);
-  servo[Z_PROBE_SERVO_NR].move(cmd);
-  safe_delay(_MAX(ms, (uint32_t)BLTOUCH_DELAY)); // BLTOUCH_DELAY is also the *minimum* delay
+  const BLTCommand current = servo[Z_PROBE_SERVO_NR].read();
+  if (DEBUGGING(LEVELING)) SERIAL_ECHOLNPGM("BLTouch from ", current, " to ", cmd);
+  // If the new command is the same, skip it (and the delay).
+  // The previous write should've already delayed to detect the alarm.
+  if (cmd != current) {
+    servo[Z_PROBE_SERVO_NR].move(cmd);
+    safe_delay(_MAX(ms, (uint32_t)BLTOUCH_DELAY)); // BLTOUCH_DELAY is also the *minimum* delay
+  }
   return triggered();
 }
 
 // Init the class and device. Call from setup().
 void BLTouch::init(const bool set_voltage/*=false*/) {
   // Voltage Setting (if enabled). At every Marlin initialization:
   // BLTOUCH < V3.0 and clones: This will be ignored by the probe
   // BLTOUCH V3.0: SET_5V_MODE or SET_OD_MODE (if enabled).
   //               OD_MODE is the default on power on, but setting it does not hurt
   //               This mode will stay active until manual SET_OD_MODE or power cycle

commit b6794f6a7e076d3276a3589dbcd4ebc3eea1a44e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Dec 1 23:39:17 2022 -0600

    üé® Misc. cleanup

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 10d3131aed..fe56341a47 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -31,22 +31,20 @@ BLTouch bltouch;
 bool BLTouch::od_5v_mode;         // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
 #ifdef BLTOUCH_HS_MODE
   bool BLTouch::high_speed_mode;  // Initialized by settings.load, 0 = Low Speed; 1 = High Speed
 #else
   constexpr bool BLTouch::high_speed_mode;
 #endif
 
 #include "../module/servo.h"
 #include "../module/probe.h"
 
-void stop();
-
 #define DEBUG_OUT ENABLED(DEBUG_LEVELING_FEATURE)
 #include "../core/debug_out.h"
 
 bool BLTouch::command(const BLTCommand cmd, const millis_t &ms) {
   if (DEBUGGING(LEVELING)) SERIAL_ECHOLNPGM("BLTouch Command :", cmd);
   servo[Z_PROBE_SERVO_NR].move(cmd);
   safe_delay(_MAX(ms, (uint32_t)BLTOUCH_DELAY)); // BLTOUCH_DELAY is also the *minimum* delay
   return triggered();
 }
 

commit e4e6abe5af0f97ff5cb0c9334cb298d3584968e3
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 9 00:51:08 2022 -0500

    üßë‚Äçüíª Remove servo macros

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index d911fae6ae..10d3131aed 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -38,21 +38,21 @@ bool BLTouch::od_5v_mode;         // Initialized by settings.load, 0 = Open Drai
 #include "../module/servo.h"
 #include "../module/probe.h"
 
 void stop();
 
 #define DEBUG_OUT ENABLED(DEBUG_LEVELING_FEATURE)
 #include "../core/debug_out.h"
 
 bool BLTouch::command(const BLTCommand cmd, const millis_t &ms) {
   if (DEBUGGING(LEVELING)) SERIAL_ECHOLNPGM("BLTouch Command :", cmd);
-  MOVE_SERVO(Z_PROBE_SERVO_NR, cmd);
+  servo[Z_PROBE_SERVO_NR].move(cmd);
   safe_delay(_MAX(ms, (uint32_t)BLTOUCH_DELAY)); // BLTOUCH_DELAY is also the *minimum* delay
   return triggered();
 }
 
 // Init the class and device. Call from setup().
 void BLTouch::init(const bool set_voltage/*=false*/) {
   // Voltage Setting (if enabled). At every Marlin initialization:
   // BLTOUCH < V3.0 and clones: This will be ignored by the probe
   // BLTOUCH V3.0: SET_5V_MODE or SET_OD_MODE (if enabled).
   //               OD_MODE is the default on power on, but setting it does not hurt

commit e2353be24f2c7914c51441c2135cf2eb4cb1262d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 9 22:52:36 2022 -0500

    üé® Misc. cleanup, string optimization

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index b1cc30bee0..d911fae6ae 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -104,25 +104,22 @@ bool BLTouch::deploy_proc() {
   // Attempt to DEPLOY, wait for DEPLOY_DELAY or ALARM
   if (_deploy_query_alarm()) {
     // The deploy might have failed or the probe is already triggered (nozzle too low?)
     if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch ALARM or TRIGGER after DEPLOY, recovering");
 
     clear();                               // Get the probe into start condition
 
     // Last attempt to DEPLOY
     if (_deploy_query_alarm()) {
       // The deploy might have failed or the probe is actually triggered (nozzle too low?) again
-      if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch Recovery Failed");
-
-      SERIAL_ERROR_MSG(STR_STOP_BLTOUCH);  // Tell the user something is wrong, needs action
-      stop();                              // but it's not too bad, no need to kill, allow restart
-
+      if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch Deploy Failed");
+      probe.probe_error_stop();            // Something is wrong, needs action, but not too bad, allow restart
       return true;                         // Tell our caller we goofed in case he cares to know
     }
   }
 
   // One of the recommended ANTClabs ways to probe, using SW MODE
   TERN_(BLTOUCH_FORCE_SW_MODE, _set_SW_mode());
 
   // Now the probe is ready to issue a 10ms pulse when the pin goes up.
   // The trigger STOW (see motion.cpp for example) will pull up the probes pin as soon as the pulse
   // is registered.
@@ -146,26 +143,22 @@ bool BLTouch::stow_proc() {
   if (_stow_query_alarm()) {
     // The stow might have failed
     if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch ALARM or TRIGGER after STOW, recovering");
 
     _reset();                              // This RESET will then also pull up the pin. If it doesn't
                                            // work and the pin is still down, there will no longer be
                                            // an ALARM condition though.
                                            // But one more STOW will catch that
     // Last attempt to STOW
     if (_stow_query_alarm()) {             // so if there is now STILL an ALARM condition:
-
-      if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch Recovery Failed");
-
-      SERIAL_ERROR_MSG(STR_STOP_BLTOUCH);  // Tell the user something is wrong, needs action
-      stop();                              // but it's not too bad, no need to kill, allow restart
-
+      if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch Stow Failed");
+      probe.probe_error_stop();            // Something is wrong, needs action, but not too bad, allow restart
       return true;                         // Tell our caller we goofed in case he cares to know
     }
   }
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("bltouch.stow_proc() end");
 
   return false; // report success to caller
 }
 
 bool BLTouch::status_proc() {

commit da67deb621bcf140e2f843c030d2b2b195c39ef9
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Thu Dec 23 08:32:27 2021 +0100

    ‚úèÔ∏è Fix missing brace (#23337)
    
    Followup to #22916
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index d3348e79f0..b1cc30bee0 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -61,27 +61,29 @@ void BLTouch::init(const bool set_voltage/*=false*/) {
   //               At power on, the probe will default to the eeprom settings configured by the user
   _reset();
   _stow();
 
   #if ENABLED(BLTOUCH_FORCE_MODE_SET)
 
     constexpr bool should_set = true;
 
   #else
 
-    if (DEBUGGING(LEVELING)) {
-      PGMSTR(mode0, "OD");
-      PGMSTR(mode1, "5V");
-      DEBUG_ECHOPGM("BLTouch Mode: ");
-      DEBUG_ECHOPGM_P(bltouch.od_5v_mode ? mode1 : mode0);
-      DEBUG_ECHOLNPGM(" (Default " TERN(BLTOUCH_SET_5V_MODE, "5V", "OD") ")");
-    }
+    #ifdef DEBUG_OUT
+      if (DEBUGGING(LEVELING)) {
+        PGMSTR(mode0, "OD");
+        PGMSTR(mode1, "5V");
+        DEBUG_ECHOPGM("BLTouch Mode: ");
+        DEBUG_ECHOPGM_P(bltouch.od_5v_mode ? mode1 : mode0);
+        DEBUG_ECHOLNPGM(" (Default " TERN(BLTOUCH_SET_5V_MODE, "5V", "OD") ")");
+      }
+    #endif
 
     const bool should_set = od_5v_mode != ENABLED(BLTOUCH_SET_5V_MODE);
 
   #endif
 
   if (should_set && set_voltage)
     mode_conv_proc(ENABLED(BLTOUCH_SET_5V_MODE));
 }
 
 void BLTouch::clear() {

commit 2893048e2955963bb307a4ca67ec26bb336de2f5
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Tue Dec 21 23:09:55 2021 -0500

    ‚ú® BLTouch High Speed mode runtime configuration (#22916)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 49a10f62b1..d3348e79f0 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -21,21 +21,26 @@
  */
 
 #include "../inc/MarlinConfig.h"
 
 #if ENABLED(BLTOUCH)
 
 #include "bltouch.h"
 
 BLTouch bltouch;
 
-bool BLTouch::last_written_mode; // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
+bool BLTouch::od_5v_mode;         // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
+#ifdef BLTOUCH_HS_MODE
+  bool BLTouch::high_speed_mode;  // Initialized by settings.load, 0 = Low Speed; 1 = High Speed
+#else
+  constexpr bool BLTouch::high_speed_mode;
+#endif
 
 #include "../module/servo.h"
 #include "../module/probe.h"
 
 void stop();
 
 #define DEBUG_OUT ENABLED(DEBUG_LEVELING_FEATURE)
 #include "../core/debug_out.h"
 
 bool BLTouch::command(const BLTCommand cmd, const millis_t &ms) {
@@ -57,31 +62,28 @@ void BLTouch::init(const bool set_voltage/*=false*/) {
   _reset();
   _stow();
 
   #if ENABLED(BLTOUCH_FORCE_MODE_SET)
 
     constexpr bool should_set = true;
 
   #else
 
     if (DEBUGGING(LEVELING)) {
-      DEBUG_ECHOLNPGM("last_written_mode - ", last_written_mode);
-      DEBUG_ECHOLNPGM("config mode - "
-        #if ENABLED(BLTOUCH_SET_5V_MODE)
-          "BLTOUCH_SET_5V_MODE"
-        #else
-          "OD"
-        #endif
-      );
+      PGMSTR(mode0, "OD");
+      PGMSTR(mode1, "5V");
+      DEBUG_ECHOPGM("BLTouch Mode: ");
+      DEBUG_ECHOPGM_P(bltouch.od_5v_mode ? mode1 : mode0);
+      DEBUG_ECHOLNPGM(" (Default " TERN(BLTOUCH_SET_5V_MODE, "5V", "OD") ")");
     }
 
-    const bool should_set = last_written_mode != ENABLED(BLTOUCH_SET_5V_MODE);
+    const bool should_set = od_5v_mode != ENABLED(BLTOUCH_SET_5V_MODE);
 
   #endif
 
   if (should_set && set_voltage)
     mode_conv_proc(ENABLED(BLTOUCH_SET_5V_MODE));
 }
 
 void BLTouch::clear() {
   _reset();    // RESET or RESET_SW will clear an alarm condition but...
                // ...it will not clear a triggered condition in SW mode when the pin is currently up
@@ -186,14 +188,14 @@ void BLTouch::mode_conv_proc(const bool M5V) {
    * BLTOUCH pre V3.0 and clones: No reaction at all to this sequence apart from a DEPLOY -> STOW
    * BLTOUCH V3.0: This will set the mode (twice) and sadly, a STOW is needed at the end, because of the deploy
    * BLTOUCH V3.1: This will set the mode and store it in the eeprom. The STOW is not needed but does not hurt
    */
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch Set Mode - ", M5V);
   _deploy();
   if (M5V) _set_5V_mode(); else _set_OD_mode();
   _mode_store();
   if (M5V) _set_5V_mode(); else _set_OD_mode();
   _stow();
-  last_written_mode = M5V;
+  od_5v_mode = M5V;
 }
 
 #endif // BLTOUCH

commit 754b31918a73cb08c322102be5d3926d2ac59c18
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 9 04:57:05 2021 -0500

    üé® Fewer serial macros

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 7fccc52d05..49a10f62b1 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -32,21 +32,21 @@ bool BLTouch::last_written_mode; // Initialized by settings.load, 0 = Open Drain
 
 #include "../module/servo.h"
 #include "../module/probe.h"
 
 void stop();
 
 #define DEBUG_OUT ENABLED(DEBUG_LEVELING_FEATURE)
 #include "../core/debug_out.h"
 
 bool BLTouch::command(const BLTCommand cmd, const millis_t &ms) {
-  if (DEBUGGING(LEVELING)) SERIAL_ECHOLNPAIR("BLTouch Command :", cmd);
+  if (DEBUGGING(LEVELING)) SERIAL_ECHOLNPGM("BLTouch Command :", cmd);
   MOVE_SERVO(Z_PROBE_SERVO_NR, cmd);
   safe_delay(_MAX(ms, (uint32_t)BLTOUCH_DELAY)); // BLTOUCH_DELAY is also the *minimum* delay
   return triggered();
 }
 
 // Init the class and device. Call from setup().
 void BLTouch::init(const bool set_voltage/*=false*/) {
   // Voltage Setting (if enabled). At every Marlin initialization:
   // BLTOUCH < V3.0 and clones: This will be ignored by the probe
   // BLTOUCH V3.0: SET_5V_MODE or SET_OD_MODE (if enabled).
@@ -57,21 +57,21 @@ void BLTouch::init(const bool set_voltage/*=false*/) {
   _reset();
   _stow();
 
   #if ENABLED(BLTOUCH_FORCE_MODE_SET)
 
     constexpr bool should_set = true;
 
   #else
 
     if (DEBUGGING(LEVELING)) {
-      DEBUG_ECHOLNPAIR("last_written_mode - ", last_written_mode);
+      DEBUG_ECHOLNPGM("last_written_mode - ", last_written_mode);
       DEBUG_ECHOLNPGM("config mode - "
         #if ENABLED(BLTOUCH_SET_5V_MODE)
           "BLTOUCH_SET_5V_MODE"
         #else
           "OD"
         #endif
       );
     }
 
     const bool should_set = last_written_mode != ENABLED(BLTOUCH_SET_5V_MODE);
@@ -168,32 +168,32 @@ bool BLTouch::status_proc() {
   /**
    * Return a TRUE for "YES, it is DEPLOYED"
    * This function will ensure switch state is reset after execution
    */
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch STATUS requested");
 
   _set_SW_mode();              // Incidentally, _set_SW_mode() will also RESET any active alarm
   const bool tr = triggered(); // If triggered in SW mode, the pin is up, it is STOWED
 
-  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("BLTouch is ", tr);
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch is ", tr);
 
   if (tr) _stow(); else _deploy();  // Turn off SW mode, reset any trigger, honor pin state
   return !tr;
 }
 
 void BLTouch::mode_conv_proc(const bool M5V) {
   /**
    * BLTOUCH pre V3.0 and clones: No reaction at all to this sequence apart from a DEPLOY -> STOW
    * BLTOUCH V3.0: This will set the mode (twice) and sadly, a STOW is needed at the end, because of the deploy
    * BLTOUCH V3.1: This will set the mode and store it in the eeprom. The STOW is not needed but does not hurt
    */
-  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("BLTouch Set Mode - ", M5V);
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch Set Mode - ", M5V);
   _deploy();
   if (M5V) _set_5V_mode(); else _set_OD_mode();
   _mode_store();
   if (M5V) _set_5V_mode(); else _set_OD_mode();
   _stow();
   last_written_mode = M5V;
 }
 
 #endif // BLTOUCH

commit e7c711996bd3080f5e343eff5556736cbf2e2416
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Mon Feb 8 07:37:24 2021 +0100

    Serial refactor. Default 8-bit ECHO to int, not char (#20985)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 48eaf9efc4..7fccc52d05 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -57,21 +57,21 @@ void BLTouch::init(const bool set_voltage/*=false*/) {
   _reset();
   _stow();
 
   #if ENABLED(BLTOUCH_FORCE_MODE_SET)
 
     constexpr bool should_set = true;
 
   #else
 
     if (DEBUGGING(LEVELING)) {
-      DEBUG_ECHOLNPAIR("last_written_mode - ", (int)last_written_mode);
+      DEBUG_ECHOLNPAIR("last_written_mode - ", last_written_mode);
       DEBUG_ECHOLNPGM("config mode - "
         #if ENABLED(BLTOUCH_SET_5V_MODE)
           "BLTOUCH_SET_5V_MODE"
         #else
           "OD"
         #endif
       );
     }
 
     const bool should_set = last_written_mode != ENABLED(BLTOUCH_SET_5V_MODE);
@@ -168,32 +168,32 @@ bool BLTouch::status_proc() {
   /**
    * Return a TRUE for "YES, it is DEPLOYED"
    * This function will ensure switch state is reset after execution
    */
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch STATUS requested");
 
   _set_SW_mode();              // Incidentally, _set_SW_mode() will also RESET any active alarm
   const bool tr = triggered(); // If triggered in SW mode, the pin is up, it is STOWED
 
-  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("BLTouch is ", (int)tr);
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("BLTouch is ", tr);
 
   if (tr) _stow(); else _deploy();  // Turn off SW mode, reset any trigger, honor pin state
   return !tr;
 }
 
 void BLTouch::mode_conv_proc(const bool M5V) {
   /**
    * BLTOUCH pre V3.0 and clones: No reaction at all to this sequence apart from a DEPLOY -> STOW
    * BLTOUCH V3.0: This will set the mode (twice) and sadly, a STOW is needed at the end, because of the deploy
    * BLTOUCH V3.1: This will set the mode and store it in the eeprom. The STOW is not needed but does not hurt
    */
-  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("BLTouch Set Mode - ", (int)M5V);
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("BLTouch Set Mode - ", M5V);
   _deploy();
   if (M5V) _set_5V_mode(); else _set_OD_mode();
   _mode_store();
   if (M5V) _set_5V_mode(); else _set_OD_mode();
   _stow();
   last_written_mode = M5V;
 }
 
 #endif // BLTOUCH

commit 58ac815822b4c04f29b66ddf076156e6b4994749
Author: wmariz <11435639+wmariz@users.noreply.github.com>
Date:   Thu Nov 26 10:58:19 2020 -0300

    Level Corners with Probe option (#20241)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index d6b1f99c16..48eaf9efc4 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -24,20 +24,21 @@
 
 #if ENABLED(BLTOUCH)
 
 #include "bltouch.h"
 
 BLTouch bltouch;
 
 bool BLTouch::last_written_mode; // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
 
 #include "../module/servo.h"
+#include "../module/probe.h"
 
 void stop();
 
 #define DEBUG_OUT ENABLED(DEBUG_LEVELING_FEATURE)
 #include "../core/debug_out.h"
 
 bool BLTouch::command(const BLTCommand cmd, const millis_t &ms) {
   if (DEBUGGING(LEVELING)) SERIAL_ECHOLNPAIR("BLTouch Command :", cmd);
   MOVE_SERVO(Z_PROBE_SERVO_NR, cmd);
   safe_delay(_MAX(ms, (uint32_t)BLTOUCH_DELAY)); // BLTOUCH_DELAY is also the *minimum* delay
@@ -83,29 +84,21 @@ void BLTouch::init(const bool set_voltage/*=false*/) {
 
 void BLTouch::clear() {
   _reset();    // RESET or RESET_SW will clear an alarm condition but...
                // ...it will not clear a triggered condition in SW mode when the pin is currently up
                // ANTClabs <-- CODE ERROR
   _stow();     // STOW will pull up the pin and clear any triggered condition unless it fails, don't care
   _deploy();   // DEPLOY to test the probe. Could fail, don't care
   _stow();     // STOW to be ready for meaningful work. Could fail, don't care
 }
 
-bool BLTouch::triggered() {
-  return (
-    #if ENABLED(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN)
-      READ(Z_MIN_PIN) != Z_MIN_ENDSTOP_INVERTING
-    #else
-      READ(Z_MIN_PROBE_PIN) != Z_MIN_PROBE_ENDSTOP_INVERTING
-    #endif
-  );
-}
+bool BLTouch::triggered() { return PROBE_TRIGGERED(); }
 
 bool BLTouch::deploy_proc() {
   // Do a DEPLOY
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch DEPLOY requested");
 
   // Attempt to DEPLOY, wait for DEPLOY_DELAY or ALARM
   if (_deploy_query_alarm()) {
     // The deploy might have failed or the probe is already triggered (nozzle too low?)
     if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch ALARM or TRIGGER after DEPLOY, recovering");
 

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 58b799c70f..d6b1f99c16 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 #include "../inc/MarlinConfig.h"
 
 #if ENABLED(BLTOUCH)
 
 #include "bltouch.h"
 
 BLTouch bltouch;

commit 6d90d1e1f552dca5e21bc61b676b8e8ce731b280
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 22 16:35:03 2020 -0500

    Apply TERN to compact code (#17619)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index efe575ec63..58b799c70f 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -117,23 +117,21 @@ bool BLTouch::deploy_proc() {
       if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch Recovery Failed");
 
       SERIAL_ERROR_MSG(STR_STOP_BLTOUCH);  // Tell the user something is wrong, needs action
       stop();                              // but it's not too bad, no need to kill, allow restart
 
       return true;                         // Tell our caller we goofed in case he cares to know
     }
   }
 
   // One of the recommended ANTClabs ways to probe, using SW MODE
-  #if ENABLED(BLTOUCH_FORCE_SW_MODE)
-   _set_SW_mode();
-  #endif
+  TERN_(BLTOUCH_FORCE_SW_MODE, _set_SW_mode());
 
   // Now the probe is ready to issue a 10ms pulse when the pin goes up.
   // The trigger STOW (see motion.cpp for example) will pull up the probes pin as soon as the pulse
   // is registered.
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("bltouch.deploy_proc() end");
 
   return false; // report success to caller
 }
 

commit 64d092935b27ff89955f0430eef5815b15e5a92d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 7 22:20:41 2020 -0600

    More useful ENABLED / DISABLED macros (#17054)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 77d85c4195..efe575ec63 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -66,34 +66,26 @@ void BLTouch::init(const bool set_voltage/*=false*/) {
       DEBUG_ECHOLNPAIR("last_written_mode - ", (int)last_written_mode);
       DEBUG_ECHOLNPGM("config mode - "
         #if ENABLED(BLTOUCH_SET_5V_MODE)
           "BLTOUCH_SET_5V_MODE"
         #else
           "OD"
         #endif
       );
     }
 
-    const bool should_set = last_written_mode != (false
-      #if ENABLED(BLTOUCH_SET_5V_MODE)
-        || true
-      #endif
-    );
+    const bool should_set = last_written_mode != ENABLED(BLTOUCH_SET_5V_MODE);
 
   #endif
 
   if (should_set && set_voltage)
-    mode_conv_proc((false
-      #if ENABLED(BLTOUCH_SET_5V_MODE)
-        || true
-      #endif
-    ));
+    mode_conv_proc(ENABLED(BLTOUCH_SET_5V_MODE));
 }
 
 void BLTouch::clear() {
   _reset();    // RESET or RESET_SW will clear an alarm condition but...
                // ...it will not clear a triggered condition in SW mode when the pin is currently up
                // ANTClabs <-- CODE ERROR
   _stow();     // STOW will pull up the pin and clear any triggered condition unless it fails, don't care
   _deploy();   // DEPLOY to test the probe. Could fail, don't care
   _stow();     // STOW to be ready for meaningful work. Could fail, don't care
 }

commit e78f607ef33044eecde744e77beea87532817c47
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Feb 26 03:02:03 2020 -0600

    Use a STR_ prefix for non-translated strings

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index e5ccb42bf4..77d85c4195 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -117,21 +117,21 @@ bool BLTouch::deploy_proc() {
     // The deploy might have failed or the probe is already triggered (nozzle too low?)
     if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch ALARM or TRIGGER after DEPLOY, recovering");
 
     clear();                               // Get the probe into start condition
 
     // Last attempt to DEPLOY
     if (_deploy_query_alarm()) {
       // The deploy might have failed or the probe is actually triggered (nozzle too low?) again
       if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch Recovery Failed");
 
-      SERIAL_ERROR_MSG(MSG_STOP_BLTOUCH);  // Tell the user something is wrong, needs action
+      SERIAL_ERROR_MSG(STR_STOP_BLTOUCH);  // Tell the user something is wrong, needs action
       stop();                              // but it's not too bad, no need to kill, allow restart
 
       return true;                         // Tell our caller we goofed in case he cares to know
     }
   }
 
   // One of the recommended ANTClabs ways to probe, using SW MODE
   #if ENABLED(BLTOUCH_FORCE_SW_MODE)
    _set_SW_mode();
   #endif
@@ -162,21 +162,21 @@ bool BLTouch::stow_proc() {
 
     _reset();                              // This RESET will then also pull up the pin. If it doesn't
                                            // work and the pin is still down, there will no longer be
                                            // an ALARM condition though.
                                            // But one more STOW will catch that
     // Last attempt to STOW
     if (_stow_query_alarm()) {             // so if there is now STILL an ALARM condition:
 
       if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch Recovery Failed");
 
-      SERIAL_ERROR_MSG(MSG_STOP_BLTOUCH);  // Tell the user something is wrong, needs action
+      SERIAL_ERROR_MSG(STR_STOP_BLTOUCH);  // Tell the user something is wrong, needs action
       stop();                              // but it's not too bad, no need to kill, allow restart
 
       return true;                         // Tell our caller we goofed in case he cares to know
     }
   }
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("bltouch.stow_proc() end");
 
   return false; // report success to caller
 }

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 64c052269b..e5ccb42bf4 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 79635f8e94d5405c67ed58a8231f11a8754941ac
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 14 16:36:46 2019 -0500

    Fix some debug out lines

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index b768fc3e80..64c052269b 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -103,98 +103,98 @@ bool BLTouch::triggered() {
     #if ENABLED(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN)
       READ(Z_MIN_PIN) != Z_MIN_ENDSTOP_INVERTING
     #else
       READ(Z_MIN_PROBE_PIN) != Z_MIN_PROBE_ENDSTOP_INVERTING
     #endif
   );
 }
 
 bool BLTouch::deploy_proc() {
   // Do a DEPLOY
-  if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch DEPLOY requested");
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch DEPLOY requested");
 
   // Attempt to DEPLOY, wait for DEPLOY_DELAY or ALARM
   if (_deploy_query_alarm()) {
     // The deploy might have failed or the probe is already triggered (nozzle too low?)
-    if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch ALARM or TRIGGER after DEPLOY, recovering");
+    if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch ALARM or TRIGGER after DEPLOY, recovering");
 
     clear();                               // Get the probe into start condition
 
     // Last attempt to DEPLOY
     if (_deploy_query_alarm()) {
       // The deploy might have failed or the probe is actually triggered (nozzle too low?) again
-      if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch Recovery Failed");
+      if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch Recovery Failed");
 
       SERIAL_ERROR_MSG(MSG_STOP_BLTOUCH);  // Tell the user something is wrong, needs action
       stop();                              // but it's not too bad, no need to kill, allow restart
 
       return true;                         // Tell our caller we goofed in case he cares to know
     }
   }
 
   // One of the recommended ANTClabs ways to probe, using SW MODE
   #if ENABLED(BLTOUCH_FORCE_SW_MODE)
    _set_SW_mode();
   #endif
 
   // Now the probe is ready to issue a 10ms pulse when the pin goes up.
   // The trigger STOW (see motion.cpp for example) will pull up the probes pin as soon as the pulse
   // is registered.
 
-  if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("bltouch.deploy_proc() end");
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("bltouch.deploy_proc() end");
 
   return false; // report success to caller
 }
 
 bool BLTouch::stow_proc() {
   // Do a STOW
-  if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch STOW requested");
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch STOW requested");
 
   // A STOW will clear a triggered condition in the probe (10ms pulse).
   // At the moment that we come in here, we might (pulse) or will (SW mode) see the trigger on the pin.
   // So even though we know a STOW will be ignored if an ALARM condition is active, we will STOW.
   // Note: If the probe is deployed AND in an ALARM condition, this STOW will not pull up the pin
   // and the ALARM condition will still be there. --> ANTClabs should change this behavior maybe
 
   // Attempt to STOW, wait for STOW_DELAY or ALARM
   if (_stow_query_alarm()) {
     // The stow might have failed
-    if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch ALARM or TRIGGER after STOW, recovering");
+    if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch ALARM or TRIGGER after STOW, recovering");
 
     _reset();                              // This RESET will then also pull up the pin. If it doesn't
                                            // work and the pin is still down, there will no longer be
                                            // an ALARM condition though.
                                            // But one more STOW will catch that
     // Last attempt to STOW
     if (_stow_query_alarm()) {             // so if there is now STILL an ALARM condition:
 
-      if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch Recovery Failed");
+      if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch Recovery Failed");
 
       SERIAL_ERROR_MSG(MSG_STOP_BLTOUCH);  // Tell the user something is wrong, needs action
       stop();                              // but it's not too bad, no need to kill, allow restart
 
       return true;                         // Tell our caller we goofed in case he cares to know
     }
   }
 
-  if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("bltouch.stow_proc() end");
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("bltouch.stow_proc() end");
 
   return false; // report success to caller
 }
 
 bool BLTouch::status_proc() {
   /**
    * Return a TRUE for "YES, it is DEPLOYED"
    * This function will ensure switch state is reset after execution
    */
 
-  if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch STATUS requested");
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPGM("BLTouch STATUS requested");
 
   _set_SW_mode();              // Incidentally, _set_SW_mode() will also RESET any active alarm
   const bool tr = triggered(); // If triggered in SW mode, the pin is up, it is STOWED
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("BLTouch is ", (int)tr);
 
   if (tr) _stow(); else _deploy();  // Turn off SW mode, reset any trigger, honor pin state
   return !tr;
 }
 

commit 750a16ad385dca893d482cb51d8af2ac3f8a1da1
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jul 5 18:01:21 2019 -0500

    Fix MIN/MAX function collision with macros

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index fd26d66130..b768fc3e80 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -33,21 +33,21 @@ bool BLTouch::last_written_mode; // Initialized by settings.load, 0 = Open Drain
 #include "../module/servo.h"
 
 void stop();
 
 #define DEBUG_OUT ENABLED(DEBUG_LEVELING_FEATURE)
 #include "../core/debug_out.h"
 
 bool BLTouch::command(const BLTCommand cmd, const millis_t &ms) {
   if (DEBUGGING(LEVELING)) SERIAL_ECHOLNPAIR("BLTouch Command :", cmd);
   MOVE_SERVO(Z_PROBE_SERVO_NR, cmd);
-  safe_delay(MAX(ms, (uint32_t)BLTOUCH_DELAY)); // BLTOUCH_DELAY is also the *minimum* delay
+  safe_delay(_MAX(ms, (uint32_t)BLTOUCH_DELAY)); // BLTOUCH_DELAY is also the *minimum* delay
   return triggered();
 }
 
 // Init the class and device. Call from setup().
 void BLTouch::init(const bool set_voltage/*=false*/) {
   // Voltage Setting (if enabled). At every Marlin initialization:
   // BLTOUCH < V3.0 and clones: This will be ignored by the probe
   // BLTOUCH V3.0: SET_5V_MODE or SET_OD_MODE (if enabled).
   //               OD_MODE is the default on power on, but setting it does not hurt
   //               This mode will stay active until manual SET_OD_MODE or power cycle

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 8c6a858181..fd26d66130 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -1,16 +1,16 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.

commit def4bb987dc88303ad679347f44688b0941555c9
Author: BigIronGuru <51454533+BigIronGuru@users.noreply.github.com>
Date:   Sun Jun 23 00:26:02 2019 +0200

    Reset, stow BLTouch before mode change (#14368)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index abaeb153ee..8c6a858181 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -46,20 +46,23 @@ bool BLTouch::command(const BLTCommand cmd, const millis_t &ms) {
 
 // Init the class and device. Call from setup().
 void BLTouch::init(const bool set_voltage/*=false*/) {
   // Voltage Setting (if enabled). At every Marlin initialization:
   // BLTOUCH < V3.0 and clones: This will be ignored by the probe
   // BLTOUCH V3.0: SET_5V_MODE or SET_OD_MODE (if enabled).
   //               OD_MODE is the default on power on, but setting it does not hurt
   //               This mode will stay active until manual SET_OD_MODE or power cycle
   // BLTOUCH V3.1: SET_5V_MODE or SET_OD_MODE (if enabled).
   //               At power on, the probe will default to the eeprom settings configured by the user
+  _reset();
+  _stow();
+
   #if ENABLED(BLTOUCH_FORCE_MODE_SET)
 
     constexpr bool should_set = true;
 
   #else
 
     if (DEBUGGING(LEVELING)) {
       DEBUG_ECHOLNPAIR("last_written_mode - ", (int)last_written_mode);
       DEBUG_ECHOLNPGM("config mode - "
         #if ENABLED(BLTOUCH_SET_5V_MODE)
@@ -77,23 +80,20 @@ void BLTouch::init(const bool set_voltage/*=false*/) {
     );
 
   #endif
 
   if (should_set && set_voltage)
     mode_conv_proc((false
       #if ENABLED(BLTOUCH_SET_5V_MODE)
         || true
       #endif
     ));
-
-  _reset();
-  _stow();
 }
 
 void BLTouch::clear() {
   _reset();    // RESET or RESET_SW will clear an alarm condition but...
                // ...it will not clear a triggered condition in SW mode when the pin is currently up
                // ANTClabs <-- CODE ERROR
   _stow();     // STOW will pull up the pin and clear any triggered condition unless it fails, don't care
   _deploy();   // DEPLOY to test the probe. Could fail, don't care
   _stow();     // STOW to be ready for meaningful work. Could fail, don't care
 }

commit 49e83dd7c81cffef7462a0a53a70a125562de83a
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sat May 25 22:56:47 2019 -0400

    BLTouch V3.1 changes (#14104)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 2b0b73bc95..abaeb153ee 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -21,45 +21,79 @@
  */
 
 #include "../inc/MarlinConfig.h"
 
 #if ENABLED(BLTOUCH)
 
 #include "bltouch.h"
 
 BLTouch bltouch;
 
+bool BLTouch::last_written_mode; // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
+
 #include "../module/servo.h"
 
 void stop();
 
 #define DEBUG_OUT ENABLED(DEBUG_LEVELING_FEATURE)
 #include "../core/debug_out.h"
 
 bool BLTouch::command(const BLTCommand cmd, const millis_t &ms) {
   if (DEBUGGING(LEVELING)) SERIAL_ECHOLNPAIR("BLTouch Command :", cmd);
   MOVE_SERVO(Z_PROBE_SERVO_NR, cmd);
-  safe_delay(MAX(ms, BLTOUCH_DELAY)); // BLTOUCH_DELAY is also the *minimum* delay
+  safe_delay(MAX(ms, (uint32_t)BLTOUCH_DELAY)); // BLTOUCH_DELAY is also the *minimum* delay
   return triggered();
 }
 
-void BLTouch::init() {
-  // This is called by marlin.cpp on initialization
-  // SET_5V_MODE (if enabled). OD_MODE is the default on power on.
-  // This mode will stay active until manual SET_OD_MODE or power cycle
-  #if ENABLED(BLTOUCH_FORCE_5V_MODE)
-    _set_5V_mode();                          // Set 5V mode if explicitely demanded (V3 upwards)
+// Init the class and device. Call from setup().
+void BLTouch::init(const bool set_voltage/*=false*/) {
+  // Voltage Setting (if enabled). At every Marlin initialization:
+  // BLTOUCH < V3.0 and clones: This will be ignored by the probe
+  // BLTOUCH V3.0: SET_5V_MODE or SET_OD_MODE (if enabled).
+  //               OD_MODE is the default on power on, but setting it does not hurt
+  //               This mode will stay active until manual SET_OD_MODE or power cycle
+  // BLTOUCH V3.1: SET_5V_MODE or SET_OD_MODE (if enabled).
+  //               At power on, the probe will default to the eeprom settings configured by the user
+  #if ENABLED(BLTOUCH_FORCE_MODE_SET)
+
+    constexpr bool should_set = true;
+
+  #else
+
+    if (DEBUGGING(LEVELING)) {
+      DEBUG_ECHOLNPAIR("last_written_mode - ", (int)last_written_mode);
+      DEBUG_ECHOLNPGM("config mode - "
+        #if ENABLED(BLTOUCH_SET_5V_MODE)
+          "BLTOUCH_SET_5V_MODE"
+        #else
+          "OD"
+        #endif
+      );
+    }
+
+    const bool should_set = last_written_mode != (false
+      #if ENABLED(BLTOUCH_SET_5V_MODE)
+        || true
+      #endif
+    );
+
   #endif
+
+  if (should_set && set_voltage)
+    mode_conv_proc((false
+      #if ENABLED(BLTOUCH_SET_5V_MODE)
+        || true
+      #endif
+    ));
+
   _reset();
   _stow();
-  // There really should be no alarm outstanding now, and no triggered condition. But if there is,
-  // there is no need to worry people here on init right at the start of the printer.
 }
 
 void BLTouch::clear() {
   _reset();    // RESET or RESET_SW will clear an alarm condition but...
                // ...it will not clear a triggered condition in SW mode when the pin is currently up
                // ANTClabs <-- CODE ERROR
   _stow();     // STOW will pull up the pin and clear any triggered condition unless it fails, don't care
   _deploy();   // DEPLOY to test the probe. Could fail, don't care
   _stow();     // STOW to be ready for meaningful work. Could fail, don't care
 }
@@ -90,20 +124,25 @@ bool BLTouch::deploy_proc() {
       // The deploy might have failed or the probe is actually triggered (nozzle too low?) again
       if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch Recovery Failed");
 
       SERIAL_ERROR_MSG(MSG_STOP_BLTOUCH);  // Tell the user something is wrong, needs action
       stop();                              // but it's not too bad, no need to kill, allow restart
 
       return true;                         // Tell our caller we goofed in case he cares to know
     }
   }
 
+  // One of the recommended ANTClabs ways to probe, using SW MODE
+  #if ENABLED(BLTOUCH_FORCE_SW_MODE)
+   _set_SW_mode();
+  #endif
+
   // Now the probe is ready to issue a 10ms pulse when the pin goes up.
   // The trigger STOW (see motion.cpp for example) will pull up the probes pin as soon as the pulse
   // is registered.
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("bltouch.deploy_proc() end");
 
   return false; // report success to caller
 }
 
 bool BLTouch::stow_proc() {
@@ -152,11 +191,26 @@ bool BLTouch::status_proc() {
 
   _set_SW_mode();              // Incidentally, _set_SW_mode() will also RESET any active alarm
   const bool tr = triggered(); // If triggered in SW mode, the pin is up, it is STOWED
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("BLTouch is ", (int)tr);
 
   if (tr) _stow(); else _deploy();  // Turn off SW mode, reset any trigger, honor pin state
   return !tr;
 }
 
+void BLTouch::mode_conv_proc(const bool M5V) {
+  /**
+   * BLTOUCH pre V3.0 and clones: No reaction at all to this sequence apart from a DEPLOY -> STOW
+   * BLTOUCH V3.0: This will set the mode (twice) and sadly, a STOW is needed at the end, because of the deploy
+   * BLTOUCH V3.1: This will set the mode and store it in the eeprom. The STOW is not needed but does not hurt
+   */
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("BLTouch Set Mode - ", (int)M5V);
+  _deploy();
+  if (M5V) _set_5V_mode(); else _set_OD_mode();
+  _mode_store();
+  if (M5V) _set_5V_mode(); else _set_OD_mode();
+  _stow();
+  last_written_mode = M5V;
+}
+
 #endif // BLTOUCH

commit 85fb33a060354a70348f220085405ae7bfb939c5
Author: FanDjango <FanDjango@users.noreply.github.com>
Date:   Sat May 18 02:10:18 2019 +0200

    BLTOUCH tweaks, new v3.1 command (#14015)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 6166b7d195..2b0b73bc95 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -139,27 +139,24 @@ bool BLTouch::stow_proc() {
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("bltouch.stow_proc() end");
 
   return false; // report success to caller
 }
 
 bool BLTouch::status_proc() {
   /**
    * Return a TRUE for "YES, it is DEPLOYED"
    * This function will ensure switch state is reset after execution
-   * This may change pin position in some scenarios, specifically
-   * if the pin has been triggered but not yet stowed.
    */
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch STATUS requested");
 
-  _set_SW_mode();
+  _set_SW_mode();              // Incidentally, _set_SW_mode() will also RESET any active alarm
   const bool tr = triggered(); // If triggered in SW mode, the pin is up, it is STOWED
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("BLTouch is ", (int)tr);
 
-  _reset();                         // turn off the SW Mode
-  if (tr) _stow(); else _deploy();  // and reset any triggered signal, restore state
+  if (tr) _stow(); else _deploy();  // Turn off SW mode, reset any trigger, honor pin state
   return !tr;
 }
 
 #endif // BLTOUCH

commit 785c01f2bc1635ad645d868aba7cfa5a6daeb973
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed May 15 01:49:17 2019 -0500

    Use US spelling of 'behavior'

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index c42af565e6..6166b7d195 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -107,21 +107,21 @@ bool BLTouch::deploy_proc() {
 }
 
 bool BLTouch::stow_proc() {
   // Do a STOW
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch STOW requested");
 
   // A STOW will clear a triggered condition in the probe (10ms pulse).
   // At the moment that we come in here, we might (pulse) or will (SW mode) see the trigger on the pin.
   // So even though we know a STOW will be ignored if an ALARM condition is active, we will STOW.
   // Note: If the probe is deployed AND in an ALARM condition, this STOW will not pull up the pin
-  // and the ALARM condition will still be there. --> ANTClabs should change this behaviour maybe
+  // and the ALARM condition will still be there. --> ANTClabs should change this behavior maybe
 
   // Attempt to STOW, wait for STOW_DELAY or ALARM
   if (_stow_query_alarm()) {
     // The stow might have failed
     if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch ALARM or TRIGGER after STOW, recovering");
 
     _reset();                              // This RESET will then also pull up the pin. If it doesn't
                                            // work and the pin is still down, there will no longer be
                                            // an ALARM condition though.
                                            // But one more STOW will catch that

commit dcaefc68a5f658472472830690e18f3676ae725c
Author: FanDjango <FanDjango@users.noreply.github.com>
Date:   Wed May 15 06:55:11 2019 +0200

    BLTouch.init should not deploy (#13988)
    
    Low or unknown probe clearance on init (even at powerup) is a risk and therefore, a deploy should be avoided because dragging the pin is possible: A deploy goes into alarm if it can't extend fully and then the subsequent stow will fail.

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 114fb63121..c42af565e6 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -42,21 +42,22 @@ bool BLTouch::command(const BLTCommand cmd, const millis_t &ms) {
   return triggered();
 }
 
 void BLTouch::init() {
   // This is called by marlin.cpp on initialization
   // SET_5V_MODE (if enabled). OD_MODE is the default on power on.
   // This mode will stay active until manual SET_OD_MODE or power cycle
   #if ENABLED(BLTOUCH_FORCE_5V_MODE)
     _set_5V_mode();                          // Set 5V mode if explicitely demanded (V3 upwards)
   #endif
-  clear();
+  _reset();
+  _stow();
   // There really should be no alarm outstanding now, and no triggered condition. But if there is,
   // there is no need to worry people here on init right at the start of the printer.
 }
 
 void BLTouch::clear() {
   _reset();    // RESET or RESET_SW will clear an alarm condition but...
                // ...it will not clear a triggered condition in SW mode when the pin is currently up
                // ANTClabs <-- CODE ERROR
   _stow();     // STOW will pull up the pin and clear any triggered condition unless it fails, don't care
   _deploy();   // DEPLOY to test the probe. Could fail, don't care

commit 6811e2921bcd272e7487e4f379b42a5a403a07c2
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Tue May 7 22:25:54 2019 -0400

    BLTouch v3 / 3DTouch Interoperability & performance (#13814)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index 2e68835f39..114fb63121 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -28,69 +28,137 @@
 
 BLTouch bltouch;
 
 #include "../module/servo.h"
 
 void stop();
 
 #define DEBUG_OUT ENABLED(DEBUG_LEVELING_FEATURE)
 #include "../core/debug_out.h"
 
-void BLTouch::command(const BLTCommand cmd) {
-  //SERIAL_ECHOLNPAIR("BLTouch Command :", cmd);
+bool BLTouch::command(const BLTCommand cmd, const millis_t &ms) {
+  if (DEBUGGING(LEVELING)) SERIAL_ECHOLNPAIR("BLTouch Command :", cmd);
   MOVE_SERVO(Z_PROBE_SERVO_NR, cmd);
-  safe_delay(BLTOUCH_DELAY);
+  safe_delay(MAX(ms, BLTOUCH_DELAY)); // BLTOUCH_DELAY is also the *minimum* delay
+  return triggered();
 }
 
 void BLTouch::init() {
-  reset();                            // Clear all BLTouch error conditions
-  stow();
+  // This is called by marlin.cpp on initialization
+  // SET_5V_MODE (if enabled). OD_MODE is the default on power on.
+  // This mode will stay active until manual SET_OD_MODE or power cycle
+  #if ENABLED(BLTOUCH_FORCE_5V_MODE)
+    _set_5V_mode();                          // Set 5V mode if explicitely demanded (V3 upwards)
+  #endif
+  clear();
+  // There really should be no alarm outstanding now, and no triggered condition. But if there is,
+  // there is no need to worry people here on init right at the start of the printer.
+}
+
+void BLTouch::clear() {
+  _reset();    // RESET or RESET_SW will clear an alarm condition but...
+               // ...it will not clear a triggered condition in SW mode when the pin is currently up
+               // ANTClabs <-- CODE ERROR
+  _stow();     // STOW will pull up the pin and clear any triggered condition unless it fails, don't care
+  _deploy();   // DEPLOY to test the probe. Could fail, don't care
+  _stow();     // STOW to be ready for meaningful work. Could fail, don't care
 }
 
 bool BLTouch::triggered() {
   return (
     #if ENABLED(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN)
       READ(Z_MIN_PIN) != Z_MIN_ENDSTOP_INVERTING
     #else
       READ(Z_MIN_PROBE_PIN) != Z_MIN_PROBE_ENDSTOP_INVERTING
     #endif
   );
 }
 
-bool BLTouch::set_deployed(const bool in_deploy) {
-  if (in_deploy && triggered()) {     // If BLTouch says it's triggered
-    reset();                          //  try to reset it.
-    _deploy(); _stow();               // Deploy and stow to clear the "triggered" condition.
-    safe_delay(1500);                 // Wait for internal self-test to complete.
-                                      //  (Measured completion time was 0.65 seconds
-                                      //   after reset, deploy, and stow sequence)
-    if (triggered()) {                // If it still claims to be triggered...
-      SERIAL_ERROR_MSG(MSG_STOP_BLTOUCH);
-      stop();                         // punt!
-      return true;
+bool BLTouch::deploy_proc() {
+  // Do a DEPLOY
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch DEPLOY requested");
+
+  // Attempt to DEPLOY, wait for DEPLOY_DELAY or ALARM
+  if (_deploy_query_alarm()) {
+    // The deploy might have failed or the probe is already triggered (nozzle too low?)
+    if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch ALARM or TRIGGER after DEPLOY, recovering");
+
+    clear();                               // Get the probe into start condition
+
+    // Last attempt to DEPLOY
+    if (_deploy_query_alarm()) {
+      // The deploy might have failed or the probe is actually triggered (nozzle too low?) again
+      if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch Recovery Failed");
+
+      SERIAL_ERROR_MSG(MSG_STOP_BLTOUCH);  // Tell the user something is wrong, needs action
+      stop();                              // but it's not too bad, no need to kill, allow restart
+
+      return true;                         // Tell our caller we goofed in case he cares to know
     }
   }
 
-  #if ENABLED(BLTOUCH_V3)
-    #if  EITHER(BLTOUCH_FORCE_5V_MODE, ENDSTOPPULLUPS) \
-      || ALL(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN, ENDSTOPPULLUP_ZMIN) \
-      || (USES_Z_MIN_PROBE_ENDSTOP && ENABLED(ENDSTOPPULLUP_ZMIN_PROBE))
-      set_5V_mode();  // Assume 5V DC logic level if endstop pullup resistors are enabled
-    #elif true || ENABLED(BLTOUCH_FORCE_OPEN_DRAIN_MODE)
-      set_OD_mode();
-    #endif
-  #endif
+  // Now the probe is ready to issue a 10ms pulse when the pin goes up.
+  // The trigger STOW (see motion.cpp for example) will pull up the probes pin as soon as the pulse
+  // is registered.
 
-  if (in_deploy) {
-    _deploy();
-    #if ENABLED(BLTOUCH_V3)
-      set_SW_mode();
-    #endif
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("bltouch.deploy_proc() end");
+
+  return false; // report success to caller
+}
+
+bool BLTouch::stow_proc() {
+  // Do a STOW
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch STOW requested");
+
+  // A STOW will clear a triggered condition in the probe (10ms pulse).
+  // At the moment that we come in here, we might (pulse) or will (SW mode) see the trigger on the pin.
+  // So even though we know a STOW will be ignored if an ALARM condition is active, we will STOW.
+  // Note: If the probe is deployed AND in an ALARM condition, this STOW will not pull up the pin
+  // and the ALARM condition will still be there. --> ANTClabs should change this behaviour maybe
+
+  // Attempt to STOW, wait for STOW_DELAY or ALARM
+  if (_stow_query_alarm()) {
+    // The stow might have failed
+    if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch ALARM or TRIGGER after STOW, recovering");
+
+    _reset();                              // This RESET will then also pull up the pin. If it doesn't
+                                           // work and the pin is still down, there will no longer be
+                                           // an ALARM condition though.
+                                           // But one more STOW will catch that
+    // Last attempt to STOW
+    if (_stow_query_alarm()) {             // so if there is now STILL an ALARM condition:
+
+      if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch Recovery Failed");
+
+      SERIAL_ERROR_MSG(MSG_STOP_BLTOUCH);  // Tell the user something is wrong, needs action
+      stop();                              // but it's not too bad, no need to kill, allow restart
+
+      return true;                         // Tell our caller we goofed in case he cares to know
+    }
   }
-  else _stow();
 
-  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("bltouch.set_deployed(", in_deploy, ")");
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("bltouch.stow_proc() end");
+
+  return false; // report success to caller
+}
+
+bool BLTouch::status_proc() {
+  /**
+   * Return a TRUE for "YES, it is DEPLOYED"
+   * This function will ensure switch state is reset after execution
+   * This may change pin position in some scenarios, specifically
+   * if the pin has been triggered but not yet stowed.
+   */
+
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLN("BLTouch STATUS requested");
+
+  _set_SW_mode();
+  const bool tr = triggered(); // If triggered in SW mode, the pin is up, it is STOWED
+
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("BLTouch is ", (int)tr);
 
-  return false;
+  _reset();                         // turn off the SW Mode
+  if (tr) _stow(); else _deploy();  // and reset any triggered signal, restore state
+  return !tr;
 }
 
 #endif // BLTOUCH

commit b46ca9aa94bf49ec294930925d15d4f7a2bd307a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Mar 26 19:20:13 2019 -0500

    Less timely comment, tweak conditions

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index f2dcec2275..2e68835f39 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -64,33 +64,31 @@ bool BLTouch::set_deployed(const bool in_deploy) {
                                       //  (Measured completion time was 0.65 seconds
                                       //   after reset, deploy, and stow sequence)
     if (triggered()) {                // If it still claims to be triggered...
       SERIAL_ERROR_MSG(MSG_STOP_BLTOUCH);
       stop();                         // punt!
       return true;
     }
   }
 
   #if ENABLED(BLTOUCH_V3)
-    #if ENABLED(BLTOUCH_FORCE_5V_MODE)
-      set_5V_mode();
-    #elif ENABLED(BLTOUCH_FORCE_OPEN_DRAIN_MODE)
-      set_OD_mode();
-    #elif ENABLED(ENDSTOPPULLUPS) || ALL(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN, ENDSTOPPULLUP_ZMIN) || (USES_Z_MIN_PROBE_ENDSTOP && ENABLED(ENDSTOPPULLUP_ZMIN_PROBE))
-      set_5V_mode();                  // Assume 5V DC logic level if endstop pullup resistors are enabled
-    #else
+    #if  EITHER(BLTOUCH_FORCE_5V_MODE, ENDSTOPPULLUPS) \
+      || ALL(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN, ENDSTOPPULLUP_ZMIN) \
+      || (USES_Z_MIN_PROBE_ENDSTOP && ENABLED(ENDSTOPPULLUP_ZMIN_PROBE))
+      set_5V_mode();  // Assume 5V DC logic level if endstop pullup resistors are enabled
+    #elif true || ENABLED(BLTOUCH_FORCE_OPEN_DRAIN_MODE)
       set_OD_mode();
     #endif
   #endif
+
   if (in_deploy) {
     _deploy();
-    
     #if ENABLED(BLTOUCH_V3)
       set_SW_mode();
     #endif
   }
   else _stow();
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("bltouch.set_deployed(", in_deploy, ")");
 
   return false;
 }

commit eb91f08725f72f104c43f147ae47e496d43def34
Author: InsanityAutomation <d.menzel@insanityautomation.com>
Date:   Tue Mar 26 11:24:52 2019 -0400

    Update descriptions and dont call unneeded functions

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index fdbab975e9..f2dcec2275 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -63,32 +63,36 @@ bool BLTouch::set_deployed(const bool in_deploy) {
     safe_delay(1500);                 // Wait for internal self-test to complete.
                                       //  (Measured completion time was 0.65 seconds
                                       //   after reset, deploy, and stow sequence)
     if (triggered()) {                // If it still claims to be triggered...
       SERIAL_ERROR_MSG(MSG_STOP_BLTOUCH);
       stop();                         // punt!
       return true;
     }
   }
 
-  #if ENABLED(BLTOUCH_FORCE_5V_MODE)
-    set_5V_mode();
-  #elif ENABLED(BLTOUCH_FORCE_OPEN_DRAIN_MODE)
-    set_OD_mode();
-  #elif ENABLED(ENDSTOPPULLUPS) || ALL(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN, ENDSTOPPULLUP_ZMIN) || (USES_Z_MIN_PROBE_ENDSTOP && ENABLED(ENDSTOPPULLUP_ZMIN_PROBE))
-    set_5V_mode();                  // Assume 5V DC logic level if endstop pullup resistors are enabled
-  #else
-    set_OD_mode();
+  #if ENABLED(BLTOUCH_V3)
+    #if ENABLED(BLTOUCH_FORCE_5V_MODE)
+      set_5V_mode();
+    #elif ENABLED(BLTOUCH_FORCE_OPEN_DRAIN_MODE)
+      set_OD_mode();
+    #elif ENABLED(ENDSTOPPULLUPS) || ALL(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN, ENDSTOPPULLUP_ZMIN) || (USES_Z_MIN_PROBE_ENDSTOP && ENABLED(ENDSTOPPULLUP_ZMIN_PROBE))
+      set_5V_mode();                  // Assume 5V DC logic level if endstop pullup resistors are enabled
+    #else
+      set_OD_mode();
+    #endif
   #endif
-
   if (in_deploy) {
     _deploy();
-    set_SW_mode();                  // Ensure Switch mode is activated for BLTouch V3. Ignored on V2.
+    
+    #if ENABLED(BLTOUCH_V3)
+      set_SW_mode();
+    #endif
   }
   else _stow();
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("bltouch.set_deployed(", in_deploy, ")");
 
   return false;
 }
 
 #endif // BLTOUCH

commit 5eeffab5e5ae5b46d027a876e923a8d8b995c11e
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sat Mar 23 23:58:34 2019 -0400

    Fix BLTouch Menus (#13441)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index fc3757a47a..fdbab975e9 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -29,20 +29,21 @@
 BLTouch bltouch;
 
 #include "../module/servo.h"
 
 void stop();
 
 #define DEBUG_OUT ENABLED(DEBUG_LEVELING_FEATURE)
 #include "../core/debug_out.h"
 
 void BLTouch::command(const BLTCommand cmd) {
+  //SERIAL_ECHOLNPAIR("BLTouch Command :", cmd);
   MOVE_SERVO(Z_PROBE_SERVO_NR, cmd);
   safe_delay(BLTOUCH_DELAY);
 }
 
 void BLTouch::init() {
   reset();                            // Clear all BLTouch error conditions
   stow();
 }
 
 bool BLTouch::triggered() {

commit 5b2c37d6c1318079687eed6e14aecd3a4ef2ce47
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Mon Mar 18 17:31:11 2019 -0400

    Followup to BLTouch (#13422)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
index a1cc959483..fc3757a47a 100644
--- a/Marlin/src/feature/bltouch.cpp
+++ b/Marlin/src/feature/bltouch.cpp
@@ -62,32 +62,32 @@ bool BLTouch::set_deployed(const bool in_deploy) {
     safe_delay(1500);                 // Wait for internal self-test to complete.
                                       //  (Measured completion time was 0.65 seconds
                                       //   after reset, deploy, and stow sequence)
     if (triggered()) {                // If it still claims to be triggered...
       SERIAL_ERROR_MSG(MSG_STOP_BLTOUCH);
       stop();                         // punt!
       return true;
     }
   }
 
-  #if ENABLED(BLTOUCH_V3)
-    #if ENABLED(BLTOUCH_FORCE_5V_MODE)
-      set_5V_mode();                  // Assume 5V DC logic level if endstop pullup resistors are enabled
-    #else
-      set_OD_mode();
-    #endif
+  #if ENABLED(BLTOUCH_FORCE_5V_MODE)
+    set_5V_mode();
+  #elif ENABLED(BLTOUCH_FORCE_OPEN_DRAIN_MODE)
+    set_OD_mode();
+  #elif ENABLED(ENDSTOPPULLUPS) || ALL(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN, ENDSTOPPULLUP_ZMIN) || (USES_Z_MIN_PROBE_ENDSTOP && ENABLED(ENDSTOPPULLUP_ZMIN_PROBE))
+    set_5V_mode();                  // Assume 5V DC logic level if endstop pullup resistors are enabled
+  #else
+    set_OD_mode();
   #endif
 
   if (in_deploy) {
     _deploy();
-    #if ENABLED(BLTOUCH_V3)
-      set_SW_mode();                  // Ensure Switch mode is activated for BLTouch V3. Ignored on V2.
-    #endif
+    set_SW_mode();                  // Ensure Switch mode is activated for BLTouch V3. Ignored on V2.
   }
   else _stow();
 
   if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("bltouch.set_deployed(", in_deploy, ")");
 
   return false;
 }
 
 #endif // BLTOUCH

commit 691e5c3bb8d04b0b6690424034d73ade19e91586
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Mar 17 06:57:25 2019 -0400

    BLTouch V3.0 support (#13406)

diff --git a/Marlin/src/feature/bltouch.cpp b/Marlin/src/feature/bltouch.cpp
new file mode 100644
index 0000000000..a1cc959483
--- /dev/null
+++ b/Marlin/src/feature/bltouch.cpp
@@ -0,0 +1,93 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../inc/MarlinConfig.h"
+
+#if ENABLED(BLTOUCH)
+
+#include "bltouch.h"
+
+BLTouch bltouch;
+
+#include "../module/servo.h"
+
+void stop();
+
+#define DEBUG_OUT ENABLED(DEBUG_LEVELING_FEATURE)
+#include "../core/debug_out.h"
+
+void BLTouch::command(const BLTCommand cmd) {
+  MOVE_SERVO(Z_PROBE_SERVO_NR, cmd);
+  safe_delay(BLTOUCH_DELAY);
+}
+
+void BLTouch::init() {
+  reset();                            // Clear all BLTouch error conditions
+  stow();
+}
+
+bool BLTouch::triggered() {
+  return (
+    #if ENABLED(Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN)
+      READ(Z_MIN_PIN) != Z_MIN_ENDSTOP_INVERTING
+    #else
+      READ(Z_MIN_PROBE_PIN) != Z_MIN_PROBE_ENDSTOP_INVERTING
+    #endif
+  );
+}
+
+bool BLTouch::set_deployed(const bool in_deploy) {
+  if (in_deploy && triggered()) {     // If BLTouch says it's triggered
+    reset();                          //  try to reset it.
+    _deploy(); _stow();               // Deploy and stow to clear the "triggered" condition.
+    safe_delay(1500);                 // Wait for internal self-test to complete.
+                                      //  (Measured completion time was 0.65 seconds
+                                      //   after reset, deploy, and stow sequence)
+    if (triggered()) {                // If it still claims to be triggered...
+      SERIAL_ERROR_MSG(MSG_STOP_BLTOUCH);
+      stop();                         // punt!
+      return true;
+    }
+  }
+
+  #if ENABLED(BLTOUCH_V3)
+    #if ENABLED(BLTOUCH_FORCE_5V_MODE)
+      set_5V_mode();                  // Assume 5V DC logic level if endstop pullup resistors are enabled
+    #else
+      set_OD_mode();
+    #endif
+  #endif
+
+  if (in_deploy) {
+    _deploy();
+    #if ENABLED(BLTOUCH_V3)
+      set_SW_mode();                  // Ensure Switch mode is activated for BLTouch V3. Ignored on V2.
+    #endif
+  }
+  else _stow();
+
+  if (DEBUGGING(LEVELING)) DEBUG_ECHOLNPAIR("bltouch.set_deployed(", in_deploy, ")");
+
+  return false;
+}
+
+#endif // BLTOUCH
