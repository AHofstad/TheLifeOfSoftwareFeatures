commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    üßë‚Äçüíª Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/lcd/menu/menu_tramming_wizard.cpp b/Marlin/src/lcd/menu/menu_tramming_wizard.cpp
index 8fb251c238..e0f88ea1bb 100644
--- a/Marlin/src/lcd/menu/menu_tramming_wizard.cpp
+++ b/Marlin/src/lcd/menu/menu_tramming_wizard.cpp
@@ -19,21 +19,21 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 //
 // Bed Tramming Wizard
 //
 
 #include "../../inc/MarlinConfigPre.h"
 
-#if BOTH(HAS_MARLINUI_MENU, ASSISTED_TRAMMING_WIZARD)
+#if ALL(HAS_MARLINUI_MENU, ASSISTED_TRAMMING_WIZARD)
 
 #include "menu_item.h"
 
 #include "../../feature/tramming.h"
 
 #include "../../module/motion.h"
 #include "../../module/probe.h"
 #include "../../gcode/queue.h"
 
 #if ENABLED(BLTOUCH)

commit c5a2e41647a12ef16b280975ab713e080e831e46
Author: James Pearson <jamespearson04@hotmail.co.uk>
Date:   Fri Apr 28 23:30:15 2023 +0100

    üêõ Probe behavior corrections (#25631)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>
    Co-authored-by: David Fries <2767875+dfries@users.noreply.github.com>

diff --git a/Marlin/src/lcd/menu/menu_tramming_wizard.cpp b/Marlin/src/lcd/menu/menu_tramming_wizard.cpp
index 4ce2cd6460..8fb251c238 100644
--- a/Marlin/src/lcd/menu/menu_tramming_wizard.cpp
+++ b/Marlin/src/lcd/menu/menu_tramming_wizard.cpp
@@ -46,21 +46,21 @@
 static float z_measured[G35_PROBE_COUNT];
 static Flags<G35_PROBE_COUNT> z_isvalid;
 static uint8_t tram_index = 0;
 static int8_t reference_index; // = 0
 
 #if HAS_LEVELING
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 static bool probe_single_point() {
-  const float z_probed_height = probe.probe_at_point(tramming_points[tram_index], PROBE_PT_RAISE, 0, true);
+  const float z_probed_height = probe.probe_at_point(tramming_points[tram_index], PROBE_PT_RAISE);
   z_measured[tram_index] = z_probed_height;
   if (reference_index < 0) reference_index = tram_index;
   move_to_tramming_wait_pos();
 
   DEBUG_ECHOLNPGM("probe_single_point(", tram_index, ") = ", z_probed_height, "mm");
 
   const bool v = !isnan(z_probed_height);
   z_isvalid.set(tram_index, v);
   return v;
 }

commit 88da531e5d873c342a4a6625d9cb57adb2644cce
Author: James Gilliland <neclimdul@gmail.com>
Date:   Sat Mar 18 03:30:30 2023 -0500

    üö∏ Improve Z-Probe raise for deploy (#25498)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/menu/menu_tramming_wizard.cpp b/Marlin/src/lcd/menu/menu_tramming_wizard.cpp
index 1dd8a1cab6..4ce2cd6460 100644
--- a/Marlin/src/lcd/menu/menu_tramming_wizard.cpp
+++ b/Marlin/src/lcd/menu/menu_tramming_wizard.cpp
@@ -46,23 +46,21 @@
 static float z_measured[G35_PROBE_COUNT];
 static Flags<G35_PROBE_COUNT> z_isvalid;
 static uint8_t tram_index = 0;
 static int8_t reference_index; // = 0
 
 #if HAS_LEVELING
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 static bool probe_single_point() {
-  do_blocking_move_to_z(TERN(BLTOUCH, Z_CLEARANCE_DEPLOY_PROBE, Z_CLEARANCE_BETWEEN_PROBES));
-  // Stow after each point with BLTouch "HIGH SPEED" mode for push-pin safety
-  const float z_probed_height = probe.probe_at_point(tramming_points[tram_index], TERN0(BLTOUCH, bltouch.high_speed_mode) ? PROBE_PT_STOW : PROBE_PT_RAISE, 0, true);
+  const float z_probed_height = probe.probe_at_point(tramming_points[tram_index], PROBE_PT_RAISE, 0, true);
   z_measured[tram_index] = z_probed_height;
   if (reference_index < 0) reference_index = tram_index;
   move_to_tramming_wait_pos();
 
   DEBUG_ECHOLNPGM("probe_single_point(", tram_index, ") = ", z_probed_height, "mm");
 
   const bool v = !isnan(z_probed_height);
   z_isvalid.set(tram_index, v);
   return v;
 }

commit 10983d0cfe3e353ba465cfcadf8aeb51327f1197
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 15 00:29:37 2023 -0500

    üé® Misc. tramming menu cleanup (#25519)

diff --git a/Marlin/src/lcd/menu/menu_tramming_wizard.cpp b/Marlin/src/lcd/menu/menu_tramming_wizard.cpp
new file mode 100644
index 0000000000..1dd8a1cab6
--- /dev/null
+++ b/Marlin/src/lcd/menu/menu_tramming_wizard.cpp
@@ -0,0 +1,115 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+//
+// Bed Tramming Wizard
+//
+
+#include "../../inc/MarlinConfigPre.h"
+
+#if BOTH(HAS_MARLINUI_MENU, ASSISTED_TRAMMING_WIZARD)
+
+#include "menu_item.h"
+
+#include "../../feature/tramming.h"
+
+#include "../../module/motion.h"
+#include "../../module/probe.h"
+#include "../../gcode/queue.h"
+
+#if ENABLED(BLTOUCH)
+  #include "../../feature/bltouch.h"
+#endif
+
+//#define DEBUG_OUT 1
+#include "../../core/debug_out.h"
+
+static float z_measured[G35_PROBE_COUNT];
+static Flags<G35_PROBE_COUNT> z_isvalid;
+static uint8_t tram_index = 0;
+static int8_t reference_index; // = 0
+
+#if HAS_LEVELING
+  #include "../../feature/bedlevel/bedlevel.h"
+#endif
+
+static bool probe_single_point() {
+  do_blocking_move_to_z(TERN(BLTOUCH, Z_CLEARANCE_DEPLOY_PROBE, Z_CLEARANCE_BETWEEN_PROBES));
+  // Stow after each point with BLTouch "HIGH SPEED" mode for push-pin safety
+  const float z_probed_height = probe.probe_at_point(tramming_points[tram_index], TERN0(BLTOUCH, bltouch.high_speed_mode) ? PROBE_PT_STOW : PROBE_PT_RAISE, 0, true);
+  z_measured[tram_index] = z_probed_height;
+  if (reference_index < 0) reference_index = tram_index;
+  move_to_tramming_wait_pos();
+
+  DEBUG_ECHOLNPGM("probe_single_point(", tram_index, ") = ", z_probed_height, "mm");
+
+  const bool v = !isnan(z_probed_height);
+  z_isvalid.set(tram_index, v);
+  return v;
+}
+
+static void _menu_single_probe() {
+  DEBUG_ECHOLNPGM("Screen: single probe screen Arg:", tram_index);
+  START_MENU();
+  STATIC_ITEM(MSG_BED_TRAMMING, SS_LEFT);
+  STATIC_ITEM(MSG_LAST_VALUE_SP, SS_LEFT, z_isvalid[tram_index] ? ftostr42_52(z_measured[reference_index] - z_measured[tram_index]) : "---");
+  ACTION_ITEM(MSG_UBL_BC_INSERT2, []{ if (probe_single_point()) ui.refresh(); });
+  ACTION_ITEM(MSG_BUTTON_DONE, ui.goto_previous_screen);
+  END_MENU();
+}
+
+static void tramming_wizard_menu() {
+  START_MENU();
+  STATIC_ITEM(MSG_SELECT_ORIGIN);
+
+  // Draw a menu item for each tramming point
+  for (tram_index = 0; tram_index < G35_PROBE_COUNT; tram_index++)
+    SUBMENU_F(FPSTR(pgm_read_ptr(&tramming_point_name[tram_index])), _menu_single_probe);
+
+  ACTION_ITEM(MSG_BUTTON_DONE, []{
+    probe.stow(); // Stow before exiting Tramming Wizard
+    ui.goto_previous_screen_no_defer();
+  });
+  END_MENU();
+}
+
+// Init the wizard and enter the submenu
+void goto_tramming_wizard() {
+  DEBUG_ECHOLNPGM("Screen: goto_tramming_wizard", 1);
+  ui.defer_status_screen();
+
+  // Initialize measured point flags
+  z_isvalid.reset();
+  reference_index = -1;
+
+  // Inject G28, wait for homing to complete,
+  set_all_unhomed();
+  queue.inject(TERN(CAN_SET_LEVELING_AFTER_G28, F("G28L0"), FPSTR(G28_STR)));
+
+  ui.goto_screen([]{
+    _lcd_draw_homing();
+    if (all_axes_homed())
+      ui.goto_screen(tramming_wizard_menu);
+  });
+}
+
+#endif // HAS_MARLINUI_MENU && ASSISTED_TRAMMING_WIZARD
