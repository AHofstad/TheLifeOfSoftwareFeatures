commit f5c7b190f6169f0a213ef4b088e9c4b5ef33b2b8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Apr 11 23:22:36 2023 -0500

    üêõ Fix BLTOUCH_HS_MODE config

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 2ced649a4e..0f9f2e68ba 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -63,27 +63,27 @@ typedef unsigned char BLTCommand;
 #ifndef BLTOUCH_RESET_DELAY
   #define BLTOUCH_RESET_DELAY    500
 #endif
 
 class BLTouch {
 public:
 
   static void init(const bool set_voltage=false);
   static bool od_5v_mode;         // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
 
-  #ifdef BLTOUCH_HS_MODE
+  #if HAS_BLTOUCH_HS_MODE
     static bool high_speed_mode;  // Initialized by settings.load, 0 = Low Speed; 1 = High Speed
   #else
     static constexpr bool high_speed_mode = false;
   #endif
 
-  static float z_extra_clearance() { return high_speed_mode ? TERN0(BLTOUCH_HS_MODE, BLTOUCH_HS_EXTRA_CLEARANCE) : 0; }
+  static float z_extra_clearance() { return TERN0(HAS_BLTOUCH_HS_MODE, high_speed_mode ? BLTOUCH_HS_EXTRA_CLEARANCE : 0); }
 
   // DEPLOY and STOW are wrapped for error handling - these are used by homing and by probing
   static bool deploy()              { return deploy_proc(); }
   static bool stow()                { return stow_proc(); }
   static bool status()              { return status_proc(); }
 
   // Native BLTouch commands ("Underscore"...), used in lcd menus and internally
   static void _reset()              { command(BLTOUCH_RESET, BLTOUCH_RESET_DELAY); }
 
   static void _selftest()           { command(BLTOUCH_SELFTEST, BLTOUCH_DELAY); }

commit c6e564885e65b9bc4fbc490e62ffb3d743eaa1f0
Author: David Fries <David@Fries.net>
Date:   Tue Apr 11 18:37:54 2023 -0500

    ‚ú® BLTOUCH_HS_EXTRA_CLEARANCE (#25655)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index fa857bb96a..2ced649a4e 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -69,21 +69,21 @@ public:
 
   static void init(const bool set_voltage=false);
   static bool od_5v_mode;         // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
 
   #ifdef BLTOUCH_HS_MODE
     static bool high_speed_mode;  // Initialized by settings.load, 0 = Low Speed; 1 = High Speed
   #else
     static constexpr bool high_speed_mode = false;
   #endif
 
-  static float z_extra_clearance() { return high_speed_mode ? 7 : 0; }
+  static float z_extra_clearance() { return high_speed_mode ? TERN0(BLTOUCH_HS_MODE, BLTOUCH_HS_EXTRA_CLEARANCE) : 0; }
 
   // DEPLOY and STOW are wrapped for error handling - these are used by homing and by probing
   static bool deploy()              { return deploy_proc(); }
   static bool stow()                { return stow_proc(); }
   static bool status()              { return status_proc(); }
 
   // Native BLTouch commands ("Underscore"...), used in lcd menus and internally
   static void _reset()              { command(BLTOUCH_RESET, BLTOUCH_RESET_DELAY); }
 
   static void _selftest()           { command(BLTOUCH_SELFTEST, BLTOUCH_DELAY); }

commit 6fb2d8a25f096d084348a6f6930f515d947474d4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Dec 28 02:57:24 2021 -0600

    üßë‚Äçüíª Remove extraneous 'inline' hints

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index ae3ab66300..fa857bb96a 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -69,21 +69,21 @@ public:
 
   static void init(const bool set_voltage=false);
   static bool od_5v_mode;         // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
 
   #ifdef BLTOUCH_HS_MODE
     static bool high_speed_mode;  // Initialized by settings.load, 0 = Low Speed; 1 = High Speed
   #else
     static constexpr bool high_speed_mode = false;
   #endif
 
-  static inline float z_extra_clearance() { return high_speed_mode ? 7 : 0; }
+  static float z_extra_clearance() { return high_speed_mode ? 7 : 0; }
 
   // DEPLOY and STOW are wrapped for error handling - these are used by homing and by probing
   static bool deploy()              { return deploy_proc(); }
   static bool stow()                { return stow_proc(); }
   static bool status()              { return status_proc(); }
 
   // Native BLTouch commands ("Underscore"...), used in lcd menus and internally
   static void _reset()              { command(BLTOUCH_RESET, BLTOUCH_RESET_DELAY); }
 
   static void _selftest()           { command(BLTOUCH_SELFTEST, BLTOUCH_DELAY); }

commit 2893048e2955963bb307a4ca67ec26bb336de2f5
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Tue Dec 21 23:09:55 2021 -0500

    ‚ú® BLTouch High Speed mode runtime configuration (#22916)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 9ecccb4256..ae3ab66300 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -16,24 +16,20 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
 
-#if DISABLED(BLTOUCH_HS_MODE)
-  #define BLTOUCH_SLOW_MODE 1
-#endif
-
 // BLTouch commands are sent as servo angles
 typedef unsigned char BLTCommand;
 
 #define STOW_ALARM            true
 #define BLTOUCH_DEPLOY          10
 #define BLTOUCH_STOW            90
 #define BLTOUCH_SW_MODE         60
 #define BLTOUCH_SELFTEST       120
 #define BLTOUCH_MODE_STORE     130
 #define BLTOUCH_5V_MODE        140
@@ -63,22 +59,31 @@ typedef unsigned char BLTCommand;
 #endif
 #ifndef BLTOUCH_STOW_DELAY
   #define BLTOUCH_STOW_DELAY     750
 #endif
 #ifndef BLTOUCH_RESET_DELAY
   #define BLTOUCH_RESET_DELAY    500
 #endif
 
 class BLTouch {
 public:
+
   static void init(const bool set_voltage=false);
-  static bool last_written_mode; // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
+  static bool od_5v_mode;         // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
+
+  #ifdef BLTOUCH_HS_MODE
+    static bool high_speed_mode;  // Initialized by settings.load, 0 = Low Speed; 1 = High Speed
+  #else
+    static constexpr bool high_speed_mode = false;
+  #endif
+
+  static inline float z_extra_clearance() { return high_speed_mode ? 7 : 0; }
 
   // DEPLOY and STOW are wrapped for error handling - these are used by homing and by probing
   static bool deploy()              { return deploy_proc(); }
   static bool stow()                { return stow_proc(); }
   static bool status()              { return status_proc(); }
 
   // Native BLTouch commands ("Underscore"...), used in lcd menus and internally
   static void _reset()              { command(BLTOUCH_RESET, BLTOUCH_RESET_DELAY); }
 
   static void _selftest()           { command(BLTOUCH_SELFTEST, BLTOUCH_DELAY); }

commit d30b5481f5373559bc152d48a48ebabc5304acff
Author: Ramiro Polla <ramiropolla@users.noreply.github.com>
Date:   Tue Mar 30 03:56:44 2021 +0200

    Optimize BLTouch code for size (#21477)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 8bd41f03e4..9ecccb4256 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -67,47 +67,47 @@ typedef unsigned char BLTCommand;
 #ifndef BLTOUCH_RESET_DELAY
   #define BLTOUCH_RESET_DELAY    500
 #endif
 
 class BLTouch {
 public:
   static void init(const bool set_voltage=false);
   static bool last_written_mode; // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
 
   // DEPLOY and STOW are wrapped for error handling - these are used by homing and by probing
-  FORCE_INLINE static bool deploy()              { return deploy_proc(); }
-  FORCE_INLINE static bool stow()                { return stow_proc(); }
-  FORCE_INLINE static bool status()              { return status_proc(); }
+  static bool deploy()              { return deploy_proc(); }
+  static bool stow()                { return stow_proc(); }
+  static bool status()              { return status_proc(); }
 
   // Native BLTouch commands ("Underscore"...), used in lcd menus and internally
-  FORCE_INLINE static void _reset()              { command(BLTOUCH_RESET, BLTOUCH_RESET_DELAY); }
+  static void _reset()              { command(BLTOUCH_RESET, BLTOUCH_RESET_DELAY); }
 
-  FORCE_INLINE static void _selftest()           { command(BLTOUCH_SELFTEST, BLTOUCH_DELAY); }
+  static void _selftest()           { command(BLTOUCH_SELFTEST, BLTOUCH_DELAY); }
 
-  FORCE_INLINE static void _set_SW_mode()        { command(BLTOUCH_SW_MODE, BLTOUCH_DELAY); }
-  FORCE_INLINE static void _reset_SW_mode()      { if (triggered()) _stow(); else _deploy(); }
+  static void _set_SW_mode()        { command(BLTOUCH_SW_MODE, BLTOUCH_DELAY); }
+  static void _reset_SW_mode()      { if (triggered()) _stow(); else _deploy(); }
 
-  FORCE_INLINE static void _set_5V_mode()        { command(BLTOUCH_5V_MODE, BLTOUCH_SET5V_DELAY); }
-  FORCE_INLINE static void _set_OD_mode()        { command(BLTOUCH_OD_MODE, BLTOUCH_SETOD_DELAY); }
-  FORCE_INLINE static void _mode_store()         { command(BLTOUCH_MODE_STORE, BLTOUCH_MODE_STORE_DELAY); }
+  static void _set_5V_mode()        { command(BLTOUCH_5V_MODE, BLTOUCH_SET5V_DELAY); }
+  static void _set_OD_mode()        { command(BLTOUCH_OD_MODE, BLTOUCH_SETOD_DELAY); }
+  static void _mode_store()         { command(BLTOUCH_MODE_STORE, BLTOUCH_MODE_STORE_DELAY); }
 
-  FORCE_INLINE static void _deploy()             { command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
-  FORCE_INLINE static void _stow()               { command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
+  static void _deploy()             { command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
+  static void _stow()               { command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
 
-  FORCE_INLINE static void mode_conv_5V()        { mode_conv_proc(true); }
-  FORCE_INLINE static void mode_conv_OD()        { mode_conv_proc(false); }
+  static void mode_conv_5V()        { mode_conv_proc(true); }
+  static void mode_conv_OD()        { mode_conv_proc(false); }
 
   static bool triggered();
 
 private:
-  FORCE_INLINE static bool _deploy_query_alarm() { return command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
-  FORCE_INLINE static bool _stow_query_alarm()   { return command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY) == STOW_ALARM; }
+  static bool _deploy_query_alarm() { return command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
+  static bool _stow_query_alarm()   { return command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY) == STOW_ALARM; }
 
   static void clear();
   static bool command(const BLTCommand cmd, const millis_t &ms);
   static bool deploy_proc();
   static bool stow_proc();
   static bool status_proc();
   static void mode_conv_proc(const bool M5V);
 };
 
 extern BLTouch bltouch;

commit d00c89946dac44326dd1eb0fd381fb404cfd654d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Dec 27 16:15:15 2020 -0600

    Remove CREALITY_TOUCH

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 5880bdce75..8bd41f03e4 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -23,30 +23,23 @@
 
 #include "../inc/MarlinConfigPre.h"
 
 #if DISABLED(BLTOUCH_HS_MODE)
   #define BLTOUCH_SLOW_MODE 1
 #endif
 
 // BLTouch commands are sent as servo angles
 typedef unsigned char BLTCommand;
 
-#if ENABLED(CREALITY_TOUCH)
-  #define STOW_ALARM         false
-  #define BLTOUCH_DEPLOY       170
-  #define BLTOUCH_STOW          20
-#else
-  #define STOW_ALARM          true
-  #define BLTOUCH_DEPLOY        10
-  #define BLTOUCH_STOW          90
-#endif
-
+#define STOW_ALARM            true
+#define BLTOUCH_DEPLOY          10
+#define BLTOUCH_STOW            90
 #define BLTOUCH_SW_MODE         60
 #define BLTOUCH_SELFTEST       120
 #define BLTOUCH_MODE_STORE     130
 #define BLTOUCH_5V_MODE        140
 #define BLTOUCH_OD_MODE        150
 #define BLTOUCH_RESET          160
 
 /**
  * The following commands require different minimum delays.
  *

commit c87c354403342ea12fce220116665e22efbe8194
Author: wmariz <11435639+wmariz@users.noreply.github.com>
Date:   Wed Dec 23 03:10:56 2020 -0300

    Refactor 'Level Corners with Probe' (#20460)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 40685af1b3..5880bdce75 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -16,20 +16,24 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
 
+#if DISABLED(BLTOUCH_HS_MODE)
+  #define BLTOUCH_SLOW_MODE 1
+#endif
+
 // BLTouch commands are sent as servo angles
 typedef unsigned char BLTCommand;
 
 #if ENABLED(CREALITY_TOUCH)
   #define STOW_ALARM         false
   #define BLTOUCH_DEPLOY       170
   #define BLTOUCH_STOW          20
 #else
   #define STOW_ALARM          true
   #define BLTOUCH_DEPLOY        10

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 797cc7df87..40685af1b3 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
 
 // BLTouch commands are sent as servo angles
 typedef unsigned char BLTCommand;
 
 #if ENABLED(CREALITY_TOUCH)

commit f4c258dc2355fee871bec6e11095c7c4777b160d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jun 16 01:45:27 2020 -0500

    Creality Ender 3 v2 (#17719)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index af75fb8b29..797cc7df87 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -19,23 +19,31 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
 
 // BLTouch commands are sent as servo angles
 typedef unsigned char BLTCommand;
 
-#define BLTOUCH_DEPLOY          10
+#if ENABLED(CREALITY_TOUCH)
+  #define STOW_ALARM         false
+  #define BLTOUCH_DEPLOY       170
+  #define BLTOUCH_STOW          20
+#else
+  #define STOW_ALARM          true
+  #define BLTOUCH_DEPLOY        10
+  #define BLTOUCH_STOW          90
+#endif
+
 #define BLTOUCH_SW_MODE         60
-#define BLTOUCH_STOW            90
 #define BLTOUCH_SELFTEST       120
 #define BLTOUCH_MODE_STORE     130
 #define BLTOUCH_5V_MODE        140
 #define BLTOUCH_OD_MODE        150
 #define BLTOUCH_RESET          160
 
 /**
  * The following commands require different minimum delays.
  *
  * 500ms required for a reliable Reset.
@@ -88,21 +96,21 @@ public:
   FORCE_INLINE static void _deploy()             { command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
   FORCE_INLINE static void _stow()               { command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
 
   FORCE_INLINE static void mode_conv_5V()        { mode_conv_proc(true); }
   FORCE_INLINE static void mode_conv_OD()        { mode_conv_proc(false); }
 
   static bool triggered();
 
 private:
   FORCE_INLINE static bool _deploy_query_alarm() { return command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
-  FORCE_INLINE static bool _stow_query_alarm()   { return command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
+  FORCE_INLINE static bool _stow_query_alarm()   { return command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY) == STOW_ALARM; }
 
   static void clear();
   static bool command(const BLTCommand cmd, const millis_t &ms);
   static bool deploy_proc();
   static bool stow_proc();
   static bool status_proc();
   static void mode_conv_proc(const bool M5V);
 };
 
 extern BLTouch bltouch;

commit 0a7e7a6fa59172f61d3d6ed94d9ccf055c85bf27
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Feb 26 06:26:54 2020 -0600

    Allow servo features in combination (#16960)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 58c5b9ad36..af75fb8b29 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -98,14 +98,11 @@ private:
   FORCE_INLINE static bool _stow_query_alarm()   { return command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
 
   static void clear();
   static bool command(const BLTCommand cmd, const millis_t &ms);
   static bool deploy_proc();
   static bool stow_proc();
   static bool status_proc();
   static void mode_conv_proc(const bool M5V);
 };
 
-// Deploy/stow angles for use by servo.cpp / servo.h
-#define BLTOUCH_ANGLES { BLTOUCH_DEPLOY, BLTOUCH_STOW }
-
 extern BLTouch bltouch;

commit 84b6e11bd53acbfde0ad82445e21d7bce1cc14f6
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Feb 9 08:46:38 2020 -0500

    Better probe fail handling (#16811)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index f4a921d5ba..58c5b9ad36 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -84,27 +84,28 @@ public:
   FORCE_INLINE static void _set_5V_mode()        { command(BLTOUCH_5V_MODE, BLTOUCH_SET5V_DELAY); }
   FORCE_INLINE static void _set_OD_mode()        { command(BLTOUCH_OD_MODE, BLTOUCH_SETOD_DELAY); }
   FORCE_INLINE static void _mode_store()         { command(BLTOUCH_MODE_STORE, BLTOUCH_MODE_STORE_DELAY); }
 
   FORCE_INLINE static void _deploy()             { command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
   FORCE_INLINE static void _stow()               { command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
 
   FORCE_INLINE static void mode_conv_5V()        { mode_conv_proc(true); }
   FORCE_INLINE static void mode_conv_OD()        { mode_conv_proc(false); }
 
+  static bool triggered();
+
 private:
   FORCE_INLINE static bool _deploy_query_alarm() { return command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
   FORCE_INLINE static bool _stow_query_alarm()   { return command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
 
   static void clear();
   static bool command(const BLTCommand cmd, const millis_t &ms);
-  static bool triggered();
   static bool deploy_proc();
   static bool stow_proc();
   static bool status_proc();
   static void mode_conv_proc(const bool M5V);
 };
 
 // Deploy/stow angles for use by servo.cpp / servo.h
 #define BLTOUCH_ANGLES { BLTOUCH_DEPLOY, BLTOUCH_STOW }
 
 extern BLTouch bltouch;

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 9f27962229..f4a921d5ba 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 8c05008d6e..9f27962229 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -1,16 +1,16 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.

commit 6578aa4e1b7b36c084ec49f288b38a2b43902720
Author: BigIronGuru <51454533+BigIronGuru@users.noreply.github.com>
Date:   Sun Jun 23 00:20:19 2019 +0200

    Apply minimum timing to BLTouch commands (#14369)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index b349c61804..8c05008d6e 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -29,47 +29,45 @@ typedef unsigned char BLTCommand;
 #define BLTOUCH_DEPLOY          10
 #define BLTOUCH_SW_MODE         60
 #define BLTOUCH_STOW            90
 #define BLTOUCH_SELFTEST       120
 #define BLTOUCH_MODE_STORE     130
 #define BLTOUCH_5V_MODE        140
 #define BLTOUCH_OD_MODE        150
 #define BLTOUCH_RESET          160
 
 /**
- * The following commands may require different delays.
+ * The following commands require different minimum delays.
  *
- * ANTClabs recommends 2000ms for 5V/OD commands. However it is
- * not common for other commands to immediately follow these,
- * and testing has shown that these complete in 500ms reliably.
+ * 500ms required for a reliable Reset.
  *
- * AntClabs recommends 750ms for Deploy/Stow, otherwise you will
- * not catch an alarm state until the following move command.
+ * 750ms required for Deploy/Stow, otherwise the alarm state
+ *       will not be seen until the following move command.
  */
 
 #ifndef BLTOUCH_SET5V_DELAY
-  #define BLTOUCH_SET5V_DELAY   BLTOUCH_DELAY
+  #define BLTOUCH_SET5V_DELAY   150
 #endif
 #ifndef BLTOUCH_SETOD_DELAY
-  #define BLTOUCH_SETOD_DELAY   BLTOUCH_DELAY
+  #define BLTOUCH_SETOD_DELAY   150
 #endif
 #ifndef BLTOUCH_MODE_STORE_DELAY
-  #define BLTOUCH_MODE_STORE_DELAY   BLTOUCH_DELAY
+  #define BLTOUCH_MODE_STORE_DELAY 150
 #endif
 #ifndef BLTOUCH_DEPLOY_DELAY
   #define BLTOUCH_DEPLOY_DELAY   750
 #endif
 #ifndef BLTOUCH_STOW_DELAY
   #define BLTOUCH_STOW_DELAY     750
 #endif
 #ifndef BLTOUCH_RESET_DELAY
-  #define BLTOUCH_RESET_DELAY    BLTOUCH_DELAY
+  #define BLTOUCH_RESET_DELAY    500
 #endif
 
 class BLTouch {
 public:
   static void init(const bool set_voltage=false);
   static bool last_written_mode; // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
 
   // DEPLOY and STOW are wrapped for error handling - these are used by homing and by probing
   FORCE_INLINE static bool deploy()              { return deploy_proc(); }
   FORCE_INLINE static bool stow()                { return stow_proc(); }

commit 49e83dd7c81cffef7462a0a53a70a125562de83a
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sat May 25 22:56:47 2019 -0400

    BLTouch V3.1 changes (#14104)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 25a1191935..b349c61804 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -60,22 +60,22 @@ typedef unsigned char BLTCommand;
 #endif
 #ifndef BLTOUCH_STOW_DELAY
   #define BLTOUCH_STOW_DELAY     750
 #endif
 #ifndef BLTOUCH_RESET_DELAY
   #define BLTOUCH_RESET_DELAY    BLTOUCH_DELAY
 #endif
 
 class BLTouch {
 public:
-  static bool triggered();         // used by menu_advanced.cpp
-  static void init();              // used by main.cpp
+  static void init(const bool set_voltage=false);
+  static bool last_written_mode; // Initialized by settings.load, 0 = Open Drain; 1 = 5V Drain
 
   // DEPLOY and STOW are wrapped for error handling - these are used by homing and by probing
   FORCE_INLINE static bool deploy()              { return deploy_proc(); }
   FORCE_INLINE static bool stow()                { return stow_proc(); }
   FORCE_INLINE static bool status()              { return status_proc(); }
 
   // Native BLTouch commands ("Underscore"...), used in lcd menus and internally
   FORCE_INLINE static void _reset()              { command(BLTOUCH_RESET, BLTOUCH_RESET_DELAY); }
 
   FORCE_INLINE static void _selftest()           { command(BLTOUCH_SELFTEST, BLTOUCH_DELAY); }
@@ -83,25 +83,30 @@ public:
   FORCE_INLINE static void _set_SW_mode()        { command(BLTOUCH_SW_MODE, BLTOUCH_DELAY); }
   FORCE_INLINE static void _reset_SW_mode()      { if (triggered()) _stow(); else _deploy(); }
 
   FORCE_INLINE static void _set_5V_mode()        { command(BLTOUCH_5V_MODE, BLTOUCH_SET5V_DELAY); }
   FORCE_INLINE static void _set_OD_mode()        { command(BLTOUCH_OD_MODE, BLTOUCH_SETOD_DELAY); }
   FORCE_INLINE static void _mode_store()         { command(BLTOUCH_MODE_STORE, BLTOUCH_MODE_STORE_DELAY); }
 
   FORCE_INLINE static void _deploy()             { command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
   FORCE_INLINE static void _stow()               { command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
 
+  FORCE_INLINE static void mode_conv_5V()        { mode_conv_proc(true); }
+  FORCE_INLINE static void mode_conv_OD()        { mode_conv_proc(false); }
+
 private:
   FORCE_INLINE static bool _deploy_query_alarm() { return command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
   FORCE_INLINE static bool _stow_query_alarm()   { return command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
 
   static void clear();
   static bool command(const BLTCommand cmd, const millis_t &ms);
+  static bool triggered();
   static bool deploy_proc();
   static bool stow_proc();
   static bool status_proc();
+  static void mode_conv_proc(const bool M5V);
 };
 
 // Deploy/stow angles for use by servo.cpp / servo.h
 #define BLTOUCH_ANGLES { BLTOUCH_DEPLOY, BLTOUCH_STOW }
 
 extern BLTouch bltouch;

commit 85fb33a060354a70348f220085405ae7bfb939c5
Author: FanDjango <FanDjango@users.noreply.github.com>
Date:   Sat May 18 02:10:18 2019 +0200

    BLTOUCH tweaks, new v3.1 command (#14015)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 70fb22f717..25a1191935 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -23,20 +23,21 @@
 
 #include "../inc/MarlinConfigPre.h"
 
 // BLTouch commands are sent as servo angles
 typedef unsigned char BLTCommand;
 
 #define BLTOUCH_DEPLOY          10
 #define BLTOUCH_SW_MODE         60
 #define BLTOUCH_STOW            90
 #define BLTOUCH_SELFTEST       120
+#define BLTOUCH_MODE_STORE     130
 #define BLTOUCH_5V_MODE        140
 #define BLTOUCH_OD_MODE        150
 #define BLTOUCH_RESET          160
 
 /**
  * The following commands may require different delays.
  *
  * ANTClabs recommends 2000ms for 5V/OD commands. However it is
  * not common for other commands to immediately follow these,
  * and testing has shown that these complete in 500ms reliably.
@@ -44,20 +45,23 @@ typedef unsigned char BLTCommand;
  * AntClabs recommends 750ms for Deploy/Stow, otherwise you will
  * not catch an alarm state until the following move command.
  */
 
 #ifndef BLTOUCH_SET5V_DELAY
   #define BLTOUCH_SET5V_DELAY   BLTOUCH_DELAY
 #endif
 #ifndef BLTOUCH_SETOD_DELAY
   #define BLTOUCH_SETOD_DELAY   BLTOUCH_DELAY
 #endif
+#ifndef BLTOUCH_MODE_STORE_DELAY
+  #define BLTOUCH_MODE_STORE_DELAY   BLTOUCH_DELAY
+#endif
 #ifndef BLTOUCH_DEPLOY_DELAY
   #define BLTOUCH_DEPLOY_DELAY   750
 #endif
 #ifndef BLTOUCH_STOW_DELAY
   #define BLTOUCH_STOW_DELAY     750
 #endif
 #ifndef BLTOUCH_RESET_DELAY
   #define BLTOUCH_RESET_DELAY    BLTOUCH_DELAY
 #endif
 
@@ -70,22 +74,25 @@ public:
   FORCE_INLINE static bool deploy()              { return deploy_proc(); }
   FORCE_INLINE static bool stow()                { return stow_proc(); }
   FORCE_INLINE static bool status()              { return status_proc(); }
 
   // Native BLTouch commands ("Underscore"...), used in lcd menus and internally
   FORCE_INLINE static void _reset()              { command(BLTOUCH_RESET, BLTOUCH_RESET_DELAY); }
 
   FORCE_INLINE static void _selftest()           { command(BLTOUCH_SELFTEST, BLTOUCH_DELAY); }
 
   FORCE_INLINE static void _set_SW_mode()        { command(BLTOUCH_SW_MODE, BLTOUCH_DELAY); }
+  FORCE_INLINE static void _reset_SW_mode()      { if (triggered()) _stow(); else _deploy(); }
+
   FORCE_INLINE static void _set_5V_mode()        { command(BLTOUCH_5V_MODE, BLTOUCH_SET5V_DELAY); }
   FORCE_INLINE static void _set_OD_mode()        { command(BLTOUCH_OD_MODE, BLTOUCH_SETOD_DELAY); }
+  FORCE_INLINE static void _mode_store()         { command(BLTOUCH_MODE_STORE, BLTOUCH_MODE_STORE_DELAY); }
 
   FORCE_INLINE static void _deploy()             { command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
   FORCE_INLINE static void _stow()               { command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
 
 private:
   FORCE_INLINE static bool _deploy_query_alarm() { return command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
   FORCE_INLINE static bool _stow_query_alarm()   { return command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
 
   static void clear();
   static bool command(const BLTCommand cmd, const millis_t &ms);

commit 6811e2921bcd272e7487e4f379b42a5a403a07c2
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Tue May 7 22:25:54 2019 -0400

    BLTouch v3 / 3DTouch Interoperability & performance (#13814)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 553caa60ad..70fb22f717 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -19,44 +19,82 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
 
 // BLTouch commands are sent as servo angles
 typedef unsigned char BLTCommand;
 
-#define BLTOUCH_DEPLOY    10
-#define BLTOUCH_SW_MODE   60
-#define BLTOUCH_STOW      90
-#define BLTOUCH_SELFTEST 120
-#define BLTOUCH_5V_MODE  140
-#define BLTOUCH_OD_MODE  150
-#define BLTOUCH_RESET    160
+#define BLTOUCH_DEPLOY          10
+#define BLTOUCH_SW_MODE         60
+#define BLTOUCH_STOW            90
+#define BLTOUCH_SELFTEST       120
+#define BLTOUCH_5V_MODE        140
+#define BLTOUCH_OD_MODE        150
+#define BLTOUCH_RESET          160
+
+/**
+ * The following commands may require different delays.
+ *
+ * ANTClabs recommends 2000ms for 5V/OD commands. However it is
+ * not common for other commands to immediately follow these,
+ * and testing has shown that these complete in 500ms reliably.
+ *
+ * AntClabs recommends 750ms for Deploy/Stow, otherwise you will
+ * not catch an alarm state until the following move command.
+ */
+
+#ifndef BLTOUCH_SET5V_DELAY
+  #define BLTOUCH_SET5V_DELAY   BLTOUCH_DELAY
+#endif
+#ifndef BLTOUCH_SETOD_DELAY
+  #define BLTOUCH_SETOD_DELAY   BLTOUCH_DELAY
+#endif
+#ifndef BLTOUCH_DEPLOY_DELAY
+  #define BLTOUCH_DEPLOY_DELAY   750
+#endif
+#ifndef BLTOUCH_STOW_DELAY
+  #define BLTOUCH_STOW_DELAY     750
+#endif
+#ifndef BLTOUCH_RESET_DELAY
+  #define BLTOUCH_RESET_DELAY    BLTOUCH_DELAY
+#endif
 
 class BLTouch {
 public:
-  static void init();
-  static void command(const BLTCommand cmd);
-  static bool triggered();
+  static bool triggered();         // used by menu_advanced.cpp
+  static void init();              // used by main.cpp
 
-  FORCE_INLINE static void reset()       { command(BLTOUCH_RESET); }
-  FORCE_INLINE static void selftest()    { command(BLTOUCH_SELFTEST); }
+  // DEPLOY and STOW are wrapped for error handling - these are used by homing and by probing
+  FORCE_INLINE static bool deploy()              { return deploy_proc(); }
+  FORCE_INLINE static bool stow()                { return stow_proc(); }
+  FORCE_INLINE static bool status()              { return status_proc(); }
 
-  FORCE_INLINE static void set_5V_mode() { command(BLTOUCH_5V_MODE); }
-  FORCE_INLINE static void set_OD_mode() { command(BLTOUCH_OD_MODE); }
-  FORCE_INLINE static void set_SW_mode() { command(BLTOUCH_SW_MODE); }
+  // Native BLTouch commands ("Underscore"...), used in lcd menus and internally
+  FORCE_INLINE static void _reset()              { command(BLTOUCH_RESET, BLTOUCH_RESET_DELAY); }
 
-  FORCE_INLINE static bool deploy()      { return set_deployed(true); }
-  FORCE_INLINE static bool stow()        { return set_deployed(false); }
+  FORCE_INLINE static void _selftest()           { command(BLTOUCH_SELFTEST, BLTOUCH_DELAY); }
 
-  FORCE_INLINE static void _deploy()     { command(BLTOUCH_DEPLOY); }
-  FORCE_INLINE static void _stow()       { command(BLTOUCH_STOW); }
+  FORCE_INLINE static void _set_SW_mode()        { command(BLTOUCH_SW_MODE, BLTOUCH_DELAY); }
+  FORCE_INLINE static void _set_5V_mode()        { command(BLTOUCH_5V_MODE, BLTOUCH_SET5V_DELAY); }
+  FORCE_INLINE static void _set_OD_mode()        { command(BLTOUCH_OD_MODE, BLTOUCH_SETOD_DELAY); }
+
+  FORCE_INLINE static void _deploy()             { command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
+  FORCE_INLINE static void _stow()               { command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
 
 private:
-  static bool set_deployed(const bool deploy);
+  FORCE_INLINE static bool _deploy_query_alarm() { return command(BLTOUCH_DEPLOY, BLTOUCH_DEPLOY_DELAY); }
+  FORCE_INLINE static bool _stow_query_alarm()   { return command(BLTOUCH_STOW, BLTOUCH_STOW_DELAY); }
+
+  static void clear();
+  static bool command(const BLTCommand cmd, const millis_t &ms);
+  static bool deploy_proc();
+  static bool stow_proc();
+  static bool status_proc();
 };
 
+// Deploy/stow angles for use by servo.cpp / servo.h
 #define BLTOUCH_ANGLES { BLTOUCH_DEPLOY, BLTOUCH_STOW }
 
 extern BLTouch bltouch;

commit eb91f08725f72f104c43f147ae47e496d43def34
Author: InsanityAutomation <d.menzel@insanityautomation.com>
Date:   Tue Mar 26 11:24:52 2019 -0400

    Update descriptions and dont call unneeded functions

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 09fe1d7997..553caa60ad 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -36,35 +36,23 @@ typedef unsigned char BLTCommand;
 
 class BLTouch {
 public:
   static void init();
   static void command(const BLTCommand cmd);
   static bool triggered();
 
   FORCE_INLINE static void reset()       { command(BLTOUCH_RESET); }
   FORCE_INLINE static void selftest()    { command(BLTOUCH_SELFTEST); }
 
-  FORCE_INLINE static void set_5V_mode() { 
-    #if ENABLED(BLTOUCH_V3)
-      command(BLTOUCH_5V_MODE);
-    #endif
-  }
-  FORCE_INLINE static void set_OD_mode() {
-    #if ENABLED(BLTOUCH_V3)
-      command(BLTOUCH_OD_MODE);
-    #endif
-  }
-  FORCE_INLINE static void set_SW_mode() {
-    #if ENABLED(BLTOUCH_V3)
-      command(BLTOUCH_SW_MODE);
-    #endif
-  }
+  FORCE_INLINE static void set_5V_mode() { command(BLTOUCH_5V_MODE); }
+  FORCE_INLINE static void set_OD_mode() { command(BLTOUCH_OD_MODE); }
+  FORCE_INLINE static void set_SW_mode() { command(BLTOUCH_SW_MODE); }
 
   FORCE_INLINE static bool deploy()      { return set_deployed(true); }
   FORCE_INLINE static bool stow()        { return set_deployed(false); }
 
   FORCE_INLINE static void _deploy()     { command(BLTOUCH_DEPLOY); }
   FORCE_INLINE static void _stow()       { command(BLTOUCH_STOW); }
 
 private:
   static bool set_deployed(const bool deploy);
 };

commit 407202cc0f67ead32cdc15ea3551b83d142e1e31
Author: Scott Alfter <scott@alfter.us>
Date:   Sat Mar 23 21:28:15 2019 -0700

    Fix BLTouch pre-3.0 compatibility (#13454)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index 9e6a5c09fb..09fe1d7997 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -34,27 +34,40 @@ typedef unsigned char BLTCommand;
 #define BLTOUCH_OD_MODE  150
 #define BLTOUCH_RESET    160
 
 class BLTouch {
 public:
   static void init();
   static void command(const BLTCommand cmd);
   static bool triggered();
 
   FORCE_INLINE static void reset()       { command(BLTOUCH_RESET); }
-  FORCE_INLINE static void set_5V_mode() { command(BLTOUCH_5V_MODE); }
-  FORCE_INLINE static void set_OD_mode() { command(BLTOUCH_OD_MODE); }
-  FORCE_INLINE static void set_SW_mode() { command(BLTOUCH_SW_MODE); }
   FORCE_INLINE static void selftest()    { command(BLTOUCH_SELFTEST); }
 
-  FORCE_INLINE static bool deploy() { return set_deployed(true); }
-  FORCE_INLINE static bool stow()   { return set_deployed(false); }
+  FORCE_INLINE static void set_5V_mode() { 
+    #if ENABLED(BLTOUCH_V3)
+      command(BLTOUCH_5V_MODE);
+    #endif
+  }
+  FORCE_INLINE static void set_OD_mode() {
+    #if ENABLED(BLTOUCH_V3)
+      command(BLTOUCH_OD_MODE);
+    #endif
+  }
+  FORCE_INLINE static void set_SW_mode() {
+    #if ENABLED(BLTOUCH_V3)
+      command(BLTOUCH_SW_MODE);
+    #endif
+  }
+
+  FORCE_INLINE static bool deploy()      { return set_deployed(true); }
+  FORCE_INLINE static bool stow()        { return set_deployed(false); }
 
   FORCE_INLINE static void _deploy()     { command(BLTOUCH_DEPLOY); }
   FORCE_INLINE static void _stow()       { command(BLTOUCH_STOW); }
 
 private:
   static bool set_deployed(const bool deploy);
 };
 
 #define BLTOUCH_ANGLES { BLTOUCH_DEPLOY, BLTOUCH_STOW }
 

commit 5eeffab5e5ae5b46d027a876e923a8d8b995c11e
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sat Mar 23 23:58:34 2019 -0400

    Fix BLTouch Menus (#13441)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
index c51d1b4a14..9e6a5c09fb 100644
--- a/Marlin/src/feature/bltouch.h
+++ b/Marlin/src/feature/bltouch.h
@@ -37,23 +37,25 @@ typedef unsigned char BLTCommand;
 class BLTouch {
 public:
   static void init();
   static void command(const BLTCommand cmd);
   static bool triggered();
 
   FORCE_INLINE static void reset()       { command(BLTOUCH_RESET); }
   FORCE_INLINE static void set_5V_mode() { command(BLTOUCH_5V_MODE); }
   FORCE_INLINE static void set_OD_mode() { command(BLTOUCH_OD_MODE); }
   FORCE_INLINE static void set_SW_mode() { command(BLTOUCH_SW_MODE); }
+  FORCE_INLINE static void selftest()    { command(BLTOUCH_SELFTEST); }
 
   FORCE_INLINE static bool deploy() { return set_deployed(true); }
   FORCE_INLINE static bool stow()   { return set_deployed(false); }
 
-private:
   FORCE_INLINE static void _deploy()     { command(BLTOUCH_DEPLOY); }
   FORCE_INLINE static void _stow()       { command(BLTOUCH_STOW); }
+
+private:
   static bool set_deployed(const bool deploy);
 };
 
 #define BLTOUCH_ANGLES { BLTOUCH_DEPLOY, BLTOUCH_STOW }
 
 extern BLTouch bltouch;

commit 691e5c3bb8d04b0b6690424034d73ade19e91586
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Mar 17 06:57:25 2019 -0400

    BLTouch V3.0 support (#13406)

diff --git a/Marlin/src/feature/bltouch.h b/Marlin/src/feature/bltouch.h
new file mode 100644
index 0000000000..c51d1b4a14
--- /dev/null
+++ b/Marlin/src/feature/bltouch.h
@@ -0,0 +1,59 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+#include "../inc/MarlinConfigPre.h"
+
+// BLTouch commands are sent as servo angles
+typedef unsigned char BLTCommand;
+
+#define BLTOUCH_DEPLOY    10
+#define BLTOUCH_SW_MODE   60
+#define BLTOUCH_STOW      90
+#define BLTOUCH_SELFTEST 120
+#define BLTOUCH_5V_MODE  140
+#define BLTOUCH_OD_MODE  150
+#define BLTOUCH_RESET    160
+
+class BLTouch {
+public:
+  static void init();
+  static void command(const BLTCommand cmd);
+  static bool triggered();
+
+  FORCE_INLINE static void reset()       { command(BLTOUCH_RESET); }
+  FORCE_INLINE static void set_5V_mode() { command(BLTOUCH_5V_MODE); }
+  FORCE_INLINE static void set_OD_mode() { command(BLTOUCH_OD_MODE); }
+  FORCE_INLINE static void set_SW_mode() { command(BLTOUCH_SW_MODE); }
+
+  FORCE_INLINE static bool deploy() { return set_deployed(true); }
+  FORCE_INLINE static bool stow()   { return set_deployed(false); }
+
+private:
+  FORCE_INLINE static void _deploy()     { command(BLTOUCH_DEPLOY); }
+  FORCE_INLINE static void _stow()       { command(BLTOUCH_STOW); }
+  static bool set_deployed(const bool deploy);
+};
+
+#define BLTOUCH_ANGLES { BLTOUCH_DEPLOY, BLTOUCH_STOW }
+
+extern BLTouch bltouch;
