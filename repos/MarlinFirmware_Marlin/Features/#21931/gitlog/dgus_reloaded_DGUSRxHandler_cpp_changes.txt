commit 521e7eafce4921a36532e0a89f2cc7417c2c4e21
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue May 21 15:42:56 2024 -0500

    üßë‚Äçüíª Clarify media "mounted"

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index a93832da30..d408b49e83 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -49,7 +49,7 @@ void DGUSRxHandler::screenChange(DGUS_VP &vp, void *data_ptr) {
     #if HAS_MEDIA
       IF_DISABLED(HAS_SD_DETECT, card.mount());
 
-      if (!ExtUI::isMediaInserted()) {
+      if (!ExtUI::isMediaMounted()) {
         screen.setStatusMessage(GET_TEXT_F(MSG_NO_MEDIA));
         return;
       }

commit f5f6c37c17edd6e710bc48578aa325f317d47d51
Author: Alexander Thomas Julian <ajulian@hawk.iit.edu>
Date:   Sun May 12 13:25:14 2024 -0500

    üêõ LCD Bed Tramming fixes (#26962)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index b8ef8bcacc..a93832da30 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -474,29 +474,28 @@ void DGUSRxHandler::moveToPoint(DGUS_VP &vp, void *data_ptr) {
       y = DGUS_LEVEL_CENTER_Y;
       break;
     case 2:
-      x = X_MIN_POS + lfrb[0];
-      y = Y_MIN_POS + lfrb[1];
+      x = X_MIN_BED + lfrb[0];
+      y = Y_MIN_BED + lfrb[1];
       break;
     case 3:
-      x = X_MAX_POS - lfrb[2];
-      y = Y_MIN_POS + lfrb[1];
+      x = X_MAX_BED - lfrb[2];
+      y = Y_MIN_BED + lfrb[1];
       break;
     case 4:
-      x = X_MAX_POS - lfrb[2];
-      y = Y_MAX_POS - lfrb[3];
+      x = X_MAX_BED - lfrb[2];
+      y = Y_MAX_BED - lfrb[3];
       break;
     case 5:
-      x = X_MIN_POS + lfrb[0];
-      y = Y_MAX_POS - lfrb[3];
+      x = X_MIN_BED + lfrb[0];
+      y = Y_MAX_BED - lfrb[3];
       break;
   }
 
-  if (ExtUI::getAxisPosition_mm(ExtUI::Z) < Z_MIN_POS + BED_TRAMMING_Z_HOP) {
-    ExtUI::setAxisPosition_mm(Z_MIN_POS + BED_TRAMMING_Z_HOP, ExtUI::Z);
-  }
+  if (BED_TRAMMING_Z_HOP)
+    ExtUI::setAxisPosition_mm(ExtUI::getAxisPosition_mm(ExtUI::Z) + (BED_TRAMMING_Z_HOP), ExtUI::Z);
   ExtUI::setAxisPosition_mm(x, ExtUI::X);
   ExtUI::setAxisPosition_mm(y, ExtUI::Y);
-  ExtUI::setAxisPosition_mm(Z_MIN_POS + BED_TRAMMING_HEIGHT, ExtUI::Z);
+  ExtUI::setAxisPosition_mm((Z_MIN_POS) + (BED_TRAMMING_HEIGHT), ExtUI::Z);
 }
 
 void DGUSRxHandler::probe(DGUS_VP &vp, void *data_ptr) {

commit 87e94f456348e944ba4487aed436c762dd718966
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon Apr 1 16:05:11 2024 -0400

    üö∏ Update ProUI Plot graph - part 2 (#26563)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index c953b417a5..b8ef8bcacc 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -598,7 +598,7 @@ void DGUSRxHandler::filamentMove(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (ExtUI::getActualTemp_celsius(extruder) < (float)EXTRUDE_MINTEMP) {
-    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_TEMP_TOO_LOW));
+    screen.setStatusMessage(GET_TEXT_F(MSG_TEMP_TOO_LOW));
     return;
   }
 

commit cb291e8d00a6c1ee0a778625e0170b6b7430a004
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 9 22:41:00 2024 -0600

    ü©π Fix some temp constraints

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index aa58e85692..c953b417a5 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -809,15 +809,19 @@ void DGUSRxHandler::pidSetTemp(DGUS_VP &vp, void *data_ptr) {
 
   switch (screen.pid_heater) {
     default: return;
-    case DGUS_Data::Heater::BED:
-      temp = constrain(temp, BED_MINTEMP, BED_MAX_TARGET);
-      break;
-    case DGUS_Data::Heater::H0:
-      temp = constrain(temp, HEATER_0_MINTEMP, (HEATER_0_MAXTEMP - HOTEND_OVERSHOOT));
-      break;
+    #if HAS_HEATED_BED
+      case DGUS_Data::Heater::BED:
+        LIMIT(temp, BED_MINTEMP, BED_MAX_TARGET);
+        break;
+    #endif
+    #if HAS_HOTEND
+      case DGUS_Data::Heater::H0:
+        LIMIT(temp, celsius_t(HEATER_0_MINTEMP), thermalManager.hotend_max_target(0));
+        break;
+    #endif
     #if HAS_MULTI_HOTEND
       case DGUS_Data::Heater::H1:
-        temp = constrain(temp, HEATER_1_MINTEMP, (HEATER_1_MAXTEMP - HOTEND_OVERSHOOT));
+        LIMIT(temp, celsius_t(HEATER_1_MINTEMP), thermalManager.hotend_max_target(0));
         break;
     #endif
   }

commit bc385122e94d7eda79bdf1573a7c2071c4589da2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 13:34:13 2023 -0500

    üé® Lowercase method / data member names (#25914)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index 97ae7638c9..aa58e85692 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -27,7 +27,7 @@
 #include "DGUSRxHandler.h"
 
 #include "DGUSScreenHandler.h"
-#include "config/DGUS_Screen.h"
+#include "config/DGUS_ScreenID.h"
 
 #include "../ui_api.h"
 #include "../../../core/language.h"
@@ -42,73 +42,73 @@
   #include "../../../feature/powerloss.h"
 #endif
 
-void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
-  const DGUS_Screen screen = (DGUS_Screen)((uint8_t*)data_ptr)[1];
+void DGUSRxHandler::screenChange(DGUS_VP &vp, void *data_ptr) {
+  const DGUS_ScreenID screenID = (DGUS_ScreenID)((uint8_t*)data_ptr)[1];
 
   if (vp.addr == DGUS_Addr::SCREENCHANGE_SD) {
     #if HAS_MEDIA
       IF_DISABLED(HAS_SD_DETECT, card.mount());
 
       if (!ExtUI::isMediaInserted()) {
-        dgus_screen_handler.SetStatusMessage(GET_TEXT_F(MSG_NO_MEDIA));
+        screen.setStatusMessage(GET_TEXT_F(MSG_NO_MEDIA));
         return;
       }
 
       card.cdroot();
     #else
-      dgus_screen_handler.SetStatusMessage(GET_TEXT_F(MSG_NO_MEDIA));
+      screen.setStatusMessage(GET_TEXT_F(MSG_NO_MEDIA));
       return;
     #endif
   }
 
   if (vp.addr == DGUS_Addr::SCREENCHANGE_Idle
       && (ExtUI::isPrinting() || ExtUI::isPrintingPaused())) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_NOT_WHILE_PRINTING));
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_NOT_WHILE_PRINTING));
     return;
   }
 
   if (vp.addr == DGUS_Addr::SCREENCHANGE_Printing
       && (!ExtUI::isPrinting() && !ExtUI::isPrintingPaused())) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_NOT_WHILE_IDLE));
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_NOT_WHILE_IDLE));
     return;
   }
 
-  dgus_screen_handler.TriggerScreenChange(screen);
+  screen.triggerScreenChange(screenID);
 }
 
 #if HAS_MEDIA
-  void DGUSRxHandler::Scroll(DGUS_VP &vp, void *data_ptr) {
+  void DGUSRxHandler::scroll(DGUS_VP &vp, void *data_ptr) {
     UNUSED(vp);
 
     const DGUS_Data::Scroll scroll = (DGUS_Data::Scroll)((uint8_t*)data_ptr)[1];
 
     switch (scroll) {
       case DGUS_Data::Scroll::GO_BACK:
-        if (dgus_screen_handler.filelist.isAtRootDir()) {
+        if (screen.filelist.isAtRootDir()) {
           return;
         }
 
-        dgus_screen_handler.filelist_offset = 0;
-        dgus_screen_handler.filelist_selected = -1;
-        dgus_screen_handler.filelist.upDir();
+        screen.filelist_offset = 0;
+        screen.filelist_selected = -1;
+        screen.filelist.upDir();
         break;
       case DGUS_Data::Scroll::UP:
-        if (dgus_screen_handler.filelist_offset < 1) {
+        if (screen.filelist_offset < 1) {
           return;
         }
 
-        --dgus_screen_handler.filelist_offset;
+        --screen.filelist_offset;
         break;
       case DGUS_Data::Scroll::DOWN:
-        if (dgus_screen_handler.filelist_offset + 1 + DGUS_FILE_COUNT > dgus_screen_handler.filelist.count()) {
+        if (screen.filelist_offset + 1 + DGUS_FILE_COUNT > screen.filelist.count()) {
           return;
         }
 
-        ++dgus_screen_handler.filelist_offset;
+        ++screen.filelist_offset;
         break;
     }
 
-    dgus_screen_handler.TriggerFullUpdate();
+    screen.triggerFullUpdate();
   }
 
   void DGUSRxHandler::selectFile(DGUS_VP &vp, void *data_ptr) {
@@ -116,47 +116,47 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
 
     const uint8_t index = ((uint8_t*)data_ptr)[1];
 
-    if (!dgus_screen_handler.filelist.seek(dgus_screen_handler.filelist_offset + index)) {
+    if (!screen.filelist.seek(screen.filelist_offset + index)) {
       return;
     }
 
-    if (dgus_screen_handler.filelist.isDir()) {
-      dgus_screen_handler.filelist_offset = 0;
-      dgus_screen_handler.filelist_selected = -1;
-      dgus_screen_handler.filelist.changeDir(dgus_screen_handler.filelist.filename());
+    if (screen.filelist.isDir()) {
+      screen.filelist_offset = 0;
+      screen.filelist_selected = -1;
+      screen.filelist.changeDir(screen.filelist.filename());
     }
     else {
-      dgus_screen_handler.filelist_selected = dgus_screen_handler.filelist_offset + index;
+      screen.filelist_selected = screen.filelist_offset + index;
     }
 
-    dgus_screen_handler.TriggerFullUpdate();
+    screen.triggerFullUpdate();
   }
 
-  void DGUSRxHandler::PrintFile(DGUS_VP &vp, void *data_ptr) {
+  void DGUSRxHandler::printFile(DGUS_VP &vp, void *data_ptr) {
     UNUSED(vp);
     UNUSED(data_ptr);
 
-    if (dgus_screen_handler.filelist_selected < 0) {
-      dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_NO_FILE_SELECTED));
+    if (screen.filelist_selected < 0) {
+      screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_NO_FILE_SELECTED));
       return;
     }
 
-    if (!dgus_screen_handler.filelist.seek(dgus_screen_handler.filelist_selected)
-        || dgus_screen_handler.filelist.isDir()) {
+    if (!screen.filelist.seek(screen.filelist_selected)
+        || screen.filelist.isDir()) {
       return;
     }
 
-    if (!dgus_screen_handler.IsPrinterIdle()) {
-      dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+    if (!screen.isPrinterIdle()) {
+      screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
       return;
     }
 
-    ExtUI::printFile(dgus_screen_handler.filelist.shortFilename());
-    dgus_screen_handler.TriggerScreenChange(DGUS_Screen::PRINT_STATUS);
+    ExtUI::printFile(screen.filelist.shortFilename());
+    screen.triggerScreenChange(DGUS_ScreenID::PRINT_STATUS);
   }
 #endif // HAS_MEDIA
 
-void DGUSRxHandler::PrintAbort(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::printAbort(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
@@ -166,14 +166,14 @@ void DGUSRxHandler::PrintAbort(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!ExtUI::isPrinting() && !ExtUI::isPrintingPaused()) {
-    dgus_screen_handler.TriggerFullUpdate();
+    screen.triggerFullUpdate();
     return;
   }
 
   ExtUI::stopPrint();
 }
 
-void DGUSRxHandler::PrintPause(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::printPause(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
@@ -183,14 +183,14 @@ void DGUSRxHandler::PrintPause(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!ExtUI::isPrinting()) {
-    dgus_screen_handler.TriggerFullUpdate();
+    screen.triggerFullUpdate();
     return;
   }
 
   ExtUI::pausePrint();
 }
 
-void DGUSRxHandler::PrintResume(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::printResume(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
@@ -200,29 +200,29 @@ void DGUSRxHandler::PrintResume(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!ExtUI::isPrintingPaused()) {
-    dgus_screen_handler.TriggerFullUpdate();
+    screen.triggerFullUpdate();
     return;
   }
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
   ExtUI::resumePrint();
 }
 
-void DGUSRxHandler::Feedrate(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::feedrate(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const int16_t feedrate = BE16_P(data_ptr);
 
   ExtUI::setFeedrate_percent(feedrate);
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::Flowrate(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::flowrate(DGUS_VP &vp, void *data_ptr) {
   const int16_t flowrate = BE16_P(data_ptr);
 
   switch (vp.addr) {
@@ -240,24 +240,24 @@ void DGUSRxHandler::Flowrate(DGUS_VP &vp, void *data_ptr) {
     #endif
   }
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::BabystepSet(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::babystepSet(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const int16_t data = BE16_P(data_ptr);
-  const float offset = dgus_display.FromFixedPoint<int16_t, float, 2>(data);
+  const float offset = dgus.fromFixedPoint<int16_t, float, 2>(data);
 
   const int16_t steps = ExtUI::mmToWholeSteps(offset - ExtUI::getZOffset_mm(), ExtUI::Z);
 
   ExtUI::smartAdjustAxis_steps(steps, ExtUI::Z, true);
 
-  dgus_screen_handler.TriggerEEPROMSave();
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerEEPROMSave();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::Babystep(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::babystep(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::Adjust adjust = (DGUS_Data::Adjust)((uint8_t*)data_ptr)[1];
@@ -275,11 +275,11 @@ void DGUSRxHandler::Babystep(DGUS_VP &vp, void *data_ptr) {
 
   ExtUI::smartAdjustAxis_steps(steps, ExtUI::Z, true);
 
-  dgus_screen_handler.TriggerEEPROMSave();
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerEEPROMSave();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::TempPreset(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::tempPreset(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::TempPreset preset = (DGUS_Data::TempPreset)((uint8_t*)data_ptr)[1];
@@ -311,10 +311,10 @@ void DGUSRxHandler::TempPreset(DGUS_VP &vp, void *data_ptr) {
       break;
   }
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::TempTarget(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::tempTarget(DGUS_VP &vp, void *data_ptr) {
   const int16_t temp = BE16_P(data_ptr);
 
   switch (vp.addr) {
@@ -332,10 +332,10 @@ void DGUSRxHandler::TempTarget(DGUS_VP &vp, void *data_ptr) {
     #endif
   }
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::TempCool(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::tempCool(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::Heater heater = (DGUS_Data::Heater)BE16_P(data_ptr);
@@ -362,12 +362,12 @@ void DGUSRxHandler::TempCool(DGUS_VP &vp, void *data_ptr) {
     #endif
   }
 
-  dgus_screen_handler.SetStatusMessage(GET_TEXT_F(MSG_COOLING));
+  screen.setStatusMessage(GET_TEXT_F(MSG_COOLING));
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::Steppers(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::steppers(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::Control control = (DGUS_Data::Control)((uint8_t*)data_ptr)[1];
@@ -381,50 +381,50 @@ void DGUSRxHandler::Steppers(DGUS_VP &vp, void *data_ptr) {
       break;
   }
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::ZOffset(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::zOffset(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (TERN0(NO_MOTION_BEFORE_HOMING, !ExtUI::isAxisPositionKnown(ExtUI::Z))) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
   const int16_t data = BE16_P(data_ptr);
-  const float offset = dgus_display.FromFixedPoint<int16_t, float, 2>(data);
+  const float offset = dgus.fromFixedPoint<int16_t, float, 2>(data);
 
   const int16_t steps = ExtUI::mmToWholeSteps(offset - ExtUI::getZOffset_mm(), ExtUI::Z);
 
   ExtUI::smartAdjustAxis_steps(steps, ExtUI::Z, true);
 
-  dgus_screen_handler.TriggerEEPROMSave();
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerEEPROMSave();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::ZOffsetStep(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::zOffsetStep(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (TERN0(NO_MOTION_BEFORE_HOMING, !ExtUI::isAxisPositionKnown(ExtUI::Z))) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
   const DGUS_Data::Adjust adjust = (DGUS_Data::Adjust)((uint8_t*)data_ptr)[1];
   int16_t steps;
 
-  switch (dgus_screen_handler.offset_steps) {
+  switch (screen.offset_steps) {
     default: return;
     case DGUS_Data::StepSize::MMP1:
       steps = ExtUI::mmToWholeSteps((adjust == DGUS_Data::Adjust::INCREMENT ? 0.1f : -0.1f), ExtUI::Z);
@@ -436,30 +436,30 @@ void DGUSRxHandler::ZOffsetStep(DGUS_VP &vp, void *data_ptr) {
 
   ExtUI::smartAdjustAxis_steps(steps, ExtUI::Z, true);
 
-  dgus_screen_handler.TriggerEEPROMSave();
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerEEPROMSave();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::ZOffsetSetStep(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::zOffsetSetStep(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::StepSize size = (DGUS_Data::StepSize)((uint8_t*)data_ptr)[1];
 
-  dgus_screen_handler.offset_steps = size;
+  screen.offset_steps = size;
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::MoveToPoint(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::moveToPoint(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!ExtUI::isPositionKnown()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
@@ -499,26 +499,26 @@ void DGUSRxHandler::MoveToPoint(DGUS_VP &vp, void *data_ptr) {
   ExtUI::setAxisPosition_mm(Z_MIN_POS + BED_TRAMMING_HEIGHT, ExtUI::Z);
 }
 
-void DGUSRxHandler::Probe(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::probe(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
   UNUSED(data_ptr);
 
   #if ENABLED(MESH_BED_LEVELING)
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_ABL_REQUIRED));
+    screen.setStatusMessage(FPSTR(DGUS_MSG_ABL_REQUIRED));
     return;
   #endif
 
   if (!ExtUI::isPositionKnown()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
-  dgus_screen_handler.TriggerScreenChange(DGUS_Screen::LEVELING_PROBING);
+  screen.triggerScreenChange(DGUS_ScreenID::LEVELING_PROBING);
 
   #if ENABLED(AUTO_BED_LEVELING_UBL)
     queue.enqueue_now(F("G29P1\nG29P3\nG29P5C"));
@@ -528,22 +528,22 @@ void DGUSRxHandler::Probe(DGUS_VP &vp, void *data_ptr) {
   queue.enqueue_now(F("M500"));
 }
 
-void DGUSRxHandler::DisableABL(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::disableABL(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
   UNUSED(data_ptr);
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
   ExtUI::setLevelingActive(false);
 
-  dgus_screen_handler.TriggerEEPROMSave();
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerEEPROMSave();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::FilamentSelect(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::filamentSelect(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::Extruder extruder = (DGUS_Data::Extruder)BE16_P(data_ptr);
@@ -553,34 +553,34 @@ void DGUSRxHandler::FilamentSelect(DGUS_VP &vp, void *data_ptr) {
     case DGUS_Data::Extruder::CURRENT:
     case DGUS_Data::Extruder::E0:
     E_TERN_(case DGUS_Data::Extruder::E1:)
-      dgus_screen_handler.filament_extruder = extruder;
+      screen.filament_extruder = extruder;
       break;
   }
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::FilamentLength(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::filamentLength(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const uint16_t length = BE16_P(data_ptr);
 
-  dgus_screen_handler.filament_length = constrain(length, 0, EXTRUDE_MAXLENGTH);
+  screen.filament_length = constrain(length, 0, EXTRUDE_MAXLENGTH);
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::FilamentMove(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::filamentMove(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
   ExtUI::extruder_t extruder;
 
-  switch (dgus_screen_handler.filament_extruder) {
+  switch (screen.filament_extruder) {
     default: return;
     case DGUS_Data::Extruder::CURRENT:
       #if HAS_MULTI_EXTRUDER
@@ -598,7 +598,7 @@ void DGUSRxHandler::FilamentMove(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (ExtUI::getActualTemp_celsius(extruder) < (float)EXTRUDE_MINTEMP) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_TEMP_TOO_LOW));
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_TEMP_TOO_LOW));
     return;
   }
 
@@ -606,25 +606,25 @@ void DGUSRxHandler::FilamentMove(DGUS_VP &vp, void *data_ptr) {
 
   switch (move) {
     case DGUS_Data::FilamentMove::RETRACT:
-      UI_DECREMENT_BY(AxisPosition_mm, (float)dgus_screen_handler.filament_length, extruder);
+      UI_DECREMENT_BY(AxisPosition_mm, (float)screen.filament_length, extruder);
       break;
     case DGUS_Data::FilamentMove::EXTRUDE:
-      UI_INCREMENT_BY(AxisPosition_mm, (float)dgus_screen_handler.filament_length, extruder);
+      UI_INCREMENT_BY(AxisPosition_mm, (float)screen.filament_length, extruder);
       break;
   }
 }
 
-void DGUSRxHandler::Home(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::home(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
   DGUS_Data::Axis axis = (DGUS_Data::Axis)((uint8_t*)data_ptr)[1];
 
-  dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), dgus_screen_handler.GetCurrentScreen());
+  screen.showWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), screen.getCurrentScreen());
 
   switch (axis) {
     case DGUS_Data::Axis::X_Y_Z:
@@ -639,9 +639,9 @@ void DGUSRxHandler::Home(DGUS_VP &vp, void *data_ptr) {
   }
 }
 
-void DGUSRxHandler::Move(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::move(DGUS_VP &vp, void *data_ptr) {
   const int16_t data = BE16_P(data_ptr);
-  const float position = dgus_display.FromFixedPoint<int16_t, float, 1>(data);
+  const float position = dgus.fromFixedPoint<int16_t, float, 1>(data);
   ExtUI::axis_t axis;
 
   switch (vp.addr) {
@@ -652,20 +652,20 @@ void DGUSRxHandler::Move(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (TERN0(NO_MOTION_BEFORE_HOMING, !ExtUI::isAxisPositionKnown(axis))) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
   ExtUI::setAxisPosition_mm(position, axis);
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::MoveStep(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::moveStep(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   float offset;
-  switch (dgus_screen_handler.move_steps) {
+  switch (screen.move_steps) {
     default: return;
     case DGUS_Data::StepSize::MM10: offset = 10.0f; break;
     case DGUS_Data::StepSize::MM1: offset = 1.0f; break;
@@ -686,58 +686,58 @@ void DGUSRxHandler::MoveStep(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (TERN0(NO_MOTION_BEFORE_HOMING, !ExtUI::isAxisPositionKnown(axis))) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
   UI_INCREMENT_BY(AxisPosition_mm, offset, axis);
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::MoveSetStep(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::moveSetStep(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::StepSize size = (DGUS_Data::StepSize)((uint8_t*)data_ptr)[1];
-  dgus_screen_handler.move_steps = size;
+  screen.move_steps = size;
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::GcodeClear(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::gcodeClear(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
   UNUSED(data_ptr);
 
-  ZERO(dgus_screen_handler.gcode);
+  ZERO(screen.gcode);
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::GcodeExecute(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::gcodeExecute(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
   UNUSED(data_ptr);
 
-  if (!strlen(dgus_screen_handler.gcode)) return;
+  if (!strlen(screen.gcode)) return;
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
-  dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_EXECUTING_COMMAND), DGUS_Screen::GCODE);
+  screen.showWaitScreen(GET_TEXT_F(DGUS_MSG_EXECUTING_COMMAND), DGUS_ScreenID::GCODE);
 
-  queue.enqueue_one_now(dgus_screen_handler.gcode);
+  queue.enqueue_one_now(screen.gcode);
 }
 
-void DGUSRxHandler::ResetEEPROM(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::resetEEPROM(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
 
   if (result != DGUS_Data::Popup::CONFIRMED) return;
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
@@ -745,7 +745,7 @@ void DGUSRxHandler::ResetEEPROM(DGUS_VP &vp, void *data_ptr) {
   queue.enqueue_now(F("M500"));
 }
 
-void DGUSRxHandler::SettingsExtra(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::settingsExtra(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::Extra extra = (DGUS_Data::Extra)((uint8_t*)data_ptr)[1];
@@ -754,25 +754,25 @@ void DGUSRxHandler::SettingsExtra(DGUS_VP &vp, void *data_ptr) {
     default: return;
     case DGUS_Data::Extra::BUTTON1:
       #if ENABLED(BLTOUCH)
-        if (!dgus_screen_handler.IsPrinterIdle()) {
-          dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+        if (!screen.isPrinterIdle()) {
+          screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
           return;
         }
 
         queue.enqueue_now(F(DGUS_RESET_BLTOUCH));
       #else
-        dgus_screen_handler.TriggerScreenChange(DGUS_Screen::INFOS);
+        screen.triggerScreenChange(DGUS_ScreenID::INFOS);
       #endif
       break;
     #if ENABLED(BLTOUCH)
       case DGUS_Data::Extra::BUTTON2:
-        dgus_screen_handler.TriggerScreenChange(DGUS_Screen::INFOS);
+        screen.triggerScreenChange(DGUS_ScreenID::INFOS);
         break;
     #endif
   }
 }
 
-void DGUSRxHandler::PIDSelect(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::pidSelect(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::Heater heater = (DGUS_Data::Heater)BE16_P(data_ptr);
@@ -780,34 +780,34 @@ void DGUSRxHandler::PIDSelect(DGUS_VP &vp, void *data_ptr) {
   switch (heater) {
     default: return;
     case DGUS_Data::Heater::BED:
-      dgus_screen_handler.pid_temp = DGUS_PLA_TEMP_BED;
-      dgus_screen_handler.pid_heater = heater;
+      screen.pid_temp = DGUS_PLA_TEMP_BED;
+      screen.pid_heater = heater;
       break;
     case DGUS_Data::Heater::H0:
     #if HAS_MULTI_HOTEND
       case DGUS_Data::Heater::H1:
     #endif
-      dgus_screen_handler.pid_temp = DGUS_PLA_TEMP_HOTEND;
-      dgus_screen_handler.pid_heater = heater;
+      screen.pid_temp = DGUS_PLA_TEMP_HOTEND;
+      screen.pid_heater = heater;
       break;
   }
 
-  dgus_screen_handler.pid_cycles = 5;
+  screen.pid_cycles = 5;
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::PIDSetTemp(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::pidSetTemp(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
   uint16_t temp = BE16_P(data_ptr);
 
-  switch (dgus_screen_handler.pid_heater) {
+  switch (screen.pid_heater) {
     default: return;
     case DGUS_Data::Heater::BED:
       temp = constrain(temp, BED_MINTEMP, BED_MAX_TARGET);
@@ -822,31 +822,31 @@ void DGUSRxHandler::PIDSetTemp(DGUS_VP &vp, void *data_ptr) {
     #endif
   }
 
-  dgus_screen_handler.pid_temp = temp;
+  screen.pid_temp = temp;
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::pidRun(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
   UNUSED(data_ptr);
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
   heater_id_t heater;
-  uint8_t cycles = constrain(dgus_screen_handler.pid_cycles, 3, 10);
+  uint8_t cycles = constrain(screen.pid_cycles, 3, 10);
 
-  switch (dgus_screen_handler.pid_heater) {
+  switch (screen.pid_heater) {
     default: return;
     case DGUS_Data::Heater::BED:
       #if ENABLED(PIDTEMPBED)
         heater = H_BED;
         break;
       #else
-        dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BED_PID_DISABLED));
+        screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BED_PID_DISABLED));
         return;
       #endif
     case DGUS_Data::Heater::H0:
@@ -854,7 +854,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
         heater = H_E0;
         break;
       #else
-        dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_PID_DISABLED));
+        screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_PID_DISABLED));
         return;
       #endif
     #if HAS_MULTI_HOTEND
@@ -863,23 +863,23 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
           heater = H_E1;
           break;
         #else
-          dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_PID_DISABLED));
+          screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_PID_DISABLED));
           return;
         #endif
     #endif
   }
 
   char buffer[24];
-  snprintf_P(buffer, sizeof(buffer), PSTR("M303C%dE%dS%dU1"), cycles, heater, dgus_screen_handler.pid_temp);
+  snprintf_P(buffer, sizeof(buffer), PSTR("M303C%dE%dS%dU1"), cycles, heater, screen.pid_temp);
 
-  dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_PID_AUTOTUNING), DGUS_Screen::PID);
+  screen.showWaitScreen(GET_TEXT_F(DGUS_MSG_PID_AUTOTUNING), DGUS_ScreenID::PID);
 
   queue.enqueue_one_now(buffer);
   queue.enqueue_now(F("M500"));
 }
 
 #if ENABLED(POWER_LOSS_RECOVERY)
-  void DGUSRxHandler::PowerLossAbort(DGUS_VP &vp, void *data_ptr) {
+  void DGUSRxHandler::powerLossAbort(DGUS_VP &vp, void *data_ptr) {
     UNUSED(vp);
 
     const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
@@ -888,17 +888,17 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
       return;
     }
 
-    if (!dgus_screen_handler.IsPrinterIdle()) {
-      dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+    if (!screen.isPrinterIdle()) {
+      screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
       return;
     }
 
-    dgus_screen_handler.TriggerScreenChange(DGUS_Screen::HOME);
+    screen.triggerScreenChange(DGUS_ScreenID::HOME);
 
     queue.enqueue_now(F("M1000C"));
   }
 
-  void DGUSRxHandler::PowerLossResume(DGUS_VP &vp, void *data_ptr) {
+  void DGUSRxHandler::powerLossResume(DGUS_VP &vp, void *data_ptr) {
     UNUSED(vp);
 
     const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
@@ -907,23 +907,23 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
       return;
     }
 
-    if (!dgus_screen_handler.IsPrinterIdle()) {
-      dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+    if (!screen.isPrinterIdle()) {
+      screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
       return;
     }
 
     if (!recovery.valid()) {
-      dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_INVALID_RECOVERY_DATA));
+      screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_INVALID_RECOVERY_DATA));
       return;
     }
 
-    dgus_screen_handler.TriggerScreenChange(DGUS_Screen::PRINT_STATUS);
+    screen.triggerScreenChange(DGUS_ScreenID::PRINT_STATUS);
 
     queue.enqueue_now(F("M1000"));
   }
 #endif // POWER_LOSS_RECOVERY
 
-void DGUSRxHandler::WaitAbort(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::waitAbort(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
@@ -933,25 +933,25 @@ void DGUSRxHandler::WaitAbort(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!ExtUI::isPrintingPaused()) {
-    dgus_screen_handler.TriggerFullUpdate();
+    screen.triggerFullUpdate();
     return;
   }
 
   ExtUI::stopPrint();
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::WaitContinue(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::waitContinue(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
   UNUSED(data_ptr);
 
   ExtUI::setUserConfirmed();
 
-  dgus_screen_handler.TriggerFullUpdate();
+  screen.triggerFullUpdate();
 }
 
-void DGUSRxHandler::FanSpeed(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::fanSpeed(DGUS_VP &vp, void *data_ptr) {
   uint8_t speed = ((uint8_t*)data_ptr)[1];
   switch (vp.addr) {
     default: return;
@@ -961,36 +961,36 @@ void DGUSRxHandler::FanSpeed(DGUS_VP &vp, void *data_ptr) {
   }
 }
 
-void DGUSRxHandler::Volume(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::volume(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   uint8_t volume = ((uint8_t*)data_ptr)[1];
-  dgus_display.SetVolume(volume);
+  dgus.setVolume(volume);
 
-  dgus_screen_handler.TriggerEEPROMSave();
+  screen.triggerEEPROMSave();
 }
 
-void DGUSRxHandler::Brightness(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::brightness(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   uint8_t brightness = ((uint8_t*)data_ptr)[1];
-  dgus_display.SetBrightness(brightness);
+  dgus.setBrightness(brightness);
 
-  dgus_screen_handler.TriggerEEPROMSave();
+  screen.triggerEEPROMSave();
 }
 
-void DGUSRxHandler::Debug(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::debug(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
   UNUSED(data_ptr);
 
-  ++dgus_screen_handler.debug_count;
+  ++screen.debug_count;
 
-  if (dgus_screen_handler.debug_count >= 10) {
-    dgus_screen_handler.TriggerScreenChange(DGUS_Screen::DEBUG);
+  if (screen.debug_count >= 10) {
+    screen.triggerScreenChange(DGUS_ScreenID::DEBUG);
   }
 }
 
-void DGUSRxHandler::StringToExtra(DGUS_VP &vp, void *data_ptr) {
+void DGUSRxHandler::stringToExtra(DGUS_VP &vp, void *data_ptr) {
   if (!vp.size || !vp.extra) return;
   memcpy(vp.extra, data_ptr, vp.size);
 }

commit 37d0f49a82cd2e4d91dce4e62671b266924eb2a7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed May 24 01:05:55 2023 -0500

    üßë‚Äçüíª Misc. ExtUI LCD cleanup (#25872)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index 40f3bbf1d5..97ae7638c9 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -111,7 +111,7 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
     dgus_screen_handler.TriggerFullUpdate();
   }
 
-  void DGUSRxHandler::SelectFile(DGUS_VP &vp, void *data_ptr) {
+  void DGUSRxHandler::selectFile(DGUS_VP &vp, void *data_ptr) {
     UNUSED(vp);
 
     const uint8_t index = ((uint8_t*)data_ptr)[1];

commit 5664c02d077e028f84a24efd96c2eebe97ce8763
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 22:43:09 2023 -0500

    üßë‚Äçüíª Generalize SDSUPPORT as HAS_MEDIA
    
    In preparation for single- and multi-volume refactoring.

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index 7a0318a555..40f3bbf1d5 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -46,7 +46,7 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
   const DGUS_Screen screen = (DGUS_Screen)((uint8_t*)data_ptr)[1];
 
   if (vp.addr == DGUS_Addr::SCREENCHANGE_SD) {
-    #if ENABLED(SDSUPPORT)
+    #if HAS_MEDIA
       IF_DISABLED(HAS_SD_DETECT, card.mount());
 
       if (!ExtUI::isMediaInserted()) {
@@ -76,7 +76,7 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
   dgus_screen_handler.TriggerScreenChange(screen);
 }
 
-#if ENABLED(SDSUPPORT)
+#if HAS_MEDIA
   void DGUSRxHandler::Scroll(DGUS_VP &vp, void *data_ptr) {
     UNUSED(vp);
 
@@ -154,7 +154,7 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
     ExtUI::printFile(dgus_screen_handler.filelist.shortFilename());
     dgus_screen_handler.TriggerScreenChange(DGUS_Screen::PRINT_STATUS);
   }
-#endif // SDSUPPORT
+#endif // HAS_MEDIA
 
 void DGUSRxHandler::PrintAbort(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);

commit 4b9bb85b1266e8febbcb1931c8427d410a05bf84
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Mar 6 22:55:55 2023 -0600

    üîß Add DGUS_LCD_UI RELOADED conditions

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index f149d3c419..7a0318a555 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -387,7 +387,7 @@ void DGUSRxHandler::Steppers(DGUS_VP &vp, void *data_ptr) {
 void DGUSRxHandler::ZOffset(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
-  if (!ExtUI::isAxisPositionKnown(ExtUI::Z)) {
+  if (TERN0(NO_MOTION_BEFORE_HOMING, !ExtUI::isAxisPositionKnown(ExtUI::Z))) {
     dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
@@ -411,7 +411,7 @@ void DGUSRxHandler::ZOffset(DGUS_VP &vp, void *data_ptr) {
 void DGUSRxHandler::ZOffsetStep(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
-  if (!ExtUI::isAxisPositionKnown(ExtUI::Z)) {
+  if (TERN0(NO_MOTION_BEFORE_HOMING, !ExtUI::isAxisPositionKnown(ExtUI::Z))) {
     dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
@@ -525,7 +525,7 @@ void DGUSRxHandler::Probe(DGUS_VP &vp, void *data_ptr) {
   #else
     queue.enqueue_now(F("G29"));
   #endif
-  queue.enqueue_now_P(DGUS_CMD_EEPROM_SAVE);
+  queue.enqueue_now(F("M500"));
 }
 
 void DGUSRxHandler::DisableABL(DGUS_VP &vp, void *data_ptr) {
@@ -646,18 +646,12 @@ void DGUSRxHandler::Move(DGUS_VP &vp, void *data_ptr) {
 
   switch (vp.addr) {
     default: return;
-    case DGUS_Addr::MOVE_SetX:
-      axis = ExtUI::X;
-      break;
-    case DGUS_Addr::MOVE_SetY:
-      axis = ExtUI::Y;
-      break;
-    case DGUS_Addr::MOVE_SetZ:
-      axis = ExtUI::Z;
-      break;
+    case DGUS_Addr::MOVE_SetX: axis = ExtUI::X; break;
+    case DGUS_Addr::MOVE_SetY: axis = ExtUI::Y; break;
+    case DGUS_Addr::MOVE_SetZ: axis = ExtUI::Z; break;
   }
 
-  if (!ExtUI::isAxisPositionKnown(axis)) {
+  if (TERN0(NO_MOTION_BEFORE_HOMING, !ExtUI::isAxisPositionKnown(axis))) {
     dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
@@ -671,18 +665,11 @@ void DGUSRxHandler::MoveStep(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   float offset;
-
   switch (dgus_screen_handler.move_steps) {
     default: return;
-    case DGUS_Data::StepSize::MM10:
-      offset = 10.0f;
-      break;
-    case DGUS_Data::StepSize::MM1:
-      offset = 1.0f;
-      break;
-    case DGUS_Data::StepSize::MMP1:
-      offset = 0.1f;
-      break;
+    case DGUS_Data::StepSize::MM10: offset = 10.0f; break;
+    case DGUS_Data::StepSize::MM1: offset = 1.0f; break;
+    case DGUS_Data::StepSize::MMP1: offset = 0.1f; break;
   }
 
   const DGUS_Data::MoveDirection direction = (DGUS_Data::MoveDirection)((uint8_t*)data_ptr)[1];
@@ -690,30 +677,15 @@ void DGUSRxHandler::MoveStep(DGUS_VP &vp, void *data_ptr) {
 
   switch (direction) {
     default: return;
-    case DGUS_Data::MoveDirection::XP:
-      axis = ExtUI::X;
-      break;
-    case DGUS_Data::MoveDirection::XM:
-      axis = ExtUI::X;
-      offset = -offset;
-      break;
-    case DGUS_Data::MoveDirection::YP:
-      axis = ExtUI::Y;
-      break;
-    case DGUS_Data::MoveDirection::YM:
-      axis = ExtUI::Y;
-      offset = -offset;
-      break;
-    case DGUS_Data::MoveDirection::ZP:
-      axis = ExtUI::Z;
-      break;
-    case DGUS_Data::MoveDirection::ZM:
-      axis = ExtUI::Z;
-      offset = -offset;
-      break;
+    case DGUS_Data::MoveDirection::XM: offset = -offset;
+    case DGUS_Data::MoveDirection::XP: axis = ExtUI::X; break;
+    case DGUS_Data::MoveDirection::YM: offset = -offset;
+    case DGUS_Data::MoveDirection::YP: axis = ExtUI::Y; break;
+    case DGUS_Data::MoveDirection::ZM: offset = -offset;
+    case DGUS_Data::MoveDirection::ZP: axis = ExtUI::Z; break;
   }
 
-  if (!ExtUI::isAxisPositionKnown(axis)) {
+  if (TERN0(NO_MOTION_BEFORE_HOMING, !ExtUI::isAxisPositionKnown(axis))) {
     dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
@@ -727,7 +699,6 @@ void DGUSRxHandler::MoveSetStep(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   const DGUS_Data::StepSize size = (DGUS_Data::StepSize)((uint8_t*)data_ptr)[1];
-
   dgus_screen_handler.move_steps = size;
 
   dgus_screen_handler.TriggerFullUpdate();
@@ -746,9 +717,7 @@ void DGUSRxHandler::GcodeExecute(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
   UNUSED(data_ptr);
 
-  if (!strlen(dgus_screen_handler.gcode)) {
-    return;
-  }
+  if (!strlen(dgus_screen_handler.gcode)) return;
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
     dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
@@ -765,9 +734,7 @@ void DGUSRxHandler::ResetEEPROM(DGUS_VP &vp, void *data_ptr) {
 
   const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
 
-  if (result != DGUS_Data::Popup::CONFIRMED) {
-    return;
-  }
+  if (result != DGUS_Data::Popup::CONFIRMED) return;
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
     dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
@@ -775,7 +742,7 @@ void DGUSRxHandler::ResetEEPROM(DGUS_VP &vp, void *data_ptr) {
   }
 
   queue.enqueue_now(F("M502"));
-  queue.enqueue_now_P(DGUS_CMD_EEPROM_SAVE);
+  queue.enqueue_now(F("M500"));
 }
 
 void DGUSRxHandler::SettingsExtra(DGUS_VP &vp, void *data_ptr) {
@@ -908,7 +875,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
   dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_PID_AUTOTUNING), DGUS_Screen::PID);
 
   queue.enqueue_one_now(buffer);
-  queue.enqueue_now_P(DGUS_CMD_EEPROM_SAVE);
+  queue.enqueue_now(F("M500"));
 }
 
 #if ENABLED(POWER_LOSS_RECOVERY)

commit cc31537ae3ca3be37ffb171540e7445f30827930
Author: albatorsssx <albator_ssx@hotmail.com>
Date:   Tue Mar 7 03:04:47 2023 +0100

    üåê DGUS Reloaded non-accented French (#25443)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index 2b750df9c9..f149d3c419 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -63,13 +63,13 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
 
   if (vp.addr == DGUS_Addr::SCREENCHANGE_Idle
       && (ExtUI::isPrinting() || ExtUI::isPrintingPaused())) {
-    dgus_screen_handler.SetStatusMessage(F("Impossible while printing"));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_NOT_WHILE_PRINTING));
     return;
   }
 
   if (vp.addr == DGUS_Addr::SCREENCHANGE_Printing
       && (!ExtUI::isPrinting() && !ExtUI::isPrintingPaused())) {
-    dgus_screen_handler.SetStatusMessage(F("Impossible while idle"));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_NOT_WHILE_IDLE));
     return;
   }
 
@@ -137,7 +137,7 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
     UNUSED(data_ptr);
 
     if (dgus_screen_handler.filelist_selected < 0) {
-      dgus_screen_handler.SetStatusMessage(F("No file selected"));
+      dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_NO_FILE_SELECTED));
       return;
     }
 
@@ -147,7 +147,7 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
     }
 
     if (!dgus_screen_handler.IsPrinterIdle()) {
-      dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+      dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
       return;
     }
 
@@ -205,7 +205,7 @@ void DGUSRxHandler::PrintResume(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
@@ -362,7 +362,7 @@ void DGUSRxHandler::TempCool(DGUS_VP &vp, void *data_ptr) {
     #endif
   }
 
-  dgus_screen_handler.SetStatusMessage(F("Cooling..."));
+  dgus_screen_handler.SetStatusMessage(GET_TEXT_F(MSG_COOLING));
 
   dgus_screen_handler.TriggerFullUpdate();
 }
@@ -388,12 +388,12 @@ void DGUSRxHandler::ZOffset(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!ExtUI::isAxisPositionKnown(ExtUI::Z)) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_HOMING_REQUIRED));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
@@ -412,12 +412,12 @@ void DGUSRxHandler::ZOffsetStep(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!ExtUI::isAxisPositionKnown(ExtUI::Z)) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_HOMING_REQUIRED));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
@@ -454,12 +454,12 @@ void DGUSRxHandler::MoveToPoint(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!ExtUI::isPositionKnown()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_HOMING_REQUIRED));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
@@ -509,12 +509,12 @@ void DGUSRxHandler::Probe(DGUS_VP &vp, void *data_ptr) {
   #endif
 
   if (!ExtUI::isPositionKnown()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_HOMING_REQUIRED));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
@@ -533,7 +533,7 @@ void DGUSRxHandler::DisableABL(DGUS_VP &vp, void *data_ptr) {
   UNUSED(data_ptr);
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
@@ -574,7 +574,7 @@ void DGUSRxHandler::FilamentMove(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
@@ -598,7 +598,7 @@ void DGUSRxHandler::FilamentMove(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (ExtUI::getActualTemp_celsius(extruder) < (float)EXTRUDE_MINTEMP) {
-    dgus_screen_handler.SetStatusMessage(F("Temperature too low"));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_TEMP_TOO_LOW));
     return;
   }
 
@@ -618,17 +618,13 @@ void DGUSRxHandler::Home(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
   DGUS_Data::Axis axis = (DGUS_Data::Axis)((uint8_t*)data_ptr)[1];
 
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
-  dgus_screen_handler.SetMessageLinePGM(DGUS_MSG_HOMING, 2);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
-  dgus_screen_handler.ShowWaitScreen(dgus_screen_handler.GetCurrentScreen());
+  dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), dgus_screen_handler.GetCurrentScreen());
 
   switch (axis) {
     case DGUS_Data::Axis::X_Y_Z:
@@ -662,7 +658,7 @@ void DGUSRxHandler::Move(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!ExtUI::isAxisPositionKnown(axis)) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_HOMING_REQUIRED));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
@@ -718,7 +714,7 @@ void DGUSRxHandler::MoveStep(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!ExtUI::isAxisPositionKnown(axis)) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_HOMING_REQUIRED));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
@@ -755,15 +751,11 @@ void DGUSRxHandler::GcodeExecute(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
-  dgus_screen_handler.SetMessageLinePGM(PSTR("Executing command..."), 2);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
-  dgus_screen_handler.ShowWaitScreen(DGUS_Screen::GCODE);
+  dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_EXECUTING_COMMAND), DGUS_Screen::GCODE);
 
   queue.enqueue_one_now(dgus_screen_handler.gcode);
 }
@@ -778,7 +770,7 @@ void DGUSRxHandler::ResetEEPROM(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
@@ -796,7 +788,7 @@ void DGUSRxHandler::SettingsExtra(DGUS_VP &vp, void *data_ptr) {
     case DGUS_Data::Extra::BUTTON1:
       #if ENABLED(BLTOUCH)
         if (!dgus_screen_handler.IsPrinterIdle()) {
-          dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+          dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
           return;
         }
 
@@ -842,7 +834,7 @@ void DGUSRxHandler::PIDSetTemp(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
@@ -873,7 +865,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
   UNUSED(data_ptr);
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return;
   }
 
@@ -887,7 +879,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
         heater = H_BED;
         break;
       #else
-        dgus_screen_handler.SetStatusMessage(F("Bed PID disabled"));
+        dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BED_PID_DISABLED));
         return;
       #endif
     case DGUS_Data::Heater::H0:
@@ -895,7 +887,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
         heater = H_E0;
         break;
       #else
-        dgus_screen_handler.SetStatusMessage(F("PID disabled"));
+        dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_PID_DISABLED));
         return;
       #endif
     #if HAS_MULTI_HOTEND
@@ -904,7 +896,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
           heater = H_E1;
           break;
         #else
-          dgus_screen_handler.SetStatusMessage(F("PID disabled"));
+          dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_PID_DISABLED));
           return;
         #endif
     #endif
@@ -913,11 +905,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
   char buffer[24];
   snprintf_P(buffer, sizeof(buffer), PSTR("M303C%dE%dS%dU1"), cycles, heater, dgus_screen_handler.pid_temp);
 
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
-  dgus_screen_handler.SetMessageLinePGM(PSTR("PID autotuning..."), 2);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
-  dgus_screen_handler.ShowWaitScreen(DGUS_Screen::PID);
+  dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_PID_AUTOTUNING), DGUS_Screen::PID);
 
   queue.enqueue_one_now(buffer);
   queue.enqueue_now_P(DGUS_CMD_EEPROM_SAVE);
@@ -934,7 +922,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
     }
 
     if (!dgus_screen_handler.IsPrinterIdle()) {
-      dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+      dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
       return;
     }
 
@@ -953,12 +941,12 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
     }
 
     if (!dgus_screen_handler.IsPrinterIdle()) {
-      dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+      dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
       return;
     }
 
     if (!recovery.valid()) {
-      dgus_screen_handler.SetStatusMessage(F("Invalid recovery data"));
+      dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_INVALID_RECOVERY_DATA));
       return;
     }
 

commit c3fe4abd446336c50bdb892f08fa24a08f1bdda5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 7 22:59:25 2023 -0600

    üî® DGUS_LCD_UI version check

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index ce03ab6b83..2b750df9c9 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -22,7 +22,7 @@
 
 #include "../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(DGUS_LCD_UI_RELOADED)
+#if DGUS_LCD_UI_RELOADED
 
 #include "DGUSRxHandler.h"
 

commit 4ae9bf3b9d8c8f1c0be723e4ce163492b267fc87
Author: Protomosh <43253582+Protomosh@users.noreply.github.com>
Date:   Fri Aug 19 20:57:27 2022 +0300

    üêõ Fix DGUS Reloaded + STM32 (#24600)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index 88fe30a027..ce03ab6b83 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -215,7 +215,7 @@ void DGUSRxHandler::PrintResume(DGUS_VP &vp, void *data_ptr) {
 void DGUSRxHandler::Feedrate(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
-  const int16_t feedrate = Swap16(*(int16_t*)data_ptr);
+  const int16_t feedrate = BE16_P(data_ptr);
 
   ExtUI::setFeedrate_percent(feedrate);
 
@@ -223,7 +223,7 @@ void DGUSRxHandler::Feedrate(DGUS_VP &vp, void *data_ptr) {
 }
 
 void DGUSRxHandler::Flowrate(DGUS_VP &vp, void *data_ptr) {
-  const int16_t flowrate = Swap16(*(int16_t*)data_ptr);
+  const int16_t flowrate = BE16_P(data_ptr);
 
   switch (vp.addr) {
     default: return;
@@ -246,7 +246,7 @@ void DGUSRxHandler::Flowrate(DGUS_VP &vp, void *data_ptr) {
 void DGUSRxHandler::BabystepSet(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
-  const int16_t data = Swap16(*(int16_t*)data_ptr);
+  const int16_t data = BE16_P(data_ptr);
   const float offset = dgus_display.FromFixedPoint<int16_t, float, 2>(data);
 
   const int16_t steps = ExtUI::mmToWholeSteps(offset - ExtUI::getZOffset_mm(), ExtUI::Z);
@@ -315,7 +315,7 @@ void DGUSRxHandler::TempPreset(DGUS_VP &vp, void *data_ptr) {
 }
 
 void DGUSRxHandler::TempTarget(DGUS_VP &vp, void *data_ptr) {
-  const int16_t temp = Swap16(*(int16_t*)data_ptr);
+  const int16_t temp = BE16_P(data_ptr);
 
   switch (vp.addr) {
     default: return;
@@ -338,7 +338,7 @@ void DGUSRxHandler::TempTarget(DGUS_VP &vp, void *data_ptr) {
 void DGUSRxHandler::TempCool(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
-  const DGUS_Data::Heater heater = (DGUS_Data::Heater)Swap16(*(uint16_t*)data_ptr);
+  const DGUS_Data::Heater heater = (DGUS_Data::Heater)BE16_P(data_ptr);
 
   switch (heater) {
     default: return;
@@ -397,7 +397,7 @@ void DGUSRxHandler::ZOffset(DGUS_VP &vp, void *data_ptr) {
     return;
   }
 
-  const int16_t data = Swap16(*(int16_t*)data_ptr);
+  const int16_t data = BE16_P(data_ptr);
   const float offset = dgus_display.FromFixedPoint<int16_t, float, 2>(data);
 
   const int16_t steps = ExtUI::mmToWholeSteps(offset - ExtUI::getZOffset_mm(), ExtUI::Z);
@@ -546,7 +546,7 @@ void DGUSRxHandler::DisableABL(DGUS_VP &vp, void *data_ptr) {
 void DGUSRxHandler::FilamentSelect(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
-  const DGUS_Data::Extruder extruder = (DGUS_Data::Extruder)Swap16(*(uint16_t*)data_ptr);
+  const DGUS_Data::Extruder extruder = (DGUS_Data::Extruder)BE16_P(data_ptr);
 
   switch (extruder) {
     default: return;
@@ -563,7 +563,7 @@ void DGUSRxHandler::FilamentSelect(DGUS_VP &vp, void *data_ptr) {
 void DGUSRxHandler::FilamentLength(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
-  const uint16_t length = Swap16(*(uint16_t*)data_ptr);
+  const uint16_t length = BE16_P(data_ptr);
 
   dgus_screen_handler.filament_length = constrain(length, 0, EXTRUDE_MAXLENGTH);
 
@@ -644,7 +644,7 @@ void DGUSRxHandler::Home(DGUS_VP &vp, void *data_ptr) {
 }
 
 void DGUSRxHandler::Move(DGUS_VP &vp, void *data_ptr) {
-  const int16_t data = Swap16(*(int16_t*)data_ptr);
+  const int16_t data = BE16_P(data_ptr);
   const float position = dgus_display.FromFixedPoint<int16_t, float, 1>(data);
   ExtUI::axis_t axis;
 
@@ -816,7 +816,7 @@ void DGUSRxHandler::SettingsExtra(DGUS_VP &vp, void *data_ptr) {
 void DGUSRxHandler::PIDSelect(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
-  const DGUS_Data::Heater heater = (DGUS_Data::Heater)Swap16(*(uint16_t*)data_ptr);
+  const DGUS_Data::Heater heater = (DGUS_Data::Heater)BE16_P(data_ptr);
 
   switch (heater) {
     default: return;
@@ -846,7 +846,7 @@ void DGUSRxHandler::PIDSetTemp(DGUS_VP &vp, void *data_ptr) {
     return;
   }
 
-  uint16_t temp = Swap16(*(uint16_t*)data_ptr);
+  uint16_t temp = BE16_P(data_ptr);
 
   switch (dgus_screen_handler.pid_heater) {
     default: return;

commit 3e9fb34892e85bc4069acf5baddbf12d6cd47789
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Tue Jun 7 18:59:21 2022 +1200

    ü©π Media Change followup (#24302)
    
    Followup to #24015

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index cef9c772e9..88fe30a027 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -47,9 +47,7 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
 
   if (vp.addr == DGUS_Addr::SCREENCHANGE_SD) {
     #if ENABLED(SDSUPPORT)
-      #if !PIN_EXISTS(SD_DETECT)
-        card.mount();
-      #endif
+      IF_DISABLED(HAS_SD_DETECT, card.mount());
 
       if (!ExtUI::isMediaInserted()) {
         dgus_screen_handler.SetStatusMessage(GET_TEXT_F(MSG_NO_MEDIA));

commit 2b3ba02f09832379cffa4fc1baaa055228b82fe8
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jun 3 18:16:43 2022 -0500

    üîß LEVEL_BED_CORNERS => LCD_BED_TRAMMING

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index cf95bb1d76..cef9c772e9 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -466,7 +466,7 @@ void DGUSRxHandler::MoveToPoint(DGUS_VP &vp, void *data_ptr) {
   }
 
   const uint8_t point = ((uint8_t*)data_ptr)[1];
-  constexpr float lfrb[4] = LEVEL_CORNERS_INSET_LFRB;
+  constexpr float lfrb[4] = BED_TRAMMING_INSET_LFRB;
   float x, y;
 
   switch (point) {
@@ -493,12 +493,12 @@ void DGUSRxHandler::MoveToPoint(DGUS_VP &vp, void *data_ptr) {
       break;
   }
 
-  if (ExtUI::getAxisPosition_mm(ExtUI::Z) < Z_MIN_POS + LEVEL_CORNERS_Z_HOP) {
-    ExtUI::setAxisPosition_mm(Z_MIN_POS + LEVEL_CORNERS_Z_HOP, ExtUI::Z);
+  if (ExtUI::getAxisPosition_mm(ExtUI::Z) < Z_MIN_POS + BED_TRAMMING_Z_HOP) {
+    ExtUI::setAxisPosition_mm(Z_MIN_POS + BED_TRAMMING_Z_HOP, ExtUI::Z);
   }
   ExtUI::setAxisPosition_mm(x, ExtUI::X);
   ExtUI::setAxisPosition_mm(y, ExtUI::Y);
-  ExtUI::setAxisPosition_mm(Z_MIN_POS + LEVEL_CORNERS_HEIGHT, ExtUI::Z);
+  ExtUI::setAxisPosition_mm(Z_MIN_POS + BED_TRAMMING_HEIGHT, ExtUI::Z);
 }
 
 void DGUSRxHandler::Probe(DGUS_VP &vp, void *data_ptr) {

commit aa2c6387e95bdab955499627e3890561842f0a6a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 26 21:54:43 2021 -0500

    üé® Apply HAS_MULTI_HOTEND conditional

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index f0844dc785..cf95bb1d76 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -327,7 +327,7 @@ void DGUSRxHandler::TempTarget(DGUS_VP &vp, void *data_ptr) {
     case DGUS_Addr::TEMP_SetTarget_H0:
       ExtUI::setTargetTemp_celsius(temp, ExtUI::H0);
       break;
-    #if HOTENDS > 1
+    #if HAS_MULTI_HOTEND
       case DGUS_Addr::TEMP_SetTarget_H1:
         ExtUI::setTargetTemp_celsius(temp, ExtUI::H1);
         break;
@@ -347,7 +347,7 @@ void DGUSRxHandler::TempCool(DGUS_VP &vp, void *data_ptr) {
     case DGUS_Data::Heater::ALL:
       ExtUI::setTargetTemp_celsius(0, ExtUI::BED);
       ExtUI::setTargetTemp_celsius(0, ExtUI::H0);
-      #if HOTENDS > 1
+      #if HAS_MULTI_HOTEND
         ExtUI::setTargetTemp_celsius(0, ExtUI::H1);
       #endif
       break;
@@ -357,7 +357,7 @@ void DGUSRxHandler::TempCool(DGUS_VP &vp, void *data_ptr) {
     case DGUS_Data::Heater::H0:
       ExtUI::setTargetTemp_celsius(0, ExtUI::H0);
       break;
-    #if HOTENDS > 1
+    #if HAS_MULTI_HOTEND
       case DGUS_Data::Heater::H1:
         ExtUI::setTargetTemp_celsius(0, ExtUI::H1);
         break;
@@ -827,7 +827,7 @@ void DGUSRxHandler::PIDSelect(DGUS_VP &vp, void *data_ptr) {
       dgus_screen_handler.pid_heater = heater;
       break;
     case DGUS_Data::Heater::H0:
-    #if HOTENDS > 1
+    #if HAS_MULTI_HOTEND
       case DGUS_Data::Heater::H1:
     #endif
       dgus_screen_handler.pid_temp = DGUS_PLA_TEMP_HOTEND;
@@ -858,7 +858,7 @@ void DGUSRxHandler::PIDSetTemp(DGUS_VP &vp, void *data_ptr) {
     case DGUS_Data::Heater::H0:
       temp = constrain(temp, HEATER_0_MINTEMP, (HEATER_0_MAXTEMP - HOTEND_OVERSHOOT));
       break;
-    #if HOTENDS > 1
+    #if HAS_MULTI_HOTEND
       case DGUS_Data::Heater::H1:
         temp = constrain(temp, HEATER_1_MINTEMP, (HEATER_1_MAXTEMP - HOTEND_OVERSHOOT));
         break;
@@ -900,7 +900,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
         dgus_screen_handler.SetStatusMessage(F("PID disabled"));
         return;
       #endif
-    #if HOTENDS > 1
+    #if HAS_MULTI_HOTEND
       case DGUS_Data::Heater::H1:
         #if ENABLED(PIDTEMP)
           heater = H_E1;

commit 9d72cbf84b970e5060f8dceef7158b9ca8252856
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 15 15:07:47 2021 -0500

    üí° Update old gnu.org links

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index 58c7baa0b6..f0844dc785 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit 12b5d997a2cee538e5026a68f8e0cfdd53248986
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 25 22:11:48 2021 -0500

    üé® Apply F() to some ExtUI functions

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index f7d8da69fc..58c7baa0b6 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -52,26 +52,26 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
       #endif
 
       if (!ExtUI::isMediaInserted()) {
-        dgus_screen_handler.SetStatusMessagePGM(GET_TEXT(MSG_NO_MEDIA));
+        dgus_screen_handler.SetStatusMessage(GET_TEXT_F(MSG_NO_MEDIA));
         return;
       }
 
       card.cdroot();
     #else
-      dgus_screen_handler.SetStatusMessagePGM(GET_TEXT(MSG_NO_MEDIA));
+      dgus_screen_handler.SetStatusMessage(GET_TEXT_F(MSG_NO_MEDIA));
       return;
     #endif
   }
 
   if (vp.addr == DGUS_Addr::SCREENCHANGE_Idle
       && (ExtUI::isPrinting() || ExtUI::isPrintingPaused())) {
-    dgus_screen_handler.SetStatusMessagePGM(PSTR("Impossible while printing"));
+    dgus_screen_handler.SetStatusMessage(F("Impossible while printing"));
     return;
   }
 
   if (vp.addr == DGUS_Addr::SCREENCHANGE_Printing
       && (!ExtUI::isPrinting() && !ExtUI::isPrintingPaused())) {
-    dgus_screen_handler.SetStatusMessagePGM(PSTR("Impossible while idle"));
+    dgus_screen_handler.SetStatusMessage(F("Impossible while idle"));
     return;
   }
 
@@ -139,7 +139,7 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
     UNUSED(data_ptr);
 
     if (dgus_screen_handler.filelist_selected < 0) {
-      dgus_screen_handler.SetStatusMessagePGM(PSTR("No file selected"));
+      dgus_screen_handler.SetStatusMessage(F("No file selected"));
       return;
     }
 
@@ -149,7 +149,7 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
     }
 
     if (!dgus_screen_handler.IsPrinterIdle()) {
-      dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+      dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
       return;
     }
 
@@ -207,7 +207,7 @@ void DGUSRxHandler::PrintResume(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return;
   }
 
@@ -364,7 +364,7 @@ void DGUSRxHandler::TempCool(DGUS_VP &vp, void *data_ptr) {
     #endif
   }
 
-  dgus_screen_handler.SetStatusMessagePGM(PSTR("Cooling..."));
+  dgus_screen_handler.SetStatusMessage(F("Cooling..."));
 
   dgus_screen_handler.TriggerFullUpdate();
 }
@@ -390,12 +390,12 @@ void DGUSRxHandler::ZOffset(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!ExtUI::isAxisPositionKnown(ExtUI::Z)) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_HOMING_REQUIRED);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return;
   }
 
@@ -414,12 +414,12 @@ void DGUSRxHandler::ZOffsetStep(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!ExtUI::isAxisPositionKnown(ExtUI::Z)) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_HOMING_REQUIRED);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return;
   }
 
@@ -456,12 +456,12 @@ void DGUSRxHandler::MoveToPoint(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!ExtUI::isPositionKnown()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_HOMING_REQUIRED);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return;
   }
 
@@ -506,17 +506,17 @@ void DGUSRxHandler::Probe(DGUS_VP &vp, void *data_ptr) {
   UNUSED(data_ptr);
 
   #if ENABLED(MESH_BED_LEVELING)
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_ABL_REQUIRED);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_ABL_REQUIRED));
     return;
   #endif
 
   if (!ExtUI::isPositionKnown()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_HOMING_REQUIRED);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return;
   }
 
@@ -535,7 +535,7 @@ void DGUSRxHandler::DisableABL(DGUS_VP &vp, void *data_ptr) {
   UNUSED(data_ptr);
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return;
   }
 
@@ -576,7 +576,7 @@ void DGUSRxHandler::FilamentMove(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return;
   }
 
@@ -600,7 +600,7 @@ void DGUSRxHandler::FilamentMove(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (ExtUI::getActualTemp_celsius(extruder) < (float)EXTRUDE_MINTEMP) {
-    dgus_screen_handler.SetStatusMessagePGM(PSTR("Temperature too low"));
+    dgus_screen_handler.SetStatusMessage(F("Temperature too low"));
     return;
   }
 
@@ -620,7 +620,7 @@ void DGUSRxHandler::Home(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return;
   }
 
@@ -664,7 +664,7 @@ void DGUSRxHandler::Move(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!ExtUI::isAxisPositionKnown(axis)) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_HOMING_REQUIRED);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
@@ -720,7 +720,7 @@ void DGUSRxHandler::MoveStep(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!ExtUI::isAxisPositionKnown(axis)) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_HOMING_REQUIRED);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_HOMING_REQUIRED));
     return;
   }
 
@@ -757,7 +757,7 @@ void DGUSRxHandler::GcodeExecute(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return;
   }
 
@@ -780,7 +780,7 @@ void DGUSRxHandler::ResetEEPROM(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return;
   }
 
@@ -798,7 +798,7 @@ void DGUSRxHandler::SettingsExtra(DGUS_VP &vp, void *data_ptr) {
     case DGUS_Data::Extra::BUTTON1:
       #if ENABLED(BLTOUCH)
         if (!dgus_screen_handler.IsPrinterIdle()) {
-          dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+          dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
           return;
         }
 
@@ -844,7 +844,7 @@ void DGUSRxHandler::PIDSetTemp(DGUS_VP &vp, void *data_ptr) {
   UNUSED(vp);
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return;
   }
 
@@ -875,7 +875,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
   UNUSED(data_ptr);
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return;
   }
 
@@ -889,7 +889,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
         heater = H_BED;
         break;
       #else
-        dgus_screen_handler.SetStatusMessagePGM(PSTR("Bed PID disabled"));
+        dgus_screen_handler.SetStatusMessage(F("Bed PID disabled"));
         return;
       #endif
     case DGUS_Data::Heater::H0:
@@ -897,7 +897,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
         heater = H_E0;
         break;
       #else
-        dgus_screen_handler.SetStatusMessagePGM(PSTR("PID disabled"));
+        dgus_screen_handler.SetStatusMessage(F("PID disabled"));
         return;
       #endif
     #if HOTENDS > 1
@@ -906,7 +906,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
           heater = H_E1;
           break;
         #else
-          dgus_screen_handler.SetStatusMessagePGM(PSTR("PID disabled"));
+          dgus_screen_handler.SetStatusMessage(F("PID disabled"));
           return;
         #endif
     #endif
@@ -936,7 +936,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
     }
 
     if (!dgus_screen_handler.IsPrinterIdle()) {
-      dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+      dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
       return;
     }
 
@@ -955,12 +955,12 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
     }
 
     if (!dgus_screen_handler.IsPrinterIdle()) {
-      dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+      dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
       return;
     }
 
     if (!recovery.valid()) {
-      dgus_screen_handler.SetStatusMessagePGM(PSTR("Invalid recovery data"));
+      dgus_screen_handler.SetStatusMessage(F("Invalid recovery data"));
       return;
     }
 

commit 417e2530ebc5b6c74ac34adaba8be552b407383a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 21:11:31 2021 -0500

    üé® Apply F() to G-code suite and queue

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index 8567e5c0e7..f7d8da69fc 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -523,9 +523,9 @@ void DGUSRxHandler::Probe(DGUS_VP &vp, void *data_ptr) {
   dgus_screen_handler.TriggerScreenChange(DGUS_Screen::LEVELING_PROBING);
 
   #if ENABLED(AUTO_BED_LEVELING_UBL)
-    queue.enqueue_now_P(PSTR("G29P1\nG29P3\nG29P5C"));
+    queue.enqueue_now(F("G29P1\nG29P3\nG29P5C"));
   #else
-    queue.enqueue_now_P(PSTR("G29"));
+    queue.enqueue_now(F("G29"));
   #endif
   queue.enqueue_now_P(DGUS_CMD_EEPROM_SAVE);
 }
@@ -634,13 +634,13 @@ void DGUSRxHandler::Home(DGUS_VP &vp, void *data_ptr) {
 
   switch (axis) {
     case DGUS_Data::Axis::X_Y_Z:
-      queue.enqueue_now_P(PSTR("G28XYZ"));
+      queue.enqueue_now(F("G28XYZ"));
       break;
     case DGUS_Data::Axis::X_Y:
-      queue.enqueue_now_P(PSTR("G28XY"));
+      queue.enqueue_now(F("G28XY"));
       break;
     case DGUS_Data::Axis::Z:
-      queue.enqueue_now_P(PSTR("G28Z"));
+      queue.enqueue_now(F("G28Z"));
       break;
   }
 }
@@ -784,7 +784,7 @@ void DGUSRxHandler::ResetEEPROM(DGUS_VP &vp, void *data_ptr) {
     return;
   }
 
-  queue.enqueue_now_P(PSTR("M502"));
+  queue.enqueue_now(F("M502"));
   queue.enqueue_now_P(DGUS_CMD_EEPROM_SAVE);
 }
 
@@ -802,7 +802,7 @@ void DGUSRxHandler::SettingsExtra(DGUS_VP &vp, void *data_ptr) {
           return;
         }
 
-        queue.enqueue_now_P(PSTR(DGUS_RESET_BLTOUCH));
+        queue.enqueue_now(F(DGUS_RESET_BLTOUCH));
       #else
         dgus_screen_handler.TriggerScreenChange(DGUS_Screen::INFOS);
       #endif
@@ -942,7 +942,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
 
     dgus_screen_handler.TriggerScreenChange(DGUS_Screen::HOME);
 
-    queue.enqueue_now_P(PSTR("M1000C"));
+    queue.enqueue_now(F("M1000C"));
   }
 
   void DGUSRxHandler::PowerLossResume(DGUS_VP &vp, void *data_ptr) {
@@ -966,7 +966,7 @@ void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
 
     dgus_screen_handler.TriggerScreenChange(DGUS_Screen::PRINT_STATUS);
 
-    queue.enqueue_now_P(PSTR("M1000"));
+    queue.enqueue_now(F("M1000"));
   }
 #endif // POWER_LOSS_RECOVERY
 

commit 33e0855e2c173680865aaa6c6aa93047d63fc469
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 01:07:51 2021 -0500

    ‚ö°Ô∏è Handle shared enable pins (#22824)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index 42731cd866..8567e5c0e7 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -33,6 +33,7 @@
 #include "../../../core/language.h"
 #include "../../../module/temperature.h"
 #include "../../../module/printcounter.h"
+#include "../../../module/stepper.h"
 #include "../../../gcode/queue.h"
 #if ENABLED(ADVANCED_PAUSE_FEATURE)
   #include "../../../feature/pause.h"
@@ -375,10 +376,10 @@ void DGUSRxHandler::Steppers(DGUS_VP &vp, void *data_ptr) {
 
   switch (control) {
     case DGUS_Data::Control::ENABLE:
-      enable_all_steppers();
+      stepper.enable_all_steppers();
       break;
     case DGUS_Data::Control::DISABLE:
-      disable_all_steppers();
+      stepper.disable_all_steppers();
       break;
   }
 
@@ -553,7 +554,7 @@ void DGUSRxHandler::FilamentSelect(DGUS_VP &vp, void *data_ptr) {
     default: return;
     case DGUS_Data::Extruder::CURRENT:
     case DGUS_Data::Extruder::E0:
-    TERN_(HAS_MULTI_EXTRUDER, case DGUS_Data::Extruder::E1:)
+    E_TERN_(case DGUS_Data::Extruder::E1:)
       dgus_screen_handler.filament_extruder = extruder;
       break;
   }

commit b88117d6364b8919a8a7df6c80d8132af98a6afc
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Sep 21 06:25:13 2021 -0500

    üé® Fix L64xx enable, clean up conditionals

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index 20a4bee234..42731cd866 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -229,13 +229,9 @@ void DGUSRxHandler::Flowrate(DGUS_VP &vp, void *data_ptr) {
   switch (vp.addr) {
     default: return;
     case DGUS_Addr::ADJUST_SetFlowrate_CUR:
-      #if EXTRUDERS > 1
-        ExtUI::setFlow_percent(flowrate, ExtUI::getActiveTool());
-      #else
-        ExtUI::setFlow_percent(flowrate, ExtUI::E0);
-      #endif
+      ExtUI::setFlow_percent(flowrate, TERN(HAS_MULTI_EXTRUDER, ExtUI::getActiveTool(), ExtUI::E0));
       break;
-    #if EXTRUDERS > 1
+    #if HAS_MULTI_EXTRUDER
       case DGUS_Addr::ADJUST_SetFlowrate_E0:
         ExtUI::setFlow_percent(flowrate, ExtUI::E0);
         break;
@@ -557,9 +553,7 @@ void DGUSRxHandler::FilamentSelect(DGUS_VP &vp, void *data_ptr) {
     default: return;
     case DGUS_Data::Extruder::CURRENT:
     case DGUS_Data::Extruder::E0:
-    #if EXTRUDERS > 1
-      case DGUS_Data::Extruder::E1:
-    #endif
+    TERN_(HAS_MULTI_EXTRUDER, case DGUS_Data::Extruder::E1:)
       dgus_screen_handler.filament_extruder = extruder;
       break;
   }
@@ -590,14 +584,14 @@ void DGUSRxHandler::FilamentMove(DGUS_VP &vp, void *data_ptr) {
   switch (dgus_screen_handler.filament_extruder) {
     default: return;
     case DGUS_Data::Extruder::CURRENT:
-      #if EXTRUDERS > 1
+      #if HAS_MULTI_EXTRUDER
         extruder = ExtUI::getActiveTool();
         break;
       #endif
     case DGUS_Data::Extruder::E0:
       extruder = ExtUI::E0;
       break;
-    #if EXTRUDERS > 1
+    #if HAS_MULTI_EXTRUDER
       case DGUS_Data::Extruder::E1:
         extruder = ExtUI::E1;
         break;

commit 23d10ceccb16e5886a6441a364fcbc08391287fe
Author: Desuuuu <contact@desuuuu.com>
Date:   Fri Sep 10 12:15:08 2021 +0200

    üé® Use ExtUI API where applicable

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
index 5f36dac7f6..20a4bee234 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -63,13 +63,13 @@ void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
   }
 
   if (vp.addr == DGUS_Addr::SCREENCHANGE_Idle
-      && (printingIsActive() || printingIsPaused())) {
+      && (ExtUI::isPrinting() || ExtUI::isPrintingPaused())) {
     dgus_screen_handler.SetStatusMessagePGM(PSTR("Impossible while printing"));
     return;
   }
 
   if (vp.addr == DGUS_Addr::SCREENCHANGE_Printing
-      && (!printingIsActive() && !printingIsPaused())) {
+      && (!ExtUI::isPrinting() && !ExtUI::isPrintingPaused())) {
     dgus_screen_handler.SetStatusMessagePGM(PSTR("Impossible while idle"));
     return;
   }
@@ -166,7 +166,7 @@ void DGUSRxHandler::PrintAbort(DGUS_VP &vp, void *data_ptr) {
     return;
   }
 
-  if (!printingIsActive() && !printingIsPaused()) {
+  if (!ExtUI::isPrinting() && !ExtUI::isPrintingPaused()) {
     dgus_screen_handler.TriggerFullUpdate();
     return;
   }
@@ -183,7 +183,7 @@ void DGUSRxHandler::PrintPause(DGUS_VP &vp, void *data_ptr) {
     return;
   }
 
-  if (!printingIsActive()) {
+  if (!ExtUI::isPrinting()) {
     dgus_screen_handler.TriggerFullUpdate();
     return;
   }
@@ -200,7 +200,7 @@ void DGUSRxHandler::PrintResume(DGUS_VP &vp, void *data_ptr) {
     return;
   }
 
-  if (!printingIsPaused()) {
+  if (!ExtUI::isPrintingPaused()) {
     dgus_screen_handler.TriggerFullUpdate();
     return;
   }
@@ -984,20 +984,11 @@ void DGUSRxHandler::WaitAbort(DGUS_VP &vp, void *data_ptr) {
     return;
   }
 
-  if (!printingIsPaused()
-      #if ENABLED(ADVANCED_PAUSE_FEATURE)
-        || !did_pause_print
-      #endif
-  ) {
+  if (!ExtUI::isPrintingPaused()) {
     dgus_screen_handler.TriggerFullUpdate();
     return;
   }
 
-  #if ENABLED(ADVANCED_PAUSE_FEATURE)
-    did_pause_print = 0;
-  #endif
-
-  ExtUI::setUserConfirmed();
   ExtUI::stopPrint();
 
   dgus_screen_handler.TriggerFullUpdate();

commit b0e798330d8f5ade4a230e0a91f05482d100bb97
Author: mrv96 <mrv96@users.noreply.github.com>
Date:   Tue Sep 7 02:51:04 2021 +0200

    ‚ú®Add DGUS_LCD_UI_RELOADED (#21931)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
new file mode 100644
index 0000000000..5f36dac7f6
--- /dev/null
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSRxHandler.cpp
@@ -0,0 +1,1059 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2021 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(DGUS_LCD_UI_RELOADED)
+
+#include "DGUSRxHandler.h"
+
+#include "DGUSScreenHandler.h"
+#include "config/DGUS_Screen.h"
+
+#include "../ui_api.h"
+#include "../../../core/language.h"
+#include "../../../module/temperature.h"
+#include "../../../module/printcounter.h"
+#include "../../../gcode/queue.h"
+#if ENABLED(ADVANCED_PAUSE_FEATURE)
+  #include "../../../feature/pause.h"
+#endif
+#if ENABLED(POWER_LOSS_RECOVERY)
+  #include "../../../feature/powerloss.h"
+#endif
+
+void DGUSRxHandler::ScreenChange(DGUS_VP &vp, void *data_ptr) {
+  const DGUS_Screen screen = (DGUS_Screen)((uint8_t*)data_ptr)[1];
+
+  if (vp.addr == DGUS_Addr::SCREENCHANGE_SD) {
+    #if ENABLED(SDSUPPORT)
+      #if !PIN_EXISTS(SD_DETECT)
+        card.mount();
+      #endif
+
+      if (!ExtUI::isMediaInserted()) {
+        dgus_screen_handler.SetStatusMessagePGM(GET_TEXT(MSG_NO_MEDIA));
+        return;
+      }
+
+      card.cdroot();
+    #else
+      dgus_screen_handler.SetStatusMessagePGM(GET_TEXT(MSG_NO_MEDIA));
+      return;
+    #endif
+  }
+
+  if (vp.addr == DGUS_Addr::SCREENCHANGE_Idle
+      && (printingIsActive() || printingIsPaused())) {
+    dgus_screen_handler.SetStatusMessagePGM(PSTR("Impossible while printing"));
+    return;
+  }
+
+  if (vp.addr == DGUS_Addr::SCREENCHANGE_Printing
+      && (!printingIsActive() && !printingIsPaused())) {
+    dgus_screen_handler.SetStatusMessagePGM(PSTR("Impossible while idle"));
+    return;
+  }
+
+  dgus_screen_handler.TriggerScreenChange(screen);
+}
+
+#if ENABLED(SDSUPPORT)
+  void DGUSRxHandler::Scroll(DGUS_VP &vp, void *data_ptr) {
+    UNUSED(vp);
+
+    const DGUS_Data::Scroll scroll = (DGUS_Data::Scroll)((uint8_t*)data_ptr)[1];
+
+    switch (scroll) {
+      case DGUS_Data::Scroll::GO_BACK:
+        if (dgus_screen_handler.filelist.isAtRootDir()) {
+          return;
+        }
+
+        dgus_screen_handler.filelist_offset = 0;
+        dgus_screen_handler.filelist_selected = -1;
+        dgus_screen_handler.filelist.upDir();
+        break;
+      case DGUS_Data::Scroll::UP:
+        if (dgus_screen_handler.filelist_offset < 1) {
+          return;
+        }
+
+        --dgus_screen_handler.filelist_offset;
+        break;
+      case DGUS_Data::Scroll::DOWN:
+        if (dgus_screen_handler.filelist_offset + 1 + DGUS_FILE_COUNT > dgus_screen_handler.filelist.count()) {
+          return;
+        }
+
+        ++dgus_screen_handler.filelist_offset;
+        break;
+    }
+
+    dgus_screen_handler.TriggerFullUpdate();
+  }
+
+  void DGUSRxHandler::SelectFile(DGUS_VP &vp, void *data_ptr) {
+    UNUSED(vp);
+
+    const uint8_t index = ((uint8_t*)data_ptr)[1];
+
+    if (!dgus_screen_handler.filelist.seek(dgus_screen_handler.filelist_offset + index)) {
+      return;
+    }
+
+    if (dgus_screen_handler.filelist.isDir()) {
+      dgus_screen_handler.filelist_offset = 0;
+      dgus_screen_handler.filelist_selected = -1;
+      dgus_screen_handler.filelist.changeDir(dgus_screen_handler.filelist.filename());
+    }
+    else {
+      dgus_screen_handler.filelist_selected = dgus_screen_handler.filelist_offset + index;
+    }
+
+    dgus_screen_handler.TriggerFullUpdate();
+  }
+
+  void DGUSRxHandler::PrintFile(DGUS_VP &vp, void *data_ptr) {
+    UNUSED(vp);
+    UNUSED(data_ptr);
+
+    if (dgus_screen_handler.filelist_selected < 0) {
+      dgus_screen_handler.SetStatusMessagePGM(PSTR("No file selected"));
+      return;
+    }
+
+    if (!dgus_screen_handler.filelist.seek(dgus_screen_handler.filelist_selected)
+        || dgus_screen_handler.filelist.isDir()) {
+      return;
+    }
+
+    if (!dgus_screen_handler.IsPrinterIdle()) {
+      dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+      return;
+    }
+
+    ExtUI::printFile(dgus_screen_handler.filelist.shortFilename());
+    dgus_screen_handler.TriggerScreenChange(DGUS_Screen::PRINT_STATUS);
+  }
+#endif // SDSUPPORT
+
+void DGUSRxHandler::PrintAbort(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
+
+  if (result != DGUS_Data::Popup::CONFIRMED) {
+    return;
+  }
+
+  if (!printingIsActive() && !printingIsPaused()) {
+    dgus_screen_handler.TriggerFullUpdate();
+    return;
+  }
+
+  ExtUI::stopPrint();
+}
+
+void DGUSRxHandler::PrintPause(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
+
+  if (result != DGUS_Data::Popup::CONFIRMED) {
+    return;
+  }
+
+  if (!printingIsActive()) {
+    dgus_screen_handler.TriggerFullUpdate();
+    return;
+  }
+
+  ExtUI::pausePrint();
+}
+
+void DGUSRxHandler::PrintResume(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
+
+  if (result != DGUS_Data::Popup::CONFIRMED) {
+    return;
+  }
+
+  if (!printingIsPaused()) {
+    dgus_screen_handler.TriggerFullUpdate();
+    return;
+  }
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return;
+  }
+
+  ExtUI::resumePrint();
+}
+
+void DGUSRxHandler::Feedrate(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const int16_t feedrate = Swap16(*(int16_t*)data_ptr);
+
+  ExtUI::setFeedrate_percent(feedrate);
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::Flowrate(DGUS_VP &vp, void *data_ptr) {
+  const int16_t flowrate = Swap16(*(int16_t*)data_ptr);
+
+  switch (vp.addr) {
+    default: return;
+    case DGUS_Addr::ADJUST_SetFlowrate_CUR:
+      #if EXTRUDERS > 1
+        ExtUI::setFlow_percent(flowrate, ExtUI::getActiveTool());
+      #else
+        ExtUI::setFlow_percent(flowrate, ExtUI::E0);
+      #endif
+      break;
+    #if EXTRUDERS > 1
+      case DGUS_Addr::ADJUST_SetFlowrate_E0:
+        ExtUI::setFlow_percent(flowrate, ExtUI::E0);
+        break;
+      case DGUS_Addr::ADJUST_SetFlowrate_E1:
+        ExtUI::setFlow_percent(flowrate, ExtUI::E1);
+        break;
+    #endif
+  }
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::BabystepSet(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const int16_t data = Swap16(*(int16_t*)data_ptr);
+  const float offset = dgus_display.FromFixedPoint<int16_t, float, 2>(data);
+
+  const int16_t steps = ExtUI::mmToWholeSteps(offset - ExtUI::getZOffset_mm(), ExtUI::Z);
+
+  ExtUI::smartAdjustAxis_steps(steps, ExtUI::Z, true);
+
+  dgus_screen_handler.TriggerEEPROMSave();
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::Babystep(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::Adjust adjust = (DGUS_Data::Adjust)((uint8_t*)data_ptr)[1];
+  int16_t steps;
+
+  switch (adjust) {
+    default: return;
+    case DGUS_Data::Adjust::INCREMENT:
+      steps = ExtUI::mmToWholeSteps(DGUS_PRINT_BABYSTEP, ExtUI::Z);
+      break;
+    case DGUS_Data::Adjust::DECREMENT:
+      steps = ExtUI::mmToWholeSteps(-DGUS_PRINT_BABYSTEP, ExtUI::Z);
+      break;
+  }
+
+  ExtUI::smartAdjustAxis_steps(steps, ExtUI::Z, true);
+
+  dgus_screen_handler.TriggerEEPROMSave();
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::TempPreset(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::TempPreset preset = (DGUS_Data::TempPreset)((uint8_t*)data_ptr)[1];
+
+  switch (preset) {
+    case DGUS_Data::TempPreset::PLA:
+      #if HOTENDS < 2
+        ExtUI::setTargetTemp_celsius(DGUS_PLA_TEMP_HOTEND, ExtUI::H0);
+      #else
+        ExtUI::setTargetTemp_celsius(DGUS_PLA_TEMP_HOTEND, ExtUI::getActiveTool());
+      #endif
+      ExtUI::setTargetTemp_celsius(DGUS_PLA_TEMP_BED, ExtUI::BED);
+      break;
+    case DGUS_Data::TempPreset::ABS:
+      #if HOTENDS < 2
+        ExtUI::setTargetTemp_celsius(DGUS_ABS_TEMP_HOTEND, ExtUI::H0);
+      #else
+        ExtUI::setTargetTemp_celsius(DGUS_ABS_TEMP_HOTEND, ExtUI::getActiveTool());
+      #endif
+      ExtUI::setTargetTemp_celsius(DGUS_ABS_TEMP_BED, ExtUI::BED);
+      break;
+    case DGUS_Data::TempPreset::PETG:
+      #if HOTENDS < 2
+        ExtUI::setTargetTemp_celsius(DGUS_PETG_TEMP_HOTEND, ExtUI::H0);
+      #else
+        ExtUI::setTargetTemp_celsius(DGUS_PETG_TEMP_HOTEND, ExtUI::getActiveTool());
+      #endif
+      ExtUI::setTargetTemp_celsius(DGUS_PETG_TEMP_BED, ExtUI::BED);
+      break;
+  }
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::TempTarget(DGUS_VP &vp, void *data_ptr) {
+  const int16_t temp = Swap16(*(int16_t*)data_ptr);
+
+  switch (vp.addr) {
+    default: return;
+    case DGUS_Addr::TEMP_SetTarget_Bed:
+      ExtUI::setTargetTemp_celsius(temp, ExtUI::BED);
+      break;
+    case DGUS_Addr::TEMP_SetTarget_H0:
+      ExtUI::setTargetTemp_celsius(temp, ExtUI::H0);
+      break;
+    #if HOTENDS > 1
+      case DGUS_Addr::TEMP_SetTarget_H1:
+        ExtUI::setTargetTemp_celsius(temp, ExtUI::H1);
+        break;
+    #endif
+  }
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::TempCool(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::Heater heater = (DGUS_Data::Heater)Swap16(*(uint16_t*)data_ptr);
+
+  switch (heater) {
+    default: return;
+    case DGUS_Data::Heater::ALL:
+      ExtUI::setTargetTemp_celsius(0, ExtUI::BED);
+      ExtUI::setTargetTemp_celsius(0, ExtUI::H0);
+      #if HOTENDS > 1
+        ExtUI::setTargetTemp_celsius(0, ExtUI::H1);
+      #endif
+      break;
+    case DGUS_Data::Heater::BED:
+      ExtUI::setTargetTemp_celsius(0, ExtUI::BED);
+      break;
+    case DGUS_Data::Heater::H0:
+      ExtUI::setTargetTemp_celsius(0, ExtUI::H0);
+      break;
+    #if HOTENDS > 1
+      case DGUS_Data::Heater::H1:
+        ExtUI::setTargetTemp_celsius(0, ExtUI::H1);
+        break;
+    #endif
+  }
+
+  dgus_screen_handler.SetStatusMessagePGM(PSTR("Cooling..."));
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::Steppers(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::Control control = (DGUS_Data::Control)((uint8_t*)data_ptr)[1];
+
+  switch (control) {
+    case DGUS_Data::Control::ENABLE:
+      enable_all_steppers();
+      break;
+    case DGUS_Data::Control::DISABLE:
+      disable_all_steppers();
+      break;
+  }
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::ZOffset(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  if (!ExtUI::isAxisPositionKnown(ExtUI::Z)) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_HOMING_REQUIRED);
+    return;
+  }
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return;
+  }
+
+  const int16_t data = Swap16(*(int16_t*)data_ptr);
+  const float offset = dgus_display.FromFixedPoint<int16_t, float, 2>(data);
+
+  const int16_t steps = ExtUI::mmToWholeSteps(offset - ExtUI::getZOffset_mm(), ExtUI::Z);
+
+  ExtUI::smartAdjustAxis_steps(steps, ExtUI::Z, true);
+
+  dgus_screen_handler.TriggerEEPROMSave();
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::ZOffsetStep(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  if (!ExtUI::isAxisPositionKnown(ExtUI::Z)) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_HOMING_REQUIRED);
+    return;
+  }
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return;
+  }
+
+  const DGUS_Data::Adjust adjust = (DGUS_Data::Adjust)((uint8_t*)data_ptr)[1];
+  int16_t steps;
+
+  switch (dgus_screen_handler.offset_steps) {
+    default: return;
+    case DGUS_Data::StepSize::MMP1:
+      steps = ExtUI::mmToWholeSteps((adjust == DGUS_Data::Adjust::INCREMENT ? 0.1f : -0.1f), ExtUI::Z);
+      break;
+    case DGUS_Data::StepSize::MMP01:
+      steps = ExtUI::mmToWholeSteps((adjust == DGUS_Data::Adjust::INCREMENT ? 0.01f : -0.01f), ExtUI::Z);
+      break;
+  }
+
+  ExtUI::smartAdjustAxis_steps(steps, ExtUI::Z, true);
+
+  dgus_screen_handler.TriggerEEPROMSave();
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::ZOffsetSetStep(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::StepSize size = (DGUS_Data::StepSize)((uint8_t*)data_ptr)[1];
+
+  dgus_screen_handler.offset_steps = size;
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::MoveToPoint(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  if (!ExtUI::isPositionKnown()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_HOMING_REQUIRED);
+    return;
+  }
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return;
+  }
+
+  const uint8_t point = ((uint8_t*)data_ptr)[1];
+  constexpr float lfrb[4] = LEVEL_CORNERS_INSET_LFRB;
+  float x, y;
+
+  switch (point) {
+    default: return;
+    case 1:
+      x = DGUS_LEVEL_CENTER_X;
+      y = DGUS_LEVEL_CENTER_Y;
+      break;
+    case 2:
+      x = X_MIN_POS + lfrb[0];
+      y = Y_MIN_POS + lfrb[1];
+      break;
+    case 3:
+      x = X_MAX_POS - lfrb[2];
+      y = Y_MIN_POS + lfrb[1];
+      break;
+    case 4:
+      x = X_MAX_POS - lfrb[2];
+      y = Y_MAX_POS - lfrb[3];
+      break;
+    case 5:
+      x = X_MIN_POS + lfrb[0];
+      y = Y_MAX_POS - lfrb[3];
+      break;
+  }
+
+  if (ExtUI::getAxisPosition_mm(ExtUI::Z) < Z_MIN_POS + LEVEL_CORNERS_Z_HOP) {
+    ExtUI::setAxisPosition_mm(Z_MIN_POS + LEVEL_CORNERS_Z_HOP, ExtUI::Z);
+  }
+  ExtUI::setAxisPosition_mm(x, ExtUI::X);
+  ExtUI::setAxisPosition_mm(y, ExtUI::Y);
+  ExtUI::setAxisPosition_mm(Z_MIN_POS + LEVEL_CORNERS_HEIGHT, ExtUI::Z);
+}
+
+void DGUSRxHandler::Probe(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+  UNUSED(data_ptr);
+
+  #if ENABLED(MESH_BED_LEVELING)
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_ABL_REQUIRED);
+    return;
+  #endif
+
+  if (!ExtUI::isPositionKnown()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_HOMING_REQUIRED);
+    return;
+  }
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return;
+  }
+
+  dgus_screen_handler.TriggerScreenChange(DGUS_Screen::LEVELING_PROBING);
+
+  #if ENABLED(AUTO_BED_LEVELING_UBL)
+    queue.enqueue_now_P(PSTR("G29P1\nG29P3\nG29P5C"));
+  #else
+    queue.enqueue_now_P(PSTR("G29"));
+  #endif
+  queue.enqueue_now_P(DGUS_CMD_EEPROM_SAVE);
+}
+
+void DGUSRxHandler::DisableABL(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+  UNUSED(data_ptr);
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return;
+  }
+
+  ExtUI::setLevelingActive(false);
+
+  dgus_screen_handler.TriggerEEPROMSave();
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::FilamentSelect(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::Extruder extruder = (DGUS_Data::Extruder)Swap16(*(uint16_t*)data_ptr);
+
+  switch (extruder) {
+    default: return;
+    case DGUS_Data::Extruder::CURRENT:
+    case DGUS_Data::Extruder::E0:
+    #if EXTRUDERS > 1
+      case DGUS_Data::Extruder::E1:
+    #endif
+      dgus_screen_handler.filament_extruder = extruder;
+      break;
+  }
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::FilamentLength(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const uint16_t length = Swap16(*(uint16_t*)data_ptr);
+
+  dgus_screen_handler.filament_length = constrain(length, 0, EXTRUDE_MAXLENGTH);
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::FilamentMove(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return;
+  }
+
+  ExtUI::extruder_t extruder;
+
+  switch (dgus_screen_handler.filament_extruder) {
+    default: return;
+    case DGUS_Data::Extruder::CURRENT:
+      #if EXTRUDERS > 1
+        extruder = ExtUI::getActiveTool();
+        break;
+      #endif
+    case DGUS_Data::Extruder::E0:
+      extruder = ExtUI::E0;
+      break;
+    #if EXTRUDERS > 1
+      case DGUS_Data::Extruder::E1:
+        extruder = ExtUI::E1;
+        break;
+    #endif
+  }
+
+  if (ExtUI::getActualTemp_celsius(extruder) < (float)EXTRUDE_MINTEMP) {
+    dgus_screen_handler.SetStatusMessagePGM(PSTR("Temperature too low"));
+    return;
+  }
+
+  const DGUS_Data::FilamentMove move = (DGUS_Data::FilamentMove)((uint8_t*)data_ptr)[1];
+
+  switch (move) {
+    case DGUS_Data::FilamentMove::RETRACT:
+      UI_DECREMENT_BY(AxisPosition_mm, (float)dgus_screen_handler.filament_length, extruder);
+      break;
+    case DGUS_Data::FilamentMove::EXTRUDE:
+      UI_INCREMENT_BY(AxisPosition_mm, (float)dgus_screen_handler.filament_length, extruder);
+      break;
+  }
+}
+
+void DGUSRxHandler::Home(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return;
+  }
+
+  DGUS_Data::Axis axis = (DGUS_Data::Axis)((uint8_t*)data_ptr)[1];
+
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
+  dgus_screen_handler.SetMessageLinePGM(DGUS_MSG_HOMING, 2);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
+  dgus_screen_handler.ShowWaitScreen(dgus_screen_handler.GetCurrentScreen());
+
+  switch (axis) {
+    case DGUS_Data::Axis::X_Y_Z:
+      queue.enqueue_now_P(PSTR("G28XYZ"));
+      break;
+    case DGUS_Data::Axis::X_Y:
+      queue.enqueue_now_P(PSTR("G28XY"));
+      break;
+    case DGUS_Data::Axis::Z:
+      queue.enqueue_now_P(PSTR("G28Z"));
+      break;
+  }
+}
+
+void DGUSRxHandler::Move(DGUS_VP &vp, void *data_ptr) {
+  const int16_t data = Swap16(*(int16_t*)data_ptr);
+  const float position = dgus_display.FromFixedPoint<int16_t, float, 1>(data);
+  ExtUI::axis_t axis;
+
+  switch (vp.addr) {
+    default: return;
+    case DGUS_Addr::MOVE_SetX:
+      axis = ExtUI::X;
+      break;
+    case DGUS_Addr::MOVE_SetY:
+      axis = ExtUI::Y;
+      break;
+    case DGUS_Addr::MOVE_SetZ:
+      axis = ExtUI::Z;
+      break;
+  }
+
+  if (!ExtUI::isAxisPositionKnown(axis)) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_HOMING_REQUIRED);
+    return;
+  }
+
+  ExtUI::setAxisPosition_mm(position, axis);
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::MoveStep(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  float offset;
+
+  switch (dgus_screen_handler.move_steps) {
+    default: return;
+    case DGUS_Data::StepSize::MM10:
+      offset = 10.0f;
+      break;
+    case DGUS_Data::StepSize::MM1:
+      offset = 1.0f;
+      break;
+    case DGUS_Data::StepSize::MMP1:
+      offset = 0.1f;
+      break;
+  }
+
+  const DGUS_Data::MoveDirection direction = (DGUS_Data::MoveDirection)((uint8_t*)data_ptr)[1];
+  ExtUI::axis_t axis;
+
+  switch (direction) {
+    default: return;
+    case DGUS_Data::MoveDirection::XP:
+      axis = ExtUI::X;
+      break;
+    case DGUS_Data::MoveDirection::XM:
+      axis = ExtUI::X;
+      offset = -offset;
+      break;
+    case DGUS_Data::MoveDirection::YP:
+      axis = ExtUI::Y;
+      break;
+    case DGUS_Data::MoveDirection::YM:
+      axis = ExtUI::Y;
+      offset = -offset;
+      break;
+    case DGUS_Data::MoveDirection::ZP:
+      axis = ExtUI::Z;
+      break;
+    case DGUS_Data::MoveDirection::ZM:
+      axis = ExtUI::Z;
+      offset = -offset;
+      break;
+  }
+
+  if (!ExtUI::isAxisPositionKnown(axis)) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_HOMING_REQUIRED);
+    return;
+  }
+
+  UI_INCREMENT_BY(AxisPosition_mm, offset, axis);
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::MoveSetStep(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::StepSize size = (DGUS_Data::StepSize)((uint8_t*)data_ptr)[1];
+
+  dgus_screen_handler.move_steps = size;
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::GcodeClear(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+  UNUSED(data_ptr);
+
+  ZERO(dgus_screen_handler.gcode);
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::GcodeExecute(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+  UNUSED(data_ptr);
+
+  if (!strlen(dgus_screen_handler.gcode)) {
+    return;
+  }
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return;
+  }
+
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
+  dgus_screen_handler.SetMessageLinePGM(PSTR("Executing command..."), 2);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
+  dgus_screen_handler.ShowWaitScreen(DGUS_Screen::GCODE);
+
+  queue.enqueue_one_now(dgus_screen_handler.gcode);
+}
+
+void DGUSRxHandler::ResetEEPROM(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
+
+  if (result != DGUS_Data::Popup::CONFIRMED) {
+    return;
+  }
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return;
+  }
+
+  queue.enqueue_now_P(PSTR("M502"));
+  queue.enqueue_now_P(DGUS_CMD_EEPROM_SAVE);
+}
+
+void DGUSRxHandler::SettingsExtra(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::Extra extra = (DGUS_Data::Extra)((uint8_t*)data_ptr)[1];
+
+  switch (extra) {
+    default: return;
+    case DGUS_Data::Extra::BUTTON1:
+      #if ENABLED(BLTOUCH)
+        if (!dgus_screen_handler.IsPrinterIdle()) {
+          dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+          return;
+        }
+
+        queue.enqueue_now_P(PSTR(DGUS_RESET_BLTOUCH));
+      #else
+        dgus_screen_handler.TriggerScreenChange(DGUS_Screen::INFOS);
+      #endif
+      break;
+    #if ENABLED(BLTOUCH)
+      case DGUS_Data::Extra::BUTTON2:
+        dgus_screen_handler.TriggerScreenChange(DGUS_Screen::INFOS);
+        break;
+    #endif
+  }
+}
+
+void DGUSRxHandler::PIDSelect(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::Heater heater = (DGUS_Data::Heater)Swap16(*(uint16_t*)data_ptr);
+
+  switch (heater) {
+    default: return;
+    case DGUS_Data::Heater::BED:
+      dgus_screen_handler.pid_temp = DGUS_PLA_TEMP_BED;
+      dgus_screen_handler.pid_heater = heater;
+      break;
+    case DGUS_Data::Heater::H0:
+    #if HOTENDS > 1
+      case DGUS_Data::Heater::H1:
+    #endif
+      dgus_screen_handler.pid_temp = DGUS_PLA_TEMP_HOTEND;
+      dgus_screen_handler.pid_heater = heater;
+      break;
+  }
+
+  dgus_screen_handler.pid_cycles = 5;
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::PIDSetTemp(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return;
+  }
+
+  uint16_t temp = Swap16(*(uint16_t*)data_ptr);
+
+  switch (dgus_screen_handler.pid_heater) {
+    default: return;
+    case DGUS_Data::Heater::BED:
+      temp = constrain(temp, BED_MINTEMP, BED_MAX_TARGET);
+      break;
+    case DGUS_Data::Heater::H0:
+      temp = constrain(temp, HEATER_0_MINTEMP, (HEATER_0_MAXTEMP - HOTEND_OVERSHOOT));
+      break;
+    #if HOTENDS > 1
+      case DGUS_Data::Heater::H1:
+        temp = constrain(temp, HEATER_1_MINTEMP, (HEATER_1_MAXTEMP - HOTEND_OVERSHOOT));
+        break;
+    #endif
+  }
+
+  dgus_screen_handler.pid_temp = temp;
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::PIDRun(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+  UNUSED(data_ptr);
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return;
+  }
+
+  heater_id_t heater;
+  uint8_t cycles = constrain(dgus_screen_handler.pid_cycles, 3, 10);
+
+  switch (dgus_screen_handler.pid_heater) {
+    default: return;
+    case DGUS_Data::Heater::BED:
+      #if ENABLED(PIDTEMPBED)
+        heater = H_BED;
+        break;
+      #else
+        dgus_screen_handler.SetStatusMessagePGM(PSTR("Bed PID disabled"));
+        return;
+      #endif
+    case DGUS_Data::Heater::H0:
+      #if ENABLED(PIDTEMP)
+        heater = H_E0;
+        break;
+      #else
+        dgus_screen_handler.SetStatusMessagePGM(PSTR("PID disabled"));
+        return;
+      #endif
+    #if HOTENDS > 1
+      case DGUS_Data::Heater::H1:
+        #if ENABLED(PIDTEMP)
+          heater = H_E1;
+          break;
+        #else
+          dgus_screen_handler.SetStatusMessagePGM(PSTR("PID disabled"));
+          return;
+        #endif
+    #endif
+  }
+
+  char buffer[24];
+  snprintf_P(buffer, sizeof(buffer), PSTR("M303C%dE%dS%dU1"), cycles, heater, dgus_screen_handler.pid_temp);
+
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
+  dgus_screen_handler.SetMessageLinePGM(PSTR("PID autotuning..."), 2);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
+  dgus_screen_handler.ShowWaitScreen(DGUS_Screen::PID);
+
+  queue.enqueue_one_now(buffer);
+  queue.enqueue_now_P(DGUS_CMD_EEPROM_SAVE);
+}
+
+#if ENABLED(POWER_LOSS_RECOVERY)
+  void DGUSRxHandler::PowerLossAbort(DGUS_VP &vp, void *data_ptr) {
+    UNUSED(vp);
+
+    const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
+
+    if (result != DGUS_Data::Popup::CONFIRMED) {
+      return;
+    }
+
+    if (!dgus_screen_handler.IsPrinterIdle()) {
+      dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+      return;
+    }
+
+    dgus_screen_handler.TriggerScreenChange(DGUS_Screen::HOME);
+
+    queue.enqueue_now_P(PSTR("M1000C"));
+  }
+
+  void DGUSRxHandler::PowerLossResume(DGUS_VP &vp, void *data_ptr) {
+    UNUSED(vp);
+
+    const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
+
+    if (result != DGUS_Data::Popup::CONFIRMED) {
+      return;
+    }
+
+    if (!dgus_screen_handler.IsPrinterIdle()) {
+      dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+      return;
+    }
+
+    if (!recovery.valid()) {
+      dgus_screen_handler.SetStatusMessagePGM(PSTR("Invalid recovery data"));
+      return;
+    }
+
+    dgus_screen_handler.TriggerScreenChange(DGUS_Screen::PRINT_STATUS);
+
+    queue.enqueue_now_P(PSTR("M1000"));
+  }
+#endif // POWER_LOSS_RECOVERY
+
+void DGUSRxHandler::WaitAbort(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  const DGUS_Data::Popup result = (DGUS_Data::Popup)((uint8_t*)data_ptr)[1];
+
+  if (result != DGUS_Data::Popup::CONFIRMED) {
+    return;
+  }
+
+  if (!printingIsPaused()
+      #if ENABLED(ADVANCED_PAUSE_FEATURE)
+        || !did_pause_print
+      #endif
+  ) {
+    dgus_screen_handler.TriggerFullUpdate();
+    return;
+  }
+
+  #if ENABLED(ADVANCED_PAUSE_FEATURE)
+    did_pause_print = 0;
+  #endif
+
+  ExtUI::setUserConfirmed();
+  ExtUI::stopPrint();
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::WaitContinue(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+  UNUSED(data_ptr);
+
+  ExtUI::setUserConfirmed();
+
+  dgus_screen_handler.TriggerFullUpdate();
+}
+
+void DGUSRxHandler::FanSpeed(DGUS_VP &vp, void *data_ptr) {
+  uint8_t speed = ((uint8_t*)data_ptr)[1];
+  switch (vp.addr) {
+    default: return;
+    case DGUS_Addr::FAN0_Speed:
+      ExtUI::setTargetFan_percent(speed, ExtUI::FAN0);
+      break;
+  }
+}
+
+void DGUSRxHandler::Volume(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  uint8_t volume = ((uint8_t*)data_ptr)[1];
+  dgus_display.SetVolume(volume);
+
+  dgus_screen_handler.TriggerEEPROMSave();
+}
+
+void DGUSRxHandler::Brightness(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+
+  uint8_t brightness = ((uint8_t*)data_ptr)[1];
+  dgus_display.SetBrightness(brightness);
+
+  dgus_screen_handler.TriggerEEPROMSave();
+}
+
+void DGUSRxHandler::Debug(DGUS_VP &vp, void *data_ptr) {
+  UNUSED(vp);
+  UNUSED(data_ptr);
+
+  ++dgus_screen_handler.debug_count;
+
+  if (dgus_screen_handler.debug_count >= 10) {
+    dgus_screen_handler.TriggerScreenChange(DGUS_Screen::DEBUG);
+  }
+}
+
+void DGUSRxHandler::StringToExtra(DGUS_VP &vp, void *data_ptr) {
+  if (!vp.size || !vp.extra) return;
+  memcpy(vp.extra, data_ptr, vp.size);
+}
+
+#endif // DGUS_LCD_UI_RELOADED
