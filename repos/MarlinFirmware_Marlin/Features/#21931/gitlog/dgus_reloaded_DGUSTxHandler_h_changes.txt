commit bc385122e94d7eda79bdf1573a7c2071c4589da2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 13:34:13 2023 -0500

    üé® Lowercase method / data member names (#25914)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
index 6e4f1db5dc..c82f4c80da 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
@@ -29,97 +29,97 @@
 namespace DGUSTxHandler {
 
   #if HAS_MEDIA
-    void SetFileControlState(int16_t, bool);
-    void FileType(DGUS_VP &);
-    void FileName(DGUS_VP &);
-    void ScrollIcons(DGUS_VP &);
-    void SelectedFileName(DGUS_VP &);
+    void setFileControlState(int16_t, bool);
+    void fileType(DGUS_VP &);
+    void fileName(DGUS_VP &);
+    void scrollIcons(DGUS_VP &);
+    void selectedFileName(DGUS_VP &);
   #endif
 
-  void PositionZ(DGUS_VP &);
-  void Elapsed(DGUS_VP &);
-  void Percent(DGUS_VP &);
-  void StatusIcons(DGUS_VP &);
+  void zPosition(DGUS_VP &);
+  void elapsed(DGUS_VP &);
+  void percent(DGUS_VP &);
+  void statusIcons(DGUS_VP &);
 
-  void Flowrate(DGUS_VP &);
+  void flowrate(DGUS_VP &);
 
-  void TempMax(DGUS_VP &);
+  void tempMax(DGUS_VP &);
 
-  void StepperStatus(DGUS_VP &);
+  void stepperStatus(DGUS_VP &);
 
-  void StepIcons(DGUS_VP &);
+  void stepIcons(DGUS_VP &);
 
-  void ABLDisableIcon(DGUS_VP &);
-  void ABLGrid(DGUS_VP &);
+  void ablDisableIcon(DGUS_VP &);
+  void ablGrid(DGUS_VP &);
 
-  void FilamentIcons(DGUS_VP &);
+  void filamentIcons(DGUS_VP &);
 
-  void BLTouch(DGUS_VP &);
+  void blTouch(DGUS_VP &);
 
-  void PIDIcons(DGUS_VP &);
-  void PIDKp(DGUS_VP &);
-  void PIDKi(DGUS_VP &);
-  void PIDKd(DGUS_VP &);
+  void pidIcons(DGUS_VP &);
+  void pidKp(DGUS_VP &);
+  void pidKi(DGUS_VP &);
+  void pidKd(DGUS_VP &);
 
-  void BuildVolume(DGUS_VP &);
-  void TotalPrints(DGUS_VP &);
-  void FinishedPrints(DGUS_VP &);
-  void PrintTime(DGUS_VP &);
-  void LongestPrint(DGUS_VP &);
-  void FilamentUsed(DGUS_VP &);
+  void buildVolume(DGUS_VP &);
+  void totalPrints(DGUS_VP &);
+  void finishedPrints(DGUS_VP &);
+  void printTime(DGUS_VP &);
+  void longestPrint(DGUS_VP &);
+  void filamentUsed(DGUS_VP &);
 
-  void WaitIcons(DGUS_VP &);
+  void waitIcons(DGUS_VP &);
 
-  void FanSpeed(DGUS_VP &);
+  void fanSpeed(DGUS_VP &);
 
-  void Volume(DGUS_VP &);
+  void volume(DGUS_VP &);
 
-  void Brightness(DGUS_VP &);
+  void brightness(DGUS_VP &);
 
-  void ExtraToString(DGUS_VP &);
-  void ExtraPGMToString(DGUS_VP &);
+  void extraToString(DGUS_VP &);
+  void extraPGMToString(DGUS_VP &);
 
   template<typename T>
-  void ExtraToInteger(DGUS_VP &vp) {
+  void extraToInteger(DGUS_VP &vp) {
     if (!vp.size || !vp.extra) return;
     switch (vp.size) {
       default: return;
       case 1: {
         const uint8_t data = uint8_t(*(T*)vp.extra);
-        dgus_display.Write(uint16_t(vp.addr), data);
+        dgus.write(uint16_t(vp.addr), data);
         break;
       }
       case 2: {
         const uint16_t data = uint16_t(*(T*)vp.extra);
-        dgus_display.Write(uint16_t(vp.addr), Swap16(data));
+        dgus.write(uint16_t(vp.addr), Swap16(data));
         break;
       }
       case 4: {
         const uint32_t data = uint32_t(*(T*)vp.extra);
-        dgus_display.Write(uint16_t(vp.addr), dgus_display.SwapBytes(data));
+        dgus.write(uint16_t(vp.addr), dgus.swapBytes(data));
         break;
       }
     }
   }
 
   template<typename T, uint8_t decimals>
-  void ExtraToFixedPoint(DGUS_VP &vp) {
+  void extraToFixedPoint(DGUS_VP &vp) {
     if (!vp.size || !vp.extra) return;
     switch (vp.size) {
       default: return;
       case 1: {
-        const uint8_t data = dgus_display.ToFixedPoint<T, uint8_t, decimals>(*(T*)vp.extra);
-        dgus_display.Write(uint16_t(vp.addr), data);
+        const uint8_t data = dgus.toFixedPoint<T, uint8_t, decimals>(*(T*)vp.extra);
+        dgus.write(uint16_t(vp.addr), data);
         break;
       }
       case 2: {
-        const uint16_t data = dgus_display.ToFixedPoint<T, uint16_t, decimals>(*(T*)vp.extra);
-        dgus_display.Write(uint16_t(vp.addr), Swap16(data));
+        const uint16_t data = dgus.toFixedPoint<T, uint16_t, decimals>(*(T*)vp.extra);
+        dgus.write(uint16_t(vp.addr), Swap16(data));
         break;
       }
       case 4: {
-        const uint32_t data = dgus_display.ToFixedPoint<T, uint32_t, decimals>(*(T*)vp.extra);
-        dgus_display.Write(uint16_t(vp.addr), dgus_display.SwapBytes(data));
+        const uint32_t data = dgus.toFixedPoint<T, uint32_t, decimals>(*(T*)vp.extra);
+        dgus.write(uint16_t(vp.addr), dgus.swapBytes(data));
         break;
       }
     }

commit 5664c02d077e028f84a24efd96c2eebe97ce8763
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 22:43:09 2023 -0500

    üßë‚Äçüíª Generalize SDSUPPORT as HAS_MEDIA
    
    In preparation for single- and multi-volume refactoring.

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
index 161d73f813..6e4f1db5dc 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
@@ -28,7 +28,7 @@
 
 namespace DGUSTxHandler {
 
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     void SetFileControlState(int16_t, bool);
     void FileType(DGUS_VP &);
     void FileName(DGUS_VP &);

commit cc31537ae3ca3be37ffb171540e7445f30827930
Author: albatorsssx <albator_ssx@hotmail.com>
Date:   Tue Mar 7 03:04:47 2023 +0100

    üåê DGUS Reloaded non-accented French (#25443)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
index aad73dd5d6..161d73f813 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
@@ -37,7 +37,7 @@ namespace DGUSTxHandler {
   #endif
 
   void PositionZ(DGUS_VP &);
-  void Ellapsed(DGUS_VP &);
+  void Elapsed(DGUS_VP &);
   void Percent(DGUS_VP &);
   void StatusIcons(DGUS_VP &);
 

commit 96bc084f3d791bc93265f217181986863e8e5fc7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 18 02:15:16 2023 -0600

    üé® Misc. LCD cleanup (#25400)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
index 7d1b46773b..aad73dd5d6 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
@@ -24,12 +24,12 @@
 #include "DGUSDisplay.h"
 #include "definition/DGUS_VP.h"
 
-#define Swap16(val) ((uint16_t)(((uint16_t)(val) >> 8) | ((uint16_t)(val) << 8)))
+#define Swap16(val) (uint16_t((uint16_t(val) >> 8) | (uint16_t(val) << 8)))
 
 namespace DGUSTxHandler {
 
   #if ENABLED(SDSUPPORT)
-    void SetFileControlState(int, bool);
+    void SetFileControlState(int16_t, bool);
     void FileType(DGUS_VP &);
     void FileName(DGUS_VP &);
     void ScrollIcons(DGUS_VP &);
@@ -85,18 +85,18 @@ namespace DGUSTxHandler {
     switch (vp.size) {
       default: return;
       case 1: {
-        const uint8_t data = (uint8_t)(*(T*)vp.extra);
-        dgus_display.Write((uint16_t)vp.addr, data);
+        const uint8_t data = uint8_t(*(T*)vp.extra);
+        dgus_display.Write(uint16_t(vp.addr), data);
         break;
       }
       case 2: {
-        const uint16_t data = (uint16_t)(*(T*)vp.extra);
-        dgus_display.Write((uint16_t)vp.addr, Swap16(data));
+        const uint16_t data = uint16_t(*(T*)vp.extra);
+        dgus_display.Write(uint16_t(vp.addr), Swap16(data));
         break;
       }
       case 4: {
-        const uint32_t data = (uint32_t)(*(T*)vp.extra);
-        dgus_display.Write((uint16_t)vp.addr, dgus_display.SwapBytes(data));
+        const uint32_t data = uint32_t(*(T*)vp.extra);
+        dgus_display.Write(uint16_t(vp.addr), dgus_display.SwapBytes(data));
         break;
       }
     }
@@ -109,17 +109,17 @@ namespace DGUSTxHandler {
       default: return;
       case 1: {
         const uint8_t data = dgus_display.ToFixedPoint<T, uint8_t, decimals>(*(T*)vp.extra);
-        dgus_display.Write((uint16_t)vp.addr, data);
+        dgus_display.Write(uint16_t(vp.addr), data);
         break;
       }
       case 2: {
         const uint16_t data = dgus_display.ToFixedPoint<T, uint16_t, decimals>(*(T*)vp.extra);
-        dgus_display.Write((uint16_t)vp.addr, Swap16(data));
+        dgus_display.Write(uint16_t(vp.addr), Swap16(data));
         break;
       }
       case 4: {
         const uint32_t data = dgus_display.ToFixedPoint<T, uint32_t, decimals>(*(T*)vp.extra);
-        dgus_display.Write((uint16_t)vp.addr, dgus_display.SwapBytes(data));
+        dgus_display.Write(uint16_t(vp.addr), dgus_display.SwapBytes(data));
         break;
       }
     }

commit 4ae9bf3b9d8c8f1c0be723e4ce163492b267fc87
Author: Protomosh <43253582+Protomosh@users.noreply.github.com>
Date:   Fri Aug 19 20:57:27 2022 +0300

    üêõ Fix DGUS Reloaded + STM32 (#24600)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
index 94632fe385..7d1b46773b 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
@@ -24,6 +24,8 @@
 #include "DGUSDisplay.h"
 #include "definition/DGUS_VP.h"
 
+#define Swap16(val) ((uint16_t)(((uint16_t)(val) >> 8) | ((uint16_t)(val) << 8)))
+
 namespace DGUSTxHandler {
 
   #if ENABLED(SDSUPPORT)

commit 9d72cbf84b970e5060f8dceef7158b9ca8252856
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 15 15:07:47 2021 -0500

    üí° Update old gnu.org links

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
index a034b92ece..94632fe385 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once

commit 323b38ee88dbf2a4691a20439dbb95a824822199
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Sep 16 04:36:26 2021 -0500

    üí° Adjust headers, formatting

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
index 5715abbedf..a034b92ece 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
@@ -19,7 +19,6 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
-
 #pragma once
 
 #include "DGUSDisplay.h"

commit b0e798330d8f5ade4a230e0a91f05482d100bb97
Author: mrv96 <mrv96@users.noreply.github.com>
Date:   Tue Sep 7 02:51:04 2021 +0200

    ‚ú®Add DGUS_LCD_UI_RELOADED (#21931)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
new file mode 100644
index 0000000000..5715abbedf
--- /dev/null
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSTxHandler.h
@@ -0,0 +1,127 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2021 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#pragma once
+
+#include "DGUSDisplay.h"
+#include "definition/DGUS_VP.h"
+
+namespace DGUSTxHandler {
+
+  #if ENABLED(SDSUPPORT)
+    void SetFileControlState(int, bool);
+    void FileType(DGUS_VP &);
+    void FileName(DGUS_VP &);
+    void ScrollIcons(DGUS_VP &);
+    void SelectedFileName(DGUS_VP &);
+  #endif
+
+  void PositionZ(DGUS_VP &);
+  void Ellapsed(DGUS_VP &);
+  void Percent(DGUS_VP &);
+  void StatusIcons(DGUS_VP &);
+
+  void Flowrate(DGUS_VP &);
+
+  void TempMax(DGUS_VP &);
+
+  void StepperStatus(DGUS_VP &);
+
+  void StepIcons(DGUS_VP &);
+
+  void ABLDisableIcon(DGUS_VP &);
+  void ABLGrid(DGUS_VP &);
+
+  void FilamentIcons(DGUS_VP &);
+
+  void BLTouch(DGUS_VP &);
+
+  void PIDIcons(DGUS_VP &);
+  void PIDKp(DGUS_VP &);
+  void PIDKi(DGUS_VP &);
+  void PIDKd(DGUS_VP &);
+
+  void BuildVolume(DGUS_VP &);
+  void TotalPrints(DGUS_VP &);
+  void FinishedPrints(DGUS_VP &);
+  void PrintTime(DGUS_VP &);
+  void LongestPrint(DGUS_VP &);
+  void FilamentUsed(DGUS_VP &);
+
+  void WaitIcons(DGUS_VP &);
+
+  void FanSpeed(DGUS_VP &);
+
+  void Volume(DGUS_VP &);
+
+  void Brightness(DGUS_VP &);
+
+  void ExtraToString(DGUS_VP &);
+  void ExtraPGMToString(DGUS_VP &);
+
+  template<typename T>
+  void ExtraToInteger(DGUS_VP &vp) {
+    if (!vp.size || !vp.extra) return;
+    switch (vp.size) {
+      default: return;
+      case 1: {
+        const uint8_t data = (uint8_t)(*(T*)vp.extra);
+        dgus_display.Write((uint16_t)vp.addr, data);
+        break;
+      }
+      case 2: {
+        const uint16_t data = (uint16_t)(*(T*)vp.extra);
+        dgus_display.Write((uint16_t)vp.addr, Swap16(data));
+        break;
+      }
+      case 4: {
+        const uint32_t data = (uint32_t)(*(T*)vp.extra);
+        dgus_display.Write((uint16_t)vp.addr, dgus_display.SwapBytes(data));
+        break;
+      }
+    }
+  }
+
+  template<typename T, uint8_t decimals>
+  void ExtraToFixedPoint(DGUS_VP &vp) {
+    if (!vp.size || !vp.extra) return;
+    switch (vp.size) {
+      default: return;
+      case 1: {
+        const uint8_t data = dgus_display.ToFixedPoint<T, uint8_t, decimals>(*(T*)vp.extra);
+        dgus_display.Write((uint16_t)vp.addr, data);
+        break;
+      }
+      case 2: {
+        const uint16_t data = dgus_display.ToFixedPoint<T, uint16_t, decimals>(*(T*)vp.extra);
+        dgus_display.Write((uint16_t)vp.addr, Swap16(data));
+        break;
+      }
+      case 4: {
+        const uint32_t data = dgus_display.ToFixedPoint<T, uint32_t, decimals>(*(T*)vp.extra);
+        dgus_display.Write((uint16_t)vp.addr, dgus_display.SwapBytes(data));
+        break;
+      }
+    }
+  }
+
+}
