commit c3694f1c038fa20ad749118b0a1c7aa88e3dd5f2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jun 14 17:24:50 2023 -0500

    üé® Lowercase methods, functions, data members (#25939)
    
    For: TFT, DGUS, MarlinUI, Anycubic, JyersUI, CrealityUI

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
index b0aeacbfdf..8f970e094f 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
@@ -32,7 +32,7 @@
 #include "../../../gcode/queue.h"
 
 #if HAS_MEDIA
-  bool DGUSSetupHandler::Print() {
+  bool DGUSSetupHandler::print() {
     screen.filelist.refresh();
 
     while (!screen.filelist.isAtRootDir()) {
@@ -46,7 +46,7 @@
   }
 #endif
 
-bool DGUSSetupHandler::PrintStatus() {
+bool DGUSSetupHandler::printStatus() {
   if (ExtUI::isPrinting() || ExtUI::isPrintingPaused()) {
     return true;
   }
@@ -55,7 +55,7 @@ bool DGUSSetupHandler::PrintStatus() {
   return false;
 }
 
-bool DGUSSetupHandler::PrintAdjust() {
+bool DGUSSetupHandler::printAdjust() {
   if (ExtUI::isPrinting() || ExtUI::isPrintingPaused()) {
     return true;
   }
@@ -64,7 +64,7 @@ bool DGUSSetupHandler::PrintAdjust() {
   return false;
 }
 
-bool DGUSSetupHandler::LevelingMenu() {
+bool DGUSSetupHandler::levelingMenu() {
   ExtUI::setLevelingActive(screen.leveling_active);
 
   if (!screen.isPrinterIdle()) {
@@ -87,7 +87,7 @@ bool DGUSSetupHandler::LevelingMenu() {
   return false;
 }
 
-bool DGUSSetupHandler::LevelingManual() {
+bool DGUSSetupHandler::levelingManual() {
   ExtUI::setLevelingActive(false);
 
   if (ExtUI::isPositionKnown()) {
@@ -106,7 +106,7 @@ bool DGUSSetupHandler::LevelingManual() {
   return false;
 }
 
-bool DGUSSetupHandler::LevelingOffset() {
+bool DGUSSetupHandler::levelingOffset() {
   screen.offset_steps = DGUS_Data::StepSize::MMP1;
 
   if (!screen.isPrinterIdle()) {
@@ -135,7 +135,7 @@ bool DGUSSetupHandler::LevelingOffset() {
   return false;
 }
 
-bool DGUSSetupHandler::LevelingAutomatic() {
+bool DGUSSetupHandler::levelingAutomatic() {
   if (ExtUI::getLevelingIsValid()) {
     screen.leveling_active = true;
 
@@ -145,21 +145,21 @@ bool DGUSSetupHandler::LevelingAutomatic() {
   return true;
 }
 
-bool DGUSSetupHandler::LevelingProbing() {
+bool DGUSSetupHandler::levelingProbing() {
   screen.probing_icons[0] = 0;
   screen.probing_icons[1] = 0;
 
   return true;
 }
 
-bool DGUSSetupHandler::Filament() {
+bool DGUSSetupHandler::filament() {
   screen.filament_extruder = DGUS_Data::Extruder::CURRENT;
   screen.filament_length = DGUS_DEFAULT_FILAMENT_LEN;
 
   return true;
 }
 
-bool DGUSSetupHandler::Move() {
+bool DGUSSetupHandler::move() {
   screen.move_steps = DGUS_Data::StepSize::MM10;
 
   if (!screen.isPrinterIdle()) {
@@ -170,7 +170,7 @@ bool DGUSSetupHandler::Move() {
   return true;
 }
 
-bool DGUSSetupHandler::Gcode() {
+bool DGUSSetupHandler::gcode() {
   ZERO(screen.gcode);
 
   if (dgus.gui_version < 0x30 || dgus.os_version < 0x21) {
@@ -181,14 +181,14 @@ bool DGUSSetupHandler::Gcode() {
   return true;
 }
 
-bool DGUSSetupHandler::PID() {
+bool DGUSSetupHandler::pid() {
   screen.pid_heater = DGUS_Data::Heater::H0;
   screen.pid_temp = DGUS_PLA_TEMP_HOTEND;
 
   return true;
 }
 
-bool DGUSSetupHandler::Infos() {
+bool DGUSSetupHandler::infos() {
   screen.debug_count = 0;
 
   return true;

commit bc385122e94d7eda79bdf1573a7c2071c4589da2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 13:34:13 2023 -0500

    üé® Lowercase method / data member names (#25914)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
index c3b4bad88a..b0aeacbfdf 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
@@ -33,14 +33,14 @@
 
 #if HAS_MEDIA
   bool DGUSSetupHandler::Print() {
-    dgus_screen_handler.filelist.refresh();
+    screen.filelist.refresh();
 
-    while (!dgus_screen_handler.filelist.isAtRootDir()) {
-      dgus_screen_handler.filelist.upDir();
+    while (!screen.filelist.isAtRootDir()) {
+      screen.filelist.upDir();
     }
 
-    dgus_screen_handler.filelist_offset = 0;
-    dgus_screen_handler.filelist_selected = -1;
+    screen.filelist_offset = 0;
+    screen.filelist_selected = -1;
 
     return true;
   }
@@ -51,7 +51,7 @@ bool DGUSSetupHandler::PrintStatus() {
     return true;
   }
 
-  dgus_screen_handler.TriggerScreenChange(DGUS_Screen::PRINT_FINISHED);
+  screen.triggerScreenChange(DGUS_ScreenID::PRINT_FINISHED);
   return false;
 }
 
@@ -60,15 +60,15 @@ bool DGUSSetupHandler::PrintAdjust() {
     return true;
   }
 
-  dgus_screen_handler.TriggerScreenChange(DGUS_Screen::PRINT_FINISHED);
+  screen.triggerScreenChange(DGUS_ScreenID::PRINT_FINISHED);
   return false;
 }
 
 bool DGUSSetupHandler::LevelingMenu() {
-  ExtUI::setLevelingActive(dgus_screen_handler.leveling_active);
+  ExtUI::setLevelingActive(screen.leveling_active);
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return false;
   }
 
@@ -80,7 +80,7 @@ bool DGUSSetupHandler::LevelingMenu() {
     return true;
   }
 
-  dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), DGUS_Screen::LEVELING_MENU);
+  screen.showWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), DGUS_ScreenID::LEVELING_MENU);
 
   queue.enqueue_now(F("G28"));
 
@@ -94,12 +94,12 @@ bool DGUSSetupHandler::LevelingManual() {
     return true;
   }
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return false;
   }
 
-  dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), DGUS_Screen::LEVELING_MANUAL);
+  screen.showWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), DGUS_ScreenID::LEVELING_MANUAL);
 
   queue.enqueue_now(F("G28"));
 
@@ -107,10 +107,10 @@ bool DGUSSetupHandler::LevelingManual() {
 }
 
 bool DGUSSetupHandler::LevelingOffset() {
-  dgus_screen_handler.offset_steps = DGUS_Data::StepSize::MMP1;
+  screen.offset_steps = DGUS_Data::StepSize::MMP1;
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return false;
   }
 
@@ -128,7 +128,7 @@ bool DGUSSetupHandler::LevelingOffset() {
     return true;
   }
 
-  dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), DGUS_Screen::LEVELING_OFFSET);
+  screen.showWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), DGUS_ScreenID::LEVELING_OFFSET);
 
   queue.enqueue_now(F("G28"));
 
@@ -137,7 +137,7 @@ bool DGUSSetupHandler::LevelingOffset() {
 
 bool DGUSSetupHandler::LevelingAutomatic() {
   if (ExtUI::getLevelingIsValid()) {
-    dgus_screen_handler.leveling_active = true;
+    screen.leveling_active = true;
 
     ExtUI::setLevelingActive(true);
   }
@@ -146,24 +146,24 @@ bool DGUSSetupHandler::LevelingAutomatic() {
 }
 
 bool DGUSSetupHandler::LevelingProbing() {
-  dgus_screen_handler.probing_icons[0] = 0;
-  dgus_screen_handler.probing_icons[1] = 0;
+  screen.probing_icons[0] = 0;
+  screen.probing_icons[1] = 0;
 
   return true;
 }
 
 bool DGUSSetupHandler::Filament() {
-  dgus_screen_handler.filament_extruder = DGUS_Data::Extruder::CURRENT;
-  dgus_screen_handler.filament_length = DGUS_DEFAULT_FILAMENT_LEN;
+  screen.filament_extruder = DGUS_Data::Extruder::CURRENT;
+  screen.filament_length = DGUS_DEFAULT_FILAMENT_LEN;
 
   return true;
 }
 
 bool DGUSSetupHandler::Move() {
-  dgus_screen_handler.move_steps = DGUS_Data::StepSize::MM10;
+  screen.move_steps = DGUS_Data::StepSize::MM10;
 
-  if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
+  if (!screen.isPrinterIdle()) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return false;
   }
 
@@ -171,10 +171,10 @@ bool DGUSSetupHandler::Move() {
 }
 
 bool DGUSSetupHandler::Gcode() {
-  ZERO(dgus_screen_handler.gcode);
+  ZERO(screen.gcode);
 
-  if (dgus_display.gui_version < 0x30 || dgus_display.os_version < 0x21) {
-    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_FW_OUTDATED));
+  if (dgus.gui_version < 0x30 || dgus.os_version < 0x21) {
+    screen.setStatusMessage(GET_TEXT_F(DGUS_MSG_FW_OUTDATED));
     return false;
   }
 
@@ -182,14 +182,14 @@ bool DGUSSetupHandler::Gcode() {
 }
 
 bool DGUSSetupHandler::PID() {
-  dgus_screen_handler.pid_heater = DGUS_Data::Heater::H0;
-  dgus_screen_handler.pid_temp = DGUS_PLA_TEMP_HOTEND;
+  screen.pid_heater = DGUS_Data::Heater::H0;
+  screen.pid_temp = DGUS_PLA_TEMP_HOTEND;
 
   return true;
 }
 
 bool DGUSSetupHandler::Infos() {
-  dgus_screen_handler.debug_count = 0;
+  screen.debug_count = 0;
 
   return true;
 }

commit 9e0dcd4a2b6d0262ee2b09170aff0c1f21d9175e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jun 1 16:53:02 2023 -0500

    üßë‚Äçüíª ExtUI::onLevelingStart/Done for all leveling (#25913)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
index 3b1a38502d..c3b4bad88a 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
@@ -136,7 +136,7 @@ bool DGUSSetupHandler::LevelingOffset() {
 }
 
 bool DGUSSetupHandler::LevelingAutomatic() {
-  if (ExtUI::getMeshValid()) {
+  if (ExtUI::getLevelingIsValid()) {
     dgus_screen_handler.leveling_active = true;
 
     ExtUI::setLevelingActive(true);

commit 5664c02d077e028f84a24efd96c2eebe97ce8763
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 22:43:09 2023 -0500

    üßë‚Äçüíª Generalize SDSUPPORT as HAS_MEDIA
    
    In preparation for single- and multi-volume refactoring.

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
index c95d7d0453..3b1a38502d 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
@@ -31,7 +31,7 @@
 
 #include "../../../gcode/queue.h"
 
-#if ENABLED(SDSUPPORT)
+#if HAS_MEDIA
   bool DGUSSetupHandler::Print() {
     dgus_screen_handler.filelist.refresh();
 

commit 4b9bb85b1266e8febbcb1931c8427d410a05bf84
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Mar 6 22:55:55 2023 -0600

    üîß Add DGUS_LCD_UI RELOADED conditions

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
index 3b243e4711..c95d7d0453 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
@@ -82,7 +82,7 @@ bool DGUSSetupHandler::LevelingMenu() {
 
   dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), DGUS_Screen::LEVELING_MENU);
 
-  queue.enqueue_now_P(DGUS_CMD_HOME);
+  queue.enqueue_now(F("G28"));
 
   return false;
 }
@@ -101,7 +101,7 @@ bool DGUSSetupHandler::LevelingManual() {
 
   dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), DGUS_Screen::LEVELING_MANUAL);
 
-  queue.enqueue_now_P(DGUS_CMD_HOME);
+  queue.enqueue_now(F("G28"));
 
   return false;
 }
@@ -130,7 +130,7 @@ bool DGUSSetupHandler::LevelingOffset() {
 
   dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), DGUS_Screen::LEVELING_OFFSET);
 
-  queue.enqueue_now_P(DGUS_CMD_HOME);
+  queue.enqueue_now(F("G28"));
 
   return false;
 }

commit cc31537ae3ca3be37ffb171540e7445f30827930
Author: albatorsssx <albator_ssx@hotmail.com>
Date:   Tue Mar 7 03:04:47 2023 +0100

    üåê DGUS Reloaded non-accented French (#25443)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
index 4caccc0717..3b243e4711 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
@@ -68,7 +68,7 @@ bool DGUSSetupHandler::LevelingMenu() {
   ExtUI::setLevelingActive(dgus_screen_handler.leveling_active);
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return false;
   }
 
@@ -80,11 +80,7 @@ bool DGUSSetupHandler::LevelingMenu() {
     return true;
   }
 
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
-  dgus_screen_handler.SetMessageLinePGM(DGUS_MSG_HOMING, 2);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
-  dgus_screen_handler.ShowWaitScreen(DGUS_Screen::LEVELING_MENU);
+  dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), DGUS_Screen::LEVELING_MENU);
 
   queue.enqueue_now_P(DGUS_CMD_HOME);
 
@@ -99,15 +95,11 @@ bool DGUSSetupHandler::LevelingManual() {
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return false;
   }
 
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
-  dgus_screen_handler.SetMessageLinePGM(DGUS_MSG_HOMING, 2);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
-  dgus_screen_handler.ShowWaitScreen(DGUS_Screen::LEVELING_MANUAL);
+  dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), DGUS_Screen::LEVELING_MANUAL);
 
   queue.enqueue_now_P(DGUS_CMD_HOME);
 
@@ -118,7 +110,7 @@ bool DGUSSetupHandler::LevelingOffset() {
   dgus_screen_handler.offset_steps = DGUS_Data::StepSize::MMP1;
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return false;
   }
 
@@ -136,11 +128,7 @@ bool DGUSSetupHandler::LevelingOffset() {
     return true;
   }
 
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
-  dgus_screen_handler.SetMessageLinePGM(DGUS_MSG_HOMING, 2);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
-  dgus_screen_handler.ShowWaitScreen(DGUS_Screen::LEVELING_OFFSET);
+  dgus_screen_handler.ShowWaitScreen(GET_TEXT_F(DGUS_MSG_HOMING), DGUS_Screen::LEVELING_OFFSET);
 
   queue.enqueue_now_P(DGUS_CMD_HOME);
 
@@ -175,7 +163,7 @@ bool DGUSSetupHandler::Move() {
   dgus_screen_handler.move_steps = DGUS_Data::StepSize::MM10;
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_BUSY));
     return false;
   }
 
@@ -186,7 +174,7 @@ bool DGUSSetupHandler::Gcode() {
   ZERO(dgus_screen_handler.gcode);
 
   if (dgus_display.gui_version < 0x30 || dgus_display.os_version < 0x21) {
-    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_FW_OUTDATED));
+    dgus_screen_handler.SetStatusMessage(GET_TEXT_F(DGUS_MSG_FW_OUTDATED));
     return false;
   }
 

commit c3fe4abd446336c50bdb892f08fa24a08f1bdda5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 7 22:59:25 2023 -0600

    üî® DGUS_LCD_UI version check

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
index 090d53c92e..4caccc0717 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
@@ -22,7 +22,7 @@
 
 #include "../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(DGUS_LCD_UI_RELOADED)
+#if DGUS_LCD_UI_RELOADED
 
 #include "DGUSSetupHandler.h"
 

commit 9d72cbf84b970e5060f8dceef7158b9ca8252856
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 15 15:07:47 2021 -0500

    üí° Update old gnu.org links

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
index 6ab2b004e5..090d53c92e 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit 12b5d997a2cee538e5026a68f8e0cfdd53248986
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 25 22:11:48 2021 -0500

    üé® Apply F() to some ExtUI functions

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
index e93eb766ce..6ab2b004e5 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
@@ -68,7 +68,7 @@ bool DGUSSetupHandler::LevelingMenu() {
   ExtUI::setLevelingActive(dgus_screen_handler.leveling_active);
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return false;
   }
 
@@ -99,7 +99,7 @@ bool DGUSSetupHandler::LevelingManual() {
   }
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return false;
   }
 
@@ -118,7 +118,7 @@ bool DGUSSetupHandler::LevelingOffset() {
   dgus_screen_handler.offset_steps = DGUS_Data::StepSize::MMP1;
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return false;
   }
 
@@ -175,7 +175,7 @@ bool DGUSSetupHandler::Move() {
   dgus_screen_handler.move_steps = DGUS_Data::StepSize::MM10;
 
   if (!dgus_screen_handler.IsPrinterIdle()) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_BUSY));
     return false;
   }
 
@@ -186,7 +186,7 @@ bool DGUSSetupHandler::Gcode() {
   ZERO(dgus_screen_handler.gcode);
 
   if (dgus_display.gui_version < 0x30 || dgus_display.os_version < 0x21) {
-    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_FW_OUTDATED);
+    dgus_screen_handler.SetStatusMessage(FPSTR(DGUS_MSG_FW_OUTDATED));
     return false;
   }
 

commit 417e2530ebc5b6c74ac34adaba8be552b407383a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 21:11:31 2021 -0500

    üé® Apply F() to G-code suite and queue

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
index 0d94751fc2..e93eb766ce 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
@@ -74,7 +74,7 @@ bool DGUSSetupHandler::LevelingMenu() {
 
   if (ExtUI::isPositionKnown()) {
     if (ExtUI::getAxisPosition_mm(ExtUI::Z) < 10.0f) {
-      queue.enqueue_now_P(PSTR("G0Z10"));
+      queue.enqueue_now(F("G0Z10"));
     }
 
     return true;
@@ -124,14 +124,14 @@ bool DGUSSetupHandler::LevelingOffset() {
 
   if (ExtUI::isPositionKnown()) {
     if (ExtUI::getAxisPosition_mm(ExtUI::Z) < 4.0f) {
-      queue.enqueue_now_P(PSTR("G0Z4"));
+      queue.enqueue_now(F("G0Z4"));
     }
 
     char buffer[20];
     snprintf_P(buffer, sizeof(buffer), PSTR("G0X%dY%d"), DGUS_LEVEL_CENTER_X, DGUS_LEVEL_CENTER_Y);
 
     queue.enqueue_one_now(buffer);
-    queue.enqueue_now_P(PSTR("G0Z0"));
+    queue.enqueue_now(F("G0Z0"));
 
     return true;
   }

commit 23d10ceccb16e5886a6441a364fcbc08391287fe
Author: Desuuuu <contact@desuuuu.com>
Date:   Fri Sep 10 12:15:08 2021 +0200

    üé® Use ExtUI API where applicable

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
index c12282c4ef..0d94751fc2 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
@@ -47,7 +47,7 @@
 #endif
 
 bool DGUSSetupHandler::PrintStatus() {
-  if (printingIsActive() || printingIsPaused()) {
+  if (ExtUI::isPrinting() || ExtUI::isPrintingPaused()) {
     return true;
   }
 
@@ -56,7 +56,7 @@ bool DGUSSetupHandler::PrintStatus() {
 }
 
 bool DGUSSetupHandler::PrintAdjust() {
-  if (printingIsActive() || printingIsPaused()) {
+  if (ExtUI::isPrinting() || ExtUI::isPrintingPaused()) {
     return true;
   }
 

commit b0e798330d8f5ade4a230e0a91f05482d100bb97
Author: mrv96 <mrv96@users.noreply.github.com>
Date:   Tue Sep 7 02:51:04 2021 +0200

    ‚ú®Add DGUS_LCD_UI_RELOADED (#21931)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
new file mode 100644
index 0000000000..c12282c4ef
--- /dev/null
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSSetupHandler.cpp
@@ -0,0 +1,209 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2021 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(DGUS_LCD_UI_RELOADED)
+
+#include "DGUSSetupHandler.h"
+
+#include "DGUSDisplay.h"
+#include "DGUSScreenHandler.h"
+
+#include "../../../gcode/queue.h"
+
+#if ENABLED(SDSUPPORT)
+  bool DGUSSetupHandler::Print() {
+    dgus_screen_handler.filelist.refresh();
+
+    while (!dgus_screen_handler.filelist.isAtRootDir()) {
+      dgus_screen_handler.filelist.upDir();
+    }
+
+    dgus_screen_handler.filelist_offset = 0;
+    dgus_screen_handler.filelist_selected = -1;
+
+    return true;
+  }
+#endif
+
+bool DGUSSetupHandler::PrintStatus() {
+  if (printingIsActive() || printingIsPaused()) {
+    return true;
+  }
+
+  dgus_screen_handler.TriggerScreenChange(DGUS_Screen::PRINT_FINISHED);
+  return false;
+}
+
+bool DGUSSetupHandler::PrintAdjust() {
+  if (printingIsActive() || printingIsPaused()) {
+    return true;
+  }
+
+  dgus_screen_handler.TriggerScreenChange(DGUS_Screen::PRINT_FINISHED);
+  return false;
+}
+
+bool DGUSSetupHandler::LevelingMenu() {
+  ExtUI::setLevelingActive(dgus_screen_handler.leveling_active);
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return false;
+  }
+
+  if (ExtUI::isPositionKnown()) {
+    if (ExtUI::getAxisPosition_mm(ExtUI::Z) < 10.0f) {
+      queue.enqueue_now_P(PSTR("G0Z10"));
+    }
+
+    return true;
+  }
+
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
+  dgus_screen_handler.SetMessageLinePGM(DGUS_MSG_HOMING, 2);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
+  dgus_screen_handler.ShowWaitScreen(DGUS_Screen::LEVELING_MENU);
+
+  queue.enqueue_now_P(DGUS_CMD_HOME);
+
+  return false;
+}
+
+bool DGUSSetupHandler::LevelingManual() {
+  ExtUI::setLevelingActive(false);
+
+  if (ExtUI::isPositionKnown()) {
+    return true;
+  }
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return false;
+  }
+
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
+  dgus_screen_handler.SetMessageLinePGM(DGUS_MSG_HOMING, 2);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
+  dgus_screen_handler.ShowWaitScreen(DGUS_Screen::LEVELING_MANUAL);
+
+  queue.enqueue_now_P(DGUS_CMD_HOME);
+
+  return false;
+}
+
+bool DGUSSetupHandler::LevelingOffset() {
+  dgus_screen_handler.offset_steps = DGUS_Data::StepSize::MMP1;
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return false;
+  }
+
+  if (ExtUI::isPositionKnown()) {
+    if (ExtUI::getAxisPosition_mm(ExtUI::Z) < 4.0f) {
+      queue.enqueue_now_P(PSTR("G0Z4"));
+    }
+
+    char buffer[20];
+    snprintf_P(buffer, sizeof(buffer), PSTR("G0X%dY%d"), DGUS_LEVEL_CENTER_X, DGUS_LEVEL_CENTER_Y);
+
+    queue.enqueue_one_now(buffer);
+    queue.enqueue_now_P(PSTR("G0Z0"));
+
+    return true;
+  }
+
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
+  dgus_screen_handler.SetMessageLinePGM(DGUS_MSG_HOMING, 2);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
+  dgus_screen_handler.ShowWaitScreen(DGUS_Screen::LEVELING_OFFSET);
+
+  queue.enqueue_now_P(DGUS_CMD_HOME);
+
+  return false;
+}
+
+bool DGUSSetupHandler::LevelingAutomatic() {
+  if (ExtUI::getMeshValid()) {
+    dgus_screen_handler.leveling_active = true;
+
+    ExtUI::setLevelingActive(true);
+  }
+
+  return true;
+}
+
+bool DGUSSetupHandler::LevelingProbing() {
+  dgus_screen_handler.probing_icons[0] = 0;
+  dgus_screen_handler.probing_icons[1] = 0;
+
+  return true;
+}
+
+bool DGUSSetupHandler::Filament() {
+  dgus_screen_handler.filament_extruder = DGUS_Data::Extruder::CURRENT;
+  dgus_screen_handler.filament_length = DGUS_DEFAULT_FILAMENT_LEN;
+
+  return true;
+}
+
+bool DGUSSetupHandler::Move() {
+  dgus_screen_handler.move_steps = DGUS_Data::StepSize::MM10;
+
+  if (!dgus_screen_handler.IsPrinterIdle()) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_BUSY);
+    return false;
+  }
+
+  return true;
+}
+
+bool DGUSSetupHandler::Gcode() {
+  ZERO(dgus_screen_handler.gcode);
+
+  if (dgus_display.gui_version < 0x30 || dgus_display.os_version < 0x21) {
+    dgus_screen_handler.SetStatusMessagePGM(DGUS_MSG_FW_OUTDATED);
+    return false;
+  }
+
+  return true;
+}
+
+bool DGUSSetupHandler::PID() {
+  dgus_screen_handler.pid_heater = DGUS_Data::Heater::H0;
+  dgus_screen_handler.pid_temp = DGUS_PLA_TEMP_HOTEND;
+
+  return true;
+}
+
+bool DGUSSetupHandler::Infos() {
+  dgus_screen_handler.debug_count = 0;
+
+  return true;
+}
+
+#endif // DGUS_LCD_UI_RELOADED
