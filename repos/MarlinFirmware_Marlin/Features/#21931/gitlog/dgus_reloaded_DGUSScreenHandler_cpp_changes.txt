commit 78d3cf1de1a3fecb028ea9d6b2ee782e33341142
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue May 21 15:47:45 2024 -0500

    üé® PGM => _P rename

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 181d1ae34c..bb31a1d71a 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -149,7 +149,7 @@ void DGUSScreenHandler::loop() {
 void DGUSScreenHandler::printerKilled(FSTR_P const error, FSTR_P const component) {
   setMessageLine(error, 1);
   setMessageLine(component, 2);
-  setMessageLinePGM(NUL_STR, 3);
+  setMessageLine_P(NUL_STR, 3);
   setMessageLine(GET_TEXT_F(MSG_PLEASE_RESET), 4);
 
   dgus.playSound(3, 1, 200);
@@ -158,10 +158,10 @@ void DGUSScreenHandler::printerKilled(FSTR_P const error, FSTR_P const component
 }
 
 void DGUSScreenHandler::userConfirmRequired(const char * const msg) {
-  setMessageLinePGM(NUL_STR, 1);
+  setMessageLine_P(NUL_STR, 1);
   setMessageLine(msg, 2);
-  setMessageLinePGM(NUL_STR, 3);
-  setMessageLinePGM(NUL_STR, 4);
+  setMessageLine_P(NUL_STR, 3);
+  setMessageLine_P(NUL_STR, 4);
 
   dgus.playSound(3);
 
@@ -351,7 +351,7 @@ void DGUSScreenHandler::setMessageLine(const char * const msg, const uint8_t lin
   }
 }
 
-void DGUSScreenHandler::setMessageLinePGM(PGM_P const msg, const uint8_t line) {
+void DGUSScreenHandler::setMessageLine_P(PGM_P const msg, const uint8_t line) {
   switch (line) {
     default: return;
     case 1:
@@ -389,10 +389,10 @@ void DGUSScreenHandler::showWaitScreen(const DGUS_ScreenID return_screenID, cons
 }
 
 void DGUSScreenHandler::showWaitScreen(FSTR_P const msg, const DGUS_ScreenID return_screenID, const bool has_continue/*=false*/) {
-  setMessageLinePGM(NUL_STR, 1);
+  setMessageLine_P(NUL_STR, 1);
   setMessageLine(msg, 2);
-  setMessageLinePGM(NUL_STR, 3);
-  setMessageLinePGM(NUL_STR, 4);
+  setMessageLine_P(NUL_STR, 3);
+  setMessageLine_P(NUL_STR, 4);
   showWaitScreen(return_screenID, has_continue);
 }
 

commit 87e94f456348e944ba4487aed436c762dd718966
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon Apr 1 16:05:11 2024 -0400

    üö∏ Update ProUI Plot graph - part 2 (#26563)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index aaef68632a..181d1ae34c 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -305,10 +305,11 @@ void DGUSScreenHandler::filamentRunout(const ExtUI::extruder_t extruder) {
 
 #if HAS_PID_HEATING
 
-  void DGUSScreenHandler::pidTuning(const ExtUI::result_t rst) {
+  void DGUSScreenHandler::pidTuning(const ExtUI::pidresult_t rst) {
     switch (rst) {
       case ExtUI::PID_STARTED:
       case ExtUI::PID_BED_STARTED:
+      case ExtUI::PID_CHAMBER_STARTED:
         setStatusMessage(GET_TEXT_F(MSG_PID_AUTOTUNE));
         break;
       case ExtUI::PID_BAD_HEATER_ID:

commit 466282f322ae4f42a8f3db5e3c9765c38445fdc8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Mar 31 18:20:37 2024 -0500

    ü©π Misc. changes from ProUI / ExtUI updates (#26928)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 87a0f6ce12..aaef68632a 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -308,6 +308,7 @@ void DGUSScreenHandler::filamentRunout(const ExtUI::extruder_t extruder) {
   void DGUSScreenHandler::pidTuning(const ExtUI::result_t rst) {
     switch (rst) {
       case ExtUI::PID_STARTED:
+      case ExtUI::PID_BED_STARTED:
         setStatusMessage(GET_TEXT_F(MSG_PID_AUTOTUNE));
         break;
       case ExtUI::PID_BAD_HEATER_ID:

commit 22fc07d72ba08df8db9545da4286ccd2558ecf30
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 15:03:02 2023 -0500

    üßë‚Äçüíª ExtUI::onPlayTone optional duration

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 703c56d1e1..87a0f6ce12 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -224,7 +224,7 @@ void DGUSScreenHandler::configurationStoreRead(bool success) {
   }
 }
 
-void DGUSScreenHandler::playTone(const uint16_t frequency, const uint16_t duration) {
+void DGUSScreenHandler::playTone(const uint16_t frequency, const uint16_t duration/*=0*/) {
   if (WITHIN(frequency, 1, 255)) {
     if (WITHIN(duration, 1, 255))
       dgus.playSound((uint8_t)frequency, (uint8_t)duration);

commit cb291e8d00a6c1ee0a778625e0170b6b7430a004
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 9 22:41:00 2024 -0600

    ü©π Fix some temp constraints

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 76aa3de872..703c56d1e1 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -51,7 +51,7 @@ uint16_t DGUSScreenHandler::filament_length = DGUS_DEFAULT_FILAMENT_LEN;
 char DGUSScreenHandler::gcode[] = "";
 
 DGUS_Data::Heater DGUSScreenHandler::pid_heater = DGUS_Data::Heater::H0;
-uint16_t DGUSScreenHandler::pid_temp = DGUS_PLA_TEMP_HOTEND;
+celsius_t DGUSScreenHandler::pid_temp = DGUS_PLA_TEMP_HOTEND;
 uint8_t DGUSScreenHandler::pid_cycles = 5;
 
 bool DGUSScreenHandler::settings_ready = false;

commit b77e2a5020714ad17fc12052093231ad4520ce14
Author: Christophe Huriaux <c.huriaux@gmail.com>
Date:   Sat Jul 1 06:06:08 2023 +0200

    ‚ú® Ender 3 S1 Pro/Plus stock touchscreen (#25905)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 793a2c1579..76aa3de872 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -80,9 +80,8 @@ void DGUSScreenHandler::ready() {
 }
 
 void DGUSScreenHandler::loop() {
-  if (!settings_ready || current_screenID == DGUS_ScreenID::KILL) {
+  if (!settings_ready || current_screenID == DGUS_ScreenID::KILL)
     return;
-  }
 
   const millis_t ms = ExtUI::safe_millis();
   static millis_t next_event_ms = 0;
@@ -226,10 +225,8 @@ void DGUSScreenHandler::configurationStoreRead(bool success) {
 }
 
 void DGUSScreenHandler::playTone(const uint16_t frequency, const uint16_t duration) {
-  UNUSED(duration);
-
-  if (frequency >= 1 && frequency <= 255) {
-    if (duration >= 1 && duration <= 255)
+  if (WITHIN(frequency, 1, 255)) {
+    if (WITHIN(duration, 1, 255))
       dgus.playSound((uint8_t)frequency, (uint8_t)duration);
     else
       dgus.playSound((uint8_t)frequency);
@@ -301,12 +298,10 @@ void DGUSScreenHandler::filamentRunout(const ExtUI::extruder_t extruder) {
 #endif // HAS_MEDIA
 
 #if ENABLED(POWER_LOSS_RECOVERY)
-
   void DGUSScreenHandler::powerLossResume() {
     moveToScreen(DGUS_ScreenID::POWERLOSS, true);
   }
-
-#endif // POWER_LOSS_RECOVERY
+#endif
 
 #if HAS_PID_HEATING
 
@@ -374,20 +369,18 @@ void DGUSScreenHandler::setMessageLinePGM(PGM_P const msg, const uint8_t line) {
 
 void DGUSScreenHandler::setStatusMessage(const char* msg, const millis_t duration) {
   dgus.writeString((uint16_t)DGUS_Addr::MESSAGE_Status, msg, DGUS_STATUS_LEN, false, true);
-
   status_expire = (duration > 0 ? ExtUI::safe_millis() + duration : 0);
 }
 
 void DGUSScreenHandler::setStatusMessage(FSTR_P const fmsg, const millis_t duration) {
   dgus.writeString((uint16_t)DGUS_Addr::MESSAGE_Status, fmsg, DGUS_STATUS_LEN, false, true);
-
   status_expire = (duration > 0 ? ExtUI::safe_millis() + duration : 0);
 }
 
 void DGUSScreenHandler::showWaitScreen(const DGUS_ScreenID return_screenID, const bool has_continue/*=false*/) {
-  if (return_screenID != DGUS_ScreenID::WAIT) {
+  if (return_screenID != DGUS_ScreenID::WAIT)
     wait_return_screenID = return_screenID;
-  }
+
   wait_continue = has_continue;
 
   triggerScreenChange(DGUS_ScreenID::WAIT);
@@ -418,8 +411,7 @@ void DGUSScreenHandler::triggerEEPROMSave() {
 }
 
 bool DGUSScreenHandler::isPrinterIdle() {
-  return (!ExtUI::commandsInQueue()
-          && !ExtUI::isMoving());
+  return (!ExtUI::commandsInQueue() && !ExtUI::isMoving());
 }
 
 const DGUS_Addr* DGUSScreenHandler::findScreenAddrList(const DGUS_ScreenID screenID) {
@@ -429,9 +421,7 @@ const DGUS_Addr* DGUSScreenHandler::findScreenAddrList(const DGUS_ScreenID scree
   do {
     memcpy_P(&list, map, sizeof(*map));
     if (!list.addr_list) break;
-    if (list.screenID == screenID) {
-      return list.addr_list;
-    }
+    if (list.screenID == screenID) return list.addr_list;
   } while (++map);
 
   return nullptr;
@@ -453,20 +443,16 @@ bool DGUSScreenHandler::callScreenSetup(const DGUS_ScreenID screenID) {
 }
 
 void DGUSScreenHandler::moveToScreen(const DGUS_ScreenID screenID, bool abort_wait) {
-  if (current_screenID == DGUS_ScreenID::KILL) {
-    return;
-  }
+  if (current_screenID == DGUS_ScreenID::KILL) return;
 
   if (current_screenID == DGUS_ScreenID::WAIT) {
-    if (screenID != DGUS_ScreenID::WAIT) {
+    if (screenID != DGUS_ScreenID::WAIT)
       wait_return_screenID = screenID;
-    }
 
     if (!abort_wait) return;
 
-    if (wait_continue && wait_for_user) {
+    if (wait_continue && wait_for_user)
       ExtUI::setUserConfirmed();
-    }
   }
 
   if (!callScreenSetup(screenID)) return;

commit bc385122e94d7eda79bdf1573a7c2071c4589da2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 13:34:13 2023 -0500

    üé® Lowercase method / data member names (#25914)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index c0f8576045..793a2c1579 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -57,11 +57,11 @@ uint8_t DGUSScreenHandler::pid_cycles = 5;
 bool DGUSScreenHandler::settings_ready = false;
 bool DGUSScreenHandler::booted = false;
 
-DGUS_Screen DGUSScreenHandler::current_screen = DGUS_Screen::BOOT;
-DGUS_Screen DGUSScreenHandler::new_screen = DGUS_Screen::BOOT;
+DGUS_ScreenID DGUSScreenHandler::current_screenID = DGUS_ScreenID::BOOT;
+DGUS_ScreenID DGUSScreenHandler::new_screenID = DGUS_ScreenID::BOOT;
 bool DGUSScreenHandler::full_update = false;
 
-DGUS_Screen DGUSScreenHandler::wait_return_screen = DGUS_Screen::HOME;
+DGUS_ScreenID DGUSScreenHandler::wait_return_screenID = DGUS_ScreenID::HOME;
 bool DGUSScreenHandler::wait_continue = false;
 
 bool DGUSScreenHandler::leveling_active = false;
@@ -69,41 +69,41 @@ bool DGUSScreenHandler::leveling_active = false;
 millis_t DGUSScreenHandler::status_expire = 0;
 millis_t DGUSScreenHandler::eeprom_save = 0;
 
-void DGUSScreenHandler::Init() {
-  dgus_display.Init();
+void DGUSScreenHandler::init() {
+  dgus.init();
 
-  MoveToScreen(DGUS_Screen::BOOT, true);
+  moveToScreen(DGUS_ScreenID::BOOT, true);
 }
 
-void DGUSScreenHandler::Ready() {
-  dgus_display.PlaySound(1);
+void DGUSScreenHandler::ready() {
+  dgus.playSound(1);
 }
 
-void DGUSScreenHandler::Loop() {
-  if (!settings_ready || current_screen == DGUS_Screen::KILL) {
+void DGUSScreenHandler::loop() {
+  if (!settings_ready || current_screenID == DGUS_ScreenID::KILL) {
     return;
   }
 
   const millis_t ms = ExtUI::safe_millis();
   static millis_t next_event_ms = 0;
 
-  if (new_screen != DGUS_Screen::BOOT) {
-    const DGUS_Screen screen = new_screen;
-    new_screen = DGUS_Screen::BOOT;
-    if (current_screen == screen)
-      TriggerFullUpdate();
+  if (new_screenID != DGUS_ScreenID::BOOT) {
+    const DGUS_ScreenID screenID = new_screenID;
+    new_screenID = DGUS_ScreenID::BOOT;
+    if (current_screenID == screenID)
+      triggerFullUpdate();
     else
-      MoveToScreen(screen);
+      moveToScreen(screenID);
     return;
   }
 
   if (!booted && ELAPSED(ms, 3000)) {
     booted = true;
 
-    dgus_display.ReadVersions();
+    dgus.readVersions();
 
-    if (current_screen == DGUS_Screen::BOOT)
-      MoveToScreen(DGUS_Screen::HOME);
+    if (current_screenID == DGUS_ScreenID::BOOT)
+      moveToScreen(DGUS_ScreenID::HOME);
 
     return;
   }
@@ -111,98 +111,98 @@ void DGUSScreenHandler::Loop() {
   if (ELAPSED(ms, next_event_ms) || full_update) {
     next_event_ms = ms + DGUS_UPDATE_INTERVAL_MS;
 
-    if (!SendScreenVPData(current_screen, full_update))
-      DEBUG_ECHOLNPGM("SendScreenVPData failed");
+    if (!sendScreenVPData(current_screenID, full_update))
+      DEBUG_ECHOLNPGM("sendScreenVPData failed");
 
     return;
   }
 
-  if (current_screen == DGUS_Screen::WAIT
-      && ((wait_continue && !wait_for_user) || (!wait_continue && IsPrinterIdle()))
+  if (current_screenID == DGUS_ScreenID::WAIT
+      && ((wait_continue && !wait_for_user) || (!wait_continue && isPrinterIdle()))
   ) {
-    MoveToScreen(wait_return_screen, true);
+    moveToScreen(wait_return_screenID, true);
     return;
   }
 
-  if (current_screen == DGUS_Screen::LEVELING_PROBING && IsPrinterIdle()) {
-    dgus_display.PlaySound(3);
+  if (current_screenID == DGUS_ScreenID::LEVELING_PROBING && isPrinterIdle()) {
+    dgus.playSound(3);
 
-    SetStatusMessage(ExtUI::getLevelingIsValid() ? GET_TEXT_F(DGUS_MSG_PROBING_SUCCESS) : GET_TEXT_F(DGUS_MSG_PROBING_FAILED));
+    setStatusMessage(ExtUI::getLevelingIsValid() ? GET_TEXT_F(DGUS_MSG_PROBING_SUCCESS) : GET_TEXT_F(DGUS_MSG_PROBING_FAILED));
 
-    MoveToScreen(DGUS_Screen::LEVELING_AUTOMATIC);
+    moveToScreen(DGUS_ScreenID::LEVELING_AUTOMATIC);
     return;
   }
 
   if (status_expire > 0 && ELAPSED(ms, status_expire)) {
-    SetStatusMessage(FPSTR(NUL_STR), 0);
+    setStatusMessage(FPSTR(NUL_STR), 0);
     return;
   }
 
-  if (eeprom_save > 0 && ELAPSED(ms, eeprom_save) && IsPrinterIdle()) {
+  if (eeprom_save > 0 && ELAPSED(ms, eeprom_save) && isPrinterIdle()) {
     eeprom_save = 0;
     queue.enqueue_now(F("M500"));
     return;
   }
 
-  dgus_display.Loop();
+  dgus.loop();
 }
 
 void DGUSScreenHandler::printerKilled(FSTR_P const error, FSTR_P const component) {
-  SetMessageLine(error, 1);
-  SetMessageLine(component, 2);
-  SetMessageLinePGM(NUL_STR, 3);
-  SetMessageLine(GET_TEXT_F(MSG_PLEASE_RESET), 4);
+  setMessageLine(error, 1);
+  setMessageLine(component, 2);
+  setMessageLinePGM(NUL_STR, 3);
+  setMessageLine(GET_TEXT_F(MSG_PLEASE_RESET), 4);
 
-  dgus_display.PlaySound(3, 1, 200);
+  dgus.playSound(3, 1, 200);
 
-  MoveToScreen(DGUS_Screen::KILL, true);
+  moveToScreen(DGUS_ScreenID::KILL, true);
 }
 
-void DGUSScreenHandler::UserConfirmRequired(const char * const msg) {
-  SetMessageLinePGM(NUL_STR, 1);
-  SetMessageLine(msg, 2);
-  SetMessageLinePGM(NUL_STR, 3);
-  SetMessageLinePGM(NUL_STR, 4);
+void DGUSScreenHandler::userConfirmRequired(const char * const msg) {
+  setMessageLinePGM(NUL_STR, 1);
+  setMessageLine(msg, 2);
+  setMessageLinePGM(NUL_STR, 3);
+  setMessageLinePGM(NUL_STR, 4);
 
-  dgus_display.PlaySound(3);
+  dgus.playSound(3);
 
-  ShowWaitScreen(current_screen, true);
+  showWaitScreen(current_screenID, true);
 }
 
-void DGUSScreenHandler::SettingsReset() {
-  dgus_display.SetVolume(DGUS_DEFAULT_VOLUME);
-  dgus_display.SetBrightness(DGUS_DEFAULT_BRIGHTNESS);
+void DGUSScreenHandler::settingsReset() {
+  dgus.setVolume(DGUS_DEFAULT_VOLUME);
+  dgus.setBrightness(DGUS_DEFAULT_BRIGHTNESS);
 
   if (!settings_ready) {
     settings_ready = true;
-    Ready();
+    ready();
   }
 
-  SetStatusMessage(GET_TEXT_F(DGUS_MSG_RESET_EEPROM));
+  setStatusMessage(GET_TEXT_F(DGUS_MSG_RESET_EEPROM));
 }
 
-void DGUSScreenHandler::StoreSettings(char *buff) {
+void DGUSScreenHandler::storeSettings(char *buff) {
   eeprom_data_t data;
 
   static_assert(sizeof(data) <= ExtUI::eeprom_data_size, "sizeof(eeprom_data_t) > eeprom_data_size.");
 
   data.initialized = true;
-  data.volume = dgus_display.GetVolume();
-  data.brightness = dgus_display.GetBrightness();
+  data.volume = dgus.getVolume();
+  data.brightness = dgus.getBrightness();
   data.abl_okay = (ExtUI::getLevelingActive() && ExtUI::getLevelingIsValid());
 
   memcpy(buff, &data, sizeof(data));
 }
 
-void DGUSScreenHandler::LoadSettings(const char *buff) {
+void DGUSScreenHandler::loadSettings(const char *buff) {
   eeprom_data_t data;
 
   static_assert(sizeof(data) <= ExtUI::eeprom_data_size, "sizeof(eeprom_data_t) > eeprom_data_size.");
 
   memcpy(&data, buff, sizeof(data));
 
-  dgus_display.SetVolume(data.initialized ? data.volume : DGUS_DEFAULT_VOLUME);
-  dgus_display.SetBrightness(data.initialized ? data.brightness : DGUS_DEFAULT_BRIGHTNESS);
+  dgus.setVolume(data.initialized ? data.volume : DGUS_DEFAULT_VOLUME);
+  dgus.setBrightness(data.initialized ? data.brightness : DGUS_DEFAULT_BRIGHTNESS);
 
   if (data.initialized) {
     leveling_active = (data.abl_okay && ExtUI::getLevelingIsValid());
@@ -210,36 +210,36 @@ void DGUSScreenHandler::LoadSettings(const char *buff) {
   }
 }
 
-void DGUSScreenHandler::ConfigurationStoreWritten(bool success) {
+void DGUSScreenHandler::configurationStoreWritten(bool success) {
   if (!success)
-    SetStatusMessage(GET_TEXT_F(DGUS_MSG_WRITE_EEPROM_FAILED));
+    setStatusMessage(GET_TEXT_F(DGUS_MSG_WRITE_EEPROM_FAILED));
 }
 
-void DGUSScreenHandler::ConfigurationStoreRead(bool success) {
+void DGUSScreenHandler::configurationStoreRead(bool success) {
   if (!success) {
-    SetStatusMessage(GET_TEXT_F(DGUS_MSG_READ_EEPROM_FAILED));
+    setStatusMessage(GET_TEXT_F(DGUS_MSG_READ_EEPROM_FAILED));
   }
   else if (!settings_ready) {
     settings_ready = true;
-    Ready();
+    ready();
   }
 }
 
-void DGUSScreenHandler::PlayTone(const uint16_t frequency, const uint16_t duration) {
+void DGUSScreenHandler::playTone(const uint16_t frequency, const uint16_t duration) {
   UNUSED(duration);
 
   if (frequency >= 1 && frequency <= 255) {
     if (duration >= 1 && duration <= 255)
-      dgus_display.PlaySound((uint8_t)frequency, (uint8_t)duration);
+      dgus.playSound((uint8_t)frequency, (uint8_t)duration);
     else
-      dgus_display.PlaySound((uint8_t)frequency);
+      dgus.playSound((uint8_t)frequency);
   }
 }
 
-void DGUSScreenHandler::MeshUpdate(const int8_t xpos, const int8_t ypos) {
-  if (current_screen != DGUS_Screen::LEVELING_PROBING) {
-    if (current_screen == DGUS_Screen::LEVELING_AUTOMATIC)
-      TriggerFullUpdate();
+void DGUSScreenHandler::meshUpdate(const int8_t xpos, const int8_t ypos) {
+  if (current_screenID != DGUS_ScreenID::LEVELING_PROBING) {
+    if (current_screenID == DGUS_ScreenID::LEVELING_AUTOMATIC)
+      triggerFullUpdate();
     return;
   }
 
@@ -249,25 +249,25 @@ void DGUSScreenHandler::MeshUpdate(const int8_t xpos, const int8_t ypos) {
   if (xpos >= GRID_MAX_POINTS_X - 1 && ypos >= GRID_MAX_POINTS_Y - 1 && !ExtUI::getLevelingIsValid())
     probing_icons[0] = probing_icons[1] = 0;
 
-  TriggerFullUpdate();
+  triggerFullUpdate();
 }
 
-void DGUSScreenHandler::PrintTimerStarted() {
-  TriggerScreenChange(DGUS_Screen::PRINT_STATUS);
+void DGUSScreenHandler::printTimerStarted() {
+  triggerScreenChange(DGUS_ScreenID::PRINT_STATUS);
 }
 
-void DGUSScreenHandler::PrintTimerPaused() {
-  dgus_display.PlaySound(3);
-  TriggerFullUpdate();
+void DGUSScreenHandler::printTimerPaused() {
+  dgus.playSound(3);
+  triggerFullUpdate();
 }
 
-void DGUSScreenHandler::PrintTimerStopped() {
-  if (current_screen != DGUS_Screen::PRINT_STATUS && current_screen != DGUS_Screen::PRINT_ADJUST)
+void DGUSScreenHandler::printTimerStopped() {
+  if (current_screenID != DGUS_ScreenID::PRINT_STATUS && current_screenID != DGUS_ScreenID::PRINT_ADJUST)
     return;
 
-  dgus_display.PlaySound(3);
+  dgus.playSound(3);
 
-  TriggerScreenChange(DGUS_Screen::PRINT_FINISHED);
+  triggerScreenChange(DGUS_ScreenID::PRINT_FINISHED);
 }
 
 void DGUSScreenHandler::filamentRunout(const ExtUI::extruder_t extruder) {
@@ -275,161 +275,161 @@ void DGUSScreenHandler::filamentRunout(const ExtUI::extruder_t extruder) {
 
   snprintf_P(buffer, sizeof(buffer), GET_TEXT(DGUS_MSG_FILAMENT_RUNOUT), extruder);
 
-  SetStatusMessage(buffer);
+  setStatusMessage(buffer);
 
-  dgus_display.PlaySound(3);
+  dgus.playSound(3);
 }
 
 #if HAS_MEDIA
 
-  void DGUSScreenHandler::SDCardInserted() {
-    if (current_screen == DGUS_Screen::HOME)
-      TriggerScreenChange(DGUS_Screen::PRINT);
+  void DGUSScreenHandler::sdCardInserted() {
+    if (current_screenID == DGUS_ScreenID::HOME)
+      triggerScreenChange(DGUS_ScreenID::PRINT);
   }
 
-  void DGUSScreenHandler::SDCardRemoved() {
-    if (current_screen == DGUS_Screen::PRINT)
-      TriggerScreenChange(DGUS_Screen::HOME);
+  void DGUSScreenHandler::sdCardRemoved() {
+    if (current_screenID == DGUS_ScreenID::PRINT)
+      triggerScreenChange(DGUS_ScreenID::HOME);
   }
 
-  void DGUSScreenHandler::SDCardError() {
-    SetStatusMessage(GET_TEXT_F(MSG_MEDIA_READ_ERROR));
-    if (current_screen == DGUS_Screen::PRINT)
-      TriggerScreenChange(DGUS_Screen::HOME);
+  void DGUSScreenHandler::sdCardError() {
+    setStatusMessage(GET_TEXT_F(MSG_MEDIA_READ_ERROR));
+    if (current_screenID == DGUS_ScreenID::PRINT)
+      triggerScreenChange(DGUS_ScreenID::HOME);
   }
 
 #endif // HAS_MEDIA
 
 #if ENABLED(POWER_LOSS_RECOVERY)
 
-  void DGUSScreenHandler::PowerLossResume() {
-    MoveToScreen(DGUS_Screen::POWERLOSS, true);
+  void DGUSScreenHandler::powerLossResume() {
+    moveToScreen(DGUS_ScreenID::POWERLOSS, true);
   }
 
 #endif // POWER_LOSS_RECOVERY
 
 #if HAS_PID_HEATING
 
-  void DGUSScreenHandler::PidTuning(const ExtUI::result_t rst) {
+  void DGUSScreenHandler::pidTuning(const ExtUI::result_t rst) {
     switch (rst) {
       case ExtUI::PID_STARTED:
-        SetStatusMessage(GET_TEXT_F(MSG_PID_AUTOTUNE));
+        setStatusMessage(GET_TEXT_F(MSG_PID_AUTOTUNE));
         break;
       case ExtUI::PID_BAD_HEATER_ID:
-        SetStatusMessage(GET_TEXT_F(MSG_PID_BAD_HEATER_ID));
+        setStatusMessage(GET_TEXT_F(MSG_PID_BAD_HEATER_ID));
         break;
       case ExtUI::PID_TEMP_TOO_HIGH:
-        SetStatusMessage(GET_TEXT_F(MSG_PID_TEMP_TOO_HIGH));
+        setStatusMessage(GET_TEXT_F(MSG_PID_TEMP_TOO_HIGH));
         break;
       case ExtUI::PID_TUNING_TIMEOUT:
-        SetStatusMessage(GET_TEXT_F(MSG_PID_TIMEOUT));
+        setStatusMessage(GET_TEXT_F(MSG_PID_TIMEOUT));
         break;
       case ExtUI::PID_DONE:
-        SetStatusMessage(GET_TEXT_F(MSG_PID_AUTOTUNE_DONE));
+        setStatusMessage(GET_TEXT_F(MSG_PID_AUTOTUNE_DONE));
         break;
       default:
         return;
     }
 
-    dgus_display.PlaySound(3);
+    dgus.playSound(3);
   }
 
 #endif // HAS_PID_HEATING
 
-void DGUSScreenHandler::SetMessageLine(const char * const msg, const uint8_t line) {
+void DGUSScreenHandler::setMessageLine(const char * const msg, const uint8_t line) {
   switch (line) {
     default: return;
     case 1:
-      dgus_display.WriteString((uint16_t)DGUS_Addr::MESSAGE_Line1, msg, DGUS_LINE_LEN, true, true);
+      dgus.writeString((uint16_t)DGUS_Addr::MESSAGE_Line1, msg, DGUS_LINE_LEN, true, true);
       break;
     case 2:
-      dgus_display.WriteString((uint16_t)DGUS_Addr::MESSAGE_Line2, msg, DGUS_LINE_LEN, true, true);
+      dgus.writeString((uint16_t)DGUS_Addr::MESSAGE_Line2, msg, DGUS_LINE_LEN, true, true);
       break;
     case 3:
-      dgus_display.WriteString((uint16_t)DGUS_Addr::MESSAGE_Line3, msg, DGUS_LINE_LEN, true, true);
+      dgus.writeString((uint16_t)DGUS_Addr::MESSAGE_Line3, msg, DGUS_LINE_LEN, true, true);
       break;
     case 4:
-      dgus_display.WriteString((uint16_t)DGUS_Addr::MESSAGE_Line4, msg, DGUS_LINE_LEN, true, true);
+      dgus.writeString((uint16_t)DGUS_Addr::MESSAGE_Line4, msg, DGUS_LINE_LEN, true, true);
       break;
   }
 }
 
-void DGUSScreenHandler::SetMessageLinePGM(PGM_P const msg, const uint8_t line) {
+void DGUSScreenHandler::setMessageLinePGM(PGM_P const msg, const uint8_t line) {
   switch (line) {
     default: return;
     case 1:
-      dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Line1, msg, DGUS_LINE_LEN, true, true);
+      dgus.writeStringPGM((uint16_t)DGUS_Addr::MESSAGE_Line1, msg, DGUS_LINE_LEN, true, true);
       break;
     case 2:
-      dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Line2, msg, DGUS_LINE_LEN, true, true);
+      dgus.writeStringPGM((uint16_t)DGUS_Addr::MESSAGE_Line2, msg, DGUS_LINE_LEN, true, true);
       break;
     case 3:
-      dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Line3, msg, DGUS_LINE_LEN, true, true);
+      dgus.writeStringPGM((uint16_t)DGUS_Addr::MESSAGE_Line3, msg, DGUS_LINE_LEN, true, true);
       break;
     case 4:
-      dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Line4, msg, DGUS_LINE_LEN, true, true);
+      dgus.writeStringPGM((uint16_t)DGUS_Addr::MESSAGE_Line4, msg, DGUS_LINE_LEN, true, true);
       break;
   }
 }
 
-void DGUSScreenHandler::SetStatusMessage(const char* msg, const millis_t duration) {
-  dgus_display.WriteString((uint16_t)DGUS_Addr::MESSAGE_Status, msg, DGUS_STATUS_LEN, false, true);
+void DGUSScreenHandler::setStatusMessage(const char* msg, const millis_t duration) {
+  dgus.writeString((uint16_t)DGUS_Addr::MESSAGE_Status, msg, DGUS_STATUS_LEN, false, true);
 
   status_expire = (duration > 0 ? ExtUI::safe_millis() + duration : 0);
 }
 
-void DGUSScreenHandler::SetStatusMessage(FSTR_P const fmsg, const millis_t duration) {
-  dgus_display.WriteString((uint16_t)DGUS_Addr::MESSAGE_Status, fmsg, DGUS_STATUS_LEN, false, true);
+void DGUSScreenHandler::setStatusMessage(FSTR_P const fmsg, const millis_t duration) {
+  dgus.writeString((uint16_t)DGUS_Addr::MESSAGE_Status, fmsg, DGUS_STATUS_LEN, false, true);
 
   status_expire = (duration > 0 ? ExtUI::safe_millis() + duration : 0);
 }
 
-void DGUSScreenHandler::ShowWaitScreen(const DGUS_Screen return_screen, const bool has_continue/*=false*/) {
-  if (return_screen != DGUS_Screen::WAIT) {
-    wait_return_screen = return_screen;
+void DGUSScreenHandler::showWaitScreen(const DGUS_ScreenID return_screenID, const bool has_continue/*=false*/) {
+  if (return_screenID != DGUS_ScreenID::WAIT) {
+    wait_return_screenID = return_screenID;
   }
   wait_continue = has_continue;
 
-  TriggerScreenChange(DGUS_Screen::WAIT);
+  triggerScreenChange(DGUS_ScreenID::WAIT);
 }
 
-void DGUSScreenHandler::ShowWaitScreen(FSTR_P const msg, const DGUS_Screen return_screen, const bool has_continue/*=false*/) {
-  SetMessageLinePGM(NUL_STR, 1);
-  SetMessageLine(msg, 2);
-  SetMessageLinePGM(NUL_STR, 3);
-  SetMessageLinePGM(NUL_STR, 4);
-  ShowWaitScreen(return_screen, has_continue);
+void DGUSScreenHandler::showWaitScreen(FSTR_P const msg, const DGUS_ScreenID return_screenID, const bool has_continue/*=false*/) {
+  setMessageLinePGM(NUL_STR, 1);
+  setMessageLine(msg, 2);
+  setMessageLinePGM(NUL_STR, 3);
+  setMessageLinePGM(NUL_STR, 4);
+  showWaitScreen(return_screenID, has_continue);
 }
 
-DGUS_Screen DGUSScreenHandler::GetCurrentScreen() {
-  return current_screen;
+DGUS_ScreenID DGUSScreenHandler::getCurrentScreen() {
+  return current_screenID;
 }
 
-void DGUSScreenHandler::TriggerScreenChange(DGUS_Screen screen) {
-  new_screen = screen;
+void DGUSScreenHandler::triggerScreenChange(const DGUS_ScreenID screenID) {
+  new_screenID = screenID;
 }
 
-void DGUSScreenHandler::TriggerFullUpdate() {
+void DGUSScreenHandler::triggerFullUpdate() {
   full_update = true;
 }
 
-void DGUSScreenHandler::TriggerEEPROMSave() {
+void DGUSScreenHandler::triggerEEPROMSave() {
   eeprom_save = ExtUI::safe_millis() + 500;
 }
 
-bool DGUSScreenHandler::IsPrinterIdle() {
+bool DGUSScreenHandler::isPrinterIdle() {
   return (!ExtUI::commandsInQueue()
           && !ExtUI::isMoving());
 }
 
-const DGUS_Addr* DGUSScreenHandler::FindScreenAddrList(DGUS_Screen screen) {
+const DGUS_Addr* DGUSScreenHandler::findScreenAddrList(const DGUS_ScreenID screenID) {
   DGUS_ScreenAddrList list;
   const DGUS_ScreenAddrList *map = screen_addr_list_map;
 
   do {
     memcpy_P(&list, map, sizeof(*map));
     if (!list.addr_list) break;
-    if (list.screen == screen) {
+    if (list.screenID == screenID) {
       return list.addr_list;
     }
   } while (++map);
@@ -437,14 +437,14 @@ const DGUS_Addr* DGUSScreenHandler::FindScreenAddrList(DGUS_Screen screen) {
   return nullptr;
 }
 
-bool DGUSScreenHandler::CallScreenSetup(DGUS_Screen screen) {
+bool DGUSScreenHandler::callScreenSetup(const DGUS_ScreenID screenID) {
   DGUS_ScreenSetup setup;
   const DGUS_ScreenSetup *list = screen_setup_list;
 
   do {
     memcpy_P(&setup, list, sizeof(*list));
     if (!setup.setup_fn) break;
-    if (setup.screen == screen) {
+    if (setup.screenID == screenID) {
       return setup.setup_fn();
     }
   } while (++list);
@@ -452,14 +452,14 @@ bool DGUSScreenHandler::CallScreenSetup(DGUS_Screen screen) {
   return true;
 }
 
-void DGUSScreenHandler::MoveToScreen(DGUS_Screen screen, bool abort_wait) {
-  if (current_screen == DGUS_Screen::KILL) {
+void DGUSScreenHandler::moveToScreen(const DGUS_ScreenID screenID, bool abort_wait) {
+  if (current_screenID == DGUS_ScreenID::KILL) {
     return;
   }
 
-  if (current_screen == DGUS_Screen::WAIT) {
-    if (screen != DGUS_Screen::WAIT) {
-      wait_return_screen = screen;
+  if (current_screenID == DGUS_ScreenID::WAIT) {
+    if (screenID != DGUS_ScreenID::WAIT) {
+      wait_return_screenID = screenID;
     }
 
     if (!abort_wait) return;
@@ -469,18 +469,18 @@ void DGUSScreenHandler::MoveToScreen(DGUS_Screen screen, bool abort_wait) {
     }
   }
 
-  if (!CallScreenSetup(screen)) return;
+  if (!callScreenSetup(screenID)) return;
 
-  if (!SendScreenVPData(screen, true)) return;
+  if (!sendScreenVPData(screenID, true)) return;
 
-  current_screen = screen;
-  dgus_display.SwitchScreen(current_screen);
+  current_screenID = screenID;
+  dgus.switchScreen(current_screenID);
 }
 
-bool DGUSScreenHandler::SendScreenVPData(DGUS_Screen screen, bool complete_update) {
+bool DGUSScreenHandler::sendScreenVPData(const DGUS_ScreenID screenID, bool complete_update) {
   if (complete_update) full_update = false;
 
-  const DGUS_Addr *list = FindScreenAddrList(screen);
+  const DGUS_Addr *list = findScreenAddrList(screenID);
 
   while (true) {
     if (!list) return true; // Nothing left to send
@@ -489,17 +489,17 @@ bool DGUSScreenHandler::SendScreenVPData(DGUS_Screen screen, bool complete_updat
     if (!addr) return true; // Nothing left to send
 
     DGUS_VP vp;
-    if (!DGUS_PopulateVP((DGUS_Addr)addr, &vp)) continue; // Invalid VP
+    if (!populateVP((DGUS_Addr)addr, &vp)) continue; // Invalid VP
     if (!vp.tx_handler) continue; // Nothing to send
     if (!complete_update && !(vp.flags & VPFLAG_AUTOUPLOAD)) continue; // Unnecessary VP
 
     uint8_t expected_tx = 6 + vp.size; // 6 bytes header + payload.
     const millis_t try_until = ExtUI::safe_millis() + 1000;
 
-    while (expected_tx > dgus_display.GetFreeTxBuffer()) {
+    while (expected_tx > dgus.getFreeTxBuffer()) {
       if (ELAPSED(ExtUI::safe_millis(), try_until)) return false; // Stop trying after 1 second
 
-      dgus_display.FlushTx(); // Flush the TX buffer
+      dgus.flushTx(); // Flush the TX buffer
       delay(50);
     }
 

commit 9e0dcd4a2b6d0262ee2b09170aff0c1f21d9175e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jun 1 16:53:02 2023 -0500

    üßë‚Äçüíª ExtUI::onLevelingStart/Done for all leveling (#25913)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 6a430e74a6..c0f8576045 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -118,8 +118,7 @@ void DGUSScreenHandler::Loop() {
   }
 
   if (current_screen == DGUS_Screen::WAIT
-      && ((wait_continue && !wait_for_user)
-          || (!wait_continue && IsPrinterIdle()))
+      && ((wait_continue && !wait_for_user) || (!wait_continue && IsPrinterIdle()))
   ) {
     MoveToScreen(wait_return_screen, true);
     return;
@@ -128,7 +127,7 @@ void DGUSScreenHandler::Loop() {
   if (current_screen == DGUS_Screen::LEVELING_PROBING && IsPrinterIdle()) {
     dgus_display.PlaySound(3);
 
-    SetStatusMessage(ExtUI::getMeshValid() ? GET_TEXT_F(DGUS_MSG_PROBING_SUCCESS) : GET_TEXT_F(DGUS_MSG_PROBING_FAILED));
+    SetStatusMessage(ExtUI::getLevelingIsValid() ? GET_TEXT_F(DGUS_MSG_PROBING_SUCCESS) : GET_TEXT_F(DGUS_MSG_PROBING_FAILED));
 
     MoveToScreen(DGUS_Screen::LEVELING_AUTOMATIC);
     return;
@@ -190,7 +189,7 @@ void DGUSScreenHandler::StoreSettings(char *buff) {
   data.initialized = true;
   data.volume = dgus_display.GetVolume();
   data.brightness = dgus_display.GetBrightness();
-  data.abl_okay = (ExtUI::getLevelingActive() && ExtUI::getMeshValid());
+  data.abl_okay = (ExtUI::getLevelingActive() && ExtUI::getLevelingIsValid());
 
   memcpy(buff, &data, sizeof(data));
 }
@@ -206,7 +205,7 @@ void DGUSScreenHandler::LoadSettings(const char *buff) {
   dgus_display.SetBrightness(data.initialized ? data.brightness : DGUS_DEFAULT_BRIGHTNESS);
 
   if (data.initialized) {
-    leveling_active = (data.abl_okay && ExtUI::getMeshValid());
+    leveling_active = (data.abl_okay && ExtUI::getLevelingIsValid());
     ExtUI::setLevelingActive(leveling_active);
   }
 }
@@ -247,7 +246,7 @@ void DGUSScreenHandler::MeshUpdate(const int8_t xpos, const int8_t ypos) {
   uint8_t point = ypos * GRID_MAX_POINTS_X + xpos;
   probing_icons[point < 16 ? 0 : 1] |= (1U << (point % 16));
 
-  if (xpos >= GRID_MAX_POINTS_X - 1 && ypos >= GRID_MAX_POINTS_Y - 1 && !ExtUI::getMeshValid())
+  if (xpos >= GRID_MAX_POINTS_X - 1 && ypos >= GRID_MAX_POINTS_Y - 1 && !ExtUI::getLevelingIsValid())
     probing_icons[0] = probing_icons[1] = 0;
 
   TriggerFullUpdate();

commit 37d0f49a82cd2e4d91dce4e62671b266924eb2a7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed May 24 01:05:55 2023 -0500

    üßë‚Äçüíª Misc. ExtUI LCD cleanup (#25872)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index e8c23b3226..6a430e74a6 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -148,7 +148,7 @@ void DGUSScreenHandler::Loop() {
   dgus_display.Loop();
 }
 
-void DGUSScreenHandler::PrinterKilled(FSTR_P const error, FSTR_P const component) {
+void DGUSScreenHandler::printerKilled(FSTR_P const error, FSTR_P const component) {
   SetMessageLine(error, 1);
   SetMessageLine(component, 2);
   SetMessageLinePGM(NUL_STR, 3);
@@ -271,7 +271,7 @@ void DGUSScreenHandler::PrintTimerStopped() {
   TriggerScreenChange(DGUS_Screen::PRINT_FINISHED);
 }
 
-void DGUSScreenHandler::FilamentRunout(const ExtUI::extruder_t extruder) {
+void DGUSScreenHandler::filamentRunout(const ExtUI::extruder_t extruder) {
   char buffer[21];
 
   snprintf_P(buffer, sizeof(buffer), GET_TEXT(DGUS_MSG_FILAMENT_RUNOUT), extruder);

commit 5664c02d077e028f84a24efd96c2eebe97ce8763
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 22:43:09 2023 -0500

    üßë‚Äçüíª Generalize SDSUPPORT as HAS_MEDIA
    
    In preparation for single- and multi-volume refactoring.

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index e1d8778567..e8c23b3226 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -34,7 +34,7 @@
 
 uint8_t DGUSScreenHandler::debug_count = 0;
 
-#if ENABLED(SDSUPPORT)
+#if HAS_MEDIA
   ExtUI::FileList DGUSScreenHandler::filelist;
   uint16_t DGUSScreenHandler::filelist_offset = 0;
   int16_t DGUSScreenHandler::filelist_selected = -1;
@@ -281,7 +281,7 @@ void DGUSScreenHandler::FilamentRunout(const ExtUI::extruder_t extruder) {
   dgus_display.PlaySound(3);
 }
 
-#if ENABLED(SDSUPPORT)
+#if HAS_MEDIA
 
   void DGUSScreenHandler::SDCardInserted() {
     if (current_screen == DGUS_Screen::HOME)
@@ -299,7 +299,7 @@ void DGUSScreenHandler::FilamentRunout(const ExtUI::extruder_t extruder) {
       TriggerScreenChange(DGUS_Screen::HOME);
   }
 
-#endif // SDSUPPORT
+#endif // HAS_MEDIA
 
 #if ENABLED(POWER_LOSS_RECOVERY)
 

commit 4b9bb85b1266e8febbcb1931c8427d410a05bf84
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Mar 6 22:55:55 2023 -0600

    üîß Add DGUS_LCD_UI RELOADED conditions

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index cc98126c9b..e1d8778567 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -69,11 +69,6 @@ bool DGUSScreenHandler::leveling_active = false;
 millis_t DGUSScreenHandler::status_expire = 0;
 millis_t DGUSScreenHandler::eeprom_save = 0;
 
-const char DGUS_MSG_UNDEF[] PROGMEM = "-";
-
-const char DGUS_CMD_HOME[] PROGMEM = "G28",
-           DGUS_CMD_EEPROM_SAVE[] PROGMEM = "M500";
-
 void DGUSScreenHandler::Init() {
   dgus_display.Init();
 
@@ -146,7 +141,7 @@ void DGUSScreenHandler::Loop() {
 
   if (eeprom_save > 0 && ELAPSED(ms, eeprom_save) && IsPrinterIdle()) {
     eeprom_save = 0;
-    queue.enqueue_now_P(DGUS_CMD_EEPROM_SAVE);
+    queue.enqueue_now(F("M500"));
     return;
   }
 
@@ -385,7 +380,7 @@ void DGUSScreenHandler::SetStatusMessage(const char* msg, const millis_t duratio
 }
 
 void DGUSScreenHandler::SetStatusMessage(FSTR_P const fmsg, const millis_t duration) {
-  dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Status, FTOP(fmsg), DGUS_STATUS_LEN, false, true);
+  dgus_display.WriteString((uint16_t)DGUS_Addr::MESSAGE_Status, fmsg, DGUS_STATUS_LEN, false, true);
 
   status_expire = (duration > 0 ? ExtUI::safe_millis() + duration : 0);
 }

commit cc31537ae3ca3be37ffb171540e7445f30827930
Author: albatorsssx <albator_ssx@hotmail.com>
Date:   Tue Mar 7 03:04:47 2023 +0100

    üåê DGUS Reloaded non-accented French (#25443)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index a7295f90fe..cc98126c9b 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -69,12 +69,7 @@ bool DGUSScreenHandler::leveling_active = false;
 millis_t DGUSScreenHandler::status_expire = 0;
 millis_t DGUSScreenHandler::eeprom_save = 0;
 
-const char DGUS_MSG_HOMING_REQUIRED[] PROGMEM = "Homing required",
-           DGUS_MSG_BUSY[] PROGMEM = "Busy",
-           DGUS_MSG_UNDEF[] PROGMEM = "-",
-           DGUS_MSG_HOMING[] PROGMEM = "Homing...",
-           DGUS_MSG_FW_OUTDATED[] PROGMEM = "DWIN GUI/OS update required",
-           DGUS_MSG_ABL_REQUIRED[] PROGMEM = "Auto bed leveling required";
+const char DGUS_MSG_UNDEF[] PROGMEM = "-";
 
 const char DGUS_CMD_HOME[] PROGMEM = "G28",
            DGUS_CMD_EEPROM_SAVE[] PROGMEM = "M500";
@@ -138,7 +133,7 @@ void DGUSScreenHandler::Loop() {
   if (current_screen == DGUS_Screen::LEVELING_PROBING && IsPrinterIdle()) {
     dgus_display.PlaySound(3);
 
-    SetStatusMessage(ExtUI::getMeshValid() ? F("Probing successful") : F("Probing failed"));
+    SetStatusMessage(ExtUI::getMeshValid() ? GET_TEXT_F(DGUS_MSG_PROBING_SUCCESS) : GET_TEXT_F(DGUS_MSG_PROBING_FAILED));
 
     MoveToScreen(DGUS_Screen::LEVELING_AUTOMATIC);
     return;
@@ -159,10 +154,10 @@ void DGUSScreenHandler::Loop() {
 }
 
 void DGUSScreenHandler::PrinterKilled(FSTR_P const error, FSTR_P const component) {
-  SetMessageLinePGM(FTOP(error), 1);
-  SetMessageLinePGM(FTOP(component), 2);
+  SetMessageLine(error, 1);
+  SetMessageLine(component, 2);
   SetMessageLinePGM(NUL_STR, 3);
-  SetMessageLinePGM(GET_TEXT(MSG_PLEASE_RESET), 4);
+  SetMessageLine(GET_TEXT_F(MSG_PLEASE_RESET), 4);
 
   dgus_display.PlaySound(3, 1, 200);
 
@@ -170,14 +165,14 @@ void DGUSScreenHandler::PrinterKilled(FSTR_P const error, FSTR_P const component
 }
 
 void DGUSScreenHandler::UserConfirmRequired(const char * const msg) {
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
-  dgus_screen_handler.SetMessageLine(msg, 2);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
-  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
+  SetMessageLinePGM(NUL_STR, 1);
+  SetMessageLine(msg, 2);
+  SetMessageLinePGM(NUL_STR, 3);
+  SetMessageLinePGM(NUL_STR, 4);
 
   dgus_display.PlaySound(3);
 
-  dgus_screen_handler.ShowWaitScreen(current_screen, true);
+  ShowWaitScreen(current_screen, true);
 }
 
 void DGUSScreenHandler::SettingsReset() {
@@ -189,7 +184,7 @@ void DGUSScreenHandler::SettingsReset() {
     Ready();
   }
 
-  SetStatusMessage(F("EEPROM reset"));
+  SetStatusMessage(GET_TEXT_F(DGUS_MSG_RESET_EEPROM));
 }
 
 void DGUSScreenHandler::StoreSettings(char *buff) {
@@ -223,12 +218,12 @@ void DGUSScreenHandler::LoadSettings(const char *buff) {
 
 void DGUSScreenHandler::ConfigurationStoreWritten(bool success) {
   if (!success)
-    SetStatusMessage(F("EEPROM write failed"));
+    SetStatusMessage(GET_TEXT_F(DGUS_MSG_WRITE_EEPROM_FAILED));
 }
 
 void DGUSScreenHandler::ConfigurationStoreRead(bool success) {
   if (!success) {
-    SetStatusMessage(F("EEPROM read failed"));
+    SetStatusMessage(GET_TEXT_F(DGUS_MSG_READ_EEPROM_FAILED));
   }
   else if (!settings_ready) {
     settings_ready = true;
@@ -283,7 +278,8 @@ void DGUSScreenHandler::PrintTimerStopped() {
 
 void DGUSScreenHandler::FilamentRunout(const ExtUI::extruder_t extruder) {
   char buffer[21];
-  snprintf_P(buffer, sizeof(buffer), PSTR("Filament runout E%d"), extruder);
+
+  snprintf_P(buffer, sizeof(buffer), GET_TEXT(DGUS_MSG_FILAMENT_RUNOUT), extruder);
 
   SetStatusMessage(buffer);
 
@@ -346,7 +342,7 @@ void DGUSScreenHandler::FilamentRunout(const ExtUI::extruder_t extruder) {
 
 #endif // HAS_PID_HEATING
 
-void DGUSScreenHandler::SetMessageLine(const char* msg, uint8_t line) {
+void DGUSScreenHandler::SetMessageLine(const char * const msg, const uint8_t line) {
   switch (line) {
     default: return;
     case 1:
@@ -364,7 +360,7 @@ void DGUSScreenHandler::SetMessageLine(const char* msg, uint8_t line) {
   }
 }
 
-void DGUSScreenHandler::SetMessageLinePGM(PGM_P msg, uint8_t line) {
+void DGUSScreenHandler::SetMessageLinePGM(PGM_P const msg, const uint8_t line) {
   switch (line) {
     default: return;
     case 1:
@@ -394,7 +390,7 @@ void DGUSScreenHandler::SetStatusMessage(FSTR_P const fmsg, const millis_t durat
   status_expire = (duration > 0 ? ExtUI::safe_millis() + duration : 0);
 }
 
-void DGUSScreenHandler::ShowWaitScreen(DGUS_Screen return_screen, bool has_continue) {
+void DGUSScreenHandler::ShowWaitScreen(const DGUS_Screen return_screen, const bool has_continue/*=false*/) {
   if (return_screen != DGUS_Screen::WAIT) {
     wait_return_screen = return_screen;
   }
@@ -403,6 +399,14 @@ void DGUSScreenHandler::ShowWaitScreen(DGUS_Screen return_screen, bool has_conti
   TriggerScreenChange(DGUS_Screen::WAIT);
 }
 
+void DGUSScreenHandler::ShowWaitScreen(FSTR_P const msg, const DGUS_Screen return_screen, const bool has_continue/*=false*/) {
+  SetMessageLinePGM(NUL_STR, 1);
+  SetMessageLine(msg, 2);
+  SetMessageLinePGM(NUL_STR, 3);
+  SetMessageLinePGM(NUL_STR, 4);
+  ShowWaitScreen(return_screen, has_continue);
+}
+
 DGUS_Screen DGUSScreenHandler::GetCurrentScreen() {
   return current_screen;
 }

commit 96bc084f3d791bc93265f217181986863e8e5fc7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 18 02:15:16 2023 -0600

    üé® Misc. LCD cleanup (#25400)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 3d0896a67c..a7295f90fe 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -473,19 +473,14 @@ void DGUSScreenHandler::MoveToScreen(DGUS_Screen screen, bool abort_wait) {
 
   if (!CallScreenSetup(screen)) return;
 
-  if (!SendScreenVPData(screen, true)) {
-    DEBUG_ECHOLNPGM("SendScreenVPData failed");
-    return;
-  }
+  if (!SendScreenVPData(screen, true)) return;
 
   current_screen = screen;
   dgus_display.SwitchScreen(current_screen);
 }
 
 bool DGUSScreenHandler::SendScreenVPData(DGUS_Screen screen, bool complete_update) {
-  if (complete_update) {
-    full_update = false;
-  }
+  if (complete_update) full_update = false;
 
   const DGUS_Addr *list = FindScreenAddrList(screen);
 

commit 6fe387b6f0722033e6cca96fd5e8215ea7b162eb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 15 06:48:17 2023 -0600

    üßë‚Äçüíª Adjust PID / MPC / ProUI
    
    Changes to simplify #25232 WIP

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 4d758ae5ef..3d0896a67c 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -325,8 +325,8 @@ void DGUSScreenHandler::FilamentRunout(const ExtUI::extruder_t extruder) {
       case ExtUI::PID_STARTED:
         SetStatusMessage(GET_TEXT_F(MSG_PID_AUTOTUNE));
         break;
-      case ExtUI::PID_BAD_EXTRUDER_NUM:
-        SetStatusMessage(GET_TEXT_F(MSG_PID_BAD_EXTRUDER_NUM));
+      case ExtUI::PID_BAD_HEATER_ID:
+        SetStatusMessage(GET_TEXT_F(MSG_PID_BAD_HEATER_ID));
         break;
       case ExtUI::PID_TEMP_TOO_HIGH:
         SetStatusMessage(GET_TEXT_F(MSG_PID_TEMP_TOO_HIGH));

commit c3fe4abd446336c50bdb892f08fa24a08f1bdda5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 7 22:59:25 2023 -0600

    üî® DGUS_LCD_UI version check

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 0b584fac3b..4d758ae5ef 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -22,7 +22,7 @@
 
 #include "../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(DGUS_LCD_UI_RELOADED)
+#if DGUS_LCD_UI_RELOADED
 
 #include "DGUSScreenHandler.h"
 

commit 60b6df4542d78e8263f75a989c77c2f386a894fc
Author: tombrazier <68918209+tombrazier@users.noreply.github.com>
Date:   Fri Apr 29 18:54:57 2022 +0100

    üêõ Fix kinetic ABL mesh after refactor (#24107)
    
    Followup to #23868

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 6388e1683d..0b584fac3b 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -200,7 +200,7 @@ void DGUSScreenHandler::StoreSettings(char *buff) {
   data.initialized = true;
   data.volume = dgus_display.GetVolume();
   data.brightness = dgus_display.GetBrightness();
-  data.abl = (ExtUI::getLevelingActive() && ExtUI::getMeshValid());
+  data.abl_okay = (ExtUI::getLevelingActive() && ExtUI::getMeshValid());
 
   memcpy(buff, &data, sizeof(data));
 }
@@ -216,8 +216,7 @@ void DGUSScreenHandler::LoadSettings(const char *buff) {
   dgus_display.SetBrightness(data.initialized ? data.brightness : DGUS_DEFAULT_BRIGHTNESS);
 
   if (data.initialized) {
-    leveling_active = (data.abl && ExtUI::getMeshValid());
-
+    leveling_active = (data.abl_okay && ExtUI::getMeshValid());
     ExtUI::setLevelingActive(leveling_active);
   }
 }

commit 8badf2d71ff52e0952bb98df25bb8fcb25eda9da
Author: Lars <lars.moesman@gmail.com>
Date:   Tue Jan 25 10:30:45 2022 +0100

    üêõ Fix DGUS_Reloaded G-code execution (#23592)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 17e7a38445..6388e1683d 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -100,37 +100,37 @@ void DGUSScreenHandler::Loop() {
   if (new_screen != DGUS_Screen::BOOT) {
     const DGUS_Screen screen = new_screen;
     new_screen = DGUS_Screen::BOOT;
-
-    if (current_screen == screen) {
+    if (current_screen == screen)
       TriggerFullUpdate();
-    }
-    else {
+    else
       MoveToScreen(screen);
-    }
     return;
   }
 
   if (!booted && ELAPSED(ms, 3000)) {
     booted = true;
 
-    if (current_screen == DGUS_Screen::BOOT) {
+    dgus_display.ReadVersions();
+
+    if (current_screen == DGUS_Screen::BOOT)
       MoveToScreen(DGUS_Screen::HOME);
-    }
+
     return;
   }
 
   if (ELAPSED(ms, next_event_ms) || full_update) {
     next_event_ms = ms + DGUS_UPDATE_INTERVAL_MS;
 
-    if (!SendScreenVPData(current_screen, full_update)) {
+    if (!SendScreenVPData(current_screen, full_update))
       DEBUG_ECHOLNPGM("SendScreenVPData failed");
-    }
+
     return;
   }
 
   if (current_screen == DGUS_Screen::WAIT
       && ((wait_continue && !wait_for_user)
-          || (!wait_continue && IsPrinterIdle()))) {
+          || (!wait_continue && IsPrinterIdle()))
+  ) {
     MoveToScreen(wait_return_screen, true);
     return;
   }
@@ -151,7 +151,6 @@ void DGUSScreenHandler::Loop() {
 
   if (eeprom_save > 0 && ELAPSED(ms, eeprom_save) && IsPrinterIdle()) {
     eeprom_save = 0;
-
     queue.enqueue_now_P(DGUS_CMD_EEPROM_SAVE);
     return;
   }
@@ -187,7 +186,6 @@ void DGUSScreenHandler::SettingsReset() {
 
   if (!settings_ready) {
     settings_ready = true;
-
     Ready();
   }
 
@@ -225,9 +223,8 @@ void DGUSScreenHandler::LoadSettings(const char *buff) {
 }
 
 void DGUSScreenHandler::ConfigurationStoreWritten(bool success) {
-  if (!success) {
+  if (!success)
     SetStatusMessage(F("EEPROM write failed"));
-  }
 }
 
 void DGUSScreenHandler::ConfigurationStoreRead(bool success) {
@@ -236,7 +233,6 @@ void DGUSScreenHandler::ConfigurationStoreRead(bool success) {
   }
   else if (!settings_ready) {
     settings_ready = true;
-
     Ready();
   }
 }
@@ -245,33 +241,25 @@ void DGUSScreenHandler::PlayTone(const uint16_t frequency, const uint16_t durati
   UNUSED(duration);
 
   if (frequency >= 1 && frequency <= 255) {
-    if (duration >= 1 && duration <= 255) {
+    if (duration >= 1 && duration <= 255)
       dgus_display.PlaySound((uint8_t)frequency, (uint8_t)duration);
-    }
-    else {
+    else
       dgus_display.PlaySound((uint8_t)frequency);
-    }
   }
 }
 
 void DGUSScreenHandler::MeshUpdate(const int8_t xpos, const int8_t ypos) {
   if (current_screen != DGUS_Screen::LEVELING_PROBING) {
-    if (current_screen == DGUS_Screen::LEVELING_AUTOMATIC) {
+    if (current_screen == DGUS_Screen::LEVELING_AUTOMATIC)
       TriggerFullUpdate();
-    }
-
     return;
   }
 
   uint8_t point = ypos * GRID_MAX_POINTS_X + xpos;
   probing_icons[point < 16 ? 0 : 1] |= (1U << (point % 16));
 
-  if (xpos >= GRID_MAX_POINTS_X - 1
-      && ypos >= GRID_MAX_POINTS_Y - 1
-      && !ExtUI::getMeshValid()) {
-    probing_icons[0] = 0;
-    probing_icons[1] = 0;
-  }
+  if (xpos >= GRID_MAX_POINTS_X - 1 && ypos >= GRID_MAX_POINTS_Y - 1 && !ExtUI::getMeshValid())
+    probing_icons[0] = probing_icons[1] = 0;
 
   TriggerFullUpdate();
 }
@@ -282,15 +270,12 @@ void DGUSScreenHandler::PrintTimerStarted() {
 
 void DGUSScreenHandler::PrintTimerPaused() {
   dgus_display.PlaySound(3);
-
   TriggerFullUpdate();
 }
 
 void DGUSScreenHandler::PrintTimerStopped() {
-  if (current_screen != DGUS_Screen::PRINT_STATUS
-      && current_screen != DGUS_Screen::PRINT_ADJUST) {
+  if (current_screen != DGUS_Screen::PRINT_STATUS && current_screen != DGUS_Screen::PRINT_ADJUST)
     return;
-  }
 
   dgus_display.PlaySound(3);
 
@@ -309,23 +294,19 @@ void DGUSScreenHandler::FilamentRunout(const ExtUI::extruder_t extruder) {
 #if ENABLED(SDSUPPORT)
 
   void DGUSScreenHandler::SDCardInserted() {
-    if (current_screen == DGUS_Screen::HOME) {
+    if (current_screen == DGUS_Screen::HOME)
       TriggerScreenChange(DGUS_Screen::PRINT);
-    }
   }
 
   void DGUSScreenHandler::SDCardRemoved() {
-    if (current_screen == DGUS_Screen::PRINT) {
+    if (current_screen == DGUS_Screen::PRINT)
       TriggerScreenChange(DGUS_Screen::HOME);
-    }
   }
 
   void DGUSScreenHandler::SDCardError() {
     SetStatusMessage(GET_TEXT_F(MSG_MEDIA_READ_ERROR));
-
-    if (current_screen == DGUS_Screen::PRINT) {
+    if (current_screen == DGUS_Screen::PRINT)
       TriggerScreenChange(DGUS_Screen::HOME);
-    }
   }
 
 #endif // SDSUPPORT

commit c07aa875bc8c285adf7f967df656f6bf8a13bf92
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sun Nov 7 15:27:53 2021 +1300

    üêõ Fix DGUS Reloaded status message (#23090)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 9bae2b95d3..17e7a38445 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -409,7 +409,7 @@ void DGUSScreenHandler::SetStatusMessage(const char* msg, const millis_t duratio
 }
 
 void DGUSScreenHandler::SetStatusMessage(FSTR_P const fmsg, const millis_t duration) {
-  dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Status, FTOP(msg), DGUS_STATUS_LEN, false, true);
+  dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Status, FTOP(fmsg), DGUS_STATUS_LEN, false, true);
 
   status_expire = (duration > 0 ? ExtUI::safe_millis() + duration : 0);
 }

commit 9d72cbf84b970e5060f8dceef7158b9ca8252856
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 15 15:07:47 2021 -0500

    üí° Update old gnu.org links

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index e81eab8e73..9bae2b95d3 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit 65b950a489c35b1d5547da3a504af4dad8cde3d7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 20:15:52 2021 -0500

    üé® Apply F() to kill / sendinfoscreen

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index b2189f1c82..e81eab8e73 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -159,9 +159,9 @@ void DGUSScreenHandler::Loop() {
   dgus_display.Loop();
 }
 
-void DGUSScreenHandler::PrinterKilled(PGM_P error, PGM_P component) {
-  SetMessageLinePGM(error, 1);
-  SetMessageLinePGM(component, 2);
+void DGUSScreenHandler::PrinterKilled(FSTR_P const error, FSTR_P const component) {
+  SetMessageLinePGM(FTOP(error), 1);
+  SetMessageLinePGM(FTOP(component), 2);
   SetMessageLinePGM(NUL_STR, 3);
   SetMessageLinePGM(GET_TEXT(MSG_PLEASE_RESET), 4);
 

commit 12b5d997a2cee538e5026a68f8e0cfdd53248986
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 25 22:11:48 2021 -0500

    üé® Apply F() to some ExtUI functions

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
index 6316f1194b..b2189f1c82 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -135,20 +135,17 @@ void DGUSScreenHandler::Loop() {
     return;
   }
 
-  if (current_screen == DGUS_Screen::LEVELING_PROBING
-      && IsPrinterIdle()) {
+  if (current_screen == DGUS_Screen::LEVELING_PROBING && IsPrinterIdle()) {
     dgus_display.PlaySound(3);
 
-    SetStatusMessagePGM(ExtUI::getMeshValid() ?
-                          PSTR("Probing successful")
-                        : PSTR("Probing failed"));
+    SetStatusMessage(ExtUI::getMeshValid() ? F("Probing successful") : F("Probing failed"));
 
     MoveToScreen(DGUS_Screen::LEVELING_AUTOMATIC);
     return;
   }
 
   if (status_expire > 0 && ELAPSED(ms, status_expire)) {
-    SetStatusMessagePGM(NUL_STR, 0);
+    SetStatusMessage(FPSTR(NUL_STR), 0);
     return;
   }
 
@@ -194,7 +191,7 @@ void DGUSScreenHandler::SettingsReset() {
     Ready();
   }
 
-  SetStatusMessagePGM(PSTR("EEPROM reset"));
+  SetStatusMessage(F("EEPROM reset"));
 }
 
 void DGUSScreenHandler::StoreSettings(char *buff) {
@@ -229,13 +226,13 @@ void DGUSScreenHandler::LoadSettings(const char *buff) {
 
 void DGUSScreenHandler::ConfigurationStoreWritten(bool success) {
   if (!success) {
-    SetStatusMessagePGM(PSTR("EEPROM write failed"));
+    SetStatusMessage(F("EEPROM write failed"));
   }
 }
 
 void DGUSScreenHandler::ConfigurationStoreRead(bool success) {
   if (!success) {
-    SetStatusMessagePGM(PSTR("EEPROM read failed"));
+    SetStatusMessage(F("EEPROM read failed"));
   }
   else if (!settings_ready) {
     settings_ready = true;
@@ -324,7 +321,7 @@ void DGUSScreenHandler::FilamentRunout(const ExtUI::extruder_t extruder) {
   }
 
   void DGUSScreenHandler::SDCardError() {
-    SetStatusMessagePGM(GET_TEXT(MSG_MEDIA_READ_ERROR));
+    SetStatusMessage(GET_TEXT_F(MSG_MEDIA_READ_ERROR));
 
     if (current_screen == DGUS_Screen::PRINT) {
       TriggerScreenChange(DGUS_Screen::HOME);
@@ -346,19 +343,19 @@ void DGUSScreenHandler::FilamentRunout(const ExtUI::extruder_t extruder) {
   void DGUSScreenHandler::PidTuning(const ExtUI::result_t rst) {
     switch (rst) {
       case ExtUI::PID_STARTED:
-        SetStatusMessagePGM(GET_TEXT(MSG_PID_AUTOTUNE));
+        SetStatusMessage(GET_TEXT_F(MSG_PID_AUTOTUNE));
         break;
       case ExtUI::PID_BAD_EXTRUDER_NUM:
-        SetStatusMessagePGM(GET_TEXT(MSG_PID_BAD_EXTRUDER_NUM));
+        SetStatusMessage(GET_TEXT_F(MSG_PID_BAD_EXTRUDER_NUM));
         break;
       case ExtUI::PID_TEMP_TOO_HIGH:
-        SetStatusMessagePGM(GET_TEXT(MSG_PID_TEMP_TOO_HIGH));
+        SetStatusMessage(GET_TEXT_F(MSG_PID_TEMP_TOO_HIGH));
         break;
       case ExtUI::PID_TUNING_TIMEOUT:
-        SetStatusMessagePGM(GET_TEXT(MSG_PID_TIMEOUT));
+        SetStatusMessage(GET_TEXT_F(MSG_PID_TIMEOUT));
         break;
       case ExtUI::PID_DONE:
-        SetStatusMessagePGM(GET_TEXT(MSG_PID_AUTOTUNE_DONE));
+        SetStatusMessage(GET_TEXT_F(MSG_PID_AUTOTUNE_DONE));
         break;
       default:
         return;
@@ -411,8 +408,8 @@ void DGUSScreenHandler::SetStatusMessage(const char* msg, const millis_t duratio
   status_expire = (duration > 0 ? ExtUI::safe_millis() + duration : 0);
 }
 
-void DGUSScreenHandler::SetStatusMessagePGM(PGM_P msg, const millis_t duration) {
-  dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Status, msg, DGUS_STATUS_LEN, false, true);
+void DGUSScreenHandler::SetStatusMessage(FSTR_P const fmsg, const millis_t duration) {
+  dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Status, FTOP(msg), DGUS_STATUS_LEN, false, true);
 
   status_expire = (duration > 0 ? ExtUI::safe_millis() + duration : 0);
 }

commit b0e798330d8f5ade4a230e0a91f05482d100bb97
Author: mrv96 <mrv96@users.noreply.github.com>
Date:   Tue Sep 7 02:51:04 2021 +0200

    ‚ú®Add DGUS_LCD_UI_RELOADED (#21931)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
new file mode 100644
index 0000000000..6316f1194b
--- /dev/null
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSScreenHandler.cpp
@@ -0,0 +1,540 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2021 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(DGUS_LCD_UI_RELOADED)
+
+#include "DGUSScreenHandler.h"
+
+#include "DGUSDisplay.h"
+#include "definition/DGUS_ScreenAddrList.h"
+#include "definition/DGUS_ScreenSetup.h"
+
+#include "../../../gcode/queue.h"
+
+uint8_t DGUSScreenHandler::debug_count = 0;
+
+#if ENABLED(SDSUPPORT)
+  ExtUI::FileList DGUSScreenHandler::filelist;
+  uint16_t DGUSScreenHandler::filelist_offset = 0;
+  int16_t DGUSScreenHandler::filelist_selected = -1;
+#endif
+
+DGUS_Data::StepSize DGUSScreenHandler::offset_steps = DGUS_Data::StepSize::MMP1;
+DGUS_Data::StepSize DGUSScreenHandler::move_steps = DGUS_Data::StepSize::MM10;
+
+uint16_t DGUSScreenHandler::probing_icons[] = { 0, 0 };
+
+DGUS_Data::Extruder DGUSScreenHandler::filament_extruder = DGUS_Data::Extruder::CURRENT;
+uint16_t DGUSScreenHandler::filament_length = DGUS_DEFAULT_FILAMENT_LEN;
+
+char DGUSScreenHandler::gcode[] = "";
+
+DGUS_Data::Heater DGUSScreenHandler::pid_heater = DGUS_Data::Heater::H0;
+uint16_t DGUSScreenHandler::pid_temp = DGUS_PLA_TEMP_HOTEND;
+uint8_t DGUSScreenHandler::pid_cycles = 5;
+
+bool DGUSScreenHandler::settings_ready = false;
+bool DGUSScreenHandler::booted = false;
+
+DGUS_Screen DGUSScreenHandler::current_screen = DGUS_Screen::BOOT;
+DGUS_Screen DGUSScreenHandler::new_screen = DGUS_Screen::BOOT;
+bool DGUSScreenHandler::full_update = false;
+
+DGUS_Screen DGUSScreenHandler::wait_return_screen = DGUS_Screen::HOME;
+bool DGUSScreenHandler::wait_continue = false;
+
+bool DGUSScreenHandler::leveling_active = false;
+
+millis_t DGUSScreenHandler::status_expire = 0;
+millis_t DGUSScreenHandler::eeprom_save = 0;
+
+const char DGUS_MSG_HOMING_REQUIRED[] PROGMEM = "Homing required",
+           DGUS_MSG_BUSY[] PROGMEM = "Busy",
+           DGUS_MSG_UNDEF[] PROGMEM = "-",
+           DGUS_MSG_HOMING[] PROGMEM = "Homing...",
+           DGUS_MSG_FW_OUTDATED[] PROGMEM = "DWIN GUI/OS update required",
+           DGUS_MSG_ABL_REQUIRED[] PROGMEM = "Auto bed leveling required";
+
+const char DGUS_CMD_HOME[] PROGMEM = "G28",
+           DGUS_CMD_EEPROM_SAVE[] PROGMEM = "M500";
+
+void DGUSScreenHandler::Init() {
+  dgus_display.Init();
+
+  MoveToScreen(DGUS_Screen::BOOT, true);
+}
+
+void DGUSScreenHandler::Ready() {
+  dgus_display.PlaySound(1);
+}
+
+void DGUSScreenHandler::Loop() {
+  if (!settings_ready || current_screen == DGUS_Screen::KILL) {
+    return;
+  }
+
+  const millis_t ms = ExtUI::safe_millis();
+  static millis_t next_event_ms = 0;
+
+  if (new_screen != DGUS_Screen::BOOT) {
+    const DGUS_Screen screen = new_screen;
+    new_screen = DGUS_Screen::BOOT;
+
+    if (current_screen == screen) {
+      TriggerFullUpdate();
+    }
+    else {
+      MoveToScreen(screen);
+    }
+    return;
+  }
+
+  if (!booted && ELAPSED(ms, 3000)) {
+    booted = true;
+
+    if (current_screen == DGUS_Screen::BOOT) {
+      MoveToScreen(DGUS_Screen::HOME);
+    }
+    return;
+  }
+
+  if (ELAPSED(ms, next_event_ms) || full_update) {
+    next_event_ms = ms + DGUS_UPDATE_INTERVAL_MS;
+
+    if (!SendScreenVPData(current_screen, full_update)) {
+      DEBUG_ECHOLNPGM("SendScreenVPData failed");
+    }
+    return;
+  }
+
+  if (current_screen == DGUS_Screen::WAIT
+      && ((wait_continue && !wait_for_user)
+          || (!wait_continue && IsPrinterIdle()))) {
+    MoveToScreen(wait_return_screen, true);
+    return;
+  }
+
+  if (current_screen == DGUS_Screen::LEVELING_PROBING
+      && IsPrinterIdle()) {
+    dgus_display.PlaySound(3);
+
+    SetStatusMessagePGM(ExtUI::getMeshValid() ?
+                          PSTR("Probing successful")
+                        : PSTR("Probing failed"));
+
+    MoveToScreen(DGUS_Screen::LEVELING_AUTOMATIC);
+    return;
+  }
+
+  if (status_expire > 0 && ELAPSED(ms, status_expire)) {
+    SetStatusMessagePGM(NUL_STR, 0);
+    return;
+  }
+
+  if (eeprom_save > 0 && ELAPSED(ms, eeprom_save) && IsPrinterIdle()) {
+    eeprom_save = 0;
+
+    queue.enqueue_now_P(DGUS_CMD_EEPROM_SAVE);
+    return;
+  }
+
+  dgus_display.Loop();
+}
+
+void DGUSScreenHandler::PrinterKilled(PGM_P error, PGM_P component) {
+  SetMessageLinePGM(error, 1);
+  SetMessageLinePGM(component, 2);
+  SetMessageLinePGM(NUL_STR, 3);
+  SetMessageLinePGM(GET_TEXT(MSG_PLEASE_RESET), 4);
+
+  dgus_display.PlaySound(3, 1, 200);
+
+  MoveToScreen(DGUS_Screen::KILL, true);
+}
+
+void DGUSScreenHandler::UserConfirmRequired(const char * const msg) {
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 1);
+  dgus_screen_handler.SetMessageLine(msg, 2);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 3);
+  dgus_screen_handler.SetMessageLinePGM(NUL_STR, 4);
+
+  dgus_display.PlaySound(3);
+
+  dgus_screen_handler.ShowWaitScreen(current_screen, true);
+}
+
+void DGUSScreenHandler::SettingsReset() {
+  dgus_display.SetVolume(DGUS_DEFAULT_VOLUME);
+  dgus_display.SetBrightness(DGUS_DEFAULT_BRIGHTNESS);
+
+  if (!settings_ready) {
+    settings_ready = true;
+
+    Ready();
+  }
+
+  SetStatusMessagePGM(PSTR("EEPROM reset"));
+}
+
+void DGUSScreenHandler::StoreSettings(char *buff) {
+  eeprom_data_t data;
+
+  static_assert(sizeof(data) <= ExtUI::eeprom_data_size, "sizeof(eeprom_data_t) > eeprom_data_size.");
+
+  data.initialized = true;
+  data.volume = dgus_display.GetVolume();
+  data.brightness = dgus_display.GetBrightness();
+  data.abl = (ExtUI::getLevelingActive() && ExtUI::getMeshValid());
+
+  memcpy(buff, &data, sizeof(data));
+}
+
+void DGUSScreenHandler::LoadSettings(const char *buff) {
+  eeprom_data_t data;
+
+  static_assert(sizeof(data) <= ExtUI::eeprom_data_size, "sizeof(eeprom_data_t) > eeprom_data_size.");
+
+  memcpy(&data, buff, sizeof(data));
+
+  dgus_display.SetVolume(data.initialized ? data.volume : DGUS_DEFAULT_VOLUME);
+  dgus_display.SetBrightness(data.initialized ? data.brightness : DGUS_DEFAULT_BRIGHTNESS);
+
+  if (data.initialized) {
+    leveling_active = (data.abl && ExtUI::getMeshValid());
+
+    ExtUI::setLevelingActive(leveling_active);
+  }
+}
+
+void DGUSScreenHandler::ConfigurationStoreWritten(bool success) {
+  if (!success) {
+    SetStatusMessagePGM(PSTR("EEPROM write failed"));
+  }
+}
+
+void DGUSScreenHandler::ConfigurationStoreRead(bool success) {
+  if (!success) {
+    SetStatusMessagePGM(PSTR("EEPROM read failed"));
+  }
+  else if (!settings_ready) {
+    settings_ready = true;
+
+    Ready();
+  }
+}
+
+void DGUSScreenHandler::PlayTone(const uint16_t frequency, const uint16_t duration) {
+  UNUSED(duration);
+
+  if (frequency >= 1 && frequency <= 255) {
+    if (duration >= 1 && duration <= 255) {
+      dgus_display.PlaySound((uint8_t)frequency, (uint8_t)duration);
+    }
+    else {
+      dgus_display.PlaySound((uint8_t)frequency);
+    }
+  }
+}
+
+void DGUSScreenHandler::MeshUpdate(const int8_t xpos, const int8_t ypos) {
+  if (current_screen != DGUS_Screen::LEVELING_PROBING) {
+    if (current_screen == DGUS_Screen::LEVELING_AUTOMATIC) {
+      TriggerFullUpdate();
+    }
+
+    return;
+  }
+
+  uint8_t point = ypos * GRID_MAX_POINTS_X + xpos;
+  probing_icons[point < 16 ? 0 : 1] |= (1U << (point % 16));
+
+  if (xpos >= GRID_MAX_POINTS_X - 1
+      && ypos >= GRID_MAX_POINTS_Y - 1
+      && !ExtUI::getMeshValid()) {
+    probing_icons[0] = 0;
+    probing_icons[1] = 0;
+  }
+
+  TriggerFullUpdate();
+}
+
+void DGUSScreenHandler::PrintTimerStarted() {
+  TriggerScreenChange(DGUS_Screen::PRINT_STATUS);
+}
+
+void DGUSScreenHandler::PrintTimerPaused() {
+  dgus_display.PlaySound(3);
+
+  TriggerFullUpdate();
+}
+
+void DGUSScreenHandler::PrintTimerStopped() {
+  if (current_screen != DGUS_Screen::PRINT_STATUS
+      && current_screen != DGUS_Screen::PRINT_ADJUST) {
+    return;
+  }
+
+  dgus_display.PlaySound(3);
+
+  TriggerScreenChange(DGUS_Screen::PRINT_FINISHED);
+}
+
+void DGUSScreenHandler::FilamentRunout(const ExtUI::extruder_t extruder) {
+  char buffer[21];
+  snprintf_P(buffer, sizeof(buffer), PSTR("Filament runout E%d"), extruder);
+
+  SetStatusMessage(buffer);
+
+  dgus_display.PlaySound(3);
+}
+
+#if ENABLED(SDSUPPORT)
+
+  void DGUSScreenHandler::SDCardInserted() {
+    if (current_screen == DGUS_Screen::HOME) {
+      TriggerScreenChange(DGUS_Screen::PRINT);
+    }
+  }
+
+  void DGUSScreenHandler::SDCardRemoved() {
+    if (current_screen == DGUS_Screen::PRINT) {
+      TriggerScreenChange(DGUS_Screen::HOME);
+    }
+  }
+
+  void DGUSScreenHandler::SDCardError() {
+    SetStatusMessagePGM(GET_TEXT(MSG_MEDIA_READ_ERROR));
+
+    if (current_screen == DGUS_Screen::PRINT) {
+      TriggerScreenChange(DGUS_Screen::HOME);
+    }
+  }
+
+#endif // SDSUPPORT
+
+#if ENABLED(POWER_LOSS_RECOVERY)
+
+  void DGUSScreenHandler::PowerLossResume() {
+    MoveToScreen(DGUS_Screen::POWERLOSS, true);
+  }
+
+#endif // POWER_LOSS_RECOVERY
+
+#if HAS_PID_HEATING
+
+  void DGUSScreenHandler::PidTuning(const ExtUI::result_t rst) {
+    switch (rst) {
+      case ExtUI::PID_STARTED:
+        SetStatusMessagePGM(GET_TEXT(MSG_PID_AUTOTUNE));
+        break;
+      case ExtUI::PID_BAD_EXTRUDER_NUM:
+        SetStatusMessagePGM(GET_TEXT(MSG_PID_BAD_EXTRUDER_NUM));
+        break;
+      case ExtUI::PID_TEMP_TOO_HIGH:
+        SetStatusMessagePGM(GET_TEXT(MSG_PID_TEMP_TOO_HIGH));
+        break;
+      case ExtUI::PID_TUNING_TIMEOUT:
+        SetStatusMessagePGM(GET_TEXT(MSG_PID_TIMEOUT));
+        break;
+      case ExtUI::PID_DONE:
+        SetStatusMessagePGM(GET_TEXT(MSG_PID_AUTOTUNE_DONE));
+        break;
+      default:
+        return;
+    }
+
+    dgus_display.PlaySound(3);
+  }
+
+#endif // HAS_PID_HEATING
+
+void DGUSScreenHandler::SetMessageLine(const char* msg, uint8_t line) {
+  switch (line) {
+    default: return;
+    case 1:
+      dgus_display.WriteString((uint16_t)DGUS_Addr::MESSAGE_Line1, msg, DGUS_LINE_LEN, true, true);
+      break;
+    case 2:
+      dgus_display.WriteString((uint16_t)DGUS_Addr::MESSAGE_Line2, msg, DGUS_LINE_LEN, true, true);
+      break;
+    case 3:
+      dgus_display.WriteString((uint16_t)DGUS_Addr::MESSAGE_Line3, msg, DGUS_LINE_LEN, true, true);
+      break;
+    case 4:
+      dgus_display.WriteString((uint16_t)DGUS_Addr::MESSAGE_Line4, msg, DGUS_LINE_LEN, true, true);
+      break;
+  }
+}
+
+void DGUSScreenHandler::SetMessageLinePGM(PGM_P msg, uint8_t line) {
+  switch (line) {
+    default: return;
+    case 1:
+      dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Line1, msg, DGUS_LINE_LEN, true, true);
+      break;
+    case 2:
+      dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Line2, msg, DGUS_LINE_LEN, true, true);
+      break;
+    case 3:
+      dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Line3, msg, DGUS_LINE_LEN, true, true);
+      break;
+    case 4:
+      dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Line4, msg, DGUS_LINE_LEN, true, true);
+      break;
+  }
+}
+
+void DGUSScreenHandler::SetStatusMessage(const char* msg, const millis_t duration) {
+  dgus_display.WriteString((uint16_t)DGUS_Addr::MESSAGE_Status, msg, DGUS_STATUS_LEN, false, true);
+
+  status_expire = (duration > 0 ? ExtUI::safe_millis() + duration : 0);
+}
+
+void DGUSScreenHandler::SetStatusMessagePGM(PGM_P msg, const millis_t duration) {
+  dgus_display.WriteStringPGM((uint16_t)DGUS_Addr::MESSAGE_Status, msg, DGUS_STATUS_LEN, false, true);
+
+  status_expire = (duration > 0 ? ExtUI::safe_millis() + duration : 0);
+}
+
+void DGUSScreenHandler::ShowWaitScreen(DGUS_Screen return_screen, bool has_continue) {
+  if (return_screen != DGUS_Screen::WAIT) {
+    wait_return_screen = return_screen;
+  }
+  wait_continue = has_continue;
+
+  TriggerScreenChange(DGUS_Screen::WAIT);
+}
+
+DGUS_Screen DGUSScreenHandler::GetCurrentScreen() {
+  return current_screen;
+}
+
+void DGUSScreenHandler::TriggerScreenChange(DGUS_Screen screen) {
+  new_screen = screen;
+}
+
+void DGUSScreenHandler::TriggerFullUpdate() {
+  full_update = true;
+}
+
+void DGUSScreenHandler::TriggerEEPROMSave() {
+  eeprom_save = ExtUI::safe_millis() + 500;
+}
+
+bool DGUSScreenHandler::IsPrinterIdle() {
+  return (!ExtUI::commandsInQueue()
+          && !ExtUI::isMoving());
+}
+
+const DGUS_Addr* DGUSScreenHandler::FindScreenAddrList(DGUS_Screen screen) {
+  DGUS_ScreenAddrList list;
+  const DGUS_ScreenAddrList *map = screen_addr_list_map;
+
+  do {
+    memcpy_P(&list, map, sizeof(*map));
+    if (!list.addr_list) break;
+    if (list.screen == screen) {
+      return list.addr_list;
+    }
+  } while (++map);
+
+  return nullptr;
+}
+
+bool DGUSScreenHandler::CallScreenSetup(DGUS_Screen screen) {
+  DGUS_ScreenSetup setup;
+  const DGUS_ScreenSetup *list = screen_setup_list;
+
+  do {
+    memcpy_P(&setup, list, sizeof(*list));
+    if (!setup.setup_fn) break;
+    if (setup.screen == screen) {
+      return setup.setup_fn();
+    }
+  } while (++list);
+
+  return true;
+}
+
+void DGUSScreenHandler::MoveToScreen(DGUS_Screen screen, bool abort_wait) {
+  if (current_screen == DGUS_Screen::KILL) {
+    return;
+  }
+
+  if (current_screen == DGUS_Screen::WAIT) {
+    if (screen != DGUS_Screen::WAIT) {
+      wait_return_screen = screen;
+    }
+
+    if (!abort_wait) return;
+
+    if (wait_continue && wait_for_user) {
+      ExtUI::setUserConfirmed();
+    }
+  }
+
+  if (!CallScreenSetup(screen)) return;
+
+  if (!SendScreenVPData(screen, true)) {
+    DEBUG_ECHOLNPGM("SendScreenVPData failed");
+    return;
+  }
+
+  current_screen = screen;
+  dgus_display.SwitchScreen(current_screen);
+}
+
+bool DGUSScreenHandler::SendScreenVPData(DGUS_Screen screen, bool complete_update) {
+  if (complete_update) {
+    full_update = false;
+  }
+
+  const DGUS_Addr *list = FindScreenAddrList(screen);
+
+  while (true) {
+    if (!list) return true; // Nothing left to send
+
+    const uint16_t addr = pgm_read_word(list++);
+    if (!addr) return true; // Nothing left to send
+
+    DGUS_VP vp;
+    if (!DGUS_PopulateVP((DGUS_Addr)addr, &vp)) continue; // Invalid VP
+    if (!vp.tx_handler) continue; // Nothing to send
+    if (!complete_update && !(vp.flags & VPFLAG_AUTOUPLOAD)) continue; // Unnecessary VP
+
+    uint8_t expected_tx = 6 + vp.size; // 6 bytes header + payload.
+    const millis_t try_until = ExtUI::safe_millis() + 1000;
+
+    while (expected_tx > dgus_display.GetFreeTxBuffer()) {
+      if (ELAPSED(ExtUI::safe_millis(), try_until)) return false; // Stop trying after 1 second
+
+      dgus_display.FlushTx(); // Flush the TX buffer
+      delay(50);
+    }
+
+    vp.tx_handler(vp);
+  }
+}
+
+#endif // DGUS_LCD_UI_RELOADED
