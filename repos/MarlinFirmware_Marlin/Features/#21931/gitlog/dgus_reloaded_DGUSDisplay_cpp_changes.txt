commit ca31f9789ef56114763f50391f775cbad53486df
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue May 21 15:49:02 2024 -0500

    🩹 Fix LCD getFreeTxBuffer typo

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
index 3127268180..741c36fde6 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
@@ -334,8 +334,8 @@ void DGUSDisplay::processRx() {
 
 size_t DGUSDisplay::getFreeTxBuffer() {
   return (
-    #ifdef LCD_SERIAL_GET_TX_BUFFER_FREE
-      LCD_SERIAL_GET_TX_BUFFER_FREE()
+    #ifdef LCD_SERIAL_TX_BUFFER_FREE
+      LCD_SERIAL_TX_BUFFER_FREE()
     #else
       SIZE_MAX
     #endif

commit bc385122e94d7eda79bdf1573a7c2071c4589da2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 13:34:13 2023 -0500

    🎨 Lowercase method / data member names (#25914)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
index 7e215f887c..3127268180 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
@@ -50,26 +50,26 @@ uint8_t DGUSDisplay::rx_datagram_len = 0;
 
 bool DGUSDisplay::initialized = false;
 
-void DGUSDisplay::Loop() {
-  ProcessRx();
+void DGUSDisplay::loop() {
+  processRx();
 }
 
-void DGUSDisplay::Init() {
+void DGUSDisplay::init() {
   LCD_SERIAL.begin(LCD_BAUDRATE);
 
-  ReadVersions();
+  readVersions();
 }
 
-void DGUSDisplay::Read(uint16_t addr, uint8_t size) {
-  WriteHeader(addr, DGUS_READVAR, size);
+void DGUSDisplay::read(uint16_t addr, uint8_t size) {
+  writeHeader(addr, DGUS_READVAR, size);
 
   LCD_SERIAL.write(size);
 }
 
-void DGUSDisplay::Write(uint16_t addr, const void* data_ptr, uint8_t size) {
+void DGUSDisplay::write(uint16_t addr, const void* data_ptr, uint8_t size) {
   if (!data_ptr) return;
 
-  WriteHeader(addr, DGUS_WRITEVAR, size);
+  writeHeader(addr, DGUS_WRITEVAR, size);
 
   const char* data = static_cast<const char*>(data_ptr);
 
@@ -78,10 +78,10 @@ void DGUSDisplay::Write(uint16_t addr, const void* data_ptr, uint8_t size) {
   }
 }
 
-void DGUSDisplay::WriteString(uint16_t addr, const void* data_ptr, uint8_t size, bool left, bool right, bool use_space) {
+void DGUSDisplay::writeString(uint16_t addr, const void* data_ptr, uint8_t size, bool left, bool right, bool use_space) {
   if (!data_ptr) return;
 
-  WriteHeader(addr, DGUS_WRITEVAR, size);
+  writeHeader(addr, DGUS_WRITEVAR, size);
 
   const char* data = static_cast<const char*>(data_ptr);
   size_t len = strlen(data);
@@ -118,10 +118,10 @@ void DGUSDisplay::WriteString(uint16_t addr, const void* data_ptr, uint8_t size,
   }
 }
 
-void DGUSDisplay::WriteStringPGM(uint16_t addr, const void* data_ptr, uint8_t size, bool left, bool right, bool use_space) {
+void DGUSDisplay::writeStringPGM(uint16_t addr, const void* data_ptr, uint8_t size, bool left, bool right, bool use_space) {
   if (!data_ptr) return;
 
-  WriteHeader(addr, DGUS_WRITEVAR, size);
+  writeHeader(addr, DGUS_WRITEVAR, size);
 
   const char* data = static_cast<const char*>(data_ptr);
   size_t len = strlen_P(data);
@@ -151,61 +151,61 @@ void DGUSDisplay::WriteStringPGM(uint16_t addr, const void* data_ptr, uint8_t si
   while (right_spaces--) LCD_SERIAL.write(use_space ? ' ' : '\0');
 }
 
-void DGUSDisplay::ReadVersions() {
+void DGUSDisplay::readVersions() {
   if (gui_version != 0 && os_version != 0) return;
-  Read(DGUS_VERSION, 1);
+  read(DGUS_VERSION, 1);
 }
 
-void DGUSDisplay::SwitchScreen(DGUS_Screen screen) {
-  const uint8_t command[] = { 0x5A, 0x01, 0x00, (uint8_t)screen };
-  Write(0x84, command, sizeof(command));
+void DGUSDisplay::switchScreen(const DGUS_ScreenID screenID) {
+  const uint8_t command[] = { 0x5A, 0x01, 0x00, (uint8_t)screenID };
+  write(0x84, command, sizeof(command));
 }
 
-void DGUSDisplay::PlaySound(uint8_t start, uint8_t len, uint8_t volume) {
+void DGUSDisplay::playSound(uint8_t start, uint8_t len, uint8_t volume) {
   if (volume == 0) volume = DGUSDisplay::volume;
   if (volume == 0) return;
   const uint8_t command[] = { start, len, volume, 0x00 };
-  Write(0xA0, command, sizeof(command));
+  write(0xA0, command, sizeof(command));
 }
 
-void DGUSDisplay::EnableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_Control control) {
-  const uint8_t command[] = { 0x5A, 0xA5, 0x00, (uint8_t)screen, (uint8_t)control, type, 0x00, 0x01 };
-  Write(0xB0, command, sizeof(command));
+void DGUSDisplay::enableControl(const DGUS_ScreenID screenID, DGUS_ControlType type, DGUS_Control control) {
+  const uint8_t command[] = { 0x5A, 0xA5, 0x00, (uint8_t)screenID, (uint8_t)control, type, 0x00, 0x01 };
+  write(0xB0, command, sizeof(command));
 
-  FlushTx();
+  flushTx();
   delay(50);
 }
 
-void DGUSDisplay::DisableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_Control control) {
-  const uint8_t command[] = { 0x5A, 0xA5, 0x00, (uint8_t)screen, (uint8_t)control, type, 0x00, 0x00 };
-  Write(0xB0, command, sizeof(command));
+void DGUSDisplay::disableControl(const DGUS_ScreenID screenID, DGUS_ControlType type, DGUS_Control control) {
+  const uint8_t command[] = { 0x5A, 0xA5, 0x00, (uint8_t)screenID, (uint8_t)control, type, 0x00, 0x00 };
+  write(0xB0, command, sizeof(command));
 
-  FlushTx();
+  flushTx();
   delay(50);
 }
 
-uint8_t DGUSDisplay::GetBrightness() {
+uint8_t DGUSDisplay::getBrightness() {
   return brightness;
 }
 
-uint8_t DGUSDisplay::GetVolume() {
+uint8_t DGUSDisplay::getVolume() {
   return map_precise(volume, 0, 255, 0, 100);
 }
 
-void DGUSDisplay::SetBrightness(uint8_t new_brightness) {
+void DGUSDisplay::setBrightness(uint8_t new_brightness) {
   brightness = constrain(new_brightness, 0, 100);
   new_brightness = map_precise(brightness, 0, 100, 5, 100);
   const uint8_t command[] = { new_brightness, new_brightness };
-  Write(0x82, command, sizeof(command));
+  write(0x82, command, sizeof(command));
 }
 
-void DGUSDisplay::SetVolume(uint8_t new_volume) {
+void DGUSDisplay::setVolume(uint8_t new_volume) {
   volume = map_precise(constrain(new_volume, 0, 100), 0, 100, 0, 255);
   const uint8_t command[] = { volume, 0x00 };
-  Write(0xA1, command, sizeof(command));
+  write(0xA1, command, sizeof(command));
 }
 
-void DGUSDisplay::ProcessRx() {
+void DGUSDisplay::processRx() {
 
   #if ENABLED(LCD_SERIAL_STATS_RX_BUFFER_OVERRUNS)
     if (!LCD_SERIAL.available() && LCD_SERIAL.buffer_overruns()) {
@@ -274,7 +274,7 @@ void DGUSDisplay::ProcessRx() {
           }
 
           DGUS_VP vp;
-          if (!DGUS_PopulateVP((DGUS_Addr)addr, &vp)) {
+          if (!populateVP((DGUS_Addr)addr, &vp)) {
             rx_datagram_state = DGUS_IDLE;
             break;
           }
@@ -332,7 +332,7 @@ void DGUSDisplay::ProcessRx() {
   }
 }
 
-size_t DGUSDisplay::GetFreeTxBuffer() {
+size_t DGUSDisplay::getFreeTxBuffer() {
   return (
     #ifdef LCD_SERIAL_GET_TX_BUFFER_FREE
       LCD_SERIAL_GET_TX_BUFFER_FREE()
@@ -342,7 +342,7 @@ size_t DGUSDisplay::GetFreeTxBuffer() {
   );
 }
 
-void DGUSDisplay::FlushTx() {
+void DGUSDisplay::flushTx() {
   #ifdef ARDUINO_ARCH_STM32
     LCD_SERIAL.flush();
   #else
@@ -350,7 +350,7 @@ void DGUSDisplay::FlushTx() {
   #endif
 }
 
-void DGUSDisplay::WriteHeader(uint16_t addr, uint8_t command, uint8_t len) {
+void DGUSDisplay::writeHeader(uint16_t addr, uint8_t command, uint8_t len) {
   LCD_SERIAL.write(DGUS_HEADER1);
   LCD_SERIAL.write(DGUS_HEADER2);
   LCD_SERIAL.write(len + 3);
@@ -359,7 +359,7 @@ void DGUSDisplay::WriteHeader(uint16_t addr, uint8_t command, uint8_t len) {
   LCD_SERIAL.write(addr & 0xFF);
 }
 
-bool DGUS_PopulateVP(const DGUS_Addr addr, DGUS_VP * const buffer) {
+bool populateVP(const DGUS_Addr addr, DGUS_VP * const buffer) {
   const DGUS_VP *ret = vp_list;
 
   do {

commit 4b9bb85b1266e8febbcb1931c8427d410a05bf84
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Mar 6 22:55:55 2023 -0600

    🔧 Add DGUS_LCD_UI RELOADED conditions

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
index 5bbeb0d7cc..7e215f887c 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
@@ -125,8 +125,7 @@ void DGUSDisplay::WriteStringPGM(uint16_t addr, const void* data_ptr, uint8_t si
 
   const char* data = static_cast<const char*>(data_ptr);
   size_t len = strlen_P(data);
-  uint8_t left_spaces = 0;
-  uint8_t right_spaces = 0;
+  uint8_t left_spaces = 0, right_spaces = 0;
 
   if (len < size) {
     if (!len) {
@@ -147,15 +146,9 @@ void DGUSDisplay::WriteStringPGM(uint16_t addr, const void* data_ptr, uint8_t si
     len = size;
   }
 
-  while (left_spaces--) {
-    LCD_SERIAL.write(' ');
-  }
-  while (len--) {
-    LCD_SERIAL.write(pgm_read_byte(data++));
-  }
-  while (right_spaces--) {
-    LCD_SERIAL.write(use_space ? ' ' : '\0');
-  }
+  while (left_spaces--) LCD_SERIAL.write(' ');
+  while (len--) LCD_SERIAL.write(pgm_read_byte(data++));
+  while (right_spaces--) LCD_SERIAL.write(use_space ? ' ' : '\0');
 }
 
 void DGUSDisplay::ReadVersions() {
@@ -340,11 +333,13 @@ void DGUSDisplay::ProcessRx() {
 }
 
 size_t DGUSDisplay::GetFreeTxBuffer() {
-  #ifdef LCD_SERIAL_GET_TX_BUFFER_FREE
-    return LCD_SERIAL_GET_TX_BUFFER_FREE();
-  #else
-    return SIZE_MAX;
-  #endif
+  return (
+    #ifdef LCD_SERIAL_GET_TX_BUFFER_FREE
+      LCD_SERIAL_GET_TX_BUFFER_FREE()
+    #else
+      SIZE_MAX
+    #endif
+  );
 }
 
 void DGUSDisplay::FlushTx() {

commit 96bc084f3d791bc93265f217181986863e8e5fc7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 18 02:15:16 2023 -0600

    🎨 Misc. LCD cleanup (#25400)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
index df22407c0f..5bbeb0d7cc 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
@@ -164,7 +164,6 @@ void DGUSDisplay::ReadVersions() {
 }
 
 void DGUSDisplay::SwitchScreen(DGUS_Screen screen) {
-  DEBUG_ECHOLNPGM("SwitchScreen ", (uint8_t)screen);
   const uint8_t command[] = { 0x5A, 0x01, 0x00, (uint8_t)screen };
   Write(0x84, command, sizeof(command));
 }
@@ -172,14 +171,11 @@ void DGUSDisplay::SwitchScreen(DGUS_Screen screen) {
 void DGUSDisplay::PlaySound(uint8_t start, uint8_t len, uint8_t volume) {
   if (volume == 0) volume = DGUSDisplay::volume;
   if (volume == 0) return;
-  DEBUG_ECHOLNPGM("PlaySound ", start, ":", len, "\nVolume ", volume);
   const uint8_t command[] = { start, len, volume, 0x00 };
   Write(0xA0, command, sizeof(command));
 }
 
 void DGUSDisplay::EnableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_Control control) {
-  DEBUG_ECHOLNPGM("EnableControl ", (uint8_t)control, "\nScreen ", (uint8_t)screen, "\nType ", (uint8_t)type);
-
   const uint8_t command[] = { 0x5A, 0xA5, 0x00, (uint8_t)screen, (uint8_t)control, type, 0x00, 0x01 };
   Write(0xB0, command, sizeof(command));
 
@@ -188,8 +184,6 @@ void DGUSDisplay::EnableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_
 }
 
 void DGUSDisplay::DisableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_Control control) {
-  DEBUG_ECHOLNPGM("DisableControl ", (uint8_t)control, "\nScreen ", (uint8_t)screen, "\nType ", (uint8_t)type);
-
   const uint8_t command[] = { 0x5A, 0xA5, 0x00, (uint8_t)screen, (uint8_t)control, type, 0x00, 0x00 };
   Write(0xB0, command, sizeof(command));
 
@@ -208,14 +202,12 @@ uint8_t DGUSDisplay::GetVolume() {
 void DGUSDisplay::SetBrightness(uint8_t new_brightness) {
   brightness = constrain(new_brightness, 0, 100);
   new_brightness = map_precise(brightness, 0, 100, 5, 100);
-  DEBUG_ECHOLNPGM("SetBrightness ", new_brightness);
   const uint8_t command[] = { new_brightness, new_brightness };
   Write(0x82, command, sizeof(command));
 }
 
 void DGUSDisplay::SetVolume(uint8_t new_volume) {
   volume = map_precise(constrain(new_volume, 0, 100), 0, 100, 0, 255);
-  DEBUG_ECHOLNPGM("SetVolume ", volume);
   const uint8_t command[] = { volume, 0x00 };
   Write(0xA1, command, sizeof(command));
 }
@@ -226,7 +218,6 @@ void DGUSDisplay::ProcessRx() {
     if (!LCD_SERIAL.available() && LCD_SERIAL.buffer_overruns()) {
       // Overrun, but reset the flag only when the buffer is empty
       // We want to extract as many as valid datagrams possible...
-      DEBUG_ECHOPGM("OVFL");
       rx_datagram_state = DGUS_IDLE;
       //LCD_SERIAL.reset_rx_overun();
       LCD_SERIAL.flush();
@@ -239,20 +230,16 @@ void DGUSDisplay::ProcessRx() {
 
       case DGUS_IDLE: // Waiting for the first header byte
         receivedbyte = LCD_SERIAL.read();
-        DEBUG_ECHOPGM("< ", receivedbyte);
         if (DGUS_HEADER1 == receivedbyte) rx_datagram_state = DGUS_HEADER1_SEEN;
         break;
 
       case DGUS_HEADER1_SEEN: // Waiting for the second header byte
         receivedbyte = LCD_SERIAL.read();
-        DEBUG_ECHOPGM(" ", receivedbyte);
         rx_datagram_state = (DGUS_HEADER2 == receivedbyte) ? DGUS_HEADER2_SEEN : DGUS_IDLE;
         break;
 
       case DGUS_HEADER2_SEEN: // Waiting for the length byte
         rx_datagram_len = LCD_SERIAL.read();
-        DEBUG_ECHOPGM(" (", rx_datagram_len, ") ");
-
         // Telegram min len is 3 (command and one word of payload)
         rx_datagram_state = WITHIN(rx_datagram_len, 3, DGUS_RX_BUFFER_SIZE) ? DGUS_WAIT_TELEGRAM : DGUS_IDLE;
         break;
@@ -262,22 +249,16 @@ void DGUSDisplay::ProcessRx() {
 
         initialized = true; // We've talked to it, so we defined it as initialized.
         uint8_t command = LCD_SERIAL.read();
-
-        DEBUG_ECHOPGM("# ", command);
-
         uint8_t readlen = rx_datagram_len - 1;  // command is part of len.
         unsigned char tmp[rx_datagram_len - 1];
         unsigned char *ptmp = tmp;
 
         while (readlen--) {
           receivedbyte = LCD_SERIAL.read();
-          DEBUG_ECHOPGM(" ", receivedbyte);
           *ptmp++ = receivedbyte;
         }
-        DEBUG_ECHOPGM(" # ");
         // mostly we'll get this: 5A A5 03 82 4F 4B -- ACK on 0x82, so discard it.
         if (command == DGUS_WRITEVAR && 'O' == tmp[0] && 'K' == tmp[1]) {
-          DEBUG_ECHOLNPGM(">");
           rx_datagram_state = DGUS_IDLE;
           break;
         }
@@ -292,10 +273,7 @@ void DGUSDisplay::ProcessRx() {
         if (command == DGUS_READVAR) {
           const uint16_t addr = tmp[0] << 8 | tmp[1];
           const uint8_t dlen = tmp[2] << 1;  // Convert to Bytes. (Display works with words)
-          DEBUG_ECHOPGM("addr=", addr, " dlen=", dlen, "> ");
-
           if (addr == DGUS_VERSION && dlen == 2) {
-            DEBUG_ECHOLNPGM("VERSIONS");
             gui_version = tmp[3];
             os_version = tmp[4];
             rx_datagram_state = DGUS_IDLE;
@@ -304,13 +282,11 @@ void DGUSDisplay::ProcessRx() {
 
           DGUS_VP vp;
           if (!DGUS_PopulateVP((DGUS_Addr)addr, &vp)) {
-            DEBUG_ECHOLNPGM("VP not found");
             rx_datagram_state = DGUS_IDLE;
             break;
           }
 
           if (!vp.rx_handler) {
-            DEBUG_ECHOLNPGM("VP found, no handler.");
             rx_datagram_state = DGUS_IDLE;
             break;
           }
@@ -346,7 +322,6 @@ void DGUSDisplay::ProcessRx() {
           }
 
           if (dlen != vp.size) {
-            DEBUG_ECHOLNPGM("VP found, size mismatch.");
             rx_datagram_state = DGUS_IDLE;
             break;
           }
@@ -358,7 +333,6 @@ void DGUSDisplay::ProcessRx() {
           break;
         }
 
-        DEBUG_ECHOLNPGM(">");
         rx_datagram_state = DGUS_IDLE;
         break;
     }
@@ -402,7 +376,6 @@ bool DGUS_PopulateVP(const DGUS_Addr addr, DGUS_VP * const buffer) {
       return true;
     }
   } while (++ret);
-  DEBUG_ECHOLNPGM("VP not found: ", (uint16_t)addr);
   return false;
 }
 

commit c3fe4abd446336c50bdb892f08fa24a08f1bdda5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 7 22:59:25 2023 -0600

    🔨 DGUS_LCD_UI version check

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
index 15b3f5adcd..df22407c0f 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
@@ -24,7 +24,7 @@
 
 #include "../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(DGUS_LCD_UI_RELOADED)
+#if DGUS_LCD_UI_RELOADED
 
 #include "DGUSDisplay.h"
 

commit 8badf2d71ff52e0952bb98df25bb8fcb25eda9da
Author: Lars <lars.moesman@gmail.com>
Date:   Tue Jan 25 10:30:45 2022 +0100

    🐛 Fix DGUS_Reloaded G-code execution (#23592)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
index c03f655fba..15b3f5adcd 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
@@ -57,7 +57,7 @@ void DGUSDisplay::Loop() {
 void DGUSDisplay::Init() {
   LCD_SERIAL.begin(LCD_BAUDRATE);
 
-  Read(DGUS_VERSION, 1);
+  ReadVersions();
 }
 
 void DGUSDisplay::Read(uint16_t addr, uint8_t size) {
@@ -158,6 +158,11 @@ void DGUSDisplay::WriteStringPGM(uint16_t addr, const void* data_ptr, uint8_t si
   }
 }
 
+void DGUSDisplay::ReadVersions() {
+  if (gui_version != 0 && os_version != 0) return;
+  Read(DGUS_VERSION, 1);
+}
+
 void DGUSDisplay::SwitchScreen(DGUS_Screen screen) {
   DEBUG_ECHOLNPGM("SwitchScreen ", (uint8_t)screen);
   const uint8_t command[] = { 0x5A, 0x01, 0x00, (uint8_t)screen };

commit 24d1d3eb5cc4e7415e77393d35e40fb4124bc672
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jan 12 09:47:22 2022 -0600

    💡 Misc. cleanup, comments

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
index 1d97902c71..c03f655fba 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
@@ -313,7 +313,7 @@ void DGUSDisplay::ProcessRx() {
           gcode.reset_stepper_timeout();
 
           if (!vp.size) {
-            DEBUG_ECHOLN();
+            DEBUG_EOL();
             vp.rx_handler(vp, nullptr);
 
             rx_datagram_state = DGUS_IDLE;
@@ -325,18 +325,15 @@ void DGUSDisplay::ProcessRx() {
             memset(buffer, 0, vp.size);
 
             for (uint8_t i = 0; i < dlen; i++) {
-              if (i >= vp.size) {
-                break;
-              }
+              if (i >= vp.size) break;
 
-              if (i + 1 < dlen && tmp[i + 3] == 0xFF && tmp[i + 4] == 0xFF) {
+              if (i + 1 < dlen && tmp[i + 3] == 0xFF && tmp[i + 4] == 0xFF)
                 break;
-              }
 
               buffer[i] = tmp[i + 3];
             }
 
-            DEBUG_ECHOLN();
+            DEBUG_EOL();
             vp.rx_handler(vp, buffer);
 
             rx_datagram_state = DGUS_IDLE;
@@ -349,7 +346,7 @@ void DGUSDisplay::ProcessRx() {
             break;
           }
 
-          DEBUG_ECHOLN();
+          DEBUG_EOL();
           vp.rx_handler(vp, &tmp[3]);
 
           rx_datagram_state = DGUS_IDLE;

commit 9d72cbf84b970e5060f8dceef7158b9ca8252856
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 15 15:07:47 2021 -0500

    💡 Update old gnu.org links

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
index 4fce364f81..1d97902c71 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit 754b31918a73cb08c322102be5d3926d2ac59c18
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 9 04:57:05 2021 -0500

    🎨 Fewer serial macros

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
index e82f63bce1..4fce364f81 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
@@ -159,7 +159,7 @@ void DGUSDisplay::WriteStringPGM(uint16_t addr, const void* data_ptr, uint8_t si
 }
 
 void DGUSDisplay::SwitchScreen(DGUS_Screen screen) {
-  DEBUG_ECHOLNPAIR("SwitchScreen ", (uint8_t)screen);
+  DEBUG_ECHOLNPGM("SwitchScreen ", (uint8_t)screen);
   const uint8_t command[] = { 0x5A, 0x01, 0x00, (uint8_t)screen };
   Write(0x84, command, sizeof(command));
 }
@@ -167,13 +167,13 @@ void DGUSDisplay::SwitchScreen(DGUS_Screen screen) {
 void DGUSDisplay::PlaySound(uint8_t start, uint8_t len, uint8_t volume) {
   if (volume == 0) volume = DGUSDisplay::volume;
   if (volume == 0) return;
-  DEBUG_ECHOLNPAIR("PlaySound ", start, ":", len, "\nVolume ", volume);
+  DEBUG_ECHOLNPGM("PlaySound ", start, ":", len, "\nVolume ", volume);
   const uint8_t command[] = { start, len, volume, 0x00 };
   Write(0xA0, command, sizeof(command));
 }
 
 void DGUSDisplay::EnableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_Control control) {
-  DEBUG_ECHOLNPAIR("EnableControl ", (uint8_t)control, "\nScreen ", (uint8_t)screen, "\nType ", (uint8_t)type);
+  DEBUG_ECHOLNPGM("EnableControl ", (uint8_t)control, "\nScreen ", (uint8_t)screen, "\nType ", (uint8_t)type);
 
   const uint8_t command[] = { 0x5A, 0xA5, 0x00, (uint8_t)screen, (uint8_t)control, type, 0x00, 0x01 };
   Write(0xB0, command, sizeof(command));
@@ -183,7 +183,7 @@ void DGUSDisplay::EnableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_
 }
 
 void DGUSDisplay::DisableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_Control control) {
-  DEBUG_ECHOLNPAIR("DisableControl ", (uint8_t)control, "\nScreen ", (uint8_t)screen, "\nType ", (uint8_t)type);
+  DEBUG_ECHOLNPGM("DisableControl ", (uint8_t)control, "\nScreen ", (uint8_t)screen, "\nType ", (uint8_t)type);
 
   const uint8_t command[] = { 0x5A, 0xA5, 0x00, (uint8_t)screen, (uint8_t)control, type, 0x00, 0x00 };
   Write(0xB0, command, sizeof(command));
@@ -203,14 +203,14 @@ uint8_t DGUSDisplay::GetVolume() {
 void DGUSDisplay::SetBrightness(uint8_t new_brightness) {
   brightness = constrain(new_brightness, 0, 100);
   new_brightness = map_precise(brightness, 0, 100, 5, 100);
-  DEBUG_ECHOLNPAIR("SetBrightness ", new_brightness);
+  DEBUG_ECHOLNPGM("SetBrightness ", new_brightness);
   const uint8_t command[] = { new_brightness, new_brightness };
   Write(0x82, command, sizeof(command));
 }
 
 void DGUSDisplay::SetVolume(uint8_t new_volume) {
   volume = map_precise(constrain(new_volume, 0, 100), 0, 100, 0, 255);
-  DEBUG_ECHOLNPAIR("SetVolume ", volume);
+  DEBUG_ECHOLNPGM("SetVolume ", volume);
   const uint8_t command[] = { volume, 0x00 };
   Write(0xA1, command, sizeof(command));
 }
@@ -234,19 +234,19 @@ void DGUSDisplay::ProcessRx() {
 
       case DGUS_IDLE: // Waiting for the first header byte
         receivedbyte = LCD_SERIAL.read();
-        DEBUG_ECHOPAIR("< ", receivedbyte);
+        DEBUG_ECHOPGM("< ", receivedbyte);
         if (DGUS_HEADER1 == receivedbyte) rx_datagram_state = DGUS_HEADER1_SEEN;
         break;
 
       case DGUS_HEADER1_SEEN: // Waiting for the second header byte
         receivedbyte = LCD_SERIAL.read();
-        DEBUG_ECHOPAIR(" ", receivedbyte);
+        DEBUG_ECHOPGM(" ", receivedbyte);
         rx_datagram_state = (DGUS_HEADER2 == receivedbyte) ? DGUS_HEADER2_SEEN : DGUS_IDLE;
         break;
 
       case DGUS_HEADER2_SEEN: // Waiting for the length byte
         rx_datagram_len = LCD_SERIAL.read();
-        DEBUG_ECHOPAIR(" (", rx_datagram_len, ") ");
+        DEBUG_ECHOPGM(" (", rx_datagram_len, ") ");
 
         // Telegram min len is 3 (command and one word of payload)
         rx_datagram_state = WITHIN(rx_datagram_len, 3, DGUS_RX_BUFFER_SIZE) ? DGUS_WAIT_TELEGRAM : DGUS_IDLE;
@@ -258,7 +258,7 @@ void DGUSDisplay::ProcessRx() {
         initialized = true; // We've talked to it, so we defined it as initialized.
         uint8_t command = LCD_SERIAL.read();
 
-        DEBUG_ECHOPAIR("# ", command);
+        DEBUG_ECHOPGM("# ", command);
 
         uint8_t readlen = rx_datagram_len - 1;  // command is part of len.
         unsigned char tmp[rx_datagram_len - 1];
@@ -266,7 +266,7 @@ void DGUSDisplay::ProcessRx() {
 
         while (readlen--) {
           receivedbyte = LCD_SERIAL.read();
-          DEBUG_ECHOPAIR(" ", receivedbyte);
+          DEBUG_ECHOPGM(" ", receivedbyte);
           *ptmp++ = receivedbyte;
         }
         DEBUG_ECHOPGM(" # ");
@@ -287,7 +287,7 @@ void DGUSDisplay::ProcessRx() {
         if (command == DGUS_READVAR) {
           const uint16_t addr = tmp[0] << 8 | tmp[1];
           const uint8_t dlen = tmp[2] << 1;  // Convert to Bytes. (Display works with words)
-          DEBUG_ECHOPAIR("addr=", addr, " dlen=", dlen, "> ");
+          DEBUG_ECHOPGM("addr=", addr, " dlen=", dlen, "> ");
 
           if (addr == DGUS_VERSION && dlen == 2) {
             DEBUG_ECHOLNPGM("VERSIONS");
@@ -400,7 +400,7 @@ bool DGUS_PopulateVP(const DGUS_Addr addr, DGUS_VP * const buffer) {
       return true;
     }
   } while (++ret);
-  DEBUG_ECHOLNPAIR("VP not found: ", (uint16_t)addr);
+  DEBUG_ECHOLNPGM("VP not found: ", (uint16_t)addr);
   return false;
 }
 

commit b0e798330d8f5ade4a230e0a91f05482d100bb97
Author: mrv96 <mrv96@users.noreply.github.com>
Date:   Tue Sep 7 02:51:04 2021 +0200

    ✨Add DGUS_LCD_UI_RELOADED (#21931)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
new file mode 100644
index 0000000000..e82f63bce1
--- /dev/null
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.cpp
@@ -0,0 +1,407 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2021 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+/* DGUS implementation written by coldtobi in 2019 for Marlin */
+
+#include "../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(DGUS_LCD_UI_RELOADED)
+
+#include "DGUSDisplay.h"
+
+#include "config/DGUS_Addr.h"
+#include "config/DGUS_Constants.h"
+#include "definition/DGUS_VPList.h"
+
+#include "../ui_api.h"
+#include "../../../gcode/gcode.h"
+
+long map_precise(float x, long in_min, long in_max, long out_min, long out_max) {
+  return LROUND((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
+}
+
+uint8_t DGUSDisplay::gui_version = 0;
+uint8_t DGUSDisplay::os_version = 0;
+
+uint8_t DGUSDisplay::volume = 255;
+uint8_t DGUSDisplay::brightness = 100;
+
+DGUSDisplay::rx_datagram_state_t DGUSDisplay::rx_datagram_state = DGUS_IDLE;
+uint8_t DGUSDisplay::rx_datagram_len = 0;
+
+bool DGUSDisplay::initialized = false;
+
+void DGUSDisplay::Loop() {
+  ProcessRx();
+}
+
+void DGUSDisplay::Init() {
+  LCD_SERIAL.begin(LCD_BAUDRATE);
+
+  Read(DGUS_VERSION, 1);
+}
+
+void DGUSDisplay::Read(uint16_t addr, uint8_t size) {
+  WriteHeader(addr, DGUS_READVAR, size);
+
+  LCD_SERIAL.write(size);
+}
+
+void DGUSDisplay::Write(uint16_t addr, const void* data_ptr, uint8_t size) {
+  if (!data_ptr) return;
+
+  WriteHeader(addr, DGUS_WRITEVAR, size);
+
+  const char* data = static_cast<const char*>(data_ptr);
+
+  while (size--) {
+    LCD_SERIAL.write(*data++);
+  }
+}
+
+void DGUSDisplay::WriteString(uint16_t addr, const void* data_ptr, uint8_t size, bool left, bool right, bool use_space) {
+  if (!data_ptr) return;
+
+  WriteHeader(addr, DGUS_WRITEVAR, size);
+
+  const char* data = static_cast<const char*>(data_ptr);
+  size_t len = strlen(data);
+  uint8_t left_spaces = 0;
+  uint8_t right_spaces = 0;
+
+  if (len < size) {
+    if (!len) {
+      right_spaces = size;
+    }
+    else if ((left && right) || (!left && !right)) {
+      left_spaces = (size - len) / 2;
+      right_spaces = size - len - left_spaces;
+    }
+    else if (left) {
+      right_spaces = size - len;
+    }
+    else {
+      left_spaces = size - len;
+    }
+  }
+  else {
+    len = size;
+  }
+
+  while (left_spaces--) {
+    LCD_SERIAL.write(' ');
+  }
+  while (len--) {
+    LCD_SERIAL.write(*data++);
+  }
+  while (right_spaces--) {
+    LCD_SERIAL.write(use_space ? ' ' : '\0');
+  }
+}
+
+void DGUSDisplay::WriteStringPGM(uint16_t addr, const void* data_ptr, uint8_t size, bool left, bool right, bool use_space) {
+  if (!data_ptr) return;
+
+  WriteHeader(addr, DGUS_WRITEVAR, size);
+
+  const char* data = static_cast<const char*>(data_ptr);
+  size_t len = strlen_P(data);
+  uint8_t left_spaces = 0;
+  uint8_t right_spaces = 0;
+
+  if (len < size) {
+    if (!len) {
+      right_spaces = size;
+    }
+    else if ((left && right) || (!left && !right)) {
+      left_spaces = (size - len) / 2;
+      right_spaces = size - len - left_spaces;
+    }
+    else if (left) {
+      right_spaces = size - len;
+    }
+    else {
+      left_spaces = size - len;
+    }
+  }
+  else {
+    len = size;
+  }
+
+  while (left_spaces--) {
+    LCD_SERIAL.write(' ');
+  }
+  while (len--) {
+    LCD_SERIAL.write(pgm_read_byte(data++));
+  }
+  while (right_spaces--) {
+    LCD_SERIAL.write(use_space ? ' ' : '\0');
+  }
+}
+
+void DGUSDisplay::SwitchScreen(DGUS_Screen screen) {
+  DEBUG_ECHOLNPAIR("SwitchScreen ", (uint8_t)screen);
+  const uint8_t command[] = { 0x5A, 0x01, 0x00, (uint8_t)screen };
+  Write(0x84, command, sizeof(command));
+}
+
+void DGUSDisplay::PlaySound(uint8_t start, uint8_t len, uint8_t volume) {
+  if (volume == 0) volume = DGUSDisplay::volume;
+  if (volume == 0) return;
+  DEBUG_ECHOLNPAIR("PlaySound ", start, ":", len, "\nVolume ", volume);
+  const uint8_t command[] = { start, len, volume, 0x00 };
+  Write(0xA0, command, sizeof(command));
+}
+
+void DGUSDisplay::EnableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_Control control) {
+  DEBUG_ECHOLNPAIR("EnableControl ", (uint8_t)control, "\nScreen ", (uint8_t)screen, "\nType ", (uint8_t)type);
+
+  const uint8_t command[] = { 0x5A, 0xA5, 0x00, (uint8_t)screen, (uint8_t)control, type, 0x00, 0x01 };
+  Write(0xB0, command, sizeof(command));
+
+  FlushTx();
+  delay(50);
+}
+
+void DGUSDisplay::DisableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_Control control) {
+  DEBUG_ECHOLNPAIR("DisableControl ", (uint8_t)control, "\nScreen ", (uint8_t)screen, "\nType ", (uint8_t)type);
+
+  const uint8_t command[] = { 0x5A, 0xA5, 0x00, (uint8_t)screen, (uint8_t)control, type, 0x00, 0x00 };
+  Write(0xB0, command, sizeof(command));
+
+  FlushTx();
+  delay(50);
+}
+
+uint8_t DGUSDisplay::GetBrightness() {
+  return brightness;
+}
+
+uint8_t DGUSDisplay::GetVolume() {
+  return map_precise(volume, 0, 255, 0, 100);
+}
+
+void DGUSDisplay::SetBrightness(uint8_t new_brightness) {
+  brightness = constrain(new_brightness, 0, 100);
+  new_brightness = map_precise(brightness, 0, 100, 5, 100);
+  DEBUG_ECHOLNPAIR("SetBrightness ", new_brightness);
+  const uint8_t command[] = { new_brightness, new_brightness };
+  Write(0x82, command, sizeof(command));
+}
+
+void DGUSDisplay::SetVolume(uint8_t new_volume) {
+  volume = map_precise(constrain(new_volume, 0, 100), 0, 100, 0, 255);
+  DEBUG_ECHOLNPAIR("SetVolume ", volume);
+  const uint8_t command[] = { volume, 0x00 };
+  Write(0xA1, command, sizeof(command));
+}
+
+void DGUSDisplay::ProcessRx() {
+
+  #if ENABLED(LCD_SERIAL_STATS_RX_BUFFER_OVERRUNS)
+    if (!LCD_SERIAL.available() && LCD_SERIAL.buffer_overruns()) {
+      // Overrun, but reset the flag only when the buffer is empty
+      // We want to extract as many as valid datagrams possible...
+      DEBUG_ECHOPGM("OVFL");
+      rx_datagram_state = DGUS_IDLE;
+      //LCD_SERIAL.reset_rx_overun();
+      LCD_SERIAL.flush();
+    }
+  #endif
+
+  uint8_t receivedbyte;
+  while (LCD_SERIAL.available()) {
+    switch (rx_datagram_state) {
+
+      case DGUS_IDLE: // Waiting for the first header byte
+        receivedbyte = LCD_SERIAL.read();
+        DEBUG_ECHOPAIR("< ", receivedbyte);
+        if (DGUS_HEADER1 == receivedbyte) rx_datagram_state = DGUS_HEADER1_SEEN;
+        break;
+
+      case DGUS_HEADER1_SEEN: // Waiting for the second header byte
+        receivedbyte = LCD_SERIAL.read();
+        DEBUG_ECHOPAIR(" ", receivedbyte);
+        rx_datagram_state = (DGUS_HEADER2 == receivedbyte) ? DGUS_HEADER2_SEEN : DGUS_IDLE;
+        break;
+
+      case DGUS_HEADER2_SEEN: // Waiting for the length byte
+        rx_datagram_len = LCD_SERIAL.read();
+        DEBUG_ECHOPAIR(" (", rx_datagram_len, ") ");
+
+        // Telegram min len is 3 (command and one word of payload)
+        rx_datagram_state = WITHIN(rx_datagram_len, 3, DGUS_RX_BUFFER_SIZE) ? DGUS_WAIT_TELEGRAM : DGUS_IDLE;
+        break;
+
+      case DGUS_WAIT_TELEGRAM: // wait for complete datagram to arrive.
+        if (LCD_SERIAL.available() < rx_datagram_len) return;
+
+        initialized = true; // We've talked to it, so we defined it as initialized.
+        uint8_t command = LCD_SERIAL.read();
+
+        DEBUG_ECHOPAIR("# ", command);
+
+        uint8_t readlen = rx_datagram_len - 1;  // command is part of len.
+        unsigned char tmp[rx_datagram_len - 1];
+        unsigned char *ptmp = tmp;
+
+        while (readlen--) {
+          receivedbyte = LCD_SERIAL.read();
+          DEBUG_ECHOPAIR(" ", receivedbyte);
+          *ptmp++ = receivedbyte;
+        }
+        DEBUG_ECHOPGM(" # ");
+        // mostly we'll get this: 5A A5 03 82 4F 4B -- ACK on 0x82, so discard it.
+        if (command == DGUS_WRITEVAR && 'O' == tmp[0] && 'K' == tmp[1]) {
+          DEBUG_ECHOLNPGM(">");
+          rx_datagram_state = DGUS_IDLE;
+          break;
+        }
+
+        /* AutoUpload, (and answer to) Command 0x83 :
+        |      tmp[0  1  2  3  4 ... ]
+        | Example 5A A5 06 83 20 01 01 78 01 ……
+        |          / /  |  |   \ /   |  \     \
+        |        Header |  |    |    |   \_____\_ DATA (Words!)
+        |     DatagramLen  /  VPAdr  |
+        |           Command          DataLen (in Words) */
+        if (command == DGUS_READVAR) {
+          const uint16_t addr = tmp[0] << 8 | tmp[1];
+          const uint8_t dlen = tmp[2] << 1;  // Convert to Bytes. (Display works with words)
+          DEBUG_ECHOPAIR("addr=", addr, " dlen=", dlen, "> ");
+
+          if (addr == DGUS_VERSION && dlen == 2) {
+            DEBUG_ECHOLNPGM("VERSIONS");
+            gui_version = tmp[3];
+            os_version = tmp[4];
+            rx_datagram_state = DGUS_IDLE;
+            break;
+          }
+
+          DGUS_VP vp;
+          if (!DGUS_PopulateVP((DGUS_Addr)addr, &vp)) {
+            DEBUG_ECHOLNPGM("VP not found");
+            rx_datagram_state = DGUS_IDLE;
+            break;
+          }
+
+          if (!vp.rx_handler) {
+            DEBUG_ECHOLNPGM("VP found, no handler.");
+            rx_datagram_state = DGUS_IDLE;
+            break;
+          }
+
+          gcode.reset_stepper_timeout();
+
+          if (!vp.size) {
+            DEBUG_ECHOLN();
+            vp.rx_handler(vp, nullptr);
+
+            rx_datagram_state = DGUS_IDLE;
+            break;
+          }
+
+          if (vp.flags & VPFLAG_RXSTRING) {
+            unsigned char buffer[vp.size];
+            memset(buffer, 0, vp.size);
+
+            for (uint8_t i = 0; i < dlen; i++) {
+              if (i >= vp.size) {
+                break;
+              }
+
+              if (i + 1 < dlen && tmp[i + 3] == 0xFF && tmp[i + 4] == 0xFF) {
+                break;
+              }
+
+              buffer[i] = tmp[i + 3];
+            }
+
+            DEBUG_ECHOLN();
+            vp.rx_handler(vp, buffer);
+
+            rx_datagram_state = DGUS_IDLE;
+            break;
+          }
+
+          if (dlen != vp.size) {
+            DEBUG_ECHOLNPGM("VP found, size mismatch.");
+            rx_datagram_state = DGUS_IDLE;
+            break;
+          }
+
+          DEBUG_ECHOLN();
+          vp.rx_handler(vp, &tmp[3]);
+
+          rx_datagram_state = DGUS_IDLE;
+          break;
+        }
+
+        DEBUG_ECHOLNPGM(">");
+        rx_datagram_state = DGUS_IDLE;
+        break;
+    }
+  }
+}
+
+size_t DGUSDisplay::GetFreeTxBuffer() {
+  #ifdef LCD_SERIAL_GET_TX_BUFFER_FREE
+    return LCD_SERIAL_GET_TX_BUFFER_FREE();
+  #else
+    return SIZE_MAX;
+  #endif
+}
+
+void DGUSDisplay::FlushTx() {
+  #ifdef ARDUINO_ARCH_STM32
+    LCD_SERIAL.flush();
+  #else
+    LCD_SERIAL.flushTX();
+  #endif
+}
+
+void DGUSDisplay::WriteHeader(uint16_t addr, uint8_t command, uint8_t len) {
+  LCD_SERIAL.write(DGUS_HEADER1);
+  LCD_SERIAL.write(DGUS_HEADER2);
+  LCD_SERIAL.write(len + 3);
+  LCD_SERIAL.write(command);
+  LCD_SERIAL.write(addr >> 8);
+  LCD_SERIAL.write(addr & 0xFF);
+}
+
+bool DGUS_PopulateVP(const DGUS_Addr addr, DGUS_VP * const buffer) {
+  const DGUS_VP *ret = vp_list;
+
+  do {
+    const uint16_t *paddr = (uint16_t *)(&ret->addr);
+    const uint16_t addrcheck = pgm_read_word(paddr);
+    if (addrcheck == 0) break;
+    if ((DGUS_Addr)addrcheck == addr) {
+      memcpy_P(buffer, ret, sizeof(*ret));
+      return true;
+    }
+  } while (++ret);
+  DEBUG_ECHOLNPAIR("VP not found: ", (uint16_t)addr);
+  return false;
+}
+
+#endif // DGUS_LCD_UI_RELOADED
