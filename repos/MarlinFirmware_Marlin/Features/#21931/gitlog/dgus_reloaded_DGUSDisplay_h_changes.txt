commit 22fc07d72ba08df8db9545da4286ccd2558ecf30
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 15:03:02 2023 -0500

    üßë‚Äçüíª ExtUI::onPlayTone optional duration

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
index 7c27162ce6..63830ddee5 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
@@ -74,7 +74,7 @@ public:
     write(addr, static_cast<const void*>(&data), sizeof(T));
   }
 
-  // Until now I did not need to actively read from the display. That's why there is no ReadVariable
+  // Until now I did not need to actively read from the display. That's why there is no readVariable
   // (I extensively use the auto upload of the display)
 
   // Read GUI and OS version from screen

commit 86c811660ebf0b3fcbae2f34273d4c9d0c22abc4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:30:34 2023 -0500

    üßë‚Äçüíª Remove LOOP macros (#25917)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
index 88fed7a3b8..7c27162ce6 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
@@ -124,7 +124,7 @@ public:
     } src, dst;
 
     src.val = value;
-    LOOP_L_N(i, sizeof(T)) dst.byte[i] = src.byte[sizeof(T) - i - 1];
+    for (uint8_t i = 0; i < sizeof(T); ++i) dst.byte[i] = src.byte[sizeof(T) - i - 1];
     return dst.val;
   }
 

commit bc385122e94d7eda79bdf1573a7c2071c4589da2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 13:34:13 2023 -0500

    üé® Lowercase method / data member names (#25914)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
index bfea5780a1..88fed7a3b8 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
@@ -26,7 +26,7 @@
  * Updated for STM32G0B1RE by Protomosh in 2022.
  */
 
-#include "config/DGUS_Screen.h"
+#include "config/DGUS_ScreenID.h"
 #include "config/DGUS_Control.h"
 #include "definition/DGUS_VP.h"
 
@@ -58,58 +58,58 @@ public:
 
   DGUSDisplay() = default;
 
-  static void Init();
+  static void init();
 
-  static void Read(uint16_t addr, uint8_t size);
-  static void Write(uint16_t addr, const void* data_ptr, uint8_t size);
+  static void read(uint16_t addr, uint8_t size);
+  static void write(uint16_t addr, const void* data_ptr, uint8_t size);
 
-  static void WriteString(uint16_t addr, const void* data_ptr, uint8_t size, bool left=true, bool right=false, bool use_space=true);
-  static void WriteStringPGM(uint16_t addr, const void* data_ptr, uint8_t size, bool left=true, bool right=false, bool use_space=true);
-  static void WriteString(uint16_t addr, FSTR_P const fstr, uint8_t size, bool left=true, bool right=false, bool use_space=true) {
-    WriteStringPGM(addr, FTOP(fstr), size, left, right, use_space);
+  static void writeString(uint16_t addr, const void* data_ptr, uint8_t size, bool left=true, bool right=false, bool use_space=true);
+  static void writeStringPGM(uint16_t addr, const void* data_ptr, uint8_t size, bool left=true, bool right=false, bool use_space=true);
+  static void writeString(uint16_t addr, FSTR_P const fstr, uint8_t size, bool left=true, bool right=false, bool use_space=true) {
+    writeStringPGM(addr, FTOP(fstr), size, left, right, use_space);
   }
 
   template<typename T>
-  static void Write(uint16_t addr, T data) {
-    Write(addr, static_cast<const void*>(&data), sizeof(T));
+  static void write(uint16_t addr, T data) {
+    write(addr, static_cast<const void*>(&data), sizeof(T));
   }
 
   // Until now I did not need to actively read from the display. That's why there is no ReadVariable
   // (I extensively use the auto upload of the display)
 
   // Read GUI and OS version from screen
-  static void ReadVersions();
+  static void readVersions();
 
   // Force display into another screen.
-  static void SwitchScreen(DGUS_Screen screen);
+  static void switchScreen(const DGUS_ScreenID screenID);
   // Play sounds using the display speaker.
   //   start: position at which the sound was stored on the display.
   //   len: how many sounds to play. Sounds will play consecutively from start to start+len-1.
   //   volume: playback volume. 0 keeps the current volume.
-  static void PlaySound(uint8_t start, uint8_t len=1, uint8_t volume=0);
+  static void playSound(uint8_t start, uint8_t len=1, uint8_t volume=0);
   // Enable/disable a specific touch control.
   //   type: control type.
   //   control: index of the control on the page (set during screen development).
-  static void EnableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_Control control);
-  static void DisableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_Control control);
+  static void enableControl(const DGUS_ScreenID screenID, DGUS_ControlType type, DGUS_Control control);
+  static void disableControl(const DGUS_ScreenID screenID, DGUS_ControlType type, DGUS_Control control);
 
-  static uint8_t GetBrightness();
-  static uint8_t GetVolume();
+  static uint8_t getBrightness();
+  static uint8_t getVolume();
 
   // Set the display brightness/volume, ranging 0 - 100
-  static void SetBrightness(uint8_t brightness);
-  static void SetVolume(uint8_t volume);
+  static void setBrightness(uint8_t brightness);
+  static void setVolume(uint8_t volume);
 
   // Periodic tasks, eg. Rx-Queue handling.
-  static void Loop();
+  static void loop();
 
   // Helper for users of this class to estimate if an interaction would be blocking.
-  static size_t GetFreeTxBuffer();
-  static void FlushTx();
+  static size_t getFreeTxBuffer();
+  static void flushTx();
 
   // Checks two things: Can we confirm the presence of the display and has we initialized it.
   // (both boils down that the display answered to our chatting)
-  static bool IsInitialized() {
+  static bool isInitialized() {
     return initialized;
   }
 
@@ -117,7 +117,7 @@ public:
   static uint8_t os_version;
 
   template<typename T>
-  static T SwapBytes(const T value) {
+  static T swapBytes(const T value) {
     union {
       T val;
       char byte[sizeof(T)];
@@ -129,12 +129,12 @@ public:
   }
 
   template<typename T_in, typename T_out, uint8_t decimals>
-  T_out FromFixedPoint(const T_in value) {
+  T_out fromFixedPoint(const T_in value) {
     return (T_out)((float)value / POW(10, decimals));
   }
 
   template<typename T_in, typename T_out, uint8_t decimals>
-  T_out ToFixedPoint(const T_in value) {
+  T_out toFixedPoint(const T_in value) {
     return (T_out)LROUND((float)value * POW(10, decimals));
   }
 
@@ -160,8 +160,8 @@ private:
     DGUS_VERSION = 0x000F // OS/GUI version
   };
 
-  static void WriteHeader(uint16_t addr, uint8_t command, uint8_t len);
-  static void ProcessRx();
+  static void writeHeader(uint16_t addr, uint8_t command, uint8_t len);
+  static void processRx();
 
   static uint8_t volume;
   static uint8_t brightness;
@@ -172,11 +172,11 @@ private:
   static bool initialized;
 };
 
-template<> inline uint16_t DGUSDisplay::SwapBytes(const uint16_t value) {
+template<> inline uint16_t DGUSDisplay::swapBytes(const uint16_t value) {
   return ((value << 8) | (value >> 8));
 }
 
-extern DGUSDisplay dgus_display;
+extern DGUSDisplay dgus;
 
 /// Helper to populate a DGUS_VP for a given VP. Return false if not found.
-extern bool DGUS_PopulateVP(const DGUS_Addr addr, DGUS_VP * const buffer);
+extern bool populateVP(const DGUS_Addr addr, DGUS_VP * const buffer);

commit 4b9bb85b1266e8febbcb1931c8427d410a05bf84
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Mar 6 22:55:55 2023 -0600

    üîß Add DGUS_LCD_UI RELOADED conditions

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
index c4e3645f28..bfea5780a1 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
@@ -47,13 +47,13 @@ public:
 
   enum DGUS_ControlType : uint8_t {
     VARIABLE_DATA_INPUT = 0x00,
-    POPUP_WINDOW = 0x01,
-    INCREMENTAL_ADJUST = 0x02,
-    SLIDER_ADJUST = 0x03,
-    RTC_SETTINGS = 0x04,
-    RETURN_KEY_CODE = 0x05,
-    TEXT_INPUT = 0x06,
-    FIRMWARE_SETTINGS = 0x07
+    POPUP_WINDOW        = 0x01,
+    INCREMENTAL_ADJUST  = 0x02,
+    SLIDER_ADJUST       = 0x03,
+    RTC_SETTINGS        = 0x04,
+    RETURN_KEY_CODE     = 0x05,
+    TEXT_INPUT          = 0x06,
+    FIRMWARE_SETTINGS   = 0x07
   };
 
   DGUSDisplay() = default;
@@ -63,8 +63,11 @@ public:
   static void Read(uint16_t addr, uint8_t size);
   static void Write(uint16_t addr, const void* data_ptr, uint8_t size);
 
-  static void WriteString(uint16_t addr, const void* data_ptr, uint8_t size, bool left = true, bool right = false, bool use_space = true);
-  static void WriteStringPGM(uint16_t addr, const void* data_ptr, uint8_t size, bool left = true, bool right = false, bool use_space = true);
+  static void WriteString(uint16_t addr, const void* data_ptr, uint8_t size, bool left=true, bool right=false, bool use_space=true);
+  static void WriteStringPGM(uint16_t addr, const void* data_ptr, uint8_t size, bool left=true, bool right=false, bool use_space=true);
+  static void WriteString(uint16_t addr, FSTR_P const fstr, uint8_t size, bool left=true, bool right=false, bool use_space=true) {
+    WriteStringPGM(addr, FTOP(fstr), size, left, right, use_space);
+  }
 
   template<typename T>
   static void Write(uint16_t addr, T data) {
@@ -83,7 +86,7 @@ public:
   //   start: position at which the sound was stored on the display.
   //   len: how many sounds to play. Sounds will play consecutively from start to start+len-1.
   //   volume: playback volume. 0 keeps the current volume.
-  static void PlaySound(uint8_t start, uint8_t len = 1, uint8_t volume = 0);
+  static void PlaySound(uint8_t start, uint8_t len=1, uint8_t volume=0);
   // Enable/disable a specific touch control.
   //   type: control type.
   //   control: index of the control on the page (set during screen development).
@@ -154,7 +157,7 @@ private:
   };
 
   enum dgus_system_addr : uint16_t {
-    DGUS_VERSION = 0x000f // OS/GUI version
+    DGUS_VERSION = 0x000F // OS/GUI version
   };
 
   static void WriteHeader(uint16_t addr, uint8_t command, uint8_t len);

commit 2c6ed101c16f768f7084e8b3e7dda0f3bcf15a54
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Thu Sep 29 04:03:40 2022 +1300

    ü©π Disable DEBUG_DGUSLCD (#24798)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
index d115f7c02b..c4e3645f28 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
@@ -33,7 +33,7 @@
 #include "../../../inc/MarlinConfigPre.h"
 #include "../../../MarlinCore.h"
 
-#define DEBUG_DGUSLCD // Uncomment for debug messages
+//#define DEBUG_DGUSLCD // Uncomment for debug messages
 #define DEBUG_OUT ENABLED(DEBUG_DGUSLCD)
 #include "../../../core/debug_out.h"
 

commit 4ae9bf3b9d8c8f1c0be723e4ce163492b267fc87
Author: Protomosh <43253582+Protomosh@users.noreply.github.com>
Date:   Fri Aug 19 20:57:27 2022 +0300

    üêõ Fix DGUS Reloaded + STM32 (#24600)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
index fa5bf30396..d115f7c02b 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
@@ -21,7 +21,10 @@
  */
 #pragma once
 
-/* DGUS implementation written by coldtobi in 2019 for Marlin */
+/**
+ * DGUS implementation written by coldtobi in 2019.
+ * Updated for STM32G0B1RE by Protomosh in 2022.
+ */
 
 #include "config/DGUS_Screen.h"
 #include "config/DGUS_Control.h"
@@ -30,11 +33,13 @@
 #include "../../../inc/MarlinConfigPre.h"
 #include "../../../MarlinCore.h"
 
+#define DEBUG_DGUSLCD // Uncomment for debug messages
 #define DEBUG_OUT ENABLED(DEBUG_DGUSLCD)
 #include "../../../core/debug_out.h"
 
-#define Swap16(val) ((uint16_t)(((uint16_t)(val) >> 8) |\
-                                ((uint16_t)(val) << 8)))
+// New endianness swap for 32bit mcu (tested with STM32G0B1RE)
+#define BE16_P(V) ( ((uint8_t*)(V))[0] << 8U | ((uint8_t*)(V))[1] )
+#define BE32_P(V) ( ((uint8_t*)(V))[0] << 24U | ((uint8_t*)(V))[1] << 16U | ((uint8_t*)(V))[2] << 8U | ((uint8_t*)(V))[3] )
 
 // Low-Level access to the display.
 class DGUSDisplay {

commit 8badf2d71ff52e0952bb98df25bb8fcb25eda9da
Author: Lars <lars.moesman@gmail.com>
Date:   Tue Jan 25 10:30:45 2022 +0100

    üêõ Fix DGUS_Reloaded G-code execution (#23592)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
index 332108d81a..fa5bf30396 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
@@ -69,6 +69,9 @@ public:
   // Until now I did not need to actively read from the display. That's why there is no ReadVariable
   // (I extensively use the auto upload of the display)
 
+  // Read GUI and OS version from screen
+  static void ReadVersions();
+
   // Force display into another screen.
   static void SwitchScreen(DGUS_Screen screen);
   // Play sounds using the display speaker.

commit 6fb2d8a25f096d084348a6f6930f515d947474d4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Dec 28 02:57:24 2021 -0600

    üßë‚Äçüíª Remove extraneous 'inline' hints

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
index 265e2fe584..332108d81a 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
@@ -98,7 +98,7 @@ public:
 
   // Checks two things: Can we confirm the presence of the display and has we initialized it.
   // (both boils down that the display answered to our chatting)
-  static inline bool IsInitialized() {
+  static bool IsInitialized() {
     return initialized;
   }
 

commit b7be62ad36d9d2e8bc4d0718b8cba94321267077
Author: luzpaz <luzpaz@users.noreply.github.com>
Date:   Wed Nov 17 12:09:01 2021 -0500

    üé® Fix misspelling (#23137)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
index 1869f79404..265e2fe584 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
@@ -96,7 +96,7 @@ public:
   static size_t GetFreeTxBuffer();
   static void FlushTx();
 
-  // Checks two things: Can we confirm the presence of the display and has we initiliazed it.
+  // Checks two things: Can we confirm the presence of the display and has we initialized it.
   // (both boils down that the display answered to our chatting)
   static inline bool IsInitialized() {
     return initialized;

commit 9d72cbf84b970e5060f8dceef7158b9ca8252856
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 15 15:07:47 2021 -0500

    üí° Update old gnu.org links

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
index 2a679648d1..1869f79404 100644
--- a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once

commit b0e798330d8f5ade4a230e0a91f05482d100bb97
Author: mrv96 <mrv96@users.noreply.github.com>
Date:   Tue Sep 7 02:51:04 2021 +0200

    ‚ú®Add DGUS_LCD_UI_RELOADED (#21931)

diff --git a/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
new file mode 100644
index 0000000000..2a679648d1
--- /dev/null
+++ b/Marlin/src/lcd/extui/dgus_reloaded/DGUSDisplay.h
@@ -0,0 +1,171 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2021 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+/* DGUS implementation written by coldtobi in 2019 for Marlin */
+
+#include "config/DGUS_Screen.h"
+#include "config/DGUS_Control.h"
+#include "definition/DGUS_VP.h"
+
+#include "../../../inc/MarlinConfigPre.h"
+#include "../../../MarlinCore.h"
+
+#define DEBUG_OUT ENABLED(DEBUG_DGUSLCD)
+#include "../../../core/debug_out.h"
+
+#define Swap16(val) ((uint16_t)(((uint16_t)(val) >> 8) |\
+                                ((uint16_t)(val) << 8)))
+
+// Low-Level access to the display.
+class DGUSDisplay {
+public:
+
+  enum DGUS_ControlType : uint8_t {
+    VARIABLE_DATA_INPUT = 0x00,
+    POPUP_WINDOW = 0x01,
+    INCREMENTAL_ADJUST = 0x02,
+    SLIDER_ADJUST = 0x03,
+    RTC_SETTINGS = 0x04,
+    RETURN_KEY_CODE = 0x05,
+    TEXT_INPUT = 0x06,
+    FIRMWARE_SETTINGS = 0x07
+  };
+
+  DGUSDisplay() = default;
+
+  static void Init();
+
+  static void Read(uint16_t addr, uint8_t size);
+  static void Write(uint16_t addr, const void* data_ptr, uint8_t size);
+
+  static void WriteString(uint16_t addr, const void* data_ptr, uint8_t size, bool left = true, bool right = false, bool use_space = true);
+  static void WriteStringPGM(uint16_t addr, const void* data_ptr, uint8_t size, bool left = true, bool right = false, bool use_space = true);
+
+  template<typename T>
+  static void Write(uint16_t addr, T data) {
+    Write(addr, static_cast<const void*>(&data), sizeof(T));
+  }
+
+  // Until now I did not need to actively read from the display. That's why there is no ReadVariable
+  // (I extensively use the auto upload of the display)
+
+  // Force display into another screen.
+  static void SwitchScreen(DGUS_Screen screen);
+  // Play sounds using the display speaker.
+  //   start: position at which the sound was stored on the display.
+  //   len: how many sounds to play. Sounds will play consecutively from start to start+len-1.
+  //   volume: playback volume. 0 keeps the current volume.
+  static void PlaySound(uint8_t start, uint8_t len = 1, uint8_t volume = 0);
+  // Enable/disable a specific touch control.
+  //   type: control type.
+  //   control: index of the control on the page (set during screen development).
+  static void EnableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_Control control);
+  static void DisableControl(DGUS_Screen screen, DGUS_ControlType type, DGUS_Control control);
+
+  static uint8_t GetBrightness();
+  static uint8_t GetVolume();
+
+  // Set the display brightness/volume, ranging 0 - 100
+  static void SetBrightness(uint8_t brightness);
+  static void SetVolume(uint8_t volume);
+
+  // Periodic tasks, eg. Rx-Queue handling.
+  static void Loop();
+
+  // Helper for users of this class to estimate if an interaction would be blocking.
+  static size_t GetFreeTxBuffer();
+  static void FlushTx();
+
+  // Checks two things: Can we confirm the presence of the display and has we initiliazed it.
+  // (both boils down that the display answered to our chatting)
+  static inline bool IsInitialized() {
+    return initialized;
+  }
+
+  static uint8_t gui_version;
+  static uint8_t os_version;
+
+  template<typename T>
+  static T SwapBytes(const T value) {
+    union {
+      T val;
+      char byte[sizeof(T)];
+    } src, dst;
+
+    src.val = value;
+    LOOP_L_N(i, sizeof(T)) dst.byte[i] = src.byte[sizeof(T) - i - 1];
+    return dst.val;
+  }
+
+  template<typename T_in, typename T_out, uint8_t decimals>
+  T_out FromFixedPoint(const T_in value) {
+    return (T_out)((float)value / POW(10, decimals));
+  }
+
+  template<typename T_in, typename T_out, uint8_t decimals>
+  T_out ToFixedPoint(const T_in value) {
+    return (T_out)LROUND((float)value * POW(10, decimals));
+  }
+
+private:
+  enum dgus_header : uint8_t {
+    DGUS_HEADER1 = 0x5A,
+    DGUS_HEADER2 = 0xA5
+  };
+
+  enum dgus_command : uint8_t {
+    DGUS_WRITEVAR = 0x82,
+    DGUS_READVAR = 0x83
+  };
+
+  enum rx_datagram_state_t : uint8_t {
+    DGUS_IDLE,           //< waiting for DGUS_HEADER1.
+    DGUS_HEADER1_SEEN,   //< DGUS_HEADER1 received
+    DGUS_HEADER2_SEEN,   //< DGUS_HEADER2 received
+    DGUS_WAIT_TELEGRAM,  //< LEN received, Waiting for to receive all bytes.
+  };
+
+  enum dgus_system_addr : uint16_t {
+    DGUS_VERSION = 0x000f // OS/GUI version
+  };
+
+  static void WriteHeader(uint16_t addr, uint8_t command, uint8_t len);
+  static void ProcessRx();
+
+  static uint8_t volume;
+  static uint8_t brightness;
+
+  static rx_datagram_state_t rx_datagram_state;
+  static uint8_t rx_datagram_len;
+
+  static bool initialized;
+};
+
+template<> inline uint16_t DGUSDisplay::SwapBytes(const uint16_t value) {
+  return ((value << 8) | (value >> 8));
+}
+
+extern DGUSDisplay dgus_display;
+
+/// Helper to populate a DGUS_VP for a given VP. Return false if not found.
+extern bool DGUS_PopulateVP(const DGUS_Addr addr, DGUS_VP * const buffer);
