commit b082f1a2b882a827cb614f4c020787f6ffce2449
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sat Oct 28 11:15:23 2023 +1300

    ⚡️ Faster COMPACT_MARLIN_BOOT_LOGO (rle16) (#26153)

diff --git a/Marlin/src/lcd/tft/canvas.cpp b/Marlin/src/lcd/tft/canvas.cpp
index 4bded72251..2486179ce3 100644
--- a/Marlin/src/lcd/tft/canvas.cpp
+++ b/Marlin/src/lcd/tft/canvas.cpp
@@ -129,6 +129,13 @@ void Canvas::addImage(int16_t x, int16_t y, MarlinImage image, uint16_t *colors)
   }
 
   #if ENABLED(COMPACT_MARLIN_BOOT_LOGO)
+
+    static struct {
+      bool has_rle_state = false;
+      int16_t dstx, dsty, srcx, srcy;
+      uint32_t rle_offset;
+    } rle_state;
+
     // RLE16 HIGHCOLOR - 16 bits per pixel
     if (color_mode == RLE16) {
       uint8_t *bytedata = (uint8_t *)images[image].data;
@@ -139,8 +146,25 @@ void Canvas::addImage(int16_t x, int16_t y, MarlinImage image, uint16_t *colors)
               dsty = y, dstx = x;                   // Destination line / column index
 
       uint16_t color = 0;                           // Persist the last fetched color value
+      if (rle_state.has_rle_state) {                // do we have RLE position data?
+        rle_state.has_rle_state = false;            // invalidate stored RLE state
+        dstx = rle_state.dstx;                      // restore required states
+        dsty = rle_state.dsty;
+        srcx = rle_state.srcx;
+        srcy = rle_state.srcy;
+        bytedata = (uint8_t *)images[image].data + rle_state.rle_offset;  // Restart decode from here instead of the start of data
+      }
+
       bool done = false;
       while (!done) {
+        if (dsty >= endLine - 1 || srcy >= image_height - 1) { // Store state?
+          rle_state.dstx = dstx;                    // Save required states
+          rle_state.dsty = dsty;
+          rle_state.srcx = srcx;
+          rle_state.srcy = srcy;
+          rle_state.rle_offset = bytedata - (uint8_t *)images[image].data;; // Keep these for skipping full RLE decode on future iteratons
+        }
+
         uint8_t count = *bytedata++;                // Get the count byte
         const bool uniq = bool(count & 0x80);       // >= 128 is a distinct run; < 128 is a repeat run
         count = (count & 0x7F) + 1;                 // Actual count is 7-bit plus 1
@@ -169,6 +193,7 @@ void Canvas::addImage(int16_t x, int16_t y, MarlinImage image, uint16_t *colors)
             srcx = 0; dstx = x;                     // May be shifted within the canvas, but usually not
             if (dsty >= endLine || srcy >= image_height) { // Done with the segment or the image?
               done = true;                          // Set a flag to end the loop...
+              rle_state.has_rle_state = true;       // RLE state is stored
               break;                                // ...and break out of while(count--)
             }
           }

commit 5bcaae62f2c7965ee7f99eb44a44022f1cbad959
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Mon Jul 24 15:31:39 2023 +1200

    ⚡️ Compact RGB565 TFT boot images (#26011)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/tft/canvas.cpp b/Marlin/src/lcd/tft/canvas.cpp
index 4a056524a2..4bded72251 100644
--- a/Marlin/src/lcd/tft/canvas.cpp
+++ b/Marlin/src/lcd/tft/canvas.cpp
@@ -37,12 +37,14 @@ void Canvas::instantiate(uint16_t x, uint16_t y, uint16_t width, uint16_t height
   startLine = 0;
   endLine = 0;
 
+  // The TFT handles DMA within the given canvas rectangle
+  // so whatever is drawn will be offset on the screen by x,y.
   tft.set_window(x, y, x + width - 1, y + height - 1);
 }
 
 void Canvas::next() {
   startLine = endLine;
-  endLine = TFT_BUFFER_SIZE < width * (height - startLine) ? startLine + TFT_BUFFER_SIZE / width : height;
+  endLine = (TFT_BUFFER_WORDS) < width * (height - startLine) ? startLine + (TFT_BUFFER_WORDS) / width : height;
 }
 
 bool Canvas::toScreen() {
@@ -99,28 +101,84 @@ void Canvas::addImage(int16_t x, int16_t y, MarlinImage image, uint16_t *colors)
   uint16_t *data = (uint16_t *)images[image].data;
   if (!data) return;
 
-  uint16_t image_width = images[image].width,
-           image_height = images[image].height;
+  const uint16_t image_width = images[image].width,
+                image_height = images[image].height;
   colorMode_t color_mode = images[image].colorMode;
 
-  if (color_mode != HIGHCOLOR)
-    return addImage(x, y, image_width, image_height, color_mode, (uint8_t *)data, colors);
-
-  // HIGHCOLOR - 16 bits per pixel
-
-  for (int16_t i = 0; i < image_height; i++) {
-    int16_t line = y + i;
-    if (line >= startLine && line < endLine) {
-      uint16_t *pixel = buffer + x + (line - startLine) * width;
-      for (int16_t j = 0; j < image_width; j++) {
-        if ((x + j >= 0) && (x + j < width)) *pixel = ENDIAN_COLOR(*data);
-        pixel++;
-        data++;
+  if (color_mode == HIGHCOLOR) {
+    // HIGHCOLOR - 16 bits per pixel
+    int16_t line = y;
+    for (int16_t i = 0; i < image_height; i++, line++) {
+      if (WITHIN(line, startLine, endLine - 1)) {
+        uint16_t *pixel = buffer + x + (line - startLine) * width;
+        uint16_t cx = x;
+        for (int16_t j = 0; j < image_width; j++, cx++) {
+          if (WITHIN(cx, 0, width - 1)) {
+            uint16_t color = ENDIAN_COLOR(*data);
+            if (color == 0x0001) color = COLOR_BACKGROUND;
+            *pixel = color;
+          }
+          pixel++;
+          data++;
+        }
       }
+      else
+        data += image_width;
     }
-    else
-      data += image_width;
+    return;
   }
+
+  #if ENABLED(COMPACT_MARLIN_BOOT_LOGO)
+    // RLE16 HIGHCOLOR - 16 bits per pixel
+    if (color_mode == RLE16) {
+      uint8_t *bytedata = (uint8_t *)images[image].data;
+      if (!bytedata) return;
+
+      // Loop through the image data advancing the row and column as needed
+      int16_t srcy = 0, srcx = 0,                   // Image data line / column index
+              dsty = y, dstx = x;                   // Destination line / column index
+
+      uint16_t color = 0;                           // Persist the last fetched color value
+      bool done = false;
+      while (!done) {
+        uint8_t count = *bytedata++;                // Get the count byte
+        const bool uniq = bool(count & 0x80);       // >= 128 is a distinct run; < 128 is a repeat run
+        count = (count & 0x7F) + 1;                 // Actual count is 7-bit plus 1
+
+        bool getcol = true;                         // Get at least one color word
+        while (count--) {                           // Emit 'count' pixels
+
+          if (getcol) {
+            getcol = uniq;                          // Keep getting colors if not RLE
+            const uint16_t msb = *bytedata++,       // Color most-significant bits
+                           lsb = *bytedata++;       // Color least-significant bits
+            color = ENDIAN_COLOR((msb << 8) | lsb); // Color with proper endianness
+            if (color == 0x0001) color = COLOR_BACKGROUND; // 0x0001 is "transparent"
+          }
+
+          if (WITHIN(dsty, startLine, endLine - 1)) { // Dest pixel Y within the segment?
+            if (WITHIN(dstx, 0, width - 1)) {       // Dest pixel X within the canvas?
+              uint16_t * const pixel = buffer + dstx + (dsty - startLine) * width;
+              *pixel = color;                       // Store the color in the pixel
+            }
+          }
+
+          ++srcx; ++dstx;                           // Advance the pixel column
+          if (srcx >= image_width) {                // Past the right edge of the source image?
+            ++srcy; ++dsty;                         // Advance to the next line
+            srcx = 0; dstx = x;                     // May be shifted within the canvas, but usually not
+            if (dsty >= endLine || srcy >= image_height) { // Done with the segment or the image?
+              done = true;                          // Set a flag to end the loop...
+              break;                                // ...and break out of while(count--)
+            }
+          }
+        }
+      }
+      return;
+    }
+  #endif // COMPACT_MARLIN_BOOT_LOGO
+
+  addImage(x, y, image_width, image_height, color_mode, (uint8_t *)data, colors);
 }
 
 void Canvas::addImage(int16_t x, int16_t y, uint8_t image_width, uint8_t image_height, colorMode_t color_mode, uint8_t *data, uint16_t *colors) {
@@ -138,8 +196,8 @@ void Canvas::addImage(int16_t x, int16_t y, uint8_t image_width, uint8_t image_h
   colors--;
 
   for (int16_t i = 0; i < image_height; i++) {
-    int16_t line = y + i;
-    if (line >= startLine && line < endLine) {
+    const int16_t line = y + i;
+    if (WITHIN(line, startLine, endLine - 1)) {
       uint16_t *pixel = buffer + x + (line - startLine) * width;
       uint8_t offset = 8 - bitsPerPixel;
       for (int16_t j = 0; j < image_width; j++) {
@@ -147,7 +205,7 @@ void Canvas::addImage(int16_t x, int16_t y, uint8_t image_width, uint8_t image_h
           data++;
           offset = 8 - bitsPerPixel;
         }
-        if ((x + j >= 0) && (x + j < width)) {
+        if (WITHIN(x + j, 0, width - 1)) {
           const uint8_t color = ((*data) >> offset) & mask;
           if (color) *pixel = *(colors + color);
         }
@@ -165,8 +223,8 @@ void Canvas::addRect(uint16_t x, uint16_t y, uint16_t rectangleWidth, uint16_t r
   if (endLine < y || startLine > y + rectangleHeight) return;
 
   for (uint16_t i = 0; i < rectangleHeight; i++) {
-    uint16_t line = y + i;
-    if (line >= startLine && line < endLine) {
+    const uint16_t line = y + i;
+    if (WITHIN(line, startLine, endLine - 1)) {
       uint16_t *pixel = buffer + x + (line - startLine) * width;
       if (i == 0 || i == rectangleHeight - 1) {
         for (uint16_t j = 0; j < rectangleWidth; j++) *pixel++ = color;
@@ -184,8 +242,8 @@ void Canvas::addBar(uint16_t x, uint16_t y, uint16_t barWidth, uint16_t barHeigh
   if (endLine < y || startLine > y + barHeight) return;
 
   for (uint16_t i = 0; i < barHeight; i++) {
-    uint16_t line = y + i;
-    if (line >= startLine && line < endLine) {
+    const uint16_t line = y + i;
+    if (WITHIN(line, startLine, endLine - 1)) {
       uint16_t *pixel = buffer + x + (line - startLine) * width;
       for (uint16_t j = 0; j < barWidth; j++) *pixel++ = color;
     }

commit 1fbeac7b5255634bb5aca209a3d3dcb6b5e43193
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 23 00:15:54 2023 -0500

    🎨 Adjust TFT code/comments

diff --git a/Marlin/src/lcd/tft/canvas.cpp b/Marlin/src/lcd/tft/canvas.cpp
index 04817570e1..4a056524a2 100644
--- a/Marlin/src/lcd/tft/canvas.cpp
+++ b/Marlin/src/lcd/tft/canvas.cpp
@@ -96,12 +96,12 @@ void Canvas::addText(uint16_t x, uint16_t y, uint16_t color, uint16_t *string, u
 }
 
 void Canvas::addImage(int16_t x, int16_t y, MarlinImage image, uint16_t *colors) {
-  uint16_t *data = (uint16_t *)Images[image].data;
+  uint16_t *data = (uint16_t *)images[image].data;
   if (!data) return;
 
-  uint16_t image_width = Images[image].width,
-           image_height = Images[image].height;
-  colorMode_t color_mode = Images[image].colorMode;
+  uint16_t image_width = images[image].width,
+           image_height = images[image].height;
+  colorMode_t color_mode = images[image].colorMode;
 
   if (color_mode != HIGHCOLOR)
     return addImage(x, y, image_width, image_height, color_mode, (uint8_t *)data, colors);

commit c3694f1c038fa20ad749118b0a1c7aa88e3dd5f2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jun 14 17:24:50 2023 -0500

    🎨 Lowercase methods, functions, data members (#25939)
    
    For: TFT, DGUS, MarlinUI, Anycubic, JyersUI, CrealityUI

diff --git a/Marlin/src/lcd/tft/canvas.cpp b/Marlin/src/lcd/tft/canvas.cpp
index ac3a2d76c3..04817570e1 100644
--- a/Marlin/src/lcd/tft/canvas.cpp
+++ b/Marlin/src/lcd/tft/canvas.cpp
@@ -82,16 +82,16 @@ void Canvas::addText(uint16_t x, uint16_t y, uint16_t color, uint16_t *string, u
   }
   for (uint16_t i = 0 ; *(string + i) ; i++) {
     glyph_t *pGlyph = glyph(string + i);
-    if (stringWidth + pGlyph->BBXWidth > maxWidth) break;
+    if (stringWidth + pGlyph->bbxWidth > maxWidth) break;
     switch (getFontType()) {
       case FONT_MARLIN_GLYPHS_1BPP:
-        addImage(x + stringWidth + pGlyph->BBXOffsetX, y + getFontAscent() - pGlyph->BBXHeight - pGlyph->BBXOffsetY, pGlyph->BBXWidth, pGlyph->BBXHeight, GREYSCALE1, ((uint8_t *)pGlyph) + sizeof(glyph_t), &color);
+        addImage(x + stringWidth + pGlyph->bbxOffsetX, y + getFontAscent() - pGlyph->bbxHeight - pGlyph->bbxOffsetY, pGlyph->bbxWidth, pGlyph->bbxHeight, GREYSCALE1, ((uint8_t *)pGlyph) + sizeof(glyph_t), &color);
         break;
       case FONT_MARLIN_GLYPHS_2BPP:
-        addImage(x + stringWidth + pGlyph->BBXOffsetX, y + getFontAscent() - pGlyph->BBXHeight - pGlyph->BBXOffsetY, pGlyph->BBXWidth, pGlyph->BBXHeight, GREYSCALE2, ((uint8_t *)pGlyph) + sizeof(glyph_t), colors);
+        addImage(x + stringWidth + pGlyph->bbxOffsetX, y + getFontAscent() - pGlyph->bbxHeight - pGlyph->bbxOffsetY, pGlyph->bbxWidth, pGlyph->bbxHeight, GREYSCALE2, ((uint8_t *)pGlyph) + sizeof(glyph_t), colors);
         break;
     }
-    stringWidth += pGlyph->DWidth;
+    stringWidth += pGlyph->dWidth;
   }
 }
 

commit a6b56d171d855429d1f0249fcc1ffe64881994f4
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sat Jun 3 15:37:29 2023 +1200

    🎨 Lowercase followup (#25923)
    
    Followup to #25914

diff --git a/Marlin/src/lcd/tft/canvas.cpp b/Marlin/src/lcd/tft/canvas.cpp
index 0894f7afb9..ac3a2d76c3 100644
--- a/Marlin/src/lcd/tft/canvas.cpp
+++ b/Marlin/src/lcd/tft/canvas.cpp
@@ -85,10 +85,10 @@ void Canvas::addText(uint16_t x, uint16_t y, uint16_t color, uint16_t *string, u
     if (stringWidth + pGlyph->BBXWidth > maxWidth) break;
     switch (getFontType()) {
       case FONT_MARLIN_GLYPHS_1BPP:
-        addImage(x + stringWidth + pGlyph->BBXOffsetX, y + getFontAscent() - pGlyph->BBXHeight - pGlyph->BBXOffsetY, pGlyph->BBXWidth, pGlyph->BBXHeight, GREYSCALE1, ((uint8_t *)glyph) + sizeof(glyph_t), &color);
+        addImage(x + stringWidth + pGlyph->BBXOffsetX, y + getFontAscent() - pGlyph->BBXHeight - pGlyph->BBXOffsetY, pGlyph->BBXWidth, pGlyph->BBXHeight, GREYSCALE1, ((uint8_t *)pGlyph) + sizeof(glyph_t), &color);
         break;
       case FONT_MARLIN_GLYPHS_2BPP:
-        addImage(x + stringWidth + pGlyph->BBXOffsetX, y + getFontAscent() - pGlyph->BBXHeight - pGlyph->BBXOffsetY, pGlyph->BBXWidth, pGlyph->BBXHeight, GREYSCALE2, ((uint8_t *)glyph) + sizeof(glyph_t), colors);
+        addImage(x + stringWidth + pGlyph->BBXOffsetX, y + getFontAscent() - pGlyph->BBXHeight - pGlyph->BBXOffsetY, pGlyph->BBXWidth, pGlyph->BBXHeight, GREYSCALE2, ((uint8_t *)pGlyph) + sizeof(glyph_t), colors);
         break;
     }
     stringWidth += pGlyph->DWidth;

commit bc385122e94d7eda79bdf1573a7c2071c4589da2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 13:34:13 2023 -0500

    🎨 Lowercase method / data member names (#25914)

diff --git a/Marlin/src/lcd/tft/canvas.cpp b/Marlin/src/lcd/tft/canvas.cpp
index 3fb500e8e2..0894f7afb9 100644
--- a/Marlin/src/lcd/tft/canvas.cpp
+++ b/Marlin/src/lcd/tft/canvas.cpp
@@ -26,31 +26,31 @@
 
 #include "canvas.h"
 
-uint16_t CANVAS::width, CANVAS::height;
-uint16_t CANVAS::startLine, CANVAS::endLine;
-uint16_t CANVAS::background_color;
-uint16_t *CANVAS::buffer = TFT::buffer;
-
-void CANVAS::New(uint16_t x, uint16_t y, uint16_t width, uint16_t height) {
-  CANVAS::width = width;
-  CANVAS::height = height;
+uint16_t Canvas::width, Canvas::height;
+uint16_t Canvas::startLine, Canvas::endLine;
+uint16_t Canvas::background_color;
+uint16_t *Canvas::buffer = TFT::buffer;
+
+void Canvas::instantiate(uint16_t x, uint16_t y, uint16_t width, uint16_t height) {
+  Canvas::width = width;
+  Canvas::height = height;
   startLine = 0;
   endLine = 0;
 
   tft.set_window(x, y, x + width - 1, y + height - 1);
 }
 
-void CANVAS::Continue() {
+void Canvas::next() {
   startLine = endLine;
   endLine = TFT_BUFFER_SIZE < width * (height - startLine) ? startLine + TFT_BUFFER_SIZE / width : height;
 }
 
-bool CANVAS::ToScreen() {
+bool Canvas::toScreen() {
   tft.write_sequence(buffer, width * (endLine - startLine));
   return endLine == height;
 }
 
-void CANVAS::SetBackground(uint16_t color) {
+void Canvas::setBackground(uint16_t color) {
   /* TODO: test and optimize performance */
   /*
   uint32_t count = (endLine - startLine) * width;
@@ -67,35 +67,35 @@ void CANVAS::SetBackground(uint16_t color) {
 
 extern uint16_t gradient(uint16_t colorA, uint16_t colorB, uint16_t factor);
 
-void CANVAS::AddText(uint16_t x, uint16_t y, uint16_t color, uint16_t *string, uint16_t maxWidth) {
-  if (endLine < y || startLine > y + GetFontHeight()) return;
+void Canvas::addText(uint16_t x, uint16_t y, uint16_t color, uint16_t *string, uint16_t maxWidth) {
+  if (endLine < y || startLine > y + getFontHeight()) return;
 
   if (maxWidth == 0) maxWidth = width - x;
 
   uint16_t colors[16];
   uint16_t stringWidth = 0;
-  if (GetFontType() == FONT_MARLIN_GLYPHS_2BPP) {
+  if (getFontType() == FONT_MARLIN_GLYPHS_2BPP) {
     for (uint8_t i = 0; i < 3; i++) {
       colors[i] = gradient(ENDIAN_COLOR(color), ENDIAN_COLOR(background_color), ((i+1) << 8) / 3);
       colors[i] = ENDIAN_COLOR(colors[i]);
     }
   }
   for (uint16_t i = 0 ; *(string + i) ; i++) {
-    glyph_t *glyph = Glyph(string + i);
-    if (stringWidth + glyph->BBXWidth > maxWidth) break;
-    switch (GetFontType()) {
+    glyph_t *pGlyph = glyph(string + i);
+    if (stringWidth + pGlyph->BBXWidth > maxWidth) break;
+    switch (getFontType()) {
       case FONT_MARLIN_GLYPHS_1BPP:
-        AddImage(x + stringWidth + glyph->BBXOffsetX, y + GetFontAscent() - glyph->BBXHeight - glyph->BBXOffsetY, glyph->BBXWidth, glyph->BBXHeight, GREYSCALE1, ((uint8_t *)glyph) + sizeof(glyph_t), &color);
+        addImage(x + stringWidth + pGlyph->BBXOffsetX, y + getFontAscent() - pGlyph->BBXHeight - pGlyph->BBXOffsetY, pGlyph->BBXWidth, pGlyph->BBXHeight, GREYSCALE1, ((uint8_t *)glyph) + sizeof(glyph_t), &color);
         break;
       case FONT_MARLIN_GLYPHS_2BPP:
-        AddImage(x + stringWidth + glyph->BBXOffsetX, y + GetFontAscent() - glyph->BBXHeight - glyph->BBXOffsetY, glyph->BBXWidth, glyph->BBXHeight, GREYSCALE2, ((uint8_t *)glyph) + sizeof(glyph_t), colors);
+        addImage(x + stringWidth + pGlyph->BBXOffsetX, y + getFontAscent() - pGlyph->BBXHeight - pGlyph->BBXOffsetY, pGlyph->BBXWidth, pGlyph->BBXHeight, GREYSCALE2, ((uint8_t *)glyph) + sizeof(glyph_t), colors);
         break;
     }
-    stringWidth += glyph->DWidth;
+    stringWidth += pGlyph->DWidth;
   }
 }
 
-void CANVAS::AddImage(int16_t x, int16_t y, MarlinImage image, uint16_t *colors) {
+void Canvas::addImage(int16_t x, int16_t y, MarlinImage image, uint16_t *colors) {
   uint16_t *data = (uint16_t *)Images[image].data;
   if (!data) return;
 
@@ -104,7 +104,7 @@ void CANVAS::AddImage(int16_t x, int16_t y, MarlinImage image, uint16_t *colors)
   colorMode_t color_mode = Images[image].colorMode;
 
   if (color_mode != HIGHCOLOR)
-    return AddImage(x, y, image_width, image_height, color_mode, (uint8_t *)data, colors);
+    return addImage(x, y, image_width, image_height, color_mode, (uint8_t *)data, colors);
 
   // HIGHCOLOR - 16 bits per pixel
 
@@ -123,7 +123,7 @@ void CANVAS::AddImage(int16_t x, int16_t y, MarlinImage image, uint16_t *colors)
   }
 }
 
-void CANVAS::AddImage(int16_t x, int16_t y, uint8_t image_width, uint8_t image_height, colorMode_t color_mode, uint8_t *data, uint16_t *colors) {
+void Canvas::addImage(int16_t x, int16_t y, uint8_t image_width, uint8_t image_height, colorMode_t color_mode, uint8_t *data, uint16_t *colors) {
   uint8_t bitsPerPixel;
   switch (color_mode) {
     case GREYSCALE1: bitsPerPixel = 1; break;
@@ -161,7 +161,7 @@ void CANVAS::AddImage(int16_t x, int16_t y, uint8_t image_width, uint8_t image_h
   }
 }
 
-void CANVAS::AddRectangle(uint16_t x, uint16_t y, uint16_t rectangleWidth, uint16_t rectangleHeight, uint16_t color) {
+void Canvas::addRect(uint16_t x, uint16_t y, uint16_t rectangleWidth, uint16_t rectangleHeight, uint16_t color) {
   if (endLine < y || startLine > y + rectangleHeight) return;
 
   for (uint16_t i = 0; i < rectangleHeight; i++) {
@@ -180,7 +180,7 @@ void CANVAS::AddRectangle(uint16_t x, uint16_t y, uint16_t rectangleWidth, uint1
   }
 }
 
-void CANVAS::AddBar(uint16_t x, uint16_t y, uint16_t barWidth, uint16_t barHeight, uint16_t color) {
+void Canvas::addBar(uint16_t x, uint16_t y, uint16_t barWidth, uint16_t barHeight, uint16_t color) {
   if (endLine < y || startLine > y + barHeight) return;
 
   for (uint16_t i = 0; i < barHeight; i++) {
@@ -192,6 +192,6 @@ void CANVAS::AddBar(uint16_t x, uint16_t y, uint16_t barWidth, uint16_t barHeigh
   }
 }
 
-CANVAS Canvas;
+Canvas tftCanvas;
 
 #endif // HAS_GRAPHICAL_TFT

commit 3cd9599155aa46e4abcdfab8971e0afc27514a2b
Author: Alexander Gavrilenko <jmz52@users.noreply.github.com>
Date:   Thu Feb 9 06:12:26 2023 +0300

    🐛 Fix 8-bit FSMC AA font colors (#25285)

diff --git a/Marlin/src/lcd/tft/canvas.cpp b/Marlin/src/lcd/tft/canvas.cpp
index 64cb29ade6..3fb500e8e2 100644
--- a/Marlin/src/lcd/tft/canvas.cpp
+++ b/Marlin/src/lcd/tft/canvas.cpp
@@ -74,6 +74,12 @@ void CANVAS::AddText(uint16_t x, uint16_t y, uint16_t color, uint16_t *string, u
 
   uint16_t colors[16];
   uint16_t stringWidth = 0;
+  if (GetFontType() == FONT_MARLIN_GLYPHS_2BPP) {
+    for (uint8_t i = 0; i < 3; i++) {
+      colors[i] = gradient(ENDIAN_COLOR(color), ENDIAN_COLOR(background_color), ((i+1) << 8) / 3);
+      colors[i] = ENDIAN_COLOR(colors[i]);
+    }
+  }
   for (uint16_t i = 0 ; *(string + i) ; i++) {
     glyph_t *glyph = Glyph(string + i);
     if (stringWidth + glyph->BBXWidth > maxWidth) break;
@@ -82,8 +88,6 @@ void CANVAS::AddText(uint16_t x, uint16_t y, uint16_t color, uint16_t *string, u
         AddImage(x + stringWidth + glyph->BBXOffsetX, y + GetFontAscent() - glyph->BBXHeight - glyph->BBXOffsetY, glyph->BBXWidth, glyph->BBXHeight, GREYSCALE1, ((uint8_t *)glyph) + sizeof(glyph_t), &color);
         break;
       case FONT_MARLIN_GLYPHS_2BPP:
-        for (uint8_t i = 0; i < 3; i++)
-          colors[i] = gradient(color, background_color, ((i+1) << 8) / 3);
         AddImage(x + stringWidth + glyph->BBXOffsetX, y + GetFontAscent() - glyph->BBXHeight - glyph->BBXOffsetY, glyph->BBXWidth, glyph->BBXHeight, GREYSCALE2, ((uint8_t *)glyph) + sizeof(glyph_t), colors);
         break;
     }

commit fca1929beb6a5f7dd21d17bdefcbc97511869e27
Author: Alexander Gavrilenko <jmz52@users.noreply.github.com>
Date:   Sat Dec 31 08:44:55 2022 +0300

    ✨⚡️ UTF support for TFT Color UI (#25073)

diff --git a/Marlin/src/lcd/tft/canvas.cpp b/Marlin/src/lcd/tft/canvas.cpp
index e8b89bad70..64cb29ade6 100644
--- a/Marlin/src/lcd/tft/canvas.cpp
+++ b/Marlin/src/lcd/tft/canvas.cpp
@@ -28,6 +28,7 @@
 
 uint16_t CANVAS::width, CANVAS::height;
 uint16_t CANVAS::startLine, CANVAS::endLine;
+uint16_t CANVAS::background_color;
 uint16_t *CANVAS::buffer = TFT::buffer;
 
 void CANVAS::New(uint16_t x, uint16_t y, uint16_t width, uint16_t height) {
@@ -61,18 +62,31 @@ void CANVAS::SetBackground(uint16_t color) {
   uint32_t count = ((endLine - startLine) * width + 1) >> 1;
   uint32_t *pointer = (uint32_t *)buffer;
   while (count--) *pointer++ = two_pixels;
+  background_color = color;
 }
 
-void CANVAS::AddText(uint16_t x, uint16_t y, uint16_t color, uint8_t *string, uint16_t maxWidth) {
+extern uint16_t gradient(uint16_t colorA, uint16_t colorB, uint16_t factor);
+
+void CANVAS::AddText(uint16_t x, uint16_t y, uint16_t color, uint16_t *string, uint16_t maxWidth) {
   if (endLine < y || startLine > y + GetFontHeight()) return;
 
   if (maxWidth == 0) maxWidth = width - x;
 
+  uint16_t colors[16];
   uint16_t stringWidth = 0;
   for (uint16_t i = 0 ; *(string + i) ; i++) {
     glyph_t *glyph = Glyph(string + i);
     if (stringWidth + glyph->BBXWidth > maxWidth) break;
-    AddImage(x + stringWidth + glyph->BBXOffsetX, y + Font()->FontAscent - glyph->BBXHeight - glyph->BBXOffsetY, glyph->BBXWidth, glyph->BBXHeight, GREYSCALE1, ((uint8_t *)glyph) + sizeof(glyph_t), &color);
+    switch (GetFontType()) {
+      case FONT_MARLIN_GLYPHS_1BPP:
+        AddImage(x + stringWidth + glyph->BBXOffsetX, y + GetFontAscent() - glyph->BBXHeight - glyph->BBXOffsetY, glyph->BBXWidth, glyph->BBXHeight, GREYSCALE1, ((uint8_t *)glyph) + sizeof(glyph_t), &color);
+        break;
+      case FONT_MARLIN_GLYPHS_2BPP:
+        for (uint8_t i = 0; i < 3; i++)
+          colors[i] = gradient(color, background_color, ((i+1) << 8) / 3);
+        AddImage(x + stringWidth + glyph->BBXOffsetX, y + GetFontAscent() - glyph->BBXHeight - glyph->BBXOffsetY, glyph->BBXWidth, glyph->BBXHeight, GREYSCALE2, ((uint8_t *)glyph) + sizeof(glyph_t), colors);
+        break;
+    }
     stringWidth += glyph->DWidth;
   }
 }

commit afca6e745932d295b88d37fa9bd4274e22705b0b
Author: luzpaz <luzpaz@users.noreply.github.com>
Date:   Tue Aug 3 20:02:34 2021 -0400

    🐛 Spellcheck comments (#22496)
    
    codespell -q 3 --builtin=clear,rare,informal,code -S ./Marlin/src/lcd/language -L alo,amin,endcode,stdio,uint

diff --git a/Marlin/src/lcd/tft/canvas.cpp b/Marlin/src/lcd/tft/canvas.cpp
index 3c2cda4fd5..e8b89bad70 100644
--- a/Marlin/src/lcd/tft/canvas.cpp
+++ b/Marlin/src/lcd/tft/canvas.cpp
@@ -50,7 +50,7 @@ bool CANVAS::ToScreen() {
 }
 
 void CANVAS::SetBackground(uint16_t color) {
-  /* TODO: test and optimize perfomance */
+  /* TODO: test and optimize performance */
   /*
   uint32_t count = (endLine - startLine) * width;
   uint16_t *pixel = buffer;

commit a0c8d348a0baa179a13bc47be6edce4bb652dac9
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Tue Dec 22 04:51:29 2020 -0800

    Anet ET4 / ET4P and Anet TFT28 / TFT35 (#20280)

diff --git a/Marlin/src/lcd/tft/canvas.cpp b/Marlin/src/lcd/tft/canvas.cpp
index 061f078b92..3c2cda4fd5 100644
--- a/Marlin/src/lcd/tft/canvas.cpp
+++ b/Marlin/src/lcd/tft/canvas.cpp
@@ -95,7 +95,7 @@ void CANVAS::AddImage(int16_t x, int16_t y, MarlinImage image, uint16_t *colors)
     if (line >= startLine && line < endLine) {
       uint16_t *pixel = buffer + x + (line - startLine) * width;
       for (int16_t j = 0; j < image_width; j++) {
-        if ((x + j >= 0) && (x + j < width)) *pixel = *data;
+        if ((x + j >= 0) && (x + j < width)) *pixel = ENDIAN_COLOR(*data);
         pixel++;
         data++;
       }

commit ec23e37a4a31d12febc06922d3fa68446f58d7fb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Oct 24 17:13:10 2020 -0500

    Clean up comments, USB flash, NULLs

diff --git a/Marlin/src/lcd/tft/canvas.cpp b/Marlin/src/lcd/tft/canvas.cpp
index f6a5046b8d..061f078b92 100644
--- a/Marlin/src/lcd/tft/canvas.cpp
+++ b/Marlin/src/lcd/tft/canvas.cpp
@@ -79,7 +79,7 @@ void CANVAS::AddText(uint16_t x, uint16_t y, uint16_t color, uint8_t *string, ui
 
 void CANVAS::AddImage(int16_t x, int16_t y, MarlinImage image, uint16_t *colors) {
   uint16_t *data = (uint16_t *)Images[image].data;
-  if (data == NULL) return;
+  if (!data) return;
 
   uint16_t image_width = Images[image].width,
            image_height = Images[image].height;

commit 117df87d193994f6fbcd46c45573095adf921784
Author: Alexander Gavrilenko <jmz52@users.noreply.github.com>
Date:   Thu Jul 30 09:43:19 2020 +0300

    Support for TFT & Touch Screens (#18130)

diff --git a/Marlin/src/lcd/tft/canvas.cpp b/Marlin/src/lcd/tft/canvas.cpp
new file mode 100644
index 0000000000..f6a5046b8d
--- /dev/null
+++ b/Marlin/src/lcd/tft/canvas.cpp
@@ -0,0 +1,179 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../inc/MarlinConfig.h"
+
+#if HAS_GRAPHICAL_TFT
+
+#include "canvas.h"
+
+uint16_t CANVAS::width, CANVAS::height;
+uint16_t CANVAS::startLine, CANVAS::endLine;
+uint16_t *CANVAS::buffer = TFT::buffer;
+
+void CANVAS::New(uint16_t x, uint16_t y, uint16_t width, uint16_t height) {
+  CANVAS::width = width;
+  CANVAS::height = height;
+  startLine = 0;
+  endLine = 0;
+
+  tft.set_window(x, y, x + width - 1, y + height - 1);
+}
+
+void CANVAS::Continue() {
+  startLine = endLine;
+  endLine = TFT_BUFFER_SIZE < width * (height - startLine) ? startLine + TFT_BUFFER_SIZE / width : height;
+}
+
+bool CANVAS::ToScreen() {
+  tft.write_sequence(buffer, width * (endLine - startLine));
+  return endLine == height;
+}
+
+void CANVAS::SetBackground(uint16_t color) {
+  /* TODO: test and optimize perfomance */
+  /*
+  uint32_t count = (endLine - startLine) * width;
+  uint16_t *pixel = buffer;
+  while (count--)
+    *pixel++ = color;
+  */
+  const uint32_t two_pixels = (((uint32_t )color) << 16) | color;
+  uint32_t count = ((endLine - startLine) * width + 1) >> 1;
+  uint32_t *pointer = (uint32_t *)buffer;
+  while (count--) *pointer++ = two_pixels;
+}
+
+void CANVAS::AddText(uint16_t x, uint16_t y, uint16_t color, uint8_t *string, uint16_t maxWidth) {
+  if (endLine < y || startLine > y + GetFontHeight()) return;
+
+  if (maxWidth == 0) maxWidth = width - x;
+
+  uint16_t stringWidth = 0;
+  for (uint16_t i = 0 ; *(string + i) ; i++) {
+    glyph_t *glyph = Glyph(string + i);
+    if (stringWidth + glyph->BBXWidth > maxWidth) break;
+    AddImage(x + stringWidth + glyph->BBXOffsetX, y + Font()->FontAscent - glyph->BBXHeight - glyph->BBXOffsetY, glyph->BBXWidth, glyph->BBXHeight, GREYSCALE1, ((uint8_t *)glyph) + sizeof(glyph_t), &color);
+    stringWidth += glyph->DWidth;
+  }
+}
+
+void CANVAS::AddImage(int16_t x, int16_t y, MarlinImage image, uint16_t *colors) {
+  uint16_t *data = (uint16_t *)Images[image].data;
+  if (data == NULL) return;
+
+  uint16_t image_width = Images[image].width,
+           image_height = Images[image].height;
+  colorMode_t color_mode = Images[image].colorMode;
+
+  if (color_mode != HIGHCOLOR)
+    return AddImage(x, y, image_width, image_height, color_mode, (uint8_t *)data, colors);
+
+  // HIGHCOLOR - 16 bits per pixel
+
+  for (int16_t i = 0; i < image_height; i++) {
+    int16_t line = y + i;
+    if (line >= startLine && line < endLine) {
+      uint16_t *pixel = buffer + x + (line - startLine) * width;
+      for (int16_t j = 0; j < image_width; j++) {
+        if ((x + j >= 0) && (x + j < width)) *pixel = *data;
+        pixel++;
+        data++;
+      }
+    }
+    else
+      data += image_width;
+  }
+}
+
+void CANVAS::AddImage(int16_t x, int16_t y, uint8_t image_width, uint8_t image_height, colorMode_t color_mode, uint8_t *data, uint16_t *colors) {
+  uint8_t bitsPerPixel;
+  switch (color_mode) {
+    case GREYSCALE1: bitsPerPixel = 1; break;
+    case GREYSCALE2: bitsPerPixel = 2; break;
+    case GREYSCALE4: bitsPerPixel = 4; break;
+    default: return;
+  }
+
+  uint8_t mask = 0xFF >> (8 - bitsPerPixel),
+          pixelsPerByte = 8 / bitsPerPixel;
+
+  colors--;
+
+  for (int16_t i = 0; i < image_height; i++) {
+    int16_t line = y + i;
+    if (line >= startLine && line < endLine) {
+      uint16_t *pixel = buffer + x + (line - startLine) * width;
+      uint8_t offset = 8 - bitsPerPixel;
+      for (int16_t j = 0; j < image_width; j++) {
+        if (offset > 8) {
+          data++;
+          offset = 8 - bitsPerPixel;
+        }
+        if ((x + j >= 0) && (x + j < width)) {
+          const uint8_t color = ((*data) >> offset) & mask;
+          if (color) *pixel = *(colors + color);
+        }
+        pixel++;
+        offset -= bitsPerPixel;
+      }
+      data++;
+    }
+    else
+      data += (image_width + pixelsPerByte - 1) / pixelsPerByte;
+  }
+}
+
+void CANVAS::AddRectangle(uint16_t x, uint16_t y, uint16_t rectangleWidth, uint16_t rectangleHeight, uint16_t color) {
+  if (endLine < y || startLine > y + rectangleHeight) return;
+
+  for (uint16_t i = 0; i < rectangleHeight; i++) {
+    uint16_t line = y + i;
+    if (line >= startLine && line < endLine) {
+      uint16_t *pixel = buffer + x + (line - startLine) * width;
+      if (i == 0 || i == rectangleHeight - 1) {
+        for (uint16_t j = 0; j < rectangleWidth; j++) *pixel++ = color;
+      }
+      else {
+        *pixel = color;
+        pixel += rectangleWidth - 1;
+        *pixel = color;
+      }
+    }
+  }
+}
+
+void CANVAS::AddBar(uint16_t x, uint16_t y, uint16_t barWidth, uint16_t barHeight, uint16_t color) {
+  if (endLine < y || startLine > y + barHeight) return;
+
+  for (uint16_t i = 0; i < barHeight; i++) {
+    uint16_t line = y + i;
+    if (line >= startLine && line < endLine) {
+      uint16_t *pixel = buffer + x + (line - startLine) * width;
+      for (uint16_t j = 0; j < barWidth; j++) *pixel++ = color;
+    }
+  }
+}
+
+CANVAS Canvas;
+
+#endif // HAS_GRAPHICAL_TFT
