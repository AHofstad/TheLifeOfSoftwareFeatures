commit 3f4e4a4d891e3c4b73ab80aedec46e69c1b59f0d
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Wed Jul 13 22:16:22 2022 -0500

    üî• Drop STM L64** drivers, STEVAL_3DP001V1 (#24427)

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
deleted file mode 100644
index e8d8498ac7..0000000000
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ /dev/null
@@ -1,141 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-#pragma once
-
-#include "../../inc/MarlinConfig.h"
-
-#include <L6470.h>
-#if !(L6470_LIBRARY_VERSION >= 0x000800)
-  #error 'L6470_LIBRARY_VERSION 0x000800 or later required'
-#endif
-
-#define L6470_GETPARAM(P,Q) stepper##Q.GetParam(P)
-
-#define dSPIN_STEP_CLOCK      0x58
-#define dSPIN_STEP_CLOCK_FWD dSPIN_STEP_CLOCK
-#define dSPIN_STEP_CLOCK_REV dSPIN_STEP_CLOCK+1
-#define HAS_L64XX_EXTRUDER (AXIS_IS_L64XX(E0) || AXIS_IS_L64XX(E1) || AXIS_IS_L64XX(E2) || AXIS_IS_L64XX(E3) || AXIS_IS_L64XX(E4) || AXIS_IS_L64XX(E5) || AXIS_IS_L64XX(E6) || AXIS_IS_L64XX(E7))
-
-#define _EN_ITEM(N) , E##N
-enum L64XX_axis_t : uint8_t { MAIN_AXIS_NAMES, X2, Y2, Z2, Z3, Z4 REPEAT(E_STEPPERS, _EN_ITEM), MAX_L64XX };
-#undef _EN_ITEM
-
-class L64XX_Marlin : public L64XXHelper {
-public:
-  static PGM_P const index_to_axis[MAX_L64XX];
-
-  static const uint8_t index_to_dir[MAX_L64XX];
-
-  static uint8_t dir_commands[MAX_L64XX];
-
-  // Flags to guarantee graceful switch if stepper interrupts L6470 SPI transfer
-  static volatile uint8_t spi_abort;
-  static uint8_t spi_active;
-
-  L64XX_Marlin() {}
-
-  static void init();
-  static void init_to_defaults();
-
-  static uint16_t get_stepper_status(L64XX &st);
-
-  static uint16_t get_status(const L64XX_axis_t axis);
-
-  static uint32_t get_param(const L64XX_axis_t axis, const uint8_t param);
-
-  static void set_param(const L64XX_axis_t axis, const uint8_t param, const uint32_t value);
-
-  //static void send_command(const L64XX_axis_t axis, uint8_t command);
-
-  static uint8_t get_user_input(uint8_t &driver_count, L64XX_axis_t axis_index[3], char axis_mon[3][3],
-                            float &position_max, float &position_min, float &final_feedrate, uint8_t &kval_hold,
-                            uint8_t over_current_flag, uint8_t &OCD_TH_val, uint8_t &STALL_TH_val, uint16_t &over_current_threshold);
-
-  static void transfer(uint8_t L6470_buf[], const uint8_t length);
-
-  static void say_axis(const L64XX_axis_t axis, const uint8_t label=true);
-  #if ENABLED(L6470_CHITCHAT)
-    static void error_status_decode(
-      const uint16_t status, const L64XX_axis_t axis,
-      const uint16_t _status_axis_th_sd, const uint16_t _status_axis_th_wrn,
-      const uint16_t _status_axis_step_loss_a, const uint16_t _status_axis_step_loss_b,
-      const uint16_t _status_axis_ocd, const uint8_t _status_axis_layout
-    );
-  #else
-    FORCE_INLINE static void error_status_decode(
-      const uint16_t, const L64XX_axis_t,
-      const uint16_t, const uint16_t,
-      const uint16_t, const uint16_t,
-      const uint16_t, const uint8_t
-    ){}
-  #endif
-
-  // ~40 bytes SRAM to simplify status decode routines
-  typedef struct {
-    uint8_t STATUS_AXIS_LAYOUT;              // Copy of L6470_status_layout
-    uint8_t AXIS_OCD_TH_MAX;              // Size of OCD_TH field
-    uint8_t AXIS_STALL_TH_MAX;            // Size of STALL_TH field
-    float AXIS_OCD_CURRENT_CONSTANT_INV;   // mA per count
-    float AXIS_STALL_CURRENT_CONSTANT_INV; // mA per count
-    uint8_t L6470_AXIS_CONFIG,            // Address of the CONFIG register
-            L6470_AXIS_STATUS;            // Address of the STATUS register
-    uint16_t L6470_ERROR_MASK,            // STATUS_UVLO | STATUS_TH_WRN | STATUS_TH_SD  | STATUS_OCD | STATUS_STEP_LOSS_A | STATUS_STEP_LOSS_B
-             L6474_ERROR_MASK,            // STATUS_UVLO | STATUS_TH_WRN | STATUS_TH_SD  | STATUS_OCD
-             STATUS_AXIS_RAW,             // Copy of status register contents
-             STATUS_AXIS,                 // Copy of status register contents but with all error bits active low
-             STATUS_AXIS_OCD,             // Overcurrent detected bit position
-             STATUS_AXIS_SCK_MOD,         // Step clock mode is active bit position
-             STATUS_AXIS_STEP_LOSS_A,     // Stall detected on A bridge bit position
-             STATUS_AXIS_STEP_LOSS_B,     // Stall detected on B bridge bit position
-             STATUS_AXIS_TH_SD,           // Thermal shutdown bit position
-             STATUS_AXIS_TH_WRN,          // Thermal warning bit position
-             STATUS_AXIS_UVLO,            // Undervoltage lockout is active bit position
-             STATUS_AXIS_WRONG_CMD,       // Last command not valid bit position
-             STATUS_AXIS_CMD_ERR,         // Command error bit position
-             STATUS_AXIS_NOTPERF_CMD;     // Last command not performed bit position
-  } L64XX_shadow_t;
-
-  static L64XX_shadow_t shadow;
-
-  #if ENABLED(MONITOR_L6470_DRIVER_STATUS)
-    static bool monitor_paused;
-    static void pause_monitor(const bool p) { monitor_paused = p; }
-    static void monitor_update(L64XX_axis_t stepper_index);
-    static void monitor_driver();
-  #else
-    static void pause_monitor(const bool) {}
-  #endif
-
-//protected:
-  // L64XXHelper methods
-  static void spi_init();
-  static uint8_t transfer_single(uint8_t data, int16_t ss_pin);
-  static uint8_t transfer_chain(uint8_t data, int16_t ss_pin, uint8_t chain_position);
-
-private:
-  static void append_stepper_err(char* &p, const uint8_t stepper_index, const char * const err=nullptr);
-
-};
-
-void echo_yes_no(const bool yes);
-
-extern L64XX_Marlin L64xxManager;

commit c5126de559719ebdaf4475b0db4ab21c26b90a1a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 22 16:08:29 2022 -0500

    üßë‚Äçüíª MAP macro for axis lists, etc. (#24191)

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
index b71d97a0d6..e8d8498ac7 100644
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -36,7 +36,7 @@
 #define HAS_L64XX_EXTRUDER (AXIS_IS_L64XX(E0) || AXIS_IS_L64XX(E1) || AXIS_IS_L64XX(E2) || AXIS_IS_L64XX(E3) || AXIS_IS_L64XX(E4) || AXIS_IS_L64XX(E5) || AXIS_IS_L64XX(E6) || AXIS_IS_L64XX(E7))
 
 #define _EN_ITEM(N) , E##N
-enum L64XX_axis_t : uint8_t { NUM_AXIS_LIST(X, Y, Z, I, J, K, U, V, W), X2, Y2, Z2, Z3, Z4 REPEAT(E_STEPPERS, _EN_ITEM), MAX_L64XX };
+enum L64XX_axis_t : uint8_t { MAIN_AXIS_NAMES, X2, Y2, Z2, Z3, Z4 REPEAT(E_STEPPERS, _EN_ITEM), MAX_L64XX };
 #undef _EN_ITEM
 
 class L64XX_Marlin : public L64XXHelper {

commit f5daefb09d1fdf3fc931e2ce84a28d4af1ba2bea
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 3 20:34:48 2022 -0500

    üèóÔ∏è More 9-axis updates

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
index d00b5c16cd..b71d97a0d6 100644
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -36,7 +36,7 @@
 #define HAS_L64XX_EXTRUDER (AXIS_IS_L64XX(E0) || AXIS_IS_L64XX(E1) || AXIS_IS_L64XX(E2) || AXIS_IS_L64XX(E3) || AXIS_IS_L64XX(E4) || AXIS_IS_L64XX(E5) || AXIS_IS_L64XX(E6) || AXIS_IS_L64XX(E7))
 
 #define _EN_ITEM(N) , E##N
-enum L64XX_axis_t : uint8_t { NUM_AXIS_LIST(X, Y, Z, I, J, K), X2, Y2, Z2, Z3, Z4 REPEAT(E_STEPPERS, _EN_ITEM), MAX_L64XX };
+enum L64XX_axis_t : uint8_t { NUM_AXIS_LIST(X, Y, Z, I, J, K, U, V, W), X2, Y2, Z2, Z3, Z4 REPEAT(E_STEPPERS, _EN_ITEM), MAX_L64XX };
 #undef _EN_ITEM
 
 class L64XX_Marlin : public L64XXHelper {

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
index de7c0d6057..d00b5c16cd 100644
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -36,7 +36,7 @@
 #define HAS_L64XX_EXTRUDER (AXIS_IS_L64XX(E0) || AXIS_IS_L64XX(E1) || AXIS_IS_L64XX(E2) || AXIS_IS_L64XX(E3) || AXIS_IS_L64XX(E4) || AXIS_IS_L64XX(E5) || AXIS_IS_L64XX(E6) || AXIS_IS_L64XX(E7))
 
 #define _EN_ITEM(N) , E##N
-enum L64XX_axis_t : uint8_t { LINEAR_AXIS_LIST(X, Y, Z, I, J, K), X2, Y2, Z2, Z3, Z4 REPEAT(E_STEPPERS, _EN_ITEM), MAX_L64XX };
+enum L64XX_axis_t : uint8_t { NUM_AXIS_LIST(X, Y, Z, I, J, K), X2, Y2, Z2, Z3, Z4 REPEAT(E_STEPPERS, _EN_ITEM), MAX_L64XX };
 #undef _EN_ITEM
 
 class L64XX_Marlin : public L64XXHelper {

commit 6fb2d8a25f096d084348a6f6930f515d947474d4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Dec 28 02:57:24 2021 -0600

    üßë‚Äçüíª Remove extraneous 'inline' hints

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
index e11d8e872e..de7c0d6057 100644
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -118,11 +118,11 @@ public:
 
   #if ENABLED(MONITOR_L6470_DRIVER_STATUS)
     static bool monitor_paused;
-    static inline void pause_monitor(const bool p) { monitor_paused = p; }
+    static void pause_monitor(const bool p) { monitor_paused = p; }
     static void monitor_update(L64XX_axis_t stepper_index);
     static void monitor_driver();
   #else
-    static inline void pause_monitor(const bool) {}
+    static void pause_monitor(const bool) {}
   #endif
 
 //protected:

commit 7726af9c5348c1c7d0fd9a56eca87d00cd75fee6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Jun 5 09:18:47 2021 +0200

    üèóÔ∏è Support for up to 6 linear axes (#19112)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
index c8d273990f..e11d8e872e 100644
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -35,7 +35,9 @@
 #define dSPIN_STEP_CLOCK_REV dSPIN_STEP_CLOCK+1
 #define HAS_L64XX_EXTRUDER (AXIS_IS_L64XX(E0) || AXIS_IS_L64XX(E1) || AXIS_IS_L64XX(E2) || AXIS_IS_L64XX(E3) || AXIS_IS_L64XX(E4) || AXIS_IS_L64XX(E5) || AXIS_IS_L64XX(E6) || AXIS_IS_L64XX(E7))
 
-enum L64XX_axis_t : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, Z4, E0, E1, E2, E3, E4, E5, E6, E7, MAX_L64XX };
+#define _EN_ITEM(N) , E##N
+enum L64XX_axis_t : uint8_t { LINEAR_AXIS_LIST(X, Y, Z, I, J, K), X2, Y2, Z2, Z3, Z4 REPEAT(E_STEPPERS, _EN_ITEM), MAX_L64XX };
+#undef _EN_ITEM
 
 class L64XX_Marlin : public L64XXHelper {
 public:

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
index 371f0991c2..c8d273990f 100644
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once

commit f312ddfa4fd5772d825908f8e376dedf29442893
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 4 12:37:20 2020 -0600

    More updates for 8 extruders, REPEAT

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
index 9cb85891c8..371f0991c2 100644
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -33,7 +33,7 @@
 #define dSPIN_STEP_CLOCK      0x58
 #define dSPIN_STEP_CLOCK_FWD dSPIN_STEP_CLOCK
 #define dSPIN_STEP_CLOCK_REV dSPIN_STEP_CLOCK+1
-#define HAS_L64XX_EXTRUDER (AXIS_IS_L64XX(E0) || AXIS_IS_L64XX(E1) || AXIS_IS_L64XX(E2) || AXIS_IS_L64XX(E3) || AXIS_IS_L64XX(E4) || AXIS_IS_L64XX(E5))
+#define HAS_L64XX_EXTRUDER (AXIS_IS_L64XX(E0) || AXIS_IS_L64XX(E1) || AXIS_IS_L64XX(E2) || AXIS_IS_L64XX(E3) || AXIS_IS_L64XX(E4) || AXIS_IS_L64XX(E5) || AXIS_IS_L64XX(E6) || AXIS_IS_L64XX(E7))
 
 enum L64XX_axis_t : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, Z4, E0, E1, E2, E3, E4, E5, E6, E7, MAX_L64XX };
 

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
index 08315fc68f..9cb85891c8 100644
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit 50889c0f94778c378357bcc4d4a966fa869bc5c1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jan 30 03:24:23 2020 -0600

    Move L64XX index_to_axis to progmem (#16697)

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
index 9c233fdf03..08315fc68f 100644
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -39,9 +39,10 @@ enum L64XX_axis_t : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, Z4, E0, E1, E2, E3, E4, E
 
 class L64XX_Marlin : public L64XXHelper {
 public:
-  static char index_to_axis[MAX_L64XX][3];
+  static PGM_P const index_to_axis[MAX_L64XX];
+
+  static const uint8_t index_to_dir[MAX_L64XX];
 
-  static uint8_t index_to_dir[MAX_L64XX];
   static uint8_t dir_commands[MAX_L64XX];
 
   // Flags to guarantee graceful switch if stepper interrupts L6470 SPI transfer
@@ -69,7 +70,6 @@ public:
 
   static void transfer(uint8_t L6470_buf[], const uint8_t length);
 
-  //static char* index_to_axis(const uint8_t index);
   static void say_axis(const L64XX_axis_t axis, const uint8_t label=true);
   #if ENABLED(L6470_CHITCHAT)
     static void error_status_decode(

commit 248b7dfa591a34a8aa1c6960944e1a3a468ad1de
Author: yangwenxiong <46896566+yangwenxiong@users.noreply.github.com>
Date:   Sat Jan 25 16:13:39 2020 +0800

    BigTreeTech GTR V1.0 / Support 8 extruders, heaters, temp sensors, fans (#16595)

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
index 325f60d5fa..9c233fdf03 100644
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -35,7 +35,7 @@
 #define dSPIN_STEP_CLOCK_REV dSPIN_STEP_CLOCK+1
 #define HAS_L64XX_EXTRUDER (AXIS_IS_L64XX(E0) || AXIS_IS_L64XX(E1) || AXIS_IS_L64XX(E2) || AXIS_IS_L64XX(E3) || AXIS_IS_L64XX(E4) || AXIS_IS_L64XX(E5))
 
-enum L64XX_axis_t : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, Z4, E0, E1, E2, E3, E4, E5, MAX_L64XX };
+enum L64XX_axis_t : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, Z4, E0, E1, E2, E3, E4, E5, E6, E7, MAX_L64XX };
 
 class L64XX_Marlin : public L64XXHelper {
 public:

commit 0fcf2b1110d9f0d362e5aab9cc73d963710e9865
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Mon Jan 20 00:35:07 2020 -0500

    Quad Z stepper support (#16277)

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
index 9aaabb1fbe..325f60d5fa 100644
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -35,7 +35,7 @@
 #define dSPIN_STEP_CLOCK_REV dSPIN_STEP_CLOCK+1
 #define HAS_L64XX_EXTRUDER (AXIS_IS_L64XX(E0) || AXIS_IS_L64XX(E1) || AXIS_IS_L64XX(E2) || AXIS_IS_L64XX(E3) || AXIS_IS_L64XX(E4) || AXIS_IS_L64XX(E5))
 
-enum L64XX_axis_t : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, E0, E1, E2, E3, E4, E5, MAX_L64XX };
+enum L64XX_axis_t : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, Z4, E0, E1, E2, E3, E4, E5, MAX_L64XX };
 
 class L64XX_Marlin : public L64XXHelper {
 public:

commit 707349d492c2544d32af7287aca4ddbaf1473542
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jan 19 19:52:01 2020 -0600

    Updates for L64XX

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
index a0b5e5e5ae..9aaabb1fbe 100644
--- a/Marlin/src/libs/L64XX/L64XX_Marlin.h
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -30,21 +30,19 @@
 
 #define L6470_GETPARAM(P,Q) stepper##Q.GetParam(P)
 
-#define MAX_L6470  (7 + MAX_EXTRUDERS) // Maximum number of axes in Marlin
-
 #define dSPIN_STEP_CLOCK      0x58
 #define dSPIN_STEP_CLOCK_FWD dSPIN_STEP_CLOCK
 #define dSPIN_STEP_CLOCK_REV dSPIN_STEP_CLOCK+1
 #define HAS_L64XX_EXTRUDER (AXIS_IS_L64XX(E0) || AXIS_IS_L64XX(E1) || AXIS_IS_L64XX(E2) || AXIS_IS_L64XX(E3) || AXIS_IS_L64XX(E4) || AXIS_IS_L64XX(E5))
 
-typedef enum : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, E0, E1, E2, E3, E4, E5 } L64XX_axis_t;
+enum L64XX_axis_t : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, E0, E1, E2, E3, E4, E5, MAX_L64XX };
 
 class L64XX_Marlin : public L64XXHelper {
 public:
-  static char index_to_axis[MAX_L6470][3];
+  static char index_to_axis[MAX_L64XX][3];
 
-  static uint8_t index_to_dir[MAX_L6470];
-  static uint8_t dir_commands[MAX_L6470];
+  static uint8_t index_to_dir[MAX_L64XX];
+  static uint8_t dir_commands[MAX_L64XX];
 
   // Flags to guarantee graceful switch if stepper interrupts L6470 SPI transfer
   static volatile uint8_t spi_abort;

commit 1ad53cee1f4e2768310fca98de0381df9c39b617
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Mon Jan 13 18:47:30 2020 -0600

    Improved STMicro L64XX stepper driver support (#16452)

diff --git a/Marlin/src/libs/L64XX/L64XX_Marlin.h b/Marlin/src/libs/L64XX/L64XX_Marlin.h
new file mode 100644
index 0000000000..a0b5e5e5ae
--- /dev/null
+++ b/Marlin/src/libs/L64XX/L64XX_Marlin.h
@@ -0,0 +1,141 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+#include "../../inc/MarlinConfig.h"
+
+#include <L6470.h>
+#if !(L6470_LIBRARY_VERSION >= 0x000800)
+  #error 'L6470_LIBRARY_VERSION 0x000800 or later required'
+#endif
+
+#define L6470_GETPARAM(P,Q) stepper##Q.GetParam(P)
+
+#define MAX_L6470  (7 + MAX_EXTRUDERS) // Maximum number of axes in Marlin
+
+#define dSPIN_STEP_CLOCK      0x58
+#define dSPIN_STEP_CLOCK_FWD dSPIN_STEP_CLOCK
+#define dSPIN_STEP_CLOCK_REV dSPIN_STEP_CLOCK+1
+#define HAS_L64XX_EXTRUDER (AXIS_IS_L64XX(E0) || AXIS_IS_L64XX(E1) || AXIS_IS_L64XX(E2) || AXIS_IS_L64XX(E3) || AXIS_IS_L64XX(E4) || AXIS_IS_L64XX(E5))
+
+typedef enum : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, E0, E1, E2, E3, E4, E5 } L64XX_axis_t;
+
+class L64XX_Marlin : public L64XXHelper {
+public:
+  static char index_to_axis[MAX_L6470][3];
+
+  static uint8_t index_to_dir[MAX_L6470];
+  static uint8_t dir_commands[MAX_L6470];
+
+  // Flags to guarantee graceful switch if stepper interrupts L6470 SPI transfer
+  static volatile uint8_t spi_abort;
+  static uint8_t spi_active;
+
+  L64XX_Marlin() {}
+
+  static void init();
+  static void init_to_defaults();
+
+  static uint16_t get_stepper_status(L64XX &st);
+
+  static uint16_t get_status(const L64XX_axis_t axis);
+
+  static uint32_t get_param(const L64XX_axis_t axis, const uint8_t param);
+
+  static void set_param(const L64XX_axis_t axis, const uint8_t param, const uint32_t value);
+
+  //static void send_command(const L64XX_axis_t axis, uint8_t command);
+
+  static uint8_t get_user_input(uint8_t &driver_count, L64XX_axis_t axis_index[3], char axis_mon[3][3],
+                            float &position_max, float &position_min, float &final_feedrate, uint8_t &kval_hold,
+                            uint8_t over_current_flag, uint8_t &OCD_TH_val, uint8_t &STALL_TH_val, uint16_t &over_current_threshold);
+
+  static void transfer(uint8_t L6470_buf[], const uint8_t length);
+
+  //static char* index_to_axis(const uint8_t index);
+  static void say_axis(const L64XX_axis_t axis, const uint8_t label=true);
+  #if ENABLED(L6470_CHITCHAT)
+    static void error_status_decode(
+      const uint16_t status, const L64XX_axis_t axis,
+      const uint16_t _status_axis_th_sd, const uint16_t _status_axis_th_wrn,
+      const uint16_t _status_axis_step_loss_a, const uint16_t _status_axis_step_loss_b,
+      const uint16_t _status_axis_ocd, const uint8_t _status_axis_layout
+    );
+  #else
+    FORCE_INLINE static void error_status_decode(
+      const uint16_t, const L64XX_axis_t,
+      const uint16_t, const uint16_t,
+      const uint16_t, const uint16_t,
+      const uint16_t, const uint8_t
+    ){}
+  #endif
+
+  // ~40 bytes SRAM to simplify status decode routines
+  typedef struct {
+    uint8_t STATUS_AXIS_LAYOUT;              // Copy of L6470_status_layout
+    uint8_t AXIS_OCD_TH_MAX;              // Size of OCD_TH field
+    uint8_t AXIS_STALL_TH_MAX;            // Size of STALL_TH field
+    float AXIS_OCD_CURRENT_CONSTANT_INV;   // mA per count
+    float AXIS_STALL_CURRENT_CONSTANT_INV; // mA per count
+    uint8_t L6470_AXIS_CONFIG,            // Address of the CONFIG register
+            L6470_AXIS_STATUS;            // Address of the STATUS register
+    uint16_t L6470_ERROR_MASK,            // STATUS_UVLO | STATUS_TH_WRN | STATUS_TH_SD  | STATUS_OCD | STATUS_STEP_LOSS_A | STATUS_STEP_LOSS_B
+             L6474_ERROR_MASK,            // STATUS_UVLO | STATUS_TH_WRN | STATUS_TH_SD  | STATUS_OCD
+             STATUS_AXIS_RAW,             // Copy of status register contents
+             STATUS_AXIS,                 // Copy of status register contents but with all error bits active low
+             STATUS_AXIS_OCD,             // Overcurrent detected bit position
+             STATUS_AXIS_SCK_MOD,         // Step clock mode is active bit position
+             STATUS_AXIS_STEP_LOSS_A,     // Stall detected on A bridge bit position
+             STATUS_AXIS_STEP_LOSS_B,     // Stall detected on B bridge bit position
+             STATUS_AXIS_TH_SD,           // Thermal shutdown bit position
+             STATUS_AXIS_TH_WRN,          // Thermal warning bit position
+             STATUS_AXIS_UVLO,            // Undervoltage lockout is active bit position
+             STATUS_AXIS_WRONG_CMD,       // Last command not valid bit position
+             STATUS_AXIS_CMD_ERR,         // Command error bit position
+             STATUS_AXIS_NOTPERF_CMD;     // Last command not performed bit position
+  } L64XX_shadow_t;
+
+  static L64XX_shadow_t shadow;
+
+  #if ENABLED(MONITOR_L6470_DRIVER_STATUS)
+    static bool monitor_paused;
+    static inline void pause_monitor(const bool p) { monitor_paused = p; }
+    static void monitor_update(L64XX_axis_t stepper_index);
+    static void monitor_driver();
+  #else
+    static inline void pause_monitor(const bool) {}
+  #endif
+
+//protected:
+  // L64XXHelper methods
+  static void spi_init();
+  static uint8_t transfer_single(uint8_t data, int16_t ss_pin);
+  static uint8_t transfer_chain(uint8_t data, int16_t ss_pin, uint8_t chain_position);
+
+private:
+  static void append_stepper_err(char* &p, const uint8_t stepper_index, const char * const err=nullptr);
+
+};
+
+void echo_yes_no(const bool yes);
+
+extern L64XX_Marlin L64xxManager;
