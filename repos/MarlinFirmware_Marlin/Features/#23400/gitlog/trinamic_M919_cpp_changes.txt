commit 669814d0d408a622f020a55971ba04030e4fa4bf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Feb 7 23:40:54 2024 -0600

    ‚ú® MARLIN_SMALL_BUILD option (#26775)

diff --git a/Marlin/src/gcode/feature/trinamic/M919.cpp b/Marlin/src/gcode/feature/trinamic/M919.cpp
index 4ee004291d..98227c7125 100644
--- a/Marlin/src/gcode/feature/trinamic/M919.cpp
+++ b/Marlin/src/gcode/feature/trinamic/M919.cpp
@@ -57,41 +57,41 @@ static void tmc_print_chopper_time(TMC &st) {
  * With no parameters report chopper times for all axes
  */
 void GcodeSuite::M919() {
   bool err = false;
 
   int8_t toff = int8_t(parser.intval('O', -127));
   if (toff != -127) {
     if (WITHIN(toff, 1, 15))
       DEBUG_ECHOLNPGM(".toff: ", toff);
     else {
-      SERIAL_ECHOLNPGM("?O out of range (1..15)");
+      SERIAL_ECHOLNPGM(GCODE_ERR_MSG("O out of range (1..15)"));
       err = true;
     }
   }
 
   int8_t hend = int8_t(parser.intval('P', -127));
   if (hend != -127) {
     if (WITHIN(hend, -3, 12))
       DEBUG_ECHOLNPGM(".hend: ", hend);
     else {
-      SERIAL_ECHOLNPGM("?P out of range (-3..12)");
+      SERIAL_ECHOLNPGM(GCODE_ERR_MSG("P out of range (-3..12)"));
       err = true;
     }
   }
 
   int8_t hstrt = int8_t(parser.intval('S', -127));
   if (hstrt != -127) {
     if (WITHIN(hstrt, 1, 8))
       DEBUG_ECHOLNPGM(".hstrt: ", hstrt);
     else {
-      SERIAL_ECHOLNPGM("?S out of range (1..8)");
+      SERIAL_ECHOLNPGM(GCODE_ERR_MSG("S out of range (1..8)"));
       err = true;
     }
   }
 
   if (err) return;
 
   #if AXIS_IS_TMC(X2) || AXIS_IS_TMC(Y2) || AXIS_IS_TMC(Z2) || AXIS_IS_TMC(Z3) || AXIS_IS_TMC(Z4)
     const int8_t index = parser.byteval('I');
   #elif AXIS_IS_TMC(X) || AXIS_IS_TMC(Y) || AXIS_IS_TMC(Z)
     constexpr int8_t index = -1;
@@ -111,21 +111,21 @@ void GcodeSuite::M919() {
     #define HAS_E_CHOPPER 1
     int8_t eindex = -1;
   #endif
   bool report = true;
   LOOP_LOGICAL_AXES(i) if (parser.seen_test(AXIS_CHAR(i))) {
     report = false;
 
     // Get the chopper timing for the specified axis and index
     switch (i) {
       default: // A specified axis isn't Trinamic
-        SERIAL_ECHOLNPGM("?Axis ", C(AXIS_CHAR(i)), " has no TMC drivers.");
+        SERIAL_ECHOLNPGM(GCODE_ERR_MSG("Axis ", C(AXIS_CHAR(i)), " has no TMC drivers."));
         break;
 
       #if AXIS_IS_TMC(X) || AXIS_IS_TMC(X2)
         case X_AXIS:
           #if AXIS_IS_TMC(X)
             if (index <= 0) TMC_SET_CHOPPER_TIME(X);
           #endif
           #if AXIS_IS_TMC(X2)
             if (index < 0 || index == 1) TMC_SET_CHOPPER_TIME(X2);
           #endif

commit 15f26b402123d087f62728e1f1763a2b96f8d21d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Dec 27 01:25:51 2023 -0600

    üßë‚Äçüíª AS_CHAR => C (#26569)

diff --git a/Marlin/src/gcode/feature/trinamic/M919.cpp b/Marlin/src/gcode/feature/trinamic/M919.cpp
index 0e9343f699..4ee004291d 100644
--- a/Marlin/src/gcode/feature/trinamic/M919.cpp
+++ b/Marlin/src/gcode/feature/trinamic/M919.cpp
@@ -111,21 +111,21 @@ void GcodeSuite::M919() {
     #define HAS_E_CHOPPER 1
     int8_t eindex = -1;
   #endif
   bool report = true;
   LOOP_LOGICAL_AXES(i) if (parser.seen_test(AXIS_CHAR(i))) {
     report = false;
 
     // Get the chopper timing for the specified axis and index
     switch (i) {
       default: // A specified axis isn't Trinamic
-        SERIAL_ECHOLNPGM("?Axis ", AS_CHAR(AXIS_CHAR(i)), " has no TMC drivers.");
+        SERIAL_ECHOLNPGM("?Axis ", C(AXIS_CHAR(i)), " has no TMC drivers.");
         break;
 
       #if AXIS_IS_TMC(X) || AXIS_IS_TMC(X2)
         case X_AXIS:
           #if AXIS_IS_TMC(X)
             if (index <= 0) TMC_SET_CHOPPER_TIME(X);
           #endif
           #if AXIS_IS_TMC(X2)
             if (index < 0 || index == 1) TMC_SET_CHOPPER_TIME(X2);
           #endif

commit 751c88aa5b5612c526ce6c0f7edd6ecaa0d791da
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jun 20 21:08:31 2022 -0500

    ü©π M919 9-axis update

diff --git a/Marlin/src/gcode/feature/trinamic/M919.cpp b/Marlin/src/gcode/feature/trinamic/M919.cpp
index fa349e7f16..0e9343f699 100644
--- a/Marlin/src/gcode/feature/trinamic/M919.cpp
+++ b/Marlin/src/gcode/feature/trinamic/M919.cpp
@@ -162,20 +162,29 @@ void GcodeSuite::M919() {
 
       #if AXIS_IS_TMC(I)
         case I_AXIS: TMC_SET_CHOPPER_TIME(I); break;
       #endif
       #if AXIS_IS_TMC(J)
         case J_AXIS: TMC_SET_CHOPPER_TIME(J); break;
       #endif
       #if AXIS_IS_TMC(K)
         case K_AXIS: TMC_SET_CHOPPER_TIME(K); break;
       #endif
+      #if AXIS_IS_TMC(U)
+        case U_AXIS: TMC_SET_CHOPPER_TIME(U); break;
+      #endif
+      #if AXIS_IS_TMC(V)
+        case V_AXIS: TMC_SET_CHOPPER_TIME(V); break;
+      #endif
+      #if AXIS_IS_TMC(W)
+        case W_AXIS: TMC_SET_CHOPPER_TIME(W); break;
+      #endif
 
       #if HAS_E_CHOPPER
         case E_AXIS: {
           #if AXIS_IS_TMC(E0)
             if (eindex <= 0) TMC_SET_CHOPPER_TIME(E0);
           #endif
           #if AXIS_IS_TMC(E1)
             if (eindex < 0 || eindex == 1) TMC_SET_CHOPPER_TIME(E1);
           #endif
           #if AXIS_IS_TMC(E2)
@@ -229,20 +238,29 @@ void GcodeSuite::M919() {
     #endif
     #if AXIS_IS_TMC(I)
       TMC_SAY_CHOPPER_TIME(I);
     #endif
     #if AXIS_IS_TMC(J)
       TMC_SAY_CHOPPER_TIME(J);
     #endif
     #if AXIS_IS_TMC(K)
       TMC_SAY_CHOPPER_TIME(K);
     #endif
+    #if AXIS_IS_TMC(U)
+      TMC_SAY_CHOPPER_TIME(U);
+    #endif
+    #if AXIS_IS_TMC(V)
+      TMC_SAY_CHOPPER_TIME(V);
+    #endif
+    #if AXIS_IS_TMC(W)
+      TMC_SAY_CHOPPER_TIME(W);
+    #endif
     #if AXIS_IS_TMC(E0)
       TMC_SAY_CHOPPER_TIME(E0);
     #endif
     #if AXIS_IS_TMC(E1)
       TMC_SAY_CHOPPER_TIME(E1);
     #endif
     #if AXIS_IS_TMC(E2)
       TMC_SAY_CHOPPER_TIME(E2);
     #endif
     #if AXIS_IS_TMC(E3)

commit f22307a0af5bcb6b144e39a8fbf18a27d9a074a6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Mon Apr 4 04:43:42 2022 +0200

    üö∏ Better M350, M114 with more axes (#23986)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/feature/trinamic/M919.cpp b/Marlin/src/gcode/feature/trinamic/M919.cpp
index 6f3dcf729a..fa349e7f16 100644
--- a/Marlin/src/gcode/feature/trinamic/M919.cpp
+++ b/Marlin/src/gcode/feature/trinamic/M919.cpp
@@ -18,21 +18,21 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 #include "../../../inc/MarlinConfig.h"
 
 #if HAS_TRINAMIC_CONFIG
 
 #if AXIS_COLLISION('I')
-  #error "M919 parameter collision with axis name."
+  #error "M919 parameter 'I' collision with axis name."
 #endif
 
 #include "../../gcode.h"
 #include "../../../feature/tmc_util.h"
 #include "../../../module/stepper/indirection.h"
 
 #define DEBUG_OUT ENABLED(MARLIN_DEV_MODE)
 #include "../../../core/debug_out.h"
 
 template<typename TMC>

commit 8b8defeacc5f7ba2bac63baf65c1d3b1ef60177c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 3 20:52:27 2022 -0500

    üèóÔ∏è Extend AXIS_CHAR to include E
    
    Co-Authored-By: DerAndere <26200979+DerAndere1@users.noreply.github.com>

diff --git a/Marlin/src/gcode/feature/trinamic/M919.cpp b/Marlin/src/gcode/feature/trinamic/M919.cpp
index d4ba4f74ea..6f3dcf729a 100644
--- a/Marlin/src/gcode/feature/trinamic/M919.cpp
+++ b/Marlin/src/gcode/feature/trinamic/M919.cpp
@@ -105,27 +105,27 @@ void GcodeSuite::M919() {
     return uct;
   };
 
   #define TMC_SET_CHOPPER_TIME(Q) stepper##Q.set_chopper_times(make_chopper_timing(CHOPPER_TIMING_##Q, toff, hend, hstrt))
 
   #if AXIS_IS_TMC(E0) || AXIS_IS_TMC(E1) || AXIS_IS_TMC(E2) || AXIS_IS_TMC(E3) || AXIS_IS_TMC(E4) || AXIS_IS_TMC(E5) || AXIS_IS_TMC(E6) || AXIS_IS_TMC(E7)
     #define HAS_E_CHOPPER 1
     int8_t eindex = -1;
   #endif
   bool report = true;
-  LOOP_LOGICAL_AXES(i) if (parser.seen_test(axis_codes[i])) {
+  LOOP_LOGICAL_AXES(i) if (parser.seen_test(AXIS_CHAR(i))) {
     report = false;
 
     // Get the chopper timing for the specified axis and index
     switch (i) {
       default: // A specified axis isn't Trinamic
-        SERIAL_ECHOLNPGM("?Axis ", AS_CHAR(axis_codes[i]), " has no TMC drivers.");
+        SERIAL_ECHOLNPGM("?Axis ", AS_CHAR(AXIS_CHAR(i)), " has no TMC drivers.");
         break;
 
       #if AXIS_IS_TMC(X) || AXIS_IS_TMC(X2)
         case X_AXIS:
           #if AXIS_IS_TMC(X)
             if (index <= 0) TMC_SET_CHOPPER_TIME(X);
           #endif
           #if AXIS_IS_TMC(X2)
             if (index < 0 || index == 1) TMC_SET_CHOPPER_TIME(X2);
           #endif

commit bf7176fba9bbc0e41e5dce80aa5094a0ce6522eb
Author: Ludy <Ludy87@users.noreply.github.com>
Date:   Fri Mar 18 02:55:33 2022 +0100

    ü©π Fix redundant var declaration (#23913)

diff --git a/Marlin/src/gcode/feature/trinamic/M919.cpp b/Marlin/src/gcode/feature/trinamic/M919.cpp
index 4dce28f0ae..d4ba4f74ea 100644
--- a/Marlin/src/gcode/feature/trinamic/M919.cpp
+++ b/Marlin/src/gcode/feature/trinamic/M919.cpp
@@ -86,21 +86,21 @@ void GcodeSuite::M919() {
     else {
       SERIAL_ECHOLNPGM("?S out of range (1..8)");
       err = true;
     }
   }
 
   if (err) return;
 
   #if AXIS_IS_TMC(X2) || AXIS_IS_TMC(Y2) || AXIS_IS_TMC(Z2) || AXIS_IS_TMC(Z3) || AXIS_IS_TMC(Z4)
     const int8_t index = parser.byteval('I');
-  #else
+  #elif AXIS_IS_TMC(X) || AXIS_IS_TMC(Y) || AXIS_IS_TMC(Z)
     constexpr int8_t index = -1;
   #endif
 
   auto make_chopper_timing = [](chopper_timing_t bct, const int8_t toff, const int8_t hend, const int8_t hstrt) {
     chopper_timing_t uct = bct;
     if (toff  != -127) uct.toff  = toff;
     if (hend  != -127) uct.hend  = hend;
     if (hstrt != -127) uct.hstrt = hstrt;
     return uct;
   };

commit 6fbfeb68010e63c76b545e2c27aeb48ee73be68b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 1 22:54:27 2022 -0600

    ‚ú® M919 : Chopper Timing (#23400)

diff --git a/Marlin/src/gcode/feature/trinamic/M919.cpp b/Marlin/src/gcode/feature/trinamic/M919.cpp
new file mode 100644
index 0000000000..4dce28f0ae
--- /dev/null
+++ b/Marlin/src/gcode/feature/trinamic/M919.cpp
@@ -0,0 +1,266 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2021 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../../inc/MarlinConfig.h"
+
+#if HAS_TRINAMIC_CONFIG
+
+#if AXIS_COLLISION('I')
+  #error "M919 parameter collision with axis name."
+#endif
+
+#include "../../gcode.h"
+#include "../../../feature/tmc_util.h"
+#include "../../../module/stepper/indirection.h"
+
+#define DEBUG_OUT ENABLED(MARLIN_DEV_MODE)
+#include "../../../core/debug_out.h"
+
+template<typename TMC>
+static void tmc_print_chopper_time(TMC &st) {
+  st.printLabel();
+  SERIAL_ECHOLNPGM(" chopper .toff: ", st.toff(),
+                   " .hend: ", st.hysteresis_end(),
+                   " .hstrt: ", st.hysteresis_start());
+}
+
+/**
+ * M919: Set TMC stepper driver chopper times
+ *
+ * Parameters:
+ *   XYZ...E     - Selected axes
+ *   I[index]    - Axis sub-index (Omit for all XYZ steppers, 1 for X2, Y2, Z2; 2 for Z3; 3 for Z4)
+ *   T[index]    - Extruder index (Zero-based. Omit for all extruders.)
+ *   O           - time-off         [ 1..15]
+ *   P           - hysteresis_end   [-3..12]
+ *   S           - hysteresis_start [ 1...8]
+ *
+ * With no parameters report chopper times for all axes
+ */
+void GcodeSuite::M919() {
+  bool err = false;
+
+  int8_t toff = int8_t(parser.intval('O', -127));
+  if (toff != -127) {
+    if (WITHIN(toff, 1, 15))
+      DEBUG_ECHOLNPGM(".toff: ", toff);
+    else {
+      SERIAL_ECHOLNPGM("?O out of range (1..15)");
+      err = true;
+    }
+  }
+
+  int8_t hend = int8_t(parser.intval('P', -127));
+  if (hend != -127) {
+    if (WITHIN(hend, -3, 12))
+      DEBUG_ECHOLNPGM(".hend: ", hend);
+    else {
+      SERIAL_ECHOLNPGM("?P out of range (-3..12)");
+      err = true;
+    }
+  }
+
+  int8_t hstrt = int8_t(parser.intval('S', -127));
+  if (hstrt != -127) {
+    if (WITHIN(hstrt, 1, 8))
+      DEBUG_ECHOLNPGM(".hstrt: ", hstrt);
+    else {
+      SERIAL_ECHOLNPGM("?S out of range (1..8)");
+      err = true;
+    }
+  }
+
+  if (err) return;
+
+  #if AXIS_IS_TMC(X2) || AXIS_IS_TMC(Y2) || AXIS_IS_TMC(Z2) || AXIS_IS_TMC(Z3) || AXIS_IS_TMC(Z4)
+    const int8_t index = parser.byteval('I');
+  #else
+    constexpr int8_t index = -1;
+  #endif
+
+  auto make_chopper_timing = [](chopper_timing_t bct, const int8_t toff, const int8_t hend, const int8_t hstrt) {
+    chopper_timing_t uct = bct;
+    if (toff  != -127) uct.toff  = toff;
+    if (hend  != -127) uct.hend  = hend;
+    if (hstrt != -127) uct.hstrt = hstrt;
+    return uct;
+  };
+
+  #define TMC_SET_CHOPPER_TIME(Q) stepper##Q.set_chopper_times(make_chopper_timing(CHOPPER_TIMING_##Q, toff, hend, hstrt))
+
+  #if AXIS_IS_TMC(E0) || AXIS_IS_TMC(E1) || AXIS_IS_TMC(E2) || AXIS_IS_TMC(E3) || AXIS_IS_TMC(E4) || AXIS_IS_TMC(E5) || AXIS_IS_TMC(E6) || AXIS_IS_TMC(E7)
+    #define HAS_E_CHOPPER 1
+    int8_t eindex = -1;
+  #endif
+  bool report = true;
+  LOOP_LOGICAL_AXES(i) if (parser.seen_test(axis_codes[i])) {
+    report = false;
+
+    // Get the chopper timing for the specified axis and index
+    switch (i) {
+      default: // A specified axis isn't Trinamic
+        SERIAL_ECHOLNPGM("?Axis ", AS_CHAR(axis_codes[i]), " has no TMC drivers.");
+        break;
+
+      #if AXIS_IS_TMC(X) || AXIS_IS_TMC(X2)
+        case X_AXIS:
+          #if AXIS_IS_TMC(X)
+            if (index <= 0) TMC_SET_CHOPPER_TIME(X);
+          #endif
+          #if AXIS_IS_TMC(X2)
+            if (index < 0 || index == 1) TMC_SET_CHOPPER_TIME(X2);
+          #endif
+          break;
+      #endif
+
+      #if AXIS_IS_TMC(Y) || AXIS_IS_TMC(Y2)
+        case Y_AXIS:
+          #if AXIS_IS_TMC(Y)
+            if (index <= 0) TMC_SET_CHOPPER_TIME(Y);
+          #endif
+          #if AXIS_IS_TMC(Y2)
+            if (index < 0 || index == 1) TMC_SET_CHOPPER_TIME(Y2);
+          #endif
+          break;
+      #endif
+
+      #if AXIS_IS_TMC(Z) || AXIS_IS_TMC(Z2) || AXIS_IS_TMC(Z3) || AXIS_IS_TMC(Z4)
+        case Z_AXIS:
+          #if AXIS_IS_TMC(Z)
+            if (index <= 0) TMC_SET_CHOPPER_TIME(Z);
+          #endif
+          #if AXIS_IS_TMC(Z2)
+            if (index < 0 || index == 1) TMC_SET_CHOPPER_TIME(Z2);
+          #endif
+          #if AXIS_IS_TMC(Z3)
+            if (index < 0 || index == 2) TMC_SET_CHOPPER_TIME(Z3);
+          #endif
+          #if AXIS_IS_TMC(Z4)
+            if (index < 0 || index == 3) TMC_SET_CHOPPER_TIME(Z4);
+          #endif
+          break;
+      #endif
+
+      #if AXIS_IS_TMC(I)
+        case I_AXIS: TMC_SET_CHOPPER_TIME(I); break;
+      #endif
+      #if AXIS_IS_TMC(J)
+        case J_AXIS: TMC_SET_CHOPPER_TIME(J); break;
+      #endif
+      #if AXIS_IS_TMC(K)
+        case K_AXIS: TMC_SET_CHOPPER_TIME(K); break;
+      #endif
+
+      #if HAS_E_CHOPPER
+        case E_AXIS: {
+          #if AXIS_IS_TMC(E0)
+            if (eindex <= 0) TMC_SET_CHOPPER_TIME(E0);
+          #endif
+          #if AXIS_IS_TMC(E1)
+            if (eindex < 0 || eindex == 1) TMC_SET_CHOPPER_TIME(E1);
+          #endif
+          #if AXIS_IS_TMC(E2)
+            if (eindex < 0 || eindex == 2) TMC_SET_CHOPPER_TIME(E2);
+          #endif
+          #if AXIS_IS_TMC(E3)
+            if (eindex < 0 || eindex == 3) TMC_SET_CHOPPER_TIME(E3);
+          #endif
+          #if AXIS_IS_TMC(E4)
+            if (eindex < 0 || eindex == 4) TMC_SET_CHOPPER_TIME(E4);
+          #endif
+          #if AXIS_IS_TMC(E5)
+            if (eindex < 0 || eindex == 5) TMC_SET_CHOPPER_TIME(E5);
+          #endif
+          #if AXIS_IS_TMC(E6)
+            if (eindex < 0 || eindex == 6) TMC_SET_CHOPPER_TIME(E6);
+          #endif
+          #if AXIS_IS_TMC(E7)
+            if (eindex < 0 || eindex == 7) TMC_SET_CHOPPER_TIME(E7);
+          #endif
+        } break;
+      #endif
+    }
+  }
+
+  if (report) {
+    #define TMC_SAY_CHOPPER_TIME(Q) tmc_print_chopper_time(stepper##Q)
+    #if AXIS_IS_TMC(X)
+      TMC_SAY_CHOPPER_TIME(X);
+    #endif
+    #if AXIS_IS_TMC(X2)
+      TMC_SAY_CHOPPER_TIME(X2);
+    #endif
+    #if AXIS_IS_TMC(Y)
+      TMC_SAY_CHOPPER_TIME(Y);
+    #endif
+    #if AXIS_IS_TMC(Y2)
+      TMC_SAY_CHOPPER_TIME(Y2);
+    #endif
+    #if AXIS_IS_TMC(Z)
+      TMC_SAY_CHOPPER_TIME(Z);
+    #endif
+    #if AXIS_IS_TMC(Z2)
+      TMC_SAY_CHOPPER_TIME(Z2);
+    #endif
+    #if AXIS_IS_TMC(Z3)
+      TMC_SAY_CHOPPER_TIME(Z3);
+    #endif
+    #if AXIS_IS_TMC(Z4)
+      TMC_SAY_CHOPPER_TIME(Z4);
+    #endif
+    #if AXIS_IS_TMC(I)
+      TMC_SAY_CHOPPER_TIME(I);
+    #endif
+    #if AXIS_IS_TMC(J)
+      TMC_SAY_CHOPPER_TIME(J);
+    #endif
+    #if AXIS_IS_TMC(K)
+      TMC_SAY_CHOPPER_TIME(K);
+    #endif
+    #if AXIS_IS_TMC(E0)
+      TMC_SAY_CHOPPER_TIME(E0);
+    #endif
+    #if AXIS_IS_TMC(E1)
+      TMC_SAY_CHOPPER_TIME(E1);
+    #endif
+    #if AXIS_IS_TMC(E2)
+      TMC_SAY_CHOPPER_TIME(E2);
+    #endif
+    #if AXIS_IS_TMC(E3)
+      TMC_SAY_CHOPPER_TIME(E3);
+    #endif
+    #if AXIS_IS_TMC(E4)
+      TMC_SAY_CHOPPER_TIME(E4);
+    #endif
+    #if AXIS_IS_TMC(E5)
+      TMC_SAY_CHOPPER_TIME(E5);
+    #endif
+    #if AXIS_IS_TMC(E6)
+      TMC_SAY_CHOPPER_TIME(E6);
+    #endif
+    #if AXIS_IS_TMC(E7)
+      TMC_SAY_CHOPPER_TIME(E7);
+    #endif
+  }
+}
+
+#endif // HAS_TRINAMIC_CONFIG
