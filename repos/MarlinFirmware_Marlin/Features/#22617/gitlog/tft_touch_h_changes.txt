commit 1dee4d92c61b14458cd394d1f609f0dc80282092
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Feb 4 12:09:08 2024 -0600

    üîß TOUCH_IDLE_SLEEP_MINS => DISPLAY_SLEEP_MINUTES
    
    Follow up to #26517

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 93f9327a15..efbd427c31 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -64,21 +64,20 @@ typedef struct __attribute__((__packed__)) {
   intptr_t data;
 } touch_control_t;
 
 #define MAX_CONTROLS        16
 #define MINIMUM_HOLD_TIME   15
 #define TOUCH_REPEAT_DELAY  75
 #define MIN_REPEAT_DELAY    25
 #define UBL_REPEAT_DELAY    125
 #define FREE_MOVE_RANGE     32
 
-#define TSLP_PREINIT  0
 #define TSLP_SLEEPING 1
 
 class Touch {
   private:
     static TOUCH_DRIVER_CLASS io;
     static int16_t x, y;
     static bool enabled;
 
     static touch_control_t controls[MAX_CONTROLS];
     static touch_control_t *current_control;
@@ -98,21 +97,21 @@ class Touch {
     static void idle();
     static bool is_clicked() {
       if (touch_control_type == CLICK) {
         touch_control_type = NONE;
         return true;
       }
       return false;
     }
     static void disable() { enabled = false; }
     static void enable() { enabled = true; }
-    #if HAS_TOUCH_SLEEP
+    #if HAS_DISPLAY_SLEEP
       static millis_t next_sleep_ms;
       static bool isSleeping() { return next_sleep_ms == TSLP_SLEEPING; }
       static void sleepTimeout();
       static void wakeUp();
     #endif
     static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, intptr_t data=0);
     static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, void (*handler)()) {
       add_control(type, x, y, width, height, intptr_t(handler));
     }
 };

commit 3d8e3c3c9a2e955b7075783b8a95c3526b2936a5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Nov 30 16:25:11 2023 -0600

    üêõ Touch fixes (#26455)

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 6c0ff88f46..93f9327a15 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -50,49 +50,51 @@ enum TouchControlType : uint16_t {
   CANCEL, CONFIRM,
   HEATER, FAN,
   FEEDRATE, FLOWRATE,
   UBL,
   STOP,
   BUTTON
 };
 
 typedef struct __attribute__((__packed__)) {
   TouchControlType type;
-  xy_uint_t pos;
-  xy_uint_t size;
+  uint16_t x;
+  uint16_t y;
+  uint16_t width;
+  uint16_t height;
   intptr_t data;
 } touch_control_t;
 
 #define MAX_CONTROLS        16
 #define MINIMUM_HOLD_TIME   15
 #define TOUCH_REPEAT_DELAY  75
 #define MIN_REPEAT_DELAY    25
 #define UBL_REPEAT_DELAY    125
 #define FREE_MOVE_RANGE     32
 
 #define TSLP_PREINIT  0
 #define TSLP_SLEEPING 1
 
 class Touch {
   private:
     static TOUCH_DRIVER_CLASS io;
-    static xy_int_t point;
+    static int16_t x, y;
     static bool enabled;
 
     static touch_control_t controls[MAX_CONTROLS];
     static touch_control_t *current_control;
     static uint16_t controls_count;
 
     static millis_t next_touch_ms, time_to_hold, repeat_delay, touch_time;
     static TouchControlType touch_control_type;
 
-    static bool get_point(xy_int_t &point);
+    static bool get_point(int16_t * const x, int16_t * const y);
     static void touch(touch_control_t *control);
     static void hold(touch_control_t *control, millis_t delay=0);
 
   public:
     static void init();
     static void reset() { controls_count = 0; touch_time = 0; current_control = nullptr; }
     static void clear() { controls_count = 0; }
     static void idle();
     static bool is_clicked() {
       if (touch_control_type == CLICK) {

commit 376673df284333ed499dd6a1e8ab52c317d2af73
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Nov 20 00:53:35 2023 -0600

    üö∏ Minor touch calibration improvement (#26445)

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 16f51bfaaa..6c0ff88f46 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -15,96 +15,84 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../../inc/MarlinConfigPre.h"
-
-#if ENABLED(TOUCH_SCREEN_CALIBRATION)
-  #include "../tft_io/touch_calibration.h"
-#endif
+#include "../tft_io/touch_calibration.h"
 
 #if ENABLED(TFT_TOUCH_DEVICE_GT911)
   #include HAL_PATH(../.., tft/gt911.h)
   #define TOUCH_DRIVER_CLASS GT911
 #elif ENABLED(TFT_TOUCH_DEVICE_XPT2046)
   #include HAL_PATH(../.., tft/xpt2046.h)
   #define TOUCH_DRIVER_CLASS XPT2046
 #else
   #error "Unknown Touch Screen Type."
 #endif
 
 // Menu Navigation
 extern int8_t encoderTopLine, encoderLine, screen_items;
 
 enum TouchControlType : uint16_t {
   NONE = 0x0000,
   CALIBRATE,
-  MENU_SCREEN,
-  MENU_ITEM,
+  MENU_SCREEN, MENU_ITEM,
   BACK,
-  PAGE_UP,
-  PAGE_DOWN,
-  CLICK,
-  MENU_CLICK,
+  PAGE_UP, PAGE_DOWN,
+  CLICK, MENU_CLICK,
   RESUME_CONTINUE,
   SLIDER,
-  INCREASE,
-  DECREASE,
-  CANCEL,
-  CONFIRM,
-  HEATER,
-  FAN,
-  FEEDRATE,
-  FLOWRATE,
+  INCREASE, DECREASE,
+  CANCEL, CONFIRM,
+  HEATER, FAN,
+  FEEDRATE, FLOWRATE,
   UBL,
   STOP,
-  BUTTON,
+  BUTTON
 };
 
 typedef struct __attribute__((__packed__)) {
   TouchControlType type;
-  uint16_t x;
-  uint16_t y;
-  uint16_t width;
-  uint16_t height;
+  xy_uint_t pos;
+  xy_uint_t size;
   intptr_t data;
 } touch_control_t;
 
 #define MAX_CONTROLS        16
 #define MINIMUM_HOLD_TIME   15
 #define TOUCH_REPEAT_DELAY  75
 #define MIN_REPEAT_DELAY    25
 #define UBL_REPEAT_DELAY    125
 #define FREE_MOVE_RANGE     32
 
 #define TSLP_PREINIT  0
 #define TSLP_SLEEPING 1
 
 class Touch {
   private:
     static TOUCH_DRIVER_CLASS io;
-    static int16_t x, y;
+    static xy_int_t point;
     static bool enabled;
 
     static touch_control_t controls[MAX_CONTROLS];
     static touch_control_t *current_control;
     static uint16_t controls_count;
 
     static millis_t next_touch_ms, time_to_hold, repeat_delay, touch_time;
     static TouchControlType touch_control_type;
 
-    static bool get_point(int16_t *x, int16_t *y);
+    static bool get_point(xy_int_t &point);
     static void touch(touch_control_t *control);
     static void hold(touch_control_t *control, millis_t delay=0);
 
   public:
     static void init();
     static void reset() { controls_count = 0; touch_time = 0; current_control = nullptr; }
     static void clear() { controls_count = 0; }
     static void idle();
     static bool is_clicked() {
       if (touch_control_type == CLICK) {

commit 244de2458ac6fd48f3031d0179ca1bcad6808583
Author: Alexander Gavrilenko <jmz52@users.noreply.github.com>
Date:   Mon Jul 17 10:53:36 2023 +0300

    üßë‚Äçüíª Improve TFT Color UI layout / theme (#26077)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 91e863573b..16f51bfaaa 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -16,23 +16,20 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../../inc/MarlinConfigPre.h"
 
-#include "tft_color.h"
-#include "tft_image.h"
-
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "../tft_io/touch_calibration.h"
 #endif
 
 #if ENABLED(TFT_TOUCH_DEVICE_GT911)
   #include HAL_PATH(../.., tft/gt911.h)
   #define TOUCH_DRIVER_CLASS GT911
 #elif ENABLED(TFT_TOUCH_DEVICE_XPT2046)
   #include HAL_PATH(../.., tft/xpt2046.h)
   #define TOUCH_DRIVER_CLASS XPT2046
@@ -57,31 +54,24 @@ enum TouchControlType : uint16_t {
   SLIDER,
   INCREASE,
   DECREASE,
   CANCEL,
   CONFIRM,
   HEATER,
   FAN,
   FEEDRATE,
   FLOWRATE,
   UBL,
-  MOVE_AXIS,
   STOP,
   BUTTON,
 };
 
-typedef void (*screenFunc_t)();
-
-void add_control(uint16_t x, uint16_t y, TouchControlType control_type, intptr_t data, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED);
-inline void add_control(uint16_t x, uint16_t y, TouchControlType control_type, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED) { add_control(x, y, control_type, 0, image, is_enabled, color_enabled, color_disabled); }
-inline void add_control(uint16_t x, uint16_t y, screenFunc_t screen, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED) { add_control(x, y, MENU_SCREEN, (intptr_t)screen, image, is_enabled, color_enabled, color_disabled); }
-
 typedef struct __attribute__((__packed__)) {
   TouchControlType type;
   uint16_t x;
   uint16_t y;
   uint16_t width;
   uint16_t height;
   intptr_t data;
 } touch_control_t;
 
 #define MAX_CONTROLS        16
@@ -102,21 +92,21 @@ class Touch {
 
     static touch_control_t controls[MAX_CONTROLS];
     static touch_control_t *current_control;
     static uint16_t controls_count;
 
     static millis_t next_touch_ms, time_to_hold, repeat_delay, touch_time;
     static TouchControlType touch_control_type;
 
     static bool get_point(int16_t *x, int16_t *y);
     static void touch(touch_control_t *control);
-    static void hold(touch_control_t *control, millis_t delay = 0);
+    static void hold(touch_control_t *control, millis_t delay=0);
 
   public:
     static void init();
     static void reset() { controls_count = 0; touch_time = 0; current_control = nullptr; }
     static void clear() { controls_count = 0; }
     static void idle();
     static bool is_clicked() {
       if (touch_control_type == CLICK) {
         touch_control_type = NONE;
         return true;
@@ -124,14 +114,17 @@ class Touch {
       return false;
     }
     static void disable() { enabled = false; }
     static void enable() { enabled = true; }
     #if HAS_TOUCH_SLEEP
       static millis_t next_sleep_ms;
       static bool isSleeping() { return next_sleep_ms == TSLP_SLEEPING; }
       static void sleepTimeout();
       static void wakeUp();
     #endif
-    static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, intptr_t data = 0);
+    static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, intptr_t data=0);
+    static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, void (*handler)()) {
+      add_control(type, x, y, width, height, intptr_t(handler));
+    }
 };
 
 extern Touch touch;

commit d364babbc0cdb73337d86e2c4fd9170b46b7361a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 26 14:29:21 2023 -0500

    üßë‚Äçüíª Change HAL_PATH macro for easier HAL relocation (#25743)

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index bebd9d01e3..91e863573b 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -24,24 +24,24 @@
 #include "../../inc/MarlinConfigPre.h"
 
 #include "tft_color.h"
 #include "tft_image.h"
 
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "../tft_io/touch_calibration.h"
 #endif
 
 #if ENABLED(TFT_TOUCH_DEVICE_GT911)
-  #include HAL_PATH(../../HAL, tft/gt911.h)
+  #include HAL_PATH(../.., tft/gt911.h)
   #define TOUCH_DRIVER_CLASS GT911
 #elif ENABLED(TFT_TOUCH_DEVICE_XPT2046)
-  #include HAL_PATH(../../HAL, tft/xpt2046.h)
+  #include HAL_PATH(../.., tft/xpt2046.h)
   #define TOUCH_DRIVER_CLASS XPT2046
 #else
   #error "Unknown Touch Screen Type."
 #endif
 
 // Menu Navigation
 extern int8_t encoderTopLine, encoderLine, screen_items;
 
 enum TouchControlType : uint16_t {
   NONE = 0x0000,

commit 196f403dd6be59e1bcfd24f31895a1ebc551caac
Author: alexgrach <gav@bmstu.ru>
Date:   Wed Feb 15 09:40:26 2023 +0300

    üö∏ Stop button for Touch UI (#25379)

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index fd5d9fd737..bebd9d01e3 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -58,20 +58,21 @@ enum TouchControlType : uint16_t {
   INCREASE,
   DECREASE,
   CANCEL,
   CONFIRM,
   HEATER,
   FAN,
   FEEDRATE,
   FLOWRATE,
   UBL,
   MOVE_AXIS,
+  STOP,
   BUTTON,
 };
 
 typedef void (*screenFunc_t)();
 
 void add_control(uint16_t x, uint16_t y, TouchControlType control_type, intptr_t data, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED);
 inline void add_control(uint16_t x, uint16_t y, TouchControlType control_type, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED) { add_control(x, y, control_type, 0, image, is_enabled, color_enabled, color_disabled); }
 inline void add_control(uint16_t x, uint16_t y, screenFunc_t screen, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED) { add_control(x, y, MENU_SCREEN, (intptr_t)screen, image, is_enabled, color_enabled, color_disabled); }
 
 typedef struct __attribute__((__packed__)) {

commit 86276a6dd2c5e7f8f7a3c6e02c6d08af11f64998
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Sat Nov 26 08:23:24 2022 +0100

    üö∏ COLOR_UI sleep timeout / setting (#24994)

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 6021a840b6..fd5d9fd737 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -96,21 +96,21 @@ typedef struct __attribute__((__packed__)) {
 class Touch {
   private:
     static TOUCH_DRIVER_CLASS io;
     static int16_t x, y;
     static bool enabled;
 
     static touch_control_t controls[MAX_CONTROLS];
     static touch_control_t *current_control;
     static uint16_t controls_count;
 
-    static millis_t last_touch_ms, time_to_hold, repeat_delay, touch_time;
+    static millis_t next_touch_ms, time_to_hold, repeat_delay, touch_time;
     static TouchControlType touch_control_type;
 
     static bool get_point(int16_t *x, int16_t *y);
     static void touch(touch_control_t *control);
     static void hold(touch_control_t *control, millis_t delay = 0);
 
   public:
     static void init();
     static void reset() { controls_count = 0; touch_time = 0; current_control = nullptr; }
     static void clear() { controls_count = 0; }

commit 6fb2d8a25f096d084348a6f6930f515d947474d4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Dec 28 02:57:24 2021 -0600

    üßë‚Äçüíª Remove extraneous 'inline' hints

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 238453f765..6021a840b6 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -99,38 +99,38 @@ class Touch {
     static int16_t x, y;
     static bool enabled;
 
     static touch_control_t controls[MAX_CONTROLS];
     static touch_control_t *current_control;
     static uint16_t controls_count;
 
     static millis_t last_touch_ms, time_to_hold, repeat_delay, touch_time;
     static TouchControlType touch_control_type;
 
-    static inline bool get_point(int16_t *x, int16_t *y);
+    static bool get_point(int16_t *x, int16_t *y);
     static void touch(touch_control_t *control);
     static void hold(touch_control_t *control, millis_t delay = 0);
 
   public:
     static void init();
     static void reset() { controls_count = 0; touch_time = 0; current_control = nullptr; }
     static void clear() { controls_count = 0; }
     static void idle();
     static bool is_clicked() {
       if (touch_control_type == CLICK) {
         touch_control_type = NONE;
         return true;
       }
       return false;
     }
     static void disable() { enabled = false; }
     static void enable() { enabled = true; }
     #if HAS_TOUCH_SLEEP
       static millis_t next_sleep_ms;
-      static inline bool isSleeping() { return next_sleep_ms == TSLP_SLEEPING; }
+      static bool isSleeping() { return next_sleep_ms == TSLP_SLEEPING; }
       static void sleepTimeout();
       static void wakeUp();
     #endif
     static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, intptr_t data = 0);
 };
 
 extern Touch touch;

commit c2e4b1626f0cce82a55e8de9dc98ed9381e1d9ad
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Tue Sep 14 04:07:08 2021 +0200

    ‚ú® TFT Screen/Backlight Sleep (#22617)

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 54dfb420d8..238453f765 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -83,20 +83,23 @@ typedef struct __attribute__((__packed__)) {
   intptr_t data;
 } touch_control_t;
 
 #define MAX_CONTROLS        16
 #define MINIMUM_HOLD_TIME   15
 #define TOUCH_REPEAT_DELAY  75
 #define MIN_REPEAT_DELAY    25
 #define UBL_REPEAT_DELAY    125
 #define FREE_MOVE_RANGE     32
 
+#define TSLP_PREINIT  0
+#define TSLP_SLEEPING 1
+
 class Touch {
   private:
     static TOUCH_DRIVER_CLASS io;
     static int16_t x, y;
     static bool enabled;
 
     static touch_control_t controls[MAX_CONTROLS];
     static touch_control_t *current_control;
     static uint16_t controls_count;
 
@@ -114,15 +117,20 @@ class Touch {
     static void idle();
     static bool is_clicked() {
       if (touch_control_type == CLICK) {
         touch_control_type = NONE;
         return true;
       }
       return false;
     }
     static void disable() { enabled = false; }
     static void enable() { enabled = true; }
-
+    #if HAS_TOUCH_SLEEP
+      static millis_t next_sleep_ms;
+      static inline bool isSleeping() { return next_sleep_ms == TSLP_SLEEPING; }
+      static void sleepTimeout();
+      static void wakeUp();
+    #endif
     static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, intptr_t data = 0);
 };
 
 extern Touch touch;

commit 27f5e64acf0a8b087c899db677618785028bb06f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Jul 24 15:55:45 2021 -0500

    üé® NULL => nullptr

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 8d6001b8d8..54dfb420d8 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -102,21 +102,21 @@ class Touch {
 
     static millis_t last_touch_ms, time_to_hold, repeat_delay, touch_time;
     static TouchControlType touch_control_type;
 
     static inline bool get_point(int16_t *x, int16_t *y);
     static void touch(touch_control_t *control);
     static void hold(touch_control_t *control, millis_t delay = 0);
 
   public:
     static void init();
-    static void reset() { controls_count = 0; touch_time = 0; current_control = NULL; }
+    static void reset() { controls_count = 0; touch_time = 0; current_control = nullptr; }
     static void clear() { controls_count = 0; }
     static void idle();
     static bool is_clicked() {
       if (touch_control_type == CLICK) {
         touch_control_type = NONE;
         return true;
       }
       return false;
     }
     static void disable() { enabled = false; }

commit c9de9d4f9b8aee4ac3dfd0f49591b822230f43c7
Author: BigTreeTech <38851044+bigtreetech@users.noreply.github.com>
Date:   Sun May 9 10:02:16 2021 +0800

    Capacitive Touch Screen (GT911) for SKR SE BX (#21843)
    
    Co-authored-by: Msq001 <alansayyeah@gmail.com>
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 6726f031ff..8d6001b8d8 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -23,22 +23,29 @@
 
 #include "../../inc/MarlinConfigPre.h"
 
 #include "tft_color.h"
 #include "tft_image.h"
 
 #if ENABLED(TOUCH_SCREEN_CALIBRATION)
   #include "../tft_io/touch_calibration.h"
 #endif
 
-#include HAL_PATH(../../HAL, tft/xpt2046.h)
-#define TOUCH_DRIVER XPT2046
+#if ENABLED(TFT_TOUCH_DEVICE_GT911)
+  #include HAL_PATH(../../HAL, tft/gt911.h)
+  #define TOUCH_DRIVER_CLASS GT911
+#elif ENABLED(TFT_TOUCH_DEVICE_XPT2046)
+  #include HAL_PATH(../../HAL, tft/xpt2046.h)
+  #define TOUCH_DRIVER_CLASS XPT2046
+#else
+  #error "Unknown Touch Screen Type."
+#endif
 
 // Menu Navigation
 extern int8_t encoderTopLine, encoderLine, screen_items;
 
 enum TouchControlType : uint16_t {
   NONE = 0x0000,
   CALIBRATE,
   MENU_SCREEN,
   MENU_ITEM,
   BACK,
@@ -78,21 +85,21 @@ typedef struct __attribute__((__packed__)) {
 
 #define MAX_CONTROLS        16
 #define MINIMUM_HOLD_TIME   15
 #define TOUCH_REPEAT_DELAY  75
 #define MIN_REPEAT_DELAY    25
 #define UBL_REPEAT_DELAY    125
 #define FREE_MOVE_RANGE     32
 
 class Touch {
   private:
-    static TOUCH_DRIVER io;
+    static TOUCH_DRIVER_CLASS io;
     static int16_t x, y;
     static bool enabled;
 
     static touch_control_t controls[MAX_CONTROLS];
     static touch_control_t *current_control;
     static uint16_t controls_count;
 
     static millis_t last_touch_ms, time_to_hold, repeat_delay, touch_time;
     static TouchControlType touch_control_type;
 

commit 28e315cd69ba3b5c2049f31937b5876abb1a0578
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Fri Nov 20 10:46:18 2020 -0300

    SINGLE_TOUCH_NAVIGATION Follow Up (#20213)

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 8023f649ce..6726f031ff 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -38,20 +38,21 @@ extern int8_t encoderTopLine, encoderLine, screen_items;
 
 enum TouchControlType : uint16_t {
   NONE = 0x0000,
   CALIBRATE,
   MENU_SCREEN,
   MENU_ITEM,
   BACK,
   PAGE_UP,
   PAGE_DOWN,
   CLICK,
+  MENU_CLICK,
   RESUME_CONTINUE,
   SLIDER,
   INCREASE,
   DECREASE,
   CANCEL,
   CONFIRM,
   HEATER,
   FAN,
   FEEDRATE,
   FLOWRATE,

commit ea371618da71dc43e6aee95a8e479c8797867e04
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sun Nov 15 19:39:58 2020 -0300

    Add Touch Calibration screen (#20049)

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 7cb05891de..8023f649ce 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -16,55 +16,29 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TOUCH_SCREEN)
-
 #include "tft_color.h"
 #include "tft_image.h"
 
-#include HAL_PATH(../../HAL, tft/xpt2046.h)
-#define TOUCH_DRIVER XPT2046
-
-#ifndef TOUCH_SCREEN_CALIBRATION_PRECISION
-  #define TOUCH_SCREEN_CALIBRATION_PRECISION  80
-#endif
-
-#ifndef TOUCH_SCREEN_HOLD_TO_CALIBRATE_MS
-  #define TOUCH_SCREEN_HOLD_TO_CALIBRATE_MS   2500
+#if ENABLED(TOUCH_SCREEN_CALIBRATION)
+  #include "../tft_io/touch_calibration.h"
 #endif
 
-#define TOUCH_ORIENTATION_NONE  0
-#define TOUCH_LANDSCAPE         1
-#define TOUCH_PORTRAIT          2
-
-#if !(defined(TOUCH_CALIBRATION_X) || defined(TOUCH_CALIBRATION_Y) || defined(TOUCH_OFFSET_X) || defined(TOUCH_OFFSET_Y) || defined(TOUCH_ORIENTATION))
-  #if defined(XPT2046_X_CALIBRATION) && defined(XPT2046_Y_CALIBRATION) && defined(XPT2046_X_OFFSET) && defined(XPT2046_Y_OFFSET)
-    #define TOUCH_CALIBRATION_X  XPT2046_X_CALIBRATION
-    #define TOUCH_CALIBRATION_Y  XPT2046_Y_CALIBRATION
-    #define TOUCH_OFFSET_X       XPT2046_X_OFFSET
-    #define TOUCH_OFFSET_Y       XPT2046_Y_OFFSET
-    #define TOUCH_ORIENTATION    TOUCH_LANDSCAPE
-  #else
-    #define TOUCH_CALIBRATION_X  0
-    #define TOUCH_CALIBRATION_Y  0
-    #define TOUCH_OFFSET_X       0
-    #define TOUCH_OFFSET_Y       0
-    #define TOUCH_ORIENTATION    TOUCH_ORIENTATION_NONE
-  #endif
-#endif
+#include HAL_PATH(../../HAL, tft/xpt2046.h)
+#define TOUCH_DRIVER XPT2046
 
 // Menu Navigation
 extern int8_t encoderTopLine, encoderLine, screen_items;
 
 enum TouchControlType : uint16_t {
   NONE = 0x0000,
   CALIBRATE,
   MENU_SCREEN,
   MENU_ITEM,
   BACK,
@@ -94,45 +68,20 @@ inline void add_control(uint16_t x, uint16_t y, screenFunc_t screen, MarlinImage
 
 typedef struct __attribute__((__packed__)) {
   TouchControlType type;
   uint16_t x;
   uint16_t y;
   uint16_t width;
   uint16_t height;
   intptr_t data;
 } touch_control_t;
 
-typedef struct __attribute__((__packed__)) {
-  int32_t x;
-  int32_t y;
-  int16_t offset_x;
-  int16_t offset_y;
-  uint8_t orientation;
-} touch_calibration_t;
-
-typedef struct __attribute__((__packed__)) {
-  uint16_t x;
-  uint16_t y;
-  int16_t raw_x;
-  int16_t raw_y;
-} touch_calibration_point_t;
-
-enum calibrationState : uint8_t {
-  CALIBRATION_POINT_1 = 0x00,
-  CALIBRATION_POINT_2,
-  CALIBRATION_POINT_3,
-  CALIBRATION_POINT_4,
-  CALIBRATION_SUCCESS,
-  CALIBRATION_FAIL,
-  CALIBRATION_NONE,
-};
-
 #define MAX_CONTROLS        16
 #define MINIMUM_HOLD_TIME   15
 #define TOUCH_REPEAT_DELAY  75
 #define MIN_REPEAT_DELAY    25
 #define UBL_REPEAT_DELAY    125
 #define FREE_MOVE_RANGE     32
 
 class Touch {
   private:
     static TOUCH_DRIVER io;
@@ -143,49 +92,29 @@ class Touch {
     static touch_control_t *current_control;
     static uint16_t controls_count;
 
     static millis_t last_touch_ms, time_to_hold, repeat_delay, touch_time;
     static TouchControlType touch_control_type;
 
     static inline bool get_point(int16_t *x, int16_t *y);
     static void touch(touch_control_t *control);
     static void hold(touch_control_t *control, millis_t delay = 0);
 
-    #if ENABLED(TOUCH_SCREEN_CALIBRATION)
-      static calibrationState calibration_state;
-      static touch_calibration_point_t calibration_points[4];
-
-      static bool validate_precision(int32_t a, int32_t b) { return (a > b ? (100 * b) / a :  (100 * a) / b) > TOUCH_SCREEN_CALIBRATION_PRECISION; }
-      static bool validate_precision_x(uint8_t a, uint8_t b) { return validate_precision(calibration_points[a].raw_x, calibration_points[b].raw_x); }
-      static bool validate_precision_y(uint8_t a, uint8_t b) { return validate_precision(calibration_points[a].raw_y, calibration_points[b].raw_y); }
-    #endif // TOUCH_SCREEN_CALIBRATION
-
   public:
     static void init();
     static void reset() { controls_count = 0; touch_time = 0; current_control = NULL; }
     static void clear() { controls_count = 0; }
     static void idle();
     static bool is_clicked() {
       if (touch_control_type == CLICK) {
         touch_control_type = NONE;
         return true;
       }
       return false;
     }
     static void disable() { enabled = false; }
     static void enable() { enabled = true; }
 
     static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, intptr_t data = 0);
-
-    static touch_calibration_t calibration;
-    static void calibration_reset() { calibration = {TOUCH_CALIBRATION_X, TOUCH_CALIBRATION_Y, TOUCH_OFFSET_X, TOUCH_OFFSET_Y, TOUCH_ORIENTATION}; }
-
-    #if ENABLED(TOUCH_SCREEN_CALIBRATION)
-      static calibrationState calibration_start() { calibration = {0, 0, 0, 0, TOUCH_ORIENTATION_NONE}; return calibration_state = CALIBRATION_POINT_1; }
-      static void calibration_end() { calibration_state = CALIBRATION_NONE; }
-      static calibrationState get_calibration_state() { return calibration_state; }
-    #endif // TOUCH_SCREEN_CALIBRATION
 };
 
 extern Touch touch;
-
-#endif // TOUCH_SCREEN

commit 8c052e43f10340fb73f632e4a29255b2a04f7423
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Nov 6 23:46:46 2020 -0600

    Update some file headers

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 4ba3e22c8e..7cb05891de 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -1,13 +1,16 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.

commit 12e8861a1cb838f53cc8f71e3c91f83127eebd82
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sun Nov 1 07:42:53 2020 -0300

    Reset calibration screen touch timer on click (#19951)

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 17aa5bdd97..4ba3e22c8e 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -78,31 +78,31 @@ enum TouchControlType : uint16_t {
   FAN,
   FEEDRATE,
   FLOWRATE,
   UBL,
   MOVE_AXIS,
   BUTTON,
 };
 
 typedef void (*screenFunc_t)();
 
-void add_control(uint16_t x, uint16_t y, TouchControlType control_type, int32_t data, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED);
+void add_control(uint16_t x, uint16_t y, TouchControlType control_type, intptr_t data, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED);
 inline void add_control(uint16_t x, uint16_t y, TouchControlType control_type, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED) { add_control(x, y, control_type, 0, image, is_enabled, color_enabled, color_disabled); }
-inline void add_control(uint16_t x, uint16_t y, screenFunc_t screen, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED) { add_control(x, y, MENU_SCREEN, (int32_t)screen, image, is_enabled, color_enabled, color_disabled); }
+inline void add_control(uint16_t x, uint16_t y, screenFunc_t screen, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED) { add_control(x, y, MENU_SCREEN, (intptr_t)screen, image, is_enabled, color_enabled, color_disabled); }
 
 typedef struct __attribute__((__packed__)) {
   TouchControlType type;
   uint16_t x;
   uint16_t y;
   uint16_t width;
   uint16_t height;
-  int32_t data;
+  intptr_t data;
 } touch_control_t;
 
 typedef struct __attribute__((__packed__)) {
   int32_t x;
   int32_t y;
   int16_t offset_x;
   int16_t offset_y;
   uint8_t orientation;
 } touch_calibration_t;
 
@@ -151,34 +151,34 @@ class Touch {
       static calibrationState calibration_state;
       static touch_calibration_point_t calibration_points[4];
 
       static bool validate_precision(int32_t a, int32_t b) { return (a > b ? (100 * b) / a :  (100 * a) / b) > TOUCH_SCREEN_CALIBRATION_PRECISION; }
       static bool validate_precision_x(uint8_t a, uint8_t b) { return validate_precision(calibration_points[a].raw_x, calibration_points[b].raw_x); }
       static bool validate_precision_y(uint8_t a, uint8_t b) { return validate_precision(calibration_points[a].raw_y, calibration_points[b].raw_y); }
     #endif // TOUCH_SCREEN_CALIBRATION
 
   public:
     static void init();
-    static void reset() { controls_count = 0; touch_time = -1; current_control = NULL; }
+    static void reset() { controls_count = 0; touch_time = 0; current_control = NULL; }
     static void clear() { controls_count = 0; }
     static void idle();
     static bool is_clicked() {
       if (touch_control_type == CLICK) {
         touch_control_type = NONE;
         return true;
       }
       return false;
     }
     static void disable() { enabled = false; }
     static void enable() { enabled = true; }
 
-    static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, int32_t data = 0);
+    static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, intptr_t data = 0);
 
     static touch_calibration_t calibration;
     static void calibration_reset() { calibration = {TOUCH_CALIBRATION_X, TOUCH_CALIBRATION_Y, TOUCH_OFFSET_X, TOUCH_OFFSET_Y, TOUCH_ORIENTATION}; }
 
     #if ENABLED(TOUCH_SCREEN_CALIBRATION)
       static calibrationState calibration_start() { calibration = {0, 0, 0, 0, TOUCH_ORIENTATION_NONE}; return calibration_state = CALIBRATION_POINT_1; }
       static void calibration_end() { calibration_state = CALIBRATION_NONE; }
       static calibrationState get_calibration_state() { return calibration_state; }
     #endif // TOUCH_SCREEN_CALIBRATION
 };

commit 0f6fc48f8536081265a19950a0df7ed3f3de7571
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 16 19:54:59 2020 -0500

    touch_ms followup

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index b2c7a21ba1..17aa5bdd97 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -133,24 +133,21 @@ enum calibrationState : uint8_t {
 class Touch {
   private:
     static TOUCH_DRIVER io;
     static int16_t x, y;
     static bool enabled;
 
     static touch_control_t controls[MAX_CONTROLS];
     static touch_control_t *current_control;
     static uint16_t controls_count;
 
-    static millis_t now;
-    static millis_t time_to_hold;
-    static millis_t repeat_delay;
-    static millis_t touch_time;
+    static millis_t last_touch_ms, time_to_hold, repeat_delay, touch_time;
     static TouchControlType touch_control_type;
 
     static inline bool get_point(int16_t *x, int16_t *y);
     static void touch(touch_control_t *control);
     static void hold(touch_control_t *control, millis_t delay = 0);
 
     #if ENABLED(TOUCH_SCREEN_CALIBRATION)
       static calibrationState calibration_state;
       static touch_calibration_point_t calibration_points[4];
 

commit 0b80841c38dcd8259821f72dc40c194e67042c5d
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Fri Oct 16 18:19:48 2020 -0300

    Fix Color UI external_control, wait_for_release (#19771)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index 7d8f222918..b2c7a21ba1 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -157,21 +157,27 @@ class Touch {
       static bool validate_precision(int32_t a, int32_t b) { return (a > b ? (100 * b) / a :  (100 * a) / b) > TOUCH_SCREEN_CALIBRATION_PRECISION; }
       static bool validate_precision_x(uint8_t a, uint8_t b) { return validate_precision(calibration_points[a].raw_x, calibration_points[b].raw_x); }
       static bool validate_precision_y(uint8_t a, uint8_t b) { return validate_precision(calibration_points[a].raw_y, calibration_points[b].raw_y); }
     #endif // TOUCH_SCREEN_CALIBRATION
 
   public:
     static void init();
     static void reset() { controls_count = 0; touch_time = -1; current_control = NULL; }
     static void clear() { controls_count = 0; }
     static void idle();
-    static bool is_clicked() { return touch_control_type == CLICK; }
+    static bool is_clicked() {
+      if (touch_control_type == CLICK) {
+        touch_control_type = NONE;
+        return true;
+      }
+      return false;
+    }
     static void disable() { enabled = false; }
     static void enable() { enabled = true; }
 
     static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, int32_t data = 0);
 
     static touch_calibration_t calibration;
     static void calibration_reset() { calibration = {TOUCH_CALIBRATION_X, TOUCH_CALIBRATION_Y, TOUCH_OFFSET_X, TOUCH_OFFSET_Y, TOUCH_ORIENTATION}; }
 
     #if ENABLED(TOUCH_SCREEN_CALIBRATION)
       static calibrationState calibration_start() { calibration = {0, 0, 0, 0, TOUCH_ORIENTATION_NONE}; return calibration_state = CALIBRATION_POINT_1; }

commit 5b56d6698a2a9b78a5dd40446bcb606cbfff010d
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Thu Sep 17 08:52:21 2020 -0300

    Move screen for Color UI (#19386)

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
index f3e53ae461..7d8f222918 100644
--- a/Marlin/src/lcd/tft/touch.h
+++ b/Marlin/src/lcd/tft/touch.h
@@ -72,20 +72,22 @@ enum TouchControlType : uint16_t {
   SLIDER,
   INCREASE,
   DECREASE,
   CANCEL,
   CONFIRM,
   HEATER,
   FAN,
   FEEDRATE,
   FLOWRATE,
   UBL,
+  MOVE_AXIS,
+  BUTTON,
 };
 
 typedef void (*screenFunc_t)();
 
 void add_control(uint16_t x, uint16_t y, TouchControlType control_type, int32_t data, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED);
 inline void add_control(uint16_t x, uint16_t y, TouchControlType control_type, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED) { add_control(x, y, control_type, 0, image, is_enabled, color_enabled, color_disabled); }
 inline void add_control(uint16_t x, uint16_t y, screenFunc_t screen, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED) { add_control(x, y, MENU_SCREEN, (int32_t)screen, image, is_enabled, color_enabled, color_disabled); }
 
 typedef struct __attribute__((__packed__)) {
   TouchControlType type;
@@ -125,20 +127,21 @@ enum calibrationState : uint8_t {
 #define MINIMUM_HOLD_TIME   15
 #define TOUCH_REPEAT_DELAY  75
 #define MIN_REPEAT_DELAY    25
 #define UBL_REPEAT_DELAY    125
 #define FREE_MOVE_RANGE     32
 
 class Touch {
   private:
     static TOUCH_DRIVER io;
     static int16_t x, y;
+    static bool enabled;
 
     static touch_control_t controls[MAX_CONTROLS];
     static touch_control_t *current_control;
     static uint16_t controls_count;
 
     static millis_t now;
     static millis_t time_to_hold;
     static millis_t repeat_delay;
     static millis_t touch_time;
     static TouchControlType touch_control_type;
@@ -155,20 +158,22 @@ class Touch {
       static bool validate_precision_x(uint8_t a, uint8_t b) { return validate_precision(calibration_points[a].raw_x, calibration_points[b].raw_x); }
       static bool validate_precision_y(uint8_t a, uint8_t b) { return validate_precision(calibration_points[a].raw_y, calibration_points[b].raw_y); }
     #endif // TOUCH_SCREEN_CALIBRATION
 
   public:
     static void init();
     static void reset() { controls_count = 0; touch_time = -1; current_control = NULL; }
     static void clear() { controls_count = 0; }
     static void idle();
     static bool is_clicked() { return touch_control_type == CLICK; }
+    static void disable() { enabled = false; }
+    static void enable() { enabled = true; }
 
     static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, int32_t data = 0);
 
     static touch_calibration_t calibration;
     static void calibration_reset() { calibration = {TOUCH_CALIBRATION_X, TOUCH_CALIBRATION_Y, TOUCH_OFFSET_X, TOUCH_OFFSET_Y, TOUCH_ORIENTATION}; }
 
     #if ENABLED(TOUCH_SCREEN_CALIBRATION)
       static calibrationState calibration_start() { calibration = {0, 0, 0, 0, TOUCH_ORIENTATION_NONE}; return calibration_state = CALIBRATION_POINT_1; }
       static void calibration_end() { calibration_state = CALIBRATION_NONE; }
       static calibrationState get_calibration_state() { return calibration_state; }

commit 117df87d193994f6fbcd46c45573095adf921784
Author: Alexander Gavrilenko <jmz52@users.noreply.github.com>
Date:   Thu Jul 30 09:43:19 2020 +0300

    Support for TFT & Touch Screens (#18130)

diff --git a/Marlin/src/lcd/tft/touch.h b/Marlin/src/lcd/tft/touch.h
new file mode 100644
index 0000000000..f3e53ae461
--- /dev/null
+++ b/Marlin/src/lcd/tft/touch.h
@@ -0,0 +1,180 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+#include "../../inc/MarlinConfigPre.h"
+
+#if ENABLED(TOUCH_SCREEN)
+
+#include "tft_color.h"
+#include "tft_image.h"
+
+#include HAL_PATH(../../HAL, tft/xpt2046.h)
+#define TOUCH_DRIVER XPT2046
+
+#ifndef TOUCH_SCREEN_CALIBRATION_PRECISION
+  #define TOUCH_SCREEN_CALIBRATION_PRECISION  80
+#endif
+
+#ifndef TOUCH_SCREEN_HOLD_TO_CALIBRATE_MS
+  #define TOUCH_SCREEN_HOLD_TO_CALIBRATE_MS   2500
+#endif
+
+#define TOUCH_ORIENTATION_NONE  0
+#define TOUCH_LANDSCAPE         1
+#define TOUCH_PORTRAIT          2
+
+#if !(defined(TOUCH_CALIBRATION_X) || defined(TOUCH_CALIBRATION_Y) || defined(TOUCH_OFFSET_X) || defined(TOUCH_OFFSET_Y) || defined(TOUCH_ORIENTATION))
+  #if defined(XPT2046_X_CALIBRATION) && defined(XPT2046_Y_CALIBRATION) && defined(XPT2046_X_OFFSET) && defined(XPT2046_Y_OFFSET)
+    #define TOUCH_CALIBRATION_X  XPT2046_X_CALIBRATION
+    #define TOUCH_CALIBRATION_Y  XPT2046_Y_CALIBRATION
+    #define TOUCH_OFFSET_X       XPT2046_X_OFFSET
+    #define TOUCH_OFFSET_Y       XPT2046_Y_OFFSET
+    #define TOUCH_ORIENTATION    TOUCH_LANDSCAPE
+  #else
+    #define TOUCH_CALIBRATION_X  0
+    #define TOUCH_CALIBRATION_Y  0
+    #define TOUCH_OFFSET_X       0
+    #define TOUCH_OFFSET_Y       0
+    #define TOUCH_ORIENTATION    TOUCH_ORIENTATION_NONE
+  #endif
+#endif
+
+// Menu Navigation
+extern int8_t encoderTopLine, encoderLine, screen_items;
+
+enum TouchControlType : uint16_t {
+  NONE = 0x0000,
+  CALIBRATE,
+  MENU_SCREEN,
+  MENU_ITEM,
+  BACK,
+  PAGE_UP,
+  PAGE_DOWN,
+  CLICK,
+  RESUME_CONTINUE,
+  SLIDER,
+  INCREASE,
+  DECREASE,
+  CANCEL,
+  CONFIRM,
+  HEATER,
+  FAN,
+  FEEDRATE,
+  FLOWRATE,
+  UBL,
+};
+
+typedef void (*screenFunc_t)();
+
+void add_control(uint16_t x, uint16_t y, TouchControlType control_type, int32_t data, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED);
+inline void add_control(uint16_t x, uint16_t y, TouchControlType control_type, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED) { add_control(x, y, control_type, 0, image, is_enabled, color_enabled, color_disabled); }
+inline void add_control(uint16_t x, uint16_t y, screenFunc_t screen, MarlinImage image, bool is_enabled = true, uint16_t color_enabled = COLOR_CONTROL_ENABLED, uint16_t color_disabled = COLOR_CONTROL_DISABLED) { add_control(x, y, MENU_SCREEN, (int32_t)screen, image, is_enabled, color_enabled, color_disabled); }
+
+typedef struct __attribute__((__packed__)) {
+  TouchControlType type;
+  uint16_t x;
+  uint16_t y;
+  uint16_t width;
+  uint16_t height;
+  int32_t data;
+} touch_control_t;
+
+typedef struct __attribute__((__packed__)) {
+  int32_t x;
+  int32_t y;
+  int16_t offset_x;
+  int16_t offset_y;
+  uint8_t orientation;
+} touch_calibration_t;
+
+typedef struct __attribute__((__packed__)) {
+  uint16_t x;
+  uint16_t y;
+  int16_t raw_x;
+  int16_t raw_y;
+} touch_calibration_point_t;
+
+enum calibrationState : uint8_t {
+  CALIBRATION_POINT_1 = 0x00,
+  CALIBRATION_POINT_2,
+  CALIBRATION_POINT_3,
+  CALIBRATION_POINT_4,
+  CALIBRATION_SUCCESS,
+  CALIBRATION_FAIL,
+  CALIBRATION_NONE,
+};
+
+#define MAX_CONTROLS        16
+#define MINIMUM_HOLD_TIME   15
+#define TOUCH_REPEAT_DELAY  75
+#define MIN_REPEAT_DELAY    25
+#define UBL_REPEAT_DELAY    125
+#define FREE_MOVE_RANGE     32
+
+class Touch {
+  private:
+    static TOUCH_DRIVER io;
+    static int16_t x, y;
+
+    static touch_control_t controls[MAX_CONTROLS];
+    static touch_control_t *current_control;
+    static uint16_t controls_count;
+
+    static millis_t now;
+    static millis_t time_to_hold;
+    static millis_t repeat_delay;
+    static millis_t touch_time;
+    static TouchControlType touch_control_type;
+
+    static inline bool get_point(int16_t *x, int16_t *y);
+    static void touch(touch_control_t *control);
+    static void hold(touch_control_t *control, millis_t delay = 0);
+
+    #if ENABLED(TOUCH_SCREEN_CALIBRATION)
+      static calibrationState calibration_state;
+      static touch_calibration_point_t calibration_points[4];
+
+      static bool validate_precision(int32_t a, int32_t b) { return (a > b ? (100 * b) / a :  (100 * a) / b) > TOUCH_SCREEN_CALIBRATION_PRECISION; }
+      static bool validate_precision_x(uint8_t a, uint8_t b) { return validate_precision(calibration_points[a].raw_x, calibration_points[b].raw_x); }
+      static bool validate_precision_y(uint8_t a, uint8_t b) { return validate_precision(calibration_points[a].raw_y, calibration_points[b].raw_y); }
+    #endif // TOUCH_SCREEN_CALIBRATION
+
+  public:
+    static void init();
+    static void reset() { controls_count = 0; touch_time = -1; current_control = NULL; }
+    static void clear() { controls_count = 0; }
+    static void idle();
+    static bool is_clicked() { return touch_control_type == CLICK; }
+
+    static void add_control(TouchControlType type, uint16_t x, uint16_t y, uint16_t width, uint16_t height, int32_t data = 0);
+
+    static touch_calibration_t calibration;
+    static void calibration_reset() { calibration = {TOUCH_CALIBRATION_X, TOUCH_CALIBRATION_Y, TOUCH_OFFSET_X, TOUCH_OFFSET_Y, TOUCH_ORIENTATION}; }
+
+    #if ENABLED(TOUCH_SCREEN_CALIBRATION)
+      static calibrationState calibration_start() { calibration = {0, 0, 0, 0, TOUCH_ORIENTATION_NONE}; return calibration_state = CALIBRATION_POINT_1; }
+      static void calibration_end() { calibration_state = CALIBRATION_NONE; }
+      static calibrationState get_calibration_state() { return calibration_state; }
+    #endif // TOUCH_SCREEN_CALIBRATION
+};
+
+extern Touch touch;
+
+#endif // TOUCH_SCREEN
