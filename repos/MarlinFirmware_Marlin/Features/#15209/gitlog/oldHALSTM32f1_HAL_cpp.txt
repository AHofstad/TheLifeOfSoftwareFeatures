commit 6bead0c1b04152f6a291d851f6cd4029fe0fc616
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 16:29:29 2020 -0500

    Shorter paths to HAL, ExtUI (#17156)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
deleted file mode 100644
index bc5479b60c..0000000000
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ /dev/null
@@ -1,393 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- *
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- * Copyright (c) 2016 Bob Cousins bobcousins42@googlemail.com
- * Copyright (c) 2015-2016 Nico Tonnhofer wurstnase.reprap@gmail.com
- * Copyright (c) 2017 Victor Perez
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- *
- */
-
-/**
- * HAL for stm32duino.com based on Libmaple and compatible (STM32F1)
- */
-
-#ifdef __STM32F1__
-
-#include "../../inc/MarlinConfig.h"
-#include "HAL.h"
-
-#include <STM32ADC.h>
-
-// ------------------------
-// Types
-// ------------------------
-
-#define __I
-#define __IO volatile
- typedef struct {
-   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register                                   */
-   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */
-   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */
-   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */
-   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */
-   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */
-   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15) */
-   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State Register             */
-   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Register                    */
-   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register                             */
-   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register                           */
-   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register                      */
-   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register                             */
-   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register                       */
-   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register                            */
-   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register                                */
-   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register                            */
-   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register                         */
-   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Register                   */
-        uint32_t RESERVED0[5];
-   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Register                   */
- } SCB_Type;
-
-// ------------------------
-// Local defines
-// ------------------------
-
-#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address  */
-#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address  */
-
-#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct           */
-
-/* SCB Application Interrupt and Reset Control Register Definitions */
-#define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */
-#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
-
-#define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB AIRCR: PRIGROUP Position */
-#define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */
-
-// ------------------------
-// Public Variables
-// ------------------------
-
-#if (defined(SERIAL_USB) && !defined(USE_USB_COMPOSITE))
-  USBSerial SerialUSB;
-#endif
-
-uint16_t HAL_adc_result;
-
-// ------------------------
-// Private Variables
-// ------------------------
-STM32ADC adc(ADC1);
-
-const uint8_t adc_pins[] = {
-  #if HAS_TEMP_ADC_0
-    TEMP_0_PIN,
-  #endif
-  #if HAS_HEATED_BED
-    TEMP_BED_PIN,
-  #endif
-  #if HAS_HEATED_CHAMBER
-    TEMP_CHAMBER_PIN,
-  #endif
-  #if HAS_TEMP_ADC_1
-    TEMP_1_PIN,
-  #endif
-  #if HAS_TEMP_ADC_2
-    TEMP_2_PIN,
-  #endif
-  #if HAS_TEMP_ADC_3
-    TEMP_3_PIN,
-  #endif
-  #if HAS_TEMP_ADC_4
-    TEMP_4_PIN,
-  #endif
-  #if HAS_TEMP_ADC_5
-    TEMP_5_PIN,
-  #endif
-  #if HAS_TEMP_ADC_6
-    TEMP_6_PIN,
-  #endif
-  #if HAS_TEMP_ADC_7
-    TEMP_7_PIN,
-  #endif
-  #if ENABLED(FILAMENT_WIDTH_SENSOR)
-    FILWIDTH_PIN,
-  #endif
-  #if ENABLED(ADC_KEYPAD)
-    ADC_KEYPAD_PIN,
-  #endif
-  #if HAS_JOY_ADC_X
-    JOY_X_PIN,
-  #endif
-  #if HAS_JOY_ADC_Y
-    JOY_Y_PIN,
-  #endif
-  #if HAS_JOY_ADC_Z
-    JOY_Z_PIN,
-  #endif
-};
-
-enum TEMP_PINS : char {
-  #if HAS_TEMP_ADC_0
-    TEMP_0,
-  #endif
-  #if HAS_HEATED_BED
-    TEMP_BED,
-  #endif
-  #if HAS_HEATED_CHAMBER
-    TEMP_CHAMBER,
-  #endif
-  #if HAS_TEMP_ADC_1
-    TEMP_1,
-  #endif
-  #if HAS_TEMP_ADC_2
-    TEMP_2,
-  #endif
-  #if HAS_TEMP_ADC_3
-    TEMP_3,
-  #endif
-  #if HAS_TEMP_ADC_4
-    TEMP_4,
-  #endif
-  #if HAS_TEMP_ADC_5
-    TEMP_5,
-  #endif
-  #if HAS_TEMP_ADC_6
-    TEMP_6,
-  #endif
-  #if HAS_TEMP_ADC_7
-    TEMP_7,
-  #endif
-  #if ENABLED(FILAMENT_WIDTH_SENSOR)
-    FILWIDTH,
-  #endif
-  #if ENABLED(ADC_KEYPAD)
-    ADC_KEY,
-  #endif
-  #if HAS_JOY_ADC_X
-    JOY_X,
-  #endif
-  #if HAS_JOY_ADC_Y
-    JOY_Y,
-  #endif
-  #if HAS_JOY_ADC_Z
-    JOY_Z,
-  #endif
-  ADC_PIN_COUNT
-};
-
-uint16_t HAL_adc_results[ADC_PIN_COUNT];
-
-// ------------------------
-// Private functions
-// ------------------------
-static void NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
-  uint32_t reg_value;
-  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
-
-  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
-  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
-  reg_value  =  (reg_value                                 |
-                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
-                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
-  SCB->AIRCR =  reg_value;
-}
-
-// ------------------------
-// Public functions
-// ------------------------
-
-//
-// Leave PA11/PA12 intact if USBSerial is not used
-//
-#if SERIAL_USB
-  namespace wirish { namespace priv {
-    #if SERIAL_PORT > 0
-      #if SERIAL_PORT2
-        #if SERIAL_PORT2 > 0
-          void board_setup_usb() {}
-        #endif
-      #else
-        void board_setup_usb() {}
-      #endif
-    #endif
-  } }
-#endif
-
-void HAL_init() {
-  NVIC_SetPriorityGrouping(0x3);
-  #if PIN_EXISTS(LED)
-    OUT_WRITE(LED_PIN, LOW);
-  #endif
-  #ifdef USE_USB_COMPOSITE
-    MSC_SD_init();
-  #endif
-  #if PIN_EXISTS(USB_CONNECT)
-    OUT_WRITE(USB_CONNECT_PIN, !USB_CONNECT_INVERTING);  // USB clear connection
-    delay(1000);                                         // Give OS time to notice
-    OUT_WRITE(USB_CONNECT_PIN, USB_CONNECT_INVERTING);
-  #endif
-}
-
-// HAL idle task
-void HAL_idletask() {
-  #ifdef USE_USB_COMPOSITE
-    #if ENABLED(SHARED_SD_CARD)
-      // If Marlin is using the SD card we need to lock it to prevent access from
-      // a PC via USB.
-      // Other HALs use IS_SD_PRINTING() and IS_SD_FILE_OPEN() to check for access but
-      // this will not reliably detect delete operations. To be safe we will lock
-      // the disk if Marlin has it mounted. Unfortunately there is currently no way
-      // to unmount the disk from the LCD menu.
-      // if (IS_SD_PRINTING() || IS_SD_FILE_OPEN())
-      /* copy from lpc1768 framework, should be fixed later for process SHARED_SD_CARD*/
-    #endif
-    // process USB mass storage device class loop
-    MarlinMSC.loop();
-  #endif
-}
-
-void HAL_clear_reset_source() { }
-
-/**
- * TODO: Check this and change or remove.
- * currently returns 1 that's equal to poweron reset.
- */
-uint8_t HAL_get_reset_source() { return 1; }
-
-void _delay_ms(const int delay_ms) { delay(delay_ms); }
-
-extern "C" {
-  extern unsigned int _ebss; // end of bss section
-}
-
-/**
- * TODO: Change this to correct it for libmaple
- */
-
-// return free memory between end of heap (or end bss) and whatever is current
-
-/*
-#include <wirish/syscalls.c>
-//extern caddr_t _sbrk(int incr);
-#ifndef CONFIG_HEAP_END
-extern char _lm_heap_end;
-#define CONFIG_HEAP_END ((caddr_t)&_lm_heap_end)
-#endif
-
-extern "C" {
-  static int freeMemory() {
-    char top = 't';
-    return &top - reinterpret_cast<char*>(sbrk(0));
-  }
-  int freeMemory() {
-    int free_memory;
-    int heap_end = (int)_sbrk(0);
-    free_memory = ((int)&free_memory) - ((int)heap_end);
-    return free_memory;
-  }
-}
-*/
-
-// ------------------------
-// ADC
-// ------------------------
-// Init the AD in continuous capture mode
-void HAL_adc_init() {
-  // configure the ADC
-  adc.calibrate();
-  #if F_CPU > 72000000
-    adc.setSampleRate(ADC_SMPR_71_5); // 71.5 ADC cycles
-  #else
-    adc.setSampleRate(ADC_SMPR_41_5); // 41.5 ADC cycles
-  #endif
-  adc.setPins((uint8_t *)adc_pins, ADC_PIN_COUNT);
-  adc.setDMA(HAL_adc_results, (uint16_t)ADC_PIN_COUNT, (uint32_t)(DMA_MINC_MODE | DMA_CIRC_MODE), nullptr);
-  adc.setScanMode();
-  adc.setContinuous();
-  adc.startConversion();
-}
-
-void HAL_adc_start_conversion(const uint8_t adc_pin) {
-  TEMP_PINS pin_index;
-  switch (adc_pin) {
-    default: return;
-    #if HAS_TEMP_ADC_0
-      case TEMP_0_PIN: pin_index = TEMP_0; break;
-    #endif
-    #if HAS_HEATED_BED
-      case TEMP_BED_PIN: pin_index = TEMP_BED; break;
-    #endif
-    #if HAS_HEATED_CHAMBER
-      case TEMP_CHAMBER_PIN: pin_index = TEMP_CHAMBER; break;
-    #endif
-    #if HAS_TEMP_ADC_1
-      case TEMP_1_PIN: pin_index = TEMP_1; break;
-    #endif
-    #if HAS_TEMP_ADC_2
-      case TEMP_2_PIN: pin_index = TEMP_2; break;
-    #endif
-    #if HAS_TEMP_ADC_3
-      case TEMP_3_PIN: pin_index = TEMP_3; break;
-    #endif
-    #if HAS_TEMP_ADC_4
-      case TEMP_4_PIN: pin_index = TEMP_4; break;
-    #endif
-    #if HAS_TEMP_ADC_5
-      case TEMP_5_PIN: pin_index = TEMP_5; break;
-    #endif
-    #if HAS_TEMP_ADC_6
-      case TEMP_6_PIN: pin_index = TEMP_6; break;
-    #endif
-    #if HAS_TEMP_ADC_7
-      case TEMP_7_PIN: pin_index = TEMP_7; break;
-    #endif
-    #if HAS_JOY_ADC_X
-      case JOY_X_PIN: pin_index = JOY_X; break;
-    #endif
-    #if HAS_JOY_ADC_Y
-      case JOY_Y_PIN: pin_index = JOY_Y; break;
-    #endif
-    #if HAS_JOY_ADC_Z
-      case JOY_Z_PIN: pin_index = JOY_Z; break;
-    #endif
-    #if ENABLED(FILAMENT_WIDTH_SENSOR)
-      case FILWIDTH_PIN: pin_index = FILWIDTH; break;
-    #endif
-    #if ENABLED(ADC_KEYPAD)
-      case ADC_KEYPAD_PIN: pin_index = ADC_KEY; break;
-    #endif
-  }
-  HAL_adc_result = (HAL_adc_results[(int)pin_index] >> 2) & 0x3FF; // shift to get 10 bits only.
-}
-
-uint16_t HAL_adc_get_result() { return HAL_adc_result; }
-
-uint16_t analogRead(pin_t pin) {
-  const bool is_analog = _GET_MODE(pin) == GPIO_INPUT_ANALOG;
-  return is_analog ? analogRead(uint8_t(pin)) : 0;
-}
-
-// Wrapper to maple unprotected analogWrite
-void analogWrite(pin_t pin, int pwm_val8) {
-  if (PWM_PIN(pin))
-    analogWrite(uint8_t(pin), pwm_val8);
-}
-
-void flashFirmware(int16_t value) { nvic_sys_reset(); }
-
-#endif // __STM32F1__

commit b9b07387d7eac1a02f068069d783a85775ae4e64
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Feb 8 19:59:33 2020 -0600

    Minor HAL cleanup

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index bde77ec0ec..bc5479b60c 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -261,14 +261,6 @@ void HAL_idletask() {
   #endif
 }
 
-/* VGPV Done with defines
-// disable interrupts
-void cli() { noInterrupts(); }
-
-// enable interrupts
-void sei() { interrupts(); }
-*/
-
 void HAL_clear_reset_source() { }
 
 /**

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 0db0371cae..bde77ec0ec 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -1,7 +1,7 @@
 /**
  * Marlin 3D Printer Firmware
  *
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  * Copyright (c) 2016 Bob Cousins bobcousins42@googlemail.com
  * Copyright (c) 2015-2016 Nico Tonnhofer wurstnase.reprap@gmail.com
  * Copyright (c) 2017 Victor Perez

commit 248b7dfa591a34a8aa1c6960944e1a3a468ad1de
Author: yangwenxiong <46896566+yangwenxiong@users.noreply.github.com>
Date:   Sat Jan 25 16:13:39 2020 +0800

    BigTreeTech GTR V1.0 / Support 8 extruders, heaters, temp sensors, fans (#16595)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 9dcb77ae4f..0db0371cae 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -118,6 +118,12 @@ const uint8_t adc_pins[] = {
   #if HAS_TEMP_ADC_5
     TEMP_5_PIN,
   #endif
+  #if HAS_TEMP_ADC_6
+    TEMP_6_PIN,
+  #endif
+  #if HAS_TEMP_ADC_7
+    TEMP_7_PIN,
+  #endif
   #if ENABLED(FILAMENT_WIDTH_SENSOR)
     FILWIDTH_PIN,
   #endif
@@ -160,6 +166,12 @@ enum TEMP_PINS : char {
   #if HAS_TEMP_ADC_5
     TEMP_5,
   #endif
+  #if HAS_TEMP_ADC_6
+    TEMP_6,
+  #endif
+  #if HAS_TEMP_ADC_7
+    TEMP_7,
+  #endif
   #if ENABLED(FILAMENT_WIDTH_SENSOR)
     FILWIDTH,
   #endif
@@ -346,6 +358,12 @@ void HAL_adc_start_conversion(const uint8_t adc_pin) {
     #if HAS_TEMP_ADC_5
       case TEMP_5_PIN: pin_index = TEMP_5; break;
     #endif
+    #if HAS_TEMP_ADC_6
+      case TEMP_6_PIN: pin_index = TEMP_6; break;
+    #endif
+    #if HAS_TEMP_ADC_7
+      case TEMP_7_PIN: pin_index = TEMP_7; break;
+    #endif
     #if HAS_JOY_ADC_X
       case JOY_X_PIN: pin_index = JOY_X; break;
     #endif

commit a3229b30ecedc7ef6b406186f794b913a6dbbcf5
Author: Daniel Negut <33815341+danandrei96@users.noreply.github.com>
Date:   Wed Nov 20 06:06:26 2019 +0000

    Add Zonestar/Anet LCD for SKR mini E3 (#15931)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index afd6eff027..9dcb77ae4f 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -121,6 +121,9 @@ const uint8_t adc_pins[] = {
   #if ENABLED(FILAMENT_WIDTH_SENSOR)
     FILWIDTH_PIN,
   #endif
+  #if ENABLED(ADC_KEYPAD)
+    ADC_KEYPAD_PIN,
+  #endif
   #if HAS_JOY_ADC_X
     JOY_X_PIN,
   #endif
@@ -160,6 +163,9 @@ enum TEMP_PINS : char {
   #if ENABLED(FILAMENT_WIDTH_SENSOR)
     FILWIDTH,
   #endif
+  #if ENABLED(ADC_KEYPAD)
+    ADC_KEY,
+  #endif
   #if HAS_JOY_ADC_X
     JOY_X,
   #endif
@@ -352,6 +358,9 @@ void HAL_adc_start_conversion(const uint8_t adc_pin) {
     #if ENABLED(FILAMENT_WIDTH_SENSOR)
       case FILWIDTH_PIN: pin_index = FILWIDTH; break;
     #endif
+    #if ENABLED(ADC_KEYPAD)
+      case ADC_KEYPAD_PIN: pin_index = ADC_KEY; break;
+    #endif
   }
   HAL_adc_result = (HAL_adc_results[(int)pin_index] >> 2) & 0x3FF; // shift to get 10 bits only.
 }

commit 9fd35c84ce722c71b6d42b2c618c93ca66f2537f
Author: Jason Smith <jason.inet@gmail.com>
Date:   Tue Nov 12 20:16:54 2019 -0800

    SoftwareSerialM for SKR STM32F1 boards (#15875)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index cba41dd3c2..afd6eff027 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -272,7 +272,7 @@ extern "C" {
 // return free memory between end of heap (or end bss) and whatever is current
 
 /*
-#include "wirish/syscalls.c"
+#include <wirish/syscalls.c>
 //extern caddr_t _sbrk(int incr);
 #ifndef CONFIG_HEAP_END
 extern char _lm_heap_end;

commit 53abfdc2c35fa7076515cef2ba3ce2403bef8a0f
Author: Jason Smith <jason.inet@gmail.com>
Date:   Tue Oct 15 12:18:46 2019 -0700

    Fix BLTOUCH and FAN PWM conflicts on SKR E3 boards (#15547)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 802a489101..cba41dd3c2 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -27,8 +27,8 @@
 
 #ifdef __STM32F1__
 
-#include "HAL.h"
 #include "../../inc/MarlinConfig.h"
+#include "HAL.h"
 
 #include <STM32ADC.h>
 

commit 0322348924cfb186ba9e9597cc3b246eb086229a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 2 18:51:25 2019 -0500

    Handle runout in runout.cpp

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index e1f2e21ffd..802a489101 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -233,7 +233,7 @@ void HAL_idletask() {
       // a PC via USB.
       // Other HALs use IS_SD_PRINTING() and IS_SD_FILE_OPEN() to check for access but
       // this will not reliably detect delete operations. To be safe we will lock
-      // the disk if Marlin has it mounted. Unfortuately there is currently no way
+      // the disk if Marlin has it mounted. Unfortunately there is currently no way
       // to unmount the disk from the LCD menu.
       // if (IS_SD_PRINTING() || IS_SD_FILE_OPEN())
       /* copy from lpc1768 framework, should be fixed later for process SHARED_SD_CARD*/

commit f01f0d1956bb5cf0a9efb538b334ed6165a3e20f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Sep 16 20:31:08 2019 -0500

    Drop C-style 'void' argument

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 7e91a39f48..e1f2e21ffd 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -201,16 +201,16 @@ static void NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
     #if SERIAL_PORT > 0
       #if SERIAL_PORT2
         #if SERIAL_PORT2 > 0
-          void board_setup_usb(void) {}
+          void board_setup_usb() {}
         #endif
       #else
-        void board_setup_usb(void) {}
+        void board_setup_usb() {}
       #endif
     #endif
   } }
 #endif
 
-void HAL_init(void) {
+void HAL_init() {
   NVIC_SetPriorityGrouping(0x3);
   #if PIN_EXISTS(LED)
     OUT_WRITE(LED_PIN, LOW);
@@ -226,7 +226,7 @@ void HAL_init(void) {
 }
 
 // HAL idle task
-void HAL_idletask(void) {
+void HAL_idletask() {
   #ifdef USE_USB_COMPOSITE
     #if ENABLED(SHARED_SD_CARD)
       // If Marlin is using the SD card we need to lock it to prevent access from
@@ -245,19 +245,19 @@ void HAL_idletask(void) {
 
 /* VGPV Done with defines
 // disable interrupts
-void cli(void) { noInterrupts(); }
+void cli() { noInterrupts(); }
 
 // enable interrupts
-void sei(void) { interrupts(); }
+void sei() { interrupts(); }
 */
 
-void HAL_clear_reset_source(void) { }
+void HAL_clear_reset_source() { }
 
 /**
  * TODO: Check this and change or remove.
  * currently returns 1 that's equal to poweron reset.
  */
-uint8_t HAL_get_reset_source(void) { return 1; }
+uint8_t HAL_get_reset_source() { return 1; }
 
 void _delay_ms(const int delay_ms) { delay(delay_ms); }
 
@@ -297,7 +297,7 @@ extern "C" {
 // ADC
 // ------------------------
 // Init the AD in continuous capture mode
-void HAL_adc_init(void) {
+void HAL_adc_init() {
   // configure the ADC
   adc.calibrate();
   #if F_CPU > 72000000
@@ -356,7 +356,7 @@ void HAL_adc_start_conversion(const uint8_t adc_pin) {
   HAL_adc_result = (HAL_adc_results[(int)pin_index] >> 2) & 0x3FF; // shift to get 10 bits only.
 }
 
-uint16_t HAL_adc_get_result(void) { return HAL_adc_result; }
+uint16_t HAL_adc_get_result() { return HAL_adc_result; }
 
 uint16_t analogRead(pin_t pin) {
   const bool is_analog = _GET_MODE(pin) == GPIO_INPUT_ANALOG;

commit f1162243f602aa45913996a8fd870efc4d5f5902
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Fri Sep 13 00:59:31 2019 +0200

    STM32F1: No USBSerial without USB-serial bridge (#15242)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index fd0c4a27a0..7e91a39f48 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -82,7 +82,7 @@
 // Public Variables
 // ------------------------
 
-#if (!defined(SERIAL_USB) && !defined(USE_USB_COMPOSITE))
+#if (defined(SERIAL_USB) && !defined(USE_USB_COMPOSITE))
   USBSerial SerialUSB;
 #endif
 

commit 05cd4834134aa8cd403ecee7c730ad73dc403f81
Author: reloxx13 <reloxx@interia.pl>
Date:   Wed Sep 11 19:12:58 2019 +0200

    STM32F1: Support M997 - Reset and begin flash (#15209)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index f3d0168342..fd0c4a27a0 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -369,4 +369,6 @@ void analogWrite(pin_t pin, int pwm_val8) {
     analogWrite(uint8_t(pin), pwm_val8);
 }
 
+void flashFirmware(int16_t value) { nvic_sys_reset(); }
+
 #endif // __STM32F1__

commit dbea6f0022dcb805e4b57c8f5b8dc6dce5820344
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Sep 8 02:27:23 2019 -0500

    STM32F1 USB cdc/msc composite device (#15180)
    
    Co-Authored-By: bigtreetech <38851044+bigtreetech@users.noreply.github.com>

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 3dbcfa76aa..f3d0168342 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -82,7 +82,7 @@
 // Public Variables
 // ------------------------
 
-#ifdef SERIAL_USB
+#if (!defined(SERIAL_USB) && !defined(USE_USB_COMPOSITE))
   USBSerial SerialUSB;
 #endif
 
@@ -215,6 +215,9 @@ void HAL_init(void) {
   #if PIN_EXISTS(LED)
     OUT_WRITE(LED_PIN, LOW);
   #endif
+  #ifdef USE_USB_COMPOSITE
+    MSC_SD_init();
+  #endif
   #if PIN_EXISTS(USB_CONNECT)
     OUT_WRITE(USB_CONNECT_PIN, !USB_CONNECT_INVERTING);  // USB clear connection
     delay(1000);                                         // Give OS time to notice
@@ -222,6 +225,24 @@ void HAL_init(void) {
   #endif
 }
 
+// HAL idle task
+void HAL_idletask(void) {
+  #ifdef USE_USB_COMPOSITE
+    #if ENABLED(SHARED_SD_CARD)
+      // If Marlin is using the SD card we need to lock it to prevent access from
+      // a PC via USB.
+      // Other HALs use IS_SD_PRINTING() and IS_SD_FILE_OPEN() to check for access but
+      // this will not reliably detect delete operations. To be safe we will lock
+      // the disk if Marlin has it mounted. Unfortuately there is currently no way
+      // to unmount the disk from the LCD menu.
+      // if (IS_SD_PRINTING() || IS_SD_FILE_OPEN())
+      /* copy from lpc1768 framework, should be fixed later for process SHARED_SD_CARD*/
+    #endif
+    // process USB mass storage device class loop
+    MarlinMSC.loop();
+  #endif
+}
+
 /* VGPV Done with defines
 // disable interrupts
 void cli(void) { noInterrupts(); }

commit dbee0e9c5424770b9abf8815c0cb8b49de7db77f
Author: Jamie <vector76@users.noreply.github.com>
Date:   Sun Sep 8 00:55:34 2019 -0500

    Analog joystick jogging control (#14648)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 1af050e203..3dbcfa76aa 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -121,6 +121,15 @@ const uint8_t adc_pins[] = {
   #if ENABLED(FILAMENT_WIDTH_SENSOR)
     FILWIDTH_PIN,
   #endif
+  #if HAS_JOY_ADC_X
+    JOY_X_PIN,
+  #endif
+  #if HAS_JOY_ADC_Y
+    JOY_Y_PIN,
+  #endif
+  #if HAS_JOY_ADC_Z
+    JOY_Z_PIN,
+  #endif
 };
 
 enum TEMP_PINS : char {
@@ -151,15 +160,20 @@ enum TEMP_PINS : char {
   #if ENABLED(FILAMENT_WIDTH_SENSOR)
     FILWIDTH,
   #endif
+  #if HAS_JOY_ADC_X
+    JOY_X,
+  #endif
+  #if HAS_JOY_ADC_Y
+    JOY_Y,
+  #endif
+  #if HAS_JOY_ADC_Z
+    JOY_Z,
+  #endif
   ADC_PIN_COUNT
 };
 
 uint16_t HAL_adc_results[ADC_PIN_COUNT];
 
-// ------------------------
-// Function prototypes
-// ------------------------
-
 // ------------------------
 // Private functions
 // ------------------------
@@ -305,6 +319,15 @@ void HAL_adc_start_conversion(const uint8_t adc_pin) {
     #if HAS_TEMP_ADC_5
       case TEMP_5_PIN: pin_index = TEMP_5; break;
     #endif
+    #if HAS_JOY_ADC_X
+      case JOY_X_PIN: pin_index = JOY_X; break;
+    #endif
+    #if HAS_JOY_ADC_Y
+      case JOY_Y_PIN: pin_index = JOY_Y; break;
+    #endif
+    #if HAS_JOY_ADC_Z
+      case JOY_Z_PIN: pin_index = JOY_Z; break;
+    #endif
     #if ENABLED(FILAMENT_WIDTH_SENSOR)
       case FILWIDTH_PIN: pin_index = FILWIDTH; break;
     #endif

commit 848dd740ba4ec555b0cab2e5730fb67b4d68bb0e
Author: BigTreeTech <38851044+bigtreetech@users.noreply.github.com>
Date:   Sat Aug 24 14:33:16 2019 +0800

    Fix STM32F1 ADC read temperature error (#15026)
    
    …after USB CDC connect.

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 17457343d0..1af050e203 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -93,7 +93,7 @@ uint16_t HAL_adc_result;
 // ------------------------
 STM32ADC adc(ADC1);
 
-uint8_t adc_pins[] = {
+const uint8_t adc_pins[] = {
   #if HAS_TEMP_ADC_0
     TEMP_0_PIN,
   #endif
@@ -270,7 +270,7 @@ void HAL_adc_init(void) {
   #else
     adc.setSampleRate(ADC_SMPR_41_5); // 41.5 ADC cycles
   #endif
-  adc.setPins(adc_pins, ADC_PIN_COUNT);
+  adc.setPins((uint8_t *)adc_pins, ADC_PIN_COUNT);
   adc.setDMA(HAL_adc_results, (uint16_t)ADC_PIN_COUNT, (uint32_t)(DMA_MINC_MODE | DMA_CIRC_MODE), nullptr);
   adc.setScanMode();
   adc.setContinuous();

commit a38b9da67286bcb285932d27046c64bded7ab076
Author: BigTreeTech <38851044+bigtreetech@users.noreply.github.com>
Date:   Sun Jul 21 09:35:41 2019 +0800

    STM32F1 SPI1 bugfix (#14679)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 0a58c45d1f..17457343d0 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -201,6 +201,11 @@ void HAL_init(void) {
   #if PIN_EXISTS(LED)
     OUT_WRITE(LED_PIN, LOW);
   #endif
+  #if PIN_EXISTS(USB_CONNECT)
+    OUT_WRITE(USB_CONNECT_PIN, !USB_CONNECT_INVERTING);  // USB clear connection
+    delay(1000);                                         // Give OS time to notice
+    OUT_WRITE(USB_CONNECT_PIN, USB_CONNECT_INVERTING);
+  #endif
 }
 
 /* VGPV Done with defines

commit 977cfa4494359e322142973d68a84f02c79aba8f
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Sat Jul 20 08:54:02 2019 +0200

    Fix a few recent (STM32F1 DOGM, SPI) warnings (#14669)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 69ac127a4e..0a58c45d1f 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -260,7 +260,11 @@ extern "C" {
 void HAL_adc_init(void) {
   // configure the ADC
   adc.calibrate();
-  adc.setSampleRate(ADC_SMPR_41_5); // ?
+  #if F_CPU > 72000000
+    adc.setSampleRate(ADC_SMPR_71_5); // 71.5 ADC cycles
+  #else
+    adc.setSampleRate(ADC_SMPR_41_5); // 41.5 ADC cycles
+  #endif
   adc.setPins(adc_pins, ADC_PIN_COUNT);
   adc.setDMA(HAL_adc_results, (uint16_t)ADC_PIN_COUNT, (uint32_t)(DMA_MINC_MODE | DMA_CIRC_MODE), nullptr);
   adc.setScanMode();

commit 056efaba91d45aa466e38699648c79709c4bfa09
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jul 9 22:30:06 2019 -0500

    Clean up section comments

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 16a2a012b6..69ac127a4e 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -27,22 +27,14 @@
 
 #ifdef __STM32F1__
 
-// --------------------------------------------------------------------------
-// Includes
-// --------------------------------------------------------------------------
-
 #include "HAL.h"
 #include "../../inc/MarlinConfig.h"
 
 #include <STM32ADC.h>
 
-// --------------------------------------------------------------------------
-// Externals
-// --------------------------------------------------------------------------
-
-// --------------------------------------------------------------------------
+// ------------------------
 // Types
-// --------------------------------------------------------------------------
+// ------------------------
 
 #define __I
 #define __IO volatile
@@ -70,13 +62,10 @@
    __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Register                   */
  } SCB_Type;
 
-// --------------------------------------------------------------------------
-// Variables
-// --------------------------------------------------------------------------
-
-// --------------------------------------------------------------------------
+// ------------------------
 // Local defines
-// --------------------------------------------------------------------------
+// ------------------------
+
 #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address  */
 #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address  */
 
@@ -89,18 +78,19 @@
 #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB AIRCR: PRIGROUP Position */
 #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */
 
-// --------------------------------------------------------------------------
+// ------------------------
 // Public Variables
-// --------------------------------------------------------------------------
+// ------------------------
+
 #ifdef SERIAL_USB
   USBSerial SerialUSB;
 #endif
 
 uint16_t HAL_adc_result;
 
-// --------------------------------------------------------------------------
+// ------------------------
 // Private Variables
-// --------------------------------------------------------------------------
+// ------------------------
 STM32ADC adc(ADC1);
 
 uint8_t adc_pins[] = {
@@ -166,13 +156,13 @@ enum TEMP_PINS : char {
 
 uint16_t HAL_adc_results[ADC_PIN_COUNT];
 
-// --------------------------------------------------------------------------
+// ------------------------
 // Function prototypes
-// --------------------------------------------------------------------------
+// ------------------------
 
-// --------------------------------------------------------------------------
+// ------------------------
 // Private functions
-// --------------------------------------------------------------------------
+// ------------------------
 static void NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
   uint32_t reg_value;
   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
@@ -185,9 +175,9 @@ static void NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
   SCB->AIRCR =  reg_value;
 }
 
-// --------------------------------------------------------------------------
+// ------------------------
 // Public functions
-// --------------------------------------------------------------------------
+// ------------------------
 
 //
 // Leave PA11/PA12 intact if USBSerial is not used
@@ -263,9 +253,9 @@ extern "C" {
 }
 */
 
-// --------------------------------------------------------------------------
+// ------------------------
 // ADC
-// --------------------------------------------------------------------------
+// ------------------------
 // Init the AD in continuous capture mode
 void HAL_adc_init(void) {
   // configure the ADC

commit 052aa23efea2eac07635d191c2c612a93187a6c8
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Sat Jul 6 04:13:32 2019 +0200

    STM32F1: ignore output check for analogWrite() (#14498)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 2bbbd8b48b..16a2a012b6 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -322,7 +322,7 @@ uint16_t analogRead(pin_t pin) {
 
 // Wrapper to maple unprotected analogWrite
 void analogWrite(pin_t pin, int pwm_val8) {
-  if (PWM_PIN(pin) && IS_OUTPUT(pin))
+  if (PWM_PIN(pin))
     analogWrite(uint8_t(pin), pwm_val8);
 }
 

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index a3b3318d2f..2bbbd8b48b 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -1,7 +1,7 @@
 /**
  * Marlin 3D Printer Firmware
  *
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  * Copyright (c) 2016 Bob Cousins bobcousins42@googlemail.com
  * Copyright (c) 2015-2016 Nico Tonnhofer wurstnase.reprap@gmail.com
  * Copyright (c) 2017 Victor Perez

commit 52383633e7062bf5ffd72d9c41c4cf7df05c544c
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Fri Jun 21 08:20:17 2019 +0200

    STM32F1: M43 PINS_DEBUGGING (#14072)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 9c380bb609..a3b3318d2f 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -32,9 +32,10 @@
 // --------------------------------------------------------------------------
 
 #include "HAL.h"
-#include <STM32ADC.h>
 #include "../../inc/MarlinConfig.h"
 
+#include <STM32ADC.h>
+
 // --------------------------------------------------------------------------
 // Externals
 // --------------------------------------------------------------------------
@@ -314,4 +315,15 @@ void HAL_adc_start_conversion(const uint8_t adc_pin) {
 
 uint16_t HAL_adc_get_result(void) { return HAL_adc_result; }
 
+uint16_t analogRead(pin_t pin) {
+  const bool is_analog = _GET_MODE(pin) == GPIO_INPUT_ANALOG;
+  return is_analog ? analogRead(uint8_t(pin)) : 0;
+}
+
+// Wrapper to maple unprotected analogWrite
+void analogWrite(pin_t pin, int pwm_val8) {
+  if (PWM_PIN(pin) && IS_OUTPUT(pin))
+    analogWrite(uint8_t(pin), pwm_val8);
+}
+
 #endif // __STM32F1__

commit 287df7a61f9a857f693aee8862497271b892823e
Author: Tanguy Pruvot <tanguy.pruvot@gmail.com>
Date:   Mon Jun 17 10:16:23 2019 +0200

    STM32F1: various small changes
    
    - init the led pin as output (like other HALs)
    - reduce sdio dma priority to normal.. highest is never the best...
    - allow fsmc only on compatible STM32F1 (like HAL fsmc)
    - fsmc: remove an useless C style cast

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 89bece08bb..9c380bb609 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -45,8 +45,7 @@
 
 #define __I
 #define __IO volatile
- typedef struct
- {
+ typedef struct {
    __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register                                   */
    __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */
    __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */
@@ -161,12 +160,11 @@ enum TEMP_PINS : char {
   #if ENABLED(FILAMENT_WIDTH_SENSOR)
     FILWIDTH,
   #endif
-    ADC_PIN_COUNT
+  ADC_PIN_COUNT
 };
 
 uint16_t HAL_adc_results[ADC_PIN_COUNT];
 
-
 // --------------------------------------------------------------------------
 // Function prototypes
 // --------------------------------------------------------------------------
@@ -209,6 +207,9 @@ static void NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 
 void HAL_init(void) {
   NVIC_SetPriorityGrouping(0x3);
+  #if PIN_EXISTS(LED)
+    OUT_WRITE(LED_PIN, LOW);
+  #endif
 }
 
 /* VGPV Done with defines

commit ad4ffa1d2fbd17ac09c816ba2052cdf714261042
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 9 11:45:55 2019 -0500

    Use C++ language supported 'nullptr' (#13944)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index c2d0325e65..89bece08bb 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -270,7 +270,7 @@ void HAL_adc_init(void) {
   adc.calibrate();
   adc.setSampleRate(ADC_SMPR_41_5); // ?
   adc.setPins(adc_pins, ADC_PIN_COUNT);
-  adc.setDMA(HAL_adc_results, (uint16_t)ADC_PIN_COUNT, (uint32_t)(DMA_MINC_MODE | DMA_CIRC_MODE), (void (*)())NULL);
+  adc.setDMA(HAL_adc_results, (uint16_t)ADC_PIN_COUNT, (uint32_t)(DMA_MINC_MODE | DMA_CIRC_MODE), nullptr);
   adc.setScanMode();
   adc.setContinuous();
   adc.startConversion();

commit e53d7e55175a08bc0788547cbabb33f7fdce8778
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Thu May 9 07:33:38 2019 +0200

    STM32: ADC warning fix (#13933)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 1534a35756..c2d0325e65 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -279,6 +279,7 @@ void HAL_adc_init(void) {
 void HAL_adc_start_conversion(const uint8_t adc_pin) {
   TEMP_PINS pin_index;
   switch (adc_pin) {
+    default: return;
     #if HAS_TEMP_ADC_0
       case TEMP_0_PIN: pin_index = TEMP_0; break;
     #endif
@@ -310,8 +311,6 @@ void HAL_adc_start_conversion(const uint8_t adc_pin) {
   HAL_adc_result = (HAL_adc_results[(int)pin_index] >> 2) & 0x3FF; // shift to get 10 bits only.
 }
 
-uint16_t HAL_adc_get_result(void) {
-  return HAL_adc_result;
-}
+uint16_t HAL_adc_get_result(void) { return HAL_adc_result; }
 
 #endif // __STM32F1__

commit 51ff5b68fa7589f711958a71df149c18c04dd8c0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Mar 12 20:39:55 2019 -0500

    Clean up fastIO ahead of PWM patch

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 34b590ca85..1534a35756 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -207,7 +207,6 @@ static void NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
   } }
 #endif
 
-
 void HAL_init(void) {
   NVIC_SetPriorityGrouping(0x3);
 }

commit fb3302feda2fc07ac761710f7528dfbbcf9497cf
Author: Msq001 <760675063@qq.com>
Date:   Fri Mar 8 16:21:32 2019 +0800

    Fix STM32F1 Serial and ADC pins (#13331)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index cd5c5553c4..34b590ca85 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -33,6 +33,7 @@
 
 #include "HAL.h"
 #include <STM32ADC.h>
+#include "../../inc/MarlinConfig.h"
 
 // --------------------------------------------------------------------------
 // Externals
@@ -91,7 +92,9 @@
 // --------------------------------------------------------------------------
 // Public Variables
 // --------------------------------------------------------------------------
-USBSerial SerialUSB;
+#ifdef SERIAL_USB
+  USBSerial SerialUSB;
+#endif
 
 uint16_t HAL_adc_result;
 

commit 44571775bd7eae600e689ce0f3d02f851e9cc733
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Mar 7 01:00:44 2019 -0600

    Further support for 6 extruders

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index ce9eb92b14..cd5c5553c4 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -104,6 +104,12 @@ uint8_t adc_pins[] = {
   #if HAS_TEMP_ADC_0
     TEMP_0_PIN,
   #endif
+  #if HAS_HEATED_BED
+    TEMP_BED_PIN,
+  #endif
+  #if HAS_HEATED_CHAMBER
+    TEMP_CHAMBER_PIN,
+  #endif
   #if HAS_TEMP_ADC_1
     TEMP_1_PIN,
   #endif
@@ -116,8 +122,8 @@ uint8_t adc_pins[] = {
   #if HAS_TEMP_ADC_4
     TEMP_4_PIN,
   #endif
-  #if HAS_HEATED_BED
-    TEMP_BED_PIN,
+  #if HAS_TEMP_ADC_5
+    TEMP_5_PIN,
   #endif
   #if ENABLED(FILAMENT_WIDTH_SENSOR)
     FILWIDTH_PIN,
@@ -128,6 +134,12 @@ enum TEMP_PINS : char {
   #if HAS_TEMP_ADC_0
     TEMP_0,
   #endif
+  #if HAS_HEATED_BED
+    TEMP_BED,
+  #endif
+  #if HAS_HEATED_CHAMBER
+    TEMP_CHAMBER,
+  #endif
   #if HAS_TEMP_ADC_1
     TEMP_1,
   #endif
@@ -140,8 +152,8 @@ enum TEMP_PINS : char {
   #if HAS_TEMP_ADC_4
     TEMP_4,
   #endif
-  #if HAS_HEATED_BED
-    TEMP_BED,
+  #if HAS_TEMP_ADC_5
+    TEMP_5,
   #endif
   #if ENABLED(FILAMENT_WIDTH_SENSOR)
     FILWIDTH,
@@ -268,6 +280,12 @@ void HAL_adc_start_conversion(const uint8_t adc_pin) {
     #if HAS_TEMP_ADC_0
       case TEMP_0_PIN: pin_index = TEMP_0; break;
     #endif
+    #if HAS_HEATED_BED
+      case TEMP_BED_PIN: pin_index = TEMP_BED; break;
+    #endif
+    #if HAS_HEATED_CHAMBER
+      case TEMP_CHAMBER_PIN: pin_index = TEMP_CHAMBER; break;
+    #endif
     #if HAS_TEMP_ADC_1
       case TEMP_1_PIN: pin_index = TEMP_1; break;
     #endif
@@ -280,8 +298,8 @@ void HAL_adc_start_conversion(const uint8_t adc_pin) {
     #if HAS_TEMP_ADC_4
       case TEMP_4_PIN: pin_index = TEMP_4; break;
     #endif
-    #if HAS_HEATED_BED
-      case TEMP_BED_PIN: pin_index = TEMP_BED; break;
+    #if HAS_TEMP_ADC_5
+      case TEMP_5_PIN: pin_index = TEMP_5; break;
     #endif
     #if ENABLED(FILAMENT_WIDTH_SENSOR)
       case FILWIDTH_PIN: pin_index = FILWIDTH; break;

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index fcf9fba6b5..ce9eb92b14 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -1,7 +1,7 @@
 /**
  * Marlin 3D Printer Firmware
  *
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  * Copyright (c) 2016 Bob Cousins bobcousins42@googlemail.com
  * Copyright (c) 2015-2016 Nico Tonnhofer wurstnase.reprap@gmail.com
  * Copyright (c) 2017 Victor Perez

commit 3e867008f0fae036c5ad40960f379111d768d290
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Jan 12 15:10:21 2019 -0600

    Fix some HAL_STM32F1 type declarations

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index c70e386b60..fcf9fba6b5 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -100,7 +100,7 @@ uint16_t HAL_adc_result;
 // --------------------------------------------------------------------------
 STM32ADC adc(ADC1);
 
-uint8 adc_pins[] = {
+uint8_t adc_pins[] = {
   #if HAS_TEMP_ADC_0
     TEMP_0_PIN,
   #endif

commit 33abb86b7e3ee24bfb0cd0219f777e69a78987de
Author: jmz52 <jmz52@users.noreply.github.com>
Date:   Fri Dec 21 02:23:27 2018 +0300

    Add support for MKS Robin board (#12650)
    
    Implement initial support for MKS Robin (STM32F103ZET6) board.
    Custom build script is used to generate encrypted firmware compatible with original MSK Robin bootloader (i.e. safe firmware update from SD card and possibility to go back to original close-source firmware).

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index 95dbb0a502..c70e386b60 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -43,7 +43,7 @@
 // --------------------------------------------------------------------------
 
 #define __I
-#define __IO
+#define __IO volatile
  typedef struct
  {
    __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register                                   */
@@ -105,7 +105,7 @@ uint8 adc_pins[] = {
     TEMP_0_PIN,
   #endif
   #if HAS_TEMP_ADC_1
-    TEMP_1_PIN
+    TEMP_1_PIN,
   #endif
   #if HAS_TEMP_ADC_2
     TEMP_2_PIN,
@@ -175,6 +175,24 @@ static void NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 // Public functions
 // --------------------------------------------------------------------------
 
+//
+// Leave PA11/PA12 intact if USBSerial is not used
+//
+#if SERIAL_USB
+  namespace wirish { namespace priv {
+    #if SERIAL_PORT > 0
+      #if SERIAL_PORT2
+        #if SERIAL_PORT2 > 0
+          void board_setup_usb(void) {}
+        #endif
+      #else
+        void board_setup_usb(void) {}
+      #endif
+    #endif
+  } }
+#endif
+
+
 void HAL_init(void) {
   NVIC_SetPriorityGrouping(0x3);
 }

commit 81b632c2558257c31b2f762e9bf8237c03638e07
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 1 19:33:41 2018 -0500

    Additional temp-oriented improvements

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index f75a071bce..95dbb0a502 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -101,19 +101,19 @@ uint16_t HAL_adc_result;
 STM32ADC adc(ADC1);
 
 uint8 adc_pins[] = {
-  #if HAS_TEMP_0
+  #if HAS_TEMP_ADC_0
     TEMP_0_PIN,
   #endif
-  #if HAS_TEMP_1
+  #if HAS_TEMP_ADC_1
     TEMP_1_PIN
   #endif
-  #if HAS_TEMP_2
+  #if HAS_TEMP_ADC_2
     TEMP_2_PIN,
   #endif
-  #if HAS_TEMP_3
+  #if HAS_TEMP_ADC_3
     TEMP_3_PIN,
   #endif
-  #if HAS_TEMP_4
+  #if HAS_TEMP_ADC_4
     TEMP_4_PIN,
   #endif
   #if HAS_HEATED_BED
@@ -125,19 +125,19 @@ uint8 adc_pins[] = {
 };
 
 enum TEMP_PINS : char {
-  #if HAS_TEMP_0
+  #if HAS_TEMP_ADC_0
     TEMP_0,
   #endif
-  #if HAS_TEMP_1
+  #if HAS_TEMP_ADC_1
     TEMP_1,
   #endif
-  #if HAS_TEMP_2
+  #if HAS_TEMP_ADC_2
     TEMP_2,
   #endif
-  #if HAS_TEMP_3
+  #if HAS_TEMP_ADC_3
     TEMP_3,
   #endif
-  #if HAS_TEMP_4
+  #if HAS_TEMP_ADC_4
     TEMP_4,
   #endif
   #if HAS_HEATED_BED
@@ -247,19 +247,19 @@ void HAL_adc_init(void) {
 void HAL_adc_start_conversion(const uint8_t adc_pin) {
   TEMP_PINS pin_index;
   switch (adc_pin) {
-    #if HAS_TEMP_0
+    #if HAS_TEMP_ADC_0
       case TEMP_0_PIN: pin_index = TEMP_0; break;
     #endif
-    #if HAS_TEMP_1
+    #if HAS_TEMP_ADC_1
       case TEMP_1_PIN: pin_index = TEMP_1; break;
     #endif
-    #if HAS_TEMP_2
+    #if HAS_TEMP_ADC_2
       case TEMP_2_PIN: pin_index = TEMP_2; break;
     #endif
-    #if HAS_TEMP_3
+    #if HAS_TEMP_ADC_3
       case TEMP_3_PIN: pin_index = TEMP_3; break;
     #endif
-    #if HAS_TEMP_4
+    #if HAS_TEMP_ADC_4
       case TEMP_4_PIN: pin_index = TEMP_4; break;
     #endif
     #if HAS_HEATED_BED

commit 5b5e322356a23b6f107a50a84dd0fc65a0a388af
Author: J.C. Nelson <32139633+xC0000005@users.noreply.github.com>
Date:   Wed Apr 25 22:21:16 2018 -0700

    Set Interrupt Priorities and Grouping for STM32F103. (#10517)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index e900f4a32a..f75a071bce 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -34,23 +34,59 @@
 #include "HAL.h"
 #include <STM32ADC.h>
 
-//#include <Wire.h>
-
 // --------------------------------------------------------------------------
 // Externals
 // --------------------------------------------------------------------------
 
 // --------------------------------------------------------------------------
-// Local defines
+// Types
 // --------------------------------------------------------------------------
 
+#define __I
+#define __IO
+ typedef struct
+ {
+   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register                                   */
+   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */
+   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */
+   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */
+   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */
+   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */
+   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15) */
+   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State Register             */
+   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Register                    */
+   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register                             */
+   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register                           */
+   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register                      */
+   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register                             */
+   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register                       */
+   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register                            */
+   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register                                */
+   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register                            */
+   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register                         */
+   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Register                   */
+        uint32_t RESERVED0[5];
+   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Register                   */
+ } SCB_Type;
+
 // --------------------------------------------------------------------------
-// Types
+// Variables
 // --------------------------------------------------------------------------
 
 // --------------------------------------------------------------------------
-// Variables
+// Local defines
 // --------------------------------------------------------------------------
+#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address  */
+#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address  */
+
+#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct           */
+
+/* SCB Application Interrupt and Reset Control Register Definitions */
+#define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */
+#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
+
+#define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB AIRCR: PRIGROUP Position */
+#define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */
 
 // --------------------------------------------------------------------------
 // Public Variables
@@ -123,11 +159,26 @@ uint16_t HAL_adc_results[ADC_PIN_COUNT];
 // --------------------------------------------------------------------------
 // Private functions
 // --------------------------------------------------------------------------
+static void NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
+  uint32_t reg_value;
+  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
+
+  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
+  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
+  reg_value  =  (reg_value                                 |
+                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
+                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
+  SCB->AIRCR =  reg_value;
+}
 
 // --------------------------------------------------------------------------
 // Public functions
 // --------------------------------------------------------------------------
 
+void HAL_init(void) {
+  NVIC_SetPriorityGrouping(0x3);
+}
+
 /* VGPV Done with defines
 // disable interrupts
 void cli(void) { noInterrupts(); }

commit cb46cb8480c33ffc9f6361b96ed200986a3bd9ac
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Apr 23 17:13:01 2018 -0500

    Add HAS_HEATED_BED conditional (#10495)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
index d1ec010ea8..e900f4a32a 100644
--- a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -80,7 +80,7 @@ uint8 adc_pins[] = {
   #if HAS_TEMP_4
     TEMP_4_PIN,
   #endif
-  #if HAS_TEMP_BED
+  #if HAS_HEATED_BED
     TEMP_BED_PIN,
   #endif
   #if ENABLED(FILAMENT_WIDTH_SENSOR)
@@ -104,7 +104,7 @@ enum TEMP_PINS : char {
   #if HAS_TEMP_4
     TEMP_4,
   #endif
-  #if HAS_TEMP_BED
+  #if HAS_HEATED_BED
     TEMP_BED,
   #endif
   #if ENABLED(FILAMENT_WIDTH_SENSOR)
@@ -211,7 +211,7 @@ void HAL_adc_start_conversion(const uint8_t adc_pin) {
     #if HAS_TEMP_4
       case TEMP_4_PIN: pin_index = TEMP_4; break;
     #endif
-    #if HAS_TEMP_BED
+    #if HAS_HEATED_BED
       case TEMP_BED_PIN: pin_index = TEMP_BED; break;
     #endif
     #if ENABLED(FILAMENT_WIDTH_SENSOR)

commit cc6d41e1d3446b54f219afbcf79ee7785079b6fb
Author: Chris Pepper <p3p@p3psoft.co.uk>
Date:   Fri Apr 13 02:25:08 2018 +0100

    Use a macro for HAL header redirection (#10380)

diff --git a/Marlin/src/HAL/HAL_STM32F1/HAL.cpp b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
new file mode 100644
index 0000000000..d1ec010ea8
--- /dev/null
+++ b/Marlin/src/HAL/HAL_STM32F1/HAL.cpp
@@ -0,0 +1,228 @@
+/**
+ * Marlin 3D Printer Firmware
+ *
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2016 Bob Cousins bobcousins42@googlemail.com
+ * Copyright (c) 2015-2016 Nico Tonnhofer wurstnase.reprap@gmail.com
+ * Copyright (c) 2017 Victor Perez
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * HAL for stm32duino.com based on Libmaple and compatible (STM32F1)
+ */
+
+#ifdef __STM32F1__
+
+// --------------------------------------------------------------------------
+// Includes
+// --------------------------------------------------------------------------
+
+#include "HAL.h"
+#include <STM32ADC.h>
+
+//#include <Wire.h>
+
+// --------------------------------------------------------------------------
+// Externals
+// --------------------------------------------------------------------------
+
+// --------------------------------------------------------------------------
+// Local defines
+// --------------------------------------------------------------------------
+
+// --------------------------------------------------------------------------
+// Types
+// --------------------------------------------------------------------------
+
+// --------------------------------------------------------------------------
+// Variables
+// --------------------------------------------------------------------------
+
+// --------------------------------------------------------------------------
+// Public Variables
+// --------------------------------------------------------------------------
+USBSerial SerialUSB;
+
+uint16_t HAL_adc_result;
+
+// --------------------------------------------------------------------------
+// Private Variables
+// --------------------------------------------------------------------------
+STM32ADC adc(ADC1);
+
+uint8 adc_pins[] = {
+  #if HAS_TEMP_0
+    TEMP_0_PIN,
+  #endif
+  #if HAS_TEMP_1
+    TEMP_1_PIN
+  #endif
+  #if HAS_TEMP_2
+    TEMP_2_PIN,
+  #endif
+  #if HAS_TEMP_3
+    TEMP_3_PIN,
+  #endif
+  #if HAS_TEMP_4
+    TEMP_4_PIN,
+  #endif
+  #if HAS_TEMP_BED
+    TEMP_BED_PIN,
+  #endif
+  #if ENABLED(FILAMENT_WIDTH_SENSOR)
+    FILWIDTH_PIN,
+  #endif
+};
+
+enum TEMP_PINS : char {
+  #if HAS_TEMP_0
+    TEMP_0,
+  #endif
+  #if HAS_TEMP_1
+    TEMP_1,
+  #endif
+  #if HAS_TEMP_2
+    TEMP_2,
+  #endif
+  #if HAS_TEMP_3
+    TEMP_3,
+  #endif
+  #if HAS_TEMP_4
+    TEMP_4,
+  #endif
+  #if HAS_TEMP_BED
+    TEMP_BED,
+  #endif
+  #if ENABLED(FILAMENT_WIDTH_SENSOR)
+    FILWIDTH,
+  #endif
+    ADC_PIN_COUNT
+};
+
+uint16_t HAL_adc_results[ADC_PIN_COUNT];
+
+
+// --------------------------------------------------------------------------
+// Function prototypes
+// --------------------------------------------------------------------------
+
+// --------------------------------------------------------------------------
+// Private functions
+// --------------------------------------------------------------------------
+
+// --------------------------------------------------------------------------
+// Public functions
+// --------------------------------------------------------------------------
+
+/* VGPV Done with defines
+// disable interrupts
+void cli(void) { noInterrupts(); }
+
+// enable interrupts
+void sei(void) { interrupts(); }
+*/
+
+void HAL_clear_reset_source(void) { }
+
+/**
+ * TODO: Check this and change or remove.
+ * currently returns 1 that's equal to poweron reset.
+ */
+uint8_t HAL_get_reset_source(void) { return 1; }
+
+void _delay_ms(const int delay_ms) { delay(delay_ms); }
+
+extern "C" {
+  extern unsigned int _ebss; // end of bss section
+}
+
+/**
+ * TODO: Change this to correct it for libmaple
+ */
+
+// return free memory between end of heap (or end bss) and whatever is current
+
+/*
+#include "wirish/syscalls.c"
+//extern caddr_t _sbrk(int incr);
+#ifndef CONFIG_HEAP_END
+extern char _lm_heap_end;
+#define CONFIG_HEAP_END ((caddr_t)&_lm_heap_end)
+#endif
+
+extern "C" {
+  static int freeMemory() {
+    char top = 't';
+    return &top - reinterpret_cast<char*>(sbrk(0));
+  }
+  int freeMemory() {
+    int free_memory;
+    int heap_end = (int)_sbrk(0);
+    free_memory = ((int)&free_memory) - ((int)heap_end);
+    return free_memory;
+  }
+}
+*/
+
+// --------------------------------------------------------------------------
+// ADC
+// --------------------------------------------------------------------------
+// Init the AD in continuous capture mode
+void HAL_adc_init(void) {
+  // configure the ADC
+  adc.calibrate();
+  adc.setSampleRate(ADC_SMPR_41_5); // ?
+  adc.setPins(adc_pins, ADC_PIN_COUNT);
+  adc.setDMA(HAL_adc_results, (uint16_t)ADC_PIN_COUNT, (uint32_t)(DMA_MINC_MODE | DMA_CIRC_MODE), (void (*)())NULL);
+  adc.setScanMode();
+  adc.setContinuous();
+  adc.startConversion();
+}
+
+void HAL_adc_start_conversion(const uint8_t adc_pin) {
+  TEMP_PINS pin_index;
+  switch (adc_pin) {
+    #if HAS_TEMP_0
+      case TEMP_0_PIN: pin_index = TEMP_0; break;
+    #endif
+    #if HAS_TEMP_1
+      case TEMP_1_PIN: pin_index = TEMP_1; break;
+    #endif
+    #if HAS_TEMP_2
+      case TEMP_2_PIN: pin_index = TEMP_2; break;
+    #endif
+    #if HAS_TEMP_3
+      case TEMP_3_PIN: pin_index = TEMP_3; break;
+    #endif
+    #if HAS_TEMP_4
+      case TEMP_4_PIN: pin_index = TEMP_4; break;
+    #endif
+    #if HAS_TEMP_BED
+      case TEMP_BED_PIN: pin_index = TEMP_BED; break;
+    #endif
+    #if ENABLED(FILAMENT_WIDTH_SENSOR)
+      case FILWIDTH_PIN: pin_index = FILWIDTH; break;
+    #endif
+  }
+  HAL_adc_result = (HAL_adc_results[(int)pin_index] >> 2) & 0x3FF; // shift to get 10 bits only.
+}
+
+uint16_t HAL_adc_get_result(void) {
+  return HAL_adc_result;
+}
+
+#endif // __STM32F1__
