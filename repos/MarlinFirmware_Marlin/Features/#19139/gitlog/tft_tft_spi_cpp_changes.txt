commit f3fd9e28f5d6fae59c55742a2e70e2d6a3330aeb
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Tue Dec 12 14:30:28 2023 +1300

    üêõ Fix MKS TS35 with BTT SKR 1.3/1.4 (#26176)

diff --git a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
index 2342de002d..beaadaf519 100644
--- a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
+++ b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
@@ -55,11 +55,19 @@ void TFT_SPI::dataTransferBegin(uint16_t dataSize) {
   WRITE(TFT_CS_PIN, LOW);
 }
 
+#ifdef TFT_DEFAULT_DRIVER
+  #include "../../../lcd/tft_io/tft_ids.h"
+#endif
+
 uint32_t TFT_SPI::getID() {
   uint32_t id;
   id = readID(LCD_READ_ID);
   if ((id & 0xFFFF) == 0 || (id & 0xFFFF) == 0xFFFF)
     id = readID(LCD_READ_ID4);
+    #ifdef TFT_DEFAULT_DRIVER
+      if ((id & 0xFFFF) == 0 || (id & 0xFFFF) == 0xFFFF)
+        id = TFT_DEFAULT_DRIVER;
+    #endif
   return id;
 }
 

commit 9bf95418a7fbc0da0a6dc8bfb5024b624b94a51a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jun 24 02:57:58 2023 -0500

    üêõ Fix TFT_LTDC::writeReg
    
    Followup to #25939

diff --git a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
index 440e9f8598..2342de002d 100644
--- a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
+++ b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
@@ -63,7 +63,7 @@ uint32_t TFT_SPI::getID() {
   return id;
 }
 
-uint32_t TFT_SPI::readID(uint16_t reg) {
+uint32_t TFT_SPI::readID(const uint16_t inReg) {
   uint32_t data = 0;
 
   #if PIN_EXISTS(TFT_MISO)
@@ -72,7 +72,7 @@ uint32_t TFT_SPI::readID(uint16_t reg) {
     SPIx.setClock(SPI_CLOCK_DIV64);
     SPIx.begin();
     WRITE(TFT_CS_PIN, LOW);
-    writeReg(reg);
+    writeReg(inReg);
 
     for (uint8_t i = 0; i < 4; ++i) {
       SPIx.read((uint8_t*)&d, 1);

commit c3694f1c038fa20ad749118b0a1c7aa88e3dd5f2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jun 14 17:24:50 2023 -0500

    üé® Lowercase methods, functions, data members (#25939)
    
    For: TFT, DGUS, MarlinUI, Anycubic, JyersUI, CrealityUI

diff --git a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
index c148617785..440e9f8598 100644
--- a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
+++ b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
@@ -30,7 +30,7 @@
 
 SPIClass TFT_SPI::SPIx(TFT_SPI_DEVICE);
 
-void TFT_SPI::Init() {
+void TFT_SPI::init() {
   #if PIN_EXISTS(TFT_RESET)
     OUT_WRITE(TFT_RESET_PIN, HIGH);
     delay(100);
@@ -49,21 +49,21 @@ void TFT_SPI::Init() {
   SPIx.setDataMode(SPI_MODE0);
 }
 
-void TFT_SPI::DataTransferBegin(uint16_t DataSize) {
-  SPIx.setDataSize(DataSize);
+void TFT_SPI::dataTransferBegin(uint16_t dataSize) {
+  SPIx.setDataSize(dataSize);
   SPIx.begin();
   WRITE(TFT_CS_PIN, LOW);
 }
 
-uint32_t TFT_SPI::GetID() {
+uint32_t TFT_SPI::getID() {
   uint32_t id;
-  id = ReadID(LCD_READ_ID);
+  id = readID(LCD_READ_ID);
   if ((id & 0xFFFF) == 0 || (id & 0xFFFF) == 0xFFFF)
-    id = ReadID(LCD_READ_ID4);
+    id = readID(LCD_READ_ID4);
   return id;
 }
 
-uint32_t TFT_SPI::ReadID(uint16_t Reg) {
+uint32_t TFT_SPI::readID(uint16_t reg) {
   uint32_t data = 0;
 
   #if PIN_EXISTS(TFT_MISO)
@@ -72,14 +72,14 @@ uint32_t TFT_SPI::ReadID(uint16_t Reg) {
     SPIx.setClock(SPI_CLOCK_DIV64);
     SPIx.begin();
     WRITE(TFT_CS_PIN, LOW);
-    WriteReg(Reg);
+    writeReg(reg);
 
     for (uint8_t i = 0; i < 4; ++i) {
       SPIx.read((uint8_t*)&d, 1);
       data = (data << 8) | d;
     }
 
-    DataTransferEnd();
+    dataTransferEnd();
     SPIx.setClock(SPI_CLOCK_MAX_TFT);
   #endif
 
@@ -103,11 +103,11 @@ bool TFT_SPI::isBusy() {
     if ((SSP_GetStatus(LPC_SSPx, SSP_STAT_TXFIFO_EMPTY) == RESET) || (SSP_GetStatus(LPC_SSPx, SSP_STAT_BUSY) == SET)) return true;
   }
 
-  Abort();
+  abort();
   return false;
 }
 
-void TFT_SPI::Abort() {
+void TFT_SPI::abort() {
   // DMA Channel 0 is hardcoded in dmaSendAsync() and dmaSend()
 
   // Disable DMA
@@ -126,20 +126,20 @@ void TFT_SPI::Abort() {
   LPC_GPDMACH0->DMACCSrcAddr  = 0U;
   LPC_GPDMACH0->DMACCDestAddr = 0U;
 
-  DataTransferEnd();
+  dataTransferEnd();
 }
 
-void TFT_SPI::Transmit(uint16_t Data) { SPIx.transfer(Data); }
+void TFT_SPI::transmit(uint16_t data) { SPIx.transfer(data); }
 
-void TFT_SPI::Transmit(uint32_t MemoryIncrease, uint16_t *Data, uint16_t Count) {
-  DataTransferBegin(DATASIZE_16BIT);
-  SPIx.dmaSend(Data, Count, MemoryIncrease);
-  Abort();
+void TFT_SPI::transmit(uint32_t memoryIncrease, uint16_t *data, uint16_t count) {
+  dataTransferBegin(DATASIZE_16BIT);
+  SPIx.dmaSend(data, count, memoryIncrease);
+  abort();
 }
 
-void TFT_SPI::TransmitDMA(uint32_t MemoryIncrease, uint16_t *Data, uint16_t Count) {
-  DataTransferBegin(DATASIZE_16BIT);
-  SPIx.dmaSendAsync(Data, Count, MemoryIncrease);
+void TFT_SPI::transmitDMA(uint32_t memoryIncrease, uint16_t *data, uint16_t count) {
+  dataTransferBegin(DATASIZE_16BIT);
+  SPIx.dmaSendAsync(data, count, memoryIncrease);
 
   TERN_(TFT_SHARED_IO, while (isBusy()));
 }

commit 86c811660ebf0b3fcbae2f34273d4c9d0c22abc4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:30:34 2023 -0500

    üßë‚Äçüíª Remove LOOP macros (#25917)

diff --git a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
index 10555762b1..c148617785 100644
--- a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
+++ b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
@@ -74,7 +74,7 @@ uint32_t TFT_SPI::ReadID(uint16_t Reg) {
     WRITE(TFT_CS_PIN, LOW);
     WriteReg(Reg);
 
-    LOOP_L_N(i, 4) {
+    for (uint8_t i = 0; i < 4; ++i) {
       SPIx.read((uint8_t*)&d, 1);
       data = (data << 8) | d;
     }

commit 9a7d9e6995f4f66c4b48147ec7876d49d4b3ae77
Author: Martin Turski <turningtides@outlook.de>
Date:   Thu Apr 27 14:05:24 2023 +0200

    üßë‚Äçüíª Optimize PlatformIO source filtering (#25332)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
index abf1cf5e43..10555762b1 100644
--- a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
+++ b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
@@ -20,6 +20,8 @@
  *
  */
 
+#ifdef TARGET_LPC1768
+
 #include "../../../inc/MarlinConfig.h"
 
 #if HAS_SPI_TFT
@@ -143,3 +145,4 @@ void TFT_SPI::TransmitDMA(uint32_t MemoryIncrease, uint16_t *Data, uint16_t Coun
 }
 
 #endif // HAS_SPI_TFT
+#endif // TARGET_LPC1768

commit e0132f7a1ec256ffe07d44c181fe1f2a799fd109
Author: Alexander Gavrilenko <jmz52@users.noreply.github.com>
Date:   Mon Mar 27 21:17:02 2023 +0300

    ‚ö°Ô∏è Improve TFT DMA for STM32 (#25359)

diff --git a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
index 804fc85e79..abf1cf5e43 100644
--- a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
+++ b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
@@ -139,7 +139,7 @@ void TFT_SPI::TransmitDMA(uint32_t MemoryIncrease, uint16_t *Data, uint16_t Coun
   DataTransferBegin(DATASIZE_16BIT);
   SPIx.dmaSendAsync(Data, Count, MemoryIncrease);
 
-  TERN_(TFT_SHARED_SPI, while (isBusy()));
+  TERN_(TFT_SHARED_IO, while (isBusy()));
 }
 
 #endif // HAS_SPI_TFT

commit aaae56a6501fd617cdc1216e0d1bfec39538da61
Author: Alexander Gavrilenko <jmz52@users.noreply.github.com>
Date:   Tue Dec 13 00:13:31 2022 +0300

    ‚ú® TFT_COLOR_UI async DMA SPI (#24980)

diff --git a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
index a9847b2d2f..804fc85e79 100644
--- a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
+++ b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
@@ -26,7 +26,7 @@
 
 #include "tft_spi.h"
 
-SPIClass TFT_SPI::SPIx(1);
+SPIClass TFT_SPI::SPIx(TFT_SPI_DEVICE);
 
 void TFT_SPI::Init() {
   #if PIN_EXISTS(TFT_RESET)
@@ -38,40 +38,10 @@ void TFT_SPI::Init() {
     OUT_WRITE(TFT_BACKLIGHT_PIN, HIGH);
   #endif
 
-  SET_OUTPUT(TFT_DC_PIN);
-  SET_OUTPUT(TFT_CS_PIN);
-  WRITE(TFT_DC_PIN, HIGH);
-  WRITE(TFT_CS_PIN, HIGH);
-
-  /**
-   * STM32F1 APB2 = 72MHz, APB1 = 36MHz, max SPI speed of this MCU if 18Mhz
-   * STM32F1 has 3 SPI ports, SPI1 in APB2, SPI2/SPI3 in APB1
-   * so the minimum prescale of SPI1 is DIV4, SPI2/SPI3 is DIV2
-   */
-  #if 0
-    #if SPI_DEVICE == 1
-     #define SPI_CLOCK_MAX SPI_CLOCK_DIV4
-    #else
-     #define SPI_CLOCK_MAX SPI_CLOCK_DIV2
-    #endif
-    uint8_t  clock;
-    uint8_t spiRate = SPI_FULL_SPEED;
-    switch (spiRate) {
-     case SPI_FULL_SPEED:    clock = SPI_CLOCK_MAX ;  break;
-     case SPI_HALF_SPEED:    clock = SPI_CLOCK_DIV4 ; break;
-     case SPI_QUARTER_SPEED: clock = SPI_CLOCK_DIV8 ; break;
-     case SPI_EIGHTH_SPEED:  clock = SPI_CLOCK_DIV16; break;
-     case SPI_SPEED_5:       clock = SPI_CLOCK_DIV32; break;
-     case SPI_SPEED_6:       clock = SPI_CLOCK_DIV64; break;
-     default:                clock = SPI_CLOCK_DIV2;  // Default from the SPI library
-    }
-  #endif
+  OUT_WRITE(TFT_DC_PIN, HIGH);
+  OUT_WRITE(TFT_CS_PIN, HIGH);
 
-  #if TFT_MISO_PIN == BOARD_SPI1_MISO_PIN
-    SPIx.setModule(1);
-  #elif TFT_MISO_PIN == BOARD_SPI2_MISO_PIN
-    SPIx.setModule(2);
-  #endif
+  SPIx.setModule(TFT_SPI_DEVICE);
   SPIx.setClock(SPI_CLOCK_MAX_TFT);
   SPIx.setBitOrder(MSBFIRST);
   SPIx.setDataMode(SPI_MODE0);
@@ -114,17 +84,62 @@ uint32_t TFT_SPI::ReadID(uint16_t Reg) {
   return data >> 7;
 }
 
-bool TFT_SPI::isBusy() { return false; }
+bool TFT_SPI::isBusy() {
+  #define __IS_DMA_CONFIGURED(__HANDLE__)   ((__HANDLE__)->DMACCSrcAddr != 0)
+
+  // DMA Channel 0 is hardcoded in dmaSendAsync() and dmaSend()
+  if (!__IS_DMA_CONFIGURED(LPC_GPDMACH0)) return false;
+
+  if (GPDMA_IntGetStatus(GPDMA_STAT_INTERR, 0)) {
+    // You should not be here - DMA transfer error flag is set
+    // Abort DMA transfer and release SPI
+  }
+  else {
+    // Check if DMA transfer completed flag is set
+    if (!GPDMA_IntGetStatus(GPDMA_STAT_INTTC, 0)) return true;
+    // Check if SPI TX butter is empty and SPI is idle
+    if ((SSP_GetStatus(LPC_SSPx, SSP_STAT_TXFIFO_EMPTY) == RESET) || (SSP_GetStatus(LPC_SSPx, SSP_STAT_BUSY) == SET)) return true;
+  }
+
+  Abort();
+  return false;
+}
+
+void TFT_SPI::Abort() {
+  // DMA Channel 0 is hardcoded in dmaSendAsync() and dmaSend()
+
+  // Disable DMA
+  GPDMA_ChannelCmd(0, DISABLE);
+
+  // Clear ERR and TC
+  GPDMA_ClearIntPending(GPDMA_STATCLR_INTTC, 0);
+  GPDMA_ClearIntPending(GPDMA_STATCLR_INTERR, 0);
+
+  // Disable DMA on SPI
+  SSP_DMACmd(LPC_SSPx, SSP_DMA_TX, DISABLE);
+
+  // Deconfigure DMA Channel 0
+  LPC_GPDMACH0->DMACCControl  = 0U;
+  LPC_GPDMACH0->DMACCConfig   = 0U;
+  LPC_GPDMACH0->DMACCSrcAddr  = 0U;
+  LPC_GPDMACH0->DMACCDestAddr = 0U;
 
-void TFT_SPI::Abort() { DataTransferEnd(); }
+  DataTransferEnd();
+}
 
 void TFT_SPI::Transmit(uint16_t Data) { SPIx.transfer(Data); }
 
-void TFT_SPI::TransmitDMA(uint32_t MemoryIncrease, uint16_t *Data, uint16_t Count) {
+void TFT_SPI::Transmit(uint32_t MemoryIncrease, uint16_t *Data, uint16_t Count) {
   DataTransferBegin(DATASIZE_16BIT);
-  WRITE(TFT_DC_PIN, HIGH);
   SPIx.dmaSend(Data, Count, MemoryIncrease);
-  DataTransferEnd();
+  Abort();
+}
+
+void TFT_SPI::TransmitDMA(uint32_t MemoryIncrease, uint16_t *Data, uint16_t Count) {
+  DataTransferBegin(DATASIZE_16BIT);
+  SPIx.dmaSendAsync(Data, Count, MemoryIncrease);
+
+  TERN_(TFT_SHARED_SPI, while (isBusy()));
 }
 
 #endif // HAS_SPI_TFT

commit c88e85c939afe4f024fcb24ca6a68950d36ec901
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 18 18:24:39 2021 -0500

    üé® Replace some infrequently-used macros

diff --git a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
index a2cb66ab5b..a9847b2d2f 100644
--- a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
+++ b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
@@ -26,39 +26,22 @@
 
 #include "tft_spi.h"
 
-//TFT_SPI tft;
-
 SPIClass TFT_SPI::SPIx(1);
 
-#define TFT_CS_H  WRITE(TFT_CS_PIN, HIGH)
-#define TFT_CS_L  WRITE(TFT_CS_PIN, LOW)
-
-#define TFT_DC_H  WRITE(TFT_DC_PIN, HIGH)
-#define TFT_DC_L  WRITE(TFT_DC_PIN, LOW)
-
-#define TFT_RST_H WRITE(TFT_RESET_PIN, HIGH)
-#define TFT_RST_L WRITE(TFT_RESET_PIN, LOW)
-
-#define TFT_BLK_H WRITE(TFT_BACKLIGHT_PIN, HIGH)
-#define TFT_BLK_L WRITE(TFT_BACKLIGHT_PIN, LOW)
-
 void TFT_SPI::Init() {
   #if PIN_EXISTS(TFT_RESET)
-    SET_OUTPUT(TFT_RESET_PIN);
-    TFT_RST_H;
+    OUT_WRITE(TFT_RESET_PIN, HIGH);
     delay(100);
   #endif
 
   #if PIN_EXISTS(TFT_BACKLIGHT)
-    SET_OUTPUT(TFT_BACKLIGHT_PIN);
-    TFT_BLK_H;
+    OUT_WRITE(TFT_BACKLIGHT_PIN, HIGH);
   #endif
 
   SET_OUTPUT(TFT_DC_PIN);
   SET_OUTPUT(TFT_CS_PIN);
-
-  TFT_DC_H;
-  TFT_CS_H;
+  WRITE(TFT_DC_PIN, HIGH);
+  WRITE(TFT_CS_PIN, HIGH);
 
   /**
    * STM32F1 APB2 = 72MHz, APB1 = 36MHz, max SPI speed of this MCU if 18Mhz
@@ -97,7 +80,7 @@ void TFT_SPI::Init() {
 void TFT_SPI::DataTransferBegin(uint16_t DataSize) {
   SPIx.setDataSize(DataSize);
   SPIx.begin();
-  TFT_CS_L;
+  WRITE(TFT_CS_PIN, LOW);
 }
 
 uint32_t TFT_SPI::GetID() {
@@ -116,7 +99,7 @@ uint32_t TFT_SPI::ReadID(uint16_t Reg) {
     SPIx.setDataSize(DATASIZE_8BIT);
     SPIx.setClock(SPI_CLOCK_DIV64);
     SPIx.begin();
-    TFT_CS_L;
+    WRITE(TFT_CS_PIN, LOW);
     WriteReg(Reg);
 
     LOOP_L_N(i, 4) {
@@ -131,21 +114,15 @@ uint32_t TFT_SPI::ReadID(uint16_t Reg) {
   return data >> 7;
 }
 
-bool TFT_SPI::isBusy() {
-  return false;
-}
+bool TFT_SPI::isBusy() { return false; }
 
-void TFT_SPI::Abort() {
-  DataTransferEnd();
-}
+void TFT_SPI::Abort() { DataTransferEnd(); }
 
-void TFT_SPI::Transmit(uint16_t Data) {
-  SPIx.transfer(Data);
-}
+void TFT_SPI::Transmit(uint16_t Data) { SPIx.transfer(Data); }
 
 void TFT_SPI::TransmitDMA(uint32_t MemoryIncrease, uint16_t *Data, uint16_t Count) {
-  DataTransferBegin(DATASIZE_16BIT); //16
-  TFT_DC_H;
+  DataTransferBegin(DATASIZE_16BIT);
+  WRITE(TFT_DC_PIN, HIGH);
   SPIx.dmaSend(Data, Count, MemoryIncrease);
   DataTransferEnd();
 }

commit 5deca5a18f9f51f1e9e34863a28f167974c451d8
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sun Nov 1 23:15:06 2020 -0300

    Increase SPI Speed on LPC. Color and Classic UI for MKS SGEN L. (#19945)

diff --git a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
index 84907acd07..a2cb66ab5b 100644
--- a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
+++ b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
@@ -89,7 +89,7 @@ void TFT_SPI::Init() {
   #elif TFT_MISO_PIN == BOARD_SPI2_MISO_PIN
     SPIx.setModule(2);
   #endif
-  SPIx.setClock(SPI_CLOCK_MAX);
+  SPIx.setClock(SPI_CLOCK_MAX_TFT);
   SPIx.setBitOrder(MSBFIRST);
   SPIx.setDataMode(SPI_MODE0);
 }
@@ -125,7 +125,7 @@ uint32_t TFT_SPI::ReadID(uint16_t Reg) {
     }
 
     DataTransferEnd();
-    SPIx.setClock(SPI_CLOCK_MAX);
+    SPIx.setClock(SPI_CLOCK_MAX_TFT);
   #endif
 
   return data >> 7;

commit 1a4b82a5d663ab7f68199bf77183047c1133e479
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Aug 26 07:13:58 2020 -0300

    TFT (plus Hardware SPI) for LPC (#19139)

diff --git a/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
new file mode 100644
index 0000000000..84907acd07
--- /dev/null
+++ b/Marlin/src/HAL/LPC1768/tft/tft_spi.cpp
@@ -0,0 +1,153 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../../inc/MarlinConfig.h"
+
+#if HAS_SPI_TFT
+
+#include "tft_spi.h"
+
+//TFT_SPI tft;
+
+SPIClass TFT_SPI::SPIx(1);
+
+#define TFT_CS_H  WRITE(TFT_CS_PIN, HIGH)
+#define TFT_CS_L  WRITE(TFT_CS_PIN, LOW)
+
+#define TFT_DC_H  WRITE(TFT_DC_PIN, HIGH)
+#define TFT_DC_L  WRITE(TFT_DC_PIN, LOW)
+
+#define TFT_RST_H WRITE(TFT_RESET_PIN, HIGH)
+#define TFT_RST_L WRITE(TFT_RESET_PIN, LOW)
+
+#define TFT_BLK_H WRITE(TFT_BACKLIGHT_PIN, HIGH)
+#define TFT_BLK_L WRITE(TFT_BACKLIGHT_PIN, LOW)
+
+void TFT_SPI::Init() {
+  #if PIN_EXISTS(TFT_RESET)
+    SET_OUTPUT(TFT_RESET_PIN);
+    TFT_RST_H;
+    delay(100);
+  #endif
+
+  #if PIN_EXISTS(TFT_BACKLIGHT)
+    SET_OUTPUT(TFT_BACKLIGHT_PIN);
+    TFT_BLK_H;
+  #endif
+
+  SET_OUTPUT(TFT_DC_PIN);
+  SET_OUTPUT(TFT_CS_PIN);
+
+  TFT_DC_H;
+  TFT_CS_H;
+
+  /**
+   * STM32F1 APB2 = 72MHz, APB1 = 36MHz, max SPI speed of this MCU if 18Mhz
+   * STM32F1 has 3 SPI ports, SPI1 in APB2, SPI2/SPI3 in APB1
+   * so the minimum prescale of SPI1 is DIV4, SPI2/SPI3 is DIV2
+   */
+  #if 0
+    #if SPI_DEVICE == 1
+     #define SPI_CLOCK_MAX SPI_CLOCK_DIV4
+    #else
+     #define SPI_CLOCK_MAX SPI_CLOCK_DIV2
+    #endif
+    uint8_t  clock;
+    uint8_t spiRate = SPI_FULL_SPEED;
+    switch (spiRate) {
+     case SPI_FULL_SPEED:    clock = SPI_CLOCK_MAX ;  break;
+     case SPI_HALF_SPEED:    clock = SPI_CLOCK_DIV4 ; break;
+     case SPI_QUARTER_SPEED: clock = SPI_CLOCK_DIV8 ; break;
+     case SPI_EIGHTH_SPEED:  clock = SPI_CLOCK_DIV16; break;
+     case SPI_SPEED_5:       clock = SPI_CLOCK_DIV32; break;
+     case SPI_SPEED_6:       clock = SPI_CLOCK_DIV64; break;
+     default:                clock = SPI_CLOCK_DIV2;  // Default from the SPI library
+    }
+  #endif
+
+  #if TFT_MISO_PIN == BOARD_SPI1_MISO_PIN
+    SPIx.setModule(1);
+  #elif TFT_MISO_PIN == BOARD_SPI2_MISO_PIN
+    SPIx.setModule(2);
+  #endif
+  SPIx.setClock(SPI_CLOCK_MAX);
+  SPIx.setBitOrder(MSBFIRST);
+  SPIx.setDataMode(SPI_MODE0);
+}
+
+void TFT_SPI::DataTransferBegin(uint16_t DataSize) {
+  SPIx.setDataSize(DataSize);
+  SPIx.begin();
+  TFT_CS_L;
+}
+
+uint32_t TFT_SPI::GetID() {
+  uint32_t id;
+  id = ReadID(LCD_READ_ID);
+  if ((id & 0xFFFF) == 0 || (id & 0xFFFF) == 0xFFFF)
+    id = ReadID(LCD_READ_ID4);
+  return id;
+}
+
+uint32_t TFT_SPI::ReadID(uint16_t Reg) {
+  uint32_t data = 0;
+
+  #if PIN_EXISTS(TFT_MISO)
+    uint8_t d = 0;
+    SPIx.setDataSize(DATASIZE_8BIT);
+    SPIx.setClock(SPI_CLOCK_DIV64);
+    SPIx.begin();
+    TFT_CS_L;
+    WriteReg(Reg);
+
+    LOOP_L_N(i, 4) {
+      SPIx.read((uint8_t*)&d, 1);
+      data = (data << 8) | d;
+    }
+
+    DataTransferEnd();
+    SPIx.setClock(SPI_CLOCK_MAX);
+  #endif
+
+  return data >> 7;
+}
+
+bool TFT_SPI::isBusy() {
+  return false;
+}
+
+void TFT_SPI::Abort() {
+  DataTransferEnd();
+}
+
+void TFT_SPI::Transmit(uint16_t Data) {
+  SPIx.transfer(Data);
+}
+
+void TFT_SPI::TransmitDMA(uint32_t MemoryIncrease, uint16_t *Data, uint16_t Count) {
+  DataTransferBegin(DATASIZE_16BIT); //16
+  TFT_DC_H;
+  SPIx.dmaSend(Data, Count, MemoryIncrease);
+  DataTransferEnd();
+}
+
+#endif // HAS_SPI_TFT
