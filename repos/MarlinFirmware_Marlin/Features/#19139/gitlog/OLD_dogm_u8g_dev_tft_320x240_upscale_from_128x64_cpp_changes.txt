commit c0920bbf6a2490b7ea66d2a9e828c0f527a6c77b
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Mon Oct 12 18:38:07 2020 -0300

    TFT Refactoring (#19192)
    
    * split tft folder in two: tft for color ui; tft_io for shared tft code
    
    * after the files got moved, now the code was moved to the right place
    
    * classic ui using TFT IO init lcd codes
    
    * feature to compile tft_io when enabled
    
    * compiling fix
    
    * lvgl spi tft working with tft io init codes
    
    * there is no need for separeted fsmc and spi class in lvgl anymore, as tft io handle everything
    
    * remove debug
    
    * base for TFT rotation and mirroring API, and ILI9488 support
    
    * ST7796S rotate and mirror support
    
    * ST7789V rotate and mirror support
    
    * ST7735 rotate and mirror support
    
    * ILI9341 rotate and mirror support
    
    * ILI9328 rotate and mirror support
    
    * R61505 rotate and mirror support
    
    * MKS TFT definitions
    
    * more configs for mks tfts
    
    * update config
    
    * naming typo
    
    * to configure the user interface
    
    * ANYCUBIC_TFT35
    
    * tft configs
    
    * support for SSD1963
    
    * tft display types
    
    * updated conditionals lcd; first board fully working with the new code - all 3 ui!
    
    * compatiblity
    
    * changed name
    
    * move classic ui file name
    
    * rename TURN -> ROTATE
    
    * GRAPHICAL_TFT_ROTATE_180 deprecated
    
    * first fsmc board fully working - chitu v5
    
    * mks robin nano v1.2 + tft 35 ok!
    
    * right pin name
    
    * anycubic tft tested in a TRIGORILLA_PRO
    
    * chitu v6
    
    * nano 32 tft orientation
    
    * mks tft43
    
    * mks tft43 rotation
    
    * fixed LONGER LK tft setup
    
    * GRAPHICAL_TFT_UPSCALE defined by the display type
    
    * better offsets defaults
    
    * Update Configuration.h
    
    * Update tft_fsmc.cpp
    
    * Update Conditionals_LCD.h
    
    * Tweak comments
    
    * update nano tests
    
    * Revert "update nano tests"
    
    This reverts commit a071ebbfad30e28855a4a5695ec8a726542a1a65.
    
    * default tft
    
    * outdated comments
    
    * to not break non-vscode builds
    
    * upscale tft 35
    
    * support tft 180 rotation for color ui
    
    * Each TFT Driver is responsible for its default color mode.
    
    * use auto detect in mks displays, because some of them could be shipped with diferent drivers
    
    * extra s
    
    * unused code
    
    * wrong -1
    
    * missing mirror options
    
    * Smaller regex pattern
    
    * Comment updates
    
    * Clean up old defines
    
    * Apply pins formatting
    
    * GRAPHICAL_TFT_ROTATE_180 => TFT_ROTATE_180
    
    * MKS_ROBIN_TFT_V1_1R
    
    * merge fix
    
    * correct resolution
    
    * auto is default, dont need be there, and it will allow the user to configure it even for named displays
    
    * to not use rotation with MKS_ROBIN_TFT_V1_1R
    
    * i like () in macros
    
    * avoid sleepy commits
    
    * default for st7789 is rgb
    
    * nano follow up
    
    * to allow ili9328 rotation
    
    * default is rgb
    
    * boards merge follow up
    
    * to match bootloader orientation
    
    * HAS_TOUCH_XPT2046 is not hal specific anymore
    
    * lets not forget LPC
    
    * 180 rotation for ili9328 and R61505
    
    * Clean up whitespace
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
deleted file mode 100644
index 0f53e45a27..0000000000
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ /dev/null
@@ -1,815 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-
-/**
- * u8g_dev_tft_320x240_upscale_from_128x64.cpp
- *
- * Universal 8bit Graphics Library
- *
- * Copyright (c) 2011, olikraus@gmail.com
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * Redistributions of source code must retain the above copyright notice, this list
- * of conditions and the following disclaimer.
- *
- * Redistributions in binary form must reproduce the above copyright notice, this
- * list of conditions and the following disclaimer in the documentation and/or other
- * materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
- * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
- * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
- * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
- * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include "../../inc/MarlinConfig.h"
-
-#if HAS_MARLINUI_U8GLIB && (PIN_EXISTS(FSMC_CS) || ENABLED(SPI_GRAPHICAL_TFT))
-
-#include "HAL_LCD_com_defines.h"
-#include "ultralcd_DOGM.h"
-
-#include <string.h>
-
-#if EITHER(LCD_USE_DMA_FSMC, LCD_USE_DMA_SPI)
-  #define HAS_LCD_IO 1
-#endif
-
-#if ENABLED(SPI_GRAPHICAL_TFT)
-  #include HAL_PATH(../../HAL, tft/tft_spi.h)
-#elif ENABLED(FSMC_GRAPHICAL_TFT)
-  #include HAL_PATH(../../HAL, tft/tft_fsmc.h)
-#endif
-
-TFT_IO tftio;
-
-#define WIDTH  LCD_PIXEL_WIDTH
-#define HEIGHT LCD_PIXEL_HEIGHT
-#define PAGE_HEIGHT 8
-
-#include "../scaled_tft.h"
-
-#define UPSCALE0(M) ((M) * (GRAPHICAL_TFT_UPSCALE))
-#define UPSCALE(A,M) (UPSCALE0(M) + (A))
-#define X_HI (UPSCALE(TFT_PIXEL_OFFSET_X, WIDTH) - 1)
-#define Y_HI (UPSCALE(TFT_PIXEL_OFFSET_Y, HEIGHT) - 1)
-
-// see https://ee-programming-notepad.blogspot.com/2016/10/16-bit-color-generator-picker.html
-
-#define COLOR_BLACK       0x0000  // #000000
-#define COLOR_WHITE       0xFFFF  // #FFFFFF
-#define COLOR_SILVER      0xC618  // #C0C0C0
-#define COLOR_GREY        0x7BEF  // #808080
-#define COLOR_DARKGREY    0x4208  // #404040
-#define COLOR_DARKGREY2   0x39E7  // #303030
-#define COLOR_DARK        0x0003  // Some dark color
-
-#define COLOR_RED         0xF800  // #FF0000
-#define COLOR_LIME        0x7E00  // #00FF00
-#define COLOR_BLUE        0x001F  // #0000FF
-#define COLOR_YELLOW      0xFFE0  // #FFFF00
-#define COLOR_MAGENTA     0xF81F  // #FF00FF
-#define COLOR_FUCHSIA     0xF81F  // #FF00FF
-#define COLOR_CYAN        0x07FF  // #00FFFF
-#define COLOR_AQUA        0x07FF  // #00FFFF
-
-#define COLOR_MAROON      0x7800  // #800000
-#define COLOR_GREEN       0x03E0  // #008000
-#define COLOR_NAVY        0x000F  // #000080
-#define COLOR_OLIVE       0x8400  // #808000
-#define COLOR_PURPLE      0x8010  // #800080
-#define COLOR_TEAL        0x0410  // #008080
-
-#define COLOR_ORANGE      0xFC00  // #FF7F00
-
-#ifndef TFT_MARLINUI_COLOR
-  #define TFT_MARLINUI_COLOR COLOR_WHITE
-#endif
-#ifndef TFT_MARLINBG_COLOR
-  #define TFT_MARLINBG_COLOR COLOR_BLACK
-#endif
-#ifndef TFT_DISABLED_COLOR
-  #define TFT_DISABLED_COLOR COLOR_DARK
-#endif
-#ifndef TFT_BTCANCEL_COLOR
-  #define TFT_BTCANCEL_COLOR COLOR_RED
-#endif
-#ifndef TFT_BTARROWS_COLOR
-  #define TFT_BTARROWS_COLOR COLOR_BLUE
-#endif
-#ifndef TFT_BTOKMENU_COLOR
-  #define TFT_BTOKMENU_COLOR COLOR_RED
-#endif
-
-static uint32_t lcd_id = 0;
-
-#define ST7789V_CASET       0x2A   /* Column address register */
-#define ST7789V_RASET       0x2B   /* Row address register */
-#define ST7789V_WRITE_RAM   0x2C   /* Write data to GRAM */
-
-
-/* Mind the mess: with landscape screen orientation 'Horizontal' is Y and 'Vertical' is X */
-#define ILI9328_HASET       0x20   /* Horizontal GRAM address register (0-255) */
-#define ILI9328_VASET       0x21   /* Vertical GRAM address register (0-511)*/
-#define ILI9328_WRITE_RAM   0x22   /* Write data to GRAM */
-
-#define ILI9328_HASTART     0x50   /* Horizontal address start position (0-255) */
-#define ILI9328_HAEND       0x51   /* Horizontal address end position (0-255) */
-#define ILI9328_VASTART     0x52   /* Vertical address start position (0-511) */
-#define ILI9328_VAEND       0x53   /* Vertical address end position (0-511) */
-
-static void setWindow_ili9328(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) {
-  #if HAS_LCD_IO
-    tftio.DataTransferBegin(DATASIZE_8BIT);
-    #define IO_REG_DATA(R,D) do { tftio.WriteReg(R); tftio.WriteData(D); }while(0)
-  #else
-    #define IO_REG_DATA(R,D) do { u8g_WriteByte(u8g, dev, R); u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&D); }while(0)
-  #endif
-
-  #if NONE(LCD_USE_DMA_FSMC, LCD_USE_DMA_SPI)
-    u8g_SetAddress(u8g, dev, 0);
-  #endif
-
-  IO_REG_DATA(ILI9328_HASTART, Ymin);
-  IO_REG_DATA(ILI9328_HAEND,   Ymax);
-  IO_REG_DATA(ILI9328_VASTART, Xmin);
-  IO_REG_DATA(ILI9328_VAEND,   Xmax);
-
-  IO_REG_DATA(ILI9328_HASET,   Ymin);
-  IO_REG_DATA(ILI9328_VASET,   Xmin);
-
-  #if HAS_LCD_IO
-    tftio.WriteReg(ILI9328_WRITE_RAM);
-    tftio.DataTransferEnd();
-  #else
-    u8g_WriteByte(u8g, dev, ILI9328_WRITE_RAM);
-    u8g_SetAddress(u8g, dev, 1);
-  #endif
-}
-
-static void setWindow_st7789v(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) {
-  #if HAS_LCD_IO
-    tftio.DataTransferBegin(DATASIZE_8BIT);
-    tftio.WriteReg(ST7789V_CASET);
-    tftio.WriteData((Xmin >> 8) & 0xFF);
-    tftio.WriteData(Xmin & 0xFF);
-    tftio.WriteData((Xmax >> 8) & 0xFF);
-    tftio.WriteData(Xmax & 0xFF);
-
-    tftio.WriteReg(ST7789V_RASET);
-    tftio.WriteData((Ymin >> 8) & 0xFF);
-    tftio.WriteData(Ymin & 0xFF);
-    tftio.WriteData((Ymax >> 8) & 0xFF);
-    tftio.WriteData(Ymax & 0xFF);
-
-    tftio.WriteReg(ST7789V_WRITE_RAM);
-    tftio.DataTransferEnd();
-  #else
-    u8g_SetAddress(u8g, dev, 0); u8g_WriteByte(u8g, dev, ST7789V_CASET); u8g_SetAddress(u8g, dev, 1);
-    u8g_WriteByte(u8g, dev, (Xmin >> 8) & 0xFF);
-    u8g_WriteByte(u8g, dev, Xmin & 0xFF);
-    u8g_WriteByte(u8g, dev, (Xmax >> 8) & 0xFF);
-    u8g_WriteByte(u8g, dev, Xmax & 0xFF);
-
-    u8g_SetAddress(u8g, dev, 0); u8g_WriteByte(u8g, dev, ST7789V_RASET); u8g_SetAddress(u8g, dev, 1);
-    u8g_WriteByte(u8g, dev, (Ymin >> 8) & 0xFF);
-    u8g_WriteByte(u8g, dev, Ymin & 0xFF);
-    u8g_WriteByte(u8g, dev, (Ymax >> 8) & 0xFF);
-    u8g_WriteByte(u8g, dev, Ymax & 0xFF);
-
-    u8g_SetAddress(u8g, dev, 0); u8g_WriteByte(u8g, dev, ST7789V_WRITE_RAM); u8g_SetAddress(u8g, dev, 1);
-  #endif
-}
-
-static void setWindow_none(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) {}
-void (*setWindow)(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) = setWindow_none;
-
-#define ESC_REG(x)      0xFFFF, 0x00FF & (uint16_t)x
-#define ESC_DELAY(x)    0xFFFF, 0x8000 | (x & 0x7FFF)
-#define ESC_END         0xFFFF, 0x7FFF
-#define ESC_FFFF        0xFFFF, 0xFFFF
-
-#if HAS_LCD_IO
-  void writeEscSequence(const uint16_t *sequence) {
-    uint16_t data;
-    for (;;) {
-      data = *sequence++;
-      if (data != 0xFFFF) {
-        tftio.WriteData(data);
-        continue;
-      }
-      data = *sequence++;
-      if (data == 0x7FFF) return;
-      if (data == 0xFFFF) {
-        tftio.WriteData(data);
-      } else if (data & 0x8000) {
-        delay(data & 0x7FFF);
-      } else if ((data & 0xFF00) == 0) {
-        tftio.WriteReg(data);
-      }
-    }
-  }
-  #define WRITE_ESC_SEQUENCE(V) writeEscSequence(V)
-  #define WRITE_ESC_SEQUENCE16(V) writeEscSequence(V)
-#else
-  void writeEscSequence8(u8g_t *u8g, u8g_dev_t *dev, const uint16_t *sequence) {
-    uint16_t data;
-    u8g_SetAddress(u8g, dev, 1);
-    for (;;) {
-      data = *sequence++;
-      if (data != 0xFFFF) {
-        u8g_WriteByte(u8g, dev, data & 0xFF);
-        continue;
-      }
-      data = *sequence++;
-      if (data == 0x7FFF) return;
-      if (data == 0xFFFF) {
-        u8g_WriteByte(u8g, dev, data & 0xFF);
-      } else if (data & 0x8000) {
-        delay(data & 0x7FFF);
-      } else if ((data & 0xFF00) == 0) {
-        u8g_SetAddress(u8g, dev, 0);
-        u8g_WriteByte(u8g, dev, data & 0xFF);
-        u8g_SetAddress(u8g, dev, 1);
-      }
-    }
-  }
-
-  #define WRITE_ESC_SEQUENCE(V) writeEscSequence8(u8g, dev, V)
-
-  void writeEscSequence16(u8g_t *u8g, u8g_dev_t *dev, const uint16_t *sequence) {
-    uint16_t data;
-    u8g_SetAddress(u8g, dev, 0);
-    for (;;) {
-      data = *sequence++;
-      if (data != 0xFFFF) {
-        u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&data);
-        continue;
-      }
-      data = *sequence++;
-      if (data == 0x7FFF) return;
-      if (data == 0xFFFF) {
-        u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&data);
-      } else if (data & 0x8000) {
-        delay(data & 0x7FFF);
-      } else if ((data & 0xFF00) == 0) {
-        u8g_WriteByte(u8g, dev, data & 0xFF);
-      }
-    }
-    u8g_SetAddress(u8g, dev, 1);
-  }
-
-  #define WRITE_ESC_SEQUENCE16(V) writeEscSequence16(u8g, dev, V)
-#endif
-
-static const uint16_t st7789v_init[] = {
-  ESC_REG(0x0010), ESC_DELAY(10),
-  ESC_REG(0x0001), ESC_DELAY(200),
-  ESC_REG(0x0011), ESC_DELAY(120),
-  ESC_REG(0x0036), TERN(GRAPHICAL_TFT_ROTATE_180, 0x0060, 0x00A0),
-  ESC_REG(0x003A), 0x0055,
-  ESC_REG(0x002A), 0x0000, 0x0000, 0x0001, 0x003F,
-  ESC_REG(0x002B), 0x0000, 0x0000, 0x0000, 0x00EF,
-  ESC_REG(0x00B2), 0x000C, 0x000C, 0x0000, 0x0033, 0x0033,
-  ESC_REG(0x00B7), 0x0035,
-  ESC_REG(0x00BB), 0x001F,
-  ESC_REG(0x00C0), 0x002C,
-  ESC_REG(0x00C2), 0x0001, 0x00C3,
-  ESC_REG(0x00C4), 0x0020,
-  ESC_REG(0x00C6), 0x000F,
-  ESC_REG(0x00D0), 0x00A4, 0x00A1,
-  ESC_REG(0x0029),
-  ESC_REG(0x0011),
-  ESC_END
-};
-
-static const uint16_t ili9328_init[] = {
-  ESC_REG(0x0001), 0x0100,
-  ESC_REG(0x0002), 0x0400,
-  ESC_REG(0x0003), 0x1038,
-  ESC_REG(0x0004), 0x0000,
-  ESC_REG(0x0008), 0x0202,
-  ESC_REG(0x0009), 0x0000,
-  ESC_REG(0x000A), 0x0000,
-  ESC_REG(0x000C), 0x0000,
-  ESC_REG(0x000D), 0x0000,
-  ESC_REG(0x000F), 0x0000,
-  ESC_REG(0x0010), 0x0000,
-  ESC_REG(0x0011), 0x0007,
-  ESC_REG(0x0012), 0x0000,
-  ESC_REG(0x0013), 0x0000,
-  ESC_REG(0x0007), 0x0001,
-  ESC_DELAY(200),
-  ESC_REG(0x0010), 0x1690,
-  ESC_REG(0x0011), 0x0227,
-  ESC_DELAY(50),
-  ESC_REG(0x0012), 0x008C,
-  ESC_DELAY(50),
-  ESC_REG(0x0013), 0x1500,
-  ESC_REG(0x0029), 0x0004,
-  ESC_REG(0x002B), 0x000D,
-  ESC_DELAY(50),
-  ESC_REG(0x0050), 0x0000,
-  ESC_REG(0x0051), 0x00EF,
-  ESC_REG(0x0052), 0x0000,
-  ESC_REG(0x0053), 0x013F,
-  ESC_REG(0x0020), 0x0000,
-  ESC_REG(0x0021), 0x0000,
-  ESC_REG(0x0060), 0x2700,
-  ESC_REG(0x0061), 0x0001,
-  ESC_REG(0x006A), 0x0000,
-  ESC_REG(0x0080), 0x0000,
-  ESC_REG(0x0081), 0x0000,
-  ESC_REG(0x0082), 0x0000,
-  ESC_REG(0x0083), 0x0000,
-  ESC_REG(0x0084), 0x0000,
-  ESC_REG(0x0085), 0x0000,
-  ESC_REG(0x0090), 0x0010,
-  ESC_REG(0x0092), 0x0600,
-  ESC_REG(0x0007), 0x0133,
-  ESC_REG(0x0022),
-  ESC_END
-};
-
-static const uint16_t ili9341_init[] = {
-  ESC_REG(0x0010), ESC_DELAY(10),
-  ESC_REG(0x0001), ESC_DELAY(200),
-  ESC_REG(0x0036), TERN(GRAPHICAL_TFT_ROTATE_180, 0x0028, 0x00E8),
-  ESC_REG(0x003A), 0x0055,
-  ESC_REG(0x002A), 0x0000, 0x0000, 0x0001, 0x003F,
-  ESC_REG(0x002B), 0x0000, 0x0000, 0x0000, 0x00EF,
-  ESC_REG(0x00C5), 0x003E, 0x0028,
-  ESC_REG(0x00C7), 0x0086,
-  ESC_REG(0x00B1), 0x0000, 0x0018,
-  ESC_REG(0x00C0), 0x0023,
-  ESC_REG(0x00C1), 0x0010,
-  ESC_REG(0x0029),
-  ESC_REG(0x0011),
-  ESC_DELAY(100),
-  ESC_END
-};
-
-static const uint16_t ili9488_init[] = {
-  ESC_REG(0x00E0), 0x0000, 0x0007, 0x000F, 0x000D, 0x001B, 0x000A, 0x003C, 0x0078, 0x004A, 0x0007, 0x000E, 0x0009, 0x001B, 0x001E, 0x000F,
-  ESC_REG(0x00E1), 0x0000, 0x0022, 0x0024, 0x0006, 0x0012, 0x0007, 0x0036, 0x0047, 0x0047, 0x0006, 0x000A, 0x0007, 0x0030, 0x0037, 0x000F,
-  ESC_REG(0x00C0), 0x0010, 0x0010,
-  ESC_REG(0x00C1), 0x0041,
-  ESC_REG(0x00C5), 0x0000, 0x0022, 0x0080,
-  ESC_REG(0x0036), TERN(GRAPHICAL_TFT_ROTATE_180, 0x00A8, 0x0068),
-  ESC_REG(0x003A), 0x0055,
-  ESC_REG(0x00B0), 0x0000,
-  ESC_REG(0x00B1), 0x00B0, 0x0011,
-  ESC_REG(0x00B4), 0x0002,
-  ESC_REG(0x00B6), 0x0002, 0x0042,
-  ESC_REG(0x00B7), 0x00C6,
-  ESC_REG(0x00E9), 0x0000,
-  ESC_REG(0x00F0), 0x00A9, 0x0051, 0x002C, 0x0082,
-  ESC_REG(0x0029),
-  ESC_REG(0x0011),
-  ESC_DELAY(100),
-  ESC_END
-};
-
-static const uint16_t st7796_init[] = {
-  ESC_REG(0x0010), ESC_DELAY(120),
-  ESC_REG(0x0001), ESC_DELAY(120),
-  ESC_REG(0x0011), ESC_DELAY(120),
-  ESC_REG(0x00F0), 0x00C3,
-  ESC_REG(0x00F0), 0x0096,
-  ESC_REG(0x0036), TERN(GRAPHICAL_TFT_ROTATE_180, 0x00E8, 0x0028),
-  ESC_REG(0x003A), 0x0055,
-  ESC_REG(0x00B4), 0x0001,
-  ESC_REG(0x00B7), 0x00C6,
-  ESC_REG(0x00E8), 0x0040, 0x008A, 0x0000, 0x0000, 0x0029, 0x0019, 0x00A5, 0x0033,
-  ESC_REG(0x00C1), 0x0006,
-  ESC_REG(0x00C2), 0x00A7,
-  ESC_REG(0x00C5), 0x0018,
-  ESC_REG(0x00E0), 0x00F0, 0x0009, 0x000B, 0x0006, 0x0004, 0x0015, 0x002F, 0x0054, 0x0042, 0x003C, 0x0017, 0x0014, 0x0018, 0x001B,
-  ESC_REG(0x00E1), 0x00F0, 0x0009, 0x000B, 0x0006, 0x0004, 0x0003, 0x002D, 0x0043, 0x0042, 0x003B, 0x0016, 0x0014, 0x0017, 0x001B,
-  ESC_REG(0x00F0), 0x003C,
-  ESC_REG(0x00F0), 0x0069, ESC_DELAY(120),
-  ESC_REG(0x0029),
-  ESC_REG(0x0011),
-  ESC_DELAY(100),
-  ESC_END
-};
-
-#if HAS_TOUCH_XPT2046
-
-  static const uint8_t buttonD[] = {
-    B01111111,B11111111,B11111111,B11111110,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00011000,B00110000,B00000001,
-    B10000000,B00001100,B01100000,B00000001,
-    B10000000,B00000110,B11000000,B00000001,
-    B10000000,B00000011,B10000000,B00000001,
-    B10000000,B00000011,B10000000,B00000001,
-    B10000000,B00000110,B11000000,B00000001,
-    B10000000,B00001100,B01100000,B00000001,
-    B10000000,B00011000,B00110000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B01111111,B11111111,B11111111,B11111110,
-  };
-
-  #if ENABLED(REVERSE_MENU_DIRECTION)
-
-    static const uint8_t buttonA[] = {
-      B01111111,B11111111,B11111111,B11111110,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B11100000,B00000000,B00000001,
-      B10000000,B11100000,B00000000,B00000001,
-      B10000000,B11100000,B00000000,B00000001,
-      B10000000,B11100000,B00000000,B00000001,
-      B10000000,B11100000,B00111111,B11100001,
-      B10000111,B11111100,B00111111,B11100001,
-      B10000011,B11111000,B00000000,B00000001,
-      B10000001,B11110000,B00000000,B00000001,
-      B10000000,B11100000,B00000000,B00000001,
-      B10000000,B01000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B01111111,B11111111,B11111111,B11111110,
-    };
-    static const uint8_t buttonB[] = {
-      B01111111,B11111111,B11111111,B11111110,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B01100000,B00000010,B00000001,
-      B10000000,B01100000,B00000111,B00000001,
-      B10000000,B01100000,B00001111,B10000001,
-      B10000000,B01100000,B00011111,B11000001,
-      B10000111,B11111110,B00111111,B11100001,
-      B10000111,B11111110,B00000111,B00000001,
-      B10000000,B01100000,B00000111,B00000001,
-      B10000000,B01100000,B00000111,B00000001,
-      B10000000,B01100000,B00000111,B00000001,
-      B10000000,B01100000,B00000111,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B01111111,B11111111,B11111111,B11111110,
-    };
-
-  #else
-
-    static const uint8_t buttonA[] = {
-      B01111111,B11111111,B11111111,B11111110,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B01000000,B00000000,B00000001,
-      B10000000,B11100000,B00000000,B00000001,
-      B10000001,B11110000,B00000000,B00000001,
-      B10000011,B11111000,B00000000,B00000001,
-      B10000111,B11111100,B00111111,B11100001,
-      B10000000,B11100000,B00111111,B11100001,
-      B10000000,B11100000,B00000000,B00000001,
-      B10000000,B11100000,B00000000,B00000001,
-      B10000000,B11100000,B00000000,B00000001,
-      B10000000,B11100000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B01111111,B11111111,B11111111,B11111110,
-    };
-
-    static const uint8_t buttonB[] = {
-      B01111111,B11111111,B11111111,B11111110,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B01100000,B00000111,B00000001,
-      B10000000,B01100000,B00000111,B00000001,
-      B10000000,B01100000,B00000111,B00000001,
-      B10000000,B01100000,B00000111,B00000001,
-      B10000111,B11111110,B00000111,B00000001,
-      B10000111,B11111110,B00111111,B11100001,
-      B10000000,B01100000,B00011111,B11000001,
-      B10000000,B01100000,B00001111,B10000001,
-      B10000000,B01100000,B00000111,B00000001,
-      B10000000,B01100000,B00000010,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B10000000,B00000000,B00000000,B00000001,
-      B01111111,B11111111,B11111111,B11111110,
-    };
-
-  #endif
-
-  static const uint8_t buttonC[] = {
-    B01111111,B11111111,B11111111,B11111110,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00011100,B00000001,
-    B10000000,B00000100,B00011100,B00000001,
-    B10000000,B00001100,B00011100,B00000001,
-    B10000000,B00011111,B11111100,B00000001,
-    B10000000,B00111111,B11111100,B00000001,
-    B10000000,B00011111,B11111100,B00000001,
-    B10000000,B00001100,B00000000,B00000001,
-    B10000000,B00000100,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B01111111,B11111111,B11111111,B11111110,
-  };
-
-  #define BUTTON_SIZE_X 32
-  #define BUTTON_SIZE_Y 20
-
-  // 14, 90, 166, 242, 185 are the original values upscaled 2x.
-  #define BUTTOND_X_LO UPSCALE0(14 / 2)
-  #define BUTTOND_X_HI (UPSCALE(BUTTOND_X_LO, BUTTON_SIZE_X) - 1)
-
-  #define BUTTONA_X_LO UPSCALE0(90 / 2)
-  #define BUTTONA_X_HI (UPSCALE(BUTTONA_X_LO, BUTTON_SIZE_X) - 1)
-
-  #define BUTTONB_X_LO UPSCALE0(166 / 2)
-  #define BUTTONB_X_HI (UPSCALE(BUTTONB_X_LO, BUTTON_SIZE_X) - 1)
-
-  #define BUTTONC_X_LO UPSCALE0(242 / 2)
-  #define BUTTONC_X_HI (UPSCALE(BUTTONC_X_LO, BUTTON_SIZE_X) - 1)
-
-  #define BUTTON_Y_LO UPSCALE0(140 / 2) + 44 // 184 2x, 254 3x
-  #define BUTTON_Y_HI (UPSCALE(BUTTON_Y_LO, BUTTON_SIZE_Y) - 1)
-
-  void drawImage(const uint8_t *data, u8g_t *u8g, u8g_dev_t *dev, uint16_t length, uint16_t height, uint16_t color) {
-    uint16_t buffer[BUTTON_SIZE_X * sq(GRAPHICAL_TFT_UPSCALE)];
-
-    if (length > BUTTON_SIZE_X) return;
-
-    for (uint16_t i = 0; i < height; i++) {
-      uint16_t k = 0;
-      for (uint16_t j = 0; j < length; j++) {
-        uint16_t v = TFT_MARLINBG_COLOR;
-        if (*(data + (i * (length >> 3) + (j >> 3))) & (0x80 >> (j & 7)))
-          v = color;
-        else
-          v = TFT_MARLINBG_COLOR;
-        LOOP_L_N(n, GRAPHICAL_TFT_UPSCALE) buffer[k++] = v;
-      }
-      #if HAS_LCD_IO
-        LOOP_S_L_N(n, 1, GRAPHICAL_TFT_UPSCALE)
-          for (uint16_t l = 0; l < UPSCALE0(length); l++)
-            buffer[l + n * UPSCALE0(length)] = buffer[l];
-
-        tftio.WriteSequence(buffer, length * sq(GRAPHICAL_TFT_UPSCALE));
-      #else
-        for (uint8_t i = GRAPHICAL_TFT_UPSCALE; i--;)
-          u8g_WriteSequence(u8g, dev, k << 1, (uint8_t*)buffer);
-      #endif
-    }
-  }
-
-#endif // HAS_TOUCH_XPT2046
-
-// Used to fill RGB565 (16bits) background
-inline void memset2(const void *ptr, uint16_t fill, size_t cnt) {
-  uint16_t* wptr = (uint16_t*)ptr;
-  for (size_t i = 0; i < cnt; i += 2) { *wptr = fill; wptr++; }
-}
-
-static bool preinit = true;
-static uint8_t page;
-
-uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg) {
-  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
-
-  #if HAS_LCD_IO
-    static uint16_t bufferA[WIDTH * sq(GRAPHICAL_TFT_UPSCALE)], bufferB[WIDTH * sq(GRAPHICAL_TFT_UPSCALE)];
-    uint16_t* buffer = &bufferA[0];
-  #else
-    uint16_t buffer[WIDTH * GRAPHICAL_TFT_UPSCALE]; // 16-bit RGB 565 pixel line buffer
-  #endif
-
-  switch (msg) {
-    case U8G_DEV_MSG_INIT:
-      dev->com_fn(u8g, U8G_COM_MSG_INIT, U8G_SPI_CLK_CYCLE_NONE, &lcd_id);
-      tftio.DataTransferBegin(DATASIZE_8BIT);
-      switch (lcd_id & 0xFFFF) {
-        case 0x8552:   // ST7789V
-          WRITE_ESC_SEQUENCE(st7789v_init);
-          setWindow = setWindow_st7789v;
-          break;
-        case 0x9328:  // ILI9328
-          WRITE_ESC_SEQUENCE16(ili9328_init);
-          setWindow = setWindow_ili9328;
-          break;
-        case 0x9341:   // ILI9341
-          WRITE_ESC_SEQUENCE(ili9341_init);
-          setWindow = setWindow_st7789v;
-          break;
-        case 0x8066:   // Anycubic / TronXY TFTs (480x320)
-          WRITE_ESC_SEQUENCE(ili9488_init);
-          setWindow = setWindow_st7789v;
-          break;
-        case 0x7796:
-          WRITE_ESC_SEQUENCE(st7796_init);
-          setWindow = setWindow_st7789v;
-          break;
-        case 0x9488:
-          WRITE_ESC_SEQUENCE(ili9488_init);
-          setWindow = setWindow_st7789v;
-        case 0x0404:  // No connected display on FSMC
-          lcd_id = 0;
-          return 0;
-        case 0xFFFF:  // No connected display on SPI
-          lcd_id = 0;
-          return 0;
-        default:
-          setWindow = (lcd_id & 0xFF000000) ? setWindow_st7789v : setWindow_ili9328;
-          break;
-      }
-      tftio.DataTransferEnd();
-
-      if (preinit) {
-        preinit = false;
-        return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
-      }
-
-      // Clear Screen
-      setWindow(u8g, dev, 0, 0, (TFT_WIDTH) - 1, (TFT_HEIGHT) - 1);
-      #if HAS_LCD_IO
-        tftio.WriteMultiple(TFT_MARLINBG_COLOR, uint32_t(TFT_WIDTH) * (TFT_HEIGHT));
-      #else
-        memset2(buffer, TFT_MARLINBG_COLOR, (TFT_WIDTH) / 2);
-        for (uint16_t i = 0; i < (TFT_HEIGHT) * sq(GRAPHICAL_TFT_UPSCALE); i++)
-          u8g_WriteSequence(u8g, dev, (TFT_WIDTH) / 2, (uint8_t *)buffer);
-      #endif
-
-      // Bottom buttons
-      #if HAS_TOUCH_XPT2046
-        setWindow(u8g, dev, BUTTOND_X_LO, BUTTON_Y_LO, BUTTOND_X_HI, BUTTON_Y_HI);
-        drawImage(buttonD, u8g, dev, 32, 20, TFT_BTCANCEL_COLOR);
-
-        setWindow(u8g, dev, BUTTONA_X_LO, BUTTON_Y_LO, BUTTONA_X_HI, BUTTON_Y_HI);
-        drawImage(buttonA, u8g, dev, 32, 20, TFT_BTARROWS_COLOR);
-
-        setWindow(u8g, dev, BUTTONB_X_LO, BUTTON_Y_LO, BUTTONB_X_HI, BUTTON_Y_HI);
-        drawImage(buttonB, u8g, dev, 32, 20, TFT_BTARROWS_COLOR);
-
-        setWindow(u8g, dev, BUTTONC_X_LO, BUTTON_Y_LO, BUTTONC_X_HI, BUTTON_Y_HI);
-        drawImage(buttonC, u8g, dev, 32, 20, TFT_BTOKMENU_COLOR);
-      #endif // HAS_TOUCH_XPT2046
-
-      return 0;
-
-    case U8G_DEV_MSG_STOP: preinit = true; break;
-
-    case U8G_DEV_MSG_PAGE_FIRST:
-      page = 0;
-      setWindow(u8g, dev, TFT_PIXEL_OFFSET_X, TFT_PIXEL_OFFSET_Y, X_HI, Y_HI);
-      break;
-
-    case U8G_DEV_MSG_PAGE_NEXT:
-      if (++page > (HEIGHT / PAGE_HEIGHT)) return 1;
-
-      LOOP_L_N(y, PAGE_HEIGHT) {
-        uint32_t k = 0;
-        #if HAS_LCD_IO
-          buffer = (y & 1) ? bufferB : bufferA;
-        #endif
-        for (uint16_t i = 0; i < (uint32_t)pb->width; i++) {
-          const uint8_t b = *(((uint8_t *)pb->buf) + i);
-          const uint16_t c = TEST(b, y) ? TFT_MARLINUI_COLOR : TFT_MARLINBG_COLOR;
-          LOOP_L_N(n, GRAPHICAL_TFT_UPSCALE) buffer[k++] = c;
-        }
-        #if HAS_LCD_IO
-          LOOP_S_L_N(n, 1, GRAPHICAL_TFT_UPSCALE)
-            for (uint16_t l = 0; l < UPSCALE0(WIDTH); l++)
-              buffer[l + n * UPSCALE0(WIDTH)] = buffer[l];
-
-          tftio.WriteSequence(buffer, COUNT(bufferA));
-        #else
-          uint8_t* bufptr = (uint8_t*) buffer;
-          for (uint8_t i = GRAPHICAL_TFT_UPSCALE; i--;) {
-            LOOP_S_L_N(n, 0, GRAPHICAL_TFT_UPSCALE * 2) {
-              u8g_WriteSequence(u8g, dev, WIDTH, &bufptr[WIDTH * n]);
-            }
-          }
-        #endif
-      }
-      break;
-
-    case U8G_DEV_MSG_SLEEP_ON:
-      // Enter Sleep Mode (10h)
-      return 1;
-    case U8G_DEV_MSG_SLEEP_OFF:
-      // Sleep Out (11h)
-      return 1;
-  }
-  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
-}
-
-static uint8_t msgInitCount = 2; // Ignore all messages until 2nd U8G_COM_MSG_INIT
-
-uint8_t u8g_com_hal_tft_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr) {
-  if (msgInitCount) {
-    if (msg == U8G_COM_MSG_INIT) msgInitCount--;
-    if (msgInitCount) return -1;
-  }
-
-  static uint8_t isCommand;
-
-  switch (msg) {
-    case U8G_COM_MSG_STOP: break;
-    case U8G_COM_MSG_INIT:
-      u8g_SetPIOutput(u8g, U8G_PI_RESET);
-
-      u8g_Delay(50);
-
-      tftio.Init();
-
-      if (arg_ptr) {
-        *((uint32_t *)arg_ptr) = tftio.GetID();
-      }
-      isCommand = 0;
-      break;
-
-    case U8G_COM_MSG_ADDRESS: // define cmd (arg_val = 0) or data mode (arg_val = 1)
-      isCommand = arg_val == 0 ? 1 : 0;
-      break;
-
-    case U8G_COM_MSG_RESET:
-      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
-      break;
-
-    case U8G_COM_MSG_WRITE_BYTE:
-      tftio.DataTransferBegin(DATASIZE_8BIT);
-      if (isCommand)
-        tftio.WriteReg(arg_val);
-      else
-        tftio.WriteData((uint16_t)arg_val);
-      tftio.DataTransferEnd();
-      break;
-
-    case U8G_COM_MSG_WRITE_SEQ:
-      tftio.DataTransferBegin(DATASIZE_16BIT);
-      for (uint8_t i = 0; i < arg_val; i += 2)
-        tftio.WriteData(*(uint16_t *)(((uint32_t)arg_ptr) + i));
-      tftio.DataTransferEnd();
-      break;
-
-  }
-  return 1;
-}
-
-U8G_PB_DEV(u8g_dev_tft_320x240_upscale_from_128x64, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_tft_320x240_upscale_from_128x64_fn, U8G_COM_HAL_TFT_FN);
-
-#endif // HAS_MARLINUI_U8GLIB && FSMC_CS

commit 4424645e04c9e75462d36de8f7a82e67cc9c262e
Author: qwewer0 <57561110+qwewer0@users.noreply.github.com>
Date:   Mon Sep 28 21:53:50 2020 +0200

    Multi-line comments cleanup (#19535)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index eb9b5315e5..0f53e45a27 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -51,7 +51,6 @@
  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
  * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
  */
 
 #include "../../inc/MarlinConfig.h"

commit c2c6a679ea4bdf48ce1800a8831fcec36c09ce53
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 28 01:13:27 2020 -0500

    Rename LCD conditionals (#19533)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 39c294defe..eb9b5315e5 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -56,7 +56,7 @@
 
 #include "../../inc/MarlinConfig.h"
 
-#if HAS_GRAPHICAL_LCD && (PIN_EXISTS(FSMC_CS) || ENABLED(SPI_GRAPHICAL_TFT))
+#if HAS_MARLINUI_U8GLIB && (PIN_EXISTS(FSMC_CS) || ENABLED(SPI_GRAPHICAL_TFT))
 
 #include "HAL_LCD_com_defines.h"
 #include "ultralcd_DOGM.h"
@@ -813,4 +813,4 @@ uint8_t u8g_com_hal_tft_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_p
 
 U8G_PB_DEV(u8g_dev_tft_320x240_upscale_from_128x64, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_tft_320x240_upscale_from_128x64_fn, U8G_COM_HAL_TFT_FN);
 
-#endif // HAS_GRAPHICAL_LCD && FSMC_CS
+#endif // HAS_MARLINUI_U8GLIB && FSMC_CS

commit 1a4b82a5d663ab7f68199bf77183047c1133e479
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Aug 26 07:13:58 2020 -0300

    TFT (plus Hardware SPI) for LPC (#19139)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index b8bfdb293a..39c294defe 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -760,7 +760,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
 
 static uint8_t msgInitCount = 2; // Ignore all messages until 2nd U8G_COM_MSG_INIT
 
-uint8_t u8g_com_stm32duino_tft_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr) {
+uint8_t u8g_com_hal_tft_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr) {
   if (msgInitCount) {
     if (msg == U8G_COM_MSG_INIT) msgInitCount--;
     if (msgInitCount) return -1;
@@ -801,7 +801,7 @@ uint8_t u8g_com_stm32duino_tft_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void
       break;
 
     case U8G_COM_MSG_WRITE_SEQ:
-      tftio.DataTransferBegin(DATASIZE_8BIT);
+      tftio.DataTransferBegin(DATASIZE_16BIT);
       for (uint8_t i = 0; i < arg_val; i += 2)
         tftio.WriteData(*(uint16_t *)(((uint32_t)arg_ptr) + i));
       tftio.DataTransferEnd();

commit 02ea13b5119ff519ed7adcb08923d8b34ae381c9
Author: mmajoor <m.majoor@majority.nl>
Date:   Sat Aug 22 05:04:31 2020 +0200

    GRAPHICAL_TFT_ROTATE_180 for ST7789V (#19042)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index dc8fbc53fa..b8bfdb293a 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -298,7 +298,7 @@ static const uint16_t st7789v_init[] = {
   ESC_REG(0x0010), ESC_DELAY(10),
   ESC_REG(0x0001), ESC_DELAY(200),
   ESC_REG(0x0011), ESC_DELAY(120),
-  ESC_REG(0x0036), 0x00A0,
+  ESC_REG(0x0036), TERN(GRAPHICAL_TFT_ROTATE_180, 0x0060, 0x00A0),
   ESC_REG(0x003A), 0x0055,
   ESC_REG(0x002A), 0x0000, 0x0000, 0x0001, 0x003F,
   ESC_REG(0x002B), 0x0000, 0x0000, 0x0000, 0x00EF,

commit a37cf2490054ece3c16f0caca26a02c3d33057c8
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Fri Aug 21 20:54:21 2020 -0300

    Emulated DOGM via HAL TFT, XPT IO (#19017)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index e42faf0255..dc8fbc53fa 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -67,28 +67,24 @@
   #define HAS_LCD_IO 1
 #endif
 
-#if HAS_LCD_IO
-  extern void LCD_IO_Init(uint8_t cs, uint8_t rs);
-  extern uint16_t LCD_IO_ReadData(uint16_t Reg);
-  extern uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize);
-  extern void LCD_IO_WriteReg(uint16_t Reg);
-  extern void LCD_IO_WriteData(uint16_t RegValue);
-  extern void LCD_IO_WriteSequence(uint16_t *data, uint16_t length);
-  extern void LCD_IO_WriteSequence_Async(uint16_t *data, uint16_t length);
-  extern void LCD_IO_WaitSequence_Async();
-  extern void LCD_IO_WriteMultiple(uint16_t color, uint32_t count);
+#if ENABLED(SPI_GRAPHICAL_TFT)
+  #include HAL_PATH(../../HAL, tft/tft_spi.h)
+#elif ENABLED(FSMC_GRAPHICAL_TFT)
+  #include HAL_PATH(../../HAL, tft/tft_fsmc.h)
 #endif
 
+TFT_IO tftio;
+
 #define WIDTH  LCD_PIXEL_WIDTH
 #define HEIGHT LCD_PIXEL_HEIGHT
 #define PAGE_HEIGHT 8
 
 #include "../scaled_tft.h"
 
-#define UPSCALE0(M) ((M) * (FSMC_UPSCALE))
+#define UPSCALE0(M) ((M) * (GRAPHICAL_TFT_UPSCALE))
 #define UPSCALE(A,M) (UPSCALE0(M) + (A))
-#define X_HI (UPSCALE(LCD_PIXEL_OFFSET_X, WIDTH) - 1)
-#define Y_HI (UPSCALE(LCD_PIXEL_OFFSET_Y, HEIGHT) - 1)
+#define X_HI (UPSCALE(TFT_PIXEL_OFFSET_X, WIDTH) - 1)
+#define Y_HI (UPSCALE(TFT_PIXEL_OFFSET_Y, HEIGHT) - 1)
 
 // see https://ee-programming-notepad.blogspot.com/2016/10/16-bit-color-generator-picker.html
 
@@ -156,7 +152,8 @@ static uint32_t lcd_id = 0;
 
 static void setWindow_ili9328(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) {
   #if HAS_LCD_IO
-    #define IO_REG_DATA(R,D) do { LCD_IO_WriteReg(R); LCD_IO_WriteData(D); }while(0)
+    tftio.DataTransferBegin(DATASIZE_8BIT);
+    #define IO_REG_DATA(R,D) do { tftio.WriteReg(R); tftio.WriteData(D); }while(0)
   #else
     #define IO_REG_DATA(R,D) do { u8g_WriteByte(u8g, dev, R); u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&D); }while(0)
   #endif
@@ -174,7 +171,8 @@ static void setWindow_ili9328(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_
   IO_REG_DATA(ILI9328_VASET,   Xmin);
 
   #if HAS_LCD_IO
-    LCD_IO_WriteReg(ILI9328_WRITE_RAM);
+    tftio.WriteReg(ILI9328_WRITE_RAM);
+    tftio.DataTransferEnd();
   #else
     u8g_WriteByte(u8g, dev, ILI9328_WRITE_RAM);
     u8g_SetAddress(u8g, dev, 1);
@@ -183,19 +181,21 @@ static void setWindow_ili9328(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_
 
 static void setWindow_st7789v(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) {
   #if HAS_LCD_IO
-    LCD_IO_WriteReg(ST7789V_CASET);
-    LCD_IO_WriteData((Xmin >> 8) & 0xFF);
-    LCD_IO_WriteData(Xmin & 0xFF);
-    LCD_IO_WriteData((Xmax >> 8) & 0xFF);
-    LCD_IO_WriteData(Xmax & 0xFF);
-
-    LCD_IO_WriteReg(ST7789V_RASET);
-    LCD_IO_WriteData((Ymin >> 8) & 0xFF);
-    LCD_IO_WriteData(Ymin & 0xFF);
-    LCD_IO_WriteData((Ymax >> 8) & 0xFF);
-    LCD_IO_WriteData(Ymax & 0xFF);
-
-    LCD_IO_WriteReg(ST7789V_WRITE_RAM);
+    tftio.DataTransferBegin(DATASIZE_8BIT);
+    tftio.WriteReg(ST7789V_CASET);
+    tftio.WriteData((Xmin >> 8) & 0xFF);
+    tftio.WriteData(Xmin & 0xFF);
+    tftio.WriteData((Xmax >> 8) & 0xFF);
+    tftio.WriteData(Xmax & 0xFF);
+
+    tftio.WriteReg(ST7789V_RASET);
+    tftio.WriteData((Ymin >> 8) & 0xFF);
+    tftio.WriteData(Ymin & 0xFF);
+    tftio.WriteData((Ymax >> 8) & 0xFF);
+    tftio.WriteData(Ymax & 0xFF);
+
+    tftio.WriteReg(ST7789V_WRITE_RAM);
+    tftio.DataTransferEnd();
   #else
     u8g_SetAddress(u8g, dev, 0); u8g_WriteByte(u8g, dev, ST7789V_CASET); u8g_SetAddress(u8g, dev, 1);
     u8g_WriteByte(u8g, dev, (Xmin >> 8) & 0xFF);
@@ -227,17 +227,17 @@ void (*setWindow)(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint
     for (;;) {
       data = *sequence++;
       if (data != 0xFFFF) {
-        LCD_IO_WriteData(data);
+        tftio.WriteData(data);
         continue;
       }
       data = *sequence++;
       if (data == 0x7FFF) return;
       if (data == 0xFFFF) {
-        LCD_IO_WriteData(data);
+        tftio.WriteData(data);
       } else if (data & 0x8000) {
         delay(data & 0x7FFF);
       } else if ((data & 0xFF00) == 0) {
-        LCD_IO_WriteReg(data);
+        tftio.WriteReg(data);
       }
     }
   }
@@ -591,7 +591,7 @@ static const uint16_t st7796_init[] = {
   #define BUTTON_Y_HI (UPSCALE(BUTTON_Y_LO, BUTTON_SIZE_Y) - 1)
 
   void drawImage(const uint8_t *data, u8g_t *u8g, u8g_dev_t *dev, uint16_t length, uint16_t height, uint16_t color) {
-    uint16_t buffer[BUTTON_SIZE_X * sq(FSMC_UPSCALE)];
+    uint16_t buffer[BUTTON_SIZE_X * sq(GRAPHICAL_TFT_UPSCALE)];
 
     if (length > BUTTON_SIZE_X) return;
 
@@ -603,16 +603,16 @@ static const uint16_t st7796_init[] = {
           v = color;
         else
           v = TFT_MARLINBG_COLOR;
-        LOOP_L_N(n, FSMC_UPSCALE) buffer[k++] = v;
+        LOOP_L_N(n, GRAPHICAL_TFT_UPSCALE) buffer[k++] = v;
       }
       #if HAS_LCD_IO
-        LOOP_S_L_N(n, 1, FSMC_UPSCALE)
+        LOOP_S_L_N(n, 1, GRAPHICAL_TFT_UPSCALE)
           for (uint16_t l = 0; l < UPSCALE0(length); l++)
             buffer[l + n * UPSCALE0(length)] = buffer[l];
 
-        LCD_IO_WriteSequence(buffer, length * sq(FSMC_UPSCALE));
+        tftio.WriteSequence(buffer, length * sq(GRAPHICAL_TFT_UPSCALE));
       #else
-        for (uint8_t i = FSMC_UPSCALE; i--;)
+        for (uint8_t i = GRAPHICAL_TFT_UPSCALE; i--;)
           u8g_WriteSequence(u8g, dev, k << 1, (uint8_t*)buffer);
       #endif
     }
@@ -632,22 +632,17 @@ static uint8_t page;
 uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg) {
   u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 
-  #if ENABLED(SPI_GRAPHICAL_TFT)
-    LCD_IO_Init(-1, -1);
-  #endif
-
   #if HAS_LCD_IO
-    static uint16_t bufferA[WIDTH * sq(FSMC_UPSCALE)], bufferB[WIDTH * sq(FSMC_UPSCALE)];
+    static uint16_t bufferA[WIDTH * sq(GRAPHICAL_TFT_UPSCALE)], bufferB[WIDTH * sq(GRAPHICAL_TFT_UPSCALE)];
     uint16_t* buffer = &bufferA[0];
-    bool allow_async = DISABLED(SPI_GRAPHICAL_TFT);
   #else
-    uint16_t buffer[WIDTH * FSMC_UPSCALE]; // 16-bit RGB 565 pixel line buffer
+    uint16_t buffer[WIDTH * GRAPHICAL_TFT_UPSCALE]; // 16-bit RGB 565 pixel line buffer
   #endif
 
   switch (msg) {
     case U8G_DEV_MSG_INIT:
       dev->com_fn(u8g, U8G_COM_MSG_INIT, U8G_SPI_CLK_CYCLE_NONE, &lcd_id);
-
+      tftio.DataTransferBegin(DATASIZE_8BIT);
       switch (lcd_id & 0xFFFF) {
         case 0x8552:   // ST7789V
           WRITE_ESC_SEQUENCE(st7789v_init);
@@ -682,6 +677,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
           setWindow = (lcd_id & 0xFF000000) ? setWindow_st7789v : setWindow_ili9328;
           break;
       }
+      tftio.DataTransferEnd();
 
       if (preinit) {
         preinit = false;
@@ -689,13 +685,13 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
       }
 
       // Clear Screen
-      setWindow(u8g, dev, 0, 0, (LCD_FULL_PIXEL_WIDTH) - 1, (LCD_FULL_PIXEL_HEIGHT) - 1);
+      setWindow(u8g, dev, 0, 0, (TFT_WIDTH) - 1, (TFT_HEIGHT) - 1);
       #if HAS_LCD_IO
-        LCD_IO_WriteMultiple(TFT_MARLINBG_COLOR, (LCD_FULL_PIXEL_WIDTH) * (LCD_FULL_PIXEL_HEIGHT));
+        tftio.WriteMultiple(TFT_MARLINBG_COLOR, uint32_t(TFT_WIDTH) * (TFT_HEIGHT));
       #else
-        memset2(buffer, TFT_MARLINBG_COLOR, (LCD_FULL_PIXEL_WIDTH) / 2);
-        for (uint16_t i = 0; i < (LCD_FULL_PIXEL_HEIGHT) * sq(FSMC_UPSCALE); i++)
-          u8g_WriteSequence(u8g, dev, LCD_FULL_PIXEL_WIDTH / 2, (uint8_t *)buffer);
+        memset2(buffer, TFT_MARLINBG_COLOR, (TFT_WIDTH) / 2);
+        for (uint16_t i = 0; i < (TFT_HEIGHT) * sq(GRAPHICAL_TFT_UPSCALE); i++)
+          u8g_WriteSequence(u8g, dev, (TFT_WIDTH) / 2, (uint8_t *)buffer);
       #endif
 
       // Bottom buttons
@@ -719,7 +715,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
 
     case U8G_DEV_MSG_PAGE_FIRST:
       page = 0;
-      setWindow(u8g, dev, LCD_PIXEL_OFFSET_X, LCD_PIXEL_OFFSET_Y, X_HI, Y_HI);
+      setWindow(u8g, dev, TFT_PIXEL_OFFSET_X, TFT_PIXEL_OFFSET_Y, X_HI, Y_HI);
       break;
 
     case U8G_DEV_MSG_PAGE_NEXT:
@@ -733,26 +729,18 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
         for (uint16_t i = 0; i < (uint32_t)pb->width; i++) {
           const uint8_t b = *(((uint8_t *)pb->buf) + i);
           const uint16_t c = TEST(b, y) ? TFT_MARLINUI_COLOR : TFT_MARLINBG_COLOR;
-          LOOP_L_N(n, FSMC_UPSCALE) buffer[k++] = c;
+          LOOP_L_N(n, GRAPHICAL_TFT_UPSCALE) buffer[k++] = c;
         }
         #if HAS_LCD_IO
-          LOOP_S_L_N(n, 1, FSMC_UPSCALE)
+          LOOP_S_L_N(n, 1, GRAPHICAL_TFT_UPSCALE)
             for (uint16_t l = 0; l < UPSCALE0(WIDTH); l++)
               buffer[l + n * UPSCALE0(WIDTH)] = buffer[l];
 
-          if (allow_async) {
-            if (y > 0 || page > 1) LCD_IO_WaitSequence_Async();
-            if (y == 7 && page == 8)
-              LCD_IO_WriteSequence(buffer, COUNT(bufferA)); // last line of last page
-            else
-              LCD_IO_WriteSequence_Async(buffer, COUNT(bufferA));
-          }
-          else
-            LCD_IO_WriteSequence(buffer, COUNT(bufferA));
+          tftio.WriteSequence(buffer, COUNT(bufferA));
         #else
           uint8_t* bufptr = (uint8_t*) buffer;
-          for (uint8_t i = FSMC_UPSCALE; i--;) {
-            LOOP_S_L_N(n, 0, FSMC_UPSCALE * 2) {
+          for (uint8_t i = GRAPHICAL_TFT_UPSCALE; i--;) {
+            LOOP_S_L_N(n, 0, GRAPHICAL_TFT_UPSCALE * 2) {
               u8g_WriteSequence(u8g, dev, WIDTH, &bufptr[WIDTH * n]);
             }
           }
@@ -770,6 +758,59 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
   return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 }
 
-U8G_PB_DEV(u8g_dev_tft_320x240_upscale_from_128x64, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_tft_320x240_upscale_from_128x64_fn, U8G_COM_HAL_FSMC_FN);
+static uint8_t msgInitCount = 2; // Ignore all messages until 2nd U8G_COM_MSG_INIT
+
+uint8_t u8g_com_stm32duino_tft_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr) {
+  if (msgInitCount) {
+    if (msg == U8G_COM_MSG_INIT) msgInitCount--;
+    if (msgInitCount) return -1;
+  }
+
+  static uint8_t isCommand;
+
+  switch (msg) {
+    case U8G_COM_MSG_STOP: break;
+    case U8G_COM_MSG_INIT:
+      u8g_SetPIOutput(u8g, U8G_PI_RESET);
+
+      u8g_Delay(50);
+
+      tftio.Init();
+
+      if (arg_ptr) {
+        *((uint32_t *)arg_ptr) = tftio.GetID();
+      }
+      isCommand = 0;
+      break;
+
+    case U8G_COM_MSG_ADDRESS: // define cmd (arg_val = 0) or data mode (arg_val = 1)
+      isCommand = arg_val == 0 ? 1 : 0;
+      break;
+
+    case U8G_COM_MSG_RESET:
+      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
+      break;
+
+    case U8G_COM_MSG_WRITE_BYTE:
+      tftio.DataTransferBegin(DATASIZE_8BIT);
+      if (isCommand)
+        tftio.WriteReg(arg_val);
+      else
+        tftio.WriteData((uint16_t)arg_val);
+      tftio.DataTransferEnd();
+      break;
+
+    case U8G_COM_MSG_WRITE_SEQ:
+      tftio.DataTransferBegin(DATASIZE_8BIT);
+      for (uint8_t i = 0; i < arg_val; i += 2)
+        tftio.WriteData(*(uint16_t *)(((uint32_t)arg_ptr) + i));
+      tftio.DataTransferEnd();
+      break;
+
+  }
+  return 1;
+}
+
+U8G_PB_DEV(u8g_dev_tft_320x240_upscale_from_128x64, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_tft_320x240_upscale_from_128x64_fn, U8G_COM_HAL_TFT_FN);
 
 #endif // HAS_GRAPHICAL_LCD && FSMC_CS

commit 567d77f1cb62dd444ee2c13350b60bc2032fc083
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Fri Aug 14 05:32:01 2020 +0200

    TFT: Restore ILI9341 colors and reversed logic (#19010)
    
    Followup to #18877, #18901, #18817

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 205cafbccb..e42faf0255 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -366,7 +366,7 @@ static const uint16_t ili9328_init[] = {
 static const uint16_t ili9341_init[] = {
   ESC_REG(0x0010), ESC_DELAY(10),
   ESC_REG(0x0001), ESC_DELAY(200),
-  ESC_REG(0x0036), TERN(GRAPHICAL_TFT_ROTATE_180, 0x00E8, 0x0028),
+  ESC_REG(0x0036), TERN(GRAPHICAL_TFT_ROTATE_180, 0x0028, 0x00E8),
   ESC_REG(0x003A), 0x0055,
   ESC_REG(0x002A), 0x0000, 0x0000, 0x0001, 0x003F,
   ESC_REG(0x002B), 0x0000, 0x0000, 0x0000, 0x00EF,
@@ -658,6 +658,9 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
           setWindow = setWindow_ili9328;
           break;
         case 0x9341:   // ILI9341
+          WRITE_ESC_SEQUENCE(ili9341_init);
+          setWindow = setWindow_st7789v;
+          break;
         case 0x8066:   // Anycubic / TronXY TFTs (480x320)
           WRITE_ESC_SEQUENCE(ili9488_init);
           setWindow = setWindow_st7789v;

commit 181a35181b8c14c6304013ed31f28a1b86e4dab4
Author: Claus Näveke <nitek@blickt.es>
Date:   Tue Aug 4 10:02:08 2020 +0200

    Make ili9341 rotatable (e.g., Anycubic Predator) (#18877)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 82bef78244..205cafbccb 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -366,7 +366,7 @@ static const uint16_t ili9328_init[] = {
 static const uint16_t ili9341_init[] = {
   ESC_REG(0x0010), ESC_DELAY(10),
   ESC_REG(0x0001), ESC_DELAY(200),
-  ESC_REG(0x0036), 0x00E8,
+  ESC_REG(0x0036), TERN(GRAPHICAL_TFT_ROTATE_180, 0x00E8, 0x0028),
   ESC_REG(0x003A), 0x0055,
   ESC_REG(0x002A), 0x0000, 0x0000, 0x0001, 0x003F,
   ESC_REG(0x002B), 0x0000, 0x0000, 0x0000, 0x00EF,

commit 04c10eda92ee34ae45da75cd85c42211c23cf1e8
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Aug 4 01:41:23 2020 -0300

    Fix MKS Nano v1.2 FSMC display (#18901)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 0f6cbcbb8a..82bef78244 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -242,6 +242,7 @@ void (*setWindow)(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint
     }
   }
   #define WRITE_ESC_SEQUENCE(V) writeEscSequence(V)
+  #define WRITE_ESC_SEQUENCE16(V) writeEscSequence(V)
 #else
   void writeEscSequence8(u8g_t *u8g, u8g_dev_t *dev, const uint16_t *sequence) {
     uint16_t data;
@@ -289,6 +290,8 @@ void (*setWindow)(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint
     }
     u8g_SetAddress(u8g, dev, 1);
   }
+
+  #define WRITE_ESC_SEQUENCE16(V) writeEscSequence16(u8g, dev, V)
 #endif
 
 static const uint16_t st7789v_init[] = {
@@ -378,7 +381,28 @@ static const uint16_t ili9341_init[] = {
   ESC_END
 };
 
-static const uint16_t st9677_init[] = {
+static const uint16_t ili9488_init[] = {
+  ESC_REG(0x00E0), 0x0000, 0x0007, 0x000F, 0x000D, 0x001B, 0x000A, 0x003C, 0x0078, 0x004A, 0x0007, 0x000E, 0x0009, 0x001B, 0x001E, 0x000F,
+  ESC_REG(0x00E1), 0x0000, 0x0022, 0x0024, 0x0006, 0x0012, 0x0007, 0x0036, 0x0047, 0x0047, 0x0006, 0x000A, 0x0007, 0x0030, 0x0037, 0x000F,
+  ESC_REG(0x00C0), 0x0010, 0x0010,
+  ESC_REG(0x00C1), 0x0041,
+  ESC_REG(0x00C5), 0x0000, 0x0022, 0x0080,
+  ESC_REG(0x0036), TERN(GRAPHICAL_TFT_ROTATE_180, 0x00A8, 0x0068),
+  ESC_REG(0x003A), 0x0055,
+  ESC_REG(0x00B0), 0x0000,
+  ESC_REG(0x00B1), 0x00B0, 0x0011,
+  ESC_REG(0x00B4), 0x0002,
+  ESC_REG(0x00B6), 0x0002, 0x0042,
+  ESC_REG(0x00B7), 0x00C6,
+  ESC_REG(0x00E9), 0x0000,
+  ESC_REG(0x00F0), 0x00A9, 0x0051, 0x002C, 0x0082,
+  ESC_REG(0x0029),
+  ESC_REG(0x0011),
+  ESC_DELAY(100),
+  ESC_END
+};
+
+static const uint16_t st7796_init[] = {
   ESC_REG(0x0010), ESC_DELAY(120),
   ESC_REG(0x0001), ESC_DELAY(120),
   ESC_REG(0x0011), ESC_DELAY(120),
@@ -588,8 +612,8 @@ static const uint16_t st9677_init[] = {
 
         LCD_IO_WriteSequence(buffer, length * sq(FSMC_UPSCALE));
       #else
-        u8g_WriteSequence(u8g, dev, k << 1, (uint8_t*)buffer);
-        u8g_WriteSequence(u8g, dev, k << 1, (uint8_t*)buffer);
+        for (uint8_t i = FSMC_UPSCALE; i--;)
+          u8g_WriteSequence(u8g, dev, k << 1, (uint8_t*)buffer);
       #endif
     }
   }
@@ -617,7 +641,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
     uint16_t* buffer = &bufferA[0];
     bool allow_async = DISABLED(SPI_GRAPHICAL_TFT);
   #else
-    uint16_t buffer[WIDTH*2]; // 16-bit RGB 565 pixel line buffer
+    uint16_t buffer[WIDTH * FSMC_UPSCALE]; // 16-bit RGB 565 pixel line buffer
   #endif
 
   switch (msg) {
@@ -630,18 +654,21 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
           setWindow = setWindow_st7789v;
           break;
         case 0x9328:  // ILI9328
-          WRITE_ESC_SEQUENCE(ili9328_init);
+          WRITE_ESC_SEQUENCE16(ili9328_init);
           setWindow = setWindow_ili9328;
           break;
         case 0x9341:   // ILI9341
         case 0x8066:   // Anycubic / TronXY TFTs (480x320)
-          WRITE_ESC_SEQUENCE(ili9341_init);
+          WRITE_ESC_SEQUENCE(ili9488_init);
           setWindow = setWindow_st7789v;
           break;
         case 0x7796:
-          WRITE_ESC_SEQUENCE(TERN(HAS_LCD_IO, st9677_init, ili9341_init));
+          WRITE_ESC_SEQUENCE(st7796_init);
           setWindow = setWindow_st7789v;
           break;
+        case 0x9488:
+          WRITE_ESC_SEQUENCE(ili9488_init);
+          setWindow = setWindow_st7789v;
         case 0x0404:  // No connected display on FSMC
           lcd_id = 0;
           return 0;
@@ -664,8 +691,8 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
         LCD_IO_WriteMultiple(TFT_MARLINBG_COLOR, (LCD_FULL_PIXEL_WIDTH) * (LCD_FULL_PIXEL_HEIGHT));
       #else
         memset2(buffer, TFT_MARLINBG_COLOR, (LCD_FULL_PIXEL_WIDTH) / 2);
-        for (uint16_t i = 0; i < (LCD_FULL_PIXEL_WIDTH) * 3; i++)
-          u8g_WriteSequence(u8g, dev, (LCD_FULL_PIXEL_WIDTH) / 2, (uint8_t *)buffer);
+        for (uint16_t i = 0; i < (LCD_FULL_PIXEL_HEIGHT) * sq(FSMC_UPSCALE); i++)
+          u8g_WriteSequence(u8g, dev, LCD_FULL_PIXEL_WIDTH / 2, (uint8_t *)buffer);
       #endif
 
       // Bottom buttons
@@ -721,11 +748,10 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
             LCD_IO_WriteSequence(buffer, COUNT(bufferA));
         #else
           uint8_t* bufptr = (uint8_t*) buffer;
-          for (uint8_t i = 2; i--;) {
-            u8g_WriteSequence(u8g, dev, WIDTH, &bufptr[0]);
-            u8g_WriteSequence(u8g, dev, WIDTH, &bufptr[WIDTH]);
-            u8g_WriteSequence(u8g, dev, WIDTH, &bufptr[WIDTH*2]);
-            u8g_WriteSequence(u8g, dev, WIDTH, &bufptr[WIDTH*3]);
+          for (uint8_t i = FSMC_UPSCALE; i--;) {
+            LOOP_S_L_N(n, 0, FSMC_UPSCALE * 2) {
+              u8g_WriteSequence(u8g, dev, WIDTH, &bufptr[WIDTH * n]);
+            }
           }
         #endif
       }

commit ca0ebf10d10d3c8e99c83c123c5ff2a678cda900
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Aug 3 21:55:37 2020 -0500

    Move scaled TFT / touch defines (#18915)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index d081541c5a..0f6cbcbb8a 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -20,40 +20,39 @@
  *
  */
 
-/*
-
-  u8g_dev_tft_320x240_upscale_from_128x64.cpp
-
-  Universal 8bit Graphics Library
-
-  Copyright (c) 2011, olikraus@gmail.com
-  All rights reserved.
-
-  Redistribution and use in source and binary forms, with or without modification,
-  are permitted provided that the following conditions are met:
-
-  * Redistributions of source code must retain the above copyright notice, this list
-    of conditions and the following disclaimer.
-
-  * Redistributions in binary form must reproduce the above copyright notice, this
-    list of conditions and the following disclaimer in the documentation and/or other
-    materials provided with the distribution.
-
-  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
-  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
-  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
-  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
-  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-*/
+/**
+ * u8g_dev_tft_320x240_upscale_from_128x64.cpp
+ *
+ * Universal 8bit Graphics Library
+ *
+ * Copyright (c) 2011, olikraus@gmail.com
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this list
+ * of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice, this
+ * list of conditions and the following disclaimer in the documentation and/or other
+ * materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
 
 #include "../../inc/MarlinConfig.h"
 
@@ -80,14 +79,16 @@
   extern void LCD_IO_WriteMultiple(uint16_t color, uint32_t count);
 #endif
 
-#define WIDTH LCD_PIXEL_WIDTH
+#define WIDTH  LCD_PIXEL_WIDTH
 #define HEIGHT LCD_PIXEL_HEIGHT
 #define PAGE_HEIGHT 8
 
-#define X_LO LCD_PIXEL_OFFSET_X
-#define Y_LO LCD_PIXEL_OFFSET_Y
-#define X_HI (X_LO + (FSMC_UPSCALE) * WIDTH  - 1)
-#define Y_HI (Y_LO + (FSMC_UPSCALE) * HEIGHT - 1)
+#include "../scaled_tft.h"
+
+#define UPSCALE0(M) ((M) * (FSMC_UPSCALE))
+#define UPSCALE(A,M) (UPSCALE0(M) + (A))
+#define X_HI (UPSCALE(LCD_PIXEL_OFFSET_X, WIDTH) - 1)
+#define Y_HI (UPSCALE(LCD_PIXEL_OFFSET_Y, HEIGHT) - 1)
 
 // see https://ee-programming-notepad.blogspot.com/2016/10/16-bit-color-generator-picker.html
 
@@ -153,7 +154,6 @@ static uint32_t lcd_id = 0;
 #define ILI9328_VASTART     0x52   /* Vertical address start position (0-511) */
 #define ILI9328_VAEND       0x53   /* Vertical address end position (0-511) */
 
-
 static void setWindow_ili9328(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) {
   #if HAS_LCD_IO
     #define IO_REG_DATA(R,D) do { LCD_IO_WriteReg(R); LCD_IO_WriteData(D); }while(0)
@@ -216,7 +216,6 @@ static void setWindow_st7789v(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_
 static void setWindow_none(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) {}
 void (*setWindow)(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) = setWindow_none;
 
-
 #define ESC_REG(x)      0xFFFF, 0x00FF & (uint16_t)x
 #define ESC_DELAY(x)    0xFFFF, 0x8000 | (x & 0x7FFF)
 #define ESC_END         0xFFFF, 0x7FFF
@@ -552,20 +551,20 @@ static const uint16_t st9677_init[] = {
   #define BUTTON_SIZE_Y 20
 
   // 14, 90, 166, 242, 185 are the original values upscaled 2x.
-  #define BUTTOND_X_LO (14 / 2) * (FSMC_UPSCALE)
-  #define BUTTOND_X_HI (BUTTOND_X_LO + (FSMC_UPSCALE) * BUTTON_SIZE_X - 1)
+  #define BUTTOND_X_LO UPSCALE0(14 / 2)
+  #define BUTTOND_X_HI (UPSCALE(BUTTOND_X_LO, BUTTON_SIZE_X) - 1)
 
-  #define BUTTONA_X_LO (90 / 2) * (FSMC_UPSCALE)
-  #define BUTTONA_X_HI (BUTTONA_X_LO + (FSMC_UPSCALE) * BUTTON_SIZE_X - 1)
+  #define BUTTONA_X_LO UPSCALE0(90 / 2)
+  #define BUTTONA_X_HI (UPSCALE(BUTTONA_X_LO, BUTTON_SIZE_X) - 1)
 
-  #define BUTTONB_X_LO (166 / 2) * (FSMC_UPSCALE)
-  #define BUTTONB_X_HI (BUTTONB_X_LO + (FSMC_UPSCALE) * BUTTON_SIZE_X - 1)
+  #define BUTTONB_X_LO UPSCALE0(166 / 2)
+  #define BUTTONB_X_HI (UPSCALE(BUTTONB_X_LO, BUTTON_SIZE_X) - 1)
 
-  #define BUTTONC_X_LO (242 / 2) * (FSMC_UPSCALE)
-  #define BUTTONC_X_HI (BUTTONC_X_LO + (FSMC_UPSCALE) * BUTTON_SIZE_X - 1)
+  #define BUTTONC_X_LO UPSCALE0(242 / 2)
+  #define BUTTONC_X_HI (UPSCALE(BUTTONC_X_LO, BUTTON_SIZE_X) - 1)
 
-  #define BUTTON_Y_LO (140 / 2) * (FSMC_UPSCALE) + 44 //184 2x, 254 3x
-  #define BUTTON_Y_HI (BUTTON_Y_LO + (FSMC_UPSCALE) * BUTTON_SIZE_Y - 1)
+  #define BUTTON_Y_LO UPSCALE0(140 / 2) + 44 // 184 2x, 254 3x
+  #define BUTTON_Y_HI (UPSCALE(BUTTON_Y_LO, BUTTON_SIZE_Y) - 1)
 
   void drawImage(const uint8_t *data, u8g_t *u8g, u8g_dev_t *dev, uint16_t length, uint16_t height, uint16_t color) {
     uint16_t buffer[BUTTON_SIZE_X * sq(FSMC_UPSCALE)];
@@ -584,8 +583,8 @@ static const uint16_t st9677_init[] = {
       }
       #if HAS_LCD_IO
         LOOP_S_L_N(n, 1, FSMC_UPSCALE)
-          for (uint16_t l = 0; l < length * (FSMC_UPSCALE); l++)
-            buffer[l + (length * (FSMC_UPSCALE) * n)] = buffer[l];
+          for (uint16_t l = 0; l < UPSCALE0(length); l++)
+            buffer[l + n * UPSCALE0(length)] = buffer[l];
 
         LCD_IO_WriteSequence(buffer, length * sq(FSMC_UPSCALE));
       #else
@@ -660,27 +659,27 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
       }
 
       // Clear Screen
-      setWindow(u8g, dev, 0, 0, LCD_FULL_PIXEL_WIDTH - 1, LCD_FULL_PIXEL_HEIGHT - 1);
+      setWindow(u8g, dev, 0, 0, (LCD_FULL_PIXEL_WIDTH) - 1, (LCD_FULL_PIXEL_HEIGHT) - 1);
       #if HAS_LCD_IO
-        LCD_IO_WriteMultiple(TFT_MARLINBG_COLOR, LCD_FULL_PIXEL_WIDTH * LCD_FULL_PIXEL_HEIGHT);
+        LCD_IO_WriteMultiple(TFT_MARLINBG_COLOR, (LCD_FULL_PIXEL_WIDTH) * (LCD_FULL_PIXEL_HEIGHT));
       #else
-        memset2(buffer, TFT_MARLINBG_COLOR, 160);
-        for (uint16_t i = 0; i < 960; i++)
-          u8g_WriteSequence(u8g, dev, 160, (uint8_t *)buffer);
+        memset2(buffer, TFT_MARLINBG_COLOR, (LCD_FULL_PIXEL_WIDTH) / 2);
+        for (uint16_t i = 0; i < (LCD_FULL_PIXEL_WIDTH) * 3; i++)
+          u8g_WriteSequence(u8g, dev, (LCD_FULL_PIXEL_WIDTH) / 2, (uint8_t *)buffer);
       #endif
 
       // Bottom buttons
       #if HAS_TOUCH_XPT2046
-        setWindow(u8g, dev, BUTTOND_X_LO, BUTTON_Y_LO,  BUTTOND_X_HI, BUTTON_Y_HI);
+        setWindow(u8g, dev, BUTTOND_X_LO, BUTTON_Y_LO, BUTTOND_X_HI, BUTTON_Y_HI);
         drawImage(buttonD, u8g, dev, 32, 20, TFT_BTCANCEL_COLOR);
 
-        setWindow(u8g, dev, BUTTONA_X_LO, BUTTON_Y_LO,  BUTTONA_X_HI, BUTTON_Y_HI);
+        setWindow(u8g, dev, BUTTONA_X_LO, BUTTON_Y_LO, BUTTONA_X_HI, BUTTON_Y_HI);
         drawImage(buttonA, u8g, dev, 32, 20, TFT_BTARROWS_COLOR);
 
-        setWindow(u8g, dev, BUTTONB_X_LO, BUTTON_Y_LO,  BUTTONB_X_HI, BUTTON_Y_HI);
+        setWindow(u8g, dev, BUTTONB_X_LO, BUTTON_Y_LO, BUTTONB_X_HI, BUTTON_Y_HI);
         drawImage(buttonB, u8g, dev, 32, 20, TFT_BTARROWS_COLOR);
 
-        setWindow(u8g, dev, BUTTONC_X_LO, BUTTON_Y_LO,  BUTTONC_X_HI, BUTTON_Y_HI);
+        setWindow(u8g, dev, BUTTONC_X_LO, BUTTON_Y_LO, BUTTONC_X_HI, BUTTON_Y_HI);
         drawImage(buttonC, u8g, dev, 32, 20, TFT_BTOKMENU_COLOR);
       #endif // HAS_TOUCH_XPT2046
 
@@ -690,7 +689,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
 
     case U8G_DEV_MSG_PAGE_FIRST:
       page = 0;
-      setWindow(u8g, dev, X_LO, Y_LO, X_HI, Y_HI);
+      setWindow(u8g, dev, LCD_PIXEL_OFFSET_X, LCD_PIXEL_OFFSET_Y, X_HI, Y_HI);
       break;
 
     case U8G_DEV_MSG_PAGE_NEXT:
@@ -708,8 +707,8 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
         }
         #if HAS_LCD_IO
           LOOP_S_L_N(n, 1, FSMC_UPSCALE)
-            for (uint16_t l = 0; l < WIDTH * (FSMC_UPSCALE); l++)
-              buffer[l + WIDTH * (FSMC_UPSCALE) * n] = buffer[l];
+            for (uint16_t l = 0; l < UPSCALE0(WIDTH); l++)
+              buffer[l + n * UPSCALE0(WIDTH)] = buffer[l];
 
           if (allow_async) {
             if (y > 0 || page > 1) LCD_IO_WaitSequence_Async();

commit 117df87d193994f6fbcd46c45573095adf921784
Author: Alexander Gavrilenko <jmz52@users.noreply.github.com>
Date:   Thu Jul 30 09:43:19 2020 +0300

    Support for TFT & Touch Screens (#18130)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 33cd5ecca6..d081541c5a 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -403,7 +403,7 @@ static const uint16_t st9677_init[] = {
   ESC_END
 };
 
-#if ENABLED(TOUCH_BUTTONS)
+#if HAS_TOUCH_XPT2046
 
   static const uint8_t buttonD[] = {
     B01111111,B11111111,B11111111,B11111110,
@@ -595,7 +595,7 @@ static const uint16_t st9677_init[] = {
     }
   }
 
-#endif // TOUCH_BUTTONS
+#endif // HAS_TOUCH_XPT2046
 
 // Used to fill RGB565 (16bits) background
 inline void memset2(const void *ptr, uint16_t fill, size_t cnt) {
@@ -670,7 +670,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
       #endif
 
       // Bottom buttons
-      #if ENABLED(TOUCH_BUTTONS)
+      #if HAS_TOUCH_XPT2046
         setWindow(u8g, dev, BUTTOND_X_LO, BUTTON_Y_LO,  BUTTOND_X_HI, BUTTON_Y_HI);
         drawImage(buttonD, u8g, dev, 32, 20, TFT_BTCANCEL_COLOR);
 
@@ -682,7 +682,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
 
         setWindow(u8g, dev, BUTTONC_X_LO, BUTTON_Y_LO,  BUTTONC_X_HI, BUTTON_Y_HI);
         drawImage(buttonC, u8g, dev, 32, 20, TFT_BTOKMENU_COLOR);
-      #endif // TOUCH_BUTTONS
+      #endif // HAS_TOUCH_XPT2046
 
       return 0;
 

commit 38ce5966e19094fb499ce7d647961c0594c5f811
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Jul 29 23:25:07 2020 -0300

    SPI Emulated DOGM (like FSMC_GRAPHICAL_TFT, but SPI) (#18817)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index fc7a22b261..33cd5ecca6 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -57,14 +57,21 @@
 
 #include "../../inc/MarlinConfig.h"
 
-#if HAS_GRAPHICAL_LCD && PIN_EXISTS(FSMC_CS)
+#if HAS_GRAPHICAL_LCD && (PIN_EXISTS(FSMC_CS) || ENABLED(SPI_GRAPHICAL_TFT))
 
 #include "HAL_LCD_com_defines.h"
 #include "ultralcd_DOGM.h"
 
 #include <string.h>
 
-#ifdef LCD_USE_DMA_FSMC
+#if EITHER(LCD_USE_DMA_FSMC, LCD_USE_DMA_SPI)
+  #define HAS_LCD_IO 1
+#endif
+
+#if HAS_LCD_IO
+  extern void LCD_IO_Init(uint8_t cs, uint8_t rs);
+  extern uint16_t LCD_IO_ReadData(uint16_t Reg);
+  extern uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize);
   extern void LCD_IO_WriteReg(uint16_t Reg);
   extern void LCD_IO_WriteData(uint16_t RegValue);
   extern void LCD_IO_WriteSequence(uint16_t *data, uint16_t length);
@@ -148,46 +155,34 @@ static uint32_t lcd_id = 0;
 
 
 static void setWindow_ili9328(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) {
-  #ifdef LCD_USE_DMA_FSMC
-    LCD_IO_WriteReg(ILI9328_HASTART);
-    LCD_IO_WriteData(Ymin);
-    LCD_IO_WriteReg(ILI9328_HAEND);
-    LCD_IO_WriteData(Ymax);
-    LCD_IO_WriteReg(ILI9328_VASTART);
-    LCD_IO_WriteData(Xmin);
-    LCD_IO_WriteReg(ILI9328_VAEND);
-    LCD_IO_WriteData(Xmax);
-
-    LCD_IO_WriteReg(ILI9328_HASET);
-    LCD_IO_WriteData(Ymin);
-    LCD_IO_WriteReg(ILI9328_VASET);
-    LCD_IO_WriteData(Xmin);
-
-    LCD_IO_WriteReg(ILI9328_WRITE_RAM);
+  #if HAS_LCD_IO
+    #define IO_REG_DATA(R,D) do { LCD_IO_WriteReg(R); LCD_IO_WriteData(D); }while(0)
   #else
+    #define IO_REG_DATA(R,D) do { u8g_WriteByte(u8g, dev, R); u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&D); }while(0)
+  #endif
+
+  #if NONE(LCD_USE_DMA_FSMC, LCD_USE_DMA_SPI)
     u8g_SetAddress(u8g, dev, 0);
+  #endif
 
-    u8g_WriteByte(u8g, dev, ILI9328_HASTART);
-    u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&Ymin);
-    u8g_WriteByte(u8g, dev, ILI9328_HAEND);
-    u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&Ymax);
-    u8g_WriteByte(u8g, dev, ILI9328_VASTART);
-    u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&Xmin);
-    u8g_WriteByte(u8g, dev, ILI9328_VAEND);
-    u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&Xmax);
+  IO_REG_DATA(ILI9328_HASTART, Ymin);
+  IO_REG_DATA(ILI9328_HAEND,   Ymax);
+  IO_REG_DATA(ILI9328_VASTART, Xmin);
+  IO_REG_DATA(ILI9328_VAEND,   Xmax);
 
-    u8g_WriteByte(u8g, dev, ILI9328_HASET);
-    u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&Ymin);
-    u8g_WriteByte(u8g, dev, ILI9328_VASET);
-    u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&Xmin);
+  IO_REG_DATA(ILI9328_HASET,   Ymin);
+  IO_REG_DATA(ILI9328_VASET,   Xmin);
 
+  #if HAS_LCD_IO
+    LCD_IO_WriteReg(ILI9328_WRITE_RAM);
+  #else
     u8g_WriteByte(u8g, dev, ILI9328_WRITE_RAM);
     u8g_SetAddress(u8g, dev, 1);
   #endif
 }
 
 static void setWindow_st7789v(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) {
-  #ifdef LCD_USE_DMA_FSMC
+  #if HAS_LCD_IO
     LCD_IO_WriteReg(ST7789V_CASET);
     LCD_IO_WriteData((Xmin >> 8) & 0xFF);
     LCD_IO_WriteData(Xmin & 0xFF);
@@ -227,7 +222,7 @@ void (*setWindow)(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint
 #define ESC_END         0xFFFF, 0x7FFF
 #define ESC_FFFF        0xFFFF, 0xFFFF
 
-#ifdef LCD_USE_DMA_FSMC
+#if HAS_LCD_IO
   void writeEscSequence(const uint16_t *sequence) {
     uint16_t data;
     for (;;) {
@@ -247,6 +242,7 @@ void (*setWindow)(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint
       }
     }
   }
+  #define WRITE_ESC_SEQUENCE(V) writeEscSequence(V)
 #else
   void writeEscSequence8(u8g_t *u8g, u8g_dev_t *dev, const uint16_t *sequence) {
     uint16_t data;
@@ -271,6 +267,8 @@ void (*setWindow)(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint
     }
   }
 
+  #define WRITE_ESC_SEQUENCE(V) writeEscSequence8(u8g, dev, V)
+
   void writeEscSequence16(u8g_t *u8g, u8g_dev_t *dev, const uint16_t *sequence) {
     uint16_t data;
     u8g_SetAddress(u8g, dev, 0);
@@ -381,6 +379,30 @@ static const uint16_t ili9341_init[] = {
   ESC_END
 };
 
+static const uint16_t st9677_init[] = {
+  ESC_REG(0x0010), ESC_DELAY(120),
+  ESC_REG(0x0001), ESC_DELAY(120),
+  ESC_REG(0x0011), ESC_DELAY(120),
+  ESC_REG(0x00F0), 0x00C3,
+  ESC_REG(0x00F0), 0x0096,
+  ESC_REG(0x0036), TERN(GRAPHICAL_TFT_ROTATE_180, 0x00E8, 0x0028),
+  ESC_REG(0x003A), 0x0055,
+  ESC_REG(0x00B4), 0x0001,
+  ESC_REG(0x00B7), 0x00C6,
+  ESC_REG(0x00E8), 0x0040, 0x008A, 0x0000, 0x0000, 0x0029, 0x0019, 0x00A5, 0x0033,
+  ESC_REG(0x00C1), 0x0006,
+  ESC_REG(0x00C2), 0x00A7,
+  ESC_REG(0x00C5), 0x0018,
+  ESC_REG(0x00E0), 0x00F0, 0x0009, 0x000B, 0x0006, 0x0004, 0x0015, 0x002F, 0x0054, 0x0042, 0x003C, 0x0017, 0x0014, 0x0018, 0x001B,
+  ESC_REG(0x00E1), 0x00F0, 0x0009, 0x000B, 0x0006, 0x0004, 0x0003, 0x002D, 0x0043, 0x0042, 0x003B, 0x0016, 0x0014, 0x0017, 0x001B,
+  ESC_REG(0x00F0), 0x003C,
+  ESC_REG(0x00F0), 0x0069, ESC_DELAY(120),
+  ESC_REG(0x0029),
+  ESC_REG(0x0011),
+  ESC_DELAY(100),
+  ESC_END
+};
+
 #if ENABLED(TOUCH_BUTTONS)
 
   static const uint8_t buttonD[] = {
@@ -560,7 +582,7 @@ static const uint16_t ili9341_init[] = {
           v = TFT_MARLINBG_COLOR;
         LOOP_L_N(n, FSMC_UPSCALE) buffer[k++] = v;
       }
-      #ifdef LCD_USE_DMA_FSMC
+      #if HAS_LCD_IO
         LOOP_S_L_N(n, 1, FSMC_UPSCALE)
           for (uint16_t l = 0; l < length * (FSMC_UPSCALE); l++)
             buffer[l + (length * (FSMC_UPSCALE) * n)] = buffer[l];
@@ -586,41 +608,39 @@ static uint8_t page;
 
 uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg) {
   u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
-  #ifdef LCD_USE_DMA_FSMC
+
+  #if ENABLED(SPI_GRAPHICAL_TFT)
+    LCD_IO_Init(-1, -1);
+  #endif
+
+  #if HAS_LCD_IO
     static uint16_t bufferA[WIDTH * sq(FSMC_UPSCALE)], bufferB[WIDTH * sq(FSMC_UPSCALE)];
     uint16_t* buffer = &bufferA[0];
-    bool allow_async = true;
+    bool allow_async = DISABLED(SPI_GRAPHICAL_TFT);
   #else
     uint16_t buffer[WIDTH*2]; // 16-bit RGB 565 pixel line buffer
   #endif
+
   switch (msg) {
     case U8G_DEV_MSG_INIT:
       dev->com_fn(u8g, U8G_COM_MSG_INIT, U8G_SPI_CLK_CYCLE_NONE, &lcd_id);
 
       switch (lcd_id & 0xFFFF) {
         case 0x8552:   // ST7789V
-          #ifdef LCD_USE_DMA_FSMC
-            writeEscSequence(st7789v_init);
-          #else
-            writeEscSequence8(u8g, dev, st7789v_init);
-          #endif
+          WRITE_ESC_SEQUENCE(st7789v_init);
           setWindow = setWindow_st7789v;
           break;
         case 0x9328:  // ILI9328
-          #ifdef LCD_USE_DMA_FSMC
-            writeEscSequence(ili9328_init);
-          #else
-            writeEscSequence16(u8g, dev, ili9328_init);
-          #endif
+          WRITE_ESC_SEQUENCE(ili9328_init);
           setWindow = setWindow_ili9328;
           break;
         case 0x9341:   // ILI9341
         case 0x8066:   // Anycubic / TronXY TFTs (480x320)
-          #ifdef LCD_USE_DMA_FSMC
-            writeEscSequence(ili9341_init);
-          #else
-            writeEscSequence8(u8g, dev, ili9341_init);
-          #endif
+          WRITE_ESC_SEQUENCE(ili9341_init);
+          setWindow = setWindow_st7789v;
+          break;
+        case 0x7796:
+          WRITE_ESC_SEQUENCE(TERN(HAS_LCD_IO, st9677_init, ili9341_init));
           setWindow = setWindow_st7789v;
           break;
         case 0x0404:  // No connected display on FSMC
@@ -630,10 +650,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
           lcd_id = 0;
           return 0;
         default:
-          if (lcd_id && 0xFF000000)
-            setWindow = setWindow_st7789v;
-          else
-            setWindow = setWindow_ili9328;
+          setWindow = (lcd_id & 0xFF000000) ? setWindow_st7789v : setWindow_ili9328;
           break;
       }
 
@@ -644,7 +661,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
 
       // Clear Screen
       setWindow(u8g, dev, 0, 0, LCD_FULL_PIXEL_WIDTH - 1, LCD_FULL_PIXEL_HEIGHT - 1);
-      #ifdef LCD_USE_DMA_FSMC
+      #if HAS_LCD_IO
         LCD_IO_WriteMultiple(TFT_MARLINBG_COLOR, LCD_FULL_PIXEL_WIDTH * LCD_FULL_PIXEL_HEIGHT);
       #else
         memset2(buffer, TFT_MARLINBG_COLOR, 160);
@@ -681,7 +698,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
 
       LOOP_L_N(y, PAGE_HEIGHT) {
         uint32_t k = 0;
-        #ifdef LCD_USE_DMA_FSMC
+        #if HAS_LCD_IO
           buffer = (y & 1) ? bufferB : bufferA;
         #endif
         for (uint16_t i = 0; i < (uint32_t)pb->width; i++) {
@@ -689,7 +706,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
           const uint16_t c = TEST(b, y) ? TFT_MARLINUI_COLOR : TFT_MARLINBG_COLOR;
           LOOP_L_N(n, FSMC_UPSCALE) buffer[k++] = c;
         }
-        #ifdef LCD_USE_DMA_FSMC
+        #if HAS_LCD_IO
           LOOP_S_L_N(n, 1, FSMC_UPSCALE)
             for (uint16_t l = 0; l < WIDTH * (FSMC_UPSCALE); l++)
               buffer[l + WIDTH * (FSMC_UPSCALE) * n] = buffer[l];

commit bc688f27dc6db76021da584bc529f29ddb6f6cce
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Jul 25 01:53:07 2020 -0500

    Clean up after changes

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index dbd6f4c117..fc7a22b261 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -597,7 +597,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
     case U8G_DEV_MSG_INIT:
       dev->com_fn(u8g, U8G_COM_MSG_INIT, U8G_SPI_CLK_CYCLE_NONE, &lcd_id);
 
-      switch(lcd_id & 0xFFFF) {
+      switch (lcd_id & 0xFFFF) {
         case 0x8552:   // ST7789V
           #ifdef LCD_USE_DMA_FSMC
             writeEscSequence(st7789v_init);

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 0f602246b4..dbd6f4c117 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit e5bc9d31cc87be5c7ef2bd3cd70c2599f76d2bd7
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Jul 1 03:30:24 2020 -0300

    Add TFT_LVGL_UI support (#18438)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 20fd44f580..0f602246b4 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -64,7 +64,7 @@
 
 #include <string.h>
 
-#if ENABLED(LCD_USE_DMA_FSMC)
+#ifdef LCD_USE_DMA_FSMC
   extern void LCD_IO_WriteReg(uint16_t Reg);
   extern void LCD_IO_WriteData(uint16_t RegValue);
   extern void LCD_IO_WriteSequence(uint16_t *data, uint16_t length);

commit 6d571a547ccb0b67625bc2212b4fbf22de6bd3e5
Author: Victor <rhapsodyv@gmail.com>
Date:   Mon Jun 15 22:51:12 2020 -0300

    Clean up TFT / Touch code (#18296)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 7c7021a243..20fd44f580 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -73,10 +73,6 @@
   extern void LCD_IO_WriteMultiple(uint16_t color, uint32_t count);
 #endif
 
-#ifndef FSMC_UPSCALE
-  #define FSMC_UPSCALE 2
-#endif
-
 #define WIDTH LCD_PIXEL_WIDTH
 #define HEIGHT LCD_PIXEL_HEIGHT
 #define PAGE_HEIGHT 8

commit 7db3391524ac183c682dacea3e1b7bb927ddc245
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Sat Jun 13 23:33:08 2020 +0200

    Remove DOGM bottom horizontal line/separator (#18273)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 63d4189910..7c7021a243 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -552,7 +552,6 @@ static const uint16_t ili9341_init[] = {
   void drawImage(const uint8_t *data, u8g_t *u8g, u8g_dev_t *dev, uint16_t length, uint16_t height, uint16_t color) {
     uint16_t buffer[BUTTON_SIZE_X * sq(FSMC_UPSCALE)];
 
-    //NOTE: the buffer are sized for max 32 lenght! If you need draw bigger things with this function, we need increase the buffer
     if (length > BUTTON_SIZE_X) return;
 
     for (uint16_t i = 0; i < height; i++) {
@@ -620,7 +619,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
           setWindow = setWindow_ili9328;
           break;
         case 0x9341:   // ILI9341
-        case 0x8066:   // ILI9341 Anycubic / TronXY TFTs      
+        case 0x8066:   // Anycubic / TronXY TFTs (480x320)
           #ifdef LCD_USE_DMA_FSMC
             writeEscSequence(ili9341_init);
           #else
@@ -657,18 +656,8 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
           u8g_WriteSequence(u8g, dev, 160, (uint8_t *)buffer);
       #endif
 
-      // bottom line and buttons
+      // Bottom buttons
       #if ENABLED(TOUCH_BUTTONS)
-
-        setWindow(u8g, dev, BUTTOND_X_LO - 4, BUTTON_Y_LO - 5, BUTTONC_X_HI + BUFSIZE + 4, BUTTON_Y_LO - 4);
-        #ifdef LCD_USE_DMA_FSMC
-          LCD_IO_WriteMultiple(TFT_DISABLED_COLOR, 600 / 2 * FSMC_UPSCALE);
-        #else
-          memset2(buffer, TFT_DISABLED_COLOR, 150);
-          for (uint8_t i = 8; i--;)
-            u8g_WriteSequence(u8g, dev, 150, (uint8_t *)buffer);
-        #endif
-
         setWindow(u8g, dev, BUTTOND_X_LO, BUTTON_Y_LO,  BUTTOND_X_HI, BUTTON_Y_HI);
         drawImage(buttonD, u8g, dev, 32, 20, TFT_BTCANCEL_COLOR);
 

commit 0a49ad1ccf1122f8fc9a90bf8c103aee10e1b9e4
Author: Victor <rhapsodyv@gmail.com>
Date:   Thu Jun 11 23:42:19 2020 -0300

    TFT 3x upscale followup (#18256)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index fdcf47bc50..63d4189910 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -546,12 +546,15 @@ static const uint16_t ili9341_init[] = {
   #define BUTTONC_X_LO (242 / 2) * (FSMC_UPSCALE)
   #define BUTTONC_X_HI (BUTTONC_X_LO + (FSMC_UPSCALE) * BUTTON_SIZE_X - 1)
 
-  #define BUTTON_Y_LO (184 / 2) * (FSMC_UPSCALE)
+  #define BUTTON_Y_LO (140 / 2) * (FSMC_UPSCALE) + 44 //184 2x, 254 3x
   #define BUTTON_Y_HI (BUTTON_Y_LO + (FSMC_UPSCALE) * BUTTON_SIZE_Y - 1)
 
   void drawImage(const uint8_t *data, u8g_t *u8g, u8g_dev_t *dev, uint16_t length, uint16_t height, uint16_t color) {
     uint16_t buffer[BUTTON_SIZE_X * sq(FSMC_UPSCALE)];
 
+    //NOTE: the buffer are sized for max 32 lenght! If you need draw bigger things with this function, we need increase the buffer
+    if (length > BUTTON_SIZE_X) return;
+
     for (uint16_t i = 0; i < height; i++) {
       uint16_t k = 0;
       for (uint16_t j = 0; j < length; j++) {
@@ -567,7 +570,7 @@ static const uint16_t ili9341_init[] = {
           for (uint16_t l = 0; l < length * (FSMC_UPSCALE); l++)
             buffer[l + (length * (FSMC_UPSCALE) * n)] = buffer[l];
 
-        LCD_IO_WriteSequence(buffer, COUNT(buffer));
+        LCD_IO_WriteSequence(buffer, length * sq(FSMC_UPSCALE));
       #else
         u8g_WriteSequence(u8g, dev, k << 1, (uint8_t*)buffer);
         u8g_WriteSequence(u8g, dev, k << 1, (uint8_t*)buffer);
@@ -657,9 +660,9 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
       // bottom line and buttons
       #if ENABLED(TOUCH_BUTTONS)
 
-        setWindow(u8g, dev, 10, 170, 309, 171);
+        setWindow(u8g, dev, BUTTOND_X_LO - 4, BUTTON_Y_LO - 5, BUTTONC_X_HI + BUFSIZE + 4, BUTTON_Y_LO - 4);
         #ifdef LCD_USE_DMA_FSMC
-          LCD_IO_WriteMultiple(TFT_DISABLED_COLOR, 600);
+          LCD_IO_WriteMultiple(TFT_DISABLED_COLOR, 600 / 2 * FSMC_UPSCALE);
         #else
           memset2(buffer, TFT_DISABLED_COLOR, 150);
           for (uint8_t i = 8; i--;)

commit 3eda8b5a8fad7bbb042352e4baaa6915e122dfab
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Tue Jun 9 23:53:22 2020 +0200

    Fix DOGM / TMF buttons Y position (#18245)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 5e08003e0b..fdcf47bc50 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -546,7 +546,7 @@ static const uint16_t ili9341_init[] = {
   #define BUTTONC_X_LO (242 / 2) * (FSMC_UPSCALE)
   #define BUTTONC_X_HI (BUTTONC_X_LO + (FSMC_UPSCALE) * BUTTON_SIZE_X - 1)
 
-  #define BUTTON_Y_LO (170 / 2) * (FSMC_UPSCALE)
+  #define BUTTON_Y_LO (184 / 2) * (FSMC_UPSCALE)
   #define BUTTON_Y_HI (BUTTON_Y_LO + (FSMC_UPSCALE) * BUTTON_SIZE_Y - 1)
 
   void drawImage(const uint8_t *data, u8g_t *u8g, u8g_dev_t *dev, uint16_t length, uint16_t height, uint16_t color) {

commit 265ab19ed24eaa93120df07b1a46ffa1cb48b141
Author: Victor <rhapsodyv@gmail.com>
Date:   Mon Jun 8 22:02:01 2020 -0300

    TFT 2x-3x scale, Anycubic, TronXY TFT support (#18224)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 206f61c675..5e08003e0b 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -73,14 +73,18 @@
   extern void LCD_IO_WriteMultiple(uint16_t color, uint32_t count);
 #endif
 
+#ifndef FSMC_UPSCALE
+  #define FSMC_UPSCALE 2
+#endif
+
 #define WIDTH LCD_PIXEL_WIDTH
 #define HEIGHT LCD_PIXEL_HEIGHT
 #define PAGE_HEIGHT 8
 
 #define X_LO LCD_PIXEL_OFFSET_X
 #define Y_LO LCD_PIXEL_OFFSET_Y
-#define X_HI (X_LO + 2 * WIDTH  - 1)
-#define Y_HI (Y_LO + 2 * HEIGHT - 1)
+#define X_HI (X_LO + (FSMC_UPSCALE) * WIDTH  - 1)
+#define Y_HI (Y_LO + (FSMC_UPSCALE) * HEIGHT - 1)
 
 // see https://ee-programming-notepad.blogspot.com/2016/10/16-bit-color-generator-picker.html
 
@@ -526,8 +530,27 @@ static const uint16_t ili9341_init[] = {
     B01111111,B11111111,B11111111,B11111110,
   };
 
+  #define BUTTON_SIZE_X 32
+  #define BUTTON_SIZE_Y 20
+
+  // 14, 90, 166, 242, 185 are the original values upscaled 2x.
+  #define BUTTOND_X_LO (14 / 2) * (FSMC_UPSCALE)
+  #define BUTTOND_X_HI (BUTTOND_X_LO + (FSMC_UPSCALE) * BUTTON_SIZE_X - 1)
+
+  #define BUTTONA_X_LO (90 / 2) * (FSMC_UPSCALE)
+  #define BUTTONA_X_HI (BUTTONA_X_LO + (FSMC_UPSCALE) * BUTTON_SIZE_X - 1)
+
+  #define BUTTONB_X_LO (166 / 2) * (FSMC_UPSCALE)
+  #define BUTTONB_X_HI (BUTTONB_X_LO + (FSMC_UPSCALE) * BUTTON_SIZE_X - 1)
+
+  #define BUTTONC_X_LO (242 / 2) * (FSMC_UPSCALE)
+  #define BUTTONC_X_HI (BUTTONC_X_LO + (FSMC_UPSCALE) * BUTTON_SIZE_X - 1)
+
+  #define BUTTON_Y_LO (170 / 2) * (FSMC_UPSCALE)
+  #define BUTTON_Y_HI (BUTTON_Y_LO + (FSMC_UPSCALE) * BUTTON_SIZE_Y - 1)
+
   void drawImage(const uint8_t *data, u8g_t *u8g, u8g_dev_t *dev, uint16_t length, uint16_t height, uint16_t color) {
-    uint16_t buffer[128];
+    uint16_t buffer[BUTTON_SIZE_X * sq(FSMC_UPSCALE)];
 
     for (uint16_t i = 0; i < height; i++) {
       uint16_t k = 0;
@@ -537,20 +560,17 @@ static const uint16_t ili9341_init[] = {
           v = color;
         else
           v = TFT_MARLINBG_COLOR;
-        buffer[k++] = v; buffer[k++] = v;
+        LOOP_L_N(n, FSMC_UPSCALE) buffer[k++] = v;
       }
       #ifdef LCD_USE_DMA_FSMC
-        if (k <= 80) { // generally is... for our buttons
-          memcpy(&buffer[k], &buffer[0], k * sizeof(uint16_t));
-          LCD_IO_WriteSequence(buffer, k * sizeof(uint16_t));
-        }
-        else {
-          LCD_IO_WriteSequence(buffer, k);
-          LCD_IO_WriteSequence(buffer, k);
-        }
+        LOOP_S_L_N(n, 1, FSMC_UPSCALE)
+          for (uint16_t l = 0; l < length * (FSMC_UPSCALE); l++)
+            buffer[l + (length * (FSMC_UPSCALE) * n)] = buffer[l];
+
+        LCD_IO_WriteSequence(buffer, COUNT(buffer));
       #else
-        u8g_WriteSequence(u8g, dev, k << 1, (uint8_t *)buffer);
-        u8g_WriteSequence(u8g, dev, k << 1, (uint8_t *)buffer);
+        u8g_WriteSequence(u8g, dev, k << 1, (uint8_t*)buffer);
+        u8g_WriteSequence(u8g, dev, k << 1, (uint8_t*)buffer);
       #endif
     }
   }
@@ -569,7 +589,7 @@ static uint8_t page;
 uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg) {
   u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   #ifdef LCD_USE_DMA_FSMC
-    static uint16_t bufferA[512], bufferB[512];
+    static uint16_t bufferA[WIDTH * sq(FSMC_UPSCALE)], bufferB[WIDTH * sq(FSMC_UPSCALE)];
     uint16_t* buffer = &bufferA[0];
     bool allow_async = true;
   #else
@@ -597,6 +617,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
           setWindow = setWindow_ili9328;
           break;
         case 0x9341:   // ILI9341
+        case 0x8066:   // ILI9341 Anycubic / TronXY TFTs      
           #ifdef LCD_USE_DMA_FSMC
             writeEscSequence(ili9341_init);
           #else
@@ -645,16 +666,16 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
             u8g_WriteSequence(u8g, dev, 150, (uint8_t *)buffer);
         #endif
 
-        setWindow(u8g, dev, 14, 185,  77, 224);
+        setWindow(u8g, dev, BUTTOND_X_LO, BUTTON_Y_LO,  BUTTOND_X_HI, BUTTON_Y_HI);
         drawImage(buttonD, u8g, dev, 32, 20, TFT_BTCANCEL_COLOR);
 
-        setWindow(u8g, dev, 90, 185, 153, 224);
+        setWindow(u8g, dev, BUTTONA_X_LO, BUTTON_Y_LO,  BUTTONA_X_HI, BUTTON_Y_HI);
         drawImage(buttonA, u8g, dev, 32, 20, TFT_BTARROWS_COLOR);
 
-        setWindow(u8g, dev, 166, 185, 229, 224);
+        setWindow(u8g, dev, BUTTONB_X_LO, BUTTON_Y_LO,  BUTTONB_X_HI, BUTTON_Y_HI);
         drawImage(buttonB, u8g, dev, 32, 20, TFT_BTARROWS_COLOR);
 
-        setWindow(u8g, dev, 242, 185, 305, 224);
+        setWindow(u8g, dev, BUTTONC_X_LO, BUTTON_Y_LO,  BUTTONC_X_HI, BUTTON_Y_HI);
         drawImage(buttonC, u8g, dev, 32, 20, TFT_BTOKMENU_COLOR);
       #endif // TOUCH_BUTTONS
 
@@ -678,19 +699,22 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
         for (uint16_t i = 0; i < (uint32_t)pb->width; i++) {
           const uint8_t b = *(((uint8_t *)pb->buf) + i);
           const uint16_t c = TEST(b, y) ? TFT_MARLINUI_COLOR : TFT_MARLINBG_COLOR;
-          buffer[k++] = c; buffer[k++] = c;
+          LOOP_L_N(n, FSMC_UPSCALE) buffer[k++] = c;
         }
         #ifdef LCD_USE_DMA_FSMC
-          memcpy(&buffer[256], &buffer[0], 512);
+          LOOP_S_L_N(n, 1, FSMC_UPSCALE)
+            for (uint16_t l = 0; l < WIDTH * (FSMC_UPSCALE); l++)
+              buffer[l + WIDTH * (FSMC_UPSCALE) * n] = buffer[l];
+
           if (allow_async) {
             if (y > 0 || page > 1) LCD_IO_WaitSequence_Async();
             if (y == 7 && page == 8)
-              LCD_IO_WriteSequence(buffer, 512); // last line of last page
+              LCD_IO_WriteSequence(buffer, COUNT(bufferA)); // last line of last page
             else
-              LCD_IO_WriteSequence_Async(buffer, 512);
+              LCD_IO_WriteSequence_Async(buffer, COUNT(bufferA));
           }
           else
-            LCD_IO_WriteSequence(buffer, 512);
+            LCD_IO_WriteSequence(buffer, COUNT(bufferA));
         #else
           uint8_t* bufptr = (uint8_t*) buffer;
           for (uint8_t i = 2; i--;) {

commit 118bd2f8b2a1f81884cb55a8fc00b708a51aa15b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 23:18:16 2020 -0500

    Apply loop shorthand macros (#17159)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index fcfebcbe12..206f61c675 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -670,7 +670,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
     case U8G_DEV_MSG_PAGE_NEXT:
       if (++page > (HEIGHT / PAGE_HEIGHT)) return 1;
 
-      for (uint8_t y = 0; y < PAGE_HEIGHT; y++) {
+      LOOP_L_N(y, PAGE_HEIGHT) {
         uint32_t k = 0;
         #ifdef LCD_USE_DMA_FSMC
           buffer = (y & 1) ? bufferB : bufferA;

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 39e0c43cdd..fcfebcbe12 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit c6f7ea9f22e3ed578ac7383259fb600cd5810c58
Author: Alexander Gavrilenko <jmz52@users.noreply.github.com>
Date:   Thu Jan 2 05:55:37 2020 +0300

    MKS Robin ILI9328 TFT support (#16401)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 8c1dfa3ffe..39e0c43cdd 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -65,6 +65,8 @@
 #include <string.h>
 
 #if ENABLED(LCD_USE_DMA_FSMC)
+  extern void LCD_IO_WriteReg(uint16_t Reg);
+  extern void LCD_IO_WriteData(uint16_t RegValue);
   extern void LCD_IO_WriteSequence(uint16_t *data, uint16_t length);
   extern void LCD_IO_WriteSequence_Async(uint16_t *data, uint16_t length);
   extern void LCD_IO_WaitSequence_Async();
@@ -80,10 +82,6 @@
 #define X_HI (X_LO + 2 * WIDTH  - 1)
 #define Y_HI (Y_LO + 2 * HEIGHT - 1)
 
-#define LCD_COLUMN      0x2A   /* Colomn address register */
-#define LCD_ROW         0x2B   /* Row address register */
-#define LCD_WRITE_RAM   0x2C
-
 // see https://ee-programming-notepad.blogspot.com/2016/10/16-bit-color-generator-picker.html
 
 #define COLOR_BLACK       0x0000  // #000000
@@ -133,113 +131,254 @@
 
 static uint32_t lcd_id = 0;
 
-#define U8G_ESC_DATA(x) (uint8_t)(x >> 8), (uint8_t)(x & 0xFF)
+#define ST7789V_CASET       0x2A   /* Column address register */
+#define ST7789V_RASET       0x2B   /* Row address register */
+#define ST7789V_WRITE_RAM   0x2C   /* Write data to GRAM */
 
-static const uint8_t page_first_sequence[] = {
-  U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(X_LO), U8G_ESC_DATA(X_HI),
-  U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(Y_LO), U8G_ESC_DATA(Y_HI),
-  U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
-  U8G_ESC_END
-};
 
-static const uint8_t clear_screen_sequence[] = {
-  U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), 0x00, 0x00, U8G_ESC_DATA(LCD_FULL_PIXEL_WIDTH),
-  U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), 0x00, 0x00, U8G_ESC_DATA(LCD_FULL_PIXEL_HEIGHT),
-  U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
-  U8G_ESC_END
-};
+/* Mind the mess: with landscape screen orientation 'Horizontal' is Y and 'Vertical' is X */
+#define ILI9328_HASET       0x20   /* Horizontal GRAM address register (0-255) */
+#define ILI9328_VASET       0x21   /* Vertical GRAM address register (0-511)*/
+#define ILI9328_WRITE_RAM   0x22   /* Write data to GRAM */
 
-#if ENABLED(TOUCH_BUTTONS)
+#define ILI9328_HASTART     0x50   /* Horizontal address start position (0-255) */
+#define ILI9328_HAEND       0x51   /* Horizontal address end position (0-255) */
+#define ILI9328_VASTART     0x52   /* Vertical address start position (0-511) */
+#define ILI9328_VAEND       0x53   /* Vertical address end position (0-511) */
 
-  static const uint8_t separation_line_sequence_left[] = {
-    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(10), U8G_ESC_DATA(159),
-    U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(170), U8G_ESC_DATA(173),
-    U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
-    U8G_ESC_END
-  };
 
-  static const uint8_t separation_line_sequence_right[] = {
-    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(160), U8G_ESC_DATA(309),
-    U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(170), U8G_ESC_DATA(173),
-    U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
-    U8G_ESC_END
-  };
+static void setWindow_ili9328(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) {
+  #ifdef LCD_USE_DMA_FSMC
+    LCD_IO_WriteReg(ILI9328_HASTART);
+    LCD_IO_WriteData(Ymin);
+    LCD_IO_WriteReg(ILI9328_HAEND);
+    LCD_IO_WriteData(Ymax);
+    LCD_IO_WriteReg(ILI9328_VASTART);
+    LCD_IO_WriteData(Xmin);
+    LCD_IO_WriteReg(ILI9328_VAEND);
+    LCD_IO_WriteData(Xmax);
+
+    LCD_IO_WriteReg(ILI9328_HASET);
+    LCD_IO_WriteData(Ymin);
+    LCD_IO_WriteReg(ILI9328_VASET);
+    LCD_IO_WriteData(Xmin);
+
+    LCD_IO_WriteReg(ILI9328_WRITE_RAM);
+  #else
+    u8g_SetAddress(u8g, dev, 0);
+
+    u8g_WriteByte(u8g, dev, ILI9328_HASTART);
+    u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&Ymin);
+    u8g_WriteByte(u8g, dev, ILI9328_HAEND);
+    u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&Ymax);
+    u8g_WriteByte(u8g, dev, ILI9328_VASTART);
+    u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&Xmin);
+    u8g_WriteByte(u8g, dev, ILI9328_VAEND);
+    u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&Xmax);
+
+    u8g_WriteByte(u8g, dev, ILI9328_HASET);
+    u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&Ymin);
+    u8g_WriteByte(u8g, dev, ILI9328_VASET);
+    u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&Xmin);
+
+    u8g_WriteByte(u8g, dev, ILI9328_WRITE_RAM);
+    u8g_SetAddress(u8g, dev, 1);
+  #endif
+}
 
-  static const uint8_t buttonD_sequence[] = {
-    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(14), U8G_ESC_DATA(77),
-    U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(185), U8G_ESC_DATA(224),
-    U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
-    U8G_ESC_END
-  };
+static void setWindow_st7789v(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) {
+  #ifdef LCD_USE_DMA_FSMC
+    LCD_IO_WriteReg(ST7789V_CASET);
+    LCD_IO_WriteData((Xmin >> 8) & 0xFF);
+    LCD_IO_WriteData(Xmin & 0xFF);
+    LCD_IO_WriteData((Xmax >> 8) & 0xFF);
+    LCD_IO_WriteData(Xmax & 0xFF);
+
+    LCD_IO_WriteReg(ST7789V_RASET);
+    LCD_IO_WriteData((Ymin >> 8) & 0xFF);
+    LCD_IO_WriteData(Ymin & 0xFF);
+    LCD_IO_WriteData((Ymax >> 8) & 0xFF);
+    LCD_IO_WriteData(Ymax & 0xFF);
+
+    LCD_IO_WriteReg(ST7789V_WRITE_RAM);
+  #else
+    u8g_SetAddress(u8g, dev, 0); u8g_WriteByte(u8g, dev, ST7789V_CASET); u8g_SetAddress(u8g, dev, 1);
+    u8g_WriteByte(u8g, dev, (Xmin >> 8) & 0xFF);
+    u8g_WriteByte(u8g, dev, Xmin & 0xFF);
+    u8g_WriteByte(u8g, dev, (Xmax >> 8) & 0xFF);
+    u8g_WriteByte(u8g, dev, Xmax & 0xFF);
+
+    u8g_SetAddress(u8g, dev, 0); u8g_WriteByte(u8g, dev, ST7789V_RASET); u8g_SetAddress(u8g, dev, 1);
+    u8g_WriteByte(u8g, dev, (Ymin >> 8) & 0xFF);
+    u8g_WriteByte(u8g, dev, Ymin & 0xFF);
+    u8g_WriteByte(u8g, dev, (Ymax >> 8) & 0xFF);
+    u8g_WriteByte(u8g, dev, Ymax & 0xFF);
+
+    u8g_SetAddress(u8g, dev, 0); u8g_WriteByte(u8g, dev, ST7789V_WRITE_RAM); u8g_SetAddress(u8g, dev, 1);
+  #endif
+}
 
-  static const uint8_t buttonA_sequence[] = {
-    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(90), U8G_ESC_DATA(153),
-    U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(185), U8G_ESC_DATA(224),
-    U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
-    U8G_ESC_END
-  };
+static void setWindow_none(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) {}
+void (*setWindow)(u8g_t *u8g, u8g_dev_t *dev, uint16_t Xmin, uint16_t Ymin, uint16_t Xmax, uint16_t Ymax) = setWindow_none;
 
-  static const uint8_t buttonB_sequence[] = {
-    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(166), U8G_ESC_DATA(229),
-    U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(185), U8G_ESC_DATA(224),
-    U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
-    U8G_ESC_END
-  };
 
-  static const uint8_t buttonC_sequence[] = {
-    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(242), U8G_ESC_DATA(305),
-    U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(185), U8G_ESC_DATA(224),
-    U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
-    U8G_ESC_END
-  };
+#define ESC_REG(x)      0xFFFF, 0x00FF & (uint16_t)x
+#define ESC_DELAY(x)    0xFFFF, 0x8000 | (x & 0x7FFF)
+#define ESC_END         0xFFFF, 0x7FFF
+#define ESC_FFFF        0xFFFF, 0xFFFF
 
+#ifdef LCD_USE_DMA_FSMC
+  void writeEscSequence(const uint16_t *sequence) {
+    uint16_t data;
+    for (;;) {
+      data = *sequence++;
+      if (data != 0xFFFF) {
+        LCD_IO_WriteData(data);
+        continue;
+      }
+      data = *sequence++;
+      if (data == 0x7FFF) return;
+      if (data == 0xFFFF) {
+        LCD_IO_WriteData(data);
+      } else if (data & 0x8000) {
+        delay(data & 0x7FFF);
+      } else if ((data & 0xFF00) == 0) {
+        LCD_IO_WriteReg(data);
+      }
+    }
+  }
+#else
+  void writeEscSequence8(u8g_t *u8g, u8g_dev_t *dev, const uint16_t *sequence) {
+    uint16_t data;
+    u8g_SetAddress(u8g, dev, 1);
+    for (;;) {
+      data = *sequence++;
+      if (data != 0xFFFF) {
+        u8g_WriteByte(u8g, dev, data & 0xFF);
+        continue;
+      }
+      data = *sequence++;
+      if (data == 0x7FFF) return;
+      if (data == 0xFFFF) {
+        u8g_WriteByte(u8g, dev, data & 0xFF);
+      } else if (data & 0x8000) {
+        delay(data & 0x7FFF);
+      } else if ((data & 0xFF00) == 0) {
+        u8g_SetAddress(u8g, dev, 0);
+        u8g_WriteByte(u8g, dev, data & 0xFF);
+        u8g_SetAddress(u8g, dev, 1);
+      }
+    }
+  }
+
+  void writeEscSequence16(u8g_t *u8g, u8g_dev_t *dev, const uint16_t *sequence) {
+    uint16_t data;
+    u8g_SetAddress(u8g, dev, 0);
+    for (;;) {
+      data = *sequence++;
+      if (data != 0xFFFF) {
+        u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&data);
+        continue;
+      }
+      data = *sequence++;
+      if (data == 0x7FFF) return;
+      if (data == 0xFFFF) {
+        u8g_WriteSequence(u8g, dev, 2, (uint8_t *)&data);
+      } else if (data & 0x8000) {
+        delay(data & 0x7FFF);
+      } else if ((data & 0xFF00) == 0) {
+        u8g_WriteByte(u8g, dev, data & 0xFF);
+      }
+    }
+    u8g_SetAddress(u8g, dev, 1);
+  }
 #endif
 
-static const uint8_t st7789v_init_sequence[] = { // 0x8552 - ST7789V
-  U8G_ESC_ADR(0),
-  0x10,
-  U8G_ESC_DLY(10),
-  0x01,
-  U8G_ESC_DLY(100), U8G_ESC_DLY(100),
-  0x11,
-  U8G_ESC_DLY(120),
-  0x36, U8G_ESC_ADR(1), 0xA0,
-  U8G_ESC_ADR(0), 0x3A, U8G_ESC_ADR(1), 0x05,
-  U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), 0x00, 0x00, 0x01, 0x3F,
-  U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), 0x00, 0x00, 0x00, 0xEF,
-  U8G_ESC_ADR(0), 0xB2, U8G_ESC_ADR(1), 0x0C, 0x0C, 0x00, 0x33, 0x33,
-  U8G_ESC_ADR(0), 0xB7, U8G_ESC_ADR(1), 0x35,
-  U8G_ESC_ADR(0), 0xBB, U8G_ESC_ADR(1), 0x1F,
-  U8G_ESC_ADR(0), 0xC0, U8G_ESC_ADR(1), 0x2C,
-  U8G_ESC_ADR(0), 0xC2, U8G_ESC_ADR(1), 0x01, 0xC3,
-  U8G_ESC_ADR(0), 0xC4, U8G_ESC_ADR(1), 0x20,
-  U8G_ESC_ADR(0), 0xC6, U8G_ESC_ADR(1), 0x0F,
-  U8G_ESC_ADR(0), 0xD0, U8G_ESC_ADR(1), 0xA4, 0xA1,
-  U8G_ESC_ADR(0), 0xE0, U8G_ESC_ADR(1), 0xD0, 0x08, 0x11, 0x08, 0x0C, 0x15, 0x39, 0x33, 0x50, 0x36, 0x13, 0x14, 0x29, 0x2D,
-  U8G_ESC_ADR(0), 0xE1, U8G_ESC_ADR(1), 0xD0, 0x08, 0x10, 0x08, 0x06, 0x06, 0x39, 0x44, 0x51, 0x0B, 0x16, 0x14, 0x2F, 0x31,
-  U8G_ESC_ADR(0), 0x29, 0x11, 0x35, U8G_ESC_ADR(1), 0x00,
-  U8G_ESC_END
+static const uint16_t st7789v_init[] = {
+  ESC_REG(0x0010), ESC_DELAY(10),
+  ESC_REG(0x0001), ESC_DELAY(200),
+  ESC_REG(0x0011), ESC_DELAY(120),
+  ESC_REG(0x0036), 0x00A0,
+  ESC_REG(0x003A), 0x0055,
+  ESC_REG(0x002A), 0x0000, 0x0000, 0x0001, 0x003F,
+  ESC_REG(0x002B), 0x0000, 0x0000, 0x0000, 0x00EF,
+  ESC_REG(0x00B2), 0x000C, 0x000C, 0x0000, 0x0033, 0x0033,
+  ESC_REG(0x00B7), 0x0035,
+  ESC_REG(0x00BB), 0x001F,
+  ESC_REG(0x00C0), 0x002C,
+  ESC_REG(0x00C2), 0x0001, 0x00C3,
+  ESC_REG(0x00C4), 0x0020,
+  ESC_REG(0x00C6), 0x000F,
+  ESC_REG(0x00D0), 0x00A4, 0x00A1,
+  ESC_REG(0x0029),
+  ESC_REG(0x0011),
+  ESC_END
 };
 
-static const uint8_t ili9341_init_sequence[] = { // 0x9341 - ILI9341
-  U8G_ESC_ADR(0),
-  0x10,
-  U8G_ESC_DLY(10),
-  0x01,
-  U8G_ESC_DLY(100), U8G_ESC_DLY(100),
-  0x36, U8G_ESC_ADR(1), 0xE8,
-  U8G_ESC_ADR(0), 0x3A, U8G_ESC_ADR(1), 0x55,
-  U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), 0x00, 0x00, 0x01, 0x3F,
-  U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), 0x00, 0x00, 0x00, 0xEF,
-  U8G_ESC_ADR(0), 0xC5, U8G_ESC_ADR(1), 0x3E, 0x28,
-  U8G_ESC_ADR(0), 0xC7, U8G_ESC_ADR(1), 0x86,
-  U8G_ESC_ADR(0), 0xB1, U8G_ESC_ADR(1), 0x00, 0x18,
-  U8G_ESC_ADR(0), 0xC0, U8G_ESC_ADR(1), 0x23,
-  U8G_ESC_ADR(0), 0xC1, U8G_ESC_ADR(1), 0x10,
-  U8G_ESC_ADR(0), 0x29,
-  U8G_ESC_ADR(0), 0x11,
-  U8G_ESC_DLY(100),
-  U8G_ESC_END
+static const uint16_t ili9328_init[] = {
+  ESC_REG(0x0001), 0x0100,
+  ESC_REG(0x0002), 0x0400,
+  ESC_REG(0x0003), 0x1038,
+  ESC_REG(0x0004), 0x0000,
+  ESC_REG(0x0008), 0x0202,
+  ESC_REG(0x0009), 0x0000,
+  ESC_REG(0x000A), 0x0000,
+  ESC_REG(0x000C), 0x0000,
+  ESC_REG(0x000D), 0x0000,
+  ESC_REG(0x000F), 0x0000,
+  ESC_REG(0x0010), 0x0000,
+  ESC_REG(0x0011), 0x0007,
+  ESC_REG(0x0012), 0x0000,
+  ESC_REG(0x0013), 0x0000,
+  ESC_REG(0x0007), 0x0001,
+  ESC_DELAY(200),
+  ESC_REG(0x0010), 0x1690,
+  ESC_REG(0x0011), 0x0227,
+  ESC_DELAY(50),
+  ESC_REG(0x0012), 0x008C,
+  ESC_DELAY(50),
+  ESC_REG(0x0013), 0x1500,
+  ESC_REG(0x0029), 0x0004,
+  ESC_REG(0x002B), 0x000D,
+  ESC_DELAY(50),
+  ESC_REG(0x0050), 0x0000,
+  ESC_REG(0x0051), 0x00EF,
+  ESC_REG(0x0052), 0x0000,
+  ESC_REG(0x0053), 0x013F,
+  ESC_REG(0x0020), 0x0000,
+  ESC_REG(0x0021), 0x0000,
+  ESC_REG(0x0060), 0x2700,
+  ESC_REG(0x0061), 0x0001,
+  ESC_REG(0x006A), 0x0000,
+  ESC_REG(0x0080), 0x0000,
+  ESC_REG(0x0081), 0x0000,
+  ESC_REG(0x0082), 0x0000,
+  ESC_REG(0x0083), 0x0000,
+  ESC_REG(0x0084), 0x0000,
+  ESC_REG(0x0085), 0x0000,
+  ESC_REG(0x0090), 0x0010,
+  ESC_REG(0x0092), 0x0600,
+  ESC_REG(0x0007), 0x0133,
+  ESC_REG(0x0022),
+  ESC_END
+};
+
+static const uint16_t ili9341_init[] = {
+  ESC_REG(0x0010), ESC_DELAY(10),
+  ESC_REG(0x0001), ESC_DELAY(200),
+  ESC_REG(0x0036), 0x00E8,
+  ESC_REG(0x003A), 0x0055,
+  ESC_REG(0x002A), 0x0000, 0x0000, 0x0001, 0x003F,
+  ESC_REG(0x002B), 0x0000, 0x0000, 0x0000, 0x00EF,
+  ESC_REG(0x00C5), 0x003E, 0x0028,
+  ESC_REG(0x00C7), 0x0086,
+  ESC_REG(0x00B1), 0x0000, 0x0018,
+  ESC_REG(0x00C0), 0x0023,
+  ESC_REG(0x00C1), 0x0010,
+  ESC_REG(0x0029),
+  ESC_REG(0x0011),
+  ESC_DELAY(100),
+  ESC_END
 };
 
 #if ENABLED(TOUCH_BUTTONS)
@@ -439,23 +578,55 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
   switch (msg) {
     case U8G_DEV_MSG_INIT:
       dev->com_fn(u8g, U8G_COM_MSG_INIT, U8G_SPI_CLK_CYCLE_NONE, &lcd_id);
-      if (lcd_id == 0x040404) return 0; // No connected display on FSMC
-      if (lcd_id == 0xFFFFFF) return 0; // No connected display on SPI
 
-      if ((lcd_id & 0xFFFF) == 0x8552)  // ST7789V
-        u8g_WriteEscSeqP(u8g, dev, st7789v_init_sequence);
-      if ((lcd_id & 0xFFFF) == 0x9341)  // ILI9341
-        u8g_WriteEscSeqP(u8g, dev, ili9341_init_sequence);
+      switch(lcd_id & 0xFFFF) {
+        case 0x8552:   // ST7789V
+          #ifdef LCD_USE_DMA_FSMC
+            writeEscSequence(st7789v_init);
+          #else
+            writeEscSequence8(u8g, dev, st7789v_init);
+          #endif
+          setWindow = setWindow_st7789v;
+          break;
+        case 0x9328:  // ILI9328
+          #ifdef LCD_USE_DMA_FSMC
+            writeEscSequence(ili9328_init);
+          #else
+            writeEscSequence16(u8g, dev, ili9328_init);
+          #endif
+          setWindow = setWindow_ili9328;
+          break;
+        case 0x9341:   // ILI9341
+          #ifdef LCD_USE_DMA_FSMC
+            writeEscSequence(ili9341_init);
+          #else
+            writeEscSequence8(u8g, dev, ili9341_init);
+          #endif
+          setWindow = setWindow_st7789v;
+          break;
+        case 0x0404:  // No connected display on FSMC
+          lcd_id = 0;
+          return 0;
+        case 0xFFFF:  // No connected display on SPI
+          lcd_id = 0;
+          return 0;
+        default:
+          if (lcd_id && 0xFF000000)
+            setWindow = setWindow_st7789v;
+          else
+            setWindow = setWindow_ili9328;
+          break;
+      }
 
       if (preinit) {
         preinit = false;
         return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
       }
 
-      // Clear Screen Sequence
-      u8g_WriteEscSeqP(u8g, dev, clear_screen_sequence);
+      // Clear Screen
+      setWindow(u8g, dev, 0, 0, LCD_FULL_PIXEL_WIDTH - 1, LCD_FULL_PIXEL_HEIGHT - 1);
       #ifdef LCD_USE_DMA_FSMC
-        LCD_IO_WriteMultiple(TFT_MARLINBG_COLOR, (320*240));
+        LCD_IO_WriteMultiple(TFT_MARLINBG_COLOR, LCD_FULL_PIXEL_WIDTH * LCD_FULL_PIXEL_HEIGHT);
       #else
         memset2(buffer, TFT_MARLINBG_COLOR, 160);
         for (uint16_t i = 0; i < 960; i++)
@@ -465,31 +636,25 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
       // bottom line and buttons
       #if ENABLED(TOUCH_BUTTONS)
 
+        setWindow(u8g, dev, 10, 170, 309, 171);
         #ifdef LCD_USE_DMA_FSMC
-          u8g_WriteEscSeqP(u8g, dev, separation_line_sequence_left);
-          LCD_IO_WriteMultiple(TFT_DISABLED_COLOR, 300);
-          u8g_WriteEscSeqP(u8g, dev, separation_line_sequence_right);
-          LCD_IO_WriteMultiple(TFT_DISABLED_COLOR, 300);
+          LCD_IO_WriteMultiple(TFT_DISABLED_COLOR, 600);
         #else
           memset2(buffer, TFT_DISABLED_COLOR, 150);
-          u8g_WriteEscSeqP(u8g, dev, separation_line_sequence_left);
-          for (uint8_t i = 4; i--;)
-            u8g_WriteSequence(u8g, dev, 150, (uint8_t *)buffer);
-          u8g_WriteEscSeqP(u8g, dev, separation_line_sequence_right);
-          for (uint8_t i = 4; i--;)
+          for (uint8_t i = 8; i--;)
             u8g_WriteSequence(u8g, dev, 150, (uint8_t *)buffer);
         #endif
 
-        u8g_WriteEscSeqP(u8g, dev, buttonD_sequence);
+        setWindow(u8g, dev, 14, 185,  77, 224);
         drawImage(buttonD, u8g, dev, 32, 20, TFT_BTCANCEL_COLOR);
 
-        u8g_WriteEscSeqP(u8g, dev, buttonA_sequence);
+        setWindow(u8g, dev, 90, 185, 153, 224);
         drawImage(buttonA, u8g, dev, 32, 20, TFT_BTARROWS_COLOR);
 
-        u8g_WriteEscSeqP(u8g, dev, buttonB_sequence);
+        setWindow(u8g, dev, 166, 185, 229, 224);
         drawImage(buttonB, u8g, dev, 32, 20, TFT_BTARROWS_COLOR);
 
-        u8g_WriteEscSeqP(u8g, dev, buttonC_sequence);
+        setWindow(u8g, dev, 242, 185, 305, 224);
         drawImage(buttonC, u8g, dev, 32, 20, TFT_BTOKMENU_COLOR);
       #endif // TOUCH_BUTTONS
 
@@ -499,7 +664,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
 
     case U8G_DEV_MSG_PAGE_FIRST:
       page = 0;
-      u8g_WriteEscSeqP(u8g, dev, page_first_sequence);
+      setWindow(u8g, dev, X_LO, Y_LO, X_HI, Y_HI);
       break;
 
     case U8G_DEV_MSG_PAGE_NEXT:

commit 787d5220365f3911c3f2a8cf2e9a89a156c24a8a
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Wed Sep 18 14:58:58 2019 +0700

    LCD Size Defines (#15297)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 76c13711aa..8c1dfa3ffe 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -60,6 +60,7 @@
 #if HAS_GRAPHICAL_LCD && PIN_EXISTS(FSMC_CS)
 
 #include "HAL_LCD_com_defines.h"
+#include "ultralcd_DOGM.h"
 
 #include <string.h>
 
@@ -70,12 +71,12 @@
   extern void LCD_IO_WriteMultiple(uint16_t color, uint32_t count);
 #endif
 
-#define WIDTH 128
-#define HEIGHT 64
+#define WIDTH LCD_PIXEL_WIDTH
+#define HEIGHT LCD_PIXEL_HEIGHT
 #define PAGE_HEIGHT 8
 
-#define X_LO 32
-#define Y_LO 32
+#define X_LO LCD_PIXEL_OFFSET_X
+#define Y_LO LCD_PIXEL_OFFSET_Y
 #define X_HI (X_LO + 2 * WIDTH  - 1)
 #define Y_HI (Y_LO + 2 * HEIGHT - 1)
 
@@ -142,8 +143,8 @@ static const uint8_t page_first_sequence[] = {
 };
 
 static const uint8_t clear_screen_sequence[] = {
-  U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), 0x00, 0x00, 0x01, 0x3F,
-  U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), 0x00, 0x00, 0x00, 0xEF,
+  U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), 0x00, 0x00, U8G_ESC_DATA(LCD_FULL_PIXEL_WIDTH),
+  U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), 0x00, 0x00, U8G_ESC_DATA(LCD_FULL_PIXEL_HEIGHT),
   U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
   U8G_ESC_END
 };

commit 2d2d9da9f2d142f9d5ac35ab39404903860b27ac
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Sep 3 20:57:00 2019 -0500

    Tweak u8g impl file includes

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 0081b07739..76c13711aa 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -59,7 +59,6 @@
 
 #if HAS_GRAPHICAL_LCD && PIN_EXISTS(FSMC_CS)
 
-#include <U8glib.h>
 #include "HAL_LCD_com_defines.h"
 
 #include <string.h>

commit 6b05d5d65d0b4f557021c0ed5c47ec4e5e97b43c
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Thu Sep 5 01:13:05 2019 +0700

    Allow TOUCH_BUTTONS to be swapped (#15100)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 8451a10e0e..0081b07739 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -267,51 +267,102 @@ static const uint8_t ili9341_init_sequence[] = { // 0x9341 - ILI9341
     B01111111,B11111111,B11111111,B11111110,
   };
 
-  static const uint8_t buttonA[] = {
-    B01111111,B11111111,B11111111,B11111110,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B01000000,B00000000,B00000001,
-    B10000000,B11100000,B00000000,B00000001,
-    B10000001,B11110000,B00000000,B00000001,
-    B10000011,B11111000,B00000000,B00000001,
-    B10000111,B11111100,B00111111,B11100001,
-    B10000000,B11100000,B00111111,B11100001,
-    B10000000,B11100000,B00000000,B00000001,
-    B10000000,B11100000,B00000000,B00000001,
-    B10000000,B11100000,B00000000,B00000001,
-    B10000000,B11100000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B01111111,B11111111,B11111111,B11111110,
-  };
+  #if ENABLED(REVERSE_MENU_DIRECTION)
+
+    static const uint8_t buttonA[] = {
+      B01111111,B11111111,B11111111,B11111110,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B11100000,B00000000,B00000001,
+      B10000000,B11100000,B00000000,B00000001,
+      B10000000,B11100000,B00000000,B00000001,
+      B10000000,B11100000,B00000000,B00000001,
+      B10000000,B11100000,B00111111,B11100001,
+      B10000111,B11111100,B00111111,B11100001,
+      B10000011,B11111000,B00000000,B00000001,
+      B10000001,B11110000,B00000000,B00000001,
+      B10000000,B11100000,B00000000,B00000001,
+      B10000000,B01000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B01111111,B11111111,B11111111,B11111110,
+    };
+    static const uint8_t buttonB[] = {
+      B01111111,B11111111,B11111111,B11111110,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B01100000,B00000010,B00000001,
+      B10000000,B01100000,B00000111,B00000001,
+      B10000000,B01100000,B00001111,B10000001,
+      B10000000,B01100000,B00011111,B11000001,
+      B10000111,B11111110,B00111111,B11100001,
+      B10000111,B11111110,B00000111,B00000001,
+      B10000000,B01100000,B00000111,B00000001,
+      B10000000,B01100000,B00000111,B00000001,
+      B10000000,B01100000,B00000111,B00000001,
+      B10000000,B01100000,B00000111,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B01111111,B11111111,B11111111,B11111110,
+    };
 
-  static const uint8_t buttonB[] = {
-    B01111111,B11111111,B11111111,B11111110,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B01100000,B00000111,B00000001,
-    B10000000,B01100000,B00000111,B00000001,
-    B10000000,B01100000,B00000111,B00000001,
-    B10000000,B01100000,B00000111,B00000001,
-    B10000111,B11111110,B00000111,B00000001,
-    B10000111,B11111110,B00111111,B11100001,
-    B10000000,B01100000,B00011111,B11000001,
-    B10000000,B01100000,B00001111,B10000001,
-    B10000000,B01100000,B00000111,B00000001,
-    B10000000,B01100000,B00000010,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B10000000,B00000000,B00000000,B00000001,
-    B01111111,B11111111,B11111111,B11111110,
-  };
+  #else
+
+    static const uint8_t buttonA[] = {
+      B01111111,B11111111,B11111111,B11111110,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B01000000,B00000000,B00000001,
+      B10000000,B11100000,B00000000,B00000001,
+      B10000001,B11110000,B00000000,B00000001,
+      B10000011,B11111000,B00000000,B00000001,
+      B10000111,B11111100,B00111111,B11100001,
+      B10000000,B11100000,B00111111,B11100001,
+      B10000000,B11100000,B00000000,B00000001,
+      B10000000,B11100000,B00000000,B00000001,
+      B10000000,B11100000,B00000000,B00000001,
+      B10000000,B11100000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B01111111,B11111111,B11111111,B11111110,
+    };
+
+    static const uint8_t buttonB[] = {
+      B01111111,B11111111,B11111111,B11111110,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B01100000,B00000111,B00000001,
+      B10000000,B01100000,B00000111,B00000001,
+      B10000000,B01100000,B00000111,B00000001,
+      B10000000,B01100000,B00000111,B00000001,
+      B10000111,B11111110,B00000111,B00000001,
+      B10000111,B11111110,B00111111,B11100001,
+      B10000000,B01100000,B00011111,B11000001,
+      B10000000,B01100000,B00001111,B10000001,
+      B10000000,B01100000,B00000111,B00000001,
+      B10000000,B01100000,B00000010,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B10000000,B00000000,B00000000,B00000001,
+      B01111111,B11111111,B11111111,B11111110,
+    };
+
+  #endif
 
   static const uint8_t buttonC[] = {
     B01111111,B11111111,B11111111,B11111110,
@@ -369,11 +420,8 @@ static const uint8_t ili9341_init_sequence[] = { // 0x9341 - ILI9341
 
 // Used to fill RGB565 (16bits) background
 inline void memset2(const void *ptr, uint16_t fill, size_t cnt) {
-  uint16_t* wptr = (uint16_t*) ptr;
-  for (size_t i = 0; i < cnt; i += 2) {
-     *wptr = fill;
-     wptr++;
-  }
+  uint16_t* wptr = (uint16_t*)ptr;
+  for (size_t i = 0; i < cnt; i += 2) { *wptr = fill; wptr++; }
 }
 
 static bool preinit = true;

commit 26fa08548c6aea72a22abd74a88a7d0f99599468
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Sat Aug 31 10:49:24 2019 +0700

    Add RGB565 Color Definitions for TFT (#15099)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 868f3f15be..8451a10e0e 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -86,15 +86,31 @@
 
 // see https://ee-programming-notepad.blogspot.com/2016/10/16-bit-color-generator-picker.html
 
-#define COLOR_BLACK 0x0000
-#define COLOR_WHITE 0xFFFF
-#define COLOR_BLUE  0x21DD
-#define COLOR_RED   0xF800
-#define COLOR_DARK  0x0003 // Some dark color
-#define COLOR_GREY  0x39E7
-#define COLOR_YELLOW 0xEFC0
-#define COLOR_ORANGE 0xFC00
-#define COLOR_GREEN  0x77E0
+#define COLOR_BLACK       0x0000  // #000000
+#define COLOR_WHITE       0xFFFF  // #FFFFFF
+#define COLOR_SILVER      0xC618  // #C0C0C0
+#define COLOR_GREY        0x7BEF  // #808080
+#define COLOR_DARKGREY    0x4208  // #404040
+#define COLOR_DARKGREY2   0x39E7  // #303030
+#define COLOR_DARK        0x0003  // Some dark color
+
+#define COLOR_RED         0xF800  // #FF0000
+#define COLOR_LIME        0x7E00  // #00FF00
+#define COLOR_BLUE        0x001F  // #0000FF
+#define COLOR_YELLOW      0xFFE0  // #FFFF00
+#define COLOR_MAGENTA     0xF81F  // #FF00FF
+#define COLOR_FUCHSIA     0xF81F  // #FF00FF
+#define COLOR_CYAN        0x07FF  // #00FFFF
+#define COLOR_AQUA        0x07FF  // #00FFFF
+
+#define COLOR_MAROON      0x7800  // #800000
+#define COLOR_GREEN       0x03E0  // #008000
+#define COLOR_NAVY        0x000F  // #000080
+#define COLOR_OLIVE       0x8400  // #808000
+#define COLOR_PURPLE      0x8010  // #800080
+#define COLOR_TEAL        0x0410  // #008080
+
+#define COLOR_ORANGE      0xFC00  // #FF7F00
 
 #ifndef TFT_MARLINUI_COLOR
   #define TFT_MARLINUI_COLOR COLOR_WHITE

commit 38983fdfa9773faf7006ef392110aca01ad006d5
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Thu Aug 29 13:19:07 2019 +0700

    Add 'Back' Button for Touch TFT 320x240 (#15060)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 74e767fa3f..868f3f15be 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -91,6 +91,10 @@
 #define COLOR_BLUE  0x21DD
 #define COLOR_RED   0xF800
 #define COLOR_DARK  0x0003 // Some dark color
+#define COLOR_GREY  0x39E7
+#define COLOR_YELLOW 0xEFC0
+#define COLOR_ORANGE 0xFC00
+#define COLOR_GREEN  0x77E0
 
 #ifndef TFT_MARLINUI_COLOR
   #define TFT_MARLINUI_COLOR COLOR_WHITE
@@ -101,11 +105,14 @@
 #ifndef TFT_DISABLED_COLOR
   #define TFT_DISABLED_COLOR COLOR_DARK
 #endif
-#ifndef TFT_BTSLEFT_COLOR
-  #define TFT_BTSLEFT_COLOR COLOR_BLUE
+#ifndef TFT_BTCANCEL_COLOR
+  #define TFT_BTCANCEL_COLOR COLOR_RED
 #endif
-#ifndef TFT_BTRIGHT_COLOR
-  #define TFT_BTRIGHT_COLOR COLOR_RED
+#ifndef TFT_BTARROWS_COLOR
+  #define TFT_BTARROWS_COLOR COLOR_BLUE
+#endif
+#ifndef TFT_BTOKMENU_COLOR
+  #define TFT_BTOKMENU_COLOR COLOR_RED
 #endif
 
 static uint32_t lcd_id = 0;
@@ -142,22 +149,29 @@ static const uint8_t clear_screen_sequence[] = {
     U8G_ESC_END
   };
 
-  static const uint8_t button0_sequence[] = {
-    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(20), U8G_ESC_DATA(99),
+  static const uint8_t buttonD_sequence[] = {
+    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(14), U8G_ESC_DATA(77),
+    U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(185), U8G_ESC_DATA(224),
+    U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
+    U8G_ESC_END
+  };
+
+  static const uint8_t buttonA_sequence[] = {
+    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(90), U8G_ESC_DATA(153),
     U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(185), U8G_ESC_DATA(224),
     U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
     U8G_ESC_END
   };
 
-  static const uint8_t button1_sequence[] = {
-    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(120), U8G_ESC_DATA(199),
+  static const uint8_t buttonB_sequence[] = {
+    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(166), U8G_ESC_DATA(229),
     U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(185), U8G_ESC_DATA(224),
     U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
     U8G_ESC_END
   };
 
-  static const uint8_t button2_sequence[] = {
-    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(220), U8G_ESC_DATA(299),
+  static const uint8_t buttonC_sequence[] = {
+    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(242), U8G_ESC_DATA(305),
     U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(185), U8G_ESC_DATA(224),
     U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
     U8G_ESC_END
@@ -214,77 +228,100 @@ static const uint8_t ili9341_init_sequence[] = { // 0x9341 - ILI9341
 
 #if ENABLED(TOUCH_BUTTONS)
 
-  static const uint8_t button0[] = {
-     B01111111,B11111111,B11111111,B11111111,B11111110,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00010000,B00000000,B00000001,
-     B10000000,B00000000,B00010000,B00000000,B00000001,
-     B10000000,B01000000,B00010000,B00000000,B00000001,
-     B10000000,B11100000,B00010000,B00000000,B00000001,
-     B10000001,B11110000,B00010000,B00000000,B00000001,
-     B10000011,B11111000,B00010000,B00000000,B00000001,
-     B10000111,B11111100,B00010000,B11111111,B11100001,
-     B10000000,B11100000,B00010000,B11111111,B11100001,
-     B10000000,B11100000,B00010000,B00000000,B00000001,
-     B10000000,B11100000,B00010000,B00000000,B00000001,
-     B10000000,B11100000,B00010000,B00000000,B00000001,
-     B10000000,B11100000,B00010000,B00000000,B00000001,
-     B10000000,B00000000,B00010000,B00000000,B00000001,
-     B10000000,B00000000,B00010000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B01111111,B11111111,B11111111,B11111111,B11111110,
+  static const uint8_t buttonD[] = {
+    B01111111,B11111111,B11111111,B11111110,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00011000,B00110000,B00000001,
+    B10000000,B00001100,B01100000,B00000001,
+    B10000000,B00000110,B11000000,B00000001,
+    B10000000,B00000011,B10000000,B00000001,
+    B10000000,B00000011,B10000000,B00000001,
+    B10000000,B00000110,B11000000,B00000001,
+    B10000000,B00001100,B01100000,B00000001,
+    B10000000,B00011000,B00110000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B01111111,B11111111,B11111111,B11111110,
+  };
+
+  static const uint8_t buttonA[] = {
+    B01111111,B11111111,B11111111,B11111110,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B01000000,B00000000,B00000001,
+    B10000000,B11100000,B00000000,B00000001,
+    B10000001,B11110000,B00000000,B00000001,
+    B10000011,B11111000,B00000000,B00000001,
+    B10000111,B11111100,B00111111,B11100001,
+    B10000000,B11100000,B00111111,B11100001,
+    B10000000,B11100000,B00000000,B00000001,
+    B10000000,B11100000,B00000000,B00000001,
+    B10000000,B11100000,B00000000,B00000001,
+    B10000000,B11100000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B01111111,B11111111,B11111111,B11111110,
   };
 
-  static const uint8_t button1[] = {
-     B01111111,B11111111,B11111111,B11111111,B11111110,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00010000,B00000000,B00000001,
-     B10000000,B00000000,B00010000,B00000110,B00000001,
-     B10000000,B11100000,B00010000,B00000110,B00000001,
-     B10000000,B11100000,B00010000,B00000110,B00000001,
-     B10000000,B11100000,B00010000,B00000110,B00000001,
-     B10000000,B11100000,B00010000,B00000110,B00000001,
-     B10000000,B11100000,B00010000,B11111111,B11110001,
-     B10000111,B11111100,B00010000,B11111111,B11110001,
-     B10000011,B11111000,B00010000,B00000110,B00000001,
-     B10000001,B11110000,B00010000,B00000110,B00000001,
-     B10000000,B11100000,B00010000,B00000110,B00000001,
-     B10000000,B01000000,B00010000,B00000110,B00000001,
-     B10000000,B00000000,B00010000,B00000110,B00000001,
-     B10000000,B00000000,B00010000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B01111111,B11111111,B11111111,B11111111,B11111110,
+  static const uint8_t buttonB[] = {
+    B01111111,B11111111,B11111111,B11111110,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B01100000,B00000111,B00000001,
+    B10000000,B01100000,B00000111,B00000001,
+    B10000000,B01100000,B00000111,B00000001,
+    B10000000,B01100000,B00000111,B00000001,
+    B10000111,B11111110,B00000111,B00000001,
+    B10000111,B11111110,B00111111,B11100001,
+    B10000000,B01100000,B00011111,B11000001,
+    B10000000,B01100000,B00001111,B10000001,
+    B10000000,B01100000,B00000111,B00000001,
+    B10000000,B01100000,B00000010,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B01111111,B11111111,B11111111,B11111110,
   };
 
-  static const uint8_t button2[] = {
-     B01111111,B11111111,B11111111,B11111111,B11111110,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000001,B11000000,B00000001,
-     B10000000,B00000000,B01000001,B11000000,B00000001,
-     B10000000,B00000000,B11000001,B11000000,B00000001,
-     B10000000,B00000001,B11111111,B11000000,B00000001,
-     B10000000,B00000011,B11111111,B11000000,B00000001,
-     B10000000,B00000001,B11111111,B11000000,B00000001,
-     B10000000,B00000000,B11000000,B00000000,B00000001,
-     B10000000,B00000000,B01000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B10000000,B00000000,B00000000,B00000000,B00000001,
-     B01111111,B11111111,B11111111,B11111111,B11111110,
+  static const uint8_t buttonC[] = {
+    B01111111,B11111111,B11111111,B11111110,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00011100,B00000001,
+    B10000000,B00000100,B00011100,B00000001,
+    B10000000,B00001100,B00011100,B00000001,
+    B10000000,B00011111,B11111100,B00000001,
+    B10000000,B00111111,B11111100,B00000001,
+    B10000000,B00011111,B11111100,B00000001,
+    B10000000,B00001100,B00000000,B00000001,
+    B10000000,B00000100,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B10000000,B00000000,B00000000,B00000001,
+    B01111111,B11111111,B11111111,B11111110,
   };
 
   void drawImage(const uint8_t *data, u8g_t *u8g, u8g_dev_t *dev, uint16_t length, uint16_t height, uint16_t color) {
-    uint16_t buffer[160];
+    uint16_t buffer[128];
 
     for (uint16_t i = 0; i < height; i++) {
       uint16_t k = 0;
@@ -333,7 +370,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
     uint16_t* buffer = &bufferA[0];
     bool allow_async = true;
   #else
-    uint16_t buffer[256]; // 16-bit RGB 565 pixel line buffer
+    uint16_t buffer[WIDTH*2]; // 16-bit RGB 565 pixel line buffer
   #endif
   switch (msg) {
     case U8G_DEV_MSG_INIT:
@@ -351,6 +388,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
         return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
       }
 
+      // Clear Screen Sequence
       u8g_WriteEscSeqP(u8g, dev, clear_screen_sequence);
       #ifdef LCD_USE_DMA_FSMC
         LCD_IO_WriteMultiple(TFT_MARLINBG_COLOR, (320*240));
@@ -378,15 +416,17 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
             u8g_WriteSequence(u8g, dev, 150, (uint8_t *)buffer);
         #endif
 
-        u8g_WriteEscSeqP(u8g, dev, button0_sequence);
-        drawImage(button0, u8g, dev, 40, 20, TFT_BTSLEFT_COLOR);
+        u8g_WriteEscSeqP(u8g, dev, buttonD_sequence);
+        drawImage(buttonD, u8g, dev, 32, 20, TFT_BTCANCEL_COLOR);
 
-        u8g_WriteEscSeqP(u8g, dev, button1_sequence);
-        drawImage(button1, u8g, dev, 40, 20, TFT_BTSLEFT_COLOR);
+        u8g_WriteEscSeqP(u8g, dev, buttonA_sequence);
+        drawImage(buttonA, u8g, dev, 32, 20, TFT_BTARROWS_COLOR);
 
-        u8g_WriteEscSeqP(u8g, dev, button2_sequence);
-        drawImage(button2, u8g, dev, 40, 20, TFT_BTRIGHT_COLOR);
+        u8g_WriteEscSeqP(u8g, dev, buttonB_sequence);
+        drawImage(buttonB, u8g, dev, 32, 20, TFT_BTARROWS_COLOR);
 
+        u8g_WriteEscSeqP(u8g, dev, buttonC_sequence);
+        drawImage(buttonC, u8g, dev, 32, 20, TFT_BTOKMENU_COLOR);
       #endif // TOUCH_BUTTONS
 
       return 0;
@@ -399,9 +439,9 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
       break;
 
     case U8G_DEV_MSG_PAGE_NEXT:
-      if (++page > 8) return 1;
+      if (++page > (HEIGHT / PAGE_HEIGHT)) return 1;
 
-      for (uint8_t y = 0; y < 8; y++) {
+      for (uint8_t y = 0; y < PAGE_HEIGHT; y++) {
         uint32_t k = 0;
         #ifdef LCD_USE_DMA_FSMC
           buffer = (y & 1) ? bufferB : bufferA;
@@ -423,11 +463,12 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
           else
             LCD_IO_WriteSequence(buffer, 512);
         #else
+          uint8_t* bufptr = (uint8_t*) buffer;
           for (uint8_t i = 2; i--;) {
-            u8g_WriteSequence(u8g, dev, 128, (uint8_t*)buffer);
-            u8g_WriteSequence(u8g, dev, 128, (uint8_t*)&(buffer[64]));
-            u8g_WriteSequence(u8g, dev, 128, (uint8_t*)&(buffer[128]));
-            u8g_WriteSequence(u8g, dev, 128, (uint8_t*)&(buffer[192]));
+            u8g_WriteSequence(u8g, dev, WIDTH, &bufptr[0]);
+            u8g_WriteSequence(u8g, dev, WIDTH, &bufptr[WIDTH]);
+            u8g_WriteSequence(u8g, dev, WIDTH, &bufptr[WIDTH*2]);
+            u8g_WriteSequence(u8g, dev, WIDTH, &bufptr[WIDTH*3]);
           }
         #endif
       }

commit 95963121b097875d0a6bf84a94f5cc3bd6da1ad4
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Aug 28 08:12:18 2019 -0500

    Patch a u8g include

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index dfd327e2a1..74e767fa3f 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -59,8 +59,9 @@
 
 #if HAS_GRAPHICAL_LCD && PIN_EXISTS(FSMC_CS)
 
-#include "U8glib.h"
+#include <U8glib.h>
 #include "HAL_LCD_com_defines.h"
+
 #include <string.h>
 
 #if ENABLED(LCD_USE_DMA_FSMC)

commit 05f4033a34a410d87e99f67ac9a120f5cdbcf60f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jul 23 23:55:49 2019 -0500

    Prevent a name conflict in u8g impl file

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 72ed6c34de..dfd327e2a1 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -74,10 +74,10 @@
 #define HEIGHT 64
 #define PAGE_HEIGHT 8
 
-#define X_MIN 32
-#define Y_MIN 32
-#define X_MAX (X_MIN + 2 * WIDTH  - 1)
-#define Y_MAX (Y_MIN + 2 * HEIGHT - 1)
+#define X_LO 32
+#define Y_LO 32
+#define X_HI (X_LO + 2 * WIDTH  - 1)
+#define Y_HI (Y_LO + 2 * HEIGHT - 1)
 
 #define LCD_COLUMN      0x2A   /* Colomn address register */
 #define LCD_ROW         0x2B   /* Row address register */
@@ -112,8 +112,8 @@ static uint32_t lcd_id = 0;
 #define U8G_ESC_DATA(x) (uint8_t)(x >> 8), (uint8_t)(x & 0xFF)
 
 static const uint8_t page_first_sequence[] = {
-  U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(X_MIN), U8G_ESC_DATA(X_MAX),
-  U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(Y_MIN), U8G_ESC_DATA(Y_MAX),
+  U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(X_LO), U8G_ESC_DATA(X_HI),
+  U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(Y_LO), U8G_ESC_DATA(Y_HI),
   U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
   U8G_ESC_END
 };

commit 977cfa4494359e322142973d68a84f02c79aba8f
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Sat Jul 20 08:54:02 2019 +0200

    Fix a few recent (STM32F1 DOGM, SPI) warnings (#14669)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 971bc4c2be..72ed6c34de 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -334,7 +334,6 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
   #else
     uint16_t buffer[256]; // 16-bit RGB 565 pixel line buffer
   #endif
-  uint16_t i;
   switch (msg) {
     case U8G_DEV_MSG_INIT:
       dev->com_fn(u8g, U8G_COM_MSG_INIT, U8G_SPI_CLK_CYCLE_NONE, &lcd_id);

commit 81d629bc471dcf926337836d1dd76910d9ff4bfe
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Mon Jul 15 01:16:26 2019 +0200

    Robin & Longer3D SPI TFT driver (#14595)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index ca3d7f5757..971bc4c2be 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -61,14 +61,21 @@
 
 #include "U8glib.h"
 #include "HAL_LCD_com_defines.h"
-#include "string.h"
+#include <string.h>
+
+#if ENABLED(LCD_USE_DMA_FSMC)
+  extern void LCD_IO_WriteSequence(uint16_t *data, uint16_t length);
+  extern void LCD_IO_WriteSequence_Async(uint16_t *data, uint16_t length);
+  extern void LCD_IO_WaitSequence_Async();
+  extern void LCD_IO_WriteMultiple(uint16_t color, uint32_t count);
+#endif
 
 #define WIDTH 128
 #define HEIGHT 64
 #define PAGE_HEIGHT 8
 
 #define X_MIN 32
-#define Y_MIN 56
+#define Y_MIN 32
 #define X_MAX (X_MIN + 2 * WIDTH  - 1)
 #define Y_MAX (Y_MIN + 2 * HEIGHT - 1)
 
@@ -76,6 +83,30 @@
 #define LCD_ROW         0x2B   /* Row address register */
 #define LCD_WRITE_RAM   0x2C
 
+// see https://ee-programming-notepad.blogspot.com/2016/10/16-bit-color-generator-picker.html
+
+#define COLOR_BLACK 0x0000
+#define COLOR_WHITE 0xFFFF
+#define COLOR_BLUE  0x21DD
+#define COLOR_RED   0xF800
+#define COLOR_DARK  0x0003 // Some dark color
+
+#ifndef TFT_MARLINUI_COLOR
+  #define TFT_MARLINUI_COLOR COLOR_WHITE
+#endif
+#ifndef TFT_MARLINBG_COLOR
+  #define TFT_MARLINBG_COLOR COLOR_BLACK
+#endif
+#ifndef TFT_DISABLED_COLOR
+  #define TFT_DISABLED_COLOR COLOR_DARK
+#endif
+#ifndef TFT_BTSLEFT_COLOR
+  #define TFT_BTSLEFT_COLOR COLOR_BLUE
+#endif
+#ifndef TFT_BTRIGHT_COLOR
+  #define TFT_BTRIGHT_COLOR COLOR_RED
+#endif
+
 static uint32_t lcd_id = 0;
 
 #define U8G_ESC_DATA(x) (uint8_t)(x >> 8), (uint8_t)(x & 0xFF)
@@ -94,6 +125,45 @@ static const uint8_t clear_screen_sequence[] = {
   U8G_ESC_END
 };
 
+#if ENABLED(TOUCH_BUTTONS)
+
+  static const uint8_t separation_line_sequence_left[] = {
+    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(10), U8G_ESC_DATA(159),
+    U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(170), U8G_ESC_DATA(173),
+    U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
+    U8G_ESC_END
+  };
+
+  static const uint8_t separation_line_sequence_right[] = {
+    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(160), U8G_ESC_DATA(309),
+    U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(170), U8G_ESC_DATA(173),
+    U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
+    U8G_ESC_END
+  };
+
+  static const uint8_t button0_sequence[] = {
+    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(20), U8G_ESC_DATA(99),
+    U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(185), U8G_ESC_DATA(224),
+    U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
+    U8G_ESC_END
+  };
+
+  static const uint8_t button1_sequence[] = {
+    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(120), U8G_ESC_DATA(199),
+    U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(185), U8G_ESC_DATA(224),
+    U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
+    U8G_ESC_END
+  };
+
+  static const uint8_t button2_sequence[] = {
+    U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(220), U8G_ESC_DATA(299),
+    U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(185), U8G_ESC_DATA(224),
+    U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
+    U8G_ESC_END
+  };
+
+#endif
+
 static const uint8_t st7789v_init_sequence[] = { // 0x8552 - ST7789V
   U8G_ESC_ADR(0),
   0x10,
@@ -120,53 +190,254 @@ static const uint8_t st7789v_init_sequence[] = { // 0x8552 - ST7789V
   U8G_ESC_END
 };
 
+static const uint8_t ili9341_init_sequence[] = { // 0x9341 - ILI9341
+  U8G_ESC_ADR(0),
+  0x10,
+  U8G_ESC_DLY(10),
+  0x01,
+  U8G_ESC_DLY(100), U8G_ESC_DLY(100),
+  0x36, U8G_ESC_ADR(1), 0xE8,
+  U8G_ESC_ADR(0), 0x3A, U8G_ESC_ADR(1), 0x55,
+  U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), 0x00, 0x00, 0x01, 0x3F,
+  U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), 0x00, 0x00, 0x00, 0xEF,
+  U8G_ESC_ADR(0), 0xC5, U8G_ESC_ADR(1), 0x3E, 0x28,
+  U8G_ESC_ADR(0), 0xC7, U8G_ESC_ADR(1), 0x86,
+  U8G_ESC_ADR(0), 0xB1, U8G_ESC_ADR(1), 0x00, 0x18,
+  U8G_ESC_ADR(0), 0xC0, U8G_ESC_ADR(1), 0x23,
+  U8G_ESC_ADR(0), 0xC1, U8G_ESC_ADR(1), 0x10,
+  U8G_ESC_ADR(0), 0x29,
+  U8G_ESC_ADR(0), 0x11,
+  U8G_ESC_DLY(100),
+  U8G_ESC_END
+};
+
+#if ENABLED(TOUCH_BUTTONS)
+
+  static const uint8_t button0[] = {
+     B01111111,B11111111,B11111111,B11111111,B11111110,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00010000,B00000000,B00000001,
+     B10000000,B00000000,B00010000,B00000000,B00000001,
+     B10000000,B01000000,B00010000,B00000000,B00000001,
+     B10000000,B11100000,B00010000,B00000000,B00000001,
+     B10000001,B11110000,B00010000,B00000000,B00000001,
+     B10000011,B11111000,B00010000,B00000000,B00000001,
+     B10000111,B11111100,B00010000,B11111111,B11100001,
+     B10000000,B11100000,B00010000,B11111111,B11100001,
+     B10000000,B11100000,B00010000,B00000000,B00000001,
+     B10000000,B11100000,B00010000,B00000000,B00000001,
+     B10000000,B11100000,B00010000,B00000000,B00000001,
+     B10000000,B11100000,B00010000,B00000000,B00000001,
+     B10000000,B00000000,B00010000,B00000000,B00000001,
+     B10000000,B00000000,B00010000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B01111111,B11111111,B11111111,B11111111,B11111110,
+  };
+
+  static const uint8_t button1[] = {
+     B01111111,B11111111,B11111111,B11111111,B11111110,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00010000,B00000000,B00000001,
+     B10000000,B00000000,B00010000,B00000110,B00000001,
+     B10000000,B11100000,B00010000,B00000110,B00000001,
+     B10000000,B11100000,B00010000,B00000110,B00000001,
+     B10000000,B11100000,B00010000,B00000110,B00000001,
+     B10000000,B11100000,B00010000,B00000110,B00000001,
+     B10000000,B11100000,B00010000,B11111111,B11110001,
+     B10000111,B11111100,B00010000,B11111111,B11110001,
+     B10000011,B11111000,B00010000,B00000110,B00000001,
+     B10000001,B11110000,B00010000,B00000110,B00000001,
+     B10000000,B11100000,B00010000,B00000110,B00000001,
+     B10000000,B01000000,B00010000,B00000110,B00000001,
+     B10000000,B00000000,B00010000,B00000110,B00000001,
+     B10000000,B00000000,B00010000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B01111111,B11111111,B11111111,B11111111,B11111110,
+  };
+
+  static const uint8_t button2[] = {
+     B01111111,B11111111,B11111111,B11111111,B11111110,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000001,B11000000,B00000001,
+     B10000000,B00000000,B01000001,B11000000,B00000001,
+     B10000000,B00000000,B11000001,B11000000,B00000001,
+     B10000000,B00000001,B11111111,B11000000,B00000001,
+     B10000000,B00000011,B11111111,B11000000,B00000001,
+     B10000000,B00000001,B11111111,B11000000,B00000001,
+     B10000000,B00000000,B11000000,B00000000,B00000001,
+     B10000000,B00000000,B01000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B10000000,B00000000,B00000000,B00000000,B00000001,
+     B01111111,B11111111,B11111111,B11111111,B11111110,
+  };
+
+  void drawImage(const uint8_t *data, u8g_t *u8g, u8g_dev_t *dev, uint16_t length, uint16_t height, uint16_t color) {
+    uint16_t buffer[160];
+
+    for (uint16_t i = 0; i < height; i++) {
+      uint16_t k = 0;
+      for (uint16_t j = 0; j < length; j++) {
+        uint16_t v = TFT_MARLINBG_COLOR;
+        if (*(data + (i * (length >> 3) + (j >> 3))) & (0x80 >> (j & 7)))
+          v = color;
+        else
+          v = TFT_MARLINBG_COLOR;
+        buffer[k++] = v; buffer[k++] = v;
+      }
+      #ifdef LCD_USE_DMA_FSMC
+        if (k <= 80) { // generally is... for our buttons
+          memcpy(&buffer[k], &buffer[0], k * sizeof(uint16_t));
+          LCD_IO_WriteSequence(buffer, k * sizeof(uint16_t));
+        }
+        else {
+          LCD_IO_WriteSequence(buffer, k);
+          LCD_IO_WriteSequence(buffer, k);
+        }
+      #else
+        u8g_WriteSequence(u8g, dev, k << 1, (uint8_t *)buffer);
+        u8g_WriteSequence(u8g, dev, k << 1, (uint8_t *)buffer);
+      #endif
+    }
+  }
+
+#endif // TOUCH_BUTTONS
+
+// Used to fill RGB565 (16bits) background
+inline void memset2(const void *ptr, uint16_t fill, size_t cnt) {
+  uint16_t* wptr = (uint16_t*) ptr;
+  for (size_t i = 0; i < cnt; i += 2) {
+     *wptr = fill;
+     wptr++;
+  }
+}
+
+static bool preinit = true;
+static uint8_t page;
+
 uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg) {
   u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
-  uint16_t buffer[256];
-  uint32_t i, j, k;
-
+  #ifdef LCD_USE_DMA_FSMC
+    static uint16_t bufferA[512], bufferB[512];
+    uint16_t* buffer = &bufferA[0];
+    bool allow_async = true;
+  #else
+    uint16_t buffer[256]; // 16-bit RGB 565 pixel line buffer
+  #endif
+  uint16_t i;
   switch (msg) {
     case U8G_DEV_MSG_INIT:
       dev->com_fn(u8g, U8G_COM_MSG_INIT, U8G_SPI_CLK_CYCLE_NONE, &lcd_id);
       if (lcd_id == 0x040404) return 0; // No connected display on FSMC
       if (lcd_id == 0xFFFFFF) return 0; // No connected display on SPI
 
-      memset(buffer, 0x00, sizeof(buffer));
-
       if ((lcd_id & 0xFFFF) == 0x8552)  // ST7789V
         u8g_WriteEscSeqP(u8g, dev, st7789v_init_sequence);
+      if ((lcd_id & 0xFFFF) == 0x9341)  // ILI9341
+        u8g_WriteEscSeqP(u8g, dev, ili9341_init_sequence);
+
+      if (preinit) {
+        preinit = false;
+        return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
+      }
 
       u8g_WriteEscSeqP(u8g, dev, clear_screen_sequence);
-      for (i = 0; i < 960; i++)
-        u8g_WriteSequence(u8g, dev, 160, (uint8_t *)buffer);
-      break;
+      #ifdef LCD_USE_DMA_FSMC
+        LCD_IO_WriteMultiple(TFT_MARLINBG_COLOR, (320*240));
+      #else
+        memset2(buffer, TFT_MARLINBG_COLOR, 160);
+        for (uint16_t i = 0; i < 960; i++)
+          u8g_WriteSequence(u8g, dev, 160, (uint8_t *)buffer);
+      #endif
 
-    case U8G_DEV_MSG_STOP:
-      break;
+      // bottom line and buttons
+      #if ENABLED(TOUCH_BUTTONS)
+
+        #ifdef LCD_USE_DMA_FSMC
+          u8g_WriteEscSeqP(u8g, dev, separation_line_sequence_left);
+          LCD_IO_WriteMultiple(TFT_DISABLED_COLOR, 300);
+          u8g_WriteEscSeqP(u8g, dev, separation_line_sequence_right);
+          LCD_IO_WriteMultiple(TFT_DISABLED_COLOR, 300);
+        #else
+          memset2(buffer, TFT_DISABLED_COLOR, 150);
+          u8g_WriteEscSeqP(u8g, dev, separation_line_sequence_left);
+          for (uint8_t i = 4; i--;)
+            u8g_WriteSequence(u8g, dev, 150, (uint8_t *)buffer);
+          u8g_WriteEscSeqP(u8g, dev, separation_line_sequence_right);
+          for (uint8_t i = 4; i--;)
+            u8g_WriteSequence(u8g, dev, 150, (uint8_t *)buffer);
+        #endif
+
+        u8g_WriteEscSeqP(u8g, dev, button0_sequence);
+        drawImage(button0, u8g, dev, 40, 20, TFT_BTSLEFT_COLOR);
+
+        u8g_WriteEscSeqP(u8g, dev, button1_sequence);
+        drawImage(button1, u8g, dev, 40, 20, TFT_BTSLEFT_COLOR);
+
+        u8g_WriteEscSeqP(u8g, dev, button2_sequence);
+        drawImage(button2, u8g, dev, 40, 20, TFT_BTRIGHT_COLOR);
+
+      #endif // TOUCH_BUTTONS
+
+      return 0;
+
+    case U8G_DEV_MSG_STOP: preinit = true; break;
 
     case U8G_DEV_MSG_PAGE_FIRST:
+      page = 0;
       u8g_WriteEscSeqP(u8g, dev, page_first_sequence);
       break;
 
     case U8G_DEV_MSG_PAGE_NEXT:
-      for (j = 0; j < 8; j++) {
-        k = 0;
-        for (i = 0; i < (uint32_t)pb->width; i++) {
+      if (++page > 8) return 1;
+
+      for (uint8_t y = 0; y < 8; y++) {
+        uint32_t k = 0;
+        #ifdef LCD_USE_DMA_FSMC
+          buffer = (y & 1) ? bufferB : bufferA;
+        #endif
+        for (uint16_t i = 0; i < (uint32_t)pb->width; i++) {
           const uint8_t b = *(((uint8_t *)pb->buf) + i);
-          const uint16_t c = TEST(b, j) ? 0x7FFF : 0x0000;
+          const uint16_t c = TEST(b, y) ? TFT_MARLINUI_COLOR : TFT_MARLINBG_COLOR;
           buffer[k++] = c; buffer[k++] = c;
         }
-        for (k = 0; k < 2; k++) {
-          u8g_WriteSequence(u8g, dev, 128, (uint8_t*)buffer);
-          u8g_WriteSequence(u8g, dev, 128, (uint8_t*)&(buffer[64]));
-          u8g_WriteSequence(u8g, dev, 128, (uint8_t*)&(buffer[128]));
-          u8g_WriteSequence(u8g, dev, 128, (uint8_t*)&(buffer[192]));
-        }
+        #ifdef LCD_USE_DMA_FSMC
+          memcpy(&buffer[256], &buffer[0], 512);
+          if (allow_async) {
+            if (y > 0 || page > 1) LCD_IO_WaitSequence_Async();
+            if (y == 7 && page == 8)
+              LCD_IO_WriteSequence(buffer, 512); // last line of last page
+            else
+              LCD_IO_WriteSequence_Async(buffer, 512);
+          }
+          else
+            LCD_IO_WriteSequence(buffer, 512);
+        #else
+          for (uint8_t i = 2; i--;) {
+            u8g_WriteSequence(u8g, dev, 128, (uint8_t*)buffer);
+            u8g_WriteSequence(u8g, dev, 128, (uint8_t*)&(buffer[64]));
+            u8g_WriteSequence(u8g, dev, 128, (uint8_t*)&(buffer[128]));
+            u8g_WriteSequence(u8g, dev, 128, (uint8_t*)&(buffer[192]));
+          }
+        #endif
       }
       break;
 
     case U8G_DEV_MSG_SLEEP_ON:
+      // Enter Sleep Mode (10h)
+      return 1;
     case U8G_DEV_MSG_SLEEP_OFF:
+      // Sleep Out (11h)
       return 1;
   }
   return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
@@ -174,4 +445,4 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
 
 U8G_PB_DEV(u8g_dev_tft_320x240_upscale_from_128x64, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_tft_320x240_upscale_from_128x64_fn, U8G_COM_HAL_FSMC_FN);
 
-#endif // HAS_GRAPHICAL_LCD
+#endif // HAS_GRAPHICAL_LCD && FSMC_CS

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 9e0850efb5..ca3d7f5757 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit 75aeb41ab75e691f4841614d16f92164cff8742b
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Wed Jun 19 02:34:16 2019 +0200

    SKRmini support for Fysetc Mini Panel (#14319)

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 8f295ab0fe..9e0850efb5 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -57,7 +57,7 @@
 
 #include "../../inc/MarlinConfig.h"
 
-#if HAS_GRAPHICAL_LCD
+#if HAS_GRAPHICAL_LCD && PIN_EXISTS(FSMC_CS)
 
 #include "U8glib.h"
 #include "HAL_LCD_com_defines.h"

commit 3a1b6fe8c19d22a15f9dddf012655fd5235bcd0f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 16:25:49 2019 -0600

    Coding standards

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index e142953e5c..8f295ab0fe 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -125,7 +125,7 @@ uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, u
   uint16_t buffer[256];
   uint32_t i, j, k;
 
-  switch(msg) {
+  switch (msg) {
     case U8G_DEV_MSG_INIT:
       dev->com_fn(u8g, U8G_COM_MSG_INIT, U8G_SPI_CLK_CYCLE_NONE, &lcd_id);
       if (lcd_id == 0x040404) return 0; // No connected display on FSMC

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
index 14a2bcc20d..e142953e5c 100644
--- a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016, 2017 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm

commit 813a4ea107f3b09b85a29e4446755fe276eba6f4
Author: jmz52 <jmz52@users.noreply.github.com>
Date:   Thu Jan 3 19:38:39 2019 +0300

    Add support for Mks Robin TFT display (#12706)
    
    * Add support for MKS Robin TFT display
    
    - Add support for MKS Robin TFT display and encoder for MKS Robin board.
    - Generic 128x64 UI with x2 upscale is used (for now).
    - Tested on MKS Robin TFT V2.0 with ST7789V controller.

diff --git a/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
new file mode 100644
index 0000000000..14a2bcc20d
--- /dev/null
+++ b/Marlin/src/lcd/dogm/u8g_dev_tft_320x240_upscale_from_128x64.cpp
@@ -0,0 +1,177 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016, 2017 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+/*
+
+  u8g_dev_tft_320x240_upscale_from_128x64.cpp
+
+  Universal 8bit Graphics Library
+
+  Copyright (c) 2011, olikraus@gmail.com
+  All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without modification,
+  are permitted provided that the following conditions are met:
+
+  * Redistributions of source code must retain the above copyright notice, this list
+    of conditions and the following disclaimer.
+
+  * Redistributions in binary form must reproduce the above copyright notice, this
+    list of conditions and the following disclaimer in the documentation and/or other
+    materials provided with the distribution.
+
+  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*/
+
+#include "../../inc/MarlinConfig.h"
+
+#if HAS_GRAPHICAL_LCD
+
+#include "U8glib.h"
+#include "HAL_LCD_com_defines.h"
+#include "string.h"
+
+#define WIDTH 128
+#define HEIGHT 64
+#define PAGE_HEIGHT 8
+
+#define X_MIN 32
+#define Y_MIN 56
+#define X_MAX (X_MIN + 2 * WIDTH  - 1)
+#define Y_MAX (Y_MIN + 2 * HEIGHT - 1)
+
+#define LCD_COLUMN      0x2A   /* Colomn address register */
+#define LCD_ROW         0x2B   /* Row address register */
+#define LCD_WRITE_RAM   0x2C
+
+static uint32_t lcd_id = 0;
+
+#define U8G_ESC_DATA(x) (uint8_t)(x >> 8), (uint8_t)(x & 0xFF)
+
+static const uint8_t page_first_sequence[] = {
+  U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), U8G_ESC_DATA(X_MIN), U8G_ESC_DATA(X_MAX),
+  U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), U8G_ESC_DATA(Y_MIN), U8G_ESC_DATA(Y_MAX),
+  U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
+  U8G_ESC_END
+};
+
+static const uint8_t clear_screen_sequence[] = {
+  U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), 0x00, 0x00, 0x01, 0x3F,
+  U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), 0x00, 0x00, 0x00, 0xEF,
+  U8G_ESC_ADR(0), LCD_WRITE_RAM, U8G_ESC_ADR(1),
+  U8G_ESC_END
+};
+
+static const uint8_t st7789v_init_sequence[] = { // 0x8552 - ST7789V
+  U8G_ESC_ADR(0),
+  0x10,
+  U8G_ESC_DLY(10),
+  0x01,
+  U8G_ESC_DLY(100), U8G_ESC_DLY(100),
+  0x11,
+  U8G_ESC_DLY(120),
+  0x36, U8G_ESC_ADR(1), 0xA0,
+  U8G_ESC_ADR(0), 0x3A, U8G_ESC_ADR(1), 0x05,
+  U8G_ESC_ADR(0), LCD_COLUMN, U8G_ESC_ADR(1), 0x00, 0x00, 0x01, 0x3F,
+  U8G_ESC_ADR(0), LCD_ROW,    U8G_ESC_ADR(1), 0x00, 0x00, 0x00, 0xEF,
+  U8G_ESC_ADR(0), 0xB2, U8G_ESC_ADR(1), 0x0C, 0x0C, 0x00, 0x33, 0x33,
+  U8G_ESC_ADR(0), 0xB7, U8G_ESC_ADR(1), 0x35,
+  U8G_ESC_ADR(0), 0xBB, U8G_ESC_ADR(1), 0x1F,
+  U8G_ESC_ADR(0), 0xC0, U8G_ESC_ADR(1), 0x2C,
+  U8G_ESC_ADR(0), 0xC2, U8G_ESC_ADR(1), 0x01, 0xC3,
+  U8G_ESC_ADR(0), 0xC4, U8G_ESC_ADR(1), 0x20,
+  U8G_ESC_ADR(0), 0xC6, U8G_ESC_ADR(1), 0x0F,
+  U8G_ESC_ADR(0), 0xD0, U8G_ESC_ADR(1), 0xA4, 0xA1,
+  U8G_ESC_ADR(0), 0xE0, U8G_ESC_ADR(1), 0xD0, 0x08, 0x11, 0x08, 0x0C, 0x15, 0x39, 0x33, 0x50, 0x36, 0x13, 0x14, 0x29, 0x2D,
+  U8G_ESC_ADR(0), 0xE1, U8G_ESC_ADR(1), 0xD0, 0x08, 0x10, 0x08, 0x06, 0x06, 0x39, 0x44, 0x51, 0x0B, 0x16, 0x14, 0x2F, 0x31,
+  U8G_ESC_ADR(0), 0x29, 0x11, 0x35, U8G_ESC_ADR(1), 0x00,
+  U8G_ESC_END
+};
+
+uint8_t u8g_dev_tft_320x240_upscale_from_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg) {
+  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
+  uint16_t buffer[256];
+  uint32_t i, j, k;
+
+  switch(msg) {
+    case U8G_DEV_MSG_INIT:
+      dev->com_fn(u8g, U8G_COM_MSG_INIT, U8G_SPI_CLK_CYCLE_NONE, &lcd_id);
+      if (lcd_id == 0x040404) return 0; // No connected display on FSMC
+      if (lcd_id == 0xFFFFFF) return 0; // No connected display on SPI
+
+      memset(buffer, 0x00, sizeof(buffer));
+
+      if ((lcd_id & 0xFFFF) == 0x8552)  // ST7789V
+        u8g_WriteEscSeqP(u8g, dev, st7789v_init_sequence);
+
+      u8g_WriteEscSeqP(u8g, dev, clear_screen_sequence);
+      for (i = 0; i < 960; i++)
+        u8g_WriteSequence(u8g, dev, 160, (uint8_t *)buffer);
+      break;
+
+    case U8G_DEV_MSG_STOP:
+      break;
+
+    case U8G_DEV_MSG_PAGE_FIRST:
+      u8g_WriteEscSeqP(u8g, dev, page_first_sequence);
+      break;
+
+    case U8G_DEV_MSG_PAGE_NEXT:
+      for (j = 0; j < 8; j++) {
+        k = 0;
+        for (i = 0; i < (uint32_t)pb->width; i++) {
+          const uint8_t b = *(((uint8_t *)pb->buf) + i);
+          const uint16_t c = TEST(b, j) ? 0x7FFF : 0x0000;
+          buffer[k++] = c; buffer[k++] = c;
+        }
+        for (k = 0; k < 2; k++) {
+          u8g_WriteSequence(u8g, dev, 128, (uint8_t*)buffer);
+          u8g_WriteSequence(u8g, dev, 128, (uint8_t*)&(buffer[64]));
+          u8g_WriteSequence(u8g, dev, 128, (uint8_t*)&(buffer[128]));
+          u8g_WriteSequence(u8g, dev, 128, (uint8_t*)&(buffer[192]));
+        }
+      }
+      break;
+
+    case U8G_DEV_MSG_SLEEP_ON:
+    case U8G_DEV_MSG_SLEEP_OFF:
+      return 1;
+  }
+  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
+}
+
+U8G_PB_DEV(u8g_dev_tft_320x240_upscale_from_128x64, WIDTH, HEIGHT, PAGE_HEIGHT, u8g_dev_tft_320x240_upscale_from_128x64_fn, U8G_COM_HAL_FSMC_FN);
+
+#endif // HAS_GRAPHICAL_LCD
