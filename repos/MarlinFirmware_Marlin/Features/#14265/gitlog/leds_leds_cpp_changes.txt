commit 4af5229cee2a2bb49ae53d76fbc145fc69d802c6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jul 5 20:08:07 2024 -0500

    üßë‚Äçüíª Conditional HAS_LED_POWEROFF_TIMEOUT

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index ac7f181516..8810c518cf 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -232,21 +232,21 @@ void LEDLights::set_color(const LEDColor &incol
     // Don't update the color when OFF
     lights_on = !incol.is_off();
     if (lights_on) color = incol;
   #endif
 }
 
 #if ENABLED(LED_CONTROL_MENU)
   void LEDLights::toggle() { if (lights_on) set_off(); else update(); }
 #endif
 
-#if LED_POWEROFF_TIMEOUT > 0
+#if HAS_LED_POWEROFF_TIMEOUT
 
   millis_t LEDLights::led_off_time; // = 0
 
   void LEDLights::update_timeout(const bool power_on) {
     if (lights_on) {
       const millis_t ms = millis();
       if (power_on)
         reset_timeout(ms);
       else if (ELAPSED(ms, led_off_time))
         set_off();

commit 821d77fe4c2ea0260d63e02ae65ab575da840801
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jul 16 23:43:50 2023 -0500

    üé® Misc. comment open

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 7305581cd0..ac7f181516 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -98,21 +98,21 @@ void LEDLights::setup() {
 
   #elif ALL(PCA9632, RGB_STARTUP_TEST)   // PCA9632 RGB_STARTUP_TEST
 
     constexpr int8_t led_pin_count = TERN(HAS_WHITE_LED, 4, 3);
 
     // Startup animation
     LEDColor curColor = LEDColorOff();
     PCA9632_set_led_color(curColor);      // blackout
     delay(200);
 
-    /*
+    /**
      * LED Pin Counter steps -> events
      * | 0-100 | 100-200 | 200-300 | 300-400 |
      *  fade in   steady |           fade out
      *  start next pin fade in
      */
 
     uint16_t led_pin_counters[led_pin_count] = { 1, 0, 0 };
 
     bool canEnd = false;
     while (led_pin_counters[0] != 99 || !canEnd) {

commit 86c811660ebf0b3fcbae2f34273d4c9d0c22abc4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:30:34 2023 -0500

    üßë‚Äçüíª Remove LOOP macros (#25917)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 45810a31ab..7305581cd0 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -69,22 +69,22 @@ void LEDLights::setup() {
         // blackout
         if (PWM_PIN(RGB_LED_R_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_R_PIN), 0); else WRITE(RGB_LED_R_PIN, LOW);
         if (PWM_PIN(RGB_LED_G_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_G_PIN), 0); else WRITE(RGB_LED_G_PIN, LOW);
         if (PWM_PIN(RGB_LED_B_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_B_PIN), 0); else WRITE(RGB_LED_B_PIN, LOW);
         #if ENABLED(RGBW_LED)
           if (PWM_PIN(RGB_LED_W_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_W_PIN), 0);
           else WRITE(RGB_LED_W_PIN, LOW);
         #endif
         delay(200);
 
-        LOOP_L_N(i, led_pin_count) {
-          LOOP_LE_N(b, 200) {
+        for (uint8_t i = 0; i < led_pin_count; ++i) {
+          for (uint8_t b = 0; b <= 200; ++b) {
             const uint16_t led_pwm = b <= 100 ? b : 200 - b;
             if (i == 0 && PWM_PIN(RGB_LED_R_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_R_PIN), led_pwm); else WRITE(RGB_LED_R_PIN, b < 100 ? HIGH : LOW);
             if (i == 1 && PWM_PIN(RGB_LED_G_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_G_PIN), led_pwm); else WRITE(RGB_LED_G_PIN, b < 100 ? HIGH : LOW);
             if (i == 2 && PWM_PIN(RGB_LED_B_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_B_PIN), led_pwm); else WRITE(RGB_LED_B_PIN, b < 100 ? HIGH : LOW);
             #if ENABLED(RGBW_LED)
               if (i == 3){
                 if (PWM_PIN(RGB_LED_W_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_W_PIN), led_pwm);
                 else WRITE(RGB_LED_W_PIN, b < 100 ? HIGH : LOW);
                 delay(RGB_STARTUP_TEST_INNER_MS);//More slowing for ending
               }
@@ -111,21 +111,21 @@ void LEDLights::setup() {
      *  fade in   steady |           fade out
      *  start next pin fade in
      */
 
     uint16_t led_pin_counters[led_pin_count] = { 1, 0, 0 };
 
     bool canEnd = false;
     while (led_pin_counters[0] != 99 || !canEnd) {
       if (led_pin_counters[0] == 99)        // End loop next time pin0 counter is 99
         canEnd = true;
-      LOOP_L_N(i, led_pin_count) {
+      for (uint8_t i = 0; i < led_pin_count; ++i) {
         if (led_pin_counters[i] > 0) {
           if (++led_pin_counters[i] == 400) // turn off current pin counter in led_pin_counters
             led_pin_counters[i] = 0;
           else if (led_pin_counters[i] == 201) { // start next pin pwm
             led_pin_counters[i + 1 == led_pin_count ? 0 : i + 1] = 1;
             i++; // skip next pin in this loop so it doesn't increment twice
           }
         }
       }
       uint16_t r, g, b;
@@ -133,21 +133,21 @@ void LEDLights::setup() {
       g = led_pin_counters[1]; curColor.g = g <= 100 ? g : g <= 300 ? 100 : 400 - g;
       b = led_pin_counters[2]; curColor.b = b <= 100 ? b : b <= 300 ? 100 : 400 - b;
       #if HAS_WHITE_LED
         const uint16_t w = led_pin_counters[3]; curColor.w = w <= 100 ? w : w <= 300 ? 100 : 400 - w;
       #endif
       PCA9632_set_led_color(curColor);
       delay(RGB_STARTUP_TEST_INNER_MS);
     }
 
     // Fade to white
-    LOOP_LE_N(led_pwm, 100) {
+    for (uint8_t led_pwm = 0; led_pwm <= 100; ++led_pwm) {
       NOLESS(curColor.r, led_pwm);
       NOLESS(curColor.g, led_pwm);
       NOLESS(curColor.b, led_pwm);
       TERN_(HAS_WHITE_LED, NOLESS(curColor.w, led_pwm));
       PCA9632_set_led_color(curColor);
       delay(RGB_STARTUP_TEST_INNER_MS);
     }
 
   #endif // PCA9632 && RGB_STARTUP_TEST
 

commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    üßë‚Äçüíª Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 94900445dc..45810a31ab 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -23,41 +23,41 @@
 /**
  * leds.cpp - Marlin RGB LED general support
  */
 
 #include "../../inc/MarlinConfig.h"
 
 #if HAS_COLOR_LEDS
 
 #include "leds.h"
 
-#if EITHER(CASE_LIGHT_USE_RGB_LED, CASE_LIGHT_USE_NEOPIXEL)
+#if ANY(CASE_LIGHT_USE_RGB_LED, CASE_LIGHT_USE_NEOPIXEL)
   #include "../../feature/caselight.h"
 #endif
 
 #if ENABLED(LED_COLOR_PRESETS)
   const LEDColor LEDLights::defaultLEDColor = LEDColor(
     LED_USER_PRESET_RED, LED_USER_PRESET_GREEN, LED_USER_PRESET_BLUE
     OPTARG(HAS_WHITE_LED, LED_USER_PRESET_WHITE)
     OPTARG(NEOPIXEL_LED, LED_USER_PRESET_BRIGHTNESS)
   );
 #endif
 
 #if ANY(LED_CONTROL_MENU, PRINTER_EVENT_LEDS, CASE_LIGHT_IS_COLOR_LED)
   LEDColor LEDLights::color;
   bool LEDLights::lights_on;
 #endif
 
 LEDLights leds;
 
 void LEDLights::setup() {
-  #if EITHER(RGB_LED, RGBW_LED)
+  #if ANY(RGB_LED, RGBW_LED)
     if (PWM_PIN(RGB_LED_R_PIN)) SET_PWM(RGB_LED_R_PIN); else SET_OUTPUT(RGB_LED_R_PIN);
     if (PWM_PIN(RGB_LED_G_PIN)) SET_PWM(RGB_LED_G_PIN); else SET_OUTPUT(RGB_LED_G_PIN);
     if (PWM_PIN(RGB_LED_B_PIN)) SET_PWM(RGB_LED_B_PIN); else SET_OUTPUT(RGB_LED_B_PIN);
     #if ENABLED(RGBW_LED)
       if (PWM_PIN(RGB_LED_W_PIN)) SET_PWM(RGB_LED_W_PIN); else SET_OUTPUT(RGB_LED_W_PIN);
     #endif
 
     #if ENABLED(RGB_STARTUP_TEST)
       int8_t led_pin_count = 0;
       if (PWM_PIN(RGB_LED_R_PIN) && PWM_PIN(RGB_LED_G_PIN) && PWM_PIN(RGB_LED_B_PIN)) led_pin_count = 3;
@@ -89,21 +89,21 @@ void LEDLights::setup() {
                 delay(RGB_STARTUP_TEST_INNER_MS);//More slowing for ending
               }
             #endif
             delay(RGB_STARTUP_TEST_INNER_MS);
           }
         }
         delay(500);
       }
     #endif // RGB_STARTUP_TEST
 
-  #elif BOTH(PCA9632, RGB_STARTUP_TEST)   // PCA9632 RGB_STARTUP_TEST
+  #elif ALL(PCA9632, RGB_STARTUP_TEST)   // PCA9632 RGB_STARTUP_TEST
 
     constexpr int8_t led_pin_count = TERN(HAS_WHITE_LED, 4, 3);
 
     // Startup animation
     LEDColor curColor = LEDColorOff();
     PCA9632_set_led_color(curColor);      // blackout
     delay(200);
 
     /*
      * LED Pin Counter steps -> events
@@ -169,51 +169,51 @@ void LEDLights::set_color(const LEDColor &incol
     #if ENABLED(NEOPIXEL_IS_SEQUENTIAL)
       static uint16_t nextLed = 0;
       #ifdef NEOPIXEL_BKGD_INDEX_FIRST
         while (WITHIN(nextLed, NEOPIXEL_BKGD_INDEX_FIRST, NEOPIXEL_BKGD_INDEX_LAST)) {
           neo.reset_background_color();
           if (++nextLed >= neo.pixels()) { nextLed = 0; return; }
         }
       #endif
     #endif
 
-    #if BOTH(CASE_LIGHT_MENU, CASE_LIGHT_USE_NEOPIXEL)
+    #if ALL(CASE_LIGHT_MENU, CASE_LIGHT_USE_NEOPIXEL)
       // Update brightness only if caselight is ON or switching leds off
       if (caselight.on || incol.is_off())
     #endif
     neo.set_brightness(incol.i);
 
     #if ENABLED(NEOPIXEL_IS_SEQUENTIAL)
       if (isSequence) {
         neo.set_pixel_color(nextLed, neocolor);
         neo.show();
         if (++nextLed >= neo.pixels()) nextLed = 0;
         return;
       }
     #endif
 
-    #if BOTH(CASE_LIGHT_MENU, CASE_LIGHT_USE_NEOPIXEL)
+    #if ALL(CASE_LIGHT_MENU, CASE_LIGHT_USE_NEOPIXEL)
       // Update color only if caselight is ON or switching leds off
       if (caselight.on || incol.is_off())
     #endif
     neo.set_color(neocolor);
 
   #endif
 
   #if ENABLED(BLINKM)
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
   #endif
 
-  #if EITHER(RGB_LED, RGBW_LED)
+  #if ANY(RGB_LED, RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
     #define _UPDATE_RGBW(C,c) do {                     \
       if (PWM_PIN(RGB_LED_##C##_PIN))                  \
         hal.set_pwm_duty(pin_t(RGB_LED_##C##_PIN), c); \
       else                                             \
         WRITE(RGB_LED_##C##_PIN, c ? HIGH : LOW);      \
     }while(0)
     #define UPDATE_RGBW(C,c) _UPDATE_RGBW(C, TERN1(CASE_LIGHT_USE_RGB_LED, caselight.on) ? incol.c : 0)
@@ -221,21 +221,21 @@ void LEDLights::set_color(const LEDColor &incol
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
 
   #endif
 
   // Update I2C LED driver
   TERN_(PCA9632, PCA9632_set_led_color(incol));
   TERN_(PCA9533, PCA9533_set_rgb(incol.r, incol.g, incol.b));
 
-  #if EITHER(LED_CONTROL_MENU, PRINTER_EVENT_LEDS)
+  #if ANY(LED_CONTROL_MENU, PRINTER_EVENT_LEDS)
     // Don't update the color when OFF
     lights_on = !incol.is_off();
     if (lights_on) color = incol;
   #endif
 }
 
 #if ENABLED(LED_CONTROL_MENU)
   void LEDLights::toggle() { if (lights_on) set_off(); else update(); }
 #endif
 

commit 8a33cfd546476a016191cd18eed0bfa415ec8bb5
Author: Anson Liu <ansonl@users.noreply.github.com>
Date:   Sun Jan 8 04:46:26 2023 -0500

    üö∏ RGB_STARTUP_TEST for PCA9632 (#25163)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 3753235ab5..94900445dc 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -88,21 +88,76 @@ void LEDLights::setup() {
                 else WRITE(RGB_LED_W_PIN, b < 100 ? HIGH : LOW);
                 delay(RGB_STARTUP_TEST_INNER_MS);//More slowing for ending
               }
             #endif
             delay(RGB_STARTUP_TEST_INNER_MS);
           }
         }
         delay(500);
       }
     #endif // RGB_STARTUP_TEST
-  #endif
+
+  #elif BOTH(PCA9632, RGB_STARTUP_TEST)   // PCA9632 RGB_STARTUP_TEST
+
+    constexpr int8_t led_pin_count = TERN(HAS_WHITE_LED, 4, 3);
+
+    // Startup animation
+    LEDColor curColor = LEDColorOff();
+    PCA9632_set_led_color(curColor);      // blackout
+    delay(200);
+
+    /*
+     * LED Pin Counter steps -> events
+     * | 0-100 | 100-200 | 200-300 | 300-400 |
+     *  fade in   steady |           fade out
+     *  start next pin fade in
+     */
+
+    uint16_t led_pin_counters[led_pin_count] = { 1, 0, 0 };
+
+    bool canEnd = false;
+    while (led_pin_counters[0] != 99 || !canEnd) {
+      if (led_pin_counters[0] == 99)        // End loop next time pin0 counter is 99
+        canEnd = true;
+      LOOP_L_N(i, led_pin_count) {
+        if (led_pin_counters[i] > 0) {
+          if (++led_pin_counters[i] == 400) // turn off current pin counter in led_pin_counters
+            led_pin_counters[i] = 0;
+          else if (led_pin_counters[i] == 201) { // start next pin pwm
+            led_pin_counters[i + 1 == led_pin_count ? 0 : i + 1] = 1;
+            i++; // skip next pin in this loop so it doesn't increment twice
+          }
+        }
+      }
+      uint16_t r, g, b;
+      r = led_pin_counters[0]; curColor.r = r <= 100 ? r : r <= 300 ? 100 : 400 - r;
+      g = led_pin_counters[1]; curColor.g = g <= 100 ? g : g <= 300 ? 100 : 400 - g;
+      b = led_pin_counters[2]; curColor.b = b <= 100 ? b : b <= 300 ? 100 : 400 - b;
+      #if HAS_WHITE_LED
+        const uint16_t w = led_pin_counters[3]; curColor.w = w <= 100 ? w : w <= 300 ? 100 : 400 - w;
+      #endif
+      PCA9632_set_led_color(curColor);
+      delay(RGB_STARTUP_TEST_INNER_MS);
+    }
+
+    // Fade to white
+    LOOP_LE_N(led_pwm, 100) {
+      NOLESS(curColor.r, led_pwm);
+      NOLESS(curColor.g, led_pwm);
+      NOLESS(curColor.b, led_pwm);
+      TERN_(HAS_WHITE_LED, NOLESS(curColor.w, led_pwm));
+      PCA9632_set_led_color(curColor);
+      delay(RGB_STARTUP_TEST_INNER_MS);
+    }
+
+  #endif // PCA9632 && RGB_STARTUP_TEST
+
   TERN_(NEOPIXEL_LED, neo.init());
   TERN_(PCA9533, PCA9533_init());
   TERN_(LED_USER_PRESET_STARTUP, set_default());
 }
 
 void LEDLights::set_color(const LEDColor &incol
   OPTARG(NEOPIXEL_IS_SEQUENTIAL, bool isSequence/*=false*/)
 ) {
 
   #if ENABLED(NEOPIXEL_LED)

commit e283f15720bcdfca56a989beffc8328fda42c018
Author: Justin Hartmann <zadarimm@gmail.com>
Date:   Mon Nov 14 00:50:02 2022 -0500

    ü©π Fix Overlord compile (#24947)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 1c6d9ab090..3753235ab5 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -23,32 +23,20 @@
 /**
  * leds.cpp - Marlin RGB LED general support
  */
 
 #include "../../inc/MarlinConfig.h"
 
 #if HAS_COLOR_LEDS
 
 #include "leds.h"
 
-#if ENABLED(BLINKM)
-  #include "blinkm.h"
-#endif
-
-#if ENABLED(PCA9632)
-  #include "pca9632.h"
-#endif
-
-#if ENABLED(PCA9533)
-  #include "pca9533.h"
-#endif
-
 #if EITHER(CASE_LIGHT_USE_RGB_LED, CASE_LIGHT_USE_NEOPIXEL)
   #include "../../feature/caselight.h"
 #endif
 
 #if ENABLED(LED_COLOR_PRESETS)
   const LEDColor LEDLights::defaultLEDColor = LEDColor(
     LED_USER_PRESET_RED, LED_USER_PRESET_GREEN, LED_USER_PRESET_BLUE
     OPTARG(HAS_WHITE_LED, LED_USER_PRESET_WHITE)
     OPTARG(NEOPIXEL_LED, LED_USER_PRESET_BRIGHTNESS)
   );

commit 0765dfd43fb5e213041e56dbc5e1ece9849d4476
Author: studiodyne <diabolomix@hotmail.fr>
Date:   Sun Aug 28 00:43:32 2022 +0200

    ‚ú® RGB_STARTUP_TEST

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 2a53a7c884..1c6d9ab090 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -62,20 +62,58 @@
 LEDLights leds;
 
 void LEDLights::setup() {
   #if EITHER(RGB_LED, RGBW_LED)
     if (PWM_PIN(RGB_LED_R_PIN)) SET_PWM(RGB_LED_R_PIN); else SET_OUTPUT(RGB_LED_R_PIN);
     if (PWM_PIN(RGB_LED_G_PIN)) SET_PWM(RGB_LED_G_PIN); else SET_OUTPUT(RGB_LED_G_PIN);
     if (PWM_PIN(RGB_LED_B_PIN)) SET_PWM(RGB_LED_B_PIN); else SET_OUTPUT(RGB_LED_B_PIN);
     #if ENABLED(RGBW_LED)
       if (PWM_PIN(RGB_LED_W_PIN)) SET_PWM(RGB_LED_W_PIN); else SET_OUTPUT(RGB_LED_W_PIN);
     #endif
+
+    #if ENABLED(RGB_STARTUP_TEST)
+      int8_t led_pin_count = 0;
+      if (PWM_PIN(RGB_LED_R_PIN) && PWM_PIN(RGB_LED_G_PIN) && PWM_PIN(RGB_LED_B_PIN)) led_pin_count = 3;
+      #if ENABLED(RGBW_LED)
+        if (PWM_PIN(RGB_LED_W_PIN) && led_pin_count) led_pin_count++;
+      #endif
+      // Startup animation
+      if (led_pin_count) {
+        // blackout
+        if (PWM_PIN(RGB_LED_R_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_R_PIN), 0); else WRITE(RGB_LED_R_PIN, LOW);
+        if (PWM_PIN(RGB_LED_G_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_G_PIN), 0); else WRITE(RGB_LED_G_PIN, LOW);
+        if (PWM_PIN(RGB_LED_B_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_B_PIN), 0); else WRITE(RGB_LED_B_PIN, LOW);
+        #if ENABLED(RGBW_LED)
+          if (PWM_PIN(RGB_LED_W_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_W_PIN), 0);
+          else WRITE(RGB_LED_W_PIN, LOW);
+        #endif
+        delay(200);
+
+        LOOP_L_N(i, led_pin_count) {
+          LOOP_LE_N(b, 200) {
+            const uint16_t led_pwm = b <= 100 ? b : 200 - b;
+            if (i == 0 && PWM_PIN(RGB_LED_R_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_R_PIN), led_pwm); else WRITE(RGB_LED_R_PIN, b < 100 ? HIGH : LOW);
+            if (i == 1 && PWM_PIN(RGB_LED_G_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_G_PIN), led_pwm); else WRITE(RGB_LED_G_PIN, b < 100 ? HIGH : LOW);
+            if (i == 2 && PWM_PIN(RGB_LED_B_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_B_PIN), led_pwm); else WRITE(RGB_LED_B_PIN, b < 100 ? HIGH : LOW);
+            #if ENABLED(RGBW_LED)
+              if (i == 3){
+                if (PWM_PIN(RGB_LED_W_PIN)) hal.set_pwm_duty(pin_t(RGB_LED_W_PIN), led_pwm);
+                else WRITE(RGB_LED_W_PIN, b < 100 ? HIGH : LOW);
+                delay(RGB_STARTUP_TEST_INNER_MS);//More slowing for ending
+              }
+            #endif
+            delay(RGB_STARTUP_TEST_INNER_MS);
+          }
+        }
+        delay(500);
+      }
+    #endif // RGB_STARTUP_TEST
   #endif
   TERN_(NEOPIXEL_LED, neo.init());
   TERN_(PCA9533, PCA9533_init());
   TERN_(LED_USER_PRESET_STARTUP, set_default());
 }
 
 void LEDLights::set_color(const LEDColor &incol
   OPTARG(NEOPIXEL_IS_SEQUENTIAL, bool isSequence/*=false*/)
 ) {
 

commit 44eff9a23348dcc117fd1ea9b4b1ef0b54061808
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Feb 17 18:50:31 2022 -0600

    ‚ôªÔ∏è Refactor HAL as singleton (#23357)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 715f51f442..2a53a7c884 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -122,25 +122,25 @@ void LEDLights::set_color(const LEDColor &incol
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
   #endif
 
   #if EITHER(RGB_LED, RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
-    #define _UPDATE_RGBW(C,c) do {                 \
-      if (PWM_PIN(RGB_LED_##C##_PIN))              \
-        set_pwm_duty(pin_t(RGB_LED_##C##_PIN), c); \
-      else                                         \
-        WRITE(RGB_LED_##C##_PIN, c ? HIGH : LOW);  \
+    #define _UPDATE_RGBW(C,c) do {                     \
+      if (PWM_PIN(RGB_LED_##C##_PIN))                  \
+        hal.set_pwm_duty(pin_t(RGB_LED_##C##_PIN), c); \
+      else                                             \
+        WRITE(RGB_LED_##C##_PIN, c ? HIGH : LOW);      \
     }while(0)
     #define UPDATE_RGBW(C,c) _UPDATE_RGBW(C, TERN1(CASE_LIGHT_USE_RGB_LED, caselight.on) ? incol.c : 0)
     UPDATE_RGBW(R,r); UPDATE_RGBW(G,g); UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
 
   #endif
 
   // Update I2C LED driver

commit f07fc7e96f512f4900619049761f75d28f9e0403
Author: GHGiampy <83699429+GHGiampy@users.noreply.github.com>
Date:   Wed Feb 2 00:35:38 2022 +0100

    üö∏ Case Light, LED menus for E3V2 DWIN Enhanced UI (#23590)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 17d790b8cc..715f51f442 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -35,21 +35,21 @@
 #endif
 
 #if ENABLED(PCA9632)
   #include "pca9632.h"
 #endif
 
 #if ENABLED(PCA9533)
   #include "pca9533.h"
 #endif
 
-#if ENABLED(CASE_LIGHT_USE_RGB_LED)
+#if EITHER(CASE_LIGHT_USE_RGB_LED, CASE_LIGHT_USE_NEOPIXEL)
   #include "../../feature/caselight.h"
 #endif
 
 #if ENABLED(LED_COLOR_PRESETS)
   const LEDColor LEDLights::defaultLEDColor = LEDColor(
     LED_USER_PRESET_RED, LED_USER_PRESET_GREEN, LED_USER_PRESET_BLUE
     OPTARG(HAS_WHITE_LED, LED_USER_PRESET_WHITE)
     OPTARG(NEOPIXEL_LED, LED_USER_PRESET_BRIGHTNESS)
   );
 #endif
@@ -88,31 +88,39 @@ void LEDLights::set_color(const LEDColor &incol
     #if ENABLED(NEOPIXEL_IS_SEQUENTIAL)
       static uint16_t nextLed = 0;
       #ifdef NEOPIXEL_BKGD_INDEX_FIRST
         while (WITHIN(nextLed, NEOPIXEL_BKGD_INDEX_FIRST, NEOPIXEL_BKGD_INDEX_LAST)) {
           neo.reset_background_color();
           if (++nextLed >= neo.pixels()) { nextLed = 0; return; }
         }
       #endif
     #endif
 
+    #if BOTH(CASE_LIGHT_MENU, CASE_LIGHT_USE_NEOPIXEL)
+      // Update brightness only if caselight is ON or switching leds off
+      if (caselight.on || incol.is_off())
+    #endif
     neo.set_brightness(incol.i);
 
     #if ENABLED(NEOPIXEL_IS_SEQUENTIAL)
       if (isSequence) {
         neo.set_pixel_color(nextLed, neocolor);
         neo.show();
         if (++nextLed >= neo.pixels()) nextLed = 0;
         return;
       }
     #endif
 
+    #if BOTH(CASE_LIGHT_MENU, CASE_LIGHT_USE_NEOPIXEL)
+      // Update color only if caselight is ON or switching leds off
+      if (caselight.on || incol.is_off())
+    #endif
     neo.set_color(neocolor);
 
   #endif
 
   #if ENABLED(BLINKM)
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
   #endif
@@ -143,21 +151,21 @@ void LEDLights::set_color(const LEDColor &incol
     // Don't update the color when OFF
     lights_on = !incol.is_off();
     if (lights_on) color = incol;
   #endif
 }
 
 #if ENABLED(LED_CONTROL_MENU)
   void LEDLights::toggle() { if (lights_on) set_off(); else update(); }
 #endif
 
-#ifdef LED_BACKLIGHT_TIMEOUT
+#if LED_POWEROFF_TIMEOUT > 0
 
   millis_t LEDLights::led_off_time; // = 0
 
   void LEDLights::update_timeout(const bool power_on) {
     if (lights_on) {
       const millis_t ms = millis();
       if (power_on)
         reset_timeout(ms);
       else if (ELAPSED(ms, led_off_time))
         set_off();

commit 6a8b9274a31d11c396ce1bc44b3a0b872a4606dc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Dec 25 23:15:17 2021 -0600

    ‚è™Ô∏è Refactor still needs work
    
    Reverting #23295

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 0a4b511476..17d790b8cc 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -116,21 +116,21 @@ void LEDLights::set_color(const LEDColor &incol
     blinkm_set_led_color(incol);
 
   #endif
 
   #if EITHER(RGB_LED, RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
     #define _UPDATE_RGBW(C,c) do {                 \
       if (PWM_PIN(RGB_LED_##C##_PIN))              \
-        hal.set_pwm_duty(pin_t(RGB_LED_##C##_PIN), c); \
+        set_pwm_duty(pin_t(RGB_LED_##C##_PIN), c); \
       else                                         \
         WRITE(RGB_LED_##C##_PIN, c ? HIGH : LOW);  \
     }while(0)
     #define UPDATE_RGBW(C,c) _UPDATE_RGBW(C, TERN1(CASE_LIGHT_USE_RGB_LED, caselight.on) ? incol.c : 0)
     UPDATE_RGBW(R,r); UPDATE_RGBW(G,g); UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
 
   #endif

commit e211ff148c39bf5dace72de7cffbb83f19d3f1bf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Dec 24 21:33:59 2021 -0600

    ‚ôªÔ∏è Refactor HAL as singleton (#23295)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 17d790b8cc..0a4b511476 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -116,21 +116,21 @@ void LEDLights::set_color(const LEDColor &incol
     blinkm_set_led_color(incol);
 
   #endif
 
   #if EITHER(RGB_LED, RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
     #define _UPDATE_RGBW(C,c) do {                 \
       if (PWM_PIN(RGB_LED_##C##_PIN))              \
-        set_pwm_duty(pin_t(RGB_LED_##C##_PIN), c); \
+        hal.set_pwm_duty(pin_t(RGB_LED_##C##_PIN), c); \
       else                                         \
         WRITE(RGB_LED_##C##_PIN, c ? HIGH : LOW);  \
     }while(0)
     #define UPDATE_RGBW(C,c) _UPDATE_RGBW(C, TERN1(CASE_LIGHT_USE_RGB_LED, caselight.on) ? incol.c : 0)
     UPDATE_RGBW(R,r); UPDATE_RGBW(G,g); UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
 
   #endif

commit 95357c33fb0d3ce6d84e59bd16e8354836997015
Author: Sebastien BLAISOT <sebastien@blaisot.org>
Date:   Tue Nov 2 06:49:21 2021 +0100

    üêõ Fix NEOPIXEL2_SEPARATE default color (#23057)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index a371637f00..17d790b8cc 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -163,23 +163,23 @@ void LEDLights::set_color(const LEDColor &incol
         set_off();
     }
   }
 
 #endif
 
 #if ENABLED(NEOPIXEL2_SEPARATE)
 
   #if ENABLED(NEO2_COLOR_PRESETS)
     const LEDColor LEDLights2::defaultLEDColor = LEDColor(
-      LED_USER_PRESET_RED, LED_USER_PRESET_GREEN, LED_USER_PRESET_BLUE
-      OPTARG(HAS_WHITE_LED2, LED_USER_PRESET_WHITE)
-      OPTARG(NEOPIXEL_LED, LED_USER_PRESET_BRIGHTNESS)
+      NEO2_USER_PRESET_RED, NEO2_USER_PRESET_GREEN, NEO2_USER_PRESET_BLUE
+      OPTARG(HAS_WHITE_LED2, NEO2_USER_PRESET_WHITE)
+      OPTARG(NEOPIXEL_LED, NEO2_USER_PRESET_BRIGHTNESS)
     );
   #endif
 
   #if ENABLED(LED_CONTROL_MENU)
     LEDColor LEDLights2::color;
     bool LEDLights2::lights_on;
   #endif
 
   LEDLights2 leds2;
 

commit da830e6ced7f7c7e509e748104245064d1c1b265
Author: Andrei M <22990561+andrei-moraru@users.noreply.github.com>
Date:   Tue Nov 2 01:47:16 2021 -0400

    ‚öóÔ∏è Use pwm_set_duty over analogWrite to set PWM (#23048)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 328daa626d..a371637f00 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -114,25 +114,25 @@ void LEDLights::set_color(const LEDColor &incol
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
   #endif
 
   #if EITHER(RGB_LED, RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
-    #define _UPDATE_RGBW(C,c) do {                \
-      if (PWM_PIN(RGB_LED_##C##_PIN))             \
-        analogWrite(pin_t(RGB_LED_##C##_PIN), c); \
-      else                                        \
-        WRITE(RGB_LED_##C##_PIN, c ? HIGH : LOW); \
+    #define _UPDATE_RGBW(C,c) do {                 \
+      if (PWM_PIN(RGB_LED_##C##_PIN))              \
+        set_pwm_duty(pin_t(RGB_LED_##C##_PIN), c); \
+      else                                         \
+        WRITE(RGB_LED_##C##_PIN, c ? HIGH : LOW);  \
     }while(0)
     #define UPDATE_RGBW(C,c) _UPDATE_RGBW(C, TERN1(CASE_LIGHT_USE_RGB_LED, caselight.on) ? incol.c : 0)
     UPDATE_RGBW(R,r); UPDATE_RGBW(G,g); UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
 
   #endif
 
   // Update I2C LED driver

commit e60c38b6220678b3b9f3a3b31516852f8d25b3b0
Author: ellensp <ellensp@hotmail.com>
Date:   Wed May 26 11:38:23 2021 +1200

    ‚ôªÔ∏è LEDs refactor and extend (#21962)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index c9178effa8..328daa626d 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -40,23 +40,24 @@
 
 #if ENABLED(PCA9533)
   #include "pca9533.h"
 #endif
 
 #if ENABLED(CASE_LIGHT_USE_RGB_LED)
   #include "../../feature/caselight.h"
 #endif
 
 #if ENABLED(LED_COLOR_PRESETS)
-  const LEDColor LEDLights::defaultLEDColor = MakeLEDColor(
-    LED_USER_PRESET_RED, LED_USER_PRESET_GREEN, LED_USER_PRESET_BLUE,
-    LED_USER_PRESET_WHITE, LED_USER_PRESET_BRIGHTNESS
+  const LEDColor LEDLights::defaultLEDColor = LEDColor(
+    LED_USER_PRESET_RED, LED_USER_PRESET_GREEN, LED_USER_PRESET_BLUE
+    OPTARG(HAS_WHITE_LED, LED_USER_PRESET_WHITE)
+    OPTARG(NEOPIXEL_LED, LED_USER_PRESET_BRIGHTNESS)
   );
 #endif
 
 #if ANY(LED_CONTROL_MENU, PRINTER_EVENT_LEDS, CASE_LIGHT_IS_COLOR_LED)
   LEDColor LEDLights::color;
   bool LEDLights::lights_on;
 #endif
 
 LEDLights leds;
 
@@ -68,48 +69,49 @@ void LEDLights::setup() {
     #if ENABLED(RGBW_LED)
       if (PWM_PIN(RGB_LED_W_PIN)) SET_PWM(RGB_LED_W_PIN); else SET_OUTPUT(RGB_LED_W_PIN);
     #endif
   #endif
   TERN_(NEOPIXEL_LED, neo.init());
   TERN_(PCA9533, PCA9533_init());
   TERN_(LED_USER_PRESET_STARTUP, set_default());
 }
 
 void LEDLights::set_color(const LEDColor &incol
-  OPTARG(NEOPIXEL_LED, bool isSequence/*=false*/)
+  OPTARG(NEOPIXEL_IS_SEQUENTIAL, bool isSequence/*=false*/)
 ) {
 
   #if ENABLED(NEOPIXEL_LED)
 
     const uint32_t neocolor = LEDColorWhite() == incol
                             ? neo.Color(NEO_WHITE)
-                            : neo.Color(incol.r, incol.g, incol.b, incol.w);
-    static uint16_t nextLed = 0;
-
-    #ifdef NEOPIXEL_BKGD_LED_INDEX
-      if (NEOPIXEL_BKGD_LED_INDEX == nextLed) {
-        neo.set_color_background();
-        if (++nextLed >= neo.pixels()) {
-          nextLed = 0;
-          return;
+                            : neo.Color(incol.r, incol.g, incol.b OPTARG(HAS_WHITE_LED, incol.w));
+
+    #if ENABLED(NEOPIXEL_IS_SEQUENTIAL)
+      static uint16_t nextLed = 0;
+      #ifdef NEOPIXEL_BKGD_INDEX_FIRST
+        while (WITHIN(nextLed, NEOPIXEL_BKGD_INDEX_FIRST, NEOPIXEL_BKGD_INDEX_LAST)) {
+          neo.reset_background_color();
+          if (++nextLed >= neo.pixels()) { nextLed = 0; return; }
         }
-      }
+      #endif
     #endif
 
     neo.set_brightness(incol.i);
 
-    if (isSequence) {
-      neo.set_pixel_color(nextLed, neocolor);
-      neo.show();
-      if (++nextLed >= neo.pixels()) nextLed = 0;
-      return;
-    }
+    #if ENABLED(NEOPIXEL_IS_SEQUENTIAL)
+      if (isSequence) {
+        neo.set_pixel_color(nextLed, neocolor);
+        neo.show();
+        if (++nextLed >= neo.pixels()) nextLed = 0;
+        return;
+      }
+    #endif
 
     neo.set_color(neocolor);
 
   #endif
 
   #if ENABLED(BLINKM)
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
@@ -160,42 +162,43 @@ void LEDLights::set_color(const LEDColor &incol
       else if (ELAPSED(ms, led_off_time))
         set_off();
     }
   }
 
 #endif
 
 #if ENABLED(NEOPIXEL2_SEPARATE)
 
   #if ENABLED(NEO2_COLOR_PRESETS)
-    const LEDColor LEDLights2::defaultLEDColor = MakeLEDColor(
-      NEO2_USER_PRESET_RED, NEO2_USER_PRESET_GREEN, NEO2_USER_PRESET_BLUE,
-      NEO2_USER_PRESET_WHITE, NEO2_USER_PRESET_BRIGHTNESS
+    const LEDColor LEDLights2::defaultLEDColor = LEDColor(
+      LED_USER_PRESET_RED, LED_USER_PRESET_GREEN, LED_USER_PRESET_BLUE
+      OPTARG(HAS_WHITE_LED2, LED_USER_PRESET_WHITE)
+      OPTARG(NEOPIXEL_LED, LED_USER_PRESET_BRIGHTNESS)
     );
   #endif
 
   #if ENABLED(LED_CONTROL_MENU)
     LEDColor LEDLights2::color;
     bool LEDLights2::lights_on;
   #endif
 
   LEDLights2 leds2;
 
   void LEDLights2::setup() {
     neo2.init();
     TERN_(NEO2_USER_PRESET_STARTUP, set_default());
   }
 
   void LEDLights2::set_color(const LEDColor &incol) {
     const uint32_t neocolor = LEDColorWhite() == incol
                             ? neo2.Color(NEO2_WHITE)
-                            : neo2.Color(incol.r, incol.g, incol.b, incol.w);
+                            : neo2.Color(incol.r, incol.g, incol.b OPTARG(HAS_WHITE_LED2, incol.w));
     neo2.set_brightness(incol.i);
     neo2.set_color(neocolor);
 
     #if ENABLED(LED_CONTROL_MENU)
       // Don't update the color when OFF
       lights_on = !incol.is_off();
       if (lights_on) color = incol;
     #endif
   }
 

commit 84fd0eff17d089e3f75f6585d4bba47f15c00ba7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 23 21:33:22 2021 -0500

    üé® Macros for optional arguments (#21969)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 8349049a00..c9178effa8 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -68,23 +68,21 @@ void LEDLights::setup() {
     #if ENABLED(RGBW_LED)
       if (PWM_PIN(RGB_LED_W_PIN)) SET_PWM(RGB_LED_W_PIN); else SET_OUTPUT(RGB_LED_W_PIN);
     #endif
   #endif
   TERN_(NEOPIXEL_LED, neo.init());
   TERN_(PCA9533, PCA9533_init());
   TERN_(LED_USER_PRESET_STARTUP, set_default());
 }
 
 void LEDLights::set_color(const LEDColor &incol
-  #if ENABLED(NEOPIXEL_LED)
-    , bool isSequence/*=false*/
-  #endif
+  OPTARG(NEOPIXEL_LED, bool isSequence/*=false*/)
 ) {
 
   #if ENABLED(NEOPIXEL_LED)
 
     const uint32_t neocolor = LEDColorWhite() == incol
                             ? neo.Color(NEO_WHITE)
                             : neo.Color(incol.r, incol.g, incol.b, incol.w);
     static uint16_t nextLed = 0;
 
     #ifdef NEOPIXEL_BKGD_LED_INDEX

commit 9485d44903579f90a3831d8f71a2d1bc97052cb3
Author: sanek88lbl <42996016+sanek88lbl@users.noreply.github.com>
Date:   Thu May 6 14:10:18 2021 +0300

    Patches for CASE_LIGHT_USE_RGB_LED (#21811)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index ef0561a435..8349049a00 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -46,21 +46,21 @@
   #include "../../feature/caselight.h"
 #endif
 
 #if ENABLED(LED_COLOR_PRESETS)
   const LEDColor LEDLights::defaultLEDColor = MakeLEDColor(
     LED_USER_PRESET_RED, LED_USER_PRESET_GREEN, LED_USER_PRESET_BLUE,
     LED_USER_PRESET_WHITE, LED_USER_PRESET_BRIGHTNESS
   );
 #endif
 
-#if EITHER(LED_CONTROL_MENU, PRINTER_EVENT_LEDS)
+#if ANY(LED_CONTROL_MENU, PRINTER_EVENT_LEDS, CASE_LIGHT_IS_COLOR_LED)
   LEDColor LEDLights::color;
   bool LEDLights::lights_on;
 #endif
 
 LEDLights leds;
 
 void LEDLights::setup() {
   #if EITHER(RGB_LED, RGBW_LED)
     if (PWM_PIN(RGB_LED_R_PIN)) SET_PWM(RGB_LED_R_PIN); else SET_OUTPUT(RGB_LED_R_PIN);
     if (PWM_PIN(RGB_LED_G_PIN)) SET_PWM(RGB_LED_G_PIN); else SET_OUTPUT(RGB_LED_G_PIN);

commit e0aa9ce372710d2bd1147ab0779072e6a02b61c9
Author: LinFor <linfor@gmail.com>
Date:   Sun Feb 28 01:06:48 2021 +0300

    RGB Caselight (#20341)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index c8cbdec33b..ef0561a435 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -35,20 +35,24 @@
 #endif
 
 #if ENABLED(PCA9632)
   #include "pca9632.h"
 #endif
 
 #if ENABLED(PCA9533)
   #include "pca9533.h"
 #endif
 
+#if ENABLED(CASE_LIGHT_USE_RGB_LED)
+  #include "../../feature/caselight.h"
+#endif
+
 #if ENABLED(LED_COLOR_PRESETS)
   const LEDColor LEDLights::defaultLEDColor = MakeLEDColor(
     LED_USER_PRESET_RED, LED_USER_PRESET_GREEN, LED_USER_PRESET_BLUE,
     LED_USER_PRESET_WHITE, LED_USER_PRESET_BRIGHTNESS
   );
 #endif
 
 #if EITHER(LED_CONTROL_MENU, PRINTER_EVENT_LEDS)
   LEDColor LEDLights::color;
   bool LEDLights::lights_on;
@@ -78,22 +82,25 @@ void LEDLights::set_color(const LEDColor &incol
 
   #if ENABLED(NEOPIXEL_LED)
 
     const uint32_t neocolor = LEDColorWhite() == incol
                             ? neo.Color(NEO_WHITE)
                             : neo.Color(incol.r, incol.g, incol.b, incol.w);
     static uint16_t nextLed = 0;
 
     #ifdef NEOPIXEL_BKGD_LED_INDEX
       if (NEOPIXEL_BKGD_LED_INDEX == nextLed) {
-        if (++nextLed >= neo.pixels()) nextLed = 0;
-        return;
+        neo.set_color_background();
+        if (++nextLed >= neo.pixels()) {
+          nextLed = 0;
+          return;
+        }
       }
     #endif
 
     neo.set_brightness(incol.i);
 
     if (isSequence) {
       neo.set_pixel_color(nextLed, neocolor);
       neo.show();
       if (++nextLed >= neo.pixels()) nextLed = 0;
       return;
@@ -107,26 +114,27 @@ void LEDLights::set_color(const LEDColor &incol
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
   #endif
 
   #if EITHER(RGB_LED, RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
-    #define UPDATE_RGBW(C,c) do {                       \
-      if (PWM_PIN(RGB_LED_##C##_PIN))                   \
-        analogWrite(pin_t(RGB_LED_##C##_PIN), incol.c); \
-      else                                              \
-        WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); \
+    #define _UPDATE_RGBW(C,c) do {                \
+      if (PWM_PIN(RGB_LED_##C##_PIN))             \
+        analogWrite(pin_t(RGB_LED_##C##_PIN), c); \
+      else                                        \
+        WRITE(RGB_LED_##C##_PIN, c ? HIGH : LOW); \
     }while(0)
+    #define UPDATE_RGBW(C,c) _UPDATE_RGBW(C, TERN1(CASE_LIGHT_USE_RGB_LED, caselight.on) ? incol.c : 0)
     UPDATE_RGBW(R,r); UPDATE_RGBW(G,g); UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
 
   #endif
 
   // Update I2C LED driver
   TERN_(PCA9632, PCA9632_set_led_color(incol));
   TERN_(PCA9533, PCA9533_set_rgb(incol.r, incol.g, incol.b));

commit 6dcb77f7b59ce894bbb1ffec9064681155a3da4b
Author: ellensp <ellensp@hotmail.com>
Date:   Mon Feb 8 15:36:04 2021 +1300

    Fix mini12864 v2.1 + PSU control + NeoPixel backlight (#21021)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index ef9099fb20..c8cbdec33b 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -140,25 +140,27 @@ void LEDLights::set_color(const LEDColor &incol
 
 #if ENABLED(LED_CONTROL_MENU)
   void LEDLights::toggle() { if (lights_on) set_off(); else update(); }
 #endif
 
 #ifdef LED_BACKLIGHT_TIMEOUT
 
   millis_t LEDLights::led_off_time; // = 0
 
   void LEDLights::update_timeout(const bool power_on) {
-    const millis_t ms = millis();
-    if (power_on)
-      reset_timeout(ms);
-    else if (ELAPSED(ms, led_off_time))
-      set_off();
+    if (lights_on) {
+      const millis_t ms = millis();
+      if (power_on)
+        reset_timeout(ms);
+      else if (ELAPSED(ms, led_off_time))
+        set_off();
+    }
   }
 
 #endif
 
 #if ENABLED(NEOPIXEL2_SEPARATE)
 
   #if ENABLED(NEO2_COLOR_PRESETS)
     const LEDColor LEDLights2::defaultLEDColor = MakeLEDColor(
       NEO2_USER_PRESET_RED, NEO2_USER_PRESET_GREEN, NEO2_USER_PRESET_BLUE,
       NEO2_USER_PRESET_WHITE, NEO2_USER_PRESET_BRIGHTNESS

commit b709baba7a437559ab285f0ed9c5c4da8e54606d
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Sep 6 22:51:53 2020 -0500

    Whitespace cleanup

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 28a6814b43..ef9099fb20 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -176,25 +176,25 @@ void LEDLights::set_color(const LEDColor &incol
     neo2.init();
     TERN_(NEO2_USER_PRESET_STARTUP, set_default());
   }
 
   void LEDLights2::set_color(const LEDColor &incol) {
     const uint32_t neocolor = LEDColorWhite() == incol
                             ? neo2.Color(NEO2_WHITE)
                             : neo2.Color(incol.r, incol.g, incol.b, incol.w);
     neo2.set_brightness(incol.i);
     neo2.set_color(neocolor);
-  
+
     #if ENABLED(LED_CONTROL_MENU)
       // Don't update the color when OFF
       lights_on = !incol.is_off();
       if (lights_on) color = incol;
     #endif
   }
-    
+
   #if ENABLED(LED_CONTROL_MENU)
     void LEDLights2::toggle() { if (lights_on) set_off(); else update(); }
   #endif
 
 #endif  // NEOPIXEL2_SEPARATE
 
 #endif  // HAS_COLOR_LEDS

commit 5ea7a8373ab03ece1179b45d9205dcf8dd737240
Author: Zachary Annand <baconfixation@gmail.com>
Date:   Sun Sep 6 20:00:24 2020 -0500

    Menu items for Separate NeoPixel (#19280)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 01bca80926..28a6814b43 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -176,15 +176,25 @@ void LEDLights::set_color(const LEDColor &incol
     neo2.init();
     TERN_(NEO2_USER_PRESET_STARTUP, set_default());
   }
 
   void LEDLights2::set_color(const LEDColor &incol) {
     const uint32_t neocolor = LEDColorWhite() == incol
                             ? neo2.Color(NEO2_WHITE)
                             : neo2.Color(incol.r, incol.g, incol.b, incol.w);
     neo2.set_brightness(incol.i);
     neo2.set_color(neocolor);
+  
+    #if ENABLED(LED_CONTROL_MENU)
+      // Don't update the color when OFF
+      lights_on = !incol.is_off();
+      if (lights_on) color = incol;
+    #endif
   }
+    
+  #if ENABLED(LED_CONTROL_MENU)
+    void LEDLights2::toggle() { if (lights_on) set_off(); else update(); }
+  #endif
 
 #endif  // NEOPIXEL2_SEPARATE
 
 #endif  // HAS_COLOR_LEDS

commit 97ec6c1be6f7b3b2e185be9f1637639815acbb1a
Author: Zachary Annand <baconfixation@gmail.com>
Date:   Thu Aug 27 14:18:16 2020 -0500

    Independent Neopixel option (#19115)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index d1c0bfd5e1..01bca80926 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -37,25 +37,22 @@
 #if ENABLED(PCA9632)
   #include "pca9632.h"
 #endif
 
 #if ENABLED(PCA9533)
   #include "pca9533.h"
 #endif
 
 #if ENABLED(LED_COLOR_PRESETS)
   const LEDColor LEDLights::defaultLEDColor = MakeLEDColor(
-    LED_USER_PRESET_RED,
-    LED_USER_PRESET_GREEN,
-    LED_USER_PRESET_BLUE,
-    LED_USER_PRESET_WHITE,
-    LED_USER_PRESET_BRIGHTNESS
+    LED_USER_PRESET_RED, LED_USER_PRESET_GREEN, LED_USER_PRESET_BLUE,
+    LED_USER_PRESET_WHITE, LED_USER_PRESET_BRIGHTNESS
   );
 #endif
 
 #if EITHER(LED_CONTROL_MENU, PRINTER_EVENT_LEDS)
   LEDColor LEDLights::color;
   bool LEDLights::lights_on;
 #endif
 
 LEDLights leds;
 
@@ -110,26 +107,27 @@ void LEDLights::set_color(const LEDColor &incol
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
   #endif
 
   #if EITHER(RGB_LED, RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
-    #define UPDATE_RGBW(C,c) do { if (PWM_PIN(RGB_LED_##C##_PIN)) \
+    #define UPDATE_RGBW(C,c) do {                       \
+      if (PWM_PIN(RGB_LED_##C##_PIN))                   \
         analogWrite(pin_t(RGB_LED_##C##_PIN), incol.c); \
-      else WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); }while(0)
-    UPDATE_RGBW(R,r);
-    UPDATE_RGBW(G,g);
-    UPDATE_RGBW(B,b);
+      else                                              \
+        WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); \
+    }while(0)
+    UPDATE_RGBW(R,r); UPDATE_RGBW(G,g); UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
 
   #endif
 
   // Update I2C LED driver
   TERN_(PCA9632, PCA9632_set_led_color(incol));
   TERN_(PCA9533, PCA9533_set_rgb(incol.r, incol.g, incol.b));
 
@@ -151,11 +149,42 @@ void LEDLights::set_color(const LEDColor &incol
   void LEDLights::update_timeout(const bool power_on) {
     const millis_t ms = millis();
     if (power_on)
       reset_timeout(ms);
     else if (ELAPSED(ms, led_off_time))
       set_off();
   }
 
 #endif
 
-#endif // HAS_COLOR_LEDS
+#if ENABLED(NEOPIXEL2_SEPARATE)
+
+  #if ENABLED(NEO2_COLOR_PRESETS)
+    const LEDColor LEDLights2::defaultLEDColor = MakeLEDColor(
+      NEO2_USER_PRESET_RED, NEO2_USER_PRESET_GREEN, NEO2_USER_PRESET_BLUE,
+      NEO2_USER_PRESET_WHITE, NEO2_USER_PRESET_BRIGHTNESS
+    );
+  #endif
+
+  #if ENABLED(LED_CONTROL_MENU)
+    LEDColor LEDLights2::color;
+    bool LEDLights2::lights_on;
+  #endif
+
+  LEDLights2 leds2;
+
+  void LEDLights2::setup() {
+    neo2.init();
+    TERN_(NEO2_USER_PRESET_STARTUP, set_default());
+  }
+
+  void LEDLights2::set_color(const LEDColor &incol) {
+    const uint32_t neocolor = LEDColorWhite() == incol
+                            ? neo2.Color(NEO2_WHITE)
+                            : neo2.Color(incol.r, incol.g, incol.b, incol.w);
+    neo2.set_brightness(incol.i);
+    neo2.set_color(neocolor);
+  }
+
+#endif  // NEOPIXEL2_SEPARATE
+
+#endif  // HAS_COLOR_LEDS

commit c488070859c1995fe957938b1b6302c4eeef1ea3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Aug 23 23:57:51 2020 -0500

    Minor cleanup w/r/t LEDs

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index eec0cde630..d1c0bfd5e1 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -122,26 +122,23 @@ void LEDLights::set_color(const LEDColor &incol
       else WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); }while(0)
     UPDATE_RGBW(R,r);
     UPDATE_RGBW(G,g);
     UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
 
   #endif
 
-  #if ENABLED(PCA9632)
-    // Update I2C LED driver
-    pca9632_set_led_color(incol);
-  #endif
-
-  TERN_(PCA9533, PCA9533_setColor(incol.r, incol.g, incol.b));
+  // Update I2C LED driver
+  TERN_(PCA9632, PCA9632_set_led_color(incol));
+  TERN_(PCA9533, PCA9533_set_rgb(incol.r, incol.g, incol.b));
 
   #if EITHER(LED_CONTROL_MENU, PRINTER_EVENT_LEDS)
     // Don't update the color when OFF
     lights_on = !incol.is_off();
     if (lights_on) color = incol;
   #endif
 }
 
 #if ENABLED(LED_CONTROL_MENU)
   void LEDLights::toggle() { if (lights_on) set_off(); else update(); }

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 1cd7bc9821..eec0cde630 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 /**
  * leds.cpp - Marlin RGB LED general support
  */
 
 #include "../../inc/MarlinConfig.h"
 
 #if HAS_COLOR_LEDS

commit 6d90d1e1f552dca5e21bc61b676b8e8ce731b280
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 22 16:35:03 2020 -0500

    Apply TERN to compact code (#17619)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 13d60fd5b7..1cd7bc9821 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -61,29 +61,23 @@ LEDLights leds;
 
 void LEDLights::setup() {
   #if EITHER(RGB_LED, RGBW_LED)
     if (PWM_PIN(RGB_LED_R_PIN)) SET_PWM(RGB_LED_R_PIN); else SET_OUTPUT(RGB_LED_R_PIN);
     if (PWM_PIN(RGB_LED_G_PIN)) SET_PWM(RGB_LED_G_PIN); else SET_OUTPUT(RGB_LED_G_PIN);
     if (PWM_PIN(RGB_LED_B_PIN)) SET_PWM(RGB_LED_B_PIN); else SET_OUTPUT(RGB_LED_B_PIN);
     #if ENABLED(RGBW_LED)
       if (PWM_PIN(RGB_LED_W_PIN)) SET_PWM(RGB_LED_W_PIN); else SET_OUTPUT(RGB_LED_W_PIN);
     #endif
   #endif
-  #if ENABLED(NEOPIXEL_LED)
-    neo.init();
-  #endif
-  #if ENABLED(PCA9533)
-    PCA9533_init();
-  #endif
-  #if ENABLED(LED_USER_PRESET_STARTUP)
-    set_default();
-  #endif
+  TERN_(NEOPIXEL_LED, neo.init());
+  TERN_(PCA9533, PCA9533_init());
+  TERN_(LED_USER_PRESET_STARTUP, set_default());
 }
 
 void LEDLights::set_color(const LEDColor &incol
   #if ENABLED(NEOPIXEL_LED)
     , bool isSequence/*=false*/
   #endif
 ) {
 
   #if ENABLED(NEOPIXEL_LED)
 
@@ -133,23 +127,21 @@ void LEDLights::set_color(const LEDColor &incol
       UPDATE_RGBW(W,w);
     #endif
 
   #endif
 
   #if ENABLED(PCA9632)
     // Update I2C LED driver
     pca9632_set_led_color(incol);
   #endif
 
-  #if ENABLED(PCA9533)
-    PCA9533_setColor(incol.r, incol.g, incol.b);
-  #endif
+  TERN_(PCA9533, PCA9533_setColor(incol.r, incol.g, incol.b));
 
   #if EITHER(LED_CONTROL_MENU, PRINTER_EVENT_LEDS)
     // Don't update the color when OFF
     lights_on = !incol.is_off();
     if (lights_on) color = incol;
   #endif
 }
 
 #if ENABLED(LED_CONTROL_MENU)
   void LEDLights::toggle() { if (lights_on) set_off(); else update(); }

commit 293a0997c9a7a84de37018581c1ccc6ef454c298
Author: grauerfuchs <42082416+grauerfuchs@users.noreply.github.com>
Date:   Wed Apr 8 13:53:28 2020 -0400

    Fix / optimize PCA9533 LED (Mightyboard) (#17381)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 995693ffc5..13d60fd5b7 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -32,21 +32,21 @@
 
 #if ENABLED(BLINKM)
   #include "blinkm.h"
 #endif
 
 #if ENABLED(PCA9632)
   #include "pca9632.h"
 #endif
 
 #if ENABLED(PCA9533)
-  #include <SailfishRGB_LED.h>
+  #include "pca9533.h"
 #endif
 
 #if ENABLED(LED_COLOR_PRESETS)
   const LEDColor LEDLights::defaultLEDColor = MakeLEDColor(
     LED_USER_PRESET_RED,
     LED_USER_PRESET_GREEN,
     LED_USER_PRESET_BLUE,
     LED_USER_PRESET_WHITE,
     LED_USER_PRESET_BRIGHTNESS
   );
@@ -65,21 +65,21 @@ void LEDLights::setup() {
     if (PWM_PIN(RGB_LED_G_PIN)) SET_PWM(RGB_LED_G_PIN); else SET_OUTPUT(RGB_LED_G_PIN);
     if (PWM_PIN(RGB_LED_B_PIN)) SET_PWM(RGB_LED_B_PIN); else SET_OUTPUT(RGB_LED_B_PIN);
     #if ENABLED(RGBW_LED)
       if (PWM_PIN(RGB_LED_W_PIN)) SET_PWM(RGB_LED_W_PIN); else SET_OUTPUT(RGB_LED_W_PIN);
     #endif
   #endif
   #if ENABLED(NEOPIXEL_LED)
     neo.init();
   #endif
   #if ENABLED(PCA9533)
-    RGBinit();
+    PCA9533_init();
   #endif
   #if ENABLED(LED_USER_PRESET_STARTUP)
     set_default();
   #endif
 }
 
 void LEDLights::set_color(const LEDColor &incol
   #if ENABLED(NEOPIXEL_LED)
     , bool isSequence/*=false*/
   #endif
@@ -134,21 +134,21 @@ void LEDLights::set_color(const LEDColor &incol
     #endif
 
   #endif
 
   #if ENABLED(PCA9632)
     // Update I2C LED driver
     pca9632_set_led_color(incol);
   #endif
 
   #if ENABLED(PCA9533)
-    RGBsetColor(incol.r, incol.g, incol.b, true);
+    PCA9533_setColor(incol.r, incol.g, incol.b);
   #endif
 
   #if EITHER(LED_CONTROL_MENU, PRINTER_EVENT_LEDS)
     // Don't update the color when OFF
     lights_on = !incol.is_off();
     if (lights_on) color = incol;
   #endif
 }
 
 #if ENABLED(LED_CONTROL_MENU)

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 210aeef092..995693ffc5 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 274934ad81ee6cd9b4f686e55107966cc4e23bd7
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Fri Aug 16 17:34:13 2019 -0600

    Add LULZBOT_TOUCH_UI (#14967)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index e5e952ed6c..210aeef092 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -118,21 +118,21 @@ void LEDLights::set_color(const LEDColor &incol
     blinkm_set_led_color(incol);
 
   #endif
 
   #if EITHER(RGB_LED, RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
     #define UPDATE_RGBW(C,c) do { if (PWM_PIN(RGB_LED_##C##_PIN)) \
         analogWrite(pin_t(RGB_LED_##C##_PIN), incol.c); \
-      else WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); } while(0)
+      else WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); }while(0)
     UPDATE_RGBW(R,r);
     UPDATE_RGBW(G,g);
     UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
 
   #endif
 
   #if ENABLED(PCA9632)

commit e5aa45329305be8ac5e277305d52a449a41bfc98
Author: Tim Moore <tim@youngmoores.com>
Date:   Sat Jul 20 21:14:09 2019 -0700

    Add support for 2 Neopixel strips (#14667)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index a1e033ab08..e5e952ed6c 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -32,21 +32,21 @@
 
 #if ENABLED(BLINKM)
   #include "blinkm.h"
 #endif
 
 #if ENABLED(PCA9632)
   #include "pca9632.h"
 #endif
 
 #if ENABLED(PCA9533)
-  #include "SailfishRGB_LED.h"
+  #include <SailfishRGB_LED.h>
 #endif
 
 #if ENABLED(LED_COLOR_PRESETS)
   const LEDColor LEDLights::defaultLEDColor = MakeLEDColor(
     LED_USER_PRESET_RED,
     LED_USER_PRESET_GREEN,
     LED_USER_PRESET_BLUE,
     LED_USER_PRESET_WHITE,
     LED_USER_PRESET_BRIGHTNESS
   );
@@ -62,56 +62,61 @@ LEDLights leds;
 void LEDLights::setup() {
   #if EITHER(RGB_LED, RGBW_LED)
     if (PWM_PIN(RGB_LED_R_PIN)) SET_PWM(RGB_LED_R_PIN); else SET_OUTPUT(RGB_LED_R_PIN);
     if (PWM_PIN(RGB_LED_G_PIN)) SET_PWM(RGB_LED_G_PIN); else SET_OUTPUT(RGB_LED_G_PIN);
     if (PWM_PIN(RGB_LED_B_PIN)) SET_PWM(RGB_LED_B_PIN); else SET_OUTPUT(RGB_LED_B_PIN);
     #if ENABLED(RGBW_LED)
       if (PWM_PIN(RGB_LED_W_PIN)) SET_PWM(RGB_LED_W_PIN); else SET_OUTPUT(RGB_LED_W_PIN);
     #endif
   #endif
   #if ENABLED(NEOPIXEL_LED)
-    setup_neopixel();
+    neo.init();
   #endif
   #if ENABLED(PCA9533)
     RGBinit();
   #endif
   #if ENABLED(LED_USER_PRESET_STARTUP)
     set_default();
   #endif
 }
 
 void LEDLights::set_color(const LEDColor &incol
   #if ENABLED(NEOPIXEL_LED)
     , bool isSequence/*=false*/
   #endif
 ) {
 
   #if ENABLED(NEOPIXEL_LED)
 
     const uint32_t neocolor = LEDColorWhite() == incol
-                            ? pixels.Color(NEO_WHITE)
-                            : pixels.Color(incol.r, incol.g, incol.b, incol.w);
+                            ? neo.Color(NEO_WHITE)
+                            : neo.Color(incol.r, incol.g, incol.b, incol.w);
     static uint16_t nextLed = 0;
 
     #ifdef NEOPIXEL_BKGD_LED_INDEX
-      if (NEOPIXEL_BKGD_LED_INDEX == nextLed) { nextLed++; return; }
+      if (NEOPIXEL_BKGD_LED_INDEX == nextLed) {
+        if (++nextLed >= neo.pixels()) nextLed = 0;
+        return;
+      }
     #endif
-    pixels.setBrightness(incol.i);
-    if (!isSequence)
-      set_neopixel_color(neocolor);
-    else {
-      pixels.setPixelColor(nextLed, neocolor);
-      pixels.show();
-      if (++nextLed >= pixels.numPixels()) nextLed = 0;
+
+    neo.set_brightness(incol.i);
+
+    if (isSequence) {
+      neo.set_pixel_color(nextLed, neocolor);
+      neo.show();
+      if (++nextLed >= neo.pixels()) nextLed = 0;
       return;
     }
 
+    neo.set_color(neocolor);
+
   #endif
 
   #if ENABLED(BLINKM)
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
   #endif
 
   #if EITHER(RGB_LED, RGBW_LED)

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index de5c6c81cd..a1e033ab08 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -1,16 +1,16 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.

commit 52383633e7062bf5ffd72d9c41c4cf7df05c544c
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Fri Jun 21 08:20:17 2019 +0200

    STM32F1: M43 PINS_DEBUGGING (#14072)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index badab971f6..de5c6c81cd 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -111,21 +111,23 @@ void LEDLights::set_color(const LEDColor &incol
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
   #endif
 
   #if EITHER(RGB_LED, RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
-    #define UPDATE_RGBW(C,c) do{ if (PWM_PIN(RGB_LED_##C##_PIN)) analogWrite(RGB_LED_##C##_PIN, incol.c); else WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); }while(0)
+    #define UPDATE_RGBW(C,c) do { if (PWM_PIN(RGB_LED_##C##_PIN)) \
+        analogWrite(pin_t(RGB_LED_##C##_PIN), incol.c); \
+      else WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); } while(0)
     UPDATE_RGBW(R,r);
     UPDATE_RGBW(G,g);
     UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
 
   #endif
 
   #if ENABLED(PCA9632)

commit 18904c42f6081391c5ffc096c8acf2ce54dc4a34
Author: MastS <51464853+MastS@users.noreply.github.com>
Date:   Thu Jun 13 04:59:39 2019 +0200

    Fysetc LCD backlight timeout (#14265)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 3a9b724216..badab971f6 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -141,11 +141,25 @@ void LEDLights::set_color(const LEDColor &incol
     // Don't update the color when OFF
     lights_on = !incol.is_off();
     if (lights_on) color = incol;
   #endif
 }
 
 #if ENABLED(LED_CONTROL_MENU)
   void LEDLights::toggle() { if (lights_on) set_off(); else update(); }
 #endif
 
+#ifdef LED_BACKLIGHT_TIMEOUT
+
+  millis_t LEDLights::led_off_time; // = 0
+
+  void LEDLights::update_timeout(const bool power_on) {
+    const millis_t ms = millis();
+    if (power_on)
+      reset_timeout(ms);
+    else if (ELAPSED(ms, led_off_time))
+      set_off();
+  }
+
+#endif
+
 #endif // HAS_COLOR_LEDS

commit a3f034b95eb42009f9bc744816ec53b9eb2bc1ef
Author: mikeshub <mikesbaker@gmail.com>
Date:   Mon Jun 10 18:01:42 2019 -0500

    FFCP updates. Update XY soft endstops on tool_change (#14125)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index d54bd9486e..3a9b724216 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -64,20 +64,23 @@ void LEDLights::setup() {
     if (PWM_PIN(RGB_LED_R_PIN)) SET_PWM(RGB_LED_R_PIN); else SET_OUTPUT(RGB_LED_R_PIN);
     if (PWM_PIN(RGB_LED_G_PIN)) SET_PWM(RGB_LED_G_PIN); else SET_OUTPUT(RGB_LED_G_PIN);
     if (PWM_PIN(RGB_LED_B_PIN)) SET_PWM(RGB_LED_B_PIN); else SET_OUTPUT(RGB_LED_B_PIN);
     #if ENABLED(RGBW_LED)
       if (PWM_PIN(RGB_LED_W_PIN)) SET_PWM(RGB_LED_W_PIN); else SET_OUTPUT(RGB_LED_W_PIN);
     #endif
   #endif
   #if ENABLED(NEOPIXEL_LED)
     setup_neopixel();
   #endif
+  #if ENABLED(PCA9533)
+    RGBinit();
+  #endif
   #if ENABLED(LED_USER_PRESET_STARTUP)
     set_default();
   #endif
 }
 
 void LEDLights::set_color(const LEDColor &incol
   #if ENABLED(NEOPIXEL_LED)
     , bool isSequence/*=false*/
   #endif
 ) {

commit 1dad6e754b1fc09e9018e663c7afc5da1794d0ae
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Sat May 18 02:36:37 2019 -0500

    Neopixel background LED option (#14025)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index d490b86e6b..d54bd9486e 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -82,20 +82,23 @@ void LEDLights::set_color(const LEDColor &incol
   #endif
 ) {
 
   #if ENABLED(NEOPIXEL_LED)
 
     const uint32_t neocolor = LEDColorWhite() == incol
                             ? pixels.Color(NEO_WHITE)
                             : pixels.Color(incol.r, incol.g, incol.b, incol.w);
     static uint16_t nextLed = 0;
 
+    #ifdef NEOPIXEL_BKGD_LED_INDEX
+      if (NEOPIXEL_BKGD_LED_INDEX == nextLed) { nextLed++; return; }
+    #endif
     pixels.setBrightness(incol.i);
     if (!isSequence)
       set_neopixel_color(neocolor);
     else {
       pixels.setPixelColor(nextLed, neocolor);
       pixels.show();
       if (++nextLed >= pixels.numPixels()) nextLed = 0;
       return;
     }
 

commit 49cf92dc36424cf828436f32e72263eca39a1cc3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 16 23:43:06 2019 -0500

    Extended condition macros (#13419)
    
    Allow `ENABLED`, `DISABLED`, `PIN_EXISTS`, and `BUTTON_EXISTS` to take multiple arguments. Also add:
    - Alias `ANY(...)` for `!DISABLED(...)`
    - Alias `ANY_PIN(...)` for `PIN_EXISTS(a) || PIN_EXISTS(b) ...`
    - Alias `EITHER(A,B)` for `ANY(...)`
    - Alias `ALL(...)` and `BOTH(A,B)` for `ENABLED(...)`
    - `NONE(...)` for `DISABLED(...)`

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index c8570b345d..d490b86e6b 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -45,29 +45,29 @@
 #if ENABLED(LED_COLOR_PRESETS)
   const LEDColor LEDLights::defaultLEDColor = MakeLEDColor(
     LED_USER_PRESET_RED,
     LED_USER_PRESET_GREEN,
     LED_USER_PRESET_BLUE,
     LED_USER_PRESET_WHITE,
     LED_USER_PRESET_BRIGHTNESS
   );
 #endif
 
-#if ENABLED(LED_CONTROL_MENU) || ENABLED(PRINTER_EVENT_LEDS)
+#if EITHER(LED_CONTROL_MENU, PRINTER_EVENT_LEDS)
   LEDColor LEDLights::color;
   bool LEDLights::lights_on;
 #endif
 
 LEDLights leds;
 
 void LEDLights::setup() {
-  #if ENABLED(RGB_LED) || ENABLED(RGBW_LED)
+  #if EITHER(RGB_LED, RGBW_LED)
     if (PWM_PIN(RGB_LED_R_PIN)) SET_PWM(RGB_LED_R_PIN); else SET_OUTPUT(RGB_LED_R_PIN);
     if (PWM_PIN(RGB_LED_G_PIN)) SET_PWM(RGB_LED_G_PIN); else SET_OUTPUT(RGB_LED_G_PIN);
     if (PWM_PIN(RGB_LED_B_PIN)) SET_PWM(RGB_LED_B_PIN); else SET_OUTPUT(RGB_LED_B_PIN);
     #if ENABLED(RGBW_LED)
       if (PWM_PIN(RGB_LED_W_PIN)) SET_PWM(RGB_LED_W_PIN); else SET_OUTPUT(RGB_LED_W_PIN);
     #endif
   #endif
   #if ENABLED(NEOPIXEL_LED)
     setup_neopixel();
   #endif
@@ -101,21 +101,21 @@ void LEDLights::set_color(const LEDColor &incol
 
   #endif
 
   #if ENABLED(BLINKM)
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
   #endif
 
-  #if ENABLED(RGB_LED) || ENABLED(RGBW_LED)
+  #if EITHER(RGB_LED, RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
     #define UPDATE_RGBW(C,c) do{ if (PWM_PIN(RGB_LED_##C##_PIN)) analogWrite(RGB_LED_##C##_PIN, incol.c); else WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); }while(0)
     UPDATE_RGBW(R,r);
     UPDATE_RGBW(G,g);
     UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
@@ -124,21 +124,21 @@ void LEDLights::set_color(const LEDColor &incol
 
   #if ENABLED(PCA9632)
     // Update I2C LED driver
     pca9632_set_led_color(incol);
   #endif
 
   #if ENABLED(PCA9533)
     RGBsetColor(incol.r, incol.g, incol.b, true);
   #endif
 
-  #if ENABLED(LED_CONTROL_MENU) || ENABLED(PRINTER_EVENT_LEDS)
+  #if EITHER(LED_CONTROL_MENU, PRINTER_EVENT_LEDS)
     // Don't update the color when OFF
     lights_on = !incol.is_off();
     if (lights_on) color = incol;
   #endif
 }
 
 #if ENABLED(LED_CONTROL_MENU)
   void LEDLights::toggle() { if (lights_on) set_off(); else update(); }
 #endif
 

commit d20eab4f8306d737040df6cd986ff27bd1230e7b
Author: Tobias Frost <coldtobi@users.noreply.github.com>
Date:   Sun Mar 17 01:05:59 2019 +0100

    Fix macro in set_color() (#13417)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 93fa808a96..c8570b345d 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -105,21 +105,21 @@ void LEDLights::set_color(const LEDColor &incol
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
   #endif
 
   #if ENABLED(RGB_LED) || ENABLED(RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
-    #define UPDATE_RGBW(C,c) do{ if (PWM_PIN(RGB_LED_##C##_PIN)) analogWrite(RGB_LED_##C##_PIN, incol.r); else WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); }while(0)
+    #define UPDATE_RGBW(C,c) do{ if (PWM_PIN(RGB_LED_##C##_PIN)) analogWrite(RGB_LED_##C##_PIN, incol.c); else WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); }while(0)
     UPDATE_RGBW(R,r);
     UPDATE_RGBW(G,g);
     UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
 
   #endif
 
   #if ENABLED(PCA9632)

commit 67bee06e4371fca6511aae99125337b6e63560d8
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Mar 13 07:21:10 2019 -0500

    No patch needed for non-libmaple analogWrite
    
    See https://github.com/pinchies/Marlin/pull/1#issuecomment-471388743

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 26ced7df4f..93fa808a96 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -105,21 +105,21 @@ void LEDLights::set_color(const LEDColor &incol
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
   #endif
 
   #if ENABLED(RGB_LED) || ENABLED(RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
-    #define UPDATE_RGBW(C,c) do{ if (PWM_PIN(RGB_LED_##C##_PIN)) ANALOG_WRITE(RGB_LED_##C##_PIN, incol.r); else WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); }while(0)
+    #define UPDATE_RGBW(C,c) do{ if (PWM_PIN(RGB_LED_##C##_PIN)) analogWrite(RGB_LED_##C##_PIN, incol.r); else WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); }while(0)
     UPDATE_RGBW(R,r);
     UPDATE_RGBW(G,g);
     UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
       UPDATE_RGBW(W,w);
     #endif
 
   #endif
 
   #if ENABLED(PCA9632)

commit f89b375fb9ca9730a4165ac3bf9f0f9dc100a338
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 13 06:51:15 2019 -0500

    Fixes and improvements for PWM pins (#13383)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index f2b1a965ab..26ced7df4f 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -54,25 +54,25 @@
 
 #if ENABLED(LED_CONTROL_MENU) || ENABLED(PRINTER_EVENT_LEDS)
   LEDColor LEDLights::color;
   bool LEDLights::lights_on;
 #endif
 
 LEDLights leds;
 
 void LEDLights::setup() {
   #if ENABLED(RGB_LED) || ENABLED(RGBW_LED)
-    SET_OUTPUT(RGB_LED_R_PIN);
-    SET_OUTPUT(RGB_LED_G_PIN);
-    SET_OUTPUT(RGB_LED_B_PIN);
+    if (PWM_PIN(RGB_LED_R_PIN)) SET_PWM(RGB_LED_R_PIN); else SET_OUTPUT(RGB_LED_R_PIN);
+    if (PWM_PIN(RGB_LED_G_PIN)) SET_PWM(RGB_LED_G_PIN); else SET_OUTPUT(RGB_LED_G_PIN);
+    if (PWM_PIN(RGB_LED_B_PIN)) SET_PWM(RGB_LED_B_PIN); else SET_OUTPUT(RGB_LED_B_PIN);
     #if ENABLED(RGBW_LED)
-      SET_OUTPUT(RGB_LED_W_PIN);
+      if (PWM_PIN(RGB_LED_W_PIN)) SET_PWM(RGB_LED_W_PIN); else SET_OUTPUT(RGB_LED_W_PIN);
     #endif
   #endif
   #if ENABLED(NEOPIXEL_LED)
     setup_neopixel();
   #endif
   #if ENABLED(LED_USER_PRESET_STARTUP)
     set_default();
   #endif
 }
 
@@ -105,30 +105,26 @@ void LEDLights::set_color(const LEDColor &incol
 
     // This variant uses i2c to send the RGB components to the device.
     blinkm_set_led_color(incol);
 
   #endif
 
   #if ENABLED(RGB_LED) || ENABLED(RGBW_LED)
 
     // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
-    WRITE(RGB_LED_R_PIN, incol.r ? HIGH : LOW);
-    WRITE(RGB_LED_G_PIN, incol.g ? HIGH : LOW);
-    WRITE(RGB_LED_B_PIN, incol.b ? HIGH : LOW);
-    analogWrite(RGB_LED_R_PIN, incol.r);
-    analogWrite(RGB_LED_G_PIN, incol.g);
-    analogWrite(RGB_LED_B_PIN, incol.b);
-
+    #define UPDATE_RGBW(C,c) do{ if (PWM_PIN(RGB_LED_##C##_PIN)) ANALOG_WRITE(RGB_LED_##C##_PIN, incol.r); else WRITE(RGB_LED_##C##_PIN, incol.c ? HIGH : LOW); }while(0)
+    UPDATE_RGBW(R,r);
+    UPDATE_RGBW(G,g);
+    UPDATE_RGBW(B,b);
     #if ENABLED(RGBW_LED)
-      WRITE(RGB_LED_W_PIN, incol.w ? HIGH : LOW);
-      analogWrite(RGB_LED_W_PIN, incol.w);
+      UPDATE_RGBW(W,w);
     #endif
 
   #endif
 
   #if ENABLED(PCA9632)
     // Update I2C LED driver
     pca9632_set_led_color(incol);
   #endif
 
   #if ENABLED(PCA9533)

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index e700de3648..f2b1a965ab 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 7bb5d4bfe85ce05563d6620714949fe6821e0b76
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Thu Jan 17 20:20:26 2019 +0100

    Small LED code reorganization (#12929)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index ae377ecbef..e700de3648 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -53,20 +53,28 @@
 #endif
 
 #if ENABLED(LED_CONTROL_MENU) || ENABLED(PRINTER_EVENT_LEDS)
   LEDColor LEDLights::color;
   bool LEDLights::lights_on;
 #endif
 
 LEDLights leds;
 
 void LEDLights::setup() {
+  #if ENABLED(RGB_LED) || ENABLED(RGBW_LED)
+    SET_OUTPUT(RGB_LED_R_PIN);
+    SET_OUTPUT(RGB_LED_G_PIN);
+    SET_OUTPUT(RGB_LED_B_PIN);
+    #if ENABLED(RGBW_LED)
+      SET_OUTPUT(RGB_LED_W_PIN);
+    #endif
+  #endif
   #if ENABLED(NEOPIXEL_LED)
     setup_neopixel();
   #endif
   #if ENABLED(LED_USER_PRESET_STARTUP)
     set_default();
   #endif
 }
 
 void LEDLights::set_color(const LEDColor &incol
   #if ENABLED(NEOPIXEL_LED)

commit 7fde8d9d1e264c09246b0c7f64fc5c56b3752cd6
Author: mikeshub <mikesbaker@gmail.com>
Date:   Mon Jan 14 14:29:55 2019 -0600

    Add CreatorPro / Makerbot / QIDI / etc and Mightboard RevE support (#12855)
    
    - Fix a bug in MAXxxxx thermocouple temp reporting.
    - Add support for 3-wire HD44780.
    - Add support for PCA9533 RGB driver.
    - Add configuration examples for FlashForge CreatorPro.

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 0694491f0f..ae377ecbef 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -31,20 +31,24 @@
 #include "leds.h"
 
 #if ENABLED(BLINKM)
   #include "blinkm.h"
 #endif
 
 #if ENABLED(PCA9632)
   #include "pca9632.h"
 #endif
 
+#if ENABLED(PCA9533)
+  #include "SailfishRGB_LED.h"
+#endif
+
 #if ENABLED(LED_COLOR_PRESETS)
   const LEDColor LEDLights::defaultLEDColor = MakeLEDColor(
     LED_USER_PRESET_RED,
     LED_USER_PRESET_GREEN,
     LED_USER_PRESET_BLUE,
     LED_USER_PRESET_WHITE,
     LED_USER_PRESET_BRIGHTNESS
   );
 #endif
 
@@ -112,20 +116,24 @@ void LEDLights::set_color(const LEDColor &incol
       analogWrite(RGB_LED_W_PIN, incol.w);
     #endif
 
   #endif
 
   #if ENABLED(PCA9632)
     // Update I2C LED driver
     pca9632_set_led_color(incol);
   #endif
 
+  #if ENABLED(PCA9533)
+    RGBsetColor(incol.r, incol.g, incol.b, true);
+  #endif
+
   #if ENABLED(LED_CONTROL_MENU) || ENABLED(PRINTER_EVENT_LEDS)
     // Don't update the color when OFF
     lights_on = !incol.is_off();
     if (lights_on) color = incol;
   #endif
 }
 
 #if ENABLED(LED_CONTROL_MENU)
   void LEDLights::toggle() { if (lights_on) set_off(); else update(); }
 #endif

commit 323c0883564743409ff335f3578d9ee033163571
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Thu Nov 1 23:44:41 2018 +0100

    Restore LED light color after pid tuning (#12082)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index d3175a0314..0694491f0f 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -41,21 +41,21 @@
 #if ENABLED(LED_COLOR_PRESETS)
   const LEDColor LEDLights::defaultLEDColor = MakeLEDColor(
     LED_USER_PRESET_RED,
     LED_USER_PRESET_GREEN,
     LED_USER_PRESET_BLUE,
     LED_USER_PRESET_WHITE,
     LED_USER_PRESET_BRIGHTNESS
   );
 #endif
 
-#if ENABLED(LED_CONTROL_MENU)
+#if ENABLED(LED_CONTROL_MENU) || ENABLED(PRINTER_EVENT_LEDS)
   LEDColor LEDLights::color;
   bool LEDLights::lights_on;
 #endif
 
 LEDLights leds;
 
 void LEDLights::setup() {
   #if ENABLED(NEOPIXEL_LED)
     setup_neopixel();
   #endif
@@ -65,21 +65,23 @@ void LEDLights::setup() {
 }
 
 void LEDLights::set_color(const LEDColor &incol
   #if ENABLED(NEOPIXEL_LED)
     , bool isSequence/*=false*/
   #endif
 ) {
 
   #if ENABLED(NEOPIXEL_LED)
 
-    const uint32_t neocolor = pixels.Color(incol.r, incol.g, incol.b, incol.w);
+    const uint32_t neocolor = LEDColorWhite() == incol
+                            ? pixels.Color(NEO_WHITE)
+                            : pixels.Color(incol.r, incol.g, incol.b, incol.w);
     static uint16_t nextLed = 0;
 
     pixels.setBrightness(incol.i);
     if (!isSequence)
       set_neopixel_color(neocolor);
     else {
       pixels.setPixelColor(nextLed, neocolor);
       pixels.show();
       if (++nextLed >= pixels.numPixels()) nextLed = 0;
       return;
@@ -110,31 +112,22 @@ void LEDLights::set_color(const LEDColor &incol
       analogWrite(RGB_LED_W_PIN, incol.w);
     #endif
 
   #endif
 
   #if ENABLED(PCA9632)
     // Update I2C LED driver
     pca9632_set_led_color(incol);
   #endif
 
-  #if ENABLED(LED_CONTROL_MENU)
+  #if ENABLED(LED_CONTROL_MENU) || ENABLED(PRINTER_EVENT_LEDS)
     // Don't update the color when OFF
     lights_on = !incol.is_off();
     if (lights_on) color = incol;
   #endif
 }
 
-void LEDLights::set_white() {
-  #if ENABLED(RGB_LED) || ENABLED(RGBW_LED) || ENABLED(BLINKM) || ENABLED(PCA9632)
-    set_color(LEDColorWhite());
-  #endif
-  #if ENABLED(NEOPIXEL_LED)
-    set_neopixel_color(pixels.Color(NEO_WHITE));
-  #endif
-}
-
 #if ENABLED(LED_CONTROL_MENU)
   void LEDLights::toggle() { if (lights_on) set_off(); else update(); }
 #endif
 
 #endif // HAS_COLOR_LEDS

commit e37dd645488ffc4377b6ec818c1e38e55b5903b7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Nov 28 01:07:10 2017 -0600

    Apply LEDColor, language fixes

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 456a6442c9..d3175a0314 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -14,118 +14,127 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 /**
- * Marlin RGB LED general support
+ * leds.cpp - Marlin RGB LED general support
  */
 
 #include "../../inc/MarlinConfig.h"
 
 #if HAS_COLOR_LEDS
 
 #include "leds.h"
 
+#if ENABLED(BLINKM)
+  #include "blinkm.h"
+#endif
+
+#if ENABLED(PCA9632)
+  #include "pca9632.h"
+#endif
+
+#if ENABLED(LED_COLOR_PRESETS)
+  const LEDColor LEDLights::defaultLEDColor = MakeLEDColor(
+    LED_USER_PRESET_RED,
+    LED_USER_PRESET_GREEN,
+    LED_USER_PRESET_BLUE,
+    LED_USER_PRESET_WHITE,
+    LED_USER_PRESET_BRIGHTNESS
+  );
+#endif
+
 #if ENABLED(LED_CONTROL_MENU)
-  #if ENABLED(LED_COLOR_PRESETS)
-uint8_t led_intensity_red = LED_USER_PRESET_RED,
-        led_intensity_green = LED_USER_PRESET_GREEN,
-        led_intensity_blue = LED_USER_PRESET_BLUE
-        #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_LED)
-          , led_intensity_white = LED_USER_PRESET_WHITE
-        #endif
-        #if ENABLED(NEOPIXEL_LED)
-          , led_intensity = NEOPIXEL_BRIGHTNESS
-        #endif
-        ;
-  #else
-    uint8_t led_intensity_red = 255,
-            led_intensity_green = 255,
-            led_intensity_blue = 255
-            #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_LED)
-              , led_intensity_white = 0
-            #endif
-            #if ENABLED(NEOPIXEL_LED)
-              , led_intensity = NEOPIXEL_BRIGHTNESS
-            #endif
-            ;
-  #endif
+  LEDColor LEDLights::color;
+  bool LEDLights::lights_on;
 #endif
 
-void set_led_color(
-  const uint8_t r, const uint8_t g, const uint8_t b
-    #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_LED)
-      , const uint8_t w // = 0
-      #if ENABLED(NEOPIXEL_LED)
-        , const uint8_t p // = NEOPIXEL_BRIGHTNESS
-        , const bool isSequence // = false
-      #endif
-    #endif
+LEDLights leds;
+
+void LEDLights::setup() {
+  #if ENABLED(NEOPIXEL_LED)
+    setup_neopixel();
+  #endif
+  #if ENABLED(LED_USER_PRESET_STARTUP)
+    set_default();
+  #endif
+}
+
+void LEDLights::set_color(const LEDColor &incol
+  #if ENABLED(NEOPIXEL_LED)
+    , bool isSequence/*=false*/
+  #endif
 ) {
 
   #if ENABLED(NEOPIXEL_LED)
-    if ((w == 255) || ((r == 255) && (g == 255) && (b == 255))) {
-      neopixel_set_led_color(NEO_WHITE, p);
+
+    const uint32_t neocolor = pixels.Color(incol.r, incol.g, incol.b, incol.w);
+    static uint16_t nextLed = 0;
+
+    pixels.setBrightness(incol.i);
+    if (!isSequence)
+      set_neopixel_color(neocolor);
+    else {
+      pixels.setPixelColor(nextLed, neocolor);
+      pixels.show();
+      if (++nextLed >= pixels.numPixels()) nextLed = 0;
+      return;
     }
-    else
-      neopixel_set_led_color(r, g, b, w, p);
+
   #endif
 
   #if ENABLED(BLINKM)
-    blinkm_set_led_color(r, g, b); // Use i2c to send the RGB components to the device.
+
+    // This variant uses i2c to send the RGB components to the device.
+    blinkm_set_led_color(incol);
+
   #endif
 
   #if ENABLED(RGB_LED) || ENABLED(RGBW_LED)
-    // This variant uses 3 separate pins for the RGB components.
+
+    // This variant uses 3-4 separate pins for the RGB(W) components.
     // If the pins can do PWM then their intensity will be set.
-    WRITE(RGB_LED_R_PIN, r ? HIGH : LOW);
-    WRITE(RGB_LED_G_PIN, g ? HIGH : LOW);
-    WRITE(RGB_LED_B_PIN, b ? HIGH : LOW);
-    analogWrite(RGB_LED_R_PIN, r);
-    analogWrite(RGB_LED_G_PIN, g);
-    analogWrite(RGB_LED_B_PIN, b);
+    WRITE(RGB_LED_R_PIN, incol.r ? HIGH : LOW);
+    WRITE(RGB_LED_G_PIN, incol.g ? HIGH : LOW);
+    WRITE(RGB_LED_B_PIN, incol.b ? HIGH : LOW);
+    analogWrite(RGB_LED_R_PIN, incol.r);
+    analogWrite(RGB_LED_G_PIN, incol.g);
+    analogWrite(RGB_LED_B_PIN, incol.b);
 
     #if ENABLED(RGBW_LED)
-      WRITE(RGB_LED_W_PIN, w ? HIGH : LOW);
-      analogWrite(RGB_LED_W_PIN, w);
+      WRITE(RGB_LED_W_PIN, incol.w ? HIGH : LOW);
+      analogWrite(RGB_LED_W_PIN, incol.w);
     #endif
+
   #endif
 
   #if ENABLED(PCA9632)
-    pca9632_set_led_color(r, g, b); // Update I2C LED driver
+    // Update I2C LED driver
+    pca9632_set_led_color(incol);
   #endif
 
   #if ENABLED(LED_CONTROL_MENU)
-    if ((r + g + b
-      #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_LED)
-        + w
-      #endif
-    ) >= 3) {
-      led_intensity_red = r;
-      led_intensity_green = g;
-      led_intensity_blue = b;
-      #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_LED)
-        led_intensity_white = w;
-      #endif
-      #if ENABLED(NEOPIXEL_LED)
-        led_intensity = p;
-      #endif
-    }
+    // Don't update the color when OFF
+    lights_on = !incol.is_off();
+    if (lights_on) color = incol;
   #endif
 }
 
-void set_led_white(){
+void LEDLights::set_white() {
+  #if ENABLED(RGB_LED) || ENABLED(RGBW_LED) || ENABLED(BLINKM) || ENABLED(PCA9632)
+    set_color(LEDColorWhite());
+  #endif
   #if ENABLED(NEOPIXEL_LED)
-    neopixel_set_led_color(NEO_WHITE, pixels.getBrightness());
-  #elif (RGBW_LED)
-    set_led_color(0, 0, 0, 255);
-  #else
-    set_led_color(255, 255, 255);
+    set_neopixel_color(pixels.Color(NEO_WHITE));
   #endif
 }
 
+#if ENABLED(LED_CONTROL_MENU)
+  void LEDLights::toggle() { if (lights_on) set_off(); else update(); }
+#endif
+
 #endif // HAS_COLOR_LEDS

commit cf0f78336b7557f7aca81e841c1e6b74c3f1be07
Author: Tannoo <tannoo@msn.com>
Date:   Thu Nov 9 16:39:01 2017 -0700

    New Feature: LED_CONTROL_MENU

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index b412bdc70c..456a6442c9 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -23,46 +23,63 @@
 /**
  * Marlin RGB LED general support
  */
 
 #include "../../inc/MarlinConfig.h"
 
 #if HAS_COLOR_LEDS
 
 #include "leds.h"
 
+#if ENABLED(LED_CONTROL_MENU)
+  #if ENABLED(LED_COLOR_PRESETS)
+uint8_t led_intensity_red = LED_USER_PRESET_RED,
+        led_intensity_green = LED_USER_PRESET_GREEN,
+        led_intensity_blue = LED_USER_PRESET_BLUE
+        #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_LED)
+          , led_intensity_white = LED_USER_PRESET_WHITE
+        #endif
+        #if ENABLED(NEOPIXEL_LED)
+          , led_intensity = NEOPIXEL_BRIGHTNESS
+        #endif
+        ;
+  #else
+    uint8_t led_intensity_red = 255,
+            led_intensity_green = 255,
+            led_intensity_blue = 255
+            #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_LED)
+              , led_intensity_white = 0
+            #endif
+            #if ENABLED(NEOPIXEL_LED)
+              , led_intensity = NEOPIXEL_BRIGHTNESS
+            #endif
+            ;
+  #endif
+#endif
+
 void set_led_color(
   const uint8_t r, const uint8_t g, const uint8_t b
     #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_LED)
       , const uint8_t w // = 0
       #if ENABLED(NEOPIXEL_LED)
         , const uint8_t p // = NEOPIXEL_BRIGHTNESS
         , const bool isSequence // = false
       #endif
     #endif
 ) {
 
   #if ENABLED(NEOPIXEL_LED)
-
-    const uint32_t color = pixels.Color(r, g, b, w);
-    static uint16_t nextLed = 0;
-
-    pixels.setBrightness(p);
-    if (!isSequence)
-      set_neopixel_color(color);
-    else {
-      pixels.setPixelColor(nextLed, color);
-      pixels.show();
-      if (++nextLed >= pixels.numPixels()) nextLed = 0;
-      return;
+    if ((w == 255) || ((r == 255) && (g == 255) && (b == 255))) {
+      neopixel_set_led_color(NEO_WHITE, p);
     }
-
+    else
+      neopixel_set_led_color(r, g, b, w, p);
   #endif
 
   #if ENABLED(BLINKM)
     blinkm_set_led_color(r, g, b); // Use i2c to send the RGB components to the device.
   #endif
 
   #if ENABLED(RGB_LED) || ENABLED(RGBW_LED)
     // This variant uses 3 separate pins for the RGB components.
     // If the pins can do PWM then their intensity will be set.
     WRITE(RGB_LED_R_PIN, r ? HIGH : LOW);
@@ -74,13 +91,41 @@ void set_led_color(
 
     #if ENABLED(RGBW_LED)
       WRITE(RGB_LED_W_PIN, w ? HIGH : LOW);
       analogWrite(RGB_LED_W_PIN, w);
     #endif
   #endif
 
   #if ENABLED(PCA9632)
     pca9632_set_led_color(r, g, b); // Update I2C LED driver
   #endif
+
+  #if ENABLED(LED_CONTROL_MENU)
+    if ((r + g + b
+      #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_LED)
+        + w
+      #endif
+    ) >= 3) {
+      led_intensity_red = r;
+      led_intensity_green = g;
+      led_intensity_blue = b;
+      #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_LED)
+        led_intensity_white = w;
+      #endif
+      #if ENABLED(NEOPIXEL_LED)
+        led_intensity = p;
+      #endif
+    }
+  #endif
+}
+
+void set_led_white(){
+  #if ENABLED(NEOPIXEL_LED)
+    neopixel_set_led_color(NEO_WHITE, pixels.getBrightness());
+  #elif (RGBW_LED)
+    set_led_color(0, 0, 0, 255);
+  #else
+    set_led_color(255, 255, 255);
+  #endif
 }
 
 #endif // HAS_COLOR_LEDS

commit 3ac581eac92d31287580ea6da5357f3d6cd82db5
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 25 15:50:36 2017 -0500

    Neopixel changes for parity with 1.1.x

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 558e2ca8fe..b412bdc70c 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -24,29 +24,45 @@
  * Marlin RGB LED general support
  */
 
 #include "../../inc/MarlinConfig.h"
 
 #if HAS_COLOR_LEDS
 
 #include "leds.h"
 
 void set_led_color(
-  const uint8_t r, const uint8_t g, const uint8_t b , const uint8_t w , const uint8_t p
+  const uint8_t r, const uint8_t g, const uint8_t b
+    #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_LED)
+      , const uint8_t w // = 0
+      #if ENABLED(NEOPIXEL_LED)
+        , const uint8_t p // = NEOPIXEL_BRIGHTNESS
+        , const bool isSequence // = false
+      #endif
+    #endif
 ) {
 
   #if ENABLED(NEOPIXEL_LED)
-    if (w == 255 || (r == 255 && g == 255 && b == 255))
-      neopixel_set_led_color(NEO_WHITE, p);
-    else
-      neopixel_set_led_color(r, g, b, w, p);
-    return;
+
+    const uint32_t color = pixels.Color(r, g, b, w);
+    static uint16_t nextLed = 0;
+
+    pixels.setBrightness(p);
+    if (!isSequence)
+      set_neopixel_color(color);
+    else {
+      pixels.setPixelColor(nextLed, color);
+      pixels.show();
+      if (++nextLed >= pixels.numPixels()) nextLed = 0;
+      return;
+    }
+
   #endif
 
   #if ENABLED(BLINKM)
     blinkm_set_led_color(r, g, b); // Use i2c to send the RGB components to the device.
   #endif
 
   #if ENABLED(RGB_LED) || ENABLED(RGBW_LED)
     // This variant uses 3 separate pins for the RGB components.
     // If the pins can do PWM then their intensity will be set.
     WRITE(RGB_LED_R_PIN, r ? HIGH : LOW);

commit a11e6a1022b8f70be237fad82a9b6ba22b2db7b1
Author: Slawomir Ciunczyk <s.ciunczyk@moye.eu>
Date:   Thu Oct 5 13:45:36 2017 +0200

    Different NEOPIXEL types
    
    Same as #7728 but for 2.0.x,
    Lot of cleanup and remove references in whole code to other "LED files" than leds.h. Now will be much easier to add next drivers/libraries. e.g. FastLED. But bad news, currently FastLED is suporting only RGB devices (no RGBW)

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
index 1f422657fe..558e2ca8fe 100644
--- a/Marlin/src/feature/leds/leds.cpp
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -24,32 +24,29 @@
  * Marlin RGB LED general support
  */
 
 #include "../../inc/MarlinConfig.h"
 
 #if HAS_COLOR_LEDS
 
 #include "leds.h"
 
 void set_led_color(
-  const uint8_t r, const uint8_t g, const uint8_t b
-  #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_RGBW_LED)
-    , const uint8_t w
-    #if ENABLED(NEOPIXEL_RGBW_LED)
-      , bool isSequence
-    #endif
-  #endif
+  const uint8_t r, const uint8_t g, const uint8_t b , const uint8_t w , const uint8_t p
 ) {
 
-  #if ENABLED(NEOPIXEL_RGBW_LED)
-    if (neopixel_set_led_color(r, g, b, w, isSequence))
-      return;
+  #if ENABLED(NEOPIXEL_LED)
+    if (w == 255 || (r == 255 && g == 255 && b == 255))
+      neopixel_set_led_color(NEO_WHITE, p);
+    else
+      neopixel_set_led_color(r, g, b, w, p);
+    return;
   #endif
 
   #if ENABLED(BLINKM)
     blinkm_set_led_color(r, g, b); // Use i2c to send the RGB components to the device.
   #endif
 
   #if ENABLED(RGB_LED) || ENABLED(RGBW_LED)
     // This variant uses 3 separate pins for the RGB components.
     // If the pins can do PWM then their intensity will be set.
     WRITE(RGB_LED_R_PIN, r ? HIGH : LOW);

commit 8fbb833de9309c53abb73dba7d33b76f0068c61a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Sep 8 14:47:47 2017 -0500

    Encapsulate RGB(W) LEDs

diff --git a/Marlin/src/feature/leds/leds.cpp b/Marlin/src/feature/leds/leds.cpp
new file mode 100644
index 0000000000..1f422657fe
--- /dev/null
+++ b/Marlin/src/feature/leds/leds.cpp
@@ -0,0 +1,73 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * Marlin RGB LED general support
+ */
+
+#include "../../inc/MarlinConfig.h"
+
+#if HAS_COLOR_LEDS
+
+#include "leds.h"
+
+void set_led_color(
+  const uint8_t r, const uint8_t g, const uint8_t b
+  #if ENABLED(RGBW_LED) || ENABLED(NEOPIXEL_RGBW_LED)
+    , const uint8_t w
+    #if ENABLED(NEOPIXEL_RGBW_LED)
+      , bool isSequence
+    #endif
+  #endif
+) {
+
+  #if ENABLED(NEOPIXEL_RGBW_LED)
+    if (neopixel_set_led_color(r, g, b, w, isSequence))
+      return;
+  #endif
+
+  #if ENABLED(BLINKM)
+    blinkm_set_led_color(r, g, b); // Use i2c to send the RGB components to the device.
+  #endif
+
+  #if ENABLED(RGB_LED) || ENABLED(RGBW_LED)
+    // This variant uses 3 separate pins for the RGB components.
+    // If the pins can do PWM then their intensity will be set.
+    WRITE(RGB_LED_R_PIN, r ? HIGH : LOW);
+    WRITE(RGB_LED_G_PIN, g ? HIGH : LOW);
+    WRITE(RGB_LED_B_PIN, b ? HIGH : LOW);
+    analogWrite(RGB_LED_R_PIN, r);
+    analogWrite(RGB_LED_G_PIN, g);
+    analogWrite(RGB_LED_B_PIN, b);
+
+    #if ENABLED(RGBW_LED)
+      WRITE(RGB_LED_W_PIN, w ? HIGH : LOW);
+      analogWrite(RGB_LED_W_PIN, w);
+    #endif
+  #endif
+
+  #if ENABLED(PCA9632)
+    pca9632_set_led_color(r, g, b); // Update I2C LED driver
+  #endif
+}
+
+#endif // HAS_COLOR_LEDS
