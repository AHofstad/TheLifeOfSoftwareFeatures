commit 57cee04c899084454791aed925da6bea648d203f
Author: John Lagonikas <39417467+zeleps@users.noreply.github.com>
Date:   Sat Feb 5 03:10:59 2022 +0200

    üêõ Fix dual MAX31865 initialization issues (#23496)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index df07881f01..a6795a78ea 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -159,20 +159,22 @@ void calibrate_delay_loop();
         : [cycles] "+w" (cycles) // output: Restrict to a rw (+) 16 bit register pair (w)
         :                        // input: -
         : "cc"                   // clobbers: We are modifying flags like Carry (cc)
       );
     }
   }
 
   // Delay in microseconds
   #define DELAY_US(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL))
 
+  #define DELAY_CYCLES_VAR DELAY_CYCLES
+
 #elif defined(ESP32) || defined(__PLAT_LINUX__) || defined(__PLAT_NATIVE_SIM__)
 
   // DELAY_CYCLES specified inside platform
 
   // Delay in microseconds
   #define DELAY_US(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL))
 #else
 
   #error "Unsupported MCU architecture"
 

commit 27220f09440e90ed490087273a2357b84a41663c
Author: Jin <3448324+jinhong-@users.noreply.github.com>
Date:   Sun Nov 7 11:53:36 2021 +0800

    üçª Preliminary fix for Max31865 SPI (#22682)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 04df35d88d..df07881f01 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -85,20 +85,26 @@ void calibrate_delay_loop();
     }
   };
   // Runtime version below. There is no way this would run under less than ~TRIP_POINT_FOR_CALLING_FUNCTION cycles
   template <int T>
   struct SmartDelay<false, T> {
     FORCE_INLINE SmartDelay(int v) { DelayCycleFnc(v); }
   };
 
   #define DELAY_CYCLES(X) do { SmartDelay<IS_CONSTEXPR(X), IS_CONSTEXPR(X) ? X : 0> _smrtdly_X(X); } while(0)
 
+  #if GCC_VERSION <= 70000
+    #define DELAY_CYCLES_VAR(X) DelayCycleFnc(X)
+  #else
+    #define DELAY_CYCLES_VAR DELAY_CYCLES
+  #endif
+
   // For delay in microseconds, no smart delay selection is required, directly call the delay function
   // Teensy compiler is too old and does not accept smart delay compile-time / run-time selection correctly
   #define DELAY_US(x) DelayCycleFnc((x) * ((F_CPU) / 1000000UL))
 
 #elif defined(__AVR__)
   FORCE_INLINE static void __delay_up_to_3c(uint8_t cycles) {
     switch (cycles) {
       case 3:
         __asm__ __volatile__(A("RJMP .+0") A("NOP"));
         break;
@@ -193,16 +199,19 @@ void calibrate_delay_loop();
  *    e.g., 165 will be rounded up to 3 cycles (187.5ns) because
  *          it's closer to the requested delay than 2 cycle (125ns).
  */
 
 #ifndef __AVR__
   #undef DELAY_NS_ROUND_DOWN
   #undef DELAY_NS_ROUND_CLOSEST
 #endif
 
 #if ENABLED(DELAY_NS_ROUND_DOWN)
-  #define DELAY_NS(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL) / 1000UL)          // floor
+  #define _NS_TO_CYCLES(x) ( (x) * ((F_CPU) / 1000000UL)        / 1000UL) // floor
 #elif ENABLED(DELAY_NS_ROUND_CLOSEST)
-  #define DELAY_NS(x) DELAY_CYCLES(((x) * ((F_CPU) / 1000000UL) + 500) / 1000UL)  // round
+  #define _NS_TO_CYCLES(x) (((x) * ((F_CPU) / 1000000UL) + 500) / 1000UL) // round
 #else
-  #define DELAY_NS(x) DELAY_CYCLES(((x) * ((F_CPU) / 1000000UL) + 999) / 1000UL)  // "ceil"
+  #define _NS_TO_CYCLES(x) (((x) * ((F_CPU) / 1000000UL) + 999) / 1000UL) // "ceil"
 #endif
+
+#define DELAY_NS(x)         DELAY_CYCLES(_NS_TO_CYCLES(x))
+#define DELAY_NS_VAR(x) DELAY_CYCLES_VAR(_NS_TO_CYCLES(x))

commit 21011eefa818f73d79746f7555fead94f0d3d20a
Author: Chris Pepper <p3p@p3psoft.co.uk>
Date:   Thu Jul 22 01:01:23 2021 +0100

    ‚ú® Simulator HAL and build targets (#22418)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 3174968c1b..04df35d88d 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -153,21 +153,21 @@ void calibrate_delay_loop();
         : [cycles] "+w" (cycles) // output: Restrict to a rw (+) 16 bit register pair (w)
         :                        // input: -
         : "cc"                   // clobbers: We are modifying flags like Carry (cc)
       );
     }
   }
 
   // Delay in microseconds
   #define DELAY_US(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL))
 
-#elif defined(__PLAT_LINUX__) || defined(ESP32)
+#elif defined(ESP32) || defined(__PLAT_LINUX__) || defined(__PLAT_NATIVE_SIM__)
 
   // DELAY_CYCLES specified inside platform
 
   // Delay in microseconds
   #define DELAY_US(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL))
 #else
 
   #error "Unsupported MCU architecture"
 
 #endif

commit cc1145302b31eab07cc51870b5c37f32da1d368c
Author: Skruppy <skruppy@onmars.eu>
Date:   Fri Jul 9 04:55:34 2021 +0200

    üêõ Fix AVR DELAY_US int overflow (#22268)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index f7e01ad25c..3174968c1b 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -90,57 +90,79 @@ void calibrate_delay_loop();
     FORCE_INLINE SmartDelay(int v) { DelayCycleFnc(v); }
   };
 
   #define DELAY_CYCLES(X) do { SmartDelay<IS_CONSTEXPR(X), IS_CONSTEXPR(X) ? X : 0> _smrtdly_X(X); } while(0)
 
   // For delay in microseconds, no smart delay selection is required, directly call the delay function
   // Teensy compiler is too old and does not accept smart delay compile-time / run-time selection correctly
   #define DELAY_US(x) DelayCycleFnc((x) * ((F_CPU) / 1000000UL))
 
 #elif defined(__AVR__)
-
-  #define nop() __asm__ __volatile__("nop;\n\t":::)
-
-  FORCE_INLINE static void __delay_4cycles(uint8_t cy) {
-    __asm__ __volatile__(
-      L("1")
-      A("dec %[cnt]")
-      A("nop")
-      A("brne 1b")
-      : [cnt] "+r"(cy)  // output: +r means input+output
-      :                 // input:
-      : "cc"            // clobbers:
-    );
+  FORCE_INLINE static void __delay_up_to_3c(uint8_t cycles) {
+    switch (cycles) {
+      case 3:
+        __asm__ __volatile__(A("RJMP .+0") A("NOP"));
+        break;
+      case 2:
+        __asm__ __volatile__(A("RJMP .+0"));
+        break;
+      case 1:
+        __asm__ __volatile__(A("NOP"));
+        break;
+    }
   }
 
   // Delay in cycles
-  FORCE_INLINE static void DELAY_CYCLES(uint16_t x) {
-
-    if (__builtin_constant_p(x)) {
-      #define MAXNOPS 4
-
-      if (x <= (MAXNOPS)) {
-        switch (x) { case 4: nop(); case 3: nop(); case 2: nop(); case 1: nop(); }
+  FORCE_INLINE static void DELAY_CYCLES(uint16_t cycles) {
+    if (__builtin_constant_p(cycles)) {
+      if (cycles <= 3) {
+        __delay_up_to_3c(cycles);
+      }
+      else if (cycles == 4) {
+        __delay_up_to_3c(2);
+        __delay_up_to_3c(2);
       }
       else {
-        const uint32_t rem = (x) % (MAXNOPS);
-        switch (rem) { case 3: nop(); case 2: nop(); case 1: nop(); }
-        if ((x = (x) / (MAXNOPS)))
-          __delay_4cycles(x); // if need more then 4 nop loop is more optimal
+        cycles -= 1 + 4; // Compensate for the first LDI (1) and the first round (4)
+        __delay_up_to_3c(cycles % 4);
+
+        cycles /= 4;
+        // The following code burns [1 + 4 * (rounds+1)] cycles
+        uint16_t dummy;
+        __asm__ __volatile__(
+          // "manually" load counter from constants, otherwise the compiler may optimize this part away
+          A("LDI %A[rounds], %[l]") // 1c
+          A("LDI %B[rounds], %[h]") // 1c (compensating the non branching BRCC)
+          L("1")
+          A("SBIW %[rounds], 1")    // 2c
+          A("BRCC 1b")              // 2c when branching, else 1c (end of loop)
+          : // Outputs ...
+          [rounds] "=w" (dummy) // Restrict to a wo (=) 16 bit register pair (w)
+          : // Inputs ...
+          [l] "M" (cycles%256), // Restrict to 0..255 constant (M)
+          [h] "M" (cycles/256)  // Restrict to 0..255 constant (M)
+          :// Clobbers ...
+          "cc"                  // Indicate we are modifying flags like Carry (cc)
+        );
       }
-
-      #undef MAXNOPS
     }
-    else if ((x >>= 2))
-      __delay_4cycles(x);
+    else {
+      __asm__ __volatile__(
+        L("1")
+        A("SBIW %[cycles], 4")   // 2c
+        A("BRCC 1b")             // 2c when branching, else 1c (end of loop)
+        : [cycles] "+w" (cycles) // output: Restrict to a rw (+) 16 bit register pair (w)
+        :                        // input: -
+        : "cc"                   // clobbers: We are modifying flags like Carry (cc)
+      );
+    }
   }
-  #undef nop
 
   // Delay in microseconds
   #define DELAY_US(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL))
 
 #elif defined(__PLAT_LINUX__) || defined(ESP32)
 
   // DELAY_CYCLES specified inside platform
 
   // Delay in microseconds
   #define DELAY_US(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL))

commit 993609b5aae9145d49f42b99de6330c379debbe9
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Mon Apr 5 16:34:31 2021 -0500

    Make DELAY_NS round up on AVR (#21546)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index dc1f158b44..f7e01ad25c 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -143,15 +143,44 @@ void calibrate_delay_loop();
   // DELAY_CYCLES specified inside platform
 
   // Delay in microseconds
   #define DELAY_US(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL))
 #else
 
   #error "Unsupported MCU architecture"
 
 #endif
 
-// Delay in nanoseconds
-#define DELAY_NS(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL) / 1000UL)
-
+/**************************************************************
+ *  Delay in nanoseconds. Requires the F_CPU macro.
+ *  These macros follow avr-libc delay conventions.
+ *
+ * For AVR there are three possible operation modes, due to its
+ * slower clock speeds and thus coarser delay resolution. For
+ * example, when F_CPU = 16000000 the resolution is 62.5ns.
+ *
+ *  Round up (default)
+ *    Round up the delay according to the CPU clock resolution.
+ *    e.g., 100 will give a delay of 2 cycles (125ns).
+ *
+ *  Round down (DELAY_NS_ROUND_DOWN)
+ *    Round down the delay according to the CPU clock resolution.
+ *    e.g., 100 will be rounded down to 1 cycle (62.5ns).
+ *
+ *  Nearest (DELAY_NS_ROUND_CLOSEST)
+ *    Round the delay to the nearest number of clock cycles.
+ *    e.g., 165 will be rounded up to 3 cycles (187.5ns) because
+ *          it's closer to the requested delay than 2 cycle (125ns).
+ */
 
+#ifndef __AVR__
+  #undef DELAY_NS_ROUND_DOWN
+  #undef DELAY_NS_ROUND_CLOSEST
+#endif
 
+#if ENABLED(DELAY_NS_ROUND_DOWN)
+  #define DELAY_NS(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL) / 1000UL)          // floor
+#elif ENABLED(DELAY_NS_ROUND_CLOSEST)
+  #define DELAY_NS(x) DELAY_CYCLES(((x) * ((F_CPU) / 1000000UL) + 500) / 1000UL)  // round
+#else
+  #define DELAY_NS(x) DELAY_CYCLES(((x) * ((F_CPU) / 1000000UL) + 999) / 1000UL)  // "ceil"
+#endif

commit 1c19af2c8fd95ff6da86c9f8eb18166805ea0097
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Sat Feb 6 05:43:51 2021 +0100

    Fix ARM delay function (#20901)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index a48f3f79cf..dc1f158b44 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -14,103 +14,94 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
+#include "../../inc/MarlinConfigPre.h"
+
 /**
  * Busy wait delay cycles routines:
  *
  *  DELAY_CYCLES(count): Delay execution in cycles
  *  DELAY_NS(count): Delay execution in nanoseconds
  *  DELAY_US(count): Delay execution in microseconds
  */
 
 #include "../../core/macros.h"
 
-#if defined(__arm__) || defined(__thumb__)
-
-  #if __CORTEX_M == 7
+void calibrate_delay_loop();
 
-    // Cortex-M3 through M7 can use the cycle counter of the DWT unit
-    // https://www.anthonyvh.com/2017/05/18/cortex_m-cycle_counter/
+#if defined(__arm__) || defined(__thumb__)
 
-    FORCE_INLINE static void enableCycleCounter() {
-      CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
+  // We want to have delay_cycle function with the lowest possible overhead, so we adjust at the function at runtime based on the current CPU best feature
+  typedef void (*DelayImpl)(uint32_t);
+  extern DelayImpl DelayCycleFnc;
 
-      #if __CORTEX_M == 7
-        DWT->LAR = 0xC5ACCE55; // Unlock DWT on the M7
-      #endif
+  // I've measured 36 cycles on my system to call the cycle waiting method, but it shouldn't change much to have a bit more margin, it only consume a bit more flash
+  #define TRIP_POINT_FOR_CALLING_FUNCTION   40
 
-      DWT->CYCCNT = 0;
-      DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
+  // A simple recursive template class that output exactly one 'nop' of code per recursion
+  template <int N> struct NopWriter {
+    FORCE_INLINE static void build() {
+      __asm__ __volatile__("nop");
+      NopWriter<N-1>::build();
     }
+  };
+  // End the loop
+  template <> struct NopWriter<0> { FORCE_INLINE static void build() {} };
+
+  namespace Private {
+    // Split recursing template in 2 different class so we don't reach the maximum template instantiation depth limit
+    template <bool belowTP, int N> struct Helper {
+      FORCE_INLINE static void build() {
+        DelayCycleFnc(N - 2); //  Approximative cost of calling the function (might be off by one or 2 cycles)
+      }
+    };
 
-    FORCE_INLINE volatile uint32_t getCycleCount() { return DWT->CYCCNT; }
+    template <int N> struct Helper<true, N> {
+      FORCE_INLINE static void build() {
+        NopWriter<N - 1>::build();
+      }
+    };
 
-    FORCE_INLINE static void DELAY_CYCLES(const uint32_t x) {
-      const uint32_t endCycles = getCycleCount() + x;
-      while (PENDING(getCycleCount(), endCycles)) {}
-    }
+    template <> struct Helper<true, 0> {
+      FORCE_INLINE static void build() {}
+    };
 
-  #else
-
-    // https://blueprints.launchpad.net/gcc-arm-embedded/+spec/delay-cycles
-
-    #define nop() __asm__ __volatile__("nop;\n\t":::)
-
-    FORCE_INLINE static void __delay_4cycles(uint32_t cy) { // +1 cycle
-      #if ARCH_PIPELINE_RELOAD_CYCLES < 2
-        #define EXTRA_NOP_CYCLES A("nop")
-      #else
-        #define EXTRA_NOP_CYCLES ""
-      #endif
-
-      __asm__ __volatile__(
-        A(".syntax unified") // is to prevent CM0,CM1 non-unified syntax
-        L("1")
-        A("subs %[cnt],#1")
-        EXTRA_NOP_CYCLES
-        A("bne 1b")
-        : [cnt]"+r"(cy)   // output: +r means input+output
-        :                 // input:
-        : "cc"            // clobbers:
-      );
+  }
+  // Select a behavior based on the constexpr'ness of the parameter
+  // If called with a compile-time parameter, then write as many NOP as required to reach the asked cycle count
+  // (there is some tripping point here to start looping when it's more profitable than gruntly executing NOPs)
+  // If not called from a compile-time parameter, fallback to a runtime loop counting version instead
+  template <bool compileTime, int Cycles>
+  struct SmartDelay {
+    FORCE_INLINE SmartDelay(int) {
+      if (Cycles == 0) return;
+      Private::Helper<Cycles < TRIP_POINT_FOR_CALLING_FUNCTION, Cycles>::build();
     }
+  };
+  // Runtime version below. There is no way this would run under less than ~TRIP_POINT_FOR_CALLING_FUNCTION cycles
+  template <int T>
+  struct SmartDelay<false, T> {
+    FORCE_INLINE SmartDelay(int v) { DelayCycleFnc(v); }
+  };
 
-    // Delay in cycles
-    FORCE_INLINE static void DELAY_CYCLES(uint32_t x) {
-
-      if (__builtin_constant_p(x)) {
-        #define MAXNOPS 4
-
-        if (x <= (MAXNOPS)) {
-          switch (x) { case 4: nop(); case 3: nop(); case 2: nop(); case 1: nop(); }
-        }
-        else { // because of +1 cycle inside delay_4cycles
-          const uint32_t rem = (x - 1) % (MAXNOPS);
-          switch (rem) { case 3: nop(); case 2: nop(); case 1: nop(); }
-          if ((x = (x - 1) / (MAXNOPS)))
-            __delay_4cycles(x); // if need more then 4 nop loop is more optimal
-        }
-        #undef MAXNOPS
-      }
-      else if ((x >>= 2))
-        __delay_4cycles(x);
-    }
-    #undef nop
+  #define DELAY_CYCLES(X) do { SmartDelay<IS_CONSTEXPR(X), IS_CONSTEXPR(X) ? X : 0> _smrtdly_X(X); } while(0)
 
-  #endif
+  // For delay in microseconds, no smart delay selection is required, directly call the delay function
+  // Teensy compiler is too old and does not accept smart delay compile-time / run-time selection correctly
+  #define DELAY_US(x) DelayCycleFnc((x) * ((F_CPU) / 1000000UL))
 
 #elif defined(__AVR__)
 
   #define nop() __asm__ __volatile__("nop;\n\t":::)
 
   FORCE_INLINE static void __delay_4cycles(uint8_t cy) {
     __asm__ __volatile__(
       L("1")
       A("dec %[cnt]")
       A("nop")
@@ -137,25 +128,30 @@
           __delay_4cycles(x); // if need more then 4 nop loop is more optimal
       }
 
       #undef MAXNOPS
     }
     else if ((x >>= 2))
       __delay_4cycles(x);
   }
   #undef nop
 
+  // Delay in microseconds
+  #define DELAY_US(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL))
+
 #elif defined(__PLAT_LINUX__) || defined(ESP32)
 
-  // specified inside platform
+  // DELAY_CYCLES specified inside platform
 
+  // Delay in microseconds
+  #define DELAY_US(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL))
 #else
 
   #error "Unsupported MCU architecture"
 
 #endif
 
 // Delay in nanoseconds
 #define DELAY_NS(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL) / 1000UL)
 
-// Delay in microseconds
-#define DELAY_US(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL))
+
+

commit 5917b5cf5cdaaca3b460c2a8e470b838d01b06fe
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 23 19:25:22 2020 -0500

    Fix warning in gcode_D

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index d98e960848..a48f3f79cf 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -148,14 +148,14 @@
 
   // specified inside platform
 
 #else
 
   #error "Unsupported MCU architecture"
 
 #endif
 
 // Delay in nanoseconds
-#define DELAY_NS(x) DELAY_CYCLES( (x) * (F_CPU / 1000000UL) / 1000UL )
+#define DELAY_NS(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL) / 1000UL)
 
 // Delay in microseconds
-#define DELAY_US(x) DELAY_CYCLES( (x) * (F_CPU / 1000000UL) )
+#define DELAY_US(x) DELAY_CYCLES((x) * ((F_CPU) / 1000000UL))

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 5cb68b1503..d98e960848 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -9,41 +9,41 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 /**
  * Busy wait delay cycles routines:
  *
  *  DELAY_CYCLES(count): Delay execution in cycles
  *  DELAY_NS(count): Delay execution in nanoseconds
  *  DELAY_US(count): Delay execution in microseconds
  */
 
 #include "../../core/macros.h"
 
 #if defined(__arm__) || defined(__thumb__)
 
   #if __CORTEX_M == 7
 
     // Cortex-M3 through M7 can use the cycle counter of the DWT unit
-    // http://www.anthonyvh.com/2017/05/18/cortex_m-cycle_counter/
+    // https://www.anthonyvh.com/2017/05/18/cortex_m-cycle_counter/
 
     FORCE_INLINE static void enableCycleCounter() {
       CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 
       #if __CORTEX_M == 7
         DWT->LAR = 0xC5ACCE55; // Unlock DWT on the M7
       #endif
 
       DWT->CYCCNT = 0;
       DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

commit 3473b21710e236669017ddab2650f566499dde64
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 1 09:50:53 2020 -0600

    Move millis_t includes

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 78bf6745ea..5cb68b1503 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -22,21 +22,20 @@
 #pragma once
 
 /**
  * Busy wait delay cycles routines:
  *
  *  DELAY_CYCLES(count): Delay execution in cycles
  *  DELAY_NS(count): Delay execution in nanoseconds
  *  DELAY_US(count): Delay execution in microseconds
  */
 
-#include "../../core/millis_t.h"
 #include "../../core/macros.h"
 
 #if defined(__arm__) || defined(__thumb__)
 
   #if __CORTEX_M == 7
 
     // Cortex-M3 through M7 can use the cycle counter of the DWT unit
     // http://www.anthonyvh.com/2017/05/18/cortex_m-cycle_counter/
 
     FORCE_INLINE static void enableCycleCounter() {

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 4ba14d9681..78bf6745ea 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 2b9eb4437b4a1192d25f7351ff1d67de2970db17
Author: felixstorm <felix.storm@glueckkanja.com>
Date:   Thu Jan 16 12:57:14 2020 +0100

    ESP32 HAL: Fix random pauses during prints (#16548)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index b1dafbb0f5..4ba14d9681 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -138,35 +138,21 @@
           __delay_4cycles(x); // if need more then 4 nop loop is more optimal
       }
 
       #undef MAXNOPS
     }
     else if ((x >>= 2))
       __delay_4cycles(x);
   }
   #undef nop
 
-#elif defined(ESP32)
-
-  FORCE_INLINE static void DELAY_CYCLES(uint32_t x) {
-    unsigned long ccount, stop;
-
-    __asm__ __volatile__ ( "rsr     %0, ccount" : "=a" (ccount) );
-
-    stop = ccount + x; // This can overflow
-
-    while (ccount < stop) { // This doesn't deal with overflows
-      __asm__ __volatile__ ( "rsr     %0, ccount" : "=a" (ccount) );
-    }
-  }
-
-#elif defined(__PLAT_LINUX__)
+#elif defined(__PLAT_LINUX__) || defined(ESP32)
 
   // specified inside platform
 
 #else
 
   #error "Unsupported MCU architecture"
 
 #endif
 
 // Delay in nanoseconds

commit ed8f1ca9cf26f4090e874f7fadf9f44a4bc332c6
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Nov 2 04:12:10 2019 -0500

    Revert Cortex delay for now

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 4433134291..b1dafbb0f5 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -27,21 +27,21 @@
  *  DELAY_CYCLES(count): Delay execution in cycles
  *  DELAY_NS(count): Delay execution in nanoseconds
  *  DELAY_US(count): Delay execution in microseconds
  */
 
 #include "../../core/millis_t.h"
 #include "../../core/macros.h"
 
 #if defined(__arm__) || defined(__thumb__)
 
-  #if WITHIN(__CORTEX_M, 3, 7)
+  #if __CORTEX_M == 7
 
     // Cortex-M3 through M7 can use the cycle counter of the DWT unit
     // http://www.anthonyvh.com/2017/05/18/cortex_m-cycle_counter/
 
     FORCE_INLINE static void enableCycleCounter() {
       CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 
       #if __CORTEX_M == 7
         DWT->LAR = 0xC5ACCE55; // Unlock DWT on the M7
       #endif

commit f0d952d33ac7b2fb491fc356ce1d399f4460d5e4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Nov 1 22:07:51 2019 -0500

    Cortex M3-M7 can use DWT->CYCCNT (#15762)
    
    Suggested by Alex Kenis at https://youtu.be/ZfyPcdhQnAA?t=502

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index b3f8f246fb..4433134291 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -27,30 +27,31 @@
  *  DELAY_CYCLES(count): Delay execution in cycles
  *  DELAY_NS(count): Delay execution in nanoseconds
  *  DELAY_US(count): Delay execution in microseconds
  */
 
 #include "../../core/millis_t.h"
 #include "../../core/macros.h"
 
 #if defined(__arm__) || defined(__thumb__)
 
-  #if __CORTEX_M == 7
+  #if WITHIN(__CORTEX_M, 3, 7)
 
-    // Cortex-M7 can use the cycle counter of the DWT unit
+    // Cortex-M3 through M7 can use the cycle counter of the DWT unit
     // http://www.anthonyvh.com/2017/05/18/cortex_m-cycle_counter/
 
     FORCE_INLINE static void enableCycleCounter() {
       CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 
-      // Unlock DWT.
-      DWT->LAR = 0xC5ACCE55;
+      #if __CORTEX_M == 7
+        DWT->LAR = 0xC5ACCE55; // Unlock DWT on the M7
+      #endif
 
       DWT->CYCCNT = 0;
       DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
     }
 
     FORCE_INLINE volatile uint32_t getCycleCount() { return DWT->CYCCNT; }
 
     FORCE_INLINE static void DELAY_CYCLES(const uint32_t x) {
       const uint32_t endCycles = getCycleCount() + x;
       while (PENDING(getCycleCount(), endCycles)) {}

commit e3fd0519b323182a3d096eca8209c4eaf56b6802
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Sep 30 21:44:07 2019 -0500

    Reduce need for UNUSED

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 1c2ee47c29..b3f8f246fb 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -46,21 +46,21 @@
       DWT->LAR = 0xC5ACCE55;
 
       DWT->CYCCNT = 0;
       DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
     }
 
     FORCE_INLINE volatile uint32_t getCycleCount() { return DWT->CYCCNT; }
 
     FORCE_INLINE static void DELAY_CYCLES(const uint32_t x) {
       const uint32_t endCycles = getCycleCount() + x;
-      while (PENDING(getCycleCount(), endCycles)) { }
+      while (PENDING(getCycleCount(), endCycles)) {}
     }
 
   #else
 
     // https://blueprints.launchpad.net/gcc-arm-embedded/+spec/delay-cycles
 
     #define nop() __asm__ __volatile__("nop;\n\t":::)
 
     FORCE_INLINE static void __delay_4cycles(uint32_t cy) { // +1 cycle
       #if ARCH_PIPELINE_RELOAD_CYCLES < 2

commit c353eaa14630eb9d74f185e2b6aae1630ca21525
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 17 18:16:28 2019 -0500

    Misc changes from struct refactor (#15289)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 1bcfb9e8a6..1c2ee47c29 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -22,22 +22,22 @@
 #pragma once
 
 /**
  * Busy wait delay cycles routines:
  *
  *  DELAY_CYCLES(count): Delay execution in cycles
  *  DELAY_NS(count): Delay execution in nanoseconds
  *  DELAY_US(count): Delay execution in microseconds
  */
 
-#include "../../core/macros.h"
 #include "../../core/millis_t.h"
+#include "../../core/macros.h"
 
 #if defined(__arm__) || defined(__thumb__)
 
   #if __CORTEX_M == 7
 
     // Cortex-M7 can use the cycle counter of the DWT unit
     // http://www.anthonyvh.com/2017/05/18/cortex_m-cycle_counter/
 
     FORCE_INLINE static void enableCycleCounter() {
       CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index bab7d7471e..1bcfb9e8a6 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -1,16 +1,16 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.

commit 15aa932aa6becbcb917cd0bd547dcc5ae0068b82
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Feb 22 19:09:10 2019 -0600

    HAL for Linux (#13146)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 43833cff0f..bab7d7471e 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -151,20 +151,24 @@
 
     __asm__ __volatile__ ( "rsr     %0, ccount" : "=a" (ccount) );
 
     stop = ccount + x; // This can overflow
 
     while (ccount < stop) { // This doesn't deal with overflows
       __asm__ __volatile__ ( "rsr     %0, ccount" : "=a" (ccount) );
     }
   }
 
+#elif defined(__PLAT_LINUX__)
+
+  // specified inside platform
+
 #else
 
   #error "Unsupported MCU architecture"
 
 #endif
 
 // Delay in nanoseconds
 #define DELAY_NS(x) DELAY_CYCLES( (x) * (F_CPU / 1000000UL) / 1000UL )
 
 // Delay in microseconds

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 9e25cbd511..43833cff0f 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit cafabf20559a8c10faad02a6ace403e4c956714c
Author: Nils Hasenbanck <hasenbanck@users.noreply.github.com>
Date:   Thu Nov 1 22:11:51 2018 +0100

    Implement DELAY_NS with CYCCNT on Cortex-M7 (#12283)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 4cdd479210..9e25cbd511 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -12,80 +12,105 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
+#pragma once
 
 /**
  * Busy wait delay cycles routines:
  *
  *  DELAY_CYCLES(count): Delay execution in cycles
  *  DELAY_NS(count): Delay execution in nanoseconds
  *  DELAY_US(count): Delay execution in microseconds
  */
 
-#ifndef MARLIN_DELAY_H
-#define MARLIN_DELAY_H
-
 #include "../../core/macros.h"
+#include "../../core/millis_t.h"
 
 #if defined(__arm__) || defined(__thumb__)
 
-  // https://blueprints.launchpad.net/gcc-arm-embedded/+spec/delay-cycles
+  #if __CORTEX_M == 7
 
-  #define nop() __asm__ __volatile__("nop;\n\t":::)
+    // Cortex-M7 can use the cycle counter of the DWT unit
+    // http://www.anthonyvh.com/2017/05/18/cortex_m-cycle_counter/
 
-  FORCE_INLINE static void __delay_4cycles(uint32_t cy) { // +1 cycle
-    #if ARCH_PIPELINE_RELOAD_CYCLES < 2
-      #define EXTRA_NOP_CYCLES A("nop")
-    #else
-      #define EXTRA_NOP_CYCLES ""
-    #endif
+    FORCE_INLINE static void enableCycleCounter() {
+      CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 
-    __asm__ __volatile__(
-      A(".syntax unified") // is to prevent CM0,CM1 non-unified syntax
-      L("1")
-      A("subs %[cnt],#1")
-      EXTRA_NOP_CYCLES
-      A("bne 1b")
-      : [cnt]"+r"(cy)   // output: +r means input+output
-      :                 // input:
-      : "cc"            // clobbers:
-    );
-  }
+      // Unlock DWT.
+      DWT->LAR = 0xC5ACCE55;
 
-  // Delay in cycles
-  FORCE_INLINE static void DELAY_CYCLES(uint32_t x) {
+      DWT->CYCCNT = 0;
+      DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
+    }
 
-    if (__builtin_constant_p(x)) {
-      #define MAXNOPS 4
+    FORCE_INLINE volatile uint32_t getCycleCount() { return DWT->CYCCNT; }
 
-      if (x <= (MAXNOPS)) {
-        switch (x) { case 4: nop(); case 3: nop(); case 2: nop(); case 1: nop(); }
-      }
-      else { // because of +1 cycle inside delay_4cycles
-        const uint32_t rem = (x - 1) % (MAXNOPS);
-        switch (rem) { case 3: nop(); case 2: nop(); case 1: nop(); }
-        if ((x = (x - 1) / (MAXNOPS)))
-          __delay_4cycles(x); // if need more then 4 nop loop is more optimal
+    FORCE_INLINE static void DELAY_CYCLES(const uint32_t x) {
+      const uint32_t endCycles = getCycleCount() + x;
+      while (PENDING(getCycleCount(), endCycles)) { }
+    }
+
+  #else
+
+    // https://blueprints.launchpad.net/gcc-arm-embedded/+spec/delay-cycles
+
+    #define nop() __asm__ __volatile__("nop;\n\t":::)
+
+    FORCE_INLINE static void __delay_4cycles(uint32_t cy) { // +1 cycle
+      #if ARCH_PIPELINE_RELOAD_CYCLES < 2
+        #define EXTRA_NOP_CYCLES A("nop")
+      #else
+        #define EXTRA_NOP_CYCLES ""
+      #endif
+
+      __asm__ __volatile__(
+        A(".syntax unified") // is to prevent CM0,CM1 non-unified syntax
+        L("1")
+        A("subs %[cnt],#1")
+        EXTRA_NOP_CYCLES
+        A("bne 1b")
+        : [cnt]"+r"(cy)   // output: +r means input+output
+        :                 // input:
+        : "cc"            // clobbers:
+      );
+    }
+
+    // Delay in cycles
+    FORCE_INLINE static void DELAY_CYCLES(uint32_t x) {
+
+      if (__builtin_constant_p(x)) {
+        #define MAXNOPS 4
+
+        if (x <= (MAXNOPS)) {
+          switch (x) { case 4: nop(); case 3: nop(); case 2: nop(); case 1: nop(); }
+        }
+        else { // because of +1 cycle inside delay_4cycles
+          const uint32_t rem = (x - 1) % (MAXNOPS);
+          switch (rem) { case 3: nop(); case 2: nop(); case 1: nop(); }
+          if ((x = (x - 1) / (MAXNOPS)))
+            __delay_4cycles(x); // if need more then 4 nop loop is more optimal
+        }
+        #undef MAXNOPS
       }
-      #undef MAXNOPS
+      else if ((x >>= 2))
+        __delay_4cycles(x);
     }
-    else if ((x >>= 2))
-      __delay_4cycles(x);
-  }
-  #undef nop
+    #undef nop
+
+  #endif
 
 #elif defined(__AVR__)
 
   #define nop() __asm__ __volatile__("nop;\n\t":::)
 
   FORCE_INLINE static void __delay_4cycles(uint8_t cy) {
     __asm__ __volatile__(
       L("1")
       A("dec %[cnt]")
       A("nop")
@@ -137,12 +162,10 @@
 
   #error "Unsupported MCU architecture"
 
 #endif
 
 // Delay in nanoseconds
 #define DELAY_NS(x) DELAY_CYCLES( (x) * (F_CPU / 1000000UL) / 1000UL )
 
 // Delay in microseconds
 #define DELAY_US(x) DELAY_CYCLES( (x) * (F_CPU / 1000000UL) )
-
-#endif // MARLIN_DELAY_H

commit d015f746cc8f8e2dd930d7c87165825993743351
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 26 03:53:06 2018 -0500

    Fix some compile warnings (#12220)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 04771a2e03..4cdd479210 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -133,16 +133,16 @@
     }
   }
 
 #else
 
   #error "Unsupported MCU architecture"
 
 #endif
 
 // Delay in nanoseconds
-#define DELAY_NS(x) DELAY_CYCLES( (x) * (F_CPU/1000000L) / 1000L )
+#define DELAY_NS(x) DELAY_CYCLES( (x) * (F_CPU / 1000000UL) / 1000UL )
 
 // Delay in microseconds
-#define DELAY_US(x) DELAY_CYCLES( (x) * (F_CPU/1000000L) )
+#define DELAY_US(x) DELAY_CYCLES( (x) * (F_CPU / 1000000UL) )
 
 #endif // MARLIN_DELAY_H

commit 00d24a8219483c51057e4276c9618fbb051df606
Author: ghent360 <ghent360@users.noreply.github.com>
Date:   Sat Aug 18 20:50:11 2018 -0700

    Don't call __delay_4cycles for 0 cycle delay - takes a really long time. (#11586)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
index 9b5f1aa123..04771a2e03 100644
--- a/Marlin/src/HAL/shared/Delay.h
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -68,22 +68,22 @@
         switch (x) { case 4: nop(); case 3: nop(); case 2: nop(); case 1: nop(); }
       }
       else { // because of +1 cycle inside delay_4cycles
         const uint32_t rem = (x - 1) % (MAXNOPS);
         switch (rem) { case 3: nop(); case 2: nop(); case 1: nop(); }
         if ((x = (x - 1) / (MAXNOPS)))
           __delay_4cycles(x); // if need more then 4 nop loop is more optimal
       }
       #undef MAXNOPS
     }
-    else
-      __delay_4cycles(x / 4);
+    else if ((x >>= 2))
+      __delay_4cycles(x);
   }
   #undef nop
 
 #elif defined(__AVR__)
 
   #define nop() __asm__ __volatile__("nop;\n\t":::)
 
   FORCE_INLINE static void __delay_4cycles(uint8_t cy) {
     __asm__ __volatile__(
       L("1")
@@ -107,22 +107,22 @@
       }
       else {
         const uint32_t rem = (x) % (MAXNOPS);
         switch (rem) { case 3: nop(); case 2: nop(); case 1: nop(); }
         if ((x = (x) / (MAXNOPS)))
           __delay_4cycles(x); // if need more then 4 nop loop is more optimal
       }
 
       #undef MAXNOPS
     }
-    else
-      __delay_4cycles(x / 4);
+    else if ((x >>= 2))
+      __delay_4cycles(x);
   }
   #undef nop
 
 #elif defined(ESP32)
 
   FORCE_INLINE static void DELAY_CYCLES(uint32_t x) {
     unsigned long ccount, stop;
 
     __asm__ __volatile__ ( "rsr     %0, ccount" : "=a" (ccount) );
 

commit c64199941e058abb18a06be90002f5f03009347b
Author: Dave Johnson <davejohnson3000@gmail.com>
Date:   Tue Aug 14 01:28:52 2018 -0700

    Compile only selected PIO environment (#11519)

diff --git a/Marlin/src/HAL/shared/Delay.h b/Marlin/src/HAL/shared/Delay.h
new file mode 100644
index 0000000000..9b5f1aa123
--- /dev/null
+++ b/Marlin/src/HAL/shared/Delay.h
@@ -0,0 +1,148 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * Busy wait delay cycles routines:
+ *
+ *  DELAY_CYCLES(count): Delay execution in cycles
+ *  DELAY_NS(count): Delay execution in nanoseconds
+ *  DELAY_US(count): Delay execution in microseconds
+ */
+
+#ifndef MARLIN_DELAY_H
+#define MARLIN_DELAY_H
+
+#include "../../core/macros.h"
+
+#if defined(__arm__) || defined(__thumb__)
+
+  // https://blueprints.launchpad.net/gcc-arm-embedded/+spec/delay-cycles
+
+  #define nop() __asm__ __volatile__("nop;\n\t":::)
+
+  FORCE_INLINE static void __delay_4cycles(uint32_t cy) { // +1 cycle
+    #if ARCH_PIPELINE_RELOAD_CYCLES < 2
+      #define EXTRA_NOP_CYCLES A("nop")
+    #else
+      #define EXTRA_NOP_CYCLES ""
+    #endif
+
+    __asm__ __volatile__(
+      A(".syntax unified") // is to prevent CM0,CM1 non-unified syntax
+      L("1")
+      A("subs %[cnt],#1")
+      EXTRA_NOP_CYCLES
+      A("bne 1b")
+      : [cnt]"+r"(cy)   // output: +r means input+output
+      :                 // input:
+      : "cc"            // clobbers:
+    );
+  }
+
+  // Delay in cycles
+  FORCE_INLINE static void DELAY_CYCLES(uint32_t x) {
+
+    if (__builtin_constant_p(x)) {
+      #define MAXNOPS 4
+
+      if (x <= (MAXNOPS)) {
+        switch (x) { case 4: nop(); case 3: nop(); case 2: nop(); case 1: nop(); }
+      }
+      else { // because of +1 cycle inside delay_4cycles
+        const uint32_t rem = (x - 1) % (MAXNOPS);
+        switch (rem) { case 3: nop(); case 2: nop(); case 1: nop(); }
+        if ((x = (x - 1) / (MAXNOPS)))
+          __delay_4cycles(x); // if need more then 4 nop loop is more optimal
+      }
+      #undef MAXNOPS
+    }
+    else
+      __delay_4cycles(x / 4);
+  }
+  #undef nop
+
+#elif defined(__AVR__)
+
+  #define nop() __asm__ __volatile__("nop;\n\t":::)
+
+  FORCE_INLINE static void __delay_4cycles(uint8_t cy) {
+    __asm__ __volatile__(
+      L("1")
+      A("dec %[cnt]")
+      A("nop")
+      A("brne 1b")
+      : [cnt] "+r"(cy)  // output: +r means input+output
+      :                 // input:
+      : "cc"            // clobbers:
+    );
+  }
+
+  // Delay in cycles
+  FORCE_INLINE static void DELAY_CYCLES(uint16_t x) {
+
+    if (__builtin_constant_p(x)) {
+      #define MAXNOPS 4
+
+      if (x <= (MAXNOPS)) {
+        switch (x) { case 4: nop(); case 3: nop(); case 2: nop(); case 1: nop(); }
+      }
+      else {
+        const uint32_t rem = (x) % (MAXNOPS);
+        switch (rem) { case 3: nop(); case 2: nop(); case 1: nop(); }
+        if ((x = (x) / (MAXNOPS)))
+          __delay_4cycles(x); // if need more then 4 nop loop is more optimal
+      }
+
+      #undef MAXNOPS
+    }
+    else
+      __delay_4cycles(x / 4);
+  }
+  #undef nop
+
+#elif defined(ESP32)
+
+  FORCE_INLINE static void DELAY_CYCLES(uint32_t x) {
+    unsigned long ccount, stop;
+
+    __asm__ __volatile__ ( "rsr     %0, ccount" : "=a" (ccount) );
+
+    stop = ccount + x; // This can overflow
+
+    while (ccount < stop) { // This doesn't deal with overflows
+      __asm__ __volatile__ ( "rsr     %0, ccount" : "=a" (ccount) );
+    }
+  }
+
+#else
+
+  #error "Unsupported MCU architecture"
+
+#endif
+
+// Delay in nanoseconds
+#define DELAY_NS(x) DELAY_CYCLES( (x) * (F_CPU/1000000L) / 1000L )
+
+// Delay in microseconds
+#define DELAY_US(x) DELAY_CYCLES( (x) * (F_CPU/1000000L) )
+
+#endif // MARLIN_DELAY_H
