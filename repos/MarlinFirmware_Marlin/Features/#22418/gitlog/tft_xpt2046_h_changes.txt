commit 9a12f06f199e86ca18ff2d40119805330c4ff6c6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Nov 25 21:17:18 2023 -0600

    üé® Update file headers
    
    Marlin is collectively ¬© by the Organization, with individual contributors having ¬© on their original work as documented in the commit history.

diff --git a/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h b/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
index 43a0791e0a..d37f74c774 100644
--- a/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
+++ b/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
@@ -1,14 +1,17 @@
 /**
  * Marlin 3D Printer Firmware
  * Copyright (c) 2021 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *

commit 376673df284333ed499dd6a1e8ab52c317d2af73
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Nov 20 00:53:35 2023 -0600

    üö∏ Minor touch calibration improvement (#26445)

diff --git a/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h b/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
index c546646d16..43a0791e0a 100644
--- a/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
+++ b/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
@@ -69,12 +69,12 @@ private:
   #endif
   static uint16_t softwareIO(uint16_t data);
   static uint16_t IO(uint16_t data = 0);
 
 public:
   #if ENABLED(TOUCH_BUTTONS_HW_SPI)
     static SPIClass SPIx;
   #endif
 
   static void init();
-  static bool getRawPoint(int16_t *x, int16_t *y);
+  static bool getRawPoint(int16_t * const x, int16_t * const y);
 };

commit c3694f1c038fa20ad749118b0a1c7aa88e3dd5f2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jun 14 17:24:50 2023 -0500

    üé® Lowercase methods, functions, data members (#25939)
    
    For: TFT, DGUS, MarlinUI, Anycubic, JyersUI, CrealityUI

diff --git a/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h b/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
index 4e999f88ff..c546646d16 100644
--- a/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
+++ b/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
@@ -55,26 +55,26 @@ enum XPTCoordinate : uint8_t {
   #define XPT2046_Z1_THRESHOLD 10
 #endif
 
 class XPT2046 {
 private:
   static bool isBusy() { return false; }
 
   static uint16_t getRawData(const XPTCoordinate coordinate);
   static bool isTouched();
 
-  static void DataTransferBegin();
-  static void DataTransferEnd();
+  static void dataTransferBegin();
+  static void dataTransferEnd();
   #if ENABLED(TOUCH_BUTTONS_HW_SPI)
-    static uint16_t HardwareIO(uint16_t data);
+    static uint16_t hardwareIO(uint16_t data);
   #endif
-  static uint16_t SoftwareIO(uint16_t data);
+  static uint16_t softwareIO(uint16_t data);
   static uint16_t IO(uint16_t data = 0);
 
 public:
   #if ENABLED(TOUCH_BUTTONS_HW_SPI)
     static SPIClass SPIx;
   #endif
 
-  static void Init();
+  static void init();
   static bool getRawPoint(int16_t *x, int16_t *y);
 };

commit 34f3e5bd88246516a1779c194c2996bcf845a499
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Aug 20 06:41:00 2022 -0500

    üé® Some automated cleanup

diff --git a/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h b/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
index b131853643..4e999f88ff 100644
--- a/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
+++ b/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
@@ -44,21 +44,21 @@
 #define XPT2046_SER_MODE        0x04
 #define XPT2046_CONTROL         0x80
 
 enum XPTCoordinate : uint8_t {
   XPT2046_X  = 0x10 | XPT2046_CONTROL | XPT2046_DFR_MODE,
   XPT2046_Y  = 0x50 | XPT2046_CONTROL | XPT2046_DFR_MODE,
   XPT2046_Z1 = 0x30 | XPT2046_CONTROL | XPT2046_DFR_MODE,
   XPT2046_Z2 = 0x40 | XPT2046_CONTROL | XPT2046_DFR_MODE,
 };
 
-#if !defined(XPT2046_Z1_THRESHOLD)
+#ifndef XPT2046_Z1_THRESHOLD
   #define XPT2046_Z1_THRESHOLD 10
 #endif
 
 class XPT2046 {
 private:
   static bool isBusy() { return false; }
 
   static uint16_t getRawData(const XPTCoordinate coordinate);
   static bool isTouched();
 

commit 6fb2d8a25f096d084348a6f6930f515d947474d4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Dec 28 02:57:24 2021 -0600

    üßë‚Äçüíª Remove extraneous 'inline' hints

diff --git a/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h b/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
index 9ef1816c7b..b131853643 100644
--- a/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
+++ b/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
@@ -55,22 +55,22 @@ enum XPTCoordinate : uint8_t {
   #define XPT2046_Z1_THRESHOLD 10
 #endif
 
 class XPT2046 {
 private:
   static bool isBusy() { return false; }
 
   static uint16_t getRawData(const XPTCoordinate coordinate);
   static bool isTouched();
 
-  static inline void DataTransferBegin();
-  static inline void DataTransferEnd();
+  static void DataTransferBegin();
+  static void DataTransferEnd();
   #if ENABLED(TOUCH_BUTTONS_HW_SPI)
     static uint16_t HardwareIO(uint16_t data);
   #endif
   static uint16_t SoftwareIO(uint16_t data);
   static uint16_t IO(uint16_t data = 0);
 
 public:
   #if ENABLED(TOUCH_BUTTONS_HW_SPI)
     static SPIClass SPIx;
   #endif

commit 21011eefa818f73d79746f7555fead94f0d3d20a
Author: Chris Pepper <p3p@p3psoft.co.uk>
Date:   Thu Jul 22 01:01:23 2021 +0100

    ‚ú® Simulator HAL and build targets (#22418)

diff --git a/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h b/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
new file mode 100644
index 0000000000..9ef1816c7b
--- /dev/null
+++ b/Marlin/src/HAL/NATIVE_SIM/tft/xpt2046.h
@@ -0,0 +1,80 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2021 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+#include "../../../inc/MarlinConfig.h"
+
+#if ENABLED(TOUCH_BUTTONS_HW_SPI)
+  #include <SPI.h>
+#endif
+
+#ifndef TOUCH_MISO_PIN
+  #define TOUCH_MISO_PIN SD_MISO_PIN
+#endif
+#ifndef TOUCH_MOSI_PIN
+  #define TOUCH_MOSI_PIN SD_MOSI_PIN
+#endif
+#ifndef TOUCH_SCK_PIN
+  #define TOUCH_SCK_PIN  SD_SCK_PIN
+#endif
+#ifndef TOUCH_CS_PIN
+  #define TOUCH_CS_PIN   SD_SS_PIN
+#endif
+#ifndef TOUCH_INT_PIN
+  #define TOUCH_INT_PIN  -1
+#endif
+
+#define XPT2046_DFR_MODE        0x00
+#define XPT2046_SER_MODE        0x04
+#define XPT2046_CONTROL         0x80
+
+enum XPTCoordinate : uint8_t {
+  XPT2046_X  = 0x10 | XPT2046_CONTROL | XPT2046_DFR_MODE,
+  XPT2046_Y  = 0x50 | XPT2046_CONTROL | XPT2046_DFR_MODE,
+  XPT2046_Z1 = 0x30 | XPT2046_CONTROL | XPT2046_DFR_MODE,
+  XPT2046_Z2 = 0x40 | XPT2046_CONTROL | XPT2046_DFR_MODE,
+};
+
+#if !defined(XPT2046_Z1_THRESHOLD)
+  #define XPT2046_Z1_THRESHOLD 10
+#endif
+
+class XPT2046 {
+private:
+  static bool isBusy() { return false; }
+
+  static uint16_t getRawData(const XPTCoordinate coordinate);
+  static bool isTouched();
+
+  static inline void DataTransferBegin();
+  static inline void DataTransferEnd();
+  #if ENABLED(TOUCH_BUTTONS_HW_SPI)
+    static uint16_t HardwareIO(uint16_t data);
+  #endif
+  static uint16_t SoftwareIO(uint16_t data);
+  static uint16_t IO(uint16_t data = 0);
+
+public:
+  #if ENABLED(TOUCH_BUTTONS_HW_SPI)
+    static SPIClass SPIx;
+  #endif
+
+  static void Init();
+  static bool getRawPoint(int16_t *x, int16_t *y);
+};
