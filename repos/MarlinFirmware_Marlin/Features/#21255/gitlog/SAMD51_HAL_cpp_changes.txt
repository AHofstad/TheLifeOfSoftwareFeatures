commit bd6eb832500478c9e3be55f1126d0139aa013bb0
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Dec 1 09:19:13 2023 -0600

    ü©π Fix some minor issues

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index beace8126c..a3c871ce51 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -47,27 +47,27 @@
   #endif
 #endif
 
-#define GET_TEMP_0_ADC()          TERN(HAS_TEMP_ADC_0,        PIN_TO_ADC(TEMP_0_PIN),       -1)
-#define GET_TEMP_1_ADC()          TERN(HAS_TEMP_ADC_1,        PIN_TO_ADC(TEMP_1_PIN),       -1)
-#define GET_TEMP_2_ADC()          TERN(HAS_TEMP_ADC_2,        PIN_TO_ADC(TEMP_2_PIN),       -1)
-#define GET_TEMP_3_ADC()          TERN(HAS_TEMP_ADC_3,        PIN_TO_ADC(TEMP_3_PIN),       -1)
-#define GET_TEMP_4_ADC()          TERN(HAS_TEMP_ADC_4,        PIN_TO_ADC(TEMP_4_PIN),       -1)
-#define GET_TEMP_5_ADC()          TERN(HAS_TEMP_ADC_5,        PIN_TO_ADC(TEMP_5_PIN),       -1)
-#define GET_TEMP_6_ADC()          TERN(HAS_TEMP_ADC_6,        PIN_TO_ADC(TEMP_6_PIN),       -1)
-#define GET_TEMP_7_ADC()          TERN(HAS_TEMP_ADC_7,        PIN_TO_ADC(TEMP_7_PIN),       -1)
-#define GET_BED_ADC()             TERN(HAS_TEMP_ADC_BED,      PIN_TO_ADC(TEMP_BED_PIN),     -1)
-#define GET_CHAMBER_ADC()         TERN(HAS_TEMP_ADC_CHAMBER,  PIN_TO_ADC(TEMP_CHAMBER_PIN), -1)
-#define GET_PROBE_ADC()           TERN(HAS_TEMP_ADC_PROBE,    PIN_TO_ADC(TEMP_PROBE_PIN),   -1)
-#define GET_COOLER_ADC()          TERN(HAS_TEMP_ADC_COOLER,   PIN_TO_ADC(TEMP_COOLER_PIN),  -1)
-#define GET_BOARD_ADC()           TERN(HAS_TEMP_ADC_BOARD,    PIN_TO_ADC(TEMP_BOARD_PIN),   -1)
-#define GET_SOC_ADC()             TERN(HAS_TEMP_ADC_SOC,      PIN_TO_ADC(TEMP_SOC_PIN),     -1)
-#define GET_FILAMENT_WIDTH_ADC()  TERN(FILAMENT_WIDTH_SENSOR, PIN_TO_ADC(FILWIDTH_PIN),     -1)
-#define GET_BUTTONS_ADC()         TERN(HAS_ADC_BUTTONS,       PIN_TO_ADC(ADC_KEYPAD_PIN),   -1)
-#define GET_JOY_ADC_X()           TERN(HAS_JOY_ADC_X,         PIN_TO_ADC(JOY_X_PIN),        -1)
-#define GET_JOY_ADC_Y()           TERN(HAS_JOY_ADC_Y,         PIN_TO_ADC(JOY_Y_PIN),        -1)
-#define GET_JOY_ADC_Z()           TERN(HAS_JOY_ADC_Z,         PIN_TO_ADC(JOY_Z_PIN),        -1)
-#define GET_POWERMON_ADC_CURRENT() TERN(POWER_MONITOR_CURRENT, PIN_TO_ADC(POWER_MONITOR_CURRENT_PIN), -1)
-#define GET_POWERMON_ADC_VOLTS()  TERN(POWER_MONITOR_VOLTAGE, PIN_TO_ADC(POWER_MONITOR_VOLTAGE_PIN), -1)
+#define GET_TEMP_0_ADC()            TERN(HAS_TEMP_ADC_0,        PIN_TO_ADC(TEMP_0_PIN),                 -1)
+#define GET_TEMP_1_ADC()            TERN(HAS_TEMP_ADC_1,        PIN_TO_ADC(TEMP_1_PIN),                 -1)
+#define GET_TEMP_2_ADC()            TERN(HAS_TEMP_ADC_2,        PIN_TO_ADC(TEMP_2_PIN),                 -1)
+#define GET_TEMP_3_ADC()            TERN(HAS_TEMP_ADC_3,        PIN_TO_ADC(TEMP_3_PIN),                 -1)
+#define GET_TEMP_4_ADC()            TERN(HAS_TEMP_ADC_4,        PIN_TO_ADC(TEMP_4_PIN),                 -1)
+#define GET_TEMP_5_ADC()            TERN(HAS_TEMP_ADC_5,        PIN_TO_ADC(TEMP_5_PIN),                 -1)
+#define GET_TEMP_6_ADC()            TERN(HAS_TEMP_ADC_6,        PIN_TO_ADC(TEMP_6_PIN),                 -1)
+#define GET_TEMP_7_ADC()            TERN(HAS_TEMP_ADC_7,        PIN_TO_ADC(TEMP_7_PIN),                 -1)
+#define GET_BED_ADC()               TERN(HAS_TEMP_ADC_BED,      PIN_TO_ADC(TEMP_BED_PIN),               -1)
+#define GET_CHAMBER_ADC()           TERN(HAS_TEMP_ADC_CHAMBER,  PIN_TO_ADC(TEMP_CHAMBER_PIN),           -1)
+#define GET_PROBE_ADC()             TERN(HAS_TEMP_ADC_PROBE,    PIN_TO_ADC(TEMP_PROBE_PIN),             -1)
+#define GET_COOLER_ADC()            TERN(HAS_TEMP_ADC_COOLER,   PIN_TO_ADC(TEMP_COOLER_PIN),            -1)
+#define GET_BOARD_ADC()             TERN(HAS_TEMP_ADC_BOARD,    PIN_TO_ADC(TEMP_BOARD_PIN),             -1)
+#define GET_SOC_ADC()               TERN(HAS_TEMP_ADC_BOARD,    PIN_TO_ADC(TEMP_BOARD_PIN),             -1)
+#define GET_FILAMENT_WIDTH_ADC()    TERN(FILAMENT_WIDTH_SENSOR, PIN_TO_ADC(FILWIDTH_PIN),               -1)
+#define GET_BUTTONS_ADC()           TERN(HAS_ADC_BUTTONS,       PIN_TO_ADC(ADC_KEYPAD_PIN),             -1)
+#define GET_JOY_ADC_X()             TERN(HAS_JOY_ADC_X,         PIN_TO_ADC(JOY_X_PIN),                  -1)
+#define GET_JOY_ADC_Y()             TERN(HAS_JOY_ADC_Y,         PIN_TO_ADC(JOY_Y_PIN),                  -1)
+#define GET_JOY_ADC_Z()             TERN(HAS_JOY_ADC_Z,         PIN_TO_ADC(JOY_Z_PIN),                  -1)
+#define GET_POWERMON_ADC_CURRENT()  TERN(POWER_MONITOR_CURRENT, PIN_TO_ADC(POWER_MONITOR_CURRENT_PIN),  -1)
+#define GET_POWERMON_ADC_VOLTS()    TERN(POWER_MONITOR_VOLTAGE, PIN_TO_ADC(POWER_MONITOR_VOLTAGE_PIN),  -1)
 
 #define IS_ADC_REQUIRED(n) ( \
      GET_TEMP_0_ADC() == n || GET_TEMP_1_ADC() == n || GET_TEMP_2_ADC() == n || GET_TEMP_3_ADC() == n \
@@ -162,10 +162,10 @@ enum ADCIndex {
     POWERMON_CURRENT,
   #endif
   #if GET_POWERMON_ADC_VOLTS() == 0
-    POWERMON_VOLTS,
+    POWERMON_VOLTAGE,
   #endif
 
-  // Use later indexes for ADC index 1
+  // Indexes for ADC1 after those for ADC0
 
   #if GET_TEMP_0_ADC() == 1
     TEMP_0,
@@ -228,9 +228,8 @@ enum ADCIndex {
     POWERMON_CURRENT,
   #endif
   #if GET_POWERMON_ADC_VOLTS() == 1
-    POWERMON_VOLTS,
+    POWERMON_VOLTAGE,
   #endif
-
   ADC_COUNT
 };
 
@@ -351,10 +350,10 @@ enum ADCIndex {
       POWER_MONITOR_CURRENT_PIN,
     #endif
     #if GET_POWERMON_ADC_VOLTS() == 0
-      POWER_MONITOR_VOLTS_PIN,
+      POWER_MONITOR_VOLTAGE_PIN,
     #endif
 
-    // ADC1 pins
+    // Pins for ADC1 after ADC0
 
     #if GET_TEMP_0_ADC() == 1
       TEMP_0_PIN,
@@ -417,7 +416,7 @@ enum ADCIndex {
       POWER_MONITOR_CURRENT_PIN,
     #endif
     #if GET_POWERMON_ADC_VOLTS() == 1
-      POWER_MONITOR_VOLTS_PIN,
+      POWER_MONITOR_VOLTAGE_PIN,
     #endif
   };
 
@@ -488,7 +487,7 @@ enum ADCIndex {
         { PIN_TO_INPUTCTRL(POWER_MONITOR_CURRENT_PIN) },
       #endif
       #if GET_POWERMON_ADC_VOLTS() == 0
-        { PIN_TO_INPUTCTRL(POWER_MONITOR_VOLTS_PIN) },
+        { PIN_TO_INPUTCTRL(POWER_MONITOR_VOLTAGE_PIN) },
       #endif
     };
 
@@ -560,7 +559,7 @@ enum ADCIndex {
         { PIN_TO_INPUTCTRL(POWER_MONITOR_CURRENT_PIN) },
       #endif
       #if GET_POWERMON_ADC_VOLTS() == 1
-        { PIN_TO_INPUTCTRL(POWER_MONITOR_VOLTS_PIN) },
+        { PIN_TO_INPUTCTRL(POWER_MONITOR_VOLTAGE_PIN) },
       #endif
     };
 

commit 921198e81ce246d38d2675db14b7884ef37093f3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Nov 28 21:11:23 2023 -0600

    üßë‚Äçüíª More SAMD51 ADCs

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 8ec5d5a86c..beace8126c 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -60,11 +60,14 @@
 #define GET_PROBE_ADC()           TERN(HAS_TEMP_ADC_PROBE,    PIN_TO_ADC(TEMP_PROBE_PIN),   -1)
 #define GET_COOLER_ADC()          TERN(HAS_TEMP_ADC_COOLER,   PIN_TO_ADC(TEMP_COOLER_PIN),  -1)
 #define GET_BOARD_ADC()           TERN(HAS_TEMP_ADC_BOARD,    PIN_TO_ADC(TEMP_BOARD_PIN),   -1)
+#define GET_SOC_ADC()             TERN(HAS_TEMP_ADC_SOC,      PIN_TO_ADC(TEMP_SOC_PIN),     -1)
 #define GET_FILAMENT_WIDTH_ADC()  TERN(FILAMENT_WIDTH_SENSOR, PIN_TO_ADC(FILWIDTH_PIN),     -1)
 #define GET_BUTTONS_ADC()         TERN(HAS_ADC_BUTTONS,       PIN_TO_ADC(ADC_KEYPAD_PIN),   -1)
 #define GET_JOY_ADC_X()           TERN(HAS_JOY_ADC_X,         PIN_TO_ADC(JOY_X_PIN),        -1)
 #define GET_JOY_ADC_Y()           TERN(HAS_JOY_ADC_Y,         PIN_TO_ADC(JOY_Y_PIN),        -1)
 #define GET_JOY_ADC_Z()           TERN(HAS_JOY_ADC_Z,         PIN_TO_ADC(JOY_Z_PIN),        -1)
+#define GET_POWERMON_ADC_CURRENT() TERN(POWER_MONITOR_CURRENT, PIN_TO_ADC(POWER_MONITOR_CURRENT_PIN), -1)
+#define GET_POWERMON_ADC_VOLTS()  TERN(POWER_MONITOR_VOLTAGE, PIN_TO_ADC(POWER_MONITOR_VOLTAGE_PIN), -1)
 
 #define IS_ADC_REQUIRED(n) ( \
      GET_TEMP_0_ADC() == n || GET_TEMP_1_ADC() == n || GET_TEMP_2_ADC() == n || GET_TEMP_3_ADC() == n \
@@ -73,10 +76,11 @@
   || GET_CHAMBER_ADC() == n \
   || GET_PROBE_ADC() == n \
   || GET_COOLER_ADC() == n \
-  || GET_BOARD_ADC() == n \
+  || GET_BOARD_ADC() == n || GET_SOC_ADC() == n \
   || GET_FILAMENT_WIDTH_ADC() == n \
   || GET_BUTTONS_ADC() == n \
   || GET_JOY_ADC_X() == n || GET_JOY_ADC_Y() == n || GET_JOY_ADC_Z() == n \
+  || GET_POWERMON_ADC_CURRENT() == n || GET_POWERMON_ADC_VOLTS() == n \
 )
 
 #if IS_ADC_REQUIRED(0)
@@ -136,6 +140,9 @@ enum ADCIndex {
   #if GET_BOARD_ADC() == 0
     TEMP_BOARD,
   #endif
+  #if GET_SOC_ADC() == 0
+    TEMP_SOC,
+  #endif
   #if GET_FILAMENT_WIDTH_ADC() == 0
     FILWIDTH,
   #endif
@@ -151,6 +158,15 @@ enum ADCIndex {
   #if GET_JOY_ADC_Z() == 0
     JOY_Z,
   #endif
+  #if GET_POWERMON_ADC_CURRENT() == 0
+    POWERMON_CURRENT,
+  #endif
+  #if GET_POWERMON_ADC_VOLTS() == 0
+    POWERMON_VOLTS,
+  #endif
+
+  // Use later indexes for ADC index 1
+
   #if GET_TEMP_0_ADC() == 1
     TEMP_0,
   #endif
@@ -190,6 +206,9 @@ enum ADCIndex {
   #if GET_BOARD_ADC() == 1
     TEMP_BOARD,
   #endif
+  #if GET_SOC_ADC() == 1
+    TEMP_SOC,
+  #endif
   #if GET_FILAMENT_WIDTH_ADC() == 1
     FILWIDTH,
   #endif
@@ -205,6 +224,13 @@ enum ADCIndex {
   #if GET_JOY_ADC_Z() == 1
     JOY_Z,
   #endif
+  #if GET_POWERMON_ADC_CURRENT() == 1
+    POWERMON_CURRENT,
+  #endif
+  #if GET_POWERMON_ADC_VOLTS() == 1
+    POWERMON_VOLTS,
+  #endif
+
   ADC_COUNT
 };
 
@@ -303,6 +329,9 @@ enum ADCIndex {
     #if GET_BOARD_ADC() == 0
       TEMP_BOARD_PIN,
     #endif
+    #if GET_SOC_ADC() == 0
+      TEMP_SOC_PIN,
+    #endif
     #if GET_FILAMENT_WIDTH_ADC() == 0
       FILWIDTH_PIN,
     #endif
@@ -318,7 +347,15 @@ enum ADCIndex {
     #if GET_JOY_ADC_Z() == 0
       JOY_Z_PIN,
     #endif
+    #if GET_POWERMON_ADC_CURRENT() == 0
+      POWER_MONITOR_CURRENT_PIN,
+    #endif
+    #if GET_POWERMON_ADC_VOLTS() == 0
+      POWER_MONITOR_VOLTS_PIN,
+    #endif
+
     // ADC1 pins
+
     #if GET_TEMP_0_ADC() == 1
       TEMP_0_PIN,
     #endif
@@ -358,6 +395,9 @@ enum ADCIndex {
     #if GET_BOARD_ADC() == 1
       TEMP_BOARD_PIN,
     #endif
+    #if GET_SOC_ADC() == 1
+      TEMP_SOC_PIN,
+    #endif
     #if GET_FILAMENT_WIDTH_ADC() == 1
       FILWIDTH_PIN,
     #endif
@@ -373,6 +413,12 @@ enum ADCIndex {
     #if GET_JOY_ADC_Z() == 1
       JOY_Z_PIN,
     #endif
+    #if GET_POWERMON_ADC_CURRENT() == 1
+      POWER_MONITOR_CURRENT_PIN,
+    #endif
+    #if GET_POWERMON_ADC_VOLTS() == 1
+      POWER_MONITOR_VOLTS_PIN,
+    #endif
   };
 
   static uint16_t adc_results[ADC_COUNT];
@@ -420,6 +466,9 @@ enum ADCIndex {
       #if GET_BOARD_ADC() == 0
         { PIN_TO_INPUTCTRL(TEMP_BOARD_PIN) },
       #endif
+      #if GET_SOC_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_SOC_PIN) },
+      #endif
       #if GET_FILAMENT_WIDTH_ADC() == 0
         { PIN_TO_INPUTCTRL(FILWIDTH_PIN) },
       #endif
@@ -435,6 +484,12 @@ enum ADCIndex {
       #if GET_JOY_ADC_Z() == 0
         { PIN_TO_INPUTCTRL(JOY_Z_PIN) },
       #endif
+      #if GET_POWERMON_ADC_CURRENT() == 0
+        { PIN_TO_INPUTCTRL(POWER_MONITOR_CURRENT_PIN) },
+      #endif
+      #if GET_POWERMON_ADC_VOLTS() == 0
+        { PIN_TO_INPUTCTRL(POWER_MONITOR_VOLTS_PIN) },
+      #endif
     };
 
     #define ADC0_AINCOUNT   COUNT(adc0_dma_regs_list)
@@ -483,6 +538,9 @@ enum ADCIndex {
       #if GET_BOARD_ADC() == 1
         { PIN_TO_INPUTCTRL(TEMP_BOARD_PIN) },
       #endif
+      #if GET_SOC_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_SOC_PIN) },
+      #endif
       #if GET_FILAMENT_WIDTH_ADC() == 1
         { PIN_TO_INPUTCTRL(FILWIDTH_PIN) },
       #endif
@@ -498,6 +556,12 @@ enum ADCIndex {
       #if GET_JOY_ADC_Z() == 1
         { PIN_TO_INPUTCTRL(JOY_Z_PIN) },
       #endif
+      #if GET_POWERMON_ADC_CURRENT() == 1
+        { PIN_TO_INPUTCTRL(POWER_MONITOR_CURRENT_PIN) },
+      #endif
+      #if GET_POWERMON_ADC_VOLTS() == 1
+        { PIN_TO_INPUTCTRL(POWER_MONITOR_VOLTS_PIN) },
+      #endif
     };
 
     #define ADC1_AINCOUNT   COUNT(adc1_dma_regs_list)

commit 86c811660ebf0b3fcbae2f34273d4c9d0c22abc4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:30:34 2023 -0500

    üßë‚Äçüíª Remove LOOP macros (#25917)

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index bc7a9b6d91..8ec5d5a86c 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -650,10 +650,10 @@ void MarlinHAL::adc_init() {
   #if ADC_IS_REQUIRED
     memset(adc_results, 0xFF, sizeof(adc_results));                         // Fill result with invalid values
 
-    LOOP_L_N(pi, COUNT(adc_pins))
+    for (uint8_t pi = 0; pi < COUNT(adc_pins); ++pi)
       pinPeripheral(adc_pins[pi], PIO_ANALOG);
 
-    LOOP_S_LE_N(ai, FIRST_ADC, LAST_ADC) {
+    for (uint8_t ai = FIRST_ADC; ai <= LAST_ADC; ++ai) {
       Adc* adc = ((Adc*[])ADC_INSTS)[ai];
 
       // ADC clock setup
@@ -685,7 +685,7 @@ void MarlinHAL::adc_init() {
 
 void MarlinHAL::adc_start(const pin_t pin) {
   #if ADC_IS_REQUIRED
-    LOOP_L_N(pi, COUNT(adc_pins))
+    for (uint8_t pi = 0; pi < COUNT(adc_pins); ++pi)
       if (pin == adc_pins[pi]) { adc_result = adc_results[pi]; return; }
   #endif
 

commit 5664c02d077e028f84a24efd96c2eebe97ce8763
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 22:43:09 2023 -0500

    üßë‚Äçüíª Generalize SDSUPPORT as HAS_MEDIA
    
    In preparation for single- and multi-volume refactoring.

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 8c102b643d..bc7a9b6d91 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -602,7 +602,7 @@ void MarlinHAL::dma_init() {
 // HAL initialization task
 void MarlinHAL::init() {
   TERN_(DMA_IS_REQUIRED, dma_init());
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
     #if HAS_SD_DETECT && SD_CONNECTION_IS(ONBOARD)
       SET_INPUT_PULLUP(SD_DETECT_PIN);
     #endif

commit 1c2d37eb0b65cc8e7aae486732c24b7a835ae890
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Nov 1 17:14:18 2022 -0500

    üé® Update SAMD51 headers

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index bd1c98bfa1..8c102b643d 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -1,8 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- *
  * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- * SAMD51 HAL developed by Giuliano Zaro (AKA GMagician)
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -18,6 +19,10 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
+
+/**
+ * SAMD51 HAL developed by Giuliano Zaro (AKA GMagician)
+ */
 #ifdef __SAMD51__
 
 #include "../../inc/MarlinConfig.h"

commit 3e9fb34892e85bc4069acf5baddbf12d6cd47789
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Tue Jun 7 18:59:21 2022 +1200

    ü©π Media Change followup (#24302)
    
    Followup to #24015

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 648e0a4f14..bd1c98bfa1 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -598,7 +598,7 @@ void MarlinHAL::dma_init() {
 void MarlinHAL::init() {
   TERN_(DMA_IS_REQUIRED, dma_init());
   #if ENABLED(SDSUPPORT)
-    #if SD_CONNECTION_IS(ONBOARD) && PIN_EXISTS(SD_DETECT)
+    #if HAS_SD_DETECT && SD_CONNECTION_IS(ONBOARD)
       SET_INPUT_PULLUP(SD_DETECT_PIN);
     #endif
     OUT_WRITE(SDSS, HIGH);  // Try to set SDSS inactive before any other SPI users start up

commit 52eefa90e1c18616f127cdf43798907880e05ee5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 19 11:36:13 2022 -0500

    ‚ôªÔ∏è Move watchdog to MarlinHAL

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 14b6a437dc..648e0a4f14 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -203,6 +203,40 @@ enum ADCIndex {
   ADC_COUNT
 };
 
+#if ENABLED(USE_WATCHDOG)
+
+  #define WDT_TIMEOUT_REG TERN(WATCHDOG_DURATION_8S, WDT_CONFIG_PER_CYC8192, WDT_CONFIG_PER_CYC4096) // 4 or 8 second timeout
+
+  void MarlinHAL::watchdog_init() {
+    // The low-power oscillator used by the WDT runs at 32,768 Hz with
+    // a 1:32 prescale, thus 1024 Hz, though probably not super precise.
+
+    // Setup WDT clocks
+    MCLK->APBAMASK.bit.OSC32KCTRL_ = true;
+    MCLK->APBAMASK.bit.WDT_ = true;
+    OSC32KCTRL->OSCULP32K.bit.EN1K = true;  // Enable out 1K (this is what WDT uses)
+
+    WDT->CTRLA.bit.ENABLE = false;          // Disable watchdog for config
+    SYNC(WDT->SYNCBUSY.bit.ENABLE);
+
+    WDT->INTENCLR.reg = WDT_INTENCLR_EW;    // Disable early warning interrupt
+    WDT->CONFIG.reg = WDT_TIMEOUT_REG;      // Set a 4s or 8s period for chip reset
+
+    hal.watchdog_refresh();
+
+    WDT->CTRLA.reg = WDT_CTRLA_ENABLE;      // Start watchdog now in normal mode
+    SYNC(WDT->SYNCBUSY.bit.ENABLE);
+  }
+
+  // Reset watchdog. MUST be called at least every 4 seconds after the
+  // first watchdog_init or SAMD will go into emergency procedures.
+  void MarlinHAL::watchdog_refresh() {
+    SYNC(WDT->SYNCBUSY.bit.CLEAR);        // Test first if previous is 'ongoing' to save time waiting for command execution
+    WDT->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
+  }
+
+#endif
+
 // ------------------------
 // Types
 // ------------------------

commit 44eff9a23348dcc117fd1ea9b4b1ef0b54061808
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Feb 17 18:50:31 2022 -0600

    ‚ôªÔ∏è Refactor HAL as singleton (#23357)

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index a5febad83b..14b6a437dc 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -42,10 +42,6 @@
   #endif
 #endif
 
-// ------------------------
-// Local defines
-// ------------------------
-
 #define GET_TEMP_0_ADC()          TERN(HAS_TEMP_ADC_0,        PIN_TO_ADC(TEMP_0_PIN),       -1)
 #define GET_TEMP_1_ADC()          TERN(HAS_TEMP_ADC_1,        PIN_TO_ADC(TEMP_1_PIN),       -1)
 #define GET_TEMP_2_ADC()          TERN(HAS_TEMP_ADC_2,        PIN_TO_ADC(TEMP_2_PIN),       -1)
@@ -61,17 +57,21 @@
 #define GET_BOARD_ADC()           TERN(HAS_TEMP_ADC_BOARD,    PIN_TO_ADC(TEMP_BOARD_PIN),   -1)
 #define GET_FILAMENT_WIDTH_ADC()  TERN(FILAMENT_WIDTH_SENSOR, PIN_TO_ADC(FILWIDTH_PIN),     -1)
 #define GET_BUTTONS_ADC()         TERN(HAS_ADC_BUTTONS,       PIN_TO_ADC(ADC_KEYPAD_PIN),   -1)
+#define GET_JOY_ADC_X()           TERN(HAS_JOY_ADC_X,         PIN_TO_ADC(JOY_X_PIN),        -1)
+#define GET_JOY_ADC_Y()           TERN(HAS_JOY_ADC_Y,         PIN_TO_ADC(JOY_Y_PIN),        -1)
+#define GET_JOY_ADC_Z()           TERN(HAS_JOY_ADC_Z,         PIN_TO_ADC(JOY_Z_PIN),        -1)
 
 #define IS_ADC_REQUIRED(n) ( \
      GET_TEMP_0_ADC() == n || GET_TEMP_1_ADC() == n || GET_TEMP_2_ADC() == n || GET_TEMP_3_ADC() == n \
   || GET_TEMP_4_ADC() == n || GET_TEMP_5_ADC() == n || GET_TEMP_6_ADC() == n || GET_TEMP_7_ADC() == n \
-  || GET_BED_ADC() == n            \
-  || GET_CHAMBER_ADC() == n        \
-  || GET_PROBE_ADC() == n          \
-  || GET_COOLER_ADC() == n         \
-  || GET_BOARD_ADC() == n          \
+  || GET_BED_ADC() == n \
+  || GET_CHAMBER_ADC() == n \
+  || GET_PROBE_ADC() == n \
+  || GET_COOLER_ADC() == n \
+  || GET_BOARD_ADC() == n \
   || GET_FILAMENT_WIDTH_ADC() == n \
-  || GET_BUTTONS_ADC() == n        \
+  || GET_BUTTONS_ADC() == n \
+  || GET_JOY_ADC_X() == n || GET_JOY_ADC_Y() == n || GET_JOY_ADC_Z() == n \
 )
 
 #if IS_ADC_REQUIRED(0)
@@ -91,6 +91,118 @@
   #define DMA_IS_REQUIRED 1
 #endif
 
+enum ADCIndex {
+  #if GET_TEMP_0_ADC() == 0
+    TEMP_0,
+  #endif
+  #if GET_TEMP_1_ADC() == 0
+    TEMP_1,
+  #endif
+  #if GET_TEMP_2_ADC() == 0
+    TEMP_2,
+  #endif
+  #if GET_TEMP_3_ADC() == 0
+    TEMP_3,
+  #endif
+  #if GET_TEMP_4_ADC() == 0
+    TEMP_4,
+  #endif
+  #if GET_TEMP_5_ADC() == 0
+    TEMP_5,
+  #endif
+  #if GET_TEMP_6_ADC() == 0
+    TEMP_6,
+  #endif
+  #if GET_TEMP_7_ADC() == 0
+    TEMP_7,
+  #endif
+  #if GET_BED_ADC() == 0
+    TEMP_BED,
+  #endif
+  #if GET_CHAMBER_ADC() == 0
+    TEMP_CHAMBER,
+  #endif
+  #if GET_PROBE_ADC() == 0
+    TEMP_PROBE,
+  #endif
+  #if GET_COOLER_ADC() == 0
+    TEMP_COOLER,
+  #endif
+  #if GET_BOARD_ADC() == 0
+    TEMP_BOARD,
+  #endif
+  #if GET_FILAMENT_WIDTH_ADC() == 0
+    FILWIDTH,
+  #endif
+  #if GET_BUTTONS_ADC() == 0
+    ADC_KEY,
+  #endif
+  #if GET_JOY_ADC_X() == 0
+    JOY_X,
+  #endif
+  #if GET_JOY_ADC_Y() == 0
+    JOY_Y,
+  #endif
+  #if GET_JOY_ADC_Z() == 0
+    JOY_Z,
+  #endif
+  #if GET_TEMP_0_ADC() == 1
+    TEMP_0,
+  #endif
+  #if GET_TEMP_1_ADC() == 1
+    TEMP_1,
+  #endif
+  #if GET_TEMP_2_ADC() == 1
+    TEMP_2,
+  #endif
+  #if GET_TEMP_3_ADC() == 1
+    TEMP_3,
+  #endif
+  #if GET_TEMP_4_ADC() == 1
+    TEMP_4,
+  #endif
+  #if GET_TEMP_5_ADC() == 1
+    TEMP_5,
+  #endif
+  #if GET_TEMP_6_ADC() == 1
+    TEMP_6,
+  #endif
+  #if GET_TEMP_7_ADC() == 1
+    TEMP_7,
+  #endif
+  #if GET_BED_ADC() == 1
+    TEMP_BED,
+  #endif
+  #if GET_CHAMBER_ADC() == 1
+    TEMP_CHAMBER,
+  #endif
+  #if GET_PROBE_ADC() == 1
+    TEMP_PROBE,
+  #endif
+  #if GET_COOLER_ADC() == 1
+    TEMP_COOLER,
+  #endif
+  #if GET_BOARD_ADC() == 1
+    TEMP_BOARD,
+  #endif
+  #if GET_FILAMENT_WIDTH_ADC() == 1
+    FILWIDTH,
+  #endif
+  #if GET_BUTTONS_ADC() == 1
+    ADC_KEY,
+  #endif
+  #if GET_JOY_ADC_X() == 1
+    JOY_X,
+  #endif
+  #if GET_JOY_ADC_Y() == 1
+    JOY_Y,
+  #endif
+  #if GET_JOY_ADC_Z() == 1
+    JOY_Z,
+  #endif
+  ADC_COUNT
+};
+
 // ------------------------
 // Types
 // ------------------------
@@ -108,12 +220,10 @@
 // Private Variables
 // ------------------------
 
-uint16_t HAL_adc_result;
-
 #if ADC_IS_REQUIRED
 
   // Pins used by ADC inputs. Order must be ADC0 inputs first then ADC1
-  const uint8_t adc_pins[] = {
+  static constexpr uint8_t adc_pins[ADC_COUNT] = {
     // ADC0 pins
     #if GET_TEMP_0_ADC() == 0
       TEMP_0_PIN,
@@ -160,6 +270,15 @@ uint16_t HAL_adc_result;
     #if GET_BUTTONS_ADC() == 0
       ADC_KEYPAD_PIN,
     #endif
+    #if GET_JOY_ADC_X() == 0
+      JOY_X_PIN,
+    #endif
+    #if GET_JOY_ADC_Y() == 0
+      JOY_Y_PIN,
+    #endif
+    #if GET_JOY_ADC_Z() == 0
+      JOY_Z_PIN,
+    #endif
     // ADC1 pins
     #if GET_TEMP_0_ADC() == 1
       TEMP_0_PIN,
@@ -206,15 +325,23 @@ uint16_t HAL_adc_result;
     #if GET_BUTTONS_ADC() == 1
       ADC_KEYPAD_PIN,
     #endif
+    #if GET_JOY_ADC_X() == 1
+      JOY_X_PIN,
+    #endif
+    #if GET_JOY_ADC_Y() == 1
+      JOY_Y_PIN,
+    #endif
+    #if GET_JOY_ADC_Z() == 1
+      JOY_Z_PIN,
+    #endif
   };
 
-  uint16_t HAL_adc_results[COUNT(adc_pins)];
+  static uint16_t adc_results[ADC_COUNT];
 
   #if ADC0_IS_REQUIRED
-    Adafruit_ZeroDMA adc0DMAProgram,
-                     adc0DMARead;
+    Adafruit_ZeroDMA adc0DMAProgram, adc0DMARead;
 
-    const HAL_DMA_DAC_Registers adc0_dma_regs_list[] = {
+    static constexpr HAL_DMA_DAC_Registers adc0_dma_regs_list[ADC_COUNT] = {
       #if GET_TEMP_0_ADC() == 0
         { PIN_TO_INPUTCTRL(TEMP_0_PIN) },
       #endif
@@ -260,16 +387,24 @@ uint16_t HAL_adc_result;
       #if GET_BUTTONS_ADC() == 0
         { PIN_TO_INPUTCTRL(ADC_KEYPAD_PIN) },
       #endif
+      #if GET_JOY_ADC_X() == 0
+        { PIN_TO_INPUTCTRL(JOY_X_PIN) },
+      #endif
+      #if GET_JOY_ADC_Y() == 0
+        { PIN_TO_INPUTCTRL(JOY_Y_PIN) },
+      #endif
+      #if GET_JOY_ADC_Z() == 0
+        { PIN_TO_INPUTCTRL(JOY_Z_PIN) },
+      #endif
     };
 
     #define ADC0_AINCOUNT   COUNT(adc0_dma_regs_list)
   #endif // ADC0_IS_REQUIRED
 
   #if ADC1_IS_REQUIRED
-    Adafruit_ZeroDMA adc1DMAProgram,
-                     adc1DMARead;
+    Adafruit_ZeroDMA adc1DMAProgram, adc1DMARead;
 
-    const HAL_DMA_DAC_Registers adc1_dma_regs_list[] = {
+    static constexpr HAL_DMA_DAC_Registers adc1_dma_regs_list[ADC_COUNT] = {
       #if GET_TEMP_0_ADC() == 1
         { PIN_TO_INPUTCTRL(TEMP_0_PIN) },
       #endif
@@ -315,6 +450,15 @@ uint16_t HAL_adc_result;
       #if GET_BUTTONS_ADC() == 1
         { PIN_TO_INPUTCTRL(ADC_KEYPAD_PIN) },
       #endif
+      #if GET_JOY_ADC_X() == 1
+        { PIN_TO_INPUTCTRL(JOY_X_PIN) },
+      #endif
+      #if GET_JOY_ADC_Y() == 1
+        { PIN_TO_INPUTCTRL(JOY_Y_PIN) },
+      #endif
+      #if GET_JOY_ADC_Z() == 1
+        { PIN_TO_INPUTCTRL(JOY_Z_PIN) },
+      #endif
     };
 
     #define ADC1_AINCOUNT   COUNT(adc1_dma_regs_list)
@@ -326,9 +470,10 @@ uint16_t HAL_adc_result;
 // Private functions
 // ------------------------
 
-#if DMA_IS_REQUIRED
+void MarlinHAL::dma_init() {
+
+  #if DMA_IS_REQUIRED
 
-  void dma_init() {
     DmacDescriptor *descriptor;
 
     #if ADC0_IS_REQUIRED
@@ -357,7 +502,7 @@ uint16_t HAL_adc_result;
       if (adc0DMARead.allocate() == DMA_STATUS_OK) {
         adc0DMARead.addDescriptor(
           (void *)&ADC0->RESULT.reg,          // SRC
-          &HAL_adc_results,                   // DEST
+          &adc_results,                       // DEST
           ADC0_AINCOUNT,                      // CNT
           DMA_BEAT_SIZE_HWORD,
           false,                              // SRCINC
@@ -394,7 +539,7 @@ uint16_t HAL_adc_result;
       if (adc1DMARead.allocate() == DMA_STATUS_OK) {
         adc1DMARead.addDescriptor(
           (void *)&ADC1->RESULT.reg,          // SRC
-          &HAL_adc_results[ADC0_AINCOUNT],    // DEST
+          &adc_results[ADC0_AINCOUNT],        // DEST
           ADC1_AINCOUNT,                      // CNT
           DMA_BEAT_SIZE_HWORD,
           false,                              // SRCINC
@@ -407,16 +552,16 @@ uint16_t HAL_adc_result;
     #endif
 
     DMAC->PRICTRL0.bit.RRLVLEN0 = true;                         // Activate round robin for DMA channels required by ADCs
-  }
 
-#endif // DMA_IS_REQUIRED
+  #endif // DMA_IS_REQUIRED
+}
 
 // ------------------------
 // Public functions
 // ------------------------
 
 // HAL initialization task
-void HAL_init() {
+void MarlinHAL::init() {
   TERN_(DMA_IS_REQUIRED, dma_init());
   #if ENABLED(SDSUPPORT)
     #if SD_CONNECTION_IS(ONBOARD) && PIN_EXISTS(SD_DETECT)
@@ -426,17 +571,9 @@ void HAL_init() {
   #endif
 }
 
-// HAL idle task
-/*
-void HAL_idletask() {
-}
-*/
-
-void HAL_clear_reset_source() { }
-
 #pragma push_macro("WDT")
 #undef WDT    // Required to be able to use '.bit.WDT'. Compiler wrongly replace struct field with WDT define
-uint8_t HAL_get_reset_source() {
+uint8_t MarlinHAL::get_reset_source() {
   RSTC_RCAUSE_Type resetCause;
 
   resetCause.reg = REG_RSTC_RCAUSE;
@@ -450,7 +587,7 @@ uint8_t HAL_get_reset_source() {
 }
 #pragma pop_macro("WDT")
 
-void HAL_reboot() { NVIC_SystemReset(); }
+void MarlinHAL::reboot() { NVIC_SystemReset(); }
 
 extern "C" {
   void * _sbrk(int incr);
@@ -468,9 +605,11 @@ int freeMemory() {
 // ADC
 // ------------------------
 
-void HAL_adc_init() {
+uint16_t MarlinHAL::adc_result;
+
+void MarlinHAL::adc_init() {
   #if ADC_IS_REQUIRED
-    memset(HAL_adc_results, 0xFF, sizeof(HAL_adc_results));                 // Fill result with invalid values
+    memset(adc_results, 0xFF, sizeof(adc_results));                         // Fill result with invalid values
 
     LOOP_L_N(pi, COUNT(adc_pins))
       pinPeripheral(adc_pins[pi], PIO_ANALOG);
@@ -505,17 +644,13 @@ void HAL_adc_init() {
   #endif // ADC_IS_REQUIRED
 }
 
-void HAL_adc_start_conversion(const uint8_t adc_pin) {
+void MarlinHAL::adc_start(const pin_t pin) {
   #if ADC_IS_REQUIRED
-    LOOP_L_N(pi, COUNT(adc_pins)) {
-      if (adc_pin == adc_pins[pi]) {
-        HAL_adc_result = HAL_adc_results[pi];
-        return;
-      }
-    }
+    LOOP_L_N(pi, COUNT(adc_pins))
+      if (pin == adc_pins[pi]) { adc_result = adc_results[pi]; return; }
   #endif
 
-  HAL_adc_result = 0xFFFF;
+  adc_result = 0xFFFF;
 }
 
 #endif // __SAMD51__

commit 9285b6b9edcb42d38736a08785371204aea56501
Author: zerkix <97692157+zerkix@users.noreply.github.com>
Date:   Mon Jan 17 07:05:31 2022 +0100

    üêõ Finish and organize temp sensors (#23519)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 8baad31bc7..a5febad83b 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -54,20 +54,22 @@
 #define GET_TEMP_5_ADC()          TERN(HAS_TEMP_ADC_5,        PIN_TO_ADC(TEMP_5_PIN),       -1)
 #define GET_TEMP_6_ADC()          TERN(HAS_TEMP_ADC_6,        PIN_TO_ADC(TEMP_6_PIN),       -1)
 #define GET_TEMP_7_ADC()          TERN(HAS_TEMP_ADC_7,        PIN_TO_ADC(TEMP_7_PIN),       -1)
-#define GET_PROBE_ADC()           TERN(HAS_TEMP_PROBE,        PIN_TO_ADC(TEMP_PROBE_PIN),   -1)
 #define GET_BED_ADC()             TERN(HAS_TEMP_ADC_BED,      PIN_TO_ADC(TEMP_BED_PIN),     -1)
 #define GET_CHAMBER_ADC()         TERN(HAS_TEMP_ADC_CHAMBER,  PIN_TO_ADC(TEMP_CHAMBER_PIN), -1)
+#define GET_PROBE_ADC()           TERN(HAS_TEMP_ADC_PROBE,    PIN_TO_ADC(TEMP_PROBE_PIN),   -1)
 #define GET_COOLER_ADC()          TERN(HAS_TEMP_ADC_COOLER,   PIN_TO_ADC(TEMP_COOLER_PIN),  -1)
+#define GET_BOARD_ADC()           TERN(HAS_TEMP_ADC_BOARD,    PIN_TO_ADC(TEMP_BOARD_PIN),   -1)
 #define GET_FILAMENT_WIDTH_ADC()  TERN(FILAMENT_WIDTH_SENSOR, PIN_TO_ADC(FILWIDTH_PIN),     -1)
 #define GET_BUTTONS_ADC()         TERN(HAS_ADC_BUTTONS,       PIN_TO_ADC(ADC_KEYPAD_PIN),   -1)
 
 #define IS_ADC_REQUIRED(n) ( \
      GET_TEMP_0_ADC() == n || GET_TEMP_1_ADC() == n || GET_TEMP_2_ADC() == n || GET_TEMP_3_ADC() == n \
   || GET_TEMP_4_ADC() == n || GET_TEMP_5_ADC() == n || GET_TEMP_6_ADC() == n || GET_TEMP_7_ADC() == n \
-  || GET_PROBE_ADC() == n          \
   || GET_BED_ADC() == n            \
   || GET_CHAMBER_ADC() == n        \
+  || GET_PROBE_ADC() == n          \
   || GET_COOLER_ADC() == n         \
+  || GET_BOARD_ADC() == n          \
   || GET_FILAMENT_WIDTH_ADC() == n \
   || GET_BUTTONS_ADC() == n        \
 )
@@ -137,18 +139,21 @@ uint16_t HAL_adc_result;
     #if GET_TEMP_7_ADC() == 0
       TEMP_7_PIN,
     #endif
-    #if GET_PROBE_ADC() == 0
-      TEMP_PROBE_PIN,
-    #endif
     #if GET_BED_ADC() == 0
       TEMP_BED_PIN,
     #endif
     #if GET_CHAMBER_ADC() == 0
       TEMP_CHAMBER_PIN,
     #endif
+    #if GET_PROBE_ADC() == 0
+      TEMP_PROBE_PIN,
+    #endif
     #if GET_COOLER_ADC() == 0
       TEMP_COOLER_PIN,
     #endif
+    #if GET_BOARD_ADC() == 0
+      TEMP_BOARD_PIN,
+    #endif
     #if GET_FILAMENT_WIDTH_ADC() == 0
       FILWIDTH_PIN,
     #endif
@@ -180,18 +185,21 @@ uint16_t HAL_adc_result;
     #if GET_TEMP_7_ADC() == 1
       TEMP_7_PIN,
     #endif
-    #if GET_PROBE_ADC() == 1
-      TEMP_PROBE_PIN,
-    #endif
     #if GET_BED_ADC() == 1
       TEMP_BED_PIN,
     #endif
     #if GET_CHAMBER_ADC() == 1
       TEMP_CHAMBER_PIN,
     #endif
+    #if GET_PROBE_ADC() == 1
+      TEMP_PROBE_PIN,
+    #endif
     #if GET_COOLER_ADC() == 1
       TEMP_COOLER_PIN,
     #endif
+    #if GET_BOARD_ADC() == 1
+      TEMP_BOARD_PIN,
+    #endif
     #if GET_FILAMENT_WIDTH_ADC() == 1
       FILWIDTH_PIN,
     #endif
@@ -231,18 +239,21 @@ uint16_t HAL_adc_result;
       #if GET_TEMP_7_ADC() == 0
         { PIN_TO_INPUTCTRL(TEMP_7_PIN) },
       #endif
-      #if GET_PROBE_ADC() == 0
-        { PIN_TO_INPUTCTRL(TEMP_PROBE_PIN) },
-      #endif
       #if GET_BED_ADC() == 0
         { PIN_TO_INPUTCTRL(TEMP_BED_PIN) },
       #endif
       #if GET_CHAMBER_ADC() == 0
         { PIN_TO_INPUTCTRL(TEMP_CHAMBER_PIN) },
       #endif
+      #if GET_PROBE_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_PROBE_PIN) },
+      #endif
       #if GET_COOLER_ADC() == 0
         { PIN_TO_INPUTCTRL(TEMP_COOLER_PIN) },
       #endif
+      #if GET_BOARD_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_BOARD_PIN) },
+      #endif
       #if GET_FILAMENT_WIDTH_ADC() == 0
         { PIN_TO_INPUTCTRL(FILWIDTH_PIN) },
       #endif
@@ -283,18 +294,21 @@ uint16_t HAL_adc_result;
       #if GET_TEMP_7_ADC() == 1
         { PIN_TO_INPUTCTRL(TEMP_7_PIN) },
       #endif
-      #if GET_PROBE_ADC() == 1
-        { PIN_TO_INPUTCTRL(TEMP_PROBE_PIN) },
-      #endif
       #if GET_BED_ADC() == 1
         { PIN_TO_INPUTCTRL(TEMP_BED_PIN) },
       #endif
       #if GET_CHAMBER_ADC() == 1
         { PIN_TO_INPUTCTRL(TEMP_CHAMBER_PIN) },
       #endif
+      #if GET_PROBE_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_PROBE_PIN) },
+      #endif
       #if GET_COOLER_ADC() == 1
         { PIN_TO_INPUTCTRL(TEMP_COOLER_PIN) },
       #endif
+      #if GET_BOARD_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_BOARD_PIN) },
+      #endif
       #if GET_FILAMENT_WIDTH_ADC() == 1
         { PIN_TO_INPUTCTRL(FILWIDTH_PIN) },
       #endif

commit 6a8b9274a31d11c396ce1bc44b3a0b872a4606dc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Dec 25 23:15:17 2021 -0600

    ‚è™Ô∏è Refactor still needs work
    
    Reverting #23295

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index f038325128..8baad31bc7 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -106,7 +106,7 @@
 // Private Variables
 // ------------------------
 
-uint16_t MarlinHAL::adc_result;
+uint16_t HAL_adc_result;
 
 #if ADC_IS_REQUIRED
 
@@ -402,7 +402,7 @@ uint16_t MarlinHAL::adc_result;
 // ------------------------
 
 // HAL initialization task
-void MarlinHAL::init() {
+void HAL_init() {
   TERN_(DMA_IS_REQUIRED, dma_init());
   #if ENABLED(SDSUPPORT)
     #if SD_CONNECTION_IS(ONBOARD) && PIN_EXISTS(SD_DETECT)
@@ -412,9 +412,17 @@ void MarlinHAL::init() {
   #endif
 }
 
+// HAL idle task
+/*
+void HAL_idletask() {
+}
+*/
+
+void HAL_clear_reset_source() { }
+
 #pragma push_macro("WDT")
 #undef WDT    // Required to be able to use '.bit.WDT'. Compiler wrongly replace struct field with WDT define
-uint8_t MarlinHAL::get_reset_source() {
+uint8_t HAL_get_reset_source() {
   RSTC_RCAUSE_Type resetCause;
 
   resetCause.reg = REG_RSTC_RCAUSE;
@@ -428,7 +436,7 @@ uint8_t MarlinHAL::get_reset_source() {
 }
 #pragma pop_macro("WDT")
 
-void MarlinHAL::reboot() { NVIC_SystemReset(); }
+void HAL_reboot() { NVIC_SystemReset(); }
 
 extern "C" {
   void * _sbrk(int incr);
@@ -446,7 +454,7 @@ int freeMemory() {
 // ADC
 // ------------------------
 
-void MarlinHAL::adc_init() {
+void HAL_adc_init() {
   #if ADC_IS_REQUIRED
     memset(HAL_adc_results, 0xFF, sizeof(HAL_adc_results));                 // Fill result with invalid values
 
@@ -483,17 +491,17 @@ void MarlinHAL::adc_init() {
   #endif // ADC_IS_REQUIRED
 }
 
-void MarlinHAL::adc_start(const pin_t pin) {
+void HAL_adc_start_conversion(const uint8_t adc_pin) {
   #if ADC_IS_REQUIRED
     LOOP_L_N(pi, COUNT(adc_pins)) {
-      if (pin == adc_pins[pi]) {
-        adc_result = HAL_adc_results[pi];
+      if (adc_pin == adc_pins[pi]) {
+        HAL_adc_result = HAL_adc_results[pi];
         return;
       }
     }
   #endif
 
-  adc_result = 0xFFFF;
+  HAL_adc_result = 0xFFFF;
 }
 
 #endif // __SAMD51__

commit e211ff148c39bf5dace72de7cffbb83f19d3f1bf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Dec 24 21:33:59 2021 -0600

    ‚ôªÔ∏è Refactor HAL as singleton (#23295)

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 8baad31bc7..f038325128 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -106,7 +106,7 @@
 // Private Variables
 // ------------------------
 
-uint16_t HAL_adc_result;
+uint16_t MarlinHAL::adc_result;
 
 #if ADC_IS_REQUIRED
 
@@ -402,7 +402,7 @@ uint16_t HAL_adc_result;
 // ------------------------
 
 // HAL initialization task
-void HAL_init() {
+void MarlinHAL::init() {
   TERN_(DMA_IS_REQUIRED, dma_init());
   #if ENABLED(SDSUPPORT)
     #if SD_CONNECTION_IS(ONBOARD) && PIN_EXISTS(SD_DETECT)
@@ -412,17 +412,9 @@ void HAL_init() {
   #endif
 }
 
-// HAL idle task
-/*
-void HAL_idletask() {
-}
-*/
-
-void HAL_clear_reset_source() { }
-
 #pragma push_macro("WDT")
 #undef WDT    // Required to be able to use '.bit.WDT'. Compiler wrongly replace struct field with WDT define
-uint8_t HAL_get_reset_source() {
+uint8_t MarlinHAL::get_reset_source() {
   RSTC_RCAUSE_Type resetCause;
 
   resetCause.reg = REG_RSTC_RCAUSE;
@@ -436,7 +428,7 @@ uint8_t HAL_get_reset_source() {
 }
 #pragma pop_macro("WDT")
 
-void HAL_reboot() { NVIC_SystemReset(); }
+void MarlinHAL::reboot() { NVIC_SystemReset(); }
 
 extern "C" {
   void * _sbrk(int incr);
@@ -454,7 +446,7 @@ int freeMemory() {
 // ADC
 // ------------------------
 
-void HAL_adc_init() {
+void MarlinHAL::adc_init() {
   #if ADC_IS_REQUIRED
     memset(HAL_adc_results, 0xFF, sizeof(HAL_adc_results));                 // Fill result with invalid values
 
@@ -491,17 +483,17 @@ void HAL_adc_init() {
   #endif // ADC_IS_REQUIRED
 }
 
-void HAL_adc_start_conversion(const uint8_t adc_pin) {
+void MarlinHAL::adc_start(const pin_t pin) {
   #if ADC_IS_REQUIRED
     LOOP_L_N(pi, COUNT(adc_pins)) {
-      if (adc_pin == adc_pins[pi]) {
-        HAL_adc_result = HAL_adc_results[pi];
+      if (pin == adc_pins[pi]) {
+        adc_result = HAL_adc_results[pi];
         return;
       }
     }
   #endif
 
-  HAL_adc_result = 0xFFFF;
+  adc_result = 0xFFFF;
 }
 
 #endif // __SAMD51__

commit afca6e745932d295b88d37fa9bd4274e22705b0b
Author: luzpaz <luzpaz@users.noreply.github.com>
Date:   Tue Aug 3 20:02:34 2021 -0400

    üêõ Spellcheck comments (#22496)
    
    codespell -q 3 --builtin=clear,rare,informal,code -S ./Marlin/src/lcd/language -L alo,amin,endcode,stdio,uint

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 5aa23cdaeb..8baad31bc7 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -98,7 +98,7 @@
   // Struct must be 32 bits aligned because of DMA accesses but fields needs to be 8 bits packed
   typedef struct  __attribute__((aligned(4), packed)) {
     ADC_INPUTCTRL_Type INPUTCTRL;
-  } HAL_DMA_DAC_Registers;    // DMA transfered registers
+  } HAL_DMA_DAC_Registers;    // DMA transferred registers
 
 #endif
 

commit d3a2c6a0b47fba8f560ff9ea60e73eb2610ff527
Author: fedetony <45215920+fedetony@users.noreply.github.com>
Date:   Sat Apr 24 09:53:52 2021 +0200

    Soft Reset via Serial or post-kill button click (#21652)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 39167fc467..5aa23cdaeb 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -436,6 +436,8 @@ uint8_t HAL_get_reset_source() {
 }
 #pragma pop_macro("WDT")
 
+void HAL_reboot() { NVIC_SystemReset(); }
+
 extern "C" {
   void * _sbrk(int incr);
 

commit 84b961cb20a4f0b2c1ad67a71d6c507a12f9da2a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Mar 25 16:19:03 2021 -0500

    Define HW serial ports needed for TMC UART (#21446)

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 8dd2fefd0a..39167fc467 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -25,19 +25,19 @@
 #include <wiring_private.h>
 
 #ifdef ADAFRUIT_GRAND_CENTRAL_M4
-  #if ANY_SERIAL_IS(-1)
+  #if USING_HW_SERIALUSB
     DefaultSerial1 MSerial0(false, Serial);
   #endif
-  #if ANY_SERIAL_IS(0)
+  #if USING_HW_SERIAL0
     DefaultSerial2 MSerial1(false, Serial1);
   #endif
-  #if ANY_SERIAL_IS(1)
+  #if USING_HW_SERIAL1
     DefaultSerial3 MSerial2(false, Serial2);
   #endif
-  #if ANY_SERIAL_IS(2)
+  #if USING_HW_SERIAL2
     DefaultSerial4 MSerial3(false, Serial3);
   #endif
-  #if ANY_SERIAL_IS(3)
+  #if USING_HW_SERIAL3
     DefaultSerial5 MSerial4(false, Serial4);
   #endif
 #endif

commit dbd28eecc9cd4b5954a4fd1ed0c02bd9788c279b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 10 12:05:05 2021 -0600

    Number serial from 1 to match settings

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 4a6100b96b..8dd2fefd0a 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -26,19 +26,19 @@
 
 #ifdef ADAFRUIT_GRAND_CENTRAL_M4
   #if ANY_SERIAL_IS(-1)
-    DefaultSerial MSerial(false, Serial);
+    DefaultSerial1 MSerial0(false, Serial);
   #endif
   #if ANY_SERIAL_IS(0)
-    DefaultSerial1 MSerial1(false, Serial1);
+    DefaultSerial2 MSerial1(false, Serial1);
   #endif
   #if ANY_SERIAL_IS(1)
-    DefaultSerial2 MSerial2(false, Serial2);
+    DefaultSerial3 MSerial2(false, Serial2);
   #endif
   #if ANY_SERIAL_IS(2)
-    DefaultSerial3 MSerial3(false, Serial3);
+    DefaultSerial4 MSerial3(false, Serial3);
   #endif
   #if ANY_SERIAL_IS(3)
-    DefaultSerial4 MSerial4(false, Serial4);
+    DefaultSerial5 MSerial4(false, Serial4);
   #endif
 #endif
 

commit b95e548ddbcbc1c088eabc17992d0a06f82ac167
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Sat Mar 6 14:13:28 2021 -0600

    Cooler (for Laser) - M143, M193 (#21255)

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 17e89c723f..4a6100b96b 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -57,6 +57,7 @@
 #define GET_PROBE_ADC()           TERN(HAS_TEMP_PROBE,        PIN_TO_ADC(TEMP_PROBE_PIN),   -1)
 #define GET_BED_ADC()             TERN(HAS_TEMP_ADC_BED,      PIN_TO_ADC(TEMP_BED_PIN),     -1)
 #define GET_CHAMBER_ADC()         TERN(HAS_TEMP_ADC_CHAMBER,  PIN_TO_ADC(TEMP_CHAMBER_PIN), -1)
+#define GET_COOLER_ADC()          TERN(HAS_TEMP_ADC_COOLER,   PIN_TO_ADC(TEMP_COOLER_PIN),  -1)
 #define GET_FILAMENT_WIDTH_ADC()  TERN(FILAMENT_WIDTH_SENSOR, PIN_TO_ADC(FILWIDTH_PIN),     -1)
 #define GET_BUTTONS_ADC()         TERN(HAS_ADC_BUTTONS,       PIN_TO_ADC(ADC_KEYPAD_PIN),   -1)
 
@@ -66,6 +67,7 @@
   || GET_PROBE_ADC() == n          \
   || GET_BED_ADC() == n            \
   || GET_CHAMBER_ADC() == n        \
+  || GET_COOLER_ADC() == n         \
   || GET_FILAMENT_WIDTH_ADC() == n \
   || GET_BUTTONS_ADC() == n        \
 )
@@ -144,6 +146,9 @@ uint16_t HAL_adc_result;
     #if GET_CHAMBER_ADC() == 0
       TEMP_CHAMBER_PIN,
     #endif
+    #if GET_COOLER_ADC() == 0
+      TEMP_COOLER_PIN,
+    #endif
     #if GET_FILAMENT_WIDTH_ADC() == 0
       FILWIDTH_PIN,
     #endif
@@ -184,6 +189,9 @@ uint16_t HAL_adc_result;
     #if GET_CHAMBER_ADC() == 1
       TEMP_CHAMBER_PIN,
     #endif
+    #if GET_COOLER_ADC() == 1
+      TEMP_COOLER_PIN,
+    #endif
     #if GET_FILAMENT_WIDTH_ADC() == 1
       FILWIDTH_PIN,
     #endif
@@ -232,6 +240,9 @@ uint16_t HAL_adc_result;
       #if GET_CHAMBER_ADC() == 0
         { PIN_TO_INPUTCTRL(TEMP_CHAMBER_PIN) },
       #endif
+      #if GET_COOLER_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_COOLER_PIN) },
+      #endif
       #if GET_FILAMENT_WIDTH_ADC() == 0
         { PIN_TO_INPUTCTRL(FILWIDTH_PIN) },
       #endif
@@ -281,6 +292,9 @@ uint16_t HAL_adc_result;
       #if GET_CHAMBER_ADC() == 1
         { PIN_TO_INPUTCTRL(TEMP_CHAMBER_PIN) },
       #endif
+      #if GET_COOLER_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_COOLER_PIN) },
+      #endif
       #if GET_FILAMENT_WIDTH_ADC() == 1
         { PIN_TO_INPUTCTRL(FILWIDTH_PIN) },
       #endif

commit 8fd88eee2be991c18c5e6beecbdceb174c21012c
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Sun Feb 14 04:04:22 2021 +0100

    Don't create unused Serial Port instances (#21066)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index a413c4cd80..17e89c723f 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -25,8 +25,21 @@
 #include <wiring_private.h>
 
 #ifdef ADAFRUIT_GRAND_CENTRAL_M4
-  DefaultSerial MSerial(false, Serial);
-  DefaultSerial1 MSerial1(false, Serial1);
+  #if ANY_SERIAL_IS(-1)
+    DefaultSerial MSerial(false, Serial);
+  #endif
+  #if ANY_SERIAL_IS(0)
+    DefaultSerial1 MSerial1(false, Serial1);
+  #endif
+  #if ANY_SERIAL_IS(1)
+    DefaultSerial2 MSerial2(false, Serial2);
+  #endif
+  #if ANY_SERIAL_IS(2)
+    DefaultSerial3 MSerial3(false, Serial3);
+  #endif
+  #if ANY_SERIAL_IS(3)
+    DefaultSerial4 MSerial4(false, Serial4);
+  #endif
 #endif
 
 // ------------------------

commit 3f01b222b2b4f77cff66096dd5a18a64828e1fa4
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Thu Jan 28 09:02:06 2021 +0100

    Refactor serial class with templates (#20783)

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index d985ef3787..a413c4cd80 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -24,6 +24,11 @@
 #include <Adafruit_ZeroDMA.h>
 #include <wiring_private.h>
 
+#ifdef ADAFRUIT_GRAND_CENTRAL_M4
+  DefaultSerial MSerial(false, Serial);
+  DefaultSerial1 MSerial1(false, Serial1);
+#endif
+
 // ------------------------
 // Local defines
 // ------------------------

commit ec23e37a4a31d12febc06922d3fa68446f58d7fb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Oct 24 17:13:10 2020 -0500

    Clean up comments, USB flash, NULLs

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 9f24d30071..d985ef3787 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -300,7 +300,7 @@ uint16_t HAL_adc_result;
           DMA_ADDRESS_INCREMENT_STEP_SIZE_1,  // STEPSIZE
           DMA_STEPSEL_SRC                     // STEPSEL
         );
-        if (descriptor != nullptr)
+        if (descriptor)
           descriptor->BTCTRL.bit.EVOSEL = DMA_EVENT_OUTPUT_BEAT;
         adc0DMAProgram.startJob();
       }
@@ -337,7 +337,7 @@ uint16_t HAL_adc_result;
           DMA_ADDRESS_INCREMENT_STEP_SIZE_1,  // STEPSIZE
           DMA_STEPSEL_SRC                     // STEPSEL
         );
-        if (descriptor != nullptr)
+        if (descriptor)
           descriptor->BTCTRL.bit.EVOSEL = DMA_EVENT_OUTPUT_BEAT;
         adc1DMAProgram.startJob();
       }

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 8b39825171..9f24d30071 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -15,7 +15,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #ifdef __SAMD51__

commit 2c959123e5972920bfb40ac519bfaa5b0b7c6d67
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Apr 28 04:31:59 2020 -0500

    Clean up whitespace

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index ea5ebd6d64..8b39825171 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -18,7 +18,6 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
-
 #ifdef __SAMD51__
 
 #include "../../inc/MarlinConfig.h"

commit 6d90d1e1f552dca5e21bc61b676b8e8ce731b280
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 22 16:35:03 2020 -0500

    Apply TERN to compact code (#17619)

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index b3a741fe13..ea5ebd6d64 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -29,71 +29,19 @@
 // Local defines
 // ------------------------
 
-#if HAS_TEMP_ADC_0
-  #define GET_TEMP_0_ADC()          PIN_TO_ADC(TEMP_0_PIN)
-#else
-  #define GET_TEMP_0_ADC()          -1
-#endif
-#if HAS_TEMP_ADC_1
-  #define GET_TEMP_1_ADC()          PIN_TO_ADC(TEMP_1_PIN)
-#else
-  #define GET_TEMP_1_ADC()          -1
-#endif
-#if HAS_TEMP_ADC_2
-  #define GET_TEMP_2_ADC()          PIN_TO_ADC(TEMP_2_PIN)
-#else
-  #define GET_TEMP_2_ADC()          -1
-#endif
-#if HAS_TEMP_ADC_3
-  #define GET_TEMP_3_ADC()          PIN_TO_ADC(TEMP_3_PIN)
-#else
-  #define GET_TEMP_3_ADC()          -1
-#endif
-#if HAS_TEMP_ADC_4
-  #define GET_TEMP_4_ADC()          PIN_TO_ADC(TEMP_4_PIN)
-#else
-  #define GET_TEMP_4_ADC()          -1
-#endif
-#if HAS_TEMP_ADC_5
-  #define GET_TEMP_5_ADC()          PIN_TO_ADC(TEMP_5_PIN)
-#else
-  #define GET_TEMP_5_ADC()          -1
-#endif
-#if HAS_TEMP_ADC_6
-  #define GET_TEMP_6_ADC()          PIN_TO_ADC(TEMP_6_PIN)
-#else
-  #define GET_TEMP_6_ADC()          -1
-#endif
-#if HAS_TEMP_ADC_7
-  #define GET_TEMP_7_ADC()          PIN_TO_ADC(TEMP_7_PIN)
-#else
-  #define GET_TEMP_7_ADC()          -1
-#endif
-#if HAS_TEMP_PROBE
-  #define GET_PROBE_ADC()           PIN_TO_ADC(TEMP_PROBE_PIN)
-#else
-  #define GET_PROBE_ADC()           -1
-#endif
-#if HAS_TEMP_ADC_BED
-  #define GET_BED_ADC()             PIN_TO_ADC(TEMP_BED_PIN)
-#else
-  #define GET_BED_ADC()             -1
-#endif
-#if HAS_TEMP_ADC_CHAMBER
-  #define GET_CHAMBER_ADC()         PIN_TO_ADC(TEMP_CHAMBER_PIN)
-#else
-  #define GET_CHAMBER_ADC()         -1
-#endif
-#if ENABLED(FILAMENT_WIDTH_SENSOR)
-  #define GET_FILAMENT_WIDTH_ADC()  PIN_TO_ADC(FILWIDTH_PIN)
-#else
-  #define GET_FILAMENT_WIDTH_ADC()  -1
-#endif
-#if HAS_ADC_BUTTONS
-  #define GET_BUTTONS_ADC()         PIN_TO_ADC(ADC_KEYPAD_PIN)
-#else
-  #define GET_BUTTONS_ADC()         -1
-#endif
+#define GET_TEMP_0_ADC()          TERN(HAS_TEMP_ADC_0,        PIN_TO_ADC(TEMP_0_PIN),       -1)
+#define GET_TEMP_1_ADC()          TERN(HAS_TEMP_ADC_1,        PIN_TO_ADC(TEMP_1_PIN),       -1)
+#define GET_TEMP_2_ADC()          TERN(HAS_TEMP_ADC_2,        PIN_TO_ADC(TEMP_2_PIN),       -1)
+#define GET_TEMP_3_ADC()          TERN(HAS_TEMP_ADC_3,        PIN_TO_ADC(TEMP_3_PIN),       -1)
+#define GET_TEMP_4_ADC()          TERN(HAS_TEMP_ADC_4,        PIN_TO_ADC(TEMP_4_PIN),       -1)
+#define GET_TEMP_5_ADC()          TERN(HAS_TEMP_ADC_5,        PIN_TO_ADC(TEMP_5_PIN),       -1)
+#define GET_TEMP_6_ADC()          TERN(HAS_TEMP_ADC_6,        PIN_TO_ADC(TEMP_6_PIN),       -1)
+#define GET_TEMP_7_ADC()          TERN(HAS_TEMP_ADC_7,        PIN_TO_ADC(TEMP_7_PIN),       -1)
+#define GET_PROBE_ADC()           TERN(HAS_TEMP_PROBE,        PIN_TO_ADC(TEMP_PROBE_PIN),   -1)
+#define GET_BED_ADC()             TERN(HAS_TEMP_ADC_BED,      PIN_TO_ADC(TEMP_BED_PIN),     -1)
+#define GET_CHAMBER_ADC()         TERN(HAS_TEMP_ADC_CHAMBER,  PIN_TO_ADC(TEMP_CHAMBER_PIN), -1)
+#define GET_FILAMENT_WIDTH_ADC()  TERN(FILAMENT_WIDTH_SENSOR, PIN_TO_ADC(FILWIDTH_PIN),     -1)
+#define GET_BUTTONS_ADC()         TERN(HAS_ADC_BUTTONS,       PIN_TO_ADC(ADC_KEYPAD_PIN),   -1)
 
 #define IS_ADC_REQUIRED(n) ( \
      GET_TEMP_0_ADC() == n || GET_TEMP_1_ADC() == n || GET_TEMP_2_ADC() == n || GET_TEMP_3_ADC() == n \
@@ -105,21 +53,22 @@
   || GET_BUTTONS_ADC() == n        \
 )
 
-#define ADC0_IS_REQUIRED    IS_ADC_REQUIRED(0)
-#define ADC1_IS_REQUIRED    IS_ADC_REQUIRED(1)
-#define ADC_IS_REQUIRED     (ADC0_IS_REQUIRED || ADC1_IS_REQUIRED)
-#if ADC0_IS_REQUIRED
+#if IS_ADC_REQUIRED(0)
+  #define ADC0_IS_REQUIRED 1
   #define FIRST_ADC     0
 #else
   #define FIRST_ADC     1
 #endif
-#if ADC1_IS_REQUIRED
+#if IS_ADC_REQUIRED(1)
+  #define ADC1_IS_REQUIRED 1
   #define LAST_ADC      1
 #else
   #define LAST_ADC      0
 #endif
-
-#define DMA_IS_REQUIRED     ADC_IS_REQUIRED
+#if ADC0_IS_REQUIRED || ADC1_IS_REQUIRED
+  #define ADC_IS_REQUIRED 1
+  #define DMA_IS_REQUIRED 1
+#endif
 
 // ------------------------
 // Types
@@ -423,9 +372,7 @@ uint16_t HAL_adc_result;
 
 // HAL initialization task
 void HAL_init() {
-  #if DMA_IS_REQUIRED
-    dma_init();
-  #endif
+  TERN_(DMA_IS_REQUIRED, dma_init());
   #if ENABLED(SDSUPPORT)
     #if SD_CONNECTION_IS(ONBOARD) && PIN_EXISTS(SD_DETECT)
       SET_INPUT_PULLUP(SD_DETECT_PIN);

commit 118bd2f8b2a1f81884cb55a8fc00b708a51aa15b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 23:18:16 2020 -0500

    Apply loop shorthand macros (#17159)

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
index 4828c40ff7..b3a741fe13 100644
--- a/Marlin/src/HAL/SAMD51/HAL.cpp
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -478,10 +478,10 @@ void HAL_adc_init() {
   #if ADC_IS_REQUIRED
     memset(HAL_adc_results, 0xFF, sizeof(HAL_adc_results));                 // Fill result with invalid values
 
-    for (uint8_t pi = 0; pi < COUNT(adc_pins); ++pi)
+    LOOP_L_N(pi, COUNT(adc_pins))
       pinPeripheral(adc_pins[pi], PIO_ANALOG);
 
-    for (uint8_t ai = FIRST_ADC; ai <= LAST_ADC; ++ai) {
+    LOOP_S_LE_N(ai, FIRST_ADC, LAST_ADC) {
       Adc* adc = ((Adc*[])ADC_INSTS)[ai];
 
       // ADC clock setup
@@ -513,7 +513,7 @@ void HAL_adc_init() {
 
 void HAL_adc_start_conversion(const uint8_t adc_pin) {
   #if ADC_IS_REQUIRED
-    for (uint8_t pi = 0; pi < COUNT(adc_pins); ++pi) {
+    LOOP_L_N(pi, COUNT(adc_pins)) {
       if (adc_pin == adc_pins[pi]) {
         HAL_adc_result = HAL_adc_results[pi];
         return;

commit 6bead0c1b04152f6a291d851f6cd4029fe0fc616
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 16:29:29 2020 -0500

    Shorter paths to HAL, ExtUI (#17156)

diff --git a/Marlin/src/HAL/SAMD51/HAL.cpp b/Marlin/src/HAL/SAMD51/HAL.cpp
new file mode 100644
index 0000000000..4828c40ff7
--- /dev/null
+++ b/Marlin/src/HAL/SAMD51/HAL.cpp
@@ -0,0 +1,527 @@
+/**
+ * Marlin 3D Printer Firmware
+ *
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * SAMD51 HAL developed by Giuliano Zaro (AKA GMagician)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifdef __SAMD51__
+
+#include "../../inc/MarlinConfig.h"
+#include <Adafruit_ZeroDMA.h>
+#include <wiring_private.h>
+
+// ------------------------
+// Local defines
+// ------------------------
+
+#if HAS_TEMP_ADC_0
+  #define GET_TEMP_0_ADC()          PIN_TO_ADC(TEMP_0_PIN)
+#else
+  #define GET_TEMP_0_ADC()          -1
+#endif
+#if HAS_TEMP_ADC_1
+  #define GET_TEMP_1_ADC()          PIN_TO_ADC(TEMP_1_PIN)
+#else
+  #define GET_TEMP_1_ADC()          -1
+#endif
+#if HAS_TEMP_ADC_2
+  #define GET_TEMP_2_ADC()          PIN_TO_ADC(TEMP_2_PIN)
+#else
+  #define GET_TEMP_2_ADC()          -1
+#endif
+#if HAS_TEMP_ADC_3
+  #define GET_TEMP_3_ADC()          PIN_TO_ADC(TEMP_3_PIN)
+#else
+  #define GET_TEMP_3_ADC()          -1
+#endif
+#if HAS_TEMP_ADC_4
+  #define GET_TEMP_4_ADC()          PIN_TO_ADC(TEMP_4_PIN)
+#else
+  #define GET_TEMP_4_ADC()          -1
+#endif
+#if HAS_TEMP_ADC_5
+  #define GET_TEMP_5_ADC()          PIN_TO_ADC(TEMP_5_PIN)
+#else
+  #define GET_TEMP_5_ADC()          -1
+#endif
+#if HAS_TEMP_ADC_6
+  #define GET_TEMP_6_ADC()          PIN_TO_ADC(TEMP_6_PIN)
+#else
+  #define GET_TEMP_6_ADC()          -1
+#endif
+#if HAS_TEMP_ADC_7
+  #define GET_TEMP_7_ADC()          PIN_TO_ADC(TEMP_7_PIN)
+#else
+  #define GET_TEMP_7_ADC()          -1
+#endif
+#if HAS_TEMP_PROBE
+  #define GET_PROBE_ADC()           PIN_TO_ADC(TEMP_PROBE_PIN)
+#else
+  #define GET_PROBE_ADC()           -1
+#endif
+#if HAS_TEMP_ADC_BED
+  #define GET_BED_ADC()             PIN_TO_ADC(TEMP_BED_PIN)
+#else
+  #define GET_BED_ADC()             -1
+#endif
+#if HAS_TEMP_ADC_CHAMBER
+  #define GET_CHAMBER_ADC()         PIN_TO_ADC(TEMP_CHAMBER_PIN)
+#else
+  #define GET_CHAMBER_ADC()         -1
+#endif
+#if ENABLED(FILAMENT_WIDTH_SENSOR)
+  #define GET_FILAMENT_WIDTH_ADC()  PIN_TO_ADC(FILWIDTH_PIN)
+#else
+  #define GET_FILAMENT_WIDTH_ADC()  -1
+#endif
+#if HAS_ADC_BUTTONS
+  #define GET_BUTTONS_ADC()         PIN_TO_ADC(ADC_KEYPAD_PIN)
+#else
+  #define GET_BUTTONS_ADC()         -1
+#endif
+
+#define IS_ADC_REQUIRED(n) ( \
+     GET_TEMP_0_ADC() == n || GET_TEMP_1_ADC() == n || GET_TEMP_2_ADC() == n || GET_TEMP_3_ADC() == n \
+  || GET_TEMP_4_ADC() == n || GET_TEMP_5_ADC() == n || GET_TEMP_6_ADC() == n || GET_TEMP_7_ADC() == n \
+  || GET_PROBE_ADC() == n          \
+  || GET_BED_ADC() == n            \
+  || GET_CHAMBER_ADC() == n        \
+  || GET_FILAMENT_WIDTH_ADC() == n \
+  || GET_BUTTONS_ADC() == n        \
+)
+
+#define ADC0_IS_REQUIRED    IS_ADC_REQUIRED(0)
+#define ADC1_IS_REQUIRED    IS_ADC_REQUIRED(1)
+#define ADC_IS_REQUIRED     (ADC0_IS_REQUIRED || ADC1_IS_REQUIRED)
+#if ADC0_IS_REQUIRED
+  #define FIRST_ADC     0
+#else
+  #define FIRST_ADC     1
+#endif
+#if ADC1_IS_REQUIRED
+  #define LAST_ADC      1
+#else
+  #define LAST_ADC      0
+#endif
+
+#define DMA_IS_REQUIRED     ADC_IS_REQUIRED
+
+// ------------------------
+// Types
+// ------------------------
+
+#if DMA_IS_REQUIRED
+
+  // Struct must be 32 bits aligned because of DMA accesses but fields needs to be 8 bits packed
+  typedef struct  __attribute__((aligned(4), packed)) {
+    ADC_INPUTCTRL_Type INPUTCTRL;
+  } HAL_DMA_DAC_Registers;    // DMA transfered registers
+
+#endif
+
+// ------------------------
+// Private Variables
+// ------------------------
+
+uint16_t HAL_adc_result;
+
+#if ADC_IS_REQUIRED
+
+  // Pins used by ADC inputs. Order must be ADC0 inputs first then ADC1
+  const uint8_t adc_pins[] = {
+    // ADC0 pins
+    #if GET_TEMP_0_ADC() == 0
+      TEMP_0_PIN,
+    #endif
+    #if GET_TEMP_1_ADC() == 0
+      TEMP_1_PIN,
+    #endif
+    #if GET_TEMP_2_ADC() == 0
+      TEMP_2_PIN,
+    #endif
+    #if GET_TEMP_3_ADC() == 0
+      TEMP_3_PIN,
+    #endif
+    #if GET_TEMP_4_ADC() == 0
+      TEMP_4_PIN,
+    #endif
+    #if GET_TEMP_5_ADC() == 0
+      TEMP_5_PIN,
+    #endif
+    #if GET_TEMP_6_ADC() == 0
+      TEMP_6_PIN,
+    #endif
+    #if GET_TEMP_7_ADC() == 0
+      TEMP_7_PIN,
+    #endif
+    #if GET_PROBE_ADC() == 0
+      TEMP_PROBE_PIN,
+    #endif
+    #if GET_BED_ADC() == 0
+      TEMP_BED_PIN,
+    #endif
+    #if GET_CHAMBER_ADC() == 0
+      TEMP_CHAMBER_PIN,
+    #endif
+    #if GET_FILAMENT_WIDTH_ADC() == 0
+      FILWIDTH_PIN,
+    #endif
+    #if GET_BUTTONS_ADC() == 0
+      ADC_KEYPAD_PIN,
+    #endif
+    // ADC1 pins
+    #if GET_TEMP_0_ADC() == 1
+      TEMP_0_PIN,
+    #endif
+    #if GET_TEMP_1_ADC() == 1
+      TEMP_1_PIN,
+    #endif
+    #if GET_TEMP_2_ADC() == 1
+      TEMP_2_PIN,
+    #endif
+    #if GET_TEMP_3_ADC() == 1
+      TEMP_3_PIN,
+    #endif
+    #if GET_TEMP_4_ADC() == 1
+      TEMP_4_PIN,
+    #endif
+    #if GET_TEMP_5_ADC() == 1
+      TEMP_5_PIN,
+    #endif
+    #if GET_TEMP_6_ADC() == 1
+      TEMP_6_PIN,
+    #endif
+    #if GET_TEMP_7_ADC() == 1
+      TEMP_7_PIN,
+    #endif
+    #if GET_PROBE_ADC() == 1
+      TEMP_PROBE_PIN,
+    #endif
+    #if GET_BED_ADC() == 1
+      TEMP_BED_PIN,
+    #endif
+    #if GET_CHAMBER_ADC() == 1
+      TEMP_CHAMBER_PIN,
+    #endif
+    #if GET_FILAMENT_WIDTH_ADC() == 1
+      FILWIDTH_PIN,
+    #endif
+    #if GET_BUTTONS_ADC() == 1
+      ADC_KEYPAD_PIN,
+    #endif
+  };
+
+  uint16_t HAL_adc_results[COUNT(adc_pins)];
+
+  #if ADC0_IS_REQUIRED
+    Adafruit_ZeroDMA adc0DMAProgram,
+                     adc0DMARead;
+
+    const HAL_DMA_DAC_Registers adc0_dma_regs_list[] = {
+      #if GET_TEMP_0_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_0_PIN) },
+      #endif
+      #if GET_TEMP_1_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_1_PIN) },
+      #endif
+      #if GET_TEMP_2_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_2_PIN) },
+      #endif
+      #if GET_TEMP_3_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_3_PIN) },
+      #endif
+      #if GET_TEMP_4_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_4_PIN) },
+      #endif
+      #if GET_TEMP_5_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_5_PIN) },
+      #endif
+      #if GET_TEMP_6_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_6_PIN) },
+      #endif
+      #if GET_TEMP_7_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_7_PIN) },
+      #endif
+      #if GET_PROBE_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_PROBE_PIN) },
+      #endif
+      #if GET_BED_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_BED_PIN) },
+      #endif
+      #if GET_CHAMBER_ADC() == 0
+        { PIN_TO_INPUTCTRL(TEMP_CHAMBER_PIN) },
+      #endif
+      #if GET_FILAMENT_WIDTH_ADC() == 0
+        { PIN_TO_INPUTCTRL(FILWIDTH_PIN) },
+      #endif
+      #if GET_BUTTONS_ADC() == 0
+        { PIN_TO_INPUTCTRL(ADC_KEYPAD_PIN) },
+      #endif
+    };
+
+    #define ADC0_AINCOUNT   COUNT(adc0_dma_regs_list)
+  #endif // ADC0_IS_REQUIRED
+
+  #if ADC1_IS_REQUIRED
+    Adafruit_ZeroDMA adc1DMAProgram,
+                     adc1DMARead;
+
+    const HAL_DMA_DAC_Registers adc1_dma_regs_list[] = {
+      #if GET_TEMP_0_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_0_PIN) },
+      #endif
+      #if GET_TEMP_1_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_1_PIN) },
+      #endif
+      #if GET_TEMP_2_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_2_PIN) },
+      #endif
+      #if GET_TEMP_3_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_3_PIN) },
+      #endif
+      #if GET_TEMP_4_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_4_PIN) },
+      #endif
+      #if GET_TEMP_5_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_5_PIN) },
+      #endif
+      #if GET_TEMP_6_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_6_PIN) },
+      #endif
+      #if GET_TEMP_7_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_7_PIN) },
+      #endif
+      #if GET_PROBE_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_PROBE_PIN) },
+      #endif
+      #if GET_BED_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_BED_PIN) },
+      #endif
+      #if GET_CHAMBER_ADC() == 1
+        { PIN_TO_INPUTCTRL(TEMP_CHAMBER_PIN) },
+      #endif
+      #if GET_FILAMENT_WIDTH_ADC() == 1
+        { PIN_TO_INPUTCTRL(FILWIDTH_PIN) },
+      #endif
+      #if GET_BUTTONS_ADC() == 1
+        { PIN_TO_INPUTCTRL(ADC_KEYPAD_PIN) },
+      #endif
+    };
+
+    #define ADC1_AINCOUNT   COUNT(adc1_dma_regs_list)
+  #endif // ADC1_IS_REQUIRED
+
+#endif // ADC_IS_REQUIRED
+
+// ------------------------
+// Private functions
+// ------------------------
+
+#if DMA_IS_REQUIRED
+
+  void dma_init() {
+    DmacDescriptor *descriptor;
+
+    #if ADC0_IS_REQUIRED
+      adc0DMAProgram.setTrigger(ADC0_DMAC_ID_SEQ);
+      adc0DMAProgram.setAction(DMA_TRIGGER_ACTON_BEAT);
+      adc0DMAProgram.loop(true);
+      if (adc0DMAProgram.allocate() == DMA_STATUS_OK) {
+        descriptor = adc0DMAProgram.addDescriptor(
+          (void *)adc0_dma_regs_list,         // SRC
+          (void *)&ADC0->DSEQDATA.reg,        // DEST
+          sizeof(adc0_dma_regs_list) / 4,     // CNT
+          DMA_BEAT_SIZE_WORD,
+          true,                               // SRCINC
+          false,                              // DSTINC
+          DMA_ADDRESS_INCREMENT_STEP_SIZE_1,  // STEPSIZE
+          DMA_STEPSEL_SRC                     // STEPSEL
+        );
+        if (descriptor != nullptr)
+          descriptor->BTCTRL.bit.EVOSEL = DMA_EVENT_OUTPUT_BEAT;
+        adc0DMAProgram.startJob();
+      }
+
+      adc0DMARead.setTrigger(ADC0_DMAC_ID_RESRDY);
+      adc0DMARead.setAction(DMA_TRIGGER_ACTON_BEAT);
+      adc0DMARead.loop(true);
+      if (adc0DMARead.allocate() == DMA_STATUS_OK) {
+        adc0DMARead.addDescriptor(
+          (void *)&ADC0->RESULT.reg,          // SRC
+          &HAL_adc_results,                   // DEST
+          ADC0_AINCOUNT,                      // CNT
+          DMA_BEAT_SIZE_HWORD,
+          false,                              // SRCINC
+          true,                               // DSTINC
+          DMA_ADDRESS_INCREMENT_STEP_SIZE_1,  // STEPSIZE
+          DMA_STEPSEL_DST                     // STEPSEL
+        );
+        adc0DMARead.startJob();
+      }
+    #endif
+    #if ADC1_IS_REQUIRED
+      adc1DMAProgram.setTrigger(ADC1_DMAC_ID_SEQ);
+      adc1DMAProgram.setAction(DMA_TRIGGER_ACTON_BEAT);
+      adc1DMAProgram.loop(true);
+      if (adc1DMAProgram.allocate() == DMA_STATUS_OK) {
+        descriptor = adc1DMAProgram.addDescriptor(
+          (void *)adc1_dma_regs_list,         // SRC
+          (void *)&ADC1->DSEQDATA.reg,        // DEST
+          sizeof(adc1_dma_regs_list) / 4,     // CNT
+          DMA_BEAT_SIZE_WORD,
+          true,                               // SRCINC
+          false,                              // DSTINC
+          DMA_ADDRESS_INCREMENT_STEP_SIZE_1,  // STEPSIZE
+          DMA_STEPSEL_SRC                     // STEPSEL
+        );
+        if (descriptor != nullptr)
+          descriptor->BTCTRL.bit.EVOSEL = DMA_EVENT_OUTPUT_BEAT;
+        adc1DMAProgram.startJob();
+      }
+
+      adc1DMARead.setTrigger(ADC1_DMAC_ID_RESRDY);
+      adc1DMARead.setAction(DMA_TRIGGER_ACTON_BEAT);
+      adc1DMARead.loop(true);
+      if (adc1DMARead.allocate() == DMA_STATUS_OK) {
+        adc1DMARead.addDescriptor(
+          (void *)&ADC1->RESULT.reg,          // SRC
+          &HAL_adc_results[ADC0_AINCOUNT],    // DEST
+          ADC1_AINCOUNT,                      // CNT
+          DMA_BEAT_SIZE_HWORD,
+          false,                              // SRCINC
+          true,                               // DSTINC
+          DMA_ADDRESS_INCREMENT_STEP_SIZE_1,  // STEPSIZE
+          DMA_STEPSEL_DST                     // STEPSEL
+        );
+        adc1DMARead.startJob();
+      }
+    #endif
+
+    DMAC->PRICTRL0.bit.RRLVLEN0 = true;                         // Activate round robin for DMA channels required by ADCs
+  }
+
+#endif // DMA_IS_REQUIRED
+
+// ------------------------
+// Public functions
+// ------------------------
+
+// HAL initialization task
+void HAL_init() {
+  #if DMA_IS_REQUIRED
+    dma_init();
+  #endif
+  #if ENABLED(SDSUPPORT)
+    #if SD_CONNECTION_IS(ONBOARD) && PIN_EXISTS(SD_DETECT)
+      SET_INPUT_PULLUP(SD_DETECT_PIN);
+    #endif
+    OUT_WRITE(SDSS, HIGH);  // Try to set SDSS inactive before any other SPI users start up
+  #endif
+}
+
+// HAL idle task
+/*
+void HAL_idletask() {
+}
+*/
+
+void HAL_clear_reset_source() { }
+
+#pragma push_macro("WDT")
+#undef WDT    // Required to be able to use '.bit.WDT'. Compiler wrongly replace struct field with WDT define
+uint8_t HAL_get_reset_source() {
+  RSTC_RCAUSE_Type resetCause;
+
+  resetCause.reg = REG_RSTC_RCAUSE;
+  if (resetCause.bit.POR)                                   return RST_POWER_ON;
+  else if (resetCause.bit.EXT)                              return RST_EXTERNAL;
+  else if (resetCause.bit.BODCORE || resetCause.bit.BODVDD) return RST_BROWN_OUT;
+  else if (resetCause.bit.WDT)                              return RST_WATCHDOG;
+  else if (resetCause.bit.SYST || resetCause.bit.NVM)       return RST_SOFTWARE;
+  else if (resetCause.bit.BACKUP)                           return RST_BACKUP;
+  return 0;
+}
+#pragma pop_macro("WDT")
+
+extern "C" {
+  void * _sbrk(int incr);
+
+  extern unsigned int __bss_end__; // end of bss section
+}
+
+// Return free memory between end of heap (or end bss) and whatever is current
+int freeMemory() {
+  int free_memory, heap_end = (int)_sbrk(0);
+  return (int)&free_memory - (heap_end ?: (int)&__bss_end__);
+}
+
+// ------------------------
+// ADC
+// ------------------------
+
+void HAL_adc_init() {
+  #if ADC_IS_REQUIRED
+    memset(HAL_adc_results, 0xFF, sizeof(HAL_adc_results));                 // Fill result with invalid values
+
+    for (uint8_t pi = 0; pi < COUNT(adc_pins); ++pi)
+      pinPeripheral(adc_pins[pi], PIO_ANALOG);
+
+    for (uint8_t ai = FIRST_ADC; ai <= LAST_ADC; ++ai) {
+      Adc* adc = ((Adc*[])ADC_INSTS)[ai];
+
+      // ADC clock setup
+      GCLK->PCHCTRL[ADC0_GCLK_ID + ai].bit.CHEN = false;
+      SYNC(GCLK->PCHCTRL[ADC0_GCLK_ID + ai].bit.CHEN);
+      GCLK->PCHCTRL[ADC0_GCLK_ID + ai].reg = GCLK_PCHCTRL_GEN_GCLK1 | GCLK_PCHCTRL_CHEN;   // 48MHz startup code programmed
+      SYNC(!GCLK->PCHCTRL[ADC0_GCLK_ID + ai].bit.CHEN);
+      adc->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV32_Val;             // 1.5MHZ adc clock
+
+      // ADC setup
+      // Preloaded data (fixed for all ADC instances hence not loaded by DMA)
+      adc->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;               // VRefA pin
+      SYNC(adc->SYNCBUSY.bit.REFCTRL);
+      adc->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;                   // ... ADC_CTRLB_RESSEL_16BIT_Val
+      SYNC(adc->SYNCBUSY.bit.CTRLB);
+      adc->SAMPCTRL.bit.SAMPLEN = (6 - 1);                                  // Sampling clocks
+      //adc->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16 | ADC_AVGCTRL_ADJRES(4);  // 16 Accumulated conversions and shift 4 to get oversampled 12 bits result
+      //SYNC(adc->SYNCBUSY.bit.AVGCTRL);
+
+      // Registers loaded by DMA
+      adc->DSEQCTRL.bit.INPUTCTRL = true;
+      adc->DSEQCTRL.bit.AUTOSTART = true;                                   // Start conversion after DMA sequence
+
+      adc->CTRLA.bit.ENABLE = true;                                         // Enable ADC
+      SYNC(adc->SYNCBUSY.bit.ENABLE);
+    }
+  #endif // ADC_IS_REQUIRED
+}
+
+void HAL_adc_start_conversion(const uint8_t adc_pin) {
+  #if ADC_IS_REQUIRED
+    for (uint8_t pi = 0; pi < COUNT(adc_pins); ++pi) {
+      if (adc_pin == adc_pins[pi]) {
+        HAL_adc_result = HAL_adc_results[pi];
+        return;
+      }
+    }
+  #endif
+
+  HAL_adc_result = 0xFFFF;
+}
+
+#endif // __SAMD51__
