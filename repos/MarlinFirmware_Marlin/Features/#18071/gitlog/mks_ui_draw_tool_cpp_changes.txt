commit 417e2530ebc5b6c74ac34adaba8be552b407383a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 21:11:31 2021 -0500

    ðŸŽ¨ Apply F() to G-code suite and queue

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp b/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
index 9a0462f148..66b30342b2 100644
--- a/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
+++ b/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
@@ -55,21 +55,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
     lv_clear_tool();
   switch (obj->mks_obj_id) {
     case ID_T_PRE_HEAT: lv_draw_preHeat(); break;
     case ID_T_EXTRUCT:  lv_draw_extrusion(); break;
     case ID_T_MOV:      lv_draw_move_motor(); break;
     case ID_T_HOME:     lv_draw_home(); break;
     case ID_T_LEVELING:
       #if ENABLED(AUTO_BED_LEVELING_BILINEAR)
         get_gcode_command(AUTO_LEVELING_COMMAND_ADDR, (uint8_t *)public_buf_m);
         public_buf_m[sizeof(public_buf_m) - 1] = 0;
-        queue.inject_P(PSTR(public_buf_m));
+        queue.inject(public_buf_m);
       #else
         uiCfg.leveling_first_time = true;
         lv_draw_manualLevel();
       #endif
       break;
     case ID_T_FILAMENT:
       uiCfg.hotendTargetTempBak = thermalManager.degTargetHotend(uiCfg.extruderIndex);
       lv_draw_filament_change();
       break;
     case ID_T_MORE:

commit 8df3e62c89f94f68465ac30e276333940e069ff7
Author: Sola <42537573+solawc@users.noreply.github.com>
Date:   Thu Sep 16 19:48:24 2021 +0800

    ðŸš¸ Fix and improve MKS LVGL UI (#22783)
    
    Co-authored-by: makerbase <4164049@qq.com>
    Co-authored-by: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp b/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
index 4cc99d7184..9a0462f148 100644
--- a/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
+++ b/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
@@ -53,22 +53,22 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
   if (TERN1(AUTO_BED_LEVELING_BILINEAR, obj->mks_obj_id != ID_T_LEVELING))
     lv_clear_tool();
   switch (obj->mks_obj_id) {
     case ID_T_PRE_HEAT: lv_draw_preHeat(); break;
     case ID_T_EXTRUCT:  lv_draw_extrusion(); break;
     case ID_T_MOV:      lv_draw_move_motor(); break;
     case ID_T_HOME:     lv_draw_home(); break;
     case ID_T_LEVELING:
       #if ENABLED(AUTO_BED_LEVELING_BILINEAR)
-        get_gcode_command(AUTO_LEVELING_COMMAND_ADDR,(uint8_t *)public_buf_m);
-        public_buf_m[sizeof(public_buf_m)-1] = 0;
+        get_gcode_command(AUTO_LEVELING_COMMAND_ADDR, (uint8_t *)public_buf_m);
+        public_buf_m[sizeof(public_buf_m) - 1] = 0;
         queue.inject_P(PSTR(public_buf_m));
       #else
         uiCfg.leveling_first_time = true;
         lv_draw_manualLevel();
       #endif
       break;
     case ID_T_FILAMENT:
       uiCfg.hotendTargetTempBak = thermalManager.degTargetHotend(uiCfg.extruderIndex);
       lv_draw_filament_change();
       break;
@@ -82,21 +82,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
   }
 }
 
 void lv_draw_tool() {
   scr = lv_screen_create(TOOL_UI);
   lv_big_button_create(scr, "F:/bmp_preHeat.bin", tool_menu.preheat, INTERVAL_V, titleHeight, event_handler, ID_T_PRE_HEAT);
   lv_big_button_create(scr, "F:/bmp_extruct.bin", tool_menu.extrude, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_T_EXTRUCT);
   lv_big_button_create(scr, "F:/bmp_mov.bin", tool_menu.move, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_T_MOV);
   lv_big_button_create(scr, "F:/bmp_zero.bin", tool_menu.home, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_T_HOME);
   lv_big_button_create(scr, "F:/bmp_leveling.bin", tool_menu.TERN(AUTO_BED_LEVELING_BILINEAR, autoleveling, leveling), INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_T_LEVELING);
-  lv_big_button_create(scr, "F:/bmp_filamentchange.bin", tool_menu.filament, BTN_X_PIXEL+INTERVAL_V*2,BTN_Y_PIXEL+INTERVAL_H+titleHeight, event_handler,ID_T_FILAMENT);
+  lv_big_button_create(scr, "F:/bmp_filamentchange.bin", tool_menu.filament, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_T_FILAMENT);
   lv_big_button_create(scr, "F:/bmp_more.bin", tool_menu.more, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_T_MORE);
   lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_T_RETURN);
 }
 
 void lv_clear_tool() {
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
   #endif
   lv_obj_del(scr);
 }

commit 323b38ee88dbf2a4691a20439dbb95a824822199
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Sep 16 04:36:26 2021 -0500

    ðŸ’¡ Adjust headers, formatting

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp b/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
index 8b9747972d..4cc99d7184 100644
--- a/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
+++ b/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
@@ -12,20 +12,21 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
+
 #include "../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
 #include "draw_ui.h"
 #include <lv_conf.h>
 
 #include "../../../gcode/queue.h"
 #include "../../../module/temperature.h"
 #include "../../../inc/MarlinConfig.h"

commit d819de46d32d7d6f87664e4b7ecf3afb7a3ed8ce
Author: ellensp <ellensp@hotmail.com>
Date:   Thu Jul 22 09:31:11 2021 +1200

    ðŸŽ¨ MKS Hardware Test followup (#22414)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp b/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
index 16c1448b3c..8b9747972d 100644
--- a/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
+++ b/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
@@ -38,21 +38,21 @@ enum {
   ID_T_EXTRUCT,
   ID_T_MOV,
   ID_T_HOME,
   ID_T_LEVELING,
   ID_T_FILAMENT,
   ID_T_MORE,
   ID_T_RETURN
 };
 
 #if ENABLED(MKS_TEST)
-  extern uint8_t curent_disp_ui;
+  extern uint8_t current_disp_ui;
 #endif
 
 static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
   if (TERN1(AUTO_BED_LEVELING_BILINEAR, obj->mks_obj_id != ID_T_LEVELING))
     lv_clear_tool();
   switch (obj->mks_obj_id) {
     case ID_T_PRE_HEAT: lv_draw_preHeat(); break;
     case ID_T_EXTRUCT:  lv_draw_extrusion(); break;
     case ID_T_MOV:      lv_draw_move_motor(); break;
@@ -68,21 +68,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
       #endif
       break;
     case ID_T_FILAMENT:
       uiCfg.hotendTargetTempBak = thermalManager.degTargetHotend(uiCfg.extruderIndex);
       lv_draw_filament_change();
       break;
     case ID_T_MORE:
       lv_draw_more();
       break;
     case ID_T_RETURN:
-      TERN_(MKS_TEST, curent_disp_ui = 1);
+      TERN_(MKS_TEST, current_disp_ui = 1);
       lv_draw_ready_print();
       break;
   }
 }
 
 void lv_draw_tool() {
   scr = lv_screen_create(TOOL_UI);
   lv_big_button_create(scr, "F:/bmp_preHeat.bin", tool_menu.preheat, INTERVAL_V, titleHeight, event_handler, ID_T_PRE_HEAT);
   lv_big_button_create(scr, "F:/bmp_extruct.bin", tool_menu.extrude, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_T_EXTRUCT);
   lv_big_button_create(scr, "F:/bmp_mov.bin", tool_menu.move, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_T_MOV);

commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp b/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
new file mode 100644
index 0000000000..16c1448b3c
--- /dev/null
+++ b/Marlin/src/lcd/extui/mks_ui/draw_tool.cpp
@@ -0,0 +1,103 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../inc/MarlinConfigPre.h"
+
+#if HAS_TFT_LVGL_UI
+
+#include "draw_ui.h"
+#include <lv_conf.h>
+
+#include "../../../gcode/queue.h"
+#include "../../../module/temperature.h"
+#include "../../../inc/MarlinConfig.h"
+
+extern lv_group_t *g;
+static lv_obj_t *scr;
+
+enum {
+  ID_T_PRE_HEAT = 1,
+  ID_T_EXTRUCT,
+  ID_T_MOV,
+  ID_T_HOME,
+  ID_T_LEVELING,
+  ID_T_FILAMENT,
+  ID_T_MORE,
+  ID_T_RETURN
+};
+
+#if ENABLED(MKS_TEST)
+  extern uint8_t curent_disp_ui;
+#endif
+
+static void event_handler(lv_obj_t *obj, lv_event_t event) {
+  if (event != LV_EVENT_RELEASED) return;
+  if (TERN1(AUTO_BED_LEVELING_BILINEAR, obj->mks_obj_id != ID_T_LEVELING))
+    lv_clear_tool();
+  switch (obj->mks_obj_id) {
+    case ID_T_PRE_HEAT: lv_draw_preHeat(); break;
+    case ID_T_EXTRUCT:  lv_draw_extrusion(); break;
+    case ID_T_MOV:      lv_draw_move_motor(); break;
+    case ID_T_HOME:     lv_draw_home(); break;
+    case ID_T_LEVELING:
+      #if ENABLED(AUTO_BED_LEVELING_BILINEAR)
+        get_gcode_command(AUTO_LEVELING_COMMAND_ADDR,(uint8_t *)public_buf_m);
+        public_buf_m[sizeof(public_buf_m)-1] = 0;
+        queue.inject_P(PSTR(public_buf_m));
+      #else
+        uiCfg.leveling_first_time = true;
+        lv_draw_manualLevel();
+      #endif
+      break;
+    case ID_T_FILAMENT:
+      uiCfg.hotendTargetTempBak = thermalManager.degTargetHotend(uiCfg.extruderIndex);
+      lv_draw_filament_change();
+      break;
+    case ID_T_MORE:
+      lv_draw_more();
+      break;
+    case ID_T_RETURN:
+      TERN_(MKS_TEST, curent_disp_ui = 1);
+      lv_draw_ready_print();
+      break;
+  }
+}
+
+void lv_draw_tool() {
+  scr = lv_screen_create(TOOL_UI);
+  lv_big_button_create(scr, "F:/bmp_preHeat.bin", tool_menu.preheat, INTERVAL_V, titleHeight, event_handler, ID_T_PRE_HEAT);
+  lv_big_button_create(scr, "F:/bmp_extruct.bin", tool_menu.extrude, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_T_EXTRUCT);
+  lv_big_button_create(scr, "F:/bmp_mov.bin", tool_menu.move, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_T_MOV);
+  lv_big_button_create(scr, "F:/bmp_zero.bin", tool_menu.home, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_T_HOME);
+  lv_big_button_create(scr, "F:/bmp_leveling.bin", tool_menu.TERN(AUTO_BED_LEVELING_BILINEAR, autoleveling, leveling), INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_T_LEVELING);
+  lv_big_button_create(scr, "F:/bmp_filamentchange.bin", tool_menu.filament, BTN_X_PIXEL+INTERVAL_V*2,BTN_Y_PIXEL+INTERVAL_H+titleHeight, event_handler,ID_T_FILAMENT);
+  lv_big_button_create(scr, "F:/bmp_more.bin", tool_menu.more, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_T_MORE);
+  lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_T_RETURN);
+}
+
+void lv_clear_tool() {
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
+  #endif
+  lv_obj_del(scr);
+}
+
+#endif // HAS_TFT_LVGL_UI
