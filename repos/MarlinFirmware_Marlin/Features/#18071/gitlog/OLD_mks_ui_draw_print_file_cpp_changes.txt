commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
deleted file mode 100644
index 17f5d95d2a..0000000000
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ /dev/null
@@ -1,554 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-#include "../../../../inc/MarlinConfigPre.h"
-
-#if HAS_TFT_LVGL_UI
-
-#include "draw_ui.h"
-#include <lv_conf.h>
-//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
-//#include "../lvgl/src/lv_objx/lv_img.h"
-//#include "../lvgl/src/lv_core/lv_disp.h"
-//#include "../lvgl/src/lv_core/lv_refr.h"
-
-#include "../../../../sd/cardreader.h"
-#include "../../../../inc/MarlinConfig.h"
-
-static lv_obj_t *scr;
-extern lv_group_t*  g;
-
-static lv_obj_t *buttonPageUp, *buttonPageDown, *buttonBack,
-                *buttonGcode[FILE_BTN_CNT], *labelPageUp[FILE_BTN_CNT], *buttonText[FILE_BTN_CNT];
-
-enum {
-  ID_P_UP = 7,
-  ID_P_DOWN,
-  ID_P_RETURN
-};
-
-int8_t curDirLever = 0;
-LIST_FILE list_file;
-DIR_OFFSET dir_offset[10];
-
-extern uint8_t public_buf[513];
-extern char public_buf_m[100];
-
-uint8_t sel_id = 0;
-
-#if ENABLED(SDSUPPORT)
-
-  static uint8_t search_file() {
-    int valid_name_cnt = 0;
-    //char tmp[SHORT_NEME_LEN*MAX_DIR_LEVEL+1];
-
-    list_file.Sd_file_cnt = 0;
-    //list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
-
-    //root2.rewind();
-    //SERIAL_ECHOLN(list_file.curDirPath);
-
-    if (curDirLever != 0)
-      card.cd(list_file.curDirPath);
-    else
-      card.cdroot();
-
-    const uint16_t fileCnt = card.get_num_Files();
-
-    for (uint16_t i = 0; i < fileCnt; i++) {
-      if (list_file.Sd_file_cnt == list_file.Sd_file_offset) {
-        card.getfilename_sorted(SD_ORDER(i, fileCnt));
-
-        list_file.IsFolder[valid_name_cnt] = card.flag.filenameIsDir;
-        strcpy(list_file.file_name[valid_name_cnt], list_file.curDirPath);
-        strcat_P(list_file.file_name[valid_name_cnt], PSTR("/"));
-        strcat(list_file.file_name[valid_name_cnt], card.filename);
-        strcpy(list_file.long_name[valid_name_cnt], card.longest_filename());
-
-        valid_name_cnt++;
-        if (valid_name_cnt == 1)
-          dir_offset[curDirLever].cur_page_first_offset = list_file.Sd_file_offset;
-        if (valid_name_cnt >= FILE_NUM) {
-          dir_offset[curDirLever].cur_page_last_offset = list_file.Sd_file_offset;
-          list_file.Sd_file_offset++;
-          break;
-        }
-        list_file.Sd_file_offset++;
-      }
-      list_file.Sd_file_cnt++;
-    }
-    //card.closefile(false);
-    return valid_name_cnt;
-  }
-
-#endif // SDSUPPORT
-
-bool have_pre_pic(char *path) {
-  #if ENABLED(SDSUPPORT)
-    char *ps1, *ps2, *cur_name = strrchr(path, '/');
-    card.openFileRead(cur_name);
-    card.read(public_buf, 512);
-    ps1 = strstr((char *)public_buf, ";simage:");
-    card.read(public_buf, 512);
-    ps2 = strstr((char *)public_buf, ";simage:");
-    card.closefile();
-    if (ps1 || ps2) return true;
-  #endif
-
-  return false;
-}
-
-static void event_handler(lv_obj_t *obj, lv_event_t event) {
-  if (event != LV_EVENT_RELEASED) return;
-  uint8_t i, file_count = 0;
-  //switch (obj->mks_obj_id)
-  //{
-  if (obj->mks_obj_id == ID_P_UP) {
-    if (dir_offset[curDirLever].curPage > 0) {
-      // 2015.05.19
-      list_file.Sd_file_cnt = 0;
-
-      if (dir_offset[curDirLever].cur_page_first_offset >= FILE_NUM)
-        list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset - FILE_NUM;
-
-      #if ENABLED(SDSUPPORT)
-        file_count = search_file();
-      #endif
-      if (file_count != 0) {
-        dir_offset[curDirLever].curPage--;
-        lv_clear_print_file();
-        disp_gcode_icon(file_count);
-      }
-    }
-  }
-  else if (obj->mks_obj_id == ID_P_DOWN) {
-    if (dir_offset[curDirLever].cur_page_last_offset > 0) {
-      list_file.Sd_file_cnt    = 0;
-      list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_last_offset + 1;
-      #if ENABLED(SDSUPPORT)
-        file_count = search_file();
-      #endif
-      if (file_count != 0) {
-        dir_offset[curDirLever].curPage++;
-        lv_clear_print_file();
-        disp_gcode_icon(file_count);
-      }
-      if (file_count < FILE_NUM)
-        dir_offset[curDirLever].cur_page_last_offset = 0;
-    }
-  }
-  else if (obj->mks_obj_id == ID_P_RETURN) {
-    if (curDirLever > 0) {
-      int8_t *ch = (int8_t *)strrchr(list_file.curDirPath, '/');
-      if (ch) {
-        *ch = 0;
-        #if ENABLED(SDSUPPORT)
-          card.cdup();
-        #endif
-        dir_offset[curDirLever].curPage               = 0;
-        dir_offset[curDirLever].cur_page_first_offset = 0;
-        dir_offset[curDirLever].cur_page_last_offset  = 0;
-        curDirLever--;
-        list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
-        #if ENABLED(SDSUPPORT)
-          file_count = search_file();
-        #endif
-        lv_clear_print_file();
-        disp_gcode_icon(file_count);
-      }
-    }
-    else {
-      lv_clear_print_file();
-      TERN(MULTI_VOLUME, lv_draw_media_select(), lv_draw_ready_print());
-    }
-  }
-  else {
-    for (i = 0; i < FILE_BTN_CNT; i++) {
-      if (obj->mks_obj_id == (i + 1)) {
-        if (list_file.file_name[i][0] != 0) {
-          if (list_file.IsFolder[i]) {
-            strcpy(list_file.curDirPath, list_file.file_name[i]);
-            curDirLever++;
-            list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
-            #if ENABLED(SDSUPPORT)
-              file_count = search_file();
-            #endif
-            lv_clear_print_file();
-            disp_gcode_icon(file_count);
-          }
-          else {
-            sel_id = i;
-            lv_clear_print_file();
-            lv_draw_dialog(DIALOG_TYPE_PRINT_FILE);
-          }
-          break;
-        }
-      }
-    }
-  }
-}
-
-void lv_draw_print_file() {
-  //uint8_t i;
-  uint8_t file_count;
-
-  curDirLever = 0;
-  dir_offset[curDirLever].curPage = 0;
-
-  list_file.Sd_file_offset = 0;
-  list_file.Sd_file_cnt = 0;
-
-  ZERO(dir_offset);
-  ZERO(list_file.IsFolder);
-  ZERO(list_file.curDirPath);
-
-  list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
-  #if ENABLED(SDSUPPORT)
-    card.mount();
-    file_count = search_file();
-  #endif
-  disp_gcode_icon(file_count);
-
-  //lv_obj_t *labelPageUp = lv_label_create_empty(buttonPageUp);
-  //lv_obj_t *labelPageDown = lv_label_create_empty(buttonPageDown);
-  //lv_obj_t *label_Back = lv_label_create_empty(buttonBack);
-
-  /*
-  if (gCfgItems.multiple_language) {
-    lv_label_set_text(labelPageUp, tool_menu.preheat);
-    lv_obj_align(labelPageUp, buttonPageUp, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(labelPageDown, tool_menu.extrude);
-    lv_obj_align(labelPageDown, buttonPageDown, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_Back, common_menu.text_back);
-    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
-  }
-  */
-}
-static char test_public_buf_l[40];
-void disp_gcode_icon(uint8_t file_num) {
-  uint8_t i;
-
-  // TODO: set current media title?!
-  scr = lv_screen_create(PRINT_FILE_UI, "");
-
-  // Create image buttons
-  buttonPageUp   = lv_imgbtn_create(scr, "F:/bmp_pageUp.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_P_UP);
-  buttonPageDown = lv_imgbtn_create(scr, "F:/bmp_pageDown.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL + INTERVAL_H, event_handler, ID_P_DOWN);
-  buttonBack     = lv_imgbtn_create(scr, "F:/bmp_back.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL * 2 + INTERVAL_H * 2, event_handler, ID_P_RETURN);
-
-  // Create labels on the image buttons
-  for (i = 0; i < FILE_BTN_CNT; i++) {
-    /*
-    if (seq) {
-      j = (FILE_BTN_CNT-1) - i;
-      back_flg = 1;
-    }
-    else {
-      j = i;
-      back_flg = 0;
-    }
-    */
-    if (i >= file_num) break;
-
-    #ifdef TFT35
-      buttonGcode[i] = lv_imgbtn_create(scr, nullptr);
-
-      lv_imgbtn_use_label_style(buttonGcode[i]);
-      lv_obj_clear_protect(buttonGcode[i], LV_PROTECT_FOLLOW);
-      lv_btn_set_layout(buttonGcode[i], LV_LAYOUT_OFF);
-
-      ZERO(public_buf_m);
-      cutFileName((char *)list_file.long_name[i], 16, 8, (char *)public_buf_m);
-
-      if (list_file.IsFolder[i]) {
-        lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "", 0);
-        lv_imgbtn_set_src_both(buttonGcode[i], "F:/bmp_dir.bin");
-        if (i < 3)
-          lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
-        else
-          lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-
-        labelPageUp[i] = lv_label_create(buttonGcode[i], public_buf_m);
-        lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
-      }
-      else {
-        if (have_pre_pic((char *)list_file.file_name[i])) {
-
-          //lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), list_file.file_name[i], 1);
-
-          strcpy(test_public_buf_l, "S:");
-          strcat(test_public_buf_l, list_file.file_name[i]);
-          char *temp = strstr(test_public_buf_l, ".GCO");
-          if (temp) strcpy(temp, ".bin");
-          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), test_public_buf_l, 0);
-          lv_imgbtn_set_src_both(buttonGcode[i], buttonGcode[i]->mks_pic_name);
-          if (i < 3) {
-            lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET);
-            buttonText[i] = lv_btn_create(scr, nullptr);
-            //lv_obj_set_event_cb(buttonText[i], event_handler);
-
-            lv_btn_use_label_style(buttonText[i]);
-            lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
-            lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
-            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),"", 0);
-            lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
-            lv_obj_set_size(buttonText[i], 100, 40);
-          }
-          else {
-            lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET);
-            buttonText[i] = lv_btn_create(scr, nullptr);
-            //lv_obj_set_event_cb(buttonText[i], event_handler);
-
-            lv_btn_use_label_style(buttonText[i]);
-            lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
-            lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
-            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),"", 0);
-            lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
-            lv_obj_set_size(buttonText[i], 100, 40);
-          }
-          labelPageUp[i] = lv_label_create(buttonText[i], public_buf_m);
-          lv_obj_align(labelPageUp[i], buttonText[i], LV_ALIGN_IN_BOTTOM_MID, 0, 0);
-        }
-        else {
-          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "", 0);
-          lv_imgbtn_set_src_both(buttonGcode[i], "F:/bmp_file.bin");
-          if (i < 3)
-            lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
-          else
-            lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-
-          labelPageUp[i] = lv_label_create(buttonGcode[i], public_buf_m);
-          lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
-        }
-      }
-      #if HAS_ROTARY_ENCODER
-        if (gCfgItems.encoder_enable) lv_group_add_obj(g, buttonGcode[i]);
-      #endif
-
-    #else // !TFT35
-    #endif // !TFT35
-  }
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) {
-      lv_group_add_obj(g, buttonPageUp);
-      lv_group_add_obj(g, buttonPageDown);
-      lv_group_add_obj(g, buttonBack);
-    }
-  #endif
-}
-
-uint32_t lv_open_gcode_file(char *path) {
-  #if ENABLED(SDSUPPORT)
-    uint32_t *ps4;
-    uint32_t pre_sread_cnt = UINT32_MAX;
-    char *cur_name;
-
-    cur_name = strrchr(path, '/');
-
-    card.openFileRead(cur_name);
-    card.read(public_buf, 512);
-    ps4 = (uint32_t *)strstr((char *)public_buf, ";simage:");
-    // Ignore the beginning message of gcode file
-    if (ps4) {
-      pre_sread_cnt = (uint32_t)ps4 - (uint32_t)((uint32_t *)(&public_buf[0]));
-      card.setIndex(pre_sread_cnt);
-    }
-    return pre_sread_cnt;
-  #endif // SDSUPPORT
-}
-
-int ascii2dec_test(char *ascii) {
-  int result = 0;
-  if (ascii == 0) return 0;
-
-  if (*(ascii) >= '0' && *(ascii) <= '9')
-    result = *(ascii) - '0';
-  else if (*(ascii) >= 'a' && *(ascii) <= 'f')
-    result = *(ascii) - 'a' + 0x0A;
-  else if (*(ascii) >= 'A' && *(ascii) <= 'F')
-    result = *(ascii) - 'A' + 0x0A;
-  else
-    return 0;
-
-  return result;
-}
-
-void lv_gcode_file_read(uint8_t *data_buf) {
-  #if ENABLED(SDSUPPORT)
-    uint16_t i = 0, j = 0, k = 0;
-    uint16_t row_1    = 0;
-    bool ignore_start = true;
-    char temp_test[200];
-    volatile uint16_t *p_index;
-
-    watchdog_refresh();
-    memset(public_buf, 0, 200);
-
-    while (card.isFileOpen()) {
-      if (ignore_start) card.read(temp_test, 8); // line start -> ignore
-      card.read(temp_test, 200); // data
-      // \r;;gimage: we got the bit img, so stop here
-      if (temp_test[1] == ';') {
-        card.closefile();
-        break;
-      }
-      for (i = 0; i < 200;) {
-        public_buf[row_1 * 200 + 100 * k + j] = (char)(ascii2dec_test(&temp_test[i]) << 4 | ascii2dec_test(&temp_test[i + 1]));
-        j++;
-        i += 2;
-      }
-
-      uint16_t c = card.get();
-      // check for more data or end of line (CR or LF)
-      if (ISEOL(c)) {
-        c = card.get(); // more eol?
-        if (!ISEOL(c)) card.setIndex(card.getIndex() - 1);
-        break;
-      }
-      card.setIndex(card.getIndex() - 1);
-      k++;
-      j = 0;
-      ignore_start = false;
-      if (k > 1) {
-        card.closefile();
-        break;
-      }
-    }
-    #if HAS_TFT_LVGL_UI_SPI
-      for (i = 0; i < 200;) {
-        p_index = (uint16_t *)(&public_buf[i]);
-
-        //Color = (*p_index >> 8);
-        //*p_index = Color | ((*p_index & 0xFF) << 8);
-        i += 2;
-        if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full;
-      }
-    #else // !HAS_TFT_LVGL_UI_SPI
-      for (i = 0; i < 200;) {
-        p_index = (uint16_t *)(&public_buf[i]);
-        //Color = (*p_index >> 8);
-        //*p_index = Color | ((*p_index & 0xFF) << 8);
-        i += 2;
-        if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full; // 0x18C3;
-      }
-    #endif // !HAS_TFT_LVGL_UI_SPI
-    memcpy(data_buf, public_buf, 200);
-  #endif // SDSUPPORT
-}
-
-void lv_close_gcode_file() {TERN_(SDSUPPORT, card.closefile());}
-
-void lv_gcode_file_seek(uint32_t pos) {
-  card.setIndex(pos);
-}
-
-void cutFileName(char *path, int len, int bytePerLine, char *outStr) {
-  #if _LFN_UNICODE
-    TCHAR *tmpFile;
-    TCHAR *strIndex1 = 0, *strIndex2 = 0, *beginIndex;
-    TCHAR secSeg[10]   = {0};
-    TCHAR gFileTail[4] = {'~', '.', 'g', '\0'};
-  #else
-    char *tmpFile;
-    char *strIndex1 = 0, *strIndex2 = 0, *beginIndex;
-    char secSeg[10] = {0};
-  #endif
-
-  if (path == 0 || len <= 3 || outStr == 0) return;
-
-  tmpFile = path;
-  #if _LFN_UNICODE
-    strIndex1 = (WCHAR *)wcsstr((const WCHAR *)tmpFile, (const WCHAR *)'/');
-    strIndex2 = (WCHAR *)wcsstr((const WCHAR *)tmpFile, (const WCHAR *)'.');
-  #else
-    strIndex1 = (char *)strrchr(tmpFile, '/');
-    strIndex2 = (char *)strrchr(tmpFile, '.');
-  #endif
-
-  beginIndex = (strIndex1 != 0
-                //&& (strIndex2 != 0) && (strIndex1 < strIndex2)
-                ) ? strIndex1 + 1 : tmpFile;
-
-  if (strIndex2 == 0 || (strIndex1 > strIndex2)) { // not gcode file
-    #if _LFN_UNICODE
-      if (wcslen(beginIndex) > len)
-        wcsncpy(outStr, beginIndex, len);
-      else
-        wcscpy(outStr, beginIndex);
-    #else
-      if ((int)strlen(beginIndex) > len)
-        strncpy(outStr, beginIndex, len);
-      else
-        strcpy(outStr, beginIndex);
-    #endif
-  }
-  else { // gcode file
-    if (strIndex2 - beginIndex > (len - 2)) {
-      #if _LFN_UNICODE
-        wcsncpy(outStr, (const WCHAR *)beginIndex, len - 3);
-        wcscat(outStr, (const WCHAR *)gFileTail);
-      #else
-        //strncpy(outStr, beginIndex, len - 3);
-        strncpy(outStr, beginIndex, len - 4);
-        strcat_P(outStr, PSTR("~.g"));
-      #endif
-    }
-    else {
-      #if _LFN_UNICODE
-        wcsncpy(outStr, (const WCHAR *)beginIndex, strIndex2 - beginIndex + 1);
-        wcscat(outStr, (const WCHAR *)&gFileTail[3]);
-      #else
-        strncpy(outStr, beginIndex, strIndex2 - beginIndex + 1);
-        strcat_P(outStr, PSTR("g"));
-      #endif
-    }
-  }
-
-  #if _LFN_UNICODE
-    if (wcslen(outStr) > bytePerLine) {
-      wcscpy(secSeg, (const WCHAR *)&outStr[bytePerLine]);
-      outStr[bytePerLine]     = '\n';
-      outStr[bytePerLine + 1] = '\0';
-      wcscat(outStr, (const WCHAR *)secSeg);
-    }
-  #else
-    if ((int)strlen(outStr) > bytePerLine) {
-      strcpy(secSeg, &outStr[bytePerLine]);
-      outStr[bytePerLine]     = '\n';
-      outStr[bytePerLine + 1] = '\0';
-      strcat(outStr, secSeg);
-    }
-    else {
-      strcat_P(outStr, PSTR("\n"));
-    }
-  #endif
-}
-
-void lv_clear_print_file() {
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
-  #endif
-  lv_obj_del(scr);
-}
-
-#endif // HAS_TFT_LVGL_UI

commit 138340ee99a852bc116e2a436932bed074624fde
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Apr 13 19:34:19 2021 -0300

    Multi-Volume. Select Media for LVGL (#21344)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index d32851f761..17f5d95d2a 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -170,21 +170,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
         list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
         #if ENABLED(SDSUPPORT)
           file_count = search_file();
         #endif
         lv_clear_print_file();
         disp_gcode_icon(file_count);
       }
     }
     else {
       lv_clear_print_file();
-      lv_draw_ready_print();
+      TERN(MULTI_VOLUME, lv_draw_media_select(), lv_draw_ready_print());
     }
   }
   else {
     for (i = 0; i < FILE_BTN_CNT; i++) {
       if (obj->mks_obj_id == (i + 1)) {
         if (list_file.file_name[i][0] != 0) {
           if (list_file.IsFolder[i]) {
             strcpy(list_file.curDirPath, list_file.file_name[i]);
             curDirLever++;
             list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
@@ -241,20 +241,21 @@ void lv_draw_print_file() {
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
   }
   */
 }
 static char test_public_buf_l[40];
 void disp_gcode_icon(uint8_t file_num) {
   uint8_t i;
 
+  // TODO: set current media title?!
   scr = lv_screen_create(PRINT_FILE_UI, "");
 
   // Create image buttons
   buttonPageUp   = lv_imgbtn_create(scr, "F:/bmp_pageUp.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_P_UP);
   buttonPageDown = lv_imgbtn_create(scr, "F:/bmp_pageDown.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL + INTERVAL_H, event_handler, ID_P_DOWN);
   buttonBack     = lv_imgbtn_create(scr, "F:/bmp_back.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL * 2 + INTERVAL_H * 2, event_handler, ID_P_RETURN);
 
   // Create labels on the image buttons
   for (i = 0; i < FILE_BTN_CNT; i++) {
     /*

commit fd270ddc6c5b4d78437d590ae8066326850555d7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Mar 3 00:11:50 2021 -0600

    misc. cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index 0a8f81ea86..d32851f761 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -59,22 +59,24 @@ uint8_t sel_id = 0;
   static uint8_t search_file() {
     int valid_name_cnt = 0;
     //char tmp[SHORT_NEME_LEN*MAX_DIR_LEVEL+1];
 
     list_file.Sd_file_cnt = 0;
     //list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
 
     //root2.rewind();
     //SERIAL_ECHOLN(list_file.curDirPath);
 
-    if (curDirLever != 0) card.cd(list_file.curDirPath);
-    else card.cdroot(); // while(card.cdup());
+    if (curDirLever != 0)
+      card.cd(list_file.curDirPath);
+    else
+      card.cdroot();
 
     const uint16_t fileCnt = card.get_num_Files();
 
     for (uint16_t i = 0; i < fileCnt; i++) {
       if (list_file.Sd_file_cnt == list_file.Sd_file_offset) {
         card.getfilename_sorted(SD_ORDER(i, fileCnt));
 
         list_file.IsFolder[valid_name_cnt] = card.flag.filenameIsDir;
         strcpy(list_file.file_name[valid_name_cnt], list_file.curDirPath);
         strcat_P(list_file.file_name[valid_name_cnt], PSTR("/"));

commit c753fc690f6cdd181213304224eee029988ffd34
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 14 00:23:56 2021 -0600

    More MKS UI prelim. cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index 96a6bc1177..0a8f81ea86 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -66,22 +66,21 @@ uint8_t sel_id = 0;
     //root2.rewind();
     //SERIAL_ECHOLN(list_file.curDirPath);
 
     if (curDirLever != 0) card.cd(list_file.curDirPath);
     else card.cdroot(); // while(card.cdup());
 
     const uint16_t fileCnt = card.get_num_Files();
 
     for (uint16_t i = 0; i < fileCnt; i++) {
       if (list_file.Sd_file_cnt == list_file.Sd_file_offset) {
-        const uint16_t nr = SD_ORDER(i, fileCnt);
-        card.getfilename_sorted(nr);
+        card.getfilename_sorted(SD_ORDER(i, fileCnt));
 
         list_file.IsFolder[valid_name_cnt] = card.flag.filenameIsDir;
         strcpy(list_file.file_name[valid_name_cnt], list_file.curDirPath);
         strcat_P(list_file.file_name[valid_name_cnt], PSTR("/"));
         strcat(list_file.file_name[valid_name_cnt], card.filename);
         strcpy(list_file.long_name[valid_name_cnt], card.longest_filename());
 
         valid_name_cnt++;
         if (valid_name_cnt == 1)
           dir_offset[curDirLever].cur_page_first_offset = list_file.Sd_file_offset;
@@ -198,21 +197,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
             lv_clear_print_file();
             lv_draw_dialog(DIALOG_TYPE_PRINT_FILE);
           }
           break;
         }
       }
     }
   }
 }
 
-void lv_draw_print_file(void) {
+void lv_draw_print_file() {
   //uint8_t i;
   uint8_t file_count;
 
   curDirLever = 0;
   dir_offset[curDirLever].curPage = 0;
 
   list_file.Sd_file_offset = 0;
   list_file.Sd_file_cnt = 0;
 
   ZERO(dir_offset);

commit 44c57ab05a8f909b85f51e08c90316b41e50c455
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 21:02:35 2021 -0600

    MKS UI prelim. cleanup (#20763)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index 38b62db3b4..96a6bc1177 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -42,21 +42,21 @@ static lv_obj_t *buttonPageUp, *buttonPageDown, *buttonBack,
 enum {
   ID_P_UP = 7,
   ID_P_DOWN,
   ID_P_RETURN
 };
 
 int8_t curDirLever = 0;
 LIST_FILE list_file;
 DIR_OFFSET dir_offset[10];
 
-extern uint8_t public_buf[512];
+extern uint8_t public_buf[513];
 extern char public_buf_m[100];
 
 uint8_t sel_id = 0;
 
 #if ENABLED(SDSUPPORT)
 
   static uint8_t search_file() {
     int valid_name_cnt = 0;
     //char tmp[SHORT_NEME_LEN*MAX_DIR_LEVEL+1];
 

commit 90a2b482e6e59079d7cad1bc04b87a82fe99816c
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Dec 29 01:07:11 2020 -0300

    LVGL G-code preview. Legacy MKS WiFi Cura plugin compatibility (#20589)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index 96e322bbec..38b62db3b4 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -410,26 +410,34 @@ void lv_gcode_file_read(uint8_t *data_buf) {
         card.closefile();
         break;
       }
       for (i = 0; i < 200;) {
         public_buf[row_1 * 200 + 100 * k + j] = (char)(ascii2dec_test(&temp_test[i]) << 4 | ascii2dec_test(&temp_test[i + 1]));
         j++;
         i += 2;
       }
 
       uint16_t c = card.get();
-      // check if we have more data or finished the line (CR)
-      if (c == '\r') break;
+      // check for more data or end of line (CR or LF)
+      if (ISEOL(c)) {
+        c = card.get(); // more eol?
+        if (!ISEOL(c)) card.setIndex(card.getIndex() - 1);
+        break;
+      }
       card.setIndex(card.getIndex() - 1);
       k++;
       j = 0;
       ignore_start = false;
+      if (k > 1) {
+        card.closefile();
+        break;
+      }
     }
     #if HAS_TFT_LVGL_UI_SPI
       for (i = 0; i < 200;) {
         p_index = (uint16_t *)(&public_buf[i]);
 
         //Color = (*p_index >> 8);
         //*p_index = Color | ((*p_index & 0xFF) << 8);
         i += 2;
         if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full;
       }

commit 9eaa69874a6dedb2a2becd90bf0b3a34734dc72b
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Mon Dec 28 02:15:01 2020 -0300

    Fix LVGL_UI G-code preview (#20564)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index 9014e88d75..96e322bbec 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -291,22 +291,22 @@ void disp_gcode_icon(uint8_t file_num) {
       }
       else {
         if (have_pre_pic((char *)list_file.file_name[i])) {
 
           //lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), list_file.file_name[i], 1);
 
           strcpy(test_public_buf_l, "S:");
           strcat(test_public_buf_l, list_file.file_name[i]);
           char *temp = strstr(test_public_buf_l, ".GCO");
           if (temp) strcpy(temp, ".bin");
-          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "", 0);
-          lv_imgbtn_set_src_both(buttonGcode[i], test_public_buf_l);
+          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), test_public_buf_l, 0);
+          lv_imgbtn_set_src_both(buttonGcode[i], buttonGcode[i]->mks_pic_name);
           if (i < 3) {
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET);
             buttonText[i] = lv_btn_create(scr, nullptr);
             //lv_obj_set_event_cb(buttonText[i], event_handler);
 
             lv_btn_use_label_style(buttonText[i]);
             lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
             lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
             //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),"", 0);
             lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
@@ -351,21 +351,21 @@ void disp_gcode_icon(uint8_t file_num) {
       lv_group_add_obj(g, buttonPageUp);
       lv_group_add_obj(g, buttonPageDown);
       lv_group_add_obj(g, buttonBack);
     }
   #endif
 }
 
 uint32_t lv_open_gcode_file(char *path) {
   #if ENABLED(SDSUPPORT)
     uint32_t *ps4;
-    uint32_t pre_sread_cnt = 0;
+    uint32_t pre_sread_cnt = UINT32_MAX;
     char *cur_name;
 
     cur_name = strrchr(path, '/');
 
     card.openFileRead(cur_name);
     card.read(public_buf, 512);
     ps4 = (uint32_t *)strstr((char *)public_buf, ";simage:");
     // Ignore the beginning message of gcode file
     if (ps4) {
       pre_sread_cnt = (uint32_t)ps4 - (uint32_t)((uint32_t *)(&public_buf[0]));
@@ -392,40 +392,41 @@ int ascii2dec_test(char *ascii) {
 }
 
 void lv_gcode_file_read(uint8_t *data_buf) {
   #if ENABLED(SDSUPPORT)
     uint16_t i = 0, j = 0, k = 0;
     uint16_t row_1    = 0;
     bool ignore_start = true;
     char temp_test[200];
     volatile uint16_t *p_index;
 
+    watchdog_refresh();
     memset(public_buf, 0, 200);
 
     while (card.isFileOpen()) {
       if (ignore_start) card.read(temp_test, 8); // line start -> ignore
       card.read(temp_test, 200); // data
       // \r;;gimage: we got the bit img, so stop here
       if (temp_test[1] == ';') {
         card.closefile();
         break;
       }
       for (i = 0; i < 200;) {
         public_buf[row_1 * 200 + 100 * k + j] = (char)(ascii2dec_test(&temp_test[i]) << 4 | ascii2dec_test(&temp_test[i + 1]));
         j++;
         i += 2;
       }
 
       uint16_t c = card.get();
       // check if we have more data or finished the line (CR)
       if (c == '\r') break;
-      card.setIndex(card.getIndex());
+      card.setIndex(card.getIndex() - 1);
       k++;
       j = 0;
       ignore_start = false;
     }
     #if HAS_TFT_LVGL_UI_SPI
       for (i = 0; i < 200;) {
         p_index = (uint16_t *)(&public_buf[i]);
 
         //Color = (*p_index >> 8);
         //*p_index = Color | ((*p_index & 0xFF) << 8);

commit f8ee6f8b3176b6df7bc3d23119a4bee36c6ff0d8
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Nov 10 22:39:34 2020 -0300

    Fix UI compile issues (#20092)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index f513ea4d0b..9014e88d75 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -272,70 +272,70 @@ void disp_gcode_icon(uint8_t file_num) {
       buttonGcode[i] = lv_imgbtn_create(scr, nullptr);
 
       lv_imgbtn_use_label_style(buttonGcode[i]);
       lv_obj_clear_protect(buttonGcode[i], LV_PROTECT_FOLLOW);
       lv_btn_set_layout(buttonGcode[i], LV_LAYOUT_OFF);
 
       ZERO(public_buf_m);
       cutFileName((char *)list_file.long_name[i], 16, 8, (char *)public_buf_m);
 
       if (list_file.IsFolder[i]) {
-        lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), nullptr, 0);
+        lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "", 0);
         lv_imgbtn_set_src_both(buttonGcode[i], "F:/bmp_dir.bin");
         if (i < 3)
           lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
         else
           lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
         labelPageUp[i] = lv_label_create(buttonGcode[i], public_buf_m);
         lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
       }
       else {
         if (have_pre_pic((char *)list_file.file_name[i])) {
 
           //lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), list_file.file_name[i], 1);
 
           strcpy(test_public_buf_l, "S:");
           strcat(test_public_buf_l, list_file.file_name[i]);
           char *temp = strstr(test_public_buf_l, ".GCO");
           if (temp) strcpy(temp, ".bin");
-          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), nullptr, 0);
+          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "", 0);
           lv_imgbtn_set_src_both(buttonGcode[i], test_public_buf_l);
           if (i < 3) {
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET);
             buttonText[i] = lv_btn_create(scr, nullptr);
             //lv_obj_set_event_cb(buttonText[i], event_handler);
 
             lv_btn_use_label_style(buttonText[i]);
             lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
             lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
-            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),nullptr, 0);
+            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),"", 0);
             lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
             lv_obj_set_size(buttonText[i], 100, 40);
           }
           else {
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET);
             buttonText[i] = lv_btn_create(scr, nullptr);
             //lv_obj_set_event_cb(buttonText[i], event_handler);
 
             lv_btn_use_label_style(buttonText[i]);
             lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
             lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
-            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),nullptr, 0);
+            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),"", 0);
             lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
             lv_obj_set_size(buttonText[i], 100, 40);
           }
           labelPageUp[i] = lv_label_create(buttonText[i], public_buf_m);
           lv_obj_align(labelPageUp[i], buttonText[i], LV_ALIGN_IN_BOTTOM_MID, 0, 0);
         }
         else {
-          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), nullptr, 0);
+          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "", 0);
           lv_imgbtn_set_src_both(buttonGcode[i], "F:/bmp_file.bin");
           if (i < 3)
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
           else
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
           labelPageUp[i] = lv_label_create(buttonGcode[i], public_buf_m);
           lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
         }
       }

commit 75b0e3246a00c04c5bf04607d030775f1d8d1e0c
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Oct 27 17:09:19 2020 -0300

    Fix some LVGL bugs (#19904)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index cfd06cf09f..f513ea4d0b 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -201,25 +201,20 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
           break;
         }
       }
     }
   }
 }
 
 void lv_draw_print_file(void) {
   //uint8_t i;
   uint8_t file_count;
-  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != PRINT_FILE_UI) {
-    disp_state_stack._disp_index++;
-    disp_state_stack._disp_state[disp_state_stack._disp_index] = PRINT_FILE_UI;
-  }
-  disp_state = PRINT_FILE_UI;
 
   curDirLever = 0;
   dir_offset[curDirLever].curPage = 0;
 
   list_file.Sd_file_offset = 0;
   list_file.Sd_file_cnt = 0;
 
   ZERO(dir_offset);
   ZERO(list_file.IsFolder);
   ZERO(list_file.curDirPath);
@@ -245,21 +240,21 @@ void lv_draw_print_file(void) {
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
   }
   */
 }
 static char test_public_buf_l[40];
 void disp_gcode_icon(uint8_t file_num) {
   uint8_t i;
 
-  scr = lv_screen_create(MAIN_UI, "");
+  scr = lv_screen_create(PRINT_FILE_UI, "");
 
   // Create image buttons
   buttonPageUp   = lv_imgbtn_create(scr, "F:/bmp_pageUp.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_P_UP);
   buttonPageDown = lv_imgbtn_create(scr, "F:/bmp_pageDown.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL + INTERVAL_H, event_handler, ID_P_DOWN);
   buttonBack     = lv_imgbtn_create(scr, "F:/bmp_back.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL * 2 + INTERVAL_H * 2, event_handler, ID_P_RETURN);
 
   // Create labels on the image buttons
   for (i = 0; i < FILE_BTN_CNT; i++) {
     /*
     if (seq) {

commit 853d01de683ab3efcbb15ef95db869e279053ee0
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 19:28:31 2020 -0300

    More LVGL UI code reduction (#19879)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index 141ea4cd6f..cfd06cf09f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -245,24 +245,21 @@ void lv_draw_print_file(void) {
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
   }
   */
 }
 static char test_public_buf_l[40];
 void disp_gcode_icon(uint8_t file_num) {
   uint8_t i;
 
-  scr = lv_screen_create();
-  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
-
-  lv_refr_now(lv_refr_get_disp_refreshing());
+  scr = lv_screen_create(MAIN_UI, "");
 
   // Create image buttons
   buttonPageUp   = lv_imgbtn_create(scr, "F:/bmp_pageUp.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_P_UP);
   buttonPageDown = lv_imgbtn_create(scr, "F:/bmp_pageDown.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL + INTERVAL_H, event_handler, ID_P_DOWN);
   buttonBack     = lv_imgbtn_create(scr, "F:/bmp_back.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL * 2 + INTERVAL_H * 2, event_handler, ID_P_RETURN);
 
   // Create labels on the image buttons
   for (i = 0; i < FILE_BTN_CNT; i++) {
     /*
     if (seq) {

commit 9630c2683c39468bf885c560a1768d8b377d9462
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 01:37:45 2020 -0300

    More MKS UI cleanup, optimization (#19869)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index 8db84c5159..141ea4cd6f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -26,29 +26,31 @@
 #include "draw_ui.h"
 #include <lv_conf.h>
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../sd/cardreader.h"
 #include "../../../../inc/MarlinConfig.h"
 
-static lv_obj_t * scr;
+static lv_obj_t *scr;
 extern lv_group_t*  g;
 
 static lv_obj_t *buttonPageUp, *buttonPageDown, *buttonBack,
                 *buttonGcode[FILE_BTN_CNT], *labelPageUp[FILE_BTN_CNT], *buttonText[FILE_BTN_CNT];
 
-#define ID_P_UP     7
-#define ID_P_DOWN   8
-#define ID_P_RETURN 9
+enum {
+  ID_P_UP = 7,
+  ID_P_DOWN,
+  ID_P_RETURN
+};
 
 int8_t curDirLever = 0;
 LIST_FILE list_file;
 DIR_OFFSET dir_offset[10];
 
 extern uint8_t public_buf[512];
 extern char public_buf_m[100];
 
 uint8_t sel_id = 0;
 
@@ -67,200 +69,163 @@ uint8_t sel_id = 0;
     if (curDirLever != 0) card.cd(list_file.curDirPath);
     else card.cdroot(); // while(card.cdup());
 
     const uint16_t fileCnt = card.get_num_Files();
 
     for (uint16_t i = 0; i < fileCnt; i++) {
       if (list_file.Sd_file_cnt == list_file.Sd_file_offset) {
         const uint16_t nr = SD_ORDER(i, fileCnt);
         card.getfilename_sorted(nr);
 
-        if (card.flag.filenameIsDir) {
-          //SERIAL_ECHOLN(card.longest_filename);
-          list_file.IsFolder[valid_name_cnt] = 1;
-        }
-        else {
-          //SERIAL_ECHOLN(card.longFilename);
-          list_file.IsFolder[valid_name_cnt] = 0;
-        }
-
-        #if 1
-          //
-          memset(list_file.file_name[valid_name_cnt], 0, strlen(list_file.file_name[valid_name_cnt]));
-          strcpy(list_file.file_name[valid_name_cnt], list_file.curDirPath);
-          strcat_P(list_file.file_name[valid_name_cnt], PSTR("/"));
-          strcat(list_file.file_name[valid_name_cnt], card.filename);
-          //
-          memset(list_file.long_name[valid_name_cnt], 0, strlen(list_file.long_name[valid_name_cnt]));
-          if (card.longFilename[0] == 0)
-            strncpy(list_file.long_name[valid_name_cnt], card.filename, strlen(card.filename));
-          else
-            strncpy(list_file.long_name[valid_name_cnt], card.longFilename, strlen(card.longFilename));
-
-          valid_name_cnt++;
-          if (valid_name_cnt == 1)
-            dir_offset[curDirLever].cur_page_first_offset = list_file.Sd_file_offset;
-          if (valid_name_cnt >= FILE_NUM) {
-            dir_offset[curDirLever].cur_page_last_offset = list_file.Sd_file_offset;
-            list_file.Sd_file_offset++;
-            break;
-          }
+        list_file.IsFolder[valid_name_cnt] = card.flag.filenameIsDir;
+        strcpy(list_file.file_name[valid_name_cnt], list_file.curDirPath);
+        strcat_P(list_file.file_name[valid_name_cnt], PSTR("/"));
+        strcat(list_file.file_name[valid_name_cnt], card.filename);
+        strcpy(list_file.long_name[valid_name_cnt], card.longest_filename());
+
+        valid_name_cnt++;
+        if (valid_name_cnt == 1)
+          dir_offset[curDirLever].cur_page_first_offset = list_file.Sd_file_offset;
+        if (valid_name_cnt >= FILE_NUM) {
+          dir_offset[curDirLever].cur_page_last_offset = list_file.Sd_file_offset;
           list_file.Sd_file_offset++;
-        #endif
+          break;
+        }
+        list_file.Sd_file_offset++;
       }
       list_file.Sd_file_cnt++;
     }
     //card.closefile(false);
     return valid_name_cnt;
   }
 
 #endif // SDSUPPORT
 
-uint8_t have_pre_pic(char *path) {
+bool have_pre_pic(char *path) {
   #if ENABLED(SDSUPPORT)
     char *ps1, *ps2, *cur_name = strrchr(path, '/');
-
     card.openFileRead(cur_name);
     card.read(public_buf, 512);
     ps1 = strstr((char *)public_buf, ";simage:");
     card.read(public_buf, 512);
     ps2 = strstr((char *)public_buf, ";simage:");
-    if (ps1 || ps2) {
-      card.closefile();
-      return 1;
-    }
     card.closefile();
+    if (ps1 || ps2) return true;
   #endif
 
-  return 0;
+  return false;
 }
 
-static void event_handler(lv_obj_t * obj, lv_event_t event) {
+static void event_handler(lv_obj_t *obj, lv_event_t event) {
+  if (event != LV_EVENT_RELEASED) return;
   uint8_t i, file_count = 0;
   //switch (obj->mks_obj_id)
   //{
   if (obj->mks_obj_id == ID_P_UP) {
-    if (event == LV_EVENT_CLICKED) {
-    }
-    else if (event == LV_EVENT_RELEASED) {
-      if (dir_offset[curDirLever].curPage > 0) {
-        // 2015.05.19
-        list_file.Sd_file_cnt = 0;
+    if (dir_offset[curDirLever].curPage > 0) {
+      // 2015.05.19
+      list_file.Sd_file_cnt = 0;
 
-        if (dir_offset[curDirLever].cur_page_first_offset >= FILE_NUM)
-          list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset - FILE_NUM;
+      if (dir_offset[curDirLever].cur_page_first_offset >= FILE_NUM)
+        list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset - FILE_NUM;
 
-        #if ENABLED(SDSUPPORT)
-          file_count = search_file();
-        #endif
-        if (file_count != 0) {
-          dir_offset[curDirLever].curPage--;
-          lv_clear_print_file();
-          disp_gcode_icon(file_count);
-        }
+      #if ENABLED(SDSUPPORT)
+        file_count = search_file();
+      #endif
+      if (file_count != 0) {
+        dir_offset[curDirLever].curPage--;
+        lv_clear_print_file();
+        disp_gcode_icon(file_count);
       }
     }
   }
   else if (obj->mks_obj_id == ID_P_DOWN) {
-    if (event == LV_EVENT_CLICKED) {
-    }
-    else if (event == LV_EVENT_RELEASED) {
-      if (dir_offset[curDirLever].cur_page_last_offset > 0) {
-        list_file.Sd_file_cnt    = 0;
-        list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_last_offset + 1;
-        #if ENABLED(SDSUPPORT)
-          file_count = search_file();
-        #endif
-        if (file_count != 0) {
-          dir_offset[curDirLever].curPage++;
-          lv_clear_print_file();
-          disp_gcode_icon(file_count);
-        }
-        if (file_count < FILE_NUM)
-          dir_offset[curDirLever].cur_page_last_offset = 0;
+    if (dir_offset[curDirLever].cur_page_last_offset > 0) {
+      list_file.Sd_file_cnt    = 0;
+      list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_last_offset + 1;
+      #if ENABLED(SDSUPPORT)
+        file_count = search_file();
+      #endif
+      if (file_count != 0) {
+        dir_offset[curDirLever].curPage++;
+        lv_clear_print_file();
+        disp_gcode_icon(file_count);
       }
+      if (file_count < FILE_NUM)
+        dir_offset[curDirLever].cur_page_last_offset = 0;
     }
   }
   else if (obj->mks_obj_id == ID_P_RETURN) {
-    if (event == LV_EVENT_CLICKED) {
-    }
-    else if (event == LV_EVENT_RELEASED) {
-      if (curDirLever > 0) {
-        int8_t *ch = (int8_t *)strrchr(list_file.curDirPath, '/');
-        if (ch) {
-          *ch = 0;
-          #if ENABLED(SDSUPPORT)
-            card.cdup();
-          #endif
-          dir_offset[curDirLever].curPage               = 0;
-          dir_offset[curDirLever].cur_page_first_offset = 0;
-          dir_offset[curDirLever].cur_page_last_offset  = 0;
-          curDirLever--;
-          list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
-          #if ENABLED(SDSUPPORT)
-            file_count = search_file();
-          #endif
-          lv_clear_print_file();
-          disp_gcode_icon(file_count);
-        }
-      }
-      else {
+    if (curDirLever > 0) {
+      int8_t *ch = (int8_t *)strrchr(list_file.curDirPath, '/');
+      if (ch) {
+        *ch = 0;
+        #if ENABLED(SDSUPPORT)
+          card.cdup();
+        #endif
+        dir_offset[curDirLever].curPage               = 0;
+        dir_offset[curDirLever].cur_page_first_offset = 0;
+        dir_offset[curDirLever].cur_page_last_offset  = 0;
+        curDirLever--;
+        list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
+        #if ENABLED(SDSUPPORT)
+          file_count = search_file();
+        #endif
         lv_clear_print_file();
-        lv_draw_ready_print();
+        disp_gcode_icon(file_count);
       }
     }
+    else {
+      lv_clear_print_file();
+      lv_draw_ready_print();
+    }
   }
   else {
     for (i = 0; i < FILE_BTN_CNT; i++) {
       if (obj->mks_obj_id == (i + 1)) {
-        if (event == LV_EVENT_CLICKED) {
-        }
-        else if (event == LV_EVENT_RELEASED) {
-          if (list_file.file_name[i][0] != 0) {
-            if (list_file.IsFolder[i] == 1) {
-              ZERO(list_file.curDirPath);
-              strcpy(list_file.curDirPath,  list_file.file_name[i]);
-              curDirLever++;
-              list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
-              #if ENABLED(SDSUPPORT)
-                file_count = search_file();
-              #endif
-              lv_clear_print_file();
-              disp_gcode_icon(file_count);
-            }
-            else {
-              sel_id = i;
-              lv_clear_print_file();
-              lv_draw_dialog(DIALOG_TYPE_PRINT_FILE);
-            }
-            break;
+        if (list_file.file_name[i][0] != 0) {
+          if (list_file.IsFolder[i]) {
+            strcpy(list_file.curDirPath, list_file.file_name[i]);
+            curDirLever++;
+            list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
+            #if ENABLED(SDSUPPORT)
+              file_count = search_file();
+            #endif
+            lv_clear_print_file();
+            disp_gcode_icon(file_count);
           }
+          else {
+            sel_id = i;
+            lv_clear_print_file();
+            lv_draw_dialog(DIALOG_TYPE_PRINT_FILE);
+          }
+          break;
         }
       }
     }
   }
 }
 
 void lv_draw_print_file(void) {
   //uint8_t i;
   uint8_t file_count;
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != PRINT_FILE_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = PRINT_FILE_UI;
   }
   disp_state = PRINT_FILE_UI;
 
-  curDirLever                     = 0;
+  curDirLever = 0;
   dir_offset[curDirLever].curPage = 0;
 
   list_file.Sd_file_offset = 0;
-  list_file.Sd_file_cnt    = 0;
+  list_file.Sd_file_cnt = 0;
 
   ZERO(dir_offset);
   ZERO(list_file.IsFolder);
   ZERO(list_file.curDirPath);
 
   list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
   #if ENABLED(SDSUPPORT)
     card.mount();
     file_count = search_file();
   #endif
@@ -280,28 +245,21 @@ void lv_draw_print_file(void) {
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
   }
   */
 }
 static char test_public_buf_l[40];
 void disp_gcode_icon(uint8_t file_num) {
   uint8_t i;
 
-  scr = lv_obj_create(NULL, NULL);
-
-  //static lv_style_t tool_style;
-
-  lv_obj_set_style(scr, &tft_style_scr);
-  lv_scr_load(scr);
-  lv_obj_clean(scr);
-
+  scr = lv_screen_create();
   (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   // Create image buttons
   buttonPageUp   = lv_imgbtn_create(scr, "F:/bmp_pageUp.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_P_UP);
   buttonPageDown = lv_imgbtn_create(scr, "F:/bmp_pageDown.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL + INTERVAL_H, event_handler, ID_P_DOWN);
   buttonBack     = lv_imgbtn_create(scr, "F:/bmp_back.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL * 2 + INTERVAL_H * 2, event_handler, ID_P_RETURN);
 
   // Create labels on the image buttons
@@ -312,81 +270,80 @@ void disp_gcode_icon(uint8_t file_num) {
       back_flg = 1;
     }
     else {
       j = i;
       back_flg = 0;
     }
     */
     if (i >= file_num) break;
 
     #ifdef TFT35
-      buttonGcode[i] = lv_imgbtn_create(scr, NULL);
+      buttonGcode[i] = lv_imgbtn_create(scr, nullptr);
 
       lv_imgbtn_use_label_style(buttonGcode[i]);
       lv_obj_clear_protect(buttonGcode[i], LV_PROTECT_FOLLOW);
       lv_btn_set_layout(buttonGcode[i], LV_LAYOUT_OFF);
 
       ZERO(public_buf_m);
-      cutFileName((char *)list_file.long_name[i], 16, 8,  (char *)public_buf_m);
+      cutFileName((char *)list_file.long_name[i], 16, 8, (char *)public_buf_m);
 
-      if (list_file.IsFolder[i] == 1) {
-        lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), NULL, 0);
+      if (list_file.IsFolder[i]) {
+        lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), nullptr, 0);
         lv_imgbtn_set_src_both(buttonGcode[i], "F:/bmp_dir.bin");
         if (i < 3)
           lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
         else
           lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
         labelPageUp[i] = lv_label_create(buttonGcode[i], public_buf_m);
         lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
       }
       else {
         if (have_pre_pic((char *)list_file.file_name[i])) {
 
           //lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), list_file.file_name[i], 1);
 
-          ZERO(test_public_buf_l);
-          strcat(test_public_buf_l,"S:");
-          strcat(test_public_buf_l,list_file.file_name[i]);
-          char *temp = strstr(test_public_buf_l,".GCO");
-          if (temp) { strcpy(temp,".bin"); }
-          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), NULL, 0);
+          strcpy(test_public_buf_l, "S:");
+          strcat(test_public_buf_l, list_file.file_name[i]);
+          char *temp = strstr(test_public_buf_l, ".GCO");
+          if (temp) strcpy(temp, ".bin");
+          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), nullptr, 0);
           lv_imgbtn_set_src_both(buttonGcode[i], test_public_buf_l);
           if (i < 3) {
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET);
-            buttonText[i] = lv_btn_create(scr, NULL);
+            buttonText[i] = lv_btn_create(scr, nullptr);
             //lv_obj_set_event_cb(buttonText[i], event_handler);
 
             lv_btn_use_label_style(buttonText[i]);
             lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
             lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
-            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),NULL, 0);
+            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),nullptr, 0);
             lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
             lv_obj_set_size(buttonText[i], 100, 40);
           }
           else {
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET);
-            buttonText[i] = lv_btn_create(scr, NULL);
+            buttonText[i] = lv_btn_create(scr, nullptr);
             //lv_obj_set_event_cb(buttonText[i], event_handler);
 
             lv_btn_use_label_style(buttonText[i]);
             lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
             lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
-            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),NULL, 0);
+            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),nullptr, 0);
             lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
             lv_obj_set_size(buttonText[i], 100, 40);
           }
           labelPageUp[i] = lv_label_create(buttonText[i], public_buf_m);
           lv_obj_align(labelPageUp[i], buttonText[i], LV_ALIGN_IN_BOTTOM_MID, 0, 0);
         }
         else {
-          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), NULL, 0);
+          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), nullptr, 0);
           lv_imgbtn_set_src_both(buttonGcode[i], "F:/bmp_file.bin");
           if (i < 3)
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
           else
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
           labelPageUp[i] = lv_label_create(buttonGcode[i], public_buf_m);
           lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
         }
       }
@@ -495,21 +452,21 @@ void lv_gcode_file_read(uint8_t *data_buf) {
     memcpy(data_buf, public_buf, 200);
   #endif // SDSUPPORT
 }
 
 void lv_close_gcode_file() {TERN_(SDSUPPORT, card.closefile());}
 
 void lv_gcode_file_seek(uint32_t pos) {
   card.setIndex(pos);
 }
 
-void cutFileName(char *path, int len, int bytePerLine,  char *outStr) {
+void cutFileName(char *path, int len, int bytePerLine, char *outStr) {
   #if _LFN_UNICODE
     TCHAR *tmpFile;
     TCHAR *strIndex1 = 0, *strIndex2 = 0, *beginIndex;
     TCHAR secSeg[10]   = {0};
     TCHAR gFileTail[4] = {'~', '.', 'g', '\0'};
   #else
     char *tmpFile;
     char *strIndex1 = 0, *strIndex2 = 0, *beginIndex;
     char secSeg[10] = {0};
   #endif

commit 4533a197d59ffcaccc4d476f06df7754b11b9b0c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 22 20:22:17 2020 -0500

    Slim down MKS UI code (#19843)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index d92943a37c..8db84c5159 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -259,23 +259,23 @@ void lv_draw_print_file(void) {
   ZERO(list_file.IsFolder);
   ZERO(list_file.curDirPath);
 
   list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
   #if ENABLED(SDSUPPORT)
     card.mount();
     file_count = search_file();
   #endif
   disp_gcode_icon(file_count);
 
-  //lv_obj_t *labelPageUp = lv_label_create(buttonPageUp, NULL);
-  //lv_obj_t *labelPageDown = lv_label_create(buttonPageDown, NULL);
-  //lv_obj_t *label_Back = lv_label_create(buttonBack, NULL);
+  //lv_obj_t *labelPageUp = lv_label_create_empty(buttonPageUp);
+  //lv_obj_t *labelPageDown = lv_label_create_empty(buttonPageDown);
+  //lv_obj_t *label_Back = lv_label_create_empty(buttonBack);
 
   /*
   if (gCfgItems.multiple_language) {
     lv_label_set_text(labelPageUp, tool_menu.preheat);
     lv_obj_align(labelPageUp, buttonPageUp, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelPageDown, tool_menu.extrude);
     lv_obj_align(labelPageDown, buttonPageDown, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
@@ -288,159 +288,112 @@ void disp_gcode_icon(uint8_t file_num) {
   uint8_t i;
 
   scr = lv_obj_create(NULL, NULL);
 
   //static lv_style_t tool_style;
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
-  lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_label_rel);
-  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
-  lv_label_set_text(title, creat_title_text());
+  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   // Create image buttons
-  buttonPageUp   = lv_imgbtn_create(scr, NULL);
-  buttonPageDown = lv_imgbtn_create(scr, NULL);
-  buttonBack     = lv_imgbtn_create(scr, NULL);
-
-  lv_obj_set_event_cb_mks(buttonPageUp, event_handler, ID_P_UP, NULL, 0);
-  lv_imgbtn_set_src(buttonPageUp, LV_BTN_STATE_REL, "F:/bmp_pageUp.bin");
-  lv_imgbtn_set_src(buttonPageUp, LV_BTN_STATE_PR, "F:/bmp_pageUp.bin");
-  lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_PR, &tft_style_label_pre);
-  lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-  #if 1
-    lv_obj_set_event_cb_mks(buttonPageDown, event_handler, ID_P_DOWN, NULL, 0);
-    lv_imgbtn_set_src(buttonPageDown, LV_BTN_STATE_REL, "F:/bmp_pageDown.bin");
-    lv_imgbtn_set_src(buttonPageDown, LV_BTN_STATE_PR, "F:/bmp_pageDown.bin");
-    lv_imgbtn_set_style(buttonPageDown, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonPageDown, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_P_RETURN, NULL, 0);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, "F:/bmp_back.bin");
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, "F:/bmp_back.bin");
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
-  #endif
-
-  lv_obj_set_pos(buttonPageUp, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight);
-  lv_obj_set_pos(buttonPageDown, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL + INTERVAL_H);
-  lv_obj_set_pos(buttonBack, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL * 2 + INTERVAL_H * 2);
+  buttonPageUp   = lv_imgbtn_create(scr, "F:/bmp_pageUp.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_P_UP);
+  buttonPageDown = lv_imgbtn_create(scr, "F:/bmp_pageDown.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL + INTERVAL_H, event_handler, ID_P_DOWN);
+  buttonBack     = lv_imgbtn_create(scr, "F:/bmp_back.bin", OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL * 2 + INTERVAL_H * 2, event_handler, ID_P_RETURN);
 
   // Create labels on the image buttons
-  lv_btn_set_layout(buttonPageUp, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonPageDown, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
-
   for (i = 0; i < FILE_BTN_CNT; i++) {
     /*
     if (seq) {
       j = (FILE_BTN_CNT-1) - i;
       back_flg = 1;
     }
     else {
       j = i;
       back_flg = 0;
     }
     */
     if (i >= file_num) break;
 
     #ifdef TFT35
       buttonGcode[i] = lv_imgbtn_create(scr, NULL);
 
-      lv_imgbtn_set_style(buttonGcode[i], LV_BTN_STATE_PR, &tft_style_label_pre);
-      lv_imgbtn_set_style(buttonGcode[i], LV_BTN_STATE_REL, &tft_style_label_rel);
+      lv_imgbtn_use_label_style(buttonGcode[i]);
       lv_obj_clear_protect(buttonGcode[i], LV_PROTECT_FOLLOW);
       lv_btn_set_layout(buttonGcode[i], LV_LAYOUT_OFF);
 
       ZERO(public_buf_m);
       cutFileName((char *)list_file.long_name[i], 16, 8,  (char *)public_buf_m);
 
       if (list_file.IsFolder[i] == 1) {
         lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), NULL, 0);
-        lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, "F:/bmp_dir.bin");
-        lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, "F:/bmp_dir.bin");
+        lv_imgbtn_set_src_both(buttonGcode[i], "F:/bmp_dir.bin");
         if (i < 3)
           lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
         else
           lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
-        labelPageUp[i] = lv_label_create(buttonGcode[i], NULL);
-        lv_obj_set_style(labelPageUp[i], &tft_style_label_rel);
-        lv_label_set_text(labelPageUp[i], public_buf_m);
+        labelPageUp[i] = lv_label_create(buttonGcode[i], public_buf_m);
         lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
       }
       else {
         if (have_pre_pic((char *)list_file.file_name[i])) {
 
           //lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), list_file.file_name[i], 1);
 
           ZERO(test_public_buf_l);
           strcat(test_public_buf_l,"S:");
           strcat(test_public_buf_l,list_file.file_name[i]);
           char *temp = strstr(test_public_buf_l,".GCO");
           if (temp) { strcpy(temp,".bin"); }
           lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), NULL, 0);
-          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, test_public_buf_l);
-          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, test_public_buf_l);
+          lv_imgbtn_set_src_both(buttonGcode[i], test_public_buf_l);
           if (i < 3) {
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET);
             buttonText[i] = lv_btn_create(scr, NULL);
             //lv_obj_set_event_cb(buttonText[i], event_handler);
 
-            lv_btn_set_style(buttonText[i], LV_BTN_STATE_PR, &tft_style_label_pre);
-            lv_btn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_label_rel);
-            //lv_obj_set_style(buttonText[i], &tft_style_label_pre);
-            //lv_obj_set_style(buttonText[i], &tft_style_label_rel);
+            lv_btn_use_label_style(buttonText[i]);
             lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
             lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
-            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),NULL,0);
+            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),NULL, 0);
             lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
             lv_obj_set_size(buttonText[i], 100, 40);
           }
           else {
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET);
             buttonText[i] = lv_btn_create(scr, NULL);
             //lv_obj_set_event_cb(buttonText[i], event_handler);
 
-            lv_btn_set_style(buttonText[i], LV_BTN_STATE_PR, &tft_style_label_pre);
-            lv_btn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_label_rel);
-
-            //lv_imgbtn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_label_rel);
+            lv_btn_use_label_style(buttonText[i]);
             lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
             lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
-            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),NULL,0);
+            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),NULL, 0);
             lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
             lv_obj_set_size(buttonText[i], 100, 40);
           }
-          labelPageUp[i] = lv_label_create(buttonText[i], NULL);
-          lv_obj_set_style(labelPageUp[i], &tft_style_label_rel);
-          lv_label_set_text(labelPageUp[i], public_buf_m);
+          labelPageUp[i] = lv_label_create(buttonText[i], public_buf_m);
           lv_obj_align(labelPageUp[i], buttonText[i], LV_ALIGN_IN_BOTTOM_MID, 0, 0);
         }
         else {
           lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), NULL, 0);
-          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, "F:/bmp_file.bin");
-          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, "F:/bmp_file.bin");
+          lv_imgbtn_set_src_both(buttonGcode[i], "F:/bmp_file.bin");
           if (i < 3)
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
           else
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
-          labelPageUp[i] = lv_label_create(buttonGcode[i], NULL);
-          lv_obj_set_style(labelPageUp[i], &tft_style_label_rel);
-          lv_label_set_text(labelPageUp[i], public_buf_m);
+          labelPageUp[i] = lv_label_create(buttonGcode[i], public_buf_m);
           lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
         }
       }
       #if HAS_ROTARY_ENCODER
         if (gCfgItems.encoder_enable) lv_group_add_obj(g, buttonGcode[i]);
       #endif
 
     #else // !TFT35
     #endif // !TFT35
   }

commit 072f996af70b5ac635893eca2d4bd4bbb4f00acc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 21 12:45:27 2020 -0500

    General cleanup, mostly MKS UI (#19825)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index e84bb395e0..d92943a37c 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -16,28 +16,29 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
-#include "../../../../MarlinCore.h"
-#include "lv_conf.h"
+#include "draw_ui.h"
+#include <lv_conf.h>
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
-#include "draw_ui.h"
+
 #include "../../../../sd/cardreader.h"
+#include "../../../../inc/MarlinConfig.h"
 
 static lv_obj_t * scr;
 extern lv_group_t*  g;
 
 static lv_obj_t *buttonPageUp, *buttonPageDown, *buttonBack,
                 *buttonGcode[FILE_BTN_CNT], *labelPageUp[FILE_BTN_CNT], *buttonText[FILE_BTN_CNT];
 
 #define ID_P_UP     7
 #define ID_P_DOWN   8
 #define ID_P_RETURN 9
@@ -263,21 +264,21 @@ void lv_draw_print_file(void) {
     card.mount();
     file_count = search_file();
   #endif
   disp_gcode_icon(file_count);
 
   //lv_obj_t *labelPageUp = lv_label_create(buttonPageUp, NULL);
   //lv_obj_t *labelPageDown = lv_label_create(buttonPageDown, NULL);
   //lv_obj_t *label_Back = lv_label_create(buttonBack, NULL);
 
   /*
-  if (gCfgItems.multiple_language != 0) {
+  if (gCfgItems.multiple_language) {
     lv_label_set_text(labelPageUp, tool_menu.preheat);
     lv_obj_align(labelPageUp, buttonPageUp, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelPageDown, tool_menu.extrude);
     lv_obj_align(labelPageDown, buttonPageDown, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
   }
   */

commit f6ffbe548c81abfeecc996c8f2bffd27cabe0014
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 15 03:00:27 2020 -0500

    TFT Presets, Generic options, Sanity checks (#19723)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index 6d7b68af42..e84bb395e0 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -513,38 +513,38 @@ void lv_gcode_file_read(uint8_t *data_buf) {
       }
 
       uint16_t c = card.get();
       // check if we have more data or finished the line (CR)
       if (c == '\r') break;
       card.setIndex(card.getIndex());
       k++;
       j = 0;
       ignore_start = false;
     }
-    #if ENABLED(TFT_LVGL_UI_SPI)
+    #if HAS_TFT_LVGL_UI_SPI
       for (i = 0; i < 200;) {
         p_index = (uint16_t *)(&public_buf[i]);
 
         //Color = (*p_index >> 8);
         //*p_index = Color | ((*p_index & 0xFF) << 8);
         i += 2;
         if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full;
       }
-    #else
+    #else // !HAS_TFT_LVGL_UI_SPI
       for (i = 0; i < 200;) {
         p_index = (uint16_t *)(&public_buf[i]);
         //Color = (*p_index >> 8);
         //*p_index = Color | ((*p_index & 0xFF) << 8);
         i += 2;
         if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full; // 0x18C3;
       }
-    #endif // TFT_LVGL_UI_SPI
+    #endif // !HAS_TFT_LVGL_UI_SPI
     memcpy(data_buf, public_buf, 200);
   #endif // SDSUPPORT
 }
 
 void lv_close_gcode_file() {TERN_(SDSUPPORT, card.closefile());}
 
 void lv_gcode_file_seek(uint32_t pos) {
   card.setIndex(pos);
 }
 

commit 6831341ab483a49d7daad4c704bb684d3cbbf075
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Oct 9 16:50:17 2020 -0500

    Batch appercase hex values

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index add0f0394b..6d7b68af42 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -472,23 +472,23 @@ uint32_t lv_open_gcode_file(char *path) {
   #endif // SDSUPPORT
 }
 
 int ascii2dec_test(char *ascii) {
   int result = 0;
   if (ascii == 0) return 0;
 
   if (*(ascii) >= '0' && *(ascii) <= '9')
     result = *(ascii) - '0';
   else if (*(ascii) >= 'a' && *(ascii) <= 'f')
-    result = *(ascii) - 'a' + 0x0a;
+    result = *(ascii) - 'a' + 0x0A;
   else if (*(ascii) >= 'A' && *(ascii) <= 'F')
-    result = *(ascii) - 'A' + 0x0a;
+    result = *(ascii) - 'A' + 0x0A;
   else
     return 0;
 
   return result;
 }
 
 void lv_gcode_file_read(uint8_t *data_buf) {
   #if ENABLED(SDSUPPORT)
     uint16_t i = 0, j = 0, k = 0;
     uint16_t row_1    = 0;
@@ -518,29 +518,29 @@ void lv_gcode_file_read(uint8_t *data_buf) {
       card.setIndex(card.getIndex());
       k++;
       j = 0;
       ignore_start = false;
     }
     #if ENABLED(TFT_LVGL_UI_SPI)
       for (i = 0; i < 200;) {
         p_index = (uint16_t *)(&public_buf[i]);
 
         //Color = (*p_index >> 8);
-        //*p_index = Color | ((*p_index & 0xff) << 8);
+        //*p_index = Color | ((*p_index & 0xFF) << 8);
         i += 2;
         if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full;
       }
     #else
       for (i = 0; i < 200;) {
         p_index = (uint16_t *)(&public_buf[i]);
         //Color = (*p_index >> 8);
-        //*p_index = Color | ((*p_index & 0xff) << 8);
+        //*p_index = Color | ((*p_index & 0xFF) << 8);
         i += 2;
         if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full; // 0x18C3;
       }
     #endif // TFT_LVGL_UI_SPI
     memcpy(data_buf, public_buf, 200);
   #endif // SDSUPPORT
 }
 
 void lv_close_gcode_file() {TERN_(SDSUPPORT, card.closefile());}
 

commit d8ed74904559aa8bdccc8b68acbccfbf1bf779d3
Author: makerbase <4164049@qq.com>
Date:   Mon Sep 21 09:55:02 2020 +0800

    Add MKS Robin E3P, improve LVGL UI (#19442)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index 13a92269f8..add0f0394b 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -26,20 +26,21 @@
 #include "../../../../MarlinCore.h"
 #include "lv_conf.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 #include "draw_ui.h"
 #include "../../../../sd/cardreader.h"
 
 static lv_obj_t * scr;
+extern lv_group_t*  g;
 
 static lv_obj_t *buttonPageUp, *buttonPageDown, *buttonBack,
                 *buttonGcode[FILE_BTN_CNT], *labelPageUp[FILE_BTN_CNT], *buttonText[FILE_BTN_CNT];
 
 #define ID_P_UP     7
 #define ID_P_DOWN   8
 #define ID_P_RETURN 9
 
 int8_t curDirLever = 0;
 LIST_FILE list_file;
@@ -125,64 +126,59 @@ uint8_t have_pre_pic(char *path) {
     if (ps1 || ps2) {
       card.closefile();
       return 1;
     }
     card.closefile();
   #endif
 
   return 0;
 }
 
-LV_IMG_DECLARE(bmp_pic_117x92);
-LV_IMG_DECLARE(bmp_pic_100x100);
-LV_IMG_DECLARE(bmp_pic);
-LV_IMG_DECLARE(bmp_pic_100x40);
-
 static void event_handler(lv_obj_t * obj, lv_event_t event) {
   uint8_t i, file_count = 0;
   //switch (obj->mks_obj_id)
   //{
   if (obj->mks_obj_id == ID_P_UP) {
     if (event == LV_EVENT_CLICKED) {
     }
     else if (event == LV_EVENT_RELEASED) {
       if (dir_offset[curDirLever].curPage > 0) {
         // 2015.05.19
         list_file.Sd_file_cnt = 0;
 
         if (dir_offset[curDirLever].cur_page_first_offset >= FILE_NUM)
           list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset - FILE_NUM;
 
         #if ENABLED(SDSUPPORT)
           file_count = search_file();
         #endif
         if (file_count != 0) {
           dir_offset[curDirLever].curPage--;
-          lv_obj_del(scr);
+          lv_clear_print_file();
           disp_gcode_icon(file_count);
         }
       }
     }
   }
   else if (obj->mks_obj_id == ID_P_DOWN) {
     if (event == LV_EVENT_CLICKED) {
     }
     else if (event == LV_EVENT_RELEASED) {
       if (dir_offset[curDirLever].cur_page_last_offset > 0) {
         list_file.Sd_file_cnt    = 0;
         list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_last_offset + 1;
         #if ENABLED(SDSUPPORT)
           file_count = search_file();
         #endif
         if (file_count != 0) {
           dir_offset[curDirLever].curPage++;
-          lv_obj_del(scr);
+          lv_clear_print_file();
           disp_gcode_icon(file_count);
         }
         if (file_count < FILE_NUM)
           dir_offset[curDirLever].cur_page_last_offset = 0;
       }
     }
   }
   else if (obj->mks_obj_id == ID_P_RETURN) {
     if (event == LV_EVENT_CLICKED) {
     }
@@ -195,51 +191,51 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
             card.cdup();
           #endif
           dir_offset[curDirLever].curPage               = 0;
           dir_offset[curDirLever].cur_page_first_offset = 0;
           dir_offset[curDirLever].cur_page_last_offset  = 0;
           curDirLever--;
           list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
           #if ENABLED(SDSUPPORT)
             file_count = search_file();
           #endif
-          lv_obj_del(scr);
+          lv_clear_print_file();
           disp_gcode_icon(file_count);
         }
       }
       else {
-        lv_obj_del(scr);
+        lv_clear_print_file();
         lv_draw_ready_print();
       }
     }
   }
   else {
     for (i = 0; i < FILE_BTN_CNT; i++) {
       if (obj->mks_obj_id == (i + 1)) {
         if (event == LV_EVENT_CLICKED) {
         }
         else if (event == LV_EVENT_RELEASED) {
           if (list_file.file_name[i][0] != 0) {
             if (list_file.IsFolder[i] == 1) {
               ZERO(list_file.curDirPath);
               strcpy(list_file.curDirPath,  list_file.file_name[i]);
               curDirLever++;
               list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
               #if ENABLED(SDSUPPORT)
                 file_count = search_file();
               #endif
-              lv_obj_del(scr);
+              lv_clear_print_file();
               disp_gcode_icon(file_count);
             }
             else {
               sel_id = i;
-              lv_obj_del(scr);
+              lv_clear_print_file();
               lv_draw_dialog(DIALOG_TYPE_PRINT_FILE);
             }
             break;
           }
         }
       }
     }
   }
 }
 
@@ -262,38 +258,38 @@ void lv_draw_print_file(void) {
   ZERO(list_file.IsFolder);
   ZERO(list_file.curDirPath);
 
   list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
   #if ENABLED(SDSUPPORT)
     card.mount();
     file_count = search_file();
   #endif
   disp_gcode_icon(file_count);
 
-  //lv_obj_t * labelPageUp = lv_label_create(buttonPageUp, NULL);
-  //lv_obj_t * labelPageDown = lv_label_create(buttonPageDown, NULL);
-  //lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
+  //lv_obj_t *labelPageUp = lv_label_create(buttonPageUp, NULL);
+  //lv_obj_t *labelPageDown = lv_label_create(buttonPageDown, NULL);
+  //lv_obj_t *label_Back = lv_label_create(buttonBack, NULL);
 
   /*
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(labelPageUp, tool_menu.preheat);
     lv_obj_align(labelPageUp, buttonPageUp, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelPageDown, tool_menu.extrude);
     lv_obj_align(labelPageDown, buttonPageDown, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
   }
   */
 }
-
+static char test_public_buf_l[40];
 void disp_gcode_icon(uint8_t file_num) {
   uint8_t i;
 
   scr = lv_obj_create(NULL, NULL);
 
   //static lv_style_t tool_style;
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
@@ -303,37 +299,36 @@ void disp_gcode_icon(uint8_t file_num) {
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   // Create image buttons
   buttonPageUp   = lv_imgbtn_create(scr, NULL);
   buttonPageDown = lv_imgbtn_create(scr, NULL);
   buttonBack     = lv_imgbtn_create(scr, NULL);
 
-  lv_obj_set_event_cb_mks(buttonPageUp, event_handler, ID_P_UP, "bmp_pageUp.bin", 0);
-  lv_imgbtn_set_src(buttonPageUp, LV_BTN_STATE_REL, &bmp_pic_117x92);
-  lv_imgbtn_set_src(buttonPageUp, LV_BTN_STATE_PR, &bmp_pic_117x92);
+  lv_obj_set_event_cb_mks(buttonPageUp, event_handler, ID_P_UP, NULL, 0);
+  lv_imgbtn_set_src(buttonPageUp, LV_BTN_STATE_REL, "F:/bmp_pageUp.bin");
+  lv_imgbtn_set_src(buttonPageUp, LV_BTN_STATE_PR, "F:/bmp_pageUp.bin");
   lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_PR, &tft_style_label_pre);
   lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_REL, &tft_style_label_rel);
-  lv_obj_clear_protect(buttonPageUp, LV_PROTECT_FOLLOW);
 
   #if 1
-    lv_obj_set_event_cb_mks(buttonPageDown, event_handler, ID_P_DOWN, "bmp_pageDown.bin", 0);
-    lv_imgbtn_set_src(buttonPageDown, LV_BTN_STATE_REL, &bmp_pic_117x92);
-    lv_imgbtn_set_src(buttonPageDown, LV_BTN_STATE_PR, &bmp_pic_117x92);
+    lv_obj_set_event_cb_mks(buttonPageDown, event_handler, ID_P_DOWN, NULL, 0);
+    lv_imgbtn_set_src(buttonPageDown, LV_BTN_STATE_REL, "F:/bmp_pageDown.bin");
+    lv_imgbtn_set_src(buttonPageDown, LV_BTN_STATE_PR, "F:/bmp_pageDown.bin");
     lv_imgbtn_set_style(buttonPageDown, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonPageDown, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_P_RETURN, "bmp_back.bin", 0);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic_117x92);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic_117x92);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_P_RETURN, NULL, 0);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, "F:/bmp_back.bin");
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, "F:/bmp_back.bin");
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonPageUp, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonPageDown, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL + INTERVAL_H);
   lv_obj_set_pos(buttonBack, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL * 2 + INTERVAL_H * 2);
 
   // Create labels on the image buttons
   lv_btn_set_layout(buttonPageUp, LV_LAYOUT_OFF);
@@ -358,117 +353,132 @@ void disp_gcode_icon(uint8_t file_num) {
 
       lv_imgbtn_set_style(buttonGcode[i], LV_BTN_STATE_PR, &tft_style_label_pre);
       lv_imgbtn_set_style(buttonGcode[i], LV_BTN_STATE_REL, &tft_style_label_rel);
       lv_obj_clear_protect(buttonGcode[i], LV_PROTECT_FOLLOW);
       lv_btn_set_layout(buttonGcode[i], LV_LAYOUT_OFF);
 
       ZERO(public_buf_m);
       cutFileName((char *)list_file.long_name[i], 16, 8,  (char *)public_buf_m);
 
       if (list_file.IsFolder[i] == 1) {
-        lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "bmp_dir.bin", 0);
-        lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, &bmp_pic);
-        lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, &bmp_pic);
+        lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), NULL, 0);
+        lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, "F:/bmp_dir.bin");
+        lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, "F:/bmp_dir.bin");
         if (i < 3)
           lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
         else
           lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
         labelPageUp[i] = lv_label_create(buttonGcode[i], NULL);
         lv_obj_set_style(labelPageUp[i], &tft_style_label_rel);
         lv_label_set_text(labelPageUp[i], public_buf_m);
         lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
       }
       else {
         if (have_pre_pic((char *)list_file.file_name[i])) {
-          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), list_file.file_name[i], 1);
-          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, &bmp_pic_100x100);
-          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, &bmp_pic_100x100);
+
+          //lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), list_file.file_name[i], 1);
+
+          ZERO(test_public_buf_l);
+          strcat(test_public_buf_l,"S:");
+          strcat(test_public_buf_l,list_file.file_name[i]);
+          char *temp = strstr(test_public_buf_l,".GCO");
+          if (temp) { strcpy(temp,".bin"); }
+          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), NULL, 0);
+          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, test_public_buf_l);
+          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, test_public_buf_l);
           if (i < 3) {
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET);
             buttonText[i] = lv_btn_create(scr, NULL);
             //lv_obj_set_event_cb(buttonText[i], event_handler);
 
             lv_btn_set_style(buttonText[i], LV_BTN_STATE_PR, &tft_style_label_pre);
             lv_btn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_label_rel);
             //lv_obj_set_style(buttonText[i], &tft_style_label_pre);
             //lv_obj_set_style(buttonText[i], &tft_style_label_rel);
             lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
             lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
             //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),NULL,0);
-            //lv_imgbtn_set_src(buttonText[i], LV_BTN_STATE_REL, &bmp_pic_100x40);
-            //lv_imgbtn_set_src(buttonText[i], LV_BTN_STATE_PR, &bmp_pic_100x40);
             lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
             lv_obj_set_size(buttonText[i], 100, 40);
           }
           else {
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET);
             buttonText[i] = lv_btn_create(scr, NULL);
             //lv_obj_set_event_cb(buttonText[i], event_handler);
 
             lv_btn_set_style(buttonText[i], LV_BTN_STATE_PR, &tft_style_label_pre);
             lv_btn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_label_rel);
 
             //lv_imgbtn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_label_rel);
             lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
             lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
             //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),NULL,0);
-            //lv_imgbtn_set_src(buttonText[i], LV_BTN_STATE_REL, &bmp_pic_100x40);
-            //lv_imgbtn_set_src(buttonText[i], LV_BTN_STATE_PR, &bmp_pic_100x40);
             lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
             lv_obj_set_size(buttonText[i], 100, 40);
           }
           labelPageUp[i] = lv_label_create(buttonText[i], NULL);
           lv_obj_set_style(labelPageUp[i], &tft_style_label_rel);
           lv_label_set_text(labelPageUp[i], public_buf_m);
           lv_obj_align(labelPageUp[i], buttonText[i], LV_ALIGN_IN_BOTTOM_MID, 0, 0);
         }
         else {
-          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "bmp_file.bin", 0);
-          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, &bmp_pic);
-          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, &bmp_pic);
+          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), NULL, 0);
+          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, "F:/bmp_file.bin");
+          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, "F:/bmp_file.bin");
           if (i < 3)
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
           else
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
           labelPageUp[i] = lv_label_create(buttonGcode[i], NULL);
           lv_obj_set_style(labelPageUp[i], &tft_style_label_rel);
           lv_label_set_text(labelPageUp[i], public_buf_m);
           lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
         }
       }
+      #if HAS_ROTARY_ENCODER
+        if (gCfgItems.encoder_enable) lv_group_add_obj(g, buttonGcode[i]);
+      #endif
+
     #else // !TFT35
     #endif // !TFT35
   }
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) {
+      lv_group_add_obj(g, buttonPageUp);
+      lv_group_add_obj(g, buttonPageDown);
+      lv_group_add_obj(g, buttonBack);
+    }
+  #endif
 }
 
-void lv_open_gcode_file(char *path) {
+uint32_t lv_open_gcode_file(char *path) {
   #if ENABLED(SDSUPPORT)
     uint32_t *ps4;
-    int pre_sread_cnt;
+    uint32_t pre_sread_cnt = 0;
     char *cur_name;
 
     cur_name = strrchr(path, '/');
 
     card.openFileRead(cur_name);
     card.read(public_buf, 512);
     ps4 = (uint32_t *)strstr((char *)public_buf, ";simage:");
     // Ignore the beginning message of gcode file
     if (ps4) {
       pre_sread_cnt = (uint32_t)ps4 - (uint32_t)((uint32_t *)(&public_buf[0]));
       card.setIndex(pre_sread_cnt);
     }
+    return pre_sread_cnt;
   #endif // SDSUPPORT
 }
 
-
 int ascii2dec_test(char *ascii) {
   int result = 0;
   if (ascii == 0) return 0;
 
   if (*(ascii) >= '0' && *(ascii) <= '9')
     result = *(ascii) - '0';
   else if (*(ascii) >= 'a' && *(ascii) <= 'f')
     result = *(ascii) - 'a' + 0x0a;
   else if (*(ascii) >= 'A' && *(ascii) <= 'F')
     result = *(ascii) - 'A' + 0x0a;
@@ -527,20 +537,24 @@ void lv_gcode_file_read(uint8_t *data_buf) {
         i += 2;
         if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full; // 0x18C3;
       }
     #endif // TFT_LVGL_UI_SPI
     memcpy(data_buf, public_buf, 200);
   #endif // SDSUPPORT
 }
 
 void lv_close_gcode_file() {TERN_(SDSUPPORT, card.closefile());}
 
+void lv_gcode_file_seek(uint32_t pos) {
+  card.setIndex(pos);
+}
+
 void cutFileName(char *path, int len, int bytePerLine,  char *outStr) {
   #if _LFN_UNICODE
     TCHAR *tmpFile;
     TCHAR *strIndex1 = 0, *strIndex2 = 0, *beginIndex;
     TCHAR secSeg[10]   = {0};
     TCHAR gFileTail[4] = {'~', '.', 'g', '\0'};
   #else
     char *tmpFile;
     char *strIndex1 = 0, *strIndex2 = 0, *beginIndex;
     char secSeg[10] = {0};
@@ -609,13 +623,18 @@ void cutFileName(char *path, int len, int bytePerLine,  char *outStr) {
       outStr[bytePerLine]     = '\n';
       outStr[bytePerLine + 1] = '\0';
       strcat(outStr, secSeg);
     }
     else {
       strcat_P(outStr, PSTR("\n"));
     }
   #endif
 }
 
-void lv_clear_print_file() { lv_obj_del(scr); }
+void lv_clear_print_file() {
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
+  #endif
+  lv_obj_del(scr);
+}
 
 #endif // HAS_TFT_LVGL_UI

commit 60ab7a1ddbda1b1a6d20cbeb5c574ce775f57a4b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 20 19:07:59 2020 -0500

    Cleanup before MKS changes

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index 33405a905f..13a92269f8 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -298,20 +298,21 @@ void disp_gcode_icon(uint8_t file_num) {
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
   lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
+  // Create image buttons
   buttonPageUp   = lv_imgbtn_create(scr, NULL);
   buttonPageDown = lv_imgbtn_create(scr, NULL);
   buttonBack     = lv_imgbtn_create(scr, NULL);
 
   lv_obj_set_event_cb_mks(buttonPageUp, event_handler, ID_P_UP, "bmp_pageUp.bin", 0);
   lv_imgbtn_set_src(buttonPageUp, LV_BTN_STATE_REL, &bmp_pic_117x92);
   lv_imgbtn_set_src(buttonPageUp, LV_BTN_STATE_PR, &bmp_pic_117x92);
   lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_PR, &tft_style_label_pre);
   lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_REL, &tft_style_label_rel);
   lv_obj_clear_protect(buttonPageUp, LV_PROTECT_FOLLOW);
@@ -327,22 +328,21 @@ void disp_gcode_icon(uint8_t file_num) {
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic_117x92);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic_117x92);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonPageUp, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonPageDown, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL + INTERVAL_H);
   lv_obj_set_pos(buttonBack, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL * 2 + INTERVAL_H * 2);
 
-  /*Create a label on the Image button*/
-
+  // Create labels on the image buttons
   lv_btn_set_layout(buttonPageUp, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonPageDown, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
   for (i = 0; i < FILE_BTN_CNT; i++) {
     /*
     if (seq) {
       j = (FILE_BTN_CNT-1) - i;
       back_flg = 1;
     }

commit bc688f27dc6db76021da584bc529f29ddb6f6cce
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Jul 25 01:53:07 2020 -0500

    Clean up after changes

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index 84853cff9d..33405a905f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -65,26 +65,28 @@ uint8_t sel_id = 0;
     if (curDirLever != 0) card.cd(list_file.curDirPath);
     else card.cdroot(); // while(card.cdup());
 
     const uint16_t fileCnt = card.get_num_Files();
 
     for (uint16_t i = 0; i < fileCnt; i++) {
       if (list_file.Sd_file_cnt == list_file.Sd_file_offset) {
         const uint16_t nr = SD_ORDER(i, fileCnt);
         card.getfilename_sorted(nr);
 
-        if (card.flag.filenameIsDir)
+        if (card.flag.filenameIsDir) {
           //SERIAL_ECHOLN(card.longest_filename);
           list_file.IsFolder[valid_name_cnt] = 1;
-        else
+        }
+        else {
           //SERIAL_ECHOLN(card.longFilename);
           list_file.IsFolder[valid_name_cnt] = 0;
+        }
 
         #if 1
           //
           memset(list_file.file_name[valid_name_cnt], 0, strlen(list_file.file_name[valid_name_cnt]));
           strcpy(list_file.file_name[valid_name_cnt], list_file.curDirPath);
           strcat_P(list_file.file_name[valid_name_cnt], PSTR("/"));
           strcat(list_file.file_name[valid_name_cnt], card.filename);
           //
           memset(list_file.long_name[valid_name_cnt], 0, strlen(list_file.long_name[valid_name_cnt]));
           if (card.longFilename[0] == 0)
@@ -516,21 +518,21 @@ void lv_gcode_file_read(uint8_t *data_buf) {
         //*p_index = Color | ((*p_index & 0xff) << 8);
         i += 2;
         if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full;
       }
     #else
       for (i = 0; i < 200;) {
         p_index = (uint16_t *)(&public_buf[i]);
         //Color = (*p_index >> 8);
         //*p_index = Color | ((*p_index & 0xff) << 8);
         i += 2;
-        if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full; // 0x18C3; //
+        if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full; // 0x18C3;
       }
     #endif // TFT_LVGL_UI_SPI
     memcpy(data_buf, public_buf, 200);
   #endif // SDSUPPORT
 }
 
 void lv_close_gcode_file() {TERN_(SDSUPPORT, card.closefile());}
 
 void cutFileName(char *path, int len, int bytePerLine,  char *outStr) {
   #if _LFN_UNICODE
@@ -549,21 +551,21 @@ void cutFileName(char *path, int len, int bytePerLine,  char *outStr) {
   tmpFile = path;
   #if _LFN_UNICODE
     strIndex1 = (WCHAR *)wcsstr((const WCHAR *)tmpFile, (const WCHAR *)'/');
     strIndex2 = (WCHAR *)wcsstr((const WCHAR *)tmpFile, (const WCHAR *)'.');
   #else
     strIndex1 = (char *)strrchr(tmpFile, '/');
     strIndex2 = (char *)strrchr(tmpFile, '.');
   #endif
 
   beginIndex = (strIndex1 != 0
-                // && (strIndex2 != 0) && (strIndex1 < strIndex2)
+                //&& (strIndex2 != 0) && (strIndex1 < strIndex2)
                 ) ? strIndex1 + 1 : tmpFile;
 
   if (strIndex2 == 0 || (strIndex1 > strIndex2)) { // not gcode file
     #if _LFN_UNICODE
       if (wcslen(beginIndex) > len)
         wcsncpy(outStr, beginIndex, len);
       else
         wcscpy(outStr, beginIndex);
     #else
       if ((int)strlen(beginIndex) > len)

commit d20d4591321aa467c062f0050355d2aca84e03ad
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Sat Jul 25 13:52:07 2020 +0800

    Robin nano V2, TFT LVGL UI parameters, and more (#18500)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index 345b15882b..84853cff9d 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -14,110 +14,107 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LVGL_UI)
+#if HAS_TFT_LVGL_UI
 
 #include "../../../../MarlinCore.h"
 #include "lv_conf.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 #include "draw_ui.h"
 #include "../../../../sd/cardreader.h"
 
 static lv_obj_t * scr;
 
-static lv_obj_t *buttonPageUp, *buttonPageDown, *buttonBack, *buttonGcode[FILE_BTN_CNT];
-static lv_obj_t * labelPageUp[FILE_BTN_CNT];
-static lv_obj_t *buttonText[FILE_BTN_CNT];
+static lv_obj_t *buttonPageUp, *buttonPageDown, *buttonBack,
+                *buttonGcode[FILE_BTN_CNT], *labelPageUp[FILE_BTN_CNT], *buttonText[FILE_BTN_CNT];
 
 #define ID_P_UP     7
 #define ID_P_DOWN   8
 #define ID_P_RETURN 9
 
 int8_t curDirLever = 0;
 LIST_FILE list_file;
 DIR_OFFSET dir_offset[10];
 
 extern uint8_t public_buf[512];
 extern char public_buf_m[100];
 
 uint8_t sel_id = 0;
 
 #if ENABLED(SDSUPPORT)
 
-static uint8_t search_file() {
-  int valid_name_cnt = 0;
-  //char tmp[SHORT_NEME_LEN*MAX_DIR_LEVEL+1];
+  static uint8_t search_file() {
+    int valid_name_cnt = 0;
+    //char tmp[SHORT_NEME_LEN*MAX_DIR_LEVEL+1];
 
-  list_file.Sd_file_cnt = 0;
-  //list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
+    list_file.Sd_file_cnt = 0;
+    //list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
 
-  //root2.rewind();
-  //SERIAL_ECHOLN(list_file.curDirPath);
+    //root2.rewind();
+    //SERIAL_ECHOLN(list_file.curDirPath);
 
-  if (curDirLever != 0) card.cd(list_file.curDirPath);
-  else card.cdroot(); //while(card.cdup());
+    if (curDirLever != 0) card.cd(list_file.curDirPath);
+    else card.cdroot(); // while(card.cdup());
 
-  const uint16_t fileCnt = card.get_num_Files();
+    const uint16_t fileCnt = card.get_num_Files();
 
-  for (uint16_t i = 0; i < fileCnt; i++) {
-    if (list_file.Sd_file_cnt == list_file.Sd_file_offset) {
-      const uint16_t nr = SD_ORDER(i, fileCnt);
-      card.getfilename_sorted(nr);
+    for (uint16_t i = 0; i < fileCnt; i++) {
+      if (list_file.Sd_file_cnt == list_file.Sd_file_offset) {
+        const uint16_t nr = SD_ORDER(i, fileCnt);
+        card.getfilename_sorted(nr);
 
-      if (card.flag.filenameIsDir)
-        /*
-          SERIAL_ECHOLN(card.longest_filename);
-        */
-        list_file.IsFolder[valid_name_cnt] = 1;
-      else
-        //SERIAL_ECHOLN(card.longFilename);
-        list_file.IsFolder[valid_name_cnt] = 0;
-
-      #if 1
-        //
-        memset(list_file.file_name[valid_name_cnt], 0, strlen(list_file.file_name[valid_name_cnt]));
-        strcpy(list_file.file_name[valid_name_cnt], list_file.curDirPath);
-        strcat(list_file.file_name[valid_name_cnt], "/");
-        strcat(list_file.file_name[valid_name_cnt], card.filename);
-        //
-        memset(list_file.long_name[valid_name_cnt], 0, strlen(list_file.long_name[valid_name_cnt]));
-        if (card.longFilename[0] == 0)
-          strncpy(list_file.long_name[valid_name_cnt], card.filename, strlen(card.filename));
+        if (card.flag.filenameIsDir)
+          //SERIAL_ECHOLN(card.longest_filename);
+          list_file.IsFolder[valid_name_cnt] = 1;
         else
-          strncpy(list_file.long_name[valid_name_cnt], card.longFilename, strlen(card.longFilename));
-
-        valid_name_cnt++;
-        if (valid_name_cnt == 1)
-          dir_offset[curDirLever].cur_page_first_offset = list_file.Sd_file_offset;
-        if (valid_name_cnt >= FILE_NUM) {
-          dir_offset[curDirLever].cur_page_last_offset = list_file.Sd_file_offset;
+          //SERIAL_ECHOLN(card.longFilename);
+          list_file.IsFolder[valid_name_cnt] = 0;
+
+        #if 1
+          //
+          memset(list_file.file_name[valid_name_cnt], 0, strlen(list_file.file_name[valid_name_cnt]));
+          strcpy(list_file.file_name[valid_name_cnt], list_file.curDirPath);
+          strcat_P(list_file.file_name[valid_name_cnt], PSTR("/"));
+          strcat(list_file.file_name[valid_name_cnt], card.filename);
+          //
+          memset(list_file.long_name[valid_name_cnt], 0, strlen(list_file.long_name[valid_name_cnt]));
+          if (card.longFilename[0] == 0)
+            strncpy(list_file.long_name[valid_name_cnt], card.filename, strlen(card.filename));
+          else
+            strncpy(list_file.long_name[valid_name_cnt], card.longFilename, strlen(card.longFilename));
+
+          valid_name_cnt++;
+          if (valid_name_cnt == 1)
+            dir_offset[curDirLever].cur_page_first_offset = list_file.Sd_file_offset;
+          if (valid_name_cnt >= FILE_NUM) {
+            dir_offset[curDirLever].cur_page_last_offset = list_file.Sd_file_offset;
+            list_file.Sd_file_offset++;
+            break;
+          }
           list_file.Sd_file_offset++;
-          break;
-        }
-        list_file.Sd_file_offset++;
-      #endif
+        #endif
+      }
+      list_file.Sd_file_cnt++;
     }
-    list_file.Sd_file_cnt++;
+    //card.closefile(false);
+    return valid_name_cnt;
   }
-  //card.closefile(false);
-  return valid_name_cnt;
-}
 
 #endif // SDSUPPORT
 
 uint8_t have_pre_pic(char *path) {
   #if ENABLED(SDSUPPORT)
     char *ps1, *ps2, *cur_name = strrchr(path, '/');
 
     card.openFileRead(cur_name);
     card.read(public_buf, 512);
     ps1 = strstr((char *)public_buf, ";simage:");
@@ -140,21 +137,21 @@ LV_IMG_DECLARE(bmp_pic_100x40);
 
 static void event_handler(lv_obj_t * obj, lv_event_t event) {
   uint8_t i, file_count = 0;
   //switch (obj->mks_obj_id)
   //{
   if (obj->mks_obj_id == ID_P_UP) {
     if (event == LV_EVENT_CLICKED) {
     }
     else if (event == LV_EVENT_RELEASED) {
       if (dir_offset[curDirLever].curPage > 0) {
-        //2015.05.19
+        // 2015.05.19
         list_file.Sd_file_cnt = 0;
 
         if (dir_offset[curDirLever].cur_page_first_offset >= FILE_NUM)
           list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset - FILE_NUM;
 
         #if ENABLED(SDSUPPORT)
           file_count = search_file();
         #endif
         if (file_count != 0) {
           dir_offset[curDirLever].curPage--;
@@ -162,21 +159,21 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
           disp_gcode_icon(file_count);
         }
       }
     }
   }
   else if (obj->mks_obj_id == ID_P_DOWN) {
     if (event == LV_EVENT_CLICKED) {
     }
     else if (event == LV_EVENT_RELEASED) {
       if (dir_offset[curDirLever].cur_page_last_offset > 0) {
-        list_file.Sd_file_cnt = 0;
+        list_file.Sd_file_cnt    = 0;
         list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_last_offset + 1;
         #if ENABLED(SDSUPPORT)
           file_count = search_file();
         #endif
         if (file_count != 0) {
           dir_offset[curDirLever].curPage++;
           lv_obj_del(scr);
           disp_gcode_icon(file_count);
         }
         if (file_count < FILE_NUM)
@@ -188,23 +185,23 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
     if (event == LV_EVENT_CLICKED) {
     }
     else if (event == LV_EVENT_RELEASED) {
       if (curDirLever > 0) {
         int8_t *ch = (int8_t *)strrchr(list_file.curDirPath, '/');
         if (ch) {
           *ch = 0;
           #if ENABLED(SDSUPPORT)
             card.cdup();
           #endif
-          dir_offset[curDirLever].curPage = 0;
+          dir_offset[curDirLever].curPage               = 0;
           dir_offset[curDirLever].cur_page_first_offset = 0;
-          dir_offset[curDirLever].cur_page_last_offset = 0;
+          dir_offset[curDirLever].cur_page_last_offset  = 0;
           curDirLever--;
           list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
           #if ENABLED(SDSUPPORT)
             file_count = search_file();
           #endif
           lv_obj_del(scr);
           disp_gcode_icon(file_count);
         }
       }
       else {
@@ -214,21 +211,21 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
     }
   }
   else {
     for (i = 0; i < FILE_BTN_CNT; i++) {
       if (obj->mks_obj_id == (i + 1)) {
         if (event == LV_EVENT_CLICKED) {
         }
         else if (event == LV_EVENT_RELEASED) {
           if (list_file.file_name[i][0] != 0) {
             if (list_file.IsFolder[i] == 1) {
-              memset(list_file.curDirPath, 0, sizeof(list_file.curDirPath));
+              ZERO(list_file.curDirPath);
               strcpy(list_file.curDirPath,  list_file.file_name[i]);
               curDirLever++;
               list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
               #if ENABLED(SDSUPPORT)
                 file_count = search_file();
               #endif
               lv_obj_del(scr);
               disp_gcode_icon(file_count);
             }
             else {
@@ -246,25 +243,25 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
 
 void lv_draw_print_file(void) {
   //uint8_t i;
   uint8_t file_count;
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != PRINT_FILE_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = PRINT_FILE_UI;
   }
   disp_state = PRINT_FILE_UI;
 
-  curDirLever = 0;
+  curDirLever                     = 0;
   dir_offset[curDirLever].curPage = 0;
 
   list_file.Sd_file_offset = 0;
-  list_file.Sd_file_cnt = 0;
+  list_file.Sd_file_cnt    = 0;
 
   ZERO(dir_offset);
   ZERO(list_file.IsFolder);
   ZERO(list_file.curDirPath);
 
   list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
   #if ENABLED(SDSUPPORT)
     card.mount();
     file_count = search_file();
   #endif
@@ -293,255 +290,260 @@ void disp_gcode_icon(uint8_t file_num) {
 
   scr = lv_obj_create(NULL, NULL);
 
   //static lv_style_t tool_style;
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
-  buttonPageUp = lv_imgbtn_create(scr, NULL);
+  buttonPageUp   = lv_imgbtn_create(scr, NULL);
   buttonPageDown = lv_imgbtn_create(scr, NULL);
-  buttonBack = lv_imgbtn_create(scr, NULL);
+  buttonBack     = lv_imgbtn_create(scr, NULL);
 
   lv_obj_set_event_cb_mks(buttonPageUp, event_handler, ID_P_UP, "bmp_pageUp.bin", 0);
   lv_imgbtn_set_src(buttonPageUp, LV_BTN_STATE_REL, &bmp_pic_117x92);
   lv_imgbtn_set_src(buttonPageUp, LV_BTN_STATE_PR, &bmp_pic_117x92);
-  lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_PR, &tft_style_lable_pre);
-  lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_PR, &tft_style_label_pre);
+  lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_REL, &tft_style_label_rel);
   lv_obj_clear_protect(buttonPageUp, LV_PROTECT_FOLLOW);
 
   #if 1
     lv_obj_set_event_cb_mks(buttonPageDown, event_handler, ID_P_DOWN, "bmp_pageDown.bin", 0);
     lv_imgbtn_set_src(buttonPageDown, LV_BTN_STATE_REL, &bmp_pic_117x92);
     lv_imgbtn_set_src(buttonPageDown, LV_BTN_STATE_PR, &bmp_pic_117x92);
-    lv_imgbtn_set_style(buttonPageDown, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonPageDown, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonPageDown, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonPageDown, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_P_RETURN, "bmp_Return.bin", 0);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_P_RETURN, "bmp_back.bin", 0);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic_117x92);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic_117x92);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonPageUp, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonPageDown, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL + INTERVAL_H);
   lv_obj_set_pos(buttonBack, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL * 2 + INTERVAL_H * 2);
 
   /*Create a label on the Image button*/
 
   lv_btn_set_layout(buttonPageUp, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonPageDown, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
   for (i = 0; i < FILE_BTN_CNT; i++) {
     /*
-    if(seq) {
+    if (seq) {
       j = (FILE_BTN_CNT-1) - i;
       back_flg = 1;
     }
     else {
       j = i;
       back_flg = 0;
     }
     */
     if (i >= file_num) break;
 
     #ifdef TFT35
       buttonGcode[i] = lv_imgbtn_create(scr, NULL);
 
-      lv_imgbtn_set_style(buttonGcode[i], LV_BTN_STATE_PR, &tft_style_lable_pre);
-      lv_imgbtn_set_style(buttonGcode[i], LV_BTN_STATE_REL, &tft_style_lable_rel);
+      lv_imgbtn_set_style(buttonGcode[i], LV_BTN_STATE_PR, &tft_style_label_pre);
+      lv_imgbtn_set_style(buttonGcode[i], LV_BTN_STATE_REL, &tft_style_label_rel);
       lv_obj_clear_protect(buttonGcode[i], LV_PROTECT_FOLLOW);
       lv_btn_set_layout(buttonGcode[i], LV_LAYOUT_OFF);
 
       ZERO(public_buf_m);
       cutFileName((char *)list_file.long_name[i], 16, 8,  (char *)public_buf_m);
 
       if (list_file.IsFolder[i] == 1) {
-        lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "bmp_Dir.bin", 0);
+        lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "bmp_dir.bin", 0);
         lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, &bmp_pic);
         lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, &bmp_pic);
         if (i < 3)
           lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
         else
           lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
         labelPageUp[i] = lv_label_create(buttonGcode[i], NULL);
-        lv_obj_set_style(labelPageUp[i], &tft_style_lable_rel);
+        lv_obj_set_style(labelPageUp[i], &tft_style_label_rel);
         lv_label_set_text(labelPageUp[i], public_buf_m);
         lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
       }
       else {
         if (have_pre_pic((char *)list_file.file_name[i])) {
           lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), list_file.file_name[i], 1);
           lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, &bmp_pic_100x100);
           lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, &bmp_pic_100x100);
           if (i < 3) {
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET);
             buttonText[i] = lv_btn_create(scr, NULL);
             //lv_obj_set_event_cb(buttonText[i], event_handler);
 
-            lv_btn_set_style(buttonText[i], LV_BTN_STATE_PR, &tft_style_lable_pre);
-            lv_btn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_lable_rel);
-            //lv_obj_set_style(buttonText[i], &tft_style_lable_pre);
-            //lv_obj_set_style(buttonText[i], &tft_style_lable_rel);
+            lv_btn_set_style(buttonText[i], LV_BTN_STATE_PR, &tft_style_label_pre);
+            lv_btn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_label_rel);
+            //lv_obj_set_style(buttonText[i], &tft_style_label_pre);
+            //lv_obj_set_style(buttonText[i], &tft_style_label_rel);
             lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
             lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
             //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),NULL,0);
             //lv_imgbtn_set_src(buttonText[i], LV_BTN_STATE_REL, &bmp_pic_100x40);
             //lv_imgbtn_set_src(buttonText[i], LV_BTN_STATE_PR, &bmp_pic_100x40);
             lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
             lv_obj_set_size(buttonText[i], 100, 40);
           }
           else {
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET);
             buttonText[i] = lv_btn_create(scr, NULL);
             //lv_obj_set_event_cb(buttonText[i], event_handler);
 
-            lv_btn_set_style(buttonText[i], LV_BTN_STATE_PR, &tft_style_lable_pre);
-            lv_btn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_lable_rel);
+            lv_btn_set_style(buttonText[i], LV_BTN_STATE_PR, &tft_style_label_pre);
+            lv_btn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_label_rel);
 
-            //lv_imgbtn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_lable_rel);
+            //lv_imgbtn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_label_rel);
             lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
             lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
             //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),NULL,0);
             //lv_imgbtn_set_src(buttonText[i], LV_BTN_STATE_REL, &bmp_pic_100x40);
             //lv_imgbtn_set_src(buttonText[i], LV_BTN_STATE_PR, &bmp_pic_100x40);
             lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
             lv_obj_set_size(buttonText[i], 100, 40);
           }
           labelPageUp[i] = lv_label_create(buttonText[i], NULL);
-          lv_obj_set_style(labelPageUp[i], &tft_style_lable_rel);
+          lv_obj_set_style(labelPageUp[i], &tft_style_label_rel);
           lv_label_set_text(labelPageUp[i], public_buf_m);
           lv_obj_align(labelPageUp[i], buttonText[i], LV_ALIGN_IN_BOTTOM_MID, 0, 0);
         }
         else {
-          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "bmp_File.bin", 0);
+          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "bmp_file.bin", 0);
           lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, &bmp_pic);
           lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, &bmp_pic);
           if (i < 3)
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
           else
             lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
           labelPageUp[i] = lv_label_create(buttonGcode[i], NULL);
-          lv_obj_set_style(labelPageUp[i], &tft_style_lable_rel);
+          lv_obj_set_style(labelPageUp[i], &tft_style_label_rel);
           lv_label_set_text(labelPageUp[i], public_buf_m);
           lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
         }
       }
-    #else // ifdef TFT35
-    #endif // ifdef TFT35
+    #else // !TFT35
+    #endif // !TFT35
   }
 }
 
 void lv_open_gcode_file(char *path) {
   #if ENABLED(SDSUPPORT)
+    uint32_t *ps4;
+    int pre_sread_cnt;
     char *cur_name;
+
     cur_name = strrchr(path, '/');
+
     card.openFileRead(cur_name);
-  #endif
+    card.read(public_buf, 512);
+    ps4 = (uint32_t *)strstr((char *)public_buf, ";simage:");
+    // Ignore the beginning message of gcode file
+    if (ps4) {
+      pre_sread_cnt = (uint32_t)ps4 - (uint32_t)((uint32_t *)(&public_buf[0]));
+      card.setIndex(pre_sread_cnt);
+    }
+  #endif // SDSUPPORT
 }
 
+
 int ascii2dec_test(char *ascii) {
   int result = 0;
-
   if (ascii == 0) return 0;
 
   if (*(ascii) >= '0' && *(ascii) <= '9')
     result = *(ascii) - '0';
   else if (*(ascii) >= 'a' && *(ascii) <= 'f')
     result = *(ascii) - 'a' + 0x0a;
   else if (*(ascii) >= 'A' && *(ascii) <= 'F')
     result = *(ascii) - 'A' + 0x0a;
   else
     return 0;
 
   return result;
 }
 
-void lv_gcode_file_read(uint8_t *data_buf)
-{
-	#if ENABLED (SDSUPPORT)
-    uint16_t i=0,j=0,k=0;
-    uint16_t row_1=0;
+void lv_gcode_file_read(uint8_t *data_buf) {
+  #if ENABLED(SDSUPPORT)
+    uint16_t i = 0, j = 0, k = 0;
+    uint16_t row_1    = 0;
     bool ignore_start = true;
     char temp_test[200];
     volatile uint16_t *p_index;
 
     memset(public_buf, 0, 200);
 
-    while(card.isFileOpen())
-    {
-      if (ignore_start) card.read(temp_test, 8); //line start -> ignore
-      card.read(temp_test, 200); //data
-      //\r;;gimage: we got the bit img, so stop here
+    while (card.isFileOpen()) {
+      if (ignore_start) card.read(temp_test, 8); // line start -> ignore
+      card.read(temp_test, 200); // data
+      // \r;;gimage: we got the bit img, so stop here
       if (temp_test[1] == ';') {
         card.closefile();
         break;
       }
-      for(i=0;i<200;) {
-        public_buf[row_1*200+100*k+j] = (char)(ascii2dec_test(&temp_test[i])<<4|ascii2dec_test(&temp_test[i+1]));
+      for (i = 0; i < 200;) {
+        public_buf[row_1 * 200 + 100 * k + j] = (char)(ascii2dec_test(&temp_test[i]) << 4 | ascii2dec_test(&temp_test[i + 1]));
         j++;
-        i+=2;
+        i += 2;
       }
 
       uint16_t c = card.get();
-      //check if we have more data or finished the line (CR)
-      if (c == '\r') {
-        break;
-      }
+      // check if we have more data or finished the line (CR)
+      if (c == '\r') break;
       card.setIndex(card.getIndex());
       k++;
-      j=0;
+      j = 0;
       ignore_start = false;
     }
-    #if ENABLED(SPI_GRAPHICAL_TFT)
-      for(i=0;i<200;)
-      {
+    #if ENABLED(TFT_LVGL_UI_SPI)
+      for (i = 0; i < 200;) {
         p_index = (uint16_t *)(&public_buf[i]);
 
-            //Color = (*p_index >> 8);
+        //Color = (*p_index >> 8);
         //*p_index = Color | ((*p_index & 0xff) << 8);
-        i+=2;
-        if(*p_index == 0x0000)*p_index=LV_COLOR_BACKGROUND.full;
+        i += 2;
+        if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full;
       }
     #else
-      for(i=0;i<200;)
-      {
+      for (i = 0; i < 200;) {
         p_index = (uint16_t *)(&public_buf[i]);
         //Color = (*p_index >> 8);
         //*p_index = Color | ((*p_index & 0xff) << 8);
-        i+=2;
-        if(*p_index == 0x0000)*p_index=LV_COLOR_BACKGROUND.full; // 0x18C3; //
+        i += 2;
+        if (*p_index == 0x0000) *p_index = LV_COLOR_BACKGROUND.full; // 0x18C3; //
       }
-    #endif
-    memcpy(data_buf,public_buf,200);
-	#endif
+    #endif // TFT_LVGL_UI_SPI
+    memcpy(data_buf, public_buf, 200);
+  #endif // SDSUPPORT
 }
 
 void lv_close_gcode_file() {TERN_(SDSUPPORT, card.closefile());}
 
 void cutFileName(char *path, int len, int bytePerLine,  char *outStr) {
   #if _LFN_UNICODE
     TCHAR *tmpFile;
     TCHAR *strIndex1 = 0, *strIndex2 = 0, *beginIndex;
-    TCHAR secSeg[10] = {0};
+    TCHAR secSeg[10]   = {0};
     TCHAR gFileTail[4] = {'~', '.', 'g', '\0'};
   #else
     char *tmpFile;
     char *strIndex1 = 0, *strIndex2 = 0, *beginIndex;
     char secSeg[10] = {0};
   #endif
 
   if (path == 0 || len <= 3 || outStr == 0) return;
 
   tmpFile = path;
@@ -563,55 +565,55 @@ void cutFileName(char *path, int len, int bytePerLine,  char *outStr) {
         wcsncpy(outStr, beginIndex, len);
       else
         wcscpy(outStr, beginIndex);
     #else
       if ((int)strlen(beginIndex) > len)
         strncpy(outStr, beginIndex, len);
       else
         strcpy(outStr, beginIndex);
     #endif
   }
-  else { //gcode file
+  else { // gcode file
     if (strIndex2 - beginIndex > (len - 2)) {
       #if _LFN_UNICODE
         wcsncpy(outStr, (const WCHAR *)beginIndex, len - 3);
         wcscat(outStr, (const WCHAR *)gFileTail);
       #else
         //strncpy(outStr, beginIndex, len - 3);
         strncpy(outStr, beginIndex, len - 4);
-        strcat(outStr, "~.g");
+        strcat_P(outStr, PSTR("~.g"));
       #endif
     }
     else {
       #if _LFN_UNICODE
         wcsncpy(outStr, (const WCHAR *)beginIndex, strIndex2 - beginIndex + 1);
         wcscat(outStr, (const WCHAR *)&gFileTail[3]);
       #else
         strncpy(outStr, beginIndex, strIndex2 - beginIndex + 1);
-        strcat(outStr, "g");
+        strcat_P(outStr, PSTR("g"));
       #endif
     }
   }
 
   #if _LFN_UNICODE
     if (wcslen(outStr) > bytePerLine) {
       wcscpy(secSeg, (const WCHAR *)&outStr[bytePerLine]);
-      outStr[bytePerLine] = '\n';
+      outStr[bytePerLine]     = '\n';
       outStr[bytePerLine + 1] = '\0';
       wcscat(outStr, (const WCHAR *)secSeg);
     }
   #else
     if ((int)strlen(outStr) > bytePerLine) {
       strcpy(secSeg, &outStr[bytePerLine]);
-      outStr[bytePerLine] = '\n';
+      outStr[bytePerLine]     = '\n';
       outStr[bytePerLine + 1] = '\0';
       strcat(outStr, secSeg);
     }
     else {
-      strcat(outStr, "\n");
+      strcat_P(outStr, PSTR("\n"));
     }
   #endif
 }
 
 void lv_clear_print_file() { lv_obj_del(scr); }
 
-#endif // TFT_LVGL_UI
+#endif // HAS_TFT_LVGL_UI

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index e8647aaa37..345b15882b 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if ENABLED(TFT_LVGL_UI)
 
 #include "../../../../MarlinCore.h"
 #include "lv_conf.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"

commit e5bc9d31cc87be5c7ef2bd3cd70c2599f76d2bd7
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Jul 1 03:30:24 2020 -0300

    Add TFT_LVGL_UI support (#18438)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
index cc9fa0e04d..e8647aaa37 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -14,21 +14,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LITTLE_VGL_UI)
+#if ENABLED(TFT_LVGL_UI)
 
 #include "../../../../MarlinCore.h"
 #include "lv_conf.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 #include "draw_ui.h"
 #include "../../../../sd/cardreader.h"
 
@@ -317,21 +317,21 @@ void disp_gcode_icon(uint8_t file_num) {
   lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_REL, &tft_style_lable_rel);
   lv_obj_clear_protect(buttonPageUp, LV_PROTECT_FOLLOW);
 
   #if 1
     lv_obj_set_event_cb_mks(buttonPageDown, event_handler, ID_P_DOWN, "bmp_pageDown.bin", 0);
     lv_imgbtn_set_src(buttonPageDown, LV_BTN_STATE_REL, &bmp_pic_117x92);
     lv_imgbtn_set_src(buttonPageDown, LV_BTN_STATE_PR, &bmp_pic_117x92);
     lv_imgbtn_set_style(buttonPageDown, LV_BTN_STATE_PR, &tft_style_lable_pre);
     lv_imgbtn_set_style(buttonPageDown, LV_BTN_STATE_REL, &tft_style_lable_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_P_RETURN, "bmp_Back.bin", 0);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_P_RETURN, "bmp_Return.bin", 0);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic_117x92);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic_117x92);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
   #endif
 
   lv_obj_set_pos(buttonPageUp, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonPageDown, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL + INTERVAL_H);
   lv_obj_set_pos(buttonBack, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL * 2 + INTERVAL_H * 2);
 
@@ -438,79 +438,101 @@ void disp_gcode_icon(uint8_t file_num) {
           lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
         }
       }
     #else // ifdef TFT35
     #endif // ifdef TFT35
   }
 }
 
 void lv_open_gcode_file(char *path) {
   #if ENABLED(SDSUPPORT)
-    //uint32_t read;
-    uint32_t *ps4;
-    int pre_sread_cnt;
     char *cur_name;
-
     cur_name = strrchr(path, '/');
-
     card.openFileRead(cur_name);
-    card.read(public_buf, 512);
-    ps4 = (uint32_t *)strstr((char *)public_buf, ";simage:");
-
-    if (ps4) {
-      pre_sread_cnt = (uint32_t)ps4 - (uint32_t)((uint32_t *)(&public_buf[0]));
-      card.setIndex(pre_sread_cnt + 8);
-    }
   #endif
 }
 
 int ascii2dec_test(char *ascii) {
   int result = 0;
 
   if (ascii == 0) return 0;
 
   if (*(ascii) >= '0' && *(ascii) <= '9')
     result = *(ascii) - '0';
   else if (*(ascii) >= 'a' && *(ascii) <= 'f')
     result = *(ascii) - 'a' + 0x0a;
   else if (*(ascii) >= 'A' && *(ascii) <= 'F')
     result = *(ascii) - 'A' + 0x0a;
   else
     return 0;
 
   return result;
 }
 
-void lv_gcode_file_read(uint8_t *data_buf) {
-  #if ENABLED(SDSUPPORT)
-    uint16_t i = 0, j = 0, k = 0;
-    //uint32_t read;
-    uint16_t row_1 = 0;
+void lv_gcode_file_read(uint8_t *data_buf)
+{
+	#if ENABLED (SDSUPPORT)
+    uint16_t i=0,j=0,k=0;
+    uint16_t row_1=0;
+    bool ignore_start = true;
     char temp_test[200];
+    volatile uint16_t *p_index;
+
+    memset(public_buf, 0, 200);
 
-    while (1) {
-      card.read(temp_test, 200);
-      for (i = 0; i < 200;) {
-        public_buf[row_1 * 200 + 100 * k + j] = (char)(ascii2dec_test(&temp_test[i]) << 4 | ascii2dec_test(&temp_test[i + 1]));
+    while(card.isFileOpen())
+    {
+      if (ignore_start) card.read(temp_test, 8); //line start -> ignore
+      card.read(temp_test, 200); //data
+      //\r;;gimage: we got the bit img, so stop here
+      if (temp_test[1] == ';') {
+        card.closefile();
+        break;
+      }
+      for(i=0;i<200;) {
+        public_buf[row_1*200+100*k+j] = (char)(ascii2dec_test(&temp_test[i])<<4|ascii2dec_test(&temp_test[i+1]));
         j++;
-        i += 2;
+        i+=2;
       }
-      k++;
-      j = 0;
-      if (k >= 2) {
-        k = 0;
-        card.read(temp_test, 9);
+
+      uint16_t c = card.get();
+      //check if we have more data or finished the line (CR)
+      if (c == '\r') {
         break;
       }
+      card.setIndex(card.getIndex());
+      k++;
+      j=0;
+      ignore_start = false;
     }
-    memcpy(data_buf, public_buf, 200);
-  #endif
+    #if ENABLED(SPI_GRAPHICAL_TFT)
+      for(i=0;i<200;)
+      {
+        p_index = (uint16_t *)(&public_buf[i]);
+
+            //Color = (*p_index >> 8);
+        //*p_index = Color | ((*p_index & 0xff) << 8);
+        i+=2;
+        if(*p_index == 0x0000)*p_index=LV_COLOR_BACKGROUND.full;
+      }
+    #else
+      for(i=0;i<200;)
+      {
+        p_index = (uint16_t *)(&public_buf[i]);
+        //Color = (*p_index >> 8);
+        //*p_index = Color | ((*p_index & 0xff) << 8);
+        i+=2;
+        if(*p_index == 0x0000)*p_index=LV_COLOR_BACKGROUND.full; // 0x18C3; //
+      }
+    #endif
+    memcpy(data_buf,public_buf,200);
+	#endif
 }
 
 void lv_close_gcode_file() {TERN_(SDSUPPORT, card.closefile());}
 
 void cutFileName(char *path, int len, int bytePerLine,  char *outStr) {
   #if _LFN_UNICODE
     TCHAR *tmpFile;
     TCHAR *strIndex1 = 0, *strIndex2 = 0, *beginIndex;
     TCHAR secSeg[10] = {0};
     TCHAR gFileTail[4] = {'~', '.', 'g', '\0'};
@@ -585,11 +607,11 @@ void cutFileName(char *path, int len, int bytePerLine,  char *outStr) {
       strcat(outStr, secSeg);
     }
     else {
       strcat(outStr, "\n");
     }
   #endif
 }
 
 void lv_clear_print_file() { lv_obj_del(scr); }
 
-#endif // TFT_LITTLE_VGL_UI
+#endif // TFT_LVGL_UI

commit 642112d3eb7c1af9a52feec8134c85ed3e34891c
Author: makerbase <4164049@qq.com>
Date:   Tue Jun 16 10:05:33 2020 +0800

    Add MKS UI (TFT_LITTLE_VGL_UI) (#18071)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
new file mode 100644
index 0000000000..cc9fa0e04d
--- /dev/null
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_print_file.cpp
@@ -0,0 +1,595 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(TFT_LITTLE_VGL_UI)
+
+#include "../../../../MarlinCore.h"
+#include "lv_conf.h"
+//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
+//#include "../lvgl/src/lv_objx/lv_img.h"
+//#include "../lvgl/src/lv_core/lv_disp.h"
+//#include "../lvgl/src/lv_core/lv_refr.h"
+#include "draw_ui.h"
+#include "../../../../sd/cardreader.h"
+
+static lv_obj_t * scr;
+
+static lv_obj_t *buttonPageUp, *buttonPageDown, *buttonBack, *buttonGcode[FILE_BTN_CNT];
+static lv_obj_t * labelPageUp[FILE_BTN_CNT];
+static lv_obj_t *buttonText[FILE_BTN_CNT];
+
+#define ID_P_UP     7
+#define ID_P_DOWN   8
+#define ID_P_RETURN 9
+
+int8_t curDirLever = 0;
+LIST_FILE list_file;
+DIR_OFFSET dir_offset[10];
+
+extern uint8_t public_buf[512];
+extern char public_buf_m[100];
+
+uint8_t sel_id = 0;
+
+#if ENABLED(SDSUPPORT)
+
+static uint8_t search_file() {
+  int valid_name_cnt = 0;
+  //char tmp[SHORT_NEME_LEN*MAX_DIR_LEVEL+1];
+
+  list_file.Sd_file_cnt = 0;
+  //list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
+
+  //root2.rewind();
+  //SERIAL_ECHOLN(list_file.curDirPath);
+
+  if (curDirLever != 0) card.cd(list_file.curDirPath);
+  else card.cdroot(); //while(card.cdup());
+
+  const uint16_t fileCnt = card.get_num_Files();
+
+  for (uint16_t i = 0; i < fileCnt; i++) {
+    if (list_file.Sd_file_cnt == list_file.Sd_file_offset) {
+      const uint16_t nr = SD_ORDER(i, fileCnt);
+      card.getfilename_sorted(nr);
+
+      if (card.flag.filenameIsDir)
+        /*
+          SERIAL_ECHOLN(card.longest_filename);
+        */
+        list_file.IsFolder[valid_name_cnt] = 1;
+      else
+        //SERIAL_ECHOLN(card.longFilename);
+        list_file.IsFolder[valid_name_cnt] = 0;
+
+      #if 1
+        //
+        memset(list_file.file_name[valid_name_cnt], 0, strlen(list_file.file_name[valid_name_cnt]));
+        strcpy(list_file.file_name[valid_name_cnt], list_file.curDirPath);
+        strcat(list_file.file_name[valid_name_cnt], "/");
+        strcat(list_file.file_name[valid_name_cnt], card.filename);
+        //
+        memset(list_file.long_name[valid_name_cnt], 0, strlen(list_file.long_name[valid_name_cnt]));
+        if (card.longFilename[0] == 0)
+          strncpy(list_file.long_name[valid_name_cnt], card.filename, strlen(card.filename));
+        else
+          strncpy(list_file.long_name[valid_name_cnt], card.longFilename, strlen(card.longFilename));
+
+        valid_name_cnt++;
+        if (valid_name_cnt == 1)
+          dir_offset[curDirLever].cur_page_first_offset = list_file.Sd_file_offset;
+        if (valid_name_cnt >= FILE_NUM) {
+          dir_offset[curDirLever].cur_page_last_offset = list_file.Sd_file_offset;
+          list_file.Sd_file_offset++;
+          break;
+        }
+        list_file.Sd_file_offset++;
+      #endif
+    }
+    list_file.Sd_file_cnt++;
+  }
+  //card.closefile(false);
+  return valid_name_cnt;
+}
+
+#endif // SDSUPPORT
+
+uint8_t have_pre_pic(char *path) {
+  #if ENABLED(SDSUPPORT)
+    char *ps1, *ps2, *cur_name = strrchr(path, '/');
+
+    card.openFileRead(cur_name);
+    card.read(public_buf, 512);
+    ps1 = strstr((char *)public_buf, ";simage:");
+    card.read(public_buf, 512);
+    ps2 = strstr((char *)public_buf, ";simage:");
+    if (ps1 || ps2) {
+      card.closefile();
+      return 1;
+    }
+    card.closefile();
+  #endif
+
+  return 0;
+}
+
+LV_IMG_DECLARE(bmp_pic_117x92);
+LV_IMG_DECLARE(bmp_pic_100x100);
+LV_IMG_DECLARE(bmp_pic);
+LV_IMG_DECLARE(bmp_pic_100x40);
+
+static void event_handler(lv_obj_t * obj, lv_event_t event) {
+  uint8_t i, file_count = 0;
+  //switch (obj->mks_obj_id)
+  //{
+  if (obj->mks_obj_id == ID_P_UP) {
+    if (event == LV_EVENT_CLICKED) {
+    }
+    else if (event == LV_EVENT_RELEASED) {
+      if (dir_offset[curDirLever].curPage > 0) {
+        //2015.05.19
+        list_file.Sd_file_cnt = 0;
+
+        if (dir_offset[curDirLever].cur_page_first_offset >= FILE_NUM)
+          list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset - FILE_NUM;
+
+        #if ENABLED(SDSUPPORT)
+          file_count = search_file();
+        #endif
+        if (file_count != 0) {
+          dir_offset[curDirLever].curPage--;
+          lv_obj_del(scr);
+          disp_gcode_icon(file_count);
+        }
+      }
+    }
+  }
+  else if (obj->mks_obj_id == ID_P_DOWN) {
+    if (event == LV_EVENT_CLICKED) {
+    }
+    else if (event == LV_EVENT_RELEASED) {
+      if (dir_offset[curDirLever].cur_page_last_offset > 0) {
+        list_file.Sd_file_cnt = 0;
+        list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_last_offset + 1;
+        #if ENABLED(SDSUPPORT)
+          file_count = search_file();
+        #endif
+        if (file_count != 0) {
+          dir_offset[curDirLever].curPage++;
+          lv_obj_del(scr);
+          disp_gcode_icon(file_count);
+        }
+        if (file_count < FILE_NUM)
+          dir_offset[curDirLever].cur_page_last_offset = 0;
+      }
+    }
+  }
+  else if (obj->mks_obj_id == ID_P_RETURN) {
+    if (event == LV_EVENT_CLICKED) {
+    }
+    else if (event == LV_EVENT_RELEASED) {
+      if (curDirLever > 0) {
+        int8_t *ch = (int8_t *)strrchr(list_file.curDirPath, '/');
+        if (ch) {
+          *ch = 0;
+          #if ENABLED(SDSUPPORT)
+            card.cdup();
+          #endif
+          dir_offset[curDirLever].curPage = 0;
+          dir_offset[curDirLever].cur_page_first_offset = 0;
+          dir_offset[curDirLever].cur_page_last_offset = 0;
+          curDirLever--;
+          list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
+          #if ENABLED(SDSUPPORT)
+            file_count = search_file();
+          #endif
+          lv_obj_del(scr);
+          disp_gcode_icon(file_count);
+        }
+      }
+      else {
+        lv_obj_del(scr);
+        lv_draw_ready_print();
+      }
+    }
+  }
+  else {
+    for (i = 0; i < FILE_BTN_CNT; i++) {
+      if (obj->mks_obj_id == (i + 1)) {
+        if (event == LV_EVENT_CLICKED) {
+        }
+        else if (event == LV_EVENT_RELEASED) {
+          if (list_file.file_name[i][0] != 0) {
+            if (list_file.IsFolder[i] == 1) {
+              memset(list_file.curDirPath, 0, sizeof(list_file.curDirPath));
+              strcpy(list_file.curDirPath,  list_file.file_name[i]);
+              curDirLever++;
+              list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
+              #if ENABLED(SDSUPPORT)
+                file_count = search_file();
+              #endif
+              lv_obj_del(scr);
+              disp_gcode_icon(file_count);
+            }
+            else {
+              sel_id = i;
+              lv_obj_del(scr);
+              lv_draw_dialog(DIALOG_TYPE_PRINT_FILE);
+            }
+            break;
+          }
+        }
+      }
+    }
+  }
+}
+
+void lv_draw_print_file(void) {
+  //uint8_t i;
+  uint8_t file_count;
+  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != PRINT_FILE_UI) {
+    disp_state_stack._disp_index++;
+    disp_state_stack._disp_state[disp_state_stack._disp_index] = PRINT_FILE_UI;
+  }
+  disp_state = PRINT_FILE_UI;
+
+  curDirLever = 0;
+  dir_offset[curDirLever].curPage = 0;
+
+  list_file.Sd_file_offset = 0;
+  list_file.Sd_file_cnt = 0;
+
+  ZERO(dir_offset);
+  ZERO(list_file.IsFolder);
+  ZERO(list_file.curDirPath);
+
+  list_file.Sd_file_offset = dir_offset[curDirLever].cur_page_first_offset;
+  #if ENABLED(SDSUPPORT)
+    card.mount();
+    file_count = search_file();
+  #endif
+  disp_gcode_icon(file_count);
+
+  //lv_obj_t * labelPageUp = lv_label_create(buttonPageUp, NULL);
+  //lv_obj_t * labelPageDown = lv_label_create(buttonPageDown, NULL);
+  //lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
+
+  /*
+  if (gCfgItems.multiple_language != 0) {
+    lv_label_set_text(labelPageUp, tool_menu.preheat);
+    lv_obj_align(labelPageUp, buttonPageUp, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(labelPageDown, tool_menu.extrude);
+    lv_obj_align(labelPageDown, buttonPageDown, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_Back, common_menu.text_back);
+    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID,0, BUTTON_TEXT_Y_OFFSET);
+  }
+  */
+}
+
+void disp_gcode_icon(uint8_t file_num) {
+  uint8_t i;
+
+  scr = lv_obj_create(NULL, NULL);
+
+  //static lv_style_t tool_style;
+
+  lv_obj_set_style(scr, &tft_style_scr);
+  lv_scr_load(scr);
+  lv_obj_clean(scr);
+
+  lv_obj_t * title = lv_label_create(scr, NULL);
+  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
+  lv_label_set_text(title, creat_title_text());
+
+  lv_refr_now(lv_refr_get_disp_refreshing());
+
+  buttonPageUp = lv_imgbtn_create(scr, NULL);
+  buttonPageDown = lv_imgbtn_create(scr, NULL);
+  buttonBack = lv_imgbtn_create(scr, NULL);
+
+  lv_obj_set_event_cb_mks(buttonPageUp, event_handler, ID_P_UP, "bmp_pageUp.bin", 0);
+  lv_imgbtn_set_src(buttonPageUp, LV_BTN_STATE_REL, &bmp_pic_117x92);
+  lv_imgbtn_set_src(buttonPageUp, LV_BTN_STATE_PR, &bmp_pic_117x92);
+  lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_PR, &tft_style_lable_pre);
+  lv_imgbtn_set_style(buttonPageUp, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  lv_obj_clear_protect(buttonPageUp, LV_PROTECT_FOLLOW);
+
+  #if 1
+    lv_obj_set_event_cb_mks(buttonPageDown, event_handler, ID_P_DOWN, "bmp_pageDown.bin", 0);
+    lv_imgbtn_set_src(buttonPageDown, LV_BTN_STATE_REL, &bmp_pic_117x92);
+    lv_imgbtn_set_src(buttonPageDown, LV_BTN_STATE_PR, &bmp_pic_117x92);
+    lv_imgbtn_set_style(buttonPageDown, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonPageDown, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_P_RETURN, "bmp_Back.bin", 0);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic_117x92);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic_117x92);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  #endif
+
+  lv_obj_set_pos(buttonPageUp, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight);
+  lv_obj_set_pos(buttonPageDown, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL + INTERVAL_H);
+  lv_obj_set_pos(buttonBack, OTHER_BTN_XPIEL * 3 + INTERVAL_V * 4, titleHeight + OTHER_BTN_YPIEL * 2 + INTERVAL_H * 2);
+
+  /*Create a label on the Image button*/
+
+  lv_btn_set_layout(buttonPageUp, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonPageDown, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
+
+  for (i = 0; i < FILE_BTN_CNT; i++) {
+    /*
+    if(seq) {
+      j = (FILE_BTN_CNT-1) - i;
+      back_flg = 1;
+    }
+    else {
+      j = i;
+      back_flg = 0;
+    }
+    */
+    if (i >= file_num) break;
+
+    #ifdef TFT35
+      buttonGcode[i] = lv_imgbtn_create(scr, NULL);
+
+      lv_imgbtn_set_style(buttonGcode[i], LV_BTN_STATE_PR, &tft_style_lable_pre);
+      lv_imgbtn_set_style(buttonGcode[i], LV_BTN_STATE_REL, &tft_style_lable_rel);
+      lv_obj_clear_protect(buttonGcode[i], LV_PROTECT_FOLLOW);
+      lv_btn_set_layout(buttonGcode[i], LV_LAYOUT_OFF);
+
+      ZERO(public_buf_m);
+      cutFileName((char *)list_file.long_name[i], 16, 8,  (char *)public_buf_m);
+
+      if (list_file.IsFolder[i] == 1) {
+        lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "bmp_Dir.bin", 0);
+        lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, &bmp_pic);
+        lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, &bmp_pic);
+        if (i < 3)
+          lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
+        else
+          lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+
+        labelPageUp[i] = lv_label_create(buttonGcode[i], NULL);
+        lv_obj_set_style(labelPageUp[i], &tft_style_lable_rel);
+        lv_label_set_text(labelPageUp[i], public_buf_m);
+        lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
+      }
+      else {
+        if (have_pre_pic((char *)list_file.file_name[i])) {
+          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), list_file.file_name[i], 1);
+          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, &bmp_pic_100x100);
+          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, &bmp_pic_100x100);
+          if (i < 3) {
+            lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET);
+            buttonText[i] = lv_btn_create(scr, NULL);
+            //lv_obj_set_event_cb(buttonText[i], event_handler);
+
+            lv_btn_set_style(buttonText[i], LV_BTN_STATE_PR, &tft_style_lable_pre);
+            lv_btn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_lable_rel);
+            //lv_obj_set_style(buttonText[i], &tft_style_lable_pre);
+            //lv_obj_set_style(buttonText[i], &tft_style_lable_rel);
+            lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
+            lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
+            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),NULL,0);
+            //lv_imgbtn_set_src(buttonText[i], LV_BTN_STATE_REL, &bmp_pic_100x40);
+            //lv_imgbtn_set_src(buttonText[i], LV_BTN_STATE_PR, &bmp_pic_100x40);
+            lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1) + FILE_PRE_PIC_X_OFFSET, titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
+            lv_obj_set_size(buttonText[i], 100, 40);
+          }
+          else {
+            lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET);
+            buttonText[i] = lv_btn_create(scr, NULL);
+            //lv_obj_set_event_cb(buttonText[i], event_handler);
+
+            lv_btn_set_style(buttonText[i], LV_BTN_STATE_PR, &tft_style_lable_pre);
+            lv_btn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+            //lv_imgbtn_set_style(buttonText[i], LV_BTN_STATE_REL, &tft_style_lable_rel);
+            lv_obj_clear_protect(buttonText[i], LV_PROTECT_FOLLOW);
+            lv_btn_set_layout(buttonText[i], LV_LAYOUT_OFF);
+            //lv_obj_set_event_cb_mks(buttonText[i], event_handler,(i+10),NULL,0);
+            //lv_imgbtn_set_src(buttonText[i], LV_BTN_STATE_REL, &bmp_pic_100x40);
+            //lv_imgbtn_set_src(buttonText[i], LV_BTN_STATE_PR, &bmp_pic_100x40);
+            lv_obj_set_pos(buttonText[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1) + FILE_PRE_PIC_X_OFFSET, BTN_Y_PIXEL + INTERVAL_H + titleHeight + FILE_PRE_PIC_Y_OFFSET + 100);
+            lv_obj_set_size(buttonText[i], 100, 40);
+          }
+          labelPageUp[i] = lv_label_create(buttonText[i], NULL);
+          lv_obj_set_style(labelPageUp[i], &tft_style_lable_rel);
+          lv_label_set_text(labelPageUp[i], public_buf_m);
+          lv_obj_align(labelPageUp[i], buttonText[i], LV_ALIGN_IN_BOTTOM_MID, 0, 0);
+        }
+        else {
+          lv_obj_set_event_cb_mks(buttonGcode[i], event_handler, (i + 1), "bmp_File.bin", 0);
+          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_REL, &bmp_pic);
+          lv_imgbtn_set_src(buttonGcode[i], LV_BTN_STATE_PR, &bmp_pic);
+          if (i < 3)
+            lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * i + INTERVAL_V * (i + 1), titleHeight);
+          else
+            lv_obj_set_pos(buttonGcode[i], BTN_X_PIXEL * (i - 3) + INTERVAL_V * ((i - 3) + 1), BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+
+          labelPageUp[i] = lv_label_create(buttonGcode[i], NULL);
+          lv_obj_set_style(labelPageUp[i], &tft_style_lable_rel);
+          lv_label_set_text(labelPageUp[i], public_buf_m);
+          lv_obj_align(labelPageUp[i], buttonGcode[i], LV_ALIGN_IN_BOTTOM_MID, 0, -5);
+        }
+      }
+    #else // ifdef TFT35
+    #endif // ifdef TFT35
+  }
+}
+
+void lv_open_gcode_file(char *path) {
+  #if ENABLED(SDSUPPORT)
+    //uint32_t read;
+    uint32_t *ps4;
+    int pre_sread_cnt;
+    char *cur_name;
+
+    cur_name = strrchr(path, '/');
+
+    card.openFileRead(cur_name);
+    card.read(public_buf, 512);
+    ps4 = (uint32_t *)strstr((char *)public_buf, ";simage:");
+
+    if (ps4) {
+      pre_sread_cnt = (uint32_t)ps4 - (uint32_t)((uint32_t *)(&public_buf[0]));
+      card.setIndex(pre_sread_cnt + 8);
+    }
+  #endif
+}
+
+int ascii2dec_test(char *ascii) {
+  int result = 0;
+
+  if (ascii == 0) return 0;
+
+  if (*(ascii) >= '0' && *(ascii) <= '9')
+    result = *(ascii) - '0';
+  else if (*(ascii) >= 'a' && *(ascii) <= 'f')
+    result = *(ascii) - 'a' + 0x0a;
+  else if (*(ascii) >= 'A' && *(ascii) <= 'F')
+    result = *(ascii) - 'A' + 0x0a;
+  else
+    return 0;
+
+  return result;
+}
+
+void lv_gcode_file_read(uint8_t *data_buf) {
+  #if ENABLED(SDSUPPORT)
+    uint16_t i = 0, j = 0, k = 0;
+    //uint32_t read;
+    uint16_t row_1 = 0;
+    char temp_test[200];
+
+    while (1) {
+      card.read(temp_test, 200);
+      for (i = 0; i < 200;) {
+        public_buf[row_1 * 200 + 100 * k + j] = (char)(ascii2dec_test(&temp_test[i]) << 4 | ascii2dec_test(&temp_test[i + 1]));
+        j++;
+        i += 2;
+      }
+      k++;
+      j = 0;
+      if (k >= 2) {
+        k = 0;
+        card.read(temp_test, 9);
+        break;
+      }
+    }
+    memcpy(data_buf, public_buf, 200);
+  #endif
+}
+
+void lv_close_gcode_file() {TERN_(SDSUPPORT, card.closefile());}
+
+void cutFileName(char *path, int len, int bytePerLine,  char *outStr) {
+  #if _LFN_UNICODE
+    TCHAR *tmpFile;
+    TCHAR *strIndex1 = 0, *strIndex2 = 0, *beginIndex;
+    TCHAR secSeg[10] = {0};
+    TCHAR gFileTail[4] = {'~', '.', 'g', '\0'};
+  #else
+    char *tmpFile;
+    char *strIndex1 = 0, *strIndex2 = 0, *beginIndex;
+    char secSeg[10] = {0};
+  #endif
+
+  if (path == 0 || len <= 3 || outStr == 0) return;
+
+  tmpFile = path;
+  #if _LFN_UNICODE
+    strIndex1 = (WCHAR *)wcsstr((const WCHAR *)tmpFile, (const WCHAR *)'/');
+    strIndex2 = (WCHAR *)wcsstr((const WCHAR *)tmpFile, (const WCHAR *)'.');
+  #else
+    strIndex1 = (char *)strrchr(tmpFile, '/');
+    strIndex2 = (char *)strrchr(tmpFile, '.');
+  #endif
+
+  beginIndex = (strIndex1 != 0
+                // && (strIndex2 != 0) && (strIndex1 < strIndex2)
+                ) ? strIndex1 + 1 : tmpFile;
+
+  if (strIndex2 == 0 || (strIndex1 > strIndex2)) { // not gcode file
+    #if _LFN_UNICODE
+      if (wcslen(beginIndex) > len)
+        wcsncpy(outStr, beginIndex, len);
+      else
+        wcscpy(outStr, beginIndex);
+    #else
+      if ((int)strlen(beginIndex) > len)
+        strncpy(outStr, beginIndex, len);
+      else
+        strcpy(outStr, beginIndex);
+    #endif
+  }
+  else { //gcode file
+    if (strIndex2 - beginIndex > (len - 2)) {
+      #if _LFN_UNICODE
+        wcsncpy(outStr, (const WCHAR *)beginIndex, len - 3);
+        wcscat(outStr, (const WCHAR *)gFileTail);
+      #else
+        //strncpy(outStr, beginIndex, len - 3);
+        strncpy(outStr, beginIndex, len - 4);
+        strcat(outStr, "~.g");
+      #endif
+    }
+    else {
+      #if _LFN_UNICODE
+        wcsncpy(outStr, (const WCHAR *)beginIndex, strIndex2 - beginIndex + 1);
+        wcscat(outStr, (const WCHAR *)&gFileTail[3]);
+      #else
+        strncpy(outStr, beginIndex, strIndex2 - beginIndex + 1);
+        strcat(outStr, "g");
+      #endif
+    }
+  }
+
+  #if _LFN_UNICODE
+    if (wcslen(outStr) > bytePerLine) {
+      wcscpy(secSeg, (const WCHAR *)&outStr[bytePerLine]);
+      outStr[bytePerLine] = '\n';
+      outStr[bytePerLine + 1] = '\0';
+      wcscat(outStr, (const WCHAR *)secSeg);
+    }
+  #else
+    if ((int)strlen(outStr) > bytePerLine) {
+      strcpy(secSeg, &outStr[bytePerLine]);
+      outStr[bytePerLine] = '\n';
+      outStr[bytePerLine + 1] = '\0';
+      strcat(outStr, secSeg);
+    }
+    else {
+      strcat(outStr, "\n");
+    }
+  #endif
+}
+
+void lv_clear_print_file() { lv_obj_del(scr); }
+
+#endif // TFT_LITTLE_VGL_UI
