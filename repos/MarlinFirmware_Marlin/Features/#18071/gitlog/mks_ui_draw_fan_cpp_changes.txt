commit 2e0bde37d77c8c0d8274d74f18cb27be2c232278
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Oct 17 22:10:08 2021 -0500

    ðŸŽ¨ Add MKS UI goto_previous_ui

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp
index b2107709a4..12b47d9e94 100644
--- a/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp
@@ -48,21 +48,21 @@ uint8_t fanPercent = 0;
 static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
   const uint8_t temp = map(thermalManager.fan_speed[0], 0, 255, 0, 100);
   if (abs(fanPercent - temp) > 2) fanPercent = temp;
   switch (obj->mks_obj_id) {
     case ID_F_ADD: if (fanPercent < 100) fanPercent++; break;
     case ID_F_DEC: if (fanPercent !=  0) fanPercent--; break;
     case ID_F_HIGH: fanPercent = 100; break;
     case ID_F_MID:  fanPercent =  50; break;
     case ID_F_OFF:  fanPercent =   0; break;
-    case ID_F_RETURN: clear_cur_ui(); draw_return_ui(); return;
+    case ID_F_RETURN: goto_previous_ui(); return;
   }
   thermalManager.set_fan_speed(0, map(fanPercent, 0, 100, 0, 255));
   if (obj->mks_obj_id != ID_F_RETURN) disp_fan_value();
 }
 
 void lv_draw_fan() {
   lv_obj_t *buttonAdd;
 
   scr = lv_screen_create(FAN_UI);
   // Create an Image button

commit 8df3e62c89f94f68465ac30e276333940e069ff7
Author: Sola <42537573+solawc@users.noreply.github.com>
Date:   Thu Sep 16 19:48:24 2021 +0800

    ðŸš¸ Fix and improve MKS LVGL UI (#22783)
    
    Co-authored-by: makerbase <4164049@qq.com>
    Co-authored-by: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp
index ab7a9a6001..b2107709a4 100644
--- a/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp
@@ -37,55 +37,58 @@ static lv_obj_t *scr, *fanText;
 
 enum {
   ID_F_ADD = 1,
   ID_F_DEC,
   ID_F_HIGH,
   ID_F_MID,
   ID_F_OFF,
   ID_F_RETURN
 };
 
+uint8_t fanPercent = 0;
 static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
-  uint8_t fanPercent = map(thermalManager.fan_speed[0], 0, 255, 0, 100);
+  const uint8_t temp = map(thermalManager.fan_speed[0], 0, 255, 0, 100);
+  if (abs(fanPercent - temp) > 2) fanPercent = temp;
   switch (obj->mks_obj_id) {
     case ID_F_ADD: if (fanPercent < 100) fanPercent++; break;
     case ID_F_DEC: if (fanPercent !=  0) fanPercent--; break;
     case ID_F_HIGH: fanPercent = 100; break;
     case ID_F_MID:  fanPercent =  50; break;
     case ID_F_OFF:  fanPercent =   0; break;
     case ID_F_RETURN: clear_cur_ui(); draw_return_ui(); return;
   }
   thermalManager.set_fan_speed(0, map(fanPercent, 0, 100, 0, 255));
+  if (obj->mks_obj_id != ID_F_RETURN) disp_fan_value();
 }
 
 void lv_draw_fan() {
   lv_obj_t *buttonAdd;
 
   scr = lv_screen_create(FAN_UI);
   // Create an Image button
-  buttonAdd  = lv_big_button_create(scr, "F:/bmp_Add.bin", fan_menu.add, INTERVAL_V, titleHeight, event_handler, ID_F_ADD);
+  buttonAdd = lv_big_button_create(scr, "F:/bmp_Add.bin", fan_menu.add, INTERVAL_V, titleHeight, event_handler, ID_F_ADD);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
   lv_big_button_create(scr, "F:/bmp_Dec.bin", fan_menu.dec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_F_DEC);
   lv_big_button_create(scr, "F:/bmp_speed255.bin", fan_menu.full, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_HIGH);
   lv_big_button_create(scr, "F:/bmp_speed127.bin", fan_menu.half, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_MID);
   lv_big_button_create(scr, "F:/bmp_speed0.bin", fan_menu.off, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_OFF);
   lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_RETURN);
 
   fanText = lv_label_create_empty(scr);
   lv_obj_set_style(fanText, &tft_style_label_rel);
   disp_fan_value();
 }
 
 void disp_fan_value() {
   #if HAS_FAN
-    sprintf_P(public_buf_l, PSTR("%s: %3d%%"), fan_menu.state, (int)map(thermalManager.fan_speed[0], 0, 255, 0, 100));
+    sprintf_P(public_buf_l, PSTR("%s: %3d%%"), fan_menu.state, fanPercent);
   #else
     sprintf_P(public_buf_l, PSTR("%s: ---"), fan_menu.state);
   #endif
   lv_label_set_text(fanText, public_buf_l);
   lv_obj_align(fanText, nullptr, LV_ALIGN_CENTER, 0, -65);
 }
 
 void lv_clear_fan() {
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);

commit 323b38ee88dbf2a4691a20439dbb95a824822199
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Sep 16 04:36:26 2021 -0500

    ðŸ’¡ Adjust headers, formatting

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp
index ce804e615d..ab7a9a6001 100644
--- a/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp
@@ -12,20 +12,21 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
+
 #include "../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
 #include "draw_ui.h"
 #include <lv_conf.h>
 
 #include "../../../module/temperature.h"
 #include "../../../gcode/queue.h"
 #include "../../../gcode/gcode.h"

commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp
new file mode 100644
index 0000000000..ce804e615d
--- /dev/null
+++ b/Marlin/src/lcd/extui/mks_ui/draw_fan.cpp
@@ -0,0 +1,95 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../inc/MarlinConfigPre.h"
+
+#if HAS_TFT_LVGL_UI
+
+#include "draw_ui.h"
+#include <lv_conf.h>
+
+#include "../../../module/temperature.h"
+#include "../../../gcode/queue.h"
+#include "../../../gcode/gcode.h"
+#include "../../../inc/MarlinConfig.h"
+
+extern lv_group_t *g;
+static lv_obj_t *scr, *fanText;
+
+enum {
+  ID_F_ADD = 1,
+  ID_F_DEC,
+  ID_F_HIGH,
+  ID_F_MID,
+  ID_F_OFF,
+  ID_F_RETURN
+};
+
+static void event_handler(lv_obj_t *obj, lv_event_t event) {
+  if (event != LV_EVENT_RELEASED) return;
+  uint8_t fanPercent = map(thermalManager.fan_speed[0], 0, 255, 0, 100);
+  switch (obj->mks_obj_id) {
+    case ID_F_ADD: if (fanPercent < 100) fanPercent++; break;
+    case ID_F_DEC: if (fanPercent !=  0) fanPercent--; break;
+    case ID_F_HIGH: fanPercent = 100; break;
+    case ID_F_MID:  fanPercent =  50; break;
+    case ID_F_OFF:  fanPercent =   0; break;
+    case ID_F_RETURN: clear_cur_ui(); draw_return_ui(); return;
+  }
+  thermalManager.set_fan_speed(0, map(fanPercent, 0, 100, 0, 255));
+}
+
+void lv_draw_fan() {
+  lv_obj_t *buttonAdd;
+
+  scr = lv_screen_create(FAN_UI);
+  // Create an Image button
+  buttonAdd  = lv_big_button_create(scr, "F:/bmp_Add.bin", fan_menu.add, INTERVAL_V, titleHeight, event_handler, ID_F_ADD);
+  lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
+  lv_big_button_create(scr, "F:/bmp_Dec.bin", fan_menu.dec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_F_DEC);
+  lv_big_button_create(scr, "F:/bmp_speed255.bin", fan_menu.full, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_HIGH);
+  lv_big_button_create(scr, "F:/bmp_speed127.bin", fan_menu.half, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_MID);
+  lv_big_button_create(scr, "F:/bmp_speed0.bin", fan_menu.off, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_OFF);
+  lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_RETURN);
+
+  fanText = lv_label_create_empty(scr);
+  lv_obj_set_style(fanText, &tft_style_label_rel);
+  disp_fan_value();
+}
+
+void disp_fan_value() {
+  #if HAS_FAN
+    sprintf_P(public_buf_l, PSTR("%s: %3d%%"), fan_menu.state, (int)map(thermalManager.fan_speed[0], 0, 255, 0, 100));
+  #else
+    sprintf_P(public_buf_l, PSTR("%s: ---"), fan_menu.state);
+  #endif
+  lv_label_set_text(fanText, public_buf_l);
+  lv_obj_align(fanText, nullptr, LV_ALIGN_CENTER, 0, -65);
+}
+
+void lv_clear_fan() {
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
+  #endif
+  lv_obj_del(scr);
+}
+
+#endif // HAS_TFT_LVGL_UI
