commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
deleted file mode 100644
index f3585cc6cb..0000000000
--- a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
+++ /dev/null
@@ -1,105 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-#include "../../../../inc/MarlinConfigPre.h"
-
-#if HAS_TFT_LVGL_UI
-
-#include "pic_manager.h"
-#include <lvgl.h>
-
-#include "../../../../inc/MarlinConfig.h"
-
-#if HAS_SPI_FLASH_FONT
-
-typedef struct {
-  uint16_t min;
-  uint16_t max;
-  uint8_t bpp;
-  uint8_t reserved[3];
-} x_header_t;
-
-typedef struct {
-  uint32_t pos;
-} x_table_t;
-
-typedef struct {
-  uint8_t adv_w;
-  uint8_t box_w;
-} glyph_dsc_t;
-
-static x_header_t __g_xbf_hd = { .min = 0, .max = 0, .bpp = 0 };
-static uint8_t __g_font_buf[63];
-
-static uint8_t *__user_font_getdata(int offset, int size) {
-  get_spi_flash_data((char *)__g_font_buf, offset, size);
-  return __g_font_buf;
-}
-
-static const uint8_t * __user_font_get_bitmap(const lv_font_t * font, uint32_t unicode_letter) {
-  if (__g_xbf_hd.max == 0) {
-    uint8_t *p = __user_font_getdata(0, sizeof(x_header_t));
-    memcpy(&__g_xbf_hd, p, sizeof(x_header_t));
-  }
-  if (unicode_letter > __g_xbf_hd.max || unicode_letter < __g_xbf_hd.min)
-    return nullptr;
-  uint32_t unicode_offset = sizeof(x_header_t) + (unicode_letter - __g_xbf_hd.min) * 4;
-  uint32_t *p_pos = (uint32_t *)__user_font_getdata(unicode_offset, 4);
-  if (p_pos[0] != 0) {
-    uint32_t pos = p_pos[0];
-    __user_font_getdata(pos, 2);
-    return __user_font_getdata(pos + 2, sizeof(__g_font_buf));
-  }
-  return nullptr;
-}
-
-static bool __user_font_get_glyph_dsc(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter, uint32_t unicode_letter_next) {
-  if (__g_xbf_hd.max == 0) {
-    uint8_t *p = __user_font_getdata(0, sizeof(x_header_t));
-    memcpy(&__g_xbf_hd, p, sizeof(x_header_t));
-  }
-  if (unicode_letter > __g_xbf_hd.max || unicode_letter < __g_xbf_hd.min)
-    return false;
-  uint32_t unicode_offset = sizeof(x_header_t) + (unicode_letter - __g_xbf_hd.min) * 4;
-  uint32_t *p_pos = (uint32_t *)__user_font_getdata(unicode_offset, 4);
-  if (p_pos[0] != 0) {
-    glyph_dsc_t * gdsc = (glyph_dsc_t*)__user_font_getdata(p_pos[0], 2);
-    dsc_out->adv_w = gdsc->adv_w;
-    dsc_out->box_h = font->line_height;
-    dsc_out->box_w = gdsc->box_w;
-    dsc_out->ofs_x = 0;
-    dsc_out->ofs_y = 0;
-    dsc_out->bpp = __g_xbf_hd.bpp;
-    return true;
-  }
-  return false;
-}
-
-lv_font_t gb2312_puhui32;
-void init_gb2312_font() {
-  gb2312_puhui32.get_glyph_bitmap = __user_font_get_bitmap;
-  gb2312_puhui32.get_glyph_dsc = __user_font_get_glyph_dsc;
-  gb2312_puhui32.line_height = 21;
-  gb2312_puhui32.base_line = 0;
-}
-
-#endif // HAS_SPI_FLASH_FONT
-#endif // HAS_TFT_LVGL_UI

commit 44c57ab05a8f909b85f51e08c90316b41e50c455
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 21:02:35 2021 -0600

    MKS UI prelim. cleanup (#20763)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
index fbc8192ffb..f3585cc6cb 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
@@ -43,40 +43,36 @@ typedef struct {
 
 typedef struct {
   uint8_t adv_w;
   uint8_t box_w;
 } glyph_dsc_t;
 
 static x_header_t __g_xbf_hd = { .min = 0, .max = 0, .bpp = 0 };
 static uint8_t __g_font_buf[63];
 
 static uint8_t *__user_font_getdata(int offset, int size) {
-  //ZERO(__g_font_buf);
   get_spi_flash_data((char *)__g_font_buf, offset, size);
   return __g_font_buf;
-  //return &buf_test[offset];
 }
 
 static const uint8_t * __user_font_get_bitmap(const lv_font_t * font, uint32_t unicode_letter) {
   if (__g_xbf_hd.max == 0) {
     uint8_t *p = __user_font_getdata(0, sizeof(x_header_t));
     memcpy(&__g_xbf_hd, p, sizeof(x_header_t));
   }
   if (unicode_letter > __g_xbf_hd.max || unicode_letter < __g_xbf_hd.min)
     return nullptr;
   uint32_t unicode_offset = sizeof(x_header_t) + (unicode_letter - __g_xbf_hd.min) * 4;
   uint32_t *p_pos = (uint32_t *)__user_font_getdata(unicode_offset, 4);
   if (p_pos[0] != 0) {
     uint32_t pos = p_pos[0];
-    //glyph_dsc_t * gdsc = (glyph_dsc_t*)__user_font_getdata(pos, 2);
     __user_font_getdata(pos, 2);
-    //return __user_font_getdata(pos+2, gdsc->box_w*__g_xbf_hd.bpp/8);
     return __user_font_getdata(pos + 2, sizeof(__g_font_buf));
   }
   return nullptr;
 }
 
 static bool __user_font_get_glyph_dsc(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter, uint32_t unicode_letter_next) {
   if (__g_xbf_hd.max == 0) {
     uint8_t *p = __user_font_getdata(0, sizeof(x_header_t));
     memcpy(&__g_xbf_hd, p, sizeof(x_header_t));
   }
@@ -90,26 +86,20 @@ static bool __user_font_get_glyph_dsc(const lv_font_t * font, lv_font_glyph_dsc_
     dsc_out->box_h = font->line_height;
     dsc_out->box_w = gdsc->box_w;
     dsc_out->ofs_x = 0;
     dsc_out->ofs_y = 0;
     dsc_out->bpp = __g_xbf_hd.bpp;
     return true;
   }
   return false;
 }
 
-/*lv_font_t gb2312_puhui32 = {
-.get_glyph_bitmap = __user_font_get_bitmap,
-.get_glyph_dsc = __user_font_get_glyph_dsc,
-.line_height = 25,
-.base_line = 0,
-};*/
 lv_font_t gb2312_puhui32;
 void init_gb2312_font() {
   gb2312_puhui32.get_glyph_bitmap = __user_font_get_bitmap;
   gb2312_puhui32.get_glyph_dsc = __user_font_get_glyph_dsc;
   gb2312_puhui32.line_height = 21;
   gb2312_puhui32.base_line = 0;
 }
 
 #endif // HAS_SPI_FLASH_FONT
 #endif // HAS_TFT_LVGL_UI

commit 9630c2683c39468bf885c560a1768d8b377d9462
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 01:37:45 2020 -0300

    More MKS UI cleanup, optimization (#19869)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
index 856d645e9e..fbc8192ffb 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
@@ -55,40 +55,40 @@ static uint8_t *__user_font_getdata(int offset, int size) {
   return __g_font_buf;
   //return &buf_test[offset];
 }
 
 static const uint8_t * __user_font_get_bitmap(const lv_font_t * font, uint32_t unicode_letter) {
   if (__g_xbf_hd.max == 0) {
     uint8_t *p = __user_font_getdata(0, sizeof(x_header_t));
     memcpy(&__g_xbf_hd, p, sizeof(x_header_t));
   }
   if (unicode_letter > __g_xbf_hd.max || unicode_letter < __g_xbf_hd.min)
-    return NULL;
+    return nullptr;
   uint32_t unicode_offset = sizeof(x_header_t) + (unicode_letter - __g_xbf_hd.min) * 4;
   uint32_t *p_pos = (uint32_t *)__user_font_getdata(unicode_offset, 4);
   if (p_pos[0] != 0) {
     uint32_t pos = p_pos[0];
     //glyph_dsc_t * gdsc = (glyph_dsc_t*)__user_font_getdata(pos, 2);
     __user_font_getdata(pos, 2);
     //return __user_font_getdata(pos+2, gdsc->box_w*__g_xbf_hd.bpp/8);
     return __user_font_getdata(pos + 2, sizeof(__g_font_buf));
   }
-  return NULL;
+  return nullptr;
 }
 
 static bool __user_font_get_glyph_dsc(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter, uint32_t unicode_letter_next) {
   if (__g_xbf_hd.max == 0) {
     uint8_t *p = __user_font_getdata(0, sizeof(x_header_t));
     memcpy(&__g_xbf_hd, p, sizeof(x_header_t));
   }
   if (unicode_letter > __g_xbf_hd.max || unicode_letter < __g_xbf_hd.min)
-    return NULL;
+    return false;
   uint32_t unicode_offset = sizeof(x_header_t) + (unicode_letter - __g_xbf_hd.min) * 4;
   uint32_t *p_pos = (uint32_t *)__user_font_getdata(unicode_offset, 4);
   if (p_pos[0] != 0) {
     glyph_dsc_t * gdsc = (glyph_dsc_t*)__user_font_getdata(p_pos[0], 2);
     dsc_out->adv_w = gdsc->adv_w;
     dsc_out->box_h = font->line_height;
     dsc_out->box_w = gdsc->box_w;
     dsc_out->ofs_x = 0;
     dsc_out->ofs_y = 0;
     dsc_out->bpp = __g_xbf_hd.bpp;

commit d20d4591321aa467c062f0050355d2aca84e03ad
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Sat Jul 25 13:52:07 2020 +0800

    Robin nano V2, TFT LVGL UI parameters, and more (#18500)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
index 2d7b7d440b..856d645e9e 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
@@ -14,49 +14,50 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LVGL_UI)
+#if HAS_TFT_LVGL_UI
 
-#include "../../../../MarlinCore.h"
-#include "lvgl.h"
 #include "pic_manager.h"
+#include <lvgl.h>
+
+#include "../../../../inc/MarlinConfig.h"
 
 #if HAS_SPI_FLASH_FONT
 
 typedef struct {
   uint16_t min;
   uint16_t max;
   uint8_t bpp;
   uint8_t reserved[3];
 } x_header_t;
 
 typedef struct {
   uint32_t pos;
 } x_table_t;
 
 typedef struct {
   uint8_t adv_w;
   uint8_t box_w;
 } glyph_dsc_t;
 
 static x_header_t __g_xbf_hd = { .min = 0, .max = 0, .bpp = 0 };
-static uint8_t __g_font_buf[75];
+static uint8_t __g_font_buf[63];
 
 static uint8_t *__user_font_getdata(int offset, int size) {
-  //memset(__g_font_buf,0,sizeof(__g_font_buf));
+  //ZERO(__g_font_buf);
   get_spi_flash_data((char *)__g_font_buf, offset, size);
   return __g_font_buf;
   //return &buf_test[offset];
 }
 
 static const uint8_t * __user_font_get_bitmap(const lv_font_t * font, uint32_t unicode_letter) {
   if (__g_xbf_hd.max == 0) {
     uint8_t *p = __user_font_getdata(0, sizeof(x_header_t));
     memcpy(&__g_xbf_hd, p, sizeof(x_header_t));
   }
@@ -99,17 +100,16 @@ static bool __user_font_get_glyph_dsc(const lv_font_t * font, lv_font_glyph_dsc_
 /*lv_font_t gb2312_puhui32 = {
 .get_glyph_bitmap = __user_font_get_bitmap,
 .get_glyph_dsc = __user_font_get_glyph_dsc,
 .line_height = 25,
 .base_line = 0,
 };*/
 lv_font_t gb2312_puhui32;
 void init_gb2312_font() {
   gb2312_puhui32.get_glyph_bitmap = __user_font_get_bitmap;
   gb2312_puhui32.get_glyph_dsc = __user_font_get_glyph_dsc;
-  gb2312_puhui32.line_height = 25;
+  gb2312_puhui32.line_height = 21;
   gb2312_puhui32.base_line = 0;
 }
 
 #endif // HAS_SPI_FLASH_FONT
-
-#endif // TFT_LVGL_UI
+#endif // HAS_TFT_LVGL_UI

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
index 312229a16c..2d7b7d440b 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if ENABLED(TFT_LVGL_UI)
 
 #include "../../../../MarlinCore.h"
 #include "lvgl.h"
 #include "pic_manager.h"
 

commit e5bc9d31cc87be5c7ef2bd3cd70c2599f76d2bd7
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Jul 1 03:30:24 2020 -0300

    Add TFT_LVGL_UI support (#18438)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
index 39fb836b60..312229a16c 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
@@ -14,26 +14,28 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LITTLE_VGL_UI)
+#if ENABLED(TFT_LVGL_UI)
 
 #include "../../../../MarlinCore.h"
 #include "lvgl.h"
 #include "pic_manager.h"
 
+#if HAS_SPI_FLASH_FONT
+
 typedef struct {
   uint16_t min;
   uint16_t max;
   uint8_t bpp;
   uint8_t reserved[3];
 } x_header_t;
 
 typedef struct {
   uint32_t pos;
 } x_table_t;
@@ -101,11 +103,13 @@ static bool __user_font_get_glyph_dsc(const lv_font_t * font, lv_font_glyph_dsc_
 .base_line = 0,
 };*/
 lv_font_t gb2312_puhui32;
 void init_gb2312_font() {
   gb2312_puhui32.get_glyph_bitmap = __user_font_get_bitmap;
   gb2312_puhui32.get_glyph_dsc = __user_font_get_glyph_dsc;
   gb2312_puhui32.line_height = 25;
   gb2312_puhui32.base_line = 0;
 }
 
-#endif // TFT_LITTLE_VGL_UI
+#endif // HAS_SPI_FLASH_FONT
+
+#endif // TFT_LVGL_UI

commit 642112d3eb7c1af9a52feec8134c85ed3e34891c
Author: makerbase <4164049@qq.com>
Date:   Tue Jun 16 10:05:33 2020 +0800

    Add MKS UI (TFT_LITTLE_VGL_UI) (#18071)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
new file mode 100644
index 0000000000..39fb836b60
--- /dev/null
+++ b/Marlin/src/lcd/extui/lib/mks_ui/gb2312_puhui16.cpp
@@ -0,0 +1,111 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(TFT_LITTLE_VGL_UI)
+
+#include "../../../../MarlinCore.h"
+#include "lvgl.h"
+#include "pic_manager.h"
+
+typedef struct {
+  uint16_t min;
+  uint16_t max;
+  uint8_t bpp;
+  uint8_t reserved[3];
+} x_header_t;
+
+typedef struct {
+  uint32_t pos;
+} x_table_t;
+
+typedef struct {
+  uint8_t adv_w;
+  uint8_t box_w;
+} glyph_dsc_t;
+
+static x_header_t __g_xbf_hd = { .min = 0, .max = 0, .bpp = 0 };
+static uint8_t __g_font_buf[75];
+
+static uint8_t *__user_font_getdata(int offset, int size) {
+  //memset(__g_font_buf,0,sizeof(__g_font_buf));
+  get_spi_flash_data((char *)__g_font_buf, offset, size);
+  return __g_font_buf;
+  //return &buf_test[offset];
+}
+
+static const uint8_t * __user_font_get_bitmap(const lv_font_t * font, uint32_t unicode_letter) {
+  if (__g_xbf_hd.max == 0) {
+    uint8_t *p = __user_font_getdata(0, sizeof(x_header_t));
+    memcpy(&__g_xbf_hd, p, sizeof(x_header_t));
+  }
+  if (unicode_letter > __g_xbf_hd.max || unicode_letter < __g_xbf_hd.min)
+    return NULL;
+  uint32_t unicode_offset = sizeof(x_header_t) + (unicode_letter - __g_xbf_hd.min) * 4;
+  uint32_t *p_pos = (uint32_t *)__user_font_getdata(unicode_offset, 4);
+  if (p_pos[0] != 0) {
+    uint32_t pos = p_pos[0];
+    //glyph_dsc_t * gdsc = (glyph_dsc_t*)__user_font_getdata(pos, 2);
+    __user_font_getdata(pos, 2);
+    //return __user_font_getdata(pos+2, gdsc->box_w*__g_xbf_hd.bpp/8);
+    return __user_font_getdata(pos + 2, sizeof(__g_font_buf));
+  }
+  return NULL;
+}
+
+static bool __user_font_get_glyph_dsc(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter, uint32_t unicode_letter_next) {
+  if (__g_xbf_hd.max == 0) {
+    uint8_t *p = __user_font_getdata(0, sizeof(x_header_t));
+    memcpy(&__g_xbf_hd, p, sizeof(x_header_t));
+  }
+  if (unicode_letter > __g_xbf_hd.max || unicode_letter < __g_xbf_hd.min)
+    return NULL;
+  uint32_t unicode_offset = sizeof(x_header_t) + (unicode_letter - __g_xbf_hd.min) * 4;
+  uint32_t *p_pos = (uint32_t *)__user_font_getdata(unicode_offset, 4);
+  if (p_pos[0] != 0) {
+    glyph_dsc_t * gdsc = (glyph_dsc_t*)__user_font_getdata(p_pos[0], 2);
+    dsc_out->adv_w = gdsc->adv_w;
+    dsc_out->box_h = font->line_height;
+    dsc_out->box_w = gdsc->box_w;
+    dsc_out->ofs_x = 0;
+    dsc_out->ofs_y = 0;
+    dsc_out->bpp = __g_xbf_hd.bpp;
+    return true;
+  }
+  return false;
+}
+
+/*lv_font_t gb2312_puhui32 = {
+.get_glyph_bitmap = __user_font_get_bitmap,
+.get_glyph_dsc = __user_font_get_glyph_dsc,
+.line_height = 25,
+.base_line = 0,
+};*/
+lv_font_t gb2312_puhui32;
+void init_gb2312_font() {
+  gb2312_puhui32.get_glyph_bitmap = __user_font_get_bitmap;
+  gb2312_puhui32.get_glyph_dsc = __user_font_get_glyph_dsc;
+  gb2312_puhui32.line_height = 25;
+  gb2312_puhui32.base_line = 0;
+}
+
+#endif // TFT_LITTLE_VGL_UI
