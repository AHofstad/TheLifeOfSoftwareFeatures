commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
deleted file mode 100644
index 5953d04184..0000000000
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ /dev/null
@@ -1,208 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-#include "../../../../inc/MarlinConfigPre.h"
-
-#if HAS_TFT_LVGL_UI
-
-#include "draw_ui.h"
-#include <lv_conf.h>
-
-#include "../../../../inc/MarlinConfig.h"
-#include <string.h>
-
-enum {
-  ID_CN = 1,
-  ID_T_CN,
-  ID_EN,
-  ID_RU,
-  ID_ES,
-  ID_FR,
-  ID_IT,
-  ID_L_RETURN
-};
-
-#define SELECTED    1
-#define UNSELECTED  0
-
-static void disp_language(uint8_t language, uint8_t state);
-
-extern lv_group_t *g;
-static lv_obj_t *scr;
-static lv_obj_t *buttonCN, *buttonT_CN, *buttonEN, *buttonRU;
-static lv_obj_t *buttonES, *buttonFR, *buttonIT;
-
-static void event_handler(lv_obj_t *obj, lv_event_t event) {
-  if (event != LV_EVENT_RELEASED) return;
-  switch (obj->mks_obj_id) {
-    case ID_CN:
-      disp_language(gCfgItems.language, UNSELECTED);
-      lv_imgbtn_set_src_both(buttonCN, "F:/bmp_simplified_cn_sel.bin");
-      lv_obj_refresh_ext_draw_pad(buttonCN);
-      gCfgItems.language = LANG_SIMPLE_CHINESE;
-      update_spi_flash();
-      disp_language_init();
-      break;
-    case ID_T_CN:
-      disp_language(gCfgItems.language, UNSELECTED);
-      lv_imgbtn_set_src_both(buttonT_CN, "F:/bmp_traditional_cn_sel.bin");
-      lv_obj_refresh_ext_draw_pad(buttonT_CN);
-      gCfgItems.language = LANG_COMPLEX_CHINESE;
-      update_spi_flash();
-      disp_language_init();
-      break;
-    case ID_EN:
-      disp_language(gCfgItems.language, UNSELECTED);
-      lv_imgbtn_set_src_both(buttonEN, "F:/bmp_english_sel.bin");
-      lv_obj_refresh_ext_draw_pad(buttonEN);
-      gCfgItems.language = LANG_ENGLISH;
-      update_spi_flash();
-      disp_language_init();
-      break;
-    case ID_RU:
-      disp_language(gCfgItems.language, UNSELECTED);
-      lv_imgbtn_set_src_both(buttonRU, "F:/bmp_russian_sel.bin");
-      lv_obj_refresh_ext_draw_pad(buttonRU);
-      gCfgItems.language = LANG_RUSSIAN;
-      update_spi_flash();
-      disp_language_init();
-      break;
-    case ID_ES:
-      disp_language(gCfgItems.language, UNSELECTED);
-      lv_imgbtn_set_src_both(buttonES, "F:/bmp_spanish_sel.bin");
-      lv_obj_refresh_ext_draw_pad(buttonES);
-      gCfgItems.language = LANG_SPANISH;
-      update_spi_flash();
-      disp_language_init();
-      break;
-    case ID_FR:
-      disp_language(gCfgItems.language, UNSELECTED);
-      lv_imgbtn_set_src_both(buttonFR, "F:/bmp_french_sel.bin");
-      lv_obj_refresh_ext_draw_pad(buttonFR);
-      gCfgItems.language = LANG_FRENCH;
-      update_spi_flash();
-      disp_language_init();
-      break;
-    case ID_IT:
-      disp_language(gCfgItems.language, UNSELECTED);
-      lv_imgbtn_set_src_both(buttonIT, "F:/bmp_italy_sel.bin");
-      lv_obj_refresh_ext_draw_pad(buttonIT);
-      gCfgItems.language = LANG_ITALY;
-      update_spi_flash();
-      disp_language_init();
-      break;
-    case ID_L_RETURN:
-      buttonCN   = nullptr;
-      buttonT_CN = nullptr;
-      buttonEN   = nullptr;
-      buttonRU   = nullptr;
-      buttonES   = nullptr;
-      buttonFR   = nullptr;
-      buttonFR   = nullptr;
-      buttonIT   = nullptr;
-      lv_clear_language();
-      lv_draw_set();
-      break;
-  }
-}
-
-static void disp_language(uint8_t language, uint8_t state) {
-  uint16_t id;
-  lv_obj_t *obj;
-
-  public_buf_l[0] = '\0';
-
-  switch (language) {
-    case LANG_SIMPLE_CHINESE:
-      id = ID_CN;
-      strcpy_P(public_buf_l, PSTR("F:/bmp_simplified_cn"));
-      obj = buttonCN;
-      break;
-    case LANG_COMPLEX_CHINESE:
-      id = ID_T_CN;
-      strcpy_P(public_buf_l, PSTR("F:/bmp_traditional_cn"));
-      obj = buttonT_CN;
-      break;
-    case LANG_ENGLISH:
-      id = ID_EN;
-      strcpy_P(public_buf_l, PSTR("F:/bmp_english"));
-      obj = buttonEN;
-      break;
-    case LANG_RUSSIAN:
-      id = ID_RU;
-      strcpy_P(public_buf_l, PSTR("F:/bmp_russian"));
-      obj = buttonRU;
-      break;
-    case LANG_SPANISH:
-      id = ID_ES;
-      strcpy_P(public_buf_l, PSTR("F:/bmp_spanish"));
-      obj = buttonES;
-      break;
-    case LANG_FRENCH:
-      id = ID_FR;
-      strcpy_P(public_buf_l, PSTR("F:/bmp_french"));
-      obj = buttonFR;
-      break;
-    case LANG_ITALY:
-      id = ID_IT;
-      strcpy_P(public_buf_l, PSTR("F:/bmp_italy"));
-      obj = buttonIT;
-      break;
-    default:
-      id = ID_CN;
-      strcpy_P(public_buf_l, PSTR("F:/bmp_simplified_cn"));
-      obj = buttonCN;
-      break;
-  }
-
-  if (state == SELECTED) strcat_P(public_buf_l, PSTR("_sel"));
-
-  strcat_P(public_buf_l, PSTR(".bin"));
-
-  lv_obj_set_event_cb_mks(obj, event_handler, id, "", 0);
-  lv_imgbtn_set_src_both(obj, public_buf_l);
-
-  if (state == UNSELECTED) lv_obj_refresh_ext_draw_pad(obj);
-}
-
-void lv_draw_language() {
-  scr = lv_screen_create(LANGUAGE_UI);
-  // Create image buttons
-  buttonCN = lv_big_button_create(scr, "F:/bmp_simplified_cn.bin", language_menu.chinese_s, INTERVAL_V, titleHeight, event_handler, ID_CN);
-  lv_obj_clear_protect(buttonCN, LV_PROTECT_FOLLOW);
-  buttonT_CN = lv_big_button_create(scr, "F:/bmp_traditional_cn.bin", language_menu.chinese_t, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_T_CN);
-  buttonEN = lv_big_button_create(scr, "F:/bmp_english.bin", language_menu.english, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_EN);
-  buttonRU = lv_big_button_create(scr, "F:/bmp_russian.bin", language_menu.russian, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_RU);
-  buttonES = lv_big_button_create(scr, "F:/bmp_spanish.bin", language_menu.spanish, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_ES);
-  buttonFR = lv_big_button_create(scr, "F:/bmp_french.bin", language_menu.french, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_FR);
-  buttonIT = lv_big_button_create(scr, "F:/bmp_italy.bin", language_menu.italy, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_IT);
-  lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_L_RETURN);
-  disp_language(gCfgItems.language, SELECTED);
-}
-
-void lv_clear_language() {
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
-  #endif
-  lv_obj_del(scr);
-}
-
-#endif // HAS_TFT_LVGL_UI

commit c753fc690f6cdd181213304224eee029988ffd34
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 14 00:23:56 2021 -0600

    More MKS UI prelim. cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
index 7edb73b71f..5953d04184 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -176,21 +176,21 @@ static void disp_language(uint8_t language, uint8_t state) {
   if (state == SELECTED) strcat_P(public_buf_l, PSTR("_sel"));
 
   strcat_P(public_buf_l, PSTR(".bin"));
 
   lv_obj_set_event_cb_mks(obj, event_handler, id, "", 0);
   lv_imgbtn_set_src_both(obj, public_buf_l);
 
   if (state == UNSELECTED) lv_obj_refresh_ext_draw_pad(obj);
 }
 
-void lv_draw_language(void) {
+void lv_draw_language() {
   scr = lv_screen_create(LANGUAGE_UI);
   // Create image buttons
   buttonCN = lv_big_button_create(scr, "F:/bmp_simplified_cn.bin", language_menu.chinese_s, INTERVAL_V, titleHeight, event_handler, ID_CN);
   lv_obj_clear_protect(buttonCN, LV_PROTECT_FOLLOW);
   buttonT_CN = lv_big_button_create(scr, "F:/bmp_traditional_cn.bin", language_menu.chinese_t, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_T_CN);
   buttonEN = lv_big_button_create(scr, "F:/bmp_english.bin", language_menu.english, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_EN);
   buttonRU = lv_big_button_create(scr, "F:/bmp_russian.bin", language_menu.russian, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_RU);
   buttonES = lv_big_button_create(scr, "F:/bmp_spanish.bin", language_menu.spanish, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_ES);
   buttonFR = lv_big_button_create(scr, "F:/bmp_french.bin", language_menu.french, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_FR);
   buttonIT = lv_big_button_create(scr, "F:/bmp_italy.bin", language_menu.italy, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_IT);

commit 44c57ab05a8f909b85f51e08c90316b41e50c455
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 21:02:35 2021 -0600

    MKS UI prelim. cleanup (#20763)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
index befed7a646..7edb73b71f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -18,24 +18,20 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
 #include "draw_ui.h"
 #include <lv_conf.h>
-//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
-//#include "../lvgl/src/lv_objx/lv_img.h"
-//#include "../lvgl/src/lv_core/lv_disp.h"
-//#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../inc/MarlinConfig.h"
 #include <string.h>
 
 enum {
   ID_CN = 1,
   ID_T_CN,
   ID_EN,
   ID_RU,
   ID_ES,

commit f8ee6f8b3176b6df7bc3d23119a4bee36c6ff0d8
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Nov 10 22:39:34 2020 -0300

    Fix UI compile issues (#20092)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
index 8f7279f5dd..befed7a646 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -174,21 +174,21 @@ static void disp_language(uint8_t language, uint8_t state) {
       id = ID_CN;
       strcpy_P(public_buf_l, PSTR("F:/bmp_simplified_cn"));
       obj = buttonCN;
       break;
   }
 
   if (state == SELECTED) strcat_P(public_buf_l, PSTR("_sel"));
 
   strcat_P(public_buf_l, PSTR(".bin"));
 
-  lv_obj_set_event_cb_mks(obj, event_handler, id, nullptr, 0);
+  lv_obj_set_event_cb_mks(obj, event_handler, id, "", 0);
   lv_imgbtn_set_src_both(obj, public_buf_l);
 
   if (state == UNSELECTED) lv_obj_refresh_ext_draw_pad(obj);
 }
 
 void lv_draw_language(void) {
   scr = lv_screen_create(LANGUAGE_UI);
   // Create image buttons
   buttonCN = lv_big_button_create(scr, "F:/bmp_simplified_cn.bin", language_menu.chinese_s, INTERVAL_V, titleHeight, event_handler, ID_CN);
   lv_obj_clear_protect(buttonCN, LV_PROTECT_FOLLOW);

commit 853d01de683ab3efcbb15ef95db869e279053ee0
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 19:28:31 2020 -0300

    More LVGL UI code reduction (#19879)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
index 1ff60d9b9b..8f7279f5dd 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -181,44 +181,31 @@ static void disp_language(uint8_t language, uint8_t state) {
 
   strcat_P(public_buf_l, PSTR(".bin"));
 
   lv_obj_set_event_cb_mks(obj, event_handler, id, nullptr, 0);
   lv_imgbtn_set_src_both(obj, public_buf_l);
 
   if (state == UNSELECTED) lv_obj_refresh_ext_draw_pad(obj);
 }
 
 void lv_draw_language(void) {
-
-  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != LANGUAGE_UI) {
-    disp_state_stack._disp_index++;
-    disp_state_stack._disp_state[disp_state_stack._disp_index] = LANGUAGE_UI;
-  }
-  disp_state = LANGUAGE_UI;
-
-  scr = lv_screen_create();
-
-  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
-
-  lv_refr_now(lv_refr_get_disp_refreshing());
-
+  scr = lv_screen_create(LANGUAGE_UI);
   // Create image buttons
   buttonCN = lv_big_button_create(scr, "F:/bmp_simplified_cn.bin", language_menu.chinese_s, INTERVAL_V, titleHeight, event_handler, ID_CN);
   lv_obj_clear_protect(buttonCN, LV_PROTECT_FOLLOW);
   buttonT_CN = lv_big_button_create(scr, "F:/bmp_traditional_cn.bin", language_menu.chinese_t, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_T_CN);
   buttonEN = lv_big_button_create(scr, "F:/bmp_english.bin", language_menu.english, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_EN);
   buttonRU = lv_big_button_create(scr, "F:/bmp_russian.bin", language_menu.russian, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_RU);
   buttonES = lv_big_button_create(scr, "F:/bmp_spanish.bin", language_menu.spanish, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_ES);
   buttonFR = lv_big_button_create(scr, "F:/bmp_french.bin", language_menu.french, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_FR);
   buttonIT = lv_big_button_create(scr, "F:/bmp_italy.bin", language_menu.italy, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_IT);
   lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_L_RETURN);
-
   disp_language(gCfgItems.language, SELECTED);
 }
 
 void lv_clear_language() {
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
   #endif
   lv_obj_del(scr);
 }
 

commit 9630c2683c39468bf885c560a1768d8b377d9462
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 01:37:45 2020 -0300

    More MKS UI cleanup, optimization (#19869)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
index b5c2da09aa..1ff60d9b9b 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -26,153 +26,112 @@
 #include "draw_ui.h"
 #include <lv_conf.h>
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../inc/MarlinConfig.h"
 #include <string.h>
 
-//static lv_obj_t *buttonMoveZ,*buttonTest,*buttonZ0,*buttonStop,*buttonReturn;
-
-#define ID_CN       1
-#define ID_T_CN     2
-#define ID_EN       3
-#define ID_RU       4
-#define ID_ES       5
-#define ID_FR       6
-#define ID_IT       7
-#define ID_L_RETURN 8
+enum {
+  ID_CN = 1,
+  ID_T_CN,
+  ID_EN,
+  ID_RU,
+  ID_ES,
+  ID_FR,
+  ID_IT,
+  ID_L_RETURN
+};
 
 #define SELECTED    1
 #define UNSELECTED  0
 
 static void disp_language(uint8_t language, uint8_t state);
 
-extern lv_group_t * g;
-static lv_obj_t * scr;
+extern lv_group_t *g;
+static lv_obj_t *scr;
 static lv_obj_t *buttonCN, *buttonT_CN, *buttonEN, *buttonRU;
-static lv_obj_t *buttonES, *buttonFR, *buttonIT, *buttonBack;
+static lv_obj_t *buttonES, *buttonFR, *buttonIT;
 
-static void event_handler(lv_obj_t * obj, lv_event_t event) {
+static void event_handler(lv_obj_t *obj, lv_event_t event) {
+  if (event != LV_EVENT_RELEASED) return;
   switch (obj->mks_obj_id) {
     case ID_CN:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src_both(buttonCN, "F:/bmp_simplified_cn_sel.bin");
-        lv_obj_refresh_ext_draw_pad(buttonCN);
-        gCfgItems.language = LANG_SIMPLE_CHINESE;
-        update_spi_flash();
-        disp_language_init();
-      }
+      disp_language(gCfgItems.language, UNSELECTED);
+      lv_imgbtn_set_src_both(buttonCN, "F:/bmp_simplified_cn_sel.bin");
+      lv_obj_refresh_ext_draw_pad(buttonCN);
+      gCfgItems.language = LANG_SIMPLE_CHINESE;
+      update_spi_flash();
+      disp_language_init();
       break;
     case ID_T_CN:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src_both(buttonT_CN, "F:/bmp_traditional_cn_sel.bin");
-        lv_obj_refresh_ext_draw_pad(buttonT_CN);
-        gCfgItems.language = LANG_COMPLEX_CHINESE;
-        update_spi_flash();
-        disp_language_init();
-      }
+      disp_language(gCfgItems.language, UNSELECTED);
+      lv_imgbtn_set_src_both(buttonT_CN, "F:/bmp_traditional_cn_sel.bin");
+      lv_obj_refresh_ext_draw_pad(buttonT_CN);
+      gCfgItems.language = LANG_COMPLEX_CHINESE;
+      update_spi_flash();
+      disp_language_init();
       break;
     case ID_EN:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src_both(buttonEN, "F:/bmp_english_sel.bin");
-        lv_obj_refresh_ext_draw_pad(buttonEN);
-        gCfgItems.language = LANG_ENGLISH;
-        update_spi_flash();
-        disp_language_init();
-      }
+      disp_language(gCfgItems.language, UNSELECTED);
+      lv_imgbtn_set_src_both(buttonEN, "F:/bmp_english_sel.bin");
+      lv_obj_refresh_ext_draw_pad(buttonEN);
+      gCfgItems.language = LANG_ENGLISH;
+      update_spi_flash();
+      disp_language_init();
       break;
     case ID_RU:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src_both(buttonRU, "F:/bmp_russian_sel.bin");
-        lv_obj_refresh_ext_draw_pad(buttonRU);
-        gCfgItems.language = LANG_RUSSIAN;
-        update_spi_flash();
-        disp_language_init();
-      }
+      disp_language(gCfgItems.language, UNSELECTED);
+      lv_imgbtn_set_src_both(buttonRU, "F:/bmp_russian_sel.bin");
+      lv_obj_refresh_ext_draw_pad(buttonRU);
+      gCfgItems.language = LANG_RUSSIAN;
+      update_spi_flash();
+      disp_language_init();
       break;
     case ID_ES:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src_both(buttonES, "F:/bmp_spanish_sel.bin");
-        lv_obj_refresh_ext_draw_pad(buttonES);
-        gCfgItems.language = LANG_SPANISH;
-        update_spi_flash();
-        disp_language_init();
-      }
+      disp_language(gCfgItems.language, UNSELECTED);
+      lv_imgbtn_set_src_both(buttonES, "F:/bmp_spanish_sel.bin");
+      lv_obj_refresh_ext_draw_pad(buttonES);
+      gCfgItems.language = LANG_SPANISH;
+      update_spi_flash();
+      disp_language_init();
       break;
     case ID_FR:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src_both(buttonFR, "F:/bmp_french_sel.bin");
-        lv_obj_refresh_ext_draw_pad(buttonFR);
-        gCfgItems.language = LANG_FRENCH;
-        update_spi_flash();
-        disp_language_init();
-      }
+      disp_language(gCfgItems.language, UNSELECTED);
+      lv_imgbtn_set_src_both(buttonFR, "F:/bmp_french_sel.bin");
+      lv_obj_refresh_ext_draw_pad(buttonFR);
+      gCfgItems.language = LANG_FRENCH;
+      update_spi_flash();
+      disp_language_init();
       break;
     case ID_IT:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src_both(buttonIT, "F:/bmp_italy_sel.bin");
-        lv_obj_refresh_ext_draw_pad(buttonIT);
-        gCfgItems.language = LANG_ITALY;
-        update_spi_flash();
-        disp_language_init();
-      }
+      disp_language(gCfgItems.language, UNSELECTED);
+      lv_imgbtn_set_src_both(buttonIT, "F:/bmp_italy_sel.bin");
+      lv_obj_refresh_ext_draw_pad(buttonIT);
+      gCfgItems.language = LANG_ITALY;
+      update_spi_flash();
+      disp_language_init();
       break;
     case ID_L_RETURN:
-      if (event == LV_EVENT_CLICKED) {
-
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        buttonCN   = NULL;
-        buttonT_CN = NULL;
-        buttonEN   = NULL;
-        buttonRU   = NULL;
-        buttonES   = NULL;
-        buttonFR   = NULL;
-        buttonFR   = NULL;
-        buttonIT   = NULL;
-        buttonBack = NULL;
-        lv_clear_language();
-        lv_draw_set();
-      }
+      buttonCN   = nullptr;
+      buttonT_CN = nullptr;
+      buttonEN   = nullptr;
+      buttonRU   = nullptr;
+      buttonES   = nullptr;
+      buttonFR   = nullptr;
+      buttonFR   = nullptr;
+      buttonIT   = nullptr;
+      lv_clear_language();
+      lv_draw_set();
       break;
-
   }
 }
 
 static void disp_language(uint8_t language, uint8_t state) {
   uint16_t id;
   lv_obj_t *obj;
 
   public_buf_l[0] = '\0';
 
   switch (language) {
@@ -215,106 +174,52 @@ static void disp_language(uint8_t language, uint8_t state) {
       id = ID_CN;
       strcpy_P(public_buf_l, PSTR("F:/bmp_simplified_cn"));
       obj = buttonCN;
       break;
   }
 
   if (state == SELECTED) strcat_P(public_buf_l, PSTR("_sel"));
 
   strcat_P(public_buf_l, PSTR(".bin"));
 
-  lv_obj_set_event_cb_mks(obj, event_handler, id, NULL, 0);
+  lv_obj_set_event_cb_mks(obj, event_handler, id, nullptr, 0);
   lv_imgbtn_set_src_both(obj, public_buf_l);
 
   if (state == UNSELECTED) lv_obj_refresh_ext_draw_pad(obj);
 }
 
 void lv_draw_language(void) {
 
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != LANGUAGE_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = LANGUAGE_UI;
   }
   disp_state = LANGUAGE_UI;
 
-  scr = lv_obj_create(NULL, NULL);
-
-  // static lv_style_t tool_style;
-
-  lv_obj_set_style(scr, &tft_style_scr);
-  lv_scr_load(scr);
-  lv_obj_clean(scr);
+  scr = lv_screen_create();
 
   (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   // Create image buttons
-  buttonCN = lv_imgbtn_create(scr, "F:/bmp_simplified_cn.bin", INTERVAL_V, titleHeight, event_handler, ID_CN);
+  buttonCN = lv_big_button_create(scr, "F:/bmp_simplified_cn.bin", language_menu.chinese_s, INTERVAL_V, titleHeight, event_handler, ID_CN);
   lv_obj_clear_protect(buttonCN, LV_PROTECT_FOLLOW);
-  buttonT_CN = lv_imgbtn_create(scr, "F:/bmp_traditional_cn.bin", BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_T_CN);
-  buttonEN = lv_imgbtn_create(scr, "F:/bmp_english.bin", BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_EN);
-  buttonRU = lv_imgbtn_create(scr, "F:/bmp_russian.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_RU);
-  buttonES = lv_imgbtn_create(scr, "F:/bmp_spanish.bin", INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_ES);
-  buttonFR = lv_imgbtn_create(scr, "F:/bmp_french.bin", BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_FR);
-  buttonIT = lv_imgbtn_create(scr, "F:/bmp_italy.bin", BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_IT);
-  buttonBack = lv_imgbtn_create(scr, "F:/bmp_return.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_L_RETURN);
-
-  // Create labels on the image buttons
-  lv_obj_t *label_CN   = lv_label_create_empty(buttonCN);
-  lv_obj_t *label_T_CN = lv_label_create_empty(buttonT_CN);
-  lv_obj_t *label_EN   = lv_label_create_empty(buttonEN);
-  lv_obj_t *label_RU   = lv_label_create_empty(buttonRU);
-  lv_obj_t *label_ES   = lv_label_create_empty(buttonES);
-  lv_obj_t *label_FR   = lv_label_create_empty(buttonFR);
-  lv_obj_t *label_IT   = lv_label_create_empty(buttonIT);
-  lv_obj_t *label_Back = lv_label_create_empty(buttonBack);
+  buttonT_CN = lv_big_button_create(scr, "F:/bmp_traditional_cn.bin", language_menu.chinese_t, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_T_CN);
+  buttonEN = lv_big_button_create(scr, "F:/bmp_english.bin", language_menu.english, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_EN);
+  buttonRU = lv_big_button_create(scr, "F:/bmp_russian.bin", language_menu.russian, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_RU);
+  buttonES = lv_big_button_create(scr, "F:/bmp_spanish.bin", language_menu.spanish, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_ES);
+  buttonFR = lv_big_button_create(scr, "F:/bmp_french.bin", language_menu.french, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_FR);
+  buttonIT = lv_big_button_create(scr, "F:/bmp_italy.bin", language_menu.italy, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_IT);
+  lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_L_RETURN);
 
   disp_language(gCfgItems.language, SELECTED);
-
-  if (gCfgItems.multiple_language) {
-    lv_label_set_text(label_CN, language_menu.chinese_s);
-    lv_obj_align(label_CN, buttonCN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_T_CN, language_menu.chinese_t);
-    lv_obj_align(label_T_CN, buttonT_CN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_EN, language_menu.english);
-    lv_obj_align(label_EN, buttonEN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_RU, language_menu.russian);
-    lv_obj_align(label_RU, buttonRU, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_ES, language_menu.spanish);
-    lv_obj_align(label_ES, buttonES, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_FR, language_menu.french);
-    lv_obj_align(label_FR, buttonFR, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_IT, language_menu.italy);
-    lv_obj_align(label_IT, buttonIT, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_Back, common_menu.text_back);
-    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-  }
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) {
-      lv_group_add_obj(g, buttonCN);
-      lv_group_add_obj(g, buttonT_CN);
-      lv_group_add_obj(g, buttonEN);
-      lv_group_add_obj(g, buttonRU);
-      lv_group_add_obj(g, buttonES);
-      lv_group_add_obj(g, buttonFR);
-      lv_group_add_obj(g, buttonIT);
-      lv_group_add_obj(g, buttonBack);
-    }
-  #endif
 }
 
 void lv_clear_language() {
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
   #endif
   lv_obj_del(scr);
 }
 
 #endif // HAS_TFT_LVGL_UI

commit 4533a197d59ffcaccc4d476f06df7754b11b9b0c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 22 20:22:17 2020 -0500

    Slim down MKS UI code (#19843)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
index 4cd2cab72f..b5c2da09aa 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -55,118 +55,110 @@ static lv_obj_t *buttonCN, *buttonT_CN, *buttonEN, *buttonRU;
 static lv_obj_t *buttonES, *buttonFR, *buttonIT, *buttonBack;
 
 static void event_handler(lv_obj_t * obj, lv_event_t event) {
   switch (obj->mks_obj_id) {
     case ID_CN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_REL, "F:/bmp_simplified_cn_sel.bin");
-        lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_PR, "F:/bmp_simplified_cn_sel.bin");
+        lv_imgbtn_set_src_both(buttonCN, "F:/bmp_simplified_cn_sel.bin");
         lv_obj_refresh_ext_draw_pad(buttonCN);
         gCfgItems.language = LANG_SIMPLE_CHINESE;
         update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_T_CN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_REL, "F:/bmp_traditional_cn_sel.bin");
-        lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_PR, "F:/bmp_traditional_cn_sel.bin");
+        lv_imgbtn_set_src_both(buttonT_CN, "F:/bmp_traditional_cn_sel.bin");
         lv_obj_refresh_ext_draw_pad(buttonT_CN);
         gCfgItems.language = LANG_COMPLEX_CHINESE;
         update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_EN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_REL, "F:/bmp_english_sel.bin");
-        lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_PR, "F:/bmp_english_sel.bin");
+        lv_imgbtn_set_src_both(buttonEN, "F:/bmp_english_sel.bin");
         lv_obj_refresh_ext_draw_pad(buttonEN);
         gCfgItems.language = LANG_ENGLISH;
         update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_RU:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_REL, "F:/bmp_russian_sel.bin");
-        lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_PR, "F:/bmp_russian_sel.bin");
+        lv_imgbtn_set_src_both(buttonRU, "F:/bmp_russian_sel.bin");
         lv_obj_refresh_ext_draw_pad(buttonRU);
         gCfgItems.language = LANG_RUSSIAN;
         update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_ES:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src(buttonES, LV_BTN_STATE_REL, "F:/bmp_spanish_sel.bin");
-        lv_imgbtn_set_src(buttonES, LV_BTN_STATE_PR, "F:/bmp_spanish_sel.bin");
+        lv_imgbtn_set_src_both(buttonES, "F:/bmp_spanish_sel.bin");
         lv_obj_refresh_ext_draw_pad(buttonES);
         gCfgItems.language = LANG_SPANISH;
         update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_FR:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_REL, "F:/bmp_french_sel.bin");
-        lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_PR, "F:/bmp_french_sel.bin");
+        lv_imgbtn_set_src_both(buttonFR, "F:/bmp_french_sel.bin");
         lv_obj_refresh_ext_draw_pad(buttonFR);
         gCfgItems.language = LANG_FRENCH;
         update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_IT:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_REL, "F:/bmp_italy_sel.bin");
-        lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_PR, "F:/bmp_italy_sel.bin");
+        lv_imgbtn_set_src_both(buttonIT, "F:/bmp_italy_sel.bin");
         lv_obj_refresh_ext_draw_pad(buttonIT);
         gCfgItems.language = LANG_ITALY;
         update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_L_RETURN:
       if (event == LV_EVENT_CLICKED) {
 
       }
       else if (event == LV_EVENT_RELEASED) {
-
         buttonCN   = NULL;
         buttonT_CN = NULL;
         buttonEN   = NULL;
         buttonRU   = NULL;
         buttonES   = NULL;
         buttonFR   = NULL;
         buttonFR   = NULL;
         buttonIT   = NULL;
         buttonBack = NULL;
         lv_clear_language();
@@ -224,138 +216,65 @@ static void disp_language(uint8_t language, uint8_t state) {
       strcpy_P(public_buf_l, PSTR("F:/bmp_simplified_cn"));
       obj = buttonCN;
       break;
   }
 
   if (state == SELECTED) strcat_P(public_buf_l, PSTR("_sel"));
 
   strcat_P(public_buf_l, PSTR(".bin"));
 
   lv_obj_set_event_cb_mks(obj, event_handler, id, NULL, 0);
-  lv_imgbtn_set_src(obj, LV_BTN_STATE_REL, public_buf_l);
-  lv_imgbtn_set_src(obj, LV_BTN_STATE_PR, public_buf_l);
+  lv_imgbtn_set_src_both(obj, public_buf_l);
 
   if (state == UNSELECTED) lv_obj_refresh_ext_draw_pad(obj);
 }
 
 void lv_draw_language(void) {
 
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != LANGUAGE_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = LANGUAGE_UI;
   }
   disp_state = LANGUAGE_UI;
 
   scr = lv_obj_create(NULL, NULL);
 
   // static lv_style_t tool_style;
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
-  lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_label_rel);
-  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
-  lv_label_set_text(title, creat_title_text());
+  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   // Create image buttons
-  buttonCN   = lv_imgbtn_create(scr, NULL);
-  buttonT_CN = lv_imgbtn_create(scr, NULL);
-  buttonEN   = lv_imgbtn_create(scr, NULL);
-  buttonRU   = lv_imgbtn_create(scr, NULL);
-  buttonES   = lv_imgbtn_create(scr, NULL);
-  buttonFR   = lv_imgbtn_create(scr, NULL);
-  buttonIT   = lv_imgbtn_create(scr, NULL);
-  buttonBack = lv_imgbtn_create(scr, NULL);
-
-  lv_obj_set_event_cb_mks(buttonCN, event_handler, ID_CN, NULL, 0);
-  lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_REL, "F:/bmp_simplified_cn.bin");
-  lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_PR, "F:/bmp_simplified_cn.bin");
-  lv_imgbtn_set_style(buttonCN, LV_BTN_STATE_PR, &tft_style_label_pre);
-  lv_imgbtn_set_style(buttonCN, LV_BTN_STATE_REL, &tft_style_label_rel);
+  buttonCN = lv_imgbtn_create(scr, "F:/bmp_simplified_cn.bin", INTERVAL_V, titleHeight, event_handler, ID_CN);
   lv_obj_clear_protect(buttonCN, LV_PROTECT_FOLLOW);
-
-  #if 1
-    lv_obj_set_event_cb_mks(buttonT_CN, event_handler, ID_T_CN, NULL, 0);
-    lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_REL, "F:/bmp_traditional_cn.bin");
-    lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_PR, "F:/bmp_traditional_cn.bin");
-    lv_imgbtn_set_style(buttonT_CN, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonT_CN, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonEN, event_handler, ID_EN, NULL, 0);
-    lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_REL, "F:/bmp_english.bin");
-    lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_PR, "F:/bmp_english.bin");
-    lv_imgbtn_set_style(buttonEN, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonEN, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonRU, event_handler, ID_RU, NULL, 0);
-    lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_REL, "F:/bmp_russian.bin");
-    lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_PR, "F:/bmp_russian.bin");
-    lv_imgbtn_set_style(buttonRU, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonRU, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonES, event_handler, ID_ES, NULL, 0);
-    lv_imgbtn_set_src(buttonES, LV_BTN_STATE_REL, "F:/bmp_spanish.bin");
-    lv_imgbtn_set_src(buttonES, LV_BTN_STATE_PR, "F:/bmp_spanish.bin");
-    lv_imgbtn_set_style(buttonES, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonES, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonFR, event_handler, ID_FR, NULL, 0);
-    lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_REL, "F:/bmp_french.bin");
-    lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_PR, "F:/bmp_french.bin");
-    lv_imgbtn_set_style(buttonFR, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonFR, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonIT, event_handler, ID_IT, NULL, 0);
-    lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_REL, "F:/bmp_italy.bin");
-    lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_PR, "F:/bmp_italy.bin");
-    lv_imgbtn_set_style(buttonIT, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonIT, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_L_RETURN, NULL, 0);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, "F:/bmp_return.bin");
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, "F:/bmp_return.bin");
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-  #endif // if 1
-
-  lv_obj_set_pos(buttonCN, INTERVAL_V, titleHeight);
-  lv_obj_set_pos(buttonT_CN, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight);
-  lv_obj_set_pos(buttonEN, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight);
-  lv_obj_set_pos(buttonRU, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
-  lv_obj_set_pos(buttonES, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonFR, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonIT, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  buttonT_CN = lv_imgbtn_create(scr, "F:/bmp_traditional_cn.bin", BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_T_CN);
+  buttonEN = lv_imgbtn_create(scr, "F:/bmp_english.bin", BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_EN);
+  buttonRU = lv_imgbtn_create(scr, "F:/bmp_russian.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_RU);
+  buttonES = lv_imgbtn_create(scr, "F:/bmp_spanish.bin", INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_ES);
+  buttonFR = lv_imgbtn_create(scr, "F:/bmp_french.bin", BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_FR);
+  buttonIT = lv_imgbtn_create(scr, "F:/bmp_italy.bin", BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_IT);
+  buttonBack = lv_imgbtn_create(scr, "F:/bmp_return.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_L_RETURN);
 
   // Create labels on the image buttons
-  lv_btn_set_layout(buttonCN, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonT_CN, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonEN, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonRU, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonES, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonFR, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonIT, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
-
-  lv_obj_t *label_CN   = lv_label_create(buttonCN, NULL);
-  lv_obj_t *label_T_CN = lv_label_create(buttonT_CN, NULL);
-  lv_obj_t *label_EN   = lv_label_create(buttonEN, NULL);
-  lv_obj_t *label_RU   = lv_label_create(buttonRU, NULL);
-  lv_obj_t *label_ES   = lv_label_create(buttonES, NULL);
-  lv_obj_t *label_FR   = lv_label_create(buttonFR, NULL);
-  lv_obj_t *label_IT   = lv_label_create(buttonIT, NULL);
-  lv_obj_t *label_Back = lv_label_create(buttonBack, NULL);
+  lv_obj_t *label_CN   = lv_label_create_empty(buttonCN);
+  lv_obj_t *label_T_CN = lv_label_create_empty(buttonT_CN);
+  lv_obj_t *label_EN   = lv_label_create_empty(buttonEN);
+  lv_obj_t *label_RU   = lv_label_create_empty(buttonRU);
+  lv_obj_t *label_ES   = lv_label_create_empty(buttonES);
+  lv_obj_t *label_FR   = lv_label_create_empty(buttonFR);
+  lv_obj_t *label_IT   = lv_label_create_empty(buttonIT);
+  lv_obj_t *label_Back = lv_label_create_empty(buttonBack);
 
   disp_language(gCfgItems.language, SELECTED);
 
   if (gCfgItems.multiple_language) {
     lv_label_set_text(label_CN, language_menu.chinese_s);
     lv_obj_align(label_CN, buttonCN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_T_CN, language_menu.chinese_t);
     lv_obj_align(label_T_CN, buttonT_CN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 

commit 072f996af70b5ac635893eca2d4bd4bbb4f00acc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 21 12:45:27 2020 -0500

    General cleanup, mostly MKS UI (#19825)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
index 3e4ad06477..4cd2cab72f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -16,28 +16,28 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
-#include "lv_conf.h"
 #include "draw_ui.h"
+#include <lv_conf.h>
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
-#include "../../../../MarlinCore.h"
+#include "../../../../inc/MarlinConfig.h"
 #include <string.h>
 
 //static lv_obj_t *buttonMoveZ,*buttonTest,*buttonZ0,*buttonStop,*buttonReturn;
 
 #define ID_CN       1
 #define ID_T_CN     2
 #define ID_EN       3
 #define ID_RU       4
 #define ID_ES       5
 #define ID_FR       6
@@ -345,21 +345,21 @@ void lv_draw_language(void) {
   lv_obj_t *label_T_CN = lv_label_create(buttonT_CN, NULL);
   lv_obj_t *label_EN   = lv_label_create(buttonEN, NULL);
   lv_obj_t *label_RU   = lv_label_create(buttonRU, NULL);
   lv_obj_t *label_ES   = lv_label_create(buttonES, NULL);
   lv_obj_t *label_FR   = lv_label_create(buttonFR, NULL);
   lv_obj_t *label_IT   = lv_label_create(buttonIT, NULL);
   lv_obj_t *label_Back = lv_label_create(buttonBack, NULL);
 
   disp_language(gCfgItems.language, SELECTED);
 
-  if (gCfgItems.multiple_language != 0) {
+  if (gCfgItems.multiple_language) {
     lv_label_set_text(label_CN, language_menu.chinese_s);
     lv_obj_align(label_CN, buttonCN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_T_CN, language_menu.chinese_t);
     lv_obj_align(label_T_CN, buttonT_CN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_EN, language_menu.english);
     lv_obj_align(label_EN, buttonEN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_RU, language_menu.russian);

commit d8ed74904559aa8bdccc8b68acbccfbf1bf779d3
Author: makerbase <4164049@qq.com>
Date:   Mon Sep 21 09:55:02 2020 +0800

    Add MKS Robin E3P, improve LVGL UI (#19442)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
index 9029f6868c..3e4ad06477 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -42,188 +42,204 @@
 #define ID_ES       5
 #define ID_FR       6
 #define ID_IT       7
 #define ID_L_RETURN 8
 
 #define SELECTED    1
 #define UNSELECTED  0
 
 static void disp_language(uint8_t language, uint8_t state);
 
+extern lv_group_t * g;
 static lv_obj_t * scr;
 static lv_obj_t *buttonCN, *buttonT_CN, *buttonEN, *buttonRU;
 static lv_obj_t *buttonES, *buttonFR, *buttonIT, *buttonBack;
 
 static void event_handler(lv_obj_t * obj, lv_event_t event) {
   switch (obj->mks_obj_id) {
     case ID_CN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonCN, event_handler, ID_CN, "bmp_simplified_cn_sel.bin", 0);
+        lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_REL, "F:/bmp_simplified_cn_sel.bin");
+        lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_PR, "F:/bmp_simplified_cn_sel.bin");
+        lv_obj_refresh_ext_draw_pad(buttonCN);
         gCfgItems.language = LANG_SIMPLE_CHINESE;
-        gCfg_to_spiFlah();
+        update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_T_CN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonT_CN, event_handler, ID_T_CN, "bmp_traditional_cn_sel.bin", 0);
+        lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_REL, "F:/bmp_traditional_cn_sel.bin");
+        lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_PR, "F:/bmp_traditional_cn_sel.bin");
+        lv_obj_refresh_ext_draw_pad(buttonT_CN);
         gCfgItems.language = LANG_COMPLEX_CHINESE;
-        gCfg_to_spiFlah();
+        update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_EN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonEN, event_handler, ID_EN, "bmp_english_sel.bin", 0);
+        lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_REL, "F:/bmp_english_sel.bin");
+        lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_PR, "F:/bmp_english_sel.bin");
+        lv_obj_refresh_ext_draw_pad(buttonEN);
         gCfgItems.language = LANG_ENGLISH;
-        gCfg_to_spiFlah();
+        update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_RU:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonRU, event_handler, ID_RU, "bmp_russian_sel.bin", 0);
+        lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_REL, "F:/bmp_russian_sel.bin");
+        lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_PR, "F:/bmp_russian_sel.bin");
+        lv_obj_refresh_ext_draw_pad(buttonRU);
         gCfgItems.language = LANG_RUSSIAN;
-        gCfg_to_spiFlah();
+        update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_ES:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonES, event_handler, ID_ES, "bmp_spanish_sel.bin", 0);
+        lv_imgbtn_set_src(buttonES, LV_BTN_STATE_REL, "F:/bmp_spanish_sel.bin");
+        lv_imgbtn_set_src(buttonES, LV_BTN_STATE_PR, "F:/bmp_spanish_sel.bin");
+        lv_obj_refresh_ext_draw_pad(buttonES);
         gCfgItems.language = LANG_SPANISH;
-        gCfg_to_spiFlah();
+        update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_FR:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonFR, event_handler, ID_FR, "bmp_french_sel.bin", 0);
+        lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_REL, "F:/bmp_french_sel.bin");
+        lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_PR, "F:/bmp_french_sel.bin");
+        lv_obj_refresh_ext_draw_pad(buttonFR);
         gCfgItems.language = LANG_FRENCH;
-        gCfg_to_spiFlah();
+        update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_IT:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonIT, event_handler, ID_FR, "bmp_italy_sel.bin", 0);
+        lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_REL, "F:/bmp_italy_sel.bin");
+        lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_PR, "F:/bmp_italy_sel.bin");
+        lv_obj_refresh_ext_draw_pad(buttonIT);
         gCfgItems.language = LANG_ITALY;
-        gCfg_to_spiFlah();
+        update_spi_flash();
         disp_language_init();
       }
       break;
     case ID_L_RETURN:
       if (event == LV_EVENT_CLICKED) {
 
       }
       else if (event == LV_EVENT_RELEASED) {
 
         buttonCN   = NULL;
         buttonT_CN = NULL;
         buttonEN   = NULL;
         buttonRU   = NULL;
         buttonES   = NULL;
         buttonFR   = NULL;
         buttonFR   = NULL;
         buttonIT   = NULL;
         buttonBack = NULL;
-
-        lv_obj_del(scr);
+        lv_clear_language();
         lv_draw_set();
       }
       break;
 
   }
 }
 
 static void disp_language(uint8_t language, uint8_t state) {
   uint16_t id;
   lv_obj_t *obj;
 
   public_buf_l[0] = '\0';
 
   switch (language) {
     case LANG_SIMPLE_CHINESE:
       id = ID_CN;
-      strcpy_P(public_buf_l, PSTR("bmp_simplified_cn"));
+      strcpy_P(public_buf_l, PSTR("F:/bmp_simplified_cn"));
       obj = buttonCN;
       break;
     case LANG_COMPLEX_CHINESE:
       id = ID_T_CN;
-      strcpy_P(public_buf_l, PSTR("bmp_traditional_cn"));
+      strcpy_P(public_buf_l, PSTR("F:/bmp_traditional_cn"));
       obj = buttonT_CN;
       break;
     case LANG_ENGLISH:
       id = ID_EN;
-      strcpy_P(public_buf_l, PSTR("bmp_english"));
+      strcpy_P(public_buf_l, PSTR("F:/bmp_english"));
       obj = buttonEN;
       break;
     case LANG_RUSSIAN:
       id = ID_RU;
-      strcpy_P(public_buf_l, PSTR("bmp_russian"));
+      strcpy_P(public_buf_l, PSTR("F:/bmp_russian"));
       obj = buttonRU;
       break;
     case LANG_SPANISH:
       id = ID_ES;
-      strcpy_P(public_buf_l, PSTR("bmp_spanish"));
+      strcpy_P(public_buf_l, PSTR("F:/bmp_spanish"));
       obj = buttonES;
       break;
     case LANG_FRENCH:
       id = ID_FR;
-      strcpy_P(public_buf_l, PSTR("bmp_french"));
+      strcpy_P(public_buf_l, PSTR("F:/bmp_french"));
       obj = buttonFR;
       break;
     case LANG_ITALY:
       id = ID_IT;
-      strcpy_P(public_buf_l, PSTR("bmp_italy"));
+      strcpy_P(public_buf_l, PSTR("F:/bmp_italy"));
       obj = buttonIT;
       break;
     default:
       id = ID_CN;
-      strcpy_P(public_buf_l, PSTR("bmp_simplified_cn"));
+      strcpy_P(public_buf_l, PSTR("F:/bmp_simplified_cn"));
       obj = buttonCN;
       break;
   }
 
   if (state == SELECTED) strcat_P(public_buf_l, PSTR("_sel"));
 
   strcat_P(public_buf_l, PSTR(".bin"));
 
-  lv_obj_set_event_cb_mks(obj, event_handler, id, public_buf_l, 0);
+  lv_obj_set_event_cb_mks(obj, event_handler, id, NULL, 0);
+  lv_imgbtn_set_src(obj, LV_BTN_STATE_REL, public_buf_l);
+  lv_imgbtn_set_src(obj, LV_BTN_STATE_PR, public_buf_l);
 
   if (state == UNSELECTED) lv_obj_refresh_ext_draw_pad(obj);
 }
 
 void lv_draw_language(void) {
 
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != LANGUAGE_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = LANGUAGE_UI;
   }
@@ -237,78 +253,77 @@ void lv_draw_language(void) {
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
   lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
-  LV_IMG_DECLARE(bmp_pic);
-
   // Create image buttons
   buttonCN   = lv_imgbtn_create(scr, NULL);
   buttonT_CN = lv_imgbtn_create(scr, NULL);
   buttonEN   = lv_imgbtn_create(scr, NULL);
   buttonRU   = lv_imgbtn_create(scr, NULL);
   buttonES   = lv_imgbtn_create(scr, NULL);
   buttonFR   = lv_imgbtn_create(scr, NULL);
   buttonIT   = lv_imgbtn_create(scr, NULL);
   buttonBack = lv_imgbtn_create(scr, NULL);
 
-  lv_obj_set_event_cb_mks(buttonCN, event_handler, ID_CN, "bmp_simplified_cn.bin", 0);
-  lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_REL, &bmp_pic);
-  lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_PR, &bmp_pic);
+  lv_obj_set_event_cb_mks(buttonCN, event_handler, ID_CN, NULL, 0);
+  lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_REL, "F:/bmp_simplified_cn.bin");
+  lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_PR, "F:/bmp_simplified_cn.bin");
   lv_imgbtn_set_style(buttonCN, LV_BTN_STATE_PR, &tft_style_label_pre);
   lv_imgbtn_set_style(buttonCN, LV_BTN_STATE_REL, &tft_style_label_rel);
   lv_obj_clear_protect(buttonCN, LV_PROTECT_FOLLOW);
+
   #if 1
-    lv_obj_set_event_cb_mks(buttonT_CN, event_handler, ID_T_CN, "bmp_traditional_cn.bin", 0);
-    lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonT_CN, event_handler, ID_T_CN, NULL, 0);
+    lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_REL, "F:/bmp_traditional_cn.bin");
+    lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_PR, "F:/bmp_traditional_cn.bin");
     lv_imgbtn_set_style(buttonT_CN, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonT_CN, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonEN, event_handler, ID_EN, "bmp_english.bin", 0);
-    lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonEN, event_handler, ID_EN, NULL, 0);
+    lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_REL, "F:/bmp_english.bin");
+    lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_PR, "F:/bmp_english.bin");
     lv_imgbtn_set_style(buttonEN, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonEN, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonRU, event_handler, ID_RU, "bmp_russian.bin", 0);
-    lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonRU, event_handler, ID_RU, NULL, 0);
+    lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_REL, "F:/bmp_russian.bin");
+    lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_PR, "F:/bmp_russian.bin");
     lv_imgbtn_set_style(buttonRU, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonRU, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonES, event_handler, ID_ES, "bmp_spanish.bin", 0);
-    lv_imgbtn_set_src(buttonES, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonES, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonES, event_handler, ID_ES, NULL, 0);
+    lv_imgbtn_set_src(buttonES, LV_BTN_STATE_REL, "F:/bmp_spanish.bin");
+    lv_imgbtn_set_src(buttonES, LV_BTN_STATE_PR, "F:/bmp_spanish.bin");
     lv_imgbtn_set_style(buttonES, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonES, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonFR, event_handler, ID_FR, "bmp_french.bin", 0);
-    lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonFR, event_handler, ID_FR, NULL, 0);
+    lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_REL, "F:/bmp_french.bin");
+    lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_PR, "F:/bmp_french.bin");
     lv_imgbtn_set_style(buttonFR, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonFR, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonIT, event_handler, ID_IT, "bmp_italy.bin", 0);
-    lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonIT, event_handler, ID_IT, NULL, 0);
+    lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_REL, "F:/bmp_italy.bin");
+    lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_PR, "F:/bmp_italy.bin");
     lv_imgbtn_set_style(buttonIT, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonIT, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_L_RETURN, "bmp_return.bin", 0);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_L_RETURN, NULL, 0);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, "F:/bmp_return.bin");
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, "F:/bmp_return.bin");
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
 
   #endif // if 1
 
   lv_obj_set_pos(buttonCN, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonT_CN, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight);
   lv_obj_set_pos(buttonEN, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight);
   lv_obj_set_pos(buttonRU, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonES, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
@@ -355,15 +370,32 @@ void lv_draw_language(void) {
 
     lv_label_set_text(label_FR, language_menu.french);
     lv_obj_align(label_FR, buttonFR, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_IT, language_menu.italy);
     lv_obj_align(label_IT, buttonIT, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) {
+      lv_group_add_obj(g, buttonCN);
+      lv_group_add_obj(g, buttonT_CN);
+      lv_group_add_obj(g, buttonEN);
+      lv_group_add_obj(g, buttonRU);
+      lv_group_add_obj(g, buttonES);
+      lv_group_add_obj(g, buttonFR);
+      lv_group_add_obj(g, buttonIT);
+      lv_group_add_obj(g, buttonBack);
+    }
+  #endif
 }
 
-void lv_clear_language() { lv_obj_del(scr); }
+void lv_clear_language() {
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
+  #endif
+  lv_obj_del(scr);
+}
 
 #endif // HAS_TFT_LVGL_UI

commit 60ab7a1ddbda1b1a6d20cbeb5c574ce775f57a4b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 20 19:07:59 2020 -0500

    Cleanup before MKS changes

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
index 65d0961248..9029f6868c 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -239,21 +239,21 @@ void lv_draw_language(void) {
 
   lv_obj_t * title = lv_label_create(scr, NULL);
   lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   LV_IMG_DECLARE(bmp_pic);
 
-  /*Create an Image button*/
+  // Create image buttons
   buttonCN   = lv_imgbtn_create(scr, NULL);
   buttonT_CN = lv_imgbtn_create(scr, NULL);
   buttonEN   = lv_imgbtn_create(scr, NULL);
   buttonRU   = lv_imgbtn_create(scr, NULL);
   buttonES   = lv_imgbtn_create(scr, NULL);
   buttonFR   = lv_imgbtn_create(scr, NULL);
   buttonIT   = lv_imgbtn_create(scr, NULL);
   buttonBack = lv_imgbtn_create(scr, NULL);
 
   lv_obj_set_event_cb_mks(buttonCN, event_handler, ID_CN, "bmp_simplified_cn.bin", 0);
@@ -297,49 +297,50 @@ void lv_draw_language(void) {
     lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_PR, &bmp_pic);
     lv_imgbtn_set_style(buttonIT, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonIT, LV_BTN_STATE_REL, &tft_style_label_rel);
 
     lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_L_RETURN, "bmp_return.bin", 0);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
+
   #endif // if 1
 
   lv_obj_set_pos(buttonCN, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonT_CN, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight);
   lv_obj_set_pos(buttonEN, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight);
   lv_obj_set_pos(buttonRU, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonES, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonFR, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonIT, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
-  /*Create a label on the Image button*/
+  // Create labels on the image buttons
   lv_btn_set_layout(buttonCN, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonT_CN, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonEN, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonRU, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonES, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonFR, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonIT, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
-  lv_obj_t * label_CN   = lv_label_create(buttonCN, NULL);
-  lv_obj_t * label_T_CN = lv_label_create(buttonT_CN, NULL);
-  lv_obj_t * label_EN   = lv_label_create(buttonEN, NULL);
-  lv_obj_t * label_RU   = lv_label_create(buttonRU, NULL);
-  lv_obj_t * label_ES   = lv_label_create(buttonES, NULL);
-  lv_obj_t * label_FR   = lv_label_create(buttonFR, NULL);
-  lv_obj_t * label_IT   = lv_label_create(buttonIT, NULL);
-  lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
+  lv_obj_t *label_CN   = lv_label_create(buttonCN, NULL);
+  lv_obj_t *label_T_CN = lv_label_create(buttonT_CN, NULL);
+  lv_obj_t *label_EN   = lv_label_create(buttonEN, NULL);
+  lv_obj_t *label_RU   = lv_label_create(buttonRU, NULL);
+  lv_obj_t *label_ES   = lv_label_create(buttonES, NULL);
+  lv_obj_t *label_FR   = lv_label_create(buttonFR, NULL);
+  lv_obj_t *label_IT   = lv_label_create(buttonIT, NULL);
+  lv_obj_t *label_Back = lv_label_create(buttonBack, NULL);
 
   disp_language(gCfgItems.language, SELECTED);
 
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(label_CN, language_menu.chinese_s);
     lv_obj_align(label_CN, buttonCN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_T_CN, language_menu.chinese_t);
     lv_obj_align(label_T_CN, buttonT_CN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 

commit d20d4591321aa467c062f0050355d2aca84e03ad
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Sat Jul 25 13:52:07 2020 +0800

    Robin nano V2, TFT LVGL UI parameters, and more (#18500)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
index 75fbb4d91f..65d0961248 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -14,45 +14,45 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LVGL_UI)
+#if HAS_TFT_LVGL_UI
 
 #include "lv_conf.h"
 #include "draw_ui.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../MarlinCore.h"
 #include <string.h>
 
 //static lv_obj_t *buttonMoveZ,*buttonTest,*buttonZ0,*buttonStop,*buttonReturn;
 
-#define ID_CN                           1
-#define ID_T_CN                         2
-#define ID_EN                           3
-#define ID_RU                           4
-#define ID_ES                           5
-#define ID_FR                           6
-#define ID_IT                           7
-#define ID_L_RETURN                     8
+#define ID_CN       1
+#define ID_T_CN     2
+#define ID_EN       3
+#define ID_RU       4
+#define ID_ES       5
+#define ID_FR       6
+#define ID_IT       7
+#define ID_L_RETURN 8
 
-#define SELECTED                        1
-#define UNSELECTED                      0
+#define SELECTED    1
+#define UNSELECTED  0
 
 static void disp_language(uint8_t language, uint8_t state);
 
 static lv_obj_t * scr;
 static lv_obj_t *buttonCN, *buttonT_CN, *buttonEN, *buttonRU;
 static lv_obj_t *buttonES, *buttonFR, *buttonIT, *buttonBack;
 
 static void event_handler(lv_obj_t * obj, lv_event_t event) {
   switch (obj->mks_obj_id) {
     case ID_CN:
@@ -78,269 +78,267 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
         gCfg_to_spiFlah();
         disp_language_init();
       }
       break;
     case ID_EN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonEN, event_handler, ID_EN, "bmp_English_sel.bin", 0);
+        lv_obj_set_event_cb_mks(buttonEN, event_handler, ID_EN, "bmp_english_sel.bin", 0);
         gCfgItems.language = LANG_ENGLISH;
         gCfg_to_spiFlah();
         disp_language_init();
       }
       break;
     case ID_RU:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonRU, event_handler, ID_RU, "bmp_Russian_sel.bin", 0);
+        lv_obj_set_event_cb_mks(buttonRU, event_handler, ID_RU, "bmp_russian_sel.bin", 0);
         gCfgItems.language = LANG_RUSSIAN;
         gCfg_to_spiFlah();
         disp_language_init();
       }
       break;
     case ID_ES:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonES, event_handler, ID_ES, "bmp_Spanish_sel.bin", 0);
+        lv_obj_set_event_cb_mks(buttonES, event_handler, ID_ES, "bmp_spanish_sel.bin", 0);
         gCfgItems.language = LANG_SPANISH;
         gCfg_to_spiFlah();
         disp_language_init();
       }
       break;
     case ID_FR:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonFR, event_handler, ID_FR, "bmp_French_sel.bin", 0);
+        lv_obj_set_event_cb_mks(buttonFR, event_handler, ID_FR, "bmp_french_sel.bin", 0);
         gCfgItems.language = LANG_FRENCH;
         gCfg_to_spiFlah();
         disp_language_init();
       }
       break;
     case ID_IT:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonIT, event_handler, ID_FR, "bmp_Italy_sel.bin", 0);
+        lv_obj_set_event_cb_mks(buttonIT, event_handler, ID_FR, "bmp_italy_sel.bin", 0);
         gCfgItems.language = LANG_ITALY;
         gCfg_to_spiFlah();
         disp_language_init();
       }
       break;
     case ID_L_RETURN:
       if (event == LV_EVENT_CLICKED) {
 
       }
       else if (event == LV_EVENT_RELEASED) {
 
-        buttonCN = NULL;
+        buttonCN   = NULL;
         buttonT_CN = NULL;
-        buttonEN = NULL;
-        buttonRU = NULL;
-        buttonES = NULL;
-        buttonFR = NULL;
-        buttonFR = NULL;
-        buttonIT = NULL;
+        buttonEN   = NULL;
+        buttonRU   = NULL;
+        buttonES   = NULL;
+        buttonFR   = NULL;
+        buttonFR   = NULL;
+        buttonIT   = NULL;
         buttonBack = NULL;
 
         lv_obj_del(scr);
         lv_draw_set();
       }
       break;
 
   }
 }
 
 static void disp_language(uint8_t language, uint8_t state) {
   uint16_t id;
   lv_obj_t *obj;
 
   public_buf_l[0] = '\0';
 
   switch (language) {
-
     case LANG_SIMPLE_CHINESE:
       id = ID_CN;
-      strcat(public_buf_l, "bmp_Simple_cn");
+      strcpy_P(public_buf_l, PSTR("bmp_simplified_cn"));
       obj = buttonCN;
-
       break;
     case LANG_COMPLEX_CHINESE:
       id = ID_T_CN;
-      strcat(public_buf_l, "bmp_Tradition_cn");
+      strcpy_P(public_buf_l, PSTR("bmp_traditional_cn"));
       obj = buttonT_CN;
       break;
     case LANG_ENGLISH:
       id = ID_EN;
-      strcat(public_buf_l, "bmp_English");
+      strcpy_P(public_buf_l, PSTR("bmp_english"));
       obj = buttonEN;
       break;
     case LANG_RUSSIAN:
       id = ID_RU;
-      strcat(public_buf_l, "bmp_Russian");
+      strcpy_P(public_buf_l, PSTR("bmp_russian"));
       obj = buttonRU;
       break;
     case LANG_SPANISH:
       id = ID_ES;
-      strcat(public_buf_l, "bmp_Spanish");
+      strcpy_P(public_buf_l, PSTR("bmp_spanish"));
       obj = buttonES;
       break;
     case LANG_FRENCH:
       id = ID_FR;
-      strcat(public_buf_l, "bmp_French");
+      strcpy_P(public_buf_l, PSTR("bmp_french"));
       obj = buttonFR;
       break;
     case LANG_ITALY:
       id = ID_IT;
-      strcat(public_buf_l, "bmp_Italy");
+      strcpy_P(public_buf_l, PSTR("bmp_italy"));
       obj = buttonIT;
       break;
     default:
       id = ID_CN;
-      strcat(public_buf_l, "bmp_Simple_cn");
+      strcpy_P(public_buf_l, PSTR("bmp_simplified_cn"));
       obj = buttonCN;
       break;
   }
 
-  if (state == SELECTED) strcat(public_buf_l, "_sel.bin");
-  else strcat(public_buf_l, ".bin");
+  if (state == SELECTED) strcat_P(public_buf_l, PSTR("_sel"));
+
+  strcat_P(public_buf_l, PSTR(".bin"));
 
   lv_obj_set_event_cb_mks(obj, event_handler, id, public_buf_l, 0);
 
   if (state == UNSELECTED) lv_obj_refresh_ext_draw_pad(obj);
 }
 
 void lv_draw_language(void) {
 
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != LANGUAGE_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = LANGUAGE_UI;
   }
   disp_state = LANGUAGE_UI;
 
   scr = lv_obj_create(NULL, NULL);
 
-  //static lv_style_t tool_style;
+  // static lv_style_t tool_style;
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   LV_IMG_DECLARE(bmp_pic);
 
   /*Create an Image button*/
-  buttonCN = lv_imgbtn_create(scr, NULL);
+  buttonCN   = lv_imgbtn_create(scr, NULL);
   buttonT_CN = lv_imgbtn_create(scr, NULL);
-  buttonEN = lv_imgbtn_create(scr, NULL);
-  buttonRU = lv_imgbtn_create(scr, NULL);
-  buttonES = lv_imgbtn_create(scr, NULL);
-  buttonFR = lv_imgbtn_create(scr, NULL);
-  buttonIT = lv_imgbtn_create(scr, NULL);
+  buttonEN   = lv_imgbtn_create(scr, NULL);
+  buttonRU   = lv_imgbtn_create(scr, NULL);
+  buttonES   = lv_imgbtn_create(scr, NULL);
+  buttonFR   = lv_imgbtn_create(scr, NULL);
+  buttonIT   = lv_imgbtn_create(scr, NULL);
   buttonBack = lv_imgbtn_create(scr, NULL);
 
-
   lv_obj_set_event_cb_mks(buttonCN, event_handler, ID_CN, "bmp_simplified_cn.bin", 0);
   lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_REL, &bmp_pic);
   lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_PR, &bmp_pic);
-  lv_imgbtn_set_style(buttonCN, LV_BTN_STATE_PR, &tft_style_lable_pre);
-  lv_imgbtn_set_style(buttonCN, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  lv_imgbtn_set_style(buttonCN, LV_BTN_STATE_PR, &tft_style_label_pre);
+  lv_imgbtn_set_style(buttonCN, LV_BTN_STATE_REL, &tft_style_label_rel);
   lv_obj_clear_protect(buttonCN, LV_PROTECT_FOLLOW);
   #if 1
     lv_obj_set_event_cb_mks(buttonT_CN, event_handler, ID_T_CN, "bmp_traditional_cn.bin", 0);
     lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonT_CN, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonT_CN, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonT_CN, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonT_CN, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonEN, event_handler, ID_EN, "bmp_English.bin", 0);
+    lv_obj_set_event_cb_mks(buttonEN, event_handler, ID_EN, "bmp_english.bin", 0);
     lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonEN, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonEN, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonEN, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonEN, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonRU, event_handler, ID_RU, "bmp_Russian.bin", 0);
+    lv_obj_set_event_cb_mks(buttonRU, event_handler, ID_RU, "bmp_russian.bin", 0);
     lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonRU, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonRU, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonRU, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonRU, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonES, event_handler, ID_ES, "bmp_Spanish.bin", 0);
+    lv_obj_set_event_cb_mks(buttonES, event_handler, ID_ES, "bmp_spanish.bin", 0);
     lv_imgbtn_set_src(buttonES, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonES, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonES, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonES, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonES, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonES, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonFR, event_handler, ID_FR, "bmp_French.bin", 0);
+    lv_obj_set_event_cb_mks(buttonFR, event_handler, ID_FR, "bmp_french.bin", 0);
     lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonFR, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonFR, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonFR, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonFR, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonIT, event_handler, ID_IT, "bmp_Italy.bin", 0);
+    lv_obj_set_event_cb_mks(buttonIT, event_handler, ID_IT, "bmp_italy.bin", 0);
     lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonIT, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonIT, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonIT, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonIT, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_L_RETURN, "bmp_Return.bin", 0);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_L_RETURN, "bmp_return.bin", 0);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
-  #endif
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
+  #endif // if 1
 
   lv_obj_set_pos(buttonCN, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonT_CN, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight);
   lv_obj_set_pos(buttonEN, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight);
   lv_obj_set_pos(buttonRU, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
-  lv_obj_set_pos(buttonES, INTERVAL_V,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonES, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonFR, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonIT, BTN_X_PIXEL * 2 + INTERVAL_V * 3,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonIT, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
   /*Create a label on the Image button*/
   lv_btn_set_layout(buttonCN, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonT_CN, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonEN, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonRU, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonES, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonFR, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonIT, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
-  lv_obj_t * label_CN = lv_label_create(buttonCN, NULL);
+  lv_obj_t * label_CN   = lv_label_create(buttonCN, NULL);
   lv_obj_t * label_T_CN = lv_label_create(buttonT_CN, NULL);
-  lv_obj_t * label_EN = lv_label_create(buttonEN, NULL);
-  lv_obj_t * label_RU = lv_label_create(buttonRU, NULL);
-  lv_obj_t * label_ES = lv_label_create(buttonES, NULL);
-  lv_obj_t * label_FR = lv_label_create(buttonFR, NULL);
-  lv_obj_t * label_IT = lv_label_create(buttonIT, NULL);
+  lv_obj_t * label_EN   = lv_label_create(buttonEN, NULL);
+  lv_obj_t * label_RU   = lv_label_create(buttonRU, NULL);
+  lv_obj_t * label_ES   = lv_label_create(buttonES, NULL);
+  lv_obj_t * label_FR   = lv_label_create(buttonFR, NULL);
+  lv_obj_t * label_IT   = lv_label_create(buttonIT, NULL);
   lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
 
   disp_language(gCfgItems.language, SELECTED);
 
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(label_CN, language_menu.chinese_s);
     lv_obj_align(label_CN, buttonCN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_T_CN, language_menu.chinese_t);
     lv_obj_align(label_T_CN, buttonT_CN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
@@ -360,11 +358,11 @@ void lv_draw_language(void) {
     lv_label_set_text(label_IT, language_menu.italy);
     lv_obj_align(label_IT, buttonIT, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 }
 
 void lv_clear_language() { lv_obj_del(scr); }
 
-#endif // TFT_LVGL_UI
+#endif // HAS_TFT_LVGL_UI

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
index 1237c12bbe..75fbb4d91f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if ENABLED(TFT_LVGL_UI)
 
 #include "lv_conf.h"
 #include "draw_ui.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"

commit e5bc9d31cc87be5c7ef2bd3cd70c2599f76d2bd7
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Jul 1 03:30:24 2020 -0300

    Add TFT_LVGL_UI support (#18438)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
index c5c77e8985..1237c12bbe 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -14,21 +14,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LITTLE_VGL_UI)
+#if ENABLED(TFT_LVGL_UI)
 
 #include "lv_conf.h"
 #include "draw_ui.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../MarlinCore.h"
 #include <string.h>
@@ -54,33 +54,33 @@ static lv_obj_t *buttonCN, *buttonT_CN, *buttonEN, *buttonRU;
 static lv_obj_t *buttonES, *buttonFR, *buttonIT, *buttonBack;
 
 static void event_handler(lv_obj_t * obj, lv_event_t event) {
   switch (obj->mks_obj_id) {
     case ID_CN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonCN, event_handler, ID_CN, "bmp_Simple_cn_sel.bin", 0);
+        lv_obj_set_event_cb_mks(buttonCN, event_handler, ID_CN, "bmp_simplified_cn_sel.bin", 0);
         gCfgItems.language = LANG_SIMPLE_CHINESE;
         gCfg_to_spiFlah();
         disp_language_init();
       }
       break;
     case ID_T_CN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         disp_language(gCfgItems.language, UNSELECTED);
-        lv_obj_set_event_cb_mks(buttonT_CN, event_handler, ID_T_CN, "bmp_Tradition_cn_sel.bin", 0);
+        lv_obj_set_event_cb_mks(buttonT_CN, event_handler, ID_T_CN, "bmp_traditional_cn_sel.bin", 0);
         gCfgItems.language = LANG_COMPLEX_CHINESE;
         gCfg_to_spiFlah();
         disp_language_init();
       }
       break;
     case ID_EN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
@@ -251,28 +251,28 @@ void lv_draw_language(void) {
   buttonCN = lv_imgbtn_create(scr, NULL);
   buttonT_CN = lv_imgbtn_create(scr, NULL);
   buttonEN = lv_imgbtn_create(scr, NULL);
   buttonRU = lv_imgbtn_create(scr, NULL);
   buttonES = lv_imgbtn_create(scr, NULL);
   buttonFR = lv_imgbtn_create(scr, NULL);
   buttonIT = lv_imgbtn_create(scr, NULL);
   buttonBack = lv_imgbtn_create(scr, NULL);
 
 
-  lv_obj_set_event_cb_mks(buttonCN, event_handler, ID_CN, "bmp_Simple_cn.bin", 0);
+  lv_obj_set_event_cb_mks(buttonCN, event_handler, ID_CN, "bmp_simplified_cn.bin", 0);
   lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_REL, &bmp_pic);
   lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_PR, &bmp_pic);
   lv_imgbtn_set_style(buttonCN, LV_BTN_STATE_PR, &tft_style_lable_pre);
   lv_imgbtn_set_style(buttonCN, LV_BTN_STATE_REL, &tft_style_lable_rel);
   lv_obj_clear_protect(buttonCN, LV_PROTECT_FOLLOW);
   #if 1
-    lv_obj_set_event_cb_mks(buttonT_CN, event_handler, ID_T_CN, "bmp_Tradition_cn.bin", 0);
+    lv_obj_set_event_cb_mks(buttonT_CN, event_handler, ID_T_CN, "bmp_traditional_cn.bin", 0);
     lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_PR, &bmp_pic);
     lv_imgbtn_set_style(buttonT_CN, LV_BTN_STATE_PR, &tft_style_lable_pre);
     lv_imgbtn_set_style(buttonT_CN, LV_BTN_STATE_REL, &tft_style_lable_rel);
 
     lv_obj_set_event_cb_mks(buttonEN, event_handler, ID_EN, "bmp_English.bin", 0);
     lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_PR, &bmp_pic);
     lv_imgbtn_set_style(buttonEN, LV_BTN_STATE_PR, &tft_style_lable_pre);
     lv_imgbtn_set_style(buttonEN, LV_BTN_STATE_REL, &tft_style_lable_rel);
@@ -360,11 +360,11 @@ void lv_draw_language(void) {
     lv_label_set_text(label_IT, language_menu.italy);
     lv_obj_align(label_IT, buttonIT, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 }
 
 void lv_clear_language() { lv_obj_del(scr); }
 
-#endif // TFT_LITTLE_VGL_UI
+#endif // TFT_LVGL_UI

commit 642112d3eb7c1af9a52feec8134c85ed3e34891c
Author: makerbase <4164049@qq.com>
Date:   Tue Jun 16 10:05:33 2020 +0800

    Add MKS UI (TFT_LITTLE_VGL_UI) (#18071)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
new file mode 100644
index 0000000000..c5c77e8985
--- /dev/null
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_language.cpp
@@ -0,0 +1,370 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(TFT_LITTLE_VGL_UI)
+
+#include "lv_conf.h"
+#include "draw_ui.h"
+//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
+//#include "../lvgl/src/lv_objx/lv_img.h"
+//#include "../lvgl/src/lv_core/lv_disp.h"
+//#include "../lvgl/src/lv_core/lv_refr.h"
+
+#include "../../../../MarlinCore.h"
+#include <string.h>
+
+//static lv_obj_t *buttonMoveZ,*buttonTest,*buttonZ0,*buttonStop,*buttonReturn;
+
+#define ID_CN                           1
+#define ID_T_CN                         2
+#define ID_EN                           3
+#define ID_RU                           4
+#define ID_ES                           5
+#define ID_FR                           6
+#define ID_IT                           7
+#define ID_L_RETURN                     8
+
+#define SELECTED                        1
+#define UNSELECTED                      0
+
+static void disp_language(uint8_t language, uint8_t state);
+
+static lv_obj_t * scr;
+static lv_obj_t *buttonCN, *buttonT_CN, *buttonEN, *buttonRU;
+static lv_obj_t *buttonES, *buttonFR, *buttonIT, *buttonBack;
+
+static void event_handler(lv_obj_t * obj, lv_event_t event) {
+  switch (obj->mks_obj_id) {
+    case ID_CN:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        disp_language(gCfgItems.language, UNSELECTED);
+        lv_obj_set_event_cb_mks(buttonCN, event_handler, ID_CN, "bmp_Simple_cn_sel.bin", 0);
+        gCfgItems.language = LANG_SIMPLE_CHINESE;
+        gCfg_to_spiFlah();
+        disp_language_init();
+      }
+      break;
+    case ID_T_CN:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        disp_language(gCfgItems.language, UNSELECTED);
+        lv_obj_set_event_cb_mks(buttonT_CN, event_handler, ID_T_CN, "bmp_Tradition_cn_sel.bin", 0);
+        gCfgItems.language = LANG_COMPLEX_CHINESE;
+        gCfg_to_spiFlah();
+        disp_language_init();
+      }
+      break;
+    case ID_EN:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        disp_language(gCfgItems.language, UNSELECTED);
+        lv_obj_set_event_cb_mks(buttonEN, event_handler, ID_EN, "bmp_English_sel.bin", 0);
+        gCfgItems.language = LANG_ENGLISH;
+        gCfg_to_spiFlah();
+        disp_language_init();
+      }
+      break;
+    case ID_RU:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        disp_language(gCfgItems.language, UNSELECTED);
+        lv_obj_set_event_cb_mks(buttonRU, event_handler, ID_RU, "bmp_Russian_sel.bin", 0);
+        gCfgItems.language = LANG_RUSSIAN;
+        gCfg_to_spiFlah();
+        disp_language_init();
+      }
+      break;
+    case ID_ES:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        disp_language(gCfgItems.language, UNSELECTED);
+        lv_obj_set_event_cb_mks(buttonES, event_handler, ID_ES, "bmp_Spanish_sel.bin", 0);
+        gCfgItems.language = LANG_SPANISH;
+        gCfg_to_spiFlah();
+        disp_language_init();
+      }
+      break;
+    case ID_FR:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        disp_language(gCfgItems.language, UNSELECTED);
+        lv_obj_set_event_cb_mks(buttonFR, event_handler, ID_FR, "bmp_French_sel.bin", 0);
+        gCfgItems.language = LANG_FRENCH;
+        gCfg_to_spiFlah();
+        disp_language_init();
+      }
+      break;
+    case ID_IT:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        disp_language(gCfgItems.language, UNSELECTED);
+        lv_obj_set_event_cb_mks(buttonIT, event_handler, ID_FR, "bmp_Italy_sel.bin", 0);
+        gCfgItems.language = LANG_ITALY;
+        gCfg_to_spiFlah();
+        disp_language_init();
+      }
+      break;
+    case ID_L_RETURN:
+      if (event == LV_EVENT_CLICKED) {
+
+      }
+      else if (event == LV_EVENT_RELEASED) {
+
+        buttonCN = NULL;
+        buttonT_CN = NULL;
+        buttonEN = NULL;
+        buttonRU = NULL;
+        buttonES = NULL;
+        buttonFR = NULL;
+        buttonFR = NULL;
+        buttonIT = NULL;
+        buttonBack = NULL;
+
+        lv_obj_del(scr);
+        lv_draw_set();
+      }
+      break;
+
+  }
+}
+
+static void disp_language(uint8_t language, uint8_t state) {
+  uint16_t id;
+  lv_obj_t *obj;
+
+  public_buf_l[0] = '\0';
+
+  switch (language) {
+
+    case LANG_SIMPLE_CHINESE:
+      id = ID_CN;
+      strcat(public_buf_l, "bmp_Simple_cn");
+      obj = buttonCN;
+
+      break;
+    case LANG_COMPLEX_CHINESE:
+      id = ID_T_CN;
+      strcat(public_buf_l, "bmp_Tradition_cn");
+      obj = buttonT_CN;
+      break;
+    case LANG_ENGLISH:
+      id = ID_EN;
+      strcat(public_buf_l, "bmp_English");
+      obj = buttonEN;
+      break;
+    case LANG_RUSSIAN:
+      id = ID_RU;
+      strcat(public_buf_l, "bmp_Russian");
+      obj = buttonRU;
+      break;
+    case LANG_SPANISH:
+      id = ID_ES;
+      strcat(public_buf_l, "bmp_Spanish");
+      obj = buttonES;
+      break;
+    case LANG_FRENCH:
+      id = ID_FR;
+      strcat(public_buf_l, "bmp_French");
+      obj = buttonFR;
+      break;
+    case LANG_ITALY:
+      id = ID_IT;
+      strcat(public_buf_l, "bmp_Italy");
+      obj = buttonIT;
+      break;
+    default:
+      id = ID_CN;
+      strcat(public_buf_l, "bmp_Simple_cn");
+      obj = buttonCN;
+      break;
+  }
+
+  if (state == SELECTED) strcat(public_buf_l, "_sel.bin");
+  else strcat(public_buf_l, ".bin");
+
+  lv_obj_set_event_cb_mks(obj, event_handler, id, public_buf_l, 0);
+
+  if (state == UNSELECTED) lv_obj_refresh_ext_draw_pad(obj);
+}
+
+void lv_draw_language(void) {
+
+  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != LANGUAGE_UI) {
+    disp_state_stack._disp_index++;
+    disp_state_stack._disp_state[disp_state_stack._disp_index] = LANGUAGE_UI;
+  }
+  disp_state = LANGUAGE_UI;
+
+  scr = lv_obj_create(NULL, NULL);
+
+  //static lv_style_t tool_style;
+
+  lv_obj_set_style(scr, &tft_style_scr);
+  lv_scr_load(scr);
+  lv_obj_clean(scr);
+
+  lv_obj_t * title = lv_label_create(scr, NULL);
+  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
+  lv_label_set_text(title, creat_title_text());
+
+  lv_refr_now(lv_refr_get_disp_refreshing());
+
+  LV_IMG_DECLARE(bmp_pic);
+
+  /*Create an Image button*/
+  buttonCN = lv_imgbtn_create(scr, NULL);
+  buttonT_CN = lv_imgbtn_create(scr, NULL);
+  buttonEN = lv_imgbtn_create(scr, NULL);
+  buttonRU = lv_imgbtn_create(scr, NULL);
+  buttonES = lv_imgbtn_create(scr, NULL);
+  buttonFR = lv_imgbtn_create(scr, NULL);
+  buttonIT = lv_imgbtn_create(scr, NULL);
+  buttonBack = lv_imgbtn_create(scr, NULL);
+
+
+  lv_obj_set_event_cb_mks(buttonCN, event_handler, ID_CN, "bmp_Simple_cn.bin", 0);
+  lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_REL, &bmp_pic);
+  lv_imgbtn_set_src(buttonCN, LV_BTN_STATE_PR, &bmp_pic);
+  lv_imgbtn_set_style(buttonCN, LV_BTN_STATE_PR, &tft_style_lable_pre);
+  lv_imgbtn_set_style(buttonCN, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  lv_obj_clear_protect(buttonCN, LV_PROTECT_FOLLOW);
+  #if 1
+    lv_obj_set_event_cb_mks(buttonT_CN, event_handler, ID_T_CN, "bmp_Tradition_cn.bin", 0);
+    lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonT_CN, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonT_CN, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonT_CN, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonEN, event_handler, ID_EN, "bmp_English.bin", 0);
+    lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonEN, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonEN, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonEN, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonRU, event_handler, ID_RU, "bmp_Russian.bin", 0);
+    lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonRU, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonRU, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonRU, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonES, event_handler, ID_ES, "bmp_Spanish.bin", 0);
+    lv_imgbtn_set_src(buttonES, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonES, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonES, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonES, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonFR, event_handler, ID_FR, "bmp_French.bin", 0);
+    lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonFR, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonFR, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonFR, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonIT, event_handler, ID_IT, "bmp_Italy.bin", 0);
+    lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonIT, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonIT, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonIT, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_L_RETURN, "bmp_Return.bin", 0);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  #endif
+
+  lv_obj_set_pos(buttonCN, INTERVAL_V, titleHeight);
+  lv_obj_set_pos(buttonT_CN, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight);
+  lv_obj_set_pos(buttonEN, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight);
+  lv_obj_set_pos(buttonRU, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
+  lv_obj_set_pos(buttonES, INTERVAL_V,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonFR, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonIT, BTN_X_PIXEL * 2 + INTERVAL_V * 3,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+
+  /*Create a label on the Image button*/
+  lv_btn_set_layout(buttonCN, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonT_CN, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonEN, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonRU, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonES, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonFR, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonIT, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
+
+  lv_obj_t * label_CN = lv_label_create(buttonCN, NULL);
+  lv_obj_t * label_T_CN = lv_label_create(buttonT_CN, NULL);
+  lv_obj_t * label_EN = lv_label_create(buttonEN, NULL);
+  lv_obj_t * label_RU = lv_label_create(buttonRU, NULL);
+  lv_obj_t * label_ES = lv_label_create(buttonES, NULL);
+  lv_obj_t * label_FR = lv_label_create(buttonFR, NULL);
+  lv_obj_t * label_IT = lv_label_create(buttonIT, NULL);
+  lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
+
+  disp_language(gCfgItems.language, SELECTED);
+
+  if (gCfgItems.multiple_language != 0) {
+    lv_label_set_text(label_CN, language_menu.chinese_s);
+    lv_obj_align(label_CN, buttonCN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_T_CN, language_menu.chinese_t);
+    lv_obj_align(label_T_CN, buttonT_CN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_EN, language_menu.english);
+    lv_obj_align(label_EN, buttonEN, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_RU, language_menu.russian);
+    lv_obj_align(label_RU, buttonRU, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_ES, language_menu.spanish);
+    lv_obj_align(label_ES, buttonES, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_FR, language_menu.french);
+    lv_obj_align(label_FR, buttonFR, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_IT, language_menu.italy);
+    lv_obj_align(label_IT, buttonIT, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_Back, common_menu.text_back);
+    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+  }
+}
+
+void lv_clear_language() { lv_obj_del(scr); }
+
+#endif // TFT_LITTLE_VGL_UI
