commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
deleted file mode 100644
index 77ec61c4b7..0000000000
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ /dev/null
@@ -1,254 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-#include "../../../../inc/MarlinConfigPre.h"
-
-#if HAS_TFT_LVGL_UI
-
-#include "draw_ui.h"
-#include <lv_conf.h>
-
-#include "../../../../module/temperature.h"
-#include "../../../../gcode/queue.h"
-#include "../../../../inc/MarlinConfig.h"
-
-static lv_obj_t *scr;
-extern lv_group_t *g;
-static lv_obj_t *buttonType, *buttonStep, *buttonSpeed;
-static lv_obj_t *labelType;
-static lv_obj_t *labelStep;
-static lv_obj_t *labelSpeed;
-static lv_obj_t *tempText;
-static lv_obj_t *ExtruText;
-
-enum {
-  ID_E_ADD = 1,
-  ID_E_DEC,
-  ID_E_TYPE,
-  ID_E_STEP,
-  ID_E_SPEED,
-  ID_E_RETURN
-};
-
-static int32_t extrudeAmount;
-
-static void event_handler(lv_obj_t *obj, lv_event_t event) {
-  if (event != LV_EVENT_RELEASED) return;
-  switch (obj->mks_obj_id) {
-    case ID_E_ADD:
-      if (thermalManager.degHotend(uiCfg.extruderIndex) >= EXTRUDE_MINTEMP) {
-        sprintf_P((char *)public_buf_l, PSTR("G91\nG1 E%d F%d\nG90"), uiCfg.extruStep, 60 * uiCfg.extruSpeed);
-        queue.inject(public_buf_l);
-        extrudeAmount += uiCfg.extruStep;
-        disp_extru_amount();
-      }
-      break;
-    case ID_E_DEC:
-      if (thermalManager.degHotend(uiCfg.extruderIndex) >= EXTRUDE_MINTEMP) {
-        sprintf_P((char *)public_buf_l, PSTR("G91\nG1 E%d F%d\nG90"), 0 - uiCfg.extruStep, 60 * uiCfg.extruSpeed);
-        queue.enqueue_one_now(public_buf_l);
-        extrudeAmount -= uiCfg.extruStep;
-        disp_extru_amount();
-      }
-      break;
-    case ID_E_TYPE:
-      if (ENABLED(HAS_MULTI_EXTRUDER)) {
-        if (uiCfg.extruderIndex == 0) {
-          uiCfg.extruderIndex = 1;
-          queue.inject_P(PSTR("T1"));
-        }
-        else {
-          uiCfg.extruderIndex = 0;
-          queue.inject_P(PSTR("T0"));
-        }
-      }
-      else
-        uiCfg.extruderIndex = 0;
-
-      extrudeAmount = 0;
-      disp_hotend_temp();
-      disp_ext_type();
-      disp_extru_amount();
-      break;
-    case ID_E_STEP:
-      switch (abs(uiCfg.extruStep)) {
-        case  1: uiCfg.extruStep = 5; break;
-        case  5: uiCfg.extruStep = 10; break;
-        case 10: uiCfg.extruStep = 1; break;
-        default: break;
-      }
-      disp_ext_step();
-      break;
-    case ID_E_SPEED:
-      switch (uiCfg.extruSpeed) {
-        case  1: uiCfg.extruSpeed = 10; break;
-        case 10: uiCfg.extruSpeed = 20; break;
-        case 20: uiCfg.extruSpeed = 1; break;
-        default: break;
-      }
-      disp_ext_speed();
-      break;
-    case ID_E_RETURN:
-      clear_cur_ui();
-      draw_return_ui();
-      break;
-  }
-}
-
-void lv_draw_extrusion() {
-  scr = lv_screen_create(EXTRUSION_UI);
-  // Create image buttons
-  lv_obj_t *buttonAdd = lv_big_button_create(scr, "F:/bmp_in.bin", extrude_menu.in, INTERVAL_V, titleHeight, event_handler, ID_E_ADD);
-  lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
-  lv_big_button_create(scr, "F:/bmp_out.bin", extrude_menu.out, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_E_DEC);
-
-  buttonType = lv_imgbtn_create(scr, nullptr, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_TYPE);
-  buttonStep = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_STEP);
-  buttonSpeed = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_SPEED);
-
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) {
-      lv_group_add_obj(g, buttonType);
-      lv_group_add_obj(g, buttonStep);
-      lv_group_add_obj(g, buttonSpeed);
-    }
-  #endif
-
-  lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_RETURN);
-
-  // Create labels on the image buttons
-  labelType = lv_label_create_empty(buttonType);
-  labelStep = lv_label_create_empty(buttonStep);
-  labelSpeed = lv_label_create_empty(buttonSpeed);
-
-  disp_ext_type();
-  disp_ext_step();
-  disp_ext_speed();
-
-  tempText = lv_label_create_empty(scr);
-  lv_obj_set_style(tempText, &tft_style_label_rel);
-  disp_hotend_temp();
-
-  ExtruText = lv_label_create_empty(scr);
-  lv_obj_set_style(ExtruText, &tft_style_label_rel);
-  disp_extru_amount();
-}
-
-void disp_ext_type() {
-  if (uiCfg.extruderIndex == 1) {
-    lv_imgbtn_set_src_both(buttonType, "F:/bmp_extru2.bin");
-    if (gCfgItems.multiple_language) {
-      lv_label_set_text(labelType, extrude_menu.ext2);
-      lv_obj_align(labelType, buttonType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-    }
-  }
-  else {
-    lv_imgbtn_set_src_both(buttonType, "F:/bmp_extru1.bin");
-    if (gCfgItems.multiple_language) {
-      lv_label_set_text(labelType, extrude_menu.ext1);
-      lv_obj_align(labelType, buttonType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-    }
-  }
-}
-
-void disp_ext_speed() {
-  if (uiCfg.extruSpeed == 20)
-    lv_imgbtn_set_src_both(buttonSpeed, "F:/bmp_speed_high.bin");
-  else if (uiCfg.extruSpeed == 1)
-    lv_imgbtn_set_src_both(buttonSpeed, "F:/bmp_speed_slow.bin");
-  else
-    lv_imgbtn_set_src_both(buttonSpeed, "F:/bmp_speed_normal.bin");
-
-  if (gCfgItems.multiple_language) {
-    if (uiCfg.extruSpeed == 20) {
-      lv_label_set_text(labelSpeed, extrude_menu.high);
-      lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-    }
-    else if (uiCfg.extruSpeed == 1) {
-      lv_label_set_text(labelSpeed, extrude_menu.low);
-      lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-    }
-    else {
-      lv_label_set_text(labelSpeed, extrude_menu.normal);
-      lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-    }
-  }
-}
-
-void disp_hotend_temp() {
-  char buf[20] = {0};
-  sprintf(buf, extrude_menu.temp_value, thermalManager.wholeDegHotend(uiCfg.extruderIndex), thermalManager.degTargetHotend(uiCfg.extruderIndex));
-  strcpy(public_buf_l, extrude_menu.temper_text);
-  strcat(public_buf_l, buf);
-  lv_label_set_text(tempText, public_buf_l);
-  lv_obj_align(tempText, nullptr, LV_ALIGN_CENTER, 0, -50);
-}
-
-void disp_extru_amount() {
-  char buf1[10] = {0};
-
-  public_buf_l[0] = '\0';
-
-  if (extrudeAmount < 999 && extrudeAmount > -99)
-    sprintf(buf1, extrude_menu.count_value_mm, extrudeAmount);
-  else if (extrudeAmount < 9999 && extrudeAmount > -999)
-    sprintf(buf1, extrude_menu.count_value_cm, extrudeAmount / 10);
-  else
-    sprintf(buf1, extrude_menu.count_value_m, extrudeAmount / 1000);
-  strcat(public_buf_l, uiCfg.extruderIndex == 0 ? extrude_menu.ext1 : extrude_menu.ext2);
-  strcat(public_buf_l, buf1);
-
-  lv_label_set_text(ExtruText, public_buf_l);
-  lv_obj_align(ExtruText, nullptr, LV_ALIGN_CENTER, 0, -75);
-}
-
-void disp_ext_step() {
-  if (uiCfg.extruStep == 1)
-    lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step1_mm.bin");
-  else if (uiCfg.extruStep == 5)
-    lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step5_mm.bin");
-  else if (uiCfg.extruStep == 10)
-    lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step10_mm.bin");
-
-  if (gCfgItems.multiple_language) {
-    if (uiCfg.extruStep == 1) {
-      lv_label_set_text(labelStep, extrude_menu.step_1mm);
-      lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-    }
-    else if (uiCfg.extruStep == 5) {
-      lv_label_set_text(labelStep, extrude_menu.step_5mm);
-      lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-    }
-    else if (uiCfg.extruStep == 10) {
-      lv_label_set_text(labelStep, extrude_menu.step_10mm);
-      lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-    }
-  }
-}
-
-void lv_clear_extrusion() {
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
-  #endif
-  lv_obj_del(scr);
-}
-
-#endif // HAS_TFT_LVGL_UI

commit c4620bb5285438e41fa4c39229aa2a39859877ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 23 20:19:23 2021 -0500

    Add whole-degree accessors, simplify some temperature-related features (#21685)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 43ed214199..77ec61c4b7 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -188,21 +188,21 @@ void disp_ext_speed() {
     }
     else {
       lv_label_set_text(labelSpeed, extrude_menu.normal);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_hotend_temp() {
   char buf[20] = {0};
-  sprintf(buf, extrude_menu.temp_value, (int)thermalManager.degHotend(uiCfg.extruderIndex), (int)thermalManager.degTargetHotend(uiCfg.extruderIndex));
+  sprintf(buf, extrude_menu.temp_value, thermalManager.wholeDegHotend(uiCfg.extruderIndex), thermalManager.degTargetHotend(uiCfg.extruderIndex));
   strcpy(public_buf_l, extrude_menu.temper_text);
   strcat(public_buf_l, buf);
   lv_label_set_text(tempText, public_buf_l);
   lv_obj_align(tempText, nullptr, LV_ALIGN_CENTER, 0, -50);
 }
 
 void disp_extru_amount() {
   char buf1[10] = {0};
 
   public_buf_l[0] = '\0';

commit 746eae15f36e4211a22d53b8e12e82edb55a13e5
Author: Malderin <52313714+Malderin@users.noreply.github.com>
Date:   Tue Apr 6 04:55:00 2021 +0300

    Cast celsius to int for MKS LVGL UI (#21502)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 056e2e5d54..43ed214199 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -188,21 +188,21 @@ void disp_ext_speed() {
     }
     else {
       lv_label_set_text(labelSpeed, extrude_menu.normal);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_hotend_temp() {
   char buf[20] = {0};
-  sprintf(buf, extrude_menu.temp_value, thermalManager.degHotend(uiCfg.extruderIndex), thermalManager.degTargetHotend(uiCfg.extruderIndex));
+  sprintf(buf, extrude_menu.temp_value, (int)thermalManager.degHotend(uiCfg.extruderIndex), (int)thermalManager.degTargetHotend(uiCfg.extruderIndex));
   strcpy(public_buf_l, extrude_menu.temper_text);
   strcat(public_buf_l, buf);
   lv_label_set_text(tempText, public_buf_l);
   lv_obj_align(tempText, nullptr, LV_ALIGN_CENTER, 0, -50);
 }
 
 void disp_extru_amount() {
   char buf1[10] = {0};
 
   public_buf_l[0] = '\0';

commit a335cf2edf66db08ab12d3800784b58ad992f6a9
Author: Malderin <52313714+Malderin@users.noreply.github.com>
Date:   Mon Mar 29 11:19:38 2021 +0300

    Fix MKS LVGL UI Main screen / print buttons (#21468)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 43ed214199..056e2e5d54 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -188,21 +188,21 @@ void disp_ext_speed() {
     }
     else {
       lv_label_set_text(labelSpeed, extrude_menu.normal);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_hotend_temp() {
   char buf[20] = {0};
-  sprintf(buf, extrude_menu.temp_value, (int)thermalManager.degHotend(uiCfg.extruderIndex), (int)thermalManager.degTargetHotend(uiCfg.extruderIndex));
+  sprintf(buf, extrude_menu.temp_value, thermalManager.degHotend(uiCfg.extruderIndex), thermalManager.degTargetHotend(uiCfg.extruderIndex));
   strcpy(public_buf_l, extrude_menu.temper_text);
   strcat(public_buf_l, buf);
   lv_label_set_text(tempText, public_buf_l);
   lv_obj_align(tempText, nullptr, LV_ALIGN_CENTER, 0, -50);
 }
 
 void disp_extru_amount() {
   char buf1[10] = {0};
 
   public_buf_l[0] = '\0';

commit 72cc5a49e6fdcf7246b6bded66a4b4fc043054a3
Author: Sola <42537573+solawc@users.noreply.github.com>
Date:   Sat Mar 6 23:04:05 2021 +0800

    MKS H43 fixup (#21267)
    
    Co-authored-by: makerbase <4164049@qq.com>
    Co-authored-by: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index b9af6d33a8..43ed214199 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -47,48 +47,48 @@ enum {
   ID_E_SPEED,
   ID_E_RETURN
 };
 
 static int32_t extrudeAmount;
 
 static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
   switch (obj->mks_obj_id) {
     case ID_E_ADD:
-      if (thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius >= EXTRUDE_MINTEMP) {
+      if (thermalManager.degHotend(uiCfg.extruderIndex) >= EXTRUDE_MINTEMP) {
         sprintf_P((char *)public_buf_l, PSTR("G91\nG1 E%d F%d\nG90"), uiCfg.extruStep, 60 * uiCfg.extruSpeed);
         queue.inject(public_buf_l);
         extrudeAmount += uiCfg.extruStep;
         disp_extru_amount();
       }
       break;
     case ID_E_DEC:
-      if (thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius >= EXTRUDE_MINTEMP) {
+      if (thermalManager.degHotend(uiCfg.extruderIndex) >= EXTRUDE_MINTEMP) {
         sprintf_P((char *)public_buf_l, PSTR("G91\nG1 E%d F%d\nG90"), 0 - uiCfg.extruStep, 60 * uiCfg.extruSpeed);
         queue.enqueue_one_now(public_buf_l);
         extrudeAmount -= uiCfg.extruStep;
         disp_extru_amount();
       }
       break;
     case ID_E_TYPE:
       if (ENABLED(HAS_MULTI_EXTRUDER)) {
-        if (uiCfg.curSprayerChoose == 0) {
-          uiCfg.curSprayerChoose = 1;
+        if (uiCfg.extruderIndex == 0) {
+          uiCfg.extruderIndex = 1;
           queue.inject_P(PSTR("T1"));
         }
         else {
-          uiCfg.curSprayerChoose = 0;
+          uiCfg.extruderIndex = 0;
           queue.inject_P(PSTR("T0"));
         }
       }
       else
-        uiCfg.curSprayerChoose = 0;
+        uiCfg.extruderIndex = 0;
 
       extrudeAmount = 0;
       disp_hotend_temp();
       disp_ext_type();
       disp_extru_amount();
       break;
     case ID_E_STEP:
       switch (abs(uiCfg.extruStep)) {
         case  1: uiCfg.extruStep = 5; break;
         case  5: uiCfg.extruStep = 10; break;
@@ -146,21 +146,21 @@ void lv_draw_extrusion() {
   tempText = lv_label_create_empty(scr);
   lv_obj_set_style(tempText, &tft_style_label_rel);
   disp_hotend_temp();
 
   ExtruText = lv_label_create_empty(scr);
   lv_obj_set_style(ExtruText, &tft_style_label_rel);
   disp_extru_amount();
 }
 
 void disp_ext_type() {
-  if (uiCfg.curSprayerChoose == 1) {
+  if (uiCfg.extruderIndex == 1) {
     lv_imgbtn_set_src_both(buttonType, "F:/bmp_extru2.bin");
     if (gCfgItems.multiple_language) {
       lv_label_set_text(labelType, extrude_menu.ext2);
       lv_obj_align(labelType, buttonType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
   else {
     lv_imgbtn_set_src_both(buttonType, "F:/bmp_extru1.bin");
     if (gCfgItems.multiple_language) {
       lv_label_set_text(labelType, extrude_menu.ext1);
@@ -188,39 +188,39 @@ void disp_ext_speed() {
     }
     else {
       lv_label_set_text(labelSpeed, extrude_menu.normal);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_hotend_temp() {
   char buf[20] = {0};
-  sprintf(buf, extrude_menu.temp_value, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].target);
+  sprintf(buf, extrude_menu.temp_value, (int)thermalManager.degHotend(uiCfg.extruderIndex), (int)thermalManager.degTargetHotend(uiCfg.extruderIndex));
   strcpy(public_buf_l, extrude_menu.temper_text);
   strcat(public_buf_l, buf);
   lv_label_set_text(tempText, public_buf_l);
   lv_obj_align(tempText, nullptr, LV_ALIGN_CENTER, 0, -50);
 }
 
 void disp_extru_amount() {
   char buf1[10] = {0};
 
   public_buf_l[0] = '\0';
 
   if (extrudeAmount < 999 && extrudeAmount > -99)
     sprintf(buf1, extrude_menu.count_value_mm, extrudeAmount);
   else if (extrudeAmount < 9999 && extrudeAmount > -999)
     sprintf(buf1, extrude_menu.count_value_cm, extrudeAmount / 10);
   else
     sprintf(buf1, extrude_menu.count_value_m, extrudeAmount / 1000);
-  strcat(public_buf_l, uiCfg.curSprayerChoose < 1 ? extrude_menu.ext1 : extrude_menu.ext2);
+  strcat(public_buf_l, uiCfg.extruderIndex == 0 ? extrude_menu.ext1 : extrude_menu.ext2);
   strcat(public_buf_l, buf1);
 
   lv_label_set_text(ExtruText, public_buf_l);
   lv_obj_align(ExtruText, nullptr, LV_ALIGN_CENTER, 0, -75);
 }
 
 void disp_ext_step() {
   if (uiCfg.extruStep == 1)
     lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step1_mm.bin");
   else if (uiCfg.extruStep == 5)

commit 12a39450b061b2dc735378d55a140f721f47eeae
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 14 00:43:47 2021 -0600

    MKS prelim. cleanup (2)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 2fdd2c3f2c..b9af6d33a8 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -48,34 +48,30 @@ enum {
   ID_E_RETURN
 };
 
 static int32_t extrudeAmount;
 
 static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
   switch (obj->mks_obj_id) {
     case ID_E_ADD:
       if (thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius >= EXTRUDE_MINTEMP) {
-        queue.enqueue_now_P(PSTR("G91"));
-        sprintf_P((char *)public_buf_l, PSTR("G1 E%d F%d"), uiCfg.extruStep, 60 * uiCfg.extruSpeed);
-        queue.enqueue_one_now(public_buf_l);
-        queue.enqueue_now_P(PSTR("G90"));
+        sprintf_P((char *)public_buf_l, PSTR("G91\nG1 E%d F%d\nG90"), uiCfg.extruStep, 60 * uiCfg.extruSpeed);
+        queue.inject(public_buf_l);
         extrudeAmount += uiCfg.extruStep;
         disp_extru_amount();
       }
       break;
     case ID_E_DEC:
       if (thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius >= EXTRUDE_MINTEMP) {
-        queue.enqueue_now_P(PSTR("G91"));
-        sprintf_P((char *)public_buf_l, PSTR("G1 E%d F%d"), 0 - uiCfg.extruStep, 60 * uiCfg.extruSpeed);
+        sprintf_P((char *)public_buf_l, PSTR("G91\nG1 E%d F%d\nG90"), 0 - uiCfg.extruStep, 60 * uiCfg.extruSpeed);
         queue.enqueue_one_now(public_buf_l);
-        queue.enqueue_now_P(PSTR("G90"));
         extrudeAmount -= uiCfg.extruStep;
         disp_extru_amount();
       }
       break;
     case ID_E_TYPE:
       if (ENABLED(HAS_MULTI_EXTRUDER)) {
         if (uiCfg.curSprayerChoose == 0) {
           uiCfg.curSprayerChoose = 1;
           queue.inject_P(PSTR("T1"));
         }

commit c753fc690f6cdd181213304224eee029988ffd34
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 14 00:23:56 2021 -0600

    More MKS UI prelim. cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 394c702132..2fdd2c3f2c 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -110,21 +110,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
       }
       disp_ext_speed();
       break;
     case ID_E_RETURN:
       clear_cur_ui();
       draw_return_ui();
       break;
   }
 }
 
-void lv_draw_extrusion(void) {
+void lv_draw_extrusion() {
   scr = lv_screen_create(EXTRUSION_UI);
   // Create image buttons
   lv_obj_t *buttonAdd = lv_big_button_create(scr, "F:/bmp_in.bin", extrude_menu.in, INTERVAL_V, titleHeight, event_handler, ID_E_ADD);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
   lv_big_button_create(scr, "F:/bmp_out.bin", extrude_menu.out, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_E_DEC);
 
   buttonType = lv_imgbtn_create(scr, nullptr, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_TYPE);
   buttonStep = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_STEP);
   buttonSpeed = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_SPEED);
 

commit 44c57ab05a8f909b85f51e08c90316b41e50c455
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 21:02:35 2021 -0600

    MKS UI prelim. cleanup (#20763)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 6a1c0c4fb3..394c702132 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -18,24 +18,20 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
 #include "draw_ui.h"
 #include <lv_conf.h>
-//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
-//#include "../lvgl/src/lv_objx/lv_img.h"
-//#include "../lvgl/src/lv_core/lv_disp.h"
-//#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../module/temperature.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../inc/MarlinConfig.h"
 
 static lv_obj_t *scr;
 extern lv_group_t *g;
 static lv_obj_t *buttonType, *buttonStep, *buttonSpeed;
 static lv_obj_t *labelType;
 static lv_obj_t *labelStep;

commit 853d01de683ab3efcbb15ef95db869e279053ee0
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 19:28:31 2020 -0300

    More LVGL UI code reduction (#19879)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 9f803afea9..6a1c0c4fb3 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -115,32 +115,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
       disp_ext_speed();
       break;
     case ID_E_RETURN:
       clear_cur_ui();
       draw_return_ui();
       break;
   }
 }
 
 void lv_draw_extrusion(void) {
-  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != EXTRUSION_UI) {
-    disp_state_stack._disp_index++;
-    disp_state_stack._disp_state[disp_state_stack._disp_index] = EXTRUSION_UI;
-  }
-  disp_state = EXTRUSION_UI;
-
-  scr = lv_screen_create();
-
-  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
-
-  lv_refr_now(lv_refr_get_disp_refreshing());
-
+  scr = lv_screen_create(EXTRUSION_UI);
   // Create image buttons
   lv_obj_t *buttonAdd = lv_big_button_create(scr, "F:/bmp_in.bin", extrude_menu.in, INTERVAL_V, titleHeight, event_handler, ID_E_ADD);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
   lv_big_button_create(scr, "F:/bmp_out.bin", extrude_menu.out, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_E_DEC);
 
   buttonType = lv_imgbtn_create(scr, nullptr, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_TYPE);
   buttonStep = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_STEP);
   buttonSpeed = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_SPEED);
 
   #if HAS_ROTARY_ENCODER

commit 9630c2683c39468bf885c560a1768d8b377d9462
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 01:37:45 2020 -0300

    More MKS UI cleanup, optimization (#19869)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 6402040898..9f803afea9 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -36,186 +36,135 @@
 
 static lv_obj_t *scr;
 extern lv_group_t *g;
 static lv_obj_t *buttonType, *buttonStep, *buttonSpeed;
 static lv_obj_t *labelType;
 static lv_obj_t *labelStep;
 static lv_obj_t *labelSpeed;
 static lv_obj_t *tempText;
 static lv_obj_t *ExtruText;
 
-#define ID_E_ADD    1
-#define ID_E_DEC    2
-#define ID_E_TYPE   3
-#define ID_E_STEP   4
-#define ID_E_SPEED  5
-#define ID_E_RETURN 6
-
-static int32_t extructAmount;
-
-static void event_handler(lv_obj_t * obj, lv_event_t event) {
+enum {
+  ID_E_ADD = 1,
+  ID_E_DEC,
+  ID_E_TYPE,
+  ID_E_STEP,
+  ID_E_SPEED,
+  ID_E_RETURN
+};
+
+static int32_t extrudeAmount;
+
+static void event_handler(lv_obj_t *obj, lv_event_t event) {
+  if (event != LV_EVENT_RELEASED) return;
   switch (obj->mks_obj_id) {
     case ID_E_ADD:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        if (thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius >= EXTRUDE_MINTEMP) {
-          queue.enqueue_now_P(PSTR("G91"));
-          ZERO(public_buf_l);
-          sprintf_P((char *)public_buf_l, PSTR("G1 E%d F%d"), uiCfg.extruStep, 60 * uiCfg.extruSpeed);
-          queue.enqueue_one_now(public_buf_l);
-          queue.enqueue_now_P(PSTR("G90"));
-          extructAmount += uiCfg.extruStep;
-          disp_extru_amount();
-        }
+      if (thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius >= EXTRUDE_MINTEMP) {
+        queue.enqueue_now_P(PSTR("G91"));
+        sprintf_P((char *)public_buf_l, PSTR("G1 E%d F%d"), uiCfg.extruStep, 60 * uiCfg.extruSpeed);
+        queue.enqueue_one_now(public_buf_l);
+        queue.enqueue_now_P(PSTR("G90"));
+        extrudeAmount += uiCfg.extruStep;
+        disp_extru_amount();
       }
       break;
     case ID_E_DEC:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        if (thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius >= EXTRUDE_MINTEMP) {
-          queue.enqueue_now_P(PSTR("G91"));
-          ZERO(public_buf_l);
-          sprintf_P((char *)public_buf_l, PSTR("G1 E%d F%d"), 0 - uiCfg.extruStep, 60 * uiCfg.extruSpeed);
-          queue.enqueue_one_now(public_buf_l);
-          queue.enqueue_now_P(PSTR("G90"));
-          extructAmount -= uiCfg.extruStep;
-          disp_extru_amount();
-        }
+      if (thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius >= EXTRUDE_MINTEMP) {
+        queue.enqueue_now_P(PSTR("G91"));
+        sprintf_P((char *)public_buf_l, PSTR("G1 E%d F%d"), 0 - uiCfg.extruStep, 60 * uiCfg.extruSpeed);
+        queue.enqueue_one_now(public_buf_l);
+        queue.enqueue_now_P(PSTR("G90"));
+        extrudeAmount -= uiCfg.extruStep;
+        disp_extru_amount();
       }
       break;
     case ID_E_TYPE:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        if (ENABLED(HAS_MULTI_EXTRUDER)) {
-          if (uiCfg.curSprayerChoose == 0) {
-            uiCfg.curSprayerChoose = 1;
-            queue.inject_P(PSTR("T1"));
-          }
-          else {
-            uiCfg.curSprayerChoose = 0;
-            queue.inject_P(PSTR("T0"));
-          }
+      if (ENABLED(HAS_MULTI_EXTRUDER)) {
+        if (uiCfg.curSprayerChoose == 0) {
+          uiCfg.curSprayerChoose = 1;
+          queue.inject_P(PSTR("T1"));
         }
-        else
+        else {
           uiCfg.curSprayerChoose = 0;
-
-        extructAmount = 0;
-        disp_hotend_temp();
-        disp_ext_type();
-        disp_extru_amount();
+          queue.inject_P(PSTR("T0"));
+        }
       }
+      else
+        uiCfg.curSprayerChoose = 0;
+
+      extrudeAmount = 0;
+      disp_hotend_temp();
+      disp_ext_type();
+      disp_extru_amount();
       break;
     case ID_E_STEP:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        switch (abs(uiCfg.extruStep)) {
-          case  1: uiCfg.extruStep = 5; break;
-          case  5: uiCfg.extruStep = 10; break;
-          case 10: uiCfg.extruStep = 1; break;
-          default: break;
-        }
-        disp_ext_step();
+      switch (abs(uiCfg.extruStep)) {
+        case  1: uiCfg.extruStep = 5; break;
+        case  5: uiCfg.extruStep = 10; break;
+        case 10: uiCfg.extruStep = 1; break;
+        default: break;
       }
+      disp_ext_step();
       break;
     case ID_E_SPEED:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        switch (uiCfg.extruSpeed) {
-          case  1: uiCfg.extruSpeed = 10; break;
-          case 10: uiCfg.extruSpeed = 20; break;
-          case 20: uiCfg.extruSpeed = 1; break;
-          default: break;
-        }
-        disp_ext_speed();
+      switch (uiCfg.extruSpeed) {
+        case  1: uiCfg.extruSpeed = 10; break;
+        case 10: uiCfg.extruSpeed = 20; break;
+        case 20: uiCfg.extruSpeed = 1; break;
+        default: break;
       }
+      disp_ext_speed();
       break;
     case ID_E_RETURN:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        clear_cur_ui();
-        draw_return_ui();
-      }
+      clear_cur_ui();
+      draw_return_ui();
       break;
   }
 }
 
 void lv_draw_extrusion(void) {
-  lv_obj_t *buttonAdd, *buttonDec, *buttonBack;
-
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != EXTRUSION_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = EXTRUSION_UI;
   }
   disp_state = EXTRUSION_UI;
 
-  scr = lv_obj_create(NULL, NULL);
-
-  lv_obj_set_style(scr, &tft_style_scr);
-  lv_scr_load(scr);
-  lv_obj_clean(scr);
+  scr = lv_screen_create();
 
   (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   // Create image buttons
-  buttonAdd = lv_imgbtn_create(scr, "F:/bmp_in.bin", INTERVAL_V, titleHeight, event_handler, ID_E_ADD);
+  lv_obj_t *buttonAdd = lv_big_button_create(scr, "F:/bmp_in.bin", extrude_menu.in, INTERVAL_V, titleHeight, event_handler, ID_E_ADD);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
+  lv_big_button_create(scr, "F:/bmp_out.bin", extrude_menu.out, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_E_DEC);
 
-  buttonDec = lv_imgbtn_create(scr, "F:/bmp_out.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_E_DEC);
-  buttonType = lv_imgbtn_create(scr, NULL, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_TYPE);
-  buttonStep = lv_imgbtn_create(scr, NULL, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_STEP);
-  buttonSpeed = lv_imgbtn_create(scr, NULL, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_SPEED);
-  buttonBack = lv_imgbtn_create(scr, "F:/bmp_return.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_RETURN);
-
-  // Create labels on the image buttons
-  lv_obj_t *labelAdd   = lv_label_create_empty(buttonAdd);
-  lv_obj_t *labelDec   = lv_label_create_empty(buttonDec);
-  labelType             = lv_label_create_empty(buttonType);
-  labelStep             = lv_label_create_empty(buttonStep);
-  labelSpeed            = lv_label_create_empty(buttonSpeed);
-  lv_obj_t *label_Back = lv_label_create_empty(buttonBack);
-
-  if (gCfgItems.multiple_language) {
-    lv_label_set_text(labelAdd, extrude_menu.in);
-    lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(labelDec, extrude_menu.out);
-    lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_Back, common_menu.text_back);
-    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-  }
+  buttonType = lv_imgbtn_create(scr, nullptr, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_TYPE);
+  buttonStep = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_STEP);
+  buttonSpeed = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_SPEED);
 
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
-      lv_group_add_obj(g, buttonAdd);
-      lv_group_add_obj(g, buttonDec);
       lv_group_add_obj(g, buttonType);
       lv_group_add_obj(g, buttonStep);
       lv_group_add_obj(g, buttonSpeed);
-      lv_group_add_obj(g, buttonBack);
     }
   #endif
 
+  lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_RETURN);
+
+  // Create labels on the image buttons
+  labelType = lv_label_create_empty(buttonType);
+  labelStep = lv_label_create_empty(buttonStep);
+  labelSpeed = lv_label_create_empty(buttonSpeed);
+
   disp_ext_type();
   disp_ext_step();
   disp_ext_speed();
 
   tempText = lv_label_create_empty(scr);
   lv_obj_set_style(tempText, &tft_style_label_rel);
   disp_hotend_temp();
 
   ExtruText = lv_label_create_empty(scr);
   lv_obj_set_style(ExtruText, &tft_style_label_rel);
@@ -258,60 +207,43 @@ void disp_ext_speed() {
     }
     else {
       lv_label_set_text(labelSpeed, extrude_menu.normal);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_hotend_temp() {
   char buf[20] = {0};
-  public_buf_l[0] = '\0';
-  strcat(public_buf_l, extrude_menu.temper_text);
   sprintf(buf, extrude_menu.temp_value, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].target);
+  strcpy(public_buf_l, extrude_menu.temper_text);
   strcat(public_buf_l, buf);
   lv_label_set_text(tempText, public_buf_l);
-  lv_obj_align(tempText, NULL, LV_ALIGN_CENTER, 0, -50);
+  lv_obj_align(tempText, nullptr, LV_ALIGN_CENTER, 0, -50);
 }
 
 void disp_extru_amount() {
   char buf1[10] = {0};
 
   public_buf_l[0] = '\0';
 
-  if (extructAmount < 999 && extructAmount > -99) {
-    sprintf(buf1, extrude_menu.count_value_mm, extructAmount);
-    if (uiCfg.curSprayerChoose < 1)
-      strcat(public_buf_l, extrude_menu.ext1);
-    else
-      strcat(public_buf_l, extrude_menu.ext2);
-    strcat(public_buf_l, buf1);
-  }
-  else if (extructAmount < 9999 && extructAmount > -999) {
-    sprintf(buf1, extrude_menu.count_value_cm, extructAmount / 10);
-    if (uiCfg.curSprayerChoose < 1)
-      strcat(public_buf_l, extrude_menu.ext1);
-    else
-      strcat(public_buf_l, extrude_menu.ext2);
-    strcat(public_buf_l, buf1);
-  }
-  else {
-    sprintf(buf1, extrude_menu.count_value_m, extructAmount / 1000);
-    if (uiCfg.curSprayerChoose < 1)
-      strcat(public_buf_l, extrude_menu.ext1);
-    else
-      strcat(public_buf_l, extrude_menu.ext2);
-    strcat(public_buf_l, buf1);
-  }
+  if (extrudeAmount < 999 && extrudeAmount > -99)
+    sprintf(buf1, extrude_menu.count_value_mm, extrudeAmount);
+  else if (extrudeAmount < 9999 && extrudeAmount > -999)
+    sprintf(buf1, extrude_menu.count_value_cm, extrudeAmount / 10);
+  else
+    sprintf(buf1, extrude_menu.count_value_m, extrudeAmount / 1000);
+  strcat(public_buf_l, uiCfg.curSprayerChoose < 1 ? extrude_menu.ext1 : extrude_menu.ext2);
+  strcat(public_buf_l, buf1);
 
   lv_label_set_text(ExtruText, public_buf_l);
-  lv_obj_align(ExtruText, NULL, LV_ALIGN_CENTER, 0, -75);
+  lv_obj_align(ExtruText, nullptr, LV_ALIGN_CENTER, 0, -75);
 }
 
 void disp_ext_step() {
   if (uiCfg.extruStep == 1)
     lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step1_mm.bin");
   else if (uiCfg.extruStep == 5)
     lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step5_mm.bin");
   else if (uiCfg.extruStep == 10)
     lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step10_mm.bin");
 

commit 4533a197d59ffcaccc4d476f06df7754b11b9b0c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 22 20:22:17 2020 -0500

    Slim down MKS UI code (#19843)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 4bd320b640..6402040898 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -27,28 +27,28 @@
 #include <lv_conf.h>
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../module/temperature.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../inc/MarlinConfig.h"
 
-static lv_obj_t * scr;
-extern lv_group_t*  g;
-static lv_obj_t * buttoType, *buttonStep, *buttonSpeed;
+static lv_obj_t *scr;
+extern lv_group_t *g;
+static lv_obj_t *buttonType, *buttonStep, *buttonSpeed;
 static lv_obj_t *labelType;
 static lv_obj_t *labelStep;
 static lv_obj_t *labelSpeed;
-static lv_obj_t * tempText;
-static lv_obj_t * ExtruText;
+static lv_obj_t *tempText;
+static lv_obj_t *ExtruText;
 
 #define ID_E_ADD    1
 #define ID_E_DEC    2
 #define ID_E_TYPE   3
 #define ID_E_STEP   4
 #define ID_E_SPEED  5
 #define ID_E_RETURN 6
 
 static int32_t extructAmount;
 
@@ -158,157 +158,101 @@ void lv_draw_extrusion(void) {
     disp_state_stack._disp_state[disp_state_stack._disp_index] = EXTRUSION_UI;
   }
   disp_state = EXTRUSION_UI;
 
   scr = lv_obj_create(NULL, NULL);
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
-  lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_label_rel);
-  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
-  lv_label_set_text(title, creat_title_text());
+  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   // Create image buttons
-  buttonAdd   = lv_imgbtn_create(scr, NULL);
-  buttonDec   = lv_imgbtn_create(scr, NULL);
-  buttoType   = lv_imgbtn_create(scr, NULL);
-  buttonStep  = lv_imgbtn_create(scr, NULL);
-  buttonSpeed = lv_imgbtn_create(scr, NULL);
-  buttonBack  = lv_imgbtn_create(scr, NULL);
-
-  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_E_ADD, NULL, 0);
-  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, "F:/bmp_in.bin");
-  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, "F:/bmp_in.bin");
-  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_label_pre);
-  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_label_rel);
+  buttonAdd = lv_imgbtn_create(scr, "F:/bmp_in.bin", INTERVAL_V, titleHeight, event_handler, ID_E_ADD);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
 
-  #if 1
-    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_E_DEC, NULL, 0);
-    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, "F:/bmp_out.bin");
-    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, "F:/bmp_out.bin");
-    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttoType, event_handler, ID_E_TYPE, NULL, 0);
-    lv_imgbtn_set_style(buttoType, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttoType, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, NULL, 0);
-    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, NULL, 0);
-    lv_imgbtn_set_style(buttonSpeed, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonSpeed, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_E_RETURN, NULL, 0);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, "F:/bmp_return.bin");
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, "F:/bmp_return.bin");
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
-  #endif
-
-  lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
-  lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
-  lv_obj_set_pos(buttoType, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonStep, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonSpeed, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  buttonDec = lv_imgbtn_create(scr, "F:/bmp_out.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_E_DEC);
+  buttonType = lv_imgbtn_create(scr, NULL, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_TYPE);
+  buttonStep = lv_imgbtn_create(scr, NULL, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_STEP);
+  buttonSpeed = lv_imgbtn_create(scr, NULL, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_SPEED);
+  buttonBack = lv_imgbtn_create(scr, "F:/bmp_return.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_E_RETURN);
 
   // Create labels on the image buttons
-  lv_btn_set_layout(buttonAdd, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonDec, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttoType, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonStep, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonSpeed, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
-
-  lv_obj_t *labelAdd   = lv_label_create(buttonAdd, NULL);
-  lv_obj_t *labelDec   = lv_label_create(buttonDec, NULL);
-  labelType             = lv_label_create(buttoType, NULL);
-  labelStep             = lv_label_create(buttonStep, NULL);
-  labelSpeed            = lv_label_create(buttonSpeed, NULL);
-  lv_obj_t *label_Back = lv_label_create(buttonBack, NULL);
+  lv_obj_t *labelAdd   = lv_label_create_empty(buttonAdd);
+  lv_obj_t *labelDec   = lv_label_create_empty(buttonDec);
+  labelType             = lv_label_create_empty(buttonType);
+  labelStep             = lv_label_create_empty(buttonStep);
+  labelSpeed            = lv_label_create_empty(buttonSpeed);
+  lv_obj_t *label_Back = lv_label_create_empty(buttonBack);
 
   if (gCfgItems.multiple_language) {
     lv_label_set_text(labelAdd, extrude_menu.in);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, extrude_menu.out);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
       lv_group_add_obj(g, buttonAdd);
       lv_group_add_obj(g, buttonDec);
-      lv_group_add_obj(g, buttoType);
+      lv_group_add_obj(g, buttonType);
       lv_group_add_obj(g, buttonStep);
       lv_group_add_obj(g, buttonSpeed);
       lv_group_add_obj(g, buttonBack);
     }
   #endif
 
   disp_ext_type();
   disp_ext_step();
   disp_ext_speed();
 
-  tempText = lv_label_create(scr, NULL);
+  tempText = lv_label_create_empty(scr);
   lv_obj_set_style(tempText, &tft_style_label_rel);
   disp_hotend_temp();
 
-  ExtruText = lv_label_create(scr, NULL);
+  ExtruText = lv_label_create_empty(scr);
   lv_obj_set_style(ExtruText, &tft_style_label_rel);
   disp_extru_amount();
 }
 
 void disp_ext_type() {
   if (uiCfg.curSprayerChoose == 1) {
-    lv_imgbtn_set_src(buttoType, LV_BTN_STATE_REL, "F:/bmp_extru2.bin");
-    lv_imgbtn_set_src(buttoType, LV_BTN_STATE_PR, "F:/bmp_extru2.bin");
+    lv_imgbtn_set_src_both(buttonType, "F:/bmp_extru2.bin");
     if (gCfgItems.multiple_language) {
       lv_label_set_text(labelType, extrude_menu.ext2);
-      lv_obj_align(labelType, buttoType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+      lv_obj_align(labelType, buttonType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
   else {
-    lv_imgbtn_set_src(buttoType, LV_BTN_STATE_REL, "F:/bmp_extru1.bin");
-    lv_imgbtn_set_src(buttoType, LV_BTN_STATE_PR, "F:/bmp_extru1.bin");
+    lv_imgbtn_set_src_both(buttonType, "F:/bmp_extru1.bin");
     if (gCfgItems.multiple_language) {
       lv_label_set_text(labelType, extrude_menu.ext1);
-      lv_obj_align(labelType, buttoType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+      lv_obj_align(labelType, buttonType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_ext_speed() {
-  if (uiCfg.extruSpeed == 20) {
-    lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_REL, "F:/bmp_speed_high.bin");
-    lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_PR, "F:/bmp_speed_high.bin");
-  }
-  else if (uiCfg.extruSpeed == 1) {
-  lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_REL, "F:/bmp_speed_slow.bin");
-    lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_PR, "F:/bmp_speed_slow.bin");
-  }
-  else {
-  lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_REL, "F:/bmp_speed_normal.bin");
-    lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_PR, "F:/bmp_speed_normal.bin");
-  }
+  if (uiCfg.extruSpeed == 20)
+    lv_imgbtn_set_src_both(buttonSpeed, "F:/bmp_speed_high.bin");
+  else if (uiCfg.extruSpeed == 1)
+    lv_imgbtn_set_src_both(buttonSpeed, "F:/bmp_speed_slow.bin");
+  else
+    lv_imgbtn_set_src_both(buttonSpeed, "F:/bmp_speed_normal.bin");
 
   if (gCfgItems.multiple_language) {
     if (uiCfg.extruSpeed == 20) {
       lv_label_set_text(labelSpeed, extrude_menu.high);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.extruSpeed == 1) {
       lv_label_set_text(labelSpeed, extrude_menu.low);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
@@ -316,21 +260,21 @@ void disp_ext_speed() {
       lv_label_set_text(labelSpeed, extrude_menu.normal);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_hotend_temp() {
   char buf[20] = {0};
   public_buf_l[0] = '\0';
   strcat(public_buf_l, extrude_menu.temper_text);
-  sprintf(buf, extrude_menu.temp_value, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius,  (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].target);
+  sprintf(buf, extrude_menu.temp_value, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].target);
   strcat(public_buf_l, buf);
   lv_label_set_text(tempText, public_buf_l);
   lv_obj_align(tempText, NULL, LV_ALIGN_CENTER, 0, -50);
 }
 
 void disp_extru_amount() {
   char buf1[10] = {0};
 
   public_buf_l[0] = '\0';
 
@@ -357,32 +301,26 @@ void disp_extru_amount() {
     else
       strcat(public_buf_l, extrude_menu.ext2);
     strcat(public_buf_l, buf1);
   }
 
   lv_label_set_text(ExtruText, public_buf_l);
   lv_obj_align(ExtruText, NULL, LV_ALIGN_CENTER, 0, -75);
 }
 
 void disp_ext_step() {
-  if (uiCfg.extruStep == 1) {
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step1_mm.bin");
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step1_mm.bin");
-  }
-  else if (uiCfg.extruStep == 5) {
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step5_mm.bin");
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step5_mm.bin");
-  }
-  else if (uiCfg.extruStep == 10) {
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step10_mm.bin");
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step10_mm.bin");
-  }
+  if (uiCfg.extruStep == 1)
+    lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step1_mm.bin");
+  else if (uiCfg.extruStep == 5)
+    lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step5_mm.bin");
+  else if (uiCfg.extruStep == 10)
+    lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step10_mm.bin");
 
   if (gCfgItems.multiple_language) {
     if (uiCfg.extruStep == 1) {
       lv_label_set_text(labelStep, extrude_menu.step_1mm);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.extruStep == 5) {
       lv_label_set_text(labelStep, extrude_menu.step_5mm);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }

commit 072f996af70b5ac635893eca2d4bd4bbb4f00acc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 21 12:45:27 2020 -0500

    General cleanup, mostly MKS UI (#19825)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 543202067f..4bd320b640 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -16,30 +16,30 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
-#include "lv_conf.h"
 #include "draw_ui.h"
+#include <lv_conf.h>
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
-#include "../../../../MarlinCore.h"
 #include "../../../../module/temperature.h"
 #include "../../../../gcode/queue.h"
+#include "../../../../inc/MarlinConfig.h"
 
 static lv_obj_t * scr;
 extern lv_group_t*  g;
 static lv_obj_t * buttoType, *buttonStep, *buttonSpeed;
 static lv_obj_t *labelType;
 static lv_obj_t *labelStep;
 static lv_obj_t *labelSpeed;
 static lv_obj_t * tempText;
 static lv_obj_t * ExtruText;
 
@@ -228,21 +228,21 @@ void lv_draw_extrusion(void) {
   lv_btn_set_layout(buttonSpeed, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
   lv_obj_t *labelAdd   = lv_label_create(buttonAdd, NULL);
   lv_obj_t *labelDec   = lv_label_create(buttonDec, NULL);
   labelType             = lv_label_create(buttoType, NULL);
   labelStep             = lv_label_create(buttonStep, NULL);
   labelSpeed            = lv_label_create(buttonSpeed, NULL);
   lv_obj_t *label_Back = lv_label_create(buttonBack, NULL);
 
-  if (gCfgItems.multiple_language != 0) {
+  if (gCfgItems.multiple_language) {
     lv_label_set_text(labelAdd, extrude_menu.in);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, extrude_menu.out);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 
@@ -267,50 +267,50 @@ void lv_draw_extrusion(void) {
 
   ExtruText = lv_label_create(scr, NULL);
   lv_obj_set_style(ExtruText, &tft_style_label_rel);
   disp_extru_amount();
 }
 
 void disp_ext_type() {
   if (uiCfg.curSprayerChoose == 1) {
     lv_imgbtn_set_src(buttoType, LV_BTN_STATE_REL, "F:/bmp_extru2.bin");
     lv_imgbtn_set_src(buttoType, LV_BTN_STATE_PR, "F:/bmp_extru2.bin");
-    if (gCfgItems.multiple_language != 0) {
+    if (gCfgItems.multiple_language) {
       lv_label_set_text(labelType, extrude_menu.ext2);
       lv_obj_align(labelType, buttoType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
   else {
     lv_imgbtn_set_src(buttoType, LV_BTN_STATE_REL, "F:/bmp_extru1.bin");
     lv_imgbtn_set_src(buttoType, LV_BTN_STATE_PR, "F:/bmp_extru1.bin");
-    if (gCfgItems.multiple_language != 0) {
+    if (gCfgItems.multiple_language) {
       lv_label_set_text(labelType, extrude_menu.ext1);
       lv_obj_align(labelType, buttoType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_ext_speed() {
   if (uiCfg.extruSpeed == 20) {
     lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_REL, "F:/bmp_speed_high.bin");
     lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_PR, "F:/bmp_speed_high.bin");
   }
   else if (uiCfg.extruSpeed == 1) {
   lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_REL, "F:/bmp_speed_slow.bin");
     lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_PR, "F:/bmp_speed_slow.bin");
   }
   else {
   lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_REL, "F:/bmp_speed_normal.bin");
     lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_PR, "F:/bmp_speed_normal.bin");
   }
 
-  if (gCfgItems.multiple_language != 0) {
+  if (gCfgItems.multiple_language) {
     if (uiCfg.extruSpeed == 20) {
       lv_label_set_text(labelSpeed, extrude_menu.high);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.extruSpeed == 1) {
       lv_label_set_text(labelSpeed, extrude_menu.low);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else {
       lv_label_set_text(labelSpeed, extrude_menu.normal);
@@ -370,21 +370,21 @@ void disp_ext_step() {
   }
   else if (uiCfg.extruStep == 5) {
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step5_mm.bin");
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step5_mm.bin");
   }
   else if (uiCfg.extruStep == 10) {
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step10_mm.bin");
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step10_mm.bin");
   }
 
-  if (gCfgItems.multiple_language != 0) {
+  if (gCfgItems.multiple_language) {
     if (uiCfg.extruStep == 1) {
       lv_label_set_text(labelStep, extrude_menu.step_1mm);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.extruStep == 5) {
       lv_label_set_text(labelStep, extrude_menu.step_5mm);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.extruStep == 10) {
       lv_label_set_text(labelStep, extrude_menu.step_10mm);

commit d8ed74904559aa8bdccc8b68acbccfbf1bf779d3
Author: makerbase <4164049@qq.com>
Date:   Mon Sep 21 09:55:02 2020 +0800

    Add MKS Robin E3P, improve LVGL UI (#19442)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 9f5977d70c..543202067f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -28,24 +28,25 @@
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../MarlinCore.h"
 #include "../../../../module/temperature.h"
 #include "../../../../gcode/queue.h"
 
 static lv_obj_t * scr;
+extern lv_group_t*  g;
 static lv_obj_t * buttoType, *buttonStep, *buttonSpeed;
-static lv_obj_t * labelType;
-static lv_obj_t * labelStep;
-static lv_obj_t * labelSpeed;
+static lv_obj_t *labelType;
+static lv_obj_t *labelStep;
+static lv_obj_t *labelSpeed;
 static lv_obj_t * tempText;
 static lv_obj_t * ExtruText;
 
 #define ID_E_ADD    1
 #define ID_E_DEC    2
 #define ID_E_TYPE   3
 #define ID_E_STEP   4
 #define ID_E_SPEED  5
 #define ID_E_RETURN 6
 
@@ -164,61 +165,57 @@ void lv_draw_extrusion(void) {
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
   lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
-  LV_IMG_DECLARE(bmp_pic);
-
   // Create image buttons
   buttonAdd   = lv_imgbtn_create(scr, NULL);
   buttonDec   = lv_imgbtn_create(scr, NULL);
   buttoType   = lv_imgbtn_create(scr, NULL);
   buttonStep  = lv_imgbtn_create(scr, NULL);
   buttonSpeed = lv_imgbtn_create(scr, NULL);
   buttonBack  = lv_imgbtn_create(scr, NULL);
 
-  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_E_ADD, "bmp_in.bin", 0);
-  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, &bmp_pic);
-  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, &bmp_pic);
+  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_E_ADD, NULL, 0);
+  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, "F:/bmp_in.bin");
+  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, "F:/bmp_in.bin");
   lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_label_pre);
   lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_label_rel);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
+
   #if 1
-    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_E_DEC, "bmp_out.bin", 0);
-    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_E_DEC, NULL, 0);
+    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, "F:/bmp_out.bin");
+    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, "F:/bmp_out.bin");
     lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_imgbtn_set_src(buttoType, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttoType, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttoType, event_handler, ID_E_TYPE, NULL, 0);
     lv_imgbtn_set_style(buttoType, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttoType, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, NULL, 0);
     lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, NULL, 0);
     lv_imgbtn_set_style(buttonSpeed, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonSpeed, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_E_RETURN, "bmp_return.bin", 0);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_E_RETURN, NULL, 0);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, "F:/bmp_return.bin");
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, "F:/bmp_return.bin");
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttoType, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonStep, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonSpeed, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
@@ -242,57 +239,76 @@ void lv_draw_extrusion(void) {
     lv_label_set_text(labelAdd, extrude_menu.in);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, extrude_menu.out);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) {
+      lv_group_add_obj(g, buttonAdd);
+      lv_group_add_obj(g, buttonDec);
+      lv_group_add_obj(g, buttoType);
+      lv_group_add_obj(g, buttonStep);
+      lv_group_add_obj(g, buttonSpeed);
+      lv_group_add_obj(g, buttonBack);
+    }
+  #endif
+
   disp_ext_type();
   disp_ext_step();
   disp_ext_speed();
 
   tempText = lv_label_create(scr, NULL);
   lv_obj_set_style(tempText, &tft_style_label_rel);
   disp_hotend_temp();
 
   ExtruText = lv_label_create(scr, NULL);
   lv_obj_set_style(ExtruText, &tft_style_label_rel);
   disp_extru_amount();
 }
 
 void disp_ext_type() {
   if (uiCfg.curSprayerChoose == 1) {
-    lv_obj_set_event_cb_mks(buttoType, event_handler, ID_E_TYPE, "bmp_extru2.bin", 0);
+    lv_imgbtn_set_src(buttoType, LV_BTN_STATE_REL, "F:/bmp_extru2.bin");
+    lv_imgbtn_set_src(buttoType, LV_BTN_STATE_PR, "F:/bmp_extru2.bin");
     if (gCfgItems.multiple_language != 0) {
       lv_label_set_text(labelType, extrude_menu.ext2);
       lv_obj_align(labelType, buttoType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
   else {
-    lv_obj_set_event_cb_mks(buttoType, event_handler, ID_E_TYPE, "bmp_extru1.bin", 0);
+    lv_imgbtn_set_src(buttoType, LV_BTN_STATE_REL, "F:/bmp_extru1.bin");
+    lv_imgbtn_set_src(buttoType, LV_BTN_STATE_PR, "F:/bmp_extru1.bin");
     if (gCfgItems.multiple_language != 0) {
       lv_label_set_text(labelType, extrude_menu.ext1);
       lv_obj_align(labelType, buttoType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_ext_speed() {
-  if (uiCfg.extruSpeed == 20)
-    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, "bmp_speed_high.bin", 0);
-  else if (uiCfg.extruSpeed == 1)
-    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, "bmp_speed_slow.bin", 0);
-  else
-    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, "bmp_speed_normal.bin", 0);
+  if (uiCfg.extruSpeed == 20) {
+    lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_REL, "F:/bmp_speed_high.bin");
+    lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_PR, "F:/bmp_speed_high.bin");
+  }
+  else if (uiCfg.extruSpeed == 1) {
+  lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_REL, "F:/bmp_speed_slow.bin");
+    lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_PR, "F:/bmp_speed_slow.bin");
+  }
+  else {
+  lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_REL, "F:/bmp_speed_normal.bin");
+    lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_PR, "F:/bmp_speed_normal.bin");
+  }
 
   if (gCfgItems.multiple_language != 0) {
     if (uiCfg.extruSpeed == 20) {
       lv_label_set_text(labelSpeed, extrude_menu.high);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.extruSpeed == 1) {
       lv_label_set_text(labelSpeed, extrude_menu.low);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
@@ -341,36 +357,47 @@ void disp_extru_amount() {
     else
       strcat(public_buf_l, extrude_menu.ext2);
     strcat(public_buf_l, buf1);
   }
 
   lv_label_set_text(ExtruText, public_buf_l);
   lv_obj_align(ExtruText, NULL, LV_ALIGN_CENTER, 0, -75);
 }
 
 void disp_ext_step() {
-  if (uiCfg.extruStep == 1)
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, "bmp_step1_mm.bin", 0);
-  else if (uiCfg.extruStep == 5)
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, "bmp_step5_mm.bin", 0);
-  else if (uiCfg.extruStep == 10)
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, "bmp_step10_mm.bin", 0);
+  if (uiCfg.extruStep == 1) {
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step1_mm.bin");
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step1_mm.bin");
+  }
+  else if (uiCfg.extruStep == 5) {
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step5_mm.bin");
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step5_mm.bin");
+  }
+  else if (uiCfg.extruStep == 10) {
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step10_mm.bin");
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step10_mm.bin");
+  }
 
   if (gCfgItems.multiple_language != 0) {
     if (uiCfg.extruStep == 1) {
       lv_label_set_text(labelStep, extrude_menu.step_1mm);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.extruStep == 5) {
       lv_label_set_text(labelStep, extrude_menu.step_5mm);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.extruStep == 10) {
       lv_label_set_text(labelStep, extrude_menu.step_10mm);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
-void lv_clear_extrusion() { lv_obj_del(scr); }
+void lv_clear_extrusion() {
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
+  #endif
+  lv_obj_del(scr);
+}
 
 #endif // HAS_TFT_LVGL_UI

commit 60ab7a1ddbda1b1a6d20cbeb5c574ce775f57a4b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 20 19:07:59 2020 -0500

    Cleanup before MKS changes

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 95d0a15bea..9f5977d70c 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -93,23 +93,23 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
         if (ENABLED(HAS_MULTI_EXTRUDER)) {
           if (uiCfg.curSprayerChoose == 0) {
             uiCfg.curSprayerChoose = 1;
             queue.inject_P(PSTR("T1"));
           }
           else {
             uiCfg.curSprayerChoose = 0;
             queue.inject_P(PSTR("T0"));
           }
         }
-        else {
+        else
           uiCfg.curSprayerChoose = 0;
-        }
+
         extructAmount = 0;
         disp_hotend_temp();
         disp_ext_type();
         disp_extru_amount();
       }
       break;
     case ID_E_STEP:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
@@ -142,21 +142,20 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         clear_cur_ui();
         draw_return_ui();
       }
       break;
   }
 }
 
-
 void lv_draw_extrusion(void) {
   lv_obj_t *buttonAdd, *buttonDec, *buttonBack;
 
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != EXTRUSION_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = EXTRUSION_UI;
   }
   disp_state = EXTRUSION_UI;
 
   scr = lv_obj_create(NULL, NULL);
@@ -167,21 +166,21 @@ void lv_draw_extrusion(void) {
 
   lv_obj_t * title = lv_label_create(scr, NULL);
   lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   LV_IMG_DECLARE(bmp_pic);
 
-  /*Create an Image button*/
+  // Create image buttons
   buttonAdd   = lv_imgbtn_create(scr, NULL);
   buttonDec   = lv_imgbtn_create(scr, NULL);
   buttoType   = lv_imgbtn_create(scr, NULL);
   buttonStep  = lv_imgbtn_create(scr, NULL);
   buttonSpeed = lv_imgbtn_create(scr, NULL);
   buttonBack  = lv_imgbtn_create(scr, NULL);
 
   lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_E_ADD, "bmp_in.bin", 0);
   lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, &bmp_pic);
   lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, &bmp_pic);
@@ -217,34 +216,34 @@ void lv_draw_extrusion(void) {
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttoType, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonStep, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonSpeed, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
-  /*Create a label on the Image button*/
+  // Create labels on the image buttons
   lv_btn_set_layout(buttonAdd, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonDec, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttoType, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonStep, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonSpeed, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
-  lv_obj_t * labelAdd = lv_label_create(buttonAdd, NULL);
-  lv_obj_t * labelDec = lv_label_create(buttonDec, NULL);
-  labelType  = lv_label_create(buttoType, NULL);
-  labelStep  = lv_label_create(buttonStep, NULL);
-  labelSpeed = lv_label_create(buttonSpeed, NULL);
-  lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
+  lv_obj_t *labelAdd   = lv_label_create(buttonAdd, NULL);
+  lv_obj_t *labelDec   = lv_label_create(buttonDec, NULL);
+  labelType             = lv_label_create(buttoType, NULL);
+  labelStep             = lv_label_create(buttonStep, NULL);
+  labelSpeed            = lv_label_create(buttonSpeed, NULL);
+  lv_obj_t *label_Back = lv_label_create(buttonBack, NULL);
 
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(labelAdd, extrude_menu.in);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, extrude_menu.out);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);

commit 76d8d1742c1d4a1efe0fd6c0645d3fc656bfd0b2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 20 18:29:08 2020 -0500

    Add multi-extruder condition

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index ca84b4b5ec..95d0a15bea 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -83,21 +83,21 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
           extructAmount -= uiCfg.extruStep;
           disp_extru_amount();
         }
       }
       break;
     case ID_E_TYPE:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
-        if (EXTRUDERS == 2) {
+        if (ENABLED(HAS_MULTI_EXTRUDER)) {
           if (uiCfg.curSprayerChoose == 0) {
             uiCfg.curSprayerChoose = 1;
             queue.inject_P(PSTR("T1"));
           }
           else {
             uiCfg.curSprayerChoose = 0;
             queue.inject_P(PSTR("T0"));
           }
         }
         else {

commit d20d4591321aa467c062f0050355d2aca84e03ad
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Sat Jul 25 13:52:07 2020 +0800

    Robin nano V2, TFT LVGL UI parameters, and more (#18500)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 90a7ce64f6..ca84b4b5ec 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -14,21 +14,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LVGL_UI)
+#if HAS_TFT_LVGL_UI
 
 #include "lv_conf.h"
 #include "draw_ui.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../MarlinCore.h"
 #include "../../../../module/temperature.h"
@@ -52,41 +52,41 @@ static lv_obj_t * ExtruText;
 static int32_t extructAmount;
 
 static void event_handler(lv_obj_t * obj, lv_event_t event) {
   switch (obj->mks_obj_id) {
     case ID_E_ADD:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius >= EXTRUDE_MINTEMP) {
-          queue.enqueue_one_now(PSTR("G91"));
-          memset(public_buf_l, 0, sizeof(public_buf_l));
-          sprintf((char *)public_buf_l, "G1 E%d F%d", uiCfg.extruStep, 60 * uiCfg.extruSpeed);
-          queue.enqueue_one_now(PSTR(public_buf_l));
-          queue.enqueue_one_now(PSTR("G90"));
+          queue.enqueue_now_P(PSTR("G91"));
+          ZERO(public_buf_l);
+          sprintf_P((char *)public_buf_l, PSTR("G1 E%d F%d"), uiCfg.extruStep, 60 * uiCfg.extruSpeed);
+          queue.enqueue_one_now(public_buf_l);
+          queue.enqueue_now_P(PSTR("G90"));
           extructAmount += uiCfg.extruStep;
           disp_extru_amount();
         }
       }
       break;
     case ID_E_DEC:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius >= EXTRUDE_MINTEMP) {
-          queue.enqueue_one_now(PSTR("G91"));
-          memset(public_buf_l, 0, sizeof(public_buf_l));
-          sprintf((char *)public_buf_l, "G1 E%d F%d", 0 - uiCfg.extruStep, 60 * uiCfg.extruSpeed);
-          queue.enqueue_one_now(PSTR(public_buf_l));
-          queue.enqueue_one_now(PSTR("G90"));
+          queue.enqueue_now_P(PSTR("G91"));
+          ZERO(public_buf_l);
+          sprintf_P((char *)public_buf_l, PSTR("G1 E%d F%d"), 0 - uiCfg.extruStep, 60 * uiCfg.extruSpeed);
+          queue.enqueue_one_now(public_buf_l);
+          queue.enqueue_now_P(PSTR("G90"));
           extructAmount -= uiCfg.extruStep;
           disp_extru_amount();
         }
       }
       break;
     case ID_E_TYPE:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
@@ -159,142 +159,141 @@ void lv_draw_extrusion(void) {
   }
   disp_state = EXTRUSION_UI;
 
   scr = lv_obj_create(NULL, NULL);
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   LV_IMG_DECLARE(bmp_pic);
 
   /*Create an Image button*/
-  buttonAdd = lv_imgbtn_create(scr, NULL);
-  buttonDec = lv_imgbtn_create(scr, NULL);
-  buttoType = lv_imgbtn_create(scr, NULL);
-  buttonStep = lv_imgbtn_create(scr, NULL);
+  buttonAdd   = lv_imgbtn_create(scr, NULL);
+  buttonDec   = lv_imgbtn_create(scr, NULL);
+  buttoType   = lv_imgbtn_create(scr, NULL);
+  buttonStep  = lv_imgbtn_create(scr, NULL);
   buttonSpeed = lv_imgbtn_create(scr, NULL);
-  buttonBack = lv_imgbtn_create(scr, NULL);
+  buttonBack  = lv_imgbtn_create(scr, NULL);
 
-  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_E_ADD, "bmp_In.bin", 0);
+  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_E_ADD, "bmp_in.bin", 0);
   lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, &bmp_pic);
   lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, &bmp_pic);
-  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_lable_pre);
-  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_label_pre);
+  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_label_rel);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
-
   #if 1
-    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_E_DEC, "bmp_Out.bin", 0);
+    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_E_DEC, "bmp_out.bin", 0);
     lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_label_rel);
 
     lv_imgbtn_set_src(buttoType, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttoType, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttoType, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttoType, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttoType, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttoType, LV_BTN_STATE_REL, &tft_style_label_rel);
 
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_REL, &tft_style_label_rel);
 
     lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonSpeed, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonSpeed, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonSpeed, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonSpeed, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_E_RETURN, "bmp_Return.bin", 0);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_E_RETURN, "bmp_return.bin", 0);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
-  lv_obj_set_pos(buttoType, INTERVAL_V,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttoType, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonStep, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonSpeed, BTN_X_PIXEL * 2 + INTERVAL_V * 3,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonSpeed, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
   /*Create a label on the Image button*/
   lv_btn_set_layout(buttonAdd, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonDec, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttoType, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonStep, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonSpeed, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
   lv_obj_t * labelAdd = lv_label_create(buttonAdd, NULL);
   lv_obj_t * labelDec = lv_label_create(buttonDec, NULL);
-  labelType = lv_label_create(buttoType, NULL);
-  labelStep = lv_label_create(buttonStep, NULL);
+  labelType  = lv_label_create(buttoType, NULL);
+  labelStep  = lv_label_create(buttonStep, NULL);
   labelSpeed = lv_label_create(buttonSpeed, NULL);
   lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
 
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(labelAdd, extrude_menu.in);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, extrude_menu.out);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 
   disp_ext_type();
   disp_ext_step();
   disp_ext_speed();
 
   tempText = lv_label_create(scr, NULL);
-  lv_obj_set_style(tempText, &tft_style_lable_rel);
+  lv_obj_set_style(tempText, &tft_style_label_rel);
   disp_hotend_temp();
 
   ExtruText = lv_label_create(scr, NULL);
-  lv_obj_set_style(ExtruText, &tft_style_lable_rel);
+  lv_obj_set_style(ExtruText, &tft_style_label_rel);
   disp_extru_amount();
 }
 
 void disp_ext_type() {
   if (uiCfg.curSprayerChoose == 1) {
-    lv_obj_set_event_cb_mks(buttoType, event_handler, ID_E_TYPE, "bmp_Extru2.bin", 0);
+    lv_obj_set_event_cb_mks(buttoType, event_handler, ID_E_TYPE, "bmp_extru2.bin", 0);
     if (gCfgItems.multiple_language != 0) {
       lv_label_set_text(labelType, extrude_menu.ext2);
       lv_obj_align(labelType, buttoType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
   else {
-    lv_obj_set_event_cb_mks(buttoType, event_handler, ID_E_TYPE, "bmp_Extru1.bin", 0);
+    lv_obj_set_event_cb_mks(buttoType, event_handler, ID_E_TYPE, "bmp_extru1.bin", 0);
     if (gCfgItems.multiple_language != 0) {
       lv_label_set_text(labelType, extrude_menu.ext1);
       lv_obj_align(labelType, buttoType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_ext_speed() {
   if (uiCfg.extruSpeed == 20)
-    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, "bmp_Speed_high.bin", 0);
+    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, "bmp_speed_high.bin", 0);
   else if (uiCfg.extruSpeed == 1)
-    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, "bmp_Speed_slow.bin", 0);
+    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, "bmp_speed_slow.bin", 0);
   else
-    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, "bmp_Speed_normal.bin", 0);
+    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, "bmp_speed_normal.bin", 0);
 
   if (gCfgItems.multiple_language != 0) {
     if (uiCfg.extruSpeed == 20) {
       lv_label_set_text(labelSpeed, extrude_menu.high);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.extruSpeed == 1) {
       lv_label_set_text(labelSpeed, extrude_menu.low);
       lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
@@ -344,35 +343,35 @@ void disp_extru_amount() {
       strcat(public_buf_l, extrude_menu.ext2);
     strcat(public_buf_l, buf1);
   }
 
   lv_label_set_text(ExtruText, public_buf_l);
   lv_obj_align(ExtruText, NULL, LV_ALIGN_CENTER, 0, -75);
 }
 
 void disp_ext_step() {
   if (uiCfg.extruStep == 1)
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, "bmp_Step1_mm.bin", 0);
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, "bmp_step1_mm.bin", 0);
   else if (uiCfg.extruStep == 5)
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, "bmp_Step5_mm.bin", 0);
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, "bmp_step5_mm.bin", 0);
   else if (uiCfg.extruStep == 10)
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, "bmp_Step10_mm.bin", 0);
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, "bmp_step10_mm.bin", 0);
 
   if (gCfgItems.multiple_language != 0) {
     if (uiCfg.extruStep == 1) {
       lv_label_set_text(labelStep, extrude_menu.step_1mm);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.extruStep == 5) {
       lv_label_set_text(labelStep, extrude_menu.step_5mm);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.extruStep == 10) {
       lv_label_set_text(labelStep, extrude_menu.step_10mm);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void lv_clear_extrusion() { lv_obj_del(scr); }
 
-#endif // TFT_LVGL_UI
+#endif // HAS_TFT_LVGL_UI

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index a8290d39fe..90a7ce64f6 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if ENABLED(TFT_LVGL_UI)
 
 #include "lv_conf.h"
 #include "draw_ui.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"

commit e5bc9d31cc87be5c7ef2bd3cd70c2599f76d2bd7
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Jul 1 03:30:24 2020 -0300

    Add TFT_LVGL_UI support (#18438)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
index 14d7ed0410..a8290d39fe 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -14,21 +14,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LITTLE_VGL_UI)
+#if ENABLED(TFT_LVGL_UI)
 
 #include "lv_conf.h"
 #include "draw_ui.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../MarlinCore.h"
 #include "../../../../module/temperature.h"
@@ -368,11 +368,11 @@ void disp_ext_step() {
     }
     else if (uiCfg.extruStep == 10) {
       lv_label_set_text(labelStep, extrude_menu.step_10mm);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void lv_clear_extrusion() { lv_obj_del(scr); }
 
-#endif // TFT_LITTLE_VGL_UI
+#endif // TFT_LVGL_UI

commit 642112d3eb7c1af9a52feec8134c85ed3e34891c
Author: makerbase <4164049@qq.com>
Date:   Tue Jun 16 10:05:33 2020 +0800

    Add MKS UI (TFT_LITTLE_VGL_UI) (#18071)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
new file mode 100644
index 0000000000..14d7ed0410
--- /dev/null
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_extrusion.cpp
@@ -0,0 +1,378 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(TFT_LITTLE_VGL_UI)
+
+#include "lv_conf.h"
+#include "draw_ui.h"
+//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
+//#include "../lvgl/src/lv_objx/lv_img.h"
+//#include "../lvgl/src/lv_core/lv_disp.h"
+//#include "../lvgl/src/lv_core/lv_refr.h"
+
+#include "../../../../MarlinCore.h"
+#include "../../../../module/temperature.h"
+#include "../../../../gcode/queue.h"
+
+static lv_obj_t * scr;
+static lv_obj_t * buttoType, *buttonStep, *buttonSpeed;
+static lv_obj_t * labelType;
+static lv_obj_t * labelStep;
+static lv_obj_t * labelSpeed;
+static lv_obj_t * tempText;
+static lv_obj_t * ExtruText;
+
+#define ID_E_ADD    1
+#define ID_E_DEC    2
+#define ID_E_TYPE   3
+#define ID_E_STEP   4
+#define ID_E_SPEED  5
+#define ID_E_RETURN 6
+
+static int32_t extructAmount;
+
+static void event_handler(lv_obj_t * obj, lv_event_t event) {
+  switch (obj->mks_obj_id) {
+    case ID_E_ADD:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        if (thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius >= EXTRUDE_MINTEMP) {
+          queue.enqueue_one_now(PSTR("G91"));
+          memset(public_buf_l, 0, sizeof(public_buf_l));
+          sprintf((char *)public_buf_l, "G1 E%d F%d", uiCfg.extruStep, 60 * uiCfg.extruSpeed);
+          queue.enqueue_one_now(PSTR(public_buf_l));
+          queue.enqueue_one_now(PSTR("G90"));
+          extructAmount += uiCfg.extruStep;
+          disp_extru_amount();
+        }
+      }
+      break;
+    case ID_E_DEC:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        if (thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius >= EXTRUDE_MINTEMP) {
+          queue.enqueue_one_now(PSTR("G91"));
+          memset(public_buf_l, 0, sizeof(public_buf_l));
+          sprintf((char *)public_buf_l, "G1 E%d F%d", 0 - uiCfg.extruStep, 60 * uiCfg.extruSpeed);
+          queue.enqueue_one_now(PSTR(public_buf_l));
+          queue.enqueue_one_now(PSTR("G90"));
+          extructAmount -= uiCfg.extruStep;
+          disp_extru_amount();
+        }
+      }
+      break;
+    case ID_E_TYPE:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        if (EXTRUDERS == 2) {
+          if (uiCfg.curSprayerChoose == 0) {
+            uiCfg.curSprayerChoose = 1;
+            queue.inject_P(PSTR("T1"));
+          }
+          else {
+            uiCfg.curSprayerChoose = 0;
+            queue.inject_P(PSTR("T0"));
+          }
+        }
+        else {
+          uiCfg.curSprayerChoose = 0;
+        }
+        extructAmount = 0;
+        disp_hotend_temp();
+        disp_ext_type();
+        disp_extru_amount();
+      }
+      break;
+    case ID_E_STEP:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        switch (abs(uiCfg.extruStep)) {
+          case  1: uiCfg.extruStep = 5; break;
+          case  5: uiCfg.extruStep = 10; break;
+          case 10: uiCfg.extruStep = 1; break;
+          default: break;
+        }
+        disp_ext_step();
+      }
+      break;
+    case ID_E_SPEED:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        switch (uiCfg.extruSpeed) {
+          case  1: uiCfg.extruSpeed = 10; break;
+          case 10: uiCfg.extruSpeed = 20; break;
+          case 20: uiCfg.extruSpeed = 1; break;
+          default: break;
+        }
+        disp_ext_speed();
+      }
+      break;
+    case ID_E_RETURN:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        clear_cur_ui();
+        draw_return_ui();
+      }
+      break;
+  }
+}
+
+
+void lv_draw_extrusion(void) {
+  lv_obj_t *buttonAdd, *buttonDec, *buttonBack;
+
+  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != EXTRUSION_UI) {
+    disp_state_stack._disp_index++;
+    disp_state_stack._disp_state[disp_state_stack._disp_index] = EXTRUSION_UI;
+  }
+  disp_state = EXTRUSION_UI;
+
+  scr = lv_obj_create(NULL, NULL);
+
+  lv_obj_set_style(scr, &tft_style_scr);
+  lv_scr_load(scr);
+  lv_obj_clean(scr);
+
+  lv_obj_t * title = lv_label_create(scr, NULL);
+  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
+  lv_label_set_text(title, creat_title_text());
+
+  lv_refr_now(lv_refr_get_disp_refreshing());
+
+  LV_IMG_DECLARE(bmp_pic);
+
+  /*Create an Image button*/
+  buttonAdd = lv_imgbtn_create(scr, NULL);
+  buttonDec = lv_imgbtn_create(scr, NULL);
+  buttoType = lv_imgbtn_create(scr, NULL);
+  buttonStep = lv_imgbtn_create(scr, NULL);
+  buttonSpeed = lv_imgbtn_create(scr, NULL);
+  buttonBack = lv_imgbtn_create(scr, NULL);
+
+  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_E_ADD, "bmp_In.bin", 0);
+  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, &bmp_pic);
+  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, &bmp_pic);
+  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_lable_pre);
+  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
+
+  #if 1
+    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_E_DEC, "bmp_Out.bin", 0);
+    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_imgbtn_set_src(buttoType, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttoType, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttoType, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttoType, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonSpeed, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonSpeed, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonSpeed, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_E_RETURN, "bmp_Return.bin", 0);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  #endif
+
+  lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
+  lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
+  lv_obj_set_pos(buttoType, INTERVAL_V,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonStep, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonSpeed, BTN_X_PIXEL * 2 + INTERVAL_V * 3,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+
+  /*Create a label on the Image button*/
+  lv_btn_set_layout(buttonAdd, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonDec, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttoType, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonStep, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonSpeed, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
+
+  lv_obj_t * labelAdd = lv_label_create(buttonAdd, NULL);
+  lv_obj_t * labelDec = lv_label_create(buttonDec, NULL);
+  labelType = lv_label_create(buttoType, NULL);
+  labelStep = lv_label_create(buttonStep, NULL);
+  labelSpeed = lv_label_create(buttonSpeed, NULL);
+  lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
+
+  if (gCfgItems.multiple_language != 0) {
+    lv_label_set_text(labelAdd, extrude_menu.in);
+    lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(labelDec, extrude_menu.out);
+    lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_Back, common_menu.text_back);
+    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+  }
+
+  disp_ext_type();
+  disp_ext_step();
+  disp_ext_speed();
+
+  tempText = lv_label_create(scr, NULL);
+  lv_obj_set_style(tempText, &tft_style_lable_rel);
+  disp_hotend_temp();
+
+  ExtruText = lv_label_create(scr, NULL);
+  lv_obj_set_style(ExtruText, &tft_style_lable_rel);
+  disp_extru_amount();
+}
+
+void disp_ext_type() {
+  if (uiCfg.curSprayerChoose == 1) {
+    lv_obj_set_event_cb_mks(buttoType, event_handler, ID_E_TYPE, "bmp_Extru2.bin", 0);
+    if (gCfgItems.multiple_language != 0) {
+      lv_label_set_text(labelType, extrude_menu.ext2);
+      lv_obj_align(labelType, buttoType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    }
+  }
+  else {
+    lv_obj_set_event_cb_mks(buttoType, event_handler, ID_E_TYPE, "bmp_Extru1.bin", 0);
+    if (gCfgItems.multiple_language != 0) {
+      lv_label_set_text(labelType, extrude_menu.ext1);
+      lv_obj_align(labelType, buttoType, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    }
+  }
+}
+
+void disp_ext_speed() {
+  if (uiCfg.extruSpeed == 20)
+    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, "bmp_Speed_high.bin", 0);
+  else if (uiCfg.extruSpeed == 1)
+    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, "bmp_Speed_slow.bin", 0);
+  else
+    lv_obj_set_event_cb_mks(buttonSpeed, event_handler, ID_E_SPEED, "bmp_Speed_normal.bin", 0);
+
+  if (gCfgItems.multiple_language != 0) {
+    if (uiCfg.extruSpeed == 20) {
+      lv_label_set_text(labelSpeed, extrude_menu.high);
+      lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    }
+    else if (uiCfg.extruSpeed == 1) {
+      lv_label_set_text(labelSpeed, extrude_menu.low);
+      lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    }
+    else {
+      lv_label_set_text(labelSpeed, extrude_menu.normal);
+      lv_obj_align(labelSpeed, buttonSpeed, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    }
+  }
+}
+
+void disp_hotend_temp() {
+  char buf[20] = {0};
+  public_buf_l[0] = '\0';
+  strcat(public_buf_l, extrude_menu.temper_text);
+  sprintf(buf, extrude_menu.temp_value, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius,  (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].target);
+  strcat(public_buf_l, buf);
+  lv_label_set_text(tempText, public_buf_l);
+  lv_obj_align(tempText, NULL, LV_ALIGN_CENTER, 0, -50);
+}
+
+void disp_extru_amount() {
+  char buf1[10] = {0};
+
+  public_buf_l[0] = '\0';
+
+  if (extructAmount < 999 && extructAmount > -99) {
+    sprintf(buf1, extrude_menu.count_value_mm, extructAmount);
+    if (uiCfg.curSprayerChoose < 1)
+      strcat(public_buf_l, extrude_menu.ext1);
+    else
+      strcat(public_buf_l, extrude_menu.ext2);
+    strcat(public_buf_l, buf1);
+  }
+  else if (extructAmount < 9999 && extructAmount > -999) {
+    sprintf(buf1, extrude_menu.count_value_cm, extructAmount / 10);
+    if (uiCfg.curSprayerChoose < 1)
+      strcat(public_buf_l, extrude_menu.ext1);
+    else
+      strcat(public_buf_l, extrude_menu.ext2);
+    strcat(public_buf_l, buf1);
+  }
+  else {
+    sprintf(buf1, extrude_menu.count_value_m, extructAmount / 1000);
+    if (uiCfg.curSprayerChoose < 1)
+      strcat(public_buf_l, extrude_menu.ext1);
+    else
+      strcat(public_buf_l, extrude_menu.ext2);
+    strcat(public_buf_l, buf1);
+  }
+
+  lv_label_set_text(ExtruText, public_buf_l);
+  lv_obj_align(ExtruText, NULL, LV_ALIGN_CENTER, 0, -75);
+}
+
+void disp_ext_step() {
+  if (uiCfg.extruStep == 1)
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, "bmp_Step1_mm.bin", 0);
+  else if (uiCfg.extruStep == 5)
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, "bmp_Step5_mm.bin", 0);
+  else if (uiCfg.extruStep == 10)
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_E_STEP, "bmp_Step10_mm.bin", 0);
+
+  if (gCfgItems.multiple_language != 0) {
+    if (uiCfg.extruStep == 1) {
+      lv_label_set_text(labelStep, extrude_menu.step_1mm);
+      lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    }
+    else if (uiCfg.extruStep == 5) {
+      lv_label_set_text(labelStep, extrude_menu.step_5mm);
+      lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    }
+    else if (uiCfg.extruStep == 10) {
+      lv_label_set_text(labelStep, extrude_menu.step_10mm);
+      lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    }
+  }
+}
+
+void lv_clear_extrusion() { lv_obj_del(scr); }
+
+#endif // TFT_LITTLE_VGL_UI
