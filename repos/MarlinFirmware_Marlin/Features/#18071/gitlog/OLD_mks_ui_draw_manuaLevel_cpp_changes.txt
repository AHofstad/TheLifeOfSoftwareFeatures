commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
deleted file mode 100644
index f25c7c0c25..0000000000
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ /dev/null
@@ -1,87 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-#include "../../../../inc/MarlinConfigPre.h"
-
-#if HAS_TFT_LVGL_UI
-
-#include "draw_ui.h"
-#include <lv_conf.h>
-
-#include "../../../../gcode/queue.h"
-#include "../../../../inc/MarlinConfig.h"
-
-extern const char G28_STR[];
-
-extern lv_group_t *g;
-static lv_obj_t *scr;
-
-enum {
-  ID_M_POINT1 = 1,
-  ID_M_POINT2,
-  ID_M_POINT3,
-  ID_M_POINT4,
-  ID_M_POINT5,
-  ID_MANUAL_RETURN
-};
-
-static void event_handler(lv_obj_t *obj, lv_event_t event) {
-  if (event != LV_EVENT_RELEASED) return;
-
-  switch (obj->mks_obj_id) {
-    case ID_M_POINT1 ... ID_M_POINT5:
-      if (queue.ring_buffer.empty()) {
-        if (uiCfg.leveling_first_time) {
-          uiCfg.leveling_first_time = false;
-          queue.inject_P(G28_STR);
-        }
-        const int ind = obj->mks_obj_id - ID_M_POINT1;
-        sprintf_P(public_buf_l, PSTR("G1Z10\nG1X%dY%d\nG1Z0"), gCfgItems.trammingPos[ind].x, gCfgItems.trammingPos[ind].y);
-        queue.inject(public_buf_l);
-      }
-      break;
-    case ID_MANUAL_RETURN:
-      lv_clear_manualLevel();
-      lv_draw_tool();
-      break;
-  }
-}
-
-void lv_draw_manualLevel() {
-  scr = lv_screen_create(LEVELING_UI);
-  // Create an Image button
-  lv_obj_t *buttonPoint1 = lv_big_button_create(scr, "F:/bmp_leveling1.bin", leveling_menu.position1, INTERVAL_V, titleHeight, event_handler, ID_M_POINT1);
-  lv_obj_clear_protect(buttonPoint1, LV_PROTECT_FOLLOW);
-  lv_big_button_create(scr, "F:/bmp_leveling2.bin", leveling_menu.position2, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_M_POINT2);
-  lv_big_button_create(scr, "F:/bmp_leveling3.bin", leveling_menu.position3, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_M_POINT3);
-  lv_big_button_create(scr, "F:/bmp_leveling4.bin", leveling_menu.position4, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_M_POINT4);
-  lv_big_button_create(scr, "F:/bmp_leveling5.bin", leveling_menu.position5, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_M_POINT5);
-  lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_MANUAL_RETURN);
-}
-
-void lv_clear_manualLevel() {
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
-  #endif
-  lv_obj_del(scr);
-}
-
-#endif // HAS_TFT_LVGL_UI

commit 84c79d753156a396fca43dd62cd693454efac882
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Apr 13 15:07:25 2021 -0500

    Followup to sprintf cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index e296a73590..f25c7c0c25 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -47,21 +47,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
 
   switch (obj->mks_obj_id) {
     case ID_M_POINT1 ... ID_M_POINT5:
       if (queue.ring_buffer.empty()) {
         if (uiCfg.leveling_first_time) {
           uiCfg.leveling_first_time = false;
           queue.inject_P(G28_STR);
         }
         const int ind = obj->mks_obj_id - ID_M_POINT1;
-        sprintf_P(public_buf_l, PSTR("G1 Z10\nG1 X%d Y%d\nG1 Z0"), gCfgItems.trammingPos[ind].x, gCfgItems.trammingPos[ind].y);
+        sprintf_P(public_buf_l, PSTR("G1Z10\nG1X%dY%d\nG1Z0"), gCfgItems.trammingPos[ind].x, gCfgItems.trammingPos[ind].y);
         queue.inject(public_buf_l);
       }
       break;
     case ID_MANUAL_RETURN:
       lv_clear_manualLevel();
       lv_draw_tool();
       break;
   }
 }
 

commit e0ed57db67ff191452f00808dc696c80dd8e03f7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 12 23:40:32 2021 -0500

    Remove extraneous MKS UI sprintf

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index 9734dd94ae..e296a73590 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -47,21 +47,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
 
   switch (obj->mks_obj_id) {
     case ID_M_POINT1 ... ID_M_POINT5:
       if (queue.ring_buffer.empty()) {
         if (uiCfg.leveling_first_time) {
           uiCfg.leveling_first_time = false;
           queue.inject_P(G28_STR);
         }
         const int ind = obj->mks_obj_id - ID_M_POINT1;
-        sprintf_P(public_buf_l, PSTR("G1 Z10\nG1 X%d Y%d\nG1 Z0"), (int)gCfgItems.trammingPos[ind][X_AXIS], (int)gCfgItems.trammingPos[ind][Y_AXIS]);
+        sprintf_P(public_buf_l, PSTR("G1 Z10\nG1 X%d Y%d\nG1 Z0"), gCfgItems.trammingPos[ind].x, gCfgItems.trammingPos[ind].y);
         queue.inject(public_buf_l);
       }
       break;
     case ID_MANUAL_RETURN:
       lv_clear_manualLevel();
       lv_draw_tool();
       break;
   }
 }
 

commit 8fca37f3737e66150c1ed5b5793e2c48dd108b23
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Mar 23 23:54:23 2021 -0500

    Misc LCD cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index 039591b03e..9734dd94ae 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -47,21 +47,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
 
   switch (obj->mks_obj_id) {
     case ID_M_POINT1 ... ID_M_POINT5:
       if (queue.ring_buffer.empty()) {
         if (uiCfg.leveling_first_time) {
           uiCfg.leveling_first_time = false;
           queue.inject_P(G28_STR);
         }
         const int ind = obj->mks_obj_id - ID_M_POINT1;
-        sprintf_P(public_buf_l, PSTR("G1 Z10\nG1 X%d Y%d\nG1 Z0"), (int)gCfgItems.levelingPos[ind][0], (int)gCfgItems.levelingPos[ind][1]);
+        sprintf_P(public_buf_l, PSTR("G1 Z10\nG1 X%d Y%d\nG1 Z0"), (int)gCfgItems.trammingPos[ind][X_AXIS], (int)gCfgItems.trammingPos[ind][Y_AXIS]);
         queue.inject(public_buf_l);
       }
       break;
     case ID_MANUAL_RETURN:
       lv_clear_manualLevel();
       lv_draw_tool();
       break;
   }
 }
 

commit c76008bd6a7bc0f88fec7fa58f11cfec88ab366f
Author: Sola <42537573+solawc@users.noreply.github.com>
Date:   Sun Feb 28 07:35:32 2021 +0800

    MKS H43 controller (#20609)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index dbeb3796e0..039591b03e 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -22,20 +22,22 @@
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
 #include "draw_ui.h"
 #include <lv_conf.h>
 
 #include "../../../../gcode/queue.h"
 #include "../../../../inc/MarlinConfig.h"
 
+extern const char G28_STR[];
+
 extern lv_group_t *g;
 static lv_obj_t *scr;
 
 enum {
   ID_M_POINT1 = 1,
   ID_M_POINT2,
   ID_M_POINT3,
   ID_M_POINT4,
   ID_M_POINT5,
   ID_MANUAL_RETURN

commit ec42be346d5c0d072feb8a1b63ef2fdbd6dc1e98
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Fri Feb 26 23:54:46 2021 +0100

    Fix and improve G-code queue (#21122)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index 495acda06b..dbeb3796e0 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -39,21 +39,21 @@ enum {
   ID_M_POINT4,
   ID_M_POINT5,
   ID_MANUAL_RETURN
 };
 
 static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
 
   switch (obj->mks_obj_id) {
     case ID_M_POINT1 ... ID_M_POINT5:
-      if (queue.length == 0) {
+      if (queue.ring_buffer.empty()) {
         if (uiCfg.leveling_first_time) {
           uiCfg.leveling_first_time = false;
           queue.inject_P(G28_STR);
         }
         const int ind = obj->mks_obj_id - ID_M_POINT1;
         sprintf_P(public_buf_l, PSTR("G1 Z10\nG1 X%d Y%d\nG1 Z0"), (int)gCfgItems.levelingPos[ind][0], (int)gCfgItems.levelingPos[ind][1]);
         queue.inject(public_buf_l);
       }
       break;
     case ID_MANUAL_RETURN:

commit d33fe2378c25d258b02440aef6cc31e36753f98f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jan 22 15:01:19 2021 -0600

    Move common strings (#20846)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index 0b09ae391d..495acda06b 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -22,22 +22,20 @@
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
 #include "draw_ui.h"
 #include <lv_conf.h>
 
 #include "../../../../gcode/queue.h"
 #include "../../../../inc/MarlinConfig.h"
 
-extern const char G28_STR[];
-
 extern lv_group_t *g;
 static lv_obj_t *scr;
 
 enum {
   ID_M_POINT1 = 1,
   ID_M_POINT2,
   ID_M_POINT3,
   ID_M_POINT4,
   ID_M_POINT5,
   ID_MANUAL_RETURN

commit fb41413b7614a256302f4bfcdb7ad7bcad50f7a5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 16 20:43:24 2021 -0600

    Optimize some G-code strings

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index 51761da8f3..0b09ae391d 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -22,95 +22,47 @@
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
 #include "draw_ui.h"
 #include <lv_conf.h>
 
 #include "../../../../gcode/queue.h"
 #include "../../../../inc/MarlinConfig.h"
 
+extern const char G28_STR[];
+
 extern lv_group_t *g;
 static lv_obj_t *scr;
 
 enum {
   ID_M_POINT1 = 1,
   ID_M_POINT2,
   ID_M_POINT3,
   ID_M_POINT4,
   ID_M_POINT5,
   ID_MANUAL_RETURN
 };
 
 static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
 
   switch (obj->mks_obj_id) {
-    case ID_M_POINT1:
-      if (queue.length == 0) {
-        if (uiCfg.leveling_first_time) {
-          queue.enqueue_now_P(PSTR("G28"));
-          uiCfg.leveling_first_time = 0;
-        }
-        queue.enqueue_now_P(PSTR("G1 Z10"));
-        sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[0][0], (int)gCfgItems.levelingPos[0][1]);
-        queue.enqueue_one_now(public_buf_l);
-        queue.enqueue_now_P(PSTR("G1 Z0"));
-      }
-      break;
-    case ID_M_POINT2:
-      if (queue.length == 0) {
-        if (uiCfg.leveling_first_time) {
-          queue.enqueue_now_P(PSTR("G28"));
-          uiCfg.leveling_first_time = 0;
-        }
-        queue.enqueue_now_P(PSTR("G1 Z10"));
-        sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[1][0], (int)gCfgItems.levelingPos[1][1]);
-        queue.enqueue_one_now(public_buf_l);
-        queue.enqueue_now_P(PSTR("G1 Z0"));
-      }
-      break;
-    case ID_M_POINT3:
-      if (queue.length == 0) {
-        if (uiCfg.leveling_first_time) {
-          queue.enqueue_now_P(PSTR("G28"));
-          uiCfg.leveling_first_time = 0;
-        }
-        queue.enqueue_now_P(PSTR("G1 Z10"));
-        sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[2][0], (int)gCfgItems.levelingPos[2][1]);
-        queue.enqueue_one_now(public_buf_l);
-        queue.enqueue_now_P(PSTR("G1 Z0"));
-      }
-
-      break;
-    case ID_M_POINT4:
-      if (queue.length == 0) {
-        if (uiCfg.leveling_first_time) {
-          queue.enqueue_now_P(PSTR("G28"));
-          uiCfg.leveling_first_time = 0;
-        }
-        queue.enqueue_now_P(PSTR("G1 Z10"));
-        sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[3][0], (int)gCfgItems.levelingPos[3][1]);
-        queue.enqueue_one_now(public_buf_l);
-        queue.enqueue_now_P(PSTR("G1 Z0"));
-      }
-      break;
-    case ID_M_POINT5:
+    case ID_M_POINT1 ... ID_M_POINT5:
       if (queue.length == 0) {
         if (uiCfg.leveling_first_time) {
-          queue.enqueue_now_P(PSTR("G28"));
-          uiCfg.leveling_first_time = 0;
+          uiCfg.leveling_first_time = false;
+          queue.inject_P(G28_STR);
         }
-        queue.enqueue_now_P(PSTR("G1 Z10"));
-        sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[4][0], (int)gCfgItems.levelingPos[4][1]);
-        queue.enqueue_one_now(public_buf_l);
-        queue.enqueue_now_P(PSTR("G1 Z0"));
+        const int ind = obj->mks_obj_id - ID_M_POINT1;
+        sprintf_P(public_buf_l, PSTR("G1 Z10\nG1 X%d Y%d\nG1 Z0"), (int)gCfgItems.levelingPos[ind][0], (int)gCfgItems.levelingPos[ind][1]);
+        queue.inject(public_buf_l);
       }
       break;
     case ID_MANUAL_RETURN:
       lv_clear_manualLevel();
       lv_draw_tool();
       break;
   }
 }
 
 void lv_draw_manualLevel() {

commit c753fc690f6cdd181213304224eee029988ffd34
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 14 00:23:56 2021 -0600

    More MKS UI prelim. cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index 338cb1fecc..51761da8f3 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -106,21 +106,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
         queue.enqueue_now_P(PSTR("G1 Z0"));
       }
       break;
     case ID_MANUAL_RETURN:
       lv_clear_manualLevel();
       lv_draw_tool();
       break;
   }
 }
 
-void lv_draw_manualLevel(void) {
+void lv_draw_manualLevel() {
   scr = lv_screen_create(LEVELING_UI);
   // Create an Image button
   lv_obj_t *buttonPoint1 = lv_big_button_create(scr, "F:/bmp_leveling1.bin", leveling_menu.position1, INTERVAL_V, titleHeight, event_handler, ID_M_POINT1);
   lv_obj_clear_protect(buttonPoint1, LV_PROTECT_FOLLOW);
   lv_big_button_create(scr, "F:/bmp_leveling2.bin", leveling_menu.position2, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_M_POINT2);
   lv_big_button_create(scr, "F:/bmp_leveling3.bin", leveling_menu.position3, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_M_POINT3);
   lv_big_button_create(scr, "F:/bmp_leveling4.bin", leveling_menu.position4, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_M_POINT4);
   lv_big_button_create(scr, "F:/bmp_leveling5.bin", leveling_menu.position5, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_M_POINT5);
   lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_MANUAL_RETURN);
 }

commit 44c57ab05a8f909b85f51e08c90316b41e50c455
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 21:02:35 2021 -0600

    MKS UI prelim. cleanup (#20763)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index 3c8d562913..338cb1fecc 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -18,24 +18,20 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
 #include "draw_ui.h"
 #include <lv_conf.h>
-//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
-//#include "../lvgl/src/lv_objx/lv_img.h"
-//#include "../lvgl/src/lv_core/lv_disp.h"
-//#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../gcode/queue.h"
 #include "../../../../inc/MarlinConfig.h"
 
 extern lv_group_t *g;
 static lv_obj_t *scr;
 
 enum {
   ID_M_POINT1 = 1,
   ID_M_POINT2,

commit 853d01de683ab3efcbb15ef95db869e279053ee0
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 19:28:31 2020 -0300

    More LVGL UI code reduction (#19879)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index 0513437353..3c8d562913 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -111,30 +111,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
       }
       break;
     case ID_MANUAL_RETURN:
       lv_clear_manualLevel();
       lv_draw_tool();
       break;
   }
 }
 
 void lv_draw_manualLevel(void) {
-  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != LEVELING_UI) {
-    disp_state_stack._disp_index++;
-    disp_state_stack._disp_state[disp_state_stack._disp_index] = LEVELING_UI;
-  }
-  disp_state = LEVELING_UI;
-
-  scr = lv_screen_create();
-  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
-  lv_refr_now(lv_refr_get_disp_refreshing());
-
+  scr = lv_screen_create(LEVELING_UI);
   // Create an Image button
   lv_obj_t *buttonPoint1 = lv_big_button_create(scr, "F:/bmp_leveling1.bin", leveling_menu.position1, INTERVAL_V, titleHeight, event_handler, ID_M_POINT1);
   lv_obj_clear_protect(buttonPoint1, LV_PROTECT_FOLLOW);
   lv_big_button_create(scr, "F:/bmp_leveling2.bin", leveling_menu.position2, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_M_POINT2);
   lv_big_button_create(scr, "F:/bmp_leveling3.bin", leveling_menu.position3, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_M_POINT3);
   lv_big_button_create(scr, "F:/bmp_leveling4.bin", leveling_menu.position4, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_M_POINT4);
   lv_big_button_create(scr, "F:/bmp_leveling5.bin", leveling_menu.position5, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_M_POINT5);
   lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_MANUAL_RETURN);
 }
 

commit 9630c2683c39468bf885c560a1768d8b377d9462
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 01:37:45 2020 -0300

    More MKS UI cleanup, optimization (#19869)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index 8c0575d343..0513437353 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -26,215 +26,123 @@
 #include "draw_ui.h"
 #include <lv_conf.h>
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../gcode/queue.h"
 #include "../../../../inc/MarlinConfig.h"
 
-extern lv_group_t * g;
-static lv_obj_t * scr;
+extern lv_group_t *g;
+static lv_obj_t *scr;
 
-#define ID_M_POINT1      1
-#define ID_M_POINT2      2
-#define ID_M_POINT3      3
-#define ID_M_POINT4      4
-#define ID_M_POINT5      5
-#define ID_MANUAL_RETURN 6
+enum {
+  ID_M_POINT1 = 1,
+  ID_M_POINT2,
+  ID_M_POINT3,
+  ID_M_POINT4,
+  ID_M_POINT5,
+  ID_MANUAL_RETURN
+};
+
+static void event_handler(lv_obj_t *obj, lv_event_t event) {
+  if (event != LV_EVENT_RELEASED) return;
 
-static void event_handler(lv_obj_t * obj, lv_event_t event) {
   switch (obj->mks_obj_id) {
     case ID_M_POINT1:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-
-        if (queue.length == 0) {
-          if (uiCfg.leveling_first_time) {
-            queue.enqueue_now_P(PSTR("G28"));
-            uiCfg.leveling_first_time = 0;
-          }
-
-          queue.enqueue_now_P(PSTR("G1 Z10"));
-
-          ZERO(public_buf_l);
-          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[0][0], (int)gCfgItems.levelingPos[0][1]);
-          queue.enqueue_one_now(public_buf_l);
-          queue.enqueue_now_P(PSTR("G1 Z0"));
+      if (queue.length == 0) {
+        if (uiCfg.leveling_first_time) {
+          queue.enqueue_now_P(PSTR("G28"));
+          uiCfg.leveling_first_time = 0;
         }
+        queue.enqueue_now_P(PSTR("G1 Z10"));
+        sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[0][0], (int)gCfgItems.levelingPos[0][1]);
+        queue.enqueue_one_now(public_buf_l);
+        queue.enqueue_now_P(PSTR("G1 Z0"));
       }
       break;
     case ID_M_POINT2:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        if (queue.length == 0) {
-          if (uiCfg.leveling_first_time) {
-            queue.enqueue_now_P(PSTR("G28"));
-            uiCfg.leveling_first_time = 0;
-          }
-
-          queue.enqueue_now_P(PSTR("G1 Z10"));
-
-          ZERO(public_buf_l);
-          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[1][0], (int)gCfgItems.levelingPos[1][1]);
-          queue.enqueue_one_now(public_buf_l);
-          queue.enqueue_now_P(PSTR("G1 Z0"));
+      if (queue.length == 0) {
+        if (uiCfg.leveling_first_time) {
+          queue.enqueue_now_P(PSTR("G28"));
+          uiCfg.leveling_first_time = 0;
         }
+        queue.enqueue_now_P(PSTR("G1 Z10"));
+        sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[1][0], (int)gCfgItems.levelingPos[1][1]);
+        queue.enqueue_one_now(public_buf_l);
+        queue.enqueue_now_P(PSTR("G1 Z0"));
       }
       break;
     case ID_M_POINT3:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        if (queue.length == 0) {
-          if (uiCfg.leveling_first_time) {
-            queue.enqueue_now_P(PSTR("G28"));
-            uiCfg.leveling_first_time = 0;
-          }
-
-          queue.enqueue_now_P(PSTR("G1 Z10"));
-
-          ZERO(public_buf_l);
-          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[2][0], (int)gCfgItems.levelingPos[2][1]);
-          queue.enqueue_one_now(public_buf_l);
-          queue.enqueue_now_P(PSTR("G1 Z0"));
+      if (queue.length == 0) {
+        if (uiCfg.leveling_first_time) {
+          queue.enqueue_now_P(PSTR("G28"));
+          uiCfg.leveling_first_time = 0;
         }
+        queue.enqueue_now_P(PSTR("G1 Z10"));
+        sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[2][0], (int)gCfgItems.levelingPos[2][1]);
+        queue.enqueue_one_now(public_buf_l);
+        queue.enqueue_now_P(PSTR("G1 Z0"));
       }
 
       break;
     case ID_M_POINT4:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        if (queue.length == 0) {
-          if (uiCfg.leveling_first_time) {
-            queue.enqueue_now_P(PSTR("G28"));
-            uiCfg.leveling_first_time = 0;
-          }
-
-          queue.enqueue_now_P(PSTR("G1 Z10"));
-
-          ZERO(public_buf_l);
-          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[3][0], (int)gCfgItems.levelingPos[3][1]);
-          queue.enqueue_one_now(public_buf_l);
-          queue.enqueue_now_P(PSTR("G1 Z0"));
+      if (queue.length == 0) {
+        if (uiCfg.leveling_first_time) {
+          queue.enqueue_now_P(PSTR("G28"));
+          uiCfg.leveling_first_time = 0;
         }
+        queue.enqueue_now_P(PSTR("G1 Z10"));
+        sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[3][0], (int)gCfgItems.levelingPos[3][1]);
+        queue.enqueue_one_now(public_buf_l);
+        queue.enqueue_now_P(PSTR("G1 Z0"));
       }
       break;
     case ID_M_POINT5:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        if (queue.length == 0) {
-          if (uiCfg.leveling_first_time) {
-            queue.enqueue_now_P(PSTR("G28"));
-            uiCfg.leveling_first_time = 0;
-          }
-
-          queue.enqueue_now_P(PSTR("G1 Z10"));
-
-          ZERO(public_buf_l);
-          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[4][0], (int)gCfgItems.levelingPos[4][1]);
-          queue.enqueue_one_now(public_buf_l);
-          queue.enqueue_now_P(PSTR("G1 Z0"));
+      if (queue.length == 0) {
+        if (uiCfg.leveling_first_time) {
+          queue.enqueue_now_P(PSTR("G28"));
+          uiCfg.leveling_first_time = 0;
         }
+        queue.enqueue_now_P(PSTR("G1 Z10"));
+        sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[4][0], (int)gCfgItems.levelingPos[4][1]);
+        queue.enqueue_one_now(public_buf_l);
+        queue.enqueue_now_P(PSTR("G1 Z0"));
       }
-
       break;
     case ID_MANUAL_RETURN:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        lv_clear_manualLevel();
-        lv_draw_tool();
-      }
+      lv_clear_manualLevel();
+      lv_draw_tool();
       break;
   }
 }
 
 void lv_draw_manualLevel(void) {
-  lv_obj_t *buttonPoint1, *buttonPoint2, *buttonPoint3, *buttonPoint4, *buttonPoint5;
-  lv_obj_t *buttonBack;
-
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != LEVELING_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = LEVELING_UI;
   }
   disp_state = LEVELING_UI;
 
-  scr = lv_obj_create(NULL, NULL);
-
-  // static lv_style_t tool_style;
-
-  lv_obj_set_style(scr, &tft_style_scr);
-  lv_scr_load(scr);
-  lv_obj_clean(scr);
-
+  scr = lv_screen_create();
   (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
-
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   // Create an Image button
-  buttonPoint1 = lv_imgbtn_create(scr, "F:/bmp_leveling1.bin", INTERVAL_V, titleHeight, event_handler, ID_M_POINT1);
+  lv_obj_t *buttonPoint1 = lv_big_button_create(scr, "F:/bmp_leveling1.bin", leveling_menu.position1, INTERVAL_V, titleHeight, event_handler, ID_M_POINT1);
   lv_obj_clear_protect(buttonPoint1, LV_PROTECT_FOLLOW);
-  buttonPoint2 = lv_imgbtn_create(scr, "F:/bmp_leveling2.bin", BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_M_POINT2);
-  buttonPoint3 = lv_imgbtn_create(scr, "F:/bmp_leveling3.bin", BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_M_POINT3);
-  buttonPoint4 = lv_imgbtn_create(scr, "F:/bmp_leveling4.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_M_POINT4);
-  buttonPoint5 = lv_imgbtn_create(scr, "F:/bmp_leveling5.bin", INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_M_POINT5);
-  buttonBack   = lv_imgbtn_create(scr, "F:/bmp_return.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_MANUAL_RETURN);
-
-  // Create labels on the image buttons
-  lv_obj_t *label_Point1 = lv_label_create_empty(buttonPoint1);
-  lv_obj_t *label_Point2 = lv_label_create_empty(buttonPoint2);
-  lv_obj_t *label_Point3 = lv_label_create_empty(buttonPoint3);
-  lv_obj_t *label_Point4 = lv_label_create_empty(buttonPoint4);
-  lv_obj_t *label_Point5 = lv_label_create_empty(buttonPoint5);
-  lv_obj_t *label_Back   = lv_label_create_empty(buttonBack);
-
-  if (gCfgItems.multiple_language) {
-    lv_label_set_text(label_Point1, leveling_menu.position1);
-    lv_obj_align(label_Point1, buttonPoint1, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_Point2, leveling_menu.position2);
-    lv_obj_align(label_Point2, buttonPoint2, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_Point3, leveling_menu.position3);
-    lv_obj_align(label_Point3, buttonPoint3, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_Point4, leveling_menu.position4);
-    lv_obj_align(label_Point4, buttonPoint4, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_Point5, leveling_menu.position5);
-    lv_obj_align(label_Point5, buttonPoint5, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_Back, common_menu.text_back);
-    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-  }
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) {
-      lv_group_add_obj(g, buttonPoint1);
-      lv_group_add_obj(g, buttonPoint2);
-      lv_group_add_obj(g, buttonPoint3);
-      lv_group_add_obj(g, buttonPoint4);
-      lv_group_add_obj(g, buttonPoint5);
-      lv_group_add_obj(g, buttonBack);
-    }
-  #endif
+  lv_big_button_create(scr, "F:/bmp_leveling2.bin", leveling_menu.position2, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_M_POINT2);
+  lv_big_button_create(scr, "F:/bmp_leveling3.bin", leveling_menu.position3, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_M_POINT3);
+  lv_big_button_create(scr, "F:/bmp_leveling4.bin", leveling_menu.position4, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_M_POINT4);
+  lv_big_button_create(scr, "F:/bmp_leveling5.bin", leveling_menu.position5, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_M_POINT5);
+  lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_MANUAL_RETURN);
 }
 
 void lv_clear_manualLevel() {
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
   #endif
   lv_obj_del(scr);
 }
 
 #endif // HAS_TFT_LVGL_UI

commit 4533a197d59ffcaccc4d476f06df7754b11b9b0c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 22 20:22:17 2020 -0500

    Slim down MKS UI code (#19843)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index f1040ba214..8c0575d343 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -171,95 +171,40 @@ void lv_draw_manualLevel(void) {
   disp_state = LEVELING_UI;
 
   scr = lv_obj_create(NULL, NULL);
 
   // static lv_style_t tool_style;
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
-  lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_label_rel);
-  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
-  lv_label_set_text(title, creat_title_text());
+  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   // Create an Image button
-  buttonPoint1 = lv_imgbtn_create(scr, NULL);
-  buttonPoint2 = lv_imgbtn_create(scr, NULL);
-  buttonPoint3 = lv_imgbtn_create(scr, NULL);
-  buttonPoint4 = lv_imgbtn_create(scr, NULL);
-  buttonPoint5 = lv_imgbtn_create(scr, NULL);
-  buttonBack   = lv_imgbtn_create(scr, NULL);
-
-  lv_obj_set_event_cb_mks(buttonPoint1, event_handler, ID_M_POINT1, NULL, 0);
-  lv_imgbtn_set_src(buttonPoint1, LV_BTN_STATE_REL, "F:/bmp_leveling1.bin");
-  lv_imgbtn_set_src(buttonPoint1, LV_BTN_STATE_PR, "F:/bmp_leveling1.bin");
-  lv_imgbtn_set_style(buttonPoint1, LV_BTN_STATE_PR, &tft_style_label_pre);
-  lv_imgbtn_set_style(buttonPoint1, LV_BTN_STATE_REL, &tft_style_label_rel);
+  buttonPoint1 = lv_imgbtn_create(scr, "F:/bmp_leveling1.bin", INTERVAL_V, titleHeight, event_handler, ID_M_POINT1);
   lv_obj_clear_protect(buttonPoint1, LV_PROTECT_FOLLOW);
-
-  #if 1
-    lv_obj_set_event_cb_mks(buttonPoint2, event_handler, ID_M_POINT2, NULL, 0);
-    lv_imgbtn_set_src(buttonPoint2, LV_BTN_STATE_REL, "F:/bmp_leveling2.bin");
-    lv_imgbtn_set_src(buttonPoint2, LV_BTN_STATE_PR, "F:/bmp_leveling2.bin");
-    lv_imgbtn_set_style(buttonPoint2, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonPoint2, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonPoint3, event_handler, ID_M_POINT3, NULL, 0);
-    lv_imgbtn_set_src(buttonPoint3, LV_BTN_STATE_REL, "F:/bmp_leveling3.bin");
-    lv_imgbtn_set_src(buttonPoint3, LV_BTN_STATE_PR, "F:/bmp_leveling3.bin");
-    lv_imgbtn_set_style(buttonPoint3, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonPoint3, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonPoint4, event_handler, ID_M_POINT4, NULL, 0);
-    lv_imgbtn_set_src(buttonPoint4, LV_BTN_STATE_REL, "F:/bmp_leveling4.bin");
-    lv_imgbtn_set_src(buttonPoint4, LV_BTN_STATE_PR, "F:/bmp_leveling4.bin");
-    lv_imgbtn_set_style(buttonPoint4, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonPoint4, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonPoint5, event_handler, ID_M_POINT5, NULL, 0);
-    lv_imgbtn_set_src(buttonPoint5, LV_BTN_STATE_REL, "F:/bmp_leveling5.bin");
-    lv_imgbtn_set_src(buttonPoint5, LV_BTN_STATE_PR, "F:/bmp_leveling5.bin");
-    lv_imgbtn_set_style(buttonPoint5, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonPoint5, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_MANUAL_RETURN, NULL, 0);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, "F:/bmp_return.bin");
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, "F:/bmp_return.bin");
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
-  #endif
-
-  lv_obj_set_pos(buttonPoint1, INTERVAL_V, titleHeight);
-  lv_obj_set_pos(buttonPoint2, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight);
-  lv_obj_set_pos(buttonPoint3, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight);
-  lv_obj_set_pos(buttonPoint4, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
-  lv_obj_set_pos(buttonPoint5, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  buttonPoint2 = lv_imgbtn_create(scr, "F:/bmp_leveling2.bin", BTN_X_PIXEL + INTERVAL_V * 2, titleHeight, event_handler, ID_M_POINT2);
+  buttonPoint3 = lv_imgbtn_create(scr, "F:/bmp_leveling3.bin", BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight, event_handler, ID_M_POINT3);
+  buttonPoint4 = lv_imgbtn_create(scr, "F:/bmp_leveling4.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_M_POINT4);
+  buttonPoint5 = lv_imgbtn_create(scr, "F:/bmp_leveling5.bin", INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_M_POINT5);
+  buttonBack   = lv_imgbtn_create(scr, "F:/bmp_return.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_MANUAL_RETURN);
 
   // Create labels on the image buttons
-  lv_btn_set_layout(buttonPoint1, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonPoint2, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonPoint3, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonPoint4, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonPoint5, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
-
-  lv_obj_t *label_Point1 = lv_label_create(buttonPoint1, NULL);
-  lv_obj_t *label_Point2 = lv_label_create(buttonPoint2, NULL);
-  lv_obj_t *label_Point3 = lv_label_create(buttonPoint3, NULL);
-  lv_obj_t *label_Point4 = lv_label_create(buttonPoint4, NULL);
-  lv_obj_t *label_Point5 = lv_label_create(buttonPoint5, NULL);
-  lv_obj_t *label_Back   = lv_label_create(buttonBack, NULL);
+  lv_obj_t *label_Point1 = lv_label_create_empty(buttonPoint1);
+  lv_obj_t *label_Point2 = lv_label_create_empty(buttonPoint2);
+  lv_obj_t *label_Point3 = lv_label_create_empty(buttonPoint3);
+  lv_obj_t *label_Point4 = lv_label_create_empty(buttonPoint4);
+  lv_obj_t *label_Point5 = lv_label_create_empty(buttonPoint5);
+  lv_obj_t *label_Back   = lv_label_create_empty(buttonBack);
 
   if (gCfgItems.multiple_language) {
     lv_label_set_text(label_Point1, leveling_menu.position1);
     lv_obj_align(label_Point1, buttonPoint1, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Point2, leveling_menu.position2);
     lv_obj_align(label_Point2, buttonPoint2, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Point3, leveling_menu.position3);
     lv_obj_align(label_Point3, buttonPoint3, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);

commit 072f996af70b5ac635893eca2d4bd4bbb4f00acc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 21 12:45:27 2020 -0500

    General cleanup, mostly MKS UI (#19825)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index 3d68019b35..f1040ba214 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -16,28 +16,29 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
-#include "../../../../MarlinCore.h"
-#include "lv_conf.h"
+#include "draw_ui.h"
+#include <lv_conf.h>
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
-#include "draw_ui.h"
+
 #include "../../../../gcode/queue.h"
+#include "../../../../inc/MarlinConfig.h"
 
 extern lv_group_t * g;
 static lv_obj_t * scr;
 
 #define ID_M_POINT1      1
 #define ID_M_POINT2      2
 #define ID_M_POINT3      3
 #define ID_M_POINT4      4
 #define ID_M_POINT5      5
 #define ID_MANUAL_RETURN 6
@@ -246,21 +247,21 @@ void lv_draw_manualLevel(void) {
   lv_btn_set_layout(buttonPoint5, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
   lv_obj_t *label_Point1 = lv_label_create(buttonPoint1, NULL);
   lv_obj_t *label_Point2 = lv_label_create(buttonPoint2, NULL);
   lv_obj_t *label_Point3 = lv_label_create(buttonPoint3, NULL);
   lv_obj_t *label_Point4 = lv_label_create(buttonPoint4, NULL);
   lv_obj_t *label_Point5 = lv_label_create(buttonPoint5, NULL);
   lv_obj_t *label_Back   = lv_label_create(buttonBack, NULL);
 
-  if (gCfgItems.multiple_language != 0) {
+  if (gCfgItems.multiple_language) {
     lv_label_set_text(label_Point1, leveling_menu.position1);
     lv_obj_align(label_Point1, buttonPoint1, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Point2, leveling_menu.position2);
     lv_obj_align(label_Point2, buttonPoint2, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Point3, leveling_menu.position3);
     lv_obj_align(label_Point3, buttonPoint3, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Point4, leveling_menu.position4);

commit d8ed74904559aa8bdccc8b68acbccfbf1bf779d3
Author: makerbase <4164049@qq.com>
Date:   Mon Sep 21 09:55:02 2020 +0800

    Add MKS Robin E3P, improve LVGL UI (#19442)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index 6530b1554c..3d68019b35 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -25,21 +25,21 @@
 
 #include "../../../../MarlinCore.h"
 #include "lv_conf.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 #include "draw_ui.h"
 #include "../../../../gcode/queue.h"
 
-//static lv_obj_t *buttonMoveZ,*buttonTest,*buttonZ0,*buttonStop,*buttonReturn;
+extern lv_group_t * g;
 static lv_obj_t * scr;
 
 #define ID_M_POINT1      1
 #define ID_M_POINT2      2
 #define ID_M_POINT3      3
 #define ID_M_POINT4      4
 #define ID_M_POINT5      5
 #define ID_MANUAL_RETURN 6
 
 static void event_handler(lv_obj_t * obj, lv_event_t event) {
@@ -52,121 +52,120 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
 
         if (queue.length == 0) {
           if (uiCfg.leveling_first_time) {
             queue.enqueue_now_P(PSTR("G28"));
             uiCfg.leveling_first_time = 0;
           }
 
           queue.enqueue_now_P(PSTR("G1 Z10"));
 
           ZERO(public_buf_l);
-          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), X_MIN_POS + 30, Y_MIN_POS + 30);
+          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[0][0], (int)gCfgItems.levelingPos[0][1]);
           queue.enqueue_one_now(public_buf_l);
           queue.enqueue_now_P(PSTR("G1 Z0"));
         }
       }
       break;
     case ID_M_POINT2:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (queue.length == 0) {
           if (uiCfg.leveling_first_time) {
             queue.enqueue_now_P(PSTR("G28"));
             uiCfg.leveling_first_time = 0;
           }
 
           queue.enqueue_now_P(PSTR("G1 Z10"));
 
           ZERO(public_buf_l);
-          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), X_MAX_POS - 30, Y_MIN_POS + 30);
+          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[1][0], (int)gCfgItems.levelingPos[1][1]);
           queue.enqueue_one_now(public_buf_l);
           queue.enqueue_now_P(PSTR("G1 Z0"));
         }
       }
       break;
     case ID_M_POINT3:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (queue.length == 0) {
           if (uiCfg.leveling_first_time) {
             queue.enqueue_now_P(PSTR("G28"));
             uiCfg.leveling_first_time = 0;
           }
 
           queue.enqueue_now_P(PSTR("G1 Z10"));
 
           ZERO(public_buf_l);
-          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), X_MAX_POS - 30, Y_MAX_POS - 30);
+          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[2][0], (int)gCfgItems.levelingPos[2][1]);
           queue.enqueue_one_now(public_buf_l);
           queue.enqueue_now_P(PSTR("G1 Z0"));
         }
       }
 
       break;
     case ID_M_POINT4:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (queue.length == 0) {
           if (uiCfg.leveling_first_time) {
             queue.enqueue_now_P(PSTR("G28"));
             uiCfg.leveling_first_time = 0;
           }
 
           queue.enqueue_now_P(PSTR("G1 Z10"));
 
           ZERO(public_buf_l);
-          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), X_MIN_POS + 30, Y_MAX_POS - 30);
+          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[3][0], (int)gCfgItems.levelingPos[3][1]);
           queue.enqueue_one_now(public_buf_l);
           queue.enqueue_now_P(PSTR("G1 Z0"));
         }
       }
       break;
     case ID_M_POINT5:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (queue.length == 0) {
           if (uiCfg.leveling_first_time) {
             queue.enqueue_now_P(PSTR("G28"));
             uiCfg.leveling_first_time = 0;
           }
 
           queue.enqueue_now_P(PSTR("G1 Z10"));
 
           ZERO(public_buf_l);
-          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), X_BED_SIZE / 2, Y_BED_SIZE / 2);
+          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), (int)gCfgItems.levelingPos[4][0], (int)gCfgItems.levelingPos[4][1]);
           queue.enqueue_one_now(public_buf_l);
           queue.enqueue_now_P(PSTR("G1 Z0"));
         }
       }
 
       break;
     case ID_MANUAL_RETURN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         lv_clear_manualLevel();
         lv_draw_tool();
       }
       break;
   }
 }
 
-
 void lv_draw_manualLevel(void) {
   lv_obj_t *buttonPoint1, *buttonPoint2, *buttonPoint3, *buttonPoint4, *buttonPoint5;
   lv_obj_t *buttonBack;
 
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != LEVELING_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = LEVELING_UI;
   }
   disp_state = LEVELING_UI;
 
@@ -178,64 +177,63 @@ void lv_draw_manualLevel(void) {
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
   lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
-  LV_IMG_DECLARE(bmp_pic);
-
   // Create an Image button
   buttonPoint1 = lv_imgbtn_create(scr, NULL);
   buttonPoint2 = lv_imgbtn_create(scr, NULL);
   buttonPoint3 = lv_imgbtn_create(scr, NULL);
   buttonPoint4 = lv_imgbtn_create(scr, NULL);
   buttonPoint5 = lv_imgbtn_create(scr, NULL);
   buttonBack   = lv_imgbtn_create(scr, NULL);
 
-  lv_obj_set_event_cb_mks(buttonPoint1, event_handler, ID_M_POINT1, "bmp_leveling1.bin", 0);
-  lv_imgbtn_set_src(buttonPoint1, LV_BTN_STATE_REL, &bmp_pic);
-  lv_imgbtn_set_src(buttonPoint1, LV_BTN_STATE_PR, &bmp_pic);
+  lv_obj_set_event_cb_mks(buttonPoint1, event_handler, ID_M_POINT1, NULL, 0);
+  lv_imgbtn_set_src(buttonPoint1, LV_BTN_STATE_REL, "F:/bmp_leveling1.bin");
+  lv_imgbtn_set_src(buttonPoint1, LV_BTN_STATE_PR, "F:/bmp_leveling1.bin");
   lv_imgbtn_set_style(buttonPoint1, LV_BTN_STATE_PR, &tft_style_label_pre);
   lv_imgbtn_set_style(buttonPoint1, LV_BTN_STATE_REL, &tft_style_label_rel);
   lv_obj_clear_protect(buttonPoint1, LV_PROTECT_FOLLOW);
+
   #if 1
-    lv_obj_set_event_cb_mks(buttonPoint2, event_handler, ID_M_POINT2, "bmp_leveling2.bin", 0);
-    lv_imgbtn_set_src(buttonPoint2, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonPoint2, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonPoint2, event_handler, ID_M_POINT2, NULL, 0);
+    lv_imgbtn_set_src(buttonPoint2, LV_BTN_STATE_REL, "F:/bmp_leveling2.bin");
+    lv_imgbtn_set_src(buttonPoint2, LV_BTN_STATE_PR, "F:/bmp_leveling2.bin");
     lv_imgbtn_set_style(buttonPoint2, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonPoint2, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonPoint3, event_handler, ID_M_POINT3, "bmp_leveling3.bin", 0);
-    lv_imgbtn_set_src(buttonPoint3, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonPoint3, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonPoint3, event_handler, ID_M_POINT3, NULL, 0);
+    lv_imgbtn_set_src(buttonPoint3, LV_BTN_STATE_REL, "F:/bmp_leveling3.bin");
+    lv_imgbtn_set_src(buttonPoint3, LV_BTN_STATE_PR, "F:/bmp_leveling3.bin");
     lv_imgbtn_set_style(buttonPoint3, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonPoint3, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonPoint4, event_handler, ID_M_POINT4, "bmp_leveling4.bin", 0);
-    lv_imgbtn_set_src(buttonPoint4, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonPoint4, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonPoint4, event_handler, ID_M_POINT4, NULL, 0);
+    lv_imgbtn_set_src(buttonPoint4, LV_BTN_STATE_REL, "F:/bmp_leveling4.bin");
+    lv_imgbtn_set_src(buttonPoint4, LV_BTN_STATE_PR, "F:/bmp_leveling4.bin");
     lv_imgbtn_set_style(buttonPoint4, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonPoint4, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonPoint5, event_handler, ID_M_POINT5, "bmp_leveling5.bin", 0);
-    lv_imgbtn_set_src(buttonPoint5, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonPoint5, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonPoint5, event_handler, ID_M_POINT5, NULL, 0);
+    lv_imgbtn_set_src(buttonPoint5, LV_BTN_STATE_REL, "F:/bmp_leveling5.bin");
+    lv_imgbtn_set_src(buttonPoint5, LV_BTN_STATE_PR, "F:/bmp_leveling5.bin");
     lv_imgbtn_set_style(buttonPoint5, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonPoint5, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_MANUAL_RETURN, "bmp_return.bin", 0);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_MANUAL_RETURN, NULL, 0);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, "F:/bmp_return.bin");
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, "F:/bmp_return.bin");
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonPoint1, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonPoint2, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight);
   lv_obj_set_pos(buttonPoint3, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight);
   lv_obj_set_pos(buttonPoint4, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonPoint5, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
@@ -267,15 +265,30 @@ void lv_draw_manualLevel(void) {
 
     lv_label_set_text(label_Point4, leveling_menu.position4);
     lv_obj_align(label_Point4, buttonPoint4, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Point5, leveling_menu.position5);
     lv_obj_align(label_Point5, buttonPoint5, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) {
+      lv_group_add_obj(g, buttonPoint1);
+      lv_group_add_obj(g, buttonPoint2);
+      lv_group_add_obj(g, buttonPoint3);
+      lv_group_add_obj(g, buttonPoint4);
+      lv_group_add_obj(g, buttonPoint5);
+      lv_group_add_obj(g, buttonBack);
+    }
+  #endif
 }
 
-void lv_clear_manualLevel() { lv_obj_del(scr); }
+void lv_clear_manualLevel() {
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
+  #endif
+  lv_obj_del(scr);
+}
 
 #endif // HAS_TFT_LVGL_UI

commit 60ab7a1ddbda1b1a6d20cbeb5c574ce775f57a4b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 20 19:07:59 2020 -0500

    Cleanup before MKS changes

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index ab4d9eb881..6530b1554c 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -180,21 +180,21 @@ void lv_draw_manualLevel(void) {
 
   lv_obj_t * title = lv_label_create(scr, NULL);
   lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   LV_IMG_DECLARE(bmp_pic);
 
-  /*Create an Image button*/
+  // Create an Image button
   buttonPoint1 = lv_imgbtn_create(scr, NULL);
   buttonPoint2 = lv_imgbtn_create(scr, NULL);
   buttonPoint3 = lv_imgbtn_create(scr, NULL);
   buttonPoint4 = lv_imgbtn_create(scr, NULL);
   buttonPoint5 = lv_imgbtn_create(scr, NULL);
   buttonBack   = lv_imgbtn_create(scr, NULL);
 
   lv_obj_set_event_cb_mks(buttonPoint1, event_handler, ID_M_POINT1, "bmp_leveling1.bin", 0);
   lv_imgbtn_set_src(buttonPoint1, LV_BTN_STATE_REL, &bmp_pic);
   lv_imgbtn_set_src(buttonPoint1, LV_BTN_STATE_PR, &bmp_pic);
@@ -233,34 +233,34 @@ void lv_draw_manualLevel(void) {
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonPoint1, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonPoint2, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight);
   lv_obj_set_pos(buttonPoint3, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight);
   lv_obj_set_pos(buttonPoint4, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonPoint5, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
-  /*Create a label on the Image button*/
+  // Create labels on the image buttons
   lv_btn_set_layout(buttonPoint1, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonPoint2, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonPoint3, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonPoint4, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonPoint5, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
-  lv_obj_t * label_Point1 = lv_label_create(buttonPoint1, NULL);
-  lv_obj_t * label_Point2 = lv_label_create(buttonPoint2, NULL);
-  lv_obj_t * label_Point3 = lv_label_create(buttonPoint3, NULL);
-  lv_obj_t * label_Point4 = lv_label_create(buttonPoint4, NULL);
-  lv_obj_t * label_Point5 = lv_label_create(buttonPoint5, NULL);
-  lv_obj_t * label_Back   = lv_label_create(buttonBack, NULL);
+  lv_obj_t *label_Point1 = lv_label_create(buttonPoint1, NULL);
+  lv_obj_t *label_Point2 = lv_label_create(buttonPoint2, NULL);
+  lv_obj_t *label_Point3 = lv_label_create(buttonPoint3, NULL);
+  lv_obj_t *label_Point4 = lv_label_create(buttonPoint4, NULL);
+  lv_obj_t *label_Point5 = lv_label_create(buttonPoint5, NULL);
+  lv_obj_t *label_Back   = lv_label_create(buttonBack, NULL);
 
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(label_Point1, leveling_menu.position1);
     lv_obj_align(label_Point1, buttonPoint1, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Point2, leveling_menu.position2);
     lv_obj_align(label_Point2, buttonPoint2, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Point3, leveling_menu.position3);
     lv_obj_align(label_Point3, buttonPoint3, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);

commit d20d4591321aa467c062f0050355d2aca84e03ad
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Sat Jul 25 13:52:07 2020 +0800

    Robin nano V2, TFT LVGL UI parameters, and more (#18500)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index 3a28ebde62..ab4d9eb881 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -14,256 +14,253 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LVGL_UI)
+#if HAS_TFT_LVGL_UI
 
 #include "../../../../MarlinCore.h"
 #include "lv_conf.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 #include "draw_ui.h"
 #include "../../../../gcode/queue.h"
 
 //static lv_obj_t *buttonMoveZ,*buttonTest,*buttonZ0,*buttonStop,*buttonReturn;
 static lv_obj_t * scr;
 
-#define ID_M_POINT1             1
-#define ID_M_POINT2             2
-#define ID_M_POINT3             3
-#define ID_M_POINT4             4
-#define ID_M_POINT5             5
-
-#define ID_MANUAL_RETURN                6
+#define ID_M_POINT1      1
+#define ID_M_POINT2      2
+#define ID_M_POINT3      3
+#define ID_M_POINT4      4
+#define ID_M_POINT5      5
+#define ID_MANUAL_RETURN 6
 
 static void event_handler(lv_obj_t * obj, lv_event_t event) {
   switch (obj->mks_obj_id) {
     case ID_M_POINT1:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
 
         if (queue.length == 0) {
           if (uiCfg.leveling_first_time) {
-            queue.enqueue_one_P(PSTR("G28"));
+            queue.enqueue_now_P(PSTR("G28"));
             uiCfg.leveling_first_time = 0;
           }
 
-          queue.enqueue_one_P(PSTR("G1 Z10"));
+          queue.enqueue_now_P(PSTR("G1 Z10"));
 
-          memset(public_buf_l, 0, sizeof(public_buf_l));
-          sprintf(public_buf_l, "G1 X%d Y%d", X_MIN_POS + 30, Y_MIN_POS + 30);
-          queue.enqueue_one_P(PSTR(public_buf_l));
-          queue.enqueue_one_P(PSTR("G1 Z0"));
+          ZERO(public_buf_l);
+          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), X_MIN_POS + 30, Y_MIN_POS + 30);
+          queue.enqueue_one_now(public_buf_l);
+          queue.enqueue_now_P(PSTR("G1 Z0"));
         }
       }
       break;
     case ID_M_POINT2:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (queue.length == 0) {
           if (uiCfg.leveling_first_time) {
-            queue.enqueue_one_P(PSTR("G28"));
+            queue.enqueue_now_P(PSTR("G28"));
             uiCfg.leveling_first_time = 0;
           }
 
-          queue.enqueue_one_P(PSTR("G1 Z10"));
+          queue.enqueue_now_P(PSTR("G1 Z10"));
 
-          memset(public_buf_l, 0, sizeof(public_buf_l));
-          sprintf(public_buf_l, "G1 X%d Y%d", X_MAX_POS - 30, Y_MIN_POS + 30);
-          queue.enqueue_one_P(PSTR(public_buf_l));
-          queue.enqueue_one_P(PSTR("G1 Z0"));
+          ZERO(public_buf_l);
+          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), X_MAX_POS - 30, Y_MIN_POS + 30);
+          queue.enqueue_one_now(public_buf_l);
+          queue.enqueue_now_P(PSTR("G1 Z0"));
         }
       }
       break;
     case ID_M_POINT3:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (queue.length == 0) {
           if (uiCfg.leveling_first_time) {
-            queue.enqueue_one_P(PSTR("G28"));
+            queue.enqueue_now_P(PSTR("G28"));
             uiCfg.leveling_first_time = 0;
           }
 
-          queue.enqueue_one_P(PSTR("G1 Z10"));
+          queue.enqueue_now_P(PSTR("G1 Z10"));
 
-          memset(public_buf_l, 0, sizeof(public_buf_l));
-          sprintf(public_buf_l, "G1 X%d Y%d", X_MAX_POS - 30, Y_MAX_POS - 30);
-          queue.enqueue_one_P(PSTR(public_buf_l));
-          queue.enqueue_one_P(PSTR("G1 Z0"));
+          ZERO(public_buf_l);
+          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), X_MAX_POS - 30, Y_MAX_POS - 30);
+          queue.enqueue_one_now(public_buf_l);
+          queue.enqueue_now_P(PSTR("G1 Z0"));
         }
       }
 
       break;
     case ID_M_POINT4:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (queue.length == 0) {
           if (uiCfg.leveling_first_time) {
-            queue.enqueue_one_P(PSTR("G28"));
+            queue.enqueue_now_P(PSTR("G28"));
             uiCfg.leveling_first_time = 0;
           }
 
-          queue.enqueue_one_P(PSTR("G1 Z10"));
+          queue.enqueue_now_P(PSTR("G1 Z10"));
 
-          memset(public_buf_l, 0, sizeof(public_buf_l));
-          sprintf(public_buf_l, "G1 X%d Y%d", X_MIN_POS + 30, Y_MAX_POS - 30);
-          queue.enqueue_one_P(PSTR(public_buf_l));
-          queue.enqueue_one_P(PSTR("G1 Z0"));
+          ZERO(public_buf_l);
+          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), X_MIN_POS + 30, Y_MAX_POS - 30);
+          queue.enqueue_one_now(public_buf_l);
+          queue.enqueue_now_P(PSTR("G1 Z0"));
         }
       }
       break;
     case ID_M_POINT5:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (queue.length == 0) {
           if (uiCfg.leveling_first_time) {
-            queue.enqueue_one_P(PSTR("G28"));
+            queue.enqueue_now_P(PSTR("G28"));
             uiCfg.leveling_first_time = 0;
           }
 
-          queue.enqueue_one_P(PSTR("G1 Z10"));
+          queue.enqueue_now_P(PSTR("G1 Z10"));
 
-          memset(public_buf_l, 0, sizeof(public_buf_l));
-          sprintf(public_buf_l, "G1 X%d Y%d", X_BED_SIZE / 2, Y_BED_SIZE / 2);
-          queue.enqueue_one_P(PSTR(public_buf_l));
-          queue.enqueue_one_P(PSTR("G1 Z0"));
+          ZERO(public_buf_l);
+          sprintf_P(public_buf_l, PSTR("G1 X%d Y%d"), X_BED_SIZE / 2, Y_BED_SIZE / 2);
+          queue.enqueue_one_now(public_buf_l);
+          queue.enqueue_now_P(PSTR("G1 Z0"));
         }
       }
 
       break;
     case ID_MANUAL_RETURN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         lv_clear_manualLevel();
         lv_draw_tool();
       }
       break;
-
   }
 }
 
 
 void lv_draw_manualLevel(void) {
   lv_obj_t *buttonPoint1, *buttonPoint2, *buttonPoint3, *buttonPoint4, *buttonPoint5;
   lv_obj_t *buttonBack;
 
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != LEVELING_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = LEVELING_UI;
   }
   disp_state = LEVELING_UI;
 
   scr = lv_obj_create(NULL, NULL);
 
-  //static lv_style_t tool_style;
+  // static lv_style_t tool_style;
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   LV_IMG_DECLARE(bmp_pic);
 
   /*Create an Image button*/
   buttonPoint1 = lv_imgbtn_create(scr, NULL);
   buttonPoint2 = lv_imgbtn_create(scr, NULL);
   buttonPoint3 = lv_imgbtn_create(scr, NULL);
   buttonPoint4 = lv_imgbtn_create(scr, NULL);
   buttonPoint5 = lv_imgbtn_create(scr, NULL);
-  buttonBack = lv_imgbtn_create(scr, NULL);
+  buttonBack   = lv_imgbtn_create(scr, NULL);
 
-  lv_obj_set_event_cb_mks(buttonPoint1, event_handler, ID_M_POINT1, "bmp_Leveling1.bin", 0);
+  lv_obj_set_event_cb_mks(buttonPoint1, event_handler, ID_M_POINT1, "bmp_leveling1.bin", 0);
   lv_imgbtn_set_src(buttonPoint1, LV_BTN_STATE_REL, &bmp_pic);
   lv_imgbtn_set_src(buttonPoint1, LV_BTN_STATE_PR, &bmp_pic);
-  lv_imgbtn_set_style(buttonPoint1, LV_BTN_STATE_PR, &tft_style_lable_pre);
-  lv_imgbtn_set_style(buttonPoint1, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  lv_imgbtn_set_style(buttonPoint1, LV_BTN_STATE_PR, &tft_style_label_pre);
+  lv_imgbtn_set_style(buttonPoint1, LV_BTN_STATE_REL, &tft_style_label_rel);
   lv_obj_clear_protect(buttonPoint1, LV_PROTECT_FOLLOW);
   #if 1
-    lv_obj_set_event_cb_mks(buttonPoint2, event_handler, ID_M_POINT2, "bmp_Leveling2.bin", 0);
+    lv_obj_set_event_cb_mks(buttonPoint2, event_handler, ID_M_POINT2, "bmp_leveling2.bin", 0);
     lv_imgbtn_set_src(buttonPoint2, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonPoint2, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonPoint2, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonPoint2, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonPoint2, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonPoint2, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonPoint3, event_handler, ID_M_POINT3, "bmp_Leveling3.bin", 0);
+    lv_obj_set_event_cb_mks(buttonPoint3, event_handler, ID_M_POINT3, "bmp_leveling3.bin", 0);
     lv_imgbtn_set_src(buttonPoint3, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonPoint3, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonPoint3, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonPoint3, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonPoint3, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonPoint3, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonPoint4, event_handler, ID_M_POINT4, "bmp_Leveling4.bin", 0);
+    lv_obj_set_event_cb_mks(buttonPoint4, event_handler, ID_M_POINT4, "bmp_leveling4.bin", 0);
     lv_imgbtn_set_src(buttonPoint4, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonPoint4, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonPoint4, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonPoint4, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonPoint4, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonPoint4, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonPoint5, event_handler, ID_M_POINT5, "bmp_Leveling5.bin", 0);
+    lv_obj_set_event_cb_mks(buttonPoint5, event_handler, ID_M_POINT5, "bmp_leveling5.bin", 0);
     lv_imgbtn_set_src(buttonPoint5, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonPoint5, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonPoint5, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonPoint5, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonPoint5, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonPoint5, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_MANUAL_RETURN, "bmp_Return.bin", 0);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_MANUAL_RETURN, "bmp_return.bin", 0);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonPoint1, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonPoint2, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight);
   lv_obj_set_pos(buttonPoint3, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight);
   lv_obj_set_pos(buttonPoint4, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
-  lv_obj_set_pos(buttonPoint5, INTERVAL_V,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonPoint5, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
   /*Create a label on the Image button*/
   lv_btn_set_layout(buttonPoint1, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonPoint2, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonPoint3, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonPoint4, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonPoint5, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
   lv_obj_t * label_Point1 = lv_label_create(buttonPoint1, NULL);
   lv_obj_t * label_Point2 = lv_label_create(buttonPoint2, NULL);
   lv_obj_t * label_Point3 = lv_label_create(buttonPoint3, NULL);
   lv_obj_t * label_Point4 = lv_label_create(buttonPoint4, NULL);
   lv_obj_t * label_Point5 = lv_label_create(buttonPoint5, NULL);
-  lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
-
+  lv_obj_t * label_Back   = lv_label_create(buttonBack, NULL);
 
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(label_Point1, leveling_menu.position1);
     lv_obj_align(label_Point1, buttonPoint1, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Point2, leveling_menu.position2);
     lv_obj_align(label_Point2, buttonPoint2, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Point3, leveling_menu.position3);
     lv_obj_align(label_Point3, buttonPoint3, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
@@ -274,11 +271,11 @@ void lv_draw_manualLevel(void) {
     lv_label_set_text(label_Point5, leveling_menu.position5);
     lv_obj_align(label_Point5, buttonPoint5, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 }
 
 void lv_clear_manualLevel() { lv_obj_del(scr); }
 
-#endif // TFT_LVGL_UI
+#endif // HAS_TFT_LVGL_UI

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index d4e6fa81cb..3a28ebde62 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if ENABLED(TFT_LVGL_UI)
 
 #include "../../../../MarlinCore.h"
 #include "lv_conf.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"

commit e5bc9d31cc87be5c7ef2bd3cd70c2599f76d2bd7
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Jul 1 03:30:24 2020 -0300

    Add TFT_LVGL_UI support (#18438)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
index b97483ec9d..d4e6fa81cb 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -14,21 +14,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LITTLE_VGL_UI)
+#if ENABLED(TFT_LVGL_UI)
 
 #include "../../../../MarlinCore.h"
 #include "lv_conf.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 #include "draw_ui.h"
 #include "../../../../gcode/queue.h"
 
@@ -274,11 +274,11 @@ void lv_draw_manualLevel(void) {
     lv_label_set_text(label_Point5, leveling_menu.position5);
     lv_obj_align(label_Point5, buttonPoint5, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 }
 
 void lv_clear_manualLevel() { lv_obj_del(scr); }
 
-#endif // TFT_LITTLE_VGL_UI
+#endif // TFT_LVGL_UI

commit 642112d3eb7c1af9a52feec8134c85ed3e34891c
Author: makerbase <4164049@qq.com>
Date:   Tue Jun 16 10:05:33 2020 +0800

    Add MKS UI (TFT_LITTLE_VGL_UI) (#18071)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
new file mode 100644
index 0000000000..b97483ec9d
--- /dev/null
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_manuaLevel.cpp
@@ -0,0 +1,284 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(TFT_LITTLE_VGL_UI)
+
+#include "../../../../MarlinCore.h"
+#include "lv_conf.h"
+//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
+//#include "../lvgl/src/lv_objx/lv_img.h"
+//#include "../lvgl/src/lv_core/lv_disp.h"
+//#include "../lvgl/src/lv_core/lv_refr.h"
+#include "draw_ui.h"
+#include "../../../../gcode/queue.h"
+
+//static lv_obj_t *buttonMoveZ,*buttonTest,*buttonZ0,*buttonStop,*buttonReturn;
+static lv_obj_t * scr;
+
+#define ID_M_POINT1             1
+#define ID_M_POINT2             2
+#define ID_M_POINT3             3
+#define ID_M_POINT4             4
+#define ID_M_POINT5             5
+
+#define ID_MANUAL_RETURN                6
+
+static void event_handler(lv_obj_t * obj, lv_event_t event) {
+  switch (obj->mks_obj_id) {
+    case ID_M_POINT1:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+
+        if (queue.length == 0) {
+          if (uiCfg.leveling_first_time) {
+            queue.enqueue_one_P(PSTR("G28"));
+            uiCfg.leveling_first_time = 0;
+          }
+
+          queue.enqueue_one_P(PSTR("G1 Z10"));
+
+          memset(public_buf_l, 0, sizeof(public_buf_l));
+          sprintf(public_buf_l, "G1 X%d Y%d", X_MIN_POS + 30, Y_MIN_POS + 30);
+          queue.enqueue_one_P(PSTR(public_buf_l));
+          queue.enqueue_one_P(PSTR("G1 Z0"));
+        }
+      }
+      break;
+    case ID_M_POINT2:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        if (queue.length == 0) {
+          if (uiCfg.leveling_first_time) {
+            queue.enqueue_one_P(PSTR("G28"));
+            uiCfg.leveling_first_time = 0;
+          }
+
+          queue.enqueue_one_P(PSTR("G1 Z10"));
+
+          memset(public_buf_l, 0, sizeof(public_buf_l));
+          sprintf(public_buf_l, "G1 X%d Y%d", X_MAX_POS - 30, Y_MIN_POS + 30);
+          queue.enqueue_one_P(PSTR(public_buf_l));
+          queue.enqueue_one_P(PSTR("G1 Z0"));
+        }
+      }
+      break;
+    case ID_M_POINT3:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        if (queue.length == 0) {
+          if (uiCfg.leveling_first_time) {
+            queue.enqueue_one_P(PSTR("G28"));
+            uiCfg.leveling_first_time = 0;
+          }
+
+          queue.enqueue_one_P(PSTR("G1 Z10"));
+
+          memset(public_buf_l, 0, sizeof(public_buf_l));
+          sprintf(public_buf_l, "G1 X%d Y%d", X_MAX_POS - 30, Y_MAX_POS - 30);
+          queue.enqueue_one_P(PSTR(public_buf_l));
+          queue.enqueue_one_P(PSTR("G1 Z0"));
+        }
+      }
+
+      break;
+    case ID_M_POINT4:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        if (queue.length == 0) {
+          if (uiCfg.leveling_first_time) {
+            queue.enqueue_one_P(PSTR("G28"));
+            uiCfg.leveling_first_time = 0;
+          }
+
+          queue.enqueue_one_P(PSTR("G1 Z10"));
+
+          memset(public_buf_l, 0, sizeof(public_buf_l));
+          sprintf(public_buf_l, "G1 X%d Y%d", X_MIN_POS + 30, Y_MAX_POS - 30);
+          queue.enqueue_one_P(PSTR(public_buf_l));
+          queue.enqueue_one_P(PSTR("G1 Z0"));
+        }
+      }
+      break;
+    case ID_M_POINT5:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        if (queue.length == 0) {
+          if (uiCfg.leveling_first_time) {
+            queue.enqueue_one_P(PSTR("G28"));
+            uiCfg.leveling_first_time = 0;
+          }
+
+          queue.enqueue_one_P(PSTR("G1 Z10"));
+
+          memset(public_buf_l, 0, sizeof(public_buf_l));
+          sprintf(public_buf_l, "G1 X%d Y%d", X_BED_SIZE / 2, Y_BED_SIZE / 2);
+          queue.enqueue_one_P(PSTR(public_buf_l));
+          queue.enqueue_one_P(PSTR("G1 Z0"));
+        }
+      }
+
+      break;
+    case ID_MANUAL_RETURN:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        lv_clear_manualLevel();
+        lv_draw_tool();
+      }
+      break;
+
+  }
+}
+
+
+void lv_draw_manualLevel(void) {
+  lv_obj_t *buttonPoint1, *buttonPoint2, *buttonPoint3, *buttonPoint4, *buttonPoint5;
+  lv_obj_t *buttonBack;
+
+  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != LEVELING_UI) {
+    disp_state_stack._disp_index++;
+    disp_state_stack._disp_state[disp_state_stack._disp_index] = LEVELING_UI;
+  }
+  disp_state = LEVELING_UI;
+
+  scr = lv_obj_create(NULL, NULL);
+
+  //static lv_style_t tool_style;
+
+  lv_obj_set_style(scr, &tft_style_scr);
+  lv_scr_load(scr);
+  lv_obj_clean(scr);
+
+  lv_obj_t * title = lv_label_create(scr, NULL);
+  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
+  lv_label_set_text(title, creat_title_text());
+
+  lv_refr_now(lv_refr_get_disp_refreshing());
+
+  LV_IMG_DECLARE(bmp_pic);
+
+  /*Create an Image button*/
+  buttonPoint1 = lv_imgbtn_create(scr, NULL);
+  buttonPoint2 = lv_imgbtn_create(scr, NULL);
+  buttonPoint3 = lv_imgbtn_create(scr, NULL);
+  buttonPoint4 = lv_imgbtn_create(scr, NULL);
+  buttonPoint5 = lv_imgbtn_create(scr, NULL);
+  buttonBack = lv_imgbtn_create(scr, NULL);
+
+  lv_obj_set_event_cb_mks(buttonPoint1, event_handler, ID_M_POINT1, "bmp_Leveling1.bin", 0);
+  lv_imgbtn_set_src(buttonPoint1, LV_BTN_STATE_REL, &bmp_pic);
+  lv_imgbtn_set_src(buttonPoint1, LV_BTN_STATE_PR, &bmp_pic);
+  lv_imgbtn_set_style(buttonPoint1, LV_BTN_STATE_PR, &tft_style_lable_pre);
+  lv_imgbtn_set_style(buttonPoint1, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  lv_obj_clear_protect(buttonPoint1, LV_PROTECT_FOLLOW);
+  #if 1
+    lv_obj_set_event_cb_mks(buttonPoint2, event_handler, ID_M_POINT2, "bmp_Leveling2.bin", 0);
+    lv_imgbtn_set_src(buttonPoint2, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonPoint2, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonPoint2, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonPoint2, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonPoint3, event_handler, ID_M_POINT3, "bmp_Leveling3.bin", 0);
+    lv_imgbtn_set_src(buttonPoint3, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonPoint3, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonPoint3, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonPoint3, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonPoint4, event_handler, ID_M_POINT4, "bmp_Leveling4.bin", 0);
+    lv_imgbtn_set_src(buttonPoint4, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonPoint4, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonPoint4, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonPoint4, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonPoint5, event_handler, ID_M_POINT5, "bmp_Leveling5.bin", 0);
+    lv_imgbtn_set_src(buttonPoint5, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonPoint5, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonPoint5, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonPoint5, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_MANUAL_RETURN, "bmp_Return.bin", 0);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  #endif
+
+  lv_obj_set_pos(buttonPoint1, INTERVAL_V, titleHeight);
+  lv_obj_set_pos(buttonPoint2, BTN_X_PIXEL + INTERVAL_V * 2, titleHeight);
+  lv_obj_set_pos(buttonPoint3, BTN_X_PIXEL * 2 + INTERVAL_V * 3, titleHeight);
+  lv_obj_set_pos(buttonPoint4, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
+  lv_obj_set_pos(buttonPoint5, INTERVAL_V,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+
+  /*Create a label on the Image button*/
+  lv_btn_set_layout(buttonPoint1, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonPoint2, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonPoint3, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonPoint4, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonPoint5, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
+
+  lv_obj_t * label_Point1 = lv_label_create(buttonPoint1, NULL);
+  lv_obj_t * label_Point2 = lv_label_create(buttonPoint2, NULL);
+  lv_obj_t * label_Point3 = lv_label_create(buttonPoint3, NULL);
+  lv_obj_t * label_Point4 = lv_label_create(buttonPoint4, NULL);
+  lv_obj_t * label_Point5 = lv_label_create(buttonPoint5, NULL);
+  lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
+
+
+  if (gCfgItems.multiple_language != 0) {
+    lv_label_set_text(label_Point1, leveling_menu.position1);
+    lv_obj_align(label_Point1, buttonPoint1, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_Point2, leveling_menu.position2);
+    lv_obj_align(label_Point2, buttonPoint2, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_Point3, leveling_menu.position3);
+    lv_obj_align(label_Point3, buttonPoint3, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_Point4, leveling_menu.position4);
+    lv_obj_align(label_Point4, buttonPoint4, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_Point5, leveling_menu.position5);
+    lv_obj_align(label_Point5, buttonPoint5, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_Back, common_menu.text_back);
+    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+  }
+}
+
+void lv_clear_manualLevel() { lv_obj_del(scr); }
+
+#endif // TFT_LITTLE_VGL_UI
