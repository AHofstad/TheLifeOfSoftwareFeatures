commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
deleted file mode 100644
index b4ebc97db3..0000000000
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ /dev/null
@@ -1,571 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-
-/**
- * draw_dialog.cpp
- */
-
-#include "../../../../inc/MarlinConfigPre.h"
-
-#if HAS_TFT_LVGL_UI
-
-#include "draw_ui.h"
-#include <lv_conf.h>
-
-#include "../../../../sd/cardreader.h"
-#include "../../../../gcode/queue.h"
-#include "../../../../module/temperature.h"
-#include "../../../../module/planner.h"
-#include "../../../../gcode/gcode.h"
-#include "../../../../inc/MarlinConfig.h"
-
-#if ENABLED(EEPROM_SETTINGS)
-  #include "../../../../module/settings.h"
-#endif
-
-#if ENABLED(POWER_LOSS_RECOVERY)
-  #include "../../../../feature/powerloss.h"
-#endif
-
-#if ENABLED(PARK_HEAD_ON_PAUSE)
-  #include "../../../../feature/pause.h"
-#endif
-
-#if ENABLED(TOUCH_SCREEN_CALIBRATION)
-  #include "../../../tft_io/touch_calibration.h"
-  #include "draw_touch_calibration.h"
-#endif
-
-extern lv_group_t *g;
-static lv_obj_t *scr, *tempText1, *filament_bar;
-
-extern uint8_t sel_id;
-extern bool once_flag, gcode_preview_over;
-extern int upload_result;
-extern uint32_t upload_time;
-extern uint32_t upload_size;
-extern bool temps_update_flag;
-
-//#define CANCEL_ON_RIGHT   // Put 'Cancel' on the right (as it was before)
-
-#define BTN_OK_X      TERN(CANCEL_ON_RIGHT, 100, 280)
-#define BTN_CANCEL_X  TERN(CANCEL_ON_RIGHT, 280, 100)
-#define BTN_OK_Y      180
-#define BTN_CANCEL_Y  180
-
-static void btn_ok_event_cb(lv_obj_t *btn, lv_event_t event) {
-  if (event != LV_EVENT_RELEASED) return;
-  if (DIALOG_IS(TYPE_PRINT_FILE)) {
-    #if HAS_GCODE_PREVIEW
-      preview_gcode_prehandle(list_file.file_name[sel_id]);
-    #endif
-    reset_print_time();
-    start_print_time();
-
-    uiCfg.print_state = WORKING;
-    lv_clear_dialog();
-    lv_draw_printing();
-
-    #if ENABLED(SDSUPPORT)
-      if (!gcode_preview_over) {
-        char *cur_name;
-        cur_name = strrchr(list_file.file_name[sel_id], '/');
-
-        SdFile file, *curDir;
-        card.endFilePrint();
-        const char * const fname = card.diveToFile(true, curDir, cur_name);
-        if (!fname) return;
-        if (file.open(curDir, fname, O_READ)) {
-          gCfgItems.curFilesize = file.fileSize();
-          file.close();
-          update_spi_flash();
-        }
-        card.openFileRead(cur_name);
-        if (card.isFileOpen()) {
-          feedrate_percentage = 100;
-          planner.flow_percentage[0] = 100;
-          planner.e_factor[0]        = planner.flow_percentage[0] * 0.01f;
-          #if HAS_MULTI_EXTRUDER
-            planner.flow_percentage[1] = 100;
-            planner.e_factor[1]        = planner.flow_percentage[1] * 0.01f;
-          #endif
-          card.startFileprint();
-          #if ENABLED(POWER_LOSS_RECOVERY)
-            recovery.prepare();
-          #endif
-          once_flag = false;
-        }
-      }
-    #endif
-  }
-  else if (DIALOG_IS(TYPE_STOP)) {
-    wait_for_heatup = false;
-    stop_print_time();
-    lv_clear_dialog();
-    lv_draw_ready_print();
-
-    #if ENABLED(SDSUPPORT)
-      uiCfg.print_state           = IDLE;
-      card.flag.abort_sd_printing = true;
-    #endif
-  }
-  else if (DIALOG_IS(TYPE_FINISH_PRINT)) {
-    clear_cur_ui();
-    lv_draw_ready_print();
-  }
-  #if ENABLED(ADVANCED_PAUSE_FEATURE)
-    else if (DIALOG_IS(PAUSE_MESSAGE_WAITING, PAUSE_MESSAGE_INSERT, PAUSE_MESSAGE_HEAT))
-      wait_for_user = false;
-    else if (DIALOG_IS(PAUSE_MESSAGE_OPTION))
-      pause_menu_response = PAUSE_RESPONSE_EXTRUDE_MORE;
-    else if (DIALOG_IS(PAUSE_MESSAGE_RESUME)) {
-      clear_cur_ui();
-      draw_return_ui();
-    }
-  #endif
-  else if (DIALOG_IS(STORE_EEPROM_TIPS)) {
-    TERN_(EEPROM_SETTINGS, (void)settings.save());
-    clear_cur_ui();
-    draw_return_ui();
-  }
-  else if (DIALOG_IS(READ_EEPROM_TIPS)) {
-    TERN_(EEPROM_SETTINGS, (void)settings.load());
-    clear_cur_ui();
-    draw_return_ui();
-  }
-  else if (DIALOG_IS(REVERT_EEPROM_TIPS)) {
-    TERN_(EEPROM_SETTINGS, (void)settings.reset());
-    clear_cur_ui();
-    #if ENABLED(TOUCH_SCREEN_CALIBRATION)
-      const bool do_draw_cal = touch_calibration.need_calibration();
-      if (do_draw_cal) {
-        disp_state_stack._disp_index--; // We are asynchronous from the dialog, so let's remove the dialog from the stack
-        lv_draw_touch_calibration_screen();
-      }
-    #else
-      constexpr bool do_draw_cal = false;
-    #endif
-    if (!do_draw_cal) draw_return_ui();
-  }
-  else if (DIALOG_IS(WIFI_CONFIG_TIPS)) {
-    uiCfg.configWifi = true;
-    clear_cur_ui();
-    draw_return_ui();
-  }
-  else if (DIALOG_IS(TYPE_FILAMENT_HEAT_LOAD_COMPLETED))
-    uiCfg.filament_heat_completed_load = true;
-  else if (DIALOG_IS(TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED))
-    uiCfg.filament_heat_completed_unload = true;
-  else if (DIALOG_IS(TYPE_FILAMENT_LOAD_COMPLETED, TYPE_FILAMENT_UNLOAD_COMPLETED)) {
-    clear_cur_ui();
-    draw_return_ui();
-  }
-  #if ENABLED(MKS_WIFI_MODULE)
-    else if (DIALOG_IS(TYPE_UNBIND)) {
-      cloud_unbind();
-      clear_cur_ui();
-      draw_return_ui();
-    }
-  #endif
-  else {
-    clear_cur_ui();
-    draw_return_ui();
-  }
-}
-
-static void btn_cancel_event_cb(lv_obj_t *btn, lv_event_t event) {
-  if (event != LV_EVENT_RELEASED) return;
-  if (DIALOG_IS(PAUSE_MESSAGE_OPTION)) {
-    TERN_(ADVANCED_PAUSE_FEATURE, pause_menu_response = PAUSE_RESPONSE_RESUME_PRINT);
-  }
-  else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT, TYPE_FILAMENT_HEAT_LOAD_COMPLETED, TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED)) {
-    thermalManager.setTargetHotend(uiCfg.hotendTargetTempBak, uiCfg.extruderIndex);
-    clear_cur_ui();
-    draw_return_ui();
-  }
-  else if (DIALOG_IS(TYPE_FILAMENT_LOADING, TYPE_FILAMENT_UNLOADING)) {
-    queue.enqueue_one_P(PSTR("M410"));
-    uiCfg.filament_rate                = 0;
-    uiCfg.filament_loading_completed   = false;
-    uiCfg.filament_unloading_completed = false;
-    uiCfg.filament_loading_time_flg    = false;
-    uiCfg.filament_loading_time_cnt    = 0;
-    uiCfg.filament_unloading_time_flg  = false;
-    uiCfg.filament_unloading_time_cnt  = 0;
-    thermalManager.setTargetHotend(uiCfg.hotendTargetTempBak, uiCfg.extruderIndex);
-    clear_cur_ui();
-    draw_return_ui();
-  }
-  else {
-    clear_cur_ui();
-    draw_return_ui();
-  }
-}
-
-void lv_draw_dialog(uint8_t type) {
-  lv_obj_t *btnOk = nullptr, *btnCancel = nullptr;
-  uiCfg.dialogType = type;
-  scr = lv_screen_create(DIALOG_UI);
-
-  lv_obj_t *labelDialog = lv_label_create(scr, "");
-
-  if (DIALOG_IS(TYPE_FINISH_PRINT, PAUSE_MESSAGE_RESUME)) {
-      btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
-      lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
-      lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_WAITING, PAUSE_MESSAGE_INSERT, PAUSE_MESSAGE_HEAT)) {
-    btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
-    lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
-    lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_PAUSING, PAUSE_MESSAGE_CHANGING, PAUSE_MESSAGE_UNLOAD, PAUSE_MESSAGE_LOAD, PAUSE_MESSAGE_PURGE, PAUSE_MESSAGE_RESUME, PAUSE_MESSAGE_HEATING)) {
-    // nothing to do
-  }
-  else if (DIALOG_IS(WIFI_ENABLE_TIPS)) {
-    btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
-    lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
-    lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
-  }
-  else if (DIALOG_IS(TRANSFER_NO_DEVICE)) {
-    btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
-    lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
-    lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
-  }
-  #if ENABLED(MKS_WIFI_MODULE)
-    else if (DIALOG_IS(TYPE_UPLOAD_FILE)) {
-      if (upload_result == 2) {
-        btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
-        lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
-        lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
-      }
-      else if (upload_result == 3) {
-        btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
-        lv_obj_t *labelOk = lv_label_create_empty(btnOk);
-        lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
-      }
-    }
-    else if (DIALOG_IS(TYPE_UPDATE_ESP_FIRMWARE)) {
-      // nothing to do
-    }
-  #endif
-  else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT)) {
-    btnCancel = lv_button_btn_create(scr, BTN_OK_X+90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
-    lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
-    lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
-
-    tempText1 = lv_label_create_empty(scr);
-    filament_sprayer_temp();
-  }
-  else if (DIALOG_IS(TYPE_FILAMENT_LOAD_COMPLETED, TYPE_FILAMENT_UNLOAD_COMPLETED)) {
-    btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
-    lv_obj_t *labelOk = lv_label_create_empty(btnOk);
-    lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
-  }
-  else if (DIALOG_IS(TYPE_FILAMENT_LOADING, TYPE_FILAMENT_UNLOADING)) {
-    btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
-    lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
-    lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
-
-    filament_bar = lv_bar_create(scr, nullptr);
-    lv_obj_set_pos(filament_bar, (TFT_WIDTH-400)/2, ((TFT_HEIGHT - titleHeight)-40)/2);
-    lv_obj_set_size(filament_bar, 400, 25);
-    lv_bar_set_style(filament_bar, LV_BAR_STYLE_INDIC, &lv_bar_style_indic);
-    lv_bar_set_anim_time(filament_bar, 1000);
-    lv_bar_set_value(filament_bar, 0, LV_ANIM_ON);
-  }
-  else {
-    btnOk = lv_button_btn_create(scr, BTN_OK_X, BTN_OK_Y, 100, 50, btn_ok_event_cb);
-    lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
-
-    btnCancel = lv_button_btn_create(scr, BTN_CANCEL_X, BTN_CANCEL_Y, 100, 50, btn_cancel_event_cb);
-    lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);     // Add a label to the button
-
-    if (DIALOG_IS(PAUSE_MESSAGE_OPTION)) {
-      lv_label_set_text(labelOk, pause_msg_menu.purgeMore);        // Set the labels text
-      lv_label_set_text(labelCancel, pause_msg_menu.continuePrint);
-    }
-    else {
-      lv_label_set_text(labelOk, print_file_dialog_menu.confirm);  // Set the labels text
-      lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
-    }
-  }
-  if (DIALOG_IS(TYPE_PRINT_FILE)) {
-    lv_label_set_text(labelDialog, print_file_dialog_menu.print_file);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-
-    lv_obj_t *labelFile = lv_label_create(scr, list_file.long_name[sel_id]);
-    lv_obj_align(labelFile, nullptr, LV_ALIGN_CENTER, 0, -60);
-  }
-  else if (DIALOG_IS(TYPE_STOP)) {
-    lv_label_set_text(labelDialog, print_file_dialog_menu.cancel_print);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(TYPE_FINISH_PRINT)) {
-    lv_label_set_text(labelDialog, print_file_dialog_menu.print_finish);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_PAUSING)) {
-    lv_label_set_text(labelDialog, pause_msg_menu.pausing);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_CHANGING)) {
-    lv_label_set_text(labelDialog, pause_msg_menu.changing);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_UNLOAD)) {
-    lv_label_set_text(labelDialog, pause_msg_menu.unload);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_WAITING)) {
-    lv_label_set_text(labelDialog, pause_msg_menu.waiting);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_INSERT)) {
-    lv_label_set_text(labelDialog, pause_msg_menu.insert);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_LOAD)) {
-    lv_label_set_text(labelDialog, pause_msg_menu.load);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_PURGE)) {
-    lv_label_set_text(labelDialog, pause_msg_menu.purge);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_RESUME)) {
-    lv_label_set_text(labelDialog, pause_msg_menu.resume);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_HEAT)) {
-    lv_label_set_text(labelDialog, pause_msg_menu.heat);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_HEATING)) {
-    lv_label_set_text(labelDialog, pause_msg_menu.heating);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(PAUSE_MESSAGE_OPTION)) {
-    lv_label_set_text(labelDialog, pause_msg_menu.option);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(STORE_EEPROM_TIPS)) {
-    lv_label_set_text(labelDialog, eeprom_menu.storeTips);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(READ_EEPROM_TIPS)) {
-    lv_label_set_text(labelDialog, eeprom_menu.readTips);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(REVERT_EEPROM_TIPS)) {
-    lv_label_set_text(labelDialog, eeprom_menu.revertTips);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(WIFI_CONFIG_TIPS)) {
-    lv_label_set_text(labelDialog, machine_menu.wifiConfigTips);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(WIFI_ENABLE_TIPS)) {
-    lv_label_set_text(labelDialog, print_file_dialog_menu.wifi_enable_tips);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(TRANSFER_NO_DEVICE)) {
-    lv_label_set_text(labelDialog, DIALOG_UPDATE_NO_DEVICE_EN);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  #if ENABLED(MKS_WIFI_MODULE)
-    else if (DIALOG_IS(TYPE_UPLOAD_FILE)) {
-      if (upload_result == 1) {
-        lv_label_set_text(labelDialog, DIALOG_UPLOAD_ING_EN);
-        lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-      }
-      else if (upload_result == 2) {
-        lv_label_set_text(labelDialog, DIALOG_UPLOAD_ERROR_EN);
-        lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-      }
-      else if (upload_result == 3) {
-        char buf[200];
-        int _index = 0;
-
-        strcpy(buf, DIALOG_UPLOAD_FINISH_EN);
-        _index = strlen(buf);
-        buf[_index] = '\n';
-        _index++;
-        strcat(buf, DIALOG_UPLOAD_SIZE_EN);
-
-        _index = strlen(buf);
-        buf[_index] = ':';
-        _index++;
-        sprintf(&buf[_index], " %d KBytes\n", (int)(upload_size / 1024));
-
-        strcat(buf, DIALOG_UPLOAD_TIME_EN);
-        _index = strlen(buf);
-        buf[_index] = ':';
-        _index++;
-        sprintf(&buf[_index], " %d s\n", (int)upload_time);
-
-        strcat(buf, DIALOG_UPLOAD_SPEED_EN);
-        _index = strlen(buf);
-        buf[_index] = ':';
-        _index++;
-        sprintf(&buf[_index], " %d KBytes/s\n", (int)(upload_size / upload_time / 1024));
-
-        lv_label_set_text(labelDialog, buf);
-        lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-      }
-    }
-    else if (DIALOG_IS(TYPE_UPDATE_ESP_FIRMWARE)) {
-      lv_label_set_text(labelDialog, DIALOG_UPDATE_WIFI_FIRMWARE_EN);
-      lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
-    }
-  #endif // MKS_WIFI_MODULE
-  else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT)) {
-    lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(TYPE_FILAMENT_HEAT_LOAD_COMPLETED)) {
-    lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat_confirm);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(TYPE_FILAMENT_UNLOAD_HEAT)) {
-    lv_label_set_text(labelDialog, filament_menu.filament_dialog_unload_heat);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED)) {
-    lv_label_set_text(labelDialog, filament_menu.filament_dialog_unload_heat_confirm);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(TYPE_FILAMENT_LOAD_COMPLETED)) {
-    lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_completed);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(TYPE_FILAMENT_UNLOAD_COMPLETED)) {
-    lv_label_set_text(labelDialog, filament_menu.filament_dialog_unload_completed);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
-  }
-  else if (DIALOG_IS(TYPE_FILAMENT_LOADING)) {
-    lv_label_set_text(labelDialog, filament_menu.filament_dialog_loading);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -70);
-  }
-  else if (DIALOG_IS(TYPE_FILAMENT_UNLOADING)) {
-    lv_label_set_text(labelDialog, filament_menu.filament_dialog_unloading);
-    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -70);
-  }
-  #if ENABLED(MKS_WIFI_MODULE)
-    else if (DIALOG_IS(TYPE_UNBIND)) {
-      lv_label_set_text(labelDialog, common_menu.unbind_printer_tips);
-      lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -70);
-    }
-  #endif
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) {
-      if (btnOk) lv_group_add_obj(g, btnOk);
-      if (btnCancel) lv_group_add_obj(g, btnCancel);
-    }
-  #endif
-}
-
-void filament_sprayer_temp() {
-  char buf[20] = {0};
-  sprintf(buf, preheat_menu.value_state, thermalManager.wholeDegHotend(uiCfg.extruderIndex), thermalManager.degTargetHotend(uiCfg.extruderIndex));
-
-  strcpy(public_buf_l, uiCfg.extruderIndex < 1 ? extrude_menu.ext1 : extrude_menu.ext2);
-  strcat_P(public_buf_l, PSTR(": "));
-  strcat(public_buf_l, buf);
-  lv_label_set_text(tempText1, public_buf_l);
-  lv_obj_align(tempText1, nullptr, LV_ALIGN_CENTER, 0, -50);
-}
-
-void filament_dialog_handle() {
-  if (temps_update_flag && (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT))) {
-    filament_sprayer_temp();
-    temps_update_flag = false;
-  }
-  if (uiCfg.filament_heat_completed_load) {
-    uiCfg.filament_heat_completed_load = false;
-    lv_clear_dialog();
-    lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOADING);
-    planner.synchronize();
-    uiCfg.filament_loading_time_flg = true;
-    uiCfg.filament_loading_time_cnt = 0;
-    sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E%d F%d\nG90"), uiCfg.extruderIndex, gCfgItems.filamentchange_load_length, gCfgItems.filamentchange_load_speed);
-    queue.inject(public_buf_m);
-  }
-  if (uiCfg.filament_heat_completed_unload) {
-    uiCfg.filament_heat_completed_unload = false;
-    lv_clear_dialog();
-    lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOADING);
-    planner.synchronize();
-    uiCfg.filament_unloading_time_flg = true;
-    uiCfg.filament_unloading_time_cnt = 0;
-    sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E-%d F%d\nG90"), uiCfg.extruderIndex, gCfgItems.filamentchange_unload_length, gCfgItems.filamentchange_unload_speed);
-    queue.inject(public_buf_m);
-  }
-
-  if (uiCfg.filament_load_heat_flg) {
-    const celsius_t diff = thermalManager.wholeDegHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temp;
-    if (abs(diff) < 2 || diff > 0) {
-      uiCfg.filament_load_heat_flg = false;
-      lv_clear_dialog();
-      lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED);
-    }
-  }
-
-  if (uiCfg.filament_loading_completed) {
-    uiCfg.filament_rate = 0;
-    uiCfg.filament_loading_completed = false;
-    lv_clear_dialog();
-    lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOAD_COMPLETED);
-  }
-
-  if (uiCfg.filament_unload_heat_flg) {
-    const celsius_t diff = thermalManager.wholeDegHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temp;
-    if (abs(diff) < 2 || diff > 0) {
-      uiCfg.filament_unload_heat_flg = false;
-      lv_clear_dialog();
-      lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED);
-    }
-  }
-
-  if (uiCfg.filament_unloading_completed) {
-    uiCfg.filament_rate = 0;
-    uiCfg.filament_unloading_completed = false;
-    lv_clear_dialog();
-    lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOAD_COMPLETED);
-  }
-
-  if (DIALOG_IS(TYPE_FILAMENT_LOADING, TYPE_FILAMENT_UNLOADING))
-    lv_filament_setbar();
-}
-
-void lv_filament_setbar() {
-  lv_bar_set_value(filament_bar, uiCfg.filament_rate, LV_ANIM_ON);
-}
-
-void lv_clear_dialog() {
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
-  #endif
-  lv_obj_del(scr);
-}
-
-#endif // HAS_TFT_LVGL_UI

commit c4620bb5285438e41fa4c39229aa2a39859877ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 23 20:19:23 2021 -0500

    Add whole-degree accessors, simplify some temperature-related features (#21685)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index c4056f392a..b4ebc97db3 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -479,21 +479,21 @@ void lv_draw_dialog(uint8_t type) {
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
       if (btnOk) lv_group_add_obj(g, btnOk);
       if (btnCancel) lv_group_add_obj(g, btnCancel);
     }
   #endif
 }
 
 void filament_sprayer_temp() {
   char buf[20] = {0};
-  sprintf(buf, preheat_menu.value_state, thermalManager.degHotend(uiCfg.extruderIndex), thermalManager.degTargetHotend(uiCfg.extruderIndex));
+  sprintf(buf, preheat_menu.value_state, thermalManager.wholeDegHotend(uiCfg.extruderIndex), thermalManager.degTargetHotend(uiCfg.extruderIndex));
 
   strcpy(public_buf_l, uiCfg.extruderIndex < 1 ? extrude_menu.ext1 : extrude_menu.ext2);
   strcat_P(public_buf_l, PSTR(": "));
   strcat(public_buf_l, buf);
   lv_label_set_text(tempText1, public_buf_l);
   lv_obj_align(tempText1, nullptr, LV_ALIGN_CENTER, 0, -50);
 }
 
 void filament_dialog_handle() {
   if (temps_update_flag && (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT))) {
@@ -515,37 +515,37 @@ void filament_dialog_handle() {
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOADING);
     planner.synchronize();
     uiCfg.filament_unloading_time_flg = true;
     uiCfg.filament_unloading_time_cnt = 0;
     sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E-%d F%d\nG90"), uiCfg.extruderIndex, gCfgItems.filamentchange_unload_length, gCfgItems.filamentchange_unload_speed);
     queue.inject(public_buf_m);
   }
 
   if (uiCfg.filament_load_heat_flg) {
-    const celsius_t diff = thermalManager.degHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temp;
+    const celsius_t diff = thermalManager.wholeDegHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temp;
     if (abs(diff) < 2 || diff > 0) {
       uiCfg.filament_load_heat_flg = false;
       lv_clear_dialog();
       lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED);
     }
   }
 
   if (uiCfg.filament_loading_completed) {
     uiCfg.filament_rate = 0;
     uiCfg.filament_loading_completed = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOAD_COMPLETED);
   }
 
   if (uiCfg.filament_unload_heat_flg) {
-    const celsius_t diff = thermalManager.degHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temp;
+    const celsius_t diff = thermalManager.wholeDegHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temp;
     if (abs(diff) < 2 || diff > 0) {
       uiCfg.filament_unload_heat_flg = false;
       lv_clear_dialog();
       lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED);
     }
   }
 
   if (uiCfg.filament_unloading_completed) {
     uiCfg.filament_rate = 0;
     uiCfg.filament_unloading_completed = false;

commit a335cf2edf66db08ab12d3800784b58ad992f6a9
Author: Malderin <52313714+Malderin@users.noreply.github.com>
Date:   Mon Mar 29 11:19:38 2021 +0300

    Fix MKS LVGL UI Main screen / print buttons (#21468)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index c4ae6e221d..c4056f392a 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -479,21 +479,21 @@ void lv_draw_dialog(uint8_t type) {
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
       if (btnOk) lv_group_add_obj(g, btnOk);
       if (btnCancel) lv_group_add_obj(g, btnCancel);
     }
   #endif
 }
 
 void filament_sprayer_temp() {
   char buf[20] = {0};
-  sprintf(buf, preheat_menu.value_state, (int)thermalManager.degHotend(uiCfg.extruderIndex), (int)thermalManager.degTargetHotend(uiCfg.extruderIndex));
+  sprintf(buf, preheat_menu.value_state, thermalManager.degHotend(uiCfg.extruderIndex), thermalManager.degTargetHotend(uiCfg.extruderIndex));
 
   strcpy(public_buf_l, uiCfg.extruderIndex < 1 ? extrude_menu.ext1 : extrude_menu.ext2);
   strcat_P(public_buf_l, PSTR(": "));
   strcat(public_buf_l, buf);
   lv_label_set_text(tempText1, public_buf_l);
   lv_obj_align(tempText1, nullptr, LV_ALIGN_CENTER, 0, -50);
 }
 
 void filament_dialog_handle() {
   if (temps_update_flag && (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT))) {

commit 532df198da6a9cadb441a1993b4b482e69e317ce
Author: Leoric <leoric@outlook.com>
Date:   Fri Mar 26 23:41:55 2021 +0300

    MKS UI: Monitor state when idle (#21452)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 3fed4cc385..c4ae6e221d 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -58,20 +58,27 @@
 extern lv_group_t *g;
 static lv_obj_t *scr, *tempText1, *filament_bar;
 
 extern uint8_t sel_id;
 extern bool once_flag, gcode_preview_over;
 extern int upload_result;
 extern uint32_t upload_time;
 extern uint32_t upload_size;
 extern bool temps_update_flag;
 
+//#define CANCEL_ON_RIGHT   // Put 'Cancel' on the right (as it was before)
+
+#define BTN_OK_X      TERN(CANCEL_ON_RIGHT, 100, 280)
+#define BTN_CANCEL_X  TERN(CANCEL_ON_RIGHT, 280, 100)
+#define BTN_OK_Y      180
+#define BTN_CANCEL_Y  180
+
 static void btn_ok_event_cb(lv_obj_t *btn, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
   if (DIALOG_IS(TYPE_PRINT_FILE)) {
     #if HAS_GCODE_PREVIEW
       preview_gcode_prehandle(list_file.file_name[sel_id]);
     #endif
     reset_print_time();
     start_print_time();
 
     uiCfg.print_state = WORKING;

commit e5ff55a1be7646b6159e6dedac50bfbe57e6dfa0
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 24 04:11:43 2021 -0500

    Add typedef celsius_t (#21374)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 767d9c6738..3fed4cc385 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -508,37 +508,37 @@ void filament_dialog_handle() {
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOADING);
     planner.synchronize();
     uiCfg.filament_unloading_time_flg = true;
     uiCfg.filament_unloading_time_cnt = 0;
     sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E-%d F%d\nG90"), uiCfg.extruderIndex, gCfgItems.filamentchange_unload_length, gCfgItems.filamentchange_unload_speed);
     queue.inject(public_buf_m);
   }
 
   if (uiCfg.filament_load_heat_flg) {
-    const int16_t diff = thermalManager.degHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temp;
+    const celsius_t diff = thermalManager.degHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temp;
     if (abs(diff) < 2 || diff > 0) {
       uiCfg.filament_load_heat_flg = false;
       lv_clear_dialog();
       lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED);
     }
   }
 
   if (uiCfg.filament_loading_completed) {
     uiCfg.filament_rate = 0;
     uiCfg.filament_loading_completed = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOAD_COMPLETED);
   }
 
   if (uiCfg.filament_unload_heat_flg) {
-    const int16_t diff = thermalManager.degHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temp;
+    const celsius_t diff = thermalManager.degHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temp;
     if (abs(diff) < 2 || diff > 0) {
       uiCfg.filament_unload_heat_flg = false;
       lv_clear_dialog();
       lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED);
     }
   }
 
   if (uiCfg.filament_unloading_completed) {
     uiCfg.filament_rate = 0;
     uiCfg.filament_unloading_completed = false;

commit 58f0330d3f51115dbc8cda792105fe66d4c61241
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Mar 19 16:41:47 2021 -0500

    MKS / E3V2 LCD code cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 5d02f79fd1..767d9c6738 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -507,42 +507,43 @@ void filament_dialog_handle() {
     uiCfg.filament_heat_completed_unload = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOADING);
     planner.synchronize();
     uiCfg.filament_unloading_time_flg = true;
     uiCfg.filament_unloading_time_cnt = 0;
     sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E-%d F%d\nG90"), uiCfg.extruderIndex, gCfgItems.filamentchange_unload_length, gCfgItems.filamentchange_unload_speed);
     queue.inject(public_buf_m);
   }
 
-  if ( ((abs((int)((int)thermalManager.degHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temper)) <= 1)
-        || ((int)thermalManager.degHotend(uiCfg.extruderIndex) > gCfgItems.filament_limit_temper))
-    && uiCfg.filament_load_heat_flg
-  ) {
-    uiCfg.filament_load_heat_flg = false;
-    lv_clear_dialog();
-    lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED);
+  if (uiCfg.filament_load_heat_flg) {
+    const int16_t diff = thermalManager.degHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temp;
+    if (abs(diff) < 2 || diff > 0) {
+      uiCfg.filament_load_heat_flg = false;
+      lv_clear_dialog();
+      lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED);
+    }
   }
 
   if (uiCfg.filament_loading_completed) {
     uiCfg.filament_rate = 0;
     uiCfg.filament_loading_completed = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOAD_COMPLETED);
   }
-  if (((abs((int)((int)thermalManager.degHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temper)) <= 1)
-     || ((int)thermalManager.degHotend(uiCfg.extruderIndex) > gCfgItems.filament_limit_temper))
-     && uiCfg.filament_unload_heat_flg
-  ) {
-    uiCfg.filament_unload_heat_flg = false;
-    lv_clear_dialog();
-    lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED);
+
+  if (uiCfg.filament_unload_heat_flg) {
+    const int16_t diff = thermalManager.degHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temp;
+    if (abs(diff) < 2 || diff > 0) {
+      uiCfg.filament_unload_heat_flg = false;
+      lv_clear_dialog();
+      lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED);
+    }
   }
 
   if (uiCfg.filament_unloading_completed) {
     uiCfg.filament_rate = 0;
     uiCfg.filament_unloading_completed = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOAD_COMPLETED);
   }
 
   if (DIALOG_IS(TYPE_FILAMENT_LOADING, TYPE_FILAMENT_UNLOADING))

commit 72cc5a49e6fdcf7246b6bded66a4b4fc043054a3
Author: Sola <42537573+solawc@users.noreply.github.com>
Date:   Sat Mar 6 23:04:05 2021 +0800

    MKS H43 fixup (#21267)
    
    Co-authored-by: makerbase <4164049@qq.com>
    Co-authored-by: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 6130e92224..5d02f79fd1 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -184,34 +184,34 @@ static void btn_ok_event_cb(lv_obj_t *btn, lv_event_t event) {
     draw_return_ui();
   }
 }
 
 static void btn_cancel_event_cb(lv_obj_t *btn, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
   if (DIALOG_IS(PAUSE_MESSAGE_OPTION)) {
     TERN_(ADVANCED_PAUSE_FEATURE, pause_menu_response = PAUSE_RESPONSE_RESUME_PRINT);
   }
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT, TYPE_FILAMENT_HEAT_LOAD_COMPLETED, TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED)) {
-    thermalManager.temp_hotend[uiCfg.curSprayerChoose].target= uiCfg.desireSprayerTempBak;
+    thermalManager.setTargetHotend(uiCfg.hotendTargetTempBak, uiCfg.extruderIndex);
     clear_cur_ui();
     draw_return_ui();
   }
   else if (DIALOG_IS(TYPE_FILAMENT_LOADING, TYPE_FILAMENT_UNLOADING)) {
     queue.enqueue_one_P(PSTR("M410"));
     uiCfg.filament_rate                = 0;
     uiCfg.filament_loading_completed   = false;
     uiCfg.filament_unloading_completed = false;
     uiCfg.filament_loading_time_flg    = false;
     uiCfg.filament_loading_time_cnt    = 0;
     uiCfg.filament_unloading_time_flg  = false;
     uiCfg.filament_unloading_time_cnt  = 0;
-    thermalManager.temp_hotend[uiCfg.curSprayerChoose].target = uiCfg.desireSprayerTempBak;
+    thermalManager.setTargetHotend(uiCfg.hotendTargetTempBak, uiCfg.extruderIndex);
     clear_cur_ui();
     draw_return_ui();
   }
   else {
     clear_cur_ui();
     draw_return_ui();
   }
 }
 
 void lv_draw_dialog(uint8_t type) {
@@ -472,72 +472,72 @@ void lv_draw_dialog(uint8_t type) {
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
       if (btnOk) lv_group_add_obj(g, btnOk);
       if (btnCancel) lv_group_add_obj(g, btnCancel);
     }
   #endif
 }
 
 void filament_sprayer_temp() {
   char buf[20] = {0};
-  sprintf(buf, preheat_menu.value_state, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].target);
+  sprintf(buf, preheat_menu.value_state, (int)thermalManager.degHotend(uiCfg.extruderIndex), (int)thermalManager.degTargetHotend(uiCfg.extruderIndex));
 
-  strcpy(public_buf_l, uiCfg.curSprayerChoose < 1 ? extrude_menu.ext1 : extrude_menu.ext2);
+  strcpy(public_buf_l, uiCfg.extruderIndex < 1 ? extrude_menu.ext1 : extrude_menu.ext2);
   strcat_P(public_buf_l, PSTR(": "));
   strcat(public_buf_l, buf);
   lv_label_set_text(tempText1, public_buf_l);
   lv_obj_align(tempText1, nullptr, LV_ALIGN_CENTER, 0, -50);
 }
 
 void filament_dialog_handle() {
   if (temps_update_flag && (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT))) {
     filament_sprayer_temp();
     temps_update_flag = false;
   }
   if (uiCfg.filament_heat_completed_load) {
     uiCfg.filament_heat_completed_load = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOADING);
     planner.synchronize();
     uiCfg.filament_loading_time_flg = true;
     uiCfg.filament_loading_time_cnt = 0;
-    sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E%d F%d\nG90"), uiCfg.curSprayerChoose, gCfgItems.filamentchange_load_length, gCfgItems.filamentchange_load_speed);
+    sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E%d F%d\nG90"), uiCfg.extruderIndex, gCfgItems.filamentchange_load_length, gCfgItems.filamentchange_load_speed);
     queue.inject(public_buf_m);
   }
   if (uiCfg.filament_heat_completed_unload) {
     uiCfg.filament_heat_completed_unload = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOADING);
     planner.synchronize();
     uiCfg.filament_unloading_time_flg = true;
     uiCfg.filament_unloading_time_cnt = 0;
-    sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E-%d F%d\nG90"), uiCfg.curSprayerChoose, gCfgItems.filamentchange_unload_length, gCfgItems.filamentchange_unload_speed);
+    sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E-%d F%d\nG90"), uiCfg.extruderIndex, gCfgItems.filamentchange_unload_length, gCfgItems.filamentchange_unload_speed);
     queue.inject(public_buf_m);
   }
 
-  if (((abs((int)((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius - gCfgItems.filament_limit_temper)) <= 1)
-    || ((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius > gCfgItems.filament_limit_temper))
-    && (uiCfg.filament_load_heat_flg)
+  if ( ((abs((int)((int)thermalManager.degHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temper)) <= 1)
+        || ((int)thermalManager.degHotend(uiCfg.extruderIndex) > gCfgItems.filament_limit_temper))
+    && uiCfg.filament_load_heat_flg
   ) {
     uiCfg.filament_load_heat_flg = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED);
   }
 
   if (uiCfg.filament_loading_completed) {
     uiCfg.filament_rate = 0;
     uiCfg.filament_loading_completed = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOAD_COMPLETED);
   }
-  if (((abs((int)((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius - gCfgItems.filament_limit_temper)) <= 1)
-     || ((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius > gCfgItems.filament_limit_temper))
+  if (((abs((int)((int)thermalManager.degHotend(uiCfg.extruderIndex) - gCfgItems.filament_limit_temper)) <= 1)
+     || ((int)thermalManager.degHotend(uiCfg.extruderIndex) > gCfgItems.filament_limit_temper))
      && uiCfg.filament_unload_heat_flg
   ) {
     uiCfg.filament_unload_heat_flg = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED);
   }
 
   if (uiCfg.filament_unloading_completed) {
     uiCfg.filament_rate = 0;
     uiCfg.filament_unloading_completed = false;

commit d0f953218f928f8b79d42818d8c93a8903b551b2
Author: Rockman18 <rockman18.spam@gmail.com>
Date:   Tue Jan 19 23:26:25 2021 +0100

    Fix, consolidate PSTR aliases (#20812)
    
    Co-authored-by: Jason Smith <jason.inet@gmail.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 95077d09f2..6130e92224 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -250,21 +250,21 @@ void lv_draw_dialog(uint8_t type) {
         btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
         lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
         lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
       }
       else if (upload_result == 3) {
         btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
         lv_obj_t *labelOk = lv_label_create_empty(btnOk);
         lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
       }
     }
-    else if (DIALOG_IS(TYPE_UPDATE_ESP_FIRMARE)) {
+    else if (DIALOG_IS(TYPE_UPDATE_ESP_FIRMWARE)) {
       // nothing to do
     }
   #endif
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT)) {
     btnCancel = lv_button_btn_create(scr, BTN_OK_X+90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
     lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
 
     tempText1 = lv_label_create_empty(scr);
     filament_sprayer_temp();
@@ -419,21 +419,21 @@ void lv_draw_dialog(uint8_t type) {
         strcat(buf, DIALOG_UPLOAD_SPEED_EN);
         _index = strlen(buf);
         buf[_index] = ':';
         _index++;
         sprintf(&buf[_index], " %d KBytes/s\n", (int)(upload_size / upload_time / 1024));
 
         lv_label_set_text(labelDialog, buf);
         lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
       }
     }
-    else if (DIALOG_IS(TYPE_UPDATE_ESP_FIRMARE)) {
+    else if (DIALOG_IS(TYPE_UPDATE_ESP_FIRMWARE)) {
       lv_label_set_text(labelDialog, DIALOG_UPDATE_WIFI_FIRMWARE_EN);
       lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
     }
   #endif // MKS_WIFI_MODULE
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DIALOG_IS(TYPE_FILAMENT_HEAT_LOAD_COMPLETED)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat_confirm);

commit 40c8f2001d2274dd34868d2e83ba65a09bcfba17
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 16 20:43:46 2021 -0600

    Apply bool to some MKS UI

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index e2a24f78e1..95077d09f2 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -153,28 +153,28 @@ static void btn_ok_event_cb(lv_obj_t *btn, lv_event_t event) {
       if (do_draw_cal) {
         disp_state_stack._disp_index--; // We are asynchronous from the dialog, so let's remove the dialog from the stack
         lv_draw_touch_calibration_screen();
       }
     #else
       constexpr bool do_draw_cal = false;
     #endif
     if (!do_draw_cal) draw_return_ui();
   }
   else if (DIALOG_IS(WIFI_CONFIG_TIPS)) {
-    uiCfg.configWifi = 1;
+    uiCfg.configWifi = true;
     clear_cur_ui();
     draw_return_ui();
   }
   else if (DIALOG_IS(TYPE_FILAMENT_HEAT_LOAD_COMPLETED))
-    uiCfg.filament_heat_completed_load = 1;
+    uiCfg.filament_heat_completed_load = true;
   else if (DIALOG_IS(TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED))
-    uiCfg.filament_heat_completed_unload = 1;
+    uiCfg.filament_heat_completed_unload = true;
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_COMPLETED, TYPE_FILAMENT_UNLOAD_COMPLETED)) {
     clear_cur_ui();
     draw_return_ui();
   }
   #if ENABLED(MKS_WIFI_MODULE)
     else if (DIALOG_IS(TYPE_UNBIND)) {
       cloud_unbind();
       clear_cur_ui();
       draw_return_ui();
     }
@@ -191,25 +191,25 @@ static void btn_cancel_event_cb(lv_obj_t *btn, lv_event_t event) {
     TERN_(ADVANCED_PAUSE_FEATURE, pause_menu_response = PAUSE_RESPONSE_RESUME_PRINT);
   }
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT, TYPE_FILAMENT_HEAT_LOAD_COMPLETED, TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED)) {
     thermalManager.temp_hotend[uiCfg.curSprayerChoose].target= uiCfg.desireSprayerTempBak;
     clear_cur_ui();
     draw_return_ui();
   }
   else if (DIALOG_IS(TYPE_FILAMENT_LOADING, TYPE_FILAMENT_UNLOADING)) {
     queue.enqueue_one_P(PSTR("M410"));
     uiCfg.filament_rate                = 0;
-    uiCfg.filament_loading_completed   = 0;
-    uiCfg.filament_unloading_completed = 0;
-    uiCfg.filament_loading_time_flg    = 0;
+    uiCfg.filament_loading_completed   = false;
+    uiCfg.filament_unloading_completed = false;
+    uiCfg.filament_loading_time_flg    = false;
     uiCfg.filament_loading_time_cnt    = 0;
-    uiCfg.filament_unloading_time_flg  = 0;
+    uiCfg.filament_unloading_time_flg  = false;
     uiCfg.filament_unloading_time_cnt  = 0;
     thermalManager.temp_hotend[uiCfg.curSprayerChoose].target = uiCfg.desireSprayerTempBak;
     clear_cur_ui();
     draw_return_ui();
   }
   else {
     clear_cur_ui();
     draw_return_ui();
   }
 }
@@ -486,68 +486,68 @@ void filament_sprayer_temp() {
   strcat(public_buf_l, buf);
   lv_label_set_text(tempText1, public_buf_l);
   lv_obj_align(tempText1, nullptr, LV_ALIGN_CENTER, 0, -50);
 }
 
 void filament_dialog_handle() {
   if (temps_update_flag && (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT))) {
     filament_sprayer_temp();
     temps_update_flag = false;
   }
-  if (uiCfg.filament_heat_completed_load == 1) {
-    uiCfg.filament_heat_completed_load = 0;
+  if (uiCfg.filament_heat_completed_load) {
+    uiCfg.filament_heat_completed_load = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOADING);
     planner.synchronize();
-    uiCfg.filament_loading_time_flg = 1;
+    uiCfg.filament_loading_time_flg = true;
     uiCfg.filament_loading_time_cnt = 0;
     sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E%d F%d\nG90"), uiCfg.curSprayerChoose, gCfgItems.filamentchange_load_length, gCfgItems.filamentchange_load_speed);
     queue.inject(public_buf_m);
   }
-  if (uiCfg.filament_heat_completed_unload == 1) {
-    uiCfg.filament_heat_completed_unload = 0;
+  if (uiCfg.filament_heat_completed_unload) {
+    uiCfg.filament_heat_completed_unload = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOADING);
     planner.synchronize();
-    uiCfg.filament_unloading_time_flg = 1;
+    uiCfg.filament_unloading_time_flg = true;
     uiCfg.filament_unloading_time_cnt = 0;
     sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E-%d F%d\nG90"), uiCfg.curSprayerChoose, gCfgItems.filamentchange_unload_length, gCfgItems.filamentchange_unload_speed);
     queue.inject(public_buf_m);
   }
 
   if (((abs((int)((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius - gCfgItems.filament_limit_temper)) <= 1)
     || ((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius > gCfgItems.filament_limit_temper))
-    && (uiCfg.filament_load_heat_flg == 1)
+    && (uiCfg.filament_load_heat_flg)
   ) {
-    uiCfg.filament_load_heat_flg = 0;
+    uiCfg.filament_load_heat_flg = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED);
   }
 
-  if (uiCfg.filament_loading_completed == 1) {
+  if (uiCfg.filament_loading_completed) {
     uiCfg.filament_rate = 0;
-    uiCfg.filament_loading_completed = 0;
+    uiCfg.filament_loading_completed = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOAD_COMPLETED);
   }
   if (((abs((int)((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius - gCfgItems.filament_limit_temper)) <= 1)
      || ((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius > gCfgItems.filament_limit_temper))
-     && (uiCfg.filament_unload_heat_flg == 1)
+     && uiCfg.filament_unload_heat_flg
   ) {
-    uiCfg.filament_unload_heat_flg = 0;
+    uiCfg.filament_unload_heat_flg = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED);
   }
 
-  if (uiCfg.filament_unloading_completed == 1) {
+  if (uiCfg.filament_unloading_completed) {
     uiCfg.filament_rate = 0;
-    uiCfg.filament_unloading_completed = 0;
+    uiCfg.filament_unloading_completed = false;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOAD_COMPLETED);
   }
 
   if (DIALOG_IS(TYPE_FILAMENT_LOADING, TYPE_FILAMENT_UNLOADING))
     lv_filament_setbar();
 }
 
 void lv_filament_setbar() {
   lv_bar_set_value(filament_bar, uiCfg.filament_rate, LV_ANIM_ON);

commit 35c1b330ec62e698a455176330e7d75600af461d
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Thu Jan 14 12:41:09 2021 +0800

    MKS WiFi for TFT_LVGL_UI (#20191)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 55a0e695fe..e2a24f78e1 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -165,20 +165,31 @@ static void btn_ok_event_cb(lv_obj_t *btn, lv_event_t event) {
     draw_return_ui();
   }
   else if (DIALOG_IS(TYPE_FILAMENT_HEAT_LOAD_COMPLETED))
     uiCfg.filament_heat_completed_load = 1;
   else if (DIALOG_IS(TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED))
     uiCfg.filament_heat_completed_unload = 1;
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_COMPLETED, TYPE_FILAMENT_UNLOAD_COMPLETED)) {
     clear_cur_ui();
     draw_return_ui();
   }
+  #if ENABLED(MKS_WIFI_MODULE)
+    else if (DIALOG_IS(TYPE_UNBIND)) {
+      cloud_unbind();
+      clear_cur_ui();
+      draw_return_ui();
+    }
+  #endif
+  else {
+    clear_cur_ui();
+    draw_return_ui();
+  }
 }
 
 static void btn_cancel_event_cb(lv_obj_t *btn, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
   if (DIALOG_IS(PAUSE_MESSAGE_OPTION)) {
     TERN_(ADVANCED_PAUSE_FEATURE, pause_menu_response = PAUSE_RESPONSE_RESUME_PRINT);
   }
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT, TYPE_FILAMENT_HEAT_LOAD_COMPLETED, TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED)) {
     thermalManager.temp_hotend[uiCfg.curSprayerChoose].target= uiCfg.desireSprayerTempBak;
     clear_cur_ui();
@@ -239,20 +250,23 @@ void lv_draw_dialog(uint8_t type) {
         btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
         lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
         lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
       }
       else if (upload_result == 3) {
         btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
         lv_obj_t *labelOk = lv_label_create_empty(btnOk);
         lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
       }
     }
+    else if (DIALOG_IS(TYPE_UPDATE_ESP_FIRMARE)) {
+      // nothing to do
+    }
   #endif
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT)) {
     btnCancel = lv_button_btn_create(scr, BTN_OK_X+90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
     lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
 
     tempText1 = lv_label_create_empty(scr);
     filament_sprayer_temp();
   }
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_COMPLETED, TYPE_FILAMENT_UNLOAD_COMPLETED)) {
@@ -405,20 +419,24 @@ void lv_draw_dialog(uint8_t type) {
         strcat(buf, DIALOG_UPLOAD_SPEED_EN);
         _index = strlen(buf);
         buf[_index] = ':';
         _index++;
         sprintf(&buf[_index], " %d KBytes/s\n", (int)(upload_size / upload_time / 1024));
 
         lv_label_set_text(labelDialog, buf);
         lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
       }
     }
+    else if (DIALOG_IS(TYPE_UPDATE_ESP_FIRMARE)) {
+      lv_label_set_text(labelDialog, DIALOG_UPDATE_WIFI_FIRMWARE_EN);
+      lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    }
   #endif // MKS_WIFI_MODULE
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DIALOG_IS(TYPE_FILAMENT_HEAT_LOAD_COMPLETED)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat_confirm);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DIALOG_IS(TYPE_FILAMENT_UNLOAD_HEAT)) {
@@ -438,20 +456,26 @@ void lv_draw_dialog(uint8_t type) {
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DIALOG_IS(TYPE_FILAMENT_LOADING)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_loading);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -70);
   }
   else if (DIALOG_IS(TYPE_FILAMENT_UNLOADING)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_unloading);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -70);
   }
+  #if ENABLED(MKS_WIFI_MODULE)
+    else if (DIALOG_IS(TYPE_UNBIND)) {
+      lv_label_set_text(labelDialog, common_menu.unbind_printer_tips);
+      lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -70);
+    }
+  #endif
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
       if (btnOk) lv_group_add_obj(g, btnOk);
       if (btnCancel) lv_group_add_obj(g, btnCancel);
     }
   #endif
 }
 
 void filament_sprayer_temp() {
   char buf[20] = {0};

commit 44c57ab05a8f909b85f51e08c90316b41e50c455
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 21:02:35 2021 -0600

    MKS UI prelim. cleanup (#20763)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 5c0f426292..55a0e695fe 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -24,25 +24,20 @@
  * draw_dialog.cpp
  */
 
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
 #include "draw_ui.h"
 #include <lv_conf.h>
 
-//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
-//#include "../lvgl/src/lv_objx/lv_img.h"
-//#include "../lvgl/src/lv_core/lv_disp.h"
-//#include "../lvgl/src/lv_core/lv_refr.h"
-
 #include "../../../../sd/cardreader.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../module/temperature.h"
 #include "../../../../module/planner.h"
 #include "../../../../gcode/gcode.h"
 #include "../../../../inc/MarlinConfig.h"
 
 #if ENABLED(EEPROM_SETTINGS)
   #include "../../../../module/settings.h"
 #endif
@@ -93,21 +88,20 @@ static void btn_ok_event_cb(lv_obj_t *btn, lv_event_t event) {
         const char * const fname = card.diveToFile(true, curDir, cur_name);
         if (!fname) return;
         if (file.open(curDir, fname, O_READ)) {
           gCfgItems.curFilesize = file.fileSize();
           file.close();
           update_spi_flash();
         }
         card.openFileRead(cur_name);
         if (card.isFileOpen()) {
           feedrate_percentage = 100;
-          //saved_feedrate_percentage = feedrate_percentage;
           planner.flow_percentage[0] = 100;
           planner.e_factor[0]        = planner.flow_percentage[0] * 0.01f;
           #if HAS_MULTI_EXTRUDER
             planner.flow_percentage[1] = 100;
             planner.e_factor[1]        = planner.flow_percentage[1] * 0.01f;
           #endif
           card.startFileprint();
           #if ENABLED(POWER_LOSS_RECOVERY)
             recovery.prepare();
           #endif
@@ -116,34 +110,22 @@ static void btn_ok_event_cb(lv_obj_t *btn, lv_event_t event) {
       }
     #endif
   }
   else if (DIALOG_IS(TYPE_STOP)) {
     wait_for_heatup = false;
     stop_print_time();
     lv_clear_dialog();
     lv_draw_ready_print();
 
     #if ENABLED(SDSUPPORT)
-      //card.endFilePrint();
-      //wait_for_heatup = false;
       uiCfg.print_state           = IDLE;
       card.flag.abort_sd_printing = true;
-      //queue.clear();
-      //quickstop_stepper();
-      //print_job_timer.stop();
-      //thermalManager.disable_all_heaters();
-
-      //#if ENABLED(POWER_LOSS_RECOVERY)
-      //  recovery.purge();
-      //#endif
-      //queue.enqueue_now_P(PSTR("G91\nG1 Z10\nG90\nG28 X0 Y0"));
-      //queue.inject_P(PSTR("G91\nG1 Z10\nG90\nG28 X0 Y0\nM84\nM107"));
     #endif
   }
   else if (DIALOG_IS(TYPE_FINISH_PRINT)) {
     clear_cur_ui();
     lv_draw_ready_print();
   }
   #if ENABLED(ADVANCED_PAUSE_FEATURE)
     else if (DIALOG_IS(PAUSE_MESSAGE_WAITING, PAUSE_MESSAGE_INSERT, PAUSE_MESSAGE_HEAT))
       wait_for_user = false;
     else if (DIALOG_IS(PAUSE_MESSAGE_OPTION))
@@ -237,58 +219,58 @@ void lv_draw_dialog(uint8_t type) {
     btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
     lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
     lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
   }
   else if (DIALOG_IS(PAUSE_MESSAGE_PAUSING, PAUSE_MESSAGE_CHANGING, PAUSE_MESSAGE_UNLOAD, PAUSE_MESSAGE_LOAD, PAUSE_MESSAGE_PURGE, PAUSE_MESSAGE_RESUME, PAUSE_MESSAGE_HEATING)) {
     // nothing to do
   }
   else if (DIALOG_IS(WIFI_ENABLE_TIPS)) {
     btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
-    lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
+    lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
   }
   else if (DIALOG_IS(TRANSFER_NO_DEVICE)) {
     btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
-    lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
+    lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
   }
   #if ENABLED(MKS_WIFI_MODULE)
     else if (DIALOG_IS(TYPE_UPLOAD_FILE)) {
       if (upload_result == 2) {
         btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
         lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
-        lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
+        lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
       }
       else if (upload_result == 3) {
         btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
         lv_obj_t *labelOk = lv_label_create_empty(btnOk);
         lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
       }
     }
   #endif
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT)) {
     btnCancel = lv_button_btn_create(scr, BTN_OK_X+90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
-    lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
+    lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
 
     tempText1 = lv_label_create_empty(scr);
     filament_sprayer_temp();
   }
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_COMPLETED, TYPE_FILAMENT_UNLOAD_COMPLETED)) {
     btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
     lv_obj_t *labelOk = lv_label_create_empty(btnOk);
     lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
   }
   else if (DIALOG_IS(TYPE_FILAMENT_LOADING, TYPE_FILAMENT_UNLOADING)) {
     btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
-    lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
+    lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
 
     filament_bar = lv_bar_create(scr, nullptr);
     lv_obj_set_pos(filament_bar, (TFT_WIDTH-400)/2, ((TFT_HEIGHT - titleHeight)-40)/2);
     lv_obj_set_size(filament_bar, 400, 25);
     lv_bar_set_style(filament_bar, LV_BAR_STYLE_INDIC, &lv_bar_style_indic);
     lv_bar_set_anim_time(filament_bar, 1000);
     lv_bar_set_value(filament_bar, 0, LV_ANIM_ON);
   }
   else {
     btnOk = lv_button_btn_create(scr, BTN_OK_X, BTN_OK_Y, 100, 50, btn_ok_event_cb);
@@ -296,32 +278,32 @@ void lv_draw_dialog(uint8_t type) {
 
     btnCancel = lv_button_btn_create(scr, BTN_CANCEL_X, BTN_CANCEL_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);     // Add a label to the button
 
     if (DIALOG_IS(PAUSE_MESSAGE_OPTION)) {
       lv_label_set_text(labelOk, pause_msg_menu.purgeMore);        // Set the labels text
       lv_label_set_text(labelCancel, pause_msg_menu.continuePrint);
     }
     else {
       lv_label_set_text(labelOk, print_file_dialog_menu.confirm);  // Set the labels text
-      lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
+      lv_label_set_text(labelCancel, print_file_dialog_menu.cancel);
     }
   }
   if (DIALOG_IS(TYPE_PRINT_FILE)) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.print_file);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
 
     lv_obj_t *labelFile = lv_label_create(scr, list_file.long_name[sel_id]);
     lv_obj_align(labelFile, nullptr, LV_ALIGN_CENTER, 0, -60);
   }
   else if (DIALOG_IS(TYPE_STOP)) {
-    lv_label_set_text(labelDialog, print_file_dialog_menu.cancle_print);
+    lv_label_set_text(labelDialog, print_file_dialog_menu.cancel_print);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DIALOG_IS(TYPE_FINISH_PRINT)) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.print_finish);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DIALOG_IS(PAUSE_MESSAGE_PAUSING)) {
     lv_label_set_text(labelDialog, pause_msg_menu.pausing);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }

commit 91730d71ffb448728a8187eeebf205138e846b69
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Tue Dec 22 13:17:06 2020 +0100

    Improve Touch Calibration screen (#20524)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 1fcb1bd2e2..5c0f426292 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -48,20 +48,25 @@
 #endif
 
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "../../../../feature/powerloss.h"
 #endif
 
 #if ENABLED(PARK_HEAD_ON_PAUSE)
   #include "../../../../feature/pause.h"
 #endif
 
+#if ENABLED(TOUCH_SCREEN_CALIBRATION)
+  #include "../../../tft_io/touch_calibration.h"
+  #include "draw_touch_calibration.h"
+#endif
+
 extern lv_group_t *g;
 static lv_obj_t *scr, *tempText1, *filament_bar;
 
 extern uint8_t sel_id;
 extern bool once_flag, gcode_preview_over;
 extern int upload_result;
 extern uint32_t upload_time;
 extern uint32_t upload_size;
 extern bool temps_update_flag;
 
@@ -154,43 +159,50 @@ static void btn_ok_event_cb(lv_obj_t *btn, lv_event_t event) {
     draw_return_ui();
   }
   else if (DIALOG_IS(READ_EEPROM_TIPS)) {
     TERN_(EEPROM_SETTINGS, (void)settings.load());
     clear_cur_ui();
     draw_return_ui();
   }
   else if (DIALOG_IS(REVERT_EEPROM_TIPS)) {
     TERN_(EEPROM_SETTINGS, (void)settings.reset());
     clear_cur_ui();
-    draw_return_ui();
+    #if ENABLED(TOUCH_SCREEN_CALIBRATION)
+      const bool do_draw_cal = touch_calibration.need_calibration();
+      if (do_draw_cal) {
+        disp_state_stack._disp_index--; // We are asynchronous from the dialog, so let's remove the dialog from the stack
+        lv_draw_touch_calibration_screen();
+      }
+    #else
+      constexpr bool do_draw_cal = false;
+    #endif
+    if (!do_draw_cal) draw_return_ui();
   }
   else if (DIALOG_IS(WIFI_CONFIG_TIPS)) {
     uiCfg.configWifi = 1;
     clear_cur_ui();
     draw_return_ui();
   }
   else if (DIALOG_IS(TYPE_FILAMENT_HEAT_LOAD_COMPLETED))
     uiCfg.filament_heat_completed_load = 1;
   else if (DIALOG_IS(TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED))
     uiCfg.filament_heat_completed_unload = 1;
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_COMPLETED, TYPE_FILAMENT_UNLOAD_COMPLETED)) {
     clear_cur_ui();
     draw_return_ui();
   }
 }
 
 static void btn_cancel_event_cb(lv_obj_t *btn, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
   if (DIALOG_IS(PAUSE_MESSAGE_OPTION)) {
-    #if ENABLED(ADVANCED_PAUSE_FEATURE)
-      pause_menu_response = PAUSE_RESPONSE_RESUME_PRINT;
-    #endif
+    TERN_(ADVANCED_PAUSE_FEATURE, pause_menu_response = PAUSE_RESPONSE_RESUME_PRINT);
   }
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT, TYPE_FILAMENT_HEAT_LOAD_COMPLETED, TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED)) {
     thermalManager.temp_hotend[uiCfg.curSprayerChoose].target= uiCfg.desireSprayerTempBak;
     clear_cur_ui();
     draw_return_ui();
   }
   else if (DIALOG_IS(TYPE_FILAMENT_LOADING, TYPE_FILAMENT_UNLOADING)) {
     queue.enqueue_one_P(PSTR("M410"));
     uiCfg.filament_rate                = 0;
     uiCfg.filament_loading_completed   = 0;

commit 3893114c86c195d227e023c9e702197b54b2636f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Nov 19 15:51:53 2020 -0600

    MKS WiFi preliminary changes

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 0a36b09ce7..1fcb1bd2e2 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -232,21 +232,21 @@ void lv_draw_dialog(uint8_t type) {
   else if (DIALOG_IS(WIFI_ENABLE_TIPS)) {
     btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
     lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
   }
   else if (DIALOG_IS(TRANSFER_NO_DEVICE)) {
     btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
     lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
   }
-  #if ENABLED(USE_WIFI_FUNCTION)
+  #if ENABLED(MKS_WIFI_MODULE)
     else if (DIALOG_IS(TYPE_UPLOAD_FILE)) {
       if (upload_result == 2) {
         btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
         lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
         lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
       }
       else if (upload_result == 3) {
         btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
         lv_obj_t *labelOk = lv_label_create_empty(btnOk);
         lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
@@ -370,21 +370,21 @@ void lv_draw_dialog(uint8_t type) {
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DIALOG_IS(WIFI_ENABLE_TIPS)) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.wifi_enable_tips);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DIALOG_IS(TRANSFER_NO_DEVICE)) {
     lv_label_set_text(labelDialog, DIALOG_UPDATE_NO_DEVICE_EN);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  #if ENABLED(USE_WIFI_FUNCTION)
+  #if ENABLED(MKS_WIFI_MODULE)
     else if (DIALOG_IS(TYPE_UPLOAD_FILE)) {
       if (upload_result == 1) {
         lv_label_set_text(labelDialog, DIALOG_UPLOAD_ING_EN);
         lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
       }
       else if (upload_result == 2) {
         lv_label_set_text(labelDialog, DIALOG_UPLOAD_ERROR_EN);
         lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
       }
       else if (upload_result == 3) {
@@ -411,21 +411,21 @@ void lv_draw_dialog(uint8_t type) {
         strcat(buf, DIALOG_UPLOAD_SPEED_EN);
         _index = strlen(buf);
         buf[_index] = ':';
         _index++;
         sprintf(&buf[_index], " %d KBytes/s\n", (int)(upload_size / upload_time / 1024));
 
         lv_label_set_text(labelDialog, buf);
         lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
       }
     }
-  #endif // USE_WIFI_FUNCTION
+  #endif // MKS_WIFI_MODULE
   else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DIALOG_IS(TYPE_FILAMENT_HEAT_LOAD_COMPLETED)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat_confirm);
     lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DIALOG_IS(TYPE_FILAMENT_UNLOAD_HEAT)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_unload_heat);

commit 75b0e3246a00c04c5bf04607d030775f1d8d1e0c
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Oct 27 17:09:19 2020 -0300

    Fix some LVGL bugs (#19904)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 67ed24d8c0..0a36b09ce7 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -207,21 +207,21 @@ static void btn_cancel_event_cb(lv_obj_t *btn, lv_event_t event) {
     clear_cur_ui();
     draw_return_ui();
   }
 }
 
 void lv_draw_dialog(uint8_t type) {
   lv_obj_t *btnOk = nullptr, *btnCancel = nullptr;
   uiCfg.dialogType = type;
   scr = lv_screen_create(DIALOG_UI);
 
-  lv_obj_t *labelDialog = lv_label_create_empty(scr);
+  lv_obj_t *labelDialog = lv_label_create(scr, "");
 
   if (DIALOG_IS(TYPE_FINISH_PRINT, PAUSE_MESSAGE_RESUME)) {
       btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
       lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
       lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
   }
   else if (DIALOG_IS(PAUSE_MESSAGE_WAITING, PAUSE_MESSAGE_INSERT, PAUSE_MESSAGE_HEAT)) {
     btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
     lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
     lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text

commit 853d01de683ab3efcbb15ef95db869e279053ee0
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 19:28:31 2020 -0300

    More LVGL UI code reduction (#19879)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index a18964919a..67ed24d8c0 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -204,33 +204,22 @@ static void btn_cancel_event_cb(lv_obj_t *btn, lv_event_t event) {
     draw_return_ui();
   }
   else {
     clear_cur_ui();
     draw_return_ui();
   }
 }
 
 void lv_draw_dialog(uint8_t type) {
   lv_obj_t *btnOk = nullptr, *btnCancel = nullptr;
-  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != DIALOG_UI) {
-    disp_state_stack._disp_index++;
-    disp_state_stack._disp_state[disp_state_stack._disp_index] = DIALOG_UI;
-  }
-  disp_state = DIALOG_UI;
-
   uiCfg.dialogType = type;
-
-  scr = lv_screen_create();
-
-  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
-
-  lv_refr_now(lv_refr_get_disp_refreshing());
+  scr = lv_screen_create(DIALOG_UI);
 
   lv_obj_t *labelDialog = lv_label_create_empty(scr);
 
   if (DIALOG_IS(TYPE_FINISH_PRINT, PAUSE_MESSAGE_RESUME)) {
       btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
       lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
       lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
   }
   else if (DIALOG_IS(PAUSE_MESSAGE_WAITING, PAUSE_MESSAGE_INSERT, PAUSE_MESSAGE_HEAT)) {
     btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);

commit 9630c2683c39468bf885c560a1768d8b377d9462
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 01:37:45 2020 -0300

    More MKS UI cleanup, optimization (#19869)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 07e0665ce4..a18964919a 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -48,487 +48,367 @@
 #endif
 
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "../../../../feature/powerloss.h"
 #endif
 
 #if ENABLED(PARK_HEAD_ON_PAUSE)
   #include "../../../../feature/pause.h"
 #endif
 
-extern lv_group_t * g;
-static lv_obj_t * scr;
-static lv_obj_t * tempText1;
-static lv_obj_t * filament_bar;
+extern lv_group_t *g;
+static lv_obj_t *scr, *tempText1, *filament_bar;
 
 extern uint8_t sel_id;
 extern bool once_flag, gcode_preview_over;
-extern int upload_result ;
+extern int upload_result;
 extern uint32_t upload_time;
 extern uint32_t upload_size;
-extern uint8_t temperature_change_frequency;
+extern bool temps_update_flag;
 
-static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
-  if (event == LV_EVENT_CLICKED) {
-    // nothing to do
-  }
-  else if (event == LV_EVENT_RELEASED) {
-    if (uiCfg.dialogType == DIALOG_TYPE_PRINT_FILE) {
-      #if HAS_GCODE_PREVIEW
-        preview_gcode_prehandle(list_file.file_name[sel_id]);
-      #endif
-      reset_print_time();
-      start_print_time();
-
-      uiCfg.print_state = WORKING;
-      lv_clear_dialog();
-      lv_draw_printing();
-
-      #if ENABLED(SDSUPPORT)
-        if (!gcode_preview_over) {
-          char *cur_name;
-          cur_name = strrchr(list_file.file_name[sel_id], '/');
-
-          SdFile file, *curDir;
-          card.endFilePrint();
-          const char * const fname = card.diveToFile(true, curDir, cur_name);
-          if (!fname) return;
-          if (file.open(curDir, fname, O_READ)) {
-            gCfgItems.curFilesize = file.fileSize();
-            file.close();
-            update_spi_flash();
-          }
-          card.openFileRead(cur_name);
-          if (card.isFileOpen()) {
-            feedrate_percentage = 100;
-            //saved_feedrate_percentage = feedrate_percentage;
-            planner.flow_percentage[0] = 100;
-            planner.e_factor[0]        = planner.flow_percentage[0] * 0.01f;
-            #if HAS_MULTI_EXTRUDER
-              planner.flow_percentage[1] = 100;
-              planner.e_factor[1]        = planner.flow_percentage[1] * 0.01f;
-            #endif
-            card.startFileprint();
-            #if ENABLED(POWER_LOSS_RECOVERY)
-              recovery.prepare();
-            #endif
-            once_flag = false;
-          }
+static void btn_ok_event_cb(lv_obj_t *btn, lv_event_t event) {
+  if (event != LV_EVENT_RELEASED) return;
+  if (DIALOG_IS(TYPE_PRINT_FILE)) {
+    #if HAS_GCODE_PREVIEW
+      preview_gcode_prehandle(list_file.file_name[sel_id]);
+    #endif
+    reset_print_time();
+    start_print_time();
+
+    uiCfg.print_state = WORKING;
+    lv_clear_dialog();
+    lv_draw_printing();
+
+    #if ENABLED(SDSUPPORT)
+      if (!gcode_preview_over) {
+        char *cur_name;
+        cur_name = strrchr(list_file.file_name[sel_id], '/');
+
+        SdFile file, *curDir;
+        card.endFilePrint();
+        const char * const fname = card.diveToFile(true, curDir, cur_name);
+        if (!fname) return;
+        if (file.open(curDir, fname, O_READ)) {
+          gCfgItems.curFilesize = file.fileSize();
+          file.close();
+          update_spi_flash();
+        }
+        card.openFileRead(cur_name);
+        if (card.isFileOpen()) {
+          feedrate_percentage = 100;
+          //saved_feedrate_percentage = feedrate_percentage;
+          planner.flow_percentage[0] = 100;
+          planner.e_factor[0]        = planner.flow_percentage[0] * 0.01f;
+          #if HAS_MULTI_EXTRUDER
+            planner.flow_percentage[1] = 100;
+            planner.e_factor[1]        = planner.flow_percentage[1] * 0.01f;
+          #endif
+          card.startFileprint();
+          #if ENABLED(POWER_LOSS_RECOVERY)
+            recovery.prepare();
+          #endif
+          once_flag = false;
         }
-      #endif
-    }
-    else if (uiCfg.dialogType == DIALOG_TYPE_STOP) {
-      wait_for_heatup = false;
-      stop_print_time();
-      lv_clear_dialog();
-      lv_draw_ready_print();
-
-      #if ENABLED(SDSUPPORT)
-        //card.endFilePrint();
-        //wait_for_heatup = false;
-        uiCfg.print_state           = IDLE;
-        card.flag.abort_sd_printing = true;
-        //queue.clear();
-        //quickstop_stepper();
-        //print_job_timer.stop();
-        //thermalManager.disable_all_heaters();
-
-        //#if ENABLED(POWER_LOSS_RECOVERY)
-        //  recovery.purge();
-        //#endif
-        //queue.enqueue_now_P(PSTR("G91\nG1 Z10\nG90\nG28 X0 Y0"));
-        //queue.inject_P(PSTR("G91\nG1 Z10\nG90\nG28 X0 Y0\nM84\nM107"));
-      #endif
-    }
-    else if (uiCfg.dialogType == DIALOG_TYPE_FINISH_PRINT) {
-      clear_cur_ui();
-      lv_draw_ready_print();
-    }
-    #if ENABLED(ADVANCED_PAUSE_FEATURE)
-      else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_WAITING
-            || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_INSERT
-            || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_HEAT
-      ) {
-        wait_for_user = false;
-      }
-      else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
-        pause_menu_response = PAUSE_RESPONSE_EXTRUDE_MORE;
-      }
-      else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
-        clear_cur_ui();
-        draw_return_ui();
       }
     #endif
-    else if (uiCfg.dialogType == DIALOG_STORE_EEPROM_TIPS) {
-      TERN_(EEPROM_SETTINGS, (void)settings.save());
-      clear_cur_ui();
-      draw_return_ui();
-    }
-    else if (uiCfg.dialogType == DIALOG_READ_EEPROM_TIPS) {
-      TERN_(EEPROM_SETTINGS, (void)settings.load());
-      clear_cur_ui();
-      draw_return_ui();
-    }
-    else if (uiCfg.dialogType == DIALOG_REVERT_EEPROM_TIPS) {
-      TERN_(EEPROM_SETTINGS, (void)settings.reset());
-      clear_cur_ui();
-      draw_return_ui();
-    }
-    else if (uiCfg.dialogType == DIALOG_WIFI_CONFIG_TIPS) {
-      uiCfg.configWifi = 1;
-      clear_cur_ui();
-      draw_return_ui();
-    }
-    else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED) {
-      uiCfg.filament_heat_completed_load = 1;
-    }
-    else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED) {
-      uiCfg.filament_heat_completed_unload = 1;
-    }
-    else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_COMPLETED
-          || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_COMPLETED
-    ) {
+  }
+  else if (DIALOG_IS(TYPE_STOP)) {
+    wait_for_heatup = false;
+    stop_print_time();
+    lv_clear_dialog();
+    lv_draw_ready_print();
+
+    #if ENABLED(SDSUPPORT)
+      //card.endFilePrint();
+      //wait_for_heatup = false;
+      uiCfg.print_state           = IDLE;
+      card.flag.abort_sd_printing = true;
+      //queue.clear();
+      //quickstop_stepper();
+      //print_job_timer.stop();
+      //thermalManager.disable_all_heaters();
+
+      //#if ENABLED(POWER_LOSS_RECOVERY)
+      //  recovery.purge();
+      //#endif
+      //queue.enqueue_now_P(PSTR("G91\nG1 Z10\nG90\nG28 X0 Y0"));
+      //queue.inject_P(PSTR("G91\nG1 Z10\nG90\nG28 X0 Y0\nM84\nM107"));
+    #endif
+  }
+  else if (DIALOG_IS(TYPE_FINISH_PRINT)) {
+    clear_cur_ui();
+    lv_draw_ready_print();
+  }
+  #if ENABLED(ADVANCED_PAUSE_FEATURE)
+    else if (DIALOG_IS(PAUSE_MESSAGE_WAITING, PAUSE_MESSAGE_INSERT, PAUSE_MESSAGE_HEAT))
+      wait_for_user = false;
+    else if (DIALOG_IS(PAUSE_MESSAGE_OPTION))
+      pause_menu_response = PAUSE_RESPONSE_EXTRUDE_MORE;
+    else if (DIALOG_IS(PAUSE_MESSAGE_RESUME)) {
       clear_cur_ui();
       draw_return_ui();
     }
+  #endif
+  else if (DIALOG_IS(STORE_EEPROM_TIPS)) {
+    TERN_(EEPROM_SETTINGS, (void)settings.save());
+    clear_cur_ui();
+    draw_return_ui();
+  }
+  else if (DIALOG_IS(READ_EEPROM_TIPS)) {
+    TERN_(EEPROM_SETTINGS, (void)settings.load());
+    clear_cur_ui();
+    draw_return_ui();
+  }
+  else if (DIALOG_IS(REVERT_EEPROM_TIPS)) {
+    TERN_(EEPROM_SETTINGS, (void)settings.reset());
+    clear_cur_ui();
+    draw_return_ui();
+  }
+  else if (DIALOG_IS(WIFI_CONFIG_TIPS)) {
+    uiCfg.configWifi = 1;
+    clear_cur_ui();
+    draw_return_ui();
+  }
+  else if (DIALOG_IS(TYPE_FILAMENT_HEAT_LOAD_COMPLETED))
+    uiCfg.filament_heat_completed_load = 1;
+  else if (DIALOG_IS(TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED))
+    uiCfg.filament_heat_completed_unload = 1;
+  else if (DIALOG_IS(TYPE_FILAMENT_LOAD_COMPLETED, TYPE_FILAMENT_UNLOAD_COMPLETED)) {
+    clear_cur_ui();
+    draw_return_ui();
   }
 }
 
-static void btn_cancel_event_cb(lv_obj_t * btn, lv_event_t event) {
-  if (event == LV_EVENT_CLICKED) {
-    // nothing to do
+static void btn_cancel_event_cb(lv_obj_t *btn, lv_event_t event) {
+  if (event != LV_EVENT_RELEASED) return;
+  if (DIALOG_IS(PAUSE_MESSAGE_OPTION)) {
+    #if ENABLED(ADVANCED_PAUSE_FEATURE)
+      pause_menu_response = PAUSE_RESPONSE_RESUME_PRINT;
+    #endif
   }
-  else if (event == LV_EVENT_RELEASED) {
-    if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
-      #if ENABLED(ADVANCED_PAUSE_FEATURE)
-        pause_menu_response = PAUSE_RESPONSE_RESUME_PRINT;
-      #endif
-    }
-    else if ((uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_HEAT)
-          || (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_HEAT)
-          || (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED)
-          || (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED)
-    ) {
-      thermalManager.temp_hotend[uiCfg.curSprayerChoose].target= uiCfg.desireSprayerTempBak;
-      clear_cur_ui();
-      draw_return_ui();
-    }
-    else if ((uiCfg.dialogType   == DIALOG_TYPE_FILAMENT_LOADING)
-       || (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOADING)
-    ) {
-      queue.enqueue_one_P(PSTR("M410"));
-      uiCfg.filament_rate                = 0;
-      uiCfg.filament_loading_completed   = 0;
-      uiCfg.filament_unloading_completed = 0;
-      uiCfg.filament_loading_time_flg    = 0;
-      uiCfg.filament_loading_time_cnt    = 0;
-      uiCfg.filament_unloading_time_flg  = 0;
-      uiCfg.filament_unloading_time_cnt  = 0;
-      thermalManager.temp_hotend[uiCfg.curSprayerChoose].target = uiCfg.desireSprayerTempBak;
-      clear_cur_ui();
-      draw_return_ui();
-    }
-    else {
-      clear_cur_ui();
-      draw_return_ui();
-    }
+  else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT, TYPE_FILAMENT_HEAT_LOAD_COMPLETED, TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED)) {
+    thermalManager.temp_hotend[uiCfg.curSprayerChoose].target= uiCfg.desireSprayerTempBak;
+    clear_cur_ui();
+    draw_return_ui();
+  }
+  else if (DIALOG_IS(TYPE_FILAMENT_LOADING, TYPE_FILAMENT_UNLOADING)) {
+    queue.enqueue_one_P(PSTR("M410"));
+    uiCfg.filament_rate                = 0;
+    uiCfg.filament_loading_completed   = 0;
+    uiCfg.filament_unloading_completed = 0;
+    uiCfg.filament_loading_time_flg    = 0;
+    uiCfg.filament_loading_time_cnt    = 0;
+    uiCfg.filament_unloading_time_flg  = 0;
+    uiCfg.filament_unloading_time_cnt  = 0;
+    thermalManager.temp_hotend[uiCfg.curSprayerChoose].target = uiCfg.desireSprayerTempBak;
+    clear_cur_ui();
+    draw_return_ui();
+  }
+  else {
+    clear_cur_ui();
+    draw_return_ui();
   }
 }
 
 void lv_draw_dialog(uint8_t type) {
-
-  lv_obj_t * btnOk = NULL;
-  lv_obj_t * btnCancel = NULL;
+  lv_obj_t *btnOk = nullptr, *btnCancel = nullptr;
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != DIALOG_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = DIALOG_UI;
   }
   disp_state = DIALOG_UI;
 
   uiCfg.dialogType = type;
 
-  scr = lv_obj_create(NULL, NULL);
-
-  lv_obj_set_style(scr, &tft_style_scr);
-  lv_scr_load(scr);
-  lv_obj_clean(scr);
+  scr = lv_screen_create();
 
   (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
-  static lv_style_t style_btn_rel;                                 // A variable to store the released style
-  lv_style_copy(&style_btn_rel, &lv_style_plain);                  // Initialize from a built-in style
-  style_btn_rel.body.border.color = lv_color_hex3(0x269);
-  style_btn_rel.body.border.width = 1;
-  style_btn_rel.body.main_color   = lv_color_hex3(0xADF);
-  style_btn_rel.body.grad_color   = lv_color_hex3(0x46B);
-  style_btn_rel.body.shadow.width = 4;
-  style_btn_rel.body.shadow.type  = LV_SHADOW_BOTTOM;
-  style_btn_rel.body.radius       = LV_RADIUS_CIRCLE;
-  style_btn_rel.text.color        = lv_color_hex3(0xDEF);
-  style_btn_rel.text.font         = &TERN(HAS_SPI_FLASH_FONT, gb2312_puhui32, lv_font_roboto_22);
-
-  static lv_style_t style_btn_pr;                                  // A variable to store the pressed style
-  lv_style_copy(&style_btn_pr, &style_btn_rel);                    // Initialize from the released style
-  style_btn_pr.body.border.color = lv_color_hex3(0x46B);
-  style_btn_pr.body.main_color   = lv_color_hex3(0x8BD);
-  style_btn_pr.body.grad_color   = lv_color_hex3(0x24A);
-  style_btn_pr.body.shadow.width = 2;
-  style_btn_pr.text.color        = lv_color_hex3(0xBCD);
-  style_btn_pr.text.font         = &TERN(HAS_SPI_FLASH_FONT, gb2312_puhui32, lv_font_roboto_22);
-
-  // Set button styles for Released and Pressed
-  auto lv_btn_use_button_style = [&](lv_obj_t *btn) {
-    lv_btn_set_style(btn, LV_BTN_STYLE_REL, &style_btn_rel);
-    lv_btn_set_style(btn, LV_BTN_STYLE_PR,  &style_btn_pr);
-  };
-
   lv_obj_t *labelDialog = lv_label_create_empty(scr);
 
-  if (uiCfg.dialogType == DIALOG_TYPE_FINISH_PRINT || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
-      btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
-      lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                // Set its position
-      lv_obj_set_size(btnOk, 100, 50);                               // Set its size
-      lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-      lv_btn_use_button_style(btnOk);
+  if (DIALOG_IS(TYPE_FINISH_PRINT, PAUSE_MESSAGE_RESUME)) {
+      btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
       lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
       lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_WAITING
-        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_INSERT
-        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_HEAT
-  ) {
-    btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
-    lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                // Set its position
-    lv_obj_set_size(btnOk, 100, 50);                               // Set its size
-    lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-    lv_btn_use_button_style(btnOk);
+  else if (DIALOG_IS(PAUSE_MESSAGE_WAITING, PAUSE_MESSAGE_INSERT, PAUSE_MESSAGE_HEAT)) {
+    btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
     lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
     lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_PAUSING
-        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_CHANGING
-        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_UNLOAD
-        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_LOAD
-        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_PURGE
-        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_RESUME
-        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_HEATING
-  ) {
+  else if (DIALOG_IS(PAUSE_MESSAGE_PAUSING, PAUSE_MESSAGE_CHANGING, PAUSE_MESSAGE_UNLOAD, PAUSE_MESSAGE_LOAD, PAUSE_MESSAGE_PURGE, PAUSE_MESSAGE_RESUME, PAUSE_MESSAGE_HEATING)) {
     // nothing to do
   }
-  else if (uiCfg.dialogType == WIFI_ENABLE_TIPS) {
-    btnCancel = lv_btn_create(scr, NULL);
-    lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
-    lv_obj_set_size(btnCancel, 100, 50);
-    lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-    lv_btn_use_button_style(btnCancel);
+  else if (DIALOG_IS(WIFI_ENABLE_TIPS)) {
+    btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
     lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
   }
-  else if (uiCfg.dialogType == DIALOG_TRANSFER_NO_DEVICE) {
-    btnCancel = lv_btn_create(scr, NULL);
-    lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
-    lv_obj_set_size(btnCancel, 100, 50);
-    lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-    lv_btn_use_button_style(btnCancel);
+  else if (DIALOG_IS(TRANSFER_NO_DEVICE)) {
+    btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
     lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
   }
   #if ENABLED(USE_WIFI_FUNCTION)
-    else if (uiCfg.dialogType == DIALOG_TYPE_UPLOAD_FILE) {
+    else if (DIALOG_IS(TYPE_UPLOAD_FILE)) {
       if (upload_result == 2) {
-        btnCancel = lv_btn_create(scr, NULL);
-        lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
-        lv_obj_set_size(btnCancel, 100, 50);
-        lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-        lv_btn_use_button_style(btnCancel);
+        btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
         lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
         lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
       }
       else if (upload_result == 3) {
-        btnOk = lv_btn_create(scr, NULL);
-        lv_obj_set_pos(btnOk, BTN_OK_X+90, BTN_OK_Y);
-        lv_obj_set_size(btnOk, 100, 50);
-        lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-        lv_btn_use_button_style(btnOk);
+        btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
         lv_obj_t *labelOk = lv_label_create_empty(btnOk);
         lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
       }
     }
-  #endif //USE_WIFI_FUNCTION
-  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_HEAT
-        || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_HEAT
-  ) {
-    btnCancel = lv_btn_create(scr, NULL);
-    lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
-    lv_obj_set_size(btnCancel, 100, 50);
-    lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-    lv_btn_use_button_style(btnCancel);
+  #endif
+  else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT)) {
+    btnCancel = lv_button_btn_create(scr, BTN_OK_X+90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
     lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
 
     tempText1 = lv_label_create_empty(scr);
     filament_sprayer_temp();
   }
-  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_COMPLETED
-        || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_COMPLETED
-  ) {
-    btnOk = lv_btn_create(scr, NULL);
-    lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);
-    lv_obj_set_size(btnOk, 100, 50);
-    lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-    lv_btn_use_button_style(btnOk);
+  else if (DIALOG_IS(TYPE_FILAMENT_LOAD_COMPLETED, TYPE_FILAMENT_UNLOAD_COMPLETED)) {
+    btnOk = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_ok_event_cb);
     lv_obj_t *labelOk = lv_label_create_empty(btnOk);
     lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
   }
-  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOADING
-        || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOADING
-  ) {
-    btnCancel = lv_btn_create(scr, NULL);
-    lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
-    lv_obj_set_size(btnCancel, 100, 50);
-    lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-    lv_btn_use_button_style(btnCancel);
+  else if (DIALOG_IS(TYPE_FILAMENT_LOADING, TYPE_FILAMENT_UNLOADING)) {
+    btnCancel = lv_button_btn_create(scr, BTN_OK_X + 90, BTN_OK_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
     lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
 
-    filament_bar = lv_bar_create(scr, NULL);
+    filament_bar = lv_bar_create(scr, nullptr);
     lv_obj_set_pos(filament_bar, (TFT_WIDTH-400)/2, ((TFT_HEIGHT - titleHeight)-40)/2);
     lv_obj_set_size(filament_bar, 400, 25);
     lv_bar_set_style(filament_bar, LV_BAR_STYLE_INDIC, &lv_bar_style_indic);
     lv_bar_set_anim_time(filament_bar, 1000);
     lv_bar_set_value(filament_bar, 0, LV_ANIM_ON);
   }
   else {
-    btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
-    lv_obj_set_pos(btnOk, BTN_OK_X, BTN_OK_Y);                     // Set its position
-    lv_obj_set_size(btnOk, 100, 50);                               // Set its size
-    lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-    lv_btn_use_button_style(btnOk);
+    btnOk = lv_button_btn_create(scr, BTN_OK_X, BTN_OK_Y, 100, 50, btn_ok_event_cb);
     lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
 
-    btnCancel = lv_btn_create(scr, NULL);               // Add a button the current screen
-    lv_obj_set_pos(btnCancel, BTN_CANCEL_X, BTN_CANCEL_Y);         // Set its position
-    lv_obj_set_size(btnCancel, 100, 50);                           // Set its size
-    lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-    lv_btn_use_button_style(btnCancel);
+    btnCancel = lv_button_btn_create(scr, BTN_CANCEL_X, BTN_CANCEL_Y, 100, 50, btn_cancel_event_cb);
     lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);     // Add a label to the button
 
-    if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
+    if (DIALOG_IS(PAUSE_MESSAGE_OPTION)) {
       lv_label_set_text(labelOk, pause_msg_menu.purgeMore);        // Set the labels text
       lv_label_set_text(labelCancel, pause_msg_menu.continuePrint);
     }
     else {
       lv_label_set_text(labelOk, print_file_dialog_menu.confirm);  // Set the labels text
       lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
     }
   }
-  if (uiCfg.dialogType == DIALOG_TYPE_PRINT_FILE) {
+  if (DIALOG_IS(TYPE_PRINT_FILE)) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.print_file);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
 
     lv_obj_t *labelFile = lv_label_create(scr, list_file.long_name[sel_id]);
-    lv_obj_align(labelFile, NULL, LV_ALIGN_CENTER, 0, -60);
+    lv_obj_align(labelFile, nullptr, LV_ALIGN_CENTER, 0, -60);
   }
-  else if (uiCfg.dialogType == DIALOG_TYPE_STOP) {
+  else if (DIALOG_IS(TYPE_STOP)) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.cancle_print);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_TYPE_FINISH_PRINT) {
+  else if (DIALOG_IS(TYPE_FINISH_PRINT)) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.print_finish);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_PAUSING) {
+  else if (DIALOG_IS(PAUSE_MESSAGE_PAUSING)) {
     lv_label_set_text(labelDialog, pause_msg_menu.pausing);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_CHANGING) {
+  else if (DIALOG_IS(PAUSE_MESSAGE_CHANGING)) {
     lv_label_set_text(labelDialog, pause_msg_menu.changing);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_UNLOAD) {
+  else if (DIALOG_IS(PAUSE_MESSAGE_UNLOAD)) {
     lv_label_set_text(labelDialog, pause_msg_menu.unload);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_WAITING) {
+  else if (DIALOG_IS(PAUSE_MESSAGE_WAITING)) {
     lv_label_set_text(labelDialog, pause_msg_menu.waiting);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_INSERT) {
+  else if (DIALOG_IS(PAUSE_MESSAGE_INSERT)) {
     lv_label_set_text(labelDialog, pause_msg_menu.insert);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_LOAD) {
+  else if (DIALOG_IS(PAUSE_MESSAGE_LOAD)) {
     lv_label_set_text(labelDialog, pause_msg_menu.load);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_PURGE) {
+  else if (DIALOG_IS(PAUSE_MESSAGE_PURGE)) {
     lv_label_set_text(labelDialog, pause_msg_menu.purge);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
+  else if (DIALOG_IS(PAUSE_MESSAGE_RESUME)) {
     lv_label_set_text(labelDialog, pause_msg_menu.resume);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_HEAT) {
+  else if (DIALOG_IS(PAUSE_MESSAGE_HEAT)) {
     lv_label_set_text(labelDialog, pause_msg_menu.heat);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_HEATING) {
+  else if (DIALOG_IS(PAUSE_MESSAGE_HEATING)) {
     lv_label_set_text(labelDialog, pause_msg_menu.heating);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
+  else if (DIALOG_IS(PAUSE_MESSAGE_OPTION)) {
     lv_label_set_text(labelDialog, pause_msg_menu.option);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_STORE_EEPROM_TIPS) {
+  else if (DIALOG_IS(STORE_EEPROM_TIPS)) {
     lv_label_set_text(labelDialog, eeprom_menu.storeTips);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_READ_EEPROM_TIPS) {
+  else if (DIALOG_IS(READ_EEPROM_TIPS)) {
     lv_label_set_text(labelDialog, eeprom_menu.readTips);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_REVERT_EEPROM_TIPS) {
+  else if (DIALOG_IS(REVERT_EEPROM_TIPS)) {
     lv_label_set_text(labelDialog, eeprom_menu.revertTips);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_WIFI_CONFIG_TIPS) {
+  else if (DIALOG_IS(WIFI_CONFIG_TIPS)) {
     lv_label_set_text(labelDialog, machine_menu.wifiConfigTips);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == WIFI_ENABLE_TIPS) {
+  else if (DIALOG_IS(WIFI_ENABLE_TIPS)) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.wifi_enable_tips);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_TRANSFER_NO_DEVICE) {
+  else if (DIALOG_IS(TRANSFER_NO_DEVICE)) {
     lv_label_set_text(labelDialog, DIALOG_UPDATE_NO_DEVICE_EN);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
   #if ENABLED(USE_WIFI_FUNCTION)
-    else if (uiCfg.dialogType == DIALOG_TYPE_UPLOAD_FILE) {
+    else if (DIALOG_IS(TYPE_UPLOAD_FILE)) {
       if (upload_result == 1) {
         lv_label_set_text(labelDialog, DIALOG_UPLOAD_ING_EN);
-        lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+        lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
       }
       else if (upload_result == 2) {
         lv_label_set_text(labelDialog, DIALOG_UPLOAD_ERROR_EN);
-        lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+        lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
       }
       else if (upload_result == 3) {
         char buf[200];
         int _index = 0;
 
-        ZERO(buf);
-
         strcpy(buf, DIALOG_UPLOAD_FINISH_EN);
         _index = strlen(buf);
         buf[_index] = '\n';
         _index++;
         strcat(buf, DIALOG_UPLOAD_SIZE_EN);
 
         _index = strlen(buf);
         buf[_index] = ':';
         _index++;
         sprintf(&buf[_index], " %d KBytes\n", (int)(upload_size / 1024));
@@ -539,88 +419,79 @@ void lv_draw_dialog(uint8_t type) {
         _index++;
         sprintf(&buf[_index], " %d s\n", (int)upload_time);
 
         strcat(buf, DIALOG_UPLOAD_SPEED_EN);
         _index = strlen(buf);
         buf[_index] = ':';
         _index++;
         sprintf(&buf[_index], " %d KBytes/s\n", (int)(upload_size / upload_time / 1024));
 
         lv_label_set_text(labelDialog, buf);
-        lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+        lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
       }
     }
-  #endif //USE_WIFI_FUNCTION
-  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_HEAT) {
+  #endif // USE_WIFI_FUNCTION
+  else if (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED) {
+  else if (DIALOG_IS(TYPE_FILAMENT_HEAT_LOAD_COMPLETED)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat_confirm);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_HEAT) {
+  else if (DIALOG_IS(TYPE_FILAMENT_UNLOAD_HEAT)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_unload_heat);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED) {
+  else if (DIALOG_IS(TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_unload_heat_confirm);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_COMPLETED) {
+  else if (DIALOG_IS(TYPE_FILAMENT_LOAD_COMPLETED)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_completed);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_COMPLETED) {
+  else if (DIALOG_IS(TYPE_FILAMENT_UNLOAD_COMPLETED)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_unload_completed);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOADING) {
+  else if (DIALOG_IS(TYPE_FILAMENT_LOADING)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_loading);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -70);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -70);
   }
-  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOADING) {
+  else if (DIALOG_IS(TYPE_FILAMENT_UNLOADING)) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_unloading);
-    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -70);
+    lv_obj_align(labelDialog, nullptr, LV_ALIGN_CENTER, 0, -70);
   }
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
       if (btnOk) lv_group_add_obj(g, btnOk);
       if (btnCancel) lv_group_add_obj(g, btnCancel);
     }
   #endif
 }
 
 void filament_sprayer_temp() {
   char buf[20] = {0};
+  sprintf(buf, preheat_menu.value_state, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].target);
 
-  public_buf_l[0] = '\0';
-
-  if (uiCfg.curSprayerChoose < 1)
-    strcat(public_buf_l, preheat_menu.ext1);
-  else
-    strcat(public_buf_l, preheat_menu.ext2);
-  sprintf(buf, preheat_menu.value_state, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius,  (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].target);
-
+  strcpy(public_buf_l, uiCfg.curSprayerChoose < 1 ? extrude_menu.ext1 : extrude_menu.ext2);
   strcat_P(public_buf_l, PSTR(": "));
   strcat(public_buf_l, buf);
   lv_label_set_text(tempText1, public_buf_l);
-  lv_obj_align(tempText1, NULL, LV_ALIGN_CENTER, 0, -50);
+  lv_obj_align(tempText1, nullptr, LV_ALIGN_CENTER, 0, -50);
 }
 
 void filament_dialog_handle() {
-  if ((temperature_change_frequency == 1)
-      && ((uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_HEAT)
-      || (uiCfg.dialogType  == DIALOG_TYPE_FILAMENT_UNLOAD_HEAT))
-  ) {
+  if (temps_update_flag && (DIALOG_IS(TYPE_FILAMENT_LOAD_HEAT, TYPE_FILAMENT_UNLOAD_HEAT))) {
     filament_sprayer_temp();
-    temperature_change_frequency = 0;
+    temps_update_flag = false;
   }
   if (uiCfg.filament_heat_completed_load == 1) {
     uiCfg.filament_heat_completed_load = 0;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOADING);
     planner.synchronize();
     uiCfg.filament_loading_time_flg = 1;
     uiCfg.filament_loading_time_cnt = 0;
     sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E%d F%d\nG90"), uiCfg.curSprayerChoose, gCfgItems.filamentchange_load_length, gCfgItems.filamentchange_load_speed);
     queue.inject(public_buf_m);
@@ -660,23 +531,22 @@ void filament_dialog_handle() {
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED);
   }
 
   if (uiCfg.filament_unloading_completed == 1) {
     uiCfg.filament_rate = 0;
     uiCfg.filament_unloading_completed = 0;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOAD_COMPLETED);
   }
 
-  if ( uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOADING
-    || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOADING
-  ) lv_filament_setbar();
+  if (DIALOG_IS(TYPE_FILAMENT_LOADING, TYPE_FILAMENT_UNLOADING))
+    lv_filament_setbar();
 }
 
 void lv_filament_setbar() {
   lv_bar_set_value(filament_bar, uiCfg.filament_rate, LV_ANIM_ON);
 }
 
 void lv_clear_dialog() {
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
   #endif

commit 4533a197d59ffcaccc4d476f06df7754b11b9b0c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 22 20:22:17 2020 -0500

    Slim down MKS UI code (#19843)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 489d8466ce..07e0665ce4 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -36,20 +36,24 @@
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../sd/cardreader.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../module/temperature.h"
 #include "../../../../module/planner.h"
 #include "../../../../gcode/gcode.h"
 #include "../../../../inc/MarlinConfig.h"
 
+#if ENABLED(EEPROM_SETTINGS)
+  #include "../../../../module/settings.h"
+#endif
+
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "../../../../feature/powerloss.h"
 #endif
 
 #if ENABLED(PARK_HEAD_ON_PAUSE)
   #include "../../../../feature/pause.h"
 #endif
 
 extern lv_group_t * g;
 static lv_obj_t * scr;
@@ -148,31 +152,31 @@ static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
       }
       else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
         pause_menu_response = PAUSE_RESPONSE_EXTRUDE_MORE;
       }
       else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
         clear_cur_ui();
         draw_return_ui();
       }
     #endif
     else if (uiCfg.dialogType == DIALOG_STORE_EEPROM_TIPS) {
-      gcode.process_subcommands_now_P(PSTR("M500"));
+      TERN_(EEPROM_SETTINGS, (void)settings.save());
       clear_cur_ui();
       draw_return_ui();
     }
     else if (uiCfg.dialogType == DIALOG_READ_EEPROM_TIPS) {
-      gcode.process_subcommands_now_P(PSTR("M501"));
+      TERN_(EEPROM_SETTINGS, (void)settings.load());
       clear_cur_ui();
       draw_return_ui();
     }
     else if (uiCfg.dialogType == DIALOG_REVERT_EEPROM_TIPS) {
-      gcode.process_subcommands_now_P(PSTR("M502"));
+      TERN_(EEPROM_SETTINGS, (void)settings.reset());
       clear_cur_ui();
       draw_return_ui();
     }
     else if (uiCfg.dialogType == DIALOG_WIFI_CONFIG_TIPS) {
       uiCfg.configWifi = 1;
       clear_cur_ui();
       draw_return_ui();
     }
     else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED) {
       uiCfg.filament_heat_completed_load = 1;
@@ -192,21 +196,21 @@ static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
 static void btn_cancel_event_cb(lv_obj_t * btn, lv_event_t event) {
   if (event == LV_EVENT_CLICKED) {
     // nothing to do
   }
   else if (event == LV_EVENT_RELEASED) {
     if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
       #if ENABLED(ADVANCED_PAUSE_FEATURE)
         pause_menu_response = PAUSE_RESPONSE_RESUME_PRINT;
       #endif
     }
-    else if ((uiCfg.dialogType      == DIALOG_TYPE_FILAMENT_LOAD_HEAT)
+    else if ((uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_HEAT)
           || (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_HEAT)
           || (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED)
           || (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED)
     ) {
       thermalManager.temp_hotend[uiCfg.curSprayerChoose].target= uiCfg.desireSprayerTempBak;
       clear_cur_ui();
       draw_return_ui();
     }
     else if ((uiCfg.dialogType   == DIALOG_TYPE_FILAMENT_LOADING)
        || (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOADING)
@@ -237,33 +241,28 @@ void lv_draw_dialog(uint8_t type) {
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != DIALOG_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = DIALOG_UI;
   }
   disp_state = DIALOG_UI;
 
   uiCfg.dialogType = type;
 
   scr = lv_obj_create(NULL, NULL);
 
-
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
-  lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_label_rel);
-  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
-  lv_label_set_text(title, creat_title_text());
+  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
-
   static lv_style_t style_btn_rel;                                 // A variable to store the released style
   lv_style_copy(&style_btn_rel, &lv_style_plain);                  // Initialize from a built-in style
   style_btn_rel.body.border.color = lv_color_hex3(0x269);
   style_btn_rel.body.border.width = 1;
   style_btn_rel.body.main_color   = lv_color_hex3(0xADF);
   style_btn_rel.body.grad_color   = lv_color_hex3(0x46B);
   style_btn_rel.body.shadow.width = 4;
   style_btn_rel.body.shadow.type  = LV_SHADOW_BOTTOM;
   style_btn_rel.body.radius       = LV_RADIUS_CIRCLE;
   style_btn_rel.text.color        = lv_color_hex3(0xDEF);
@@ -271,181 +270,171 @@ void lv_draw_dialog(uint8_t type) {
 
   static lv_style_t style_btn_pr;                                  // A variable to store the pressed style
   lv_style_copy(&style_btn_pr, &style_btn_rel);                    // Initialize from the released style
   style_btn_pr.body.border.color = lv_color_hex3(0x46B);
   style_btn_pr.body.main_color   = lv_color_hex3(0x8BD);
   style_btn_pr.body.grad_color   = lv_color_hex3(0x24A);
   style_btn_pr.body.shadow.width = 2;
   style_btn_pr.text.color        = lv_color_hex3(0xBCD);
   style_btn_pr.text.font         = &TERN(HAS_SPI_FLASH_FONT, gb2312_puhui32, lv_font_roboto_22);
 
-  lv_obj_t *labelDialog = lv_label_create(scr, NULL);
-  lv_obj_set_style(labelDialog, &tft_style_label_rel);
+  // Set button styles for Released and Pressed
+  auto lv_btn_use_button_style = [&](lv_obj_t *btn) {
+    lv_btn_set_style(btn, LV_BTN_STYLE_REL, &style_btn_rel);
+    lv_btn_set_style(btn, LV_BTN_STYLE_PR,  &style_btn_pr);
+  };
+
+  lv_obj_t *labelDialog = lv_label_create_empty(scr);
 
   if (uiCfg.dialogType == DIALOG_TYPE_FINISH_PRINT || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
       btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
       lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                // Set its position
       lv_obj_set_size(btnOk, 100, 50);                               // Set its size
       lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-      lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);     // Set the button's released style
-      lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);       // Set the button's pressed style
-      lv_obj_t *labelOk = lv_label_create(btnOk, NULL);             // Add a label to the button
+      lv_btn_use_button_style(btnOk);
+      lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
       lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
   }
   else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_WAITING
         || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_INSERT
         || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_HEAT
   ) {
     btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
     lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                // Set its position
     lv_obj_set_size(btnOk, 100, 50);                               // Set its size
     lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);     // Set the button's released style
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);       // Set the button's pressed style
-    lv_obj_t *labelOk = lv_label_create(btnOk, NULL);             // Add a label to the button
+    lv_btn_use_button_style(btnOk);
+    lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
     lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
   }
   else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_PAUSING
         || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_CHANGING
         || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_UNLOAD
         || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_LOAD
         || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_PURGE
         || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_RESUME
         || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_HEATING
   ) {
     // nothing to do
   }
   else if (uiCfg.dialogType == WIFI_ENABLE_TIPS) {
     btnCancel = lv_btn_create(scr, NULL);
     lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
     lv_obj_set_size(btnCancel, 100, 50);
     lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-    lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel);
-    lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);
-    lv_obj_t *labelCancel = lv_label_create(btnCancel, NULL);
+    lv_btn_use_button_style(btnCancel);
+    lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
     lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
   }
   else if (uiCfg.dialogType == DIALOG_TRANSFER_NO_DEVICE) {
     btnCancel = lv_btn_create(scr, NULL);
     lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
     lv_obj_set_size(btnCancel, 100, 50);
     lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-    lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel);
-    lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);
-    lv_obj_t *labelCancel = lv_label_create(btnCancel, NULL);
+    lv_btn_use_button_style(btnCancel);
+    lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
     lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
   }
   #if ENABLED(USE_WIFI_FUNCTION)
     else if (uiCfg.dialogType == DIALOG_TYPE_UPLOAD_FILE) {
       if (upload_result == 2) {
         btnCancel = lv_btn_create(scr, NULL);
         lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
         lv_obj_set_size(btnCancel, 100, 50);
         lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-        lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel);
-        lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);
-        lv_obj_t *labelCancel = lv_label_create(btnCancel, NULL);
+        lv_btn_use_button_style(btnCancel);
+        lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
         lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
       }
       else if (upload_result == 3) {
         btnOk = lv_btn_create(scr, NULL);
         lv_obj_set_pos(btnOk, BTN_OK_X+90, BTN_OK_Y);
         lv_obj_set_size(btnOk, 100, 50);
         lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-        lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);
-        lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);
-        lv_obj_t *labelOk = lv_label_create(btnOk, NULL);
+        lv_btn_use_button_style(btnOk);
+        lv_obj_t *labelOk = lv_label_create_empty(btnOk);
         lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
       }
     }
   #endif //USE_WIFI_FUNCTION
   else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_HEAT
         || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_HEAT
   ) {
     btnCancel = lv_btn_create(scr, NULL);
     lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
     lv_obj_set_size(btnCancel, 100, 50);
     lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-    lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel);
-    lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);
-    lv_obj_t *labelCancel = lv_label_create(btnCancel, NULL);
+    lv_btn_use_button_style(btnCancel);
+    lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
     lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
 
-    tempText1 = lv_label_create(scr, NULL);
-    lv_obj_set_style(tempText1, &tft_style_label_rel);
+    tempText1 = lv_label_create_empty(scr);
     filament_sprayer_temp();
   }
   else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_COMPLETED
         || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_COMPLETED
   ) {
     btnOk = lv_btn_create(scr, NULL);
-    lv_obj_set_pos(btnOk, BTN_OK_X+90, BTN_OK_Y);
+    lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);
     lv_obj_set_size(btnOk, 100, 50);
     lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);
-    lv_obj_t *labelOk = lv_label_create(btnOk, NULL);
+    lv_btn_use_button_style(btnOk);
+    lv_obj_t *labelOk = lv_label_create_empty(btnOk);
     lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
   }
   else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOADING
         || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOADING
   ) {
     btnCancel = lv_btn_create(scr, NULL);
     lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
     lv_obj_set_size(btnCancel, 100, 50);
     lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-    lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel);
-    lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);
-    lv_obj_t *labelCancel = lv_label_create(btnCancel, NULL);
+    lv_btn_use_button_style(btnCancel);
+    lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);
     lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
 
     filament_bar = lv_bar_create(scr, NULL);
     lv_obj_set_pos(filament_bar, (TFT_WIDTH-400)/2, ((TFT_HEIGHT - titleHeight)-40)/2);
     lv_obj_set_size(filament_bar, 400, 25);
     lv_bar_set_style(filament_bar, LV_BAR_STYLE_INDIC, &lv_bar_style_indic);
     lv_bar_set_anim_time(filament_bar, 1000);
     lv_bar_set_value(filament_bar, 0, LV_ANIM_ON);
   }
   else {
     btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
     lv_obj_set_pos(btnOk, BTN_OK_X, BTN_OK_Y);                     // Set its position
     lv_obj_set_size(btnOk, 100, 50);                               // Set its size
     lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);     // Set the button's released style
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);       // Set the button's pressed style
-    lv_obj_t *labelOk = lv_label_create(btnOk, NULL);             // Add a label to the button
+    lv_btn_use_button_style(btnOk);
+    lv_obj_t *labelOk = lv_label_create_empty(btnOk);             // Add a label to the button
 
     btnCancel = lv_btn_create(scr, NULL);               // Add a button the current screen
     lv_obj_set_pos(btnCancel, BTN_CANCEL_X, BTN_CANCEL_Y);         // Set its position
     lv_obj_set_size(btnCancel, 100, 50);                           // Set its size
     lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-    lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel); // Set the button's released style
-    lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);   // Set the button's pressed style
-    lv_obj_t *labelCancel = lv_label_create(btnCancel, NULL);     // Add a label to the button
+    lv_btn_use_button_style(btnCancel);
+    lv_obj_t *labelCancel = lv_label_create_empty(btnCancel);     // Add a label to the button
 
     if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
       lv_label_set_text(labelOk, pause_msg_menu.purgeMore);        // Set the labels text
       lv_label_set_text(labelCancel, pause_msg_menu.continuePrint);
     }
     else {
       lv_label_set_text(labelOk, print_file_dialog_menu.confirm);  // Set the labels text
       lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
     }
   }
   if (uiCfg.dialogType == DIALOG_TYPE_PRINT_FILE) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.print_file);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
 
-    lv_obj_t *labelFile = lv_label_create(scr, NULL);
-    lv_obj_set_style(labelFile, &tft_style_label_rel);
-
-    lv_label_set_text(labelFile, list_file.long_name[sel_id]);
+    lv_obj_t *labelFile = lv_label_create(scr, list_file.long_name[sel_id]);
     lv_obj_align(labelFile, NULL, LV_ALIGN_CENTER, 0, -60);
   }
   else if (uiCfg.dialogType == DIALOG_TYPE_STOP) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.cancle_print);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
   else if (uiCfg.dialogType == DIALOG_TYPE_FINISH_PRINT) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.print_finish);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
@@ -551,21 +540,20 @@ void lv_draw_dialog(uint8_t type) {
         sprintf(&buf[_index], " %d s\n", (int)upload_time);
 
         strcat(buf, DIALOG_UPLOAD_SPEED_EN);
         _index = strlen(buf);
         buf[_index] = ':';
         _index++;
         sprintf(&buf[_index], " %d KBytes/s\n", (int)(upload_size / upload_time / 1024));
 
         lv_label_set_text(labelDialog, buf);
         lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
-
       }
     }
   #endif //USE_WIFI_FUNCTION
   else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_HEAT) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
   else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED) {
     lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat_confirm);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
@@ -627,35 +615,32 @@ void filament_dialog_handle() {
     filament_sprayer_temp();
     temperature_change_frequency = 0;
   }
   if (uiCfg.filament_heat_completed_load == 1) {
     uiCfg.filament_heat_completed_load = 0;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOADING);
     planner.synchronize();
     uiCfg.filament_loading_time_flg = 1;
     uiCfg.filament_loading_time_cnt = 0;
-    ZERO(public_buf_m);
-    sprintf_P(public_buf_m,PSTR("T%d\nG91\nG1 E%d F%d\nG90"),uiCfg.curSprayerChoose,gCfgItems.filamentchange_load_length,gCfgItems.filamentchange_load_speed);
-    queue.inject_P(PSTR(public_buf_m));
-    //gcode.process_subcommands_now_P(PSTR(public_buf_m));
+    sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E%d F%d\nG90"), uiCfg.curSprayerChoose, gCfgItems.filamentchange_load_length, gCfgItems.filamentchange_load_speed);
+    queue.inject(public_buf_m);
   }
   if (uiCfg.filament_heat_completed_unload == 1) {
     uiCfg.filament_heat_completed_unload = 0;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOADING);
     planner.synchronize();
     uiCfg.filament_unloading_time_flg = 1;
     uiCfg.filament_unloading_time_cnt = 0;
-    ZERO(public_buf_m);
-    sprintf_P(public_buf_m,PSTR("T%d\nG91\nG1 E-%d F%d\nG90"),uiCfg.curSprayerChoose,gCfgItems.filamentchange_unload_length,gCfgItems.filamentchange_unload_speed);
-    queue.inject_P(PSTR(public_buf_m));
+    sprintf_P(public_buf_m, PSTR("T%d\nG91\nG1 E-%d F%d\nG90"), uiCfg.curSprayerChoose, gCfgItems.filamentchange_unload_length, gCfgItems.filamentchange_unload_speed);
+    queue.inject(public_buf_m);
   }
 
   if (((abs((int)((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius - gCfgItems.filament_limit_temper)) <= 1)
     || ((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius > gCfgItems.filament_limit_temper))
     && (uiCfg.filament_load_heat_flg == 1)
   ) {
     uiCfg.filament_load_heat_flg = 0;
     lv_clear_dialog();
     lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED);
   }

commit 072f996af70b5ac635893eca2d4bd4bbb4f00acc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 21 12:45:27 2020 -0500

    General cleanup, mostly MKS UI (#19825)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index c848323010..489d8466ce 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -21,52 +21,50 @@
  */
 
 /**
  * draw_dialog.cpp
  */
 
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
-#include "lv_conf.h"
 #include "draw_ui.h"
+#include <lv_conf.h>
 
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
-#include "../../../../MarlinCore.h"
 #include "../../../../sd/cardreader.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../module/temperature.h"
 #include "../../../../module/planner.h"
 #include "../../../../gcode/gcode.h"
+#include "../../../../inc/MarlinConfig.h"
 
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "../../../../feature/powerloss.h"
 #endif
 
 #if ENABLED(PARK_HEAD_ON_PAUSE)
   #include "../../../../feature/pause.h"
 #endif
-#include "../../../../gcode/gcode.h"
 
 extern lv_group_t * g;
 static lv_obj_t * scr;
 static lv_obj_t * tempText1;
 static lv_obj_t * filament_bar;
 
 extern uint8_t sel_id;
-extern uint8_t once_flag;
-extern uint8_t gcode_preview_over;
+extern bool once_flag, gcode_preview_over;
 extern int upload_result ;
 extern uint32_t upload_time;
 extern uint32_t upload_size;
 extern uint8_t temperature_change_frequency;
 
 static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
   if (event == LV_EVENT_CLICKED) {
     // nothing to do
   }
   else if (event == LV_EVENT_RELEASED) {
@@ -75,21 +73,21 @@ static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
         preview_gcode_prehandle(list_file.file_name[sel_id]);
       #endif
       reset_print_time();
       start_print_time();
 
       uiCfg.print_state = WORKING;
       lv_clear_dialog();
       lv_draw_printing();
 
       #if ENABLED(SDSUPPORT)
-        if (gcode_preview_over != 1) {
+        if (!gcode_preview_over) {
           char *cur_name;
           cur_name = strrchr(list_file.file_name[sel_id], '/');
 
           SdFile file, *curDir;
           card.endFilePrint();
           const char * const fname = card.diveToFile(true, curDir, cur_name);
           if (!fname) return;
           if (file.open(curDir, fname, O_READ)) {
             gCfgItems.curFilesize = file.fileSize();
             file.close();
@@ -102,21 +100,21 @@ static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
             planner.flow_percentage[0] = 100;
             planner.e_factor[0]        = planner.flow_percentage[0] * 0.01f;
             #if HAS_MULTI_EXTRUDER
               planner.flow_percentage[1] = 100;
               planner.e_factor[1]        = planner.flow_percentage[1] * 0.01f;
             #endif
             card.startFileprint();
             #if ENABLED(POWER_LOSS_RECOVERY)
               recovery.prepare();
             #endif
-            once_flag = 0;
+            once_flag = false;
           }
         }
       #endif
     }
     else if (uiCfg.dialogType == DIALOG_TYPE_STOP) {
       wait_for_heatup = false;
       stop_print_time();
       lv_clear_dialog();
       lv_draw_ready_print();
 

commit d8ed74904559aa8bdccc8b68acbccfbf1bf779d3
Author: makerbase <4164049@qq.com>
Date:   Mon Sep 21 09:55:02 2020 +0800

    Add MKS Robin E3P, improve LVGL UI (#19442)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 3b4fc8d207..c848323010 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -34,44 +34,50 @@
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../MarlinCore.h"
 #include "../../../../sd/cardreader.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../module/temperature.h"
 #include "../../../../module/planner.h"
+#include "../../../../gcode/gcode.h"
 
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "../../../../feature/powerloss.h"
 #endif
 
 #if ENABLED(PARK_HEAD_ON_PAUSE)
   #include "../../../../feature/pause.h"
 #endif
 #include "../../../../gcode/gcode.h"
 
-#include "pic_manager.h"
-
+extern lv_group_t * g;
 static lv_obj_t * scr;
+static lv_obj_t * tempText1;
+static lv_obj_t * filament_bar;
+
 extern uint8_t sel_id;
 extern uint8_t once_flag;
 extern uint8_t gcode_preview_over;
-uint8_t DialogType;
+extern int upload_result ;
+extern uint32_t upload_time;
+extern uint32_t upload_size;
+extern uint8_t temperature_change_frequency;
 
 static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
   if (event == LV_EVENT_CLICKED) {
     // nothing to do
   }
   else if (event == LV_EVENT_RELEASED) {
-    if (DialogType == DIALOG_TYPE_PRINT_FILE) {
+    if (uiCfg.dialogType == DIALOG_TYPE_PRINT_FILE) {
       #if HAS_GCODE_PREVIEW
         preview_gcode_prehandle(list_file.file_name[sel_id]);
       #endif
       reset_print_time();
       start_print_time();
 
       uiCfg.print_state = WORKING;
       lv_clear_dialog();
       lv_draw_printing();
 
@@ -101,21 +107,22 @@ static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
             #endif
             card.startFileprint();
             #if ENABLED(POWER_LOSS_RECOVERY)
               recovery.prepare();
             #endif
             once_flag = 0;
           }
         }
       #endif
     }
-    else if (DialogType == DIALOG_TYPE_STOP) {
+    else if (uiCfg.dialogType == DIALOG_TYPE_STOP) {
+      wait_for_heatup = false;
       stop_print_time();
       lv_clear_dialog();
       lv_draw_ready_print();
 
       #if ENABLED(SDSUPPORT)
         //card.endFilePrint();
         //wait_for_heatup = false;
         uiCfg.print_state           = IDLE;
         card.flag.abort_sd_printing = true;
         //queue.clear();
@@ -123,99 +130,141 @@ static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
         //print_job_timer.stop();
         //thermalManager.disable_all_heaters();
 
         //#if ENABLED(POWER_LOSS_RECOVERY)
         //  recovery.purge();
         //#endif
         //queue.enqueue_now_P(PSTR("G91\nG1 Z10\nG90\nG28 X0 Y0"));
         //queue.inject_P(PSTR("G91\nG1 Z10\nG90\nG28 X0 Y0\nM84\nM107"));
       #endif
     }
-    else if (DialogType == DIALOG_TYPE_FINISH_PRINT) {
+    else if (uiCfg.dialogType == DIALOG_TYPE_FINISH_PRINT) {
       clear_cur_ui();
       lv_draw_ready_print();
     }
     #if ENABLED(ADVANCED_PAUSE_FEATURE)
-      else if (DialogType == DIALOG_PAUSE_MESSAGE_WAITING
-            || DialogType == DIALOG_PAUSE_MESSAGE_INSERT
-            || DialogType == DIALOG_PAUSE_MESSAGE_HEAT
+      else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_WAITING
+            || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_INSERT
+            || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_HEAT
       ) {
         wait_for_user = false;
       }
-      else if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
+      else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
         pause_menu_response = PAUSE_RESPONSE_EXTRUDE_MORE;
       }
-      else if (DialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
+      else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
         clear_cur_ui();
         draw_return_ui();
       }
     #endif
-    else if (DialogType == DIALOG_STORE_EEPROM_TIPS) {
+    else if (uiCfg.dialogType == DIALOG_STORE_EEPROM_TIPS) {
       gcode.process_subcommands_now_P(PSTR("M500"));
       clear_cur_ui();
       draw_return_ui();
     }
-    else if (DialogType == DIALOG_READ_EEPROM_TIPS) {
+    else if (uiCfg.dialogType == DIALOG_READ_EEPROM_TIPS) {
       gcode.process_subcommands_now_P(PSTR("M501"));
       clear_cur_ui();
       draw_return_ui();
     }
-    else if (DialogType == DIALOG_REVERT_EEPROM_TIPS) {
+    else if (uiCfg.dialogType == DIALOG_REVERT_EEPROM_TIPS) {
       gcode.process_subcommands_now_P(PSTR("M502"));
       clear_cur_ui();
       draw_return_ui();
     }
+    else if (uiCfg.dialogType == DIALOG_WIFI_CONFIG_TIPS) {
+      uiCfg.configWifi = 1;
+      clear_cur_ui();
+      draw_return_ui();
+    }
+    else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED) {
+      uiCfg.filament_heat_completed_load = 1;
+    }
+    else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED) {
+      uiCfg.filament_heat_completed_unload = 1;
+    }
+    else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_COMPLETED
+          || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_COMPLETED
+    ) {
+      clear_cur_ui();
+      draw_return_ui();
+    }
   }
 }
 
 static void btn_cancel_event_cb(lv_obj_t * btn, lv_event_t event) {
   if (event == LV_EVENT_CLICKED) {
     // nothing to do
   }
   else if (event == LV_EVENT_RELEASED) {
-    if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
+    if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
       #if ENABLED(ADVANCED_PAUSE_FEATURE)
         pause_menu_response = PAUSE_RESPONSE_RESUME_PRINT;
       #endif
     }
+    else if ((uiCfg.dialogType      == DIALOG_TYPE_FILAMENT_LOAD_HEAT)
+          || (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_HEAT)
+          || (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED)
+          || (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED)
+    ) {
+      thermalManager.temp_hotend[uiCfg.curSprayerChoose].target= uiCfg.desireSprayerTempBak;
+      clear_cur_ui();
+      draw_return_ui();
+    }
+    else if ((uiCfg.dialogType   == DIALOG_TYPE_FILAMENT_LOADING)
+       || (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOADING)
+    ) {
+      queue.enqueue_one_P(PSTR("M410"));
+      uiCfg.filament_rate                = 0;
+      uiCfg.filament_loading_completed   = 0;
+      uiCfg.filament_unloading_completed = 0;
+      uiCfg.filament_loading_time_flg    = 0;
+      uiCfg.filament_loading_time_cnt    = 0;
+      uiCfg.filament_unloading_time_flg  = 0;
+      uiCfg.filament_unloading_time_cnt  = 0;
+      thermalManager.temp_hotend[uiCfg.curSprayerChoose].target = uiCfg.desireSprayerTempBak;
+      clear_cur_ui();
+      draw_return_ui();
+    }
     else {
       clear_cur_ui();
       draw_return_ui();
     }
   }
 }
 
 void lv_draw_dialog(uint8_t type) {
 
+  lv_obj_t * btnOk = NULL;
+  lv_obj_t * btnCancel = NULL;
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != DIALOG_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = DIALOG_UI;
   }
   disp_state = DIALOG_UI;
 
-  DialogType = type;
+  uiCfg.dialogType = type;
 
   scr = lv_obj_create(NULL, NULL);
 
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
   lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
-  //LV_IMG_DECLARE(bmp_pic);
 
   static lv_style_t style_btn_rel;                                 // A variable to store the released style
   lv_style_copy(&style_btn_rel, &lv_style_plain);                  // Initialize from a built-in style
   style_btn_rel.body.border.color = lv_color_hex3(0x269);
   style_btn_rel.body.border.width = 1;
   style_btn_rel.body.main_color   = lv_color_hex3(0xADF);
   style_btn_rel.body.grad_color   = lv_color_hex3(0x46B);
   style_btn_rel.body.shadow.width = 4;
   style_btn_rel.body.shadow.type  = LV_SHADOW_BOTTOM;
   style_btn_rel.body.radius       = LV_RADIUS_CIRCLE;
@@ -224,151 +273,431 @@ void lv_draw_dialog(uint8_t type) {
 
   static lv_style_t style_btn_pr;                                  // A variable to store the pressed style
   lv_style_copy(&style_btn_pr, &style_btn_rel);                    // Initialize from the released style
   style_btn_pr.body.border.color = lv_color_hex3(0x46B);
   style_btn_pr.body.main_color   = lv_color_hex3(0x8BD);
   style_btn_pr.body.grad_color   = lv_color_hex3(0x24A);
   style_btn_pr.body.shadow.width = 2;
   style_btn_pr.text.color        = lv_color_hex3(0xBCD);
   style_btn_pr.text.font         = &TERN(HAS_SPI_FLASH_FONT, gb2312_puhui32, lv_font_roboto_22);
 
-  lv_obj_t * labelDialog = lv_label_create(scr, NULL);
+  lv_obj_t *labelDialog = lv_label_create(scr, NULL);
   lv_obj_set_style(labelDialog, &tft_style_label_rel);
 
-  if (DialogType == DIALOG_TYPE_FINISH_PRINT || DialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
-    lv_obj_t * btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
-    lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                // Set its position
-    lv_obj_set_size(btnOk, 100, 50);                               // Set its size
-    lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);     // Set the button's released style
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);       // Set the button's pressed style
-    lv_obj_t * labelOk = lv_label_create(btnOk, NULL);             // Add a label to the button
-    lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
+  if (uiCfg.dialogType == DIALOG_TYPE_FINISH_PRINT || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
+      btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
+      lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                // Set its position
+      lv_obj_set_size(btnOk, 100, 50);                               // Set its size
+      lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
+      lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);     // Set the button's released style
+      lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);       // Set the button's pressed style
+      lv_obj_t *labelOk = lv_label_create(btnOk, NULL);             // Add a label to the button
+      lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_WAITING
-        || DialogType == DIALOG_PAUSE_MESSAGE_INSERT
-        || DialogType == DIALOG_PAUSE_MESSAGE_HEAT
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_WAITING
+        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_INSERT
+        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_HEAT
   ) {
-    lv_obj_t * btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
+    btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
     lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                // Set its position
     lv_obj_set_size(btnOk, 100, 50);                               // Set its size
     lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
     lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);     // Set the button's released style
     lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);       // Set the button's pressed style
-    lv_obj_t * labelOk = lv_label_create(btnOk, NULL);             // Add a label to the button
+    lv_obj_t *labelOk = lv_label_create(btnOk, NULL);             // Add a label to the button
     lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_PAUSING
-        || DialogType == DIALOG_PAUSE_MESSAGE_CHANGING
-        || DialogType == DIALOG_PAUSE_MESSAGE_UNLOAD
-        || DialogType == DIALOG_PAUSE_MESSAGE_LOAD
-        || DialogType == DIALOG_PAUSE_MESSAGE_PURGE
-        || DialogType == DIALOG_PAUSE_MESSAGE_RESUME
-        || DialogType == DIALOG_PAUSE_MESSAGE_HEATING
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_PAUSING
+        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_CHANGING
+        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_UNLOAD
+        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_LOAD
+        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_PURGE
+        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_RESUME
+        || uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_HEATING
   ) {
     // nothing to do
   }
+  else if (uiCfg.dialogType == WIFI_ENABLE_TIPS) {
+    btnCancel = lv_btn_create(scr, NULL);
+    lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
+    lv_obj_set_size(btnCancel, 100, 50);
+    lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
+    lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel);
+    lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);
+    lv_obj_t *labelCancel = lv_label_create(btnCancel, NULL);
+    lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
+  }
+  else if (uiCfg.dialogType == DIALOG_TRANSFER_NO_DEVICE) {
+    btnCancel = lv_btn_create(scr, NULL);
+    lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
+    lv_obj_set_size(btnCancel, 100, 50);
+    lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
+    lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel);
+    lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);
+    lv_obj_t *labelCancel = lv_label_create(btnCancel, NULL);
+    lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
+  }
+  #if ENABLED(USE_WIFI_FUNCTION)
+    else if (uiCfg.dialogType == DIALOG_TYPE_UPLOAD_FILE) {
+      if (upload_result == 2) {
+        btnCancel = lv_btn_create(scr, NULL);
+        lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
+        lv_obj_set_size(btnCancel, 100, 50);
+        lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
+        lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel);
+        lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);
+        lv_obj_t *labelCancel = lv_label_create(btnCancel, NULL);
+        lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
+      }
+      else if (upload_result == 3) {
+        btnOk = lv_btn_create(scr, NULL);
+        lv_obj_set_pos(btnOk, BTN_OK_X+90, BTN_OK_Y);
+        lv_obj_set_size(btnOk, 100, 50);
+        lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
+        lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);
+        lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);
+        lv_obj_t *labelOk = lv_label_create(btnOk, NULL);
+        lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
+      }
+    }
+  #endif //USE_WIFI_FUNCTION
+  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_HEAT
+        || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_HEAT
+  ) {
+    btnCancel = lv_btn_create(scr, NULL);
+    lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
+    lv_obj_set_size(btnCancel, 100, 50);
+    lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
+    lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel);
+    lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);
+    lv_obj_t *labelCancel = lv_label_create(btnCancel, NULL);
+    lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
+
+    tempText1 = lv_label_create(scr, NULL);
+    lv_obj_set_style(tempText1, &tft_style_label_rel);
+    filament_sprayer_temp();
+  }
+  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_COMPLETED
+        || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_COMPLETED
+  ) {
+    btnOk = lv_btn_create(scr, NULL);
+    lv_obj_set_pos(btnOk, BTN_OK_X+90, BTN_OK_Y);
+    lv_obj_set_size(btnOk, 100, 50);
+    lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);
+    lv_obj_t *labelOk = lv_label_create(btnOk, NULL);
+    lv_label_set_text(labelOk, print_file_dialog_menu.confirm);
+  }
+  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOADING
+        || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOADING
+  ) {
+    btnCancel = lv_btn_create(scr, NULL);
+    lv_obj_set_pos(btnCancel, BTN_OK_X+90, BTN_OK_Y);
+    lv_obj_set_size(btnCancel, 100, 50);
+    lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
+    lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel);
+    lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);
+    lv_obj_t *labelCancel = lv_label_create(btnCancel, NULL);
+    lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
+
+    filament_bar = lv_bar_create(scr, NULL);
+    lv_obj_set_pos(filament_bar, (TFT_WIDTH-400)/2, ((TFT_HEIGHT - titleHeight)-40)/2);
+    lv_obj_set_size(filament_bar, 400, 25);
+    lv_bar_set_style(filament_bar, LV_BAR_STYLE_INDIC, &lv_bar_style_indic);
+    lv_bar_set_anim_time(filament_bar, 1000);
+    lv_bar_set_value(filament_bar, 0, LV_ANIM_ON);
+  }
   else {
-    lv_obj_t * btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
+    btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
     lv_obj_set_pos(btnOk, BTN_OK_X, BTN_OK_Y);                     // Set its position
     lv_obj_set_size(btnOk, 100, 50);                               // Set its size
     lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
     lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);     // Set the button's released style
     lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);       // Set the button's pressed style
-    lv_obj_t * labelOk = lv_label_create(btnOk, NULL);             // Add a label to the button
+    lv_obj_t *labelOk = lv_label_create(btnOk, NULL);             // Add a label to the button
 
-    lv_obj_t * btnCancel = lv_btn_create(scr, NULL);               // Add a button the current screen
+    btnCancel = lv_btn_create(scr, NULL);               // Add a button the current screen
     lv_obj_set_pos(btnCancel, BTN_CANCEL_X, BTN_CANCEL_Y);         // Set its position
     lv_obj_set_size(btnCancel, 100, 50);                           // Set its size
     lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
     lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel); // Set the button's released style
     lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);   // Set the button's pressed style
-    lv_obj_t * labelCancel = lv_label_create(btnCancel, NULL);     // Add a label to the button
+    lv_obj_t *labelCancel = lv_label_create(btnCancel, NULL);     // Add a label to the button
 
-    if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
+    if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
       lv_label_set_text(labelOk, pause_msg_menu.purgeMore);        // Set the labels text
       lv_label_set_text(labelCancel, pause_msg_menu.continuePrint);
     }
     else {
       lv_label_set_text(labelOk, print_file_dialog_menu.confirm);  // Set the labels text
       lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
     }
   }
-  if (DialogType == DIALOG_TYPE_PRINT_FILE) {
+  if (uiCfg.dialogType == DIALOG_TYPE_PRINT_FILE) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.print_file);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
 
-    lv_obj_t * labelFile = lv_label_create(scr, NULL);
+    lv_obj_t *labelFile = lv_label_create(scr, NULL);
     lv_obj_set_style(labelFile, &tft_style_label_rel);
 
     lv_label_set_text(labelFile, list_file.long_name[sel_id]);
     lv_obj_align(labelFile, NULL, LV_ALIGN_CENTER, 0, -60);
   }
-  else if (DialogType == DIALOG_TYPE_STOP) {
+  else if (uiCfg.dialogType == DIALOG_TYPE_STOP) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.cancle_print);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_TYPE_FINISH_PRINT) {
+  else if (uiCfg.dialogType == DIALOG_TYPE_FINISH_PRINT) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.print_finish);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_PAUSING) {
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_PAUSING) {
     lv_label_set_text(labelDialog, pause_msg_menu.pausing);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_CHANGING) {
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_CHANGING) {
     lv_label_set_text(labelDialog, pause_msg_menu.changing);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_UNLOAD) {
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_UNLOAD) {
     lv_label_set_text(labelDialog, pause_msg_menu.unload);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_WAITING) {
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_WAITING) {
     lv_label_set_text(labelDialog, pause_msg_menu.waiting);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_INSERT) {
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_INSERT) {
     lv_label_set_text(labelDialog, pause_msg_menu.insert);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_LOAD) {
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_LOAD) {
     lv_label_set_text(labelDialog, pause_msg_menu.load);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_PURGE) {
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_PURGE) {
     lv_label_set_text(labelDialog, pause_msg_menu.purge);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
     lv_label_set_text(labelDialog, pause_msg_menu.resume);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_HEAT) {
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_HEAT) {
     lv_label_set_text(labelDialog, pause_msg_menu.heat);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_HEATING) {
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_HEATING) {
     lv_label_set_text(labelDialog, pause_msg_menu.heating);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
+  else if (uiCfg.dialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
     lv_label_set_text(labelDialog, pause_msg_menu.option);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_STORE_EEPROM_TIPS) {
+  else if (uiCfg.dialogType == DIALOG_STORE_EEPROM_TIPS) {
     lv_label_set_text(labelDialog, eeprom_menu.storeTips);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_READ_EEPROM_TIPS) {
+  else if (uiCfg.dialogType == DIALOG_READ_EEPROM_TIPS) {
     lv_label_set_text(labelDialog, eeprom_menu.readTips);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
-  else if (DialogType == DIALOG_REVERT_EEPROM_TIPS) {
+  else if (uiCfg.dialogType == DIALOG_REVERT_EEPROM_TIPS) {
     lv_label_set_text(labelDialog, eeprom_menu.revertTips);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
+  else if (uiCfg.dialogType == DIALOG_WIFI_CONFIG_TIPS) {
+    lv_label_set_text(labelDialog, machine_menu.wifiConfigTips);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (uiCfg.dialogType == WIFI_ENABLE_TIPS) {
+    lv_label_set_text(labelDialog, print_file_dialog_menu.wifi_enable_tips);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (uiCfg.dialogType == DIALOG_TRANSFER_NO_DEVICE) {
+    lv_label_set_text(labelDialog, DIALOG_UPDATE_NO_DEVICE_EN);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  #if ENABLED(USE_WIFI_FUNCTION)
+    else if (uiCfg.dialogType == DIALOG_TYPE_UPLOAD_FILE) {
+      if (upload_result == 1) {
+        lv_label_set_text(labelDialog, DIALOG_UPLOAD_ING_EN);
+        lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+      }
+      else if (upload_result == 2) {
+        lv_label_set_text(labelDialog, DIALOG_UPLOAD_ERROR_EN);
+        lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+      }
+      else if (upload_result == 3) {
+        char buf[200];
+        int _index = 0;
+
+        ZERO(buf);
+
+        strcpy(buf, DIALOG_UPLOAD_FINISH_EN);
+        _index = strlen(buf);
+        buf[_index] = '\n';
+        _index++;
+        strcat(buf, DIALOG_UPLOAD_SIZE_EN);
+
+        _index = strlen(buf);
+        buf[_index] = ':';
+        _index++;
+        sprintf(&buf[_index], " %d KBytes\n", (int)(upload_size / 1024));
+
+        strcat(buf, DIALOG_UPLOAD_TIME_EN);
+        _index = strlen(buf);
+        buf[_index] = ':';
+        _index++;
+        sprintf(&buf[_index], " %d s\n", (int)upload_time);
+
+        strcat(buf, DIALOG_UPLOAD_SPEED_EN);
+        _index = strlen(buf);
+        buf[_index] = ':';
+        _index++;
+        sprintf(&buf[_index], " %d KBytes/s\n", (int)(upload_size / upload_time / 1024));
+
+        lv_label_set_text(labelDialog, buf);
+        lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+
+      }
+    }
+  #endif //USE_WIFI_FUNCTION
+  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_HEAT) {
+    lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED) {
+    lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_heat_confirm);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_HEAT) {
+    lv_label_set_text(labelDialog, filament_menu.filament_dialog_unload_heat);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED) {
+    lv_label_set_text(labelDialog, filament_menu.filament_dialog_unload_heat_confirm);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_COMPLETED) {
+    lv_label_set_text(labelDialog, filament_menu.filament_dialog_load_completed);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOAD_COMPLETED) {
+    lv_label_set_text(labelDialog, filament_menu.filament_dialog_unload_completed);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOADING) {
+    lv_label_set_text(labelDialog, filament_menu.filament_dialog_loading);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -70);
+  }
+  else if (uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOADING) {
+    lv_label_set_text(labelDialog, filament_menu.filament_dialog_unloading);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -70);
+  }
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) {
+      if (btnOk) lv_group_add_obj(g, btnOk);
+      if (btnCancel) lv_group_add_obj(g, btnCancel);
+    }
+  #endif
+}
+
+void filament_sprayer_temp() {
+  char buf[20] = {0};
+
+  public_buf_l[0] = '\0';
+
+  if (uiCfg.curSprayerChoose < 1)
+    strcat(public_buf_l, preheat_menu.ext1);
+  else
+    strcat(public_buf_l, preheat_menu.ext2);
+  sprintf(buf, preheat_menu.value_state, (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius,  (int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].target);
+
+  strcat_P(public_buf_l, PSTR(": "));
+  strcat(public_buf_l, buf);
+  lv_label_set_text(tempText1, public_buf_l);
+  lv_obj_align(tempText1, NULL, LV_ALIGN_CENTER, 0, -50);
+}
+
+void filament_dialog_handle() {
+  if ((temperature_change_frequency == 1)
+      && ((uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOAD_HEAT)
+      || (uiCfg.dialogType  == DIALOG_TYPE_FILAMENT_UNLOAD_HEAT))
+  ) {
+    filament_sprayer_temp();
+    temperature_change_frequency = 0;
+  }
+  if (uiCfg.filament_heat_completed_load == 1) {
+    uiCfg.filament_heat_completed_load = 0;
+    lv_clear_dialog();
+    lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOADING);
+    planner.synchronize();
+    uiCfg.filament_loading_time_flg = 1;
+    uiCfg.filament_loading_time_cnt = 0;
+    ZERO(public_buf_m);
+    sprintf_P(public_buf_m,PSTR("T%d\nG91\nG1 E%d F%d\nG90"),uiCfg.curSprayerChoose,gCfgItems.filamentchange_load_length,gCfgItems.filamentchange_load_speed);
+    queue.inject_P(PSTR(public_buf_m));
+    //gcode.process_subcommands_now_P(PSTR(public_buf_m));
+  }
+  if (uiCfg.filament_heat_completed_unload == 1) {
+    uiCfg.filament_heat_completed_unload = 0;
+    lv_clear_dialog();
+    lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOADING);
+    planner.synchronize();
+    uiCfg.filament_unloading_time_flg = 1;
+    uiCfg.filament_unloading_time_cnt = 0;
+    ZERO(public_buf_m);
+    sprintf_P(public_buf_m,PSTR("T%d\nG91\nG1 E-%d F%d\nG90"),uiCfg.curSprayerChoose,gCfgItems.filamentchange_unload_length,gCfgItems.filamentchange_unload_speed);
+    queue.inject_P(PSTR(public_buf_m));
+  }
+
+  if (((abs((int)((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius - gCfgItems.filament_limit_temper)) <= 1)
+    || ((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius > gCfgItems.filament_limit_temper))
+    && (uiCfg.filament_load_heat_flg == 1)
+  ) {
+    uiCfg.filament_load_heat_flg = 0;
+    lv_clear_dialog();
+    lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_LOAD_COMPLETED);
+  }
+
+  if (uiCfg.filament_loading_completed == 1) {
+    uiCfg.filament_rate = 0;
+    uiCfg.filament_loading_completed = 0;
+    lv_clear_dialog();
+    lv_draw_dialog(DIALOG_TYPE_FILAMENT_LOAD_COMPLETED);
+  }
+  if (((abs((int)((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius - gCfgItems.filament_limit_temper)) <= 1)
+     || ((int)thermalManager.temp_hotend[uiCfg.curSprayerChoose].celsius > gCfgItems.filament_limit_temper))
+     && (uiCfg.filament_unload_heat_flg == 1)
+  ) {
+    uiCfg.filament_unload_heat_flg = 0;
+    lv_clear_dialog();
+    lv_draw_dialog(DIALOG_TYPE_FILAMENT_HEAT_UNLOAD_COMPLETED);
+  }
+
+  if (uiCfg.filament_unloading_completed == 1) {
+    uiCfg.filament_rate = 0;
+    uiCfg.filament_unloading_completed = 0;
+    lv_clear_dialog();
+    lv_draw_dialog(DIALOG_TYPE_FILAMENT_UNLOAD_COMPLETED);
+  }
+
+  if ( uiCfg.dialogType == DIALOG_TYPE_FILAMENT_LOADING
+    || uiCfg.dialogType == DIALOG_TYPE_FILAMENT_UNLOADING
+  ) lv_filament_setbar();
 }
 
-void lv_clear_dialog() { lv_obj_del(scr); }
+void lv_filament_setbar() {
+  lv_bar_set_value(filament_bar, uiCfg.filament_rate, LV_ANIM_ON);
+}
+
+void lv_clear_dialog() {
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
+  #endif
+  lv_obj_del(scr);
+}
 
 #endif // HAS_TFT_LVGL_UI

commit 76d8d1742c1d4a1efe0fd6c0645d3fc656bfd0b2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 20 18:29:08 2020 -0500

    Add multi-extruder condition

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index aad5e4362e..3b4fc8d207 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -88,21 +88,21 @@ static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
             gCfgItems.curFilesize = file.fileSize();
             file.close();
             update_spi_flash();
           }
           card.openFileRead(cur_name);
           if (card.isFileOpen()) {
             feedrate_percentage = 100;
             //saved_feedrate_percentage = feedrate_percentage;
             planner.flow_percentage[0] = 100;
             planner.e_factor[0]        = planner.flow_percentage[0] * 0.01f;
-            #if EXTRUDERS == 2
+            #if HAS_MULTI_EXTRUDER
               planner.flow_percentage[1] = 100;
               planner.e_factor[1]        = planner.flow_percentage[1] * 0.01f;
             #endif
             card.startFileprint();
             #if ENABLED(POWER_LOSS_RECOVERY)
               recovery.prepare();
             #endif
             once_flag = 0;
           }
         }

commit ff5c8d35705df99f385a6b27163380a249c2e646
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Thu Aug 13 20:31:59 2020 -0300

    Optimize LVGL with HAL TFT IO (SPI and FSMC) (#18974)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 9ef27afc9b..aad5e4362e 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -44,20 +44,22 @@
 
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "../../../../feature/powerloss.h"
 #endif
 
 #if ENABLED(PARK_HEAD_ON_PAUSE)
   #include "../../../../feature/pause.h"
 #endif
 #include "../../../../gcode/gcode.h"
 
+#include "pic_manager.h"
+
 static lv_obj_t * scr;
 extern uint8_t sel_id;
 extern uint8_t once_flag;
 extern uint8_t gcode_preview_over;
 uint8_t DialogType;
 
 static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
   if (event == LV_EVENT_CLICKED) {
     // nothing to do
   }

commit d20d4591321aa467c062f0050355d2aca84e03ad
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Sat Jul 25 13:52:07 2020 +0800

    Robin nano V2, TFT LVGL UI parameters, and more (#18500)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 19d2452142..9ef27afc9b 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -19,42 +19,44 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 /**
  * draw_dialog.cpp
  */
 
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LVGL_UI)
+#if HAS_TFT_LVGL_UI
 
 #include "lv_conf.h"
 #include "draw_ui.h"
+
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../MarlinCore.h"
 #include "../../../../sd/cardreader.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../module/temperature.h"
 #include "../../../../module/planner.h"
 
 #if ENABLED(POWER_LOSS_RECOVERY)
   #include "../../../../feature/powerloss.h"
 #endif
 
 #if ENABLED(PARK_HEAD_ON_PAUSE)
   #include "../../../../feature/pause.h"
 #endif
+#include "../../../../gcode/gcode.h"
 
 static lv_obj_t * scr;
 extern uint8_t sel_id;
 extern uint8_t once_flag;
 extern uint8_t gcode_preview_over;
 uint8_t DialogType;
 
 static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
   if (event == LV_EVENT_CLICKED) {
     // nothing to do
@@ -65,74 +67,71 @@ static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
         preview_gcode_prehandle(list_file.file_name[sel_id]);
       #endif
       reset_print_time();
       start_print_time();
 
       uiCfg.print_state = WORKING;
       lv_clear_dialog();
       lv_draw_printing();
 
       #if ENABLED(SDSUPPORT)
-      if (gcode_preview_over != 1) {
-        char *cur_name;
-        cur_name = strrchr(list_file.file_name[sel_id], '/');
-
-        SdFile file, *curDir;
-        card.endFilePrint();
-        const char * const fname = card.diveToFile(true, curDir, cur_name);
-        if (!fname) return;
-        if (file.open(curDir, fname, O_READ)) {
-          gCfgItems.curFilesize = file.fileSize();
-          file.close();
-          update_spi_flash();
-        }
-        card.openFileRead(cur_name);
-        if (card.isFileOpen()) {
-          feedrate_percentage = 100;
-          //saved_feedrate_percentage = feedrate_percentage;
-          planner.flow_percentage[0] = 100;
-          planner.e_factor[0] = planner.flow_percentage[0] * 0.01f;
-          #if EXTRUDERS == 2
-            planner.flow_percentage[1] = 100;
-            planner.e_factor[1] = planner.flow_percentage[1] * 0.01f;
-          #endif
-          card.startFileprint();
-          #if ENABLED(POWER_LOSS_RECOVERY)
-            recovery.prepare();
-          #endif
-          once_flag = 0;
+        if (gcode_preview_over != 1) {
+          char *cur_name;
+          cur_name = strrchr(list_file.file_name[sel_id], '/');
+
+          SdFile file, *curDir;
+          card.endFilePrint();
+          const char * const fname = card.diveToFile(true, curDir, cur_name);
+          if (!fname) return;
+          if (file.open(curDir, fname, O_READ)) {
+            gCfgItems.curFilesize = file.fileSize();
+            file.close();
+            update_spi_flash();
+          }
+          card.openFileRead(cur_name);
+          if (card.isFileOpen()) {
+            feedrate_percentage = 100;
+            //saved_feedrate_percentage = feedrate_percentage;
+            planner.flow_percentage[0] = 100;
+            planner.e_factor[0]        = planner.flow_percentage[0] * 0.01f;
+            #if EXTRUDERS == 2
+              planner.flow_percentage[1] = 100;
+              planner.e_factor[1]        = planner.flow_percentage[1] * 0.01f;
+            #endif
+            card.startFileprint();
+            #if ENABLED(POWER_LOSS_RECOVERY)
+              recovery.prepare();
+            #endif
+            once_flag = 0;
+          }
         }
-      }
       #endif
     }
     else if (DialogType == DIALOG_TYPE_STOP) {
       stop_print_time();
       lv_clear_dialog();
       lv_draw_ready_print();
 
       #if ENABLED(SDSUPPORT)
         //card.endFilePrint();
         //wait_for_heatup = false;
-        uiCfg.print_state = IDLE;
+        uiCfg.print_state           = IDLE;
         card.flag.abort_sd_printing = true;
         //queue.clear();
         //quickstop_stepper();
         //print_job_timer.stop();
         //thermalManager.disable_all_heaters();
 
         //#if ENABLED(POWER_LOSS_RECOVERY)
-        //recovery.purge();
+        //  recovery.purge();
         //#endif
-        //queue.enqueue_one_now(PSTR("G91"));
-        //queue.enqueue_one_now(PSTR("G1 Z10"));
-        //queue.enqueue_one_now(PSTR("G90"));
-        //queue.enqueue_one_now(PSTR("G28 X0 Y0"));
+        //queue.enqueue_now_P(PSTR("G91\nG1 Z10\nG90\nG28 X0 Y0"));
         //queue.inject_P(PSTR("G91\nG1 Z10\nG90\nG28 X0 Y0\nM84\nM107"));
       #endif
     }
     else if (DialogType == DIALOG_TYPE_FINISH_PRINT) {
       clear_cur_ui();
       lv_draw_ready_print();
     }
     #if ENABLED(ADVANCED_PAUSE_FEATURE)
       else if (DialogType == DIALOG_PAUSE_MESSAGE_WAITING
             || DialogType == DIALOG_PAUSE_MESSAGE_INSERT
@@ -141,20 +140,35 @@ static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
         wait_for_user = false;
       }
       else if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
         pause_menu_response = PAUSE_RESPONSE_EXTRUDE_MORE;
       }
       else if (DialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
         clear_cur_ui();
         draw_return_ui();
       }
     #endif
+    else if (DialogType == DIALOG_STORE_EEPROM_TIPS) {
+      gcode.process_subcommands_now_P(PSTR("M500"));
+      clear_cur_ui();
+      draw_return_ui();
+    }
+    else if (DialogType == DIALOG_READ_EEPROM_TIPS) {
+      gcode.process_subcommands_now_P(PSTR("M501"));
+      clear_cur_ui();
+      draw_return_ui();
+    }
+    else if (DialogType == DIALOG_REVERT_EEPROM_TIPS) {
+      gcode.process_subcommands_now_P(PSTR("M502"));
+      clear_cur_ui();
+      draw_return_ui();
+    }
   }
 }
 
 static void btn_cancel_event_cb(lv_obj_t * btn, lv_event_t event) {
   if (event == LV_EVENT_CLICKED) {
     // nothing to do
   }
   else if (event == LV_EVENT_RELEASED) {
     if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
       #if ENABLED(ADVANCED_PAUSE_FEATURE)
@@ -179,116 +193,117 @@ void lv_draw_dialog(uint8_t type) {
   DialogType = type;
 
   scr = lv_obj_create(NULL, NULL);
 
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   //LV_IMG_DECLARE(bmp_pic);
 
-  static lv_style_t style_btn_rel;                                   // A variable to store the released style
-  lv_style_copy(&style_btn_rel, &lv_style_plain);                    // Initialize from a built-in style
+  static lv_style_t style_btn_rel;                                 // A variable to store the released style
+  lv_style_copy(&style_btn_rel, &lv_style_plain);                  // Initialize from a built-in style
   style_btn_rel.body.border.color = lv_color_hex3(0x269);
   style_btn_rel.body.border.width = 1;
-  style_btn_rel.body.main_color = lv_color_hex3(0xADF);
-  style_btn_rel.body.grad_color = lv_color_hex3(0x46B);
+  style_btn_rel.body.main_color   = lv_color_hex3(0xADF);
+  style_btn_rel.body.grad_color   = lv_color_hex3(0x46B);
   style_btn_rel.body.shadow.width = 4;
-  style_btn_rel.body.shadow.type = LV_SHADOW_BOTTOM;
-  style_btn_rel.body.radius = LV_RADIUS_CIRCLE;
-  style_btn_rel.text.color = lv_color_hex3(0xDEF);
-  style_btn_rel.text.font = &lv_font_roboto_22;
+  style_btn_rel.body.shadow.type  = LV_SHADOW_BOTTOM;
+  style_btn_rel.body.radius       = LV_RADIUS_CIRCLE;
+  style_btn_rel.text.color        = lv_color_hex3(0xDEF);
+  style_btn_rel.text.font         = &TERN(HAS_SPI_FLASH_FONT, gb2312_puhui32, lv_font_roboto_22);
 
-  static lv_style_t style_btn_pr;                                    // A variable to store the pressed style
-  lv_style_copy(&style_btn_pr, &style_btn_rel);                      // Initialize from the released style
+  static lv_style_t style_btn_pr;                                  // A variable to store the pressed style
+  lv_style_copy(&style_btn_pr, &style_btn_rel);                    // Initialize from the released style
   style_btn_pr.body.border.color = lv_color_hex3(0x46B);
-  style_btn_pr.body.main_color = lv_color_hex3(0x8BD);
-  style_btn_pr.body.grad_color = lv_color_hex3(0x24A);
+  style_btn_pr.body.main_color   = lv_color_hex3(0x8BD);
+  style_btn_pr.body.grad_color   = lv_color_hex3(0x24A);
   style_btn_pr.body.shadow.width = 2;
-  style_btn_pr.text.color = lv_color_hex3(0xBCD);
-  style_btn_pr.text.font = &lv_font_roboto_22;
+  style_btn_pr.text.color        = lv_color_hex3(0xBCD);
+  style_btn_pr.text.font         = &TERN(HAS_SPI_FLASH_FONT, gb2312_puhui32, lv_font_roboto_22);
 
   lv_obj_t * labelDialog = lv_label_create(scr, NULL);
-  lv_obj_set_style(labelDialog, &tft_style_lable_rel);
+  lv_obj_set_style(labelDialog, &tft_style_label_rel);
 
   if (DialogType == DIALOG_TYPE_FINISH_PRINT || DialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
-    lv_obj_t * btnOk = lv_btn_create(scr, NULL);                     // Add a button the current screen
-    lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                  // Set its position
-    lv_obj_set_size(btnOk, 100, 50);                                 // Set its size
+    lv_obj_t * btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
+    lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                // Set its position
+    lv_obj_set_size(btnOk, 100, 50);                               // Set its size
     lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);       // Set the button's released style
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);         // Set the button's pressed style
-    lv_obj_t * labelOk = lv_label_create(btnOk, NULL);               // Add a label to the button
-    lv_label_set_text(labelOk, print_file_dialog_menu.confirm);      // Set the labels text
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);     // Set the button's released style
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);       // Set the button's pressed style
+    lv_obj_t * labelOk = lv_label_create(btnOk, NULL);             // Add a label to the button
+    lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
   }
   else if (DialogType == DIALOG_PAUSE_MESSAGE_WAITING
-           || DialogType == DIALOG_PAUSE_MESSAGE_INSERT
-           || DialogType == DIALOG_PAUSE_MESSAGE_HEAT) {
-    lv_obj_t * btnOk = lv_btn_create(scr, NULL);                     // Add a button the current screen
-    lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                  // Set its position
-    lv_obj_set_size(btnOk, 100, 50);                                 // Set its size
+        || DialogType == DIALOG_PAUSE_MESSAGE_INSERT
+        || DialogType == DIALOG_PAUSE_MESSAGE_HEAT
+  ) {
+    lv_obj_t * btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
+    lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                // Set its position
+    lv_obj_set_size(btnOk, 100, 50);                               // Set its size
     lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);       // Set the button's released style
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);         // Set the button's pressed style
-    lv_obj_t * labelOk = lv_label_create(btnOk, NULL);               // Add a label to the button
-    lv_label_set_text(labelOk, print_file_dialog_menu.confirm);      // Set the labels text
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);     // Set the button's released style
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);       // Set the button's pressed style
+    lv_obj_t * labelOk = lv_label_create(btnOk, NULL);             // Add a label to the button
+    lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
   }
   else if (DialogType == DIALOG_PAUSE_MESSAGE_PAUSING
         || DialogType == DIALOG_PAUSE_MESSAGE_CHANGING
         || DialogType == DIALOG_PAUSE_MESSAGE_UNLOAD
         || DialogType == DIALOG_PAUSE_MESSAGE_LOAD
         || DialogType == DIALOG_PAUSE_MESSAGE_PURGE
         || DialogType == DIALOG_PAUSE_MESSAGE_RESUME
         || DialogType == DIALOG_PAUSE_MESSAGE_HEATING
   ) {
     // nothing to do
   }
   else {
-    lv_obj_t * btnOk = lv_btn_create(scr, NULL);                     // Add a button the current screen
-    lv_obj_set_pos(btnOk, BTN_OK_X, BTN_OK_Y);                       // Set its position
-    lv_obj_set_size(btnOk, 100, 50);                                 // Set its size
+    lv_obj_t * btnOk = lv_btn_create(scr, NULL);                   // Add a button the current screen
+    lv_obj_set_pos(btnOk, BTN_OK_X, BTN_OK_Y);                     // Set its position
+    lv_obj_set_size(btnOk, 100, 50);                               // Set its size
     lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);       // Set the button's released style
-    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);         // Set the button's pressed style
-    lv_obj_t * labelOk = lv_label_create(btnOk, NULL);               // Add a label to the button
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);     // Set the button's released style
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);       // Set the button's pressed style
+    lv_obj_t * labelOk = lv_label_create(btnOk, NULL);             // Add a label to the button
 
-    lv_obj_t * btnCancel = lv_btn_create(scr, NULL);                 // Add a button the current screen
-    lv_obj_set_pos(btnCancel, BTN_CANCEL_X, BTN_CANCEL_Y);           // Set its position
-    lv_obj_set_size(btnCancel, 100, 50);                             // Set its size
+    lv_obj_t * btnCancel = lv_btn_create(scr, NULL);               // Add a button the current screen
+    lv_obj_set_pos(btnCancel, BTN_CANCEL_X, BTN_CANCEL_Y);         // Set its position
+    lv_obj_set_size(btnCancel, 100, 50);                           // Set its size
     lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
-    lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel);   // Set the button's released style
-    lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);     // Set the button's pressed style
-    lv_obj_t * labelCancel = lv_label_create(btnCancel, NULL);       // Add a label to the button
+    lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel); // Set the button's released style
+    lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);   // Set the button's pressed style
+    lv_obj_t * labelCancel = lv_label_create(btnCancel, NULL);     // Add a label to the button
 
     if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
-      lv_label_set_text(labelOk, pause_msg_menu.purgeMore);          // Set the labels text
+      lv_label_set_text(labelOk, pause_msg_menu.purgeMore);        // Set the labels text
       lv_label_set_text(labelCancel, pause_msg_menu.continuePrint);
     }
     else {
-      lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
+      lv_label_set_text(labelOk, print_file_dialog_menu.confirm);  // Set the labels text
       lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
     }
   }
   if (DialogType == DIALOG_TYPE_PRINT_FILE) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.print_file);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
 
     lv_obj_t * labelFile = lv_label_create(scr, NULL);
-    lv_obj_set_style(labelFile, &tft_style_lable_rel);
+    lv_obj_set_style(labelFile, &tft_style_label_rel);
 
     lv_label_set_text(labelFile, list_file.long_name[sel_id]);
     lv_obj_align(labelFile, NULL, LV_ALIGN_CENTER, 0, -60);
   }
   else if (DialogType == DIALOG_TYPE_STOP) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.cancle_print);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DialogType == DIALOG_TYPE_FINISH_PRINT) {
     lv_label_set_text(labelDialog, print_file_dialog_menu.print_finish);
@@ -331,15 +346,27 @@ void lv_draw_dialog(uint8_t type) {
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DialogType == DIALOG_PAUSE_MESSAGE_HEATING) {
     lv_label_set_text(labelDialog, pause_msg_menu.heating);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
     lv_label_set_text(labelDialog, pause_msg_menu.option);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
+  else if (DialogType == DIALOG_STORE_EEPROM_TIPS) {
+    lv_label_set_text(labelDialog, eeprom_menu.storeTips);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_READ_EEPROM_TIPS) {
+    lv_label_set_text(labelDialog, eeprom_menu.readTips);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_REVERT_EEPROM_TIPS) {
+    lv_label_set_text(labelDialog, eeprom_menu.revertTips);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
 }
 
 void lv_clear_dialog() { lv_obj_del(scr); }
 
-#endif // TFT_LVGL_UI
+#endif // HAS_TFT_LVGL_UI

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index c87df26b1d..19d2452142 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 /**
  * draw_dialog.cpp
  */
 
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if ENABLED(TFT_LVGL_UI)

commit e5bc9d31cc87be5c7ef2bd3cd70c2599f76d2bd7
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Jul 1 03:30:24 2020 -0300

    Add TFT_LVGL_UI support (#18438)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
index 5620af8c99..c87df26b1d 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -19,21 +19,21 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 /**
  * draw_dialog.cpp
  */
 
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LITTLE_VGL_UI)
+#if ENABLED(TFT_LVGL_UI)
 
 #include "lv_conf.h"
 #include "draw_ui.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../MarlinCore.h"
 #include "../../../../sd/cardreader.h"
@@ -54,21 +54,23 @@ extern uint8_t sel_id;
 extern uint8_t once_flag;
 extern uint8_t gcode_preview_over;
 uint8_t DialogType;
 
 static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
   if (event == LV_EVENT_CLICKED) {
     // nothing to do
   }
   else if (event == LV_EVENT_RELEASED) {
     if (DialogType == DIALOG_TYPE_PRINT_FILE) {
-      preview_gcode_prehandle(list_file.file_name[sel_id]);
+      #if HAS_GCODE_PREVIEW
+        preview_gcode_prehandle(list_file.file_name[sel_id]);
+      #endif
       reset_print_time();
       start_print_time();
 
       uiCfg.print_state = WORKING;
       lv_clear_dialog();
       lv_draw_printing();
 
       #if ENABLED(SDSUPPORT)
       if (gcode_preview_over != 1) {
         char *cur_name;
@@ -195,30 +197,30 @@ void lv_draw_dialog(uint8_t type) {
   static lv_style_t style_btn_rel;                                   // A variable to store the released style
   lv_style_copy(&style_btn_rel, &lv_style_plain);                    // Initialize from a built-in style
   style_btn_rel.body.border.color = lv_color_hex3(0x269);
   style_btn_rel.body.border.width = 1;
   style_btn_rel.body.main_color = lv_color_hex3(0xADF);
   style_btn_rel.body.grad_color = lv_color_hex3(0x46B);
   style_btn_rel.body.shadow.width = 4;
   style_btn_rel.body.shadow.type = LV_SHADOW_BOTTOM;
   style_btn_rel.body.radius = LV_RADIUS_CIRCLE;
   style_btn_rel.text.color = lv_color_hex3(0xDEF);
-  style_btn_rel.text.font = &gb2312_puhui32;
+  style_btn_rel.text.font = &lv_font_roboto_22;
 
   static lv_style_t style_btn_pr;                                    // A variable to store the pressed style
   lv_style_copy(&style_btn_pr, &style_btn_rel);                      // Initialize from the released style
   style_btn_pr.body.border.color = lv_color_hex3(0x46B);
   style_btn_pr.body.main_color = lv_color_hex3(0x8BD);
   style_btn_pr.body.grad_color = lv_color_hex3(0x24A);
   style_btn_pr.body.shadow.width = 2;
   style_btn_pr.text.color = lv_color_hex3(0xBCD);
-  style_btn_pr.text.font = &gb2312_puhui32;
+  style_btn_pr.text.font = &lv_font_roboto_22;
 
   lv_obj_t * labelDialog = lv_label_create(scr, NULL);
   lv_obj_set_style(labelDialog, &tft_style_lable_rel);
 
   if (DialogType == DIALOG_TYPE_FINISH_PRINT || DialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
     lv_obj_t * btnOk = lv_btn_create(scr, NULL);                     // Add a button the current screen
     lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                  // Set its position
     lv_obj_set_size(btnOk, 100, 50);                                 // Set its size
     lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
     lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);       // Set the button's released style
@@ -333,11 +335,11 @@ void lv_draw_dialog(uint8_t type) {
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
   else if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
     lv_label_set_text(labelDialog, pause_msg_menu.option);
     lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
   }
 }
 
 void lv_clear_dialog() { lv_obj_del(scr); }
 
-#endif // TFT_LITTLE_VGL_UI
+#endif // TFT_LVGL_UI

commit 642112d3eb7c1af9a52feec8134c85ed3e34891c
Author: makerbase <4164049@qq.com>
Date:   Tue Jun 16 10:05:33 2020 +0800

    Add MKS UI (TFT_LITTLE_VGL_UI) (#18071)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
new file mode 100644
index 0000000000..5620af8c99
--- /dev/null
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_dialog.cpp
@@ -0,0 +1,343 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * draw_dialog.cpp
+ */
+
+#include "../../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(TFT_LITTLE_VGL_UI)
+
+#include "lv_conf.h"
+#include "draw_ui.h"
+//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
+//#include "../lvgl/src/lv_objx/lv_img.h"
+//#include "../lvgl/src/lv_core/lv_disp.h"
+//#include "../lvgl/src/lv_core/lv_refr.h"
+
+#include "../../../../MarlinCore.h"
+#include "../../../../sd/cardreader.h"
+#include "../../../../gcode/queue.h"
+#include "../../../../module/temperature.h"
+#include "../../../../module/planner.h"
+
+#if ENABLED(POWER_LOSS_RECOVERY)
+  #include "../../../../feature/powerloss.h"
+#endif
+
+#if ENABLED(PARK_HEAD_ON_PAUSE)
+  #include "../../../../feature/pause.h"
+#endif
+
+static lv_obj_t * scr;
+extern uint8_t sel_id;
+extern uint8_t once_flag;
+extern uint8_t gcode_preview_over;
+uint8_t DialogType;
+
+static void btn_ok_event_cb(lv_obj_t * btn, lv_event_t event) {
+  if (event == LV_EVENT_CLICKED) {
+    // nothing to do
+  }
+  else if (event == LV_EVENT_RELEASED) {
+    if (DialogType == DIALOG_TYPE_PRINT_FILE) {
+      preview_gcode_prehandle(list_file.file_name[sel_id]);
+      reset_print_time();
+      start_print_time();
+
+      uiCfg.print_state = WORKING;
+      lv_clear_dialog();
+      lv_draw_printing();
+
+      #if ENABLED(SDSUPPORT)
+      if (gcode_preview_over != 1) {
+        char *cur_name;
+        cur_name = strrchr(list_file.file_name[sel_id], '/');
+
+        SdFile file, *curDir;
+        card.endFilePrint();
+        const char * const fname = card.diveToFile(true, curDir, cur_name);
+        if (!fname) return;
+        if (file.open(curDir, fname, O_READ)) {
+          gCfgItems.curFilesize = file.fileSize();
+          file.close();
+          update_spi_flash();
+        }
+        card.openFileRead(cur_name);
+        if (card.isFileOpen()) {
+          feedrate_percentage = 100;
+          //saved_feedrate_percentage = feedrate_percentage;
+          planner.flow_percentage[0] = 100;
+          planner.e_factor[0] = planner.flow_percentage[0] * 0.01f;
+          #if EXTRUDERS == 2
+            planner.flow_percentage[1] = 100;
+            planner.e_factor[1] = planner.flow_percentage[1] * 0.01f;
+          #endif
+          card.startFileprint();
+          #if ENABLED(POWER_LOSS_RECOVERY)
+            recovery.prepare();
+          #endif
+          once_flag = 0;
+        }
+      }
+      #endif
+    }
+    else if (DialogType == DIALOG_TYPE_STOP) {
+      stop_print_time();
+      lv_clear_dialog();
+      lv_draw_ready_print();
+
+      #if ENABLED(SDSUPPORT)
+        //card.endFilePrint();
+        //wait_for_heatup = false;
+        uiCfg.print_state = IDLE;
+        card.flag.abort_sd_printing = true;
+        //queue.clear();
+        //quickstop_stepper();
+        //print_job_timer.stop();
+        //thermalManager.disable_all_heaters();
+
+        //#if ENABLED(POWER_LOSS_RECOVERY)
+        //recovery.purge();
+        //#endif
+        //queue.enqueue_one_now(PSTR("G91"));
+        //queue.enqueue_one_now(PSTR("G1 Z10"));
+        //queue.enqueue_one_now(PSTR("G90"));
+        //queue.enqueue_one_now(PSTR("G28 X0 Y0"));
+        //queue.inject_P(PSTR("G91\nG1 Z10\nG90\nG28 X0 Y0\nM84\nM107"));
+      #endif
+    }
+    else if (DialogType == DIALOG_TYPE_FINISH_PRINT) {
+      clear_cur_ui();
+      lv_draw_ready_print();
+    }
+    #if ENABLED(ADVANCED_PAUSE_FEATURE)
+      else if (DialogType == DIALOG_PAUSE_MESSAGE_WAITING
+            || DialogType == DIALOG_PAUSE_MESSAGE_INSERT
+            || DialogType == DIALOG_PAUSE_MESSAGE_HEAT
+      ) {
+        wait_for_user = false;
+      }
+      else if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
+        pause_menu_response = PAUSE_RESPONSE_EXTRUDE_MORE;
+      }
+      else if (DialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
+        clear_cur_ui();
+        draw_return_ui();
+      }
+    #endif
+  }
+}
+
+static void btn_cancel_event_cb(lv_obj_t * btn, lv_event_t event) {
+  if (event == LV_EVENT_CLICKED) {
+    // nothing to do
+  }
+  else if (event == LV_EVENT_RELEASED) {
+    if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
+      #if ENABLED(ADVANCED_PAUSE_FEATURE)
+        pause_menu_response = PAUSE_RESPONSE_RESUME_PRINT;
+      #endif
+    }
+    else {
+      clear_cur_ui();
+      draw_return_ui();
+    }
+  }
+}
+
+void lv_draw_dialog(uint8_t type) {
+
+  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != DIALOG_UI) {
+    disp_state_stack._disp_index++;
+    disp_state_stack._disp_state[disp_state_stack._disp_index] = DIALOG_UI;
+  }
+  disp_state = DIALOG_UI;
+
+  DialogType = type;
+
+  scr = lv_obj_create(NULL, NULL);
+
+
+  lv_obj_set_style(scr, &tft_style_scr);
+  lv_scr_load(scr);
+  lv_obj_clean(scr);
+
+  lv_obj_t * title = lv_label_create(scr, NULL);
+  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
+  lv_label_set_text(title, creat_title_text());
+
+  lv_refr_now(lv_refr_get_disp_refreshing());
+
+  //LV_IMG_DECLARE(bmp_pic);
+
+  static lv_style_t style_btn_rel;                                   // A variable to store the released style
+  lv_style_copy(&style_btn_rel, &lv_style_plain);                    // Initialize from a built-in style
+  style_btn_rel.body.border.color = lv_color_hex3(0x269);
+  style_btn_rel.body.border.width = 1;
+  style_btn_rel.body.main_color = lv_color_hex3(0xADF);
+  style_btn_rel.body.grad_color = lv_color_hex3(0x46B);
+  style_btn_rel.body.shadow.width = 4;
+  style_btn_rel.body.shadow.type = LV_SHADOW_BOTTOM;
+  style_btn_rel.body.radius = LV_RADIUS_CIRCLE;
+  style_btn_rel.text.color = lv_color_hex3(0xDEF);
+  style_btn_rel.text.font = &gb2312_puhui32;
+
+  static lv_style_t style_btn_pr;                                    // A variable to store the pressed style
+  lv_style_copy(&style_btn_pr, &style_btn_rel);                      // Initialize from the released style
+  style_btn_pr.body.border.color = lv_color_hex3(0x46B);
+  style_btn_pr.body.main_color = lv_color_hex3(0x8BD);
+  style_btn_pr.body.grad_color = lv_color_hex3(0x24A);
+  style_btn_pr.body.shadow.width = 2;
+  style_btn_pr.text.color = lv_color_hex3(0xBCD);
+  style_btn_pr.text.font = &gb2312_puhui32;
+
+  lv_obj_t * labelDialog = lv_label_create(scr, NULL);
+  lv_obj_set_style(labelDialog, &tft_style_lable_rel);
+
+  if (DialogType == DIALOG_TYPE_FINISH_PRINT || DialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
+    lv_obj_t * btnOk = lv_btn_create(scr, NULL);                     // Add a button the current screen
+    lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                  // Set its position
+    lv_obj_set_size(btnOk, 100, 50);                                 // Set its size
+    lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);       // Set the button's released style
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);         // Set the button's pressed style
+    lv_obj_t * labelOk = lv_label_create(btnOk, NULL);               // Add a label to the button
+    lv_label_set_text(labelOk, print_file_dialog_menu.confirm);      // Set the labels text
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_WAITING
+           || DialogType == DIALOG_PAUSE_MESSAGE_INSERT
+           || DialogType == DIALOG_PAUSE_MESSAGE_HEAT) {
+    lv_obj_t * btnOk = lv_btn_create(scr, NULL);                     // Add a button the current screen
+    lv_obj_set_pos(btnOk, BTN_OK_X + 90, BTN_OK_Y);                  // Set its position
+    lv_obj_set_size(btnOk, 100, 50);                                 // Set its size
+    lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);       // Set the button's released style
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);         // Set the button's pressed style
+    lv_obj_t * labelOk = lv_label_create(btnOk, NULL);               // Add a label to the button
+    lv_label_set_text(labelOk, print_file_dialog_menu.confirm);      // Set the labels text
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_PAUSING
+        || DialogType == DIALOG_PAUSE_MESSAGE_CHANGING
+        || DialogType == DIALOG_PAUSE_MESSAGE_UNLOAD
+        || DialogType == DIALOG_PAUSE_MESSAGE_LOAD
+        || DialogType == DIALOG_PAUSE_MESSAGE_PURGE
+        || DialogType == DIALOG_PAUSE_MESSAGE_RESUME
+        || DialogType == DIALOG_PAUSE_MESSAGE_HEATING
+  ) {
+    // nothing to do
+  }
+  else {
+    lv_obj_t * btnOk = lv_btn_create(scr, NULL);                     // Add a button the current screen
+    lv_obj_set_pos(btnOk, BTN_OK_X, BTN_OK_Y);                       // Set its position
+    lv_obj_set_size(btnOk, 100, 50);                                 // Set its size
+    lv_obj_set_event_cb(btnOk, btn_ok_event_cb);
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_REL, &style_btn_rel);       // Set the button's released style
+    lv_btn_set_style(btnOk, LV_BTN_STYLE_PR, &style_btn_pr);         // Set the button's pressed style
+    lv_obj_t * labelOk = lv_label_create(btnOk, NULL);               // Add a label to the button
+
+    lv_obj_t * btnCancel = lv_btn_create(scr, NULL);                 // Add a button the current screen
+    lv_obj_set_pos(btnCancel, BTN_CANCEL_X, BTN_CANCEL_Y);           // Set its position
+    lv_obj_set_size(btnCancel, 100, 50);                             // Set its size
+    lv_obj_set_event_cb(btnCancel, btn_cancel_event_cb);
+    lv_btn_set_style(btnCancel, LV_BTN_STYLE_REL, &style_btn_rel);   // Set the button's released style
+    lv_btn_set_style(btnCancel, LV_BTN_STYLE_PR, &style_btn_pr);     // Set the button's pressed style
+    lv_obj_t * labelCancel = lv_label_create(btnCancel, NULL);       // Add a label to the button
+
+    if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
+      lv_label_set_text(labelOk, pause_msg_menu.purgeMore);          // Set the labels text
+      lv_label_set_text(labelCancel, pause_msg_menu.continuePrint);
+    }
+    else {
+      lv_label_set_text(labelOk, print_file_dialog_menu.confirm);    // Set the labels text
+      lv_label_set_text(labelCancel, print_file_dialog_menu.cancle);
+    }
+  }
+  if (DialogType == DIALOG_TYPE_PRINT_FILE) {
+    lv_label_set_text(labelDialog, print_file_dialog_menu.print_file);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+
+    lv_obj_t * labelFile = lv_label_create(scr, NULL);
+    lv_obj_set_style(labelFile, &tft_style_lable_rel);
+
+    lv_label_set_text(labelFile, list_file.long_name[sel_id]);
+    lv_obj_align(labelFile, NULL, LV_ALIGN_CENTER, 0, -60);
+  }
+  else if (DialogType == DIALOG_TYPE_STOP) {
+    lv_label_set_text(labelDialog, print_file_dialog_menu.cancle_print);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_TYPE_FINISH_PRINT) {
+    lv_label_set_text(labelDialog, print_file_dialog_menu.print_finish);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_PAUSING) {
+    lv_label_set_text(labelDialog, pause_msg_menu.pausing);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_CHANGING) {
+    lv_label_set_text(labelDialog, pause_msg_menu.changing);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_UNLOAD) {
+    lv_label_set_text(labelDialog, pause_msg_menu.unload);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_WAITING) {
+    lv_label_set_text(labelDialog, pause_msg_menu.waiting);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_INSERT) {
+    lv_label_set_text(labelDialog, pause_msg_menu.insert);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_LOAD) {
+    lv_label_set_text(labelDialog, pause_msg_menu.load);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_PURGE) {
+    lv_label_set_text(labelDialog, pause_msg_menu.purge);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_RESUME) {
+    lv_label_set_text(labelDialog, pause_msg_menu.resume);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_HEAT) {
+    lv_label_set_text(labelDialog, pause_msg_menu.heat);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_HEATING) {
+    lv_label_set_text(labelDialog, pause_msg_menu.heating);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+  else if (DialogType == DIALOG_PAUSE_MESSAGE_OPTION) {
+    lv_label_set_text(labelDialog, pause_msg_menu.option);
+    lv_obj_align(labelDialog, NULL, LV_ALIGN_CENTER, 0, -20);
+  }
+}
+
+void lv_clear_dialog() { lv_obj_del(scr); }
+
+#endif // TFT_LITTLE_VGL_UI
