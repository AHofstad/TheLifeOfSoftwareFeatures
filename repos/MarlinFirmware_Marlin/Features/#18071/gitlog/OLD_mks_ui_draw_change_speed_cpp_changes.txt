commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
deleted file mode 100644
index 635625950b..0000000000
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ /dev/null
@@ -1,225 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-#include "../../../../inc/MarlinConfigPre.h"
-
-#if HAS_TFT_LVGL_UI
-
-#include "draw_ui.h"
-#include <lv_conf.h>
-
-#include "../../../../module/planner.h"
-#include "../../../../inc/MarlinConfig.h"
-
-extern lv_group_t *g;
-static lv_obj_t *scr;
-static lv_obj_t *labelStep, *buttonStep, *buttonMov, *buttonExt;
-static lv_obj_t *labelMov, *labelExt;
-static lv_obj_t *printSpeedText;
-
-enum {
-  ID_C_ADD = 1,
-  ID_C_DEC,
-  ID_C_MOVE,
-  ID_C_EXT,
-  ID_C_STEP,
-  ID_C_RETURN
-};
-
-static bool editingFlowrate;
-
-static void event_handler(lv_obj_t *obj, lv_event_t event) {
-  if (event != LV_EVENT_RELEASED) return;
-  switch (obj->mks_obj_id) {
-    case ID_C_ADD:
-      if (!editingFlowrate) {
-        if (feedrate_percentage < MAX_EXT_SPEED_PERCENT - uiCfg.stepPrintSpeed)
-          feedrate_percentage += uiCfg.stepPrintSpeed;
-        else
-          feedrate_percentage = MAX_EXT_SPEED_PERCENT;
-      }
-      else {
-        if (planner.flow_percentage[0] < MAX_EXT_SPEED_PERCENT - uiCfg.stepPrintSpeed)
-          planner.flow_percentage[0] += uiCfg.stepPrintSpeed;
-        else
-          planner.flow_percentage[0] = MAX_EXT_SPEED_PERCENT;
-        planner.refresh_e_factor(0);
-        #if HAS_MULTI_EXTRUDER
-          planner.flow_percentage[1] = planner.flow_percentage[0];
-          planner.refresh_e_factor(1);
-        #endif
-      }
-      disp_print_speed();
-      break;
-    case ID_C_DEC:
-      if (!editingFlowrate) {
-        if (feedrate_percentage > MIN_EXT_SPEED_PERCENT + uiCfg.stepPrintSpeed)
-          feedrate_percentage -= uiCfg.stepPrintSpeed;
-        else
-          feedrate_percentage = MIN_EXT_SPEED_PERCENT;
-      }
-      else {
-        if (planner.flow_percentage[0] > MIN_EXT_SPEED_PERCENT + uiCfg.stepPrintSpeed)
-          planner.flow_percentage[0] -= uiCfg.stepPrintSpeed;
-        else
-          planner.flow_percentage[0] = MIN_EXT_SPEED_PERCENT;
-        planner.refresh_e_factor(0);
-        #if HAS_MULTI_EXTRUDER
-          planner.flow_percentage[1] = planner.flow_percentage[0];
-          planner.refresh_e_factor(1);
-        #endif
-      }
-      disp_print_speed();
-      break;
-    case ID_C_MOVE:
-      editingFlowrate = false;
-      disp_speed_type();
-      disp_print_speed();
-      break;
-    case ID_C_EXT:
-      editingFlowrate = true;
-      disp_speed_type();
-      disp_print_speed();
-      break;
-    case ID_C_STEP:
-      if (uiCfg.stepPrintSpeed == 1)
-        uiCfg.stepPrintSpeed = 5;
-      else if (uiCfg.stepPrintSpeed == 5)
-        uiCfg.stepPrintSpeed = 10;
-      else
-        uiCfg.stepPrintSpeed = 1;
-      disp_speed_step();
-      break;
-    case ID_C_RETURN:
-      clear_cur_ui();
-      draw_return_ui();
-      break;
-  }
-}
-
-void lv_draw_change_speed() {
-  scr = lv_screen_create(CHANGE_SPEED_UI);
-  // Create an Image button
-  lv_big_button_create(scr, "F:/bmp_Add.bin", speed_menu.add, INTERVAL_V, titleHeight, event_handler, ID_C_ADD);
-  lv_big_button_create(scr, "F:/bmp_Dec.bin", speed_menu.dec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_C_DEC);
-  buttonMov  = lv_imgbtn_create(scr, nullptr, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_MOVE);
-  buttonExt  = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_EXT);
-  buttonStep = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_STEP);
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) {
-      lv_group_add_obj(g, buttonMov);
-      lv_group_add_obj(g, buttonExt);
-      lv_group_add_obj(g, buttonStep);
-    }
-  #endif
-  lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_RETURN);
-
-  // Create labels on the image buttons
-  labelMov  = lv_label_create_empty(buttonMov);
-  labelExt  = lv_label_create_empty(buttonExt);
-  labelStep = lv_label_create_empty(buttonStep);
-
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) {
-      lv_group_add_obj(g, buttonMov);
-      lv_group_add_obj(g, buttonExt);
-      lv_group_add_obj(g, buttonStep);
-    }
-  #endif
-
-  disp_speed_type();
-  disp_speed_step();
-
-  printSpeedText = lv_label_create_empty(scr);
-  lv_obj_set_style(printSpeedText, &tft_style_label_rel);
-  disp_print_speed();
-}
-
-void disp_speed_step() {
-  if (uiCfg.stepPrintSpeed == 1)
-    lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step1_percent.bin");
-  else if (uiCfg.stepPrintSpeed == 5)
-    lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step5_percent.bin");
-  else if (uiCfg.stepPrintSpeed == 10)
-    lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step10_percent.bin");
-
-  if (gCfgItems.multiple_language) {
-    if (uiCfg.stepPrintSpeed == 1) {
-      lv_label_set_text(labelStep, speed_menu.step_1percent);
-      lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-    }
-    else if (uiCfg.stepPrintSpeed == 5) {
-      lv_label_set_text(labelStep, speed_menu.step_5percent);
-      lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-    }
-    else if (uiCfg.stepPrintSpeed == 10) {
-      lv_label_set_text(labelStep, speed_menu.step_10percent);
-      lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-    }
-  }
-}
-
-void disp_print_speed() {
-  char buf[30] = { 0 };
-
-  public_buf_l[0] = '\0';
-
-  int16_t val;
-  const char *lbl;
-  if (editingFlowrate) {
-    lbl = speed_menu.extrude_speed;
-    val = planner.flow_percentage[0];
-  }
-  else {
-    lbl = speed_menu.move_speed;
-    val = feedrate_percentage;
-  }
-  strcpy(public_buf_l, lbl);
-  strcat_P(public_buf_l, PSTR(": "));
-  sprintf_P(buf, PSTR("%d%%"), val);
-  strcat(public_buf_l, buf);
-  lv_label_set_text(printSpeedText, public_buf_l);
-  lv_obj_align(printSpeedText, nullptr, LV_ALIGN_CENTER, 0, -65);
-}
-
-void disp_speed_type() {
-  lv_imgbtn_set_src_both(buttonMov, editingFlowrate ? "F:/bmp_mov_changeSpeed.bin" : "F:/bmp_mov_sel.bin");
-  lv_imgbtn_set_src_both(buttonExt, editingFlowrate ? "F:/bmp_extruct_sel.bin" : "F:/bmp_speed_extruct.bin");
-  lv_obj_refresh_ext_draw_pad(buttonExt);
-  lv_obj_refresh_ext_draw_pad(buttonMov);
-
-  if (gCfgItems.multiple_language) {
-    lv_label_set_text(labelMov, speed_menu.move);
-    lv_obj_align(labelMov, buttonMov, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(labelExt, speed_menu.extrude);
-    lv_obj_align(labelExt, buttonExt, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-  }
-}
-
-void lv_clear_change_speed() {
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
-  #endif
-  lv_obj_del(scr);
-}
-
-#endif // HAS_TFT_LVGL_UI

commit c753fc690f6cdd181213304224eee029988ffd34
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 14 00:23:56 2021 -0600

    More MKS UI prelim. cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
index afb0245e2f..635625950b 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -108,21 +108,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
         uiCfg.stepPrintSpeed = 1;
       disp_speed_step();
       break;
     case ID_C_RETURN:
       clear_cur_ui();
       draw_return_ui();
       break;
   }
 }
 
-void lv_draw_change_speed(void) {
+void lv_draw_change_speed() {
   scr = lv_screen_create(CHANGE_SPEED_UI);
   // Create an Image button
   lv_big_button_create(scr, "F:/bmp_Add.bin", speed_menu.add, INTERVAL_V, titleHeight, event_handler, ID_C_ADD);
   lv_big_button_create(scr, "F:/bmp_Dec.bin", speed_menu.dec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_C_DEC);
   buttonMov  = lv_imgbtn_create(scr, nullptr, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_MOVE);
   buttonExt  = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_EXT);
   buttonStep = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_STEP);
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
       lv_group_add_obj(g, buttonMov);

commit 44c57ab05a8f909b85f51e08c90316b41e50c455
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 21:02:35 2021 -0600

    MKS UI prelim. cleanup (#20763)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
index a5100776ac..afb0245e2f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -18,24 +18,20 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
 #include "draw_ui.h"
 #include <lv_conf.h>
-//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
-//#include "../lvgl/src/lv_objx/lv_img.h"
-//#include "../lvgl/src/lv_core/lv_disp.h"
-//#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../module/planner.h"
 #include "../../../../inc/MarlinConfig.h"
 
 extern lv_group_t *g;
 static lv_obj_t *scr;
 static lv_obj_t *labelStep, *buttonStep, *buttonMov, *buttonExt;
 static lv_obj_t *labelMov, *labelExt;
 static lv_obj_t *printSpeedText;
 
@@ -58,46 +54,40 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
         if (feedrate_percentage < MAX_EXT_SPEED_PERCENT - uiCfg.stepPrintSpeed)
           feedrate_percentage += uiCfg.stepPrintSpeed;
         else
           feedrate_percentage = MAX_EXT_SPEED_PERCENT;
       }
       else {
         if (planner.flow_percentage[0] < MAX_EXT_SPEED_PERCENT - uiCfg.stepPrintSpeed)
           planner.flow_percentage[0] += uiCfg.stepPrintSpeed;
         else
           planner.flow_percentage[0] = MAX_EXT_SPEED_PERCENT;
-        //planner.e_factor[0]= planner.flow_percentage[0]*0.01;
-        //planner.flow_percentage[1] = planner.flow_percentage[0];
-        //planner.e_factor[1]= planner.flow_percentage[1]*0.01;
         planner.refresh_e_factor(0);
         #if HAS_MULTI_EXTRUDER
           planner.flow_percentage[1] = planner.flow_percentage[0];
           planner.refresh_e_factor(1);
         #endif
       }
       disp_print_speed();
       break;
     case ID_C_DEC:
       if (!editingFlowrate) {
         if (feedrate_percentage > MIN_EXT_SPEED_PERCENT + uiCfg.stepPrintSpeed)
           feedrate_percentage -= uiCfg.stepPrintSpeed;
         else
           feedrate_percentage = MIN_EXT_SPEED_PERCENT;
       }
       else {
         if (planner.flow_percentage[0] > MIN_EXT_SPEED_PERCENT + uiCfg.stepPrintSpeed)
           planner.flow_percentage[0] -= uiCfg.stepPrintSpeed;
         else
           planner.flow_percentage[0] = MIN_EXT_SPEED_PERCENT;
-        //planner.e_factor[0]= planner.flow_percentage[0] * 0.01;
-        //planner.flow_percentage[1] = planner.flow_percentage[0];
-        //planner.e_factor[1]= planner.flow_percentage[1] * 0.01;
         planner.refresh_e_factor(0);
         #if HAS_MULTI_EXTRUDER
           planner.flow_percentage[1] = planner.flow_percentage[0];
           planner.refresh_e_factor(1);
         #endif
       }
       disp_print_speed();
       break;
     case ID_C_MOVE:
       editingFlowrate = false;
@@ -136,23 +126,23 @@ void lv_draw_change_speed(void) {
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
       lv_group_add_obj(g, buttonMov);
       lv_group_add_obj(g, buttonExt);
       lv_group_add_obj(g, buttonStep);
     }
   #endif
   lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_RETURN);
 
   // Create labels on the image buttons
-  labelMov              = lv_label_create_empty(buttonMov);
-  labelExt              = lv_label_create_empty(buttonExt);
-  labelStep             = lv_label_create_empty(buttonStep);
+  labelMov  = lv_label_create_empty(buttonMov);
+  labelExt  = lv_label_create_empty(buttonExt);
+  labelStep = lv_label_create_empty(buttonStep);
 
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
       lv_group_add_obj(g, buttonMov);
       lv_group_add_obj(g, buttonExt);
       lv_group_add_obj(g, buttonStep);
     }
   #endif
 
   disp_speed_type();

commit 853d01de683ab3efcbb15ef95db869e279053ee0
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 19:28:31 2020 -0300

    More LVGL UI code reduction (#19879)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
index 05158b181c..a5100776ac 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -119,32 +119,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
       disp_speed_step();
       break;
     case ID_C_RETURN:
       clear_cur_ui();
       draw_return_ui();
       break;
   }
 }
 
 void lv_draw_change_speed(void) {
-  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != CHANGE_SPEED_UI) {
-    disp_state_stack._disp_index++;
-    disp_state_stack._disp_state[disp_state_stack._disp_index] = CHANGE_SPEED_UI;
-  }
-  disp_state = CHANGE_SPEED_UI;
-
-  scr = lv_screen_create();
-
-  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
-
-  lv_refr_now(lv_refr_get_disp_refreshing());
-
+  scr = lv_screen_create(CHANGE_SPEED_UI);
   // Create an Image button
   lv_big_button_create(scr, "F:/bmp_Add.bin", speed_menu.add, INTERVAL_V, titleHeight, event_handler, ID_C_ADD);
   lv_big_button_create(scr, "F:/bmp_Dec.bin", speed_menu.dec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_C_DEC);
   buttonMov  = lv_imgbtn_create(scr, nullptr, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_MOVE);
   buttonExt  = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_EXT);
   buttonStep = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_STEP);
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
       lv_group_add_obj(g, buttonMov);
       lv_group_add_obj(g, buttonExt);

commit 9630c2683c39468bf885c560a1768d8b377d9462
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 01:37:45 2020 -0300

    More MKS UI cleanup, optimization (#19869)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
index 848b625559..05158b181c 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -26,193 +26,150 @@
 #include "draw_ui.h"
 #include <lv_conf.h>
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../module/planner.h"
 #include "../../../../inc/MarlinConfig.h"
 
-extern lv_group_t * g;
-static lv_obj_t * scr;
+extern lv_group_t *g;
+static lv_obj_t *scr;
 static lv_obj_t *labelStep, *buttonStep, *buttonMov, *buttonExt;
 static lv_obj_t *labelMov, *labelExt;
-static lv_obj_t * printSpeedText;
+static lv_obj_t *printSpeedText;
 
-#define ID_C_ADD    1
-#define ID_C_DEC    2
-#define ID_C_MOVE   3
-#define ID_C_EXT    4
-#define ID_C_STEP   5
-#define ID_C_RETURN 6
+enum {
+  ID_C_ADD = 1,
+  ID_C_DEC,
+  ID_C_MOVE,
+  ID_C_EXT,
+  ID_C_STEP,
+  ID_C_RETURN
+};
 
-static uint8_t speedType;
+static bool editingFlowrate;
 
-static void event_handler(lv_obj_t * obj, lv_event_t event) {
+static void event_handler(lv_obj_t *obj, lv_event_t event) {
+  if (event != LV_EVENT_RELEASED) return;
   switch (obj->mks_obj_id) {
     case ID_C_ADD:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
+      if (!editingFlowrate) {
+        if (feedrate_percentage < MAX_EXT_SPEED_PERCENT - uiCfg.stepPrintSpeed)
+          feedrate_percentage += uiCfg.stepPrintSpeed;
+        else
+          feedrate_percentage = MAX_EXT_SPEED_PERCENT;
       }
-      else if (event == LV_EVENT_RELEASED) {
-        if (speedType == 0) {
-          if (feedrate_percentage < MAX_EXT_SPEED_PERCENT - uiCfg.stepPrintSpeed)
-            feedrate_percentage += uiCfg.stepPrintSpeed;
-          else
-            feedrate_percentage = MAX_EXT_SPEED_PERCENT;
-        }
-        else if (speedType == 1) {
-          if (planner.flow_percentage[0] < MAX_EXT_SPEED_PERCENT - uiCfg.stepPrintSpeed)
-            planner.flow_percentage[0] += uiCfg.stepPrintSpeed;
-          else
-            planner.flow_percentage[0] = MAX_EXT_SPEED_PERCENT;
-          //planner.e_factor[0]= planner.flow_percentage[0]*0.01;
-          //planner.flow_percentage[1] = planner.flow_percentage[0];
-          //planner.e_factor[1]= planner.flow_percentage[1]*0.01;
-          planner.refresh_e_factor(0);
-          #if HAS_MULTI_EXTRUDER
-            planner.flow_percentage[1] = planner.flow_percentage[0];
-            planner.refresh_e_factor(1);
-          #endif
-        }
-        disp_print_speed();
+      else {
+        if (planner.flow_percentage[0] < MAX_EXT_SPEED_PERCENT - uiCfg.stepPrintSpeed)
+          planner.flow_percentage[0] += uiCfg.stepPrintSpeed;
+        else
+          planner.flow_percentage[0] = MAX_EXT_SPEED_PERCENT;
+        //planner.e_factor[0]= planner.flow_percentage[0]*0.01;
+        //planner.flow_percentage[1] = planner.flow_percentage[0];
+        //planner.e_factor[1]= planner.flow_percentage[1]*0.01;
+        planner.refresh_e_factor(0);
+        #if HAS_MULTI_EXTRUDER
+          planner.flow_percentage[1] = planner.flow_percentage[0];
+          planner.refresh_e_factor(1);
+        #endif
       }
+      disp_print_speed();
       break;
     case ID_C_DEC:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
+      if (!editingFlowrate) {
+        if (feedrate_percentage > MIN_EXT_SPEED_PERCENT + uiCfg.stepPrintSpeed)
+          feedrate_percentage -= uiCfg.stepPrintSpeed;
+        else
+          feedrate_percentage = MIN_EXT_SPEED_PERCENT;
       }
-      else if (event == LV_EVENT_RELEASED) {
-        if (speedType == 0) {
-          if (feedrate_percentage > MIN_EXT_SPEED_PERCENT + uiCfg.stepPrintSpeed)
-            feedrate_percentage -= uiCfg.stepPrintSpeed;
-          else
-            feedrate_percentage = MIN_EXT_SPEED_PERCENT;
-        }
-        else if (speedType == 1) {
-          if (planner.flow_percentage[0] > MIN_EXT_SPEED_PERCENT + uiCfg.stepPrintSpeed)
-            planner.flow_percentage[0] -= uiCfg.stepPrintSpeed;
-          else
-            planner.flow_percentage[0] = MIN_EXT_SPEED_PERCENT;
-          //planner.e_factor[0]= planner.flow_percentage[0] * 0.01;
-          //planner.flow_percentage[1] = planner.flow_percentage[0];
-          //planner.e_factor[1]= planner.flow_percentage[1] * 0.01;
-          planner.refresh_e_factor(0);
-          #if HAS_MULTI_EXTRUDER
-            planner.flow_percentage[1] = planner.flow_percentage[0];
-            planner.refresh_e_factor(1);
-          #endif
-        }
-        disp_print_speed();
+      else {
+        if (planner.flow_percentage[0] > MIN_EXT_SPEED_PERCENT + uiCfg.stepPrintSpeed)
+          planner.flow_percentage[0] -= uiCfg.stepPrintSpeed;
+        else
+          planner.flow_percentage[0] = MIN_EXT_SPEED_PERCENT;
+        //planner.e_factor[0]= planner.flow_percentage[0] * 0.01;
+        //planner.flow_percentage[1] = planner.flow_percentage[0];
+        //planner.e_factor[1]= planner.flow_percentage[1] * 0.01;
+        planner.refresh_e_factor(0);
+        #if HAS_MULTI_EXTRUDER
+          planner.flow_percentage[1] = planner.flow_percentage[0];
+          planner.refresh_e_factor(1);
+        #endif
       }
+      disp_print_speed();
       break;
     case ID_C_MOVE:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        speedType = 0;
-        disp_speed_type();
-        disp_print_speed();
-      }
+      editingFlowrate = false;
+      disp_speed_type();
+      disp_print_speed();
       break;
     case ID_C_EXT:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        speedType = 1;
-        disp_speed_type();
-        disp_print_speed();
-      }
+      editingFlowrate = true;
+      disp_speed_type();
+      disp_print_speed();
       break;
     case ID_C_STEP:
-      if (event == LV_EVENT_CLICKED) {
-
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        if (uiCfg.stepPrintSpeed == 1)
-          uiCfg.stepPrintSpeed = 5;
-        else if (uiCfg.stepPrintSpeed == 5)
-          uiCfg.stepPrintSpeed = 10;
-        else
-          uiCfg.stepPrintSpeed = 1;
-        disp_speed_step();
-      }
+      if (uiCfg.stepPrintSpeed == 1)
+        uiCfg.stepPrintSpeed = 5;
+      else if (uiCfg.stepPrintSpeed == 5)
+        uiCfg.stepPrintSpeed = 10;
+      else
+        uiCfg.stepPrintSpeed = 1;
+      disp_speed_step();
       break;
     case ID_C_RETURN:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        clear_cur_ui();
-        draw_return_ui();
-      }
+      clear_cur_ui();
+      draw_return_ui();
       break;
   }
 }
 
 void lv_draw_change_speed(void) {
-  lv_obj_t *buttonAdd, *buttonDec;
-  lv_obj_t *buttonBack;
-
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != CHANGE_SPEED_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = CHANGE_SPEED_UI;
   }
   disp_state = CHANGE_SPEED_UI;
 
-  scr = lv_obj_create(NULL, NULL);
-
-  lv_obj_set_style(scr, &tft_style_scr);
-  lv_scr_load(scr);
-  lv_obj_clean(scr);
+  scr = lv_screen_create();
 
   (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   // Create an Image button
-  buttonAdd  = lv_imgbtn_create(scr, "F:/bmp_Add.bin", INTERVAL_V, titleHeight, event_handler, ID_C_ADD);
-  buttonDec  = lv_imgbtn_create(scr, "F:/bmp_Dec.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_C_DEC);
-  buttonMov  = lv_imgbtn_create(scr, NULL, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_MOVE);
-  buttonExt  = lv_imgbtn_create(scr, NULL, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_EXT);
-  buttonStep = lv_imgbtn_create(scr, NULL, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_STEP);
-  buttonBack = lv_imgbtn_create(scr, "F:/bmp_return.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_RETURN);
+  lv_big_button_create(scr, "F:/bmp_Add.bin", speed_menu.add, INTERVAL_V, titleHeight, event_handler, ID_C_ADD);
+  lv_big_button_create(scr, "F:/bmp_Dec.bin", speed_menu.dec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_C_DEC);
+  buttonMov  = lv_imgbtn_create(scr, nullptr, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_MOVE);
+  buttonExt  = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_EXT);
+  buttonStep = lv_imgbtn_create(scr, nullptr, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_STEP);
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) {
+      lv_group_add_obj(g, buttonMov);
+      lv_group_add_obj(g, buttonExt);
+      lv_group_add_obj(g, buttonStep);
+    }
+  #endif
+  lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_RETURN);
 
   // Create labels on the image buttons
-  lv_obj_t *labelAdd    = lv_label_create_empty(buttonAdd);
-  lv_obj_t *labelDec    = lv_label_create_empty(buttonDec);
   labelMov              = lv_label_create_empty(buttonMov);
   labelExt              = lv_label_create_empty(buttonExt);
   labelStep             = lv_label_create_empty(buttonStep);
-  lv_obj_t *label_Back  = lv_label_create_empty(buttonBack);
 
-  if (gCfgItems.multiple_language) {
-    lv_label_set_text(labelAdd, speed_menu.add);
-    lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(labelDec, speed_menu.dec);
-    lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_Back, common_menu.text_back);
-    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-  }
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) {
-      lv_group_add_obj(g, buttonAdd);
-      lv_group_add_obj(g, buttonDec);
       lv_group_add_obj(g, buttonMov);
       lv_group_add_obj(g, buttonExt);
       lv_group_add_obj(g, buttonStep);
-      lv_group_add_obj(g, buttonBack);
     }
   #endif
 
   disp_speed_type();
   disp_speed_step();
 
   printSpeedText = lv_label_create_empty(scr);
   lv_obj_set_style(printSpeedText, &tft_style_label_rel);
   disp_print_speed();
 }
@@ -239,48 +196,41 @@ void disp_speed_step() {
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_print_speed() {
   char buf[30] = { 0 };
 
   public_buf_l[0] = '\0';
 
-  if (speedType == 0) { // move
-    strcat(public_buf_l, speed_menu.move_speed);
-    strcat_P(public_buf_l, PSTR(": "));
-    sprintf_P(buf, PSTR("%d%%"), feedrate_percentage);
-    strcat(public_buf_l, buf);
+  int16_t val;
+  const char *lbl;
+  if (editingFlowrate) {
+    lbl = speed_menu.extrude_speed;
+    val = planner.flow_percentage[0];
   }
-  else if (speedType == 1) { // e1
-    strcat(public_buf_l, speed_menu.extrude_speed);
-    strcat_P(public_buf_l, PSTR(": "));
-    sprintf_P(buf, PSTR("%d%%"), planner.flow_percentage[0]);
-    strcat(public_buf_l, buf);
+  else {
+    lbl = speed_menu.move_speed;
+    val = feedrate_percentage;
   }
+  strcpy(public_buf_l, lbl);
+  strcat_P(public_buf_l, PSTR(": "));
+  sprintf_P(buf, PSTR("%d%%"), val);
+  strcat(public_buf_l, buf);
   lv_label_set_text(printSpeedText, public_buf_l);
-  lv_obj_align(printSpeedText, NULL, LV_ALIGN_CENTER, 0, -65);
+  lv_obj_align(printSpeedText, nullptr, LV_ALIGN_CENTER, 0, -65);
 }
 
 void disp_speed_type() {
-  switch (speedType) {
-    case 1:
-      lv_imgbtn_set_src_both(buttonMov, "F:/bmp_mov_changeSpeed.bin");
-      lv_imgbtn_set_src_both(buttonExt, "F:/bmp_extruct_sel.bin");
-      break;
-
-    default:
-      lv_imgbtn_set_src_both(buttonMov, "F:/bmp_mov_sel.bin");
-      lv_imgbtn_set_src_both(buttonExt, "F:/bmp_speed_extruct.bin");
-      break;
-  }
+  lv_imgbtn_set_src_both(buttonMov, editingFlowrate ? "F:/bmp_mov_changeSpeed.bin" : "F:/bmp_mov_sel.bin");
+  lv_imgbtn_set_src_both(buttonExt, editingFlowrate ? "F:/bmp_extruct_sel.bin" : "F:/bmp_speed_extruct.bin");
   lv_obj_refresh_ext_draw_pad(buttonExt);
   lv_obj_refresh_ext_draw_pad(buttonMov);
 
   if (gCfgItems.multiple_language) {
     lv_label_set_text(labelMov, speed_menu.move);
     lv_obj_align(labelMov, buttonMov, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelExt, speed_menu.extrude);
     lv_obj_align(labelExt, buttonExt, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }

commit 4533a197d59ffcaccc4d476f06df7754b11b9b0c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 22 20:22:17 2020 -0500

    Slim down MKS UI code (#19843)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
index f9399b8a45..848b625559 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -161,89 +161,39 @@ void lv_draw_change_speed(void) {
     disp_state_stack._disp_state[disp_state_stack._disp_index] = CHANGE_SPEED_UI;
   }
   disp_state = CHANGE_SPEED_UI;
 
   scr = lv_obj_create(NULL, NULL);
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
-  lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_label_rel);
-  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
-  lv_label_set_text(title, creat_title_text());
+  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
-
   // Create an Image button
-  buttonAdd  = lv_imgbtn_create(scr, NULL);
-  buttonDec  = lv_imgbtn_create(scr, NULL);
-  buttonMov  = lv_imgbtn_create(scr, NULL);
-  buttonExt  = lv_imgbtn_create(scr, NULL);
-  buttonStep = lv_imgbtn_create(scr, NULL);
-  buttonBack = lv_imgbtn_create(scr, NULL);
-
-  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_C_ADD, NULL, 0);
-  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, "F:/bmp_Add.bin");
-  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, "F:/bmp_Add.bin");
-  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_label_pre);
-  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-  #if 1
-    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_C_DEC, NULL, 0);
-    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, "F:/bmp_Dec.bin");
-    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, "F:/bmp_Dec.bin");
-    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, NULL, 0);
-    lv_imgbtn_set_style(buttonMov, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonMov, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, NULL, 0);
-    lv_imgbtn_set_style(buttonExt, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonExt, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, NULL, 0);
-    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_C_RETURN, NULL, 0);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, "F:/bmp_return.bin");
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, "F:/bmp_return.bin");
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
-  #endif
-
-  lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
-  lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
-  lv_obj_set_pos(buttonMov, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonExt, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonStep, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  buttonAdd  = lv_imgbtn_create(scr, "F:/bmp_Add.bin", INTERVAL_V, titleHeight, event_handler, ID_C_ADD);
+  buttonDec  = lv_imgbtn_create(scr, "F:/bmp_Dec.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_C_DEC);
+  buttonMov  = lv_imgbtn_create(scr, NULL, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_MOVE);
+  buttonExt  = lv_imgbtn_create(scr, NULL, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_EXT);
+  buttonStep = lv_imgbtn_create(scr, NULL, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_STEP);
+  buttonBack = lv_imgbtn_create(scr, "F:/bmp_return.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_C_RETURN);
 
   // Create labels on the image buttons
-  lv_btn_set_layout(buttonAdd, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonDec, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonMov, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonExt, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonStep, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
-
-  lv_obj_t *labelAdd    = lv_label_create(buttonAdd, NULL);
-  lv_obj_t *labelDec    = lv_label_create(buttonDec, NULL);
-  labelMov              = lv_label_create(buttonMov, NULL);
-  labelExt              = lv_label_create(buttonExt, NULL);
-  labelStep             = lv_label_create(buttonStep, NULL);
-  lv_obj_t *label_Back  = lv_label_create(buttonBack, NULL);
+  lv_obj_t *labelAdd    = lv_label_create_empty(buttonAdd);
+  lv_obj_t *labelDec    = lv_label_create_empty(buttonDec);
+  labelMov              = lv_label_create_empty(buttonMov);
+  labelExt              = lv_label_create_empty(buttonExt);
+  labelStep             = lv_label_create_empty(buttonStep);
+  lv_obj_t *label_Back  = lv_label_create_empty(buttonBack);
 
   if (gCfgItems.multiple_language) {
     lv_label_set_text(labelAdd, speed_menu.add);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, speed_menu.dec);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
@@ -255,38 +205,33 @@ void lv_draw_change_speed(void) {
       lv_group_add_obj(g, buttonMov);
       lv_group_add_obj(g, buttonExt);
       lv_group_add_obj(g, buttonStep);
       lv_group_add_obj(g, buttonBack);
     }
   #endif
 
   disp_speed_type();
   disp_speed_step();
 
-  printSpeedText = lv_label_create(scr, NULL);
+  printSpeedText = lv_label_create_empty(scr);
   lv_obj_set_style(printSpeedText, &tft_style_label_rel);
   disp_print_speed();
 }
 
 void disp_speed_step() {
-  if (uiCfg.stepPrintSpeed == 1) {
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step1_percent.bin");
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step1_percent.bin");
-  }
-  else if (uiCfg.stepPrintSpeed == 5) {
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step5_percent.bin");
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step5_percent.bin");
-  }
-  else if (uiCfg.stepPrintSpeed == 10) {
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step10_percent.bin");
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step10_percent.bin");
-  }
+  if (uiCfg.stepPrintSpeed == 1)
+    lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step1_percent.bin");
+  else if (uiCfg.stepPrintSpeed == 5)
+    lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step5_percent.bin");
+  else if (uiCfg.stepPrintSpeed == 10)
+    lv_imgbtn_set_src_both(buttonStep, "F:/bmp_step10_percent.bin");
+
   if (gCfgItems.multiple_language) {
     if (uiCfg.stepPrintSpeed == 1) {
       lv_label_set_text(labelStep, speed_menu.step_1percent);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.stepPrintSpeed == 5) {
       lv_label_set_text(labelStep, speed_menu.step_5percent);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.stepPrintSpeed == 10) {
@@ -313,31 +258,27 @@ void disp_print_speed() {
     sprintf_P(buf, PSTR("%d%%"), planner.flow_percentage[0]);
     strcat(public_buf_l, buf);
   }
   lv_label_set_text(printSpeedText, public_buf_l);
   lv_obj_align(printSpeedText, NULL, LV_ALIGN_CENTER, 0, -65);
 }
 
 void disp_speed_type() {
   switch (speedType) {
     case 1:
-      lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_REL, "F:/bmp_mov_changeSpeed.bin");
-      lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_PR, "F:/bmp_mov_changeSpeed.bin");
-      lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_REL, "F:/bmp_extruct_sel.bin");
-      lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_PR, "F:/bmp_extruct_sel.bin");
+      lv_imgbtn_set_src_both(buttonMov, "F:/bmp_mov_changeSpeed.bin");
+      lv_imgbtn_set_src_both(buttonExt, "F:/bmp_extruct_sel.bin");
       break;
 
     default:
-      lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_REL, "F:/bmp_mov_sel.bin");
-      lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_PR, "F:/bmp_mov_sel.bin");
-      lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_REL, "F:/bmp_speed_extruct.bin");
-      lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_PR, "F:/bmp_speed_extruct.bin");
+      lv_imgbtn_set_src_both(buttonMov, "F:/bmp_mov_sel.bin");
+      lv_imgbtn_set_src_both(buttonExt, "F:/bmp_speed_extruct.bin");
       break;
   }
   lv_obj_refresh_ext_draw_pad(buttonExt);
   lv_obj_refresh_ext_draw_pad(buttonMov);
 
   if (gCfgItems.multiple_language) {
     lv_label_set_text(labelMov, speed_menu.move);
     lv_obj_align(labelMov, buttonMov, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelExt, speed_menu.extrude);

commit 072f996af70b5ac635893eca2d4bd4bbb4f00acc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 21 12:45:27 2020 -0500

    General cleanup, mostly MKS UI (#19825)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
index c60000afae..f9399b8a45 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -16,30 +16,29 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
-#include "lv_conf.h"
 #include "draw_ui.h"
+#include <lv_conf.h>
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
-#include "../../../../MarlinCore.h"
-#include "../../../../module/temperature.h"
 #include "../../../../module/planner.h"
+#include "../../../../inc/MarlinConfig.h"
 
 extern lv_group_t * g;
 static lv_obj_t * scr;
 static lv_obj_t *labelStep, *buttonStep, *buttonMov, *buttonExt;
 static lv_obj_t *labelMov, *labelExt;
 static lv_obj_t * printSpeedText;
 
 #define ID_C_ADD    1
 #define ID_C_DEC    2
 #define ID_C_MOVE   3
@@ -232,21 +231,21 @@ void lv_draw_change_speed(void) {
   lv_btn_set_layout(buttonStep, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
   lv_obj_t *labelAdd    = lv_label_create(buttonAdd, NULL);
   lv_obj_t *labelDec    = lv_label_create(buttonDec, NULL);
   labelMov              = lv_label_create(buttonMov, NULL);
   labelExt              = lv_label_create(buttonExt, NULL);
   labelStep             = lv_label_create(buttonStep, NULL);
   lv_obj_t *label_Back  = lv_label_create(buttonBack, NULL);
 
-  if (gCfgItems.multiple_language != 0) {
+  if (gCfgItems.multiple_language) {
     lv_label_set_text(labelAdd, speed_menu.add);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, speed_menu.dec);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
   #if HAS_ROTARY_ENCODER
@@ -274,21 +273,21 @@ void disp_speed_step() {
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step1_percent.bin");
   }
   else if (uiCfg.stepPrintSpeed == 5) {
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step5_percent.bin");
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step5_percent.bin");
   }
   else if (uiCfg.stepPrintSpeed == 10) {
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step10_percent.bin");
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step10_percent.bin");
   }
-  if (gCfgItems.multiple_language != 0) {
+  if (gCfgItems.multiple_language) {
     if (uiCfg.stepPrintSpeed == 1) {
       lv_label_set_text(labelStep, speed_menu.step_1percent);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.stepPrintSpeed == 5) {
       lv_label_set_text(labelStep, speed_menu.step_5percent);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.stepPrintSpeed == 10) {
       lv_label_set_text(labelStep, speed_menu.step_10percent);
@@ -330,21 +329,21 @@ void disp_speed_type() {
     default:
       lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_REL, "F:/bmp_mov_sel.bin");
       lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_PR, "F:/bmp_mov_sel.bin");
       lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_REL, "F:/bmp_speed_extruct.bin");
       lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_PR, "F:/bmp_speed_extruct.bin");
       break;
   }
   lv_obj_refresh_ext_draw_pad(buttonExt);
   lv_obj_refresh_ext_draw_pad(buttonMov);
 
-  if (gCfgItems.multiple_language != 0) {
+  if (gCfgItems.multiple_language) {
     lv_label_set_text(labelMov, speed_menu.move);
     lv_obj_align(labelMov, buttonMov, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelExt, speed_menu.extrude);
     lv_obj_align(labelExt, buttonExt, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 }
 
 void lv_clear_change_speed() {
   #if HAS_ROTARY_ENCODER

commit d8ed74904559aa8bdccc8b68acbccfbf1bf779d3
Author: makerbase <4164049@qq.com>
Date:   Mon Sep 21 09:55:02 2020 +0800

    Add MKS Robin E3P, improve LVGL UI (#19442)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
index cc3f847bce..c60000afae 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -27,23 +27,24 @@
 #include "draw_ui.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../MarlinCore.h"
 #include "../../../../module/temperature.h"
 #include "../../../../module/planner.h"
 
+extern lv_group_t * g;
 static lv_obj_t * scr;
-static lv_obj_t * labelStep, *buttonStep, *buttonMov, *buttonExt;
-static lv_obj_t * labelMov, *labelExt;
+static lv_obj_t *labelStep, *buttonStep, *buttonMov, *buttonExt;
+static lv_obj_t *labelMov, *labelExt;
 static lv_obj_t * printSpeedText;
 
 #define ID_C_ADD    1
 #define ID_C_DEC    2
 #define ID_C_MOVE   3
 #define ID_C_EXT    4
 #define ID_C_STEP   5
 #define ID_C_RETURN 6
 
 static uint8_t speedType;
@@ -168,62 +169,57 @@ void lv_draw_change_speed(void) {
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
   lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
-  LV_IMG_DECLARE(bmp_pic);
 
   // Create an Image button
   buttonAdd  = lv_imgbtn_create(scr, NULL);
   buttonDec  = lv_imgbtn_create(scr, NULL);
   buttonMov  = lv_imgbtn_create(scr, NULL);
   buttonExt  = lv_imgbtn_create(scr, NULL);
   buttonStep = lv_imgbtn_create(scr, NULL);
   buttonBack = lv_imgbtn_create(scr, NULL);
 
-  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_C_ADD, "bmp_Add.bin", 0);
-  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, &bmp_pic);
-  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, &bmp_pic);
+  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_C_ADD, NULL, 0);
+  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, "F:/bmp_Add.bin");
+  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, "F:/bmp_Add.bin");
   lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_label_pre);
   lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_label_rel);
-  lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
 
   #if 1
-    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_C_DEC, "bmp_Dec.bin", 0);
-    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_C_DEC, NULL, 0);
+    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, "F:/bmp_Dec.bin");
+    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, "F:/bmp_Dec.bin");
     lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, NULL, 0);
     lv_imgbtn_set_style(buttonMov, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonMov, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, NULL, 0);
     lv_imgbtn_set_style(buttonExt, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonExt, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, NULL, 0);
     lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_C_RETURN, "bmp_return.bin", 0);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_C_RETURN, NULL, 0);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, "F:/bmp_return.bin");
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, "F:/bmp_return.bin");
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonMov, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonExt, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonStep, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
@@ -246,36 +242,52 @@ void lv_draw_change_speed(void) {
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(labelAdd, speed_menu.add);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, speed_menu.dec);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) {
+      lv_group_add_obj(g, buttonAdd);
+      lv_group_add_obj(g, buttonDec);
+      lv_group_add_obj(g, buttonMov);
+      lv_group_add_obj(g, buttonExt);
+      lv_group_add_obj(g, buttonStep);
+      lv_group_add_obj(g, buttonBack);
+    }
+  #endif
+
   disp_speed_type();
   disp_speed_step();
 
   printSpeedText = lv_label_create(scr, NULL);
   lv_obj_set_style(printSpeedText, &tft_style_label_rel);
   disp_print_speed();
 }
 
 void disp_speed_step() {
-  if (uiCfg.stepPrintSpeed == 1)
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, "bmp_step1_percent.bin", 0);
-  else if (uiCfg.stepPrintSpeed == 5)
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, "bmp_step5_percent.bin", 0);
-  else if (uiCfg.stepPrintSpeed == 10)
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, "bmp_step10_percent.bin", 0);
-
+  if (uiCfg.stepPrintSpeed == 1) {
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step1_percent.bin");
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step1_percent.bin");
+  }
+  else if (uiCfg.stepPrintSpeed == 5) {
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step5_percent.bin");
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step5_percent.bin");
+  }
+  else if (uiCfg.stepPrintSpeed == 10) {
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, "F:/bmp_step10_percent.bin");
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, "F:/bmp_step10_percent.bin");
+  }
   if (gCfgItems.multiple_language != 0) {
     if (uiCfg.stepPrintSpeed == 1) {
       lv_label_set_text(labelStep, speed_menu.step_1percent);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.stepPrintSpeed == 5) {
       lv_label_set_text(labelStep, speed_menu.step_5percent);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.stepPrintSpeed == 10) {
@@ -302,34 +314,43 @@ void disp_print_speed() {
     sprintf_P(buf, PSTR("%d%%"), planner.flow_percentage[0]);
     strcat(public_buf_l, buf);
   }
   lv_label_set_text(printSpeedText, public_buf_l);
   lv_obj_align(printSpeedText, NULL, LV_ALIGN_CENTER, 0, -65);
 }
 
 void disp_speed_type() {
   switch (speedType) {
     case 1:
-      lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, "bmp_extruct_sel.bin", 0);
-      lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, "bmp_mov_changeSpeed.bin", 0);
+      lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_REL, "F:/bmp_mov_changeSpeed.bin");
+      lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_PR, "F:/bmp_mov_changeSpeed.bin");
+      lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_REL, "F:/bmp_extruct_sel.bin");
+      lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_PR, "F:/bmp_extruct_sel.bin");
       break;
 
     default:
-      lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, "bmp_speed_extruct.bin", 0);
-      lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, "bmp_mov_sel.bin", 0);
+      lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_REL, "F:/bmp_mov_sel.bin");
+      lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_PR, "F:/bmp_mov_sel.bin");
+      lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_REL, "F:/bmp_speed_extruct.bin");
+      lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_PR, "F:/bmp_speed_extruct.bin");
       break;
   }
   lv_obj_refresh_ext_draw_pad(buttonExt);
   lv_obj_refresh_ext_draw_pad(buttonMov);
 
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(labelMov, speed_menu.move);
     lv_obj_align(labelMov, buttonMov, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelExt, speed_menu.extrude);
     lv_obj_align(labelExt, buttonExt, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 }
 
-void lv_clear_change_speed() { lv_obj_del(scr); }
+void lv_clear_change_speed() {
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
+  #endif
+  lv_obj_del(scr);
+}
 
 #endif // HAS_TFT_LVGL_UI

commit 60ab7a1ddbda1b1a6d20cbeb5c574ce775f57a4b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 20 19:07:59 2020 -0500

    Cleanup before MKS changes

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
index 3589b96d6a..cc3f847bce 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -66,21 +66,21 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
             planner.flow_percentage[0] += uiCfg.stepPrintSpeed;
           else
             planner.flow_percentage[0] = MAX_EXT_SPEED_PERCENT;
           //planner.e_factor[0]= planner.flow_percentage[0]*0.01;
           //planner.flow_percentage[1] = planner.flow_percentage[0];
           //planner.e_factor[1]= planner.flow_percentage[1]*0.01;
           planner.refresh_e_factor(0);
           #if HAS_MULTI_EXTRUDER
             planner.flow_percentage[1] = planner.flow_percentage[0];
             planner.refresh_e_factor(1);
-          }
+          #endif
         }
         disp_print_speed();
       }
       break;
     case ID_C_DEC:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (speedType == 0) {
@@ -91,24 +91,24 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
         }
         else if (speedType == 1) {
           if (planner.flow_percentage[0] > MIN_EXT_SPEED_PERCENT + uiCfg.stepPrintSpeed)
             planner.flow_percentage[0] -= uiCfg.stepPrintSpeed;
           else
             planner.flow_percentage[0] = MIN_EXT_SPEED_PERCENT;
           //planner.e_factor[0]= planner.flow_percentage[0] * 0.01;
           //planner.flow_percentage[1] = planner.flow_percentage[0];
           //planner.e_factor[1]= planner.flow_percentage[1] * 0.01;
           planner.refresh_e_factor(0);
-          if (EXTRUDERS == 2) {
+          #if HAS_MULTI_EXTRUDER
             planner.flow_percentage[1] = planner.flow_percentage[0];
             planner.refresh_e_factor(1);
-          }
+          #endif
         }
         disp_print_speed();
       }
       break;
     case ID_C_MOVE:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         speedType = 0;
@@ -170,21 +170,21 @@ void lv_draw_change_speed(void) {
 
   lv_obj_t * title = lv_label_create(scr, NULL);
   lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   LV_IMG_DECLARE(bmp_pic);
 
-  /*Create an Image button*/
+  // Create an Image button
   buttonAdd  = lv_imgbtn_create(scr, NULL);
   buttonDec  = lv_imgbtn_create(scr, NULL);
   buttonMov  = lv_imgbtn_create(scr, NULL);
   buttonExt  = lv_imgbtn_create(scr, NULL);
   buttonStep = lv_imgbtn_create(scr, NULL);
   buttonBack = lv_imgbtn_create(scr, NULL);
 
   lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_C_ADD, "bmp_Add.bin", 0);
   lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, &bmp_pic);
   lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, &bmp_pic);
@@ -221,34 +221,34 @@ void lv_draw_change_speed(void) {
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonMov, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonExt, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonStep, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
-  /*Create a label on the Image button*/
+  // Create labels on the image buttons
   lv_btn_set_layout(buttonAdd, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonDec, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonMov, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonExt, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonStep, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
-  lv_obj_t * labelAdd = lv_label_create(buttonAdd, NULL);
-  lv_obj_t * labelDec = lv_label_create(buttonDec, NULL);
-  labelMov  = lv_label_create(buttonMov, NULL);
-  labelExt  = lv_label_create(buttonExt, NULL);
-  labelStep = lv_label_create(buttonStep, NULL);
-  lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
+  lv_obj_t *labelAdd    = lv_label_create(buttonAdd, NULL);
+  lv_obj_t *labelDec    = lv_label_create(buttonDec, NULL);
+  labelMov              = lv_label_create(buttonMov, NULL);
+  labelExt              = lv_label_create(buttonExt, NULL);
+  labelStep             = lv_label_create(buttonStep, NULL);
+  lv_obj_t *label_Back  = lv_label_create(buttonBack, NULL);
 
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(labelAdd, speed_menu.add);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, speed_menu.dec);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
@@ -279,21 +279,21 @@ void disp_speed_step() {
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.stepPrintSpeed == 10) {
       lv_label_set_text(labelStep, speed_menu.step_10percent);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_print_speed() {
-  char buf[30] = {0};
+  char buf[30] = { 0 };
 
   public_buf_l[0] = '\0';
 
   if (speedType == 0) { // move
     strcat(public_buf_l, speed_menu.move_speed);
     strcat_P(public_buf_l, PSTR(": "));
     sprintf_P(buf, PSTR("%d%%"), feedrate_percentage);
     strcat(public_buf_l, buf);
   }
   else if (speedType == 1) { // e1

commit 76d8d1742c1d4a1efe0fd6c0645d3fc656bfd0b2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 20 18:29:08 2020 -0500

    Add multi-extruder condition

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
index 264d528c03..3589b96d6a 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -63,21 +63,21 @@ static void event_handler(lv_obj_t * obj, lv_event_t event) {
         }
         else if (speedType == 1) {
           if (planner.flow_percentage[0] < MAX_EXT_SPEED_PERCENT - uiCfg.stepPrintSpeed)
             planner.flow_percentage[0] += uiCfg.stepPrintSpeed;
           else
             planner.flow_percentage[0] = MAX_EXT_SPEED_PERCENT;
           //planner.e_factor[0]= planner.flow_percentage[0]*0.01;
           //planner.flow_percentage[1] = planner.flow_percentage[0];
           //planner.e_factor[1]= planner.flow_percentage[1]*0.01;
           planner.refresh_e_factor(0);
-          if (EXTRUDERS == 2) {
+          #if HAS_MULTI_EXTRUDER
             planner.flow_percentage[1] = planner.flow_percentage[0];
             planner.refresh_e_factor(1);
           }
         }
         disp_print_speed();
       }
       break;
     case ID_C_DEC:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do

commit d20d4591321aa467c062f0050355d2aca84e03ad
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Sat Jul 25 13:52:07 2020 +0800

    Robin nano V2, TFT LVGL UI parameters, and more (#18500)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
index a2b02826c7..264d528c03 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -14,21 +14,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LVGL_UI)
+#if HAS_TFT_LVGL_UI
 
 #include "lv_conf.h"
 #include "draw_ui.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../MarlinCore.h"
 #include "../../../../module/temperature.h"
@@ -37,21 +37,21 @@
 static lv_obj_t * scr;
 static lv_obj_t * labelStep, *buttonStep, *buttonMov, *buttonExt;
 static lv_obj_t * labelMov, *labelExt;
 static lv_obj_t * printSpeedText;
 
 #define ID_C_ADD    1
 #define ID_C_DEC    2
 #define ID_C_MOVE   3
 #define ID_C_EXT    4
 #define ID_C_STEP   5
-#define ID_C_RETURN   6
+#define ID_C_RETURN 6
 
 static uint8_t speedType;
 
 static void event_handler(lv_obj_t * obj, lv_event_t event) {
   switch (obj->mks_obj_id) {
     case ID_C_ADD:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
@@ -162,120 +162,119 @@ void lv_draw_change_speed(void) {
   }
   disp_state = CHANGE_SPEED_UI;
 
   scr = lv_obj_create(NULL, NULL);
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   LV_IMG_DECLARE(bmp_pic);
 
   /*Create an Image button*/
-  buttonAdd = lv_imgbtn_create(scr, NULL);
-  buttonDec = lv_imgbtn_create(scr, NULL);
-  buttonMov = lv_imgbtn_create(scr, NULL);
-  buttonExt = lv_imgbtn_create(scr, NULL);
+  buttonAdd  = lv_imgbtn_create(scr, NULL);
+  buttonDec  = lv_imgbtn_create(scr, NULL);
+  buttonMov  = lv_imgbtn_create(scr, NULL);
+  buttonExt  = lv_imgbtn_create(scr, NULL);
   buttonStep = lv_imgbtn_create(scr, NULL);
   buttonBack = lv_imgbtn_create(scr, NULL);
 
   lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_C_ADD, "bmp_Add.bin", 0);
   lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, &bmp_pic);
   lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, &bmp_pic);
-  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_lable_pre);
-  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_label_pre);
+  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_label_rel);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
 
   #if 1
     lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_C_DEC, "bmp_Dec.bin", 0);
     lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_lable_rel);
-
+    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_label_rel);
 
     lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonMov, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonMov, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonMov, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonMov, LV_BTN_STATE_REL, &tft_style_label_rel);
 
     lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonExt, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonExt, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonExt, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonExt, LV_BTN_STATE_REL, &tft_style_label_rel);
 
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_C_RETURN, "bmp_Return.bin", 0);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_C_RETURN, "bmp_return.bin", 0);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
-  lv_obj_set_pos(buttonMov, INTERVAL_V,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonMov, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonExt, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonStep, BTN_X_PIXEL * 2 + INTERVAL_V * 3,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonStep, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
   /*Create a label on the Image button*/
   lv_btn_set_layout(buttonAdd, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonDec, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonMov, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonExt, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonStep, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
   lv_obj_t * labelAdd = lv_label_create(buttonAdd, NULL);
   lv_obj_t * labelDec = lv_label_create(buttonDec, NULL);
-  labelMov = lv_label_create(buttonMov, NULL);
-  labelExt = lv_label_create(buttonExt, NULL);
+  labelMov  = lv_label_create(buttonMov, NULL);
+  labelExt  = lv_label_create(buttonExt, NULL);
   labelStep = lv_label_create(buttonStep, NULL);
   lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
 
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(labelAdd, speed_menu.add);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, speed_menu.dec);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
   disp_speed_type();
   disp_speed_step();
 
   printSpeedText = lv_label_create(scr, NULL);
-  lv_obj_set_style(printSpeedText, &tft_style_lable_rel);
+  lv_obj_set_style(printSpeedText, &tft_style_label_rel);
   disp_print_speed();
 }
 
 void disp_speed_step() {
   if (uiCfg.stepPrintSpeed == 1)
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, "bmp_Step1_percent.bin", 0);
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, "bmp_step1_percent.bin", 0);
   else if (uiCfg.stepPrintSpeed == 5)
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, "bmp_Step5_percent.bin", 0);
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, "bmp_step5_percent.bin", 0);
   else if (uiCfg.stepPrintSpeed == 10)
-    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, "bmp_Step10_percent.bin", 0);
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, "bmp_step10_percent.bin", 0);
 
   if (gCfgItems.multiple_language != 0) {
     if (uiCfg.stepPrintSpeed == 1) {
       lv_label_set_text(labelStep, speed_menu.step_1percent);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
     else if (uiCfg.stepPrintSpeed == 5) {
       lv_label_set_text(labelStep, speed_menu.step_5percent);
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
@@ -284,53 +283,53 @@ void disp_speed_step() {
       lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
     }
   }
 }
 
 void disp_print_speed() {
   char buf[30] = {0};
 
   public_buf_l[0] = '\0';
 
-  if (speedType == 0) { //move
+  if (speedType == 0) { // move
     strcat(public_buf_l, speed_menu.move_speed);
-    strcat(public_buf_l, ": ");
-    sprintf(buf, "%d%%", feedrate_percentage);
+    strcat_P(public_buf_l, PSTR(": "));
+    sprintf_P(buf, PSTR("%d%%"), feedrate_percentage);
     strcat(public_buf_l, buf);
   }
   else if (speedType == 1) { // e1
     strcat(public_buf_l, speed_menu.extrude_speed);
-    strcat(public_buf_l, ": ");
-    sprintf(buf, "%d%%", planner.flow_percentage[0]);
+    strcat_P(public_buf_l, PSTR(": "));
+    sprintf_P(buf, PSTR("%d%%"), planner.flow_percentage[0]);
     strcat(public_buf_l, buf);
   }
   lv_label_set_text(printSpeedText, public_buf_l);
   lv_obj_align(printSpeedText, NULL, LV_ALIGN_CENTER, 0, -65);
 }
 
 void disp_speed_type() {
   switch (speedType) {
     case 1:
       lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, "bmp_extruct_sel.bin", 0);
-      lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, "bmp_mov_changespeed.bin", 0);
+      lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, "bmp_mov_changeSpeed.bin", 0);
       break;
 
     default:
-      lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, "bmp_Extruct.bin", 0);
+      lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, "bmp_speed_extruct.bin", 0);
       lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, "bmp_mov_sel.bin", 0);
       break;
   }
   lv_obj_refresh_ext_draw_pad(buttonExt);
   lv_obj_refresh_ext_draw_pad(buttonMov);
 
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(labelMov, speed_menu.move);
     lv_obj_align(labelMov, buttonMov, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelExt, speed_menu.extrude);
     lv_obj_align(labelExt, buttonExt, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 }
 
 void lv_clear_change_speed() { lv_obj_del(scr); }
 
-#endif // TFT_LVGL_UI
+#endif // HAS_TFT_LVGL_UI

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
index 864b5781b4..a2b02826c7 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if ENABLED(TFT_LVGL_UI)
 
 #include "lv_conf.h"
 #include "draw_ui.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"

commit e5bc9d31cc87be5c7ef2bd3cd70c2599f76d2bd7
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Jul 1 03:30:24 2020 -0300

    Add TFT_LVGL_UI support (#18438)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
index 6d44ecb71c..864b5781b4 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -14,21 +14,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LITTLE_VGL_UI)
+#if ENABLED(TFT_LVGL_UI)
 
 #include "lv_conf.h"
 #include "draw_ui.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../MarlinCore.h"
 #include "../../../../module/temperature.h"
@@ -303,34 +303,34 @@ void disp_print_speed() {
     sprintf(buf, "%d%%", planner.flow_percentage[0]);
     strcat(public_buf_l, buf);
   }
   lv_label_set_text(printSpeedText, public_buf_l);
   lv_obj_align(printSpeedText, NULL, LV_ALIGN_CENTER, 0, -65);
 }
 
 void disp_speed_type() {
   switch (speedType) {
     case 1:
-      lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, "bmp_Extruct_speed_sel.bin", 0);
-      lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, "bmp_Mov_speed.bin", 0);
+      lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, "bmp_extruct_sel.bin", 0);
+      lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, "bmp_mov_changespeed.bin", 0);
       break;
 
     default:
-      lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, "bmp_Extruct_speed.bin", 0);
-      lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, "bmp_Mov_speed_sel.bin", 0);
+      lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, "bmp_Extruct.bin", 0);
+      lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, "bmp_mov_sel.bin", 0);
       break;
   }
   lv_obj_refresh_ext_draw_pad(buttonExt);
   lv_obj_refresh_ext_draw_pad(buttonMov);
 
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(labelMov, speed_menu.move);
     lv_obj_align(labelMov, buttonMov, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelExt, speed_menu.extrude);
     lv_obj_align(labelExt, buttonExt, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 }
 
 void lv_clear_change_speed() { lv_obj_del(scr); }
 
-#endif // TFT_LITTLE_VGL_UI
+#endif // TFT_LVGL_UI

commit 642112d3eb7c1af9a52feec8134c85ed3e34891c
Author: makerbase <4164049@qq.com>
Date:   Tue Jun 16 10:05:33 2020 +0800

    Add MKS UI (TFT_LITTLE_VGL_UI) (#18071)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
new file mode 100644
index 0000000000..6d44ecb71c
--- /dev/null
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_change_speed.cpp
@@ -0,0 +1,336 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(TFT_LITTLE_VGL_UI)
+
+#include "lv_conf.h"
+#include "draw_ui.h"
+//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
+//#include "../lvgl/src/lv_objx/lv_img.h"
+//#include "../lvgl/src/lv_core/lv_disp.h"
+//#include "../lvgl/src/lv_core/lv_refr.h"
+
+#include "../../../../MarlinCore.h"
+#include "../../../../module/temperature.h"
+#include "../../../../module/planner.h"
+
+static lv_obj_t * scr;
+static lv_obj_t * labelStep, *buttonStep, *buttonMov, *buttonExt;
+static lv_obj_t * labelMov, *labelExt;
+static lv_obj_t * printSpeedText;
+
+#define ID_C_ADD    1
+#define ID_C_DEC    2
+#define ID_C_MOVE   3
+#define ID_C_EXT    4
+#define ID_C_STEP   5
+#define ID_C_RETURN   6
+
+static uint8_t speedType;
+
+static void event_handler(lv_obj_t * obj, lv_event_t event) {
+  switch (obj->mks_obj_id) {
+    case ID_C_ADD:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        if (speedType == 0) {
+          if (feedrate_percentage < MAX_EXT_SPEED_PERCENT - uiCfg.stepPrintSpeed)
+            feedrate_percentage += uiCfg.stepPrintSpeed;
+          else
+            feedrate_percentage = MAX_EXT_SPEED_PERCENT;
+        }
+        else if (speedType == 1) {
+          if (planner.flow_percentage[0] < MAX_EXT_SPEED_PERCENT - uiCfg.stepPrintSpeed)
+            planner.flow_percentage[0] += uiCfg.stepPrintSpeed;
+          else
+            planner.flow_percentage[0] = MAX_EXT_SPEED_PERCENT;
+          //planner.e_factor[0]= planner.flow_percentage[0]*0.01;
+          //planner.flow_percentage[1] = planner.flow_percentage[0];
+          //planner.e_factor[1]= planner.flow_percentage[1]*0.01;
+          planner.refresh_e_factor(0);
+          if (EXTRUDERS == 2) {
+            planner.flow_percentage[1] = planner.flow_percentage[0];
+            planner.refresh_e_factor(1);
+          }
+        }
+        disp_print_speed();
+      }
+      break;
+    case ID_C_DEC:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        if (speedType == 0) {
+          if (feedrate_percentage > MIN_EXT_SPEED_PERCENT + uiCfg.stepPrintSpeed)
+            feedrate_percentage -= uiCfg.stepPrintSpeed;
+          else
+            feedrate_percentage = MIN_EXT_SPEED_PERCENT;
+        }
+        else if (speedType == 1) {
+          if (planner.flow_percentage[0] > MIN_EXT_SPEED_PERCENT + uiCfg.stepPrintSpeed)
+            planner.flow_percentage[0] -= uiCfg.stepPrintSpeed;
+          else
+            planner.flow_percentage[0] = MIN_EXT_SPEED_PERCENT;
+          //planner.e_factor[0]= planner.flow_percentage[0] * 0.01;
+          //planner.flow_percentage[1] = planner.flow_percentage[0];
+          //planner.e_factor[1]= planner.flow_percentage[1] * 0.01;
+          planner.refresh_e_factor(0);
+          if (EXTRUDERS == 2) {
+            planner.flow_percentage[1] = planner.flow_percentage[0];
+            planner.refresh_e_factor(1);
+          }
+        }
+        disp_print_speed();
+      }
+      break;
+    case ID_C_MOVE:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        speedType = 0;
+        disp_speed_type();
+        disp_print_speed();
+      }
+      break;
+    case ID_C_EXT:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        speedType = 1;
+        disp_speed_type();
+        disp_print_speed();
+      }
+      break;
+    case ID_C_STEP:
+      if (event == LV_EVENT_CLICKED) {
+
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        if (uiCfg.stepPrintSpeed == 1)
+          uiCfg.stepPrintSpeed = 5;
+        else if (uiCfg.stepPrintSpeed == 5)
+          uiCfg.stepPrintSpeed = 10;
+        else
+          uiCfg.stepPrintSpeed = 1;
+        disp_speed_step();
+      }
+      break;
+    case ID_C_RETURN:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        clear_cur_ui();
+        draw_return_ui();
+      }
+      break;
+  }
+}
+
+void lv_draw_change_speed(void) {
+  lv_obj_t *buttonAdd, *buttonDec;
+  lv_obj_t *buttonBack;
+
+  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != CHANGE_SPEED_UI) {
+    disp_state_stack._disp_index++;
+    disp_state_stack._disp_state[disp_state_stack._disp_index] = CHANGE_SPEED_UI;
+  }
+  disp_state = CHANGE_SPEED_UI;
+
+  scr = lv_obj_create(NULL, NULL);
+
+  lv_obj_set_style(scr, &tft_style_scr);
+  lv_scr_load(scr);
+  lv_obj_clean(scr);
+
+  lv_obj_t * title = lv_label_create(scr, NULL);
+  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
+  lv_label_set_text(title, creat_title_text());
+
+  lv_refr_now(lv_refr_get_disp_refreshing());
+
+  LV_IMG_DECLARE(bmp_pic);
+
+  /*Create an Image button*/
+  buttonAdd = lv_imgbtn_create(scr, NULL);
+  buttonDec = lv_imgbtn_create(scr, NULL);
+  buttonMov = lv_imgbtn_create(scr, NULL);
+  buttonExt = lv_imgbtn_create(scr, NULL);
+  buttonStep = lv_imgbtn_create(scr, NULL);
+  buttonBack = lv_imgbtn_create(scr, NULL);
+
+  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_C_ADD, "bmp_Add.bin", 0);
+  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, &bmp_pic);
+  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, &bmp_pic);
+  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_lable_pre);
+  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
+
+  #if 1
+    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_C_DEC, "bmp_Dec.bin", 0);
+    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+
+    lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonMov, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonMov, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonMov, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonExt, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonExt, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonExt, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonStep, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonStep, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_C_RETURN, "bmp_Return.bin", 0);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  #endif
+
+  lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
+  lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
+  lv_obj_set_pos(buttonMov, INTERVAL_V,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonExt, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonStep, BTN_X_PIXEL * 2 + INTERVAL_V * 3,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4,  BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+
+  /*Create a label on the Image button*/
+  lv_btn_set_layout(buttonAdd, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonDec, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonMov, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonExt, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonStep, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
+
+  lv_obj_t * labelAdd = lv_label_create(buttonAdd, NULL);
+  lv_obj_t * labelDec = lv_label_create(buttonDec, NULL);
+  labelMov = lv_label_create(buttonMov, NULL);
+  labelExt = lv_label_create(buttonExt, NULL);
+  labelStep = lv_label_create(buttonStep, NULL);
+  lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
+
+  if (gCfgItems.multiple_language != 0) {
+    lv_label_set_text(labelAdd, speed_menu.add);
+    lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(labelDec, speed_menu.dec);
+    lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_Back, common_menu.text_back);
+    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+  }
+  disp_speed_type();
+  disp_speed_step();
+
+  printSpeedText = lv_label_create(scr, NULL);
+  lv_obj_set_style(printSpeedText, &tft_style_lable_rel);
+  disp_print_speed();
+}
+
+void disp_speed_step() {
+  if (uiCfg.stepPrintSpeed == 1)
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, "bmp_Step1_percent.bin", 0);
+  else if (uiCfg.stepPrintSpeed == 5)
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, "bmp_Step5_percent.bin", 0);
+  else if (uiCfg.stepPrintSpeed == 10)
+    lv_obj_set_event_cb_mks(buttonStep, event_handler, ID_C_STEP, "bmp_Step10_percent.bin", 0);
+
+  if (gCfgItems.multiple_language != 0) {
+    if (uiCfg.stepPrintSpeed == 1) {
+      lv_label_set_text(labelStep, speed_menu.step_1percent);
+      lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    }
+    else if (uiCfg.stepPrintSpeed == 5) {
+      lv_label_set_text(labelStep, speed_menu.step_5percent);
+      lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    }
+    else if (uiCfg.stepPrintSpeed == 10) {
+      lv_label_set_text(labelStep, speed_menu.step_10percent);
+      lv_obj_align(labelStep, buttonStep, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+    }
+  }
+}
+
+void disp_print_speed() {
+  char buf[30] = {0};
+
+  public_buf_l[0] = '\0';
+
+  if (speedType == 0) { //move
+    strcat(public_buf_l, speed_menu.move_speed);
+    strcat(public_buf_l, ": ");
+    sprintf(buf, "%d%%", feedrate_percentage);
+    strcat(public_buf_l, buf);
+  }
+  else if (speedType == 1) { // e1
+    strcat(public_buf_l, speed_menu.extrude_speed);
+    strcat(public_buf_l, ": ");
+    sprintf(buf, "%d%%", planner.flow_percentage[0]);
+    strcat(public_buf_l, buf);
+  }
+  lv_label_set_text(printSpeedText, public_buf_l);
+  lv_obj_align(printSpeedText, NULL, LV_ALIGN_CENTER, 0, -65);
+}
+
+void disp_speed_type() {
+  switch (speedType) {
+    case 1:
+      lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, "bmp_Extruct_speed_sel.bin", 0);
+      lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, "bmp_Mov_speed.bin", 0);
+      break;
+
+    default:
+      lv_obj_set_event_cb_mks(buttonExt, event_handler, ID_C_EXT, "bmp_Extruct_speed.bin", 0);
+      lv_obj_set_event_cb_mks(buttonMov, event_handler, ID_C_MOVE, "bmp_Mov_speed_sel.bin", 0);
+      break;
+  }
+  lv_obj_refresh_ext_draw_pad(buttonExt);
+  lv_obj_refresh_ext_draw_pad(buttonMov);
+
+  if (gCfgItems.multiple_language != 0) {
+    lv_label_set_text(labelMov, speed_menu.move);
+    lv_obj_align(labelMov, buttonMov, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(labelExt, speed_menu.extrude);
+    lv_obj_align(labelExt, buttonExt, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+  }
+}
+
+void lv_clear_change_speed() { lv_obj_del(scr); }
+
+#endif // TFT_LITTLE_VGL_UI
