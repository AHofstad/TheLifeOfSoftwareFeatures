commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
deleted file mode 100644
index 700471b4a3..0000000000
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ /dev/null
@@ -1,95 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-#include "../../../../inc/MarlinConfigPre.h"
-
-#if HAS_TFT_LVGL_UI
-
-#include "draw_ui.h"
-#include <lv_conf.h>
-
-#include "../../../../module/temperature.h"
-#include "../../../../gcode/queue.h"
-#include "../../../../gcode/gcode.h"
-#include "../../../../inc/MarlinConfig.h"
-
-extern lv_group_t *g;
-static lv_obj_t *scr, *fanText;
-
-enum {
-  ID_F_ADD = 1,
-  ID_F_DEC,
-  ID_F_HIGH,
-  ID_F_MID,
-  ID_F_OFF,
-  ID_F_RETURN
-};
-
-static void event_handler(lv_obj_t *obj, lv_event_t event) {
-  if (event != LV_EVENT_RELEASED) return;
-  uint8_t fanPercent = map(thermalManager.fan_speed[0], 0, 255, 0, 100);
-  switch (obj->mks_obj_id) {
-    case ID_F_ADD: if (fanPercent < 100) fanPercent++; break;
-    case ID_F_DEC: if (fanPercent !=  0) fanPercent--; break;
-    case ID_F_HIGH: fanPercent = 100; break;
-    case ID_F_MID:  fanPercent =  50; break;
-    case ID_F_OFF:  fanPercent =   0; break;
-    case ID_F_RETURN: clear_cur_ui(); draw_return_ui(); return;
-  }
-  thermalManager.set_fan_speed(0, map(fanPercent, 0, 100, 0, 255));
-}
-
-void lv_draw_fan() {
-  lv_obj_t *buttonAdd;
-
-  scr = lv_screen_create(FAN_UI);
-  // Create an Image button
-  buttonAdd  = lv_big_button_create(scr, "F:/bmp_Add.bin", fan_menu.add, INTERVAL_V, titleHeight, event_handler, ID_F_ADD);
-  lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
-  lv_big_button_create(scr, "F:/bmp_Dec.bin", fan_menu.dec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_F_DEC);
-  lv_big_button_create(scr, "F:/bmp_speed255.bin", fan_menu.full, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_HIGH);
-  lv_big_button_create(scr, "F:/bmp_speed127.bin", fan_menu.half, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_MID);
-  lv_big_button_create(scr, "F:/bmp_speed0.bin", fan_menu.off, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_OFF);
-  lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_RETURN);
-
-  fanText = lv_label_create_empty(scr);
-  lv_obj_set_style(fanText, &tft_style_label_rel);
-  disp_fan_value();
-}
-
-void disp_fan_value() {
-  #if HAS_FAN
-    sprintf_P(public_buf_l, PSTR("%s: %3d%%"), fan_menu.state, (int)map(thermalManager.fan_speed[0], 0, 255, 0, 100));
-  #else
-    sprintf_P(public_buf_l, PSTR("%s: ---"), fan_menu.state);
-  #endif
-  lv_label_set_text(fanText, public_buf_l);
-  lv_obj_align(fanText, nullptr, LV_ALIGN_CENTER, 0, -65);
-}
-
-void lv_clear_fan() {
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
-  #endif
-  lv_obj_del(scr);
-}
-
-#endif // HAS_TFT_LVGL_UI

commit 61af08d4993014935a3a378952cd5562ee4e2e14
Author: Malderin <52313714+Malderin@users.noreply.github.com>
Date:   Tue Apr 6 04:39:57 2021 +0300

    MKS LVGL UI: Display/edit fan percentage (#21544)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
index af8b441f24..700471b4a3 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -25,91 +25,69 @@
 
 #include "draw_ui.h"
 #include <lv_conf.h>
 
 #include "../../../../module/temperature.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../gcode/gcode.h"
 #include "../../../../inc/MarlinConfig.h"
 
 extern lv_group_t *g;
-static lv_obj_t *scr;
-static lv_obj_t *fanText;
+static lv_obj_t *scr, *fanText;
 
 enum {
   ID_F_ADD = 1,
   ID_F_DEC,
   ID_F_HIGH,
   ID_F_MID,
   ID_F_OFF,
   ID_F_RETURN
 };
 
-static uint8_t fanSpeed;
-
 static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
-
+  uint8_t fanPercent = map(thermalManager.fan_speed[0], 0, 255, 0, 100);
   switch (obj->mks_obj_id) {
-    case ID_F_ADD:
-      if (fanSpeed < 254) fanSpeed++;
-      break;
-    case ID_F_DEC:
-      if (fanSpeed > 0) fanSpeed--;
-      break;
-    case ID_F_HIGH:
-      fanSpeed = 255;
-      break;
-    case ID_F_MID:
-      fanSpeed = 127;
-      break;
-    case ID_F_OFF:
-      gcode.process_subcommands_now_P(PSTR("M107"));
-      return;
-    case ID_F_RETURN:
-      clear_cur_ui();
-      draw_return_ui();
-      return;
+    case ID_F_ADD: if (fanPercent < 100) fanPercent++; break;
+    case ID_F_DEC: if (fanPercent !=  0) fanPercent--; break;
+    case ID_F_HIGH: fanPercent = 100; break;
+    case ID_F_MID:  fanPercent =  50; break;
+    case ID_F_OFF:  fanPercent =   0; break;
+    case ID_F_RETURN: clear_cur_ui(); draw_return_ui(); return;
   }
-  sprintf_P(public_buf_l, PSTR("M106 S%d"), fanSpeed);
-  gcode.process_subcommands_now(public_buf_l);
+  thermalManager.set_fan_speed(0, map(fanPercent, 0, 100, 0, 255));
 }
 
 void lv_draw_fan() {
   lv_obj_t *buttonAdd;
 
-  #if HAS_FAN
-    fanSpeed = thermalManager.fan_speed[0];
-  #endif
-
   scr = lv_screen_create(FAN_UI);
   // Create an Image button
   buttonAdd  = lv_big_button_create(scr, "F:/bmp_Add.bin", fan_menu.add, INTERVAL_V, titleHeight, event_handler, ID_F_ADD);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
   lv_big_button_create(scr, "F:/bmp_Dec.bin", fan_menu.dec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_F_DEC);
   lv_big_button_create(scr, "F:/bmp_speed255.bin", fan_menu.full, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_HIGH);
   lv_big_button_create(scr, "F:/bmp_speed127.bin", fan_menu.half, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_MID);
   lv_big_button_create(scr, "F:/bmp_speed0.bin", fan_menu.off, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_OFF);
   lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_RETURN);
 
   fanText = lv_label_create_empty(scr);
   lv_obj_set_style(fanText, &tft_style_label_rel);
   disp_fan_value();
 }
 
 void disp_fan_value() {
-  char buf1[10] = {0};
-  public_buf_l[0] = '\0';
-  strcat(public_buf_l, fan_menu.state);
-  strcat_P(public_buf_l, PSTR(": "));
-  sprintf_P(buf1, PSTR("%3d"), thermalManager.fan_speed[0]);
-  strcat(public_buf_l, buf1);
+  #if HAS_FAN
+    sprintf_P(public_buf_l, PSTR("%s: %3d%%"), fan_menu.state, (int)map(thermalManager.fan_speed[0], 0, 255, 0, 100));
+  #else
+    sprintf_P(public_buf_l, PSTR("%s: ---"), fan_menu.state);
+  #endif
   lv_label_set_text(fanText, public_buf_l);
   lv_obj_align(fanText, nullptr, LV_ALIGN_CENTER, 0, -65);
 }
 
 void lv_clear_fan() {
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
   #endif
   lv_obj_del(scr);
 }

commit c753fc690f6cdd181213304224eee029988ffd34
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 14 00:23:56 2021 -0600

    More MKS UI prelim. cleanup

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
index cd74a55e65..af8b441f24 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -67,21 +67,21 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
       return;
     case ID_F_RETURN:
       clear_cur_ui();
       draw_return_ui();
       return;
   }
   sprintf_P(public_buf_l, PSTR("M106 S%d"), fanSpeed);
   gcode.process_subcommands_now(public_buf_l);
 }
 
-void lv_draw_fan(void) {
+void lv_draw_fan() {
   lv_obj_t *buttonAdd;
 
   #if HAS_FAN
     fanSpeed = thermalManager.fan_speed[0];
   #endif
 
   scr = lv_screen_create(FAN_UI);
   // Create an Image button
   buttonAdd  = lv_big_button_create(scr, "F:/bmp_Add.bin", fan_menu.add, INTERVAL_V, titleHeight, event_handler, ID_F_ADD);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);

commit 44c57ab05a8f909b85f51e08c90316b41e50c455
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 12 21:02:35 2021 -0600

    MKS UI prelim. cleanup (#20763)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
index 5453bbf86b..cd74a55e65 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -18,24 +18,20 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
 #include "draw_ui.h"
 #include <lv_conf.h>
-//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
-//#include "../lvgl/src/lv_objx/lv_img.h"
-//#include "../lvgl/src/lv_core/lv_disp.h"
-//#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../module/temperature.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../gcode/gcode.h"
 #include "../../../../inc/MarlinConfig.h"
 
 extern lv_group_t *g;
 static lv_obj_t *scr;
 static lv_obj_t *fanText;
 
@@ -45,49 +41,44 @@ enum {
   ID_F_HIGH,
   ID_F_MID,
   ID_F_OFF,
   ID_F_RETURN
 };
 
 static uint8_t fanSpeed;
 
 static void event_handler(lv_obj_t *obj, lv_event_t event) {
   if (event != LV_EVENT_RELEASED) return;
+
   switch (obj->mks_obj_id) {
     case ID_F_ADD:
-      if (fanSpeed + 1 <= 255) {
-        fanSpeed++;
-        sprintf_P(public_buf_l, PSTR("M106 S%d"), fanSpeed);
-        gcode.process_subcommands_now(public_buf_l);
-      }
+      if (fanSpeed < 254) fanSpeed++;
       break;
     case ID_F_DEC:
-      if (fanSpeed > 0) {
-        fanSpeed--;
-        sprintf_P(public_buf_l, PSTR("M106 S%d"), fanSpeed);
-        gcode.process_subcommands_now(public_buf_l);
-      }
+      if (fanSpeed > 0) fanSpeed--;
       break;
     case ID_F_HIGH:
-      gcode.process_subcommands_now_P(PSTR("M106 S255"));
+      fanSpeed = 255;
       break;
     case ID_F_MID:
-      gcode.process_subcommands_now_P(PSTR("M106 S127"));
+      fanSpeed = 127;
       break;
     case ID_F_OFF:
       gcode.process_subcommands_now_P(PSTR("M107"));
-      break;
+      return;
     case ID_F_RETURN:
       clear_cur_ui();
       draw_return_ui();
-      break;
+      return;
   }
+  sprintf_P(public_buf_l, PSTR("M106 S%d"), fanSpeed);
+  gcode.process_subcommands_now(public_buf_l);
 }
 
 void lv_draw_fan(void) {
   lv_obj_t *buttonAdd;
 
   #if HAS_FAN
     fanSpeed = thermalManager.fan_speed[0];
   #endif
 
   scr = lv_screen_create(FAN_UI);

commit 853d01de683ab3efcbb15ef95db869e279053ee0
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 19:28:31 2020 -0300

    More LVGL UI code reduction (#19879)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
index 5306ab3a89..5453bbf86b 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -82,32 +82,22 @@ static void event_handler(lv_obj_t *obj, lv_event_t event) {
       break;
   }
 }
 
 void lv_draw_fan(void) {
   lv_obj_t *buttonAdd;
 
   #if HAS_FAN
     fanSpeed = thermalManager.fan_speed[0];
   #endif
-  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != FAN_UI) {
-    disp_state_stack._disp_index++;
-    disp_state_stack._disp_state[disp_state_stack._disp_index] = FAN_UI;
-  }
-  disp_state = FAN_UI;
-
-  scr = lv_screen_create();
-
-  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
-
-  lv_refr_now(lv_refr_get_disp_refreshing());
 
+  scr = lv_screen_create(FAN_UI);
   // Create an Image button
   buttonAdd  = lv_big_button_create(scr, "F:/bmp_Add.bin", fan_menu.add, INTERVAL_V, titleHeight, event_handler, ID_F_ADD);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
   lv_big_button_create(scr, "F:/bmp_Dec.bin", fan_menu.dec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_F_DEC);
   lv_big_button_create(scr, "F:/bmp_speed255.bin", fan_menu.full, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_HIGH);
   lv_big_button_create(scr, "F:/bmp_speed127.bin", fan_menu.half, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_MID);
   lv_big_button_create(scr, "F:/bmp_speed0.bin", fan_menu.off, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_OFF);
   lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_RETURN);
 
   fanText = lv_label_create_empty(scr);

commit 9630c2683c39468bf885c560a1768d8b377d9462
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Oct 24 01:37:45 2020 -0300

    More MKS UI cleanup, optimization (#19869)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
index 6024d58203..5306ab3a89 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -28,183 +28,109 @@
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 
 #include "../../../../module/temperature.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../gcode/gcode.h"
 #include "../../../../inc/MarlinConfig.h"
 
-extern lv_group_t * g;
-static lv_obj_t * scr;
-static lv_obj_t * fanText;
-
-#define ID_F_ADD     1
-#define ID_F_DEC     2
-#define ID_F_HIGH    3
-#define ID_F_MID     4
-#define ID_F_OFF     5
-#define ID_F_RETURN  6
+extern lv_group_t *g;
+static lv_obj_t *scr;
+static lv_obj_t *fanText;
+
+enum {
+  ID_F_ADD = 1,
+  ID_F_DEC,
+  ID_F_HIGH,
+  ID_F_MID,
+  ID_F_OFF,
+  ID_F_RETURN
+};
 
 static uint8_t fanSpeed;
 
-static void event_handler(lv_obj_t * obj, lv_event_t event) {
+static void event_handler(lv_obj_t *obj, lv_event_t event) {
+  if (event != LV_EVENT_RELEASED) return;
   switch (obj->mks_obj_id) {
     case ID_F_ADD:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        if (fanSpeed + 1 <= 255) {
-          fanSpeed++;
-          ZERO(public_buf_l);
-          sprintf_P(public_buf_l, PSTR("M106 S%d"), fanSpeed);
-          gcode.process_subcommands_now(public_buf_l);
-        }
+      if (fanSpeed + 1 <= 255) {
+        fanSpeed++;
+        sprintf_P(public_buf_l, PSTR("M106 S%d"), fanSpeed);
+        gcode.process_subcommands_now(public_buf_l);
       }
       break;
     case ID_F_DEC:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        if (fanSpeed > 0) {
-          fanSpeed--;
-          ZERO(public_buf_l);
-          sprintf_P(public_buf_l, PSTR("M106 S%d"), fanSpeed);
-          gcode.process_subcommands_now(public_buf_l);
-        }
+      if (fanSpeed > 0) {
+        fanSpeed--;
+        sprintf_P(public_buf_l, PSTR("M106 S%d"), fanSpeed);
+        gcode.process_subcommands_now(public_buf_l);
       }
-
       break;
     case ID_F_HIGH:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        gcode.process_subcommands_now_P(PSTR("M106 S255"));
-      }
+      gcode.process_subcommands_now_P(PSTR("M106 S255"));
       break;
     case ID_F_MID:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        gcode.process_subcommands_now_P(PSTR("M106 S127"));
-      }
+      gcode.process_subcommands_now_P(PSTR("M106 S127"));
       break;
     case ID_F_OFF:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        gcode.process_subcommands_now_P(PSTR("M107"));
-      }
+      gcode.process_subcommands_now_P(PSTR("M107"));
       break;
     case ID_F_RETURN:
-      if (event == LV_EVENT_CLICKED) {
-        // nothing to do
-      }
-      else if (event == LV_EVENT_RELEASED) {
-        clear_cur_ui();
-        draw_return_ui();
-      }
+      clear_cur_ui();
+      draw_return_ui();
       break;
   }
 }
 
 void lv_draw_fan(void) {
-  lv_obj_t *buttonAdd, *buttonDec, *buttonHigh, *buttonMid;
-  lv_obj_t *buttonOff, *buttonBack;
+  lv_obj_t *buttonAdd;
 
   #if HAS_FAN
     fanSpeed = thermalManager.fan_speed[0];
   #endif
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != FAN_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = FAN_UI;
   }
   disp_state = FAN_UI;
 
-  scr = lv_obj_create(NULL, NULL);
-
-  lv_obj_set_style(scr, &tft_style_scr);
-  lv_scr_load(scr);
-  lv_obj_clean(scr);
+  scr = lv_screen_create();
 
   (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   // Create an Image button
-  buttonAdd  = lv_imgbtn_create(scr, "F:/bmp_Add.bin", INTERVAL_V, titleHeight, event_handler, ID_F_ADD);
+  buttonAdd  = lv_big_button_create(scr, "F:/bmp_Add.bin", fan_menu.add, INTERVAL_V, titleHeight, event_handler, ID_F_ADD);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
-
-  buttonDec  = lv_imgbtn_create(scr, "F:/bmp_Dec.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_F_DEC);
-  buttonHigh = lv_imgbtn_create(scr, "F:/bmp_speed255.bin", INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_HIGH);
-  buttonMid  = lv_imgbtn_create(scr, "F:/bmp_speed127.bin", BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_MID);
-  buttonOff  = lv_imgbtn_create(scr, "F:/bmp_speed0.bin", BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_OFF);
-  buttonBack = lv_imgbtn_create(scr, "F:/bmp_return.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_RETURN);
-
-  // Create labels on the image buttons
-  lv_obj_t *labelAdd = lv_label_create_empty(buttonAdd);
-  lv_obj_t *labelDec = lv_label_create_empty(buttonDec);
-  lv_obj_t *labelHigh = lv_label_create_empty(buttonHigh);
-  lv_obj_t *labelMid = lv_label_create_empty(buttonMid);
-  lv_obj_t *labelOff = lv_label_create_empty(buttonOff);
-  lv_obj_t *label_Back = lv_label_create_empty(buttonBack);
-
-  if (gCfgItems.multiple_language) {
-    lv_label_set_text(labelAdd, fan_menu.add);
-    lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(labelDec, fan_menu.dec);
-    lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(labelHigh, fan_menu.full);
-    lv_obj_align(labelHigh, buttonHigh, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(labelMid, fan_menu.half);
-    lv_obj_align(labelMid, buttonMid, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(labelOff, fan_menu.off);
-    lv_obj_align(labelOff, buttonOff, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-
-    lv_label_set_text(label_Back, common_menu.text_back);
-    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
-  }
-  #if HAS_ROTARY_ENCODER
-    if (gCfgItems.encoder_enable) {
-      lv_group_add_obj(g, buttonAdd);
-      lv_group_add_obj(g, buttonDec);
-      lv_group_add_obj(g, buttonHigh);
-      lv_group_add_obj(g, buttonMid);
-      lv_group_add_obj(g, buttonOff);
-      lv_group_add_obj(g, buttonBack);
-    }
-  #endif
+  lv_big_button_create(scr, "F:/bmp_Dec.bin", fan_menu.dec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_F_DEC);
+  lv_big_button_create(scr, "F:/bmp_speed255.bin", fan_menu.full, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_HIGH);
+  lv_big_button_create(scr, "F:/bmp_speed127.bin", fan_menu.half, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_MID);
+  lv_big_button_create(scr, "F:/bmp_speed0.bin", fan_menu.off, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_OFF);
+  lv_big_button_create(scr, "F:/bmp_return.bin", common_menu.text_back, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_RETURN);
 
   fanText = lv_label_create_empty(scr);
   lv_obj_set_style(fanText, &tft_style_label_rel);
   disp_fan_value();
 }
 
 void disp_fan_value() {
   char buf1[10] = {0};
   public_buf_l[0] = '\0';
   strcat(public_buf_l, fan_menu.state);
   strcat_P(public_buf_l, PSTR(": "));
   sprintf_P(buf1, PSTR("%3d"), thermalManager.fan_speed[0]);
   strcat(public_buf_l, buf1);
   lv_label_set_text(fanText, public_buf_l);
-  lv_obj_align(fanText, NULL, LV_ALIGN_CENTER, 0, -65);
+  lv_obj_align(fanText, nullptr, LV_ALIGN_CENTER, 0, -65);
 }
 
 void lv_clear_fan() {
   #if HAS_ROTARY_ENCODER
     if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
   #endif
   lv_obj_del(scr);
 }
 
 #endif // HAS_TFT_LVGL_UI

commit 4533a197d59ffcaccc4d476f06df7754b11b9b0c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 22 20:22:17 2020 -0500

    Slim down MKS UI code (#19843)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
index 5d7bb335dc..6024d58203 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -125,96 +125,41 @@ void lv_draw_fan(void) {
     disp_state_stack._disp_state[disp_state_stack._disp_index] = FAN_UI;
   }
   disp_state = FAN_UI;
 
   scr = lv_obj_create(NULL, NULL);
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
-  lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_label_rel);
-  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
-  lv_label_set_text(title, creat_title_text());
+  (void)lv_label_create(scr, TITLE_XPOS, TITLE_YPOS, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   // Create an Image button
-  buttonAdd  = lv_imgbtn_create(scr, NULL);
-  buttonDec  = lv_imgbtn_create(scr, NULL);
-  buttonHigh = lv_imgbtn_create(scr, NULL);
-  buttonMid  = lv_imgbtn_create(scr, NULL);
-  buttonOff  = lv_imgbtn_create(scr, NULL);
-  buttonBack = lv_imgbtn_create(scr, NULL);
-
-  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_F_ADD, NULL, 0);
-  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, "F:/bmp_Add.bin");
-  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, "F:/bmp_Add.bin");
-  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_label_pre);
-  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_label_rel);
+  buttonAdd  = lv_imgbtn_create(scr, "F:/bmp_Add.bin", INTERVAL_V, titleHeight, event_handler, ID_F_ADD);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
 
-  #if 1
-    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_F_DEC, NULL, 0);
-    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, "F:/bmp_Dec.bin");
-    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, "F:/bmp_Dec.bin");
-    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonHigh, event_handler,ID_F_HIGH, NULL,0);
-    lv_imgbtn_set_src(buttonHigh, LV_BTN_STATE_REL, "F:/bmp_speed255.bin");
-    lv_imgbtn_set_src(buttonHigh, LV_BTN_STATE_PR, "F:/bmp_speed255.bin");
-    lv_imgbtn_set_style(buttonHigh, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonHigh, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonMid, event_handler,ID_F_MID, NULL,0);
-    lv_imgbtn_set_src(buttonMid, LV_BTN_STATE_REL, "F:/bmp_speed127.bin");
-    lv_imgbtn_set_src(buttonMid, LV_BTN_STATE_PR, "F:/bmp_speed127.bin");
-    lv_imgbtn_set_style(buttonMid, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonMid, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonOff, event_handler,ID_F_OFF, NULL,0);
-    lv_imgbtn_set_src(buttonOff, LV_BTN_STATE_REL, "F:/bmp_speed0.bin");
-    lv_imgbtn_set_src(buttonOff, LV_BTN_STATE_PR, "F:/bmp_speed0.bin");
-    lv_imgbtn_set_style(buttonOff, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonOff, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-    lv_obj_set_event_cb_mks(buttonBack, event_handler,ID_F_RETURN, NULL,0);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, "F:/bmp_return.bin");
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, "F:/bmp_return.bin");
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
-
-  #endif
-
-  lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
-  lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
-  lv_obj_set_pos(buttonHigh, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonMid, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonOff, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
-  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  buttonDec  = lv_imgbtn_create(scr, "F:/bmp_Dec.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight, event_handler, ID_F_DEC);
+  buttonHigh = lv_imgbtn_create(scr, "F:/bmp_speed255.bin", INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_HIGH);
+  buttonMid  = lv_imgbtn_create(scr, "F:/bmp_speed127.bin", BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_MID);
+  buttonOff  = lv_imgbtn_create(scr, "F:/bmp_speed0.bin", BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_OFF);
+  buttonBack = lv_imgbtn_create(scr, "F:/bmp_return.bin", BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight, event_handler, ID_F_RETURN);
 
   // Create labels on the image buttons
-  lv_btn_set_layout(buttonAdd, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonDec, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonHigh, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonMid, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonOff, LV_LAYOUT_OFF);
-  lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
-
-  lv_obj_t *labelAdd = lv_label_create(buttonAdd, NULL);
-  lv_obj_t *labelDec = lv_label_create(buttonDec, NULL);
-  lv_obj_t *labelHigh = lv_label_create(buttonHigh, NULL);
-  lv_obj_t *labelMid = lv_label_create(buttonMid, NULL);
-  lv_obj_t *labelOff = lv_label_create(buttonOff, NULL);
-  lv_obj_t *label_Back = lv_label_create(buttonBack, NULL);
+  lv_obj_t *labelAdd = lv_label_create_empty(buttonAdd);
+  lv_obj_t *labelDec = lv_label_create_empty(buttonDec);
+  lv_obj_t *labelHigh = lv_label_create_empty(buttonHigh);
+  lv_obj_t *labelMid = lv_label_create_empty(buttonMid);
+  lv_obj_t *labelOff = lv_label_create_empty(buttonOff);
+  lv_obj_t *label_Back = lv_label_create_empty(buttonBack);
 
   if (gCfgItems.multiple_language) {
     lv_label_set_text(labelAdd, fan_menu.add);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, fan_menu.dec);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelHigh, fan_menu.full);
     lv_obj_align(labelHigh, buttonHigh, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
@@ -232,21 +177,21 @@ void lv_draw_fan(void) {
     if (gCfgItems.encoder_enable) {
       lv_group_add_obj(g, buttonAdd);
       lv_group_add_obj(g, buttonDec);
       lv_group_add_obj(g, buttonHigh);
       lv_group_add_obj(g, buttonMid);
       lv_group_add_obj(g, buttonOff);
       lv_group_add_obj(g, buttonBack);
     }
   #endif
 
-  fanText = lv_label_create(scr, NULL);
+  fanText = lv_label_create_empty(scr);
   lv_obj_set_style(fanText, &tft_style_label_rel);
   disp_fan_value();
 }
 
 void disp_fan_value() {
   char buf1[10] = {0};
   public_buf_l[0] = '\0';
   strcat(public_buf_l, fan_menu.state);
   strcat_P(public_buf_l, PSTR(": "));
   sprintf_P(buf1, PSTR("%3d"), thermalManager.fan_speed[0]);

commit 072f996af70b5ac635893eca2d4bd4bbb4f00acc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 21 12:45:27 2020 -0500

    General cleanup, mostly MKS UI (#19825)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
index 8cdc14964f..5d7bb335dc 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -16,31 +16,31 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if HAS_TFT_LVGL_UI
 
-#include "../../../../MarlinCore.h"
-#include "lv_conf.h"
+#include "draw_ui.h"
+#include <lv_conf.h>
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
-#include "../../../../../Configuration.h"
-#include "draw_ui.h"
+
 #include "../../../../module/temperature.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../gcode/gcode.h"
+#include "../../../../inc/MarlinConfig.h"
 
 extern lv_group_t * g;
 static lv_obj_t * scr;
 static lv_obj_t * fanText;
 
 #define ID_F_ADD     1
 #define ID_F_DEC     2
 #define ID_F_HIGH    3
 #define ID_F_MID     4
 #define ID_F_OFF     5
@@ -202,21 +202,21 @@ void lv_draw_fan(void) {
   lv_btn_set_layout(buttonOff, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
   lv_obj_t *labelAdd = lv_label_create(buttonAdd, NULL);
   lv_obj_t *labelDec = lv_label_create(buttonDec, NULL);
   lv_obj_t *labelHigh = lv_label_create(buttonHigh, NULL);
   lv_obj_t *labelMid = lv_label_create(buttonMid, NULL);
   lv_obj_t *labelOff = lv_label_create(buttonOff, NULL);
   lv_obj_t *label_Back = lv_label_create(buttonBack, NULL);
 
-  if (gCfgItems.multiple_language != 0) {
+  if (gCfgItems.multiple_language) {
     lv_label_set_text(labelAdd, fan_menu.add);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, fan_menu.dec);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelHigh, fan_menu.full);
     lv_obj_align(labelHigh, buttonHigh, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelMid, fan_menu.half);

commit d8ed74904559aa8bdccc8b68acbccfbf1bf779d3
Author: makerbase <4164049@qq.com>
Date:   Mon Sep 21 09:55:02 2020 +0800

    Add MKS Robin E3P, improve LVGL UI (#19442)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
index e1975aca7e..8cdc14964f 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -28,20 +28,21 @@
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 #include "../../../../../Configuration.h"
 #include "draw_ui.h"
 #include "../../../../module/temperature.h"
 #include "../../../../gcode/queue.h"
 #include "../../../../gcode/gcode.h"
 
+extern lv_group_t * g;
 static lv_obj_t * scr;
 static lv_obj_t * fanText;
 
 #define ID_F_ADD     1
 #define ID_F_DEC     2
 #define ID_F_HIGH    3
 #define ID_F_MID     4
 #define ID_F_OFF     5
 #define ID_F_RETURN  6
 
@@ -131,65 +132,63 @@ void lv_draw_fan(void) {
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
   lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
-  LV_IMG_DECLARE(bmp_pic);
-
   // Create an Image button
   buttonAdd  = lv_imgbtn_create(scr, NULL);
   buttonDec  = lv_imgbtn_create(scr, NULL);
   buttonHigh = lv_imgbtn_create(scr, NULL);
   buttonMid  = lv_imgbtn_create(scr, NULL);
   buttonOff  = lv_imgbtn_create(scr, NULL);
   buttonBack = lv_imgbtn_create(scr, NULL);
 
-  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_F_ADD, "bmp_Add.bin", 0);
-  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, &bmp_pic);
-  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, &bmp_pic);
+  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_F_ADD, NULL, 0);
+  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, "F:/bmp_Add.bin");
+  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, "F:/bmp_Add.bin");
   lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_label_pre);
   lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_label_rel);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
 
   #if 1
-    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_F_DEC, "bmp_Dec.bin", 0);
-    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_F_DEC, NULL, 0);
+    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, "F:/bmp_Dec.bin");
+    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, "F:/bmp_Dec.bin");
     lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonHigh, event_handler,ID_F_HIGH,"bmp_speed255.bin",0);
-    lv_imgbtn_set_src(buttonHigh, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonHigh, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonHigh, event_handler,ID_F_HIGH, NULL,0);
+    lv_imgbtn_set_src(buttonHigh, LV_BTN_STATE_REL, "F:/bmp_speed255.bin");
+    lv_imgbtn_set_src(buttonHigh, LV_BTN_STATE_PR, "F:/bmp_speed255.bin");
     lv_imgbtn_set_style(buttonHigh, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonHigh, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonMid, event_handler,ID_F_MID,"bmp_speed127.bin",0);
-    lv_imgbtn_set_src(buttonMid, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonMid, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonMid, event_handler,ID_F_MID, NULL,0);
+    lv_imgbtn_set_src(buttonMid, LV_BTN_STATE_REL, "F:/bmp_speed127.bin");
+    lv_imgbtn_set_src(buttonMid, LV_BTN_STATE_PR, "F:/bmp_speed127.bin");
     lv_imgbtn_set_style(buttonMid, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonMid, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonOff, event_handler,ID_F_OFF,"bmp_speed0.bin",0);
-    lv_imgbtn_set_src(buttonOff, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonOff, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonOff, event_handler,ID_F_OFF, NULL,0);
+    lv_imgbtn_set_src(buttonOff, LV_BTN_STATE_REL, "F:/bmp_speed0.bin");
+    lv_imgbtn_set_src(buttonOff, LV_BTN_STATE_PR, "F:/bmp_speed0.bin");
     lv_imgbtn_set_style(buttonOff, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonOff, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler,ID_F_RETURN,"bmp_return.bin",0);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
-    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler,ID_F_RETURN, NULL,0);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, "F:/bmp_return.bin");
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, "F:/bmp_return.bin");
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
 
   #endif
 
   lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonHigh, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonMid, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonOff, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
@@ -222,30 +221,45 @@ void lv_draw_fan(void) {
 
     lv_label_set_text(labelMid, fan_menu.half);
     lv_obj_align(labelMid, buttonMid, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelOff, fan_menu.off);
     lv_obj_align(labelOff, buttonOff, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) {
+      lv_group_add_obj(g, buttonAdd);
+      lv_group_add_obj(g, buttonDec);
+      lv_group_add_obj(g, buttonHigh);
+      lv_group_add_obj(g, buttonMid);
+      lv_group_add_obj(g, buttonOff);
+      lv_group_add_obj(g, buttonBack);
+    }
+  #endif
 
   fanText = lv_label_create(scr, NULL);
   lv_obj_set_style(fanText, &tft_style_label_rel);
   disp_fan_value();
 }
 
 void disp_fan_value() {
   char buf1[10] = {0};
   public_buf_l[0] = '\0';
   strcat(public_buf_l, fan_menu.state);
   strcat_P(public_buf_l, PSTR(": "));
   sprintf_P(buf1, PSTR("%3d"), thermalManager.fan_speed[0]);
   strcat(public_buf_l, buf1);
   lv_label_set_text(fanText, public_buf_l);
   lv_obj_align(fanText, NULL, LV_ALIGN_CENTER, 0, -65);
 }
 
-void lv_clear_fan() { lv_obj_del(scr); }
+void lv_clear_fan() {
+  #if HAS_ROTARY_ENCODER
+    if (gCfgItems.encoder_enable) lv_group_remove_all_objs(g);
+  #endif
+  lv_obj_del(scr);
+}
 
 #endif // HAS_TFT_LVGL_UI

commit 60ab7a1ddbda1b1a6d20cbeb5c574ce775f57a4b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 20 19:07:59 2020 -0500

    Cleanup before MKS changes

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
index 4dcac62aee..e1975aca7e 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -133,34 +133,35 @@ void lv_draw_fan(void) {
 
   lv_obj_t * title = lv_label_create(scr, NULL);
   lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   LV_IMG_DECLARE(bmp_pic);
 
-  /*Create an Image button*/
-  buttonAdd = lv_imgbtn_create(scr, NULL);
-  buttonDec = lv_imgbtn_create(scr, NULL);
+  // Create an Image button
+  buttonAdd  = lv_imgbtn_create(scr, NULL);
+  buttonDec  = lv_imgbtn_create(scr, NULL);
   buttonHigh = lv_imgbtn_create(scr, NULL);
-  buttonMid = lv_imgbtn_create(scr, NULL);
-  buttonOff = lv_imgbtn_create(scr, NULL);
+  buttonMid  = lv_imgbtn_create(scr, NULL);
+  buttonOff  = lv_imgbtn_create(scr, NULL);
   buttonBack = lv_imgbtn_create(scr, NULL);
 
   lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_F_ADD, "bmp_Add.bin", 0);
   lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, &bmp_pic);
   lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, &bmp_pic);
   lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_label_pre);
   lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_label_rel);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
+
   #if 1
     lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_F_DEC, "bmp_Dec.bin", 0);
     lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, &bmp_pic);
     lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_label_rel);
 
     lv_obj_set_event_cb_mks(buttonHigh, event_handler,ID_F_HIGH,"bmp_speed255.bin",0);
     lv_imgbtn_set_src(buttonHigh, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonHigh, LV_BTN_STATE_PR, &bmp_pic);
@@ -177,44 +178,44 @@ void lv_draw_fan(void) {
     lv_imgbtn_set_src(buttonOff, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonOff, LV_BTN_STATE_PR, &bmp_pic);
     lv_imgbtn_set_style(buttonOff, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonOff, LV_BTN_STATE_REL, &tft_style_label_rel);
 
     lv_obj_set_event_cb_mks(buttonBack, event_handler,ID_F_RETURN,"bmp_return.bin",0);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
     lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
+
   #endif
 
   lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonHigh, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonMid, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonOff, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
-  /*Create a label on the Image button*/
+  // Create labels on the image buttons
   lv_btn_set_layout(buttonAdd, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonDec, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonHigh, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonMid, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonOff, LV_LAYOUT_OFF);
   lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
 
-  lv_obj_t * labelAdd = lv_label_create(buttonAdd, NULL);
-  lv_obj_t * labelDec = lv_label_create(buttonDec, NULL);
-  lv_obj_t * labelHigh = lv_label_create(buttonHigh, NULL);
-  lv_obj_t * labelMid = lv_label_create(buttonMid, NULL);
-  lv_obj_t * labelOff = lv_label_create(buttonOff, NULL);
-  lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
-
+  lv_obj_t *labelAdd = lv_label_create(buttonAdd, NULL);
+  lv_obj_t *labelDec = lv_label_create(buttonDec, NULL);
+  lv_obj_t *labelHigh = lv_label_create(buttonHigh, NULL);
+  lv_obj_t *labelMid = lv_label_create(buttonMid, NULL);
+  lv_obj_t *labelOff = lv_label_create(buttonOff, NULL);
+  lv_obj_t *label_Back = lv_label_create(buttonBack, NULL);
 
   if (gCfgItems.multiple_language != 0) {
     lv_label_set_text(labelAdd, fan_menu.add);
     lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelDec, fan_menu.dec);
     lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelHigh, fan_menu.full);
     lv_obj_align(labelHigh, buttonHigh, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);

commit d20d4591321aa467c062f0050355d2aca84e03ad
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Sat Jul 25 13:52:07 2020 +0800

    Robin nano V2, TFT LVGL UI parameters, and more (#18500)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
index 76c0e251e8..4dcac62aee 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -14,32 +14,33 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LVGL_UI)
+#if HAS_TFT_LVGL_UI
 
 #include "../../../../MarlinCore.h"
 #include "lv_conf.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 #include "../../../../../Configuration.h"
 #include "draw_ui.h"
 #include "../../../../module/temperature.h"
 #include "../../../../gcode/queue.h"
+#include "../../../../gcode/gcode.h"
 
 static lv_obj_t * scr;
 static lv_obj_t * fanText;
 
 #define ID_F_ADD     1
 #define ID_F_DEC     2
 #define ID_F_HIGH    3
 #define ID_F_MID     4
 #define ID_F_OFF     5
 #define ID_F_RETURN  6
@@ -48,146 +49,148 @@ static uint8_t fanSpeed;
 
 static void event_handler(lv_obj_t * obj, lv_event_t event) {
   switch (obj->mks_obj_id) {
     case ID_F_ADD:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (fanSpeed + 1 <= 255) {
           fanSpeed++;
-          memset(public_buf_l, 0, sizeof(public_buf_l));
-          sprintf(public_buf_l, "M106 S%d", fanSpeed);
-          queue.enqueue_one_now(PSTR(public_buf_l));
+          ZERO(public_buf_l);
+          sprintf_P(public_buf_l, PSTR("M106 S%d"), fanSpeed);
+          gcode.process_subcommands_now(public_buf_l);
         }
       }
       break;
     case ID_F_DEC:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         if (fanSpeed > 0) {
           fanSpeed--;
-          memset(public_buf_l, 0, sizeof(public_buf_l));
-          sprintf(public_buf_l, "M106 S%d", fanSpeed);
-          queue.enqueue_one_now(PSTR(public_buf_l));
+          ZERO(public_buf_l);
+          sprintf_P(public_buf_l, PSTR("M106 S%d"), fanSpeed);
+          gcode.process_subcommands_now(public_buf_l);
         }
       }
 
       break;
     case ID_F_HIGH:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
-        queue.enqueue_one_now(PSTR("M106 S255"));
+        gcode.process_subcommands_now_P(PSTR("M106 S255"));
       }
       break;
     case ID_F_MID:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
-        queue.enqueue_one_now(PSTR("M106 S127"));
+        gcode.process_subcommands_now_P(PSTR("M106 S127"));
       }
       break;
     case ID_F_OFF:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
-        queue.enqueue_one_now(PSTR("M107"));
+        gcode.process_subcommands_now_P(PSTR("M107"));
       }
       break;
     case ID_F_RETURN:
       if (event == LV_EVENT_CLICKED) {
         // nothing to do
       }
       else if (event == LV_EVENT_RELEASED) {
         clear_cur_ui();
         draw_return_ui();
       }
       break;
   }
 }
 
-
 void lv_draw_fan(void) {
   lv_obj_t *buttonAdd, *buttonDec, *buttonHigh, *buttonMid;
   lv_obj_t *buttonOff, *buttonBack;
 
+  #if HAS_FAN
+    fanSpeed = thermalManager.fan_speed[0];
+  #endif
   if (disp_state_stack._disp_state[disp_state_stack._disp_index] != FAN_UI) {
     disp_state_stack._disp_index++;
     disp_state_stack._disp_state[disp_state_stack._disp_index] = FAN_UI;
   }
   disp_state = FAN_UI;
 
   scr = lv_obj_create(NULL, NULL);
 
   lv_obj_set_style(scr, &tft_style_scr);
   lv_scr_load(scr);
   lv_obj_clean(scr);
 
   lv_obj_t * title = lv_label_create(scr, NULL);
-  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_style(title, &tft_style_label_rel);
   lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
   lv_label_set_text(title, creat_title_text());
 
   lv_refr_now(lv_refr_get_disp_refreshing());
 
   LV_IMG_DECLARE(bmp_pic);
 
   /*Create an Image button*/
   buttonAdd = lv_imgbtn_create(scr, NULL);
   buttonDec = lv_imgbtn_create(scr, NULL);
   buttonHigh = lv_imgbtn_create(scr, NULL);
   buttonMid = lv_imgbtn_create(scr, NULL);
   buttonOff = lv_imgbtn_create(scr, NULL);
   buttonBack = lv_imgbtn_create(scr, NULL);
 
   lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_F_ADD, "bmp_Add.bin", 0);
   lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, &bmp_pic);
   lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, &bmp_pic);
-  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_lable_pre);
-  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_label_pre);
+  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_label_rel);
   lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
   #if 1
     lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_F_DEC, "bmp_Dec.bin", 0);
     lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonHigh, event_handler, ID_F_HIGH, "bmp_Speed255.bin", 0);
+    lv_obj_set_event_cb_mks(buttonHigh, event_handler,ID_F_HIGH,"bmp_speed255.bin",0);
     lv_imgbtn_set_src(buttonHigh, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonHigh, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonHigh, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonHigh, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonHigh, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonHigh, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonMid, event_handler, ID_F_MID, "bmp_Speed127.bin", 0);
+    lv_obj_set_event_cb_mks(buttonMid, event_handler,ID_F_MID,"bmp_speed127.bin",0);
     lv_imgbtn_set_src(buttonMid, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonMid, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonMid, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonMid, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonMid, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonMid, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonOff, event_handler, ID_F_OFF, "bmp_Speed0.bin", 0);
+    lv_obj_set_event_cb_mks(buttonOff, event_handler,ID_F_OFF,"bmp_speed0.bin",0);
     lv_imgbtn_set_src(buttonOff, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonOff, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonOff, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonOff, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonOff, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonOff, LV_BTN_STATE_REL, &tft_style_label_rel);
 
-    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_F_RETURN, "bmp_Return.bin", 0);
+    lv_obj_set_event_cb_mks(buttonBack, event_handler,ID_F_RETURN,"bmp_return.bin",0);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
     lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
-    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_label_pre);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_label_rel);
   #endif
 
   lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
   lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
   lv_obj_set_pos(buttonHigh, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonMid, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonOff, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
   lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
 
   /*Create a label on the Image button*/
@@ -220,28 +223,28 @@ void lv_draw_fan(void) {
     lv_obj_align(labelMid, buttonMid, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(labelOff, fan_menu.off);
     lv_obj_align(labelOff, buttonOff, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
 
     lv_label_set_text(label_Back, common_menu.text_back);
     lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
   }
 
   fanText = lv_label_create(scr, NULL);
-  lv_obj_set_style(fanText, &tft_style_lable_rel);
+  lv_obj_set_style(fanText, &tft_style_label_rel);
   disp_fan_value();
 }
 
 void disp_fan_value() {
   char buf1[10] = {0};
   public_buf_l[0] = '\0';
   strcat(public_buf_l, fan_menu.state);
-  strcat(public_buf_l, ": ");
-  sprintf(buf1, "%3d", thermalManager.fan_speed[0]);
+  strcat_P(public_buf_l, PSTR(": "));
+  sprintf_P(buf1, PSTR("%3d"), thermalManager.fan_speed[0]);
   strcat(public_buf_l, buf1);
   lv_label_set_text(fanText, public_buf_l);
   lv_obj_align(fanText, NULL, LV_ALIGN_CENTER, 0, -65);
 }
 
 void lv_clear_fan() { lv_obj_del(scr); }
 
-#endif // TFT_LVGL_UI
+#endif // HAS_TFT_LVGL_UI

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
index 0d907fea3d..76c0e251e8 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
 #if ENABLED(TFT_LVGL_UI)
 
 #include "../../../../MarlinCore.h"
 #include "lv_conf.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"

commit e5bc9d31cc87be5c7ef2bd3cd70c2599f76d2bd7
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Wed Jul 1 03:30:24 2020 -0300

    Add TFT_LVGL_UI support (#18438)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
index d5bf62ab3e..0d907fea3d 100644
--- a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -14,21 +14,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #include "../../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(TFT_LITTLE_VGL_UI)
+#if ENABLED(TFT_LVGL_UI)
 
 #include "../../../../MarlinCore.h"
 #include "lv_conf.h"
 //#include "../lvgl/src/lv_objx/lv_imgbtn.h"
 //#include "../lvgl/src/lv_objx/lv_img.h"
 //#include "../lvgl/src/lv_core/lv_disp.h"
 //#include "../lvgl/src/lv_core/lv_refr.h"
 #include "../../../../../Configuration.h"
 #include "draw_ui.h"
 #include "../../../../module/temperature.h"
@@ -237,11 +237,11 @@ void disp_fan_value() {
   strcat(public_buf_l, fan_menu.state);
   strcat(public_buf_l, ": ");
   sprintf(buf1, "%3d", thermalManager.fan_speed[0]);
   strcat(public_buf_l, buf1);
   lv_label_set_text(fanText, public_buf_l);
   lv_obj_align(fanText, NULL, LV_ALIGN_CENTER, 0, -65);
 }
 
 void lv_clear_fan() { lv_obj_del(scr); }
 
-#endif // TFT_LITTLE_VGL_UI
+#endif // TFT_LVGL_UI

commit 642112d3eb7c1af9a52feec8134c85ed3e34891c
Author: makerbase <4164049@qq.com>
Date:   Tue Jun 16 10:05:33 2020 +0800

    Add MKS UI (TFT_LITTLE_VGL_UI) (#18071)

diff --git a/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
new file mode 100644
index 0000000000..d5bf62ab3e
--- /dev/null
+++ b/Marlin/src/lcd/extui/lib/mks_ui/draw_fan.cpp
@@ -0,0 +1,247 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#include "../../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(TFT_LITTLE_VGL_UI)
+
+#include "../../../../MarlinCore.h"
+#include "lv_conf.h"
+//#include "../lvgl/src/lv_objx/lv_imgbtn.h"
+//#include "../lvgl/src/lv_objx/lv_img.h"
+//#include "../lvgl/src/lv_core/lv_disp.h"
+//#include "../lvgl/src/lv_core/lv_refr.h"
+#include "../../../../../Configuration.h"
+#include "draw_ui.h"
+#include "../../../../module/temperature.h"
+#include "../../../../gcode/queue.h"
+
+static lv_obj_t * scr;
+static lv_obj_t * fanText;
+
+#define ID_F_ADD     1
+#define ID_F_DEC     2
+#define ID_F_HIGH    3
+#define ID_F_MID     4
+#define ID_F_OFF     5
+#define ID_F_RETURN  6
+
+static uint8_t fanSpeed;
+
+static void event_handler(lv_obj_t * obj, lv_event_t event) {
+  switch (obj->mks_obj_id) {
+    case ID_F_ADD:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        if (fanSpeed + 1 <= 255) {
+          fanSpeed++;
+          memset(public_buf_l, 0, sizeof(public_buf_l));
+          sprintf(public_buf_l, "M106 S%d", fanSpeed);
+          queue.enqueue_one_now(PSTR(public_buf_l));
+        }
+      }
+      break;
+    case ID_F_DEC:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        if (fanSpeed > 0) {
+          fanSpeed--;
+          memset(public_buf_l, 0, sizeof(public_buf_l));
+          sprintf(public_buf_l, "M106 S%d", fanSpeed);
+          queue.enqueue_one_now(PSTR(public_buf_l));
+        }
+      }
+
+      break;
+    case ID_F_HIGH:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        queue.enqueue_one_now(PSTR("M106 S255"));
+      }
+      break;
+    case ID_F_MID:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        queue.enqueue_one_now(PSTR("M106 S127"));
+      }
+      break;
+    case ID_F_OFF:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        queue.enqueue_one_now(PSTR("M107"));
+      }
+      break;
+    case ID_F_RETURN:
+      if (event == LV_EVENT_CLICKED) {
+        // nothing to do
+      }
+      else if (event == LV_EVENT_RELEASED) {
+        clear_cur_ui();
+        draw_return_ui();
+      }
+      break;
+  }
+}
+
+
+void lv_draw_fan(void) {
+  lv_obj_t *buttonAdd, *buttonDec, *buttonHigh, *buttonMid;
+  lv_obj_t *buttonOff, *buttonBack;
+
+  if (disp_state_stack._disp_state[disp_state_stack._disp_index] != FAN_UI) {
+    disp_state_stack._disp_index++;
+    disp_state_stack._disp_state[disp_state_stack._disp_index] = FAN_UI;
+  }
+  disp_state = FAN_UI;
+
+  scr = lv_obj_create(NULL, NULL);
+
+  lv_obj_set_style(scr, &tft_style_scr);
+  lv_scr_load(scr);
+  lv_obj_clean(scr);
+
+  lv_obj_t * title = lv_label_create(scr, NULL);
+  lv_obj_set_style(title, &tft_style_lable_rel);
+  lv_obj_set_pos(title, TITLE_XPOS, TITLE_YPOS);
+  lv_label_set_text(title, creat_title_text());
+
+  lv_refr_now(lv_refr_get_disp_refreshing());
+
+  LV_IMG_DECLARE(bmp_pic);
+
+  /*Create an Image button*/
+  buttonAdd = lv_imgbtn_create(scr, NULL);
+  buttonDec = lv_imgbtn_create(scr, NULL);
+  buttonHigh = lv_imgbtn_create(scr, NULL);
+  buttonMid = lv_imgbtn_create(scr, NULL);
+  buttonOff = lv_imgbtn_create(scr, NULL);
+  buttonBack = lv_imgbtn_create(scr, NULL);
+
+  lv_obj_set_event_cb_mks(buttonAdd, event_handler, ID_F_ADD, "bmp_Add.bin", 0);
+  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_REL, &bmp_pic);
+  lv_imgbtn_set_src(buttonAdd, LV_BTN_STATE_PR, &bmp_pic);
+  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_PR, &tft_style_lable_pre);
+  lv_imgbtn_set_style(buttonAdd, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  lv_obj_clear_protect(buttonAdd, LV_PROTECT_FOLLOW);
+  #if 1
+    lv_obj_set_event_cb_mks(buttonDec, event_handler, ID_F_DEC, "bmp_Dec.bin", 0);
+    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonDec, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonDec, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonHigh, event_handler, ID_F_HIGH, "bmp_Speed255.bin", 0);
+    lv_imgbtn_set_src(buttonHigh, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonHigh, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonHigh, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonHigh, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonMid, event_handler, ID_F_MID, "bmp_Speed127.bin", 0);
+    lv_imgbtn_set_src(buttonMid, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonMid, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonMid, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonMid, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonOff, event_handler, ID_F_OFF, "bmp_Speed0.bin", 0);
+    lv_imgbtn_set_src(buttonOff, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonOff, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonOff, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonOff, LV_BTN_STATE_REL, &tft_style_lable_rel);
+
+    lv_obj_set_event_cb_mks(buttonBack, event_handler, ID_F_RETURN, "bmp_Return.bin", 0);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_REL, &bmp_pic);
+    lv_imgbtn_set_src(buttonBack, LV_BTN_STATE_PR, &bmp_pic);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_PR, &tft_style_lable_pre);
+    lv_imgbtn_set_style(buttonBack, LV_BTN_STATE_REL, &tft_style_lable_rel);
+  #endif
+
+  lv_obj_set_pos(buttonAdd, INTERVAL_V, titleHeight);
+  lv_obj_set_pos(buttonDec, BTN_X_PIXEL * 3 + INTERVAL_V * 4, titleHeight);
+  lv_obj_set_pos(buttonHigh, INTERVAL_V, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonMid, BTN_X_PIXEL + INTERVAL_V * 2, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonOff, BTN_X_PIXEL * 2 + INTERVAL_V * 3, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+  lv_obj_set_pos(buttonBack, BTN_X_PIXEL * 3 + INTERVAL_V * 4, BTN_Y_PIXEL + INTERVAL_H + titleHeight);
+
+  /*Create a label on the Image button*/
+  lv_btn_set_layout(buttonAdd, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonDec, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonHigh, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonMid, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonOff, LV_LAYOUT_OFF);
+  lv_btn_set_layout(buttonBack, LV_LAYOUT_OFF);
+
+  lv_obj_t * labelAdd = lv_label_create(buttonAdd, NULL);
+  lv_obj_t * labelDec = lv_label_create(buttonDec, NULL);
+  lv_obj_t * labelHigh = lv_label_create(buttonHigh, NULL);
+  lv_obj_t * labelMid = lv_label_create(buttonMid, NULL);
+  lv_obj_t * labelOff = lv_label_create(buttonOff, NULL);
+  lv_obj_t * label_Back = lv_label_create(buttonBack, NULL);
+
+
+  if (gCfgItems.multiple_language != 0) {
+    lv_label_set_text(labelAdd, fan_menu.add);
+    lv_obj_align(labelAdd, buttonAdd, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(labelDec, fan_menu.dec);
+    lv_obj_align(labelDec, buttonDec, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(labelHigh, fan_menu.full);
+    lv_obj_align(labelHigh, buttonHigh, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(labelMid, fan_menu.half);
+    lv_obj_align(labelMid, buttonMid, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(labelOff, fan_menu.off);
+    lv_obj_align(labelOff, buttonOff, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+
+    lv_label_set_text(label_Back, common_menu.text_back);
+    lv_obj_align(label_Back, buttonBack, LV_ALIGN_IN_BOTTOM_MID, 0, BUTTON_TEXT_Y_OFFSET);
+  }
+
+  fanText = lv_label_create(scr, NULL);
+  lv_obj_set_style(fanText, &tft_style_lable_rel);
+  disp_fan_value();
+}
+
+void disp_fan_value() {
+  char buf1[10] = {0};
+  public_buf_l[0] = '\0';
+  strcat(public_buf_l, fan_menu.state);
+  strcat(public_buf_l, ": ");
+  sprintf(buf1, "%3d", thermalManager.fan_speed[0]);
+  strcat(public_buf_l, buf1);
+  lv_label_set_text(fanText, public_buf_l);
+  lv_obj_align(fanText, NULL, LV_ALIGN_CENTER, 0, -65);
+}
+
+void lv_clear_fan() { lv_obj_del(scr); }
+
+#endif // TFT_LITTLE_VGL_UI
