commit d364babbc0cdb73337d86e2c4fd9170b46b7361a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 26 14:29:21 2023 -0500

    üßë‚Äçüíª Change HAL_PATH macro for easier HAL relocation (#25743)

diff --git a/Marlin/src/libs/W25Qxx.h b/Marlin/src/libs/W25Qxx.h
index 778463477d..55490b0252 100644
--- a/Marlin/src/libs/W25Qxx.h
+++ b/Marlin/src/libs/W25Qxx.h
@@ -16,21 +16,21 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include <stdint.h>
 
-#include HAL_PATH(../HAL, MarlinSPI.h)
+#include HAL_PATH(.., MarlinSPI.h)
 
 #define W25X_WriteEnable        0x06
 #define W25X_WriteDisable       0x04
 #define W25X_ReadStatusReg      0x05
 #define W25X_WriteStatusReg     0x01
 #define W25X_ReadData           0x03
 #define W25X_FastReadData       0x0B
 #define W25X_FastReadDual       0x3B
 #define W25X_PageProgram        0x02
 #define W25X_BlockErase         0xD8

commit 24d1d3eb5cc4e7415e77393d35e40fb4124bc672
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jan 12 09:47:22 2022 -0600

    üí° Misc. cleanup, comments

diff --git a/Marlin/src/libs/W25Qxx.h b/Marlin/src/libs/W25Qxx.h
index 1133af2e74..778463477d 100644
--- a/Marlin/src/libs/W25Qxx.h
+++ b/Marlin/src/libs/W25Qxx.h
@@ -54,21 +54,21 @@ class W25QXXFlash {
 private:
   static MarlinSPI mySPI;
 public:
   void init(uint8_t spiRate);
   static uint8_t spi_flash_Rec();
   static uint8_t spi_flash_read_write_byte(uint8_t data);
   static void spi_flash_Read(uint8_t *buf, uint16_t nbyte);
   static void spi_flash_Send(uint8_t b);
   static void spi_flash_SendBlock(uint8_t token, const uint8_t *buf);
   static uint16_t W25QXX_ReadID(void);
-  static void SPI_FLASH_WriteEnable(void);
-  static void SPI_FLASH_WaitForWriteEnd(void);
+  static void SPI_FLASH_WriteEnable();
+  static void SPI_FLASH_WaitForWriteEnd();
   static void SPI_FLASH_SectorErase(uint32_t SectorAddr);
   static void SPI_FLASH_BlockErase(uint32_t BlockAddr);
-  static void SPI_FLASH_BulkErase(void);
+  static void SPI_FLASH_BulkErase();
   static void SPI_FLASH_PageWrite(uint8_t *pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite);
   static void SPI_FLASH_BufferWrite(uint8_t *pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite);
   static void SPI_FLASH_BufferRead(uint8_t *pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead);
 };
 
 extern W25QXXFlash W25QXX;

commit 3b73b115ca9366f0155986b717d4c85c31ed2f80
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Mar 29 20:36:37 2021 -0500

    Apply pointer formatting

diff --git a/Marlin/src/libs/W25Qxx.h b/Marlin/src/libs/W25Qxx.h
index eddae6b1f2..1133af2e74 100644
--- a/Marlin/src/libs/W25Qxx.h
+++ b/Marlin/src/libs/W25Qxx.h
@@ -50,25 +50,25 @@
 #define SPI_FLASH_PageSize           256
 #define SPI_FLASH_PerWritePageSize   256
 
 class W25QXXFlash {
 private:
   static MarlinSPI mySPI;
 public:
   void init(uint8_t spiRate);
   static uint8_t spi_flash_Rec();
   static uint8_t spi_flash_read_write_byte(uint8_t data);
-  static void spi_flash_Read(uint8_t* buf, uint16_t nbyte);
+  static void spi_flash_Read(uint8_t *buf, uint16_t nbyte);
   static void spi_flash_Send(uint8_t b);
-  static void spi_flash_SendBlock(uint8_t token, const uint8_t* buf);
+  static void spi_flash_SendBlock(uint8_t token, const uint8_t *buf);
   static uint16_t W25QXX_ReadID(void);
   static void SPI_FLASH_WriteEnable(void);
   static void SPI_FLASH_WaitForWriteEnd(void);
   static void SPI_FLASH_SectorErase(uint32_t SectorAddr);
   static void SPI_FLASH_BlockErase(uint32_t BlockAddr);
   static void SPI_FLASH_BulkErase(void);
-  static void SPI_FLASH_PageWrite(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite);
-  static void SPI_FLASH_BufferWrite(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite);
-  static void SPI_FLASH_BufferRead(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead);
+  static void SPI_FLASH_PageWrite(uint8_t *pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite);
+  static void SPI_FLASH_BufferWrite(uint8_t *pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite);
+  static void SPI_FLASH_BufferRead(uint8_t *pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead);
 };
 
 extern W25QXXFlash W25QXX;

commit 85d094bbb4cb6200057403be3d208a29920ecf12
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Nov 7 00:07:15 2020 -0300

    Standardize Marlin SPI (part 1) (#19989)

diff --git a/Marlin/src/libs/W25Qxx.h b/Marlin/src/libs/W25Qxx.h
index ac3e8a169b..eddae6b1f2 100644
--- a/Marlin/src/libs/W25Qxx.h
+++ b/Marlin/src/libs/W25Qxx.h
@@ -16,20 +16,22 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include <stdint.h>
 
+#include HAL_PATH(../HAL, MarlinSPI.h)
+
 #define W25X_WriteEnable        0x06
 #define W25X_WriteDisable       0x04
 #define W25X_ReadStatusReg      0x05
 #define W25X_WriteStatusReg     0x01
 #define W25X_ReadData           0x03
 #define W25X_FastReadData       0x0B
 #define W25X_FastReadDual       0x3B
 #define W25X_PageProgram        0x02
 #define W25X_BlockErase         0xD8
 #define W25X_SectorErase        0x20
@@ -42,20 +44,22 @@
 
 #define WIP_Flag                0x01  /* Write In Progress (WIP) flag */
 
 #define Dummy_Byte              0xA5
 
 #define SPI_FLASH_SectorSize         4096
 #define SPI_FLASH_PageSize           256
 #define SPI_FLASH_PerWritePageSize   256
 
 class W25QXXFlash {
+private:
+  static MarlinSPI mySPI;
 public:
   void init(uint8_t spiRate);
   static uint8_t spi_flash_Rec();
   static uint8_t spi_flash_read_write_byte(uint8_t data);
   static void spi_flash_Read(uint8_t* buf, uint16_t nbyte);
   static void spi_flash_Send(uint8_t b);
   static void spi_flash_SendBlock(uint8_t token, const uint8_t* buf);
   static uint16_t W25QXX_ReadID(void);
   static void SPI_FLASH_WriteEnable(void);
   static void SPI_FLASH_WaitForWriteEnd(void);

commit 6759aff22036a9fd4ae9f9398cd6e142a31ebd3b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 10 17:34:41 2020 -0500

    Clean up W25QXXFlash class

diff --git a/Marlin/src/libs/W25Qxx.h b/Marlin/src/libs/W25Qxx.h
index 81e9643450..ac3e8a169b 100644
--- a/Marlin/src/libs/W25Qxx.h
+++ b/Marlin/src/libs/W25Qxx.h
@@ -1,11 +1,11 @@
-Ôªø/**
+/**
  * Marlin 3D Printer Firmware
  * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
@@ -14,24 +14,20 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
-//#ifdef __cplusplus
-//extern "C" { /* C-declarations for C++ */
-//#endif
-
 #include <stdint.h>
 
 #define W25X_WriteEnable        0x06
 #define W25X_WriteDisable       0x04
 #define W25X_ReadStatusReg      0x05
 #define W25X_WriteStatusReg     0x01
 #define W25X_ReadData           0x03
 #define W25X_FastReadData       0x0B
 #define W25X_FastReadDual       0x3B
 #define W25X_PageProgram        0x02
@@ -64,13 +60,11 @@ public:
   static void SPI_FLASH_WriteEnable(void);
   static void SPI_FLASH_WaitForWriteEnd(void);
   static void SPI_FLASH_SectorErase(uint32_t SectorAddr);
   static void SPI_FLASH_BlockErase(uint32_t BlockAddr);
   static void SPI_FLASH_BulkErase(void);
   static void SPI_FLASH_PageWrite(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite);
   static void SPI_FLASH_BufferWrite(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite);
   static void SPI_FLASH_BufferRead(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead);
 };
 
-//#ifdef __cplusplus
-//} /* C-declarations for C++ */
-//#endif
+extern W25QXXFlash W25QXX;

commit 0a1b8659871f681464f24c40b16aa64cd2f7ca8e
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Sat Aug 8 21:24:31 2020 -0300

    W25QXX SPI Flash support (#18897)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/libs/W25Qxx.h b/Marlin/src/libs/W25Qxx.h
new file mode 100644
index 0000000000..81e9643450
--- /dev/null
+++ b/Marlin/src/libs/W25Qxx.h
@@ -0,0 +1,76 @@
+Ôªø/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+//#ifdef __cplusplus
+//extern "C" { /* C-declarations for C++ */
+//#endif
+
+#include <stdint.h>
+
+#define W25X_WriteEnable        0x06
+#define W25X_WriteDisable       0x04
+#define W25X_ReadStatusReg      0x05
+#define W25X_WriteStatusReg     0x01
+#define W25X_ReadData           0x03
+#define W25X_FastReadData       0x0B
+#define W25X_FastReadDual       0x3B
+#define W25X_PageProgram        0x02
+#define W25X_BlockErase         0xD8
+#define W25X_SectorErase        0x20
+#define W25X_ChipErase          0xC7
+#define W25X_PowerDown          0xB9
+#define W25X_ReleasePowerDown   0xAB
+#define W25X_DeviceID           0xAB
+#define W25X_ManufactDeviceID   0x90
+#define W25X_JedecDeviceID      0x9F
+
+#define WIP_Flag                0x01  /* Write In Progress (WIP) flag */
+
+#define Dummy_Byte              0xA5
+
+#define SPI_FLASH_SectorSize         4096
+#define SPI_FLASH_PageSize           256
+#define SPI_FLASH_PerWritePageSize   256
+
+class W25QXXFlash {
+public:
+  void init(uint8_t spiRate);
+  static uint8_t spi_flash_Rec();
+  static uint8_t spi_flash_read_write_byte(uint8_t data);
+  static void spi_flash_Read(uint8_t* buf, uint16_t nbyte);
+  static void spi_flash_Send(uint8_t b);
+  static void spi_flash_SendBlock(uint8_t token, const uint8_t* buf);
+  static uint16_t W25QXX_ReadID(void);
+  static void SPI_FLASH_WriteEnable(void);
+  static void SPI_FLASH_WaitForWriteEnd(void);
+  static void SPI_FLASH_SectorErase(uint32_t SectorAddr);
+  static void SPI_FLASH_BlockErase(uint32_t BlockAddr);
+  static void SPI_FLASH_BulkErase(void);
+  static void SPI_FLASH_PageWrite(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite);
+  static void SPI_FLASH_BufferWrite(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite);
+  static void SPI_FLASH_BufferRead(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead);
+};
+
+//#ifdef __cplusplus
+//} /* C-declarations for C++ */
+//#endif
