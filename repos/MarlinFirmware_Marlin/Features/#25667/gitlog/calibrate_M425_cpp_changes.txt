commit 669814d0d408a622f020a55971ba04030e4fa4bf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Feb 7 23:40:54 2024 -0600

    ‚ú® MARLIN_SMALL_BUILD option (#26775)

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index cd206ca489..22d71aba58 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -106,6 +106,8 @@ void GcodeSuite::M425() {
 }
 
 void GcodeSuite::M425_report(const bool forReplay/*=true*/) {
+  TERN_(MARLIN_SMALL_BUILD, return);
+
   report_heading_etc(forReplay, F(STR_BACKLASH_COMPENSATION));
   SERIAL_ECHOLNPGM_P(
     PSTR("  M425 F"), backlash.get_correction()

commit 1f9bfc5c7491d802d242623f8253b1f52c0917a3
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Wed May 10 06:59:25 2023 +1200

    üö∏ Optional X-Axis (#25418)
    
    Co-authored-by: alextrical <35117191+alextrical@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 0432b4c962..cd206ca489 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -112,17 +112,19 @@ void GcodeSuite::M425_report(const bool forReplay/*=true*/) {
     #ifdef BACKLASH_SMOOTHING_MM
       , PSTR(" S"), LINEAR_UNIT(backlash.get_smoothing_mm())
     #endif
-    , LIST_N(DOUBLE(NUM_AXES),
-        SP_X_STR, LINEAR_UNIT(backlash.get_distance_mm(X_AXIS)),
-        SP_Y_STR, LINEAR_UNIT(backlash.get_distance_mm(Y_AXIS)),
-        SP_Z_STR, LINEAR_UNIT(backlash.get_distance_mm(Z_AXIS)),
-        SP_I_STR, I_AXIS_UNIT(backlash.get_distance_mm(I_AXIS)),
-        SP_J_STR, J_AXIS_UNIT(backlash.get_distance_mm(J_AXIS)),
-        SP_K_STR, K_AXIS_UNIT(backlash.get_distance_mm(K_AXIS)),
-        SP_U_STR, U_AXIS_UNIT(backlash.get_distance_mm(U_AXIS)),
-        SP_V_STR, V_AXIS_UNIT(backlash.get_distance_mm(V_AXIS)),
-        SP_W_STR, W_AXIS_UNIT(backlash.get_distance_mm(W_AXIS))
-      )
+    #if NUM_AXES
+      , LIST_N(DOUBLE(NUM_AXES),
+          SP_X_STR, LINEAR_UNIT(backlash.get_distance_mm(X_AXIS)),
+          SP_Y_STR, LINEAR_UNIT(backlash.get_distance_mm(Y_AXIS)),
+          SP_Z_STR, LINEAR_UNIT(backlash.get_distance_mm(Z_AXIS)),
+          SP_I_STR, I_AXIS_UNIT(backlash.get_distance_mm(I_AXIS)),
+          SP_J_STR, J_AXIS_UNIT(backlash.get_distance_mm(J_AXIS)),
+          SP_K_STR, K_AXIS_UNIT(backlash.get_distance_mm(K_AXIS)),
+          SP_U_STR, U_AXIS_UNIT(backlash.get_distance_mm(U_AXIS)),
+          SP_V_STR, V_AXIS_UNIT(backlash.get_distance_mm(V_AXIS)),
+          SP_W_STR, W_AXIS_UNIT(backlash.get_distance_mm(W_AXIS))
+        )
+    #endif
   );
 }
 

commit 4233e4864f0c621612ce35a9b6ca882312e3aa4d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 01:56:10 2023 -0500

    üö∏ MarlinUI Endstop Test Screen, and more (#25667)

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index a6c6ff9dae..0432b4c962 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -46,12 +46,13 @@
 void GcodeSuite::M425() {
   bool noArgs = true;
 
-  auto axis_can_calibrate = [](const uint8_t a) {
-    #define _CAN_CASE(N) case N##_AXIS: return AXIS_CAN_CALIBRATE(N);
+  auto axis_can_calibrate = [](const uint8_t a) -> bool {
+    #define _CAN_CASE(N) case N##_AXIS: return bool(AXIS_CAN_CALIBRATE(N));
     switch (a) {
-      default: return false;
       MAIN_AXIS_MAP(_CAN_CASE)
+      default: break;
     }
+    return false;
   };
 
   LOOP_NUM_AXES(a) {

commit c5126de559719ebdaf4475b0db4ab21c26b90a1a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 22 16:08:29 2022 -0500

    üßë‚Äçüíª MAP macro for axis lists, etc. (#24191)

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 77e0e5c094..a6c6ff9dae 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -47,19 +47,10 @@ void GcodeSuite::M425() {
   bool noArgs = true;
 
   auto axis_can_calibrate = [](const uint8_t a) {
+    #define _CAN_CASE(N) case N##_AXIS: return AXIS_CAN_CALIBRATE(N);
     switch (a) {
       default: return false;
-      NUM_AXIS_CODE(
-        case X_AXIS: return AXIS_CAN_CALIBRATE(X),
-        case Y_AXIS: return AXIS_CAN_CALIBRATE(Y),
-        case Z_AXIS: return AXIS_CAN_CALIBRATE(Z),
-        case I_AXIS: return AXIS_CAN_CALIBRATE(I),
-        case J_AXIS: return AXIS_CAN_CALIBRATE(J),
-        case K_AXIS: return AXIS_CAN_CALIBRATE(K),
-        case U_AXIS: return AXIS_CAN_CALIBRATE(U),
-        case V_AXIS: return AXIS_CAN_CALIBRATE(V),
-        case W_AXIS: return AXIS_CAN_CALIBRATE(W)
-      );
+      MAIN_AXIS_MAP(_CAN_CASE)
     }
   };
 

commit 877e10205b286a6c1b8da869c54b50db866c1db8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 3 20:13:11 2022 -0500

    üèóÔ∏è Axis name arrays
    
    Co-Authored-By: DerAndere <26200979+DerAndere1@users.noreply.github.com>

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 65d368f532..77e0e5c094 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -92,9 +92,7 @@ void GcodeSuite::M425() {
     SERIAL_ECHOLNPGM("  Correction Amount/Fade-out:     F", backlash.get_correction(), " (F1.0 = full, F0.0 = none)");
     SERIAL_ECHOPGM("  Backlash Distance (mm):        ");
     LOOP_NUM_AXES(a) if (axis_can_calibrate(a)) {
-      SERIAL_CHAR(' ', AXIS_CHAR(a));
-      SERIAL_ECHO(backlash.get_distance_mm(AxisEnum(a)));
-      SERIAL_EOL();
+      SERIAL_ECHOLNPGM_P((PGM_P)pgm_read_ptr(&SP_AXIS_STR[a]), backlash.get_distance_mm((AxisEnum)a));
     }
 
     #ifdef BACKLASH_SMOOTHING_MM
@@ -105,8 +103,7 @@ void GcodeSuite::M425() {
       SERIAL_ECHOPGM("  Average measured backlash (mm):");
       if (backlash.has_any_measurement()) {
         LOOP_NUM_AXES(a) if (axis_can_calibrate(a) && backlash.has_measurement(AxisEnum(a))) {
-          SERIAL_CHAR(' ', AXIS_CHAR(a));
-          SERIAL_ECHO(backlash.get_measurement(AxisEnum(a)));
+          SERIAL_ECHOPGM_P((PGM_P)pgm_read_ptr(&SP_AXIS_STR[a]), backlash.get_measurement((AxisEnum)a));
         }
       }
       else

commit f5daefb09d1fdf3fc931e2ce84a28d4af1ba2bea
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 3 20:34:48 2022 -0500

    üèóÔ∏è More 9-axis updates

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index bfceefdbe2..65d368f532 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -66,7 +66,7 @@ void GcodeSuite::M425() {
   LOOP_NUM_AXES(a) {
     if (axis_can_calibrate(a) && parser.seen(AXIS_CHAR(a))) {
       planner.synchronize();
-      backlash.set_distance_mm(AxisEnum(a), parser.has_value() ? parser.value_axis_units(AxisEnum(a)) : backlash.get_measurement(AxisEnum(a)));
+      backlash.set_distance_mm((AxisEnum)a, parser.has_value() ? parser.value_axis_units((AxisEnum)a) : backlash.get_measurement((AxisEnum)a));
       noArgs = false;
     }
   }

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 6b1f56fcf6..bfceefdbe2 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -49,21 +49,24 @@ void GcodeSuite::M425() {
   auto axis_can_calibrate = [](const uint8_t a) {
     switch (a) {
       default: return false;
-      LINEAR_AXIS_CODE(
+      NUM_AXIS_CODE(
         case X_AXIS: return AXIS_CAN_CALIBRATE(X),
         case Y_AXIS: return AXIS_CAN_CALIBRATE(Y),
         case Z_AXIS: return AXIS_CAN_CALIBRATE(Z),
         case I_AXIS: return AXIS_CAN_CALIBRATE(I),
         case J_AXIS: return AXIS_CAN_CALIBRATE(J),
-        case K_AXIS: return AXIS_CAN_CALIBRATE(K)
+        case K_AXIS: return AXIS_CAN_CALIBRATE(K),
+        case U_AXIS: return AXIS_CAN_CALIBRATE(U),
+        case V_AXIS: return AXIS_CAN_CALIBRATE(V),
+        case W_AXIS: return AXIS_CAN_CALIBRATE(W)
       );
     }
   };
 
-  LOOP_LINEAR_AXES(a) {
+  LOOP_NUM_AXES(a) {
     if (axis_can_calibrate(a) && parser.seen(AXIS_CHAR(a))) {
       planner.synchronize();
-      backlash.set_distance_mm(AxisEnum(a), parser.has_value() ? parser.value_linear_units() : backlash.get_measurement(AxisEnum(a)));
+      backlash.set_distance_mm(AxisEnum(a), parser.has_value() ? parser.value_axis_units(AxisEnum(a)) : backlash.get_measurement(AxisEnum(a)));
       noArgs = false;
     }
   }
@@ -88,7 +91,7 @@ void GcodeSuite::M425() {
     SERIAL_ECHOLNPGM("active:");
     SERIAL_ECHOLNPGM("  Correction Amount/Fade-out:     F", backlash.get_correction(), " (F1.0 = full, F0.0 = none)");
     SERIAL_ECHOPGM("  Backlash Distance (mm):        ");
-    LOOP_LINEAR_AXES(a) if (axis_can_calibrate(a)) {
+    LOOP_NUM_AXES(a) if (axis_can_calibrate(a)) {
       SERIAL_CHAR(' ', AXIS_CHAR(a));
       SERIAL_ECHO(backlash.get_distance_mm(AxisEnum(a)));
       SERIAL_EOL();
@@ -101,7 +104,7 @@ void GcodeSuite::M425() {
     #if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
       SERIAL_ECHOPGM("  Average measured backlash (mm):");
       if (backlash.has_any_measurement()) {
-        LOOP_LINEAR_AXES(a) if (axis_can_calibrate(a) && backlash.has_measurement(AxisEnum(a))) {
+        LOOP_NUM_AXES(a) if (axis_can_calibrate(a) && backlash.has_measurement(AxisEnum(a))) {
           SERIAL_CHAR(' ', AXIS_CHAR(a));
           SERIAL_ECHO(backlash.get_measurement(AxisEnum(a)));
         }
@@ -120,13 +123,16 @@ void GcodeSuite::M425_report(const bool forReplay/*=true*/) {
     #ifdef BACKLASH_SMOOTHING_MM
       , PSTR(" S"), LINEAR_UNIT(backlash.get_smoothing_mm())
     #endif
-    , LIST_N(DOUBLE(LINEAR_AXES),
+    , LIST_N(DOUBLE(NUM_AXES),
         SP_X_STR, LINEAR_UNIT(backlash.get_distance_mm(X_AXIS)),
         SP_Y_STR, LINEAR_UNIT(backlash.get_distance_mm(Y_AXIS)),
         SP_Z_STR, LINEAR_UNIT(backlash.get_distance_mm(Z_AXIS)),
-        SP_I_STR, LINEAR_UNIT(backlash.get_distance_mm(I_AXIS)),
-        SP_J_STR, LINEAR_UNIT(backlash.get_distance_mm(J_AXIS)),
-        SP_K_STR, LINEAR_UNIT(backlash.get_distance_mm(K_AXIS))
+        SP_I_STR, I_AXIS_UNIT(backlash.get_distance_mm(I_AXIS)),
+        SP_J_STR, J_AXIS_UNIT(backlash.get_distance_mm(J_AXIS)),
+        SP_K_STR, K_AXIS_UNIT(backlash.get_distance_mm(K_AXIS)),
+        SP_U_STR, U_AXIS_UNIT(backlash.get_distance_mm(U_AXIS)),
+        SP_V_STR, V_AXIS_UNIT(backlash.get_distance_mm(V_AXIS)),
+        SP_W_STR, W_AXIS_UNIT(backlash.get_distance_mm(W_AXIS))
       )
   );
 }

commit 6b7868d943cd08b83af085ea0d507cc8433799c6
Author: tombrazier <68918209+tombrazier@users.noreply.github.com>
Date:   Tue Mar 1 22:14:52 2022 +0000

    üêõ Fix backlash applied steps when config changes (#23826)
    
    Followup to #23814

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 2d36e0d410..6b1f56fcf6 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -63,7 +63,7 @@ void GcodeSuite::M425() {
   LOOP_LINEAR_AXES(a) {
     if (axis_can_calibrate(a) && parser.seen(AXIS_CHAR(a))) {
       planner.synchronize();
-      backlash.distance_mm[a] = parser.has_value() ? parser.value_linear_units() : backlash.get_measurement(AxisEnum(a));
+      backlash.set_distance_mm(AxisEnum(a), parser.has_value() ? parser.value_linear_units() : backlash.get_measurement(AxisEnum(a)));
       noArgs = false;
     }
   }
@@ -77,25 +77,25 @@ void GcodeSuite::M425() {
   #ifdef BACKLASH_SMOOTHING_MM
     if (parser.seen('S')) {
       planner.synchronize();
-      backlash.smoothing_mm = parser.value_linear_units();
+      backlash.set_smoothing_mm(parser.value_linear_units());
       noArgs = false;
     }
   #endif
 
   if (noArgs) {
     SERIAL_ECHOPGM("Backlash Correction ");
-    if (!backlash.correction) SERIAL_ECHOPGM("in");
+    if (!backlash.get_correction_uint8()) SERIAL_ECHOPGM("in");
     SERIAL_ECHOLNPGM("active:");
     SERIAL_ECHOLNPGM("  Correction Amount/Fade-out:     F", backlash.get_correction(), " (F1.0 = full, F0.0 = none)");
     SERIAL_ECHOPGM("  Backlash Distance (mm):        ");
     LOOP_LINEAR_AXES(a) if (axis_can_calibrate(a)) {
       SERIAL_CHAR(' ', AXIS_CHAR(a));
-      SERIAL_ECHO(backlash.distance_mm[a]);
+      SERIAL_ECHO(backlash.get_distance_mm(AxisEnum(a)));
       SERIAL_EOL();
     }
 
     #ifdef BACKLASH_SMOOTHING_MM
-      SERIAL_ECHOLNPGM("  Smoothing (mm):                 S", backlash.smoothing_mm);
+      SERIAL_ECHOLNPGM("  Smoothing (mm):                 S", backlash.get_smoothing_mm());
     #endif
 
     #if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
@@ -118,15 +118,15 @@ void GcodeSuite::M425_report(const bool forReplay/*=true*/) {
   SERIAL_ECHOLNPGM_P(
     PSTR("  M425 F"), backlash.get_correction()
     #ifdef BACKLASH_SMOOTHING_MM
-      , PSTR(" S"), LINEAR_UNIT(backlash.smoothing_mm)
+      , PSTR(" S"), LINEAR_UNIT(backlash.get_smoothing_mm())
     #endif
     , LIST_N(DOUBLE(LINEAR_AXES),
-        SP_X_STR, LINEAR_UNIT(backlash.distance_mm.x),
-        SP_Y_STR, LINEAR_UNIT(backlash.distance_mm.y),
-        SP_Z_STR, LINEAR_UNIT(backlash.distance_mm.z),
-        SP_I_STR, LINEAR_UNIT(backlash.distance_mm.i),
-        SP_J_STR, LINEAR_UNIT(backlash.distance_mm.j),
-        SP_K_STR, LINEAR_UNIT(backlash.distance_mm.k)
+        SP_X_STR, LINEAR_UNIT(backlash.get_distance_mm(X_AXIS)),
+        SP_Y_STR, LINEAR_UNIT(backlash.get_distance_mm(Y_AXIS)),
+        SP_Z_STR, LINEAR_UNIT(backlash.get_distance_mm(Z_AXIS)),
+        SP_I_STR, LINEAR_UNIT(backlash.get_distance_mm(I_AXIS)),
+        SP_J_STR, LINEAR_UNIT(backlash.get_distance_mm(J_AXIS)),
+        SP_K_STR, LINEAR_UNIT(backlash.get_distance_mm(K_AXIS))
       )
   );
 }

commit 40481947fc1f11a01235c5c55333a4437fc45c5f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jan 14 03:14:13 2022 -0600

    üßë‚Äçüíª Misc. updates for extra axes (#23521)

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 190af0f71b..2d36e0d410 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -55,7 +55,7 @@ void GcodeSuite::M425() {
         case Z_AXIS: return AXIS_CAN_CALIBRATE(Z),
         case I_AXIS: return AXIS_CAN_CALIBRATE(I),
         case J_AXIS: return AXIS_CAN_CALIBRATE(J),
-        case K_AXIS: return AXIS_CAN_CALIBRATE(K),
+        case K_AXIS: return AXIS_CAN_CALIBRATE(K)
       );
     }
   };

commit d7fede3a6324cd6b1ec91a9c8e248fce8f0d7cf2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 27 13:40:01 2021 -0500

    üé® Apply F() to G-code report header

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 1d314a37d3..190af0f71b 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -114,7 +114,7 @@ void GcodeSuite::M425() {
 }
 
 void GcodeSuite::M425_report(const bool forReplay/*=true*/) {
-  report_heading_etc(forReplay, PSTR(STR_BACKLASH_COMPENSATION));
+  report_heading_etc(forReplay, F(STR_BACKLASH_COMPENSATION));
   SERIAL_ECHOLNPGM_P(
     PSTR("  M425 F"), backlash.get_correction()
     #ifdef BACKLASH_SMOOTHING_MM

commit 754b31918a73cb08c322102be5d3926d2ac59c18
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 9 04:57:05 2021 -0500

    üé® Fewer serial macros

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 9f7e00738b..1d314a37d3 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -86,7 +86,7 @@ void GcodeSuite::M425() {
     SERIAL_ECHOPGM("Backlash Correction ");
     if (!backlash.correction) SERIAL_ECHOPGM("in");
     SERIAL_ECHOLNPGM("active:");
-    SERIAL_ECHOLNPAIR("  Correction Amount/Fade-out:     F", backlash.get_correction(), " (F1.0 = full, F0.0 = none)");
+    SERIAL_ECHOLNPGM("  Correction Amount/Fade-out:     F", backlash.get_correction(), " (F1.0 = full, F0.0 = none)");
     SERIAL_ECHOPGM("  Backlash Distance (mm):        ");
     LOOP_LINEAR_AXES(a) if (axis_can_calibrate(a)) {
       SERIAL_CHAR(' ', AXIS_CHAR(a));
@@ -95,7 +95,7 @@ void GcodeSuite::M425() {
     }
 
     #ifdef BACKLASH_SMOOTHING_MM
-      SERIAL_ECHOLNPAIR("  Smoothing (mm):                 S", backlash.smoothing_mm);
+      SERIAL_ECHOLNPGM("  Smoothing (mm):                 S", backlash.smoothing_mm);
     #endif
 
     #if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
@@ -115,7 +115,7 @@ void GcodeSuite::M425() {
 
 void GcodeSuite::M425_report(const bool forReplay/*=true*/) {
   report_heading_etc(forReplay, PSTR(STR_BACKLASH_COMPENSATION));
-  SERIAL_ECHOLNPAIR_P(
+  SERIAL_ECHOLNPGM_P(
     PSTR("  M425 F"), backlash.get_correction()
     #ifdef BACKLASH_SMOOTHING_MM
       , PSTR(" S"), LINEAR_UNIT(backlash.smoothing_mm)

commit 79c72ed821564507b0ef46cbb26f9577585e2ccc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 7 18:06:10 2021 -0500

    üé® Standardize G-code reporting

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index f30de00a0f..9f7e00738b 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -113,4 +113,22 @@ void GcodeSuite::M425() {
   }
 }
 
+void GcodeSuite::M425_report(const bool forReplay/*=true*/) {
+  report_heading_etc(forReplay, PSTR(STR_BACKLASH_COMPENSATION));
+  SERIAL_ECHOLNPAIR_P(
+    PSTR("  M425 F"), backlash.get_correction()
+    #ifdef BACKLASH_SMOOTHING_MM
+      , PSTR(" S"), LINEAR_UNIT(backlash.smoothing_mm)
+    #endif
+    , LIST_N(DOUBLE(LINEAR_AXES),
+        SP_X_STR, LINEAR_UNIT(backlash.distance_mm.x),
+        SP_Y_STR, LINEAR_UNIT(backlash.distance_mm.y),
+        SP_Z_STR, LINEAR_UNIT(backlash.distance_mm.z),
+        SP_I_STR, LINEAR_UNIT(backlash.distance_mm.i),
+        SP_J_STR, LINEAR_UNIT(backlash.distance_mm.j),
+        SP_K_STR, LINEAR_UNIT(backlash.distance_mm.k)
+      )
+  );
+}
+
 #endif // BACKLASH_GCODE

commit 7726af9c5348c1c7d0fd9a56eca87d00cd75fee6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Jun 5 09:18:47 2021 +0200

    üèóÔ∏è Support for up to 6 linear axes (#19112)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 7de33c1f2a..f30de00a0f 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -52,7 +52,10 @@ void GcodeSuite::M425() {
       LINEAR_AXIS_CODE(
         case X_AXIS: return AXIS_CAN_CALIBRATE(X),
         case Y_AXIS: return AXIS_CAN_CALIBRATE(Y),
-        case Z_AXIS: return AXIS_CAN_CALIBRATE(Z)
+        case Z_AXIS: return AXIS_CAN_CALIBRATE(Z),
+        case I_AXIS: return AXIS_CAN_CALIBRATE(I),
+        case J_AXIS: return AXIS_CAN_CALIBRATE(J),
+        case K_AXIS: return AXIS_CAN_CALIBRATE(K),
       );
     }
   };

commit dd4990252e891cdfe56cb7d6e3bbe1e6289be649
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon May 24 16:38:57 2021 -0500

    ‚ôªÔ∏è Refactor Linear / Logical / Distinct Axes (#21953)
    
    * More patches supporting EXTRUDERS 0
    * Extend types in prep for more axes

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 432144f491..7de33c1f2a 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -48,10 +48,12 @@ void GcodeSuite::M425() {
 
   auto axis_can_calibrate = [](const uint8_t a) {
     switch (a) {
-      default:
-      case X_AXIS: return AXIS_CAN_CALIBRATE(X);
-      case Y_AXIS: return AXIS_CAN_CALIBRATE(Y);
-      case Z_AXIS: return AXIS_CAN_CALIBRATE(Z);
+      default: return false;
+      LINEAR_AXIS_CODE(
+        case X_AXIS: return AXIS_CAN_CALIBRATE(X),
+        case Y_AXIS: return AXIS_CAN_CALIBRATE(Y),
+        case Z_AXIS: return AXIS_CAN_CALIBRATE(Z)
+      );
     }
   };
 

commit a6e5492b088add3589aeac168136369f21614e60
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 18 22:51:19 2021 -0500

    ‚ôªÔ∏è Refactor axis counts and loops

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 40441ac08d..432144f491 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -55,8 +55,8 @@ void GcodeSuite::M425() {
     }
   };
 
-  LOOP_XYZ(a) {
-    if (axis_can_calibrate(a) && parser.seen(XYZ_CHAR(a))) {
+  LOOP_LINEAR_AXES(a) {
+    if (axis_can_calibrate(a) && parser.seen(AXIS_CHAR(a))) {
       planner.synchronize();
       backlash.distance_mm[a] = parser.has_value() ? parser.value_linear_units() : backlash.get_measurement(AxisEnum(a));
       noArgs = false;
@@ -83,8 +83,8 @@ void GcodeSuite::M425() {
     SERIAL_ECHOLNPGM("active:");
     SERIAL_ECHOLNPAIR("  Correction Amount/Fade-out:     F", backlash.get_correction(), " (F1.0 = full, F0.0 = none)");
     SERIAL_ECHOPGM("  Backlash Distance (mm):        ");
-    LOOP_XYZ(a) if (axis_can_calibrate(a)) {
-      SERIAL_CHAR(' ', XYZ_CHAR(a));
+    LOOP_LINEAR_AXES(a) if (axis_can_calibrate(a)) {
+      SERIAL_CHAR(' ', AXIS_CHAR(a));
       SERIAL_ECHO(backlash.distance_mm[a]);
       SERIAL_EOL();
     }
@@ -96,8 +96,8 @@ void GcodeSuite::M425() {
     #if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
       SERIAL_ECHOPGM("  Average measured backlash (mm):");
       if (backlash.has_any_measurement()) {
-        LOOP_XYZ(a) if (axis_can_calibrate(a) && backlash.has_measurement(AxisEnum(a))) {
-          SERIAL_CHAR(' ', XYZ_CHAR(a));
+        LOOP_LINEAR_AXES(a) if (axis_can_calibrate(a) && backlash.has_measurement(AxisEnum(a))) {
+          SERIAL_CHAR(' ', AXIS_CHAR(a));
           SERIAL_ECHO(backlash.get_measurement(AxisEnum(a)));
         }
       }

commit 4628f0e237d452a7c6633c3d6127a460b3bb477b
Author: Cole Markham <github@themarkhams.us>
Date:   Sat Sep 19 08:14:34 2020 -0500

    Fix CoreXY compile with backlash cal. (#19422)

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 3e54186a5f..40441ac08d 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -56,7 +56,7 @@ void GcodeSuite::M425() {
   };
 
   LOOP_XYZ(a) {
-    if (AXIS_CAN_CALIBRATE(a) && parser.seen(XYZ_CHAR(a))) {
+    if (axis_can_calibrate(a) && parser.seen(XYZ_CHAR(a))) {
       planner.synchronize();
       backlash.distance_mm[a] = parser.has_value() ? parser.value_linear_units() : backlash.get_measurement(AxisEnum(a));
       noArgs = false;

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index c2a57686cf..3e54186a5f 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit 3a42b6c5c60b98d38f1acd353f5bbae4e15857e5
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Apr 17 10:24:20 2020 -0500

    Patch M425 for CAN_CALIBRATE
    
    Fixes #17430

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 980152a4b1..c2a57686cf 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -46,8 +46,17 @@
 void GcodeSuite::M425() {
   bool noArgs = true;
 
+  auto axis_can_calibrate = [](const uint8_t a) {
+    switch (a) {
+      default:
+      case X_AXIS: return AXIS_CAN_CALIBRATE(X);
+      case Y_AXIS: return AXIS_CAN_CALIBRATE(Y);
+      case Z_AXIS: return AXIS_CAN_CALIBRATE(Z);
+    }
+  };
+
   LOOP_XYZ(a) {
-    if (CAN_CALIBRATE(a) && parser.seen(XYZ_CHAR(a))) {
+    if (AXIS_CAN_CALIBRATE(a) && parser.seen(XYZ_CHAR(a))) {
       planner.synchronize();
       backlash.distance_mm[a] = parser.has_value() ? parser.value_linear_units() : backlash.get_measurement(AxisEnum(a));
       noArgs = false;
@@ -74,7 +83,7 @@ void GcodeSuite::M425() {
     SERIAL_ECHOLNPGM("active:");
     SERIAL_ECHOLNPAIR("  Correction Amount/Fade-out:     F", backlash.get_correction(), " (F1.0 = full, F0.0 = none)");
     SERIAL_ECHOPGM("  Backlash Distance (mm):        ");
-    LOOP_XYZ(a) if (CAN_CALIBRATE(a)) {
+    LOOP_XYZ(a) if (axis_can_calibrate(a)) {
       SERIAL_CHAR(' ', XYZ_CHAR(a));
       SERIAL_ECHO(backlash.distance_mm[a]);
       SERIAL_EOL();
@@ -87,7 +96,7 @@ void GcodeSuite::M425() {
     #if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
       SERIAL_ECHOPGM("  Average measured backlash (mm):");
       if (backlash.has_any_measurement()) {
-        LOOP_XYZ(a) if (CAN_CALIBRATE(a) && backlash.has_measurement(AxisEnum(a))) {
+        LOOP_XYZ(a) if (axis_can_calibrate(a) && backlash.has_measurement(AxisEnum(a))) {
           SERIAL_CHAR(' ', XYZ_CHAR(a));
           SERIAL_ECHO(backlash.get_measurement(AxisEnum(a)));
         }

commit 53fe572bbdfe4d51e420f6d002197cee533e17fd
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 27 22:00:27 2020 -0500

    Limited backlash editing with Core kinematics (#17281)

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 41c80daf7c..980152a4b1 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -47,7 +47,7 @@ void GcodeSuite::M425() {
   bool noArgs = true;
 
   LOOP_XYZ(a) {
-    if (parser.seen(XYZ_CHAR(a))) {
+    if (CAN_CALIBRATE(a) && parser.seen(XYZ_CHAR(a))) {
       planner.synchronize();
       backlash.distance_mm[a] = parser.has_value() ? parser.value_linear_units() : backlash.get_measurement(AxisEnum(a));
       noArgs = false;
@@ -74,7 +74,7 @@ void GcodeSuite::M425() {
     SERIAL_ECHOLNPGM("active:");
     SERIAL_ECHOLNPAIR("  Correction Amount/Fade-out:     F", backlash.get_correction(), " (F1.0 = full, F0.0 = none)");
     SERIAL_ECHOPGM("  Backlash Distance (mm):        ");
-    LOOP_XYZ(a) {
+    LOOP_XYZ(a) if (CAN_CALIBRATE(a)) {
       SERIAL_CHAR(' ', XYZ_CHAR(a));
       SERIAL_ECHO(backlash.distance_mm[a]);
       SERIAL_EOL();
@@ -87,7 +87,7 @@ void GcodeSuite::M425() {
     #if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
       SERIAL_ECHOPGM("  Average measured backlash (mm):");
       if (backlash.has_any_measurement()) {
-        LOOP_XYZ(a) if (backlash.has_measurement(AxisEnum(a))) {
+        LOOP_XYZ(a) if (CAN_CALIBRATE(a) && backlash.has_measurement(AxisEnum(a))) {
           SERIAL_CHAR(' ', XYZ_CHAR(a));
           SERIAL_ECHO(backlash.get_measurement(AxisEnum(a)));
         }

commit c4db8e49a7429a696431c0d3419b545d13eead31
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 1 10:36:15 2020 -0600

    XYZ_CHAR macro

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index a54c7cf746..41c80daf7c 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -47,7 +47,7 @@ void GcodeSuite::M425() {
   bool noArgs = true;
 
   LOOP_XYZ(a) {
-    if (parser.seen(axis_codes[a])) {
+    if (parser.seen(XYZ_CHAR(a))) {
       planner.synchronize();
       backlash.distance_mm[a] = parser.has_value() ? parser.value_linear_units() : backlash.get_measurement(AxisEnum(a));
       noArgs = false;
@@ -75,7 +75,7 @@ void GcodeSuite::M425() {
     SERIAL_ECHOLNPAIR("  Correction Amount/Fade-out:     F", backlash.get_correction(), " (F1.0 = full, F0.0 = none)");
     SERIAL_ECHOPGM("  Backlash Distance (mm):        ");
     LOOP_XYZ(a) {
-      SERIAL_CHAR(' ', axis_codes[a]);
+      SERIAL_CHAR(' ', XYZ_CHAR(a));
       SERIAL_ECHO(backlash.distance_mm[a]);
       SERIAL_EOL();
     }
@@ -88,7 +88,7 @@ void GcodeSuite::M425() {
       SERIAL_ECHOPGM("  Average measured backlash (mm):");
       if (backlash.has_any_measurement()) {
         LOOP_XYZ(a) if (backlash.has_measurement(AxisEnum(a))) {
-          SERIAL_CHAR(' ', axis_codes[a]);
+          SERIAL_CHAR(' ', XYZ_CHAR(a));
           SERIAL_ECHO(backlash.get_measurement(AxisEnum(a)));
         }
       }

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index a83ccd65c1..a54c7cf746 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit 95046c90478c14d2c43bd41d30c4170dcbcdf53a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Jan 8 18:31:57 2020 -0600

    Extend SERIAL_CHAR to take multiple arguments

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index a15287a5e6..a83ccd65c1 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -75,8 +75,7 @@ void GcodeSuite::M425() {
     SERIAL_ECHOLNPAIR("  Correction Amount/Fade-out:     F", backlash.get_correction(), " (F1.0 = full, F0.0 = none)");
     SERIAL_ECHOPGM("  Backlash Distance (mm):        ");
     LOOP_XYZ(a) {
-      SERIAL_CHAR(' ');
-      SERIAL_CHAR(axis_codes[a]);
+      SERIAL_CHAR(' ', axis_codes[a]);
       SERIAL_ECHO(backlash.distance_mm[a]);
       SERIAL_EOL();
     }
@@ -89,8 +88,7 @@ void GcodeSuite::M425() {
       SERIAL_ECHOPGM("  Average measured backlash (mm):");
       if (backlash.has_any_measurement()) {
         LOOP_XYZ(a) if (backlash.has_measurement(AxisEnum(a))) {
-          SERIAL_CHAR(' ');
-          SERIAL_CHAR(axis_codes[a]);
+          SERIAL_CHAR(' ', axis_codes[a]);
           SERIAL_ECHO(backlash.get_measurement(AxisEnum(a)));
         }
       }

commit 465c6d92307ec613d0b2a7355ce67a60ba23fc0c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 14 03:05:10 2019 -0500

    Simpler Allen Key config. Fixes, cleanups from refactor (#15256)

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index a9191d8217..a15287a5e6 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -46,10 +46,10 @@
 void GcodeSuite::M425() {
   bool noArgs = true;
 
-  LOOP_XYZ(i) {
-    if (parser.seen(axis_codes[i])) {
+  LOOP_XYZ(a) {
+    if (parser.seen(axis_codes[a])) {
       planner.synchronize();
-      backlash.distance_mm[i] = parser.has_value() ? parser.value_linear_units() : backlash.get_measurement(i);
+      backlash.distance_mm[a] = parser.has_value() ? parser.value_linear_units() : backlash.get_measurement(AxisEnum(a));
       noArgs = false;
     }
   }
@@ -88,10 +88,10 @@ void GcodeSuite::M425() {
     #if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
       SERIAL_ECHOPGM("  Average measured backlash (mm):");
       if (backlash.has_any_measurement()) {
-        LOOP_XYZ(a) if (backlash.has_measurement(a)) {
+        LOOP_XYZ(a) if (backlash.has_measurement(AxisEnum(a))) {
           SERIAL_CHAR(' ');
           SERIAL_CHAR(axis_codes[a]);
-          SERIAL_ECHO(backlash.get_measurement(a));
+          SERIAL_ECHO(backlash.get_measurement(AxisEnum(a)));
         }
       }
       else

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 74b38f56cc..a9191d8217 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit 15357af67ceb74b14606eba9fbb75d20914f8909
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Fri May 3 22:53:15 2019 -0600

    Backlash cleanup (#13659)
    
    ‚Ä¶And save backlash, fil. sensor, ExtUI userdata to EEPROM.

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index e51c9301cf..74b38f56cc 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -24,20 +24,9 @@
 
 #if ENABLED(BACKLASH_GCODE)
 
+#include "../../feature/backlash.h"
 #include "../../module/planner.h"
 
-float   backlash_distance_mm[XYZ] = BACKLASH_DISTANCE_MM;
-uint8_t backlash_correction = BACKLASH_CORRECTION * all_on;
-
-#ifdef BACKLASH_SMOOTHING_MM
-  float backlash_smoothing_mm = BACKLASH_SMOOTHING_MM;
-#endif
-
-#if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
-  float backlash_measured_mm[XYZ] = { 0 };
-  uint8_t backlash_measured_num[XYZ] = { 0 };
-#endif
-
 #include "../gcode.h"
 
 /**
@@ -60,59 +49,52 @@ void GcodeSuite::M425() {
   LOOP_XYZ(i) {
     if (parser.seen(axis_codes[i])) {
       planner.synchronize();
-      const float measured_backlash = (
-        #if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
-          backlash_measured_num[i] > 0 ? backlash_measured_mm[i] / backlash_measured_num[i] : 0
-        #else
-          0
-        #endif
-      );
-      backlash_distance_mm[i] = parser.has_value() ? parser.value_linear_units() : measured_backlash;
+      backlash.distance_mm[i] = parser.has_value() ? parser.value_linear_units() : backlash.get_measurement(i);
       noArgs = false;
     }
   }
 
   if (parser.seen('F')) {
     planner.synchronize();
-    backlash_correction = MAX(0, MIN(1.0, parser.value_float())) * all_on;
+    backlash.set_correction(parser.value_float());
     noArgs = false;
   }
 
   #ifdef BACKLASH_SMOOTHING_MM
     if (parser.seen('S')) {
       planner.synchronize();
-      backlash_smoothing_mm = parser.value_linear_units();
+      backlash.smoothing_mm = parser.value_linear_units();
       noArgs = false;
     }
   #endif
 
   if (noArgs) {
-    SERIAL_ECHOPGM("Backlash correction is ");
-    if (!backlash_correction) SERIAL_ECHOPGM("in");
+    SERIAL_ECHOPGM("Backlash Correction ");
+    if (!backlash.correction) SERIAL_ECHOPGM("in");
     SERIAL_ECHOLNPGM("active:");
-    SERIAL_ECHOLNPAIR("  Correction Amount/Fade-out:     F", float(ui8_to_percent(backlash_correction)) / 100, "     (F1.0 = full, F0.0 = none)");
+    SERIAL_ECHOLNPAIR("  Correction Amount/Fade-out:     F", backlash.get_correction(), " (F1.0 = full, F0.0 = none)");
     SERIAL_ECHOPGM("  Backlash Distance (mm):        ");
     LOOP_XYZ(a) {
       SERIAL_CHAR(' ');
       SERIAL_CHAR(axis_codes[a]);
-      SERIAL_ECHO(backlash_distance_mm[a]);
+      SERIAL_ECHO(backlash.distance_mm[a]);
       SERIAL_EOL();
     }
 
     #ifdef BACKLASH_SMOOTHING_MM
-      SERIAL_ECHOLNPAIR("  Smoothing (mm):                 S", backlash_smoothing_mm);
+      SERIAL_ECHOLNPAIR("  Smoothing (mm):                 S", backlash.smoothing_mm);
     #endif
 
     #if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
       SERIAL_ECHOPGM("  Average measured backlash (mm):");
-      LOOP_XYZ(a) {
-        if (backlash_measured_num[a] > 0) {
+      if (backlash.has_any_measurement()) {
+        LOOP_XYZ(a) if (backlash.has_measurement(a)) {
           SERIAL_CHAR(' ');
           SERIAL_CHAR(axis_codes[a]);
-          SERIAL_ECHO(backlash_measured_mm[a] / backlash_measured_num[a]);
+          SERIAL_ECHO(backlash.get_measurement(a));
         }
       }
-      if (!backlash_measured_num[X_AXIS] && !backlash_measured_num[Y_AXIS] && !backlash_measured_num[Z_AXIS])
+      else
         SERIAL_ECHOPGM(" (Not yet measured)");
       SERIAL_EOL();
     #endif

commit 5679fae11efbc7e8b9de2f0e68dc9a879757ff88
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Fri Mar 29 13:07:43 2019 -0600

    UltraLCD enhancements (lower fan resolution, backlash menu) (#13519)

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index 2b82bb8842..e51c9301cf 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -26,8 +26,8 @@
 
 #include "../../module/planner.h"
 
-float backlash_distance_mm[XYZ] = BACKLASH_DISTANCE_MM,
-      backlash_correction = BACKLASH_CORRECTION;
+float   backlash_distance_mm[XYZ] = BACKLASH_DISTANCE_MM;
+uint8_t backlash_correction = BACKLASH_CORRECTION * all_on;
 
 #ifdef BACKLASH_SMOOTHING_MM
   float backlash_smoothing_mm = BACKLASH_SMOOTHING_MM;
@@ -74,7 +74,7 @@ void GcodeSuite::M425() {
 
   if (parser.seen('F')) {
     planner.synchronize();
-    backlash_correction = MAX(0, MIN(1.0, parser.value_linear_units()));
+    backlash_correction = MAX(0, MIN(1.0, parser.value_float())) * all_on;
     noArgs = false;
   }
 
@@ -90,8 +90,7 @@ void GcodeSuite::M425() {
     SERIAL_ECHOPGM("Backlash correction is ");
     if (!backlash_correction) SERIAL_ECHOPGM("in");
     SERIAL_ECHOLNPGM("active:");
-    SERIAL_ECHOPAIR("  Correction Amount/Fade-out:     F", backlash_correction);
-    SERIAL_ECHOLNPGM("     (F1.0 = full, F0.0 = none)");
+    SERIAL_ECHOLNPAIR("  Correction Amount/Fade-out:     F", float(ui8_to_percent(backlash_correction)) / 100, "     (F1.0 = full, F0.0 = none)");
     SERIAL_ECHOPGM("  Backlash Distance (mm):        ");
     LOOP_XYZ(a) {
       SERIAL_CHAR(' ');

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index f4a9a9a31a..2b82bb8842 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm

commit 97da6c1da53817c8dc590308ca34d1a3de6981b2
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jan 28 20:35:54 2019 -0600

    Use MIN/MAX for min/max

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
index c8a32cc228..f4a9a9a31a 100644
--- a/Marlin/src/gcode/calibrate/M425.cpp
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -74,7 +74,7 @@ void GcodeSuite::M425() {
 
   if (parser.seen('F')) {
     planner.synchronize();
-    backlash_correction = max(0, min(1.0, parser.value_linear_units()));
+    backlash_correction = MAX(0, MIN(1.0, parser.value_linear_units()));
     noArgs = false;
   }
 

commit b22716e938397d8beb64f5855b64f6fdb375b5d2
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Sat Dec 8 13:36:46 2018 -0700

    M425 Backlash Correction (#11061)

diff --git a/Marlin/src/gcode/calibrate/M425.cpp b/Marlin/src/gcode/calibrate/M425.cpp
new file mode 100644
index 0000000000..c8a32cc228
--- /dev/null
+++ b/Marlin/src/gcode/calibrate/M425.cpp
@@ -0,0 +1,123 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../inc/MarlinConfig.h"
+
+#if ENABLED(BACKLASH_GCODE)
+
+#include "../../module/planner.h"
+
+float backlash_distance_mm[XYZ] = BACKLASH_DISTANCE_MM,
+      backlash_correction = BACKLASH_CORRECTION;
+
+#ifdef BACKLASH_SMOOTHING_MM
+  float backlash_smoothing_mm = BACKLASH_SMOOTHING_MM;
+#endif
+
+#if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
+  float backlash_measured_mm[XYZ] = { 0 };
+  uint8_t backlash_measured_num[XYZ] = { 0 };
+#endif
+
+#include "../gcode.h"
+
+/**
+ * M425: Enable and tune backlash correction.
+ *
+ *   F<fraction>     Enable/disable/fade-out backlash correction (0.0 to 1.0)
+ *   S<smoothing_mm> Distance over which backlash correction is spread
+ *   X<distance_mm>  Set the backlash distance on X (0 to disable)
+ *   Y<distance_mm>                        ... on Y
+ *   Z<distance_mm>                        ... on Z
+ *   X               If a backlash measurement was done on X, copy that value
+ *   Y                                              ... on Y
+ *   Z                                              ... on Z
+ *
+ * Type M425 without any arguments to show active values.
+ */
+void GcodeSuite::M425() {
+  bool noArgs = true;
+
+  LOOP_XYZ(i) {
+    if (parser.seen(axis_codes[i])) {
+      planner.synchronize();
+      const float measured_backlash = (
+        #if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
+          backlash_measured_num[i] > 0 ? backlash_measured_mm[i] / backlash_measured_num[i] : 0
+        #else
+          0
+        #endif
+      );
+      backlash_distance_mm[i] = parser.has_value() ? parser.value_linear_units() : measured_backlash;
+      noArgs = false;
+    }
+  }
+
+  if (parser.seen('F')) {
+    planner.synchronize();
+    backlash_correction = max(0, min(1.0, parser.value_linear_units()));
+    noArgs = false;
+  }
+
+  #ifdef BACKLASH_SMOOTHING_MM
+    if (parser.seen('S')) {
+      planner.synchronize();
+      backlash_smoothing_mm = parser.value_linear_units();
+      noArgs = false;
+    }
+  #endif
+
+  if (noArgs) {
+    SERIAL_ECHOPGM("Backlash correction is ");
+    if (!backlash_correction) SERIAL_ECHOPGM("in");
+    SERIAL_ECHOLNPGM("active:");
+    SERIAL_ECHOPAIR("  Correction Amount/Fade-out:     F", backlash_correction);
+    SERIAL_ECHOLNPGM("     (F1.0 = full, F0.0 = none)");
+    SERIAL_ECHOPGM("  Backlash Distance (mm):        ");
+    LOOP_XYZ(a) {
+      SERIAL_CHAR(' ');
+      SERIAL_CHAR(axis_codes[a]);
+      SERIAL_ECHO(backlash_distance_mm[a]);
+      SERIAL_EOL();
+    }
+
+    #ifdef BACKLASH_SMOOTHING_MM
+      SERIAL_ECHOLNPAIR("  Smoothing (mm):                 S", backlash_smoothing_mm);
+    #endif
+
+    #if ENABLED(MEASURE_BACKLASH_WHEN_PROBING)
+      SERIAL_ECHOPGM("  Average measured backlash (mm):");
+      LOOP_XYZ(a) {
+        if (backlash_measured_num[a] > 0) {
+          SERIAL_CHAR(' ');
+          SERIAL_CHAR(axis_codes[a]);
+          SERIAL_ECHO(backlash_measured_mm[a] / backlash_measured_num[a]);
+        }
+      }
+      if (!backlash_measured_num[X_AXIS] && !backlash_measured_num[Y_AXIS] && !backlash_measured_num[Z_AXIS])
+        SERIAL_ECHOPGM(" (Not yet measured)");
+      SERIAL_EOL();
+    #endif
+  }
+}
+
+#endif // BACKLASH_GCODE
