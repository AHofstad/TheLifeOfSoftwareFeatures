commit ee99eed3bf9f5d811b596058932b88d8ed5298a1
Author: Mihai <299015+mh-dm@users.noreply.github.com>
Date:   Mon Jul 15 21:57:25 2024 +0300

    üö∏ Improved menu responsiveness with MarlinUI + U8Glib. (#26555)
    
    Co-authored-by: Jason Smith <jason.inet@gmail.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 6dc5a41fdd..eb4ce135db 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -1088,7 +1088,7 @@ void MarlinUI::draw_status_screen() {
       lcd_moveto(0, row);
       lcd.write(sel ? LCD_STR_ARROW_RIGHT[0] : ' ');
       uint8_t n = LCD_WIDTH - 2;
-      n -= lcd_put_u8str_max(ui.scrolled_filename(theCard, n, row, sel), n);
+      n -= lcd_put_u8str_max(ui.scrolled_filename(theCard, n, sel), n);
       for (; n; --n) lcd.write(' ');
       lcd.write(isDir ? LCD_STR_FOLDER[0] : ' ');
       lcd.print_line();

commit 1f9fc665ec21f95666801aa4fccc4f4f71932018
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jun 26 18:27:05 2024 -0500

    üö∏ MarlinUI:: clear_for_drawing

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index b29653f7b0..6dc5a41fdd 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -376,6 +376,8 @@ void MarlinUI::clear_lcd() {
   lcd.clear_buffer();
 }
 
+void MarlinUI::clear_for_drawing() { clear_lcd(); }
+
 #if HAS_LCD_CONTRAST
   void MarlinUI::_set_contrast() { lcd.setContrast(contrast); }
 #endif

commit 014278383645bdfe50313ffd15a2287f377ac8f0
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Sun Nov 19 23:24:32 2023 -0800

    üö∏ Fix more MarlinUI title centering (#26440)
    
    Followup to #26339

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 4a6a6eec47..b29653f7b0 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -983,7 +983,7 @@ void MarlinUI::draw_status_screen() {
     int8_t llen = ftpl ? expand_u8str(estr, ftpl, itemIndex, itemStringC, itemStringF, n - vlen) : 0;
 
     bool mv_colon = false;
-    if (vlen) {
+    if (vlen && !center) {
       // Move the leading colon from the value to the label below
       mv_colon = (*vstr == ':');
       // Shorter value, wider label

commit 2a88e7600298fef27e8cbbe01b708959515677fb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 25 19:41:32 2023 -0500

    üßë‚Äçüíª Misc. LCD / string updates

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index a4d358c063..4a6a6eec47 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -1064,9 +1064,9 @@ void MarlinUI::draw_status_screen() {
   }
 
   // The Select Screen presents a prompt and two "buttons"
-  void MenuItem_confirm::draw_select_screen(FSTR_P const yes, FSTR_P const no, const bool yesno, FSTR_P const pref, const char * const string, FSTR_P const suff) {
+  void MenuItem_confirm::draw_select_screen(FSTR_P const yes, FSTR_P const no, const bool yesno, FSTR_P const fpre, const char * const string, FSTR_P const fsuf) {
     if (!PanelDetected) return;
-    ui.draw_select_screen_prompt(pref, string, suff);
+    ui.draw_select_screen_prompt(fpre, string, fsuf);
     lcd.write(COLOR_EDIT);
     if (no) {
       lcd_moveto(0, MIDDLE_Y);

commit 797ea5efa741ef96827870bb44b48fac7a41f1a0
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Sun Oct 22 13:15:38 2023 -0700

    üö∏ Fix MarlinUI expanded label alignment (#26339)
    
    Co-authored-by: ellensp <530024+ellensp@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 419088c4c7..a4d358c063 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -975,23 +975,36 @@ void MarlinUI::draw_status_screen() {
 
     uint8_t n = LCD_WIDTH;
     const bool center = bool(style & SS_CENTER), full = bool(style & SS_FULL);
-    const int8_t plen = ftpl ? utf8_strlen(ftpl) : 0,
-                 vlen = vstr ? utf8_strlen(vstr) : 0;
-    int8_t pad = (center || full) ? n - plen - vlen : 0;
+
+    // Value length, if any
+    int8_t vlen = vstr ? utf8_strlen(vstr) : 0;
+
+    char estr[utf8_strlen(ftpl) + 3] = "\0";
+    int8_t llen = ftpl ? expand_u8str(estr, ftpl, itemIndex, itemStringC, itemStringF, n - vlen) : 0;
+
+    bool mv_colon = false;
+    if (vlen) {
+      // Move the leading colon from the value to the label below
+      mv_colon = (*vstr == ':');
+      // Shorter value, wider label
+      if (mv_colon) { vstr++; vlen--; llen++; }
+      // Remove leading spaces from the value and shorten
+      while (*vstr == ' ') { vstr++; vlen--; }
+    }
+
+    int8_t pad = (center || full) ? n - llen - vlen : 0;
 
     // SS_CENTER: Pad with half of the unused space first
     if (center) for (int8_t lpad = pad / 2; lpad > 0; --lpad) { lcd.write(' '); n--; }
 
     // Draw as much of the label as fits
-    if (plen) n -= lcd_put_u8str(ftpl, itemIndex, itemStringC, itemStringF, n - vlen);
+    if (llen) n -= lcd_put_u8str_max(estr, n - vlen);
 
     if (vlen && n > 0) {
       // SS_FULL: Pad with enough space to justify the value
       if (full && !center) {
         // Move the leading colon from the value to the label
-        if (*vstr == ':') { lcd.write(':'); vstr++; n--; }
-        // Move spaces to the padding
-        while (*vstr == ' ') { vstr++; pad++; }
+        if (mv_colon) { lcd.write(':'); n--; }
         // Pad in-between
         for (; pad > 0; --pad) { lcd.write(' '); n--; }
       }

commit 156e7c1c5453e9b9fcd103fb1874eb5803ebea54
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Mon Oct 23 08:25:28 2023 +1300

    üêõ Fix TFT compile, K8400 pins (#26359)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 1c6e49644b..419088c4c7 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -975,7 +975,7 @@ void MarlinUI::draw_status_screen() {
 
     uint8_t n = LCD_WIDTH;
     const bool center = bool(style & SS_CENTER), full = bool(style & SS_FULL);
-    const int8_t plen = fstr ? utf8_strlen(fstr) : 0,
+    const int8_t plen = ftpl ? utf8_strlen(ftpl) : 0,
                  vlen = vstr ? utf8_strlen(vstr) : 0;
     int8_t pad = (center || full) ? n - plen - vlen : 0;
 
@@ -983,7 +983,7 @@ void MarlinUI::draw_status_screen() {
     if (center) for (int8_t lpad = pad / 2; lpad > 0; --lpad) { lcd.write(' '); n--; }
 
     // Draw as much of the label as fits
-    if (plen) n -= lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, n - vlen);
+    if (plen) n -= lcd_put_u8str(ftpl, itemIndex, itemStringC, itemStringF, n - vlen);
 
     if (vlen && n > 0) {
       // SS_FULL: Pad with enough space to justify the value

commit b0ece8f8df130709f97da6c1474cd20cbd9119ed
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 20 17:21:30 2023 -0500

    üßë‚Äçüíª MarlinUI menu tweaks
    
    Changes in prep for #26339

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 2d621d74cf..1c6e49644b 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -969,7 +969,7 @@ void MarlinUI::draw_status_screen() {
   #endif
 
   // Draw a static item with no left-right margin required. Centered by default.
-  void MenuItem_static::draw(const uint8_t row, FSTR_P const fstr, const uint8_t style/*=SS_DEFAULT*/, const char *vstr/*=nullptr*/) {
+  void MenuItem_static::draw(const uint8_t row, FSTR_P const ftpl, const uint8_t style/*=SS_DEFAULT*/, const char *vstr/*=nullptr*/) {
     if (!PanelDetected) return;
     lcd_moveto(0, row);
 
@@ -1004,25 +1004,25 @@ void MarlinUI::draw_status_screen() {
   }
 
   // Draw a generic menu item with pre_char (if selected) and post_char
-  void MenuItemBase::_draw(const bool sel, const uint8_t row, FSTR_P const fstr, const char pre_char, const char post_char) {
+  void MenuItemBase::_draw(const bool sel, const uint8_t row, FSTR_P const ftpl, const char pre_char, const char post_char) {
     if (!PanelDetected) return;
     lcd_moveto(0, row);
     lcd.write(sel ? pre_char : ' ');
     uint8_t n = LCD_WIDTH - 2;
-    n -= lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, n);
+    n -= lcd_put_u8str(ftpl, itemIndex, itemStringC, itemStringF, n);
     for (; n; --n) lcd.write(' ');
     lcd.write(post_char);
     lcd.print_line();
   }
 
   // Draw a menu item with a (potentially) editable value
-  void MenuEditItemBase::draw(const bool sel, const uint8_t row, FSTR_P const fstr, const char * const inStr, const bool pgm) {
+  void MenuEditItemBase::draw(const bool sel, const uint8_t row, FSTR_P const ftpl, const char * const inStr, const bool pgm) {
     if (!PanelDetected) return;
     const uint8_t vlen = inStr ? (pgm ? utf8_strlen_P(inStr) : utf8_strlen(inStr)) : 0;
     lcd_moveto(0, row);
     lcd.write(sel ? LCD_STR_ARROW_RIGHT[0] : ' ');
     uint8_t n = LCD_WIDTH - 2 - vlen;
-    n -= lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, n);
+    n -= lcd_put_u8str(ftpl, itemIndex, itemStringC, itemStringF, n);
     if (vlen) {
       lcd.write(':');
       for (; n; --n) lcd.write(' ');

commit 20fec98f70208546b90ccc0b8f6766de6f2f8230
Author: lukasradek <lukasradek@users.noreply.github.com>
Date:   Thu Aug 24 19:41:30 2023 +0200

    üßë‚Äçüíª Adjust LCD string draw (#26154)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 4cec4dfa43..2d621d74cf 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -983,11 +983,7 @@ void MarlinUI::draw_status_screen() {
     if (center) for (int8_t lpad = pad / 2; lpad > 0; --lpad) { lcd.write(' '); n--; }
 
     // Draw as much of the label as fits
-    if (plen) {
-      const int8_t expl = n;
-      n = lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, n);
-      pad -= (expl - n - plen); // Reduce the padding
-    }
+    if (plen) n -= lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, n - vlen);
 
     if (vlen && n > 0) {
       // SS_FULL: Pad with enough space to justify the value
@@ -1012,7 +1008,8 @@ void MarlinUI::draw_status_screen() {
     if (!PanelDetected) return;
     lcd_moveto(0, row);
     lcd.write(sel ? pre_char : ' ');
-    uint8_t n = lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, LCD_WIDTH - 2);
+    uint8_t n = LCD_WIDTH - 2;
+    n -= lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, n);
     for (; n; --n) lcd.write(' ');
     lcd.write(post_char);
     lcd.print_line();
@@ -1024,7 +1021,8 @@ void MarlinUI::draw_status_screen() {
     const uint8_t vlen = inStr ? (pgm ? utf8_strlen_P(inStr) : utf8_strlen(inStr)) : 0;
     lcd_moveto(0, row);
     lcd.write(sel ? LCD_STR_ARROW_RIGHT[0] : ' ');
-    uint8_t n = lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, LCD_WIDTH - 2 - vlen);
+    uint8_t n = LCD_WIDTH - 2 - vlen;
+    n -= lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, n);
     if (vlen) {
       lcd.write(':');
       for (; n; --n) lcd.write(' ');
@@ -1074,8 +1072,8 @@ void MarlinUI::draw_status_screen() {
       if (!PanelDetected) return;
       lcd_moveto(0, row);
       lcd.write(sel ? LCD_STR_ARROW_RIGHT[0] : ' ');
-      constexpr uint8_t maxlen = LCD_WIDTH - 2;
-      uint8_t n = maxlen - lcd_put_u8str_max(ui.scrolled_filename(theCard, maxlen, row, sel), maxlen);
+      uint8_t n = LCD_WIDTH - 2;
+      n -= lcd_put_u8str_max(ui.scrolled_filename(theCard, n, row, sel), n);
       for (; n; --n) lcd.write(' ');
       lcd.write(isDir ? LCD_STR_FOLDER[0] : ' ');
       lcd.print_line();

commit a0e3dea8b879aba8e0d2d7e4dc6a6447b3fe76ad
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jul 20 20:25:39 2023 -0500

    üö∏ ColorUI Touch Calibrate in CW order

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 02e5f05d92..4cec4dfa43 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -596,8 +596,8 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 
 #endif // HAS_CUTTER
 
-
 #if HAS_PRINT_PROGRESS   // UNTESTED!!!
+
   #define TPOFFSET (LCD_WIDTH - 1)
   static uint8_t timepos = TPOFFSET - 6;
 
@@ -648,6 +648,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
       }
     }
   #endif
+
 #endif // HAS_PRINT_PROGRESS
 
 #if ENABLED(LCD_PROGRESS_BAR)

commit 574dd34c49fde76e1e736b8a7e1ea579d724ff22
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jun 27 13:19:36 2023 -0500

    ‚ôªÔ∏è String helper class (#24390)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index ee7154ae41..02e5f05d92 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -419,7 +419,7 @@ void MarlinUI::draw_kill_screen() {
   if (!PanelDetected) return;
   lcd.clear_buffer();
   lcd_moveto(0, 3); lcd.write(COLOR_ERROR);
-  lcd_moveto((LCD_WIDTH - utf8_strlen(status_message)) / 2 + 1, 3);
+  lcd_moveto((LCD_WIDTH - status_message.glyphs()) / 2 + 1, 3);
   lcd_put_u8str(status_message);
   center_text(GET_TEXT_F(MSG_HALTED), 5);
   center_text(GET_TEXT_F(MSG_PLEASE_RESET), 6);
@@ -692,7 +692,7 @@ void MarlinUI::draw_status_message(const bool blink) {
   #endif // FILAMENT_LCD_DISPLAY && HAS_MEDIA
 
   // Get the UTF8 character count of the string
-  uint8_t slen = utf8_strlen(status_message);
+  uint8_t slen = status_message.glyphs();
 
   #if ENABLED(STATUS_MESSAGE_SCROLLING)
 

commit 4b8e4ef38e1f395d394314f54bacff8def9527c8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jun 5 23:49:09 2023 -0500

    ‚ö°Ô∏è Mixer label in PROGMEM

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index dfb685f096..ee7154ae41 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -866,23 +866,23 @@ void MarlinUI::draw_status_screen() {
   //
 
   #if HOTENDS <= 1 || (HOTENDS <= 2 && !HAS_HEATED_BED)
-    #if DUAL_MIXING_EXTRUDER
+    #if HAS_DUAL_MIXING
       lcd_moveto(0, 4);
       // Two-component mix / gradient instead of XY
-      char mixer_messages[12];
-      const char *mix_label;
+      char mixer_messages[15];
+      PGM_P mix_label;
       #if ENABLED(GRADIENT_MIX)
         if (mixer.gradient.enabled) {
           mixer.update_mix_from_gradient();
-          mix_label = "Gr";
+          mix_label = PSTR("Gr");
         }
         else
       #endif
         {
           mixer.update_mix_from_vtool();
-          mix_label = "Mx";
+          mix_label = PSTR("Mx");
         }
-      sprintf_P(mixer_messages, PSTR("%s %d;%d%% "), mix_label, int(mixer.mix[0]), int(mixer.mix[1]));
+      sprintf_P(mixer_messages, PSTR(S_FMT " %d;%d%% "), mix_label, int(mixer.mix[0]), int(mixer.mix[1]));
       lcd_put_u8str(mixer_messages);
     #endif
   #endif

commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    üßë‚Äçüíª Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index f7e9ff3e45..dfb685f096 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -52,12 +52,12 @@
 #include "../../module/planner.h"
 #include "../../module/motion.h"
 
-#if DISABLED(LCD_PROGRESS_BAR) && BOTH(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
+#if DISABLED(LCD_PROGRESS_BAR) && ALL(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
   #include "../../feature/filwidth.h"
   #include "../../gcode/parser.h"
 #endif
 
-#if EITHER(HAS_COOLER, LASER_COOLANT_FLOW_METER)
+#if ANY(HAS_COOLER, LASER_COOLANT_FLOW_METER)
   #include "../../feature/cooler.h"
 #endif
 
@@ -141,7 +141,7 @@ static uint8_t PanelDetected = 0;
 #if ANY(__AVR__, TARGET_LPC1768, __STM32F1__, ARDUINO_ARCH_SAM, __SAMD51__, __MK20DX256__, __MK64FX512__)
   #define SPI_SEND_ONE(V) SPI.transfer(V);
   #define SPI_SEND_TWO(V) SPI.transfer16(V);
-#elif EITHER(STM32F4xx, STM32F1xx)
+#elif ANY(STM32F4xx, STM32F1xx)
   #define SPI_SEND_ONE(V) SPI.transfer(V, SPI_CONTINUE);
   #define SPI_SEND_TWO(V) SPI.transfer16(V, SPI_CONTINUE);
 #elif defined(ARDUINO_ARCH_ESP32)
@@ -151,7 +151,7 @@ static uint8_t PanelDetected = 0;
 
 #if ANY(__AVR__, ARDUINO_ARCH_SAM, __SAMD51__, __MK20DX256__, __MK64FX512__)
   #define SPI_SEND_SOME(V,L,Z)  SPI.transfer(&V[Z], L);
-#elif EITHER(STM32F4xx, STM32F1xx)
+#elif ANY(STM32F4xx, STM32F1xx)
   #define SPI_SEND_SOME(V,L,Z)  SPI.transfer(&V[Z], L, SPI_CONTINUE);
 #elif ANY(TARGET_LPC1768, __STM32F1__, ARDUINO_ARCH_ESP32)
   #define SPI_SEND_SOME(V,L,Z)  do{ for (uint16_t i = 0; i < L; i++) SPI_SEND_ONE(V[(Z)+i]); }while(0)
@@ -290,7 +290,7 @@ uint8_t MarlinUI::read_slow_buttons() {
       Wire.requestFrom((uint8_t)LCD_I2C_ADDRESS, 2, 0, 0, 1);
     #elif defined(STM32F1)
       Wire.requestFrom((uint8_t)LCD_I2C_ADDRESS, (uint8_t)2);
-    #elif EITHER(STM32F4xx, TARGET_LPC1768)
+    #elif ANY(STM32F4xx, TARGET_LPC1768)
       Wire.requestFrom(LCD_I2C_ADDRESS, 2);
     #endif
     encoderDiff += Wire.read();
@@ -672,7 +672,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 void MarlinUI::draw_status_message(const bool blink) {
   if (!PanelDetected) return;
   lcd_moveto(0, 3);
-  #if BOTH(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
+  #if ALL(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
 
     // Alternate Status message and Filament display
     if (ELAPSED(millis(), next_filament_display)) {

commit 1f9bfc5c7491d802d242623f8253b1f52c0917a3
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Wed May 10 06:59:25 2023 +1200

    üö∏ Optional X-Axis (#25418)
    
    Co-authored-by: alextrical <35117191+alextrical@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 6090b13732..f7e9ff3e45 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -820,11 +820,17 @@ void MarlinUI::draw_status_screen() {
   // Line 1 - XYZ coordinates
   //
 
-  lcd_moveto(0, 0);
-  const xyz_pos_t lpos = current_position.asLogical();
-  _draw_axis_value(X_AXIS, ftostr4sign(lpos.x), blink); lcd.write(' ');
-  _draw_axis_value(Y_AXIS, ftostr4sign(lpos.y), blink); lcd.write(' ');
-  _draw_axis_value(Z_AXIS, ftostr52sp(lpos.z), blink);
+  #if NUM_AXES
+    lcd_moveto(0, 0);
+    const xyz_pos_t lpos = current_position.asLogical();
+    _draw_axis_value(X_AXIS, ftostr4sign(lpos.x), blink);
+    #if HAS_Y_AXIS
+      lcd.write(' '); _draw_axis_value(Y_AXIS, ftostr4sign(lpos.y), blink);
+    #endif
+    #if HAS_Z_AXIS
+      lcd.write(' '); _draw_axis_value(Z_AXIS, ftostr52sp(lpos.z), blink);
+    #endif
+  #endif
 
   #if HAS_LEVELING && !HAS_HEATED_BED
     lcd.write(planner.leveling_active || blink ? '_' : ' ');

commit 10ed5ab01c43a09429e1eb885196308fca71f492
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 23 03:17:55 2023 -0500

    üö∏ Improve PAUSE_PROBE_DEPLOY_WHEN_TRIGGERED (#25681)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 969b3fb036..6090b13732 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -299,7 +299,7 @@ uint8_t MarlinUI::read_slow_buttons() {
 }
 
 // Duration in ms, freq in Hz
-void MarlinUI::buzz(const long duration, const uint16_t freq) {
+void MarlinUI::buzz(const long duration, const uint16_t freq/*=0*/) {
   if (!PanelDetected) return;
   if (!sound_on) return;
   #if ENABLED(TFTGLCD_PANEL_SPI)

commit 5664c02d077e028f84a24efd96c2eebe97ce8763
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 22:43:09 2023 -0500

    üßë‚Äçüíª Generalize SDSUPPORT as HAS_MEDIA
    
    In preparation for single- and multi-volume refactoring.

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index fc568c55db..969b3fb036 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -52,7 +52,7 @@
 #include "../../module/planner.h"
 #include "../../module/motion.h"
 
-#if DISABLED(LCD_PROGRESS_BAR) && BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
+#if DISABLED(LCD_PROGRESS_BAR) && BOTH(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
   #include "../../feature/filwidth.h"
   #include "../../gcode/parser.h"
 #endif
@@ -672,7 +672,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 void MarlinUI::draw_status_message(const bool blink) {
   if (!PanelDetected) return;
   lcd_moveto(0, 3);
-  #if BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
+  #if BOTH(FILAMENT_LCD_DISPLAY, HAS_MEDIA)
 
     // Alternate Status message and Filament display
     if (ELAPSED(millis(), next_filament_display)) {
@@ -689,7 +689,7 @@ void MarlinUI::draw_status_message(const bool blink) {
       return;
     }
 
-  #endif // FILAMENT_LCD_DISPLAY && SDSUPPORT
+  #endif // FILAMENT_LCD_DISPLAY && HAS_MEDIA
 
   // Get the UTF8 character count of the string
   uint8_t slen = utf8_strlen(status_message);
@@ -1061,7 +1061,7 @@ void MarlinUI::draw_status_screen() {
     lcd.print_line();
   }
 
-  #if ENABLED(SDSUPPORT)
+  #if HAS_MEDIA
 
     void MenuItem_sdbase::draw(const bool sel, const uint8_t row, FSTR_P const, CardReader &theCard, const bool isDir) {
       if (!PanelDetected) return;
@@ -1074,7 +1074,7 @@ void MarlinUI::draw_status_screen() {
       lcd.print_line();
     }
 
-  #endif // SDSUPPORT
+  #endif // HAS_MEDIA
 
   #if ENABLED(LCD_HAS_STATUS_INDICATORS)
 

commit 4233e4864f0c621612ce35a9b6ca882312e3aa4d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 01:56:10 2023 -0500

    üö∏ MarlinUI Endstop Test Screen, and more (#25667)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index e4f9e4eafc..fc568c55db 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -962,17 +962,41 @@ void MarlinUI::draw_status_screen() {
   #endif
 
   // Draw a static item with no left-right margin required. Centered by default.
-  void MenuItem_static::draw(const uint8_t row, FSTR_P const fstr, const uint8_t style/*=SS_DEFAULT*/, const char * const valstr/*=nullptr*/) {
+  void MenuItem_static::draw(const uint8_t row, FSTR_P const fstr, const uint8_t style/*=SS_DEFAULT*/, const char *vstr/*=nullptr*/) {
     if (!PanelDetected) return;
-    uint8_t n = LCD_WIDTH;
     lcd_moveto(0, row);
-    if ((style & SS_CENTER) && !valstr) {
-      int8_t pad = (LCD_WIDTH - utf8_strlen(fstr)) / 2;
-      while (--pad >= 0) { lcd.write(' '); n--; }
+
+    uint8_t n = LCD_WIDTH;
+    const bool center = bool(style & SS_CENTER), full = bool(style & SS_FULL);
+    const int8_t plen = fstr ? utf8_strlen(fstr) : 0,
+                 vlen = vstr ? utf8_strlen(vstr) : 0;
+    int8_t pad = (center || full) ? n - plen - vlen : 0;
+
+    // SS_CENTER: Pad with half of the unused space first
+    if (center) for (int8_t lpad = pad / 2; lpad > 0; --lpad) { lcd.write(' '); n--; }
+
+    // Draw as much of the label as fits
+    if (plen) {
+      const int8_t expl = n;
+      n = lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, n);
+      pad -= (expl - n - plen); // Reduce the padding
     }
-    n = lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, n);
-    if (valstr) n -= lcd_put_u8str_max(valstr, n);
-    for (; n; --n) lcd.write(' ');
+
+    if (vlen && n > 0) {
+      // SS_FULL: Pad with enough space to justify the value
+      if (full && !center) {
+        // Move the leading colon from the value to the label
+        if (*vstr == ':') { lcd.write(':'); vstr++; n--; }
+        // Move spaces to the padding
+        while (*vstr == ' ') { vstr++; pad++; }
+        // Pad in-between
+        for (; pad > 0; --pad) { lcd.write(' '); n--; }
+      }
+      n -= lcd_put_u8str_max(vstr, n);
+    }
+
+    for (; n > 0; --n) lcd.write(' ');
+
     lcd.print_line();
   }
 

commit b169d623e3284846bcda9829b12f20ce90e3762c
Author: EvilGremlin <22657714+EvilGremlin@users.noreply.github.com>
Date:   Thu Dec 8 01:08:53 2022 +0300

    üö∏ Progress display followup (#24879)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 1418edf5d1..e4f9e4eafc 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -596,23 +596,58 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 
 #endif // HAS_CUTTER
 
-#if HAS_PRINT_PROGRESS
-
-  FORCE_INLINE void _draw_print_progress() {
-    if (!PanelDetected) return;
-    const uint8_t progress = ui._get_progress();
-    #if ENABLED(SDSUPPORT)
-      lcd_put_u8str(F("SD"));
-    #elif ENABLED(SET_PROGRESS_PERCENT)
-      lcd_put_u8str(F("P:"));
-    #endif
-    if (progress)
-      lcd.print(ui8tostr3rj(progress));
-    else
-      lcd_put_u8str(F("---"));
-    lcd.write('%');
-  }
 
+#if HAS_PRINT_PROGRESS   // UNTESTED!!!
+  #define TPOFFSET (LCD_WIDTH - 1)
+  static uint8_t timepos = TPOFFSET - 6;
+
+  #if ENABLED(SHOW_PROGRESS_PERCENT)
+    void MarlinUI::drawPercent() {
+      const uint8_t progress = ui.get_progress_percent();
+      if (progress) {
+        lcd_moveto(0, 2);
+        lcd_put_u8str(F(TERN(IS_SD_PRINTING, "SD", "P:")));
+        lcd.print(TERN(PRINT_PROGRESS_SHOW_DECIMALS, permyriadtostr4(ui.get_progress_permyriad()), ui8tostr3rj(progress)));
+        lcd.write('%');
+      }
+    }
+  #endif
+  #if ENABLED(SHOW_REMAINING_TIME)
+    void MarlinUI::drawRemain() {
+      if (printJobOngoing()) {
+        const duration_t remaint = ui.get_remaining_time();
+        char buffer[10];
+        timepos = TPOFFSET - remaint.toDigital(buffer);
+        lcd_moveto(timepos, 1);
+        lcd.write('R');
+        lcd.print(buffer);
+      }
+    }
+  #endif
+  #if ENABLED(SHOW_INTERACTION_TIME)
+    void MarlinUI::drawInter() {
+      const duration_t interactt = ui.interaction_time;
+      if (printingIsActive() && interactt.value) {
+        char buffer[10];
+        timepos = TPOFFSET - interactt.toDigital(buffer);
+        lcd_moveto(timepos, 1);
+        lcd.write('C');
+        lcd.print(buffer);
+      }
+    }
+  #endif
+  #if ENABLED(SHOW_ELAPSED_TIME)
+    void MarlinUI::drawElapsed() {
+      if (printJobOngoing()) {
+        const duration_t elapsedt = print_job_timer.duration();
+        char buffer[10];
+        timepos = TPOFFSET - elapsedt.toDigital(buffer);
+        lcd_moveto(timepos, 1);
+        lcd.write('E');
+        lcd.print(buffer);
+      }
+    }
+  #endif
 #endif // HAS_PRINT_PROGRESS
 
 #if ENABLED(LCD_PROGRESS_BAR)
@@ -796,23 +831,12 @@ void MarlinUI::draw_status_screen() {
   #endif
 
   //
-  // Line 2 - feedrate, , time
+  // Line 2 - feedrate, progress %, progress time
   //
 
   lcd_moveto(0, 1);
   lcd_put_u8str(F("FR")); lcd.print(i16tostr3rj(feedrate_percentage)); lcd.write('%');
-
-  #if BOTH(SDSUPPORT, HAS_PRINT_PROGRESS)
-    lcd_moveto(LCD_WIDTH / 2 - 3, 1);
-    _draw_print_progress();
-  #endif
-
-  char buffer[10];
-  duration_t elapsed = print_job_timer.duration();
-  uint8_t len = elapsed.toDigital(buffer);
-
-  lcd_moveto((LCD_WIDTH - 1) - len, 1);
-  lcd.write(LCD_STR_CLOCK[0]); lcd.print(buffer);
+  ui.rotate_progress();   // UNTESTED!!!
 
   //
   // Line 3 - progressbar

commit 50e3e4d8628aeb2e2d106e341b9244e272965796
Author: Thomas Buck <taucher.bodensee@googlemail.com>
Date:   Sun Nov 27 01:59:13 2022 +0100

    üö∏ Optional Cutter/Laser status for HD44780 (#25003)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 029a04bf97..1418edf5d1 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -523,17 +523,14 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     #if !HEATER_IDLE_HANDLER
       UNUSED(blink);
     #else
-      if (!blink && thermalManager.heater_idle[thermalManager.idle_index_for_id(heater_id)].timed_out) {
-        lcd_put_lchar(' ');
-        if (t2 >= 10) lcd_put_lchar(' ');
-        if (t2 >= 100) lcd_put_lchar(' ');
-      }
+      if (!blink && thermalManager.heater_idle[thermalManager.idle_index_for_id(heater_id)].timed_out)
+        lcd_put_u8str(F("   "));
       else
     #endif
         lcd_put_u8str(i16tostr3left(t2));
 
-    lcd_put_lchar(' ');
-    if (t2 < 10) lcd_put_lchar(' ');
+    lcd_put_u8str(F(" "));
+    if (t2 < 10) lcd_put_u8str(F(" "));
 
     if (t2) picBits |= ICON_TEMP1;
     else    picBits &= ~ICON_TEMP1;
@@ -545,7 +542,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 
   FORCE_INLINE void _draw_flowmeter_status() {
     lcd_moveto(5, 5); lcd_put_u8str(F("FLOW"));
-    lcd_moveto(7, 6); lcd_put_lchar('L');
+    lcd_moveto(7, 6); lcd_put_u8str(F("L"));
     lcd_moveto(6, 7); lcd_put_u8str(ftostr11ns(cooler.flowrate));
 
     if (cooler.flowrate)  picBits |= ICON_FAN;
@@ -564,7 +561,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     {
       lcd_put_u8str("mA");
       lcd_moveto(10, 7);
-      lcd_put_lchar(' '); lcd_put_u8str(ui16tostr3rj(uint16_t(ammeter.current * 1000 + 0.5f)));
+      lcd_put_u8str(F(" ")); lcd_put_u8str(ui16tostr3rj(uint16_t(ammeter.current * 1000 + 0.5f)));
     }
     else {
       lcd_put_u8str(" A");
@@ -585,9 +582,9 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     #if CUTTER_UNIT_IS(RPM)
       lcd_moveto(16, 6);  lcd_put_u8str(F("RPM"));
       lcd_moveto(15, 7);  lcd_put_u8str(ftostr31ns(float(cutter.unitPower) / 1000));
-      lcd_put_lchar('K');
+      lcd_put_u8str(F("K"));
     #elif CUTTER_UNIT_IS(PERCENT)
-      lcd_moveto(17, 6);  lcd_put_lchar('%');
+      lcd_moveto(17, 6);  lcd_put_u8str(F("%"));
       lcd_moveto(18, 7);  lcd_put_u8str(cutter_power2str(cutter.unitPower));
     #else
       lcd_moveto(17, 7);  lcd_put_u8str(cutter_power2str(cutter.unitPower));

commit f595e40ceb0c79d7f0d6438636658dfcfa2a75b8
Author: EvilGremlin <22657714+EvilGremlin@users.noreply.github.com>
Date:   Sun Oct 9 18:30:47 2022 +0300

    ‚ôªÔ∏è Set Progress without LCD (#24767)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index f3d98ec555..029a04bf97 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -606,7 +606,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     const uint8_t progress = ui._get_progress();
     #if ENABLED(SDSUPPORT)
       lcd_put_u8str(F("SD"));
-    #elif ENABLED(LCD_SET_PROGRESS_MANUALLY)
+    #elif ENABLED(SET_PROGRESS_PERCENT)
       lcd_put_u8str(F("P:"));
     #endif
     if (progress)

commit cb4a79173be3e8ed1ff45e7c346df1c28e744d5a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jul 1 04:49:37 2022 -0500

    ü©π Remove poison wchar_t macro

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 46564bb1e6..f3d98ec555 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -524,16 +524,16 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
       UNUSED(blink);
     #else
       if (!blink && thermalManager.heater_idle[thermalManager.idle_index_for_id(heater_id)].timed_out) {
-        lcd_put_wchar(' ');
-        if (t2 >= 10) lcd_put_wchar(' ');
-        if (t2 >= 100) lcd_put_wchar(' ');
+        lcd_put_lchar(' ');
+        if (t2 >= 10) lcd_put_lchar(' ');
+        if (t2 >= 100) lcd_put_lchar(' ');
       }
       else
     #endif
         lcd_put_u8str(i16tostr3left(t2));
 
-    lcd_put_wchar(' ');
-    if (t2 < 10) lcd_put_wchar(' ');
+    lcd_put_lchar(' ');
+    if (t2 < 10) lcd_put_lchar(' ');
 
     if (t2) picBits |= ICON_TEMP1;
     else    picBits &= ~ICON_TEMP1;
@@ -545,7 +545,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 
   FORCE_INLINE void _draw_flowmeter_status() {
     lcd_moveto(5, 5); lcd_put_u8str(F("FLOW"));
-    lcd_moveto(7, 6); lcd_put_wchar('L');
+    lcd_moveto(7, 6); lcd_put_lchar('L');
     lcd_moveto(6, 7); lcd_put_u8str(ftostr11ns(cooler.flowrate));
 
     if (cooler.flowrate)  picBits |= ICON_FAN;
@@ -564,7 +564,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     {
       lcd_put_u8str("mA");
       lcd_moveto(10, 7);
-      lcd_put_wchar(' '); lcd_put_u8str(ui16tostr3rj(uint16_t(ammeter.current * 1000 + 0.5f)));
+      lcd_put_lchar(' '); lcd_put_u8str(ui16tostr3rj(uint16_t(ammeter.current * 1000 + 0.5f)));
     }
     else {
       lcd_put_u8str(" A");
@@ -585,9 +585,9 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     #if CUTTER_UNIT_IS(RPM)
       lcd_moveto(16, 6);  lcd_put_u8str(F("RPM"));
       lcd_moveto(15, 7);  lcd_put_u8str(ftostr31ns(float(cutter.unitPower) / 1000));
-      lcd_put_wchar('K');
+      lcd_put_lchar('K');
     #elif CUTTER_UNIT_IS(PERCENT)
-      lcd_moveto(17, 6);  lcd_put_wchar('%');
+      lcd_moveto(17, 6);  lcd_put_lchar('%');
       lcd_moveto(18, 7);  lcd_put_u8str(cutter_power2str(cutter.unitPower));
     #else
       lcd_moveto(17, 7);  lcd_put_u8str(cutter_power2str(cutter.unitPower));

commit 8aca38351cd6d33a1202bf9a13890dc8e5eadd49
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 3 22:56:38 2022 -0500

    üßë‚Äçüíª Extend LCD string substitution (#24278)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index ca830960cb..46564bb1e6 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -380,9 +380,13 @@ void MarlinUI::clear_lcd() {
   void MarlinUI::_set_contrast() { lcd.setContrast(contrast); }
 #endif
 
+#if !IS_TFTGLCD_PANEL
+  void lcd_moveto(const uint8_t col, const uint8_t row) { lcd.setCursor(col, row); }
+#endif
+
 static void center_text(FSTR_P const fstart, const uint8_t y) {
   const uint8_t len = utf8_strlen(fstart);
-  lcd.setCursor(len < LCD_WIDTH ? (LCD_WIDTH - len) / 2 : 0, y);
+  lcd_moveto(len < LCD_WIDTH ? (LCD_WIDTH - len) / 2 : 0, y);
   lcd_put_u8str(fstart);
 }
 
@@ -396,9 +400,9 @@ static void center_text(FSTR_P const fstart, const uint8_t y) {
     uint8_t indent = (LCD_WIDTH - 8) / 2;
     // symbols 217 (bottom right corner) and 218 (top left corner) are using for letters in some languages
     // and they should be moved to beginning ASCII table as special symbols
-    lcd.setCursor(indent, 0); lcd.write(TLC); lcd_put_u8str(F("------"));  lcd.write(TRC);
-    lcd.setCursor(indent, 1); lcd.write(LR);  lcd_put_u8str(F("Marlin"));  lcd.write(LR);
-    lcd.setCursor(indent, 2); lcd.write(BLC); lcd_put_u8str(F("------"));  lcd.write(BRC);
+    lcd_moveto(indent, 0); lcd.write(TLC); lcd_put_u8str(F("------")); lcd.write(TRC);
+    lcd_moveto(indent, 1); lcd.write(LR);  lcd_put_u8str(F("Marlin")); lcd.write(LR);
+    lcd_moveto(indent, 2); lcd.write(BLC); lcd_put_u8str(F("------")); lcd.write(BRC);
     center_text(F(SHORT_BUILD_VERSION), 3);
     center_text(F(MARLIN_WEBSITE_URL), 4);
     picBits = ICON_LOGO;
@@ -414,8 +418,8 @@ static void center_text(FSTR_P const fstart, const uint8_t y) {
 void MarlinUI::draw_kill_screen() {
   if (!PanelDetected) return;
   lcd.clear_buffer();
-  lcd.setCursor(0, 3);  lcd.write(COLOR_ERROR);
-  lcd.setCursor((LCD_WIDTH - utf8_strlen(status_message)) / 2 + 1, 3);
+  lcd_moveto(0, 3); lcd.write(COLOR_ERROR);
+  lcd_moveto((LCD_WIDTH - utf8_strlen(status_message)) / 2 + 1, 3);
   lcd_put_u8str(status_message);
   center_text(GET_TEXT_F(MSG_HALTED), 5);
   center_text(GET_TEXT_F(MSG_PLEASE_RESET), 6);
@@ -453,25 +457,25 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 
     #if HOTENDS < 2
       if (heater_id == H_E0) {
-        lcd.setCursor(2, 5);  lcd.print(prefix); //HE
-        lcd.setCursor(1, 6);  lcd.print(i16tostr3rj(t1));
-        lcd.setCursor(1, 7);
+        lcd_moveto(2, 5); lcd.print(prefix); //HE
+        lcd_moveto(1, 6); lcd.print(i16tostr3rj(t1));
+        lcd_moveto(1, 7);
       }
       else {
-        lcd.setCursor(6, 5);  lcd.print(prefix); //BED
-        lcd.setCursor(6, 6);  lcd.print(i16tostr3rj(t1));
-        lcd.setCursor(6, 7);
+        lcd_moveto(6, 5); lcd.print(prefix); //BED
+        lcd_moveto(6, 6); lcd.print(i16tostr3rj(t1));
+        lcd_moveto(6, 7);
       }
     #else
       if (heater_id > H_BED) {
-        lcd.setCursor(heater_id * 4, 5);  lcd.print(prefix); // HE1 or HE2 or HE3
-        lcd.setCursor(heater_id * 4, 6);  lcd.print(i16tostr3rj(t1));
-        lcd.setCursor(heater_id * 4, 7);
+        lcd_moveto(heater_id * 4, 5); lcd.print(prefix); // HE1 or HE2 or HE3
+        lcd_moveto(heater_id * 4, 6); lcd.print(i16tostr3rj(t1));
+        lcd_moveto(heater_id * 4, 7);
       }
       else {
-        lcd.setCursor(13, 5);  lcd.print(prefix); //BED
-        lcd.setCursor(13, 6);  lcd.print(i16tostr3rj(t1));
-        lcd.setCursor(13, 7);
+        lcd_moveto(13, 5); lcd.print(prefix); //BED
+        lcd_moveto(13, 6); lcd.print(i16tostr3rj(t1));
+        lcd_moveto(13, 7);
       }
     #endif // HOTENDS <= 1
 
@@ -512,9 +516,9 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   FORCE_INLINE void _draw_cooler_status(const bool blink) {
     const celsius_t t2 = thermalManager.degTargetCooler();
 
-    lcd.setCursor(0, 5); lcd_put_u8str(F("COOL"));
-    lcd.setCursor(1, 6); lcd_put_u8str(i16tostr3rj(thermalManager.wholeDegCooler()));
-    lcd.setCursor(1, 7);
+    lcd_moveto(0, 5); lcd_put_u8str(F("COOL"));
+    lcd_moveto(1, 6); lcd_put_u8str(i16tostr3rj(thermalManager.wholeDegCooler()));
+    lcd_moveto(1, 7);
 
     #if !HEATER_IDLE_HANDLER
       UNUSED(blink);
@@ -540,9 +544,9 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 #if ENABLED(LASER_COOLANT_FLOW_METER)
 
   FORCE_INLINE void _draw_flowmeter_status() {
-    lcd.setCursor(5, 5); lcd_put_u8str(F("FLOW"));
-    lcd.setCursor(7, 6); lcd_put_wchar('L');
-    lcd.setCursor(6, 7); lcd_put_u8str(ftostr11ns(cooler.flowrate));
+    lcd_moveto(5, 5); lcd_put_u8str(F("FLOW"));
+    lcd_moveto(7, 6); lcd_put_wchar('L');
+    lcd_moveto(6, 7); lcd_put_u8str(ftostr11ns(cooler.flowrate));
 
     if (cooler.flowrate)  picBits |= ICON_FAN;
     else                  picBits &= ~ICON_FAN;
@@ -553,18 +557,18 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 #if ENABLED(I2C_AMMETER)
 
   FORCE_INLINE void _draw_ammeter_status() {
-    lcd.setCursor(10, 5); lcd_put_u8str(F("ILAZ"));
+    lcd_moveto(10, 5); lcd_put_u8str(F("ILAZ"));
     ammeter.read();
-    lcd.setCursor(11, 6);
+    lcd_moveto(11, 6);
     if (ammeter.current <= 0.999f)
     {
       lcd_put_u8str("mA");
-      lcd.setCursor(10, 7);
+      lcd_moveto(10, 7);
       lcd_put_wchar(' '); lcd_put_u8str(ui16tostr3rj(uint16_t(ammeter.current * 1000 + 0.5f)));
     }
     else {
       lcd_put_u8str(" A");
-      lcd.setCursor(10, 7);
+      lcd_moveto(10, 7);
       lcd_put_u8str(ftostr12ns(ammeter.current));
     }
 
@@ -577,16 +581,16 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 #if HAS_CUTTER
 
   FORCE_INLINE void _draw_cutter_status() {
-    lcd.setCursor(15, 5);  lcd_put_u8str(F("CUTT"));
+    lcd_moveto(15, 5);  lcd_put_u8str(F("CUTT"));
     #if CUTTER_UNIT_IS(RPM)
-      lcd.setCursor(16, 6);  lcd_put_u8str(F("RPM"));
-      lcd.setCursor(15, 7);  lcd_put_u8str(ftostr31ns(float(cutter.unitPower) / 1000));
+      lcd_moveto(16, 6);  lcd_put_u8str(F("RPM"));
+      lcd_moveto(15, 7);  lcd_put_u8str(ftostr31ns(float(cutter.unitPower) / 1000));
       lcd_put_wchar('K');
     #elif CUTTER_UNIT_IS(PERCENT)
-      lcd.setCursor(17, 6);  lcd_put_wchar('%');
-      lcd.setCursor(18, 7);  lcd_put_u8str(cutter_power2str(cutter.unitPower));
+      lcd_moveto(17, 6);  lcd_put_wchar('%');
+      lcd_moveto(18, 7);  lcd_put_u8str(cutter_power2str(cutter.unitPower));
     #else
-      lcd.setCursor(17, 7);  lcd_put_u8str(cutter_power2str(cutter.unitPower));
+      lcd_moveto(17, 7);  lcd_put_u8str(cutter_power2str(cutter.unitPower));
     #endif
 
     if (cutter.unitPower) picBits |= ICON_HOT;
@@ -622,10 +626,10 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
       lcd.write('%'); lcd.write(percent);
     }
     else { // For progress bar test
-      lcd.setCursor(LCD_WIDTH / 2 - 2, MIDDLE_Y);
-      lcd.print(i16tostr3rj(percent));  lcd.write('%');
+      lcd_moveto(LCD_WIDTH / 2 - 2, MIDDLE_Y);
+      lcd.print(i16tostr3rj(percent)); lcd.write('%');
       lcd.print_line();
-      lcd.setCursor(0, MIDDLE_Y + 1);
+      lcd_moveto(0, MIDDLE_Y + 1);
       lcd.write('%'); lcd.write(percent);
       lcd.print_line();
     }
@@ -635,7 +639,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 
 void MarlinUI::draw_status_message(const bool blink) {
   if (!PanelDetected) return;
-  lcd.setCursor(0, 3);
+  lcd_moveto(0, 3);
   #if BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
 
     // Alternate Status message and Filament display
@@ -784,7 +788,7 @@ void MarlinUI::draw_status_screen() {
   // Line 1 - XYZ coordinates
   //
 
-  lcd.setCursor(0, 0);
+  lcd_moveto(0, 0);
   const xyz_pos_t lpos = current_position.asLogical();
   _draw_axis_value(X_AXIS, ftostr4sign(lpos.x), blink); lcd.write(' ');
   _draw_axis_value(Y_AXIS, ftostr4sign(lpos.y), blink); lcd.write(' ');
@@ -798,11 +802,11 @@ void MarlinUI::draw_status_screen() {
   // Line 2 - feedrate, , time
   //
 
-  lcd.setCursor(0, 1);
+  lcd_moveto(0, 1);
   lcd_put_u8str(F("FR")); lcd.print(i16tostr3rj(feedrate_percentage)); lcd.write('%');
 
   #if BOTH(SDSUPPORT, HAS_PRINT_PROGRESS)
-    lcd.setCursor(LCD_WIDTH / 2 - 3, 1);
+    lcd_moveto(LCD_WIDTH / 2 - 3, 1);
     _draw_print_progress();
   #endif
 
@@ -810,14 +814,14 @@ void MarlinUI::draw_status_screen() {
   duration_t elapsed = print_job_timer.duration();
   uint8_t len = elapsed.toDigital(buffer);
 
-  lcd.setCursor((LCD_WIDTH - 1) - len, 1);
+  lcd_moveto((LCD_WIDTH - 1) - len, 1);
   lcd.write(LCD_STR_CLOCK[0]); lcd.print(buffer);
 
   //
   // Line 3 - progressbar
   //
 
-  lcd.setCursor(0, 2);
+  lcd_moveto(0, 2);
   #if ENABLED(LCD_PROGRESS_BAR)
     draw_progress_bar(_get_progress());
   #else
@@ -836,7 +840,7 @@ void MarlinUI::draw_status_screen() {
 
   #if HOTENDS <= 1 || (HOTENDS <= 2 && !HAS_HEATED_BED)
     #if DUAL_MIXING_EXTRUDER
-      lcd.setCursor(0, 4);
+      lcd_moveto(0, 4);
       // Two-component mix / gradient instead of XY
       char mixer_messages[12];
       const char *mix_label;
@@ -892,9 +896,9 @@ void MarlinUI::draw_status_screen() {
       #else
         #define FANX 17
       #endif
-      lcd.setCursor(FANX, 5); lcd_put_u8str(F("FAN"));
-      lcd.setCursor(FANX + 1, 6); lcd.write('%');
-      lcd.setCursor(FANX, 7);
+      lcd_moveto(FANX, 5); lcd_put_u8str(F("FAN"));
+      lcd_moveto(FANX + 1, 6); lcd.write('%');
+      lcd_moveto(FANX, 7);
       lcd.print(i16tostr3rj(per));
 
       if (TERN0(HAS_FAN0, thermalManager.fan_speed[0]) || TERN0(HAS_FAN1, thermalManager.fan_speed[1]) || TERN0(HAS_FAN2, thermalManager.fan_speed[2]))
@@ -927,7 +931,7 @@ void MarlinUI::draw_status_screen() {
 
     void MarlinUI::draw_hotend_status(const uint8_t row, const uint8_t extruder) {
       if (!PanelDetected) return;
-      lcd.setCursor((LCD_WIDTH - 14) / 2, row + 1);
+      lcd_moveto((LCD_WIDTH - 14) / 2, row + 1);
       lcd.write(LCD_STR_THERMOMETER[0]); lcd_put_u8str(F(" E")); lcd.write('1' + extruder); lcd.write(' ');
       lcd.print(i16tostr3rj(thermalManager.wholeDegHotend(extruder))); lcd.write(LCD_STR_DEGREE[0]); lcd.write('/');
       lcd.print(i16tostr3rj(thermalManager.degTargetHotend(extruder))); lcd.write(LCD_STR_DEGREE[0]);
@@ -940,12 +944,12 @@ void MarlinUI::draw_status_screen() {
   void MenuItem_static::draw(const uint8_t row, FSTR_P const fstr, const uint8_t style/*=SS_DEFAULT*/, const char * const valstr/*=nullptr*/) {
     if (!PanelDetected) return;
     uint8_t n = LCD_WIDTH;
-    lcd.setCursor(0, row);
+    lcd_moveto(0, row);
     if ((style & SS_CENTER) && !valstr) {
       int8_t pad = (LCD_WIDTH - utf8_strlen(fstr)) / 2;
       while (--pad >= 0) { lcd.write(' '); n--; }
     }
-    n = lcd_put_u8str_ind(fstr, itemIndex, itemString, n);
+    n = lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, n);
     if (valstr) n -= lcd_put_u8str_max(valstr, n);
     for (; n; --n) lcd.write(' ');
     lcd.print_line();
@@ -954,25 +958,25 @@ void MarlinUI::draw_status_screen() {
   // Draw a generic menu item with pre_char (if selected) and post_char
   void MenuItemBase::_draw(const bool sel, const uint8_t row, FSTR_P const fstr, const char pre_char, const char post_char) {
     if (!PanelDetected) return;
-    lcd.setCursor(0, row);
+    lcd_moveto(0, row);
     lcd.write(sel ? pre_char : ' ');
-    uint8_t n = lcd_put_u8str_ind(fstr, itemIndex, itemString, LCD_WIDTH - 2);
+    uint8_t n = lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, LCD_WIDTH - 2);
     for (; n; --n) lcd.write(' ');
     lcd.write(post_char);
     lcd.print_line();
   }
 
   // Draw a menu item with a (potentially) editable value
-  void MenuEditItemBase::draw(const bool sel, const uint8_t row, FSTR_P const fstr, const char * const data, const bool pgm) {
+  void MenuEditItemBase::draw(const bool sel, const uint8_t row, FSTR_P const fstr, const char * const inStr, const bool pgm) {
     if (!PanelDetected) return;
-    const uint8_t vlen = data ? (pgm ? utf8_strlen_P(data) : utf8_strlen(data)) : 0;
-    lcd.setCursor(0, row);
+    const uint8_t vlen = inStr ? (pgm ? utf8_strlen_P(inStr) : utf8_strlen(inStr)) : 0;
+    lcd_moveto(0, row);
     lcd.write(sel ? LCD_STR_ARROW_RIGHT[0] : ' ');
-    uint8_t n = lcd_put_u8str_ind(fstr, itemIndex, itemString, LCD_WIDTH - 2 - vlen);
+    uint8_t n = lcd_put_u8str(fstr, itemIndex, itemStringC, itemStringF, LCD_WIDTH - 2 - vlen);
     if (vlen) {
       lcd.write(':');
       for (; n; --n) lcd.write(' ');
-      if (pgm) lcd_put_u8str_P(data); else lcd_put_u8str(data);
+      if (pgm) lcd_put_u8str_P(inStr); else lcd_put_u8str(inStr);
     }
     lcd.print_line();
   }
@@ -983,12 +987,12 @@ void MarlinUI::draw_status_screen() {
     if (!PanelDetected) return;
     ui.encoder_direction_normal();
     const uint8_t y = TERN0(AUTO_BED_LEVELING_UBL, ui.external_control) ? LCD_HEIGHT - 1 : MIDDLE_Y;
-    lcd.setCursor(0, y);
+    lcd_moveto(0, y);
     lcd.write(COLOR_EDIT);
     lcd_put_u8str(fstr);
     if (value) {
       lcd.write(':');
-      lcd.setCursor((LCD_WIDTH - 1) - (utf8_strlen(value) + 1), y); // Right-justified, padded by spaces
+      lcd_moveto((LCD_WIDTH - 1) - (utf8_strlen(value) + 1), y); // Right-justified, padded by spaces
       lcd.write(' ');                                               // Overwrite char if value gets shorter
       lcd.print(value);
       lcd.write(' ');
@@ -1002,11 +1006,11 @@ void MarlinUI::draw_status_screen() {
     ui.draw_select_screen_prompt(pref, string, suff);
     lcd.write(COLOR_EDIT);
     if (no) {
-      lcd.setCursor(0, MIDDLE_Y);
+      lcd_moveto(0, MIDDLE_Y);
       lcd.write(yesno ? ' ' : '['); lcd_put_u8str(no); lcd.write(yesno ? ' ' : ']');
     }
     if (yes) {
-      lcd.setCursor(LCD_WIDTH - utf8_strlen(yes) - 3, MIDDLE_Y);
+      lcd_moveto(LCD_WIDTH - utf8_strlen(yes) - 3, MIDDLE_Y);
       lcd.write(yesno ? '[' : ' '); lcd_put_u8str(yes); lcd.write(yesno ? ']' : ' ');
     }
     lcd.print_line();
@@ -1016,7 +1020,7 @@ void MarlinUI::draw_status_screen() {
 
     void MenuItem_sdbase::draw(const bool sel, const uint8_t row, FSTR_P const, CardReader &theCard, const bool isDir) {
       if (!PanelDetected) return;
-      lcd.setCursor(0, row);
+      lcd_moveto(0, row);
       lcd.write(sel ? LCD_STR_ARROW_RIGHT[0] : ' ');
       constexpr uint8_t maxlen = LCD_WIDTH - 2;
       uint8_t n = maxlen - lcd_put_u8str_max(ui.scrolled_filename(theCard, maxlen, row, sel), maxlen);
@@ -1055,23 +1059,23 @@ void MarlinUI::draw_status_screen() {
       lcd.clear_buffer();
 
       //print only top left corner. All frame with grid points will be printed by panel
-      lcd.setCursor(0, 0);
+      lcd_moveto(0, 0);
       *fb++ = TLC;   //top left corner - marker for plot parameters
       *fb = (GRID_MAX_POINTS_X << 4) + GRID_MAX_POINTS_Y; //set mesh size
 
       // Print plot position
-      lcd.setCursor(_LCD_W_POS, 0);
-      *fb++ = '(';  lcd.print(i16tostr3left(x_plot));
-      *fb++ = ',';  lcd.print(i16tostr3left(y_plot)); *fb = ')';
+      lcd_moveto(_LCD_W_POS, 0);
+      *fb++ = '('; lcd.print(i16tostr3left(x_plot));
+      *fb++ = ','; lcd.print(i16tostr3left(y_plot)); *fb = ')';
 
       // Show all values
-      lcd.setCursor(_LCD_W_POS, 1); lcd_put_u8str(F("X:"));
+      lcd_moveto(_LCD_W_POS, 1); lcd_put_u8str(F("X:"));
       lcd.print(ftostr52(LOGICAL_X_POSITION(pgm_read_float(&bedlevel._mesh_index_to_xpos[x_plot]))));
-      lcd.setCursor(_LCD_W_POS, 2); lcd_put_u8str(F("Y:"));
+      lcd_moveto(_LCD_W_POS, 2); lcd_put_u8str(F("Y:"));
       lcd.print(ftostr52(LOGICAL_Y_POSITION(pgm_read_float(&bedlevel._mesh_index_to_ypos[y_plot]))));
 
       // Show the location value
-      lcd.setCursor(_LCD_W_POS, 3); lcd_put_u8str(F("Z:"));
+      lcd_moveto(_LCD_W_POS, 3); lcd_put_u8str(F("Z:"));
 
       if (!isnan(bedlevel.z_values[x_plot][y_plot]))
         lcd.print(ftostr43sign(bedlevel.z_values[x_plot][y_plot]));

commit a5e1d4c50ae40c8203d8490be83ef86e16ebf1c2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 22 19:56:46 2022 -0500

    ‚ôªÔ∏è Apply F() to more LCD code (#24228)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 5e418e2fe3..ca830960cb 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -380,13 +380,10 @@ void MarlinUI::clear_lcd() {
   void MarlinUI::_set_contrast() { lcd.setContrast(contrast); }
 #endif
 
-static void center_text_P(PGM_P pstart, uint8_t y) {
-  uint8_t len = utf8_strlen_P(pstart);
-  if (len < LCD_WIDTH)
-    lcd.setCursor((LCD_WIDTH - len) / 2, y);
-  else
-    lcd.setCursor(0, y);
-  lcd_put_u8str_P(pstart);
+static void center_text(FSTR_P const fstart, const uint8_t y) {
+  const uint8_t len = utf8_strlen(fstart);
+  lcd.setCursor(len < LCD_WIDTH ? (LCD_WIDTH - len) / 2 : 0, y);
+  lcd_put_u8str(fstart);
 }
 
 #if ENABLED(SHOW_BOOTSCREEN)
@@ -402,8 +399,8 @@ static void center_text_P(PGM_P pstart, uint8_t y) {
     lcd.setCursor(indent, 0); lcd.write(TLC); lcd_put_u8str(F("------"));  lcd.write(TRC);
     lcd.setCursor(indent, 1); lcd.write(LR);  lcd_put_u8str(F("Marlin"));  lcd.write(LR);
     lcd.setCursor(indent, 2); lcd.write(BLC); lcd_put_u8str(F("------"));  lcd.write(BRC);
-    center_text_P(PSTR(SHORT_BUILD_VERSION), 3);
-    center_text_P(PSTR(MARLIN_WEBSITE_URL), 4);
+    center_text(F(SHORT_BUILD_VERSION), 3);
+    center_text(F(MARLIN_WEBSITE_URL), 4);
     picBits = ICON_LOGO;
     lcd.print_screen();
   }
@@ -420,8 +417,8 @@ void MarlinUI::draw_kill_screen() {
   lcd.setCursor(0, 3);  lcd.write(COLOR_ERROR);
   lcd.setCursor((LCD_WIDTH - utf8_strlen(status_message)) / 2 + 1, 3);
   lcd_put_u8str(status_message);
-  center_text_P(GET_TEXT(MSG_HALTED), 5);
-  center_text_P(GET_TEXT(MSG_PLEASE_RESET), 6);
+  center_text(GET_TEXT_F(MSG_HALTED), 5);
+  center_text(GET_TEXT_F(MSG_PLEASE_RESET), 6);
   lcd.print_screen();
 }
 
@@ -940,38 +937,38 @@ void MarlinUI::draw_status_screen() {
   #endif
 
   // Draw a static item with no left-right margin required. Centered by default.
-  void MenuItem_static::draw(const uint8_t row, PGM_P const pstr, const uint8_t style/*=SS_DEFAULT*/, const char * const valstr/*=nullptr*/) {
+  void MenuItem_static::draw(const uint8_t row, FSTR_P const fstr, const uint8_t style/*=SS_DEFAULT*/, const char * const valstr/*=nullptr*/) {
     if (!PanelDetected) return;
     uint8_t n = LCD_WIDTH;
     lcd.setCursor(0, row);
     if ((style & SS_CENTER) && !valstr) {
-      int8_t pad = (LCD_WIDTH - utf8_strlen_P(pstr)) / 2;
+      int8_t pad = (LCD_WIDTH - utf8_strlen(fstr)) / 2;
       while (--pad >= 0) { lcd.write(' '); n--; }
     }
-    n = lcd_put_u8str_ind_P(pstr, itemIndex, itemString, n);
+    n = lcd_put_u8str_ind(fstr, itemIndex, itemString, n);
     if (valstr) n -= lcd_put_u8str_max(valstr, n);
     for (; n; --n) lcd.write(' ');
     lcd.print_line();
   }
 
   // Draw a generic menu item with pre_char (if selected) and post_char
-  void MenuItemBase::_draw(const bool sel, const uint8_t row, PGM_P const pstr, const char pre_char, const char post_char) {
+  void MenuItemBase::_draw(const bool sel, const uint8_t row, FSTR_P const fstr, const char pre_char, const char post_char) {
     if (!PanelDetected) return;
     lcd.setCursor(0, row);
     lcd.write(sel ? pre_char : ' ');
-    uint8_t n = lcd_put_u8str_ind_P(pstr, itemIndex, itemString, LCD_WIDTH - 2);
+    uint8_t n = lcd_put_u8str_ind(fstr, itemIndex, itemString, LCD_WIDTH - 2);
     for (; n; --n) lcd.write(' ');
     lcd.write(post_char);
     lcd.print_line();
   }
 
   // Draw a menu item with a (potentially) editable value
-  void MenuEditItemBase::draw(const bool sel, const uint8_t row, PGM_P const pstr, const char * const data, const bool pgm) {
+  void MenuEditItemBase::draw(const bool sel, const uint8_t row, FSTR_P const fstr, const char * const data, const bool pgm) {
     if (!PanelDetected) return;
     const uint8_t vlen = data ? (pgm ? utf8_strlen_P(data) : utf8_strlen(data)) : 0;
     lcd.setCursor(0, row);
     lcd.write(sel ? LCD_STR_ARROW_RIGHT[0] : ' ');
-    uint8_t n = lcd_put_u8str_ind_P(pstr, itemIndex, itemString, LCD_WIDTH - 2 - vlen);
+    uint8_t n = lcd_put_u8str_ind(fstr, itemIndex, itemString, LCD_WIDTH - 2 - vlen);
     if (vlen) {
       lcd.write(':');
       for (; n; --n) lcd.write(' ');
@@ -982,13 +979,13 @@ void MarlinUI::draw_status_screen() {
 
   // Low-level draw_edit_screen can be used to draw an edit screen from anyplace
   // This line moves to the last line of the screen for UBL plot screen on the panel side
-  void MenuEditItemBase::draw_edit_screen(PGM_P const pstr, const char * const value/*=nullptr*/) {
+  void MenuEditItemBase::draw_edit_screen(FSTR_P const fstr, const char * const value/*=nullptr*/) {
     if (!PanelDetected) return;
     ui.encoder_direction_normal();
     const uint8_t y = TERN0(AUTO_BED_LEVELING_UBL, ui.external_control) ? LCD_HEIGHT - 1 : MIDDLE_Y;
     lcd.setCursor(0, y);
     lcd.write(COLOR_EDIT);
-    lcd_put_u8str_P(pstr);
+    lcd_put_u8str(fstr);
     if (value) {
       lcd.write(':');
       lcd.setCursor((LCD_WIDTH - 1) - (utf8_strlen(value) + 1), y); // Right-justified, padded by spaces
@@ -1000,24 +997,24 @@ void MarlinUI::draw_status_screen() {
   }
 
   // The Select Screen presents a prompt and two "buttons"
-  void MenuItem_confirm::draw_select_screen(PGM_P const yes, PGM_P const no, const bool yesno, PGM_P const pref, const char * const string, PGM_P const suff) {
+  void MenuItem_confirm::draw_select_screen(FSTR_P const yes, FSTR_P const no, const bool yesno, FSTR_P const pref, const char * const string, FSTR_P const suff) {
     if (!PanelDetected) return;
     ui.draw_select_screen_prompt(pref, string, suff);
     lcd.write(COLOR_EDIT);
     if (no) {
       lcd.setCursor(0, MIDDLE_Y);
-      lcd.write(yesno ? ' ' : '['); lcd_put_u8str_P(no); lcd.write(yesno ? ' ' : ']');
+      lcd.write(yesno ? ' ' : '['); lcd_put_u8str(no); lcd.write(yesno ? ' ' : ']');
     }
     if (yes) {
-      lcd.setCursor(LCD_WIDTH - utf8_strlen_P(yes) - 3, MIDDLE_Y);
-      lcd.write(yesno ? '[' : ' '); lcd_put_u8str_P(yes); lcd.write(yesno ? ']' : ' ');
+      lcd.setCursor(LCD_WIDTH - utf8_strlen(yes) - 3, MIDDLE_Y);
+      lcd.write(yesno ? '[' : ' '); lcd_put_u8str(yes); lcd.write(yesno ? ']' : ' ');
     }
     lcd.print_line();
   }
 
   #if ENABLED(SDSUPPORT)
 
-    void MenuItem_sdbase::draw(const bool sel, const uint8_t row, PGM_P const, CardReader &theCard, const bool isDir) {
+    void MenuItem_sdbase::draw(const bool sel, const uint8_t row, FSTR_P const, CardReader &theCard, const bool isDir) {
       if (!PanelDetected) return;
       lcd.setCursor(0, row);
       lcd.write(sel ? LCD_STR_ARROW_RIGHT[0] : ' ');
@@ -1081,7 +1078,7 @@ void MarlinUI::draw_status_screen() {
       else
         lcd_put_u8str(F(" -----"));
 
-      center_text_P(GET_TEXT(MSG_UBL_FINE_TUNE_MESH), 8);
+      center_text(GET_TEXT_F(MSG_UBL_FINE_TUNE_MESH), 8);
 
       lcd.print_screen();
     }

commit b523ddf1b2820488c6cc46887ee85e8a781ce726
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 19 06:05:52 2022 -0500

    ‚ôªÔ∏è Common Bed Leveling object name, accessors (#24214)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index cef5fdb170..5e418e2fe3 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -1069,15 +1069,15 @@ void MarlinUI::draw_status_screen() {
 
       // Show all values
       lcd.setCursor(_LCD_W_POS, 1); lcd_put_u8str(F("X:"));
-      lcd.print(ftostr52(LOGICAL_X_POSITION(pgm_read_float(&ubl._mesh_index_to_xpos[x_plot]))));
+      lcd.print(ftostr52(LOGICAL_X_POSITION(pgm_read_float(&bedlevel._mesh_index_to_xpos[x_plot]))));
       lcd.setCursor(_LCD_W_POS, 2); lcd_put_u8str(F("Y:"));
-      lcd.print(ftostr52(LOGICAL_Y_POSITION(pgm_read_float(&ubl._mesh_index_to_ypos[y_plot]))));
+      lcd.print(ftostr52(LOGICAL_Y_POSITION(pgm_read_float(&bedlevel._mesh_index_to_ypos[y_plot]))));
 
       // Show the location value
       lcd.setCursor(_LCD_W_POS, 3); lcd_put_u8str(F("Z:"));
 
-      if (!isnan(ubl.z_values[x_plot][y_plot]))
-        lcd.print(ftostr43sign(ubl.z_values[x_plot][y_plot]));
+      if (!isnan(bedlevel.z_values[x_plot][y_plot]))
+        lcd.print(ftostr43sign(bedlevel.z_values[x_plot][y_plot]));
       else
         lcd_put_u8str(F(" -----"));
 

commit 04fe50936e23a8aca7a400591e700c1220f68b3f
Author: Pauli Jokela <pauli.jokela@didstopia.com>
Date:   Thu May 12 05:23:16 2022 +0300

    ‚ú® SOUND_ON_DEFAULT option (#24102)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 0745397f4f..cef5fdb170 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -301,7 +301,7 @@ uint8_t MarlinUI::read_slow_buttons() {
 // Duration in ms, freq in Hz
 void MarlinUI::buzz(const long duration, const uint16_t freq) {
   if (!PanelDetected) return;
-  if (!buzzer_enabled) return;
+  if (!sound_on) return;
   #if ENABLED(TFTGLCD_PANEL_SPI)
     WRITE(TFTGLCD_CS, LOW);
     SPI_SEND_ONE(BUZZER);

commit 5b35f3a95582a477e879be5cc7d1406a42d3e740
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Wed Jan 26 10:33:10 2022 -0800

    üö∏ Better "Bed Tramming Done" dialog (#23616)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index fef313e761..0745397f4f 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -1003,11 +1003,15 @@ void MarlinUI::draw_status_screen() {
   void MenuItem_confirm::draw_select_screen(PGM_P const yes, PGM_P const no, const bool yesno, PGM_P const pref, const char * const string, PGM_P const suff) {
     if (!PanelDetected) return;
     ui.draw_select_screen_prompt(pref, string, suff);
-    lcd.setCursor(0, MIDDLE_Y);
     lcd.write(COLOR_EDIT);
-    lcd.write(yesno ? ' ' : '['); lcd_put_u8str_P(no); lcd.write(yesno ? ' ' : ']');
-    lcd.setCursor(LCD_WIDTH - utf8_strlen_P(yes) - 3, MIDDLE_Y);
-    lcd.write(yesno ? '[' : ' '); lcd_put_u8str_P(yes); lcd.write(yesno ? ']' : ' ');
+    if (no) {
+      lcd.setCursor(0, MIDDLE_Y);
+      lcd.write(yesno ? ' ' : '['); lcd_put_u8str_P(no); lcd.write(yesno ? ' ' : ']');
+    }
+    if (yes) {
+      lcd.setCursor(LCD_WIDTH - utf8_strlen_P(yes) - 3, MIDDLE_Y);
+      lcd.write(yesno ? '[' : ' '); lcd_put_u8str_P(yes); lcd.write(yesno ? ']' : ' ');
+    }
     lcd.print_line();
   }
 

commit ab46b7e2f298826a5512569d6e79bb59a7a6b8ea
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jan 25 15:33:03 2022 -0600

    üßë‚Äçüíª HAS_MARLINUI_MENU, HAS_MANUAL_MOVE_MENU

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index e9d3c73302..fef313e761 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -922,7 +922,7 @@ void MarlinUI::draw_status_screen() {
   lcd.print_screen();
 }
 
-#if HAS_LCD_MENU
+#if HAS_MARLINUI_MENU
 
   #include "../menu/menu.h"
 
@@ -1084,6 +1084,6 @@ void MarlinUI::draw_status_screen() {
 
   #endif // AUTO_BED_LEVELING_UBL
 
-#endif // HAS_LCD_MENU
+#endif // HAS_MARLINUI_MENU
 
 #endif // IS_TFTGLCD_PANEL

commit 24d1d3eb5cc4e7415e77393d35e40fb4124bc672
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jan 12 09:47:22 2022 -0600

    üí° Misc. cleanup, comments

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 420bd7cd66..e9d3c73302 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -265,7 +265,7 @@ void TFTGLCD::setContrast(uint16_t contrast) {
 extern volatile int8_t encoderDiff;
 
 // Read buttons and encoder states
-uint8_t MarlinUI::read_slow_buttons(void) {
+uint8_t MarlinUI::read_slow_buttons() {
   if (!PanelDetected)    return 0;
   #if ENABLED(TFTGLCD_PANEL_SPI)
     uint8_t b = 0;

commit eeffac697c5d7b69e01e38ed1602dbd21a366e93
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 25 23:52:41 2021 -0500

    üé® Apply F() to UTF-8/MMU2 string put

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 9617b3775d..420bd7cd66 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -399,9 +399,9 @@ static void center_text_P(PGM_P pstart, uint8_t y) {
     uint8_t indent = (LCD_WIDTH - 8) / 2;
     // symbols 217 (bottom right corner) and 218 (top left corner) are using for letters in some languages
     // and they should be moved to beginning ASCII table as special symbols
-    lcd.setCursor(indent, 0); lcd.write(TLC); lcd_put_u8str_P(PSTR("------"));  lcd.write(TRC);
-    lcd.setCursor(indent, 1); lcd.write(LR);  lcd_put_u8str_P(PSTR("Marlin"));  lcd.write(LR);
-    lcd.setCursor(indent, 2); lcd.write(BLC); lcd_put_u8str_P(PSTR("------"));  lcd.write(BRC);
+    lcd.setCursor(indent, 0); lcd.write(TLC); lcd_put_u8str(F("------"));  lcd.write(TRC);
+    lcd.setCursor(indent, 1); lcd.write(LR);  lcd_put_u8str(F("Marlin"));  lcd.write(LR);
+    lcd.setCursor(indent, 2); lcd.write(BLC); lcd_put_u8str(F("------"));  lcd.write(BRC);
     center_text_P(PSTR(SHORT_BUILD_VERSION), 3);
     center_text_P(PSTR(MARLIN_WEBSITE_URL), 4);
     picBits = ICON_LOGO;
@@ -437,7 +437,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   else if (axis_should_home(axis))
     while (const char c = *value++) lcd.write(c <= '.' ? c : '?');
   else if (NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING) && !axis_is_trusted(axis))
-    lcd_put_u8str_P(axis == Z_AXIS ? PSTR("       ") : PSTR("    "));
+    lcd_put_u8str(axis == Z_AXIS ? F("       ") : F("    "));
   else
     lcd_put_u8str(value);
 }
@@ -515,7 +515,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   FORCE_INLINE void _draw_cooler_status(const bool blink) {
     const celsius_t t2 = thermalManager.degTargetCooler();
 
-    lcd.setCursor(0, 5); lcd_put_u8str_P(PSTR("COOL"));
+    lcd.setCursor(0, 5); lcd_put_u8str(F("COOL"));
     lcd.setCursor(1, 6); lcd_put_u8str(i16tostr3rj(thermalManager.wholeDegCooler()));
     lcd.setCursor(1, 7);
 
@@ -543,7 +543,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 #if ENABLED(LASER_COOLANT_FLOW_METER)
 
   FORCE_INLINE void _draw_flowmeter_status() {
-    lcd.setCursor(5, 5); lcd_put_u8str_P(PSTR("FLOW"));
+    lcd.setCursor(5, 5); lcd_put_u8str(F("FLOW"));
     lcd.setCursor(7, 6); lcd_put_wchar('L');
     lcd.setCursor(6, 7); lcd_put_u8str(ftostr11ns(cooler.flowrate));
 
@@ -556,7 +556,7 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 #if ENABLED(I2C_AMMETER)
 
   FORCE_INLINE void _draw_ammeter_status() {
-    lcd.setCursor(10, 5); lcd_put_u8str_P(PSTR("ILAZ"));
+    lcd.setCursor(10, 5); lcd_put_u8str(F("ILAZ"));
     ammeter.read();
     lcd.setCursor(11, 6);
     if (ammeter.current <= 0.999f)
@@ -580,9 +580,9 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
 #if HAS_CUTTER
 
   FORCE_INLINE void _draw_cutter_status() {
-    lcd.setCursor(15, 5);  lcd_put_u8str_P(PSTR("CUTT"));
+    lcd.setCursor(15, 5);  lcd_put_u8str(F("CUTT"));
     #if CUTTER_UNIT_IS(RPM)
-      lcd.setCursor(16, 6);  lcd_put_u8str_P(PSTR("RPM"));
+      lcd.setCursor(16, 6);  lcd_put_u8str(F("RPM"));
       lcd.setCursor(15, 7);  lcd_put_u8str(ftostr31ns(float(cutter.unitPower) / 1000));
       lcd_put_wchar('K');
     #elif CUTTER_UNIT_IS(PERCENT)
@@ -604,14 +604,14 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     if (!PanelDetected) return;
     const uint8_t progress = ui._get_progress();
     #if ENABLED(SDSUPPORT)
-      lcd_put_u8str_P(PSTR("SD"));
+      lcd_put_u8str(F("SD"));
     #elif ENABLED(LCD_SET_PROGRESS_MANUALLY)
-      lcd_put_u8str_P(PSTR("P:"));
+      lcd_put_u8str(F("P:"));
     #endif
     if (progress)
       lcd.print(ui8tostr3rj(progress));
     else
-      lcd_put_u8str_P(PSTR("---"));
+      lcd_put_u8str(F("---"));
     lcd.write('%');
   }
 
@@ -643,9 +643,9 @@ void MarlinUI::draw_status_message(const bool blink) {
 
     // Alternate Status message and Filament display
     if (ELAPSED(millis(), next_filament_display)) {
-      lcd_put_u8str_P(PSTR("Dia "));
+      lcd_put_u8str(F("Dia "));
       lcd.print(ftostr12ns(filament_width_meas));
-      lcd_put_u8str_P(PSTR(" V"));
+      lcd_put_u8str(F(" V"));
       lcd.print(i16tostr3rj(100.0 * (
           parser.volumetric_enabled
             ? planner.volumetric_area_nominal / planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
@@ -802,7 +802,7 @@ void MarlinUI::draw_status_screen() {
   //
 
   lcd.setCursor(0, 1);
-  lcd_put_u8str_P(PSTR("FR")); lcd.print(i16tostr3rj(feedrate_percentage)); lcd.write('%');
+  lcd_put_u8str(F("FR")); lcd.print(i16tostr3rj(feedrate_percentage)); lcd.write('%');
 
   #if BOTH(SDSUPPORT, HAS_PRINT_PROGRESS)
     lcd.setCursor(LCD_WIDTH / 2 - 3, 1);
@@ -895,7 +895,7 @@ void MarlinUI::draw_status_screen() {
       #else
         #define FANX 17
       #endif
-      lcd.setCursor(FANX, 5); lcd_put_u8str_P(PSTR("FAN"));
+      lcd.setCursor(FANX, 5); lcd_put_u8str(F("FAN"));
       lcd.setCursor(FANX + 1, 6); lcd.write('%');
       lcd.setCursor(FANX, 7);
       lcd.print(i16tostr3rj(per));
@@ -931,7 +931,7 @@ void MarlinUI::draw_status_screen() {
     void MarlinUI::draw_hotend_status(const uint8_t row, const uint8_t extruder) {
       if (!PanelDetected) return;
       lcd.setCursor((LCD_WIDTH - 14) / 2, row + 1);
-      lcd.write(LCD_STR_THERMOMETER[0]); lcd_put_u8str_P(PSTR(" E")); lcd.write('1' + extruder); lcd.write(' ');
+      lcd.write(LCD_STR_THERMOMETER[0]); lcd_put_u8str(F(" E")); lcd.write('1' + extruder); lcd.write(' ');
       lcd.print(i16tostr3rj(thermalManager.wholeDegHotend(extruder))); lcd.write(LCD_STR_DEGREE[0]); lcd.write('/');
       lcd.print(i16tostr3rj(thermalManager.degTargetHotend(extruder))); lcd.write(LCD_STR_DEGREE[0]);
       lcd.print_line();
@@ -1064,18 +1064,18 @@ void MarlinUI::draw_status_screen() {
       *fb++ = ',';  lcd.print(i16tostr3left(y_plot)); *fb = ')';
 
       // Show all values
-      lcd.setCursor(_LCD_W_POS, 1); lcd_put_u8str_P(PSTR("X:"));
+      lcd.setCursor(_LCD_W_POS, 1); lcd_put_u8str(F("X:"));
       lcd.print(ftostr52(LOGICAL_X_POSITION(pgm_read_float(&ubl._mesh_index_to_xpos[x_plot]))));
-      lcd.setCursor(_LCD_W_POS, 2); lcd_put_u8str_P(PSTR("Y:"));
+      lcd.setCursor(_LCD_W_POS, 2); lcd_put_u8str(F("Y:"));
       lcd.print(ftostr52(LOGICAL_Y_POSITION(pgm_read_float(&ubl._mesh_index_to_ypos[y_plot]))));
 
       // Show the location value
-      lcd.setCursor(_LCD_W_POS, 3); lcd_put_u8str_P(PSTR("Z:"));
+      lcd.setCursor(_LCD_W_POS, 3); lcd_put_u8str(F("Z:"));
 
       if (!isnan(ubl.z_values[x_plot][y_plot]))
         lcd.print(ftostr43sign(ubl.z_values[x_plot][y_plot]));
       else
-        lcd_put_u8str_P(PSTR(" -----"));
+        lcd_put_u8str(F(" -----"));
 
       center_text_P(GET_TEXT(MSG_UBL_FINE_TUNE_MESH), 8);
 

commit 1ac7a56a823b5012250dd7259a9a7a46d3bfcde5
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Sat Sep 25 05:59:43 2021 -0500

    üêõ E3V2 Brightness followup (#22821)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 712e76e86f..9617b3775d 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -376,12 +376,9 @@ void MarlinUI::clear_lcd() {
   lcd.clear_buffer();
 }
 
-int16_t MarlinUI::contrast; // Initialized by settings.load()
-
-void MarlinUI::set_contrast(const int16_t value) {
-  contrast = constrain(value, LCD_CONTRAST_MIN, LCD_CONTRAST_MAX);
-  lcd.setContrast(contrast);
-}
+#if HAS_LCD_CONTRAST
+  void MarlinUI::_set_contrast() { lcd.setContrast(contrast); }
+#endif
 
 static void center_text_P(PGM_P pstart, uint8_t y) {
   uint8_t len = utf8_strlen_P(pstart);

commit afca6e745932d295b88d37fa9bd4274e22705b0b
Author: luzpaz <luzpaz@users.noreply.github.com>
Date:   Tue Aug 3 20:02:34 2021 -0400

    üêõ Spellcheck comments (#22496)
    
    codespell -q 3 --builtin=clear,rare,informal,code -S ./Marlin/src/lcd/language -L alo,amin,endcode,stdio,uint

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 5991fc3b8b..712e76e86f 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -98,7 +98,7 @@ TFTGLCD lcd;
 #define COLOR_EDIT      '#'
 #define COLOR_ERROR     '!'
 
-#ifdef CONVERT_TO_EXT_ASCII   //use standart pseudographic symbols in ASCII table
+#ifdef CONVERT_TO_EXT_ASCII   //use standard pseudographic symbols in ASCII table
   #define LR            179   //vertical line
   #define TRC           191   //top right corner
   #define BLC           192   //bottom left corner
@@ -401,7 +401,7 @@ static void center_text_P(PGM_P pstart, uint8_t y) {
     //
     uint8_t indent = (LCD_WIDTH - 8) / 2;
     // symbols 217 (bottom right corner) and 218 (top left corner) are using for letters in some languages
-    // and they should be moved to begining ASCII table as spetial symbols
+    // and they should be moved to beginning ASCII table as special symbols
     lcd.setCursor(indent, 0); lcd.write(TLC); lcd_put_u8str_P(PSTR("------"));  lcd.write(TRC);
     lcd.setCursor(indent, 1); lcd.write(LR);  lcd_put_u8str_P(PSTR("Marlin"));  lcd.write(LR);
     lcd.setCursor(indent, 2); lcd.write(BLC); lcd_put_u8str_P(PSTR("------"));  lcd.write(BRC);
@@ -733,7 +733,7 @@ Equal to 20x10 text LCD
 |                    |
 |  HE  BED  FAN      |
 | ttc  ttc   %       | ttc - current temperature
-| tts  tts  %%%      | tts - setted temperature, %%% - percent for FAN
+| tts  tts  %%%      | tts - set temperature, %%% - percent for FAN
 | ICO  ICO  ICO  ICO | ICO - icon 48x48, placed in 2 text lines
 | ICO  ICO  ICO  ICO | ICO
 

commit 9bb5b10c0c9cf5a61d2bfb9dfdb6cfe210b6002b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jul 31 05:32:13 2021 -0500

    üöö Relocate and adjust DWIN E3V2 (#22471)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 3324819955..5991fc3b8b 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -791,9 +791,10 @@ void MarlinUI::draw_status_screen() {
   //
 
   lcd.setCursor(0, 0);
-  _draw_axis_value(X_AXIS, ftostr4sign(LOGICAL_X_POSITION(current_position.x)), blink); lcd.write(' ');
-  _draw_axis_value(Y_AXIS, ftostr4sign(LOGICAL_Y_POSITION(current_position.y)), blink); lcd.write(' ');
-  _draw_axis_value(Z_AXIS, ftostr52sp(LOGICAL_Z_POSITION(current_position.z)), blink);
+  const xyz_pos_t lpos = current_position.asLogical();
+  _draw_axis_value(X_AXIS, ftostr4sign(lpos.x), blink); lcd.write(' ');
+  _draw_axis_value(Y_AXIS, ftostr4sign(lpos.y), blink); lcd.write(' ');
+  _draw_axis_value(Z_AXIS, ftostr52sp(lpos.z), blink);
 
   #if HAS_LEVELING && !HAS_HEATED_BED
     lcd.write(planner.leveling_active || blink ? '_' : ' ');

commit c2f72cde1024538a6026b9db794fcd4f6b7ca07a
Author: Serhiy-K <52166448+Serhiy-K@users.noreply.github.com>
Date:   Mon Jul 19 05:39:01 2021 +0300

    ‚ú® Laser support for TFT GLCD (#22391)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index edb17b69c0..3324819955 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -57,6 +57,18 @@
   #include "../../gcode/parser.h"
 #endif
 
+#if EITHER(HAS_COOLER, LASER_COOLANT_FLOW_METER)
+  #include "../../feature/cooler.h"
+#endif
+
+#if ENABLED(I2C_AMMETER)
+  #include "../../feature/ammeter.h"
+#endif
+
+#if HAS_CUTTER
+  #include "../../feature/spindle_laser.h"
+#endif
+
 #if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
@@ -64,12 +76,12 @@
 TFTGLCD lcd;
 
 #define ICON_LOGO       B00000001
-#define ICON_TEMP1      B00000010    //hotend 1
-#define ICON_TEMP2      B00000100    //hotend 2
-#define ICON_TEMP3      B00001000    //hotend 3
+#define ICON_TEMP1      B00000010    // Hotend 1
+#define ICON_TEMP2      B00000100    // Hotend 2
+#define ICON_TEMP3      B00001000    // Hotend 3
 #define ICON_BED        B00010000
 #define ICON_FAN        B00100000
-#define ICON_HOT        B01000000    //when any T > 50deg
+#define ICON_HOT        B01000000    // When any T > 50deg
 #define PIC_MASK        0x7F
 
 // LEDs not used, for compatibility with Smoothieware
@@ -433,69 +445,161 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
     lcd_put_u8str(value);
 }
 
-FORCE_INLINE void _draw_heater_status(const heater_id_t heater_id, const char *prefix, const bool blink) {
-  uint8_t pic_hot_bits;
-  #if HAS_HEATED_BED
-    const bool isBed = heater_id < 0;
-    const celsius_t t1 = (isBed ? thermalManager.wholeDegBed() : thermalManager.wholeDegHotend(heater_id)),
-                    t2 = (isBed ? thermalManager.degTargetBed() : thermalManager.degTargetHotend(heater_id));
-  #else
-    const celsius_t t1 = thermalManager.wholeDegHotend(heater_id), t2 = thermalManager.degTargetHotend(heater_id);
-  #endif
+#if HAS_HOTEND || HAS_HEATED_BED
 
-  #if HOTENDS < 2
-    if (heater_id == H_E0) {
-      lcd.setCursor(2, 5);  lcd.print(prefix); //HE
-      lcd.setCursor(1, 6);  lcd.print(i16tostr3rj(t1));
-      lcd.setCursor(1, 7);
-    }
-    else {
-      lcd.setCursor(6, 5);  lcd.print(prefix); //BED
-      lcd.setCursor(6, 6);  lcd.print(i16tostr3rj(t1));
-      lcd.setCursor(6, 7);
+  FORCE_INLINE void _draw_heater_status(const heater_id_t heater_id, const char *prefix, const bool blink) {
+    uint8_t pic_hot_bits;
+    #if HAS_HEATED_BED
+      const bool isBed = heater_id < 0;
+      const celsius_t t1 = (isBed ? thermalManager.wholeDegBed() : thermalManager.wholeDegHotend(heater_id)),
+                      t2 = (isBed ? thermalManager.degTargetBed() : thermalManager.degTargetHotend(heater_id));
+    #else
+      const celsius_t t1 = thermalManager.wholeDegHotend(heater_id), t2 = thermalManager.degTargetHotend(heater_id);
+    #endif
+
+    #if HOTENDS < 2
+      if (heater_id == H_E0) {
+        lcd.setCursor(2, 5);  lcd.print(prefix); //HE
+        lcd.setCursor(1, 6);  lcd.print(i16tostr3rj(t1));
+        lcd.setCursor(1, 7);
+      }
+      else {
+        lcd.setCursor(6, 5);  lcd.print(prefix); //BED
+        lcd.setCursor(6, 6);  lcd.print(i16tostr3rj(t1));
+        lcd.setCursor(6, 7);
+      }
+    #else
+      if (heater_id > H_BED) {
+        lcd.setCursor(heater_id * 4, 5);  lcd.print(prefix); // HE1 or HE2 or HE3
+        lcd.setCursor(heater_id * 4, 6);  lcd.print(i16tostr3rj(t1));
+        lcd.setCursor(heater_id * 4, 7);
+      }
+      else {
+        lcd.setCursor(13, 5);  lcd.print(prefix); //BED
+        lcd.setCursor(13, 6);  lcd.print(i16tostr3rj(t1));
+        lcd.setCursor(13, 7);
+      }
+    #endif // HOTENDS <= 1
+
+    #if !HEATER_IDLE_HANDLER
+      UNUSED(blink);
+    #else
+      if (!blink && thermalManager.heater_idle[thermalManager.idle_index_for_id(heater_id)].timed_out) {
+        lcd.write(' ');
+        if (t2 >= 10) lcd.write(' ');
+        if (t2 >= 100) lcd.write(' ');
+      }
+      else
+    #endif // !HEATER_IDLE_HANDLER
+        lcd.print(i16tostr3rj(t2));
+
+    switch (heater_id) {
+      case H_BED: pic_hot_bits = ICON_BED;   break;
+      case H_E0:  pic_hot_bits = ICON_TEMP1; break;
+      case H_E1:  pic_hot_bits = ICON_TEMP2; break;
+      case H_E2:  pic_hot_bits = ICON_TEMP3;
+      default:    break;
     }
-  #else
-    if (heater_id > H_BED) {
-      lcd.setCursor(heater_id * 4, 5);  lcd.print(prefix); // HE1 or HE2 or HE3
-      lcd.setCursor(heater_id * 4, 6);  lcd.print(i16tostr3rj(t1));
-      lcd.setCursor(heater_id * 4, 7);
+
+    if (t2) picBits |= pic_hot_bits;
+    else    picBits &= ~pic_hot_bits;
+
+    if (t1 > 50)  hotBits |= pic_hot_bits;
+    else          hotBits &= ~pic_hot_bits;
+
+    if (hotBits)  picBits |= ICON_HOT;
+    else          picBits &= ~ICON_HOT;
+  }
+
+#endif // HAS_HOTEND || HAS_HEATED_BED
+
+#if HAS_COOLER
+
+  FORCE_INLINE void _draw_cooler_status(const bool blink) {
+    const celsius_t t2 = thermalManager.degTargetCooler();
+
+    lcd.setCursor(0, 5); lcd_put_u8str_P(PSTR("COOL"));
+    lcd.setCursor(1, 6); lcd_put_u8str(i16tostr3rj(thermalManager.wholeDegCooler()));
+    lcd.setCursor(1, 7);
+
+    #if !HEATER_IDLE_HANDLER
+      UNUSED(blink);
+    #else
+      if (!blink && thermalManager.heater_idle[thermalManager.idle_index_for_id(heater_id)].timed_out) {
+        lcd_put_wchar(' ');
+        if (t2 >= 10) lcd_put_wchar(' ');
+        if (t2 >= 100) lcd_put_wchar(' ');
+      }
+      else
+    #endif
+        lcd_put_u8str(i16tostr3left(t2));
+
+    lcd_put_wchar(' ');
+    if (t2 < 10) lcd_put_wchar(' ');
+
+    if (t2) picBits |= ICON_TEMP1;
+    else    picBits &= ~ICON_TEMP1;
+  }
+
+#endif // HAS_COOLER
+
+#if ENABLED(LASER_COOLANT_FLOW_METER)
+
+  FORCE_INLINE void _draw_flowmeter_status() {
+    lcd.setCursor(5, 5); lcd_put_u8str_P(PSTR("FLOW"));
+    lcd.setCursor(7, 6); lcd_put_wchar('L');
+    lcd.setCursor(6, 7); lcd_put_u8str(ftostr11ns(cooler.flowrate));
+
+    if (cooler.flowrate)  picBits |= ICON_FAN;
+    else                  picBits &= ~ICON_FAN;
+  }
+
+#endif
+
+#if ENABLED(I2C_AMMETER)
+
+  FORCE_INLINE void _draw_ammeter_status() {
+    lcd.setCursor(10, 5); lcd_put_u8str_P(PSTR("ILAZ"));
+    ammeter.read();
+    lcd.setCursor(11, 6);
+    if (ammeter.current <= 0.999f)
+    {
+      lcd_put_u8str("mA");
+      lcd.setCursor(10, 7);
+      lcd_put_wchar(' '); lcd_put_u8str(ui16tostr3rj(uint16_t(ammeter.current * 1000 + 0.5f)));
     }
     else {
-      lcd.setCursor(13, 5);  lcd.print(prefix); //BED
-      lcd.setCursor(13, 6);  lcd.print(i16tostr3rj(t1));
-      lcd.setCursor(13, 7);
+      lcd_put_u8str(" A");
+      lcd.setCursor(10, 7);
+      lcd_put_u8str(ftostr12ns(ammeter.current));
     }
-  #endif // HOTENDS <= 1
 
-  #if !HEATER_IDLE_HANDLER
-    UNUSED(blink);
-  #else
-    if (!blink && thermalManager.heater_idle[thermalManager.idle_index_for_id(heater_id)].timed_out) {
-      lcd.write(' ');
-      if (t2 >= 10) lcd.write(' ');
-      if (t2 >= 100) lcd.write(' ');
-    }
-    else
-  #endif // !HEATER_IDLE_HANDLER
-      lcd.print(i16tostr3rj(t2));
-
-  switch (heater_id) {
-    case H_BED: pic_hot_bits = ICON_BED;   break;
-    case H_E0:  pic_hot_bits = ICON_TEMP1; break;
-    case H_E1:  pic_hot_bits = ICON_TEMP2; break;
-    case H_E2:  pic_hot_bits = ICON_TEMP3;
-    default:    break;
+    if (ammeter.current)  picBits |= ICON_BED;
+    else                  picBits &= ~ICON_BED;
   }
 
-  if (t2) picBits |= pic_hot_bits;
-  else    picBits &= ~pic_hot_bits;
+#endif // I2C_AMMETER
 
-  if (t1 > 50)  hotBits |= pic_hot_bits;
-  else          hotBits &= ~pic_hot_bits;
+#if HAS_CUTTER
 
-  if (hotBits)  picBits |= ICON_HOT;
-  else          picBits &= ~ICON_HOT;
-}
+  FORCE_INLINE void _draw_cutter_status() {
+    lcd.setCursor(15, 5);  lcd_put_u8str_P(PSTR("CUTT"));
+    #if CUTTER_UNIT_IS(RPM)
+      lcd.setCursor(16, 6);  lcd_put_u8str_P(PSTR("RPM"));
+      lcd.setCursor(15, 7);  lcd_put_u8str(ftostr31ns(float(cutter.unitPower) / 1000));
+      lcd_put_wchar('K');
+    #elif CUTTER_UNIT_IS(PERCENT)
+      lcd.setCursor(17, 6);  lcd_put_wchar('%');
+      lcd.setCursor(18, 7);  lcd_put_u8str(cutter_power2str(cutter.unitPower));
+    #else
+      lcd.setCursor(17, 7);  lcd_put_u8str(cutter_power2str(cutter.unitPower));
+    #endif
+
+    if (cutter.unitPower) picBits |= ICON_HOT;
+    else                  picBits &= ~ICON_HOT;
+  }
+
+#endif // HAS_CUTTER
 
 #if HAS_PRINT_PROGRESS
 
@@ -533,7 +637,7 @@ FORCE_INLINE void _draw_heater_status(const heater_id_t heater_id, const char *p
     }
   }
 
-#endif
+#endif // LCD_PROGRESS_BAR
 
 void MarlinUI::draw_status_message(const bool blink) {
   if (!PanelDetected) return;
@@ -648,6 +752,19 @@ or
 
 or
 
+|X 000 Y 000 Z 000.00|
+|FR100% SD100% C--:--|
+| Progress bar line  |
+|Status message      |
+|                    |
+|COOL FLOW ILAZ CUTT |
+| ttc   L   mA   RPM |
+| tts  f.f  aaa rr.rK|
+| ICO  ICO  ICO  ICO |
+| ICO  ICO  ICO  ICO |
+
+or
+
 Equal to 24x10 text LCD
 
 |X 000 Y 000 Z 000.00    |
@@ -745,50 +862,61 @@ void MarlinUI::draw_status_screen() {
   #endif
 
   //
-  // Line 6..8 Temperatures, FAN
+  // Line 6..8 Temperatures, FAN for printer or Cooler, Flowmetter, Ampermeter, Cutter for laser/spindle
   //
 
-  #if HOTENDS < 2
-    _draw_heater_status(H_E0, "HE", blink);    // Hotend Temperature
-  #else
-    _draw_heater_status(H_E0, "HE1", blink);   // Hotend 1 Temperature
-    _draw_heater_status(H_E1, "HE2", blink);   // Hotend 2 Temperature
-    #if HOTENDS > 2
-      _draw_heater_status(H_E2, "HE3", blink); // Hotend 3 Temperature
-    #endif
-  #endif
+  #if HAS_HOTEND
 
-  #if HAS_HEATED_BED
-    #if HAS_LEVELING
-      _draw_heater_status(H_BED, (planner.leveling_active && blink ? "___" : "BED"), blink);
+    #if HOTENDS < 2
+      _draw_heater_status(H_E0, "HE", blink);    // Hotend Temperature
     #else
-      _draw_heater_status(H_BED, "BED", blink);
+      _draw_heater_status(H_E0, "HE1", blink);   // Hotend 1 Temperature
+      _draw_heater_status(H_E1, "HE2", blink);   // Hotend 2 Temperature
+      #if HOTENDS > 2
+        _draw_heater_status(H_E2, "HE3", blink); // Hotend 3 Temperature
+      #endif
     #endif
-  #endif
 
-  #if HAS_FAN
-    uint16_t spd = thermalManager.fan_speed[0];
-    #if ENABLED(ADAPTIVE_FAN_SLOWING)
-      if (!blink) spd = thermalManager.scaledFanSpeed(0, spd);
+    #if HAS_HEATED_BED
+      #if HAS_LEVELING
+        _draw_heater_status(H_BED, (planner.leveling_active && blink ? "___" : "BED"), blink);
+      #else
+        _draw_heater_status(H_BED, "BED", blink);
+      #endif
     #endif
-    uint16_t per = thermalManager.pwmToPercent(spd);
 
-    #if HOTENDS < 2
-      #define FANX 11
-    #else
-      #define FANX 17
-    #endif
-    lcd.setCursor(FANX, 5); lcd_put_u8str_P(PSTR("FAN"));
-    lcd.setCursor(FANX + 1, 6); lcd.write('%');
-    lcd.setCursor(FANX, 7);
-    lcd.print(i16tostr3rj(per));
+    #if HAS_FAN
+      uint16_t spd = thermalManager.fan_speed[0];
+      #if ENABLED(ADAPTIVE_FAN_SLOWING)
+        if (!blink) spd = thermalManager.scaledFanSpeed(0, spd);
+      #endif
+      uint16_t per = thermalManager.pwmToPercent(spd);
 
-    if (TERN0(HAS_FAN0, thermalManager.fan_speed[0]) || TERN0(HAS_FAN1, thermalManager.fan_speed[1]) || TERN0(HAS_FAN2, thermalManager.fan_speed[2]))
-      picBits |= ICON_FAN;
-    else
-      picBits &= ~ICON_FAN;
+      #if HOTENDS < 2
+        #define FANX 11
+      #else
+        #define FANX 17
+      #endif
+      lcd.setCursor(FANX, 5); lcd_put_u8str_P(PSTR("FAN"));
+      lcd.setCursor(FANX + 1, 6); lcd.write('%');
+      lcd.setCursor(FANX, 7);
+      lcd.print(i16tostr3rj(per));
+
+      if (TERN0(HAS_FAN0, thermalManager.fan_speed[0]) || TERN0(HAS_FAN1, thermalManager.fan_speed[1]) || TERN0(HAS_FAN2, thermalManager.fan_speed[2]))
+        picBits |= ICON_FAN;
+      else
+        picBits &= ~ICON_FAN;
 
-  #endif // HAS_FAN
+    #endif // HAS_FAN
+
+  #else
+
+    TERN_(HAS_COOLER, _draw_cooler_status(blink));
+    TERN_(LASER_COOLANT_FLOW_METER, _draw_flowmeter_status());
+    TERN_(I2C_AMMETER, _draw_ammeter_status());
+    TERN_(HAS_CUTTER, _draw_cutter_status());
+
+  #endif
 
   //
   // Line 9, 10 - icons

commit a29aefc9c0c02c23862fded29e3f950ead339238
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 24 01:29:30 2021 -0500

    Move last bootscreen delay to end of setup (#21665)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 31cdc4ac30..edb17b69c0 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -397,7 +397,10 @@ static void center_text_P(PGM_P pstart, uint8_t y) {
     center_text_P(PSTR(MARLIN_WEBSITE_URL), 4);
     picBits = ICON_LOGO;
     lcd.print_screen();
-    safe_delay(1500);
+  }
+
+  void MarlinUI::bootscreen_completion(const millis_t sofar) {
+    if ((BOOTSCREEN_TIMEOUT) > sofar) safe_delay((BOOTSCREEN_TIMEOUT) - sofar);
   }
 
 #endif // SHOW_BOOTSCREEN

commit c4620bb5285438e41fa4c39229aa2a39859877ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 23 20:19:23 2021 -0500

    Add whole-degree accessors, simplify some temperature-related features (#21685)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index ddc33c4923..31cdc4ac30 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -434,10 +434,10 @@ FORCE_INLINE void _draw_heater_status(const heater_id_t heater_id, const char *p
   uint8_t pic_hot_bits;
   #if HAS_HEATED_BED
     const bool isBed = heater_id < 0;
-    const celsius_t t1 = (isBed ? thermalManager.degBed() : thermalManager.degHotend(heater_id)),
+    const celsius_t t1 = (isBed ? thermalManager.wholeDegBed() : thermalManager.wholeDegHotend(heater_id)),
                     t2 = (isBed ? thermalManager.degTargetBed() : thermalManager.degTargetHotend(heater_id));
   #else
-    const celsius_t t1 = thermalManager.degHotend(heater_id), t2 = thermalManager.degTargetHotend(heater_id);
+    const celsius_t t1 = thermalManager.wholeDegHotend(heater_id), t2 = thermalManager.degTargetHotend(heater_id);
   #endif
 
   #if HOTENDS < 2
@@ -803,7 +803,7 @@ void MarlinUI::draw_status_screen() {
       if (!PanelDetected) return;
       lcd.setCursor((LCD_WIDTH - 14) / 2, row + 1);
       lcd.write(LCD_STR_THERMOMETER[0]); lcd_put_u8str_P(PSTR(" E")); lcd.write('1' + extruder); lcd.write(' ');
-      lcd.print(i16tostr3rj(thermalManager.degHotend(extruder)));       lcd.write(LCD_STR_DEGREE[0]); lcd.write('/');
+      lcd.print(i16tostr3rj(thermalManager.wholeDegHotend(extruder))); lcd.write(LCD_STR_DEGREE[0]); lcd.write('/');
       lcd.print(i16tostr3rj(thermalManager.degTargetHotend(extruder))); lcd.write(LCD_STR_DEGREE[0]);
       lcd.print_line();
     }

commit 528b9bd8729656d7ebcd3dc7898ceddc2f377354
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Apr 16 02:43:59 2021 -0500

    Revert experimental NAN patch
    
    Hold changes from #21575 (24a095c) for more testing.

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 6edde2c604..ddc33c4923 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -943,7 +943,7 @@ void MarlinUI::draw_status_screen() {
       // Show the location value
       lcd.setCursor(_LCD_W_POS, 3); lcd_put_u8str_P(PSTR("Z:"));
 
-      if (!ISNAN(ubl.z_values[x_plot][y_plot]))
+      if (!isnan(ubl.z_values[x_plot][y_plot]))
         lcd.print(ftostr43sign(ubl.z_values[x_plot][y_plot]));
       else
         lcd_put_u8str_P(PSTR(" -----"));

commit cc5297d637d2a0a784e336210c366baf250785d0
Author: XDA-Bam <1209896+XDA-Bam@users.noreply.github.com>
Date:   Wed Apr 14 11:42:04 2021 +0200

    Space-separate scrolling Status Message (#21523)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 5b48cb1ac8..6edde2c604 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -581,12 +581,15 @@ void MarlinUI::draw_status_message(const bool blink) {
 
       // If the remaining string doesn't completely fill the screen
       if (rlen < LCD_WIDTH) {
-        lcd.write('.');                       // Always at 1+ spaces left, draw a dot
         uint8_t chars = LCD_WIDTH - rlen;     // Amount of space left in characters
-        if (--chars) {                        // Draw a second dot if there's space
-          lcd.write('.');
-          if (--chars)
-            lcd_put_u8str_max(status_message, chars); // Print a second copy of the message
+        lcd.write(' ');                       // Always at 1+ spaces left, draw a space
+        if (--chars) {                        // Draw a second space if there's room
+          lcd.write(' ');
+          if (--chars) {                      // Draw a third space if there's room
+            lcd.write(' ');
+            if (--chars)
+              lcd_put_u8str_max(status_message, chars); // Print a second copy of the message
+          }
         }
       }
       if (last_blink != blink) {

commit fd99ea09ecb41bc1dfc5e4109e0d6c7de1f87424
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Apr 13 04:00:39 2021 -0500

    Add fan percent accessors

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index faac398a4a..5b48cb1ac8 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -750,7 +750,7 @@ void MarlinUI::draw_status_screen() {
     #if HOTENDS > 2
       _draw_heater_status(H_E2, "HE3", blink); // Hotend 3 Temperature
     #endif
-  #endif // HOTENDS <= 1
+  #endif
 
   #if HAS_HEATED_BED
     #if HAS_LEVELING
@@ -758,16 +758,15 @@ void MarlinUI::draw_status_screen() {
     #else
       _draw_heater_status(H_BED, "BED", blink);
     #endif
-  #endif // HAS_HEATED_BED
+  #endif
 
   #if HAS_FAN
     uint16_t spd = thermalManager.fan_speed[0];
-
     #if ENABLED(ADAPTIVE_FAN_SLOWING)
       if (!blink) spd = thermalManager.scaledFanSpeed(0, spd);
     #endif
+    uint16_t per = thermalManager.pwmToPercent(spd);
 
-    uint16_t per = thermalManager.fanPercent(spd);
     #if HOTENDS < 2
       #define FANX 11
     #else

commit 4a1d2d816c4dff8b3c3e472f7b8022362e1ad109
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 12 19:34:31 2021 -0500

    Update old-style axis indexes

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index cc54354ed1..faac398a4a 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -668,9 +668,9 @@ void MarlinUI::draw_status_screen() {
   //
 
   lcd.setCursor(0, 0);
-  _draw_axis_value(X_AXIS, ftostr4sign(LOGICAL_X_POSITION(current_position[X_AXIS])), blink); lcd.write(' ');
-  _draw_axis_value(Y_AXIS, ftostr4sign(LOGICAL_Y_POSITION(current_position[Y_AXIS])), blink); lcd.write(' ');
-  _draw_axis_value(Z_AXIS, ftostr52sp(LOGICAL_Z_POSITION(current_position[Z_AXIS])), blink);
+  _draw_axis_value(X_AXIS, ftostr4sign(LOGICAL_X_POSITION(current_position.x)), blink); lcd.write(' ');
+  _draw_axis_value(Y_AXIS, ftostr4sign(LOGICAL_Y_POSITION(current_position.y)), blink); lcd.write(' ');
+  _draw_axis_value(Z_AXIS, ftostr52sp(LOGICAL_Z_POSITION(current_position.z)), blink);
 
   #if HAS_LEVELING && !HAS_HEATED_BED
     lcd.write(planner.leveling_active || blink ? '_' : ' ');

commit 24a095c5c14b60bcbffc2807d2c8cc8e9af46e90
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Apr 12 16:49:53 2021 -0500

    Reduce math library code size by 3.4KB (#21575)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 6976bfed22..cc54354ed1 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -941,7 +941,7 @@ void MarlinUI::draw_status_screen() {
       // Show the location value
       lcd.setCursor(_LCD_W_POS, 3); lcd_put_u8str_P(PSTR("Z:"));
 
-      if (!isnan(ubl.z_values[x_plot][y_plot]))
+      if (!ISNAN(ubl.z_values[x_plot][y_plot]))
         lcd.print(ftostr43sign(ubl.z_values[x_plot][y_plot]));
       else
         lcd_put_u8str_P(PSTR(" -----"));

commit 3b73b115ca9366f0155986b717d4c85c31ed2f80
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Mar 29 20:36:37 2021 -0500

    Apply pointer formatting

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index e645a76611..6976bfed22 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -835,7 +835,7 @@ void MarlinUI::draw_status_screen() {
   }
 
   // Draw a menu item with a (potentially) editable value
-  void MenuEditItemBase::draw(const bool sel, const uint8_t row, PGM_P const pstr, const char* const data, const bool pgm) {
+  void MenuEditItemBase::draw(const bool sel, const uint8_t row, PGM_P const pstr, const char * const data, const bool pgm) {
     if (!PanelDetected) return;
     const uint8_t vlen = data ? (pgm ? utf8_strlen_P(data) : utf8_strlen(data)) : 0;
     lcd.setCursor(0, row);
@@ -851,7 +851,7 @@ void MarlinUI::draw_status_screen() {
 
   // Low-level draw_edit_screen can be used to draw an edit screen from anyplace
   // This line moves to the last line of the screen for UBL plot screen on the panel side
-  void MenuEditItemBase::draw_edit_screen(PGM_P const pstr, const char* const value/*=nullptr*/) {
+  void MenuEditItemBase::draw_edit_screen(PGM_P const pstr, const char * const value/*=nullptr*/) {
     if (!PanelDetected) return;
     ui.encoder_direction_normal();
     const uint8_t y = TERN0(AUTO_BED_LEVELING_UBL, ui.external_control) ? LCD_HEIGHT - 1 : MIDDLE_Y;

commit 30e7e2c2766d7dbbe0144344287994f1969dfadd
Author: Martijn Bosgraaf <drywfiltiarn+github@gmail.com>
Date:   Wed Mar 24 18:21:11 2021 +0100

    Extend M106/M107 for better laser module support (#16082)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index fd72f94862..e645a76611 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -760,7 +760,7 @@ void MarlinUI::draw_status_screen() {
     #endif
   #endif // HAS_HEATED_BED
 
-  #if FAN_COUNT > 0
+  #if HAS_FAN
     uint16_t spd = thermalManager.fan_speed[0];
 
     #if ENABLED(ADAPTIVE_FAN_SLOWING)
@@ -783,7 +783,7 @@ void MarlinUI::draw_status_screen() {
     else
       picBits &= ~ICON_FAN;
 
-  #endif // FAN_COUNT > 0
+  #endif // HAS_FAN
 
   //
   // Line 9, 10 - icons

commit e5ff55a1be7646b6159e6dedac50bfbe57e6dfa0
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 24 04:11:43 2021 -0500

    Add typedef celsius_t (#21374)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 44128cc9f8..fd72f94862 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -434,33 +434,32 @@ FORCE_INLINE void _draw_heater_status(const heater_id_t heater_id, const char *p
   uint8_t pic_hot_bits;
   #if HAS_HEATED_BED
     const bool isBed = heater_id < 0;
-    const float t1 = (isBed ? thermalManager.degBed() : thermalManager.degHotend(heater_id));
-    const float t2 = (isBed ? thermalManager.degTargetBed() : thermalManager.degTargetHotend(heater_id));
+    const celsius_t t1 = (isBed ? thermalManager.degBed() : thermalManager.degHotend(heater_id)),
+                    t2 = (isBed ? thermalManager.degTargetBed() : thermalManager.degTargetHotend(heater_id));
   #else
-    const float t1 = thermalManager.degHotend(heater_id);
-    const float t2 = thermalManager.degTargetHotend(heater_id);
+    const celsius_t t1 = thermalManager.degHotend(heater_id), t2 = thermalManager.degTargetHotend(heater_id);
   #endif
 
   #if HOTENDS < 2
     if (heater_id == H_E0) {
       lcd.setCursor(2, 5);  lcd.print(prefix); //HE
-      lcd.setCursor(1, 6);  lcd.print(i16tostr3rj(t1 + 0.5));
+      lcd.setCursor(1, 6);  lcd.print(i16tostr3rj(t1));
       lcd.setCursor(1, 7);
     }
     else {
       lcd.setCursor(6, 5);  lcd.print(prefix); //BED
-      lcd.setCursor(6, 6);  lcd.print(i16tostr3rj(t1 + 0.5));
+      lcd.setCursor(6, 6);  lcd.print(i16tostr3rj(t1));
       lcd.setCursor(6, 7);
     }
   #else
     if (heater_id > H_BED) {
-      lcd.setCursor(heater_id * 4, 5);  lcd.print(prefix); //HE1 or HE2 or HE3
-      lcd.setCursor(heater_id * 4, 6);  lcd.print(i16tostr3rj(t1 + 0.5));
+      lcd.setCursor(heater_id * 4, 5);  lcd.print(prefix); // HE1 or HE2 or HE3
+      lcd.setCursor(heater_id * 4, 6);  lcd.print(i16tostr3rj(t1));
       lcd.setCursor(heater_id * 4, 7);
     }
     else {
       lcd.setCursor(13, 5);  lcd.print(prefix); //BED
-      lcd.setCursor(13, 6);  lcd.print(i16tostr3rj(t1 + 0.5));
+      lcd.setCursor(13, 6);  lcd.print(i16tostr3rj(t1));
       lcd.setCursor(13, 7);
     }
   #endif // HOTENDS <= 1
@@ -475,7 +474,7 @@ FORCE_INLINE void _draw_heater_status(const heater_id_t heater_id, const char *p
     }
     else
   #endif // !HEATER_IDLE_HANDLER
-      lcd.print(i16tostr3rj(t2 + 0.5));
+      lcd.print(i16tostr3rj(t2));
 
   switch (heater_id) {
     case H_BED: pic_hot_bits = ICON_BED;   break;

commit 4327b5c1b0df34f56d3f2274c6f114b6720c685f
Author: Serhiy-K <52166448+Serhiy-K@users.noreply.github.com>
Date:   Mon Jan 11 07:59:42 2021 +0200

    Fixes for TFTGLCD (#20734)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 57146519a4..44128cc9f8 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -313,7 +313,7 @@ void MarlinUI::init_lcd() {
   t = 0;
   #if ENABLED(TFTGLCD_PANEL_SPI)
     // SPI speed must be less 10MHz
-    _SET_OUTPUT(TFTGLCD_CS);
+    SET_OUTPUT(TFTGLCD_CS);
     WRITE(TFTGLCD_CS, HIGH);
     spiInit(TERN(__STM32F1__, SPI_QUARTER_SPEED, SPI_FULL_SPEED));
     WRITE(TFTGLCD_CS, LOW);
@@ -855,13 +855,14 @@ void MarlinUI::draw_status_screen() {
   void MenuEditItemBase::draw_edit_screen(PGM_P const pstr, const char* const value/*=nullptr*/) {
     if (!PanelDetected) return;
     ui.encoder_direction_normal();
-    lcd.setCursor(0, MIDDLE_Y);
+    const uint8_t y = TERN0(AUTO_BED_LEVELING_UBL, ui.external_control) ? LCD_HEIGHT - 1 : MIDDLE_Y;
+    lcd.setCursor(0, y);
     lcd.write(COLOR_EDIT);
     lcd_put_u8str_P(pstr);
     if (value) {
       lcd.write(':');
-      lcd.setCursor((LCD_WIDTH - 1) - (utf8_strlen(value) + 1), MIDDLE_Y);  // Right-justified, padded by spaces
-      lcd.write(' ');     // Overwrite char if value gets shorter
+      lcd.setCursor((LCD_WIDTH - 1) - (utf8_strlen(value) + 1), y); // Right-justified, padded by spaces
+      lcd.write(' ');                                               // Overwrite char if value gets shorter
       lcd.print(value);
       lcd.write(' ');
       lcd.print_line();

commit 0b3b4da7d0ec2015ca7b8bd346e4f6af3c6f5886
Author: Serhiy-K <52166448+Serhiy-K@users.noreply.github.com>
Date:   Tue Dec 22 14:56:00 2020 +0200

    STM32F1xx support for TFTGLCD (#20515)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index cadd693f6f..57146519a4 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -32,7 +32,7 @@
  * and supports color output.
  */
 
-#if NONE(__AVR__, TARGET_LPC1768, __STM32F1__, STM32F4xx)
+#if NONE(__AVR__, TARGET_LPC1768, STM32F1, STM32F4xx)
   #warning "Selected platform not yet tested. Please contribute your good pin mappings."
 #endif
 
@@ -129,7 +129,7 @@ static uint8_t PanelDetected = 0;
 #if ANY(__AVR__, TARGET_LPC1768, __STM32F1__, ARDUINO_ARCH_SAM, __SAMD51__, __MK20DX256__, __MK64FX512__)
   #define SPI_SEND_ONE(V) SPI.transfer(V);
   #define SPI_SEND_TWO(V) SPI.transfer16(V);
-#elif defined(STM32F4xx)
+#elif EITHER(STM32F4xx, STM32F1xx)
   #define SPI_SEND_ONE(V) SPI.transfer(V, SPI_CONTINUE);
   #define SPI_SEND_TWO(V) SPI.transfer16(V, SPI_CONTINUE);
 #elif defined(ARDUINO_ARCH_ESP32)
@@ -139,7 +139,7 @@ static uint8_t PanelDetected = 0;
 
 #if ANY(__AVR__, ARDUINO_ARCH_SAM, __SAMD51__, __MK20DX256__, __MK64FX512__)
   #define SPI_SEND_SOME(V,L,Z)  SPI.transfer(&V[Z], L);
-#elif defined(STM32F4xx)
+#elif EITHER(STM32F4xx, STM32F1xx)
   #define SPI_SEND_SOME(V,L,Z)  SPI.transfer(&V[Z], L, SPI_CONTINUE);
 #elif ANY(TARGET_LPC1768, __STM32F1__, ARDUINO_ARCH_ESP32)
   #define SPI_SEND_SOME(V,L,Z)  do{ for (uint16_t i = 0; i < L; i++) SPI_SEND_ONE(V[(Z)+i]); }while(0)
@@ -276,7 +276,7 @@ uint8_t MarlinUI::read_slow_buttons(void) {
     Wire.endTransmission();
     #ifdef __AVR__
       Wire.requestFrom((uint8_t)LCD_I2C_ADDRESS, 2, 0, 0, 1);
-    #elif defined(__STM32F1__)
+    #elif defined(STM32F1)
       Wire.requestFrom((uint8_t)LCD_I2C_ADDRESS, (uint8_t)2);
     #elif EITHER(STM32F4xx, TARGET_LPC1768)
       Wire.requestFrom(LCD_I2C_ADDRESS, 2);
@@ -330,7 +330,7 @@ void MarlinUI::init_lcd() {
     Wire.endTransmission(); // send buffer
     #ifdef __AVR__
       Wire.requestFrom((uint8_t)LCD_I2C_ADDRESS, 1, 0, 0, 1);
-    #elif ANY(__STM32F1__, STM32F4xx, TARGET_LPC1768)
+    #elif ANY(STM32F1, STM32F4xx, TARGET_LPC1768)
       Wire.requestFrom(LCD_I2C_ADDRESS, 1);
     #endif
     t = (uint8_t)Wire.read();
@@ -626,7 +626,7 @@ Equal to 20x10 text LCD
 | ttc  ttc   %       | ttc - current temperature
 | tts  tts  %%%      | tts - setted temperature, %%% - percent for FAN
 | ICO  ICO  ICO  ICO | ICO - icon 48x48, placed in 2 text lines
-| ICO  ICO  ICO  ICO | ICO /
+| ICO  ICO  ICO  ICO | ICO
 
 or
 

commit 8fd8772a6fffe63d99d0b88aec7a77d283df8584
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 29 19:06:40 2020 -0600

    Adjust axis homed / trusted methods (#20323)

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 74be828c72..cadd693f6f 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -422,18 +422,12 @@ FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const
   lcd.write('X' + uint8_t(axis));
   if (blink)
     lcd.print(value);
-  else {
-    if (!TEST(axis_homed, axis))
-      while (const char c = *value++) lcd.write(c <= '.' ? c : '?');
-    else {
-      #if NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING)
-        if (!TEST(axis_known_position, axis))
-          lcd_put_u8str_P(axis == Z_AXIS ? PSTR("       ") : PSTR("    "));
-        else
-      #endif
-          lcd_put_u8str(value);
-    }
-  }
+  else if (axis_should_home(axis))
+    while (const char c = *value++) lcd.write(c <= '.' ? c : '?');
+  else if (NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING) && !axis_is_trusted(axis))
+    lcd_put_u8str_P(axis == Z_AXIS ? PSTR("       ") : PSTR("    "));
+  else
+    lcd_put_u8str(value);
 }
 
 FORCE_INLINE void _draw_heater_status(const heater_id_t heater_id, const char *prefix, const bool blink) {

commit 3893114c86c195d227e023c9e702197b54b2636f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Nov 19 15:51:53 2020 -0600

    MKS WiFi preliminary changes

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 9c36cca253..74be828c72 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -204,7 +204,7 @@ void TFTGLCD::print_line() {
   #endif
 }
 
-void TFTGLCD::print_screen(){
+void TFTGLCD::print_screen() {
   if (!PanelDetected) return;
   framebuffer[FBSIZE - 2] = picBits & PIC_MASK;
   framebuffer[FBSIZE - 1] = ledBits;

commit cab83ba840192ec09ba527372055cfa8810ecaf4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Nov 14 18:27:16 2020 -0600

    Fix some LCD/serial strings

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 571d576bbc..9c36cca253 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -675,8 +675,8 @@ void MarlinUI::draw_status_screen() {
   //
 
   lcd.setCursor(0, 0);
-  _draw_axis_value(X_AXIS, ftostr4sign(LOGICAL_X_POSITION(current_position[X_AXIS])), blink);  lcd.write(' ');
-  _draw_axis_value(Y_AXIS, ftostr4sign(LOGICAL_Y_POSITION(current_position[Y_AXIS])), blink);  lcd.write(' ');
+  _draw_axis_value(X_AXIS, ftostr4sign(LOGICAL_X_POSITION(current_position[X_AXIS])), blink); lcd.write(' ');
+  _draw_axis_value(Y_AXIS, ftostr4sign(LOGICAL_Y_POSITION(current_position[Y_AXIS])), blink); lcd.write(' ');
   _draw_axis_value(Z_AXIS, ftostr52sp(LOGICAL_Z_POSITION(current_position[Z_AXIS])), blink);
 
   #if HAS_LEVELING && !HAS_HEATED_BED
@@ -700,7 +700,7 @@ void MarlinUI::draw_status_screen() {
   uint8_t len = elapsed.toDigital(buffer);
 
   lcd.setCursor((LCD_WIDTH - 1) - len, 1);
-  lcd.write(0x07); lcd.print(buffer); // LCD_CLOCK_CHAR
+  lcd.write(LCD_STR_CLOCK[0]); lcd.print(buffer);
 
   //
   // Line 3 - progressbar
@@ -807,13 +807,13 @@ void MarlinUI::draw_status_screen() {
     void MarlinUI::draw_hotend_status(const uint8_t row, const uint8_t extruder) {
       if (!PanelDetected) return;
       lcd.setCursor((LCD_WIDTH - 14) / 2, row + 1);
-      lcd.write(0x02);  lcd_put_u8str_P(" E"); lcd.write('1' + extruder); lcd.write(' ');
-      lcd.print(i16tostr3rj(thermalManager.degHotend(extruder))); lcd.write(0x01);  lcd.write('/');
-      lcd.print(i16tostr3rj(thermalManager.degTargetHotend(extruder)));  lcd.write(0x01);
+      lcd.write(LCD_STR_THERMOMETER[0]); lcd_put_u8str_P(PSTR(" E")); lcd.write('1' + extruder); lcd.write(' ');
+      lcd.print(i16tostr3rj(thermalManager.degHotend(extruder)));       lcd.write(LCD_STR_DEGREE[0]); lcd.write('/');
+      lcd.print(i16tostr3rj(thermalManager.degTargetHotend(extruder))); lcd.write(LCD_STR_DEGREE[0]);
       lcd.print_line();
     }
 
-  #endif // ADVANCED_PAUSE_FEATURE
+  #endif
 
   // Draw a static item with no left-right margin required. Centered by default.
   void MenuItem_static::draw(const uint8_t row, PGM_P const pstr, const uint8_t style/*=SS_DEFAULT*/, const char * const valstr/*=nullptr*/) {

commit c0b4f4eb47ee9d657581035737383d15b3706b79
Author: Lucas Seiki Oshiro <lucasseikioshiro@gmail.com>
Date:   Tue Oct 27 22:41:12 2020 -0300

    "Sound: ON/OFF" menu item (#19901)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index c21c2ceb58..571d576bbc 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -289,6 +289,7 @@ uint8_t MarlinUI::read_slow_buttons(void) {
 // Duration in ms, freq in Hz
 void MarlinUI::buzz(const long duration, const uint16_t freq) {
   if (!PanelDetected) return;
+  if (!buzzer_enabled) return;
   #if ENABLED(TFTGLCD_PANEL_SPI)
     WRITE(TFTGLCD_CS, LOW);
     SPI_SEND_ONE(BUZZER);

commit ec23e37a4a31d12febc06922d3fa68446f58d7fb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Oct 24 17:13:10 2020 -0500

    Clean up comments, USB flash, NULLs

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
index 83ebe111ae..c21c2ceb58 100644
--- a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -863,7 +863,7 @@ void MarlinUI::draw_status_screen() {
     lcd.setCursor(0, MIDDLE_Y);
     lcd.write(COLOR_EDIT);
     lcd_put_u8str_P(pstr);
-    if (value != nullptr) {
+    if (value) {
       lcd.write(':');
       lcd.setCursor((LCD_WIDTH - 1) - (utf8_strlen(value) + 1), MIDDLE_Y);  // Right-justified, padded by spaces
       lcd.write(' ');     // Overwrite char if value gets shorter

commit eaf6777a6643a6fab23ceaaa4699cb2466ea6b83
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 16 19:36:25 2020 -0500

    Rename ultralcd => marlinui

diff --git a/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
new file mode 100644
index 0000000000..83ebe111ae
--- /dev/null
+++ b/Marlin/src/lcd/TFTGLCD/marlinui_TFTGLCD.cpp
@@ -0,0 +1,963 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../inc/MarlinConfigPre.h"
+
+#if IS_TFTGLCD_PANEL
+
+/**
+ * marlinui_TFTGLCD.cpp
+ *
+ * Implementation of the LCD display routines for a TFT GLCD displays with external controller.
+ * This display looks like a REPRAP_DISCOUNT_FULL_GRAPHIC_SMART_CONTROLLER but has good text font
+ * and supports color output.
+ */
+
+#if NONE(__AVR__, TARGET_LPC1768, __STM32F1__, STM32F4xx)
+  #warning "Selected platform not yet tested. Please contribute your good pin mappings."
+#endif
+
+#if ENABLED(TFTGLCD_PANEL_SPI)
+  #include <SPI.h>
+#else
+  #include <Wire.h>
+#endif
+
+#include "marlinui_TFTGLCD.h"
+#include "../marlinui.h"
+#include "../../libs/numtostr.h"
+
+#include "../../sd/cardreader.h"
+#include "../../module/temperature.h"
+#include "../../module/printcounter.h"
+#include "../../module/planner.h"
+#include "../../module/motion.h"
+
+#if DISABLED(LCD_PROGRESS_BAR) && BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
+  #include "../../feature/filwidth.h"
+  #include "../../gcode/parser.h"
+#endif
+
+#if ENABLED(AUTO_BED_LEVELING_UBL)
+  #include "../../feature/bedlevel/bedlevel.h"
+#endif
+
+TFTGLCD lcd;
+
+#define ICON_LOGO       B00000001
+#define ICON_TEMP1      B00000010    //hotend 1
+#define ICON_TEMP2      B00000100    //hotend 2
+#define ICON_TEMP3      B00001000    //hotend 3
+#define ICON_BED        B00010000
+#define ICON_FAN        B00100000
+#define ICON_HOT        B01000000    //when any T > 50deg
+#define PIC_MASK        0x7F
+
+// LEDs not used, for compatibility with Smoothieware
+#define LED_HOTEND_ON   B00000001
+#define LED_BED_ON      B00000010
+#define LED_FAN_ON      B00000100
+#define LED_HOT         B00001000
+#define LED_MASK        0x0F
+
+#define FBSIZE          (LCD_WIDTH * LCD_HEIGHT + 2)
+#define MIDDLE_Y        ((LCD_HEIGHT - 1) / 2)
+
+// Markers for change line colors
+#define COLOR_EDIT      '#'
+#define COLOR_ERROR     '!'
+
+#ifdef CONVERT_TO_EXT_ASCII   //use standart pseudographic symbols in ASCII table
+  #define LR            179   //vertical line
+  #define TRC           191   //top right corner
+  #define BLC           192   //bottom left corner
+  #define GL            196   //horizontal line
+  #define BRC           217   //bottom right corner, should be replaced to 12 for some languages
+  #define TLC           218   //top left corner, should be replaced to 13 for some languages
+#else //next symbols must be present in panel font
+  #define LR            8     //equal to 179
+  #define TRC           9     //equal to 191
+  #define BLC           10    //equal to 192
+  #define GL            11    //equal to 196
+  #define BRC           12    //equal to 217
+  #define TLC           13    //equal to 218
+#endif
+
+#define Marlin  0x01
+
+enum Commands {         // based on Smoothieware commands
+  GET_SPI_DATA = 0,
+  READ_BUTTONS,         // read buttons
+  READ_ENCODER,         // read encoder
+  LCD_WRITE,            // write all screen to LCD
+  BUZZER,               // beep buzzer
+  CONTRAST,             // set contrast (brightnes)
+  // Other commands... 0xE0 thru 0xFF
+  GET_LCD_ROW = 0xE0,   // for detect panel
+  GET_LCD_COL,          // reserved for compatibility with Smoothieware, not used
+  LCD_PUT,              // write one line to LCD
+  CLR_SCREEN,
+  INIT_SCREEN = 0xFE    // clear panel buffer
+};
+
+static unsigned char framebuffer[FBSIZE];
+static unsigned char *fb;
+static uint8_t cour_line;
+static uint8_t picBits, ledBits, hotBits;
+static uint8_t PanelDetected = 0;
+
+// Different platforms use different SPI methods
+#if ANY(__AVR__, TARGET_LPC1768, __STM32F1__, ARDUINO_ARCH_SAM, __SAMD51__, __MK20DX256__, __MK64FX512__)
+  #define SPI_SEND_ONE(V) SPI.transfer(V);
+  #define SPI_SEND_TWO(V) SPI.transfer16(V);
+#elif defined(STM32F4xx)
+  #define SPI_SEND_ONE(V) SPI.transfer(V, SPI_CONTINUE);
+  #define SPI_SEND_TWO(V) SPI.transfer16(V, SPI_CONTINUE);
+#elif defined(ARDUINO_ARCH_ESP32)
+  #define SPI_SEND_ONE(V) SPI.write(V);
+  #define SPI_SEND_TWO(V) SPI.write16(V);
+#endif
+
+#if ANY(__AVR__, ARDUINO_ARCH_SAM, __SAMD51__, __MK20DX256__, __MK64FX512__)
+  #define SPI_SEND_SOME(V,L,Z)  SPI.transfer(&V[Z], L);
+#elif defined(STM32F4xx)
+  #define SPI_SEND_SOME(V,L,Z)  SPI.transfer(&V[Z], L, SPI_CONTINUE);
+#elif ANY(TARGET_LPC1768, __STM32F1__, ARDUINO_ARCH_ESP32)
+  #define SPI_SEND_SOME(V,L,Z)  do{ for (uint16_t i = 0; i < L; i++) SPI_SEND_ONE(V[(Z)+i]); }while(0)
+#endif
+
+// Constructor
+TFTGLCD::TFTGLCD() {}
+
+// Clear local buffer
+void TFTGLCD::clear_buffer() {
+  memset(&framebuffer[0], ' ', FBSIZE - 2);
+  framebuffer[FBSIZE - 1] = framebuffer[FBSIZE - 2] = 0;
+  picBits = ledBits = 0;
+}
+
+// Clear panel's screen
+void TFTGLCD::clr_screen() {
+  if (!PanelDetected) return;
+  #if ENABLED(TFTGLCD_PANEL_SPI)
+    WRITE(TFTGLCD_CS, LOW);
+    SPI_SEND_ONE(CLR_SCREEN);
+    WRITE(TFTGLCD_CS, HIGH);
+  #else
+    Wire.beginTransmission((uint8_t)LCD_I2C_ADDRESS);  //set I2C device address
+    Wire.write(CLR_SCREEN);
+    Wire.endTransmission(); //transmit data
+  #endif
+}
+
+// Set new text cursor position
+void TFTGLCD::setCursor(uint8_t col, uint8_t row) {
+  fb = &framebuffer[0] + col + row * LCD_WIDTH;
+  cour_line = row;
+}
+
+// Send char to buffer
+void TFTGLCD::write(char c) {
+  *fb++ = c;
+}
+
+// Send text line to buffer
+void TFTGLCD::print(const char *line) {
+  while (*line) *fb++ = *line++;
+}
+
+// For menu
+void TFTGLCD::print_line() {
+  if (!PanelDetected) return;
+  #if ENABLED(TFTGLCD_PANEL_SPI)
+    WRITE(TFTGLCD_CS, LOW);
+    SPI_SEND_ONE(LCD_PUT);
+    SPI_SEND_ONE(cour_line);
+    SPI_SEND_SOME(framebuffer, LCD_WIDTH, cour_line * LCD_WIDTH);
+    WRITE(TFTGLCD_CS, HIGH);
+  #else
+    Wire.beginTransmission((uint8_t)LCD_I2C_ADDRESS);  //set I2C device address
+    Wire.write(LCD_PUT);
+    Wire.write(cour_line);
+    Wire.write(&framebuffer[cour_line * LCD_WIDTH], LCD_WIDTH);  //transfer 1 line to txBuffer
+    Wire.endTransmission(); //transmit data
+    safe_delay(1);
+  #endif
+}
+
+void TFTGLCD::print_screen(){
+  if (!PanelDetected) return;
+  framebuffer[FBSIZE - 2] = picBits & PIC_MASK;
+  framebuffer[FBSIZE - 1] = ledBits;
+  #if ENABLED(TFTGLCD_PANEL_SPI)
+    // Send all framebuffer to panel
+    WRITE(TFTGLCD_CS, LOW);
+    SPI_SEND_ONE(LCD_WRITE);
+    SPI_SEND_SOME(framebuffer, FBSIZE, 0);
+    WRITE(TFTGLCD_CS, HIGH);
+  #else
+    uint8_t r;
+    // Send framebuffer to panel by line
+    Wire.beginTransmission((uint8_t)LCD_I2C_ADDRESS);
+    // First line
+    Wire.write(LCD_WRITE);
+    Wire.write(&framebuffer[0], LCD_WIDTH);
+    Wire.endTransmission();
+    for (r = 1; r < (LCD_HEIGHT - 1); r++) {
+      Wire.beginTransmission((uint8_t)LCD_I2C_ADDRESS);
+      Wire.write(&framebuffer[r * LCD_WIDTH], LCD_WIDTH);
+      Wire.endTransmission();
+    }
+    // Last line
+    Wire.beginTransmission((uint8_t)LCD_I2C_ADDRESS);
+    Wire.write(&framebuffer[r * LCD_WIDTH], LCD_WIDTH);
+    Wire.write(&framebuffer[FBSIZE - 2], 2);
+    Wire.endTransmission();
+  #endif
+}
+
+void TFTGLCD::setContrast(uint16_t contrast) {
+  if (!PanelDetected) return;
+  #if ENABLED(TFTGLCD_PANEL_SPI)
+    WRITE(TFTGLCD_CS, LOW);
+    SPI_SEND_ONE(CONTRAST);
+    SPI_SEND_ONE((uint8_t)contrast);
+    WRITE(TFTGLCD_CS, HIGH);
+  #else
+    Wire.beginTransmission((uint8_t)LCD_I2C_ADDRESS);
+    Wire.write(CONTRAST);
+    Wire.write((uint8_t)contrast);
+    Wire.endTransmission();
+  #endif
+}
+
+extern volatile int8_t encoderDiff;
+
+// Read buttons and encoder states
+uint8_t MarlinUI::read_slow_buttons(void) {
+  if (!PanelDetected)    return 0;
+  #if ENABLED(TFTGLCD_PANEL_SPI)
+    uint8_t b = 0;
+    WRITE(TFTGLCD_CS, LOW);
+    SPI_SEND_ONE(READ_ENCODER);
+    #ifndef STM32F4xx
+      WRITE(TFTGLCD_CS, LOW); // for delay
+    #endif
+    encoderDiff += SPI_SEND_ONE(READ_BUTTONS);
+    #ifndef STM32F4xx
+      WRITE(TFTGLCD_CS, LOW); // for delay
+      WRITE(TFTGLCD_CS, LOW);
+    #endif
+    b = SPI_SEND_ONE(GET_SPI_DATA);
+    WRITE(TFTGLCD_CS, HIGH);
+    return b;
+  #else
+    Wire.beginTransmission((uint8_t)LCD_I2C_ADDRESS);
+    Wire.write(READ_ENCODER);
+    Wire.endTransmission();
+    #ifdef __AVR__
+      Wire.requestFrom((uint8_t)LCD_I2C_ADDRESS, 2, 0, 0, 1);
+    #elif defined(__STM32F1__)
+      Wire.requestFrom((uint8_t)LCD_I2C_ADDRESS, (uint8_t)2);
+    #elif EITHER(STM32F4xx, TARGET_LPC1768)
+      Wire.requestFrom(LCD_I2C_ADDRESS, 2);
+    #endif
+    encoderDiff += Wire.read();
+    return Wire.read();   //buttons
+  #endif
+}
+
+// Duration in ms, freq in Hz
+void MarlinUI::buzz(const long duration, const uint16_t freq) {
+  if (!PanelDetected) return;
+  #if ENABLED(TFTGLCD_PANEL_SPI)
+    WRITE(TFTGLCD_CS, LOW);
+    SPI_SEND_ONE(BUZZER);
+    SPI_SEND_TWO((uint16_t)duration);
+    SPI_SEND_TWO(freq);
+    WRITE(TFTGLCD_CS, HIGH);
+  #else
+    Wire.beginTransmission((uint8_t)LCD_I2C_ADDRESS);
+    Wire.write(BUZZER);
+    Wire.write((uint8_t)(duration >> 8));
+    Wire.write((uint8_t)duration);
+    Wire.write((uint8_t)(freq >> 8));
+    Wire.write((uint8_t)freq);
+    Wire.endTransmission();
+  #endif
+}
+
+void MarlinUI::init_lcd() {
+  uint8_t t;
+  lcd.clear_buffer();
+  t = 0;
+  #if ENABLED(TFTGLCD_PANEL_SPI)
+    // SPI speed must be less 10MHz
+    _SET_OUTPUT(TFTGLCD_CS);
+    WRITE(TFTGLCD_CS, HIGH);
+    spiInit(TERN(__STM32F1__, SPI_QUARTER_SPEED, SPI_FULL_SPEED));
+    WRITE(TFTGLCD_CS, LOW);
+    SPI_SEND_ONE(GET_LCD_ROW);
+    t = SPI_SEND_ONE(GET_SPI_DATA);
+  #else
+    #ifdef TARGET_LPC1768
+      Wire.begin();   //init twi/I2C
+    #else
+      Wire.begin((uint8_t)LCD_I2C_ADDRESS); //init twi/I2C
+    #endif
+    Wire.beginTransmission((uint8_t)LCD_I2C_ADDRESS);
+    Wire.write((uint8_t)GET_LCD_ROW); // put command to buffer
+    Wire.endTransmission(); // send buffer
+    #ifdef __AVR__
+      Wire.requestFrom((uint8_t)LCD_I2C_ADDRESS, 1, 0, 0, 1);
+    #elif ANY(__STM32F1__, STM32F4xx, TARGET_LPC1768)
+      Wire.requestFrom(LCD_I2C_ADDRESS, 1);
+    #endif
+    t = (uint8_t)Wire.read();
+  #endif
+
+  if (t == LCD_HEIGHT) {
+    PanelDetected = 1;
+    #if ENABLED(TFTGLCD_PANEL_SPI)
+      SPI_SEND_ONE(INIT_SCREEN);
+      SPI_SEND_ONE(Marlin);
+      WRITE(TFTGLCD_CS, HIGH);
+    #else
+      Wire.beginTransmission((uint8_t)LCD_I2C_ADDRESS);
+      Wire.write((uint8_t)INIT_SCREEN);
+      Wire.write(Marlin);
+      Wire.endTransmission();
+    #endif
+  }
+  else
+    PanelDetected = 0;
+  safe_delay(100);
+}
+
+bool MarlinUI::detected() {
+  return PanelDetected;
+}
+
+void MarlinUI::clear_lcd() {
+  if (!PanelDetected) return;
+  lcd.clr_screen();
+  lcd.clear_buffer();
+}
+
+int16_t MarlinUI::contrast; // Initialized by settings.load()
+
+void MarlinUI::set_contrast(const int16_t value) {
+  contrast = constrain(value, LCD_CONTRAST_MIN, LCD_CONTRAST_MAX);
+  lcd.setContrast(contrast);
+}
+
+static void center_text_P(PGM_P pstart, uint8_t y) {
+  uint8_t len = utf8_strlen_P(pstart);
+  if (len < LCD_WIDTH)
+    lcd.setCursor((LCD_WIDTH - len) / 2, y);
+  else
+    lcd.setCursor(0, y);
+  lcd_put_u8str_P(pstart);
+}
+
+#if ENABLED(SHOW_BOOTSCREEN)
+
+  void MarlinUI::show_bootscreen() {
+    if (!PanelDetected) return;
+    //
+    // Show the Marlin logo, splash line1, and splash line 2
+    //
+    uint8_t indent = (LCD_WIDTH - 8) / 2;
+    // symbols 217 (bottom right corner) and 218 (top left corner) are using for letters in some languages
+    // and they should be moved to begining ASCII table as spetial symbols
+    lcd.setCursor(indent, 0); lcd.write(TLC); lcd_put_u8str_P(PSTR("------"));  lcd.write(TRC);
+    lcd.setCursor(indent, 1); lcd.write(LR);  lcd_put_u8str_P(PSTR("Marlin"));  lcd.write(LR);
+    lcd.setCursor(indent, 2); lcd.write(BLC); lcd_put_u8str_P(PSTR("------"));  lcd.write(BRC);
+    center_text_P(PSTR(SHORT_BUILD_VERSION), 3);
+    center_text_P(PSTR(MARLIN_WEBSITE_URL), 4);
+    picBits = ICON_LOGO;
+    lcd.print_screen();
+    safe_delay(1500);
+  }
+
+#endif // SHOW_BOOTSCREEN
+
+void MarlinUI::draw_kill_screen() {
+  if (!PanelDetected) return;
+  lcd.clear_buffer();
+  lcd.setCursor(0, 3);  lcd.write(COLOR_ERROR);
+  lcd.setCursor((LCD_WIDTH - utf8_strlen(status_message)) / 2 + 1, 3);
+  lcd_put_u8str(status_message);
+  center_text_P(GET_TEXT(MSG_HALTED), 5);
+  center_text_P(GET_TEXT(MSG_PLEASE_RESET), 6);
+  lcd.print_screen();
+}
+
+//
+// Before homing, blink '123' <-> '???'.
+// Homed but unknown... '123' <-> '   '.
+// Homed and known, display constantly.
+//
+FORCE_INLINE void _draw_axis_value(const AxisEnum axis, const char *value, const bool blink) {
+  lcd.write('X' + uint8_t(axis));
+  if (blink)
+    lcd.print(value);
+  else {
+    if (!TEST(axis_homed, axis))
+      while (const char c = *value++) lcd.write(c <= '.' ? c : '?');
+    else {
+      #if NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING)
+        if (!TEST(axis_known_position, axis))
+          lcd_put_u8str_P(axis == Z_AXIS ? PSTR("       ") : PSTR("    "));
+        else
+      #endif
+          lcd_put_u8str(value);
+    }
+  }
+}
+
+FORCE_INLINE void _draw_heater_status(const heater_id_t heater_id, const char *prefix, const bool blink) {
+  uint8_t pic_hot_bits;
+  #if HAS_HEATED_BED
+    const bool isBed = heater_id < 0;
+    const float t1 = (isBed ? thermalManager.degBed() : thermalManager.degHotend(heater_id));
+    const float t2 = (isBed ? thermalManager.degTargetBed() : thermalManager.degTargetHotend(heater_id));
+  #else
+    const float t1 = thermalManager.degHotend(heater_id);
+    const float t2 = thermalManager.degTargetHotend(heater_id);
+  #endif
+
+  #if HOTENDS < 2
+    if (heater_id == H_E0) {
+      lcd.setCursor(2, 5);  lcd.print(prefix); //HE
+      lcd.setCursor(1, 6);  lcd.print(i16tostr3rj(t1 + 0.5));
+      lcd.setCursor(1, 7);
+    }
+    else {
+      lcd.setCursor(6, 5);  lcd.print(prefix); //BED
+      lcd.setCursor(6, 6);  lcd.print(i16tostr3rj(t1 + 0.5));
+      lcd.setCursor(6, 7);
+    }
+  #else
+    if (heater_id > H_BED) {
+      lcd.setCursor(heater_id * 4, 5);  lcd.print(prefix); //HE1 or HE2 or HE3
+      lcd.setCursor(heater_id * 4, 6);  lcd.print(i16tostr3rj(t1 + 0.5));
+      lcd.setCursor(heater_id * 4, 7);
+    }
+    else {
+      lcd.setCursor(13, 5);  lcd.print(prefix); //BED
+      lcd.setCursor(13, 6);  lcd.print(i16tostr3rj(t1 + 0.5));
+      lcd.setCursor(13, 7);
+    }
+  #endif // HOTENDS <= 1
+
+  #if !HEATER_IDLE_HANDLER
+    UNUSED(blink);
+  #else
+    if (!blink && thermalManager.heater_idle[thermalManager.idle_index_for_id(heater_id)].timed_out) {
+      lcd.write(' ');
+      if (t2 >= 10) lcd.write(' ');
+      if (t2 >= 100) lcd.write(' ');
+    }
+    else
+  #endif // !HEATER_IDLE_HANDLER
+      lcd.print(i16tostr3rj(t2 + 0.5));
+
+  switch (heater_id) {
+    case H_BED: pic_hot_bits = ICON_BED;   break;
+    case H_E0:  pic_hot_bits = ICON_TEMP1; break;
+    case H_E1:  pic_hot_bits = ICON_TEMP2; break;
+    case H_E2:  pic_hot_bits = ICON_TEMP3;
+    default:    break;
+  }
+
+  if (t2) picBits |= pic_hot_bits;
+  else    picBits &= ~pic_hot_bits;
+
+  if (t1 > 50)  hotBits |= pic_hot_bits;
+  else          hotBits &= ~pic_hot_bits;
+
+  if (hotBits)  picBits |= ICON_HOT;
+  else          picBits &= ~ICON_HOT;
+}
+
+#if HAS_PRINT_PROGRESS
+
+  FORCE_INLINE void _draw_print_progress() {
+    if (!PanelDetected) return;
+    const uint8_t progress = ui._get_progress();
+    #if ENABLED(SDSUPPORT)
+      lcd_put_u8str_P(PSTR("SD"));
+    #elif ENABLED(LCD_SET_PROGRESS_MANUALLY)
+      lcd_put_u8str_P(PSTR("P:"));
+    #endif
+    if (progress)
+      lcd.print(ui8tostr3rj(progress));
+    else
+      lcd_put_u8str_P(PSTR("---"));
+    lcd.write('%');
+  }
+
+#endif // HAS_PRINT_PROGRESS
+
+#if ENABLED(LCD_PROGRESS_BAR)
+
+  void MarlinUI::draw_progress_bar(const uint8_t percent) {
+    if (!PanelDetected) return;
+    if (fb == &framebuffer[0] + LCD_WIDTH * 2) {  // For status screen
+      lcd.write('%'); lcd.write(percent);
+    }
+    else { // For progress bar test
+      lcd.setCursor(LCD_WIDTH / 2 - 2, MIDDLE_Y);
+      lcd.print(i16tostr3rj(percent));  lcd.write('%');
+      lcd.print_line();
+      lcd.setCursor(0, MIDDLE_Y + 1);
+      lcd.write('%'); lcd.write(percent);
+      lcd.print_line();
+    }
+  }
+
+#endif
+
+void MarlinUI::draw_status_message(const bool blink) {
+  if (!PanelDetected) return;
+  lcd.setCursor(0, 3);
+  #if BOTH(FILAMENT_LCD_DISPLAY, SDSUPPORT)
+
+    // Alternate Status message and Filament display
+    if (ELAPSED(millis(), next_filament_display)) {
+      lcd_put_u8str_P(PSTR("Dia "));
+      lcd.print(ftostr12ns(filament_width_meas));
+      lcd_put_u8str_P(PSTR(" V"));
+      lcd.print(i16tostr3rj(100.0 * (
+          parser.volumetric_enabled
+            ? planner.volumetric_area_nominal / planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
+            : planner.volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]
+        )
+      ));
+      lcd.write('%');
+      return;
+    }
+
+  #endif // FILAMENT_LCD_DISPLAY && SDSUPPORT
+
+  // Get the UTF8 character count of the string
+  uint8_t slen = utf8_strlen(status_message);
+
+  #if ENABLED(STATUS_MESSAGE_SCROLLING)
+
+    static bool last_blink = false;
+
+    // If the string fits into the LCD, just print it and do not scroll it
+    if (slen <= LCD_WIDTH) {
+
+      // The string isn't scrolling and may not fill the screen
+      lcd_put_u8str(status_message);
+
+      // Fill the rest with spaces
+      while (slen < LCD_WIDTH) { lcd.write(' '); ++slen; }
+    }
+    else {
+      // String is larger than the available space in screen.
+
+      // Get a pointer to the next valid UTF8 character
+      // and the string remaining length
+      uint8_t rlen;
+      const char *stat = status_and_len(rlen);
+      lcd_put_u8str_max(stat, LCD_WIDTH);     // The string leaves space
+
+      // If the remaining string doesn't completely fill the screen
+      if (rlen < LCD_WIDTH) {
+        lcd.write('.');                       // Always at 1+ spaces left, draw a dot
+        uint8_t chars = LCD_WIDTH - rlen;     // Amount of space left in characters
+        if (--chars) {                        // Draw a second dot if there's space
+          lcd.write('.');
+          if (--chars)
+            lcd_put_u8str_max(status_message, chars); // Print a second copy of the message
+        }
+      }
+      if (last_blink != blink) {
+        last_blink = blink;
+        advance_status_scroll();
+      }
+    }
+
+  #else
+
+    UNUSED(blink);
+
+    // Just print the string to the LCD
+    lcd_put_u8str_max(status_message, LCD_WIDTH);
+
+    // Fill the rest with spaces if there are missing spaces
+    while (slen < LCD_WIDTH) {
+      lcd.write(' ');
+      ++slen;
+    }
+
+  #endif
+}
+
+/**
+Possible status screens:
+
+Equal to 20x10 text LCD
+
+|X 000 Y 000 Z 000.00|
+|FR100% SD100% C--:--|
+| Progress bar line  |
+|Status message      |
+|                    |
+|  HE  BED  FAN      |
+| ttc  ttc   %       | ttc - current temperature
+| tts  tts  %%%      | tts - setted temperature, %%% - percent for FAN
+| ICO  ICO  ICO  ICO | ICO - icon 48x48, placed in 2 text lines
+| ICO  ICO  ICO  ICO | ICO /
+
+or
+
+|X 000 Y 000 Z 000.00|
+|FR100% SD100% C--:--|
+| Progress bar line  |
+|Status message      |
+|                    |
+|HE1 HE2 HE3  BED ICO|
+|ttc ttc ttc  ttc ICO|
+|tts tts tts  tts %%%|
+|ICO ICO ICO  ICO ICO|
+|ICO ICO ICO  ICO ICO|
+
+or
+
+Equal to 24x10 text LCD
+
+|X 000 Y 000 Z 000.00    |
+|FR100%   SD100%   C--:--|
+|   Progress bar line    |
+|Status message          |
+|                        |
+|HE1 HE2 HE3  BED FAN    |
+|ttc ttc ttc  ttc  %     |
+|tts tts tts  tts %%%    |
+|ICO ICO ICO  ICO ICO ICO|
+|ICO ICO ICO  ICO ICO ICO|
+*/
+
+void MarlinUI::draw_status_screen() {
+  if (!PanelDetected) return;
+
+  const bool blink = get_blink();
+
+  lcd.clear_buffer();
+
+  //
+  // Line 1 - XYZ coordinates
+  //
+
+  lcd.setCursor(0, 0);
+  _draw_axis_value(X_AXIS, ftostr4sign(LOGICAL_X_POSITION(current_position[X_AXIS])), blink);  lcd.write(' ');
+  _draw_axis_value(Y_AXIS, ftostr4sign(LOGICAL_Y_POSITION(current_position[Y_AXIS])), blink);  lcd.write(' ');
+  _draw_axis_value(Z_AXIS, ftostr52sp(LOGICAL_Z_POSITION(current_position[Z_AXIS])), blink);
+
+  #if HAS_LEVELING && !HAS_HEATED_BED
+    lcd.write(planner.leveling_active || blink ? '_' : ' ');
+  #endif
+
+  //
+  // Line 2 - feedrate, , time
+  //
+
+  lcd.setCursor(0, 1);
+  lcd_put_u8str_P(PSTR("FR")); lcd.print(i16tostr3rj(feedrate_percentage)); lcd.write('%');
+
+  #if BOTH(SDSUPPORT, HAS_PRINT_PROGRESS)
+    lcd.setCursor(LCD_WIDTH / 2 - 3, 1);
+    _draw_print_progress();
+  #endif
+
+  char buffer[10];
+  duration_t elapsed = print_job_timer.duration();
+  uint8_t len = elapsed.toDigital(buffer);
+
+  lcd.setCursor((LCD_WIDTH - 1) - len, 1);
+  lcd.write(0x07); lcd.print(buffer); // LCD_CLOCK_CHAR
+
+  //
+  // Line 3 - progressbar
+  //
+
+  lcd.setCursor(0, 2);
+  #if ENABLED(LCD_PROGRESS_BAR)
+    draw_progress_bar(_get_progress());
+  #else
+    lcd.write('%'); lcd.write(0);
+  #endif
+
+  //
+  // Line 4 - Status Message (which may be a Filament display)
+  //
+
+  draw_status_message(blink);
+
+  //
+  // Line 5
+  //
+
+  #if HOTENDS <= 1 || (HOTENDS <= 2 && !HAS_HEATED_BED)
+    #if DUAL_MIXING_EXTRUDER
+      lcd.setCursor(0, 4);
+      // Two-component mix / gradient instead of XY
+      char mixer_messages[12];
+      const char *mix_label;
+      #if ENABLED(GRADIENT_MIX)
+        if (mixer.gradient.enabled) {
+          mixer.update_mix_from_gradient();
+          mix_label = "Gr";
+        }
+        else
+      #endif
+        {
+          mixer.update_mix_from_vtool();
+          mix_label = "Mx";
+        }
+      sprintf_P(mixer_messages, PSTR("%s %d;%d%% "), mix_label, int(mixer.mix[0]), int(mixer.mix[1]));
+      lcd_put_u8str(mixer_messages);
+    #endif
+  #endif
+
+  //
+  // Line 6..8 Temperatures, FAN
+  //
+
+  #if HOTENDS < 2
+    _draw_heater_status(H_E0, "HE", blink);    // Hotend Temperature
+  #else
+    _draw_heater_status(H_E0, "HE1", blink);   // Hotend 1 Temperature
+    _draw_heater_status(H_E1, "HE2", blink);   // Hotend 2 Temperature
+    #if HOTENDS > 2
+      _draw_heater_status(H_E2, "HE3", blink); // Hotend 3 Temperature
+    #endif
+  #endif // HOTENDS <= 1
+
+  #if HAS_HEATED_BED
+    #if HAS_LEVELING
+      _draw_heater_status(H_BED, (planner.leveling_active && blink ? "___" : "BED"), blink);
+    #else
+      _draw_heater_status(H_BED, "BED", blink);
+    #endif
+  #endif // HAS_HEATED_BED
+
+  #if FAN_COUNT > 0
+    uint16_t spd = thermalManager.fan_speed[0];
+
+    #if ENABLED(ADAPTIVE_FAN_SLOWING)
+      if (!blink) spd = thermalManager.scaledFanSpeed(0, spd);
+    #endif
+
+    uint16_t per = thermalManager.fanPercent(spd);
+    #if HOTENDS < 2
+      #define FANX 11
+    #else
+      #define FANX 17
+    #endif
+    lcd.setCursor(FANX, 5); lcd_put_u8str_P(PSTR("FAN"));
+    lcd.setCursor(FANX + 1, 6); lcd.write('%');
+    lcd.setCursor(FANX, 7);
+    lcd.print(i16tostr3rj(per));
+
+    if (TERN0(HAS_FAN0, thermalManager.fan_speed[0]) || TERN0(HAS_FAN1, thermalManager.fan_speed[1]) || TERN0(HAS_FAN2, thermalManager.fan_speed[2]))
+      picBits |= ICON_FAN;
+    else
+      picBits &= ~ICON_FAN;
+
+  #endif // FAN_COUNT > 0
+
+  //
+  // Line 9, 10 - icons
+  //
+  lcd.print_screen();
+}
+
+#if HAS_LCD_MENU
+
+  #include "../menu/menu.h"
+
+  #if ENABLED(ADVANCED_PAUSE_FEATURE)
+
+    void MarlinUI::draw_hotend_status(const uint8_t row, const uint8_t extruder) {
+      if (!PanelDetected) return;
+      lcd.setCursor((LCD_WIDTH - 14) / 2, row + 1);
+      lcd.write(0x02);  lcd_put_u8str_P(" E"); lcd.write('1' + extruder); lcd.write(' ');
+      lcd.print(i16tostr3rj(thermalManager.degHotend(extruder))); lcd.write(0x01);  lcd.write('/');
+      lcd.print(i16tostr3rj(thermalManager.degTargetHotend(extruder)));  lcd.write(0x01);
+      lcd.print_line();
+    }
+
+  #endif // ADVANCED_PAUSE_FEATURE
+
+  // Draw a static item with no left-right margin required. Centered by default.
+  void MenuItem_static::draw(const uint8_t row, PGM_P const pstr, const uint8_t style/*=SS_DEFAULT*/, const char * const valstr/*=nullptr*/) {
+    if (!PanelDetected) return;
+    uint8_t n = LCD_WIDTH;
+    lcd.setCursor(0, row);
+    if ((style & SS_CENTER) && !valstr) {
+      int8_t pad = (LCD_WIDTH - utf8_strlen_P(pstr)) / 2;
+      while (--pad >= 0) { lcd.write(' '); n--; }
+    }
+    n = lcd_put_u8str_ind_P(pstr, itemIndex, itemString, n);
+    if (valstr) n -= lcd_put_u8str_max(valstr, n);
+    for (; n; --n) lcd.write(' ');
+    lcd.print_line();
+  }
+
+  // Draw a generic menu item with pre_char (if selected) and post_char
+  void MenuItemBase::_draw(const bool sel, const uint8_t row, PGM_P const pstr, const char pre_char, const char post_char) {
+    if (!PanelDetected) return;
+    lcd.setCursor(0, row);
+    lcd.write(sel ? pre_char : ' ');
+    uint8_t n = lcd_put_u8str_ind_P(pstr, itemIndex, itemString, LCD_WIDTH - 2);
+    for (; n; --n) lcd.write(' ');
+    lcd.write(post_char);
+    lcd.print_line();
+  }
+
+  // Draw a menu item with a (potentially) editable value
+  void MenuEditItemBase::draw(const bool sel, const uint8_t row, PGM_P const pstr, const char* const data, const bool pgm) {
+    if (!PanelDetected) return;
+    const uint8_t vlen = data ? (pgm ? utf8_strlen_P(data) : utf8_strlen(data)) : 0;
+    lcd.setCursor(0, row);
+    lcd.write(sel ? LCD_STR_ARROW_RIGHT[0] : ' ');
+    uint8_t n = lcd_put_u8str_ind_P(pstr, itemIndex, itemString, LCD_WIDTH - 2 - vlen);
+    if (vlen) {
+      lcd.write(':');
+      for (; n; --n) lcd.write(' ');
+      if (pgm) lcd_put_u8str_P(data); else lcd_put_u8str(data);
+    }
+    lcd.print_line();
+  }
+
+  // Low-level draw_edit_screen can be used to draw an edit screen from anyplace
+  // This line moves to the last line of the screen for UBL plot screen on the panel side
+  void MenuEditItemBase::draw_edit_screen(PGM_P const pstr, const char* const value/*=nullptr*/) {
+    if (!PanelDetected) return;
+    ui.encoder_direction_normal();
+    lcd.setCursor(0, MIDDLE_Y);
+    lcd.write(COLOR_EDIT);
+    lcd_put_u8str_P(pstr);
+    if (value != nullptr) {
+      lcd.write(':');
+      lcd.setCursor((LCD_WIDTH - 1) - (utf8_strlen(value) + 1), MIDDLE_Y);  // Right-justified, padded by spaces
+      lcd.write(' ');     // Overwrite char if value gets shorter
+      lcd.print(value);
+      lcd.write(' ');
+      lcd.print_line();
+    }
+  }
+
+  // The Select Screen presents a prompt and two "buttons"
+  void MenuItem_confirm::draw_select_screen(PGM_P const yes, PGM_P const no, const bool yesno, PGM_P const pref, const char * const string, PGM_P const suff) {
+    if (!PanelDetected) return;
+    ui.draw_select_screen_prompt(pref, string, suff);
+    lcd.setCursor(0, MIDDLE_Y);
+    lcd.write(COLOR_EDIT);
+    lcd.write(yesno ? ' ' : '['); lcd_put_u8str_P(no); lcd.write(yesno ? ' ' : ']');
+    lcd.setCursor(LCD_WIDTH - utf8_strlen_P(yes) - 3, MIDDLE_Y);
+    lcd.write(yesno ? '[' : ' '); lcd_put_u8str_P(yes); lcd.write(yesno ? ']' : ' ');
+    lcd.print_line();
+  }
+
+  #if ENABLED(SDSUPPORT)
+
+    void MenuItem_sdbase::draw(const bool sel, const uint8_t row, PGM_P const, CardReader &theCard, const bool isDir) {
+      if (!PanelDetected) return;
+      lcd.setCursor(0, row);
+      lcd.write(sel ? LCD_STR_ARROW_RIGHT[0] : ' ');
+      constexpr uint8_t maxlen = LCD_WIDTH - 2;
+      uint8_t n = maxlen - lcd_put_u8str_max(ui.scrolled_filename(theCard, maxlen, row, sel), maxlen);
+      for (; n; --n) lcd.write(' ');
+      lcd.write(isDir ? LCD_STR_FOLDER[0] : ' ');
+      lcd.print_line();
+    }
+
+  #endif // SDSUPPORT
+
+  #if ENABLED(LCD_HAS_STATUS_INDICATORS)
+
+    void MarlinUI::update_indicators() {}
+
+  #endif  // LCD_HAS_STATUS_INDICATORS
+
+  #if ENABLED(AUTO_BED_LEVELING_UBL)
+    /**
+     * Map screen:
+     * |/---------\ (00,00) |
+     * || . . . . | X:000.00|
+     * || . . . . | Y:000.00|
+     * || . . . . | Z:00.000|
+     * || . . . . |         |
+     * || . . . . |         |
+     * || . . . . |         |
+     * |+---------/         |
+     * |                    |
+     * |____________________|
+     */
+    void MarlinUI::ubl_plot(const uint8_t x_plot, const uint8_t y_plot) {
+      if (!PanelDetected) return;
+
+      #define _LCD_W_POS 12
+
+      lcd.clear_buffer();
+
+      //print only top left corner. All frame with grid points will be printed by panel
+      lcd.setCursor(0, 0);
+      *fb++ = TLC;   //top left corner - marker for plot parameters
+      *fb = (GRID_MAX_POINTS_X << 4) + GRID_MAX_POINTS_Y; //set mesh size
+
+      // Print plot position
+      lcd.setCursor(_LCD_W_POS, 0);
+      *fb++ = '(';  lcd.print(i16tostr3left(x_plot));
+      *fb++ = ',';  lcd.print(i16tostr3left(y_plot)); *fb = ')';
+
+      // Show all values
+      lcd.setCursor(_LCD_W_POS, 1); lcd_put_u8str_P(PSTR("X:"));
+      lcd.print(ftostr52(LOGICAL_X_POSITION(pgm_read_float(&ubl._mesh_index_to_xpos[x_plot]))));
+      lcd.setCursor(_LCD_W_POS, 2); lcd_put_u8str_P(PSTR("Y:"));
+      lcd.print(ftostr52(LOGICAL_Y_POSITION(pgm_read_float(&ubl._mesh_index_to_ypos[y_plot]))));
+
+      // Show the location value
+      lcd.setCursor(_LCD_W_POS, 3); lcd_put_u8str_P(PSTR("Z:"));
+
+      if (!isnan(ubl.z_values[x_plot][y_plot]))
+        lcd.print(ftostr43sign(ubl.z_values[x_plot][y_plot]));
+      else
+        lcd_put_u8str_P(PSTR(" -----"));
+
+      center_text_P(GET_TEXT(MSG_UBL_FINE_TUNE_MESH), 8);
+
+      lcd.print_screen();
+    }
+
+  #endif // AUTO_BED_LEVELING_UBL
+
+#endif // HAS_LCD_MENU
+
+#endif // IS_TFTGLCD_PANEL
