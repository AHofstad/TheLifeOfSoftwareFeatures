commit 982b42579243543a8684f571554da0ce3137db96
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Feb 27 20:45:34 2024 -0600

    üî• Drop TMC26X support (#26770)

diff --git a/Marlin/src/module/stepper/TMC26X.h b/Marlin/src/module/stepper/TMC26X.h
deleted file mode 100644
index 1fd94b26a8..0000000000
--- a/Marlin/src/module/stepper/TMC26X.h
+++ /dev/null
@@ -1,212 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-#pragma once
-
-/**
- * stepper/TMC26X.h
- * Stepper driver indirection for TMC26X drivers
- */
-
-#include "../../inc/MarlinConfig.h"
-
-// TMC26X drivers have STEP/DIR on normal pins, but ENABLE via SPI
-
-#include <SPI.h>
-#include <TMC26XStepper.h>
-
-void tmc26x_init_to_defaults();
-
-// X Stepper
-#if AXIS_DRIVER_TYPE_X(TMC26X)
-  extern TMC26XStepper stepperX;
-  #define X_ENABLE_INIT() NOOP
-  #define X_ENABLE_WRITE(STATE) stepperX.setEnabled(STATE)
-  #define X_ENABLE_READ() stepperX.isEnabled()
-#endif
-
-// Y Stepper
-#if AXIS_DRIVER_TYPE_Y(TMC26X)
-  extern TMC26XStepper stepperY;
-  #define Y_ENABLE_INIT() NOOP
-  #define Y_ENABLE_WRITE(STATE) stepperY.setEnabled(STATE)
-  #define Y_ENABLE_READ() stepperY.isEnabled()
-#endif
-
-// Z Stepper
-#if AXIS_DRIVER_TYPE_Z(TMC26X)
-  extern TMC26XStepper stepperZ;
-  #define Z_ENABLE_INIT() NOOP
-  #define Z_ENABLE_WRITE(STATE) stepperZ.setEnabled(STATE)
-  #define Z_ENABLE_READ() stepperZ.isEnabled()
-#endif
-
-// X2 Stepper
-#if HAS_X2_ENABLE && AXIS_DRIVER_TYPE_X2(TMC26X)
-  extern TMC26XStepper stepperX2;
-  #define X2_ENABLE_INIT() NOOP
-  #define X2_ENABLE_WRITE(STATE) stepperX2.setEnabled(STATE)
-  #define X2_ENABLE_READ() stepperX2.isEnabled()
-#endif
-
-// Y2 Stepper
-#if HAS_Y2_ENABLE && AXIS_DRIVER_TYPE_Y2(TMC26X)
-  extern TMC26XStepper stepperY2;
-  #define Y2_ENABLE_INIT() NOOP
-  #define Y2_ENABLE_WRITE(STATE) stepperY2.setEnabled(STATE)
-  #define Y2_ENABLE_READ() stepperY2.isEnabled()
-#endif
-
-// Z2 Stepper
-#if HAS_Z2_ENABLE && AXIS_DRIVER_TYPE_Z2(TMC26X)
-  extern TMC26XStepper stepperZ2;
-  #define Z2_ENABLE_INIT() NOOP
-  #define Z2_ENABLE_WRITE(STATE) stepperZ2.setEnabled(STATE)
-  #define Z2_ENABLE_READ() stepperZ2.isEnabled()
-#endif
-
-// Z3 Stepper
-#if HAS_Z3_ENABLE && AXIS_DRIVER_TYPE_Z3(TMC26X)
-  extern TMC26XStepper stepperZ3;
-  #define Z3_ENABLE_INIT() NOOP
-  #define Z3_ENABLE_WRITE(STATE) stepperZ3.setEnabled(STATE)
-  #define Z3_ENABLE_READ() stepperZ3.isEnabled()
-#endif
-
-// Z4 Stepper
-#if HAS_Z4_ENABLE && AXIS_DRIVER_TYPE_Z4(TMC26X)
-  extern TMC26XStepper stepperZ4;
-  #define Z4_ENABLE_INIT() NOOP
-  #define Z4_ENABLE_WRITE(STATE) stepperZ4.setEnabled(STATE)
-  #define Z4_ENABLE_READ() stepperZ4.isEnabled()
-#endif
-
-// I Stepper
-#if HAS_I_ENABLE && AXIS_DRIVER_TYPE_I(TMC26X)
-  extern TMC26XStepper stepperI;
-  #define I_ENABLE_INIT() NOOP
-  #define I_ENABLE_WRITE(STATE) stepperI.setEnabled(STATE)
-  #define I_ENABLE_READ() stepperI.isEnabled()
-#endif
-
-// J Stepper
-#if HAS_J_ENABLE && AXIS_DRIVER_TYPE_J(TMC26X)
-  extern TMC26XStepper stepperJ;
-  #define J_ENABLE_INIT() NOOP
-  #define J_ENABLE_WRITE(STATE) stepperJ.setEnabled(STATE)
-  #define J_ENABLE_READ() stepperJ.isEnabled()
-#endif
-
-// K Stepper
-#if HAS_K_ENABLE && AXIS_DRIVER_TYPE_K(TMC26X)
-  extern TMC26XStepper stepperK;
-  #define K_ENABLE_INIT() NOOP
-  #define K_ENABLE_WRITE(STATE) stepperK.setEnabled(STATE)
-  #define K_ENABLE_READ() stepperK.isEnabled()
-#endif
-
-// U Stepper
-#if HAS_U_ENABLE && AXIS_DRIVER_TYPE_U(TMC26X)
-  extern TMC26XStepper stepperU;
-  #define U_ENABLE_INIT() NOOP
-  #define U_ENABLE_WRITE(STATE) stepperU.setEnabled(STATE)
-  #define U_ENABLE_READ() stepperU.isEnabled()
-#endif
-
-// V Stepper
-#if HAS_V_ENABLE && AXIS_DRIVER_TYPE_V(TMC26X)
-  extern TMC26XStepper stepperV;
-  #define V_ENABLE_INIT() NOOP
-  #define V_ENABLE_WRITE(STATE) stepperV.setEnabled(STATE)
-  #define V_ENABLE_READ() stepperV.isEnabled()
-#endif
-
-// W Stepper
-#if HAS_W_ENABLE && AXIS_DRIVER_TYPE_W(TMC26X)
-  extern TMC26XStepper stepperW;
-  #define W_ENABLE_INIT() NOOP
-  #define W_ENABLE_WRITE(STATE) stepperW.setEnabled(STATE)
-  #define W_ENABLE_READ() stepperW.isEnabled()
-#endif
-
-// E0 Stepper
-#if AXIS_DRIVER_TYPE_E0(TMC26X)
-  extern TMC26XStepper stepperE0;
-  #define E0_ENABLE_INIT() NOOP
-  #define E0_ENABLE_WRITE(STATE) stepperE0.setEnabled(STATE)
-  #define E0_ENABLE_READ() stepperE0.isEnabled()
-#endif
-
-// E1 Stepper
-#if AXIS_DRIVER_TYPE_E1(TMC26X)
-  extern TMC26XStepper stepperE1;
-  #define E1_ENABLE_INIT() NOOP
-  #define E1_ENABLE_WRITE(STATE) stepperE1.setEnabled(STATE)
-  #define E1_ENABLE_READ() stepperE1.isEnabled()
-#endif
-
-// E2 Stepper
-#if AXIS_DRIVER_TYPE_E2(TMC26X)
-  extern TMC26XStepper stepperE2;
-  #define E2_ENABLE_INIT() NOOP
-  #define E2_ENABLE_WRITE(STATE) stepperE2.setEnabled(STATE)
-  #define E2_ENABLE_READ() stepperE2.isEnabled()
-#endif
-
-// E3 Stepper
-#if AXIS_DRIVER_TYPE_E3(TMC26X)
-  extern TMC26XStepper stepperE3;
-  #define E3_ENABLE_INIT() NOOP
-  #define E3_ENABLE_WRITE(STATE) stepperE3.setEnabled(STATE)
-  #define E3_ENABLE_READ() stepperE3.isEnabled()
-#endif
-
-// E4 Stepper
-#if AXIS_DRIVER_TYPE_E4(TMC26X)
-  extern TMC26XStepper stepperE4;
-  #define E4_ENABLE_INIT() NOOP
-  #define E4_ENABLE_WRITE(STATE) stepperE4.setEnabled(STATE)
-  #define E4_ENABLE_READ() stepperE4.isEnabled()
-#endif
-
-// E5 Stepper
-#if AXIS_DRIVER_TYPE_E5(TMC26X)
-  extern TMC26XStepper stepperE5;
-  #define E5_ENABLE_INIT() NOOP
-  #define E5_ENABLE_WRITE(STATE) stepperE5.setEnabled(STATE)
-  #define E5_ENABLE_READ() stepperE5.isEnabled()
-#endif
-
-// E6 Stepper
-#if AXIS_DRIVER_TYPE_E6(TMC26X)
-  extern TMC26XStepper stepperE6;
-  #define E6_ENABLE_INIT() NOOP
-  #define E6_ENABLE_WRITE(STATE) stepperE6.setEnabled(STATE)
-  #define E6_ENABLE_READ() stepperE6.isEnabled()
-#endif
-
-// E7 Stepper
-#if AXIS_DRIVER_TYPE_E7(TMC26X)
-  extern TMC26XStepper stepperE7;
-  #define E7_ENABLE_INIT() NOOP
-  #define E7_ENABLE_WRITE(STATE) stepperE7.setEnabled(STATE)
-  #define E7_ENABLE_READ() stepperE7.isEnabled()
-#endif

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/module/stepper/TMC26X.h b/Marlin/src/module/stepper/TMC26X.h
index 988bebe0f2..1fd94b26a8 100644
--- a/Marlin/src/module/stepper/TMC26X.h
+++ b/Marlin/src/module/stepper/TMC26X.h
@@ -116,20 +116,44 @@ void tmc26x_init_to_defaults();
 #endif
 
 // K Stepper
 #if HAS_K_ENABLE && AXIS_DRIVER_TYPE_K(TMC26X)
   extern TMC26XStepper stepperK;
   #define K_ENABLE_INIT() NOOP
   #define K_ENABLE_WRITE(STATE) stepperK.setEnabled(STATE)
   #define K_ENABLE_READ() stepperK.isEnabled()
 #endif
 
+// U Stepper
+#if HAS_U_ENABLE && AXIS_DRIVER_TYPE_U(TMC26X)
+  extern TMC26XStepper stepperU;
+  #define U_ENABLE_INIT() NOOP
+  #define U_ENABLE_WRITE(STATE) stepperU.setEnabled(STATE)
+  #define U_ENABLE_READ() stepperU.isEnabled()
+#endif
+
+// V Stepper
+#if HAS_V_ENABLE && AXIS_DRIVER_TYPE_V(TMC26X)
+  extern TMC26XStepper stepperV;
+  #define V_ENABLE_INIT() NOOP
+  #define V_ENABLE_WRITE(STATE) stepperV.setEnabled(STATE)
+  #define V_ENABLE_READ() stepperV.isEnabled()
+#endif
+
+// W Stepper
+#if HAS_W_ENABLE && AXIS_DRIVER_TYPE_W(TMC26X)
+  extern TMC26XStepper stepperW;
+  #define W_ENABLE_INIT() NOOP
+  #define W_ENABLE_WRITE(STATE) stepperW.setEnabled(STATE)
+  #define W_ENABLE_READ() stepperW.isEnabled()
+#endif
+
 // E0 Stepper
 #if AXIS_DRIVER_TYPE_E0(TMC26X)
   extern TMC26XStepper stepperE0;
   #define E0_ENABLE_INIT() NOOP
   #define E0_ENABLE_WRITE(STATE) stepperE0.setEnabled(STATE)
   #define E0_ENABLE_READ() stepperE0.isEnabled()
 #endif
 
 // E1 Stepper
 #if AXIS_DRIVER_TYPE_E1(TMC26X)

commit 7726af9c5348c1c7d0fd9a56eca87d00cd75fee6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Jun 5 09:18:47 2021 +0200

    üèóÔ∏è Support for up to 6 linear axes (#19112)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/module/stepper/TMC26X.h b/Marlin/src/module/stepper/TMC26X.h
index 547eb6521f..988bebe0f2 100644
--- a/Marlin/src/module/stepper/TMC26X.h
+++ b/Marlin/src/module/stepper/TMC26X.h
@@ -92,20 +92,44 @@ void tmc26x_init_to_defaults();
 #endif
 
 // Z4 Stepper
 #if HAS_Z4_ENABLE && AXIS_DRIVER_TYPE_Z4(TMC26X)
   extern TMC26XStepper stepperZ4;
   #define Z4_ENABLE_INIT() NOOP
   #define Z4_ENABLE_WRITE(STATE) stepperZ4.setEnabled(STATE)
   #define Z4_ENABLE_READ() stepperZ4.isEnabled()
 #endif
 
+// I Stepper
+#if HAS_I_ENABLE && AXIS_DRIVER_TYPE_I(TMC26X)
+  extern TMC26XStepper stepperI;
+  #define I_ENABLE_INIT() NOOP
+  #define I_ENABLE_WRITE(STATE) stepperI.setEnabled(STATE)
+  #define I_ENABLE_READ() stepperI.isEnabled()
+#endif
+
+// J Stepper
+#if HAS_J_ENABLE && AXIS_DRIVER_TYPE_J(TMC26X)
+  extern TMC26XStepper stepperJ;
+  #define J_ENABLE_INIT() NOOP
+  #define J_ENABLE_WRITE(STATE) stepperJ.setEnabled(STATE)
+  #define J_ENABLE_READ() stepperJ.isEnabled()
+#endif
+
+// K Stepper
+#if HAS_K_ENABLE && AXIS_DRIVER_TYPE_K(TMC26X)
+  extern TMC26XStepper stepperK;
+  #define K_ENABLE_INIT() NOOP
+  #define K_ENABLE_WRITE(STATE) stepperK.setEnabled(STATE)
+  #define K_ENABLE_READ() stepperK.isEnabled()
+#endif
+
 // E0 Stepper
 #if AXIS_DRIVER_TYPE_E0(TMC26X)
   extern TMC26XStepper stepperE0;
   #define E0_ENABLE_INIT() NOOP
   #define E0_ENABLE_WRITE(STATE) stepperE0.setEnabled(STATE)
   #define E0_ENABLE_READ() stepperE0.isEnabled()
 #endif
 
 // E1 Stepper
 #if AXIS_DRIVER_TYPE_E1(TMC26X)

commit 3a396a25dc9e33be2c18a1bdc23600295e42c82e
Author: Jason Smith <jason.inet@gmail.com>
Date:   Wed Nov 25 22:37:18 2020 -0800

    Retire HAL for STM32F4 / F7 (#20153)

diff --git a/Marlin/src/module/stepper/TMC26X.h b/Marlin/src/module/stepper/TMC26X.h
index 8977266b47..547eb6521f 100644
--- a/Marlin/src/module/stepper/TMC26X.h
+++ b/Marlin/src/module/stepper/TMC26X.h
@@ -24,25 +24,21 @@
 /**
  * stepper/TMC26X.h
  * Stepper driver indirection for TMC26X drivers
  */
 
 #include "../../inc/MarlinConfig.h"
 
 // TMC26X drivers have STEP/DIR on normal pins, but ENABLE via SPI
 
 #include <SPI.h>
-#if defined(STM32GENERIC) && defined(STM32F7)
-  #include "../../HAL/STM32_F4_F7/STM32F7/TMC2660.h"
-#else
-  #include <TMC26XStepper.h>
-#endif
+#include <TMC26XStepper.h>
 
 void tmc26x_init_to_defaults();
 
 // X Stepper
 #if AXIS_DRIVER_TYPE_X(TMC26X)
   extern TMC26XStepper stepperX;
   #define X_ENABLE_INIT() NOOP
   #define X_ENABLE_WRITE(STATE) stepperX.setEnabled(STATE)
   #define X_ENABLE_READ() stepperX.isEnabled()
 #endif

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/module/stepper/TMC26X.h b/Marlin/src/module/stepper/TMC26X.h
index 39192cea25..8977266b47 100644
--- a/Marlin/src/module/stepper/TMC26X.h
+++ b/Marlin/src/module/stepper/TMC26X.h
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 /**
  * stepper/TMC26X.h
  * Stepper driver indirection for TMC26X drivers
  */
 
 #include "../../inc/MarlinConfig.h"

commit 6bead0c1b04152f6a291d851f6cd4029fe0fc616
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 16:29:29 2020 -0500

    Shorter paths to HAL, ExtUI (#17156)

diff --git a/Marlin/src/module/stepper/TMC26X.h b/Marlin/src/module/stepper/TMC26X.h
index d44bc19a74..39192cea25 100644
--- a/Marlin/src/module/stepper/TMC26X.h
+++ b/Marlin/src/module/stepper/TMC26X.h
@@ -25,21 +25,21 @@
  * stepper/TMC26X.h
  * Stepper driver indirection for TMC26X drivers
  */
 
 #include "../../inc/MarlinConfig.h"
 
 // TMC26X drivers have STEP/DIR on normal pins, but ENABLE via SPI
 
 #include <SPI.h>
 #if defined(STM32GENERIC) && defined(STM32F7)
-  #include "../../HAL/HAL_STM32_F4_F7/STM32F7/TMC2660.h"
+  #include "../../HAL/STM32_F4_F7/STM32F7/TMC2660.h"
 #else
   #include <TMC26XStepper.h>
 #endif
 
 void tmc26x_init_to_defaults();
 
 // X Stepper
 #if AXIS_DRIVER_TYPE_X(TMC26X)
   extern TMC26XStepper stepperX;
   #define X_ENABLE_INIT() NOOP

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/module/stepper/TMC26X.h b/Marlin/src/module/stepper/TMC26X.h
index 73cba31706..d44bc19a74 100644
--- a/Marlin/src/module/stepper/TMC26X.h
+++ b/Marlin/src/module/stepper/TMC26X.h
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 248b7dfa591a34a8aa1c6960944e1a3a468ad1de
Author: yangwenxiong <46896566+yangwenxiong@users.noreply.github.com>
Date:   Sat Jan 25 16:13:39 2020 +0800

    BigTreeTech GTR V1.0 / Support 8 extruders, heaters, temp sensors, fans (#16595)

diff --git a/Marlin/src/module/stepper/TMC26X.h b/Marlin/src/module/stepper/TMC26X.h
index f3914332cc..73cba31706 100644
--- a/Marlin/src/module/stepper/TMC26X.h
+++ b/Marlin/src/module/stepper/TMC26X.h
@@ -143,10 +143,26 @@ void tmc26x_init_to_defaults();
   #define E4_ENABLE_READ() stepperE4.isEnabled()
 #endif
 
 // E5 Stepper
 #if AXIS_DRIVER_TYPE_E5(TMC26X)
   extern TMC26XStepper stepperE5;
   #define E5_ENABLE_INIT() NOOP
   #define E5_ENABLE_WRITE(STATE) stepperE5.setEnabled(STATE)
   #define E5_ENABLE_READ() stepperE5.isEnabled()
 #endif
+
+// E6 Stepper
+#if AXIS_DRIVER_TYPE_E6(TMC26X)
+  extern TMC26XStepper stepperE6;
+  #define E6_ENABLE_INIT() NOOP
+  #define E6_ENABLE_WRITE(STATE) stepperE6.setEnabled(STATE)
+  #define E6_ENABLE_READ() stepperE6.isEnabled()
+#endif
+
+// E7 Stepper
+#if AXIS_DRIVER_TYPE_E7(TMC26X)
+  extern TMC26XStepper stepperE7;
+  #define E7_ENABLE_INIT() NOOP
+  #define E7_ENABLE_WRITE(STATE) stepperE7.setEnabled(STATE)
+  #define E7_ENABLE_READ() stepperE7.isEnabled()
+#endif

commit 0fcf2b1110d9f0d362e5aab9cc73d963710e9865
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Mon Jan 20 00:35:07 2020 -0500

    Quad Z stepper support (#16277)

diff --git a/Marlin/src/module/stepper/TMC26X.h b/Marlin/src/module/stepper/TMC26X.h
index b4a742edcd..f3914332cc 100644
--- a/Marlin/src/module/stepper/TMC26X.h
+++ b/Marlin/src/module/stepper/TMC26X.h
@@ -88,20 +88,28 @@ void tmc26x_init_to_defaults();
 #endif
 
 // Z3 Stepper
 #if HAS_Z3_ENABLE && AXIS_DRIVER_TYPE_Z3(TMC26X)
   extern TMC26XStepper stepperZ3;
   #define Z3_ENABLE_INIT() NOOP
   #define Z3_ENABLE_WRITE(STATE) stepperZ3.setEnabled(STATE)
   #define Z3_ENABLE_READ() stepperZ3.isEnabled()
 #endif
 
+// Z4 Stepper
+#if HAS_Z4_ENABLE && AXIS_DRIVER_TYPE_Z4(TMC26X)
+  extern TMC26XStepper stepperZ4;
+  #define Z4_ENABLE_INIT() NOOP
+  #define Z4_ENABLE_WRITE(STATE) stepperZ4.setEnabled(STATE)
+  #define Z4_ENABLE_READ() stepperZ4.isEnabled()
+#endif
+
 // E0 Stepper
 #if AXIS_DRIVER_TYPE_E0(TMC26X)
   extern TMC26XStepper stepperE0;
   #define E0_ENABLE_INIT() NOOP
   #define E0_ENABLE_WRITE(STATE) stepperE0.setEnabled(STATE)
   #define E0_ENABLE_READ() stepperE0.isEnabled()
 #endif
 
 // E1 Stepper
 #if AXIS_DRIVER_TYPE_E1(TMC26X)

commit 707349d492c2544d32af7287aca4ddbaf1473542
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jan 19 19:52:01 2020 -0600

    Updates for L64XX

diff --git a/Marlin/src/module/stepper/TMC26X.h b/Marlin/src/module/stepper/TMC26X.h
index a1c2704823..b4a742edcd 100644
--- a/Marlin/src/module/stepper/TMC26X.h
+++ b/Marlin/src/module/stepper/TMC26X.h
@@ -35,110 +35,110 @@
   #include "../../HAL/HAL_STM32_F4_F7/STM32F7/TMC2660.h"
 #else
   #include <TMC26XStepper.h>
 #endif
 
 void tmc26x_init_to_defaults();
 
 // X Stepper
 #if AXIS_DRIVER_TYPE_X(TMC26X)
   extern TMC26XStepper stepperX;
-  #define X_ENABLE_INIT NOOP
+  #define X_ENABLE_INIT() NOOP
   #define X_ENABLE_WRITE(STATE) stepperX.setEnabled(STATE)
   #define X_ENABLE_READ() stepperX.isEnabled()
 #endif
 
 // Y Stepper
 #if AXIS_DRIVER_TYPE_Y(TMC26X)
   extern TMC26XStepper stepperY;
-  #define Y_ENABLE_INIT NOOP
+  #define Y_ENABLE_INIT() NOOP
   #define Y_ENABLE_WRITE(STATE) stepperY.setEnabled(STATE)
   #define Y_ENABLE_READ() stepperY.isEnabled()
 #endif
 
 // Z Stepper
 #if AXIS_DRIVER_TYPE_Z(TMC26X)
   extern TMC26XStepper stepperZ;
-  #define Z_ENABLE_INIT NOOP
+  #define Z_ENABLE_INIT() NOOP
   #define Z_ENABLE_WRITE(STATE) stepperZ.setEnabled(STATE)
   #define Z_ENABLE_READ() stepperZ.isEnabled()
 #endif
 
 // X2 Stepper
 #if HAS_X2_ENABLE && AXIS_DRIVER_TYPE_X2(TMC26X)
   extern TMC26XStepper stepperX2;
-  #define X2_ENABLE_INIT NOOP
+  #define X2_ENABLE_INIT() NOOP
   #define X2_ENABLE_WRITE(STATE) stepperX2.setEnabled(STATE)
   #define X2_ENABLE_READ() stepperX2.isEnabled()
 #endif
 
 // Y2 Stepper
 #if HAS_Y2_ENABLE && AXIS_DRIVER_TYPE_Y2(TMC26X)
   extern TMC26XStepper stepperY2;
-  #define Y2_ENABLE_INIT NOOP
+  #define Y2_ENABLE_INIT() NOOP
   #define Y2_ENABLE_WRITE(STATE) stepperY2.setEnabled(STATE)
   #define Y2_ENABLE_READ() stepperY2.isEnabled()
 #endif
 
 // Z2 Stepper
 #if HAS_Z2_ENABLE && AXIS_DRIVER_TYPE_Z2(TMC26X)
   extern TMC26XStepper stepperZ2;
-  #define Z2_ENABLE_INIT NOOP
+  #define Z2_ENABLE_INIT() NOOP
   #define Z2_ENABLE_WRITE(STATE) stepperZ2.setEnabled(STATE)
   #define Z2_ENABLE_READ() stepperZ2.isEnabled()
 #endif
 
 // Z3 Stepper
-#if HAS_Z3_ENABLE && ENABLED(Z3_IS_TMC26X)
+#if HAS_Z3_ENABLE && AXIS_DRIVER_TYPE_Z3(TMC26X)
   extern TMC26XStepper stepperZ3;
-  #define Z3_ENABLE_INIT NOOP
+  #define Z3_ENABLE_INIT() NOOP
   #define Z3_ENABLE_WRITE(STATE) stepperZ3.setEnabled(STATE)
   #define Z3_ENABLE_READ() stepperZ3.isEnabled()
 #endif
 
 // E0 Stepper
 #if AXIS_DRIVER_TYPE_E0(TMC26X)
   extern TMC26XStepper stepperE0;
-  #define E0_ENABLE_INIT NOOP
+  #define E0_ENABLE_INIT() NOOP
   #define E0_ENABLE_WRITE(STATE) stepperE0.setEnabled(STATE)
   #define E0_ENABLE_READ() stepperE0.isEnabled()
 #endif
 
 // E1 Stepper
 #if AXIS_DRIVER_TYPE_E1(TMC26X)
   extern TMC26XStepper stepperE1;
-  #define E1_ENABLE_INIT NOOP
+  #define E1_ENABLE_INIT() NOOP
   #define E1_ENABLE_WRITE(STATE) stepperE1.setEnabled(STATE)
   #define E1_ENABLE_READ() stepperE1.isEnabled()
 #endif
 
 // E2 Stepper
 #if AXIS_DRIVER_TYPE_E2(TMC26X)
   extern TMC26XStepper stepperE2;
-  #define E2_ENABLE_INIT NOOP
+  #define E2_ENABLE_INIT() NOOP
   #define E2_ENABLE_WRITE(STATE) stepperE2.setEnabled(STATE)
   #define E2_ENABLE_READ() stepperE2.isEnabled()
 #endif
 
 // E3 Stepper
 #if AXIS_DRIVER_TYPE_E3(TMC26X)
   extern TMC26XStepper stepperE3;
-  #define E3_ENABLE_INIT NOOP
+  #define E3_ENABLE_INIT() NOOP
   #define E3_ENABLE_WRITE(STATE) stepperE3.setEnabled(STATE)
   #define E3_ENABLE_READ() stepperE3.isEnabled()
 #endif
 
 // E4 Stepper
 #if AXIS_DRIVER_TYPE_E4(TMC26X)
   extern TMC26XStepper stepperE4;
-  #define E4_ENABLE_INIT NOOP
+  #define E4_ENABLE_INIT() NOOP
   #define E4_ENABLE_WRITE(STATE) stepperE4.setEnabled(STATE)
   #define E4_ENABLE_READ() stepperE4.isEnabled()
 #endif
 
 // E5 Stepper
 #if AXIS_DRIVER_TYPE_E5(TMC26X)
   extern TMC26XStepper stepperE5;
-  #define E5_ENABLE_INIT NOOP
+  #define E5_ENABLE_INIT() NOOP
   #define E5_ENABLE_WRITE(STATE) stepperE5.setEnabled(STATE)
   #define E5_ENABLE_READ() stepperE5.isEnabled()
 #endif

commit 7496e1cd6745fe72fc6c12e0792575bb7ffefad4
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Sep 4 21:40:40 2019 -0500

    whitespace

diff --git a/Marlin/src/module/stepper/TMC26X.h b/Marlin/src/module/stepper/TMC26X.h
index d195a50c03..a1c2704823 100644
--- a/Marlin/src/module/stepper/TMC26X.h
+++ b/Marlin/src/module/stepper/TMC26X.h
@@ -25,23 +25,23 @@
  * stepper/TMC26X.h
  * Stepper driver indirection for TMC26X drivers
  */
 
 #include "../../inc/MarlinConfig.h"
 
 // TMC26X drivers have STEP/DIR on normal pins, but ENABLE via SPI
 
 #include <SPI.h>
 #if defined(STM32GENERIC) && defined(STM32F7)
- #include "../../HAL/HAL_STM32_F4_F7/STM32F7/TMC2660.h"
+  #include "../../HAL/HAL_STM32_F4_F7/STM32F7/TMC2660.h"
 #else
- #include <TMC26XStepper.h>
+  #include <TMC26XStepper.h>
 #endif
 
 void tmc26x_init_to_defaults();
 
 // X Stepper
 #if AXIS_DRIVER_TYPE_X(TMC26X)
   extern TMC26XStepper stepperX;
   #define X_ENABLE_INIT NOOP
   #define X_ENABLE_WRITE(STATE) stepperX.setEnabled(STATE)
   #define X_ENABLE_READ() stepperX.isEnabled()

commit 586b334c2ab61240607e878390ed1d53af86da69
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Aug 31 19:44:45 2019 -0500

    Split up stepper indirection (#15111)

diff --git a/Marlin/src/module/stepper/TMC26X.h b/Marlin/src/module/stepper/TMC26X.h
new file mode 100644
index 0000000000..d195a50c03
--- /dev/null
+++ b/Marlin/src/module/stepper/TMC26X.h
@@ -0,0 +1,144 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+/**
+ * stepper/TMC26X.h
+ * Stepper driver indirection for TMC26X drivers
+ */
+
+#include "../../inc/MarlinConfig.h"
+
+// TMC26X drivers have STEP/DIR on normal pins, but ENABLE via SPI
+
+#include <SPI.h>
+#if defined(STM32GENERIC) && defined(STM32F7)
+ #include "../../HAL/HAL_STM32_F4_F7/STM32F7/TMC2660.h"
+#else
+ #include <TMC26XStepper.h>
+#endif
+
+void tmc26x_init_to_defaults();
+
+// X Stepper
+#if AXIS_DRIVER_TYPE_X(TMC26X)
+  extern TMC26XStepper stepperX;
+  #define X_ENABLE_INIT NOOP
+  #define X_ENABLE_WRITE(STATE) stepperX.setEnabled(STATE)
+  #define X_ENABLE_READ() stepperX.isEnabled()
+#endif
+
+// Y Stepper
+#if AXIS_DRIVER_TYPE_Y(TMC26X)
+  extern TMC26XStepper stepperY;
+  #define Y_ENABLE_INIT NOOP
+  #define Y_ENABLE_WRITE(STATE) stepperY.setEnabled(STATE)
+  #define Y_ENABLE_READ() stepperY.isEnabled()
+#endif
+
+// Z Stepper
+#if AXIS_DRIVER_TYPE_Z(TMC26X)
+  extern TMC26XStepper stepperZ;
+  #define Z_ENABLE_INIT NOOP
+  #define Z_ENABLE_WRITE(STATE) stepperZ.setEnabled(STATE)
+  #define Z_ENABLE_READ() stepperZ.isEnabled()
+#endif
+
+// X2 Stepper
+#if HAS_X2_ENABLE && AXIS_DRIVER_TYPE_X2(TMC26X)
+  extern TMC26XStepper stepperX2;
+  #define X2_ENABLE_INIT NOOP
+  #define X2_ENABLE_WRITE(STATE) stepperX2.setEnabled(STATE)
+  #define X2_ENABLE_READ() stepperX2.isEnabled()
+#endif
+
+// Y2 Stepper
+#if HAS_Y2_ENABLE && AXIS_DRIVER_TYPE_Y2(TMC26X)
+  extern TMC26XStepper stepperY2;
+  #define Y2_ENABLE_INIT NOOP
+  #define Y2_ENABLE_WRITE(STATE) stepperY2.setEnabled(STATE)
+  #define Y2_ENABLE_READ() stepperY2.isEnabled()
+#endif
+
+// Z2 Stepper
+#if HAS_Z2_ENABLE && AXIS_DRIVER_TYPE_Z2(TMC26X)
+  extern TMC26XStepper stepperZ2;
+  #define Z2_ENABLE_INIT NOOP
+  #define Z2_ENABLE_WRITE(STATE) stepperZ2.setEnabled(STATE)
+  #define Z2_ENABLE_READ() stepperZ2.isEnabled()
+#endif
+
+// Z3 Stepper
+#if HAS_Z3_ENABLE && ENABLED(Z3_IS_TMC26X)
+  extern TMC26XStepper stepperZ3;
+  #define Z3_ENABLE_INIT NOOP
+  #define Z3_ENABLE_WRITE(STATE) stepperZ3.setEnabled(STATE)
+  #define Z3_ENABLE_READ() stepperZ3.isEnabled()
+#endif
+
+// E0 Stepper
+#if AXIS_DRIVER_TYPE_E0(TMC26X)
+  extern TMC26XStepper stepperE0;
+  #define E0_ENABLE_INIT NOOP
+  #define E0_ENABLE_WRITE(STATE) stepperE0.setEnabled(STATE)
+  #define E0_ENABLE_READ() stepperE0.isEnabled()
+#endif
+
+// E1 Stepper
+#if AXIS_DRIVER_TYPE_E1(TMC26X)
+  extern TMC26XStepper stepperE1;
+  #define E1_ENABLE_INIT NOOP
+  #define E1_ENABLE_WRITE(STATE) stepperE1.setEnabled(STATE)
+  #define E1_ENABLE_READ() stepperE1.isEnabled()
+#endif
+
+// E2 Stepper
+#if AXIS_DRIVER_TYPE_E2(TMC26X)
+  extern TMC26XStepper stepperE2;
+  #define E2_ENABLE_INIT NOOP
+  #define E2_ENABLE_WRITE(STATE) stepperE2.setEnabled(STATE)
+  #define E2_ENABLE_READ() stepperE2.isEnabled()
+#endif
+
+// E3 Stepper
+#if AXIS_DRIVER_TYPE_E3(TMC26X)
+  extern TMC26XStepper stepperE3;
+  #define E3_ENABLE_INIT NOOP
+  #define E3_ENABLE_WRITE(STATE) stepperE3.setEnabled(STATE)
+  #define E3_ENABLE_READ() stepperE3.isEnabled()
+#endif
+
+// E4 Stepper
+#if AXIS_DRIVER_TYPE_E4(TMC26X)
+  extern TMC26XStepper stepperE4;
+  #define E4_ENABLE_INIT NOOP
+  #define E4_ENABLE_WRITE(STATE) stepperE4.setEnabled(STATE)
+  #define E4_ENABLE_READ() stepperE4.isEnabled()
+#endif
+
+// E5 Stepper
+#if AXIS_DRIVER_TYPE_E5(TMC26X)
+  extern TMC26XStepper stepperE5;
+  #define E5_ENABLE_INIT NOOP
+  #define E5_ENABLE_WRITE(STATE) stepperE5.setEnabled(STATE)
+  #define E5_ENABLE_READ() stepperE5.isEnabled()
+#endif
