commit c8d51c27234bcb2b1419d238e8751593d855dadb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Mar 2 04:16:39 2024 +0100

    üö∏ Enable G92.9 with rotational axes (#26174)
    
    - Supporting axes that can rotate forever.

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 626441f4e2..cfdff51eba 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -35,21 +35,21 @@
  *
  * Since E has no Workspace Offset, it is always set directly.
  *
  * Without Workspace Offsets (e.g., with NO_WORKSPACE_OFFSETS):
  *   G92   : Set NATIVE Current Position to the given X [Y [Z [A [B [C [U [V [W ]]]]]]]] [E].
  *
  * Using Workspace Offsets (default Marlin behavior):
  *   G92   : Modify Workspace Offsets so the reported position shows the given X [Y [Z [A [B [C [U [V [W ]]]]]]]] [E].
  *   G92.1 : Zero XYZ Workspace Offsets (so the reported position = the native position).
  *
- * With POWER_LOSS_RECOVERY:
+ * With POWER_LOSS_RECOVERY or with AXISn_ROTATES:
  *   G92.9 : Set NATIVE Current Position to the given X [Y [Z [A [B [C [U [V [W ]]]]]]]] [E].
  */
 void GcodeSuite::G92() {
 
   #if HAS_EXTRUDERS
     bool sync_E = false;
   #endif
   bool sync_XYZE = false;
 
   #if USE_GCODE_SUBCODES
@@ -60,21 +60,21 @@ void GcodeSuite::G92() {
 
   switch (subcode_G92) {
     default: return;                                                  // Ignore unknown G92.x
 
     #if ENABLED(CNC_COORDINATE_SYSTEMS) && !IS_SCARA
       case 1:                                                         // G92.1 - Zero the Workspace Offset
         workspace_offset.reset();
         break;
     #endif
 
-    #if ENABLED(POWER_LOSS_RECOVERY)
+    #if ANY(POWER_LOSS_RECOVERY, HAS_ROTATIONAL_AXES)
       case 9:                                                         // G92.9 - Set Current Position directly (like Marlin 1.0)
         LOOP_LOGICAL_AXES(i) {
           if (parser.seenval(AXIS_CHAR(i))) {
             if (TERN1(HAS_EXTRUDERS, i != E_AXIS))
               sync_XYZE = true;
             else {
               TERN_(HAS_EXTRUDERS, sync_E = true);
             }
             current_position[i] = parser.value_axis_units((AxisEnum)i);
           }

commit 9135e3f7d3fd0d634656f1c54c70a0ba1f878bfd
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jul 20 21:10:03 2023 -0500

    üö∏ Revert M206 Home Offset behavior (#25996)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index dfe4170620..626441f4e2 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -56,24 +56,21 @@ void GcodeSuite::G92() {
     const uint8_t subcode_G92 = parser.subcode;
   #else
     constexpr uint8_t subcode_G92 = 0;
   #endif
 
   switch (subcode_G92) {
     default: return;                                                  // Ignore unknown G92.x
 
     #if ENABLED(CNC_COORDINATE_SYSTEMS) && !IS_SCARA
       case 1:                                                         // G92.1 - Zero the Workspace Offset
-        LOOP_NUM_AXES(i) if (position_shift[i]) {
-          position_shift[i] = 0;
-          update_workspace_offset((AxisEnum)i);
-        }
+        workspace_offset.reset();
         break;
     #endif
 
     #if ENABLED(POWER_LOSS_RECOVERY)
       case 9:                                                         // G92.9 - Set Current Position directly (like Marlin 1.0)
         LOOP_LOGICAL_AXES(i) {
           if (parser.seenval(AXIS_CHAR(i))) {
             if (TERN1(HAS_EXTRUDERS, i != E_AXIS))
               sync_XYZE = true;
             else {
@@ -85,24 +82,23 @@ void GcodeSuite::G92() {
         break;
     #endif
 
     case 0:
       LOOP_LOGICAL_AXES(i) {
         if (parser.seenval(AXIS_CHAR(i))) {
           const float l = parser.value_axis_units((AxisEnum)i),   // Given axis coordinate value, converted to millimeters
                       v = TERN0(HAS_EXTRUDERS, i == E_AXIS) ? l : LOGICAL_TO_NATIVE(l, i),  // Axis position in NATIVE space (applying the existing offset)
                       d = v - current_position[i];                // How much is the current axis position altered by?
           if (!NEAR_ZERO(d)) {
-            #if HAS_POSITION_SHIFT && NONE(IS_SCARA, POLARGRAPH)  // When using workspaces...
+            #if HAS_WORKSPACE_OFFSET && NONE(IS_SCARA, POLARGRAPH)  // When using workspaces...
               if (TERN1(HAS_EXTRUDERS, i != E_AXIS)) {
-                position_shift[i] += d;                           // ...most axes offset the workspace...
-                update_workspace_offset((AxisEnum)i);
+                workspace_offset[i] += d;                         // ...most axes offset the workspace...
               }
               else {
                 #if HAS_EXTRUDERS
                   sync_E = true;
                   current_position.e = v;                         // ...but E is set directly
                 #endif
               }
             #else                                                 // Without workspaces...
               if (TERN1(HAS_EXTRUDERS, i != E_AXIS))
                 sync_XYZE = true;
@@ -113,20 +109,20 @@ void GcodeSuite::G92() {
             #endif
           }
         }
       }
       break;
   }
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     // Apply Workspace Offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
-      coordinate_system[active_coordinate_system] = position_shift;
+      coordinate_system[active_coordinate_system] = workspace_offset;
   #endif
 
   if (sync_XYZE) sync_plan_position();
   #if HAS_EXTRUDERS
     else if (sync_E) sync_plan_position_e();
   #endif
 
   IF_DISABLED(DIRECT_STEPPING, report_current_position());
 }

commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    üßë‚Äçüíª Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index b36f21d3c0..dfe4170620 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -81,42 +81,42 @@ void GcodeSuite::G92() {
             }
             current_position[i] = parser.value_axis_units((AxisEnum)i);
           }
         }
         break;
     #endif
 
     case 0:
       LOOP_LOGICAL_AXES(i) {
         if (parser.seenval(AXIS_CHAR(i))) {
-          const float l = parser.value_axis_units((AxisEnum)i),       // Given axis coordinate value, converted to millimeters
+          const float l = parser.value_axis_units((AxisEnum)i),   // Given axis coordinate value, converted to millimeters
                       v = TERN0(HAS_EXTRUDERS, i == E_AXIS) ? l : LOGICAL_TO_NATIVE(l, i),  // Axis position in NATIVE space (applying the existing offset)
-                      d = v - current_position[i];                    // How much is the current axis position altered by?
+                      d = v - current_position[i];                // How much is the current axis position altered by?
           if (!NEAR_ZERO(d)) {
-            #if HAS_POSITION_SHIFT && NONE(IS_SCARA, POLARGRAPH)      // When using workspaces...
+            #if HAS_POSITION_SHIFT && NONE(IS_SCARA, POLARGRAPH)  // When using workspaces...
               if (TERN1(HAS_EXTRUDERS, i != E_AXIS)) {
-                position_shift[i] += d;                               // ...most axes offset the workspace...
+                position_shift[i] += d;                           // ...most axes offset the workspace...
                 update_workspace_offset((AxisEnum)i);
               }
               else {
                 #if HAS_EXTRUDERS
                   sync_E = true;
-                  current_position.e = v;                             // ...but E is set directly
+                  current_position.e = v;                         // ...but E is set directly
                 #endif
               }
-            #else                                                     // Without workspaces...
+            #else                                                 // Without workspaces...
               if (TERN1(HAS_EXTRUDERS, i != E_AXIS))
                 sync_XYZE = true;
               else {
                 TERN_(HAS_EXTRUDERS, sync_E = true);
               }
-              current_position[i] = v;                                // ...set Current Position directly (like Marlin 1.0)
+              current_position[i] = v;                            // ...set Current Position directly (like Marlin 1.0)
             #endif
           }
         }
       }
       break;
   }
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     // Apply Workspace Offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))

commit 21c48d9f927c81d7b7cf6fc3641ce01a831a16ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jul 27 04:24:50 2022 -0500

    üßë‚Äçüíª  Update planner/stepper includes

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 58ed26a15a..b36f21d3c0 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -15,21 +15,20 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 #include "../gcode.h"
 #include "../../module/motion.h"
-#include "../../module/stepper.h"
 
 #if ENABLED(I2C_POSITION_ENCODERS)
   #include "../../feature/encoder_i2c.h"
 #endif
 
 /**
  * G92: Set the Current Position to the given X [Y [Z [A [B [C [U [V [W ]]]]]]]] [E] values.
  *
  * Behind the scenes the G92 command may modify the Current Position
  * or the Position Shift depending on settings and sub-commands.

commit af59056c0904dfc95c870b905ada0ebb6dc9b05e
Author: Arthur Masson <arthur.sw@gmail.com>
Date:   Sat May 21 21:45:30 2022 +0200

    üêõ Fix Polargraph G92 command (#24223)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 6e14cc4df9..58ed26a15a 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -86,21 +86,21 @@ void GcodeSuite::G92() {
         break;
     #endif
 
     case 0:
       LOOP_LOGICAL_AXES(i) {
         if (parser.seenval(AXIS_CHAR(i))) {
           const float l = parser.value_axis_units((AxisEnum)i),       // Given axis coordinate value, converted to millimeters
                       v = TERN0(HAS_EXTRUDERS, i == E_AXIS) ? l : LOGICAL_TO_NATIVE(l, i),  // Axis position in NATIVE space (applying the existing offset)
                       d = v - current_position[i];                    // How much is the current axis position altered by?
           if (!NEAR_ZERO(d)) {
-            #if HAS_POSITION_SHIFT && !IS_SCARA                       // When using workspaces...
+            #if HAS_POSITION_SHIFT && NONE(IS_SCARA, POLARGRAPH)      // When using workspaces...
               if (TERN1(HAS_EXTRUDERS, i != E_AXIS)) {
                 position_shift[i] += d;                               // ...most axes offset the workspace...
                 update_workspace_offset((AxisEnum)i);
               }
               else {
                 #if HAS_EXTRUDERS
                   sync_E = true;
                   current_position.e = v;                             // ...but E is set directly
                 #endif
               }

commit 8b8defeacc5f7ba2bac63baf65c1d3b1ef60177c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 3 20:52:27 2022 -0500

    üèóÔ∏è Extend AXIS_CHAR to include E
    
    Co-Authored-By: DerAndere <26200979+DerAndere1@users.noreply.github.com>

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 2407599239..6e14cc4df9 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -67,35 +67,35 @@ void GcodeSuite::G92() {
         LOOP_NUM_AXES(i) if (position_shift[i]) {
           position_shift[i] = 0;
           update_workspace_offset((AxisEnum)i);
         }
         break;
     #endif
 
     #if ENABLED(POWER_LOSS_RECOVERY)
       case 9:                                                         // G92.9 - Set Current Position directly (like Marlin 1.0)
         LOOP_LOGICAL_AXES(i) {
-          if (parser.seenval(axis_codes[i])) {
+          if (parser.seenval(AXIS_CHAR(i))) {
             if (TERN1(HAS_EXTRUDERS, i != E_AXIS))
               sync_XYZE = true;
             else {
               TERN_(HAS_EXTRUDERS, sync_E = true);
             }
             current_position[i] = parser.value_axis_units((AxisEnum)i);
           }
         }
         break;
     #endif
 
     case 0:
       LOOP_LOGICAL_AXES(i) {
-        if (parser.seenval(axis_codes[i])) {
+        if (parser.seenval(AXIS_CHAR(i))) {
           const float l = parser.value_axis_units((AxisEnum)i),       // Given axis coordinate value, converted to millimeters
                       v = TERN0(HAS_EXTRUDERS, i == E_AXIS) ? l : LOGICAL_TO_NATIVE(l, i),  // Axis position in NATIVE space (applying the existing offset)
                       d = v - current_position[i];                    // How much is the current axis position altered by?
           if (!NEAR_ZERO(d)) {
             #if HAS_POSITION_SHIFT && !IS_SCARA                       // When using workspaces...
               if (TERN1(HAS_EXTRUDERS, i != E_AXIS)) {
                 position_shift[i] += d;                               // ...most axes offset the workspace...
                 update_workspace_offset((AxisEnum)i);
               }
               else {

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 3c49fe2a26..2407599239 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -22,56 +22,56 @@
 
 #include "../gcode.h"
 #include "../../module/motion.h"
 #include "../../module/stepper.h"
 
 #if ENABLED(I2C_POSITION_ENCODERS)
   #include "../../feature/encoder_i2c.h"
 #endif
 
 /**
- * G92: Set the Current Position to the given X [Y [Z [A [B [C [E]]]]]] values.
+ * G92: Set the Current Position to the given X [Y [Z [A [B [C [U [V [W ]]]]]]]] [E] values.
  *
  * Behind the scenes the G92 command may modify the Current Position
  * or the Position Shift depending on settings and sub-commands.
  *
  * Since E has no Workspace Offset, it is always set directly.
  *
  * Without Workspace Offsets (e.g., with NO_WORKSPACE_OFFSETS):
- *   G92   : Set NATIVE Current Position to the given X [Y [Z [A [B [C [E]]]]]].
+ *   G92   : Set NATIVE Current Position to the given X [Y [Z [A [B [C [U [V [W ]]]]]]]] [E].
  *
  * Using Workspace Offsets (default Marlin behavior):
- *   G92   : Modify Workspace Offsets so the reported position shows the given X [Y [Z [A [B [C [E]]]]]].
+ *   G92   : Modify Workspace Offsets so the reported position shows the given X [Y [Z [A [B [C [U [V [W ]]]]]]]] [E].
  *   G92.1 : Zero XYZ Workspace Offsets (so the reported position = the native position).
  *
  * With POWER_LOSS_RECOVERY:
- *   G92.9 : Set NATIVE Current Position to the given X [Y [Z [A [B [C [E]]]]]].
+ *   G92.9 : Set NATIVE Current Position to the given X [Y [Z [A [B [C [U [V [W ]]]]]]]] [E].
  */
 void GcodeSuite::G92() {
 
   #if HAS_EXTRUDERS
     bool sync_E = false;
   #endif
   bool sync_XYZE = false;
 
   #if USE_GCODE_SUBCODES
     const uint8_t subcode_G92 = parser.subcode;
   #else
     constexpr uint8_t subcode_G92 = 0;
   #endif
 
   switch (subcode_G92) {
     default: return;                                                  // Ignore unknown G92.x
 
     #if ENABLED(CNC_COORDINATE_SYSTEMS) && !IS_SCARA
       case 1:                                                         // G92.1 - Zero the Workspace Offset
-        LOOP_LINEAR_AXES(i) if (position_shift[i]) {
+        LOOP_NUM_AXES(i) if (position_shift[i]) {
           position_shift[i] = 0;
           update_workspace_offset((AxisEnum)i);
         }
         break;
     #endif
 
     #if ENABLED(POWER_LOSS_RECOVERY)
       case 9:                                                         // G92.9 - Set Current Position directly (like Marlin 1.0)
         LOOP_LOGICAL_AXES(i) {
           if (parser.seenval(axis_codes[i])) {

commit 40481947fc1f11a01235c5c55333a4437fc45c5f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jan 14 03:14:13 2022 -0600

    üßë‚Äçüíª Misc. updates for extra axes (#23521)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 990236c0e8..3c49fe2a26 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -22,36 +22,36 @@
 
 #include "../gcode.h"
 #include "../../module/motion.h"
 #include "../../module/stepper.h"
 
 #if ENABLED(I2C_POSITION_ENCODERS)
   #include "../../feature/encoder_i2c.h"
 #endif
 
 /**
- * G92: Set the Current Position to the given X Y Z E values.
+ * G92: Set the Current Position to the given X [Y [Z [A [B [C [E]]]]]] values.
  *
  * Behind the scenes the G92 command may modify the Current Position
  * or the Position Shift depending on settings and sub-commands.
  *
  * Since E has no Workspace Offset, it is always set directly.
  *
  * Without Workspace Offsets (e.g., with NO_WORKSPACE_OFFSETS):
- *   G92   : Set NATIVE Current Position to the given X Y Z E.
+ *   G92   : Set NATIVE Current Position to the given X [Y [Z [A [B [C [E]]]]]].
  *
  * Using Workspace Offsets (default Marlin behavior):
- *   G92   : Modify Workspace Offsets so the reported position shows the given X Y Z E.
+ *   G92   : Modify Workspace Offsets so the reported position shows the given X [Y [Z [A [B [C [E]]]]]].
  *   G92.1 : Zero XYZ Workspace Offsets (so the reported position = the native position).
  *
  * With POWER_LOSS_RECOVERY:
- *   G92.9 : Set NATIVE Current Position to the given X Y Z E.
+ *   G92.9 : Set NATIVE Current Position to the given X [Y [Z [A [B [C [E]]]]]].
  */
 void GcodeSuite::G92() {
 
   #if HAS_EXTRUDERS
     bool sync_E = false;
   #endif
   bool sync_XYZE = false;
 
   #if USE_GCODE_SUBCODES
     const uint8_t subcode_G92 = parser.subcode;

commit dd4990252e891cdfe56cb7d6e3bbe1e6289be649
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon May 24 16:38:57 2021 -0500

    ‚ôªÔ∏è Refactor Linear / Logical / Distinct Axes (#21953)
    
    * More patches supporting EXTRUDERS 0
    * Extend types in prep for more axes

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index a9970b1e9c..990236c0e8 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -41,21 +41,24 @@
  *
  * Using Workspace Offsets (default Marlin behavior):
  *   G92   : Modify Workspace Offsets so the reported position shows the given X Y Z E.
  *   G92.1 : Zero XYZ Workspace Offsets (so the reported position = the native position).
  *
  * With POWER_LOSS_RECOVERY:
  *   G92.9 : Set NATIVE Current Position to the given X Y Z E.
  */
 void GcodeSuite::G92() {
 
-  bool sync_E = false, sync_XYZE = false;
+  #if HAS_EXTRUDERS
+    bool sync_E = false;
+  #endif
+  bool sync_XYZE = false;
 
   #if USE_GCODE_SUBCODES
     const uint8_t subcode_G92 = parser.subcode;
   #else
     constexpr uint8_t subcode_G92 = 0;
   #endif
 
   switch (subcode_G92) {
     default: return;                                                  // Ignore unknown G92.x
 
@@ -65,54 +68,66 @@ void GcodeSuite::G92() {
           position_shift[i] = 0;
           update_workspace_offset((AxisEnum)i);
         }
         break;
     #endif
 
     #if ENABLED(POWER_LOSS_RECOVERY)
       case 9:                                                         // G92.9 - Set Current Position directly (like Marlin 1.0)
         LOOP_LOGICAL_AXES(i) {
           if (parser.seenval(axis_codes[i])) {
-            if (i == E_AXIS) sync_E = true; else sync_XYZE = true;
+            if (TERN1(HAS_EXTRUDERS, i != E_AXIS))
+              sync_XYZE = true;
+            else {
+              TERN_(HAS_EXTRUDERS, sync_E = true);
+            }
             current_position[i] = parser.value_axis_units((AxisEnum)i);
           }
         }
         break;
     #endif
 
     case 0:
       LOOP_LOGICAL_AXES(i) {
         if (parser.seenval(axis_codes[i])) {
           const float l = parser.value_axis_units((AxisEnum)i),       // Given axis coordinate value, converted to millimeters
-                      v = i == E_AXIS ? l : LOGICAL_TO_NATIVE(l, i),  // Axis position in NATIVE space (applying the existing offset)
+                      v = TERN0(HAS_EXTRUDERS, i == E_AXIS) ? l : LOGICAL_TO_NATIVE(l, i),  // Axis position in NATIVE space (applying the existing offset)
                       d = v - current_position[i];                    // How much is the current axis position altered by?
           if (!NEAR_ZERO(d)) {
             #if HAS_POSITION_SHIFT && !IS_SCARA                       // When using workspaces...
-              if (i == E_AXIS) {
-                sync_E = true;
-                current_position.e = v;                               // ...E is still set directly
+              if (TERN1(HAS_EXTRUDERS, i != E_AXIS)) {
+                position_shift[i] += d;                               // ...most axes offset the workspace...
+                update_workspace_offset((AxisEnum)i);
               }
               else {
-                position_shift[i] += d;                               // ...but other axes offset the workspace.
-                update_workspace_offset((AxisEnum)i);
+                #if HAS_EXTRUDERS
+                  sync_E = true;
+                  current_position.e = v;                             // ...but E is set directly
+                #endif
               }
             #else                                                     // Without workspaces...
-              if (i == E_AXIS) sync_E = true; else sync_XYZE = true;
+              if (TERN1(HAS_EXTRUDERS, i != E_AXIS))
+                sync_XYZE = true;
+              else {
+                TERN_(HAS_EXTRUDERS, sync_E = true);
+              }
               current_position[i] = v;                                // ...set Current Position directly (like Marlin 1.0)
             #endif
           }
         }
       }
       break;
   }
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     // Apply Workspace Offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
       coordinate_system[active_coordinate_system] = position_shift;
   #endif
 
-  if   (sync_XYZE) sync_plan_position();
-  else if (sync_E) sync_plan_position_e();
+  if (sync_XYZE) sync_plan_position();
+  #if HAS_EXTRUDERS
+    else if (sync_E) sync_plan_position_e();
+  #endif
 
   IF_DISABLED(DIRECT_STEPPING, report_current_position());
 }

commit a6e5492b088add3589aeac168136369f21614e60
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 18 22:51:19 2021 -0500

    ‚ôªÔ∏è Refactor axis counts and loops

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 30620be6f9..a9970b1e9c 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -54,40 +54,40 @@ void GcodeSuite::G92() {
     const uint8_t subcode_G92 = parser.subcode;
   #else
     constexpr uint8_t subcode_G92 = 0;
   #endif
 
   switch (subcode_G92) {
     default: return;                                                  // Ignore unknown G92.x
 
     #if ENABLED(CNC_COORDINATE_SYSTEMS) && !IS_SCARA
       case 1:                                                         // G92.1 - Zero the Workspace Offset
-        LOOP_XYZ(i) if (position_shift[i]) {
+        LOOP_LINEAR_AXES(i) if (position_shift[i]) {
           position_shift[i] = 0;
           update_workspace_offset((AxisEnum)i);
         }
         break;
     #endif
 
     #if ENABLED(POWER_LOSS_RECOVERY)
       case 9:                                                         // G92.9 - Set Current Position directly (like Marlin 1.0)
-        LOOP_XYZE(i) {
+        LOOP_LOGICAL_AXES(i) {
           if (parser.seenval(axis_codes[i])) {
             if (i == E_AXIS) sync_E = true; else sync_XYZE = true;
             current_position[i] = parser.value_axis_units((AxisEnum)i);
           }
         }
         break;
     #endif
 
     case 0:
-      LOOP_XYZE(i) {
+      LOOP_LOGICAL_AXES(i) {
         if (parser.seenval(axis_codes[i])) {
           const float l = parser.value_axis_units((AxisEnum)i),       // Given axis coordinate value, converted to millimeters
                       v = i == E_AXIS ? l : LOGICAL_TO_NATIVE(l, i),  // Axis position in NATIVE space (applying the existing offset)
                       d = v - current_position[i];                    // How much is the current axis position altered by?
           if (!NEAR_ZERO(d)) {
             #if HAS_POSITION_SHIFT && !IS_SCARA                       // When using workspaces...
               if (i == E_AXIS) {
                 sync_E = true;
                 current_position.e = v;                               // ...E is still set directly
               }

commit 27f9437d3141635e290b11109b5f6d0929962194
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 23 16:08:00 2021 -0600

    G92, subcodes flag cleanup

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 1a0382ed7c..30620be6f9 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -22,84 +22,97 @@
 
 #include "../gcode.h"
 #include "../../module/motion.h"
 #include "../../module/stepper.h"
 
 #if ENABLED(I2C_POSITION_ENCODERS)
   #include "../../feature/encoder_i2c.h"
 #endif
 
 /**
- * G92: Set current position to given X Y Z E
+ * G92: Set the Current Position to the given X Y Z E values.
+ *
+ * Behind the scenes the G92 command may modify the Current Position
+ * or the Position Shift depending on settings and sub-commands.
+ *
+ * Since E has no Workspace Offset, it is always set directly.
+ *
+ * Without Workspace Offsets (e.g., with NO_WORKSPACE_OFFSETS):
+ *   G92   : Set NATIVE Current Position to the given X Y Z E.
+ *
+ * Using Workspace Offsets (default Marlin behavior):
+ *   G92   : Modify Workspace Offsets so the reported position shows the given X Y Z E.
+ *   G92.1 : Zero XYZ Workspace Offsets (so the reported position = the native position).
+ *
+ * With POWER_LOSS_RECOVERY:
+ *   G92.9 : Set NATIVE Current Position to the given X Y Z E.
  */
 void GcodeSuite::G92() {
 
-  bool sync_E = false, sync_XYZ = false;
+  bool sync_E = false, sync_XYZE = false;
 
-  #if ENABLED(USE_GCODE_SUBCODES)
+  #if USE_GCODE_SUBCODES
     const uint8_t subcode_G92 = parser.subcode;
   #else
     constexpr uint8_t subcode_G92 = 0;
   #endif
 
   switch (subcode_G92) {
-    default: break;
-    #if ENABLED(CNC_COORDINATE_SYSTEMS)
-      case 1: {
-        // Zero the G92 values and restore current position
-        #if !IS_SCARA
-          LOOP_XYZ(i) if (position_shift[i]) {
-            position_shift[i] = 0;
-            update_workspace_offset((AxisEnum)i);
-          }
-        #endif // Not SCARA
-      } return;
+    default: return;                                                  // Ignore unknown G92.x
+
+    #if ENABLED(CNC_COORDINATE_SYSTEMS) && !IS_SCARA
+      case 1:                                                         // G92.1 - Zero the Workspace Offset
+        LOOP_XYZ(i) if (position_shift[i]) {
+          position_shift[i] = 0;
+          update_workspace_offset((AxisEnum)i);
+        }
+        break;
     #endif
+
     #if ENABLED(POWER_LOSS_RECOVERY)
-      case 9: {
+      case 9:                                                         // G92.9 - Set Current Position directly (like Marlin 1.0)
         LOOP_XYZE(i) {
           if (parser.seenval(axis_codes[i])) {
+            if (i == E_AXIS) sync_E = true; else sync_XYZE = true;
             current_position[i] = parser.value_axis_units((AxisEnum)i);
-            if (i == E_AXIS) sync_E = true; else sync_XYZ = true;
           }
         }
-      } break;
+        break;
     #endif
-    case 0: {
+
+    case 0:
       LOOP_XYZE(i) {
         if (parser.seenval(axis_codes[i])) {
-          const float l = parser.value_axis_units((AxisEnum)i),
-                      v = i == E_AXIS ? l : LOGICAL_TO_NATIVE(l, i),
-                      d = v - current_position[i];
+          const float l = parser.value_axis_units((AxisEnum)i),       // Given axis coordinate value, converted to millimeters
+                      v = i == E_AXIS ? l : LOGICAL_TO_NATIVE(l, i),  // Axis position in NATIVE space (applying the existing offset)
+                      d = v - current_position[i];                    // How much is the current axis position altered by?
           if (!NEAR_ZERO(d)) {
-            #if IS_SCARA || !HAS_POSITION_SHIFT
-              if (i == E_AXIS) sync_E = true; else sync_XYZ = true;
-              current_position[i] = v;        // Without workspaces revert to Marlin 1.0 behavior
-            #elif HAS_POSITION_SHIFT
+            #if HAS_POSITION_SHIFT && !IS_SCARA                       // When using workspaces...
               if (i == E_AXIS) {
                 sync_E = true;
-                current_position.e = v;       // When using coordinate spaces, only E is set directly
+                current_position.e = v;                               // ...E is still set directly
               }
               else {
-                position_shift[i] += d;       // Other axes simply offset the coordinate space
+                position_shift[i] += d;                               // ...but other axes offset the workspace.
                 update_workspace_offset((AxisEnum)i);
               }
+            #else                                                     // Without workspaces...
+              if (i == E_AXIS) sync_E = true; else sync_XYZE = true;
+              current_position[i] = v;                                // ...set Current Position directly (like Marlin 1.0)
             #endif
           }
         }
       }
-    } break;
+      break;
   }
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
-    // Apply workspace offset to the active coordinate system
+    // Apply Workspace Offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
       coordinate_system[active_coordinate_system] = position_shift;
   #endif
 
-  if    (sync_XYZ) sync_plan_position();
+  if   (sync_XYZE) sync_plan_position();
   else if (sync_E) sync_plan_position_e();
 
-  #if DISABLED(DIRECT_STEPPING)
-    report_current_position();
-  #endif
+  IF_DISABLED(DIRECT_STEPPING, report_current_position());
 }

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 16717de14d..1a0382ed7c 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 #include "../gcode.h"
 #include "../../module/motion.h"
 #include "../../module/stepper.h"
 
 #if ENABLED(I2C_POSITION_ENCODERS)
   #include "../../feature/encoder_i2c.h"
 #endif

commit 8a22ef0c83a94f742be39005f259226e005ded2d
Author: Colin Godsey <crgodsey@gmail.com>
Date:   Mon May 11 18:22:41 2020 -0600

    G6 Direct Stepping (#17853)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 91a746dd76..16717de14d 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -92,12 +92,14 @@ void GcodeSuite::G92() {
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     // Apply workspace offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
       coordinate_system[active_coordinate_system] = position_shift;
   #endif
 
   if    (sync_XYZ) sync_plan_position();
   else if (sync_E) sync_plan_position_e();
 
-  report_current_position();
+  #if DISABLED(DIRECT_STEPPING)
+    report_current_position();
+  #endif
 }

commit 6bead0c1b04152f6a291d851f6cd4029fe0fc616
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 16:29:29 2020 -0500

    Shorter paths to HAL, ExtUI (#17156)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 0ed10beb54..91a746dd76 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -18,21 +18,21 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 #include "../gcode.h"
 #include "../../module/motion.h"
 #include "../../module/stepper.h"
 
 #if ENABLED(I2C_POSITION_ENCODERS)
-  #include "../../feature/I2CPositionEncoder.h"
+  #include "../../feature/encoder_i2c.h"
 #endif
 
 /**
  * G92: Set current position to given X Y Z E
  */
 void GcodeSuite::G92() {
 
   bool sync_E = false, sync_XYZ = false;
 
   #if ENABLED(USE_GCODE_SUBCODES)

commit 0ba18848af83d66aa14ca8f5d387ab9f630d450e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 10 16:22:38 2020 -0600

    Allow USE_GCODE_SUBCODES for debugging

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index dd87349976..0ed10beb54 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -28,21 +28,21 @@
   #include "../../feature/I2CPositionEncoder.h"
 #endif
 
 /**
  * G92: Set current position to given X Y Z E
  */
 void GcodeSuite::G92() {
 
   bool sync_E = false, sync_XYZ = false;
 
-  #if USE_GCODE_SUBCODES
+  #if ENABLED(USE_GCODE_SUBCODES)
     const uint8_t subcode_G92 = parser.subcode;
   #else
     constexpr uint8_t subcode_G92 = 0;
   #endif
 
   switch (subcode_G92) {
     default: break;
     #if ENABLED(CNC_COORDINATE_SYSTEMS)
       case 1: {
         // Zero the G92 values and restore current position

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 2f69654b0e..dd87349976 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 7a342ecb935e421abfef2f8ed9a8d004f4d30a9f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Oct 27 17:49:27 2019 -0500

    Show Total E during print (#15703)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 89f616e3c4..2f69654b0e 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -70,21 +70,21 @@ void GcodeSuite::G92() {
           const float l = parser.value_axis_units((AxisEnum)i),
                       v = i == E_AXIS ? l : LOGICAL_TO_NATIVE(l, i),
                       d = v - current_position[i];
           if (!NEAR_ZERO(d)) {
             #if IS_SCARA || !HAS_POSITION_SHIFT
               if (i == E_AXIS) sync_E = true; else sync_XYZ = true;
               current_position[i] = v;        // Without workspaces revert to Marlin 1.0 behavior
             #elif HAS_POSITION_SHIFT
               if (i == E_AXIS) {
                 sync_E = true;
-                current_position.e = v; // When using coordinate spaces, only E is set directly
+                current_position.e = v;       // When using coordinate spaces, only E is set directly
               }
               else {
                 position_shift[i] += d;       // Other axes simply offset the coordinate space
                 update_workspace_offset((AxisEnum)i);
               }
             #endif
           }
         }
       }
     } break;

commit cf8541a7a779564d117827ba3e3d802da8b875dc
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Fri Oct 25 01:05:50 2019 +0700

    Fix G92.9 (thus PLR Z position) (#15625)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 65ad06fe2c..89f616e3c4 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -26,26 +26,21 @@
 
 #if ENABLED(I2C_POSITION_ENCODERS)
   #include "../../feature/I2CPositionEncoder.h"
 #endif
 
 /**
  * G92: Set current position to given X Y Z E
  */
 void GcodeSuite::G92() {
 
-  bool didE = false;
-  #if IS_SCARA || !HAS_POSITION_SHIFT
-    bool didXYZ = false;
-  #else
-    constexpr bool didXYZ = false;
-  #endif
+  bool sync_E = false, sync_XYZ = false;
 
   #if USE_GCODE_SUBCODES
     const uint8_t subcode_G92 = parser.subcode;
   #else
     constexpr uint8_t subcode_G92 = 0;
   #endif
 
   switch (subcode_G92) {
     default: break;
     #if ENABLED(CNC_COORDINATE_SYSTEMS)
@@ -57,56 +52,52 @@ void GcodeSuite::G92() {
             update_workspace_offset((AxisEnum)i);
           }
         #endif // Not SCARA
       } return;
     #endif
     #if ENABLED(POWER_LOSS_RECOVERY)
       case 9: {
         LOOP_XYZE(i) {
           if (parser.seenval(axis_codes[i])) {
             current_position[i] = parser.value_axis_units((AxisEnum)i);
-            #if IS_SCARA || !HAS_POSITION_SHIFT
-              if (i == E_AXIS) didE = true; else didXYZ = true;
-            #elif HAS_POSITION_SHIFT
-              if (i == E_AXIS) didE = true;
-            #endif
+            if (i == E_AXIS) sync_E = true; else sync_XYZ = true;
           }
         }
       } break;
     #endif
     case 0: {
       LOOP_XYZE(i) {
         if (parser.seenval(axis_codes[i])) {
           const float l = parser.value_axis_units((AxisEnum)i),
                       v = i == E_AXIS ? l : LOGICAL_TO_NATIVE(l, i),
                       d = v - current_position[i];
           if (!NEAR_ZERO(d)) {
             #if IS_SCARA || !HAS_POSITION_SHIFT
-              if (i == E_AXIS) didE = true; else didXYZ = true;
+              if (i == E_AXIS) sync_E = true; else sync_XYZ = true;
               current_position[i] = v;        // Without workspaces revert to Marlin 1.0 behavior
             #elif HAS_POSITION_SHIFT
               if (i == E_AXIS) {
-                didE = true;
+                sync_E = true;
                 current_position.e = v; // When using coordinate spaces, only E is set directly
               }
               else {
                 position_shift[i] += d;       // Other axes simply offset the coordinate space
                 update_workspace_offset((AxisEnum)i);
               }
             #endif
           }
         }
       }
     } break;
   }
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     // Apply workspace offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
       coordinate_system[active_coordinate_system] = position_shift;
   #endif
 
-  if    (didXYZ) sync_plan_position();
-  else if (didE) sync_plan_position_e();
+  if    (sync_XYZ) sync_plan_position();
+  else if (sync_E) sync_plan_position_e();
 
   report_current_position();
 }

commit 50e4545255605eb506c20eb107270038b0fe7bdb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 29 04:25:39 2019 -0500

    Add custom types for position (#15204)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 0ecf43e580..65ad06fe2c 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -79,34 +79,34 @@ void GcodeSuite::G92() {
           const float l = parser.value_axis_units((AxisEnum)i),
                       v = i == E_AXIS ? l : LOGICAL_TO_NATIVE(l, i),
                       d = v - current_position[i];
           if (!NEAR_ZERO(d)) {
             #if IS_SCARA || !HAS_POSITION_SHIFT
               if (i == E_AXIS) didE = true; else didXYZ = true;
               current_position[i] = v;        // Without workspaces revert to Marlin 1.0 behavior
             #elif HAS_POSITION_SHIFT
               if (i == E_AXIS) {
                 didE = true;
-                current_position[E_AXIS] = v; // When using coordinate spaces, only E is set directly
+                current_position.e = v; // When using coordinate spaces, only E is set directly
               }
               else {
                 position_shift[i] += d;       // Other axes simply offset the coordinate space
                 update_workspace_offset((AxisEnum)i);
               }
             #endif
           }
         }
       }
     } break;
   }
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     // Apply workspace offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
-      COPY(coordinate_system[active_coordinate_system], position_shift);
+      coordinate_system[active_coordinate_system] = position_shift;
   #endif
 
   if    (didXYZ) sync_plan_position();
   else if (didE) sync_plan_position_e();
 
   report_current_position();
 }

commit 081e4506ca5356501415bfaf066d982947449623
Author: Luu Lac <45380455+shitcreek@users.noreply.github.com>
Date:   Wed Aug 28 04:20:28 2019 -0500

    Fix G53 as prefix, G28 with CNC_COORDINATE_SYSTEMS (#15069)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 9304274520..0ecf43e580 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -45,26 +45,23 @@ void GcodeSuite::G92() {
   #else
     constexpr uint8_t subcode_G92 = 0;
   #endif
 
   switch (subcode_G92) {
     default: break;
     #if ENABLED(CNC_COORDINATE_SYSTEMS)
       case 1: {
         // Zero the G92 values and restore current position
         #if !IS_SCARA
-          LOOP_XYZ(i) {
-            const float v = position_shift[i];
-            if (v) {
-              position_shift[i] = 0;
-              update_workspace_offset((AxisEnum)i);
-            }
+          LOOP_XYZ(i) if (position_shift[i]) {
+            position_shift[i] = 0;
+            update_workspace_offset((AxisEnum)i);
           }
         #endif // Not SCARA
       } return;
     #endif
     #if ENABLED(POWER_LOSS_RECOVERY)
       case 9: {
         LOOP_XYZE(i) {
           if (parser.seenval(axis_codes[i])) {
             current_position[i] = parser.value_axis_units((AxisEnum)i);
             #if IS_SCARA || !HAS_POSITION_SHIFT

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 01d42f7c23..9304274520 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -1,16 +1,16 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.

commit 9992c424f531670749848982753aa185662f47bc
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 15 20:26:40 2019 -0500

    Patch G92.9 flags
    
    Followup to #13703

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 75a0c03ae5..01d42f7c23 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -60,21 +60,25 @@ void GcodeSuite::G92() {
             }
           }
         #endif // Not SCARA
       } return;
     #endif
     #if ENABLED(POWER_LOSS_RECOVERY)
       case 9: {
         LOOP_XYZE(i) {
           if (parser.seenval(axis_codes[i])) {
             current_position[i] = parser.value_axis_units((AxisEnum)i);
-            if (i == E_AXIS) didE = true; else didXYZ = true;
+            #if IS_SCARA || !HAS_POSITION_SHIFT
+              if (i == E_AXIS) didE = true; else didXYZ = true;
+            #elif HAS_POSITION_SHIFT
+              if (i == E_AXIS) didE = true;
+            #endif
           }
         }
       } break;
     #endif
     case 0: {
       LOOP_XYZE(i) {
         if (parser.seenval(axis_codes[i])) {
           const float l = parser.value_axis_units((AxisEnum)i),
                       v = i == E_AXIS ? l : LOGICAL_TO_NATIVE(l, i),
                       d = v - current_position[i];

commit 455ee23499042b17132405934d3aa932d9713ab3
Author: Msq001 <760675063@qq.com>
Date:   Tue Apr 16 07:53:39 2019 +0800

    Fix, improve Power Loss Recovery (#13703)
    
    - Save and restore workspace offsets
    - Add retract and purge (hidden) options
    - Always restore axis relative modes
    - Use added `G92.9` to do position restores

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index b01daf348d..75a0c03ae5 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -26,71 +26,83 @@
 
 #if ENABLED(I2C_POSITION_ENCODERS)
   #include "../../feature/I2CPositionEncoder.h"
 #endif
 
 /**
  * G92: Set current position to given X Y Z E
  */
 void GcodeSuite::G92() {
 
-  #if ENABLED(CNC_COORDINATE_SYSTEMS)
-    switch (parser.subcode) {
-      case 1:
+  bool didE = false;
+  #if IS_SCARA || !HAS_POSITION_SHIFT
+    bool didXYZ = false;
+  #else
+    constexpr bool didXYZ = false;
+  #endif
+
+  #if USE_GCODE_SUBCODES
+    const uint8_t subcode_G92 = parser.subcode;
+  #else
+    constexpr uint8_t subcode_G92 = 0;
+  #endif
+
+  switch (subcode_G92) {
+    default: break;
+    #if ENABLED(CNC_COORDINATE_SYSTEMS)
+      case 1: {
         // Zero the G92 values and restore current position
         #if !IS_SCARA
           LOOP_XYZ(i) {
             const float v = position_shift[i];
             if (v) {
               position_shift[i] = 0;
               update_workspace_offset((AxisEnum)i);
             }
           }
         #endif // Not SCARA
-        return;
-    }
-  #endif
-
-  #if ENABLED(CNC_COORDINATE_SYSTEMS)
-    #define IS_G92_0 (parser.subcode == 0)
-  #else
-    #define IS_G92_0 true
-  #endif
-
-  bool didE = false;
-  #if IS_SCARA || !HAS_POSITION_SHIFT
-    bool didXYZ = false;
-  #else
-    constexpr bool didXYZ = false;
-  #endif
-
-  if (IS_G92_0) LOOP_XYZE(i) {
-    if (parser.seenval(axis_codes[i])) {
-      const float l = parser.value_axis_units((AxisEnum)i),
-                  v = i == E_AXIS ? l : LOGICAL_TO_NATIVE(l, i),
-                  d = v - current_position[i];
-      if (!NEAR_ZERO(d)) {
-        #if IS_SCARA || !HAS_POSITION_SHIFT
-          if (i == E_AXIS) didE = true; else didXYZ = true;
-          current_position[i] = v;        // Without workspaces revert to Marlin 1.0 behavior
-        #elif HAS_POSITION_SHIFT
-          if (i == E_AXIS) {
-            didE = true;
-            current_position[E_AXIS] = v; // When using coordinate spaces, only E is set directly
+      } return;
+    #endif
+    #if ENABLED(POWER_LOSS_RECOVERY)
+      case 9: {
+        LOOP_XYZE(i) {
+          if (parser.seenval(axis_codes[i])) {
+            current_position[i] = parser.value_axis_units((AxisEnum)i);
+            if (i == E_AXIS) didE = true; else didXYZ = true;
           }
-          else {
-            position_shift[i] += d;       // Other axes simply offset the coordinate space
-            update_workspace_offset((AxisEnum)i);
+        }
+      } break;
+    #endif
+    case 0: {
+      LOOP_XYZE(i) {
+        if (parser.seenval(axis_codes[i])) {
+          const float l = parser.value_axis_units((AxisEnum)i),
+                      v = i == E_AXIS ? l : LOGICAL_TO_NATIVE(l, i),
+                      d = v - current_position[i];
+          if (!NEAR_ZERO(d)) {
+            #if IS_SCARA || !HAS_POSITION_SHIFT
+              if (i == E_AXIS) didE = true; else didXYZ = true;
+              current_position[i] = v;        // Without workspaces revert to Marlin 1.0 behavior
+            #elif HAS_POSITION_SHIFT
+              if (i == E_AXIS) {
+                didE = true;
+                current_position[E_AXIS] = v; // When using coordinate spaces, only E is set directly
+              }
+              else {
+                position_shift[i] += d;       // Other axes simply offset the coordinate space
+                update_workspace_offset((AxisEnum)i);
+              }
+            #endif
           }
-        #endif
+        }
       }
-    }
+    } break;
   }
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     // Apply workspace offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
       COPY(coordinate_system[active_coordinate_system], position_shift);
   #endif
 
   if    (didXYZ) sync_plan_position();
   else if (didE) sync_plan_position_e();

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 8e0b341316..b01daf348d 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit d1ff22b9830bbb94efea52f4233b2f11ad0a0c4a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Nov 3 03:56:33 2018 -0500

    Revive SCARA's home offset (unimplemented)

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 721c8b73c3..8e0b341316 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -35,21 +35,21 @@ void GcodeSuite::G92() {
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     switch (parser.subcode) {
       case 1:
         // Zero the G92 values and restore current position
         #if !IS_SCARA
           LOOP_XYZ(i) {
             const float v = position_shift[i];
             if (v) {
               position_shift[i] = 0;
-              update_software_endstops((AxisEnum)i);
+              update_workspace_offset((AxisEnum)i);
             }
           }
         #endif // Not SCARA
         return;
     }
   #endif
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     #define IS_G92_0 (parser.subcode == 0)
   #else
@@ -72,21 +72,21 @@ void GcodeSuite::G92() {
         #if IS_SCARA || !HAS_POSITION_SHIFT
           if (i == E_AXIS) didE = true; else didXYZ = true;
           current_position[i] = v;        // Without workspaces revert to Marlin 1.0 behavior
         #elif HAS_POSITION_SHIFT
           if (i == E_AXIS) {
             didE = true;
             current_position[E_AXIS] = v; // When using coordinate spaces, only E is set directly
           }
           else {
             position_shift[i] += d;       // Other axes simply offset the coordinate space
-            update_software_endstops((AxisEnum)i);
+            update_workspace_offset((AxisEnum)i);
           }
         #endif
       }
     }
   }
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     // Apply workspace offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
       COPY(coordinate_system[active_coordinate_system], position_shift);

commit c437bb08f12f1c0535cc78a761b49a18f2dc2a12
Author: Thomas Moore <tcm0116@users.noreply.github.com>
Date:   Sun Sep 16 22:24:15 2018 -0400

    Overhaul of the planner (#11578)
    
    - Move FWRETRACT to the planner
    - Combine leveling, skew, etc. in a single modifier method
    - Have kinematic and non-kinematic moves call one planner method

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 933a6e1cdb..721c8b73c3 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -85,15 +85,15 @@ void GcodeSuite::G92() {
       }
     }
   }
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     // Apply workspace offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
       COPY(coordinate_system[active_coordinate_system], position_shift);
   #endif
 
-  if    (didXYZ) SYNC_PLAN_POSITION_KINEMATIC();
+  if    (didXYZ) sync_plan_position();
   else if (didE) sync_plan_position_e();
 
   report_current_position();
 }

commit af1950a63e4049c6f870fffcc12bf6e0f15dddac
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu May 3 17:45:13 2018 -0500

    Improve sync of stepper positions

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 0b10aab5b8..933a6e1cdb 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -26,22 +26,20 @@
 
 #if ENABLED(I2C_POSITION_ENCODERS)
   #include "../../feature/I2CPositionEncoder.h"
 #endif
 
 /**
  * G92: Set current position to given X Y Z E
  */
 void GcodeSuite::G92() {
 
-  stepper.synchronize();
-
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     switch (parser.subcode) {
       case 1:
         // Zero the G92 values and restore current position
         #if !IS_SCARA
           LOOP_XYZ(i) {
             const float v = position_shift[i];
             if (v) {
               position_shift[i] = 0;
               update_software_endstops((AxisEnum)i);
@@ -87,17 +85,15 @@ void GcodeSuite::G92() {
       }
     }
   }
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     // Apply workspace offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
       COPY(coordinate_system[active_coordinate_system], position_shift);
   #endif
 
-  if (didXYZ)
-    SYNC_PLAN_POSITION_KINEMATIC();
-  else if (didE)
-    sync_plan_position_e();
+  if    (didXYZ) SYNC_PLAN_POSITION_KINEMATIC();
+  else if (didE) sync_plan_position_e();
 
   report_current_position();
 }

commit 2f73dec0778d396cf715627d7ffbd6d2ff5e4042
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Nov 13 01:50:05 2017 -0600

    Apply native workspace fixes for G92, G53-59

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 535ca37142..0b10aab5b8 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -51,40 +51,45 @@ void GcodeSuite::G92() {
         return;
     }
   #endif
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     #define IS_G92_0 (parser.subcode == 0)
   #else
     #define IS_G92_0 true
   #endif
 
-  bool didXYZ = false, didE = false;
+  bool didE = false;
+  #if IS_SCARA || !HAS_POSITION_SHIFT
+    bool didXYZ = false;
+  #else
+    constexpr bool didXYZ = false;
+  #endif
 
   if (IS_G92_0) LOOP_XYZE(i) {
     if (parser.seenval(axis_codes[i])) {
       const float l = parser.value_axis_units((AxisEnum)i),
                   v = i == E_AXIS ? l : LOGICAL_TO_NATIVE(l, i),
                   d = v - current_position[i];
       if (!NEAR_ZERO(d)) {
-        if (i == E_AXIS) didE = true; else didXYZ = true;
-        #if IS_SCARA
-          current_position[i] = v;        // For SCARA just set the position directly
+        #if IS_SCARA || !HAS_POSITION_SHIFT
+          if (i == E_AXIS) didE = true; else didXYZ = true;
+          current_position[i] = v;        // Without workspaces revert to Marlin 1.0 behavior
         #elif HAS_POSITION_SHIFT
-          if (i == E_AXIS)
+          if (i == E_AXIS) {
+            didE = true;
             current_position[E_AXIS] = v; // When using coordinate spaces, only E is set directly
+          }
           else {
             position_shift[i] += d;       // Other axes simply offset the coordinate space
             update_software_endstops((AxisEnum)i);
           }
-        #else
-          current_position[i] = v;        // Without workspaces revert to Marlin 1.0 behavior
         #endif
       }
     }
   }
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     // Apply workspace offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
       COPY(coordinate_system[active_coordinate_system], position_shift);
   #endif

commit 17ef0a513b6a0bd671ea49e57c3d1cb5f56004a0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Nov 7 12:25:04 2017 -0600

    Update G92 for native workspace

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 89fa120150..535ca37142 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -25,24 +25,22 @@
 #include "../../module/stepper.h"
 
 #if ENABLED(I2C_POSITION_ENCODERS)
   #include "../../feature/I2CPositionEncoder.h"
 #endif
 
 /**
  * G92: Set current position to given X Y Z E
  */
 void GcodeSuite::G92() {
-  bool didXYZ = false,
-       didE = parser.seenval('E');
 
-  if (!didE) stepper.synchronize();
+  stepper.synchronize();
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     switch (parser.subcode) {
       case 1:
         // Zero the G92 values and restore current position
         #if !IS_SCARA
           LOOP_XYZ(i) {
             const float v = position_shift[i];
             if (v) {
               position_shift[i] = 0;
@@ -53,41 +51,42 @@ void GcodeSuite::G92() {
         return;
     }
   #endif
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     #define IS_G92_0 (parser.subcode == 0)
   #else
     #define IS_G92_0 true
   #endif
 
+  bool didXYZ = false, didE = false;
+
   if (IS_G92_0) LOOP_XYZE(i) {
     if (parser.seenval(axis_codes[i])) {
-      #if IS_SCARA
-        current_position[i] = parser.value_axis_units((AxisEnum)i);
-        if (i != E_AXIS) didXYZ = true;
-      #else
-        #if HAS_POSITION_SHIFT
-          const float p = current_position[i];
-        #endif
-        const float v = parser.value_axis_units((AxisEnum)i);
-
-        current_position[i] = v;
-
-        if (i != E_AXIS) {
-          didXYZ = true;
-          #if HAS_POSITION_SHIFT
-            position_shift[i] += v - p; // Offset the coordinate space
+      const float l = parser.value_axis_units((AxisEnum)i),
+                  v = i == E_AXIS ? l : LOGICAL_TO_NATIVE(l, i),
+                  d = v - current_position[i];
+      if (!NEAR_ZERO(d)) {
+        if (i == E_AXIS) didE = true; else didXYZ = true;
+        #if IS_SCARA
+          current_position[i] = v;        // For SCARA just set the position directly
+        #elif HAS_POSITION_SHIFT
+          if (i == E_AXIS)
+            current_position[E_AXIS] = v; // When using coordinate spaces, only E is set directly
+          else {
+            position_shift[i] += d;       // Other axes simply offset the coordinate space
             update_software_endstops((AxisEnum)i);
-          #endif
-        }
-      #endif
+          }
+        #else
+          current_position[i] = v;        // Without workspaces revert to Marlin 1.0 behavior
+        #endif
+      }
     }
   }
 
   #if ENABLED(CNC_COORDINATE_SYSTEMS)
     // Apply workspace offset to the active coordinate system
     if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
       COPY(coordinate_system[active_coordinate_system], position_shift);
   #endif
 
   if (didXYZ)

commit 1b40e9c46475a9f9c712eba5588c72256f7dd584
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Nov 4 16:36:41 2017 -0500

    Implement CNC_COORDINATE_SYSTEMS

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index 65d860dca7..89fa120150 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -30,21 +30,44 @@
 
 /**
  * G92: Set current position to given X Y Z E
  */
 void GcodeSuite::G92() {
   bool didXYZ = false,
        didE = parser.seenval('E');
 
   if (!didE) stepper.synchronize();
 
-  LOOP_XYZE(i) {
+  #if ENABLED(CNC_COORDINATE_SYSTEMS)
+    switch (parser.subcode) {
+      case 1:
+        // Zero the G92 values and restore current position
+        #if !IS_SCARA
+          LOOP_XYZ(i) {
+            const float v = position_shift[i];
+            if (v) {
+              position_shift[i] = 0;
+              update_software_endstops((AxisEnum)i);
+            }
+          }
+        #endif // Not SCARA
+        return;
+    }
+  #endif
+
+  #if ENABLED(CNC_COORDINATE_SYSTEMS)
+    #define IS_G92_0 (parser.subcode == 0)
+  #else
+    #define IS_G92_0 true
+  #endif
+
+  if (IS_G92_0) LOOP_XYZE(i) {
     if (parser.seenval(axis_codes[i])) {
       #if IS_SCARA
         current_position[i] = parser.value_axis_units((AxisEnum)i);
         if (i != E_AXIS) didXYZ = true;
       #else
         #if HAS_POSITION_SHIFT
           const float p = current_position[i];
         #endif
         const float v = parser.value_axis_units((AxisEnum)i);
 
@@ -53,17 +76,24 @@ void GcodeSuite::G92() {
         if (i != E_AXIS) {
           didXYZ = true;
           #if HAS_POSITION_SHIFT
             position_shift[i] += v - p; // Offset the coordinate space
             update_software_endstops((AxisEnum)i);
           #endif
         }
       #endif
     }
   }
+
+  #if ENABLED(CNC_COORDINATE_SYSTEMS)
+    // Apply workspace offset to the active coordinate system
+    if (WITHIN(active_coordinate_system, 0, MAX_COORDINATE_SYSTEMS - 1))
+      COPY(coordinate_system[active_coordinate_system], position_shift);
+  #endif
+
   if (didXYZ)
     SYNC_PLAN_POSITION_KINEMATIC();
   else if (didE)
     sync_plan_position_e();
 
   report_current_position();
 }

commit d6aa127c76bda395d773f45bde57ffd849899cd7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Nov 4 15:26:29 2017 -0500

    Remove I2CPEM workspace offset

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
index ae2d92962d..65d860dca7 100644
--- a/Marlin/src/gcode/geometry/G92.cpp
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -48,25 +48,20 @@ void GcodeSuite::G92() {
         #endif
         const float v = parser.value_axis_units((AxisEnum)i);
 
         current_position[i] = v;
 
         if (i != E_AXIS) {
           didXYZ = true;
           #if HAS_POSITION_SHIFT
             position_shift[i] += v - p; // Offset the coordinate space
             update_software_endstops((AxisEnum)i);
-
-            #if ENABLED(I2C_POSITION_ENCODERS)
-              I2CPEM.encoders[I2CPEM.idx_from_axis((AxisEnum)i)].set_axis_offset(position_shift[i]);
-            #endif
-
           #endif
         }
       #endif
     }
   }
   if (didXYZ)
     SYNC_PLAN_POSITION_KINEMATIC();
   else if (didE)
     sync_plan_position_e();
 

commit 04376975ce3e0ef677890708ddf18e0e5f97b27e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 16 00:37:35 2017 -0500

    Move G92 to cpp

diff --git a/Marlin/src/gcode/geometry/G92.cpp b/Marlin/src/gcode/geometry/G92.cpp
new file mode 100644
index 0000000000..ae2d92962d
--- /dev/null
+++ b/Marlin/src/gcode/geometry/G92.cpp
@@ -0,0 +1,74 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../gcode.h"
+#include "../../module/motion.h"
+#include "../../module/stepper.h"
+
+#if ENABLED(I2C_POSITION_ENCODERS)
+  #include "../../feature/I2CPositionEncoder.h"
+#endif
+
+/**
+ * G92: Set current position to given X Y Z E
+ */
+void GcodeSuite::G92() {
+  bool didXYZ = false,
+       didE = parser.seenval('E');
+
+  if (!didE) stepper.synchronize();
+
+  LOOP_XYZE(i) {
+    if (parser.seenval(axis_codes[i])) {
+      #if IS_SCARA
+        current_position[i] = parser.value_axis_units((AxisEnum)i);
+        if (i != E_AXIS) didXYZ = true;
+      #else
+        #if HAS_POSITION_SHIFT
+          const float p = current_position[i];
+        #endif
+        const float v = parser.value_axis_units((AxisEnum)i);
+
+        current_position[i] = v;
+
+        if (i != E_AXIS) {
+          didXYZ = true;
+          #if HAS_POSITION_SHIFT
+            position_shift[i] += v - p; // Offset the coordinate space
+            update_software_endstops((AxisEnum)i);
+
+            #if ENABLED(I2C_POSITION_ENCODERS)
+              I2CPEM.encoders[I2CPEM.idx_from_axis((AxisEnum)i)].set_axis_offset(position_shift[i]);
+            #endif
+
+          #endif
+        }
+      #endif
+    }
+  }
+  if (didXYZ)
+    SYNC_PLAN_POSITION_KINEMATIC();
+  else if (didE)
+    sync_plan_position_e();
+
+  report_current_position();
+}
