commit 49348716f538a16f7232efb0eed5d4e01d5a1494
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon May 6 19:58:00 2024 -0400

    ü©π Fix printf et.al. expecting F-strings (#27032)

diff --git a/Marlin/src/feature/stepper_driver_safety.cpp b/Marlin/src/feature/stepper_driver_safety.cpp
index acdd695909..3ddc05ea1e 100644
--- a/Marlin/src/feature/stepper_driver_safety.cpp
+++ b/Marlin/src/feature/stepper_driver_safety.cpp
@@ -24,21 +24,21 @@
 
 #if HAS_DRIVER_SAFE_POWER_PROTECT
 
 #include "stepper_driver_safety.h"
 
 static uint32_t axis_plug_backward = 0;
 
 void stepper_driver_backward_error(FSTR_P const fstr) {
   SERIAL_ERROR_START();
   SERIAL_ECHOLN(fstr, F(" driver is backward!"));
-  ui.status_printf(2, F(S_FMT S_FMT), FTOP(fstr), GET_TEXT(MSG_DRIVER_BACKWARD));
+  ui.status_printf(2, F(S_FMT S_FMT), FTOP(fstr), GET_TEXT_F(MSG_DRIVER_BACKWARD));
 }
 
 void stepper_driver_backward_check() {
 
   OUT_WRITE(SAFE_POWER_PIN, LOW);
 
   #define _TEST_BACKWARD(AXIS, BIT) do { \
       SET_INPUT(AXIS##_ENABLE_PIN); \
       OUT_WRITE(AXIS##_STEP_PIN, false); \
       delay(20); \

commit 2ef71c6ebaa1f1b496eb369879fe22c69cf9adb4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jun 12 16:38:14 2023 -0500

    ‚ôªÔ∏è Simplify SERIAL_ECHO (#25928)
    
    Since this increases AVR code size, try to optimize further.

diff --git a/Marlin/src/feature/stepper_driver_safety.cpp b/Marlin/src/feature/stepper_driver_safety.cpp
index d3fc161486..acdd695909 100644
--- a/Marlin/src/feature/stepper_driver_safety.cpp
+++ b/Marlin/src/feature/stepper_driver_safety.cpp
@@ -23,22 +23,21 @@
 #include "../lcd/marlinui.h"
 
 #if HAS_DRIVER_SAFE_POWER_PROTECT
 
 #include "stepper_driver_safety.h"
 
 static uint32_t axis_plug_backward = 0;
 
 void stepper_driver_backward_error(FSTR_P const fstr) {
   SERIAL_ERROR_START();
-  SERIAL_ECHOF(fstr);
-  SERIAL_ECHOLNPGM(" driver is backward!");
+  SERIAL_ECHOLN(fstr, F(" driver is backward!"));
   ui.status_printf(2, F(S_FMT S_FMT), FTOP(fstr), GET_TEXT(MSG_DRIVER_BACKWARD));
 }
 
 void stepper_driver_backward_check() {
 
   OUT_WRITE(SAFE_POWER_PIN, LOW);
 
   #define _TEST_BACKWARD(AXIS, BIT) do { \
       SET_INPUT(AXIS##_ENABLE_PIN); \
       OUT_WRITE(AXIS##_STEP_PIN, false); \

commit 73932855609aa949fa13e3570659ce26c43b0ab8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jan 20 21:17:13 2023 -0600

    SDIO retry, hsd clock, etc.

diff --git a/Marlin/src/feature/stepper_driver_safety.cpp b/Marlin/src/feature/stepper_driver_safety.cpp
index b8762da9b0..d3fc161486 100644
--- a/Marlin/src/feature/stepper_driver_safety.cpp
+++ b/Marlin/src/feature/stepper_driver_safety.cpp
@@ -36,21 +36,21 @@ void stepper_driver_backward_error(FSTR_P const fstr) {
 }
 
 void stepper_driver_backward_check() {
 
   OUT_WRITE(SAFE_POWER_PIN, LOW);
 
   #define _TEST_BACKWARD(AXIS, BIT) do { \
       SET_INPUT(AXIS##_ENABLE_PIN); \
       OUT_WRITE(AXIS##_STEP_PIN, false); \
       delay(20); \
-      if (READ(AXIS##_ENABLE_PIN) == false) { \
+      if (READ(AXIS##_ENABLE_PIN) == LOW) { \
         SBI(axis_plug_backward, BIT); \
         stepper_driver_backward_error(F(STRINGIFY(AXIS))); \
       } \
     }while(0)
 
   #define TEST_BACKWARD(AXIS, BIT) TERN_(HAS_##AXIS##_ENABLE, _TEST_BACKWARD(AXIS, BIT))
 
   TEST_BACKWARD(X,   0);
   TEST_BACKWARD(X2,  1);
 

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/stepper_driver_safety.cpp b/Marlin/src/feature/stepper_driver_safety.cpp
index 11b90954b4..b8762da9b0 100644
--- a/Marlin/src/feature/stepper_driver_safety.cpp
+++ b/Marlin/src/feature/stepper_driver_safety.cpp
@@ -58,29 +58,32 @@ void stepper_driver_backward_check() {
   TEST_BACKWARD(Y2,  3);
 
   TEST_BACKWARD(Z,   4);
   TEST_BACKWARD(Z2,  5);
   TEST_BACKWARD(Z3,  6);
   TEST_BACKWARD(Z4,  7);
 
   TEST_BACKWARD(I,   8);
   TEST_BACKWARD(J,   9);
   TEST_BACKWARD(K,  10);
-
-  TEST_BACKWARD(E0, 11);
-  TEST_BACKWARD(E1, 12);
-  TEST_BACKWARD(E2, 13);
-  TEST_BACKWARD(E3, 14);
-  TEST_BACKWARD(E4, 15);
-  TEST_BACKWARD(E5, 16);
-  TEST_BACKWARD(E6, 17);
-  TEST_BACKWARD(E7, 18);
+  TEST_BACKWARD(U,  11);
+  TEST_BACKWARD(V,  12);
+  TEST_BACKWARD(W,  13);
+
+  TEST_BACKWARD(E0, 14);
+  TEST_BACKWARD(E1, 15);
+  TEST_BACKWARD(E2, 16);
+  TEST_BACKWARD(E3, 17);
+  TEST_BACKWARD(E4, 18);
+  TEST_BACKWARD(E5, 19);
+  TEST_BACKWARD(E6, 20);
+  TEST_BACKWARD(E7, 21);
 
   if (!axis_plug_backward)
     WRITE(SAFE_POWER_PIN, HIGH);
 }
 
 void stepper_driver_backward_report() {
   if (!axis_plug_backward) return;
 
   auto _report_if_backward = [](FSTR_P const axis, uint8_t bit) {
     if (TEST(axis_plug_backward, bit))
@@ -96,22 +99,25 @@ void stepper_driver_backward_report() {
   REPORT_BACKWARD(Y2,  3);
 
   REPORT_BACKWARD(Z,   4);
   REPORT_BACKWARD(Z2,  5);
   REPORT_BACKWARD(Z3,  6);
   REPORT_BACKWARD(Z4,  7);
 
   REPORT_BACKWARD(I,   8);
   REPORT_BACKWARD(J,   9);
   REPORT_BACKWARD(K,  10);
-
-  REPORT_BACKWARD(E0, 11);
-  REPORT_BACKWARD(E1, 12);
-  REPORT_BACKWARD(E2, 13);
-  REPORT_BACKWARD(E3, 14);
-  REPORT_BACKWARD(E4, 15);
-  REPORT_BACKWARD(E5, 16);
-  REPORT_BACKWARD(E6, 17);
-  REPORT_BACKWARD(E7, 18);
+  REPORT_BACKWARD(U,  11);
+  REPORT_BACKWARD(V,  12);
+  REPORT_BACKWARD(W,  13);
+
+  REPORT_BACKWARD(E0, 14);
+  REPORT_BACKWARD(E1, 15);
+  REPORT_BACKWARD(E2, 16);
+  REPORT_BACKWARD(E3, 17);
+  REPORT_BACKWARD(E4, 18);
+  REPORT_BACKWARD(E5, 19);
+  REPORT_BACKWARD(E6, 20);
+  REPORT_BACKWARD(E7, 21);
 }
 
 #endif // HAS_DRIVER_SAFE_POWER_PROTECT

commit 1dafd1887e40399faf16e3455e3670ed3acfac52
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 27 13:46:42 2021 -0500

    üé® Apply F() to various reports

diff --git a/Marlin/src/feature/stepper_driver_safety.cpp b/Marlin/src/feature/stepper_driver_safety.cpp
index 8ba0968cd2..11b90954b4 100644
--- a/Marlin/src/feature/stepper_driver_safety.cpp
+++ b/Marlin/src/feature/stepper_driver_safety.cpp
@@ -21,38 +21,38 @@
  */
 #include "../inc/MarlinConfig.h"
 #include "../lcd/marlinui.h"
 
 #if HAS_DRIVER_SAFE_POWER_PROTECT
 
 #include "stepper_driver_safety.h"
 
 static uint32_t axis_plug_backward = 0;
 
-void stepper_driver_backward_error(PGM_P str) {
+void stepper_driver_backward_error(FSTR_P const fstr) {
   SERIAL_ERROR_START();
-  SERIAL_ECHOPGM_P(str);
+  SERIAL_ECHOF(fstr);
   SERIAL_ECHOLNPGM(" driver is backward!");
-  ui.status_printf(2, F(S_FMT S_FMT), str, GET_TEXT(MSG_DRIVER_BACKWARD));
+  ui.status_printf(2, F(S_FMT S_FMT), FTOP(fstr), GET_TEXT(MSG_DRIVER_BACKWARD));
 }
 
 void stepper_driver_backward_check() {
 
   OUT_WRITE(SAFE_POWER_PIN, LOW);
 
   #define _TEST_BACKWARD(AXIS, BIT) do { \
       SET_INPUT(AXIS##_ENABLE_PIN); \
       OUT_WRITE(AXIS##_STEP_PIN, false); \
       delay(20); \
       if (READ(AXIS##_ENABLE_PIN) == false) { \
         SBI(axis_plug_backward, BIT); \
-        stepper_driver_backward_error(PSTR(STRINGIFY(AXIS))); \
+        stepper_driver_backward_error(F(STRINGIFY(AXIS))); \
       } \
     }while(0)
 
   #define TEST_BACKWARD(AXIS, BIT) TERN_(HAS_##AXIS##_ENABLE, _TEST_BACKWARD(AXIS, BIT))
 
   TEST_BACKWARD(X,   0);
   TEST_BACKWARD(X2,  1);
 
   TEST_BACKWARD(Y,   2);
   TEST_BACKWARD(Y2,  3);
@@ -75,26 +75,26 @@ void stepper_driver_backward_check() {
   TEST_BACKWARD(E6, 17);
   TEST_BACKWARD(E7, 18);
 
   if (!axis_plug_backward)
     WRITE(SAFE_POWER_PIN, HIGH);
 }
 
 void stepper_driver_backward_report() {
   if (!axis_plug_backward) return;
 
-  auto _report_if_backward = [](PGM_P axis, uint8_t bit) {
+  auto _report_if_backward = [](FSTR_P const axis, uint8_t bit) {
     if (TEST(axis_plug_backward, bit))
       stepper_driver_backward_error(axis);
   };
 
-  #define REPORT_BACKWARD(axis, bit) TERN_(HAS_##axis##_ENABLE, _report_if_backward(PSTR(STRINGIFY(axis)), bit))
+  #define REPORT_BACKWARD(axis, bit) TERN_(HAS_##axis##_ENABLE, _report_if_backward(F(STRINGIFY(axis)), bit))
 
   REPORT_BACKWARD(X,   0);
   REPORT_BACKWARD(X2,  1);
 
   REPORT_BACKWARD(Y,   2);
   REPORT_BACKWARD(Y2,  3);
 
   REPORT_BACKWARD(Z,   4);
   REPORT_BACKWARD(Z2,  5);
   REPORT_BACKWARD(Z3,  6);

commit 7f1286a11f87065c4e666985e679cf9c77d668bf
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 17:05:11 2021 -0500

    üé® Apply F() to status message

diff --git a/Marlin/src/feature/stepper_driver_safety.cpp b/Marlin/src/feature/stepper_driver_safety.cpp
index c7da5d2ff7..8ba0968cd2 100644
--- a/Marlin/src/feature/stepper_driver_safety.cpp
+++ b/Marlin/src/feature/stepper_driver_safety.cpp
@@ -25,21 +25,21 @@
 #if HAS_DRIVER_SAFE_POWER_PROTECT
 
 #include "stepper_driver_safety.h"
 
 static uint32_t axis_plug_backward = 0;
 
 void stepper_driver_backward_error(PGM_P str) {
   SERIAL_ERROR_START();
   SERIAL_ECHOPGM_P(str);
   SERIAL_ECHOLNPGM(" driver is backward!");
-  ui.status_printf_P(2, PSTR(S_FMT S_FMT), str, GET_TEXT(MSG_DRIVER_BACKWARD));
+  ui.status_printf(2, F(S_FMT S_FMT), str, GET_TEXT(MSG_DRIVER_BACKWARD));
 }
 
 void stepper_driver_backward_check() {
 
   OUT_WRITE(SAFE_POWER_PIN, LOW);
 
   #define _TEST_BACKWARD(AXIS, BIT) do { \
       SET_INPUT(AXIS##_ENABLE_PIN); \
       OUT_WRITE(AXIS##_STEP_PIN, false); \
       delay(20); \

commit f2ba845dad67c57a6cf1ce5a75bc4f526681ca2d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 02:39:11 2021 -0500

    üé® Condense reverse-protection code

diff --git a/Marlin/src/feature/stepper_driver_safety.cpp b/Marlin/src/feature/stepper_driver_safety.cpp
index 991f5a5906..c7da5d2ff7 100644
--- a/Marlin/src/feature/stepper_driver_safety.cpp
+++ b/Marlin/src/feature/stepper_driver_safety.cpp
@@ -32,140 +32,86 @@ void stepper_driver_backward_error(PGM_P str) {
   SERIAL_ERROR_START();
   SERIAL_ECHOPGM_P(str);
   SERIAL_ECHOLNPGM(" driver is backward!");
   ui.status_printf_P(2, PSTR(S_FMT S_FMT), str, GET_TEXT(MSG_DRIVER_BACKWARD));
 }
 
 void stepper_driver_backward_check() {
 
   OUT_WRITE(SAFE_POWER_PIN, LOW);
 
-  #define TEST_BACKWARD(AXIS, BIT) do { \
+  #define _TEST_BACKWARD(AXIS, BIT) do { \
       SET_INPUT(AXIS##_ENABLE_PIN); \
       OUT_WRITE(AXIS##_STEP_PIN, false); \
       delay(20); \
       if (READ(AXIS##_ENABLE_PIN) == false) { \
         SBI(axis_plug_backward, BIT); \
         stepper_driver_backward_error(PSTR(STRINGIFY(AXIS))); \
       } \
     }while(0)
 
-  #if HAS_X_ENABLE
-    TEST_BACKWARD(X, 0);
-  #endif
-  #if HAS_X2_ENABLE
-    TEST_BACKWARD(X2, 1);
-  #endif
-
-  #if HAS_Y_ENABLE
-    TEST_BACKWARD(Y, 2);
-  #endif
-  #if HAS_Y2_ENABLE
-    TEST_BACKWARD(Y2, 3);
-  #endif
-
-  #if HAS_Z_ENABLE
-    TEST_BACKWARD(Z, 4);
-  #endif
-  #if HAS_Z2_ENABLE
-    TEST_BACKWARD(Z2, 5);
-  #endif
-  #if HAS_Z3_ENABLE
-    TEST_BACKWARD(Z3, 6);
-  #endif
-  #if HAS_Z4_ENABLE
-    TEST_BACKWARD(Z4, 7);
-  #endif
-
-  #if HAS_E0_ENABLE
-    TEST_BACKWARD(E0, 8);
-  #endif
-  #if HAS_E1_ENABLE
-    TEST_BACKWARD(E1, 9);
-  #endif
-  #if HAS_E2_ENABLE
-    TEST_BACKWARD(E2, 10);
-  #endif
-  #if HAS_E3_ENABLE
-    TEST_BACKWARD(E3, 11);
-  #endif
-  #if HAS_E4_ENABLE
-    TEST_BACKWARD(E4, 12);
-  #endif
-  #if HAS_E5_ENABLE
-    TEST_BACKWARD(E5, 13);
-  #endif
-  #if HAS_E6_ENABLE
-    TEST_BACKWARD(E6, 14);
-  #endif
-  #if HAS_E7_ENABLE
-    TEST_BACKWARD(E7, 15);
-  #endif
+  #define TEST_BACKWARD(AXIS, BIT) TERN_(HAS_##AXIS##_ENABLE, _TEST_BACKWARD(AXIS, BIT))
+
+  TEST_BACKWARD(X,   0);
+  TEST_BACKWARD(X2,  1);
+
+  TEST_BACKWARD(Y,   2);
+  TEST_BACKWARD(Y2,  3);
+
+  TEST_BACKWARD(Z,   4);
+  TEST_BACKWARD(Z2,  5);
+  TEST_BACKWARD(Z3,  6);
+  TEST_BACKWARD(Z4,  7);
+
+  TEST_BACKWARD(I,   8);
+  TEST_BACKWARD(J,   9);
+  TEST_BACKWARD(K,  10);
+
+  TEST_BACKWARD(E0, 11);
+  TEST_BACKWARD(E1, 12);
+  TEST_BACKWARD(E2, 13);
+  TEST_BACKWARD(E3, 14);
+  TEST_BACKWARD(E4, 15);
+  TEST_BACKWARD(E5, 16);
+  TEST_BACKWARD(E6, 17);
+  TEST_BACKWARD(E7, 18);
 
   if (!axis_plug_backward)
     WRITE(SAFE_POWER_PIN, HIGH);
 }
 
 void stepper_driver_backward_report() {
   if (!axis_plug_backward) return;
 
   auto _report_if_backward = [](PGM_P axis, uint8_t bit) {
     if (TEST(axis_plug_backward, bit))
       stepper_driver_backward_error(axis);
   };
 
-  #define REPORT_BACKWARD(axis, bit) _report_if_backward(PSTR(STRINGIFY(axis)), bit)
-
-  #if HAS_X_ENABLE
-    REPORT_BACKWARD(X, 0);
-  #endif
-  #if HAS_X2_ENABLE
-    REPORT_BACKWARD(X2, 1);
-  #endif
-
-  #if HAS_Y_ENABLE
-    REPORT_BACKWARD(Y, 2);
-  #endif
-  #if HAS_Y2_ENABLE
-    REPORT_BACKWARD(Y2, 3);
-  #endif
-
-  #if HAS_Z_ENABLE
-    REPORT_BACKWARD(Z, 4);
-  #endif
-  #if HAS_Z2_ENABLE
-    REPORT_BACKWARD(Z2, 5);
-  #endif
-  #if HAS_Z3_ENABLE
-    REPORT_BACKWARD(Z3, 6);
-  #endif
-  #if HAS_Z4_ENABLE
-    REPORT_BACKWARD(Z4, 7);
-  #endif
-
-  #if HAS_E0_ENABLE
-    REPORT_BACKWARD(E0, 8);
-  #endif
-  #if HAS_E1_ENABLE
-    REPORT_BACKWARD(E1, 9);
-  #endif
-  #if HAS_E2_ENABLE
-    REPORT_BACKWARD(E2, 10);
-  #endif
-  #if HAS_E3_ENABLE
-    REPORT_BACKWARD(E3, 11);
-  #endif
-  #if HAS_E4_ENABLE
-    REPORT_BACKWARD(E4, 12);
-  #endif
-  #if HAS_E5_ENABLE
-    REPORT_BACKWARD(E5, 13);
-  #endif
-  #if HAS_E6_ENABLE
-    REPORT_BACKWARD(E6, 14);
-  #endif
-  #if HAS_E7_ENABLE
-    REPORT_BACKWARD(E7, 15);
-  #endif
+  #define REPORT_BACKWARD(axis, bit) TERN_(HAS_##axis##_ENABLE, _report_if_backward(PSTR(STRINGIFY(axis)), bit))
+
+  REPORT_BACKWARD(X,   0);
+  REPORT_BACKWARD(X2,  1);
+
+  REPORT_BACKWARD(Y,   2);
+  REPORT_BACKWARD(Y2,  3);
+
+  REPORT_BACKWARD(Z,   4);
+  REPORT_BACKWARD(Z2,  5);
+  REPORT_BACKWARD(Z3,  6);
+  REPORT_BACKWARD(Z4,  7);
+
+  REPORT_BACKWARD(I,   8);
+  REPORT_BACKWARD(J,   9);
+  REPORT_BACKWARD(K,  10);
+
+  REPORT_BACKWARD(E0, 11);
+  REPORT_BACKWARD(E1, 12);
+  REPORT_BACKWARD(E2, 13);
+  REPORT_BACKWARD(E3, 14);
+  REPORT_BACKWARD(E4, 15);
+  REPORT_BACKWARD(E5, 16);
+  REPORT_BACKWARD(E6, 17);
+  REPORT_BACKWARD(E7, 18);
 }
 
 #endif // HAS_DRIVER_SAFE_POWER_PROTECT

commit 69d85cce2da20b88784db68324c228db212af071
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Tue Apr 27 00:22:09 2021 -0700

    BTT SKR V2.0 / Stepper Driver Anti-Reverse Protection (#21503)

diff --git a/Marlin/src/feature/stepper_driver_safety.cpp b/Marlin/src/feature/stepper_driver_safety.cpp
new file mode 100644
index 0000000000..991f5a5906
--- /dev/null
+++ b/Marlin/src/feature/stepper_driver_safety.cpp
@@ -0,0 +1,171 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2021 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#include "../inc/MarlinConfig.h"
+#include "../lcd/marlinui.h"
+
+#if HAS_DRIVER_SAFE_POWER_PROTECT
+
+#include "stepper_driver_safety.h"
+
+static uint32_t axis_plug_backward = 0;
+
+void stepper_driver_backward_error(PGM_P str) {
+  SERIAL_ERROR_START();
+  SERIAL_ECHOPGM_P(str);
+  SERIAL_ECHOLNPGM(" driver is backward!");
+  ui.status_printf_P(2, PSTR(S_FMT S_FMT), str, GET_TEXT(MSG_DRIVER_BACKWARD));
+}
+
+void stepper_driver_backward_check() {
+
+  OUT_WRITE(SAFE_POWER_PIN, LOW);
+
+  #define TEST_BACKWARD(AXIS, BIT) do { \
+      SET_INPUT(AXIS##_ENABLE_PIN); \
+      OUT_WRITE(AXIS##_STEP_PIN, false); \
+      delay(20); \
+      if (READ(AXIS##_ENABLE_PIN) == false) { \
+        SBI(axis_plug_backward, BIT); \
+        stepper_driver_backward_error(PSTR(STRINGIFY(AXIS))); \
+      } \
+    }while(0)
+
+  #if HAS_X_ENABLE
+    TEST_BACKWARD(X, 0);
+  #endif
+  #if HAS_X2_ENABLE
+    TEST_BACKWARD(X2, 1);
+  #endif
+
+  #if HAS_Y_ENABLE
+    TEST_BACKWARD(Y, 2);
+  #endif
+  #if HAS_Y2_ENABLE
+    TEST_BACKWARD(Y2, 3);
+  #endif
+
+  #if HAS_Z_ENABLE
+    TEST_BACKWARD(Z, 4);
+  #endif
+  #if HAS_Z2_ENABLE
+    TEST_BACKWARD(Z2, 5);
+  #endif
+  #if HAS_Z3_ENABLE
+    TEST_BACKWARD(Z3, 6);
+  #endif
+  #if HAS_Z4_ENABLE
+    TEST_BACKWARD(Z4, 7);
+  #endif
+
+  #if HAS_E0_ENABLE
+    TEST_BACKWARD(E0, 8);
+  #endif
+  #if HAS_E1_ENABLE
+    TEST_BACKWARD(E1, 9);
+  #endif
+  #if HAS_E2_ENABLE
+    TEST_BACKWARD(E2, 10);
+  #endif
+  #if HAS_E3_ENABLE
+    TEST_BACKWARD(E3, 11);
+  #endif
+  #if HAS_E4_ENABLE
+    TEST_BACKWARD(E4, 12);
+  #endif
+  #if HAS_E5_ENABLE
+    TEST_BACKWARD(E5, 13);
+  #endif
+  #if HAS_E6_ENABLE
+    TEST_BACKWARD(E6, 14);
+  #endif
+  #if HAS_E7_ENABLE
+    TEST_BACKWARD(E7, 15);
+  #endif
+
+  if (!axis_plug_backward)
+    WRITE(SAFE_POWER_PIN, HIGH);
+}
+
+void stepper_driver_backward_report() {
+  if (!axis_plug_backward) return;
+
+  auto _report_if_backward = [](PGM_P axis, uint8_t bit) {
+    if (TEST(axis_plug_backward, bit))
+      stepper_driver_backward_error(axis);
+  };
+
+  #define REPORT_BACKWARD(axis, bit) _report_if_backward(PSTR(STRINGIFY(axis)), bit)
+
+  #if HAS_X_ENABLE
+    REPORT_BACKWARD(X, 0);
+  #endif
+  #if HAS_X2_ENABLE
+    REPORT_BACKWARD(X2, 1);
+  #endif
+
+  #if HAS_Y_ENABLE
+    REPORT_BACKWARD(Y, 2);
+  #endif
+  #if HAS_Y2_ENABLE
+    REPORT_BACKWARD(Y2, 3);
+  #endif
+
+  #if HAS_Z_ENABLE
+    REPORT_BACKWARD(Z, 4);
+  #endif
+  #if HAS_Z2_ENABLE
+    REPORT_BACKWARD(Z2, 5);
+  #endif
+  #if HAS_Z3_ENABLE
+    REPORT_BACKWARD(Z3, 6);
+  #endif
+  #if HAS_Z4_ENABLE
+    REPORT_BACKWARD(Z4, 7);
+  #endif
+
+  #if HAS_E0_ENABLE
+    REPORT_BACKWARD(E0, 8);
+  #endif
+  #if HAS_E1_ENABLE
+    REPORT_BACKWARD(E1, 9);
+  #endif
+  #if HAS_E2_ENABLE
+    REPORT_BACKWARD(E2, 10);
+  #endif
+  #if HAS_E3_ENABLE
+    REPORT_BACKWARD(E3, 11);
+  #endif
+  #if HAS_E4_ENABLE
+    REPORT_BACKWARD(E4, 12);
+  #endif
+  #if HAS_E5_ENABLE
+    REPORT_BACKWARD(E5, 13);
+  #endif
+  #if HAS_E6_ENABLE
+    REPORT_BACKWARD(E6, 14);
+  #endif
+  #if HAS_E7_ENABLE
+    REPORT_BACKWARD(E7, 15);
+  #endif
+}
+
+#endif // HAS_DRIVER_SAFE_POWER_PROTECT
