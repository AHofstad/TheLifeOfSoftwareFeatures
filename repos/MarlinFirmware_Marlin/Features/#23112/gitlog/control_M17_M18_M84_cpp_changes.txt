commit 1f9bfc5c7491d802d242623f8253b1f52c0917a3
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Wed May 10 06:59:25 2023 +1200

    üö∏ Optional X-Axis (#25418)
    
    Co-authored-by: alextrical <35117191+alextrical@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 053497c69c..1742d288b3 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -41,31 +41,33 @@ inline stepper_flags_t selected_axis_bits() {
     if (parser.seen('E')) {
       if (E_TERN0(parser.has_value())) {
         const uint8_t e = parser.value_int();
         if (e < EXTRUDERS)
           selected.bits = _BV(INDEX_OF_AXIS(E_AXIS, e));
       }
       else
         selected.bits = e_axis_mask;
     }
   #endif
-  selected.bits |= NUM_AXIS_GANG(
-      (parser.seen_test('X')        << X_AXIS),
-    | (parser.seen_test('Y')        << Y_AXIS),
-    | (parser.seen_test('Z')        << Z_AXIS),
-    | (parser.seen_test(AXIS4_NAME) << I_AXIS),
-    | (parser.seen_test(AXIS5_NAME) << J_AXIS),
-    | (parser.seen_test(AXIS6_NAME) << K_AXIS),
-    | (parser.seen_test(AXIS7_NAME) << U_AXIS),
-    | (parser.seen_test(AXIS8_NAME) << V_AXIS),
-    | (parser.seen_test(AXIS9_NAME) << W_AXIS)
-  );
+  #if NUM_AXES
+    selected.bits |= NUM_AXIS_GANG(
+        (parser.seen_test('X')        << X_AXIS),
+      | (parser.seen_test('Y')        << Y_AXIS),
+      | (parser.seen_test('Z')        << Z_AXIS),
+      | (parser.seen_test(AXIS4_NAME) << I_AXIS),
+      | (parser.seen_test(AXIS5_NAME) << J_AXIS),
+      | (parser.seen_test(AXIS6_NAME) << K_AXIS),
+      | (parser.seen_test(AXIS7_NAME) << U_AXIS),
+      | (parser.seen_test(AXIS8_NAME) << V_AXIS),
+      | (parser.seen_test(AXIS9_NAME) << W_AXIS)
+    );
+  #endif
   return selected;
 }
 
 // Enable specified axes and warn about other affected axes
 void do_enable(const stepper_flags_t to_enable) {
   const ena_mask_t was_enabled = stepper.axis_enabled.bits,
                   shall_enable = to_enable.bits & ~was_enabled;
 
   DEBUG_ECHOLNPGM("Now Enabled: ", hex_word(stepper.axis_enabled.bits), "  Enabling: ", hex_word(to_enable.bits), " | ", shall_enable);
 

commit 4e2b5b2523cc22700b0b71e6dc8c83fbd8a0b52b
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Fri May 5 04:30:51 2023 +0200

    ü©π Fix Extensible MMU for >8 colors (#25772)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 76fc335e25..053497c69c 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -64,21 +64,21 @@ inline stepper_flags_t selected_axis_bits() {
 
 // Enable specified axes and warn about other affected axes
 void do_enable(const stepper_flags_t to_enable) {
   const ena_mask_t was_enabled = stepper.axis_enabled.bits,
                   shall_enable = to_enable.bits & ~was_enabled;
 
   DEBUG_ECHOLNPGM("Now Enabled: ", hex_word(stepper.axis_enabled.bits), "  Enabling: ", hex_word(to_enable.bits), " | ", shall_enable);
 
   if (!shall_enable) return;    // All specified axes already enabled?
 
-  ena_mask_t also_enabled = 0;    // Track steppers enabled due to overlap
+  ena_mask_t also_enabled = 0;  // Track steppers enabled due to overlap
 
   // Enable all flagged axes
   LOOP_NUM_AXES(a) {
     if (TEST(shall_enable, a)) {
       stepper.enable_axis(AxisEnum(a));         // Mark and enable the requested axis
       DEBUG_ECHOLNPGM("Enabled ", AXIS_CHAR(a), " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... Enabled: ", hex_word(stepper.axis_enabled.bits));
       also_enabled |= enable_overlap[a];
     }
   }
   #if HAS_EXTRUDERS

commit 61f22f34d32ca33d99233eb5b242e52c23aabb23
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Mar 26 17:24:40 2023 -0500

    üîß Clarify axis disable / timeout (#25571)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 4ff48568fa..76fc335e25 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -205,21 +205,21 @@ void try_to_disable(const stepper_flags_t to_disable) {
   DEBUG_ECHOLNPGM("Enabled Now: ", hex_word(stepper.axis_enabled.bits));
 }
 
 /**
  * M18, M84: Disable stepper motor power for one or more axes.
  *           Print warnings for axes that share an ENABLE_PIN.
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     reset_stepper_timeout();
-    #if HAS_DISABLE_INACTIVE_AXIS
+    #if HAS_DISABLE_IDLE_AXES
       const millis_t ms = parser.value_millis_from_seconds();
       #if LASER_SAFETY_TIMEOUT_MS > 0
         if (ms && ms <= LASER_SAFETY_TIMEOUT_MS) {
           SERIAL_ECHO_MSG("M18 timeout must be > ", MS_TO_SEC(LASER_SAFETY_TIMEOUT_MS + 999), " s for laser safety.");
           return;
         }
       #endif
       stepper_inactive_time = ms;
     #endif
   }

commit 21c48d9f927c81d7b7cf6fc3641ce01a831a16ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jul 27 04:24:50 2022 -0500

    üßë‚Äçüíª  Update planner/stepper includes

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index c2c8a702a1..4ff48568fa 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -17,20 +17,21 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 #include "../gcode.h"
 #include "../../MarlinCore.h" // for stepper_inactive_time, disable_e_steppers
 #include "../../lcd/marlinui.h"
 #include "../../module/motion.h" // for e_axis_mask
+#include "../../module/planner.h"
 #include "../../module/stepper.h"
 
 #if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 #define DEBUG_OUT ENABLED(MARLIN_DEV_MODE)
 #include "../../core/debug_out.h"
 #include "../../libs/hex_print.h"
 

commit 85c0875db28477d7ed6515c39376b93407353b27
Author: John Robertson <john@cirtech.co.uk>
Date:   Tue May 31 23:09:44 2022 +0100

    ‚ú® Laser Safety Timeout (#24189)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index ebb8c7eff0..c2c8a702a1 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -204,21 +204,30 @@ void try_to_disable(const stepper_flags_t to_disable) {
   DEBUG_ECHOLNPGM("Enabled Now: ", hex_word(stepper.axis_enabled.bits));
 }
 
 /**
  * M18, M84: Disable stepper motor power for one or more axes.
  *           Print warnings for axes that share an ENABLE_PIN.
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     reset_stepper_timeout();
-    stepper_inactive_time = parser.value_millis_from_seconds();
+    #if HAS_DISABLE_INACTIVE_AXIS
+      const millis_t ms = parser.value_millis_from_seconds();
+      #if LASER_SAFETY_TIMEOUT_MS > 0
+        if (ms && ms <= LASER_SAFETY_TIMEOUT_MS) {
+          SERIAL_ECHO_MSG("M18 timeout must be > ", MS_TO_SEC(LASER_SAFETY_TIMEOUT_MS + 999), " s for laser safety.");
+          return;
+        }
+      #endif
+      stepper_inactive_time = ms;
+    #endif
   }
   else {
     if (parser.seen_axis()) {
       planner.synchronize();
       if (any_enable_overlap())
         try_to_disable(selected_axis_bits());
       else {
         #if HAS_EXTRUDERS
           if (parser.seen('E')) {
             if (E_TERN0(parser.has_value()))

commit 1f322b565f409ab5068e225a4d9a929907c966f1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 26 18:31:05 2022 -0500

    ‚ôªÔ∏è More updates for multi-axis

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 715f7f2a37..ebb8c7eff0 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -16,41 +16,42 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 #include "../gcode.h"
 #include "../../MarlinCore.h" // for stepper_inactive_time, disable_e_steppers
 #include "../../lcd/marlinui.h"
+#include "../../module/motion.h" // for e_axis_mask
 #include "../../module/stepper.h"
 
 #if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 #define DEBUG_OUT ENABLED(MARLIN_DEV_MODE)
 #include "../../core/debug_out.h"
 #include "../../libs/hex_print.h"
 
 inline stepper_flags_t selected_axis_bits() {
   stepper_flags_t selected{0};
   #if HAS_EXTRUDERS
     if (parser.seen('E')) {
       if (E_TERN0(parser.has_value())) {
         const uint8_t e = parser.value_int();
         if (e < EXTRUDERS)
           selected.bits = _BV(INDEX_OF_AXIS(E_AXIS, e));
       }
       else
-        selected.bits = selected.e_bits();
+        selected.bits = e_axis_mask;
     }
   #endif
   selected.bits |= NUM_AXIS_GANG(
       (parser.seen_test('X')        << X_AXIS),
     | (parser.seen_test('Y')        << Y_AXIS),
     | (parser.seen_test('Z')        << Z_AXIS),
     | (parser.seen_test(AXIS4_NAME) << I_AXIS),
     | (parser.seen_test(AXIS5_NAME) << J_AXIS),
     | (parser.seen_test(AXIS6_NAME) << K_AXIS),
     | (parser.seen_test(AXIS7_NAME) << U_AXIS),

commit b523ddf1b2820488c6cc46887ee85e8a781ce726
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 19 06:05:52 2022 -0500

    ‚ôªÔ∏è Common Bed Leveling object name, accessors (#24214)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index a9beaa3f02..715f7f2a37 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -226,13 +226,13 @@ void GcodeSuite::M18_M84() {
               stepper.disable_e_steppers();
           }
         #endif
         LOOP_NUM_AXES(a)
           if (parser.seen_test(AXIS_CHAR(a))) stepper.disable_axis((AxisEnum)a);
       }
     }
     else
       planner.finish_and_disable();
 
-    TERN_(AUTO_BED_LEVELING_UBL, ubl.steppers_were_disabled());
+    TERN_(AUTO_BED_LEVELING_UBL, bedlevel.steppers_were_disabled());
   }
 }

commit 2ee39b62f33027f49fc1c62a05379a37fc52077c
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Mon Apr 18 06:03:39 2022 +0200

    ü©π Fix some parameters w/out values (#24051)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 7a16121c0b..a9beaa3f02 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -121,31 +121,22 @@ void GcodeSuite::M17() {
       #if HAS_EXTRUDERS
         if (parser.seen('E')) {
           if (parser.has_value()) {
             const uint8_t e = parser.value_int();
             if (e < EXTRUDERS) stepper.ENABLE_EXTRUDER(e);
           }
           else
             stepper.enable_e_steppers();
         }
       #endif
-      NUM_AXIS_CODE(
-        if (parser.seen_test('X'))        stepper.enable_axis(X_AXIS),
-        if (parser.seen_test('Y'))        stepper.enable_axis(Y_AXIS),
-        if (parser.seen_test('Z'))        stepper.enable_axis(Z_AXIS),
-        if (parser.seen_test(AXIS4_NAME)) stepper.enable_axis(I_AXIS),
-        if (parser.seen_test(AXIS5_NAME)) stepper.enable_axis(J_AXIS),
-        if (parser.seen_test(AXIS6_NAME)) stepper.enable_axis(K_AXIS),
-        if (parser.seen_test(AXIS7_NAME)) stepper.enable_axis(U_AXIS),
-        if (parser.seen_test(AXIS8_NAME)) stepper.enable_axis(V_AXIS),
-        if (parser.seen_test(AXIS9_NAME)) stepper.enable_axis(W_AXIS)
-      );
+      LOOP_NUM_AXES(a)
+        if (parser.seen_test(AXIS_CHAR(a))) stepper.enable_axis((AxisEnum)a);
     }
   }
   else {
     LCD_MESSAGE(MSG_NO_MOVE);
     stepper.enable_all_steppers();
   }
 }
 
 void try_to_disable(const stepper_flags_t to_disable) {
   ena_mask_t still_enabled = to_disable.bits & stepper.axis_enabled.bits;
@@ -228,29 +219,20 @@ void GcodeSuite::M18_M84() {
         try_to_disable(selected_axis_bits());
       else {
         #if HAS_EXTRUDERS
           if (parser.seen('E')) {
             if (E_TERN0(parser.has_value()))
               stepper.DISABLE_EXTRUDER(parser.value_int());
             else
               stepper.disable_e_steppers();
           }
         #endif
-        NUM_AXIS_CODE(
-          if (parser.seen_test('X'))        stepper.disable_axis(X_AXIS),
-          if (parser.seen_test('Y'))        stepper.disable_axis(Y_AXIS),
-          if (parser.seen_test('Z'))        stepper.disable_axis(Z_AXIS),
-          if (parser.seen_test(AXIS4_NAME)) stepper.disable_axis(I_AXIS),
-          if (parser.seen_test(AXIS5_NAME)) stepper.disable_axis(J_AXIS),
-          if (parser.seen_test(AXIS6_NAME)) stepper.disable_axis(K_AXIS),
-          if (parser.seen_test(AXIS7_NAME)) stepper.disable_axis(U_AXIS),
-          if (parser.seen_test(AXIS8_NAME)) stepper.disable_axis(V_AXIS),
-          if (parser.seen_test(AXIS9_NAME)) stepper.disable_axis(W_AXIS)
-        );
+        LOOP_NUM_AXES(a)
+          if (parser.seen_test(AXIS_CHAR(a))) stepper.disable_axis((AxisEnum)a);
       }
     }
     else
       planner.finish_and_disable();
 
     TERN_(AUTO_BED_LEVELING_UBL, ubl.steppers_were_disabled());
   }
 }

commit 877e10205b286a6c1b8da869c54b50db866c1db8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 3 20:13:11 2022 -0500

    üèóÔ∏è Axis name arrays
    
    Co-Authored-By: DerAndere <26200979+DerAndere1@users.noreply.github.com>

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index b3315a385a..7a16121c0b 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -177,21 +177,21 @@ void try_to_disable(const stepper_flags_t to_disable) {
         }
         else
           DEBUG_ECHOPGM("OVERLAP");
         DEBUG_ECHOLNPGM(" ... still_enabled=", hex_word(still_enabled));
       }
     }
   #endif
 
   auto overlap_warning = [](const ena_mask_t axis_bits) {
     SERIAL_ECHOPGM(" not disabled. Shared with");
-    LOOP_NUM_AXES(a) if (TEST(axis_bits, a)) SERIAL_CHAR(' ', axis_codes[a]);
+    LOOP_NUM_AXES(a) if (TEST(axis_bits, a)) SERIAL_ECHOPGM_P((PGM_P)pgm_read_ptr(&SP_AXIS_STR[a]));
     #if HAS_EXTRUDERS
       #define _EN_STILLON(N) if (TEST(axis_bits, INDEX_OF_AXIS(E_AXIS, N))) SERIAL_CHAR(' ', 'E', '0' + N);
       REPEAT(EXTRUDERS, _EN_STILLON)
     #endif
     SERIAL_ECHOLNPGM(".");
   };
 
   // If any of the requested axes are still enabled, give a warning
   LOOP_NUM_AXES(a) {
     if (TEST(still_enabled, a)) {

commit 8b8defeacc5f7ba2bac63baf65c1d3b1ef60177c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 3 20:52:27 2022 -0500

    üèóÔ∏è Extend AXIS_CHAR to include E
    
    Co-Authored-By: DerAndere <26200979+DerAndere1@users.noreply.github.com>

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 42fd445b7d..b3315a385a 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -68,21 +68,21 @@ void do_enable(const stepper_flags_t to_enable) {
   DEBUG_ECHOLNPGM("Now Enabled: ", hex_word(stepper.axis_enabled.bits), "  Enabling: ", hex_word(to_enable.bits), " | ", shall_enable);
 
   if (!shall_enable) return;    // All specified axes already enabled?
 
   ena_mask_t also_enabled = 0;    // Track steppers enabled due to overlap
 
   // Enable all flagged axes
   LOOP_NUM_AXES(a) {
     if (TEST(shall_enable, a)) {
       stepper.enable_axis(AxisEnum(a));         // Mark and enable the requested axis
-      DEBUG_ECHOLNPGM("Enabled ", axis_codes[a], " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... Enabled: ", hex_word(stepper.axis_enabled.bits));
+      DEBUG_ECHOLNPGM("Enabled ", AXIS_CHAR(a), " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... Enabled: ", hex_word(stepper.axis_enabled.bits));
       also_enabled |= enable_overlap[a];
     }
   }
   #if HAS_EXTRUDERS
     EXTRUDER_LOOP() {
       const uint8_t a = INDEX_OF_AXIS(E_AXIS, e);
       if (TEST(shall_enable, a)) {
         stepper.ENABLE_EXTRUDER(e);
         DEBUG_ECHOLNPGM("Enabled E", AS_DIGIT(e), " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ", hex_word(stepper.axis_enabled.bits));
         also_enabled |= enable_overlap[a];
@@ -150,21 +150,21 @@ void GcodeSuite::M17() {
 void try_to_disable(const stepper_flags_t to_disable) {
   ena_mask_t still_enabled = to_disable.bits & stepper.axis_enabled.bits;
 
   DEBUG_ECHOLNPGM("Enabled: ", hex_word(stepper.axis_enabled.bits), " To Disable: ", hex_word(to_disable.bits), " | ", hex_word(still_enabled));
 
   if (!still_enabled) return;
 
   // Attempt to disable all flagged axes
   LOOP_NUM_AXES(a)
     if (TEST(to_disable.bits, a)) {
-      DEBUG_ECHOPGM("Try to disable ", axis_codes[a], " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ");
+      DEBUG_ECHOPGM("Try to disable ", AXIS_CHAR(a), " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ");
       if (stepper.disable_axis(AxisEnum(a))) {            // Mark the requested axis and request to disable
         DEBUG_ECHOPGM("OK");
         still_enabled &= ~(_BV(a) | enable_overlap[a]);   // If actually disabled, clear one or more tracked bits
       }
       else
         DEBUG_ECHOPGM("OVERLAP");
       DEBUG_ECHOLNPGM(" ... still_enabled=", hex_word(still_enabled));
     }
   #if HAS_EXTRUDERS
     EXTRUDER_LOOP() {
@@ -188,21 +188,21 @@ void try_to_disable(const stepper_flags_t to_disable) {
     #if HAS_EXTRUDERS
       #define _EN_STILLON(N) if (TEST(axis_bits, INDEX_OF_AXIS(E_AXIS, N))) SERIAL_CHAR(' ', 'E', '0' + N);
       REPEAT(EXTRUDERS, _EN_STILLON)
     #endif
     SERIAL_ECHOLNPGM(".");
   };
 
   // If any of the requested axes are still enabled, give a warning
   LOOP_NUM_AXES(a) {
     if (TEST(still_enabled, a)) {
-      SERIAL_CHAR(axis_codes[a]);
+      SERIAL_CHAR(AXIS_CHAR(a));
       overlap_warning(stepper.axis_enabled.bits & enable_overlap[a]);
     }
   }
   #if HAS_EXTRUDERS
     EXTRUDER_LOOP() {
       const uint8_t a = INDEX_OF_AXIS(E_AXIS, e);
       if (TEST(still_enabled, a)) {
         SERIAL_CHAR('E', '0' + e);
         overlap_warning(stepper.axis_enabled.bits & enable_overlap[a]);
       }

commit f5daefb09d1fdf3fc931e2ce84a28d4af1ba2bea
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 3 20:34:48 2022 -0500

    üèóÔ∏è More 9-axis updates

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 4b97dfe9ae..42fd445b7d 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -85,21 +85,21 @@ void do_enable(const stepper_flags_t to_enable) {
       if (TEST(shall_enable, a)) {
         stepper.ENABLE_EXTRUDER(e);
         DEBUG_ECHOLNPGM("Enabled E", AS_DIGIT(e), " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ", hex_word(stepper.axis_enabled.bits));
         also_enabled |= enable_overlap[a];
       }
     }
   #endif
 
   if ((also_enabled &= ~(shall_enable | was_enabled))) {
     SERIAL_CHAR('(');
-    LOOP_NUM_AXES(a) if (TEST(also_enabled, a)) SERIAL_CHAR(axis_codes[a], ' ');
+    LOOP_NUM_AXES(a) if (TEST(also_enabled, a)) SERIAL_CHAR(AXIS_CHAR(a), ' ');
     #if HAS_EXTRUDERS
       #define _EN_ALSO(N) if (TEST(also_enabled, INDEX_OF_AXIS(E_AXIS, N))) SERIAL_CHAR('E', '0' + N, ' ');
       REPEAT(EXTRUDERS, _EN_ALSO)
     #endif
     SERIAL_ECHOLNPGM("also enabled)");
   }
 
   DEBUG_ECHOLNPGM("Enabled Now: ", hex_word(stepper.axis_enabled.bits));
 }
 

commit c4873a64ecd54dc0bbccb1eaeecd1b5ae2f6aef5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 3 16:14:02 2022 -0500

    üßë‚Äçüíª General and Axis-based bitfield flags (#23989)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index c6473af48f..4b97dfe9ae 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -26,22 +26,22 @@
 #include "../../module/stepper.h"
 
 #if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 #define DEBUG_OUT ENABLED(MARLIN_DEV_MODE)
 #include "../../core/debug_out.h"
 #include "../../libs/hex_print.h"
 
-inline axis_flags_t selected_axis_bits() {
-  axis_flags_t selected{0};
+inline stepper_flags_t selected_axis_bits() {
+  stepper_flags_t selected{0};
   #if HAS_EXTRUDERS
     if (parser.seen('E')) {
       if (E_TERN0(parser.has_value())) {
         const uint8_t e = parser.value_int();
         if (e < EXTRUDERS)
           selected.bits = _BV(INDEX_OF_AXIS(E_AXIS, e));
       }
       else
         selected.bits = selected.e_bits();
     }
@@ -54,21 +54,21 @@ inline axis_flags_t selected_axis_bits() {
     | (parser.seen_test(AXIS5_NAME) << J_AXIS),
     | (parser.seen_test(AXIS6_NAME) << K_AXIS),
     | (parser.seen_test(AXIS7_NAME) << U_AXIS),
     | (parser.seen_test(AXIS8_NAME) << V_AXIS),
     | (parser.seen_test(AXIS9_NAME) << W_AXIS)
   );
   return selected;
 }
 
 // Enable specified axes and warn about other affected axes
-void do_enable(const axis_flags_t to_enable) {
+void do_enable(const stepper_flags_t to_enable) {
   const ena_mask_t was_enabled = stepper.axis_enabled.bits,
                   shall_enable = to_enable.bits & ~was_enabled;
 
   DEBUG_ECHOLNPGM("Now Enabled: ", hex_word(stepper.axis_enabled.bits), "  Enabling: ", hex_word(to_enable.bits), " | ", shall_enable);
 
   if (!shall_enable) return;    // All specified axes already enabled?
 
   ena_mask_t also_enabled = 0;    // Track steppers enabled due to overlap
 
   // Enable all flagged axes
@@ -140,21 +140,21 @@ void GcodeSuite::M17() {
         if (parser.seen_test(AXIS9_NAME)) stepper.enable_axis(W_AXIS)
       );
     }
   }
   else {
     LCD_MESSAGE(MSG_NO_MOVE);
     stepper.enable_all_steppers();
   }
 }
 
-void try_to_disable(const axis_flags_t to_disable) {
+void try_to_disable(const stepper_flags_t to_disable) {
   ena_mask_t still_enabled = to_disable.bits & stepper.axis_enabled.bits;
 
   DEBUG_ECHOLNPGM("Enabled: ", hex_word(stepper.axis_enabled.bits), " To Disable: ", hex_word(to_disable.bits), " | ", hex_word(still_enabled));
 
   if (!still_enabled) return;
 
   // Attempt to disable all flagged axes
   LOOP_NUM_AXES(a)
     if (TEST(to_disable.bits, a)) {
       DEBUG_ECHOPGM("Try to disable ", axis_codes[a], " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ");

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 3bc5582ce7..c6473af48f 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -39,64 +39,67 @@ inline axis_flags_t selected_axis_bits() {
     if (parser.seen('E')) {
       if (E_TERN0(parser.has_value())) {
         const uint8_t e = parser.value_int();
         if (e < EXTRUDERS)
           selected.bits = _BV(INDEX_OF_AXIS(E_AXIS, e));
       }
       else
         selected.bits = selected.e_bits();
     }
   #endif
-  selected.bits |= LINEAR_AXIS_GANG(
+  selected.bits |= NUM_AXIS_GANG(
       (parser.seen_test('X')        << X_AXIS),
     | (parser.seen_test('Y')        << Y_AXIS),
     | (parser.seen_test('Z')        << Z_AXIS),
     | (parser.seen_test(AXIS4_NAME) << I_AXIS),
     | (parser.seen_test(AXIS5_NAME) << J_AXIS),
-    | (parser.seen_test(AXIS6_NAME) << K_AXIS)
+    | (parser.seen_test(AXIS6_NAME) << K_AXIS),
+    | (parser.seen_test(AXIS7_NAME) << U_AXIS),
+    | (parser.seen_test(AXIS8_NAME) << V_AXIS),
+    | (parser.seen_test(AXIS9_NAME) << W_AXIS)
   );
   return selected;
 }
 
 // Enable specified axes and warn about other affected axes
 void do_enable(const axis_flags_t to_enable) {
   const ena_mask_t was_enabled = stepper.axis_enabled.bits,
                   shall_enable = to_enable.bits & ~was_enabled;
 
   DEBUG_ECHOLNPGM("Now Enabled: ", hex_word(stepper.axis_enabled.bits), "  Enabling: ", hex_word(to_enable.bits), " | ", shall_enable);
 
   if (!shall_enable) return;    // All specified axes already enabled?
 
   ena_mask_t also_enabled = 0;    // Track steppers enabled due to overlap
 
   // Enable all flagged axes
-  LOOP_LINEAR_AXES(a) {
+  LOOP_NUM_AXES(a) {
     if (TEST(shall_enable, a)) {
       stepper.enable_axis(AxisEnum(a));         // Mark and enable the requested axis
       DEBUG_ECHOLNPGM("Enabled ", axis_codes[a], " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... Enabled: ", hex_word(stepper.axis_enabled.bits));
       also_enabled |= enable_overlap[a];
     }
   }
   #if HAS_EXTRUDERS
     EXTRUDER_LOOP() {
       const uint8_t a = INDEX_OF_AXIS(E_AXIS, e);
       if (TEST(shall_enable, a)) {
         stepper.ENABLE_EXTRUDER(e);
         DEBUG_ECHOLNPGM("Enabled E", AS_DIGIT(e), " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ", hex_word(stepper.axis_enabled.bits));
         also_enabled |= enable_overlap[a];
       }
     }
   #endif
 
   if ((also_enabled &= ~(shall_enable | was_enabled))) {
     SERIAL_CHAR('(');
-    LOOP_LINEAR_AXES(a) if (TEST(also_enabled, a)) SERIAL_CHAR(axis_codes[a], ' ');
+    LOOP_NUM_AXES(a) if (TEST(also_enabled, a)) SERIAL_CHAR(axis_codes[a], ' ');
     #if HAS_EXTRUDERS
       #define _EN_ALSO(N) if (TEST(also_enabled, INDEX_OF_AXIS(E_AXIS, N))) SERIAL_CHAR('E', '0' + N, ' ');
       REPEAT(EXTRUDERS, _EN_ALSO)
     #endif
     SERIAL_ECHOLNPGM("also enabled)");
   }
 
   DEBUG_ECHOLNPGM("Enabled Now: ", hex_word(stepper.axis_enabled.bits));
 }
 
@@ -118,45 +121,48 @@ void GcodeSuite::M17() {
       #if HAS_EXTRUDERS
         if (parser.seen('E')) {
           if (parser.has_value()) {
             const uint8_t e = parser.value_int();
             if (e < EXTRUDERS) stepper.ENABLE_EXTRUDER(e);
           }
           else
             stepper.enable_e_steppers();
         }
       #endif
-      LINEAR_AXIS_CODE(
+      NUM_AXIS_CODE(
         if (parser.seen_test('X'))        stepper.enable_axis(X_AXIS),
         if (parser.seen_test('Y'))        stepper.enable_axis(Y_AXIS),
         if (parser.seen_test('Z'))        stepper.enable_axis(Z_AXIS),
         if (parser.seen_test(AXIS4_NAME)) stepper.enable_axis(I_AXIS),
         if (parser.seen_test(AXIS5_NAME)) stepper.enable_axis(J_AXIS),
-        if (parser.seen_test(AXIS6_NAME)) stepper.enable_axis(K_AXIS)
+        if (parser.seen_test(AXIS6_NAME)) stepper.enable_axis(K_AXIS),
+        if (parser.seen_test(AXIS7_NAME)) stepper.enable_axis(U_AXIS),
+        if (parser.seen_test(AXIS8_NAME)) stepper.enable_axis(V_AXIS),
+        if (parser.seen_test(AXIS9_NAME)) stepper.enable_axis(W_AXIS)
       );
     }
   }
   else {
     LCD_MESSAGE(MSG_NO_MOVE);
     stepper.enable_all_steppers();
   }
 }
 
 void try_to_disable(const axis_flags_t to_disable) {
   ena_mask_t still_enabled = to_disable.bits & stepper.axis_enabled.bits;
 
   DEBUG_ECHOLNPGM("Enabled: ", hex_word(stepper.axis_enabled.bits), " To Disable: ", hex_word(to_disable.bits), " | ", hex_word(still_enabled));
 
   if (!still_enabled) return;
 
   // Attempt to disable all flagged axes
-  LOOP_LINEAR_AXES(a)
+  LOOP_NUM_AXES(a)
     if (TEST(to_disable.bits, a)) {
       DEBUG_ECHOPGM("Try to disable ", axis_codes[a], " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ");
       if (stepper.disable_axis(AxisEnum(a))) {            // Mark the requested axis and request to disable
         DEBUG_ECHOPGM("OK");
         still_enabled &= ~(_BV(a) | enable_overlap[a]);   // If actually disabled, clear one or more tracked bits
       }
       else
         DEBUG_ECHOPGM("OVERLAP");
       DEBUG_ECHOLNPGM(" ... still_enabled=", hex_word(still_enabled));
     }
@@ -171,30 +177,30 @@ void try_to_disable(const axis_flags_t to_disable) {
         }
         else
           DEBUG_ECHOPGM("OVERLAP");
         DEBUG_ECHOLNPGM(" ... still_enabled=", hex_word(still_enabled));
       }
     }
   #endif
 
   auto overlap_warning = [](const ena_mask_t axis_bits) {
     SERIAL_ECHOPGM(" not disabled. Shared with");
-    LOOP_LINEAR_AXES(a) if (TEST(axis_bits, a)) SERIAL_CHAR(' ', axis_codes[a]);
+    LOOP_NUM_AXES(a) if (TEST(axis_bits, a)) SERIAL_CHAR(' ', axis_codes[a]);
     #if HAS_EXTRUDERS
       #define _EN_STILLON(N) if (TEST(axis_bits, INDEX_OF_AXIS(E_AXIS, N))) SERIAL_CHAR(' ', 'E', '0' + N);
       REPEAT(EXTRUDERS, _EN_STILLON)
     #endif
     SERIAL_ECHOLNPGM(".");
   };
 
   // If any of the requested axes are still enabled, give a warning
-  LOOP_LINEAR_AXES(a) {
+  LOOP_NUM_AXES(a) {
     if (TEST(still_enabled, a)) {
       SERIAL_CHAR(axis_codes[a]);
       overlap_warning(stepper.axis_enabled.bits & enable_overlap[a]);
     }
   }
   #if HAS_EXTRUDERS
     EXTRUDER_LOOP() {
       const uint8_t a = INDEX_OF_AXIS(E_AXIS, e);
       if (TEST(still_enabled, a)) {
         SERIAL_CHAR('E', '0' + e);
@@ -222,26 +228,29 @@ void GcodeSuite::M18_M84() {
         try_to_disable(selected_axis_bits());
       else {
         #if HAS_EXTRUDERS
           if (parser.seen('E')) {
             if (E_TERN0(parser.has_value()))
               stepper.DISABLE_EXTRUDER(parser.value_int());
             else
               stepper.disable_e_steppers();
           }
         #endif
-        LINEAR_AXIS_CODE(
+        NUM_AXIS_CODE(
           if (parser.seen_test('X'))        stepper.disable_axis(X_AXIS),
           if (parser.seen_test('Y'))        stepper.disable_axis(Y_AXIS),
           if (parser.seen_test('Z'))        stepper.disable_axis(Z_AXIS),
           if (parser.seen_test(AXIS4_NAME)) stepper.disable_axis(I_AXIS),
           if (parser.seen_test(AXIS5_NAME)) stepper.disable_axis(J_AXIS),
-          if (parser.seen_test(AXIS6_NAME)) stepper.disable_axis(K_AXIS)
+          if (parser.seen_test(AXIS6_NAME)) stepper.disable_axis(K_AXIS),
+          if (parser.seen_test(AXIS7_NAME)) stepper.disable_axis(U_AXIS),
+          if (parser.seen_test(AXIS8_NAME)) stepper.disable_axis(V_AXIS),
+          if (parser.seen_test(AXIS9_NAME)) stepper.disable_axis(W_AXIS)
         );
       }
     }
     else
       planner.finish_and_disable();
 
     TERN_(AUTO_BED_LEVELING_UBL, ubl.steppers_were_disabled());
   }
 }

commit a80a303cbe057b02e8d9cd29bc94c161e48784f1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Mar 22 22:22:08 2022 -0500

    üßë‚Äçüíª EXTRUDER_LOOP macro

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 4683786f1f..3bc5582ce7 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -70,21 +70,21 @@ void do_enable(const axis_flags_t to_enable) {
 
   // Enable all flagged axes
   LOOP_LINEAR_AXES(a) {
     if (TEST(shall_enable, a)) {
       stepper.enable_axis(AxisEnum(a));         // Mark and enable the requested axis
       DEBUG_ECHOLNPGM("Enabled ", axis_codes[a], " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... Enabled: ", hex_word(stepper.axis_enabled.bits));
       also_enabled |= enable_overlap[a];
     }
   }
   #if HAS_EXTRUDERS
-    LOOP_L_N(e, EXTRUDERS) {
+    EXTRUDER_LOOP() {
       const uint8_t a = INDEX_OF_AXIS(E_AXIS, e);
       if (TEST(shall_enable, a)) {
         stepper.ENABLE_EXTRUDER(e);
         DEBUG_ECHOLNPGM("Enabled E", AS_DIGIT(e), " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ", hex_word(stepper.axis_enabled.bits));
         also_enabled |= enable_overlap[a];
       }
     }
   #endif
 
   if ((also_enabled &= ~(shall_enable | was_enabled))) {
@@ -154,21 +154,21 @@ void try_to_disable(const axis_flags_t to_disable) {
       DEBUG_ECHOPGM("Try to disable ", axis_codes[a], " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ");
       if (stepper.disable_axis(AxisEnum(a))) {            // Mark the requested axis and request to disable
         DEBUG_ECHOPGM("OK");
         still_enabled &= ~(_BV(a) | enable_overlap[a]);   // If actually disabled, clear one or more tracked bits
       }
       else
         DEBUG_ECHOPGM("OVERLAP");
       DEBUG_ECHOLNPGM(" ... still_enabled=", hex_word(still_enabled));
     }
   #if HAS_EXTRUDERS
-    LOOP_L_N(e, EXTRUDERS) {
+    EXTRUDER_LOOP() {
       const uint8_t a = INDEX_OF_AXIS(E_AXIS, e);
       if (TEST(to_disable.bits, a)) {
         DEBUG_ECHOPGM("Try to disable E", AS_DIGIT(e), " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ");
         if (stepper.DISABLE_EXTRUDER(e)) {
           DEBUG_ECHOPGM("OK");
           still_enabled &= ~(_BV(a) | enable_overlap[a]);
         }
         else
           DEBUG_ECHOPGM("OVERLAP");
         DEBUG_ECHOLNPGM(" ... still_enabled=", hex_word(still_enabled));
@@ -187,21 +187,21 @@ void try_to_disable(const axis_flags_t to_disable) {
   };
 
   // If any of the requested axes are still enabled, give a warning
   LOOP_LINEAR_AXES(a) {
     if (TEST(still_enabled, a)) {
       SERIAL_CHAR(axis_codes[a]);
       overlap_warning(stepper.axis_enabled.bits & enable_overlap[a]);
     }
   }
   #if HAS_EXTRUDERS
-    LOOP_L_N(e, EXTRUDERS) {
+    EXTRUDER_LOOP() {
       const uint8_t a = INDEX_OF_AXIS(E_AXIS, e);
       if (TEST(still_enabled, a)) {
         SERIAL_CHAR('E', '0' + e);
         overlap_warning(stepper.axis_enabled.bits & enable_overlap[a]);
       }
     }
   #endif
 
   DEBUG_ECHOLNPGM("Enabled Now: ", hex_word(stepper.axis_enabled.bits));
 }

commit 7f1286a11f87065c4e666985e679cf9c77d668bf
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 17:05:11 2021 -0500

    üé® Apply F() to status message

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 82df20ac45..4683786f1f 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -129,21 +129,21 @@ void GcodeSuite::M17() {
         if (parser.seen_test('X'))        stepper.enable_axis(X_AXIS),
         if (parser.seen_test('Y'))        stepper.enable_axis(Y_AXIS),
         if (parser.seen_test('Z'))        stepper.enable_axis(Z_AXIS),
         if (parser.seen_test(AXIS4_NAME)) stepper.enable_axis(I_AXIS),
         if (parser.seen_test(AXIS5_NAME)) stepper.enable_axis(J_AXIS),
         if (parser.seen_test(AXIS6_NAME)) stepper.enable_axis(K_AXIS)
       );
     }
   }
   else {
-    LCD_MESSAGEPGM(MSG_NO_MOVE);
+    LCD_MESSAGE(MSG_NO_MOVE);
     stepper.enable_all_steppers();
   }
 }
 
 void try_to_disable(const axis_flags_t to_disable) {
   ena_mask_t still_enabled = to_disable.bits & stepper.axis_enabled.bits;
 
   DEBUG_ECHOLNPGM("Enabled: ", hex_word(stepper.axis_enabled.bits), " To Disable: ", hex_word(to_disable.bits), " | ", hex_word(still_enabled));
 
   if (!still_enabled) return;

commit 33e0855e2c173680865aaa6c6aa93047d63fc469
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 01:07:51 2021 -0500

    ‚ö°Ô∏è Handle shared enable pins (#22824)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index e6e0f033ec..82df20ac45 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -22,58 +22,226 @@
 
 #include "../gcode.h"
 #include "../../MarlinCore.h" // for stepper_inactive_time, disable_e_steppers
 #include "../../lcd/marlinui.h"
 #include "../../module/stepper.h"
 
 #if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
+#define DEBUG_OUT ENABLED(MARLIN_DEV_MODE)
+#include "../../core/debug_out.h"
+#include "../../libs/hex_print.h"
+
+inline axis_flags_t selected_axis_bits() {
+  axis_flags_t selected{0};
+  #if HAS_EXTRUDERS
+    if (parser.seen('E')) {
+      if (E_TERN0(parser.has_value())) {
+        const uint8_t e = parser.value_int();
+        if (e < EXTRUDERS)
+          selected.bits = _BV(INDEX_OF_AXIS(E_AXIS, e));
+      }
+      else
+        selected.bits = selected.e_bits();
+    }
+  #endif
+  selected.bits |= LINEAR_AXIS_GANG(
+      (parser.seen_test('X')        << X_AXIS),
+    | (parser.seen_test('Y')        << Y_AXIS),
+    | (parser.seen_test('Z')        << Z_AXIS),
+    | (parser.seen_test(AXIS4_NAME) << I_AXIS),
+    | (parser.seen_test(AXIS5_NAME) << J_AXIS),
+    | (parser.seen_test(AXIS6_NAME) << K_AXIS)
+  );
+  return selected;
+}
+
+// Enable specified axes and warn about other affected axes
+void do_enable(const axis_flags_t to_enable) {
+  const ena_mask_t was_enabled = stepper.axis_enabled.bits,
+                  shall_enable = to_enable.bits & ~was_enabled;
+
+  DEBUG_ECHOLNPGM("Now Enabled: ", hex_word(stepper.axis_enabled.bits), "  Enabling: ", hex_word(to_enable.bits), " | ", shall_enable);
+
+  if (!shall_enable) return;    // All specified axes already enabled?
+
+  ena_mask_t also_enabled = 0;    // Track steppers enabled due to overlap
+
+  // Enable all flagged axes
+  LOOP_LINEAR_AXES(a) {
+    if (TEST(shall_enable, a)) {
+      stepper.enable_axis(AxisEnum(a));         // Mark and enable the requested axis
+      DEBUG_ECHOLNPGM("Enabled ", axis_codes[a], " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... Enabled: ", hex_word(stepper.axis_enabled.bits));
+      also_enabled |= enable_overlap[a];
+    }
+  }
+  #if HAS_EXTRUDERS
+    LOOP_L_N(e, EXTRUDERS) {
+      const uint8_t a = INDEX_OF_AXIS(E_AXIS, e);
+      if (TEST(shall_enable, a)) {
+        stepper.ENABLE_EXTRUDER(e);
+        DEBUG_ECHOLNPGM("Enabled E", AS_DIGIT(e), " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ", hex_word(stepper.axis_enabled.bits));
+        also_enabled |= enable_overlap[a];
+      }
+    }
+  #endif
+
+  if ((also_enabled &= ~(shall_enable | was_enabled))) {
+    SERIAL_CHAR('(');
+    LOOP_LINEAR_AXES(a) if (TEST(also_enabled, a)) SERIAL_CHAR(axis_codes[a], ' ');
+    #if HAS_EXTRUDERS
+      #define _EN_ALSO(N) if (TEST(also_enabled, INDEX_OF_AXIS(E_AXIS, N))) SERIAL_CHAR('E', '0' + N, ' ');
+      REPEAT(EXTRUDERS, _EN_ALSO)
+    #endif
+    SERIAL_ECHOLNPGM("also enabled)");
+  }
+
+  DEBUG_ECHOLNPGM("Enabled Now: ", hex_word(stepper.axis_enabled.bits));
+}
+
 /**
- * M17: Enable stepper motors
+ * M17: Enable stepper motor power for one or more axes.
+ *      Print warnings for axes that share an ENABLE_PIN.
+ *
+ * Examples:
+ *
+ *  M17 XZ ; Enable X and Z axes
+ *  M17 E  ; Enable all E steppers
+ *  M17 E1 ; Enable just the E1 stepper
  */
 void GcodeSuite::M17() {
   if (parser.seen_axis()) {
-    LOGICAL_AXIS_CODE(
-      if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen_test('E'))) enable_e_steppers(),
-      if (parser.seen_test('X'))        ENABLE_AXIS_X(),
-      if (parser.seen_test('Y'))        ENABLE_AXIS_Y(),
-      if (parser.seen_test('Z'))        ENABLE_AXIS_Z(),
-      if (parser.seen_test(AXIS4_NAME)) ENABLE_AXIS_I(),
-      if (parser.seen_test(AXIS5_NAME)) ENABLE_AXIS_J(),
-      if (parser.seen_test(AXIS6_NAME)) ENABLE_AXIS_K()
-    );
+    if (any_enable_overlap())
+      do_enable(selected_axis_bits());
+    else {
+      #if HAS_EXTRUDERS
+        if (parser.seen('E')) {
+          if (parser.has_value()) {
+            const uint8_t e = parser.value_int();
+            if (e < EXTRUDERS) stepper.ENABLE_EXTRUDER(e);
+          }
+          else
+            stepper.enable_e_steppers();
+        }
+      #endif
+      LINEAR_AXIS_CODE(
+        if (parser.seen_test('X'))        stepper.enable_axis(X_AXIS),
+        if (parser.seen_test('Y'))        stepper.enable_axis(Y_AXIS),
+        if (parser.seen_test('Z'))        stepper.enable_axis(Z_AXIS),
+        if (parser.seen_test(AXIS4_NAME)) stepper.enable_axis(I_AXIS),
+        if (parser.seen_test(AXIS5_NAME)) stepper.enable_axis(J_AXIS),
+        if (parser.seen_test(AXIS6_NAME)) stepper.enable_axis(K_AXIS)
+      );
+    }
   }
   else {
     LCD_MESSAGEPGM(MSG_NO_MOVE);
-    enable_all_steppers();
+    stepper.enable_all_steppers();
   }
 }
 
+void try_to_disable(const axis_flags_t to_disable) {
+  ena_mask_t still_enabled = to_disable.bits & stepper.axis_enabled.bits;
+
+  DEBUG_ECHOLNPGM("Enabled: ", hex_word(stepper.axis_enabled.bits), " To Disable: ", hex_word(to_disable.bits), " | ", hex_word(still_enabled));
+
+  if (!still_enabled) return;
+
+  // Attempt to disable all flagged axes
+  LOOP_LINEAR_AXES(a)
+    if (TEST(to_disable.bits, a)) {
+      DEBUG_ECHOPGM("Try to disable ", axis_codes[a], " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ");
+      if (stepper.disable_axis(AxisEnum(a))) {            // Mark the requested axis and request to disable
+        DEBUG_ECHOPGM("OK");
+        still_enabled &= ~(_BV(a) | enable_overlap[a]);   // If actually disabled, clear one or more tracked bits
+      }
+      else
+        DEBUG_ECHOPGM("OVERLAP");
+      DEBUG_ECHOLNPGM(" ... still_enabled=", hex_word(still_enabled));
+    }
+  #if HAS_EXTRUDERS
+    LOOP_L_N(e, EXTRUDERS) {
+      const uint8_t a = INDEX_OF_AXIS(E_AXIS, e);
+      if (TEST(to_disable.bits, a)) {
+        DEBUG_ECHOPGM("Try to disable E", AS_DIGIT(e), " (", a, ") with overlap ", hex_word(enable_overlap[a]), " ... ");
+        if (stepper.DISABLE_EXTRUDER(e)) {
+          DEBUG_ECHOPGM("OK");
+          still_enabled &= ~(_BV(a) | enable_overlap[a]);
+        }
+        else
+          DEBUG_ECHOPGM("OVERLAP");
+        DEBUG_ECHOLNPGM(" ... still_enabled=", hex_word(still_enabled));
+      }
+    }
+  #endif
+
+  auto overlap_warning = [](const ena_mask_t axis_bits) {
+    SERIAL_ECHOPGM(" not disabled. Shared with");
+    LOOP_LINEAR_AXES(a) if (TEST(axis_bits, a)) SERIAL_CHAR(' ', axis_codes[a]);
+    #if HAS_EXTRUDERS
+      #define _EN_STILLON(N) if (TEST(axis_bits, INDEX_OF_AXIS(E_AXIS, N))) SERIAL_CHAR(' ', 'E', '0' + N);
+      REPEAT(EXTRUDERS, _EN_STILLON)
+    #endif
+    SERIAL_ECHOLNPGM(".");
+  };
+
+  // If any of the requested axes are still enabled, give a warning
+  LOOP_LINEAR_AXES(a) {
+    if (TEST(still_enabled, a)) {
+      SERIAL_CHAR(axis_codes[a]);
+      overlap_warning(stepper.axis_enabled.bits & enable_overlap[a]);
+    }
+  }
+  #if HAS_EXTRUDERS
+    LOOP_L_N(e, EXTRUDERS) {
+      const uint8_t a = INDEX_OF_AXIS(E_AXIS, e);
+      if (TEST(still_enabled, a)) {
+        SERIAL_CHAR('E', '0' + e);
+        overlap_warning(stepper.axis_enabled.bits & enable_overlap[a]);
+      }
+    }
+  #endif
+
+  DEBUG_ECHOLNPGM("Enabled Now: ", hex_word(stepper.axis_enabled.bits));
+}
+
 /**
- * M18, M84: Disable stepper motors
+ * M18, M84: Disable stepper motor power for one or more axes.
+ *           Print warnings for axes that share an ENABLE_PIN.
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     reset_stepper_timeout();
     stepper_inactive_time = parser.value_millis_from_seconds();
   }
   else {
     if (parser.seen_axis()) {
       planner.synchronize();
-      LOGICAL_AXIS_CODE(
-        if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen_test('E'))) disable_e_steppers(),
-        if (parser.seen_test('X'))        DISABLE_AXIS_X(),
-        if (parser.seen_test('Y'))        DISABLE_AXIS_Y(),
-        if (parser.seen_test('Z'))        DISABLE_AXIS_Z(),
-        if (parser.seen_test(AXIS4_NAME)) DISABLE_AXIS_I(),
-        if (parser.seen_test(AXIS5_NAME)) DISABLE_AXIS_J(),
-        if (parser.seen_test(AXIS6_NAME)) DISABLE_AXIS_K()
-      );
+      if (any_enable_overlap())
+        try_to_disable(selected_axis_bits());
+      else {
+        #if HAS_EXTRUDERS
+          if (parser.seen('E')) {
+            if (E_TERN0(parser.has_value()))
+              stepper.DISABLE_EXTRUDER(parser.value_int());
+            else
+              stepper.disable_e_steppers();
+          }
+        #endif
+        LINEAR_AXIS_CODE(
+          if (parser.seen_test('X'))        stepper.disable_axis(X_AXIS),
+          if (parser.seen_test('Y'))        stepper.disable_axis(Y_AXIS),
+          if (parser.seen_test('Z'))        stepper.disable_axis(Z_AXIS),
+          if (parser.seen_test(AXIS4_NAME)) stepper.disable_axis(I_AXIS),
+          if (parser.seen_test(AXIS5_NAME)) stepper.disable_axis(J_AXIS),
+          if (parser.seen_test(AXIS6_NAME)) stepper.disable_axis(K_AXIS)
+        );
+      }
     }
     else
       planner.finish_and_disable();
 
     TERN_(AUTO_BED_LEVELING_UBL, ubl.steppers_were_disabled());
   }
 }

commit 79c72ed821564507b0ef46cbb26f9577585e2ccc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 7 18:06:10 2021 -0500

    üé® Standardize G-code reporting

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 4ebb81cf7e..e6e0f033ec 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -26,21 +26,21 @@
 #include "../../module/stepper.h"
 
 #if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 /**
  * M17: Enable stepper motors
  */
 void GcodeSuite::M17() {
-  if (parser.seen(LOGICAL_AXIS_GANG("E", "X", "Y", "Z", AXIS4_STR, AXIS5_STR, AXIS6_STR))) {
+  if (parser.seen_axis()) {
     LOGICAL_AXIS_CODE(
       if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen_test('E'))) enable_e_steppers(),
       if (parser.seen_test('X'))        ENABLE_AXIS_X(),
       if (parser.seen_test('Y'))        ENABLE_AXIS_Y(),
       if (parser.seen_test('Z'))        ENABLE_AXIS_Z(),
       if (parser.seen_test(AXIS4_NAME)) ENABLE_AXIS_I(),
       if (parser.seen_test(AXIS5_NAME)) ENABLE_AXIS_J(),
       if (parser.seen_test(AXIS6_NAME)) ENABLE_AXIS_K()
     );
   }
@@ -52,21 +52,21 @@ void GcodeSuite::M17() {
 
 /**
  * M18, M84: Disable stepper motors
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     reset_stepper_timeout();
     stepper_inactive_time = parser.value_millis_from_seconds();
   }
   else {
-    if (parser.seen(LOGICAL_AXIS_GANG("E", "X", "Y", "Z", AXIS4_STR, AXIS5_STR, AXIS6_STR))) {
+    if (parser.seen_axis()) {
       planner.synchronize();
       LOGICAL_AXIS_CODE(
         if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen_test('E'))) disable_e_steppers(),
         if (parser.seen_test('X'))        DISABLE_AXIS_X(),
         if (parser.seen_test('Y'))        DISABLE_AXIS_Y(),
         if (parser.seen_test('Z'))        DISABLE_AXIS_Z(),
         if (parser.seen_test(AXIS4_NAME)) DISABLE_AXIS_I(),
         if (parser.seen_test(AXIS5_NAME)) DISABLE_AXIS_J(),
         if (parser.seen_test(AXIS6_NAME)) DISABLE_AXIS_K()
       );

commit 7726af9c5348c1c7d0fd9a56eca87d00cd75fee6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Jun 5 09:18:47 2021 +0200

    üèóÔ∏è Support for up to 6 linear axes (#19112)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index b7cec2d48d..4ebb81cf7e 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -26,48 +26,54 @@
 #include "../../module/stepper.h"
 
 #if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 /**
  * M17: Enable stepper motors
  */
 void GcodeSuite::M17() {
-  if (parser.seen(LOGICAL_AXIS_GANG("E", "X", "Y", "Z"))) {
+  if (parser.seen(LOGICAL_AXIS_GANG("E", "X", "Y", "Z", AXIS4_STR, AXIS5_STR, AXIS6_STR))) {
     LOGICAL_AXIS_CODE(
       if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen_test('E'))) enable_e_steppers(),
       if (parser.seen_test('X'))        ENABLE_AXIS_X(),
       if (parser.seen_test('Y'))        ENABLE_AXIS_Y(),
-      if (parser.seen_test('Z'))        ENABLE_AXIS_Z()
+      if (parser.seen_test('Z'))        ENABLE_AXIS_Z(),
+      if (parser.seen_test(AXIS4_NAME)) ENABLE_AXIS_I(),
+      if (parser.seen_test(AXIS5_NAME)) ENABLE_AXIS_J(),
+      if (parser.seen_test(AXIS6_NAME)) ENABLE_AXIS_K()
     );
   }
   else {
     LCD_MESSAGEPGM(MSG_NO_MOVE);
     enable_all_steppers();
   }
 }
 
 /**
  * M18, M84: Disable stepper motors
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     reset_stepper_timeout();
     stepper_inactive_time = parser.value_millis_from_seconds();
   }
   else {
-    if (parser.seen(LOGICAL_AXIS_GANG("E", "X", "Y", "Z"))) {
+    if (parser.seen(LOGICAL_AXIS_GANG("E", "X", "Y", "Z", AXIS4_STR, AXIS5_STR, AXIS6_STR))) {
       planner.synchronize();
       LOGICAL_AXIS_CODE(
         if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen_test('E'))) disable_e_steppers(),
         if (parser.seen_test('X'))        DISABLE_AXIS_X(),
         if (parser.seen_test('Y'))        DISABLE_AXIS_Y(),
-        if (parser.seen_test('Z'))        DISABLE_AXIS_Z()
+        if (parser.seen_test('Z'))        DISABLE_AXIS_Z(),
+        if (parser.seen_test(AXIS4_NAME)) DISABLE_AXIS_I(),
+        if (parser.seen_test(AXIS5_NAME)) DISABLE_AXIS_J(),
+        if (parser.seen_test(AXIS6_NAME)) DISABLE_AXIS_K()
       );
     }
     else
       planner.finish_and_disable();
 
     TERN_(AUTO_BED_LEVELING_UBL, ubl.steppers_were_disabled());
   }
 }

commit dd4990252e891cdfe56cb7d6e3bbe1e6289be649
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon May 24 16:38:57 2021 -0500

    ‚ôªÔ∏è Refactor Linear / Logical / Distinct Axes (#21953)
    
    * More patches supporting EXTRUDERS 0
    * Extend types in prep for more axes

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index f02508a901..b7cec2d48d 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -26,44 +26,48 @@
 #include "../../module/stepper.h"
 
 #if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 /**
  * M17: Enable stepper motors
  */
 void GcodeSuite::M17() {
-  if (parser.seen("XYZE")) {
-    if (parser.seen_test('X')) ENABLE_AXIS_X();
-    if (parser.seen_test('Y')) ENABLE_AXIS_Y();
-    if (parser.seen_test('Z')) ENABLE_AXIS_Z();
-    if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen_test('E'))) enable_e_steppers();
+  if (parser.seen(LOGICAL_AXIS_GANG("E", "X", "Y", "Z"))) {
+    LOGICAL_AXIS_CODE(
+      if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen_test('E'))) enable_e_steppers(),
+      if (parser.seen_test('X'))        ENABLE_AXIS_X(),
+      if (parser.seen_test('Y'))        ENABLE_AXIS_Y(),
+      if (parser.seen_test('Z'))        ENABLE_AXIS_Z()
+    );
   }
   else {
     LCD_MESSAGEPGM(MSG_NO_MOVE);
     enable_all_steppers();
   }
 }
 
 /**
  * M18, M84: Disable stepper motors
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     reset_stepper_timeout();
     stepper_inactive_time = parser.value_millis_from_seconds();
   }
   else {
-    if (parser.seen("XYZE")) {
+    if (parser.seen(LOGICAL_AXIS_GANG("E", "X", "Y", "Z"))) {
       planner.synchronize();
-      if (parser.seen_test('X')) DISABLE_AXIS_X();
-      if (parser.seen_test('Y')) DISABLE_AXIS_Y();
-      if (parser.seen_test('Z')) DISABLE_AXIS_Z();
-      if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen_test('E'))) disable_e_steppers();
+      LOGICAL_AXIS_CODE(
+        if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen_test('E'))) disable_e_steppers(),
+        if (parser.seen_test('X'))        DISABLE_AXIS_X(),
+        if (parser.seen_test('Y'))        DISABLE_AXIS_Y(),
+        if (parser.seen_test('Z'))        DISABLE_AXIS_Z()
+      );
     }
     else
       planner.finish_and_disable();
 
     TERN_(AUTO_BED_LEVELING_UBL, ubl.steppers_were_disabled());
   }
 }

commit abbe3f0dc7aa23bae4aa26f6d6b09a4a0665a1a0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 18 22:46:59 2021 -0500

    üé® Misc cleanup and fixes

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index b35b465331..f02508a901 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -27,43 +27,43 @@
 
 #if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 /**
  * M17: Enable stepper motors
  */
 void GcodeSuite::M17() {
   if (parser.seen("XYZE")) {
-    if (parser.seen('X')) ENABLE_AXIS_X();
-    if (parser.seen('Y')) ENABLE_AXIS_Y();
-    if (parser.seen('Z')) ENABLE_AXIS_Z();
-    if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen('E'))) enable_e_steppers();
+    if (parser.seen_test('X')) ENABLE_AXIS_X();
+    if (parser.seen_test('Y')) ENABLE_AXIS_Y();
+    if (parser.seen_test('Z')) ENABLE_AXIS_Z();
+    if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen_test('E'))) enable_e_steppers();
   }
   else {
     LCD_MESSAGEPGM(MSG_NO_MOVE);
     enable_all_steppers();
   }
 }
 
 /**
  * M18, M84: Disable stepper motors
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     reset_stepper_timeout();
     stepper_inactive_time = parser.value_millis_from_seconds();
   }
   else {
     if (parser.seen("XYZE")) {
       planner.synchronize();
-      if (parser.seen('X')) DISABLE_AXIS_X();
-      if (parser.seen('Y')) DISABLE_AXIS_Y();
-      if (parser.seen('Z')) DISABLE_AXIS_Z();
-      if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen('E'))) disable_e_steppers();
+      if (parser.seen_test('X')) DISABLE_AXIS_X();
+      if (parser.seen_test('Y')) DISABLE_AXIS_Y();
+      if (parser.seen_test('Z')) DISABLE_AXIS_Z();
+      if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen_test('E'))) disable_e_steppers();
     }
     else
       planner.finish_and_disable();
 
     TERN_(AUTO_BED_LEVELING_UBL, ubl.steppers_were_disabled());
   }
 }

commit eaf6777a6643a6fab23ceaaa4699cb2466ea6b83
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 16 19:36:25 2020 -0500

    Rename ultralcd => marlinui

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 499feef715..b35b465331 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -15,21 +15,21 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 #include "../gcode.h"
 #include "../../MarlinCore.h" // for stepper_inactive_time, disable_e_steppers
-#include "../../lcd/ultralcd.h"
+#include "../../lcd/marlinui.h"
 #include "../../module/stepper.h"
 
 #if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 /**
  * M17: Enable stepper motors
  */
 void GcodeSuite::M17() {

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index b8dcb9802e..499feef715 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 #include "../gcode.h"
 #include "../../MarlinCore.h" // for stepper_inactive_time, disable_e_steppers
 #include "../../lcd/ultralcd.h"
 #include "../../module/stepper.h"
 
 #if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "../../feature/bedlevel/bedlevel.h"

commit 6eb19cef115eeb2bb6930dee0a773c1c3fade2c6
Author: notabucketofspam <43456540+notabucketofspam@users.noreply.github.com>
Date:   Sat Jul 4 20:18:11 2020 -0400

    Fix "'ubl' not declared" error (#18541)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 842f301d92..b8dcb9802e 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -18,21 +18,21 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 #include "../gcode.h"
 #include "../../MarlinCore.h" // for stepper_inactive_time, disable_e_steppers
 #include "../../lcd/ultralcd.h"
 #include "../../module/stepper.h"
 
-#if BOTH(AUTO_BED_LEVELING_UBL, ULTRA_LCD)
+#if ENABLED(AUTO_BED_LEVELING_UBL)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 /**
  * M17: Enable stepper motors
  */
 void GcodeSuite::M17() {
   if (parser.seen("XYZE")) {
     if (parser.seen('X')) ENABLE_AXIS_X();
     if (parser.seen('Y')) ENABLE_AXIS_Y();

commit f6a2b6409192c4e349321f42a5c0ebfd4e278b82
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jul 3 09:53:22 2020 -0500

    Clean up LCD Manual Move / UBL Mesh Edit (#18373)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 55a219917c..842f301d92 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -57,18 +57,13 @@ void GcodeSuite::M18_M84() {
     if (parser.seen("XYZE")) {
       planner.synchronize();
       if (parser.seen('X')) DISABLE_AXIS_X();
       if (parser.seen('Y')) DISABLE_AXIS_Y();
       if (parser.seen('Z')) DISABLE_AXIS_Z();
       if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen('E'))) disable_e_steppers();
     }
     else
       planner.finish_and_disable();
 
-    #if BOTH(HAS_LCD_MENU, AUTO_BED_LEVELING_UBL)
-      if (ubl.lcd_map_control) {
-        ubl.lcd_map_control = false;
-        ui.defer_status_screen(false);
-      }
-    #endif
+    TERN_(AUTO_BED_LEVELING_UBL, ubl.steppers_were_disabled());
   }
 }

commit c43bbcce152b4d3b4697e1e188d3bcada76a24a7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jul 1 16:27:28 2020 -0500

    Enforce sensor range for temperature target (#18465)
    
    * Mitigate stepper timeout
    
    * Add CHAMBER PWM code
    
    * Structured thermistor tables
    
    * Fix reversed sensor ranges
    
    * Prevent temps outside sensor range

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index aee7d616a1..55a219917c 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -43,20 +43,21 @@ void GcodeSuite::M17() {
     LCD_MESSAGEPGM(MSG_NO_MOVE);
     enable_all_steppers();
   }
 }
 
 /**
  * M18, M84: Disable stepper motors
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
+    reset_stepper_timeout();
     stepper_inactive_time = parser.value_millis_from_seconds();
   }
   else {
     if (parser.seen("XYZE")) {
       planner.synchronize();
       if (parser.seen('X')) DISABLE_AXIS_X();
       if (parser.seen('Y')) DISABLE_AXIS_Y();
       if (parser.seen('Z')) DISABLE_AXIS_Z();
       if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen('E'))) disable_e_steppers();
     }

commit ab2b98e4255b0b9579af9627e884ac3dfc1d30bb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Apr 23 21:42:38 2020 -0500

    Apply composite tests

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 850e02e475..aee7d616a1 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -56,18 +56,18 @@ void GcodeSuite::M18_M84() {
     if (parser.seen("XYZE")) {
       planner.synchronize();
       if (parser.seen('X')) DISABLE_AXIS_X();
       if (parser.seen('Y')) DISABLE_AXIS_Y();
       if (parser.seen('Z')) DISABLE_AXIS_Z();
       if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen('E'))) disable_e_steppers();
     }
     else
       planner.finish_and_disable();
 
-    #if HAS_LCD_MENU && ENABLED(AUTO_BED_LEVELING_UBL)
+    #if BOTH(HAS_LCD_MENU, AUTO_BED_LEVELING_UBL)
       if (ubl.lcd_map_control) {
         ubl.lcd_map_control = false;
         ui.defer_status_screen(false);
       }
     #endif
   }
 }

commit 6d90d1e1f552dca5e21bc61b676b8e8ce731b280
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 22 16:35:03 2020 -0500

    Apply TERN to compact code (#17619)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index d69654a959..850e02e475 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -30,46 +30,42 @@
 #endif
 
 /**
  * M17: Enable stepper motors
  */
 void GcodeSuite::M17() {
   if (parser.seen("XYZE")) {
     if (parser.seen('X')) ENABLE_AXIS_X();
     if (parser.seen('Y')) ENABLE_AXIS_Y();
     if (parser.seen('Z')) ENABLE_AXIS_Z();
-    #if HAS_E_STEPPER_ENABLE
-      if (parser.seen('E')) enable_e_steppers();
-    #endif
+    if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen('E'))) enable_e_steppers();
   }
   else {
     LCD_MESSAGEPGM(MSG_NO_MOVE);
     enable_all_steppers();
   }
 }
 
 /**
  * M18, M84: Disable stepper motors
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     stepper_inactive_time = parser.value_millis_from_seconds();
   }
   else {
     if (parser.seen("XYZE")) {
       planner.synchronize();
       if (parser.seen('X')) DISABLE_AXIS_X();
       if (parser.seen('Y')) DISABLE_AXIS_Y();
       if (parser.seen('Z')) DISABLE_AXIS_Z();
-      #if HAS_E_STEPPER_ENABLE
-        if (parser.seen('E')) disable_e_steppers();
-      #endif
+      if (TERN0(HAS_E_STEPPER_ENABLE, parser.seen('E'))) disable_e_steppers();
     }
     else
       planner.finish_and_disable();
 
     #if HAS_LCD_MENU && ENABLED(AUTO_BED_LEVELING_UBL)
       if (ubl.lcd_map_control) {
         ubl.lcd_map_control = false;
         ui.defer_status_screen(false);
       }
     #endif

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 4908a64ecb..d69654a959 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 50889c0f94778c378357bcc4d4a966fa869bc5c1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jan 30 03:24:23 2020 -0600

    Move L64XX index_to_axis to progmem (#16697)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 081ca18d89..4908a64ecb 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -27,46 +27,46 @@
 
 #if BOTH(AUTO_BED_LEVELING_UBL, ULTRA_LCD)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 /**
  * M17: Enable stepper motors
  */
 void GcodeSuite::M17() {
   if (parser.seen("XYZE")) {
-    if (parser.seen('X')) enable_X();
-    if (parser.seen('Y')) enable_Y();
-    if (parser.seen('Z')) enable_Z();
+    if (parser.seen('X')) ENABLE_AXIS_X();
+    if (parser.seen('Y')) ENABLE_AXIS_Y();
+    if (parser.seen('Z')) ENABLE_AXIS_Z();
     #if HAS_E_STEPPER_ENABLE
       if (parser.seen('E')) enable_e_steppers();
     #endif
   }
   else {
     LCD_MESSAGEPGM(MSG_NO_MOVE);
     enable_all_steppers();
   }
 }
 
 /**
  * M18, M84: Disable stepper motors
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     stepper_inactive_time = parser.value_millis_from_seconds();
   }
   else {
     if (parser.seen("XYZE")) {
       planner.synchronize();
-      if (parser.seen('X')) disable_X();
-      if (parser.seen('Y')) disable_Y();
-      if (parser.seen('Z')) disable_Z();
+      if (parser.seen('X')) DISABLE_AXIS_X();
+      if (parser.seen('Y')) DISABLE_AXIS_Y();
+      if (parser.seen('Z')) DISABLE_AXIS_Z();
       #if HAS_E_STEPPER_ENABLE
         if (parser.seen('E')) disable_e_steppers();
       #endif
     }
     else
       planner.finish_and_disable();
 
     #if HAS_LCD_MENU && ENABLED(AUTO_BED_LEVELING_UBL)
       if (ubl.lcd_map_control) {
         ubl.lcd_map_control = false;

commit d0e1166cce60381fbdad1105d13765806a525d99
Author: Dirk O. Kaar <19971886+dok-net@users.noreply.github.com>
Date:   Fri Jan 3 02:01:38 2020 +0100

    Fix Visual Micro "Arduino IDE for Visual Studio" support (#16418)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index de6eab4f74..081ca18d89 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -14,21 +14,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 #include "../gcode.h"
-#include "../../Marlin.h" // for stepper_inactive_time, disable_e_steppers
+#include "../../MarlinCore.h" // for stepper_inactive_time, disable_e_steppers
 #include "../../lcd/ultralcd.h"
 #include "../../module/stepper.h"
 
 #if BOTH(AUTO_BED_LEVELING_UBL, ULTRA_LCD)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 /**
  * M17: Enable stepper motors
  */

commit 179d6c4ed115e67ae826b5738e0009c6be2d58ea
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Wed Aug 14 20:05:15 2019 -0600

    Add STARTUP_SCRIPT option. M17 parity with M18. (#14953)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 6706cee008..de6eab4f74 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -23,48 +23,55 @@
 #include "../gcode.h"
 #include "../../Marlin.h" // for stepper_inactive_time, disable_e_steppers
 #include "../../lcd/ultralcd.h"
 #include "../../module/stepper.h"
 
 #if BOTH(AUTO_BED_LEVELING_UBL, ULTRA_LCD)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 /**
- * M17: Enable power on all stepper motors
+ * M17: Enable stepper motors
  */
 void GcodeSuite::M17() {
-  LCD_MESSAGEPGM(MSG_NO_MOVE);
-  enable_all_steppers();
+  if (parser.seen("XYZE")) {
+    if (parser.seen('X')) enable_X();
+    if (parser.seen('Y')) enable_Y();
+    if (parser.seen('Z')) enable_Z();
+    #if HAS_E_STEPPER_ENABLE
+      if (parser.seen('E')) enable_e_steppers();
+    #endif
+  }
+  else {
+    LCD_MESSAGEPGM(MSG_NO_MOVE);
+    enable_all_steppers();
+  }
 }
 
 /**
  * M18, M84: Disable stepper motors
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     stepper_inactive_time = parser.value_millis_from_seconds();
   }
   else {
-    bool all_axis = !(parser.seen('X') || parser.seen('Y') || parser.seen('Z') || parser.seen('E'));
-    if (all_axis) {
-      planner.finish_and_disable();
-    }
-    else {
+    if (parser.seen("XYZE")) {
       planner.synchronize();
       if (parser.seen('X')) disable_X();
       if (parser.seen('Y')) disable_Y();
       if (parser.seen('Z')) disable_Z();
-      // Only disable on boards that have separate ENABLE_PINS or another method for disabling the driver
-      #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE_E0(TMC2660) || AXIS_DRIVER_TYPE_E1(TMC2660) || AXIS_DRIVER_TYPE_E2(TMC2660) || AXIS_DRIVER_TYPE_E3(TMC2660) || AXIS_DRIVER_TYPE_E4(TMC2660) || AXIS_DRIVER_TYPE_E5(TMC2660)
+      #if HAS_E_STEPPER_ENABLE
         if (parser.seen('E')) disable_e_steppers();
       #endif
     }
+    else
+      planner.finish_and_disable();
 
     #if HAS_LCD_MENU && ENABLED(AUTO_BED_LEVELING_UBL)
       if (ubl.lcd_map_control) {
         ubl.lcd_map_control = false;
         ui.defer_status_screen(false);
       }
     #endif
   }
 }

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 1aea995508..6706cee008 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -1,16 +1,16 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.

commit 49cf92dc36424cf828436f32e72263eca39a1cc3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 16 23:43:06 2019 -0500

    Extended condition macros (#13419)
    
    Allow `ENABLED`, `DISABLED`, `PIN_EXISTS`, and `BUTTON_EXISTS` to take multiple arguments. Also add:
    - Alias `ANY(...)` for `!DISABLED(...)`
    - Alias `ANY_PIN(...)` for `PIN_EXISTS(a) || PIN_EXISTS(b) ...`
    - Alias `EITHER(A,B)` for `ANY(...)`
    - Alias `ALL(...)` and `BOTH(A,B)` for `ENABLED(...)`
    - `NONE(...)` for `DISABLED(...)`

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index c6f039a8ea..1aea995508 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -18,21 +18,21 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 #include "../gcode.h"
 #include "../../Marlin.h" // for stepper_inactive_time, disable_e_steppers
 #include "../../lcd/ultralcd.h"
 #include "../../module/stepper.h"
 
-#if ENABLED(AUTO_BED_LEVELING_UBL) && ENABLED(ULTRA_LCD)
+#if BOTH(AUTO_BED_LEVELING_UBL, ULTRA_LCD)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 /**
  * M17: Enable power on all stepper motors
  */
 void GcodeSuite::M17() {
   LCD_MESSAGEPGM(MSG_NO_MOVE);
   enable_all_steppers();
 }

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 3e123b4049..c6f039a8ea 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 2f35747f294c4b3dc3e6920b34e208f89bd4841d
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Wed Jan 23 19:06:54 2019 -0600

    L6470 SPI daisy chain support (#12895)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 3541524774..3e123b4049 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -48,21 +48,21 @@ void GcodeSuite::M18_M84() {
     bool all_axis = !(parser.seen('X') || parser.seen('Y') || parser.seen('Z') || parser.seen('E'));
     if (all_axis) {
       planner.finish_and_disable();
     }
     else {
       planner.synchronize();
       if (parser.seen('X')) disable_X();
       if (parser.seen('Y')) disable_Y();
       if (parser.seen('Z')) disable_Z();
       // Only disable on boards that have separate ENABLE_PINS or another method for disabling the driver
-      #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE(E0, TMC2660) || AXIS_DRIVER_TYPE(E1, TMC2660) || AXIS_DRIVER_TYPE(E2, TMC2660) || AXIS_DRIVER_TYPE(E3, TMC2660) || AXIS_DRIVER_TYPE(E4, TMC2660) || AXIS_DRIVER_TYPE(E5, TMC2660)
+      #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE_E0(TMC2660) || AXIS_DRIVER_TYPE_E1(TMC2660) || AXIS_DRIVER_TYPE_E2(TMC2660) || AXIS_DRIVER_TYPE_E3(TMC2660) || AXIS_DRIVER_TYPE_E4(TMC2660) || AXIS_DRIVER_TYPE_E5(TMC2660)
         if (parser.seen('E')) disable_e_steppers();
       #endif
     }
 
     #if HAS_LCD_MENU && ENABLED(AUTO_BED_LEVELING_UBL)
       if (ubl.lcd_map_control) {
         ubl.lcd_map_control = false;
         ui.defer_status_screen(false);
       }
     #endif

commit 0495fcd475876f1b03cbc83162aceee44a05bfed
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Jan 19 21:50:33 2019 -0600

    Minor spacing fix

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 33a6eae5ff..3541524774 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -14,21 +14,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 #include "../gcode.h"
-#include "../../Marlin.h" // for stepper_inactive_time
+#include "../../Marlin.h" // for stepper_inactive_time, disable_e_steppers
 #include "../../lcd/ultralcd.h"
 #include "../../module/stepper.h"
 
 #if ENABLED(AUTO_BED_LEVELING_UBL) && ENABLED(ULTRA_LCD)
   #include "../../feature/bedlevel/bedlevel.h"
 #endif
 
 /**
  * M17: Enable power on all stepper motors
  */

commit a0c795b097a30eff006c8dff178abf5f1f1907fa
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 11 12:16:24 2018 -0600

    Encapsulate common display code in a singleton (#12395)
    
    * Encapsulate common LCD code in a singleton
    * Depend more UBL code on UBL_DEVEL_DEBUGGING
      - Since most users don't need the debugging on at all times, this helps reduce the default build size for UBL by over 2K, a little closer to fitting on 128K boards.

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index e4b94d99b6..33a6eae5ff 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -56,15 +56,15 @@ void GcodeSuite::M18_M84() {
       if (parser.seen('Z')) disable_Z();
       // Only disable on boards that have separate ENABLE_PINS or another method for disabling the driver
       #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE(E0, TMC2660) || AXIS_DRIVER_TYPE(E1, TMC2660) || AXIS_DRIVER_TYPE(E2, TMC2660) || AXIS_DRIVER_TYPE(E3, TMC2660) || AXIS_DRIVER_TYPE(E4, TMC2660) || AXIS_DRIVER_TYPE(E5, TMC2660)
         if (parser.seen('E')) disable_e_steppers();
       #endif
     }
 
     #if HAS_LCD_MENU && ENABLED(AUTO_BED_LEVELING_UBL)
       if (ubl.lcd_map_control) {
         ubl.lcd_map_control = false;
-        set_defer_return_to_status(false);
+        ui.defer_status_screen(false);
       }
     #endif
   }
 }

commit e574f015680f88137b2ccb0fa159ebd5749c26fb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Nov 6 19:25:57 2018 -0600

    More advanced pause tweaks (#12356)
    
    * Followup to LCD_TIMEOUT_TO_STATUS=0
    * Make continuous purge screen fit 20x4
    * Unify purge message modes
    * Preserve last-set pause header mode

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index cf448511e3..e4b94d99b6 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -54,14 +54,17 @@ void GcodeSuite::M18_M84() {
       if (parser.seen('X')) disable_X();
       if (parser.seen('Y')) disable_Y();
       if (parser.seen('Z')) disable_Z();
       // Only disable on boards that have separate ENABLE_PINS or another method for disabling the driver
       #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE(E0, TMC2660) || AXIS_DRIVER_TYPE(E1, TMC2660) || AXIS_DRIVER_TYPE(E2, TMC2660) || AXIS_DRIVER_TYPE(E3, TMC2660) || AXIS_DRIVER_TYPE(E4, TMC2660) || AXIS_DRIVER_TYPE(E5, TMC2660)
         if (parser.seen('E')) disable_e_steppers();
       #endif
     }
 
     #if HAS_LCD_MENU && ENABLED(AUTO_BED_LEVELING_UBL)
-      if (ubl.lcd_map_control) ubl.lcd_map_control = defer_return_to_status = false;
+      if (ubl.lcd_map_control) {
+        ubl.lcd_map_control = false;
+        set_defer_return_to_status(false);
+      }
     #endif
   }
 }

commit 3583e2b4490e8fd6778d18003641c2fdd333e8a5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Oct 30 16:34:45 2018 -0500

    Followup to Menu Refactor (#12275)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 6a878884b9..cf448511e3 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -53,15 +53,15 @@ void GcodeSuite::M18_M84() {
       planner.synchronize();
       if (parser.seen('X')) disable_X();
       if (parser.seen('Y')) disable_Y();
       if (parser.seen('Z')) disable_Z();
       // Only disable on boards that have separate ENABLE_PINS or another method for disabling the driver
       #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE(E0, TMC2660) || AXIS_DRIVER_TYPE(E1, TMC2660) || AXIS_DRIVER_TYPE(E2, TMC2660) || AXIS_DRIVER_TYPE(E3, TMC2660) || AXIS_DRIVER_TYPE(E4, TMC2660) || AXIS_DRIVER_TYPE(E5, TMC2660)
         if (parser.seen('E')) disable_e_steppers();
       #endif
     }
 
-    #if ENABLED(AUTO_BED_LEVELING_UBL) && ENABLED(ULTIPANEL)  // Only needed with an LCD
+    #if HAS_LCD_MENU && ENABLED(AUTO_BED_LEVELING_UBL)
       if (ubl.lcd_map_control) ubl.lcd_map_control = defer_return_to_status = false;
     #endif
   }
 }

commit c447d759167bb118c2f26febdae71dd60c64977a
Author: teemuatlut <teemu.mantykallio@live.fi>
Date:   Sun Oct 7 01:18:10 2018 +0300

    Add support for TMC2660 (#11998)

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index c428a87877..6a878884b9 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -47,20 +47,21 @@ void GcodeSuite::M18_M84() {
   else {
     bool all_axis = !(parser.seen('X') || parser.seen('Y') || parser.seen('Z') || parser.seen('E'));
     if (all_axis) {
       planner.finish_and_disable();
     }
     else {
       planner.synchronize();
       if (parser.seen('X')) disable_X();
       if (parser.seen('Y')) disable_Y();
       if (parser.seen('Z')) disable_Z();
-      #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN // Only disable on boards that have separate ENABLE_PINS
+      // Only disable on boards that have separate ENABLE_PINS or another method for disabling the driver
+      #if (E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN) || AXIS_DRIVER_TYPE(E0, TMC2660) || AXIS_DRIVER_TYPE(E1, TMC2660) || AXIS_DRIVER_TYPE(E2, TMC2660) || AXIS_DRIVER_TYPE(E3, TMC2660) || AXIS_DRIVER_TYPE(E4, TMC2660) || AXIS_DRIVER_TYPE(E5, TMC2660)
         if (parser.seen('E')) disable_e_steppers();
       #endif
     }
 
     #if ENABLED(AUTO_BED_LEVELING_UBL) && ENABLED(ULTIPANEL)  // Only needed with an LCD
       if (ubl.lcd_map_control) ubl.lcd_map_control = defer_return_to_status = false;
     #endif
   }
 }

commit a11eb50a3eab6d58d595a67e526fb51190018db3
Author: etagle <ejtagle@hotmail.com>
Date:   Wed May 9 02:17:53 2018 -0300

    Refactor and optimize Stepper/Planner
    
    Better encapsulation and considerably reduce stepper jitter

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 5ff5812607..c428a87877 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -40,21 +40,21 @@ void GcodeSuite::M17() {
 /**
  * M18, M84: Disable stepper motors
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     stepper_inactive_time = parser.value_millis_from_seconds();
   }
   else {
     bool all_axis = !(parser.seen('X') || parser.seen('Y') || parser.seen('Z') || parser.seen('E'));
     if (all_axis) {
-      stepper.finish_and_disable();
+      planner.finish_and_disable();
     }
     else {
       planner.synchronize();
       if (parser.seen('X')) disable_X();
       if (parser.seen('Y')) disable_Y();
       if (parser.seen('Z')) disable_Z();
       #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN // Only disable on boards that have separate ENABLE_PINS
         if (parser.seen('E')) disable_e_steppers();
       #endif
     }

commit 306f0f2135e4b2aed749a0d1b870abf17d883e38
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat May 12 01:38:02 2018 -0500

    Move Stepper::synchronize to Planner (#10713)
    
    Co-Authored-By: ejtagle <ejtagle@hotmail.com>

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 34da0b1049..5ff5812607 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -43,21 +43,21 @@ void GcodeSuite::M17() {
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     stepper_inactive_time = parser.value_millis_from_seconds();
   }
   else {
     bool all_axis = !(parser.seen('X') || parser.seen('Y') || parser.seen('Z') || parser.seen('E'));
     if (all_axis) {
       stepper.finish_and_disable();
     }
     else {
-      stepper.synchronize();
+      planner.synchronize();
       if (parser.seen('X')) disable_X();
       if (parser.seen('Y')) disable_Y();
       if (parser.seen('Z')) disable_Z();
       #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN // Only disable on boards that have separate ENABLE_PINS
         if (parser.seen('E')) disable_e_steppers();
       #endif
     }
 
     #if ENABLED(AUTO_BED_LEVELING_UBL) && ENABLED(ULTIPANEL)  // Only needed with an LCD
       if (ubl.lcd_map_control) ubl.lcd_map_control = defer_return_to_status = false;

commit 65519263f4d2f654296c10f380a4a3258a0b0570
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Feb 23 09:13:34 2018 -0600

    Fix broken LEVEL_BED_CORNERS
    
    Fix #8805

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 2049aebae7..34da0b1049 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -53,14 +53,14 @@ void GcodeSuite::M18_M84() {
       stepper.synchronize();
       if (parser.seen('X')) disable_X();
       if (parser.seen('Y')) disable_Y();
       if (parser.seen('Z')) disable_Z();
       #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN // Only disable on boards that have separate ENABLE_PINS
         if (parser.seen('E')) disable_e_steppers();
       #endif
     }
 
     #if ENABLED(AUTO_BED_LEVELING_UBL) && ENABLED(ULTIPANEL)  // Only needed with an LCD
-      ubl.lcd_map_control = defer_return_to_status = false;
+      if (ubl.lcd_map_control) ubl.lcd_map_control = defer_return_to_status = false;
     #endif
   }
 }

commit 7541316bb49303ce97e062da601e26426321c4ba
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 4 05:06:34 2018 -0600

    Add M701/M702 Filament Load/Unload, M603

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 003687c2c6..2049aebae7 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -47,20 +47,20 @@ void GcodeSuite::M18_M84() {
   else {
     bool all_axis = !(parser.seen('X') || parser.seen('Y') || parser.seen('Z') || parser.seen('E'));
     if (all_axis) {
       stepper.finish_and_disable();
     }
     else {
       stepper.synchronize();
       if (parser.seen('X')) disable_X();
       if (parser.seen('Y')) disable_Y();
       if (parser.seen('Z')) disable_Z();
-      #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN // Only enable on boards that have separate ENABLE_PINS
+      #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN // Only disable on boards that have separate ENABLE_PINS
         if (parser.seen('E')) disable_e_steppers();
       #endif
     }
 
     #if ENABLED(AUTO_BED_LEVELING_UBL) && ENABLED(ULTIPANEL)  // Only needed with an LCD
       ubl.lcd_map_control = defer_return_to_status = false;
     #endif
   }
 }

commit 3dd04736c03936a1d6de6032452c763a8fec6c7a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Dec 31 00:26:45 2017 -0600

    Update M17_M18_M84.cpp

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 14c49bb6b8..003687c2c6 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -38,21 +38,21 @@ void GcodeSuite::M17() {
 }
 
 /**
  * M18, M84: Disable stepper motors
  */
 void GcodeSuite::M18_M84() {
   if (parser.seenval('S')) {
     stepper_inactive_time = parser.value_millis_from_seconds();
   }
   else {
-    bool all_axis = !((parser.seen('X')) || (parser.seen('Y')) || (parser.seen('Z')) || (parser.seen('E')));
+    bool all_axis = !(parser.seen('X') || parser.seen('Y') || parser.seen('Z') || parser.seen('E'));
     if (all_axis) {
       stepper.finish_and_disable();
     }
     else {
       stepper.synchronize();
       if (parser.seen('X')) disable_X();
       if (parser.seen('Y')) disable_Y();
       if (parser.seen('Z')) disable_Z();
       #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN // Only enable on boards that have separate ENABLE_PINS
         if (parser.seen('E')) disable_e_steppers();

commit 026e3013076a471d0aea78e5517d12d79688f2ce
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Dec 25 07:46:19 2017 -0600

    lcd_map_control deps on ULTIPANEL

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
index 8f55d8836b..14c49bb6b8 100644
--- a/Marlin/src/gcode/control/M17_M18_M84.cpp
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -52,15 +52,15 @@ void GcodeSuite::M18_M84() {
     else {
       stepper.synchronize();
       if (parser.seen('X')) disable_X();
       if (parser.seen('Y')) disable_Y();
       if (parser.seen('Z')) disable_Z();
       #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN // Only enable on boards that have separate ENABLE_PINS
         if (parser.seen('E')) disable_e_steppers();
       #endif
     }
 
-    #if ENABLED(AUTO_BED_LEVELING_UBL) && ENABLED(ULTRA_LCD)  // Only needed with an LCD
+    #if ENABLED(AUTO_BED_LEVELING_UBL) && ENABLED(ULTIPANEL)  // Only needed with an LCD
       ubl.lcd_map_control = defer_return_to_status = false;
     #endif
   }
 }

commit 1587962547910eb21362cac32f3f644d79a46656
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 23 18:09:14 2017 -0500

    Combine G-code files into fewer units
    
    Addressing #7707

diff --git a/Marlin/src/gcode/control/M17_M18_M84.cpp b/Marlin/src/gcode/control/M17_M18_M84.cpp
new file mode 100644
index 0000000000..8f55d8836b
--- /dev/null
+++ b/Marlin/src/gcode/control/M17_M18_M84.cpp
@@ -0,0 +1,66 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../gcode.h"
+#include "../../Marlin.h" // for stepper_inactive_time
+#include "../../lcd/ultralcd.h"
+#include "../../module/stepper.h"
+
+#if ENABLED(AUTO_BED_LEVELING_UBL) && ENABLED(ULTRA_LCD)
+  #include "../../feature/bedlevel/bedlevel.h"
+#endif
+
+/**
+ * M17: Enable power on all stepper motors
+ */
+void GcodeSuite::M17() {
+  LCD_MESSAGEPGM(MSG_NO_MOVE);
+  enable_all_steppers();
+}
+
+/**
+ * M18, M84: Disable stepper motors
+ */
+void GcodeSuite::M18_M84() {
+  if (parser.seenval('S')) {
+    stepper_inactive_time = parser.value_millis_from_seconds();
+  }
+  else {
+    bool all_axis = !((parser.seen('X')) || (parser.seen('Y')) || (parser.seen('Z')) || (parser.seen('E')));
+    if (all_axis) {
+      stepper.finish_and_disable();
+    }
+    else {
+      stepper.synchronize();
+      if (parser.seen('X')) disable_X();
+      if (parser.seen('Y')) disable_Y();
+      if (parser.seen('Z')) disable_Z();
+      #if E0_ENABLE_PIN != X_ENABLE_PIN && E1_ENABLE_PIN != Y_ENABLE_PIN // Only enable on boards that have separate ENABLE_PINS
+        if (parser.seen('E')) disable_e_steppers();
+      #endif
+    }
+
+    #if ENABLED(AUTO_BED_LEVELING_UBL) && ENABLED(ULTRA_LCD)  // Only needed with an LCD
+      ubl.lcd_map_control = defer_return_to_status = false;
+    #endif
+  }
+}
