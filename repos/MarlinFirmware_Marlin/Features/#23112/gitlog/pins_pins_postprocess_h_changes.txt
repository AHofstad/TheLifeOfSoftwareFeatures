commit b8ab2d4987acb6de816840939d3fcf22315e8458
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jul 13 23:39:27 2024 -0500

    🩹 Fix PINS_EXIST usage

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 7b1b4fd0ad..f9814b45d1 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -715,21 +715,21 @@
 #if ENABLED(E_DUAL_STEPPER_DRIVERS)
   #ifndef E1_STEP_PIN
     #error "No E1 stepper available for E_DUAL_STEPPER_DRIVERS!"
   #endif
   #define X2_E_INDEX INCREMENT(E_STEPPERS)
 #else
   #define X2_E_INDEX E_STEPPERS
 #endif
 
 // X2 auto-assignment will use up an E stepper, but not if it's chained
-#if HAS_X2_STEPPER && !defined(X2_STEP_PIN) && !PIN_EXISTS(X2_CS_PIN)
+#if HAS_X2_STEPPER && !defined(X2_STEP_PIN) && !PIN_EXISTS(X2_CS)
   #define Y2_E_INDEX INCREMENT(X2_E_INDEX)
 #else
   #define Y2_E_INDEX X2_E_INDEX
 #endif
 
 // The X2 axis, if any, should be the next open extruder port
 #if HAS_X2_STEPPER
   #ifndef X2_STEP_PIN
     #define X2_STEP_PIN   _EPIN(X2_E_INDEX, STEP)
     #define X2_DIR_PIN    _EPIN(X2_E_INDEX, DIR)
@@ -803,21 +803,21 @@
   #define X2_MS1_PIN -1
 #endif
 #ifndef X2_MS2_PIN
   #define X2_MS2_PIN -1
 #endif
 #ifndef X2_MS3_PIN
   #define X2_MS3_PIN -1
 #endif
 
 // Y2 auto-assignment will use up an E stepper, but not if it's chained
-#if HAS_Y2_STEPPER && !defined(Y2_STEP_PIN) && !PIN_EXISTS(Y2_CS_PIN)
+#if HAS_Y2_STEPPER && !defined(Y2_STEP_PIN) && !PIN_EXISTS(Y2_CS)
   #define Z2_E_INDEX INCREMENT(Y2_E_INDEX)
 #else
   #define Z2_E_INDEX Y2_E_INDEX
 #endif
 
 // The Y2 axis, if any, should be the next open extruder port
 #if HAS_Y2_STEPPER
   #ifndef Y2_STEP_PIN
     #define Y2_STEP_PIN   _EPIN(Y2_E_INDEX, STEP)
     #define Y2_DIR_PIN    _EPIN(Y2_E_INDEX, DIR)
@@ -888,21 +888,21 @@
   #define Y2_MS1_PIN -1
 #endif
 #ifndef Y2_MS2_PIN
   #define Y2_MS2_PIN -1
 #endif
 #ifndef Y2_MS3_PIN
   #define Y2_MS3_PIN -1
 #endif
 
 // Z2 auto-assignment will use up an E stepper, but not if it's chained
-#if NUM_Z_STEPPERS >= 2 && !defined(Z2_STEP_PIN) && !PIN_EXISTS(Z2_CS_PIN)
+#if NUM_Z_STEPPERS >= 2 && !defined(Z2_STEP_PIN) && !PIN_EXISTS(Z2_CS)
   #define Z3_E_INDEX INCREMENT(Z2_E_INDEX)
 #else
   #define Z3_E_INDEX Z2_E_INDEX
 #endif
 
 // The Z2 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPERS >= 2
   #ifndef Z2_STEP_PIN
     #define Z2_STEP_PIN   _EPIN(Z2_E_INDEX, STEP)
     #define Z2_DIR_PIN    _EPIN(Z2_E_INDEX, DIR)
@@ -973,21 +973,21 @@
   #define Z2_MS1_PIN -1
 #endif
 #ifndef Z2_MS2_PIN
   #define Z2_MS2_PIN -1
 #endif
 #ifndef Z2_MS3_PIN
   #define Z2_MS3_PIN -1
 #endif
 
 // Z3 auto-assignment will use up an E stepper, but not if it's chained
-#if NUM_Z_STEPPERS >= 3 && !defined(Z3_STEP_PIN) && !PIN_EXISTS(Z3_CS_PIN)
+#if NUM_Z_STEPPERS >= 3 && !defined(Z3_STEP_PIN) && !PIN_EXISTS(Z3_CS)
   #define Z4_E_INDEX INCREMENT(Z3_E_INDEX)
 #else
   #define Z4_E_INDEX Z3_E_INDEX
 #endif
 
 // The Z3 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPERS >= 3
   #ifndef Z3_STEP_PIN
     #define Z3_STEP_PIN   _EPIN(Z3_E_INDEX, STEP)
     #define Z3_DIR_PIN    _EPIN(Z3_E_INDEX, DIR)
@@ -1058,21 +1058,21 @@
   #define Z3_MS1_PIN -1
 #endif
 #ifndef Z3_MS2_PIN
   #define Z3_MS2_PIN -1
 #endif
 #ifndef Z3_MS3_PIN
   #define Z3_MS3_PIN -1
 #endif
 
 // Z4 auto-assignment will use up an E stepper, but not if it's chained
-#if NUM_Z_STEPPERS >= 4 && !defined(Z4_STEP_PIN) && !PIN_EXISTS(Z4_CS_PIN)
+#if NUM_Z_STEPPERS >= 4 && !defined(Z4_STEP_PIN) && !PIN_EXISTS(Z4_CS)
   #define I_E_INDEX INCREMENT(Z4_E_INDEX)
 #else
   #define I_E_INDEX Z4_E_INDEX
 #endif
 
 // The Z4 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPERS >= 4
   #ifndef Z4_STEP_PIN
     #define Z4_STEP_PIN   _EPIN(Z4_E_INDEX, STEP)
     #define Z4_DIR_PIN    _EPIN(Z4_E_INDEX, DIR)
@@ -1143,21 +1143,21 @@
   #define Z4_MS1_PIN -1
 #endif
 #ifndef Z4_MS2_PIN
   #define Z4_MS2_PIN -1
 #endif
 #ifndef Z4_MS3_PIN
   #define Z4_MS3_PIN -1
 #endif
 
 // I auto-assignment will use up an E stepper, but not if it's chained
-#if HAS_I_AXIS && !defined(I_STEP_PIN) && !PIN_EXISTS(I_CS_PIN)
+#if HAS_I_AXIS && !defined(I_STEP_PIN) && !PIN_EXISTS(I_CS)
   #define J_E_INDEX INCREMENT(I_E_INDEX)
 #else
   #define J_E_INDEX I_E_INDEX
 #endif
 
 // The I axis, if any, should be the next open extruder port
 #if HAS_I_AXIS
   #ifndef I_STEP_PIN
     #define I_STEP_PIN   _EPIN(I_E_INDEX, STEP)
     #define I_DIR_PIN    _EPIN(I_E_INDEX, DIR)
@@ -1228,21 +1228,21 @@
   #define I_MS1_PIN -1
 #endif
 #ifndef I_MS2_PIN
   #define I_MS2_PIN -1
 #endif
 #ifndef I_MS3_PIN
   #define I_MS3_PIN -1
 #endif
 
 // J auto-assignment will use up an E stepper, but not if it's chained
-#if HAS_J_AXIS && !defined(J_STEP_PIN) && !PIN_EXISTS(J_CS_PIN)
+#if HAS_J_AXIS && !defined(J_STEP_PIN) && !PIN_EXISTS(J_CS)
   #define K_E_INDEX INCREMENT(J_E_INDEX)
 #else
   #define K_E_INDEX J_E_INDEX
 #endif
 
 // The J axis, if any, should be the next open extruder port
 #if HAS_J_AXIS
   #ifndef J_STEP_PIN
     #define J_STEP_PIN   _EPIN(J_E_INDEX, STEP)
     #define J_DIR_PIN    _EPIN(J_E_INDEX, DIR)
@@ -1313,21 +1313,21 @@
   #define J_MS1_PIN -1
 #endif
 #ifndef J_MS2_PIN
   #define J_MS2_PIN -1
 #endif
 #ifndef J_MS3_PIN
   #define J_MS3_PIN -1
 #endif
 
 // K auto-assignment will use up an E stepper, but not if it's chained
-#if HAS_K_AXIS && !defined(K_STEP_PIN) && !PIN_EXISTS(K_CS_PIN)
+#if HAS_K_AXIS && !defined(K_STEP_PIN) && !PIN_EXISTS(K_CS)
   #define U_E_INDEX INCREMENT(K_E_INDEX)
 #else
   #define U_E_INDEX K_E_INDEX
 #endif
 
 // The K axis, if any, should be the next open extruder port
 #if HAS_K_AXIS
   #ifndef K_STEP_PIN
     #define K_STEP_PIN   _EPIN(K_E_INDEX, STEP)
     #define K_DIR_PIN    _EPIN(K_E_INDEX, DIR)
@@ -1398,21 +1398,21 @@
   #define K_MS1_PIN -1
 #endif
 #ifndef K_MS2_PIN
   #define K_MS2_PIN -1
 #endif
 #ifndef K_MS3_PIN
   #define K_MS3_PIN -1
 #endif
 
 // U auto-assignment will use up an E stepper, but not if it's chained
-#if HAS_U_AXIS && !defined(U_STEP_PIN) && !PIN_EXISTS(U_CS_PIN)
+#if HAS_U_AXIS && !defined(U_STEP_PIN) && !PIN_EXISTS(U_CS)
   #define V_E_INDEX INCREMENT(U_E_INDEX)
 #else
   #define V_E_INDEX U_E_INDEX
 #endif
 
 // The U axis, if any, should be the next open extruder port
 #if HAS_U_AXIS
   #ifndef U_STEP_PIN
     #define U_STEP_PIN   _EPIN(U_E_INDEX, STEP)
     #define U_DIR_PIN    _EPIN(U_E_INDEX, DIR)
@@ -1483,21 +1483,21 @@
   #define U_MS1_PIN -1
 #endif
 #ifndef U_MS2_PIN
   #define U_MS2_PIN -1
 #endif
 #ifndef U_MS3_PIN
   #define U_MS3_PIN -1
 #endif
 
 // V auto-assignment will use up an E stepper, but not if it's chained
-#if HAS_V_AXIS && !defined(V_STEP_PIN) && !PIN_EXISTS(V_CS_PIN)
+#if HAS_V_AXIS && !defined(V_STEP_PIN) && !PIN_EXISTS(V_CS)
   #define W_E_INDEX INCREMENT(V_E_INDEX)
 #else
   #define W_E_INDEX V_E_INDEX
 #endif
 
 // The V axis, if any, should be the next open extruder port
 #if HAS_V_AXIS
   #ifndef V_STEP_PIN
     #define V_STEP_PIN   _EPIN(V_E_INDEX, STEP)
     #define V_DIR_PIN    _EPIN(V_E_INDEX, DIR)

commit 1d29a563440e19b839c90786c008a2169fb1e0f9
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sun Jun 9 06:27:13 2024 +1200

    🔧 Fix Z_MULTI_ENDSTOPS pin post-process (#27137)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 891076b2db..7b1b4fd0ad 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -549,34 +549,34 @@
   #endif
 #endif
 
 #if HAS_Z_AXIS
   #ifdef Z_STOP_PIN
     #if Z_HOME_TO_MIN
       #define Z_MIN_PIN Z_STOP_PIN
     #elif Z_HOME_TO_MAX
       #define Z_MAX_PIN Z_STOP_PIN
     #endif
-  #elif Z_HOME_TO_MIN
-    #define Z_STOP_PIN Z_MIN_PIN
-  #elif Z_HOME_TO_MAX
-    #define Z_STOP_PIN Z_MAX_PIN
   #endif
-  #if ENABLED(Z_MULTI_ENDSTOPS) && PIN_EXISTS(Z_STOP)
-    #ifndef Z2_STOP_PIN
-      #define Z2_STOP_PIN Z_STOP_PIN
+  #if ENABLED(Z_MULTI_ENDSTOPS)
+    #if ((Z_HOME_TO_MIN && !defined(Z2_MIN_PIN)) || (Z_HOME_TO_MAX && !defined(Z2_MAX_PIN))) && !defined(Z2_STOP_PIN)
+      #error "Z2_STOP_PIN is required for Z_MULTI_ENDSTOPS. Define Z2_STOP_PIN in Configuration_adv.h."
     #endif
-    #if NUM_Z_STEPPERS >= 3 && !defined(Z3_STOP_PIN)
-      #define Z3_STOP_PIN Z_STOP_PIN
+    #if NUM_Z_STEPPERS >= 3
+      #if ((Z_HOME_TO_MIN && !defined(Z3_MIN_PIN)) || (Z_HOME_TO_MAX && !defined(Z3_MAX_PIN))) && !defined(Z3_STOP_PIN)
+        #error "Z3_STOP_PIN is required for Z_MULTI_ENDSTOPS with NUM_Z_STEPPERS >= 3. Define Z3_STOP_PIN in Configuration_adv.h."
+      #endif
     #endif
-    #if NUM_Z_STEPPERS >= 4 && !defined(Z4_STOP_PIN)
-      #define Z4_STOP_PIN Z_STOP_PIN
+    #if NUM_Z_STEPPERS >= 4
+      #if ((Z_HOME_TO_MIN && !defined(Z4_MIN_PIN)) || (Z_HOME_TO_MAX && !defined(Z4_MAX_PIN))) && !defined(Z4_STOP_PIN)
+        #error "Z4_STOP_PIN is required for Z_MULTI_ENDSTOPS with NUM_Z_STEPPERS == 4. Define Z4_STOP_PIN in Configuration_adv.h."
+      #endif
     #endif
   #endif
 #endif
 
 #if HAS_I_AXIS
   #ifdef I_STOP_PIN
     #if I_HOME_TO_MIN
       #define I_MIN_PIN I_STOP_PIN
     #elif I_HOME_TO_MAX
       #define I_MAX_PIN I_STOP_PIN

commit 08fe8a3076c21f881f151bc596e54ff24831bdea
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 12 13:08:17 2024 -0500

    🔧 Undef motor current PWM for unused axes

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index ac81eb3f25..891076b2db 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -1729,10 +1729,50 @@
 #undef E_DIAG_EXISTS
 
 // Get a NeoPixel pin from the LCD or board, if provided
 #ifndef NEOPIXEL_PIN
   #ifdef LCD_NEOPIXEL_PIN
     #define NEOPIXEL_PIN LCD_NEOPIXEL_PIN
   #elif defined(BOARD_NEOPIXEL_PIN)
     #define NEOPIXEL_PIN BOARD_NEOPIXEL_PIN
   #endif
 #endif
+
+// Undefine motor PWM pins for nonexistent axes since the existence of a MOTOR_CURRENT_PWM_*_PIN implies its standard use.
+// TODO: Allow remapping (e.g., E => Z2). Spec G-codes to use logical axis with index (e.g., to set Z2: Mxxx Z P1 Snnn).
+#if !HAS_X_AXIS
+  #undef MOTOR_CURRENT_PWM_X_PIN
+#endif
+#if !HAS_Y_AXIS
+  #undef MOTOR_CURRENT_PWM_Y_PIN
+#endif
+#if !HAS_X_AXIS && !HAS_Y_AXIS
+  #undef MOTOR_CURRENT_PWM_XY_PIN
+#endif
+#if !HAS_Z_AXIS
+  #undef MOTOR_CURRENT_PWM_Z_PIN
+#endif
+#if !HAS_I_AXIS
+  #undef MOTOR_CURRENT_PWM_I_PIN
+#endif
+#if !HAS_J_AXIS
+  #undef MOTOR_CURRENT_PWM_J_PIN
+#endif
+#if !HAS_K_AXIS
+  #undef MOTOR_CURRENT_PWM_K_PIN
+#endif
+#if !HAS_U_AXIS
+  #undef MOTOR_CURRENT_PWM_U_PIN
+#endif
+#if !HAS_V_AXIS
+  #undef MOTOR_CURRENT_PWM_V_PIN
+#endif
+#if !HAS_W_AXIS
+  #undef MOTOR_CURRENT_PWM_W_PIN
+#endif
+#if !HAS_EXTRUDERS
+  #undef MOTOR_CURRENT_PWM_E_PIN
+  #undef MOTOR_CURRENT_PWM_E0_PIN   // Archim 1.0
+  #undef MOTOR_CURRENT_PWM_E1_PIN   // Kept in sync with E0
+#elif !HAS_MULTI_EXTRUDER
+  #undef MOTOR_CURRENT_PWM_E1_PIN
+#endif

commit d502e5beaac79b55553ecfc706653805f74d5599
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sun Apr 21 09:46:48 2024 +1200

    🐛 Fix auto-assignment errors for J and U axis (#26979)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index e6fdac2155..ac81eb3f25 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -1240,21 +1240,21 @@
 #else
   #define K_E_INDEX J_E_INDEX
 #endif
 
 // The J axis, if any, should be the next open extruder port
 #if HAS_J_AXIS
   #ifndef J_STEP_PIN
     #define J_STEP_PIN   _EPIN(J_E_INDEX, STEP)
     #define J_DIR_PIN    _EPIN(J_E_INDEX, DIR)
     #define J_ENABLE_PIN _EPIN(J_E_INDEX, ENABLE)
-    #if I_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(J_STEP)
+    #if J_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(J_STEP)
       #error "No E stepper plug left for J!"
     #else
       #define AUTO_ASSIGNED_J_STEPPER 1
     #endif
   #endif
   #if AXIS_HAS_SPI(J) && !defined(J_CS_PIN)
     #define J_CS_PIN     _EPIN(J_E_INDEX, CS)
     #if PIN_EXISTS(J_CS)
       #define AUTO_ASSIGNED_J_CS 1
     #endif
@@ -1410,21 +1410,21 @@
 #else
   #define V_E_INDEX U_E_INDEX
 #endif
 
 // The U axis, if any, should be the next open extruder port
 #if HAS_U_AXIS
   #ifndef U_STEP_PIN
     #define U_STEP_PIN   _EPIN(U_E_INDEX, STEP)
     #define U_DIR_PIN    _EPIN(U_E_INDEX, DIR)
     #define U_ENABLE_PIN _EPIN(U_E_INDEX, ENABLE)
-    #if M_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(U_STEP)
+    #if U_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(U_STEP)
       #error "No E stepper plug left for U!"
     #else
       #define AUTO_ASSIGNED_U_STEPPER 1
     #endif
   #endif
   #if AXIS_HAS_SPI(U) && !defined(U_CS_PIN)
     #define U_CS_PIN     _EPIN(U_E_INDEX, CS)
     #if PIN_EXISTS(U_CS)
       #define AUTO_ASSIGNED_U_CS 1
     #endif

commit 504219817cc4967acf14d6770fc2336e287cb9c1
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sat Mar 9 22:22:23 2024 -0500

    ✨ Redundant PSU Control with EDM (#26751)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 411faa4ddf..e6fdac2155 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -470,20 +470,24 @@
 #ifndef SDSS
   #define SDSS -1
 #endif
 #ifndef LED_PIN
   #define LED_PIN -1
 #endif
 #if DISABLED(PSU_CONTROL) || !defined(PS_ON_PIN)
   #undef PS_ON_PIN
   #define PS_ON_PIN -1
 #endif
+#if DISABLED(PSU_OFF_REDUNDANT) || !defined(PS_ON1_PIN)
+  #undef PS_ON1_PIN
+  #define PS_ON1_PIN -1
+#endif
 #ifndef KILL_PIN
   #define KILL_PIN -1
 #endif
 #ifndef SUICIDE_PIN
   #define SUICIDE_PIN -1
 #endif
 #ifndef SUICIDE_PIN_STATE
   #define SUICIDE_PIN_STATE LOW
 #endif
 

commit 5ed6bf65ba32e97b8cad133730a602fc67cda4f9
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 23 15:44:51 2024 -0600

    🔧 Allow for no STOP pin
    
    Co-Authored-By: DerAndere <26200979+DerAndere1@users.noreply.github.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index abe193d979..411faa4ddf 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -508,155 +508,155 @@
 #undef NEEDS_Y_MINMAX
 #undef NEEDS_Z_MINMAX
 
 //
 // Assign endstop pins, with handling for boards that have only 3 connectors
 //
 #if HAS_X_AXIS
   #ifdef X_STOP_PIN
     #if X_HOME_TO_MIN
       #define X_MIN_PIN X_STOP_PIN
-    #else
+    #elif X_HOME_TO_MAX
       #define X_MAX_PIN X_STOP_PIN
     #endif
   #elif X_HOME_TO_MIN
     #define X_STOP_PIN X_MIN_PIN
-  #else
+  #elif X_HOME_TO_MAX
     #define X_STOP_PIN X_MAX_PIN
   #endif
   #if !defined(X2_STOP_PIN) && ENABLED(X_DUAL_ENDSTOPS) && PIN_EXISTS(X_STOP)
     #define X2_STOP_PIN X_STOP_PIN
   #endif
 #endif
 
 #if HAS_Y_AXIS
   #ifdef Y_STOP_PIN
     #if Y_HOME_TO_MIN
       #define Y_MIN_PIN Y_STOP_PIN
-    #else
+    #elif Y_HOME_TO_MAX
       #define Y_MAX_PIN Y_STOP_PIN
     #endif
   #elif Y_HOME_TO_MIN
     #define Y_STOP_PIN Y_MIN_PIN
-  #else
+  #elif X_HOME_TO_MAX
     #define Y_STOP_PIN Y_MAX_PIN
   #endif
   #if !defined(Y2_STOP_PIN) && ENABLED(Y_DUAL_ENDSTOPS) && PIN_EXISTS(Y_STOP)
     #define Y2_STOP_PIN Y_STOP_PIN
   #endif
 #endif
 
 #if HAS_Z_AXIS
   #ifdef Z_STOP_PIN
     #if Z_HOME_TO_MIN
       #define Z_MIN_PIN Z_STOP_PIN
-    #else
+    #elif Z_HOME_TO_MAX
       #define Z_MAX_PIN Z_STOP_PIN
     #endif
   #elif Z_HOME_TO_MIN
     #define Z_STOP_PIN Z_MIN_PIN
-  #else
+  #elif Z_HOME_TO_MAX
     #define Z_STOP_PIN Z_MAX_PIN
   #endif
   #if ENABLED(Z_MULTI_ENDSTOPS) && PIN_EXISTS(Z_STOP)
     #ifndef Z2_STOP_PIN
       #define Z2_STOP_PIN Z_STOP_PIN
     #endif
     #if NUM_Z_STEPPERS >= 3 && !defined(Z3_STOP_PIN)
       #define Z3_STOP_PIN Z_STOP_PIN
     #endif
     #if NUM_Z_STEPPERS >= 4 && !defined(Z4_STOP_PIN)
       #define Z4_STOP_PIN Z_STOP_PIN
     #endif
   #endif
 #endif
 
 #if HAS_I_AXIS
   #ifdef I_STOP_PIN
     #if I_HOME_TO_MIN
       #define I_MIN_PIN I_STOP_PIN
-    #else
+    #elif I_HOME_TO_MAX
       #define I_MAX_PIN I_STOP_PIN
     #endif
   #elif I_HOME_TO_MIN
     #define I_STOP_PIN I_MIN_PIN
-  #else
+  #elif I_HOME_TO_MAX
     #define I_STOP_PIN I_MAX_PIN
   #endif
 #endif
 
 #if HAS_J_AXIS
   #ifdef J_STOP_PIN
     #if J_HOME_TO_MIN
       #define J_MIN_PIN J_STOP_PIN
-    #else
+    #elif J_HOME_TO_MAX
       #define J_MAX_PIN J_STOP_PIN
     #endif
   #elif J_HOME_TO_MIN
     #define J_STOP_PIN J_MIN_PIN
-  #else
+  #elif J_HOME_TO_MAX
     #define J_STOP_PIN J_MAX_PIN
   #endif
 #endif
 
 #if HAS_K_AXIS
   #ifdef K_STOP_PIN
     #if K_HOME_TO_MIN
       #define K_MIN_PIN K_STOP_PIN
-    #else
+    #elif K_HOME_TO_MAX
       #define K_MAX_PIN K_STOP_PIN
     #endif
   #elif K_HOME_TO_MIN
     #define K_STOP_PIN K_MIN_PIN
-  #else
+  #elif K_HOME_TO_MAX
     #define K_STOP_PIN K_MAX_PIN
   #endif
 #endif
 
 #if HAS_U_AXIS
   #ifdef U_STOP_PIN
     #if U_HOME_TO_MIN
       #define U_MIN_PIN U_STOP_PIN
-    #else
+    #elif U_HOME_TO_MAX
       #define U_MAX_PIN U_STOP_PIN
     #endif
   #elif U_HOME_TO_MIN
     #define U_STOP_PIN U_MIN_PIN
-  #else
+  #elif U_HOME_TO_MAX
     #define U_STOP_PIN U_MAX_PIN
   #endif
 #endif
 
 #if HAS_V_AXIS
   #ifdef V_STOP_PIN
     #if V_HOME_TO_MIN
       #define V_MIN_PIN V_STOP_PIN
-    #else
+    #elif V_HOME_TO_MAX
       #define V_MAX_PIN V_STOP_PIN
     #endif
   #elif V_HOME_TO_MIN
     #define V_STOP_PIN V_MIN_PIN
-  #else
+  #elif V_HOME_TO_MAX
     #define V_STOP_PIN V_MAX_PIN
   #endif
 #endif
 
 #if HAS_W_AXIS
   #ifdef W_STOP_PIN
     #if W_HOME_TO_MIN
       #define W_MIN_PIN W_STOP_PIN
-    #else
+    #elif W_HOME_TO_MAX
       #define W_MAX_PIN W_STOP_PIN
     #endif
   #elif W_HOME_TO_MIN
     #define W_STOP_PIN W_MIN_PIN
-  #else
+  #elif W_HOME_TO_MAX
     #define W_STOP_PIN W_MAX_PIN
   #endif
 #endif
 
 // Filament Sensor first pin alias
 #if HAS_FILAMENT_SENSOR
   #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN  // Filament Sensor first pin alias
 #else
   #undef FIL_RUNOUT_PIN
   #undef FIL_RUNOUT1_PIN

commit aa7d5714867df05348ca63ad113ea9cf7ccc3271
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jan 22 17:32:01 2024 -0600

    ♻️ LCD pins migration precursor (#26719)
    
    Preliminary changes for #25650

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index e97b6ceaa4..abe193d979 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -1716,10 +1716,19 @@
 #endif
 
 #if !NEED_CASE_LIGHT_PIN
   #undef CASE_LIGHT_PIN
 #endif
 
 #undef HAS_FREE_AUX2_PINS
 #undef DIAG_REMAPPED
 #undef _E_DIAG_EXISTS
 #undef E_DIAG_EXISTS
+
+// Get a NeoPixel pin from the LCD or board, if provided
+#ifndef NEOPIXEL_PIN
+  #ifdef LCD_NEOPIXEL_PIN
+    #define NEOPIXEL_PIN LCD_NEOPIXEL_PIN
+  #elif defined(BOARD_NEOPIXEL_PIN)
+    #define NEOPIXEL_PIN BOARD_NEOPIXEL_PIN
+  #endif
+#endif

commit f6ecdae972c1e54f52daec5c63252281962da5b9
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Wed Jan 10 10:19:47 2024 +1300

    🔧 Base NUM_SERVO_PLUGS on SERVO PINS (#26640)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index e5467833e5..e97b6ceaa4 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -480,22 +480,34 @@
 #ifndef KILL_PIN
   #define KILL_PIN -1
 #endif
 #ifndef SUICIDE_PIN
   #define SUICIDE_PIN -1
 #endif
 #ifndef SUICIDE_PIN_STATE
   #define SUICIDE_PIN_STATE LOW
 #endif
 
-#ifndef NUM_SERVO_PLUGS
+#if PIN_EXISTS(SERVO5)
+  #define NUM_SERVO_PLUGS 6
+#elif PIN_EXISTS(SERVO4)
+  #define NUM_SERVO_PLUGS 5
+#elif PIN_EXISTS(SERVO3)
   #define NUM_SERVO_PLUGS 4
+#elif PIN_EXISTS(SERVO2)
+  #define NUM_SERVO_PLUGS 3
+#elif PIN_EXISTS(SERVO1)
+  #define NUM_SERVO_PLUGS 2
+#elif PIN_EXISTS(SERVO0)
+  #define NUM_SERVO_PLUGS 1
+#else
+  #define NUM_SERVO_PLUGS 0
 #endif
 
 // Only used within pins files
 #undef NEEDS_X_MINMAX
 #undef NEEDS_Y_MINMAX
 #undef NEEDS_Z_MINMAX
 
 //
 // Assign endstop pins, with handling for boards that have only 3 connectors
 //

commit d52d26b4ef55ebb7ebc56ce5c712e4914f3aeb2a
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Wed May 10 08:37:34 2023 +1200

    🔧 Update multi-stepper axis conditionals (#25798)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index b0fe6bcb6b..e5467833e5 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -787,28 +787,28 @@
   #define X2_MS1_PIN -1
 #endif
 #ifndef X2_MS2_PIN
   #define X2_MS2_PIN -1
 #endif
 #ifndef X2_MS3_PIN
   #define X2_MS3_PIN -1
 #endif
 
 // Y2 auto-assignment will use up an E stepper, but not if it's chained
-#if HAS_DUAL_Y_STEPPERS && !defined(Y2_STEP_PIN) && !PIN_EXISTS(Y2_CS_PIN)
+#if HAS_Y2_STEPPER && !defined(Y2_STEP_PIN) && !PIN_EXISTS(Y2_CS_PIN)
   #define Z2_E_INDEX INCREMENT(Y2_E_INDEX)
 #else
   #define Z2_E_INDEX Y2_E_INDEX
 #endif
 
 // The Y2 axis, if any, should be the next open extruder port
-#if HAS_DUAL_Y_STEPPERS
+#if HAS_Y2_STEPPER
   #ifndef Y2_STEP_PIN
     #define Y2_STEP_PIN   _EPIN(Y2_E_INDEX, STEP)
     #define Y2_DIR_PIN    _EPIN(Y2_E_INDEX, DIR)
     #define Y2_ENABLE_PIN _EPIN(Y2_E_INDEX, ENABLE)
     #if Y2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Y2_STEP)
       #error "No E stepper plug left for Y2!"
     #else
       #define AUTO_ASSIGNED_Y2_STEPPER 1
     #endif
   #endif

commit 85325f585ac4a9bb667423561540b5d58bdc3b6e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri May 5 19:37:13 2023 -0500

    🧑‍💻 Endstops preliminary work (#25780)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index daf6c03aa3..b0fe6bcb6b 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -490,21 +490,21 @@
 #ifndef NUM_SERVO_PLUGS
   #define NUM_SERVO_PLUGS 4
 #endif
 
 // Only used within pins files
 #undef NEEDS_X_MINMAX
 #undef NEEDS_Y_MINMAX
 #undef NEEDS_Z_MINMAX
 
 //
-// Assign endstop pins for boards with only 3 connectors
+// Assign endstop pins, with handling for boards that have only 3 connectors
 //
 #if HAS_X_AXIS
   #ifdef X_STOP_PIN
     #if X_HOME_TO_MIN
       #define X_MIN_PIN X_STOP_PIN
     #else
       #define X_MAX_PIN X_STOP_PIN
     #endif
   #elif X_HOME_TO_MIN
     #define X_STOP_PIN X_MIN_PIN
@@ -1632,59 +1632,61 @@
 #ifndef W_MS2_PIN
   #define W_MS2_PIN -1
 #endif
 #ifndef W_MS3_PIN
   #define W_MS3_PIN -1
 #endif
 
 /**
  * X_DUAL_ENDSTOPS endstop reassignment
  */
-#if ENABLED(X_DUAL_ENDSTOPS)
-  #if X_HOME_TO_MAX && !defined(X2_MAX_PIN) && PIN_EXISTS(X2_STOP)
+#if ENABLED(X_DUAL_ENDSTOPS) && PIN_EXISTS(X2_STOP)
+  #if X_HOME_TO_MAX && !defined(X2_MAX_PIN)
     #define X2_MAX_PIN X2_STOP_PIN
-  #elif X_HOME_TO_MIN && !defined(X2_MIN_PIN) && PIN_EXISTS(X2_STOP)
+  #elif X_HOME_TO_MIN && !defined(X2_MIN_PIN)
     #define X2_MIN_PIN X2_STOP_PIN
   #endif
 #endif
 
 /**
  * Y_DUAL_ENDSTOPS endstop reassignment
  */
-#if ENABLED(Y_DUAL_ENDSTOPS)
-  #if Y_HOME_TO_MAX && !defined(Y2_MAX_PIN) && PIN_EXISTS(Y2_STOP)
+#if ENABLED(Y_DUAL_ENDSTOPS) && PIN_EXISTS(Y2_STOP)
+  #if Y_HOME_TO_MAX && !defined(Y2_MAX_PIN)
     #define Y2_MAX_PIN Y2_STOP_PIN
-  #elif Y_HOME_TO_MIN && !defined(Y2_MIN_PIN) && PIN_EXISTS(Y2_STOP)
+  #elif Y_HOME_TO_MIN && !defined(Y2_MIN_PIN)
     #define Y2_MIN_PIN Y2_STOP_PIN
   #endif
 #endif
 
 /**
  * Z_MULTI_ENDSTOPS endstop reassignment
  */
 #if ENABLED(Z_MULTI_ENDSTOPS)
-  #if Z_HOME_TO_MAX && !defined(Z2_MAX_PIN) && PIN_EXISTS(Z2_STOP)
-    #define Z2_MAX_PIN Z2_STOP_PIN
-  #elif Z_HOME_TO_MIN && !defined(Z2_MIN_PIN) && PIN_EXISTS(Z2_STOP)
-    #define Z2_MIN_PIN Z2_STOP_PIN
+  #if PIN_EXISTS(Z2_STOP)
+    #if Z_HOME_TO_MAX && !defined(Z2_MAX_PIN)
+      #define Z2_MAX_PIN Z2_STOP_PIN
+    #elif Z_HOME_TO_MIN && !defined(Z2_MIN_PIN)
+      #define Z2_MIN_PIN Z2_STOP_PIN
+    #endif
   #endif
-  #if NUM_Z_STEPPERS >= 3
-    #if Z_HOME_TO_MAX && !defined(Z3_MAX_PIN) && PIN_EXISTS(Z3_STOP)
+  #if NUM_Z_STEPPERS >= 3 && PIN_EXISTS(Z3_STOP)
+    #if Z_HOME_TO_MAX && !defined(Z3_MAX_PIN)
       #define Z3_MAX_PIN Z3_STOP_PIN
-    #elif Z_HOME_TO_MIN && !defined(Z3_MIN_PIN) && PIN_EXISTS(Z3_STOP)
+    #elif Z_HOME_TO_MIN && !defined(Z3_MIN_PIN)
       #define Z3_MIN_PIN Z3_STOP_PIN
     #endif
   #endif
-  #if NUM_Z_STEPPERS >= 4
-    #if Z_HOME_TO_MAX && !defined(Z4_MAX_PIN) && PIN_EXISTS(Z4_STOP)
+  #if NUM_Z_STEPPERS >= 4 && PIN_EXISTS(Z4_STOP)
+    #if Z_HOME_TO_MAX && !defined(Z4_MAX_PIN)
       #define Z4_MAX_PIN Z4_STOP_PIN
-    #elif Z_HOME_TO_MIN && !defined(Z4_MIN_PIN) && PIN_EXISTS(Z4_STOP)
+    #elif Z_HOME_TO_MIN && !defined(Z4_MIN_PIN)
       #define Z4_MIN_PIN Z4_STOP_PIN
     #endif
   #endif
 #endif
 
 //
 // Default DOGLCD SPI delays
 //
 #if !IS_U8GLIB_ST7920
   #undef ST7920_DELAY_1

commit 467ab74523087a852ab50939d86a0ca0b78f17ad
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 26 14:56:23 2023 -0500

    🧑‍💻 Simplify endstops config (#25748)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 9d917cec29..daf6c03aa3 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -504,63 +504,63 @@
     #if X_HOME_TO_MIN
       #define X_MIN_PIN X_STOP_PIN
     #else
       #define X_MAX_PIN X_STOP_PIN
     #endif
   #elif X_HOME_TO_MIN
     #define X_STOP_PIN X_MIN_PIN
   #else
     #define X_STOP_PIN X_MAX_PIN
   #endif
-  #if !defined(X2_USE_ENDSTOP) && ENABLED(X_DUAL_ENDSTOPS) && PIN_EXISTS(X_STOP)
-    #define X2_USE_ENDSTOP _XSTOP_
+  #if !defined(X2_STOP_PIN) && ENABLED(X_DUAL_ENDSTOPS) && PIN_EXISTS(X_STOP)
+    #define X2_STOP_PIN X_STOP_PIN
   #endif
 #endif
 
 #if HAS_Y_AXIS
   #ifdef Y_STOP_PIN
     #if Y_HOME_TO_MIN
       #define Y_MIN_PIN Y_STOP_PIN
     #else
       #define Y_MAX_PIN Y_STOP_PIN
     #endif
   #elif Y_HOME_TO_MIN
     #define Y_STOP_PIN Y_MIN_PIN
   #else
     #define Y_STOP_PIN Y_MAX_PIN
   #endif
-  #if !defined(Y2_USE_ENDSTOP) && ENABLED(Y_DUAL_ENDSTOPS) && PIN_EXISTS(Y_STOP)
-    #define Y2_USE_ENDSTOP _YSTOP_
+  #if !defined(Y2_STOP_PIN) && ENABLED(Y_DUAL_ENDSTOPS) && PIN_EXISTS(Y_STOP)
+    #define Y2_STOP_PIN Y_STOP_PIN
   #endif
 #endif
 
 #if HAS_Z_AXIS
   #ifdef Z_STOP_PIN
     #if Z_HOME_TO_MIN
       #define Z_MIN_PIN Z_STOP_PIN
     #else
       #define Z_MAX_PIN Z_STOP_PIN
     #endif
   #elif Z_HOME_TO_MIN
     #define Z_STOP_PIN Z_MIN_PIN
   #else
     #define Z_STOP_PIN Z_MAX_PIN
   #endif
   #if ENABLED(Z_MULTI_ENDSTOPS) && PIN_EXISTS(Z_STOP)
-    #ifndef Z2_USE_ENDSTOP
-      #define Z2_USE_ENDSTOP _ZSTOP_
+    #ifndef Z2_STOP_PIN
+      #define Z2_STOP_PIN Z_STOP_PIN
     #endif
-    #if NUM_Z_STEPPERS >= 3 && !defined(Z3_USE_ENDSTOP)
-      #define Z3_USE_ENDSTOP _ZSTOP_
+    #if NUM_Z_STEPPERS >= 3 && !defined(Z3_STOP_PIN)
+      #define Z3_STOP_PIN Z_STOP_PIN
     #endif
-    #if NUM_Z_STEPPERS >= 4 && !defined(Z4_USE_ENDSTOP)
-      #define Z4_USE_ENDSTOP _ZSTOP_
+    #if NUM_Z_STEPPERS >= 4 && !defined(Z4_STOP_PIN)
+      #define Z4_STOP_PIN Z_STOP_PIN
     #endif
   #endif
 #endif
 
 #if HAS_I_AXIS
   #ifdef I_STOP_PIN
     #if I_HOME_TO_MIN
       #define I_MIN_PIN I_STOP_PIN
     #else
       #define I_MAX_PIN I_STOP_PIN
@@ -665,46 +665,55 @@
     #define LCD_PINS_D5 -1
   #endif
   #ifndef LCD_PINS_D6
     #define LCD_PINS_D6 -1
   #endif
   #ifndef LCD_PINS_D7
     #define LCD_PINS_D7 -1
   #endif
 #endif
 
+// Utility macros to define extra axis pins in terms of E pins
+#define __EPIN(p,q) E##p##_##q##_PIN
+#define _EPIN(p,q) __EPIN(p,q)
+
 /**
  * Auto-Assignment for Dual X, Dual Y, Multi-Z Steppers
  *
  * By default X2 is assigned to the next open E plug
  * on the board, then in order, Y2, Z2, Z3. These can be
  * overridden in Configuration.h or Configuration_adv.h.
  */
 
-#define __PEXI(p,q) PIN_EXISTS(E##p##_##q)
-#define _PEXI(p,q) __PEXI(p,q)
-#define __EPIN(p,q) E##p##_##q##_PIN
-#define _EPIN(p,q) __EPIN(p,q)
+#define _E_DIAG_EXISTS(p) PIN_EXISTS(E##p##_DIAG)
+#define E_DIAG_EXISTS(p) _E_DIAG_EXISTS(p)
+
+/**
+ * For endstop auto-assignment some pins files pre-assign MIN/MAX endstops
+ * to DIAG pins so those should be preferred over just using En_DIAG_PIN.
+ * DIAG_REMAPPED(X2, X_MIN) ... PIN_EXISTS(X_MIN) && E(X2_E_INDEX)_DIAG_PIN == X_MIN_PIN
+ */
 #define DIAG_REMAPPED(p,q) (PIN_EXISTS(q) && _EPIN(p##_E_INDEX, DIAG) == q##_PIN)
-#define _En_DIAG_(p) _E##p##_DIAG_
+#define _En_DIAG_PIN(p) E##p##_DIAG_PIN
 
 // The E0/E1 steppers are always used for Dual E
 #if ENABLED(E_DUAL_STEPPER_DRIVERS)
   #ifndef E1_STEP_PIN
     #error "No E1 stepper available for E_DUAL_STEPPER_DRIVERS!"
   #endif
   #define X2_E_INDEX INCREMENT(E_STEPPERS)
 #else
   #define X2_E_INDEX E_STEPPERS
 #endif
 
-#if HAS_X2_STEPPER && !defined(X2_DIAG_PIN) && !defined(X2_STEP_PIN) && !PIN_EXISTS(X2_CS_PIN)
+// X2 auto-assignment will use up an E stepper, but not if it's chained
+#if HAS_X2_STEPPER && !defined(X2_STEP_PIN) && !PIN_EXISTS(X2_CS_PIN)
   #define Y2_E_INDEX INCREMENT(X2_E_INDEX)
 #else
   #define Y2_E_INDEX X2_E_INDEX
 #endif
 
 // The X2 axis, if any, should be the next open extruder port
 #if HAS_X2_STEPPER
   #ifndef X2_STEP_PIN
     #define X2_STEP_PIN   _EPIN(X2_E_INDEX, STEP)
     #define X2_DIR_PIN    _EPIN(X2_E_INDEX, DIR)
@@ -744,54 +753,55 @@
       #define X2_SERIAL_TX_PIN _EPIN(X2_E_INDEX, SERIAL_TX)
     #endif
     #ifndef X2_SERIAL_RX_PIN
       #define X2_SERIAL_RX_PIN _EPIN(X2_E_INDEX, SERIAL_RX)
     #endif
   #endif
 
   //
   // Auto-assign pins for stallGuard sensorless homing
   //
-  #if !defined(X2_DIAG_PIN) && !defined(X2_USE_ENDSTOP) && defined(X2_STALL_SENSITIVITY) && ENABLED(X_DUAL_ENDSTOPS) && _PEXI(X2_E_INDEX, DIAG)
+  #if !defined(X2_STOP_PIN) && defined(X2_STALL_SENSITIVITY) && ENABLED(X_DUAL_ENDSTOPS) && E_DIAG_EXISTS(X2_E_INDEX)
     #if   DIAG_REMAPPED(X2, X_MIN)      // If already remapped in the pins file...
-      #define X2_USE_ENDSTOP _XMIN_
+      #define X2_STOP_PIN X_MIN_PIN
     #elif DIAG_REMAPPED(X2, Y_MIN)
-      #define X2_USE_ENDSTOP _YMIN_
+      #define X2_STOP_PIN Y_MIN_PIN
     #elif DIAG_REMAPPED(X2, Z_MIN)
-      #define X2_USE_ENDSTOP _ZMIN_
+      #define X2_STOP_PIN Z_MIN_PIN
     #elif DIAG_REMAPPED(X2, X_MAX)
-      #define X2_USE_ENDSTOP _XMAX_
+      #define X2_STOP_PIN X_MAX_PIN
     #elif DIAG_REMAPPED(X2, Y_MAX)
-      #define X2_USE_ENDSTOP _YMAX_
+      #define X2_STOP_PIN Y_MAX_PIN
     #elif DIAG_REMAPPED(X2, Z_MAX)
-      #define X2_USE_ENDSTOP _ZMAX_
+      #define X2_STOP_PIN Z_MAX_PIN
     #else                               // Otherwise pick the next free En_DIAG_PIN directly
-      #define X2_USE_ENDSTOP _En_DIAG_(X2_E_INDEX)
+      #define X2_STOP_PIN _En_DIAG_PIN(X2_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_X2_DIAG 1
   #endif
 #endif
 
 #ifndef X2_CS_PIN
   #define X2_CS_PIN  -1
 #endif
 #ifndef X2_MS1_PIN
   #define X2_MS1_PIN -1
 #endif
 #ifndef X2_MS2_PIN
   #define X2_MS2_PIN -1
 #endif
 #ifndef X2_MS3_PIN
   #define X2_MS3_PIN -1
 #endif
 
-#if HAS_DUAL_Y_STEPPERS && !defined(Y2_DIAG_PIN) && !defined(Y2_STEP_PIN) && !PIN_EXISTS(Y2_CS_PIN)
+// Y2 auto-assignment will use up an E stepper, but not if it's chained
+#if HAS_DUAL_Y_STEPPERS && !defined(Y2_STEP_PIN) && !PIN_EXISTS(Y2_CS_PIN)
   #define Z2_E_INDEX INCREMENT(Y2_E_INDEX)
 #else
   #define Z2_E_INDEX Y2_E_INDEX
 #endif
 
 // The Y2 axis, if any, should be the next open extruder port
 #if HAS_DUAL_Y_STEPPERS
   #ifndef Y2_STEP_PIN
     #define Y2_STEP_PIN   _EPIN(Y2_E_INDEX, STEP)
     #define Y2_DIR_PIN    _EPIN(Y2_E_INDEX, DIR)
@@ -828,54 +838,55 @@
   #endif
   #if AXIS_HAS_UART(Y2)
     #ifndef Y2_SERIAL_TX_PIN
       #define Y2_SERIAL_TX_PIN _EPIN(Y2_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Y2_SERIAL_RX_PIN
       #define Y2_SERIAL_RX_PIN _EPIN(Y2_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(Y2_DIAG_PIN) && !defined(Y2_USE_ENDSTOP) && defined(Y2_STALL_SENSITIVITY) && ENABLED(Y_DUAL_ENDSTOPS) && _PEXI(Y2_E_INDEX, DIAG)
+  #if !defined(Y2_STOP_PIN) && defined(Y2_STALL_SENSITIVITY) && ENABLED(Y_DUAL_ENDSTOPS) && E_DIAG_EXISTS(Y2_E_INDEX)
     #if   DIAG_REMAPPED(Y2, X_MIN)
-      #define Y2_USE_ENDSTOP _XMIN_
+      #define Y2_STOP_PIN X_MIN_PIN
     #elif DIAG_REMAPPED(Y2, Y_MIN)
-      #define Y2_USE_ENDSTOP _YMIN_
+      #define Y2_STOP_PIN Y_MIN_PIN
     #elif DIAG_REMAPPED(Y2, Z_MIN)
-      #define Y2_USE_ENDSTOP _ZMIN_
+      #define Y2_STOP_PIN Z_MIN_PIN
     #elif DIAG_REMAPPED(Y2, X_MAX)
-      #define Y2_USE_ENDSTOP _XMAX_
+      #define Y2_STOP_PIN X_MAX_PIN
     #elif DIAG_REMAPPED(Y2, Y_MAX)
-      #define Y2_USE_ENDSTOP _YMAX_
+      #define Y2_STOP_PIN Y_MAX_PIN
     #elif DIAG_REMAPPED(Y2, Z_MAX)
-      #define Y2_USE_ENDSTOP _ZMAX_
+      #define Y2_STOP_PIN Z_MAX_PIN
     #else
-      #define Y2_USE_ENDSTOP _En_DIAG_(Y2_E_INDEX)
+      #define Y2_STOP_PIN _En_DIAG_PIN(Y2_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_Y2_DIAG 1
   #endif
 #endif
 
 #ifndef Y2_CS_PIN
   #define Y2_CS_PIN  -1
 #endif
 #ifndef Y2_MS1_PIN
   #define Y2_MS1_PIN -1
 #endif
 #ifndef Y2_MS2_PIN
   #define Y2_MS2_PIN -1
 #endif
 #ifndef Y2_MS3_PIN
   #define Y2_MS3_PIN -1
 #endif
 
-#if NUM_Z_STEPPERS >= 2 && !defined(Z2_DIAG_PIN) && !defined(Z2_STEP_PIN) && !PIN_EXISTS(Z2_CS_PIN)
+// Z2 auto-assignment will use up an E stepper, but not if it's chained
+#if NUM_Z_STEPPERS >= 2 && !defined(Z2_STEP_PIN) && !PIN_EXISTS(Z2_CS_PIN)
   #define Z3_E_INDEX INCREMENT(Z2_E_INDEX)
 #else
   #define Z3_E_INDEX Z2_E_INDEX
 #endif
 
 // The Z2 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPERS >= 2
   #ifndef Z2_STEP_PIN
     #define Z2_STEP_PIN   _EPIN(Z2_E_INDEX, STEP)
     #define Z2_DIR_PIN    _EPIN(Z2_E_INDEX, DIR)
@@ -912,54 +923,55 @@
   #endif
   #if AXIS_HAS_UART(Z2)
     #ifndef Z2_SERIAL_TX_PIN
       #define Z2_SERIAL_TX_PIN _EPIN(Z2_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z2_SERIAL_RX_PIN
       #define Z2_SERIAL_RX_PIN _EPIN(Z2_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(Z2_DIAG_PIN) && !defined(Z2_USE_ENDSTOP) && defined(Z2_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && _PEXI(Z2_E_INDEX, DIAG)
+  #if !defined(Z2_STOP_PIN) && defined(Z2_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && E_DIAG_EXISTS(Z2_E_INDEX)
     #if   DIAG_REMAPPED(Z2, X_MIN)
-      #define Z2_USE_ENDSTOP _XMIN_
+      #define Z2_STOP_PIN X_MIN_PIN
     #elif DIAG_REMAPPED(Z2, Y_MIN)
-      #define Z2_USE_ENDSTOP _YMIN_
+      #define Z2_STOP_PIN Y_MIN_PIN
     #elif DIAG_REMAPPED(Z2, Z_MIN)
-      #define Z2_USE_ENDSTOP _ZMIN_
+      #define Z2_STOP_PIN Z_MIN_PIN
     #elif DIAG_REMAPPED(Z2, X_MAX)
-      #define Z2_USE_ENDSTOP _XMAX_
+      #define Z2_STOP_PIN X_MAX_PIN
     #elif DIAG_REMAPPED(Z2, Y_MAX)
-      #define Z2_USE_ENDSTOP _YMAX_
+      #define Z2_STOP_PIN Y_MAX_PIN
     #elif DIAG_REMAPPED(Z2, Z_MAX)
-      #define Z2_USE_ENDSTOP _ZMAX_
+      #define Z2_STOP_PIN Z_MAX_PIN
     #else
-      #define Z2_USE_ENDSTOP _En_DIAG_(Z2_E_INDEX)
+      #define Z2_STOP_PIN _En_DIAG_PIN(Z2_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_Z2_DIAG 1
   #endif
 #endif
 
 #ifndef Z2_CS_PIN
   #define Z2_CS_PIN  -1
 #endif
 #ifndef Z2_MS1_PIN
   #define Z2_MS1_PIN -1
 #endif
 #ifndef Z2_MS2_PIN
   #define Z2_MS2_PIN -1
 #endif
 #ifndef Z2_MS3_PIN
   #define Z2_MS3_PIN -1
 #endif
 
-#if NUM_Z_STEPPERS >= 3 && !defined(Z3_DIAG_PIN) && !defined(Z3_STEP_PIN) && !PIN_EXISTS(Z3_CS_PIN)
+// Z3 auto-assignment will use up an E stepper, but not if it's chained
+#if NUM_Z_STEPPERS >= 3 && !defined(Z3_STEP_PIN) && !PIN_EXISTS(Z3_CS_PIN)
   #define Z4_E_INDEX INCREMENT(Z3_E_INDEX)
 #else
   #define Z4_E_INDEX Z3_E_INDEX
 #endif
 
 // The Z3 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPERS >= 3
   #ifndef Z3_STEP_PIN
     #define Z3_STEP_PIN   _EPIN(Z3_E_INDEX, STEP)
     #define Z3_DIR_PIN    _EPIN(Z3_E_INDEX, DIR)
@@ -996,54 +1008,55 @@
   #endif
   #if AXIS_HAS_UART(Z3)
     #ifndef Z3_SERIAL_TX_PIN
       #define Z3_SERIAL_TX_PIN _EPIN(Z3_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z3_SERIAL_RX_PIN
       #define Z3_SERIAL_RX_PIN _EPIN(Z3_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(Z3_DIAG_PIN) && !defined(Z3_USE_ENDSTOP) && defined(Z3_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && _PEXI(Z3_E_INDEX, DIAG)
+  #if !defined(Z3_STOP_PIN) && defined(Z3_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && E_DIAG_EXISTS(Z3_E_INDEX)
     #if   DIAG_REMAPPED(Z3, X_MIN)
-      #define Z3_USE_ENDSTOP _XMIN_
+      #define Z3_STOP_PIN X_MIN_PIN
     #elif DIAG_REMAPPED(Z3, Y_MIN)
-      #define Z3_USE_ENDSTOP _YMIN_
+      #define Z3_STOP_PIN Y_MIN_PIN
     #elif DIAG_REMAPPED(Z3, Z_MIN)
-      #define Z3_USE_ENDSTOP _ZMIN_
+      #define Z3_STOP_PIN Z_MIN_PIN
     #elif DIAG_REMAPPED(Z3, X_MAX)
-      #define Z3_USE_ENDSTOP _XMAX_
+      #define Z3_STOP_PIN X_MAX_PIN
     #elif DIAG_REMAPPED(Z3, Y_MAX)
-      #define Z3_USE_ENDSTOP _YMAX_
+      #define Z3_STOP_PIN Y_MAX_PIN
     #elif DIAG_REMAPPED(Z3, Z_MAX)
-      #define Z3_USE_ENDSTOP _ZMAX_
+      #define Z3_STOP_PIN Z_MAX_PIN
     #else
-      #define Z3_USE_ENDSTOP _En_DIAG_(Z3_E_INDEX)
+      #define Z3_STOP_PIN _En_DIAG_PIN(Z3_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_Z3_DIAG 1
   #endif
 #endif
 
 #ifndef Z3_CS_PIN
   #define Z3_CS_PIN  -1
 #endif
 #ifndef Z3_MS1_PIN
   #define Z3_MS1_PIN -1
 #endif
 #ifndef Z3_MS2_PIN
   #define Z3_MS2_PIN -1
 #endif
 #ifndef Z3_MS3_PIN
   #define Z3_MS3_PIN -1
 #endif
 
-#if NUM_Z_STEPPERS >= 4 && !defined(Z4_DIAG_PIN) && !defined(Z4_STEP_PIN) && !PIN_EXISTS(Z4_CS_PIN)
+// Z4 auto-assignment will use up an E stepper, but not if it's chained
+#if NUM_Z_STEPPERS >= 4 && !defined(Z4_STEP_PIN) && !PIN_EXISTS(Z4_CS_PIN)
   #define I_E_INDEX INCREMENT(Z4_E_INDEX)
 #else
   #define I_E_INDEX Z4_E_INDEX
 #endif
 
 // The Z4 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPERS >= 4
   #ifndef Z4_STEP_PIN
     #define Z4_STEP_PIN   _EPIN(Z4_E_INDEX, STEP)
     #define Z4_DIR_PIN    _EPIN(Z4_E_INDEX, DIR)
@@ -1080,54 +1093,55 @@
   #endif
   #if AXIS_HAS_UART(Z4)
     #ifndef Z4_SERIAL_TX_PIN
       #define Z4_SERIAL_TX_PIN _EPIN(Z4_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z4_SERIAL_RX_PIN
       #define Z4_SERIAL_RX_PIN _EPIN(Z4_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(Z4_DIAG_PIN) && !defined(Z4_USE_ENDSTOP) && defined(Z4_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && _PEXI(Z4_E_INDEX, DIAG)
+  #if !defined(Z4_STOP_PIN) && defined(Z4_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && E_DIAG_EXISTS(Z4_E_INDEX)
     #if   DIAG_REMAPPED(Z4, X_MIN)
-      #define Z4_USE_ENDSTOP _XMIN_
+      #define Z4_STOP_PIN X_MIN_PIN
     #elif DIAG_REMAPPED(Z4, Y_MIN)
-      #define Z4_USE_ENDSTOP _YMIN_
+      #define Z4_STOP_PIN Y_MIN_PIN
     #elif DIAG_REMAPPED(Z4, Z_MIN)
-      #define Z4_USE_ENDSTOP _ZMIN_
+      #define Z4_STOP_PIN Z_MIN_PIN
     #elif DIAG_REMAPPED(Z4, X_MAX)
-      #define Z4_USE_ENDSTOP _XMAX_
+      #define Z4_STOP_PIN X_MAX_PIN
     #elif DIAG_REMAPPED(Z4, Y_MAX)
-      #define Z4_USE_ENDSTOP _YMAX_
+      #define Z4_STOP_PIN Y_MAX_PIN
     #elif DIAG_REMAPPED(Z4, Z_MAX)
-      #define Z4_USE_ENDSTOP _ZMAX_
+      #define Z4_STOP_PIN Z_MAX_PIN
     #else
-      #define Z4_USE_ENDSTOP _En_DIAG_(Z4_E_INDEX)
+      #define Z4_STOP_PIN _En_DIAG_PIN(Z4_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_Z4_DIAG 1
   #endif
 #endif
 
 #ifndef Z4_CS_PIN
   #define Z4_CS_PIN  -1
 #endif
 #ifndef Z4_MS1_PIN
   #define Z4_MS1_PIN -1
 #endif
 #ifndef Z4_MS2_PIN
   #define Z4_MS2_PIN -1
 #endif
 #ifndef Z4_MS3_PIN
   #define Z4_MS3_PIN -1
 #endif
 
-#if HAS_I_AXIS && !defined(I_DIAG_PIN) && !defined(I_STEP_PIN) && !PIN_EXISTS(I_CS_PIN)
+// I auto-assignment will use up an E stepper, but not if it's chained
+#if HAS_I_AXIS && !defined(I_STEP_PIN) && !PIN_EXISTS(I_CS_PIN)
   #define J_E_INDEX INCREMENT(I_E_INDEX)
 #else
   #define J_E_INDEX I_E_INDEX
 #endif
 
 // The I axis, if any, should be the next open extruder port
 #if HAS_I_AXIS
   #ifndef I_STEP_PIN
     #define I_STEP_PIN   _EPIN(I_E_INDEX, STEP)
     #define I_DIR_PIN    _EPIN(I_E_INDEX, DIR)
@@ -1164,54 +1178,55 @@
   #endif
   #if AXIS_HAS_UART(I)
     #ifndef I_SERIAL_TX_PIN
       #define I_SERIAL_TX_PIN _EPIN(I_E_INDEX, SERIAL_TX)
     #endif
     #ifndef I_SERIAL_RX_PIN
       #define I_SERIAL_RX_PIN _EPIN(I_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(I_DIAG_PIN) && !defined(I_USE_ENDSTOP) && defined(I_STALL_SENSITIVITY) && _PEXI(I_E_INDEX, DIAG)
+  #if !defined(I_STOP_PIN) && defined(I_STALL_SENSITIVITY) && E_DIAG_EXISTS(I_E_INDEX)
     #if   DIAG_REMAPPED(I, X_MIN)
-      #define I_USE_ENDSTOP _XMIN_
+      #define I_STOP_PIN X_MIN_PIN
     #elif DIAG_REMAPPED(I, Y_MIN)
-      #define I_USE_ENDSTOP _YMIN_
+      #define I_STOP_PIN Y_MIN_PIN
     #elif DIAG_REMAPPED(I, Z_MIN)
-      #define I_USE_ENDSTOP _ZMIN_
+      #define I_STOP_PIN Z_MIN_PIN
     #elif DIAG_REMAPPED(I, X_MAX)
-      #define I_USE_ENDSTOP _XMAX_
+      #define I_STOP_PIN X_MAX_PIN
     #elif DIAG_REMAPPED(I, Y_MAX)
-      #define I_USE_ENDSTOP _YMAX_
+      #define I_STOP_PIN Y_MAX_PIN
     #elif DIAG_REMAPPED(I, Z_MAX)
-      #define I_USE_ENDSTOP _ZMAX_
+      #define I_STOP_PIN Z_MAX_PIN
     #else
-      #define I_USE_ENDSTOP _En_DIAG_(I_E_INDEX)
+      #define I_STOP_PIN _En_DIAG_PIN(I_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_I_DIAG 1
   #endif
 #endif
 
 #ifndef I_CS_PIN
   #define I_CS_PIN  -1
 #endif
 #ifndef I_MS1_PIN
   #define I_MS1_PIN -1
 #endif
 #ifndef I_MS2_PIN
   #define I_MS2_PIN -1
 #endif
 #ifndef I_MS3_PIN
   #define I_MS3_PIN -1
 #endif
 
-#if HAS_J_AXIS && !defined(J_DIAG_PIN) && !defined(J_STEP_PIN) && !PIN_EXISTS(J_CS_PIN)
+// J auto-assignment will use up an E stepper, but not if it's chained
+#if HAS_J_AXIS && !defined(J_STEP_PIN) && !PIN_EXISTS(J_CS_PIN)
   #define K_E_INDEX INCREMENT(J_E_INDEX)
 #else
   #define K_E_INDEX J_E_INDEX
 #endif
 
 // The J axis, if any, should be the next open extruder port
 #if HAS_J_AXIS
   #ifndef J_STEP_PIN
     #define J_STEP_PIN   _EPIN(J_E_INDEX, STEP)
     #define J_DIR_PIN    _EPIN(J_E_INDEX, DIR)
@@ -1248,54 +1263,55 @@
   #endif
   #if AXIS_HAS_UART(J)
     #ifndef J_SERIAL_TX_PIN
       #define J_SERIAL_TX_PIN _EPIN(J_E_INDEX, SERIAL_TX)
     #endif
     #ifndef J_SERIAL_RX_PIN
       #define J_SERIAL_RX_PIN _EPIN(J_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(J_DIAG_PIN) && !defined(J_USE_ENDSTOP) && defined(J_STALL_SENSITIVITY) && _PEXI(J_E_INDEX, DIAG)
+  #if !defined(J_STOP_PIN) && defined(J_STALL_SENSITIVITY) && E_DIAG_EXISTS(J_E_INDEX)
     #if   DIAG_REMAPPED(J, X_MIN)
-      #define J_USE_ENDSTOP _XMIN_
+      #define J_STOP_PIN X_MIN_PIN
     #elif DIAG_REMAPPED(J, Y_MIN)
-      #define J_USE_ENDSTOP _YMIN_
+      #define J_STOP_PIN Y_MIN_PIN
     #elif DIAG_REMAPPED(J, Z_MIN)
-      #define J_USE_ENDSTOP _ZMIN_
+      #define J_STOP_PIN Z_MIN_PIN
     #elif DIAG_REMAPPED(J, X_MAX)
-      #define J_USE_ENDSTOP _XMAX_
+      #define J_STOP_PIN X_MAX_PIN
     #elif DIAG_REMAPPED(J, Y_MAX)
-      #define J_USE_ENDSTOP _YMAX_
+      #define J_STOP_PIN Y_MAX_PIN
     #elif DIAG_REMAPPED(I, Z_MAX)
-      #define J_USE_ENDSTOP _ZMAX_
+      #define J_STOP_PIN Z_MAX_PIN
     #else
-      #define J_USE_ENDSTOP _En_DIAG_(J_E_INDEX)
+      #define J_STOP_PIN _En_DIAG_PIN(J_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_J_DIAG 1
   #endif
 #endif
 
 #ifndef J_CS_PIN
   #define J_CS_PIN  -1
 #endif
 #ifndef J_MS1_PIN
   #define J_MS1_PIN -1
 #endif
 #ifndef J_MS2_PIN
   #define J_MS2_PIN -1
 #endif
 #ifndef J_MS3_PIN
   #define J_MS3_PIN -1
 #endif
 
-#if HAS_K_AXIS && !defined(K_DIAG_PIN) && !defined(K_STEP_PIN) && !PIN_EXISTS(K_CS_PIN)
+// K auto-assignment will use up an E stepper, but not if it's chained
+#if HAS_K_AXIS && !defined(K_STEP_PIN) && !PIN_EXISTS(K_CS_PIN)
   #define U_E_INDEX INCREMENT(K_E_INDEX)
 #else
   #define U_E_INDEX K_E_INDEX
 #endif
 
 // The K axis, if any, should be the next open extruder port
 #if HAS_K_AXIS
   #ifndef K_STEP_PIN
     #define K_STEP_PIN   _EPIN(K_E_INDEX, STEP)
     #define K_DIR_PIN    _EPIN(K_E_INDEX, DIR)
@@ -1332,54 +1348,55 @@
   #endif
   #if AXIS_HAS_UART(K)
     #ifndef K_SERIAL_TX_PIN
       #define K_SERIAL_TX_PIN _EPIN(K_E_INDEX, SERIAL_TX)
     #endif
     #ifndef K_SERIAL_RX_PIN
       #define K_SERIAL_RX_PIN _EPIN(K_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(K_DIAG_PIN) && !defined(K_USE_ENDSTOP) && defined(K_STALL_SENSITIVITY) && _PEXI(K_E_INDEX, DIAG)
+  #if !defined(K_STOP_PIN) && defined(K_STALL_SENSITIVITY) && E_DIAG_EXISTS(K_E_INDEX)
     #if   DIAG_REMAPPED(K, X_MIN)
-      #define K_USE_ENDSTOP _XMIN_
+      #define K_STOP_PIN X_MIN_PIN
     #elif DIAG_REMAPPED(K, Y_MIN)
-      #define K_USE_ENDSTOP _YMIN_
+      #define K_STOP_PIN Y_MIN_PIN
     #elif DIAG_REMAPPED(K, Z_MIN)
-      #define K_USE_ENDSTOP _ZMIN_
+      #define K_STOP_PIN Z_MIN_PIN
     #elif DIAG_REMAPPED(K, X_MAX)
-      #define K_USE_ENDSTOP _XMAX_
+      #define K_STOP_PIN X_MAX_PIN
     #elif DIAG_REMAPPED(K, Y_MAX)
-      #define K_USE_ENDSTOP _YMAX_
+      #define K_STOP_PIN Y_MAX_PIN
     #elif DIAG_REMAPPED(K, Z_MAX)
-      #define K_USE_ENDSTOP _ZMAX_
+      #define K_STOP_PIN Z_MAX_PIN
     #else
-      #define K_USE_ENDSTOP _En_DIAG_(K_E_INDEX)
+      #define K_STOP_PIN _En_DIAG_PIN(K_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_K_DIAG 1
   #endif
 #endif
 
 #ifndef K_CS_PIN
   #define K_CS_PIN  -1
 #endif
 #ifndef K_MS1_PIN
   #define K_MS1_PIN -1
 #endif
 #ifndef K_MS2_PIN
   #define K_MS2_PIN -1
 #endif
 #ifndef K_MS3_PIN
   #define K_MS3_PIN -1
 #endif
 
-#if HAS_U_AXIS && !defined(U_DIAG_PIN) && !defined(U_STEP_PIN) && !PIN_EXISTS(U_CS_PIN)
+// U auto-assignment will use up an E stepper, but not if it's chained
+#if HAS_U_AXIS && !defined(U_STEP_PIN) && !PIN_EXISTS(U_CS_PIN)
   #define V_E_INDEX INCREMENT(U_E_INDEX)
 #else
   #define V_E_INDEX U_E_INDEX
 #endif
 
 // The U axis, if any, should be the next open extruder port
 #if HAS_U_AXIS
   #ifndef U_STEP_PIN
     #define U_STEP_PIN   _EPIN(U_E_INDEX, STEP)
     #define U_DIR_PIN    _EPIN(U_E_INDEX, DIR)
@@ -1416,54 +1433,55 @@
   #endif
   #if AXIS_HAS_UART(U)
     #ifndef U_SERIAL_TX_PIN
       #define U_SERIAL_TX_PIN _EPIN(U_E_INDEX, SERIAL_TX)
     #endif
     #ifndef U_SERIAL_RX_PIN
       #define U_SERIAL_RX_PIN _EPIN(U_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(U_DIAG_PIN) && !defined(U_USE_ENDSTOP) && defined(U_STALL_SENSITIVITY) && _PEXI(U_E_INDEX, DIAG)
+  #if !defined(U_STOP_PIN) && defined(U_STALL_SENSITIVITY) && E_DIAG_EXISTS(U_E_INDEX)
     #if   DIAG_REMAPPED(U, X_MIN)
-      #define U_USE_ENDSTOP _XMIN_
+      #define U_STOP_PIN X_MIN_PIN
     #elif DIAG_REMAPPED(U, Y_MIN)
-      #define U_USE_ENDSTOP _YMIN_
+      #define U_STOP_PIN Y_MIN_PIN
     #elif DIAG_REMAPPED(U, Z_MIN)
-      #define U_USE_ENDSTOP _ZMIN_
+      #define U_STOP_PIN Z_MIN_PIN
     #elif DIAG_REMAPPED(U, X_MAX)
-      #define U_USE_ENDSTOP _XMAX_
+      #define U_STOP_PIN X_MAX_PIN
     #elif DIAG_REMAPPED(U, Y_MAX)
-      #define U_USE_ENDSTOP _YMAX_
+      #define U_STOP_PIN Y_MAX_PIN
     #elif DIAG_REMAPPED(U, Z_MAX)
-      #define U_USE_ENDSTOP _ZMAX_
+      #define U_STOP_PIN Z_MAX_PIN
     #else
-      #define U_USE_ENDSTOP _En_DIAG_(U_E_INDEX)
+      #define U_STOP_PIN _En_DIAG_PIN(U_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_U_DIAG 1
   #endif
 #endif
 
 #ifndef U_CS_PIN
   #define U_CS_PIN  -1
 #endif
 #ifndef U_MS1_PIN
   #define U_MS1_PIN -1
 #endif
 #ifndef U_MS2_PIN
   #define U_MS2_PIN -1
 #endif
 #ifndef U_MS3_PIN
   #define U_MS3_PIN -1
 #endif
 
-#if HAS_V_AXIS && !defined(V_DIAG_PIN) && !defined(V_STEP_PIN) && !PIN_EXISTS(V_CS_PIN)
+// V auto-assignment will use up an E stepper, but not if it's chained
+#if HAS_V_AXIS && !defined(V_STEP_PIN) && !PIN_EXISTS(V_CS_PIN)
   #define W_E_INDEX INCREMENT(V_E_INDEX)
 #else
   #define W_E_INDEX V_E_INDEX
 #endif
 
 // The V axis, if any, should be the next open extruder port
 #if HAS_V_AXIS
   #ifndef V_STEP_PIN
     #define V_STEP_PIN   _EPIN(V_E_INDEX, STEP)
     #define V_DIR_PIN    _EPIN(V_E_INDEX, DIR)
@@ -1500,35 +1518,35 @@
   #endif
   #if AXIS_HAS_UART(V)
     #ifndef V_SERIAL_TX_PIN
       #define V_SERIAL_TX_PIN _EPIN(V_E_INDEX, SERIAL_TX)
     #endif
     #ifndef V_SERIAL_RX_PIN
       #define V_SERIAL_RX_PIN _EPIN(V_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(V_DIAG_PIN) && !defined(V_USE_ENDSTOP) && defined(V_STALL_SENSITIVITY) && _PEXI(V_E_INDEX, DIAG)
+  #if !defined(V_STOP_PIN) && defined(V_STALL_SENSITIVITY) && E_DIAG_EXISTS(V_E_INDEX)
     #if   DIAG_REMAPPED(V, X_MIN)
-      #define V_USE_ENDSTOP _XMIN_
+      #define V_STOP_PIN X_MIN_PIN
     #elif DIAG_REMAPPED(V, Y_MIN)
-      #define V_USE_ENDSTOP _YMIN_
+      #define V_STOP_PIN Y_MIN_PIN
     #elif DIAG_REMAPPED(V, Z_MIN)
-      #define V_USE_ENDSTOP _ZMIN_
+      #define V_STOP_PIN Z_MIN_PIN
     #elif DIAG_REMAPPED(V, X_MAX)
-      #define V_USE_ENDSTOP _XMAX_
+      #define V_STOP_PIN X_MAX_PIN
     #elif DIAG_REMAPPED(V, Y_MAX)
-      #define V_USE_ENDSTOP _YMAX_
+      #define V_STOP_PIN Y_MAX_PIN
     #elif DIAG_REMAPPED(V, Z_MAX)
-      #define V_USE_ENDSTOP _ZMAX_
+      #define V_STOP_PIN Z_MAX_PIN
     #else
-      #define V_USE_ENDSTOP _En_DIAG_(V_E_INDEX)
+      #define V_STOP_PIN _En_DIAG_PIN(V_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_V_DIAG 1
   #endif
 #endif
 
 #ifndef V_CS_PIN
   #define V_CS_PIN  -1
 #endif
 #ifndef V_MS1_PIN
   #define V_MS1_PIN -1
@@ -1578,717 +1596,99 @@
   #endif
   #if AXIS_HAS_UART(W)
     #ifndef W_SERIAL_TX_PIN
       #define W_SERIAL_TX_PIN _EPIN(W_E_INDEX, SERIAL_TX)
     #endif
     #ifndef W_SERIAL_RX_PIN
       #define W_SERIAL_RX_PIN _EPIN(W_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(W_DIAG_PIN) && !defined(W_USE_ENDSTOP) && defined(W_STALL_SENSITIVITY) && _PEXI(W_E_INDEX, DIAG)
+  #if !defined(W_STOP_PIN) && defined(W_STALL_SENSITIVITY) && E_DIAG_EXISTS(W_E_INDEX)
     #if   DIAG_REMAPPED(W, X_MIN)
-      #define W_USE_ENDSTOP _XMIN_
+      #define W_STOP_PIN X_MIN_PIN
     #elif DIAG_REMAPPED(W, Y_MIN)
-      #define W_USE_ENDSTOP _YMIN_
+      #define W_STOP_PIN Y_MIN_PIN
     #elif DIAG_REMAPPED(W, Z_MIN)
-      #define W_USE_ENDSTOP _ZMIN_
+      #define W_STOP_PIN Z_MIN_PIN
     #elif DIAG_REMAPPED(W, X_MAX)
-      #define W_USE_ENDSTOP _XMAX_
+      #define W_STOP_PIN X_MAX_PIN
     #elif DIAG_REMAPPED(W, Y_MAX)
-      #define W_USE_ENDSTOP _YMAX_
+      #define W_STOP_PIN Y_MAX_PIN
     #elif DIAG_REMAPPED(W, Z_MAX)
-      #define W_USE_ENDSTOP _ZMAX_
+      #define W_STOP_PIN Z_MAX_PIN
     #else
-      #define W_USE_ENDSTOP _En_DIAG_(W_E_INDEX)
+      #define W_STOP_PIN _En_DIAG_PIN(W_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_W_DIAG 1
   #endif
 #endif
 
 #ifndef W_CS_PIN
   #define W_CS_PIN  -1
 #endif
 #ifndef W_MS1_PIN
   #define W_MS1_PIN -1
 #endif
 #ifndef W_MS2_PIN
   #define W_MS2_PIN -1
 #endif
 #ifndef W_MS3_PIN
   #define W_MS3_PIN -1
 #endif
 
-//
-// Disable unused endstop / probe pins
-//
-#define _STOP_IN_USE(N) (X2_USE_ENDSTOP == N || Y2_USE_ENDSTOP == N || Z2_USE_ENDSTOP == N || Z3_USE_ENDSTOP == N || Z4_USE_ENDSTOP == N)
-#if !defined(USE_XMAX_PLUG) && _STOP_IN_USE(_XMAX_)
-  #define USE_XMAX_PLUG
-#endif
-#if !defined(USE_YMAX_PLUG) && _STOP_IN_USE(_YMAX_)
-  #define USE_YMAX_PLUG
-#endif
-#if !defined(USE_ZMAX_PLUG) && _STOP_IN_USE(_ZMAX_)
-  #define USE_ZMAX_PLUG
-#endif
-#if !defined(USE_IMAX_PLUG) && _STOP_IN_USE(_IMAX_)
-  #define USE_IMAX_PLUG
-#endif
-#if !defined(USE_JMAX_PLUG) && _STOP_IN_USE(_JMAX_)
-  #define USE_JMAX_PLUG
-#endif
-#if !defined(USE_KMAX_PLUG) && _STOP_IN_USE(_KMAX_)
-  #define USE_KMAX_PLUG
-#endif
-#if !defined(USE_UMAX_PLUG) && _STOP_IN_USE(_UMAX_)
-  #define USE_UMAX_PLUG
-#endif
-#if !defined(USE_VMAX_PLUG) && _STOP_IN_USE(_VMAX_)
-  #define USE_VMAX_PLUG
-#endif
-#if !defined(USE_WMAX_PLUG) && _STOP_IN_USE(_WMAX_)
-  #define USE_WMAX_PLUG
-#endif
-#if !defined(USE_XMIN_PLUG) && _STOP_IN_USE(_XMIN_)
-  #define USE_XMIN_PLUG
-#endif
-#if !defined(USE_YMIN_PLUG) && _STOP_IN_USE(_YMIN_)
-  #define USE_YMIN_PLUG
-#endif
-#if !defined(USE_ZMIN_PLUG) && _STOP_IN_USE(_ZMIN_)
-  #define USE_ZMIN_PLUG
-#endif
-#if !defined(USE_IMIN_PLUG) && _STOP_IN_USE(_IMIN_)
-  #define USE_IMIN_PLUG
-#endif
-#if !defined(USE_JMIN_PLUG) && _STOP_IN_USE(_JMIN_)
-  #define USE_JMIN_PLUG
-#endif
-#if !defined(USE_KMIN_PLUG) && _STOP_IN_USE(_KMIN_)
-  #define USE_KMIN_PLUG
-#endif
-#if !defined(USE_UMIN_PLUG) && _STOP_IN_USE(_UMIN_)
-  #define USE_UMIN_PLUG
-#endif
-#if !defined(USE_VMIN_PLUG) && _STOP_IN_USE(_VMIN_)
-  #define USE_VMIN_PLUG
-#endif
-#if !defined(USE_WMIN_PLUG) && _STOP_IN_USE(_WMIN_)
-  #define USE_WMIN_PLUG
-#endif
-#undef _STOP_IN_USE
-#if !USES_Z_MIN_PROBE_PIN
-  #undef Z_MIN_PROBE_PIN
-  #define Z_MIN_PROBE_PIN    -1
-#endif
-#if DISABLED(USE_XMIN_PLUG)
-  #undef X_MIN_PIN
-  #define X_MIN_PIN          -1
-#endif
-#if DISABLED(USE_XMAX_PLUG)
-  #undef X_MAX_PIN
-  #define X_MAX_PIN          -1
-#endif
-#if NONE(USE_XMIN_PLUG, USE_XMAX_PLUG)
-  #undef X_STOP_PIN
-#endif
-#if DISABLED(USE_YMIN_PLUG)
-  #undef Y_MIN_PIN
-  #define Y_MIN_PIN          -1
-#endif
-#if DISABLED(USE_YMAX_PLUG)
-  #undef Y_MAX_PIN
-  #define Y_MAX_PIN          -1
-#endif
-#if NONE(USE_YMIN_PLUG, USE_YMAX_PLUG)
-  #undef Y_STOP_PIN
-#endif
-#if DISABLED(USE_ZMIN_PLUG)
-  #undef Z_MIN_PIN
-  #define Z_MIN_PIN          -1
-#endif
-#if DISABLED(USE_ZMAX_PLUG)
-  #undef Z_MAX_PIN
-  #define Z_MAX_PIN          -1
-#endif
-#if NONE(USE_ZMIN_PLUG, USE_ZMAX_PLUG)
-  #undef Z_STOP_PIN
-#endif
-#if DISABLED(USE_IMIN_PLUG)
-  #undef I_MIN_PIN
-  #define I_MIN_PIN          -1
-#endif
-#if DISABLED(USE_IMAX_PLUG)
-  #undef I_MAX_PIN
-  #define I_MAX_PIN          -1
-#endif
-#if NONE(USE_IMIN_PLUG, USE_IMAX_PLUG)
-  #undef I_STOP_PIN
-#endif
-#if DISABLED(USE_JMIN_PLUG)
-  #undef J_MIN_PIN
-  #define J_MIN_PIN          -1
-#endif
-#if DISABLED(USE_JMAX_PLUG)
-  #undef J_MAX_PIN
-  #define J_MAX_PIN          -1
-#endif
-#if NONE(USE_JMIN_PLUG, USE_JMAX_PLUG)
-  #undef J_STOP_PIN
-#endif
-#if DISABLED(USE_KMIN_PLUG)
-  #undef K_MIN_PIN
-  #define K_MIN_PIN          -1
-#endif
-#if DISABLED(USE_KMAX_PLUG)
-  #undef K_MAX_PIN
-  #define K_MAX_PIN          -1
-#endif
-#if NONE(USE_KMIN_PLUG, USE_KMAX_PLUG)
-  #undef K_STOP_PIN
-#endif
-#if DISABLED(USE_UMIN_PLUG)
-  #undef U_MIN_PIN
-  #define U_MIN_PIN          -1
-#endif
-#if DISABLED(USE_UMAX_PLUG)
-  #undef U_MAX_PIN
-  #define U_MAX_PIN          -1
-#endif
-#if NONE(USE_UMIN_PLUG, USE_UMAX_PLUG)
-  #undef U_STOP_PIN
-#endif
-#if DISABLED(USE_VMIN_PLUG)
-  #undef V_MIN_PIN
-  #define V_MIN_PIN          -1
-#endif
-#if DISABLED(USE_VMAX_PLUG)
-  #undef V_MAX_PIN
-  #define V_MAX_PIN          -1
-#endif
-#if NONE(USE_VMIN_PLUG, USE_VMAX_PLUG)
-  #undef V_STOP_PIN
-#endif
-#if DISABLED(USE_WMIN_PLUG)
-  #undef W_MIN_PIN
-  #define W_MIN_PIN          -1
-#endif
-#if DISABLED(USE_WMAX_PLUG)
-  #undef W_MAX_PIN
-  #define W_MAX_PIN          -1
-#endif
-#if NONE(USE_WMIN_PLUG, USE_WMAX_PLUG)
-  #undef W_STOP_PIN
-#endif
-
-#if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MAX
-  #undef X2_MIN_PIN
-#endif
-#if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MIN
-  #undef X2_MAX_PIN
-#endif
-#if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MAX
-  #undef Y2_MIN_PIN
-#endif
-#if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MIN
-  #undef Y2_MAX_PIN
-#endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_TO_MAX
-  #undef Z2_MIN_PIN
-#endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_TO_MIN
-  #undef Z2_MAX_PIN
-#endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPERS < 3 || Z_HOME_TO_MAX
-  #undef Z3_MIN_PIN
-#endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPERS < 3 || Z_HOME_TO_MIN
-  #undef Z3_MAX_PIN
-#endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPERS < 4 || Z_HOME_TO_MAX
-  #undef Z4_MIN_PIN
-#endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPERS < 4 || Z_HOME_TO_MIN
-  #undef Z4_MAX_PIN
-#endif
-
 /**
  * X_DUAL_ENDSTOPS endstop reassignment
  */
 #if ENABLED(X_DUAL_ENDSTOPS)
-  #if X_HOME_TO_MAX && !defined(X2_MAX_PIN)
-    #if PIN_EXISTS(X2_STOP)
-      #define X2_MAX_PIN X2_STOP_PIN
-    #elif X2_USE_ENDSTOP == _XMIN_
-      #define X2_MAX_PIN X_MIN_PIN
-    #elif X2_USE_ENDSTOP == _XMAX_
-      #define X2_MAX_PIN X_MAX_PIN
-    #elif X2_USE_ENDSTOP == _XSTOP_
-      #define X2_MAX_PIN X_STOP_PIN
-    #elif X2_USE_ENDSTOP == _YMIN_
-      #define X2_MAX_PIN Y_MIN_PIN
-    #elif X2_USE_ENDSTOP == _YMAX_
-      #define X2_MAX_PIN Y_MAX_PIN
-    #elif X2_USE_ENDSTOP == _YSTOP_
-      #define X2_MAX_PIN Y_STOP_PIN
-    #elif X2_USE_ENDSTOP == _ZMIN_
-      #define X2_MAX_PIN Z_MIN_PIN
-    #elif X2_USE_ENDSTOP == _ZMAX_
-      #define X2_MAX_PIN Z_MAX_PIN
-    #elif X2_USE_ENDSTOP == _ZSTOP_
-      #define X2_MAX_PIN Z_STOP_PIN
-    #elif X2_USE_ENDSTOP == _XDIAG_
-      #define X2_MAX_PIN X_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _YDIAG_
-      #define X2_MAX_PIN Y_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _ZDIAG_
-      #define X2_MAX_PIN Z_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E0DIAG_
-      #define X2_MAX_PIN E0_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E1DIAG_
-      #define X2_MAX_PIN E1_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E2DIAG_
-      #define X2_MAX_PIN E2_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E3DIAG_
-      #define X2_MAX_PIN E3_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E4DIAG_
-      #define X2_MAX_PIN E4_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E5DIAG_
-      #define X2_MAX_PIN E5_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E6DIAG_
-      #define X2_MAX_PIN E6_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E7DIAG_
-      #define X2_MAX_PIN E7_DIAG_PIN
-    #endif
-  #elif X_HOME_TO_MIN && !defined(X2_MIN_PIN)
-    #if PIN_EXISTS(X2_STOP)
-      #define X2_MIN_PIN X2_STOP_PIN
-    #elif X2_USE_ENDSTOP == _XMIN_
-      #define X2_MIN_PIN X_MIN_PIN
-    #elif X2_USE_ENDSTOP == _XMAX_
-      #define X2_MIN_PIN X_MAX_PIN
-    #elif X2_USE_ENDSTOP == _XSTOP_
-      #define X2_MIN_PIN X_STOP_PIN
-    #elif X2_USE_ENDSTOP == _YMIN_
-      #define X2_MIN_PIN Y_MIN_PIN
-    #elif X2_USE_ENDSTOP == _YMAX_
-      #define X2_MIN_PIN Y_MAX_PIN
-    #elif X2_USE_ENDSTOP == _YSTOP_
-      #define X2_MIN_PIN Y_STOP_PIN
-    #elif X2_USE_ENDSTOP == _ZMIN_
-      #define X2_MIN_PIN Z_MIN_PIN
-    #elif X2_USE_ENDSTOP == _ZMAX_
-      #define X2_MIN_PIN Z_MAX_PIN
-    #elif X2_USE_ENDSTOP == _ZSTOP_
-      #define X2_MIN_PIN Z_STOP_PIN
-    #elif X2_USE_ENDSTOP == _XDIAG_
-      #define X2_MIN_PIN X_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _YDIAG_
-      #define X2_MIN_PIN Y_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _ZDIAG_
-      #define X2_MIN_PIN Z_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E0DIAG_
-      #define X2_MIN_PIN E0_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E1DIAG_
-      #define X2_MIN_PIN E1_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E2DIAG_
-      #define X2_MIN_PIN E2_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E3DIAG_
-      #define X2_MIN_PIN E3_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E4DIAG_
-      #define X2_MIN_PIN E4_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E5DIAG_
-      #define X2_MIN_PIN E5_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E6DIAG_
-      #define X2_MIN_PIN E6_DIAG_PIN
-    #elif X2_USE_ENDSTOP == _E7DIAG_
-      #define X2_MIN_PIN E7_DIAG_PIN
-    #endif
-  #endif
-#endif // X_DUAL_ENDSTOPS
+  #if X_HOME_TO_MAX && !defined(X2_MAX_PIN) && PIN_EXISTS(X2_STOP)
+    #define X2_MAX_PIN X2_STOP_PIN
+  #elif X_HOME_TO_MIN && !defined(X2_MIN_PIN) && PIN_EXISTS(X2_STOP)
+    #define X2_MIN_PIN X2_STOP_PIN
+  #endif
+#endif
 
 /**
  * Y_DUAL_ENDSTOPS endstop reassignment
  */
 #if ENABLED(Y_DUAL_ENDSTOPS)
-  #if Y_HOME_TO_MAX && !defined(Y2_MAX_PIN)
-    #if PIN_EXISTS(Y2_STOP)
-      #define Y2_MAX_PIN Y2_STOP_PIN
-    #elif Y2_USE_ENDSTOP == _XMIN_
-      #define Y2_MAX_PIN X_MIN_PIN
-    #elif Y2_USE_ENDSTOP == _XMAX_
-      #define Y2_MAX_PIN X_MAX_PIN
-    #elif Y2_USE_ENDSTOP == _XSTOP_
-      #define Y2_MAX_PIN X_STOP_PIN
-    #elif Y2_USE_ENDSTOP == _YMIN_
-      #define Y2_MAX_PIN Y_MIN_PIN
-    #elif Y2_USE_ENDSTOP == _YMAX_
-      #define Y2_MAX_PIN Y_MAX_PIN
-    #elif Y2_USE_ENDSTOP == _YSTOP_
-      #define Y2_MAX_PIN Y_STOP_PIN
-    #elif Y2_USE_ENDSTOP == _ZMIN_
-      #define Y2_MAX_PIN Z_MIN_PIN
-    #elif Y2_USE_ENDSTOP == _ZMAX_
-      #define Y2_MAX_PIN Z_MAX_PIN
-    #elif Y2_USE_ENDSTOP == _ZSTOP_
-      #define Y2_MAX_PIN Z_STOP_PIN
-    #elif Y2_USE_ENDSTOP == _XDIAG_
-      #define Y2_MAX_PIN X_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _YDIAG_
-      #define Y2_MAX_PIN Y_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _ZDIAG_
-      #define Y2_MAX_PIN Z_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E0DIAG_
-      #define Y2_MAX_PIN E0_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E1DIAG_
-      #define Y2_MAX_PIN E1_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E2DIAG_
-      #define Y2_MAX_PIN E2_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E3DIAG_
-      #define Y2_MAX_PIN E3_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E4DIAG_
-      #define Y2_MAX_PIN E4_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E5DIAG_
-      #define Y2_MAX_PIN E5_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E6DIAG_
-      #define Y2_MAX_PIN E6_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E7DIAG_
-      #define Y2_MAX_PIN E7_DIAG_PIN
-    #endif
-  #elif Y_HOME_TO_MIN && !defined(Y2_MIN_PIN)
-    #if PIN_EXISTS(Y2_STOP)
-      #define Y2_MIN_PIN Y2_STOP_PIN
-    #elif Y2_USE_ENDSTOP == _XMIN_
-      #define Y2_MIN_PIN X_MIN_PIN
-    #elif Y2_USE_ENDSTOP == _XMAX_
-      #define Y2_MIN_PIN X_MAX_PIN
-    #elif Y2_USE_ENDSTOP == _XSTOP_
-      #define Y2_MIN_PIN X_STOP_PIN
-    #elif Y2_USE_ENDSTOP == _YMIN_
-      #define Y2_MIN_PIN Y_MIN_PIN
-    #elif Y2_USE_ENDSTOP == _YMAX_
-      #define Y2_MIN_PIN Y_MAX_PIN
-    #elif Y2_USE_ENDSTOP == _YSTOP_
-      #define Y2_MIN_PIN Y_STOP_PIN
-    #elif Y2_USE_ENDSTOP == _ZMIN_
-      #define Y2_MIN_PIN Z_MIN_PIN
-    #elif Y2_USE_ENDSTOP == _ZMAX_
-      #define Y2_MIN_PIN Z_MAX_PIN
-    #elif Y2_USE_ENDSTOP == _ZSTOP_
-      #define Y2_MIN_PIN Z_STOP_PIN
-    #elif Y2_USE_ENDSTOP == _XDIAG_
-      #define Y2_MIN_PIN X_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _YDIAG_
-      #define Y2_MIN_PIN Y_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _ZDIAG_
-      #define Y2_MIN_PIN Z_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E0DIAG_
-      #define Y2_MIN_PIN E0_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E1DIAG_
-      #define Y2_MIN_PIN E1_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E2DIAG_
-      #define Y2_MIN_PIN E2_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E3DIAG_
-      #define Y2_MIN_PIN E3_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E4DIAG_
-      #define Y2_MIN_PIN E4_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E5DIAG_
-      #define Y2_MIN_PIN E5_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E6DIAG_
-      #define Y2_MIN_PIN E6_DIAG_PIN
-    #elif Y2_USE_ENDSTOP == _E7DIAG_
-      #define Y2_MIN_PIN E7_DIAG_PIN
-    #endif
-  #endif
-#endif // Y_DUAL_ENDSTOPS
+  #if Y_HOME_TO_MAX && !defined(Y2_MAX_PIN) && PIN_EXISTS(Y2_STOP)
+    #define Y2_MAX_PIN Y2_STOP_PIN
+  #elif Y_HOME_TO_MIN && !defined(Y2_MIN_PIN) && PIN_EXISTS(Y2_STOP)
+    #define Y2_MIN_PIN Y2_STOP_PIN
+  #endif
+#endif
 
 /**
  * Z_MULTI_ENDSTOPS endstop reassignment
  */
 #if ENABLED(Z_MULTI_ENDSTOPS)
-
-  #if Z_HOME_TO_MAX && !defined(Z2_MAX_PIN)
-    #if PIN_EXISTS(Z2_STOP)
-      #define Z2_MAX_PIN Z2_STOP_PIN
-    #elif Z2_USE_ENDSTOP == _XMIN_
-      #define Z2_MAX_PIN X_MIN_PIN
-    #elif Z2_USE_ENDSTOP == _XMAX_
-      #define Z2_MAX_PIN X_MAX_PIN
-    #elif Z2_USE_ENDSTOP == _XSTOP_
-      #define Z2_MAX_PIN X_STOP_PIN
-    #elif Z2_USE_ENDSTOP == _YMIN_
-      #define Z2_MAX_PIN Y_MIN_PIN
-    #elif Z2_USE_ENDSTOP == _YMAX_
-      #define Z2_MAX_PIN Y_MAX_PIN
-    #elif Z2_USE_ENDSTOP == _YSTOP_
-      #define Z2_MAX_PIN Y_STOP_PIN
-    #elif Z2_USE_ENDSTOP == _ZMIN_
-      #define Z2_MAX_PIN Z_MIN_PIN
-    #elif Z2_USE_ENDSTOP == _ZMAX_
-      #define Z2_MAX_PIN Z_MAX_PIN
-    #elif Z2_USE_ENDSTOP == _ZSTOP_
-      #define Z2_MAX_PIN Z_STOP_PIN
-    #elif Z2_USE_ENDSTOP == _XDIAG_
-      #define Z2_MAX_PIN X_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _YDIAG_
-      #define Z2_MAX_PIN Y_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _ZDIAG_
-      #define Z2_MAX_PIN Z_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E0DIAG_
-      #define Z2_MAX_PIN E0_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E1DIAG_
-      #define Z2_MAX_PIN E1_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E2DIAG_
-      #define Z2_MAX_PIN E2_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E3DIAG_
-      #define Z2_MAX_PIN E3_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E4DIAG_
-      #define Z2_MAX_PIN E4_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E5DIAG_
-      #define Z2_MAX_PIN E5_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E6DIAG_
-      #define Z2_MAX_PIN E6_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E7DIAG_
-      #define Z2_MAX_PIN E7_DIAG_PIN
-    #endif
-  #elif Z_HOME_TO_MIN && !defined(Z2_MIN_PIN)
-    #if PIN_EXISTS(Z2_STOP)
-      #define Z2_MIN_PIN Z2_STOP_PIN
-    #elif Z2_USE_ENDSTOP == _XMIN_
-      #define Z2_MIN_PIN X_MIN_PIN
-    #elif Z2_USE_ENDSTOP == _XMAX_
-      #define Z2_MIN_PIN X_MAX_PIN
-    #elif Z2_USE_ENDSTOP == _XSTOP_
-      #define Z2_MIN_PIN X_STOP_PIN
-    #elif Z2_USE_ENDSTOP == _YMIN_
-      #define Z2_MIN_PIN Y_MIN_PIN
-    #elif Z2_USE_ENDSTOP == _YMAX_
-      #define Z2_MIN_PIN Y_MAX_PIN
-    #elif Z2_USE_ENDSTOP == _YSTOP_
-      #define Z2_MIN_PIN Y_STOP_PIN
-    #elif Z2_USE_ENDSTOP == _ZMIN_
-      #define Z2_MIN_PIN Z_MIN_PIN
-    #elif Z2_USE_ENDSTOP == _ZMAX_
-      #define Z2_MIN_PIN Z_MAX_PIN
-    #elif Z2_USE_ENDSTOP == _ZSTOP_
-      #define Z2_MIN_PIN Z_STOP_PIN
-    #elif Z2_USE_ENDSTOP == _XDIAG_
-      #define Z2_MIN_PIN X_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _YDIAG_
-      #define Z2_MIN_PIN Y_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _ZDIAG_
-      #define Z2_MIN_PIN Z_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E0DIAG_
-      #define Z2_MIN_PIN E0_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E1DIAG_
-      #define Z2_MIN_PIN E1_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E2DIAG_
-      #define Z2_MIN_PIN E2_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E3DIAG_
-      #define Z2_MIN_PIN E3_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E4DIAG_
-      #define Z2_MIN_PIN E4_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E5DIAG_
-      #define Z2_MIN_PIN E5_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E6DIAG_
-      #define Z2_MIN_PIN E6_DIAG_PIN
-    #elif Z2_USE_ENDSTOP == _E7DIAG_
-      #define Z2_MIN_PIN E7_DIAG_PIN
-    #endif
+  #if Z_HOME_TO_MAX && !defined(Z2_MAX_PIN) && PIN_EXISTS(Z2_STOP)
+    #define Z2_MAX_PIN Z2_STOP_PIN
+  #elif Z_HOME_TO_MIN && !defined(Z2_MIN_PIN) && PIN_EXISTS(Z2_STOP)
+    #define Z2_MIN_PIN Z2_STOP_PIN
   #endif
-
   #if NUM_Z_STEPPERS >= 3
-    #if Z_HOME_TO_MAX && !defined(Z3_MAX_PIN)
-      #if PIN_EXISTS(Z3_STOP)
-        #define Z3_MAX_PIN Z3_STOP_PIN
-      #elif Z3_USE_ENDSTOP == _XMIN_
-        #define Z3_MAX_PIN X_MIN_PIN
-      #elif Z3_USE_ENDSTOP == _XMAX_
-        #define Z3_MAX_PIN X_MAX_PIN
-      #elif Z3_USE_ENDSTOP == _XSTOP_
-        #define Z3_MAX_PIN X_STOP_PIN
-      #elif Z3_USE_ENDSTOP == _YMIN_
-        #define Z3_MAX_PIN Y_MIN_PIN
-      #elif Z3_USE_ENDSTOP == _YMAX_
-        #define Z3_MAX_PIN Y_MAX_PIN
-      #elif Z3_USE_ENDSTOP == _YSTOP_
-        #define Z3_MAX_PIN Y_STOP_PIN
-      #elif Z3_USE_ENDSTOP == _ZMIN_
-        #define Z3_MAX_PIN Z_MIN_PIN
-      #elif Z3_USE_ENDSTOP == _ZMAX_
-        #define Z3_MAX_PIN Z_MAX_PIN
-      #elif Z3_USE_ENDSTOP == _ZSTOP_
-        #define Z3_MAX_PIN Z_STOP_PIN
-      #elif Z3_USE_ENDSTOP == _XDIAG_
-        #define Z3_MAX_PIN X_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _YDIAG_
-        #define Z3_MAX_PIN Y_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _ZDIAG_
-        #define Z3_MAX_PIN Z_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E0DIAG_
-        #define Z3_MAX_PIN E0_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E1DIAG_
-        #define Z3_MAX_PIN E1_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E2DIAG_
-        #define Z3_MAX_PIN E2_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E3DIAG_
-        #define Z3_MAX_PIN E3_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E4DIAG_
-        #define Z3_MAX_PIN E4_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E5DIAG_
-        #define Z3_MAX_PIN E5_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E6DIAG_
-        #define Z3_MAX_PIN E6_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E7DIAG_
-        #define Z3_MAX_PIN E7_DIAG_PIN
-      #endif
-    #elif Z_HOME_TO_MIN && !defined(Z3_MIN_PIN)
-      #if PIN_EXISTS(Z3_STOP)
-        #define Z3_MIN_PIN Z3_STOP_PIN
-      #elif Z3_USE_ENDSTOP == _XMIN_
-        #define Z3_MIN_PIN X_MIN_PIN
-      #elif Z3_USE_ENDSTOP == _XMAX_
-        #define Z3_MIN_PIN X_MAX_PIN
-      #elif Z3_USE_ENDSTOP == _XSTOP_
-        #define Z3_MIN_PIN X_STOP_PIN
-      #elif Z3_USE_ENDSTOP == _YMIN_
-        #define Z3_MIN_PIN Y_MIN_PIN
-      #elif Z3_USE_ENDSTOP == _YMAX_
-        #define Z3_MIN_PIN Y_MAX_PIN
-      #elif Z3_USE_ENDSTOP == _YSTOP_
-        #define Z3_MIN_PIN Y_STOP_PIN
-      #elif Z3_USE_ENDSTOP == _ZMIN_
-        #define Z3_MIN_PIN Z_MIN_PIN
-      #elif Z3_USE_ENDSTOP == _ZMAX_
-        #define Z3_MIN_PIN Z_MAX_PIN
-      #elif Z3_USE_ENDSTOP == _ZSTOP_
-        #define Z3_MIN_PIN Z_STOP_PIN
-      #elif Z3_USE_ENDSTOP == _XDIAG_
-        #define Z3_MIN_PIN X_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _YDIAG_
-        #define Z3_MIN_PIN Y_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _ZDIAG_
-        #define Z3_MIN_PIN Z_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E0DIAG_
-        #define Z3_MIN_PIN E0_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E1DIAG_
-        #define Z3_MIN_PIN E1_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E2DIAG_
-        #define Z3_MIN_PIN E2_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E3DIAG_
-        #define Z3_MIN_PIN E3_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E4DIAG_
-        #define Z3_MIN_PIN E4_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E5DIAG_
-        #define Z3_MIN_PIN E5_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E6DIAG_
-        #define Z3_MIN_PIN E6_DIAG_PIN
-      #elif Z3_USE_ENDSTOP == _E7DIAG_
-        #define Z3_MIN_PIN E7_DIAG_PIN
-      #endif
+    #if Z_HOME_TO_MAX && !defined(Z3_MAX_PIN) && PIN_EXISTS(Z3_STOP)
+      #define Z3_MAX_PIN Z3_STOP_PIN
+    #elif Z_HOME_TO_MIN && !defined(Z3_MIN_PIN) && PIN_EXISTS(Z3_STOP)
+      #define Z3_MIN_PIN Z3_STOP_PIN
     #endif
   #endif
-
   #if NUM_Z_STEPPERS >= 4
-    #if Z_HOME_TO_MAX && !defined(Z4_MAX_PIN)
-      #if PIN_EXISTS(Z4_STOP)
-        #define Z4_MAX_PIN Z4_STOP_PIN
-      #elif Z4_USE_ENDSTOP == _XMIN_
-        #define Z4_MAX_PIN X_MIN_PIN
-      #elif Z4_USE_ENDSTOP == _XMAX_
-        #define Z4_MAX_PIN X_MAX_PIN
-      #elif Z4_USE_ENDSTOP == _XSTOP_
-        #define Z4_MAX_PIN X_STOP_PIN
-      #elif Z4_USE_ENDSTOP == _YMIN_
-        #define Z4_MAX_PIN Y_MIN_PIN
-      #elif Z4_USE_ENDSTOP == _YMAX_
-        #define Z4_MAX_PIN Y_MAX_PIN
-      #elif Z4_USE_ENDSTOP == _YSTOP_
-        #define Z4_MAX_PIN Y_STOP_PIN
-      #elif Z4_USE_ENDSTOP == _ZMIN_
-        #define Z4_MAX_PIN Z_MIN_PIN
-      #elif Z4_USE_ENDSTOP == _ZMAX_
-        #define Z4_MAX_PIN Z_MAX_PIN
-      #elif Z4_USE_ENDSTOP == _ZSTOP_
-        #define Z4_MAX_PIN Z_STOP_PIN
-      #elif Z4_USE_ENDSTOP == _XDIAG_
-        #define Z4_MAX_PIN X_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _YDIAG_
-        #define Z4_MAX_PIN Y_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _ZDIAG_
-        #define Z4_MAX_PIN Z_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E0DIAG_
-        #define Z4_MAX_PIN E0_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E1DIAG_
-        #define Z4_MAX_PIN E1_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E2DIAG_
-        #define Z4_MAX_PIN E2_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E3DIAG_
-        #define Z4_MAX_PIN E3_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E4DIAG_
-        #define Z4_MAX_PIN E4_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E5DIAG_
-        #define Z4_MAX_PIN E5_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E6DIAG_
-        #define Z4_MAX_PIN E6_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E7DIAG_
-        #define Z4_MAX_PIN E7_DIAG_PIN
-      #endif
-    #elif Z_HOME_TO_MIN && !defined(Z4_MIN_PIN)
-      #if PIN_EXISTS(Z4_STOP)
-        #define Z4_MIN_PIN Z4_STOP_PIN
-      #elif Z4_USE_ENDSTOP == _XMIN_
-        #define Z4_MIN_PIN X_MIN_PIN
-      #elif Z4_USE_ENDSTOP == _XMAX_
-        #define Z4_MIN_PIN X_MAX_PIN
-      #elif Z4_USE_ENDSTOP == _XSTOP_
-        #define Z4_MIN_PIN X_STOP_PIN
-      #elif Z4_USE_ENDSTOP == _YMIN_
-        #define Z4_MIN_PIN Y_MIN_PIN
-      #elif Z4_USE_ENDSTOP == _YMAX_
-        #define Z4_MIN_PIN Y_MAX_PIN
-      #elif Z4_USE_ENDSTOP == _YSTOP_
-        #define Z4_MIN_PIN Y_STOP_PIN
-      #elif Z4_USE_ENDSTOP == _ZMIN_
-        #define Z4_MIN_PIN Z_MIN_PIN
-      #elif Z4_USE_ENDSTOP == _ZMAX_
-        #define Z4_MIN_PIN Z_MAX_PIN
-      #elif Z4_USE_ENDSTOP == _ZSTOP_
-        #define Z4_MIN_PIN Z_STOP_PIN
-      #elif Z4_USE_ENDSTOP == _XDIAG_
-        #define Z4_MIN_PIN X_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _YDIAG_
-        #define Z4_MIN_PIN Y_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _ZDIAG_
-        #define Z4_MIN_PIN Z_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E0DIAG_
-        #define Z4_MIN_PIN E0_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E1DIAG_
-        #define Z4_MIN_PIN E1_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E2DIAG_
-        #define Z4_MIN_PIN E2_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E3DIAG_
-        #define Z4_MIN_PIN E3_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E4DIAG_
-        #define Z4_MIN_PIN E4_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E5DIAG_
-        #define Z4_MIN_PIN E5_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E6DIAG_
-        #define Z4_MIN_PIN E6_DIAG_PIN
-      #elif Z4_USE_ENDSTOP == _E7DIAG_
-        #define Z4_MIN_PIN E7_DIAG_PIN
-      #endif
-    #endif
-  #endif
-
-#endif // Z_MULTI_ENDSTOPS
+    #if Z_HOME_TO_MAX && !defined(Z4_MAX_PIN) && PIN_EXISTS(Z4_STOP)
+      #define Z4_MAX_PIN Z4_STOP_PIN
+    #elif Z_HOME_TO_MIN && !defined(Z4_MIN_PIN) && PIN_EXISTS(Z4_STOP)
+      #define Z4_MIN_PIN Z4_STOP_PIN
+    #endif
+  #endif
+#endif
 
 //
 // Default DOGLCD SPI delays
 //
 #if !IS_U8GLIB_ST7920
   #undef ST7920_DELAY_1
   #undef ST7920_DELAY_2
   #undef ST7920_DELAY_3
   #undef LCD_ST7920_DELAY_1
   #undef LCD_ST7920_DELAY_2
@@ -2300,10 +1700,12 @@
   #undef CPU_ST7920_DELAY_2
   #undef CPU_ST7920_DELAY_3
 #endif
 
 #if !NEED_CASE_LIGHT_PIN
   #undef CASE_LIGHT_PIN
 #endif
 
 #undef HAS_FREE_AUX2_PINS
 #undef DIAG_REMAPPED
+#undef _E_DIAG_EXISTS
+#undef E_DIAG_EXISTS

commit 68f74784a3a41c643984ee62a507b25903430591
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 26 13:50:45 2023 -0500

    🎨 Misc. fixes, cleanup

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 4c07b5412d..9d917cec29 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -492,76 +492,60 @@
 #endif
 
 // Only used within pins files
 #undef NEEDS_X_MINMAX
 #undef NEEDS_Y_MINMAX
 #undef NEEDS_Z_MINMAX
 
 //
 // Assign endstop pins for boards with only 3 connectors
 //
-#ifdef X_STOP_PIN
-  #if X_HOME_TO_MIN
-    #define X_MIN_PIN X_STOP_PIN
-    #ifndef X_MAX_PIN
-      #define X_MAX_PIN -1
+#if HAS_X_AXIS
+  #ifdef X_STOP_PIN
+    #if X_HOME_TO_MIN
+      #define X_MIN_PIN X_STOP_PIN
+    #else
+      #define X_MAX_PIN X_STOP_PIN
     #endif
+  #elif X_HOME_TO_MIN
+    #define X_STOP_PIN X_MIN_PIN
   #else
-    #define X_MAX_PIN X_STOP_PIN
-    #ifndef X_MIN_PIN
-      #define X_MIN_PIN -1
-    #endif
+    #define X_STOP_PIN X_MAX_PIN
+  #endif
+  #if !defined(X2_USE_ENDSTOP) && ENABLED(X_DUAL_ENDSTOPS) && PIN_EXISTS(X_STOP)
+    #define X2_USE_ENDSTOP _XSTOP_
   #endif
-#elif X_HOME_TO_MIN
-  #define X_STOP_PIN X_MIN_PIN
-#else
-  #define X_STOP_PIN X_MAX_PIN
-#endif
-#if !defined(X2_USE_ENDSTOP) && ENABLED(X_DUAL_ENDSTOPS) && PIN_EXISTS(X_STOP)
-  #define X2_USE_ENDSTOP _XSTOP_
 #endif
 
 #if HAS_Y_AXIS
   #ifdef Y_STOP_PIN
     #if Y_HOME_TO_MIN
       #define Y_MIN_PIN Y_STOP_PIN
-      #ifndef Y_MAX_PIN
-        #define Y_MAX_PIN -1
-      #endif
     #else
       #define Y_MAX_PIN Y_STOP_PIN
-      #ifndef Y_MIN_PIN
-        #define Y_MIN_PIN -1
-      #endif
     #endif
   #elif Y_HOME_TO_MIN
     #define Y_STOP_PIN Y_MIN_PIN
   #else
     #define Y_STOP_PIN Y_MAX_PIN
   #endif
   #if !defined(Y2_USE_ENDSTOP) && ENABLED(Y_DUAL_ENDSTOPS) && PIN_EXISTS(Y_STOP)
     #define Y2_USE_ENDSTOP _YSTOP_
   #endif
 #endif
 
 #if HAS_Z_AXIS
   #ifdef Z_STOP_PIN
     #if Z_HOME_TO_MIN
       #define Z_MIN_PIN Z_STOP_PIN
-      #ifndef Z_MAX_PIN
-        #define Z_MAX_PIN -1
-      #endif
     #else
       #define Z_MAX_PIN Z_STOP_PIN
-      #ifndef Z_MIN_PIN
-        #define Z_MIN_PIN -1
-      #endif
     #endif
   #elif Z_HOME_TO_MIN
     #define Z_STOP_PIN Z_MIN_PIN
   #else
     #define Z_STOP_PIN Z_MAX_PIN
   #endif
   #if ENABLED(Z_MULTI_ENDSTOPS) && PIN_EXISTS(Z_STOP)
     #ifndef Z2_USE_ENDSTOP
       #define Z2_USE_ENDSTOP _ZSTOP_
     #endif
@@ -571,152 +555,98 @@
     #if NUM_Z_STEPPERS >= 4 && !defined(Z4_USE_ENDSTOP)
       #define Z4_USE_ENDSTOP _ZSTOP_
     #endif
   #endif
 #endif
 
 #if HAS_I_AXIS
   #ifdef I_STOP_PIN
     #if I_HOME_TO_MIN
       #define I_MIN_PIN I_STOP_PIN
-      #ifndef I_MAX_PIN
-        #define I_MAX_PIN -1
-      #endif
     #else
       #define I_MAX_PIN I_STOP_PIN
-      #ifndef I_MIN_PIN
-        #define I_MIN_PIN -1
-      #endif
     #endif
   #elif I_HOME_TO_MIN
     #define I_STOP_PIN I_MIN_PIN
   #else
     #define I_STOP_PIN I_MAX_PIN
   #endif
-#else
-  #undef I_MIN_PIN
-  #undef I_MAX_PIN
 #endif
 
 #if HAS_J_AXIS
   #ifdef J_STOP_PIN
     #if J_HOME_TO_MIN
       #define J_MIN_PIN J_STOP_PIN
-      #ifndef J_MAX_PIN
-        #define J_MAX_PIN -1
-      #endif
     #else
       #define J_MAX_PIN J_STOP_PIN
-      #ifndef J_MIN_PIN
-        #define J_MIN_PIN -1
-      #endif
     #endif
   #elif J_HOME_TO_MIN
     #define J_STOP_PIN J_MIN_PIN
   #else
     #define J_STOP_PIN J_MAX_PIN
   #endif
-#else
-  #undef J_MIN_PIN
-  #undef J_MAX_PIN
 #endif
 
 #if HAS_K_AXIS
   #ifdef K_STOP_PIN
     #if K_HOME_TO_MIN
       #define K_MIN_PIN K_STOP_PIN
-      #ifndef K_MAX_PIN
-        #define K_MAX_PIN -1
-      #endif
     #else
       #define K_MAX_PIN K_STOP_PIN
-      #ifndef K_MIN_PIN
-        #define K_MIN_PIN -1
-      #endif
     #endif
   #elif K_HOME_TO_MIN
     #define K_STOP_PIN K_MIN_PIN
   #else
     #define K_STOP_PIN K_MAX_PIN
   #endif
-#else
-  #undef K_MIN_PIN
-  #undef K_MAX_PIN
 #endif
 
 #if HAS_U_AXIS
   #ifdef U_STOP_PIN
     #if U_HOME_TO_MIN
       #define U_MIN_PIN U_STOP_PIN
-      #ifndef U_MAX_PIN
-        #define U_MAX_PIN -1
-      #endif
     #else
       #define U_MAX_PIN U_STOP_PIN
-      #ifndef U_MIN_PIN
-        #define U_MIN_PIN -1
-      #endif
     #endif
   #elif U_HOME_TO_MIN
     #define U_STOP_PIN U_MIN_PIN
   #else
     #define U_STOP_PIN U_MAX_PIN
   #endif
-#else
-  #undef U_MIN_PIN
-  #undef U_MAX_PIN
 #endif
 
 #if HAS_V_AXIS
   #ifdef V_STOP_PIN
     #if V_HOME_TO_MIN
       #define V_MIN_PIN V_STOP_PIN
-      #ifndef V_MAX_PIN
-        #define V_MAX_PIN -1
-      #endif
     #else
       #define V_MAX_PIN V_STOP_PIN
-      #ifndef V_MIN_PIN
-        #define V_MIN_PIN -1
-      #endif
     #endif
   #elif V_HOME_TO_MIN
     #define V_STOP_PIN V_MIN_PIN
   #else
     #define V_STOP_PIN V_MAX_PIN
   #endif
-#else
-  #undef V_MIN_PIN
-  #undef V_MAX_PIN
 #endif
 
 #if HAS_W_AXIS
   #ifdef W_STOP_PIN
     #if W_HOME_TO_MIN
       #define W_MIN_PIN W_STOP_PIN
-      #ifndef W_MAX_PIN
-        #define W_MAX_PIN -1
-      #endif
     #else
       #define W_MAX_PIN W_STOP_PIN
-      #ifndef W_MIN_PIN
-        #define W_MIN_PIN -1
-      #endif
     #endif
   #elif W_HOME_TO_MIN
     #define W_STOP_PIN W_MIN_PIN
   #else
     #define W_STOP_PIN W_MAX_PIN
   #endif
-#else
-  #undef W_MIN_PIN
-  #undef W_MAX_PIN
 #endif
 
 // Filament Sensor first pin alias
 #if HAS_FILAMENT_SENSOR
   #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN  // Filament Sensor first pin alias
 #else
   #undef FIL_RUNOUT_PIN
   #undef FIL_RUNOUT1_PIN
 #endif
 
@@ -815,38 +745,36 @@
     #endif
     #ifndef X2_SERIAL_RX_PIN
       #define X2_SERIAL_RX_PIN _EPIN(X2_E_INDEX, SERIAL_RX)
     #endif
   #endif
 
   //
   // Auto-assign pins for stallGuard sensorless homing
   //
   #if !defined(X2_DIAG_PIN) && !defined(X2_USE_ENDSTOP) && defined(X2_STALL_SENSITIVITY) && ENABLED(X_DUAL_ENDSTOPS) && _PEXI(X2_E_INDEX, DIAG)
-    #define X2_DIAG_PIN _EPIN(X2_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(X2, X_MIN)      // If already remapped in the pins file...
       #define X2_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(X2, Y_MIN)
       #define X2_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(X2, Z_MIN)
       #define X2_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(X2, X_MAX)
       #define X2_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(X2, Y_MAX)
       #define X2_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(X2, Z_MAX)
       #define X2_USE_ENDSTOP _ZMAX_
     #else                               // Otherwise pick the next free En_DIAG_PIN directly
       #define X2_USE_ENDSTOP _En_DIAG_(X2_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_X2_DIAG 1
-    #undef X2_DIAG_PIN // Defined in Conditionals_post.h based on X2_USE_ENDSTOP
   #endif
 #endif
 
 #ifndef X2_CS_PIN
   #define X2_CS_PIN  -1
 #endif
 #ifndef X2_MS1_PIN
   #define X2_MS1_PIN -1
 #endif
 #ifndef X2_MS2_PIN
@@ -901,38 +829,36 @@
   #if AXIS_HAS_UART(Y2)
     #ifndef Y2_SERIAL_TX_PIN
       #define Y2_SERIAL_TX_PIN _EPIN(Y2_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Y2_SERIAL_RX_PIN
       #define Y2_SERIAL_RX_PIN _EPIN(Y2_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
   #if !defined(Y2_DIAG_PIN) && !defined(Y2_USE_ENDSTOP) && defined(Y2_STALL_SENSITIVITY) && ENABLED(Y_DUAL_ENDSTOPS) && _PEXI(Y2_E_INDEX, DIAG)
-    #define Y2_DIAG_PIN _EPIN(Y2_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Y2, X_MIN)
       #define Y2_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Y2, Y_MIN)
       #define Y2_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Y2, Z_MIN)
       #define Y2_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Y2, X_MAX)
       #define Y2_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Y2, Y_MAX)
       #define Y2_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(Y2, Z_MAX)
       #define Y2_USE_ENDSTOP _ZMAX_
     #else
       #define Y2_USE_ENDSTOP _En_DIAG_(Y2_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_Y2_DIAG 1
-    #undef Y2_DIAG_PIN // Defined in Conditionals_post.h based on Y2_USE_ENDSTOP
   #endif
 #endif
 
 #ifndef Y2_CS_PIN
   #define Y2_CS_PIN  -1
 #endif
 #ifndef Y2_MS1_PIN
   #define Y2_MS1_PIN -1
 #endif
 #ifndef Y2_MS2_PIN
@@ -987,38 +913,36 @@
   #if AXIS_HAS_UART(Z2)
     #ifndef Z2_SERIAL_TX_PIN
       #define Z2_SERIAL_TX_PIN _EPIN(Z2_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z2_SERIAL_RX_PIN
       #define Z2_SERIAL_RX_PIN _EPIN(Z2_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
   #if !defined(Z2_DIAG_PIN) && !defined(Z2_USE_ENDSTOP) && defined(Z2_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && _PEXI(Z2_E_INDEX, DIAG)
-    #define Z2_DIAG_PIN _EPIN(Z2_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Z2, X_MIN)
       #define Z2_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Z2, Y_MIN)
       #define Z2_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Z2, Z_MIN)
       #define Z2_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Z2, X_MAX)
       #define Z2_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Z2, Y_MAX)
       #define Z2_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(Z2, Z_MAX)
       #define Z2_USE_ENDSTOP _ZMAX_
     #else
       #define Z2_USE_ENDSTOP _En_DIAG_(Z2_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_Z2_DIAG 1
-    #undef Z2_DIAG_PIN // Defined in Conditionals_post.h based on Z2_USE_ENDSTOP
   #endif
 #endif
 
 #ifndef Z2_CS_PIN
   #define Z2_CS_PIN  -1
 #endif
 #ifndef Z2_MS1_PIN
   #define Z2_MS1_PIN -1
 #endif
 #ifndef Z2_MS2_PIN
@@ -1073,38 +997,36 @@
   #if AXIS_HAS_UART(Z3)
     #ifndef Z3_SERIAL_TX_PIN
       #define Z3_SERIAL_TX_PIN _EPIN(Z3_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z3_SERIAL_RX_PIN
       #define Z3_SERIAL_RX_PIN _EPIN(Z3_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
   #if !defined(Z3_DIAG_PIN) && !defined(Z3_USE_ENDSTOP) && defined(Z3_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && _PEXI(Z3_E_INDEX, DIAG)
-    #define Z3_DIAG_PIN _EPIN(Z3_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Z3, X_MIN)
       #define Z3_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Z3, Y_MIN)
       #define Z3_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Z3, Z_MIN)
       #define Z3_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Z3, X_MAX)
       #define Z3_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Z3, Y_MAX)
       #define Z3_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(Z3, Z_MAX)
       #define Z3_USE_ENDSTOP _ZMAX_
     #else
       #define Z3_USE_ENDSTOP _En_DIAG_(Z3_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_Z3_DIAG 1
-    #undef Z3_DIAG_PIN // Defined in Conditionals_post.h based on Z3_USE_ENDSTOP
   #endif
 #endif
 
 #ifndef Z3_CS_PIN
   #define Z3_CS_PIN  -1
 #endif
 #ifndef Z3_MS1_PIN
   #define Z3_MS1_PIN -1
 #endif
 #ifndef Z3_MS2_PIN
@@ -1159,38 +1081,36 @@
   #if AXIS_HAS_UART(Z4)
     #ifndef Z4_SERIAL_TX_PIN
       #define Z4_SERIAL_TX_PIN _EPIN(Z4_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z4_SERIAL_RX_PIN
       #define Z4_SERIAL_RX_PIN _EPIN(Z4_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
   #if !defined(Z4_DIAG_PIN) && !defined(Z4_USE_ENDSTOP) && defined(Z4_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && _PEXI(Z4_E_INDEX, DIAG)
-    #define Z4_DIAG_PIN _EPIN(Z4_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Z4, X_MIN)
       #define Z4_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Z4, Y_MIN)
       #define Z4_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Z4, Z_MIN)
       #define Z4_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Z4, X_MAX)
       #define Z4_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Z4, Y_MAX)
       #define Z4_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(Z4, Z_MAX)
       #define Z4_USE_ENDSTOP _ZMAX_
     #else
       #define Z4_USE_ENDSTOP _En_DIAG_(Z4_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_Z4_DIAG 1
-    #undef Z4_DIAG_PIN // Defined in Conditionals_post.h based on Z4_USE_ENDSTOP
   #endif
 #endif
 
 #ifndef Z4_CS_PIN
   #define Z4_CS_PIN  -1
 #endif
 #ifndef Z4_MS1_PIN
   #define Z4_MS1_PIN -1
 #endif
 #ifndef Z4_MS2_PIN
@@ -1245,38 +1165,36 @@
   #if AXIS_HAS_UART(I)
     #ifndef I_SERIAL_TX_PIN
       #define I_SERIAL_TX_PIN _EPIN(I_E_INDEX, SERIAL_TX)
     #endif
     #ifndef I_SERIAL_RX_PIN
       #define I_SERIAL_RX_PIN _EPIN(I_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
   #if !defined(I_DIAG_PIN) && !defined(I_USE_ENDSTOP) && defined(I_STALL_SENSITIVITY) && _PEXI(I_E_INDEX, DIAG)
-    #define I_DIAG_PIN _EPIN(I_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(I, X_MIN)
       #define I_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(I, Y_MIN)
       #define I_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(I, Z_MIN)
       #define I_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(I, X_MAX)
       #define I_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(I, Y_MAX)
       #define I_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(I, Z_MAX)
       #define I_USE_ENDSTOP _ZMAX_
     #else
       #define I_USE_ENDSTOP _En_DIAG_(I_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_I_DIAG 1
-    #undef I_DIAG_PIN // Defined in Conditionals_post.h based on I_USE_ENDSTOP
   #endif
 #endif
 
 #ifndef I_CS_PIN
   #define I_CS_PIN  -1
 #endif
 #ifndef I_MS1_PIN
   #define I_MS1_PIN -1
 #endif
 #ifndef I_MS2_PIN
@@ -1331,38 +1249,36 @@
   #if AXIS_HAS_UART(J)
     #ifndef J_SERIAL_TX_PIN
       #define J_SERIAL_TX_PIN _EPIN(J_E_INDEX, SERIAL_TX)
     #endif
     #ifndef J_SERIAL_RX_PIN
       #define J_SERIAL_RX_PIN _EPIN(J_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
   #if !defined(J_DIAG_PIN) && !defined(J_USE_ENDSTOP) && defined(J_STALL_SENSITIVITY) && _PEXI(J_E_INDEX, DIAG)
-    #define J_DIAG_PIN _EPIN(J_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(J, X_MIN)
       #define J_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(J, Y_MIN)
       #define J_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(J, Z_MIN)
       #define J_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(J, X_MAX)
       #define J_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(J, Y_MAX)
       #define J_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(I, Z_MAX)
       #define J_USE_ENDSTOP _ZMAX_
     #else
       #define J_USE_ENDSTOP _En_DIAG_(J_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_J_DIAG 1
-    #undef J_DIAG_PIN // Defined in Conditionals_post.h based on J_USE_ENDSTOP
   #endif
 #endif
 
 #ifndef J_CS_PIN
   #define J_CS_PIN  -1
 #endif
 #ifndef J_MS1_PIN
   #define J_MS1_PIN -1
 #endif
 #ifndef J_MS2_PIN
@@ -1417,38 +1333,36 @@
   #if AXIS_HAS_UART(K)
     #ifndef K_SERIAL_TX_PIN
       #define K_SERIAL_TX_PIN _EPIN(K_E_INDEX, SERIAL_TX)
     #endif
     #ifndef K_SERIAL_RX_PIN
       #define K_SERIAL_RX_PIN _EPIN(K_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
   #if !defined(K_DIAG_PIN) && !defined(K_USE_ENDSTOP) && defined(K_STALL_SENSITIVITY) && _PEXI(K_E_INDEX, DIAG)
-    #define K_DIAG_PIN _EPIN(K_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(K, X_MIN)
       #define K_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(K, Y_MIN)
       #define K_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(K, Z_MIN)
       #define K_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(K, X_MAX)
       #define K_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(K, Y_MAX)
       #define K_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(K, Z_MAX)
       #define K_USE_ENDSTOP _ZMAX_
     #else
       #define K_USE_ENDSTOP _En_DIAG_(K_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_K_DIAG 1
-    #undef K_DIAG_PIN // Defined in Conditionals_post.h based on K_USE_ENDSTOP
   #endif
 #endif
 
 #ifndef K_CS_PIN
   #define K_CS_PIN  -1
 #endif
 #ifndef K_MS1_PIN
   #define K_MS1_PIN -1
 #endif
 #ifndef K_MS2_PIN
@@ -1503,38 +1417,36 @@
   #if AXIS_HAS_UART(U)
     #ifndef U_SERIAL_TX_PIN
       #define U_SERIAL_TX_PIN _EPIN(U_E_INDEX, SERIAL_TX)
     #endif
     #ifndef U_SERIAL_RX_PIN
       #define U_SERIAL_RX_PIN _EPIN(U_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
   #if !defined(U_DIAG_PIN) && !defined(U_USE_ENDSTOP) && defined(U_STALL_SENSITIVITY) && _PEXI(U_E_INDEX, DIAG)
-    #define U_DIAG_PIN _EPIN(U_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(U, X_MIN)
       #define U_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(U, Y_MIN)
       #define U_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(U, Z_MIN)
       #define U_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(U, X_MAX)
       #define U_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(U, Y_MAX)
       #define U_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(U, Z_MAX)
       #define U_USE_ENDSTOP _ZMAX_
     #else
       #define U_USE_ENDSTOP _En_DIAG_(U_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_U_DIAG 1
-    #undef U_DIAG_PIN // Defined in Conditionals_post.h based on U_USE_ENDSTOP
   #endif
 #endif
 
 #ifndef U_CS_PIN
   #define U_CS_PIN  -1
 #endif
 #ifndef U_MS1_PIN
   #define U_MS1_PIN -1
 #endif
 #ifndef U_MS2_PIN
@@ -1589,38 +1501,36 @@
   #if AXIS_HAS_UART(V)
     #ifndef V_SERIAL_TX_PIN
       #define V_SERIAL_TX_PIN _EPIN(V_E_INDEX, SERIAL_TX)
     #endif
     #ifndef V_SERIAL_RX_PIN
       #define V_SERIAL_RX_PIN _EPIN(V_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
   #if !defined(V_DIAG_PIN) && !defined(V_USE_ENDSTOP) && defined(V_STALL_SENSITIVITY) && _PEXI(V_E_INDEX, DIAG)
-    #define V_DIAG_PIN _EPIN(V_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(V, X_MIN)
       #define V_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(V, Y_MIN)
       #define V_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(V, Z_MIN)
       #define V_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(V, X_MAX)
       #define V_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(V, Y_MAX)
       #define V_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(V, Z_MAX)
       #define V_USE_ENDSTOP _ZMAX_
     #else
       #define V_USE_ENDSTOP _En_DIAG_(V_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_V_DIAG 1
-    #undef V_DIAG_PIN // Defined in Conditionals_post.h based on O_USE_ENDSTOP
   #endif
 #endif
 
 #ifndef V_CS_PIN
   #define V_CS_PIN  -1
 #endif
 #ifndef V_MS1_PIN
   #define V_MS1_PIN -1
 #endif
 #ifndef V_MS2_PIN
@@ -1669,38 +1579,36 @@
   #if AXIS_HAS_UART(W)
     #ifndef W_SERIAL_TX_PIN
       #define W_SERIAL_TX_PIN _EPIN(W_E_INDEX, SERIAL_TX)
     #endif
     #ifndef W_SERIAL_RX_PIN
       #define W_SERIAL_RX_PIN _EPIN(W_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
   #if !defined(W_DIAG_PIN) && !defined(W_USE_ENDSTOP) && defined(W_STALL_SENSITIVITY) && _PEXI(W_E_INDEX, DIAG)
-    #define W_DIAG_PIN _EPIN(W_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(W, X_MIN)
       #define W_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(W, Y_MIN)
       #define W_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(W, Z_MIN)
       #define W_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(W, X_MAX)
       #define W_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(W, Y_MAX)
       #define W_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(W, Z_MAX)
       #define W_USE_ENDSTOP _ZMAX_
     #else
       #define W_USE_ENDSTOP _En_DIAG_(W_E_INDEX)
     #endif
     #define AUTO_ASSIGNED_W_DIAG 1
-    #undef W_DIAG_PIN // Defined in Conditionals_post.h based on Q_USE_ENDSTOP
   #endif
 #endif
 
 #ifndef W_CS_PIN
   #define W_CS_PIN  -1
 #endif
 #ifndef W_MS1_PIN
   #define W_MS1_PIN -1
 #endif
 #ifndef W_MS2_PIN

commit 08edb6282f7c85f785bd838be9ef59ef247e61a2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 26 02:57:53 2023 -0500

    🔧 Extra axis endstop defaults

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index cf64b28cd5..4c07b5412d 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -1716,29 +1716,65 @@
 #define _STOP_IN_USE(N) (X2_USE_ENDSTOP == N || Y2_USE_ENDSTOP == N || Z2_USE_ENDSTOP == N || Z3_USE_ENDSTOP == N || Z4_USE_ENDSTOP == N)
 #if !defined(USE_XMAX_PLUG) && _STOP_IN_USE(_XMAX_)
   #define USE_XMAX_PLUG
 #endif
 #if !defined(USE_YMAX_PLUG) && _STOP_IN_USE(_YMAX_)
   #define USE_YMAX_PLUG
 #endif
 #if !defined(USE_ZMAX_PLUG) && _STOP_IN_USE(_ZMAX_)
   #define USE_ZMAX_PLUG
 #endif
+#if !defined(USE_IMAX_PLUG) && _STOP_IN_USE(_IMAX_)
+  #define USE_IMAX_PLUG
+#endif
+#if !defined(USE_JMAX_PLUG) && _STOP_IN_USE(_JMAX_)
+  #define USE_JMAX_PLUG
+#endif
+#if !defined(USE_KMAX_PLUG) && _STOP_IN_USE(_KMAX_)
+  #define USE_KMAX_PLUG
+#endif
+#if !defined(USE_UMAX_PLUG) && _STOP_IN_USE(_UMAX_)
+  #define USE_UMAX_PLUG
+#endif
+#if !defined(USE_VMAX_PLUG) && _STOP_IN_USE(_VMAX_)
+  #define USE_VMAX_PLUG
+#endif
+#if !defined(USE_WMAX_PLUG) && _STOP_IN_USE(_WMAX_)
+  #define USE_WMAX_PLUG
+#endif
 #if !defined(USE_XMIN_PLUG) && _STOP_IN_USE(_XMIN_)
   #define USE_XMIN_PLUG
 #endif
 #if !defined(USE_YMIN_PLUG) && _STOP_IN_USE(_YMIN_)
   #define USE_YMIN_PLUG
 #endif
 #if !defined(USE_ZMIN_PLUG) && _STOP_IN_USE(_ZMIN_)
   #define USE_ZMIN_PLUG
 #endif
+#if !defined(USE_IMIN_PLUG) && _STOP_IN_USE(_IMIN_)
+  #define USE_IMIN_PLUG
+#endif
+#if !defined(USE_JMIN_PLUG) && _STOP_IN_USE(_JMIN_)
+  #define USE_JMIN_PLUG
+#endif
+#if !defined(USE_KMIN_PLUG) && _STOP_IN_USE(_KMIN_)
+  #define USE_KMIN_PLUG
+#endif
+#if !defined(USE_UMIN_PLUG) && _STOP_IN_USE(_UMIN_)
+  #define USE_UMIN_PLUG
+#endif
+#if !defined(USE_VMIN_PLUG) && _STOP_IN_USE(_VMIN_)
+  #define USE_VMIN_PLUG
+#endif
+#if !defined(USE_WMIN_PLUG) && _STOP_IN_USE(_WMIN_)
+  #define USE_WMIN_PLUG
+#endif
 #undef _STOP_IN_USE
 #if !USES_Z_MIN_PROBE_PIN
   #undef Z_MIN_PROBE_PIN
   #define Z_MIN_PROBE_PIN    -1
 #endif
 #if DISABLED(USE_XMIN_PLUG)
   #undef X_MIN_PIN
   #define X_MIN_PIN          -1
 #endif
 #if DISABLED(USE_XMAX_PLUG)

commit f5a905a64121e4ff43894d295ce6990e55aa1149
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Tue Apr 25 04:51:44 2023 +0200

    ✨ TEMP_SENSOR_SOC (#25642)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 6ae99d2f57..cf64b28cd5 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -449,20 +449,25 @@
 #ifndef TEMP_6_PIN
   #define TEMP_6_PIN -1
 #endif
 #ifndef TEMP_7_PIN
   #define TEMP_7_PIN -1
 #endif
 #ifndef TEMP_BED_PIN
   #define TEMP_BED_PIN -1
 #endif
 
+// Use ATEMP if TEMP_SOC_PIN is not defined
+#if !defined(TEMP_SOC_PIN) && defined(ATEMP)
+  #define TEMP_SOC_PIN ATEMP
+#endif
+
 #ifndef SD_DETECT_PIN
   #define SD_DETECT_PIN -1
 #endif
 #ifndef SDPOWER_PIN
   #define SDPOWER_PIN -1
 #endif
 #ifndef SDSS
   #define SDSS -1
 #endif
 #ifndef LED_PIN

commit 4233e4864f0c621612ce35a9b6ca882312e3aa4d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 22 01:56:10 2023 -0500

    🚸 MarlinUI Endstop Test Screen, and more (#25667)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 708eb7f8e6..6ae99d2f57 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -1860,501 +1860,481 @@
   #undef Z4_MIN_PIN
 #endif
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPERS < 4 || Z_HOME_TO_MIN
   #undef Z4_MAX_PIN
 #endif
 
 /**
  * X_DUAL_ENDSTOPS endstop reassignment
  */
 #if ENABLED(X_DUAL_ENDSTOPS)
-  #if X_HOME_TO_MAX
-    #ifndef X2_MAX_PIN
-      #if PIN_EXISTS(X2_STOP)
-        #define X2_MAX_PIN X2_STOP_PIN
-      #elif X2_USE_ENDSTOP == _XMIN_
-        #define X2_MAX_PIN X_MIN_PIN
-      #elif X2_USE_ENDSTOP == _XMAX_
-        #define X2_MAX_PIN X_MAX_PIN
-      #elif X2_USE_ENDSTOP == _XSTOP_
-        #define X2_MAX_PIN X_STOP_PIN
-      #elif X2_USE_ENDSTOP == _YMIN_
-        #define X2_MAX_PIN Y_MIN_PIN
-      #elif X2_USE_ENDSTOP == _YMAX_
-        #define X2_MAX_PIN Y_MAX_PIN
-      #elif X2_USE_ENDSTOP == _YSTOP_
-        #define X2_MAX_PIN Y_STOP_PIN
-      #elif X2_USE_ENDSTOP == _ZMIN_
-        #define X2_MAX_PIN Z_MIN_PIN
-      #elif X2_USE_ENDSTOP == _ZMAX_
-        #define X2_MAX_PIN Z_MAX_PIN
-      #elif X2_USE_ENDSTOP == _ZSTOP_
-        #define X2_MAX_PIN Z_STOP_PIN
-      #elif X2_USE_ENDSTOP == _XDIAG_
-        #define X2_MAX_PIN X_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _YDIAG_
-        #define X2_MAX_PIN Y_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _ZDIAG_
-        #define X2_MAX_PIN Z_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E0DIAG_
-        #define X2_MAX_PIN E0_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E1DIAG_
-        #define X2_MAX_PIN E1_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E2DIAG_
-        #define X2_MAX_PIN E2_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E3DIAG_
-        #define X2_MAX_PIN E3_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E4DIAG_
-        #define X2_MAX_PIN E4_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E5DIAG_
-        #define X2_MAX_PIN E5_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E6DIAG_
-        #define X2_MAX_PIN E6_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E7DIAG_
-        #define X2_MAX_PIN E7_DIAG_PIN
-      #endif
-    #endif
-  #else
-    #ifndef X2_MIN_PIN
-      #if PIN_EXISTS(X2_STOP)
-        #define X2_MIN_PIN X2_STOP_PIN
-      #elif X2_USE_ENDSTOP == _XMIN_
-        #define X2_MIN_PIN X_MIN_PIN
-      #elif X2_USE_ENDSTOP == _XMAX_
-        #define X2_MIN_PIN X_MAX_PIN
-      #elif X2_USE_ENDSTOP == _XSTOP_
-        #define X2_MIN_PIN X_STOP_PIN
-      #elif X2_USE_ENDSTOP == _YMIN_
-        #define X2_MIN_PIN Y_MIN_PIN
-      #elif X2_USE_ENDSTOP == _YMAX_
-        #define X2_MIN_PIN Y_MAX_PIN
-      #elif X2_USE_ENDSTOP == _YSTOP_
-        #define X2_MIN_PIN Y_STOP_PIN
-      #elif X2_USE_ENDSTOP == _ZMIN_
-        #define X2_MIN_PIN Z_MIN_PIN
-      #elif X2_USE_ENDSTOP == _ZMAX_
-        #define X2_MIN_PIN Z_MAX_PIN
-      #elif X2_USE_ENDSTOP == _ZSTOP_
-        #define X2_MIN_PIN Z_STOP_PIN
-      #elif X2_USE_ENDSTOP == _XDIAG_
-        #define X2_MIN_PIN X_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _YDIAG_
-        #define X2_MIN_PIN Y_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _ZDIAG_
-        #define X2_MIN_PIN Z_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E0DIAG_
-        #define X2_MIN_PIN E0_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E1DIAG_
-        #define X2_MIN_PIN E1_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E2DIAG_
-        #define X2_MIN_PIN E2_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E3DIAG_
-        #define X2_MIN_PIN E3_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E4DIAG_
-        #define X2_MIN_PIN E4_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E5DIAG_
-        #define X2_MIN_PIN E5_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E6DIAG_
-        #define X2_MIN_PIN E6_DIAG_PIN
-      #elif X2_USE_ENDSTOP == _E7DIAG_
-        #define X2_MIN_PIN E7_DIAG_PIN
-      #endif
-    #endif
-  #endif
-#endif
+  #if X_HOME_TO_MAX && !defined(X2_MAX_PIN)
+    #if PIN_EXISTS(X2_STOP)
+      #define X2_MAX_PIN X2_STOP_PIN
+    #elif X2_USE_ENDSTOP == _XMIN_
+      #define X2_MAX_PIN X_MIN_PIN
+    #elif X2_USE_ENDSTOP == _XMAX_
+      #define X2_MAX_PIN X_MAX_PIN
+    #elif X2_USE_ENDSTOP == _XSTOP_
+      #define X2_MAX_PIN X_STOP_PIN
+    #elif X2_USE_ENDSTOP == _YMIN_
+      #define X2_MAX_PIN Y_MIN_PIN
+    #elif X2_USE_ENDSTOP == _YMAX_
+      #define X2_MAX_PIN Y_MAX_PIN
+    #elif X2_USE_ENDSTOP == _YSTOP_
+      #define X2_MAX_PIN Y_STOP_PIN
+    #elif X2_USE_ENDSTOP == _ZMIN_
+      #define X2_MAX_PIN Z_MIN_PIN
+    #elif X2_USE_ENDSTOP == _ZMAX_
+      #define X2_MAX_PIN Z_MAX_PIN
+    #elif X2_USE_ENDSTOP == _ZSTOP_
+      #define X2_MAX_PIN Z_STOP_PIN
+    #elif X2_USE_ENDSTOP == _XDIAG_
+      #define X2_MAX_PIN X_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _YDIAG_
+      #define X2_MAX_PIN Y_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _ZDIAG_
+      #define X2_MAX_PIN Z_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E0DIAG_
+      #define X2_MAX_PIN E0_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E1DIAG_
+      #define X2_MAX_PIN E1_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E2DIAG_
+      #define X2_MAX_PIN E2_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E3DIAG_
+      #define X2_MAX_PIN E3_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E4DIAG_
+      #define X2_MAX_PIN E4_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E5DIAG_
+      #define X2_MAX_PIN E5_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E6DIAG_
+      #define X2_MAX_PIN E6_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E7DIAG_
+      #define X2_MAX_PIN E7_DIAG_PIN
+    #endif
+  #elif X_HOME_TO_MIN && !defined(X2_MIN_PIN)
+    #if PIN_EXISTS(X2_STOP)
+      #define X2_MIN_PIN X2_STOP_PIN
+    #elif X2_USE_ENDSTOP == _XMIN_
+      #define X2_MIN_PIN X_MIN_PIN
+    #elif X2_USE_ENDSTOP == _XMAX_
+      #define X2_MIN_PIN X_MAX_PIN
+    #elif X2_USE_ENDSTOP == _XSTOP_
+      #define X2_MIN_PIN X_STOP_PIN
+    #elif X2_USE_ENDSTOP == _YMIN_
+      #define X2_MIN_PIN Y_MIN_PIN
+    #elif X2_USE_ENDSTOP == _YMAX_
+      #define X2_MIN_PIN Y_MAX_PIN
+    #elif X2_USE_ENDSTOP == _YSTOP_
+      #define X2_MIN_PIN Y_STOP_PIN
+    #elif X2_USE_ENDSTOP == _ZMIN_
+      #define X2_MIN_PIN Z_MIN_PIN
+    #elif X2_USE_ENDSTOP == _ZMAX_
+      #define X2_MIN_PIN Z_MAX_PIN
+    #elif X2_USE_ENDSTOP == _ZSTOP_
+      #define X2_MIN_PIN Z_STOP_PIN
+    #elif X2_USE_ENDSTOP == _XDIAG_
+      #define X2_MIN_PIN X_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _YDIAG_
+      #define X2_MIN_PIN Y_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _ZDIAG_
+      #define X2_MIN_PIN Z_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E0DIAG_
+      #define X2_MIN_PIN E0_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E1DIAG_
+      #define X2_MIN_PIN E1_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E2DIAG_
+      #define X2_MIN_PIN E2_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E3DIAG_
+      #define X2_MIN_PIN E3_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E4DIAG_
+      #define X2_MIN_PIN E4_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E5DIAG_
+      #define X2_MIN_PIN E5_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E6DIAG_
+      #define X2_MIN_PIN E6_DIAG_PIN
+    #elif X2_USE_ENDSTOP == _E7DIAG_
+      #define X2_MIN_PIN E7_DIAG_PIN
+    #endif
+  #endif
+#endif // X_DUAL_ENDSTOPS
 
 /**
  * Y_DUAL_ENDSTOPS endstop reassignment
  */
 #if ENABLED(Y_DUAL_ENDSTOPS)
-  #if Y_HOME_TO_MAX
-    #ifndef Y2_MAX_PIN
-      #if PIN_EXISTS(Y2_STOP)
-        #define Y2_MAX_PIN Y2_STOP_PIN
-      #elif Y2_USE_ENDSTOP == _XMIN_
-        #define Y2_MAX_PIN X_MIN_PIN
-      #elif Y2_USE_ENDSTOP == _XMAX_
-        #define Y2_MAX_PIN X_MAX_PIN
-      #elif Y2_USE_ENDSTOP == _XSTOP_
-        #define Y2_MAX_PIN X_STOP_PIN
-      #elif Y2_USE_ENDSTOP == _YMIN_
-        #define Y2_MAX_PIN Y_MIN_PIN
-      #elif Y2_USE_ENDSTOP == _YMAX_
-        #define Y2_MAX_PIN Y_MAX_PIN
-      #elif Y2_USE_ENDSTOP == _YSTOP_
-        #define Y2_MAX_PIN Y_STOP_PIN
-      #elif Y2_USE_ENDSTOP == _ZMIN_
-        #define Y2_MAX_PIN Z_MIN_PIN
-      #elif Y2_USE_ENDSTOP == _ZMAX_
-        #define Y2_MAX_PIN Z_MAX_PIN
-      #elif Y2_USE_ENDSTOP == _ZSTOP_
-        #define Y2_MAX_PIN Z_STOP_PIN
-      #elif Y2_USE_ENDSTOP == _XDIAG_
-        #define Y2_MAX_PIN X_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _YDIAG_
-        #define Y2_MAX_PIN Y_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _ZDIAG_
-        #define Y2_MAX_PIN Z_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E0DIAG_
-        #define Y2_MAX_PIN E0_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E1DIAG_
-        #define Y2_MAX_PIN E1_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E2DIAG_
-        #define Y2_MAX_PIN E2_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E3DIAG_
-        #define Y2_MAX_PIN E3_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E4DIAG_
-        #define Y2_MAX_PIN E4_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E5DIAG_
-        #define Y2_MAX_PIN E5_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E6DIAG_
-        #define Y2_MAX_PIN E6_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E7DIAG_
-        #define Y2_MAX_PIN E7_DIAG_PIN
-      #endif
-    #endif
-  #else
-    #ifndef Y2_MIN_PIN
-      #if PIN_EXISTS(Y2_STOP)
-        #define Y2_MIN_PIN Y2_STOP_PIN
-      #elif Y2_USE_ENDSTOP == _XMIN_
-        #define Y2_MIN_PIN X_MIN_PIN
-      #elif Y2_USE_ENDSTOP == _XMAX_
-        #define Y2_MIN_PIN X_MAX_PIN
-      #elif Y2_USE_ENDSTOP == _XSTOP_
-        #define Y2_MIN_PIN X_STOP_PIN
-      #elif Y2_USE_ENDSTOP == _YMIN_
-        #define Y2_MIN_PIN Y_MIN_PIN
-      #elif Y2_USE_ENDSTOP == _YMAX_
-        #define Y2_MIN_PIN Y_MAX_PIN
-      #elif Y2_USE_ENDSTOP == _YSTOP_
-        #define Y2_MIN_PIN Y_STOP_PIN
-      #elif Y2_USE_ENDSTOP == _ZMIN_
-        #define Y2_MIN_PIN Z_MIN_PIN
-      #elif Y2_USE_ENDSTOP == _ZMAX_
-        #define Y2_MIN_PIN Z_MAX_PIN
-      #elif Y2_USE_ENDSTOP == _ZSTOP_
-        #define Y2_MIN_PIN Z_STOP_PIN
-      #elif Y2_USE_ENDSTOP == _XDIAG_
-        #define Y2_MIN_PIN X_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _YDIAG_
-        #define Y2_MIN_PIN Y_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _ZDIAG_
-        #define Y2_MIN_PIN Z_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E0DIAG_
-        #define Y2_MIN_PIN E0_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E1DIAG_
-        #define Y2_MIN_PIN E1_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E2DIAG_
-        #define Y2_MIN_PIN E2_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E3DIAG_
-        #define Y2_MIN_PIN E3_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E4DIAG_
-        #define Y2_MIN_PIN E4_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E5DIAG_
-        #define Y2_MIN_PIN E5_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E6DIAG_
-        #define Y2_MIN_PIN E6_DIAG_PIN
-      #elif Y2_USE_ENDSTOP == _E7DIAG_
-        #define Y2_MIN_PIN E7_DIAG_PIN
-      #endif
-    #endif
-  #endif
-#endif
+  #if Y_HOME_TO_MAX && !defined(Y2_MAX_PIN)
+    #if PIN_EXISTS(Y2_STOP)
+      #define Y2_MAX_PIN Y2_STOP_PIN
+    #elif Y2_USE_ENDSTOP == _XMIN_
+      #define Y2_MAX_PIN X_MIN_PIN
+    #elif Y2_USE_ENDSTOP == _XMAX_
+      #define Y2_MAX_PIN X_MAX_PIN
+    #elif Y2_USE_ENDSTOP == _XSTOP_
+      #define Y2_MAX_PIN X_STOP_PIN
+    #elif Y2_USE_ENDSTOP == _YMIN_
+      #define Y2_MAX_PIN Y_MIN_PIN
+    #elif Y2_USE_ENDSTOP == _YMAX_
+      #define Y2_MAX_PIN Y_MAX_PIN
+    #elif Y2_USE_ENDSTOP == _YSTOP_
+      #define Y2_MAX_PIN Y_STOP_PIN
+    #elif Y2_USE_ENDSTOP == _ZMIN_
+      #define Y2_MAX_PIN Z_MIN_PIN
+    #elif Y2_USE_ENDSTOP == _ZMAX_
+      #define Y2_MAX_PIN Z_MAX_PIN
+    #elif Y2_USE_ENDSTOP == _ZSTOP_
+      #define Y2_MAX_PIN Z_STOP_PIN
+    #elif Y2_USE_ENDSTOP == _XDIAG_
+      #define Y2_MAX_PIN X_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _YDIAG_
+      #define Y2_MAX_PIN Y_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _ZDIAG_
+      #define Y2_MAX_PIN Z_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E0DIAG_
+      #define Y2_MAX_PIN E0_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E1DIAG_
+      #define Y2_MAX_PIN E1_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E2DIAG_
+      #define Y2_MAX_PIN E2_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E3DIAG_
+      #define Y2_MAX_PIN E3_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E4DIAG_
+      #define Y2_MAX_PIN E4_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E5DIAG_
+      #define Y2_MAX_PIN E5_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E6DIAG_
+      #define Y2_MAX_PIN E6_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E7DIAG_
+      #define Y2_MAX_PIN E7_DIAG_PIN
+    #endif
+  #elif Y_HOME_TO_MIN && !defined(Y2_MIN_PIN)
+    #if PIN_EXISTS(Y2_STOP)
+      #define Y2_MIN_PIN Y2_STOP_PIN
+    #elif Y2_USE_ENDSTOP == _XMIN_
+      #define Y2_MIN_PIN X_MIN_PIN
+    #elif Y2_USE_ENDSTOP == _XMAX_
+      #define Y2_MIN_PIN X_MAX_PIN
+    #elif Y2_USE_ENDSTOP == _XSTOP_
+      #define Y2_MIN_PIN X_STOP_PIN
+    #elif Y2_USE_ENDSTOP == _YMIN_
+      #define Y2_MIN_PIN Y_MIN_PIN
+    #elif Y2_USE_ENDSTOP == _YMAX_
+      #define Y2_MIN_PIN Y_MAX_PIN
+    #elif Y2_USE_ENDSTOP == _YSTOP_
+      #define Y2_MIN_PIN Y_STOP_PIN
+    #elif Y2_USE_ENDSTOP == _ZMIN_
+      #define Y2_MIN_PIN Z_MIN_PIN
+    #elif Y2_USE_ENDSTOP == _ZMAX_
+      #define Y2_MIN_PIN Z_MAX_PIN
+    #elif Y2_USE_ENDSTOP == _ZSTOP_
+      #define Y2_MIN_PIN Z_STOP_PIN
+    #elif Y2_USE_ENDSTOP == _XDIAG_
+      #define Y2_MIN_PIN X_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _YDIAG_
+      #define Y2_MIN_PIN Y_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _ZDIAG_
+      #define Y2_MIN_PIN Z_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E0DIAG_
+      #define Y2_MIN_PIN E0_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E1DIAG_
+      #define Y2_MIN_PIN E1_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E2DIAG_
+      #define Y2_MIN_PIN E2_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E3DIAG_
+      #define Y2_MIN_PIN E3_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E4DIAG_
+      #define Y2_MIN_PIN E4_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E5DIAG_
+      #define Y2_MIN_PIN E5_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E6DIAG_
+      #define Y2_MIN_PIN E6_DIAG_PIN
+    #elif Y2_USE_ENDSTOP == _E7DIAG_
+      #define Y2_MIN_PIN E7_DIAG_PIN
+    #endif
+  #endif
+#endif // Y_DUAL_ENDSTOPS
 
 /**
  * Z_MULTI_ENDSTOPS endstop reassignment
  */
 #if ENABLED(Z_MULTI_ENDSTOPS)
 
-  #if Z_HOME_TO_MAX
-    #ifndef Z2_MAX_PIN
-      #if PIN_EXISTS(Z2_STOP)
-        #define Z2_MAX_PIN Z2_STOP_PIN
-      #elif Z2_USE_ENDSTOP == _XMIN_
-        #define Z2_MAX_PIN X_MIN_PIN
-      #elif Z2_USE_ENDSTOP == _XMAX_
-        #define Z2_MAX_PIN X_MAX_PIN
-      #elif Z2_USE_ENDSTOP == _XSTOP_
-        #define Z2_MAX_PIN X_STOP_PIN
-      #elif Z2_USE_ENDSTOP == _YMIN_
-        #define Z2_MAX_PIN Y_MIN_PIN
-      #elif Z2_USE_ENDSTOP == _YMAX_
-        #define Z2_MAX_PIN Y_MAX_PIN
-      #elif Z2_USE_ENDSTOP == _YSTOP_
-        #define Z2_MAX_PIN Y_STOP_PIN
-      #elif Z2_USE_ENDSTOP == _ZMIN_
-        #define Z2_MAX_PIN Z_MIN_PIN
-      #elif Z2_USE_ENDSTOP == _ZMAX_
-        #define Z2_MAX_PIN Z_MAX_PIN
-      #elif Z2_USE_ENDSTOP == _ZSTOP_
-        #define Z2_MAX_PIN Z_STOP_PIN
-      #elif Z2_USE_ENDSTOP == _XDIAG_
-        #define Z2_MAX_PIN X_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _YDIAG_
-        #define Z2_MAX_PIN Y_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _ZDIAG_
-        #define Z2_MAX_PIN Z_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E0DIAG_
-        #define Z2_MAX_PIN E0_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E1DIAG_
-        #define Z2_MAX_PIN E1_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E2DIAG_
-        #define Z2_MAX_PIN E2_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E3DIAG_
-        #define Z2_MAX_PIN E3_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E4DIAG_
-        #define Z2_MAX_PIN E4_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E5DIAG_
-        #define Z2_MAX_PIN E5_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E6DIAG_
-        #define Z2_MAX_PIN E6_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E7DIAG_
-        #define Z2_MAX_PIN E7_DIAG_PIN
-      #endif
-    #endif
-  #else
-    #ifndef Z2_MIN_PIN
-      #if PIN_EXISTS(Z2_STOP)
-        #define Z2_MIN_PIN Z2_STOP_PIN
-      #elif Z2_USE_ENDSTOP == _XMIN_
-        #define Z2_MIN_PIN X_MIN_PIN
-      #elif Z2_USE_ENDSTOP == _XMAX_
-        #define Z2_MIN_PIN X_MAX_PIN
-      #elif Z2_USE_ENDSTOP == _XSTOP_
-        #define Z2_MIN_PIN X_STOP_PIN
-      #elif Z2_USE_ENDSTOP == _YMIN_
-        #define Z2_MIN_PIN Y_MIN_PIN
-      #elif Z2_USE_ENDSTOP == _YMAX_
-        #define Z2_MIN_PIN Y_MAX_PIN
-      #elif Z2_USE_ENDSTOP == _YSTOP_
-        #define Z2_MIN_PIN Y_STOP_PIN
-      #elif Z2_USE_ENDSTOP == _ZMIN_
-        #define Z2_MIN_PIN Z_MIN_PIN
-      #elif Z2_USE_ENDSTOP == _ZMAX_
-        #define Z2_MIN_PIN Z_MAX_PIN
-      #elif Z2_USE_ENDSTOP == _ZSTOP_
-        #define Z2_MIN_PIN Z_STOP_PIN
-      #elif Z2_USE_ENDSTOP == _XDIAG_
-        #define Z2_MIN_PIN X_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _YDIAG_
-        #define Z2_MIN_PIN Y_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _ZDIAG_
-        #define Z2_MIN_PIN Z_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E0DIAG_
-        #define Z2_MIN_PIN E0_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E1DIAG_
-        #define Z2_MIN_PIN E1_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E2DIAG_
-        #define Z2_MIN_PIN E2_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E3DIAG_
-        #define Z2_MIN_PIN E3_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E4DIAG_
-        #define Z2_MIN_PIN E4_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E5DIAG_
-        #define Z2_MIN_PIN E5_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E6DIAG_
-        #define Z2_MIN_PIN E6_DIAG_PIN
-      #elif Z2_USE_ENDSTOP == _E7DIAG_
-        #define Z2_MIN_PIN E7_DIAG_PIN
-      #endif
+  #if Z_HOME_TO_MAX && !defined(Z2_MAX_PIN)
+    #if PIN_EXISTS(Z2_STOP)
+      #define Z2_MAX_PIN Z2_STOP_PIN
+    #elif Z2_USE_ENDSTOP == _XMIN_
+      #define Z2_MAX_PIN X_MIN_PIN
+    #elif Z2_USE_ENDSTOP == _XMAX_
+      #define Z2_MAX_PIN X_MAX_PIN
+    #elif Z2_USE_ENDSTOP == _XSTOP_
+      #define Z2_MAX_PIN X_STOP_PIN
+    #elif Z2_USE_ENDSTOP == _YMIN_
+      #define Z2_MAX_PIN Y_MIN_PIN
+    #elif Z2_USE_ENDSTOP == _YMAX_
+      #define Z2_MAX_PIN Y_MAX_PIN
+    #elif Z2_USE_ENDSTOP == _YSTOP_
+      #define Z2_MAX_PIN Y_STOP_PIN
+    #elif Z2_USE_ENDSTOP == _ZMIN_
+      #define Z2_MAX_PIN Z_MIN_PIN
+    #elif Z2_USE_ENDSTOP == _ZMAX_
+      #define Z2_MAX_PIN Z_MAX_PIN
+    #elif Z2_USE_ENDSTOP == _ZSTOP_
+      #define Z2_MAX_PIN Z_STOP_PIN
+    #elif Z2_USE_ENDSTOP == _XDIAG_
+      #define Z2_MAX_PIN X_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _YDIAG_
+      #define Z2_MAX_PIN Y_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _ZDIAG_
+      #define Z2_MAX_PIN Z_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E0DIAG_
+      #define Z2_MAX_PIN E0_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E1DIAG_
+      #define Z2_MAX_PIN E1_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E2DIAG_
+      #define Z2_MAX_PIN E2_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E3DIAG_
+      #define Z2_MAX_PIN E3_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E4DIAG_
+      #define Z2_MAX_PIN E4_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E5DIAG_
+      #define Z2_MAX_PIN E5_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E6DIAG_
+      #define Z2_MAX_PIN E6_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E7DIAG_
+      #define Z2_MAX_PIN E7_DIAG_PIN
+    #endif
+  #elif Z_HOME_TO_MIN && !defined(Z2_MIN_PIN)
+    #if PIN_EXISTS(Z2_STOP)
+      #define Z2_MIN_PIN Z2_STOP_PIN
+    #elif Z2_USE_ENDSTOP == _XMIN_
+      #define Z2_MIN_PIN X_MIN_PIN
+    #elif Z2_USE_ENDSTOP == _XMAX_
+      #define Z2_MIN_PIN X_MAX_PIN
+    #elif Z2_USE_ENDSTOP == _XSTOP_
+      #define Z2_MIN_PIN X_STOP_PIN
+    #elif Z2_USE_ENDSTOP == _YMIN_
+      #define Z2_MIN_PIN Y_MIN_PIN
+    #elif Z2_USE_ENDSTOP == _YMAX_
+      #define Z2_MIN_PIN Y_MAX_PIN
+    #elif Z2_USE_ENDSTOP == _YSTOP_
+      #define Z2_MIN_PIN Y_STOP_PIN
+    #elif Z2_USE_ENDSTOP == _ZMIN_
+      #define Z2_MIN_PIN Z_MIN_PIN
+    #elif Z2_USE_ENDSTOP == _ZMAX_
+      #define Z2_MIN_PIN Z_MAX_PIN
+    #elif Z2_USE_ENDSTOP == _ZSTOP_
+      #define Z2_MIN_PIN Z_STOP_PIN
+    #elif Z2_USE_ENDSTOP == _XDIAG_
+      #define Z2_MIN_PIN X_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _YDIAG_
+      #define Z2_MIN_PIN Y_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _ZDIAG_
+      #define Z2_MIN_PIN Z_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E0DIAG_
+      #define Z2_MIN_PIN E0_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E1DIAG_
+      #define Z2_MIN_PIN E1_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E2DIAG_
+      #define Z2_MIN_PIN E2_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E3DIAG_
+      #define Z2_MIN_PIN E3_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E4DIAG_
+      #define Z2_MIN_PIN E4_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E5DIAG_
+      #define Z2_MIN_PIN E5_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E6DIAG_
+      #define Z2_MIN_PIN E6_DIAG_PIN
+    #elif Z2_USE_ENDSTOP == _E7DIAG_
+      #define Z2_MIN_PIN E7_DIAG_PIN
     #endif
   #endif
 
   #if NUM_Z_STEPPERS >= 3
-    #if Z_HOME_TO_MAX
-      #ifndef Z3_MAX_PIN
-        #if PIN_EXISTS(Z3_STOP)
-          #define Z3_MAX_PIN Z3_STOP_PIN
-        #elif Z3_USE_ENDSTOP == _XMIN_
-          #define Z3_MAX_PIN X_MIN_PIN
-        #elif Z3_USE_ENDSTOP == _XMAX_
-          #define Z3_MAX_PIN X_MAX_PIN
-        #elif Z3_USE_ENDSTOP == _XSTOP_
-          #define Z3_MAX_PIN X_STOP_PIN
-        #elif Z3_USE_ENDSTOP == _YMIN_
-          #define Z3_MAX_PIN Y_MIN_PIN
-        #elif Z3_USE_ENDSTOP == _YMAX_
-          #define Z3_MAX_PIN Y_MAX_PIN
-        #elif Z3_USE_ENDSTOP == _YSTOP_
-          #define Z3_MAX_PIN Y_STOP_PIN
-        #elif Z3_USE_ENDSTOP == _ZMIN_
-          #define Z3_MAX_PIN Z_MIN_PIN
-        #elif Z3_USE_ENDSTOP == _ZMAX_
-          #define Z3_MAX_PIN Z_MAX_PIN
-        #elif Z3_USE_ENDSTOP == _ZSTOP_
-          #define Z3_MAX_PIN Z_STOP_PIN
-        #elif Z3_USE_ENDSTOP == _XDIAG_
-          #define Z3_MAX_PIN X_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _YDIAG_
-          #define Z3_MAX_PIN Y_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _ZDIAG_
-          #define Z3_MAX_PIN Z_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E0DIAG_
-          #define Z3_MAX_PIN E0_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E1DIAG_
-          #define Z3_MAX_PIN E1_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E2DIAG_
-          #define Z3_MAX_PIN E2_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E3DIAG_
-          #define Z3_MAX_PIN E3_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E4DIAG_
-          #define Z3_MAX_PIN E4_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E5DIAG_
-          #define Z3_MAX_PIN E5_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E6DIAG_
-          #define Z3_MAX_PIN E6_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E7DIAG_
-          #define Z3_MAX_PIN E7_DIAG_PIN
-        #endif
+    #if Z_HOME_TO_MAX && !defined(Z3_MAX_PIN)
+      #if PIN_EXISTS(Z3_STOP)
+        #define Z3_MAX_PIN Z3_STOP_PIN
+      #elif Z3_USE_ENDSTOP == _XMIN_
+        #define Z3_MAX_PIN X_MIN_PIN
+      #elif Z3_USE_ENDSTOP == _XMAX_
+        #define Z3_MAX_PIN X_MAX_PIN
+      #elif Z3_USE_ENDSTOP == _XSTOP_
+        #define Z3_MAX_PIN X_STOP_PIN
+      #elif Z3_USE_ENDSTOP == _YMIN_
+        #define Z3_MAX_PIN Y_MIN_PIN
+      #elif Z3_USE_ENDSTOP == _YMAX_
+        #define Z3_MAX_PIN Y_MAX_PIN
+      #elif Z3_USE_ENDSTOP == _YSTOP_
+        #define Z3_MAX_PIN Y_STOP_PIN
+      #elif Z3_USE_ENDSTOP == _ZMIN_
+        #define Z3_MAX_PIN Z_MIN_PIN
+      #elif Z3_USE_ENDSTOP == _ZMAX_
+        #define Z3_MAX_PIN Z_MAX_PIN
+      #elif Z3_USE_ENDSTOP == _ZSTOP_
+        #define Z3_MAX_PIN Z_STOP_PIN
+      #elif Z3_USE_ENDSTOP == _XDIAG_
+        #define Z3_MAX_PIN X_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _YDIAG_
+        #define Z3_MAX_PIN Y_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _ZDIAG_
+        #define Z3_MAX_PIN Z_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E0DIAG_
+        #define Z3_MAX_PIN E0_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E1DIAG_
+        #define Z3_MAX_PIN E1_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E2DIAG_
+        #define Z3_MAX_PIN E2_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E3DIAG_
+        #define Z3_MAX_PIN E3_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E4DIAG_
+        #define Z3_MAX_PIN E4_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E5DIAG_
+        #define Z3_MAX_PIN E5_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E6DIAG_
+        #define Z3_MAX_PIN E6_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E7DIAG_
+        #define Z3_MAX_PIN E7_DIAG_PIN
       #endif
-    #else
-      #ifndef Z3_MIN_PIN
-        #if PIN_EXISTS(Z3_STOP)
-          #define Z3_MIN_PIN Z3_STOP_PIN
-        #elif Z3_USE_ENDSTOP == _XMIN_
-          #define Z3_MIN_PIN X_MIN_PIN
-        #elif Z3_USE_ENDSTOP == _XMAX_
-          #define Z3_MIN_PIN X_MAX_PIN
-        #elif Z3_USE_ENDSTOP == _XSTOP_
-          #define Z3_MIN_PIN X_STOP_PIN
-        #elif Z3_USE_ENDSTOP == _YMIN_
-          #define Z3_MIN_PIN Y_MIN_PIN
-        #elif Z3_USE_ENDSTOP == _YMAX_
-          #define Z3_MIN_PIN Y_MAX_PIN
-        #elif Z3_USE_ENDSTOP == _YSTOP_
-          #define Z3_MIN_PIN Y_STOP_PIN
-        #elif Z3_USE_ENDSTOP == _ZMIN_
-          #define Z3_MIN_PIN Z_MIN_PIN
-        #elif Z3_USE_ENDSTOP == _ZMAX_
-          #define Z3_MIN_PIN Z_MAX_PIN
-        #elif Z3_USE_ENDSTOP == _ZSTOP_
-          #define Z3_MIN_PIN Z_STOP_PIN
-        #elif Z3_USE_ENDSTOP == _XDIAG_
-          #define Z3_MIN_PIN X_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _YDIAG_
-          #define Z3_MIN_PIN Y_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _ZDIAG_
-          #define Z3_MIN_PIN Z_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E0DIAG_
-          #define Z3_MIN_PIN E0_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E1DIAG_
-          #define Z3_MIN_PIN E1_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E2DIAG_
-          #define Z3_MIN_PIN E2_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E3DIAG_
-          #define Z3_MIN_PIN E3_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E4DIAG_
-          #define Z3_MIN_PIN E4_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E5DIAG_
-          #define Z3_MIN_PIN E5_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E6DIAG_
-          #define Z3_MIN_PIN E6_DIAG_PIN
-        #elif Z3_USE_ENDSTOP == _E7DIAG_
-          #define Z3_MIN_PIN E7_DIAG_PIN
-        #endif
+    #elif Z_HOME_TO_MIN && !defined(Z3_MIN_PIN)
+      #if PIN_EXISTS(Z3_STOP)
+        #define Z3_MIN_PIN Z3_STOP_PIN
+      #elif Z3_USE_ENDSTOP == _XMIN_
+        #define Z3_MIN_PIN X_MIN_PIN
+      #elif Z3_USE_ENDSTOP == _XMAX_
+        #define Z3_MIN_PIN X_MAX_PIN
+      #elif Z3_USE_ENDSTOP == _XSTOP_
+        #define Z3_MIN_PIN X_STOP_PIN
+      #elif Z3_USE_ENDSTOP == _YMIN_
+        #define Z3_MIN_PIN Y_MIN_PIN
+      #elif Z3_USE_ENDSTOP == _YMAX_
+        #define Z3_MIN_PIN Y_MAX_PIN
+      #elif Z3_USE_ENDSTOP == _YSTOP_
+        #define Z3_MIN_PIN Y_STOP_PIN
+      #elif Z3_USE_ENDSTOP == _ZMIN_
+        #define Z3_MIN_PIN Z_MIN_PIN
+      #elif Z3_USE_ENDSTOP == _ZMAX_
+        #define Z3_MIN_PIN Z_MAX_PIN
+      #elif Z3_USE_ENDSTOP == _ZSTOP_
+        #define Z3_MIN_PIN Z_STOP_PIN
+      #elif Z3_USE_ENDSTOP == _XDIAG_
+        #define Z3_MIN_PIN X_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _YDIAG_
+        #define Z3_MIN_PIN Y_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _ZDIAG_
+        #define Z3_MIN_PIN Z_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E0DIAG_
+        #define Z3_MIN_PIN E0_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E1DIAG_
+        #define Z3_MIN_PIN E1_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E2DIAG_
+        #define Z3_MIN_PIN E2_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E3DIAG_
+        #define Z3_MIN_PIN E3_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E4DIAG_
+        #define Z3_MIN_PIN E4_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E5DIAG_
+        #define Z3_MIN_PIN E5_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E6DIAG_
+        #define Z3_MIN_PIN E6_DIAG_PIN
+      #elif Z3_USE_ENDSTOP == _E7DIAG_
+        #define Z3_MIN_PIN E7_DIAG_PIN
       #endif
     #endif
   #endif
 
   #if NUM_Z_STEPPERS >= 4
-    #if Z_HOME_TO_MAX
-      #ifndef Z4_MAX_PIN
-        #if PIN_EXISTS(Z4_STOP)
-          #define Z4_MAX_PIN Z4_STOP_PIN
-        #elif Z4_USE_ENDSTOP == _XMIN_
-          #define Z4_MAX_PIN X_MIN_PIN
-        #elif Z4_USE_ENDSTOP == _XMAX_
-          #define Z4_MAX_PIN X_MAX_PIN
-        #elif Z4_USE_ENDSTOP == _XSTOP_
-          #define Z4_MAX_PIN X_STOP_PIN
-        #elif Z4_USE_ENDSTOP == _YMIN_
-          #define Z4_MAX_PIN Y_MIN_PIN
-        #elif Z4_USE_ENDSTOP == _YMAX_
-          #define Z4_MAX_PIN Y_MAX_PIN
-        #elif Z4_USE_ENDSTOP == _YSTOP_
-          #define Z4_MAX_PIN Y_STOP_PIN
-        #elif Z4_USE_ENDSTOP == _ZMIN_
-          #define Z4_MAX_PIN Z_MIN_PIN
-        #elif Z4_USE_ENDSTOP == _ZMAX_
-          #define Z4_MAX_PIN Z_MAX_PIN
-        #elif Z4_USE_ENDSTOP == _ZSTOP_
-          #define Z4_MAX_PIN Z_STOP_PIN
-        #elif Z4_USE_ENDSTOP == _XDIAG_
-          #define Z4_MAX_PIN X_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _YDIAG_
-          #define Z4_MAX_PIN Y_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _ZDIAG_
-          #define Z4_MAX_PIN Z_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E0DIAG_
-          #define Z4_MAX_PIN E0_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E1DIAG_
-          #define Z4_MAX_PIN E1_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E2DIAG_
-          #define Z4_MAX_PIN E2_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E3DIAG_
-          #define Z4_MAX_PIN E3_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E4DIAG_
-          #define Z4_MAX_PIN E4_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E5DIAG_
-          #define Z4_MAX_PIN E5_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E6DIAG_
-          #define Z4_MAX_PIN E6_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E7DIAG_
-          #define Z4_MAX_PIN E7_DIAG_PIN
-        #endif
+    #if Z_HOME_TO_MAX && !defined(Z4_MAX_PIN)
+      #if PIN_EXISTS(Z4_STOP)
+        #define Z4_MAX_PIN Z4_STOP_PIN
+      #elif Z4_USE_ENDSTOP == _XMIN_
+        #define Z4_MAX_PIN X_MIN_PIN
+      #elif Z4_USE_ENDSTOP == _XMAX_
+        #define Z4_MAX_PIN X_MAX_PIN
+      #elif Z4_USE_ENDSTOP == _XSTOP_
+        #define Z4_MAX_PIN X_STOP_PIN
+      #elif Z4_USE_ENDSTOP == _YMIN_
+        #define Z4_MAX_PIN Y_MIN_PIN
+      #elif Z4_USE_ENDSTOP == _YMAX_
+        #define Z4_MAX_PIN Y_MAX_PIN
+      #elif Z4_USE_ENDSTOP == _YSTOP_
+        #define Z4_MAX_PIN Y_STOP_PIN
+      #elif Z4_USE_ENDSTOP == _ZMIN_
+        #define Z4_MAX_PIN Z_MIN_PIN
+      #elif Z4_USE_ENDSTOP == _ZMAX_
+        #define Z4_MAX_PIN Z_MAX_PIN
+      #elif Z4_USE_ENDSTOP == _ZSTOP_
+        #define Z4_MAX_PIN Z_STOP_PIN
+      #elif Z4_USE_ENDSTOP == _XDIAG_
+        #define Z4_MAX_PIN X_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _YDIAG_
+        #define Z4_MAX_PIN Y_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _ZDIAG_
+        #define Z4_MAX_PIN Z_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E0DIAG_
+        #define Z4_MAX_PIN E0_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E1DIAG_
+        #define Z4_MAX_PIN E1_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E2DIAG_
+        #define Z4_MAX_PIN E2_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E3DIAG_
+        #define Z4_MAX_PIN E3_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E4DIAG_
+        #define Z4_MAX_PIN E4_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E5DIAG_
+        #define Z4_MAX_PIN E5_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E6DIAG_
+        #define Z4_MAX_PIN E6_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E7DIAG_
+        #define Z4_MAX_PIN E7_DIAG_PIN
       #endif
-    #else
-      #ifndef Z4_MIN_PIN
-        #if PIN_EXISTS(Z4_STOP)
-          #define Z4_MIN_PIN Z4_STOP_PIN
-        #elif Z4_USE_ENDSTOP == _XMIN_
-          #define Z4_MIN_PIN X_MIN_PIN
-        #elif Z4_USE_ENDSTOP == _XMAX_
-          #define Z4_MIN_PIN X_MAX_PIN
-        #elif Z4_USE_ENDSTOP == _XSTOP_
-          #define Z4_MIN_PIN X_STOP_PIN
-        #elif Z4_USE_ENDSTOP == _YMIN_
-          #define Z4_MIN_PIN Y_MIN_PIN
-        #elif Z4_USE_ENDSTOP == _YMAX_
-          #define Z4_MIN_PIN Y_MAX_PIN
-        #elif Z4_USE_ENDSTOP == _YSTOP_
-          #define Z4_MIN_PIN Y_STOP_PIN
-        #elif Z4_USE_ENDSTOP == _ZMIN_
-          #define Z4_MIN_PIN Z_MIN_PIN
-        #elif Z4_USE_ENDSTOP == _ZMAX_
-          #define Z4_MIN_PIN Z_MAX_PIN
-        #elif Z4_USE_ENDSTOP == _ZSTOP_
-          #define Z4_MIN_PIN Z_STOP_PIN
-        #elif Z4_USE_ENDSTOP == _XDIAG_
-          #define Z4_MIN_PIN X_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _YDIAG_
-          #define Z4_MIN_PIN Y_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _ZDIAG_
-          #define Z4_MIN_PIN Z_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E0DIAG_
-          #define Z4_MIN_PIN E0_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E1DIAG_
-          #define Z4_MIN_PIN E1_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E2DIAG_
-          #define Z4_MIN_PIN E2_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E3DIAG_
-          #define Z4_MIN_PIN E3_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E4DIAG_
-          #define Z4_MIN_PIN E4_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E5DIAG_
-          #define Z4_MIN_PIN E5_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E6DIAG_
-          #define Z4_MIN_PIN E6_DIAG_PIN
-        #elif Z4_USE_ENDSTOP == _E7DIAG_
-          #define Z4_MIN_PIN E7_DIAG_PIN
-        #endif
+    #elif Z_HOME_TO_MIN && !defined(Z4_MIN_PIN)
+      #if PIN_EXISTS(Z4_STOP)
+        #define Z4_MIN_PIN Z4_STOP_PIN
+      #elif Z4_USE_ENDSTOP == _XMIN_
+        #define Z4_MIN_PIN X_MIN_PIN
+      #elif Z4_USE_ENDSTOP == _XMAX_
+        #define Z4_MIN_PIN X_MAX_PIN
+      #elif Z4_USE_ENDSTOP == _XSTOP_
+        #define Z4_MIN_PIN X_STOP_PIN
+      #elif Z4_USE_ENDSTOP == _YMIN_
+        #define Z4_MIN_PIN Y_MIN_PIN
+      #elif Z4_USE_ENDSTOP == _YMAX_
+        #define Z4_MIN_PIN Y_MAX_PIN
+      #elif Z4_USE_ENDSTOP == _YSTOP_
+        #define Z4_MIN_PIN Y_STOP_PIN
+      #elif Z4_USE_ENDSTOP == _ZMIN_
+        #define Z4_MIN_PIN Z_MIN_PIN
+      #elif Z4_USE_ENDSTOP == _ZMAX_
+        #define Z4_MIN_PIN Z_MAX_PIN
+      #elif Z4_USE_ENDSTOP == _ZSTOP_
+        #define Z4_MIN_PIN Z_STOP_PIN
+      #elif Z4_USE_ENDSTOP == _XDIAG_
+        #define Z4_MIN_PIN X_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _YDIAG_
+        #define Z4_MIN_PIN Y_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _ZDIAG_
+        #define Z4_MIN_PIN Z_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E0DIAG_
+        #define Z4_MIN_PIN E0_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E1DIAG_
+        #define Z4_MIN_PIN E1_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E2DIAG_
+        #define Z4_MIN_PIN E2_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E3DIAG_
+        #define Z4_MIN_PIN E3_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E4DIAG_
+        #define Z4_MIN_PIN E4_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E5DIAG_
+        #define Z4_MIN_PIN E5_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E6DIAG_
+        #define Z4_MIN_PIN E6_DIAG_PIN
+      #elif Z4_USE_ENDSTOP == _E7DIAG_
+        #define Z4_MIN_PIN E7_DIAG_PIN
       #endif
     #endif
   #endif
 
 #endif // Z_MULTI_ENDSTOPS
 
 //
 // Default DOGLCD SPI delays
 //
 #if !IS_U8GLIB_ST7920

commit 2e4bf0ab9b2b4db545665bf976d2e0738c237b80
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 25 18:20:14 2023 -0500

    🎨 Rename FAN_PIN to FAN0_PIN (#25568)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 8906c3cafb..708eb7f8e6 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -370,24 +370,23 @@
 #if !PIN_EXISTS(V_SERIAL_RX)
   #undef V_SERIAL_RX_PIN
 #endif
 #if !PIN_EXISTS(W_SERIAL_TX)
   #undef W_SERIAL_TX_PIN
 #endif
 #if !PIN_EXISTS(W_SERIAL_RX)
   #undef W_SERIAL_RX_PIN
 #endif
 
-#ifndef FAN_PIN
-  #define FAN_PIN -1
+#ifndef FAN0_PIN
+  #define FAN0_PIN -1
 #endif
-#define FAN0_PIN FAN_PIN
 #ifndef FAN1_PIN
   #define FAN1_PIN -1
 #endif
 #ifndef FAN2_PIN
   #define FAN2_PIN -1
 #endif
 #ifndef CONTROLLER_FAN_PIN
   #define CONTROLLER_FAN_PIN  -1
 #endif
 

commit 28b101cceff79eaf1401b583a05e0251b1e6e55c
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Fri Mar 10 15:56:33 2023 -0800

    ✨ BTT Octopus Max EZ 1.0, SKR 3.0 / 3.0 EZ (#25387)
    
    BTT Octopus Max EZ V1.0 (STM32H723VE/ZE), SKR V3.0 / V3.0 EZ (STM32H723VG)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 5b5cbcd214..8906c3cafb 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -480,20 +480,25 @@
   #define SUICIDE_PIN -1
 #endif
 #ifndef SUICIDE_PIN_STATE
   #define SUICIDE_PIN_STATE LOW
 #endif
 
 #ifndef NUM_SERVO_PLUGS
   #define NUM_SERVO_PLUGS 4
 #endif
 
+// Only used within pins files
+#undef NEEDS_X_MINMAX
+#undef NEEDS_Y_MINMAX
+#undef NEEDS_Z_MINMAX
+
 //
 // Assign endstop pins for boards with only 3 connectors
 //
 #ifdef X_STOP_PIN
   #if X_HOME_TO_MIN
     #define X_MIN_PIN X_STOP_PIN
     #ifndef X_MAX_PIN
       #define X_MAX_PIN -1
     #endif
   #else

commit 9949672f1d303d786e20cd053701fcd5c61de736
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sun Dec 11 04:00:51 2022 +1300

    📌 Pins updates for Longer LK5, etc. (#25012)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 1e5265b596..5b5cbcd214 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -708,20 +708,22 @@
   #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN  // Filament Sensor first pin alias
 #else
   #undef FIL_RUNOUT_PIN
   #undef FIL_RUNOUT1_PIN
 #endif
 
 #if NUM_RUNOUT_SENSORS < 2
   #undef FIL_RUNOUT2_PIN
 #endif
 
+#undef LCD_PINS_DEFINED
+
 #ifndef LCD_PINS_D4
   #define LCD_PINS_D4 -1
 #endif
 
 #if HAS_MARLINUI_HD44780 || TOUCH_UI_ULTIPANEL
   #ifndef LCD_PINS_D5
     #define LCD_PINS_D5 -1
   #endif
   #ifndef LCD_PINS_D6
     #define LCD_PINS_D6 -1

commit 739556905575e967e10b1e164ae549be28772964
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Nov 11 20:35:07 2022 -0600

    🐛 Fix Anycubic / Trigorilla pins, etc. (#24971)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 7656037f3d..1e5265b596 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -1850,20 +1850,511 @@
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPERS < 3 || Z_HOME_TO_MIN
   #undef Z3_MAX_PIN
 #endif
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPERS < 4 || Z_HOME_TO_MAX
   #undef Z4_MIN_PIN
 #endif
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPERS < 4 || Z_HOME_TO_MIN
   #undef Z4_MAX_PIN
 #endif
 
+/**
+ * X_DUAL_ENDSTOPS endstop reassignment
+ */
+#if ENABLED(X_DUAL_ENDSTOPS)
+  #if X_HOME_TO_MAX
+    #ifndef X2_MAX_PIN
+      #if PIN_EXISTS(X2_STOP)
+        #define X2_MAX_PIN X2_STOP_PIN
+      #elif X2_USE_ENDSTOP == _XMIN_
+        #define X2_MAX_PIN X_MIN_PIN
+      #elif X2_USE_ENDSTOP == _XMAX_
+        #define X2_MAX_PIN X_MAX_PIN
+      #elif X2_USE_ENDSTOP == _XSTOP_
+        #define X2_MAX_PIN X_STOP_PIN
+      #elif X2_USE_ENDSTOP == _YMIN_
+        #define X2_MAX_PIN Y_MIN_PIN
+      #elif X2_USE_ENDSTOP == _YMAX_
+        #define X2_MAX_PIN Y_MAX_PIN
+      #elif X2_USE_ENDSTOP == _YSTOP_
+        #define X2_MAX_PIN Y_STOP_PIN
+      #elif X2_USE_ENDSTOP == _ZMIN_
+        #define X2_MAX_PIN Z_MIN_PIN
+      #elif X2_USE_ENDSTOP == _ZMAX_
+        #define X2_MAX_PIN Z_MAX_PIN
+      #elif X2_USE_ENDSTOP == _ZSTOP_
+        #define X2_MAX_PIN Z_STOP_PIN
+      #elif X2_USE_ENDSTOP == _XDIAG_
+        #define X2_MAX_PIN X_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _YDIAG_
+        #define X2_MAX_PIN Y_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _ZDIAG_
+        #define X2_MAX_PIN Z_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E0DIAG_
+        #define X2_MAX_PIN E0_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E1DIAG_
+        #define X2_MAX_PIN E1_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E2DIAG_
+        #define X2_MAX_PIN E2_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E3DIAG_
+        #define X2_MAX_PIN E3_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E4DIAG_
+        #define X2_MAX_PIN E4_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E5DIAG_
+        #define X2_MAX_PIN E5_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E6DIAG_
+        #define X2_MAX_PIN E6_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E7DIAG_
+        #define X2_MAX_PIN E7_DIAG_PIN
+      #endif
+    #endif
+  #else
+    #ifndef X2_MIN_PIN
+      #if PIN_EXISTS(X2_STOP)
+        #define X2_MIN_PIN X2_STOP_PIN
+      #elif X2_USE_ENDSTOP == _XMIN_
+        #define X2_MIN_PIN X_MIN_PIN
+      #elif X2_USE_ENDSTOP == _XMAX_
+        #define X2_MIN_PIN X_MAX_PIN
+      #elif X2_USE_ENDSTOP == _XSTOP_
+        #define X2_MIN_PIN X_STOP_PIN
+      #elif X2_USE_ENDSTOP == _YMIN_
+        #define X2_MIN_PIN Y_MIN_PIN
+      #elif X2_USE_ENDSTOP == _YMAX_
+        #define X2_MIN_PIN Y_MAX_PIN
+      #elif X2_USE_ENDSTOP == _YSTOP_
+        #define X2_MIN_PIN Y_STOP_PIN
+      #elif X2_USE_ENDSTOP == _ZMIN_
+        #define X2_MIN_PIN Z_MIN_PIN
+      #elif X2_USE_ENDSTOP == _ZMAX_
+        #define X2_MIN_PIN Z_MAX_PIN
+      #elif X2_USE_ENDSTOP == _ZSTOP_
+        #define X2_MIN_PIN Z_STOP_PIN
+      #elif X2_USE_ENDSTOP == _XDIAG_
+        #define X2_MIN_PIN X_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _YDIAG_
+        #define X2_MIN_PIN Y_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _ZDIAG_
+        #define X2_MIN_PIN Z_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E0DIAG_
+        #define X2_MIN_PIN E0_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E1DIAG_
+        #define X2_MIN_PIN E1_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E2DIAG_
+        #define X2_MIN_PIN E2_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E3DIAG_
+        #define X2_MIN_PIN E3_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E4DIAG_
+        #define X2_MIN_PIN E4_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E5DIAG_
+        #define X2_MIN_PIN E5_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E6DIAG_
+        #define X2_MIN_PIN E6_DIAG_PIN
+      #elif X2_USE_ENDSTOP == _E7DIAG_
+        #define X2_MIN_PIN E7_DIAG_PIN
+      #endif
+    #endif
+  #endif
+#endif
+
+/**
+ * Y_DUAL_ENDSTOPS endstop reassignment
+ */
+#if ENABLED(Y_DUAL_ENDSTOPS)
+  #if Y_HOME_TO_MAX
+    #ifndef Y2_MAX_PIN
+      #if PIN_EXISTS(Y2_STOP)
+        #define Y2_MAX_PIN Y2_STOP_PIN
+      #elif Y2_USE_ENDSTOP == _XMIN_
+        #define Y2_MAX_PIN X_MIN_PIN
+      #elif Y2_USE_ENDSTOP == _XMAX_
+        #define Y2_MAX_PIN X_MAX_PIN
+      #elif Y2_USE_ENDSTOP == _XSTOP_
+        #define Y2_MAX_PIN X_STOP_PIN
+      #elif Y2_USE_ENDSTOP == _YMIN_
+        #define Y2_MAX_PIN Y_MIN_PIN
+      #elif Y2_USE_ENDSTOP == _YMAX_
+        #define Y2_MAX_PIN Y_MAX_PIN
+      #elif Y2_USE_ENDSTOP == _YSTOP_
+        #define Y2_MAX_PIN Y_STOP_PIN
+      #elif Y2_USE_ENDSTOP == _ZMIN_
+        #define Y2_MAX_PIN Z_MIN_PIN
+      #elif Y2_USE_ENDSTOP == _ZMAX_
+        #define Y2_MAX_PIN Z_MAX_PIN
+      #elif Y2_USE_ENDSTOP == _ZSTOP_
+        #define Y2_MAX_PIN Z_STOP_PIN
+      #elif Y2_USE_ENDSTOP == _XDIAG_
+        #define Y2_MAX_PIN X_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _YDIAG_
+        #define Y2_MAX_PIN Y_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _ZDIAG_
+        #define Y2_MAX_PIN Z_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E0DIAG_
+        #define Y2_MAX_PIN E0_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E1DIAG_
+        #define Y2_MAX_PIN E1_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E2DIAG_
+        #define Y2_MAX_PIN E2_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E3DIAG_
+        #define Y2_MAX_PIN E3_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E4DIAG_
+        #define Y2_MAX_PIN E4_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E5DIAG_
+        #define Y2_MAX_PIN E5_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E6DIAG_
+        #define Y2_MAX_PIN E6_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E7DIAG_
+        #define Y2_MAX_PIN E7_DIAG_PIN
+      #endif
+    #endif
+  #else
+    #ifndef Y2_MIN_PIN
+      #if PIN_EXISTS(Y2_STOP)
+        #define Y2_MIN_PIN Y2_STOP_PIN
+      #elif Y2_USE_ENDSTOP == _XMIN_
+        #define Y2_MIN_PIN X_MIN_PIN
+      #elif Y2_USE_ENDSTOP == _XMAX_
+        #define Y2_MIN_PIN X_MAX_PIN
+      #elif Y2_USE_ENDSTOP == _XSTOP_
+        #define Y2_MIN_PIN X_STOP_PIN
+      #elif Y2_USE_ENDSTOP == _YMIN_
+        #define Y2_MIN_PIN Y_MIN_PIN
+      #elif Y2_USE_ENDSTOP == _YMAX_
+        #define Y2_MIN_PIN Y_MAX_PIN
+      #elif Y2_USE_ENDSTOP == _YSTOP_
+        #define Y2_MIN_PIN Y_STOP_PIN
+      #elif Y2_USE_ENDSTOP == _ZMIN_
+        #define Y2_MIN_PIN Z_MIN_PIN
+      #elif Y2_USE_ENDSTOP == _ZMAX_
+        #define Y2_MIN_PIN Z_MAX_PIN
+      #elif Y2_USE_ENDSTOP == _ZSTOP_
+        #define Y2_MIN_PIN Z_STOP_PIN
+      #elif Y2_USE_ENDSTOP == _XDIAG_
+        #define Y2_MIN_PIN X_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _YDIAG_
+        #define Y2_MIN_PIN Y_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _ZDIAG_
+        #define Y2_MIN_PIN Z_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E0DIAG_
+        #define Y2_MIN_PIN E0_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E1DIAG_
+        #define Y2_MIN_PIN E1_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E2DIAG_
+        #define Y2_MIN_PIN E2_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E3DIAG_
+        #define Y2_MIN_PIN E3_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E4DIAG_
+        #define Y2_MIN_PIN E4_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E5DIAG_
+        #define Y2_MIN_PIN E5_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E6DIAG_
+        #define Y2_MIN_PIN E6_DIAG_PIN
+      #elif Y2_USE_ENDSTOP == _E7DIAG_
+        #define Y2_MIN_PIN E7_DIAG_PIN
+      #endif
+    #endif
+  #endif
+#endif
+
+/**
+ * Z_MULTI_ENDSTOPS endstop reassignment
+ */
+#if ENABLED(Z_MULTI_ENDSTOPS)
+
+  #if Z_HOME_TO_MAX
+    #ifndef Z2_MAX_PIN
+      #if PIN_EXISTS(Z2_STOP)
+        #define Z2_MAX_PIN Z2_STOP_PIN
+      #elif Z2_USE_ENDSTOP == _XMIN_
+        #define Z2_MAX_PIN X_MIN_PIN
+      #elif Z2_USE_ENDSTOP == _XMAX_
+        #define Z2_MAX_PIN X_MAX_PIN
+      #elif Z2_USE_ENDSTOP == _XSTOP_
+        #define Z2_MAX_PIN X_STOP_PIN
+      #elif Z2_USE_ENDSTOP == _YMIN_
+        #define Z2_MAX_PIN Y_MIN_PIN
+      #elif Z2_USE_ENDSTOP == _YMAX_
+        #define Z2_MAX_PIN Y_MAX_PIN
+      #elif Z2_USE_ENDSTOP == _YSTOP_
+        #define Z2_MAX_PIN Y_STOP_PIN
+      #elif Z2_USE_ENDSTOP == _ZMIN_
+        #define Z2_MAX_PIN Z_MIN_PIN
+      #elif Z2_USE_ENDSTOP == _ZMAX_
+        #define Z2_MAX_PIN Z_MAX_PIN
+      #elif Z2_USE_ENDSTOP == _ZSTOP_
+        #define Z2_MAX_PIN Z_STOP_PIN
+      #elif Z2_USE_ENDSTOP == _XDIAG_
+        #define Z2_MAX_PIN X_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _YDIAG_
+        #define Z2_MAX_PIN Y_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _ZDIAG_
+        #define Z2_MAX_PIN Z_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E0DIAG_
+        #define Z2_MAX_PIN E0_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E1DIAG_
+        #define Z2_MAX_PIN E1_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E2DIAG_
+        #define Z2_MAX_PIN E2_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E3DIAG_
+        #define Z2_MAX_PIN E3_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E4DIAG_
+        #define Z2_MAX_PIN E4_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E5DIAG_
+        #define Z2_MAX_PIN E5_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E6DIAG_
+        #define Z2_MAX_PIN E6_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E7DIAG_
+        #define Z2_MAX_PIN E7_DIAG_PIN
+      #endif
+    #endif
+  #else
+    #ifndef Z2_MIN_PIN
+      #if PIN_EXISTS(Z2_STOP)
+        #define Z2_MIN_PIN Z2_STOP_PIN
+      #elif Z2_USE_ENDSTOP == _XMIN_
+        #define Z2_MIN_PIN X_MIN_PIN
+      #elif Z2_USE_ENDSTOP == _XMAX_
+        #define Z2_MIN_PIN X_MAX_PIN
+      #elif Z2_USE_ENDSTOP == _XSTOP_
+        #define Z2_MIN_PIN X_STOP_PIN
+      #elif Z2_USE_ENDSTOP == _YMIN_
+        #define Z2_MIN_PIN Y_MIN_PIN
+      #elif Z2_USE_ENDSTOP == _YMAX_
+        #define Z2_MIN_PIN Y_MAX_PIN
+      #elif Z2_USE_ENDSTOP == _YSTOP_
+        #define Z2_MIN_PIN Y_STOP_PIN
+      #elif Z2_USE_ENDSTOP == _ZMIN_
+        #define Z2_MIN_PIN Z_MIN_PIN
+      #elif Z2_USE_ENDSTOP == _ZMAX_
+        #define Z2_MIN_PIN Z_MAX_PIN
+      #elif Z2_USE_ENDSTOP == _ZSTOP_
+        #define Z2_MIN_PIN Z_STOP_PIN
+      #elif Z2_USE_ENDSTOP == _XDIAG_
+        #define Z2_MIN_PIN X_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _YDIAG_
+        #define Z2_MIN_PIN Y_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _ZDIAG_
+        #define Z2_MIN_PIN Z_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E0DIAG_
+        #define Z2_MIN_PIN E0_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E1DIAG_
+        #define Z2_MIN_PIN E1_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E2DIAG_
+        #define Z2_MIN_PIN E2_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E3DIAG_
+        #define Z2_MIN_PIN E3_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E4DIAG_
+        #define Z2_MIN_PIN E4_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E5DIAG_
+        #define Z2_MIN_PIN E5_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E6DIAG_
+        #define Z2_MIN_PIN E6_DIAG_PIN
+      #elif Z2_USE_ENDSTOP == _E7DIAG_
+        #define Z2_MIN_PIN E7_DIAG_PIN
+      #endif
+    #endif
+  #endif
+
+  #if NUM_Z_STEPPERS >= 3
+    #if Z_HOME_TO_MAX
+      #ifndef Z3_MAX_PIN
+        #if PIN_EXISTS(Z3_STOP)
+          #define Z3_MAX_PIN Z3_STOP_PIN
+        #elif Z3_USE_ENDSTOP == _XMIN_
+          #define Z3_MAX_PIN X_MIN_PIN
+        #elif Z3_USE_ENDSTOP == _XMAX_
+          #define Z3_MAX_PIN X_MAX_PIN
+        #elif Z3_USE_ENDSTOP == _XSTOP_
+          #define Z3_MAX_PIN X_STOP_PIN
+        #elif Z3_USE_ENDSTOP == _YMIN_
+          #define Z3_MAX_PIN Y_MIN_PIN
+        #elif Z3_USE_ENDSTOP == _YMAX_
+          #define Z3_MAX_PIN Y_MAX_PIN
+        #elif Z3_USE_ENDSTOP == _YSTOP_
+          #define Z3_MAX_PIN Y_STOP_PIN
+        #elif Z3_USE_ENDSTOP == _ZMIN_
+          #define Z3_MAX_PIN Z_MIN_PIN
+        #elif Z3_USE_ENDSTOP == _ZMAX_
+          #define Z3_MAX_PIN Z_MAX_PIN
+        #elif Z3_USE_ENDSTOP == _ZSTOP_
+          #define Z3_MAX_PIN Z_STOP_PIN
+        #elif Z3_USE_ENDSTOP == _XDIAG_
+          #define Z3_MAX_PIN X_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _YDIAG_
+          #define Z3_MAX_PIN Y_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _ZDIAG_
+          #define Z3_MAX_PIN Z_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E0DIAG_
+          #define Z3_MAX_PIN E0_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E1DIAG_
+          #define Z3_MAX_PIN E1_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E2DIAG_
+          #define Z3_MAX_PIN E2_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E3DIAG_
+          #define Z3_MAX_PIN E3_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E4DIAG_
+          #define Z3_MAX_PIN E4_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E5DIAG_
+          #define Z3_MAX_PIN E5_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E6DIAG_
+          #define Z3_MAX_PIN E6_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E7DIAG_
+          #define Z3_MAX_PIN E7_DIAG_PIN
+        #endif
+      #endif
+    #else
+      #ifndef Z3_MIN_PIN
+        #if PIN_EXISTS(Z3_STOP)
+          #define Z3_MIN_PIN Z3_STOP_PIN
+        #elif Z3_USE_ENDSTOP == _XMIN_
+          #define Z3_MIN_PIN X_MIN_PIN
+        #elif Z3_USE_ENDSTOP == _XMAX_
+          #define Z3_MIN_PIN X_MAX_PIN
+        #elif Z3_USE_ENDSTOP == _XSTOP_
+          #define Z3_MIN_PIN X_STOP_PIN
+        #elif Z3_USE_ENDSTOP == _YMIN_
+          #define Z3_MIN_PIN Y_MIN_PIN
+        #elif Z3_USE_ENDSTOP == _YMAX_
+          #define Z3_MIN_PIN Y_MAX_PIN
+        #elif Z3_USE_ENDSTOP == _YSTOP_
+          #define Z3_MIN_PIN Y_STOP_PIN
+        #elif Z3_USE_ENDSTOP == _ZMIN_
+          #define Z3_MIN_PIN Z_MIN_PIN
+        #elif Z3_USE_ENDSTOP == _ZMAX_
+          #define Z3_MIN_PIN Z_MAX_PIN
+        #elif Z3_USE_ENDSTOP == _ZSTOP_
+          #define Z3_MIN_PIN Z_STOP_PIN
+        #elif Z3_USE_ENDSTOP == _XDIAG_
+          #define Z3_MIN_PIN X_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _YDIAG_
+          #define Z3_MIN_PIN Y_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _ZDIAG_
+          #define Z3_MIN_PIN Z_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E0DIAG_
+          #define Z3_MIN_PIN E0_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E1DIAG_
+          #define Z3_MIN_PIN E1_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E2DIAG_
+          #define Z3_MIN_PIN E2_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E3DIAG_
+          #define Z3_MIN_PIN E3_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E4DIAG_
+          #define Z3_MIN_PIN E4_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E5DIAG_
+          #define Z3_MIN_PIN E5_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E6DIAG_
+          #define Z3_MIN_PIN E6_DIAG_PIN
+        #elif Z3_USE_ENDSTOP == _E7DIAG_
+          #define Z3_MIN_PIN E7_DIAG_PIN
+        #endif
+      #endif
+    #endif
+  #endif
+
+  #if NUM_Z_STEPPERS >= 4
+    #if Z_HOME_TO_MAX
+      #ifndef Z4_MAX_PIN
+        #if PIN_EXISTS(Z4_STOP)
+          #define Z4_MAX_PIN Z4_STOP_PIN
+        #elif Z4_USE_ENDSTOP == _XMIN_
+          #define Z4_MAX_PIN X_MIN_PIN
+        #elif Z4_USE_ENDSTOP == _XMAX_
+          #define Z4_MAX_PIN X_MAX_PIN
+        #elif Z4_USE_ENDSTOP == _XSTOP_
+          #define Z4_MAX_PIN X_STOP_PIN
+        #elif Z4_USE_ENDSTOP == _YMIN_
+          #define Z4_MAX_PIN Y_MIN_PIN
+        #elif Z4_USE_ENDSTOP == _YMAX_
+          #define Z4_MAX_PIN Y_MAX_PIN
+        #elif Z4_USE_ENDSTOP == _YSTOP_
+          #define Z4_MAX_PIN Y_STOP_PIN
+        #elif Z4_USE_ENDSTOP == _ZMIN_
+          #define Z4_MAX_PIN Z_MIN_PIN
+        #elif Z4_USE_ENDSTOP == _ZMAX_
+          #define Z4_MAX_PIN Z_MAX_PIN
+        #elif Z4_USE_ENDSTOP == _ZSTOP_
+          #define Z4_MAX_PIN Z_STOP_PIN
+        #elif Z4_USE_ENDSTOP == _XDIAG_
+          #define Z4_MAX_PIN X_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _YDIAG_
+          #define Z4_MAX_PIN Y_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _ZDIAG_
+          #define Z4_MAX_PIN Z_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E0DIAG_
+          #define Z4_MAX_PIN E0_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E1DIAG_
+          #define Z4_MAX_PIN E1_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E2DIAG_
+          #define Z4_MAX_PIN E2_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E3DIAG_
+          #define Z4_MAX_PIN E3_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E4DIAG_
+          #define Z4_MAX_PIN E4_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E5DIAG_
+          #define Z4_MAX_PIN E5_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E6DIAG_
+          #define Z4_MAX_PIN E6_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E7DIAG_
+          #define Z4_MAX_PIN E7_DIAG_PIN
+        #endif
+      #endif
+    #else
+      #ifndef Z4_MIN_PIN
+        #if PIN_EXISTS(Z4_STOP)
+          #define Z4_MIN_PIN Z4_STOP_PIN
+        #elif Z4_USE_ENDSTOP == _XMIN_
+          #define Z4_MIN_PIN X_MIN_PIN
+        #elif Z4_USE_ENDSTOP == _XMAX_
+          #define Z4_MIN_PIN X_MAX_PIN
+        #elif Z4_USE_ENDSTOP == _XSTOP_
+          #define Z4_MIN_PIN X_STOP_PIN
+        #elif Z4_USE_ENDSTOP == _YMIN_
+          #define Z4_MIN_PIN Y_MIN_PIN
+        #elif Z4_USE_ENDSTOP == _YMAX_
+          #define Z4_MIN_PIN Y_MAX_PIN
+        #elif Z4_USE_ENDSTOP == _YSTOP_
+          #define Z4_MIN_PIN Y_STOP_PIN
+        #elif Z4_USE_ENDSTOP == _ZMIN_
+          #define Z4_MIN_PIN Z_MIN_PIN
+        #elif Z4_USE_ENDSTOP == _ZMAX_
+          #define Z4_MIN_PIN Z_MAX_PIN
+        #elif Z4_USE_ENDSTOP == _ZSTOP_
+          #define Z4_MIN_PIN Z_STOP_PIN
+        #elif Z4_USE_ENDSTOP == _XDIAG_
+          #define Z4_MIN_PIN X_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _YDIAG_
+          #define Z4_MIN_PIN Y_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _ZDIAG_
+          #define Z4_MIN_PIN Z_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E0DIAG_
+          #define Z4_MIN_PIN E0_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E1DIAG_
+          #define Z4_MIN_PIN E1_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E2DIAG_
+          #define Z4_MIN_PIN E2_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E3DIAG_
+          #define Z4_MIN_PIN E3_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E4DIAG_
+          #define Z4_MIN_PIN E4_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E5DIAG_
+          #define Z4_MIN_PIN E5_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E6DIAG_
+          #define Z4_MIN_PIN E6_DIAG_PIN
+        #elif Z4_USE_ENDSTOP == _E7DIAG_
+          #define Z4_MIN_PIN E7_DIAG_PIN
+        #endif
+      #endif
+    #endif
+  #endif
+
+#endif // Z_MULTI_ENDSTOPS
+
 //
 // Default DOGLCD SPI delays
 //
 #if !IS_U8GLIB_ST7920
   #undef ST7920_DELAY_1
   #undef ST7920_DELAY_2
   #undef ST7920_DELAY_3
   #undef LCD_ST7920_DELAY_1
   #undef LCD_ST7920_DELAY_2
   #undef LCD_ST7920_DELAY_3

commit 1ef6ddccbee4119e4b2c870554a77d4062c6e22e
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sun Oct 30 12:42:36 2022 +1300

    📌 Remove unused RX/TX pins (#24932)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index c3c217557b..7656037f3d 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -300,20 +300,90 @@
 #ifndef E5_CS_PIN
   #define E5_CS_PIN -1
 #endif
 #ifndef E6_CS_PIN
   #define E6_CS_PIN -1
 #endif
 #ifndef E7_CS_PIN
   #define E7_CS_PIN -1
 #endif
 
+//
+// Destroy stepper driver RX and TX pins when set to -1
+//
+#if !PIN_EXISTS(Z2_SERIAL_TX)
+  #undef Z2_SERIAL_TX_PIN
+#endif
+#if !PIN_EXISTS(Z2_SERIAL_RX)
+  #undef Z2_SERIAL_RX_PIN
+#endif
+#if !PIN_EXISTS(Z3_SERIAL_TX)
+  #undef Z3_SERIAL_TX_PIN
+#endif
+#if !PIN_EXISTS(Z3_SERIAL_RX)
+  #undef Z3_SERIAL_RX_PIN
+#endif
+#if !PIN_EXISTS(Z4_SERIAL_TX)
+  #undef Z4_SERIAL_TX_PIN
+#endif
+#if !PIN_EXISTS(Z4_SERIAL_RX)
+  #undef Z4_SERIAL_RX_PIN
+#endif
+#if !PIN_EXISTS(X2_SERIAL_TX)
+  #undef X2_SERIAL_TX_PIN
+#endif
+#if !PIN_EXISTS(X2_SERIAL_RX)
+  #undef X2_SERIAL_RX_PIN
+#endif
+#if !PIN_EXISTS(Y2_SERIAL_TX)
+  #undef Y2_SERIAL_TX_PIN
+#endif
+#if !PIN_EXISTS(Y2_SERIAL_RX)
+  #undef Y2_SERIAL_RX_PIN
+#endif
+#if !PIN_EXISTS(I_SERIAL_TX)
+  #undef I_SERIAL_TX_PIN
+#endif
+#if !PIN_EXISTS(I_SERIAL_RX)
+  #undef I_SERIAL_RX_PIN
+#endif
+#if !PIN_EXISTS(J_SERIAL_TX)
+  #undef J_SERIAL_TX_PIN
+#endif
+#if !PIN_EXISTS(J_SERIAL_RX)
+  #undef J_SERIAL_RX_PIN
+#endif
+#if !PIN_EXISTS(K_SERIAL_TX)
+  #undef K_SERIAL_TX_PIN
+#endif
+#if !PIN_EXISTS(K_SERIAL_RX)
+  #undef K_SERIAL_RX_PIN
+#endif
+#if !PIN_EXISTS(U_SERIAL_TX)
+  #undef U_SERIAL_TX_PIN
+#endif
+#if !PIN_EXISTS(U_SERIAL_RX)
+  #undef U_SERIAL_RX_PIN
+#endif
+#if !PIN_EXISTS(V_SERIAL_TX)
+  #undef V_SERIAL_TX_PIN
+#endif
+#if !PIN_EXISTS(V_SERIAL_RX)
+  #undef V_SERIAL_RX_PIN
+#endif
+#if !PIN_EXISTS(W_SERIAL_TX)
+  #undef W_SERIAL_TX_PIN
+#endif
+#if !PIN_EXISTS(W_SERIAL_RX)
+  #undef W_SERIAL_RX_PIN
+#endif
+
 #ifndef FAN_PIN
   #define FAN_PIN -1
 #endif
 #define FAN0_PIN FAN_PIN
 #ifndef FAN1_PIN
   #define FAN1_PIN -1
 #endif
 #ifndef FAN2_PIN
   #define FAN2_PIN -1
 #endif

commit ecc138fc9e15b0805448dcf58a0e7c753bdbe098
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Fri May 13 16:07:27 2022 +1200

    🔧 AVR/DUE Serial Port pin conflict checks (#24148)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 990f40ad4d..c3c217557b 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -1657,84 +1657,111 @@
   #define Z_MIN_PROBE_PIN    -1
 #endif
 #if DISABLED(USE_XMIN_PLUG)
   #undef X_MIN_PIN
   #define X_MIN_PIN          -1
 #endif
 #if DISABLED(USE_XMAX_PLUG)
   #undef X_MAX_PIN
   #define X_MAX_PIN          -1
 #endif
+#if NONE(USE_XMIN_PLUG, USE_XMAX_PLUG)
+  #undef X_STOP_PIN
+#endif
 #if DISABLED(USE_YMIN_PLUG)
   #undef Y_MIN_PIN
   #define Y_MIN_PIN          -1
 #endif
 #if DISABLED(USE_YMAX_PLUG)
   #undef Y_MAX_PIN
   #define Y_MAX_PIN          -1
 #endif
+#if NONE(USE_YMIN_PLUG, USE_YMAX_PLUG)
+  #undef Y_STOP_PIN
+#endif
 #if DISABLED(USE_ZMIN_PLUG)
   #undef Z_MIN_PIN
   #define Z_MIN_PIN          -1
 #endif
 #if DISABLED(USE_ZMAX_PLUG)
   #undef Z_MAX_PIN
   #define Z_MAX_PIN          -1
 #endif
+#if NONE(USE_ZMIN_PLUG, USE_ZMAX_PLUG)
+  #undef Z_STOP_PIN
+#endif
 #if DISABLED(USE_IMIN_PLUG)
   #undef I_MIN_PIN
   #define I_MIN_PIN          -1
 #endif
 #if DISABLED(USE_IMAX_PLUG)
   #undef I_MAX_PIN
   #define I_MAX_PIN          -1
 #endif
+#if NONE(USE_IMIN_PLUG, USE_IMAX_PLUG)
+  #undef I_STOP_PIN
+#endif
 #if DISABLED(USE_JMIN_PLUG)
   #undef J_MIN_PIN
   #define J_MIN_PIN          -1
 #endif
 #if DISABLED(USE_JMAX_PLUG)
   #undef J_MAX_PIN
   #define J_MAX_PIN          -1
 #endif
+#if NONE(USE_JMIN_PLUG, USE_JMAX_PLUG)
+  #undef J_STOP_PIN
+#endif
 #if DISABLED(USE_KMIN_PLUG)
   #undef K_MIN_PIN
   #define K_MIN_PIN          -1
 #endif
 #if DISABLED(USE_KMAX_PLUG)
   #undef K_MAX_PIN
   #define K_MAX_PIN          -1
 #endif
+#if NONE(USE_KMIN_PLUG, USE_KMAX_PLUG)
+  #undef K_STOP_PIN
+#endif
 #if DISABLED(USE_UMIN_PLUG)
   #undef U_MIN_PIN
   #define U_MIN_PIN          -1
 #endif
 #if DISABLED(USE_UMAX_PLUG)
   #undef U_MAX_PIN
   #define U_MAX_PIN          -1
 #endif
+#if NONE(USE_UMIN_PLUG, USE_UMAX_PLUG)
+  #undef U_STOP_PIN
+#endif
 #if DISABLED(USE_VMIN_PLUG)
   #undef V_MIN_PIN
   #define V_MIN_PIN          -1
 #endif
 #if DISABLED(USE_VMAX_PLUG)
   #undef V_MAX_PIN
   #define V_MAX_PIN          -1
 #endif
+#if NONE(USE_VMIN_PLUG, USE_VMAX_PLUG)
+  #undef V_STOP_PIN
+#endif
 #if DISABLED(USE_WMIN_PLUG)
   #undef W_MIN_PIN
   #define W_MIN_PIN          -1
 #endif
 #if DISABLED(USE_WMAX_PLUG)
   #undef W_MAX_PIN
   #define W_MAX_PIN          -1
 #endif
+#if NONE(USE_WMIN_PLUG, USE_WMAX_PLUG)
+  #undef W_STOP_PIN
+#endif
 
 #if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MAX
   #undef X2_MIN_PIN
 #endif
 #if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MIN
   #undef X2_MAX_PIN
 #endif
 #if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MAX
   #undef Y2_MIN_PIN
 #endif

commit df40181357b08761766067ef5012b2b3d0e34d3e
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Wed May 4 17:25:02 2022 -0700

    💥 Num Axes and Multi-Stepper based on Driver Types (#24120)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 8da2b969bc..990f40ad4d 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -479,24 +479,24 @@
     #endif
   #elif Z_HOME_TO_MIN
     #define Z_STOP_PIN Z_MIN_PIN
   #else
     #define Z_STOP_PIN Z_MAX_PIN
   #endif
   #if ENABLED(Z_MULTI_ENDSTOPS) && PIN_EXISTS(Z_STOP)
     #ifndef Z2_USE_ENDSTOP
       #define Z2_USE_ENDSTOP _ZSTOP_
     #endif
-    #if NUM_Z_STEPPER_DRIVERS >= 3 && !defined(Z3_USE_ENDSTOP)
+    #if NUM_Z_STEPPERS >= 3 && !defined(Z3_USE_ENDSTOP)
       #define Z3_USE_ENDSTOP _ZSTOP_
     #endif
-    #if NUM_Z_STEPPER_DRIVERS >= 4 && !defined(Z4_USE_ENDSTOP)
+    #if NUM_Z_STEPPERS >= 4 && !defined(Z4_USE_ENDSTOP)
       #define Z4_USE_ENDSTOP _ZSTOP_
     #endif
   #endif
 #endif
 
 #if HAS_I_AXIS
   #ifdef I_STOP_PIN
     #if I_HOME_TO_MIN
       #define I_MIN_PIN I_STOP_PIN
       #ifndef I_MAX_PIN
@@ -768,28 +768,28 @@
 #ifndef X2_MS1_PIN
   #define X2_MS1_PIN -1
 #endif
 #ifndef X2_MS2_PIN
   #define X2_MS2_PIN -1
 #endif
 #ifndef X2_MS3_PIN
   #define X2_MS3_PIN -1
 #endif
 
-#if ENABLED(Y_DUAL_STEPPER_DRIVERS) && !defined(Y2_DIAG_PIN) && !defined(Y2_STEP_PIN) && !PIN_EXISTS(Y2_CS_PIN)
+#if HAS_DUAL_Y_STEPPERS && !defined(Y2_DIAG_PIN) && !defined(Y2_STEP_PIN) && !PIN_EXISTS(Y2_CS_PIN)
   #define Z2_E_INDEX INCREMENT(Y2_E_INDEX)
 #else
   #define Z2_E_INDEX Y2_E_INDEX
 #endif
 
 // The Y2 axis, if any, should be the next open extruder port
-#if ENABLED(Y_DUAL_STEPPER_DRIVERS)
+#if HAS_DUAL_Y_STEPPERS
   #ifndef Y2_STEP_PIN
     #define Y2_STEP_PIN   _EPIN(Y2_E_INDEX, STEP)
     #define Y2_DIR_PIN    _EPIN(Y2_E_INDEX, DIR)
     #define Y2_ENABLE_PIN _EPIN(Y2_E_INDEX, ENABLE)
     #if Y2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Y2_STEP)
       #error "No E stepper plug left for Y2!"
     #else
       #define AUTO_ASSIGNED_Y2_STEPPER 1
     #endif
   #endif
@@ -854,28 +854,28 @@
 #ifndef Y2_MS1_PIN
   #define Y2_MS1_PIN -1
 #endif
 #ifndef Y2_MS2_PIN
   #define Y2_MS2_PIN -1
 #endif
 #ifndef Y2_MS3_PIN
   #define Y2_MS3_PIN -1
 #endif
 
-#if NUM_Z_STEPPER_DRIVERS >= 2 && !defined(Z2_DIAG_PIN) && !defined(Z2_STEP_PIN) && !PIN_EXISTS(Z2_CS_PIN)
+#if NUM_Z_STEPPERS >= 2 && !defined(Z2_DIAG_PIN) && !defined(Z2_STEP_PIN) && !PIN_EXISTS(Z2_CS_PIN)
   #define Z3_E_INDEX INCREMENT(Z2_E_INDEX)
 #else
   #define Z3_E_INDEX Z2_E_INDEX
 #endif
 
 // The Z2 axis, if any, should be the next open extruder port
-#if NUM_Z_STEPPER_DRIVERS >= 2
+#if NUM_Z_STEPPERS >= 2
   #ifndef Z2_STEP_PIN
     #define Z2_STEP_PIN   _EPIN(Z2_E_INDEX, STEP)
     #define Z2_DIR_PIN    _EPIN(Z2_E_INDEX, DIR)
     #define Z2_ENABLE_PIN _EPIN(Z2_E_INDEX, ENABLE)
     #if Z2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Z2_STEP)
       #error "No E stepper plug left for Z2!"
     #else
       #define AUTO_ASSIGNED_Z2_STEPPER 1
     #endif
   #endif
@@ -940,28 +940,28 @@
 #ifndef Z2_MS1_PIN
   #define Z2_MS1_PIN -1
 #endif
 #ifndef Z2_MS2_PIN
   #define Z2_MS2_PIN -1
 #endif
 #ifndef Z2_MS3_PIN
   #define Z2_MS3_PIN -1
 #endif
 
-#if NUM_Z_STEPPER_DRIVERS >= 3 && !defined(Z3_DIAG_PIN) && !defined(Z3_STEP_PIN) && !PIN_EXISTS(Z3_CS_PIN)
+#if NUM_Z_STEPPERS >= 3 && !defined(Z3_DIAG_PIN) && !defined(Z3_STEP_PIN) && !PIN_EXISTS(Z3_CS_PIN)
   #define Z4_E_INDEX INCREMENT(Z3_E_INDEX)
 #else
   #define Z4_E_INDEX Z3_E_INDEX
 #endif
 
 // The Z3 axis, if any, should be the next open extruder port
-#if NUM_Z_STEPPER_DRIVERS >= 3
+#if NUM_Z_STEPPERS >= 3
   #ifndef Z3_STEP_PIN
     #define Z3_STEP_PIN   _EPIN(Z3_E_INDEX, STEP)
     #define Z3_DIR_PIN    _EPIN(Z3_E_INDEX, DIR)
     #define Z3_ENABLE_PIN _EPIN(Z3_E_INDEX, ENABLE)
     #if Z3_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Z3_STEP)
       #error "No E stepper plug left for Z3!"
     #else
       #define AUTO_ASSIGNED_Z3_STEPPER 1
     #endif
   #endif
@@ -1026,28 +1026,28 @@
 #ifndef Z3_MS1_PIN
   #define Z3_MS1_PIN -1
 #endif
 #ifndef Z3_MS2_PIN
   #define Z3_MS2_PIN -1
 #endif
 #ifndef Z3_MS3_PIN
   #define Z3_MS3_PIN -1
 #endif
 
-#if NUM_Z_STEPPER_DRIVERS >= 4 && !defined(Z4_DIAG_PIN) && !defined(Z4_STEP_PIN) && !PIN_EXISTS(Z4_CS_PIN)
+#if NUM_Z_STEPPERS >= 4 && !defined(Z4_DIAG_PIN) && !defined(Z4_STEP_PIN) && !PIN_EXISTS(Z4_CS_PIN)
   #define I_E_INDEX INCREMENT(Z4_E_INDEX)
 #else
   #define I_E_INDEX Z4_E_INDEX
 #endif
 
 // The Z4 axis, if any, should be the next open extruder port
-#if NUM_Z_STEPPER_DRIVERS >= 4
+#if NUM_Z_STEPPERS >= 4
   #ifndef Z4_STEP_PIN
     #define Z4_STEP_PIN   _EPIN(Z4_E_INDEX, STEP)
     #define Z4_DIR_PIN    _EPIN(Z4_E_INDEX, DIR)
     #define Z4_ENABLE_PIN _EPIN(Z4_E_INDEX, ENABLE)
     #if Z4_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Z4_STEP)
       #error "No E stepper plug left for Z4!"
     #else
       #define AUTO_ASSIGNED_Z4_STEPPER 1
     #endif
   #endif
@@ -1740,30 +1740,30 @@
 #endif
 #if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MIN
   #undef Y2_MAX_PIN
 #endif
 #if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_TO_MAX
   #undef Z2_MIN_PIN
 #endif
 #if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_TO_MIN
   #undef Z2_MAX_PIN
 #endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_TO_MAX
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPERS < 3 || Z_HOME_TO_MAX
   #undef Z3_MIN_PIN
 #endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_TO_MIN
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPERS < 3 || Z_HOME_TO_MIN
   #undef Z3_MAX_PIN
 #endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MAX
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPERS < 4 || Z_HOME_TO_MAX
   #undef Z4_MIN_PIN
 #endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MIN
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPERS < 4 || Z_HOME_TO_MIN
   #undef Z4_MAX_PIN
 #endif
 
 //
 // Default DOGLCD SPI delays
 //
 #if !IS_U8GLIB_ST7920
   #undef ST7920_DELAY_1
   #undef ST7920_DELAY_2
   #undef ST7920_DELAY_3

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ✨ Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index aabe0da858..8da2b969bc 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -214,20 +214,29 @@
 #endif
 #if !AXIS_HAS_SPI(I)
   #undef I_CS_PIN
 #endif
 #if !AXIS_HAS_SPI(J)
   #undef J_CS_PIN
 #endif
 #if !AXIS_HAS_SPI(K)
   #undef K_CS_PIN
 #endif
+#if !AXIS_HAS_SPI(U)
+  #undef U_CS_PIN
+#endif
+#if !AXIS_HAS_SPI(V)
+  #undef V_CS_PIN
+#endif
+#if !AXIS_HAS_SPI(W)
+  #undef W_CS_PIN
+#endif
 #if E_STEPPERS && !AXIS_HAS_SPI(E0)
   #undef E0_CS_PIN
 #endif
 #if E_STEPPERS > 1 && !AXIS_HAS_SPI(E1)
   #undef E1_CS_PIN
 #endif
 #if E_STEPPERS > 2 && !AXIS_HAS_SPI(E2)
   #undef E2_CS_PIN
 #endif
 #if E_STEPPERS > 3 && !AXIS_HAS_SPI(E3)
@@ -257,20 +266,29 @@
 #endif
 #ifndef I_CS_PIN
   #define I_CS_PIN -1
 #endif
 #ifndef J_CS_PIN
   #define J_CS_PIN -1
 #endif
 #ifndef K_CS_PIN
   #define K_CS_PIN -1
 #endif
+#ifndef U_CS_PIN
+  #define U_CS_PIN -1
+#endif
+#ifndef V_CS_PIN
+  #define V_CS_PIN -1
+#endif
+#ifndef W_CS_PIN
+  #define W_CS_PIN -1
+#endif
 #ifndef E0_CS_PIN
   #define E0_CS_PIN -1
 #endif
 #ifndef E1_CS_PIN
   #define E1_CS_PIN -1
 #endif
 #ifndef E2_CS_PIN
   #define E2_CS_PIN -1
 #endif
 #ifndef E3_CS_PIN
@@ -539,20 +557,89 @@
   #elif K_HOME_TO_MIN
     #define K_STOP_PIN K_MIN_PIN
   #else
     #define K_STOP_PIN K_MAX_PIN
   #endif
 #else
   #undef K_MIN_PIN
   #undef K_MAX_PIN
 #endif
 
+#if HAS_U_AXIS
+  #ifdef U_STOP_PIN
+    #if U_HOME_TO_MIN
+      #define U_MIN_PIN U_STOP_PIN
+      #ifndef U_MAX_PIN
+        #define U_MAX_PIN -1
+      #endif
+    #else
+      #define U_MAX_PIN U_STOP_PIN
+      #ifndef U_MIN_PIN
+        #define U_MIN_PIN -1
+      #endif
+    #endif
+  #elif U_HOME_TO_MIN
+    #define U_STOP_PIN U_MIN_PIN
+  #else
+    #define U_STOP_PIN U_MAX_PIN
+  #endif
+#else
+  #undef U_MIN_PIN
+  #undef U_MAX_PIN
+#endif
+
+#if HAS_V_AXIS
+  #ifdef V_STOP_PIN
+    #if V_HOME_TO_MIN
+      #define V_MIN_PIN V_STOP_PIN
+      #ifndef V_MAX_PIN
+        #define V_MAX_PIN -1
+      #endif
+    #else
+      #define V_MAX_PIN V_STOP_PIN
+      #ifndef V_MIN_PIN
+        #define V_MIN_PIN -1
+      #endif
+    #endif
+  #elif V_HOME_TO_MIN
+    #define V_STOP_PIN V_MIN_PIN
+  #else
+    #define V_STOP_PIN V_MAX_PIN
+  #endif
+#else
+  #undef V_MIN_PIN
+  #undef V_MAX_PIN
+#endif
+
+#if HAS_W_AXIS
+  #ifdef W_STOP_PIN
+    #if W_HOME_TO_MIN
+      #define W_MIN_PIN W_STOP_PIN
+      #ifndef W_MAX_PIN
+        #define W_MAX_PIN -1
+      #endif
+    #else
+      #define W_MAX_PIN W_STOP_PIN
+      #ifndef W_MIN_PIN
+        #define W_MIN_PIN -1
+      #endif
+    #endif
+  #elif W_HOME_TO_MIN
+    #define W_STOP_PIN W_MIN_PIN
+  #else
+    #define W_STOP_PIN W_MAX_PIN
+  #endif
+#else
+  #undef W_MIN_PIN
+  #undef W_MAX_PIN
+#endif
+
 // Filament Sensor first pin alias
 #if HAS_FILAMENT_SENSOR
   #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN  // Filament Sensor first pin alias
 #else
   #undef FIL_RUNOUT_PIN
   #undef FIL_RUNOUT1_PIN
 #endif
 
 #if NUM_RUNOUT_SENSORS < 2
   #undef FIL_RUNOUT2_PIN
@@ -1197,20 +1284,26 @@
 #ifndef J_MS1_PIN
   #define J_MS1_PIN -1
 #endif
 #ifndef J_MS2_PIN
   #define J_MS2_PIN -1
 #endif
 #ifndef J_MS3_PIN
   #define J_MS3_PIN -1
 #endif
 
+#if HAS_K_AXIS && !defined(K_DIAG_PIN) && !defined(K_STEP_PIN) && !PIN_EXISTS(K_CS_PIN)
+  #define U_E_INDEX INCREMENT(K_E_INDEX)
+#else
+  #define U_E_INDEX K_E_INDEX
+#endif
+
 // The K axis, if any, should be the next open extruder port
 #if HAS_K_AXIS
   #ifndef K_STEP_PIN
     #define K_STEP_PIN   _EPIN(K_E_INDEX, STEP)
     #define K_DIR_PIN    _EPIN(K_E_INDEX, DIR)
     #define K_ENABLE_PIN _EPIN(K_E_INDEX, ENABLE)
     #if K_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(K_STEP)
       #error "No E stepper plug left for K!"
     #else
       #define AUTO_ASSIGNED_K_STEPPER 1
@@ -1277,20 +1370,272 @@
 #ifndef K_MS1_PIN
   #define K_MS1_PIN -1
 #endif
 #ifndef K_MS2_PIN
   #define K_MS2_PIN -1
 #endif
 #ifndef K_MS3_PIN
   #define K_MS3_PIN -1
 #endif
 
+#if HAS_U_AXIS && !defined(U_DIAG_PIN) && !defined(U_STEP_PIN) && !PIN_EXISTS(U_CS_PIN)
+  #define V_E_INDEX INCREMENT(U_E_INDEX)
+#else
+  #define V_E_INDEX U_E_INDEX
+#endif
+
+// The U axis, if any, should be the next open extruder port
+#if HAS_U_AXIS
+  #ifndef U_STEP_PIN
+    #define U_STEP_PIN   _EPIN(U_E_INDEX, STEP)
+    #define U_DIR_PIN    _EPIN(U_E_INDEX, DIR)
+    #define U_ENABLE_PIN _EPIN(U_E_INDEX, ENABLE)
+    #if M_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(U_STEP)
+      #error "No E stepper plug left for U!"
+    #else
+      #define AUTO_ASSIGNED_U_STEPPER 1
+    #endif
+  #endif
+  #if AXIS_HAS_SPI(U) && !defined(U_CS_PIN)
+    #define U_CS_PIN     _EPIN(U_E_INDEX, CS)
+    #if PIN_EXISTS(U_CS)
+      #define AUTO_ASSIGNED_U_CS 1
+    #endif
+  #endif
+  #ifndef U_MS1_PIN
+    #define U_MS1_PIN    _EPIN(U_E_INDEX, MS1)
+    #if PIN_EXISTS(U_MS1)
+      #define AUTO_ASSIGNED_U_MS1 1
+    #endif
+  #endif
+  #ifndef U_MS2_PIN
+    #define U_MS2_PIN    _EPIN(U_E_INDEX, MS2)
+    #if PIN_EXISTS(U_MS2)
+      #define AUTO_ASSIGNED_U_MS2 1
+    #endif
+  #endif
+  #ifndef U_MS3_PIN
+    #define U_MS3_PIN    _EPIN(U_E_INDEX, MS3)
+    #if PIN_EXISTS(U_MS3)
+      #define AUTO_ASSIGNED_U_MS3 1
+    #endif
+  #endif
+  #if AXIS_HAS_UART(U)
+    #ifndef U_SERIAL_TX_PIN
+      #define U_SERIAL_TX_PIN _EPIN(U_E_INDEX, SERIAL_TX)
+    #endif
+    #ifndef U_SERIAL_RX_PIN
+      #define U_SERIAL_RX_PIN _EPIN(U_E_INDEX, SERIAL_RX)
+    #endif
+  #endif
+  // Auto-assign pins for stallGuard sensorless homing
+  #if !defined(U_DIAG_PIN) && !defined(U_USE_ENDSTOP) && defined(U_STALL_SENSITIVITY) && _PEXI(U_E_INDEX, DIAG)
+    #define U_DIAG_PIN _EPIN(U_E_INDEX, DIAG)
+    #if   DIAG_REMAPPED(U, X_MIN)
+      #define U_USE_ENDSTOP _XMIN_
+    #elif DIAG_REMAPPED(U, Y_MIN)
+      #define U_USE_ENDSTOP _YMIN_
+    #elif DIAG_REMAPPED(U, Z_MIN)
+      #define U_USE_ENDSTOP _ZMIN_
+    #elif DIAG_REMAPPED(U, X_MAX)
+      #define U_USE_ENDSTOP _XMAX_
+    #elif DIAG_REMAPPED(U, Y_MAX)
+      #define U_USE_ENDSTOP _YMAX_
+    #elif DIAG_REMAPPED(U, Z_MAX)
+      #define U_USE_ENDSTOP _ZMAX_
+    #else
+      #define U_USE_ENDSTOP _En_DIAG_(U_E_INDEX)
+    #endif
+    #define AUTO_ASSIGNED_U_DIAG 1
+    #undef U_DIAG_PIN // Defined in Conditionals_post.h based on U_USE_ENDSTOP
+  #endif
+#endif
+
+#ifndef U_CS_PIN
+  #define U_CS_PIN  -1
+#endif
+#ifndef U_MS1_PIN
+  #define U_MS1_PIN -1
+#endif
+#ifndef U_MS2_PIN
+  #define U_MS2_PIN -1
+#endif
+#ifndef U_MS3_PIN
+  #define U_MS3_PIN -1
+#endif
+
+#if HAS_V_AXIS && !defined(V_DIAG_PIN) && !defined(V_STEP_PIN) && !PIN_EXISTS(V_CS_PIN)
+  #define W_E_INDEX INCREMENT(V_E_INDEX)
+#else
+  #define W_E_INDEX V_E_INDEX
+#endif
+
+// The V axis, if any, should be the next open extruder port
+#if HAS_V_AXIS
+  #ifndef V_STEP_PIN
+    #define V_STEP_PIN   _EPIN(V_E_INDEX, STEP)
+    #define V_DIR_PIN    _EPIN(V_E_INDEX, DIR)
+    #define V_ENABLE_PIN _EPIN(V_E_INDEX, ENABLE)
+    #if V_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(V_STEP)
+      #error "No E stepper plug left for V!"
+    #else
+      #define AUTO_ASSIGNED_V_STEPPER 1
+    #endif
+  #endif
+  #if AXIS_HAS_SPI(V) && !defined(V_CS_PIN)
+    #define V_CS_PIN     _EPIN(V_E_INDEX, CS)
+    #if PIN_EXISTS(V_CS)
+      #define AUTO_ASSIGNED_V_CS 1
+    #endif
+  #endif
+  #ifndef V_MS1_PIN
+    #define V_MS1_PIN    _EPIN(V_E_INDEX, MS1)
+    #if PIN_EXISTS(V_MS1)
+      #define AUTO_ASSIGNED_V_MS1 1
+    #endif
+  #endif
+  #ifndef V_MS2_PIN
+    #define V_MS2_PIN    _EPIN(V_E_INDEX, MS2)
+    #if PIN_EXISTS(V_MS2)
+      #define AUTO_ASSIGNED_V_MS2 1
+    #endif
+  #endif
+  #ifndef V_MS3_PIN
+    #define V_MS3_PIN    _EPIN(V_E_INDEX, MS3)
+    #if PIN_EXISTS(V_MS3)
+      #define AUTO_ASSIGNED_V_MS3 1
+    #endif
+  #endif
+  #if AXIS_HAS_UART(V)
+    #ifndef V_SERIAL_TX_PIN
+      #define V_SERIAL_TX_PIN _EPIN(V_E_INDEX, SERIAL_TX)
+    #endif
+    #ifndef V_SERIAL_RX_PIN
+      #define V_SERIAL_RX_PIN _EPIN(V_E_INDEX, SERIAL_RX)
+    #endif
+  #endif
+  // Auto-assign pins for stallGuard sensorless homing
+  #if !defined(V_DIAG_PIN) && !defined(V_USE_ENDSTOP) && defined(V_STALL_SENSITIVITY) && _PEXI(V_E_INDEX, DIAG)
+    #define V_DIAG_PIN _EPIN(V_E_INDEX, DIAG)
+    #if   DIAG_REMAPPED(V, X_MIN)
+      #define V_USE_ENDSTOP _XMIN_
+    #elif DIAG_REMAPPED(V, Y_MIN)
+      #define V_USE_ENDSTOP _YMIN_
+    #elif DIAG_REMAPPED(V, Z_MIN)
+      #define V_USE_ENDSTOP _ZMIN_
+    #elif DIAG_REMAPPED(V, X_MAX)
+      #define V_USE_ENDSTOP _XMAX_
+    #elif DIAG_REMAPPED(V, Y_MAX)
+      #define V_USE_ENDSTOP _YMAX_
+    #elif DIAG_REMAPPED(V, Z_MAX)
+      #define V_USE_ENDSTOP _ZMAX_
+    #else
+      #define V_USE_ENDSTOP _En_DIAG_(V_E_INDEX)
+    #endif
+    #define AUTO_ASSIGNED_V_DIAG 1
+    #undef V_DIAG_PIN // Defined in Conditionals_post.h based on O_USE_ENDSTOP
+  #endif
+#endif
+
+#ifndef V_CS_PIN
+  #define V_CS_PIN  -1
+#endif
+#ifndef V_MS1_PIN
+  #define V_MS1_PIN -1
+#endif
+#ifndef V_MS2_PIN
+  #define V_MS2_PIN -1
+#endif
+#ifndef V_MS3_PIN
+  #define V_MS3_PIN -1
+#endif
+
+// The W axis, if any, should be the next open extruder port
+#if HAS_W_AXIS
+  #ifndef W_STEP_PIN
+    #define W_STEP_PIN   _EPIN(W_E_INDEX, STEP)
+    #define W_DIR_PIN    _EPIN(W_E_INDEX, DIR)
+    #define W_ENABLE_PIN _EPIN(W_E_INDEX, ENABLE)
+    #if W_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(W_STEP)
+      #error "No E stepper plug left for W!"
+    #else
+      #define AUTO_ASSIGNED_W_STEPPER 1
+    #endif
+  #endif
+  #if AXIS_HAS_SPI(W) && !defined(W_CS_PIN)
+    #define W_CS_PIN     _EPIN(W_E_INDEX, CS)
+    #if PIN_EXISTS(W_CS)
+      #define AUTO_ASSIGNED_W_CS 1
+    #endif
+  #endif
+  #ifndef W_MS1_PIN
+    #define W_MS1_PIN    _EPIN(W_E_INDEX, MS1)
+    #if PIN_EXISTS(W_MS1)
+      #define AUTO_ASSIGNED_W_MS1 1
+    #endif
+  #endif
+  #ifndef W_MS2_PIN
+    #define W_MS2_PIN    _EPIN(W_E_INDEX, MS2)
+    #if PIN_EXISTS(W_MS2)
+      #define AUTO_ASSIGNED_W_MS2 1
+    #endif
+  #endif
+  #ifndef W_MS3_PIN
+    #define W_MS3_PIN    _EPIN(W_E_INDEX, MS3)
+    #if PIN_EXISTS(W_MS3)
+      #define AUTO_ASSIGNED_W_MS3 1
+    #endif
+  #endif
+  #if AXIS_HAS_UART(W)
+    #ifndef W_SERIAL_TX_PIN
+      #define W_SERIAL_TX_PIN _EPIN(W_E_INDEX, SERIAL_TX)
+    #endif
+    #ifndef W_SERIAL_RX_PIN
+      #define W_SERIAL_RX_PIN _EPIN(W_E_INDEX, SERIAL_RX)
+    #endif
+  #endif
+  // Auto-assign pins for stallGuard sensorless homing
+  #if !defined(W_DIAG_PIN) && !defined(W_USE_ENDSTOP) && defined(W_STALL_SENSITIVITY) && _PEXI(W_E_INDEX, DIAG)
+    #define W_DIAG_PIN _EPIN(W_E_INDEX, DIAG)
+    #if   DIAG_REMAPPED(W, X_MIN)
+      #define W_USE_ENDSTOP _XMIN_
+    #elif DIAG_REMAPPED(W, Y_MIN)
+      #define W_USE_ENDSTOP _YMIN_
+    #elif DIAG_REMAPPED(W, Z_MIN)
+      #define W_USE_ENDSTOP _ZMIN_
+    #elif DIAG_REMAPPED(W, X_MAX)
+      #define W_USE_ENDSTOP _XMAX_
+    #elif DIAG_REMAPPED(W, Y_MAX)
+      #define W_USE_ENDSTOP _YMAX_
+    #elif DIAG_REMAPPED(W, Z_MAX)
+      #define W_USE_ENDSTOP _ZMAX_
+    #else
+      #define W_USE_ENDSTOP _En_DIAG_(W_E_INDEX)
+    #endif
+    #define AUTO_ASSIGNED_W_DIAG 1
+    #undef W_DIAG_PIN // Defined in Conditionals_post.h based on Q_USE_ENDSTOP
+  #endif
+#endif
+
+#ifndef W_CS_PIN
+  #define W_CS_PIN  -1
+#endif
+#ifndef W_MS1_PIN
+  #define W_MS1_PIN -1
+#endif
+#ifndef W_MS2_PIN
+  #define W_MS2_PIN -1
+#endif
+#ifndef W_MS3_PIN
+  #define W_MS3_PIN -1
+#endif
+
 //
 // Disable unused endstop / probe pins
 //
 #define _STOP_IN_USE(N) (X2_USE_ENDSTOP == N || Y2_USE_ENDSTOP == N || Z2_USE_ENDSTOP == N || Z3_USE_ENDSTOP == N || Z4_USE_ENDSTOP == N)
 #if !defined(USE_XMAX_PLUG) && _STOP_IN_USE(_XMAX_)
   #define USE_XMAX_PLUG
 #endif
 #if !defined(USE_YMAX_PLUG) && _STOP_IN_USE(_YMAX_)
   #define USE_YMAX_PLUG
 #endif
@@ -1352,20 +1697,44 @@
   #define J_MAX_PIN          -1
 #endif
 #if DISABLED(USE_KMIN_PLUG)
   #undef K_MIN_PIN
   #define K_MIN_PIN          -1
 #endif
 #if DISABLED(USE_KMAX_PLUG)
   #undef K_MAX_PIN
   #define K_MAX_PIN          -1
 #endif
+#if DISABLED(USE_UMIN_PLUG)
+  #undef U_MIN_PIN
+  #define U_MIN_PIN          -1
+#endif
+#if DISABLED(USE_UMAX_PLUG)
+  #undef U_MAX_PIN
+  #define U_MAX_PIN          -1
+#endif
+#if DISABLED(USE_VMIN_PLUG)
+  #undef V_MIN_PIN
+  #define V_MIN_PIN          -1
+#endif
+#if DISABLED(USE_VMAX_PLUG)
+  #undef V_MAX_PIN
+  #define V_MAX_PIN          -1
+#endif
+#if DISABLED(USE_WMIN_PLUG)
+  #undef W_MIN_PIN
+  #define W_MIN_PIN          -1
+#endif
+#if DISABLED(USE_WMAX_PLUG)
+  #undef W_MAX_PIN
+  #define W_MAX_PIN          -1
+#endif
 
 #if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MAX
   #undef X2_MIN_PIN
 #endif
 #if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MIN
   #undef X2_MAX_PIN
 #endif
 #if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MAX
   #undef Y2_MIN_PIN
 #endif

commit 40481947fc1f11a01235c5c55333a4437fc45c5f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jan 14 03:14:13 2022 -0600

    🧑‍💻 Misc. updates for extra axes (#23521)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index aa1def0b40..aabe0da858 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -539,20 +539,21 @@
   #elif K_HOME_TO_MIN
     #define K_STOP_PIN K_MIN_PIN
   #else
     #define K_STOP_PIN K_MAX_PIN
   #endif
 #else
   #undef K_MIN_PIN
   #undef K_MAX_PIN
 #endif
 
+// Filament Sensor first pin alias
 #if HAS_FILAMENT_SENSOR
   #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN  // Filament Sensor first pin alias
 #else
   #undef FIL_RUNOUT_PIN
   #undef FIL_RUNOUT1_PIN
 #endif
 
 #if NUM_RUNOUT_SENSORS < 2
   #undef FIL_RUNOUT2_PIN
 #endif
@@ -591,26 +592,27 @@
 // The E0/E1 steppers are always used for Dual E
 #if ENABLED(E_DUAL_STEPPER_DRIVERS)
   #ifndef E1_STEP_PIN
     #error "No E1 stepper available for E_DUAL_STEPPER_DRIVERS!"
   #endif
   #define X2_E_INDEX INCREMENT(E_STEPPERS)
 #else
   #define X2_E_INDEX E_STEPPERS
 #endif
 
-// The X2 axis, if any, should be the next open extruder port
 #if HAS_X2_STEPPER && !defined(X2_DIAG_PIN) && !defined(X2_STEP_PIN) && !PIN_EXISTS(X2_CS_PIN)
   #define Y2_E_INDEX INCREMENT(X2_E_INDEX)
 #else
   #define Y2_E_INDEX X2_E_INDEX
 #endif
+
+// The X2 axis, if any, should be the next open extruder port
 #if HAS_X2_STEPPER
   #ifndef X2_STEP_PIN
     #define X2_STEP_PIN   _EPIN(X2_E_INDEX, STEP)
     #define X2_DIR_PIN    _EPIN(X2_E_INDEX, DIR)
     #define X2_ENABLE_PIN _EPIN(X2_E_INDEX, ENABLE)
     #if X2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(X2_STEP)
       #error "No E stepper plug left for X2!"
     #else
       #define AUTO_ASSIGNED_X2_STEPPER 1
     #endif
@@ -679,26 +681,27 @@
 #ifndef X2_MS1_PIN
   #define X2_MS1_PIN -1
 #endif
 #ifndef X2_MS2_PIN
   #define X2_MS2_PIN -1
 #endif
 #ifndef X2_MS3_PIN
   #define X2_MS3_PIN -1
 #endif
 
-// The Y2 axis, if any, should be the next open extruder port
 #if ENABLED(Y_DUAL_STEPPER_DRIVERS) && !defined(Y2_DIAG_PIN) && !defined(Y2_STEP_PIN) && !PIN_EXISTS(Y2_CS_PIN)
   #define Z2_E_INDEX INCREMENT(Y2_E_INDEX)
 #else
   #define Z2_E_INDEX Y2_E_INDEX
 #endif
+
+// The Y2 axis, if any, should be the next open extruder port
 #if ENABLED(Y_DUAL_STEPPER_DRIVERS)
   #ifndef Y2_STEP_PIN
     #define Y2_STEP_PIN   _EPIN(Y2_E_INDEX, STEP)
     #define Y2_DIR_PIN    _EPIN(Y2_E_INDEX, DIR)
     #define Y2_ENABLE_PIN _EPIN(Y2_E_INDEX, ENABLE)
     #if Y2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Y2_STEP)
       #error "No E stepper plug left for Y2!"
     #else
       #define AUTO_ASSIGNED_Y2_STEPPER 1
     #endif
@@ -764,26 +767,27 @@
 #ifndef Y2_MS1_PIN
   #define Y2_MS1_PIN -1
 #endif
 #ifndef Y2_MS2_PIN
   #define Y2_MS2_PIN -1
 #endif
 #ifndef Y2_MS3_PIN
   #define Y2_MS3_PIN -1
 #endif
 
-// The Z2 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPER_DRIVERS >= 2 && !defined(Z2_DIAG_PIN) && !defined(Z2_STEP_PIN) && !PIN_EXISTS(Z2_CS_PIN)
   #define Z3_E_INDEX INCREMENT(Z2_E_INDEX)
 #else
   #define Z3_E_INDEX Z2_E_INDEX
 #endif
+
+// The Z2 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPER_DRIVERS >= 2
   #ifndef Z2_STEP_PIN
     #define Z2_STEP_PIN   _EPIN(Z2_E_INDEX, STEP)
     #define Z2_DIR_PIN    _EPIN(Z2_E_INDEX, DIR)
     #define Z2_ENABLE_PIN _EPIN(Z2_E_INDEX, ENABLE)
     #if Z2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Z2_STEP)
       #error "No E stepper plug left for Z2!"
     #else
       #define AUTO_ASSIGNED_Z2_STEPPER 1
     #endif
@@ -849,26 +853,27 @@
 #ifndef Z2_MS1_PIN
   #define Z2_MS1_PIN -1
 #endif
 #ifndef Z2_MS2_PIN
   #define Z2_MS2_PIN -1
 #endif
 #ifndef Z2_MS3_PIN
   #define Z2_MS3_PIN -1
 #endif
 
-// The Z3 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPER_DRIVERS >= 3 && !defined(Z3_DIAG_PIN) && !defined(Z3_STEP_PIN) && !PIN_EXISTS(Z3_CS_PIN)
   #define Z4_E_INDEX INCREMENT(Z3_E_INDEX)
 #else
   #define Z4_E_INDEX Z3_E_INDEX
 #endif
+
+// The Z3 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPER_DRIVERS >= 3
   #ifndef Z3_STEP_PIN
     #define Z3_STEP_PIN   _EPIN(Z3_E_INDEX, STEP)
     #define Z3_DIR_PIN    _EPIN(Z3_E_INDEX, DIR)
     #define Z3_ENABLE_PIN _EPIN(Z3_E_INDEX, ENABLE)
     #if Z3_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Z3_STEP)
       #error "No E stepper plug left for Z3!"
     #else
       #define AUTO_ASSIGNED_Z3_STEPPER 1
     #endif
@@ -934,26 +939,27 @@
 #ifndef Z3_MS1_PIN
   #define Z3_MS1_PIN -1
 #endif
 #ifndef Z3_MS2_PIN
   #define Z3_MS2_PIN -1
 #endif
 #ifndef Z3_MS3_PIN
   #define Z3_MS3_PIN -1
 #endif
 
-// The Z4 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPER_DRIVERS >= 4 && !defined(Z4_DIAG_PIN) && !defined(Z4_STEP_PIN) && !PIN_EXISTS(Z4_CS_PIN)
   #define I_E_INDEX INCREMENT(Z4_E_INDEX)
 #else
   #define I_E_INDEX Z4_E_INDEX
 #endif
+
+// The Z4 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPER_DRIVERS >= 4
   #ifndef Z4_STEP_PIN
     #define Z4_STEP_PIN   _EPIN(Z4_E_INDEX, STEP)
     #define Z4_DIR_PIN    _EPIN(Z4_E_INDEX, DIR)
     #define Z4_ENABLE_PIN _EPIN(Z4_E_INDEX, ENABLE)
     #if Z4_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Z4_STEP)
       #error "No E stepper plug left for Z4!"
     #else
       #define AUTO_ASSIGNED_Z4_STEPPER 1
     #endif
@@ -1019,26 +1025,27 @@
 #ifndef Z4_MS1_PIN
   #define Z4_MS1_PIN -1
 #endif
 #ifndef Z4_MS2_PIN
   #define Z4_MS2_PIN -1
 #endif
 #ifndef Z4_MS3_PIN
   #define Z4_MS3_PIN -1
 #endif
 
-// The I axis, if any, should be the next open extruder port
 #if HAS_I_AXIS && !defined(I_DIAG_PIN) && !defined(I_STEP_PIN) && !PIN_EXISTS(I_CS_PIN)
   #define J_E_INDEX INCREMENT(I_E_INDEX)
 #else
   #define J_E_INDEX I_E_INDEX
 #endif
+
+// The I axis, if any, should be the next open extruder port
 #if HAS_I_AXIS
   #ifndef I_STEP_PIN
     #define I_STEP_PIN   _EPIN(I_E_INDEX, STEP)
     #define I_DIR_PIN    _EPIN(I_E_INDEX, DIR)
     #define I_ENABLE_PIN _EPIN(I_E_INDEX, ENABLE)
     #if I_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(I_STEP)
       #error "No E stepper plug left for I!"
     #else
       #define AUTO_ASSIGNED_I_STEPPER 1
     #endif
@@ -1104,26 +1111,27 @@
 #ifndef I_MS1_PIN
   #define I_MS1_PIN -1
 #endif
 #ifndef I_MS2_PIN
   #define I_MS2_PIN -1
 #endif
 #ifndef I_MS3_PIN
   #define I_MS3_PIN -1
 #endif
 
-// The J axis, if any, should be the next open extruder port
 #if HAS_J_AXIS && !defined(J_DIAG_PIN) && !defined(J_STEP_PIN) && !PIN_EXISTS(J_CS_PIN)
   #define K_E_INDEX INCREMENT(J_E_INDEX)
 #else
   #define K_E_INDEX J_E_INDEX
 #endif
+
+// The J axis, if any, should be the next open extruder port
 #if HAS_J_AXIS
   #ifndef J_STEP_PIN
     #define J_STEP_PIN   _EPIN(J_E_INDEX, STEP)
     #define J_DIR_PIN    _EPIN(J_E_INDEX, DIR)
     #define J_ENABLE_PIN _EPIN(J_E_INDEX, ENABLE)
     #if I_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(J_STEP)
       #error "No E stepper plug left for J!"
     #else
       #define AUTO_ASSIGNED_J_STEPPER 1
     #endif

commit e65c12cf96a226019a7456099078ee5cb03f9a49
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 2 09:22:36 2022 -0600

    🧑‍💻 Apply axis conditionals

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index fe8c4c6c41..aa1def0b40 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -470,21 +470,21 @@
     #endif
     #if NUM_Z_STEPPER_DRIVERS >= 3 && !defined(Z3_USE_ENDSTOP)
       #define Z3_USE_ENDSTOP _ZSTOP_
     #endif
     #if NUM_Z_STEPPER_DRIVERS >= 4 && !defined(Z4_USE_ENDSTOP)
       #define Z4_USE_ENDSTOP _ZSTOP_
     #endif
   #endif
 #endif
 
-#if LINEAR_AXES >= 4
+#if HAS_I_AXIS
   #ifdef I_STOP_PIN
     #if I_HOME_TO_MIN
       #define I_MIN_PIN I_STOP_PIN
       #ifndef I_MAX_PIN
         #define I_MAX_PIN -1
       #endif
     #else
       #define I_MAX_PIN I_STOP_PIN
       #ifndef I_MIN_PIN
         #define I_MIN_PIN -1
@@ -493,21 +493,21 @@
   #elif I_HOME_TO_MIN
     #define I_STOP_PIN I_MIN_PIN
   #else
     #define I_STOP_PIN I_MAX_PIN
   #endif
 #else
   #undef I_MIN_PIN
   #undef I_MAX_PIN
 #endif
 
-#if LINEAR_AXES >= 5
+#if HAS_J_AXIS
   #ifdef J_STOP_PIN
     #if J_HOME_TO_MIN
       #define J_MIN_PIN J_STOP_PIN
       #ifndef J_MAX_PIN
         #define J_MAX_PIN -1
       #endif
     #else
       #define J_MAX_PIN J_STOP_PIN
       #ifndef J_MIN_PIN
         #define J_MIN_PIN -1
@@ -516,21 +516,21 @@
   #elif J_HOME_TO_MIN
     #define J_STOP_PIN J_MIN_PIN
   #else
     #define J_STOP_PIN J_MAX_PIN
   #endif
 #else
   #undef J_MIN_PIN
   #undef J_MAX_PIN
 #endif
 
-#if LINEAR_AXES >= 6
+#if HAS_K_AXIS
   #ifdef K_STOP_PIN
     #if K_HOME_TO_MIN
       #define K_MIN_PIN K_STOP_PIN
       #ifndef K_MAX_PIN
         #define K_MAX_PIN -1
       #endif
     #else
       #define K_MAX_PIN K_STOP_PIN
       #ifndef K_MIN_PIN
         #define K_MIN_PIN -1
@@ -1020,26 +1020,26 @@
   #define Z4_MS1_PIN -1
 #endif
 #ifndef Z4_MS2_PIN
   #define Z4_MS2_PIN -1
 #endif
 #ifndef Z4_MS3_PIN
   #define Z4_MS3_PIN -1
 #endif
 
 // The I axis, if any, should be the next open extruder port
-#if LINEAR_AXES >= 4 && !defined(I_DIAG_PIN) && !defined(I_STEP_PIN) && !PIN_EXISTS(I_CS_PIN)
+#if HAS_I_AXIS && !defined(I_DIAG_PIN) && !defined(I_STEP_PIN) && !PIN_EXISTS(I_CS_PIN)
   #define J_E_INDEX INCREMENT(I_E_INDEX)
 #else
   #define J_E_INDEX I_E_INDEX
 #endif
-#if LINEAR_AXES >= 4
+#if HAS_I_AXIS
   #ifndef I_STEP_PIN
     #define I_STEP_PIN   _EPIN(I_E_INDEX, STEP)
     #define I_DIR_PIN    _EPIN(I_E_INDEX, DIR)
     #define I_ENABLE_PIN _EPIN(I_E_INDEX, ENABLE)
     #if I_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(I_STEP)
       #error "No E stepper plug left for I!"
     #else
       #define AUTO_ASSIGNED_I_STEPPER 1
     #endif
   #endif
@@ -1105,26 +1105,26 @@
   #define I_MS1_PIN -1
 #endif
 #ifndef I_MS2_PIN
   #define I_MS2_PIN -1
 #endif
 #ifndef I_MS3_PIN
   #define I_MS3_PIN -1
 #endif
 
 // The J axis, if any, should be the next open extruder port
-#if LINEAR_AXES >= 5 && !defined(J_DIAG_PIN) && !defined(J_STEP_PIN) && !PIN_EXISTS(J_CS_PIN)
+#if HAS_J_AXIS && !defined(J_DIAG_PIN) && !defined(J_STEP_PIN) && !PIN_EXISTS(J_CS_PIN)
   #define K_E_INDEX INCREMENT(J_E_INDEX)
 #else
   #define K_E_INDEX J_E_INDEX
 #endif
-#if LINEAR_AXES >= 5
+#if HAS_J_AXIS
   #ifndef J_STEP_PIN
     #define J_STEP_PIN   _EPIN(J_E_INDEX, STEP)
     #define J_DIR_PIN    _EPIN(J_E_INDEX, DIR)
     #define J_ENABLE_PIN _EPIN(J_E_INDEX, ENABLE)
     #if I_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(J_STEP)
       #error "No E stepper plug left for J!"
     #else
       #define AUTO_ASSIGNED_J_STEPPER 1
     #endif
   #endif
@@ -1190,21 +1190,21 @@
   #define J_MS1_PIN -1
 #endif
 #ifndef J_MS2_PIN
   #define J_MS2_PIN -1
 #endif
 #ifndef J_MS3_PIN
   #define J_MS3_PIN -1
 #endif
 
 // The K axis, if any, should be the next open extruder port
-#if LINEAR_AXES >= 6
+#if HAS_K_AXIS
   #ifndef K_STEP_PIN
     #define K_STEP_PIN   _EPIN(K_E_INDEX, STEP)
     #define K_DIR_PIN    _EPIN(K_E_INDEX, DIR)
     #define K_ENABLE_PIN _EPIN(K_E_INDEX, ENABLE)
     #if K_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(K_STEP)
       #error "No E stepper plug left for K!"
     #else
       #define AUTO_ASSIGNED_K_STEPPER 1
     #endif
   #endif

commit 80a537cd13f386fe8140ca672c4aa51d597d5e21
Author: Attila BODY <attila.body@gmail.com>
Date:   Fri Dec 24 06:57:20 2021 +0100

    🐛 Fix Robin Nano v3 filament runout pins (#23344)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 1e6703fd4a..fe8c4c6c41 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -539,28 +539,31 @@
   #elif K_HOME_TO_MIN
     #define K_STOP_PIN K_MIN_PIN
   #else
     #define K_STOP_PIN K_MAX_PIN
   #endif
 #else
   #undef K_MIN_PIN
   #undef K_MAX_PIN
 #endif
 
-// Filament Sensor first pin alias
 #if HAS_FILAMENT_SENSOR
-  #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN
+  #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN  // Filament Sensor first pin alias
 #else
   #undef FIL_RUNOUT_PIN
   #undef FIL_RUNOUT1_PIN
 #endif
 
+#if NUM_RUNOUT_SENSORS < 2
+  #undef FIL_RUNOUT2_PIN
+#endif
+
 #ifndef LCD_PINS_D4
   #define LCD_PINS_D4 -1
 #endif
 
 #if HAS_MARLINUI_HD44780 || TOUCH_UI_ULTIPANEL
   #ifndef LCD_PINS_D5
     #define LCD_PINS_D5 -1
   #endif
   #ifndef LCD_PINS_D6
     #define LCD_PINS_D6 -1

commit 399faa91b99dab0f8565396efd32f277965c93b2
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Thu Nov 4 14:04:06 2021 +1300

    📌 'STOP' auto-assign, some Chitu V9 pins (#22889)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index d1047db0d7..1e6703fd4a 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -412,59 +412,76 @@
     #define X_MAX_PIN X_STOP_PIN
     #ifndef X_MIN_PIN
       #define X_MIN_PIN -1
     #endif
   #endif
 #elif X_HOME_TO_MIN
   #define X_STOP_PIN X_MIN_PIN
 #else
   #define X_STOP_PIN X_MAX_PIN
 #endif
+#if !defined(X2_USE_ENDSTOP) && ENABLED(X_DUAL_ENDSTOPS) && PIN_EXISTS(X_STOP)
+  #define X2_USE_ENDSTOP _XSTOP_
+#endif
 
 #if HAS_Y_AXIS
   #ifdef Y_STOP_PIN
     #if Y_HOME_TO_MIN
       #define Y_MIN_PIN Y_STOP_PIN
       #ifndef Y_MAX_PIN
         #define Y_MAX_PIN -1
       #endif
     #else
       #define Y_MAX_PIN Y_STOP_PIN
       #ifndef Y_MIN_PIN
         #define Y_MIN_PIN -1
       #endif
     #endif
   #elif Y_HOME_TO_MIN
     #define Y_STOP_PIN Y_MIN_PIN
   #else
     #define Y_STOP_PIN Y_MAX_PIN
   #endif
+  #if !defined(Y2_USE_ENDSTOP) && ENABLED(Y_DUAL_ENDSTOPS) && PIN_EXISTS(Y_STOP)
+    #define Y2_USE_ENDSTOP _YSTOP_
+  #endif
 #endif
 
 #if HAS_Z_AXIS
   #ifdef Z_STOP_PIN
     #if Z_HOME_TO_MIN
       #define Z_MIN_PIN Z_STOP_PIN
       #ifndef Z_MAX_PIN
         #define Z_MAX_PIN -1
       #endif
     #else
       #define Z_MAX_PIN Z_STOP_PIN
       #ifndef Z_MIN_PIN
         #define Z_MIN_PIN -1
       #endif
     #endif
   #elif Z_HOME_TO_MIN
     #define Z_STOP_PIN Z_MIN_PIN
   #else
     #define Z_STOP_PIN Z_MAX_PIN
   #endif
+  #if ENABLED(Z_MULTI_ENDSTOPS) && PIN_EXISTS(Z_STOP)
+    #ifndef Z2_USE_ENDSTOP
+      #define Z2_USE_ENDSTOP _ZSTOP_
+    #endif
+    #if NUM_Z_STEPPER_DRIVERS >= 3 && !defined(Z3_USE_ENDSTOP)
+      #define Z3_USE_ENDSTOP _ZSTOP_
+    #endif
+    #if NUM_Z_STEPPER_DRIVERS >= 4 && !defined(Z4_USE_ENDSTOP)
+      #define Z4_USE_ENDSTOP _ZSTOP_
+    #endif
+  #endif
 #endif
 
 #if LINEAR_AXES >= 4
   #ifdef I_STOP_PIN
     #if I_HOME_TO_MIN
       #define I_MIN_PIN I_STOP_PIN
       #ifndef I_MAX_PIN
         #define I_MAX_PIN -1
       #endif
     #else
@@ -794,21 +811,21 @@
   #endif
   #if AXIS_HAS_UART(Z2)
     #ifndef Z2_SERIAL_TX_PIN
       #define Z2_SERIAL_TX_PIN _EPIN(Z2_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z2_SERIAL_RX_PIN
       #define Z2_SERIAL_RX_PIN _EPIN(Z2_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(Z2_DIAG_PIN) && !defined(Z2_USE_ENDSTOP) && defined(Z2_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 2 && _PEXI(Z2_E_INDEX, DIAG)
+  #if !defined(Z2_DIAG_PIN) && !defined(Z2_USE_ENDSTOP) && defined(Z2_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && _PEXI(Z2_E_INDEX, DIAG)
     #define Z2_DIAG_PIN _EPIN(Z2_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Z2, X_MIN)
       #define Z2_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Z2, Y_MIN)
       #define Z2_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Z2, Z_MIN)
       #define Z2_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Z2, X_MAX)
       #define Z2_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Z2, Y_MAX)
@@ -879,21 +896,21 @@
   #endif
   #if AXIS_HAS_UART(Z3)
     #ifndef Z3_SERIAL_TX_PIN
       #define Z3_SERIAL_TX_PIN _EPIN(Z3_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z3_SERIAL_RX_PIN
       #define Z3_SERIAL_RX_PIN _EPIN(Z3_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(Z3_DIAG_PIN) && !defined(Z3_USE_ENDSTOP) && defined(Z3_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 3 && _PEXI(Z3_E_INDEX, DIAG)
+  #if !defined(Z3_DIAG_PIN) && !defined(Z3_USE_ENDSTOP) && defined(Z3_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && _PEXI(Z3_E_INDEX, DIAG)
     #define Z3_DIAG_PIN _EPIN(Z3_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Z3, X_MIN)
       #define Z3_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Z3, Y_MIN)
       #define Z3_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Z3, Z_MIN)
       #define Z3_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Z3, X_MAX)
       #define Z3_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Z3, Y_MAX)
@@ -964,21 +981,21 @@
   #endif
   #if AXIS_HAS_UART(Z4)
     #ifndef Z4_SERIAL_TX_PIN
       #define Z4_SERIAL_TX_PIN _EPIN(Z4_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z4_SERIAL_RX_PIN
       #define Z4_SERIAL_RX_PIN _EPIN(Z4_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(Z4_DIAG_PIN) && !defined(Z4_USE_ENDSTOP) && defined(Z4_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 4 && _PEXI(Z4_E_INDEX, DIAG)
+  #if !defined(Z4_DIAG_PIN) && !defined(Z4_USE_ENDSTOP) && defined(Z4_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && _PEXI(Z4_E_INDEX, DIAG)
     #define Z4_DIAG_PIN _EPIN(Z4_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Z4, X_MIN)
       #define Z4_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Z4, Y_MIN)
       #define Z4_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Z4, Z_MIN)
       #define Z4_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Z4, X_MAX)
       #define Z4_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Z4, Y_MAX)

commit 498937967482faf7b299c2119c258c8ce7090ce9
Author: Robby Candra <robbycandra.mail@gmail.com>
Date:   Tue Nov 2 10:29:23 2021 +0700

    🎨 Fix redefine warnings (#23061)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index a2fe2b9af3..d1047db0d7 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -1253,36 +1253,36 @@
   #define K_MS2_PIN -1
 #endif
 #ifndef K_MS3_PIN
   #define K_MS3_PIN -1
 #endif
 
 //
 // Disable unused endstop / probe pins
 //
 #define _STOP_IN_USE(N) (X2_USE_ENDSTOP == N || Y2_USE_ENDSTOP == N || Z2_USE_ENDSTOP == N || Z3_USE_ENDSTOP == N || Z4_USE_ENDSTOP == N)
-#if _STOP_IN_USE(_XMAX_)
+#if !defined(USE_XMAX_PLUG) && _STOP_IN_USE(_XMAX_)
   #define USE_XMAX_PLUG
 #endif
-#if _STOP_IN_USE(_YMAX_)
+#if !defined(USE_YMAX_PLUG) && _STOP_IN_USE(_YMAX_)
   #define USE_YMAX_PLUG
 #endif
-#if _STOP_IN_USE(_ZMAX_)
+#if !defined(USE_ZMAX_PLUG) && _STOP_IN_USE(_ZMAX_)
   #define USE_ZMAX_PLUG
 #endif
-#if _STOP_IN_USE(_XMIN_)
+#if !defined(USE_XMIN_PLUG) && _STOP_IN_USE(_XMIN_)
   #define USE_XMIN_PLUG
 #endif
-#if _STOP_IN_USE(_YMIN_)
+#if !defined(USE_YMIN_PLUG) && _STOP_IN_USE(_YMIN_)
   #define USE_YMIN_PLUG
 #endif
-#if _STOP_IN_USE(_ZMIN_)
+#if !defined(USE_ZMIN_PLUG) && _STOP_IN_USE(_ZMIN_)
   #define USE_ZMIN_PLUG
 #endif
 #undef _STOP_IN_USE
 #if !USES_Z_MIN_PROBE_PIN
   #undef Z_MIN_PROBE_PIN
   #define Z_MIN_PROBE_PIN    -1
 #endif
 #if DISABLED(USE_XMIN_PLUG)
   #undef X_MIN_PIN
   #define X_MIN_PIN          -1

commit 8e4953514c893410c402ba6486f86580385effd9
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Tue Oct 12 23:19:05 2021 -0400

    ⚡️ Formbot ST7920 delays, intentional X2 pins (#22915)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 827e07e3f5..a2fe2b9af3 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -572,26 +572,26 @@
 #if ENABLED(E_DUAL_STEPPER_DRIVERS)
   #ifndef E1_STEP_PIN
     #error "No E1 stepper available for E_DUAL_STEPPER_DRIVERS!"
   #endif
   #define X2_E_INDEX INCREMENT(E_STEPPERS)
 #else
   #define X2_E_INDEX E_STEPPERS
 #endif
 
 // The X2 axis, if any, should be the next open extruder port
-#if EITHER(DUAL_X_CARRIAGE, X_DUAL_STEPPER_DRIVERS) && !defined(X2_DIAG_PIN) && !defined(X2_STEP_PIN) && !PIN_EXISTS(X2_CS_PIN)
+#if HAS_X2_STEPPER && !defined(X2_DIAG_PIN) && !defined(X2_STEP_PIN) && !PIN_EXISTS(X2_CS_PIN)
   #define Y2_E_INDEX INCREMENT(X2_E_INDEX)
 #else
   #define Y2_E_INDEX X2_E_INDEX
 #endif
-#if EITHER(DUAL_X_CARRIAGE, X_DUAL_STEPPER_DRIVERS)
+#if HAS_X2_STEPPER
   #ifndef X2_STEP_PIN
     #define X2_STEP_PIN   _EPIN(X2_E_INDEX, STEP)
     #define X2_DIR_PIN    _EPIN(X2_E_INDEX, DIR)
     #define X2_ENABLE_PIN _EPIN(X2_E_INDEX, ENABLE)
     #if X2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(X2_STEP)
       #error "No E stepper plug left for X2!"
     #else
       #define AUTO_ASSIGNED_X2_STEPPER 1
     #endif
   #endif

commit 9bb562f40a5570a63430bbf9392da0fdb85c5c8c
Author: VragVideo <91742261+VragVideo@users.noreply.github.com>
Date:   Sun Oct 3 06:12:51 2021 +0300

    ✨ WYH L12864 LCD (Alfawise Ex8) (#22863)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 4860e2d800..827e07e3f5 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -1359,21 +1359,21 @@
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MAX
   #undef Z4_MIN_PIN
 #endif
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MIN
   #undef Z4_MAX_PIN
 #endif
 
 //
 // Default DOGLCD SPI delays
 //
-#if DISABLED(U8GLIB_ST7920)
+#if !IS_U8GLIB_ST7920
   #undef ST7920_DELAY_1
   #undef ST7920_DELAY_2
   #undef ST7920_DELAY_3
   #undef LCD_ST7920_DELAY_1
   #undef LCD_ST7920_DELAY_2
   #undef LCD_ST7920_DELAY_3
   #undef BOARD_ST7920_DELAY_1
   #undef BOARD_ST7920_DELAY_2
   #undef BOARD_ST7920_DELAY_3
   #undef CPU_ST7920_DELAY_1

commit dc5bef62ba185461ba969db6af996ebc93a33ba7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 23 10:01:37 2021 -0500

    🎨 Various multi-axis patches (#22823)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 72313cf3e6..4860e2d800 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -457,55 +457,79 @@
     #define Z_STOP_PIN Z_MIN_PIN
   #else
     #define Z_STOP_PIN Z_MAX_PIN
   #endif
 #endif
 
 #if LINEAR_AXES >= 4
   #ifdef I_STOP_PIN
     #if I_HOME_TO_MIN
       #define I_MIN_PIN I_STOP_PIN
-      #define I_MAX_PIN -1
+      #ifndef I_MAX_PIN
+        #define I_MAX_PIN -1
+      #endif
     #else
-      #define I_MIN_PIN -1
       #define I_MAX_PIN I_STOP_PIN
+      #ifndef I_MIN_PIN
+        #define I_MIN_PIN -1
+      #endif
     #endif
+  #elif I_HOME_TO_MIN
+    #define I_STOP_PIN I_MIN_PIN
+  #else
+    #define I_STOP_PIN I_MAX_PIN
   #endif
 #else
   #undef I_MIN_PIN
   #undef I_MAX_PIN
 #endif
 
 #if LINEAR_AXES >= 5
   #ifdef J_STOP_PIN
     #if J_HOME_TO_MIN
       #define J_MIN_PIN J_STOP_PIN
-      #define J_MAX_PIN -1
+      #ifndef J_MAX_PIN
+        #define J_MAX_PIN -1
+      #endif
     #else
-      #define J_MIN_PIN -1
       #define J_MAX_PIN J_STOP_PIN
+      #ifndef J_MIN_PIN
+        #define J_MIN_PIN -1
+      #endif
     #endif
+  #elif J_HOME_TO_MIN
+    #define J_STOP_PIN J_MIN_PIN
+  #else
+    #define J_STOP_PIN J_MAX_PIN
   #endif
 #else
   #undef J_MIN_PIN
   #undef J_MAX_PIN
 #endif
 
 #if LINEAR_AXES >= 6
   #ifdef K_STOP_PIN
     #if K_HOME_TO_MIN
       #define K_MIN_PIN K_STOP_PIN
-      #define K_MAX_PIN -1
+      #ifndef K_MAX_PIN
+        #define K_MAX_PIN -1
+      #endif
     #else
-      #define K_MIN_PIN -1
       #define K_MAX_PIN K_STOP_PIN
+      #ifndef K_MIN_PIN
+        #define K_MIN_PIN -1
+      #endif
     #endif
+  #elif K_HOME_TO_MIN
+    #define K_STOP_PIN K_MIN_PIN
+  #else
+    #define K_STOP_PIN K_MAX_PIN
   #endif
 #else
   #undef K_MIN_PIN
   #undef K_MAX_PIN
 #endif
 
 // Filament Sensor first pin alias
 #if HAS_FILAMENT_SENSOR
   #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN
 #else

commit e31d52184b321f1dbf9f091cb7188c58aef87cdb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Sep 16 01:15:01 2021 -0500

    🎨 Handle more pre-defined pins in pins_postprocess (#22771)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 6b5c695e85..72313cf3e6 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -535,573 +535,694 @@
  * By default X2 is assigned to the next open E plug
  * on the board, then in order, Y2, Z2, Z3. These can be
  * overridden in Configuration.h or Configuration_adv.h.
  */
 
 #define __PEXI(p,q) PIN_EXISTS(E##p##_##q)
 #define _PEXI(p,q) __PEXI(p,q)
 #define __EPIN(p,q) E##p##_##q##_PIN
 #define _EPIN(p,q) __EPIN(p,q)
 #define DIAG_REMAPPED(p,q) (PIN_EXISTS(q) && _EPIN(p##_E_INDEX, DIAG) == q##_PIN)
+#define _En_DIAG_(p) _E##p##_DIAG_
 
 // The E0/E1 steppers are always used for Dual E
 #if ENABLED(E_DUAL_STEPPER_DRIVERS)
   #ifndef E1_STEP_PIN
     #error "No E1 stepper available for E_DUAL_STEPPER_DRIVERS!"
   #endif
   #define X2_E_INDEX INCREMENT(E_STEPPERS)
 #else
   #define X2_E_INDEX E_STEPPERS
 #endif
 
 // The X2 axis, if any, should be the next open extruder port
+#if EITHER(DUAL_X_CARRIAGE, X_DUAL_STEPPER_DRIVERS) && !defined(X2_DIAG_PIN) && !defined(X2_STEP_PIN) && !PIN_EXISTS(X2_CS_PIN)
+  #define Y2_E_INDEX INCREMENT(X2_E_INDEX)
+#else
+  #define Y2_E_INDEX X2_E_INDEX
+#endif
 #if EITHER(DUAL_X_CARRIAGE, X_DUAL_STEPPER_DRIVERS)
   #ifndef X2_STEP_PIN
     #define X2_STEP_PIN   _EPIN(X2_E_INDEX, STEP)
     #define X2_DIR_PIN    _EPIN(X2_E_INDEX, DIR)
     #define X2_ENABLE_PIN _EPIN(X2_E_INDEX, ENABLE)
     #if X2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(X2_STEP)
       #error "No E stepper plug left for X2!"
+    #else
+      #define AUTO_ASSIGNED_X2_STEPPER 1
     #endif
   #endif
   #ifndef X2_MS1_PIN
     #define X2_MS1_PIN    _EPIN(X2_E_INDEX, MS1)
+    #if PIN_EXISTS(X2_MS1)
+      #define AUTO_ASSIGNED_X2_MS1 1
+    #endif
   #endif
   #ifndef X2_MS2_PIN
     #define X2_MS2_PIN    _EPIN(X2_E_INDEX, MS2)
+    #if PIN_EXISTS(X2_MS2)
+      #define AUTO_ASSIGNED_X2_MS2 1
+    #endif
   #endif
   #ifndef X2_MS3_PIN
     #define X2_MS3_PIN    _EPIN(X2_E_INDEX, MS3)
+    #if PIN_EXISTS(X2_MS3)
+      #define AUTO_ASSIGNED_X2_MS3 1
+    #endif
   #endif
   #if AXIS_HAS_SPI(X2) && !defined(X2_CS_PIN)
     #define X2_CS_PIN     _EPIN(X2_E_INDEX, CS)
+    #if PIN_EXISTS(X2_CS)
+      #define AUTO_ASSIGNED_X2_CS 1
+    #endif
   #endif
   #if AXIS_HAS_UART(X2)
     #ifndef X2_SERIAL_TX_PIN
       #define X2_SERIAL_TX_PIN _EPIN(X2_E_INDEX, SERIAL_TX)
     #endif
     #ifndef X2_SERIAL_RX_PIN
       #define X2_SERIAL_RX_PIN _EPIN(X2_E_INDEX, SERIAL_RX)
     #endif
   #endif
 
   //
   // Auto-assign pins for stallGuard sensorless homing
   //
-  #if !defined(X2_USE_ENDSTOP) && defined(X2_STALL_SENSITIVITY) && ENABLED(X_DUAL_ENDSTOPS) && _PEXI(X2_E_INDEX, DIAG)
+  #if !defined(X2_DIAG_PIN) && !defined(X2_USE_ENDSTOP) && defined(X2_STALL_SENSITIVITY) && ENABLED(X_DUAL_ENDSTOPS) && _PEXI(X2_E_INDEX, DIAG)
     #define X2_DIAG_PIN _EPIN(X2_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(X2, X_MIN)      // If already remapped in the pins file...
       #define X2_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(X2, Y_MIN)
       #define X2_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(X2, Z_MIN)
       #define X2_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(X2, X_MAX)
       #define X2_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(X2, Y_MAX)
       #define X2_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(X2, Z_MAX)
       #define X2_USE_ENDSTOP _ZMAX_
-    #else                               // Otherwise use the driver DIAG_PIN directly
-      #define _X2_USE_ENDSTOP(P) _E##P##_DIAG_
-      #define X2_USE_ENDSTOP _X2_USE_ENDSTOP(X2_E_INDEX)
+    #else                               // Otherwise pick the next free En_DIAG_PIN directly
+      #define X2_USE_ENDSTOP _En_DIAG_(X2_E_INDEX)
     #endif
-    #undef X2_DIAG_PIN
+    #define AUTO_ASSIGNED_X2_DIAG 1
+    #undef X2_DIAG_PIN // Defined in Conditionals_post.h based on X2_USE_ENDSTOP
   #endif
-
-  #define Y2_E_INDEX INCREMENT(X2_E_INDEX)
-#else
-  #define Y2_E_INDEX X2_E_INDEX
 #endif
 
 #ifndef X2_CS_PIN
   #define X2_CS_PIN  -1
 #endif
 #ifndef X2_MS1_PIN
   #define X2_MS1_PIN -1
 #endif
 #ifndef X2_MS2_PIN
   #define X2_MS2_PIN -1
 #endif
 #ifndef X2_MS3_PIN
   #define X2_MS3_PIN -1
 #endif
 
 // The Y2 axis, if any, should be the next open extruder port
+#if ENABLED(Y_DUAL_STEPPER_DRIVERS) && !defined(Y2_DIAG_PIN) && !defined(Y2_STEP_PIN) && !PIN_EXISTS(Y2_CS_PIN)
+  #define Z2_E_INDEX INCREMENT(Y2_E_INDEX)
+#else
+  #define Z2_E_INDEX Y2_E_INDEX
+#endif
 #if ENABLED(Y_DUAL_STEPPER_DRIVERS)
   #ifndef Y2_STEP_PIN
     #define Y2_STEP_PIN   _EPIN(Y2_E_INDEX, STEP)
     #define Y2_DIR_PIN    _EPIN(Y2_E_INDEX, DIR)
     #define Y2_ENABLE_PIN _EPIN(Y2_E_INDEX, ENABLE)
     #if Y2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Y2_STEP)
       #error "No E stepper plug left for Y2!"
+    #else
+      #define AUTO_ASSIGNED_Y2_STEPPER 1
     #endif
   #endif
   #ifndef Y2_MS1_PIN
     #define Y2_MS1_PIN    _EPIN(Y2_E_INDEX, MS1)
+    #if PIN_EXISTS(Y2_MS1)
+      #define AUTO_ASSIGNED_Y2_MS1 1
+    #endif
   #endif
   #ifndef Y2_MS2_PIN
     #define Y2_MS2_PIN    _EPIN(Y2_E_INDEX, MS2)
+    #if PIN_EXISTS(Y2_MS2)
+      #define AUTO_ASSIGNED_Y2_MS2 1
+    #endif
   #endif
   #ifndef Y2_MS3_PIN
     #define Y2_MS3_PIN    _EPIN(Y2_E_INDEX, MS3)
+    #if PIN_EXISTS(Y2_MS3)
+      #define AUTO_ASSIGNED_Y2_MS3 1
+    #endif
   #endif
   #if AXIS_HAS_SPI(Y2) && !defined(Y2_CS_PIN)
     #define Y2_CS_PIN     _EPIN(Y2_E_INDEX, CS)
+    #if PIN_EXISTS(Y2_CS)
+      #define AUTO_ASSIGNED_Y2_CS 1
+    #endif
   #endif
   #if AXIS_HAS_UART(Y2)
     #ifndef Y2_SERIAL_TX_PIN
       #define Y2_SERIAL_TX_PIN _EPIN(Y2_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Y2_SERIAL_RX_PIN
       #define Y2_SERIAL_RX_PIN _EPIN(Y2_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(Y2_USE_ENDSTOP) && defined(Y2_STALL_SENSITIVITY) && ENABLED(Y_DUAL_ENDSTOPS) && _PEXI(Y2_E_INDEX, DIAG)
+  #if !defined(Y2_DIAG_PIN) && !defined(Y2_USE_ENDSTOP) && defined(Y2_STALL_SENSITIVITY) && ENABLED(Y_DUAL_ENDSTOPS) && _PEXI(Y2_E_INDEX, DIAG)
     #define Y2_DIAG_PIN _EPIN(Y2_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Y2, X_MIN)
       #define Y2_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Y2, Y_MIN)
       #define Y2_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Y2, Z_MIN)
       #define Y2_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Y2, X_MAX)
       #define Y2_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Y2, Y_MAX)
       #define Y2_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(Y2, Z_MAX)
       #define Y2_USE_ENDSTOP _ZMAX_
     #else
-      #define _Y2_USE_ENDSTOP(P) _E##P##_DIAG_
-      #define Y2_USE_ENDSTOP _Y2_USE_ENDSTOP(Y2_E_INDEX)
+      #define Y2_USE_ENDSTOP _En_DIAG_(Y2_E_INDEX)
     #endif
-    #undef Y2_DIAG_PIN
+    #define AUTO_ASSIGNED_Y2_DIAG 1
+    #undef Y2_DIAG_PIN // Defined in Conditionals_post.h based on Y2_USE_ENDSTOP
   #endif
-  #define Z2_E_INDEX INCREMENT(Y2_E_INDEX)
-#else
-  #define Z2_E_INDEX Y2_E_INDEX
 #endif
 
 #ifndef Y2_CS_PIN
   #define Y2_CS_PIN  -1
 #endif
 #ifndef Y2_MS1_PIN
   #define Y2_MS1_PIN -1
 #endif
 #ifndef Y2_MS2_PIN
   #define Y2_MS2_PIN -1
 #endif
 #ifndef Y2_MS3_PIN
   #define Y2_MS3_PIN -1
 #endif
 
 // The Z2 axis, if any, should be the next open extruder port
+#if NUM_Z_STEPPER_DRIVERS >= 2 && !defined(Z2_DIAG_PIN) && !defined(Z2_STEP_PIN) && !PIN_EXISTS(Z2_CS_PIN)
+  #define Z3_E_INDEX INCREMENT(Z2_E_INDEX)
+#else
+  #define Z3_E_INDEX Z2_E_INDEX
+#endif
 #if NUM_Z_STEPPER_DRIVERS >= 2
   #ifndef Z2_STEP_PIN
     #define Z2_STEP_PIN   _EPIN(Z2_E_INDEX, STEP)
     #define Z2_DIR_PIN    _EPIN(Z2_E_INDEX, DIR)
     #define Z2_ENABLE_PIN _EPIN(Z2_E_INDEX, ENABLE)
     #if Z2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Z2_STEP)
       #error "No E stepper plug left for Z2!"
+    #else
+      #define AUTO_ASSIGNED_Z2_STEPPER 1
     #endif
   #endif
   #ifndef Z2_MS1_PIN
     #define Z2_MS1_PIN    _EPIN(Z2_E_INDEX, MS1)
+    #if PIN_EXISTS(Z2_MS1)
+      #define AUTO_ASSIGNED_Z2_MS1 1
+    #endif
   #endif
   #ifndef Z2_MS2_PIN
     #define Z2_MS2_PIN    _EPIN(Z2_E_INDEX, MS2)
+    #if PIN_EXISTS(Z2_MS2)
+      #define AUTO_ASSIGNED_Z2_MS2 1
+    #endif
   #endif
   #ifndef Z2_MS3_PIN
     #define Z2_MS3_PIN    _EPIN(Z2_E_INDEX, MS3)
+    #if PIN_EXISTS(Z2_MS3)
+      #define AUTO_ASSIGNED_Z2_MS3 1
+    #endif
   #endif
   #if AXIS_HAS_SPI(Z2) && !defined(Z2_CS_PIN)
     #define Z2_CS_PIN     _EPIN(Z2_E_INDEX, CS)
+    #if PIN_EXISTS(Z2_CS)
+      #define AUTO_ASSIGNED_Z2_CS 1
+    #endif
   #endif
   #if AXIS_HAS_UART(Z2)
     #ifndef Z2_SERIAL_TX_PIN
       #define Z2_SERIAL_TX_PIN _EPIN(Z2_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z2_SERIAL_RX_PIN
       #define Z2_SERIAL_RX_PIN _EPIN(Z2_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(Z2_USE_ENDSTOP) && defined(Z2_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 2 && _PEXI(Z2_E_INDEX, DIAG)
+  #if !defined(Z2_DIAG_PIN) && !defined(Z2_USE_ENDSTOP) && defined(Z2_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 2 && _PEXI(Z2_E_INDEX, DIAG)
     #define Z2_DIAG_PIN _EPIN(Z2_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Z2, X_MIN)
       #define Z2_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Z2, Y_MIN)
       #define Z2_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Z2, Z_MIN)
       #define Z2_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Z2, X_MAX)
       #define Z2_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Z2, Y_MAX)
       #define Z2_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(Z2, Z_MAX)
       #define Z2_USE_ENDSTOP _ZMAX_
     #else
-      #define _Z2_USE_ENDSTOP(P) _E##P##_DIAG_
-      #define Z2_USE_ENDSTOP _Z2_USE_ENDSTOP(Z2_E_INDEX)
+      #define Z2_USE_ENDSTOP _En_DIAG_(Z2_E_INDEX)
     #endif
-    #undef Z2_DIAG_PIN
+    #define AUTO_ASSIGNED_Z2_DIAG 1
+    #undef Z2_DIAG_PIN // Defined in Conditionals_post.h based on Z2_USE_ENDSTOP
   #endif
-  #define Z3_E_INDEX INCREMENT(Z2_E_INDEX)
-#else
-  #define Z3_E_INDEX Z2_E_INDEX
 #endif
 
 #ifndef Z2_CS_PIN
   #define Z2_CS_PIN  -1
 #endif
 #ifndef Z2_MS1_PIN
   #define Z2_MS1_PIN -1
 #endif
 #ifndef Z2_MS2_PIN
   #define Z2_MS2_PIN -1
 #endif
 #ifndef Z2_MS3_PIN
   #define Z2_MS3_PIN -1
 #endif
 
+// The Z3 axis, if any, should be the next open extruder port
+#if NUM_Z_STEPPER_DRIVERS >= 3 && !defined(Z3_DIAG_PIN) && !defined(Z3_STEP_PIN) && !PIN_EXISTS(Z3_CS_PIN)
+  #define Z4_E_INDEX INCREMENT(Z3_E_INDEX)
+#else
+  #define Z4_E_INDEX Z3_E_INDEX
+#endif
 #if NUM_Z_STEPPER_DRIVERS >= 3
   #ifndef Z3_STEP_PIN
     #define Z3_STEP_PIN   _EPIN(Z3_E_INDEX, STEP)
     #define Z3_DIR_PIN    _EPIN(Z3_E_INDEX, DIR)
     #define Z3_ENABLE_PIN _EPIN(Z3_E_INDEX, ENABLE)
     #if Z3_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Z3_STEP)
       #error "No E stepper plug left for Z3!"
+    #else
+      #define AUTO_ASSIGNED_Z3_STEPPER 1
     #endif
   #endif
-  #if AXIS_HAS_SPI(Z3)
-    #ifndef Z3_CS_PIN
-      #define Z3_CS_PIN   _EPIN(Z3_E_INDEX, CS)
+  #if AXIS_HAS_SPI(Z3) && !defined(Z3_CS_PIN)
+    #define Z3_CS_PIN     _EPIN(Z3_E_INDEX, CS)
+    #if PIN_EXISTS(Z3_CS)
+      #define AUTO_ASSIGNED_Z3_CS 1
     #endif
   #endif
   #ifndef Z3_MS1_PIN
     #define Z3_MS1_PIN    _EPIN(Z3_E_INDEX, MS1)
+    #if PIN_EXISTS(Z3_MS1)
+      #define AUTO_ASSIGNED_Z3_MS1 1
+    #endif
   #endif
   #ifndef Z3_MS2_PIN
     #define Z3_MS2_PIN    _EPIN(Z3_E_INDEX, MS2)
+    #if PIN_EXISTS(Z3_MS2)
+      #define AUTO_ASSIGNED_Z3_MS2 1
+    #endif
   #endif
   #ifndef Z3_MS3_PIN
     #define Z3_MS3_PIN    _EPIN(Z3_E_INDEX, MS3)
+    #if PIN_EXISTS(Z3_MS3)
+      #define AUTO_ASSIGNED_Z3_MS3 1
+    #endif
   #endif
   #if AXIS_HAS_UART(Z3)
     #ifndef Z3_SERIAL_TX_PIN
       #define Z3_SERIAL_TX_PIN _EPIN(Z3_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z3_SERIAL_RX_PIN
       #define Z3_SERIAL_RX_PIN _EPIN(Z3_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(Z3_USE_ENDSTOP) && defined(Z3_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 3 && _PEXI(Z3_E_INDEX, DIAG)
+  #if !defined(Z3_DIAG_PIN) && !defined(Z3_USE_ENDSTOP) && defined(Z3_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 3 && _PEXI(Z3_E_INDEX, DIAG)
     #define Z3_DIAG_PIN _EPIN(Z3_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Z3, X_MIN)
       #define Z3_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Z3, Y_MIN)
       #define Z3_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Z3, Z_MIN)
       #define Z3_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Z3, X_MAX)
       #define Z3_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Z3, Y_MAX)
       #define Z3_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(Z3, Z_MAX)
       #define Z3_USE_ENDSTOP _ZMAX_
     #else
-      #define _Z3_USE_ENDSTOP(P) _E##P##_DIAG_
-      #define Z3_USE_ENDSTOP _Z3_USE_ENDSTOP(Z3_E_INDEX)
+      #define Z3_USE_ENDSTOP _En_DIAG_(Z3_E_INDEX)
     #endif
-    #undef Z3_DIAG_PIN
+    #define AUTO_ASSIGNED_Z3_DIAG 1
+    #undef Z3_DIAG_PIN // Defined in Conditionals_post.h based on Z3_USE_ENDSTOP
   #endif
-  #define Z4_E_INDEX INCREMENT(Z3_E_INDEX)
-#else
-  #define Z4_E_INDEX Z3_E_INDEX
 #endif
 
 #ifndef Z3_CS_PIN
   #define Z3_CS_PIN  -1
 #endif
 #ifndef Z3_MS1_PIN
   #define Z3_MS1_PIN -1
 #endif
 #ifndef Z3_MS2_PIN
   #define Z3_MS2_PIN -1
 #endif
 #ifndef Z3_MS3_PIN
   #define Z3_MS3_PIN -1
 #endif
 
+// The Z4 axis, if any, should be the next open extruder port
+#if NUM_Z_STEPPER_DRIVERS >= 4 && !defined(Z4_DIAG_PIN) && !defined(Z4_STEP_PIN) && !PIN_EXISTS(Z4_CS_PIN)
+  #define I_E_INDEX INCREMENT(Z4_E_INDEX)
+#else
+  #define I_E_INDEX Z4_E_INDEX
+#endif
 #if NUM_Z_STEPPER_DRIVERS >= 4
   #ifndef Z4_STEP_PIN
     #define Z4_STEP_PIN   _EPIN(Z4_E_INDEX, STEP)
     #define Z4_DIR_PIN    _EPIN(Z4_E_INDEX, DIR)
     #define Z4_ENABLE_PIN _EPIN(Z4_E_INDEX, ENABLE)
     #if Z4_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Z4_STEP)
       #error "No E stepper plug left for Z4!"
+    #else
+      #define AUTO_ASSIGNED_Z4_STEPPER 1
     #endif
   #endif
-  #if AXIS_HAS_SPI(Z4)
-    #ifndef Z4_CS_PIN
-      #define Z4_CS_PIN     _EPIN(Z4_E_INDEX, CS)
+  #if AXIS_HAS_SPI(Z4) && !defined(Z4_CS_PIN)
+    #define Z4_CS_PIN     _EPIN(Z4_E_INDEX, CS)
+    #if PIN_EXISTS(Z4_CS)
+      #define AUTO_ASSIGNED_Z4_CS 1
     #endif
   #endif
   #ifndef Z4_MS1_PIN
     #define Z4_MS1_PIN    _EPIN(Z4_E_INDEX, MS1)
+    #if PIN_EXISTS(Z4_MS1)
+      #define AUTO_ASSIGNED_Z4_MS1 1
+    #endif
   #endif
   #ifndef Z4_MS2_PIN
     #define Z4_MS2_PIN    _EPIN(Z4_E_INDEX, MS2)
+    #if PIN_EXISTS(Z4_MS2)
+      #define AUTO_ASSIGNED_Z4_MS2 1
+    #endif
   #endif
   #ifndef Z4_MS3_PIN
     #define Z4_MS3_PIN    _EPIN(Z4_E_INDEX, MS3)
+    #if PIN_EXISTS(Z4_MS3)
+      #define AUTO_ASSIGNED_Z4_MS3 1
+    #endif
   #endif
   #if AXIS_HAS_UART(Z4)
     #ifndef Z4_SERIAL_TX_PIN
       #define Z4_SERIAL_TX_PIN _EPIN(Z4_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z4_SERIAL_RX_PIN
       #define Z4_SERIAL_RX_PIN _EPIN(Z4_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(Z4_USE_ENDSTOP) && defined(Z4_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 4 && _PEXI(Z4_E_INDEX, DIAG)
+  #if !defined(Z4_DIAG_PIN) && !defined(Z4_USE_ENDSTOP) && defined(Z4_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 4 && _PEXI(Z4_E_INDEX, DIAG)
     #define Z4_DIAG_PIN _EPIN(Z4_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Z4, X_MIN)
       #define Z4_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Z4, Y_MIN)
       #define Z4_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Z4, Z_MIN)
       #define Z4_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Z4, X_MAX)
       #define Z4_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Z4, Y_MAX)
       #define Z4_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(Z4, Z_MAX)
       #define Z4_USE_ENDSTOP _ZMAX_
     #else
-      #define _Z4_USE_ENDSTOP(P) _E##P##_DIAG_
-      #define Z4_USE_ENDSTOP _Z4_USE_ENDSTOP(Z4_E_INDEX)
+      #define Z4_USE_ENDSTOP _En_DIAG_(Z4_E_INDEX)
     #endif
-    #undef Z4_DIAG_PIN
+    #define AUTO_ASSIGNED_Z4_DIAG 1
+    #undef Z4_DIAG_PIN // Defined in Conditionals_post.h based on Z4_USE_ENDSTOP
   #endif
-  #define I_E_INDEX INCREMENT(Z4_E_INDEX)
-#else
-  #define I_E_INDEX Z4_E_INDEX
 #endif
 
 #ifndef Z4_CS_PIN
   #define Z4_CS_PIN  -1
 #endif
 #ifndef Z4_MS1_PIN
   #define Z4_MS1_PIN -1
 #endif
 #ifndef Z4_MS2_PIN
   #define Z4_MS2_PIN -1
 #endif
 #ifndef Z4_MS3_PIN
   #define Z4_MS3_PIN -1
 #endif
 
+// The I axis, if any, should be the next open extruder port
+#if LINEAR_AXES >= 4 && !defined(I_DIAG_PIN) && !defined(I_STEP_PIN) && !PIN_EXISTS(I_CS_PIN)
+  #define J_E_INDEX INCREMENT(I_E_INDEX)
+#else
+  #define J_E_INDEX I_E_INDEX
+#endif
 #if LINEAR_AXES >= 4
   #ifndef I_STEP_PIN
     #define I_STEP_PIN   _EPIN(I_E_INDEX, STEP)
     #define I_DIR_PIN    _EPIN(I_E_INDEX, DIR)
     #define I_ENABLE_PIN _EPIN(I_E_INDEX, ENABLE)
     #if I_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(I_STEP)
       #error "No E stepper plug left for I!"
+    #else
+      #define AUTO_ASSIGNED_I_STEPPER 1
     #endif
   #endif
-  #if AXIS_HAS_SPI(I)
-    #ifndef I_CS_PIN
-      #define I_CS_PIN   _EPIN(I_E_INDEX, CS)
+  #if AXIS_HAS_SPI(I) && !defined(I_CS_PIN)
+    #define I_CS_PIN     _EPIN(I_E_INDEX, CS)
+    #if PIN_EXISTS(I_CS)
+      #define AUTO_ASSIGNED_I_CS 1
     #endif
   #endif
   #ifndef I_MS1_PIN
     #define I_MS1_PIN    _EPIN(I_E_INDEX, MS1)
+    #if PIN_EXISTS(I_MS1)
+      #define AUTO_ASSIGNED_I_MS1 1
+    #endif
   #endif
   #ifndef I_MS2_PIN
     #define I_MS2_PIN    _EPIN(I_E_INDEX, MS2)
+    #if PIN_EXISTS(I_MS2)
+      #define AUTO_ASSIGNED_I_MS2 1
+    #endif
   #endif
   #ifndef I_MS3_PIN
     #define I_MS3_PIN    _EPIN(I_E_INDEX, MS3)
+    #if PIN_EXISTS(I_MS3)
+      #define AUTO_ASSIGNED_I_MS3 1
+    #endif
   #endif
   #if AXIS_HAS_UART(I)
     #ifndef I_SERIAL_TX_PIN
       #define I_SERIAL_TX_PIN _EPIN(I_E_INDEX, SERIAL_TX)
     #endif
     #ifndef I_SERIAL_RX_PIN
       #define I_SERIAL_RX_PIN _EPIN(I_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(I_USE_ENDSTOP) && defined(I_STALL_SENSITIVITY) && _PEXI(I_E_INDEX, DIAG)
+  #if !defined(I_DIAG_PIN) && !defined(I_USE_ENDSTOP) && defined(I_STALL_SENSITIVITY) && _PEXI(I_E_INDEX, DIAG)
     #define I_DIAG_PIN _EPIN(I_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(I, X_MIN)
       #define I_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(I, Y_MIN)
       #define I_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(I, Z_MIN)
       #define I_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(I, X_MAX)
       #define I_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(I, Y_MAX)
       #define I_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(I, Z_MAX)
       #define I_USE_ENDSTOP _ZMAX_
     #else
-      #define _I_USE_ENDSTOP(P) _E##P##_DIAG_
-      #define I_USE_ENDSTOP _I_USE_ENDSTOP(I_E_INDEX)
+      #define I_USE_ENDSTOP _En_DIAG_(I_E_INDEX)
     #endif
-    #undef I_DIAG_PIN
+    #define AUTO_ASSIGNED_I_DIAG 1
+    #undef I_DIAG_PIN // Defined in Conditionals_post.h based on I_USE_ENDSTOP
   #endif
-  #define J_E_INDEX INCREMENT(I_E_INDEX)
-#else
-  #define J_E_INDEX I_E_INDEX
 #endif
 
 #ifndef I_CS_PIN
   #define I_CS_PIN  -1
 #endif
 #ifndef I_MS1_PIN
   #define I_MS1_PIN -1
 #endif
 #ifndef I_MS2_PIN
   #define I_MS2_PIN -1
 #endif
 #ifndef I_MS3_PIN
   #define I_MS3_PIN -1
 #endif
 
+// The J axis, if any, should be the next open extruder port
+#if LINEAR_AXES >= 5 && !defined(J_DIAG_PIN) && !defined(J_STEP_PIN) && !PIN_EXISTS(J_CS_PIN)
+  #define K_E_INDEX INCREMENT(J_E_INDEX)
+#else
+  #define K_E_INDEX J_E_INDEX
+#endif
 #if LINEAR_AXES >= 5
   #ifndef J_STEP_PIN
     #define J_STEP_PIN   _EPIN(J_E_INDEX, STEP)
     #define J_DIR_PIN    _EPIN(J_E_INDEX, DIR)
     #define J_ENABLE_PIN _EPIN(J_E_INDEX, ENABLE)
     #if I_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(J_STEP)
       #error "No E stepper plug left for J!"
+    #else
+      #define AUTO_ASSIGNED_J_STEPPER 1
     #endif
   #endif
-  #if AXIS_HAS_SPI(J)
-    #ifndef J_CS_PIN
-      #define J_CS_PIN   _EPIN(J_E_INDEX, CS)
+  #if AXIS_HAS_SPI(J) && !defined(J_CS_PIN)
+    #define J_CS_PIN     _EPIN(J_E_INDEX, CS)
+    #if PIN_EXISTS(J_CS)
+      #define AUTO_ASSIGNED_J_CS 1
     #endif
   #endif
   #ifndef J_MS1_PIN
     #define J_MS1_PIN    _EPIN(J_E_INDEX, MS1)
+    #if PIN_EXISTS(J_MS1)
+      #define AUTO_ASSIGNED_J_MS1 1
+    #endif
   #endif
   #ifndef J_MS2_PIN
     #define J_MS2_PIN    _EPIN(J_E_INDEX, MS2)
+    #if PIN_EXISTS(J_MS2)
+      #define AUTO_ASSIGNED_J_MS2 1
+    #endif
   #endif
   #ifndef J_MS3_PIN
     #define J_MS3_PIN    _EPIN(J_E_INDEX, MS3)
+    #if PIN_EXISTS(J_MS3)
+      #define AUTO_ASSIGNED_J_MS3 1
+    #endif
   #endif
   #if AXIS_HAS_UART(J)
     #ifndef J_SERIAL_TX_PIN
       #define J_SERIAL_TX_PIN _EPIN(J_E_INDEX, SERIAL_TX)
     #endif
     #ifndef J_SERIAL_RX_PIN
       #define J_SERIAL_RX_PIN _EPIN(J_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(J_USE_ENDSTOP) && defined(J_STALL_SENSITIVITY) && _PEXI(J_E_INDEX, DIAG)
+  #if !defined(J_DIAG_PIN) && !defined(J_USE_ENDSTOP) && defined(J_STALL_SENSITIVITY) && _PEXI(J_E_INDEX, DIAG)
     #define J_DIAG_PIN _EPIN(J_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(J, X_MIN)
       #define J_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(J, Y_MIN)
       #define J_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(J, Z_MIN)
       #define J_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(J, X_MAX)
       #define J_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(J, Y_MAX)
       #define J_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(I, Z_MAX)
       #define J_USE_ENDSTOP _ZMAX_
     #else
-      #define _J_USE_ENDSTOP(P) _E##P##_DIAG_
-      #define J_USE_ENDSTOP _J_USE_ENDSTOP(J_E_INDEX)
+      #define J_USE_ENDSTOP _En_DIAG_(J_E_INDEX)
     #endif
-    #undef J_DIAG_PIN
+    #define AUTO_ASSIGNED_J_DIAG 1
+    #undef J_DIAG_PIN // Defined in Conditionals_post.h based on J_USE_ENDSTOP
   #endif
-  #define K_E_INDEX INCREMENT(J_E_INDEX)
-#else
-  #define K_E_INDEX J_E_INDEX
 #endif
 
 #ifndef J_CS_PIN
   #define J_CS_PIN  -1
 #endif
 #ifndef J_MS1_PIN
   #define J_MS1_PIN -1
 #endif
 #ifndef J_MS2_PIN
   #define J_MS2_PIN -1
 #endif
 #ifndef J_MS3_PIN
   #define J_MS3_PIN -1
 #endif
 
+// The K axis, if any, should be the next open extruder port
 #if LINEAR_AXES >= 6
   #ifndef K_STEP_PIN
     #define K_STEP_PIN   _EPIN(K_E_INDEX, STEP)
     #define K_DIR_PIN    _EPIN(K_E_INDEX, DIR)
     #define K_ENABLE_PIN _EPIN(K_E_INDEX, ENABLE)
     #if K_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(K_STEP)
       #error "No E stepper plug left for K!"
+    #else
+      #define AUTO_ASSIGNED_K_STEPPER 1
     #endif
   #endif
-  #if AXIS_HAS_SPI(K)
-    #ifndef K_CS_PIN
-      #define K_CS_PIN   _EPIN(K_E_INDEX, CS)
+  #if AXIS_HAS_SPI(K) && !defined(K_CS_PIN)
+    #define K_CS_PIN     _EPIN(K_E_INDEX, CS)
+    #if PIN_EXISTS(K_CS)
+      #define AUTO_ASSIGNED_K_CS 1
     #endif
   #endif
   #ifndef K_MS1_PIN
     #define K_MS1_PIN    _EPIN(K_E_INDEX, MS1)
+    #if PIN_EXISTS(K_MS1)
+      #define AUTO_ASSIGNED_K_MS1 1
+    #endif
   #endif
   #ifndef K_MS2_PIN
     #define K_MS2_PIN    _EPIN(K_E_INDEX, MS2)
+    #if PIN_EXISTS(K_MS2)
+      #define AUTO_ASSIGNED_K_MS2 1
+    #endif
   #endif
   #ifndef K_MS3_PIN
     #define K_MS3_PIN    _EPIN(K_E_INDEX, MS3)
+    #if PIN_EXISTS(K_MS3)
+      #define AUTO_ASSIGNED_K_MS3 1
+    #endif
   #endif
   #if AXIS_HAS_UART(K)
     #ifndef K_SERIAL_TX_PIN
       #define K_SERIAL_TX_PIN _EPIN(K_E_INDEX, SERIAL_TX)
     #endif
     #ifndef K_SERIAL_RX_PIN
       #define K_SERIAL_RX_PIN _EPIN(K_E_INDEX, SERIAL_RX)
     #endif
   #endif
   // Auto-assign pins for stallGuard sensorless homing
-  #if !defined(K_USE_ENDSTOP) && defined(K_STALL_SENSITIVITY) && _PEXI(K_E_INDEX, DIAG)
+  #if !defined(K_DIAG_PIN) && !defined(K_USE_ENDSTOP) && defined(K_STALL_SENSITIVITY) && _PEXI(K_E_INDEX, DIAG)
     #define K_DIAG_PIN _EPIN(K_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(K, X_MIN)
       #define K_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(K, Y_MIN)
       #define K_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(K, Z_MIN)
       #define K_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(K, X_MAX)
       #define K_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(K, Y_MAX)
       #define K_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(K, Z_MAX)
       #define K_USE_ENDSTOP _ZMAX_
     #else
-      #define _K_USE_ENDSTOP(P) _E##P##_DIAG_
-      #define K_USE_ENDSTOP _K_USE_ENDSTOP(K_E_INDEX)
+      #define K_USE_ENDSTOP _En_DIAG_(K_E_INDEX)
     #endif
-    #undef K_DIAG_PIN
+    #define AUTO_ASSIGNED_K_DIAG 1
+    #undef K_DIAG_PIN // Defined in Conditionals_post.h based on K_USE_ENDSTOP
   #endif
 #endif
 
 #ifndef K_CS_PIN
   #define K_CS_PIN  -1
 #endif
 #ifndef K_MS1_PIN
   #define K_MS1_PIN -1
 #endif
 #ifndef K_MS2_PIN

commit c881fab1280f338e32015e1556890d647ee967fb
Author: dotdash32 <dotdash32@gmail.com>
Date:   Sun Sep 5 17:21:25 2021 -0700

    🎨 Use largest default ST9720 delays (#22713)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index aa2bc07908..6b5c695e85 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -1214,49 +1214,21 @@
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MAX
   #undef Z4_MIN_PIN
 #endif
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MIN
   #undef Z4_MAX_PIN
 #endif
 
 //
 // Default DOGLCD SPI delays
 //
-#if ENABLED(U8GLIB_ST7920)
-  #ifndef ST7920_DELAY_1
-    #ifdef LCD_ST7920_DELAY_1
-      #define ST7920_DELAY_1 LCD_ST7920_DELAY_1
-    #elif defined(BOARD_ST7920_DELAY_1)
-      #define ST7920_DELAY_1 BOARD_ST7920_DELAY_1
-    #elif defined(CPU_ST7920_DELAY_1)
-      #define ST7920_DELAY_1 CPU_ST7920_DELAY_1
-    #endif
-  #endif
-  #ifndef ST7920_DELAY_2
-    #ifdef LCD_ST7920_DELAY_2
-      #define ST7920_DELAY_2 LCD_ST7920_DELAY_2
-    #elif defined(BOARD_ST7920_DELAY_2)
-      #define ST7920_DELAY_2 BOARD_ST7920_DELAY_2
-    #elif defined(CPU_ST7920_DELAY_2)
-      #define ST7920_DELAY_2 CPU_ST7920_DELAY_2
-    #endif
-  #endif
-  #ifndef ST7920_DELAY_3
-    #ifdef LCD_ST7920_DELAY_3
-      #define ST7920_DELAY_3 LCD_ST7920_DELAY_3
-    #elif defined(BOARD_ST7920_DELAY_3)
-      #define ST7920_DELAY_3 BOARD_ST7920_DELAY_3
-    #elif defined(CPU_ST7920_DELAY_3)
-      #define ST7920_DELAY_3 CPU_ST7920_DELAY_3
-    #endif
-  #endif
-#else
+#if DISABLED(U8GLIB_ST7920)
   #undef ST7920_DELAY_1
   #undef ST7920_DELAY_2
   #undef ST7920_DELAY_3
   #undef LCD_ST7920_DELAY_1
   #undef LCD_ST7920_DELAY_2
   #undef LCD_ST7920_DELAY_3
   #undef BOARD_ST7920_DELAY_1
   #undef BOARD_ST7920_DELAY_2
   #undef BOARD_ST7920_DELAY_3
   #undef CPU_ST7920_DELAY_1

commit d818a019c5d80e8b2238f0ea8311ad53154be4ec
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Aug 28 15:27:52 2021 -0500

    🎨 EXP headers, ST7920 delays (#22641)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index fc82e600df..aa2bc07908 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -1214,35 +1214,59 @@
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MAX
   #undef Z4_MIN_PIN
 #endif
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MIN
   #undef Z4_MAX_PIN
 #endif
 
 //
 // Default DOGLCD SPI delays
 //
-#if HAS_MARLINUI_U8GLIB
-  #if !defined(ST7920_DELAY_1) && defined(BOARD_ST7920_DELAY_1)
-    #define ST7920_DELAY_1 BOARD_ST7920_DELAY_1
+#if ENABLED(U8GLIB_ST7920)
+  #ifndef ST7920_DELAY_1
+    #ifdef LCD_ST7920_DELAY_1
+      #define ST7920_DELAY_1 LCD_ST7920_DELAY_1
+    #elif defined(BOARD_ST7920_DELAY_1)
+      #define ST7920_DELAY_1 BOARD_ST7920_DELAY_1
+    #elif defined(CPU_ST7920_DELAY_1)
+      #define ST7920_DELAY_1 CPU_ST7920_DELAY_1
+    #endif
   #endif
-  #if !defined(ST7920_DELAY_2) && defined(BOARD_ST7920_DELAY_2)
-    #define ST7920_DELAY_2 BOARD_ST7920_DELAY_2
+  #ifndef ST7920_DELAY_2
+    #ifdef LCD_ST7920_DELAY_2
+      #define ST7920_DELAY_2 LCD_ST7920_DELAY_2
+    #elif defined(BOARD_ST7920_DELAY_2)
+      #define ST7920_DELAY_2 BOARD_ST7920_DELAY_2
+    #elif defined(CPU_ST7920_DELAY_2)
+      #define ST7920_DELAY_2 CPU_ST7920_DELAY_2
+    #endif
   #endif
-  #if !defined(ST7920_DELAY_3) && defined(BOARD_ST7920_DELAY_3)
-    #define ST7920_DELAY_3 BOARD_ST7920_DELAY_3
+  #ifndef ST7920_DELAY_3
+    #ifdef LCD_ST7920_DELAY_3
+      #define ST7920_DELAY_3 LCD_ST7920_DELAY_3
+    #elif defined(BOARD_ST7920_DELAY_3)
+      #define ST7920_DELAY_3 BOARD_ST7920_DELAY_3
+    #elif defined(CPU_ST7920_DELAY_3)
+      #define ST7920_DELAY_3 CPU_ST7920_DELAY_3
+    #endif
   #endif
 #else
   #undef ST7920_DELAY_1
   #undef ST7920_DELAY_2
   #undef ST7920_DELAY_3
+  #undef LCD_ST7920_DELAY_1
+  #undef LCD_ST7920_DELAY_2
+  #undef LCD_ST7920_DELAY_3
   #undef BOARD_ST7920_DELAY_1
   #undef BOARD_ST7920_DELAY_2
   #undef BOARD_ST7920_DELAY_3
+  #undef CPU_ST7920_DELAY_1
+  #undef CPU_ST7920_DELAY_2
+  #undef CPU_ST7920_DELAY_3
 #endif
 
 #if !NEED_CASE_LIGHT_PIN
   #undef CASE_LIGHT_PIN
 #endif
 
 #undef HAS_FREE_AUX2_PINS
 #undef DIAG_REMAPPED

commit c161a46112debd280dc1ed6945d50f971ff505e6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Aug 13 16:32:25 2021 -0500

    🎨 Update MKSPWC, some other pins (#22557)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index f7152770e5..fc82e600df 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -384,22 +384,22 @@
 #if DISABLED(PSU_CONTROL) || !defined(PS_ON_PIN)
   #undef PS_ON_PIN
   #define PS_ON_PIN -1
 #endif
 #ifndef KILL_PIN
   #define KILL_PIN -1
 #endif
 #ifndef SUICIDE_PIN
   #define SUICIDE_PIN -1
 #endif
-#ifndef SUICIDE_PIN_INVERTING
-  #define SUICIDE_PIN_INVERTING false
+#ifndef SUICIDE_PIN_STATE
+  #define SUICIDE_PIN_STATE LOW
 #endif
 
 #ifndef NUM_SERVO_PLUGS
   #define NUM_SERVO_PLUGS 4
 #endif
 
 //
 // Assign endstop pins for boards with only 3 connectors
 //
 #ifdef X_STOP_PIN

commit 363e83731f7b045d7b3e9842882b1f53e032ca89
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Jul 28 23:24:30 2021 -0500

    🔧 HAS_CUSTOM_PROBE_PIN => USES_Z_MIN_PROBE_PIN

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index ac4459bd02..f7152770e5 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -1127,21 +1127,21 @@
 #if _STOP_IN_USE(_XMIN_)
   #define USE_XMIN_PLUG
 #endif
 #if _STOP_IN_USE(_YMIN_)
   #define USE_YMIN_PLUG
 #endif
 #if _STOP_IN_USE(_ZMIN_)
   #define USE_ZMIN_PLUG
 #endif
 #undef _STOP_IN_USE
-#if !HAS_CUSTOM_PROBE_PIN
+#if !USES_Z_MIN_PROBE_PIN
   #undef Z_MIN_PROBE_PIN
   #define Z_MIN_PROBE_PIN    -1
 #endif
 #if DISABLED(USE_XMIN_PLUG)
   #undef X_MIN_PIN
   #define X_MIN_PIN          -1
 #endif
 #if DISABLED(USE_XMAX_PLUG)
   #undef X_MAX_PIN
   #define X_MAX_PIN          -1

commit 3d0e8346be1a8da6ec665a8e8afc4b6809ebe4a4
Author: Bo Herrmannsen <bo.herrmannsen@gmail.com>
Date:   Mon Jun 14 11:28:13 2021 +0200

    ✨ Extruder with Dual Stepper Drivers (#21403)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index bd52e30454..ac4459bd02 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -536,23 +536,31 @@
  * on the board, then in order, Y2, Z2, Z3. These can be
  * overridden in Configuration.h or Configuration_adv.h.
  */
 
 #define __PEXI(p,q) PIN_EXISTS(E##p##_##q)
 #define _PEXI(p,q) __PEXI(p,q)
 #define __EPIN(p,q) E##p##_##q##_PIN
 #define _EPIN(p,q) __EPIN(p,q)
 #define DIAG_REMAPPED(p,q) (PIN_EXISTS(q) && _EPIN(p##_E_INDEX, DIAG) == q##_PIN)
 
-// The X2 axis, if any, should be the next open extruder port
-#define X2_E_INDEX E_STEPPERS
+// The E0/E1 steppers are always used for Dual E
+#if ENABLED(E_DUAL_STEPPER_DRIVERS)
+  #ifndef E1_STEP_PIN
+    #error "No E1 stepper available for E_DUAL_STEPPER_DRIVERS!"
+  #endif
+  #define X2_E_INDEX INCREMENT(E_STEPPERS)
+#else
+  #define X2_E_INDEX E_STEPPERS
+#endif
 
+// The X2 axis, if any, should be the next open extruder port
 #if EITHER(DUAL_X_CARRIAGE, X_DUAL_STEPPER_DRIVERS)
   #ifndef X2_STEP_PIN
     #define X2_STEP_PIN   _EPIN(X2_E_INDEX, STEP)
     #define X2_DIR_PIN    _EPIN(X2_E_INDEX, DIR)
     #define X2_ENABLE_PIN _EPIN(X2_E_INDEX, ENABLE)
     #if X2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(X2_STEP)
       #error "No E stepper plug left for X2!"
     #endif
   #endif
   #ifndef X2_MS1_PIN

commit 70b80fcd16722ecbd8ada54c0fb867041cb5f1fd
Author: ellensp <ellensp@hotmail.com>
Date:   Wed Jun 9 10:43:39 2021 +1200

    🎨 IJK auto-allocation (#22075)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 33b78a4d11..bd52e30454 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -802,20 +802,22 @@
       #define Z3_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(Z3, Z_MAX)
       #define Z3_USE_ENDSTOP _ZMAX_
     #else
       #define _Z3_USE_ENDSTOP(P) _E##P##_DIAG_
       #define Z3_USE_ENDSTOP _Z3_USE_ENDSTOP(Z3_E_INDEX)
     #endif
     #undef Z3_DIAG_PIN
   #endif
   #define Z4_E_INDEX INCREMENT(Z3_E_INDEX)
+#else
+  #define Z4_E_INDEX Z3_E_INDEX
 #endif
 
 #ifndef Z3_CS_PIN
   #define Z3_CS_PIN  -1
 #endif
 #ifndef Z3_MS1_PIN
   #define Z3_MS1_PIN -1
 #endif
 #ifndef Z3_MS2_PIN
   #define Z3_MS2_PIN -1
@@ -869,35 +871,245 @@
     #elif DIAG_REMAPPED(Z4, Y_MAX)
       #define Z4_USE_ENDSTOP _YMAX_
     #elif DIAG_REMAPPED(Z4, Z_MAX)
       #define Z4_USE_ENDSTOP _ZMAX_
     #else
       #define _Z4_USE_ENDSTOP(P) _E##P##_DIAG_
       #define Z4_USE_ENDSTOP _Z4_USE_ENDSTOP(Z4_E_INDEX)
     #endif
     #undef Z4_DIAG_PIN
   #endif
+  #define I_E_INDEX INCREMENT(Z4_E_INDEX)
+#else
+  #define I_E_INDEX Z4_E_INDEX
 #endif
 
 #ifndef Z4_CS_PIN
   #define Z4_CS_PIN  -1
 #endif
 #ifndef Z4_MS1_PIN
   #define Z4_MS1_PIN -1
 #endif
 #ifndef Z4_MS2_PIN
   #define Z4_MS2_PIN -1
 #endif
 #ifndef Z4_MS3_PIN
   #define Z4_MS3_PIN -1
 #endif
 
+#if LINEAR_AXES >= 4
+  #ifndef I_STEP_PIN
+    #define I_STEP_PIN   _EPIN(I_E_INDEX, STEP)
+    #define I_DIR_PIN    _EPIN(I_E_INDEX, DIR)
+    #define I_ENABLE_PIN _EPIN(I_E_INDEX, ENABLE)
+    #if I_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(I_STEP)
+      #error "No E stepper plug left for I!"
+    #endif
+  #endif
+  #if AXIS_HAS_SPI(I)
+    #ifndef I_CS_PIN
+      #define I_CS_PIN   _EPIN(I_E_INDEX, CS)
+    #endif
+  #endif
+  #ifndef I_MS1_PIN
+    #define I_MS1_PIN    _EPIN(I_E_INDEX, MS1)
+  #endif
+  #ifndef I_MS2_PIN
+    #define I_MS2_PIN    _EPIN(I_E_INDEX, MS2)
+  #endif
+  #ifndef I_MS3_PIN
+    #define I_MS3_PIN    _EPIN(I_E_INDEX, MS3)
+  #endif
+  #if AXIS_HAS_UART(I)
+    #ifndef I_SERIAL_TX_PIN
+      #define I_SERIAL_TX_PIN _EPIN(I_E_INDEX, SERIAL_TX)
+    #endif
+    #ifndef I_SERIAL_RX_PIN
+      #define I_SERIAL_RX_PIN _EPIN(I_E_INDEX, SERIAL_RX)
+    #endif
+  #endif
+  // Auto-assign pins for stallGuard sensorless homing
+  #if !defined(I_USE_ENDSTOP) && defined(I_STALL_SENSITIVITY) && _PEXI(I_E_INDEX, DIAG)
+    #define I_DIAG_PIN _EPIN(I_E_INDEX, DIAG)
+    #if   DIAG_REMAPPED(I, X_MIN)
+      #define I_USE_ENDSTOP _XMIN_
+    #elif DIAG_REMAPPED(I, Y_MIN)
+      #define I_USE_ENDSTOP _YMIN_
+    #elif DIAG_REMAPPED(I, Z_MIN)
+      #define I_USE_ENDSTOP _ZMIN_
+    #elif DIAG_REMAPPED(I, X_MAX)
+      #define I_USE_ENDSTOP _XMAX_
+    #elif DIAG_REMAPPED(I, Y_MAX)
+      #define I_USE_ENDSTOP _YMAX_
+    #elif DIAG_REMAPPED(I, Z_MAX)
+      #define I_USE_ENDSTOP _ZMAX_
+    #else
+      #define _I_USE_ENDSTOP(P) _E##P##_DIAG_
+      #define I_USE_ENDSTOP _I_USE_ENDSTOP(I_E_INDEX)
+    #endif
+    #undef I_DIAG_PIN
+  #endif
+  #define J_E_INDEX INCREMENT(I_E_INDEX)
+#else
+  #define J_E_INDEX I_E_INDEX
+#endif
+
+#ifndef I_CS_PIN
+  #define I_CS_PIN  -1
+#endif
+#ifndef I_MS1_PIN
+  #define I_MS1_PIN -1
+#endif
+#ifndef I_MS2_PIN
+  #define I_MS2_PIN -1
+#endif
+#ifndef I_MS3_PIN
+  #define I_MS3_PIN -1
+#endif
+
+#if LINEAR_AXES >= 5
+  #ifndef J_STEP_PIN
+    #define J_STEP_PIN   _EPIN(J_E_INDEX, STEP)
+    #define J_DIR_PIN    _EPIN(J_E_INDEX, DIR)
+    #define J_ENABLE_PIN _EPIN(J_E_INDEX, ENABLE)
+    #if I_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(J_STEP)
+      #error "No E stepper plug left for J!"
+    #endif
+  #endif
+  #if AXIS_HAS_SPI(J)
+    #ifndef J_CS_PIN
+      #define J_CS_PIN   _EPIN(J_E_INDEX, CS)
+    #endif
+  #endif
+  #ifndef J_MS1_PIN
+    #define J_MS1_PIN    _EPIN(J_E_INDEX, MS1)
+  #endif
+  #ifndef J_MS2_PIN
+    #define J_MS2_PIN    _EPIN(J_E_INDEX, MS2)
+  #endif
+  #ifndef J_MS3_PIN
+    #define J_MS3_PIN    _EPIN(J_E_INDEX, MS3)
+  #endif
+  #if AXIS_HAS_UART(J)
+    #ifndef J_SERIAL_TX_PIN
+      #define J_SERIAL_TX_PIN _EPIN(J_E_INDEX, SERIAL_TX)
+    #endif
+    #ifndef J_SERIAL_RX_PIN
+      #define J_SERIAL_RX_PIN _EPIN(J_E_INDEX, SERIAL_RX)
+    #endif
+  #endif
+  // Auto-assign pins for stallGuard sensorless homing
+  #if !defined(J_USE_ENDSTOP) && defined(J_STALL_SENSITIVITY) && _PEXI(J_E_INDEX, DIAG)
+    #define J_DIAG_PIN _EPIN(J_E_INDEX, DIAG)
+    #if   DIAG_REMAPPED(J, X_MIN)
+      #define J_USE_ENDSTOP _XMIN_
+    #elif DIAG_REMAPPED(J, Y_MIN)
+      #define J_USE_ENDSTOP _YMIN_
+    #elif DIAG_REMAPPED(J, Z_MIN)
+      #define J_USE_ENDSTOP _ZMIN_
+    #elif DIAG_REMAPPED(J, X_MAX)
+      #define J_USE_ENDSTOP _XMAX_
+    #elif DIAG_REMAPPED(J, Y_MAX)
+      #define J_USE_ENDSTOP _YMAX_
+    #elif DIAG_REMAPPED(I, Z_MAX)
+      #define J_USE_ENDSTOP _ZMAX_
+    #else
+      #define _J_USE_ENDSTOP(P) _E##P##_DIAG_
+      #define J_USE_ENDSTOP _J_USE_ENDSTOP(J_E_INDEX)
+    #endif
+    #undef J_DIAG_PIN
+  #endif
+  #define K_E_INDEX INCREMENT(J_E_INDEX)
+#else
+  #define K_E_INDEX J_E_INDEX
+#endif
+
+#ifndef J_CS_PIN
+  #define J_CS_PIN  -1
+#endif
+#ifndef J_MS1_PIN
+  #define J_MS1_PIN -1
+#endif
+#ifndef J_MS2_PIN
+  #define J_MS2_PIN -1
+#endif
+#ifndef J_MS3_PIN
+  #define J_MS3_PIN -1
+#endif
+
+#if LINEAR_AXES >= 6
+  #ifndef K_STEP_PIN
+    #define K_STEP_PIN   _EPIN(K_E_INDEX, STEP)
+    #define K_DIR_PIN    _EPIN(K_E_INDEX, DIR)
+    #define K_ENABLE_PIN _EPIN(K_E_INDEX, ENABLE)
+    #if K_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(K_STEP)
+      #error "No E stepper plug left for K!"
+    #endif
+  #endif
+  #if AXIS_HAS_SPI(K)
+    #ifndef K_CS_PIN
+      #define K_CS_PIN   _EPIN(K_E_INDEX, CS)
+    #endif
+  #endif
+  #ifndef K_MS1_PIN
+    #define K_MS1_PIN    _EPIN(K_E_INDEX, MS1)
+  #endif
+  #ifndef K_MS2_PIN
+    #define K_MS2_PIN    _EPIN(K_E_INDEX, MS2)
+  #endif
+  #ifndef K_MS3_PIN
+    #define K_MS3_PIN    _EPIN(K_E_INDEX, MS3)
+  #endif
+  #if AXIS_HAS_UART(K)
+    #ifndef K_SERIAL_TX_PIN
+      #define K_SERIAL_TX_PIN _EPIN(K_E_INDEX, SERIAL_TX)
+    #endif
+    #ifndef K_SERIAL_RX_PIN
+      #define K_SERIAL_RX_PIN _EPIN(K_E_INDEX, SERIAL_RX)
+    #endif
+  #endif
+  // Auto-assign pins for stallGuard sensorless homing
+  #if !defined(K_USE_ENDSTOP) && defined(K_STALL_SENSITIVITY) && _PEXI(K_E_INDEX, DIAG)
+    #define K_DIAG_PIN _EPIN(K_E_INDEX, DIAG)
+    #if   DIAG_REMAPPED(K, X_MIN)
+      #define K_USE_ENDSTOP _XMIN_
+    #elif DIAG_REMAPPED(K, Y_MIN)
+      #define K_USE_ENDSTOP _YMIN_
+    #elif DIAG_REMAPPED(K, Z_MIN)
+      #define K_USE_ENDSTOP _ZMIN_
+    #elif DIAG_REMAPPED(K, X_MAX)
+      #define K_USE_ENDSTOP _XMAX_
+    #elif DIAG_REMAPPED(K, Y_MAX)
+      #define K_USE_ENDSTOP _YMAX_
+    #elif DIAG_REMAPPED(K, Z_MAX)
+      #define K_USE_ENDSTOP _ZMAX_
+    #else
+      #define _K_USE_ENDSTOP(P) _E##P##_DIAG_
+      #define K_USE_ENDSTOP _K_USE_ENDSTOP(K_E_INDEX)
+    #endif
+    #undef K_DIAG_PIN
+  #endif
+#endif
+
+#ifndef K_CS_PIN
+  #define K_CS_PIN  -1
+#endif
+#ifndef K_MS1_PIN
+  #define K_MS1_PIN -1
+#endif
+#ifndef K_MS2_PIN
+  #define K_MS2_PIN -1
+#endif
+#ifndef K_MS3_PIN
+  #define K_MS3_PIN -1
+#endif
+
 //
 // Disable unused endstop / probe pins
 //
 #define _STOP_IN_USE(N) (X2_USE_ENDSTOP == N || Y2_USE_ENDSTOP == N || Z2_USE_ENDSTOP == N || Z3_USE_ENDSTOP == N || Z4_USE_ENDSTOP == N)
 #if _STOP_IN_USE(_XMAX_)
   #define USE_XMAX_PLUG
 #endif
 #if _STOP_IN_USE(_YMAX_)
   #define USE_YMAX_PLUG
 #endif

commit ba4fa4983411d03eae791b70d8ec3e26f0781785
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sun Jun 6 08:30:39 2021 +0200

    ✏️ Followup to Six Linear Axes (#22056)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 31031c9589..33b78a4d11 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -205,20 +205,29 @@
 //
 #if !AXIS_HAS_SPI(X)
   #undef X_CS_PIN
 #endif
 #if !AXIS_HAS_SPI(Y)
   #undef Y_CS_PIN
 #endif
 #if !AXIS_HAS_SPI(Z)
   #undef Z_CS_PIN
 #endif
+#if !AXIS_HAS_SPI(I)
+  #undef I_CS_PIN
+#endif
+#if !AXIS_HAS_SPI(J)
+  #undef J_CS_PIN
+#endif
+#if !AXIS_HAS_SPI(K)
+  #undef K_CS_PIN
+#endif
 #if E_STEPPERS && !AXIS_HAS_SPI(E0)
   #undef E0_CS_PIN
 #endif
 #if E_STEPPERS > 1 && !AXIS_HAS_SPI(E1)
   #undef E1_CS_PIN
 #endif
 #if E_STEPPERS > 2 && !AXIS_HAS_SPI(E2)
   #undef E2_CS_PIN
 #endif
 #if E_STEPPERS > 3 && !AXIS_HAS_SPI(E3)
@@ -239,20 +248,29 @@
 
 #ifndef X_CS_PIN
   #define X_CS_PIN -1
 #endif
 #ifndef Y_CS_PIN
   #define Y_CS_PIN -1
 #endif
 #ifndef Z_CS_PIN
   #define Z_CS_PIN -1
 #endif
+#ifndef I_CS_PIN
+  #define I_CS_PIN -1
+#endif
+#ifndef J_CS_PIN
+  #define J_CS_PIN -1
+#endif
+#ifndef K_CS_PIN
+  #define K_CS_PIN -1
+#endif
 #ifndef E0_CS_PIN
   #define E0_CS_PIN -1
 #endif
 #ifndef E1_CS_PIN
   #define E1_CS_PIN -1
 #endif
 #ifndef E2_CS_PIN
   #define E2_CS_PIN -1
 #endif
 #ifndef E3_CS_PIN
@@ -893,57 +911,69 @@
   #define USE_YMIN_PLUG
 #endif
 #if _STOP_IN_USE(_ZMIN_)
   #define USE_ZMIN_PLUG
 #endif
 #undef _STOP_IN_USE
 #if !HAS_CUSTOM_PROBE_PIN
   #undef Z_MIN_PROBE_PIN
   #define Z_MIN_PROBE_PIN    -1
 #endif
+#if DISABLED(USE_XMIN_PLUG)
+  #undef X_MIN_PIN
+  #define X_MIN_PIN          -1
+#endif
 #if DISABLED(USE_XMAX_PLUG)
   #undef X_MAX_PIN
   #define X_MAX_PIN          -1
 #endif
+#if DISABLED(USE_YMIN_PLUG)
+  #undef Y_MIN_PIN
+  #define Y_MIN_PIN          -1
+#endif
 #if DISABLED(USE_YMAX_PLUG)
   #undef Y_MAX_PIN
   #define Y_MAX_PIN          -1
 #endif
+#if DISABLED(USE_ZMIN_PLUG)
+  #undef Z_MIN_PIN
+  #define Z_MIN_PIN          -1
+#endif
 #if DISABLED(USE_ZMAX_PLUG)
   #undef Z_MAX_PIN
   #define Z_MAX_PIN          -1
 #endif
+#if DISABLED(USE_IMIN_PLUG)
+  #undef I_MIN_PIN
+  #define I_MIN_PIN          -1
+#endif
 #if DISABLED(USE_IMAX_PLUG)
   #undef I_MAX_PIN
   #define I_MAX_PIN          -1
 #endif
+#if DISABLED(USE_JMIN_PLUG)
+  #undef J_MIN_PIN
+  #define J_MIN_PIN          -1
+#endif
 #if DISABLED(USE_JMAX_PLUG)
   #undef J_MAX_PIN
   #define J_MAX_PIN          -1
 #endif
+#if DISABLED(USE_KMIN_PLUG)
+  #undef K_MIN_PIN
+  #define K_MIN_PIN          -1
+#endif
 #if DISABLED(USE_KMAX_PLUG)
   #undef K_MAX_PIN
   #define K_MAX_PIN          -1
 #endif
 
-#if DISABLED(USE_XMIN_PLUG)
-  #undef X_MIN_PIN
-  #define X_MIN_PIN          -1
-#endif
-#if DISABLED(USE_YMIN_PLUG)
-  #undef Y_MIN_PIN
-  #define Y_MIN_PIN          -1
-#endif
-#if DISABLED(USE_ZMIN_PLUG)
-  #undef Z_MIN_PIN
-  #define Z_MIN_PIN          -1
-#endif
 #if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MAX
   #undef X2_MIN_PIN
 #endif
 #if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MIN
   #undef X2_MAX_PIN
 #endif
 #if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MAX
   #undef Y2_MIN_PIN
 #endif
 #if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MIN
@@ -961,33 +991,20 @@
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_TO_MIN
   #undef Z3_MAX_PIN
 #endif
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MAX
   #undef Z4_MIN_PIN
 #endif
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MIN
   #undef Z4_MAX_PIN
 #endif
 
-#if DISABLED(USE_IMIN_PLUG)
-  #undef I_MIN_PIN
-  #define I_MIN_PIN          -1
-#endif
-#if DISABLED(USE_JMIN_PLUG)
-  #undef J_MIN_PIN
-  #define J_MIN_PIN          -1
-#endif
-#if DISABLED(USE_KMIN_PLUG)
-  #undef K_MIN_PIN
-  #define K_MIN_PIN          -1
-#endif
-
 //
 // Default DOGLCD SPI delays
 //
 #if HAS_MARLINUI_U8GLIB
   #if !defined(ST7920_DELAY_1) && defined(BOARD_ST7920_DELAY_1)
     #define ST7920_DELAY_1 BOARD_ST7920_DELAY_1
   #endif
   #if !defined(ST7920_DELAY_2) && defined(BOARD_ST7920_DELAY_2)
     #define ST7920_DELAY_2 BOARD_ST7920_DELAY_2
   #endif

commit 7726af9c5348c1c7d0fd9a56eca87d00cd75fee6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Jun 5 09:18:47 2021 +0200

    🏗️ Support for up to 6 linear axes (#19112)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 8cc19678f1..31031c9589 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -395,54 +395,103 @@
     #ifndef X_MIN_PIN
       #define X_MIN_PIN -1
     #endif
   #endif
 #elif X_HOME_TO_MIN
   #define X_STOP_PIN X_MIN_PIN
 #else
   #define X_STOP_PIN X_MAX_PIN
 #endif
 
-#ifdef Y_STOP_PIN
-  #if Y_HOME_TO_MIN
-    #define Y_MIN_PIN Y_STOP_PIN
-    #ifndef Y_MAX_PIN
-      #define Y_MAX_PIN -1
+#if HAS_Y_AXIS
+  #ifdef Y_STOP_PIN
+    #if Y_HOME_TO_MIN
+      #define Y_MIN_PIN Y_STOP_PIN
+      #ifndef Y_MAX_PIN
+        #define Y_MAX_PIN -1
+      #endif
+    #else
+      #define Y_MAX_PIN Y_STOP_PIN
+      #ifndef Y_MIN_PIN
+        #define Y_MIN_PIN -1
+      #endif
     #endif
+  #elif Y_HOME_TO_MIN
+    #define Y_STOP_PIN Y_MIN_PIN
   #else
-    #define Y_MAX_PIN Y_STOP_PIN
-    #ifndef Y_MIN_PIN
-      #define Y_MIN_PIN -1
+    #define Y_STOP_PIN Y_MAX_PIN
+  #endif
+#endif
+
+#if HAS_Z_AXIS
+  #ifdef Z_STOP_PIN
+    #if Z_HOME_TO_MIN
+      #define Z_MIN_PIN Z_STOP_PIN
+      #ifndef Z_MAX_PIN
+        #define Z_MAX_PIN -1
+      #endif
+    #else
+      #define Z_MAX_PIN Z_STOP_PIN
+      #ifndef Z_MIN_PIN
+        #define Z_MIN_PIN -1
+      #endif
+    #endif
+  #elif Z_HOME_TO_MIN
+    #define Z_STOP_PIN Z_MIN_PIN
+  #else
+    #define Z_STOP_PIN Z_MAX_PIN
+  #endif
+#endif
+
+#if LINEAR_AXES >= 4
+  #ifdef I_STOP_PIN
+    #if I_HOME_TO_MIN
+      #define I_MIN_PIN I_STOP_PIN
+      #define I_MAX_PIN -1
+    #else
+      #define I_MIN_PIN -1
+      #define I_MAX_PIN I_STOP_PIN
     #endif
   #endif
-#elif Y_HOME_TO_MIN
-  #define Y_STOP_PIN Y_MIN_PIN
 #else
-  #define Y_STOP_PIN Y_MAX_PIN
+  #undef I_MIN_PIN
+  #undef I_MAX_PIN
 #endif
 
-#ifdef Z_STOP_PIN
-  #if Z_HOME_TO_MIN
-    #define Z_MIN_PIN Z_STOP_PIN
-    #ifndef Z_MAX_PIN
-      #define Z_MAX_PIN -1
+#if LINEAR_AXES >= 5
+  #ifdef J_STOP_PIN
+    #if J_HOME_TO_MIN
+      #define J_MIN_PIN J_STOP_PIN
+      #define J_MAX_PIN -1
+    #else
+      #define J_MIN_PIN -1
+      #define J_MAX_PIN J_STOP_PIN
     #endif
-  #else
-    #define Z_MAX_PIN Z_STOP_PIN
-    #ifndef Z_MIN_PIN
-      #define Z_MIN_PIN -1
+  #endif
+#else
+  #undef J_MIN_PIN
+  #undef J_MAX_PIN
+#endif
+
+#if LINEAR_AXES >= 6
+  #ifdef K_STOP_PIN
+    #if K_HOME_TO_MIN
+      #define K_MIN_PIN K_STOP_PIN
+      #define K_MAX_PIN -1
+    #else
+      #define K_MIN_PIN -1
+      #define K_MAX_PIN K_STOP_PIN
     #endif
   #endif
-#elif Z_HOME_TO_MIN
-  #define Z_STOP_PIN Z_MIN_PIN
 #else
-  #define Z_STOP_PIN Z_MAX_PIN
+  #undef K_MIN_PIN
+  #undef K_MAX_PIN
 #endif
 
 // Filament Sensor first pin alias
 #if HAS_FILAMENT_SENSOR
   #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN
 #else
   #undef FIL_RUNOUT_PIN
   #undef FIL_RUNOUT1_PIN
 #endif
 
@@ -856,20 +905,33 @@
   #define X_MAX_PIN          -1
 #endif
 #if DISABLED(USE_YMAX_PLUG)
   #undef Y_MAX_PIN
   #define Y_MAX_PIN          -1
 #endif
 #if DISABLED(USE_ZMAX_PLUG)
   #undef Z_MAX_PIN
   #define Z_MAX_PIN          -1
 #endif
+#if DISABLED(USE_IMAX_PLUG)
+  #undef I_MAX_PIN
+  #define I_MAX_PIN          -1
+#endif
+#if DISABLED(USE_JMAX_PLUG)
+  #undef J_MAX_PIN
+  #define J_MAX_PIN          -1
+#endif
+#if DISABLED(USE_KMAX_PLUG)
+  #undef K_MAX_PIN
+  #define K_MAX_PIN          -1
+#endif
+
 #if DISABLED(USE_XMIN_PLUG)
   #undef X_MIN_PIN
   #define X_MIN_PIN          -1
 #endif
 #if DISABLED(USE_YMIN_PLUG)
   #undef Y_MIN_PIN
   #define Y_MIN_PIN          -1
 #endif
 #if DISABLED(USE_ZMIN_PLUG)
   #undef Z_MIN_PIN
@@ -899,20 +961,33 @@
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_TO_MIN
   #undef Z3_MAX_PIN
 #endif
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MAX
   #undef Z4_MIN_PIN
 #endif
 #if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MIN
   #undef Z4_MAX_PIN
 #endif
 
+#if DISABLED(USE_IMIN_PLUG)
+  #undef I_MIN_PIN
+  #define I_MIN_PIN          -1
+#endif
+#if DISABLED(USE_JMIN_PLUG)
+  #undef J_MIN_PIN
+  #define J_MIN_PIN          -1
+#endif
+#if DISABLED(USE_KMIN_PLUG)
+  #undef K_MIN_PIN
+  #define K_MIN_PIN          -1
+#endif
+
 //
 // Default DOGLCD SPI delays
 //
 #if HAS_MARLINUI_U8GLIB
   #if !defined(ST7920_DELAY_1) && defined(BOARD_ST7920_DELAY_1)
     #define ST7920_DELAY_1 BOARD_ST7920_DELAY_1
   #endif
   #if !defined(ST7920_DELAY_2) && defined(BOARD_ST7920_DELAY_2)
     #define ST7920_DELAY_2 BOARD_ST7920_DELAY_2
   #endif

commit 82ea06e6a4ffdb0816ab92a5dd721ec5d770015d
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jun 1 20:23:37 2021 -0500

    ♻️ Patches for Zero Extruders (with TMC)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 37ebbd47ad..8cc19678f1 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -431,102 +431,21 @@
     #ifndef Z_MIN_PIN
       #define Z_MIN_PIN -1
     #endif
   #endif
 #elif Z_HOME_TO_MIN
   #define Z_STOP_PIN Z_MIN_PIN
 #else
   #define Z_STOP_PIN Z_MAX_PIN
 #endif
 
-//
-// Disable unused endstop / probe pins
-//
-#define _STOP_IN_USE(N) (X2_USE_ENDSTOP == N || Y2_USE_ENDSTOP == N || Z2_USE_ENDSTOP == N || Z3_USE_ENDSTOP == N || Z4_USE_ENDSTOP == N)
-#if _STOP_IN_USE(_XMAX_)
-  #define USE_XMAX_PLUG
-#endif
-#if _STOP_IN_USE(_YMAX_)
-  #define USE_YMAX_PLUG
-#endif
-#if _STOP_IN_USE(_ZMAX_)
-  #define USE_ZMAX_PLUG
-#endif
-#if _STOP_IN_USE(_XMIN_)
-  #define USE_XMIN_PLUG
-#endif
-#if _STOP_IN_USE(_YMIN_)
-  #define USE_YMIN_PLUG
-#endif
-#if _STOP_IN_USE(_ZMIN_)
-  #define USE_ZMIN_PLUG
-#endif
-#undef _STOP_IN_USE
-#if !HAS_CUSTOM_PROBE_PIN
-  #undef Z_MIN_PROBE_PIN
-  #define Z_MIN_PROBE_PIN    -1
-#endif
-#if DISABLED(USE_XMAX_PLUG)
-  #undef X_MAX_PIN
-  #define X_MAX_PIN          -1
-#endif
-#if DISABLED(USE_YMAX_PLUG)
-  #undef Y_MAX_PIN
-  #define Y_MAX_PIN          -1
-#endif
-#if DISABLED(USE_ZMAX_PLUG)
-  #undef Z_MAX_PIN
-  #define Z_MAX_PIN          -1
-#endif
-#if DISABLED(USE_XMIN_PLUG)
-  #undef X_MIN_PIN
-  #define X_MIN_PIN          -1
-#endif
-#if DISABLED(USE_YMIN_PLUG)
-  #undef Y_MIN_PIN
-  #define Y_MIN_PIN          -1
-#endif
-#if DISABLED(USE_ZMIN_PLUG)
-  #undef Z_MIN_PIN
-  #define Z_MIN_PIN          -1
-#endif
-#if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MAX
-  #undef X2_MIN_PIN
-#endif
-#if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MIN
-  #undef X2_MAX_PIN
-#endif
-#if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MAX
-  #undef Y2_MIN_PIN
-#endif
-#if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MIN
-  #undef Y2_MAX_PIN
-#endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_TO_MAX
-  #undef Z2_MIN_PIN
-#endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_TO_MIN
-  #undef Z2_MAX_PIN
-#endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_TO_MAX
-  #undef Z3_MIN_PIN
-#endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_TO_MIN
-  #undef Z3_MAX_PIN
-#endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MAX
-  #undef Z4_MIN_PIN
-#endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MIN
-  #undef Z4_MAX_PIN
-#endif
-
+// Filament Sensor first pin alias
 #if HAS_FILAMENT_SENSOR
   #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN
 #else
   #undef FIL_RUNOUT_PIN
   #undef FIL_RUNOUT1_PIN
 #endif
 
 #ifndef LCD_PINS_D4
   #define LCD_PINS_D4 -1
 #endif
@@ -586,21 +505,21 @@
       #define X2_SERIAL_TX_PIN _EPIN(X2_E_INDEX, SERIAL_TX)
     #endif
     #ifndef X2_SERIAL_RX_PIN
       #define X2_SERIAL_RX_PIN _EPIN(X2_E_INDEX, SERIAL_RX)
     #endif
   #endif
 
   //
   // Auto-assign pins for stallGuard sensorless homing
   //
-  #if defined(X2_STALL_SENSITIVITY) && ENABLED(X_DUAL_ENDSTOPS) && _PEXI(X2_E_INDEX, DIAG)
+  #if !defined(X2_USE_ENDSTOP) && defined(X2_STALL_SENSITIVITY) && ENABLED(X_DUAL_ENDSTOPS) && _PEXI(X2_E_INDEX, DIAG)
     #define X2_DIAG_PIN _EPIN(X2_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(X2, X_MIN)      // If already remapped in the pins file...
       #define X2_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(X2, Y_MIN)
       #define X2_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(X2, Z_MIN)
       #define X2_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(X2, X_MAX)
       #define X2_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(X2, Y_MAX)
@@ -655,21 +574,22 @@
     #define Y2_CS_PIN     _EPIN(Y2_E_INDEX, CS)
   #endif
   #if AXIS_HAS_UART(Y2)
     #ifndef Y2_SERIAL_TX_PIN
       #define Y2_SERIAL_TX_PIN _EPIN(Y2_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Y2_SERIAL_RX_PIN
       #define Y2_SERIAL_RX_PIN _EPIN(Y2_E_INDEX, SERIAL_RX)
     #endif
   #endif
-  #if defined(Y2_STALL_SENSITIVITY) && ENABLED(Y_DUAL_ENDSTOPS) && _PEXI(Y2_E_INDEX, DIAG)
+  // Auto-assign pins for stallGuard sensorless homing
+  #if !defined(Y2_USE_ENDSTOP) && defined(Y2_STALL_SENSITIVITY) && ENABLED(Y_DUAL_ENDSTOPS) && _PEXI(Y2_E_INDEX, DIAG)
     #define Y2_DIAG_PIN _EPIN(Y2_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Y2, X_MIN)
       #define Y2_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Y2, Y_MIN)
       #define Y2_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Y2, Z_MIN)
       #define Y2_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Y2, X_MAX)
       #define Y2_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Y2, Y_MAX)
@@ -723,21 +643,22 @@
     #define Z2_CS_PIN     _EPIN(Z2_E_INDEX, CS)
   #endif
   #if AXIS_HAS_UART(Z2)
     #ifndef Z2_SERIAL_TX_PIN
       #define Z2_SERIAL_TX_PIN _EPIN(Z2_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z2_SERIAL_RX_PIN
       #define Z2_SERIAL_RX_PIN _EPIN(Z2_E_INDEX, SERIAL_RX)
     #endif
   #endif
-  #if defined(Z2_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 2 && _PEXI(Z2_E_INDEX, DIAG)
+  // Auto-assign pins for stallGuard sensorless homing
+  #if !defined(Z2_USE_ENDSTOP) && defined(Z2_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 2 && _PEXI(Z2_E_INDEX, DIAG)
     #define Z2_DIAG_PIN _EPIN(Z2_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Z2, X_MIN)
       #define Z2_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Z2, Y_MIN)
       #define Z2_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Z2, Z_MIN)
       #define Z2_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Z2, X_MAX)
       #define Z2_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Z2, Y_MAX)
@@ -792,21 +713,22 @@
     #define Z3_MS3_PIN    _EPIN(Z3_E_INDEX, MS3)
   #endif
   #if AXIS_HAS_UART(Z3)
     #ifndef Z3_SERIAL_TX_PIN
       #define Z3_SERIAL_TX_PIN _EPIN(Z3_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z3_SERIAL_RX_PIN
       #define Z3_SERIAL_RX_PIN _EPIN(Z3_E_INDEX, SERIAL_RX)
     #endif
   #endif
-  #if defined(Z3_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 3 && _PEXI(Z3_E_INDEX, DIAG)
+  // Auto-assign pins for stallGuard sensorless homing
+  #if !defined(Z3_USE_ENDSTOP) && defined(Z3_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 3 && _PEXI(Z3_E_INDEX, DIAG)
     #define Z3_DIAG_PIN _EPIN(Z3_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Z3, X_MIN)
       #define Z3_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Z3, Y_MIN)
       #define Z3_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Z3, Z_MIN)
       #define Z3_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Z3, X_MAX)
       #define Z3_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Z3, Y_MAX)
@@ -859,21 +781,22 @@
     #define Z4_MS3_PIN    _EPIN(Z4_E_INDEX, MS3)
   #endif
   #if AXIS_HAS_UART(Z4)
     #ifndef Z4_SERIAL_TX_PIN
       #define Z4_SERIAL_TX_PIN _EPIN(Z4_E_INDEX, SERIAL_TX)
     #endif
     #ifndef Z4_SERIAL_RX_PIN
       #define Z4_SERIAL_RX_PIN _EPIN(Z4_E_INDEX, SERIAL_RX)
     #endif
   #endif
-  #if defined(Z4_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 4 && _PEXI(Z4_E_INDEX, DIAG)
+  // Auto-assign pins for stallGuard sensorless homing
+  #if !defined(Z4_USE_ENDSTOP) && defined(Z4_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 4 && _PEXI(Z4_E_INDEX, DIAG)
     #define Z4_DIAG_PIN _EPIN(Z4_E_INDEX, DIAG)
     #if   DIAG_REMAPPED(Z4, X_MIN)
       #define Z4_USE_ENDSTOP _XMIN_
     #elif DIAG_REMAPPED(Z4, Y_MIN)
       #define Z4_USE_ENDSTOP _YMIN_
     #elif DIAG_REMAPPED(Z4, Z_MIN)
       #define Z4_USE_ENDSTOP _ZMIN_
     #elif DIAG_REMAPPED(Z4, X_MAX)
       #define Z4_USE_ENDSTOP _XMAX_
     #elif DIAG_REMAPPED(Z4, Y_MAX)
@@ -894,20 +817,105 @@
 #ifndef Z4_MS1_PIN
   #define Z4_MS1_PIN -1
 #endif
 #ifndef Z4_MS2_PIN
   #define Z4_MS2_PIN -1
 #endif
 #ifndef Z4_MS3_PIN
   #define Z4_MS3_PIN -1
 #endif
 
+//
+// Disable unused endstop / probe pins
+//
+#define _STOP_IN_USE(N) (X2_USE_ENDSTOP == N || Y2_USE_ENDSTOP == N || Z2_USE_ENDSTOP == N || Z3_USE_ENDSTOP == N || Z4_USE_ENDSTOP == N)
+#if _STOP_IN_USE(_XMAX_)
+  #define USE_XMAX_PLUG
+#endif
+#if _STOP_IN_USE(_YMAX_)
+  #define USE_YMAX_PLUG
+#endif
+#if _STOP_IN_USE(_ZMAX_)
+  #define USE_ZMAX_PLUG
+#endif
+#if _STOP_IN_USE(_XMIN_)
+  #define USE_XMIN_PLUG
+#endif
+#if _STOP_IN_USE(_YMIN_)
+  #define USE_YMIN_PLUG
+#endif
+#if _STOP_IN_USE(_ZMIN_)
+  #define USE_ZMIN_PLUG
+#endif
+#undef _STOP_IN_USE
+#if !HAS_CUSTOM_PROBE_PIN
+  #undef Z_MIN_PROBE_PIN
+  #define Z_MIN_PROBE_PIN    -1
+#endif
+#if DISABLED(USE_XMAX_PLUG)
+  #undef X_MAX_PIN
+  #define X_MAX_PIN          -1
+#endif
+#if DISABLED(USE_YMAX_PLUG)
+  #undef Y_MAX_PIN
+  #define Y_MAX_PIN          -1
+#endif
+#if DISABLED(USE_ZMAX_PLUG)
+  #undef Z_MAX_PIN
+  #define Z_MAX_PIN          -1
+#endif
+#if DISABLED(USE_XMIN_PLUG)
+  #undef X_MIN_PIN
+  #define X_MIN_PIN          -1
+#endif
+#if DISABLED(USE_YMIN_PLUG)
+  #undef Y_MIN_PIN
+  #define Y_MIN_PIN          -1
+#endif
+#if DISABLED(USE_ZMIN_PLUG)
+  #undef Z_MIN_PIN
+  #define Z_MIN_PIN          -1
+#endif
+#if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MAX
+  #undef X2_MIN_PIN
+#endif
+#if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MIN
+  #undef X2_MAX_PIN
+#endif
+#if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MAX
+  #undef Y2_MIN_PIN
+#endif
+#if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MIN
+  #undef Y2_MAX_PIN
+#endif
+#if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_TO_MAX
+  #undef Z2_MIN_PIN
+#endif
+#if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_TO_MIN
+  #undef Z2_MAX_PIN
+#endif
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_TO_MAX
+  #undef Z3_MIN_PIN
+#endif
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_TO_MIN
+  #undef Z3_MAX_PIN
+#endif
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MAX
+  #undef Z4_MIN_PIN
+#endif
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MIN
+  #undef Z4_MAX_PIN
+#endif
+
+//
+// Default DOGLCD SPI delays
+//
 #if HAS_MARLINUI_U8GLIB
   #if !defined(ST7920_DELAY_1) && defined(BOARD_ST7920_DELAY_1)
     #define ST7920_DELAY_1 BOARD_ST7920_DELAY_1
   #endif
   #if !defined(ST7920_DELAY_2) && defined(BOARD_ST7920_DELAY_2)
     #define ST7920_DELAY_2 BOARD_ST7920_DELAY_2
   #endif
   #if !defined(ST7920_DELAY_3) && defined(BOARD_ST7920_DELAY_3)
     #define ST7920_DELAY_3 BOARD_ST7920_DELAY_3
   #endif

commit 49771c4a9ed2afa1e572f82a24b5edb3de120f78
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed May 19 00:21:34 2021 -0500

    🎨 Flags for homing directions

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index d71b79ca95..37ebbd47ad 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -378,68 +378,68 @@
 #endif
 
 #ifndef NUM_SERVO_PLUGS
   #define NUM_SERVO_PLUGS 4
 #endif
 
 //
 // Assign endstop pins for boards with only 3 connectors
 //
 #ifdef X_STOP_PIN
-  #if X_HOME_DIR < 0
+  #if X_HOME_TO_MIN
     #define X_MIN_PIN X_STOP_PIN
     #ifndef X_MAX_PIN
       #define X_MAX_PIN -1
     #endif
   #else
     #define X_MAX_PIN X_STOP_PIN
     #ifndef X_MIN_PIN
       #define X_MIN_PIN -1
     #endif
   #endif
-#elif X_HOME_DIR < 0
+#elif X_HOME_TO_MIN
   #define X_STOP_PIN X_MIN_PIN
 #else
   #define X_STOP_PIN X_MAX_PIN
 #endif
 
 #ifdef Y_STOP_PIN
-  #if Y_HOME_DIR < 0
+  #if Y_HOME_TO_MIN
     #define Y_MIN_PIN Y_STOP_PIN
     #ifndef Y_MAX_PIN
       #define Y_MAX_PIN -1
     #endif
   #else
     #define Y_MAX_PIN Y_STOP_PIN
     #ifndef Y_MIN_PIN
       #define Y_MIN_PIN -1
     #endif
   #endif
-#elif Y_HOME_DIR < 0
+#elif Y_HOME_TO_MIN
   #define Y_STOP_PIN Y_MIN_PIN
 #else
   #define Y_STOP_PIN Y_MAX_PIN
 #endif
 
 #ifdef Z_STOP_PIN
-  #if Z_HOME_DIR < 0
+  #if Z_HOME_TO_MIN
     #define Z_MIN_PIN Z_STOP_PIN
     #ifndef Z_MAX_PIN
       #define Z_MAX_PIN -1
     #endif
   #else
     #define Z_MAX_PIN Z_STOP_PIN
     #ifndef Z_MIN_PIN
       #define Z_MIN_PIN -1
     #endif
   #endif
-#elif Z_HOME_DIR < 0
+#elif Z_HOME_TO_MIN
   #define Z_STOP_PIN Z_MIN_PIN
 #else
   #define Z_STOP_PIN Z_MAX_PIN
 #endif
 
 //
 // Disable unused endstop / probe pins
 //
 #define _STOP_IN_USE(N) (X2_USE_ENDSTOP == N || Y2_USE_ENDSTOP == N || Z2_USE_ENDSTOP == N || Z3_USE_ENDSTOP == N || Z4_USE_ENDSTOP == N)
 #if _STOP_IN_USE(_XMAX_)
@@ -482,48 +482,48 @@
   #define X_MIN_PIN          -1
 #endif
 #if DISABLED(USE_YMIN_PLUG)
   #undef Y_MIN_PIN
   #define Y_MIN_PIN          -1
 #endif
 #if DISABLED(USE_ZMIN_PLUG)
   #undef Z_MIN_PIN
   #define Z_MIN_PIN          -1
 #endif
-#if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_DIR > 0
+#if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MAX
   #undef X2_MIN_PIN
 #endif
-#if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_DIR < 0
+#if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_TO_MIN
   #undef X2_MAX_PIN
 #endif
-#if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_DIR > 0
+#if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MAX
   #undef Y2_MIN_PIN
 #endif
-#if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_DIR < 0
+#if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_TO_MIN
   #undef Y2_MAX_PIN
 #endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_DIR > 0
+#if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_TO_MAX
   #undef Z2_MIN_PIN
 #endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_DIR < 0
+#if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_TO_MIN
   #undef Z2_MAX_PIN
 #endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_DIR > 0
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_TO_MAX
   #undef Z3_MIN_PIN
 #endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_DIR < 0
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_TO_MIN
   #undef Z3_MAX_PIN
 #endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_DIR > 0
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MAX
   #undef Z4_MIN_PIN
 #endif
-#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_DIR < 0
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_TO_MIN
   #undef Z4_MAX_PIN
 #endif
 
 #if HAS_FILAMENT_SENSOR
   #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN
 #else
   #undef FIL_RUNOUT_PIN
   #undef FIL_RUNOUT1_PIN
 #endif
 

commit fb87b2d1adf667f63dde7d8d19058d5d75bc6aa2
Author: ellensp <ellensp@hotmail.com>
Date:   Thu May 6 18:54:02 2021 +1200

    Simplify / undef extra endstops (#21808)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index d37dd4352a..d71b79ca95 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -434,54 +434,98 @@
   #endif
 #elif Z_HOME_DIR < 0
   #define Z_STOP_PIN Z_MIN_PIN
 #else
   #define Z_STOP_PIN Z_MAX_PIN
 #endif
 
 //
 // Disable unused endstop / probe pins
 //
+#define _STOP_IN_USE(N) (X2_USE_ENDSTOP == N || Y2_USE_ENDSTOP == N || Z2_USE_ENDSTOP == N || Z3_USE_ENDSTOP == N || Z4_USE_ENDSTOP == N)
+#if _STOP_IN_USE(_XMAX_)
+  #define USE_XMAX_PLUG
+#endif
+#if _STOP_IN_USE(_YMAX_)
+  #define USE_YMAX_PLUG
+#endif
+#if _STOP_IN_USE(_ZMAX_)
+  #define USE_ZMAX_PLUG
+#endif
+#if _STOP_IN_USE(_XMIN_)
+  #define USE_XMIN_PLUG
+#endif
+#if _STOP_IN_USE(_YMIN_)
+  #define USE_YMIN_PLUG
+#endif
+#if _STOP_IN_USE(_ZMIN_)
+  #define USE_ZMIN_PLUG
+#endif
+#undef _STOP_IN_USE
 #if !HAS_CUSTOM_PROBE_PIN
   #undef Z_MIN_PROBE_PIN
   #define Z_MIN_PROBE_PIN    -1
 #endif
-
 #if DISABLED(USE_XMAX_PLUG)
   #undef X_MAX_PIN
   #define X_MAX_PIN          -1
 #endif
-
 #if DISABLED(USE_YMAX_PLUG)
   #undef Y_MAX_PIN
   #define Y_MAX_PIN          -1
 #endif
-
 #if DISABLED(USE_ZMAX_PLUG)
   #undef Z_MAX_PIN
   #define Z_MAX_PIN          -1
 #endif
-
 #if DISABLED(USE_XMIN_PLUG)
   #undef X_MIN_PIN
   #define X_MIN_PIN          -1
 #endif
-
 #if DISABLED(USE_YMIN_PLUG)
   #undef Y_MIN_PIN
   #define Y_MIN_PIN          -1
 #endif
-
 #if DISABLED(USE_ZMIN_PLUG)
   #undef Z_MIN_PIN
   #define Z_MIN_PIN          -1
 #endif
+#if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_DIR > 0
+  #undef X2_MIN_PIN
+#endif
+#if DISABLED(X_DUAL_ENDSTOPS) || X_HOME_DIR < 0
+  #undef X2_MAX_PIN
+#endif
+#if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_DIR > 0
+  #undef Y2_MIN_PIN
+#endif
+#if DISABLED(Y_DUAL_ENDSTOPS) || Y_HOME_DIR < 0
+  #undef Y2_MAX_PIN
+#endif
+#if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_DIR > 0
+  #undef Z2_MIN_PIN
+#endif
+#if DISABLED(Z_MULTI_ENDSTOPS) || Z_HOME_DIR < 0
+  #undef Z2_MAX_PIN
+#endif
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_DIR > 0
+  #undef Z3_MIN_PIN
+#endif
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 3 || Z_HOME_DIR < 0
+  #undef Z3_MAX_PIN
+#endif
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_DIR > 0
+  #undef Z4_MIN_PIN
+#endif
+#if DISABLED(Z_MULTI_ENDSTOPS) || NUM_Z_STEPPER_DRIVERS < 4 || Z_HOME_DIR < 0
+  #undef Z4_MAX_PIN
+#endif
 
 #if HAS_FILAMENT_SENSOR
   #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN
 #else
   #undef FIL_RUNOUT_PIN
   #undef FIL_RUNOUT1_PIN
 #endif
 
 #ifndef LCD_PINS_D4
   #define LCD_PINS_D4 -1

commit e0aa9ce372710d2bd1147ab0779072e6a02b61c9
Author: LinFor <linfor@gmail.com>
Date:   Sun Feb 28 01:06:48 2021 +0300

    RGB Caselight (#20341)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index de70248d4d..d37dd4352a 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -869,12 +869,16 @@
   #endif
 #else
   #undef ST7920_DELAY_1
   #undef ST7920_DELAY_2
   #undef ST7920_DELAY_3
   #undef BOARD_ST7920_DELAY_1
   #undef BOARD_ST7920_DELAY_2
   #undef BOARD_ST7920_DELAY_3
 #endif
 
+#if !NEED_CASE_LIGHT_PIN
+  #undef CASE_LIGHT_PIN
+#endif
+
 #undef HAS_FREE_AUX2_PINS
 #undef DIAG_REMAPPED

commit 41529b65988a58ba512977e0fe1692aaeeb6c811
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Wed Nov 18 08:27:21 2020 +0100

    SMUFF (MMU2 clone) support (#19912)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index 788f2093c1..de70248d4d 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -514,21 +514,21 @@
 #define DIAG_REMAPPED(p,q) (PIN_EXISTS(q) && _EPIN(p##_E_INDEX, DIAG) == q##_PIN)
 
 // The X2 axis, if any, should be the next open extruder port
 #define X2_E_INDEX E_STEPPERS
 
 #if EITHER(DUAL_X_CARRIAGE, X_DUAL_STEPPER_DRIVERS)
   #ifndef X2_STEP_PIN
     #define X2_STEP_PIN   _EPIN(X2_E_INDEX, STEP)
     #define X2_DIR_PIN    _EPIN(X2_E_INDEX, DIR)
     #define X2_ENABLE_PIN _EPIN(X2_E_INDEX, ENABLE)
-    #if X2_E_INDEX >= MAX_EXTRUDERS || !PIN_EXISTS(X2_STEP)
+    #if X2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(X2_STEP)
       #error "No E stepper plug left for X2!"
     #endif
   #endif
   #ifndef X2_MS1_PIN
     #define X2_MS1_PIN    _EPIN(X2_E_INDEX, MS1)
   #endif
   #ifndef X2_MS2_PIN
     #define X2_MS2_PIN    _EPIN(X2_E_INDEX, MS2)
   #endif
   #ifndef X2_MS3_PIN
@@ -587,21 +587,21 @@
 #ifndef X2_MS3_PIN
   #define X2_MS3_PIN -1
 #endif
 
 // The Y2 axis, if any, should be the next open extruder port
 #if ENABLED(Y_DUAL_STEPPER_DRIVERS)
   #ifndef Y2_STEP_PIN
     #define Y2_STEP_PIN   _EPIN(Y2_E_INDEX, STEP)
     #define Y2_DIR_PIN    _EPIN(Y2_E_INDEX, DIR)
     #define Y2_ENABLE_PIN _EPIN(Y2_E_INDEX, ENABLE)
-    #if Y2_E_INDEX >= MAX_EXTRUDERS || !PIN_EXISTS(Y2_STEP)
+    #if Y2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Y2_STEP)
       #error "No E stepper plug left for Y2!"
     #endif
   #endif
   #ifndef Y2_MS1_PIN
     #define Y2_MS1_PIN    _EPIN(Y2_E_INDEX, MS1)
   #endif
   #ifndef Y2_MS2_PIN
     #define Y2_MS2_PIN    _EPIN(Y2_E_INDEX, MS2)
   #endif
   #ifndef Y2_MS3_PIN
@@ -655,21 +655,21 @@
 #ifndef Y2_MS3_PIN
   #define Y2_MS3_PIN -1
 #endif
 
 // The Z2 axis, if any, should be the next open extruder port
 #if NUM_Z_STEPPER_DRIVERS >= 2
   #ifndef Z2_STEP_PIN
     #define Z2_STEP_PIN   _EPIN(Z2_E_INDEX, STEP)
     #define Z2_DIR_PIN    _EPIN(Z2_E_INDEX, DIR)
     #define Z2_ENABLE_PIN _EPIN(Z2_E_INDEX, ENABLE)
-    #if Z2_E_INDEX >= MAX_EXTRUDERS || !PIN_EXISTS(Z2_STEP)
+    #if Z2_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Z2_STEP)
       #error "No E stepper plug left for Z2!"
     #endif
   #endif
   #ifndef Z2_MS1_PIN
     #define Z2_MS1_PIN    _EPIN(Z2_E_INDEX, MS1)
   #endif
   #ifndef Z2_MS2_PIN
     #define Z2_MS2_PIN    _EPIN(Z2_E_INDEX, MS2)
   #endif
   #ifndef Z2_MS3_PIN
@@ -722,21 +722,21 @@
 #endif
 #ifndef Z2_MS3_PIN
   #define Z2_MS3_PIN -1
 #endif
 
 #if NUM_Z_STEPPER_DRIVERS >= 3
   #ifndef Z3_STEP_PIN
     #define Z3_STEP_PIN   _EPIN(Z3_E_INDEX, STEP)
     #define Z3_DIR_PIN    _EPIN(Z3_E_INDEX, DIR)
     #define Z3_ENABLE_PIN _EPIN(Z3_E_INDEX, ENABLE)
-    #if Z3_E_INDEX >= MAX_EXTRUDERS || !PIN_EXISTS(Z3_STEP)
+    #if Z3_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Z3_STEP)
       #error "No E stepper plug left for Z3!"
     #endif
   #endif
   #if AXIS_HAS_SPI(Z3)
     #ifndef Z3_CS_PIN
       #define Z3_CS_PIN   _EPIN(Z3_E_INDEX, CS)
     #endif
   #endif
   #ifndef Z3_MS1_PIN
     #define Z3_MS1_PIN    _EPIN(Z3_E_INDEX, MS1)
@@ -789,21 +789,21 @@
 #endif
 #ifndef Z3_MS3_PIN
   #define Z3_MS3_PIN -1
 #endif
 
 #if NUM_Z_STEPPER_DRIVERS >= 4
   #ifndef Z4_STEP_PIN
     #define Z4_STEP_PIN   _EPIN(Z4_E_INDEX, STEP)
     #define Z4_DIR_PIN    _EPIN(Z4_E_INDEX, DIR)
     #define Z4_ENABLE_PIN _EPIN(Z4_E_INDEX, ENABLE)
-    #if Z4_E_INDEX >= MAX_EXTRUDERS || !PIN_EXISTS(Z4_STEP)
+    #if Z4_E_INDEX >= MAX_E_STEPPERS || !PIN_EXISTS(Z4_STEP)
       #error "No E stepper plug left for Z4!"
     #endif
   #endif
   #if AXIS_HAS_SPI(Z4)
     #ifndef Z4_CS_PIN
       #define Z4_CS_PIN     _EPIN(Z4_E_INDEX, CS)
     #endif
   #endif
   #ifndef Z4_MS1_PIN
     #define Z4_MS1_PIN    _EPIN(Z4_E_INDEX, MS1)

commit 22bf2b49c64ad1e767a9fa9249c40e7ca33f032d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 1 04:40:59 2020 -0600

    Clean up SPI and ST7920 defines (#19956)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
index fdf9f095cb..788f2093c1 100644
--- a/Marlin/src/pins/pins_postprocess.h
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -864,14 +864,17 @@
   #if !defined(ST7920_DELAY_2) && defined(BOARD_ST7920_DELAY_2)
     #define ST7920_DELAY_2 BOARD_ST7920_DELAY_2
   #endif
   #if !defined(ST7920_DELAY_3) && defined(BOARD_ST7920_DELAY_3)
     #define ST7920_DELAY_3 BOARD_ST7920_DELAY_3
   #endif
 #else
   #undef ST7920_DELAY_1
   #undef ST7920_DELAY_2
   #undef ST7920_DELAY_3
+  #undef BOARD_ST7920_DELAY_1
+  #undef BOARD_ST7920_DELAY_2
+  #undef BOARD_ST7920_DELAY_3
 #endif
 
 #undef HAS_FREE_AUX2_PINS
 #undef DIAG_REMAPPED

commit 0967c87a8f3978d721625823d76fbc4dc32c069f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 23 14:52:59 2020 -0500

    Pins post-process header (#19860)

diff --git a/Marlin/src/pins/pins_postprocess.h b/Marlin/src/pins/pins_postprocess.h
new file mode 100644
index 0000000000..fdf9f095cb
--- /dev/null
+++ b/Marlin/src/pins/pins_postprocess.h
@@ -0,0 +1,877 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+//
+// File: pins/pins_postprocess.h
+// Post-process pins according to configured settings
+//
+
+// Define certain undefined pins
+#ifndef X_MS1_PIN
+  #define X_MS1_PIN -1
+#endif
+#ifndef X_MS2_PIN
+  #define X_MS2_PIN -1
+#endif
+#ifndef X_MS3_PIN
+  #define X_MS3_PIN -1
+#endif
+#ifndef Y_MS1_PIN
+  #define Y_MS1_PIN -1
+#endif
+#ifndef Y_MS2_PIN
+  #define Y_MS2_PIN -1
+#endif
+#ifndef Y_MS3_PIN
+  #define Y_MS3_PIN -1
+#endif
+#ifndef Z_MS1_PIN
+  #define Z_MS1_PIN -1
+#endif
+#ifndef Z_MS2_PIN
+  #define Z_MS2_PIN -1
+#endif
+#ifndef Z_MS3_PIN
+  #define Z_MS3_PIN -1
+#endif
+#ifndef E0_MS1_PIN
+  #define E0_MS1_PIN -1
+#endif
+#ifndef E0_MS2_PIN
+  #define E0_MS2_PIN -1
+#endif
+#ifndef E0_MS3_PIN
+  #define E0_MS3_PIN -1
+#endif
+#ifndef E1_MS1_PIN
+  #define E1_MS1_PIN -1
+#endif
+#ifndef E1_MS2_PIN
+  #define E1_MS2_PIN -1
+#endif
+#ifndef E1_MS3_PIN
+  #define E1_MS3_PIN -1
+#endif
+#ifndef E2_MS1_PIN
+  #define E2_MS1_PIN -1
+#endif
+#ifndef E2_MS2_PIN
+  #define E2_MS2_PIN -1
+#endif
+#ifndef E2_MS3_PIN
+  #define E2_MS3_PIN -1
+#endif
+#ifndef E3_MS1_PIN
+  #define E3_MS1_PIN -1
+#endif
+#ifndef E3_MS2_PIN
+  #define E3_MS2_PIN -1
+#endif
+#ifndef E3_MS3_PIN
+  #define E3_MS3_PIN -1
+#endif
+#ifndef E4_MS1_PIN
+  #define E4_MS1_PIN -1
+#endif
+#ifndef E4_MS2_PIN
+  #define E4_MS2_PIN -1
+#endif
+#ifndef E4_MS3_PIN
+  #define E4_MS3_PIN -1
+#endif
+#ifndef E5_MS1_PIN
+  #define E5_MS1_PIN -1
+#endif
+#ifndef E5_MS2_PIN
+  #define E5_MS2_PIN -1
+#endif
+#ifndef E5_MS3_PIN
+  #define E5_MS3_PIN -1
+#endif
+#ifndef E6_MS1_PIN
+  #define E6_MS1_PIN -1
+#endif
+#ifndef E6_MS2_PIN
+  #define E6_MS2_PIN -1
+#endif
+#ifndef E6_MS3_PIN
+  #define E6_MS3_PIN -1
+#endif
+#ifndef E7_MS1_PIN
+  #define E7_MS1_PIN -1
+#endif
+#ifndef E7_MS2_PIN
+  #define E7_MS2_PIN -1
+#endif
+#ifndef E7_MS3_PIN
+  #define E7_MS3_PIN -1
+#endif
+
+#ifndef E0_STEP_PIN
+  #define E0_STEP_PIN -1
+#endif
+#ifndef E0_DIR_PIN
+  #define E0_DIR_PIN -1
+#endif
+#ifndef E0_ENABLE_PIN
+  #define E0_ENABLE_PIN -1
+#endif
+#ifndef E1_STEP_PIN
+  #define E1_STEP_PIN -1
+#endif
+#ifndef E1_DIR_PIN
+  #define E1_DIR_PIN -1
+#endif
+#ifndef E1_ENABLE_PIN
+  #define E1_ENABLE_PIN -1
+#endif
+#ifndef E2_STEP_PIN
+  #define E2_STEP_PIN -1
+#endif
+#ifndef E2_DIR_PIN
+  #define E2_DIR_PIN -1
+#endif
+#ifndef E2_ENABLE_PIN
+  #define E2_ENABLE_PIN -1
+#endif
+#ifndef E3_STEP_PIN
+  #define E3_STEP_PIN -1
+#endif
+#ifndef E3_DIR_PIN
+  #define E3_DIR_PIN -1
+#endif
+#ifndef E3_ENABLE_PIN
+  #define E3_ENABLE_PIN -1
+#endif
+#ifndef E4_STEP_PIN
+  #define E4_STEP_PIN -1
+#endif
+#ifndef E4_DIR_PIN
+  #define E4_DIR_PIN -1
+#endif
+#ifndef E4_ENABLE_PIN
+  #define E4_ENABLE_PIN -1
+#endif
+#ifndef E5_STEP_PIN
+  #define E5_STEP_PIN -1
+#endif
+#ifndef E5_DIR_PIN
+  #define E5_DIR_PIN -1
+#endif
+#ifndef E5_ENABLE_PIN
+  #define E5_ENABLE_PIN -1
+#endif
+#ifndef E6_STEP_PIN
+  #define E6_STEP_PIN -1
+#endif
+#ifndef E6_DIR_PIN
+  #define E6_DIR_PIN -1
+#endif
+#ifndef E6_ENABLE_PIN
+  #define E6_ENABLE_PIN -1
+#endif
+#ifndef E7_STEP_PIN
+  #define E7_STEP_PIN -1
+#endif
+#ifndef E7_DIR_PIN
+  #define E7_DIR_PIN -1
+#endif
+#ifndef E7_ENABLE_PIN
+  #define E7_ENABLE_PIN -1
+#endif
+
+//
+// Destroy unused CS pins
+//
+#if !AXIS_HAS_SPI(X)
+  #undef X_CS_PIN
+#endif
+#if !AXIS_HAS_SPI(Y)
+  #undef Y_CS_PIN
+#endif
+#if !AXIS_HAS_SPI(Z)
+  #undef Z_CS_PIN
+#endif
+#if E_STEPPERS && !AXIS_HAS_SPI(E0)
+  #undef E0_CS_PIN
+#endif
+#if E_STEPPERS > 1 && !AXIS_HAS_SPI(E1)
+  #undef E1_CS_PIN
+#endif
+#if E_STEPPERS > 2 && !AXIS_HAS_SPI(E2)
+  #undef E2_CS_PIN
+#endif
+#if E_STEPPERS > 3 && !AXIS_HAS_SPI(E3)
+  #undef E3_CS_PIN
+#endif
+#if E_STEPPERS > 4 && !AXIS_HAS_SPI(E4)
+  #undef E4_CS_PIN
+#endif
+#if E_STEPPERS > 5 && !AXIS_HAS_SPI(E5)
+  #undef E5_CS_PIN
+#endif
+#if E_STEPPERS > 6 && !AXIS_HAS_SPI(E6)
+  #undef E6_CS_PIN
+#endif
+#if E_STEPPERS > 7 && !AXIS_HAS_SPI(E7)
+  #undef E7_CS_PIN
+#endif
+
+#ifndef X_CS_PIN
+  #define X_CS_PIN -1
+#endif
+#ifndef Y_CS_PIN
+  #define Y_CS_PIN -1
+#endif
+#ifndef Z_CS_PIN
+  #define Z_CS_PIN -1
+#endif
+#ifndef E0_CS_PIN
+  #define E0_CS_PIN -1
+#endif
+#ifndef E1_CS_PIN
+  #define E1_CS_PIN -1
+#endif
+#ifndef E2_CS_PIN
+  #define E2_CS_PIN -1
+#endif
+#ifndef E3_CS_PIN
+  #define E3_CS_PIN -1
+#endif
+#ifndef E4_CS_PIN
+  #define E4_CS_PIN -1
+#endif
+#ifndef E5_CS_PIN
+  #define E5_CS_PIN -1
+#endif
+#ifndef E6_CS_PIN
+  #define E6_CS_PIN -1
+#endif
+#ifndef E7_CS_PIN
+  #define E7_CS_PIN -1
+#endif
+
+#ifndef FAN_PIN
+  #define FAN_PIN -1
+#endif
+#define FAN0_PIN FAN_PIN
+#ifndef FAN1_PIN
+  #define FAN1_PIN -1
+#endif
+#ifndef FAN2_PIN
+  #define FAN2_PIN -1
+#endif
+#ifndef CONTROLLER_FAN_PIN
+  #define CONTROLLER_FAN_PIN  -1
+#endif
+
+#ifndef FANMUX0_PIN
+  #define FANMUX0_PIN -1
+#endif
+#ifndef FANMUX1_PIN
+  #define FANMUX1_PIN -1
+#endif
+#ifndef FANMUX2_PIN
+  #define FANMUX2_PIN -1
+#endif
+
+#ifndef HEATER_0_PIN
+  #define HEATER_0_PIN -1
+#endif
+#ifndef HEATER_1_PIN
+  #define HEATER_1_PIN -1
+#endif
+#ifndef HEATER_2_PIN
+  #define HEATER_2_PIN -1
+#endif
+#ifndef HEATER_3_PIN
+  #define HEATER_3_PIN -1
+#endif
+#ifndef HEATER_4_PIN
+  #define HEATER_4_PIN -1
+#endif
+#ifndef HEATER_5_PIN
+  #define HEATER_5_PIN -1
+#endif
+#ifndef HEATER_6_PIN
+  #define HEATER_6_PIN -1
+#endif
+#ifndef HEATER_7_PIN
+  #define HEATER_7_PIN -1
+#endif
+#ifndef HEATER_BED_PIN
+  #define HEATER_BED_PIN -1
+#endif
+
+#ifndef TEMP_0_PIN
+  #define TEMP_0_PIN -1
+#endif
+#ifndef TEMP_1_PIN
+  #define TEMP_1_PIN -1
+#endif
+#ifndef TEMP_2_PIN
+  #define TEMP_2_PIN -1
+#endif
+#ifndef TEMP_3_PIN
+  #define TEMP_3_PIN -1
+#endif
+#ifndef TEMP_4_PIN
+  #define TEMP_4_PIN -1
+#endif
+#ifndef TEMP_5_PIN
+  #define TEMP_5_PIN -1
+#endif
+#ifndef TEMP_6_PIN
+  #define TEMP_6_PIN -1
+#endif
+#ifndef TEMP_7_PIN
+  #define TEMP_7_PIN -1
+#endif
+#ifndef TEMP_BED_PIN
+  #define TEMP_BED_PIN -1
+#endif
+
+#ifndef SD_DETECT_PIN
+  #define SD_DETECT_PIN -1
+#endif
+#ifndef SDPOWER_PIN
+  #define SDPOWER_PIN -1
+#endif
+#ifndef SDSS
+  #define SDSS -1
+#endif
+#ifndef LED_PIN
+  #define LED_PIN -1
+#endif
+#if DISABLED(PSU_CONTROL) || !defined(PS_ON_PIN)
+  #undef PS_ON_PIN
+  #define PS_ON_PIN -1
+#endif
+#ifndef KILL_PIN
+  #define KILL_PIN -1
+#endif
+#ifndef SUICIDE_PIN
+  #define SUICIDE_PIN -1
+#endif
+#ifndef SUICIDE_PIN_INVERTING
+  #define SUICIDE_PIN_INVERTING false
+#endif
+
+#ifndef NUM_SERVO_PLUGS
+  #define NUM_SERVO_PLUGS 4
+#endif
+
+//
+// Assign endstop pins for boards with only 3 connectors
+//
+#ifdef X_STOP_PIN
+  #if X_HOME_DIR < 0
+    #define X_MIN_PIN X_STOP_PIN
+    #ifndef X_MAX_PIN
+      #define X_MAX_PIN -1
+    #endif
+  #else
+    #define X_MAX_PIN X_STOP_PIN
+    #ifndef X_MIN_PIN
+      #define X_MIN_PIN -1
+    #endif
+  #endif
+#elif X_HOME_DIR < 0
+  #define X_STOP_PIN X_MIN_PIN
+#else
+  #define X_STOP_PIN X_MAX_PIN
+#endif
+
+#ifdef Y_STOP_PIN
+  #if Y_HOME_DIR < 0
+    #define Y_MIN_PIN Y_STOP_PIN
+    #ifndef Y_MAX_PIN
+      #define Y_MAX_PIN -1
+    #endif
+  #else
+    #define Y_MAX_PIN Y_STOP_PIN
+    #ifndef Y_MIN_PIN
+      #define Y_MIN_PIN -1
+    #endif
+  #endif
+#elif Y_HOME_DIR < 0
+  #define Y_STOP_PIN Y_MIN_PIN
+#else
+  #define Y_STOP_PIN Y_MAX_PIN
+#endif
+
+#ifdef Z_STOP_PIN
+  #if Z_HOME_DIR < 0
+    #define Z_MIN_PIN Z_STOP_PIN
+    #ifndef Z_MAX_PIN
+      #define Z_MAX_PIN -1
+    #endif
+  #else
+    #define Z_MAX_PIN Z_STOP_PIN
+    #ifndef Z_MIN_PIN
+      #define Z_MIN_PIN -1
+    #endif
+  #endif
+#elif Z_HOME_DIR < 0
+  #define Z_STOP_PIN Z_MIN_PIN
+#else
+  #define Z_STOP_PIN Z_MAX_PIN
+#endif
+
+//
+// Disable unused endstop / probe pins
+//
+#if !HAS_CUSTOM_PROBE_PIN
+  #undef Z_MIN_PROBE_PIN
+  #define Z_MIN_PROBE_PIN    -1
+#endif
+
+#if DISABLED(USE_XMAX_PLUG)
+  #undef X_MAX_PIN
+  #define X_MAX_PIN          -1
+#endif
+
+#if DISABLED(USE_YMAX_PLUG)
+  #undef Y_MAX_PIN
+  #define Y_MAX_PIN          -1
+#endif
+
+#if DISABLED(USE_ZMAX_PLUG)
+  #undef Z_MAX_PIN
+  #define Z_MAX_PIN          -1
+#endif
+
+#if DISABLED(USE_XMIN_PLUG)
+  #undef X_MIN_PIN
+  #define X_MIN_PIN          -1
+#endif
+
+#if DISABLED(USE_YMIN_PLUG)
+  #undef Y_MIN_PIN
+  #define Y_MIN_PIN          -1
+#endif
+
+#if DISABLED(USE_ZMIN_PLUG)
+  #undef Z_MIN_PIN
+  #define Z_MIN_PIN          -1
+#endif
+
+#if HAS_FILAMENT_SENSOR
+  #define FIL_RUNOUT1_PIN FIL_RUNOUT_PIN
+#else
+  #undef FIL_RUNOUT_PIN
+  #undef FIL_RUNOUT1_PIN
+#endif
+
+#ifndef LCD_PINS_D4
+  #define LCD_PINS_D4 -1
+#endif
+
+#if HAS_MARLINUI_HD44780 || TOUCH_UI_ULTIPANEL
+  #ifndef LCD_PINS_D5
+    #define LCD_PINS_D5 -1
+  #endif
+  #ifndef LCD_PINS_D6
+    #define LCD_PINS_D6 -1
+  #endif
+  #ifndef LCD_PINS_D7
+    #define LCD_PINS_D7 -1
+  #endif
+#endif
+
+/**
+ * Auto-Assignment for Dual X, Dual Y, Multi-Z Steppers
+ *
+ * By default X2 is assigned to the next open E plug
+ * on the board, then in order, Y2, Z2, Z3. These can be
+ * overridden in Configuration.h or Configuration_adv.h.
+ */
+
+#define __PEXI(p,q) PIN_EXISTS(E##p##_##q)
+#define _PEXI(p,q) __PEXI(p,q)
+#define __EPIN(p,q) E##p##_##q##_PIN
+#define _EPIN(p,q) __EPIN(p,q)
+#define DIAG_REMAPPED(p,q) (PIN_EXISTS(q) && _EPIN(p##_E_INDEX, DIAG) == q##_PIN)
+
+// The X2 axis, if any, should be the next open extruder port
+#define X2_E_INDEX E_STEPPERS
+
+#if EITHER(DUAL_X_CARRIAGE, X_DUAL_STEPPER_DRIVERS)
+  #ifndef X2_STEP_PIN
+    #define X2_STEP_PIN   _EPIN(X2_E_INDEX, STEP)
+    #define X2_DIR_PIN    _EPIN(X2_E_INDEX, DIR)
+    #define X2_ENABLE_PIN _EPIN(X2_E_INDEX, ENABLE)
+    #if X2_E_INDEX >= MAX_EXTRUDERS || !PIN_EXISTS(X2_STEP)
+      #error "No E stepper plug left for X2!"
+    #endif
+  #endif
+  #ifndef X2_MS1_PIN
+    #define X2_MS1_PIN    _EPIN(X2_E_INDEX, MS1)
+  #endif
+  #ifndef X2_MS2_PIN
+    #define X2_MS2_PIN    _EPIN(X2_E_INDEX, MS2)
+  #endif
+  #ifndef X2_MS3_PIN
+    #define X2_MS3_PIN    _EPIN(X2_E_INDEX, MS3)
+  #endif
+  #if AXIS_HAS_SPI(X2) && !defined(X2_CS_PIN)
+    #define X2_CS_PIN     _EPIN(X2_E_INDEX, CS)
+  #endif
+  #if AXIS_HAS_UART(X2)
+    #ifndef X2_SERIAL_TX_PIN
+      #define X2_SERIAL_TX_PIN _EPIN(X2_E_INDEX, SERIAL_TX)
+    #endif
+    #ifndef X2_SERIAL_RX_PIN
+      #define X2_SERIAL_RX_PIN _EPIN(X2_E_INDEX, SERIAL_RX)
+    #endif
+  #endif
+
+  //
+  // Auto-assign pins for stallGuard sensorless homing
+  //
+  #if defined(X2_STALL_SENSITIVITY) && ENABLED(X_DUAL_ENDSTOPS) && _PEXI(X2_E_INDEX, DIAG)
+    #define X2_DIAG_PIN _EPIN(X2_E_INDEX, DIAG)
+    #if   DIAG_REMAPPED(X2, X_MIN)      // If already remapped in the pins file...
+      #define X2_USE_ENDSTOP _XMIN_
+    #elif DIAG_REMAPPED(X2, Y_MIN)
+      #define X2_USE_ENDSTOP _YMIN_
+    #elif DIAG_REMAPPED(X2, Z_MIN)
+      #define X2_USE_ENDSTOP _ZMIN_
+    #elif DIAG_REMAPPED(X2, X_MAX)
+      #define X2_USE_ENDSTOP _XMAX_
+    #elif DIAG_REMAPPED(X2, Y_MAX)
+      #define X2_USE_ENDSTOP _YMAX_
+    #elif DIAG_REMAPPED(X2, Z_MAX)
+      #define X2_USE_ENDSTOP _ZMAX_
+    #else                               // Otherwise use the driver DIAG_PIN directly
+      #define _X2_USE_ENDSTOP(P) _E##P##_DIAG_
+      #define X2_USE_ENDSTOP _X2_USE_ENDSTOP(X2_E_INDEX)
+    #endif
+    #undef X2_DIAG_PIN
+  #endif
+
+  #define Y2_E_INDEX INCREMENT(X2_E_INDEX)
+#else
+  #define Y2_E_INDEX X2_E_INDEX
+#endif
+
+#ifndef X2_CS_PIN
+  #define X2_CS_PIN  -1
+#endif
+#ifndef X2_MS1_PIN
+  #define X2_MS1_PIN -1
+#endif
+#ifndef X2_MS2_PIN
+  #define X2_MS2_PIN -1
+#endif
+#ifndef X2_MS3_PIN
+  #define X2_MS3_PIN -1
+#endif
+
+// The Y2 axis, if any, should be the next open extruder port
+#if ENABLED(Y_DUAL_STEPPER_DRIVERS)
+  #ifndef Y2_STEP_PIN
+    #define Y2_STEP_PIN   _EPIN(Y2_E_INDEX, STEP)
+    #define Y2_DIR_PIN    _EPIN(Y2_E_INDEX, DIR)
+    #define Y2_ENABLE_PIN _EPIN(Y2_E_INDEX, ENABLE)
+    #if Y2_E_INDEX >= MAX_EXTRUDERS || !PIN_EXISTS(Y2_STEP)
+      #error "No E stepper plug left for Y2!"
+    #endif
+  #endif
+  #ifndef Y2_MS1_PIN
+    #define Y2_MS1_PIN    _EPIN(Y2_E_INDEX, MS1)
+  #endif
+  #ifndef Y2_MS2_PIN
+    #define Y2_MS2_PIN    _EPIN(Y2_E_INDEX, MS2)
+  #endif
+  #ifndef Y2_MS3_PIN
+    #define Y2_MS3_PIN    _EPIN(Y2_E_INDEX, MS3)
+  #endif
+  #if AXIS_HAS_SPI(Y2) && !defined(Y2_CS_PIN)
+    #define Y2_CS_PIN     _EPIN(Y2_E_INDEX, CS)
+  #endif
+  #if AXIS_HAS_UART(Y2)
+    #ifndef Y2_SERIAL_TX_PIN
+      #define Y2_SERIAL_TX_PIN _EPIN(Y2_E_INDEX, SERIAL_TX)
+    #endif
+    #ifndef Y2_SERIAL_RX_PIN
+      #define Y2_SERIAL_RX_PIN _EPIN(Y2_E_INDEX, SERIAL_RX)
+    #endif
+  #endif
+  #if defined(Y2_STALL_SENSITIVITY) && ENABLED(Y_DUAL_ENDSTOPS) && _PEXI(Y2_E_INDEX, DIAG)
+    #define Y2_DIAG_PIN _EPIN(Y2_E_INDEX, DIAG)
+    #if   DIAG_REMAPPED(Y2, X_MIN)
+      #define Y2_USE_ENDSTOP _XMIN_
+    #elif DIAG_REMAPPED(Y2, Y_MIN)
+      #define Y2_USE_ENDSTOP _YMIN_
+    #elif DIAG_REMAPPED(Y2, Z_MIN)
+      #define Y2_USE_ENDSTOP _ZMIN_
+    #elif DIAG_REMAPPED(Y2, X_MAX)
+      #define Y2_USE_ENDSTOP _XMAX_
+    #elif DIAG_REMAPPED(Y2, Y_MAX)
+      #define Y2_USE_ENDSTOP _YMAX_
+    #elif DIAG_REMAPPED(Y2, Z_MAX)
+      #define Y2_USE_ENDSTOP _ZMAX_
+    #else
+      #define _Y2_USE_ENDSTOP(P) _E##P##_DIAG_
+      #define Y2_USE_ENDSTOP _Y2_USE_ENDSTOP(Y2_E_INDEX)
+    #endif
+    #undef Y2_DIAG_PIN
+  #endif
+  #define Z2_E_INDEX INCREMENT(Y2_E_INDEX)
+#else
+  #define Z2_E_INDEX Y2_E_INDEX
+#endif
+
+#ifndef Y2_CS_PIN
+  #define Y2_CS_PIN  -1
+#endif
+#ifndef Y2_MS1_PIN
+  #define Y2_MS1_PIN -1
+#endif
+#ifndef Y2_MS2_PIN
+  #define Y2_MS2_PIN -1
+#endif
+#ifndef Y2_MS3_PIN
+  #define Y2_MS3_PIN -1
+#endif
+
+// The Z2 axis, if any, should be the next open extruder port
+#if NUM_Z_STEPPER_DRIVERS >= 2
+  #ifndef Z2_STEP_PIN
+    #define Z2_STEP_PIN   _EPIN(Z2_E_INDEX, STEP)
+    #define Z2_DIR_PIN    _EPIN(Z2_E_INDEX, DIR)
+    #define Z2_ENABLE_PIN _EPIN(Z2_E_INDEX, ENABLE)
+    #if Z2_E_INDEX >= MAX_EXTRUDERS || !PIN_EXISTS(Z2_STEP)
+      #error "No E stepper plug left for Z2!"
+    #endif
+  #endif
+  #ifndef Z2_MS1_PIN
+    #define Z2_MS1_PIN    _EPIN(Z2_E_INDEX, MS1)
+  #endif
+  #ifndef Z2_MS2_PIN
+    #define Z2_MS2_PIN    _EPIN(Z2_E_INDEX, MS2)
+  #endif
+  #ifndef Z2_MS3_PIN
+    #define Z2_MS3_PIN    _EPIN(Z2_E_INDEX, MS3)
+  #endif
+  #if AXIS_HAS_SPI(Z2) && !defined(Z2_CS_PIN)
+    #define Z2_CS_PIN     _EPIN(Z2_E_INDEX, CS)
+  #endif
+  #if AXIS_HAS_UART(Z2)
+    #ifndef Z2_SERIAL_TX_PIN
+      #define Z2_SERIAL_TX_PIN _EPIN(Z2_E_INDEX, SERIAL_TX)
+    #endif
+    #ifndef Z2_SERIAL_RX_PIN
+      #define Z2_SERIAL_RX_PIN _EPIN(Z2_E_INDEX, SERIAL_RX)
+    #endif
+  #endif
+  #if defined(Z2_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 2 && _PEXI(Z2_E_INDEX, DIAG)
+    #define Z2_DIAG_PIN _EPIN(Z2_E_INDEX, DIAG)
+    #if   DIAG_REMAPPED(Z2, X_MIN)
+      #define Z2_USE_ENDSTOP _XMIN_
+    #elif DIAG_REMAPPED(Z2, Y_MIN)
+      #define Z2_USE_ENDSTOP _YMIN_
+    #elif DIAG_REMAPPED(Z2, Z_MIN)
+      #define Z2_USE_ENDSTOP _ZMIN_
+    #elif DIAG_REMAPPED(Z2, X_MAX)
+      #define Z2_USE_ENDSTOP _XMAX_
+    #elif DIAG_REMAPPED(Z2, Y_MAX)
+      #define Z2_USE_ENDSTOP _YMAX_
+    #elif DIAG_REMAPPED(Z2, Z_MAX)
+      #define Z2_USE_ENDSTOP _ZMAX_
+    #else
+      #define _Z2_USE_ENDSTOP(P) _E##P##_DIAG_
+      #define Z2_USE_ENDSTOP _Z2_USE_ENDSTOP(Z2_E_INDEX)
+    #endif
+    #undef Z2_DIAG_PIN
+  #endif
+  #define Z3_E_INDEX INCREMENT(Z2_E_INDEX)
+#else
+  #define Z3_E_INDEX Z2_E_INDEX
+#endif
+
+#ifndef Z2_CS_PIN
+  #define Z2_CS_PIN  -1
+#endif
+#ifndef Z2_MS1_PIN
+  #define Z2_MS1_PIN -1
+#endif
+#ifndef Z2_MS2_PIN
+  #define Z2_MS2_PIN -1
+#endif
+#ifndef Z2_MS3_PIN
+  #define Z2_MS3_PIN -1
+#endif
+
+#if NUM_Z_STEPPER_DRIVERS >= 3
+  #ifndef Z3_STEP_PIN
+    #define Z3_STEP_PIN   _EPIN(Z3_E_INDEX, STEP)
+    #define Z3_DIR_PIN    _EPIN(Z3_E_INDEX, DIR)
+    #define Z3_ENABLE_PIN _EPIN(Z3_E_INDEX, ENABLE)
+    #if Z3_E_INDEX >= MAX_EXTRUDERS || !PIN_EXISTS(Z3_STEP)
+      #error "No E stepper plug left for Z3!"
+    #endif
+  #endif
+  #if AXIS_HAS_SPI(Z3)
+    #ifndef Z3_CS_PIN
+      #define Z3_CS_PIN   _EPIN(Z3_E_INDEX, CS)
+    #endif
+  #endif
+  #ifndef Z3_MS1_PIN
+    #define Z3_MS1_PIN    _EPIN(Z3_E_INDEX, MS1)
+  #endif
+  #ifndef Z3_MS2_PIN
+    #define Z3_MS2_PIN    _EPIN(Z3_E_INDEX, MS2)
+  #endif
+  #ifndef Z3_MS3_PIN
+    #define Z3_MS3_PIN    _EPIN(Z3_E_INDEX, MS3)
+  #endif
+  #if AXIS_HAS_UART(Z3)
+    #ifndef Z3_SERIAL_TX_PIN
+      #define Z3_SERIAL_TX_PIN _EPIN(Z3_E_INDEX, SERIAL_TX)
+    #endif
+    #ifndef Z3_SERIAL_RX_PIN
+      #define Z3_SERIAL_RX_PIN _EPIN(Z3_E_INDEX, SERIAL_RX)
+    #endif
+  #endif
+  #if defined(Z3_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 3 && _PEXI(Z3_E_INDEX, DIAG)
+    #define Z3_DIAG_PIN _EPIN(Z3_E_INDEX, DIAG)
+    #if   DIAG_REMAPPED(Z3, X_MIN)
+      #define Z3_USE_ENDSTOP _XMIN_
+    #elif DIAG_REMAPPED(Z3, Y_MIN)
+      #define Z3_USE_ENDSTOP _YMIN_
+    #elif DIAG_REMAPPED(Z3, Z_MIN)
+      #define Z3_USE_ENDSTOP _ZMIN_
+    #elif DIAG_REMAPPED(Z3, X_MAX)
+      #define Z3_USE_ENDSTOP _XMAX_
+    #elif DIAG_REMAPPED(Z3, Y_MAX)
+      #define Z3_USE_ENDSTOP _YMAX_
+    #elif DIAG_REMAPPED(Z3, Z_MAX)
+      #define Z3_USE_ENDSTOP _ZMAX_
+    #else
+      #define _Z3_USE_ENDSTOP(P) _E##P##_DIAG_
+      #define Z3_USE_ENDSTOP _Z3_USE_ENDSTOP(Z3_E_INDEX)
+    #endif
+    #undef Z3_DIAG_PIN
+  #endif
+  #define Z4_E_INDEX INCREMENT(Z3_E_INDEX)
+#endif
+
+#ifndef Z3_CS_PIN
+  #define Z3_CS_PIN  -1
+#endif
+#ifndef Z3_MS1_PIN
+  #define Z3_MS1_PIN -1
+#endif
+#ifndef Z3_MS2_PIN
+  #define Z3_MS2_PIN -1
+#endif
+#ifndef Z3_MS3_PIN
+  #define Z3_MS3_PIN -1
+#endif
+
+#if NUM_Z_STEPPER_DRIVERS >= 4
+  #ifndef Z4_STEP_PIN
+    #define Z4_STEP_PIN   _EPIN(Z4_E_INDEX, STEP)
+    #define Z4_DIR_PIN    _EPIN(Z4_E_INDEX, DIR)
+    #define Z4_ENABLE_PIN _EPIN(Z4_E_INDEX, ENABLE)
+    #if Z4_E_INDEX >= MAX_EXTRUDERS || !PIN_EXISTS(Z4_STEP)
+      #error "No E stepper plug left for Z4!"
+    #endif
+  #endif
+  #if AXIS_HAS_SPI(Z4)
+    #ifndef Z4_CS_PIN
+      #define Z4_CS_PIN     _EPIN(Z4_E_INDEX, CS)
+    #endif
+  #endif
+  #ifndef Z4_MS1_PIN
+    #define Z4_MS1_PIN    _EPIN(Z4_E_INDEX, MS1)
+  #endif
+  #ifndef Z4_MS2_PIN
+    #define Z4_MS2_PIN    _EPIN(Z4_E_INDEX, MS2)
+  #endif
+  #ifndef Z4_MS3_PIN
+    #define Z4_MS3_PIN    _EPIN(Z4_E_INDEX, MS3)
+  #endif
+  #if AXIS_HAS_UART(Z4)
+    #ifndef Z4_SERIAL_TX_PIN
+      #define Z4_SERIAL_TX_PIN _EPIN(Z4_E_INDEX, SERIAL_TX)
+    #endif
+    #ifndef Z4_SERIAL_RX_PIN
+      #define Z4_SERIAL_RX_PIN _EPIN(Z4_E_INDEX, SERIAL_RX)
+    #endif
+  #endif
+  #if defined(Z4_STALL_SENSITIVITY) && ENABLED(Z_MULTI_ENDSTOPS) && NUM_Z_STEPPER_DRIVERS >= 4 && _PEXI(Z4_E_INDEX, DIAG)
+    #define Z4_DIAG_PIN _EPIN(Z4_E_INDEX, DIAG)
+    #if   DIAG_REMAPPED(Z4, X_MIN)
+      #define Z4_USE_ENDSTOP _XMIN_
+    #elif DIAG_REMAPPED(Z4, Y_MIN)
+      #define Z4_USE_ENDSTOP _YMIN_
+    #elif DIAG_REMAPPED(Z4, Z_MIN)
+      #define Z4_USE_ENDSTOP _ZMIN_
+    #elif DIAG_REMAPPED(Z4, X_MAX)
+      #define Z4_USE_ENDSTOP _XMAX_
+    #elif DIAG_REMAPPED(Z4, Y_MAX)
+      #define Z4_USE_ENDSTOP _YMAX_
+    #elif DIAG_REMAPPED(Z4, Z_MAX)
+      #define Z4_USE_ENDSTOP _ZMAX_
+    #else
+      #define _Z4_USE_ENDSTOP(P) _E##P##_DIAG_
+      #define Z4_USE_ENDSTOP _Z4_USE_ENDSTOP(Z4_E_INDEX)
+    #endif
+    #undef Z4_DIAG_PIN
+  #endif
+#endif
+
+#ifndef Z4_CS_PIN
+  #define Z4_CS_PIN  -1
+#endif
+#ifndef Z4_MS1_PIN
+  #define Z4_MS1_PIN -1
+#endif
+#ifndef Z4_MS2_PIN
+  #define Z4_MS2_PIN -1
+#endif
+#ifndef Z4_MS3_PIN
+  #define Z4_MS3_PIN -1
+#endif
+
+#if HAS_MARLINUI_U8GLIB
+  #if !defined(ST7920_DELAY_1) && defined(BOARD_ST7920_DELAY_1)
+    #define ST7920_DELAY_1 BOARD_ST7920_DELAY_1
+  #endif
+  #if !defined(ST7920_DELAY_2) && defined(BOARD_ST7920_DELAY_2)
+    #define ST7920_DELAY_2 BOARD_ST7920_DELAY_2
+  #endif
+  #if !defined(ST7920_DELAY_3) && defined(BOARD_ST7920_DELAY_3)
+    #define ST7920_DELAY_3 BOARD_ST7920_DELAY_3
+  #endif
+#else
+  #undef ST7920_DELAY_1
+  #undef ST7920_DELAY_2
+  #undef ST7920_DELAY_3
+#endif
+
+#undef HAS_FREE_AUX2_PINS
+#undef DIAG_REMAPPED
