commit 6c018eb7703d9c859a065631553bf2af3ad1aaca
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon May 20 01:01:05 2024 -0400

    üìù Update some G-code and other comments  (#27034)

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 1f22cc84ed..d57eb9b59e 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -48,21 +48,21 @@ inline bool G38_run_probe() {
 
   #if MULTIPLE_PROBING > 1
     // Get direction of move and retract
     xyz_float_t retract_mm;
     LOOP_NUM_AXES(i) {
       const float dist = destination[i] - current_position[i];
       retract_mm[i] = ABS(dist) < G38_MINIMUM_MOVE ? 0 : home_bump_mm((AxisEnum)i) * (dist > 0 ? -1 : 1);
     }
   #endif
 
-  planner.synchronize();  // wait until the machine is idle
+  planner.synchronize(); // Wait until the machine is idle
 
   // Move flag value
   #if ENABLED(G38_PROBE_AWAY)
     const uint8_t move_value = parser.subcode;
   #else
     constexpr uint8_t move_value = 1;
   #endif
 
   G38_did_trigger = false;
 

commit 67d7562609986fae14d80036ad1e7a7f3aaa49d0
Author: narno2202 <130909513+narno2202@users.noreply.github.com>
Date:   Wed Dec 20 02:56:47 2023 +0100

    üêõ‚ö°Ô∏è FT_MOTION improvements (#26074)
    
    Co-Authored-By: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 5b138fdaf6..1f22cc84ed 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -98,20 +98,21 @@ inline bool G38_run_probe() {
  *
  *  G38.2 - Probe toward workpiece, stop on contact, signal error if failure
  *  G38.3 - Probe toward workpiece, stop on contact
  *
  * With G38_PROBE_AWAY:
  *
  *  G38.4 - Probe away from workpiece, stop on contact break, signal error if failure
  *  G38.5 - Probe away from workpiece, stop on contact break
  */
 void GcodeSuite::G38(const int8_t subcode) {
+
   // Get X Y Z E F
   get_destination_from_command();
 
   remember_feedrate_scaling_off();
 
   const bool error_on_fail = TERN(G38_PROBE_AWAY, !TEST(subcode, 0), subcode == 2);
 
   // If any axis has enough movement, do the move
   LOOP_NUM_AXES(i)
     if (ABS(destination[i] - current_position[i]) >= G38_MINIMUM_MOVE) {

commit f595878b5b12ba87c88e43160b3434e76c782998
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Feb 8 20:28:56 2023 -0600

    ü©π Various simple fixes

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 1b2da756b1..5b138fdaf6 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -103,27 +103,21 @@ inline bool G38_run_probe() {
  *
  *  G38.4 - Probe away from workpiece, stop on contact break, signal error if failure
  *  G38.5 - Probe away from workpiece, stop on contact break
  */
 void GcodeSuite::G38(const int8_t subcode) {
   // Get X Y Z E F
   get_destination_from_command();
 
   remember_feedrate_scaling_off();
 
-  const bool error_on_fail =
-    #if ENABLED(G38_PROBE_AWAY)
-      !TEST(subcode, 0)
-    #else
-      (subcode == 2)
-    #endif
-  ;
+  const bool error_on_fail = TERN(G38_PROBE_AWAY, !TEST(subcode, 0), subcode == 2);
 
   // If any axis has enough movement, do the move
   LOOP_NUM_AXES(i)
     if (ABS(destination[i] - current_position[i]) >= G38_MINIMUM_MOVE) {
       if (!parser.seenval('F')) feedrate_mm_s = homing_feedrate((AxisEnum)i);
       // If G38.2 fails throw an error
       if (!G38_run_probe() && error_on_fail) SERIAL_ERROR_MSG("Failed to reach target");
       break;
     }
 

commit 21c48d9f927c81d7b7cf6fc3641ce01a831a16ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jul 27 04:24:50 2022 -0500

    üßë‚Äçüíª  Update planner/stepper includes

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index ed24ce3258..1b2da756b1 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -21,21 +21,21 @@
  */
 
 #include "../../inc/MarlinConfig.h"
 
 #if ENABLED(G38_PROBE_TARGET)
 
 #include "../gcode.h"
 
 #include "../../module/endstops.h"
 #include "../../module/motion.h"
-#include "../../module/stepper.h"
+#include "../../module/planner.h"
 #include "../../module/probe.h"
 
 inline void G38_single_probe(const uint8_t move_value) {
   endstops.enable(true);
   G38_move = move_value;
   prepare_line_to_destination();
   planner.synchronize();
   G38_move = 0;
   endstops.hit_on_purpose();
   set_current_from_steppers_for_axis(ALL_AXES_ENUM);

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 6906805fca..ed24ce3258 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -42,21 +42,21 @@ inline void G38_single_probe(const uint8_t move_value) {
   sync_plan_position();
 }
 
 inline bool G38_run_probe() {
 
   bool G38_pass_fail = false;
 
   #if MULTIPLE_PROBING > 1
     // Get direction of move and retract
     xyz_float_t retract_mm;
-    LOOP_LINEAR_AXES(i) {
+    LOOP_NUM_AXES(i) {
       const float dist = destination[i] - current_position[i];
       retract_mm[i] = ABS(dist) < G38_MINIMUM_MOVE ? 0 : home_bump_mm((AxisEnum)i) * (dist > 0 ? -1 : 1);
     }
   #endif
 
   planner.synchronize();  // wait until the machine is idle
 
   // Move flag value
   #if ENABLED(G38_PROBE_AWAY)
     const uint8_t move_value = parser.subcode;
@@ -112,21 +112,21 @@ void GcodeSuite::G38(const int8_t subcode) {
 
   const bool error_on_fail =
     #if ENABLED(G38_PROBE_AWAY)
       !TEST(subcode, 0)
     #else
       (subcode == 2)
     #endif
   ;
 
   // If any axis has enough movement, do the move
-  LOOP_LINEAR_AXES(i)
+  LOOP_NUM_AXES(i)
     if (ABS(destination[i] - current_position[i]) >= G38_MINIMUM_MOVE) {
       if (!parser.seenval('F')) feedrate_mm_s = homing_feedrate((AxisEnum)i);
       // If G38.2 fails throw an error
       if (!G38_run_probe() && error_on_fail) SERIAL_ERROR_MSG("Failed to reach target");
       break;
     }
 
   restore_feedrate_and_scaling();
 }
 

commit f4951ed56b3fe7b2f85c039677dc9a499d537e8f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri May 21 08:25:54 2021 -0500

    üé® Rename all/no axis enums

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 606776f402..6906805fca 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -31,21 +31,21 @@
 #include "../../module/stepper.h"
 #include "../../module/probe.h"
 
 inline void G38_single_probe(const uint8_t move_value) {
   endstops.enable(true);
   G38_move = move_value;
   prepare_line_to_destination();
   planner.synchronize();
   G38_move = 0;
   endstops.hit_on_purpose();
-  set_current_from_steppers_for_axis(ALL_AXES_MASK);
+  set_current_from_steppers_for_axis(ALL_AXES_ENUM);
   sync_plan_position();
 }
 
 inline bool G38_run_probe() {
 
   bool G38_pass_fail = false;
 
   #if MULTIPLE_PROBING > 1
     // Get direction of move and retract
     xyz_float_t retract_mm;

commit a6e5492b088add3589aeac168136369f21614e60
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 18 22:51:19 2021 -0500

    ‚ôªÔ∏è Refactor axis counts and loops

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index b06cd47359..606776f402 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -31,32 +31,32 @@
 #include "../../module/stepper.h"
 #include "../../module/probe.h"
 
 inline void G38_single_probe(const uint8_t move_value) {
   endstops.enable(true);
   G38_move = move_value;
   prepare_line_to_destination();
   planner.synchronize();
   G38_move = 0;
   endstops.hit_on_purpose();
-  set_current_from_steppers_for_axis(ALL_AXES);
+  set_current_from_steppers_for_axis(ALL_AXES_MASK);
   sync_plan_position();
 }
 
 inline bool G38_run_probe() {
 
   bool G38_pass_fail = false;
 
   #if MULTIPLE_PROBING > 1
     // Get direction of move and retract
     xyz_float_t retract_mm;
-    LOOP_XYZ(i) {
+    LOOP_LINEAR_AXES(i) {
       const float dist = destination[i] - current_position[i];
       retract_mm[i] = ABS(dist) < G38_MINIMUM_MOVE ? 0 : home_bump_mm((AxisEnum)i) * (dist > 0 ? -1 : 1);
     }
   #endif
 
   planner.synchronize();  // wait until the machine is idle
 
   // Move flag value
   #if ENABLED(G38_PROBE_AWAY)
     const uint8_t move_value = parser.subcode;
@@ -112,21 +112,21 @@ void GcodeSuite::G38(const int8_t subcode) {
 
   const bool error_on_fail =
     #if ENABLED(G38_PROBE_AWAY)
       !TEST(subcode, 0)
     #else
       (subcode == 2)
     #endif
   ;
 
   // If any axis has enough movement, do the move
-  LOOP_XYZ(i)
+  LOOP_LINEAR_AXES(i)
     if (ABS(destination[i] - current_position[i]) >= G38_MINIMUM_MOVE) {
       if (!parser.seenval('F')) feedrate_mm_s = homing_feedrate((AxisEnum)i);
       // If G38.2 fails throw an error
       if (!G38_run_probe() && error_on_fail) SERIAL_ERROR_MSG("Failed to reach target");
       break;
     }
 
   restore_feedrate_and_scaling();
 }
 

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 512e1ff89f..b06cd47359 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 
 #include "../../inc/MarlinConfig.h"
 
 #if ENABLED(G38_PROBE_TARGET)
 
 #include "../gcode.h"
 
 #include "../../module/endstops.h"

commit 49c5f614c6ac9326275a2daf8f771df41041f142
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 1 16:59:04 2020 -0600

    Minor motion style changes

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 11b7ce5af7..512e1ff89f 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -27,21 +27,21 @@
 #include "../gcode.h"
 
 #include "../../module/endstops.h"
 #include "../../module/motion.h"
 #include "../../module/stepper.h"
 #include "../../module/probe.h"
 
 inline void G38_single_probe(const uint8_t move_value) {
   endstops.enable(true);
   G38_move = move_value;
-  prepare_move_to_destination();
+  prepare_line_to_destination();
   planner.synchronize();
   G38_move = 0;
   endstops.hit_on_purpose();
   set_current_from_steppers_for_axis(ALL_AXES);
   sync_plan_position();
 }
 
 inline bool G38_run_probe() {
 
   bool G38_pass_fail = false;
@@ -70,21 +70,21 @@ inline bool G38_run_probe() {
   G38_single_probe(move_value);
 
   if (G38_did_trigger) {
 
     G38_pass_fail = true;
 
     #if MULTIPLE_PROBING > 1
       // Move away by the retract distance
       destination = current_position + retract_mm;
       endstops.enable(false);
-      prepare_move_to_destination();
+      prepare_line_to_destination();
       planner.synchronize();
 
       REMEMBER(fr, feedrate_mm_s, feedrate_mm_s * 0.25);
 
       // Bump the target more slowly
       destination -= retract_mm * 2;
 
       G38_single_probe(move_value);
     #endif
   }

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index cb298bcccb..11b7ce5af7 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 50e4545255605eb506c20eb107270038b0fe7bdb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 29 04:25:39 2019 -0500

    Add custom types for position (#15204)

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 33f5611a43..cb298bcccb 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -41,21 +41,21 @@ inline void G38_single_probe(const uint8_t move_value) {
   set_current_from_steppers_for_axis(ALL_AXES);
   sync_plan_position();
 }
 
 inline bool G38_run_probe() {
 
   bool G38_pass_fail = false;
 
   #if MULTIPLE_PROBING > 1
     // Get direction of move and retract
-    float retract_mm[XYZ];
+    xyz_float_t retract_mm;
     LOOP_XYZ(i) {
       const float dist = destination[i] - current_position[i];
       retract_mm[i] = ABS(dist) < G38_MINIMUM_MOVE ? 0 : home_bump_mm((AxisEnum)i) * (dist > 0 ? -1 : 1);
     }
   #endif
 
   planner.synchronize();  // wait until the machine is idle
 
   // Move flag value
   #if ENABLED(G38_PROBE_AWAY)
@@ -68,30 +68,29 @@ inline bool G38_run_probe() {
 
   // Move until destination reached or target hit
   G38_single_probe(move_value);
 
   if (G38_did_trigger) {
 
     G38_pass_fail = true;
 
     #if MULTIPLE_PROBING > 1
       // Move away by the retract distance
-      set_destination_from_current();
-      LOOP_XYZ(i) destination[i] += retract_mm[i];
+      destination = current_position + retract_mm;
       endstops.enable(false);
       prepare_move_to_destination();
       planner.synchronize();
 
       REMEMBER(fr, feedrate_mm_s, feedrate_mm_s * 0.25);
 
       // Bump the target more slowly
-      LOOP_XYZ(i) destination[i] -= retract_mm[i] * 2;
+      destination -= retract_mm * 2;
 
       G38_single_probe(move_value);
     #endif
   }
 
   endstops.not_homing();
   return G38_pass_fail;
 }
 
 /**

commit 5e13fe989f21bcbd4da1a567953dab8a18f96e11
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Sep 23 20:58:01 2019 -0500

    Rename some feedrate-oriented functions

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 1444521350..33f5611a43 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -102,33 +102,33 @@ inline bool G38_run_probe() {
  *
  * With G38_PROBE_AWAY:
  *
  *  G38.4 - Probe away from workpiece, stop on contact break, signal error if failure
  *  G38.5 - Probe away from workpiece, stop on contact break
  */
 void GcodeSuite::G38(const int8_t subcode) {
   // Get X Y Z E F
   get_destination_from_command();
 
-  setup_for_endstop_or_probe_move();
+  remember_feedrate_scaling_off();
 
   const bool error_on_fail =
     #if ENABLED(G38_PROBE_AWAY)
       !TEST(subcode, 0)
     #else
       (subcode == 2)
     #endif
   ;
 
   // If any axis has enough movement, do the move
   LOOP_XYZ(i)
     if (ABS(destination[i] - current_position[i]) >= G38_MINIMUM_MOVE) {
       if (!parser.seenval('F')) feedrate_mm_s = homing_feedrate((AxisEnum)i);
       // If G38.2 fails throw an error
       if (!G38_run_probe() && error_on_fail) SERIAL_ERROR_MSG("Failed to reach target");
       break;
     }
 
-  clean_up_after_endstop_or_probe_move();
+  restore_feedrate_and_scaling();
 }
 
 #endif // G38_PROBE_TARGET

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index be9c58e861..1444521350 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -1,16 +1,16 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.

commit b824a517aaad62001cf815e577b2f383f4766402
Author: Michiel Baird <michielbaird@gmail.com>
Date:   Sun Mar 10 15:22:09 2019 -0700

    Add G38.4 and G38.5 (#13348)

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index fceab8313d..be9c58e861 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -24,95 +24,111 @@
 
 #if ENABLED(G38_PROBE_TARGET)
 
 #include "../gcode.h"
 
 #include "../../module/endstops.h"
 #include "../../module/motion.h"
 #include "../../module/stepper.h"
 #include "../../module/probe.h"
 
-static bool G38_run_probe() {
+inline void G38_single_probe(const uint8_t move_value) {
+  endstops.enable(true);
+  G38_move = move_value;
+  prepare_move_to_destination();
+  planner.synchronize();
+  G38_move = 0;
+  endstops.hit_on_purpose();
+  set_current_from_steppers_for_axis(ALL_AXES);
+  sync_plan_position();
+}
+
+inline bool G38_run_probe() {
 
   bool G38_pass_fail = false;
 
   #if MULTIPLE_PROBING > 1
     // Get direction of move and retract
     float retract_mm[XYZ];
     LOOP_XYZ(i) {
       const float dist = destination[i] - current_position[i];
       retract_mm[i] = ABS(dist) < G38_MINIMUM_MOVE ? 0 : home_bump_mm((AxisEnum)i) * (dist > 0 ? -1 : 1);
     }
   #endif
 
   planner.synchronize();  // wait until the machine is idle
 
-  // Move until destination reached or target hit
-  endstops.enable(true);
-  G38_move = true;
-  G38_endstop_hit = false;
-  prepare_move_to_destination();
-  planner.synchronize();
-  G38_move = false;
+  // Move flag value
+  #if ENABLED(G38_PROBE_AWAY)
+    const uint8_t move_value = parser.subcode;
+  #else
+    constexpr uint8_t move_value = 1;
+  #endif
 
-  endstops.hit_on_purpose();
-  set_current_from_steppers_for_axis(ALL_AXES);
-  sync_plan_position();
+  G38_did_trigger = false;
 
-  if (G38_endstop_hit) {
+  // Move until destination reached or target hit
+  G38_single_probe(move_value);
+
+  if (G38_did_trigger) {
 
     G38_pass_fail = true;
 
     #if MULTIPLE_PROBING > 1
       // Move away by the retract distance
       set_destination_from_current();
       LOOP_XYZ(i) destination[i] += retract_mm[i];
       endstops.enable(false);
       prepare_move_to_destination();
       planner.synchronize();
 
-      feedrate_mm_s /= 4;
+      REMEMBER(fr, feedrate_mm_s, feedrate_mm_s * 0.25);
 
       // Bump the target more slowly
       LOOP_XYZ(i) destination[i] -= retract_mm[i] * 2;
 
-      endstops.enable(true);
-      G38_move = true;
-      prepare_move_to_destination();
-      planner.synchronize();
-      G38_move = false;
-
-      set_current_from_steppers_for_axis(ALL_AXES);
-      sync_plan_position();
+      G38_single_probe(move_value);
     #endif
   }
 
-  endstops.hit_on_purpose();
   endstops.not_homing();
   return G38_pass_fail;
 }
 
 /**
- * G38.2 - probe toward workpiece, stop on contact, signal error if failure
- * G38.3 - probe toward workpiece, stop on contact
+ * G38 Probe Target
+ *
+ *  G38.2 - Probe toward workpiece, stop on contact, signal error if failure
+ *  G38.3 - Probe toward workpiece, stop on contact
  *
- * Like G28 except uses Z min probe for all axes
+ * With G38_PROBE_AWAY:
+ *
+ *  G38.4 - Probe away from workpiece, stop on contact break, signal error if failure
+ *  G38.5 - Probe away from workpiece, stop on contact break
  */
-void GcodeSuite::G38(const bool is_38_2) {
+void GcodeSuite::G38(const int8_t subcode) {
   // Get X Y Z E F
   get_destination_from_command();
 
   setup_for_endstop_or_probe_move();
 
+  const bool error_on_fail =
+    #if ENABLED(G38_PROBE_AWAY)
+      !TEST(subcode, 0)
+    #else
+      (subcode == 2)
+    #endif
+  ;
+
   // If any axis has enough movement, do the move
   LOOP_XYZ(i)
     if (ABS(destination[i] - current_position[i]) >= G38_MINIMUM_MOVE) {
       if (!parser.seenval('F')) feedrate_mm_s = homing_feedrate((AxisEnum)i);
       // If G38.2 fails throw an error
-      if (!G38_run_probe() && is_38_2) SERIAL_ERROR_MSG("Failed to reach target");
+      if (!G38_run_probe() && error_on_fail) SERIAL_ERROR_MSG("Failed to reach target");
       break;
     }
 
   clean_up_after_endstop_or_probe_move();
 }
 
 #endif // G38_PROBE_TARGET

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 04b7de4f2e..fceab8313d 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit c98623983774b9773800bc7dcef695c4bad81c0e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Nov 29 16:58:58 2018 -0600

    A single SERIAL_ECHO macro type (#12557)

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 6bf09b8bac..04b7de4f2e 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -101,21 +101,18 @@ void GcodeSuite::G38(const bool is_38_2) {
   // Get X Y Z E F
   get_destination_from_command();
 
   setup_for_endstop_or_probe_move();
 
   // If any axis has enough movement, do the move
   LOOP_XYZ(i)
     if (ABS(destination[i] - current_position[i]) >= G38_MINIMUM_MOVE) {
       if (!parser.seenval('F')) feedrate_mm_s = homing_feedrate((AxisEnum)i);
       // If G38.2 fails throw an error
-      if (!G38_run_probe() && is_38_2) {
-        SERIAL_ERROR_START();
-        SERIAL_ERRORLNPGM("Failed to reach target");
-      }
+      if (!G38_run_probe() && is_38_2) SERIAL_ERROR_MSG("Failed to reach target");
       break;
     }
 
   clean_up_after_endstop_or_probe_move();
 }
 
 #endif // G38_PROBE_TARGET

commit c437bb08f12f1c0535cc78a761b49a18f2dc2a12
Author: Thomas Moore <tcm0116@users.noreply.github.com>
Date:   Sun Sep 16 22:24:15 2018 -0400

    Overhaul of the planner (#11578)
    
    - Move FWRETRACT to the planner
    - Combine leveling, skew, etc. in a single modifier method
    - Have kinematic and non-kinematic moves call one planner method

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index bdbb635ef3..6bf09b8bac 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -49,21 +49,21 @@ static bool G38_run_probe() {
   // Move until destination reached or target hit
   endstops.enable(true);
   G38_move = true;
   G38_endstop_hit = false;
   prepare_move_to_destination();
   planner.synchronize();
   G38_move = false;
 
   endstops.hit_on_purpose();
   set_current_from_steppers_for_axis(ALL_AXES);
-  SYNC_PLAN_POSITION_KINEMATIC();
+  sync_plan_position();
 
   if (G38_endstop_hit) {
 
     G38_pass_fail = true;
 
     #if MULTIPLE_PROBING > 1
       // Move away by the retract distance
       set_destination_from_current();
       LOOP_XYZ(i) destination[i] += retract_mm[i];
       endstops.enable(false);
@@ -75,21 +75,21 @@ static bool G38_run_probe() {
       // Bump the target more slowly
       LOOP_XYZ(i) destination[i] -= retract_mm[i] * 2;
 
       endstops.enable(true);
       G38_move = true;
       prepare_move_to_destination();
       planner.synchronize();
       G38_move = false;
 
       set_current_from_steppers_for_axis(ALL_AXES);
-      SYNC_PLAN_POSITION_KINEMATIC();
+      sync_plan_position();
     #endif
   }
 
   endstops.hit_on_purpose();
   endstops.not_homing();
   return G38_pass_fail;
 }
 
 /**
  * G38.2 - probe toward workpiece, stop on contact, signal error if failure

commit 99ecdf59af907ebb8d2d847863614094bb576e3f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun May 13 01:10:34 2018 -0500

    Smarter MIN, MAX, ABS macros
    
    Use macros that explicitly avoid double-evaluation and can be used for any datatype, replacing `min`, `max`, `abs`, `fabs`, `labs`, and `FABS`.
    
    Co-Authored-By: ejtagle <ejtagle@hotmail.com>

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 263b1d1df9..bdbb635ef3 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -32,22 +32,22 @@
 #include "../../module/probe.h"
 
 static bool G38_run_probe() {
 
   bool G38_pass_fail = false;
 
   #if MULTIPLE_PROBING > 1
     // Get direction of move and retract
     float retract_mm[XYZ];
     LOOP_XYZ(i) {
-      float dist = destination[i] - current_position[i];
-      retract_mm[i] = FABS(dist) < G38_MINIMUM_MOVE ? 0 : home_bump_mm((AxisEnum)i) * (dist > 0 ? -1 : 1);
+      const float dist = destination[i] - current_position[i];
+      retract_mm[i] = ABS(dist) < G38_MINIMUM_MOVE ? 0 : home_bump_mm((AxisEnum)i) * (dist > 0 ? -1 : 1);
     }
   #endif
 
   planner.synchronize();  // wait until the machine is idle
 
   // Move until destination reached or target hit
   endstops.enable(true);
   G38_move = true;
   G38_endstop_hit = false;
   prepare_move_to_destination();
@@ -98,21 +98,21 @@ static bool G38_run_probe() {
  * Like G28 except uses Z min probe for all axes
  */
 void GcodeSuite::G38(const bool is_38_2) {
   // Get X Y Z E F
   get_destination_from_command();
 
   setup_for_endstop_or_probe_move();
 
   // If any axis has enough movement, do the move
   LOOP_XYZ(i)
-    if (FABS(destination[i] - current_position[i]) >= G38_MINIMUM_MOVE) {
+    if (ABS(destination[i] - current_position[i]) >= G38_MINIMUM_MOVE) {
       if (!parser.seenval('F')) feedrate_mm_s = homing_feedrate((AxisEnum)i);
       // If G38.2 fails throw an error
       if (!G38_run_probe() && is_38_2) {
         SERIAL_ERROR_START();
         SERIAL_ERRORLNPGM("Failed to reach target");
       }
       break;
     }
 
   clean_up_after_endstop_or_probe_move();

commit 306f0f2135e4b2aed749a0d1b870abf17d883e38
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat May 12 01:38:02 2018 -0500

    Move Stepper::synchronize to Planner (#10713)
    
    Co-Authored-By: ejtagle <ejtagle@hotmail.com>

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index adc0d491d4..263b1d1df9 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -37,55 +37,55 @@ static bool G38_run_probe() {
 
   #if MULTIPLE_PROBING > 1
     // Get direction of move and retract
     float retract_mm[XYZ];
     LOOP_XYZ(i) {
       float dist = destination[i] - current_position[i];
       retract_mm[i] = FABS(dist) < G38_MINIMUM_MOVE ? 0 : home_bump_mm((AxisEnum)i) * (dist > 0 ? -1 : 1);
     }
   #endif
 
-  stepper.synchronize();  // wait until the machine is idle
+  planner.synchronize();  // wait until the machine is idle
 
   // Move until destination reached or target hit
   endstops.enable(true);
   G38_move = true;
   G38_endstop_hit = false;
   prepare_move_to_destination();
-  stepper.synchronize();
+  planner.synchronize();
   G38_move = false;
 
   endstops.hit_on_purpose();
   set_current_from_steppers_for_axis(ALL_AXES);
   SYNC_PLAN_POSITION_KINEMATIC();
 
   if (G38_endstop_hit) {
 
     G38_pass_fail = true;
 
     #if MULTIPLE_PROBING > 1
       // Move away by the retract distance
       set_destination_from_current();
       LOOP_XYZ(i) destination[i] += retract_mm[i];
       endstops.enable(false);
       prepare_move_to_destination();
-      stepper.synchronize();
+      planner.synchronize();
 
       feedrate_mm_s /= 4;
 
       // Bump the target more slowly
       LOOP_XYZ(i) destination[i] -= retract_mm[i] * 2;
 
       endstops.enable(true);
       G38_move = true;
       prepare_move_to_destination();
-      stepper.synchronize();
+      planner.synchronize();
       G38_move = false;
 
       set_current_from_steppers_for_axis(ALL_AXES);
       SYNC_PLAN_POSITION_KINEMATIC();
     #endif
   }
 
   endstops.hit_on_purpose();
   endstops.not_homing();
   return G38_pass_fail;

commit ae663a4198512796319934a0dbd64832040fd0a0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Dec 7 16:33:51 2017 -0600

    PROBE_DOUBLE_TOUCH => MULTIPLE_PROBING

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 105085a146..adc0d491d4 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -28,21 +28,21 @@
 
 #include "../../module/endstops.h"
 #include "../../module/motion.h"
 #include "../../module/stepper.h"
 #include "../../module/probe.h"
 
 static bool G38_run_probe() {
 
   bool G38_pass_fail = false;
 
-  #if ENABLED(PROBE_DOUBLE_TOUCH)
+  #if MULTIPLE_PROBING > 1
     // Get direction of move and retract
     float retract_mm[XYZ];
     LOOP_XYZ(i) {
       float dist = destination[i] - current_position[i];
       retract_mm[i] = FABS(dist) < G38_MINIMUM_MOVE ? 0 : home_bump_mm((AxisEnum)i) * (dist > 0 ? -1 : 1);
     }
   #endif
 
   stepper.synchronize();  // wait until the machine is idle
 
@@ -55,21 +55,21 @@ static bool G38_run_probe() {
   G38_move = false;
 
   endstops.hit_on_purpose();
   set_current_from_steppers_for_axis(ALL_AXES);
   SYNC_PLAN_POSITION_KINEMATIC();
 
   if (G38_endstop_hit) {
 
     G38_pass_fail = true;
 
-    #if ENABLED(PROBE_DOUBLE_TOUCH)
+    #if MULTIPLE_PROBING > 1
       // Move away by the retract distance
       set_destination_from_current();
       LOOP_XYZ(i) destination[i] += retract_mm[i];
       endstops.enable(false);
       prepare_move_to_destination();
       stepper.synchronize();
 
       feedrate_mm_s /= 4;
 
       // Bump the target more slowly

commit 72156a2029d329c7dc251f5e576103fda691372d
Author: Roxy-3D <Roxy-3D@users.noreply.github.com>
Date:   Sat Oct 21 11:42:26 2017 -0500

    change to better (more clear) names (#8050)
    
    set_destination_to_current() changed to set_destination_from_current()
    
    set_current_to_destination() changed to set_current_from_destination()

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
index 71e022cd83..105085a146 100644
--- a/Marlin/src/gcode/probe/G38.cpp
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -57,21 +57,21 @@ static bool G38_run_probe() {
   endstops.hit_on_purpose();
   set_current_from_steppers_for_axis(ALL_AXES);
   SYNC_PLAN_POSITION_KINEMATIC();
 
   if (G38_endstop_hit) {
 
     G38_pass_fail = true;
 
     #if ENABLED(PROBE_DOUBLE_TOUCH)
       // Move away by the retract distance
-      set_destination_to_current();
+      set_destination_from_current();
       LOOP_XYZ(i) destination[i] += retract_mm[i];
       endstops.enable(false);
       prepare_move_to_destination();
       stepper.synchronize();
 
       feedrate_mm_s /= 4;
 
       // Bump the target more slowly
       LOOP_XYZ(i) destination[i] -= retract_mm[i] * 2;
 

commit 84ddae56a8202ba0a9484e914d75e738db754550
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Sep 15 23:44:29 2017 -0500

    Move G38 to cpp

diff --git a/Marlin/src/gcode/probe/G38.cpp b/Marlin/src/gcode/probe/G38.cpp
new file mode 100644
index 0000000000..71e022cd83
--- /dev/null
+++ b/Marlin/src/gcode/probe/G38.cpp
@@ -0,0 +1,121 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../inc/MarlinConfig.h"
+
+#if ENABLED(G38_PROBE_TARGET)
+
+#include "../gcode.h"
+
+#include "../../module/endstops.h"
+#include "../../module/motion.h"
+#include "../../module/stepper.h"
+#include "../../module/probe.h"
+
+static bool G38_run_probe() {
+
+  bool G38_pass_fail = false;
+
+  #if ENABLED(PROBE_DOUBLE_TOUCH)
+    // Get direction of move and retract
+    float retract_mm[XYZ];
+    LOOP_XYZ(i) {
+      float dist = destination[i] - current_position[i];
+      retract_mm[i] = FABS(dist) < G38_MINIMUM_MOVE ? 0 : home_bump_mm((AxisEnum)i) * (dist > 0 ? -1 : 1);
+    }
+  #endif
+
+  stepper.synchronize();  // wait until the machine is idle
+
+  // Move until destination reached or target hit
+  endstops.enable(true);
+  G38_move = true;
+  G38_endstop_hit = false;
+  prepare_move_to_destination();
+  stepper.synchronize();
+  G38_move = false;
+
+  endstops.hit_on_purpose();
+  set_current_from_steppers_for_axis(ALL_AXES);
+  SYNC_PLAN_POSITION_KINEMATIC();
+
+  if (G38_endstop_hit) {
+
+    G38_pass_fail = true;
+
+    #if ENABLED(PROBE_DOUBLE_TOUCH)
+      // Move away by the retract distance
+      set_destination_to_current();
+      LOOP_XYZ(i) destination[i] += retract_mm[i];
+      endstops.enable(false);
+      prepare_move_to_destination();
+      stepper.synchronize();
+
+      feedrate_mm_s /= 4;
+
+      // Bump the target more slowly
+      LOOP_XYZ(i) destination[i] -= retract_mm[i] * 2;
+
+      endstops.enable(true);
+      G38_move = true;
+      prepare_move_to_destination();
+      stepper.synchronize();
+      G38_move = false;
+
+      set_current_from_steppers_for_axis(ALL_AXES);
+      SYNC_PLAN_POSITION_KINEMATIC();
+    #endif
+  }
+
+  endstops.hit_on_purpose();
+  endstops.not_homing();
+  return G38_pass_fail;
+}
+
+/**
+ * G38.2 - probe toward workpiece, stop on contact, signal error if failure
+ * G38.3 - probe toward workpiece, stop on contact
+ *
+ * Like G28 except uses Z min probe for all axes
+ */
+void GcodeSuite::G38(const bool is_38_2) {
+  // Get X Y Z E F
+  get_destination_from_command();
+
+  setup_for_endstop_or_probe_move();
+
+  // If any axis has enough movement, do the move
+  LOOP_XYZ(i)
+    if (FABS(destination[i] - current_position[i]) >= G38_MINIMUM_MOVE) {
+      if (!parser.seenval('F')) feedrate_mm_s = homing_feedrate((AxisEnum)i);
+      // If G38.2 fails throw an error
+      if (!G38_run_probe() && is_38_2) {
+        SERIAL_ERROR_START();
+        SERIAL_ERRORLNPGM("Failed to reach target");
+      }
+      break;
+    }
+
+  clean_up_after_endstop_or_probe_move();
+}
+
+#endif // G38_PROBE_TARGET
