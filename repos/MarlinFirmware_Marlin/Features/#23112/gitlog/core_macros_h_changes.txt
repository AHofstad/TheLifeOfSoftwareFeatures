commit 65c19f82b9827604d1286823a655d9ecf106b6b3
Author: Mihai <299015+mh-dm@users.noreply.github.com>
Date:   Thu Jun 6 05:26:09 2024 +0300

    üîß Minimum Stepper Pulse in Nanoseconds (#27113)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 5d2f4f0de1..56250fb149 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -48,23 +48,20 @@
 
 #ifndef UNUSED
   #define UNUSED(x) ((void)(x))
 #endif
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
-// Nanoseconds per cycle
-#define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
-
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV
 #define _BV(n) (1<<(n))

commit a4a0887fa79f096e38b87f50f01b3995d0874234
Author: Mihai <299015+mh-dm@users.noreply.github.com>
Date:   Wed May 29 02:22:39 2024 +0300

    üêõ Fix NONE, ALL, EVAL macro collision (#27132)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 4f1aba23c8..5d2f4f0de1 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -190,22 +190,22 @@
 #define _ISENA_0x1  ~,1
 #define _ISENA_true ~,1
 #define _ISENA(V...)        IS_PROBE(V)
 
 // Macros to evaluate simple option switches
 #define _ENA_1(O)           _ISENA(CAT(_IS,CAT(ENA_, O)))
 #define _DIS_1(O)           NOT(_ENA_1(O))
 #define ENABLED(V...)       DO(ENA,&&,V)
 #define DISABLED(V...)      DO(DIS,&&,V)
 #define ANY(V...)          !DISABLED(V)
-#define ALL                 ENABLED
-#define NONE                DISABLED
+#define ALL(V...)           ENABLED(V)
+#define NONE(V...)          DISABLED(V)
 #define COUNT_ENABLED(V...) DO(ENA,+,V)
 #define MANY(V...)          (COUNT_ENABLED(V) > 1)
 
 // Ternary pre-compiler macros conceal non-emitted content from the compiler
 #define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION ? 'A' : 'B'
 #define TERN0(O,A)          _TERN(_ENA_1(O),0,A)    // OPTION ? 'A' : '0'
 #define TERN1(O,A)          _TERN(_ENA_1(O),1,A)    // OPTION ? 'A' : '1'
 #define TERN_(O,A)          _TERN(_ENA_1(O),,A)     // OPTION ? 'A' : '<nul>'
 #define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
 #define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
@@ -623,21 +623,21 @@
 #define THIRD(a,b,c,...) c
 
 // Defer expansion
 #define EMPTY()
 #define DEFER(M)  M EMPTY()
 #define DEFER2(M) M EMPTY EMPTY()()
 #define DEFER3(M) M EMPTY EMPTY EMPTY()()()
 #define DEFER4(M) M EMPTY EMPTY EMPTY EMPTY()()()()
 
 // Force define expansion
-#define EVAL           EVAL16
+#define EVAL(V...)     EVAL16(V)
 #define EVAL4096(V...) EVAL2048(EVAL2048(V))
 #define EVAL2048(V...) EVAL1024(EVAL1024(V))
 #define EVAL1024(V...) EVAL512(EVAL512(V))
 #define EVAL512(V...)  EVAL256(EVAL256(V))
 #define EVAL256(V...)  EVAL128(EVAL128(V))
 #define EVAL128(V...)  EVAL64(EVAL64(V))
 #define EVAL64(V...)   EVAL32(EVAL32(V))
 #define EVAL32(V...)   EVAL16(EVAL16(V))
 #define EVAL16(V...)   EVAL8(EVAL8(V))
 #define EVAL8(V...)    EVAL4(EVAL4(V))

commit a33112a4c028bd7643b87e100a16d35f2327df91
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed May 15 20:30:14 2024 -0500

    üêõ Reorder `FLOAT_SQ`
    
    Followup to 5f96dffb

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 90974f1c98..4f1aba23c8 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -82,21 +82,21 @@
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 #define TBI32(N,B) (N ^= _BV32(B))
 
 #define cu(x)      ({__typeof__(x) _x = (x); (_x)*(_x)*(_x);})
 #define RADIANS(d) ((d)*float(M_PI)/180.0f)
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 #define NORMSQ(x,y,z) (sq(x)+sq(y)+sq(z))
 
-#define FLOAT_SQ(I) float(sq(I))
+#define FLOAT_SQ(I) sq(float(I))
 #define CIRCLE_AREA(R) (float(M_PI) * FLOAT_SQ(R))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ({__typeof__(a) _a = (a); (_a>0)-(_a<0);})
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
 // Macros to constrain values
 #ifdef __cplusplus
 
   // C++11 solution that is standards compliant.

commit 5f96dffb9b50baf1e730c21405a573ad45b45e7d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed May 15 15:21:39 2024 -0500

    üßë‚Äçüíª FLOAT_SQ macro

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 784002c769..90974f1c98 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -82,21 +82,22 @@
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 #define TBI32(N,B) (N ^= _BV32(B))
 
 #define cu(x)      ({__typeof__(x) _x = (x); (_x)*(_x)*(_x);})
 #define RADIANS(d) ((d)*float(M_PI)/180.0f)
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 #define NORMSQ(x,y,z) (sq(x)+sq(y)+sq(z))
 
-#define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
+#define FLOAT_SQ(I) float(sq(I))
+#define CIRCLE_AREA(R) (float(M_PI) * FLOAT_SQ(R))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ({__typeof__(a) _a = (a); (_a>0)-(_a<0);})
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
 // Macros to constrain values
 #ifdef __cplusplus
 
   // C++11 solution that is standards compliant.
   template <class V, class N> static constexpr void NOLESS(V& v, const N n) {

commit ec7ab5a277a0210e1349f9e8608c372e40fdb6e6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Dec 21 22:35:51 2023 -0600

    üî® Build flag tweaks

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index beb6bfe3e9..784002c769 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -30,25 +30,26 @@
 #define ABC  3
 #define XYZ  3
 #define XY   2
 
 #define _AXIS(A) (A##_AXIS)
 
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define NO_INLINE      __attribute__((noinline))
 #define _UNUSED      __attribute__((unused))
-#define __O0         __attribute__((optimize("O0")))
-#define __Os         __attribute__((optimize("Os")))
-#define __O1         __attribute__((optimize("O1")))
-#define __O2         __attribute__((optimize("O2")))
-#define __O3         __attribute__((optimize("O3")))
+#define __O0         __attribute__((optimize("O0")))  // No optimization and less debug info
+#define __Og         __attribute__((optimize("Og")))  // Optimize the debugging experience
+#define __Os         __attribute__((optimize("Os")))  // Optimize for size
+#define __O1         __attribute__((optimize("O1")))  // Try to reduce size and cycles; nothing that takes a lot of time to compile
+#define __O2         __attribute__((optimize("O2")))  // Optimize even more
+#define __O3         __attribute__((optimize("O3")))  // Optimize yet more
 
 #define IS_CONSTEXPR(...) __builtin_constant_p(__VA_ARGS__) // Only valid solution with C++14. Should use std::is_constant_evaluated() in C++20 instead
 
 #ifndef UNUSED
   #define UNUSED(x) ((void)(x))
 #endif
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR

commit d5d45e85e4b88e531e4c519f8c40281ea2826364
Author: David Buezas <dbuezas@users.noreply.github.com>
Date:   Tue Dec 5 04:31:34 2023 +0100

    ‚ú® DOUBLE_LCD_FRAMERATE (#26500)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index bc0df357ca..beb6bfe3e9 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -211,26 +211,30 @@
 #define IF_DISABLED(O,A)    TERN(O,,A)
 
 // Macros to conditionally emit array items and function arguments
 #define _OPTITEM(A...)      A,
 #define OPTITEM(O,A...)     TERN_(O,DEFER4(_OPTITEM)(A))
 #define _OPTARG(A...)       , A
 #define OPTARG(O,A...)      TERN_(O,DEFER4(_OPTARG)(A))
 #define _OPTCODE(A)         A;
 #define OPTCODE(O,A)        TERN_(O,DEFER4(_OPTCODE)(A))
 
-// Macros to avoid 'f + 0.0' which is not always optimized away. Minus included for symmetry.
+// Macros to avoid operations that aren't always optimized away (e.g., 'f + 0.0' and 'f * 1.0').
 // Compiler flags -fno-signed-zeros -ffinite-math-only also cover 'f * 1.0', 'f - f', etc.
 #define PLUS_TERN0(O,A)     _TERN(_ENA_1(O),,+ (A)) // OPTION ? '+ (A)' : '<nul>'
 #define MINUS_TERN0(O,A)    _TERN(_ENA_1(O),,- (A)) // OPTION ? '- (A)' : '<nul>'
+#define MUL_TERN1(O,A)      _TERN(_ENA_1(O),,* (A)) // OPTION ? '* (A)' : '<nul>'
+#define DIV_TERN1(O,A)      _TERN(_ENA_1(O),,/ (A)) // OPTION ? '/ (A)' : '<nul>'
 #define SUM_TERN(O,B,A)     ((B) PLUS_TERN0(O,A))   // ((B) (OPTION ? '+ (A)' : '<nul>'))
 #define DIFF_TERN(O,B,A)    ((B) MINUS_TERN0(O,A))  // ((B) (OPTION ? '- (A)' : '<nul>'))
+#define MUL_TERN(O,B,A)     ((B) MUL_TERN1(O,A))    // ((B) (OPTION ? '* (A)' : '<nul>'))
+#define DIV_TERN(O,B,A)     ((B) DIV_TERN1(O,A))    // ((B) (OPTION ? '/ (A)' : '<nul>'))
 
 // Macros to support pins/buttons exist testing
 #define PIN_EXISTS(PN)      (defined(PN##_PIN) && PN##_PIN >= 0)
 #define _PINEX_1            PIN_EXISTS
 #define PINS_EXIST(V...)    DO(PINEX,&&,V)
 #define ANY_PIN(V...)       DO(PINEX,||,V)
 
 #define BUTTON_EXISTS(BN)   (defined(BTN_##BN) && BTN_##BN >= 0)
 #define _BTNEX_1            BUTTON_EXISTS
 #define BUTTONS_EXIST(V...) DO(BTNEX,&&,V)

commit a7a3abb9bf04c0dd6edfadb4f1c3c80ed7dd627c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 12 09:21:00 2023 -0500

    üìù Macro comments

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index bb2bea2e30..bc0df357ca 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -171,109 +171,117 @@
 #define _DO_35(W,C,A,V...) (_##W##_1(A) C _DO_34(W,C,V))
 #define _DO_36(W,C,A,V...) (_##W##_1(A) C _DO_35(W,C,V))
 #define _DO_37(W,C,A,V...) (_##W##_1(A) C _DO_36(W,C,V))
 #define _DO_38(W,C,A,V...) (_##W##_1(A) C _DO_37(W,C,V))
 #define _DO_39(W,C,A,V...) (_##W##_1(A) C _DO_38(W,C,V))
 #define _DO_40(W,C,A,V...) (_##W##_1(A) C _DO_39(W,C,V))
 #define __DO_N(W,C,N,V...) _DO_##N(W,C,V)
 #define _DO_N(W,C,N,V...)  __DO_N(W,C,N,V)
 #define DO(W,C,V...)       (_DO_N(W,C,NUM_ARGS(V),V))
 
-// Macros to support option testing
+// Concatenate symbol names, without or with pre-expansion
 #define _CAT(a,V...) a##V
 #define CAT(a,V...) _CAT(a,V)
 
+// Recognize "true" values: blank, 1, 0x1, true
 #define _ISENA_     ~,1
 #define _ISENA_1    ~,1
 #define _ISENA_0x1  ~,1
 #define _ISENA_true ~,1
 #define _ISENA(V...)        IS_PROBE(V)
 
+// Macros to evaluate simple option switches
 #define _ENA_1(O)           _ISENA(CAT(_IS,CAT(ENA_, O)))
 #define _DIS_1(O)           NOT(_ENA_1(O))
 #define ENABLED(V...)       DO(ENA,&&,V)
 #define DISABLED(V...)      DO(DIS,&&,V)
 #define ANY(V...)          !DISABLED(V)
 #define ALL                 ENABLED
 #define NONE                DISABLED
 #define COUNT_ENABLED(V...) DO(ENA,+,V)
 #define MANY(V...)          (COUNT_ENABLED(V) > 1)
 
+// Ternary pre-compiler macros conceal non-emitted content from the compiler
 #define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION ? 'A' : 'B'
 #define TERN0(O,A)          _TERN(_ENA_1(O),0,A)    // OPTION ? 'A' : '0'
 #define TERN1(O,A)          _TERN(_ENA_1(O),1,A)    // OPTION ? 'A' : '1'
 #define TERN_(O,A)          _TERN(_ENA_1(O),,A)     // OPTION ? 'A' : '<nul>'
 #define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
 #define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
 #define ___TERN(P,V...)     THIRD(P,V)              // If first argument has a comma, A. Else B.
+#define IF_DISABLED(O,A)    TERN(O,,A)
 
+// Macros to conditionally emit array items and function arguments
 #define _OPTITEM(A...)      A,
 #define OPTITEM(O,A...)     TERN_(O,DEFER4(_OPTITEM)(A))
 #define _OPTARG(A...)       , A
 #define OPTARG(O,A...)      TERN_(O,DEFER4(_OPTARG)(A))
 #define _OPTCODE(A)         A;
 #define OPTCODE(O,A)        TERN_(O,DEFER4(_OPTCODE)(A))
 
 // Macros to avoid 'f + 0.0' which is not always optimized away. Minus included for symmetry.
 // Compiler flags -fno-signed-zeros -ffinite-math-only also cover 'f * 1.0', 'f - f', etc.
 #define PLUS_TERN0(O,A)     _TERN(_ENA_1(O),,+ (A)) // OPTION ? '+ (A)' : '<nul>'
 #define MINUS_TERN0(O,A)    _TERN(_ENA_1(O),,- (A)) // OPTION ? '- (A)' : '<nul>'
 #define SUM_TERN(O,B,A)     ((B) PLUS_TERN0(O,A))   // ((B) (OPTION ? '+ (A)' : '<nul>'))
 #define DIFF_TERN(O,B,A)    ((B) MINUS_TERN0(O,A))  // ((B) (OPTION ? '- (A)' : '<nul>'))
 
-#define IF_DISABLED(O,A)    TERN(O,,A)
-
 // Macros to support pins/buttons exist testing
 #define PIN_EXISTS(PN)      (defined(PN##_PIN) && PN##_PIN >= 0)
 #define _PINEX_1            PIN_EXISTS
 #define PINS_EXIST(V...)    DO(PINEX,&&,V)
 #define ANY_PIN(V...)       DO(PINEX,||,V)
 
 #define BUTTON_EXISTS(BN)   (defined(BTN_##BN) && BTN_##BN >= 0)
 #define _BTNEX_1            BUTTON_EXISTS
 #define BUTTONS_EXIST(V...) DO(BTNEX,&&,V)
 #define ANY_BUTTON(V...)    DO(BTNEX,||,V)
 
+// Value helper macros
 #define WITHIN(N,L,H)       ((N) >= (L) && (N) <= (H))
 #define ISEOL(C)            ((C) == '\n' || (C) == '\r')
 #define NUMERIC(a)          WITHIN(a, '0', '9')
 #define DECIMAL(a)          (NUMERIC(a) || a == '.')
 #define HEXCHR(a)           (NUMERIC(a) ? (a) - '0' : WITHIN(a, 'a', 'f') ? ((a) - 'a' + 10)  : WITHIN(a, 'A', 'F') ? ((a) - 'A' + 10) : -1)
 #define NUMERIC_SIGNED(a)   (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a)   (DECIMAL(a) || (a) == '-' || (a) == '+')
+
+// Array shorthand
 #define COUNT(a)            (sizeof(a)/sizeof(*a))
 #define ZERO(a)             memset((void*)a,0,sizeof(a))
 #define COPY(a,b) do{ \
     static_assert(sizeof(a[0]) == sizeof(b[0]), "COPY: '" STRINGIFY(a) "' and '" STRINGIFY(b) "' types (sizes) don't match!"); \
     memcpy(&a[0],&b[0],_MIN(sizeof(a),sizeof(b))); \
   }while(0)
 
+// Expansion of some code
 #define CODE_16( A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) A; B; C; D; E; F; G; H; I; J; K; L; M; N; O; P
 #define CODE_15( A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) A; B; C; D; E; F; G; H; I; J; K; L; M; N; O
 #define CODE_14( A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) A; B; C; D; E; F; G; H; I; J; K; L; M; N
 #define CODE_13( A,B,C,D,E,F,G,H,I,J,K,L,M,...) A; B; C; D; E; F; G; H; I; J; K; L; M
 #define CODE_12( A,B,C,D,E,F,G,H,I,J,K,L,...) A; B; C; D; E; F; G; H; I; J; K; L
 #define CODE_11( A,B,C,D,E,F,G,H,I,J,K,...) A; B; C; D; E; F; G; H; I; J; K
 #define CODE_10( A,B,C,D,E,F,G,H,I,J,...) A; B; C; D; E; F; G; H; I; J
 #define CODE_9( A,B,C,D,E,F,G,H,I,...) A; B; C; D; E; F; G; H; I
 #define CODE_8( A,B,C,D,E,F,G,H,...) A; B; C; D; E; F; G; H
 #define CODE_7( A,B,C,D,E,F,G,...) A; B; C; D; E; F; G
 #define CODE_6( A,B,C,D,E,F,...) A; B; C; D; E; F
 #define CODE_5( A,B,C,D,E,...) A; B; C; D; E
 #define CODE_4( A,B,C,D,...) A; B; C; D
 #define CODE_3( A,B,C,...) A; B; C
 #define CODE_2( A,B,...) A; B
 #define CODE_1( A,...) A
 #define CODE_0(...)
 #define _CODE_N(N,V...) CODE_##N(V)
 #define CODE_N(N,V...) _CODE_N(N,V)
 
+// Expansion of some non-delimited content
 #define GANG_16(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) A B C D E F G H I J K L M N O P
 #define GANG_15(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) A B C D E F G H I J K L M N O
 #define GANG_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) A B C D E F G H I J K L M N
 #define GANG_13(A,B,C,D,E,F,G,H,I,J,K,L,M...) A B C D E F G H I J K L M
 #define GANG_12(A,B,C,D,E,F,G,H,I,J,K,L...) A B C D E F G H I J K L
 #define GANG_11(A,B,C,D,E,F,G,H,I,J,K,...) A B C D E F G H I J K
 #define GANG_10(A,B,C,D,E,F,G,H,I,J,...) A B C D E F G H I J
 #define GANG_9( A,B,C,D,E,F,G,H,I,...) A B C D E F G H I
 #define GANG_8( A,B,C,D,E,F,G,H,...) A B C D E F G H
 #define GANG_7( A,B,C,D,E,F,G,...) A B C D E F G
@@ -281,21 +289,21 @@
 #define GANG_5( A,B,C,D,E,...) A B C D E
 #define GANG_4( A,B,C,D,...) A B C D
 #define GANG_3( A,B,C,...) A B C
 #define GANG_2( A,B,...) A B
 #define GANG_1( A,...) A
 #define GANG_0(...)
 #define _GANG_N(N,V...) GANG_##N(V)
 #define GANG_N(N,V...) _GANG_N(N,V)
 #define GANG_N_1(N,K) _GANG_N(N,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K)
 
-// Macros for initializing arrays
+// Expansion of some list items
 #define LIST_26(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z
 #define LIST_25(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y
 #define LIST_24(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X
 #define LIST_23(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W
 #define LIST_22(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V
 #define LIST_21(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U
 #define LIST_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T
 #define LIST_19(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S
 #define LIST_18(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R
 #define LIST_17(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q

commit a0e3dea8b879aba8e0d2d7e4dc6a6447b3fe76ad
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jul 20 20:25:39 2023 -0500

    üö∏ ColorUI Touch Calibrate in CW order

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index da17450c2b..bb2bea2e30 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -389,23 +389,23 @@
     }
 
   #endif
 
   // Allow manipulating enumeration value like flags without ugly cast everywhere
   #define ENUM_FLAGS(T) \
     FORCE_INLINE constexpr T operator&(T x, T y) { return static_cast<T>(static_cast<int>(x) & static_cast<int>(y)); } \
     FORCE_INLINE constexpr T operator|(T x, T y) { return static_cast<T>(static_cast<int>(x) | static_cast<int>(y)); } \
     FORCE_INLINE constexpr T operator^(T x, T y) { return static_cast<T>(static_cast<int>(x) ^ static_cast<int>(y)); } \
     FORCE_INLINE constexpr T operator~(T x)      { return static_cast<T>(~static_cast<int>(x)); } \
-    FORCE_INLINE T & operator&=(T &x, T y) { return x &= y; } \
-    FORCE_INLINE T & operator|=(T &x, T y) { return x |= y; } \
-    FORCE_INLINE T & operator^=(T &x, T y) { return x ^= y; }
+    FORCE_INLINE T & operator&=(T &x, T y) { x = x & y; return x; } \
+    FORCE_INLINE T & operator|=(T &x, T y) { x = x | y; return x; } \
+    FORCE_INLINE T & operator^=(T &x, T y) { x = x ^ y; return x; }
 
   // C++11 solution that is standard compliant. <type_traits> is not available on all platform
   namespace Private {
     template<bool, typename _Tp = void> struct enable_if { };
     template<typename _Tp>              struct enable_if<true, _Tp> { typedef _Tp type; };
 
     template<typename T, typename U> struct is_same { enum { value = false }; };
     template<typename T> struct is_same<T, T> { enum { value = true }; };
 
     template <typename T, typename ... Args> struct first_type_of { typedef T type; };

commit 179260878feb6fd575f8d341454e7c4a5add6c2e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jul 1 20:38:17 2023 -0500

    üé® Misc. fixes and formatting

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index e4b9d479c4..da17450c2b 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -368,20 +368,22 @@
 #define TWO_ARGS(V...) _TWO_ARGS(0,V,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,0)
 
 #ifdef __cplusplus
 
   #ifndef _MINMAX_H_
   #define _MINMAX_H_
 
     extern "C++" {
 
       // C++11 solution that is standards compliant. Return type is deduced automatically
+      template <class N> static constexpr N _MIN(const N val) { return val; }
+      template <class N> static constexpr N _MAX(const N val) { return val; }
       template <class L, class R> static constexpr auto _MIN(const L lhs, const R rhs) -> decltype(lhs + rhs) {
         return lhs < rhs ? lhs : rhs;
       }
       template <class L, class R> static constexpr auto _MAX(const L lhs, const R rhs) -> decltype(lhs + rhs) {
         return lhs > rhs ? lhs : rhs;
       }
       template<class T, class ... Ts> static constexpr const T _MIN(T V, Ts... Vs) { return _MIN(V, _MIN(Vs...)); }
       template<class T, class ... Ts> static constexpr const T _MAX(T V, Ts... Vs) { return _MAX(V, _MAX(Vs...)); }
 
     }

commit b77e2a5020714ad17fc12052093231ad4520ce14
Author: Christophe Huriaux <c.huriaux@gmail.com>
Date:   Sat Jul 1 06:06:08 2023 +0200

    ‚ú® Ender 3 S1 Pro/Plus stock touchscreen (#25905)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 565de2436c..e4b9d479c4 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -401,21 +401,55 @@
   // C++11 solution that is standard compliant. <type_traits> is not available on all platform
   namespace Private {
     template<bool, typename _Tp = void> struct enable_if { };
     template<typename _Tp>              struct enable_if<true, _Tp> { typedef _Tp type; };
 
     template<typename T, typename U> struct is_same { enum { value = false }; };
     template<typename T> struct is_same<T, T> { enum { value = true }; };
 
     template <typename T, typename ... Args> struct first_type_of { typedef T type; };
     template <typename T> struct first_type_of<T> { typedef T type; };
+
+    // remove const/volatile type qualifiers
+    template<typename T> struct remove_const { typedef T type; };
+    template<typename T> struct remove_const<T const> { typedef T type; };
+
+    template<typename T> struct remove_volatile { typedef T type; };
+    template<typename T> struct remove_volatile<T volatile> { typedef T type; };
+
+    template<typename T> struct remove_cv { typedef typename remove_const<typename remove_volatile<T>::type>::type type; };
+
+    // test if type is integral
+    template<typename>  struct _is_integral { enum { value = false }; };
+    template<>          struct _is_integral<unsigned char> { enum { value = true }; };
+    template<>          struct _is_integral<unsigned short> { enum { value = true }; };
+    template<>          struct _is_integral<unsigned int> { enum { value = true }; };
+    template<>          struct _is_integral<unsigned long> { enum { value = true }; };
+    template<>          struct _is_integral<unsigned long long> { enum { value = true }; };
+    template<>          struct _is_integral<char> { enum { value = true }; };
+    template<>          struct _is_integral<short> { enum { value = true }; };
+    template<>          struct _is_integral<int> { enum { value = true }; };
+    template<>          struct _is_integral<long> { enum { value = true }; };
+    template<>          struct _is_integral<long long> { enum { value = true }; };
+    template<typename T> struct is_integral : public _is_integral<typename remove_cv<T>::type> {};
   }
+
+  // enum type check and regression to its underlying integral.
+  namespace Private {
+    template<typename T> struct is_enum { enum { value = __is_enum(T) }; };
+
+    template<typename T, bool = is_enum<T>::value>  struct _underlying_type { using type = __underlying_type(T); };
+    template<typename T>                            struct _underlying_type<T, false> { };
+
+    template<typename T> struct underlying_type : public _underlying_type<T> { };
+  }
+
   // C++11 solution using SFINAE to detect the existence of a member in a class at compile time.
   // It creates a HasMember<Type> structure containing 'value' set to true if the member exists
   #define HAS_MEMBER_IMPL(Member) \
     namespace Private { \
       template <typename Type, typename Yes=char, typename No=long> struct HasMember_ ## Member { \
         template <typename C> static Yes& test( decltype(&C::Member) ) ; \
         template <typename C> static No& test(...); \
         enum { value = sizeof(test<Type>(0)) == sizeof(Yes) }; }; \
     }
 
@@ -705,12 +739,13 @@
 #define HAS_E_TEMP_SENSOR (0 REPEAT(EXTRUDERS, _HAS_E_TEMP))
 #define TEMP_SENSOR_IS_MAX_TC(T) (TEMP_SENSOR(T) == -5 || TEMP_SENSOR(T) == -3 || TEMP_SENSOR(T) == -2)
 
 #define _UI_NONE          0
 #define _UI_ORIGIN      101
 #define _UI_FYSETC      102
 #define _UI_HIPRECY     103
 #define _UI_MKS         104
 #define _UI_RELOADED    105
 #define _UI_IA_CREALITY 106
+#define _UI_E3S1PRO     107
 #define _DGUS_UI_IS(N) || (CAT(_UI_, DGUS_LCD_UI) == CAT(_UI_, N))
 #define DGUS_UI_IS(V...) (0 MAP(_DGUS_UI_IS, V))

commit 86c811660ebf0b3fcbae2f34273d4c9d0c22abc4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:30:34 2023 -0500

    üßë‚Äçüíª Remove LOOP macros (#25917)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index c44d60843a..565de2436c 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -319,25 +319,20 @@
 
 #define _LIST_N(N,V...) LIST_##N(V)
 #define LIST_N(N,V...) _LIST_N(N,V)
 #define LIST_N_1(N,K) _LIST_N(N,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K)
 #define ARRAY_N(N,V...) { _LIST_N(N,V) }
 #define ARRAY_N_1(N,K)  { LIST_N_1(N,K) }
 
 #define _JOIN_1(O)         (O)
 #define JOIN_N(N,C,V...)   (DO(JOIN,C,LIST_N(N,V)))
 
-#define LOOP_S_LE_N(VAR, S, N) for (uint8_t VAR=(S); VAR<=(N); VAR++)
-#define LOOP_S_L_N(VAR, S, N) for (uint8_t VAR=(S); VAR<(N); VAR++)
-#define LOOP_LE_N(VAR, N) LOOP_S_LE_N(VAR, 0, N)
-#define LOOP_L_N(VAR, N) LOOP_S_L_N(VAR, 0, N)
-
 #define NOOP (void(0))
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 #undef ABS
 #ifdef __cplusplus
   template <class T> static constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
 #else
   #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
 #endif

commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    üßë‚Äçüíª Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 7e20f83803..c44d60843a 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -185,21 +185,25 @@
 #define _ISENA_     ~,1
 #define _ISENA_1    ~,1
 #define _ISENA_0x1  ~,1
 #define _ISENA_true ~,1
 #define _ISENA(V...)        IS_PROBE(V)
 
 #define _ENA_1(O)           _ISENA(CAT(_IS,CAT(ENA_, O)))
 #define _DIS_1(O)           NOT(_ENA_1(O))
 #define ENABLED(V...)       DO(ENA,&&,V)
 #define DISABLED(V...)      DO(DIS,&&,V)
+#define ANY(V...)          !DISABLED(V)
+#define ALL                 ENABLED
+#define NONE                DISABLED
 #define COUNT_ENABLED(V...) DO(ENA,+,V)
+#define MANY(V...)          (COUNT_ENABLED(V) > 1)
 
 #define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION ? 'A' : 'B'
 #define TERN0(O,A)          _TERN(_ENA_1(O),0,A)    // OPTION ? 'A' : '0'
 #define TERN1(O,A)          _TERN(_ENA_1(O),1,A)    // OPTION ? 'A' : '1'
 #define TERN_(O,A)          _TERN(_ENA_1(O),,A)     // OPTION ? 'A' : '<nul>'
 #define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
 #define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
 #define ___TERN(P,V...)     THIRD(P,V)              // If first argument has a comma, A. Else B.
 
 #define _OPTITEM(A...)      A,
@@ -209,30 +213,22 @@
 #define _OPTCODE(A)         A;
 #define OPTCODE(O,A)        TERN_(O,DEFER4(_OPTCODE)(A))
 
 // Macros to avoid 'f + 0.0' which is not always optimized away. Minus included for symmetry.
 // Compiler flags -fno-signed-zeros -ffinite-math-only also cover 'f * 1.0', 'f - f', etc.
 #define PLUS_TERN0(O,A)     _TERN(_ENA_1(O),,+ (A)) // OPTION ? '+ (A)' : '<nul>'
 #define MINUS_TERN0(O,A)    _TERN(_ENA_1(O),,- (A)) // OPTION ? '- (A)' : '<nul>'
 #define SUM_TERN(O,B,A)     ((B) PLUS_TERN0(O,A))   // ((B) (OPTION ? '+ (A)' : '<nul>'))
 #define DIFF_TERN(O,B,A)    ((B) MINUS_TERN0(O,A))  // ((B) (OPTION ? '- (A)' : '<nul>'))
 
-#define IF_ENABLED          TERN_
 #define IF_DISABLED(O,A)    TERN(O,,A)
 
-#define ANY(V...)          !DISABLED(V)
-#define NONE(V...)          DISABLED(V)
-#define ALL(V...)           ENABLED(V)
-#define BOTH(V1,V2)         ALL(V1,V2)
-#define EITHER(V1,V2)       ANY(V1,V2)
-#define MANY(V...)          (COUNT_ENABLED(V) > 1)
-
 // Macros to support pins/buttons exist testing
 #define PIN_EXISTS(PN)      (defined(PN##_PIN) && PN##_PIN >= 0)
 #define _PINEX_1            PIN_EXISTS
 #define PINS_EXIST(V...)    DO(PINEX,&&,V)
 #define ANY_PIN(V...)       DO(PINEX,||,V)
 
 #define BUTTON_EXISTS(BN)   (defined(BTN_##BN) && BTN_##BN >= 0)
 #define _BTNEX_1            BUTTON_EXISTS
 #define BUTTONS_EXIST(V...) DO(BTNEX,&&,V)
 #define ANY_BUTTON(V...)    DO(BTNEX,||,V)

commit 467ab74523087a852ab50939d86a0ca0b78f17ad
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 26 14:56:23 2023 -0500

    üßë‚Äçüíª Simplify endstops config (#25748)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index fec390b64b..7e20f83803 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -26,65 +26,20 @@
 #endif
 
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 #define XY   2
 
 #define _AXIS(A) (A##_AXIS)
 
-#define _XSTOP_  0x01
-#define _YSTOP_  0x02
-#define _ZSTOP_  0x03
-#define _ISTOP_  0x04
-#define _JSTOP_  0x05
-#define _KSTOP_  0x06
-#define _USTOP_  0x07
-#define _VSTOP_  0x08
-#define _WSTOP_  0x09
-#define _XMIN_   0x11
-#define _YMIN_   0x12
-#define _ZMIN_   0x13
-#define _IMIN_   0x14
-#define _JMIN_   0x15
-#define _KMIN_   0x16
-#define _UMIN_   0x17
-#define _VMIN_   0x18
-#define _WMIN_   0x19
-#define _XMAX_   0x21
-#define _YMAX_   0x22
-#define _ZMAX_   0x23
-#define _IMAX_   0x24
-#define _JMAX_   0x25
-#define _KMAX_   0x26
-#define _UMAX_   0x27
-#define _VMAX_   0x28
-#define _WMAX_   0x29
-#define _XDIAG_  0x31
-#define _YDIAG_  0x32
-#define _ZDIAG_  0x33
-#define _IDIAG_  0x34
-#define _JDIAG_  0x35
-#define _KDIAG_  0x36
-#define _UDIAG_  0x37
-#define _VDIAG_  0x38
-#define _WDIAG_  0x39
-#define _E0DIAG_ 0xE0
-#define _E1DIAG_ 0xE1
-#define _E2DIAG_ 0xE2
-#define _E3DIAG_ 0xE3
-#define _E4DIAG_ 0xE4
-#define _E5DIAG_ 0xE5
-#define _E6DIAG_ 0xE6
-#define _E7DIAG_ 0xE7
-
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define NO_INLINE      __attribute__((noinline))
 #define _UNUSED      __attribute__((unused))
 #define __O0         __attribute__((optimize("O0")))
 #define __Os         __attribute__((optimize("Os")))
 #define __O1         __attribute__((optimize("O1")))
 #define __O2         __attribute__((optimize("O2")))
 #define __O3         __attribute__((optimize("O3")))
 

commit df44424388ee5b2105270ad7086c37f84263dc5a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Feb 21 15:08:25 2023 -0600

    üßë‚Äçüíª Fix preheat tests (nested macro limit ~256)
    
    Followup to #25407

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 65fba21094..fec390b64b 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -627,21 +627,23 @@
 #define THIRD(a,b,c,...) c
 
 // Defer expansion
 #define EMPTY()
 #define DEFER(M)  M EMPTY()
 #define DEFER2(M) M EMPTY EMPTY()()
 #define DEFER3(M) M EMPTY EMPTY EMPTY()()()
 #define DEFER4(M) M EMPTY EMPTY EMPTY EMPTY()()()()
 
 // Force define expansion
-#define EVAL(V...)     EVAL16(V)
+#define EVAL           EVAL16
+#define EVAL4096(V...) EVAL2048(EVAL2048(V))
+#define EVAL2048(V...) EVAL1024(EVAL1024(V))
 #define EVAL1024(V...) EVAL512(EVAL512(V))
 #define EVAL512(V...)  EVAL256(EVAL256(V))
 #define EVAL256(V...)  EVAL128(EVAL128(V))
 #define EVAL128(V...)  EVAL64(EVAL64(V))
 #define EVAL64(V...)   EVAL32(EVAL32(V))
 #define EVAL32(V...)   EVAL16(EVAL16(V))
 #define EVAL16(V...)   EVAL8(EVAL8(V))
 #define EVAL8(V...)    EVAL4(EVAL4(V))
 #define EVAL4(V...)    EVAL2(EVAL2(V))
 #define EVAL2(V...)    EVAL1(EVAL1(V))

commit 03a43786703d84f1b8c6374755b2764aeb9e04eb
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Tue Feb 21 15:25:22 2023 +1300

    üîß Sanity-check hotend max / preheat temps (#25407)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 9a014d5d92..65fba21094 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -705,24 +705,25 @@
   IF_ELSE(SUB1(_RPT_N))                                           \
     ( DEFER2(__RREPEAT)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP) )    \
     ( /* Do nothing */ )
 #define __RREPEAT() _RREPEAT
 #define _RREPEAT2(_RPT_I,_RPT_N,_RPT_OP,V...)                     \
   _RPT_OP(_RPT_I,V)                                               \
   IF_ELSE(SUB1(_RPT_N))                                           \
     ( DEFER2(__RREPEAT2)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP,V) ) \
     ( /* Do nothing */ )
 #define __RREPEAT2() _RREPEAT2
-#define RREPEAT_S(S,N,OP)        EVAL1024(_RREPEAT(S,SUB##S(N),OP))
-#define RREPEAT(N,OP)            RREPEAT_S(0,N,OP)
-#define RREPEAT2_S(S,N,OP,V...)  EVAL1024(_RREPEAT2(S,SUB##S(N),OP,V))
-#define RREPEAT2(N,OP,V...)      RREPEAT2_S(0,N,OP,V)
+#define RREPEAT_S(S,N,OP)       EVAL1024(_RREPEAT(S,SUB##S(N),OP))
+#define RREPEAT(N,OP)           RREPEAT_S(0,N,OP)
+#define RREPEAT_1(N,OP)         RREPEAT_S(1,INCREMENT(N),OP)
+#define RREPEAT2_S(S,N,OP,V...) EVAL1024(_RREPEAT2(S,SUB##S(N),OP,V))
+#define RREPEAT2(N,OP,V...)     RREPEAT2_S(0,N,OP,V)
 
 // Emit a list of N OP(I) items with ascending counter.
 #define _REPLIST(_RPT_I,_RPT_N,_RPT_OP)                          \
   _RPT_OP(_RPT_I)                                                \
   IF_ELSE(SUB1(_RPT_N))                                          \
     ( , DEFER2(__REPLIST)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP) ) \
     ( /* Do nothing */ )
 #define __REPLIST() _REPLIST
 
 // Repeat a macro, comma-separated, passing S...N-1.

commit 0f745468a17c3e6130e3830fcb3210703ebaacee
Author: lukasradek <lukasradek@users.noreply.github.com>
Date:   Tue Feb 21 01:57:15 2023 +0100

    üîß Up to 9 tramming points (#25293)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index c20cd17a7e..9a014d5d92 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -710,20 +710,33 @@
   _RPT_OP(_RPT_I,V)                                               \
   IF_ELSE(SUB1(_RPT_N))                                           \
     ( DEFER2(__RREPEAT2)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP,V) ) \
     ( /* Do nothing */ )
 #define __RREPEAT2() _RREPEAT2
 #define RREPEAT_S(S,N,OP)        EVAL1024(_RREPEAT(S,SUB##S(N),OP))
 #define RREPEAT(N,OP)            RREPEAT_S(0,N,OP)
 #define RREPEAT2_S(S,N,OP,V...)  EVAL1024(_RREPEAT2(S,SUB##S(N),OP,V))
 #define RREPEAT2(N,OP,V...)      RREPEAT2_S(0,N,OP,V)
 
+// Emit a list of N OP(I) items with ascending counter.
+#define _REPLIST(_RPT_I,_RPT_N,_RPT_OP)                          \
+  _RPT_OP(_RPT_I)                                                \
+  IF_ELSE(SUB1(_RPT_N))                                          \
+    ( , DEFER2(__REPLIST)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP) ) \
+    ( /* Do nothing */ )
+#define __REPLIST() _REPLIST
+
+// Repeat a macro, comma-separated, passing S...N-1.
+#define REPLIST_S(S,N,OP)       EVAL(_REPLIST(S,SUB##S(N),OP))
+#define REPLIST(N,OP)           REPLIST_S(0,N,OP)
+#define REPLIST_1(N,OP)         REPLIST_S(1,INCREMENT(N),OP)
+
 // Call OP(A) with each item as an argument
 #define _MAP(_MAP_OP,A,V...)       \
   _MAP_OP(A)                       \
   IF_ELSE(HAS_ARGS(V))             \
     ( DEFER2(__MAP)()(_MAP_OP,V) ) \
     ( /* Do nothing */ )
 #define __MAP() _MAP
 
 #define MAP(OP,V...) EVAL(_MAP(OP,V))
 

commit 42cfa4f48fe274710eac29c0436cb73b8d240468
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 1 23:03:22 2023 -0600

    ‚ú® DGUS_LCD_UI followup
    
    Followup to #25143 fixing _DGUS_UI_IS

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index ca736ba9a9..c20cd17a7e 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -743,12 +743,12 @@
 #define HAS_E_TEMP_SENSOR (0 REPEAT(EXTRUDERS, _HAS_E_TEMP))
 #define TEMP_SENSOR_IS_MAX_TC(T) (TEMP_SENSOR(T) == -5 || TEMP_SENSOR(T) == -3 || TEMP_SENSOR(T) == -2)
 
 #define _UI_NONE          0
 #define _UI_ORIGIN      101
 #define _UI_FYSETC      102
 #define _UI_HIPRECY     103
 #define _UI_MKS         104
 #define _UI_RELOADED    105
 #define _UI_IA_CREALITY 106
-#define _DGUS_UI_IS(N) || (DGUS_LCD_UI == _UI_ ## N)
+#define _DGUS_UI_IS(N) || (CAT(_UI_, DGUS_LCD_UI) == CAT(_UI_, N))
 #define DGUS_UI_IS(V...) (0 MAP(_DGUS_UI_IS, V))

commit 32e8627510498da3a88d9e198f7c17a6a2ad8a66
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sun Jan 1 15:38:13 2023 +1300

    ‚ú® New DGUS_LCD_UI option, IA_CREALITY (#25143)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 3029009c06..ca736ba9a9 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -735,10 +735,20 @@
     ( /* Do nothing */ )
 #define __MAPLIST() _MAPLIST
 
 #define MAPLIST(OP,V...) EVAL(_MAPLIST(OP,V))
 
 // Temperature Sensor Config
 #define TEMP_SENSOR(N) TEMP_SENSOR_##N
 #define _HAS_E_TEMP(N) || TEMP_SENSOR(N)
 #define HAS_E_TEMP_SENSOR (0 REPEAT(EXTRUDERS, _HAS_E_TEMP))
 #define TEMP_SENSOR_IS_MAX_TC(T) (TEMP_SENSOR(T) == -5 || TEMP_SENSOR(T) == -3 || TEMP_SENSOR(T) == -2)
+
+#define _UI_NONE          0
+#define _UI_ORIGIN      101
+#define _UI_FYSETC      102
+#define _UI_HIPRECY     103
+#define _UI_MKS         104
+#define _UI_RELOADED    105
+#define _UI_IA_CREALITY 106
+#define _DGUS_UI_IS(N) || (DGUS_LCD_UI == _UI_ ## N)
+#define DGUS_UI_IS(V...) (0 MAP(_DGUS_UI_IS, V))

commit 11f82445738ae885668f29c9fa7feb4c47e673ca
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Sat Oct 1 09:19:51 2022 -0700

    üîß Thermistor (66) sanity-check (#24803)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index cfeb9db33c..3029009c06 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -731,13 +731,14 @@
 #define _MAPLIST(_MAP_OP,A,V...)         \
   _MAP_OP(A)                             \
   IF_ELSE(HAS_ARGS(V))                   \
     ( , DEFER2(__MAPLIST)()(_MAP_OP,V) ) \
     ( /* Do nothing */ )
 #define __MAPLIST() _MAPLIST
 
 #define MAPLIST(OP,V...) EVAL(_MAPLIST(OP,V))
 
 // Temperature Sensor Config
-#define _HAS_E_TEMP(N) || (TEMP_SENSOR_##N != 0)
+#define TEMP_SENSOR(N) TEMP_SENSOR_##N
+#define _HAS_E_TEMP(N) || TEMP_SENSOR(N)
 #define HAS_E_TEMP_SENSOR (0 REPEAT(EXTRUDERS, _HAS_E_TEMP))
-#define TEMP_SENSOR_IS_MAX_TC(T) (TEMP_SENSOR_##T == -5 || TEMP_SENSOR_##T == -3 || TEMP_SENSOR_##T == -2)
+#define TEMP_SENSOR_IS_MAX_TC(T) (TEMP_SENSOR(T) == -5 || TEMP_SENSOR(T) == -3 || TEMP_SENSOR(T) == -2)

commit 038042b09eb4521bef5b9ffee42f3f75182f7ad2
Author: Yuri D'Elia <wavexx@users.noreply.github.com>
Date:   Thu Sep 22 18:54:26 2022 +0200

    üë∑ Array macros to ‚Ä¶26 elements (#24789)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 8dfcb875ac..cfeb9db33c 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -331,20 +331,26 @@
 #define GANG_4( A,B,C,D,...) A B C D
 #define GANG_3( A,B,C,...) A B C
 #define GANG_2( A,B,...) A B
 #define GANG_1( A,...) A
 #define GANG_0(...)
 #define _GANG_N(N,V...) GANG_##N(V)
 #define GANG_N(N,V...) _GANG_N(N,V)
 #define GANG_N_1(N,K) _GANG_N(N,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K)
 
 // Macros for initializing arrays
+#define LIST_26(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z
+#define LIST_25(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y
+#define LIST_24(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X
+#define LIST_23(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W
+#define LIST_22(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V
+#define LIST_21(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U
 #define LIST_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T
 #define LIST_19(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S
 #define LIST_18(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R
 #define LIST_17(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q
 #define LIST_16(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P
 #define LIST_15(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O
 #define LIST_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N
 #define LIST_13(A,B,C,D,E,F,G,H,I,J,K,L,M,...) A,B,C,D,E,F,G,H,I,J,K,L,M
 #define LIST_12(A,B,C,D,E,F,G,H,I,J,K,L,...) A,B,C,D,E,F,G,H,I,J,K,L
 #define LIST_11(A,B,C,D,E,F,G,H,I,J,K,...) A,B,C,D,E,F,G,H,I,J,K

commit 34f3e5bd88246516a1779c194c2996bcf845a499
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Aug 20 06:41:00 2022 -0500

    üé® Some automated cleanup

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index ddcf27b2b8..8dfcb875ac 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -14,21 +14,21 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
-#if !defined(__has_include)
+#ifndef __has_include
   #define __has_include(...) 1
 #endif
 
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 #define XY   2
 
 #define _AXIS(A) (A##_AXIS)

commit 1bed10c38075a15bfec380c9c7763fea336e787e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Aug 4 02:38:15 2022 -0500

    üîß Config INI, dump options (#24528)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 09a6164568..ddcf27b2b8 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -723,10 +723,15 @@
 
 // Emit a list of OP(A) with the given items
 #define _MAPLIST(_MAP_OP,A,V...)         \
   _MAP_OP(A)                             \
   IF_ELSE(HAS_ARGS(V))                   \
     ( , DEFER2(__MAPLIST)()(_MAP_OP,V) ) \
     ( /* Do nothing */ )
 #define __MAPLIST() _MAPLIST
 
 #define MAPLIST(OP,V...) EVAL(_MAPLIST(OP,V))
+
+// Temperature Sensor Config
+#define _HAS_E_TEMP(N) || (TEMP_SENSOR_##N != 0)
+#define HAS_E_TEMP_SENSOR (0 REPEAT(EXTRUDERS, _HAS_E_TEMP))
+#define TEMP_SENSOR_IS_MAX_TC(T) (TEMP_SENSOR_##T == -5 || TEMP_SENSOR_##T == -3 || TEMP_SENSOR_##T == -2)

commit 6cbd7a48d16789fd73ab6ebe4be00bc2beff5591
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jun 20 21:15:57 2022 -0500

    üé® Fix comments, formatting

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index b7d1ac916e..09a6164568 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -637,36 +637,35 @@
 #define EVAL32(V...)   EVAL16(EVAL16(V))
 #define EVAL16(V...)   EVAL8(EVAL8(V))
 #define EVAL8(V...)    EVAL4(EVAL4(V))
 #define EVAL4(V...)    EVAL2(EVAL2(V))
 #define EVAL2(V...)    EVAL1(EVAL1(V))
 #define EVAL1(V...)    V
 
 #define IS_PROBE(V...) SECOND(V, 0)     // Get the second item passed, or 0
 #define PROBE() ~, 1                    // Second item will be 1 if this is passed
 #define _NOT_0 PROBE()
-#define NOT(x) IS_PROBE(_CAT(_NOT_, x)) // NOT('0') gets '1'. Anything else gets '0'.
-#define _BOOL(x) NOT(NOT(x))            // NOT('0') gets '0'. Anything else gets '1'.
+#define NOT(x) IS_PROBE(_CAT(_NOT_, x)) //   NOT('0') gets '1'. Anything else gets '0'.
+#define _BOOL(x) NOT(NOT(x))            // _BOOL('0') gets '0'. Anything else gets '1'.
 
 #define IF_ELSE(TF) _IF_ELSE(_BOOL(TF))
 #define _IF_ELSE(TF) _CAT(_IF_, TF)
 
 #define _IF_1(V...) V _IF_1_ELSE
 #define _IF_0(...)    _IF_0_ELSE
 
 #define _IF_1_ELSE(...)
 #define _IF_0_ELSE(V...) V
 
 #define HAS_ARGS(V...) _BOOL(FIRST(_END_OF_ARGUMENTS_ V)())
 #define _END_OF_ARGUMENTS_() 0
 
-
 // Simple Inline IF Macros, friendly to use in other macro definitions
 #define IF(O, A, B) ((O) ? (A) : (B))
 #define IF_0(O, A) IF(O, A, 0)
 #define IF_1(O, A) IF(O, A, 1)
 
 //
 // REPEAT core macros. Recurse N times with ascending I.
 //
 
 // Call OP(I) N times with ascending counter.

commit c5126de559719ebdaf4475b0db4ab21c26b90a1a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 22 16:08:29 2022 -0500

    üßë‚Äçüíª MAP macro for axis lists, etc. (#24191)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index c12386b46b..b7d1ac916e 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -705,20 +705,29 @@
   _RPT_OP(_RPT_I,V)                                               \
   IF_ELSE(SUB1(_RPT_N))                                           \
     ( DEFER2(__RREPEAT2)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP,V) ) \
     ( /* Do nothing */ )
 #define __RREPEAT2() _RREPEAT2
 #define RREPEAT_S(S,N,OP)        EVAL1024(_RREPEAT(S,SUB##S(N),OP))
 #define RREPEAT(N,OP)            RREPEAT_S(0,N,OP)
 #define RREPEAT2_S(S,N,OP,V...)  EVAL1024(_RREPEAT2(S,SUB##S(N),OP,V))
 #define RREPEAT2(N,OP,V...)      RREPEAT2_S(0,N,OP,V)
 
-// See https://github.com/swansontec/map-macro
-#define MAP_OUT
-#define MAP_END(...)
-#define MAP_GET_END() 0, MAP_END
-#define MAP_NEXT0(test, next, ...) next MAP_OUT
-#define MAP_NEXT1(test, next) MAP_NEXT0 (test, next, 0)
-#define MAP_NEXT(test, next)  MAP_NEXT1 (MAP_GET_END test, next)
-#define MAP0(f, x, peek, ...) f(x) MAP_NEXT (peek, MAP1) (f, peek, __VA_ARGS__)
-#define MAP1(f, x, peek, ...) f(x) MAP_NEXT (peek, MAP0) (f, peek, __VA_ARGS__)
-#define MAP(f, ...) EVAL512 (MAP1 (f, __VA_ARGS__, (), 0))
+// Call OP(A) with each item as an argument
+#define _MAP(_MAP_OP,A,V...)       \
+  _MAP_OP(A)                       \
+  IF_ELSE(HAS_ARGS(V))             \
+    ( DEFER2(__MAP)()(_MAP_OP,V) ) \
+    ( /* Do nothing */ )
+#define __MAP() _MAP
+
+#define MAP(OP,V...) EVAL(_MAP(OP,V))
+
+// Emit a list of OP(A) with the given items
+#define _MAPLIST(_MAP_OP,A,V...)         \
+  _MAP_OP(A)                             \
+  IF_ELSE(HAS_ARGS(V))                   \
+    ( , DEFER2(__MAPLIST)()(_MAP_OP,V) ) \
+    ( /* Do nothing */ )
+#define __MAPLIST() _MAPLIST
+
+#define MAPLIST(OP,V...) EVAL(_MAPLIST(OP,V))

commit 79789571bc6141e8889e6aa062a8103a6892e680
Author: Oliver Jean Eifler <olli.eifler@gmail.com>
Date:   Tue May 17 06:23:03 2022 +0200

    ü©π Suppress ZERO() warning (#24178)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index c24b4a1a9c..c12386b46b 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -283,21 +283,21 @@
 #define ANY_BUTTON(V...)    DO(BTNEX,||,V)
 
 #define WITHIN(N,L,H)       ((N) >= (L) && (N) <= (H))
 #define ISEOL(C)            ((C) == '\n' || (C) == '\r')
 #define NUMERIC(a)          WITHIN(a, '0', '9')
 #define DECIMAL(a)          (NUMERIC(a) || a == '.')
 #define HEXCHR(a)           (NUMERIC(a) ? (a) - '0' : WITHIN(a, 'a', 'f') ? ((a) - 'a' + 10)  : WITHIN(a, 'A', 'F') ? ((a) - 'A' + 10) : -1)
 #define NUMERIC_SIGNED(a)   (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a)   (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a)            (sizeof(a)/sizeof(*a))
-#define ZERO(a)             memset(a,0,sizeof(a))
+#define ZERO(a)             memset((void*)a,0,sizeof(a))
 #define COPY(a,b) do{ \
     static_assert(sizeof(a[0]) == sizeof(b[0]), "COPY: '" STRINGIFY(a) "' and '" STRINGIFY(b) "' types (sizes) don't match!"); \
     memcpy(&a[0],&b[0],_MIN(sizeof(a),sizeof(b))); \
   }while(0)
 
 #define CODE_16( A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) A; B; C; D; E; F; G; H; I; J; K; L; M; N; O; P
 #define CODE_15( A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) A; B; C; D; E; F; G; H; I; J; K; L; M; N; O
 #define CODE_14( A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) A; B; C; D; E; F; G; H; I; J; K; L; M; N
 #define CODE_13( A,B,C,D,E,F,G,H,I,J,K,L,M,...) A; B; C; D; E; F; G; H; I; J; K; L; M
 #define CODE_12( A,B,C,D,E,F,G,H,I,J,K,L,...) A; B; C; D; E; F; G; H; I; J; K; L

commit 659b4172aa49d82e54a08b5ed674b3ba4ad51fb0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu May 5 18:55:43 2022 -0500

    üî® Prevent build attribute define conflicts

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 629486d85f..c24b4a1a9c 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -75,25 +75,25 @@
 #define _E3DIAG_ 0xE3
 #define _E4DIAG_ 0xE4
 #define _E5DIAG_ 0xE5
 #define _E6DIAG_ 0xE6
 #define _E7DIAG_ 0xE7
 
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define NO_INLINE      __attribute__((noinline))
 #define _UNUSED      __attribute__((unused))
-#define _O0          __attribute__((optimize("O0")))
-#define _Os          __attribute__((optimize("Os")))
-#define _O1          __attribute__((optimize("O1")))
-#define _O2          __attribute__((optimize("O2")))
-#define _O3          __attribute__((optimize("O3")))
+#define __O0         __attribute__((optimize("O0")))
+#define __Os         __attribute__((optimize("Os")))
+#define __O1         __attribute__((optimize("O1")))
+#define __O2         __attribute__((optimize("O2")))
+#define __O3         __attribute__((optimize("O3")))
 
 #define IS_CONSTEXPR(...) __builtin_constant_p(__VA_ARGS__) // Only valid solution with C++14. Should use std::is_constant_evaluated() in C++20 instead
 
 #ifndef UNUSED
   #define UNUSED(x) ((void)(x))
 #endif
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 31808586cf..629486d85f 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -32,38 +32,50 @@
 #define XY   2
 
 #define _AXIS(A) (A##_AXIS)
 
 #define _XSTOP_  0x01
 #define _YSTOP_  0x02
 #define _ZSTOP_  0x03
 #define _ISTOP_  0x04
 #define _JSTOP_  0x05
 #define _KSTOP_  0x06
+#define _USTOP_  0x07
+#define _VSTOP_  0x08
+#define _WSTOP_  0x09
 #define _XMIN_   0x11
 #define _YMIN_   0x12
 #define _ZMIN_   0x13
 #define _IMIN_   0x14
 #define _JMIN_   0x15
 #define _KMIN_   0x16
+#define _UMIN_   0x17
+#define _VMIN_   0x18
+#define _WMIN_   0x19
 #define _XMAX_   0x21
 #define _YMAX_   0x22
 #define _ZMAX_   0x23
 #define _IMAX_   0x24
 #define _JMAX_   0x25
 #define _KMAX_   0x26
+#define _UMAX_   0x27
+#define _VMAX_   0x28
+#define _WMAX_   0x29
 #define _XDIAG_  0x31
 #define _YDIAG_  0x32
 #define _ZDIAG_  0x33
 #define _IDIAG_  0x34
 #define _JDIAG_  0x35
 #define _KDIAG_  0x36
+#define _UDIAG_  0x37
+#define _VDIAG_  0x38
+#define _WDIAG_  0x39
 #define _E0DIAG_ 0xE0
 #define _E1DIAG_ 0xE1
 #define _E2DIAG_ 0xE2
 #define _E3DIAG_ 0xE3
 #define _E4DIAG_ 0xE4
 #define _E5DIAG_ 0xE5
 #define _E6DIAG_ 0xE6
 #define _E7DIAG_ 0xE7
 
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
@@ -343,21 +355,21 @@
 #define LIST_6( A,B,C,D,E,F,...) A,B,C,D,E,F
 #define LIST_5( A,B,C,D,E,...) A,B,C,D,E
 #define LIST_4( A,B,C,D,...) A,B,C,D
 #define LIST_3( A,B,C,...) A,B,C
 #define LIST_2( A,B,...) A,B
 #define LIST_1( A,...) A
 #define LIST_0(...)
 
 #define _LIST_N(N,V...) LIST_##N(V)
 #define LIST_N(N,V...) _LIST_N(N,V)
-#define LIST_N_1(N,K) _LIST_N(N,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K)
+#define LIST_N_1(N,K) _LIST_N(N,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K)
 #define ARRAY_N(N,V...) { _LIST_N(N,V) }
 #define ARRAY_N_1(N,K)  { LIST_N_1(N,K) }
 
 #define _JOIN_1(O)         (O)
 #define JOIN_N(N,C,V...)   (DO(JOIN,C,LIST_N(N,V)))
 
 #define LOOP_S_LE_N(VAR, S, N) for (uint8_t VAR=(S); VAR<=(N); VAR++)
 #define LOOP_S_L_N(VAR, S, N) for (uint8_t VAR=(S); VAR<(N); VAR++)
 #define LOOP_LE_N(VAR, N) LOOP_S_LE_N(VAR, 0, N)
 #define LOOP_L_N(VAR, N) LOOP_S_L_N(VAR, 0, N)

commit 9285b6b9edcb42d38736a08785371204aea56501
Author: zerkix <97692157+zerkix@users.noreply.github.com>
Date:   Mon Jan 17 07:05:31 2022 +0100

    üêõ Finish and organize temp sensors (#23519)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 34fc3bc410..31808586cf 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -228,20 +228,22 @@
 #define COUNT_ENABLED(V...) DO(ENA,+,V)
 
 #define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION ? 'A' : 'B'
 #define TERN0(O,A)          _TERN(_ENA_1(O),0,A)    // OPTION ? 'A' : '0'
 #define TERN1(O,A)          _TERN(_ENA_1(O),1,A)    // OPTION ? 'A' : '1'
 #define TERN_(O,A)          _TERN(_ENA_1(O),,A)     // OPTION ? 'A' : '<nul>'
 #define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
 #define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
 #define ___TERN(P,V...)     THIRD(P,V)              // If first argument has a comma, A. Else B.
 
+#define _OPTITEM(A...)      A,
+#define OPTITEM(O,A...)     TERN_(O,DEFER4(_OPTITEM)(A))
 #define _OPTARG(A...)       , A
 #define OPTARG(O,A...)      TERN_(O,DEFER4(_OPTARG)(A))
 #define _OPTCODE(A)         A;
 #define OPTCODE(O,A)        TERN_(O,DEFER4(_OPTCODE)(A))
 
 // Macros to avoid 'f + 0.0' which is not always optimized away. Minus included for symmetry.
 // Compiler flags -fno-signed-zeros -ffinite-math-only also cover 'f * 1.0', 'f - f', etc.
 #define PLUS_TERN0(O,A)     _TERN(_ENA_1(O),,+ (A)) // OPTION ? '+ (A)' : '<nul>'
 #define MINUS_TERN0(O,A)    _TERN(_ENA_1(O),,- (A)) // OPTION ? '- (A)' : '<nul>'
 #define SUM_TERN(O,B,A)     ((B) PLUS_TERN0(O,A))   // ((B) (OPTION ? '+ (A)' : '<nul>'))

commit 6fb2d8a25f096d084348a6f6930f515d947474d4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Dec 28 02:57:24 2021 -0600

    üßë‚Äçüíª Remove extraneous 'inline' hints

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 62675d1319..34fc3bc410 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -124,27 +124,27 @@
 #define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ({__typeof__(a) _a = (a); (_a>0)-(_a<0);})
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
 // Macros to constrain values
 #ifdef __cplusplus
 
   // C++11 solution that is standards compliant.
-  template <class V, class N> static inline constexpr void NOLESS(V& v, const N n) {
+  template <class V, class N> static constexpr void NOLESS(V& v, const N n) {
     if (n > v) v = n;
   }
-  template <class V, class N> static inline constexpr void NOMORE(V& v, const N n) {
+  template <class V, class N> static constexpr void NOMORE(V& v, const N n) {
     if (n < v) v = n;
   }
-  template <class V, class N1, class N2> static inline constexpr void LIMIT(V& v, const N1 n1, const N2 n2) {
+  template <class V, class N1, class N2> static constexpr void LIMIT(V& v, const N1 n1, const N2 n2) {
     if (n1 > v) v = n1;
     else if (n2 < v) v = n2;
   }
 
 #else
 
   #define NOLESS(v, n) \
     do{ \
       __typeof__(v) _n = (n); \
       if (_n > v) v = _n; \
@@ -359,21 +359,21 @@
 #define LOOP_S_L_N(VAR, S, N) for (uint8_t VAR=(S); VAR<(N); VAR++)
 #define LOOP_LE_N(VAR, N) LOOP_S_LE_N(VAR, 0, N)
 #define LOOP_L_N(VAR, N) LOOP_S_L_N(VAR, 0, N)
 
 #define NOOP (void(0))
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 #undef ABS
 #ifdef __cplusplus
-  template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
+  template <class T> static constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
 #else
   #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
 #endif
 
 #define UNEAR_ZERO(x) ((x) < 0.000001f)
 #define NEAR_ZERO(x) WITHIN(x, -0.000001f, 0.000001f)
 #define NEAR(x,y) NEAR_ZERO((x)-(y))
 
 #define RECIPROCAL(x) (NEAR_ZERO(x) ? 0 : (1 / float(x)))
 #define FIXFLOAT(f)  ({__typeof__(f) _f = (f); _f + (_f < 0 ? -0.0000005f : 0.0000005f);})
@@ -402,28 +402,28 @@
 #define TWO_ARGS(V...) _TWO_ARGS(0,V,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,0)
 
 #ifdef __cplusplus
 
   #ifndef _MINMAX_H_
   #define _MINMAX_H_
 
     extern "C++" {
 
       // C++11 solution that is standards compliant. Return type is deduced automatically
-      template <class L, class R> static inline constexpr auto _MIN(const L lhs, const R rhs) -> decltype(lhs + rhs) {
+      template <class L, class R> static constexpr auto _MIN(const L lhs, const R rhs) -> decltype(lhs + rhs) {
         return lhs < rhs ? lhs : rhs;
       }
-      template <class L, class R> static inline constexpr auto _MAX(const L lhs, const R rhs) -> decltype(lhs + rhs) {
+      template <class L, class R> static constexpr auto _MAX(const L lhs, const R rhs) -> decltype(lhs + rhs) {
         return lhs > rhs ? lhs : rhs;
       }
-      template<class T, class ... Ts> static inline constexpr const T _MIN(T V, Ts... Vs) { return _MIN(V, _MIN(Vs...)); }
-      template<class T, class ... Ts> static inline constexpr const T _MAX(T V, Ts... Vs) { return _MAX(V, _MAX(Vs...)); }
+      template<class T, class ... Ts> static constexpr const T _MIN(T V, Ts... Vs) { return _MIN(V, _MIN(Vs...)); }
+      template<class T, class ... Ts> static constexpr const T _MAX(T V, Ts... Vs) { return _MAX(V, _MAX(Vs...)); }
 
     }
 
   #endif
 
   // Allow manipulating enumeration value like flags without ugly cast everywhere
   #define ENUM_FLAGS(T) \
     FORCE_INLINE constexpr T operator&(T x, T y) { return static_cast<T>(static_cast<int>(x) & static_cast<int>(y)); } \
     FORCE_INLINE constexpr T operator|(T x, T y) { return static_cast<T>(static_cast<int>(x) | static_cast<int>(y)); } \
     FORCE_INLINE constexpr T operator^(T x, T y) { return static_cast<T>(static_cast<int>(x) ^ static_cast<int>(y)); } \

commit 399faa91b99dab0f8565396efd32f277965c93b2
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Thu Nov 4 14:04:06 2021 +1300

    üìå 'STOP' auto-assign, some Chitu V9 pins (#22889)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index d8a15b910d..62675d1319 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -26,20 +26,26 @@
 #endif
 
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 #define XY   2
 
 #define _AXIS(A) (A##_AXIS)
 
+#define _XSTOP_  0x01
+#define _YSTOP_  0x02
+#define _ZSTOP_  0x03
+#define _ISTOP_  0x04
+#define _JSTOP_  0x05
+#define _KSTOP_  0x06
 #define _XMIN_   0x11
 #define _YMIN_   0x12
 #define _ZMIN_   0x13
 #define _IMIN_   0x14
 #define _JMIN_   0x15
 #define _KMIN_   0x16
 #define _XMAX_   0x21
 #define _YMAX_   0x22
 #define _ZMAX_   0x23
 #define _IMAX_   0x24

commit 9a19ea50d8451fc0970843cc896bd2553e0f987e
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Fri Oct 22 08:52:31 2021 -0700

    ‚ú® BigTreeTech TFT35 SPI V1.0 (#22986)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 22c3767e1d..d8a15b910d 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -153,36 +153,61 @@
   #define LIMIT(v, n1, n2) \
     do{ \
       __typeof__(v) _n1 = (n1); \
       __typeof__(v) _n2 = (n2); \
       if (_n1 > v) v = _n1; \
       else if (_n2 < v) v = _n2; \
     }while(0)
 
 #endif
 
-// Macros to chain up to 14 conditions
+// Macros to chain up to 40 conditions
 #define _DO_1(W,C,A)       (_##W##_1(A))
 #define _DO_2(W,C,A,B)     (_##W##_1(A) C _##W##_1(B))
 #define _DO_3(W,C,A,V...)  (_##W##_1(A) C _DO_2(W,C,V))
 #define _DO_4(W,C,A,V...)  (_##W##_1(A) C _DO_3(W,C,V))
 #define _DO_5(W,C,A,V...)  (_##W##_1(A) C _DO_4(W,C,V))
 #define _DO_6(W,C,A,V...)  (_##W##_1(A) C _DO_5(W,C,V))
 #define _DO_7(W,C,A,V...)  (_##W##_1(A) C _DO_6(W,C,V))
 #define _DO_8(W,C,A,V...)  (_##W##_1(A) C _DO_7(W,C,V))
 #define _DO_9(W,C,A,V...)  (_##W##_1(A) C _DO_8(W,C,V))
 #define _DO_10(W,C,A,V...) (_##W##_1(A) C _DO_9(W,C,V))
 #define _DO_11(W,C,A,V...) (_##W##_1(A) C _DO_10(W,C,V))
 #define _DO_12(W,C,A,V...) (_##W##_1(A) C _DO_11(W,C,V))
 #define _DO_13(W,C,A,V...) (_##W##_1(A) C _DO_12(W,C,V))
 #define _DO_14(W,C,A,V...) (_##W##_1(A) C _DO_13(W,C,V))
 #define _DO_15(W,C,A,V...) (_##W##_1(A) C _DO_14(W,C,V))
+#define _DO_16(W,C,A,V...) (_##W##_1(A) C _DO_15(W,C,V))
+#define _DO_17(W,C,A,V...) (_##W##_1(A) C _DO_16(W,C,V))
+#define _DO_18(W,C,A,V...) (_##W##_1(A) C _DO_17(W,C,V))
+#define _DO_19(W,C,A,V...) (_##W##_1(A) C _DO_18(W,C,V))
+#define _DO_20(W,C,A,V...) (_##W##_1(A) C _DO_19(W,C,V))
+#define _DO_21(W,C,A,V...) (_##W##_1(A) C _DO_20(W,C,V))
+#define _DO_22(W,C,A,V...) (_##W##_1(A) C _DO_21(W,C,V))
+#define _DO_23(W,C,A,V...) (_##W##_1(A) C _DO_22(W,C,V))
+#define _DO_24(W,C,A,V...) (_##W##_1(A) C _DO_23(W,C,V))
+#define _DO_25(W,C,A,V...) (_##W##_1(A) C _DO_24(W,C,V))
+#define _DO_26(W,C,A,V...) (_##W##_1(A) C _DO_25(W,C,V))
+#define _DO_27(W,C,A,V...) (_##W##_1(A) C _DO_26(W,C,V))
+#define _DO_28(W,C,A,V...) (_##W##_1(A) C _DO_27(W,C,V))
+#define _DO_29(W,C,A,V...) (_##W##_1(A) C _DO_28(W,C,V))
+#define _DO_30(W,C,A,V...) (_##W##_1(A) C _DO_29(W,C,V))
+#define _DO_31(W,C,A,V...) (_##W##_1(A) C _DO_30(W,C,V))
+#define _DO_32(W,C,A,V...) (_##W##_1(A) C _DO_31(W,C,V))
+#define _DO_33(W,C,A,V...) (_##W##_1(A) C _DO_32(W,C,V))
+#define _DO_34(W,C,A,V...) (_##W##_1(A) C _DO_33(W,C,V))
+#define _DO_35(W,C,A,V...) (_##W##_1(A) C _DO_34(W,C,V))
+#define _DO_36(W,C,A,V...) (_##W##_1(A) C _DO_35(W,C,V))
+#define _DO_37(W,C,A,V...) (_##W##_1(A) C _DO_36(W,C,V))
+#define _DO_38(W,C,A,V...) (_##W##_1(A) C _DO_37(W,C,V))
+#define _DO_39(W,C,A,V...) (_##W##_1(A) C _DO_38(W,C,V))
+#define _DO_40(W,C,A,V...) (_##W##_1(A) C _DO_39(W,C,V))
 #define __DO_N(W,C,N,V...) _DO_##N(W,C,V)
 #define _DO_N(W,C,N,V...)  __DO_N(W,C,N,V)
 #define DO(W,C,V...)       (_DO_N(W,C,NUM_ARGS(V),V))
 
 // Macros to support option testing
 #define _CAT(a,V...) a##V
 #define CAT(a,V...) _CAT(a,V)
 
 #define _ISENA_     ~,1
 #define _ISENA_1    ~,1
@@ -244,20 +269,25 @@
 #define HEXCHR(a)           (NUMERIC(a) ? (a) - '0' : WITHIN(a, 'a', 'f') ? ((a) - 'a' + 10)  : WITHIN(a, 'A', 'F') ? ((a) - 'A' + 10) : -1)
 #define NUMERIC_SIGNED(a)   (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a)   (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a)            (sizeof(a)/sizeof(*a))
 #define ZERO(a)             memset(a,0,sizeof(a))
 #define COPY(a,b) do{ \
     static_assert(sizeof(a[0]) == sizeof(b[0]), "COPY: '" STRINGIFY(a) "' and '" STRINGIFY(b) "' types (sizes) don't match!"); \
     memcpy(&a[0],&b[0],_MIN(sizeof(a),sizeof(b))); \
   }while(0)
 
+#define CODE_16( A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) A; B; C; D; E; F; G; H; I; J; K; L; M; N; O; P
+#define CODE_15( A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) A; B; C; D; E; F; G; H; I; J; K; L; M; N; O
+#define CODE_14( A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) A; B; C; D; E; F; G; H; I; J; K; L; M; N
+#define CODE_13( A,B,C,D,E,F,G,H,I,J,K,L,M,...) A; B; C; D; E; F; G; H; I; J; K; L; M
+#define CODE_12( A,B,C,D,E,F,G,H,I,J,K,L,...) A; B; C; D; E; F; G; H; I; J; K; L
 #define CODE_11( A,B,C,D,E,F,G,H,I,J,K,...) A; B; C; D; E; F; G; H; I; J; K
 #define CODE_10( A,B,C,D,E,F,G,H,I,J,...) A; B; C; D; E; F; G; H; I; J
 #define CODE_9( A,B,C,D,E,F,G,H,I,...) A; B; C; D; E; F; G; H; I
 #define CODE_8( A,B,C,D,E,F,G,H,...) A; B; C; D; E; F; G; H
 #define CODE_7( A,B,C,D,E,F,G,...) A; B; C; D; E; F; G
 #define CODE_6( A,B,C,D,E,F,...) A; B; C; D; E; F
 #define CODE_5( A,B,C,D,E,...) A; B; C; D; E
 #define CODE_4( A,B,C,D,...) A; B; C; D
 #define CODE_3( A,B,C,...) A; B; C
 #define CODE_2( A,B,...) A; B

commit dc5bef62ba185461ba969db6af996ebc93a33ba7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 23 10:01:37 2021 -0500

    üé® Various multi-axis patches (#22823)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 0174e21add..22c3767e1d 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -26,46 +26,46 @@
 #endif
 
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 #define XY   2
 
 #define _AXIS(A) (A##_AXIS)
 
-#define _XMIN_   100
-#define _YMIN_   200
-#define _ZMIN_   300
-#define _IMIN_   500
-#define _JMIN_   600
-#define _KMIN_   700
-#define _XMAX_   101
-#define _YMAX_   201
-#define _ZMAX_   301
-#define _IMAX_   501
-#define _JMAX_   601
-#define _KMAX_   701
-#define _XDIAG_  102
-#define _YDIAG_  202
-#define _ZDIAG_  302
-#define _IDIAG_  502
-#define _JDIAG_  602
-#define _KDIAG_  702
-#define _E0DIAG_ 400
-#define _E1DIAG_ 401
-#define _E2DIAG_ 402
-#define _E3DIAG_ 403
-#define _E4DIAG_ 404
-#define _E5DIAG_ 405
-#define _E6DIAG_ 406
-#define _E7DIAG_ 407
+#define _XMIN_   0x11
+#define _YMIN_   0x12
+#define _ZMIN_   0x13
+#define _IMIN_   0x14
+#define _JMIN_   0x15
+#define _KMIN_   0x16
+#define _XMAX_   0x21
+#define _YMAX_   0x22
+#define _ZMAX_   0x23
+#define _IMAX_   0x24
+#define _JMAX_   0x25
+#define _KMAX_   0x26
+#define _XDIAG_  0x31
+#define _YDIAG_  0x32
+#define _ZDIAG_  0x33
+#define _IDIAG_  0x34
+#define _JDIAG_  0x35
+#define _KDIAG_  0x36
+#define _E0DIAG_ 0xE0
+#define _E1DIAG_ 0xE1
+#define _E2DIAG_ 0xE2
+#define _E3DIAG_ 0xE3
+#define _E4DIAG_ 0xE4
+#define _E5DIAG_ 0xE5
+#define _E6DIAG_ 0xE6
+#define _E7DIAG_ 0xE7
 
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define NO_INLINE      __attribute__((noinline))
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
@@ -244,20 +244,22 @@
 #define HEXCHR(a)           (NUMERIC(a) ? (a) - '0' : WITHIN(a, 'a', 'f') ? ((a) - 'a' + 10)  : WITHIN(a, 'A', 'F') ? ((a) - 'A' + 10) : -1)
 #define NUMERIC_SIGNED(a)   (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a)   (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a)            (sizeof(a)/sizeof(*a))
 #define ZERO(a)             memset(a,0,sizeof(a))
 #define COPY(a,b) do{ \
     static_assert(sizeof(a[0]) == sizeof(b[0]), "COPY: '" STRINGIFY(a) "' and '" STRINGIFY(b) "' types (sizes) don't match!"); \
     memcpy(&a[0],&b[0],_MIN(sizeof(a),sizeof(b))); \
   }while(0)
 
+#define CODE_11( A,B,C,D,E,F,G,H,I,J,K,...) A; B; C; D; E; F; G; H; I; J; K
+#define CODE_10( A,B,C,D,E,F,G,H,I,J,...) A; B; C; D; E; F; G; H; I; J
 #define CODE_9( A,B,C,D,E,F,G,H,I,...) A; B; C; D; E; F; G; H; I
 #define CODE_8( A,B,C,D,E,F,G,H,...) A; B; C; D; E; F; G; H
 #define CODE_7( A,B,C,D,E,F,G,...) A; B; C; D; E; F; G
 #define CODE_6( A,B,C,D,E,F,...) A; B; C; D; E; F
 #define CODE_5( A,B,C,D,E,...) A; B; C; D; E
 #define CODE_4( A,B,C,D,...) A; B; C; D
 #define CODE_3( A,B,C,...) A; B; C
 #define CODE_2( A,B,...) A; B
 #define CODE_1( A,...) A
 #define CODE_0(...)
@@ -279,20 +281,24 @@
 #define GANG_4( A,B,C,D,...) A B C D
 #define GANG_3( A,B,C,...) A B C
 #define GANG_2( A,B,...) A B
 #define GANG_1( A,...) A
 #define GANG_0(...)
 #define _GANG_N(N,V...) GANG_##N(V)
 #define GANG_N(N,V...) _GANG_N(N,V)
 #define GANG_N_1(N,K) _GANG_N(N,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K)
 
 // Macros for initializing arrays
+#define LIST_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T
+#define LIST_19(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S
+#define LIST_18(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R
+#define LIST_17(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q
 #define LIST_16(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P
 #define LIST_15(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O
 #define LIST_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N
 #define LIST_13(A,B,C,D,E,F,G,H,I,J,K,L,M,...) A,B,C,D,E,F,G,H,I,J,K,L,M
 #define LIST_12(A,B,C,D,E,F,G,H,I,J,K,L,...) A,B,C,D,E,F,G,H,I,J,K,L
 #define LIST_11(A,B,C,D,E,F,G,H,I,J,K,...) A,B,C,D,E,F,G,H,I,J,K
 #define LIST_10(A,B,C,D,E,F,G,H,I,J,...) A,B,C,D,E,F,G,H,I,J
 #define LIST_9( A,B,C,D,E,F,G,H,I,...) A,B,C,D,E,F,G,H,I
 #define LIST_8( A,B,C,D,E,F,G,H,...) A,B,C,D,E,F,G,H
 #define LIST_7( A,B,C,D,E,F,G,...) A,B,C,D,E,F,G
@@ -495,20 +501,25 @@
 #define INC_6   7
 #define INC_7   8
 #define INC_8   9
 #define INC_9  10
 #define INC_10 11
 #define INC_11 12
 #define INC_12 13
 #define INC_13 14
 #define INC_14 15
 #define INC_15 16
+#define INC_16 17
+#define INC_17 18
+#define INC_18 19
+#define INC_19 20
+#define INC_20 21
 #define INCREMENT_(n) INC_##n
 #define INCREMENT(n) INCREMENT_(n)
 
 #define ADD0(N)  N
 #define ADD1(N)  INCREMENT_(N)
 #define ADD2(N)  ADD1(ADD1(N))
 #define ADD3(N)  ADD1(ADD2(N))
 #define ADD4(N)  ADD2(ADD2(N))
 #define ADD5(N)  ADD2(ADD3(N))
 #define ADD6(N)  ADD3(ADD3(N))

commit 4b4de71304a426e0d9b2696dae4e82eb55ba7079
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Aug 29 13:57:47 2021 -0500

    ‚ö°Ô∏è Improve G2/G3 arc handling (#22599)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 86368bf5e7..0174e21add 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -253,39 +253,41 @@
 
 #define CODE_9( A,B,C,D,E,F,G,H,I,...) A; B; C; D; E; F; G; H; I
 #define CODE_8( A,B,C,D,E,F,G,H,...) A; B; C; D; E; F; G; H
 #define CODE_7( A,B,C,D,E,F,G,...) A; B; C; D; E; F; G
 #define CODE_6( A,B,C,D,E,F,...) A; B; C; D; E; F
 #define CODE_5( A,B,C,D,E,...) A; B; C; D; E
 #define CODE_4( A,B,C,D,...) A; B; C; D
 #define CODE_3( A,B,C,...) A; B; C
 #define CODE_2( A,B,...) A; B
 #define CODE_1( A,...) A
+#define CODE_0(...)
 #define _CODE_N(N,V...) CODE_##N(V)
 #define CODE_N(N,V...) _CODE_N(N,V)
 
 #define GANG_16(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) A B C D E F G H I J K L M N O P
 #define GANG_15(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) A B C D E F G H I J K L M N O
 #define GANG_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) A B C D E F G H I J K L M N
 #define GANG_13(A,B,C,D,E,F,G,H,I,J,K,L,M...) A B C D E F G H I J K L M
 #define GANG_12(A,B,C,D,E,F,G,H,I,J,K,L...) A B C D E F G H I J K L
 #define GANG_11(A,B,C,D,E,F,G,H,I,J,K,...) A B C D E F G H I J K
 #define GANG_10(A,B,C,D,E,F,G,H,I,J,...) A B C D E F G H I J
 #define GANG_9( A,B,C,D,E,F,G,H,I,...) A B C D E F G H I
 #define GANG_8( A,B,C,D,E,F,G,H,...) A B C D E F G H
 #define GANG_7( A,B,C,D,E,F,G,...) A B C D E F G
 #define GANG_6( A,B,C,D,E,F,...) A B C D E F
 #define GANG_5( A,B,C,D,E,...) A B C D E
 #define GANG_4( A,B,C,D,...) A B C D
 #define GANG_3( A,B,C,...) A B C
 #define GANG_2( A,B,...) A B
 #define GANG_1( A,...) A
+#define GANG_0(...)
 #define _GANG_N(N,V...) GANG_##N(V)
 #define GANG_N(N,V...) _GANG_N(N,V)
 #define GANG_N_1(N,K) _GANG_N(N,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K)
 
 // Macros for initializing arrays
 #define LIST_16(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P
 #define LIST_15(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O
 #define LIST_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N
 #define LIST_13(A,B,C,D,E,F,G,H,I,J,K,L,M,...) A,B,C,D,E,F,G,H,I,J,K,L,M
 #define LIST_12(A,B,C,D,E,F,G,H,I,J,K,L,...) A,B,C,D,E,F,G,H,I,J,K,L

commit afca6e745932d295b88d37fa9bd4274e22705b0b
Author: luzpaz <luzpaz@users.noreply.github.com>
Date:   Tue Aug 3 20:02:34 2021 -0400

    üêõ Spellcheck comments (#22496)
    
    codespell -q 3 --builtin=clear,rare,informal,code -S ./Marlin/src/lcd/language -L alo,amin,endcode,stdio,uint

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index abcd7b9480..86368bf5e7 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -392,21 +392,21 @@
   namespace Private {
     template<bool, typename _Tp = void> struct enable_if { };
     template<typename _Tp>              struct enable_if<true, _Tp> { typedef _Tp type; };
 
     template<typename T, typename U> struct is_same { enum { value = false }; };
     template<typename T> struct is_same<T, T> { enum { value = true }; };
 
     template <typename T, typename ... Args> struct first_type_of { typedef T type; };
     template <typename T> struct first_type_of<T> { typedef T type; };
   }
-  // C++11 solution using SFINAE to detect the existance of a member in a class at compile time.
+  // C++11 solution using SFINAE to detect the existence of a member in a class at compile time.
   // It creates a HasMember<Type> structure containing 'value' set to true if the member exists
   #define HAS_MEMBER_IMPL(Member) \
     namespace Private { \
       template <typename Type, typename Yes=char, typename No=long> struct HasMember_ ## Member { \
         template <typename C> static Yes& test( decltype(&C::Member) ) ; \
         template <typename C> static No& test(...); \
         enum { value = sizeof(test<Type>(0)) == sizeof(Yes) }; }; \
     }
 
   // Call the method if it exists, but do nothing if it does not. The method is detected at compile time.

commit 4febb2352179f3de58db2161572de4050197bd5d
Author: MKS-Sean <56996910+MKS-Sean@users.noreply.github.com>
Date:   Tue Jul 13 08:17:28 2021 +0800

    ‚ú® MKS Robin Nano v3 + TFT_LVGL_UI + WiFi module (#22109)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 05640bce87..abcd7b9480 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -435,21 +435,21 @@
     constexpr const char* findLastPos(const char *str, const char ch) {
       return *str == ch ? (str + 1) : findLastPos(str - 1, ch);
     }
     // Compile-time evaluation of the last part of a file path
     // Typically used to shorten the path to file in compiled strings
     // CompileTimeString::baseName(__FILE__) returns "macros.h" and not /path/to/Marlin/src/core/macros.h
     constexpr const char* baseName(const char *str) {
       return contains(str, '/') ? findLastPos(findStringEnd(str), '/') : str;
     }
 
-    // Find the first occurence of a character in a string (or return the last position in the string)
+    // Find the first occurrence of a character in a string (or return the last position in the string)
     constexpr const char* findFirst(const char *str, const char ch) {
       return *str == ch || *str == 0 ? (str + 1) : findFirst(str + 1, ch);
     }
     // Compute the string length at compile time
     constexpr unsigned stringLen(const char *str) {
       return *str == 0 ? 0 : 1 + stringLen(str + 1);
     }
   }
 
   #define ONLY_FILENAME CompileTimeString::baseName(__FILE__)

commit b2f0913083d83bd3fd9af1c603d1f4cc1afb64eb
Author: Katelyn Schiesser <katelyn.schiesser@gmail.com>
Date:   Tue Jul 6 17:36:41 2021 -0700

    üêõ Redundant Temp Sensor followup (#22196)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 295eee9bcf..05640bce87 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -197,22 +197,22 @@
 #define COUNT_ENABLED(V...) DO(ENA,+,V)
 
 #define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION ? 'A' : 'B'
 #define TERN0(O,A)          _TERN(_ENA_1(O),0,A)    // OPTION ? 'A' : '0'
 #define TERN1(O,A)          _TERN(_ENA_1(O),1,A)    // OPTION ? 'A' : '1'
 #define TERN_(O,A)          _TERN(_ENA_1(O),,A)     // OPTION ? 'A' : '<nul>'
 #define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
 #define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
 #define ___TERN(P,V...)     THIRD(P,V)              // If first argument has a comma, A. Else B.
 
-#define _OPTARG(A)          , A
-#define OPTARG(O,A)         TERN_(O,DEFER4(_OPTARG)(A))
+#define _OPTARG(A...)       , A
+#define OPTARG(O,A...)      TERN_(O,DEFER4(_OPTARG)(A))
 #define _OPTCODE(A)         A;
 #define OPTCODE(O,A)        TERN_(O,DEFER4(_OPTCODE)(A))
 
 // Macros to avoid 'f + 0.0' which is not always optimized away. Minus included for symmetry.
 // Compiler flags -fno-signed-zeros -ffinite-math-only also cover 'f * 1.0', 'f - f', etc.
 #define PLUS_TERN0(O,A)     _TERN(_ENA_1(O),,+ (A)) // OPTION ? '+ (A)' : '<nul>'
 #define MINUS_TERN0(O,A)    _TERN(_ENA_1(O),,- (A)) // OPTION ? '- (A)' : '<nul>'
 #define SUM_TERN(O,B,A)     ((B) PLUS_TERN0(O,A))   // ((B) (OPTION ? '+ (A)' : '<nul>'))
 #define DIFF_TERN(O,B,A)    ((B) MINUS_TERN0(O,A))  // ((B) (OPTION ? '- (A)' : '<nul>'))
 

commit ba4fa4983411d03eae791b70d8ec3e26f0781785
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sun Jun 6 08:30:39 2021 +0200

    ‚úèÔ∏è Followup to Six Linear Axes (#22056)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index dc6147adb0..295eee9bcf 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -29,29 +29,29 @@
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 #define XY   2
 
 #define _AXIS(A) (A##_AXIS)
 
 #define _XMIN_   100
 #define _YMIN_   200
 #define _ZMIN_   300
-#define _IMIN_   400
-#define _JMIN_   500
-#define _KMIN_   600
+#define _IMIN_   500
+#define _JMIN_   600
+#define _KMIN_   700
 #define _XMAX_   101
 #define _YMAX_   201
 #define _ZMAX_   301
-#define _IMAX_   401
-#define _JMAX_   501
-#define _KMAX_   601
+#define _IMAX_   501
+#define _JMAX_   601
+#define _KMAX_   701
 #define _XDIAG_  102
 #define _YDIAG_  202
 #define _ZDIAG_  302
 #define _IDIAG_  502
 #define _JDIAG_  602
 #define _KDIAG_  702
 #define _E0DIAG_ 400
 #define _E1DIAG_ 401
 #define _E2DIAG_ 402
 #define _E3DIAG_ 403

commit 7726af9c5348c1c7d0fd9a56eca87d00cd75fee6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Jun 5 09:18:47 2021 +0200

    üèóÔ∏è Support for up to 6 linear axes (#19112)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 7a2d731c01..dc6147adb0 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -29,26 +29,35 @@
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 #define XY   2
 
 #define _AXIS(A) (A##_AXIS)
 
 #define _XMIN_   100
 #define _YMIN_   200
 #define _ZMIN_   300
+#define _IMIN_   400
+#define _JMIN_   500
+#define _KMIN_   600
 #define _XMAX_   101
 #define _YMAX_   201
 #define _ZMAX_   301
+#define _IMAX_   401
+#define _JMAX_   501
+#define _KMAX_   601
 #define _XDIAG_  102
 #define _YDIAG_  202
 #define _ZDIAG_  302
+#define _IDIAG_  502
+#define _JDIAG_  602
+#define _KDIAG_  702
 #define _E0DIAG_ 400
 #define _E1DIAG_ 401
 #define _E2DIAG_ 402
 #define _E3DIAG_ 403
 #define _E4DIAG_ 404
 #define _E5DIAG_ 405
 #define _E6DIAG_ 406
 #define _E7DIAG_ 407
 
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__

commit 84fd0eff17d089e3f75f6585d4bba47f15c00ba7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 23 21:33:22 2021 -0500

    üé® Macros for optional arguments (#21969)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 566087b76b..7a2d731c01 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -188,20 +188,25 @@
 #define COUNT_ENABLED(V...) DO(ENA,+,V)
 
 #define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION ? 'A' : 'B'
 #define TERN0(O,A)          _TERN(_ENA_1(O),0,A)    // OPTION ? 'A' : '0'
 #define TERN1(O,A)          _TERN(_ENA_1(O),1,A)    // OPTION ? 'A' : '1'
 #define TERN_(O,A)          _TERN(_ENA_1(O),,A)     // OPTION ? 'A' : '<nul>'
 #define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
 #define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
 #define ___TERN(P,V...)     THIRD(P,V)              // If first argument has a comma, A. Else B.
 
+#define _OPTARG(A)          , A
+#define OPTARG(O,A)         TERN_(O,DEFER4(_OPTARG)(A))
+#define _OPTCODE(A)         A;
+#define OPTCODE(O,A)        TERN_(O,DEFER4(_OPTCODE)(A))
+
 // Macros to avoid 'f + 0.0' which is not always optimized away. Minus included for symmetry.
 // Compiler flags -fno-signed-zeros -ffinite-math-only also cover 'f * 1.0', 'f - f', etc.
 #define PLUS_TERN0(O,A)     _TERN(_ENA_1(O),,+ (A)) // OPTION ? '+ (A)' : '<nul>'
 #define MINUS_TERN0(O,A)    _TERN(_ENA_1(O),,- (A)) // OPTION ? '- (A)' : '<nul>'
 #define SUM_TERN(O,B,A)     ((B) PLUS_TERN0(O,A))   // ((B) (OPTION ? '+ (A)' : '<nul>'))
 #define DIFF_TERN(O,B,A)    ((B) MINUS_TERN0(O,A))  // ((B) (OPTION ? '- (A)' : '<nul>'))
 
 #define IF_ENABLED          TERN_
 #define IF_DISABLED(O,A)    TERN(O,,A)
 

commit 390878e78af3a0f07e2a1b2e784fc882e22edbd4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue May 11 04:01:21 2021 -0500

    :art: Additional utility macros

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 34d9e530ca..566087b76b 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -230,41 +230,76 @@
 #define HEXCHR(a)           (NUMERIC(a) ? (a) - '0' : WITHIN(a, 'a', 'f') ? ((a) - 'a' + 10)  : WITHIN(a, 'A', 'F') ? ((a) - 'A' + 10) : -1)
 #define NUMERIC_SIGNED(a)   (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a)   (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a)            (sizeof(a)/sizeof(*a))
 #define ZERO(a)             memset(a,0,sizeof(a))
 #define COPY(a,b) do{ \
     static_assert(sizeof(a[0]) == sizeof(b[0]), "COPY: '" STRINGIFY(a) "' and '" STRINGIFY(b) "' types (sizes) don't match!"); \
     memcpy(&a[0],&b[0],_MIN(sizeof(a),sizeof(b))); \
   }while(0)
 
+#define CODE_9( A,B,C,D,E,F,G,H,I,...) A; B; C; D; E; F; G; H; I
+#define CODE_8( A,B,C,D,E,F,G,H,...) A; B; C; D; E; F; G; H
+#define CODE_7( A,B,C,D,E,F,G,...) A; B; C; D; E; F; G
+#define CODE_6( A,B,C,D,E,F,...) A; B; C; D; E; F
+#define CODE_5( A,B,C,D,E,...) A; B; C; D; E
+#define CODE_4( A,B,C,D,...) A; B; C; D
+#define CODE_3( A,B,C,...) A; B; C
+#define CODE_2( A,B,...) A; B
+#define CODE_1( A,...) A
+#define _CODE_N(N,V...) CODE_##N(V)
+#define CODE_N(N,V...) _CODE_N(N,V)
+
+#define GANG_16(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) A B C D E F G H I J K L M N O P
+#define GANG_15(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) A B C D E F G H I J K L M N O
+#define GANG_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) A B C D E F G H I J K L M N
+#define GANG_13(A,B,C,D,E,F,G,H,I,J,K,L,M...) A B C D E F G H I J K L M
+#define GANG_12(A,B,C,D,E,F,G,H,I,J,K,L...) A B C D E F G H I J K L
+#define GANG_11(A,B,C,D,E,F,G,H,I,J,K,...) A B C D E F G H I J K
+#define GANG_10(A,B,C,D,E,F,G,H,I,J,...) A B C D E F G H I J
+#define GANG_9( A,B,C,D,E,F,G,H,I,...) A B C D E F G H I
+#define GANG_8( A,B,C,D,E,F,G,H,...) A B C D E F G H
+#define GANG_7( A,B,C,D,E,F,G,...) A B C D E F G
+#define GANG_6( A,B,C,D,E,F,...) A B C D E F
+#define GANG_5( A,B,C,D,E,...) A B C D E
+#define GANG_4( A,B,C,D,...) A B C D
+#define GANG_3( A,B,C,...) A B C
+#define GANG_2( A,B,...) A B
+#define GANG_1( A,...) A
+#define _GANG_N(N,V...) GANG_##N(V)
+#define GANG_N(N,V...) _GANG_N(N,V)
+#define GANG_N_1(N,K) _GANG_N(N,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K)
+
 // Macros for initializing arrays
 #define LIST_16(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P
 #define LIST_15(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O
 #define LIST_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N
 #define LIST_13(A,B,C,D,E,F,G,H,I,J,K,L,M,...) A,B,C,D,E,F,G,H,I,J,K,L,M
 #define LIST_12(A,B,C,D,E,F,G,H,I,J,K,L,...) A,B,C,D,E,F,G,H,I,J,K,L
 #define LIST_11(A,B,C,D,E,F,G,H,I,J,K,...) A,B,C,D,E,F,G,H,I,J,K
 #define LIST_10(A,B,C,D,E,F,G,H,I,J,...) A,B,C,D,E,F,G,H,I,J
 #define LIST_9( A,B,C,D,E,F,G,H,I,...) A,B,C,D,E,F,G,H,I
 #define LIST_8( A,B,C,D,E,F,G,H,...) A,B,C,D,E,F,G,H
 #define LIST_7( A,B,C,D,E,F,G,...) A,B,C,D,E,F,G
 #define LIST_6( A,B,C,D,E,F,...) A,B,C,D,E,F
 #define LIST_5( A,B,C,D,E,...) A,B,C,D,E
 #define LIST_4( A,B,C,D,...) A,B,C,D
 #define LIST_3( A,B,C,...) A,B,C
 #define LIST_2( A,B,...) A,B
 #define LIST_1( A,...) A
+#define LIST_0(...)
 
 #define _LIST_N(N,V...) LIST_##N(V)
 #define LIST_N(N,V...) _LIST_N(N,V)
+#define LIST_N_1(N,K) _LIST_N(N,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K,K)
 #define ARRAY_N(N,V...) { _LIST_N(N,V) }
+#define ARRAY_N_1(N,K)  { LIST_N_1(N,K) }
 
 #define _JOIN_1(O)         (O)
 #define JOIN_N(N,C,V...)   (DO(JOIN,C,LIST_N(N,V)))
 
 #define LOOP_S_LE_N(VAR, S, N) for (uint8_t VAR=(S); VAR<=(N); VAR++)
 #define LOOP_S_L_N(VAR, S, N) for (uint8_t VAR=(S); VAR<(N); VAR++)
 #define LOOP_LE_N(VAR, N) LOOP_S_LE_N(VAR, 0, N)
 #define LOOP_L_N(VAR, N) LOOP_S_L_N(VAR, 0, N)
 
 #define NOOP (void(0))
@@ -458,20 +493,23 @@
 #define ADD1(N)  INCREMENT_(N)
 #define ADD2(N)  ADD1(ADD1(N))
 #define ADD3(N)  ADD1(ADD2(N))
 #define ADD4(N)  ADD2(ADD2(N))
 #define ADD5(N)  ADD2(ADD3(N))
 #define ADD6(N)  ADD3(ADD3(N))
 #define ADD7(N)  ADD3(ADD4(N))
 #define ADD8(N)  ADD4(ADD4(N))
 #define ADD9(N)  ADD4(ADD5(N))
 #define ADD10(N) ADD5(ADD5(N))
+#define SUM(A,B) _CAT(ADD,A)(B)
+#define DOUBLE_(n) ADD##n(n)
+#define DOUBLE(n) DOUBLE_(n)
 
 // Macros for subtracting
 #define DEC_0   0
 #define DEC_1   0
 #define DEC_2   1
 #define DEC_3   2
 #define DEC_4   3
 #define DEC_5   4
 #define DEC_6   5
 #define DEC_7   6

commit e5dc2c53215020cd2c2caeb519a51d4bd430ecc0
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue May 11 08:30:16 2021 -0500

    Simplify macro expansion with recursion (#21859)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index b026af1187..34d9e530ca 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -294,22 +294,26 @@
 #define SQRT(x)     sqrtf(x)
 #define RSQRT(x)    (1.0f / sqrtf(x))
 #define CEIL(x)     ceilf(x)
 #define FLOOR(x)    floorf(x)
 #define TRUNC(x)    truncf(x)
 #define LROUND(x)   lroundf(x)
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 
 // Use NUM_ARGS(__VA_ARGS__) to get the number of variadic arguments
-#define _NUM_ARGS(_,Z,Y,X,W,V,U,T,S,R,Q,P,O,N,M,L,K,J,I,H,G,F,E,D,C,B,A,OUT,...) OUT
-#define NUM_ARGS(V...) _NUM_ARGS(0,V,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
+#define _NUM_ARGS(_,n,m,l,k,j,i,h,g,f,e,d,c,b,a,Z,Y,X,W,V,U,T,S,R,Q,P,O,N,M,L,K,J,I,H,G,F,E,D,C,B,A,OUT,...) OUT
+#define NUM_ARGS(V...) _NUM_ARGS(0,V,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
+
+// Use TWO_ARGS(__VA_ARGS__) to get whether there are 1, 2, or >2 arguments
+#define _TWO_ARGS(_,n,m,l,k,j,i,h,g,f,e,d,c,b,a,Z,Y,X,W,V,U,T,S,R,Q,P,O,N,M,L,K,J,I,H,G,F,E,D,C,B,A,OUT,...) OUT
+#define TWO_ARGS(V...) _TWO_ARGS(0,V,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,0)
 
 #ifdef __cplusplus
 
   #ifndef _MINMAX_H_
   #define _MINMAX_H_
 
     extern "C++" {
 
       // C++11 solution that is standards compliant. Return type is deduced automatically
       template <class L, class R> static inline constexpr auto _MIN(const L lhs, const R rhs) -> decltype(lhs + rhs) {
@@ -407,45 +411,33 @@
   inline const char* gtn(T*) {
     // It works on GCC by instantiating __PRETTY_FUNCTION__ and parsing the result. So the syntax here is very limited to GCC output
     constexpr unsigned verboseChatLen = sizeof("const char* gtn(T*) [with T = ") - 1;
     static char templateType[sizeof(__PRETTY_FUNCTION__) - verboseChatLen] = {};
     __builtin_memcpy(templateType, __PRETTY_FUNCTION__ + verboseChatLen, sizeof(__PRETTY_FUNCTION__) - verboseChatLen - 2);
     return templateType;
   }
 
 #else
 
-  #define MIN_2(a,b)      ((a)<(b)?(a):(b))
-  #define MIN_3(a,V...)   MIN_2(a,MIN_2(V))
-  #define MIN_4(a,V...)   MIN_2(a,MIN_3(V))
-  #define MIN_5(a,V...)   MIN_2(a,MIN_4(V))
-  #define MIN_6(a,V...)   MIN_2(a,MIN_5(V))
-  #define MIN_7(a,V...)   MIN_2(a,MIN_6(V))
-  #define MIN_8(a,V...)   MIN_2(a,MIN_7(V))
-  #define MIN_9(a,V...)   MIN_2(a,MIN_8(V))
-  #define MIN_10(a,V...)  MIN_2(a,MIN_9(V))
   #define __MIN_N(N,V...) MIN_##N(V)
   #define _MIN_N(N,V...)  __MIN_N(N,V)
-  #define _MIN(V...)      _MIN_N(NUM_ARGS(V), V)
+  #define _MIN_N_REF()    _MIN_N
+  #define _MIN(V...)      EVAL(_MIN_N(TWO_ARGS(V),V))
+  #define MIN_2(a,b)      ((a)<(b)?(a):(b))
+  #define MIN_3(a,V...)   MIN_2(a,DEFER2(_MIN_N_REF)()(TWO_ARGS(V),V))
 
-  #define MAX_2(a,b)      ((a)>(b)?(a):(b))
-  #define MAX_3(a,V...)   MAX_2(a,MAX_2(V))
-  #define MAX_4(a,V...)   MAX_2(a,MAX_3(V))
-  #define MAX_5(a,V...)   MAX_2(a,MAX_4(V))
-  #define MAX_6(a,V...)   MAX_2(a,MAX_5(V))
-  #define MAX_7(a,V...)   MAX_2(a,MAX_6(V))
-  #define MAX_8(a,V...)   MAX_2(a,MAX_7(V))
-  #define MAX_9(a,V...)   MAX_2(a,MAX_8(V))
-  #define MAX_10(a,V...)  MAX_2(a,MAX_9(V))
   #define __MAX_N(N,V...) MAX_##N(V)
   #define _MAX_N(N,V...)  __MAX_N(N,V)
-  #define _MAX(V...)      _MAX_N(NUM_ARGS(V), V)
+  #define _MAX_N_REF()    _MAX_N
+  #define _MAX(V...)      EVAL(_MAX_N(TWO_ARGS(V),V))
+  #define MAX_2(a,b)      ((a)>(b)?(a):(b))
+  #define MAX_3(a,V...)   MAX_2(a,DEFER2(_MAX_N_REF)()(TWO_ARGS(V),V))
 
 #endif
 
 // Macros for adding
 #define INC_0   1
 #define INC_1   2
 #define INC_2   3
 #define INC_3   4
 #define INC_4   5
 #define INC_5   6

commit f09fa69e867d1cfb18cbad720a5c1e566cb1bab4
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat May 8 01:41:40 2021 -0500

    Add and apply REPEAT_1 macro

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 6092dc4a59..b026af1187 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -574,20 +574,21 @@
 #define _REPEAT2(_RPT_I,_RPT_N,_RPT_OP,V...)                     \
   _RPT_OP(_RPT_I,V)                                              \
   IF_ELSE(SUB1(_RPT_N))                                          \
     ( DEFER2(__REPEAT2)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP,V) ) \
     ( /* Do nothing */ )
 #define __REPEAT2() _REPEAT2
 
 // Repeat a macro passing S...N-1.
 #define REPEAT_S(S,N,OP)        EVAL(_REPEAT(S,SUB##S(N),OP))
 #define REPEAT(N,OP)            REPEAT_S(0,N,OP)
+#define REPEAT_1(N,OP)          REPEAT_S(1,INCREMENT(N),OP)
 
 // Repeat a macro passing 0...N-1 plus additional arguments.
 #define REPEAT2_S(S,N,OP,V...)  EVAL(_REPEAT2(S,SUB##S(N),OP,V))
 #define REPEAT2(N,OP,V...)      REPEAT2_S(0,N,OP,V)
 
 // Use RREPEAT macros with REPEAT macros for nesting
 #define _RREPEAT(_RPT_I,_RPT_N,_RPT_OP)                           \
   _RPT_OP(_RPT_I)                                                 \
   IF_ELSE(SUB1(_RPT_N))                                           \
     ( DEFER2(__RREPEAT)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP) )    \

commit 528b9bd8729656d7ebcd3dc7898ceddc2f377354
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Apr 16 02:43:59 2021 -0500

    Revert experimental NAN patch
    
    Hold changes from #21575 (24a095c) for more testing.

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index ce88458412..6092dc4a59 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -105,23 +105,20 @@
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 #define NORMSQ(x,y,z) (sq(x)+sq(y)+sq(z))
 
 #define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ({__typeof__(a) _a = (a); (_a>0)-(_a<0);})
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
-#define MFNAN 999999.0f
-#define ISNAN(V) ((V) == MFNAN)
-
 // Macros to constrain values
 #ifdef __cplusplus
 
   // C++11 solution that is standards compliant.
   template <class V, class N> static inline constexpr void NOLESS(V& v, const N n) {
     if (n > v) v = n;
   }
   template <class V, class N> static inline constexpr void NOMORE(V& v, const N n) {
     if (n < v) v = n;
   }

commit 24a095c5c14b60bcbffc2807d2c8cc8e9af46e90
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Apr 12 16:49:53 2021 -0500

    Reduce math library code size by 3.4KB (#21575)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 6092dc4a59..ce88458412 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -105,20 +105,23 @@
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 #define NORMSQ(x,y,z) (sq(x)+sq(y)+sq(z))
 
 #define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ({__typeof__(a) _a = (a); (_a>0)-(_a<0);})
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
+#define MFNAN 999999.0f
+#define ISNAN(V) ((V) == MFNAN)
+
 // Macros to constrain values
 #ifdef __cplusplus
 
   // C++11 solution that is standards compliant.
   template <class V, class N> static inline constexpr void NOLESS(V& v, const N n) {
     if (n > v) v = n;
   }
   template <class V, class N> static inline constexpr void NOMORE(V& v, const N n) {
     if (n < v) v = n;
   }

commit 1a2cbe100c279b0dd12a70f5e9179a6f9b555e32
Author: Ramiro Polla <ramiropolla@users.noreply.github.com>
Date:   Fri Apr 9 04:03:34 2021 +0200

    Macros to eliminate 'f + 0.0' (#21568)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index fb129cd939..6092dc4a59 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -180,28 +180,35 @@
 #define _ISENA_0x1  ~,1
 #define _ISENA_true ~,1
 #define _ISENA(V...)        IS_PROBE(V)
 
 #define _ENA_1(O)           _ISENA(CAT(_IS,CAT(ENA_, O)))
 #define _DIS_1(O)           NOT(_ENA_1(O))
 #define ENABLED(V...)       DO(ENA,&&,V)
 #define DISABLED(V...)      DO(DIS,&&,V)
 #define COUNT_ENABLED(V...) DO(ENA,+,V)
 
-#define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION converted to '0' or '1'
-#define TERN0(O,A)          _TERN(_ENA_1(O),0,A)    // OPTION converted to A or '0'
-#define TERN1(O,A)          _TERN(_ENA_1(O),1,A)    // OPTION converted to A or '1'
-#define TERN_(O,A)          _TERN(_ENA_1(O),,A)     // OPTION converted to A or '<nul>'
+#define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION ? 'A' : 'B'
+#define TERN0(O,A)          _TERN(_ENA_1(O),0,A)    // OPTION ? 'A' : '0'
+#define TERN1(O,A)          _TERN(_ENA_1(O),1,A)    // OPTION ? 'A' : '1'
+#define TERN_(O,A)          _TERN(_ENA_1(O),,A)     // OPTION ? 'A' : '<nul>'
 #define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
 #define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
 #define ___TERN(P,V...)     THIRD(P,V)              // If first argument has a comma, A. Else B.
 
+// Macros to avoid 'f + 0.0' which is not always optimized away. Minus included for symmetry.
+// Compiler flags -fno-signed-zeros -ffinite-math-only also cover 'f * 1.0', 'f - f', etc.
+#define PLUS_TERN0(O,A)     _TERN(_ENA_1(O),,+ (A)) // OPTION ? '+ (A)' : '<nul>'
+#define MINUS_TERN0(O,A)    _TERN(_ENA_1(O),,- (A)) // OPTION ? '- (A)' : '<nul>'
+#define SUM_TERN(O,B,A)     ((B) PLUS_TERN0(O,A))   // ((B) (OPTION ? '+ (A)' : '<nul>'))
+#define DIFF_TERN(O,B,A)    ((B) MINUS_TERN0(O,A))  // ((B) (OPTION ? '- (A)' : '<nul>'))
+
 #define IF_ENABLED          TERN_
 #define IF_DISABLED(O,A)    TERN(O,,A)
 
 #define ANY(V...)          !DISABLED(V)
 #define NONE(V...)          DISABLED(V)
 #define ALL(V...)           ENABLED(V)
 #define BOTH(V1,V2)         ALL(V1,V2)
 #define EITHER(V1,V2)       ANY(V1,V2)
 #define MANY(V...)          (COUNT_ENABLED(V) > 1)
 

commit 139c14948621adcaa227bcef67765a5228039cd3
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Tue Mar 30 04:36:01 2021 +0200

    Flags for MarlinSerial instance features (#21318)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index f900993784..fb129cd939 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -311,20 +311,30 @@
       template <class L, class R> static inline constexpr auto _MAX(const L lhs, const R rhs) -> decltype(lhs + rhs) {
         return lhs > rhs ? lhs : rhs;
       }
       template<class T, class ... Ts> static inline constexpr const T _MIN(T V, Ts... Vs) { return _MIN(V, _MIN(Vs...)); }
       template<class T, class ... Ts> static inline constexpr const T _MAX(T V, Ts... Vs) { return _MAX(V, _MAX(Vs...)); }
 
     }
 
   #endif
 
+  // Allow manipulating enumeration value like flags without ugly cast everywhere
+  #define ENUM_FLAGS(T) \
+    FORCE_INLINE constexpr T operator&(T x, T y) { return static_cast<T>(static_cast<int>(x) & static_cast<int>(y)); } \
+    FORCE_INLINE constexpr T operator|(T x, T y) { return static_cast<T>(static_cast<int>(x) | static_cast<int>(y)); } \
+    FORCE_INLINE constexpr T operator^(T x, T y) { return static_cast<T>(static_cast<int>(x) ^ static_cast<int>(y)); } \
+    FORCE_INLINE constexpr T operator~(T x)      { return static_cast<T>(~static_cast<int>(x)); } \
+    FORCE_INLINE T & operator&=(T &x, T y) { return x &= y; } \
+    FORCE_INLINE T & operator|=(T &x, T y) { return x |= y; } \
+    FORCE_INLINE T & operator^=(T &x, T y) { return x ^= y; }
+
   // C++11 solution that is standard compliant. <type_traits> is not available on all platform
   namespace Private {
     template<bool, typename _Tp = void> struct enable_if { };
     template<typename _Tp>              struct enable_if<true, _Tp> { typedef _Tp type; };
 
     template<typename T, typename U> struct is_same { enum { value = false }; };
     template<typename T> struct is_same<T, T> { enum { value = true }; };
 
     template <typename T, typename ... Args> struct first_type_of { typedef T type; };
     template <typename T> struct first_type_of<T> { typedef T type; };
@@ -350,37 +360,57 @@
   #define CALL_IF_EXISTS(Return, That, Method, ...) \
     static_cast<Return>(Private::Call_ ## Method(That, ##__VA_ARGS__))
 
   // Compile-time string manipulation
   namespace CompileTimeString {
     // Simple compile-time parser to find the position of the end of a string
     constexpr const char* findStringEnd(const char *str) {
       return *str ? findStringEnd(str + 1) : str;
     }
 
-    // Check whether a string contains a slash
-    constexpr bool containsSlash(const char *str) {
-      return *str == '/' ? true : (*str ? containsSlash(str + 1) : false);
+    // Check whether a string contains a specific character
+    constexpr bool contains(const char *str, const char ch) {
+      return *str == ch ? true : (*str ? contains(str + 1, ch) : false);
     }
-    // Find the last position of the slash
-    constexpr const char* findLastSlashPos(const char *str) {
-      return *str == '/' ? (str + 1) : findLastSlashPos(str - 1);
+    // Find the last position of the specific character (should be called with findStringEnd)
+    constexpr const char* findLastPos(const char *str, const char ch) {
+      return *str == ch ? (str + 1) : findLastPos(str - 1, ch);
     }
     // Compile-time evaluation of the last part of a file path
     // Typically used to shorten the path to file in compiled strings
     // CompileTimeString::baseName(__FILE__) returns "macros.h" and not /path/to/Marlin/src/core/macros.h
     constexpr const char* baseName(const char *str) {
-      return containsSlash(str) ? findLastSlashPos(findStringEnd(str)) : str;
+      return contains(str, '/') ? findLastPos(findStringEnd(str), '/') : str;
+    }
+
+    // Find the first occurence of a character in a string (or return the last position in the string)
+    constexpr const char* findFirst(const char *str, const char ch) {
+      return *str == ch || *str == 0 ? (str + 1) : findFirst(str + 1, ch);
+    }
+    // Compute the string length at compile time
+    constexpr unsigned stringLen(const char *str) {
+      return *str == 0 ? 0 : 1 + stringLen(str + 1);
     }
   }
 
   #define ONLY_FILENAME CompileTimeString::baseName(__FILE__)
+  /** Get the templated type name. This does not depends on RTTI, but on the preprocessor, so it should be quite safe to use even on old compilers.
+      WARNING: DO NOT RENAME THIS FUNCTION (or change the text inside the function to match what the preprocessor will generate)
+      The name is chosen very short since the binary will store "const char* gtn(T*) [with T = YourTypeHere]" so avoid long function name here */
+  template <typename T>
+  inline const char* gtn(T*) {
+    // It works on GCC by instantiating __PRETTY_FUNCTION__ and parsing the result. So the syntax here is very limited to GCC output
+    constexpr unsigned verboseChatLen = sizeof("const char* gtn(T*) [with T = ") - 1;
+    static char templateType[sizeof(__PRETTY_FUNCTION__) - verboseChatLen] = {};
+    __builtin_memcpy(templateType, __PRETTY_FUNCTION__ + verboseChatLen, sizeof(__PRETTY_FUNCTION__) - verboseChatLen - 2);
+    return templateType;
+  }
 
 #else
 
   #define MIN_2(a,b)      ((a)<(b)?(a):(b))
   #define MIN_3(a,V...)   MIN_2(a,MIN_2(V))
   #define MIN_4(a,V...)   MIN_2(a,MIN_3(V))
   #define MIN_5(a,V...)   MIN_2(a,MIN_4(V))
   #define MIN_6(a,V...)   MIN_2(a,MIN_5(V))
   #define MIN_7(a,V...)   MIN_2(a,MIN_6(V))
   #define MIN_8(a,V...)   MIN_2(a,MIN_7(V))

commit 3b73b115ca9366f0155986b717d4c85c31ed2f80
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Mar 29 20:36:37 2021 -0500

    Apply pointer formatting

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index d7043ba523..f900993784 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -355,27 +355,27 @@
     // Simple compile-time parser to find the position of the end of a string
     constexpr const char* findStringEnd(const char *str) {
       return *str ? findStringEnd(str + 1) : str;
     }
 
     // Check whether a string contains a slash
     constexpr bool containsSlash(const char *str) {
       return *str == '/' ? true : (*str ? containsSlash(str + 1) : false);
     }
     // Find the last position of the slash
-    constexpr const char* findLastSlashPos(const char* str) {
+    constexpr const char* findLastSlashPos(const char *str) {
       return *str == '/' ? (str + 1) : findLastSlashPos(str - 1);
     }
     // Compile-time evaluation of the last part of a file path
     // Typically used to shorten the path to file in compiled strings
     // CompileTimeString::baseName(__FILE__) returns "macros.h" and not /path/to/Marlin/src/core/macros.h
-    constexpr const char* baseName(const char* str) {
+    constexpr const char* baseName(const char *str) {
       return containsSlash(str) ? findLastSlashPos(findStringEnd(str)) : str;
     }
   }
 
   #define ONLY_FILENAME CompileTimeString::baseName(__FILE__)
 
 #else
 
   #define MIN_2(a,b)      ((a)<(b)?(a):(b))
   #define MIN_3(a,V...)   MIN_2(a,MIN_2(V))

commit a46e0257252bcd50f4c7acb04215f3ad2a92047c
Author: Axel <ansepulveda@uc.cl>
Date:   Wed Mar 3 20:46:32 2021 -0300

    TPARA - 3DOF robot arm IK (#21005)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 9b07af3618..d7043ba523 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -97,20 +97,21 @@
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 #define TBI32(N,B) (N ^= _BV32(B))
 
 #define cu(x)      ({__typeof__(x) _x = (x); (_x)*(_x)*(_x);})
 #define RADIANS(d) ((d)*float(M_PI)/180.0f)
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
+#define NORMSQ(x,y,z) (sq(x)+sq(y)+sq(z))
 
 #define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ({__typeof__(a) _a = (a); (_a>0)-(_a<0);})
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
 // Macros to constrain values
 #ifdef __cplusplus
 

commit ec42be346d5c0d072feb8a1b63ef2fdbd6dc1e98
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Fri Feb 26 23:54:46 2021 +0100

    Fix and improve G-code queue (#21122)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 16e18ac902..9b07af3618 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -342,20 +342,45 @@
   // If the method exists, this is inlined and does not cost anything. Else, an "empty" wrapper is created, returning a default value
   #define CALL_IF_EXISTS_IMPL(Return, Method, ...) \
     HAS_MEMBER_IMPL(Method) \
     namespace Private { \
       template <typename T, typename ... Args> FORCE_INLINE typename enable_if<HasMember_ ## Method <T>::value, Return>::type Call_ ## Method(T * t, Args... a) { return static_cast<Return>(t->Method(a...)); } \
                                                       _UNUSED static                                                  Return  Call_ ## Method(...) { return __VA_ARGS__; } \
     }
   #define CALL_IF_EXISTS(Return, That, Method, ...) \
     static_cast<Return>(Private::Call_ ## Method(That, ##__VA_ARGS__))
 
+  // Compile-time string manipulation
+  namespace CompileTimeString {
+    // Simple compile-time parser to find the position of the end of a string
+    constexpr const char* findStringEnd(const char *str) {
+      return *str ? findStringEnd(str + 1) : str;
+    }
+
+    // Check whether a string contains a slash
+    constexpr bool containsSlash(const char *str) {
+      return *str == '/' ? true : (*str ? containsSlash(str + 1) : false);
+    }
+    // Find the last position of the slash
+    constexpr const char* findLastSlashPos(const char* str) {
+      return *str == '/' ? (str + 1) : findLastSlashPos(str - 1);
+    }
+    // Compile-time evaluation of the last part of a file path
+    // Typically used to shorten the path to file in compiled strings
+    // CompileTimeString::baseName(__FILE__) returns "macros.h" and not /path/to/Marlin/src/core/macros.h
+    constexpr const char* baseName(const char* str) {
+      return containsSlash(str) ? findLastSlashPos(findStringEnd(str)) : str;
+    }
+  }
+
+  #define ONLY_FILENAME CompileTimeString::baseName(__FILE__)
+
 #else
 
   #define MIN_2(a,b)      ((a)<(b)?(a):(b))
   #define MIN_3(a,V...)   MIN_2(a,MIN_2(V))
   #define MIN_4(a,V...)   MIN_2(a,MIN_3(V))
   #define MIN_5(a,V...)   MIN_2(a,MIN_4(V))
   #define MIN_6(a,V...)   MIN_2(a,MIN_5(V))
   #define MIN_7(a,V...)   MIN_2(a,MIN_6(V))
   #define MIN_8(a,V...)   MIN_2(a,MIN_7(V))
   #define MIN_9(a,V...)   MIN_2(a,MIN_8(V))

commit 662d81c801eaa6323ef8f5c99fb2d2206812a0ce
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Feb 8 21:27:00 2021 -0600

    Ender 3 V2 DWIN cleanup (#21026)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 0112dbc736..16e18ac902 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -123,34 +123,34 @@
   }
   template <class V, class N1, class N2> static inline constexpr void LIMIT(V& v, const N1 n1, const N2 n2) {
     if (n1 > v) v = n1;
     else if (n2 < v) v = n2;
   }
 
 #else
 
   #define NOLESS(v, n) \
     do{ \
-      __typeof__(n) _n = (n); \
+      __typeof__(v) _n = (n); \
       if (_n > v) v = _n; \
     }while(0)
 
   #define NOMORE(v, n) \
     do{ \
-      __typeof__(n) _n = (n); \
+      __typeof__(v) _n = (n); \
       if (_n < v) v = _n; \
     }while(0)
 
   #define LIMIT(v, n1, n2) \
     do{ \
-      __typeof__(n1) _n1 = (n1); \
-      __typeof__(n2) _n2 = (n2); \
+      __typeof__(v) _n1 = (n1); \
+      __typeof__(v) _n2 = (n2); \
       if (_n1 > v) v = _n1; \
       else if (_n2 < v) v = _n2; \
     }while(0)
 
 #endif
 
 // Macros to chain up to 14 conditions
 #define _DO_1(W,C,A)       (_##W##_1(A))
 #define _DO_2(W,C,A,B)     (_##W##_1(A) C _##W##_1(B))
 #define _DO_3(W,C,A,V...)  (_##W##_1(A) C _DO_2(W,C,V))

commit e7c711996bd3080f5e343eff5556736cbf2e2416
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Mon Feb 8 07:37:24 2021 +0100

    Serial refactor. Default 8-bit ECHO to int, not char (#20985)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 8361248e1c..0112dbc736 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -314,20 +314,26 @@
       template<class T, class ... Ts> static inline constexpr const T _MAX(T V, Ts... Vs) { return _MAX(V, _MAX(Vs...)); }
 
     }
 
   #endif
 
   // C++11 solution that is standard compliant. <type_traits> is not available on all platform
   namespace Private {
     template<bool, typename _Tp = void> struct enable_if { };
     template<typename _Tp>              struct enable_if<true, _Tp> { typedef _Tp type; };
+
+    template<typename T, typename U> struct is_same { enum { value = false }; };
+    template<typename T> struct is_same<T, T> { enum { value = true }; };
+
+    template <typename T, typename ... Args> struct first_type_of { typedef T type; };
+    template <typename T> struct first_type_of<T> { typedef T type; };
   }
   // C++11 solution using SFINAE to detect the existance of a member in a class at compile time.
   // It creates a HasMember<Type> structure containing 'value' set to true if the member exists
   #define HAS_MEMBER_IMPL(Member) \
     namespace Private { \
       template <typename Type, typename Yes=char, typename No=long> struct HasMember_ ## Member { \
         template <typename C> static Yes& test( decltype(&C::Member) ) ; \
         template <typename C> static No& test(...); \
         enum { value = sizeof(test<Type>(0)) == sizeof(Yes) }; }; \
     }

commit 1c19af2c8fd95ff6da86c9f8eb18166805ea0097
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Sat Feb 6 05:43:51 2021 +0100

    Fix ARM delay function (#20901)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 905b85d56d..8361248e1c 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -54,20 +54,22 @@
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define NO_INLINE      __attribute__((noinline))
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
+#define IS_CONSTEXPR(...) __builtin_constant_p(__VA_ARGS__) // Only valid solution with C++14. Should use std::is_constant_evaluated() in C++20 instead
+
 #ifndef UNUSED
   #define UNUSED(x) ((void)(x))
 #endif
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle

commit c74f972627ab8dcf69a637268cf86682959bd18e
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Mon Feb 1 01:18:39 2021 +0100

    LVGL UI G-code console (#20755)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index dcc688ae29..905b85d56d 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -313,22 +313,22 @@
 
     }
 
   #endif
 
   // C++11 solution that is standard compliant. <type_traits> is not available on all platform
   namespace Private {
     template<bool, typename _Tp = void> struct enable_if { };
     template<typename _Tp>              struct enable_if<true, _Tp> { typedef _Tp type; };
   }
-  // C++11 solution using SFINAE to detect the existance of a member in a class at compile time. 
-  // It creates a HasMember<Type> structure containing 'value' set to true if the member exists  
+  // C++11 solution using SFINAE to detect the existance of a member in a class at compile time.
+  // It creates a HasMember<Type> structure containing 'value' set to true if the member exists
   #define HAS_MEMBER_IMPL(Member) \
     namespace Private { \
       template <typename Type, typename Yes=char, typename No=long> struct HasMember_ ## Member { \
         template <typename C> static Yes& test( decltype(&C::Member) ) ; \
         template <typename C> static No& test(...); \
         enum { value = sizeof(test<Type>(0)) == sizeof(Yes) }; }; \
     }
 
   // Call the method if it exists, but do nothing if it does not. The method is detected at compile time.
   // If the method exists, this is inlined and does not cost anything. Else, an "empty" wrapper is created, returning a default value

commit 9e004a94963771167bb3f5d6fa51ccd671a27a19
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Fri Jan 29 02:59:16 2021 +0100

    Optimize serial output code for size (#20911)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index a0ccebc078..dcc688ae29 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -46,20 +46,21 @@
 #define _E1DIAG_ 401
 #define _E2DIAG_ 402
 #define _E3DIAG_ 403
 #define _E4DIAG_ 404
 #define _E5DIAG_ 405
 #define _E6DIAG_ 406
 #define _E7DIAG_ 407
 
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
+#define NO_INLINE      __attribute__((noinline))
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
 #ifndef UNUSED
   #define UNUSED(x) ((void)(x))
 #endif

commit 3f01b222b2b4f77cff66096dd5a18a64828e1fa4
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Thu Jan 28 09:02:06 2021 +0100

    Refactor serial class with templates (#20783)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 63ef597034..a0ccebc078 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -307,20 +307,46 @@
       template <class L, class R> static inline constexpr auto _MAX(const L lhs, const R rhs) -> decltype(lhs + rhs) {
         return lhs > rhs ? lhs : rhs;
       }
       template<class T, class ... Ts> static inline constexpr const T _MIN(T V, Ts... Vs) { return _MIN(V, _MIN(Vs...)); }
       template<class T, class ... Ts> static inline constexpr const T _MAX(T V, Ts... Vs) { return _MAX(V, _MAX(Vs...)); }
 
     }
 
   #endif
 
+  // C++11 solution that is standard compliant. <type_traits> is not available on all platform
+  namespace Private {
+    template<bool, typename _Tp = void> struct enable_if { };
+    template<typename _Tp>              struct enable_if<true, _Tp> { typedef _Tp type; };
+  }
+  // C++11 solution using SFINAE to detect the existance of a member in a class at compile time. 
+  // It creates a HasMember<Type> structure containing 'value' set to true if the member exists  
+  #define HAS_MEMBER_IMPL(Member) \
+    namespace Private { \
+      template <typename Type, typename Yes=char, typename No=long> struct HasMember_ ## Member { \
+        template <typename C> static Yes& test( decltype(&C::Member) ) ; \
+        template <typename C> static No& test(...); \
+        enum { value = sizeof(test<Type>(0)) == sizeof(Yes) }; }; \
+    }
+
+  // Call the method if it exists, but do nothing if it does not. The method is detected at compile time.
+  // If the method exists, this is inlined and does not cost anything. Else, an "empty" wrapper is created, returning a default value
+  #define CALL_IF_EXISTS_IMPL(Return, Method, ...) \
+    HAS_MEMBER_IMPL(Method) \
+    namespace Private { \
+      template <typename T, typename ... Args> FORCE_INLINE typename enable_if<HasMember_ ## Method <T>::value, Return>::type Call_ ## Method(T * t, Args... a) { return static_cast<Return>(t->Method(a...)); } \
+                                                      _UNUSED static                                                  Return  Call_ ## Method(...) { return __VA_ARGS__; } \
+    }
+  #define CALL_IF_EXISTS(Return, That, Method, ...) \
+    static_cast<Return>(Private::Call_ ## Method(That, ##__VA_ARGS__))
+
 #else
 
   #define MIN_2(a,b)      ((a)<(b)?(a):(b))
   #define MIN_3(a,V...)   MIN_2(a,MIN_2(V))
   #define MIN_4(a,V...)   MIN_2(a,MIN_3(V))
   #define MIN_5(a,V...)   MIN_2(a,MIN_4(V))
   #define MIN_6(a,V...)   MIN_2(a,MIN_5(V))
   #define MIN_7(a,V...)   MIN_2(a,MIN_6(V))
   #define MIN_8(a,V...)   MIN_2(a,MIN_7(V))
   #define MIN_9(a,V...)   MIN_2(a,MIN_8(V))

commit b8186b50817d33999a414400d82d876da7b40ee9
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jan 25 08:32:58 2021 -0600

    Apply SEC_TO_MS and other fixes

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index d5b3342437..63ef597034 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -155,20 +155,21 @@
 #define _DO_5(W,C,A,V...)  (_##W##_1(A) C _DO_4(W,C,V))
 #define _DO_6(W,C,A,V...)  (_##W##_1(A) C _DO_5(W,C,V))
 #define _DO_7(W,C,A,V...)  (_##W##_1(A) C _DO_6(W,C,V))
 #define _DO_8(W,C,A,V...)  (_##W##_1(A) C _DO_7(W,C,V))
 #define _DO_9(W,C,A,V...)  (_##W##_1(A) C _DO_8(W,C,V))
 #define _DO_10(W,C,A,V...) (_##W##_1(A) C _DO_9(W,C,V))
 #define _DO_11(W,C,A,V...) (_##W##_1(A) C _DO_10(W,C,V))
 #define _DO_12(W,C,A,V...) (_##W##_1(A) C _DO_11(W,C,V))
 #define _DO_13(W,C,A,V...) (_##W##_1(A) C _DO_12(W,C,V))
 #define _DO_14(W,C,A,V...) (_##W##_1(A) C _DO_13(W,C,V))
+#define _DO_15(W,C,A,V...) (_##W##_1(A) C _DO_14(W,C,V))
 #define __DO_N(W,C,N,V...) _DO_##N(W,C,V)
 #define _DO_N(W,C,N,V...)  __DO_N(W,C,N,V)
 #define DO(W,C,V...)       (_DO_N(W,C,NUM_ARGS(V),V))
 
 // Macros to support option testing
 #define _CAT(a,V...) a##V
 #define CAT(a,V...) _CAT(a,V)
 
 #define _ISENA_     ~,1
 #define _ISENA_1    ~,1

commit b41f41589a1c9bbc1adc1ceffc42c0c87c805526
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 16 19:03:06 2021 -0600

    General cleanup, use _BV

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 56e80b87dc..d5b3342437 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -77,31 +77,27 @@
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV
 #define _BV(n) (1<<(n))
 #define TEST(n,b) (!!((n)&_BV(b)))
 #define SET_BIT_TO(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
-
 #ifndef SBI
-  #define SBI(A,B) (A |= (1 << (B)))
+  #define SBI(A,B) (A |= _BV(B))
 #endif
-
 #ifndef CBI
-  #define CBI(A,B) (A &= ~(1 << (B)))
+  #define CBI(A,B) (A &= ~_BV(B))
 #endif
-
 #define TBI(N,B) (N ^= _BV(B))
-
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 #define TBI32(N,B) (N ^= _BV32(B))
 
 #define cu(x)      ({__typeof__(x) _x = (x); (_x)*(_x)*(_x);})
 #define RADIANS(d) ((d)*float(M_PI)/180.0f)
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))

commit 90a2b482e6e59079d7cad1bc04b87a82fe99816c
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Tue Dec 29 01:07:11 2020 -0300

    LVGL G-code preview. Legacy MKS WiFi Cura plugin compatibility (#20589)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 058008646f..56e80b87dc 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -209,20 +209,21 @@
 #define _PINEX_1            PIN_EXISTS
 #define PINS_EXIST(V...)    DO(PINEX,&&,V)
 #define ANY_PIN(V...)       DO(PINEX,||,V)
 
 #define BUTTON_EXISTS(BN)   (defined(BTN_##BN) && BTN_##BN >= 0)
 #define _BTNEX_1            BUTTON_EXISTS
 #define BUTTONS_EXIST(V...) DO(BTNEX,&&,V)
 #define ANY_BUTTON(V...)    DO(BTNEX,||,V)
 
 #define WITHIN(N,L,H)       ((N) >= (L) && (N) <= (H))
+#define ISEOL(C)            ((C) == '\n' || (C) == '\r')
 #define NUMERIC(a)          WITHIN(a, '0', '9')
 #define DECIMAL(a)          (NUMERIC(a) || a == '.')
 #define HEXCHR(a)           (NUMERIC(a) ? (a) - '0' : WITHIN(a, 'a', 'f') ? ((a) - 'a' + 10)  : WITHIN(a, 'A', 'F') ? ((a) - 'A' + 10) : -1)
 #define NUMERIC_SIGNED(a)   (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a)   (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a)            (sizeof(a)/sizeof(*a))
 #define ZERO(a)             memset(a,0,sizeof(a))
 #define COPY(a,b) do{ \
     static_assert(sizeof(a[0]) == sizeof(b[0]), "COPY: '" STRINGIFY(a) "' and '" STRINGIFY(b) "' types (sizes) don't match!"); \
     memcpy(&a[0],&b[0],_MIN(sizeof(a),sizeof(b))); \

commit 844a8c7074d555bda31a53ae834cee5fac020ca8
Author: ubik2 <ubik2@users.noreply.github.com>
Date:   Wed Dec 23 16:19:48 2020 -0800

    Add OPTIMIZED_MESH_STORAGE option (for UBL) (#20371)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 76e55ad3d2..058008646f 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -279,20 +279,21 @@
 //
 // Maths macros that can be overridden by HAL
 //
 #define ACOS(x)     acosf(x)
 #define ATAN2(y, x) atan2f(y, x)
 #define POW(x, y)   powf(x, y)
 #define SQRT(x)     sqrtf(x)
 #define RSQRT(x)    (1.0f / sqrtf(x))
 #define CEIL(x)     ceilf(x)
 #define FLOOR(x)    floorf(x)
+#define TRUNC(x)    truncf(x)
 #define LROUND(x)   lroundf(x)
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 
 // Use NUM_ARGS(__VA_ARGS__) to get the number of variadic arguments
 #define _NUM_ARGS(_,Z,Y,X,W,V,U,T,S,R,Q,P,O,N,M,L,K,J,I,H,G,F,E,D,C,B,A,OUT,...) OUT
 #define NUM_ARGS(V...) _NUM_ARGS(0,V,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
 
 #ifdef __cplusplus
 

commit a0c8d348a0baa179a13bc47be6edce4bb652dac9
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Tue Dec 22 04:51:29 2020 -0800

    Anet ET4 / ET4P and Anet TFT28 / TFT35 (#20280)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 2e38fad30e..76e55ad3d2 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -144,33 +144,35 @@
   #define LIMIT(v, n1, n2) \
     do{ \
       __typeof__(n1) _n1 = (n1); \
       __typeof__(n2) _n2 = (n2); \
       if (_n1 > v) v = _n1; \
       else if (_n2 < v) v = _n2; \
     }while(0)
 
 #endif
 
-// Macros to chain up to 12 conditions
+// Macros to chain up to 14 conditions
 #define _DO_1(W,C,A)       (_##W##_1(A))
 #define _DO_2(W,C,A,B)     (_##W##_1(A) C _##W##_1(B))
 #define _DO_3(W,C,A,V...)  (_##W##_1(A) C _DO_2(W,C,V))
 #define _DO_4(W,C,A,V...)  (_##W##_1(A) C _DO_3(W,C,V))
 #define _DO_5(W,C,A,V...)  (_##W##_1(A) C _DO_4(W,C,V))
 #define _DO_6(W,C,A,V...)  (_##W##_1(A) C _DO_5(W,C,V))
 #define _DO_7(W,C,A,V...)  (_##W##_1(A) C _DO_6(W,C,V))
 #define _DO_8(W,C,A,V...)  (_##W##_1(A) C _DO_7(W,C,V))
 #define _DO_9(W,C,A,V...)  (_##W##_1(A) C _DO_8(W,C,V))
 #define _DO_10(W,C,A,V...) (_##W##_1(A) C _DO_9(W,C,V))
 #define _DO_11(W,C,A,V...) (_##W##_1(A) C _DO_10(W,C,V))
 #define _DO_12(W,C,A,V...) (_##W##_1(A) C _DO_11(W,C,V))
+#define _DO_13(W,C,A,V...) (_##W##_1(A) C _DO_12(W,C,V))
+#define _DO_14(W,C,A,V...) (_##W##_1(A) C _DO_13(W,C,V))
 #define __DO_N(W,C,N,V...) _DO_##N(W,C,V)
 #define _DO_N(W,C,N,V...)  __DO_N(W,C,N,V)
 #define DO(W,C,V...)       (_DO_N(W,C,NUM_ARGS(V),V))
 
 // Macros to support option testing
 #define _CAT(a,V...) a##V
 #define CAT(a,V...) _CAT(a,V)
 
 #define _ISENA_     ~,1
 #define _ISENA_1    ~,1

commit 3a396a25dc9e33be2c18a1bdc23600295e42c82e
Author: Jason Smith <jason.inet@gmail.com>
Date:   Wed Nov 25 22:37:18 2020 -0800

    Retire HAL for STM32F4 / F7 (#20153)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 7985706173..2e38fad30e 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -54,25 +54,21 @@
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
 #ifndef UNUSED
-  #if defined(ARDUINO_ARCH_STM32) && !defined(STM32GENERIC)
-    #define UNUSED(X) (void)X
-  #else
-    #define UNUSED(x) ((void)(x))
-  #endif
+  #define UNUSED(x) ((void)(x))
 #endif
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 

commit 06bf3ccfb7a19c972e5f40816d49e3860711f976
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Nov 7 18:28:29 2020 -0600

    Add alternative TERN macros

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 7948e8ce87..7985706173 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -189,20 +189,23 @@
 #define COUNT_ENABLED(V...) DO(ENA,+,V)
 
 #define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION converted to '0' or '1'
 #define TERN0(O,A)          _TERN(_ENA_1(O),0,A)    // OPTION converted to A or '0'
 #define TERN1(O,A)          _TERN(_ENA_1(O),1,A)    // OPTION converted to A or '1'
 #define TERN_(O,A)          _TERN(_ENA_1(O),,A)     // OPTION converted to A or '<nul>'
 #define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
 #define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
 #define ___TERN(P,V...)     THIRD(P,V)              // If first argument has a comma, A. Else B.
 
+#define IF_ENABLED          TERN_
+#define IF_DISABLED(O,A)    TERN(O,,A)
+
 #define ANY(V...)          !DISABLED(V)
 #define NONE(V...)          DISABLED(V)
 #define ALL(V...)           ENABLED(V)
 #define BOTH(V1,V2)         ALL(V1,V2)
 #define EITHER(V1,V2)       ANY(V1,V2)
 #define MANY(V...)          (COUNT_ENABLED(V) > 1)
 
 // Macros to support pins/buttons exist testing
 #define PIN_EXISTS(PN)      (defined(PN##_PIN) && PN##_PIN >= 0)
 #define _PINEX_1            PIN_EXISTS

commit f6ffbe548c81abfeecc996c8f2bffd27cabe0014
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Oct 15 03:00:27 2020 -0500

    TFT Presets, Generic options, Sanity checks (#19723)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 21bb32c4cf..7948e8ce87 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -163,50 +163,52 @@
 #define _DO_5(W,C,A,V...)  (_##W##_1(A) C _DO_4(W,C,V))
 #define _DO_6(W,C,A,V...)  (_##W##_1(A) C _DO_5(W,C,V))
 #define _DO_7(W,C,A,V...)  (_##W##_1(A) C _DO_6(W,C,V))
 #define _DO_8(W,C,A,V...)  (_##W##_1(A) C _DO_7(W,C,V))
 #define _DO_9(W,C,A,V...)  (_##W##_1(A) C _DO_8(W,C,V))
 #define _DO_10(W,C,A,V...) (_##W##_1(A) C _DO_9(W,C,V))
 #define _DO_11(W,C,A,V...) (_##W##_1(A) C _DO_10(W,C,V))
 #define _DO_12(W,C,A,V...) (_##W##_1(A) C _DO_11(W,C,V))
 #define __DO_N(W,C,N,V...) _DO_##N(W,C,V)
 #define _DO_N(W,C,N,V...)  __DO_N(W,C,N,V)
-#define DO(W,C,V...)       _DO_N(W,C,NUM_ARGS(V),V)
+#define DO(W,C,V...)       (_DO_N(W,C,NUM_ARGS(V),V))
 
 // Macros to support option testing
 #define _CAT(a,V...) a##V
 #define CAT(a,V...) _CAT(a,V)
 
 #define _ISENA_     ~,1
 #define _ISENA_1    ~,1
 #define _ISENA_0x1  ~,1
 #define _ISENA_true ~,1
 #define _ISENA(V...)        IS_PROBE(V)
 
 #define _ENA_1(O)           _ISENA(CAT(_IS,CAT(ENA_, O)))
 #define _DIS_1(O)           NOT(_ENA_1(O))
 #define ENABLED(V...)       DO(ENA,&&,V)
 #define DISABLED(V...)      DO(DIS,&&,V)
+#define COUNT_ENABLED(V...) DO(ENA,+,V)
 
 #define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION converted to '0' or '1'
 #define TERN0(O,A)          _TERN(_ENA_1(O),0,A)    // OPTION converted to A or '0'
 #define TERN1(O,A)          _TERN(_ENA_1(O),1,A)    // OPTION converted to A or '1'
 #define TERN_(O,A)          _TERN(_ENA_1(O),,A)     // OPTION converted to A or '<nul>'
 #define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
 #define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
 #define ___TERN(P,V...)     THIRD(P,V)              // If first argument has a comma, A. Else B.
 
 #define ANY(V...)          !DISABLED(V)
 #define NONE(V...)          DISABLED(V)
 #define ALL(V...)           ENABLED(V)
 #define BOTH(V1,V2)         ALL(V1,V2)
 #define EITHER(V1,V2)       ANY(V1,V2)
+#define MANY(V...)          (COUNT_ENABLED(V) > 1)
 
 // Macros to support pins/buttons exist testing
 #define PIN_EXISTS(PN)      (defined(PN##_PIN) && PN##_PIN >= 0)
 #define _PINEX_1            PIN_EXISTS
 #define PINS_EXIST(V...)    DO(PINEX,&&,V)
 #define ANY_PIN(V...)       DO(PINEX,||,V)
 
 #define BUTTON_EXISTS(BN)   (defined(BTN_##BN) && BTN_##BN >= 0)
 #define _BTNEX_1            BUTTON_EXISTS
 #define BUTTONS_EXIST(V...) DO(BTNEX,&&,V)

commit c0920bbf6a2490b7ea66d2a9e828c0f527a6c77b
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Mon Oct 12 18:38:07 2020 -0300

    TFT Refactoring (#19192)
    
    * split tft folder in two: tft for color ui; tft_io for shared tft code
    
    * after the files got moved, now the code was moved to the right place
    
    * classic ui using TFT IO init lcd codes
    
    * feature to compile tft_io when enabled
    
    * compiling fix
    
    * lvgl spi tft working with tft io init codes
    
    * there is no need for separeted fsmc and spi class in lvgl anymore, as tft io handle everything
    
    * remove debug
    
    * base for TFT rotation and mirroring API, and ILI9488 support
    
    * ST7796S rotate and mirror support
    
    * ST7789V rotate and mirror support
    
    * ST7735 rotate and mirror support
    
    * ILI9341 rotate and mirror support
    
    * ILI9328 rotate and mirror support
    
    * R61505 rotate and mirror support
    
    * MKS TFT definitions
    
    * more configs for mks tfts
    
    * update config
    
    * naming typo
    
    * to configure the user interface
    
    * ANYCUBIC_TFT35
    
    * tft configs
    
    * support for SSD1963
    
    * tft display types
    
    * updated conditionals lcd; first board fully working with the new code - all 3 ui!
    
    * compatiblity
    
    * changed name
    
    * move classic ui file name
    
    * rename TURN -> ROTATE
    
    * GRAPHICAL_TFT_ROTATE_180 deprecated
    
    * first fsmc board fully working - chitu v5
    
    * mks robin nano v1.2 + tft 35 ok!
    
    * right pin name
    
    * anycubic tft tested in a TRIGORILLA_PRO
    
    * chitu v6
    
    * nano 32 tft orientation
    
    * mks tft43
    
    * mks tft43 rotation
    
    * fixed LONGER LK tft setup
    
    * GRAPHICAL_TFT_UPSCALE defined by the display type
    
    * better offsets defaults
    
    * Update Configuration.h
    
    * Update tft_fsmc.cpp
    
    * Update Conditionals_LCD.h
    
    * Tweak comments
    
    * update nano tests
    
    * Revert "update nano tests"
    
    This reverts commit a071ebbfad30e28855a4a5695ec8a726542a1a65.
    
    * default tft
    
    * outdated comments
    
    * to not break non-vscode builds
    
    * upscale tft 35
    
    * support tft 180 rotation for color ui
    
    * Each TFT Driver is responsible for its default color mode.
    
    * use auto detect in mks displays, because some of them could be shipped with diferent drivers
    
    * extra s
    
    * unused code
    
    * wrong -1
    
    * missing mirror options
    
    * Smaller regex pattern
    
    * Comment updates
    
    * Clean up old defines
    
    * Apply pins formatting
    
    * GRAPHICAL_TFT_ROTATE_180 => TFT_ROTATE_180
    
    * MKS_ROBIN_TFT_V1_1R
    
    * merge fix
    
    * correct resolution
    
    * auto is default, dont need be there, and it will allow the user to configure it even for named displays
    
    * to not use rotation with MKS_ROBIN_TFT_V1_1R
    
    * i like () in macros
    
    * avoid sleepy commits
    
    * default for st7789 is rgb
    
    * nano follow up
    
    * to allow ili9328 rotation
    
    * default is rgb
    
    * boards merge follow up
    
    * to match bootloader orientation
    
    * HAS_TOUCH_XPT2046 is not hal specific anymore
    
    * lets not forget LPC
    
    * 180 rotation for ili9328 and R61505
    
    * Clean up whitespace
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 72644b195c..21bb32c4cf 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -445,20 +445,26 @@
 
 #define _IF_1(V...) V _IF_1_ELSE
 #define _IF_0(...)    _IF_0_ELSE
 
 #define _IF_1_ELSE(...)
 #define _IF_0_ELSE(V...) V
 
 #define HAS_ARGS(V...) _BOOL(FIRST(_END_OF_ARGUMENTS_ V)())
 #define _END_OF_ARGUMENTS_() 0
 
+
+// Simple Inline IF Macros, friendly to use in other macro definitions
+#define IF(O, A, B) ((O) ? (A) : (B))
+#define IF_0(O, A) IF(O, A, 0)
+#define IF_1(O, A) IF(O, A, 1)
+
 //
 // REPEAT core macros. Recurse N times with ascending I.
 //
 
 // Call OP(I) N times with ascending counter.
 #define _REPEAT(_RPT_I,_RPT_N,_RPT_OP)                        \
   _RPT_OP(_RPT_I)                                             \
   IF_ELSE(SUB1(_RPT_N))                                       \
     ( DEFER2(__REPEAT)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP) ) \
     ( /* Do nothing */ )

commit 631457ffea46debd43079137e09bc2d36b5d4fe4
Author: Victor Oliveira <rhapsodyv@gmail.com>
Date:   Fri Oct 9 08:25:23 2020 -0300

    Support for Debug Codes - Dnnn (#19225)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 5fc1081019..72644b195c 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -208,20 +208,21 @@
 #define ANY_PIN(V...)       DO(PINEX,||,V)
 
 #define BUTTON_EXISTS(BN)   (defined(BTN_##BN) && BTN_##BN >= 0)
 #define _BTNEX_1            BUTTON_EXISTS
 #define BUTTONS_EXIST(V...) DO(BTNEX,&&,V)
 #define ANY_BUTTON(V...)    DO(BTNEX,||,V)
 
 #define WITHIN(N,L,H)       ((N) >= (L) && (N) <= (H))
 #define NUMERIC(a)          WITHIN(a, '0', '9')
 #define DECIMAL(a)          (NUMERIC(a) || a == '.')
+#define HEXCHR(a)           (NUMERIC(a) ? (a) - '0' : WITHIN(a, 'a', 'f') ? ((a) - 'a' + 10)  : WITHIN(a, 'A', 'F') ? ((a) - 'A' + 10) : -1)
 #define NUMERIC_SIGNED(a)   (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a)   (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a)            (sizeof(a)/sizeof(*a))
 #define ZERO(a)             memset(a,0,sizeof(a))
 #define COPY(a,b) do{ \
     static_assert(sizeof(a[0]) == sizeof(b[0]), "COPY: '" STRINGIFY(a) "' and '" STRINGIFY(b) "' types (sizes) don't match!"); \
     memcpy(&a[0],&b[0],_MIN(sizeof(a),sizeof(b))); \
   }while(0)
 
 // Macros for initializing arrays

commit 852e5ae0421810ecc6f44631237208030e70751f
Author: sherwin-dc <59867245+sherwin-dc@users.noreply.github.com>
Date:   Sun Aug 9 09:00:42 2020 +0800

    Password via G-code and MarlinUI (#18399)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 3bd273872a..5fc1081019 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -335,55 +335,68 @@
   #define MAX_8(a,V...)   MAX_2(a,MAX_7(V))
   #define MAX_9(a,V...)   MAX_2(a,MAX_8(V))
   #define MAX_10(a,V...)  MAX_2(a,MAX_9(V))
   #define __MAX_N(N,V...) MAX_##N(V)
   #define _MAX_N(N,V...)  __MAX_N(N,V)
   #define _MAX(V...)      _MAX_N(NUM_ARGS(V), V)
 
 #endif
 
 // Macros for adding
-#define INC_0 1
-#define INC_1 2
-#define INC_2 3
-#define INC_3 4
-#define INC_4 5
-#define INC_5 6
-#define INC_6 7
-#define INC_7 8
-#define INC_8 9
+#define INC_0   1
+#define INC_1   2
+#define INC_2   3
+#define INC_3   4
+#define INC_4   5
+#define INC_5   6
+#define INC_6   7
+#define INC_7   8
+#define INC_8   9
+#define INC_9  10
+#define INC_10 11
+#define INC_11 12
+#define INC_12 13
+#define INC_13 14
+#define INC_14 15
+#define INC_15 16
 #define INCREMENT_(n) INC_##n
 #define INCREMENT(n) INCREMENT_(n)
 
 #define ADD0(N)  N
 #define ADD1(N)  INCREMENT_(N)
 #define ADD2(N)  ADD1(ADD1(N))
 #define ADD3(N)  ADD1(ADD2(N))
 #define ADD4(N)  ADD2(ADD2(N))
 #define ADD5(N)  ADD2(ADD3(N))
 #define ADD6(N)  ADD3(ADD3(N))
 #define ADD7(N)  ADD3(ADD4(N))
 #define ADD8(N)  ADD4(ADD4(N))
 #define ADD9(N)  ADD4(ADD5(N))
 #define ADD10(N) ADD5(ADD5(N))
 
 // Macros for subtracting
-#define DEC_0 0
-#define DEC_1 0
-#define DEC_2 1
-#define DEC_3 2
-#define DEC_4 3
-#define DEC_5 4
-#define DEC_6 5
-#define DEC_7 6
-#define DEC_8 7
-#define DEC_9 8
+#define DEC_0   0
+#define DEC_1   0
+#define DEC_2   1
+#define DEC_3   2
+#define DEC_4   3
+#define DEC_5   4
+#define DEC_6   5
+#define DEC_7   6
+#define DEC_8   7
+#define DEC_9   8
+#define DEC_10  9
+#define DEC_11 10
+#define DEC_12 11
+#define DEC_13 12
+#define DEC_14 13
+#define DEC_15 14
 #define DECREMENT_(n) DEC_##n
 #define DECREMENT(n) DECREMENT_(n)
 
 #define SUB0(N)  N
 #define SUB1(N)  DECREMENT_(N)
 #define SUB2(N)  SUB1(SUB1(N))
 #define SUB3(N)  SUB1(SUB2(N))
 #define SUB4(N)  SUB2(SUB2(N))
 #define SUB5(N)  SUB2(SUB3(N))
 #define SUB6(N)  SUB3(SUB3(N))

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 2f9273ec80..3bd273872a 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #if !defined(__has_include)
   #define __has_include(...) 1
 #endif
 
 #define ABCE 4
 #define XYZE 4

commit 25c7c43a829e3bbc581aae20d24b724a7ad8fbdb
Author: Fabio Santos <fabiosan@live.com>
Date:   Mon Jun 22 19:12:45 2020 -0700

    Add SERIAL_FLOAT_PRECISION option (#18367)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index cf0fc2c5db..2f9273ec80 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -263,21 +263,21 @@
   template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
 #else
   #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
 #endif
 
 #define UNEAR_ZERO(x) ((x) < 0.000001f)
 #define NEAR_ZERO(x) WITHIN(x, -0.000001f, 0.000001f)
 #define NEAR(x,y) NEAR_ZERO((x)-(y))
 
 #define RECIPROCAL(x) (NEAR_ZERO(x) ? 0 : (1 / float(x)))
-#define FIXFLOAT(f)  ({__typeof__(f) _f = (f); _f + (_f < 0 ? -0.00005f : 0.00005f);})
+#define FIXFLOAT(f)  ({__typeof__(f) _f = (f); _f + (_f < 0 ? -0.0000005f : 0.0000005f);})
 
 //
 // Maths macros that can be overridden by HAL
 //
 #define ACOS(x)     acosf(x)
 #define ATAN2(y, x) atan2f(y, x)
 #define POW(x, y)   powf(x, y)
 #define SQRT(x)     sqrtf(x)
 #define RSQRT(x)    (1.0f / sqrtf(x))
 #define CEIL(x)     ceilf(x)

commit 424569b4c4bf112a3939724b30bad528a76a2b08
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jun 18 15:23:03 2020 -0500

    Power monitor and display (#17437)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index ebcb9ebcfb..cf0fc2c5db 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -90,24 +90,27 @@
 #define SET_BIT_TO(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
 
 #ifndef SBI
   #define SBI(A,B) (A |= (1 << (B)))
 #endif
 
 #ifndef CBI
   #define CBI(A,B) (A &= ~(1 << (B)))
 #endif
 
+#define TBI(N,B) (N ^= _BV(B))
+
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
+#define TBI32(N,B) (N ^= _BV32(B))
 
 #define cu(x)      ({__typeof__(x) _x = (x); (_x)*(_x)*(_x);})
 #define RADIANS(d) ((d)*float(M_PI)/180.0f)
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
 #define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ({__typeof__(a) _a = (a); (_a>0)-(_a<0);})

commit d4aa1977443d51c483f22a177dfd65bd241a2b29
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 12 01:41:10 2020 -0500

    Add MAP macro

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index edf041f70a..ebcb9ebcfb 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -473,10 +473,21 @@
 #define _RREPEAT2(_RPT_I,_RPT_N,_RPT_OP,V...)                     \
   _RPT_OP(_RPT_I,V)                                               \
   IF_ELSE(SUB1(_RPT_N))                                           \
     ( DEFER2(__RREPEAT2)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP,V) ) \
     ( /* Do nothing */ )
 #define __RREPEAT2() _RREPEAT2
 #define RREPEAT_S(S,N,OP)        EVAL1024(_RREPEAT(S,SUB##S(N),OP))
 #define RREPEAT(N,OP)            RREPEAT_S(0,N,OP)
 #define RREPEAT2_S(S,N,OP,V...)  EVAL1024(_RREPEAT2(S,SUB##S(N),OP,V))
 #define RREPEAT2(N,OP,V...)      RREPEAT2_S(0,N,OP,V)
+
+// See https://github.com/swansontec/map-macro
+#define MAP_OUT
+#define MAP_END(...)
+#define MAP_GET_END() 0, MAP_END
+#define MAP_NEXT0(test, next, ...) next MAP_OUT
+#define MAP_NEXT1(test, next) MAP_NEXT0 (test, next, 0)
+#define MAP_NEXT(test, next)  MAP_NEXT1 (MAP_GET_END test, next)
+#define MAP0(f, x, peek, ...) f(x) MAP_NEXT (peek, MAP1) (f, peek, __VA_ARGS__)
+#define MAP1(f, x, peek, ...) f(x) MAP_NEXT (peek, MAP0) (f, peek, __VA_ARGS__)
+#define MAP(f, ...) EVAL512 (MAP1 (f, __VA_ARGS__, (), 0))

commit ab19a27f6334a12519b5f66af167aa4518cea4f0
Author: espr14 <46957311+espr14@users.noreply.github.com>
Date:   Tue May 12 08:01:16 2020 +0200

    Prevent some macro pitfalls (#17956)
    
    Co-authored-by: espr14 <espr14@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index edab6ae5bc..edf041f70a 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -95,50 +95,48 @@
 
 #ifndef CBI
   #define CBI(A,B) (A &= ~(1 << (B)))
 #endif
 
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 
-#define cu(x)      ((x)*(x)*(x))
+#define cu(x)      ({__typeof__(x) _x = (x); (_x)*(_x)*(_x);})
 #define RADIANS(d) ((d)*float(M_PI)/180.0f)
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
 #define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
-#define SIGN(a) ((a>0)-(a<0))
+#define SIGN(a) ({__typeof__(a) _a = (a); (_a>0)-(_a<0);})
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
 // Macros to constrain values
 #ifdef __cplusplus
 
   // C++11 solution that is standards compliant.
   template <class V, class N> static inline constexpr void NOLESS(V& v, const N n) {
     if (n > v) v = n;
   }
   template <class V, class N> static inline constexpr void NOMORE(V& v, const N n) {
     if (n < v) v = n;
   }
   template <class V, class N1, class N2> static inline constexpr void LIMIT(V& v, const N1 n1, const N2 n2) {
     if (n1 > v) v = n1;
     else if (n2 < v) v = n2;
   }
 
 #else
 
-  // Using GCC extensions, but Travis GCC version does not like it and gives
-  //  "error: statement-expressions are not allowed outside functions nor in template-argument lists"
   #define NOLESS(v, n) \
     do{ \
       __typeof__(n) _n = (n); \
       if (_n > v) v = _n; \
     }while(0)
 
   #define NOMORE(v, n) \
     do{ \
       __typeof__(n) _n = (n); \
       if (_n < v) v = _n; \
@@ -262,21 +260,21 @@
   template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
 #else
   #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
 #endif
 
 #define UNEAR_ZERO(x) ((x) < 0.000001f)
 #define NEAR_ZERO(x) WITHIN(x, -0.000001f, 0.000001f)
 #define NEAR(x,y) NEAR_ZERO((x)-(y))
 
 #define RECIPROCAL(x) (NEAR_ZERO(x) ? 0 : (1 / float(x)))
-#define FIXFLOAT(f) (f + (f < 0 ? -0.00005f : 0.00005f))
+#define FIXFLOAT(f)  ({__typeof__(f) _f = (f); _f + (_f < 0 ? -0.00005f : 0.00005f);})
 
 //
 // Maths macros that can be overridden by HAL
 //
 #define ACOS(x)     acosf(x)
 #define ATAN2(y, x) atan2f(y, x)
 #define POW(x, y)   powf(x, y)
 #define SQRT(x)     sqrtf(x)
 #define RSQRT(x)    (1.0f / sqrtf(x))
 #define CEIL(x)     ceilf(x)

commit 39f703310b8da3b95ad08c3eecd642d76e88fd78
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 5 17:55:35 2020 -0500

    Move S_FMT to HAL, apply to mixer

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 88a807c570..edab6ae5bc 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -69,27 +69,20 @@
 #endif
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
-// Macros to make sprintf_P read from PROGMEM (AVR extension)
-#ifdef __AVR__
-  #define S_FMT "%S"
-#else
-  #define S_FMT "%s"
-#endif
-
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV
 #define _BV(n) (1<<(n))

commit 66676e6dd422f0518102be5375648a68d4de07c8
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 27 10:19:01 2020 -0500

    Remove extra macro

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index c84d7b8116..88a807c570 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -285,22 +285,20 @@
 #define ATAN2(y, x) atan2f(y, x)
 #define POW(x, y)   powf(x, y)
 #define SQRT(x)     sqrtf(x)
 #define RSQRT(x)    (1.0f / sqrtf(x))
 #define CEIL(x)     ceilf(x)
 #define FLOOR(x)    floorf(x)
 #define LROUND(x)   lroundf(x)
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 
-#define I2C_ADDRESS(A) (typeof(A))(TERN(TARGET_LPC1768, (A) << 1, A))
-
 // Use NUM_ARGS(__VA_ARGS__) to get the number of variadic arguments
 #define _NUM_ARGS(_,Z,Y,X,W,V,U,T,S,R,Q,P,O,N,M,L,K,J,I,H,G,F,E,D,C,B,A,OUT,...) OUT
 #define NUM_ARGS(V...) _NUM_ARGS(0,V,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
 
 #ifdef __cplusplus
 
   #ifndef _MINMAX_H_
   #define _MINMAX_H_
 
     extern "C++" {

commit 035d6cd16d8edcbc76d8a1aa4a1d2e2e3cde60ba
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 27 09:42:51 2020 -0500

    Patch i2c, info menu

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 214539d830..c84d7b8116 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -285,21 +285,21 @@
 #define ATAN2(y, x) atan2f(y, x)
 #define POW(x, y)   powf(x, y)
 #define SQRT(x)     sqrtf(x)
 #define RSQRT(x)    (1.0f / sqrtf(x))
 #define CEIL(x)     ceilf(x)
 #define FLOOR(x)    floorf(x)
 #define LROUND(x)   lroundf(x)
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 
-#define I2C_ADDRESS(A) int(TERN(TARGET_LPC1768, (A) << 1, A))
+#define I2C_ADDRESS(A) (typeof(A))(TERN(TARGET_LPC1768, (A) << 1, A))
 
 // Use NUM_ARGS(__VA_ARGS__) to get the number of variadic arguments
 #define _NUM_ARGS(_,Z,Y,X,W,V,U,T,S,R,Q,P,O,N,M,L,K,J,I,H,G,F,E,D,C,B,A,OUT,...) OUT
 #define NUM_ARGS(V...) _NUM_ARGS(0,V,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
 
 #ifdef __cplusplus
 
   #ifndef _MINMAX_H_
   #define _MINMAX_H_
 

commit 011ecc341ae3908ab383130331b535611e661866
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 27 04:33:59 2020 -0500

    Fix I2C_ADDRESS ambiguity

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 765f157e2f..214539d830 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -285,21 +285,21 @@
 #define ATAN2(y, x) atan2f(y, x)
 #define POW(x, y)   powf(x, y)
 #define SQRT(x)     sqrtf(x)
 #define RSQRT(x)    (1.0f / sqrtf(x))
 #define CEIL(x)     ceilf(x)
 #define FLOOR(x)    floorf(x)
 #define LROUND(x)   lroundf(x)
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 
-#define I2C_ADDRESS(A) (TERN(TARGET_LPC1768, (A) << 1, A))
+#define I2C_ADDRESS(A) int(TERN(TARGET_LPC1768, (A) << 1, A))
 
 // Use NUM_ARGS(__VA_ARGS__) to get the number of variadic arguments
 #define _NUM_ARGS(_,Z,Y,X,W,V,U,T,S,R,Q,P,O,N,M,L,K,J,I,H,G,F,E,D,C,B,A,OUT,...) OUT
 #define NUM_ARGS(V...) _NUM_ARGS(0,V,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
 
 #ifdef __cplusplus
 
   #ifndef _MINMAX_H_
   #define _MINMAX_H_
 

commit b700b3cde6102cff68f25555bffe5f112e2111e4
Author: randellhodges <rhodges@taxfodder.com>
Date:   Sat Apr 25 11:35:35 2020 -0500

    Fix M261, i2c EEPROM, i2c Encoder for LPC (#17678)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 899baf7359..765f157e2f 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -285,25 +285,21 @@
 #define ATAN2(y, x) atan2f(y, x)
 #define POW(x, y)   powf(x, y)
 #define SQRT(x)     sqrtf(x)
 #define RSQRT(x)    (1.0f / sqrtf(x))
 #define CEIL(x)     ceilf(x)
 #define FLOOR(x)    floorf(x)
 #define LROUND(x)   lroundf(x)
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 
-#ifdef TARGET_LPC1768
-  #define I2C_ADDRESS(A) ((A) << 1)
-#else
-  #define I2C_ADDRESS(A) A
-#endif
+#define I2C_ADDRESS(A) (TERN(TARGET_LPC1768, (A) << 1, A))
 
 // Use NUM_ARGS(__VA_ARGS__) to get the number of variadic arguments
 #define _NUM_ARGS(_,Z,Y,X,W,V,U,T,S,R,Q,P,O,N,M,L,K,J,I,H,G,F,E,D,C,B,A,OUT,...) OUT
 #define NUM_ARGS(V...) _NUM_ARGS(0,V,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
 
 #ifdef __cplusplus
 
   #ifndef _MINMAX_H_
   #define _MINMAX_H_
 

commit 528907cb1604ae2f5c8807e7512e2ea1a98289bf
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Mar 31 12:50:30 2020 -0500

    Additional TERN macros

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index bcee642368..899baf7359 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -187,20 +187,23 @@
 #define _ISENA_0x1  ~,1
 #define _ISENA_true ~,1
 #define _ISENA(V...)        IS_PROBE(V)
 
 #define _ENA_1(O)           _ISENA(CAT(_IS,CAT(ENA_, O)))
 #define _DIS_1(O)           NOT(_ENA_1(O))
 #define ENABLED(V...)       DO(ENA,&&,V)
 #define DISABLED(V...)      DO(DIS,&&,V)
 
 #define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION converted to '0' or '1'
+#define TERN0(O,A)          _TERN(_ENA_1(O),0,A)    // OPTION converted to A or '0'
+#define TERN1(O,A)          _TERN(_ENA_1(O),1,A)    // OPTION converted to A or '1'
+#define TERN_(O,A)          _TERN(_ENA_1(O),,A)     // OPTION converted to A or '<nul>'
 #define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
 #define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
 #define ___TERN(P,V...)     THIRD(P,V)              // If first argument has a comma, A. Else B.
 
 #define ANY(V...)          !DISABLED(V)
 #define NONE(V...)          DISABLED(V)
 #define ALL(V...)           ENABLED(V)
 #define BOTH(V1,V2)         ALL(V1,V2)
 #define EITHER(V1,V2)       ANY(V1,V2)
 

commit 2460a3dfbb3e75fe273f15bd07ded1757dff1b2a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Mar 21 23:31:02 2020 -0500

    Fix custom version file include

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 56ec11bd7c..bcee642368 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -14,20 +14,24 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
+#if !defined(__has_include)
+  #define __has_include(...) 1
+#endif
+
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 #define XY   2
 
 #define _AXIS(A) (A##_AXIS)
 
 #define _XMIN_   100
 #define _YMIN_   200

commit 118bd2f8b2a1f81884cb55a8fc00b708a51aa15b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 23:18:16 2020 -0500

    Apply loop shorthand macros (#17159)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index ba0fc342a0..56ec11bd7c 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -241,20 +241,25 @@
 #define LIST_2( A,B,...) A,B
 #define LIST_1( A,...) A
 
 #define _LIST_N(N,V...) LIST_##N(V)
 #define LIST_N(N,V...) _LIST_N(N,V)
 #define ARRAY_N(N,V...) { _LIST_N(N,V) }
 
 #define _JOIN_1(O)         (O)
 #define JOIN_N(N,C,V...)   (DO(JOIN,C,LIST_N(N,V)))
 
+#define LOOP_S_LE_N(VAR, S, N) for (uint8_t VAR=(S); VAR<=(N); VAR++)
+#define LOOP_S_L_N(VAR, S, N) for (uint8_t VAR=(S); VAR<(N); VAR++)
+#define LOOP_LE_N(VAR, N) LOOP_S_LE_N(VAR, 0, N)
+#define LOOP_L_N(VAR, N) LOOP_S_L_N(VAR, 0, N)
+
 #define NOOP (void(0))
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 #undef ABS
 #ifdef __cplusplus
   template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
 #else
   #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
 #endif

commit 9c759e5f74ca69a7cb5169ea217dd179d65b1f44
Author: Jason Smith <jason.inet@gmail.com>
Date:   Thu Mar 12 17:26:09 2020 -0700

    Fix BAUD_RATE_GCODE, etc. (#17135)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 32f8e54900..ba0fc342a0 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -182,21 +182,21 @@
 #define _ISENA_1    ~,1
 #define _ISENA_0x1  ~,1
 #define _ISENA_true ~,1
 #define _ISENA(V...)        IS_PROBE(V)
 
 #define _ENA_1(O)           _ISENA(CAT(_IS,CAT(ENA_, O)))
 #define _DIS_1(O)           NOT(_ENA_1(O))
 #define ENABLED(V...)       DO(ENA,&&,V)
 #define DISABLED(V...)      DO(DIS,&&,V)
 
-#define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION converted to to '0' or '1'
+#define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION converted to '0' or '1'
 #define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
 #define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
 #define ___TERN(P,V...)     THIRD(P,V)              // If first argument has a comma, A. Else B.
 
 #define ANY(V...)          !DISABLED(V)
 #define NONE(V...)          DISABLED(V)
 #define ALL(V...)           ENABLED(V)
 #define BOTH(V1,V2)         ALL(V1,V2)
 #define EITHER(V1,V2)       ANY(V1,V2)
 

commit 64d092935b27ff89955f0430eef5815b15e5a92d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 7 22:20:41 2020 -0600

    More useful ENABLED / DISABLED macros (#17054)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 557234208c..32f8e54900 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -170,32 +170,37 @@
 #define _DO_10(W,C,A,V...) (_##W##_1(A) C _DO_9(W,C,V))
 #define _DO_11(W,C,A,V...) (_##W##_1(A) C _DO_10(W,C,V))
 #define _DO_12(W,C,A,V...) (_##W##_1(A) C _DO_11(W,C,V))
 #define __DO_N(W,C,N,V...) _DO_##N(W,C,V)
 #define _DO_N(W,C,N,V...)  __DO_N(W,C,N,V)
 #define DO(W,C,V...)       _DO_N(W,C,NUM_ARGS(V),V)
 
 // Macros to support option testing
 #define _CAT(a,V...) a##V
 #define CAT(a,V...) _CAT(a,V)
-#define SWITCH_ENABLED_false 0
-#define SWITCH_ENABLED_true  1
-#define SWITCH_ENABLED_0     0
-#define SWITCH_ENABLED_1     1
-#define SWITCH_ENABLED_0x0   0
-#define SWITCH_ENABLED_0x1   1
-#define SWITCH_ENABLED_      1
-#define _ENA_1(O)           _CAT(SWITCH_ENABLED_, O)
-#define _DIS_1(O)           !_ENA_1(O)
+
+#define _ISENA_     ~,1
+#define _ISENA_1    ~,1
+#define _ISENA_0x1  ~,1
+#define _ISENA_true ~,1
+#define _ISENA(V...)        IS_PROBE(V)
+
+#define _ENA_1(O)           _ISENA(CAT(_IS,CAT(ENA_, O)))
+#define _DIS_1(O)           NOT(_ENA_1(O))
 #define ENABLED(V...)       DO(ENA,&&,V)
 #define DISABLED(V...)      DO(DIS,&&,V)
 
+#define TERN(O,A,B)         _TERN(_ENA_1(O),B,A)    // OPTION converted to to '0' or '1'
+#define _TERN(E,V...)       __TERN(_CAT(T_,E),V)    // Prepend 'T_' to get 'T_0' or 'T_1'
+#define __TERN(T,V...)      ___TERN(_CAT(_NO,T),V)  // Prepend '_NO' to get '_NOT_0' or '_NOT_1'
+#define ___TERN(P,V...)     THIRD(P,V)              // If first argument has a comma, A. Else B.
+
 #define ANY(V...)          !DISABLED(V)
 #define NONE(V...)          DISABLED(V)
 #define ALL(V...)           ENABLED(V)
 #define BOTH(V1,V2)         ALL(V1,V2)
 #define EITHER(V1,V2)       ANY(V1,V2)
 
 // Macros to support pins/buttons exist testing
 #define PIN_EXISTS(PN)      (defined(PN##_PIN) && PN##_PIN >= 0)
 #define _PINEX_1            PIN_EXISTS
 #define PINS_EXIST(V...)    DO(PINEX,&&,V)
@@ -383,22 +388,23 @@
 #define SUB5(N)  SUB2(SUB3(N))
 #define SUB6(N)  SUB3(SUB3(N))
 #define SUB7(N)  SUB3(SUB4(N))
 #define SUB8(N)  SUB4(SUB4(N))
 #define SUB9(N)  SUB4(SUB5(N))
 #define SUB10(N) SUB5(SUB5(N))
 
 //
 // Primitives supporting precompiler REPEAT
 //
-#define FIRST(a,...)    a
-#define SECOND(a,b,...) b
+#define FIRST(a,...)     a
+#define SECOND(a,b,...)  b
+#define THIRD(a,b,c,...) c
 
 // Defer expansion
 #define EMPTY()
 #define DEFER(M)  M EMPTY()
 #define DEFER2(M) M EMPTY EMPTY()()
 #define DEFER3(M) M EMPTY EMPTY EMPTY()()()
 #define DEFER4(M) M EMPTY EMPTY EMPTY EMPTY()()()()
 
 // Force define expansion
 #define EVAL(V...)     EVAL16(V)

commit 4a3fcd0bf980b82120d230af57aa9e78a3838809
Author: Jason Smith <jason.inet@gmail.com>
Date:   Sun Mar 1 15:37:16 2020 -0800

    Fix three extruder with auto-fan build (#17035)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 5e0797d67c..557234208c 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -466,14 +466,14 @@
   IF_ELSE(SUB1(_RPT_N))                                           \
     ( DEFER2(__RREPEAT)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP) )    \
     ( /* Do nothing */ )
 #define __RREPEAT() _RREPEAT
 #define _RREPEAT2(_RPT_I,_RPT_N,_RPT_OP,V...)                     \
   _RPT_OP(_RPT_I,V)                                               \
   IF_ELSE(SUB1(_RPT_N))                                           \
     ( DEFER2(__RREPEAT2)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP,V) ) \
     ( /* Do nothing */ )
 #define __RREPEAT2() _RREPEAT2
-#define RREPEAT_S(S,N,OP)        EVAL(_RREPEAT(S,SUB##S(N),OP))
+#define RREPEAT_S(S,N,OP)        EVAL1024(_RREPEAT(S,SUB##S(N),OP))
 #define RREPEAT(N,OP)            RREPEAT_S(0,N,OP)
-#define RREPEAT2_S(S,N,OP,V...)  EVAL(_RREPEAT2(S,SUB##S(N),OP,V))
+#define RREPEAT2_S(S,N,OP,V...)  EVAL1024(_RREPEAT2(S,SUB##S(N),OP,V))
 #define RREPEAT2(N,OP,V...)      RREPEAT2_S(0,N,OP,V)

commit 0268c1d02c33e6568aa579cfb9e4058603cbcb3c
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Tue Feb 4 01:24:11 2020 -0600

    STM32duino - Use SDIO for onboard SD (#16756)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 9699585c1e..5e0797d67c 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -189,26 +189,28 @@
 #define ENABLED(V...)       DO(ENA,&&,V)
 #define DISABLED(V...)      DO(DIS,&&,V)
 
 #define ANY(V...)          !DISABLED(V)
 #define NONE(V...)          DISABLED(V)
 #define ALL(V...)           ENABLED(V)
 #define BOTH(V1,V2)         ALL(V1,V2)
 #define EITHER(V1,V2)       ANY(V1,V2)
 
 // Macros to support pins/buttons exist testing
-#define _PINEX_1(PN)        (defined(PN##_PIN) && PN##_PIN >= 0)
-#define PIN_EXISTS(V...)    DO(PINEX,&&,V)
+#define PIN_EXISTS(PN)      (defined(PN##_PIN) && PN##_PIN >= 0)
+#define _PINEX_1            PIN_EXISTS
+#define PINS_EXIST(V...)    DO(PINEX,&&,V)
 #define ANY_PIN(V...)       DO(PINEX,||,V)
 
-#define _BTNEX_1(BN)        (defined(BTN_##BN) && BTN_##BN >= 0)
-#define BUTTON_EXISTS(V...) DO(BTNEX,&&,V)
+#define BUTTON_EXISTS(BN)   (defined(BTN_##BN) && BTN_##BN >= 0)
+#define _BTNEX_1            BUTTON_EXISTS
+#define BUTTONS_EXIST(V...) DO(BTNEX,&&,V)
 #define ANY_BUTTON(V...)    DO(BTNEX,||,V)
 
 #define WITHIN(N,L,H)       ((N) >= (L) && (N) <= (H))
 #define NUMERIC(a)          WITHIN(a, '0', '9')
 #define DECIMAL(a)          (NUMERIC(a) || a == '.')
 #define NUMERIC_SIGNED(a)   (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a)   (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a)            (sizeof(a)/sizeof(*a))
 #define ZERO(a)             memset(a,0,sizeof(a))
 #define COPY(a,b) do{ \

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 2885150d1c..9699585c1e 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 4716dac8742e536dde12773b579407fb1ae1cb66
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 1 21:00:53 2020 -0600

    Apply REPEAT, RREPEAT, and loop macros (#16757)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index e83aa409b9..2885150d1c 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -450,10 +450,28 @@
     ( /* Do nothing */ )
 #define __REPEAT2() _REPEAT2
 
 // Repeat a macro passing S...N-1.
 #define REPEAT_S(S,N,OP)        EVAL(_REPEAT(S,SUB##S(N),OP))
 #define REPEAT(N,OP)            REPEAT_S(0,N,OP)
 
 // Repeat a macro passing 0...N-1 plus additional arguments.
 #define REPEAT2_S(S,N,OP,V...)  EVAL(_REPEAT2(S,SUB##S(N),OP,V))
 #define REPEAT2(N,OP,V...)      REPEAT2_S(0,N,OP,V)
+
+// Use RREPEAT macros with REPEAT macros for nesting
+#define _RREPEAT(_RPT_I,_RPT_N,_RPT_OP)                           \
+  _RPT_OP(_RPT_I)                                                 \
+  IF_ELSE(SUB1(_RPT_N))                                           \
+    ( DEFER2(__RREPEAT)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP) )    \
+    ( /* Do nothing */ )
+#define __RREPEAT() _RREPEAT
+#define _RREPEAT2(_RPT_I,_RPT_N,_RPT_OP,V...)                     \
+  _RPT_OP(_RPT_I,V)                                               \
+  IF_ELSE(SUB1(_RPT_N))                                           \
+    ( DEFER2(__RREPEAT2)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP,V) ) \
+    ( /* Do nothing */ )
+#define __RREPEAT2() _RREPEAT2
+#define RREPEAT_S(S,N,OP)        EVAL(_RREPEAT(S,SUB##S(N),OP))
+#define RREPEAT(N,OP)            RREPEAT_S(0,N,OP)
+#define RREPEAT2_S(S,N,OP,V...)  EVAL(_RREPEAT2(S,SUB##S(N),OP,V))
+#define RREPEAT2(N,OP,V...)      RREPEAT2_S(0,N,OP,V)

commit 5b12627e146cc8b2a61d347ae6608b5c4d4497df
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jan 30 03:24:57 2020 -0600

    Auto assign DIAG pins for multi-endstop (#16723)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index f3c9f3a818..e83aa409b9 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -22,26 +22,37 @@
 #pragma once
 
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 #define XY   2
 
 #define _AXIS(A) (A##_AXIS)
 
-#define _XMIN_ 100
-#define _YMIN_ 200
-#define _ZMIN_ 300
-#define _XMAX_ 101
-#define _YMAX_ 201
-#define _ZMAX_ 301
+#define _XMIN_   100
+#define _YMIN_   200
+#define _ZMIN_   300
+#define _XMAX_   101
+#define _YMAX_   201
+#define _ZMAX_   301
+#define _XDIAG_  102
+#define _YDIAG_  202
+#define _ZDIAG_  302
+#define _E0DIAG_ 400
+#define _E1DIAG_ 401
+#define _E2DIAG_ 402
+#define _E3DIAG_ 403
+#define _E4DIAG_ 404
+#define _E5DIAG_ 405
+#define _E6DIAG_ 406
+#define _E7DIAG_ 407
 
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 

commit b258cc85bfb5ee95ba61533ba501b7c0fdf370e2
Author: brian park <gouache95@gmail.com>
Date:   Sat Nov 30 23:57:34 2019 +0900

    Mostly Printed SCARA (MPSCARA) support (#15573)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 0c31ad792b..f3c9f3a818 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -244,20 +244,21 @@
 #define UNEAR_ZERO(x) ((x) < 0.000001f)
 #define NEAR_ZERO(x) WITHIN(x, -0.000001f, 0.000001f)
 #define NEAR(x,y) NEAR_ZERO((x)-(y))
 
 #define RECIPROCAL(x) (NEAR_ZERO(x) ? 0 : (1 / float(x)))
 #define FIXFLOAT(f) (f + (f < 0 ? -0.00005f : 0.00005f))
 
 //
 // Maths macros that can be overridden by HAL
 //
+#define ACOS(x)     acosf(x)
 #define ATAN2(y, x) atan2f(y, x)
 #define POW(x, y)   powf(x, y)
 #define SQRT(x)     sqrtf(x)
 #define RSQRT(x)    (1.0f / sqrtf(x))
 #define CEIL(x)     ceilf(x)
 #define FLOOR(x)    floorf(x)
 #define LROUND(x)   lroundf(x)
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 

commit 776632c503540c3bd2061b1b0812c091b3a4f6b4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Nov 9 17:59:04 2019 -0600

    Add and apply REPEAT macro (#15829)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 03deea89dc..0c31ad792b 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -158,20 +158,21 @@
 #define _DO_9(W,C,A,V...)  (_##W##_1(A) C _DO_8(W,C,V))
 #define _DO_10(W,C,A,V...) (_##W##_1(A) C _DO_9(W,C,V))
 #define _DO_11(W,C,A,V...) (_##W##_1(A) C _DO_10(W,C,V))
 #define _DO_12(W,C,A,V...) (_##W##_1(A) C _DO_11(W,C,V))
 #define __DO_N(W,C,N,V...) _DO_##N(W,C,V)
 #define _DO_N(W,C,N,V...)  __DO_N(W,C,N,V)
 #define DO(W,C,V...)       _DO_N(W,C,NUM_ARGS(V),V)
 
 // Macros to support option testing
 #define _CAT(a,V...) a##V
+#define CAT(a,V...) _CAT(a,V)
 #define SWITCH_ENABLED_false 0
 #define SWITCH_ENABLED_true  1
 #define SWITCH_ENABLED_0     0
 #define SWITCH_ENABLED_1     1
 #define SWITCH_ENABLED_0x0   0
 #define SWITCH_ENABLED_0x1   1
 #define SWITCH_ENABLED_      1
 #define _ENA_1(O)           _CAT(SWITCH_ENABLED_, O)
 #define _DIS_1(O)           !_ENA_1(O)
 #define ENABLED(V...)       DO(ENA,&&,V)
@@ -222,46 +223,20 @@
 #define LIST_2( A,B,...) A,B
 #define LIST_1( A,...) A
 
 #define _LIST_N(N,V...) LIST_##N(V)
 #define LIST_N(N,V...) _LIST_N(N,V)
 #define ARRAY_N(N,V...) { _LIST_N(N,V) }
 
 #define _JOIN_1(O)         (O)
 #define JOIN_N(N,C,V...)   (DO(JOIN,C,LIST_N(N,V)))
 
-// Macros for adding
-#define INC_0 1
-#define INC_1 2
-#define INC_2 3
-#define INC_3 4
-#define INC_4 5
-#define INC_5 6
-#define INC_6 7
-#define INC_7 8
-#define INC_8 9
-#define INCREMENT_(n) INC_##n
-#define INCREMENT(n) INCREMENT_(n)
-
-// Macros for subtracting
-#define DEC_1 0
-#define DEC_2 1
-#define DEC_3 2
-#define DEC_4 3
-#define DEC_5 4
-#define DEC_6 5
-#define DEC_7 6
-#define DEC_8 7
-#define DEC_9 8
-#define DECREMENT_(n) DEC_##n
-#define DECREMENT(n) DECREMENT_(n)
-
 #define NOOP (void(0))
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 #undef ABS
 #ifdef __cplusplus
   template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
 #else
   #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
 #endif
@@ -339,10 +314,134 @@
   #define MAX_6(a,V...)   MAX_2(a,MAX_5(V))
   #define MAX_7(a,V...)   MAX_2(a,MAX_6(V))
   #define MAX_8(a,V...)   MAX_2(a,MAX_7(V))
   #define MAX_9(a,V...)   MAX_2(a,MAX_8(V))
   #define MAX_10(a,V...)  MAX_2(a,MAX_9(V))
   #define __MAX_N(N,V...) MAX_##N(V)
   #define _MAX_N(N,V...)  __MAX_N(N,V)
   #define _MAX(V...)      _MAX_N(NUM_ARGS(V), V)
 
 #endif
+
+// Macros for adding
+#define INC_0 1
+#define INC_1 2
+#define INC_2 3
+#define INC_3 4
+#define INC_4 5
+#define INC_5 6
+#define INC_6 7
+#define INC_7 8
+#define INC_8 9
+#define INCREMENT_(n) INC_##n
+#define INCREMENT(n) INCREMENT_(n)
+
+#define ADD0(N)  N
+#define ADD1(N)  INCREMENT_(N)
+#define ADD2(N)  ADD1(ADD1(N))
+#define ADD3(N)  ADD1(ADD2(N))
+#define ADD4(N)  ADD2(ADD2(N))
+#define ADD5(N)  ADD2(ADD3(N))
+#define ADD6(N)  ADD3(ADD3(N))
+#define ADD7(N)  ADD3(ADD4(N))
+#define ADD8(N)  ADD4(ADD4(N))
+#define ADD9(N)  ADD4(ADD5(N))
+#define ADD10(N) ADD5(ADD5(N))
+
+// Macros for subtracting
+#define DEC_0 0
+#define DEC_1 0
+#define DEC_2 1
+#define DEC_3 2
+#define DEC_4 3
+#define DEC_5 4
+#define DEC_6 5
+#define DEC_7 6
+#define DEC_8 7
+#define DEC_9 8
+#define DECREMENT_(n) DEC_##n
+#define DECREMENT(n) DECREMENT_(n)
+
+#define SUB0(N)  N
+#define SUB1(N)  DECREMENT_(N)
+#define SUB2(N)  SUB1(SUB1(N))
+#define SUB3(N)  SUB1(SUB2(N))
+#define SUB4(N)  SUB2(SUB2(N))
+#define SUB5(N)  SUB2(SUB3(N))
+#define SUB6(N)  SUB3(SUB3(N))
+#define SUB7(N)  SUB3(SUB4(N))
+#define SUB8(N)  SUB4(SUB4(N))
+#define SUB9(N)  SUB4(SUB5(N))
+#define SUB10(N) SUB5(SUB5(N))
+
+//
+// Primitives supporting precompiler REPEAT
+//
+#define FIRST(a,...)    a
+#define SECOND(a,b,...) b
+
+// Defer expansion
+#define EMPTY()
+#define DEFER(M)  M EMPTY()
+#define DEFER2(M) M EMPTY EMPTY()()
+#define DEFER3(M) M EMPTY EMPTY EMPTY()()()
+#define DEFER4(M) M EMPTY EMPTY EMPTY EMPTY()()()()
+
+// Force define expansion
+#define EVAL(V...)     EVAL16(V)
+#define EVAL1024(V...) EVAL512(EVAL512(V))
+#define EVAL512(V...)  EVAL256(EVAL256(V))
+#define EVAL256(V...)  EVAL128(EVAL128(V))
+#define EVAL128(V...)  EVAL64(EVAL64(V))
+#define EVAL64(V...)   EVAL32(EVAL32(V))
+#define EVAL32(V...)   EVAL16(EVAL16(V))
+#define EVAL16(V...)   EVAL8(EVAL8(V))
+#define EVAL8(V...)    EVAL4(EVAL4(V))
+#define EVAL4(V...)    EVAL2(EVAL2(V))
+#define EVAL2(V...)    EVAL1(EVAL1(V))
+#define EVAL1(V...)    V
+
+#define IS_PROBE(V...) SECOND(V, 0)     // Get the second item passed, or 0
+#define PROBE() ~, 1                    // Second item will be 1 if this is passed
+#define _NOT_0 PROBE()
+#define NOT(x) IS_PROBE(_CAT(_NOT_, x)) // NOT('0') gets '1'. Anything else gets '0'.
+#define _BOOL(x) NOT(NOT(x))            // NOT('0') gets '0'. Anything else gets '1'.
+
+#define IF_ELSE(TF) _IF_ELSE(_BOOL(TF))
+#define _IF_ELSE(TF) _CAT(_IF_, TF)
+
+#define _IF_1(V...) V _IF_1_ELSE
+#define _IF_0(...)    _IF_0_ELSE
+
+#define _IF_1_ELSE(...)
+#define _IF_0_ELSE(V...) V
+
+#define HAS_ARGS(V...) _BOOL(FIRST(_END_OF_ARGUMENTS_ V)())
+#define _END_OF_ARGUMENTS_() 0
+
+//
+// REPEAT core macros. Recurse N times with ascending I.
+//
+
+// Call OP(I) N times with ascending counter.
+#define _REPEAT(_RPT_I,_RPT_N,_RPT_OP)                        \
+  _RPT_OP(_RPT_I)                                             \
+  IF_ELSE(SUB1(_RPT_N))                                       \
+    ( DEFER2(__REPEAT)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP) ) \
+    ( /* Do nothing */ )
+#define __REPEAT() _REPEAT
+
+// Call OP(I, ...) N times with ascending counter.
+#define _REPEAT2(_RPT_I,_RPT_N,_RPT_OP,V...)                     \
+  _RPT_OP(_RPT_I,V)                                              \
+  IF_ELSE(SUB1(_RPT_N))                                          \
+    ( DEFER2(__REPEAT2)()(ADD1(_RPT_I),SUB1(_RPT_N),_RPT_OP,V) ) \
+    ( /* Do nothing */ )
+#define __REPEAT2() _REPEAT2
+
+// Repeat a macro passing S...N-1.
+#define REPEAT_S(S,N,OP)        EVAL(_REPEAT(S,SUB##S(N),OP))
+#define REPEAT(N,OP)            REPEAT_S(0,N,OP)
+
+// Repeat a macro passing 0...N-1 plus additional arguments.
+#define REPEAT2_S(S,N,OP,V...)  EVAL(_REPEAT2(S,SUB##S(N),OP,V))
+#define REPEAT2(N,OP,V...)      REPEAT2_S(0,N,OP,V)

commit f6a799c7b382f43e819fa4bd7ffd618bca09236e
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Thu Oct 24 13:57:20 2019 -0600

    Allow compile under Windows Subsystem for Linux (#15606)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index b93bae79f6..03deea89dc 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -272,21 +272,21 @@
 
 #define RECIPROCAL(x) (NEAR_ZERO(x) ? 0 : (1 / float(x)))
 #define FIXFLOAT(f) (f + (f < 0 ? -0.00005f : 0.00005f))
 
 //
 // Maths macros that can be overridden by HAL
 //
 #define ATAN2(y, x) atan2f(y, x)
 #define POW(x, y)   powf(x, y)
 #define SQRT(x)     sqrtf(x)
-#define RSQRT(x)    (1 / sqrtf(x))
+#define RSQRT(x)    (1.0f / sqrtf(x))
 #define CEIL(x)     ceilf(x)
 #define FLOOR(x)    floorf(x)
 #define LROUND(x)   lroundf(x)
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 
 #ifdef TARGET_LPC1768
   #define I2C_ADDRESS(A) ((A) << 1)
 #else
   #define I2C_ADDRESS(A) A

commit 519cc1bc67b8762d94cd47e91bfe8a78a7319342
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Oct 6 22:18:03 2019 -0500

    NUM_AXIS is now obsolete

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 24c97be9cc..b93bae79f6 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -14,21 +14,20 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
-#define NUM_AXIS 4
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 #define XY   2
 
 #define _AXIS(A) (A##_AXIS)
 
 #define _XMIN_ 100
 #define _YMIN_ 200

commit 9188ce1a8d48c4ee01dd58f9b8cdaf462eff7c9d
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Oct 3 18:48:31 2019 -0500

    Add JOIN for simple append

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index c13b342600..24c97be9cc 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -220,20 +220,23 @@
 #define LIST_5( A,B,C,D,E,...) A,B,C,D,E
 #define LIST_4( A,B,C,D,...) A,B,C,D
 #define LIST_3( A,B,C,...) A,B,C
 #define LIST_2( A,B,...) A,B
 #define LIST_1( A,...) A
 
 #define _LIST_N(N,V...) LIST_##N(V)
 #define LIST_N(N,V...) _LIST_N(N,V)
 #define ARRAY_N(N,V...) { _LIST_N(N,V) }
 
+#define _JOIN_1(O)         (O)
+#define JOIN_N(N,C,V...)   (DO(JOIN,C,LIST_N(N,V)))
+
 // Macros for adding
 #define INC_0 1
 #define INC_1 2
 #define INC_2 3
 #define INC_3 4
 #define INC_4 5
 #define INC_5 6
 #define INC_6 7
 #define INC_7 8
 #define INC_8 9

commit 50e4545255605eb506c20eb107270038b0fe7bdb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 29 04:25:39 2019 -0500

    Add custom types for position (#15204)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index faf3859f16..c13b342600 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -19,20 +19,21 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #define NUM_AXIS 4
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
+#define XY   2
 
 #define _AXIS(A) (A##_AXIS)
 
 #define _XMIN_ 100
 #define _YMIN_ 200
 #define _ZMIN_ 300
 #define _XMAX_ 101
 #define _YMAX_ 201
 #define _ZMAX_ 301
 
@@ -245,26 +246,20 @@
 #define DEC_3 2
 #define DEC_4 3
 #define DEC_5 4
 #define DEC_6 5
 #define DEC_7 6
 #define DEC_8 7
 #define DEC_9 8
 #define DECREMENT_(n) DEC_##n
 #define DECREMENT(n) DECREMENT_(n)
 
-// Feedrate
-typedef float feedRate_t;
-#define MMM_TO_MMS(MM_M) ((MM_M)/60.0f)
-#define MMS_TO_MMM(MM_S) ((MM_S)*60.0f)
-#define MMS_SCALED(V)    ((V) * 0.01f * feedrate_percentage)
-
 #define NOOP (void(0))
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 #undef ABS
 #ifdef __cplusplus
   template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
 #else
   #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
 #endif

commit 8683d4abfd04944d9b015f96c0f4479009ae3a0c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 28 19:02:34 2019 -0500

    Improved list-oriented macros

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 73a8ec5823..faf3859f16 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -198,39 +198,40 @@
 #define NUMERIC_SIGNED(a)   (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a)   (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a)            (sizeof(a)/sizeof(*a))
 #define ZERO(a)             memset(a,0,sizeof(a))
 #define COPY(a,b) do{ \
     static_assert(sizeof(a[0]) == sizeof(b[0]), "COPY: '" STRINGIFY(a) "' and '" STRINGIFY(b) "' types (sizes) don't match!"); \
     memcpy(&a[0],&b[0],_MIN(sizeof(a),sizeof(b))); \
   }while(0)
 
 // Macros for initializing arrays
-#define ARRAY_16(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) { A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P }
-#define ARRAY_15(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) { A,B,C,D,E,F,G,H,I,J,K,L,M,N,O }
-#define ARRAY_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) { A,B,C,D,E,F,G,H,I,J,K,L,M,N }
-#define ARRAY_13(A,B,C,D,E,F,G,H,I,J,K,L,M,...) { A,B,C,D,E,F,G,H,I,J,K,L,M }
-#define ARRAY_12(A,B,C,D,E,F,G,H,I,J,K,L,...) { A,B,C,D,E,F,G,H,I,J,K,L }
-#define ARRAY_11(A,B,C,D,E,F,G,H,I,J,K,...) { A,B,C,D,E,F,G,H,I,J,K }
-#define ARRAY_10(A,B,C,D,E,F,G,H,I,J,...) { A,B,C,D,E,F,G,H,I,J }
-#define ARRAY_9( A,B,C,D,E,F,G,H,I,...) { A,B,C,D,E,F,G,H,I }
-#define ARRAY_8( A,B,C,D,E,F,G,H,...) { A,B,C,D,E,F,G,H }
-#define ARRAY_7( A,B,C,D,E,F,G,...) { A,B,C,D,E,F,G }
-#define ARRAY_6( A,B,C,D,E,F,...) { A,B,C,D,E,F }
-#define ARRAY_5( A,B,C,D,E,...) { A,B,C,D,E }
-#define ARRAY_4( A,B,C,D,...) { A,B,C,D }
-#define ARRAY_3( A,B,C,...) { A,B,C }
-#define ARRAY_2( A,B,...) { A,B }
-#define ARRAY_1( A,...) { A }
-
-#define _ARRAY_N(N,V...) ARRAY_##N(V)
-#define ARRAY_N(N,V...) _ARRAY_N(N,V)
+#define LIST_16(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P
+#define LIST_15(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N,O
+#define LIST_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) A,B,C,D,E,F,G,H,I,J,K,L,M,N
+#define LIST_13(A,B,C,D,E,F,G,H,I,J,K,L,M,...) A,B,C,D,E,F,G,H,I,J,K,L,M
+#define LIST_12(A,B,C,D,E,F,G,H,I,J,K,L,...) A,B,C,D,E,F,G,H,I,J,K,L
+#define LIST_11(A,B,C,D,E,F,G,H,I,J,K,...) A,B,C,D,E,F,G,H,I,J,K
+#define LIST_10(A,B,C,D,E,F,G,H,I,J,...) A,B,C,D,E,F,G,H,I,J
+#define LIST_9( A,B,C,D,E,F,G,H,I,...) A,B,C,D,E,F,G,H,I
+#define LIST_8( A,B,C,D,E,F,G,H,...) A,B,C,D,E,F,G,H
+#define LIST_7( A,B,C,D,E,F,G,...) A,B,C,D,E,F,G
+#define LIST_6( A,B,C,D,E,F,...) A,B,C,D,E,F
+#define LIST_5( A,B,C,D,E,...) A,B,C,D,E
+#define LIST_4( A,B,C,D,...) A,B,C,D
+#define LIST_3( A,B,C,...) A,B,C
+#define LIST_2( A,B,...) A,B
+#define LIST_1( A,...) A
+
+#define _LIST_N(N,V...) LIST_##N(V)
+#define LIST_N(N,V...) _LIST_N(N,V)
+#define ARRAY_N(N,V...) { _LIST_N(N,V) }
 
 // Macros for adding
 #define INC_0 1
 #define INC_1 2
 #define INC_2 3
 #define INC_3 4
 #define INC_4 5
 #define INC_5 6
 #define INC_6 7
 #define INC_7 8

commit dc65788511e2baa888e8b8813d96cae5ca3aea81
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Sep 27 04:30:48 2019 -0500

    Shorthand for __VA_ARGS__

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 7a21d290d6..73a8ec5823 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -288,22 +288,22 @@ typedef float feedRate_t;
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 
 #ifdef TARGET_LPC1768
   #define I2C_ADDRESS(A) ((A) << 1)
 #else
   #define I2C_ADDRESS(A) A
 #endif
 
 // Use NUM_ARGS(__VA_ARGS__) to get the number of variadic arguments
-#define _NUM_ARGS(_0,_24_,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1,N,...) N
-#define NUM_ARGS(V...) _NUM_ARGS(0,V,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
+#define _NUM_ARGS(_,Z,Y,X,W,V,U,T,S,R,Q,P,O,N,M,L,K,J,I,H,G,F,E,D,C,B,A,OUT,...) OUT
+#define NUM_ARGS(V...) _NUM_ARGS(0,V,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
 
 #ifdef __cplusplus
 
   #ifndef _MINMAX_H_
   #define _MINMAX_H_
 
     extern "C++" {
 
       // C++11 solution that is standards compliant. Return type is deduced automatically
       template <class L, class R> static inline constexpr auto _MIN(const L lhs, const R rhs) -> decltype(lhs + rhs) {
@@ -315,36 +315,36 @@ typedef float feedRate_t;
       template<class T, class ... Ts> static inline constexpr const T _MIN(T V, Ts... Vs) { return _MIN(V, _MIN(Vs...)); }
       template<class T, class ... Ts> static inline constexpr const T _MAX(T V, Ts... Vs) { return _MAX(V, _MAX(Vs...)); }
 
     }
 
   #endif
 
 #else
 
   #define MIN_2(a,b)      ((a)<(b)?(a):(b))
-  #define MIN_3(a,...)    MIN_2(a,MIN_2(__VA_ARGS__))
-  #define MIN_4(a,...)    MIN_2(a,MIN_3(__VA_ARGS__))
-  #define MIN_5(a,...)    MIN_2(a,MIN_4(__VA_ARGS__))
-  #define MIN_6(a,...)    MIN_2(a,MIN_5(__VA_ARGS__))
-  #define MIN_7(a,...)    MIN_2(a,MIN_6(__VA_ARGS__))
-  #define MIN_8(a,...)    MIN_2(a,MIN_7(__VA_ARGS__))
-  #define MIN_9(a,...)    MIN_2(a,MIN_8(__VA_ARGS__))
-  #define MIN_10(a,...)   MIN_2(a,MIN_9(__VA_ARGS__))
-  #define __MIN_N(N, ...) MIN_##N(__VA_ARGS__)
-  #define _MIN_N(N, ...)  __MIN_N(N,__VA_ARGS__)
-  #define _MIN(...)       _MIN_N(NUM_ARGS(__VA_ARGS__), __VA_ARGS__)
+  #define MIN_3(a,V...)   MIN_2(a,MIN_2(V))
+  #define MIN_4(a,V...)   MIN_2(a,MIN_3(V))
+  #define MIN_5(a,V...)   MIN_2(a,MIN_4(V))
+  #define MIN_6(a,V...)   MIN_2(a,MIN_5(V))
+  #define MIN_7(a,V...)   MIN_2(a,MIN_6(V))
+  #define MIN_8(a,V...)   MIN_2(a,MIN_7(V))
+  #define MIN_9(a,V...)   MIN_2(a,MIN_8(V))
+  #define MIN_10(a,V...)  MIN_2(a,MIN_9(V))
+  #define __MIN_N(N,V...) MIN_##N(V)
+  #define _MIN_N(N,V...)  __MIN_N(N,V)
+  #define _MIN(V...)      _MIN_N(NUM_ARGS(V), V)
 
   #define MAX_2(a,b)      ((a)>(b)?(a):(b))
-  #define MAX_3(a,...)    MAX_2(a,MAX_2(__VA_ARGS__))
-  #define MAX_4(a,...)    MAX_2(a,MAX_3(__VA_ARGS__))
-  #define MAX_5(a,...)    MAX_2(a,MAX_4(__VA_ARGS__))
-  #define MAX_6(a,...)    MAX_2(a,MAX_5(__VA_ARGS__))
-  #define MAX_7(a,...)    MAX_2(a,MAX_6(__VA_ARGS__))
-  #define MAX_8(a,...)    MAX_2(a,MAX_7(__VA_ARGS__))
-  #define MAX_9(a,...)    MAX_2(a,MAX_8(__VA_ARGS__))
-  #define MAX_10(a,...)   MAX_2(a,MAX_9(__VA_ARGS__))
-  #define __MAX_N(N, ...) MAX_##N(__VA_ARGS__)
-  #define _MAX_N(N, ...)  __MAX_N(N,__VA_ARGS__)
-  #define _MAX(...)       _MAX_N(NUM_ARGS(__VA_ARGS__), __VA_ARGS__)
+  #define MAX_3(a,V...)   MAX_2(a,MAX_2(V))
+  #define MAX_4(a,V...)   MAX_2(a,MAX_3(V))
+  #define MAX_5(a,V...)   MAX_2(a,MAX_4(V))
+  #define MAX_6(a,V...)   MAX_2(a,MAX_5(V))
+  #define MAX_7(a,V...)   MAX_2(a,MAX_6(V))
+  #define MAX_8(a,V...)   MAX_2(a,MAX_7(V))
+  #define MAX_9(a,V...)   MAX_2(a,MAX_8(V))
+  #define MAX_10(a,V...)  MAX_2(a,MAX_9(V))
+  #define __MAX_N(N,V...) MAX_##N(V)
+  #define _MAX_N(N,V...)  __MAX_N(N,V)
+  #define _MAX(V...)      _MAX_N(NUM_ARGS(V), V)
 
 #endif

commit a18d16fb8b92c78093e25f8bb88cd0a49074678e
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Fri Sep 27 03:38:43 2019 -0600

    Do not implicitly concatenate localized strings (#15383)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index ecc51b2c70..7a21d290d6 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -54,20 +54,27 @@
 #endif
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
+// Macros to make sprintf_P read from PROGMEM (AVR extension)
+#ifdef __AVR__
+  #define S_FMT "%S"
+#else
+  #define S_FMT "%s"
+#endif
+
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV
 #define _BV(n) (1<<(n))

commit 455dabb18334c89878a75be62bccebd9f537574d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 26 01:28:09 2019 -0500

    Add a feedRate_t data type (#15349)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 3a10340559..ecc51b2c70 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -237,22 +237,25 @@
 #define DEC_3 2
 #define DEC_4 3
 #define DEC_5 4
 #define DEC_6 5
 #define DEC_7 6
 #define DEC_8 7
 #define DEC_9 8
 #define DECREMENT_(n) DEC_##n
 #define DECREMENT(n) DECREMENT_(n)
 
+// Feedrate
+typedef float feedRate_t;
 #define MMM_TO_MMS(MM_M) ((MM_M)/60.0f)
 #define MMS_TO_MMM(MM_S) ((MM_S)*60.0f)
+#define MMS_SCALED(V)    ((V) * 0.01f * feedrate_percentage)
 
 #define NOOP (void(0))
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 #undef ABS
 #ifdef __cplusplus
   template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
 #else
   #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})

commit 1803c27afb6a2991415e465b06c869a88c8666ab
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Sep 19 01:28:31 2019 -0500

    Fix macros for overloaded comparisons

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index a24aea3ef7..3a10340559 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -96,52 +96,52 @@
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ((a>0)-(a<0))
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
 // Macros to constrain values
 #ifdef __cplusplus
 
   // C++11 solution that is standards compliant.
   template <class V, class N> static inline constexpr void NOLESS(V& v, const N n) {
-    if (v < n) v = n;
+    if (n > v) v = n;
   }
   template <class V, class N> static inline constexpr void NOMORE(V& v, const N n) {
-    if (v > n) v = n;
+    if (n < v) v = n;
   }
   template <class V, class N1, class N2> static inline constexpr void LIMIT(V& v, const N1 n1, const N2 n2) {
-    if (v < n1) v = n1;
-    else if (v > n2) v = n2;
+    if (n1 > v) v = n1;
+    else if (n2 < v) v = n2;
   }
 
 #else
 
   // Using GCC extensions, but Travis GCC version does not like it and gives
   //  "error: statement-expressions are not allowed outside functions nor in template-argument lists"
   #define NOLESS(v, n) \
     do{ \
       __typeof__(n) _n = (n); \
-      if (v < _n) v = _n; \
+      if (_n > v) v = _n; \
     }while(0)
 
   #define NOMORE(v, n) \
     do{ \
       __typeof__(n) _n = (n); \
-      if (v > _n) v = _n; \
+      if (_n < v) v = _n; \
     }while(0)
 
   #define LIMIT(v, n1, n2) \
     do{ \
       __typeof__(n1) _n1 = (n1); \
       __typeof__(n2) _n2 = (n2); \
-      if (v < _n1) v = _n1; \
-      else if (v > _n2) v = _n2; \
+      if (_n1 > v) v = _n1; \
+      else if (_n2 < v) v = _n2; \
     }while(0)
 
 #endif
 
 // Macros to chain up to 12 conditions
 #define _DO_1(W,C,A)       (_##W##_1(A))
 #define _DO_2(W,C,A,B)     (_##W##_1(A) C _##W##_1(B))
 #define _DO_3(W,C,A,V...)  (_##W##_1(A) C _DO_2(W,C,V))
 #define _DO_4(W,C,A,V...)  (_##W##_1(A) C _DO_3(W,C,V))
 #define _DO_5(W,C,A,V...)  (_##W##_1(A) C _DO_4(W,C,V))

commit c353eaa14630eb9d74f185e2b6aae1630ca21525
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 17 18:16:28 2019 -0500

    Misc changes from struct refactor (#15289)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 8bca0a2c72..a24aea3ef7 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -191,26 +191,36 @@
 #define NUMERIC_SIGNED(a)   (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a)   (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a)            (sizeof(a)/sizeof(*a))
 #define ZERO(a)             memset(a,0,sizeof(a))
 #define COPY(a,b) do{ \
     static_assert(sizeof(a[0]) == sizeof(b[0]), "COPY: '" STRINGIFY(a) "' and '" STRINGIFY(b) "' types (sizes) don't match!"); \
     memcpy(&a[0],&b[0],_MIN(sizeof(a),sizeof(b))); \
   }while(0)
 
 // Macros for initializing arrays
-#define ARRAY_6(v1, v2, v3, v4, v5, v6, ...) { v1, v2, v3, v4, v5, v6 }
-#define ARRAY_5(v1, v2, v3, v4, v5, ...)     { v1, v2, v3, v4, v5 }
-#define ARRAY_4(v1, v2, v3, v4, ...)         { v1, v2, v3, v4 }
-#define ARRAY_3(v1, v2, v3, ...)             { v1, v2, v3 }
-#define ARRAY_2(v1, v2, ...)                 { v1, v2 }
-#define ARRAY_1(v1, ...)                     { v1 }
+#define ARRAY_16(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,...) { A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P }
+#define ARRAY_15(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,...) { A,B,C,D,E,F,G,H,I,J,K,L,M,N,O }
+#define ARRAY_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,...) { A,B,C,D,E,F,G,H,I,J,K,L,M,N }
+#define ARRAY_13(A,B,C,D,E,F,G,H,I,J,K,L,M,...) { A,B,C,D,E,F,G,H,I,J,K,L,M }
+#define ARRAY_12(A,B,C,D,E,F,G,H,I,J,K,L,...) { A,B,C,D,E,F,G,H,I,J,K,L }
+#define ARRAY_11(A,B,C,D,E,F,G,H,I,J,K,...) { A,B,C,D,E,F,G,H,I,J,K }
+#define ARRAY_10(A,B,C,D,E,F,G,H,I,J,...) { A,B,C,D,E,F,G,H,I,J }
+#define ARRAY_9( A,B,C,D,E,F,G,H,I,...) { A,B,C,D,E,F,G,H,I }
+#define ARRAY_8( A,B,C,D,E,F,G,H,...) { A,B,C,D,E,F,G,H }
+#define ARRAY_7( A,B,C,D,E,F,G,...) { A,B,C,D,E,F,G }
+#define ARRAY_6( A,B,C,D,E,F,...) { A,B,C,D,E,F }
+#define ARRAY_5( A,B,C,D,E,...) { A,B,C,D,E }
+#define ARRAY_4( A,B,C,D,...) { A,B,C,D }
+#define ARRAY_3( A,B,C,...) { A,B,C }
+#define ARRAY_2( A,B,...) { A,B }
+#define ARRAY_1( A,...) { A }
 
 #define _ARRAY_N(N,V...) ARRAY_##N(V)
 #define ARRAY_N(N,V...) _ARRAY_N(N,V)
 
 // Macros for adding
 #define INC_0 1
 #define INC_1 2
 #define INC_2 3
 #define INC_3 4
 #define INC_4 5

commit 2405ccb7ef48749b8afca9faa82a5d5deb753369
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Sep 17 00:05:12 2019 -0500

    Patch use of UNUSED

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index d092de9ca2..8bca0a2c72 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -38,20 +38,28 @@
 
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
+#ifndef UNUSED
+  #if defined(ARDUINO_ARCH_STM32) && !defined(STM32GENERIC)
+    #define UNUSED(X) (void)X
+  #else
+    #define UNUSED(x) ((void)(x))
+  #endif
+#endif
+
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M

commit 7a569ad4d06d2d5541b76f03942cf4d7ab5bc119
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Mon Sep 16 15:49:46 2019 -0600

    LULZBOT_TOUCH_UI fixes. Fix some warnings. (#15276)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index d65b8221f3..d092de9ca2 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -56,21 +56,21 @@
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV
 #define _BV(n) (1<<(n))
-#define TEST(n,b) !!((n)&_BV(b))
+#define TEST(n,b) (!!((n)&_BV(b)))
 #define SET_BIT_TO(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
 
 #ifndef SBI
   #define SBI(A,B) (A |= (1 << (B)))
 #endif
 
 #ifndef CBI
   #define CBI(A,B) (A &= ~(1 << (B)))
 #endif
 

commit 465c6d92307ec613d0b2a7355ce67a60ba23fc0c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 14 03:05:10 2019 -0500

    Simpler Allen Key config. Fixes, cleanups from refactor (#15256)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index ce72247c5d..d65b8221f3 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -72,20 +72,21 @@
 
 #ifndef CBI
   #define CBI(A,B) (A &= ~(1 << (B)))
 #endif
 
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 
+#define cu(x)      ((x)*(x)*(x))
 #define RADIANS(d) ((d)*float(M_PI)/180.0f)
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
 #define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ((a>0)-(a<0))
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 

commit 0bcb64403c71e7443c9de6822e725add08d3e7c1
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Aug 30 16:09:57 2019 -0500

    Revert _BV testing commit
    
    This reverts commit 9223261ea93fc7dcb525325778ff302e611d1ea5.

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 68943afed5..ce72247c5d 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -54,20 +54,22 @@
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
+#undef _BV
+#define _BV(n) (1<<(n))
 #define TEST(n,b) !!((n)&_BV(b))
 #define SET_BIT_TO(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
 
 #ifndef SBI
   #define SBI(A,B) (A |= (1 << (B)))
 #endif
 
 #ifndef CBI
   #define CBI(A,B) (A &= ~(1 << (B)))
 #endif

commit 9223261ea93fc7dcb525325778ff302e611d1ea5
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Aug 29 17:50:16 2019 -0500

    Only define _BV in Marduino.h

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index ce72247c5d..68943afed5 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -54,22 +54,20 @@
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
-#undef _BV
-#define _BV(n) (1<<(n))
 #define TEST(n,b) !!((n)&_BV(b))
 #define SET_BIT_TO(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
 
 #ifndef SBI
   #define SBI(A,B) (A |= (1 << (B)))
 #endif
 
 #ifndef CBI
   #define CBI(A,B) (A &= ~(1 << (B)))
 #endif

commit 1d8ad7cf715481bbcd808cbcb5b399b0120ee393
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Aug 28 21:21:38 2019 -0500

    Safe changes from HAL cleanup

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index eb2b41d65b..ce72247c5d 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -46,29 +46,20 @@
 #define _O3          __attribute__((optimize("O3")))
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
-// Remove compiler warning on an unused variable
-#ifndef UNUSED
-  #if defined(ARDUINO_ARCH_STM32) && !defined(STM32GENERIC)
-    #define UNUSED(X) (void)X
-  #else
-    #define UNUSED(x) ((void)(x))
-  #endif
-#endif
-
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV
 #define _BV(n) (1<<(n))

commit 274934ad81ee6cd9b4f686e55107966cc4e23bd7
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Fri Aug 16 17:34:13 2019 -0600

    Add LULZBOT_TOUCH_UI (#14967)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index a6e546a4a8..eb2b41d65b 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -111,38 +111,38 @@
   template <class V, class N1, class N2> static inline constexpr void LIMIT(V& v, const N1 n1, const N2 n2) {
     if (v < n1) v = n1;
     else if (v > n2) v = n2;
   }
 
 #else
 
   // Using GCC extensions, but Travis GCC version does not like it and gives
   //  "error: statement-expressions are not allowed outside functions nor in template-argument lists"
   #define NOLESS(v, n) \
-    do { \
+    do{ \
       __typeof__(n) _n = (n); \
       if (v < _n) v = _n; \
-    } while(0)
+    }while(0)
 
   #define NOMORE(v, n) \
-    do { \
+    do{ \
       __typeof__(n) _n = (n); \
       if (v > _n) v = _n; \
-    } while(0)
+    }while(0)
 
   #define LIMIT(v, n1, n2) \
-    do { \
+    do{ \
       __typeof__(n1) _n1 = (n1); \
       __typeof__(n2) _n2 = (n2); \
       if (v < _n1) v = _n1; \
       else if (v > _n2) v = _n2; \
-    } while(0)
+    }while(0)
 
 #endif
 
 // Macros to chain up to 12 conditions
 #define _DO_1(W,C,A)       (_##W##_1(A))
 #define _DO_2(W,C,A,B)     (_##W##_1(A) C _##W##_1(B))
 #define _DO_3(W,C,A,V...)  (_##W##_1(A) C _DO_2(W,C,V))
 #define _DO_4(W,C,A,V...)  (_##W##_1(A) C _DO_3(W,C,V))
 #define _DO_5(W,C,A,V...)  (_##W##_1(A) C _DO_4(W,C,V))
 #define _DO_6(W,C,A,V...)  (_##W##_1(A) C _DO_5(W,C,V))

commit a2ba0aaaacb38a680782a1ff7fd3e3a78f45fb6f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 8 23:42:29 2019 -0500

    HAL include and other adjustments (#14525)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 918b3c6d1b..a6e546a4a8 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -14,22 +14,20 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
-#include "minmax.h"
-
 #define NUM_AXIS 4
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 
 #define _AXIS(A) (A##_AXIS)
 
 #define _XMIN_ 100
 #define _YMIN_ 200
@@ -68,24 +66,30 @@
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV
 #define _BV(n) (1<<(n))
 #define TEST(n,b) !!((n)&_BV(b))
-#define SBI(n,b) (n |= _BV(b))
-#define CBI(n,b) (n &= ~_BV(b))
 #define SET_BIT_TO(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
 
+#ifndef SBI
+  #define SBI(A,B) (A |= (1 << (B)))
+#endif
+
+#ifndef CBI
+  #define CBI(A,B) (A &= ~(1 << (B)))
+#endif
+
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 
 #define RADIANS(d) ((d)*float(M_PI)/180.0f)
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
 #define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
@@ -262,10 +266,65 @@
 #define FLOOR(x)    floorf(x)
 #define LROUND(x)   lroundf(x)
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 
 #ifdef TARGET_LPC1768
   #define I2C_ADDRESS(A) ((A) << 1)
 #else
   #define I2C_ADDRESS(A) A
 #endif
+
+// Use NUM_ARGS(__VA_ARGS__) to get the number of variadic arguments
+#define _NUM_ARGS(_0,_24_,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1,N,...) N
+#define NUM_ARGS(V...) _NUM_ARGS(0,V,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
+
+#ifdef __cplusplus
+
+  #ifndef _MINMAX_H_
+  #define _MINMAX_H_
+
+    extern "C++" {
+
+      // C++11 solution that is standards compliant. Return type is deduced automatically
+      template <class L, class R> static inline constexpr auto _MIN(const L lhs, const R rhs) -> decltype(lhs + rhs) {
+        return lhs < rhs ? lhs : rhs;
+      }
+      template <class L, class R> static inline constexpr auto _MAX(const L lhs, const R rhs) -> decltype(lhs + rhs) {
+        return lhs > rhs ? lhs : rhs;
+      }
+      template<class T, class ... Ts> static inline constexpr const T _MIN(T V, Ts... Vs) { return _MIN(V, _MIN(Vs...)); }
+      template<class T, class ... Ts> static inline constexpr const T _MAX(T V, Ts... Vs) { return _MAX(V, _MAX(Vs...)); }
+
+    }
+
+  #endif
+
+#else
+
+  #define MIN_2(a,b)      ((a)<(b)?(a):(b))
+  #define MIN_3(a,...)    MIN_2(a,MIN_2(__VA_ARGS__))
+  #define MIN_4(a,...)    MIN_2(a,MIN_3(__VA_ARGS__))
+  #define MIN_5(a,...)    MIN_2(a,MIN_4(__VA_ARGS__))
+  #define MIN_6(a,...)    MIN_2(a,MIN_5(__VA_ARGS__))
+  #define MIN_7(a,...)    MIN_2(a,MIN_6(__VA_ARGS__))
+  #define MIN_8(a,...)    MIN_2(a,MIN_7(__VA_ARGS__))
+  #define MIN_9(a,...)    MIN_2(a,MIN_8(__VA_ARGS__))
+  #define MIN_10(a,...)   MIN_2(a,MIN_9(__VA_ARGS__))
+  #define __MIN_N(N, ...) MIN_##N(__VA_ARGS__)
+  #define _MIN_N(N, ...)  __MIN_N(N,__VA_ARGS__)
+  #define _MIN(...)       _MIN_N(NUM_ARGS(__VA_ARGS__), __VA_ARGS__)
+
+  #define MAX_2(a,b)      ((a)>(b)?(a):(b))
+  #define MAX_3(a,...)    MAX_2(a,MAX_2(__VA_ARGS__))
+  #define MAX_4(a,...)    MAX_2(a,MAX_3(__VA_ARGS__))
+  #define MAX_5(a,...)    MAX_2(a,MAX_4(__VA_ARGS__))
+  #define MAX_6(a,...)    MAX_2(a,MAX_5(__VA_ARGS__))
+  #define MAX_7(a,...)    MAX_2(a,MAX_6(__VA_ARGS__))
+  #define MAX_8(a,...)    MAX_2(a,MAX_7(__VA_ARGS__))
+  #define MAX_9(a,...)    MAX_2(a,MAX_8(__VA_ARGS__))
+  #define MAX_10(a,...)   MAX_2(a,MAX_9(__VA_ARGS__))
+  #define __MAX_N(N, ...) MAX_##N(__VA_ARGS__)
+  #define _MAX_N(N, ...)  __MAX_N(N,__VA_ARGS__)
+  #define _MAX(...)       _MAX_N(NUM_ARGS(__VA_ARGS__), __VA_ARGS__)
+
+#endif

commit 750a16ad385dca893d482cb51d8af2ac3f8a1da1
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jul 5 18:01:21 2019 -0500

    Fix MIN/MAX function collision with macros

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 0f2609f459..918b3c6d1b 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -183,21 +183,21 @@
 
 #define WITHIN(N,L,H)       ((N) >= (L) && (N) <= (H))
 #define NUMERIC(a)          WITHIN(a, '0', '9')
 #define DECIMAL(a)          (NUMERIC(a) || a == '.')
 #define NUMERIC_SIGNED(a)   (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a)   (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a)            (sizeof(a)/sizeof(*a))
 #define ZERO(a)             memset(a,0,sizeof(a))
 #define COPY(a,b) do{ \
     static_assert(sizeof(a[0]) == sizeof(b[0]), "COPY: '" STRINGIFY(a) "' and '" STRINGIFY(b) "' types (sizes) don't match!"); \
-    memcpy(&a[0],&b[0],MIN(sizeof(a),sizeof(b))); \
+    memcpy(&a[0],&b[0],_MIN(sizeof(a),sizeof(b))); \
   }while(0)
 
 // Macros for initializing arrays
 #define ARRAY_6(v1, v2, v3, v4, v5, v6, ...) { v1, v2, v3, v4, v5, v6 }
 #define ARRAY_5(v1, v2, v3, v4, v5, ...)     { v1, v2, v3, v4, v5 }
 #define ARRAY_4(v1, v2, v3, v4, ...)         { v1, v2, v3, v4 }
 #define ARRAY_3(v1, v2, v3, ...)             { v1, v2, v3 }
 #define ARRAY_2(v1, v2, ...)                 { v1, v2 }
 #define ARRAY_1(v1, ...)                     { v1 }
 

commit 44e4f853c8c7027e88381b1644281d3ef841d3c5
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jul 4 19:58:08 2019 -0500

    Patch M_PI in Marduino.h

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 94bd522e52..0f2609f459 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -77,24 +77,20 @@
 #define TEST(n,b) !!((n)&_BV(b))
 #define SBI(n,b) (n |= _BV(b))
 #define CBI(n,b) (n &= ~_BV(b))
 #define SET_BIT_TO(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
 
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 
-// Macros for maths shortcuts
-#undef M_PI
-#define M_PI 3.14159265358979323846f
-
 #define RADIANS(d) ((d)*float(M_PI)/180.0f)
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
 #define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ((a>0)-(a<0))
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index c12b9fd046..94bd522e52 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -1,16 +1,16 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.

commit 81d550754aef02f38ad86b11f219e6b3647ab894
Author: Karl Andersson <karl@iaccess.se>
Date:   Fri Jun 21 07:48:10 2019 +0200

    Fix "UNUSED" redefined warning on HAL_STM32 (#14342)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 2faf9900d1..c12b9fd046 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -50,21 +50,25 @@
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Remove compiler warning on an unused variable
 #ifndef UNUSED
-  #define UNUSED(x) ((void)(x))
+  #if defined(ARDUINO_ARCH_STM32) && !defined(STM32GENERIC)
+    #define UNUSED(X) (void)X
+  #else
+    #define UNUSED(x) ((void)(x))
+  #endif
 #endif
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks

commit 4c872a01f284cbf181f52c84e2ba6b4618e62556
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jun 19 00:00:19 2019 -0500

    G-code queue singleton, front injection (#14236)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 3805c216fe..2faf9900d1 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -49,21 +49,23 @@
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Remove compiler warning on an unused variable
-#define UNUSED(X) (void)X
+#ifndef UNUSED
+  #define UNUSED(x) ((void)(x))
+#endif
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV

commit 49cf92dc36424cf828436f32e72263eca39a1cc3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 16 23:43:06 2019 -0500

    Extended condition macros (#13419)
    
    Allow `ENABLED`, `DISABLED`, `PIN_EXISTS`, and `BUTTON_EXISTS` to take multiple arguments. Also add:
    - Alias `ANY(...)` for `!DISABLED(...)`
    - Alias `ANY_PIN(...)` for `PIN_EXISTS(a) || PIN_EXISTS(b) ...`
    - Alias `EITHER(A,B)` for `ANY(...)`
    - Alias `ALL(...)` and `BOTH(A,B)` for `ENABLED(...)`
    - `NONE(...)` for `DISABLED(...)`

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 961589dd39..3805c216fe 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -126,84 +126,115 @@
   #define LIMIT(v, n1, n2) \
     do { \
       __typeof__(n1) _n1 = (n1); \
       __typeof__(n2) _n2 = (n2); \
       if (v < _n1) v = _n1; \
       else if (v > _n2) v = _n2; \
     } while(0)
 
 #endif
 
+// Macros to chain up to 12 conditions
+#define _DO_1(W,C,A)       (_##W##_1(A))
+#define _DO_2(W,C,A,B)     (_##W##_1(A) C _##W##_1(B))
+#define _DO_3(W,C,A,V...)  (_##W##_1(A) C _DO_2(W,C,V))
+#define _DO_4(W,C,A,V...)  (_##W##_1(A) C _DO_3(W,C,V))
+#define _DO_5(W,C,A,V...)  (_##W##_1(A) C _DO_4(W,C,V))
+#define _DO_6(W,C,A,V...)  (_##W##_1(A) C _DO_5(W,C,V))
+#define _DO_7(W,C,A,V...)  (_##W##_1(A) C _DO_6(W,C,V))
+#define _DO_8(W,C,A,V...)  (_##W##_1(A) C _DO_7(W,C,V))
+#define _DO_9(W,C,A,V...)  (_##W##_1(A) C _DO_8(W,C,V))
+#define _DO_10(W,C,A,V...) (_##W##_1(A) C _DO_9(W,C,V))
+#define _DO_11(W,C,A,V...) (_##W##_1(A) C _DO_10(W,C,V))
+#define _DO_12(W,C,A,V...) (_##W##_1(A) C _DO_11(W,C,V))
+#define __DO_N(W,C,N,V...) _DO_##N(W,C,V)
+#define _DO_N(W,C,N,V...)  __DO_N(W,C,N,V)
+#define DO(W,C,V...)       _DO_N(W,C,NUM_ARGS(V),V)
+
 // Macros to support option testing
-#define _CAT(a, ...) a ## __VA_ARGS__
+#define _CAT(a,V...) a##V
 #define SWITCH_ENABLED_false 0
 #define SWITCH_ENABLED_true  1
 #define SWITCH_ENABLED_0     0
 #define SWITCH_ENABLED_1     1
 #define SWITCH_ENABLED_0x0   0
 #define SWITCH_ENABLED_0x1   1
 #define SWITCH_ENABLED_      1
-#define ENABLED(b) _CAT(SWITCH_ENABLED_, b)
-#define DISABLED(b) !ENABLED(b)
-
-#define WITHIN(V,L,H) ((V) >= (L) && (V) <= (H))
-#define NUMERIC(a) WITHIN(a, '0', '9')
-#define DECIMAL(a) (NUMERIC(a) || a == '.')
-#define NUMERIC_SIGNED(a) (NUMERIC(a) || (a) == '-' || (a) == '+')
-#define DECIMAL_SIGNED(a) (DECIMAL(a) || (a) == '-' || (a) == '+')
-#define COUNT(a) (sizeof(a)/sizeof(*a))
-#define ZERO(a) memset(a,0,sizeof(a))
+#define _ENA_1(O)           _CAT(SWITCH_ENABLED_, O)
+#define _DIS_1(O)           !_ENA_1(O)
+#define ENABLED(V...)       DO(ENA,&&,V)
+#define DISABLED(V...)      DO(DIS,&&,V)
+
+#define ANY(V...)          !DISABLED(V)
+#define NONE(V...)          DISABLED(V)
+#define ALL(V...)           ENABLED(V)
+#define BOTH(V1,V2)         ALL(V1,V2)
+#define EITHER(V1,V2)       ANY(V1,V2)
+
+// Macros to support pins/buttons exist testing
+#define _PINEX_1(PN)        (defined(PN##_PIN) && PN##_PIN >= 0)
+#define PIN_EXISTS(V...)    DO(PINEX,&&,V)
+#define ANY_PIN(V...)       DO(PINEX,||,V)
+
+#define _BTNEX_1(BN)        (defined(BTN_##BN) && BTN_##BN >= 0)
+#define BUTTON_EXISTS(V...) DO(BTNEX,&&,V)
+#define ANY_BUTTON(V...)    DO(BTNEX,||,V)
+
+#define WITHIN(N,L,H)       ((N) >= (L) && (N) <= (H))
+#define NUMERIC(a)          WITHIN(a, '0', '9')
+#define DECIMAL(a)          (NUMERIC(a) || a == '.')
+#define NUMERIC_SIGNED(a)   (NUMERIC(a) || (a) == '-' || (a) == '+')
+#define DECIMAL_SIGNED(a)   (DECIMAL(a) || (a) == '-' || (a) == '+')
+#define COUNT(a)            (sizeof(a)/sizeof(*a))
+#define ZERO(a)             memset(a,0,sizeof(a))
 #define COPY(a,b) do{ \
     static_assert(sizeof(a[0]) == sizeof(b[0]), "COPY: '" STRINGIFY(a) "' and '" STRINGIFY(b) "' types (sizes) don't match!"); \
     memcpy(&a[0],&b[0],MIN(sizeof(a),sizeof(b))); \
   }while(0)
 
 // Macros for initializing arrays
 #define ARRAY_6(v1, v2, v3, v4, v5, v6, ...) { v1, v2, v3, v4, v5, v6 }
 #define ARRAY_5(v1, v2, v3, v4, v5, ...)     { v1, v2, v3, v4, v5 }
 #define ARRAY_4(v1, v2, v3, v4, ...)         { v1, v2, v3, v4 }
 #define ARRAY_3(v1, v2, v3, ...)             { v1, v2, v3 }
 #define ARRAY_2(v1, v2, ...)                 { v1, v2 }
 #define ARRAY_1(v1, ...)                     { v1 }
 
-#define _ARRAY_N(N, ...) ARRAY_ ##N(__VA_ARGS__)
-#define ARRAY_N(N, ...) _ARRAY_N(N, __VA_ARGS__)
+#define _ARRAY_N(N,V...) ARRAY_##N(V)
+#define ARRAY_N(N,V...) _ARRAY_N(N,V)
 
 // Macros for adding
 #define INC_0 1
 #define INC_1 2
 #define INC_2 3
 #define INC_3 4
 #define INC_4 5
 #define INC_5 6
 #define INC_6 7
 #define INC_7 8
 #define INC_8 9
-#define INCREMENT_(n) INC_ ##n
+#define INCREMENT_(n) INC_##n
 #define INCREMENT(n) INCREMENT_(n)
 
 // Macros for subtracting
 #define DEC_1 0
 #define DEC_2 1
 #define DEC_3 2
 #define DEC_4 3
 #define DEC_5 4
 #define DEC_6 5
 #define DEC_7 6
 #define DEC_8 7
 #define DEC_9 8
-#define DECREMENT_(n) DEC_ ##n
+#define DECREMENT_(n) DEC_##n
 #define DECREMENT(n) DECREMENT_(n)
 
-#define PIN_EXISTS(PN)    (defined(PN ##_PIN) && PN ##_PIN >= 0)
-#define BUTTON_EXISTS(BN) (defined(BTN_## BN) && BTN_## BN >= 0)
-
 #define MMM_TO_MMS(MM_M) ((MM_M)/60.0f)
 #define MMS_TO_MMM(MM_S) ((MM_S)*60.0f)
 
 #define NOOP (void(0))
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 #undef ABS
 #ifdef __cplusplus
   template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }

commit 8e0ac93d60a9f723e75be8d4bd22d04592c6ec26
Author: jmz52 <jmz52@users.noreply.github.com>
Date:   Wed Mar 13 12:34:02 2019 +0300

    Fix 'UNUSED redefined' compiler warning (#13387)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 7a1bb45c51..961589dd39 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -49,21 +49,21 @@
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Remove compiler warning on an unused variable
-#define UNUSED(x) ((void)(x))
+#define UNUSED(X) (void)X
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV

commit 10c8c034bdc529ced1d0b70b5f8a1079cccc5f66
Author: 7eggert <7eggert@gmx.de>
Date:   Tue Mar 12 00:10:56 2019 +0100

    Allow both encoder and ADC keypad (#13355)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index b438db9201..7a1bb45c51 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -187,21 +187,22 @@
 #define DEC_3 2
 #define DEC_4 3
 #define DEC_5 4
 #define DEC_6 5
 #define DEC_7 6
 #define DEC_8 7
 #define DEC_9 8
 #define DECREMENT_(n) DEC_ ##n
 #define DECREMENT(n) DECREMENT_(n)
 
-#define PIN_EXISTS(PN) (defined(PN ##_PIN) && PN ##_PIN >= 0)
+#define PIN_EXISTS(PN)    (defined(PN ##_PIN) && PN ##_PIN >= 0)
+#define BUTTON_EXISTS(BN) (defined(BTN_## BN) && BTN_## BN >= 0)
 
 #define MMM_TO_MMS(MM_M) ((MM_M)/60.0f)
 #define MMS_TO_MMM(MM_S) ((MM_S)*60.0f)
 
 #define NOOP (void(0))
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 #undef ABS
 #ifdef __cplusplus

commit a43e892fb5f180e9ff99815b679b58ff9422deb6
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Feb 20 06:26:36 2019 -0600

    Use 8-bit i2c address on LPC platform
    
    Fix #9799 ‚Äî hopefully not a unicorn

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 009a7f7b85..b438db9201 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -222,10 +222,16 @@
 //
 #define ATAN2(y, x) atan2f(y, x)
 #define POW(x, y)   powf(x, y)
 #define SQRT(x)     sqrtf(x)
 #define RSQRT(x)    (1 / sqrtf(x))
 #define CEIL(x)     ceilf(x)
 #define FLOOR(x)    floorf(x)
 #define LROUND(x)   lroundf(x)
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
+
+#ifdef TARGET_LPC1768
+  #define I2C_ADDRESS(A) ((A) << 1)
+#else
+  #define I2C_ADDRESS(A) A
+#endif

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index f1b2550c61..009a7f7b85 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit ca73b2f465f6a305e913b5327eb95d8021e243e1
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 4 05:41:40 2019 -0600

    Add static assert to catch errors in COPY(a,b)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 1c57d88c86..f1b2550c61 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -145,21 +145,24 @@
 #define ENABLED(b) _CAT(SWITCH_ENABLED_, b)
 #define DISABLED(b) !ENABLED(b)
 
 #define WITHIN(V,L,H) ((V) >= (L) && (V) <= (H))
 #define NUMERIC(a) WITHIN(a, '0', '9')
 #define DECIMAL(a) (NUMERIC(a) || a == '.')
 #define NUMERIC_SIGNED(a) (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a) (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a) (sizeof(a)/sizeof(*a))
 #define ZERO(a) memset(a,0,sizeof(a))
-#define COPY(a,b) memcpy(a,b,MIN(sizeof(a),sizeof(b)))
+#define COPY(a,b) do{ \
+    static_assert(sizeof(a[0]) == sizeof(b[0]), "COPY: '" STRINGIFY(a) "' and '" STRINGIFY(b) "' types (sizes) don't match!"); \
+    memcpy(&a[0],&b[0],MIN(sizeof(a),sizeof(b))); \
+  }while(0)
 
 // Macros for initializing arrays
 #define ARRAY_6(v1, v2, v3, v4, v5, v6, ...) { v1, v2, v3, v4, v5, v6 }
 #define ARRAY_5(v1, v2, v3, v4, v5, ...)     { v1, v2, v3, v4, v5 }
 #define ARRAY_4(v1, v2, v3, v4, ...)         { v1, v2, v3, v4 }
 #define ARRAY_3(v1, v2, v3, ...)             { v1, v2, v3 }
 #define ARRAY_2(v1, v2, ...)                 { v1, v2 }
 #define ARRAY_1(v1, ...)                     { v1 }
 
 #define _ARRAY_N(N, ...) ARRAY_ ##N(__VA_ARGS__)

commit ce563d7c2e1f61dfb76f3f14e125b4f74f6d41fe
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Jan 19 16:56:12 2019 -0600

    Various general cleanups
    
    Mostly from the L6470-oriented PR

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index bfdbdd5529..1c57d88c86 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -49,23 +49,21 @@
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Remove compiler warning on an unused variable
-#if !defined(ARDUINO_ARCH_STM32) || defined(STM32GENERIC)
-  #define UNUSED(x) ((void)(x))
-#endif
+#define UNUSED(x) ((void)(x))
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV

commit 8ae6f1e556b306148102d4f749b0c12cecf4b355
Author: Karl Andersson <karl@iaccess.se>
Date:   Fri Jan 11 02:01:31 2019 +0100

    Fix errors and some compiler warnings with HAL_STM32 PlatformIO build (#12869)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 1c57d88c86..bfdbdd5529 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -49,21 +49,23 @@
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Remove compiler warning on an unused variable
-#define UNUSED(x) ((void)(x))
+#if !defined(ARDUINO_ARCH_STM32) || defined(STM32GENERIC)
+  #define UNUSED(x) ((void)(x))
+#endif
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV

commit c0b75f49b65d2ef07ad85b5505cba7dfdef3adc6
Author: Ludy <Ludy87@users.noreply.github.com>
Date:   Mon Nov 19 00:54:00 2018 +0100

    Fix "no effect" and "unused variable" compile warnings (#12473)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 11604f8c14..1c57d88c86 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -189,21 +189,21 @@
 #define DEC_8 7
 #define DEC_9 8
 #define DECREMENT_(n) DEC_ ##n
 #define DECREMENT(n) DECREMENT_(n)
 
 #define PIN_EXISTS(PN) (defined(PN ##_PIN) && PN ##_PIN >= 0)
 
 #define MMM_TO_MMS(MM_M) ((MM_M)/60.0f)
 #define MMS_TO_MMM(MM_S) ((MM_S)*60.0f)
 
-#define NOOP (0)
+#define NOOP (void(0))
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 #undef ABS
 #ifdef __cplusplus
   template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
 #else
   #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
 #endif
 

commit c1e17037e55cfb3220a0f3b190d3f2df8fd72724
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Sat Nov 17 21:21:44 2018 -0700

    Various fixes for MarlinUI and ExtUI (#12439)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 945e983e97..11604f8c14 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -189,21 +189,21 @@
 #define DEC_8 7
 #define DEC_9 8
 #define DECREMENT_(n) DEC_ ##n
 #define DECREMENT(n) DECREMENT_(n)
 
 #define PIN_EXISTS(PN) (defined(PN ##_PIN) && PN ##_PIN >= 0)
 
 #define MMM_TO_MMS(MM_M) ((MM_M)/60.0f)
 #define MMS_TO_MMM(MM_S) ((MM_S)*60.0f)
 
-#define NOOP do{} while(0)
+#define NOOP (0)
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 #undef ABS
 #ifdef __cplusplus
   template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
 #else
   #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
 #endif
 

commit d015f746cc8f8e2dd930d7c87165825993743351
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 26 03:53:06 2018 -0500

    Fix some compile warnings (#12220)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 294d6213ca..945e983e97 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -42,21 +42,21 @@
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
-  #define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20 on AVR
+  #define CYCLES_PER_MICROSECOND (F_CPU / 1000000UL) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Remove compiler warning on an unused variable
 #define UNUSED(x) ((void)(x))
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M

commit b64157109872c696c328cc2b19bdfa314007a5e7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Oct 20 16:10:50 2018 -0500

    Replace types.h with millis_t.h

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 3f4e99ebb3..294d6213ca 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -186,23 +186,20 @@
 #define DEC_5 4
 #define DEC_6 5
 #define DEC_7 6
 #define DEC_8 7
 #define DEC_9 8
 #define DECREMENT_(n) DEC_ ##n
 #define DECREMENT(n) DECREMENT_(n)
 
 #define PIN_EXISTS(PN) (defined(PN ##_PIN) && PN ##_PIN >= 0)
 
-#define PENDING(NOW,SOON) ((long)(NOW-(SOON))<0)
-#define ELAPSED(NOW,SOON) (!PENDING(NOW,SOON))
-
 #define MMM_TO_MMS(MM_M) ((MM_M)/60.0f)
 #define MMS_TO_MMM(MM_S) ((MM_S)*60.0f)
 
 #define NOOP do{} while(0)
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 #undef ABS
 #ifdef __cplusplus
   template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }

commit 2067619a269f2b4a6e52fdcb1f968e48b952a7d1
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Mon Jul 2 09:06:17 2018 -0600

    Add USB_FLASH_DRIVE_SUPPORT

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index df21b0519f..3f4e99ebb3 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -12,21 +12,20 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
-
 #pragma once
 
 #include "minmax.h"
 
 #define NUM_AXIS 4
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 

commit ee53f7d8134c496552b8df6b69236727d62ec592
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 2 22:09:41 2018 -0500

    Revert header reorg.

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 815823bd80..df21b0519f 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -12,98 +12,111 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
+
 #pragma once
 
-#include "config.h"
+#include "minmax.h"
 
 #define NUM_AXIS 4
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 
 #define _AXIS(A) (A##_AXIS)
 
+#define _XMIN_ 100
+#define _YMIN_ 200
+#define _ZMIN_ 300
+#define _XMAX_ 101
+#define _YMAX_ 201
+#define _ZMAX_ 301
+
+#define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
+#define  FORCE_INLINE  __attribute__((always_inline)) inline
+#define _UNUSED      __attribute__((unused))
+#define _O0          __attribute__((optimize("O0")))
+#define _Os          __attribute__((optimize("Os")))
+#define _O1          __attribute__((optimize("O1")))
+#define _O2          __attribute__((optimize("O2")))
+#define _O3          __attribute__((optimize("O3")))
+
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Remove compiler warning on an unused variable
-#undef UNUSED
 #define UNUSED(x) ((void)(x))
 
-// Assembly wrappers for code and labels
+// Macros to make a string from a macro
+#define STRINGIFY_(M) #M
+#define STRINGIFY(M) STRINGIFY_(M)
+
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
+#undef _BV
+#define _BV(n) (1<<(n))
+#define TEST(n,b) !!((n)&_BV(b))
+#define SBI(n,b) (n |= _BV(b))
+#define CBI(n,b) (n &= ~_BV(b))
 #define SET_BIT_TO(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
 
+#define _BV32(b) (1UL << (b))
+#define TEST32(n,b) !!((n)&_BV32(b))
+#define SBI32(n,b) (n |= _BV32(b))
+#define CBI32(n,b) (n &= ~_BV32(b))
+
+// Macros for maths shortcuts
+#undef M_PI
+#define M_PI 3.14159265358979323846f
+
 #define RADIANS(d) ((d)*float(M_PI)/180.0f)
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
 #define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ((a>0)-(a<0))
+#define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
-// Convenience templates / macros
-#undef ABS
-#undef MIN
-#undef MAX
+// Macros to constrain values
 #ifdef __cplusplus
 
-  // Standards-compliant C++11 solutions
-
-  extern "C++" {
-
-    template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
-
-    template <class V, class N> static inline constexpr void NOLESS(V& v, const N n) {
-      if (v < n) v = n;
-    }
-    template <class V, class N> static inline constexpr void NOMORE(V& v, const N n) {
-      if (v > n) v = n;
-    }
-    template <class V, class N1, class N2> static inline constexpr void LIMIT(V& v, const N1 n1, const N2 n2) {
-      if (v < n1) v = n1;
-      else if (v > n2) v = n2;
-    }
-
-    template <class L, class R> static inline constexpr auto MIN(const L lhs, const R rhs) -> decltype(lhs + rhs) {
-      return lhs < rhs ? lhs : rhs;
-    }
-    template <class L, class R> static inline constexpr auto MAX(const L lhs, const R rhs) -> decltype(lhs + rhs) {
-      return lhs > rhs ? lhs : rhs;
-    }
-    template<class T, class ... Ts> static inline constexpr const T MIN(T V, Ts... Vs) { return MIN(V, MIN(Vs...)); }
-    template<class T, class ... Ts> static inline constexpr const T MAX(T V, Ts... Vs) { return MAX(V, MAX(Vs...)); }
-
+  // C++11 solution that is standards compliant.
+  template <class V, class N> static inline constexpr void NOLESS(V& v, const N n) {
+    if (v < n) v = n;
+  }
+  template <class V, class N> static inline constexpr void NOMORE(V& v, const N n) {
+    if (v > n) v = n;
+  }
+  template <class V, class N1, class N2> static inline constexpr void LIMIT(V& v, const N1 n1, const N2 n2) {
+    if (v < n1) v = n1;
+    else if (v > n2) v = n2;
   }
 
 #else
 
-  #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
-
   // Using GCC extensions, but Travis GCC version does not like it and gives
   //  "error: statement-expressions are not allowed outside functions nor in template-argument lists"
   #define NOLESS(v, n) \
     do { \
       __typeof__(n) _n = (n); \
       if (v < _n) v = _n; \
     } while(0)
 
   #define NOMORE(v, n) \
     do { \
@@ -112,62 +125,99 @@
     } while(0)
 
   #define LIMIT(v, n1, n2) \
     do { \
       __typeof__(n1) _n1 = (n1); \
       __typeof__(n2) _n2 = (n2); \
       if (v < _n1) v = _n1; \
       else if (v > _n2) v = _n2; \
     } while(0)
 
-  // NUM_ARGS(...) evaluates to the number of arguments
-  #define _NUM_ARGS(X,X6,X5,X4,X3,X2,X1,N,...) N
-  #define NUM_ARGS(...) _NUM_ARGS(0, __VA_ARGS__ ,6,5,4,3,2,1,0)
-
-  #define MIN_2(a,b)      ({__typeof__(a) _a = (a); __typeof__(b) _b = (b); _a < _b ? _a : _b;})
-  #define MIN_3(a,...)    MIN_2(a,MIN_2(__VA_ARGS__))
-  #define MIN_4(a,...)    MIN_2(a,MIN_3(__VA_ARGS__))
-  #define MIN_5(a,...)    MIN_2(a,MIN_4(__VA_ARGS__))
-  #define MIN_6(a,...)    MIN_2(a,MIN_5(__VA_ARGS__))
-  #define __MIN_N(N, ...) MIN_ ## N(__VA_ARGS__)
-  #define _MIN_N(N, ...)  __MIN_N(N, __VA_ARGS__)
-  #define MIN(...)        _MIN_N(NUM_ARGS(__VA_ARGS__), __VA_ARGS__)
-
-  #define MAX_2(a,b)      ({__typeof__(a) _a = (a); __typeof__(b) _b = (b); _a > _b ? _a : _b;})
-  #define MAX_3(a,...)    MAX_2(a,MAX_2(__VA_ARGS__))
-  #define MAX_4(a,...)    MAX_2(a,MAX_3(__VA_ARGS__))
-  #define MAX_5(a,...)    MAX_2(a,MAX_4(__VA_ARGS__))
-  #define MAX_6(a,...)    MAX_2(a,MAX_5(__VA_ARGS__))
-  #define __MAX_N(N, ...) MAX_ ## N(__VA_ARGS__)
-  #define _MAX_N(N, ...)  __MAX_N(N, __VA_ARGS__)
-  #define MAX(...)        _MAX_N(NUM_ARGS(__VA_ARGS__), __VA_ARGS__)
-
 #endif
 
+// Macros to support option testing
+#define _CAT(a, ...) a ## __VA_ARGS__
+#define SWITCH_ENABLED_false 0
+#define SWITCH_ENABLED_true  1
+#define SWITCH_ENABLED_0     0
+#define SWITCH_ENABLED_1     1
+#define SWITCH_ENABLED_0x0   0
+#define SWITCH_ENABLED_0x1   1
+#define SWITCH_ENABLED_      1
+#define ENABLED(b) _CAT(SWITCH_ENABLED_, b)
+#define DISABLED(b) !ENABLED(b)
+
+#define WITHIN(V,L,H) ((V) >= (L) && (V) <= (H))
 #define NUMERIC(a) WITHIN(a, '0', '9')
 #define DECIMAL(a) (NUMERIC(a) || a == '.')
 #define NUMERIC_SIGNED(a) (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a) (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a) (sizeof(a)/sizeof(*a))
 #define ZERO(a) memset(a,0,sizeof(a))
 #define COPY(a,b) memcpy(a,b,MIN(sizeof(a),sizeof(b)))
 
+// Macros for initializing arrays
+#define ARRAY_6(v1, v2, v3, v4, v5, v6, ...) { v1, v2, v3, v4, v5, v6 }
+#define ARRAY_5(v1, v2, v3, v4, v5, ...)     { v1, v2, v3, v4, v5 }
+#define ARRAY_4(v1, v2, v3, v4, ...)         { v1, v2, v3, v4 }
+#define ARRAY_3(v1, v2, v3, ...)             { v1, v2, v3 }
+#define ARRAY_2(v1, v2, ...)                 { v1, v2 }
+#define ARRAY_1(v1, ...)                     { v1 }
+
+#define _ARRAY_N(N, ...) ARRAY_ ##N(__VA_ARGS__)
+#define ARRAY_N(N, ...) _ARRAY_N(N, __VA_ARGS__)
+
+// Macros for adding
+#define INC_0 1
+#define INC_1 2
+#define INC_2 3
+#define INC_3 4
+#define INC_4 5
+#define INC_5 6
+#define INC_6 7
+#define INC_7 8
+#define INC_8 9
+#define INCREMENT_(n) INC_ ##n
+#define INCREMENT(n) INCREMENT_(n)
+
+// Macros for subtracting
+#define DEC_1 0
+#define DEC_2 1
+#define DEC_3 2
+#define DEC_4 3
+#define DEC_5 4
+#define DEC_6 5
+#define DEC_7 6
+#define DEC_8 7
+#define DEC_9 8
+#define DECREMENT_(n) DEC_ ##n
+#define DECREMENT(n) DECREMENT_(n)
+
+#define PIN_EXISTS(PN) (defined(PN ##_PIN) && PN ##_PIN >= 0)
+
 #define PENDING(NOW,SOON) ((long)(NOW-(SOON))<0)
 #define ELAPSED(NOW,SOON) (!PENDING(NOW,SOON))
 
 #define MMM_TO_MMS(MM_M) ((MM_M)/60.0f)
 #define MMS_TO_MMM(MM_S) ((MM_S)*60.0f)
 
 #define NOOP do{} while(0)
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
+#undef ABS
+#ifdef __cplusplus
+  template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
+#else
+  #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
+#endif
+
 #define UNEAR_ZERO(x) ((x) < 0.000001f)
 #define NEAR_ZERO(x) WITHIN(x, -0.000001f, 0.000001f)
 #define NEAR(x,y) NEAR_ZERO((x)-(y))
 
 #define RECIPROCAL(x) (NEAR_ZERO(x) ? 0 : (1 / float(x)))
 #define FIXFLOAT(f) (f + (f < 0 ? -0.00005f : 0.00005f))
 
 //
 // Maths macros that can be overridden by HAL
 //

commit d777cef837eaf7cf92e30508c6707611d893231b
Author: LineF <LineF@users.noreply.github.com>
Date:   Wed Oct 3 04:35:34 2018 +0200

    fixed minimum macro (#11986)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index aa7f5cce9b..815823bd80 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -116,21 +116,21 @@
       __typeof__(n1) _n1 = (n1); \
       __typeof__(n2) _n2 = (n2); \
       if (v < _n1) v = _n1; \
       else if (v > _n2) v = _n2; \
     } while(0)
 
   // NUM_ARGS(...) evaluates to the number of arguments
   #define _NUM_ARGS(X,X6,X5,X4,X3,X2,X1,N,...) N
   #define NUM_ARGS(...) _NUM_ARGS(0, __VA_ARGS__ ,6,5,4,3,2,1,0)
 
-  #define MIN_2(a,b)      ({__typeof__(a) _a = (a); __typeof__(b) _b = (b); _a > _b ? _a : _b;})
+  #define MIN_2(a,b)      ({__typeof__(a) _a = (a); __typeof__(b) _b = (b); _a < _b ? _a : _b;})
   #define MIN_3(a,...)    MIN_2(a,MIN_2(__VA_ARGS__))
   #define MIN_4(a,...)    MIN_2(a,MIN_3(__VA_ARGS__))
   #define MIN_5(a,...)    MIN_2(a,MIN_4(__VA_ARGS__))
   #define MIN_6(a,...)    MIN_2(a,MIN_5(__VA_ARGS__))
   #define __MIN_N(N, ...) MIN_ ## N(__VA_ARGS__)
   #define _MIN_N(N, ...)  __MIN_N(N, __VA_ARGS__)
   #define MIN(...)        _MIN_N(NUM_ARGS(__VA_ARGS__), __VA_ARGS__)
 
   #define MAX_2(a,b)      ({__typeof__(a) _a = (a); __typeof__(b) _b = (b); _a > _b ? _a : _b;})
   #define MAX_3(a,...)    MAX_2(a,MAX_2(__VA_ARGS__))

commit 0dedb3e13932c9134e635a857f7e69547a2ab4bc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Oct 2 04:25:46 2018 -0500

    Reorganize some core headers (#11983)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index df21b0519f..aa7f5cce9b 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -12,111 +12,98 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
-
 #pragma once
 
-#include "minmax.h"
+#include "config.h"
 
 #define NUM_AXIS 4
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 
 #define _AXIS(A) (A##_AXIS)
 
-#define _XMIN_ 100
-#define _YMIN_ 200
-#define _ZMIN_ 300
-#define _XMAX_ 101
-#define _YMAX_ 201
-#define _ZMAX_ 301
-
-#define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
-#define  FORCE_INLINE  __attribute__((always_inline)) inline
-#define _UNUSED      __attribute__((unused))
-#define _O0          __attribute__((optimize("O0")))
-#define _Os          __attribute__((optimize("Os")))
-#define _O1          __attribute__((optimize("O1")))
-#define _O2          __attribute__((optimize("O2")))
-#define _O3          __attribute__((optimize("O3")))
-
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Remove compiler warning on an unused variable
+#undef UNUSED
 #define UNUSED(x) ((void)(x))
 
-// Macros to make a string from a macro
-#define STRINGIFY_(M) #M
-#define STRINGIFY(M) STRINGIFY_(M)
-
+// Assembly wrappers for code and labels
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
-#undef _BV
-#define _BV(n) (1<<(n))
-#define TEST(n,b) !!((n)&_BV(b))
-#define SBI(n,b) (n |= _BV(b))
-#define CBI(n,b) (n &= ~_BV(b))
 #define SET_BIT_TO(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
 
-#define _BV32(b) (1UL << (b))
-#define TEST32(n,b) !!((n)&_BV32(b))
-#define SBI32(n,b) (n |= _BV32(b))
-#define CBI32(n,b) (n &= ~_BV32(b))
-
-// Macros for maths shortcuts
-#undef M_PI
-#define M_PI 3.14159265358979323846f
-
 #define RADIANS(d) ((d)*float(M_PI)/180.0f)
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
 #define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ((a>0)-(a<0))
-#define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
-// Macros to constrain values
+// Convenience templates / macros
+#undef ABS
+#undef MIN
+#undef MAX
 #ifdef __cplusplus
 
-  // C++11 solution that is standards compliant.
-  template <class V, class N> static inline constexpr void NOLESS(V& v, const N n) {
-    if (v < n) v = n;
-  }
-  template <class V, class N> static inline constexpr void NOMORE(V& v, const N n) {
-    if (v > n) v = n;
-  }
-  template <class V, class N1, class N2> static inline constexpr void LIMIT(V& v, const N1 n1, const N2 n2) {
-    if (v < n1) v = n1;
-    else if (v > n2) v = n2;
+  // Standards-compliant C++11 solutions
+
+  extern "C++" {
+
+    template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
+
+    template <class V, class N> static inline constexpr void NOLESS(V& v, const N n) {
+      if (v < n) v = n;
+    }
+    template <class V, class N> static inline constexpr void NOMORE(V& v, const N n) {
+      if (v > n) v = n;
+    }
+    template <class V, class N1, class N2> static inline constexpr void LIMIT(V& v, const N1 n1, const N2 n2) {
+      if (v < n1) v = n1;
+      else if (v > n2) v = n2;
+    }
+
+    template <class L, class R> static inline constexpr auto MIN(const L lhs, const R rhs) -> decltype(lhs + rhs) {
+      return lhs < rhs ? lhs : rhs;
+    }
+    template <class L, class R> static inline constexpr auto MAX(const L lhs, const R rhs) -> decltype(lhs + rhs) {
+      return lhs > rhs ? lhs : rhs;
+    }
+    template<class T, class ... Ts> static inline constexpr const T MIN(T V, Ts... Vs) { return MIN(V, MIN(Vs...)); }
+    template<class T, class ... Ts> static inline constexpr const T MAX(T V, Ts... Vs) { return MAX(V, MAX(Vs...)); }
+
   }
 
 #else
 
+  #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
+
   // Using GCC extensions, but Travis GCC version does not like it and gives
   //  "error: statement-expressions are not allowed outside functions nor in template-argument lists"
   #define NOLESS(v, n) \
     do { \
       __typeof__(n) _n = (n); \
       if (v < _n) v = _n; \
     } while(0)
 
   #define NOMORE(v, n) \
     do { \
@@ -125,99 +112,62 @@
     } while(0)
 
   #define LIMIT(v, n1, n2) \
     do { \
       __typeof__(n1) _n1 = (n1); \
       __typeof__(n2) _n2 = (n2); \
       if (v < _n1) v = _n1; \
       else if (v > _n2) v = _n2; \
     } while(0)
 
+  // NUM_ARGS(...) evaluates to the number of arguments
+  #define _NUM_ARGS(X,X6,X5,X4,X3,X2,X1,N,...) N
+  #define NUM_ARGS(...) _NUM_ARGS(0, __VA_ARGS__ ,6,5,4,3,2,1,0)
+
+  #define MIN_2(a,b)      ({__typeof__(a) _a = (a); __typeof__(b) _b = (b); _a > _b ? _a : _b;})
+  #define MIN_3(a,...)    MIN_2(a,MIN_2(__VA_ARGS__))
+  #define MIN_4(a,...)    MIN_2(a,MIN_3(__VA_ARGS__))
+  #define MIN_5(a,...)    MIN_2(a,MIN_4(__VA_ARGS__))
+  #define MIN_6(a,...)    MIN_2(a,MIN_5(__VA_ARGS__))
+  #define __MIN_N(N, ...) MIN_ ## N(__VA_ARGS__)
+  #define _MIN_N(N, ...)  __MIN_N(N, __VA_ARGS__)
+  #define MIN(...)        _MIN_N(NUM_ARGS(__VA_ARGS__), __VA_ARGS__)
+
+  #define MAX_2(a,b)      ({__typeof__(a) _a = (a); __typeof__(b) _b = (b); _a > _b ? _a : _b;})
+  #define MAX_3(a,...)    MAX_2(a,MAX_2(__VA_ARGS__))
+  #define MAX_4(a,...)    MAX_2(a,MAX_3(__VA_ARGS__))
+  #define MAX_5(a,...)    MAX_2(a,MAX_4(__VA_ARGS__))
+  #define MAX_6(a,...)    MAX_2(a,MAX_5(__VA_ARGS__))
+  #define __MAX_N(N, ...) MAX_ ## N(__VA_ARGS__)
+  #define _MAX_N(N, ...)  __MAX_N(N, __VA_ARGS__)
+  #define MAX(...)        _MAX_N(NUM_ARGS(__VA_ARGS__), __VA_ARGS__)
+
 #endif
 
-// Macros to support option testing
-#define _CAT(a, ...) a ## __VA_ARGS__
-#define SWITCH_ENABLED_false 0
-#define SWITCH_ENABLED_true  1
-#define SWITCH_ENABLED_0     0
-#define SWITCH_ENABLED_1     1
-#define SWITCH_ENABLED_0x0   0
-#define SWITCH_ENABLED_0x1   1
-#define SWITCH_ENABLED_      1
-#define ENABLED(b) _CAT(SWITCH_ENABLED_, b)
-#define DISABLED(b) !ENABLED(b)
-
-#define WITHIN(V,L,H) ((V) >= (L) && (V) <= (H))
 #define NUMERIC(a) WITHIN(a, '0', '9')
 #define DECIMAL(a) (NUMERIC(a) || a == '.')
 #define NUMERIC_SIGNED(a) (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a) (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a) (sizeof(a)/sizeof(*a))
 #define ZERO(a) memset(a,0,sizeof(a))
 #define COPY(a,b) memcpy(a,b,MIN(sizeof(a),sizeof(b)))
 
-// Macros for initializing arrays
-#define ARRAY_6(v1, v2, v3, v4, v5, v6, ...) { v1, v2, v3, v4, v5, v6 }
-#define ARRAY_5(v1, v2, v3, v4, v5, ...)     { v1, v2, v3, v4, v5 }
-#define ARRAY_4(v1, v2, v3, v4, ...)         { v1, v2, v3, v4 }
-#define ARRAY_3(v1, v2, v3, ...)             { v1, v2, v3 }
-#define ARRAY_2(v1, v2, ...)                 { v1, v2 }
-#define ARRAY_1(v1, ...)                     { v1 }
-
-#define _ARRAY_N(N, ...) ARRAY_ ##N(__VA_ARGS__)
-#define ARRAY_N(N, ...) _ARRAY_N(N, __VA_ARGS__)
-
-// Macros for adding
-#define INC_0 1
-#define INC_1 2
-#define INC_2 3
-#define INC_3 4
-#define INC_4 5
-#define INC_5 6
-#define INC_6 7
-#define INC_7 8
-#define INC_8 9
-#define INCREMENT_(n) INC_ ##n
-#define INCREMENT(n) INCREMENT_(n)
-
-// Macros for subtracting
-#define DEC_1 0
-#define DEC_2 1
-#define DEC_3 2
-#define DEC_4 3
-#define DEC_5 4
-#define DEC_6 5
-#define DEC_7 6
-#define DEC_8 7
-#define DEC_9 8
-#define DECREMENT_(n) DEC_ ##n
-#define DECREMENT(n) DECREMENT_(n)
-
-#define PIN_EXISTS(PN) (defined(PN ##_PIN) && PN ##_PIN >= 0)
-
 #define PENDING(NOW,SOON) ((long)(NOW-(SOON))<0)
 #define ELAPSED(NOW,SOON) (!PENDING(NOW,SOON))
 
 #define MMM_TO_MMS(MM_M) ((MM_M)/60.0f)
 #define MMS_TO_MMM(MM_S) ((MM_S)*60.0f)
 
 #define NOOP do{} while(0)
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
-#undef ABS
-#ifdef __cplusplus
-  template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
-#else
-  #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
-#endif
-
 #define UNEAR_ZERO(x) ((x) < 0.000001f)
 #define NEAR_ZERO(x) WITHIN(x, -0.000001f, 0.000001f)
 #define NEAR(x,y) NEAR_ZERO((x)-(y))
 
 #define RECIPROCAL(x) (NEAR_ZERO(x) ? 0 : (1 / float(x)))
 #define FIXFLOAT(f) (f + (f < 0 ? -0.00005f : 0.00005f))
 
 //
 // Maths macros that can be overridden by HAL
 //

commit 606a4362b3c8d64b3df8e3858330d7465e14e1f3
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Oct 1 04:31:30 2018 -0500

    Reduce STM32F4 compile warnings

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 520c10fc78..df21b0519f 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -50,21 +50,21 @@
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20 on AVR
 #endif
 
 // Nanoseconds per cycle
 #define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Remove compiler warning on an unused variable
-#define UNUSED(x) (void) (x)
+#define UNUSED(x) ((void)(x))
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV

commit b30ca652aed417be0ba8857922c1cf2b4df26f2d
Author: AnoNymous <dgdanielf@gmail.com>
Date:   Sun Sep 30 11:59:14 2018 +0200

    Replace MIN# / MAX# with variadic MIN / MAX (#11960)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index fc551b8e16..520c10fc78 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -13,22 +13,23 @@
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
-#ifndef _CORE_MACROS_H_
-#define _CORE_MACROS_H_
+#pragma once
+
+#include "minmax.h"
 
 #define NUM_AXIS 4
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 
 #define _AXIS(A) (A##_AXIS)
 
 #define _XMIN_ 100
@@ -86,24 +87,20 @@
 #define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
 #define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
 #define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ((a>0)-(a<0))
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
 // Macros to constrain values
-// Avoid double evaluation of arguments to NOMORE/NOLESS/LIMIT
-#undef NOMORE
-#undef NOLESS
-#undef LIMIT
 #ifdef __cplusplus
 
   // C++11 solution that is standards compliant.
   template <class V, class N> static inline constexpr void NOLESS(V& v, const N n) {
     if (v < n) v = n;
   }
   template <class V, class N> static inline constexpr void NOMORE(V& v, const N n) {
     if (v > n) v = n;
   }
   template <class V, class N1, class N2> static inline constexpr void LIMIT(V& v, const N1 n1, const N2 n2) {
@@ -200,74 +197,36 @@
 #define PENDING(NOW,SOON) ((long)(NOW-(SOON))<0)
 #define ELAPSED(NOW,SOON) (!PENDING(NOW,SOON))
 
 #define MMM_TO_MMS(MM_M) ((MM_M)/60.0f)
 #define MMS_TO_MMM(MM_S) ((MM_S)*60.0f)
 
 #define NOOP do{} while(0)
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
-// Avoid double evaluation of arguments on MIN/MAX/ABS
-#undef MIN
-#undef MAX
 #undef ABS
 #ifdef __cplusplus
-
-  // C++11 solution that is standards compliant. Return type is deduced automatically
-  template <class L, class R> static inline constexpr auto MIN(const L lhs, const R rhs) -> decltype(lhs + rhs) {
-    return lhs < rhs ? lhs : rhs;
-  }
-  template <class L, class R> static inline constexpr auto MAX(const L lhs, const R rhs) -> decltype(lhs + rhs){
-    return lhs > rhs ? lhs : rhs;
-  }
-  template <class T> static inline constexpr const T ABS(const T v) {
-    return v >= 0 ? v : -v;
-  }
+  template <class T> static inline constexpr const T ABS(const T v) { return v >= 0 ? v : -v; }
 #else
-
-  // Using GCC extensions, but Travis GCC version does not like it and gives
-  //  "error: statement-expressions are not allowed outside functions nor in template-argument lists"
-  #define MIN(a, b) \
-    ({__typeof__(a) _a = (a); \
-      __typeof__(b) _b = (b); \
-      _a < _b ? _a : _b;})
-
-  #define MAX(a, b) \
-    ({__typeof__(a) _a = (a); \
-      __typeof__(b) _b = (b); \
-      _a > _b ? _a : _b;})
-
-  #define ABS(a) \
-    ({__typeof__(a) _a = (a); \
-      _a >= 0 ? _a : -_a;})
-
+  #define ABS(a) ({__typeof__(a) _a = (a); _a >= 0 ? _a : -_a;})
 #endif
 
-#define MIN3(a, b, c)       MIN(MIN(a, b), c)
-#define MIN4(a, b, c, d)    MIN(MIN3(a, b, c), d)
-#define MIN5(a, b, c, d, e) MIN(MIN4(a, b, c, d), e)
-#define MAX3(a, b, c)       MAX(MAX(a, b), c)
-#define MAX4(a, b, c, d)    MAX(MAX3(a, b, c), d)
-#define MAX5(a, b, c, d, e) MAX(MAX4(a, b, c, d), e)
-
 #define UNEAR_ZERO(x) ((x) < 0.000001f)
 #define NEAR_ZERO(x) WITHIN(x, -0.000001f, 0.000001f)
 #define NEAR(x,y) NEAR_ZERO((x)-(y))
 
 #define RECIPROCAL(x) (NEAR_ZERO(x) ? 0 : (1 / float(x)))
 #define FIXFLOAT(f) (f + (f < 0 ? -0.00005f : 0.00005f))
 
 //
 // Maths macros that can be overridden by HAL
 //
 #define ATAN2(y, x) atan2f(y, x)
 #define POW(x, y)   powf(x, y)
 #define SQRT(x)     sqrtf(x)
 #define RSQRT(x)    (1 / sqrtf(x))
 #define CEIL(x)     ceilf(x)
 #define FLOOR(x)    floorf(x)
 #define LROUND(x)   lroundf(x)
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
-
-#endif // _CORE_MACROS_H_

commit fbcdf5eaeb4f2265fd43097ab6c652a89842d8e7
Author: teemuatlut <teemu.mantykallio@live.fi>
Date:   Sat Jul 14 14:13:06 2018 +0300

    Simplify stepper driver per-axis selection

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 224170bfff..fc551b8e16 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -13,22 +13,22 @@
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
-#ifndef MACROS_H
-#define MACROS_H
+#ifndef _CORE_MACROS_H_
+#define _CORE_MACROS_H_
 
 #define NUM_AXIS 4
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 
 #define _AXIS(A) (A##_AXIS)
 
 #define _XMIN_ 100
@@ -263,11 +263,11 @@
 #define ATAN2(y, x) atan2f(y, x)
 #define POW(x, y)   powf(x, y)
 #define SQRT(x)     sqrtf(x)
 #define RSQRT(x)    (1 / sqrtf(x))
 #define CEIL(x)     ceilf(x)
 #define FLOOR(x)    floorf(x)
 #define LROUND(x)   lroundf(x)
 #define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 
-#endif //__MACROS_H
+#endif // _CORE_MACROS_H_

commit 1367df2875b4aff41e9c98824e3f7b56f4403e4d
Author: etagle <ejtagle@hotmail.com>
Date:   Sun Jul 1 17:20:28 2018 -0300

    Replace double with float, optimize calculation

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index ce464eb4b7..224170bfff 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -72,29 +72,29 @@
 #define SBI(n,b) (n |= _BV(b))
 #define CBI(n,b) (n &= ~_BV(b))
 #define SET_BIT_TO(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
 
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 
 // Macros for maths shortcuts
-#ifndef M_PI
-  #define M_PI 3.14159265358979323846
-#endif
-#define RADIANS(d) ((d)*M_PI/180.0)
-#define DEGREES(r) ((r)*180.0/M_PI)
+#undef M_PI
+#define M_PI 3.14159265358979323846f
+
+#define RADIANS(d) ((d)*float(M_PI)/180.0f)
+#define DEGREES(r) ((r)*180.0f/float(M_PI))
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
-#define CIRCLE_AREA(R) (M_PI * sq(R))
-#define CIRCLE_CIRC(R) (2.0 * M_PI * (R))
+#define CIRCLE_AREA(R) (float(M_PI) * sq(float(R)))
+#define CIRCLE_CIRC(R) (2 * float(M_PI) * float(R))
 
 #define SIGN(a) ((a>0)-(a<0))
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
 // Macros to constrain values
 // Avoid double evaluation of arguments to NOMORE/NOLESS/LIMIT
 #undef NOMORE
 #undef NOLESS
 #undef LIMIT
 #ifdef __cplusplus
@@ -193,22 +193,22 @@
 #define DEC_8 7
 #define DEC_9 8
 #define DECREMENT_(n) DEC_ ##n
 #define DECREMENT(n) DECREMENT_(n)
 
 #define PIN_EXISTS(PN) (defined(PN ##_PIN) && PN ##_PIN >= 0)
 
 #define PENDING(NOW,SOON) ((long)(NOW-(SOON))<0)
 #define ELAPSED(NOW,SOON) (!PENDING(NOW,SOON))
 
-#define MMM_TO_MMS(MM_M) ((MM_M)/60.0)
-#define MMS_TO_MMM(MM_S) ((MM_S)*60.0)
+#define MMM_TO_MMS(MM_M) ((MM_M)/60.0f)
+#define MMS_TO_MMM(MM_S) ((MM_S)*60.0f)
 
 #define NOOP do{} while(0)
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 // Avoid double evaluation of arguments on MIN/MAX/ABS
 #undef MIN
 #undef MAX
 #undef ABS
 #ifdef __cplusplus
@@ -243,30 +243,31 @@
 
 #endif
 
 #define MIN3(a, b, c)       MIN(MIN(a, b), c)
 #define MIN4(a, b, c, d)    MIN(MIN3(a, b, c), d)
 #define MIN5(a, b, c, d, e) MIN(MIN4(a, b, c, d), e)
 #define MAX3(a, b, c)       MAX(MAX(a, b), c)
 #define MAX4(a, b, c, d)    MAX(MAX3(a, b, c), d)
 #define MAX5(a, b, c, d, e) MAX(MAX4(a, b, c, d), e)
 
-#define UNEAR_ZERO(x) ((x) < 0.000001)
-#define NEAR_ZERO(x) WITHIN(x, -0.000001, 0.000001)
+#define UNEAR_ZERO(x) ((x) < 0.000001f)
+#define NEAR_ZERO(x) WITHIN(x, -0.000001f, 0.000001f)
 #define NEAR(x,y) NEAR_ZERO((x)-(y))
 
-#define RECIPROCAL(x) (NEAR_ZERO(x) ? 0.0 : 1.0 / (x))
-#define FIXFLOAT(f) (f + (f < 0.0 ? -0.00005 : 0.00005))
+#define RECIPROCAL(x) (NEAR_ZERO(x) ? 0 : (1 / float(x)))
+#define FIXFLOAT(f) (f + (f < 0 ? -0.00005f : 0.00005f))
 
 //
 // Maths macros that can be overridden by HAL
 //
-#define ATAN2(y, x) atan2(y, x)
-#define POW(x, y)   pow(x, y)
-#define SQRT(x)     sqrt(x)
-#define CEIL(x)     ceil(x)
-#define FLOOR(x)    floor(x)
-#define LROUND(x)   lround(x)
-#define FMOD(x, y)  fmod(x, y)
+#define ATAN2(y, x) atan2f(y, x)
+#define POW(x, y)   powf(x, y)
+#define SQRT(x)     sqrtf(x)
+#define RSQRT(x)    (1 / sqrtf(x))
+#define CEIL(x)     ceilf(x)
+#define FLOOR(x)    floorf(x)
+#define LROUND(x)   lroundf(x)
+#define FMOD(x, y)  fmodf(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 
 #endif //__MACROS_H

commit 9644d56b42de1d45b292f67cda950387fd76aa06
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu May 24 00:04:47 2018 -0500

    Patches for core motion tests

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 4f4b7dd62a..ce464eb4b7 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -64,21 +64,21 @@
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV
 #define _BV(n) (1<<(n))
 #define TEST(n,b) !!((n)&_BV(b))
 #define SBI(n,b) (n |= _BV(b))
 #define CBI(n,b) (n &= ~_BV(b))
-#define SET_BIT(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
+#define SET_BIT_TO(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
 
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 
 // Macros for maths shortcuts
 #ifndef M_PI
   #define M_PI 3.14159265358979323846
 #endif

commit 3e3789da85e4d25693506df9dfd094aabf98d50e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed May 23 03:45:25 2018 -0500

    Regression: Endstops Core compatibility (#10823)
    
    Co-Authored-By: ejtagle <ejtagle@hotmail.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index dc1c35b863..4f4b7dd62a 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -64,20 +64,21 @@
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV
 #define _BV(n) (1<<(n))
 #define TEST(n,b) !!((n)&_BV(b))
 #define SBI(n,b) (n |= _BV(b))
 #define CBI(n,b) (n &= ~_BV(b))
+#define SET_BIT(N,B,TF) do{ if (TF) SBI(N,B); else CBI(N,B); }while(0)
 
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 
 // Macros for maths shortcuts
 #ifndef M_PI
   #define M_PI 3.14159265358979323846
 #endif

commit 4118199ddd94d1cb46ee96c21c49ca5dcd48bc4e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon May 21 20:32:10 2018 -0500

    Tweaks to core headers

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index f760ce8209..dc1c35b863 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -60,21 +60,21 @@
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"
 
 // Macros for bit masks
 #undef _BV
-#define _BV(b) (1 << (b))
+#define _BV(n) (1<<(n))
 #define TEST(n,b) !!((n)&_BV(b))
 #define SBI(n,b) (n |= _BV(b))
 #define CBI(n,b) (n &= ~_BV(b))
 
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 
 // Macros for maths shortcuts

commit 06fd4d7b28486b9ca292e73abe4f6c511bd6fb7a
Author: etagle <ejtagle@hotmail.com>
Date:   Wed May 16 17:16:07 2018 -0300

    Improve NOMORE, NOLESS, and LIMIT macros

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 96439b0902..f760ce8209 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -84,24 +84,64 @@
 #define RADIANS(d) ((d)*M_PI/180.0)
 #define DEGREES(r) ((r)*180.0/M_PI)
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
 #define CIRCLE_AREA(R) (M_PI * sq(R))
 #define CIRCLE_CIRC(R) (2.0 * M_PI * (R))
 
 #define SIGN(a) ((a>0)-(a<0))
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
-// Macros to contrain values
-#define NOLESS(v,n) do{ if (v < n) v = n; }while(0)
-#define NOMORE(v,n) do{ if (v > n) v = n; }while(0)
-#define LIMIT(v,n1,n2) do{ if (v < n1) v = n1; else if (v > n2) v = n2; }while(0)
+// Macros to constrain values
+// Avoid double evaluation of arguments to NOMORE/NOLESS/LIMIT
+#undef NOMORE
+#undef NOLESS
+#undef LIMIT
+#ifdef __cplusplus
+
+  // C++11 solution that is standards compliant.
+  template <class V, class N> static inline constexpr void NOLESS(V& v, const N n) {
+    if (v < n) v = n;
+  }
+  template <class V, class N> static inline constexpr void NOMORE(V& v, const N n) {
+    if (v > n) v = n;
+  }
+  template <class V, class N1, class N2> static inline constexpr void LIMIT(V& v, const N1 n1, const N2 n2) {
+    if (v < n1) v = n1;
+    else if (v > n2) v = n2;
+  }
+
+#else
+
+  // Using GCC extensions, but Travis GCC version does not like it and gives
+  //  "error: statement-expressions are not allowed outside functions nor in template-argument lists"
+  #define NOLESS(v, n) \
+    do { \
+      __typeof__(n) _n = (n); \
+      if (v < _n) v = _n; \
+    } while(0)
+
+  #define NOMORE(v, n) \
+    do { \
+      __typeof__(n) _n = (n); \
+      if (v > _n) v = _n; \
+    } while(0)
+
+  #define LIMIT(v, n1, n2) \
+    do { \
+      __typeof__(n1) _n1 = (n1); \
+      __typeof__(n2) _n2 = (n2); \
+      if (v < _n1) v = _n1; \
+      else if (v > _n2) v = _n2; \
+    } while(0)
+
+#endif
 
 // Macros to support option testing
 #define _CAT(a, ...) a ## __VA_ARGS__
 #define SWITCH_ENABLED_false 0
 #define SWITCH_ENABLED_true  1
 #define SWITCH_ENABLED_0     0
 #define SWITCH_ENABLED_1     1
 #define SWITCH_ENABLED_0x0   0
 #define SWITCH_ENABLED_0x1   1
 #define SWITCH_ENABLED_      1

commit 08e36e264e72f56bada1f25c1a784d6e3f9d2135
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun May 13 03:44:24 2018 -0500

    Apply _AXIS macro

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 23364a434d..96439b0902 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -22,20 +22,22 @@
 
 #ifndef MACROS_H
 #define MACROS_H
 
 #define NUM_AXIS 4
 #define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 
+#define _AXIS(A) (A##_AXIS)
+
 #define _XMIN_ 100
 #define _YMIN_ 200
 #define _ZMIN_ 300
 #define _XMAX_ 101
 #define _YMAX_ 201
 #define _ZMAX_ 301
 
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define _UNUSED      __attribute__((unused))

commit 99ecdf59af907ebb8d2d847863614094bb576e3f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun May 13 01:10:34 2018 -0500

    Smarter MIN, MAX, ABS macros
    
    Use macros that explicitly avoid double-evaluation and can be used for any datatype, replacing `min`, `max`, `abs`, `fabs`, `labs`, and `FABS`.
    
    Co-Authored-By: ejtagle <ejtagle@hotmail.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 4ba013bc1d..23364a434d 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -106,21 +106,21 @@
 #define ENABLED(b) _CAT(SWITCH_ENABLED_, b)
 #define DISABLED(b) !ENABLED(b)
 
 #define WITHIN(V,L,H) ((V) >= (L) && (V) <= (H))
 #define NUMERIC(a) WITHIN(a, '0', '9')
 #define DECIMAL(a) (NUMERIC(a) || a == '.')
 #define NUMERIC_SIGNED(a) (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a) (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a) (sizeof(a)/sizeof(*a))
 #define ZERO(a) memset(a,0,sizeof(a))
-#define COPY(a,b) memcpy(a,b,min(sizeof(a),sizeof(b)))
+#define COPY(a,b) memcpy(a,b,MIN(sizeof(a),sizeof(b)))
 
 // Macros for initializing arrays
 #define ARRAY_6(v1, v2, v3, v4, v5, v6, ...) { v1, v2, v3, v4, v5, v6 }
 #define ARRAY_5(v1, v2, v3, v4, v5, ...)     { v1, v2, v3, v4, v5 }
 #define ARRAY_4(v1, v2, v3, v4, ...)         { v1, v2, v3, v4 }
 #define ARRAY_3(v1, v2, v3, ...)             { v1, v2, v3 }
 #define ARRAY_2(v1, v2, ...)                 { v1, v2 }
 #define ARRAY_1(v1, ...)                     { v1 }
 
 #define _ARRAY_N(N, ...) ARRAY_ ##N(__VA_ARGS__)
@@ -157,38 +157,73 @@
 #define PENDING(NOW,SOON) ((long)(NOW-(SOON))<0)
 #define ELAPSED(NOW,SOON) (!PENDING(NOW,SOON))
 
 #define MMM_TO_MMS(MM_M) ((MM_M)/60.0)
 #define MMS_TO_MMM(MM_S) ((MM_S)*60.0)
 
 #define NOOP do{} while(0)
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
-#define MIN3(a, b, c)       min(min(a, b), c)
-#define MIN4(a, b, c, d)    min(MIN3(a, b, c), d)
-#define MIN5(a, b, c, d, e) min(MIN4(a, b, c, d), e)
-#define MAX3(a, b, c)       max(max(a, b), c)
-#define MAX4(a, b, c, d)    max(MAX3(a, b, c), d)
-#define MAX5(a, b, c, d, e) max(MAX4(a, b, c, d), e)
+// Avoid double evaluation of arguments on MIN/MAX/ABS
+#undef MIN
+#undef MAX
+#undef ABS
+#ifdef __cplusplus
+
+  // C++11 solution that is standards compliant. Return type is deduced automatically
+  template <class L, class R> static inline constexpr auto MIN(const L lhs, const R rhs) -> decltype(lhs + rhs) {
+    return lhs < rhs ? lhs : rhs;
+  }
+  template <class L, class R> static inline constexpr auto MAX(const L lhs, const R rhs) -> decltype(lhs + rhs){
+    return lhs > rhs ? lhs : rhs;
+  }
+  template <class T> static inline constexpr const T ABS(const T v) {
+    return v >= 0 ? v : -v;
+  }
+#else
+
+  // Using GCC extensions, but Travis GCC version does not like it and gives
+  //  "error: statement-expressions are not allowed outside functions nor in template-argument lists"
+  #define MIN(a, b) \
+    ({__typeof__(a) _a = (a); \
+      __typeof__(b) _b = (b); \
+      _a < _b ? _a : _b;})
+
+  #define MAX(a, b) \
+    ({__typeof__(a) _a = (a); \
+      __typeof__(b) _b = (b); \
+      _a > _b ? _a : _b;})
+
+  #define ABS(a) \
+    ({__typeof__(a) _a = (a); \
+      _a >= 0 ? _a : -_a;})
+
+#endif
+
+#define MIN3(a, b, c)       MIN(MIN(a, b), c)
+#define MIN4(a, b, c, d)    MIN(MIN3(a, b, c), d)
+#define MIN5(a, b, c, d, e) MIN(MIN4(a, b, c, d), e)
+#define MAX3(a, b, c)       MAX(MAX(a, b), c)
+#define MAX4(a, b, c, d)    MAX(MAX3(a, b, c), d)
+#define MAX5(a, b, c, d, e) MAX(MAX4(a, b, c, d), e)
 
 #define UNEAR_ZERO(x) ((x) < 0.000001)
 #define NEAR_ZERO(x) WITHIN(x, -0.000001, 0.000001)
 #define NEAR(x,y) NEAR_ZERO((x)-(y))
 
 #define RECIPROCAL(x) (NEAR_ZERO(x) ? 0.0 : 1.0 / (x))
 #define FIXFLOAT(f) (f + (f < 0.0 ? -0.00005 : 0.00005))
 
 //
 // Maths macros that can be overridden by HAL
 //
 #define ATAN2(y, x) atan2(y, x)
-#define FABS(x)     fabs(x)
 #define POW(x, y)   pow(x, y)
 #define SQRT(x)     sqrt(x)
 #define CEIL(x)     ceil(x)
 #define FLOOR(x)    floor(x)
 #define LROUND(x)   lround(x)
 #define FMOD(x, y)  fmod(x, y)
 #define HYPOT(x,y)  SQRT(HYPOT2(x,y))
 
 #endif //__MACROS_H

commit a1062eec5b6afe38d6769beea89bb14017c3f260
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat May 12 08:34:04 2018 -0500

    Better handling of DELAY_NS and DELAY_US (#10716)
    
    Co-Authored-By: ejtagle <ejtagle@hotmail.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 34896c4f56..4ba013bc1d 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -43,72 +43,22 @@
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20 on AVR
 #endif
 
-// Processor-level delays for hardware interfaces
-#ifndef _NOP
-  #define _NOP() do { __asm__ volatile ("nop"); } while (0)
-#endif
-#define DELAY_NOPS(X) \
-  switch (X) { \
-    case 20: _NOP(); case 19: _NOP(); case 18: _NOP(); case 17: _NOP(); \
-    case 16: _NOP(); case 15: _NOP(); case 14: _NOP(); case 13: _NOP(); \
-    case 12: _NOP(); case 11: _NOP(); case 10: _NOP(); case  9: _NOP(); \
-    case  8: _NOP(); case  7: _NOP(); case  6: _NOP(); case  5: _NOP(); \
-    case  4: _NOP(); case  3: _NOP(); case  2: _NOP(); case  1: _NOP(); \
-  }
-#define DELAY_0_NOP   NOOP
-#define DELAY_1_NOP   DELAY_NOPS( 1)
-#define DELAY_2_NOP   DELAY_NOPS( 2)
-#define DELAY_3_NOP   DELAY_NOPS( 3)
-#define DELAY_4_NOP   DELAY_NOPS( 4)
-#define DELAY_5_NOP   DELAY_NOPS( 5)
-#define DELAY_10_NOP  DELAY_NOPS(10)
-#define DELAY_20_NOP  DELAY_NOPS(20)
-
-#if CYCLES_PER_MICROSECOND <= 200
-  #define DELAY_100NS DELAY_NOPS((CYCLES_PER_MICROSECOND + 9) / 10)
-#else
-  #define DELAY_100NS DELAY_20_NOP
-#endif
-
-// Microsecond delays for hardware interfaces
-#if CYCLES_PER_MICROSECOND <= 20
-  #define DELAY_1US DELAY_NOPS(CYCLES_PER_MICROSECOND)
-  #define DELAY_US(X) \
-    switch (X) { \
-      case 20: DELAY_1US; case 19: DELAY_1US; case 18: DELAY_1US; case 17: DELAY_1US; \
-      case 16: DELAY_1US; case 15: DELAY_1US; case 14: DELAY_1US; case 13: DELAY_1US; \
-      case 12: DELAY_1US; case 11: DELAY_1US; case 10: DELAY_1US; case  9: DELAY_1US; \
-      case  8: DELAY_1US; case  7: DELAY_1US; case  6: DELAY_1US; case  5: DELAY_1US; \
-      case  4: DELAY_1US; case  3: DELAY_1US; case  2: DELAY_1US; case  1: DELAY_1US; \
-    }
-#else
-  #define DELAY_US(X) delayMicroseconds(X) // May not be usable in CRITICAL_SECTION
-  #define DELAY_1US DELAY_US(1)
-#endif
-#define DELAY_2US  DELAY_US( 2)
-#define DELAY_3US  DELAY_US( 3)
-#define DELAY_4US  DELAY_US( 4)
-#define DELAY_5US  DELAY_US( 5)
-#define DELAY_6US  DELAY_US( 6)
-#define DELAY_7US  DELAY_US( 7)
-#define DELAY_8US  DELAY_US( 8)
-#define DELAY_9US  DELAY_US( 9)
-#define DELAY_10US DELAY_US(10)
-#define DELAY_20US DELAY_US(20)
+// Nanoseconds per cycle
+#define NANOSECONDS_PER_CYCLE (1000000000.0 / F_CPU)
 
 // Remove compiler warning on an unused variable
 #define UNUSED(x) (void) (x)
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 #define A(CODE) " " CODE "\n\t"
 #define L(CODE) CODE ":\n\t"

commit 0436e16fb22ce411311bce5994a315a991ec3219
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 8 05:10:27 2018 -0500

    Apply shorthand Assembler macros

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 9bdd33e7e5..34896c4f56 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -103,20 +103,23 @@
 #define DELAY_10US DELAY_US(10)
 #define DELAY_20US DELAY_US(20)
 
 // Remove compiler warning on an unused variable
 #define UNUSED(x) (void) (x)
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
+#define A(CODE) " " CODE "\n\t"
+#define L(CODE) CODE ":\n\t"
+
 // Macros for bit masks
 #undef _BV
 #define _BV(b) (1 << (b))
 #define TEST(n,b) !!((n)&_BV(b))
 #define SBI(n,b) (n |= _BV(b))
 #define CBI(n,b) (n &= ~_BV(b))
 
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))

commit 63e4afc9105301ed33c8e2c85e02893da0456b1c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 29 19:14:18 2018 -0500

    Do rounding in integer (instead of FIXFLOAT)
    
    Co-Authored-By: Bob-the-Kuhn <bob-the-kuhn@users.noreply.github.com>

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 079a4c167d..9bdd33e7e5 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -216,21 +216,21 @@
 #define MIN5(a, b, c, d, e) min(MIN4(a, b, c, d), e)
 #define MAX3(a, b, c)       max(max(a, b), c)
 #define MAX4(a, b, c, d)    max(MAX3(a, b, c), d)
 #define MAX5(a, b, c, d, e) max(MAX4(a, b, c, d), e)
 
 #define UNEAR_ZERO(x) ((x) < 0.000001)
 #define NEAR_ZERO(x) WITHIN(x, -0.000001, 0.000001)
 #define NEAR(x,y) NEAR_ZERO((x)-(y))
 
 #define RECIPROCAL(x) (NEAR_ZERO(x) ? 0.0 : 1.0 / (x))
-#define FIXFLOAT(f) (f + (f < 0.0 ? -0.00001 : 0.00001))
+#define FIXFLOAT(f) (f + (f < 0.0 ? -0.00005 : 0.00005))
 
 //
 // Maths macros that can be overridden by HAL
 //
 #define ATAN2(y, x) atan2(y, x)
 #define FABS(x)     fabs(x)
 #define POW(x, y)   pow(x, y)
 #define SQRT(x)     sqrt(x)
 #define CEIL(x)     ceil(x)
 #define FLOOR(x)    floor(x)

commit d470a1234f32f5df036c8c2157aa4b0eb3cd0b37
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Apr 28 10:09:14 2018 -0500

    Fix ENABLED/DISABLED for DUE
    
    ‚Ä¶and any other platforms where `false`/`true` are defined as `0x0`/`0x1`.
    
    This fixes issue #10550.

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index a3b12ac375..079a4c167d 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -140,23 +140,25 @@
 #define NOLESS(v,n) do{ if (v < n) v = n; }while(0)
 #define NOMORE(v,n) do{ if (v > n) v = n; }while(0)
 #define LIMIT(v,n1,n2) do{ if (v < n1) v = n1; else if (v > n2) v = n2; }while(0)
 
 // Macros to support option testing
 #define _CAT(a, ...) a ## __VA_ARGS__
 #define SWITCH_ENABLED_false 0
 #define SWITCH_ENABLED_true  1
 #define SWITCH_ENABLED_0     0
 #define SWITCH_ENABLED_1     1
+#define SWITCH_ENABLED_0x0   0
+#define SWITCH_ENABLED_0x1   1
 #define SWITCH_ENABLED_      1
 #define ENABLED(b) _CAT(SWITCH_ENABLED_, b)
-#define DISABLED(b) (!_CAT(SWITCH_ENABLED_, b))
+#define DISABLED(b) !ENABLED(b)
 
 #define WITHIN(V,L,H) ((V) >= (L) && (V) <= (H))
 #define NUMERIC(a) WITHIN(a, '0', '9')
 #define DECIMAL(a) (NUMERIC(a) || a == '.')
 #define NUMERIC_SIGNED(a) (NUMERIC(a) || (a) == '-' || (a) == '+')
 #define DECIMAL_SIGNED(a) (DECIMAL(a) || (a) == '-' || (a) == '+')
 #define COUNT(a) (sizeof(a)/sizeof(*a))
 #define ZERO(a) memset(a,0,sizeof(a))
 #define COPY(a,b) memcpy(a,b,min(sizeof(a),sizeof(b)))
 

commit 5ac226aa93b9e57c7e66d885b02b40e1e399cad0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Apr 27 19:20:22 2018 -0500

    Further cleanup of inline delays

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 1633d8c7e2..a3b12ac375 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -43,59 +43,72 @@
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20 on AVR
 #endif
 
-// Highly granular delays for step pulses, etc.
-#define DELAY_0_NOP NOOP
-#define DELAY_1_NOP __asm__("nop\n\t")
-#define DELAY_2_NOP do{ DELAY_1_NOP; DELAY_1_NOP; }while(0)
-#define DELAY_3_NOP do{ DELAY_1_NOP; DELAY_2_NOP; }while(0)
-#define DELAY_4_NOP do{ DELAY_1_NOP; DELAY_3_NOP; }while(0)
-#define DELAY_5_NOP do{ DELAY_1_NOP; DELAY_4_NOP; }while(0)
-
+// Processor-level delays for hardware interfaces
+#ifndef _NOP
+  #define _NOP() do { __asm__ volatile ("nop"); } while (0)
+#endif
 #define DELAY_NOPS(X) \
   switch (X) { \
-    case 20: DELAY_1_NOP; case 19: DELAY_1_NOP; \
-    case 18: DELAY_1_NOP; case 17: DELAY_1_NOP; \
-    case 16: DELAY_1_NOP; case 15: DELAY_1_NOP; \
-    case 14: DELAY_1_NOP; case 13: DELAY_1_NOP; \
-    case 12: DELAY_1_NOP; case 11: DELAY_1_NOP; \
-    case 10: DELAY_1_NOP; case 9:  DELAY_1_NOP; \
-    case 8:  DELAY_1_NOP; case 7:  DELAY_1_NOP; \
-    case 6:  DELAY_1_NOP; case 5:  DELAY_1_NOP; \
-    case 4:  DELAY_1_NOP; case 3:  DELAY_1_NOP; \
-    case 2:  DELAY_1_NOP; case 1:  DELAY_1_NOP; \
+    case 20: _NOP(); case 19: _NOP(); case 18: _NOP(); case 17: _NOP(); \
+    case 16: _NOP(); case 15: _NOP(); case 14: _NOP(); case 13: _NOP(); \
+    case 12: _NOP(); case 11: _NOP(); case 10: _NOP(); case  9: _NOP(); \
+    case  8: _NOP(); case  7: _NOP(); case  6: _NOP(); case  5: _NOP(); \
+    case  4: _NOP(); case  3: _NOP(); case  2: _NOP(); case  1: _NOP(); \
   }
+#define DELAY_0_NOP   NOOP
+#define DELAY_1_NOP   DELAY_NOPS( 1)
+#define DELAY_2_NOP   DELAY_NOPS( 2)
+#define DELAY_3_NOP   DELAY_NOPS( 3)
+#define DELAY_4_NOP   DELAY_NOPS( 4)
+#define DELAY_5_NOP   DELAY_NOPS( 5)
+#define DELAY_10_NOP  DELAY_NOPS(10)
+#define DELAY_20_NOP  DELAY_NOPS(20)
+
+#if CYCLES_PER_MICROSECOND <= 200
+  #define DELAY_100NS DELAY_NOPS((CYCLES_PER_MICROSECOND + 9) / 10)
+#else
+  #define DELAY_100NS DELAY_20_NOP
+#endif
 
-#define DELAY_10_NOP do{ DELAY_5_NOP;  DELAY_5_NOP;  }while(0)
-#define DELAY_20_NOP do{ DELAY_10_NOP; DELAY_10_NOP; }while(0)
-
-#if CYCLES_PER_MICROSECOND == 16
-  #define DELAY_1US do { DELAY_10_NOP; DELAY_5_NOP; DELAY_1_NOP; }while(0)
+// Microsecond delays for hardware interfaces
+#if CYCLES_PER_MICROSECOND <= 20
+  #define DELAY_1US DELAY_NOPS(CYCLES_PER_MICROSECOND)
+  #define DELAY_US(X) \
+    switch (X) { \
+      case 20: DELAY_1US; case 19: DELAY_1US; case 18: DELAY_1US; case 17: DELAY_1US; \
+      case 16: DELAY_1US; case 15: DELAY_1US; case 14: DELAY_1US; case 13: DELAY_1US; \
+      case 12: DELAY_1US; case 11: DELAY_1US; case 10: DELAY_1US; case  9: DELAY_1US; \
+      case  8: DELAY_1US; case  7: DELAY_1US; case  6: DELAY_1US; case  5: DELAY_1US; \
+      case  4: DELAY_1US; case  3: DELAY_1US; case  2: DELAY_1US; case  1: DELAY_1US; \
+    }
 #else
-  #define DELAY_1US DELAY_20_NOP
+  #define DELAY_US(X) delayMicroseconds(X) // May not be usable in CRITICAL_SECTION
+  #define DELAY_1US DELAY_US(1)
 #endif
-#define DELAY_2US  do{ DELAY_1US; DELAY_1US; }while(0)
-#define DELAY_3US  do{ DELAY_1US; DELAY_2US; }while(0)
-#define DELAY_4US  do{ DELAY_1US; DELAY_3US; }while(0)
-#define DELAY_5US  do{ DELAY_1US; DELAY_4US; }while(0)
-#define DELAY_6US  do{ DELAY_1US; DELAY_5US; }while(0)
-#define DELAY_7US  do{ DELAY_1US; DELAY_6US; }while(0)
-#define DELAY_8US  do{ DELAY_1US; DELAY_7US; }while(0)
-#define DELAY_9US  do{ DELAY_1US; DELAY_8US; }while(0)
-#define DELAY_10US do{ DELAY_1US; DELAY_9US; }while(0)
+#define DELAY_2US  DELAY_US( 2)
+#define DELAY_3US  DELAY_US( 3)
+#define DELAY_4US  DELAY_US( 4)
+#define DELAY_5US  DELAY_US( 5)
+#define DELAY_6US  DELAY_US( 6)
+#define DELAY_7US  DELAY_US( 7)
+#define DELAY_8US  DELAY_US( 8)
+#define DELAY_9US  DELAY_US( 9)
+#define DELAY_10US DELAY_US(10)
+#define DELAY_20US DELAY_US(20)
 
 // Remove compiler warning on an unused variable
 #define UNUSED(x) (void) (x)
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 // Macros for bit masks
 #undef _BV

commit 7b6e742436faf47be5b6d60b6d510954f4660ffd
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Apr 26 18:18:23 2018 -0500

    Wrap delay macros in do{}while(0)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index d5dee514b6..1633d8c7e2 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -46,56 +46,56 @@
 #define _O3          __attribute__((optimize("O3")))
 
 // Clock speed factors
 #if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20 on AVR
 #endif
 
 // Highly granular delays for step pulses, etc.
 #define DELAY_0_NOP NOOP
 #define DELAY_1_NOP __asm__("nop\n\t")
-#define DELAY_2_NOP DELAY_1_NOP; DELAY_1_NOP
-#define DELAY_3_NOP DELAY_1_NOP; DELAY_2_NOP
-#define DELAY_4_NOP DELAY_1_NOP; DELAY_3_NOP
-#define DELAY_5_NOP DELAY_1_NOP; DELAY_4_NOP
+#define DELAY_2_NOP do{ DELAY_1_NOP; DELAY_1_NOP; }while(0)
+#define DELAY_3_NOP do{ DELAY_1_NOP; DELAY_2_NOP; }while(0)
+#define DELAY_4_NOP do{ DELAY_1_NOP; DELAY_3_NOP; }while(0)
+#define DELAY_5_NOP do{ DELAY_1_NOP; DELAY_4_NOP; }while(0)
 
 #define DELAY_NOPS(X) \
   switch (X) { \
     case 20: DELAY_1_NOP; case 19: DELAY_1_NOP; \
     case 18: DELAY_1_NOP; case 17: DELAY_1_NOP; \
     case 16: DELAY_1_NOP; case 15: DELAY_1_NOP; \
     case 14: DELAY_1_NOP; case 13: DELAY_1_NOP; \
     case 12: DELAY_1_NOP; case 11: DELAY_1_NOP; \
     case 10: DELAY_1_NOP; case 9:  DELAY_1_NOP; \
     case 8:  DELAY_1_NOP; case 7:  DELAY_1_NOP; \
     case 6:  DELAY_1_NOP; case 5:  DELAY_1_NOP; \
     case 4:  DELAY_1_NOP; case 3:  DELAY_1_NOP; \
     case 2:  DELAY_1_NOP; case 1:  DELAY_1_NOP; \
   }
 
-#define DELAY_10_NOP DELAY_5_NOP;  DELAY_5_NOP
-#define DELAY_20_NOP DELAY_10_NOP; DELAY_10_NOP
+#define DELAY_10_NOP do{ DELAY_5_NOP;  DELAY_5_NOP;  }while(0)
+#define DELAY_20_NOP do{ DELAY_10_NOP; DELAY_10_NOP; }while(0)
 
 #if CYCLES_PER_MICROSECOND == 16
-  #define DELAY_1US DELAY_10_NOP; DELAY_5_NOP; DELAY_1_NOP
+  #define DELAY_1US do { DELAY_10_NOP; DELAY_5_NOP; DELAY_1_NOP; }while(0)
 #else
   #define DELAY_1US DELAY_20_NOP
 #endif
-#define DELAY_2US  DELAY_1US; DELAY_1US
-#define DELAY_3US  DELAY_1US; DELAY_2US
-#define DELAY_4US  DELAY_1US; DELAY_3US
-#define DELAY_5US  DELAY_1US; DELAY_4US
-#define DELAY_6US  DELAY_1US; DELAY_5US
-#define DELAY_7US  DELAY_1US; DELAY_6US
-#define DELAY_8US  DELAY_1US; DELAY_7US
-#define DELAY_9US  DELAY_1US; DELAY_8US
-#define DELAY_10US DELAY_1US; DELAY_9US
+#define DELAY_2US  do{ DELAY_1US; DELAY_1US; }while(0)
+#define DELAY_3US  do{ DELAY_1US; DELAY_2US; }while(0)
+#define DELAY_4US  do{ DELAY_1US; DELAY_3US; }while(0)
+#define DELAY_5US  do{ DELAY_1US; DELAY_4US; }while(0)
+#define DELAY_6US  do{ DELAY_1US; DELAY_5US; }while(0)
+#define DELAY_7US  do{ DELAY_1US; DELAY_6US; }while(0)
+#define DELAY_8US  do{ DELAY_1US; DELAY_7US; }while(0)
+#define DELAY_9US  do{ DELAY_1US; DELAY_8US; }while(0)
+#define DELAY_10US do{ DELAY_1US; DELAY_9US; }while(0)
 
 // Remove compiler warning on an unused variable
 #define UNUSED(x) (void) (x)
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 // Macros for bit masks
 #undef _BV

commit 456cf971afb194d357419371df0c26653e66593a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Apr 26 00:40:16 2018 -0500

    HAL FastIO cleanup and fixes

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 28cbbb18ae..d5dee514b6 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -92,21 +92,21 @@
 
 // Remove compiler warning on an unused variable
 #define UNUSED(x) (void) (x)
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 // Macros for bit masks
 #undef _BV
-#define _BV(b) (1<<(b))
+#define _BV(b) (1 << (b))
 #define TEST(n,b) !!((n)&_BV(b))
 #define SBI(n,b) (n |= _BV(b))
 #define CBI(n,b) (n &= ~_BV(b))
 
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 
 // Macros for maths shortcuts

commit d462be6de62f9e49805a88b0eeca836ab44b658b
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Apr 17 15:59:04 2018 -0500

    Try FIXFLOAT rounding based on sign

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index c61e7d4cbe..28cbbb18ae 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -201,21 +201,21 @@
 #define MIN5(a, b, c, d, e) min(MIN4(a, b, c, d), e)
 #define MAX3(a, b, c)       max(max(a, b), c)
 #define MAX4(a, b, c, d)    max(MAX3(a, b, c), d)
 #define MAX5(a, b, c, d, e) max(MAX4(a, b, c, d), e)
 
 #define UNEAR_ZERO(x) ((x) < 0.000001)
 #define NEAR_ZERO(x) WITHIN(x, -0.000001, 0.000001)
 #define NEAR(x,y) NEAR_ZERO((x)-(y))
 
 #define RECIPROCAL(x) (NEAR_ZERO(x) ? 0.0 : 1.0 / (x))
-#define FIXFLOAT(f) (f + 0.00001)
+#define FIXFLOAT(f) (f + (f < 0.0 ? -0.00001 : 0.00001))
 
 //
 // Maths macros that can be overridden by HAL
 //
 #define ATAN2(y, x) atan2(y, x)
 #define FABS(x)     fabs(x)
 #define POW(x, y)   pow(x, y)
 #define SQRT(x)     sqrt(x)
 #define CEIL(x)     ceil(x)
 #define FLOOR(x)    floor(x)

commit 12c5fdfdb52007f2ed2d76bd969efeae41dd2810
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 20 03:09:53 2018 -0600

    Fix CYCLES_PER_MICROSECOND conflict on STM32F1

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 0e498b8b42..c61e7d4cbe 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -39,21 +39,21 @@
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
 // Clock speed factors
-#ifndef CYCLES_PER_MICROSECOND
+#if !defined(CYCLES_PER_MICROSECOND) && !defined(__STM32F1__)
   #define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20 on AVR
 #endif
 
 // Highly granular delays for step pulses, etc.
 #define DELAY_0_NOP NOOP
 #define DELAY_1_NOP __asm__("nop\n\t")
 #define DELAY_2_NOP DELAY_1_NOP; DELAY_1_NOP
 #define DELAY_3_NOP DELAY_1_NOP; DELAY_2_NOP
 #define DELAY_4_NOP DELAY_1_NOP; DELAY_3_NOP
 #define DELAY_5_NOP DELAY_1_NOP; DELAY_4_NOP

commit 451fb16f9b6577f9ed2267ba9d69b72ad82e7b8b
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Feb 10 20:08:48 2018 -0600

    Fix CYCLES_PER_MICROSECOND conflict

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index b9c0e2a5ff..0e498b8b42 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -39,21 +39,23 @@
 #define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
 #define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
 // Clock speed factors
-#define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20 on AVR
+#ifndef CYCLES_PER_MICROSECOND
+  #define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20 on AVR
+#endif
 
 // Highly granular delays for step pulses, etc.
 #define DELAY_0_NOP NOOP
 #define DELAY_1_NOP __asm__("nop\n\t")
 #define DELAY_2_NOP DELAY_1_NOP; DELAY_1_NOP
 #define DELAY_3_NOP DELAY_1_NOP; DELAY_2_NOP
 #define DELAY_4_NOP DELAY_1_NOP; DELAY_3_NOP
 #define DELAY_5_NOP DELAY_1_NOP; DELAY_4_NOP
 
 #define DELAY_NOPS(X) \

commit 786746404b8aa58c44a93734afd61c701d2abecb
Author: Thomas Moore <tcm0116@users.noreply.github.com>
Date:   Sun Feb 4 00:26:05 2018 -0600

    [2.0.x] Apply feedrate to nozzle movement for kinematic machines (#8778)

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 8f20ced284..b9c0e2a5ff 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -17,20 +17,21 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 #ifndef MACROS_H
 #define MACROS_H
 
 #define NUM_AXIS 4
+#define ABCE 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 
 #define _XMIN_ 100
 #define _YMIN_ 200
 #define _ZMIN_ 300
 #define _XMAX_ 101
 #define _YMAX_ 201
 #define _ZMAX_ 301

commit c251601916c69bf3a67bc62048c5694f03b410e5
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Feb 1 23:58:35 2018 -0600

    Simplified SET_BIT, moved to endstops.cpp

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 342b702d76..8f20ced284 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -93,21 +93,20 @@
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 // Macros for bit masks
 #undef _BV
 #define _BV(b) (1<<(b))
 #define TEST(n,b) !!((n)&_BV(b))
 #define SBI(n,b) (n |= _BV(b))
 #define CBI(n,b) (n &= ~_BV(b))
-#define SET_BIT(n,b,value) (n) ^= ((-value)^(n)) & (_BV(b))
 
 #define _BV32(b) (1UL << (b))
 #define TEST32(n,b) !!((n)&_BV32(b))
 #define SBI32(n,b) (n |= _BV32(b))
 #define CBI32(n,b) (n &= ~_BV32(b))
 
 // Macros for maths shortcuts
 #ifndef M_PI
   #define M_PI 3.14159265358979323846
 #endif

commit f5cfdf6efee4c50ee89cf77dbf10271c161250c7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Feb 1 00:06:44 2018 -0600

    Use _BV32 to avoid name conflict

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 945233a457..342b702d76 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -88,27 +88,32 @@
 #define DELAY_10US DELAY_1US; DELAY_9US
 
 // Remove compiler warning on an unused variable
 #define UNUSED(x) (void) (x)
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 // Macros for bit masks
-#undef _BV // Marlin needs 32-bit unsigned!
-#define _BV(b) (1UL << (b))
-#define TEST(n,b) (((n)&_BV(b))!=0)
+#undef _BV
+#define _BV(b) (1<<(b))
+#define TEST(n,b) !!((n)&_BV(b))
 #define SBI(n,b) (n |= _BV(b))
 #define CBI(n,b) (n &= ~_BV(b))
 #define SET_BIT(n,b,value) (n) ^= ((-value)^(n)) & (_BV(b))
 
+#define _BV32(b) (1UL << (b))
+#define TEST32(n,b) !!((n)&_BV32(b))
+#define SBI32(n,b) (n |= _BV32(b))
+#define CBI32(n,b) (n &= ~_BV32(b))
+
 // Macros for maths shortcuts
 #ifndef M_PI
   #define M_PI 3.14159265358979323846
 #endif
 #define RADIANS(d) ((d)*M_PI/180.0)
 #define DEGREES(r) ((r)*180.0/M_PI)
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
 #define CIRCLE_AREA(R) (M_PI * sq(R))
 #define CIRCLE_CIRC(R) (2.0 * M_PI * (R))

commit 58671e1bc184c2d8e5138065d47a93a57a5e78ee
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jan 23 23:39:37 2018 -0600

    Marlin must override _BV for 32-bit masks!

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 2c62467232..945233a457 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -88,23 +88,22 @@
 #define DELAY_10US DELAY_1US; DELAY_9US
 
 // Remove compiler warning on an unused variable
 #define UNUSED(x) (void) (x)
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 // Macros for bit masks
-#ifndef _BV
-  #define _BV(n)  (1<<(n))
-#endif
+#undef _BV // Marlin needs 32-bit unsigned!
+#define _BV(b) (1UL << (b))
 #define TEST(n,b) (((n)&_BV(b))!=0)
 #define SBI(n,b) (n |= _BV(b))
 #define CBI(n,b) (n &= ~_BV(b))
 #define SET_BIT(n,b,value) (n) ^= ((-value)^(n)) & (_BV(b))
 
 // Macros for maths shortcuts
 #ifndef M_PI
   #define M_PI 3.14159265358979323846
 #endif
 #define RADIANS(d) ((d)*M_PI/180.0)

commit 42933c804a08740b47a341623783be52182f477b
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jan 15 02:28:39 2018 -0600

    Cleanups for STM32F7

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 738e41654c..2c62467232 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -113,20 +113,21 @@
 
 #define CIRCLE_AREA(R) (M_PI * sq(R))
 #define CIRCLE_CIRC(R) (2.0 * M_PI * (R))
 
 #define SIGN(a) ((a>0)-(a<0))
 #define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
 // Macros to contrain values
 #define NOLESS(v,n) do{ if (v < n) v = n; }while(0)
 #define NOMORE(v,n) do{ if (v > n) v = n; }while(0)
+#define LIMIT(v,n1,n2) do{ if (v < n1) v = n1; else if (v > n2) v = n2; }while(0)
 
 // Macros to support option testing
 #define _CAT(a, ...) a ## __VA_ARGS__
 #define SWITCH_ENABLED_false 0
 #define SWITCH_ENABLED_true  1
 #define SWITCH_ENABLED_0     0
 #define SWITCH_ENABLED_1     1
 #define SWITCH_ENABLED_      1
 #define ENABLED(b) _CAT(SWITCH_ENABLED_, b)
 #define DISABLED(b) (!_CAT(SWITCH_ENABLED_, b))

commit ac168a03c86a200081f6862c54ddd9f524f3ac67
Author: Eduardo Jos√© Tagle <ejtagle@hotmail.com>
Date:   Tue Dec 12 20:51:36 2017 -0300

    Fixes for the Arduino DUE HAL (Serial Port, Graphics Display, EEPROM emulation) (#8651)
    
    * Fixing the DUE serial port assignments: Now -1 means the SAM3x USB Device emulating a serial port, and 0 means the USB to serial adapter included as a programming port
    
    * Improving the Fast IO port access implementation on Arduino DUE
    
    * Implemented EEPROM emulation on Due by storing data on the internal FLASH (with wear leveling)
    
    * Implemented a Software SPI for the ST7920 graphics display for the Arduino RAMPS for DUE, as the default one in u8glib is clocking data too fast on ARM, and the display does not understand it.
    
    * Fixing the case where the serial port selected is the USB device
    
    * Adding configuration for the Makerparts 3D printer (www.makerparts.net)
    
    * Tuned MakerParts acceleration on X and Y axis so it never loses steps. Also adjusted pulses per mm to match default hw configuration
    
    * Fine tuned Maximum acceleration for MakerParts printer
    
    * Style cleanup
    
    * Style cleanup (2)
    
    * Style fixes (3)
    
    * Fixing the DUE serial port assignments: Now -1 means the SAM3x USB Device emulating a serial port, and 0 means the USB to serial adapter included as a programming port
    
    * Improving the Fast IO port access implementation on Arduino DUE
    
    * Implemented EEPROM emulation on Due by storing data on the internal FLASH (with wear leveling)
    
    * Implemented a Software SPI for the ST7920 graphics display for the Arduino RAMPS for DUE, as the default one in u8glib is clocking data too fast on ARM, and the display does not understand it.
    
    * Fixing the case where the serial port selected is the USB device
    
    * Adding configuration for the Makerparts 3D printer (www.makerparts.net)
    
    * Tuned MakerParts acceleration on X and Y axis so it never loses steps. Also adjusted pulses per mm to match default hw configuration
    
    * Fine tuned Maximum acceleration for MakerParts printer
    
    * Style cleanup
    
    * Style changes to u8g_dev_st7920_128_64_sw_spi.cpp
    
    * Even more improvements to the FastIO HAL for DUE. Now WRITE() is 2 ASM instructions, if value is constant, and 5 cycles if value is not constant. Previously, it was 7..8 cycles
    
    * After some problems and debugging, seems we need to align the interrupt vector table to 256 bytes, otherwise, the program sometimes stops working
    
    * Moved comments out of macro, otherwise, token pasting does not properly work sometimes
    
    * Improved Software SPI implementation on DUE: Now it honors the selected speed passed to spiInit(). This allows much faster SDCARD access, improving SDCARD menus and reducing latency
    
    * Update u8g_dev_st7920_128_64_sw_spi.cpp
    
    * Disabling EEPROM over FLASH emulatiion if an I2C or SPI EEPROM is present

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index ea6ef387b5..738e41654c 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -28,21 +28,22 @@
 #define ABC  3
 #define XYZ  3
 
 #define _XMIN_ 100
 #define _YMIN_ 200
 #define _ZMIN_ 300
 #define _XMAX_ 101
 #define _YMAX_ 201
 #define _ZMAX_ 301
 
-#define FORCE_INLINE __attribute__((always_inline)) inline
+#define _FORCE_INLINE_ __attribute__((__always_inline__)) __inline__
+#define  FORCE_INLINE  __attribute__((always_inline)) inline
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
 // Clock speed factors
 #define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20 on AVR
 

commit b8bc965414b57c4abf5e1ab80cd3d21ab2208c60
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Dec 9 20:00:10 2017 -0600

    General cleanup HAL timers

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index aed0850215..ea6ef387b5 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -37,22 +37,21 @@
 
 #define FORCE_INLINE __attribute__((always_inline)) inline
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
 // Clock speed factors
-#define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20
-#define INT0_PRESCALER 8
+#define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20 on AVR
 
 // Highly granular delays for step pulses, etc.
 #define DELAY_0_NOP NOOP
 #define DELAY_1_NOP __asm__("nop\n\t")
 #define DELAY_2_NOP DELAY_1_NOP; DELAY_1_NOP
 #define DELAY_3_NOP DELAY_1_NOP; DELAY_2_NOP
 #define DELAY_4_NOP DELAY_1_NOP; DELAY_3_NOP
 #define DELAY_5_NOP DELAY_1_NOP; DELAY_4_NOP
 
 #define DELAY_NOPS(X) \

commit 65f365333ff15b93ddbe16db18b119c717a6f7bc
Author: LVD-AC <lvd@sound-silence.com>
Date:   Sat Nov 25 10:59:46 2017 +0100

    [2.0.x] G33 probe error handling

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index a925362b1e..aed0850215 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -89,21 +89,21 @@
 
 // Remove compiler warning on an unused variable
 #define UNUSED(x) (void) (x)
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 // Macros for bit masks
 #ifndef _BV
-  #define _BV(B) (1UL<<(B))
+  #define _BV(n)  (1<<(n))
 #endif
 #define TEST(n,b) (((n)&_BV(b))!=0)
 #define SBI(n,b) (n |= _BV(b))
 #define CBI(n,b) (n &= ~_BV(b))
 #define SET_BIT(n,b,value) (n) ^= ((-value)^(n)) & (_BV(b))
 
 // Macros for maths shortcuts
 #ifndef M_PI
   #define M_PI 3.14159265358979323846
 #endif

commit c6b0c104bbab04d4d59c4f3f8fddb728e9b99603
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Nov 23 17:59:43 2017 -0600

    Adapt G26 to work for all meshes

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 6342c16439..a925362b1e 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -88,20 +88,23 @@
 #define DELAY_10US DELAY_1US; DELAY_9US
 
 // Remove compiler warning on an unused variable
 #define UNUSED(x) (void) (x)
 
 // Macros to make a string from a macro
 #define STRINGIFY_(M) #M
 #define STRINGIFY(M) STRINGIFY_(M)
 
 // Macros for bit masks
+#ifndef _BV
+  #define _BV(B) (1UL<<(B))
+#endif
 #define TEST(n,b) (((n)&_BV(b))!=0)
 #define SBI(n,b) (n |= _BV(b))
 #define CBI(n,b) (n &= ~_BV(b))
 #define SET_BIT(n,b,value) (n) ^= ((-value)^(n)) & (_BV(b))
 
 // Macros for maths shortcuts
 #ifndef M_PI
   #define M_PI 3.14159265358979323846
 #endif
 #define RADIANS(d) ((d)*M_PI/180.0)

commit b9327a4d161747218d4a7c8f621f248a58900e54
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Nov 19 14:12:45 2017 -0600

    Misc. general cleanup

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 1265ddbbc8..6342c16439 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -36,21 +36,20 @@
 #define _ZMAX_ 301
 
 #define FORCE_INLINE __attribute__((always_inline)) inline
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
-
 // Clock speed factors
 #define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20
 #define INT0_PRESCALER 8
 
 // Highly granular delays for step pulses, etc.
 #define DELAY_0_NOP NOOP
 #define DELAY_1_NOP __asm__("nop\n\t")
 #define DELAY_2_NOP DELAY_1_NOP; DELAY_1_NOP
 #define DELAY_3_NOP DELAY_1_NOP; DELAY_2_NOP
 #define DELAY_4_NOP DELAY_1_NOP; DELAY_3_NOP

commit 723f2a77f6de40024508ea07fd7324e0987a2aa9
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Oct 29 03:43:44 2017 -0500

    Implement support for Dual X and Y endstops

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index a89b6dafce..1265ddbbc8 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -21,20 +21,27 @@
  */
 
 #ifndef MACROS_H
 #define MACROS_H
 
 #define NUM_AXIS 4
 #define XYZE 4
 #define ABC  3
 #define XYZ  3
 
+#define _XMIN_ 100
+#define _YMIN_ 200
+#define _ZMIN_ 300
+#define _XMAX_ 101
+#define _YMAX_ 201
+#define _ZMAX_ 301
+
 #define FORCE_INLINE __attribute__((always_inline)) inline
 #define _UNUSED      __attribute__((unused))
 #define _O0          __attribute__((optimize("O0")))
 #define _Os          __attribute__((optimize("Os")))
 #define _O1          __attribute__((optimize("O1")))
 #define _O2          __attribute__((optimize("O2")))
 #define _O3          __attribute__((optimize("O3")))
 
 
 // Clock speed factors

commit 508d764d63c26376683eb1de7ef9c0f8f1d19abf
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Oct 2 02:47:30 2017 -0500

    Add serial XON/XOFF handshaking
    
    From @ejtagle, originally #7459

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index e2f25eed4b..a89b6dafce 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -99,20 +99,21 @@
   #define M_PI 3.14159265358979323846
 #endif
 #define RADIANS(d) ((d)*M_PI/180.0)
 #define DEGREES(r) ((r)*180.0/M_PI)
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
 #define CIRCLE_AREA(R) (M_PI * sq(R))
 #define CIRCLE_CIRC(R) (2.0 * M_PI * (R))
 
 #define SIGN(a) ((a>0)-(a<0))
+#define IS_POWER_OF_2(x) ((x) && !((x) & ((x) - 1)))
 
 // Macros to contrain values
 #define NOLESS(v,n) do{ if (v < n) v = n; }while(0)
 #define NOMORE(v,n) do{ if (v > n) v = n; }while(0)
 
 // Macros to support option testing
 #define _CAT(a, ...) a ## __VA_ARGS__
 #define SWITCH_ENABLED_false 0
 #define SWITCH_ENABLED_true  1
 #define SWITCH_ENABLED_0     0

commit 4231faf7796ca8adb9ca861b014b65e79f67b376
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Sep 6 06:28:31 2017 -0500

    Initial split-up of G-code handlers by category

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index 95154bc8c5..e2f25eed4b 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -165,20 +165,23 @@
 #define DEC_8 7
 #define DEC_9 8
 #define DECREMENT_(n) DEC_ ##n
 #define DECREMENT(n) DECREMENT_(n)
 
 #define PIN_EXISTS(PN) (defined(PN ##_PIN) && PN ##_PIN >= 0)
 
 #define PENDING(NOW,SOON) ((long)(NOW-(SOON))<0)
 #define ELAPSED(NOW,SOON) (!PENDING(NOW,SOON))
 
+#define MMM_TO_MMS(MM_M) ((MM_M)/60.0)
+#define MMS_TO_MMM(MM_S) ((MM_S)*60.0)
+
 #define NOOP do{} while(0)
 
 #define CEILING(x,y) (((x) + (y) - 1) / (y))
 
 #define MIN3(a, b, c)       min(min(a, b), c)
 #define MIN4(a, b, c, d)    min(MIN3(a, b, c), d)
 #define MIN5(a, b, c, d, e) min(MIN4(a, b, c, d), e)
 #define MAX3(a, b, c)       max(max(a, b), c)
 #define MAX4(a, b, c, d)    max(MAX3(a, b, c), d)
 #define MAX5(a, b, c, d, e) max(MAX4(a, b, c, d), e)

commit f52a31a27517eaf5773f6ab443596e29c573f6e7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Sep 6 06:28:32 2017 -0500

    Core updates

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
index dd5ca4f474..95154bc8c5 100644
--- a/Marlin/src/core/macros.h
+++ b/Marlin/src/core/macros.h
@@ -95,20 +95,23 @@
 #define SET_BIT(n,b,value) (n) ^= ((-value)^(n)) & (_BV(b))
 
 // Macros for maths shortcuts
 #ifndef M_PI
   #define M_PI 3.14159265358979323846
 #endif
 #define RADIANS(d) ((d)*M_PI/180.0)
 #define DEGREES(r) ((r)*180.0/M_PI)
 #define HYPOT2(x,y) (sq(x)+sq(y))
 
+#define CIRCLE_AREA(R) (M_PI * sq(R))
+#define CIRCLE_CIRC(R) (2.0 * M_PI * (R))
+
 #define SIGN(a) ((a>0)-(a<0))
 
 // Macros to contrain values
 #define NOLESS(v,n) do{ if (v < n) v = n; }while(0)
 #define NOMORE(v,n) do{ if (v > n) v = n; }while(0)
 
 // Macros to support option testing
 #define _CAT(a, ...) a ## __VA_ARGS__
 #define SWITCH_ENABLED_false 0
 #define SWITCH_ENABLED_true  1

commit 4e4d16c92ecca1f92efdce3c8da2d62d4df1cf84
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Sep 6 06:28:30 2017 -0500

    Move 'core' files

diff --git a/Marlin/src/core/macros.h b/Marlin/src/core/macros.h
new file mode 100644
index 0000000000..dd5ca4f474
--- /dev/null
+++ b/Marlin/src/core/macros.h
@@ -0,0 +1,203 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef MACROS_H
+#define MACROS_H
+
+#define NUM_AXIS 4
+#define XYZE 4
+#define ABC  3
+#define XYZ  3
+
+#define FORCE_INLINE __attribute__((always_inline)) inline
+#define _UNUSED      __attribute__((unused))
+#define _O0          __attribute__((optimize("O0")))
+#define _Os          __attribute__((optimize("Os")))
+#define _O1          __attribute__((optimize("O1")))
+#define _O2          __attribute__((optimize("O2")))
+#define _O3          __attribute__((optimize("O3")))
+
+
+// Clock speed factors
+#define CYCLES_PER_MICROSECOND (F_CPU / 1000000L) // 16 or 20
+#define INT0_PRESCALER 8
+
+// Highly granular delays for step pulses, etc.
+#define DELAY_0_NOP NOOP
+#define DELAY_1_NOP __asm__("nop\n\t")
+#define DELAY_2_NOP DELAY_1_NOP; DELAY_1_NOP
+#define DELAY_3_NOP DELAY_1_NOP; DELAY_2_NOP
+#define DELAY_4_NOP DELAY_1_NOP; DELAY_3_NOP
+#define DELAY_5_NOP DELAY_1_NOP; DELAY_4_NOP
+
+#define DELAY_NOPS(X) \
+  switch (X) { \
+    case 20: DELAY_1_NOP; case 19: DELAY_1_NOP; \
+    case 18: DELAY_1_NOP; case 17: DELAY_1_NOP; \
+    case 16: DELAY_1_NOP; case 15: DELAY_1_NOP; \
+    case 14: DELAY_1_NOP; case 13: DELAY_1_NOP; \
+    case 12: DELAY_1_NOP; case 11: DELAY_1_NOP; \
+    case 10: DELAY_1_NOP; case 9:  DELAY_1_NOP; \
+    case 8:  DELAY_1_NOP; case 7:  DELAY_1_NOP; \
+    case 6:  DELAY_1_NOP; case 5:  DELAY_1_NOP; \
+    case 4:  DELAY_1_NOP; case 3:  DELAY_1_NOP; \
+    case 2:  DELAY_1_NOP; case 1:  DELAY_1_NOP; \
+  }
+
+#define DELAY_10_NOP DELAY_5_NOP;  DELAY_5_NOP
+#define DELAY_20_NOP DELAY_10_NOP; DELAY_10_NOP
+
+#if CYCLES_PER_MICROSECOND == 16
+  #define DELAY_1US DELAY_10_NOP; DELAY_5_NOP; DELAY_1_NOP
+#else
+  #define DELAY_1US DELAY_20_NOP
+#endif
+#define DELAY_2US  DELAY_1US; DELAY_1US
+#define DELAY_3US  DELAY_1US; DELAY_2US
+#define DELAY_4US  DELAY_1US; DELAY_3US
+#define DELAY_5US  DELAY_1US; DELAY_4US
+#define DELAY_6US  DELAY_1US; DELAY_5US
+#define DELAY_7US  DELAY_1US; DELAY_6US
+#define DELAY_8US  DELAY_1US; DELAY_7US
+#define DELAY_9US  DELAY_1US; DELAY_8US
+#define DELAY_10US DELAY_1US; DELAY_9US
+
+// Remove compiler warning on an unused variable
+#define UNUSED(x) (void) (x)
+
+// Macros to make a string from a macro
+#define STRINGIFY_(M) #M
+#define STRINGIFY(M) STRINGIFY_(M)
+
+// Macros for bit masks
+#define TEST(n,b) (((n)&_BV(b))!=0)
+#define SBI(n,b) (n |= _BV(b))
+#define CBI(n,b) (n &= ~_BV(b))
+#define SET_BIT(n,b,value) (n) ^= ((-value)^(n)) & (_BV(b))
+
+// Macros for maths shortcuts
+#ifndef M_PI
+  #define M_PI 3.14159265358979323846
+#endif
+#define RADIANS(d) ((d)*M_PI/180.0)
+#define DEGREES(r) ((r)*180.0/M_PI)
+#define HYPOT2(x,y) (sq(x)+sq(y))
+
+#define SIGN(a) ((a>0)-(a<0))
+
+// Macros to contrain values
+#define NOLESS(v,n) do{ if (v < n) v = n; }while(0)
+#define NOMORE(v,n) do{ if (v > n) v = n; }while(0)
+
+// Macros to support option testing
+#define _CAT(a, ...) a ## __VA_ARGS__
+#define SWITCH_ENABLED_false 0
+#define SWITCH_ENABLED_true  1
+#define SWITCH_ENABLED_0     0
+#define SWITCH_ENABLED_1     1
+#define SWITCH_ENABLED_      1
+#define ENABLED(b) _CAT(SWITCH_ENABLED_, b)
+#define DISABLED(b) (!_CAT(SWITCH_ENABLED_, b))
+
+#define WITHIN(V,L,H) ((V) >= (L) && (V) <= (H))
+#define NUMERIC(a) WITHIN(a, '0', '9')
+#define DECIMAL(a) (NUMERIC(a) || a == '.')
+#define NUMERIC_SIGNED(a) (NUMERIC(a) || (a) == '-' || (a) == '+')
+#define DECIMAL_SIGNED(a) (DECIMAL(a) || (a) == '-' || (a) == '+')
+#define COUNT(a) (sizeof(a)/sizeof(*a))
+#define ZERO(a) memset(a,0,sizeof(a))
+#define COPY(a,b) memcpy(a,b,min(sizeof(a),sizeof(b)))
+
+// Macros for initializing arrays
+#define ARRAY_6(v1, v2, v3, v4, v5, v6, ...) { v1, v2, v3, v4, v5, v6 }
+#define ARRAY_5(v1, v2, v3, v4, v5, ...)     { v1, v2, v3, v4, v5 }
+#define ARRAY_4(v1, v2, v3, v4, ...)         { v1, v2, v3, v4 }
+#define ARRAY_3(v1, v2, v3, ...)             { v1, v2, v3 }
+#define ARRAY_2(v1, v2, ...)                 { v1, v2 }
+#define ARRAY_1(v1, ...)                     { v1 }
+
+#define _ARRAY_N(N, ...) ARRAY_ ##N(__VA_ARGS__)
+#define ARRAY_N(N, ...) _ARRAY_N(N, __VA_ARGS__)
+
+// Macros for adding
+#define INC_0 1
+#define INC_1 2
+#define INC_2 3
+#define INC_3 4
+#define INC_4 5
+#define INC_5 6
+#define INC_6 7
+#define INC_7 8
+#define INC_8 9
+#define INCREMENT_(n) INC_ ##n
+#define INCREMENT(n) INCREMENT_(n)
+
+// Macros for subtracting
+#define DEC_1 0
+#define DEC_2 1
+#define DEC_3 2
+#define DEC_4 3
+#define DEC_5 4
+#define DEC_6 5
+#define DEC_7 6
+#define DEC_8 7
+#define DEC_9 8
+#define DECREMENT_(n) DEC_ ##n
+#define DECREMENT(n) DECREMENT_(n)
+
+#define PIN_EXISTS(PN) (defined(PN ##_PIN) && PN ##_PIN >= 0)
+
+#define PENDING(NOW,SOON) ((long)(NOW-(SOON))<0)
+#define ELAPSED(NOW,SOON) (!PENDING(NOW,SOON))
+
+#define NOOP do{} while(0)
+
+#define CEILING(x,y) (((x) + (y) - 1) / (y))
+
+#define MIN3(a, b, c)       min(min(a, b), c)
+#define MIN4(a, b, c, d)    min(MIN3(a, b, c), d)
+#define MIN5(a, b, c, d, e) min(MIN4(a, b, c, d), e)
+#define MAX3(a, b, c)       max(max(a, b), c)
+#define MAX4(a, b, c, d)    max(MAX3(a, b, c), d)
+#define MAX5(a, b, c, d, e) max(MAX4(a, b, c, d), e)
+
+#define UNEAR_ZERO(x) ((x) < 0.000001)
+#define NEAR_ZERO(x) WITHIN(x, -0.000001, 0.000001)
+#define NEAR(x,y) NEAR_ZERO((x)-(y))
+
+#define RECIPROCAL(x) (NEAR_ZERO(x) ? 0.0 : 1.0 / (x))
+#define FIXFLOAT(f) (f + 0.00001)
+
+//
+// Maths macros that can be overridden by HAL
+//
+#define ATAN2(y, x) atan2(y, x)
+#define FABS(x)     fabs(x)
+#define POW(x, y)   pow(x, y)
+#define SQRT(x)     sqrt(x)
+#define CEIL(x)     ceil(x)
+#define FLOOR(x)    floor(x)
+#define LROUND(x)   lround(x)
+#define FMOD(x, y)  fmod(x, y)
+#define HYPOT(x,y)  SQRT(HYPOT2(x,y))
+
+#endif //__MACROS_H
