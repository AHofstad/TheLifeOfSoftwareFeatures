commit 03cf2b577be63a8f630c2ad9547d0e2ab3b73e00
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 6 19:15:28 2023 -0500

    misc. formatting, grid condition

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 891a4e4383..c3324443ba 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -26,21 +26,21 @@
 #include "../core/millis_t.h"
 
 void safe_delay(millis_t ms);           // Delay ensuring that temperatures are updated and the watchdog is kept alive.
 
 #if ENABLED(SERIAL_OVERRUN_PROTECTION)
   void serial_delay(const millis_t ms);
 #else
   inline void serial_delay(const millis_t) {}
 #endif
 
-#if (GRID_MAX_POINTS_X) && (GRID_MAX_POINTS_Y)
+#if GRID_MAX_POINTS
 
   // 16x16 bit arrays
   template <int W, int H>
   struct FlagBits {
     bits_t(W) flags[H];
     void fill()                                   { memset(flags, 0xFF, sizeof(flags)); }
     void reset()                                  { memset(flags, 0x00, sizeof(flags)); }
     void unmark(const uint8_t x, const uint8_t y) { CBI(flags[y], x); }
     void mark(const uint8_t x, const uint8_t y)   { SBI(flags[y], x); }
     bool marked(const uint8_t x, const uint8_t y) { return TEST(flags[y], x); }

commit 2ef71c6ebaa1f1b496eb369879fe22c69cf9adb4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jun 12 16:38:14 2023 -0500

    ‚ôªÔ∏è Simplify SERIAL_ECHO (#25928)
    
    Since this increases AVR code size, try to optimize further.

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index c4bb3c2a8a..891a4e4383 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -85,10 +85,29 @@ constexpr uint8_t ui8_to_percent(const uint8_t i) { return (int(i) * 100 + 127)
 // Axis names for G-code parsing, reports, etc.
 const xyze_char_t axis_codes LOGICAL_AXIS_ARRAY('E', 'X', 'Y', 'Z', AXIS4_NAME, AXIS5_NAME, AXIS6_NAME, AXIS7_NAME, AXIS8_NAME, AXIS9_NAME);
 #if NUM_AXES <= XYZ && !HAS_EXTRUDERS
   #define AXIS_CHAR(A) ((char)('X' + A))
   #define IAXIS_CHAR AXIS_CHAR
 #else
   const xyze_char_t iaxis_codes LOGICAL_AXIS_ARRAY('E', 'X', 'Y', 'Z', 'I', 'J', 'K', 'U', 'V', 'W');
   #define AXIS_CHAR(A) axis_codes[A]
   #define IAXIS_CHAR(A) iaxis_codes[A]
 #endif
+
+#if ENABLED(MARLIN_DEV_MODE)
+  enum MarlinError : uint8_t {
+    ERR_NONE,
+    ERR_STRING_RANGE, // A string buffer was too small to set the whole blob
+    ERR_ASSERTION,    // An assertion was triggered
+    ERR_MALFUNCTION,
+    ERR_MEMORY_LEAK,
+    ERR_COMMS_SERIAL,
+    ERR_COMMS_SPI,
+    ERR_PLANNER_STARVED,
+    ERR_TMC_SHUTDOWN,
+    ERR_PROCEDURE_FAILED,
+    ERR_TOO_WACK,
+    ERR_PLAID_IN_SUMMER
+  };
+  extern MarlinError marlin_error_number;   // Error Number - Marlin can beep, display, and emit...
+  inline void error(const MarlinError err) { marlin_error_number = err; }
+#endif

commit f0c8c9182090f8929ec4766683ec2d6902d4bc00
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 3 20:44:24 2023 -0600

    üßë‚Äçüíª Width/Magnitude-based types (#25458)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 2731e62b67..c4bb3c2a8a 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -31,26 +31,26 @@ void safe_delay(millis_t ms);           // Delay ensuring that temperatures are
   void serial_delay(const millis_t ms);
 #else
   inline void serial_delay(const millis_t) {}
 #endif
 
 #if (GRID_MAX_POINTS_X) && (GRID_MAX_POINTS_Y)
 
   // 16x16 bit arrays
   template <int W, int H>
   struct FlagBits {
-    typename IF<(W>8), uint16_t, uint8_t>::type bits[H];
-    void fill()                                   { memset(bits, 0xFF, sizeof(bits)); }
-    void reset()                                  { memset(bits, 0x00, sizeof(bits)); }
-    void unmark(const uint8_t x, const uint8_t y) { CBI(bits[y], x); }
-    void mark(const uint8_t x, const uint8_t y)   { SBI(bits[y], x); }
-    bool marked(const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
+    bits_t(W) flags[H];
+    void fill()                                   { memset(flags, 0xFF, sizeof(flags)); }
+    void reset()                                  { memset(flags, 0x00, sizeof(flags)); }
+    void unmark(const uint8_t x, const uint8_t y) { CBI(flags[y], x); }
+    void mark(const uint8_t x, const uint8_t y)   { SBI(flags[y], x); }
+    bool marked(const uint8_t x, const uint8_t y) { return TEST(flags[y], x); }
     inline void unmark(const xy_int8_t &xy)       { unmark(xy.x, xy.y); }
     inline void mark(const xy_int8_t &xy)         { mark(xy.x, xy.y); }
     inline bool marked(const xy_int8_t &xy)       { return marked(xy.x, xy.y); }
   };
 
   typedef FlagBits<GRID_MAX_POINTS_X, GRID_MAX_POINTS_Y> MeshFlags;
 
 #endif
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)

commit 21c48d9f927c81d7b7cf6fc3641ce01a831a16ca
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jul 27 04:24:50 2022 -0500

    üßë‚Äçüíª  Update planner/stepper includes

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 10c8201610..2731e62b67 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -52,20 +52,25 @@ void safe_delay(millis_t ms);           // Delay ensuring that temperatures are
   typedef FlagBits<GRID_MAX_POINTS_X, GRID_MAX_POINTS_Y> MeshFlags;
 
 #endif
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #else
   #define log_machine_info() NOOP
 #endif
 
+/**
+ * A restorer instance remembers a variable's value before setting a
+ * new value, then restores the old value when it goes out of scope.
+ * Put operator= on your type to get extended behavior on value change.
+ */
 template<typename T>
 class restorer {
   T& ref_;
   T  val_;
 public:
   restorer(T& perm) : ref_(perm), val_(perm) {}
   restorer(T& perm, T temp_val) : ref_(perm), val_(perm) { perm = temp_val; }
   ~restorer() { restore(); }
   inline void restore() { ref_ = val_; }
 };

commit 8b8defeacc5f7ba2bac63baf65c1d3b1ef60177c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 3 20:52:27 2022 -0500

    üèóÔ∏è Extend AXIS_CHAR to include E
    
    Co-Authored-By: DerAndere <26200979+DerAndere1@users.noreply.github.com>

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index b845cd0412..10c8201610 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -72,18 +72,18 @@ public:
 
 #define REMEMBER(N,X,V...) restorer<__typeof__(X)> restorer_##N(X, ##V)
 #define RESTORE(N) restorer_##N.restore()
 
 // Converts from an uint8_t in the range of 0-255 to an uint8_t
 // in the range 0-100 while avoiding rounding artifacts
 constexpr uint8_t ui8_to_percent(const uint8_t i) { return (int(i) * 100 + 127) / 255; }
 
 // Axis names for G-code parsing, reports, etc.
 const xyze_char_t axis_codes LOGICAL_AXIS_ARRAY('E', 'X', 'Y', 'Z', AXIS4_NAME, AXIS5_NAME, AXIS6_NAME, AXIS7_NAME, AXIS8_NAME, AXIS9_NAME);
-#if NUM_AXES <= XYZ
+#if NUM_AXES <= XYZ && !HAS_EXTRUDERS
   #define AXIS_CHAR(A) ((char)('X' + A))
   #define IAXIS_CHAR AXIS_CHAR
 #else
   const xyze_char_t iaxis_codes LOGICAL_AXIS_ARRAY('E', 'X', 'Y', 'Z', 'I', 'J', 'K', 'U', 'V', 'W');
   #define AXIS_CHAR(A) axis_codes[A]
   #define IAXIS_CHAR(A) iaxis_codes[A]
 #endif

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index d248091ce5..b845cd0412 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -70,17 +70,20 @@ public:
   inline void restore() { ref_ = val_; }
 };
 
 #define REMEMBER(N,X,V...) restorer<__typeof__(X)> restorer_##N(X, ##V)
 #define RESTORE(N) restorer_##N.restore()
 
 // Converts from an uint8_t in the range of 0-255 to an uint8_t
 // in the range 0-100 while avoiding rounding artifacts
 constexpr uint8_t ui8_to_percent(const uint8_t i) { return (int(i) * 100 + 127) / 255; }
 
-const xyze_char_t axis_codes LOGICAL_AXIS_ARRAY('E', 'X', 'Y', 'Z', AXIS4_NAME, AXIS5_NAME, AXIS6_NAME);
-
-#if LINEAR_AXES <= XYZ
+// Axis names for G-code parsing, reports, etc.
+const xyze_char_t axis_codes LOGICAL_AXIS_ARRAY('E', 'X', 'Y', 'Z', AXIS4_NAME, AXIS5_NAME, AXIS6_NAME, AXIS7_NAME, AXIS8_NAME, AXIS9_NAME);
+#if NUM_AXES <= XYZ
   #define AXIS_CHAR(A) ((char)('X' + A))
+  #define IAXIS_CHAR AXIS_CHAR
 #else
+  const xyze_char_t iaxis_codes LOGICAL_AXIS_ARRAY('E', 'X', 'Y', 'Z', 'I', 'J', 'K', 'U', 'V', 'W');
   #define AXIS_CHAR(A) axis_codes[A]
+  #define IAXIS_CHAR(A) iaxis_codes[A]
 #endif

commit 7726af9c5348c1c7d0fd9a56eca87d00cd75fee6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Jun 5 09:18:47 2021 +0200

    üèóÔ∏è Support for up to 6 linear axes (#19112)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 31d0ac6ef4..d248091ce5 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -70,17 +70,17 @@ public:
   inline void restore() { ref_ = val_; }
 };
 
 #define REMEMBER(N,X,V...) restorer<__typeof__(X)> restorer_##N(X, ##V)
 #define RESTORE(N) restorer_##N.restore()
 
 // Converts from an uint8_t in the range of 0-255 to an uint8_t
 // in the range 0-100 while avoiding rounding artifacts
 constexpr uint8_t ui8_to_percent(const uint8_t i) { return (int(i) * 100 + 127) / 255; }
 
-const xyze_char_t axis_codes LOGICAL_AXIS_ARRAY('E', 'X', 'Y', 'Z');
+const xyze_char_t axis_codes LOGICAL_AXIS_ARRAY('E', 'X', 'Y', 'Z', AXIS4_NAME, AXIS5_NAME, AXIS6_NAME);
 
 #if LINEAR_AXES <= XYZ
   #define AXIS_CHAR(A) ((char)('X' + A))
 #else
   #define AXIS_CHAR(A) axis_codes[A]
 #endif

commit dd4990252e891cdfe56cb7d6e3bbe1e6289be649
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon May 24 16:38:57 2021 -0500

    ‚ôªÔ∏è Refactor Linear / Logical / Distinct Axes (#21953)
    
    * More patches supporting EXTRUDERS 0
    * Extend types in prep for more axes

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index d774b007b6..31d0ac6ef4 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -69,10 +69,18 @@ public:
   ~restorer() { restore(); }
   inline void restore() { ref_ = val_; }
 };
 
 #define REMEMBER(N,X,V...) restorer<__typeof__(X)> restorer_##N(X, ##V)
 #define RESTORE(N) restorer_##N.restore()
 
 // Converts from an uint8_t in the range of 0-255 to an uint8_t
 // in the range 0-100 while avoiding rounding artifacts
 constexpr uint8_t ui8_to_percent(const uint8_t i) { return (int(i) * 100 + 127) / 255; }
+
+const xyze_char_t axis_codes LOGICAL_AXIS_ARRAY('E', 'X', 'Y', 'Z');
+
+#if LINEAR_AXES <= XYZ
+  #define AXIS_CHAR(A) ((char)('X' + A))
+#else
+  #define AXIS_CHAR(A) axis_codes[A]
+#endif

commit 9dd884a324e82c74e8e78c987d490a297bafbdc0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun May 2 21:32:42 2021 -0500

    Drop early_safe_delay

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 0e1c109be1..d774b007b6 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -19,25 +19,20 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
 #include "../core/types.h"
 #include "../core/millis_t.h"
 
 void safe_delay(millis_t ms);           // Delay ensuring that temperatures are updated and the watchdog is kept alive.
-#if ENABLED(MARLIN_DEV_MODE)
-  void early_safe_delay(millis_t ms);   // Delay ensuring that the watchdog is kept alive. Can be used before the Temperature ISR starts.
-#else
-  inline void early_safe_delay(millis_t ms) { safe_delay(ms); }
-#endif
 
 #if ENABLED(SERIAL_OVERRUN_PROTECTION)
   void serial_delay(const millis_t ms);
 #else
   inline void serial_delay(const millis_t) {}
 #endif
 
 #if (GRID_MAX_POINTS_X) && (GRID_MAX_POINTS_Y)
 
   // 16x16 bit arrays

commit a29aefc9c0c02c23862fded29e3f950ead339238
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 24 01:29:30 2021 -0500

    Move last bootscreen delay to end of setup (#21665)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index aaa241d460..0e1c109be1 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -18,22 +18,26 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
 #include "../core/types.h"
 #include "../core/millis_t.h"
 
-// Delay that ensures heaters and watchdog are kept alive
-void safe_delay(millis_t ms);
+void safe_delay(millis_t ms);           // Delay ensuring that temperatures are updated and the watchdog is kept alive.
+#if ENABLED(MARLIN_DEV_MODE)
+  void early_safe_delay(millis_t ms);   // Delay ensuring that the watchdog is kept alive. Can be used before the Temperature ISR starts.
+#else
+  inline void early_safe_delay(millis_t ms) { safe_delay(ms); }
+#endif
 
 #if ENABLED(SERIAL_OVERRUN_PROTECTION)
   void serial_delay(const millis_t ms);
 #else
   inline void serial_delay(const millis_t) {}
 #endif
 
 #if (GRID_MAX_POINTS_X) && (GRID_MAX_POINTS_Y)
 
   // 16x16 bit arrays

commit 45c1432946547cef4cbe9ac832394ff68526687d
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Thu Apr 1 18:12:00 2021 -0600

    G26 Hilbert Curve followup (#21480)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 645a4be807..aaa241d460 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -27,21 +27,21 @@
 
 // Delay that ensures heaters and watchdog are kept alive
 void safe_delay(millis_t ms);
 
 #if ENABLED(SERIAL_OVERRUN_PROTECTION)
   void serial_delay(const millis_t ms);
 #else
   inline void serial_delay(const millis_t) {}
 #endif
 
-#if GRID_MAX_POINTS_X && GRID_MAX_POINTS_Y
+#if (GRID_MAX_POINTS_X) && (GRID_MAX_POINTS_Y)
 
   // 16x16 bit arrays
   template <int W, int H>
   struct FlagBits {
     typename IF<(W>8), uint16_t, uint8_t>::type bits[H];
     void fill()                                   { memset(bits, 0xFF, sizeof(bits)); }
     void reset()                                  { memset(bits, 0x00, sizeof(bits)); }
     void unmark(const uint8_t x, const uint8_t y) { CBI(bits[y], x); }
     void mark(const uint8_t x, const uint8_t y)   { SBI(bits[y], x); }
     bool marked(const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }

commit 6fdaaf3d203002fb7b437e86cd3aaa80e5da77bd
Author: Serhiy-K <52166448+Serhiy-K@users.noreply.github.com>
Date:   Sat Oct 10 13:01:46 2020 +0300

    Fixes for TFTGLCD Panel, FastIO (#19614)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 0481ffc02a..645a4be807 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -64,16 +64,16 @@ template<typename T>
 class restorer {
   T& ref_;
   T  val_;
 public:
   restorer(T& perm) : ref_(perm), val_(perm) {}
   restorer(T& perm, T temp_val) : ref_(perm), val_(perm) { perm = temp_val; }
   ~restorer() { restore(); }
   inline void restore() { ref_ = val_; }
 };
 
-#define REMEMBER(N,X,V...) restorer<typeof(X)> restorer_##N(X, ##V)
+#define REMEMBER(N,X,V...) restorer<__typeof__(X)> restorer_##N(X, ##V)
 #define RESTORE(N) restorer_##N.restore()
 
 // Converts from an uint8_t in the range of 0-255 to an uint8_t
 // in the range 0-100 while avoiding rounding artifacts
 constexpr uint8_t ui8_to_percent(const uint8_t i) { return (int(i) * 100 + 127) / 255; }

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 0c2e91d31f..0481ffc02a 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
 #include "../core/types.h"
 #include "../core/millis_t.h"
 
 // Delay that ensures heaters and watchdog are kept alive
 void safe_delay(millis_t ms);

commit 924fa6045cc6ccef29cdcdb37f93d44631e5baeb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Mar 11 15:24:27 2020 -0500

    Non-const REMEMBER needed for RESTORE

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index c2da029196..0c2e91d31f 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -64,16 +64,16 @@ template<typename T>
 class restorer {
   T& ref_;
   T  val_;
 public:
   restorer(T& perm) : ref_(perm), val_(perm) {}
   restorer(T& perm, T temp_val) : ref_(perm), val_(perm) { perm = temp_val; }
   ~restorer() { restore(); }
   inline void restore() { ref_ = val_; }
 };
 
-#define REMEMBER(N,X,V...) const restorer<typeof(X)> restorer_##N(X, ##V)
+#define REMEMBER(N,X,V...) restorer<typeof(X)> restorer_##N(X, ##V)
 #define RESTORE(N) restorer_##N.restore()
 
 // Converts from an uint8_t in the range of 0-255 to an uint8_t
 // in the range 0-100 while avoiding rounding artifacts
 constexpr uint8_t ui8_to_percent(const uint8_t i) { return (int(i) * 100 + 127) / 255; }

commit 3473b21710e236669017ddab2650f566499dde64
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 1 09:50:53 2020 -0600

    Move millis_t includes

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index e34f9dd58a..c2da029196 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -16,20 +16,21 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
 #include "../core/types.h"
+#include "../core/millis_t.h"
 
 // Delay that ensures heaters and watchdog are kept alive
 void safe_delay(millis_t ms);
 
 #if ENABLED(SERIAL_OVERRUN_PROTECTION)
   void serial_delay(const millis_t ms);
 #else
   inline void serial_delay(const millis_t) {}
 #endif
 

commit a1f026f57ad7dbf4c50b135cf1dc0f9eacc06025
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Feb 20 20:09:37 2020 -0600

    Inline manage_inactivity, tweak autoreport_paused

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index d0a5274ce2..e34f9dd58a 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -20,28 +20,25 @@
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
 #include "../core/types.h"
 
 // Delay that ensures heaters and watchdog are kept alive
 void safe_delay(millis_t ms);
 
-// A delay to provide brittle hosts time to receive bytes
-inline void serial_delay(const millis_t ms) {
-  #if ENABLED(SERIAL_OVERRUN_PROTECTION)
-    safe_delay(ms);
-  #else
-    UNUSED(ms);
-  #endif
-}
+#if ENABLED(SERIAL_OVERRUN_PROTECTION)
+  void serial_delay(const millis_t ms);
+#else
+  inline void serial_delay(const millis_t) {}
+#endif
 
 #if GRID_MAX_POINTS_X && GRID_MAX_POINTS_Y
 
   // 16x16 bit arrays
   template <int W, int H>
   struct FlagBits {
     typename IF<(W>8), uint16_t, uint8_t>::type bits[H];
     void fill()                                   { memset(bits, 0xFF, sizeof(bits)); }
     void reset()                                  { memset(bits, 0x00, sizeof(bits)); }
     void unmark(const uint8_t x, const uint8_t y) { CBI(bits[y], x); }

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index f430da50d6..d0a5274ce2 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit 3642a12fc170ffdee8e5db5d78684f82914edc41
Author: Roxy-3D <Roxy-3D@users.noreply.github.com>
Date:   Wed Oct 23 11:34:24 2019 -0500

    fix parameter order of mark, marked and unmark
    
    The parameter order was wrong on mark(), marked() and unmark().
    
    This was breaking the G26 Mesh Validation algorithm.

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 2956f92892..f430da50d6 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -40,23 +40,23 @@ inline void serial_delay(const millis_t ms) {
 
   // 16x16 bit arrays
   template <int W, int H>
   struct FlagBits {
     typename IF<(W>8), uint16_t, uint8_t>::type bits[H];
     void fill()                                   { memset(bits, 0xFF, sizeof(bits)); }
     void reset()                                  { memset(bits, 0x00, sizeof(bits)); }
     void unmark(const uint8_t x, const uint8_t y) { CBI(bits[y], x); }
     void mark(const uint8_t x, const uint8_t y)   { SBI(bits[y], x); }
     bool marked(const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
-    inline void unmark(const xy_int8_t &xy)       { unmark(xy.y, xy.x); }
-    inline void mark(const xy_int8_t &xy)         { mark(xy.y, xy.x); }
-    inline bool marked(const xy_int8_t &xy)       { return marked(xy.y, xy.x); }
+    inline void unmark(const xy_int8_t &xy)       { unmark(xy.x, xy.y); }
+    inline void mark(const xy_int8_t &xy)         { mark(xy.x, xy.y); }
+    inline bool marked(const xy_int8_t &xy)       { return marked(xy.x, xy.y); }
   };
 
   typedef FlagBits<GRID_MAX_POINTS_X, GRID_MAX_POINTS_Y> MeshFlags;
 
 #endif
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #else
   #define log_machine_info() NOOP

commit 50e4545255605eb506c20eb107270038b0fe7bdb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 29 04:25:39 2019 -0500

    Add custom types for position (#15204)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 4ae6a96713..2956f92892 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -15,39 +15,53 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
-
-constexpr char axis_codes[XYZE] = { 'X', 'Y', 'Z', 'E' };
+#include "../core/types.h"
 
 // Delay that ensures heaters and watchdog are kept alive
 void safe_delay(millis_t ms);
 
 // A delay to provide brittle hosts time to receive bytes
 inline void serial_delay(const millis_t ms) {
   #if ENABLED(SERIAL_OVERRUN_PROTECTION)
     safe_delay(ms);
   #else
     UNUSED(ms);
   #endif
 }
 
-// 16x16 bit arrays
-FORCE_INLINE void bitmap_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
-FORCE_INLINE void bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
-FORCE_INLINE bool is_bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
+#if GRID_MAX_POINTS_X && GRID_MAX_POINTS_Y
+
+  // 16x16 bit arrays
+  template <int W, int H>
+  struct FlagBits {
+    typename IF<(W>8), uint16_t, uint8_t>::type bits[H];
+    void fill()                                   { memset(bits, 0xFF, sizeof(bits)); }
+    void reset()                                  { memset(bits, 0x00, sizeof(bits)); }
+    void unmark(const uint8_t x, const uint8_t y) { CBI(bits[y], x); }
+    void mark(const uint8_t x, const uint8_t y)   { SBI(bits[y], x); }
+    bool marked(const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
+    inline void unmark(const xy_int8_t &xy)       { unmark(xy.y, xy.x); }
+    inline void mark(const xy_int8_t &xy)         { mark(xy.y, xy.x); }
+    inline bool marked(const xy_int8_t &xy)       { return marked(xy.y, xy.x); }
+  };
+
+  typedef FlagBits<GRID_MAX_POINTS_X, GRID_MAX_POINTS_Y> MeshFlags;
+
+#endif
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #else
   #define log_machine_info() NOOP
 #endif
 
 template<typename T>
 class restorer {
   T& ref_;

commit dc65788511e2baa888e8b8813d96cae5ca3aea81
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Sep 27 04:30:48 2019 -0500

    Shorthand for __VA_ARGS__

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index a9e23b5e18..4ae6a96713 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -52,16 +52,16 @@ template<typename T>
 class restorer {
   T& ref_;
   T  val_;
 public:
   restorer(T& perm) : ref_(perm), val_(perm) {}
   restorer(T& perm, T temp_val) : ref_(perm), val_(perm) { perm = temp_val; }
   ~restorer() { restore(); }
   inline void restore() { ref_ = val_; }
 };
 
-#define REMEMBER(N,X, ...) const restorer<typeof(X)> restorer_##N(X, ##__VA_ARGS__)
+#define REMEMBER(N,X,V...) const restorer<typeof(X)> restorer_##N(X, ##V)
 #define RESTORE(N) restorer_##N.restore()
 
 // Converts from an uint8_t in the range of 0-255 to an uint8_t
 // in the range 0-100 while avoiding rounding artifacts
 constexpr uint8_t ui8_to_percent(const uint8_t i) { return (int(i) * 100 + 127) / 255; }

commit fe6ba4fd70d1797f2084a66aefbe561ee620d5c7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Sep 10 01:47:26 2019 -0500

    Tweak REMEMBER

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 63597fd413..a9e23b5e18 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -52,16 +52,16 @@ template<typename T>
 class restorer {
   T& ref_;
   T  val_;
 public:
   restorer(T& perm) : ref_(perm), val_(perm) {}
   restorer(T& perm, T temp_val) : ref_(perm), val_(perm) { perm = temp_val; }
   ~restorer() { restore(); }
   inline void restore() { ref_ = val_; }
 };
 
-#define REMEMBER(N,X, ...) restorer<typeof(X)> restorer_##N(X, ##__VA_ARGS__)
+#define REMEMBER(N,X, ...) const restorer<typeof(X)> restorer_##N(X, ##__VA_ARGS__)
 #define RESTORE(N) restorer_##N.restore()
 
 // Converts from an uint8_t in the range of 0-255 to an uint8_t
 // in the range 0-100 while avoiding rounding artifacts
 constexpr uint8_t ui8_to_percent(const uint8_t i) { return (int(i) * 100 + 127) / 255; }

commit 0bcb64403c71e7443c9de6822e725add08d3e7c1
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Aug 30 16:09:57 2019 -0500

    Revert _BV testing commit
    
    This reverts commit 9223261ea93fc7dcb525325778ff302e611d1ea5.

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index c8614925eb..63597fd413 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -15,21 +15,20 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
-#include "../HAL/shared/Marduino.h"
 
 constexpr char axis_codes[XYZE] = { 'X', 'Y', 'Z', 'E' };
 
 // Delay that ensures heaters and watchdog are kept alive
 void safe_delay(millis_t ms);
 
 // A delay to provide brittle hosts time to receive bytes
 inline void serial_delay(const millis_t ms) {
   #if ENABLED(SERIAL_OVERRUN_PROTECTION)
     safe_delay(ms);

commit 9223261ea93fc7dcb525325778ff302e611d1ea5
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Aug 29 17:50:16 2019 -0500

    Only define _BV in Marduino.h

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 63597fd413..c8614925eb 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -15,20 +15,21 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
+#include "../HAL/shared/Marduino.h"
 
 constexpr char axis_codes[XYZE] = { 'X', 'Y', 'Z', 'E' };
 
 // Delay that ensures heaters and watchdog are kept alive
 void safe_delay(millis_t ms);
 
 // A delay to provide brittle hosts time to receive bytes
 inline void serial_delay(const millis_t ms) {
   #if ENABLED(SERIAL_OVERRUN_PROTECTION)
     safe_delay(ms);

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 2e226e2ba2..63597fd413 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -1,16 +1,16 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.

commit 356410dcfce70972f9cfbafd9c32a71701781640
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jun 11 07:41:54 2019 -0500

    Move crc16 function to libs

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index d27e742c98..2e226e2ba2 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -30,35 +30,24 @@ void safe_delay(millis_t ms);
 
 // A delay to provide brittle hosts time to receive bytes
 inline void serial_delay(const millis_t ms) {
   #if ENABLED(SERIAL_OVERRUN_PROTECTION)
     safe_delay(ms);
   #else
     UNUSED(ms);
   #endif
 }
 
-#if EITHER(EEPROM_SETTINGS, SD_FIRMWARE_UPDATE)
-  void crc16(uint16_t *crc, const void * const data, uint16_t cnt);
-#endif
-
-#if EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
-  /**
-   * These support functions allow the use of large bit arrays of flags that take very
-   * little RAM. Currently they are limited to being 16x16 in size. Changing the declaration
-   * to unsigned long will allow us to go to 32x32 if higher resolution Mesh's are needed
-   * in the future.
-   */
-  FORCE_INLINE void bitmap_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
-  FORCE_INLINE void bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
-  FORCE_INLINE bool is_bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
-#endif
+// 16x16 bit arrays
+FORCE_INLINE void bitmap_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
+FORCE_INLINE void bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
+FORCE_INLINE bool is_bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #else
   #define log_machine_info() NOOP
 #endif
 
 template<typename T>
 class restorer {
   T& ref_;
@@ -69,11 +58,10 @@ public:
   ~restorer() { restore(); }
   inline void restore() { ref_ = val_; }
 };
 
 #define REMEMBER(N,X, ...) restorer<typeof(X)> restorer_##N(X, ##__VA_ARGS__)
 #define RESTORE(N) restorer_##N.restore()
 
 // Converts from an uint8_t in the range of 0-255 to an uint8_t
 // in the range 0-100 while avoiding rounding artifacts
 constexpr uint8_t ui8_to_percent(const uint8_t i) { return (int(i) * 100 + 127) / 255; }
-constexpr uint8_t all_on = 0xFF, all_off = 0x00;

commit 2a96d4e23ad0090dc371710d079af731136dfe97
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jun 11 05:58:43 2019 -0500

    Move number-to-string functions to libs

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 8cfb43109f..d27e742c98 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -46,92 +46,20 @@ inline void serial_delay(const millis_t ms) {
    * These support functions allow the use of large bit arrays of flags that take very
    * little RAM. Currently they are limited to being 16x16 in size. Changing the declaration
    * to unsigned long will allow us to go to 32x32 if higher resolution Mesh's are needed
    * in the future.
    */
   FORCE_INLINE void bitmap_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
   FORCE_INLINE void bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
   FORCE_INLINE bool is_bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
 #endif
 
-#if ANY(ULTRA_LCD, DEBUG_LEVELING_FEATURE, EXTENSIBLE_UI)
-
-  // Convert a full-range unsigned 8bit int to a percentage
-  char* ui8tostr4pct(const uint8_t i);
-
-  // Convert uint8_t to string with 123 format
-  char* ui8tostr3(const uint8_t x);
-
-  // Convert int8_t to string with 123 format
-  char* i8tostr3(const int8_t x);
-
-  // Convert uint16_t to string with 123 format
-  char* ui16tostr3(const uint16_t x);
-
-  // Convert uint16_t to string with 1234 format
-  char* ui16tostr4(const uint16_t x);
-
-  // Convert int16_t to string with 123 format
-  char* i16tostr3(const int16_t x);
-
-  // Convert unsigned int to lj string with 123 format
-  char* i16tostr3left(const int16_t xx);
-
-  // Convert signed int to rj string with _123, -123, _-12, or __-1 format
-  char* i16tostr4sign(const int16_t x);
-
-  // Convert unsigned float to string with 1.23 format
-  char* ftostr12ns(const float &x);
-
-  // Convert signed float to fixed-length string with 12.34 / -2.34 or 023.45 / -23.45 format
-  char* ftostr42_52(const float &x);
-
-  // Convert signed float to fixed-length string with 023.45 / -23.45 format
-  char* ftostr52(const float &x);
-
-  // Convert float to fixed-length string with +123.4 / -123.4 format
-  char* ftostr41sign(const float &x);
-
-  // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
-  char* ftostr43sign(const float &x, char plus=' ');
-
-  // Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format
-  char* ftostr54sign(const float &x, char plus=' ');
-
-  // Convert unsigned float to rj string with 12345 format
-  char* ftostr5rj(const float &x);
-
-  // Convert signed float to string with +1234.5 format
-  char* ftostr51sign(const float &x);
-
-  // Convert signed float to space-padded string with -_23.4_ format
-  char* ftostr52sp(const float &x);
-
-  // Convert signed float to string with +123.45 format
-  char* ftostr52sign(const float &x);
-
-  // Convert unsigned float to string with 1234.5 format omitting trailing zeros
-  char* ftostr51rj(const float &x);
-
-  // Convert float to rj string with 123 or -12 format
-  FORCE_INLINE char* ftostr3(const float &x) { return i16tostr3(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
-
-  #if ENABLED(LCD_DECIMAL_SMALL_XY)
-    // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
-    char* ftostr4sign(const float &fx);
-  #else
-    // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
-    FORCE_INLINE char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
-  #endif
-
-#endif // ULTRA_LCD
-
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #else
   #define log_machine_info() NOOP
 #endif
 
 template<typename T>
 class restorer {
   T& ref_;
   T  val_;

commit 44caf70917d249b6175ef671d9659d408d1dde08
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat May 25 15:24:26 2019 -0500

    Improve editing, fix some small value editing

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index c04524f672..8cfb43109f 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -75,20 +75,23 @@ inline void serial_delay(const millis_t ms) {
 
   // Convert unsigned int to lj string with 123 format
   char* i16tostr3left(const int16_t xx);
 
   // Convert signed int to rj string with _123, -123, _-12, or __-1 format
   char* i16tostr4sign(const int16_t x);
 
   // Convert unsigned float to string with 1.23 format
   char* ftostr12ns(const float &x);
 
+  // Convert signed float to fixed-length string with 12.34 / -2.34 or 023.45 / -23.45 format
+  char* ftostr42_52(const float &x);
+
   // Convert signed float to fixed-length string with 023.45 / -23.45 format
   char* ftostr52(const float &x);
 
   // Convert float to fixed-length string with +123.4 / -123.4 format
   char* ftostr41sign(const float &x);
 
   // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
   char* ftostr43sign(const float &x, char plus=' ');
 
   // Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format

commit 866e2d41dca277a1913a7e505a3d07d6d10f7ce3
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Tue Apr 16 14:45:31 2019 -0600

    Correct range of LCD axis step editing (#13727)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 48f775b529..c04524f672 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -99,22 +99,22 @@ inline void serial_delay(const millis_t ms) {
 
   // Convert signed float to string with +1234.5 format
   char* ftostr51sign(const float &x);
 
   // Convert signed float to space-padded string with -_23.4_ format
   char* ftostr52sp(const float &x);
 
   // Convert signed float to string with +123.45 format
   char* ftostr52sign(const float &x);
 
-  // Convert unsigned float to string with 1234.56 format omitting trailing zeros
-  char* ftostr62rj(const float &x);
+  // Convert unsigned float to string with 1234.5 format omitting trailing zeros
+  char* ftostr51rj(const float &x);
 
   // Convert float to rj string with 123 or -12 format
   FORCE_INLINE char* ftostr3(const float &x) { return i16tostr3(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 
   #if ENABLED(LCD_DECIMAL_SMALL_XY)
     // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
     char* ftostr4sign(const float &fx);
   #else
     // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
     FORCE_INLINE char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }

commit 9cb5c57b844bde807d111238443f494788dc4ee2
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 8 21:47:23 2019 -0500

    Adjustments to ui8tostr_percent

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 1ea4c4b0a3..48f775b529 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -49,21 +49,21 @@ inline void serial_delay(const millis_t ms) {
    * in the future.
    */
   FORCE_INLINE void bitmap_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
   FORCE_INLINE void bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
   FORCE_INLINE bool is_bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
 #endif
 
 #if ANY(ULTRA_LCD, DEBUG_LEVELING_FEATURE, EXTENSIBLE_UI)
 
   // Convert a full-range unsigned 8bit int to a percentage
-  char* ui8tostr_percent(const uint8_t i);
+  char* ui8tostr4pct(const uint8_t i);
 
   // Convert uint8_t to string with 123 format
   char* ui8tostr3(const uint8_t x);
 
   // Convert int8_t to string with 123 format
   char* i8tostr3(const int8_t x);
 
   // Convert uint16_t to string with 123 format
   char* ui16tostr3(const uint16_t x);
 

commit 9cee81d47eea0c8700e265f10f103ca99499511f
Author: Roxy-3D <Roxy-3D@users.noreply.github.com>
Date:   Sat Apr 6 18:04:34 2019 -0500

    Option to show babysteps total since G28 (#13580)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 37e9c9e2e1..1ea4c4b0a3 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -84,20 +84,23 @@ inline void serial_delay(const millis_t ms) {
 
   // Convert signed float to fixed-length string with 023.45 / -23.45 format
   char* ftostr52(const float &x);
 
   // Convert float to fixed-length string with +123.4 / -123.4 format
   char* ftostr41sign(const float &x);
 
   // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
   char* ftostr43sign(const float &x, char plus=' ');
 
+  // Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format
+  char* ftostr54sign(const float &x, char plus=' ');
+
   // Convert unsigned float to rj string with 12345 format
   char* ftostr5rj(const float &x);
 
   // Convert signed float to string with +1234.5 format
   char* ftostr51sign(const float &x);
 
   // Convert signed float to space-padded string with -_23.4_ format
   char* ftostr52sp(const float &x);
 
   // Convert signed float to string with +123.45 format

commit 5679fae11efbc7e8b9de2f0e68dc9a879757ff88
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Fri Mar 29 13:07:43 2019 -0600

    UltraLCD enhancements (lower fan resolution, backlash menu) (#13519)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 402ed5cd67..37e9c9e2e1 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -48,20 +48,23 @@ inline void serial_delay(const millis_t ms) {
    * to unsigned long will allow us to go to 32x32 if higher resolution Mesh's are needed
    * in the future.
    */
   FORCE_INLINE void bitmap_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
   FORCE_INLINE void bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
   FORCE_INLINE bool is_bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
 #endif
 
 #if ANY(ULTRA_LCD, DEBUG_LEVELING_FEATURE, EXTENSIBLE_UI)
 
+  // Convert a full-range unsigned 8bit int to a percentage
+  char* ui8tostr_percent(const uint8_t i);
+
   // Convert uint8_t to string with 123 format
   char* ui8tostr3(const uint8_t x);
 
   // Convert int8_t to string with 123 format
   char* i8tostr3(const int8_t x);
 
   // Convert uint16_t to string with 123 format
   char* ui16tostr3(const uint16_t x);
 
   // Convert uint16_t to string with 1234 format
@@ -128,10 +131,15 @@ class restorer {
   T  val_;
 public:
   restorer(T& perm) : ref_(perm), val_(perm) {}
   restorer(T& perm, T temp_val) : ref_(perm), val_(perm) { perm = temp_val; }
   ~restorer() { restore(); }
   inline void restore() { ref_ = val_; }
 };
 
 #define REMEMBER(N,X, ...) restorer<typeof(X)> restorer_##N(X, ##__VA_ARGS__)
 #define RESTORE(N) restorer_##N.restore()
+
+// Converts from an uint8_t in the range of 0-255 to an uint8_t
+// in the range 0-100 while avoiding rounding artifacts
+constexpr uint8_t ui8_to_percent(const uint8_t i) { return (int(i) * 100 + 127) / 255; }
+constexpr uint8_t all_on = 0xFF, all_off = 0x00;

commit 49cf92dc36424cf828436f32e72263eca39a1cc3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 16 23:43:06 2019 -0500

    Extended condition macros (#13419)
    
    Allow `ENABLED`, `DISABLED`, `PIN_EXISTS`, and `BUTTON_EXISTS` to take multiple arguments. Also add:
    - Alias `ANY(...)` for `!DISABLED(...)`
    - Alias `ANY_PIN(...)` for `PIN_EXISTS(a) || PIN_EXISTS(b) ...`
    - Alias `EITHER(A,B)` for `ANY(...)`
    - Alias `ALL(...)` and `BOTH(A,B)` for `ENABLED(...)`
    - `NONE(...)` for `DISABLED(...)`

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 5e11a5f9f1..402ed5cd67 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -30,37 +30,37 @@ void safe_delay(millis_t ms);
 
 // A delay to provide brittle hosts time to receive bytes
 inline void serial_delay(const millis_t ms) {
   #if ENABLED(SERIAL_OVERRUN_PROTECTION)
     safe_delay(ms);
   #else
     UNUSED(ms);
   #endif
 }
 
-#if ENABLED(EEPROM_SETTINGS) || ENABLED(SD_FIRMWARE_UPDATE)
+#if EITHER(EEPROM_SETTINGS, SD_FIRMWARE_UPDATE)
   void crc16(uint16_t *crc, const void * const data, uint16_t cnt);
 #endif
 
-#if ENABLED(AUTO_BED_LEVELING_UBL) || ENABLED(G26_MESH_VALIDATION)
+#if EITHER(AUTO_BED_LEVELING_UBL, G26_MESH_VALIDATION)
   /**
    * These support functions allow the use of large bit arrays of flags that take very
    * little RAM. Currently they are limited to being 16x16 in size. Changing the declaration
    * to unsigned long will allow us to go to 32x32 if higher resolution Mesh's are needed
    * in the future.
    */
   FORCE_INLINE void bitmap_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
   FORCE_INLINE void bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
   FORCE_INLINE bool is_bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
 #endif
 
-#if ENABLED(ULTRA_LCD) || ENABLED(DEBUG_LEVELING_FEATURE) || ENABLED(EXTENSIBLE_UI)
+#if ANY(ULTRA_LCD, DEBUG_LEVELING_FEATURE, EXTENSIBLE_UI)
 
   // Convert uint8_t to string with 123 format
   char* ui8tostr3(const uint8_t x);
 
   // Convert int8_t to string with 123 format
   char* i8tostr3(const int8_t x);
 
   // Convert uint16_t to string with 123 format
   char* ui16tostr3(const uint16_t x);
 

commit f5bcc00570bd5ae2ba0deaa7af0ba4d3ce7c3b02
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Mar 14 02:25:42 2019 -0500

    Unify debugging output with debug_out.h (#13388)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 46dcd5af69..5e11a5f9f1 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -111,20 +111,22 @@ inline void serial_delay(const millis_t ms) {
     char* ftostr4sign(const float &fx);
   #else
     // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
     FORCE_INLINE char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
   #endif
 
 #endif // ULTRA_LCD
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
+#else
+  #define log_machine_info() NOOP
 #endif
 
 template<typename T>
 class restorer {
   T& ref_;
   T  val_;
 public:
   restorer(T& perm) : ref_(perm), val_(perm) {}
   restorer(T& perm, T temp_val) : ref_(perm), val_(perm) { perm = temp_val; }
   ~restorer() { restore(); }

commit fa236e9718cd2feb85a1986b8f56ad97cd2f4871
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Mar 1 19:29:48 2019 -0600

    General cleanup ahead of L64XX

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 3a24608eb9..46dcd5af69 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -113,22 +113,20 @@ inline void serial_delay(const millis_t ms) {
     // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
     FORCE_INLINE char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
   #endif
 
 #endif // ULTRA_LCD
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #endif
 
-void print_bin(const uint16_t val);
-
 template<typename T>
 class restorer {
   T& ref_;
   T  val_;
 public:
   restorer(T& perm) : ref_(perm), val_(perm) {}
   restorer(T& perm, T temp_val) : ref_(perm), val_(perm) { perm = temp_val; }
   ~restorer() { restore(); }
   inline void restore() { ref_ = val_; }
 };

commit e15354e387cc825390fc4eaaf3ae4b784a8fd588
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 23 22:53:01 2019 -0600

    Simplify serial port redirect (#13234)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 15c9264cf4..3a24608eb9 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -126,12 +126,12 @@ template<typename T>
 class restorer {
   T& ref_;
   T  val_;
 public:
   restorer(T& perm) : ref_(perm), val_(perm) {}
   restorer(T& perm, T temp_val) : ref_(perm), val_(perm) { perm = temp_val; }
   ~restorer() { restore(); }
   inline void restore() { ref_ = val_; }
 };
 
-#define REMEMBER(N,X, ...) restorer<typeof(X)> N##_restorer(X, ##__VA_ARGS__)
-#define RESTORE(N) N##_restorer.restore()
+#define REMEMBER(N,X, ...) restorer<typeof(X)> restorer_##N(X, ##__VA_ARGS__)
+#define RESTORE(N) restorer_##N.restore()

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index f37b0e2281..15c9264cf4 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -1,13 +1,13 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,

commit e1604198ffa550f1eed2b8f5d39d51fdc0c2762f
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Wed Feb 6 16:20:17 2019 -0700

    G425 ‚Äî Auto-calibrate Backlash and Nozzle Offsets (#13050)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index b8e2ffa38f..f37b0e2281 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -121,16 +121,17 @@ inline void serial_delay(const millis_t ms) {
 #endif
 
 void print_bin(const uint16_t val);
 
 template<typename T>
 class restorer {
   T& ref_;
   T  val_;
 public:
   restorer(T& perm) : ref_(perm), val_(perm) {}
+  restorer(T& perm, T temp_val) : ref_(perm), val_(perm) { perm = temp_val; }
   ~restorer() { restore(); }
   inline void restore() { ref_ = val_; }
 };
 
-#define REMEMBER(X) restorer<typeof(X)> X##_restorer(X)
-#define RESTORE(X) X##_restorer.restore()
+#define REMEMBER(N,X, ...) restorer<typeof(X)> N##_restorer(X, ##__VA_ARGS__)
+#define RESTORE(N) N##_restorer.restore()

commit fdb97a3e9cf598d7fe8fee01fd5fce798f837879
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 4 02:15:20 2019 -0600

    Add class and macro to save and auto-restore a variable

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index b59500f0ca..b8e2ffa38f 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -114,10 +114,23 @@ inline void serial_delay(const millis_t ms) {
     FORCE_INLINE char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
   #endif
 
 #endif // ULTRA_LCD
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #endif
 
 void print_bin(const uint16_t val);
+
+template<typename T>
+class restorer {
+  T& ref_;
+  T  val_;
+public:
+  restorer(T& perm) : ref_(perm), val_(perm) {}
+  ~restorer() { restore(); }
+  inline void restore() { ref_ = val_; }
+};
+
+#define REMEMBER(X) restorer<typeof(X)> X##_restorer(X)
+#define RESTORE(X) X##_restorer.restore()

commit 2f35747f294c4b3dc3e6920b34e208f89bd4841d
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Wed Jan 23 19:06:54 2019 -0600

    L6470 SPI daisy chain support (#12895)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index f4944299a6..b59500f0ca 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -112,10 +112,12 @@ inline void serial_delay(const millis_t ms) {
   #else
     // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
     FORCE_INLINE char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
   #endif
 
 #endif // ULTRA_LCD
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #endif
+
+void print_bin(const uint16_t val);

commit eb78aed863cf20cc02f07b8c3e47d27ae4ed91dd
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 12 16:01:04 2019 -0600

    Rename LCD menus according to variable types (#12892)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index da3a065eaf..f4944299a6 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -49,30 +49,39 @@ inline void serial_delay(const millis_t ms) {
    * in the future.
    */
   FORCE_INLINE void bitmap_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
   FORCE_INLINE void bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
   FORCE_INLINE bool is_bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
 #endif
 
 #if ENABLED(ULTRA_LCD) || ENABLED(DEBUG_LEVELING_FEATURE) || ENABLED(EXTENSIBLE_UI)
 
   // Convert uint8_t to string with 123 format
-  char* i8tostr3(const uint8_t x);
+  char* ui8tostr3(const uint8_t x);
 
-  // Convert signed int to rj string with 123 or -12 format
-  char* itostr3(const int x);
+  // Convert int8_t to string with 123 format
+  char* i8tostr3(const int8_t x);
+
+  // Convert uint16_t to string with 123 format
+  char* ui16tostr3(const uint16_t x);
+
+  // Convert uint16_t to string with 1234 format
+  char* ui16tostr4(const uint16_t x);
+
+  // Convert int16_t to string with 123 format
+  char* i16tostr3(const int16_t x);
 
   // Convert unsigned int to lj string with 123 format
-  char* itostr3left(const int xx);
+  char* i16tostr3left(const int16_t xx);
 
   // Convert signed int to rj string with _123, -123, _-12, or __-1 format
-  char* itostr4sign(const int x);
+  char* i16tostr4sign(const int16_t x);
 
   // Convert unsigned float to string with 1.23 format
   char* ftostr12ns(const float &x);
 
   // Convert signed float to fixed-length string with 023.45 / -23.45 format
   char* ftostr52(const float &x);
 
   // Convert float to fixed-length string with +123.4 / -123.4 format
   char* ftostr41sign(const float &x);
 
@@ -88,25 +97,25 @@ inline void serial_delay(const millis_t ms) {
   // Convert signed float to space-padded string with -_23.4_ format
   char* ftostr52sp(const float &x);
 
   // Convert signed float to string with +123.45 format
   char* ftostr52sign(const float &x);
 
   // Convert unsigned float to string with 1234.56 format omitting trailing zeros
   char* ftostr62rj(const float &x);
 
   // Convert float to rj string with 123 or -12 format
-  FORCE_INLINE char* ftostr3(const float &x) { return itostr3(int(x + (x < 0 ? -0.5f : 0.5f))); }
+  FORCE_INLINE char* ftostr3(const float &x) { return i16tostr3(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
 
   #if ENABLED(LCD_DECIMAL_SMALL_XY)
     // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
     char* ftostr4sign(const float &fx);
   #else
     // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
-    FORCE_INLINE char* ftostr4sign(const float &x) { return itostr4sign(int(x + (x < 0 ? -0.5f : 0.5f))); }
+    FORCE_INLINE char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
   #endif
 
 #endif // ULTRA_LCD
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #endif

commit 1fcc13b01162c2a59fcb4867cab4256a7bf6a42e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Nov 23 21:05:59 2018 -0600

    Allow Serial Overrun Protection to be disabled

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 324028a96f..da3a065eaf 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -18,22 +18,32 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
 
 constexpr char axis_codes[XYZE] = { 'X', 'Y', 'Z', 'E' };
 
+// Delay that ensures heaters and watchdog are kept alive
 void safe_delay(millis_t ms);
 
+// A delay to provide brittle hosts time to receive bytes
+inline void serial_delay(const millis_t ms) {
+  #if ENABLED(SERIAL_OVERRUN_PROTECTION)
+    safe_delay(ms);
+  #else
+    UNUSED(ms);
+  #endif
+}
+
 #if ENABLED(EEPROM_SETTINGS) || ENABLED(SD_FIRMWARE_UPDATE)
   void crc16(uint16_t *crc, const void * const data, uint16_t cnt);
 #endif
 
 #if ENABLED(AUTO_BED_LEVELING_UBL) || ENABLED(G26_MESH_VALIDATION)
   /**
    * These support functions allow the use of large bit arrays of flags that take very
    * little RAM. Currently they are limited to being 16x16 in size. Changing the declaration
    * to unsigned long will allow us to go to 32x32 if higher resolution Mesh's are needed
    * in the future.

commit 22d7fed60aa72937786e88196854c5983c98501d
Author: Ludy <Ludy87@users.noreply.github.com>
Date:   Sun Nov 18 04:13:36 2018 +0100

    Fix compile error with SD_FIRMWARE_UPDATE (#12462)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 8122c3b5ad..324028a96f 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -20,21 +20,21 @@
  *
  */
 #pragma once
 
 #include "../inc/MarlinConfigPre.h"
 
 constexpr char axis_codes[XYZE] = { 'X', 'Y', 'Z', 'E' };
 
 void safe_delay(millis_t ms);
 
-#if ENABLED(EEPROM_SETTINGS)
+#if ENABLED(EEPROM_SETTINGS) || ENABLED(SD_FIRMWARE_UPDATE)
   void crc16(uint16_t *crc, const void * const data, uint16_t cnt);
 #endif
 
 #if ENABLED(AUTO_BED_LEVELING_UBL) || ENABLED(G26_MESH_VALIDATION)
   /**
    * These support functions allow the use of large bit arrays of flags that take very
    * little RAM. Currently they are limited to being 16x16 in size. Changing the declaration
    * to unsigned long will allow us to go to 32x32 if higher resolution Mesh's are needed
    * in the future.
    */

commit f5eab912ed6d336f2c37a688a0ec822ed3d42fcc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 4 02:25:55 2018 -0600

    Apply #pragma once, misc cleanup (#12322)
    
    * Apply #pragma once in headers
    * Adjust some thermistors formatting
    * Misc cleanup and formatting

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 05ba721def..8122c3b5ad 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -12,23 +12,21 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
-
-#ifndef __UTILITY_H__
-#define __UTILITY_H__
+#pragma once
 
 #include "../inc/MarlinConfigPre.h"
 
 constexpr char axis_codes[XYZE] = { 'X', 'Y', 'Z', 'E' };
 
 void safe_delay(millis_t ms);
 
 #if ENABLED(EEPROM_SETTINGS)
   void crc16(uint16_t *crc, const void * const data, uint16_t cnt);
 #endif
@@ -95,12 +93,10 @@ void safe_delay(millis_t ms);
   #else
     // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
     FORCE_INLINE char* ftostr4sign(const float &x) { return itostr4sign(int(x + (x < 0 ? -0.5f : 0.5f))); }
   #endif
 
 #endif // ULTRA_LCD
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #endif
-
-#endif // __UTILITY_H__

commit f98f4ac7eaab5f509da5cd94420821f23fe7aeea
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Tue Oct 16 15:58:29 2018 -0600

    Fix and improve EXTENSIBLE_UI (#12117)
    
    - Add methods to access print counter data
    - Clean up some inconsistent method names
    - Clear lcd status after filament change
    - Implement `lcd_reset_status` so it works like UltraLCD

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index f4f2e7cf80..05ba721def 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -38,21 +38,21 @@ void safe_delay(millis_t ms);
    * These support functions allow the use of large bit arrays of flags that take very
    * little RAM. Currently they are limited to being 16x16 in size. Changing the declaration
    * to unsigned long will allow us to go to 32x32 if higher resolution Mesh's are needed
    * in the future.
    */
   FORCE_INLINE void bitmap_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
   FORCE_INLINE void bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
   FORCE_INLINE bool is_bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
 #endif
 
-#if ENABLED(ULTRA_LCD) || ENABLED(DEBUG_LEVELING_FEATURE)
+#if ENABLED(ULTRA_LCD) || ENABLED(DEBUG_LEVELING_FEATURE) || ENABLED(EXTENSIBLE_UI)
 
   // Convert uint8_t to string with 123 format
   char* i8tostr3(const uint8_t x);
 
   // Convert signed int to rj string with 123 or -12 format
   char* itostr3(const int x);
 
   // Convert unsigned int to lj string with 123 format
   char* itostr3left(const int xx);
 

commit 1367df2875b4aff41e9c98824e3f7b56f4403e4d
Author: etagle <ejtagle@hotmail.com>
Date:   Sun Jul 1 17:20:28 2018 -0300

    Replace double with float, optimize calculation

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 4f0477884f..f4f2e7cf80 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -80,27 +80,27 @@ void safe_delay(millis_t ms);
   // Convert signed float to space-padded string with -_23.4_ format
   char* ftostr52sp(const float &x);
 
   // Convert signed float to string with +123.45 format
   char* ftostr52sign(const float &x);
 
   // Convert unsigned float to string with 1234.56 format omitting trailing zeros
   char* ftostr62rj(const float &x);
 
   // Convert float to rj string with 123 or -12 format
-  FORCE_INLINE char* ftostr3(const float &x) { return itostr3(int(x + (x < 0 ? -0.5 : 0.5))); }
+  FORCE_INLINE char* ftostr3(const float &x) { return itostr3(int(x + (x < 0 ? -0.5f : 0.5f))); }
 
   #if ENABLED(LCD_DECIMAL_SMALL_XY)
     // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
     char* ftostr4sign(const float &fx);
   #else
     // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
-    FORCE_INLINE char* ftostr4sign(const float &x) { return itostr4sign(int(x + (x < 0 ? -0.5 : 0.5))); }
+    FORCE_INLINE char* ftostr4sign(const float &x) { return itostr4sign(int(x + (x < 0 ? -0.5f : 0.5f))); }
   #endif
 
 #endif // ULTRA_LCD
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #endif
 
 #endif // __UTILITY_H__

commit a90d99c27c0a52f7232ce23e2f250798c53e1b34
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 1 07:08:47 2018 -0500

    Rename float32 => float52, etc.

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 287c7adc55..4f0477884f 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -56,21 +56,21 @@ void safe_delay(millis_t ms);
   // Convert unsigned int to lj string with 123 format
   char* itostr3left(const int xx);
 
   // Convert signed int to rj string with _123, -123, _-12, or __-1 format
   char* itostr4sign(const int x);
 
   // Convert unsigned float to string with 1.23 format
   char* ftostr12ns(const float &x);
 
   // Convert signed float to fixed-length string with 023.45 / -23.45 format
-  char* ftostr32(const float &x);
+  char* ftostr52(const float &x);
 
   // Convert float to fixed-length string with +123.4 / -123.4 format
   char* ftostr41sign(const float &x);
 
   // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
   char* ftostr43sign(const float &x, char plus=' ');
 
   // Convert unsigned float to rj string with 12345 format
   char* ftostr5rj(const float &x);
 

commit 63e4afc9105301ed33c8e2c85e02893da0456b1c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 29 19:14:18 2018 -0500

    Do rounding in integer (instead of FIXFLOAT)
    
    Co-Authored-By: Bob-the-Kuhn <bob-the-kuhn@users.noreply.github.com>

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 707c9eb1d9..287c7adc55 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -80,27 +80,27 @@ void safe_delay(millis_t ms);
   // Convert signed float to space-padded string with -_23.4_ format
   char* ftostr52sp(const float &x);
 
   // Convert signed float to string with +123.45 format
   char* ftostr52sign(const float &x);
 
   // Convert unsigned float to string with 1234.56 format omitting trailing zeros
   char* ftostr62rj(const float &x);
 
   // Convert float to rj string with 123 or -12 format
-  FORCE_INLINE char* ftostr3(const float &x) { return itostr3(int(FIXFLOAT(x))); }
+  FORCE_INLINE char* ftostr3(const float &x) { return itostr3(int(x + (x < 0 ? -0.5 : 0.5))); }
 
   #if ENABLED(LCD_DECIMAL_SMALL_XY)
     // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
     char* ftostr4sign(const float &fx);
   #else
     // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
-    FORCE_INLINE char* ftostr4sign(const float &x) { return itostr4sign(int(FIXFLOAT(x))); }
+    FORCE_INLINE char* ftostr4sign(const float &x) { return itostr4sign(int(x + (x < 0 ? -0.5 : 0.5))); }
   #endif
 
 #endif // ULTRA_LCD
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #endif
 
 #endif // __UTILITY_H__

commit 9e0d99c0c61686b55347678633a44ff7ce680158
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 29 00:51:36 2018 -0500

    Round all floats in string conversion functions (#10566)

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 56931a7a0c..707c9eb1d9 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -50,21 +50,21 @@ void safe_delay(millis_t ms);
   // Convert uint8_t to string with 123 format
   char* i8tostr3(const uint8_t x);
 
   // Convert signed int to rj string with 123 or -12 format
   char* itostr3(const int x);
 
   // Convert unsigned int to lj string with 123 format
   char* itostr3left(const int xx);
 
   // Convert signed int to rj string with _123, -123, _-12, or __-1 format
-  char *itostr4sign(const int x);
+  char* itostr4sign(const int x);
 
   // Convert unsigned float to string with 1.23 format
   char* ftostr12ns(const float &x);
 
   // Convert signed float to fixed-length string with 023.45 / -23.45 format
   char* ftostr32(const float &x);
 
   // Convert float to fixed-length string with +123.4 / -123.4 format
   char* ftostr41sign(const float &x);
 
@@ -80,27 +80,27 @@ void safe_delay(millis_t ms);
   // Convert signed float to space-padded string with -_23.4_ format
   char* ftostr52sp(const float &x);
 
   // Convert signed float to string with +123.45 format
   char* ftostr52sign(const float &x);
 
   // Convert unsigned float to string with 1234.56 format omitting trailing zeros
   char* ftostr62rj(const float &x);
 
   // Convert float to rj string with 123 or -12 format
-  FORCE_INLINE char *ftostr3(const float &x) { return itostr3((int)x); }
+  FORCE_INLINE char* ftostr3(const float &x) { return itostr3(int(FIXFLOAT(x))); }
 
   #if ENABLED(LCD_DECIMAL_SMALL_XY)
     // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
-    char *ftostr4sign(const float &fx);
+    char* ftostr4sign(const float &fx);
   #else
     // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
-    FORCE_INLINE char *ftostr4sign(const float &x) { return itostr4sign((int)x); }
+    FORCE_INLINE char* ftostr4sign(const float &x) { return itostr4sign(int(FIXFLOAT(x))); }
   #endif
 
 #endif // ULTRA_LCD
 
 #if ENABLED(DEBUG_LEVELING_FEATURE)
   void log_machine_info();
 #endif
 
 #endif // __UTILITY_H__

commit 8a6feab1c405e975a71219faf052f73e0036906e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 5 19:08:27 2018 -0600

    Num-to-string functions for DEBUG_LEVELING_FEATURE

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 93d97b3e5d..56931a7a0c 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -38,21 +38,21 @@ void safe_delay(millis_t ms);
    * These support functions allow the use of large bit arrays of flags that take very
    * little RAM. Currently they are limited to being 16x16 in size. Changing the declaration
    * to unsigned long will allow us to go to 32x32 if higher resolution Mesh's are needed
    * in the future.
    */
   FORCE_INLINE void bitmap_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
   FORCE_INLINE void bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
   FORCE_INLINE bool is_bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
 #endif
 
-#if ENABLED(ULTRA_LCD)
+#if ENABLED(ULTRA_LCD) || ENABLED(DEBUG_LEVELING_FEATURE)
 
   // Convert uint8_t to string with 123 format
   char* i8tostr3(const uint8_t x);
 
   // Convert signed int to rj string with 123 or -12 format
   char* itostr3(const int x);
 
   // Convert unsigned int to lj string with 123 format
   char* itostr3left(const int xx);
 

commit e48fcad615092e34ae0dcf2e08753fb03f525b8f
Author: Roxy-3D <Roxanne.Rae.Neufeld@gmail.com>
Date:   Sat Nov 25 19:35:27 2017 -0600

    change G26 and G29 bit function names to avoid HAL collision

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 7717478085..93d97b3e5d 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -33,23 +33,23 @@ void safe_delay(millis_t ms);
   void crc16(uint16_t *crc, const void * const data, uint16_t cnt);
 #endif
 
 #if ENABLED(AUTO_BED_LEVELING_UBL) || ENABLED(G26_MESH_VALIDATION)
   /**
    * These support functions allow the use of large bit arrays of flags that take very
    * little RAM. Currently they are limited to being 16x16 in size. Changing the declaration
    * to unsigned long will allow us to go to 32x32 if higher resolution Mesh's are needed
    * in the future.
    */
-  FORCE_INLINE void bit_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
-  FORCE_INLINE void bit_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
-  FORCE_INLINE bool is_bit_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
+  FORCE_INLINE void bitmap_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
+  FORCE_INLINE void bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
+  FORCE_INLINE bool is_bitmap_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
 #endif
 
 #if ENABLED(ULTRA_LCD)
 
   // Convert uint8_t to string with 123 format
   char* i8tostr3(const uint8_t x);
 
   // Convert signed int to rj string with 123 or -12 format
   char* itostr3(const int x);
 

commit c6b0c104bbab04d4d59c4f3f8fddb728e9b99603
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Nov 23 17:59:43 2017 -0600

    Adapt G26 to work for all meshes

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 5ad9f11d9b..7717478085 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -16,30 +16,42 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 #ifndef __UTILITY_H__
 #define __UTILITY_H__
 
-#include "../inc/MarlinConfig.h"
+#include "../inc/MarlinConfigPre.h"
 
 constexpr char axis_codes[XYZE] = { 'X', 'Y', 'Z', 'E' };
 
 void safe_delay(millis_t ms);
 
 #if ENABLED(EEPROM_SETTINGS)
   void crc16(uint16_t *crc, const void * const data, uint16_t cnt);
 #endif
 
+#if ENABLED(AUTO_BED_LEVELING_UBL) || ENABLED(G26_MESH_VALIDATION)
+  /**
+   * These support functions allow the use of large bit arrays of flags that take very
+   * little RAM. Currently they are limited to being 16x16 in size. Changing the declaration
+   * to unsigned long will allow us to go to 32x32 if higher resolution Mesh's are needed
+   * in the future.
+   */
+  FORCE_INLINE void bit_clear(uint16_t bits[16], const uint8_t x, const uint8_t y)  { CBI(bits[y], x); }
+  FORCE_INLINE void bit_set(uint16_t bits[16], const uint8_t x, const uint8_t y)    { SBI(bits[y], x); }
+  FORCE_INLINE bool is_bit_set(uint16_t bits[16], const uint8_t x, const uint8_t y) { return TEST(bits[y], x); }
+#endif
+
 #if ENABLED(ULTRA_LCD)
 
   // Convert uint8_t to string with 123 format
   char* i8tostr3(const uint8_t x);
 
   // Convert signed int to rj string with 123 or -12 format
   char* itostr3(const int x);
 
   // Convert unsigned int to lj string with 123 format
   char* itostr3left(const int xx);

commit 722786966ad284a708502d18ac5daad02012bfc8
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Sep 7 22:33:16 2017 -0500

    Add gcode.cpp, motion.*, queue.* - Apply to some G-codes.

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 45679d2cab..5ad9f11d9b 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -18,20 +18,22 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 #ifndef __UTILITY_H__
 #define __UTILITY_H__
 
 #include "../inc/MarlinConfig.h"
 
+constexpr char axis_codes[XYZE] = { 'X', 'Y', 'Z', 'E' };
+
 void safe_delay(millis_t ms);
 
 #if ENABLED(EEPROM_SETTINGS)
   void crc16(uint16_t *crc, const void * const data, uint16_t cnt);
 #endif
 
 #if ENABLED(ULTRA_LCD)
 
   // Convert uint8_t to string with 123 format
   char* i8tostr3(const uint8_t x);

commit f52a31a27517eaf5773f6ab443596e29c573f6e7
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Sep 6 06:28:32 2017 -0500

    Core updates

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
index 426c5837cd..45679d2cab 100644
--- a/Marlin/src/core/utility.h
+++ b/Marlin/src/core/utility.h
@@ -16,20 +16,22 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 #ifndef __UTILITY_H__
 #define __UTILITY_H__
 
+#include "../inc/MarlinConfig.h"
+
 void safe_delay(millis_t ms);
 
 #if ENABLED(EEPROM_SETTINGS)
   void crc16(uint16_t *crc, const void * const data, uint16_t cnt);
 #endif
 
 #if ENABLED(ULTRA_LCD)
 
   // Convert uint8_t to string with 123 format
   char* i8tostr3(const uint8_t x);
@@ -76,11 +78,15 @@ void safe_delay(millis_t ms);
   #if ENABLED(LCD_DECIMAL_SMALL_XY)
     // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
     char *ftostr4sign(const float &fx);
   #else
     // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
     FORCE_INLINE char *ftostr4sign(const float &x) { return itostr4sign((int)x); }
   #endif
 
 #endif // ULTRA_LCD
 
+#if ENABLED(DEBUG_LEVELING_FEATURE)
+  void log_machine_info();
+#endif
+
 #endif // __UTILITY_H__

commit 4e4d16c92ecca1f92efdce3c8da2d62d4df1cf84
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Sep 6 06:28:30 2017 -0500

    Move 'core' files

diff --git a/Marlin/src/core/utility.h b/Marlin/src/core/utility.h
new file mode 100644
index 0000000000..426c5837cd
--- /dev/null
+++ b/Marlin/src/core/utility.h
@@ -0,0 +1,86 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef __UTILITY_H__
+#define __UTILITY_H__
+
+void safe_delay(millis_t ms);
+
+#if ENABLED(EEPROM_SETTINGS)
+  void crc16(uint16_t *crc, const void * const data, uint16_t cnt);
+#endif
+
+#if ENABLED(ULTRA_LCD)
+
+  // Convert uint8_t to string with 123 format
+  char* i8tostr3(const uint8_t x);
+
+  // Convert signed int to rj string with 123 or -12 format
+  char* itostr3(const int x);
+
+  // Convert unsigned int to lj string with 123 format
+  char* itostr3left(const int xx);
+
+  // Convert signed int to rj string with _123, -123, _-12, or __-1 format
+  char *itostr4sign(const int x);
+
+  // Convert unsigned float to string with 1.23 format
+  char* ftostr12ns(const float &x);
+
+  // Convert signed float to fixed-length string with 023.45 / -23.45 format
+  char* ftostr32(const float &x);
+
+  // Convert float to fixed-length string with +123.4 / -123.4 format
+  char* ftostr41sign(const float &x);
+
+  // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
+  char* ftostr43sign(const float &x, char plus=' ');
+
+  // Convert unsigned float to rj string with 12345 format
+  char* ftostr5rj(const float &x);
+
+  // Convert signed float to string with +1234.5 format
+  char* ftostr51sign(const float &x);
+
+  // Convert signed float to space-padded string with -_23.4_ format
+  char* ftostr52sp(const float &x);
+
+  // Convert signed float to string with +123.45 format
+  char* ftostr52sign(const float &x);
+
+  // Convert unsigned float to string with 1234.56 format omitting trailing zeros
+  char* ftostr62rj(const float &x);
+
+  // Convert float to rj string with 123 or -12 format
+  FORCE_INLINE char *ftostr3(const float &x) { return itostr3((int)x); }
+
+  #if ENABLED(LCD_DECIMAL_SMALL_XY)
+    // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
+    char *ftostr4sign(const float &fx);
+  #else
+    // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
+    FORCE_INLINE char *ftostr4sign(const float &x) { return itostr4sign((int)x); }
+  #endif
+
+#endif // ULTRA_LCD
+
+#endif // __UTILITY_H__
