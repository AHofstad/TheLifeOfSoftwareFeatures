commit f2248f79d3c4a3649bd9a4b9d6abab0f94e4af94
Author: Jonathan Brazier <66009857+JonBr306@users.noreply.github.com>
Date:   Mon Jun 24 20:52:49 2024 +0100

    ‚ö°Ô∏è Implement CALIBRATION_GCODE as endstop (#27204)

diff --git a/Marlin/src/HAL/DUE/endstop_interrupts.h b/Marlin/src/HAL/DUE/endstop_interrupts.h
index 954eb625a5..798ca4f0cb 100644
--- a/Marlin/src/HAL/DUE/endstop_interrupts.h
+++ b/Marlin/src/HAL/DUE/endstop_interrupts.h
@@ -57,20 +57,21 @@ void setup_endstop_interrupts() {
   TERN_(USE_X2_MIN,      _ATTACH(X2_MIN_PIN));
   TERN_(USE_Y2_MAX,      _ATTACH(Y2_MAX_PIN));
   TERN_(USE_Y2_MIN,      _ATTACH(Y2_MIN_PIN));
   TERN_(USE_Z2_MAX,      _ATTACH(Z2_MAX_PIN));
   TERN_(USE_Z2_MIN,      _ATTACH(Z2_MIN_PIN));
   TERN_(USE_Z3_MAX,      _ATTACH(Z3_MAX_PIN));
   TERN_(USE_Z3_MIN,      _ATTACH(Z3_MIN_PIN));
   TERN_(USE_Z4_MAX,      _ATTACH(Z4_MAX_PIN));
   TERN_(USE_Z4_MIN,      _ATTACH(Z4_MIN_PIN));
   TERN_(USE_Z_MIN_PROBE, _ATTACH(Z_MIN_PROBE_PIN));
+  TERN_(USE_CALIBRATION, _ATTACH(CALIBRATION_PIN));
   TERN_(USE_I_MAX,       _ATTACH(I_MAX_PIN));
   TERN_(USE_I_MIN,       _ATTACH(I_MIN_PIN));
   TERN_(USE_J_MAX,       _ATTACH(J_MAX_PIN));
   TERN_(USE_J_MIN,       _ATTACH(J_MIN_PIN));
   TERN_(USE_K_MAX,       _ATTACH(K_MAX_PIN));
   TERN_(USE_K_MIN,       _ATTACH(K_MIN_PIN));
   TERN_(USE_U_MAX,       _ATTACH(U_MAX_PIN));
   TERN_(USE_U_MIN,       _ATTACH(U_MIN_PIN));
   TERN_(USE_V_MAX,       _ATTACH(V_MAX_PIN));
   TERN_(USE_V_MIN,       _ATTACH(V_MIN_PIN));

commit bed26734a28175f7ef9669d5190bf7ebc6227223
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Aug 1 23:03:06 2023 -0500

    üîß More endstops refactoring (#25758)

diff --git a/Marlin/src/HAL/DUE/endstop_interrupts.h b/Marlin/src/HAL/DUE/endstop_interrupts.h
index 28510fb508..954eb625a5 100644
--- a/Marlin/src/HAL/DUE/endstop_interrupts.h
+++ b/Marlin/src/HAL/DUE/endstop_interrupts.h
@@ -45,21 +45,21 @@ void endstop_ISR() { endstops.update(); }
  *  On Due, all pins support external interrupt capability.
  */
 
 void setup_endstop_interrupts() {
   #define _ATTACH(P) attachInterrupt(digitalPinToInterrupt(P), endstop_ISR, CHANGE)
   TERN_(USE_X_MAX,       _ATTACH(X_MAX_PIN));
   TERN_(USE_X_MIN,       _ATTACH(X_MIN_PIN));
   TERN_(USE_Y_MAX,       _ATTACH(Y_MAX_PIN));
   TERN_(USE_Y_MIN,       _ATTACH(Y_MIN_PIN));
   TERN_(USE_Z_MAX,       _ATTACH(Z_MAX_PIN));
-  TERN_(HAS_Z_MIN_PIN,   _ATTACH(Z_MIN_PIN));
+  TERN_(USE_Z_MIN,       _ATTACH(Z_MIN_PIN));
   TERN_(USE_X2_MAX,      _ATTACH(X2_MAX_PIN));
   TERN_(USE_X2_MIN,      _ATTACH(X2_MIN_PIN));
   TERN_(USE_Y2_MAX,      _ATTACH(Y2_MAX_PIN));
   TERN_(USE_Y2_MIN,      _ATTACH(Y2_MIN_PIN));
   TERN_(USE_Z2_MAX,      _ATTACH(Z2_MAX_PIN));
   TERN_(USE_Z2_MIN,      _ATTACH(Z2_MIN_PIN));
   TERN_(USE_Z3_MAX,      _ATTACH(Z3_MAX_PIN));
   TERN_(USE_Z3_MIN,      _ATTACH(Z3_MIN_PIN));
   TERN_(USE_Z4_MAX,      _ATTACH(Z4_MAX_PIN));
   TERN_(USE_Z4_MIN,      _ATTACH(Z4_MIN_PIN));

commit 85325f585ac4a9bb667423561540b5d58bdc3b6e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri May 5 19:37:13 2023 -0500

    üßë‚Äçüíª Endstops preliminary work (#25780)

diff --git a/Marlin/src/HAL/DUE/endstop_interrupts.h b/Marlin/src/HAL/DUE/endstop_interrupts.h
index 9ce4fcdb2f..28510fb508 100644
--- a/Marlin/src/HAL/DUE/endstop_interrupts.h
+++ b/Marlin/src/HAL/DUE/endstop_interrupts.h
@@ -40,40 +40,40 @@
 // One ISR for all EXT-Interrupts
 void endstop_ISR() { endstops.update(); }
 
 /**
  *  Endstop interrupts for Due based targets.
  *  On Due, all pins support external interrupt capability.
  */
 
 void setup_endstop_interrupts() {
   #define _ATTACH(P) attachInterrupt(digitalPinToInterrupt(P), endstop_ISR, CHANGE)
-  TERN_(HAS_X_MAX,           _ATTACH(X_MAX_PIN));
-  TERN_(HAS_X_MIN,           _ATTACH(X_MIN_PIN));
-  TERN_(HAS_Y_MAX,           _ATTACH(Y_MAX_PIN));
-  TERN_(HAS_Y_MIN,           _ATTACH(Y_MIN_PIN));
-  TERN_(HAS_Z_MAX,           _ATTACH(Z_MAX_PIN));
-  TERN_(HAS_Z_MIN_PIN,       _ATTACH(Z_MIN_PIN));
-  TERN_(HAS_X2_MAX,          _ATTACH(X2_MAX_PIN));
-  TERN_(HAS_X2_MIN,          _ATTACH(X2_MIN_PIN));
-  TERN_(HAS_Y2_MAX,          _ATTACH(Y2_MAX_PIN));
-  TERN_(HAS_Y2_MIN,          _ATTACH(Y2_MIN_PIN));
-  TERN_(HAS_Z2_MAX,          _ATTACH(Z2_MAX_PIN));
-  TERN_(HAS_Z2_MIN,          _ATTACH(Z2_MIN_PIN));
-  TERN_(HAS_Z3_MAX,          _ATTACH(Z3_MAX_PIN));
-  TERN_(HAS_Z3_MIN,          _ATTACH(Z3_MIN_PIN));
-  TERN_(HAS_Z4_MAX,          _ATTACH(Z4_MAX_PIN));
-  TERN_(HAS_Z4_MIN,          _ATTACH(Z4_MIN_PIN));
-  TERN_(HAS_Z_MIN_PROBE_PIN, _ATTACH(Z_MIN_PROBE_PIN));
-  TERN_(HAS_I_MAX,           _ATTACH(I_MAX_PIN));
-  TERN_(HAS_I_MIN,           _ATTACH(I_MIN_PIN));
-  TERN_(HAS_J_MAX,           _ATTACH(J_MAX_PIN));
-  TERN_(HAS_J_MIN,           _ATTACH(J_MIN_PIN));
-  TERN_(HAS_K_MAX,           _ATTACH(K_MAX_PIN));
-  TERN_(HAS_K_MIN,           _ATTACH(K_MIN_PIN));
-  TERN_(HAS_U_MAX,           _ATTACH(U_MAX_PIN));
-  TERN_(HAS_U_MIN,           _ATTACH(U_MIN_PIN));
-  TERN_(HAS_V_MAX,           _ATTACH(V_MAX_PIN));
-  TERN_(HAS_V_MIN,           _ATTACH(V_MIN_PIN));
-  TERN_(HAS_W_MAX,           _ATTACH(W_MAX_PIN));
-  TERN_(HAS_W_MIN,           _ATTACH(W_MIN_PIN));
+  TERN_(USE_X_MAX,       _ATTACH(X_MAX_PIN));
+  TERN_(USE_X_MIN,       _ATTACH(X_MIN_PIN));
+  TERN_(USE_Y_MAX,       _ATTACH(Y_MAX_PIN));
+  TERN_(USE_Y_MIN,       _ATTACH(Y_MIN_PIN));
+  TERN_(USE_Z_MAX,       _ATTACH(Z_MAX_PIN));
+  TERN_(HAS_Z_MIN_PIN,   _ATTACH(Z_MIN_PIN));
+  TERN_(USE_X2_MAX,      _ATTACH(X2_MAX_PIN));
+  TERN_(USE_X2_MIN,      _ATTACH(X2_MIN_PIN));
+  TERN_(USE_Y2_MAX,      _ATTACH(Y2_MAX_PIN));
+  TERN_(USE_Y2_MIN,      _ATTACH(Y2_MIN_PIN));
+  TERN_(USE_Z2_MAX,      _ATTACH(Z2_MAX_PIN));
+  TERN_(USE_Z2_MIN,      _ATTACH(Z2_MIN_PIN));
+  TERN_(USE_Z3_MAX,      _ATTACH(Z3_MAX_PIN));
+  TERN_(USE_Z3_MIN,      _ATTACH(Z3_MIN_PIN));
+  TERN_(USE_Z4_MAX,      _ATTACH(Z4_MAX_PIN));
+  TERN_(USE_Z4_MIN,      _ATTACH(Z4_MIN_PIN));
+  TERN_(USE_Z_MIN_PROBE, _ATTACH(Z_MIN_PROBE_PIN));
+  TERN_(USE_I_MAX,       _ATTACH(I_MAX_PIN));
+  TERN_(USE_I_MIN,       _ATTACH(I_MIN_PIN));
+  TERN_(USE_J_MAX,       _ATTACH(J_MAX_PIN));
+  TERN_(USE_J_MIN,       _ATTACH(J_MIN_PIN));
+  TERN_(USE_K_MAX,       _ATTACH(K_MAX_PIN));
+  TERN_(USE_K_MIN,       _ATTACH(K_MIN_PIN));
+  TERN_(USE_U_MAX,       _ATTACH(U_MAX_PIN));
+  TERN_(USE_U_MIN,       _ATTACH(U_MIN_PIN));
+  TERN_(USE_V_MAX,       _ATTACH(V_MAX_PIN));
+  TERN_(USE_V_MIN,       _ATTACH(V_MIN_PIN));
+  TERN_(USE_W_MAX,       _ATTACH(W_MAX_PIN));
+  TERN_(USE_W_MIN,       _ATTACH(W_MIN_PIN));
 }

commit 467ab74523087a852ab50939d86a0ca0b78f17ad
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 26 14:56:23 2023 -0500

    üßë‚Äçüíª Simplify endstops config (#25748)

diff --git a/Marlin/src/HAL/DUE/endstop_interrupts.h b/Marlin/src/HAL/DUE/endstop_interrupts.h
index c1bbcb121b..9ce4fcdb2f 100644
--- a/Marlin/src/HAL/DUE/endstop_interrupts.h
+++ b/Marlin/src/HAL/DUE/endstop_interrupts.h
@@ -40,40 +40,40 @@
 // One ISR for all EXT-Interrupts
 void endstop_ISR() { endstops.update(); }
 
 /**
  *  Endstop interrupts for Due based targets.
  *  On Due, all pins support external interrupt capability.
  */
 
 void setup_endstop_interrupts() {
   #define _ATTACH(P) attachInterrupt(digitalPinToInterrupt(P), endstop_ISR, CHANGE)
-  TERN_(HAS_X_MAX, _ATTACH(X_MAX_PIN));
-  TERN_(HAS_X_MIN, _ATTACH(X_MIN_PIN));
-  TERN_(HAS_Y_MAX, _ATTACH(Y_MAX_PIN));
-  TERN_(HAS_Y_MIN, _ATTACH(Y_MIN_PIN));
-  TERN_(HAS_Z_MAX, _ATTACH(Z_MAX_PIN));
-  TERN_(HAS_Z_MIN, _ATTACH(Z_MIN_PIN));
-  TERN_(HAS_X2_MAX, _ATTACH(X2_MAX_PIN));
-  TERN_(HAS_X2_MIN, _ATTACH(X2_MIN_PIN));
-  TERN_(HAS_Y2_MAX, _ATTACH(Y2_MAX_PIN));
-  TERN_(HAS_Y2_MIN, _ATTACH(Y2_MIN_PIN));
-  TERN_(HAS_Z2_MAX, _ATTACH(Z2_MAX_PIN));
-  TERN_(HAS_Z2_MIN, _ATTACH(Z2_MIN_PIN));
-  TERN_(HAS_Z3_MAX, _ATTACH(Z3_MAX_PIN));
-  TERN_(HAS_Z3_MIN, _ATTACH(Z3_MIN_PIN));
-  TERN_(HAS_Z4_MAX, _ATTACH(Z4_MAX_PIN));
-  TERN_(HAS_Z4_MIN, _ATTACH(Z4_MIN_PIN));
+  TERN_(HAS_X_MAX,           _ATTACH(X_MAX_PIN));
+  TERN_(HAS_X_MIN,           _ATTACH(X_MIN_PIN));
+  TERN_(HAS_Y_MAX,           _ATTACH(Y_MAX_PIN));
+  TERN_(HAS_Y_MIN,           _ATTACH(Y_MIN_PIN));
+  TERN_(HAS_Z_MAX,           _ATTACH(Z_MAX_PIN));
+  TERN_(HAS_Z_MIN_PIN,       _ATTACH(Z_MIN_PIN));
+  TERN_(HAS_X2_MAX,          _ATTACH(X2_MAX_PIN));
+  TERN_(HAS_X2_MIN,          _ATTACH(X2_MIN_PIN));
+  TERN_(HAS_Y2_MAX,          _ATTACH(Y2_MAX_PIN));
+  TERN_(HAS_Y2_MIN,          _ATTACH(Y2_MIN_PIN));
+  TERN_(HAS_Z2_MAX,          _ATTACH(Z2_MAX_PIN));
+  TERN_(HAS_Z2_MIN,          _ATTACH(Z2_MIN_PIN));
+  TERN_(HAS_Z3_MAX,          _ATTACH(Z3_MAX_PIN));
+  TERN_(HAS_Z3_MIN,          _ATTACH(Z3_MIN_PIN));
+  TERN_(HAS_Z4_MAX,          _ATTACH(Z4_MAX_PIN));
+  TERN_(HAS_Z4_MIN,          _ATTACH(Z4_MIN_PIN));
   TERN_(HAS_Z_MIN_PROBE_PIN, _ATTACH(Z_MIN_PROBE_PIN));
-  TERN_(HAS_I_MAX, _ATTACH(I_MAX_PIN));
-  TERN_(HAS_I_MIN, _ATTACH(I_MIN_PIN));
-  TERN_(HAS_J_MAX, _ATTACH(J_MAX_PIN));
-  TERN_(HAS_J_MIN, _ATTACH(J_MIN_PIN));
-  TERN_(HAS_K_MAX, _ATTACH(K_MAX_PIN));
-  TERN_(HAS_K_MIN, _ATTACH(K_MIN_PIN));
-  TERN_(HAS_U_MAX, _ATTACH(U_MAX_PIN));
-  TERN_(HAS_U_MIN, _ATTACH(U_MIN_PIN));
-  TERN_(HAS_V_MAX, _ATTACH(V_MAX_PIN));
-  TERN_(HAS_V_MIN, _ATTACH(V_MIN_PIN));
-  TERN_(HAS_W_MAX, _ATTACH(W_MAX_PIN));
-  TERN_(HAS_W_MIN, _ATTACH(W_MIN_PIN));
+  TERN_(HAS_I_MAX,           _ATTACH(I_MAX_PIN));
+  TERN_(HAS_I_MIN,           _ATTACH(I_MIN_PIN));
+  TERN_(HAS_J_MAX,           _ATTACH(J_MAX_PIN));
+  TERN_(HAS_J_MIN,           _ATTACH(J_MIN_PIN));
+  TERN_(HAS_K_MAX,           _ATTACH(K_MAX_PIN));
+  TERN_(HAS_K_MIN,           _ATTACH(K_MIN_PIN));
+  TERN_(HAS_U_MAX,           _ATTACH(U_MAX_PIN));
+  TERN_(HAS_U_MIN,           _ATTACH(U_MIN_PIN));
+  TERN_(HAS_V_MAX,           _ATTACH(V_MAX_PIN));
+  TERN_(HAS_V_MIN,           _ATTACH(V_MIN_PIN));
+  TERN_(HAS_W_MAX,           _ATTACH(W_MAX_PIN));
+  TERN_(HAS_W_MIN,           _ATTACH(W_MIN_PIN));
 }

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/HAL/DUE/endstop_interrupts.h b/Marlin/src/HAL/DUE/endstop_interrupts.h
index 9c7e210488..c1bbcb121b 100644
--- a/Marlin/src/HAL/DUE/endstop_interrupts.h
+++ b/Marlin/src/HAL/DUE/endstop_interrupts.h
@@ -63,11 +63,17 @@ void setup_endstop_interrupts() {
   TERN_(HAS_Z3_MIN, _ATTACH(Z3_MIN_PIN));
   TERN_(HAS_Z4_MAX, _ATTACH(Z4_MAX_PIN));
   TERN_(HAS_Z4_MIN, _ATTACH(Z4_MIN_PIN));
   TERN_(HAS_Z_MIN_PROBE_PIN, _ATTACH(Z_MIN_PROBE_PIN));
   TERN_(HAS_I_MAX, _ATTACH(I_MAX_PIN));
   TERN_(HAS_I_MIN, _ATTACH(I_MIN_PIN));
   TERN_(HAS_J_MAX, _ATTACH(J_MAX_PIN));
   TERN_(HAS_J_MIN, _ATTACH(J_MIN_PIN));
   TERN_(HAS_K_MAX, _ATTACH(K_MAX_PIN));
   TERN_(HAS_K_MIN, _ATTACH(K_MIN_PIN));
+  TERN_(HAS_U_MAX, _ATTACH(U_MAX_PIN));
+  TERN_(HAS_U_MIN, _ATTACH(U_MIN_PIN));
+  TERN_(HAS_V_MAX, _ATTACH(V_MAX_PIN));
+  TERN_(HAS_V_MIN, _ATTACH(V_MIN_PIN));
+  TERN_(HAS_W_MAX, _ATTACH(W_MAX_PIN));
+  TERN_(HAS_W_MIN, _ATTACH(W_MIN_PIN));
 }

commit 7726af9c5348c1c7d0fd9a56eca87d00cd75fee6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Jun 5 09:18:47 2021 +0200

    üèóÔ∏è Support for up to 6 linear axes (#19112)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/HAL/DUE/endstop_interrupts.h b/Marlin/src/HAL/DUE/endstop_interrupts.h
index 999ada5127..9c7e210488 100644
--- a/Marlin/src/HAL/DUE/endstop_interrupts.h
+++ b/Marlin/src/HAL/DUE/endstop_interrupts.h
@@ -57,11 +57,17 @@ void setup_endstop_interrupts() {
   TERN_(HAS_X2_MIN, _ATTACH(X2_MIN_PIN));
   TERN_(HAS_Y2_MAX, _ATTACH(Y2_MAX_PIN));
   TERN_(HAS_Y2_MIN, _ATTACH(Y2_MIN_PIN));
   TERN_(HAS_Z2_MAX, _ATTACH(Z2_MAX_PIN));
   TERN_(HAS_Z2_MIN, _ATTACH(Z2_MIN_PIN));
   TERN_(HAS_Z3_MAX, _ATTACH(Z3_MAX_PIN));
   TERN_(HAS_Z3_MIN, _ATTACH(Z3_MIN_PIN));
   TERN_(HAS_Z4_MAX, _ATTACH(Z4_MAX_PIN));
   TERN_(HAS_Z4_MIN, _ATTACH(Z4_MIN_PIN));
   TERN_(HAS_Z_MIN_PROBE_PIN, _ATTACH(Z_MIN_PROBE_PIN));
+  TERN_(HAS_I_MAX, _ATTACH(I_MAX_PIN));
+  TERN_(HAS_I_MIN, _ATTACH(I_MIN_PIN));
+  TERN_(HAS_J_MAX, _ATTACH(J_MAX_PIN));
+  TERN_(HAS_J_MIN, _ATTACH(J_MIN_PIN));
+  TERN_(HAS_K_MAX, _ATTACH(K_MAX_PIN));
+  TERN_(HAS_K_MIN, _ATTACH(K_MIN_PIN));
 }

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/HAL/DUE/endstop_interrupts.h b/Marlin/src/HAL/DUE/endstop_interrupts.h
index 759fefae29..999ada5127 100644
--- a/Marlin/src/HAL/DUE/endstop_interrupts.h
+++ b/Marlin/src/HAL/DUE/endstop_interrupts.h
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 /**
  * Endstop Interrupts
  *
  * Without endstop interrupts the endstop pins must be polled continually in
  * the temperature-ISR via endstops.update(), most of the time finding no change.
  * With this feature endstops.update() is called only when we know that at

commit 6d90d1e1f552dca5e21bc61b676b8e8ce731b280
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 22 16:35:03 2020 -0500

    Apply TERN to compact code (#17619)

diff --git a/Marlin/src/HAL/DUE/endstop_interrupts.h b/Marlin/src/HAL/DUE/endstop_interrupts.h
index f81d9055d5..759fefae29 100644
--- a/Marlin/src/HAL/DUE/endstop_interrupts.h
+++ b/Marlin/src/HAL/DUE/endstop_interrupts.h
@@ -40,50 +40,28 @@
 // One ISR for all EXT-Interrupts
 void endstop_ISR() { endstops.update(); }
 
 /**
  *  Endstop interrupts for Due based targets.
  *  On Due, all pins support external interrupt capability.
  */
 
 void setup_endstop_interrupts() {
   #define _ATTACH(P) attachInterrupt(digitalPinToInterrupt(P), endstop_ISR, CHANGE)
-  #if HAS_X_MAX
-    _ATTACH(X_MAX_PIN);
-  #endif
-  #if HAS_X_MIN
-    _ATTACH(X_MIN_PIN);
-  #endif
-  #if HAS_Y_MAX
-    _ATTACH(Y_MAX_PIN);
-  #endif
-  #if HAS_Y_MIN
-    _ATTACH(Y_MIN_PIN);
-  #endif
-  #if HAS_Z_MAX
-    _ATTACH(Z_MAX_PIN);
-  #endif
-  #if HAS_Z_MIN
-     _ATTACH(Z_MIN_PIN);
-  #endif
-  #if HAS_Z2_MAX
-    _ATTACH(Z2_MAX_PIN);
-  #endif
-  #if HAS_Z2_MIN
-    _ATTACH(Z2_MIN_PIN);
-  #endif
-  #if HAS_Z3_MAX
-    _ATTACH(Z3_MAX_PIN);
-  #endif
-  #if HAS_Z3_MIN
-    _ATTACH(Z3_MIN_PIN);
-  #endif
-  #if HAS_Z4_MAX
-    _ATTACH(Z4_MAX_PIN);
-  #endif
-  #if HAS_Z4_MIN
-    _ATTACH(Z4_MIN_PIN);
-  #endif
-  #if HAS_Z_MIN_PROBE_PIN
-    _ATTACH(Z_MIN_PROBE_PIN);
-  #endif
+  TERN_(HAS_X_MAX, _ATTACH(X_MAX_PIN));
+  TERN_(HAS_X_MIN, _ATTACH(X_MIN_PIN));
+  TERN_(HAS_Y_MAX, _ATTACH(Y_MAX_PIN));
+  TERN_(HAS_Y_MIN, _ATTACH(Y_MIN_PIN));
+  TERN_(HAS_Z_MAX, _ATTACH(Z_MAX_PIN));
+  TERN_(HAS_Z_MIN, _ATTACH(Z_MIN_PIN));
+  TERN_(HAS_X2_MAX, _ATTACH(X2_MAX_PIN));
+  TERN_(HAS_X2_MIN, _ATTACH(X2_MIN_PIN));
+  TERN_(HAS_Y2_MAX, _ATTACH(Y2_MAX_PIN));
+  TERN_(HAS_Y2_MIN, _ATTACH(Y2_MIN_PIN));
+  TERN_(HAS_Z2_MAX, _ATTACH(Z2_MAX_PIN));
+  TERN_(HAS_Z2_MIN, _ATTACH(Z2_MIN_PIN));
+  TERN_(HAS_Z3_MAX, _ATTACH(Z3_MAX_PIN));
+  TERN_(HAS_Z3_MIN, _ATTACH(Z3_MIN_PIN));
+  TERN_(HAS_Z4_MAX, _ATTACH(Z4_MAX_PIN));
+  TERN_(HAS_Z4_MIN, _ATTACH(Z4_MIN_PIN));
+  TERN_(HAS_Z_MIN_PROBE_PIN, _ATTACH(Z_MIN_PROBE_PIN));
 }

commit 6bead0c1b04152f6a291d851f6cd4029fe0fc616
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 16:29:29 2020 -0500

    Shorter paths to HAL, ExtUI (#17156)

diff --git a/Marlin/src/HAL/DUE/endstop_interrupts.h b/Marlin/src/HAL/DUE/endstop_interrupts.h
new file mode 100644
index 0000000000..f81d9055d5
--- /dev/null
+++ b/Marlin/src/HAL/DUE/endstop_interrupts.h
@@ -0,0 +1,89 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+/**
+ * Endstop Interrupts
+ *
+ * Without endstop interrupts the endstop pins must be polled continually in
+ * the temperature-ISR via endstops.update(), most of the time finding no change.
+ * With this feature endstops.update() is called only when we know that at
+ * least one endstop has changed state, saving valuable CPU cycles.
+ *
+ * This feature only works when all used endstop pins can generate an 'external interrupt'.
+ *
+ * Test whether pins issue interrupts on your board by flashing 'pin_interrupt_test.ino'.
+ * (Located in Marlin/buildroot/share/pin_interrupt_test/pin_interrupt_test.ino)
+ */
+
+#include "../../module/endstops.h"
+
+// One ISR for all EXT-Interrupts
+void endstop_ISR() { endstops.update(); }
+
+/**
+ *  Endstop interrupts for Due based targets.
+ *  On Due, all pins support external interrupt capability.
+ */
+
+void setup_endstop_interrupts() {
+  #define _ATTACH(P) attachInterrupt(digitalPinToInterrupt(P), endstop_ISR, CHANGE)
+  #if HAS_X_MAX
+    _ATTACH(X_MAX_PIN);
+  #endif
+  #if HAS_X_MIN
+    _ATTACH(X_MIN_PIN);
+  #endif
+  #if HAS_Y_MAX
+    _ATTACH(Y_MAX_PIN);
+  #endif
+  #if HAS_Y_MIN
+    _ATTACH(Y_MIN_PIN);
+  #endif
+  #if HAS_Z_MAX
+    _ATTACH(Z_MAX_PIN);
+  #endif
+  #if HAS_Z_MIN
+     _ATTACH(Z_MIN_PIN);
+  #endif
+  #if HAS_Z2_MAX
+    _ATTACH(Z2_MAX_PIN);
+  #endif
+  #if HAS_Z2_MIN
+    _ATTACH(Z2_MIN_PIN);
+  #endif
+  #if HAS_Z3_MAX
+    _ATTACH(Z3_MAX_PIN);
+  #endif
+  #if HAS_Z3_MIN
+    _ATTACH(Z3_MIN_PIN);
+  #endif
+  #if HAS_Z4_MAX
+    _ATTACH(Z4_MAX_PIN);
+  #endif
+  #if HAS_Z4_MIN
+    _ATTACH(Z4_MIN_PIN);
+  #endif
+  #if HAS_Z_MIN_PROBE_PIN
+    _ATTACH(Z_MIN_PROBE_PIN);
+  #endif
+}
