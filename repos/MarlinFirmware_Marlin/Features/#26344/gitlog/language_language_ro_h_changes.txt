commit 006768ab58ff426fa7cfdaa72dba135b10a47ed7
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon Nov 20 02:23:07 2023 -0500

    🚸 Fix MarlinUI axis move / UBL strings (#26439)
    
    Followup to #26344

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index e7f60dce9b..81f44fe65a 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -123,7 +123,6 @@ namespace LanguageNarrow_ro {
   LSTR MSG_HOTEND_OFFSET_A                = _UxGT("2nd Nozzle @");
   LSTR MSG_UBL_DOING_G29                  = _UxGT("Doing G29");
   LSTR MSG_UBL_TOOLS                      = _UxGT("UBL Tools");
-  LSTR MSG_UBL_LEVEL_BED                  = _UxGT("Unified Bed Leveling");
   LSTR MSG_LCD_TILTING_MESH               = _UxGT("Tilting Point");
   LSTR MSG_UBL_MANUAL_MESH                = _UxGT("Manually Build Mesh");
   LSTR MSG_UBL_BC_INSERT                  = _UxGT("Place Shim & Measure");

commit aed577271ff94c822e861d8f652f2bdf46b2aeb9
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Nov 17 22:39:00 2023 -0600

    🔨 Rotational move items (#26438)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index e24da73a19..e7f60dce9b 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -226,6 +226,7 @@ namespace LanguageNarrow_ro {
   LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Capat Prea Rece");
   LSTR MSG_MOVE_N_MM                      = _UxGT("Move $mm");
   LSTR MSG_MOVE_N_IN                      = _UxGT("Move $in");
+  LSTR MSG_MOVE_N_DEG                     = _UxGT("Move $") LCD_STR_DEGREE;
   LSTR MSG_SPEED                          = _UxGT("Speed");
   LSTR MSG_MESH_Z_OFFSET                  = _UxGT("Bed Z");
   LSTR MSG_NOZZLE                         = _UxGT("Nozzle");

commit 36e66bdd9ff22ddfdcaa36ac8a9b9448c78ca44c
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sat Nov 18 09:11:59 2023 +1300

    🔧 Define MarlinUI axis moves with lists (#26344)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index a2a915dd77..e24da73a19 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -225,10 +225,7 @@ namespace LanguageNarrow_ro {
   LSTR MSG_MOVE_EN                        = _UxGT("Extruder *");
   LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Capat Prea Rece");
   LSTR MSG_MOVE_N_MM                      = _UxGT("Move $mm");
-  LSTR MSG_MOVE_01MM                      = _UxGT("Move 0.1mm");
-  LSTR MSG_MOVE_1MM                       = _UxGT("Move 1mm");
-  LSTR MSG_MOVE_10MM                      = _UxGT("Move 10mm");
-  LSTR MSG_MOVE_100MM                     = _UxGT("Move 100mm");
+  LSTR MSG_MOVE_N_IN                      = _UxGT("Move $in");
   LSTR MSG_SPEED                          = _UxGT("Speed");
   LSTR MSG_MESH_Z_OFFSET                  = _UxGT("Bed Z");
   LSTR MSG_NOZZLE                         = _UxGT("Nozzle");

commit 88cdf487b433bf2187f2dad31587882ebf02cc59
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Aug 22 17:36:53 2023 -0500

    🚸 Avoid LCD messages starting with "Error:" (#26164)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 579c7eb224..a2a915dd77 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -428,11 +428,9 @@ namespace LanguageNarrow_ro {
   LSTR MSG_BABYSTEP_N                     = _UxGT("Babystep @");
   LSTR MSG_BABYSTEP_TOTAL                 = _UxGT("Total");
   LSTR MSG_ENDSTOP_ABORT                  = _UxGT("Endstop Abort");
-  LSTR MSG_HEATING_FAILED_LCD             = _UxGT("Heating Failed");
+  LSTR MSG_ERR_HEATING_FAILED             = _UxGT("Heating Failed");
   LSTR MSG_ERR_REDUNDANT_TEMP             = _UxGT("Err: REDUNDANT TEMP");
-  LSTR MSG_THERMAL_RUNAWAY                = _UxGT("THERMAL RUNAWAY");
-  LSTR MSG_THERMAL_RUNAWAY_BED            = _UxGT("BED THERMAL RUNAWAY");
-  LSTR MSG_THERMAL_RUNAWAY_CHAMBER        = _UxGT("CHAMBER T. RUNAWAY");
+  LSTR MSG_ERR_THERMAL_RUNAWAY            = _UxGT("THERMAL RUNAWAY");
   LSTR MSG_ERR_MAXTEMP                    = _UxGT("Err: MAXTEMP");
   LSTR MSG_ERR_MINTEMP                    = _UxGT("Err: MINTEMP");
   LSTR MSG_HALTED                         = _UxGT("PRINTER HALTED");

commit 0878b99b2cb38ffd40faa12d9e3de3bd659af205
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 30 19:21:56 2023 -0500

    🌐 Language Import/Export (#25889)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index b4f7550a7f..579c7eb224 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -29,7 +29,7 @@
   *
   * Translation by cristyanul
   */
-namespace Language_ro {
+namespace LanguageNarrow_ro {
   using namespace Language_en; // Inherit undefined strings from English
 
   constexpr uint8_t CHARSIZE              = 2;
@@ -68,23 +68,23 @@ namespace Language_ro {
   LSTR MSG_Z_FADE_HEIGHT                  = _UxGT("Fade Inaltime");
   LSTR MSG_SET_HOME_OFFSETS               = _UxGT("Seteaza Offseturile Acasa");
   LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("Offseturi Aplicate");
-  #if HAS_PREHEAT
-    LSTR MSG_PREHEAT_1                    = _UxGT("Preincalzeste ") PREHEAT_1_LABEL;
-    LSTR MSG_PREHEAT_1_H                  = _UxGT("Preincalzeste ") PREHEAT_1_LABEL " ~";
-    LSTR MSG_PREHEAT_1_END                = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul");
-    LSTR MSG_PREHEAT_1_END_E              = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul ~");
-    LSTR MSG_PREHEAT_1_ALL                = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Tot");
-    LSTR MSG_PREHEAT_1_BEDONLY            = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Patul");
-    LSTR MSG_PREHEAT_1_SETTINGS           = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Conf");
 
-    LSTR MSG_PREHEAT_M                    = _UxGT("Preincalzeste $");
-    LSTR MSG_PREHEAT_M_H                  = _UxGT("Preincalzeste $ ~");
-    LSTR MSG_PREHEAT_M_END                = _UxGT("Preincalzeste $ Capatul");
-    LSTR MSG_PREHEAT_M_END_E              = _UxGT("Preincalzeste $ Capatul ~");
-    LSTR MSG_PREHEAT_M_ALL                = _UxGT("Preincalzeste $ Tot");
-    LSTR MSG_PREHEAT_M_BEDONLY            = _UxGT("Preincalzeste $ Patul");
-    LSTR MSG_PREHEAT_M_SETTINGS           = _UxGT("Preincalzeste $ Conf");
-  #endif
+  LSTR MSG_PREHEAT_1                      = _UxGT("Preincalzeste ") PREHEAT_1_LABEL;
+  LSTR MSG_PREHEAT_1_H                    = _UxGT("Preincalzeste ") PREHEAT_1_LABEL " ~";
+  LSTR MSG_PREHEAT_1_END                  = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul");
+  LSTR MSG_PREHEAT_1_END_E                = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul ~");
+  LSTR MSG_PREHEAT_1_ALL                  = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Tot");
+  LSTR MSG_PREHEAT_1_BEDONLY              = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Patul");
+  LSTR MSG_PREHEAT_1_SETTINGS             = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Conf");
+
+  LSTR MSG_PREHEAT_M                      = _UxGT("Preincalzeste $");
+  LSTR MSG_PREHEAT_M_H                    = _UxGT("Preincalzeste $ ~");
+  LSTR MSG_PREHEAT_M_END                  = _UxGT("Preincalzeste $ Capatul");
+  LSTR MSG_PREHEAT_M_END_E                = _UxGT("Preincalzeste $ Capatul ~");
+  LSTR MSG_PREHEAT_M_ALL                  = _UxGT("Preincalzeste $ Tot");
+  LSTR MSG_PREHEAT_M_BEDONLY              = _UxGT("Preincalzeste $ Patul");
+  LSTR MSG_PREHEAT_M_SETTINGS             = _UxGT("Preincalzeste $ Conf");
+
   LSTR MSG_PREHEAT_CUSTOM                 = _UxGT("Preincalzeste Personalizat");
   LSTR MSG_COOLDOWN                       = _UxGT("Racire");
   LSTR MSG_CUTTER_FREQUENCY               = _UxGT("Frecventa");
@@ -142,10 +142,8 @@ namespace Language_ro {
   LSTR MSG_UBL_DONE_EDITING_MESH          = _UxGT("Done Editing Mesh");
   LSTR MSG_UBL_BUILD_CUSTOM_MESH          = _UxGT("Build Custom Mesh");
   LSTR MSG_UBL_BUILD_MESH_MENU            = _UxGT("Build Mesh");
-  #if HAS_PREHEAT
-    LSTR MSG_UBL_BUILD_MESH_M             = _UxGT("Build Mesh ($)");
-    LSTR MSG_UBL_VALIDATE_MESH_M          = _UxGT("Validate Mesh ($)");
-  #endif
+  LSTR MSG_UBL_BUILD_MESH_M               = _UxGT("Build Mesh ($)");
+  LSTR MSG_UBL_VALIDATE_MESH_M            = _UxGT("Validate Mesh ($)");
   LSTR MSG_UBL_BUILD_COLD_MESH            = _UxGT("Build Cold Mesh");
   LSTR MSG_UBL_MESH_HEIGHT_ADJUST         = _UxGT("Adjust Mesh Height");
   LSTR MSG_UBL_MESH_HEIGHT_AMOUNT         = _UxGT("Height Amount");
@@ -476,19 +474,11 @@ namespace Language_ro {
   LSTR MSG_CASE_LIGHT_BRIGHTNESS          = _UxGT("Light Brightness");
   LSTR MSG_KILL_EXPECTED_PRINTER          = _UxGT("INCORRECT PRINTER");
 
-#if LCD_WIDTH >= 20 || HAS_DWIN_E3V2
-  LSTR MSG_INFO_PRINT_COUNT               = _UxGT("Total Printuri");
-  LSTR MSG_INFO_COMPLETED_PRINTS          = _UxGT("Completat");
-  LSTR MSG_INFO_PRINT_TIME                = _UxGT("Timp Imprimare Total");
-  LSTR MSG_INFO_PRINT_LONGEST             = _UxGT("Longest Job Time");
-  LSTR MSG_INFO_PRINT_FILAMENT            = _UxGT("Total Extrudat");
-#else
   LSTR MSG_INFO_PRINT_COUNT               = _UxGT("Prints");
   LSTR MSG_INFO_COMPLETED_PRINTS          = _UxGT("Completed");
   LSTR MSG_INFO_PRINT_TIME                = _UxGT("Total");
   LSTR MSG_INFO_PRINT_LONGEST             = _UxGT("Longest");
   LSTR MSG_INFO_PRINT_FILAMENT            = _UxGT("Extruded");
-#endif
 
   LSTR MSG_INFO_MIN_TEMP                  = _UxGT("Temperatura Minima");
   LSTR MSG_INFO_MAX_TEMP                  = _UxGT("Temperatura Maxima");
@@ -560,22 +550,8 @@ namespace Language_ro {
   LSTR MSG_BAD_PAGE_SPEED                 = _UxGT("Bad page speed");
 
   //
-  // Filament Inlocuire screens show up to 3 lines on a 4-line display
-  //                        ...or up to 2 lines on a 3-line display
+  // Filament Inlocuire screens show up to 2 lines on a 3-line display
   //
-#if LCD_HEIGHT >= 4
-  LSTR MSG_ADVANCED_PAUSE_WAITING         = _UxGT(MSG_2_LINE("Apasa Butonul", "pentru a reveni la print"));
-  LSTR MSG_PAUSE_PRINT_PARKING            = _UxGT(MSG_1_LINE("Parcare..."));
-  LSTR MSG_FILAMENT_CHANGE_INIT           = _UxGT(MSG_3_LINE("Astept ca", "inlocuirea filamentului", "sa inceapa"));
-  LSTR MSG_FILAMENT_CHANGE_INSERT         = _UxGT(MSG_3_LINE("Insert filament", "and press button", "to continue"));
-  LSTR MSG_FILAMENT_CHANGE_HEAT           = _UxGT(MSG_2_LINE("Press button", "to heat nozzle"));
-  LSTR MSG_FILAMENT_CHANGE_HEATING        = _UxGT(MSG_2_LINE("Nozzle heating", "Please wait..."));
-  LSTR MSG_FILAMENT_CHANGE_UNLOAD         = _UxGT(MSG_2_LINE("Wait for", "filament unload"));
-  LSTR MSG_FILAMENT_CHANGE_LOAD           = _UxGT(MSG_2_LINE("Wait for", "filament load"));
-  LSTR MSG_FILAMENT_CHANGE_PURGE          = _UxGT(MSG_2_LINE("Wait for", "filament purge"));
-  LSTR MSG_FILAMENT_CHANGE_CONT_PURGE     = _UxGT(MSG_2_LINE("Click to finish", "filament purge"));
-  LSTR MSG_FILAMENT_CHANGE_RESUME         = _UxGT(MSG_2_LINE("Wait for print", "to resume..."));
-#else
   LSTR MSG_ADVANCED_PAUSE_WAITING         = _UxGT(MSG_1_LINE("Click to continue"));
   LSTR MSG_PAUSE_PRINT_PARKING            = _UxGT(MSG_1_LINE("Parcare..."));
   LSTR MSG_FILAMENT_CHANGE_INIT           = _UxGT(MSG_1_LINE("Va rog asteptati..."));
@@ -587,7 +563,7 @@ namespace Language_ro {
   LSTR MSG_FILAMENT_CHANGE_PURGE          = _UxGT(MSG_1_LINE("Curatare..."));
   LSTR MSG_FILAMENT_CHANGE_CONT_PURGE     = _UxGT(MSG_1_LINE("Click pentru a termina"));
   LSTR MSG_FILAMENT_CHANGE_RESUME         = _UxGT(MSG_1_LINE("Se Reia..."));
-#endif
+
   LSTR MSG_TMC_DRIVERS                    = _UxGT("TMC Drivers");
   LSTR MSG_TMC_CURRENT                    = _UxGT("Driver Current");
   LSTR MSG_TMC_HYBRID_THRS                = _UxGT("Hybrid Threshold");
@@ -606,3 +582,35 @@ namespace Language_ro {
   LSTR MSG_REHEAT                         = _UxGT("Reincalzire");
   LSTR MSG_REHEATING                      = _UxGT("Reincalzire...");
 }
+
+namespace LanguageWide_ro {
+  using namespace LanguageNarrow_ro;
+  #if LCD_WIDTH >= 20 || HAS_DWIN_E3V2
+    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("Total Printuri");
+    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("Completat");
+    LSTR MSG_INFO_PRINT_TIME              = _UxGT("Timp Imprimare Total");
+    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("Longest Job Time");
+    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("Total Extrudat");
+  #endif
+}
+
+namespace LanguageTall_ro {
+  using namespace LanguageWide_ro;
+  #if LCD_HEIGHT >= 4
+    // Filament Change screens show up to 3 lines on a 4-line display
+    LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_2_LINE("Apasa Butonul", "pentru a reveni la print"));
+    LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_3_LINE("Astept ca", "inlocuirea filamentului", "sa inceapa"));
+    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_3_LINE("Insert filament", "and press button", "to continue"));
+    LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_2_LINE("Press button", "to heat nozzle"));
+    LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_2_LINE("Nozzle heating", "Please wait..."));
+    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_2_LINE("Wait for", "filament unload"));
+    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_2_LINE("Wait for", "filament load"));
+    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_2_LINE("Wait for", "filament purge"));
+    LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_2_LINE("Click to finish", "filament purge"));
+    LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_2_LINE("Wait for print", "to resume..."));
+  #endif
+}
+
+namespace Language_ro {
+  using namespace LanguageTall_ro;
+}

commit 154e48ba22ceedb01e9058a7f8da9457a445ee19
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri May 26 18:54:50 2023 -0500

    🎨 Misc. spacing

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 75f27c1ecf..b4f7550a7f 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -323,7 +323,7 @@ namespace Language_ro {
   LSTR MSG_SETTINGS_STORED                = _UxGT("Settings Stored");
   LSTR MSG_MEDIA_UPDATE                   = _UxGT("Media Update");
   LSTR MSG_RESET_PRINTER                  = _UxGT("Reset Imprimanta");
-  LSTR MSG_REFRESH                        = LCD_STR_REFRESH  _UxGT("Refresh");
+  LSTR MSG_REFRESH                        = LCD_STR_REFRESH _UxGT("Refresh");
   LSTR MSG_INFO_SCREEN                    = _UxGT("Info Screen");
   LSTR MSG_PREPARE                        = _UxGT("Prepare");
   LSTR MSG_TUNE                           = _UxGT("Tune");

commit 5bc84bf08cb47741537fe705dbfe19eee5396d4e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri May 19 23:30:48 2023 -0500

    🚸 Improve EEPROM validation (#25860)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 327ba7ad81..75f27c1ecf 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -317,9 +317,9 @@ namespace Language_ro {
   LSTR MSG_LOAD_EEPROM                    = _UxGT("Load Settings");
   LSTR MSG_RESTORE_DEFAULTS               = _UxGT("Restore Defaults");
   LSTR MSG_INIT_EEPROM                    = _UxGT("Initialize EEPROM");
-  LSTR MSG_ERR_EEPROM_CRC                 = _UxGT("EEPROM CRC Error");
-  LSTR MSG_ERR_EEPROM_INDEX               = _UxGT("EEPROM Index Error");
-  LSTR MSG_ERR_EEPROM_VERSION             = _UxGT("EEPROM Version Error");
+  LSTR MSG_ERR_EEPROM_CRC                 = _UxGT("Err: EEPROM CRC");
+  LSTR MSG_ERR_EEPROM_SIZE                = _UxGT("Err: Mărimea EEPROM");
+  LSTR MSG_ERR_EEPROM_VERSION             = _UxGT("Err: Versiunea EEPROM");
   LSTR MSG_SETTINGS_STORED                = _UxGT("Settings Stored");
   LSTR MSG_MEDIA_UPDATE                   = _UxGT("Media Update");
   LSTR MSG_RESET_PRINTER                  = _UxGT("Reset Imprimanta");

commit 2954bf26979e43c6b36ca2739af4e887b651f3f8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Apr 24 00:24:40 2023 -0500

    🌐 Replace '=' with '{' for substitution

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index bdb9f226a9..327ba7ad81 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -348,7 +348,7 @@ namespace Language_ro {
   LSTR MSG_STOP_PRINT                     = _UxGT("Stop Print");
   LSTR MSG_PRINTING_OBJECT                = _UxGT("Printing Object");
   LSTR MSG_CANCEL_OBJECT                  = _UxGT("Cancel Object");
-  LSTR MSG_CANCEL_OBJECT_N                = _UxGT("Cancel Object =");
+  LSTR MSG_CANCEL_OBJECT_N                = _UxGT("Cancel Object {");
   LSTR MSG_OUTAGE_RECOVERY                = _UxGT("Outage Recovery");
   LSTR MSG_MEDIA_MENU                     = _UxGT("Print from Media");
   LSTR MSG_NO_MEDIA                       = _UxGT("No Media");
@@ -532,7 +532,7 @@ namespace Language_ro {
   LSTR MSG_MMU2_EJECT_RECOVER             = _UxGT("Remove, click");
 
   LSTR MSG_MIX                            = _UxGT("Mix");
-  LSTR MSG_MIX_COMPONENT_N                = _UxGT("Component =");
+  LSTR MSG_MIX_COMPONENT_N                = _UxGT("Component {");
   LSTR MSG_MIXER                          = _UxGT("Mixer");
   LSTR MSG_GRADIENT                       = _UxGT("Gradient");
   LSTR MSG_FULL_GRADIENT                  = _UxGT("Full Gradient");

commit 92721d1bf7d3516ffa591bf7fa9b0b03099f5156
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 14 17:45:45 2023 -0500

    🚸 "Main" => "Main Menu"

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 938aa71c57..bdb9f226a9 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -49,7 +49,7 @@ namespace Language_ro {
   LSTR MSG_KILL_SUBCALL_OVERFLOW          = _UxGT("Eroare:Subcall Overflow");
   LSTR MSG_LCD_ENDSTOPS                   = _UxGT("Endstops"); // Max length 8 characters
   LSTR MSG_LCD_SOFT_ENDSTOPS              = _UxGT("Soft Endstops");
-  LSTR MSG_MAIN                           = _UxGT("Principal");
+  LSTR MSG_MAIN_MENU                      = _UxGT("Principal");
   LSTR MSG_ADVANCED_SETTINGS              = _UxGT("Setari Avansate");
   LSTR MSG_CONFIGURATION                  = _UxGT("Configurare");
   LSTR MSG_RUN_AUTO_FILES                 = _UxGT("Autostart");

commit c63577fd1dacaa232cfcd44a1e9ea1426cd8c0bc
Author: Abdullah YILMAZ <h.abdullahyilmaz@hotmail.com>
Date:   Mon Mar 6 01:29:43 2023 +0300

    🌐 Update Turkish language (#25447)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 162f3a3616..938aa71c57 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -606,11 +606,3 @@ namespace Language_ro {
   LSTR MSG_REHEAT                         = _UxGT("Reincalzire");
   LSTR MSG_REHEATING                      = _UxGT("Reincalzire...");
 }
-
-#if FAN_COUNT == 1
-  #define MSG_FIRST_FAN_SPEED       MSG_FAN_SPEED
-  #define MSG_EXTRA_FIRST_FAN_SPEED MSG_EXTRA_FAN_SPEED
-#else
-  #define MSG_FIRST_FAN_SPEED       MSG_FAN_SPEED_N
-  #define MSG_EXTRA_FIRST_FAN_SPEED MSG_EXTRA_FAN_SPEED_N
-#endif

commit 96bc084f3d791bc93265f217181986863e8e5fc7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 18 02:15:16 2023 -0600

    🎨 Misc. LCD cleanup (#25400)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index c5fdcc786f..162f3a3616 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -232,7 +232,7 @@ namespace Language_ro {
   LSTR MSG_MOVE_10MM                      = _UxGT("Move 10mm");
   LSTR MSG_MOVE_100MM                     = _UxGT("Move 100mm");
   LSTR MSG_SPEED                          = _UxGT("Speed");
-  LSTR MSG_BED_Z                          = _UxGT("Bed Z");
+  LSTR MSG_MESH_Z_OFFSET                  = _UxGT("Bed Z");
   LSTR MSG_NOZZLE                         = _UxGT("Nozzle");
   LSTR MSG_NOZZLE_N                       = _UxGT("Nozzle ~");
   LSTR MSG_NOZZLE_PARKED                  = _UxGT("Nozzle Parked");

commit 7e72981b8cbaa7a6276f6833527e97cb10e060e7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 21 22:57:56 2023 -0600

    🚸 Fix homing_needed_error language

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 48751f8cd2..c5fdcc786f 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -419,7 +419,7 @@ namespace Language_ro {
   LSTR MSG_MANUAL_DEPLOY_TOUCHMI          = _UxGT("Deploy TouchMI");
   LSTR MSG_MANUAL_DEPLOY                  = _UxGT("Deploy Z-Probe");
   LSTR MSG_MANUAL_STOW                    = _UxGT("Stow Z-Probe");
-  LSTR MSG_HOME_FIRST                     = _UxGT("Home %s%s%s First");
+  LSTR MSG_HOME_FIRST                     = _UxGT("Home %s First");
   LSTR MSG_ZPROBE_OFFSETS                 = _UxGT("Probe Offsets");
   LSTR MSG_ZPROBE_XOFFSET                 = _UxGT("Probe X Offset");
   LSTR MSG_ZPROBE_YOFFSET                 = _UxGT("Probe Y Offset");

commit 6fe387b6f0722033e6cca96fd5e8215ea7b162eb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 15 06:48:17 2023 -0600

    🧑‍💻 Adjust PID / MPC / ProUI
    
    Changes to simplify #25232 WIP

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 57af062023..48751f8cd2 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -261,7 +261,7 @@ namespace Language_ro {
   LSTR MSG_PID_AUTOTUNE                   = _UxGT("PID Autotune");
   LSTR MSG_PID_AUTOTUNE_E                 = _UxGT("PID Autotune *");
   LSTR MSG_PID_AUTOTUNE_DONE              = _UxGT("PID tuning done");
-  LSTR MSG_PID_BAD_EXTRUDER_NUM           = _UxGT("Autotune failed! Bad extruder.");
+  LSTR MSG_PID_BAD_HEATER_ID              = _UxGT("Autotune failed! Bad extruder.");
   LSTR MSG_PID_TEMP_TOO_HIGH              = _UxGT("Autotune failed! Temperature too high.");
   LSTR MSG_PID_TIMEOUT                    = _UxGT("Autotune failed! Timeout.");
   LSTR MSG_SELECT_E                       = _UxGT("Select *");

commit d94defc545ad477c82a8bc77e949aa91cdd3e0f2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 15 06:48:17 2023 -0600

    🎨 Language / menu cleanup

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 2cf6fff263..57af062023 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -264,7 +264,6 @@ namespace Language_ro {
   LSTR MSG_PID_BAD_EXTRUDER_NUM           = _UxGT("Autotune failed! Bad extruder.");
   LSTR MSG_PID_TEMP_TOO_HIGH              = _UxGT("Autotune failed! Temperature too high.");
   LSTR MSG_PID_TIMEOUT                    = _UxGT("Autotune failed! Timeout.");
-  LSTR MSG_SELECT                         = _UxGT("Select");
   LSTR MSG_SELECT_E                       = _UxGT("Select *");
   LSTR MSG_ACC                            = _UxGT("Accel");
   LSTR MSG_JERK                           = _UxGT("Jerk");

commit ed2071aabdebf0c1d9b82b6d8575b8fefae763c4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 18 19:52:47 2022 -0500

    🩹 Fix manual move titles (#24518)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 3bd15f18a4..2cf6fff263 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -222,6 +222,7 @@ namespace Language_ro {
   LSTR MSG_MOVE_X                         = _UxGT("Move X");
   LSTR MSG_MOVE_Y                         = _UxGT("Move Y");
   LSTR MSG_MOVE_Z                         = _UxGT("Move Z");
+  LSTR MSG_MOVE_N                         = _UxGT("Move @");
   LSTR MSG_MOVE_E                         = _UxGT("Extruder");
   LSTR MSG_MOVE_EN                        = _UxGT("Extruder *");
   LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Capat Prea Rece");

commit 546b3066c3b45f0511e3a6c068d85f30a41e9d15
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jun 24 22:07:06 2022 -0500

    🌐 Drop unused delta strings

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 79160624e7..3bd15f18a4 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -452,8 +452,6 @@ namespace Language_ro {
   LSTR MSG_DELTA_CALIBRATE_CENTER         = _UxGT("Calibrate Center");
   LSTR MSG_DELTA_SETTINGS                 = _UxGT("Delta Settings");
   LSTR MSG_DELTA_AUTO_CALIBRATE           = _UxGT("Auto Calibration");
-  LSTR MSG_DELTA_HEIGHT_CALIBRATE         = _UxGT("Set Delta Height");
-  LSTR MSG_DELTA_Z_OFFSET_CALIBRATE       = _UxGT("Probe Z-offset");
   LSTR MSG_DELTA_DIAG_ROD                 = _UxGT("Diag Rod");
   LSTR MSG_DELTA_HEIGHT                   = _UxGT("Inaltime");
   LSTR MSG_DELTA_RADIUS                   = _UxGT("Radius");

commit 8aca38351cd6d33a1202bf9a13890dc8e5eadd49
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 3 22:56:38 2022 -0500

    🧑‍💻 Extend LCD string substitution (#24278)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 79421752af..79160624e7 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -225,7 +225,7 @@ namespace Language_ro {
   LSTR MSG_MOVE_E                         = _UxGT("Extruder");
   LSTR MSG_MOVE_EN                        = _UxGT("Extruder *");
   LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Capat Prea Rece");
-  LSTR MSG_MOVE_N_MM                      = _UxGT("Move %smm");
+  LSTR MSG_MOVE_N_MM                      = _UxGT("Move $mm");
   LSTR MSG_MOVE_01MM                      = _UxGT("Move 0.1mm");
   LSTR MSG_MOVE_1MM                       = _UxGT("Move 1mm");
   LSTR MSG_MOVE_10MM                      = _UxGT("Move 10mm");
@@ -270,30 +270,24 @@ namespace Language_ro {
   LSTR MSG_VA_JERK                        = _UxGT("V") STR_A _UxGT("-Jerk");
   LSTR MSG_VB_JERK                        = _UxGT("V") STR_B _UxGT("-Jerk");
   LSTR MSG_VC_JERK                        = _UxGT("V") STR_C _UxGT("-Jerk");
-  LSTR MSG_VI_JERK                        = _UxGT("V") STR_I _UxGT("-Jerk");
-  LSTR MSG_VJ_JERK                        = _UxGT("V") STR_J _UxGT("-Jerk");
-  LSTR MSG_VK_JERK                        = _UxGT("V") STR_K _UxGT("-Jerk");
+  LSTR MSG_VN_JERK                        = _UxGT("V@-Jerk");
   LSTR MSG_VE_JERK                        = _UxGT("Ve-Jerk");
   LSTR MSG_JUNCTION_DEVIATION             = _UxGT("Junction Dev");
-  LSTR MSG_VELOCITY                       = _UxGT("Velocity");
-  LSTR MSG_VMAX_A                         = _UxGT("Vmax ") STR_A;
-  LSTR MSG_VMAX_B                         = _UxGT("Vmax ") STR_B;
-  LSTR MSG_VMAX_C                         = _UxGT("Vmax ") STR_C;
-  LSTR MSG_VMAX_I                         = _UxGT("Vmax ") STR_I;
-  LSTR MSG_VMAX_J                         = _UxGT("Vmax ") STR_J;
-  LSTR MSG_VMAX_K                         = _UxGT("Vmax ") STR_K;
-  LSTR MSG_VMAX_E                         = _UxGT("Vmax ") STR_E;
-  LSTR MSG_VMAX_EN                        = _UxGT("Vmax *");
+  LSTR MSG_MAX_SPEED                      = _UxGT("Max Speed");
+  LSTR MSG_VMAX_A                         = _UxGT("Max Speed ") STR_A;
+  LSTR MSG_VMAX_B                         = _UxGT("Max Speed ") STR_B;
+  LSTR MSG_VMAX_C                         = _UxGT("Max Speed ") STR_C;
+  LSTR MSG_VMAX_N                         = _UxGT("Max Speed @");
+  LSTR MSG_VMAX_E                         = _UxGT("Max Speed E");
+  LSTR MSG_VMAX_EN                        = _UxGT("Max Speed *");
   LSTR MSG_VMIN                           = _UxGT("Vmin");
   LSTR MSG_VTRAV_MIN                      = _UxGT("VTrav Min");
   LSTR MSG_ACCELERATION                   = _UxGT("Acceleration");
   LSTR MSG_AMAX_A                         = _UxGT("Amax ") STR_A;
   LSTR MSG_AMAX_B                         = _UxGT("Amax ") STR_B;
   LSTR MSG_AMAX_C                         = _UxGT("Amax ") STR_C;
-  LSTR MSG_AMAX_I                         = _UxGT("Amax ") STR_I;
-  LSTR MSG_AMAX_J                         = _UxGT("Amax ") STR_J;
-  LSTR MSG_AMAX_K                         = _UxGT("Amax ") STR_K;
-  LSTR MSG_AMAX_E                         = _UxGT("Amax ") STR_E;
+  LSTR MSG_AMAX_N                         = _UxGT("Amax @");
+  LSTR MSG_AMAX_E                         = _UxGT("Amax E");
   LSTR MSG_AMAX_EN                        = _UxGT("Amax *");
   LSTR MSG_A_RETRACT                      = _UxGT("A-Retract");
   LSTR MSG_A_TRAVEL                       = _UxGT("A-Travel");
@@ -303,11 +297,9 @@ namespace Language_ro {
   LSTR MSG_A_STEPS                        = STR_A _UxGT(" steps/mm");
   LSTR MSG_B_STEPS                        = STR_B _UxGT(" steps/mm");
   LSTR MSG_C_STEPS                        = STR_C _UxGT(" steps/mm");
-  LSTR MSG_I_STEPS                        = STR_I _UxGT(" steps/mm");
-  LSTR MSG_J_STEPS                        = STR_J _UxGT(" steps/mm");
-  LSTR MSG_K_STEPS                        = STR_K _UxGT(" steps/mm");
-  LSTR MSG_E_STEPS                        = _UxGT("Esteps/mm");
-  LSTR MSG_EN_STEPS                       = _UxGT("*steps/mm");
+  LSTR MSG_N_STEPS                        = _UxGT("@ steps/mm");
+  LSTR MSG_E_STEPS                        = _UxGT("E steps/mm");
+  LSTR MSG_EN_STEPS                       = _UxGT("* steps/mm");
   LSTR MSG_TEMPERATURE                    = _UxGT("Temperature");
   LSTR MSG_MOTION                         = _UxGT("Motion");
   LSTR MSG_FILAMENT                       = _UxGT("Filament");
@@ -435,6 +427,7 @@ namespace Language_ro {
   LSTR MSG_BABYSTEP_X                     = _UxGT("Babystep X");
   LSTR MSG_BABYSTEP_Y                     = _UxGT("Babystep Y");
   LSTR MSG_BABYSTEP_Z                     = _UxGT("Babystep Z");
+  LSTR MSG_BABYSTEP_N                     = _UxGT("Babystep @");
   LSTR MSG_BABYSTEP_TOTAL                 = _UxGT("Total");
   LSTR MSG_ENDSTOP_ABORT                  = _UxGT("Endstop Abort");
   LSTR MSG_HEATING_FAILED_LCD             = _UxGT("Heating Failed");
@@ -503,13 +496,7 @@ namespace Language_ro {
   LSTR MSG_INFO_MAX_TEMP                  = _UxGT("Temperatura Maxima");
   LSTR MSG_INFO_PSU                       = _UxGT("PSU");
   LSTR MSG_DRIVE_STRENGTH                 = _UxGT("Drive Strength");
-  LSTR MSG_DAC_PERCENT_A                  = STR_A _UxGT(" Driver %");
-  LSTR MSG_DAC_PERCENT_B                  = STR_B _UxGT(" Driver %");
-  LSTR MSG_DAC_PERCENT_C                  = STR_C _UxGT(" Driver %");
-  LSTR MSG_DAC_PERCENT_I                  = STR_I _UxGT(" Driver %");
-  LSTR MSG_DAC_PERCENT_J                  = STR_J _UxGT(" Driver %");
-  LSTR MSG_DAC_PERCENT_K                  = STR_K _UxGT(" Driver %");
-  LSTR MSG_DAC_PERCENT_E                  = _UxGT("E Driver %");
+  LSTR MSG_DAC_PERCENT_N                  = _UxGT("@ Driver %");
   LSTR MSG_ERROR_TMC                      = _UxGT("TMC CONNECTION ERROR");
   LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("DAC EEPROM Write");
   LSTR MSG_FILAMENT_CHANGE_HEADER         = _UxGT("FILAMENT CHANGE");

commit 1e749e4f48f528179213e736c99371843a90b4fb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu May 12 20:13:59 2022 -0500

    🧑‍💻 Misc. LCD cleanup

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index c3fc37bf48..79421752af 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -260,8 +260,8 @@ namespace Language_ro {
   LSTR MSG_PID_AUTOTUNE                   = _UxGT("PID Autotune");
   LSTR MSG_PID_AUTOTUNE_E                 = _UxGT("PID Autotune *");
   LSTR MSG_PID_AUTOTUNE_DONE              = _UxGT("PID tuning done");
-  LSTR MSG_PID_BAD_EXTRUDER_NUM           = _UxGT("Autotune failed. Bad extruder.");
-  LSTR MSG_PID_TEMP_TOO_HIGH              = _UxGT("Autotune failed. Temperature too high.");
+  LSTR MSG_PID_BAD_EXTRUDER_NUM           = _UxGT("Autotune failed! Bad extruder.");
+  LSTR MSG_PID_TEMP_TOO_HIGH              = _UxGT("Autotune failed! Temperature too high.");
   LSTR MSG_PID_TIMEOUT                    = _UxGT("Autotune failed! Timeout.");
   LSTR MSG_SELECT                         = _UxGT("Select");
   LSTR MSG_SELECT_E                       = _UxGT("Select *");

commit 23a26e4033763b4c7b8763fd420211423e558d08
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed May 4 17:03:25 2022 -0500

    🌐 Clean up languages

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index f51179829a..c3fc37bf48 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -68,7 +68,6 @@ namespace Language_ro {
   LSTR MSG_Z_FADE_HEIGHT                  = _UxGT("Fade Inaltime");
   LSTR MSG_SET_HOME_OFFSETS               = _UxGT("Seteaza Offseturile Acasa");
   LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("Offseturi Aplicate");
-  LSTR MSG_SET_ORIGIN                     = _UxGT("Seteaza Originea");
   #if HAS_PREHEAT
     LSTR MSG_PREHEAT_1                    = _UxGT("Preincalzeste ") PREHEAT_1_LABEL;
     LSTR MSG_PREHEAT_1_H                  = _UxGT("Preincalzeste ") PREHEAT_1_LABEL " ~";

commit 9665a4434cee0386fa2a63a058b6f2598943ee98
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jan 10 02:51:34 2022 -0600

    🧑‍💻 Fewer string macros

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 29cdc51c80..f51179829a 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -268,45 +268,45 @@ namespace Language_ro {
   LSTR MSG_SELECT_E                       = _UxGT("Select *");
   LSTR MSG_ACC                            = _UxGT("Accel");
   LSTR MSG_JERK                           = _UxGT("Jerk");
-  LSTR MSG_VA_JERK                        = _UxGT("V") LCD_STR_A _UxGT("-Jerk");
-  LSTR MSG_VB_JERK                        = _UxGT("V") LCD_STR_B _UxGT("-Jerk");
-  LSTR MSG_VC_JERK                        = _UxGT("V") LCD_STR_C _UxGT("-Jerk");
-  LSTR MSG_VI_JERK                        = _UxGT("V") LCD_STR_I _UxGT("-Jerk");
-  LSTR MSG_VJ_JERK                        = _UxGT("V") LCD_STR_J _UxGT("-Jerk");
-  LSTR MSG_VK_JERK                        = _UxGT("V") LCD_STR_K _UxGT("-Jerk");
+  LSTR MSG_VA_JERK                        = _UxGT("V") STR_A _UxGT("-Jerk");
+  LSTR MSG_VB_JERK                        = _UxGT("V") STR_B _UxGT("-Jerk");
+  LSTR MSG_VC_JERK                        = _UxGT("V") STR_C _UxGT("-Jerk");
+  LSTR MSG_VI_JERK                        = _UxGT("V") STR_I _UxGT("-Jerk");
+  LSTR MSG_VJ_JERK                        = _UxGT("V") STR_J _UxGT("-Jerk");
+  LSTR MSG_VK_JERK                        = _UxGT("V") STR_K _UxGT("-Jerk");
   LSTR MSG_VE_JERK                        = _UxGT("Ve-Jerk");
   LSTR MSG_JUNCTION_DEVIATION             = _UxGT("Junction Dev");
   LSTR MSG_VELOCITY                       = _UxGT("Velocity");
-  LSTR MSG_VMAX_A                         = _UxGT("Vmax ") LCD_STR_A;
-  LSTR MSG_VMAX_B                         = _UxGT("Vmax ") LCD_STR_B;
-  LSTR MSG_VMAX_C                         = _UxGT("Vmax ") LCD_STR_C;
-  LSTR MSG_VMAX_I                         = _UxGT("Vmax ") LCD_STR_I;
-  LSTR MSG_VMAX_J                         = _UxGT("Vmax ") LCD_STR_J;
-  LSTR MSG_VMAX_K                         = _UxGT("Vmax ") LCD_STR_K;
-  LSTR MSG_VMAX_E                         = _UxGT("Vmax ") LCD_STR_E;
+  LSTR MSG_VMAX_A                         = _UxGT("Vmax ") STR_A;
+  LSTR MSG_VMAX_B                         = _UxGT("Vmax ") STR_B;
+  LSTR MSG_VMAX_C                         = _UxGT("Vmax ") STR_C;
+  LSTR MSG_VMAX_I                         = _UxGT("Vmax ") STR_I;
+  LSTR MSG_VMAX_J                         = _UxGT("Vmax ") STR_J;
+  LSTR MSG_VMAX_K                         = _UxGT("Vmax ") STR_K;
+  LSTR MSG_VMAX_E                         = _UxGT("Vmax ") STR_E;
   LSTR MSG_VMAX_EN                        = _UxGT("Vmax *");
   LSTR MSG_VMIN                           = _UxGT("Vmin");
   LSTR MSG_VTRAV_MIN                      = _UxGT("VTrav Min");
   LSTR MSG_ACCELERATION                   = _UxGT("Acceleration");
-  LSTR MSG_AMAX_A                         = _UxGT("Amax ") LCD_STR_A;
-  LSTR MSG_AMAX_B                         = _UxGT("Amax ") LCD_STR_B;
-  LSTR MSG_AMAX_C                         = _UxGT("Amax ") LCD_STR_C;
-  LSTR MSG_AMAX_I                         = _UxGT("Amax ") LCD_STR_I;
-  LSTR MSG_AMAX_J                         = _UxGT("Amax ") LCD_STR_J;
-  LSTR MSG_AMAX_K                         = _UxGT("Amax ") LCD_STR_K;
-  LSTR MSG_AMAX_E                         = _UxGT("Amax ") LCD_STR_E;
+  LSTR MSG_AMAX_A                         = _UxGT("Amax ") STR_A;
+  LSTR MSG_AMAX_B                         = _UxGT("Amax ") STR_B;
+  LSTR MSG_AMAX_C                         = _UxGT("Amax ") STR_C;
+  LSTR MSG_AMAX_I                         = _UxGT("Amax ") STR_I;
+  LSTR MSG_AMAX_J                         = _UxGT("Amax ") STR_J;
+  LSTR MSG_AMAX_K                         = _UxGT("Amax ") STR_K;
+  LSTR MSG_AMAX_E                         = _UxGT("Amax ") STR_E;
   LSTR MSG_AMAX_EN                        = _UxGT("Amax *");
   LSTR MSG_A_RETRACT                      = _UxGT("A-Retract");
   LSTR MSG_A_TRAVEL                       = _UxGT("A-Travel");
   LSTR MSG_XY_FREQUENCY_LIMIT             = _UxGT("Frequency max");
   LSTR MSG_XY_FREQUENCY_FEEDRATE          = _UxGT("Feed min");
   LSTR MSG_STEPS_PER_MM                   = _UxGT("Steps/mm");
-  LSTR MSG_A_STEPS                        = LCD_STR_A _UxGT(" steps/mm");
-  LSTR MSG_B_STEPS                        = LCD_STR_B _UxGT(" steps/mm");
-  LSTR MSG_C_STEPS                        = LCD_STR_C _UxGT(" steps/mm");
-  LSTR MSG_I_STEPS                        = LCD_STR_I _UxGT(" steps/mm");
-  LSTR MSG_J_STEPS                        = LCD_STR_J _UxGT(" steps/mm");
-  LSTR MSG_K_STEPS                        = LCD_STR_K _UxGT(" steps/mm");
+  LSTR MSG_A_STEPS                        = STR_A _UxGT(" steps/mm");
+  LSTR MSG_B_STEPS                        = STR_B _UxGT(" steps/mm");
+  LSTR MSG_C_STEPS                        = STR_C _UxGT(" steps/mm");
+  LSTR MSG_I_STEPS                        = STR_I _UxGT(" steps/mm");
+  LSTR MSG_J_STEPS                        = STR_J _UxGT(" steps/mm");
+  LSTR MSG_K_STEPS                        = STR_K _UxGT(" steps/mm");
   LSTR MSG_E_STEPS                        = _UxGT("Esteps/mm");
   LSTR MSG_EN_STEPS                       = _UxGT("*steps/mm");
   LSTR MSG_TEMPERATURE                    = _UxGT("Temperature");
@@ -504,12 +504,12 @@ namespace Language_ro {
   LSTR MSG_INFO_MAX_TEMP                  = _UxGT("Temperatura Maxima");
   LSTR MSG_INFO_PSU                       = _UxGT("PSU");
   LSTR MSG_DRIVE_STRENGTH                 = _UxGT("Drive Strength");
-  LSTR MSG_DAC_PERCENT_A                  = LCD_STR_A _UxGT(" Driver %");
-  LSTR MSG_DAC_PERCENT_B                  = LCD_STR_B _UxGT(" Driver %");
-  LSTR MSG_DAC_PERCENT_C                  = LCD_STR_C _UxGT(" Driver %");
-  LSTR MSG_DAC_PERCENT_I                  = LCD_STR_I _UxGT(" Driver %");
-  LSTR MSG_DAC_PERCENT_J                  = LCD_STR_J _UxGT(" Driver %");
-  LSTR MSG_DAC_PERCENT_K                  = LCD_STR_K _UxGT(" Driver %");
+  LSTR MSG_DAC_PERCENT_A                  = STR_A _UxGT(" Driver %");
+  LSTR MSG_DAC_PERCENT_B                  = STR_B _UxGT(" Driver %");
+  LSTR MSG_DAC_PERCENT_C                  = STR_C _UxGT(" Driver %");
+  LSTR MSG_DAC_PERCENT_I                  = STR_I _UxGT(" Driver %");
+  LSTR MSG_DAC_PERCENT_J                  = STR_J _UxGT(" Driver %");
+  LSTR MSG_DAC_PERCENT_K                  = STR_K _UxGT(" Driver %");
   LSTR MSG_DAC_PERCENT_E                  = _UxGT("E Driver %");
   LSTR MSG_ERROR_TMC                      = _UxGT("TMC CONNECTION ERROR");
   LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("DAC EEPROM Write");

commit d58daaa42c8e238b3e1eba4041ca5bcfa497c61f
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Tue Dec 28 00:23:50 2021 -0500

    🚸 DWIN Enhanced improve, fix, and extend (#23240)
    
    - Offset icon change to show mesh leveling status
    - Reset extruder position when enter to Move menu
    - New live end-stop diagnostic page
    - Editable firmware retracts settings for Tune and filament settings menu
    - Print Statistics page accessible from the Advanced Settings menu
    - Reset printer draws the boot image
    - Adds individual axes homing menu
    - Adds probe deploy/stow to Probe Settings menu
    - Updates lock screen
    - Rebuilds main buttons to support text caption in other languages
    - Increases probe offset limits to 60 mm
    - Fix M303 PID variable update
    - Fix Resume/Pause button update
    - Fix redraw of print done
    - Fix very large file name bug
    - Fix bug in bed manual leveling

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index fee63dc2ad..29cdc51c80 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -486,7 +486,7 @@ namespace Language_ro {
   LSTR MSG_CASE_LIGHT_BRIGHTNESS          = _UxGT("Light Brightness");
   LSTR MSG_KILL_EXPECTED_PRINTER          = _UxGT("INCORRECT PRINTER");
 
-#if LCD_WIDTH >= 20
+#if LCD_WIDTH >= 20 || HAS_DWIN_E3V2
   LSTR MSG_INFO_PRINT_COUNT               = _UxGT("Total Printuri");
   LSTR MSG_INFO_COMPLETED_PRINTS          = _UxGT("Completat");
   LSTR MSG_INFO_PRINT_TIME                = _UxGT("Timp Imprimare Total");

commit 1d80464ba77bc576426f15af28a633bf48d769ad
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 27 21:15:58 2021 -0500

    🎨 Define HAS_PREHEAT conditional

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 2eb4c0b996..fee63dc2ad 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -69,7 +69,7 @@ namespace Language_ro {
   LSTR MSG_SET_HOME_OFFSETS               = _UxGT("Seteaza Offseturile Acasa");
   LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("Offseturi Aplicate");
   LSTR MSG_SET_ORIGIN                     = _UxGT("Seteaza Originea");
-  #if PREHEAT_COUNT
+  #if HAS_PREHEAT
     LSTR MSG_PREHEAT_1                    = _UxGT("Preincalzeste ") PREHEAT_1_LABEL;
     LSTR MSG_PREHEAT_1_H                  = _UxGT("Preincalzeste ") PREHEAT_1_LABEL " ~";
     LSTR MSG_PREHEAT_1_END                = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul");
@@ -143,7 +143,7 @@ namespace Language_ro {
   LSTR MSG_UBL_DONE_EDITING_MESH          = _UxGT("Done Editing Mesh");
   LSTR MSG_UBL_BUILD_CUSTOM_MESH          = _UxGT("Build Custom Mesh");
   LSTR MSG_UBL_BUILD_MESH_MENU            = _UxGT("Build Mesh");
-  #if PREHEAT_COUNT
+  #if HAS_PREHEAT
     LSTR MSG_UBL_BUILD_MESH_M             = _UxGT("Build Mesh ($)");
     LSTR MSG_UBL_VALIDATE_MESH_M          = _UxGT("Validate Mesh ($)");
   #endif

commit 54d400608db83bfa606e1b757589c169c9a38fc2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Oct 4 00:24:41 2021 -0500

    🎨 Axis name string interpolation, with examples (#22879)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 6db2fe38fa..2eb4c0b996 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -120,9 +120,8 @@ namespace Language_ro {
   LSTR MSG_IDEX_MODE_DUPLICATE            = _UxGT("Duplication");
   LSTR MSG_IDEX_MODE_MIRRORED_COPY        = _UxGT("Mirrored Copy");
   LSTR MSG_IDEX_MODE_FULL_CTRL            = _UxGT("Full Control");
-  LSTR MSG_HOTEND_OFFSET_X                = _UxGT("2nd Nozzle X");
-  LSTR MSG_HOTEND_OFFSET_Y                = _UxGT("2nd Nozzle Y");
   LSTR MSG_HOTEND_OFFSET_Z                = _UxGT("2nd Nozzle Z");
+  LSTR MSG_HOTEND_OFFSET_A                = _UxGT("2nd Nozzle @");
   LSTR MSG_UBL_DOING_G29                  = _UxGT("Doing G29");
   LSTR MSG_UBL_TOOLS                      = _UxGT("UBL Tools");
   LSTR MSG_UBL_LEVEL_BED                  = _UxGT("Unified Bed Leveling");

commit 216a66b42c8240f37befe98e6a410d1e3694ff4e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Sep 19 19:25:01 2021 -0500

    🌐 Skip non-essential translations

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 364a83fb3f..6db2fe38fa 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -36,7 +36,6 @@ namespace Language_ro {
   LSTR LANGUAGE                           = _UxGT("Romanian");
 
   LSTR WELCOME_MSG                        = MACHINE_NAME _UxGT(" Pregatit.");
-  LSTR MSG_MARLIN                         = _UxGT("Marlin");
   LSTR MSG_YES                            = _UxGT("DA");
   LSTR MSG_NO                             = _UxGT("NU");
   LSTR MSG_BACK                           = _UxGT("Inapoi");
@@ -449,9 +448,6 @@ namespace Language_ro {
   LSTR MSG_ERR_MINTEMP                    = _UxGT("Err: MINTEMP");
   LSTR MSG_HALTED                         = _UxGT("PRINTER HALTED");
   LSTR MSG_PLEASE_RESET                   = _UxGT("Please Reset");
-  LSTR MSG_SHORT_DAY                      = _UxGT("d"); // One character only
-  LSTR MSG_SHORT_HOUR                     = _UxGT("h"); // One character only
-  LSTR MSG_SHORT_MINUTE                   = _UxGT("m"); // One character only
   LSTR MSG_HEATING                        = _UxGT("Heating...");
   LSTR MSG_COOLING                        = _UxGT("Cooling...");
   LSTR MSG_BED_HEATING                    = _UxGT("Bed Heating...");
@@ -618,12 +614,6 @@ namespace Language_ro {
   LSTR MSG_SERVICE_RESET                  = _UxGT("Reset");
   LSTR MSG_SERVICE_IN                     = _UxGT(" in:");
   LSTR MSG_BACKLASH                       = _UxGT("Backlash");
-  LSTR MSG_BACKLASH_A                     = LCD_STR_A;
-  LSTR MSG_BACKLASH_B                     = LCD_STR_B;
-  LSTR MSG_BACKLASH_C                     = LCD_STR_C;
-  LSTR MSG_BACKLASH_I                     = LCD_STR_I;
-  LSTR MSG_BACKLASH_J                     = LCD_STR_J;
-  LSTR MSG_BACKLASH_K                     = LCD_STR_K;
   LSTR MSG_BACKLASH_CORRECTION            = _UxGT("Corectare");
   LSTR MSG_BACKLASH_SMOOTHING             = _UxGT("Smoothing");
 

commit c1d7e234e1aba1ecc91cfc77d17d38b67618c315
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Sep 19 18:40:56 2021 -0500

    🌐 Reduce language file sizes

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index b1208eac25..364a83fb3f 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -32,606 +32,606 @@
 namespace Language_ro {
   using namespace Language_en; // Inherit undefined strings from English
 
-  constexpr uint8_t    CHARSIZE                            = 2;
-  PROGMEM Language_Str LANGUAGE                            = _UxGT("Romanian");
+  constexpr uint8_t CHARSIZE              = 2;
+  LSTR LANGUAGE                           = _UxGT("Romanian");
 
-  PROGMEM Language_Str WELCOME_MSG                         = MACHINE_NAME _UxGT(" Pregatit.");
-  PROGMEM Language_Str MSG_MARLIN                          = _UxGT("Marlin");
-  PROGMEM Language_Str MSG_YES                             = _UxGT("DA");
-  PROGMEM Language_Str MSG_NO                              = _UxGT("NU");
-  PROGMEM Language_Str MSG_BACK                            = _UxGT("Inapoi");
-  PROGMEM Language_Str MSG_MEDIA_ABORTING                  = _UxGT("Abandon...");
-  PROGMEM Language_Str MSG_MEDIA_INSERTED                  = _UxGT("Media Introdus");
-  PROGMEM Language_Str MSG_MEDIA_REMOVED                   = _UxGT("Media Inlaturat");
-  PROGMEM Language_Str MSG_MEDIA_WAITING                   = _UxGT("Astept Media");
-  PROGMEM Language_Str MSG_MEDIA_READ_ERROR                = _UxGT("Eroare Citire Media");
-  PROGMEM Language_Str MSG_MEDIA_USB_REMOVED               = _UxGT("Dispozitiv USB Inlaturat");
-  PROGMEM Language_Str MSG_MEDIA_USB_FAILED                = _UxGT("Pornire USB Esuata");
-  PROGMEM Language_Str MSG_KILL_SUBCALL_OVERFLOW           = _UxGT("Eroare:Subcall Overflow");
-  PROGMEM Language_Str MSG_LCD_ENDSTOPS                    = _UxGT("Endstops"); // Max length 8 characters
-  PROGMEM Language_Str MSG_LCD_SOFT_ENDSTOPS               = _UxGT("Soft Endstops");
-  PROGMEM Language_Str MSG_MAIN                            = _UxGT("Principal");
-  PROGMEM Language_Str MSG_ADVANCED_SETTINGS               = _UxGT("Setari Avansate");
-  PROGMEM Language_Str MSG_CONFIGURATION                   = _UxGT("Configurare");
-  PROGMEM Language_Str MSG_RUN_AUTO_FILES                  = _UxGT("Autostart");
-  PROGMEM Language_Str MSG_DISABLE_STEPPERS                = _UxGT("Dezactivare Motoare");
-  PROGMEM Language_Str MSG_DEBUG_MENU                      = _UxGT("Meniu Debug");
-  PROGMEM Language_Str MSG_PROGRESS_BAR_TEST               = _UxGT("Test Bara Progres");
-  PROGMEM Language_Str MSG_AUTO_HOME                       = _UxGT("Auto Acasa");
-  PROGMEM Language_Str MSG_AUTO_HOME_X                     = _UxGT("Acasa X");
-  PROGMEM Language_Str MSG_AUTO_HOME_Y                     = _UxGT("Acasa Y");
-  PROGMEM Language_Str MSG_AUTO_HOME_Z                     = _UxGT("Acasa Z");
-  PROGMEM Language_Str MSG_AUTO_Z_ALIGN                    = _UxGT("Auto Aliniere-Z");
-  PROGMEM Language_Str MSG_LEVEL_BED_HOMING                = _UxGT("Acasa XYZ");
-  PROGMEM Language_Str MSG_LEVEL_BED_WAITING               = _UxGT("Click pentru a incepe");
-  PROGMEM Language_Str MSG_LEVEL_BED_NEXT_POINT            = _UxGT("Urmatorul Punct");
-  PROGMEM Language_Str MSG_LEVEL_BED_DONE                  = _UxGT("Nivelare Terminata!");
-  PROGMEM Language_Str MSG_Z_FADE_HEIGHT                   = _UxGT("Fade Inaltime");
-  PROGMEM Language_Str MSG_SET_HOME_OFFSETS                = _UxGT("Seteaza Offseturile Acasa");
-  PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("Offseturi Aplicate");
-  PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("Seteaza Originea");
+  LSTR WELCOME_MSG                        = MACHINE_NAME _UxGT(" Pregatit.");
+  LSTR MSG_MARLIN                         = _UxGT("Marlin");
+  LSTR MSG_YES                            = _UxGT("DA");
+  LSTR MSG_NO                             = _UxGT("NU");
+  LSTR MSG_BACK                           = _UxGT("Inapoi");
+  LSTR MSG_MEDIA_ABORTING                 = _UxGT("Abandon...");
+  LSTR MSG_MEDIA_INSERTED                 = _UxGT("Media Introdus");
+  LSTR MSG_MEDIA_REMOVED                  = _UxGT("Media Inlaturat");
+  LSTR MSG_MEDIA_WAITING                  = _UxGT("Astept Media");
+  LSTR MSG_MEDIA_READ_ERROR               = _UxGT("Eroare Citire Media");
+  LSTR MSG_MEDIA_USB_REMOVED              = _UxGT("Dispozitiv USB Inlaturat");
+  LSTR MSG_MEDIA_USB_FAILED               = _UxGT("Pornire USB Esuata");
+  LSTR MSG_KILL_SUBCALL_OVERFLOW          = _UxGT("Eroare:Subcall Overflow");
+  LSTR MSG_LCD_ENDSTOPS                   = _UxGT("Endstops"); // Max length 8 characters
+  LSTR MSG_LCD_SOFT_ENDSTOPS              = _UxGT("Soft Endstops");
+  LSTR MSG_MAIN                           = _UxGT("Principal");
+  LSTR MSG_ADVANCED_SETTINGS              = _UxGT("Setari Avansate");
+  LSTR MSG_CONFIGURATION                  = _UxGT("Configurare");
+  LSTR MSG_RUN_AUTO_FILES                 = _UxGT("Autostart");
+  LSTR MSG_DISABLE_STEPPERS               = _UxGT("Dezactivare Motoare");
+  LSTR MSG_DEBUG_MENU                     = _UxGT("Meniu Debug");
+  LSTR MSG_PROGRESS_BAR_TEST              = _UxGT("Test Bara Progres");
+  LSTR MSG_AUTO_HOME                      = _UxGT("Auto Acasa");
+  LSTR MSG_AUTO_HOME_X                    = _UxGT("Acasa X");
+  LSTR MSG_AUTO_HOME_Y                    = _UxGT("Acasa Y");
+  LSTR MSG_AUTO_HOME_Z                    = _UxGT("Acasa Z");
+  LSTR MSG_AUTO_Z_ALIGN                   = _UxGT("Auto Aliniere-Z");
+  LSTR MSG_LEVEL_BED_HOMING               = _UxGT("Acasa XYZ");
+  LSTR MSG_LEVEL_BED_WAITING              = _UxGT("Click pentru a incepe");
+  LSTR MSG_LEVEL_BED_NEXT_POINT           = _UxGT("Urmatorul Punct");
+  LSTR MSG_LEVEL_BED_DONE                 = _UxGT("Nivelare Terminata!");
+  LSTR MSG_Z_FADE_HEIGHT                  = _UxGT("Fade Inaltime");
+  LSTR MSG_SET_HOME_OFFSETS               = _UxGT("Seteaza Offseturile Acasa");
+  LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("Offseturi Aplicate");
+  LSTR MSG_SET_ORIGIN                     = _UxGT("Seteaza Originea");
   #if PREHEAT_COUNT
-    PROGMEM Language_Str MSG_PREHEAT_1                     = _UxGT("Preincalzeste ") PREHEAT_1_LABEL;
-    PROGMEM Language_Str MSG_PREHEAT_1_H                   = _UxGT("Preincalzeste ") PREHEAT_1_LABEL " ~";
-    PROGMEM Language_Str MSG_PREHEAT_1_END                 = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul");
-    PROGMEM Language_Str MSG_PREHEAT_1_END_E               = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul ~");
-    PROGMEM Language_Str MSG_PREHEAT_1_ALL                 = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Tot");
-    PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY             = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Patul");
-    PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS            = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Conf");
+    LSTR MSG_PREHEAT_1                    = _UxGT("Preincalzeste ") PREHEAT_1_LABEL;
+    LSTR MSG_PREHEAT_1_H                  = _UxGT("Preincalzeste ") PREHEAT_1_LABEL " ~";
+    LSTR MSG_PREHEAT_1_END                = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul");
+    LSTR MSG_PREHEAT_1_END_E              = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul ~");
+    LSTR MSG_PREHEAT_1_ALL                = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Tot");
+    LSTR MSG_PREHEAT_1_BEDONLY            = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Patul");
+    LSTR MSG_PREHEAT_1_SETTINGS           = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Conf");
 
-    PROGMEM Language_Str MSG_PREHEAT_M                     = _UxGT("Preincalzeste $");
-    PROGMEM Language_Str MSG_PREHEAT_M_H                   = _UxGT("Preincalzeste $ ~");
-    PROGMEM Language_Str MSG_PREHEAT_M_END                 = _UxGT("Preincalzeste $ Capatul");
-    PROGMEM Language_Str MSG_PREHEAT_M_END_E               = _UxGT("Preincalzeste $ Capatul ~");
-    PROGMEM Language_Str MSG_PREHEAT_M_ALL                 = _UxGT("Preincalzeste $ Tot");
-    PROGMEM Language_Str MSG_PREHEAT_M_BEDONLY             = _UxGT("Preincalzeste $ Patul");
-    PROGMEM Language_Str MSG_PREHEAT_M_SETTINGS            = _UxGT("Preincalzeste $ Conf");
+    LSTR MSG_PREHEAT_M                    = _UxGT("Preincalzeste $");
+    LSTR MSG_PREHEAT_M_H                  = _UxGT("Preincalzeste $ ~");
+    LSTR MSG_PREHEAT_M_END                = _UxGT("Preincalzeste $ Capatul");
+    LSTR MSG_PREHEAT_M_END_E              = _UxGT("Preincalzeste $ Capatul ~");
+    LSTR MSG_PREHEAT_M_ALL                = _UxGT("Preincalzeste $ Tot");
+    LSTR MSG_PREHEAT_M_BEDONLY            = _UxGT("Preincalzeste $ Patul");
+    LSTR MSG_PREHEAT_M_SETTINGS           = _UxGT("Preincalzeste $ Conf");
   #endif
-  PROGMEM Language_Str MSG_PREHEAT_CUSTOM                  = _UxGT("Preincalzeste Personalizat");
-  PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("Racire");
-  PROGMEM Language_Str MSG_CUTTER_FREQUENCY                = _UxGT("Frecventa");
-  PROGMEM Language_Str MSG_LASER_MENU                      = _UxGT("Control Laser");
-  PROGMEM Language_Str MSG_LASER_POWER                     = _UxGT("Puterea Laserului");
-  PROGMEM Language_Str MSG_SPINDLE_MENU                    = _UxGT("Controlul Spindle");
-  PROGMEM Language_Str MSG_SPINDLE_POWER                   = _UxGT("Puterea Spindle");
-  PROGMEM Language_Str MSG_SPINDLE_REVERSE                 = _UxGT("Spindle Invers");
-  PROGMEM Language_Str MSG_SWITCH_PS_ON                    = _UxGT("Porneste");
-  PROGMEM Language_Str MSG_SWITCH_PS_OFF                   = _UxGT("Opreste");
-  PROGMEM Language_Str MSG_EXTRUDE                         = _UxGT("Extrudeaza");
-  PROGMEM Language_Str MSG_RETRACT                         = _UxGT("Retracteaza");
-  PROGMEM Language_Str MSG_MOVE_AXIS                       = _UxGT("Muta Axa");
-  PROGMEM Language_Str MSG_BED_LEVELING                    = _UxGT("Nivelarea Patului");
-  PROGMEM Language_Str MSG_LEVEL_BED                       = _UxGT("Niveleaza Patul");
-  PROGMEM Language_Str MSG_BED_TRAMMING                    = _UxGT("Niveleaza Colturile");
-  PROGMEM Language_Str MSG_NEXT_CORNER                     = _UxGT("Urmatorul Colt");
-  PROGMEM Language_Str MSG_MESH_EDITOR                     = _UxGT("Editor Mesh");
-  PROGMEM Language_Str MSG_EDIT_MESH                       = _UxGT("Editeaza Mesh");
-  PROGMEM Language_Str MSG_EDITING_STOPPED                 = _UxGT("Editarea Meshului Oprita");
-  PROGMEM Language_Str MSG_PROBING_POINT                   = _UxGT("Punctul de Probare");
-  PROGMEM Language_Str MSG_MESH_X                          = _UxGT("Index X");
-  PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("Index Y");
-  PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Valoare Z");
-  PROGMEM Language_Str MSG_CUSTOM_COMMANDS                 = _UxGT("Comenzi Personalizate");
-  PROGMEM Language_Str MSG_M48_TEST                        = _UxGT("M48 Probe Test");
-  PROGMEM Language_Str MSG_M48_POINT                       = _UxGT("M48 Point");
-  PROGMEM Language_Str MSG_M48_DEVIATION                   = _UxGT("Deviation");
-  PROGMEM Language_Str MSG_IDEX_MENU                       = _UxGT("IDEX Mode");
-  PROGMEM Language_Str MSG_OFFSETS_MENU                    = _UxGT("Tool Offsets");
-  PROGMEM Language_Str MSG_IDEX_MODE_AUTOPARK              = _UxGT("Auto-Park");
-  PROGMEM Language_Str MSG_IDEX_MODE_DUPLICATE             = _UxGT("Duplication");
-  PROGMEM Language_Str MSG_IDEX_MODE_MIRRORED_COPY         = _UxGT("Mirrored Copy");
-  PROGMEM Language_Str MSG_IDEX_MODE_FULL_CTRL             = _UxGT("Full Control");
-  PROGMEM Language_Str MSG_HOTEND_OFFSET_X                 = _UxGT("2nd Nozzle X");
-  PROGMEM Language_Str MSG_HOTEND_OFFSET_Y                 = _UxGT("2nd Nozzle Y");
-  PROGMEM Language_Str MSG_HOTEND_OFFSET_Z                 = _UxGT("2nd Nozzle Z");
-  PROGMEM Language_Str MSG_UBL_DOING_G29                   = _UxGT("Doing G29");
-  PROGMEM Language_Str MSG_UBL_TOOLS                       = _UxGT("UBL Tools");
-  PROGMEM Language_Str MSG_UBL_LEVEL_BED                   = _UxGT("Unified Bed Leveling");
-  PROGMEM Language_Str MSG_LCD_TILTING_MESH                = _UxGT("Tilting Point");
-  PROGMEM Language_Str MSG_UBL_MANUAL_MESH                 = _UxGT("Manually Build Mesh");
-  PROGMEM Language_Str MSG_UBL_BC_INSERT                   = _UxGT("Place Shim & Measure");
-  PROGMEM Language_Str MSG_UBL_BC_INSERT2                  = _UxGT("Measure");
-  PROGMEM Language_Str MSG_UBL_BC_REMOVE                   = _UxGT("Remove & Measure Bed");
-  PROGMEM Language_Str MSG_UBL_MOVING_TO_NEXT              = _UxGT("Moving to next");
-  PROGMEM Language_Str MSG_UBL_ACTIVATE_MESH               = _UxGT("Activate UBL");
-  PROGMEM Language_Str MSG_UBL_DEACTIVATE_MESH             = _UxGT("Deactivate UBL");
-  PROGMEM Language_Str MSG_UBL_SET_TEMP_BED                = _UxGT("Bed Temp");
-  PROGMEM Language_Str MSG_UBL_BED_TEMP_CUSTOM             = _UxGT("Bed Temp");
-  PROGMEM Language_Str MSG_UBL_SET_TEMP_HOTEND             = _UxGT("Hotend Temp");
-  PROGMEM Language_Str MSG_UBL_HOTEND_TEMP_CUSTOM          = _UxGT("Hotend Temp");
-  PROGMEM Language_Str MSG_UBL_MESH_EDIT                   = _UxGT("Mesh Edit");
-  PROGMEM Language_Str MSG_UBL_EDIT_CUSTOM_MESH            = _UxGT("Edit Custom Mesh");
-  PROGMEM Language_Str MSG_UBL_FINE_TUNE_MESH              = _UxGT("Fine Tuning Mesh");
-  PROGMEM Language_Str MSG_UBL_DONE_EDITING_MESH           = _UxGT("Done Editing Mesh");
-  PROGMEM Language_Str MSG_UBL_BUILD_CUSTOM_MESH           = _UxGT("Build Custom Mesh");
-  PROGMEM Language_Str MSG_UBL_BUILD_MESH_MENU             = _UxGT("Build Mesh");
+  LSTR MSG_PREHEAT_CUSTOM                 = _UxGT("Preincalzeste Personalizat");
+  LSTR MSG_COOLDOWN                       = _UxGT("Racire");
+  LSTR MSG_CUTTER_FREQUENCY               = _UxGT("Frecventa");
+  LSTR MSG_LASER_MENU                     = _UxGT("Control Laser");
+  LSTR MSG_LASER_POWER                    = _UxGT("Puterea Laserului");
+  LSTR MSG_SPINDLE_MENU                   = _UxGT("Controlul Spindle");
+  LSTR MSG_SPINDLE_POWER                  = _UxGT("Puterea Spindle");
+  LSTR MSG_SPINDLE_REVERSE                = _UxGT("Spindle Invers");
+  LSTR MSG_SWITCH_PS_ON                   = _UxGT("Porneste");
+  LSTR MSG_SWITCH_PS_OFF                  = _UxGT("Opreste");
+  LSTR MSG_EXTRUDE                        = _UxGT("Extrudeaza");
+  LSTR MSG_RETRACT                        = _UxGT("Retracteaza");
+  LSTR MSG_MOVE_AXIS                      = _UxGT("Muta Axa");
+  LSTR MSG_BED_LEVELING                   = _UxGT("Nivelarea Patului");
+  LSTR MSG_LEVEL_BED                      = _UxGT("Niveleaza Patul");
+  LSTR MSG_BED_TRAMMING                   = _UxGT("Niveleaza Colturile");
+  LSTR MSG_NEXT_CORNER                    = _UxGT("Urmatorul Colt");
+  LSTR MSG_MESH_EDITOR                    = _UxGT("Editor Mesh");
+  LSTR MSG_EDIT_MESH                      = _UxGT("Editeaza Mesh");
+  LSTR MSG_EDITING_STOPPED                = _UxGT("Editarea Meshului Oprita");
+  LSTR MSG_PROBING_POINT                  = _UxGT("Punctul de Probare");
+  LSTR MSG_MESH_X                         = _UxGT("Index X");
+  LSTR MSG_MESH_Y                         = _UxGT("Index Y");
+  LSTR MSG_MESH_EDIT_Z                    = _UxGT("Valoare Z");
+  LSTR MSG_CUSTOM_COMMANDS                = _UxGT("Comenzi Personalizate");
+  LSTR MSG_M48_TEST                       = _UxGT("M48 Probe Test");
+  LSTR MSG_M48_POINT                      = _UxGT("M48 Point");
+  LSTR MSG_M48_DEVIATION                  = _UxGT("Deviation");
+  LSTR MSG_IDEX_MENU                      = _UxGT("IDEX Mode");
+  LSTR MSG_OFFSETS_MENU                   = _UxGT("Tool Offsets");
+  LSTR MSG_IDEX_MODE_AUTOPARK             = _UxGT("Auto-Park");
+  LSTR MSG_IDEX_MODE_DUPLICATE            = _UxGT("Duplication");
+  LSTR MSG_IDEX_MODE_MIRRORED_COPY        = _UxGT("Mirrored Copy");
+  LSTR MSG_IDEX_MODE_FULL_CTRL            = _UxGT("Full Control");
+  LSTR MSG_HOTEND_OFFSET_X                = _UxGT("2nd Nozzle X");
+  LSTR MSG_HOTEND_OFFSET_Y                = _UxGT("2nd Nozzle Y");
+  LSTR MSG_HOTEND_OFFSET_Z                = _UxGT("2nd Nozzle Z");
+  LSTR MSG_UBL_DOING_G29                  = _UxGT("Doing G29");
+  LSTR MSG_UBL_TOOLS                      = _UxGT("UBL Tools");
+  LSTR MSG_UBL_LEVEL_BED                  = _UxGT("Unified Bed Leveling");
+  LSTR MSG_LCD_TILTING_MESH               = _UxGT("Tilting Point");
+  LSTR MSG_UBL_MANUAL_MESH                = _UxGT("Manually Build Mesh");
+  LSTR MSG_UBL_BC_INSERT                  = _UxGT("Place Shim & Measure");
+  LSTR MSG_UBL_BC_INSERT2                 = _UxGT("Measure");
+  LSTR MSG_UBL_BC_REMOVE                  = _UxGT("Remove & Measure Bed");
+  LSTR MSG_UBL_MOVING_TO_NEXT             = _UxGT("Moving to next");
+  LSTR MSG_UBL_ACTIVATE_MESH              = _UxGT("Activate UBL");
+  LSTR MSG_UBL_DEACTIVATE_MESH            = _UxGT("Deactivate UBL");
+  LSTR MSG_UBL_SET_TEMP_BED               = _UxGT("Bed Temp");
+  LSTR MSG_UBL_BED_TEMP_CUSTOM            = _UxGT("Bed Temp");
+  LSTR MSG_UBL_SET_TEMP_HOTEND            = _UxGT("Hotend Temp");
+  LSTR MSG_UBL_HOTEND_TEMP_CUSTOM         = _UxGT("Hotend Temp");
+  LSTR MSG_UBL_MESH_EDIT                  = _UxGT("Mesh Edit");
+  LSTR MSG_UBL_EDIT_CUSTOM_MESH           = _UxGT("Edit Custom Mesh");
+  LSTR MSG_UBL_FINE_TUNE_MESH             = _UxGT("Fine Tuning Mesh");
+  LSTR MSG_UBL_DONE_EDITING_MESH          = _UxGT("Done Editing Mesh");
+  LSTR MSG_UBL_BUILD_CUSTOM_MESH          = _UxGT("Build Custom Mesh");
+  LSTR MSG_UBL_BUILD_MESH_MENU            = _UxGT("Build Mesh");
   #if PREHEAT_COUNT
-    PROGMEM Language_Str MSG_UBL_BUILD_MESH_M              = _UxGT("Build Mesh ($)");
-    PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M           = _UxGT("Validate Mesh ($)");
+    LSTR MSG_UBL_BUILD_MESH_M             = _UxGT("Build Mesh ($)");
+    LSTR MSG_UBL_VALIDATE_MESH_M          = _UxGT("Validate Mesh ($)");
   #endif
-  PROGMEM Language_Str MSG_UBL_BUILD_COLD_MESH             = _UxGT("Build Cold Mesh");
-  PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_ADJUST          = _UxGT("Adjust Mesh Height");
-  PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_AMOUNT          = _UxGT("Height Amount");
-  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_MENU          = _UxGT("Validate Mesh");
-  PROGMEM Language_Str MSG_UBL_VALIDATE_CUSTOM_MESH        = _UxGT("Validate Custom Mesh");
-  PROGMEM Language_Str MSG_G26_HEATING_BED                 = _UxGT("G26 Heating Bed");
-  PROGMEM Language_Str MSG_G26_HEATING_NOZZLE              = _UxGT("G26 Heating Nozzle");
-  PROGMEM Language_Str MSG_G26_MANUAL_PRIME                = _UxGT("Manual priming...");
-  PROGMEM Language_Str MSG_G26_FIXED_LENGTH                = _UxGT("Fixed Length Prime");
-  PROGMEM Language_Str MSG_G26_PRIME_DONE                  = _UxGT("Done Priming");
-  PROGMEM Language_Str MSG_G26_CANCELED                    = _UxGT("G26 Canceled");
-  PROGMEM Language_Str MSG_G26_LEAVING                     = _UxGT("Leaving G26");
-  PROGMEM Language_Str MSG_UBL_CONTINUE_MESH               = _UxGT("Continue Bed Mesh");
-  PROGMEM Language_Str MSG_UBL_MESH_LEVELING               = _UxGT("Mesh Leveling");
-  PROGMEM Language_Str MSG_UBL_3POINT_MESH_LEVELING        = _UxGT("3-Point Leveling");
-  PROGMEM Language_Str MSG_UBL_GRID_MESH_LEVELING          = _UxGT("Grid Mesh Leveling");
-  PROGMEM Language_Str MSG_UBL_MESH_LEVEL                  = _UxGT("Level Mesh");
-  PROGMEM Language_Str MSG_UBL_SIDE_POINTS                 = _UxGT("Side Points");
-  PROGMEM Language_Str MSG_UBL_MAP_TYPE                    = _UxGT("Map Type");
-  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP                  = _UxGT("Output Mesh Map");
-  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_HOST             = _UxGT("Output for Host");
-  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_CSV              = _UxGT("Output for CSV");
-  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_BACKUP           = _UxGT("Off Imprimanta Backup");
-  PROGMEM Language_Str MSG_UBL_INFO_UBL                    = _UxGT("Output UBL Info");
-  PROGMEM Language_Str MSG_UBL_FILLIN_AMOUNT               = _UxGT("Fill-in Amount");
-  PROGMEM Language_Str MSG_UBL_MANUAL_FILLIN               = _UxGT("Manual Fill-in");
-  PROGMEM Language_Str MSG_UBL_SMART_FILLIN                = _UxGT("Smart Fill-in");
-  PROGMEM Language_Str MSG_UBL_FILLIN_MESH                 = _UxGT("Fill-in Mesh");
-  PROGMEM Language_Str MSG_UBL_INVALIDATE_ALL              = _UxGT("Invalidate All");
-  PROGMEM Language_Str MSG_UBL_INVALIDATE_CLOSEST          = _UxGT("Invalidate Closest");
-  PROGMEM Language_Str MSG_UBL_FINE_TUNE_ALL               = _UxGT("Fine Tune All");
-  PROGMEM Language_Str MSG_UBL_FINE_TUNE_CLOSEST           = _UxGT("Fine Tune Closest");
-  PROGMEM Language_Str MSG_UBL_STORAGE_MESH_MENU           = _UxGT("Mesh Storage");
-  PROGMEM Language_Str MSG_UBL_STORAGE_SLOT                = _UxGT("Memory Slot");
-  PROGMEM Language_Str MSG_UBL_LOAD_MESH                   = _UxGT("Load Bed Mesh");
-  PROGMEM Language_Str MSG_UBL_SAVE_MESH                   = _UxGT("Save Bed Mesh");
-  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("Mesh %i Loaded");
-  PROGMEM Language_Str MSG_MESH_SAVED                      = _UxGT("Mesh %i Saved");
-  PROGMEM Language_Str MSG_UBL_NO_STORAGE                  = _UxGT("No Storage");
-  PROGMEM Language_Str MSG_UBL_SAVE_ERROR                  = _UxGT("Err: UBL Save");
-  PROGMEM Language_Str MSG_UBL_RESTORE_ERROR               = _UxGT("Err: UBL Restore");
-  PROGMEM Language_Str MSG_UBL_Z_OFFSET                    = _UxGT("Z-Offset: ");
-  PROGMEM Language_Str MSG_UBL_Z_OFFSET_STOPPED            = _UxGT("Z-Offset Stopped");
-  PROGMEM Language_Str MSG_UBL_STEP_BY_STEP_MENU           = _UxGT("Step-By-Step UBL");
-  PROGMEM Language_Str MSG_UBL_1_BUILD_COLD_MESH           = _UxGT("1. Build Cold Mesh");
-  PROGMEM Language_Str MSG_UBL_2_SMART_FILLIN              = _UxGT("2. Smart Fill-in");
-  PROGMEM Language_Str MSG_UBL_3_VALIDATE_MESH_MENU        = _UxGT("3. Validate Mesh");
-  PROGMEM Language_Str MSG_UBL_4_FINE_TUNE_ALL             = _UxGT("4. Fine Tune All");
-  PROGMEM Language_Str MSG_UBL_5_VALIDATE_MESH_MENU        = _UxGT("5. Validate Mesh");
-  PROGMEM Language_Str MSG_UBL_6_FINE_TUNE_ALL             = _UxGT("6. Fine Tune All");
-  PROGMEM Language_Str MSG_UBL_7_SAVE_MESH                 = _UxGT("7. Save Bed Mesh");
+  LSTR MSG_UBL_BUILD_COLD_MESH            = _UxGT("Build Cold Mesh");
+  LSTR MSG_UBL_MESH_HEIGHT_ADJUST         = _UxGT("Adjust Mesh Height");
+  LSTR MSG_UBL_MESH_HEIGHT_AMOUNT         = _UxGT("Height Amount");
+  LSTR MSG_UBL_VALIDATE_MESH_MENU         = _UxGT("Validate Mesh");
+  LSTR MSG_UBL_VALIDATE_CUSTOM_MESH       = _UxGT("Validate Custom Mesh");
+  LSTR MSG_G26_HEATING_BED                = _UxGT("G26 Heating Bed");
+  LSTR MSG_G26_HEATING_NOZZLE             = _UxGT("G26 Heating Nozzle");
+  LSTR MSG_G26_MANUAL_PRIME               = _UxGT("Manual priming...");
+  LSTR MSG_G26_FIXED_LENGTH               = _UxGT("Fixed Length Prime");
+  LSTR MSG_G26_PRIME_DONE                 = _UxGT("Done Priming");
+  LSTR MSG_G26_CANCELED                   = _UxGT("G26 Canceled");
+  LSTR MSG_G26_LEAVING                    = _UxGT("Leaving G26");
+  LSTR MSG_UBL_CONTINUE_MESH              = _UxGT("Continue Bed Mesh");
+  LSTR MSG_UBL_MESH_LEVELING              = _UxGT("Mesh Leveling");
+  LSTR MSG_UBL_3POINT_MESH_LEVELING       = _UxGT("3-Point Leveling");
+  LSTR MSG_UBL_GRID_MESH_LEVELING         = _UxGT("Grid Mesh Leveling");
+  LSTR MSG_UBL_MESH_LEVEL                 = _UxGT("Level Mesh");
+  LSTR MSG_UBL_SIDE_POINTS                = _UxGT("Side Points");
+  LSTR MSG_UBL_MAP_TYPE                   = _UxGT("Map Type");
+  LSTR MSG_UBL_OUTPUT_MAP                 = _UxGT("Output Mesh Map");
+  LSTR MSG_UBL_OUTPUT_MAP_HOST            = _UxGT("Output for Host");
+  LSTR MSG_UBL_OUTPUT_MAP_CSV             = _UxGT("Output for CSV");
+  LSTR MSG_UBL_OUTPUT_MAP_BACKUP          = _UxGT("Off Imprimanta Backup");
+  LSTR MSG_UBL_INFO_UBL                   = _UxGT("Output UBL Info");
+  LSTR MSG_UBL_FILLIN_AMOUNT              = _UxGT("Fill-in Amount");
+  LSTR MSG_UBL_MANUAL_FILLIN              = _UxGT("Manual Fill-in");
+  LSTR MSG_UBL_SMART_FILLIN               = _UxGT("Smart Fill-in");
+  LSTR MSG_UBL_FILLIN_MESH                = _UxGT("Fill-in Mesh");
+  LSTR MSG_UBL_INVALIDATE_ALL             = _UxGT("Invalidate All");
+  LSTR MSG_UBL_INVALIDATE_CLOSEST         = _UxGT("Invalidate Closest");
+  LSTR MSG_UBL_FINE_TUNE_ALL              = _UxGT("Fine Tune All");
+  LSTR MSG_UBL_FINE_TUNE_CLOSEST          = _UxGT("Fine Tune Closest");
+  LSTR MSG_UBL_STORAGE_MESH_MENU          = _UxGT("Mesh Storage");
+  LSTR MSG_UBL_STORAGE_SLOT               = _UxGT("Memory Slot");
+  LSTR MSG_UBL_LOAD_MESH                  = _UxGT("Load Bed Mesh");
+  LSTR MSG_UBL_SAVE_MESH                  = _UxGT("Save Bed Mesh");
+  LSTR MSG_MESH_LOADED                    = _UxGT("Mesh %i Loaded");
+  LSTR MSG_MESH_SAVED                     = _UxGT("Mesh %i Saved");
+  LSTR MSG_UBL_NO_STORAGE                 = _UxGT("No Storage");
+  LSTR MSG_UBL_SAVE_ERROR                 = _UxGT("Err: UBL Save");
+  LSTR MSG_UBL_RESTORE_ERROR              = _UxGT("Err: UBL Restore");
+  LSTR MSG_UBL_Z_OFFSET                   = _UxGT("Z-Offset: ");
+  LSTR MSG_UBL_Z_OFFSET_STOPPED           = _UxGT("Z-Offset Stopped");
+  LSTR MSG_UBL_STEP_BY_STEP_MENU          = _UxGT("Step-By-Step UBL");
+  LSTR MSG_UBL_1_BUILD_COLD_MESH          = _UxGT("1. Build Cold Mesh");
+  LSTR MSG_UBL_2_SMART_FILLIN             = _UxGT("2. Smart Fill-in");
+  LSTR MSG_UBL_3_VALIDATE_MESH_MENU       = _UxGT("3. Validate Mesh");
+  LSTR MSG_UBL_4_FINE_TUNE_ALL            = _UxGT("4. Fine Tune All");
+  LSTR MSG_UBL_5_VALIDATE_MESH_MENU       = _UxGT("5. Validate Mesh");
+  LSTR MSG_UBL_6_FINE_TUNE_ALL            = _UxGT("6. Fine Tune All");
+  LSTR MSG_UBL_7_SAVE_MESH                = _UxGT("7. Save Bed Mesh");
 
-  PROGMEM Language_Str MSG_LED_CONTROL                     = _UxGT("LED Control");
-  PROGMEM Language_Str MSG_LEDS                            = _UxGT("Lights");
-  PROGMEM Language_Str MSG_LED_PRESETS                     = _UxGT("Light Presets");
-  PROGMEM Language_Str MSG_SET_LEDS_RED                    = _UxGT("Red");
-  PROGMEM Language_Str MSG_SET_LEDS_ORANGE                 = _UxGT("Orange");
-  PROGMEM Language_Str MSG_SET_LEDS_YELLOW                 = _UxGT("Yellow");
-  PROGMEM Language_Str MSG_SET_LEDS_GREEN                  = _UxGT("Green");
-  PROGMEM Language_Str MSG_SET_LEDS_BLUE                   = _UxGT("Blue");
-  PROGMEM Language_Str MSG_SET_LEDS_INDIGO                 = _UxGT("Indigo");
-  PROGMEM Language_Str MSG_SET_LEDS_VIOLET                 = _UxGT("Violet");
-  PROGMEM Language_Str MSG_SET_LEDS_WHITE                  = _UxGT("White");
-  PROGMEM Language_Str MSG_SET_LEDS_DEFAULT                = _UxGT("Default");
-  PROGMEM Language_Str MSG_CUSTOM_LEDS                     = _UxGT("Custom Lights");
-  PROGMEM Language_Str MSG_INTENSITY_R                     = _UxGT("Red Intensity");
-  PROGMEM Language_Str MSG_INTENSITY_G                     = _UxGT("Green Intensity");
-  PROGMEM Language_Str MSG_INTENSITY_B                     = _UxGT("Blue Intensity");
-  PROGMEM Language_Str MSG_INTENSITY_W                     = _UxGT("White Intensity");
-  PROGMEM Language_Str MSG_LED_BRIGHTNESS                  = _UxGT("Brightness");
+  LSTR MSG_LED_CONTROL                    = _UxGT("LED Control");
+  LSTR MSG_LEDS                           = _UxGT("Lights");
+  LSTR MSG_LED_PRESETS                    = _UxGT("Light Presets");
+  LSTR MSG_SET_LEDS_RED                   = _UxGT("Red");
+  LSTR MSG_SET_LEDS_ORANGE                = _UxGT("Orange");
+  LSTR MSG_SET_LEDS_YELLOW                = _UxGT("Yellow");
+  LSTR MSG_SET_LEDS_GREEN                 = _UxGT("Green");
+  LSTR MSG_SET_LEDS_BLUE                  = _UxGT("Blue");
+  LSTR MSG_SET_LEDS_INDIGO                = _UxGT("Indigo");
+  LSTR MSG_SET_LEDS_VIOLET                = _UxGT("Violet");
+  LSTR MSG_SET_LEDS_WHITE                 = _UxGT("White");
+  LSTR MSG_SET_LEDS_DEFAULT               = _UxGT("Default");
+  LSTR MSG_CUSTOM_LEDS                    = _UxGT("Custom Lights");
+  LSTR MSG_INTENSITY_R                    = _UxGT("Red Intensity");
+  LSTR MSG_INTENSITY_G                    = _UxGT("Green Intensity");
+  LSTR MSG_INTENSITY_B                    = _UxGT("Blue Intensity");
+  LSTR MSG_INTENSITY_W                    = _UxGT("White Intensity");
+  LSTR MSG_LED_BRIGHTNESS                 = _UxGT("Brightness");
 
-  PROGMEM Language_Str MSG_MOVING                          = _UxGT("Moving...");
-  PROGMEM Language_Str MSG_FREE_XY                         = _UxGT("Free XY");
-  PROGMEM Language_Str MSG_MOVE_X                          = _UxGT("Move X");
-  PROGMEM Language_Str MSG_MOVE_Y                          = _UxGT("Move Y");
-  PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("Move Z");
-  PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("Extruder");
-  PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("Extruder *");
-  PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("Capat Prea Rece");
-  PROGMEM Language_Str MSG_MOVE_N_MM                       = _UxGT("Move %smm");
-  PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("Move 0.1mm");
-  PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("Move 1mm");
-  PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("Move 10mm");
-  PROGMEM Language_Str MSG_MOVE_100MM                      = _UxGT("Move 100mm");
-  PROGMEM Language_Str MSG_SPEED                           = _UxGT("Speed");
-  PROGMEM Language_Str MSG_BED_Z                           = _UxGT("Bed Z");
-  PROGMEM Language_Str MSG_NOZZLE                          = _UxGT("Nozzle");
-  PROGMEM Language_Str MSG_NOZZLE_N                        = _UxGT("Nozzle ~");
-  PROGMEM Language_Str MSG_NOZZLE_PARKED                   = _UxGT("Nozzle Parked");
-  PROGMEM Language_Str MSG_NOZZLE_STANDBY                  = _UxGT("Nozzle Standby");
-  PROGMEM Language_Str MSG_BED                             = _UxGT("Bed");
-  PROGMEM Language_Str MSG_CHAMBER                         = _UxGT("Enclosure");
-  PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("Fan Speed");
-  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("Fan Speed ~");
-  PROGMEM Language_Str MSG_STORED_FAN_N                    = _UxGT("Stored Fan ~");
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("Extra Fan Speed");
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("Extra Fan Speed ~");
-  PROGMEM Language_Str MSG_CONTROLLER_FAN                  = _UxGT("Controller Fan");
-  PROGMEM Language_Str MSG_CONTROLLER_FAN_IDLE_SPEED       = _UxGT("Idle Speed");
-  PROGMEM Language_Str MSG_CONTROLLER_FAN_AUTO_ON          = _UxGT("Auto Mode");
-  PROGMEM Language_Str MSG_CONTROLLER_FAN_SPEED            = _UxGT("Active Speed");
-  PROGMEM Language_Str MSG_CONTROLLER_FAN_DURATION         = _UxGT("Idle Period");
-  PROGMEM Language_Str MSG_FLOW                            = _UxGT("Flow");
-  PROGMEM Language_Str MSG_FLOW_N                          = _UxGT("Flow ~");
-  PROGMEM Language_Str MSG_CONTROL                         = _UxGT("Control");
-  PROGMEM Language_Str MSG_MIN                             = " " LCD_STR_THERMOMETER _UxGT(" Min");
-  PROGMEM Language_Str MSG_MAX                             = " " LCD_STR_THERMOMETER _UxGT(" Max");
-  PROGMEM Language_Str MSG_FACTOR                          = " " LCD_STR_THERMOMETER _UxGT(" Fact");
-  PROGMEM Language_Str MSG_AUTOTEMP                        = _UxGT("Autotemp");
-  PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("On");
-  PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("Off");
-  PROGMEM Language_Str MSG_PID_AUTOTUNE                    = _UxGT("PID Autotune");
-  PROGMEM Language_Str MSG_PID_AUTOTUNE_E                  = _UxGT("PID Autotune *");
-  PROGMEM Language_Str MSG_PID_AUTOTUNE_DONE               = _UxGT("PID tuning done");
-  PROGMEM Language_Str MSG_PID_BAD_EXTRUDER_NUM            = _UxGT("Autotune failed. Bad extruder.");
-  PROGMEM Language_Str MSG_PID_TEMP_TOO_HIGH               = _UxGT("Autotune failed. Temperature too high.");
-  PROGMEM Language_Str MSG_PID_TIMEOUT                     = _UxGT("Autotune failed! Timeout.");
-  PROGMEM Language_Str MSG_SELECT                          = _UxGT("Select");
-  PROGMEM Language_Str MSG_SELECT_E                        = _UxGT("Select *");
-  PROGMEM Language_Str MSG_ACC                             = _UxGT("Accel");
-  PROGMEM Language_Str MSG_JERK                            = _UxGT("Jerk");
-  PROGMEM Language_Str MSG_VA_JERK                         = _UxGT("V") LCD_STR_A _UxGT("-Jerk");
-  PROGMEM Language_Str MSG_VB_JERK                         = _UxGT("V") LCD_STR_B _UxGT("-Jerk");
-  PROGMEM Language_Str MSG_VC_JERK                         = _UxGT("V") LCD_STR_C _UxGT("-Jerk");
-  PROGMEM Language_Str MSG_VI_JERK                         = _UxGT("V") LCD_STR_I _UxGT("-Jerk");
-  PROGMEM Language_Str MSG_VJ_JERK                         = _UxGT("V") LCD_STR_J _UxGT("-Jerk");
-  PROGMEM Language_Str MSG_VK_JERK                         = _UxGT("V") LCD_STR_K _UxGT("-Jerk");
-  PROGMEM Language_Str MSG_VE_JERK                         = _UxGT("Ve-Jerk");
-  PROGMEM Language_Str MSG_JUNCTION_DEVIATION              = _UxGT("Junction Dev");
-  PROGMEM Language_Str MSG_VELOCITY                        = _UxGT("Velocity");
-  PROGMEM Language_Str MSG_VMAX_A                          = _UxGT("Vmax ") LCD_STR_A;
-  PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("Vmax ") LCD_STR_B;
-  PROGMEM Language_Str MSG_VMAX_C                          = _UxGT("Vmax ") LCD_STR_C;
-  PROGMEM Language_Str MSG_VMAX_I                          = _UxGT("Vmax ") LCD_STR_I;
-  PROGMEM Language_Str MSG_VMAX_J                          = _UxGT("Vmax ") LCD_STR_J;
-  PROGMEM Language_Str MSG_VMAX_K                          = _UxGT("Vmax ") LCD_STR_K;
-  PROGMEM Language_Str MSG_VMAX_E                          = _UxGT("Vmax ") LCD_STR_E;
-  PROGMEM Language_Str MSG_VMAX_EN                         = _UxGT("Vmax *");
-  PROGMEM Language_Str MSG_VMIN                            = _UxGT("Vmin");
-  PROGMEM Language_Str MSG_VTRAV_MIN                       = _UxGT("VTrav Min");
-  PROGMEM Language_Str MSG_ACCELERATION                    = _UxGT("Acceleration");
-  PROGMEM Language_Str MSG_AMAX_A                          = _UxGT("Amax ") LCD_STR_A;
-  PROGMEM Language_Str MSG_AMAX_B                          = _UxGT("Amax ") LCD_STR_B;
-  PROGMEM Language_Str MSG_AMAX_C                          = _UxGT("Amax ") LCD_STR_C;
-  PROGMEM Language_Str MSG_AMAX_I                          = _UxGT("Amax ") LCD_STR_I;
-  PROGMEM Language_Str MSG_AMAX_J                          = _UxGT("Amax ") LCD_STR_J;
-  PROGMEM Language_Str MSG_AMAX_K                          = _UxGT("Amax ") LCD_STR_K;
-  PROGMEM Language_Str MSG_AMAX_E                          = _UxGT("Amax ") LCD_STR_E;
-  PROGMEM Language_Str MSG_AMAX_EN                         = _UxGT("Amax *");
-  PROGMEM Language_Str MSG_A_RETRACT                       = _UxGT("A-Retract");
-  PROGMEM Language_Str MSG_A_TRAVEL                        = _UxGT("A-Travel");
-  PROGMEM Language_Str MSG_XY_FREQUENCY_LIMIT              = _UxGT("Frequency max");
-  PROGMEM Language_Str MSG_XY_FREQUENCY_FEEDRATE           = _UxGT("Feed min");
-  PROGMEM Language_Str MSG_STEPS_PER_MM                    = _UxGT("Steps/mm");
-  PROGMEM Language_Str MSG_A_STEPS                         = LCD_STR_A _UxGT(" steps/mm");
-  PROGMEM Language_Str MSG_B_STEPS                         = LCD_STR_B _UxGT(" steps/mm");
-  PROGMEM Language_Str MSG_C_STEPS                         = LCD_STR_C _UxGT(" steps/mm");
-  PROGMEM Language_Str MSG_I_STEPS                         = LCD_STR_I _UxGT(" steps/mm");
-  PROGMEM Language_Str MSG_J_STEPS                         = LCD_STR_J _UxGT(" steps/mm");
-  PROGMEM Language_Str MSG_K_STEPS                         = LCD_STR_K _UxGT(" steps/mm");
-  PROGMEM Language_Str MSG_E_STEPS                         = _UxGT("Esteps/mm");
-  PROGMEM Language_Str MSG_EN_STEPS                        = _UxGT("*steps/mm");
-  PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Temperature");
-  PROGMEM Language_Str MSG_MOTION                          = _UxGT("Motion");
-  PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("Filament");
-  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("E in mm") SUPERSCRIPT_THREE;
-  PROGMEM Language_Str MSG_VOLUMETRIC_LIMIT                = _UxGT("E Limit in mm") SUPERSCRIPT_THREE;
-  PROGMEM Language_Str MSG_VOLUMETRIC_LIMIT_E              = _UxGT("E Limit *");
-  PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("Fil. Dia.");
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E                 = _UxGT("Fil. Dia. *");
-  PROGMEM Language_Str MSG_FILAMENT_UNLOAD                 = _UxGT("Unload mm");
-  PROGMEM Language_Str MSG_FILAMENT_LOAD                   = _UxGT("Load mm");
-  PROGMEM Language_Str MSG_ADVANCE_K                       = _UxGT("Advance K");
-  PROGMEM Language_Str MSG_ADVANCE_K_E                     = _UxGT("Advance K *");
-  PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("LCD Contrast");
-  PROGMEM Language_Str MSG_STORE_EEPROM                    = _UxGT("Store Settings");
-  PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("Load Settings");
-  PROGMEM Language_Str MSG_RESTORE_DEFAULTS                = _UxGT("Restore Defaults");
-  PROGMEM Language_Str MSG_INIT_EEPROM                     = _UxGT("Initialize EEPROM");
-  PROGMEM Language_Str MSG_ERR_EEPROM_CRC                  = _UxGT("EEPROM CRC Error");
-  PROGMEM Language_Str MSG_ERR_EEPROM_INDEX                = _UxGT("EEPROM Index Error");
-  PROGMEM Language_Str MSG_ERR_EEPROM_VERSION              = _UxGT("EEPROM Version Error");
-  PROGMEM Language_Str MSG_SETTINGS_STORED                 = _UxGT("Settings Stored");
-  PROGMEM Language_Str MSG_MEDIA_UPDATE                    = _UxGT("Media Update");
-  PROGMEM Language_Str MSG_RESET_PRINTER                   = _UxGT("Reset Imprimanta");
-  PROGMEM Language_Str MSG_REFRESH                         = LCD_STR_REFRESH  _UxGT("Refresh");
-  PROGMEM Language_Str MSG_INFO_SCREEN                     = _UxGT("Info Screen");
-  PROGMEM Language_Str MSG_PREPARE                         = _UxGT("Prepare");
-  PROGMEM Language_Str MSG_TUNE                            = _UxGT("Tune");
-  PROGMEM Language_Str MSG_POWER_MONITOR                   = _UxGT("Power monitor");
-  PROGMEM Language_Str MSG_CURRENT                         = _UxGT("Intensitate");
-  PROGMEM Language_Str MSG_VOLTAGE                         = _UxGT("Voltaj");
-  PROGMEM Language_Str MSG_POWER                           = _UxGT("Putere");
-  PROGMEM Language_Str MSG_START_PRINT                     = _UxGT("Start Imprimare");
-  PROGMEM Language_Str MSG_BUTTON_NEXT                     = _UxGT("Urmatorul");
-  PROGMEM Language_Str MSG_BUTTON_INIT                     = _UxGT("Initiere");
-  PROGMEM Language_Str MSG_BUTTON_STOP                     = _UxGT("Stop");
-  PROGMEM Language_Str MSG_BUTTON_PRINT                    = _UxGT("Imprimeaza");
-  PROGMEM Language_Str MSG_BUTTON_RESET                    = _UxGT("Reseteaza");
-  PROGMEM Language_Str MSG_BUTTON_IGNORE                   = _UxGT("Ignora");
-  PROGMEM Language_Str MSG_BUTTON_CANCEL                   = _UxGT("Anuleaza");
-  PROGMEM Language_Str MSG_BUTTON_DONE                     = _UxGT("OK");
-  PROGMEM Language_Str MSG_BUTTON_BACK                     = _UxGT("Inapoi");
-  PROGMEM Language_Str MSG_BUTTON_PROCEED                  = _UxGT("Proceed");
-  PROGMEM Language_Str MSG_PAUSING                         = _UxGT("Pausing...");
-  PROGMEM Language_Str MSG_PAUSE_PRINT                     = _UxGT("Pause Print");
-  PROGMEM Language_Str MSG_RESUME_PRINT                    = _UxGT("Resume Print");
-  PROGMEM Language_Str MSG_STOP_PRINT                      = _UxGT("Stop Print");
-  PROGMEM Language_Str MSG_PRINTING_OBJECT                 = _UxGT("Printing Object");
-  PROGMEM Language_Str MSG_CANCEL_OBJECT                   = _UxGT("Cancel Object");
-  PROGMEM Language_Str MSG_CANCEL_OBJECT_N                 = _UxGT("Cancel Object =");
-  PROGMEM Language_Str MSG_OUTAGE_RECOVERY                 = _UxGT("Outage Recovery");
-  PROGMEM Language_Str MSG_MEDIA_MENU                      = _UxGT("Print from Media");
-  PROGMEM Language_Str MSG_NO_MEDIA                        = _UxGT("No Media");
-  PROGMEM Language_Str MSG_DWELL                           = _UxGT("Sleep...");
-  PROGMEM Language_Str MSG_USERWAIT                        = _UxGT("Click to Resume...");
-  PROGMEM Language_Str MSG_PRINT_PAUSED                    = _UxGT("Print Paused");
-  PROGMEM Language_Str MSG_PRINTING                        = _UxGT("Printing...");
-  PROGMEM Language_Str MSG_PRINT_ABORTED                   = _UxGT("Print Aborted");
-  PROGMEM Language_Str MSG_PRINT_DONE                      = _UxGT("Print Done");
-  PROGMEM Language_Str MSG_NO_MOVE                         = _UxGT("No Move.");
-  PROGMEM Language_Str MSG_KILLED                          = _UxGT("KILLED. ");
-  PROGMEM Language_Str MSG_STOPPED                         = _UxGT("STOPPED. ");
-  PROGMEM Language_Str MSG_CONTROL_RETRACT                 = _UxGT("Retract mm");
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_SWAP            = _UxGT("Swap Re.mm");
-  PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("Retract V");
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_ZHOP            = _UxGT("Hop mm");
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("Unretr. mm");
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("S Unretr. mm");
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("Unretract V");
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAPF   = _UxGT("S UnRet V");
-  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("Auto-Retract");
-  PROGMEM Language_Str MSG_FILAMENT_SWAP_LENGTH            = _UxGT("Swap Length");
-  PROGMEM Language_Str MSG_FILAMENT_SWAP_EXTRA             = _UxGT("Swap Extra");
-  PROGMEM Language_Str MSG_FILAMENT_PURGE_LENGTH           = _UxGT("Purge Length");
-  PROGMEM Language_Str MSG_TOOL_CHANGE                     = _UxGT("Tool Inlocuire");
-  PROGMEM Language_Str MSG_TOOL_CHANGE_ZLIFT               = _UxGT("Z Raise");
-  PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPEED        = _UxGT("Prime Speed");
-  PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPEED      = _UxGT("Retract Speed");
-  PROGMEM Language_Str MSG_FILAMENT_PARK_ENABLED           = _UxGT("Park Head");
-  PROGMEM Language_Str MSG_SINGLENOZZLE_UNRETRACT_SPEED    = _UxGT("Recover Speed");
-  PROGMEM Language_Str MSG_SINGLENOZZLE_FAN_SPEED          = _UxGT("Fan Speed");
-  PROGMEM Language_Str MSG_SINGLENOZZLE_FAN_TIME           = _UxGT("Fan Time");
-  PROGMEM Language_Str MSG_TOOL_MIGRATION_ON               = _UxGT("Auto Pornit");
-  PROGMEM Language_Str MSG_TOOL_MIGRATION_OFF              = _UxGT("Auto Oprit");
-  PROGMEM Language_Str MSG_TOOL_MIGRATION                  = _UxGT("Tool Migration");
-  PROGMEM Language_Str MSG_TOOL_MIGRATION_AUTO             = _UxGT("Auto-migrare");
-  PROGMEM Language_Str MSG_TOOL_MIGRATION_END              = _UxGT("Last Extruder");
-  PROGMEM Language_Str MSG_TOOL_MIGRATION_SWAP             = _UxGT("Migrate to *");
-  PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Inlocuire Filament");
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E                = _UxGT("Inlocuire Filament *");
-  PROGMEM Language_Str MSG_FILAMENTLOAD                    = _UxGT("Incarcare Filament");
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E                  = _UxGT("Incarcare Filament *");
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD                  = _UxGT("Scoatere Filament");
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E                = _UxGT("Scoatere Filament *");
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("Scoate Tot");
-  PROGMEM Language_Str MSG_ATTACH_MEDIA                    = _UxGT("Atasare Media");
-  PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Inlocuire Media");
-  PROGMEM Language_Str MSG_RELEASE_MEDIA                   = _UxGT("Eliberare Media");
-  PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("Z Probe Past Bed");
-  PROGMEM Language_Str MSG_SKEW_FACTOR                     = _UxGT("Skew Factor");
-  PROGMEM Language_Str MSG_BLTOUCH                         = _UxGT("BLTouch");
-  PROGMEM Language_Str MSG_BLTOUCH_SELFTEST                = _UxGT("Self-Test");
-  PROGMEM Language_Str MSG_BLTOUCH_RESET                   = _UxGT("Reset");
-  PROGMEM Language_Str MSG_BLTOUCH_STOW                    = _UxGT("Stow");
-  PROGMEM Language_Str MSG_BLTOUCH_DEPLOY                  = _UxGT("Deploy");
-  PROGMEM Language_Str MSG_BLTOUCH_SW_MODE                 = _UxGT("SW-Mode");
-  PROGMEM Language_Str MSG_BLTOUCH_5V_MODE                 = _UxGT("5V-Mode");
-  PROGMEM Language_Str MSG_BLTOUCH_OD_MODE                 = _UxGT("OD-Mode");
-  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE              = _UxGT("Mode-Store");
-  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE_5V           = _UxGT("Set BLTouch to 5V");
-  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE_OD           = _UxGT("Set BLTouch to OD");
-  PROGMEM Language_Str MSG_BLTOUCH_MODE_ECHO               = _UxGT("Report Drain");
-  PROGMEM Language_Str MSG_BLTOUCH_MODE_CHANGE             = _UxGT("DANGER: Bad settings can cause damage! Proceed anyway?");
-  PROGMEM Language_Str MSG_TOUCHMI_PROBE                   = _UxGT("TouchMI");
-  PROGMEM Language_Str MSG_TOUCHMI_INIT                    = _UxGT("Init TouchMI");
-  PROGMEM Language_Str MSG_TOUCHMI_ZTEST                   = _UxGT("Z Offset Test");
-  PROGMEM Language_Str MSG_TOUCHMI_SAVE                    = _UxGT("Save");
-  PROGMEM Language_Str MSG_MANUAL_DEPLOY_TOUCHMI           = _UxGT("Deploy TouchMI");
-  PROGMEM Language_Str MSG_MANUAL_DEPLOY                   = _UxGT("Deploy Z-Probe");
-  PROGMEM Language_Str MSG_MANUAL_STOW                     = _UxGT("Stow Z-Probe");
-  PROGMEM Language_Str MSG_HOME_FIRST                      = _UxGT("Home %s%s%s First");
-  PROGMEM Language_Str MSG_ZPROBE_OFFSETS                  = _UxGT("Probe Offsets");
-  PROGMEM Language_Str MSG_ZPROBE_XOFFSET                  = _UxGT("Probe X Offset");
-  PROGMEM Language_Str MSG_ZPROBE_YOFFSET                  = _UxGT("Probe Y Offset");
-  PROGMEM Language_Str MSG_ZPROBE_ZOFFSET                  = _UxGT("Probe Z Offset");
-  PROGMEM Language_Str MSG_BABYSTEP_X                      = _UxGT("Babystep X");
-  PROGMEM Language_Str MSG_BABYSTEP_Y                      = _UxGT("Babystep Y");
-  PROGMEM Language_Str MSG_BABYSTEP_Z                      = _UxGT("Babystep Z");
-  PROGMEM Language_Str MSG_BABYSTEP_TOTAL                  = _UxGT("Total");
-  PROGMEM Language_Str MSG_ENDSTOP_ABORT                   = _UxGT("Endstop Abort");
-  PROGMEM Language_Str MSG_HEATING_FAILED_LCD              = _UxGT("Heating Failed");
-  PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("Err: REDUNDANT TEMP");
-  PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("THERMAL RUNAWAY");
-  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_BED             = _UxGT("BED THERMAL RUNAWAY");
-  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_CHAMBER         = _UxGT("CHAMBER T. RUNAWAY");
-  PROGMEM Language_Str MSG_ERR_MAXTEMP                     = _UxGT("Err: MAXTEMP");
-  PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("Err: MINTEMP");
-  PROGMEM Language_Str MSG_HALTED                          = _UxGT("PRINTER HALTED");
-  PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Please Reset");
-  PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("d"); // One character only
-  PROGMEM Language_Str MSG_SHORT_HOUR                      = _UxGT("h"); // One character only
-  PROGMEM Language_Str MSG_SHORT_MINUTE                    = _UxGT("m"); // One character only
-  PROGMEM Language_Str MSG_HEATING                         = _UxGT("Heating...");
-  PROGMEM Language_Str MSG_COOLING                         = _UxGT("Cooling...");
-  PROGMEM Language_Str MSG_BED_HEATING                     = _UxGT("Bed Heating...");
-  PROGMEM Language_Str MSG_BED_COOLING                     = _UxGT("Bed Cooling...");
-  PROGMEM Language_Str MSG_CHAMBER_HEATING                 = _UxGT("Chamber Heating...");
-  PROGMEM Language_Str MSG_CHAMBER_COOLING                 = _UxGT("Chamber Cooling...");
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE                 = _UxGT("Delta Calibration");
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_X               = _UxGT("Calibrate X");
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Y               = _UxGT("Calibrate Y");
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Z               = _UxGT("Calibrate Z");
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_CENTER          = _UxGT("Calibrate Center");
-  PROGMEM Language_Str MSG_DELTA_SETTINGS                  = _UxGT("Delta Settings");
-  PROGMEM Language_Str MSG_DELTA_AUTO_CALIBRATE            = _UxGT("Auto Calibration");
-  PROGMEM Language_Str MSG_DELTA_HEIGHT_CALIBRATE          = _UxGT("Set Delta Height");
-  PROGMEM Language_Str MSG_DELTA_Z_OFFSET_CALIBRATE        = _UxGT("Probe Z-offset");
-  PROGMEM Language_Str MSG_DELTA_DIAG_ROD                  = _UxGT("Diag Rod");
-  PROGMEM Language_Str MSG_DELTA_HEIGHT                    = _UxGT("Inaltime");
-  PROGMEM Language_Str MSG_DELTA_RADIUS                    = _UxGT("Radius");
-  PROGMEM Language_Str MSG_INFO_MENU                       = _UxGT("Despre Imprimanta");
-  PROGMEM Language_Str MSG_INFO_PRINTER_MENU               = _UxGT("Info Imprimanta");
-  PROGMEM Language_Str MSG_3POINT_LEVELING                 = _UxGT("Nivelare in 3 puncte");
-  PROGMEM Language_Str MSG_LINEAR_LEVELING                 = _UxGT("Nivelare Lineara");
-  PROGMEM Language_Str MSG_BILINEAR_LEVELING               = _UxGT("Nivelare Bilineara");
-  PROGMEM Language_Str MSG_UBL_LEVELING                    = _UxGT("Nivelarea Patului Unificata");
-  PROGMEM Language_Str MSG_MESH_LEVELING                   = _UxGT("Nivelare Mesh");
-  PROGMEM Language_Str MSG_INFO_STATS_MENU                 = _UxGT("Status Imprimanta");
-  PROGMEM Language_Str MSG_INFO_BOARD_MENU                 = _UxGT("Informatii Placa");
-  PROGMEM Language_Str MSG_INFO_THERMISTOR_MENU            = _UxGT("Termistoare");
-  PROGMEM Language_Str MSG_INFO_EXTRUDERS                  = _UxGT("Extrudere");
-  PROGMEM Language_Str MSG_INFO_BAUDRATE                   = _UxGT("Baud");
-  PROGMEM Language_Str MSG_INFO_PROTOCOL                   = _UxGT("Protocol");
-  PROGMEM Language_Str MSG_INFO_RUNAWAY_OFF                = _UxGT("Runaway Watch: OFF");
-  PROGMEM Language_Str MSG_INFO_RUNAWAY_ON                 = _UxGT("Runaway Watch: ON");
-  PROGMEM Language_Str MSG_HOTEND_IDLE_TIMEOUT             = _UxGT("Hotend Idle Timeout");
+  LSTR MSG_MOVING                         = _UxGT("Moving...");
+  LSTR MSG_FREE_XY                        = _UxGT("Free XY");
+  LSTR MSG_MOVE_X                         = _UxGT("Move X");
+  LSTR MSG_MOVE_Y                         = _UxGT("Move Y");
+  LSTR MSG_MOVE_Z                         = _UxGT("Move Z");
+  LSTR MSG_MOVE_E                         = _UxGT("Extruder");
+  LSTR MSG_MOVE_EN                        = _UxGT("Extruder *");
+  LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Capat Prea Rece");
+  LSTR MSG_MOVE_N_MM                      = _UxGT("Move %smm");
+  LSTR MSG_MOVE_01MM                      = _UxGT("Move 0.1mm");
+  LSTR MSG_MOVE_1MM                       = _UxGT("Move 1mm");
+  LSTR MSG_MOVE_10MM                      = _UxGT("Move 10mm");
+  LSTR MSG_MOVE_100MM                     = _UxGT("Move 100mm");
+  LSTR MSG_SPEED                          = _UxGT("Speed");
+  LSTR MSG_BED_Z                          = _UxGT("Bed Z");
+  LSTR MSG_NOZZLE                         = _UxGT("Nozzle");
+  LSTR MSG_NOZZLE_N                       = _UxGT("Nozzle ~");
+  LSTR MSG_NOZZLE_PARKED                  = _UxGT("Nozzle Parked");
+  LSTR MSG_NOZZLE_STANDBY                 = _UxGT("Nozzle Standby");
+  LSTR MSG_BED                            = _UxGT("Bed");
+  LSTR MSG_CHAMBER                        = _UxGT("Enclosure");
+  LSTR MSG_FAN_SPEED                      = _UxGT("Fan Speed");
+  LSTR MSG_FAN_SPEED_N                    = _UxGT("Fan Speed ~");
+  LSTR MSG_STORED_FAN_N                   = _UxGT("Stored Fan ~");
+  LSTR MSG_EXTRA_FAN_SPEED                = _UxGT("Extra Fan Speed");
+  LSTR MSG_EXTRA_FAN_SPEED_N              = _UxGT("Extra Fan Speed ~");
+  LSTR MSG_CONTROLLER_FAN                 = _UxGT("Controller Fan");
+  LSTR MSG_CONTROLLER_FAN_IDLE_SPEED      = _UxGT("Idle Speed");
+  LSTR MSG_CONTROLLER_FAN_AUTO_ON         = _UxGT("Auto Mode");
+  LSTR MSG_CONTROLLER_FAN_SPEED           = _UxGT("Active Speed");
+  LSTR MSG_CONTROLLER_FAN_DURATION        = _UxGT("Idle Period");
+  LSTR MSG_FLOW                           = _UxGT("Flow");
+  LSTR MSG_FLOW_N                         = _UxGT("Flow ~");
+  LSTR MSG_CONTROL                        = _UxGT("Control");
+  LSTR MSG_MIN                            = " " LCD_STR_THERMOMETER _UxGT(" Min");
+  LSTR MSG_MAX                            = " " LCD_STR_THERMOMETER _UxGT(" Max");
+  LSTR MSG_FACTOR                         = " " LCD_STR_THERMOMETER _UxGT(" Fact");
+  LSTR MSG_AUTOTEMP                       = _UxGT("Autotemp");
+  LSTR MSG_LCD_ON                         = _UxGT("On");
+  LSTR MSG_LCD_OFF                        = _UxGT("Off");
+  LSTR MSG_PID_AUTOTUNE                   = _UxGT("PID Autotune");
+  LSTR MSG_PID_AUTOTUNE_E                 = _UxGT("PID Autotune *");
+  LSTR MSG_PID_AUTOTUNE_DONE              = _UxGT("PID tuning done");
+  LSTR MSG_PID_BAD_EXTRUDER_NUM           = _UxGT("Autotune failed. Bad extruder.");
+  LSTR MSG_PID_TEMP_TOO_HIGH              = _UxGT("Autotune failed. Temperature too high.");
+  LSTR MSG_PID_TIMEOUT                    = _UxGT("Autotune failed! Timeout.");
+  LSTR MSG_SELECT                         = _UxGT("Select");
+  LSTR MSG_SELECT_E                       = _UxGT("Select *");
+  LSTR MSG_ACC                            = _UxGT("Accel");
+  LSTR MSG_JERK                           = _UxGT("Jerk");
+  LSTR MSG_VA_JERK                        = _UxGT("V") LCD_STR_A _UxGT("-Jerk");
+  LSTR MSG_VB_JERK                        = _UxGT("V") LCD_STR_B _UxGT("-Jerk");
+  LSTR MSG_VC_JERK                        = _UxGT("V") LCD_STR_C _UxGT("-Jerk");
+  LSTR MSG_VI_JERK                        = _UxGT("V") LCD_STR_I _UxGT("-Jerk");
+  LSTR MSG_VJ_JERK                        = _UxGT("V") LCD_STR_J _UxGT("-Jerk");
+  LSTR MSG_VK_JERK                        = _UxGT("V") LCD_STR_K _UxGT("-Jerk");
+  LSTR MSG_VE_JERK                        = _UxGT("Ve-Jerk");
+  LSTR MSG_JUNCTION_DEVIATION             = _UxGT("Junction Dev");
+  LSTR MSG_VELOCITY                       = _UxGT("Velocity");
+  LSTR MSG_VMAX_A                         = _UxGT("Vmax ") LCD_STR_A;
+  LSTR MSG_VMAX_B                         = _UxGT("Vmax ") LCD_STR_B;
+  LSTR MSG_VMAX_C                         = _UxGT("Vmax ") LCD_STR_C;
+  LSTR MSG_VMAX_I                         = _UxGT("Vmax ") LCD_STR_I;
+  LSTR MSG_VMAX_J                         = _UxGT("Vmax ") LCD_STR_J;
+  LSTR MSG_VMAX_K                         = _UxGT("Vmax ") LCD_STR_K;
+  LSTR MSG_VMAX_E                         = _UxGT("Vmax ") LCD_STR_E;
+  LSTR MSG_VMAX_EN                        = _UxGT("Vmax *");
+  LSTR MSG_VMIN                           = _UxGT("Vmin");
+  LSTR MSG_VTRAV_MIN                      = _UxGT("VTrav Min");
+  LSTR MSG_ACCELERATION                   = _UxGT("Acceleration");
+  LSTR MSG_AMAX_A                         = _UxGT("Amax ") LCD_STR_A;
+  LSTR MSG_AMAX_B                         = _UxGT("Amax ") LCD_STR_B;
+  LSTR MSG_AMAX_C                         = _UxGT("Amax ") LCD_STR_C;
+  LSTR MSG_AMAX_I                         = _UxGT("Amax ") LCD_STR_I;
+  LSTR MSG_AMAX_J                         = _UxGT("Amax ") LCD_STR_J;
+  LSTR MSG_AMAX_K                         = _UxGT("Amax ") LCD_STR_K;
+  LSTR MSG_AMAX_E                         = _UxGT("Amax ") LCD_STR_E;
+  LSTR MSG_AMAX_EN                        = _UxGT("Amax *");
+  LSTR MSG_A_RETRACT                      = _UxGT("A-Retract");
+  LSTR MSG_A_TRAVEL                       = _UxGT("A-Travel");
+  LSTR MSG_XY_FREQUENCY_LIMIT             = _UxGT("Frequency max");
+  LSTR MSG_XY_FREQUENCY_FEEDRATE          = _UxGT("Feed min");
+  LSTR MSG_STEPS_PER_MM                   = _UxGT("Steps/mm");
+  LSTR MSG_A_STEPS                        = LCD_STR_A _UxGT(" steps/mm");
+  LSTR MSG_B_STEPS                        = LCD_STR_B _UxGT(" steps/mm");
+  LSTR MSG_C_STEPS                        = LCD_STR_C _UxGT(" steps/mm");
+  LSTR MSG_I_STEPS                        = LCD_STR_I _UxGT(" steps/mm");
+  LSTR MSG_J_STEPS                        = LCD_STR_J _UxGT(" steps/mm");
+  LSTR MSG_K_STEPS                        = LCD_STR_K _UxGT(" steps/mm");
+  LSTR MSG_E_STEPS                        = _UxGT("Esteps/mm");
+  LSTR MSG_EN_STEPS                       = _UxGT("*steps/mm");
+  LSTR MSG_TEMPERATURE                    = _UxGT("Temperature");
+  LSTR MSG_MOTION                         = _UxGT("Motion");
+  LSTR MSG_FILAMENT                       = _UxGT("Filament");
+  LSTR MSG_VOLUMETRIC_ENABLED             = _UxGT("E in mm") SUPERSCRIPT_THREE;
+  LSTR MSG_VOLUMETRIC_LIMIT               = _UxGT("E Limit in mm") SUPERSCRIPT_THREE;
+  LSTR MSG_VOLUMETRIC_LIMIT_E             = _UxGT("E Limit *");
+  LSTR MSG_FILAMENT_DIAM                  = _UxGT("Fil. Dia.");
+  LSTR MSG_FILAMENT_DIAM_E                = _UxGT("Fil. Dia. *");
+  LSTR MSG_FILAMENT_UNLOAD                = _UxGT("Unload mm");
+  LSTR MSG_FILAMENT_LOAD                  = _UxGT("Load mm");
+  LSTR MSG_ADVANCE_K                      = _UxGT("Advance K");
+  LSTR MSG_ADVANCE_K_E                    = _UxGT("Advance K *");
+  LSTR MSG_CONTRAST                       = _UxGT("LCD Contrast");
+  LSTR MSG_STORE_EEPROM                   = _UxGT("Store Settings");
+  LSTR MSG_LOAD_EEPROM                    = _UxGT("Load Settings");
+  LSTR MSG_RESTORE_DEFAULTS               = _UxGT("Restore Defaults");
+  LSTR MSG_INIT_EEPROM                    = _UxGT("Initialize EEPROM");
+  LSTR MSG_ERR_EEPROM_CRC                 = _UxGT("EEPROM CRC Error");
+  LSTR MSG_ERR_EEPROM_INDEX               = _UxGT("EEPROM Index Error");
+  LSTR MSG_ERR_EEPROM_VERSION             = _UxGT("EEPROM Version Error");
+  LSTR MSG_SETTINGS_STORED                = _UxGT("Settings Stored");
+  LSTR MSG_MEDIA_UPDATE                   = _UxGT("Media Update");
+  LSTR MSG_RESET_PRINTER                  = _UxGT("Reset Imprimanta");
+  LSTR MSG_REFRESH                        = LCD_STR_REFRESH  _UxGT("Refresh");
+  LSTR MSG_INFO_SCREEN                    = _UxGT("Info Screen");
+  LSTR MSG_PREPARE                        = _UxGT("Prepare");
+  LSTR MSG_TUNE                           = _UxGT("Tune");
+  LSTR MSG_POWER_MONITOR                  = _UxGT("Power monitor");
+  LSTR MSG_CURRENT                        = _UxGT("Intensitate");
+  LSTR MSG_VOLTAGE                        = _UxGT("Voltaj");
+  LSTR MSG_POWER                          = _UxGT("Putere");
+  LSTR MSG_START_PRINT                    = _UxGT("Start Imprimare");
+  LSTR MSG_BUTTON_NEXT                    = _UxGT("Urmatorul");
+  LSTR MSG_BUTTON_INIT                    = _UxGT("Initiere");
+  LSTR MSG_BUTTON_STOP                    = _UxGT("Stop");
+  LSTR MSG_BUTTON_PRINT                   = _UxGT("Imprimeaza");
+  LSTR MSG_BUTTON_RESET                   = _UxGT("Reseteaza");
+  LSTR MSG_BUTTON_IGNORE                  = _UxGT("Ignora");
+  LSTR MSG_BUTTON_CANCEL                  = _UxGT("Anuleaza");
+  LSTR MSG_BUTTON_DONE                    = _UxGT("OK");
+  LSTR MSG_BUTTON_BACK                    = _UxGT("Inapoi");
+  LSTR MSG_BUTTON_PROCEED                 = _UxGT("Proceed");
+  LSTR MSG_PAUSING                        = _UxGT("Pausing...");
+  LSTR MSG_PAUSE_PRINT                    = _UxGT("Pause Print");
+  LSTR MSG_RESUME_PRINT                   = _UxGT("Resume Print");
+  LSTR MSG_STOP_PRINT                     = _UxGT("Stop Print");
+  LSTR MSG_PRINTING_OBJECT                = _UxGT("Printing Object");
+  LSTR MSG_CANCEL_OBJECT                  = _UxGT("Cancel Object");
+  LSTR MSG_CANCEL_OBJECT_N                = _UxGT("Cancel Object =");
+  LSTR MSG_OUTAGE_RECOVERY                = _UxGT("Outage Recovery");
+  LSTR MSG_MEDIA_MENU                     = _UxGT("Print from Media");
+  LSTR MSG_NO_MEDIA                       = _UxGT("No Media");
+  LSTR MSG_DWELL                          = _UxGT("Sleep...");
+  LSTR MSG_USERWAIT                       = _UxGT("Click to Resume...");
+  LSTR MSG_PRINT_PAUSED                   = _UxGT("Print Paused");
+  LSTR MSG_PRINTING                       = _UxGT("Printing...");
+  LSTR MSG_PRINT_ABORTED                  = _UxGT("Print Aborted");
+  LSTR MSG_PRINT_DONE                     = _UxGT("Print Done");
+  LSTR MSG_NO_MOVE                        = _UxGT("No Move.");
+  LSTR MSG_KILLED                         = _UxGT("KILLED. ");
+  LSTR MSG_STOPPED                        = _UxGT("STOPPED. ");
+  LSTR MSG_CONTROL_RETRACT                = _UxGT("Retract mm");
+  LSTR MSG_CONTROL_RETRACT_SWAP           = _UxGT("Swap Re.mm");
+  LSTR MSG_CONTROL_RETRACTF               = _UxGT("Retract V");
+  LSTR MSG_CONTROL_RETRACT_ZHOP           = _UxGT("Hop mm");
+  LSTR MSG_CONTROL_RETRACT_RECOVER        = _UxGT("Unretr. mm");
+  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAP   = _UxGT("S Unretr. mm");
+  LSTR MSG_CONTROL_RETRACT_RECOVERF       = _UxGT("Unretract V");
+  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAPF  = _UxGT("S UnRet V");
+  LSTR MSG_AUTORETRACT                    = _UxGT("Auto-Retract");
+  LSTR MSG_FILAMENT_SWAP_LENGTH           = _UxGT("Swap Length");
+  LSTR MSG_FILAMENT_SWAP_EXTRA            = _UxGT("Swap Extra");
+  LSTR MSG_FILAMENT_PURGE_LENGTH          = _UxGT("Purge Length");
+  LSTR MSG_TOOL_CHANGE                    = _UxGT("Tool Inlocuire");
+  LSTR MSG_TOOL_CHANGE_ZLIFT              = _UxGT("Z Raise");
+  LSTR MSG_SINGLENOZZLE_PRIME_SPEED       = _UxGT("Prime Speed");
+  LSTR MSG_SINGLENOZZLE_RETRACT_SPEED     = _UxGT("Retract Speed");
+  LSTR MSG_FILAMENT_PARK_ENABLED          = _UxGT("Park Head");
+  LSTR MSG_SINGLENOZZLE_UNRETRACT_SPEED   = _UxGT("Recover Speed");
+  LSTR MSG_SINGLENOZZLE_FAN_SPEED         = _UxGT("Fan Speed");
+  LSTR MSG_SINGLENOZZLE_FAN_TIME          = _UxGT("Fan Time");
+  LSTR MSG_TOOL_MIGRATION_ON              = _UxGT("Auto Pornit");
+  LSTR MSG_TOOL_MIGRATION_OFF             = _UxGT("Auto Oprit");
+  LSTR MSG_TOOL_MIGRATION                 = _UxGT("Tool Migration");
+  LSTR MSG_TOOL_MIGRATION_AUTO            = _UxGT("Auto-migrare");
+  LSTR MSG_TOOL_MIGRATION_END             = _UxGT("Last Extruder");
+  LSTR MSG_TOOL_MIGRATION_SWAP            = _UxGT("Migrate to *");
+  LSTR MSG_FILAMENTCHANGE                 = _UxGT("Inlocuire Filament");
+  LSTR MSG_FILAMENTCHANGE_E               = _UxGT("Inlocuire Filament *");
+  LSTR MSG_FILAMENTLOAD                   = _UxGT("Incarcare Filament");
+  LSTR MSG_FILAMENTLOAD_E                 = _UxGT("Incarcare Filament *");
+  LSTR MSG_FILAMENTUNLOAD                 = _UxGT("Scoatere Filament");
+  LSTR MSG_FILAMENTUNLOAD_E               = _UxGT("Scoatere Filament *");
+  LSTR MSG_FILAMENTUNLOAD_ALL             = _UxGT("Scoate Tot");
+  LSTR MSG_ATTACH_MEDIA                   = _UxGT("Atasare Media");
+  LSTR MSG_CHANGE_MEDIA                   = _UxGT("Inlocuire Media");
+  LSTR MSG_RELEASE_MEDIA                  = _UxGT("Eliberare Media");
+  LSTR MSG_ZPROBE_OUT                     = _UxGT("Z Probe Past Bed");
+  LSTR MSG_SKEW_FACTOR                    = _UxGT("Skew Factor");
+  LSTR MSG_BLTOUCH                        = _UxGT("BLTouch");
+  LSTR MSG_BLTOUCH_SELFTEST               = _UxGT("Self-Test");
+  LSTR MSG_BLTOUCH_RESET                  = _UxGT("Reset");
+  LSTR MSG_BLTOUCH_STOW                   = _UxGT("Stow");
+  LSTR MSG_BLTOUCH_DEPLOY                 = _UxGT("Deploy");
+  LSTR MSG_BLTOUCH_SW_MODE                = _UxGT("SW-Mode");
+  LSTR MSG_BLTOUCH_5V_MODE                = _UxGT("5V-Mode");
+  LSTR MSG_BLTOUCH_OD_MODE                = _UxGT("OD-Mode");
+  LSTR MSG_BLTOUCH_MODE_STORE             = _UxGT("Mode-Store");
+  LSTR MSG_BLTOUCH_MODE_STORE_5V          = _UxGT("Set BLTouch to 5V");
+  LSTR MSG_BLTOUCH_MODE_STORE_OD          = _UxGT("Set BLTouch to OD");
+  LSTR MSG_BLTOUCH_MODE_ECHO              = _UxGT("Report Drain");
+  LSTR MSG_BLTOUCH_MODE_CHANGE            = _UxGT("DANGER: Bad settings can cause damage! Proceed anyway?");
+  LSTR MSG_TOUCHMI_PROBE                  = _UxGT("TouchMI");
+  LSTR MSG_TOUCHMI_INIT                   = _UxGT("Init TouchMI");
+  LSTR MSG_TOUCHMI_ZTEST                  = _UxGT("Z Offset Test");
+  LSTR MSG_TOUCHMI_SAVE                   = _UxGT("Save");
+  LSTR MSG_MANUAL_DEPLOY_TOUCHMI          = _UxGT("Deploy TouchMI");
+  LSTR MSG_MANUAL_DEPLOY                  = _UxGT("Deploy Z-Probe");
+  LSTR MSG_MANUAL_STOW                    = _UxGT("Stow Z-Probe");
+  LSTR MSG_HOME_FIRST                     = _UxGT("Home %s%s%s First");
+  LSTR MSG_ZPROBE_OFFSETS                 = _UxGT("Probe Offsets");
+  LSTR MSG_ZPROBE_XOFFSET                 = _UxGT("Probe X Offset");
+  LSTR MSG_ZPROBE_YOFFSET                 = _UxGT("Probe Y Offset");
+  LSTR MSG_ZPROBE_ZOFFSET                 = _UxGT("Probe Z Offset");
+  LSTR MSG_BABYSTEP_X                     = _UxGT("Babystep X");
+  LSTR MSG_BABYSTEP_Y                     = _UxGT("Babystep Y");
+  LSTR MSG_BABYSTEP_Z                     = _UxGT("Babystep Z");
+  LSTR MSG_BABYSTEP_TOTAL                 = _UxGT("Total");
+  LSTR MSG_ENDSTOP_ABORT                  = _UxGT("Endstop Abort");
+  LSTR MSG_HEATING_FAILED_LCD             = _UxGT("Heating Failed");
+  LSTR MSG_ERR_REDUNDANT_TEMP             = _UxGT("Err: REDUNDANT TEMP");
+  LSTR MSG_THERMAL_RUNAWAY                = _UxGT("THERMAL RUNAWAY");
+  LSTR MSG_THERMAL_RUNAWAY_BED            = _UxGT("BED THERMAL RUNAWAY");
+  LSTR MSG_THERMAL_RUNAWAY_CHAMBER        = _UxGT("CHAMBER T. RUNAWAY");
+  LSTR MSG_ERR_MAXTEMP                    = _UxGT("Err: MAXTEMP");
+  LSTR MSG_ERR_MINTEMP                    = _UxGT("Err: MINTEMP");
+  LSTR MSG_HALTED                         = _UxGT("PRINTER HALTED");
+  LSTR MSG_PLEASE_RESET                   = _UxGT("Please Reset");
+  LSTR MSG_SHORT_DAY                      = _UxGT("d"); // One character only
+  LSTR MSG_SHORT_HOUR                     = _UxGT("h"); // One character only
+  LSTR MSG_SHORT_MINUTE                   = _UxGT("m"); // One character only
+  LSTR MSG_HEATING                        = _UxGT("Heating...");
+  LSTR MSG_COOLING                        = _UxGT("Cooling...");
+  LSTR MSG_BED_HEATING                    = _UxGT("Bed Heating...");
+  LSTR MSG_BED_COOLING                    = _UxGT("Bed Cooling...");
+  LSTR MSG_CHAMBER_HEATING                = _UxGT("Chamber Heating...");
+  LSTR MSG_CHAMBER_COOLING                = _UxGT("Chamber Cooling...");
+  LSTR MSG_DELTA_CALIBRATE                = _UxGT("Delta Calibration");
+  LSTR MSG_DELTA_CALIBRATE_X              = _UxGT("Calibrate X");
+  LSTR MSG_DELTA_CALIBRATE_Y              = _UxGT("Calibrate Y");
+  LSTR MSG_DELTA_CALIBRATE_Z              = _UxGT("Calibrate Z");
+  LSTR MSG_DELTA_CALIBRATE_CENTER         = _UxGT("Calibrate Center");
+  LSTR MSG_DELTA_SETTINGS                 = _UxGT("Delta Settings");
+  LSTR MSG_DELTA_AUTO_CALIBRATE           = _UxGT("Auto Calibration");
+  LSTR MSG_DELTA_HEIGHT_CALIBRATE         = _UxGT("Set Delta Height");
+  LSTR MSG_DELTA_Z_OFFSET_CALIBRATE       = _UxGT("Probe Z-offset");
+  LSTR MSG_DELTA_DIAG_ROD                 = _UxGT("Diag Rod");
+  LSTR MSG_DELTA_HEIGHT                   = _UxGT("Inaltime");
+  LSTR MSG_DELTA_RADIUS                   = _UxGT("Radius");
+  LSTR MSG_INFO_MENU                      = _UxGT("Despre Imprimanta");
+  LSTR MSG_INFO_PRINTER_MENU              = _UxGT("Info Imprimanta");
+  LSTR MSG_3POINT_LEVELING                = _UxGT("Nivelare in 3 puncte");
+  LSTR MSG_LINEAR_LEVELING                = _UxGT("Nivelare Lineara");
+  LSTR MSG_BILINEAR_LEVELING              = _UxGT("Nivelare Bilineara");
+  LSTR MSG_UBL_LEVELING                   = _UxGT("Nivelarea Patului Unificata");
+  LSTR MSG_MESH_LEVELING                  = _UxGT("Nivelare Mesh");
+  LSTR MSG_INFO_STATS_MENU                = _UxGT("Status Imprimanta");
+  LSTR MSG_INFO_BOARD_MENU                = _UxGT("Informatii Placa");
+  LSTR MSG_INFO_THERMISTOR_MENU           = _UxGT("Termistoare");
+  LSTR MSG_INFO_EXTRUDERS                 = _UxGT("Extrudere");
+  LSTR MSG_INFO_BAUDRATE                  = _UxGT("Baud");
+  LSTR MSG_INFO_PROTOCOL                  = _UxGT("Protocol");
+  LSTR MSG_INFO_RUNAWAY_OFF               = _UxGT("Runaway Watch: OFF");
+  LSTR MSG_INFO_RUNAWAY_ON                = _UxGT("Runaway Watch: ON");
+  LSTR MSG_HOTEND_IDLE_TIMEOUT            = _UxGT("Hotend Idle Timeout");
 
-  PROGMEM Language_Str MSG_CASE_LIGHT                      = _UxGT("Case Light");
-  PROGMEM Language_Str MSG_CASE_LIGHT_BRIGHTNESS           = _UxGT("Light Brightness");
-  PROGMEM Language_Str MSG_KILL_EXPECTED_PRINTER           = _UxGT("INCORRECT PRINTER");
+  LSTR MSG_CASE_LIGHT                     = _UxGT("Case Light");
+  LSTR MSG_CASE_LIGHT_BRIGHTNESS          = _UxGT("Light Brightness");
+  LSTR MSG_KILL_EXPECTED_PRINTER          = _UxGT("INCORRECT PRINTER");
 
 #if LCD_WIDTH >= 20
-  PROGMEM Language_Str MSG_INFO_PRINT_COUNT                = _UxGT("Total Printuri");
-  PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS           = _UxGT("Completat");
-  PROGMEM Language_Str MSG_INFO_PRINT_TIME                 = _UxGT("Timp Imprimare Total");
-  PROGMEM Language_Str MSG_INFO_PRINT_LONGEST              = _UxGT("Longest Job Time");
-  PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT             = _UxGT("Total Extrudat");
+  LSTR MSG_INFO_PRINT_COUNT               = _UxGT("Total Printuri");
+  LSTR MSG_INFO_COMPLETED_PRINTS          = _UxGT("Completat");
+  LSTR MSG_INFO_PRINT_TIME                = _UxGT("Timp Imprimare Total");
+  LSTR MSG_INFO_PRINT_LONGEST             = _UxGT("Longest Job Time");
+  LSTR MSG_INFO_PRINT_FILAMENT            = _UxGT("Total Extrudat");
 #else
-  PROGMEM Language_Str MSG_INFO_PRINT_COUNT                = _UxGT("Prints");
-  PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS           = _UxGT("Completed");
-  PROGMEM Language_Str MSG_INFO_PRINT_TIME                 = _UxGT("Total");
-  PROGMEM Language_Str MSG_INFO_PRINT_LONGEST              = _UxGT("Longest");
-  PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT             = _UxGT("Extruded");
+  LSTR MSG_INFO_PRINT_COUNT               = _UxGT("Prints");
+  LSTR MSG_INFO_COMPLETED_PRINTS          = _UxGT("Completed");
+  LSTR MSG_INFO_PRINT_TIME                = _UxGT("Total");
+  LSTR MSG_INFO_PRINT_LONGEST             = _UxGT("Longest");
+  LSTR MSG_INFO_PRINT_FILAMENT            = _UxGT("Extruded");
 #endif
 
-  PROGMEM Language_Str MSG_INFO_MIN_TEMP                   = _UxGT("Temperatura Minima");
-  PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("Temperatura Maxima");
-  PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("PSU");
-  PROGMEM Language_Str MSG_DRIVE_STRENGTH                  = _UxGT("Drive Strength");
-  PROGMEM Language_Str MSG_DAC_PERCENT_A                   = LCD_STR_A _UxGT(" Driver %");
-  PROGMEM Language_Str MSG_DAC_PERCENT_B                   = LCD_STR_B _UxGT(" Driver %");
-  PROGMEM Language_Str MSG_DAC_PERCENT_C                   = LCD_STR_C _UxGT(" Driver %");
-  PROGMEM Language_Str MSG_DAC_PERCENT_I                   = LCD_STR_I _UxGT(" Driver %");
-  PROGMEM Language_Str MSG_DAC_PERCENT_J                   = LCD_STR_J _UxGT(" Driver %");
-  PROGMEM Language_Str MSG_DAC_PERCENT_K                   = LCD_STR_K _UxGT(" Driver %");
-  PROGMEM Language_Str MSG_DAC_PERCENT_E                   = _UxGT("E Driver %");
-  PROGMEM Language_Str MSG_ERROR_TMC                       = _UxGT("TMC CONNECTION ERROR");
-  PROGMEM Language_Str MSG_DAC_EEPROM_WRITE                = _UxGT("DAC EEPROM Write");
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER          = _UxGT("FILAMENT CHANGE");
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_PAUSE    = _UxGT("PRINT PAUSED");
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_LOAD     = _UxGT("LOAD FILAMENT");
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_UNLOAD   = _UxGT("UNLOAD FILAMENT");
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_HEADER   = _UxGT("RESUME OPTIONS:");
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_PURGE    = _UxGT("Purge more");
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_RESUME   = _UxGT("Continue");
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_NOZZLE          = _UxGT("  Nozzle: ");
-  PROGMEM Language_Str MSG_RUNOUT_SENSOR                   = _UxGT("Runout Sensor");
-  PROGMEM Language_Str MSG_RUNOUT_DISTANCE_MM              = _UxGT("Runout Dist mm");
-  PROGMEM Language_Str MSG_KILL_HOMING_FAILED              = _UxGT("Homing Failed");
-  PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT("Probing Failed");
+  LSTR MSG_INFO_MIN_TEMP                  = _UxGT("Temperatura Minima");
+  LSTR MSG_INFO_MAX_TEMP                  = _UxGT("Temperatura Maxima");
+  LSTR MSG_INFO_PSU                       = _UxGT("PSU");
+  LSTR MSG_DRIVE_STRENGTH                 = _UxGT("Drive Strength");
+  LSTR MSG_DAC_PERCENT_A                  = LCD_STR_A _UxGT(" Driver %");
+  LSTR MSG_DAC_PERCENT_B                  = LCD_STR_B _UxGT(" Driver %");
+  LSTR MSG_DAC_PERCENT_C                  = LCD_STR_C _UxGT(" Driver %");
+  LSTR MSG_DAC_PERCENT_I                  = LCD_STR_I _UxGT(" Driver %");
+  LSTR MSG_DAC_PERCENT_J                  = LCD_STR_J _UxGT(" Driver %");
+  LSTR MSG_DAC_PERCENT_K                  = LCD_STR_K _UxGT(" Driver %");
+  LSTR MSG_DAC_PERCENT_E                  = _UxGT("E Driver %");
+  LSTR MSG_ERROR_TMC                      = _UxGT("TMC CONNECTION ERROR");
+  LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("DAC EEPROM Write");
+  LSTR MSG_FILAMENT_CHANGE_HEADER         = _UxGT("FILAMENT CHANGE");
+  LSTR MSG_FILAMENT_CHANGE_HEADER_PAUSE   = _UxGT("PRINT PAUSED");
+  LSTR MSG_FILAMENT_CHANGE_HEADER_LOAD    = _UxGT("LOAD FILAMENT");
+  LSTR MSG_FILAMENT_CHANGE_HEADER_UNLOAD  = _UxGT("UNLOAD FILAMENT");
+  LSTR MSG_FILAMENT_CHANGE_OPTION_HEADER  = _UxGT("RESUME OPTIONS:");
+  LSTR MSG_FILAMENT_CHANGE_OPTION_PURGE   = _UxGT("Purge more");
+  LSTR MSG_FILAMENT_CHANGE_OPTION_RESUME  = _UxGT("Continue");
+  LSTR MSG_FILAMENT_CHANGE_NOZZLE         = _UxGT("  Nozzle: ");
+  LSTR MSG_RUNOUT_SENSOR                  = _UxGT("Runout Sensor");
+  LSTR MSG_RUNOUT_DISTANCE_MM             = _UxGT("Runout Dist mm");
+  LSTR MSG_KILL_HOMING_FAILED             = _UxGT("Homing Failed");
+  LSTR MSG_LCD_PROBING_FAILED             = _UxGT("Probing Failed");
 
-  PROGMEM Language_Str MSG_MMU2_CHOOSE_FILAMENT_HEADER     = _UxGT("CHOOSE FILAMENT");
-  PROGMEM Language_Str MSG_MMU2_MENU                       = _UxGT("MMU");
-  PROGMEM Language_Str MSG_KILL_MMU2_FIRMWARE              = _UxGT("Update MMU Firmware!");
-  PROGMEM Language_Str MSG_MMU2_NOT_RESPONDING             = _UxGT("MMU Needs Attention.");
-  PROGMEM Language_Str MSG_MMU2_RESUME                     = _UxGT("MMU Resume");
-  PROGMEM Language_Str MSG_MMU2_RESUMING                   = _UxGT("MMU Resuming...");
-  PROGMEM Language_Str MSG_MMU2_LOAD_FILAMENT              = _UxGT("MMU Load");
-  PROGMEM Language_Str MSG_MMU2_LOAD_ALL                   = _UxGT("MMU Load All");
-  PROGMEM Language_Str MSG_MMU2_LOAD_TO_NOZZLE             = _UxGT("MMU Load to Nozzle");
-  PROGMEM Language_Str MSG_MMU2_EJECT_FILAMENT             = _UxGT("MMU Eject");
-  PROGMEM Language_Str MSG_MMU2_EJECT_FILAMENT_N           = _UxGT("MMU Eject ~");
-  PROGMEM Language_Str MSG_MMU2_UNLOAD_FILAMENT            = _UxGT("MMU Unload");
-  PROGMEM Language_Str MSG_MMU2_LOADING_FILAMENT           = _UxGT("Loading Fil. %i...");
-  PROGMEM Language_Str MSG_MMU2_EJECTING_FILAMENT          = _UxGT("Ejecting Fil. ...");
-  PROGMEM Language_Str MSG_MMU2_UNLOADING_FILAMENT         = _UxGT("Unloading Fil....");
-  PROGMEM Language_Str MSG_MMU2_ALL                        = _UxGT("All");
-  PROGMEM Language_Str MSG_MMU2_FILAMENT_N                 = _UxGT("Filament ~");
-  PROGMEM Language_Str MSG_MMU2_RESET                      = _UxGT("Reset MMU");
-  PROGMEM Language_Str MSG_MMU2_RESETTING                  = _UxGT("MMU Resetting...");
-  PROGMEM Language_Str MSG_MMU2_EJECT_RECOVER              = _UxGT("Remove, click");
+  LSTR MSG_MMU2_CHOOSE_FILAMENT_HEADER    = _UxGT("CHOOSE FILAMENT");
+  LSTR MSG_MMU2_MENU                      = _UxGT("MMU");
+  LSTR MSG_KILL_MMU2_FIRMWARE             = _UxGT("Update MMU Firmware!");
+  LSTR MSG_MMU2_NOT_RESPONDING            = _UxGT("MMU Needs Attention.");
+  LSTR MSG_MMU2_RESUME                    = _UxGT("MMU Resume");
+  LSTR MSG_MMU2_RESUMING                  = _UxGT("MMU Resuming...");
+  LSTR MSG_MMU2_LOAD_FILAMENT             = _UxGT("MMU Load");
+  LSTR MSG_MMU2_LOAD_ALL                  = _UxGT("MMU Load All");
+  LSTR MSG_MMU2_LOAD_TO_NOZZLE            = _UxGT("MMU Load to Nozzle");
+  LSTR MSG_MMU2_EJECT_FILAMENT            = _UxGT("MMU Eject");
+  LSTR MSG_MMU2_EJECT_FILAMENT_N          = _UxGT("MMU Eject ~");
+  LSTR MSG_MMU2_UNLOAD_FILAMENT           = _UxGT("MMU Unload");
+  LSTR MSG_MMU2_LOADING_FILAMENT          = _UxGT("Loading Fil. %i...");
+  LSTR MSG_MMU2_EJECTING_FILAMENT         = _UxGT("Ejecting Fil. ...");
+  LSTR MSG_MMU2_UNLOADING_FILAMENT        = _UxGT("Unloading Fil....");
+  LSTR MSG_MMU2_ALL                       = _UxGT("All");
+  LSTR MSG_MMU2_FILAMENT_N                = _UxGT("Filament ~");
+  LSTR MSG_MMU2_RESET                     = _UxGT("Reset MMU");
+  LSTR MSG_MMU2_RESETTING                 = _UxGT("MMU Resetting...");
+  LSTR MSG_MMU2_EJECT_RECOVER             = _UxGT("Remove, click");
 
-  PROGMEM Language_Str MSG_MIX                             = _UxGT("Mix");
-  PROGMEM Language_Str MSG_MIX_COMPONENT_N                 = _UxGT("Component =");
-  PROGMEM Language_Str MSG_MIXER                           = _UxGT("Mixer");
-  PROGMEM Language_Str MSG_GRADIENT                        = _UxGT("Gradient");
-  PROGMEM Language_Str MSG_FULL_GRADIENT                   = _UxGT("Full Gradient");
-  PROGMEM Language_Str MSG_TOGGLE_MIX                      = _UxGT("Toggle Mix");
-  PROGMEM Language_Str MSG_CYCLE_MIX                       = _UxGT("Cycle Mix");
-  PROGMEM Language_Str MSG_GRADIENT_MIX                    = _UxGT("Gradient Mix");
-  PROGMEM Language_Str MSG_REVERSE_GRADIENT                = _UxGT("Reverse Gradient");
-  PROGMEM Language_Str MSG_ACTIVE_VTOOL                    = _UxGT("Active V-tool");
-  PROGMEM Language_Str MSG_START_VTOOL                     = _UxGT("Start V-tool");
-  PROGMEM Language_Str MSG_END_VTOOL                       = _UxGT("  End V-tool");
-  PROGMEM Language_Str MSG_GRADIENT_ALIAS                  = _UxGT("Alias V-tool");
-  PROGMEM Language_Str MSG_RESET_VTOOLS                    = _UxGT("Reset V-tools");
-  PROGMEM Language_Str MSG_COMMIT_VTOOL                    = _UxGT("Commit V-tool Mix");
-  PROGMEM Language_Str MSG_VTOOLS_RESET                    = _UxGT("V-tools Were Reset");
-  PROGMEM Language_Str MSG_START_Z                         = _UxGT("Start Z:");
-  PROGMEM Language_Str MSG_END_Z                           = _UxGT("  End Z:");
+  LSTR MSG_MIX                            = _UxGT("Mix");
+  LSTR MSG_MIX_COMPONENT_N                = _UxGT("Component =");
+  LSTR MSG_MIXER                          = _UxGT("Mixer");
+  LSTR MSG_GRADIENT                       = _UxGT("Gradient");
+  LSTR MSG_FULL_GRADIENT                  = _UxGT("Full Gradient");
+  LSTR MSG_TOGGLE_MIX                     = _UxGT("Toggle Mix");
+  LSTR MSG_CYCLE_MIX                      = _UxGT("Cycle Mix");
+  LSTR MSG_GRADIENT_MIX                   = _UxGT("Gradient Mix");
+  LSTR MSG_REVERSE_GRADIENT               = _UxGT("Reverse Gradient");
+  LSTR MSG_ACTIVE_VTOOL                   = _UxGT("Active V-tool");
+  LSTR MSG_START_VTOOL                    = _UxGT("Start V-tool");
+  LSTR MSG_END_VTOOL                      = _UxGT("  End V-tool");
+  LSTR MSG_GRADIENT_ALIAS                 = _UxGT("Alias V-tool");
+  LSTR MSG_RESET_VTOOLS                   = _UxGT("Reset V-tools");
+  LSTR MSG_COMMIT_VTOOL                   = _UxGT("Commit V-tool Mix");
+  LSTR MSG_VTOOLS_RESET                   = _UxGT("V-tools Were Reset");
+  LSTR MSG_START_Z                        = _UxGT("Start Z:");
+  LSTR MSG_END_Z                          = _UxGT("  End Z:");
 
-  PROGMEM Language_Str MSG_GAMES                           = _UxGT("Jocuri");
-  PROGMEM Language_Str MSG_BRICKOUT                        = _UxGT("Brickout");
-  PROGMEM Language_Str MSG_INVADERS                        = _UxGT("Invaders");
-  PROGMEM Language_Str MSG_SNAKE                           = _UxGT("Sn4k3");
-  PROGMEM Language_Str MSG_MAZE                            = _UxGT("Maze");
+  LSTR MSG_GAMES                          = _UxGT("Jocuri");
+  LSTR MSG_BRICKOUT                       = _UxGT("Brickout");
+  LSTR MSG_INVADERS                       = _UxGT("Invaders");
+  LSTR MSG_SNAKE                          = _UxGT("Sn4k3");
+  LSTR MSG_MAZE                           = _UxGT("Maze");
 
-  PROGMEM Language_Str MSG_BAD_PAGE                        = _UxGT("Bad page index");
-  PROGMEM Language_Str MSG_BAD_PAGE_SPEED                  = _UxGT("Bad page speed");
+  LSTR MSG_BAD_PAGE                       = _UxGT("Bad page index");
+  LSTR MSG_BAD_PAGE_SPEED                 = _UxGT("Bad page speed");
 
   //
   // Filament Inlocuire screens show up to 3 lines on a 4-line display
   //                        ...or up to 2 lines on a 3-line display
   //
 #if LCD_HEIGHT >= 4
-  PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING          = _UxGT(MSG_2_LINE("Apasa Butonul", "pentru a reveni la print"));
-  PROGMEM Language_Str MSG_PAUSE_PRINT_PARKING             = _UxGT(MSG_1_LINE("Parcare..."));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT            = _UxGT(MSG_3_LINE("Astept ca", "inlocuirea filamentului", "sa inceapa"));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT          = _UxGT(MSG_3_LINE("Insert filament", "and press button", "to continue"));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT            = _UxGT(MSG_2_LINE("Press button", "to heat nozzle"));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING         = _UxGT(MSG_2_LINE("Nozzle heating", "Please wait..."));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD          = _UxGT(MSG_2_LINE("Wait for", "filament unload"));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD            = _UxGT(MSG_2_LINE("Wait for", "filament load"));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE           = _UxGT(MSG_2_LINE("Wait for", "filament purge"));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE      = _UxGT(MSG_2_LINE("Click to finish", "filament purge"));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME          = _UxGT(MSG_2_LINE("Wait for print", "to resume..."));
+  LSTR MSG_ADVANCED_PAUSE_WAITING         = _UxGT(MSG_2_LINE("Apasa Butonul", "pentru a reveni la print"));
+  LSTR MSG_PAUSE_PRINT_PARKING            = _UxGT(MSG_1_LINE("Parcare..."));
+  LSTR MSG_FILAMENT_CHANGE_INIT           = _UxGT(MSG_3_LINE("Astept ca", "inlocuirea filamentului", "sa inceapa"));
+  LSTR MSG_FILAMENT_CHANGE_INSERT         = _UxGT(MSG_3_LINE("Insert filament", "and press button", "to continue"));
+  LSTR MSG_FILAMENT_CHANGE_HEAT           = _UxGT(MSG_2_LINE("Press button", "to heat nozzle"));
+  LSTR MSG_FILAMENT_CHANGE_HEATING        = _UxGT(MSG_2_LINE("Nozzle heating", "Please wait..."));
+  LSTR MSG_FILAMENT_CHANGE_UNLOAD         = _UxGT(MSG_2_LINE("Wait for", "filament unload"));
+  LSTR MSG_FILAMENT_CHANGE_LOAD           = _UxGT(MSG_2_LINE("Wait for", "filament load"));
+  LSTR MSG_FILAMENT_CHANGE_PURGE          = _UxGT(MSG_2_LINE("Wait for", "filament purge"));
+  LSTR MSG_FILAMENT_CHANGE_CONT_PURGE     = _UxGT(MSG_2_LINE("Click to finish", "filament purge"));
+  LSTR MSG_FILAMENT_CHANGE_RESUME         = _UxGT(MSG_2_LINE("Wait for print", "to resume..."));
 #else
-  PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING          = _UxGT(MSG_1_LINE("Click to continue"));
-  PROGMEM Language_Str MSG_PAUSE_PRINT_PARKING             = _UxGT(MSG_1_LINE("Parcare..."));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT            = _UxGT(MSG_1_LINE("Va rog asteptati..."));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT          = _UxGT(MSG_1_LINE("Insert and Click"));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT            = _UxGT(MSG_1_LINE("Click pentru incalzire"));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING         = _UxGT(MSG_1_LINE("Incalzire..."));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD          = _UxGT(MSG_1_LINE("Ejectare..."));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD            = _UxGT(MSG_1_LINE("Incarcare..."));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE           = _UxGT(MSG_1_LINE("Curatare..."));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE      = _UxGT(MSG_1_LINE("Click pentru a termina"));
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME          = _UxGT(MSG_1_LINE("Se Reia..."));
+  LSTR MSG_ADVANCED_PAUSE_WAITING         = _UxGT(MSG_1_LINE("Click to continue"));
+  LSTR MSG_PAUSE_PRINT_PARKING            = _UxGT(MSG_1_LINE("Parcare..."));
+  LSTR MSG_FILAMENT_CHANGE_INIT           = _UxGT(MSG_1_LINE("Va rog asteptati..."));
+  LSTR MSG_FILAMENT_CHANGE_INSERT         = _UxGT(MSG_1_LINE("Insert and Click"));
+  LSTR MSG_FILAMENT_CHANGE_HEAT           = _UxGT(MSG_1_LINE("Click pentru incalzire"));
+  LSTR MSG_FILAMENT_CHANGE_HEATING        = _UxGT(MSG_1_LINE("Incalzire..."));
+  LSTR MSG_FILAMENT_CHANGE_UNLOAD         = _UxGT(MSG_1_LINE("Ejectare..."));
+  LSTR MSG_FILAMENT_CHANGE_LOAD           = _UxGT(MSG_1_LINE("Incarcare..."));
+  LSTR MSG_FILAMENT_CHANGE_PURGE          = _UxGT(MSG_1_LINE("Curatare..."));
+  LSTR MSG_FILAMENT_CHANGE_CONT_PURGE     = _UxGT(MSG_1_LINE("Click pentru a termina"));
+  LSTR MSG_FILAMENT_CHANGE_RESUME         = _UxGT(MSG_1_LINE("Se Reia..."));
 #endif
-  PROGMEM Language_Str MSG_TMC_DRIVERS                     = _UxGT("TMC Drivers");
-  PROGMEM Language_Str MSG_TMC_CURRENT                     = _UxGT("Driver Current");
-  PROGMEM Language_Str MSG_TMC_HYBRID_THRS                 = _UxGT("Hybrid Threshold");
-  PROGMEM Language_Str MSG_TMC_HOMING_THRS                 = _UxGT("Sensorless Homing");
-  PROGMEM Language_Str MSG_TMC_STEPPING_MODE               = _UxGT("Stepping Mode");
-  PROGMEM Language_Str MSG_TMC_STEALTH_ENABLED             = _UxGT("StealthChop Enabled");
-  PROGMEM Language_Str MSG_SERVICE_RESET                   = _UxGT("Reset");
-  PROGMEM Language_Str MSG_SERVICE_IN                      = _UxGT(" in:");
-  PROGMEM Language_Str MSG_BACKLASH                        = _UxGT("Backlash");
-  PROGMEM Language_Str MSG_BACKLASH_A                      = LCD_STR_A;
-  PROGMEM Language_Str MSG_BACKLASH_B                      = LCD_STR_B;
-  PROGMEM Language_Str MSG_BACKLASH_C                      = LCD_STR_C;
-  PROGMEM Language_Str MSG_BACKLASH_I                      = LCD_STR_I;
-  PROGMEM Language_Str MSG_BACKLASH_J                      = LCD_STR_J;
-  PROGMEM Language_Str MSG_BACKLASH_K                      = LCD_STR_K;
-  PROGMEM Language_Str MSG_BACKLASH_CORRECTION             = _UxGT("Corectare");
-  PROGMEM Language_Str MSG_BACKLASH_SMOOTHING              = _UxGT("Smoothing");
+  LSTR MSG_TMC_DRIVERS                    = _UxGT("TMC Drivers");
+  LSTR MSG_TMC_CURRENT                    = _UxGT("Driver Current");
+  LSTR MSG_TMC_HYBRID_THRS                = _UxGT("Hybrid Threshold");
+  LSTR MSG_TMC_HOMING_THRS                = _UxGT("Sensorless Homing");
+  LSTR MSG_TMC_STEPPING_MODE              = _UxGT("Stepping Mode");
+  LSTR MSG_TMC_STEALTH_ENABLED            = _UxGT("StealthChop Enabled");
+  LSTR MSG_SERVICE_RESET                  = _UxGT("Reset");
+  LSTR MSG_SERVICE_IN                     = _UxGT(" in:");
+  LSTR MSG_BACKLASH                       = _UxGT("Backlash");
+  LSTR MSG_BACKLASH_A                     = LCD_STR_A;
+  LSTR MSG_BACKLASH_B                     = LCD_STR_B;
+  LSTR MSG_BACKLASH_C                     = LCD_STR_C;
+  LSTR MSG_BACKLASH_I                     = LCD_STR_I;
+  LSTR MSG_BACKLASH_J                     = LCD_STR_J;
+  LSTR MSG_BACKLASH_K                     = LCD_STR_K;
+  LSTR MSG_BACKLASH_CORRECTION            = _UxGT("Corectare");
+  LSTR MSG_BACKLASH_SMOOTHING             = _UxGT("Smoothing");
 
-  PROGMEM Language_Str MSG_LEVEL_X_AXIS                    = _UxGT("Nivelare Axa X");
-  PROGMEM Language_Str MSG_AUTO_CALIBRATE                  = _UxGT("Auto Calibrare");
-  PROGMEM Language_Str MSG_HEATER_TIMEOUT                  = _UxGT("Timeout Incalzitor");
-  PROGMEM Language_Str MSG_REHEAT                          = _UxGT("Reincalzire");
-  PROGMEM Language_Str MSG_REHEATING                       = _UxGT("Reincalzire...");
+  LSTR MSG_LEVEL_X_AXIS                   = _UxGT("Nivelare Axa X");
+  LSTR MSG_AUTO_CALIBRATE                 = _UxGT("Auto Calibrare");
+  LSTR MSG_HEATER_TIMEOUT                 = _UxGT("Timeout Incalzitor");
+  LSTR MSG_REHEAT                         = _UxGT("Reincalzire");
+  LSTR MSG_REHEATING                      = _UxGT("Reincalzire...");
 }
 
 #if FAN_COUNT == 1

commit d95d452b29b80e66d534b36c78262454664ce5a1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Aug 29 23:02:53 2021 -0500

    🌐 MSG_PROBING_MESH => MSG_PROBING_POINT

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index aedc8c4173..b1208eac25 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -107,7 +107,7 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_MESH_EDITOR                     = _UxGT("Editor Mesh");
   PROGMEM Language_Str MSG_EDIT_MESH                       = _UxGT("Editeaza Mesh");
   PROGMEM Language_Str MSG_EDITING_STOPPED                 = _UxGT("Editarea Meshului Oprita");
-  PROGMEM Language_Str MSG_PROBING_MESH                    = _UxGT("Punctul de Probare");
+  PROGMEM Language_Str MSG_PROBING_POINT                   = _UxGT("Punctul de Probare");
   PROGMEM Language_Str MSG_MESH_X                          = _UxGT("Index X");
   PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("Index Y");
   PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Valoare Z");

commit 9046254a14b92b6bdf1696b1ed839b71615a0772
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Aug 20 15:40:17 2021 -0500

    🌐 Update menu titles, add more IJK (#22605)
    
    Followup to #19112

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 3d21e1a58d..aedc8c4173 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -273,12 +273,18 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_VA_JERK                         = _UxGT("V") LCD_STR_A _UxGT("-Jerk");
   PROGMEM Language_Str MSG_VB_JERK                         = _UxGT("V") LCD_STR_B _UxGT("-Jerk");
   PROGMEM Language_Str MSG_VC_JERK                         = _UxGT("V") LCD_STR_C _UxGT("-Jerk");
+  PROGMEM Language_Str MSG_VI_JERK                         = _UxGT("V") LCD_STR_I _UxGT("-Jerk");
+  PROGMEM Language_Str MSG_VJ_JERK                         = _UxGT("V") LCD_STR_J _UxGT("-Jerk");
+  PROGMEM Language_Str MSG_VK_JERK                         = _UxGT("V") LCD_STR_K _UxGT("-Jerk");
   PROGMEM Language_Str MSG_VE_JERK                         = _UxGT("Ve-Jerk");
   PROGMEM Language_Str MSG_JUNCTION_DEVIATION              = _UxGT("Junction Dev");
   PROGMEM Language_Str MSG_VELOCITY                        = _UxGT("Velocity");
   PROGMEM Language_Str MSG_VMAX_A                          = _UxGT("Vmax ") LCD_STR_A;
   PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("Vmax ") LCD_STR_B;
   PROGMEM Language_Str MSG_VMAX_C                          = _UxGT("Vmax ") LCD_STR_C;
+  PROGMEM Language_Str MSG_VMAX_I                          = _UxGT("Vmax ") LCD_STR_I;
+  PROGMEM Language_Str MSG_VMAX_J                          = _UxGT("Vmax ") LCD_STR_J;
+  PROGMEM Language_Str MSG_VMAX_K                          = _UxGT("Vmax ") LCD_STR_K;
   PROGMEM Language_Str MSG_VMAX_E                          = _UxGT("Vmax ") LCD_STR_E;
   PROGMEM Language_Str MSG_VMAX_EN                         = _UxGT("Vmax *");
   PROGMEM Language_Str MSG_VMIN                            = _UxGT("Vmin");
@@ -287,6 +293,9 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_AMAX_A                          = _UxGT("Amax ") LCD_STR_A;
   PROGMEM Language_Str MSG_AMAX_B                          = _UxGT("Amax ") LCD_STR_B;
   PROGMEM Language_Str MSG_AMAX_C                          = _UxGT("Amax ") LCD_STR_C;
+  PROGMEM Language_Str MSG_AMAX_I                          = _UxGT("Amax ") LCD_STR_I;
+  PROGMEM Language_Str MSG_AMAX_J                          = _UxGT("Amax ") LCD_STR_J;
+  PROGMEM Language_Str MSG_AMAX_K                          = _UxGT("Amax ") LCD_STR_K;
   PROGMEM Language_Str MSG_AMAX_E                          = _UxGT("Amax ") LCD_STR_E;
   PROGMEM Language_Str MSG_AMAX_EN                         = _UxGT("Amax *");
   PROGMEM Language_Str MSG_A_RETRACT                       = _UxGT("A-Retract");
@@ -294,9 +303,12 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_XY_FREQUENCY_LIMIT              = _UxGT("Frequency max");
   PROGMEM Language_Str MSG_XY_FREQUENCY_FEEDRATE           = _UxGT("Feed min");
   PROGMEM Language_Str MSG_STEPS_PER_MM                    = _UxGT("Steps/mm");
-  PROGMEM Language_Str MSG_A_STEPS                         = LCD_STR_A _UxGT("steps/mm");
-  PROGMEM Language_Str MSG_B_STEPS                         = LCD_STR_B _UxGT("steps/mm");
-  PROGMEM Language_Str MSG_C_STEPS                         = LCD_STR_C _UxGT("steps/mm");
+  PROGMEM Language_Str MSG_A_STEPS                         = LCD_STR_A _UxGT(" steps/mm");
+  PROGMEM Language_Str MSG_B_STEPS                         = LCD_STR_B _UxGT(" steps/mm");
+  PROGMEM Language_Str MSG_C_STEPS                         = LCD_STR_C _UxGT(" steps/mm");
+  PROGMEM Language_Str MSG_I_STEPS                         = LCD_STR_I _UxGT(" steps/mm");
+  PROGMEM Language_Str MSG_J_STEPS                         = LCD_STR_J _UxGT(" steps/mm");
+  PROGMEM Language_Str MSG_K_STEPS                         = LCD_STR_K _UxGT(" steps/mm");
   PROGMEM Language_Str MSG_E_STEPS                         = _UxGT("Esteps/mm");
   PROGMEM Language_Str MSG_EN_STEPS                        = _UxGT("*steps/mm");
   PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Temperature");
@@ -497,9 +509,12 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("Temperatura Maxima");
   PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("PSU");
   PROGMEM Language_Str MSG_DRIVE_STRENGTH                  = _UxGT("Drive Strength");
-  PROGMEM Language_Str MSG_DAC_PERCENT_X                   = _UxGT("X Driver %");
-  PROGMEM Language_Str MSG_DAC_PERCENT_Y                   = _UxGT("Y Driver %");
-  PROGMEM Language_Str MSG_DAC_PERCENT_Z                   = _UxGT("Z Driver %");
+  PROGMEM Language_Str MSG_DAC_PERCENT_A                   = LCD_STR_A _UxGT(" Driver %");
+  PROGMEM Language_Str MSG_DAC_PERCENT_B                   = LCD_STR_B _UxGT(" Driver %");
+  PROGMEM Language_Str MSG_DAC_PERCENT_C                   = LCD_STR_C _UxGT(" Driver %");
+  PROGMEM Language_Str MSG_DAC_PERCENT_I                   = LCD_STR_I _UxGT(" Driver %");
+  PROGMEM Language_Str MSG_DAC_PERCENT_J                   = LCD_STR_J _UxGT(" Driver %");
+  PROGMEM Language_Str MSG_DAC_PERCENT_K                   = LCD_STR_K _UxGT(" Driver %");
   PROGMEM Language_Str MSG_DAC_PERCENT_E                   = _UxGT("E Driver %");
   PROGMEM Language_Str MSG_ERROR_TMC                       = _UxGT("TMC CONNECTION ERROR");
   PROGMEM Language_Str MSG_DAC_EEPROM_WRITE                = _UxGT("DAC EEPROM Write");
@@ -606,6 +621,9 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_BACKLASH_A                      = LCD_STR_A;
   PROGMEM Language_Str MSG_BACKLASH_B                      = LCD_STR_B;
   PROGMEM Language_Str MSG_BACKLASH_C                      = LCD_STR_C;
+  PROGMEM Language_Str MSG_BACKLASH_I                      = LCD_STR_I;
+  PROGMEM Language_Str MSG_BACKLASH_J                      = LCD_STR_J;
+  PROGMEM Language_Str MSG_BACKLASH_K                      = LCD_STR_K;
   PROGMEM Language_Str MSG_BACKLASH_CORRECTION             = _UxGT("Corectare");
   PROGMEM Language_Str MSG_BACKLASH_SMOOTHING              = _UxGT("Smoothing");
 

commit b1bc2e80036131cde58b4fbc02b76ac08b5a7924
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jul 25 02:12:48 2021 -0500

    🌐 Level Corners => Bed Tramming

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 9313adf3f6..3d21e1a58d 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -102,7 +102,7 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_MOVE_AXIS                       = _UxGT("Muta Axa");
   PROGMEM Language_Str MSG_BED_LEVELING                    = _UxGT("Nivelarea Patului");
   PROGMEM Language_Str MSG_LEVEL_BED                       = _UxGT("Niveleaza Patul");
-  PROGMEM Language_Str MSG_LEVEL_CORNERS                   = _UxGT("Niveleaza Colturile");
+  PROGMEM Language_Str MSG_BED_TRAMMING                    = _UxGT("Niveleaza Colturile");
   PROGMEM Language_Str MSG_NEXT_CORNER                     = _UxGT("Urmatorul Colt");
   PROGMEM Language_Str MSG_MESH_EDITOR                     = _UxGT("Editor Mesh");
   PROGMEM Language_Str MSG_EDIT_MESH                       = _UxGT("Editeaza Mesh");

commit 81ca2dd273358a0cfc0f65d5b4900d83abc96d69
Author: Sébastien Gariépy <46988275+BeePerNet@users.noreply.github.com>
Date:   Sun Jun 27 17:44:49 2021 -0400

    🌐 MSG_MOVE_100MM (#22242)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index a34717acb5..9313adf3f6 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -232,6 +232,7 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("Move 0.1mm");
   PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("Move 1mm");
   PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("Move 10mm");
+  PROGMEM Language_Str MSG_MOVE_100MM                      = _UxGT("Move 100mm");
   PROGMEM Language_Str MSG_SPEED                           = _UxGT("Speed");
   PROGMEM Language_Str MSG_BED_Z                           = _UxGT("Bed Z");
   PROGMEM Language_Str MSG_NOZZLE                          = _UxGT("Nozzle");

commit df1ef496d1a88996cb1156fe933df59c6aaecbac
Author: borland1 <barryorlando@hotmail.com>
Date:   Tue Mar 23 06:21:11 2021 -0700

    Main / Config Custom Submenus (#18177)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index bd7e1b7a64..a34717acb5 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -111,7 +111,7 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_MESH_X                          = _UxGT("Index X");
   PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("Index Y");
   PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Valoare Z");
-  PROGMEM Language_Str MSG_USER_MENU                       = _UxGT("Comenzi Personalizate");
+  PROGMEM Language_Str MSG_CUSTOM_COMMANDS                 = _UxGT("Comenzi Personalizate");
   PROGMEM Language_Str MSG_M48_TEST                        = _UxGT("M48 Probe Test");
   PROGMEM Language_Str MSG_M48_POINT                       = _UxGT("M48 Point");
   PROGMEM Language_Str MSG_M48_DEVIATION                   = _UxGT("Deviation");

commit 21c7e699f13335a3ca5c9bb3c4ec7deb8e6a5fc4
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jan 4 18:18:18 2021 -0600

    Remove untranslated strings

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index db07ac5c68..bd7e1b7a64 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -265,16 +265,6 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_PID_BAD_EXTRUDER_NUM            = _UxGT("Autotune failed. Bad extruder.");
   PROGMEM Language_Str MSG_PID_TEMP_TOO_HIGH               = _UxGT("Autotune failed. Temperature too high.");
   PROGMEM Language_Str MSG_PID_TIMEOUT                     = _UxGT("Autotune failed! Timeout.");
-  PROGMEM Language_Str MSG_PID_P                           = _UxGT("PID-P");
-  PROGMEM Language_Str MSG_PID_P_E                         = _UxGT("PID-P *");
-  PROGMEM Language_Str MSG_PID_I                           = _UxGT("PID-I");
-  PROGMEM Language_Str MSG_PID_I_E                         = _UxGT("PID-I *");
-  PROGMEM Language_Str MSG_PID_D                           = _UxGT("PID-D");
-  PROGMEM Language_Str MSG_PID_D_E                         = _UxGT("PID-D *");
-  PROGMEM Language_Str MSG_PID_C                           = _UxGT("PID-C");
-  PROGMEM Language_Str MSG_PID_C_E                         = _UxGT("PID-C *");
-  PROGMEM Language_Str MSG_PID_F                           = _UxGT("PID-F");
-  PROGMEM Language_Str MSG_PID_F_E                         = _UxGT("PID-F *");
   PROGMEM Language_Str MSG_SELECT                          = _UxGT("Select");
   PROGMEM Language_Str MSG_SELECT_E                        = _UxGT("Select *");
   PROGMEM Language_Str MSG_ACC                             = _UxGT("Accel");

commit 62cc65cafeb79626e6ff5520620e7ff29cb36304
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Dec 20 00:27:04 2020 -0600

    Languages cleanup

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 459cc5ee3d..db07ac5c68 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -91,12 +91,8 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("Racire");
   PROGMEM Language_Str MSG_CUTTER_FREQUENCY                = _UxGT("Frecventa");
   PROGMEM Language_Str MSG_LASER_MENU                      = _UxGT("Control Laser");
-  PROGMEM Language_Str MSG_LASER_OFF                       = _UxGT("Laser Oprit");
-  PROGMEM Language_Str MSG_LASER_ON                        = _UxGT("Laser Pornit");
   PROGMEM Language_Str MSG_LASER_POWER                     = _UxGT("Puterea Laserului");
   PROGMEM Language_Str MSG_SPINDLE_MENU                    = _UxGT("Controlul Spindle");
-  PROGMEM Language_Str MSG_SPINDLE_OFF                     = _UxGT("Spindle Oprit");
-  PROGMEM Language_Str MSG_SPINDLE_ON                      = _UxGT("Spindle Pornit");
   PROGMEM Language_Str MSG_SPINDLE_POWER                   = _UxGT("Puterea Spindle");
   PROGMEM Language_Str MSG_SPINDLE_REVERSE                 = _UxGT("Spindle Invers");
   PROGMEM Language_Str MSG_SWITCH_PS_ON                    = _UxGT("Porneste");

commit b0392be4bf872954d0134c90cd027ea3610d5b9a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Dec 13 01:50:02 2020 -0600

    SHORT_MANUAL_Z_MOVE => FINE_MANUAL_MOVE

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index c2e50fc698..459cc5ee3d 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -232,7 +232,7 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("Extruder");
   PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("Extruder *");
   PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("Capat Prea Rece");
-  PROGMEM Language_Str MSG_MOVE_Z_DIST                     = _UxGT("Move %smm");
+  PROGMEM Language_Str MSG_MOVE_N_MM                       = _UxGT("Move %smm");
   PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("Move 0.1mm");
   PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("Move 1mm");
   PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("Move 10mm");

commit f8e83f79c5012c70bae788308f8665f117c4f93c
Author: Simone Primarosa <simonepri@outlook.com>
Date:   Sat Nov 21 03:36:19 2020 +0100

    Superscript substitution (#20219)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index c4d2bea073..c2e50fc698 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -315,8 +315,8 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Temperature");
   PROGMEM Language_Str MSG_MOTION                          = _UxGT("Motion");
   PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("Filament");
-  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("E in mm³");
-  PROGMEM Language_Str MSG_VOLUMETRIC_LIMIT                = _UxGT("E Limit in mm³");
+  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("E in mm") SUPERSCRIPT_THREE;
+  PROGMEM Language_Str MSG_VOLUMETRIC_LIMIT                = _UxGT("E Limit in mm") SUPERSCRIPT_THREE;
   PROGMEM Language_Str MSG_VOLUMETRIC_LIMIT_E              = _UxGT("E Limit *");
   PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("Fil. Dia.");
   PROGMEM Language_Str MSG_FILAMENT_DIAM_E                 = _UxGT("Fil. Dia. *");

commit 18fb4b1ce1cff0843bb2ac2cb810dd15081747b4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Nov 7 17:43:47 2020 -0600

    MSG_AUTOSTART => MSG_RUN_AUTO_FILES

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 7b54f24abf..c4d2bea073 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -53,7 +53,7 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_MAIN                            = _UxGT("Principal");
   PROGMEM Language_Str MSG_ADVANCED_SETTINGS               = _UxGT("Setari Avansate");
   PROGMEM Language_Str MSG_CONFIGURATION                   = _UxGT("Configurare");
-  PROGMEM Language_Str MSG_AUTOSTART                       = _UxGT("Autostart");
+  PROGMEM Language_Str MSG_RUN_AUTO_FILES                  = _UxGT("Autostart");
   PROGMEM Language_Str MSG_DISABLE_STEPPERS                = _UxGT("Dezactivare Motoare");
   PROGMEM Language_Str MSG_DEBUG_MENU                      = _UxGT("Meniu Debug");
   PROGMEM Language_Str MSG_PROGRESS_BAR_TEST               = _UxGT("Test Bara Progres");

commit b31e358270608afd02be895d4e3ca43ae927d31e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 6 02:59:51 2020 -0500

    Improve retract / unretract labels

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 46c54f1b99..7b54f24abf 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -375,13 +375,13 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_STOPPED                         = _UxGT("STOPPED. ");
   PROGMEM Language_Str MSG_CONTROL_RETRACT                 = _UxGT("Retract mm");
   PROGMEM Language_Str MSG_CONTROL_RETRACT_SWAP            = _UxGT("Swap Re.mm");
-  PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("Retract  V");
+  PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("Retract V");
   PROGMEM Language_Str MSG_CONTROL_RETRACT_ZHOP            = _UxGT("Hop mm");
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("UnRet mm");
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("S UnRet mm");
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("UnRet V");
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("Unretr. mm");
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("S Unretr. mm");
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("Unretract V");
   PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAPF   = _UxGT("S UnRet V");
-  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("AutoRetr.");
+  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("Auto-Retract");
   PROGMEM Language_Str MSG_FILAMENT_SWAP_LENGTH            = _UxGT("Swap Length");
   PROGMEM Language_Str MSG_FILAMENT_SWAP_EXTRA             = _UxGT("Swap Extra");
   PROGMEM Language_Str MSG_FILAMENT_PURGE_LENGTH           = _UxGT("Purge Length");

commit 0ff3ae3cc600828fec955c35c37b44497fdff621
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Oct 4 14:29:02 2020 -0500

    Fix Tune/Fan edit items
    
    - Fixes #19617
    - Followup to #18400

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index d71471a09d..46c54f1b99 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -631,8 +631,8 @@ namespace Language_ro {
 
 #if FAN_COUNT == 1
   #define MSG_FIRST_FAN_SPEED       MSG_FAN_SPEED
-  #define MSG_FIRST_EXTRA_FAN_SPEED MSG_EXTRA_FAN_SPEED
+  #define MSG_EXTRA_FIRST_FAN_SPEED MSG_EXTRA_FAN_SPEED
 #else
   #define MSG_FIRST_FAN_SPEED       MSG_FAN_SPEED_N
-  #define MSG_FIRST_EXTRA_FAN_SPEED MSG_EXTRA_FAN_SPEED_N
+  #define MSG_EXTRA_FIRST_FAN_SPEED MSG_EXTRA_FAN_SPEED_N
 #endif

commit 979876e958e73e642b51eb655461c92947fe1deb
Author: ellensp <ellensp@hotmail.com>
Date:   Mon Sep 14 16:58:39 2020 +1200

    Improve temperature runaway, idle timeout (#19339)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 0d5b1568a7..d71471a09d 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -448,10 +448,6 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_THERMAL_RUNAWAY_CHAMBER         = _UxGT("CHAMBER T. RUNAWAY");
   PROGMEM Language_Str MSG_ERR_MAXTEMP                     = _UxGT("Err: MAXTEMP");
   PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("Err: MINTEMP");
-  PROGMEM Language_Str MSG_ERR_MAXTEMP_BED                 = _UxGT("Err: MAXTEMP BED");
-  PROGMEM Language_Str MSG_ERR_MINTEMP_BED                 = _UxGT("Err: MINTEMP BED");
-  PROGMEM Language_Str MSG_ERR_MAXTEMP_CHAMBER             = _UxGT("Err: MAXTEMP CHAMBER");
-  PROGMEM Language_Str MSG_ERR_MINTEMP_CHAMBER             = _UxGT("Err: MINTEMP CHAMBER");
   PROGMEM Language_Str MSG_HALTED                          = _UxGT("PRINTER HALTED");
   PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Please Reset");
   PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("d"); // One character only

commit b2ba9009d045fc21e7a923e92ab9a91e4275247d
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Thu Sep 10 23:47:58 2020 +0200

    Fix "too cold" in M600 (#19332)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index dc55911176..0d5b1568a7 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -532,7 +532,6 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_RUNOUT_DISTANCE_MM              = _UxGT("Runout Dist mm");
   PROGMEM Language_Str MSG_KILL_HOMING_FAILED              = _UxGT("Homing Failed");
   PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT("Probing Failed");
-  PROGMEM Language_Str MSG_M600_TOO_COLD                   = _UxGT("M600: Too Cold");
 
   PROGMEM Language_Str MSG_MMU2_CHOOSE_FILAMENT_HEADER     = _UxGT("CHOOSE FILAMENT");
   PROGMEM Language_Str MSG_MMU2_MENU                       = _UxGT("MMU");

commit 56c44b053d11925c67a32f26ad84c2e76c97fd56
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Tue Sep 1 23:59:29 2020 +0200

    Delete old LCD strings (#19227)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 39e5cb9e2c..dc55911176 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -442,8 +442,6 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_BABYSTEP_TOTAL                  = _UxGT("Total");
   PROGMEM Language_Str MSG_ENDSTOP_ABORT                   = _UxGT("Endstop Abort");
   PROGMEM Language_Str MSG_HEATING_FAILED_LCD              = _UxGT("Heating Failed");
-  PROGMEM Language_Str MSG_HEATING_FAILED_LCD_BED          = _UxGT("Bed Heating Failed");
-  PROGMEM Language_Str MSG_HEATING_FAILED_LCD_CHAMBER      = _UxGT("Chamber Heating Fail");
   PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("Err: REDUNDANT TEMP");
   PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("THERMAL RUNAWAY");
   PROGMEM Language_Str MSG_THERMAL_RUNAWAY_BED             = _UxGT("BED THERMAL RUNAWAY");

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index de9c1106de..39e5cb9e2c 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once

commit a3795e3e48effb244c9f7a0a5b60402875efb368
Author: cr20-123 <66994235+cr20-123@users.noreply.github.com>
Date:   Sat Jul 18 18:41:47 2020 -0400

    Prettier BLTouch menu items (#18682)

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 51f1a00101..de9c1106de 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -412,14 +412,14 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("Z Probe Past Bed");
   PROGMEM Language_Str MSG_SKEW_FACTOR                     = _UxGT("Skew Factor");
   PROGMEM Language_Str MSG_BLTOUCH                         = _UxGT("BLTouch");
-  PROGMEM Language_Str MSG_BLTOUCH_SELFTEST                = _UxGT("Cmd: Self-Test");
-  PROGMEM Language_Str MSG_BLTOUCH_RESET                   = _UxGT("Cmd: Reset");
-  PROGMEM Language_Str MSG_BLTOUCH_STOW                    = _UxGT("Cmd: Stow");
-  PROGMEM Language_Str MSG_BLTOUCH_DEPLOY                  = _UxGT("Cmd: Deploy");
-  PROGMEM Language_Str MSG_BLTOUCH_SW_MODE                 = _UxGT("Cmd: SW-Mode");
-  PROGMEM Language_Str MSG_BLTOUCH_5V_MODE                 = _UxGT("Cmd: 5V-Mode");
-  PROGMEM Language_Str MSG_BLTOUCH_OD_MODE                 = _UxGT("Cmd: OD-Mode");
-  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE              = _UxGT("Cmd: Mode-Store");
+  PROGMEM Language_Str MSG_BLTOUCH_SELFTEST                = _UxGT("Self-Test");
+  PROGMEM Language_Str MSG_BLTOUCH_RESET                   = _UxGT("Reset");
+  PROGMEM Language_Str MSG_BLTOUCH_STOW                    = _UxGT("Stow");
+  PROGMEM Language_Str MSG_BLTOUCH_DEPLOY                  = _UxGT("Deploy");
+  PROGMEM Language_Str MSG_BLTOUCH_SW_MODE                 = _UxGT("SW-Mode");
+  PROGMEM Language_Str MSG_BLTOUCH_5V_MODE                 = _UxGT("5V-Mode");
+  PROGMEM Language_Str MSG_BLTOUCH_OD_MODE                 = _UxGT("OD-Mode");
+  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE              = _UxGT("Mode-Store");
   PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE_5V           = _UxGT("Set BLTouch to 5V");
   PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE_OD           = _UxGT("Set BLTouch to OD");
   PROGMEM Language_Str MSG_BLTOUCH_MODE_ECHO               = _UxGT("Report Drain");

commit b0c6cfb0511b8d71fec26ab91cd945f3d623b3c0
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Thu Jul 9 10:11:57 2020 +0200

    MarlinUI support for up to 5 Material Presets (#18488)
    
    - Add `I` preset parameter to `G26`, `M106`, `M140`, and `M190`.
    - Extend menu items to permit a string interpolation.
    - Keep material names in a list and interpolate in menu items.
    - Extend material presets to support up to 5 predefined materials.
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index da9a159a3f..51f1a00101 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -70,20 +70,23 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_SET_HOME_OFFSETS                = _UxGT("Seteaza Offseturile Acasa");
   PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("Offseturi Aplicate");
   PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("Seteaza Originea");
-  PROGMEM Language_Str MSG_PREHEAT_1                       = _UxGT("Preincalzeste ") PREHEAT_1_LABEL;
-  PROGMEM Language_Str MSG_PREHEAT_1_H                     = _UxGT("Preincalzeste ") PREHEAT_1_LABEL " ~";
-  PROGMEM Language_Str MSG_PREHEAT_1_END                   = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul");
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E                 = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul ~");
-  PROGMEM Language_Str MSG_PREHEAT_1_ALL                   = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Tot");
-  PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY               = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Patul");
-  PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS              = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Conf");
-  PROGMEM Language_Str MSG_PREHEAT_2                       = _UxGT("Preincalzeste ") PREHEAT_2_LABEL;
-  PROGMEM Language_Str MSG_PREHEAT_2_H                     = _UxGT("Preincalzeste ") PREHEAT_2_LABEL " ~";
-  PROGMEM Language_Str MSG_PREHEAT_2_END                   = _UxGT("Preincalzeste ") PREHEAT_2_LABEL _UxGT(" Capatul");
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E                 = _UxGT("Preincalzeste ") PREHEAT_2_LABEL _UxGT(" Capatul ~");
-  PROGMEM Language_Str MSG_PREHEAT_2_ALL                   = _UxGT("Preincalzeste ") PREHEAT_2_LABEL _UxGT(" Tot");
-  PROGMEM Language_Str MSG_PREHEAT_2_BEDONLY               = _UxGT("Preincalzeste ") PREHEAT_2_LABEL _UxGT(" Patul");
-  PROGMEM Language_Str MSG_PREHEAT_2_SETTINGS              = _UxGT("Preincalzeste ") PREHEAT_2_LABEL _UxGT(" Conf");
+  #if PREHEAT_COUNT
+    PROGMEM Language_Str MSG_PREHEAT_1                     = _UxGT("Preincalzeste ") PREHEAT_1_LABEL;
+    PROGMEM Language_Str MSG_PREHEAT_1_H                   = _UxGT("Preincalzeste ") PREHEAT_1_LABEL " ~";
+    PROGMEM Language_Str MSG_PREHEAT_1_END                 = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul");
+    PROGMEM Language_Str MSG_PREHEAT_1_END_E               = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul ~");
+    PROGMEM Language_Str MSG_PREHEAT_1_ALL                 = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Tot");
+    PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY             = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Patul");
+    PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS            = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Conf");
+
+    PROGMEM Language_Str MSG_PREHEAT_M                     = _UxGT("Preincalzeste $");
+    PROGMEM Language_Str MSG_PREHEAT_M_H                   = _UxGT("Preincalzeste $ ~");
+    PROGMEM Language_Str MSG_PREHEAT_M_END                 = _UxGT("Preincalzeste $ Capatul");
+    PROGMEM Language_Str MSG_PREHEAT_M_END_E               = _UxGT("Preincalzeste $ Capatul ~");
+    PROGMEM Language_Str MSG_PREHEAT_M_ALL                 = _UxGT("Preincalzeste $ Tot");
+    PROGMEM Language_Str MSG_PREHEAT_M_BEDONLY             = _UxGT("Preincalzeste $ Patul");
+    PROGMEM Language_Str MSG_PREHEAT_M_SETTINGS            = _UxGT("Preincalzeste $ Conf");
+  #endif
   PROGMEM Language_Str MSG_PREHEAT_CUSTOM                  = _UxGT("Preincalzeste Personalizat");
   PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("Racire");
   PROGMEM Language_Str MSG_CUTTER_FREQUENCY                = _UxGT("Frecventa");
@@ -146,14 +149,14 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_UBL_DONE_EDITING_MESH           = _UxGT("Done Editing Mesh");
   PROGMEM Language_Str MSG_UBL_BUILD_CUSTOM_MESH           = _UxGT("Build Custom Mesh");
   PROGMEM Language_Str MSG_UBL_BUILD_MESH_MENU             = _UxGT("Build Mesh");
-  PROGMEM Language_Str MSG_UBL_BUILD_MESH_M1               = _UxGT("Build Mesh (") PREHEAT_1_LABEL _UxGT(")");
-  PROGMEM Language_Str MSG_UBL_BUILD_MESH_M2               = _UxGT("Build Mesh (") PREHEAT_2_LABEL _UxGT(")");
+  #if PREHEAT_COUNT
+    PROGMEM Language_Str MSG_UBL_BUILD_MESH_M              = _UxGT("Build Mesh ($)");
+    PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M           = _UxGT("Validate Mesh ($)");
+  #endif
   PROGMEM Language_Str MSG_UBL_BUILD_COLD_MESH             = _UxGT("Build Cold Mesh");
   PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_ADJUST          = _UxGT("Adjust Mesh Height");
   PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_AMOUNT          = _UxGT("Height Amount");
   PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_MENU          = _UxGT("Validate Mesh");
-  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M1            = _UxGT("Validate Mesh (") PREHEAT_1_LABEL _UxGT(")");
-  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M2            = _UxGT("Validate Mesh (") PREHEAT_2_LABEL _UxGT(")");
   PROGMEM Language_Str MSG_UBL_VALIDATE_CUSTOM_MESH        = _UxGT("Validate Custom Mesh");
   PROGMEM Language_Str MSG_G26_HEATING_BED                 = _UxGT("G26 Heating Bed");
   PROGMEM Language_Str MSG_G26_HEATING_NOZZLE              = _UxGT("G26 Heating Nozzle");

commit a6b8b12a6a001a25dc73e8ab08f71e357ea58e48
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jul 5 18:00:37 2020 -0500

    Simplify home_z_safely, respect HOME_AFTER_DEACTIVATE

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
index 643589f1bd..da9a159a3f 100644
--- a/Marlin/src/lcd/language/language_ro.h
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -451,7 +451,6 @@ namespace Language_ro {
   PROGMEM Language_Str MSG_ERR_MINTEMP_BED                 = _UxGT("Err: MINTEMP BED");
   PROGMEM Language_Str MSG_ERR_MAXTEMP_CHAMBER             = _UxGT("Err: MAXTEMP CHAMBER");
   PROGMEM Language_Str MSG_ERR_MINTEMP_CHAMBER             = _UxGT("Err: MINTEMP CHAMBER");
-  PROGMEM Language_Str MSG_ERR_Z_HOMING                    = _UxGT("Home XY First");
   PROGMEM Language_Str MSG_HALTED                          = _UxGT("PRINTER HALTED");
   PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Please Reset");
   PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("d"); // One character only

commit 59e4de8a55abc7eb0fd0b8c3c753e22c9aee0fb1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jun 27 22:59:44 2020 -0500

    Add Romanian language (#18455)
    
    Co-authored-by: cristyanul <47246451+cristyanul@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_ro.h b/Marlin/src/lcd/language/language_ro.h
new file mode 100644
index 0000000000..643589f1bd
--- /dev/null
+++ b/Marlin/src/lcd/language/language_ro.h
@@ -0,0 +1,643 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+ /**
+  * Romanian
+  *
+  * LCD Menu Messages
+  * See also https://marlinfw.org/docs/development/lcd_language.html
+  *
+  * Translation by cristyanul
+  */
+namespace Language_ro {
+  using namespace Language_en; // Inherit undefined strings from English
+
+  constexpr uint8_t    CHARSIZE                            = 2;
+  PROGMEM Language_Str LANGUAGE                            = _UxGT("Romanian");
+
+  PROGMEM Language_Str WELCOME_MSG                         = MACHINE_NAME _UxGT(" Pregatit.");
+  PROGMEM Language_Str MSG_MARLIN                          = _UxGT("Marlin");
+  PROGMEM Language_Str MSG_YES                             = _UxGT("DA");
+  PROGMEM Language_Str MSG_NO                              = _UxGT("NU");
+  PROGMEM Language_Str MSG_BACK                            = _UxGT("Inapoi");
+  PROGMEM Language_Str MSG_MEDIA_ABORTING                  = _UxGT("Abandon...");
+  PROGMEM Language_Str MSG_MEDIA_INSERTED                  = _UxGT("Media Introdus");
+  PROGMEM Language_Str MSG_MEDIA_REMOVED                   = _UxGT("Media Inlaturat");
+  PROGMEM Language_Str MSG_MEDIA_WAITING                   = _UxGT("Astept Media");
+  PROGMEM Language_Str MSG_MEDIA_READ_ERROR                = _UxGT("Eroare Citire Media");
+  PROGMEM Language_Str MSG_MEDIA_USB_REMOVED               = _UxGT("Dispozitiv USB Inlaturat");
+  PROGMEM Language_Str MSG_MEDIA_USB_FAILED                = _UxGT("Pornire USB Esuata");
+  PROGMEM Language_Str MSG_KILL_SUBCALL_OVERFLOW           = _UxGT("Eroare:Subcall Overflow");
+  PROGMEM Language_Str MSG_LCD_ENDSTOPS                    = _UxGT("Endstops"); // Max length 8 characters
+  PROGMEM Language_Str MSG_LCD_SOFT_ENDSTOPS               = _UxGT("Soft Endstops");
+  PROGMEM Language_Str MSG_MAIN                            = _UxGT("Principal");
+  PROGMEM Language_Str MSG_ADVANCED_SETTINGS               = _UxGT("Setari Avansate");
+  PROGMEM Language_Str MSG_CONFIGURATION                   = _UxGT("Configurare");
+  PROGMEM Language_Str MSG_AUTOSTART                       = _UxGT("Autostart");
+  PROGMEM Language_Str MSG_DISABLE_STEPPERS                = _UxGT("Dezactivare Motoare");
+  PROGMEM Language_Str MSG_DEBUG_MENU                      = _UxGT("Meniu Debug");
+  PROGMEM Language_Str MSG_PROGRESS_BAR_TEST               = _UxGT("Test Bara Progres");
+  PROGMEM Language_Str MSG_AUTO_HOME                       = _UxGT("Auto Acasa");
+  PROGMEM Language_Str MSG_AUTO_HOME_X                     = _UxGT("Acasa X");
+  PROGMEM Language_Str MSG_AUTO_HOME_Y                     = _UxGT("Acasa Y");
+  PROGMEM Language_Str MSG_AUTO_HOME_Z                     = _UxGT("Acasa Z");
+  PROGMEM Language_Str MSG_AUTO_Z_ALIGN                    = _UxGT("Auto Aliniere-Z");
+  PROGMEM Language_Str MSG_LEVEL_BED_HOMING                = _UxGT("Acasa XYZ");
+  PROGMEM Language_Str MSG_LEVEL_BED_WAITING               = _UxGT("Click pentru a incepe");
+  PROGMEM Language_Str MSG_LEVEL_BED_NEXT_POINT            = _UxGT("Urmatorul Punct");
+  PROGMEM Language_Str MSG_LEVEL_BED_DONE                  = _UxGT("Nivelare Terminata!");
+  PROGMEM Language_Str MSG_Z_FADE_HEIGHT                   = _UxGT("Fade Inaltime");
+  PROGMEM Language_Str MSG_SET_HOME_OFFSETS                = _UxGT("Seteaza Offseturile Acasa");
+  PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("Offseturi Aplicate");
+  PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("Seteaza Originea");
+  PROGMEM Language_Str MSG_PREHEAT_1                       = _UxGT("Preincalzeste ") PREHEAT_1_LABEL;
+  PROGMEM Language_Str MSG_PREHEAT_1_H                     = _UxGT("Preincalzeste ") PREHEAT_1_LABEL " ~";
+  PROGMEM Language_Str MSG_PREHEAT_1_END                   = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul");
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E                 = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Capatul ~");
+  PROGMEM Language_Str MSG_PREHEAT_1_ALL                   = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Tot");
+  PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY               = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Patul");
+  PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS              = _UxGT("Preincalzeste ") PREHEAT_1_LABEL _UxGT(" Conf");
+  PROGMEM Language_Str MSG_PREHEAT_2                       = _UxGT("Preincalzeste ") PREHEAT_2_LABEL;
+  PROGMEM Language_Str MSG_PREHEAT_2_H                     = _UxGT("Preincalzeste ") PREHEAT_2_LABEL " ~";
+  PROGMEM Language_Str MSG_PREHEAT_2_END                   = _UxGT("Preincalzeste ") PREHEAT_2_LABEL _UxGT(" Capatul");
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E                 = _UxGT("Preincalzeste ") PREHEAT_2_LABEL _UxGT(" Capatul ~");
+  PROGMEM Language_Str MSG_PREHEAT_2_ALL                   = _UxGT("Preincalzeste ") PREHEAT_2_LABEL _UxGT(" Tot");
+  PROGMEM Language_Str MSG_PREHEAT_2_BEDONLY               = _UxGT("Preincalzeste ") PREHEAT_2_LABEL _UxGT(" Patul");
+  PROGMEM Language_Str MSG_PREHEAT_2_SETTINGS              = _UxGT("Preincalzeste ") PREHEAT_2_LABEL _UxGT(" Conf");
+  PROGMEM Language_Str MSG_PREHEAT_CUSTOM                  = _UxGT("Preincalzeste Personalizat");
+  PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("Racire");
+  PROGMEM Language_Str MSG_CUTTER_FREQUENCY                = _UxGT("Frecventa");
+  PROGMEM Language_Str MSG_LASER_MENU                      = _UxGT("Control Laser");
+  PROGMEM Language_Str MSG_LASER_OFF                       = _UxGT("Laser Oprit");
+  PROGMEM Language_Str MSG_LASER_ON                        = _UxGT("Laser Pornit");
+  PROGMEM Language_Str MSG_LASER_POWER                     = _UxGT("Puterea Laserului");
+  PROGMEM Language_Str MSG_SPINDLE_MENU                    = _UxGT("Controlul Spindle");
+  PROGMEM Language_Str MSG_SPINDLE_OFF                     = _UxGT("Spindle Oprit");
+  PROGMEM Language_Str MSG_SPINDLE_ON                      = _UxGT("Spindle Pornit");
+  PROGMEM Language_Str MSG_SPINDLE_POWER                   = _UxGT("Puterea Spindle");
+  PROGMEM Language_Str MSG_SPINDLE_REVERSE                 = _UxGT("Spindle Invers");
+  PROGMEM Language_Str MSG_SWITCH_PS_ON                    = _UxGT("Porneste");
+  PROGMEM Language_Str MSG_SWITCH_PS_OFF                   = _UxGT("Opreste");
+  PROGMEM Language_Str MSG_EXTRUDE                         = _UxGT("Extrudeaza");
+  PROGMEM Language_Str MSG_RETRACT                         = _UxGT("Retracteaza");
+  PROGMEM Language_Str MSG_MOVE_AXIS                       = _UxGT("Muta Axa");
+  PROGMEM Language_Str MSG_BED_LEVELING                    = _UxGT("Nivelarea Patului");
+  PROGMEM Language_Str MSG_LEVEL_BED                       = _UxGT("Niveleaza Patul");
+  PROGMEM Language_Str MSG_LEVEL_CORNERS                   = _UxGT("Niveleaza Colturile");
+  PROGMEM Language_Str MSG_NEXT_CORNER                     = _UxGT("Urmatorul Colt");
+  PROGMEM Language_Str MSG_MESH_EDITOR                     = _UxGT("Editor Mesh");
+  PROGMEM Language_Str MSG_EDIT_MESH                       = _UxGT("Editeaza Mesh");
+  PROGMEM Language_Str MSG_EDITING_STOPPED                 = _UxGT("Editarea Meshului Oprita");
+  PROGMEM Language_Str MSG_PROBING_MESH                    = _UxGT("Punctul de Probare");
+  PROGMEM Language_Str MSG_MESH_X                          = _UxGT("Index X");
+  PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("Index Y");
+  PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Valoare Z");
+  PROGMEM Language_Str MSG_USER_MENU                       = _UxGT("Comenzi Personalizate");
+  PROGMEM Language_Str MSG_M48_TEST                        = _UxGT("M48 Probe Test");
+  PROGMEM Language_Str MSG_M48_POINT                       = _UxGT("M48 Point");
+  PROGMEM Language_Str MSG_M48_DEVIATION                   = _UxGT("Deviation");
+  PROGMEM Language_Str MSG_IDEX_MENU                       = _UxGT("IDEX Mode");
+  PROGMEM Language_Str MSG_OFFSETS_MENU                    = _UxGT("Tool Offsets");
+  PROGMEM Language_Str MSG_IDEX_MODE_AUTOPARK              = _UxGT("Auto-Park");
+  PROGMEM Language_Str MSG_IDEX_MODE_DUPLICATE             = _UxGT("Duplication");
+  PROGMEM Language_Str MSG_IDEX_MODE_MIRRORED_COPY         = _UxGT("Mirrored Copy");
+  PROGMEM Language_Str MSG_IDEX_MODE_FULL_CTRL             = _UxGT("Full Control");
+  PROGMEM Language_Str MSG_HOTEND_OFFSET_X                 = _UxGT("2nd Nozzle X");
+  PROGMEM Language_Str MSG_HOTEND_OFFSET_Y                 = _UxGT("2nd Nozzle Y");
+  PROGMEM Language_Str MSG_HOTEND_OFFSET_Z                 = _UxGT("2nd Nozzle Z");
+  PROGMEM Language_Str MSG_UBL_DOING_G29                   = _UxGT("Doing G29");
+  PROGMEM Language_Str MSG_UBL_TOOLS                       = _UxGT("UBL Tools");
+  PROGMEM Language_Str MSG_UBL_LEVEL_BED                   = _UxGT("Unified Bed Leveling");
+  PROGMEM Language_Str MSG_LCD_TILTING_MESH                = _UxGT("Tilting Point");
+  PROGMEM Language_Str MSG_UBL_MANUAL_MESH                 = _UxGT("Manually Build Mesh");
+  PROGMEM Language_Str MSG_UBL_BC_INSERT                   = _UxGT("Place Shim & Measure");
+  PROGMEM Language_Str MSG_UBL_BC_INSERT2                  = _UxGT("Measure");
+  PROGMEM Language_Str MSG_UBL_BC_REMOVE                   = _UxGT("Remove & Measure Bed");
+  PROGMEM Language_Str MSG_UBL_MOVING_TO_NEXT              = _UxGT("Moving to next");
+  PROGMEM Language_Str MSG_UBL_ACTIVATE_MESH               = _UxGT("Activate UBL");
+  PROGMEM Language_Str MSG_UBL_DEACTIVATE_MESH             = _UxGT("Deactivate UBL");
+  PROGMEM Language_Str MSG_UBL_SET_TEMP_BED                = _UxGT("Bed Temp");
+  PROGMEM Language_Str MSG_UBL_BED_TEMP_CUSTOM             = _UxGT("Bed Temp");
+  PROGMEM Language_Str MSG_UBL_SET_TEMP_HOTEND             = _UxGT("Hotend Temp");
+  PROGMEM Language_Str MSG_UBL_HOTEND_TEMP_CUSTOM          = _UxGT("Hotend Temp");
+  PROGMEM Language_Str MSG_UBL_MESH_EDIT                   = _UxGT("Mesh Edit");
+  PROGMEM Language_Str MSG_UBL_EDIT_CUSTOM_MESH            = _UxGT("Edit Custom Mesh");
+  PROGMEM Language_Str MSG_UBL_FINE_TUNE_MESH              = _UxGT("Fine Tuning Mesh");
+  PROGMEM Language_Str MSG_UBL_DONE_EDITING_MESH           = _UxGT("Done Editing Mesh");
+  PROGMEM Language_Str MSG_UBL_BUILD_CUSTOM_MESH           = _UxGT("Build Custom Mesh");
+  PROGMEM Language_Str MSG_UBL_BUILD_MESH_MENU             = _UxGT("Build Mesh");
+  PROGMEM Language_Str MSG_UBL_BUILD_MESH_M1               = _UxGT("Build Mesh (") PREHEAT_1_LABEL _UxGT(")");
+  PROGMEM Language_Str MSG_UBL_BUILD_MESH_M2               = _UxGT("Build Mesh (") PREHEAT_2_LABEL _UxGT(")");
+  PROGMEM Language_Str MSG_UBL_BUILD_COLD_MESH             = _UxGT("Build Cold Mesh");
+  PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_ADJUST          = _UxGT("Adjust Mesh Height");
+  PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_AMOUNT          = _UxGT("Height Amount");
+  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_MENU          = _UxGT("Validate Mesh");
+  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M1            = _UxGT("Validate Mesh (") PREHEAT_1_LABEL _UxGT(")");
+  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M2            = _UxGT("Validate Mesh (") PREHEAT_2_LABEL _UxGT(")");
+  PROGMEM Language_Str MSG_UBL_VALIDATE_CUSTOM_MESH        = _UxGT("Validate Custom Mesh");
+  PROGMEM Language_Str MSG_G26_HEATING_BED                 = _UxGT("G26 Heating Bed");
+  PROGMEM Language_Str MSG_G26_HEATING_NOZZLE              = _UxGT("G26 Heating Nozzle");
+  PROGMEM Language_Str MSG_G26_MANUAL_PRIME                = _UxGT("Manual priming...");
+  PROGMEM Language_Str MSG_G26_FIXED_LENGTH                = _UxGT("Fixed Length Prime");
+  PROGMEM Language_Str MSG_G26_PRIME_DONE                  = _UxGT("Done Priming");
+  PROGMEM Language_Str MSG_G26_CANCELED                    = _UxGT("G26 Canceled");
+  PROGMEM Language_Str MSG_G26_LEAVING                     = _UxGT("Leaving G26");
+  PROGMEM Language_Str MSG_UBL_CONTINUE_MESH               = _UxGT("Continue Bed Mesh");
+  PROGMEM Language_Str MSG_UBL_MESH_LEVELING               = _UxGT("Mesh Leveling");
+  PROGMEM Language_Str MSG_UBL_3POINT_MESH_LEVELING        = _UxGT("3-Point Leveling");
+  PROGMEM Language_Str MSG_UBL_GRID_MESH_LEVELING          = _UxGT("Grid Mesh Leveling");
+  PROGMEM Language_Str MSG_UBL_MESH_LEVEL                  = _UxGT("Level Mesh");
+  PROGMEM Language_Str MSG_UBL_SIDE_POINTS                 = _UxGT("Side Points");
+  PROGMEM Language_Str MSG_UBL_MAP_TYPE                    = _UxGT("Map Type");
+  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP                  = _UxGT("Output Mesh Map");
+  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_HOST             = _UxGT("Output for Host");
+  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_CSV              = _UxGT("Output for CSV");
+  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_BACKUP           = _UxGT("Off Imprimanta Backup");
+  PROGMEM Language_Str MSG_UBL_INFO_UBL                    = _UxGT("Output UBL Info");
+  PROGMEM Language_Str MSG_UBL_FILLIN_AMOUNT               = _UxGT("Fill-in Amount");
+  PROGMEM Language_Str MSG_UBL_MANUAL_FILLIN               = _UxGT("Manual Fill-in");
+  PROGMEM Language_Str MSG_UBL_SMART_FILLIN                = _UxGT("Smart Fill-in");
+  PROGMEM Language_Str MSG_UBL_FILLIN_MESH                 = _UxGT("Fill-in Mesh");
+  PROGMEM Language_Str MSG_UBL_INVALIDATE_ALL              = _UxGT("Invalidate All");
+  PROGMEM Language_Str MSG_UBL_INVALIDATE_CLOSEST          = _UxGT("Invalidate Closest");
+  PROGMEM Language_Str MSG_UBL_FINE_TUNE_ALL               = _UxGT("Fine Tune All");
+  PROGMEM Language_Str MSG_UBL_FINE_TUNE_CLOSEST           = _UxGT("Fine Tune Closest");
+  PROGMEM Language_Str MSG_UBL_STORAGE_MESH_MENU           = _UxGT("Mesh Storage");
+  PROGMEM Language_Str MSG_UBL_STORAGE_SLOT                = _UxGT("Memory Slot");
+  PROGMEM Language_Str MSG_UBL_LOAD_MESH                   = _UxGT("Load Bed Mesh");
+  PROGMEM Language_Str MSG_UBL_SAVE_MESH                   = _UxGT("Save Bed Mesh");
+  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("Mesh %i Loaded");
+  PROGMEM Language_Str MSG_MESH_SAVED                      = _UxGT("Mesh %i Saved");
+  PROGMEM Language_Str MSG_UBL_NO_STORAGE                  = _UxGT("No Storage");
+  PROGMEM Language_Str MSG_UBL_SAVE_ERROR                  = _UxGT("Err: UBL Save");
+  PROGMEM Language_Str MSG_UBL_RESTORE_ERROR               = _UxGT("Err: UBL Restore");
+  PROGMEM Language_Str MSG_UBL_Z_OFFSET                    = _UxGT("Z-Offset: ");
+  PROGMEM Language_Str MSG_UBL_Z_OFFSET_STOPPED            = _UxGT("Z-Offset Stopped");
+  PROGMEM Language_Str MSG_UBL_STEP_BY_STEP_MENU           = _UxGT("Step-By-Step UBL");
+  PROGMEM Language_Str MSG_UBL_1_BUILD_COLD_MESH           = _UxGT("1. Build Cold Mesh");
+  PROGMEM Language_Str MSG_UBL_2_SMART_FILLIN              = _UxGT("2. Smart Fill-in");
+  PROGMEM Language_Str MSG_UBL_3_VALIDATE_MESH_MENU        = _UxGT("3. Validate Mesh");
+  PROGMEM Language_Str MSG_UBL_4_FINE_TUNE_ALL             = _UxGT("4. Fine Tune All");
+  PROGMEM Language_Str MSG_UBL_5_VALIDATE_MESH_MENU        = _UxGT("5. Validate Mesh");
+  PROGMEM Language_Str MSG_UBL_6_FINE_TUNE_ALL             = _UxGT("6. Fine Tune All");
+  PROGMEM Language_Str MSG_UBL_7_SAVE_MESH                 = _UxGT("7. Save Bed Mesh");
+
+  PROGMEM Language_Str MSG_LED_CONTROL                     = _UxGT("LED Control");
+  PROGMEM Language_Str MSG_LEDS                            = _UxGT("Lights");
+  PROGMEM Language_Str MSG_LED_PRESETS                     = _UxGT("Light Presets");
+  PROGMEM Language_Str MSG_SET_LEDS_RED                    = _UxGT("Red");
+  PROGMEM Language_Str MSG_SET_LEDS_ORANGE                 = _UxGT("Orange");
+  PROGMEM Language_Str MSG_SET_LEDS_YELLOW                 = _UxGT("Yellow");
+  PROGMEM Language_Str MSG_SET_LEDS_GREEN                  = _UxGT("Green");
+  PROGMEM Language_Str MSG_SET_LEDS_BLUE                   = _UxGT("Blue");
+  PROGMEM Language_Str MSG_SET_LEDS_INDIGO                 = _UxGT("Indigo");
+  PROGMEM Language_Str MSG_SET_LEDS_VIOLET                 = _UxGT("Violet");
+  PROGMEM Language_Str MSG_SET_LEDS_WHITE                  = _UxGT("White");
+  PROGMEM Language_Str MSG_SET_LEDS_DEFAULT                = _UxGT("Default");
+  PROGMEM Language_Str MSG_CUSTOM_LEDS                     = _UxGT("Custom Lights");
+  PROGMEM Language_Str MSG_INTENSITY_R                     = _UxGT("Red Intensity");
+  PROGMEM Language_Str MSG_INTENSITY_G                     = _UxGT("Green Intensity");
+  PROGMEM Language_Str MSG_INTENSITY_B                     = _UxGT("Blue Intensity");
+  PROGMEM Language_Str MSG_INTENSITY_W                     = _UxGT("White Intensity");
+  PROGMEM Language_Str MSG_LED_BRIGHTNESS                  = _UxGT("Brightness");
+
+  PROGMEM Language_Str MSG_MOVING                          = _UxGT("Moving...");
+  PROGMEM Language_Str MSG_FREE_XY                         = _UxGT("Free XY");
+  PROGMEM Language_Str MSG_MOVE_X                          = _UxGT("Move X");
+  PROGMEM Language_Str MSG_MOVE_Y                          = _UxGT("Move Y");
+  PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("Move Z");
+  PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("Extruder");
+  PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("Extruder *");
+  PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("Capat Prea Rece");
+  PROGMEM Language_Str MSG_MOVE_Z_DIST                     = _UxGT("Move %smm");
+  PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("Move 0.1mm");
+  PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("Move 1mm");
+  PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("Move 10mm");
+  PROGMEM Language_Str MSG_SPEED                           = _UxGT("Speed");
+  PROGMEM Language_Str MSG_BED_Z                           = _UxGT("Bed Z");
+  PROGMEM Language_Str MSG_NOZZLE                          = _UxGT("Nozzle");
+  PROGMEM Language_Str MSG_NOZZLE_N                        = _UxGT("Nozzle ~");
+  PROGMEM Language_Str MSG_NOZZLE_PARKED                   = _UxGT("Nozzle Parked");
+  PROGMEM Language_Str MSG_NOZZLE_STANDBY                  = _UxGT("Nozzle Standby");
+  PROGMEM Language_Str MSG_BED                             = _UxGT("Bed");
+  PROGMEM Language_Str MSG_CHAMBER                         = _UxGT("Enclosure");
+  PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("Fan Speed");
+  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("Fan Speed ~");
+  PROGMEM Language_Str MSG_STORED_FAN_N                    = _UxGT("Stored Fan ~");
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("Extra Fan Speed");
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("Extra Fan Speed ~");
+  PROGMEM Language_Str MSG_CONTROLLER_FAN                  = _UxGT("Controller Fan");
+  PROGMEM Language_Str MSG_CONTROLLER_FAN_IDLE_SPEED       = _UxGT("Idle Speed");
+  PROGMEM Language_Str MSG_CONTROLLER_FAN_AUTO_ON          = _UxGT("Auto Mode");
+  PROGMEM Language_Str MSG_CONTROLLER_FAN_SPEED            = _UxGT("Active Speed");
+  PROGMEM Language_Str MSG_CONTROLLER_FAN_DURATION         = _UxGT("Idle Period");
+  PROGMEM Language_Str MSG_FLOW                            = _UxGT("Flow");
+  PROGMEM Language_Str MSG_FLOW_N                          = _UxGT("Flow ~");
+  PROGMEM Language_Str MSG_CONTROL                         = _UxGT("Control");
+  PROGMEM Language_Str MSG_MIN                             = " " LCD_STR_THERMOMETER _UxGT(" Min");
+  PROGMEM Language_Str MSG_MAX                             = " " LCD_STR_THERMOMETER _UxGT(" Max");
+  PROGMEM Language_Str MSG_FACTOR                          = " " LCD_STR_THERMOMETER _UxGT(" Fact");
+  PROGMEM Language_Str MSG_AUTOTEMP                        = _UxGT("Autotemp");
+  PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("On");
+  PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("Off");
+  PROGMEM Language_Str MSG_PID_AUTOTUNE                    = _UxGT("PID Autotune");
+  PROGMEM Language_Str MSG_PID_AUTOTUNE_E                  = _UxGT("PID Autotune *");
+  PROGMEM Language_Str MSG_PID_AUTOTUNE_DONE               = _UxGT("PID tuning done");
+  PROGMEM Language_Str MSG_PID_BAD_EXTRUDER_NUM            = _UxGT("Autotune failed. Bad extruder.");
+  PROGMEM Language_Str MSG_PID_TEMP_TOO_HIGH               = _UxGT("Autotune failed. Temperature too high.");
+  PROGMEM Language_Str MSG_PID_TIMEOUT                     = _UxGT("Autotune failed! Timeout.");
+  PROGMEM Language_Str MSG_PID_P                           = _UxGT("PID-P");
+  PROGMEM Language_Str MSG_PID_P_E                         = _UxGT("PID-P *");
+  PROGMEM Language_Str MSG_PID_I                           = _UxGT("PID-I");
+  PROGMEM Language_Str MSG_PID_I_E                         = _UxGT("PID-I *");
+  PROGMEM Language_Str MSG_PID_D                           = _UxGT("PID-D");
+  PROGMEM Language_Str MSG_PID_D_E                         = _UxGT("PID-D *");
+  PROGMEM Language_Str MSG_PID_C                           = _UxGT("PID-C");
+  PROGMEM Language_Str MSG_PID_C_E                         = _UxGT("PID-C *");
+  PROGMEM Language_Str MSG_PID_F                           = _UxGT("PID-F");
+  PROGMEM Language_Str MSG_PID_F_E                         = _UxGT("PID-F *");
+  PROGMEM Language_Str MSG_SELECT                          = _UxGT("Select");
+  PROGMEM Language_Str MSG_SELECT_E                        = _UxGT("Select *");
+  PROGMEM Language_Str MSG_ACC                             = _UxGT("Accel");
+  PROGMEM Language_Str MSG_JERK                            = _UxGT("Jerk");
+  PROGMEM Language_Str MSG_VA_JERK                         = _UxGT("V") LCD_STR_A _UxGT("-Jerk");
+  PROGMEM Language_Str MSG_VB_JERK                         = _UxGT("V") LCD_STR_B _UxGT("-Jerk");
+  PROGMEM Language_Str MSG_VC_JERK                         = _UxGT("V") LCD_STR_C _UxGT("-Jerk");
+  PROGMEM Language_Str MSG_VE_JERK                         = _UxGT("Ve-Jerk");
+  PROGMEM Language_Str MSG_JUNCTION_DEVIATION              = _UxGT("Junction Dev");
+  PROGMEM Language_Str MSG_VELOCITY                        = _UxGT("Velocity");
+  PROGMEM Language_Str MSG_VMAX_A                          = _UxGT("Vmax ") LCD_STR_A;
+  PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("Vmax ") LCD_STR_B;
+  PROGMEM Language_Str MSG_VMAX_C                          = _UxGT("Vmax ") LCD_STR_C;
+  PROGMEM Language_Str MSG_VMAX_E                          = _UxGT("Vmax ") LCD_STR_E;
+  PROGMEM Language_Str MSG_VMAX_EN                         = _UxGT("Vmax *");
+  PROGMEM Language_Str MSG_VMIN                            = _UxGT("Vmin");
+  PROGMEM Language_Str MSG_VTRAV_MIN                       = _UxGT("VTrav Min");
+  PROGMEM Language_Str MSG_ACCELERATION                    = _UxGT("Acceleration");
+  PROGMEM Language_Str MSG_AMAX_A                          = _UxGT("Amax ") LCD_STR_A;
+  PROGMEM Language_Str MSG_AMAX_B                          = _UxGT("Amax ") LCD_STR_B;
+  PROGMEM Language_Str MSG_AMAX_C                          = _UxGT("Amax ") LCD_STR_C;
+  PROGMEM Language_Str MSG_AMAX_E                          = _UxGT("Amax ") LCD_STR_E;
+  PROGMEM Language_Str MSG_AMAX_EN                         = _UxGT("Amax *");
+  PROGMEM Language_Str MSG_A_RETRACT                       = _UxGT("A-Retract");
+  PROGMEM Language_Str MSG_A_TRAVEL                        = _UxGT("A-Travel");
+  PROGMEM Language_Str MSG_XY_FREQUENCY_LIMIT              = _UxGT("Frequency max");
+  PROGMEM Language_Str MSG_XY_FREQUENCY_FEEDRATE           = _UxGT("Feed min");
+  PROGMEM Language_Str MSG_STEPS_PER_MM                    = _UxGT("Steps/mm");
+  PROGMEM Language_Str MSG_A_STEPS                         = LCD_STR_A _UxGT("steps/mm");
+  PROGMEM Language_Str MSG_B_STEPS                         = LCD_STR_B _UxGT("steps/mm");
+  PROGMEM Language_Str MSG_C_STEPS                         = LCD_STR_C _UxGT("steps/mm");
+  PROGMEM Language_Str MSG_E_STEPS                         = _UxGT("Esteps/mm");
+  PROGMEM Language_Str MSG_EN_STEPS                        = _UxGT("*steps/mm");
+  PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Temperature");
+  PROGMEM Language_Str MSG_MOTION                          = _UxGT("Motion");
+  PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("Filament");
+  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("E in mm³");
+  PROGMEM Language_Str MSG_VOLUMETRIC_LIMIT                = _UxGT("E Limit in mm³");
+  PROGMEM Language_Str MSG_VOLUMETRIC_LIMIT_E              = _UxGT("E Limit *");
+  PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("Fil. Dia.");
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E                 = _UxGT("Fil. Dia. *");
+  PROGMEM Language_Str MSG_FILAMENT_UNLOAD                 = _UxGT("Unload mm");
+  PROGMEM Language_Str MSG_FILAMENT_LOAD                   = _UxGT("Load mm");
+  PROGMEM Language_Str MSG_ADVANCE_K                       = _UxGT("Advance K");
+  PROGMEM Language_Str MSG_ADVANCE_K_E                     = _UxGT("Advance K *");
+  PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("LCD Contrast");
+  PROGMEM Language_Str MSG_STORE_EEPROM                    = _UxGT("Store Settings");
+  PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("Load Settings");
+  PROGMEM Language_Str MSG_RESTORE_DEFAULTS                = _UxGT("Restore Defaults");
+  PROGMEM Language_Str MSG_INIT_EEPROM                     = _UxGT("Initialize EEPROM");
+  PROGMEM Language_Str MSG_ERR_EEPROM_CRC                  = _UxGT("EEPROM CRC Error");
+  PROGMEM Language_Str MSG_ERR_EEPROM_INDEX                = _UxGT("EEPROM Index Error");
+  PROGMEM Language_Str MSG_ERR_EEPROM_VERSION              = _UxGT("EEPROM Version Error");
+  PROGMEM Language_Str MSG_SETTINGS_STORED                 = _UxGT("Settings Stored");
+  PROGMEM Language_Str MSG_MEDIA_UPDATE                    = _UxGT("Media Update");
+  PROGMEM Language_Str MSG_RESET_PRINTER                   = _UxGT("Reset Imprimanta");
+  PROGMEM Language_Str MSG_REFRESH                         = LCD_STR_REFRESH  _UxGT("Refresh");
+  PROGMEM Language_Str MSG_INFO_SCREEN                     = _UxGT("Info Screen");
+  PROGMEM Language_Str MSG_PREPARE                         = _UxGT("Prepare");
+  PROGMEM Language_Str MSG_TUNE                            = _UxGT("Tune");
+  PROGMEM Language_Str MSG_POWER_MONITOR                   = _UxGT("Power monitor");
+  PROGMEM Language_Str MSG_CURRENT                         = _UxGT("Intensitate");
+  PROGMEM Language_Str MSG_VOLTAGE                         = _UxGT("Voltaj");
+  PROGMEM Language_Str MSG_POWER                           = _UxGT("Putere");
+  PROGMEM Language_Str MSG_START_PRINT                     = _UxGT("Start Imprimare");
+  PROGMEM Language_Str MSG_BUTTON_NEXT                     = _UxGT("Urmatorul");
+  PROGMEM Language_Str MSG_BUTTON_INIT                     = _UxGT("Initiere");
+  PROGMEM Language_Str MSG_BUTTON_STOP                     = _UxGT("Stop");
+  PROGMEM Language_Str MSG_BUTTON_PRINT                    = _UxGT("Imprimeaza");
+  PROGMEM Language_Str MSG_BUTTON_RESET                    = _UxGT("Reseteaza");
+  PROGMEM Language_Str MSG_BUTTON_IGNORE                   = _UxGT("Ignora");
+  PROGMEM Language_Str MSG_BUTTON_CANCEL                   = _UxGT("Anuleaza");
+  PROGMEM Language_Str MSG_BUTTON_DONE                     = _UxGT("OK");
+  PROGMEM Language_Str MSG_BUTTON_BACK                     = _UxGT("Inapoi");
+  PROGMEM Language_Str MSG_BUTTON_PROCEED                  = _UxGT("Proceed");
+  PROGMEM Language_Str MSG_PAUSING                         = _UxGT("Pausing...");
+  PROGMEM Language_Str MSG_PAUSE_PRINT                     = _UxGT("Pause Print");
+  PROGMEM Language_Str MSG_RESUME_PRINT                    = _UxGT("Resume Print");
+  PROGMEM Language_Str MSG_STOP_PRINT                      = _UxGT("Stop Print");
+  PROGMEM Language_Str MSG_PRINTING_OBJECT                 = _UxGT("Printing Object");
+  PROGMEM Language_Str MSG_CANCEL_OBJECT                   = _UxGT("Cancel Object");
+  PROGMEM Language_Str MSG_CANCEL_OBJECT_N                 = _UxGT("Cancel Object =");
+  PROGMEM Language_Str MSG_OUTAGE_RECOVERY                 = _UxGT("Outage Recovery");
+  PROGMEM Language_Str MSG_MEDIA_MENU                      = _UxGT("Print from Media");
+  PROGMEM Language_Str MSG_NO_MEDIA                        = _UxGT("No Media");
+  PROGMEM Language_Str MSG_DWELL                           = _UxGT("Sleep...");
+  PROGMEM Language_Str MSG_USERWAIT                        = _UxGT("Click to Resume...");
+  PROGMEM Language_Str MSG_PRINT_PAUSED                    = _UxGT("Print Paused");
+  PROGMEM Language_Str MSG_PRINTING                        = _UxGT("Printing...");
+  PROGMEM Language_Str MSG_PRINT_ABORTED                   = _UxGT("Print Aborted");
+  PROGMEM Language_Str MSG_PRINT_DONE                      = _UxGT("Print Done");
+  PROGMEM Language_Str MSG_NO_MOVE                         = _UxGT("No Move.");
+  PROGMEM Language_Str MSG_KILLED                          = _UxGT("KILLED. ");
+  PROGMEM Language_Str MSG_STOPPED                         = _UxGT("STOPPED. ");
+  PROGMEM Language_Str MSG_CONTROL_RETRACT                 = _UxGT("Retract mm");
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_SWAP            = _UxGT("Swap Re.mm");
+  PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("Retract  V");
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_ZHOP            = _UxGT("Hop mm");
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("UnRet mm");
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("S UnRet mm");
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("UnRet V");
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAPF   = _UxGT("S UnRet V");
+  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("AutoRetr.");
+  PROGMEM Language_Str MSG_FILAMENT_SWAP_LENGTH            = _UxGT("Swap Length");
+  PROGMEM Language_Str MSG_FILAMENT_SWAP_EXTRA             = _UxGT("Swap Extra");
+  PROGMEM Language_Str MSG_FILAMENT_PURGE_LENGTH           = _UxGT("Purge Length");
+  PROGMEM Language_Str MSG_TOOL_CHANGE                     = _UxGT("Tool Inlocuire");
+  PROGMEM Language_Str MSG_TOOL_CHANGE_ZLIFT               = _UxGT("Z Raise");
+  PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPEED        = _UxGT("Prime Speed");
+  PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPEED      = _UxGT("Retract Speed");
+  PROGMEM Language_Str MSG_FILAMENT_PARK_ENABLED           = _UxGT("Park Head");
+  PROGMEM Language_Str MSG_SINGLENOZZLE_UNRETRACT_SPEED    = _UxGT("Recover Speed");
+  PROGMEM Language_Str MSG_SINGLENOZZLE_FAN_SPEED          = _UxGT("Fan Speed");
+  PROGMEM Language_Str MSG_SINGLENOZZLE_FAN_TIME           = _UxGT("Fan Time");
+  PROGMEM Language_Str MSG_TOOL_MIGRATION_ON               = _UxGT("Auto Pornit");
+  PROGMEM Language_Str MSG_TOOL_MIGRATION_OFF              = _UxGT("Auto Oprit");
+  PROGMEM Language_Str MSG_TOOL_MIGRATION                  = _UxGT("Tool Migration");
+  PROGMEM Language_Str MSG_TOOL_MIGRATION_AUTO             = _UxGT("Auto-migrare");
+  PROGMEM Language_Str MSG_TOOL_MIGRATION_END              = _UxGT("Last Extruder");
+  PROGMEM Language_Str MSG_TOOL_MIGRATION_SWAP             = _UxGT("Migrate to *");
+  PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Inlocuire Filament");
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E                = _UxGT("Inlocuire Filament *");
+  PROGMEM Language_Str MSG_FILAMENTLOAD                    = _UxGT("Incarcare Filament");
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E                  = _UxGT("Incarcare Filament *");
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD                  = _UxGT("Scoatere Filament");
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E                = _UxGT("Scoatere Filament *");
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("Scoate Tot");
+  PROGMEM Language_Str MSG_ATTACH_MEDIA                    = _UxGT("Atasare Media");
+  PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Inlocuire Media");
+  PROGMEM Language_Str MSG_RELEASE_MEDIA                   = _UxGT("Eliberare Media");
+  PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("Z Probe Past Bed");
+  PROGMEM Language_Str MSG_SKEW_FACTOR                     = _UxGT("Skew Factor");
+  PROGMEM Language_Str MSG_BLTOUCH                         = _UxGT("BLTouch");
+  PROGMEM Language_Str MSG_BLTOUCH_SELFTEST                = _UxGT("Cmd: Self-Test");
+  PROGMEM Language_Str MSG_BLTOUCH_RESET                   = _UxGT("Cmd: Reset");
+  PROGMEM Language_Str MSG_BLTOUCH_STOW                    = _UxGT("Cmd: Stow");
+  PROGMEM Language_Str MSG_BLTOUCH_DEPLOY                  = _UxGT("Cmd: Deploy");
+  PROGMEM Language_Str MSG_BLTOUCH_SW_MODE                 = _UxGT("Cmd: SW-Mode");
+  PROGMEM Language_Str MSG_BLTOUCH_5V_MODE                 = _UxGT("Cmd: 5V-Mode");
+  PROGMEM Language_Str MSG_BLTOUCH_OD_MODE                 = _UxGT("Cmd: OD-Mode");
+  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE              = _UxGT("Cmd: Mode-Store");
+  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE_5V           = _UxGT("Set BLTouch to 5V");
+  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE_OD           = _UxGT("Set BLTouch to OD");
+  PROGMEM Language_Str MSG_BLTOUCH_MODE_ECHO               = _UxGT("Report Drain");
+  PROGMEM Language_Str MSG_BLTOUCH_MODE_CHANGE             = _UxGT("DANGER: Bad settings can cause damage! Proceed anyway?");
+  PROGMEM Language_Str MSG_TOUCHMI_PROBE                   = _UxGT("TouchMI");
+  PROGMEM Language_Str MSG_TOUCHMI_INIT                    = _UxGT("Init TouchMI");
+  PROGMEM Language_Str MSG_TOUCHMI_ZTEST                   = _UxGT("Z Offset Test");
+  PROGMEM Language_Str MSG_TOUCHMI_SAVE                    = _UxGT("Save");
+  PROGMEM Language_Str MSG_MANUAL_DEPLOY_TOUCHMI           = _UxGT("Deploy TouchMI");
+  PROGMEM Language_Str MSG_MANUAL_DEPLOY                   = _UxGT("Deploy Z-Probe");
+  PROGMEM Language_Str MSG_MANUAL_STOW                     = _UxGT("Stow Z-Probe");
+  PROGMEM Language_Str MSG_HOME_FIRST                      = _UxGT("Home %s%s%s First");
+  PROGMEM Language_Str MSG_ZPROBE_OFFSETS                  = _UxGT("Probe Offsets");
+  PROGMEM Language_Str MSG_ZPROBE_XOFFSET                  = _UxGT("Probe X Offset");
+  PROGMEM Language_Str MSG_ZPROBE_YOFFSET                  = _UxGT("Probe Y Offset");
+  PROGMEM Language_Str MSG_ZPROBE_ZOFFSET                  = _UxGT("Probe Z Offset");
+  PROGMEM Language_Str MSG_BABYSTEP_X                      = _UxGT("Babystep X");
+  PROGMEM Language_Str MSG_BABYSTEP_Y                      = _UxGT("Babystep Y");
+  PROGMEM Language_Str MSG_BABYSTEP_Z                      = _UxGT("Babystep Z");
+  PROGMEM Language_Str MSG_BABYSTEP_TOTAL                  = _UxGT("Total");
+  PROGMEM Language_Str MSG_ENDSTOP_ABORT                   = _UxGT("Endstop Abort");
+  PROGMEM Language_Str MSG_HEATING_FAILED_LCD              = _UxGT("Heating Failed");
+  PROGMEM Language_Str MSG_HEATING_FAILED_LCD_BED          = _UxGT("Bed Heating Failed");
+  PROGMEM Language_Str MSG_HEATING_FAILED_LCD_CHAMBER      = _UxGT("Chamber Heating Fail");
+  PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("Err: REDUNDANT TEMP");
+  PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("THERMAL RUNAWAY");
+  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_BED             = _UxGT("BED THERMAL RUNAWAY");
+  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_CHAMBER         = _UxGT("CHAMBER T. RUNAWAY");
+  PROGMEM Language_Str MSG_ERR_MAXTEMP                     = _UxGT("Err: MAXTEMP");
+  PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("Err: MINTEMP");
+  PROGMEM Language_Str MSG_ERR_MAXTEMP_BED                 = _UxGT("Err: MAXTEMP BED");
+  PROGMEM Language_Str MSG_ERR_MINTEMP_BED                 = _UxGT("Err: MINTEMP BED");
+  PROGMEM Language_Str MSG_ERR_MAXTEMP_CHAMBER             = _UxGT("Err: MAXTEMP CHAMBER");
+  PROGMEM Language_Str MSG_ERR_MINTEMP_CHAMBER             = _UxGT("Err: MINTEMP CHAMBER");
+  PROGMEM Language_Str MSG_ERR_Z_HOMING                    = _UxGT("Home XY First");
+  PROGMEM Language_Str MSG_HALTED                          = _UxGT("PRINTER HALTED");
+  PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Please Reset");
+  PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("d"); // One character only
+  PROGMEM Language_Str MSG_SHORT_HOUR                      = _UxGT("h"); // One character only
+  PROGMEM Language_Str MSG_SHORT_MINUTE                    = _UxGT("m"); // One character only
+  PROGMEM Language_Str MSG_HEATING                         = _UxGT("Heating...");
+  PROGMEM Language_Str MSG_COOLING                         = _UxGT("Cooling...");
+  PROGMEM Language_Str MSG_BED_HEATING                     = _UxGT("Bed Heating...");
+  PROGMEM Language_Str MSG_BED_COOLING                     = _UxGT("Bed Cooling...");
+  PROGMEM Language_Str MSG_CHAMBER_HEATING                 = _UxGT("Chamber Heating...");
+  PROGMEM Language_Str MSG_CHAMBER_COOLING                 = _UxGT("Chamber Cooling...");
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE                 = _UxGT("Delta Calibration");
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_X               = _UxGT("Calibrate X");
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Y               = _UxGT("Calibrate Y");
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Z               = _UxGT("Calibrate Z");
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_CENTER          = _UxGT("Calibrate Center");
+  PROGMEM Language_Str MSG_DELTA_SETTINGS                  = _UxGT("Delta Settings");
+  PROGMEM Language_Str MSG_DELTA_AUTO_CALIBRATE            = _UxGT("Auto Calibration");
+  PROGMEM Language_Str MSG_DELTA_HEIGHT_CALIBRATE          = _UxGT("Set Delta Height");
+  PROGMEM Language_Str MSG_DELTA_Z_OFFSET_CALIBRATE        = _UxGT("Probe Z-offset");
+  PROGMEM Language_Str MSG_DELTA_DIAG_ROD                  = _UxGT("Diag Rod");
+  PROGMEM Language_Str MSG_DELTA_HEIGHT                    = _UxGT("Inaltime");
+  PROGMEM Language_Str MSG_DELTA_RADIUS                    = _UxGT("Radius");
+  PROGMEM Language_Str MSG_INFO_MENU                       = _UxGT("Despre Imprimanta");
+  PROGMEM Language_Str MSG_INFO_PRINTER_MENU               = _UxGT("Info Imprimanta");
+  PROGMEM Language_Str MSG_3POINT_LEVELING                 = _UxGT("Nivelare in 3 puncte");
+  PROGMEM Language_Str MSG_LINEAR_LEVELING                 = _UxGT("Nivelare Lineara");
+  PROGMEM Language_Str MSG_BILINEAR_LEVELING               = _UxGT("Nivelare Bilineara");
+  PROGMEM Language_Str MSG_UBL_LEVELING                    = _UxGT("Nivelarea Patului Unificata");
+  PROGMEM Language_Str MSG_MESH_LEVELING                   = _UxGT("Nivelare Mesh");
+  PROGMEM Language_Str MSG_INFO_STATS_MENU                 = _UxGT("Status Imprimanta");
+  PROGMEM Language_Str MSG_INFO_BOARD_MENU                 = _UxGT("Informatii Placa");
+  PROGMEM Language_Str MSG_INFO_THERMISTOR_MENU            = _UxGT("Termistoare");
+  PROGMEM Language_Str MSG_INFO_EXTRUDERS                  = _UxGT("Extrudere");
+  PROGMEM Language_Str MSG_INFO_BAUDRATE                   = _UxGT("Baud");
+  PROGMEM Language_Str MSG_INFO_PROTOCOL                   = _UxGT("Protocol");
+  PROGMEM Language_Str MSG_INFO_RUNAWAY_OFF                = _UxGT("Runaway Watch: OFF");
+  PROGMEM Language_Str MSG_INFO_RUNAWAY_ON                 = _UxGT("Runaway Watch: ON");
+  PROGMEM Language_Str MSG_HOTEND_IDLE_TIMEOUT             = _UxGT("Hotend Idle Timeout");
+
+  PROGMEM Language_Str MSG_CASE_LIGHT                      = _UxGT("Case Light");
+  PROGMEM Language_Str MSG_CASE_LIGHT_BRIGHTNESS           = _UxGT("Light Brightness");
+  PROGMEM Language_Str MSG_KILL_EXPECTED_PRINTER           = _UxGT("INCORRECT PRINTER");
+
+#if LCD_WIDTH >= 20
+  PROGMEM Language_Str MSG_INFO_PRINT_COUNT                = _UxGT("Total Printuri");
+  PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS           = _UxGT("Completat");
+  PROGMEM Language_Str MSG_INFO_PRINT_TIME                 = _UxGT("Timp Imprimare Total");
+  PROGMEM Language_Str MSG_INFO_PRINT_LONGEST              = _UxGT("Longest Job Time");
+  PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT             = _UxGT("Total Extrudat");
+#else
+  PROGMEM Language_Str MSG_INFO_PRINT_COUNT                = _UxGT("Prints");
+  PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS           = _UxGT("Completed");
+  PROGMEM Language_Str MSG_INFO_PRINT_TIME                 = _UxGT("Total");
+  PROGMEM Language_Str MSG_INFO_PRINT_LONGEST              = _UxGT("Longest");
+  PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT             = _UxGT("Extruded");
+#endif
+
+  PROGMEM Language_Str MSG_INFO_MIN_TEMP                   = _UxGT("Temperatura Minima");
+  PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("Temperatura Maxima");
+  PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("PSU");
+  PROGMEM Language_Str MSG_DRIVE_STRENGTH                  = _UxGT("Drive Strength");
+  PROGMEM Language_Str MSG_DAC_PERCENT_X                   = _UxGT("X Driver %");
+  PROGMEM Language_Str MSG_DAC_PERCENT_Y                   = _UxGT("Y Driver %");
+  PROGMEM Language_Str MSG_DAC_PERCENT_Z                   = _UxGT("Z Driver %");
+  PROGMEM Language_Str MSG_DAC_PERCENT_E                   = _UxGT("E Driver %");
+  PROGMEM Language_Str MSG_ERROR_TMC                       = _UxGT("TMC CONNECTION ERROR");
+  PROGMEM Language_Str MSG_DAC_EEPROM_WRITE                = _UxGT("DAC EEPROM Write");
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER          = _UxGT("FILAMENT CHANGE");
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_PAUSE    = _UxGT("PRINT PAUSED");
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_LOAD     = _UxGT("LOAD FILAMENT");
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_UNLOAD   = _UxGT("UNLOAD FILAMENT");
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_HEADER   = _UxGT("RESUME OPTIONS:");
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_PURGE    = _UxGT("Purge more");
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_RESUME   = _UxGT("Continue");
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_NOZZLE          = _UxGT("  Nozzle: ");
+  PROGMEM Language_Str MSG_RUNOUT_SENSOR                   = _UxGT("Runout Sensor");
+  PROGMEM Language_Str MSG_RUNOUT_DISTANCE_MM              = _UxGT("Runout Dist mm");
+  PROGMEM Language_Str MSG_KILL_HOMING_FAILED              = _UxGT("Homing Failed");
+  PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT("Probing Failed");
+  PROGMEM Language_Str MSG_M600_TOO_COLD                   = _UxGT("M600: Too Cold");
+
+  PROGMEM Language_Str MSG_MMU2_CHOOSE_FILAMENT_HEADER     = _UxGT("CHOOSE FILAMENT");
+  PROGMEM Language_Str MSG_MMU2_MENU                       = _UxGT("MMU");
+  PROGMEM Language_Str MSG_KILL_MMU2_FIRMWARE              = _UxGT("Update MMU Firmware!");
+  PROGMEM Language_Str MSG_MMU2_NOT_RESPONDING             = _UxGT("MMU Needs Attention.");
+  PROGMEM Language_Str MSG_MMU2_RESUME                     = _UxGT("MMU Resume");
+  PROGMEM Language_Str MSG_MMU2_RESUMING                   = _UxGT("MMU Resuming...");
+  PROGMEM Language_Str MSG_MMU2_LOAD_FILAMENT              = _UxGT("MMU Load");
+  PROGMEM Language_Str MSG_MMU2_LOAD_ALL                   = _UxGT("MMU Load All");
+  PROGMEM Language_Str MSG_MMU2_LOAD_TO_NOZZLE             = _UxGT("MMU Load to Nozzle");
+  PROGMEM Language_Str MSG_MMU2_EJECT_FILAMENT             = _UxGT("MMU Eject");
+  PROGMEM Language_Str MSG_MMU2_EJECT_FILAMENT_N           = _UxGT("MMU Eject ~");
+  PROGMEM Language_Str MSG_MMU2_UNLOAD_FILAMENT            = _UxGT("MMU Unload");
+  PROGMEM Language_Str MSG_MMU2_LOADING_FILAMENT           = _UxGT("Loading Fil. %i...");
+  PROGMEM Language_Str MSG_MMU2_EJECTING_FILAMENT          = _UxGT("Ejecting Fil. ...");
+  PROGMEM Language_Str MSG_MMU2_UNLOADING_FILAMENT         = _UxGT("Unloading Fil....");
+  PROGMEM Language_Str MSG_MMU2_ALL                        = _UxGT("All");
+  PROGMEM Language_Str MSG_MMU2_FILAMENT_N                 = _UxGT("Filament ~");
+  PROGMEM Language_Str MSG_MMU2_RESET                      = _UxGT("Reset MMU");
+  PROGMEM Language_Str MSG_MMU2_RESETTING                  = _UxGT("MMU Resetting...");
+  PROGMEM Language_Str MSG_MMU2_EJECT_RECOVER              = _UxGT("Remove, click");
+
+  PROGMEM Language_Str MSG_MIX                             = _UxGT("Mix");
+  PROGMEM Language_Str MSG_MIX_COMPONENT_N                 = _UxGT("Component =");
+  PROGMEM Language_Str MSG_MIXER                           = _UxGT("Mixer");
+  PROGMEM Language_Str MSG_GRADIENT                        = _UxGT("Gradient");
+  PROGMEM Language_Str MSG_FULL_GRADIENT                   = _UxGT("Full Gradient");
+  PROGMEM Language_Str MSG_TOGGLE_MIX                      = _UxGT("Toggle Mix");
+  PROGMEM Language_Str MSG_CYCLE_MIX                       = _UxGT("Cycle Mix");
+  PROGMEM Language_Str MSG_GRADIENT_MIX                    = _UxGT("Gradient Mix");
+  PROGMEM Language_Str MSG_REVERSE_GRADIENT                = _UxGT("Reverse Gradient");
+  PROGMEM Language_Str MSG_ACTIVE_VTOOL                    = _UxGT("Active V-tool");
+  PROGMEM Language_Str MSG_START_VTOOL                     = _UxGT("Start V-tool");
+  PROGMEM Language_Str MSG_END_VTOOL                       = _UxGT("  End V-tool");
+  PROGMEM Language_Str MSG_GRADIENT_ALIAS                  = _UxGT("Alias V-tool");
+  PROGMEM Language_Str MSG_RESET_VTOOLS                    = _UxGT("Reset V-tools");
+  PROGMEM Language_Str MSG_COMMIT_VTOOL                    = _UxGT("Commit V-tool Mix");
+  PROGMEM Language_Str MSG_VTOOLS_RESET                    = _UxGT("V-tools Were Reset");
+  PROGMEM Language_Str MSG_START_Z                         = _UxGT("Start Z:");
+  PROGMEM Language_Str MSG_END_Z                           = _UxGT("  End Z:");
+
+  PROGMEM Language_Str MSG_GAMES                           = _UxGT("Jocuri");
+  PROGMEM Language_Str MSG_BRICKOUT                        = _UxGT("Brickout");
+  PROGMEM Language_Str MSG_INVADERS                        = _UxGT("Invaders");
+  PROGMEM Language_Str MSG_SNAKE                           = _UxGT("Sn4k3");
+  PROGMEM Language_Str MSG_MAZE                            = _UxGT("Maze");
+
+  PROGMEM Language_Str MSG_BAD_PAGE                        = _UxGT("Bad page index");
+  PROGMEM Language_Str MSG_BAD_PAGE_SPEED                  = _UxGT("Bad page speed");
+
+  //
+  // Filament Inlocuire screens show up to 3 lines on a 4-line display
+  //                        ...or up to 2 lines on a 3-line display
+  //
+#if LCD_HEIGHT >= 4
+  PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING          = _UxGT(MSG_2_LINE("Apasa Butonul", "pentru a reveni la print"));
+  PROGMEM Language_Str MSG_PAUSE_PRINT_PARKING             = _UxGT(MSG_1_LINE("Parcare..."));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT            = _UxGT(MSG_3_LINE("Astept ca", "inlocuirea filamentului", "sa inceapa"));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT          = _UxGT(MSG_3_LINE("Insert filament", "and press button", "to continue"));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT            = _UxGT(MSG_2_LINE("Press button", "to heat nozzle"));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING         = _UxGT(MSG_2_LINE("Nozzle heating", "Please wait..."));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD          = _UxGT(MSG_2_LINE("Wait for", "filament unload"));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD            = _UxGT(MSG_2_LINE("Wait for", "filament load"));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE           = _UxGT(MSG_2_LINE("Wait for", "filament purge"));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE      = _UxGT(MSG_2_LINE("Click to finish", "filament purge"));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME          = _UxGT(MSG_2_LINE("Wait for print", "to resume..."));
+#else
+  PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING          = _UxGT(MSG_1_LINE("Click to continue"));
+  PROGMEM Language_Str MSG_PAUSE_PRINT_PARKING             = _UxGT(MSG_1_LINE("Parcare..."));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT            = _UxGT(MSG_1_LINE("Va rog asteptati..."));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT          = _UxGT(MSG_1_LINE("Insert and Click"));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT            = _UxGT(MSG_1_LINE("Click pentru incalzire"));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING         = _UxGT(MSG_1_LINE("Incalzire..."));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD          = _UxGT(MSG_1_LINE("Ejectare..."));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD            = _UxGT(MSG_1_LINE("Incarcare..."));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE           = _UxGT(MSG_1_LINE("Curatare..."));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE      = _UxGT(MSG_1_LINE("Click pentru a termina"));
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME          = _UxGT(MSG_1_LINE("Se Reia..."));
+#endif
+  PROGMEM Language_Str MSG_TMC_DRIVERS                     = _UxGT("TMC Drivers");
+  PROGMEM Language_Str MSG_TMC_CURRENT                     = _UxGT("Driver Current");
+  PROGMEM Language_Str MSG_TMC_HYBRID_THRS                 = _UxGT("Hybrid Threshold");
+  PROGMEM Language_Str MSG_TMC_HOMING_THRS                 = _UxGT("Sensorless Homing");
+  PROGMEM Language_Str MSG_TMC_STEPPING_MODE               = _UxGT("Stepping Mode");
+  PROGMEM Language_Str MSG_TMC_STEALTH_ENABLED             = _UxGT("StealthChop Enabled");
+  PROGMEM Language_Str MSG_SERVICE_RESET                   = _UxGT("Reset");
+  PROGMEM Language_Str MSG_SERVICE_IN                      = _UxGT(" in:");
+  PROGMEM Language_Str MSG_BACKLASH                        = _UxGT("Backlash");
+  PROGMEM Language_Str MSG_BACKLASH_A                      = LCD_STR_A;
+  PROGMEM Language_Str MSG_BACKLASH_B                      = LCD_STR_B;
+  PROGMEM Language_Str MSG_BACKLASH_C                      = LCD_STR_C;
+  PROGMEM Language_Str MSG_BACKLASH_CORRECTION             = _UxGT("Corectare");
+  PROGMEM Language_Str MSG_BACKLASH_SMOOTHING              = _UxGT("Smoothing");
+
+  PROGMEM Language_Str MSG_LEVEL_X_AXIS                    = _UxGT("Nivelare Axa X");
+  PROGMEM Language_Str MSG_AUTO_CALIBRATE                  = _UxGT("Auto Calibrare");
+  PROGMEM Language_Str MSG_HEATER_TIMEOUT                  = _UxGT("Timeout Incalzitor");
+  PROGMEM Language_Str MSG_REHEAT                          = _UxGT("Reincalzire");
+  PROGMEM Language_Str MSG_REHEATING                       = _UxGT("Reincalzire...");
+}
+
+#if FAN_COUNT == 1
+  #define MSG_FIRST_FAN_SPEED       MSG_FAN_SPEED
+  #define MSG_FIRST_EXTRA_FAN_SPEED MSG_EXTRA_FAN_SPEED
+#else
+  #define MSG_FIRST_FAN_SPEED       MSG_FAN_SPEED_N
+  #define MSG_FIRST_EXTRA_FAN_SPEED MSG_EXTRA_FAN_SPEED_N
+#endif
