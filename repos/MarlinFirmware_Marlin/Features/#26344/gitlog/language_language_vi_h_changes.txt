commit 006768ab58ff426fa7cfdaa72dba135b10a47ed7
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon Nov 20 02:23:07 2023 -0500

    üö∏ Fix MarlinUI axis move / UBL strings (#26439)
    
    Followup to #26344

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index e445413efe..c952416ec8 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -98,7 +98,6 @@ namespace LanguageNarrow_vi {
   LSTR MSG_CUSTOM_COMMANDS                = _UxGT("C√°c l·ªánh t·ª± ch·ªçn");                     // Custom Commands
   LSTR MSG_UBL_DOING_G29                  = _UxGT("ƒêang ch·∫°y G29");                        // Doing G29
   LSTR MSG_UBL_TOOLS                      = _UxGT("C√¥ng c·ª• UBL");                          // UBL tools
-  LSTR MSG_UBL_LEVEL_BED                  = _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t (UBL)");         // Unified Bed Leveling
   LSTR MSG_IDEX_MENU                      = _UxGT("ch·∫ø ƒë·ªô IDEX");                          // IDEX Mode
   LSTR MSG_IDEX_MODE_AUTOPARK             = _UxGT("ƒê√¢Ã£u t·ª± ƒë·ªông");                          // Auto-Park
   LSTR MSG_IDEX_MODE_DUPLICATE            = _UxGT("S∆∞Ã£ g√¢ÕÅp ƒë√¥i");                           // Duplication

commit aed577271ff94c822e861d8f652f2bdf46b2aeb9
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Nov 17 22:39:00 2023 -0600

    üî® Rotational move items (#26438)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 5006ad827f..e445413efe 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -202,6 +202,7 @@ namespace LanguageNarrow_vi {
   LSTR MSG_HOTEND_TOO_COLD                = _UxGT("ƒê·∫ßu n√≥ng qu√° l·∫°nh");                    // Hotend too cold
   LSTR MSG_MOVE_N_MM                      = _UxGT("Di chuy·ªÉn $mm");                        // Move $mm
   LSTR MSG_MOVE_N_IN                      = _UxGT("Di chuy·ªÉn $in");                        // Move $in
+  LSTR MSG_MOVE_N_DEG                     = _UxGT("Di chuy·ªÉn $") LCD_STR_DEGREE;           // Move $¬∞
   LSTR MSG_SPEED                          = _UxGT("T·ªëc ƒë·ªô");                               // Speed
   LSTR MSG_MESH_Z_OFFSET                  = _UxGT("Z B√†n");
   LSTR MSG_NOZZLE                         = _UxGT("ƒê·∫ßu phun");                             // Nozzle

commit 36e66bdd9ff22ddfdcaa36ac8a9b9448c78ca44c
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sat Nov 18 09:11:59 2023 +1300

    üîß Define MarlinUI axis moves with lists (#26344)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 038c6864bc..5006ad827f 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -200,10 +200,8 @@ namespace LanguageNarrow_vi {
   LSTR MSG_MOVE_E                         = _UxGT("M√°y ƒë√πn");                              // Extruder
   LSTR MSG_MOVE_EN                        = _UxGT("M√°y ƒë√πn *");
   LSTR MSG_HOTEND_TOO_COLD                = _UxGT("ƒê·∫ßu n√≥ng qu√° l·∫°nh");                    // Hotend too cold
-  LSTR MSG_MOVE_01MM                      = _UxGT("Di chuy·ªÉn 0.1mm");                      // Move 0.1mm
-  LSTR MSG_MOVE_1MM                       = _UxGT("Di chuy·ªÉn 1mm");                        // Move 1mm
-  LSTR MSG_MOVE_10MM                      = _UxGT("Di chuy·ªÉn 10mm");                       // Move 10mm
-  LSTR MSG_MOVE_100MM                     = _UxGT("Di chuy·ªÉn 100mm");                      // Move 100mm
+  LSTR MSG_MOVE_N_MM                      = _UxGT("Di chuy·ªÉn $mm");                        // Move $mm
+  LSTR MSG_MOVE_N_IN                      = _UxGT("Di chuy·ªÉn $in");                        // Move $in
   LSTR MSG_SPEED                          = _UxGT("T·ªëc ƒë·ªô");                               // Speed
   LSTR MSG_MESH_Z_OFFSET                  = _UxGT("Z B√†n");
   LSTR MSG_NOZZLE                         = _UxGT("ƒê·∫ßu phun");                             // Nozzle

commit 88cdf487b433bf2187f2dad31587882ebf02cc59
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Aug 22 17:36:53 2023 -0500

    üö∏ Avoid LCD messages starting with "Error:" (#26164)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index d37358219d..038c6864bc 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -331,10 +331,9 @@ namespace LanguageNarrow_vi {
   LSTR MSG_BABYSTEP_Z                     = _UxGT("Nh√≠t Z");
   LSTR MSG_BABYSTEP_N                     = _UxGT("Nh√≠t @");
   LSTR MSG_ENDSTOP_ABORT                  = _UxGT("H·ªßy b·ªè c√¥ng t·∫Øc");                     // Endstop abort
-  LSTR MSG_HEATING_FAILED_LCD             = _UxGT("S∆∞·ªüi ƒë·∫ßu phun kh√¥ng th√†nh c√¥ng");      // Heating failed
+  LSTR MSG_ERR_HEATING_FAILED             = _UxGT("S∆∞·ªüi ƒë·∫ßu phun kh√¥ng th√†nh c√¥ng");      // Heating failed
   LSTR MSG_ERR_REDUNDANT_TEMP             = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô d∆∞");               // Err: REDUNDANT TEMP
-  LSTR MSG_THERMAL_RUNAWAY                = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát");                        // THERMAL RUNAWAY | problem
-  LSTR MSG_THERMAL_RUNAWAY_BED            = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát b√†n");                    // BED THERMAL RUNAWAY
+  LSTR MSG_ERR_THERMAL_RUNAWAY            = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát");                        // THERMAL RUNAWAY | problem
   LSTR MSG_ERR_MAXTEMP                    = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi ƒëa");           // Err: MAXTEMP
   LSTR MSG_ERR_MINTEMP                    = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");        // Err: MINTEMP
   LSTR MSG_HALTED                         = _UxGT("M√ÅY IN ƒê√É D∆ØÕÄNG LAÃ£I");                  // PRINTER HALTED

commit 0878b99b2cb38ffd40faa12d9e3de3bd659af205
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 30 19:21:56 2023 -0500

    üåê Language Import/Export (#25889)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 69b58f71f0..d37358219d 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -27,7 +27,7 @@
  * LCD Menu Messages
  * See also https://marlinfw.org/docs/development/lcd_language.html
  */
-namespace Language_vi {
+namespace LanguageNarrow_vi {
   using namespace Language_en; // Inherit undefined strings from English
 
   constexpr uint8_t CHARSIZE              = 2;
@@ -63,23 +63,23 @@ namespace Language_vi {
   LSTR MSG_Z_FADE_HEIGHT                  = _UxGT("Chi·ªÅu cao m·ªù d·∫ßn");                     // Fade Height
   LSTR MSG_SET_HOME_OFFSETS               = _UxGT("ƒê·∫∑t b√π ƒë·∫Øp nh√†");                       // Set home offsets
   LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("B√π ƒë·∫Øp ƒë∆∞·ª£c √°p d·ª•ng");                  // Offsets applied
-  #if HAS_PREHEAT
-    LSTR MSG_PREHEAT_1                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc");      // Preheat
-    LSTR MSG_PREHEAT_1_H                  = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ~");    // Preheat
-    LSTR MSG_PREHEAT_1_END                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu");
-    LSTR MSG_PREHEAT_1_END_E              = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ~");
-    LSTR MSG_PREHEAT_1_ALL                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" T·∫•t c·∫£");     // All
-    LSTR MSG_PREHEAT_1_BEDONLY            = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" B√†n");        // Bed -- using vietnamese term for 'table' instead
-    LSTR MSG_PREHEAT_1_SETTINGS           = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" C·∫•u h√¨nh");   // Conf
 
-    LSTR MSG_PREHEAT_M                    = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc");                     // Preheat
-    LSTR MSG_PREHEAT_M_H                  = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc ~");                   // Preheat
-    LSTR MSG_PREHEAT_M_END                = _UxGT("L√†m n√≥ng $ ƒê·∫ßu");
-    LSTR MSG_PREHEAT_M_END_E              = _UxGT("L√†m n√≥ng $ ƒê·∫ßu ~");
-    LSTR MSG_PREHEAT_M_ALL                = _UxGT("L√†m n√≥ng $ T·∫•t c·∫£");                    // All
-    LSTR MSG_PREHEAT_M_BEDONLY            = _UxGT("L√†m n√≥ng $ B√†n");                       // Bed -- using vietnamese term for 'table' instead
-    LSTR MSG_PREHEAT_M_SETTINGS           = _UxGT("L√†m n√≥ng $ C·∫•u h√¨nh");                  // Conf
-  #endif
+  LSTR MSG_PREHEAT_1                      = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc");      // Preheat
+  LSTR MSG_PREHEAT_1_H                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ~");    // Preheat
+  LSTR MSG_PREHEAT_1_END                  = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu");
+  LSTR MSG_PREHEAT_1_END_E                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ~");
+  LSTR MSG_PREHEAT_1_ALL                  = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" T·∫•t c·∫£");     // All
+  LSTR MSG_PREHEAT_1_BEDONLY              = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" B√†n");        // Bed -- using vietnamese term for 'table' instead
+  LSTR MSG_PREHEAT_1_SETTINGS             = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" C·∫•u h√¨nh");   // Conf
+
+  LSTR MSG_PREHEAT_M                      = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc");                     // Preheat
+  LSTR MSG_PREHEAT_M_H                    = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc ~");                   // Preheat
+  LSTR MSG_PREHEAT_M_END                  = _UxGT("L√†m n√≥ng $ ƒê·∫ßu");
+  LSTR MSG_PREHEAT_M_END_E                = _UxGT("L√†m n√≥ng $ ƒê·∫ßu ~");
+  LSTR MSG_PREHEAT_M_ALL                  = _UxGT("L√†m n√≥ng $ T·∫•t c·∫£");                    // All
+  LSTR MSG_PREHEAT_M_BEDONLY              = _UxGT("L√†m n√≥ng $ B√†n");                       // Bed -- using vietnamese term for 'table' instead
+  LSTR MSG_PREHEAT_M_SETTINGS             = _UxGT("L√†m n√≥ng $ C·∫•u h√¨nh");                  // Conf
+
   LSTR MSG_PREHEAT_CUSTOM                 = _UxGT("S∆∞Ã£ n√≥ng tr∆∞·ªõc t·ª± ch·ªçn");                // Preheat Custom
   LSTR MSG_COOLDOWN                       = _UxGT("Ngu·ªôi xu·ªëng");                          // Cooldown
   LSTR MSG_SWITCH_PS_ON                   = _UxGT("B·∫≠t ngu·ªìn");                            // Switch power on
@@ -125,10 +125,8 @@ namespace Language_vi {
   LSTR MSG_UBL_DONE_EDITING_MESH          = _UxGT("Ch·ªânh s·ª≠a xong l∆∞·ªõi");                  // Done Editing Mesh
   LSTR MSG_UBL_BUILD_CUSTOM_MESH          = _UxGT("X√¢y d·ª±ng l∆∞·ªõi t·ª± ch·ªçn");                // Build Custom Mesh
   LSTR MSG_UBL_BUILD_MESH_MENU            = _UxGT("X√¢y d·ª±ng l∆∞·ªõi");                        // Build Mesh
-  #if HAS_PREHEAT
-    LSTR MSG_UBL_BUILD_MESH_M             = _UxGT("X√¢y d·ª±ng l∆∞·ªõi ($)");
-    LSTR MSG_UBL_VALIDATE_MESH_M          = _UxGT("Th·∫©m tra l∆∞·ªõi ($)");
-  #endif
+  LSTR MSG_UBL_BUILD_MESH_M               = _UxGT("X√¢y d·ª±ng l∆∞·ªõi ($)");
+  LSTR MSG_UBL_VALIDATE_MESH_M            = _UxGT("Th·∫©m tra l∆∞·ªõi ($)");
   LSTR MSG_UBL_BUILD_COLD_MESH            = _UxGT("X√¢y d·ª±ng l∆∞·ªõi l·∫°nh");                   // Build cold mesh
   LSTR MSG_UBL_MESH_HEIGHT_ADJUST         = _UxGT("ƒêi·ªÅu ch·ªânh chi·ªÅu cao l∆∞·ªõi");            // Adjust Mesh Height
   LSTR MSG_UBL_MESH_HEIGHT_AMOUNT         = _UxGT("S·ªë l∆∞·ª£ng chi·ªÅu cao");                   // Height Amount
@@ -439,3 +437,20 @@ namespace Language_vi {
   LSTR MSG_SHORT_HOUR                     = _UxGT("g");                                   // h - gi·ªù  - One character only
   LSTR MSG_SHORT_MINUTE                   = _UxGT("p");                                   // m - ph√∫t - One character only
 }
+
+namespace LanguageWide_vi {
+  using namespace LanguageNarrow_vi;
+  #if LCD_WIDTH >= 20 || HAS_DWIN_E3V2
+  #endif
+}
+
+namespace LanguageTall_vi {
+  using namespace LanguageWide_vi;
+  #if LCD_HEIGHT >= 4
+    // Filament Change screens show up to 3 lines on a 4-line display
+  #endif
+}
+
+namespace Language_vi {
+  using namespace LanguageTall_vi;
+}

commit 0b4500155e8c61aecf41090b41f34a3452593b78
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Sun May 28 13:24:45 2023 -0700

    ü©π Update KEDI / GODI LCD_PINS_EN pin (#25886)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 2ce22961ca..69b58f71f0 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -438,5 +438,4 @@ namespace Language_vi {
   LSTR MSG_SHORT_DAY                      = _UxGT("n");                                   // d - ng√†y - One character only
   LSTR MSG_SHORT_HOUR                     = _UxGT("g");                                   // h - gi·ªù  - One character only
   LSTR MSG_SHORT_MINUTE                   = _UxGT("p");                                   // m - ph√∫t - One character only
-  LSTR MSG_SHORT_MINUTE                   = _UxGT("p");                                   // M - ph√∫t - One character only
 }

commit 154e48ba22ceedb01e9058a7f8da9457a445ee19
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri May 26 18:54:50 2023 -0500

    üé® Misc. spacing

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 5795c58a1e..2ce22961ca 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -43,7 +43,7 @@ namespace Language_vi {
   LSTR MSG_MEDIA_USB_REMOVED              = _UxGT("USB ƒë∆∞·ª£c r√∫t ra");
   LSTR MSG_MEDIA_USB_FAILED               = _UxGT("USB kh·ªüi th·∫•t b·∫°i");
   LSTR MSG_LCD_ENDSTOPS                   = _UxGT("C√¥ng t·∫Øc");                             // Endstops - c√¥ng t·∫Øc h√†nh tr√¨nh
-  LSTR MSG_LCD_SOFT_ENDSTOPS              = _UxGT("C√¥ng t·∫Øc m·ªÅm");                         // soft Endstops
+  LSTR MSG_LCD_SOFT_ENDSTOPS              = _UxGT("C√¥ng t·∫Øc m·ªÅm");                         // Soft Endstops
   LSTR MSG_MAIN_MENU                      = _UxGT("Ch√≠nh");                                // Main
   LSTR MSG_ADVANCED_SETTINGS              = _UxGT("Thi·∫øt l·∫≠p c·∫•p cao");                    // Advanced Settings
   LSTR MSG_CONFIGURATION                  = _UxGT("C·∫•u h√¨nh");                             // Configuration
@@ -52,9 +52,9 @@ namespace Language_vi {
   LSTR MSG_DEBUG_MENU                     = _UxGT("Menu g·ª° l·ªói");                          // Debug Menu
   LSTR MSG_PROGRESS_BAR_TEST              = _UxGT("Ki·ªÉm tra ti·∫øn ƒë·ªô");                     // Progress bar test
   LSTR MSG_AUTO_HOME                      = _UxGT("V·ªÅ nh√† t·ª± ƒë·ªông");                       // Auto home
-  LSTR MSG_AUTO_HOME_X                    = _UxGT("V·ªÅ nh√† X");                             // home X
-  LSTR MSG_AUTO_HOME_Y                    = _UxGT("V·ªÅ nh√† Y");                             // home Y
-  LSTR MSG_AUTO_HOME_Z                    = _UxGT("V·ªÅ nh√† Z");                             // home Z
+  LSTR MSG_AUTO_HOME_X                    = _UxGT("V·ªÅ nh√† X");                             // Home X
+  LSTR MSG_AUTO_HOME_Y                    = _UxGT("V·ªÅ nh√† Y");                             // Home Y
+  LSTR MSG_AUTO_HOME_Z                    = _UxGT("V·ªÅ nh√† Z");                             // Home Z
   LSTR MSG_AUTO_Z_ALIGN                   = _UxGT("Ch·ªânh canh Z t·ª± ƒë·ªông");
   LSTR MSG_LEVEL_BED_HOMING               = _UxGT("ƒêang v·ªÅ nh√† XYZ");                      // Homing XYZ
   LSTR MSG_LEVEL_BED_WAITING              = _UxGT("Nh·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu");                      // Click to Begin
@@ -68,17 +68,17 @@ namespace Language_vi {
     LSTR MSG_PREHEAT_1_H                  = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ~");    // Preheat
     LSTR MSG_PREHEAT_1_END                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu");
     LSTR MSG_PREHEAT_1_END_E              = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ~");
-    LSTR MSG_PREHEAT_1_ALL                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" T·∫•t c·∫£");     // all
-    LSTR MSG_PREHEAT_1_BEDONLY            = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" B√†n");        // bed -- using vietnamese term for 'table' instead
-    LSTR MSG_PREHEAT_1_SETTINGS           = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" C·∫•u h√¨nh");   // conf
+    LSTR MSG_PREHEAT_1_ALL                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" T·∫•t c·∫£");     // All
+    LSTR MSG_PREHEAT_1_BEDONLY            = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" B√†n");        // Bed -- using vietnamese term for 'table' instead
+    LSTR MSG_PREHEAT_1_SETTINGS           = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" C·∫•u h√¨nh");   // Conf
 
-    LSTR MSG_PREHEAT_M                    = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc");      // Preheat
-    LSTR MSG_PREHEAT_M_H                  = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc ~");    // Preheat
+    LSTR MSG_PREHEAT_M                    = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc");                     // Preheat
+    LSTR MSG_PREHEAT_M_H                  = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc ~");                   // Preheat
     LSTR MSG_PREHEAT_M_END                = _UxGT("L√†m n√≥ng $ ƒê·∫ßu");
     LSTR MSG_PREHEAT_M_END_E              = _UxGT("L√†m n√≥ng $ ƒê·∫ßu ~");
-    LSTR MSG_PREHEAT_M_ALL                = _UxGT("L√†m n√≥ng $ T·∫•t c·∫£");     // all
-    LSTR MSG_PREHEAT_M_BEDONLY            = _UxGT("L√†m n√≥ng $ B√†n");        // bed -- using vietnamese term for 'table' instead
-    LSTR MSG_PREHEAT_M_SETTINGS           = _UxGT("L√†m n√≥ng $ C·∫•u h√¨nh");   // conf
+    LSTR MSG_PREHEAT_M_ALL                = _UxGT("L√†m n√≥ng $ T·∫•t c·∫£");                    // All
+    LSTR MSG_PREHEAT_M_BEDONLY            = _UxGT("L√†m n√≥ng $ B√†n");                       // Bed -- using vietnamese term for 'table' instead
+    LSTR MSG_PREHEAT_M_SETTINGS           = _UxGT("L√†m n√≥ng $ C·∫•u h√¨nh");                  // Conf
   #endif
   LSTR MSG_PREHEAT_CUSTOM                 = _UxGT("S∆∞Ã£ n√≥ng tr∆∞·ªõc t·ª± ch·ªçn");                // Preheat Custom
   LSTR MSG_COOLDOWN                       = _UxGT("Ngu·ªôi xu·ªëng");                          // Cooldown
@@ -112,7 +112,7 @@ namespace Language_vi {
   LSTR MSG_UBL_BC_INSERT                  = _UxGT("ƒêƒÉÃ£t ch√™m v√† ƒëo");                       // Place shim & measure
   LSTR MSG_UBL_BC_INSERT2                 = _UxGT("ƒêo");                                   // Measure
   LSTR MSG_UBL_BC_REMOVE                  = _UxGT("ThaÕÅo v√† ƒëo b√†n");                       // Remove & measure bed
-  LSTR MSG_UBL_MOVING_TO_NEXT             = _UxGT("Chuy·ªÉn sang ti·∫øp theo");                // moving to next
+  LSTR MSG_UBL_MOVING_TO_NEXT             = _UxGT("Chuy·ªÉn sang ti·∫øp theo");                // Moving to next
   LSTR MSG_UBL_ACTIVATE_MESH              = _UxGT("B·∫≠t UBL");
   LSTR MSG_UBL_DEACTIVATE_MESH            = _UxGT("T·∫Øt UBL");
   LSTR MSG_UBL_SET_TEMP_BED               = _UxGT("Nhi·ªát ƒë·ªô b√†n");                         // Bed Temp
@@ -133,7 +133,7 @@ namespace Language_vi {
   LSTR MSG_UBL_MESH_HEIGHT_ADJUST         = _UxGT("ƒêi·ªÅu ch·ªânh chi·ªÅu cao l∆∞·ªõi");            // Adjust Mesh Height
   LSTR MSG_UBL_MESH_HEIGHT_AMOUNT         = _UxGT("S·ªë l∆∞·ª£ng chi·ªÅu cao");                   // Height Amount
   LSTR MSG_UBL_VALIDATE_MESH_MENU         = _UxGT("Th·∫©m tra l∆∞·ªõi");                        // Validate Mesh
-  LSTR MSG_UBL_VALIDATE_CUSTOM_MESH       = _UxGT("Th·∫©m tra l∆∞·ªõi t·ª± ch·ªçn");                // validate custom mesh
+  LSTR MSG_UBL_VALIDATE_CUSTOM_MESH       = _UxGT("Th·∫©m tra l∆∞·ªõi t·ª± ch·ªçn");                // Validate custom mesh
   LSTR MSG_UBL_CONTINUE_MESH              = _UxGT("Ti·∫øp t·ª•c x√¢y l∆∞·ªõi b√†n");                // Continue Bed Mesh
   LSTR MSG_UBL_MESH_LEVELING              = _UxGT("ƒêang san l·∫•p l∆∞·ªõi");                    // Mesh Leveling
   LSTR MSG_UBL_3POINT_MESH_LEVELING       = _UxGT("ƒêang san l·∫•p 3-ƒëi·ªÉm");                  // 3-Point Leveling
@@ -210,20 +210,20 @@ namespace Language_vi {
   LSTR MSG_MESH_Z_OFFSET                  = _UxGT("Z B√†n");
   LSTR MSG_NOZZLE                         = _UxGT("ƒê·∫ßu phun");                             // Nozzle
   LSTR MSG_NOZZLE_N                       = _UxGT("ƒê·∫ßu phun ~");
-  LSTR MSG_BED                            = _UxGT("B√†n");                                  // bed
-  LSTR MSG_FAN_SPEED                      = _UxGT("T·ªëc ƒë·ªô qu·∫°t");                          // fan speed
+  LSTR MSG_BED                            = _UxGT("B√†n");                                  // Bed
+  LSTR MSG_FAN_SPEED                      = _UxGT("T·ªëc ƒë·ªô qu·∫°t");                          // Fan speed
   LSTR MSG_FAN_SPEED_N                    = _UxGT("T·ªëc ƒë·ªô qu·∫°t ~");
   LSTR MSG_EXTRA_FAN_SPEED                = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£");                      // Extra fan speed
   LSTR MSG_EXTRA_FAN_SPEED_N              = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ ~");
   LSTR MSG_FLOW                           = _UxGT("L∆∞u L∆∞·ª£ng");
   LSTR MSG_FLOW_N                         = _UxGT("L∆∞u L∆∞·ª£ng ~");
   LSTR MSG_CONTROL                        = _UxGT("ƒêi·ªÅu khi·ªÉn");                           // Control
-  LSTR MSG_MIN                            = " " LCD_STR_THERMOMETER _UxGT(" ƒêa");          // min
-  LSTR MSG_MAX                            = " " LCD_STR_THERMOMETER _UxGT(" Thi·ªÉu");
-  LSTR MSG_FACTOR                         = " " LCD_STR_THERMOMETER _UxGT(" H·ªá S·ªë");       // factor
+  LSTR MSG_MIN                            = " " LCD_STR_THERMOMETER _UxGT(" ƒêa");          // Min
+  LSTR MSG_MAX                            = " " LCD_STR_THERMOMETER _UxGT(" Thi·ªÉu");       // Max
+  LSTR MSG_FACTOR                         = " " LCD_STR_THERMOMETER _UxGT(" H·ªá S·ªë");       // Factor
   LSTR MSG_AUTOTEMP                       = _UxGT("Nhi·ªát ƒë·ªô t·ª± ƒë·ªông");                     // Autotemp
-  LSTR MSG_LCD_ON                         = _UxGT("B·∫≠t");                                  // on
-  LSTR MSG_LCD_OFF                        = _UxGT("T·∫Øt");                                  // off
+  LSTR MSG_LCD_ON                         = _UxGT("B·∫≠t");                                  // On
+  LSTR MSG_LCD_OFF                        = _UxGT("T·∫Øt");                                  // Off
   LSTR MSG_SELECT_E                       = _UxGT("L·ª±a *");
   LSTR MSG_ACC                            = _UxGT("TƒÉng T·ªëc");
   LSTR MSG_JERK                           = _UxGT("Gi·∫≠t");
@@ -233,8 +233,8 @@ namespace Language_vi {
   LSTR MSG_VN_JERK                        = _UxGT("Gi·∫≠t-V@");
   LSTR MSG_VE_JERK                        = _UxGT("Gi·∫≠t-Ve");
   LSTR MSG_JUNCTION_DEVIATION             = _UxGT("ƒê·ªô L·ªách Ch√¥ÃÉ Giao");                    // Junction Dev
-  LSTR MSG_MAX_SPEED                      = _UxGT("V√¢Ã£n t√¥ÕÅc");                              // velocity
-  LSTR MSG_VMAX_A                         = _UxGT("Vƒëa") STR_A;                        // Vmax
+  LSTR MSG_MAX_SPEED                      = _UxGT("V√¢Ã£n t√¥ÕÅc");                              // Velocity
+  LSTR MSG_VMAX_A                         = _UxGT("Vƒëa") STR_A;                            // Vmax
   LSTR MSG_VMAX_B                         = _UxGT("Vƒëa") STR_B;
   LSTR MSG_VMAX_C                         = _UxGT("Vƒëa") STR_C;
   LSTR MSG_VMAX_N                         = _UxGT("Vƒëa@");
@@ -243,162 +243,162 @@ namespace Language_vi {
   LSTR MSG_VMIN                           = _UxGT("Vthi·ªÉu");                               // Vmin
   LSTR MSG_VTRAV_MIN                      = _UxGT("Vchuy·ªÉn thi·ªÉu");                        // VTrav min
   LSTR MSG_ACCELERATION                   = _UxGT("S·ª± tƒÉng t·ªëc");                          // Acceleration
-  LSTR MSG_AMAX_A                         = _UxGT("TƒÉng t·ªëc ca") STR_A;                // Amax
+  LSTR MSG_AMAX_A                         = _UxGT("TƒÉng t·ªëc ca") STR_A;                    // Amax
   LSTR MSG_AMAX_B                         = _UxGT("TƒÉng t·ªëc ca") STR_B;
   LSTR MSG_AMAX_C                         = _UxGT("TƒÉng t·ªëc ca") STR_C;
   LSTR MSG_AMAX_N                         = _UxGT("TƒÉng t·ªëc ca@");
   LSTR MSG_AMAX_E                         = _UxGT("TƒÉng t·ªëc caE");
   LSTR MSG_AMAX_EN                        = _UxGT("TƒÉng t·ªëc ca *");
-  LSTR MSG_A_RETRACT                      = _UxGT("TT-R√∫t");                               // A-retract
-  LSTR MSG_A_TRAVEL                       = _UxGT("TT-Chuy·ªÉn");                            // A-travel
-  LSTR MSG_STEPS_PER_MM                   = _UxGT("B∆∞∆°ÕÅc/mm");                              // Steps
-  LSTR MSG_A_STEPS                        = _UxGT("B∆∞·ªõc") STR_A _UxGT("/mm");          // Steps/mm
+  LSTR MSG_A_RETRACT                      = _UxGT("TT-R√∫t");                              // A-retract
+  LSTR MSG_A_TRAVEL                       = _UxGT("TT-Chuy·ªÉn");                           // A-travel
+  LSTR MSG_STEPS_PER_MM                   = _UxGT("B∆∞∆°ÕÅc/mm");                             // Steps
+  LSTR MSG_A_STEPS                        = _UxGT("B∆∞·ªõc") STR_A _UxGT("/mm");             // Steps/mm
   LSTR MSG_B_STEPS                        = _UxGT("B∆∞·ªõc") STR_B _UxGT("/mm");
   LSTR MSG_C_STEPS                        = _UxGT("B∆∞·ªõc") STR_C _UxGT("/mm");
   LSTR MSG_N_STEPS                        = _UxGT("B∆∞·ªõc@/mm");
   LSTR MSG_E_STEPS                        = _UxGT("B∆∞·ªõcE/mm");
   LSTR MSG_EN_STEPS                       = _UxGT("B∆∞·ªõc */mm");
-  LSTR MSG_TEMPERATURE                    = _UxGT("Nhi·ªát ƒë·ªô");                             // Temperature
-  LSTR MSG_MOTION                         = _UxGT("Chuy·ªÉn ƒë·ªông");                          // Motion
-  LSTR MSG_FILAMENT                       = _UxGT("V·∫≠t li·ªáu in");                          // d√¢y nh·ª±a
-  LSTR MSG_VOLUMETRIC_ENABLED             = _UxGT("E b·∫±ng mm") SUPERSCRIPT_THREE;                           // E in mm
-  LSTR MSG_FILAMENT_DIAM                  = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a");                      // Fil. Dai.
+  LSTR MSG_TEMPERATURE                    = _UxGT("Nhi·ªát ƒë·ªô");                            // Temperature
+  LSTR MSG_MOTION                         = _UxGT("Chuy·ªÉn ƒë·ªông");                         // Motion
+  LSTR MSG_FILAMENT                       = _UxGT("V·∫≠t li·ªáu in");                         // D√¢y nh·ª±a
+  LSTR MSG_VOLUMETRIC_ENABLED             = _UxGT("E b·∫±ng mm") SUPERSCRIPT_THREE;         // E in mm
+  LSTR MSG_FILAMENT_DIAM                  = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a");                     // Fil. Dai.
   LSTR MSG_FILAMENT_DIAM_E                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a *");
-  LSTR MSG_FILAMENT_UNLOAD                = _UxGT("D·ª° mm");                                // unload mm
+  LSTR MSG_FILAMENT_UNLOAD                = _UxGT("D·ª° mm");                               // Unload mm
   LSTR MSG_FILAMENT_LOAD                  = _UxGT("N·∫°p mm");
-  LSTR MSG_ADVANCE_K                      = _UxGT("K C·∫•p Cao");                            // Advance K
-  LSTR MSG_ADVANCE_K_E                    = _UxGT("K C·∫•p Cao *");                          // Advance K
-  LSTR MSG_CONTRAST                       = _UxGT("ƒê·ªô t∆∞∆°ng ph·∫£n LCD");                    // LCD contrast
-  LSTR MSG_STORE_EEPROM                   = _UxGT("L∆∞u c√°c thi·∫øt l·∫≠p");                    // Store settings
-  LSTR MSG_LOAD_EEPROM                    = _UxGT("T·∫£i c√°c c√†i ƒë·∫∑t");                      // Load settings
-  LSTR MSG_RESTORE_DEFAULTS               = _UxGT("Kh√¥i ph·ª•c ph√≤ng h∆∞");                   // Restore Defaults
-  LSTR MSG_INIT_EEPROM                    = _UxGT("Kh·ªüi T·∫°o EEPROM");                      // Initialize EEPROM
-  LSTR MSG_MEDIA_UPDATE                   = _UxGT("C·∫≠p Nh·∫≠t ph∆∞∆°ng ti·ªán");                 // Update media
+  LSTR MSG_ADVANCE_K                      = _UxGT("K C·∫•p Cao");                           // Advance K
+  LSTR MSG_ADVANCE_K_E                    = _UxGT("K C·∫•p Cao *");                         // Advance K
+  LSTR MSG_CONTRAST                       = _UxGT("ƒê·ªô t∆∞∆°ng ph·∫£n LCD");                   // LCD contrast
+  LSTR MSG_STORE_EEPROM                   = _UxGT("L∆∞u c√°c thi·∫øt l·∫≠p");                   // Store settings
+  LSTR MSG_LOAD_EEPROM                    = _UxGT("T·∫£i c√°c c√†i ƒë·∫∑t");                     // Load settings
+  LSTR MSG_RESTORE_DEFAULTS               = _UxGT("Kh√¥i ph·ª•c ph√≤ng h∆∞");                  // Restore Defaults
+  LSTR MSG_INIT_EEPROM                    = _UxGT("Kh·ªüi T·∫°o EEPROM");                     // Initialize EEPROM
+  LSTR MSG_MEDIA_UPDATE                   = _UxGT("C·∫≠p Nh·∫≠t ph∆∞∆°ng ti·ªán");                // Update media
   LSTR MSG_RESET_PRINTER                  = _UxGT("B·∫∑t L·∫°i M√°y In");
-  LSTR MSG_REFRESH                        = LCD_STR_REFRESH  _UxGT("C·∫≠p Nh·∫≠t");            // Refresh
-  LSTR MSG_INFO_SCREEN                    = _UxGT("M√†n H√¨nh Th√¥ng Tin");                   // Info screen
-  LSTR MSG_PREPARE                        = _UxGT("Chu·∫©n b·ªã");                             // Prepare
-  LSTR MSG_TUNE                           = _UxGT("ƒêi·ªÅu Ch·ªânh");                           // Tune
-  LSTR MSG_PAUSE_PRINT                    = _UxGT("T·∫°m d·ª´ng in");                          // Pause print
-  LSTR MSG_RESUME_PRINT                   = _UxGT("Ti·∫øp t·ª•c in");                          // Resume print
-  LSTR MSG_STOP_PRINT                     = _UxGT("Ng∆∞ÕÄng in");                             // Stop print
-  LSTR MSG_OUTAGE_RECOVERY                = _UxGT("Ph·ª•c H·ªìi M·∫•t ƒêi·ªán");                    // Outage Recovery
-  LSTR MSG_MEDIA_MENU                     = _UxGT("In t·ª´ ph∆∞∆°ng ti·ªán");                    // Print from media
-  LSTR MSG_NO_MEDIA                       = _UxGT("Kh√¥ng c√≥ ph∆∞∆°ng ti·ªán");                 // No media
-  LSTR MSG_DWELL                          = _UxGT("Ng·ªß...");                               // Sleep
-  LSTR MSG_USERWAIT                       = _UxGT("Nh·∫•n ƒë·ªÉ ti·∫øp t·ª•c...");                  // Click to resume (same as 'continue')
-  LSTR MSG_PRINT_PAUSED                   = _UxGT("In t·∫°m d·ª´ng");                          // print paused
-  LSTR MSG_PRINTING                       = _UxGT("ƒêang in...");                           // printing
-  LSTR MSG_PRINT_ABORTED                  = _UxGT("In ƒë√£ h·ªßy b·ªè");                         // Print aborted
-  LSTR MSG_NO_MOVE                        = _UxGT("Kh√¥ng di chuy·ªÉn.");                     // No move.
+  LSTR MSG_REFRESH                        = LCD_STR_REFRESH  _UxGT("C·∫≠p Nh·∫≠t");           // Refresh
+  LSTR MSG_INFO_SCREEN                    = _UxGT("M√†n H√¨nh Th√¥ng Tin");                  // Info screen
+  LSTR MSG_PREPARE                        = _UxGT("Chu·∫©n b·ªã");                            // Prepare
+  LSTR MSG_TUNE                           = _UxGT("ƒêi·ªÅu Ch·ªânh");                          // Tune
+  LSTR MSG_PAUSE_PRINT                    = _UxGT("T·∫°m d·ª´ng in");                         // Pause print
+  LSTR MSG_RESUME_PRINT                   = _UxGT("Ti·∫øp t·ª•c in");                         // Resume print
+  LSTR MSG_STOP_PRINT                     = _UxGT("Ng∆∞ÕÄng in");                            // Stop print
+  LSTR MSG_OUTAGE_RECOVERY                = _UxGT("Ph·ª•c H·ªìi M·∫•t ƒêi·ªán");                   // Outage Recovery
+  LSTR MSG_MEDIA_MENU                     = _UxGT("In t·ª´ ph∆∞∆°ng ti·ªán");                   // Print from media
+  LSTR MSG_NO_MEDIA                       = _UxGT("Kh√¥ng c√≥ ph∆∞∆°ng ti·ªán");                // No media
+  LSTR MSG_DWELL                          = _UxGT("Ng·ªß...");                              // Sleep
+  LSTR MSG_USERWAIT                       = _UxGT("Nh·∫•n ƒë·ªÉ ti·∫øp t·ª•c...");                 // Click to resume (same as 'continue')
+  LSTR MSG_PRINT_PAUSED                   = _UxGT("In t·∫°m d·ª´ng");                         // Print paused
+  LSTR MSG_PRINTING                       = _UxGT("ƒêang in...");                          // Printing
+  LSTR MSG_PRINT_ABORTED                  = _UxGT("In ƒë√£ h·ªßy b·ªè");                        // Print aborted
+  LSTR MSG_NO_MOVE                        = _UxGT("Kh√¥ng di chuy·ªÉn.");                    // No move.
   LSTR MSG_KILLED                         = _UxGT("ƒê√É CH√äÕÅT. ");
   LSTR MSG_STOPPED                        = _UxGT("ƒê√É NG∆ØÕÄNG. ");
-  LSTR MSG_CONTROL_RETRACT                = _UxGT("R√∫t mm");                               // Retract mm
-  LSTR MSG_CONTROL_RETRACT_SWAP           = _UxGT("R√∫t Trao.mm");                          // Swap Re.mm
+  LSTR MSG_CONTROL_RETRACT                = _UxGT("R√∫t mm");                              // Retract mm
+  LSTR MSG_CONTROL_RETRACT_SWAP           = _UxGT("R√∫t Trao.mm");                         // Swap Re.mm
   LSTR MSG_CONTROL_RETRACTF               = _UxGT("R√∫t V");
-  LSTR MSG_CONTROL_RETRACT_ZHOP           = _UxGT("Nh·∫£y mm");                              // hop
-  LSTR MSG_CONTROL_RETRACT_RECOVER        = _UxGT("B·ªèR√∫t mm");                             // Unretr. mm
-  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAP   = _UxGT("B·ªèR√∫t T mm");                           // S Unretr. mm
-  LSTR MSG_CONTROL_RETRACT_RECOVERF       = _UxGT("B·ªèR√∫t V");                              // UnRet V
-  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAPF  = _UxGT("B·ªèR√∫t T V");                            // S UnRet V
-  LSTR MSG_AUTORETRACT                    = _UxGT("R√∫tT·ª±ƒê·ªông");                            // Auto-Retract
-  LSTR MSG_FILAMENT_SWAP_LENGTH           = _UxGT("Kho·∫£ng C√°ch R√∫t");                      // Retract Distance
-  LSTR MSG_TOOL_CHANGE                    = _UxGT("Thay ƒê·ªïi C√¥ng C·ª•");                     // Tool Change
-  LSTR MSG_TOOL_CHANGE_ZLIFT              = _UxGT("ƒê∆∞a L√™n Z");                            // Z Raise
-  LSTR MSG_SINGLENOZZLE_PRIME_SPEED       = _UxGT("T·ªëc ƒê·ªô Tu√¥n Ra");                       // Prime Speed
-  LSTR MSG_SINGLENOZZLE_RETRACT_SPEED     = _UxGT("T·ªëc ƒê·ªô R√∫t L·∫°i");                       // Retract Speed
-  LSTR MSG_FILAMENTCHANGE                 = _UxGT("Thay d√¢y nh·ª±a");                        // change filament
-  LSTR MSG_FILAMENTCHANGE_E               = _UxGT("Thay d√¢y nh·ª±a *");                      // change filament
-  LSTR MSG_FILAMENTLOAD                   = _UxGT("N·∫°p d√¢y nh·ª±a");                         // load filament
-  LSTR MSG_FILAMENTLOAD_E                 = _UxGT("N·∫°p d√¢y nh·ª±a *");                       // load filament
-  LSTR MSG_FILAMENTUNLOAD                 = _UxGT("D·ª° d√¢y nh·ª±a");                          // unload filament
-  LSTR MSG_FILAMENTUNLOAD_E               = _UxGT("D·ª° d√¢y nh·ª±a *");                        // unload filament
-  LSTR MSG_FILAMENTUNLOAD_ALL             = _UxGT("D·ª° t·∫•t c·∫£");                            // Unload All
-  LSTR MSG_ATTACH_MEDIA                   = _UxGT("Kh·ªüi t·∫°o ph∆∞∆°ng ti·ªán");                 // Attach media
-  LSTR MSG_CHANGE_MEDIA                   = _UxGT("Thay ph∆∞∆°ng ti·ªán");                     // Change midea
+  LSTR MSG_CONTROL_RETRACT_ZHOP           = _UxGT("Nh·∫£y mm");                             // Hop
+  LSTR MSG_CONTROL_RETRACT_RECOVER        = _UxGT("B·ªèR√∫t mm");                            // Unretr. mm
+  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAP   = _UxGT("B·ªèR√∫t T mm");                          // S Unretr. mm
+  LSTR MSG_CONTROL_RETRACT_RECOVERF       = _UxGT("B·ªèR√∫t V");                             // UnRet V
+  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAPF  = _UxGT("B·ªèR√∫t T V");                           // S UnRet V
+  LSTR MSG_AUTORETRACT                    = _UxGT("R√∫tT·ª±ƒê·ªông");                           // Auto-Retract
+  LSTR MSG_FILAMENT_SWAP_LENGTH           = _UxGT("Kho·∫£ng C√°ch R√∫t");                     // Retract Distance
+  LSTR MSG_TOOL_CHANGE                    = _UxGT("Thay ƒê·ªïi C√¥ng C·ª•");                    // Tool Change
+  LSTR MSG_TOOL_CHANGE_ZLIFT              = _UxGT("ƒê∆∞a L√™n Z");                           // Z Raise
+  LSTR MSG_SINGLENOZZLE_PRIME_SPEED       = _UxGT("T·ªëc ƒê·ªô Tu√¥n Ra");                      // Prime Speed
+  LSTR MSG_SINGLENOZZLE_RETRACT_SPEED     = _UxGT("T·ªëc ƒê·ªô R√∫t L·∫°i");                      // Retract Speed
+  LSTR MSG_FILAMENTCHANGE                 = _UxGT("Thay d√¢y nh·ª±a");                       // Change filament
+  LSTR MSG_FILAMENTCHANGE_E               = _UxGT("Thay d√¢y nh·ª±a *");                     // Change filament
+  LSTR MSG_FILAMENTLOAD                   = _UxGT("N·∫°p d√¢y nh·ª±a");                        // Load filament
+  LSTR MSG_FILAMENTLOAD_E                 = _UxGT("N·∫°p d√¢y nh·ª±a *");                      // Load filament
+  LSTR MSG_FILAMENTUNLOAD                 = _UxGT("D·ª° d√¢y nh·ª±a");                         // Unload filament
+  LSTR MSG_FILAMENTUNLOAD_E               = _UxGT("D·ª° d√¢y nh·ª±a *");                       // Unload filament
+  LSTR MSG_FILAMENTUNLOAD_ALL             = _UxGT("D·ª° t·∫•t c·∫£");                           // Unload All
+  LSTR MSG_ATTACH_MEDIA                   = _UxGT("Kh·ªüi t·∫°o ph∆∞∆°ng ti·ªán");                // Attach media
+  LSTR MSG_CHANGE_MEDIA                   = _UxGT("Thay ph∆∞∆°ng ti·ªán");                    // Change midea
   LSTR MSG_RELEASE_MEDIA                  = _UxGT("Ph√°t h√†nh ph∆∞∆°ng ti·ªán");
-  LSTR MSG_ZPROBE_OUT                     = _UxGT("ƒê·∫ßu D√≤ Z qua b√†n");                     // Z Probe past bed
-  LSTR MSG_SKEW_FACTOR                    = _UxGT("H·ªá s·ªë nghi√™ng");                        // Skew Factor
-  LSTR MSG_BLTOUCH                        = _UxGT("BLTOUCH");                              // BLTouch
-  LSTR MSG_BLTOUCH_SELFTEST               = _UxGT("T·ª± ki·ªÉm tra BLTOUCH ");                 // BLTouch Self-Test
-  LSTR MSG_BLTOUCH_RESET                  = _UxGT("B·∫∑t l·∫°i BLTouch");                      // Reset BLTouch
-  LSTR MSG_BLTOUCH_DEPLOY                 = _UxGT("ƒêem BLTouch");                          // Deploy BLTouch
-  LSTR MSG_BLTOUCH_STOW                   = _UxGT("C·∫•t BLTouch");                          // Stow BLTouch
-  LSTR MSG_MANUAL_DEPLOY                  = _UxGT("ƒêem ƒê·∫ßu D√≤-Z");                         // Deploy Z-Probe
-  LSTR MSG_MANUAL_STOW                    = _UxGT("C·∫•t ƒê·∫ßu D√≤-Z");                         // Stow Z-Probe
+  LSTR MSG_ZPROBE_OUT                     = _UxGT("ƒê·∫ßu D√≤ Z qua b√†n");                    // Z Probe past bed
+  LSTR MSG_SKEW_FACTOR                    = _UxGT("H·ªá s·ªë nghi√™ng");                       // Skew Factor
+  LSTR MSG_BLTOUCH                        = _UxGT("BLTOUCH");                             // BLTouch
+  LSTR MSG_BLTOUCH_SELFTEST               = _UxGT("T·ª± ki·ªÉm tra BLTOUCH ");                // BLTouch Self-Test
+  LSTR MSG_BLTOUCH_RESET                  = _UxGT("B·∫∑t l·∫°i BLTouch");                     // Reset BLTouch
+  LSTR MSG_BLTOUCH_DEPLOY                 = _UxGT("ƒêem BLTouch");                         // Deploy BLTouch
+  LSTR MSG_BLTOUCH_STOW                   = _UxGT("C·∫•t BLTouch");                         // Stow BLTouch
+  LSTR MSG_MANUAL_DEPLOY                  = _UxGT("ƒêem ƒê·∫ßu D√≤-Z");                        // Deploy Z-Probe
+  LSTR MSG_MANUAL_STOW                    = _UxGT("C·∫•t ƒê·∫ßu D√≤-Z");                        // Stow Z-Probe
   LSTR MSG_HOME_FIRST                     = _UxGT("V·ªÅ nh√† %s Tr∆∞∆°ÕÅc");
-  LSTR MSG_ZPROBE_ZOFFSET                 = _UxGT("ƒê·∫ßu D√≤ B√π ƒê·∫Øp Z");                      // Probe Z Offset
-  LSTR MSG_BABYSTEP_X                     = _UxGT("Nh√≠t X");                               // Babystep X
+  LSTR MSG_ZPROBE_ZOFFSET                 = _UxGT("ƒê·∫ßu D√≤ B√π ƒê·∫Øp Z");                     // Probe Z Offset
+  LSTR MSG_BABYSTEP_X                     = _UxGT("Nh√≠t X");                              // Babystep X
   LSTR MSG_BABYSTEP_Y                     = _UxGT("Nh√≠t Y");
   LSTR MSG_BABYSTEP_Z                     = _UxGT("Nh√≠t Z");
   LSTR MSG_BABYSTEP_N                     = _UxGT("Nh√≠t @");
-  LSTR MSG_ENDSTOP_ABORT                  = _UxGT("H·ªßy b·ªè c√¥ng t·∫Øc");                      // Endstop abort
-  LSTR MSG_HEATING_FAILED_LCD             = _UxGT("S∆∞·ªüi ƒë·∫ßu phun kh√¥ng th√†nh c√¥ng");       // Heating failed
-  LSTR MSG_ERR_REDUNDANT_TEMP             = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô d∆∞");                // Err: REDUNDANT TEMP
-  LSTR MSG_THERMAL_RUNAWAY                = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát");                         // THERMAL RUNAWAY | problem
-  LSTR MSG_THERMAL_RUNAWAY_BED            = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát b√†n");                     // BED THERMAL RUNAWAY
-  LSTR MSG_ERR_MAXTEMP                    = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi ƒëa");            // Err: MAXTEMP
-  LSTR MSG_ERR_MINTEMP                    = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");         // Err: MINTEMP
-  LSTR MSG_HALTED                         = _UxGT("M√ÅY IN ƒê√É D∆ØÕÄNG LAÃ£I");                   // PRINTER HALTED
-  LSTR MSG_PLEASE_RESET                   = _UxGT("Xin b·∫∑t l·∫°i");                          // Please reset
-  LSTR MSG_HEATING                        = _UxGT("ƒêang s∆∞·ªüi noÕÅng...");                    // heating
-  LSTR MSG_COOLING                        = _UxGT("ƒêang laÕÄm ngu√¥Ã£i...");                    // cooling
-  LSTR MSG_BED_HEATING                    = _UxGT("ƒêang s∆∞·ªüi nong b√†n...");                // bed heating
-  LSTR MSG_BED_COOLING                    = _UxGT("ƒêang laÕÄm ngu√¥Ã£i b√†n...");                // bed cooling
-  LSTR MSG_DELTA_CALIBRATE                = _UxGT("C√¢n Ch·ªânh Delta");                      // Delta calibration
+  LSTR MSG_ENDSTOP_ABORT                  = _UxGT("H·ªßy b·ªè c√¥ng t·∫Øc");                     // Endstop abort
+  LSTR MSG_HEATING_FAILED_LCD             = _UxGT("S∆∞·ªüi ƒë·∫ßu phun kh√¥ng th√†nh c√¥ng");      // Heating failed
+  LSTR MSG_ERR_REDUNDANT_TEMP             = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô d∆∞");               // Err: REDUNDANT TEMP
+  LSTR MSG_THERMAL_RUNAWAY                = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát");                        // THERMAL RUNAWAY | problem
+  LSTR MSG_THERMAL_RUNAWAY_BED            = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát b√†n");                    // BED THERMAL RUNAWAY
+  LSTR MSG_ERR_MAXTEMP                    = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi ƒëa");           // Err: MAXTEMP
+  LSTR MSG_ERR_MINTEMP                    = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");        // Err: MINTEMP
+  LSTR MSG_HALTED                         = _UxGT("M√ÅY IN ƒê√É D∆ØÕÄNG LAÃ£I");                  // PRINTER HALTED
+  LSTR MSG_PLEASE_RESET                   = _UxGT("Xin b·∫∑t l·∫°i");                         // Please reset
+  LSTR MSG_HEATING                        = _UxGT("ƒêang s∆∞·ªüi noÕÅng...");                   // Heating
+  LSTR MSG_COOLING                        = _UxGT("ƒêang laÕÄm ngu√¥Ã£i...");                   // Cooling
+  LSTR MSG_BED_HEATING                    = _UxGT("ƒêang s∆∞·ªüi nong b√†n...");               // Bed heating
+  LSTR MSG_BED_COOLING                    = _UxGT("ƒêang laÕÄm ngu√¥Ã£i b√†n...");               // Bed cooling
+  LSTR MSG_DELTA_CALIBRATE                = _UxGT("C√¢n Ch·ªânh Delta");                     // Delta calibration
   LSTR MSG_DELTA_CALIBRATE_X              = _UxGT("Ch·ªânh X l·∫°i");
   LSTR MSG_DELTA_CALIBRATE_Y              = _UxGT("Ch·ªânh Y l·∫°i");
   LSTR MSG_DELTA_CALIBRATE_Z              = _UxGT("Ch·ªânh Z l·∫°i");
-  LSTR MSG_DELTA_CALIBRATE_CENTER         = _UxGT("Ch·ªânh Z Center");                       // Calibrate Center
-  LSTR MSG_DELTA_SETTINGS                 = _UxGT("C√†i ƒê·∫∑t Delta");                        // Delta Settings
-  LSTR MSG_DELTA_AUTO_CALIBRATE           = _UxGT("C√¢n Ch·ªânh T·ª± ƒê·ªông");                    // Auto Calibration
-  LSTR MSG_DELTA_DIAG_ROD                 = _UxGT("G·∫≠y Ch√©o");                             // Diag Rod
-  LSTR MSG_DELTA_HEIGHT                   = _UxGT("Chi·ªÅu Cao");                            // Height
-  LSTR MSG_DELTA_RADIUS                   = _UxGT("B√°n K√≠nh");                             // Radius
+  LSTR MSG_DELTA_CALIBRATE_CENTER         = _UxGT("Ch·ªânh Z Center");                      // Calibrate Center
+  LSTR MSG_DELTA_SETTINGS                 = _UxGT("C√†i ƒê·∫∑t Delta");                       // Delta Settings
+  LSTR MSG_DELTA_AUTO_CALIBRATE           = _UxGT("C√¢n Ch·ªânh T·ª± ƒê·ªông");                   // Auto Calibration
+  LSTR MSG_DELTA_DIAG_ROD                 = _UxGT("G·∫≠y Ch√©o");                            // Diag Rod
+  LSTR MSG_DELTA_HEIGHT                   = _UxGT("Chi·ªÅu Cao");                           // Height
+  LSTR MSG_DELTA_RADIUS                   = _UxGT("B√°n K√≠nh");                            // Radius
   LSTR MSG_INFO_MENU                      = _UxGT("V·ªÅ M√°y In");
-  LSTR MSG_INFO_PRINTER_MENU              = _UxGT("Th√¥ng Tin M√°y In");                     // Printer Info
-  LSTR MSG_3POINT_LEVELING                = _UxGT("San l·∫•p 3-ƒêi·ªÉm");                       // 3-Point Leveling
-  LSTR MSG_LINEAR_LEVELING                = _UxGT("San L·∫•p Tuy·∫øn T√≠nh");                   // Linear Leveling
-  LSTR MSG_BILINEAR_LEVELING              = _UxGT("San L·∫•p Song Tuy·∫øn");                   // Bilinear Leveling
-  LSTR MSG_UBL_LEVELING                   = _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t");               // Unified Bed Leveling
-  LSTR MSG_MESH_LEVELING                  = _UxGT("L∆∞·ªõi San L·∫•p");                         // Mesh Leveling
-  LSTR MSG_INFO_STATS_MENU                = _UxGT("Th·ªëng K√™ M√°y In");                      // Printer Stats
-  LSTR MSG_INFO_BOARD_MENU                = _UxGT("Th√¥ng Tin Bo M·∫°ch");                    // Board Info
-  LSTR MSG_INFO_THERMISTOR_MENU           = _UxGT("ƒêi·ªán Tr·ªü Nhi·ªát");                       // Thermistors
-  LSTR MSG_INFO_EXTRUDERS                 = _UxGT("M√°y ƒë√πn");                              // Extruders
-  LSTR MSG_INFO_BAUDRATE                  = _UxGT("Baud");                                 // Baud
-  LSTR MSG_INFO_PROTOCOL                  = _UxGT("Giao Th·ª©c");                            // Protocol
-  LSTR MSG_CASE_LIGHT                     = _UxGT("ƒê√®n Khu√¥ng");                           // Case light
-  LSTR MSG_CASE_LIGHT_BRIGHTNESS          = _UxGT("ƒê·ªô S√°ng");                              // Light Brightness
+  LSTR MSG_INFO_PRINTER_MENU              = _UxGT("Th√¥ng Tin M√°y In");                    // Printer Info
+  LSTR MSG_3POINT_LEVELING                = _UxGT("San l·∫•p 3-ƒêi·ªÉm");                      // 3-Point Leveling
+  LSTR MSG_LINEAR_LEVELING                = _UxGT("San L·∫•p Tuy·∫øn T√≠nh");                  // Linear Leveling
+  LSTR MSG_BILINEAR_LEVELING              = _UxGT("San L·∫•p Song Tuy·∫øn");                  // Bilinear Leveling
+  LSTR MSG_UBL_LEVELING                   = _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t");              // Unified Bed Leveling
+  LSTR MSG_MESH_LEVELING                  = _UxGT("L∆∞·ªõi San L·∫•p");                        // Mesh Leveling
+  LSTR MSG_INFO_STATS_MENU                = _UxGT("Th·ªëng K√™ M√°y In");                     // Printer Stats
+  LSTR MSG_INFO_BOARD_MENU                = _UxGT("Th√¥ng Tin Bo M·∫°ch");                   // Board Info
+  LSTR MSG_INFO_THERMISTOR_MENU           = _UxGT("ƒêi·ªán Tr·ªü Nhi·ªát");                      // Thermistors
+  LSTR MSG_INFO_EXTRUDERS                 = _UxGT("M√°y ƒë√πn");                             // Extruders
+  LSTR MSG_INFO_BAUDRATE                  = _UxGT("Baud");                                // Baud
+  LSTR MSG_INFO_PROTOCOL                  = _UxGT("Giao Th·ª©c");                           // Protocol
+  LSTR MSG_CASE_LIGHT                     = _UxGT("ƒê√®n Khu√¥ng");                          // Case light
+  LSTR MSG_CASE_LIGHT_BRIGHTNESS          = _UxGT("ƒê·ªô S√°ng");                             // Light Brightness
   #if LCD_WIDTH >= 20 || HAS_DWIN_E3V2
-    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("S·ªë In");                                // Print Count
+    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("S·ªë In");                               // Print Count
     LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("ƒê√£ ho√†n th√†nh");
-    LSTR MSG_INFO_PRINT_TIME              = _UxGT("T√¥Ãâng s·ªë th·ªùi gian in");                // Total print time
-    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("Th·ªùi gian vi·ªác l√¢u nh·∫•t");              // Longest job time
-    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("T·ªïng s·ªë ƒë√πn");                          // Extruded total
+    LSTR MSG_INFO_PRINT_TIME              = _UxGT("T√¥Ãâng s·ªë th·ªùi gian in");               // Total print time
+    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("Th·ªùi gian vi·ªác l√¢u nh·∫•t");             // Longest job time
+    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("T·ªïng s·ªë ƒë√πn");                         // Extruded total
   #else
-    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("In");                                   // prints
-    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("ƒê√£ ho√†n th√†nh");                        // Completed
-    LSTR MSG_INFO_PRINT_TIME              = _UxGT("T√¥Ãâng s·ªë");                             // total
-    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("D√†i nh·∫•t");                             // Longest
+    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("In");                                  // Prints
+    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("ƒê√£ ho√†n th√†nh");                       // Completed
+    LSTR MSG_INFO_PRINT_TIME              = _UxGT("T√¥Ãâng s·ªë");                            // Total
+    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("D√†i nh·∫•t");                            // Longest
     LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("ƒê√£ √©p ƒë√πn");
   #endif
-  LSTR MSG_INFO_MIN_TEMP                  = _UxGT("Nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");                   // Min Temp
-  LSTR MSG_INFO_MAX_TEMP                  = _UxGT("Nhi·ªát ƒë·ªô t·ªëi ƒëa");                      // Max temp
-  LSTR MSG_INFO_PSU                       = _UxGT("B·ªô ngu·ªìn");                             // PSU
-  LSTR MSG_DRIVE_STRENGTH                 = _UxGT("S·ª©c m·∫°nh ·ªï ƒëƒ©a");                       // Drive Strength
+  LSTR MSG_INFO_MIN_TEMP                  = _UxGT("Nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");                  // Min Temp
+  LSTR MSG_INFO_MAX_TEMP                  = _UxGT("Nhi·ªát ƒë·ªô t·ªëi ƒëa");                     // Max temp
+  LSTR MSG_INFO_PSU                       = _UxGT("B·ªô ngu·ªìn");                            // PSU
+  LSTR MSG_DRIVE_STRENGTH                 = _UxGT("S·ª©c m·∫°nh ·ªï ƒëƒ©a");                      // Drive Strength
   LSTR MSG_DAC_PERCENT_N                  = _UxGT("@ % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("Ghi DAC EEPROM");                       // DAC EEPROM Write
-  LSTR MSG_FILAMENT_CHANGE_HEADER_PAUSE   = _UxGT("In t·∫°m d·ª´ng");                          // PRINT PAUSED
+  LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("Ghi DAC EEPROM");                      // DAC EEPROM Write
+  LSTR MSG_FILAMENT_CHANGE_HEADER_PAUSE   = _UxGT("In t·∫°m d·ª´ng");                         // PRINT PAUSED
   LSTR MSG_FILAMENT_CHANGE_HEADER_LOAD    = _UxGT("N·∫°p d√¢y nh·ª±a");
-  LSTR MSG_FILAMENT_CHANGE_HEADER_UNLOAD  = _UxGT("D·ª° d√¢y nh·ª±a");                          // unload filament
-  LSTR MSG_FILAMENT_CHANGE_OPTION_HEADER  = _UxGT("T√πy ch·ªçn h√¥ÕÄi phuÃ£c:");                   // RESUME OPTIONS
-  LSTR MSG_FILAMENT_CHANGE_OPTION_PURGE   = _UxGT("X·∫£ th√™m");                              // Purge more
-  LSTR MSG_FILAMENT_CHANGE_OPTION_RESUME  = _UxGT("Ti·∫øp t·ª•c");                             // continue
-  LSTR MSG_FILAMENT_CHANGE_NOZZLE         = _UxGT("  ƒê·∫ßu Phun: ");                         // Nozzle
-  LSTR MSG_RUNOUT_SENSOR_ENABLE           = _UxGT("C·∫£m Bi·∫øn H·∫øt");                         // Runout Sensor
-  LSTR MSG_KILL_HOMING_FAILED             = _UxGT("S∆∞Ã£ nh√† kh√¥ng th√†nh c√¥ng");              // Homing failed
-  LSTR MSG_LCD_PROBING_FAILED             = _UxGT(" kh√¥ng th√†nh c√¥ng");                    // Probing failed
+  LSTR MSG_FILAMENT_CHANGE_HEADER_UNLOAD  = _UxGT("D·ª° d√¢y nh·ª±a");                         // Unload filament
+  LSTR MSG_FILAMENT_CHANGE_OPTION_HEADER  = _UxGT("T√πy ch·ªçn h√¥ÕÄi phuÃ£c:");                  // RESUME OPTIONS
+  LSTR MSG_FILAMENT_CHANGE_OPTION_PURGE   = _UxGT("X·∫£ th√™m");                             // Purge more
+  LSTR MSG_FILAMENT_CHANGE_OPTION_RESUME  = _UxGT("Ti·∫øp t·ª•c");                            // Continue
+  LSTR MSG_FILAMENT_CHANGE_NOZZLE         = _UxGT("  ƒê·∫ßu Phun: ");                        // Nozzle
+  LSTR MSG_RUNOUT_SENSOR_ENABLE           = _UxGT("C·∫£m Bi·∫øn H·∫øt");                        // Runout Sensor
+  LSTR MSG_KILL_HOMING_FAILED             = _UxGT("S∆∞Ã£ nh√† kh√¥ng th√†nh c√¥ng");             // Homing failed
+  LSTR MSG_LCD_PROBING_FAILED             = _UxGT(" kh√¥ng th√†nh c√¥ng");                   // Probing failed
 
   //
   // Filament Change screens show up to 3 lines on a 4-line display
@@ -406,36 +406,37 @@ namespace Language_vi {
   //
   #if LCD_HEIGHT >= 4
     LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_2_LINE("Nh·∫•n n√∫t", "ƒë·ªÉ ti·∫øp t·ª•c in")); // Press button to resume print
-    LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_3_LINE("Ch·ªù cho s∆∞Ã£", "thay ƒë·ªïi d√¢y nh·ª±a", "bƒÉÕÅt ƒë√¢ÕÄu")); // wait for filament change to start
-    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_3_LINE("ƒêuÕÅt d√¢y nh·ª±a vaÕÄo", "v√† nh·∫•n n√∫t", "ƒë·ªÉ ti·∫øp t·ª•c")); // insert filament and press button to continue                       //
+    LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_3_LINE("Ch·ªù cho s∆∞Ã£", "thay ƒë·ªïi d√¢y nh·ª±a", "bƒÉÕÅt ƒë√¢ÕÄu")); // Wait for filament change to start
+    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_3_LINE("ƒêuÕÅt d√¢y nh·ª±a vaÕÄo", "v√† nh·∫•n n√∫t", "ƒë·ªÉ ti·∫øp t·ª•c")); // Insert filament and press button to continue                       //
     LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_2_LINE("Nh·∫•n n√∫t", "ƒë·ªÉ l√†m n√≥ng ƒë·∫ßu phun")); // Press button to heat nozzle
     LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_2_LINE("ƒê·∫ßu phun ƒëang n√≥ng l√™n", "Xin ch·ªù...")); // Nozzle heating Please wait
-    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_2_LINE("Ch·ªù tro", "d√¢y nh·ª±a ra"));   // Wait for filament unload
-    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_2_LINE("Ch·ªù tro", "d√¢y nh·ª±a vaÕÄo"));  // Wait for filament load
-    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_2_LINE("Ch·ªù tro", "x·∫£ d√¢y nh·ª±a"));   // wait for filament purge
+    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_2_LINE("Ch·ªù tro", "d√¢y nh·ª±a ra"));  // Wait for filament unload
+    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_2_LINE("Ch·ªù tro", "d√¢y nh·ª±a vaÕÄo")); // Wait for filament load
+    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_2_LINE("Ch·ªù tro", "x·∫£ d√¢y nh·ª±a"));  // Wait for filament purge
     LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_2_LINE("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c", "x·∫£ d√¢y nh·ª±a")); // Click to finish d√¢y nh·ª±a purge
     LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_2_LINE("Ch·ªù tro in", "ti·∫øp t·ª•c...")); // Wait for print to resume
   #else // LCD_HEIGHT < 4
-    LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_1_LINE("Nh·∫•n n√∫t ƒë·ªÉ ti·∫øp t·ª•c"));     // Click to continue
+    LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_1_LINE("Nh·∫•n n√∫t ƒë·ªÉ ti·∫øp t·ª•c"));    // Click to continue
     LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_1_LINE("Xin ch·ªù..."));
-    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_1_LINE("Ch√®n v√† nh·∫•n"));             // Insert and Click
-    LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_1_LINE("Nh·∫•n ƒë·ªÉ s∆∞·ªüi"));             // Click to heat
-    LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_1_LINE("ƒêang s∆∞·ªüi n√≥ng"));           // Heating
-    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_1_LINE("ƒêang d·ª° ra..."));            // Ejecting
-    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_1_LINE("ƒêang n·∫°p..."));              // Loading
-    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_1_LINE("ƒêang x·∫£..."));               // Purging
-    LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_1_LINE("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c"));     // Click to finish
-    LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_1_LINE("ƒêang ti·∫øp t·ª•c..."));         // Resuming
+    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_1_LINE("Ch√®n v√† nh·∫•n"));            // Insert and Click
+    LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_1_LINE("Nh·∫•n ƒë·ªÉ s∆∞·ªüi"));            // Click to heat
+    LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_1_LINE("ƒêang s∆∞·ªüi n√≥ng"));          // Heating
+    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_1_LINE("ƒêang d·ª° ra..."));           // Ejecting
+    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_1_LINE("ƒêang n·∫°p..."));             // Loading
+    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_1_LINE("ƒêang x·∫£..."));              // Purging
+    LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_1_LINE("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c"));    // Click to finish
+    LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_1_LINE("ƒêang ti·∫øp t·ª•c..."));        // Resuming
   #endif // LCD_HEIGHT < 4
 
-  LSTR MSG_TMC_DRIVERS                    = _UxGT("Tr√¨nh ƒëi·ªÅu khi·ªÉn TMC");                 // TMC drivers
-  LSTR MSG_TMC_CURRENT                    = _UxGT("D√≤ng ƒëi·ªán tr√¨nh ƒëi·ªÅu khi·ªÉn");           // Driver current
-  LSTR MSG_TMC_HYBRID_THRS                = _UxGT("Ng∆∞·ª°ng H·ªón H·ª£p");                       // Hybrid threshold
-  LSTR MSG_TMC_HOMING_THRS                = _UxGT("V√¥ c·∫£m bi·∫øn");                          // Sensorless homing
-  LSTR MSG_TMC_STEPPING_MODE              = _UxGT("Ch·∫ø ƒë·ªô t·ª´ng b∆∞·ªõc");                     // Stepping mode
-  LSTR MSG_TMC_STEALTH_ENABLED            = _UxGT("C·∫ØtT√†ngH√¨nh ƒë∆∞·ª£c k√≠ch ho·∫°t");           // StealthChop enabled
+  LSTR MSG_TMC_DRIVERS                    = _UxGT("Tr√¨nh ƒëi·ªÅu khi·ªÉn TMC");                // TMC drivers
+  LSTR MSG_TMC_CURRENT                    = _UxGT("D√≤ng ƒëi·ªán tr√¨nh ƒëi·ªÅu khi·ªÉn");          // Driver current
+  LSTR MSG_TMC_HYBRID_THRS                = _UxGT("Ng∆∞·ª°ng H·ªón H·ª£p");                      // Hybrid threshold
+  LSTR MSG_TMC_HOMING_THRS                = _UxGT("V√¥ c·∫£m bi·∫øn");                         // Sensorless homing
+  LSTR MSG_TMC_STEPPING_MODE              = _UxGT("Ch·∫ø ƒë·ªô t·ª´ng b∆∞·ªõc");                    // Stepping mode
+  LSTR MSG_TMC_STEALTH_ENABLED            = _UxGT("C·∫ØtT√†ngH√¨nh ƒë∆∞·ª£c k√≠ch ho·∫°t");          // StealthChop enabled
 
-  LSTR MSG_SHORT_DAY                      = _UxGT("n");                                    // d - ng√†y - One character only
-  LSTR MSG_SHORT_HOUR                     = _UxGT("g");                                    // h - gi·ªù  - One character only
-  LSTR MSG_SHORT_MINUTE                   = _UxGT("p");                                    // m - ph√∫t - One character only
+  LSTR MSG_SHORT_DAY                      = _UxGT("n");                                   // d - ng√†y - One character only
+  LSTR MSG_SHORT_HOUR                     = _UxGT("g");                                   // h - gi·ªù  - One character only
+  LSTR MSG_SHORT_MINUTE                   = _UxGT("p");                                   // m - ph√∫t - One character only
+  LSTR MSG_SHORT_MINUTE                   = _UxGT("p");                                   // M - ph√∫t - One character only
 }

commit 92721d1bf7d3516ffa591bf7fa9b0b03099f5156
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 14 17:45:45 2023 -0500

    üö∏ "Main" => "Main Menu"

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 3925eb8b83..5795c58a1e 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -44,7 +44,7 @@ namespace Language_vi {
   LSTR MSG_MEDIA_USB_FAILED               = _UxGT("USB kh·ªüi th·∫•t b·∫°i");
   LSTR MSG_LCD_ENDSTOPS                   = _UxGT("C√¥ng t·∫Øc");                             // Endstops - c√¥ng t·∫Øc h√†nh tr√¨nh
   LSTR MSG_LCD_SOFT_ENDSTOPS              = _UxGT("C√¥ng t·∫Øc m·ªÅm");                         // soft Endstops
-  LSTR MSG_MAIN                           = _UxGT("Ch√≠nh");                                // Main
+  LSTR MSG_MAIN_MENU                      = _UxGT("Ch√≠nh");                                // Main
   LSTR MSG_ADVANCED_SETTINGS              = _UxGT("Thi·∫øt l·∫≠p c·∫•p cao");                    // Advanced Settings
   LSTR MSG_CONFIGURATION                  = _UxGT("C·∫•u h√¨nh");                             // Configuration
   LSTR MSG_RUN_AUTO_FILES                 = _UxGT("Kh·ªüi ch·∫°y t·ª± ƒë·ªông");                    // Autostart

commit c63577fd1dacaa232cfcd44a1e9ea1426cd8c0bc
Author: Abdullah YILMAZ <h.abdullahyilmaz@hotmail.com>
Date:   Mon Mar 6 01:29:43 2023 +0300

    üåê Update Turkish language (#25447)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index c01b2f44fa..3925eb8b83 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -341,9 +341,6 @@ namespace Language_vi {
   LSTR MSG_ERR_MINTEMP                    = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");         // Err: MINTEMP
   LSTR MSG_HALTED                         = _UxGT("M√ÅY IN ƒê√É D∆ØÕÄNG LAÃ£I");                   // PRINTER HALTED
   LSTR MSG_PLEASE_RESET                   = _UxGT("Xin b·∫∑t l·∫°i");                          // Please reset
-  LSTR MSG_SHORT_DAY                      = _UxGT("n");                                    // d - ng√†y - One character only
-  LSTR MSG_SHORT_HOUR                     = _UxGT("g");                                    // h - gi·ªù  - One character only
-  LSTR MSG_SHORT_MINUTE                   = _UxGT("p");                                    // m - ph√∫t - One character only
   LSTR MSG_HEATING                        = _UxGT("ƒêang s∆∞·ªüi noÕÅng...");                    // heating
   LSTR MSG_COOLING                        = _UxGT("ƒêang laÕÄm ngu√¥Ã£i...");                    // cooling
   LSTR MSG_BED_HEATING                    = _UxGT("ƒêang s∆∞·ªüi nong b√†n...");                // bed heating
@@ -437,4 +434,8 @@ namespace Language_vi {
   LSTR MSG_TMC_HOMING_THRS                = _UxGT("V√¥ c·∫£m bi·∫øn");                          // Sensorless homing
   LSTR MSG_TMC_STEPPING_MODE              = _UxGT("Ch·∫ø ƒë·ªô t·ª´ng b∆∞·ªõc");                     // Stepping mode
   LSTR MSG_TMC_STEALTH_ENABLED            = _UxGT("C·∫ØtT√†ngH√¨nh ƒë∆∞·ª£c k√≠ch ho·∫°t");           // StealthChop enabled
+
+  LSTR MSG_SHORT_DAY                      = _UxGT("n");                                    // d - ng√†y - One character only
+  LSTR MSG_SHORT_HOUR                     = _UxGT("g");                                    // h - gi·ªù  - One character only
+  LSTR MSG_SHORT_MINUTE                   = _UxGT("p");                                    // m - ph√∫t - One character only
 }

commit 96bc084f3d791bc93265f217181986863e8e5fc7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 18 02:15:16 2023 -0600

    üé® Misc. LCD cleanup (#25400)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 575191f50b..c01b2f44fa 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -207,7 +207,7 @@ namespace Language_vi {
   LSTR MSG_MOVE_10MM                      = _UxGT("Di chuy·ªÉn 10mm");                       // Move 10mm
   LSTR MSG_MOVE_100MM                     = _UxGT("Di chuy·ªÉn 100mm");                      // Move 100mm
   LSTR MSG_SPEED                          = _UxGT("T·ªëc ƒë·ªô");                               // Speed
-  LSTR MSG_BED_Z                          = _UxGT("Z B√†n");
+  LSTR MSG_MESH_Z_OFFSET                  = _UxGT("Z B√†n");
   LSTR MSG_NOZZLE                         = _UxGT("ƒê·∫ßu phun");                             // Nozzle
   LSTR MSG_NOZZLE_N                       = _UxGT("ƒê·∫ßu phun ~");
   LSTR MSG_BED                            = _UxGT("B√†n");                                  // bed

commit 7e72981b8cbaa7a6276f6833527e97cb10e060e7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 21 22:57:56 2023 -0600

    üö∏ Fix homing_needed_error language

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index ed50cca663..575191f50b 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -326,7 +326,7 @@ namespace Language_vi {
   LSTR MSG_BLTOUCH_STOW                   = _UxGT("C·∫•t BLTouch");                          // Stow BLTouch
   LSTR MSG_MANUAL_DEPLOY                  = _UxGT("ƒêem ƒê·∫ßu D√≤-Z");                         // Deploy Z-Probe
   LSTR MSG_MANUAL_STOW                    = _UxGT("C·∫•t ƒê·∫ßu D√≤-Z");                         // Stow Z-Probe
-  LSTR MSG_HOME_FIRST                     = _UxGT("V·ªÅ nh√† %s%s%s Tr∆∞∆°ÕÅc");
+  LSTR MSG_HOME_FIRST                     = _UxGT("V·ªÅ nh√† %s Tr∆∞∆°ÕÅc");
   LSTR MSG_ZPROBE_ZOFFSET                 = _UxGT("ƒê·∫ßu D√≤ B√π ƒê·∫Øp Z");                      // Probe Z Offset
   LSTR MSG_BABYSTEP_X                     = _UxGT("Nh√≠t X");                               // Babystep X
   LSTR MSG_BABYSTEP_Y                     = _UxGT("Nh√≠t Y");

commit d94defc545ad477c82a8bc77e949aa91cdd3e0f2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 15 06:48:17 2023 -0600

    üé® Language / menu cleanup

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 27c6ee1181..ed50cca663 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -224,7 +224,6 @@ namespace Language_vi {
   LSTR MSG_AUTOTEMP                       = _UxGT("Nhi·ªát ƒë·ªô t·ª± ƒë·ªông");                     // Autotemp
   LSTR MSG_LCD_ON                         = _UxGT("B·∫≠t");                                  // on
   LSTR MSG_LCD_OFF                        = _UxGT("T·∫Øt");                                  // off
-  LSTR MSG_SELECT                         = _UxGT("L·ª±a");                                  // Select
   LSTR MSG_SELECT_E                       = _UxGT("L·ª±a *");
   LSTR MSG_ACC                            = _UxGT("TƒÉng T·ªëc");
   LSTR MSG_JERK                           = _UxGT("Gi·∫≠t");

commit ed2071aabdebf0c1d9b82b6d8575b8fefae763c4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 18 19:52:47 2022 -0500

    ü©π Fix manual move titles (#24518)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 989a201d4d..27c6ee1181 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -198,6 +198,7 @@ namespace Language_vi {
   LSTR MSG_MOVE_X                         = _UxGT("Di chuy·ªÉn X");                          // Move X
   LSTR MSG_MOVE_Y                         = _UxGT("Di chuy·ªÉn Y");
   LSTR MSG_MOVE_Z                         = _UxGT("Di chuy·ªÉn Z");
+  LSTR MSG_MOVE_N                         = _UxGT("Di chuy·ªÉn @");
   LSTR MSG_MOVE_E                         = _UxGT("M√°y ƒë√πn");                              // Extruder
   LSTR MSG_MOVE_EN                        = _UxGT("M√°y ƒë√πn *");
   LSTR MSG_HOTEND_TOO_COLD                = _UxGT("ƒê·∫ßu n√≥ng qu√° l·∫°nh");                    // Hotend too cold

commit 546b3066c3b45f0511e3a6c068d85f30a41e9d15
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jun 24 22:07:06 2022 -0500

    üåê Drop unused delta strings

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index f963e3e346..989a201d4d 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -355,8 +355,6 @@ namespace Language_vi {
   LSTR MSG_DELTA_CALIBRATE_CENTER         = _UxGT("Ch·ªânh Z Center");                       // Calibrate Center
   LSTR MSG_DELTA_SETTINGS                 = _UxGT("C√†i ƒê·∫∑t Delta");                        // Delta Settings
   LSTR MSG_DELTA_AUTO_CALIBRATE           = _UxGT("C√¢n Ch·ªânh T·ª± ƒê·ªông");                    // Auto Calibration
-  LSTR MSG_DELTA_HEIGHT_CALIBRATE         = _UxGT("ƒê·∫∑t Chi·ªÅu Cao Delta");                  // Set Delta Height
-  LSTR MSG_DELTA_Z_OFFSET_CALIBRATE       = _UxGT("ƒê·∫ßu D√≤ Z-B√π ƒê·∫Øp");                      // Probe Z-offset
   LSTR MSG_DELTA_DIAG_ROD                 = _UxGT("G·∫≠y Ch√©o");                             // Diag Rod
   LSTR MSG_DELTA_HEIGHT                   = _UxGT("Chi·ªÅu Cao");                            // Height
   LSTR MSG_DELTA_RADIUS                   = _UxGT("B√°n K√≠nh");                             // Radius

commit 8aca38351cd6d33a1202bf9a13890dc8e5eadd49
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 3 22:56:38 2022 -0500

    üßë‚Äçüíª Extend LCD string substitution (#24278)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index da9e1fc030..f963e3e346 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -230,19 +230,15 @@ namespace Language_vi {
   LSTR MSG_VA_JERK                        = _UxGT("Gi·∫≠t-V") STR_A;
   LSTR MSG_VB_JERK                        = _UxGT("Gi·∫≠t-V") STR_B;
   LSTR MSG_VC_JERK                        = _UxGT("Gi·∫≠t-V") STR_C;
-  LSTR MSG_VI_JERK                        = _UxGT("Gi·∫≠t-V") STR_I;
-  LSTR MSG_VJ_JERK                        = _UxGT("Gi·∫≠t-V") STR_J;
-  LSTR MSG_VK_JERK                        = _UxGT("Gi·∫≠t-V") STR_K;
+  LSTR MSG_VN_JERK                        = _UxGT("Gi·∫≠t-V@");
   LSTR MSG_VE_JERK                        = _UxGT("Gi·∫≠t-Ve");
   LSTR MSG_JUNCTION_DEVIATION             = _UxGT("ƒê·ªô L·ªách Ch√¥ÃÉ Giao");                    // Junction Dev
-  LSTR MSG_VELOCITY                       = _UxGT("V√¢Ã£n t√¥ÕÅc");                              // velocity
+  LSTR MSG_MAX_SPEED                      = _UxGT("V√¢Ã£n t√¥ÕÅc");                              // velocity
   LSTR MSG_VMAX_A                         = _UxGT("Vƒëa") STR_A;                        // Vmax
   LSTR MSG_VMAX_B                         = _UxGT("Vƒëa") STR_B;
   LSTR MSG_VMAX_C                         = _UxGT("Vƒëa") STR_C;
-  LSTR MSG_VMAX_I                         = _UxGT("Vƒëa") STR_I;
-  LSTR MSG_VMAX_J                         = _UxGT("Vƒëa") STR_J;
-  LSTR MSG_VMAX_K                         = _UxGT("Vƒëa") STR_K;
-  LSTR MSG_VMAX_E                         = _UxGT("Vƒëa") STR_E;
+  LSTR MSG_VMAX_N                         = _UxGT("Vƒëa@");
+  LSTR MSG_VMAX_E                         = _UxGT("VƒëaE");
   LSTR MSG_VMAX_EN                        = _UxGT("Vƒëa *");
   LSTR MSG_VMIN                           = _UxGT("Vthi·ªÉu");                               // Vmin
   LSTR MSG_VTRAV_MIN                      = _UxGT("Vchuy·ªÉn thi·ªÉu");                        // VTrav min
@@ -250,10 +246,8 @@ namespace Language_vi {
   LSTR MSG_AMAX_A                         = _UxGT("TƒÉng t·ªëc ca") STR_A;                // Amax
   LSTR MSG_AMAX_B                         = _UxGT("TƒÉng t·ªëc ca") STR_B;
   LSTR MSG_AMAX_C                         = _UxGT("TƒÉng t·ªëc ca") STR_C;
-  LSTR MSG_AMAX_I                         = _UxGT("TƒÉng t·ªëc ca") STR_I;                // Amax
-  LSTR MSG_AMAX_J                         = _UxGT("TƒÉng t·ªëc ca") STR_J;
-  LSTR MSG_AMAX_K                         = _UxGT("TƒÉng t·ªëc ca") STR_K;
-  LSTR MSG_AMAX_E                         = _UxGT("TƒÉng t·ªëc ca") STR_E;
+  LSTR MSG_AMAX_N                         = _UxGT("TƒÉng t·ªëc ca@");
+  LSTR MSG_AMAX_E                         = _UxGT("TƒÉng t·ªëc caE");
   LSTR MSG_AMAX_EN                        = _UxGT("TƒÉng t·ªëc ca *");
   LSTR MSG_A_RETRACT                      = _UxGT("TT-R√∫t");                               // A-retract
   LSTR MSG_A_TRAVEL                       = _UxGT("TT-Chuy·ªÉn");                            // A-travel
@@ -261,9 +255,7 @@ namespace Language_vi {
   LSTR MSG_A_STEPS                        = _UxGT("B∆∞·ªõc") STR_A _UxGT("/mm");          // Steps/mm
   LSTR MSG_B_STEPS                        = _UxGT("B∆∞·ªõc") STR_B _UxGT("/mm");
   LSTR MSG_C_STEPS                        = _UxGT("B∆∞·ªõc") STR_C _UxGT("/mm");
-  LSTR MSG_I_STEPS                        = _UxGT("B∆∞·ªõc") STR_I _UxGT("/mm");          // Steps/mm
-  LSTR MSG_J_STEPS                        = _UxGT("B∆∞·ªõc") STR_J _UxGT("/mm");
-  LSTR MSG_K_STEPS                        = _UxGT("B∆∞·ªõc") STR_K _UxGT("/mm");
+  LSTR MSG_N_STEPS                        = _UxGT("B∆∞·ªõc@/mm");
   LSTR MSG_E_STEPS                        = _UxGT("B∆∞·ªõcE/mm");
   LSTR MSG_EN_STEPS                       = _UxGT("B∆∞·ªõc */mm");
   LSTR MSG_TEMPERATURE                    = _UxGT("Nhi·ªát ƒë·ªô");                             // Temperature
@@ -339,6 +331,7 @@ namespace Language_vi {
   LSTR MSG_BABYSTEP_X                     = _UxGT("Nh√≠t X");                               // Babystep X
   LSTR MSG_BABYSTEP_Y                     = _UxGT("Nh√≠t Y");
   LSTR MSG_BABYSTEP_Z                     = _UxGT("Nh√≠t Z");
+  LSTR MSG_BABYSTEP_N                     = _UxGT("Nh√≠t @");
   LSTR MSG_ENDSTOP_ABORT                  = _UxGT("H·ªßy b·ªè c√¥ng t·∫Øc");                      // Endstop abort
   LSTR MSG_HEATING_FAILED_LCD             = _UxGT("S∆∞·ªüi ƒë·∫ßu phun kh√¥ng th√†nh c√¥ng");       // Heating failed
   LSTR MSG_ERR_REDUNDANT_TEMP             = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô d∆∞");                // Err: REDUNDANT TEMP
@@ -399,13 +392,7 @@ namespace Language_vi {
   LSTR MSG_INFO_MAX_TEMP                  = _UxGT("Nhi·ªát ƒë·ªô t·ªëi ƒëa");                      // Max temp
   LSTR MSG_INFO_PSU                       = _UxGT("B·ªô ngu·ªìn");                             // PSU
   LSTR MSG_DRIVE_STRENGTH                 = _UxGT("S·ª©c m·∫°nh ·ªï ƒëƒ©a");                       // Drive Strength
-  LSTR MSG_DAC_PERCENT_A                  = STR_A _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");        // X Driver %
-  LSTR MSG_DAC_PERCENT_B                  = STR_B _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  LSTR MSG_DAC_PERCENT_C                  = STR_C _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  LSTR MSG_DAC_PERCENT_I                  = STR_I _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  LSTR MSG_DAC_PERCENT_J                  = STR_J _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  LSTR MSG_DAC_PERCENT_K                  = STR_K _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  LSTR MSG_DAC_PERCENT_E                  = _UxGT("E % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  LSTR MSG_DAC_PERCENT_N                  = _UxGT("@ % tr√¨nh ƒëi·ªÅu khi·ªÉn");
   LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("Ghi DAC EEPROM");                       // DAC EEPROM Write
   LSTR MSG_FILAMENT_CHANGE_HEADER_PAUSE   = _UxGT("In t·∫°m d·ª´ng");                          // PRINT PAUSED
   LSTR MSG_FILAMENT_CHANGE_HEADER_LOAD    = _UxGT("N·∫°p d√¢y nh·ª±a");

commit 23a26e4033763b4c7b8763fd420211423e558d08
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed May 4 17:03:25 2022 -0500

    üåê Clean up languages

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 879ccdeae7..da9e1fc030 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -63,7 +63,6 @@ namespace Language_vi {
   LSTR MSG_Z_FADE_HEIGHT                  = _UxGT("Chi·ªÅu cao m·ªù d·∫ßn");                     // Fade Height
   LSTR MSG_SET_HOME_OFFSETS               = _UxGT("ƒê·∫∑t b√π ƒë·∫Øp nh√†");                       // Set home offsets
   LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("B√π ƒë·∫Øp ƒë∆∞·ª£c √°p d·ª•ng");                  // Offsets applied
-  LSTR MSG_SET_ORIGIN                     = _UxGT("ƒê·∫∑t ngu·ªìn g·ªëc");                        // Set origin
   #if HAS_PREHEAT
     LSTR MSG_PREHEAT_1                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc");      // Preheat
     LSTR MSG_PREHEAT_1_H                  = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ~");    // Preheat

commit 9665a4434cee0386fa2a63a058b6f2598943ee98
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jan 10 02:51:34 2022 -0600

    üßë‚Äçüíª Fewer string macros

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index a419ddee56..879ccdeae7 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -228,43 +228,43 @@ namespace Language_vi {
   LSTR MSG_SELECT_E                       = _UxGT("L·ª±a *");
   LSTR MSG_ACC                            = _UxGT("TƒÉng T·ªëc");
   LSTR MSG_JERK                           = _UxGT("Gi·∫≠t");
-  LSTR MSG_VA_JERK                        = _UxGT("Gi·∫≠t-V") LCD_STR_A;
-  LSTR MSG_VB_JERK                        = _UxGT("Gi·∫≠t-V") LCD_STR_B;
-  LSTR MSG_VC_JERK                        = _UxGT("Gi·∫≠t-V") LCD_STR_C;
-  LSTR MSG_VI_JERK                        = _UxGT("Gi·∫≠t-V") LCD_STR_I;
-  LSTR MSG_VJ_JERK                        = _UxGT("Gi·∫≠t-V") LCD_STR_J;
-  LSTR MSG_VK_JERK                        = _UxGT("Gi·∫≠t-V") LCD_STR_K;
+  LSTR MSG_VA_JERK                        = _UxGT("Gi·∫≠t-V") STR_A;
+  LSTR MSG_VB_JERK                        = _UxGT("Gi·∫≠t-V") STR_B;
+  LSTR MSG_VC_JERK                        = _UxGT("Gi·∫≠t-V") STR_C;
+  LSTR MSG_VI_JERK                        = _UxGT("Gi·∫≠t-V") STR_I;
+  LSTR MSG_VJ_JERK                        = _UxGT("Gi·∫≠t-V") STR_J;
+  LSTR MSG_VK_JERK                        = _UxGT("Gi·∫≠t-V") STR_K;
   LSTR MSG_VE_JERK                        = _UxGT("Gi·∫≠t-Ve");
   LSTR MSG_JUNCTION_DEVIATION             = _UxGT("ƒê·ªô L·ªách Ch√¥ÃÉ Giao");                    // Junction Dev
   LSTR MSG_VELOCITY                       = _UxGT("V√¢Ã£n t√¥ÕÅc");                              // velocity
-  LSTR MSG_VMAX_A                         = _UxGT("Vƒëa") LCD_STR_A;                        // Vmax
-  LSTR MSG_VMAX_B                         = _UxGT("Vƒëa") LCD_STR_B;
-  LSTR MSG_VMAX_C                         = _UxGT("Vƒëa") LCD_STR_C;
-  LSTR MSG_VMAX_I                         = _UxGT("Vƒëa") LCD_STR_I;
-  LSTR MSG_VMAX_J                         = _UxGT("Vƒëa") LCD_STR_J;
-  LSTR MSG_VMAX_K                         = _UxGT("Vƒëa") LCD_STR_K;
-  LSTR MSG_VMAX_E                         = _UxGT("Vƒëa") LCD_STR_E;
+  LSTR MSG_VMAX_A                         = _UxGT("Vƒëa") STR_A;                        // Vmax
+  LSTR MSG_VMAX_B                         = _UxGT("Vƒëa") STR_B;
+  LSTR MSG_VMAX_C                         = _UxGT("Vƒëa") STR_C;
+  LSTR MSG_VMAX_I                         = _UxGT("Vƒëa") STR_I;
+  LSTR MSG_VMAX_J                         = _UxGT("Vƒëa") STR_J;
+  LSTR MSG_VMAX_K                         = _UxGT("Vƒëa") STR_K;
+  LSTR MSG_VMAX_E                         = _UxGT("Vƒëa") STR_E;
   LSTR MSG_VMAX_EN                        = _UxGT("Vƒëa *");
   LSTR MSG_VMIN                           = _UxGT("Vthi·ªÉu");                               // Vmin
   LSTR MSG_VTRAV_MIN                      = _UxGT("Vchuy·ªÉn thi·ªÉu");                        // VTrav min
   LSTR MSG_ACCELERATION                   = _UxGT("S·ª± tƒÉng t·ªëc");                          // Acceleration
-  LSTR MSG_AMAX_A                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_A;                // Amax
-  LSTR MSG_AMAX_B                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_B;
-  LSTR MSG_AMAX_C                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_C;
-  LSTR MSG_AMAX_I                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_I;                // Amax
-  LSTR MSG_AMAX_J                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_J;
-  LSTR MSG_AMAX_K                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_K;
-  LSTR MSG_AMAX_E                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_E;
+  LSTR MSG_AMAX_A                         = _UxGT("TƒÉng t·ªëc ca") STR_A;                // Amax
+  LSTR MSG_AMAX_B                         = _UxGT("TƒÉng t·ªëc ca") STR_B;
+  LSTR MSG_AMAX_C                         = _UxGT("TƒÉng t·ªëc ca") STR_C;
+  LSTR MSG_AMAX_I                         = _UxGT("TƒÉng t·ªëc ca") STR_I;                // Amax
+  LSTR MSG_AMAX_J                         = _UxGT("TƒÉng t·ªëc ca") STR_J;
+  LSTR MSG_AMAX_K                         = _UxGT("TƒÉng t·ªëc ca") STR_K;
+  LSTR MSG_AMAX_E                         = _UxGT("TƒÉng t·ªëc ca") STR_E;
   LSTR MSG_AMAX_EN                        = _UxGT("TƒÉng t·ªëc ca *");
   LSTR MSG_A_RETRACT                      = _UxGT("TT-R√∫t");                               // A-retract
   LSTR MSG_A_TRAVEL                       = _UxGT("TT-Chuy·ªÉn");                            // A-travel
   LSTR MSG_STEPS_PER_MM                   = _UxGT("B∆∞∆°ÕÅc/mm");                              // Steps
-  LSTR MSG_A_STEPS                        = _UxGT("B∆∞·ªõc") LCD_STR_A _UxGT("/mm");          // Steps/mm
-  LSTR MSG_B_STEPS                        = _UxGT("B∆∞·ªõc") LCD_STR_B _UxGT("/mm");
-  LSTR MSG_C_STEPS                        = _UxGT("B∆∞·ªõc") LCD_STR_C _UxGT("/mm");
-  LSTR MSG_I_STEPS                        = _UxGT("B∆∞·ªõc") LCD_STR_I _UxGT("/mm");          // Steps/mm
-  LSTR MSG_J_STEPS                        = _UxGT("B∆∞·ªõc") LCD_STR_J _UxGT("/mm");
-  LSTR MSG_K_STEPS                        = _UxGT("B∆∞·ªõc") LCD_STR_K _UxGT("/mm");
+  LSTR MSG_A_STEPS                        = _UxGT("B∆∞·ªõc") STR_A _UxGT("/mm");          // Steps/mm
+  LSTR MSG_B_STEPS                        = _UxGT("B∆∞·ªõc") STR_B _UxGT("/mm");
+  LSTR MSG_C_STEPS                        = _UxGT("B∆∞·ªõc") STR_C _UxGT("/mm");
+  LSTR MSG_I_STEPS                        = _UxGT("B∆∞·ªõc") STR_I _UxGT("/mm");          // Steps/mm
+  LSTR MSG_J_STEPS                        = _UxGT("B∆∞·ªõc") STR_J _UxGT("/mm");
+  LSTR MSG_K_STEPS                        = _UxGT("B∆∞·ªõc") STR_K _UxGT("/mm");
   LSTR MSG_E_STEPS                        = _UxGT("B∆∞·ªõcE/mm");
   LSTR MSG_EN_STEPS                       = _UxGT("B∆∞·ªõc */mm");
   LSTR MSG_TEMPERATURE                    = _UxGT("Nhi·ªát ƒë·ªô");                             // Temperature
@@ -400,12 +400,12 @@ namespace Language_vi {
   LSTR MSG_INFO_MAX_TEMP                  = _UxGT("Nhi·ªát ƒë·ªô t·ªëi ƒëa");                      // Max temp
   LSTR MSG_INFO_PSU                       = _UxGT("B·ªô ngu·ªìn");                             // PSU
   LSTR MSG_DRIVE_STRENGTH                 = _UxGT("S·ª©c m·∫°nh ·ªï ƒëƒ©a");                       // Drive Strength
-  LSTR MSG_DAC_PERCENT_A                  = LCD_STR_A _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");        // X Driver %
-  LSTR MSG_DAC_PERCENT_B                  = LCD_STR_B _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  LSTR MSG_DAC_PERCENT_C                  = LCD_STR_C _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  LSTR MSG_DAC_PERCENT_I                  = LCD_STR_I _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  LSTR MSG_DAC_PERCENT_J                  = LCD_STR_J _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  LSTR MSG_DAC_PERCENT_K                  = LCD_STR_K _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  LSTR MSG_DAC_PERCENT_A                  = STR_A _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");        // X Driver %
+  LSTR MSG_DAC_PERCENT_B                  = STR_B _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  LSTR MSG_DAC_PERCENT_C                  = STR_C _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  LSTR MSG_DAC_PERCENT_I                  = STR_I _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  LSTR MSG_DAC_PERCENT_J                  = STR_J _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  LSTR MSG_DAC_PERCENT_K                  = STR_K _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
   LSTR MSG_DAC_PERCENT_E                  = _UxGT("E % tr√¨nh ƒëi·ªÅu khi·ªÉn");
   LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("Ghi DAC EEPROM");                       // DAC EEPROM Write
   LSTR MSG_FILAMENT_CHANGE_HEADER_PAUSE   = _UxGT("In t·∫°m d·ª´ng");                          // PRINT PAUSED

commit d58daaa42c8e238b3e1eba4041ca5bcfa497c61f
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Tue Dec 28 00:23:50 2021 -0500

    üö∏ DWIN Enhanced improve, fix, and extend (#23240)
    
    - Offset icon change to show mesh leveling status
    - Reset extruder position when enter to Move menu
    - New live end-stop diagnostic page
    - Editable firmware retracts settings for Tune and filament settings menu
    - Print Statistics page accessible from the Advanced Settings menu
    - Reset printer draws the boot image
    - Adds individual axes homing menu
    - Adds probe deploy/stow to Probe Settings menu
    - Updates lock screen
    - Rebuilds main buttons to support text caption in other languages
    - Increases probe offset limits to 60 mm
    - Fix M303 PID variable update
    - Fix Resume/Pause button update
    - Fix redraw of print done
    - Fix very large file name bug
    - Fix bug in bed manual leveling

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index ae0babbf8b..a419ddee56 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -383,7 +383,7 @@ namespace Language_vi {
   LSTR MSG_INFO_PROTOCOL                  = _UxGT("Giao Th·ª©c");                            // Protocol
   LSTR MSG_CASE_LIGHT                     = _UxGT("ƒê√®n Khu√¥ng");                           // Case light
   LSTR MSG_CASE_LIGHT_BRIGHTNESS          = _UxGT("ƒê·ªô S√°ng");                              // Light Brightness
-  #if LCD_WIDTH >= 20
+  #if LCD_WIDTH >= 20 || HAS_DWIN_E3V2
     LSTR MSG_INFO_PRINT_COUNT             = _UxGT("S·ªë In");                                // Print Count
     LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("ƒê√£ ho√†n th√†nh");
     LSTR MSG_INFO_PRINT_TIME              = _UxGT("T√¥Ãâng s·ªë th·ªùi gian in");                // Total print time

commit 1d80464ba77bc576426f15af28a633bf48d769ad
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 27 21:15:58 2021 -0500

    üé® Define HAS_PREHEAT conditional

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 9a4ef464b5..ae0babbf8b 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -64,7 +64,7 @@ namespace Language_vi {
   LSTR MSG_SET_HOME_OFFSETS               = _UxGT("ƒê·∫∑t b√π ƒë·∫Øp nh√†");                       // Set home offsets
   LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("B√π ƒë·∫Øp ƒë∆∞·ª£c √°p d·ª•ng");                  // Offsets applied
   LSTR MSG_SET_ORIGIN                     = _UxGT("ƒê·∫∑t ngu·ªìn g·ªëc");                        // Set origin
-  #if PREHEAT_COUNT
+  #if HAS_PREHEAT
     LSTR MSG_PREHEAT_1                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc");      // Preheat
     LSTR MSG_PREHEAT_1_H                  = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ~");    // Preheat
     LSTR MSG_PREHEAT_1_END                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu");
@@ -126,7 +126,7 @@ namespace Language_vi {
   LSTR MSG_UBL_DONE_EDITING_MESH          = _UxGT("Ch·ªânh s·ª≠a xong l∆∞·ªõi");                  // Done Editing Mesh
   LSTR MSG_UBL_BUILD_CUSTOM_MESH          = _UxGT("X√¢y d·ª±ng l∆∞·ªõi t·ª± ch·ªçn");                // Build Custom Mesh
   LSTR MSG_UBL_BUILD_MESH_MENU            = _UxGT("X√¢y d·ª±ng l∆∞·ªõi");                        // Build Mesh
-  #if PREHEAT_COUNT
+  #if HAS_PREHEAT
     LSTR MSG_UBL_BUILD_MESH_M             = _UxGT("X√¢y d·ª±ng l∆∞·ªõi ($)");
     LSTR MSG_UBL_VALIDATE_MESH_M          = _UxGT("Th·∫©m tra l∆∞·ªõi ($)");
   #endif

commit c1d7e234e1aba1ecc91cfc77d17d38b67618c315
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Sep 19 18:40:56 2021 -0500

    üåê Reduce language file sizes

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 9ee93a56bb..9a4ef464b5 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -30,427 +30,427 @@
 namespace Language_vi {
   using namespace Language_en; // Inherit undefined strings from English
 
-  constexpr uint8_t    CHARSIZE                            = 2;
-  PROGMEM Language_Str LANGUAGE                            = _UxGT("Vietnamese");
+  constexpr uint8_t CHARSIZE              = 2;
+  LSTR LANGUAGE                           = _UxGT("Vietnamese");
 
-  PROGMEM Language_Str WELCOME_MSG                         = MACHINE_NAME _UxGT(" S·∫µn s√†ng.");              // Ready
-  PROGMEM Language_Str MSG_BACK                            = _UxGT("Tr·ªü l·∫°i");                              // Back
-  PROGMEM Language_Str MSG_MEDIA_ABORTING                  = _UxGT("ƒêang h·ªßy b·ªè...");
-  PROGMEM Language_Str MSG_MEDIA_INSERTED                  = _UxGT("Ph∆∞∆°ng ti·ªán ƒë∆∞·ª£c c·∫Øm v√†o");             // Media inserted
-  PROGMEM Language_Str MSG_MEDIA_REMOVED                   = _UxGT("Ph∆∞∆°ng ti·ªán ƒë∆∞·ª£c r√∫t ra");
-  PROGMEM Language_Str MSG_MEDIA_WAITING                   = _UxGT("Ch·ªù ƒë·ª£i ph∆∞∆°ng ti·ªán");
-  PROGMEM Language_Str MSG_MEDIA_READ_ERROR                = _UxGT("L·ªói ƒë·ªçc ph∆∞∆°ng ti·ªán");
-  PROGMEM Language_Str MSG_MEDIA_USB_REMOVED               = _UxGT("USB ƒë∆∞·ª£c r√∫t ra");
-  PROGMEM Language_Str MSG_MEDIA_USB_FAILED                = _UxGT("USB kh·ªüi th·∫•t b·∫°i");
-  PROGMEM Language_Str MSG_LCD_ENDSTOPS                    = _UxGT("C√¥ng t·∫Øc");                             // Endstops - c√¥ng t·∫Øc h√†nh tr√¨nh
-  PROGMEM Language_Str MSG_LCD_SOFT_ENDSTOPS               = _UxGT("C√¥ng t·∫Øc m·ªÅm");                         // soft Endstops
-  PROGMEM Language_Str MSG_MAIN                            = _UxGT("Ch√≠nh");                                // Main
-  PROGMEM Language_Str MSG_ADVANCED_SETTINGS               = _UxGT("Thi·∫øt l·∫≠p c·∫•p cao");                    // Advanced Settings
-  PROGMEM Language_Str MSG_CONFIGURATION                   = _UxGT("C·∫•u h√¨nh");                             // Configuration
-  PROGMEM Language_Str MSG_RUN_AUTO_FILES                  = _UxGT("Kh·ªüi ch·∫°y t·ª± ƒë·ªông");                    // Autostart
-  PROGMEM Language_Str MSG_DISABLE_STEPPERS                = _UxGT("T·∫Øt ƒë·ªông c∆° b∆∞·ªõc");                     // Disable steppers
-  PROGMEM Language_Str MSG_DEBUG_MENU                      = _UxGT("Menu g·ª° l·ªói");                          // Debug Menu
-  PROGMEM Language_Str MSG_PROGRESS_BAR_TEST               = _UxGT("Ki·ªÉm tra ti·∫øn ƒë·ªô");                     // Progress bar test
-  PROGMEM Language_Str MSG_AUTO_HOME                       = _UxGT("V·ªÅ nh√† t·ª± ƒë·ªông");                       // Auto home
-  PROGMEM Language_Str MSG_AUTO_HOME_X                     = _UxGT("V·ªÅ nh√† X");                             // home X
-  PROGMEM Language_Str MSG_AUTO_HOME_Y                     = _UxGT("V·ªÅ nh√† Y");                             // home Y
-  PROGMEM Language_Str MSG_AUTO_HOME_Z                     = _UxGT("V·ªÅ nh√† Z");                             // home Z
-  PROGMEM Language_Str MSG_AUTO_Z_ALIGN                    = _UxGT("Ch·ªânh canh Z t·ª± ƒë·ªông");
-  PROGMEM Language_Str MSG_LEVEL_BED_HOMING                = _UxGT("ƒêang v·ªÅ nh√† XYZ");                      // Homing XYZ
-  PROGMEM Language_Str MSG_LEVEL_BED_WAITING               = _UxGT("Nh·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu");                      // Click to Begin
-  PROGMEM Language_Str MSG_LEVEL_BED_NEXT_POINT            = _UxGT("ƒêi·ªÉm ti·∫øp theo");                       // Next Point
-  PROGMEM Language_Str MSG_LEVEL_BED_DONE                  = _UxGT("San l·∫•p ƒë∆∞·ª£c ho√†n th√†nh");              // Leveling Done!
-  PROGMEM Language_Str MSG_Z_FADE_HEIGHT                   = _UxGT("Chi·ªÅu cao m·ªù d·∫ßn");                     // Fade Height
-  PROGMEM Language_Str MSG_SET_HOME_OFFSETS                = _UxGT("ƒê·∫∑t b√π ƒë·∫Øp nh√†");                       // Set home offsets
-  PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("B√π ƒë·∫Øp ƒë∆∞·ª£c √°p d·ª•ng");                  // Offsets applied
-  PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("ƒê·∫∑t ngu·ªìn g·ªëc");                        // Set origin
+  LSTR WELCOME_MSG                        = MACHINE_NAME _UxGT(" S·∫µn s√†ng.");              // Ready
+  LSTR MSG_BACK                           = _UxGT("Tr·ªü l·∫°i");                              // Back
+  LSTR MSG_MEDIA_ABORTING                 = _UxGT("ƒêang h·ªßy b·ªè...");
+  LSTR MSG_MEDIA_INSERTED                 = _UxGT("Ph∆∞∆°ng ti·ªán ƒë∆∞·ª£c c·∫Øm v√†o");             // Media inserted
+  LSTR MSG_MEDIA_REMOVED                  = _UxGT("Ph∆∞∆°ng ti·ªán ƒë∆∞·ª£c r√∫t ra");
+  LSTR MSG_MEDIA_WAITING                  = _UxGT("Ch·ªù ƒë·ª£i ph∆∞∆°ng ti·ªán");
+  LSTR MSG_MEDIA_READ_ERROR               = _UxGT("L·ªói ƒë·ªçc ph∆∞∆°ng ti·ªán");
+  LSTR MSG_MEDIA_USB_REMOVED              = _UxGT("USB ƒë∆∞·ª£c r√∫t ra");
+  LSTR MSG_MEDIA_USB_FAILED               = _UxGT("USB kh·ªüi th·∫•t b·∫°i");
+  LSTR MSG_LCD_ENDSTOPS                   = _UxGT("C√¥ng t·∫Øc");                             // Endstops - c√¥ng t·∫Øc h√†nh tr√¨nh
+  LSTR MSG_LCD_SOFT_ENDSTOPS              = _UxGT("C√¥ng t·∫Øc m·ªÅm");                         // soft Endstops
+  LSTR MSG_MAIN                           = _UxGT("Ch√≠nh");                                // Main
+  LSTR MSG_ADVANCED_SETTINGS              = _UxGT("Thi·∫øt l·∫≠p c·∫•p cao");                    // Advanced Settings
+  LSTR MSG_CONFIGURATION                  = _UxGT("C·∫•u h√¨nh");                             // Configuration
+  LSTR MSG_RUN_AUTO_FILES                 = _UxGT("Kh·ªüi ch·∫°y t·ª± ƒë·ªông");                    // Autostart
+  LSTR MSG_DISABLE_STEPPERS               = _UxGT("T·∫Øt ƒë·ªông c∆° b∆∞·ªõc");                     // Disable steppers
+  LSTR MSG_DEBUG_MENU                     = _UxGT("Menu g·ª° l·ªói");                          // Debug Menu
+  LSTR MSG_PROGRESS_BAR_TEST              = _UxGT("Ki·ªÉm tra ti·∫øn ƒë·ªô");                     // Progress bar test
+  LSTR MSG_AUTO_HOME                      = _UxGT("V·ªÅ nh√† t·ª± ƒë·ªông");                       // Auto home
+  LSTR MSG_AUTO_HOME_X                    = _UxGT("V·ªÅ nh√† X");                             // home X
+  LSTR MSG_AUTO_HOME_Y                    = _UxGT("V·ªÅ nh√† Y");                             // home Y
+  LSTR MSG_AUTO_HOME_Z                    = _UxGT("V·ªÅ nh√† Z");                             // home Z
+  LSTR MSG_AUTO_Z_ALIGN                   = _UxGT("Ch·ªânh canh Z t·ª± ƒë·ªông");
+  LSTR MSG_LEVEL_BED_HOMING               = _UxGT("ƒêang v·ªÅ nh√† XYZ");                      // Homing XYZ
+  LSTR MSG_LEVEL_BED_WAITING              = _UxGT("Nh·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu");                      // Click to Begin
+  LSTR MSG_LEVEL_BED_NEXT_POINT           = _UxGT("ƒêi·ªÉm ti·∫øp theo");                       // Next Point
+  LSTR MSG_LEVEL_BED_DONE                 = _UxGT("San l·∫•p ƒë∆∞·ª£c ho√†n th√†nh");              // Leveling Done!
+  LSTR MSG_Z_FADE_HEIGHT                  = _UxGT("Chi·ªÅu cao m·ªù d·∫ßn");                     // Fade Height
+  LSTR MSG_SET_HOME_OFFSETS               = _UxGT("ƒê·∫∑t b√π ƒë·∫Øp nh√†");                       // Set home offsets
+  LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("B√π ƒë·∫Øp ƒë∆∞·ª£c √°p d·ª•ng");                  // Offsets applied
+  LSTR MSG_SET_ORIGIN                     = _UxGT("ƒê·∫∑t ngu·ªìn g·ªëc");                        // Set origin
   #if PREHEAT_COUNT
-    PROGMEM Language_Str MSG_PREHEAT_1                     = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc");      // Preheat
-    PROGMEM Language_Str MSG_PREHEAT_1_H                   = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ~");    // Preheat
-    PROGMEM Language_Str MSG_PREHEAT_1_END                 = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu");
-    PROGMEM Language_Str MSG_PREHEAT_1_END_E               = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ~");
-    PROGMEM Language_Str MSG_PREHEAT_1_ALL                 = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" T·∫•t c·∫£");     // all
-    PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY             = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" B√†n");        // bed -- using vietnamese term for 'table' instead
-    PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS            = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" C·∫•u h√¨nh");   // conf
+    LSTR MSG_PREHEAT_1                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc");      // Preheat
+    LSTR MSG_PREHEAT_1_H                  = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ~");    // Preheat
+    LSTR MSG_PREHEAT_1_END                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu");
+    LSTR MSG_PREHEAT_1_END_E              = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ~");
+    LSTR MSG_PREHEAT_1_ALL                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" T·∫•t c·∫£");     // all
+    LSTR MSG_PREHEAT_1_BEDONLY            = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" B√†n");        // bed -- using vietnamese term for 'table' instead
+    LSTR MSG_PREHEAT_1_SETTINGS           = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" C·∫•u h√¨nh");   // conf
 
-    PROGMEM Language_Str MSG_PREHEAT_M                     = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc");      // Preheat
-    PROGMEM Language_Str MSG_PREHEAT_M_H                   = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc ~");    // Preheat
-    PROGMEM Language_Str MSG_PREHEAT_M_END                 = _UxGT("L√†m n√≥ng $ ƒê·∫ßu");
-    PROGMEM Language_Str MSG_PREHEAT_M_END_E               = _UxGT("L√†m n√≥ng $ ƒê·∫ßu ~");
-    PROGMEM Language_Str MSG_PREHEAT_M_ALL                 = _UxGT("L√†m n√≥ng $ T·∫•t c·∫£");     // all
-    PROGMEM Language_Str MSG_PREHEAT_M_BEDONLY             = _UxGT("L√†m n√≥ng $ B√†n");        // bed -- using vietnamese term for 'table' instead
-    PROGMEM Language_Str MSG_PREHEAT_M_SETTINGS            = _UxGT("L√†m n√≥ng $ C·∫•u h√¨nh");   // conf
+    LSTR MSG_PREHEAT_M                    = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc");      // Preheat
+    LSTR MSG_PREHEAT_M_H                  = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc ~");    // Preheat
+    LSTR MSG_PREHEAT_M_END                = _UxGT("L√†m n√≥ng $ ƒê·∫ßu");
+    LSTR MSG_PREHEAT_M_END_E              = _UxGT("L√†m n√≥ng $ ƒê·∫ßu ~");
+    LSTR MSG_PREHEAT_M_ALL                = _UxGT("L√†m n√≥ng $ T·∫•t c·∫£");     // all
+    LSTR MSG_PREHEAT_M_BEDONLY            = _UxGT("L√†m n√≥ng $ B√†n");        // bed -- using vietnamese term for 'table' instead
+    LSTR MSG_PREHEAT_M_SETTINGS           = _UxGT("L√†m n√≥ng $ C·∫•u h√¨nh");   // conf
   #endif
-  PROGMEM Language_Str MSG_PREHEAT_CUSTOM                  = _UxGT("S∆∞Ã£ n√≥ng tr∆∞·ªõc t·ª± ch·ªçn");                // Preheat Custom
-  PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("Ngu·ªôi xu·ªëng");                          // Cooldown
-  PROGMEM Language_Str MSG_SWITCH_PS_ON                    = _UxGT("B·∫≠t ngu·ªìn");                            // Switch power on
-  PROGMEM Language_Str MSG_SWITCH_PS_OFF                   = _UxGT("T·∫Øt ngu·ªìn");                            // Switch power off
-  PROGMEM Language_Str MSG_EXTRUDE                         = _UxGT("√âp ƒë√πn");                               // Extrude
-  PROGMEM Language_Str MSG_RETRACT                         = _UxGT("R√∫t l·∫°i");                              // Retract
-  PROGMEM Language_Str MSG_MOVE_AXIS                       = _UxGT("Di chuy·ªÉn tr·ª•c");                       // Move axis
-  PROGMEM Language_Str MSG_BED_LEVELING                    = _UxGT("San L·∫•p B√†n");                          // Bed Leveling
-  PROGMEM Language_Str MSG_LEVEL_BED                       = _UxGT("LaÕÄm bƒÉÕÄng m·∫∑t b√†n");                     // Level bed
-  PROGMEM Language_Str MSG_BED_TRAMMING                    = _UxGT("LaÕÄm bƒÉÕÄng g√≥c b√†n");                     // Level corners
-  PROGMEM Language_Str MSG_NEXT_CORNER                     = _UxGT("G√≥c ti·∫øp theo");                        // Next corner
-  PROGMEM Language_Str MSG_EDITING_STOPPED                 = _UxGT("Ch·ªânh l∆∞·ªõi ƒë√£ d·ª´ng");                   // Mesh Editing Stopped
-  PROGMEM Language_Str MSG_MESH_X                          = _UxGT("MuÃ£c luÃ£c X");                            // Index X
-  PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("MuÃ£c luÃ£c Y");
-  PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Gi√° tr·ªã Z");                            // Z Value
-  PROGMEM Language_Str MSG_CUSTOM_COMMANDS                 = _UxGT("C√°c l·ªánh t·ª± ch·ªçn");                     // Custom Commands
-  PROGMEM Language_Str MSG_UBL_DOING_G29                   = _UxGT("ƒêang ch·∫°y G29");                        // Doing G29
-  PROGMEM Language_Str MSG_UBL_TOOLS                       = _UxGT("C√¥ng c·ª• UBL");                          // UBL tools
-  PROGMEM Language_Str MSG_UBL_LEVEL_BED                   = _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t (UBL)");         // Unified Bed Leveling
-  PROGMEM Language_Str MSG_IDEX_MENU                       = _UxGT("ch·∫ø ƒë·ªô IDEX");                          // IDEX Mode
-  PROGMEM Language_Str MSG_IDEX_MODE_AUTOPARK              = _UxGT("ƒê√¢Ã£u t·ª± ƒë·ªông");                          // Auto-Park
-  PROGMEM Language_Str MSG_IDEX_MODE_DUPLICATE             = _UxGT("S∆∞Ã£ g√¢ÕÅp ƒë√¥i");                           // Duplication
-  PROGMEM Language_Str MSG_IDEX_MODE_SCALED_COPY           = _UxGT("B·∫£n sao thu nh·ªè");
-  PROGMEM Language_Str MSG_IDEX_MODE_FULL_CTRL             = _UxGT("To√†n quy·ªÅn ƒëi·ªÅu khi·ªÉn");                // Full control
-  PROGMEM Language_Str MSG_IDEX_X_OFFSET                   = _UxGT("ƒê·∫ßu phun X nhiÕÄ");                       // 2nd nozzle X
-  PROGMEM Language_Str MSG_IDEX_Y_OFFSET                   = _UxGT("ƒê·∫ßu phun Y nhiÕÄ");
-  PROGMEM Language_Str MSG_IDEX_Z_OFFSET                   = _UxGT("ƒê·∫ßu phun Z nhiÕÄ");
-  PROGMEM Language_Str MSG_IDEX_SAVE_OFFSETS               = _UxGT("L∆∞u b√π ƒë·∫Øp");                           // Save offsets
-  PROGMEM Language_Str MSG_UBL_MANUAL_MESH                 = _UxGT("T·ª± x√¢y d·ª±ng l∆∞·ªõi");                     // Manually Build Mesh
-  PROGMEM Language_Str MSG_UBL_BC_INSERT                   = _UxGT("ƒêƒÉÃ£t ch√™m v√† ƒëo");                       // Place shim & measure
-  PROGMEM Language_Str MSG_UBL_BC_INSERT2                  = _UxGT("ƒêo");                                   // Measure
-  PROGMEM Language_Str MSG_UBL_BC_REMOVE                   = _UxGT("ThaÕÅo v√† ƒëo b√†n");                       // Remove & measure bed
-  PROGMEM Language_Str MSG_UBL_MOVING_TO_NEXT              = _UxGT("Chuy·ªÉn sang ti·∫øp theo");                // moving to next
-  PROGMEM Language_Str MSG_UBL_ACTIVATE_MESH               = _UxGT("B·∫≠t UBL");
-  PROGMEM Language_Str MSG_UBL_DEACTIVATE_MESH             = _UxGT("T·∫Øt UBL");
-  PROGMEM Language_Str MSG_UBL_SET_TEMP_BED                = _UxGT("Nhi·ªát ƒë·ªô b√†n");                         // Bed Temp
-  PROGMEM Language_Str MSG_UBL_BED_TEMP_CUSTOM             = _UxGT("Bed Temp");
-  PROGMEM Language_Str MSG_UBL_SET_TEMP_HOTEND             = _UxGT("Nhi·ªát ƒë·ªô ƒë·∫ßu phun");                    // Hotend Temp
-  PROGMEM Language_Str MSG_UBL_HOTEND_TEMP_CUSTOM          = _UxGT("Hotend Temp");
-  PROGMEM Language_Str MSG_UBL_MESH_EDIT                   = _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi");                       // Mesh Edit
-  PROGMEM Language_Str MSG_UBL_EDIT_CUSTOM_MESH            = _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi t·ª± ch·ªçn");               // Edit Custom Mesh
-  PROGMEM Language_Str MSG_UBL_FINE_TUNE_MESH              = _UxGT("Ch·ªânh l∆∞·ªõi ch√≠nh x√°c");                 // Fine tuning mesh
-  PROGMEM Language_Str MSG_UBL_DONE_EDITING_MESH           = _UxGT("Ch·ªânh s·ª≠a xong l∆∞·ªõi");                  // Done Editing Mesh
-  PROGMEM Language_Str MSG_UBL_BUILD_CUSTOM_MESH           = _UxGT("X√¢y d·ª±ng l∆∞·ªõi t·ª± ch·ªçn");                // Build Custom Mesh
-  PROGMEM Language_Str MSG_UBL_BUILD_MESH_MENU             = _UxGT("X√¢y d·ª±ng l∆∞·ªõi");                        // Build Mesh
+  LSTR MSG_PREHEAT_CUSTOM                 = _UxGT("S∆∞Ã£ n√≥ng tr∆∞·ªõc t·ª± ch·ªçn");                // Preheat Custom
+  LSTR MSG_COOLDOWN                       = _UxGT("Ngu·ªôi xu·ªëng");                          // Cooldown
+  LSTR MSG_SWITCH_PS_ON                   = _UxGT("B·∫≠t ngu·ªìn");                            // Switch power on
+  LSTR MSG_SWITCH_PS_OFF                  = _UxGT("T·∫Øt ngu·ªìn");                            // Switch power off
+  LSTR MSG_EXTRUDE                        = _UxGT("√âp ƒë√πn");                               // Extrude
+  LSTR MSG_RETRACT                        = _UxGT("R√∫t l·∫°i");                              // Retract
+  LSTR MSG_MOVE_AXIS                      = _UxGT("Di chuy·ªÉn tr·ª•c");                       // Move axis
+  LSTR MSG_BED_LEVELING                   = _UxGT("San L·∫•p B√†n");                          // Bed Leveling
+  LSTR MSG_LEVEL_BED                      = _UxGT("LaÕÄm bƒÉÕÄng m·∫∑t b√†n");                     // Level bed
+  LSTR MSG_BED_TRAMMING                   = _UxGT("LaÕÄm bƒÉÕÄng g√≥c b√†n");                     // Level corners
+  LSTR MSG_NEXT_CORNER                    = _UxGT("G√≥c ti·∫øp theo");                        // Next corner
+  LSTR MSG_EDITING_STOPPED                = _UxGT("Ch·ªânh l∆∞·ªõi ƒë√£ d·ª´ng");                   // Mesh Editing Stopped
+  LSTR MSG_MESH_X                         = _UxGT("MuÃ£c luÃ£c X");                            // Index X
+  LSTR MSG_MESH_Y                         = _UxGT("MuÃ£c luÃ£c Y");
+  LSTR MSG_MESH_EDIT_Z                    = _UxGT("Gi√° tr·ªã Z");                            // Z Value
+  LSTR MSG_CUSTOM_COMMANDS                = _UxGT("C√°c l·ªánh t·ª± ch·ªçn");                     // Custom Commands
+  LSTR MSG_UBL_DOING_G29                  = _UxGT("ƒêang ch·∫°y G29");                        // Doing G29
+  LSTR MSG_UBL_TOOLS                      = _UxGT("C√¥ng c·ª• UBL");                          // UBL tools
+  LSTR MSG_UBL_LEVEL_BED                  = _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t (UBL)");         // Unified Bed Leveling
+  LSTR MSG_IDEX_MENU                      = _UxGT("ch·∫ø ƒë·ªô IDEX");                          // IDEX Mode
+  LSTR MSG_IDEX_MODE_AUTOPARK             = _UxGT("ƒê√¢Ã£u t·ª± ƒë·ªông");                          // Auto-Park
+  LSTR MSG_IDEX_MODE_DUPLICATE            = _UxGT("S∆∞Ã£ g√¢ÕÅp ƒë√¥i");                           // Duplication
+  LSTR MSG_IDEX_MODE_SCALED_COPY          = _UxGT("B·∫£n sao thu nh·ªè");
+  LSTR MSG_IDEX_MODE_FULL_CTRL            = _UxGT("To√†n quy·ªÅn ƒëi·ªÅu khi·ªÉn");                // Full control
+  LSTR MSG_IDEX_X_OFFSET                  = _UxGT("ƒê·∫ßu phun X nhiÕÄ");                       // 2nd nozzle X
+  LSTR MSG_IDEX_Y_OFFSET                  = _UxGT("ƒê·∫ßu phun Y nhiÕÄ");
+  LSTR MSG_IDEX_Z_OFFSET                  = _UxGT("ƒê·∫ßu phun Z nhiÕÄ");
+  LSTR MSG_IDEX_SAVE_OFFSETS              = _UxGT("L∆∞u b√π ƒë·∫Øp");                           // Save offsets
+  LSTR MSG_UBL_MANUAL_MESH                = _UxGT("T·ª± x√¢y d·ª±ng l∆∞·ªõi");                     // Manually Build Mesh
+  LSTR MSG_UBL_BC_INSERT                  = _UxGT("ƒêƒÉÃ£t ch√™m v√† ƒëo");                       // Place shim & measure
+  LSTR MSG_UBL_BC_INSERT2                 = _UxGT("ƒêo");                                   // Measure
+  LSTR MSG_UBL_BC_REMOVE                  = _UxGT("ThaÕÅo v√† ƒëo b√†n");                       // Remove & measure bed
+  LSTR MSG_UBL_MOVING_TO_NEXT             = _UxGT("Chuy·ªÉn sang ti·∫øp theo");                // moving to next
+  LSTR MSG_UBL_ACTIVATE_MESH              = _UxGT("B·∫≠t UBL");
+  LSTR MSG_UBL_DEACTIVATE_MESH            = _UxGT("T·∫Øt UBL");
+  LSTR MSG_UBL_SET_TEMP_BED               = _UxGT("Nhi·ªát ƒë·ªô b√†n");                         // Bed Temp
+  LSTR MSG_UBL_BED_TEMP_CUSTOM            = _UxGT("Bed Temp");
+  LSTR MSG_UBL_SET_TEMP_HOTEND            = _UxGT("Nhi·ªát ƒë·ªô ƒë·∫ßu phun");                    // Hotend Temp
+  LSTR MSG_UBL_HOTEND_TEMP_CUSTOM         = _UxGT("Hotend Temp");
+  LSTR MSG_UBL_MESH_EDIT                  = _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi");                       // Mesh Edit
+  LSTR MSG_UBL_EDIT_CUSTOM_MESH           = _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi t·ª± ch·ªçn");               // Edit Custom Mesh
+  LSTR MSG_UBL_FINE_TUNE_MESH             = _UxGT("Ch·ªânh l∆∞·ªõi ch√≠nh x√°c");                 // Fine tuning mesh
+  LSTR MSG_UBL_DONE_EDITING_MESH          = _UxGT("Ch·ªânh s·ª≠a xong l∆∞·ªõi");                  // Done Editing Mesh
+  LSTR MSG_UBL_BUILD_CUSTOM_MESH          = _UxGT("X√¢y d·ª±ng l∆∞·ªõi t·ª± ch·ªçn");                // Build Custom Mesh
+  LSTR MSG_UBL_BUILD_MESH_MENU            = _UxGT("X√¢y d·ª±ng l∆∞·ªõi");                        // Build Mesh
   #if PREHEAT_COUNT
-    PROGMEM Language_Str MSG_UBL_BUILD_MESH_M              = _UxGT("X√¢y d·ª±ng l∆∞·ªõi ($)");
-    PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M           = _UxGT("Th·∫©m tra l∆∞·ªõi ($)");
+    LSTR MSG_UBL_BUILD_MESH_M             = _UxGT("X√¢y d·ª±ng l∆∞·ªõi ($)");
+    LSTR MSG_UBL_VALIDATE_MESH_M          = _UxGT("Th·∫©m tra l∆∞·ªõi ($)");
   #endif
-  PROGMEM Language_Str MSG_UBL_BUILD_COLD_MESH             = _UxGT("X√¢y d·ª±ng l∆∞·ªõi l·∫°nh");                   // Build cold mesh
-  PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_ADJUST          = _UxGT("ƒêi·ªÅu ch·ªânh chi·ªÅu cao l∆∞·ªõi");            // Adjust Mesh Height
-  PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_AMOUNT          = _UxGT("S·ªë l∆∞·ª£ng chi·ªÅu cao");                   // Height Amount
-  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_MENU          = _UxGT("Th·∫©m tra l∆∞·ªõi");                        // Validate Mesh
-  PROGMEM Language_Str MSG_UBL_VALIDATE_CUSTOM_MESH        = _UxGT("Th·∫©m tra l∆∞·ªõi t·ª± ch·ªçn");                // validate custom mesh
-  PROGMEM Language_Str MSG_UBL_CONTINUE_MESH               = _UxGT("Ti·∫øp t·ª•c x√¢y l∆∞·ªõi b√†n");                // Continue Bed Mesh
-  PROGMEM Language_Str MSG_UBL_MESH_LEVELING               = _UxGT("ƒêang san l·∫•p l∆∞·ªõi");                    // Mesh Leveling
-  PROGMEM Language_Str MSG_UBL_3POINT_MESH_LEVELING        = _UxGT("ƒêang san l·∫•p 3-ƒëi·ªÉm");                  // 3-Point Leveling
-  PROGMEM Language_Str MSG_UBL_GRID_MESH_LEVELING          = _UxGT("ƒêang san l·∫•p l∆∞·ªõi ph·∫≥ng");              // Grid (planar) Mesh Leveling
-  PROGMEM Language_Str MSG_UBL_MESH_LEVEL                  = _UxGT("LaÕÄm bƒÉÕÄng l∆∞·ªõi");                        // Level Mesh
-  PROGMEM Language_Str MSG_UBL_SIDE_POINTS                 = _UxGT("ƒêi·ªÉm b√™n caÃ£nh");                        // Side Points
-  PROGMEM Language_Str MSG_UBL_MAP_TYPE                    = _UxGT("Lo·∫°i b·∫£n ƒë·ªì");                          // Map Type
-  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP                  = _UxGT("ƒê·∫ßu ra b·∫£n ƒë·ªì l∆∞·ªõi");                   // Output Mesh Map
-  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_HOST             = _UxGT("ƒê·∫ßu ra cho m√°y ch·ªß");                   // Output for Host
-  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_CSV              = _UxGT("ƒê·∫ßu ra cho CSV");                       // Output for CSV
-  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_BACKUP           = _UxGT("H·ªó tr·ª£ l∆∞·ªõi");                          // Off Printer Backup | backup mesh
-  PROGMEM Language_Str MSG_UBL_INFO_UBL                    = _UxGT("ƒê·∫ßu ra th√¥ng tin UBL");                 // Output UBL Info
-  PROGMEM Language_Str MSG_EDIT_MESH                       = _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi");                       // Edit mesh
-  PROGMEM Language_Str MSG_UBL_FILLIN_AMOUNT               = _UxGT("S·ªë l∆∞·ª£ng l√¢ÕÅp ƒë√¢ÕÄy");                     // Fill-in Amount
-  PROGMEM Language_Str MSG_UBL_MANUAL_FILLIN               = _UxGT("T·ª± l√¢ÕÅp ƒë√¢ÕÄy");                           // Manual Fill-in
-  PROGMEM Language_Str MSG_UBL_SMART_FILLIN                = _UxGT("L√¢ÕÅp ƒë√¢ÕÄy th√¥ng minh");                   // Smart Fill-in
-  PROGMEM Language_Str MSG_UBL_FILLIN_MESH                 = _UxGT("L∆∞·ªõi l√¢ÕÅp ƒë√¢ÕÄy");                         // Fill-in Mesh
-  PROGMEM Language_Str MSG_UBL_INVALIDATE_ALL              = _UxGT("BaÕÅc boÃâ t·∫•t c·∫£");                       // Invalidate All
-  PROGMEM Language_Str MSG_UBL_INVALIDATE_CLOSEST          = _UxGT("BaÕÅc boÃâ g·∫ßn nh·∫•t");                     // Invalidate Closest
-  PROGMEM Language_Str MSG_UBL_FINE_TUNE_ALL               = _UxGT("Ch·ªânh ch√≠nh x√°c t·∫•t c·∫£");               // Fine Tune ALl
-  PROGMEM Language_Str MSG_UBL_FINE_TUNE_CLOSEST           = _UxGT("Ch·ªânh ch√≠nh x√°c g·∫ßn nh·∫•t");             // Fine Tune Closest
-  PROGMEM Language_Str MSG_UBL_STORAGE_MESH_MENU           = _UxGT("L∆∞u tr·ªØ l∆∞·ªõi");                         // Mesh Storage
-  PROGMEM Language_Str MSG_UBL_STORAGE_SLOT                = _UxGT("Khe nh·ªõ");                              // Memory Slot
-  PROGMEM Language_Str MSG_UBL_LOAD_MESH                   = _UxGT("T·∫£i l∆∞·ªõi b√†n");                         // Load Bed Mesh
-  PROGMEM Language_Str MSG_UBL_SAVE_MESH                   = _UxGT("L∆∞u l∆∞·ªõi b√†n");                         // Save Bed Mesh
-  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("%i l∆∞·ªõi ƒë∆∞·ª£c n·∫°p");                     // Mesh %i loaded
-  PROGMEM Language_Str MSG_MESH_SAVED                      = _UxGT("%i l∆∞·ªõi ƒë√£ l∆∞u");
-  PROGMEM Language_Str MSG_NO_STORAGE                      = _UxGT("Kh√¥ng l∆∞u tr·ªØ");                        // No Storage
-  PROGMEM Language_Str MSG_UBL_SAVE_ERROR                  = _UxGT("ƒêi√™ÕÄu sai: L∆∞u UBL");                    // Err: UBL Save
-  PROGMEM Language_Str MSG_UBL_RESTORE_ERROR               = _UxGT("ƒêi√™ÕÄu Sai: Kh√¥i Ph·ª•c UBL");              // Err: UBL Restore
-  PROGMEM Language_Str MSG_UBL_Z_OFFSET_STOPPED            = _UxGT("ƒê·∫ßu D√≤-Z ƒê√£ Ng∆∞ÕÄng");                    // Z-Offset Stopped
-  PROGMEM Language_Str MSG_UBL_STEP_BY_STEP_MENU           = _UxGT("B∆∞·ªõc-T·ª´ng-B∆∞·ªõc UBL");                   // Step-By-Step UBL
-  PROGMEM Language_Str MSG_UBL_1_BUILD_COLD_MESH           = _UxGT("1.X√¢y d·ª±ng l∆∞·ªõi l·∫°nh");
-  PROGMEM Language_Str MSG_UBL_2_SMART_FILLIN              = _UxGT("2.L√¢ÕÅp ƒë√¢ÕÄy th√¥ng minh");
-  PROGMEM Language_Str MSG_UBL_3_VALIDATE_MESH_MENU        = _UxGT("3.Th·∫©m tra l∆∞·ªõi");
-  PROGMEM Language_Str MSG_UBL_4_FINE_TUNE_ALL             = _UxGT("4.Ch·ªânh ch√≠nh x√°c t·∫•t c·∫£");
-  PROGMEM Language_Str MSG_UBL_5_VALIDATE_MESH_MENU        = _UxGT("5.Th·∫©m tra l∆∞·ªõi");
-  PROGMEM Language_Str MSG_UBL_6_FINE_TUNE_ALL             = _UxGT("6.Ch·ªânh ch√≠nh x√°c t·∫•t c·∫£");
-  PROGMEM Language_Str MSG_UBL_7_SAVE_MESH                 = _UxGT("7.L∆∞u l∆∞·ªõi b√†n");
+  LSTR MSG_UBL_BUILD_COLD_MESH            = _UxGT("X√¢y d·ª±ng l∆∞·ªõi l·∫°nh");                   // Build cold mesh
+  LSTR MSG_UBL_MESH_HEIGHT_ADJUST         = _UxGT("ƒêi·ªÅu ch·ªânh chi·ªÅu cao l∆∞·ªõi");            // Adjust Mesh Height
+  LSTR MSG_UBL_MESH_HEIGHT_AMOUNT         = _UxGT("S·ªë l∆∞·ª£ng chi·ªÅu cao");                   // Height Amount
+  LSTR MSG_UBL_VALIDATE_MESH_MENU         = _UxGT("Th·∫©m tra l∆∞·ªõi");                        // Validate Mesh
+  LSTR MSG_UBL_VALIDATE_CUSTOM_MESH       = _UxGT("Th·∫©m tra l∆∞·ªõi t·ª± ch·ªçn");                // validate custom mesh
+  LSTR MSG_UBL_CONTINUE_MESH              = _UxGT("Ti·∫øp t·ª•c x√¢y l∆∞·ªõi b√†n");                // Continue Bed Mesh
+  LSTR MSG_UBL_MESH_LEVELING              = _UxGT("ƒêang san l·∫•p l∆∞·ªõi");                    // Mesh Leveling
+  LSTR MSG_UBL_3POINT_MESH_LEVELING       = _UxGT("ƒêang san l·∫•p 3-ƒëi·ªÉm");                  // 3-Point Leveling
+  LSTR MSG_UBL_GRID_MESH_LEVELING         = _UxGT("ƒêang san l·∫•p l∆∞·ªõi ph·∫≥ng");              // Grid (planar) Mesh Leveling
+  LSTR MSG_UBL_MESH_LEVEL                 = _UxGT("LaÕÄm bƒÉÕÄng l∆∞·ªõi");                        // Level Mesh
+  LSTR MSG_UBL_SIDE_POINTS                = _UxGT("ƒêi·ªÉm b√™n caÃ£nh");                        // Side Points
+  LSTR MSG_UBL_MAP_TYPE                   = _UxGT("Lo·∫°i b·∫£n ƒë·ªì");                          // Map Type
+  LSTR MSG_UBL_OUTPUT_MAP                 = _UxGT("ƒê·∫ßu ra b·∫£n ƒë·ªì l∆∞·ªõi");                   // Output Mesh Map
+  LSTR MSG_UBL_OUTPUT_MAP_HOST            = _UxGT("ƒê·∫ßu ra cho m√°y ch·ªß");                   // Output for Host
+  LSTR MSG_UBL_OUTPUT_MAP_CSV             = _UxGT("ƒê·∫ßu ra cho CSV");                       // Output for CSV
+  LSTR MSG_UBL_OUTPUT_MAP_BACKUP          = _UxGT("H·ªó tr·ª£ l∆∞·ªõi");                          // Off Printer Backup | backup mesh
+  LSTR MSG_UBL_INFO_UBL                   = _UxGT("ƒê·∫ßu ra th√¥ng tin UBL");                 // Output UBL Info
+  LSTR MSG_EDIT_MESH                      = _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi");                       // Edit mesh
+  LSTR MSG_UBL_FILLIN_AMOUNT              = _UxGT("S·ªë l∆∞·ª£ng l√¢ÕÅp ƒë√¢ÕÄy");                     // Fill-in Amount
+  LSTR MSG_UBL_MANUAL_FILLIN              = _UxGT("T·ª± l√¢ÕÅp ƒë√¢ÕÄy");                           // Manual Fill-in
+  LSTR MSG_UBL_SMART_FILLIN               = _UxGT("L√¢ÕÅp ƒë√¢ÕÄy th√¥ng minh");                   // Smart Fill-in
+  LSTR MSG_UBL_FILLIN_MESH                = _UxGT("L∆∞·ªõi l√¢ÕÅp ƒë√¢ÕÄy");                         // Fill-in Mesh
+  LSTR MSG_UBL_INVALIDATE_ALL             = _UxGT("BaÕÅc boÃâ t·∫•t c·∫£");                       // Invalidate All
+  LSTR MSG_UBL_INVALIDATE_CLOSEST         = _UxGT("BaÕÅc boÃâ g·∫ßn nh·∫•t");                     // Invalidate Closest
+  LSTR MSG_UBL_FINE_TUNE_ALL              = _UxGT("Ch·ªânh ch√≠nh x√°c t·∫•t c·∫£");               // Fine Tune ALl
+  LSTR MSG_UBL_FINE_TUNE_CLOSEST          = _UxGT("Ch·ªânh ch√≠nh x√°c g·∫ßn nh·∫•t");             // Fine Tune Closest
+  LSTR MSG_UBL_STORAGE_MESH_MENU          = _UxGT("L∆∞u tr·ªØ l∆∞·ªõi");                         // Mesh Storage
+  LSTR MSG_UBL_STORAGE_SLOT               = _UxGT("Khe nh·ªõ");                              // Memory Slot
+  LSTR MSG_UBL_LOAD_MESH                  = _UxGT("T·∫£i l∆∞·ªõi b√†n");                         // Load Bed Mesh
+  LSTR MSG_UBL_SAVE_MESH                  = _UxGT("L∆∞u l∆∞·ªõi b√†n");                         // Save Bed Mesh
+  LSTR MSG_MESH_LOADED                    = _UxGT("%i l∆∞·ªõi ƒë∆∞·ª£c n·∫°p");                     // Mesh %i loaded
+  LSTR MSG_MESH_SAVED                     = _UxGT("%i l∆∞·ªõi ƒë√£ l∆∞u");
+  LSTR MSG_NO_STORAGE                     = _UxGT("Kh√¥ng l∆∞u tr·ªØ");                        // No Storage
+  LSTR MSG_UBL_SAVE_ERROR                 = _UxGT("ƒêi√™ÕÄu sai: L∆∞u UBL");                    // Err: UBL Save
+  LSTR MSG_UBL_RESTORE_ERROR              = _UxGT("ƒêi√™ÕÄu Sai: Kh√¥i Ph·ª•c UBL");              // Err: UBL Restore
+  LSTR MSG_UBL_Z_OFFSET_STOPPED           = _UxGT("ƒê·∫ßu D√≤-Z ƒê√£ Ng∆∞ÕÄng");                    // Z-Offset Stopped
+  LSTR MSG_UBL_STEP_BY_STEP_MENU          = _UxGT("B∆∞·ªõc-T·ª´ng-B∆∞·ªõc UBL");                   // Step-By-Step UBL
+  LSTR MSG_UBL_1_BUILD_COLD_MESH          = _UxGT("1.X√¢y d·ª±ng l∆∞·ªõi l·∫°nh");
+  LSTR MSG_UBL_2_SMART_FILLIN             = _UxGT("2.L√¢ÕÅp ƒë√¢ÕÄy th√¥ng minh");
+  LSTR MSG_UBL_3_VALIDATE_MESH_MENU       = _UxGT("3.Th·∫©m tra l∆∞·ªõi");
+  LSTR MSG_UBL_4_FINE_TUNE_ALL            = _UxGT("4.Ch·ªânh ch√≠nh x√°c t·∫•t c·∫£");
+  LSTR MSG_UBL_5_VALIDATE_MESH_MENU       = _UxGT("5.Th·∫©m tra l∆∞·ªõi");
+  LSTR MSG_UBL_6_FINE_TUNE_ALL            = _UxGT("6.Ch·ªânh ch√≠nh x√°c t·∫•t c·∫£");
+  LSTR MSG_UBL_7_SAVE_MESH                = _UxGT("7.L∆∞u l∆∞·ªõi b√†n");
 
-  PROGMEM Language_Str MSG_LED_CONTROL                     = _UxGT("ƒêi·ªÅu khi·ªÉn LED");                       // LED Control
-  PROGMEM Language_Str MSG_LEDS                            = _UxGT("ƒê√®n");                                  // Lights
-  PROGMEM Language_Str MSG_LED_PRESETS                     = _UxGT("ƒê√®n ƒë·ªãnh s·∫µn");                         // Light Presets
-  PROGMEM Language_Str MSG_SET_LEDS_RED                    = _UxGT("ƒê·ªè");                                   // Red
-  PROGMEM Language_Str MSG_SET_LEDS_ORANGE                 = _UxGT("Cam");                                  // Orange
-  PROGMEM Language_Str MSG_SET_LEDS_YELLOW                 = _UxGT("V√†ng");                                 // Yellow
-  PROGMEM Language_Str MSG_SET_LEDS_GREEN                  = _UxGT("Xanh L√°");                              // Green
-  PROGMEM Language_Str MSG_SET_LEDS_BLUE                   = _UxGT("Xanh");                                 // Blue
-  PROGMEM Language_Str MSG_SET_LEDS_INDIGO                 = _UxGT("Xanh ƒê·∫≠m");                             // Indigo
-  PROGMEM Language_Str MSG_SET_LEDS_VIOLET                 = _UxGT("T√≠m");                                  // Violet
-  PROGMEM Language_Str MSG_SET_LEDS_WHITE                  = _UxGT("Tr·∫Øng");                                // White
-  PROGMEM Language_Str MSG_SET_LEDS_DEFAULT                = _UxGT("M·∫∑c ƒë·ªãnh");                             // Default
-  PROGMEM Language_Str MSG_CUSTOM_LEDS                     = _UxGT("ƒê√®n T·ª± Ch·ªçn");                          // Custom Lights
-  PROGMEM Language_Str MSG_INTENSITY_R                     = _UxGT("C∆∞·ªùng ƒê·ªô ƒê·ªè");                          // Red Intensity
-  PROGMEM Language_Str MSG_INTENSITY_G                     = _UxGT("C∆∞·ªùng ƒê·ªô Xanh L√°");                     // Green Intensity
-  PROGMEM Language_Str MSG_INTENSITY_B                     = _UxGT("C∆∞·ªùng ƒê·ªô Xanh");                        // Blue Intensity
-  PROGMEM Language_Str MSG_INTENSITY_W                     = _UxGT("C∆∞·ªùng ƒê·ªô Tr·∫Øng");                       // White Intensity
-  PROGMEM Language_Str MSG_LED_BRIGHTNESS                  = _UxGT("ƒë·ªô s√°ng");                              // Brightness
+  LSTR MSG_LED_CONTROL                    = _UxGT("ƒêi·ªÅu khi·ªÉn LED");                       // LED Control
+  LSTR MSG_LEDS                           = _UxGT("ƒê√®n");                                  // Lights
+  LSTR MSG_LED_PRESETS                    = _UxGT("ƒê√®n ƒë·ªãnh s·∫µn");                         // Light Presets
+  LSTR MSG_SET_LEDS_RED                   = _UxGT("ƒê·ªè");                                   // Red
+  LSTR MSG_SET_LEDS_ORANGE                = _UxGT("Cam");                                  // Orange
+  LSTR MSG_SET_LEDS_YELLOW                = _UxGT("V√†ng");                                 // Yellow
+  LSTR MSG_SET_LEDS_GREEN                 = _UxGT("Xanh L√°");                              // Green
+  LSTR MSG_SET_LEDS_BLUE                  = _UxGT("Xanh");                                 // Blue
+  LSTR MSG_SET_LEDS_INDIGO                = _UxGT("Xanh ƒê·∫≠m");                             // Indigo
+  LSTR MSG_SET_LEDS_VIOLET                = _UxGT("T√≠m");                                  // Violet
+  LSTR MSG_SET_LEDS_WHITE                 = _UxGT("Tr·∫Øng");                                // White
+  LSTR MSG_SET_LEDS_DEFAULT               = _UxGT("M·∫∑c ƒë·ªãnh");                             // Default
+  LSTR MSG_CUSTOM_LEDS                    = _UxGT("ƒê√®n T·ª± Ch·ªçn");                          // Custom Lights
+  LSTR MSG_INTENSITY_R                    = _UxGT("C∆∞·ªùng ƒê·ªô ƒê·ªè");                          // Red Intensity
+  LSTR MSG_INTENSITY_G                    = _UxGT("C∆∞·ªùng ƒê·ªô Xanh L√°");                     // Green Intensity
+  LSTR MSG_INTENSITY_B                    = _UxGT("C∆∞·ªùng ƒê·ªô Xanh");                        // Blue Intensity
+  LSTR MSG_INTENSITY_W                    = _UxGT("C∆∞·ªùng ƒê·ªô Tr·∫Øng");                       // White Intensity
+  LSTR MSG_LED_BRIGHTNESS                 = _UxGT("ƒë·ªô s√°ng");                              // Brightness
 
-  PROGMEM Language_Str MSG_MOVING                          = _UxGT("Di chuy·ªÉn...");                         // Moving
-  PROGMEM Language_Str MSG_FREE_XY                         = _UxGT("Gi·∫£i ph√≥ng XY");                        // Free XY
-  PROGMEM Language_Str MSG_MOVE_X                          = _UxGT("Di chuy·ªÉn X");                          // Move X
-  PROGMEM Language_Str MSG_MOVE_Y                          = _UxGT("Di chuy·ªÉn Y");
-  PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("Di chuy·ªÉn Z");
-  PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("M√°y ƒë√πn");                              // Extruder
-  PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("M√°y ƒë√πn *");
-  PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("ƒê·∫ßu n√≥ng qu√° l·∫°nh");                    // Hotend too cold
-  PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("Di chuy·ªÉn 0.1mm");                      // Move 0.1mm
-  PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("Di chuy·ªÉn 1mm");                        // Move 1mm
-  PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("Di chuy·ªÉn 10mm");                       // Move 10mm
-  PROGMEM Language_Str MSG_MOVE_100MM                      = _UxGT("Di chuy·ªÉn 100mm");                      // Move 100mm
-  PROGMEM Language_Str MSG_SPEED                           = _UxGT("T·ªëc ƒë·ªô");                               // Speed
-  PROGMEM Language_Str MSG_BED_Z                           = _UxGT("Z B√†n");
-  PROGMEM Language_Str MSG_NOZZLE                          = _UxGT("ƒê·∫ßu phun");                             // Nozzle
-  PROGMEM Language_Str MSG_NOZZLE_N                        = _UxGT("ƒê·∫ßu phun ~");
-  PROGMEM Language_Str MSG_BED                             = _UxGT("B√†n");                                  // bed
-  PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("T·ªëc ƒë·ªô qu·∫°t");                          // fan speed
-  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("T·ªëc ƒë·ªô qu·∫°t ~");
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£");                      // Extra fan speed
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ ~");
-  PROGMEM Language_Str MSG_FLOW                            = _UxGT("L∆∞u L∆∞·ª£ng");
-  PROGMEM Language_Str MSG_FLOW_N                          = _UxGT("L∆∞u L∆∞·ª£ng ~");
-  PROGMEM Language_Str MSG_CONTROL                         = _UxGT("ƒêi·ªÅu khi·ªÉn");                           // Control
-  PROGMEM Language_Str MSG_MIN                             = " " LCD_STR_THERMOMETER _UxGT(" ƒêa");          // min
-  PROGMEM Language_Str MSG_MAX                             = " " LCD_STR_THERMOMETER _UxGT(" Thi·ªÉu");
-  PROGMEM Language_Str MSG_FACTOR                          = " " LCD_STR_THERMOMETER _UxGT(" H·ªá S·ªë");       // factor
-  PROGMEM Language_Str MSG_AUTOTEMP                        = _UxGT("Nhi·ªát ƒë·ªô t·ª± ƒë·ªông");                     // Autotemp
-  PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("B·∫≠t");                                  // on
-  PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("T·∫Øt");                                  // off
-  PROGMEM Language_Str MSG_SELECT                          = _UxGT("L·ª±a");                                  // Select
-  PROGMEM Language_Str MSG_SELECT_E                        = _UxGT("L·ª±a *");
-  PROGMEM Language_Str MSG_ACC                             = _UxGT("TƒÉng T·ªëc");
-  PROGMEM Language_Str MSG_JERK                            = _UxGT("Gi·∫≠t");
-  PROGMEM Language_Str MSG_VA_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_A;
-  PROGMEM Language_Str MSG_VB_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_B;
-  PROGMEM Language_Str MSG_VC_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_C;
-  PROGMEM Language_Str MSG_VI_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_I;
-  PROGMEM Language_Str MSG_VJ_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_J;
-  PROGMEM Language_Str MSG_VK_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_K;
-  PROGMEM Language_Str MSG_VE_JERK                         = _UxGT("Gi·∫≠t-Ve");
-  PROGMEM Language_Str MSG_JUNCTION_DEVIATION              = _UxGT("ƒê·ªô L·ªách Ch√¥ÃÉ Giao");                    // Junction Dev
-  PROGMEM Language_Str MSG_VELOCITY                        = _UxGT("V√¢Ã£n t√¥ÕÅc");                              // velocity
-  PROGMEM Language_Str MSG_VMAX_A                          = _UxGT("Vƒëa") LCD_STR_A;                        // Vmax
-  PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("Vƒëa") LCD_STR_B;
-  PROGMEM Language_Str MSG_VMAX_C                          = _UxGT("Vƒëa") LCD_STR_C;
-  PROGMEM Language_Str MSG_VMAX_I                          = _UxGT("Vƒëa") LCD_STR_I;
-  PROGMEM Language_Str MSG_VMAX_J                          = _UxGT("Vƒëa") LCD_STR_J;
-  PROGMEM Language_Str MSG_VMAX_K                          = _UxGT("Vƒëa") LCD_STR_K;
-  PROGMEM Language_Str MSG_VMAX_E                          = _UxGT("Vƒëa") LCD_STR_E;
-  PROGMEM Language_Str MSG_VMAX_EN                         = _UxGT("Vƒëa *");
-  PROGMEM Language_Str MSG_VMIN                            = _UxGT("Vthi·ªÉu");                               // Vmin
-  PROGMEM Language_Str MSG_VTRAV_MIN                       = _UxGT("Vchuy·ªÉn thi·ªÉu");                        // VTrav min
-  PROGMEM Language_Str MSG_ACCELERATION                    = _UxGT("S·ª± tƒÉng t·ªëc");                          // Acceleration
-  PROGMEM Language_Str MSG_AMAX_A                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_A;                // Amax
-  PROGMEM Language_Str MSG_AMAX_B                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_B;
-  PROGMEM Language_Str MSG_AMAX_C                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_C;
-  PROGMEM Language_Str MSG_AMAX_I                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_I;                // Amax
-  PROGMEM Language_Str MSG_AMAX_J                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_J;
-  PROGMEM Language_Str MSG_AMAX_K                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_K;
-  PROGMEM Language_Str MSG_AMAX_E                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_E;
-  PROGMEM Language_Str MSG_AMAX_EN                         = _UxGT("TƒÉng t·ªëc ca *");
-  PROGMEM Language_Str MSG_A_RETRACT                       = _UxGT("TT-R√∫t");                               // A-retract
-  PROGMEM Language_Str MSG_A_TRAVEL                        = _UxGT("TT-Chuy·ªÉn");                            // A-travel
-  PROGMEM Language_Str MSG_STEPS_PER_MM                    = _UxGT("B∆∞∆°ÕÅc/mm");                              // Steps
-  PROGMEM Language_Str MSG_A_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_A _UxGT("/mm");          // Steps/mm
-  PROGMEM Language_Str MSG_B_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_B _UxGT("/mm");
-  PROGMEM Language_Str MSG_C_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_C _UxGT("/mm");
-  PROGMEM Language_Str MSG_I_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_I _UxGT("/mm");          // Steps/mm
-  PROGMEM Language_Str MSG_J_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_J _UxGT("/mm");
-  PROGMEM Language_Str MSG_K_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_K _UxGT("/mm");
-  PROGMEM Language_Str MSG_E_STEPS                         = _UxGT("B∆∞·ªõcE/mm");
-  PROGMEM Language_Str MSG_EN_STEPS                        = _UxGT("B∆∞·ªõc */mm");
-  PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Nhi·ªát ƒë·ªô");                             // Temperature
-  PROGMEM Language_Str MSG_MOTION                          = _UxGT("Chuy·ªÉn ƒë·ªông");                          // Motion
-  PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("V·∫≠t li·ªáu in");                          // d√¢y nh·ª±a
-  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("E b·∫±ng mm") SUPERSCRIPT_THREE;                           // E in mm
-  PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a");                      // Fil. Dai.
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E                 = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a *");
-  PROGMEM Language_Str MSG_FILAMENT_UNLOAD                 = _UxGT("D·ª° mm");                                // unload mm
-  PROGMEM Language_Str MSG_FILAMENT_LOAD                   = _UxGT("N·∫°p mm");
-  PROGMEM Language_Str MSG_ADVANCE_K                       = _UxGT("K C·∫•p Cao");                            // Advance K
-  PROGMEM Language_Str MSG_ADVANCE_K_E                     = _UxGT("K C·∫•p Cao *");                          // Advance K
-  PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("ƒê·ªô t∆∞∆°ng ph·∫£n LCD");                    // LCD contrast
-  PROGMEM Language_Str MSG_STORE_EEPROM                    = _UxGT("L∆∞u c√°c thi·∫øt l·∫≠p");                    // Store settings
-  PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("T·∫£i c√°c c√†i ƒë·∫∑t");                      // Load settings
-  PROGMEM Language_Str MSG_RESTORE_DEFAULTS                = _UxGT("Kh√¥i ph·ª•c ph√≤ng h∆∞");                   // Restore Defaults
-  PROGMEM Language_Str MSG_INIT_EEPROM                     = _UxGT("Kh·ªüi T·∫°o EEPROM");                      // Initialize EEPROM
-  PROGMEM Language_Str MSG_MEDIA_UPDATE                    = _UxGT("C·∫≠p Nh·∫≠t ph∆∞∆°ng ti·ªán");                 // Update media
-  PROGMEM Language_Str MSG_RESET_PRINTER                   = _UxGT("B·∫∑t L·∫°i M√°y In");
-  PROGMEM Language_Str MSG_REFRESH                         = LCD_STR_REFRESH  _UxGT("C·∫≠p Nh·∫≠t");            // Refresh
-  PROGMEM Language_Str MSG_INFO_SCREEN                     = _UxGT("M√†n H√¨nh Th√¥ng Tin");                   // Info screen
-  PROGMEM Language_Str MSG_PREPARE                         = _UxGT("Chu·∫©n b·ªã");                             // Prepare
-  PROGMEM Language_Str MSG_TUNE                            = _UxGT("ƒêi·ªÅu Ch·ªânh");                           // Tune
-  PROGMEM Language_Str MSG_PAUSE_PRINT                     = _UxGT("T·∫°m d·ª´ng in");                          // Pause print
-  PROGMEM Language_Str MSG_RESUME_PRINT                    = _UxGT("Ti·∫øp t·ª•c in");                          // Resume print
-  PROGMEM Language_Str MSG_STOP_PRINT                      = _UxGT("Ng∆∞ÕÄng in");                             // Stop print
-  PROGMEM Language_Str MSG_OUTAGE_RECOVERY                 = _UxGT("Ph·ª•c H·ªìi M·∫•t ƒêi·ªán");                    // Outage Recovery
-  PROGMEM Language_Str MSG_MEDIA_MENU                      = _UxGT("In t·ª´ ph∆∞∆°ng ti·ªán");                    // Print from media
-  PROGMEM Language_Str MSG_NO_MEDIA                        = _UxGT("Kh√¥ng c√≥ ph∆∞∆°ng ti·ªán");                 // No media
-  PROGMEM Language_Str MSG_DWELL                           = _UxGT("Ng·ªß...");                               // Sleep
-  PROGMEM Language_Str MSG_USERWAIT                        = _UxGT("Nh·∫•n ƒë·ªÉ ti·∫øp t·ª•c...");                  // Click to resume (same as 'continue')
-  PROGMEM Language_Str MSG_PRINT_PAUSED                    = _UxGT("In t·∫°m d·ª´ng");                          // print paused
-  PROGMEM Language_Str MSG_PRINTING                        = _UxGT("ƒêang in...");                           // printing
-  PROGMEM Language_Str MSG_PRINT_ABORTED                   = _UxGT("In ƒë√£ h·ªßy b·ªè");                         // Print aborted
-  PROGMEM Language_Str MSG_NO_MOVE                         = _UxGT("Kh√¥ng di chuy·ªÉn.");                     // No move.
-  PROGMEM Language_Str MSG_KILLED                          = _UxGT("ƒê√É CH√äÕÅT. ");
-  PROGMEM Language_Str MSG_STOPPED                         = _UxGT("ƒê√É NG∆ØÕÄNG. ");
-  PROGMEM Language_Str MSG_CONTROL_RETRACT                 = _UxGT("R√∫t mm");                               // Retract mm
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_SWAP            = _UxGT("R√∫t Trao.mm");                          // Swap Re.mm
-  PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("R√∫t V");
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_ZHOP            = _UxGT("Nh·∫£y mm");                              // hop
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("B·ªèR√∫t mm");                             // Unretr. mm
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("B·ªèR√∫t T mm");                           // S Unretr. mm
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("B·ªèR√∫t V");                              // UnRet V
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAPF   = _UxGT("B·ªèR√∫t T V");                            // S UnRet V
-  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("R√∫tT·ª±ƒê·ªông");                            // Auto-Retract
-  PROGMEM Language_Str MSG_FILAMENT_SWAP_LENGTH            = _UxGT("Kho·∫£ng C√°ch R√∫t");                      // Retract Distance
-  PROGMEM Language_Str MSG_TOOL_CHANGE                     = _UxGT("Thay ƒê·ªïi C√¥ng C·ª•");                     // Tool Change
-  PROGMEM Language_Str MSG_TOOL_CHANGE_ZLIFT               = _UxGT("ƒê∆∞a L√™n Z");                            // Z Raise
-  PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPEED        = _UxGT("T·ªëc ƒê·ªô Tu√¥n Ra");                       // Prime Speed
-  PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPEED      = _UxGT("T·ªëc ƒê·ªô R√∫t L·∫°i");                       // Retract Speed
-  PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Thay d√¢y nh·ª±a");                        // change filament
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E                = _UxGT("Thay d√¢y nh·ª±a *");                      // change filament
-  PROGMEM Language_Str MSG_FILAMENTLOAD                    = _UxGT("N·∫°p d√¢y nh·ª±a");                         // load filament
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E                  = _UxGT("N·∫°p d√¢y nh·ª±a *");                       // load filament
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD                  = _UxGT("D·ª° d√¢y nh·ª±a");                          // unload filament
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E                = _UxGT("D·ª° d√¢y nh·ª±a *");                        // unload filament
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("D·ª° t·∫•t c·∫£");                            // Unload All
-  PROGMEM Language_Str MSG_ATTACH_MEDIA                    = _UxGT("Kh·ªüi t·∫°o ph∆∞∆°ng ti·ªán");                 // Attach media
-  PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Thay ph∆∞∆°ng ti·ªán");                     // Change midea
-  PROGMEM Language_Str MSG_RELEASE_MEDIA                   = _UxGT("Ph√°t h√†nh ph∆∞∆°ng ti·ªán");
-  PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("ƒê·∫ßu D√≤ Z qua b√†n");                     // Z Probe past bed
-  PROGMEM Language_Str MSG_SKEW_FACTOR                     = _UxGT("H·ªá s·ªë nghi√™ng");                        // Skew Factor
-  PROGMEM Language_Str MSG_BLTOUCH                         = _UxGT("BLTOUCH");                              // BLTouch
-  PROGMEM Language_Str MSG_BLTOUCH_SELFTEST                = _UxGT("T·ª± ki·ªÉm tra BLTOUCH ");                 // BLTouch Self-Test
-  PROGMEM Language_Str MSG_BLTOUCH_RESET                   = _UxGT("B·∫∑t l·∫°i BLTouch");                      // Reset BLTouch
-  PROGMEM Language_Str MSG_BLTOUCH_DEPLOY                  = _UxGT("ƒêem BLTouch");                          // Deploy BLTouch
-  PROGMEM Language_Str MSG_BLTOUCH_STOW                    = _UxGT("C·∫•t BLTouch");                          // Stow BLTouch
-  PROGMEM Language_Str MSG_MANUAL_DEPLOY                   = _UxGT("ƒêem ƒê·∫ßu D√≤-Z");                         // Deploy Z-Probe
-  PROGMEM Language_Str MSG_MANUAL_STOW                     = _UxGT("C·∫•t ƒê·∫ßu D√≤-Z");                         // Stow Z-Probe
-  PROGMEM Language_Str MSG_HOME_FIRST                      = _UxGT("V·ªÅ nh√† %s%s%s Tr∆∞∆°ÕÅc");
-  PROGMEM Language_Str MSG_ZPROBE_ZOFFSET                  = _UxGT("ƒê·∫ßu D√≤ B√π ƒê·∫Øp Z");                      // Probe Z Offset
-  PROGMEM Language_Str MSG_BABYSTEP_X                      = _UxGT("Nh√≠t X");                               // Babystep X
-  PROGMEM Language_Str MSG_BABYSTEP_Y                      = _UxGT("Nh√≠t Y");
-  PROGMEM Language_Str MSG_BABYSTEP_Z                      = _UxGT("Nh√≠t Z");
-  PROGMEM Language_Str MSG_ENDSTOP_ABORT                   = _UxGT("H·ªßy b·ªè c√¥ng t·∫Øc");                      // Endstop abort
-  PROGMEM Language_Str MSG_HEATING_FAILED_LCD              = _UxGT("S∆∞·ªüi ƒë·∫ßu phun kh√¥ng th√†nh c√¥ng");       // Heating failed
-  PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô d∆∞");                // Err: REDUNDANT TEMP
-  PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát");                         // THERMAL RUNAWAY | problem
-  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_BED             = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát b√†n");                     // BED THERMAL RUNAWAY
-  PROGMEM Language_Str MSG_ERR_MAXTEMP                     = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi ƒëa");            // Err: MAXTEMP
-  PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");         // Err: MINTEMP
-  PROGMEM Language_Str MSG_HALTED                          = _UxGT("M√ÅY IN ƒê√É D∆ØÕÄNG LAÃ£I");                   // PRINTER HALTED
-  PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Xin b·∫∑t l·∫°i");                          // Please reset
-  PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("n");                                    // d - ng√†y - One character only
-  PROGMEM Language_Str MSG_SHORT_HOUR                      = _UxGT("g");                                    // h - gi·ªù  - One character only
-  PROGMEM Language_Str MSG_SHORT_MINUTE                    = _UxGT("p");                                    // m - ph√∫t - One character only
-  PROGMEM Language_Str MSG_HEATING                         = _UxGT("ƒêang s∆∞·ªüi noÕÅng...");                    // heating
-  PROGMEM Language_Str MSG_COOLING                         = _UxGT("ƒêang laÕÄm ngu√¥Ã£i...");                    // cooling
-  PROGMEM Language_Str MSG_BED_HEATING                     = _UxGT("ƒêang s∆∞·ªüi nong b√†n...");                // bed heating
-  PROGMEM Language_Str MSG_BED_COOLING                     = _UxGT("ƒêang laÕÄm ngu√¥Ã£i b√†n...");                // bed cooling
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE                 = _UxGT("C√¢n Ch·ªânh Delta");                      // Delta calibration
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_X               = _UxGT("Ch·ªânh X l·∫°i");
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Y               = _UxGT("Ch·ªânh Y l·∫°i");
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Z               = _UxGT("Ch·ªânh Z l·∫°i");
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_CENTER          = _UxGT("Ch·ªânh Z Center");                       // Calibrate Center
-  PROGMEM Language_Str MSG_DELTA_SETTINGS                  = _UxGT("C√†i ƒê·∫∑t Delta");                        // Delta Settings
-  PROGMEM Language_Str MSG_DELTA_AUTO_CALIBRATE            = _UxGT("C√¢n Ch·ªânh T·ª± ƒê·ªông");                    // Auto Calibration
-  PROGMEM Language_Str MSG_DELTA_HEIGHT_CALIBRATE          = _UxGT("ƒê·∫∑t Chi·ªÅu Cao Delta");                  // Set Delta Height
-  PROGMEM Language_Str MSG_DELTA_Z_OFFSET_CALIBRATE        = _UxGT("ƒê·∫ßu D√≤ Z-B√π ƒê·∫Øp");                      // Probe Z-offset
-  PROGMEM Language_Str MSG_DELTA_DIAG_ROD                  = _UxGT("G·∫≠y Ch√©o");                             // Diag Rod
-  PROGMEM Language_Str MSG_DELTA_HEIGHT                    = _UxGT("Chi·ªÅu Cao");                            // Height
-  PROGMEM Language_Str MSG_DELTA_RADIUS                    = _UxGT("B√°n K√≠nh");                             // Radius
-  PROGMEM Language_Str MSG_INFO_MENU                       = _UxGT("V·ªÅ M√°y In");
-  PROGMEM Language_Str MSG_INFO_PRINTER_MENU               = _UxGT("Th√¥ng Tin M√°y In");                     // Printer Info
-  PROGMEM Language_Str MSG_3POINT_LEVELING                 = _UxGT("San l·∫•p 3-ƒêi·ªÉm");                       // 3-Point Leveling
-  PROGMEM Language_Str MSG_LINEAR_LEVELING                 = _UxGT("San L·∫•p Tuy·∫øn T√≠nh");                   // Linear Leveling
-  PROGMEM Language_Str MSG_BILINEAR_LEVELING               = _UxGT("San L·∫•p Song Tuy·∫øn");                   // Bilinear Leveling
-  PROGMEM Language_Str MSG_UBL_LEVELING                    = _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t");               // Unified Bed Leveling
-  PROGMEM Language_Str MSG_MESH_LEVELING                   = _UxGT("L∆∞·ªõi San L·∫•p");                         // Mesh Leveling
-  PROGMEM Language_Str MSG_INFO_STATS_MENU                 = _UxGT("Th·ªëng K√™ M√°y In");                      // Printer Stats
-  PROGMEM Language_Str MSG_INFO_BOARD_MENU                 = _UxGT("Th√¥ng Tin Bo M·∫°ch");                    // Board Info
-  PROGMEM Language_Str MSG_INFO_THERMISTOR_MENU            = _UxGT("ƒêi·ªán Tr·ªü Nhi·ªát");                       // Thermistors
-  PROGMEM Language_Str MSG_INFO_EXTRUDERS                  = _UxGT("M√°y ƒë√πn");                              // Extruders
-  PROGMEM Language_Str MSG_INFO_BAUDRATE                   = _UxGT("Baud");                                 // Baud
-  PROGMEM Language_Str MSG_INFO_PROTOCOL                   = _UxGT("Giao Th·ª©c");                            // Protocol
-  PROGMEM Language_Str MSG_CASE_LIGHT                      = _UxGT("ƒê√®n Khu√¥ng");                           // Case light
-  PROGMEM Language_Str MSG_CASE_LIGHT_BRIGHTNESS           = _UxGT("ƒê·ªô S√°ng");                              // Light Brightness
+  LSTR MSG_MOVING                         = _UxGT("Di chuy·ªÉn...");                         // Moving
+  LSTR MSG_FREE_XY                        = _UxGT("Gi·∫£i ph√≥ng XY");                        // Free XY
+  LSTR MSG_MOVE_X                         = _UxGT("Di chuy·ªÉn X");                          // Move X
+  LSTR MSG_MOVE_Y                         = _UxGT("Di chuy·ªÉn Y");
+  LSTR MSG_MOVE_Z                         = _UxGT("Di chuy·ªÉn Z");
+  LSTR MSG_MOVE_E                         = _UxGT("M√°y ƒë√πn");                              // Extruder
+  LSTR MSG_MOVE_EN                        = _UxGT("M√°y ƒë√πn *");
+  LSTR MSG_HOTEND_TOO_COLD                = _UxGT("ƒê·∫ßu n√≥ng qu√° l·∫°nh");                    // Hotend too cold
+  LSTR MSG_MOVE_01MM                      = _UxGT("Di chuy·ªÉn 0.1mm");                      // Move 0.1mm
+  LSTR MSG_MOVE_1MM                       = _UxGT("Di chuy·ªÉn 1mm");                        // Move 1mm
+  LSTR MSG_MOVE_10MM                      = _UxGT("Di chuy·ªÉn 10mm");                       // Move 10mm
+  LSTR MSG_MOVE_100MM                     = _UxGT("Di chuy·ªÉn 100mm");                      // Move 100mm
+  LSTR MSG_SPEED                          = _UxGT("T·ªëc ƒë·ªô");                               // Speed
+  LSTR MSG_BED_Z                          = _UxGT("Z B√†n");
+  LSTR MSG_NOZZLE                         = _UxGT("ƒê·∫ßu phun");                             // Nozzle
+  LSTR MSG_NOZZLE_N                       = _UxGT("ƒê·∫ßu phun ~");
+  LSTR MSG_BED                            = _UxGT("B√†n");                                  // bed
+  LSTR MSG_FAN_SPEED                      = _UxGT("T·ªëc ƒë·ªô qu·∫°t");                          // fan speed
+  LSTR MSG_FAN_SPEED_N                    = _UxGT("T·ªëc ƒë·ªô qu·∫°t ~");
+  LSTR MSG_EXTRA_FAN_SPEED                = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£");                      // Extra fan speed
+  LSTR MSG_EXTRA_FAN_SPEED_N              = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ ~");
+  LSTR MSG_FLOW                           = _UxGT("L∆∞u L∆∞·ª£ng");
+  LSTR MSG_FLOW_N                         = _UxGT("L∆∞u L∆∞·ª£ng ~");
+  LSTR MSG_CONTROL                        = _UxGT("ƒêi·ªÅu khi·ªÉn");                           // Control
+  LSTR MSG_MIN                            = " " LCD_STR_THERMOMETER _UxGT(" ƒêa");          // min
+  LSTR MSG_MAX                            = " " LCD_STR_THERMOMETER _UxGT(" Thi·ªÉu");
+  LSTR MSG_FACTOR                         = " " LCD_STR_THERMOMETER _UxGT(" H·ªá S·ªë");       // factor
+  LSTR MSG_AUTOTEMP                       = _UxGT("Nhi·ªát ƒë·ªô t·ª± ƒë·ªông");                     // Autotemp
+  LSTR MSG_LCD_ON                         = _UxGT("B·∫≠t");                                  // on
+  LSTR MSG_LCD_OFF                        = _UxGT("T·∫Øt");                                  // off
+  LSTR MSG_SELECT                         = _UxGT("L·ª±a");                                  // Select
+  LSTR MSG_SELECT_E                       = _UxGT("L·ª±a *");
+  LSTR MSG_ACC                            = _UxGT("TƒÉng T·ªëc");
+  LSTR MSG_JERK                           = _UxGT("Gi·∫≠t");
+  LSTR MSG_VA_JERK                        = _UxGT("Gi·∫≠t-V") LCD_STR_A;
+  LSTR MSG_VB_JERK                        = _UxGT("Gi·∫≠t-V") LCD_STR_B;
+  LSTR MSG_VC_JERK                        = _UxGT("Gi·∫≠t-V") LCD_STR_C;
+  LSTR MSG_VI_JERK                        = _UxGT("Gi·∫≠t-V") LCD_STR_I;
+  LSTR MSG_VJ_JERK                        = _UxGT("Gi·∫≠t-V") LCD_STR_J;
+  LSTR MSG_VK_JERK                        = _UxGT("Gi·∫≠t-V") LCD_STR_K;
+  LSTR MSG_VE_JERK                        = _UxGT("Gi·∫≠t-Ve");
+  LSTR MSG_JUNCTION_DEVIATION             = _UxGT("ƒê·ªô L·ªách Ch√¥ÃÉ Giao");                    // Junction Dev
+  LSTR MSG_VELOCITY                       = _UxGT("V√¢Ã£n t√¥ÕÅc");                              // velocity
+  LSTR MSG_VMAX_A                         = _UxGT("Vƒëa") LCD_STR_A;                        // Vmax
+  LSTR MSG_VMAX_B                         = _UxGT("Vƒëa") LCD_STR_B;
+  LSTR MSG_VMAX_C                         = _UxGT("Vƒëa") LCD_STR_C;
+  LSTR MSG_VMAX_I                         = _UxGT("Vƒëa") LCD_STR_I;
+  LSTR MSG_VMAX_J                         = _UxGT("Vƒëa") LCD_STR_J;
+  LSTR MSG_VMAX_K                         = _UxGT("Vƒëa") LCD_STR_K;
+  LSTR MSG_VMAX_E                         = _UxGT("Vƒëa") LCD_STR_E;
+  LSTR MSG_VMAX_EN                        = _UxGT("Vƒëa *");
+  LSTR MSG_VMIN                           = _UxGT("Vthi·ªÉu");                               // Vmin
+  LSTR MSG_VTRAV_MIN                      = _UxGT("Vchuy·ªÉn thi·ªÉu");                        // VTrav min
+  LSTR MSG_ACCELERATION                   = _UxGT("S·ª± tƒÉng t·ªëc");                          // Acceleration
+  LSTR MSG_AMAX_A                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_A;                // Amax
+  LSTR MSG_AMAX_B                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_B;
+  LSTR MSG_AMAX_C                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_C;
+  LSTR MSG_AMAX_I                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_I;                // Amax
+  LSTR MSG_AMAX_J                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_J;
+  LSTR MSG_AMAX_K                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_K;
+  LSTR MSG_AMAX_E                         = _UxGT("TƒÉng t·ªëc ca") LCD_STR_E;
+  LSTR MSG_AMAX_EN                        = _UxGT("TƒÉng t·ªëc ca *");
+  LSTR MSG_A_RETRACT                      = _UxGT("TT-R√∫t");                               // A-retract
+  LSTR MSG_A_TRAVEL                       = _UxGT("TT-Chuy·ªÉn");                            // A-travel
+  LSTR MSG_STEPS_PER_MM                   = _UxGT("B∆∞∆°ÕÅc/mm");                              // Steps
+  LSTR MSG_A_STEPS                        = _UxGT("B∆∞·ªõc") LCD_STR_A _UxGT("/mm");          // Steps/mm
+  LSTR MSG_B_STEPS                        = _UxGT("B∆∞·ªõc") LCD_STR_B _UxGT("/mm");
+  LSTR MSG_C_STEPS                        = _UxGT("B∆∞·ªõc") LCD_STR_C _UxGT("/mm");
+  LSTR MSG_I_STEPS                        = _UxGT("B∆∞·ªõc") LCD_STR_I _UxGT("/mm");          // Steps/mm
+  LSTR MSG_J_STEPS                        = _UxGT("B∆∞·ªõc") LCD_STR_J _UxGT("/mm");
+  LSTR MSG_K_STEPS                        = _UxGT("B∆∞·ªõc") LCD_STR_K _UxGT("/mm");
+  LSTR MSG_E_STEPS                        = _UxGT("B∆∞·ªõcE/mm");
+  LSTR MSG_EN_STEPS                       = _UxGT("B∆∞·ªõc */mm");
+  LSTR MSG_TEMPERATURE                    = _UxGT("Nhi·ªát ƒë·ªô");                             // Temperature
+  LSTR MSG_MOTION                         = _UxGT("Chuy·ªÉn ƒë·ªông");                          // Motion
+  LSTR MSG_FILAMENT                       = _UxGT("V·∫≠t li·ªáu in");                          // d√¢y nh·ª±a
+  LSTR MSG_VOLUMETRIC_ENABLED             = _UxGT("E b·∫±ng mm") SUPERSCRIPT_THREE;                           // E in mm
+  LSTR MSG_FILAMENT_DIAM                  = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a");                      // Fil. Dai.
+  LSTR MSG_FILAMENT_DIAM_E                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a *");
+  LSTR MSG_FILAMENT_UNLOAD                = _UxGT("D·ª° mm");                                // unload mm
+  LSTR MSG_FILAMENT_LOAD                  = _UxGT("N·∫°p mm");
+  LSTR MSG_ADVANCE_K                      = _UxGT("K C·∫•p Cao");                            // Advance K
+  LSTR MSG_ADVANCE_K_E                    = _UxGT("K C·∫•p Cao *");                          // Advance K
+  LSTR MSG_CONTRAST                       = _UxGT("ƒê·ªô t∆∞∆°ng ph·∫£n LCD");                    // LCD contrast
+  LSTR MSG_STORE_EEPROM                   = _UxGT("L∆∞u c√°c thi·∫øt l·∫≠p");                    // Store settings
+  LSTR MSG_LOAD_EEPROM                    = _UxGT("T·∫£i c√°c c√†i ƒë·∫∑t");                      // Load settings
+  LSTR MSG_RESTORE_DEFAULTS               = _UxGT("Kh√¥i ph·ª•c ph√≤ng h∆∞");                   // Restore Defaults
+  LSTR MSG_INIT_EEPROM                    = _UxGT("Kh·ªüi T·∫°o EEPROM");                      // Initialize EEPROM
+  LSTR MSG_MEDIA_UPDATE                   = _UxGT("C·∫≠p Nh·∫≠t ph∆∞∆°ng ti·ªán");                 // Update media
+  LSTR MSG_RESET_PRINTER                  = _UxGT("B·∫∑t L·∫°i M√°y In");
+  LSTR MSG_REFRESH                        = LCD_STR_REFRESH  _UxGT("C·∫≠p Nh·∫≠t");            // Refresh
+  LSTR MSG_INFO_SCREEN                    = _UxGT("M√†n H√¨nh Th√¥ng Tin");                   // Info screen
+  LSTR MSG_PREPARE                        = _UxGT("Chu·∫©n b·ªã");                             // Prepare
+  LSTR MSG_TUNE                           = _UxGT("ƒêi·ªÅu Ch·ªânh");                           // Tune
+  LSTR MSG_PAUSE_PRINT                    = _UxGT("T·∫°m d·ª´ng in");                          // Pause print
+  LSTR MSG_RESUME_PRINT                   = _UxGT("Ti·∫øp t·ª•c in");                          // Resume print
+  LSTR MSG_STOP_PRINT                     = _UxGT("Ng∆∞ÕÄng in");                             // Stop print
+  LSTR MSG_OUTAGE_RECOVERY                = _UxGT("Ph·ª•c H·ªìi M·∫•t ƒêi·ªán");                    // Outage Recovery
+  LSTR MSG_MEDIA_MENU                     = _UxGT("In t·ª´ ph∆∞∆°ng ti·ªán");                    // Print from media
+  LSTR MSG_NO_MEDIA                       = _UxGT("Kh√¥ng c√≥ ph∆∞∆°ng ti·ªán");                 // No media
+  LSTR MSG_DWELL                          = _UxGT("Ng·ªß...");                               // Sleep
+  LSTR MSG_USERWAIT                       = _UxGT("Nh·∫•n ƒë·ªÉ ti·∫øp t·ª•c...");                  // Click to resume (same as 'continue')
+  LSTR MSG_PRINT_PAUSED                   = _UxGT("In t·∫°m d·ª´ng");                          // print paused
+  LSTR MSG_PRINTING                       = _UxGT("ƒêang in...");                           // printing
+  LSTR MSG_PRINT_ABORTED                  = _UxGT("In ƒë√£ h·ªßy b·ªè");                         // Print aborted
+  LSTR MSG_NO_MOVE                        = _UxGT("Kh√¥ng di chuy·ªÉn.");                     // No move.
+  LSTR MSG_KILLED                         = _UxGT("ƒê√É CH√äÕÅT. ");
+  LSTR MSG_STOPPED                        = _UxGT("ƒê√É NG∆ØÕÄNG. ");
+  LSTR MSG_CONTROL_RETRACT                = _UxGT("R√∫t mm");                               // Retract mm
+  LSTR MSG_CONTROL_RETRACT_SWAP           = _UxGT("R√∫t Trao.mm");                          // Swap Re.mm
+  LSTR MSG_CONTROL_RETRACTF               = _UxGT("R√∫t V");
+  LSTR MSG_CONTROL_RETRACT_ZHOP           = _UxGT("Nh·∫£y mm");                              // hop
+  LSTR MSG_CONTROL_RETRACT_RECOVER        = _UxGT("B·ªèR√∫t mm");                             // Unretr. mm
+  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAP   = _UxGT("B·ªèR√∫t T mm");                           // S Unretr. mm
+  LSTR MSG_CONTROL_RETRACT_RECOVERF       = _UxGT("B·ªèR√∫t V");                              // UnRet V
+  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAPF  = _UxGT("B·ªèR√∫t T V");                            // S UnRet V
+  LSTR MSG_AUTORETRACT                    = _UxGT("R√∫tT·ª±ƒê·ªông");                            // Auto-Retract
+  LSTR MSG_FILAMENT_SWAP_LENGTH           = _UxGT("Kho·∫£ng C√°ch R√∫t");                      // Retract Distance
+  LSTR MSG_TOOL_CHANGE                    = _UxGT("Thay ƒê·ªïi C√¥ng C·ª•");                     // Tool Change
+  LSTR MSG_TOOL_CHANGE_ZLIFT              = _UxGT("ƒê∆∞a L√™n Z");                            // Z Raise
+  LSTR MSG_SINGLENOZZLE_PRIME_SPEED       = _UxGT("T·ªëc ƒê·ªô Tu√¥n Ra");                       // Prime Speed
+  LSTR MSG_SINGLENOZZLE_RETRACT_SPEED     = _UxGT("T·ªëc ƒê·ªô R√∫t L·∫°i");                       // Retract Speed
+  LSTR MSG_FILAMENTCHANGE                 = _UxGT("Thay d√¢y nh·ª±a");                        // change filament
+  LSTR MSG_FILAMENTCHANGE_E               = _UxGT("Thay d√¢y nh·ª±a *");                      // change filament
+  LSTR MSG_FILAMENTLOAD                   = _UxGT("N·∫°p d√¢y nh·ª±a");                         // load filament
+  LSTR MSG_FILAMENTLOAD_E                 = _UxGT("N·∫°p d√¢y nh·ª±a *");                       // load filament
+  LSTR MSG_FILAMENTUNLOAD                 = _UxGT("D·ª° d√¢y nh·ª±a");                          // unload filament
+  LSTR MSG_FILAMENTUNLOAD_E               = _UxGT("D·ª° d√¢y nh·ª±a *");                        // unload filament
+  LSTR MSG_FILAMENTUNLOAD_ALL             = _UxGT("D·ª° t·∫•t c·∫£");                            // Unload All
+  LSTR MSG_ATTACH_MEDIA                   = _UxGT("Kh·ªüi t·∫°o ph∆∞∆°ng ti·ªán");                 // Attach media
+  LSTR MSG_CHANGE_MEDIA                   = _UxGT("Thay ph∆∞∆°ng ti·ªán");                     // Change midea
+  LSTR MSG_RELEASE_MEDIA                  = _UxGT("Ph√°t h√†nh ph∆∞∆°ng ti·ªán");
+  LSTR MSG_ZPROBE_OUT                     = _UxGT("ƒê·∫ßu D√≤ Z qua b√†n");                     // Z Probe past bed
+  LSTR MSG_SKEW_FACTOR                    = _UxGT("H·ªá s·ªë nghi√™ng");                        // Skew Factor
+  LSTR MSG_BLTOUCH                        = _UxGT("BLTOUCH");                              // BLTouch
+  LSTR MSG_BLTOUCH_SELFTEST               = _UxGT("T·ª± ki·ªÉm tra BLTOUCH ");                 // BLTouch Self-Test
+  LSTR MSG_BLTOUCH_RESET                  = _UxGT("B·∫∑t l·∫°i BLTouch");                      // Reset BLTouch
+  LSTR MSG_BLTOUCH_DEPLOY                 = _UxGT("ƒêem BLTouch");                          // Deploy BLTouch
+  LSTR MSG_BLTOUCH_STOW                   = _UxGT("C·∫•t BLTouch");                          // Stow BLTouch
+  LSTR MSG_MANUAL_DEPLOY                  = _UxGT("ƒêem ƒê·∫ßu D√≤-Z");                         // Deploy Z-Probe
+  LSTR MSG_MANUAL_STOW                    = _UxGT("C·∫•t ƒê·∫ßu D√≤-Z");                         // Stow Z-Probe
+  LSTR MSG_HOME_FIRST                     = _UxGT("V·ªÅ nh√† %s%s%s Tr∆∞∆°ÕÅc");
+  LSTR MSG_ZPROBE_ZOFFSET                 = _UxGT("ƒê·∫ßu D√≤ B√π ƒê·∫Øp Z");                      // Probe Z Offset
+  LSTR MSG_BABYSTEP_X                     = _UxGT("Nh√≠t X");                               // Babystep X
+  LSTR MSG_BABYSTEP_Y                     = _UxGT("Nh√≠t Y");
+  LSTR MSG_BABYSTEP_Z                     = _UxGT("Nh√≠t Z");
+  LSTR MSG_ENDSTOP_ABORT                  = _UxGT("H·ªßy b·ªè c√¥ng t·∫Øc");                      // Endstop abort
+  LSTR MSG_HEATING_FAILED_LCD             = _UxGT("S∆∞·ªüi ƒë·∫ßu phun kh√¥ng th√†nh c√¥ng");       // Heating failed
+  LSTR MSG_ERR_REDUNDANT_TEMP             = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô d∆∞");                // Err: REDUNDANT TEMP
+  LSTR MSG_THERMAL_RUNAWAY                = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát");                         // THERMAL RUNAWAY | problem
+  LSTR MSG_THERMAL_RUNAWAY_BED            = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát b√†n");                     // BED THERMAL RUNAWAY
+  LSTR MSG_ERR_MAXTEMP                    = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi ƒëa");            // Err: MAXTEMP
+  LSTR MSG_ERR_MINTEMP                    = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");         // Err: MINTEMP
+  LSTR MSG_HALTED                         = _UxGT("M√ÅY IN ƒê√É D∆ØÕÄNG LAÃ£I");                   // PRINTER HALTED
+  LSTR MSG_PLEASE_RESET                   = _UxGT("Xin b·∫∑t l·∫°i");                          // Please reset
+  LSTR MSG_SHORT_DAY                      = _UxGT("n");                                    // d - ng√†y - One character only
+  LSTR MSG_SHORT_HOUR                     = _UxGT("g");                                    // h - gi·ªù  - One character only
+  LSTR MSG_SHORT_MINUTE                   = _UxGT("p");                                    // m - ph√∫t - One character only
+  LSTR MSG_HEATING                        = _UxGT("ƒêang s∆∞·ªüi noÕÅng...");                    // heating
+  LSTR MSG_COOLING                        = _UxGT("ƒêang laÕÄm ngu√¥Ã£i...");                    // cooling
+  LSTR MSG_BED_HEATING                    = _UxGT("ƒêang s∆∞·ªüi nong b√†n...");                // bed heating
+  LSTR MSG_BED_COOLING                    = _UxGT("ƒêang laÕÄm ngu√¥Ã£i b√†n...");                // bed cooling
+  LSTR MSG_DELTA_CALIBRATE                = _UxGT("C√¢n Ch·ªânh Delta");                      // Delta calibration
+  LSTR MSG_DELTA_CALIBRATE_X              = _UxGT("Ch·ªânh X l·∫°i");
+  LSTR MSG_DELTA_CALIBRATE_Y              = _UxGT("Ch·ªânh Y l·∫°i");
+  LSTR MSG_DELTA_CALIBRATE_Z              = _UxGT("Ch·ªânh Z l·∫°i");
+  LSTR MSG_DELTA_CALIBRATE_CENTER         = _UxGT("Ch·ªânh Z Center");                       // Calibrate Center
+  LSTR MSG_DELTA_SETTINGS                 = _UxGT("C√†i ƒê·∫∑t Delta");                        // Delta Settings
+  LSTR MSG_DELTA_AUTO_CALIBRATE           = _UxGT("C√¢n Ch·ªânh T·ª± ƒê·ªông");                    // Auto Calibration
+  LSTR MSG_DELTA_HEIGHT_CALIBRATE         = _UxGT("ƒê·∫∑t Chi·ªÅu Cao Delta");                  // Set Delta Height
+  LSTR MSG_DELTA_Z_OFFSET_CALIBRATE       = _UxGT("ƒê·∫ßu D√≤ Z-B√π ƒê·∫Øp");                      // Probe Z-offset
+  LSTR MSG_DELTA_DIAG_ROD                 = _UxGT("G·∫≠y Ch√©o");                             // Diag Rod
+  LSTR MSG_DELTA_HEIGHT                   = _UxGT("Chi·ªÅu Cao");                            // Height
+  LSTR MSG_DELTA_RADIUS                   = _UxGT("B√°n K√≠nh");                             // Radius
+  LSTR MSG_INFO_MENU                      = _UxGT("V·ªÅ M√°y In");
+  LSTR MSG_INFO_PRINTER_MENU              = _UxGT("Th√¥ng Tin M√°y In");                     // Printer Info
+  LSTR MSG_3POINT_LEVELING                = _UxGT("San l·∫•p 3-ƒêi·ªÉm");                       // 3-Point Leveling
+  LSTR MSG_LINEAR_LEVELING                = _UxGT("San L·∫•p Tuy·∫øn T√≠nh");                   // Linear Leveling
+  LSTR MSG_BILINEAR_LEVELING              = _UxGT("San L·∫•p Song Tuy·∫øn");                   // Bilinear Leveling
+  LSTR MSG_UBL_LEVELING                   = _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t");               // Unified Bed Leveling
+  LSTR MSG_MESH_LEVELING                  = _UxGT("L∆∞·ªõi San L·∫•p");                         // Mesh Leveling
+  LSTR MSG_INFO_STATS_MENU                = _UxGT("Th·ªëng K√™ M√°y In");                      // Printer Stats
+  LSTR MSG_INFO_BOARD_MENU                = _UxGT("Th√¥ng Tin Bo M·∫°ch");                    // Board Info
+  LSTR MSG_INFO_THERMISTOR_MENU           = _UxGT("ƒêi·ªán Tr·ªü Nhi·ªát");                       // Thermistors
+  LSTR MSG_INFO_EXTRUDERS                 = _UxGT("M√°y ƒë√πn");                              // Extruders
+  LSTR MSG_INFO_BAUDRATE                  = _UxGT("Baud");                                 // Baud
+  LSTR MSG_INFO_PROTOCOL                  = _UxGT("Giao Th·ª©c");                            // Protocol
+  LSTR MSG_CASE_LIGHT                     = _UxGT("ƒê√®n Khu√¥ng");                           // Case light
+  LSTR MSG_CASE_LIGHT_BRIGHTNESS          = _UxGT("ƒê·ªô S√°ng");                              // Light Brightness
   #if LCD_WIDTH >= 20
-    PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("S·ªë In");                                // Print Count
-    PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS         = _UxGT("ƒê√£ ho√†n th√†nh");
-    PROGMEM Language_Str MSG_INFO_PRINT_TIME               = _UxGT("T√¥Ãâng s·ªë th·ªùi gian in");                // Total print time
-    PROGMEM Language_Str MSG_INFO_PRINT_LONGEST            = _UxGT("Th·ªùi gian vi·ªác l√¢u nh·∫•t");              // Longest job time
-    PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT           = _UxGT("T·ªïng s·ªë ƒë√πn");                          // Extruded total
+    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("S·ªë In");                                // Print Count
+    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("ƒê√£ ho√†n th√†nh");
+    LSTR MSG_INFO_PRINT_TIME              = _UxGT("T√¥Ãâng s·ªë th·ªùi gian in");                // Total print time
+    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("Th·ªùi gian vi·ªác l√¢u nh·∫•t");              // Longest job time
+    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("T·ªïng s·ªë ƒë√πn");                          // Extruded total
   #else
-    PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("In");                                   // prints
-    PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS         = _UxGT("ƒê√£ ho√†n th√†nh");                        // Completed
-    PROGMEM Language_Str MSG_INFO_PRINT_TIME               = _UxGT("T√¥Ãâng s·ªë");                             // total
-    PROGMEM Language_Str MSG_INFO_PRINT_LONGEST            = _UxGT("D√†i nh·∫•t");                             // Longest
-    PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT           = _UxGT("ƒê√£ √©p ƒë√πn");
+    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("In");                                   // prints
+    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("ƒê√£ ho√†n th√†nh");                        // Completed
+    LSTR MSG_INFO_PRINT_TIME              = _UxGT("T√¥Ãâng s·ªë");                             // total
+    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("D√†i nh·∫•t");                             // Longest
+    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("ƒê√£ √©p ƒë√πn");
   #endif
-  PROGMEM Language_Str MSG_INFO_MIN_TEMP                   = _UxGT("Nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");                   // Min Temp
-  PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("Nhi·ªát ƒë·ªô t·ªëi ƒëa");                      // Max temp
-  PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("B·ªô ngu·ªìn");                             // PSU
-  PROGMEM Language_Str MSG_DRIVE_STRENGTH                  = _UxGT("S·ª©c m·∫°nh ·ªï ƒëƒ©a");                       // Drive Strength
-  PROGMEM Language_Str MSG_DAC_PERCENT_A                   = LCD_STR_A _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");        // X Driver %
-  PROGMEM Language_Str MSG_DAC_PERCENT_B                   = LCD_STR_B _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  PROGMEM Language_Str MSG_DAC_PERCENT_C                   = LCD_STR_C _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  PROGMEM Language_Str MSG_DAC_PERCENT_I                   = LCD_STR_I _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  PROGMEM Language_Str MSG_DAC_PERCENT_J                   = LCD_STR_J _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  PROGMEM Language_Str MSG_DAC_PERCENT_K                   = LCD_STR_K _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  PROGMEM Language_Str MSG_DAC_PERCENT_E                   = _UxGT("E % tr√¨nh ƒëi·ªÅu khi·ªÉn");
-  PROGMEM Language_Str MSG_DAC_EEPROM_WRITE                = _UxGT("Ghi DAC EEPROM");                       // DAC EEPROM Write
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_PAUSE    = _UxGT("In t·∫°m d·ª´ng");                          // PRINT PAUSED
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_LOAD     = _UxGT("N·∫°p d√¢y nh·ª±a");
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_UNLOAD   = _UxGT("D·ª° d√¢y nh·ª±a");                          // unload filament
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_HEADER   = _UxGT("T√πy ch·ªçn h√¥ÕÄi phuÃ£c:");                   // RESUME OPTIONS
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_PURGE    = _UxGT("X·∫£ th√™m");                              // Purge more
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_RESUME   = _UxGT("Ti·∫øp t·ª•c");                             // continue
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_NOZZLE          = _UxGT("  ƒê·∫ßu Phun: ");                         // Nozzle
-  PROGMEM Language_Str MSG_RUNOUT_SENSOR_ENABLE            = _UxGT("C·∫£m Bi·∫øn H·∫øt");                         // Runout Sensor
-  PROGMEM Language_Str MSG_KILL_HOMING_FAILED              = _UxGT("S∆∞Ã£ nh√† kh√¥ng th√†nh c√¥ng");              // Homing failed
-  PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT(" kh√¥ng th√†nh c√¥ng");                    // Probing failed
+  LSTR MSG_INFO_MIN_TEMP                  = _UxGT("Nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");                   // Min Temp
+  LSTR MSG_INFO_MAX_TEMP                  = _UxGT("Nhi·ªát ƒë·ªô t·ªëi ƒëa");                      // Max temp
+  LSTR MSG_INFO_PSU                       = _UxGT("B·ªô ngu·ªìn");                             // PSU
+  LSTR MSG_DRIVE_STRENGTH                 = _UxGT("S·ª©c m·∫°nh ·ªï ƒëƒ©a");                       // Drive Strength
+  LSTR MSG_DAC_PERCENT_A                  = LCD_STR_A _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");        // X Driver %
+  LSTR MSG_DAC_PERCENT_B                  = LCD_STR_B _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  LSTR MSG_DAC_PERCENT_C                  = LCD_STR_C _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  LSTR MSG_DAC_PERCENT_I                  = LCD_STR_I _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  LSTR MSG_DAC_PERCENT_J                  = LCD_STR_J _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  LSTR MSG_DAC_PERCENT_K                  = LCD_STR_K _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  LSTR MSG_DAC_PERCENT_E                  = _UxGT("E % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("Ghi DAC EEPROM");                       // DAC EEPROM Write
+  LSTR MSG_FILAMENT_CHANGE_HEADER_PAUSE   = _UxGT("In t·∫°m d·ª´ng");                          // PRINT PAUSED
+  LSTR MSG_FILAMENT_CHANGE_HEADER_LOAD    = _UxGT("N·∫°p d√¢y nh·ª±a");
+  LSTR MSG_FILAMENT_CHANGE_HEADER_UNLOAD  = _UxGT("D·ª° d√¢y nh·ª±a");                          // unload filament
+  LSTR MSG_FILAMENT_CHANGE_OPTION_HEADER  = _UxGT("T√πy ch·ªçn h√¥ÕÄi phuÃ£c:");                   // RESUME OPTIONS
+  LSTR MSG_FILAMENT_CHANGE_OPTION_PURGE   = _UxGT("X·∫£ th√™m");                              // Purge more
+  LSTR MSG_FILAMENT_CHANGE_OPTION_RESUME  = _UxGT("Ti·∫øp t·ª•c");                             // continue
+  LSTR MSG_FILAMENT_CHANGE_NOZZLE         = _UxGT("  ƒê·∫ßu Phun: ");                         // Nozzle
+  LSTR MSG_RUNOUT_SENSOR_ENABLE           = _UxGT("C·∫£m Bi·∫øn H·∫øt");                         // Runout Sensor
+  LSTR MSG_KILL_HOMING_FAILED             = _UxGT("S∆∞Ã£ nh√† kh√¥ng th√†nh c√¥ng");              // Homing failed
+  LSTR MSG_LCD_PROBING_FAILED             = _UxGT(" kh√¥ng th√†nh c√¥ng");                    // Probing failed
 
   //
   // Filament Change screens show up to 3 lines on a 4-line display
   //                        ...or up to 2 lines on a 3-line display
   //
   #if LCD_HEIGHT >= 4
-    PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_2_LINE("Nh·∫•n n√∫t", "ƒë·ªÉ ti·∫øp t·ª•c in")); // Press button to resume print
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_3_LINE("Ch·ªù cho s∆∞Ã£", "thay ƒë·ªïi d√¢y nh·ª±a", "bƒÉÕÅt ƒë√¢ÕÄu")); // wait for filament change to start
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_3_LINE("ƒêuÕÅt d√¢y nh·ª±a vaÕÄo", "v√† nh·∫•n n√∫t", "ƒë·ªÉ ti·∫øp t·ª•c")); // insert filament and press button to continue                       //
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_2_LINE("Nh·∫•n n√∫t", "ƒë·ªÉ l√†m n√≥ng ƒë·∫ßu phun")); // Press button to heat nozzle
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_2_LINE("ƒê·∫ßu phun ƒëang n√≥ng l√™n", "Xin ch·ªù...")); // Nozzle heating Please wait
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_2_LINE("Ch·ªù tro", "d√¢y nh·ª±a ra"));   // Wait for filament unload
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_2_LINE("Ch·ªù tro", "d√¢y nh·ª±a vaÕÄo"));  // Wait for filament load
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_2_LINE("Ch·ªù tro", "x·∫£ d√¢y nh·ª±a"));   // wait for filament purge
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE    = _UxGT(MSG_2_LINE("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c", "x·∫£ d√¢y nh·ª±a")); // Click to finish d√¢y nh·ª±a purge
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_2_LINE("Ch·ªù tro in", "ti·∫øp t·ª•c...")); // Wait for print to resume
+    LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_2_LINE("Nh·∫•n n√∫t", "ƒë·ªÉ ti·∫øp t·ª•c in")); // Press button to resume print
+    LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_3_LINE("Ch·ªù cho s∆∞Ã£", "thay ƒë·ªïi d√¢y nh·ª±a", "bƒÉÕÅt ƒë√¢ÕÄu")); // wait for filament change to start
+    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_3_LINE("ƒêuÕÅt d√¢y nh·ª±a vaÕÄo", "v√† nh·∫•n n√∫t", "ƒë·ªÉ ti·∫øp t·ª•c")); // insert filament and press button to continue                       //
+    LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_2_LINE("Nh·∫•n n√∫t", "ƒë·ªÉ l√†m n√≥ng ƒë·∫ßu phun")); // Press button to heat nozzle
+    LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_2_LINE("ƒê·∫ßu phun ƒëang n√≥ng l√™n", "Xin ch·ªù...")); // Nozzle heating Please wait
+    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_2_LINE("Ch·ªù tro", "d√¢y nh·ª±a ra"));   // Wait for filament unload
+    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_2_LINE("Ch·ªù tro", "d√¢y nh·ª±a vaÕÄo"));  // Wait for filament load
+    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_2_LINE("Ch·ªù tro", "x·∫£ d√¢y nh·ª±a"));   // wait for filament purge
+    LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_2_LINE("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c", "x·∫£ d√¢y nh·ª±a")); // Click to finish d√¢y nh·ª±a purge
+    LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_2_LINE("Ch·ªù tro in", "ti·∫øp t·ª•c...")); // Wait for print to resume
   #else // LCD_HEIGHT < 4
-    PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_1_LINE("Nh·∫•n n√∫t ƒë·ªÉ ti·∫øp t·ª•c"));     // Click to continue
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_1_LINE("Xin ch·ªù..."));
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_1_LINE("Ch√®n v√† nh·∫•n"));             // Insert and Click
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_1_LINE("Nh·∫•n ƒë·ªÉ s∆∞·ªüi"));             // Click to heat
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_1_LINE("ƒêang s∆∞·ªüi n√≥ng"));           // Heating
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_1_LINE("ƒêang d·ª° ra..."));            // Ejecting
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_1_LINE("ƒêang n·∫°p..."));              // Loading
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_1_LINE("ƒêang x·∫£..."));               // Purging
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE    = _UxGT(MSG_1_LINE("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c"));     // Click to finish
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_1_LINE("ƒêang ti·∫øp t·ª•c..."));         // Resuming
+    LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_1_LINE("Nh·∫•n n√∫t ƒë·ªÉ ti·∫øp t·ª•c"));     // Click to continue
+    LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_1_LINE("Xin ch·ªù..."));
+    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_1_LINE("Ch√®n v√† nh·∫•n"));             // Insert and Click
+    LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_1_LINE("Nh·∫•n ƒë·ªÉ s∆∞·ªüi"));             // Click to heat
+    LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_1_LINE("ƒêang s∆∞·ªüi n√≥ng"));           // Heating
+    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_1_LINE("ƒêang d·ª° ra..."));            // Ejecting
+    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_1_LINE("ƒêang n·∫°p..."));              // Loading
+    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_1_LINE("ƒêang x·∫£..."));               // Purging
+    LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_1_LINE("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c"));     // Click to finish
+    LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_1_LINE("ƒêang ti·∫øp t·ª•c..."));         // Resuming
   #endif // LCD_HEIGHT < 4
 
-  PROGMEM Language_Str MSG_TMC_DRIVERS                     = _UxGT("Tr√¨nh ƒëi·ªÅu khi·ªÉn TMC");                 // TMC drivers
-  PROGMEM Language_Str MSG_TMC_CURRENT                     = _UxGT("D√≤ng ƒëi·ªán tr√¨nh ƒëi·ªÅu khi·ªÉn");           // Driver current
-  PROGMEM Language_Str MSG_TMC_HYBRID_THRS                 = _UxGT("Ng∆∞·ª°ng H·ªón H·ª£p");                       // Hybrid threshold
-  PROGMEM Language_Str MSG_TMC_HOMING_THRS                 = _UxGT("V√¥ c·∫£m bi·∫øn");                          // Sensorless homing
-  PROGMEM Language_Str MSG_TMC_STEPPING_MODE               = _UxGT("Ch·∫ø ƒë·ªô t·ª´ng b∆∞·ªõc");                     // Stepping mode
-  PROGMEM Language_Str MSG_TMC_STEALTH_ENABLED             = _UxGT("C·∫ØtT√†ngH√¨nh ƒë∆∞·ª£c k√≠ch ho·∫°t");           // StealthChop enabled
+  LSTR MSG_TMC_DRIVERS                    = _UxGT("Tr√¨nh ƒëi·ªÅu khi·ªÉn TMC");                 // TMC drivers
+  LSTR MSG_TMC_CURRENT                    = _UxGT("D√≤ng ƒëi·ªán tr√¨nh ƒëi·ªÅu khi·ªÉn");           // Driver current
+  LSTR MSG_TMC_HYBRID_THRS                = _UxGT("Ng∆∞·ª°ng H·ªón H·ª£p");                       // Hybrid threshold
+  LSTR MSG_TMC_HOMING_THRS                = _UxGT("V√¥ c·∫£m bi·∫øn");                          // Sensorless homing
+  LSTR MSG_TMC_STEPPING_MODE              = _UxGT("Ch·∫ø ƒë·ªô t·ª´ng b∆∞·ªõc");                     // Stepping mode
+  LSTR MSG_TMC_STEALTH_ENABLED            = _UxGT("C·∫ØtT√†ngH√¨nh ƒë∆∞·ª£c k√≠ch ho·∫°t");           // StealthChop enabled
 }

commit 9046254a14b92b6bdf1696b1ed839b71615a0772
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Aug 20 15:40:17 2021 -0500

    üåê Update menu titles, add more IJK (#22605)
    
    Followup to #19112

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 013a915921..9ee93a56bb 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -52,9 +52,9 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_DEBUG_MENU                      = _UxGT("Menu g·ª° l·ªói");                          // Debug Menu
   PROGMEM Language_Str MSG_PROGRESS_BAR_TEST               = _UxGT("Ki·ªÉm tra ti·∫øn ƒë·ªô");                     // Progress bar test
   PROGMEM Language_Str MSG_AUTO_HOME                       = _UxGT("V·ªÅ nh√† t·ª± ƒë·ªông");                       // Auto home
-  PROGMEM Language_Str MSG_AUTO_HOME_X                     = _UxGT("V·ªÅ nh√† X");                             // home x
-  PROGMEM Language_Str MSG_AUTO_HOME_Y                     = _UxGT("V·ªÅ nh√† Y");                             // home y
-  PROGMEM Language_Str MSG_AUTO_HOME_Z                     = _UxGT("V·ªÅ nh√† Z");
+  PROGMEM Language_Str MSG_AUTO_HOME_X                     = _UxGT("V·ªÅ nh√† X");                             // home X
+  PROGMEM Language_Str MSG_AUTO_HOME_Y                     = _UxGT("V·ªÅ nh√† Y");                             // home Y
+  PROGMEM Language_Str MSG_AUTO_HOME_Z                     = _UxGT("V·ªÅ nh√† Z");                             // home Z
   PROGMEM Language_Str MSG_AUTO_Z_ALIGN                    = _UxGT("Ch·ªânh canh Z t·ª± ƒë·ªông");
   PROGMEM Language_Str MSG_LEVEL_BED_HOMING                = _UxGT("ƒêang v·ªÅ nh√† XYZ");                      // Homing XYZ
   PROGMEM Language_Str MSG_LEVEL_BED_WAITING               = _UxGT("Nh·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu");                      // Click to Begin
@@ -160,7 +160,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_UBL_STORAGE_SLOT                = _UxGT("Khe nh·ªõ");                              // Memory Slot
   PROGMEM Language_Str MSG_UBL_LOAD_MESH                   = _UxGT("T·∫£i l∆∞·ªõi b√†n");                         // Load Bed Mesh
   PROGMEM Language_Str MSG_UBL_SAVE_MESH                   = _UxGT("L∆∞u l∆∞·ªõi b√†n");                         // Save Bed Mesh
-  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("%i l∆∞·ªõi ƒë∆∞·ª£c n·∫°p");                // Mesh %i loaded
+  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("%i l∆∞·ªõi ƒë∆∞·ª£c n·∫°p");                     // Mesh %i loaded
   PROGMEM Language_Str MSG_MESH_SAVED                      = _UxGT("%i l∆∞·ªõi ƒë√£ l∆∞u");
   PROGMEM Language_Str MSG_NO_STORAGE                      = _UxGT("Kh√¥ng l∆∞u tr·ªØ");                        // No Storage
   PROGMEM Language_Str MSG_UBL_SAVE_ERROR                  = _UxGT("ƒêi√™ÕÄu sai: L∆∞u UBL");                    // Err: UBL Save
@@ -200,7 +200,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_MOVE_Y                          = _UxGT("Di chuy·ªÉn Y");
   PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("Di chuy·ªÉn Z");
   PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("M√°y ƒë√πn");                              // Extruder
-  PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("M√°y ƒë√πn *");                            // Extruder
+  PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("M√°y ƒë√πn *");
   PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("ƒê·∫ßu n√≥ng qu√° l·∫°nh");                    // Hotend too cold
   PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("Di chuy·ªÉn 0.1mm");                      // Move 0.1mm
   PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("Di chuy·ªÉn 1mm");                        // Move 1mm
@@ -209,12 +209,12 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_SPEED                           = _UxGT("T·ªëc ƒë·ªô");                               // Speed
   PROGMEM Language_Str MSG_BED_Z                           = _UxGT("Z B√†n");
   PROGMEM Language_Str MSG_NOZZLE                          = _UxGT("ƒê·∫ßu phun");                             // Nozzle
-  PROGMEM Language_Str MSG_NOZZLE_N                        = _UxGT("ƒê·∫ßu phun ~");                           // Nozzle
+  PROGMEM Language_Str MSG_NOZZLE_N                        = _UxGT("ƒê·∫ßu phun ~");
   PROGMEM Language_Str MSG_BED                             = _UxGT("B√†n");                                  // bed
   PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("T·ªëc ƒë·ªô qu·∫°t");                          // fan speed
-  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("T·ªëc ƒë·ªô qu·∫°t ~");                        // fan speed
+  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("T·ªëc ƒë·ªô qu·∫°t ~");
   PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£");                      // Extra fan speed
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ ~");                    // Extra fan speed
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ ~");
   PROGMEM Language_Str MSG_FLOW                            = _UxGT("L∆∞u L∆∞·ª£ng");
   PROGMEM Language_Str MSG_FLOW_N                          = _UxGT("L∆∞u L∆∞·ª£ng ~");
   PROGMEM Language_Str MSG_CONTROL                         = _UxGT("ƒêi·ªÅu khi·ªÉn");                           // Control
@@ -231,28 +231,40 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_VA_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_A;
   PROGMEM Language_Str MSG_VB_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_B;
   PROGMEM Language_Str MSG_VC_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_C;
+  PROGMEM Language_Str MSG_VI_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_I;
+  PROGMEM Language_Str MSG_VJ_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_J;
+  PROGMEM Language_Str MSG_VK_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_K;
   PROGMEM Language_Str MSG_VE_JERK                         = _UxGT("Gi·∫≠t-Ve");
   PROGMEM Language_Str MSG_JUNCTION_DEVIATION              = _UxGT("ƒê·ªô L·ªách Ch√¥ÃÉ Giao");                    // Junction Dev
   PROGMEM Language_Str MSG_VELOCITY                        = _UxGT("V√¢Ã£n t√¥ÕÅc");                              // velocity
   PROGMEM Language_Str MSG_VMAX_A                          = _UxGT("Vƒëa") LCD_STR_A;                        // Vmax
-  PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("Vƒëa") LCD_STR_B;                        // Vmax
-  PROGMEM Language_Str MSG_VMAX_C                          = _UxGT("Vƒëa") LCD_STR_C;                        // Vmax
-  PROGMEM Language_Str MSG_VMAX_E                          = _UxGT("Vƒëa") LCD_STR_E;                        // Vmax
-  PROGMEM Language_Str MSG_VMAX_EN                         = _UxGT("Vƒëa *");                                // Vmax
+  PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("Vƒëa") LCD_STR_B;
+  PROGMEM Language_Str MSG_VMAX_C                          = _UxGT("Vƒëa") LCD_STR_C;
+  PROGMEM Language_Str MSG_VMAX_I                          = _UxGT("Vƒëa") LCD_STR_I;
+  PROGMEM Language_Str MSG_VMAX_J                          = _UxGT("Vƒëa") LCD_STR_J;
+  PROGMEM Language_Str MSG_VMAX_K                          = _UxGT("Vƒëa") LCD_STR_K;
+  PROGMEM Language_Str MSG_VMAX_E                          = _UxGT("Vƒëa") LCD_STR_E;
+  PROGMEM Language_Str MSG_VMAX_EN                         = _UxGT("Vƒëa *");
   PROGMEM Language_Str MSG_VMIN                            = _UxGT("Vthi·ªÉu");                               // Vmin
   PROGMEM Language_Str MSG_VTRAV_MIN                       = _UxGT("Vchuy·ªÉn thi·ªÉu");                        // VTrav min
   PROGMEM Language_Str MSG_ACCELERATION                    = _UxGT("S·ª± tƒÉng t·ªëc");                          // Acceleration
   PROGMEM Language_Str MSG_AMAX_A                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_A;                // Amax
-  PROGMEM Language_Str MSG_AMAX_B                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_B;                // Amax
-  PROGMEM Language_Str MSG_AMAX_C                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_C;                // Amax
-  PROGMEM Language_Str MSG_AMAX_E                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_E;                // Amax
-  PROGMEM Language_Str MSG_AMAX_EN                         = _UxGT("TƒÉng t·ªëc ca *");                        // Amax
+  PROGMEM Language_Str MSG_AMAX_B                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_B;
+  PROGMEM Language_Str MSG_AMAX_C                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_C;
+  PROGMEM Language_Str MSG_AMAX_I                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_I;                // Amax
+  PROGMEM Language_Str MSG_AMAX_J                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_J;
+  PROGMEM Language_Str MSG_AMAX_K                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_K;
+  PROGMEM Language_Str MSG_AMAX_E                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_E;
+  PROGMEM Language_Str MSG_AMAX_EN                         = _UxGT("TƒÉng t·ªëc ca *");
   PROGMEM Language_Str MSG_A_RETRACT                       = _UxGT("TT-R√∫t");                               // A-retract
   PROGMEM Language_Str MSG_A_TRAVEL                        = _UxGT("TT-Chuy·ªÉn");                            // A-travel
   PROGMEM Language_Str MSG_STEPS_PER_MM                    = _UxGT("B∆∞∆°ÕÅc/mm");                              // Steps
-  PROGMEM Language_Str MSG_A_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_A _UxGT("/mm");               // Asteps/mm
+  PROGMEM Language_Str MSG_A_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_A _UxGT("/mm");          // Steps/mm
   PROGMEM Language_Str MSG_B_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_B _UxGT("/mm");
   PROGMEM Language_Str MSG_C_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_C _UxGT("/mm");
+  PROGMEM Language_Str MSG_I_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_I _UxGT("/mm");          // Steps/mm
+  PROGMEM Language_Str MSG_J_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_J _UxGT("/mm");
+  PROGMEM Language_Str MSG_K_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_K _UxGT("/mm");
   PROGMEM Language_Str MSG_E_STEPS                         = _UxGT("B∆∞·ªõcE/mm");
   PROGMEM Language_Str MSG_EN_STEPS                        = _UxGT("B∆∞·ªõc */mm");
   PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Nhi·ªát ƒë·ªô");                             // Temperature
@@ -388,10 +400,13 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("Nhi·ªát ƒë·ªô t·ªëi ƒëa");                      // Max temp
   PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("B·ªô ngu·ªìn");                             // PSU
   PROGMEM Language_Str MSG_DRIVE_STRENGTH                  = _UxGT("S·ª©c m·∫°nh ·ªï ƒëƒ©a");                       // Drive Strength
-  PROGMEM Language_Str MSG_DAC_PERCENT_X                   = _UxGT("X % tr√¨nh ƒëi·ªÅu khi·ªÉn");                 // X Driver %
-  PROGMEM Language_Str MSG_DAC_PERCENT_Y                   = _UxGT("Y % tr√¨nh ƒëi·ªÅu khi·ªÉn");                 // Y Driver %
-  PROGMEM Language_Str MSG_DAC_PERCENT_Z                   = _UxGT("Z % tr√¨nh ƒëi·ªÅu khi·ªÉn");                 // Z Driver %
-  PROGMEM Language_Str MSG_DAC_PERCENT_E                   = _UxGT("E % tr√¨nh ƒëi·ªÅu khi·ªÉn");                 // E Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_A                   = LCD_STR_A _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");        // X Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_B                   = LCD_STR_B _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  PROGMEM Language_Str MSG_DAC_PERCENT_C                   = LCD_STR_C _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  PROGMEM Language_Str MSG_DAC_PERCENT_I                   = LCD_STR_I _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  PROGMEM Language_Str MSG_DAC_PERCENT_J                   = LCD_STR_J _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  PROGMEM Language_Str MSG_DAC_PERCENT_K                   = LCD_STR_K _UxGT(" % tr√¨nh ƒëi·ªÅu khi·ªÉn");
+  PROGMEM Language_Str MSG_DAC_PERCENT_E                   = _UxGT("E % tr√¨nh ƒëi·ªÅu khi·ªÉn");
   PROGMEM Language_Str MSG_DAC_EEPROM_WRITE                = _UxGT("Ghi DAC EEPROM");                       // DAC EEPROM Write
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_PAUSE    = _UxGT("In t·∫°m d·ª´ng");                          // PRINT PAUSED
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_LOAD     = _UxGT("N·∫°p d√¢y nh·ª±a");

commit b1bc2e80036131cde58b4fbc02b76ac08b5a7924
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jul 25 02:12:48 2021 -0500

    üåê Level Corners => Bed Tramming

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 825666d1e1..013a915921 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -90,7 +90,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_MOVE_AXIS                       = _UxGT("Di chuy·ªÉn tr·ª•c");                       // Move axis
   PROGMEM Language_Str MSG_BED_LEVELING                    = _UxGT("San L·∫•p B√†n");                          // Bed Leveling
   PROGMEM Language_Str MSG_LEVEL_BED                       = _UxGT("LaÕÄm bƒÉÕÄng m·∫∑t b√†n");                     // Level bed
-  PROGMEM Language_Str MSG_LEVEL_CORNERS                   = _UxGT("LaÕÄm bƒÉÕÄng g√≥c b√†n");                     // Level corners
+  PROGMEM Language_Str MSG_BED_TRAMMING                    = _UxGT("LaÕÄm bƒÉÕÄng g√≥c b√†n");                     // Level corners
   PROGMEM Language_Str MSG_NEXT_CORNER                     = _UxGT("G√≥c ti·∫øp theo");                        // Next corner
   PROGMEM Language_Str MSG_EDITING_STOPPED                 = _UxGT("Ch·ªânh l∆∞·ªõi ƒë√£ d·ª´ng");                   // Mesh Editing Stopped
   PROGMEM Language_Str MSG_MESH_X                          = _UxGT("MuÃ£c luÃ£c X");                            // Index X

commit 81ca2dd273358a0cfc0f65d5b4900d83abc96d69
Author: S√©bastien Gari√©py <46988275+BeePerNet@users.noreply.github.com>
Date:   Sun Jun 27 17:44:49 2021 -0400

    üåê MSG_MOVE_100MM (#22242)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index f0b7f732ed..825666d1e1 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -205,6 +205,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("Di chuy·ªÉn 0.1mm");                      // Move 0.1mm
   PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("Di chuy·ªÉn 1mm");                        // Move 1mm
   PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("Di chuy·ªÉn 10mm");                       // Move 10mm
+  PROGMEM Language_Str MSG_MOVE_100MM                      = _UxGT("Di chuy·ªÉn 100mm");                      // Move 100mm
   PROGMEM Language_Str MSG_SPEED                           = _UxGT("T·ªëc ƒë·ªô");                               // Speed
   PROGMEM Language_Str MSG_BED_Z                           = _UxGT("Z B√†n");
   PROGMEM Language_Str MSG_NOZZLE                          = _UxGT("ƒê·∫ßu phun");                             // Nozzle

commit df1ef496d1a88996cb1156fe933df59c6aaecbac
Author: borland1 <barryorlando@hotmail.com>
Date:   Tue Mar 23 06:21:11 2021 -0700

    Main / Config Custom Submenus (#18177)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index fad32507ce..f0b7f732ed 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -96,7 +96,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_MESH_X                          = _UxGT("MuÃ£c luÃ£c X");                            // Index X
   PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("MuÃ£c luÃ£c Y");
   PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Gi√° tr·ªã Z");                            // Z Value
-  PROGMEM Language_Str MSG_USER_MENU                       = _UxGT("C√°c l·ªánh t·ª± ch·ªçn");                     // Custom Commands
+  PROGMEM Language_Str MSG_CUSTOM_COMMANDS                 = _UxGT("C√°c l·ªánh t·ª± ch·ªçn");                     // Custom Commands
   PROGMEM Language_Str MSG_UBL_DOING_G29                   = _UxGT("ƒêang ch·∫°y G29");                        // Doing G29
   PROGMEM Language_Str MSG_UBL_TOOLS                       = _UxGT("C√¥ng c·ª• UBL");                          // UBL tools
   PROGMEM Language_Str MSG_UBL_LEVEL_BED                   = _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t (UBL)");         // Unified Bed Leveling

commit f8e83f79c5012c70bae788308f8665f117c4f93c
Author: Simone Primarosa <simonepri@outlook.com>
Date:   Sat Nov 21 03:36:19 2020 +0100

    Superscript substitution (#20219)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 8a1cfad92a..fad32507ce 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -257,7 +257,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Nhi·ªát ƒë·ªô");                             // Temperature
   PROGMEM Language_Str MSG_MOTION                          = _UxGT("Chuy·ªÉn ƒë·ªông");                          // Motion
   PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("V·∫≠t li·ªáu in");                          // d√¢y nh·ª±a
-  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("E b·∫±ng mm¬≥");                           // E in mm
+  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("E b·∫±ng mm") SUPERSCRIPT_THREE;                           // E in mm
   PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a");                      // Fil. Dai.
   PROGMEM Language_Str MSG_FILAMENT_DIAM_E                 = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a *");
   PROGMEM Language_Str MSG_FILAMENT_UNLOAD                 = _UxGT("D·ª° mm");                                // unload mm

commit 18fb4b1ce1cff0843bb2ac2cb810dd15081747b4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Nov 7 17:43:47 2020 -0600

    MSG_AUTOSTART => MSG_RUN_AUTO_FILES

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index f7cf606575..8a1cfad92a 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -47,7 +47,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_MAIN                            = _UxGT("Ch√≠nh");                                // Main
   PROGMEM Language_Str MSG_ADVANCED_SETTINGS               = _UxGT("Thi·∫øt l·∫≠p c·∫•p cao");                    // Advanced Settings
   PROGMEM Language_Str MSG_CONFIGURATION                   = _UxGT("C·∫•u h√¨nh");                             // Configuration
-  PROGMEM Language_Str MSG_AUTOSTART                       = _UxGT("Kh·ªüi ch·∫°y t·ª± ƒë·ªông");                    // Autostart
+  PROGMEM Language_Str MSG_RUN_AUTO_FILES                  = _UxGT("Kh·ªüi ch·∫°y t·ª± ƒë·ªông");                    // Autostart
   PROGMEM Language_Str MSG_DISABLE_STEPPERS                = _UxGT("T·∫Øt ƒë·ªông c∆° b∆∞·ªõc");                     // Disable steppers
   PROGMEM Language_Str MSG_DEBUG_MENU                      = _UxGT("Menu g·ª° l·ªói");                          // Debug Menu
   PROGMEM Language_Str MSG_PROGRESS_BAR_TEST               = _UxGT("Ki·ªÉm tra ti·∫øn ƒë·ªô");                     // Progress bar test

commit b31e358270608afd02be895d4e3ca43ae927d31e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 6 02:59:51 2020 -0500

    Improve retract / unretract labels

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index fb60a5d821..f7cf606575 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -293,11 +293,11 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_CONTROL_RETRACT_SWAP            = _UxGT("R√∫t Trao.mm");                          // Swap Re.mm
   PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("R√∫t V");
   PROGMEM Language_Str MSG_CONTROL_RETRACT_ZHOP            = _UxGT("Nh·∫£y mm");                              // hop
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("B·ªèR√∫t mm");                             // UnRet mm
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("B·ªèR√∫t T mm");                           // S UnRet mm
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("B·ªèR√∫t mm");                             // Unretr. mm
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("B·ªèR√∫t T mm");                           // S Unretr. mm
   PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("B·ªèR√∫t V");                              // UnRet V
   PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAPF   = _UxGT("B·ªèR√∫t T V");                            // S UnRet V
-  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("R√∫tT·ª±ƒê·ªông");                            // AutoRetr.
+  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("R√∫tT·ª±ƒê·ªông");                            // Auto-Retract
   PROGMEM Language_Str MSG_FILAMENT_SWAP_LENGTH            = _UxGT("Kho·∫£ng C√°ch R√∫t");                      // Retract Distance
   PROGMEM Language_Str MSG_TOOL_CHANGE                     = _UxGT("Thay ƒê·ªïi C√¥ng C·ª•");                     // Tool Change
   PROGMEM Language_Str MSG_TOOL_CHANGE_ZLIFT               = _UxGT("ƒê∆∞a L√™n Z");                            // Z Raise

commit 4424645e04c9e75462d36de8f7a82e67cc9c262e
Author: qwewer0 <57561110+qwewer0@users.noreply.github.com>
Date:   Mon Sep 28 21:53:50 2020 +0200

    Multi-line comments cleanup (#19535)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index afd87d3798..fb60a5d821 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -26,7 +26,6 @@
  *
  * LCD Menu Messages
  * See also https://marlinfw.org/docs/development/lcd_language.html
- *
  */
 namespace Language_vi {
   using namespace Language_en; // Inherit undefined strings from English

commit 979876e958e73e642b51eb655461c92947fe1deb
Author: ellensp <ellensp@hotmail.com>
Date:   Mon Sep 14 16:58:39 2020 +1200

    Improve temperature runaway, idle timeout (#19339)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 5074901883..afd87d3798 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -335,8 +335,6 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_THERMAL_RUNAWAY_BED             = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát b√†n");                     // BED THERMAL RUNAWAY
   PROGMEM Language_Str MSG_ERR_MAXTEMP                     = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi ƒëa");            // Err: MAXTEMP
   PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");         // Err: MINTEMP
-  PROGMEM Language_Str MSG_ERR_MAXTEMP_BED                 = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô b√†n t·ªëi ƒëa");        // Err: MAXTEMP BED
-  PROGMEM Language_Str MSG_ERR_MINTEMP_BED                 = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô b√†n t·ªëi thi·ªÉu");     // Err: MINTEMP BED
   PROGMEM Language_Str MSG_HALTED                          = _UxGT("M√ÅY IN ƒê√É D∆ØÕÄNG LAÃ£I");                   // PRINTER HALTED
   PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Xin b·∫∑t l·∫°i");                          // Please reset
   PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("n");                                    // d - ng√†y - One character only

commit b2ba9009d045fc21e7a923e92ab9a91e4275247d
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Thu Sep 10 23:47:58 2020 +0200

    Fix "too cold" in M600 (#19332)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 02453e5879..5074901883 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -405,7 +405,6 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_RUNOUT_SENSOR_ENABLE            = _UxGT("C·∫£m Bi·∫øn H·∫øt");                         // Runout Sensor
   PROGMEM Language_Str MSG_KILL_HOMING_FAILED              = _UxGT("S∆∞Ã£ nh√† kh√¥ng th√†nh c√¥ng");              // Homing failed
   PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT(" kh√¥ng th√†nh c√¥ng");                    // Probing failed
-  PROGMEM Language_Str MSG_M600_TOO_COLD                   = _UxGT("M600: Qu√° l·∫°nh");
 
   //
   // Filament Change screens show up to 3 lines on a 4-line display

commit 56c44b053d11925c67a32f26ad84c2e76c97fd56
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Tue Sep 1 23:59:29 2020 +0200

    Delete old LCD strings (#19227)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 227a4950f3..02453e5879 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -330,7 +330,6 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_BABYSTEP_Z                      = _UxGT("Nh√≠t Z");
   PROGMEM Language_Str MSG_ENDSTOP_ABORT                   = _UxGT("H·ªßy b·ªè c√¥ng t·∫Øc");                      // Endstop abort
   PROGMEM Language_Str MSG_HEATING_FAILED_LCD              = _UxGT("S∆∞·ªüi ƒë·∫ßu phun kh√¥ng th√†nh c√¥ng");       // Heating failed
-  PROGMEM Language_Str MSG_HEATING_FAILED_LCD_BED          = _UxGT("S∆∞·ªüi b√†n kh√¥ng th√†nh c√¥ng");            // Bed heating failed
   PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô d∆∞");                // Err: REDUNDANT TEMP
   PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát");                         // THERMAL RUNAWAY | problem
   PROGMEM Language_Str MSG_THERMAL_RUNAWAY_BED             = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát b√†n");                     // BED THERMAL RUNAWAY

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 9d0ba7e213..227a4950f3 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once

commit b0c6cfb0511b8d71fec26ab91cd945f3d623b3c0
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Thu Jul 9 10:11:57 2020 +0200

    MarlinUI support for up to 5 Material Presets (#18488)
    
    - Add `I` preset parameter to `G26`, `M106`, `M140`, and `M190`.
    - Extend menu items to permit a string interpolation.
    - Keep material names in a list and interpolate in menu items.
    - Extend material presets to support up to 5 predefined materials.
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 4450e98520..9d0ba7e213 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -65,20 +65,23 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_SET_HOME_OFFSETS                = _UxGT("ƒê·∫∑t b√π ƒë·∫Øp nh√†");                       // Set home offsets
   PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("B√π ƒë·∫Øp ƒë∆∞·ª£c √°p d·ª•ng");                  // Offsets applied
   PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("ƒê·∫∑t ngu·ªìn g·ªëc");                        // Set origin
-  PROGMEM Language_Str MSG_PREHEAT_1                       = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc");      // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_1_H                     = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ~");    // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_1_END                   = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu");
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E                 = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ~");
-  PROGMEM Language_Str MSG_PREHEAT_1_ALL                   = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" T·∫•t c·∫£");     // all
-  PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY               = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" B√†n");        // bed -- using vietnamese term for 'table' instead
-  PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS              = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" C·∫•u h√¨nh");   // conf
-  PROGMEM Language_Str MSG_PREHEAT_2                       = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc");      // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_2_H                     = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ~");    // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_2_END                   = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu");
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E                 = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ~");
-  PROGMEM Language_Str MSG_PREHEAT_2_ALL                   = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" T·∫•t c·∫£");    // all
-  PROGMEM Language_Str MSG_PREHEAT_2_BEDONLY               = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" B√†n");       // bed -- using vietnamese term for 'table' instead
-  PROGMEM Language_Str MSG_PREHEAT_2_SETTINGS              = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" C·∫•u h√¨nh");  // conf
+  #if PREHEAT_COUNT
+    PROGMEM Language_Str MSG_PREHEAT_1                     = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc");      // Preheat
+    PROGMEM Language_Str MSG_PREHEAT_1_H                   = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ~");    // Preheat
+    PROGMEM Language_Str MSG_PREHEAT_1_END                 = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu");
+    PROGMEM Language_Str MSG_PREHEAT_1_END_E               = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ~");
+    PROGMEM Language_Str MSG_PREHEAT_1_ALL                 = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" T·∫•t c·∫£");     // all
+    PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY             = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" B√†n");        // bed -- using vietnamese term for 'table' instead
+    PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS            = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" C·∫•u h√¨nh");   // conf
+
+    PROGMEM Language_Str MSG_PREHEAT_M                     = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc");      // Preheat
+    PROGMEM Language_Str MSG_PREHEAT_M_H                   = _UxGT("L√†m n√≥ng $ tr∆∞·ªõc ~");    // Preheat
+    PROGMEM Language_Str MSG_PREHEAT_M_END                 = _UxGT("L√†m n√≥ng $ ƒê·∫ßu");
+    PROGMEM Language_Str MSG_PREHEAT_M_END_E               = _UxGT("L√†m n√≥ng $ ƒê·∫ßu ~");
+    PROGMEM Language_Str MSG_PREHEAT_M_ALL                 = _UxGT("L√†m n√≥ng $ T·∫•t c·∫£");     // all
+    PROGMEM Language_Str MSG_PREHEAT_M_BEDONLY             = _UxGT("L√†m n√≥ng $ B√†n");        // bed -- using vietnamese term for 'table' instead
+    PROGMEM Language_Str MSG_PREHEAT_M_SETTINGS            = _UxGT("L√†m n√≥ng $ C·∫•u h√¨nh");   // conf
+  #endif
   PROGMEM Language_Str MSG_PREHEAT_CUSTOM                  = _UxGT("S∆∞Ã£ n√≥ng tr∆∞·ªõc t·ª± ch·ªçn");                // Preheat Custom
   PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("Ngu·ªôi xu·ªëng");                          // Cooldown
   PROGMEM Language_Str MSG_SWITCH_PS_ON                    = _UxGT("B·∫≠t ngu·ªìn");                            // Switch power on
@@ -124,14 +127,14 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_UBL_DONE_EDITING_MESH           = _UxGT("Ch·ªânh s·ª≠a xong l∆∞·ªõi");                  // Done Editing Mesh
   PROGMEM Language_Str MSG_UBL_BUILD_CUSTOM_MESH           = _UxGT("X√¢y d·ª±ng l∆∞·ªõi t·ª± ch·ªçn");                // Build Custom Mesh
   PROGMEM Language_Str MSG_UBL_BUILD_MESH_MENU             = _UxGT("X√¢y d·ª±ng l∆∞·ªõi");                        // Build Mesh
-  PROGMEM Language_Str MSG_UBL_BUILD_MESH_M1               = _UxGT("X√¢y d·ª±ng l∆∞·ªõi (") PREHEAT_1_LABEL _UxGT(")");
-  PROGMEM Language_Str MSG_UBL_BUILD_MESH_M2               = _UxGT("X√¢y d·ª±ng l∆∞·ªõi (") PREHEAT_2_LABEL _UxGT(")");
+  #if PREHEAT_COUNT
+    PROGMEM Language_Str MSG_UBL_BUILD_MESH_M              = _UxGT("X√¢y d·ª±ng l∆∞·ªõi ($)");
+    PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M           = _UxGT("Th·∫©m tra l∆∞·ªõi ($)");
+  #endif
   PROGMEM Language_Str MSG_UBL_BUILD_COLD_MESH             = _UxGT("X√¢y d·ª±ng l∆∞·ªõi l·∫°nh");                   // Build cold mesh
   PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_ADJUST          = _UxGT("ƒêi·ªÅu ch·ªânh chi·ªÅu cao l∆∞·ªõi");            // Adjust Mesh Height
   PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_AMOUNT          = _UxGT("S·ªë l∆∞·ª£ng chi·ªÅu cao");                   // Height Amount
   PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_MENU          = _UxGT("Th·∫©m tra l∆∞·ªõi");                        // Validate Mesh
-  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M1            = _UxGT("Th·∫©m tra l∆∞·ªõi (") PREHEAT_1_LABEL _UxGT(")");
-  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M2            = _UxGT("Th·∫©m tra l∆∞·ªõi (") PREHEAT_2_LABEL _UxGT(")");
   PROGMEM Language_Str MSG_UBL_VALIDATE_CUSTOM_MESH        = _UxGT("Th·∫©m tra l∆∞·ªõi t·ª± ch·ªçn");                // validate custom mesh
   PROGMEM Language_Str MSG_UBL_CONTINUE_MESH               = _UxGT("Ti·∫øp t·ª•c x√¢y l∆∞·ªõi b√†n");                // Continue Bed Mesh
   PROGMEM Language_Str MSG_UBL_MESH_LEVELING               = _UxGT("ƒêang san l·∫•p l∆∞·ªõi");                    // Mesh Leveling

commit a6b8b12a6a001a25dc73e8ab08f71e357ea58e48
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jul 5 18:00:37 2020 -0500

    Simplify home_z_safely, respect HOME_AFTER_DEACTIVATE

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 8538c81831..4450e98520 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -335,7 +335,6 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");         // Err: MINTEMP
   PROGMEM Language_Str MSG_ERR_MAXTEMP_BED                 = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô b√†n t·ªëi ƒëa");        // Err: MAXTEMP BED
   PROGMEM Language_Str MSG_ERR_MINTEMP_BED                 = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô b√†n t·ªëi thi·ªÉu");     // Err: MINTEMP BED
-  PROGMEM Language_Str MSG_ERR_Z_HOMING                    = _UxGT("V·ªÅ nh√† XY Tr∆∞∆°ÕÅc");                      // Home XY First
   PROGMEM Language_Str MSG_HALTED                          = _UxGT("M√ÅY IN ƒê√É D∆ØÕÄNG LAÃ£I");                   // PRINTER HALTED
   PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Xin b·∫∑t l·∫°i");                          // Please reset
   PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("n");                                    // d - ng√†y - One character only

commit 2f6262c27b11598293839f6d46f3b340ee6a1f4c
Author: studiodyne <42887851+studiodyne@users.noreply.github.com>
Date:   Thu Apr 23 04:03:28 2020 +0200

    Automatic Tool Migration feature (#17248)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 781a1242b8..8538c81831 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -299,8 +299,8 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_FILAMENT_SWAP_LENGTH            = _UxGT("Kho·∫£ng C√°ch R√∫t");                      // Retract Distance
   PROGMEM Language_Str MSG_TOOL_CHANGE                     = _UxGT("Thay ƒê·ªïi C√¥ng C·ª•");                     // Tool Change
   PROGMEM Language_Str MSG_TOOL_CHANGE_ZLIFT               = _UxGT("ƒê∆∞a L√™n Z");                            // Z Raise
-  PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPD          = _UxGT("T·ªëc ƒê·ªô Tu√¥n Ra");                       // Prime Speed
-  PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPD        = _UxGT("T·ªëc ƒê·ªô R√∫t L·∫°i");                       // Retract Speed
+  PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPEED        = _UxGT("T·ªëc ƒê·ªô Tu√¥n Ra");                       // Prime Speed
+  PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPEED      = _UxGT("T·ªëc ƒê·ªô R√∫t L·∫°i");                       // Retract Speed
   PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Thay d√¢y nh·ª±a");                        // change filament
   PROGMEM Language_Str MSG_FILAMENTCHANGE_E                = _UxGT("Thay d√¢y nh·ª±a *");                      // change filament
   PROGMEM Language_Str MSG_FILAMENTLOAD                    = _UxGT("N·∫°p d√¢y nh·ª±a");                         // load filament

commit 875cd4e081ef6885aa2593d125b2db5ff393a391
Author: Mathias Rasmussen <mathiasvr@gmail.com>
Date:   Mon Apr 20 16:17:55 2020 +0200

    Remove 'Media Released' message (#17272)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 71c8eebdd8..781a1242b8 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -39,7 +39,6 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_MEDIA_ABORTING                  = _UxGT("ƒêang h·ªßy b·ªè...");
   PROGMEM Language_Str MSG_MEDIA_INSERTED                  = _UxGT("Ph∆∞∆°ng ti·ªán ƒë∆∞·ª£c c·∫Øm v√†o");             // Media inserted
   PROGMEM Language_Str MSG_MEDIA_REMOVED                   = _UxGT("Ph∆∞∆°ng ti·ªán ƒë∆∞·ª£c r√∫t ra");
-  PROGMEM Language_Str MSG_MEDIA_RELEASED                  = _UxGT("Ph∆∞∆°ng ti·ªán ƒë√£ ph√°t h√†nh");
   PROGMEM Language_Str MSG_MEDIA_WAITING                   = _UxGT("Ch·ªù ƒë·ª£i ph∆∞∆°ng ti·ªán");
   PROGMEM Language_Str MSG_MEDIA_READ_ERROR                = _UxGT("L·ªói ƒë·ªçc ph∆∞∆°ng ti·ªán");
   PROGMEM Language_Str MSG_MEDIA_USB_REMOVED               = _UxGT("USB ƒë∆∞·ª£c r√∫t ra");

commit 22da1b2b310158ae3362c54f2534f5f5af30fa83
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 13 14:53:21 2020 -0500

    Rename some "kill" messages

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index dc90e85ce2..71c8eebdd8 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -403,7 +403,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_RESUME   = _UxGT("Ti·∫øp t·ª•c");                             // continue
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_NOZZLE          = _UxGT("  ƒê·∫ßu Phun: ");                         // Nozzle
   PROGMEM Language_Str MSG_RUNOUT_SENSOR_ENABLE            = _UxGT("C·∫£m Bi·∫øn H·∫øt");                         // Runout Sensor
-  PROGMEM Language_Str MSG_LCD_HOMING_FAILED               = _UxGT("S∆∞Ã£ nh√† kh√¥ng th√†nh c√¥ng");              // Homing failed
+  PROGMEM Language_Str MSG_KILL_HOMING_FAILED              = _UxGT("S∆∞Ã£ nh√† kh√¥ng th√†nh c√¥ng");              // Homing failed
   PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT(" kh√¥ng th√†nh c√¥ng");                    // Probing failed
   PROGMEM Language_Str MSG_M600_TOO_COLD                   = _UxGT("M600: Qu√° l·∫°nh");
 

commit e3321920f3bab800812ed0d2395fb00fe80072fb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 12 17:21:02 2020 -0500

    Update Marlin website links to https

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 8d13fdb194..dc90e85ce2 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -25,7 +25,7 @@
  * Vietnamese
  *
  * LCD Menu Messages
- * See also http://marlinfw.org/docs/development/lcd_language.html
+ * See also https://marlinfw.org/docs/development/lcd_language.html
  *
  */
 namespace Language_vi {

commit 48919c54fb4e793b6bb17022f9badbd3530733ae
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Apr 9 20:05:58 2020 -0500

    Add SRAM command injection (#17459)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 330db4b690..8d13fdb194 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -159,8 +159,8 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_UBL_STORAGE_SLOT                = _UxGT("Khe nh·ªõ");                              // Memory Slot
   PROGMEM Language_Str MSG_UBL_LOAD_MESH                   = _UxGT("T·∫£i l∆∞·ªõi b√†n");                         // Load Bed Mesh
   PROGMEM Language_Str MSG_UBL_SAVE_MESH                   = _UxGT("L∆∞u l∆∞·ªõi b√†n");                         // Save Bed Mesh
-  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("M117 %i l∆∞·ªõi ƒë∆∞·ª£c n·∫°p");                // Mesh %i loaded
-  PROGMEM Language_Str MSG_MESH_SAVED                      = _UxGT("M117 %i l∆∞·ªõi ƒë√£ l∆∞u");
+  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("%i l∆∞·ªõi ƒë∆∞·ª£c n·∫°p");                // Mesh %i loaded
+  PROGMEM Language_Str MSG_MESH_SAVED                      = _UxGT("%i l∆∞·ªõi ƒë√£ l∆∞u");
   PROGMEM Language_Str MSG_NO_STORAGE                      = _UxGT("Kh√¥ng l∆∞u tr·ªØ");                        // No Storage
   PROGMEM Language_Str MSG_UBL_SAVE_ERROR                  = _UxGT("ƒêi√™ÕÄu sai: L∆∞u UBL");                    // Err: UBL Save
   PROGMEM Language_Str MSG_UBL_RESTORE_ERROR               = _UxGT("ƒêi√™ÕÄu Sai: Kh√¥i Ph·ª•c UBL");              // Err: UBL Restore

commit 6b9a17be16448459cdbf3447598094fae455e39a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Feb 26 02:02:20 2020 -0600

    Language: "failsafe" => "Defaults"

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 76ce55284f..330db4b690 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -266,7 +266,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("ƒê·ªô t∆∞∆°ng ph·∫£n LCD");                    // LCD contrast
   PROGMEM Language_Str MSG_STORE_EEPROM                    = _UxGT("L∆∞u c√°c thi·∫øt l·∫≠p");                    // Store settings
   PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("T·∫£i c√°c c√†i ƒë·∫∑t");                      // Load settings
-  PROGMEM Language_Str MSG_RESTORE_FAILSAFE                = _UxGT("Kh√¥i ph·ª•c ph√≤ng h∆∞");                   // Restore failsafe
+  PROGMEM Language_Str MSG_RESTORE_DEFAULTS                = _UxGT("Kh√¥i ph·ª•c ph√≤ng h∆∞");                   // Restore Defaults
   PROGMEM Language_Str MSG_INIT_EEPROM                     = _UxGT("Kh·ªüi T·∫°o EEPROM");                      // Initialize EEPROM
   PROGMEM Language_Str MSG_MEDIA_UPDATE                    = _UxGT("C·∫≠p Nh·∫≠t ph∆∞∆°ng ti·ªán");                 // Update media
   PROGMEM Language_Str MSG_RESET_PRINTER                   = _UxGT("B·∫∑t L·∫°i M√°y In");
@@ -309,7 +309,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_FILAMENTUNLOAD                  = _UxGT("D·ª° d√¢y nh·ª±a");                          // unload filament
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_E                = _UxGT("D·ª° d√¢y nh·ª±a *");                        // unload filament
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("D·ª° t·∫•t c·∫£");                            // Unload All
-  PROGMEM Language_Str MSG_ATTACH_MEDIA                    = _UxGT("Kh·ªüi t·∫°o ph∆∞∆°ng ti·ªán");                 // Init. media
+  PROGMEM Language_Str MSG_ATTACH_MEDIA                    = _UxGT("Kh·ªüi t·∫°o ph∆∞∆°ng ti·ªán");                 // Attach media
   PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Thay ph∆∞∆°ng ti·ªán");                     // Change midea
   PROGMEM Language_Str MSG_RELEASE_MEDIA                   = _UxGT("Ph√°t h√†nh ph∆∞∆°ng ti·ªán");
   PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("ƒê·∫ßu D√≤ Z qua b√†n");                     // Z Probe past bed

commit 8ba5ef8cae5f7323688749e699606dcc14182c3e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 24 05:33:16 2020 -0600

    "Init. Media" => "Attach Media"

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 3dbf922b95..76ce55284f 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -309,7 +309,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_FILAMENTUNLOAD                  = _UxGT("D·ª° d√¢y nh·ª±a");                          // unload filament
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_E                = _UxGT("D·ª° d√¢y nh·ª±a *");                        // unload filament
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("D·ª° t·∫•t c·∫£");                            // Unload All
-  PROGMEM Language_Str MSG_INIT_MEDIA                      = _UxGT("Kh·ªüi t·∫°o ph∆∞∆°ng ti·ªán");                 // Init. media
+  PROGMEM Language_Str MSG_ATTACH_MEDIA                    = _UxGT("Kh·ªüi t·∫°o ph∆∞∆°ng ti·ªán");                 // Init. media
   PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Thay ph∆∞∆°ng ti·ªán");                     // Change midea
   PROGMEM Language_Str MSG_RELEASE_MEDIA                   = _UxGT("Ph√°t h√†nh ph∆∞∆°ng ti·ªán");
   PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("ƒê·∫ßu D√≤ Z qua b√†n");                     // Z Probe past bed

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index b5ecd019ac..3dbf922b95 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit bbfbcb8a5d938df2f2da0baca128046a0eb4792d
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jan 26 03:20:02 2020 -0600

    Clean up PID language defines

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 6a42933c19..b5ecd019ac 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -222,14 +222,6 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_AUTOTEMP                        = _UxGT("Nhi·ªát ƒë·ªô t·ª± ƒë·ªông");                     // Autotemp
   PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("B·∫≠t");                                  // on
   PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("T·∫Øt");                                  // off
-  PROGMEM Language_Str MSG_PID_P                           = _UxGT("PID-P");
-  PROGMEM Language_Str MSG_PID_P_E                         = _UxGT("PID-P *");
-  PROGMEM Language_Str MSG_PID_I                           = _UxGT("PID-I");
-  PROGMEM Language_Str MSG_PID_I_E                         = _UxGT("PID-I *");
-  PROGMEM Language_Str MSG_PID_D                           = _UxGT("PID-D");
-  PROGMEM Language_Str MSG_PID_D_E                         = _UxGT("PID-D *");
-  PROGMEM Language_Str MSG_PID_C                           = _UxGT("PID-C");
-  PROGMEM Language_Str MSG_PID_C_E                         = _UxGT("PID-C *");
   PROGMEM Language_Str MSG_SELECT                          = _UxGT("L·ª±a");                                  // Select
   PROGMEM Language_Str MSG_SELECT_E                        = _UxGT("L·ª±a *");
   PROGMEM Language_Str MSG_ACC                             = _UxGT("TƒÉng T·ªëc");

commit 248b7dfa591a34a8aa1c6960944e1a3a468ad1de
Author: yangwenxiong <46896566+yangwenxiong@users.noreply.github.com>
Date:   Sat Jan 25 16:13:39 2020 +0800

    BigTreeTech GTR V1.0 / Support 8 extruders, heaters, temp sensors, fans (#16595)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index c12e0e2f6b..6a42933c19 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -210,9 +210,9 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_NOZZLE_N                        = _UxGT("ƒê·∫ßu phun ~");                           // Nozzle
   PROGMEM Language_Str MSG_BED                             = _UxGT("B√†n");                                  // bed
   PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("T·ªëc ƒë·ªô qu·∫°t");                          // fan speed
-  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("T·ªëc ƒë·ªô qu·∫°t =");                        // fan speed
+  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("T·ªëc ƒë·ªô qu·∫°t ~");                        // fan speed
   PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£");                      // Extra fan speed
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ =");                    // Extra fan speed
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ ~");                    // Extra fan speed
   PROGMEM Language_Str MSG_FLOW                            = _UxGT("L∆∞u L∆∞·ª£ng");
   PROGMEM Language_Str MSG_FLOW_N                          = _UxGT("L∆∞u L∆∞·ª£ng ~");
   PROGMEM Language_Str MSG_CONTROL                         = _UxGT("ƒêi·ªÅu khi·ªÉn");                           // Control

commit aa4db785f257942ed9869486288d6612c41421a6
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jan 3 19:46:05 2020 -0600

    MSG_WATCH => MSG_INFO_SCREEN

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 344826efa6..c12e0e2f6b 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -279,7 +279,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_MEDIA_UPDATE                    = _UxGT("C·∫≠p Nh·∫≠t ph∆∞∆°ng ti·ªán");                 // Update media
   PROGMEM Language_Str MSG_RESET_PRINTER                   = _UxGT("B·∫∑t L·∫°i M√°y In");
   PROGMEM Language_Str MSG_REFRESH                         = LCD_STR_REFRESH  _UxGT("C·∫≠p Nh·∫≠t");            // Refresh
-  PROGMEM Language_Str MSG_WATCH                           = _UxGT("M√†n H√¨nh Th√¥ng Tin");                   // Info screen
+  PROGMEM Language_Str MSG_INFO_SCREEN                     = _UxGT("M√†n H√¨nh Th√¥ng Tin");                   // Info screen
   PROGMEM Language_Str MSG_PREPARE                         = _UxGT("Chu·∫©n b·ªã");                             // Prepare
   PROGMEM Language_Str MSG_TUNE                            = _UxGT("ƒêi·ªÅu Ch·ªânh");                           // Tune
   PROGMEM Language_Str MSG_PAUSE_PRINT                     = _UxGT("T·∫°m d·ª´ng in");                          // Pause print

commit 1c4f672eae494875c36eafe0e050222c6bb7bf1e
Author: dagorel <37673727+dagorel@users.noreply.github.com>
Date:   Wed Dec 11 06:37:25 2019 +0100

    Formalize DAC percent strings (#16176)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index be3f12b330..344826efa6 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -398,7 +398,10 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("Nhi·ªát ƒë·ªô t·ªëi ƒëa");                      // Max temp
   PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("B·ªô ngu·ªìn");                             // PSU
   PROGMEM Language_Str MSG_DRIVE_STRENGTH                  = _UxGT("S·ª©c m·∫°nh ·ªï ƒëƒ©a");                       // Drive Strength
-  PROGMEM Language_Str MSG_DAC_PERCENT                     = _UxGT("% tr√¨nh ƒëi·ªÅu khi·ªÉn");                   // Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_X                   = _UxGT("X % tr√¨nh ƒëi·ªÅu khi·ªÉn");                 // X Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_Y                   = _UxGT("Y % tr√¨nh ƒëi·ªÅu khi·ªÉn");                 // Y Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_Z                   = _UxGT("Z % tr√¨nh ƒëi·ªÅu khi·ªÉn");                 // Z Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_E                   = _UxGT("E % tr√¨nh ƒëi·ªÅu khi·ªÉn");                 // E Driver %
   PROGMEM Language_Str MSG_DAC_EEPROM_WRITE                = _UxGT("Ghi DAC EEPROM");                       // DAC EEPROM Write
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_PAUSE    = _UxGT("In t·∫°m d·ª´ng");                          // PRINT PAUSED
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_LOAD     = _UxGT("N·∫°p d√¢y nh·ª±a");

commit 4d9a5fef3b0f7854b2e8533b8bc7c68b72872c9b
Author: Luu Lac <45380455+shitcreek@users.noreply.github.com>
Date:   Tue Nov 19 21:08:47 2019 -0600

    Update Vietnamese language (#15940)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index a4f38fad23..be3f12b330 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -36,8 +36,14 @@ namespace Language_vi {
 
   PROGMEM Language_Str WELCOME_MSG                         = MACHINE_NAME _UxGT(" S·∫µn s√†ng.");              // Ready
   PROGMEM Language_Str MSG_BACK                            = _UxGT("Tr·ªü l·∫°i");                              // Back
-  PROGMEM Language_Str MSG_SD_INSERTED                     = _UxGT("Th·∫ª ƒë∆∞·ª£c c·∫Øm v√†o");                     // Card inserted
-  PROGMEM Language_Str MSG_SD_REMOVED                      = _UxGT("Th·∫ª ƒë∆∞·ª£c r√∫t ra");
+  PROGMEM Language_Str MSG_MEDIA_ABORTING                  = _UxGT("ƒêang h·ªßy b·ªè...");
+  PROGMEM Language_Str MSG_MEDIA_INSERTED                  = _UxGT("Ph∆∞∆°ng ti·ªán ƒë∆∞·ª£c c·∫Øm v√†o");             // Media inserted
+  PROGMEM Language_Str MSG_MEDIA_REMOVED                   = _UxGT("Ph∆∞∆°ng ti·ªán ƒë∆∞·ª£c r√∫t ra");
+  PROGMEM Language_Str MSG_MEDIA_RELEASED                  = _UxGT("Ph∆∞∆°ng ti·ªán ƒë√£ ph√°t h√†nh");
+  PROGMEM Language_Str MSG_MEDIA_WAITING                   = _UxGT("Ch·ªù ƒë·ª£i ph∆∞∆°ng ti·ªán");
+  PROGMEM Language_Str MSG_MEDIA_READ_ERROR                = _UxGT("L·ªói ƒë·ªçc ph∆∞∆°ng ti·ªán");
+  PROGMEM Language_Str MSG_MEDIA_USB_REMOVED               = _UxGT("USB ƒë∆∞·ª£c r√∫t ra");
+  PROGMEM Language_Str MSG_MEDIA_USB_FAILED                = _UxGT("USB kh·ªüi th·∫•t b·∫°i");
   PROGMEM Language_Str MSG_LCD_ENDSTOPS                    = _UxGT("C√¥ng t·∫Øc");                             // Endstops - c√¥ng t·∫Øc h√†nh tr√¨nh
   PROGMEM Language_Str MSG_LCD_SOFT_ENDSTOPS               = _UxGT("C√¥ng t·∫Øc m·ªÅm");                         // soft Endstops
   PROGMEM Language_Str MSG_MAIN                            = _UxGT("Ch√≠nh");                                // Main
@@ -270,9 +276,9 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("T·∫£i c√°c c√†i ƒë·∫∑t");                      // Load settings
   PROGMEM Language_Str MSG_RESTORE_FAILSAFE                = _UxGT("Kh√¥i ph·ª•c ph√≤ng h∆∞");                   // Restore failsafe
   PROGMEM Language_Str MSG_INIT_EEPROM                     = _UxGT("Kh·ªüi T·∫°o EEPROM");                      // Initialize EEPROM
-  PROGMEM Language_Str MSG_SD_UPDATE                       = _UxGT("C·∫≠p Nh·∫≠t SD");                          // SD Update
+  PROGMEM Language_Str MSG_MEDIA_UPDATE                    = _UxGT("C·∫≠p Nh·∫≠t ph∆∞∆°ng ti·ªán");                 // Update media
   PROGMEM Language_Str MSG_RESET_PRINTER                   = _UxGT("B·∫∑t L·∫°i M√°y In");
-  PROGMEM Language_Str MSG_REFRESH                         = LCD_STR_REFRESH  _UxGT("C·∫≠p Nh·∫≠t");                             // Refresh
+  PROGMEM Language_Str MSG_REFRESH                         = LCD_STR_REFRESH  _UxGT("C·∫≠p Nh·∫≠t");            // Refresh
   PROGMEM Language_Str MSG_WATCH                           = _UxGT("M√†n H√¨nh Th√¥ng Tin");                   // Info screen
   PROGMEM Language_Str MSG_PREPARE                         = _UxGT("Chu·∫©n b·ªã");                             // Prepare
   PROGMEM Language_Str MSG_TUNE                            = _UxGT("ƒêi·ªÅu Ch·ªânh");                           // Tune
@@ -280,8 +286,8 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_RESUME_PRINT                    = _UxGT("Ti·∫øp t·ª•c in");                          // Resume print
   PROGMEM Language_Str MSG_STOP_PRINT                      = _UxGT("Ng∆∞ÕÄng in");                             // Stop print
   PROGMEM Language_Str MSG_OUTAGE_RECOVERY                 = _UxGT("Ph·ª•c H·ªìi M·∫•t ƒêi·ªán");                    // Outage Recovery
-  PROGMEM Language_Str MSG_CARD_MENU                       = _UxGT("In t·ª´ SD");                             // Print from SD
-  PROGMEM Language_Str MSG_NO_CARD                         = _UxGT("Kh√¥ng c√≥ th·∫ª SD");                      // No SD card
+  PROGMEM Language_Str MSG_MEDIA_MENU                      = _UxGT("In t·ª´ ph∆∞∆°ng ti·ªán");                    // Print from media
+  PROGMEM Language_Str MSG_NO_MEDIA                        = _UxGT("Kh√¥ng c√≥ ph∆∞∆°ng ti·ªán");                 // No media
   PROGMEM Language_Str MSG_DWELL                           = _UxGT("Ng·ªß...");                               // Sleep
   PROGMEM Language_Str MSG_USERWAIT                        = _UxGT("Nh·∫•n ƒë·ªÉ ti·∫øp t·ª•c...");                  // Click to resume (same as 'continue')
   PROGMEM Language_Str MSG_PRINT_PAUSED                    = _UxGT("In t·∫°m d·ª´ng");                          // print paused
@@ -311,8 +317,9 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_FILAMENTUNLOAD                  = _UxGT("D·ª° d√¢y nh·ª±a");                          // unload filament
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_E                = _UxGT("D·ª° d√¢y nh·ª±a *");                        // unload filament
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("D·ª° t·∫•t c·∫£");                            // Unload All
-  PROGMEM Language_Str MSG_INIT_SDCARD                     = _UxGT("Kh·ªüi t·∫°o th·∫ª SD ");                     // Init. SD card
-  PROGMEM Language_Str MSG_CHANGE_SDCARD                   = _UxGT("Thay th·∫ª SD");                          // Change SD card
+  PROGMEM Language_Str MSG_INIT_MEDIA                      = _UxGT("Kh·ªüi t·∫°o ph∆∞∆°ng ti·ªán");                 // Init. media
+  PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Thay ph∆∞∆°ng ti·ªán");                     // Change midea
+  PROGMEM Language_Str MSG_RELEASE_MEDIA                   = _UxGT("Ph√°t h√†nh ph∆∞∆°ng ti·ªán");
   PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("ƒê·∫ßu D√≤ Z qua b√†n");                     // Z Probe past bed
   PROGMEM Language_Str MSG_SKEW_FACTOR                     = _UxGT("H·ªá s·ªë nghi√™ng");                        // Skew Factor
   PROGMEM Language_Str MSG_BLTOUCH                         = _UxGT("BLTOUCH");                              // BLTouch

commit 27cb4db80eae73eb842f1a944260517bb8783eb3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Nov 14 20:30:30 2019 -0600

    Reduced string storage using tokens (#15593)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index abb96a58a1..a4f38fad23 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -60,37 +60,17 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_SET_HOME_OFFSETS                = _UxGT("ƒê·∫∑t b√π ƒë·∫Øp nh√†");                       // Set home offsets
   PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("B√π ƒë·∫Øp ƒë∆∞·ª£c √°p d·ª•ng");                  // Offsets applied
   PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("ƒê·∫∑t ngu·ªìn g·ªëc");                        // Set origin
-  PROGMEM Language_Str MSG_PREHEAT_1                       = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc");   // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_1_H0                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N0;   // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_1_H1                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N1;   // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_1_H2                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N2;   // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_1_H3                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N3;   // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_1_H4                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N4;   // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_1_H5                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N5;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_1                       = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc");      // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_1_H                     = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ~");    // Preheat
   PROGMEM Language_Str MSG_PREHEAT_1_END                   = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu");
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E0                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N0;
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E1                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N1;
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E2                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N2;
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E3                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N3;
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E4                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N4;
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E5                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N5;
-  PROGMEM Language_Str MSG_PREHEAT_1_ALL                   = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" T·∫•t c·∫£");    // all
-  PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY               = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" B√†n");       // bed -- using vietnamese term for 'table' instead
-  PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS              = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" C·∫•u h√¨nh");  // conf
-  PROGMEM Language_Str MSG_PREHEAT_2                       = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc");   // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_2_H0                    = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N0;   // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_2_H1                    = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N1;   // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_2_H2                    = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N2;   // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_2_H3                    = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N3;   // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_2_H4                    = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N4;   // Preheat
-  PROGMEM Language_Str MSG_PREHEAT_2_H5                    = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N5;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E                 = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ~");
+  PROGMEM Language_Str MSG_PREHEAT_1_ALL                   = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" T·∫•t c·∫£");     // all
+  PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY               = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" B√†n");        // bed -- using vietnamese term for 'table' instead
+  PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS              = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" C·∫•u h√¨nh");   // conf
+  PROGMEM Language_Str MSG_PREHEAT_2                       = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc");      // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_2_H                     = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ~");    // Preheat
   PROGMEM Language_Str MSG_PREHEAT_2_END                   = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu");
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E0                = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N0;
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E1                = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N1;
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E2                = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N2;
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E3                = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N3;
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E4                = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N4;
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E5                = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N5;
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E                 = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ~");
   PROGMEM Language_Str MSG_PREHEAT_2_ALL                   = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" T·∫•t c·∫£");    // all
   PROGMEM Language_Str MSG_PREHEAT_2_BEDONLY               = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" B√†n");       // bed -- using vietnamese term for 'table' instead
   PROGMEM Language_Str MSG_PREHEAT_2_SETTINGS              = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" C·∫•u h√¨nh");  // conf
@@ -173,7 +153,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_UBL_STORAGE_SLOT                = _UxGT("Khe nh·ªõ");                              // Memory Slot
   PROGMEM Language_Str MSG_UBL_LOAD_MESH                   = _UxGT("T·∫£i l∆∞·ªõi b√†n");                         // Load Bed Mesh
   PROGMEM Language_Str MSG_UBL_SAVE_MESH                   = _UxGT("L∆∞u l∆∞·ªõi b√†n");                         // Save Bed Mesh
-  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("M117 %i l∆∞·ªõi ƒë∆∞·ª£c n·∫°p");                     // Mesh %i loaded
+  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("M117 %i l∆∞·ªõi ƒë∆∞·ª£c n·∫°p");                // Mesh %i loaded
   PROGMEM Language_Str MSG_MESH_SAVED                      = _UxGT("M117 %i l∆∞·ªõi ƒë√£ l∆∞u");
   PROGMEM Language_Str MSG_NO_STORAGE                      = _UxGT("Kh√¥ng l∆∞u tr·ªØ");                        // No Storage
   PROGMEM Language_Str MSG_UBL_SAVE_ERROR                  = _UxGT("ƒêi√™ÕÄu sai: L∆∞u UBL");                    // Err: UBL Save
@@ -213,12 +193,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_MOVE_Y                          = _UxGT("Di chuy·ªÉn Y");
   PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("Di chuy·ªÉn Z");
   PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("M√°y ƒë√πn");                              // Extruder
-  PROGMEM Language_Str MSG_MOVE_E0                         = _UxGT("M√°y ƒë√πn ") LCD_STR_E0;                  // Extruder
-  PROGMEM Language_Str MSG_MOVE_E1                         = _UxGT("M√°y ƒë√πn ") LCD_STR_E1;                  // Extruder
-  PROGMEM Language_Str MSG_MOVE_E2                         = _UxGT("M√°y ƒë√πn ") LCD_STR_E2;                  // Extruder
-  PROGMEM Language_Str MSG_MOVE_E3                         = _UxGT("M√°y ƒë√πn ") LCD_STR_E3;                  // Extruder
-  PROGMEM Language_Str MSG_MOVE_E4                         = _UxGT("M√°y ƒë√πn ") LCD_STR_E4;                  // Extruder
-  PROGMEM Language_Str MSG_MOVE_E5                         = _UxGT("M√°y ƒë√πn ") LCD_STR_E5;                  // Extruder
+  PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("M√°y ƒë√πn *");                            // Extruder
   PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("ƒê·∫ßu n√≥ng qu√° l·∫°nh");                    // Hotend too cold
   PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("Di chuy·ªÉn 0.1mm");                      // Move 0.1mm
   PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("Di chuy·ªÉn 1mm");                        // Move 1mm
@@ -226,28 +201,14 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_SPEED                           = _UxGT("T·ªëc ƒë·ªô");                               // Speed
   PROGMEM Language_Str MSG_BED_Z                           = _UxGT("Z B√†n");
   PROGMEM Language_Str MSG_NOZZLE                          = _UxGT("ƒê·∫ßu phun");                             // Nozzle
-  PROGMEM Language_Str MSG_NOZZLE_0                        = _UxGT("ƒê·∫ßu phun ") LCD_STR_N0;                 // Nozzle
-  PROGMEM Language_Str MSG_NOZZLE_1                        = _UxGT("ƒê·∫ßu phun ") LCD_STR_N1;                 // Nozzle
-  PROGMEM Language_Str MSG_NOZZLE_2                        = _UxGT("ƒê·∫ßu phun ") LCD_STR_N2;                 // Nozzle
-  PROGMEM Language_Str MSG_NOZZLE_3                        = _UxGT("ƒê·∫ßu phun ") LCD_STR_N3;                 // Nozzle
-  PROGMEM Language_Str MSG_NOZZLE_4                        = _UxGT("ƒê·∫ßu phun ") LCD_STR_N4;                 // Nozzle
-  PROGMEM Language_Str MSG_NOZZLE_5                        = _UxGT("ƒê·∫ßu phun ") LCD_STR_N5;                 // Nozzle
+  PROGMEM Language_Str MSG_NOZZLE_N                        = _UxGT("ƒê·∫ßu phun ~");                           // Nozzle
   PROGMEM Language_Str MSG_BED                             = _UxGT("B√†n");                                  // bed
   PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("T·ªëc ƒë·ªô qu·∫°t");                          // fan speed
-  PROGMEM Language_Str MSG_FAN_SPEED_1                     = _UxGT("T·ªëc ƒë·ªô qu·∫°t 1");                        // fan speed
-  PROGMEM Language_Str MSG_FAN_SPEED_2                     = _UxGT("T·ªëc ƒë·ªô qu·∫°t 2");                        // fan speed
-  PROGMEM Language_Str MSG_FAN_SPEED_3                     = _UxGT("T·ªëc ƒë·ªô qu·∫°t 3");                        // fan speed
+  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("T·ªëc ƒë·ªô qu·∫°t =");                        // fan speed
   PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£");                      // Extra fan speed
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_1               = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ 1");                    // Extra fan speed
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_2               = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ 2");                    // Extra fan speed
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_3               = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ 3");                    // Extra fan speed
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ =");                    // Extra fan speed
   PROGMEM Language_Str MSG_FLOW                            = _UxGT("L∆∞u L∆∞·ª£ng");
-  PROGMEM Language_Str MSG_FLOW_0                          = _UxGT("L∆∞u L∆∞·ª£ng ") LCD_STR_N0;
-  PROGMEM Language_Str MSG_FLOW_1                          = _UxGT("L∆∞u L∆∞·ª£ng ") LCD_STR_N1;
-  PROGMEM Language_Str MSG_FLOW_2                          = _UxGT("L∆∞u L∆∞·ª£ng ") LCD_STR_N2;
-  PROGMEM Language_Str MSG_FLOW_3                          = _UxGT("L∆∞u L∆∞·ª£ng ") LCD_STR_N3;
-  PROGMEM Language_Str MSG_FLOW_4                          = _UxGT("L∆∞u L∆∞·ª£ng ") LCD_STR_N4;
-  PROGMEM Language_Str MSG_FLOW_5                          = _UxGT("L∆∞u L∆∞·ª£ng ") LCD_STR_N5;
+  PROGMEM Language_Str MSG_FLOW_N                          = _UxGT("L∆∞u L∆∞·ª£ng ~");
   PROGMEM Language_Str MSG_CONTROL                         = _UxGT("ƒêi·ªÅu khi·ªÉn");                           // Control
   PROGMEM Language_Str MSG_MIN                             = " " LCD_STR_THERMOMETER _UxGT(" ƒêa");          // min
   PROGMEM Language_Str MSG_MAX                             = " " LCD_STR_THERMOMETER _UxGT(" Thi·ªÉu");
@@ -256,40 +217,15 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("B·∫≠t");                                  // on
   PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("T·∫Øt");                                  // off
   PROGMEM Language_Str MSG_PID_P                           = _UxGT("PID-P");
-  PROGMEM Language_Str MSG_PID_P_E0                        = _UxGT("PID-P ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_PID_P_E1                        = _UxGT("PID-P ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_PID_P_E2                        = _UxGT("PID-P ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_PID_P_E3                        = _UxGT("PID-P ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_PID_P_E4                        = _UxGT("PID-P ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_PID_P_E5                        = _UxGT("PID-P ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_P_E                         = _UxGT("PID-P *");
   PROGMEM Language_Str MSG_PID_I                           = _UxGT("PID-I");
-  PROGMEM Language_Str MSG_PID_I_E0                        = _UxGT("PID-I ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_PID_I_E1                        = _UxGT("PID-I ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_PID_I_E2                        = _UxGT("PID-I ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_PID_I_E3                        = _UxGT("PID-I ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_PID_I_E4                        = _UxGT("PID-I ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_PID_I_E5                        = _UxGT("PID-I ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_I_E                         = _UxGT("PID-I *");
   PROGMEM Language_Str MSG_PID_D                           = _UxGT("PID-D");
-  PROGMEM Language_Str MSG_PID_D_E0                        = _UxGT("PID-D ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_PID_D_E1                        = _UxGT("PID-D ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_PID_D_E2                        = _UxGT("PID-D ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_PID_D_E3                        = _UxGT("PID-D ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_PID_D_E4                        = _UxGT("PID-D ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_PID_D_E5                        = _UxGT("PID-D ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_D_E                         = _UxGT("PID-D *");
   PROGMEM Language_Str MSG_PID_C                           = _UxGT("PID-C");
-  PROGMEM Language_Str MSG_PID_C_E0                        = _UxGT("PID-C ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_PID_C_E1                        = _UxGT("PID-C ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_PID_C_E2                        = _UxGT("PID-C ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_PID_C_E3                        = _UxGT("PID-C ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_PID_C_E4                        = _UxGT("PID-C ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_PID_C_E5                        = _UxGT("PID-C ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_C_E                         = _UxGT("PID-C *");
   PROGMEM Language_Str MSG_SELECT                          = _UxGT("L·ª±a");                                  // Select
-  PROGMEM Language_Str MSG_SELECT_E0                       = _UxGT("L·ª±a ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_SELECT_E1                       = _UxGT("L·ª±a ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_SELECT_E2                       = _UxGT("L·ª±a ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_SELECT_E3                       = _UxGT("L·ª±a ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_SELECT_E4                       = _UxGT("L·ª±a ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_SELECT_E5                       = _UxGT("L·ª±a ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_SELECT_E                        = _UxGT("L·ª±a *");
   PROGMEM Language_Str MSG_ACC                             = _UxGT("TƒÉng T·ªëc");
   PROGMEM Language_Str MSG_JERK                            = _UxGT("Gi·∫≠t");
   PROGMEM Language_Str MSG_VA_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_A;
@@ -302,12 +238,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("Vƒëa") LCD_STR_B;                        // Vmax
   PROGMEM Language_Str MSG_VMAX_C                          = _UxGT("Vƒëa") LCD_STR_C;                        // Vmax
   PROGMEM Language_Str MSG_VMAX_E                          = _UxGT("Vƒëa") LCD_STR_E;                        // Vmax
-  PROGMEM Language_Str MSG_VMAX_E0                         = _UxGT("Vƒëa ") LCD_STR_E0;                      // Vmax
-  PROGMEM Language_Str MSG_VMAX_E1                         = _UxGT("Vƒëa ") LCD_STR_E1;                      // Vmax
-  PROGMEM Language_Str MSG_VMAX_E2                         = _UxGT("Vƒëa ") LCD_STR_E2;                      // Vmax
-  PROGMEM Language_Str MSG_VMAX_E3                         = _UxGT("Vƒëa ") LCD_STR_E3;                      // Vmax
-  PROGMEM Language_Str MSG_VMAX_E4                         = _UxGT("Vƒëa ") LCD_STR_E4;                      // Vmax
-  PROGMEM Language_Str MSG_VMAX_E5                         = _UxGT("Vƒëa ") LCD_STR_E5;                      // Vmax
+  PROGMEM Language_Str MSG_VMAX_EN                         = _UxGT("Vƒëa *");                                // Vmax
   PROGMEM Language_Str MSG_VMIN                            = _UxGT("Vthi·ªÉu");                               // Vmin
   PROGMEM Language_Str MSG_VTRAV_MIN                       = _UxGT("Vchuy·ªÉn thi·ªÉu");                        // VTrav min
   PROGMEM Language_Str MSG_ACCELERATION                    = _UxGT("S·ª± tƒÉng t·ªëc");                          // Acceleration
@@ -315,12 +246,7 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_AMAX_B                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_B;                // Amax
   PROGMEM Language_Str MSG_AMAX_C                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_C;                // Amax
   PROGMEM Language_Str MSG_AMAX_E                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_E;                // Amax
-  PROGMEM Language_Str MSG_AMAX_E0                         = _UxGT("TƒÉng t·ªëc ca ") LCD_STR_E0;              // Amax
-  PROGMEM Language_Str MSG_AMAX_E1                         = _UxGT("TƒÉng t·ªëc ca ") LCD_STR_E1;              // Amax
-  PROGMEM Language_Str MSG_AMAX_E2                         = _UxGT("TƒÉng t·ªëc ca ") LCD_STR_E2;              // Amax
-  PROGMEM Language_Str MSG_AMAX_E3                         = _UxGT("TƒÉng t·ªëc ca ") LCD_STR_E3;              // Amax
-  PROGMEM Language_Str MSG_AMAX_E4                         = _UxGT("TƒÉng t·ªëc ca ") LCD_STR_E4;              // Amax
-  PROGMEM Language_Str MSG_AMAX_E5                         = _UxGT("TƒÉng t·ªëc ca ") LCD_STR_E5;              // Amax
+  PROGMEM Language_Str MSG_AMAX_EN                         = _UxGT("TƒÉng t·ªëc ca *");                        // Amax
   PROGMEM Language_Str MSG_A_RETRACT                       = _UxGT("TT-R√∫t");                               // A-retract
   PROGMEM Language_Str MSG_A_TRAVEL                        = _UxGT("TT-Chuy·ªÉn");                            // A-travel
   PROGMEM Language_Str MSG_STEPS_PER_MM                    = _UxGT("B∆∞∆°ÕÅc/mm");                              // Steps
@@ -328,32 +254,17 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_B_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_B _UxGT("/mm");
   PROGMEM Language_Str MSG_C_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_C _UxGT("/mm");
   PROGMEM Language_Str MSG_E_STEPS                         = _UxGT("B∆∞·ªõcE/mm");
-  PROGMEM Language_Str MSG_E0_STEPS                        = _UxGT("B∆∞·ªõc ") LCD_STR_E0 _UxGT("/mm");
-  PROGMEM Language_Str MSG_E1_STEPS                        = _UxGT("B∆∞·ªõc ") LCD_STR_E1 _UxGT("/mm");
-  PROGMEM Language_Str MSG_E2_STEPS                        = _UxGT("B∆∞·ªõc ") LCD_STR_E2 _UxGT("/mm");
-  PROGMEM Language_Str MSG_E3_STEPS                        = _UxGT("B∆∞·ªõc ") LCD_STR_E3 _UxGT("/mm");
-  PROGMEM Language_Str MSG_E4_STEPS                        = _UxGT("B∆∞·ªõc ") LCD_STR_E4 _UxGT("/mm");
-  PROGMEM Language_Str MSG_E5_STEPS                        = _UxGT("B∆∞·ªõc ") LCD_STR_E5 _UxGT("/mm");
+  PROGMEM Language_Str MSG_EN_STEPS                        = _UxGT("B∆∞·ªõc */mm");
   PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Nhi·ªát ƒë·ªô");                             // Temperature
   PROGMEM Language_Str MSG_MOTION                          = _UxGT("Chuy·ªÉn ƒë·ªông");                          // Motion
   PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("V·∫≠t li·ªáu in");                          // d√¢y nh·ª±a
   PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("E b·∫±ng mm¬≥");                           // E in mm
   PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a");                      // Fil. Dai.
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E0                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E1                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E2                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E3                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E4                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E5                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E                 = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a *");
   PROGMEM Language_Str MSG_FILAMENT_UNLOAD                 = _UxGT("D·ª° mm");                                // unload mm
   PROGMEM Language_Str MSG_FILAMENT_LOAD                   = _UxGT("N·∫°p mm");
   PROGMEM Language_Str MSG_ADVANCE_K                       = _UxGT("K C·∫•p Cao");                            // Advance K
-  PROGMEM Language_Str MSG_ADVANCE_K_E0                    = _UxGT("K C·∫•p Cao ") LCD_STR_E0;                // Advance K
-  PROGMEM Language_Str MSG_ADVANCE_K_E1                    = _UxGT("K C·∫•p Cao ") LCD_STR_E1;                // Advance K
-  PROGMEM Language_Str MSG_ADVANCE_K_E2                    = _UxGT("K C·∫•p Cao ") LCD_STR_E2;                // Advance K
-  PROGMEM Language_Str MSG_ADVANCE_K_E3                    = _UxGT("K C·∫•p Cao ") LCD_STR_E3;                // Advance K
-  PROGMEM Language_Str MSG_ADVANCE_K_E4                    = _UxGT("K C·∫•p Cao ") LCD_STR_E4;                // Advance K
-  PROGMEM Language_Str MSG_ADVANCE_K_E5                    = _UxGT("K C·∫•p Cao ") LCD_STR_E5;                // Advance K
+  PROGMEM Language_Str MSG_ADVANCE_K_E                     = _UxGT("K C·∫•p Cao *");                          // Advance K
   PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("ƒê·ªô t∆∞∆°ng ph·∫£n LCD");                    // LCD contrast
   PROGMEM Language_Str MSG_STORE_EEPROM                    = _UxGT("L∆∞u c√°c thi·∫øt l·∫≠p");                    // Store settings
   PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("T·∫£i c√°c c√†i ƒë·∫∑t");                      // Load settings
@@ -394,25 +305,11 @@ namespace Language_vi {
   PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPD          = _UxGT("T·ªëc ƒê·ªô Tu√¥n Ra");                       // Prime Speed
   PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPD        = _UxGT("T·ªëc ƒê·ªô R√∫t L·∫°i");                       // Retract Speed
   PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Thay d√¢y nh·ª±a");                        // change filament
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E0               = _UxGT("Thay d√¢y nh·ª±a ") LCD_STR_E0;            // change filament
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E1               = _UxGT("Thay d√¢y nh·ª±a ") LCD_STR_E1;            // change filament
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E2               = _UxGT("Thay d√¢y nh·ª±a ") LCD_STR_E2;            // change filament
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E3               = _UxGT("Thay d√¢y nh·ª±a ") LCD_STR_E3;            // change filament
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E4               = _UxGT("Thay d√¢y nh·ª±a ") LCD_STR_E4;            // change filament
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E5               = _UxGT("Thay d√¢y nh·ª±a ") LCD_STR_E5;            // change filament
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E                = _UxGT("Thay d√¢y nh·ª±a *");                      // change filament
   PROGMEM Language_Str MSG_FILAMENTLOAD                    = _UxGT("N·∫°p d√¢y nh·ª±a");                         // load filament
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E0                 = _UxGT("N·∫°p d√¢y nh·ª±a ") LCD_STR_E0;             // load filament
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E1                 = _UxGT("N·∫°p d√¢y nh·ª±a ") LCD_STR_E1;             // load filament
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E2                 = _UxGT("N·∫°p d√¢y nh·ª±a ") LCD_STR_E2;             // load filament
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E3                 = _UxGT("N·∫°p d√¢y nh·ª±a ") LCD_STR_E3;             // load filament
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E4                 = _UxGT("N·∫°p d√¢y nh·ª±a ") LCD_STR_E4;             // load filament
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E5                 = _UxGT("N·∫°p d√¢y nh·ª±a ") LCD_STR_E5;             // load filament
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E0               = _UxGT("D·ª° d√¢y nh·ª±a ") LCD_STR_E0;              // unload filament
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E1               = _UxGT("D·ª° d√¢y nh·ª±a ") LCD_STR_E1;              // unload filament
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E2               = _UxGT("D·ª° d√¢y nh·ª±a ") LCD_STR_E2;              // unload filament
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E3               = _UxGT("D·ª° d√¢y nh·ª±a ") LCD_STR_E3;              // unload filament
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E4               = _UxGT("D·ª° d√¢y nh·ª±a ") LCD_STR_E4;              // unload filament
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E5               = _UxGT("D·ª° d√¢y nh·ª±a ") LCD_STR_E5;              // unload filament
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E                  = _UxGT("N·∫°p d√¢y nh·ª±a *");                       // load filament
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD                  = _UxGT("D·ª° d√¢y nh·ª±a");                          // unload filament
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E                = _UxGT("D·ª° d√¢y nh·ª±a *");                        // unload filament
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("D·ª° t·∫•t c·∫£");                            // Unload All
   PROGMEM Language_Str MSG_INIT_SDCARD                     = _UxGT("Kh·ªüi t·∫°o th·∫ª SD ");                     // Init. SD card
   PROGMEM Language_Str MSG_CHANGE_SDCARD                   = _UxGT("Thay th·∫ª SD");                          // Change SD card

commit 6a865a614620d71521bd3dc032adffe0bf82378c
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Wed Oct 9 18:46:10 2019 -0600

    Multi-language support (#15453)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index b1520274fd..abb96a58a1 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -28,410 +28,518 @@
  * See also http://marlinfw.org/docs/development/lcd_language.html
  *
  */
+namespace Language_vi {
+  using namespace Language_en; // Inherit undefined strings from English
 
-#define CHARSIZE 2
+  constexpr uint8_t    CHARSIZE                            = 2;
+  PROGMEM Language_Str LANGUAGE                            = _UxGT("Vietnamese");
 
-#define THIS_LANGUAGES_SPECIAL_SYMBOLS      _UxGT("√†·∫°·∫≠·∫µ·∫Ø·∫•·∫ßƒë·∫ª·ªÉ·∫ø·ªÅ√¨·ªâ·ªü·ªô·ªó·ª£√∫·ª±")
+  PROGMEM Language_Str WELCOME_MSG                         = MACHINE_NAME _UxGT(" S·∫µn s√†ng.");              // Ready
+  PROGMEM Language_Str MSG_BACK                            = _UxGT("Tr·ªü l·∫°i");                              // Back
+  PROGMEM Language_Str MSG_SD_INSERTED                     = _UxGT("Th·∫ª ƒë∆∞·ª£c c·∫Øm v√†o");                     // Card inserted
+  PROGMEM Language_Str MSG_SD_REMOVED                      = _UxGT("Th·∫ª ƒë∆∞·ª£c r√∫t ra");
+  PROGMEM Language_Str MSG_LCD_ENDSTOPS                    = _UxGT("C√¥ng t·∫Øc");                             // Endstops - c√¥ng t·∫Øc h√†nh tr√¨nh
+  PROGMEM Language_Str MSG_LCD_SOFT_ENDSTOPS               = _UxGT("C√¥ng t·∫Øc m·ªÅm");                         // soft Endstops
+  PROGMEM Language_Str MSG_MAIN                            = _UxGT("Ch√≠nh");                                // Main
+  PROGMEM Language_Str MSG_ADVANCED_SETTINGS               = _UxGT("Thi·∫øt l·∫≠p c·∫•p cao");                    // Advanced Settings
+  PROGMEM Language_Str MSG_CONFIGURATION                   = _UxGT("C·∫•u h√¨nh");                             // Configuration
+  PROGMEM Language_Str MSG_AUTOSTART                       = _UxGT("Kh·ªüi ch·∫°y t·ª± ƒë·ªông");                    // Autostart
+  PROGMEM Language_Str MSG_DISABLE_STEPPERS                = _UxGT("T·∫Øt ƒë·ªông c∆° b∆∞·ªõc");                     // Disable steppers
+  PROGMEM Language_Str MSG_DEBUG_MENU                      = _UxGT("Menu g·ª° l·ªói");                          // Debug Menu
+  PROGMEM Language_Str MSG_PROGRESS_BAR_TEST               = _UxGT("Ki·ªÉm tra ti·∫øn ƒë·ªô");                     // Progress bar test
+  PROGMEM Language_Str MSG_AUTO_HOME                       = _UxGT("V·ªÅ nh√† t·ª± ƒë·ªông");                       // Auto home
+  PROGMEM Language_Str MSG_AUTO_HOME_X                     = _UxGT("V·ªÅ nh√† X");                             // home x
+  PROGMEM Language_Str MSG_AUTO_HOME_Y                     = _UxGT("V·ªÅ nh√† Y");                             // home y
+  PROGMEM Language_Str MSG_AUTO_HOME_Z                     = _UxGT("V·ªÅ nh√† Z");
+  PROGMEM Language_Str MSG_AUTO_Z_ALIGN                    = _UxGT("Ch·ªânh canh Z t·ª± ƒë·ªông");
+  PROGMEM Language_Str MSG_LEVEL_BED_HOMING                = _UxGT("ƒêang v·ªÅ nh√† XYZ");                      // Homing XYZ
+  PROGMEM Language_Str MSG_LEVEL_BED_WAITING               = _UxGT("Nh·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu");                      // Click to Begin
+  PROGMEM Language_Str MSG_LEVEL_BED_NEXT_POINT            = _UxGT("ƒêi·ªÉm ti·∫øp theo");                       // Next Point
+  PROGMEM Language_Str MSG_LEVEL_BED_DONE                  = _UxGT("San l·∫•p ƒë∆∞·ª£c ho√†n th√†nh");              // Leveling Done!
+  PROGMEM Language_Str MSG_Z_FADE_HEIGHT                   = _UxGT("Chi·ªÅu cao m·ªù d·∫ßn");                     // Fade Height
+  PROGMEM Language_Str MSG_SET_HOME_OFFSETS                = _UxGT("ƒê·∫∑t b√π ƒë·∫Øp nh√†");                       // Set home offsets
+  PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("B√π ƒë·∫Øp ƒë∆∞·ª£c √°p d·ª•ng");                  // Offsets applied
+  PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("ƒê·∫∑t ngu·ªìn g·ªëc");                        // Set origin
+  PROGMEM Language_Str MSG_PREHEAT_1                       = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc");   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_1_H0                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N0;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_1_H1                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N1;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_1_H2                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N2;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_1_H3                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N3;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_1_H4                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N4;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_1_H5                    = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N5;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_1_END                   = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu");
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E0                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N0;
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E1                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N1;
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E2                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N2;
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E3                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N3;
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E4                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N4;
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E5                = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N5;
+  PROGMEM Language_Str MSG_PREHEAT_1_ALL                   = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" T·∫•t c·∫£");    // all
+  PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY               = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" B√†n");       // bed -- using vietnamese term for 'table' instead
+  PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS              = _UxGT("L√†m n√≥ng ") PREHEAT_1_LABEL _UxGT(" C·∫•u h√¨nh");  // conf
+  PROGMEM Language_Str MSG_PREHEAT_2                       = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc");   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_2_H0                    = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N0;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_2_H1                    = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N1;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_2_H2                    = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N2;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_2_H3                    = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N3;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_2_H4                    = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N4;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_2_H5                    = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" tr∆∞·ªõc ") LCD_STR_N5;   // Preheat
+  PROGMEM Language_Str MSG_PREHEAT_2_END                   = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu");
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E0                = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N0;
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E1                = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N1;
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E2                = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N2;
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E3                = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N3;
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E4                = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N4;
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E5                = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" ƒê·∫ßu ") LCD_STR_N5;
+  PROGMEM Language_Str MSG_PREHEAT_2_ALL                   = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" T·∫•t c·∫£");    // all
+  PROGMEM Language_Str MSG_PREHEAT_2_BEDONLY               = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" B√†n");       // bed -- using vietnamese term for 'table' instead
+  PROGMEM Language_Str MSG_PREHEAT_2_SETTINGS              = _UxGT("L√†m n√≥ng ") PREHEAT_2_LABEL _UxGT(" C·∫•u h√¨nh");  // conf
+  PROGMEM Language_Str MSG_PREHEAT_CUSTOM                  = _UxGT("S∆∞Ã£ n√≥ng tr∆∞·ªõc t·ª± ch·ªçn");                // Preheat Custom
+  PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("Ngu·ªôi xu·ªëng");                          // Cooldown
+  PROGMEM Language_Str MSG_SWITCH_PS_ON                    = _UxGT("B·∫≠t ngu·ªìn");                            // Switch power on
+  PROGMEM Language_Str MSG_SWITCH_PS_OFF                   = _UxGT("T·∫Øt ngu·ªìn");                            // Switch power off
+  PROGMEM Language_Str MSG_EXTRUDE                         = _UxGT("√âp ƒë√πn");                               // Extrude
+  PROGMEM Language_Str MSG_RETRACT                         = _UxGT("R√∫t l·∫°i");                              // Retract
+  PROGMEM Language_Str MSG_MOVE_AXIS                       = _UxGT("Di chuy·ªÉn tr·ª•c");                       // Move axis
+  PROGMEM Language_Str MSG_BED_LEVELING                    = _UxGT("San L·∫•p B√†n");                          // Bed Leveling
+  PROGMEM Language_Str MSG_LEVEL_BED                       = _UxGT("LaÕÄm bƒÉÕÄng m·∫∑t b√†n");                     // Level bed
+  PROGMEM Language_Str MSG_LEVEL_CORNERS                   = _UxGT("LaÕÄm bƒÉÕÄng g√≥c b√†n");                     // Level corners
+  PROGMEM Language_Str MSG_NEXT_CORNER                     = _UxGT("G√≥c ti·∫øp theo");                        // Next corner
+  PROGMEM Language_Str MSG_EDITING_STOPPED                 = _UxGT("Ch·ªânh l∆∞·ªõi ƒë√£ d·ª´ng");                   // Mesh Editing Stopped
+  PROGMEM Language_Str MSG_MESH_X                          = _UxGT("MuÃ£c luÃ£c X");                            // Index X
+  PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("MuÃ£c luÃ£c Y");
+  PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Gi√° tr·ªã Z");                            // Z Value
+  PROGMEM Language_Str MSG_USER_MENU                       = _UxGT("C√°c l·ªánh t·ª± ch·ªçn");                     // Custom Commands
+  PROGMEM Language_Str MSG_UBL_DOING_G29                   = _UxGT("ƒêang ch·∫°y G29");                        // Doing G29
+  PROGMEM Language_Str MSG_UBL_TOOLS                       = _UxGT("C√¥ng c·ª• UBL");                          // UBL tools
+  PROGMEM Language_Str MSG_UBL_LEVEL_BED                   = _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t (UBL)");         // Unified Bed Leveling
+  PROGMEM Language_Str MSG_IDEX_MENU                       = _UxGT("ch·∫ø ƒë·ªô IDEX");                          // IDEX Mode
+  PROGMEM Language_Str MSG_IDEX_MODE_AUTOPARK              = _UxGT("ƒê√¢Ã£u t·ª± ƒë·ªông");                          // Auto-Park
+  PROGMEM Language_Str MSG_IDEX_MODE_DUPLICATE             = _UxGT("S∆∞Ã£ g√¢ÕÅp ƒë√¥i");                           // Duplication
+  PROGMEM Language_Str MSG_IDEX_MODE_SCALED_COPY           = _UxGT("B·∫£n sao thu nh·ªè");
+  PROGMEM Language_Str MSG_IDEX_MODE_FULL_CTRL             = _UxGT("To√†n quy·ªÅn ƒëi·ªÅu khi·ªÉn");                // Full control
+  PROGMEM Language_Str MSG_IDEX_X_OFFSET                   = _UxGT("ƒê·∫ßu phun X nhiÕÄ");                       // 2nd nozzle X
+  PROGMEM Language_Str MSG_IDEX_Y_OFFSET                   = _UxGT("ƒê·∫ßu phun Y nhiÕÄ");
+  PROGMEM Language_Str MSG_IDEX_Z_OFFSET                   = _UxGT("ƒê·∫ßu phun Z nhiÕÄ");
+  PROGMEM Language_Str MSG_IDEX_SAVE_OFFSETS               = _UxGT("L∆∞u b√π ƒë·∫Øp");                           // Save offsets
+  PROGMEM Language_Str MSG_UBL_MANUAL_MESH                 = _UxGT("T·ª± x√¢y d·ª±ng l∆∞·ªõi");                     // Manually Build Mesh
+  PROGMEM Language_Str MSG_UBL_BC_INSERT                   = _UxGT("ƒêƒÉÃ£t ch√™m v√† ƒëo");                       // Place shim & measure
+  PROGMEM Language_Str MSG_UBL_BC_INSERT2                  = _UxGT("ƒêo");                                   // Measure
+  PROGMEM Language_Str MSG_UBL_BC_REMOVE                   = _UxGT("ThaÕÅo v√† ƒëo b√†n");                       // Remove & measure bed
+  PROGMEM Language_Str MSG_UBL_MOVING_TO_NEXT              = _UxGT("Chuy·ªÉn sang ti·∫øp theo");                // moving to next
+  PROGMEM Language_Str MSG_UBL_ACTIVATE_MESH               = _UxGT("B·∫≠t UBL");
+  PROGMEM Language_Str MSG_UBL_DEACTIVATE_MESH             = _UxGT("T·∫Øt UBL");
+  PROGMEM Language_Str MSG_UBL_SET_TEMP_BED                = _UxGT("Nhi·ªát ƒë·ªô b√†n");                         // Bed Temp
+  PROGMEM Language_Str MSG_UBL_BED_TEMP_CUSTOM             = _UxGT("Bed Temp");
+  PROGMEM Language_Str MSG_UBL_SET_TEMP_HOTEND             = _UxGT("Nhi·ªát ƒë·ªô ƒë·∫ßu phun");                    // Hotend Temp
+  PROGMEM Language_Str MSG_UBL_HOTEND_TEMP_CUSTOM          = _UxGT("Hotend Temp");
+  PROGMEM Language_Str MSG_UBL_MESH_EDIT                   = _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi");                       // Mesh Edit
+  PROGMEM Language_Str MSG_UBL_EDIT_CUSTOM_MESH            = _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi t·ª± ch·ªçn");               // Edit Custom Mesh
+  PROGMEM Language_Str MSG_UBL_FINE_TUNE_MESH              = _UxGT("Ch·ªânh l∆∞·ªõi ch√≠nh x√°c");                 // Fine tuning mesh
+  PROGMEM Language_Str MSG_UBL_DONE_EDITING_MESH           = _UxGT("Ch·ªânh s·ª≠a xong l∆∞·ªõi");                  // Done Editing Mesh
+  PROGMEM Language_Str MSG_UBL_BUILD_CUSTOM_MESH           = _UxGT("X√¢y d·ª±ng l∆∞·ªõi t·ª± ch·ªçn");                // Build Custom Mesh
+  PROGMEM Language_Str MSG_UBL_BUILD_MESH_MENU             = _UxGT("X√¢y d·ª±ng l∆∞·ªõi");                        // Build Mesh
+  PROGMEM Language_Str MSG_UBL_BUILD_MESH_M1               = _UxGT("X√¢y d·ª±ng l∆∞·ªõi (") PREHEAT_1_LABEL _UxGT(")");
+  PROGMEM Language_Str MSG_UBL_BUILD_MESH_M2               = _UxGT("X√¢y d·ª±ng l∆∞·ªõi (") PREHEAT_2_LABEL _UxGT(")");
+  PROGMEM Language_Str MSG_UBL_BUILD_COLD_MESH             = _UxGT("X√¢y d·ª±ng l∆∞·ªõi l·∫°nh");                   // Build cold mesh
+  PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_ADJUST          = _UxGT("ƒêi·ªÅu ch·ªânh chi·ªÅu cao l∆∞·ªõi");            // Adjust Mesh Height
+  PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_AMOUNT          = _UxGT("S·ªë l∆∞·ª£ng chi·ªÅu cao");                   // Height Amount
+  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_MENU          = _UxGT("Th·∫©m tra l∆∞·ªõi");                        // Validate Mesh
+  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M1            = _UxGT("Th·∫©m tra l∆∞·ªõi (") PREHEAT_1_LABEL _UxGT(")");
+  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M2            = _UxGT("Th·∫©m tra l∆∞·ªõi (") PREHEAT_2_LABEL _UxGT(")");
+  PROGMEM Language_Str MSG_UBL_VALIDATE_CUSTOM_MESH        = _UxGT("Th·∫©m tra l∆∞·ªõi t·ª± ch·ªçn");                // validate custom mesh
+  PROGMEM Language_Str MSG_UBL_CONTINUE_MESH               = _UxGT("Ti·∫øp t·ª•c x√¢y l∆∞·ªõi b√†n");                // Continue Bed Mesh
+  PROGMEM Language_Str MSG_UBL_MESH_LEVELING               = _UxGT("ƒêang san l·∫•p l∆∞·ªõi");                    // Mesh Leveling
+  PROGMEM Language_Str MSG_UBL_3POINT_MESH_LEVELING        = _UxGT("ƒêang san l·∫•p 3-ƒëi·ªÉm");                  // 3-Point Leveling
+  PROGMEM Language_Str MSG_UBL_GRID_MESH_LEVELING          = _UxGT("ƒêang san l·∫•p l∆∞·ªõi ph·∫≥ng");              // Grid (planar) Mesh Leveling
+  PROGMEM Language_Str MSG_UBL_MESH_LEVEL                  = _UxGT("LaÕÄm bƒÉÕÄng l∆∞·ªõi");                        // Level Mesh
+  PROGMEM Language_Str MSG_UBL_SIDE_POINTS                 = _UxGT("ƒêi·ªÉm b√™n caÃ£nh");                        // Side Points
+  PROGMEM Language_Str MSG_UBL_MAP_TYPE                    = _UxGT("Lo·∫°i b·∫£n ƒë·ªì");                          // Map Type
+  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP                  = _UxGT("ƒê·∫ßu ra b·∫£n ƒë·ªì l∆∞·ªõi");                   // Output Mesh Map
+  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_HOST             = _UxGT("ƒê·∫ßu ra cho m√°y ch·ªß");                   // Output for Host
+  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_CSV              = _UxGT("ƒê·∫ßu ra cho CSV");                       // Output for CSV
+  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_BACKUP           = _UxGT("H·ªó tr·ª£ l∆∞·ªõi");                          // Off Printer Backup | backup mesh
+  PROGMEM Language_Str MSG_UBL_INFO_UBL                    = _UxGT("ƒê·∫ßu ra th√¥ng tin UBL");                 // Output UBL Info
+  PROGMEM Language_Str MSG_EDIT_MESH                       = _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi");                       // Edit mesh
+  PROGMEM Language_Str MSG_UBL_FILLIN_AMOUNT               = _UxGT("S·ªë l∆∞·ª£ng l√¢ÕÅp ƒë√¢ÕÄy");                     // Fill-in Amount
+  PROGMEM Language_Str MSG_UBL_MANUAL_FILLIN               = _UxGT("T·ª± l√¢ÕÅp ƒë√¢ÕÄy");                           // Manual Fill-in
+  PROGMEM Language_Str MSG_UBL_SMART_FILLIN                = _UxGT("L√¢ÕÅp ƒë√¢ÕÄy th√¥ng minh");                   // Smart Fill-in
+  PROGMEM Language_Str MSG_UBL_FILLIN_MESH                 = _UxGT("L∆∞·ªõi l√¢ÕÅp ƒë√¢ÕÄy");                         // Fill-in Mesh
+  PROGMEM Language_Str MSG_UBL_INVALIDATE_ALL              = _UxGT("BaÕÅc boÃâ t·∫•t c·∫£");                       // Invalidate All
+  PROGMEM Language_Str MSG_UBL_INVALIDATE_CLOSEST          = _UxGT("BaÕÅc boÃâ g·∫ßn nh·∫•t");                     // Invalidate Closest
+  PROGMEM Language_Str MSG_UBL_FINE_TUNE_ALL               = _UxGT("Ch·ªânh ch√≠nh x√°c t·∫•t c·∫£");               // Fine Tune ALl
+  PROGMEM Language_Str MSG_UBL_FINE_TUNE_CLOSEST           = _UxGT("Ch·ªânh ch√≠nh x√°c g·∫ßn nh·∫•t");             // Fine Tune Closest
+  PROGMEM Language_Str MSG_UBL_STORAGE_MESH_MENU           = _UxGT("L∆∞u tr·ªØ l∆∞·ªõi");                         // Mesh Storage
+  PROGMEM Language_Str MSG_UBL_STORAGE_SLOT                = _UxGT("Khe nh·ªõ");                              // Memory Slot
+  PROGMEM Language_Str MSG_UBL_LOAD_MESH                   = _UxGT("T·∫£i l∆∞·ªõi b√†n");                         // Load Bed Mesh
+  PROGMEM Language_Str MSG_UBL_SAVE_MESH                   = _UxGT("L∆∞u l∆∞·ªõi b√†n");                         // Save Bed Mesh
+  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("M117 %i l∆∞·ªõi ƒë∆∞·ª£c n·∫°p");                     // Mesh %i loaded
+  PROGMEM Language_Str MSG_MESH_SAVED                      = _UxGT("M117 %i l∆∞·ªõi ƒë√£ l∆∞u");
+  PROGMEM Language_Str MSG_NO_STORAGE                      = _UxGT("Kh√¥ng l∆∞u tr·ªØ");                        // No Storage
+  PROGMEM Language_Str MSG_UBL_SAVE_ERROR                  = _UxGT("ƒêi√™ÕÄu sai: L∆∞u UBL");                    // Err: UBL Save
+  PROGMEM Language_Str MSG_UBL_RESTORE_ERROR               = _UxGT("ƒêi√™ÕÄu Sai: Kh√¥i Ph·ª•c UBL");              // Err: UBL Restore
+  PROGMEM Language_Str MSG_UBL_Z_OFFSET_STOPPED            = _UxGT("ƒê·∫ßu D√≤-Z ƒê√£ Ng∆∞ÕÄng");                    // Z-Offset Stopped
+  PROGMEM Language_Str MSG_UBL_STEP_BY_STEP_MENU           = _UxGT("B∆∞·ªõc-T·ª´ng-B∆∞·ªõc UBL");                   // Step-By-Step UBL
+  PROGMEM Language_Str MSG_UBL_1_BUILD_COLD_MESH           = _UxGT("1.X√¢y d·ª±ng l∆∞·ªõi l·∫°nh");
+  PROGMEM Language_Str MSG_UBL_2_SMART_FILLIN              = _UxGT("2.L√¢ÕÅp ƒë√¢ÕÄy th√¥ng minh");
+  PROGMEM Language_Str MSG_UBL_3_VALIDATE_MESH_MENU        = _UxGT("3.Th·∫©m tra l∆∞·ªõi");
+  PROGMEM Language_Str MSG_UBL_4_FINE_TUNE_ALL             = _UxGT("4.Ch·ªânh ch√≠nh x√°c t·∫•t c·∫£");
+  PROGMEM Language_Str MSG_UBL_5_VALIDATE_MESH_MENU        = _UxGT("5.Th·∫©m tra l∆∞·ªõi");
+  PROGMEM Language_Str MSG_UBL_6_FINE_TUNE_ALL             = _UxGT("6.Ch·ªânh ch√≠nh x√°c t·∫•t c·∫£");
+  PROGMEM Language_Str MSG_UBL_7_SAVE_MESH                 = _UxGT("7.L∆∞u l∆∞·ªõi b√†n");
 
-#define WELCOME_MSG                         MACHINE_NAME _UxGT(" S·∫µn s√†ng.")              // Ready
-#define MSG_BACK                            _UxGT("Tr·ªü l·∫°i")                              // Back
-#define MSG_SD_INSERTED                     _UxGT("Th·∫ª ƒë∆∞·ª£c c·∫Øm v√†o")                     // Card inserted
-#define MSG_SD_REMOVED                      _UxGT("Th·∫ª ƒë∆∞·ª£c r√∫t ra")
-#define MSG_LCD_ENDSTOPS                    _UxGT("C√¥ng t·∫Øc")                             // Endstops - c√¥ng t·∫Øc h√†nh tr√¨nh
-#define MSG_LCD_SOFT_ENDSTOPS               _UxGT("C√¥ng t·∫Øc m·ªÅm")                         // soft Endstops
-#define MSG_MAIN                            _UxGT("Ch√≠nh")                                // Main
-#define MSG_ADVANCED_SETTINGS               _UxGT("Thi·∫øt l·∫≠p c·∫•p cao")                    // Advanced Settings
-#define MSG_CONFIGURATION                   _UxGT("C·∫•u h√¨nh")                             // Configuration
-#define MSG_AUTOSTART                       _UxGT("Kh·ªüi ch·∫°y t·ª± ƒë·ªông")                    // Autostart
-#define MSG_DISABLE_STEPPERS                _UxGT("T·∫Øt ƒë·ªông c∆° b∆∞·ªõc")                     // Disable steppers
-#define MSG_DEBUG_MENU                      _UxGT("Menu g·ª° l·ªói")                          // Debug Menu
-#define MSG_PROGRESS_BAR_TEST               _UxGT("Ki·ªÉm tra ti·∫øn ƒë·ªô")                     // Progress bar test
-#define MSG_AUTO_HOME                       _UxGT("V·ªÅ nh√† t·ª± ƒë·ªông")                       // Auto home
-#define MSG_AUTO_HOME_X                     _UxGT("V·ªÅ nh√† X")                             // home x
-#define MSG_AUTO_HOME_Y                     _UxGT("V·ªÅ nh√† Y")                             // home y
-#define MSG_AUTO_HOME_Z                     _UxGT("V·ªÅ nh√† Z")
-#define MSG_AUTO_Z_ALIGN                    _UxGT("Ch·ªânh canh Z t·ª± ƒë·ªông")
-#define MSG_LEVEL_BED_HOMING                _UxGT("ƒêang v·ªÅ nh√† XYZ")                      // Homing XYZ
-#define MSG_LEVEL_BED_WAITING               _UxGT("Nh·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu")                      // Click to Begin
-#define MSG_LEVEL_BED_NEXT_POINT            _UxGT("ƒêi·ªÉm ti·∫øp theo")                       // Next Point
-#define MSG_LEVEL_BED_DONE                  _UxGT("San l·∫•p ƒë∆∞·ª£c ho√†n th√†nh")              // Leveling Done!
-#define MSG_Z_FADE_HEIGHT                   _UxGT("Chi·ªÅu cao m·ªù d·∫ßn")                     // Fade Height
-#define MSG_SET_HOME_OFFSETS                _UxGT("ƒê·∫∑t b√π ƒë·∫Øp nh√†")                       // Set home offsets
-#define MSG_HOME_OFFSETS_APPLIED            _UxGT("B√π ƒë·∫Øp ƒë∆∞·ª£c √°p d·ª•ng")                  // Offsets applied
-#define MSG_SET_ORIGIN                      _UxGT("ƒê·∫∑t ngu·ªìn g·ªëc")                        // Set origin
-#define MSG_PREHEAT_1                       _UxGT("L√†m n√≥ng " PREHEAT_1_LABEL " tr∆∞·ªõc")   // Preheat
-#define MSG_PREHEAT_1_N                     MSG_PREHEAT_1 _UxGT(" ")
-#define MSG_PREHEAT_1_ALL                   MSG_PREHEAT_1 _UxGT(" T·∫•t c·∫£")                // all
-#define MSG_PREHEAT_1_END                   MSG_PREHEAT_1 _UxGT(" ƒê·∫ßu")
-#define MSG_PREHEAT_1_BEDONLY               MSG_PREHEAT_1 _UxGT(" B√†n")                   // bed -- using vietnamese term for 'table' instead
-#define MSG_PREHEAT_1_SETTINGS              MSG_PREHEAT_1 _UxGT(" C·∫•u h√¨nh")              // conf
-#define MSG_PREHEAT_2                       _UxGT("L√†m n√≥ng " PREHEAT_2_LABEL " tr∆∞·ªõc")
-#define MSG_PREHEAT_2_N                     MSG_PREHEAT_2 _UxGT(" ")
-#define MSG_PREHEAT_2_ALL                   MSG_PREHEAT_2 _UxGT(" T·∫•t c·∫£")
-#define MSG_PREHEAT_2_END                   MSG_PREHEAT_2 _UxGT(" ƒê·∫ßu")
-#define MSG_PREHEAT_2_BEDONLY               MSG_PREHEAT_2 _UxGT(" B√†n")                   // bed -- using vietnamese term for 'table' instead
-#define MSG_PREHEAT_2_SETTINGS              MSG_PREHEAT_2 _UxGT(" C·∫•u h√¨nh")
-#define MSG_PREHEAT_CUSTOM                  _UxGT("S∆∞Ã£ n√≥ng tr∆∞·ªõc t·ª± ch·ªçn")                // Preheat Custom
-#define MSG_COOLDOWN                        _UxGT("Ngu·ªôi xu·ªëng")                          // Cooldown
-#define MSG_SWITCH_PS_ON                    _UxGT("B·∫≠t ngu·ªìn")                            // Switch power on
-#define MSG_SWITCH_PS_OFF                   _UxGT("T·∫Øt ngu·ªìn")                            // Switch power off
-#define MSG_EXTRUDE                         _UxGT("√âp ƒë√πn")                               // Extrude
-#define MSG_RETRACT                         _UxGT("R√∫t l·∫°i")                              // Retract
-#define MSG_MOVE_AXIS                       _UxGT("Di chuy·ªÉn tr·ª•c")                       // Move axis
-#define MSG_BED_LEVELING                    _UxGT("San L·∫•p B√†n")                          // Bed Leveling
-#define MSG_LEVEL_BED                       _UxGT("LaÕÄm bƒÉÕÄng m·∫∑t b√†n")                     // Level bed
-#define MSG_LEVEL_CORNERS                   _UxGT("LaÕÄm bƒÉÕÄng g√≥c b√†n")                     // Level corners
-#define MSG_NEXT_CORNER                     _UxGT("G√≥c ti·∫øp theo")                        // Next corner
-#define MSG_EDITING_STOPPED                 _UxGT("Ch·ªânh l∆∞·ªõi ƒë√£ d·ª´ng")                   // Mesh Editing Stopped
-#define MSG_MESH_X                          _UxGT("MuÃ£c luÃ£c X")                            // Index X
-#define MSG_MESH_Y                          _UxGT("MuÃ£c luÃ£c Y")
-#define MSG_MESH_EDIT_Z                     _UxGT("Gi√° tr·ªã Z")                            // Z Value
-#define MSG_USER_MENU                       _UxGT("C√°c l·ªánh t·ª± ch·ªçn")                     // Custom Commands
-#define MSG_UBL_DOING_G29                   _UxGT("ƒêang ch·∫°y G29")                        // Doing G29
-#define MSG_UBL_TOOLS                       _UxGT("C√¥ng c·ª• UBL")                          // UBL tools
-#define MSG_UBL_LEVEL_BED                   _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t (UBL)")         // Unified Bed Leveling
-#define MSG_IDEX_MENU                       _UxGT("ch·∫ø ƒë·ªô IDEX")                          // IDEX Mode
-#define MSG_IDEX_MODE_AUTOPARK              _UxGT("ƒê√¢Ã£u t·ª± ƒë·ªông")                          // Auto-Park
-#define MSG_IDEX_MODE_DUPLICATE             _UxGT("S∆∞Ã£ g√¢ÕÅp ƒë√¥i")                           // Duplication
-#define MSG_IDEX_MODE_SCALED_COPY           _UxGT("B·∫£n sao thu nh·ªè")
-#define MSG_IDEX_MODE_FULL_CTRL             _UxGT("To√†n quy·ªÅn ƒëi·ªÅu khi·ªÉn")                // Full control
-#define MSG_IDEX_X_OFFSET                   _UxGT("ƒê·∫ßu phun X nhiÕÄ")                       // 2nd nozzle X
-#define MSG_IDEX_Y_OFFSET                   _UxGT("ƒê·∫ßu phun Y nhiÕÄ")
-#define MSG_IDEX_Z_OFFSET                   _UxGT("ƒê·∫ßu phun Z nhiÕÄ")
-#define MSG_IDEX_SAVE_OFFSETS               _UxGT("L∆∞u b√π ƒë·∫Øp")                           // Save offsets
-#define MSG_UBL_MANUAL_MESH                 _UxGT("T·ª± x√¢y d·ª±ng l∆∞·ªõi")                     // Manually Build Mesh
-#define MSG_UBL_BC_INSERT                   _UxGT("ƒêƒÉÃ£t ch√™m v√† ƒëo")                       // Place shim & measure
-#define MSG_UBL_BC_INSERT2                  _UxGT("ƒêo")                                   // Measure
-#define MSG_UBL_BC_REMOVE                   _UxGT("ThaÕÅo v√† ƒëo b√†n")                       // Remove & measure bed
-#define MSG_UBL_MOVING_TO_NEXT              _UxGT("Chuy·ªÉn sang ti·∫øp theo")                // moving to next
-#define MSG_UBL_ACTIVATE_MESH               _UxGT("B·∫≠t UBL")
-#define MSG_UBL_DEACTIVATE_MESH             _UxGT("T·∫Øt UBL")
-#define MSG_UBL_SET_TEMP_BED                _UxGT("Nhi·ªát ƒë·ªô b√†n")                         // Bed Temp
-#define MSG_UBL_BED_TEMP_CUSTOM             MSG_UBL_SET_TEMP_BED
-#define MSG_UBL_SET_TEMP_HOTEND             _UxGT("Nhi·ªát ƒë·ªô ƒë·∫ßu phun")                    // Hotend Temp
-#define MSG_UBL_HOTEND_TEMP_CUSTOM          MSG_UBL_SET_TEMP_HOTEND
-#define MSG_UBL_MESH_EDIT                   _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi")                       // Mesh Edit
-#define MSG_UBL_EDIT_CUSTOM_MESH            _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi t·ª± ch·ªçn")               // Edit Custom Mesh
-#define MSG_UBL_FINE_TUNE_MESH              _UxGT("Ch·ªânh l∆∞·ªõi ch√≠nh x√°c")                 // Fine tuning mesh
-#define MSG_UBL_DONE_EDITING_MESH           _UxGT("Ch·ªânh s·ª≠a xong l∆∞·ªõi")                  // Done Editing Mesh
-#define MSG_UBL_BUILD_CUSTOM_MESH           _UxGT("X√¢y d·ª±ng l∆∞·ªõi t·ª± ch·ªçn")                // Build Custom Mesh
-#define MSG_UBL_BUILD_MESH_MENU             _UxGT("X√¢y d·ª±ng l∆∞·ªõi")                        // Build Mesh
-#define MSG_UBL_BUILD_MESH_M1               _UxGT("X√¢y d·ª±ng l∆∞·ªõi (" PREHEAT_1_LABEL ")")
-#define MSG_UBL_BUILD_MESH_M2               _UxGT("X√¢y d·ª±ng l∆∞·ªõi (" PREHEAT_2_LABEL ")")
-#define MSG_UBL_BUILD_COLD_MESH             _UxGT("X√¢y d·ª±ng l∆∞·ªõi l·∫°nh")                   // Build cold mesh
-#define MSG_UBL_MESH_HEIGHT_ADJUST          _UxGT("ƒêi·ªÅu ch·ªânh chi·ªÅu cao l∆∞·ªõi")            // Adjust Mesh Height
-#define MSG_UBL_MESH_HEIGHT_AMOUNT          _UxGT("S·ªë l∆∞·ª£ng chi·ªÅu cao")                   // Height Amount
-#define MSG_UBL_VALIDATE_MESH_MENU          _UxGT("Th·∫©m tra l∆∞·ªõi")                        // Validate Mesh
-#define MSG_UBL_VALIDATE_MESH_M1            _UxGT("Th·∫©m tra l∆∞·ªõi (" PREHEAT_1_LABEL ")")
-#define MSG_UBL_VALIDATE_MESH_M2            _UxGT("Th·∫©m tra l∆∞·ªõi (" PREHEAT_2_LABEL ")")
-#define MSG_UBL_VALIDATE_CUSTOM_MESH        _UxGT("Th·∫©m tra l∆∞·ªõi t·ª± ch·ªçn")                // validate custom mesh
-#define MSG_UBL_CONTINUE_MESH               _UxGT("Ti·∫øp t·ª•c x√¢y l∆∞·ªõi b√†n")                // Continue Bed Mesh
-#define MSG_UBL_MESH_LEVELING               _UxGT("ƒêang san l·∫•p l∆∞·ªõi")                    // Mesh Leveling
-#define MSG_UBL_3POINT_MESH_LEVELING        _UxGT("ƒêang san l·∫•p 3-ƒëi·ªÉm")                  // 3-Point Leveling
-#define MSG_UBL_GRID_MESH_LEVELING          _UxGT("ƒêang san l·∫•p l∆∞·ªõi ph·∫≥ng")              // Grid (planar) Mesh Leveling
-#define MSG_UBL_MESH_LEVEL                  _UxGT("LaÕÄm bƒÉÕÄng l∆∞·ªõi")                        // Level Mesh
-#define MSG_UBL_SIDE_POINTS                 _UxGT("ƒêi·ªÉm b√™n caÃ£nh")                        // Side Points
-#define MSG_UBL_MAP_TYPE                    _UxGT("Lo·∫°i b·∫£n ƒë·ªì")                          // Map Type
-#define MSG_UBL_OUTPUT_MAP                  _UxGT("ƒê·∫ßu ra b·∫£n ƒë·ªì l∆∞·ªõi")                   // Output Mesh Map
-#define MSG_UBL_OUTPUT_MAP_HOST             _UxGT("ƒê·∫ßu ra cho m√°y ch·ªß")                   // Output for Host
-#define MSG_UBL_OUTPUT_MAP_CSV              _UxGT("ƒê·∫ßu ra cho CSV")                       // Output for CSV
-#define MSG_UBL_OUTPUT_MAP_BACKUP           _UxGT("H·ªó tr·ª£ l∆∞·ªõi")                          // Off Printer Backup | backup mesh
-#define MSG_UBL_INFO_UBL                    _UxGT("ƒê·∫ßu ra th√¥ng tin UBL")                 // Output UBL Info
-#define MSG_EDIT_MESH                       _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi")                       // Edit mesh
-#define MSG_UBL_FILLIN_AMOUNT               _UxGT("S·ªë l∆∞·ª£ng l√¢ÕÅp ƒë√¢ÕÄy")                     // Fill-in Amount
-#define MSG_UBL_MANUAL_FILLIN               _UxGT("T·ª± l√¢ÕÅp ƒë√¢ÕÄy")                           // Manual Fill-in
-#define MSG_UBL_SMART_FILLIN                _UxGT("L√¢ÕÅp ƒë√¢ÕÄy th√¥ng minh")                   // Smart Fill-in
-#define MSG_UBL_FILLIN_MESH                 _UxGT("L∆∞·ªõi l√¢ÕÅp ƒë√¢ÕÄy")                         // Fill-in Mesh
-#define MSG_UBL_INVALIDATE_ALL              _UxGT("BaÕÅc boÃâ t·∫•t c·∫£")                       // Invalidate All
-#define MSG_UBL_INVALIDATE_CLOSEST          _UxGT("BaÕÅc boÃâ g·∫ßn nh·∫•t")                     // Invalidate Closest
-#define MSG_UBL_FINE_TUNE_ALL               _UxGT("Ch·ªânh ch√≠nh x√°c t·∫•t c·∫£")               // Fine Tune ALl
-#define MSG_UBL_FINE_TUNE_CLOSEST           _UxGT("Ch·ªânh ch√≠nh x√°c g·∫ßn nh·∫•t")             // Fine Tune Closest
-#define MSG_UBL_STORAGE_MESH_MENU           _UxGT("L∆∞u tr·ªØ l∆∞·ªõi")                         // Mesh Storage
-#define MSG_UBL_STORAGE_SLOT                _UxGT("Khe nh·ªõ")                              // Memory Slot
-#define MSG_UBL_LOAD_MESH                   _UxGT("T·∫£i l∆∞·ªõi b√†n")                         // Load Bed Mesh
-#define MSG_UBL_SAVE_MESH                   _UxGT("L∆∞u l∆∞·ªõi b√†n")                         // Save Bed Mesh
-#define MSG_MESH_LOADED                     _UxGT("%i l∆∞·ªõi ƒë∆∞·ª£c n·∫°p")                     // Mesh %i loaded
-#define MSG_MESH_SAVED                      _UxGT("%i l∆∞·ªõi ƒë√£ l∆∞u")
-#define MSG_NO_STORAGE                      _UxGT("Kh√¥ng l∆∞u tr·ªØ")                        // No Storage
-#define MSG_UBL_SAVE_ERROR                  _UxGT("ƒêi√™ÕÄu sai: L∆∞u UBL")                    // Err: UBL Save
-#define MSG_UBL_RESTORE_ERROR               _UxGT("ƒêi√™ÕÄu Sai: Kh√¥i Ph·ª•c UBL")              // Err: UBL Restore
-#define MSG_UBL_Z_OFFSET_STOPPED            _UxGT("ƒê·∫ßu D√≤-Z ƒê√£ Ng∆∞ÕÄng")                    // Z-Offset Stopped
-#define MSG_UBL_STEP_BY_STEP_MENU           _UxGT("B∆∞·ªõc-T·ª´ng-B∆∞·ªõc UBL")                   // Step-By-Step UBL
+  PROGMEM Language_Str MSG_LED_CONTROL                     = _UxGT("ƒêi·ªÅu khi·ªÉn LED");                       // LED Control
+  PROGMEM Language_Str MSG_LEDS                            = _UxGT("ƒê√®n");                                  // Lights
+  PROGMEM Language_Str MSG_LED_PRESETS                     = _UxGT("ƒê√®n ƒë·ªãnh s·∫µn");                         // Light Presets
+  PROGMEM Language_Str MSG_SET_LEDS_RED                    = _UxGT("ƒê·ªè");                                   // Red
+  PROGMEM Language_Str MSG_SET_LEDS_ORANGE                 = _UxGT("Cam");                                  // Orange
+  PROGMEM Language_Str MSG_SET_LEDS_YELLOW                 = _UxGT("V√†ng");                                 // Yellow
+  PROGMEM Language_Str MSG_SET_LEDS_GREEN                  = _UxGT("Xanh L√°");                              // Green
+  PROGMEM Language_Str MSG_SET_LEDS_BLUE                   = _UxGT("Xanh");                                 // Blue
+  PROGMEM Language_Str MSG_SET_LEDS_INDIGO                 = _UxGT("Xanh ƒê·∫≠m");                             // Indigo
+  PROGMEM Language_Str MSG_SET_LEDS_VIOLET                 = _UxGT("T√≠m");                                  // Violet
+  PROGMEM Language_Str MSG_SET_LEDS_WHITE                  = _UxGT("Tr·∫Øng");                                // White
+  PROGMEM Language_Str MSG_SET_LEDS_DEFAULT                = _UxGT("M·∫∑c ƒë·ªãnh");                             // Default
+  PROGMEM Language_Str MSG_CUSTOM_LEDS                     = _UxGT("ƒê√®n T·ª± Ch·ªçn");                          // Custom Lights
+  PROGMEM Language_Str MSG_INTENSITY_R                     = _UxGT("C∆∞·ªùng ƒê·ªô ƒê·ªè");                          // Red Intensity
+  PROGMEM Language_Str MSG_INTENSITY_G                     = _UxGT("C∆∞·ªùng ƒê·ªô Xanh L√°");                     // Green Intensity
+  PROGMEM Language_Str MSG_INTENSITY_B                     = _UxGT("C∆∞·ªùng ƒê·ªô Xanh");                        // Blue Intensity
+  PROGMEM Language_Str MSG_INTENSITY_W                     = _UxGT("C∆∞·ªùng ƒê·ªô Tr·∫Øng");                       // White Intensity
+  PROGMEM Language_Str MSG_LED_BRIGHTNESS                  = _UxGT("ƒë·ªô s√°ng");                              // Brightness
 
-#define MSG_LED_CONTROL                     _UxGT("ƒêi·ªÅu khi·ªÉn LED")                       // LED Control
-#define MSG_LEDS                            _UxGT("ƒê√®n")                                  // Lights
-#define MSG_LED_PRESETS                     _UxGT("ƒê√®n ƒë·ªãnh s·∫µn")                         // Light Presets
-#define MSG_SET_LEDS_RED                    _UxGT("ƒê·ªè")                                   // Red
-#define MSG_SET_LEDS_ORANGE                 _UxGT("Cam")                                  // Orange
-#define MSG_SET_LEDS_YELLOW                 _UxGT("V√†ng")                                 // Yellow
-#define MSG_SET_LEDS_GREEN                  _UxGT("Xanh L√°")                              // Green
-#define MSG_SET_LEDS_BLUE                   _UxGT("Xanh")                                 // Blue
-#define MSG_SET_LEDS_INDIGO                 _UxGT("Xanh ƒê·∫≠m")                             // Indigo
-#define MSG_SET_LEDS_VIOLET                 _UxGT("T√≠m")                                  // Violet
-#define MSG_SET_LEDS_WHITE                  _UxGT("Tr·∫Øng")                                // White
-#define MSG_SET_LEDS_DEFAULT                _UxGT("M·∫∑c ƒë·ªãnh")                             // Default
-#define MSG_CUSTOM_LEDS                     _UxGT("ƒê√®n T·ª± Ch·ªçn")                          // Custom Lights
-#define MSG_INTENSITY_R                     _UxGT("C∆∞·ªùng ƒê·ªô ƒê·ªè")                          // Red Intensity
-#define MSG_INTENSITY_G                     _UxGT("C∆∞·ªùng ƒê·ªô Xanh L√°")                     // Green Intensity
-#define MSG_INTENSITY_B                     _UxGT("C∆∞·ªùng ƒê·ªô Xanh")                        // Blue Intensity
-#define MSG_INTENSITY_W                     _UxGT("C∆∞·ªùng ƒê·ªô Tr·∫Øng")                       // White Intensity
-#define MSG_LED_BRIGHTNESS                  _UxGT("ƒë·ªô s√°ng")                              // Brightness
+  PROGMEM Language_Str MSG_MOVING                          = _UxGT("Di chuy·ªÉn...");                         // Moving
+  PROGMEM Language_Str MSG_FREE_XY                         = _UxGT("Gi·∫£i ph√≥ng XY");                        // Free XY
+  PROGMEM Language_Str MSG_MOVE_X                          = _UxGT("Di chuy·ªÉn X");                          // Move X
+  PROGMEM Language_Str MSG_MOVE_Y                          = _UxGT("Di chuy·ªÉn Y");
+  PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("Di chuy·ªÉn Z");
+  PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("M√°y ƒë√πn");                              // Extruder
+  PROGMEM Language_Str MSG_MOVE_E0                         = _UxGT("M√°y ƒë√πn ") LCD_STR_E0;                  // Extruder
+  PROGMEM Language_Str MSG_MOVE_E1                         = _UxGT("M√°y ƒë√πn ") LCD_STR_E1;                  // Extruder
+  PROGMEM Language_Str MSG_MOVE_E2                         = _UxGT("M√°y ƒë√πn ") LCD_STR_E2;                  // Extruder
+  PROGMEM Language_Str MSG_MOVE_E3                         = _UxGT("M√°y ƒë√πn ") LCD_STR_E3;                  // Extruder
+  PROGMEM Language_Str MSG_MOVE_E4                         = _UxGT("M√°y ƒë√πn ") LCD_STR_E4;                  // Extruder
+  PROGMEM Language_Str MSG_MOVE_E5                         = _UxGT("M√°y ƒë√πn ") LCD_STR_E5;                  // Extruder
+  PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("ƒê·∫ßu n√≥ng qu√° l·∫°nh");                    // Hotend too cold
+  PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("Di chuy·ªÉn 0.1mm");                      // Move 0.1mm
+  PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("Di chuy·ªÉn 1mm");                        // Move 1mm
+  PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("Di chuy·ªÉn 10mm");                       // Move 10mm
+  PROGMEM Language_Str MSG_SPEED                           = _UxGT("T·ªëc ƒë·ªô");                               // Speed
+  PROGMEM Language_Str MSG_BED_Z                           = _UxGT("Z B√†n");
+  PROGMEM Language_Str MSG_NOZZLE                          = _UxGT("ƒê·∫ßu phun");                             // Nozzle
+  PROGMEM Language_Str MSG_NOZZLE_0                        = _UxGT("ƒê·∫ßu phun ") LCD_STR_N0;                 // Nozzle
+  PROGMEM Language_Str MSG_NOZZLE_1                        = _UxGT("ƒê·∫ßu phun ") LCD_STR_N1;                 // Nozzle
+  PROGMEM Language_Str MSG_NOZZLE_2                        = _UxGT("ƒê·∫ßu phun ") LCD_STR_N2;                 // Nozzle
+  PROGMEM Language_Str MSG_NOZZLE_3                        = _UxGT("ƒê·∫ßu phun ") LCD_STR_N3;                 // Nozzle
+  PROGMEM Language_Str MSG_NOZZLE_4                        = _UxGT("ƒê·∫ßu phun ") LCD_STR_N4;                 // Nozzle
+  PROGMEM Language_Str MSG_NOZZLE_5                        = _UxGT("ƒê·∫ßu phun ") LCD_STR_N5;                 // Nozzle
+  PROGMEM Language_Str MSG_BED                             = _UxGT("B√†n");                                  // bed
+  PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("T·ªëc ƒë·ªô qu·∫°t");                          // fan speed
+  PROGMEM Language_Str MSG_FAN_SPEED_1                     = _UxGT("T·ªëc ƒë·ªô qu·∫°t 1");                        // fan speed
+  PROGMEM Language_Str MSG_FAN_SPEED_2                     = _UxGT("T·ªëc ƒë·ªô qu·∫°t 2");                        // fan speed
+  PROGMEM Language_Str MSG_FAN_SPEED_3                     = _UxGT("T·ªëc ƒë·ªô qu·∫°t 3");                        // fan speed
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£");                      // Extra fan speed
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_1               = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ 1");                    // Extra fan speed
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_2               = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ 2");                    // Extra fan speed
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_3               = _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£ 3");                    // Extra fan speed
+  PROGMEM Language_Str MSG_FLOW                            = _UxGT("L∆∞u L∆∞·ª£ng");
+  PROGMEM Language_Str MSG_FLOW_0                          = _UxGT("L∆∞u L∆∞·ª£ng ") LCD_STR_N0;
+  PROGMEM Language_Str MSG_FLOW_1                          = _UxGT("L∆∞u L∆∞·ª£ng ") LCD_STR_N1;
+  PROGMEM Language_Str MSG_FLOW_2                          = _UxGT("L∆∞u L∆∞·ª£ng ") LCD_STR_N2;
+  PROGMEM Language_Str MSG_FLOW_3                          = _UxGT("L∆∞u L∆∞·ª£ng ") LCD_STR_N3;
+  PROGMEM Language_Str MSG_FLOW_4                          = _UxGT("L∆∞u L∆∞·ª£ng ") LCD_STR_N4;
+  PROGMEM Language_Str MSG_FLOW_5                          = _UxGT("L∆∞u L∆∞·ª£ng ") LCD_STR_N5;
+  PROGMEM Language_Str MSG_CONTROL                         = _UxGT("ƒêi·ªÅu khi·ªÉn");                           // Control
+  PROGMEM Language_Str MSG_MIN                             = " " LCD_STR_THERMOMETER _UxGT(" ƒêa");          // min
+  PROGMEM Language_Str MSG_MAX                             = " " LCD_STR_THERMOMETER _UxGT(" Thi·ªÉu");
+  PROGMEM Language_Str MSG_FACTOR                          = " " LCD_STR_THERMOMETER _UxGT(" H·ªá S·ªë");       // factor
+  PROGMEM Language_Str MSG_AUTOTEMP                        = _UxGT("Nhi·ªát ƒë·ªô t·ª± ƒë·ªông");                     // Autotemp
+  PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("B·∫≠t");                                  // on
+  PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("T·∫Øt");                                  // off
+  PROGMEM Language_Str MSG_PID_P                           = _UxGT("PID-P");
+  PROGMEM Language_Str MSG_PID_P_E0                        = _UxGT("PID-P ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_PID_P_E1                        = _UxGT("PID-P ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_PID_P_E2                        = _UxGT("PID-P ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_PID_P_E3                        = _UxGT("PID-P ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_PID_P_E4                        = _UxGT("PID-P ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_PID_P_E5                        = _UxGT("PID-P ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_I                           = _UxGT("PID-I");
+  PROGMEM Language_Str MSG_PID_I_E0                        = _UxGT("PID-I ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_PID_I_E1                        = _UxGT("PID-I ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_PID_I_E2                        = _UxGT("PID-I ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_PID_I_E3                        = _UxGT("PID-I ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_PID_I_E4                        = _UxGT("PID-I ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_PID_I_E5                        = _UxGT("PID-I ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_D                           = _UxGT("PID-D");
+  PROGMEM Language_Str MSG_PID_D_E0                        = _UxGT("PID-D ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_PID_D_E1                        = _UxGT("PID-D ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_PID_D_E2                        = _UxGT("PID-D ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_PID_D_E3                        = _UxGT("PID-D ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_PID_D_E4                        = _UxGT("PID-D ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_PID_D_E5                        = _UxGT("PID-D ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_C                           = _UxGT("PID-C");
+  PROGMEM Language_Str MSG_PID_C_E0                        = _UxGT("PID-C ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_PID_C_E1                        = _UxGT("PID-C ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_PID_C_E2                        = _UxGT("PID-C ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_PID_C_E3                        = _UxGT("PID-C ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_PID_C_E4                        = _UxGT("PID-C ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_PID_C_E5                        = _UxGT("PID-C ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_SELECT                          = _UxGT("L·ª±a");                                  // Select
+  PROGMEM Language_Str MSG_SELECT_E0                       = _UxGT("L·ª±a ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_SELECT_E1                       = _UxGT("L·ª±a ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_SELECT_E2                       = _UxGT("L·ª±a ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_SELECT_E3                       = _UxGT("L·ª±a ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_SELECT_E4                       = _UxGT("L·ª±a ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_SELECT_E5                       = _UxGT("L·ª±a ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_ACC                             = _UxGT("TƒÉng T·ªëc");
+  PROGMEM Language_Str MSG_JERK                            = _UxGT("Gi·∫≠t");
+  PROGMEM Language_Str MSG_VA_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_A;
+  PROGMEM Language_Str MSG_VB_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_B;
+  PROGMEM Language_Str MSG_VC_JERK                         = _UxGT("Gi·∫≠t-V") LCD_STR_C;
+  PROGMEM Language_Str MSG_VE_JERK                         = _UxGT("Gi·∫≠t-Ve");
+  PROGMEM Language_Str MSG_JUNCTION_DEVIATION              = _UxGT("ƒê·ªô L·ªách Ch√¥ÃÉ Giao");                    // Junction Dev
+  PROGMEM Language_Str MSG_VELOCITY                        = _UxGT("V√¢Ã£n t√¥ÕÅc");                              // velocity
+  PROGMEM Language_Str MSG_VMAX_A                          = _UxGT("Vƒëa") LCD_STR_A;                        // Vmax
+  PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("Vƒëa") LCD_STR_B;                        // Vmax
+  PROGMEM Language_Str MSG_VMAX_C                          = _UxGT("Vƒëa") LCD_STR_C;                        // Vmax
+  PROGMEM Language_Str MSG_VMAX_E                          = _UxGT("Vƒëa") LCD_STR_E;                        // Vmax
+  PROGMEM Language_Str MSG_VMAX_E0                         = _UxGT("Vƒëa ") LCD_STR_E0;                      // Vmax
+  PROGMEM Language_Str MSG_VMAX_E1                         = _UxGT("Vƒëa ") LCD_STR_E1;                      // Vmax
+  PROGMEM Language_Str MSG_VMAX_E2                         = _UxGT("Vƒëa ") LCD_STR_E2;                      // Vmax
+  PROGMEM Language_Str MSG_VMAX_E3                         = _UxGT("Vƒëa ") LCD_STR_E3;                      // Vmax
+  PROGMEM Language_Str MSG_VMAX_E4                         = _UxGT("Vƒëa ") LCD_STR_E4;                      // Vmax
+  PROGMEM Language_Str MSG_VMAX_E5                         = _UxGT("Vƒëa ") LCD_STR_E5;                      // Vmax
+  PROGMEM Language_Str MSG_VMIN                            = _UxGT("Vthi·ªÉu");                               // Vmin
+  PROGMEM Language_Str MSG_VTRAV_MIN                       = _UxGT("Vchuy·ªÉn thi·ªÉu");                        // VTrav min
+  PROGMEM Language_Str MSG_ACCELERATION                    = _UxGT("S·ª± tƒÉng t·ªëc");                          // Acceleration
+  PROGMEM Language_Str MSG_AMAX_A                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_A;                // Amax
+  PROGMEM Language_Str MSG_AMAX_B                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_B;                // Amax
+  PROGMEM Language_Str MSG_AMAX_C                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_C;                // Amax
+  PROGMEM Language_Str MSG_AMAX_E                          = _UxGT("TƒÉng t·ªëc ca") LCD_STR_E;                // Amax
+  PROGMEM Language_Str MSG_AMAX_E0                         = _UxGT("TƒÉng t·ªëc ca ") LCD_STR_E0;              // Amax
+  PROGMEM Language_Str MSG_AMAX_E1                         = _UxGT("TƒÉng t·ªëc ca ") LCD_STR_E1;              // Amax
+  PROGMEM Language_Str MSG_AMAX_E2                         = _UxGT("TƒÉng t·ªëc ca ") LCD_STR_E2;              // Amax
+  PROGMEM Language_Str MSG_AMAX_E3                         = _UxGT("TƒÉng t·ªëc ca ") LCD_STR_E3;              // Amax
+  PROGMEM Language_Str MSG_AMAX_E4                         = _UxGT("TƒÉng t·ªëc ca ") LCD_STR_E4;              // Amax
+  PROGMEM Language_Str MSG_AMAX_E5                         = _UxGT("TƒÉng t·ªëc ca ") LCD_STR_E5;              // Amax
+  PROGMEM Language_Str MSG_A_RETRACT                       = _UxGT("TT-R√∫t");                               // A-retract
+  PROGMEM Language_Str MSG_A_TRAVEL                        = _UxGT("TT-Chuy·ªÉn");                            // A-travel
+  PROGMEM Language_Str MSG_STEPS_PER_MM                    = _UxGT("B∆∞∆°ÕÅc/mm");                              // Steps
+  PROGMEM Language_Str MSG_A_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_A _UxGT("/mm");               // Asteps/mm
+  PROGMEM Language_Str MSG_B_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_B _UxGT("/mm");
+  PROGMEM Language_Str MSG_C_STEPS                         = _UxGT("B∆∞·ªõc") LCD_STR_C _UxGT("/mm");
+  PROGMEM Language_Str MSG_E_STEPS                         = _UxGT("B∆∞·ªõcE/mm");
+  PROGMEM Language_Str MSG_E0_STEPS                        = _UxGT("B∆∞·ªõc ") LCD_STR_E0 _UxGT("/mm");
+  PROGMEM Language_Str MSG_E1_STEPS                        = _UxGT("B∆∞·ªõc ") LCD_STR_E1 _UxGT("/mm");
+  PROGMEM Language_Str MSG_E2_STEPS                        = _UxGT("B∆∞·ªõc ") LCD_STR_E2 _UxGT("/mm");
+  PROGMEM Language_Str MSG_E3_STEPS                        = _UxGT("B∆∞·ªõc ") LCD_STR_E3 _UxGT("/mm");
+  PROGMEM Language_Str MSG_E4_STEPS                        = _UxGT("B∆∞·ªõc ") LCD_STR_E4 _UxGT("/mm");
+  PROGMEM Language_Str MSG_E5_STEPS                        = _UxGT("B∆∞·ªõc ") LCD_STR_E5 _UxGT("/mm");
+  PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Nhi·ªát ƒë·ªô");                             // Temperature
+  PROGMEM Language_Str MSG_MOTION                          = _UxGT("Chuy·ªÉn ƒë·ªông");                          // Motion
+  PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("V·∫≠t li·ªáu in");                          // d√¢y nh·ª±a
+  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("E b·∫±ng mm¬≥");                           // E in mm
+  PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a");                      // Fil. Dai.
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E0                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E1                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E2                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E3                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E4                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E5                = _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_FILAMENT_UNLOAD                 = _UxGT("D·ª° mm");                                // unload mm
+  PROGMEM Language_Str MSG_FILAMENT_LOAD                   = _UxGT("N·∫°p mm");
+  PROGMEM Language_Str MSG_ADVANCE_K                       = _UxGT("K C·∫•p Cao");                            // Advance K
+  PROGMEM Language_Str MSG_ADVANCE_K_E0                    = _UxGT("K C·∫•p Cao ") LCD_STR_E0;                // Advance K
+  PROGMEM Language_Str MSG_ADVANCE_K_E1                    = _UxGT("K C·∫•p Cao ") LCD_STR_E1;                // Advance K
+  PROGMEM Language_Str MSG_ADVANCE_K_E2                    = _UxGT("K C·∫•p Cao ") LCD_STR_E2;                // Advance K
+  PROGMEM Language_Str MSG_ADVANCE_K_E3                    = _UxGT("K C·∫•p Cao ") LCD_STR_E3;                // Advance K
+  PROGMEM Language_Str MSG_ADVANCE_K_E4                    = _UxGT("K C·∫•p Cao ") LCD_STR_E4;                // Advance K
+  PROGMEM Language_Str MSG_ADVANCE_K_E5                    = _UxGT("K C·∫•p Cao ") LCD_STR_E5;                // Advance K
+  PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("ƒê·ªô t∆∞∆°ng ph·∫£n LCD");                    // LCD contrast
+  PROGMEM Language_Str MSG_STORE_EEPROM                    = _UxGT("L∆∞u c√°c thi·∫øt l·∫≠p");                    // Store settings
+  PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("T·∫£i c√°c c√†i ƒë·∫∑t");                      // Load settings
+  PROGMEM Language_Str MSG_RESTORE_FAILSAFE                = _UxGT("Kh√¥i ph·ª•c ph√≤ng h∆∞");                   // Restore failsafe
+  PROGMEM Language_Str MSG_INIT_EEPROM                     = _UxGT("Kh·ªüi T·∫°o EEPROM");                      // Initialize EEPROM
+  PROGMEM Language_Str MSG_SD_UPDATE                       = _UxGT("C·∫≠p Nh·∫≠t SD");                          // SD Update
+  PROGMEM Language_Str MSG_RESET_PRINTER                   = _UxGT("B·∫∑t L·∫°i M√°y In");
+  PROGMEM Language_Str MSG_REFRESH                         = LCD_STR_REFRESH  _UxGT("C·∫≠p Nh·∫≠t");                             // Refresh
+  PROGMEM Language_Str MSG_WATCH                           = _UxGT("M√†n H√¨nh Th√¥ng Tin");                   // Info screen
+  PROGMEM Language_Str MSG_PREPARE                         = _UxGT("Chu·∫©n b·ªã");                             // Prepare
+  PROGMEM Language_Str MSG_TUNE                            = _UxGT("ƒêi·ªÅu Ch·ªânh");                           // Tune
+  PROGMEM Language_Str MSG_PAUSE_PRINT                     = _UxGT("T·∫°m d·ª´ng in");                          // Pause print
+  PROGMEM Language_Str MSG_RESUME_PRINT                    = _UxGT("Ti·∫øp t·ª•c in");                          // Resume print
+  PROGMEM Language_Str MSG_STOP_PRINT                      = _UxGT("Ng∆∞ÕÄng in");                             // Stop print
+  PROGMEM Language_Str MSG_OUTAGE_RECOVERY                 = _UxGT("Ph·ª•c H·ªìi M·∫•t ƒêi·ªán");                    // Outage Recovery
+  PROGMEM Language_Str MSG_CARD_MENU                       = _UxGT("In t·ª´ SD");                             // Print from SD
+  PROGMEM Language_Str MSG_NO_CARD                         = _UxGT("Kh√¥ng c√≥ th·∫ª SD");                      // No SD card
+  PROGMEM Language_Str MSG_DWELL                           = _UxGT("Ng·ªß...");                               // Sleep
+  PROGMEM Language_Str MSG_USERWAIT                        = _UxGT("Nh·∫•n ƒë·ªÉ ti·∫øp t·ª•c...");                  // Click to resume (same as 'continue')
+  PROGMEM Language_Str MSG_PRINT_PAUSED                    = _UxGT("In t·∫°m d·ª´ng");                          // print paused
+  PROGMEM Language_Str MSG_PRINTING                        = _UxGT("ƒêang in...");                           // printing
+  PROGMEM Language_Str MSG_PRINT_ABORTED                   = _UxGT("In ƒë√£ h·ªßy b·ªè");                         // Print aborted
+  PROGMEM Language_Str MSG_NO_MOVE                         = _UxGT("Kh√¥ng di chuy·ªÉn.");                     // No move.
+  PROGMEM Language_Str MSG_KILLED                          = _UxGT("ƒê√É CH√äÕÅT. ");
+  PROGMEM Language_Str MSG_STOPPED                         = _UxGT("ƒê√É NG∆ØÕÄNG. ");
+  PROGMEM Language_Str MSG_CONTROL_RETRACT                 = _UxGT("R√∫t mm");                               // Retract mm
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_SWAP            = _UxGT("R√∫t Trao.mm");                          // Swap Re.mm
+  PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("R√∫t V");
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_ZHOP            = _UxGT("Nh·∫£y mm");                              // hop
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("B·ªèR√∫t mm");                             // UnRet mm
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("B·ªèR√∫t T mm");                           // S UnRet mm
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("B·ªèR√∫t V");                              // UnRet V
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAPF   = _UxGT("B·ªèR√∫t T V");                            // S UnRet V
+  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("R√∫tT·ª±ƒê·ªông");                            // AutoRetr.
+  PROGMEM Language_Str MSG_FILAMENT_SWAP_LENGTH            = _UxGT("Kho·∫£ng C√°ch R√∫t");                      // Retract Distance
+  PROGMEM Language_Str MSG_TOOL_CHANGE                     = _UxGT("Thay ƒê·ªïi C√¥ng C·ª•");                     // Tool Change
+  PROGMEM Language_Str MSG_TOOL_CHANGE_ZLIFT               = _UxGT("ƒê∆∞a L√™n Z");                            // Z Raise
+  PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPD          = _UxGT("T·ªëc ƒê·ªô Tu√¥n Ra");                       // Prime Speed
+  PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPD        = _UxGT("T·ªëc ƒê·ªô R√∫t L·∫°i");                       // Retract Speed
+  PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Thay d√¢y nh·ª±a");                        // change filament
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E0               = _UxGT("Thay d√¢y nh·ª±a ") LCD_STR_E0;            // change filament
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E1               = _UxGT("Thay d√¢y nh·ª±a ") LCD_STR_E1;            // change filament
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E2               = _UxGT("Thay d√¢y nh·ª±a ") LCD_STR_E2;            // change filament
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E3               = _UxGT("Thay d√¢y nh·ª±a ") LCD_STR_E3;            // change filament
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E4               = _UxGT("Thay d√¢y nh·ª±a ") LCD_STR_E4;            // change filament
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E5               = _UxGT("Thay d√¢y nh·ª±a ") LCD_STR_E5;            // change filament
+  PROGMEM Language_Str MSG_FILAMENTLOAD                    = _UxGT("N·∫°p d√¢y nh·ª±a");                         // load filament
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E0                 = _UxGT("N·∫°p d√¢y nh·ª±a ") LCD_STR_E0;             // load filament
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E1                 = _UxGT("N·∫°p d√¢y nh·ª±a ") LCD_STR_E1;             // load filament
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E2                 = _UxGT("N·∫°p d√¢y nh·ª±a ") LCD_STR_E2;             // load filament
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E3                 = _UxGT("N·∫°p d√¢y nh·ª±a ") LCD_STR_E3;             // load filament
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E4                 = _UxGT("N·∫°p d√¢y nh·ª±a ") LCD_STR_E4;             // load filament
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E5                 = _UxGT("N·∫°p d√¢y nh·ª±a ") LCD_STR_E5;             // load filament
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E0               = _UxGT("D·ª° d√¢y nh·ª±a ") LCD_STR_E0;              // unload filament
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E1               = _UxGT("D·ª° d√¢y nh·ª±a ") LCD_STR_E1;              // unload filament
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E2               = _UxGT("D·ª° d√¢y nh·ª±a ") LCD_STR_E2;              // unload filament
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E3               = _UxGT("D·ª° d√¢y nh·ª±a ") LCD_STR_E3;              // unload filament
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E4               = _UxGT("D·ª° d√¢y nh·ª±a ") LCD_STR_E4;              // unload filament
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E5               = _UxGT("D·ª° d√¢y nh·ª±a ") LCD_STR_E5;              // unload filament
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("D·ª° t·∫•t c·∫£");                            // Unload All
+  PROGMEM Language_Str MSG_INIT_SDCARD                     = _UxGT("Kh·ªüi t·∫°o th·∫ª SD ");                     // Init. SD card
+  PROGMEM Language_Str MSG_CHANGE_SDCARD                   = _UxGT("Thay th·∫ª SD");                          // Change SD card
+  PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("ƒê·∫ßu D√≤ Z qua b√†n");                     // Z Probe past bed
+  PROGMEM Language_Str MSG_SKEW_FACTOR                     = _UxGT("H·ªá s·ªë nghi√™ng");                        // Skew Factor
+  PROGMEM Language_Str MSG_BLTOUCH                         = _UxGT("BLTOUCH");                              // BLTouch
+  PROGMEM Language_Str MSG_BLTOUCH_SELFTEST                = _UxGT("T·ª± ki·ªÉm tra BLTOUCH ");                 // BLTouch Self-Test
+  PROGMEM Language_Str MSG_BLTOUCH_RESET                   = _UxGT("B·∫∑t l·∫°i BLTouch");                      // Reset BLTouch
+  PROGMEM Language_Str MSG_BLTOUCH_DEPLOY                  = _UxGT("ƒêem BLTouch");                          // Deploy BLTouch
+  PROGMEM Language_Str MSG_BLTOUCH_STOW                    = _UxGT("C·∫•t BLTouch");                          // Stow BLTouch
+  PROGMEM Language_Str MSG_MANUAL_DEPLOY                   = _UxGT("ƒêem ƒê·∫ßu D√≤-Z");                         // Deploy Z-Probe
+  PROGMEM Language_Str MSG_MANUAL_STOW                     = _UxGT("C·∫•t ƒê·∫ßu D√≤-Z");                         // Stow Z-Probe
+  PROGMEM Language_Str MSG_HOME_FIRST                      = _UxGT("V·ªÅ nh√† %s%s%s Tr∆∞∆°ÕÅc");
+  PROGMEM Language_Str MSG_ZPROBE_ZOFFSET                  = _UxGT("ƒê·∫ßu D√≤ B√π ƒê·∫Øp Z");                      // Probe Z Offset
+  PROGMEM Language_Str MSG_BABYSTEP_X                      = _UxGT("Nh√≠t X");                               // Babystep X
+  PROGMEM Language_Str MSG_BABYSTEP_Y                      = _UxGT("Nh√≠t Y");
+  PROGMEM Language_Str MSG_BABYSTEP_Z                      = _UxGT("Nh√≠t Z");
+  PROGMEM Language_Str MSG_ENDSTOP_ABORT                   = _UxGT("H·ªßy b·ªè c√¥ng t·∫Øc");                      // Endstop abort
+  PROGMEM Language_Str MSG_HEATING_FAILED_LCD              = _UxGT("S∆∞·ªüi ƒë·∫ßu phun kh√¥ng th√†nh c√¥ng");       // Heating failed
+  PROGMEM Language_Str MSG_HEATING_FAILED_LCD_BED          = _UxGT("S∆∞·ªüi b√†n kh√¥ng th√†nh c√¥ng");            // Bed heating failed
+  PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô d∆∞");                // Err: REDUNDANT TEMP
+  PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát");                         // THERMAL RUNAWAY | problem
+  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_BED             = _UxGT("V·∫•n ƒë·ªÅ nhi·ªát b√†n");                     // BED THERMAL RUNAWAY
+  PROGMEM Language_Str MSG_ERR_MAXTEMP                     = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi ƒëa");            // Err: MAXTEMP
+  PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");         // Err: MINTEMP
+  PROGMEM Language_Str MSG_ERR_MAXTEMP_BED                 = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô b√†n t·ªëi ƒëa");        // Err: MAXTEMP BED
+  PROGMEM Language_Str MSG_ERR_MINTEMP_BED                 = _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô b√†n t·ªëi thi·ªÉu");     // Err: MINTEMP BED
+  PROGMEM Language_Str MSG_ERR_Z_HOMING                    = _UxGT("V·ªÅ nh√† XY Tr∆∞∆°ÕÅc");                      // Home XY First
+  PROGMEM Language_Str MSG_HALTED                          = _UxGT("M√ÅY IN ƒê√É D∆ØÕÄNG LAÃ£I");                   // PRINTER HALTED
+  PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Xin b·∫∑t l·∫°i");                          // Please reset
+  PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("n");                                    // d - ng√†y - One character only
+  PROGMEM Language_Str MSG_SHORT_HOUR                      = _UxGT("g");                                    // h - gi·ªù  - One character only
+  PROGMEM Language_Str MSG_SHORT_MINUTE                    = _UxGT("p");                                    // m - ph√∫t - One character only
+  PROGMEM Language_Str MSG_HEATING                         = _UxGT("ƒêang s∆∞·ªüi noÕÅng...");                    // heating
+  PROGMEM Language_Str MSG_COOLING                         = _UxGT("ƒêang laÕÄm ngu√¥Ã£i...");                    // cooling
+  PROGMEM Language_Str MSG_BED_HEATING                     = _UxGT("ƒêang s∆∞·ªüi nong b√†n...");                // bed heating
+  PROGMEM Language_Str MSG_BED_COOLING                     = _UxGT("ƒêang laÕÄm ngu√¥Ã£i b√†n...");                // bed cooling
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE                 = _UxGT("C√¢n Ch·ªânh Delta");                      // Delta calibration
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_X               = _UxGT("Ch·ªânh X l·∫°i");
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Y               = _UxGT("Ch·ªânh Y l·∫°i");
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Z               = _UxGT("Ch·ªânh Z l·∫°i");
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_CENTER          = _UxGT("Ch·ªânh Z Center");                       // Calibrate Center
+  PROGMEM Language_Str MSG_DELTA_SETTINGS                  = _UxGT("C√†i ƒê·∫∑t Delta");                        // Delta Settings
+  PROGMEM Language_Str MSG_DELTA_AUTO_CALIBRATE            = _UxGT("C√¢n Ch·ªânh T·ª± ƒê·ªông");                    // Auto Calibration
+  PROGMEM Language_Str MSG_DELTA_HEIGHT_CALIBRATE          = _UxGT("ƒê·∫∑t Chi·ªÅu Cao Delta");                  // Set Delta Height
+  PROGMEM Language_Str MSG_DELTA_Z_OFFSET_CALIBRATE        = _UxGT("ƒê·∫ßu D√≤ Z-B√π ƒê·∫Øp");                      // Probe Z-offset
+  PROGMEM Language_Str MSG_DELTA_DIAG_ROD                  = _UxGT("G·∫≠y Ch√©o");                             // Diag Rod
+  PROGMEM Language_Str MSG_DELTA_HEIGHT                    = _UxGT("Chi·ªÅu Cao");                            // Height
+  PROGMEM Language_Str MSG_DELTA_RADIUS                    = _UxGT("B√°n K√≠nh");                             // Radius
+  PROGMEM Language_Str MSG_INFO_MENU                       = _UxGT("V·ªÅ M√°y In");
+  PROGMEM Language_Str MSG_INFO_PRINTER_MENU               = _UxGT("Th√¥ng Tin M√°y In");                     // Printer Info
+  PROGMEM Language_Str MSG_3POINT_LEVELING                 = _UxGT("San l·∫•p 3-ƒêi·ªÉm");                       // 3-Point Leveling
+  PROGMEM Language_Str MSG_LINEAR_LEVELING                 = _UxGT("San L·∫•p Tuy·∫øn T√≠nh");                   // Linear Leveling
+  PROGMEM Language_Str MSG_BILINEAR_LEVELING               = _UxGT("San L·∫•p Song Tuy·∫øn");                   // Bilinear Leveling
+  PROGMEM Language_Str MSG_UBL_LEVELING                    = _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t");               // Unified Bed Leveling
+  PROGMEM Language_Str MSG_MESH_LEVELING                   = _UxGT("L∆∞·ªõi San L·∫•p");                         // Mesh Leveling
+  PROGMEM Language_Str MSG_INFO_STATS_MENU                 = _UxGT("Th·ªëng K√™ M√°y In");                      // Printer Stats
+  PROGMEM Language_Str MSG_INFO_BOARD_MENU                 = _UxGT("Th√¥ng Tin Bo M·∫°ch");                    // Board Info
+  PROGMEM Language_Str MSG_INFO_THERMISTOR_MENU            = _UxGT("ƒêi·ªán Tr·ªü Nhi·ªát");                       // Thermistors
+  PROGMEM Language_Str MSG_INFO_EXTRUDERS                  = _UxGT("M√°y ƒë√πn");                              // Extruders
+  PROGMEM Language_Str MSG_INFO_BAUDRATE                   = _UxGT("Baud");                                 // Baud
+  PROGMEM Language_Str MSG_INFO_PROTOCOL                   = _UxGT("Giao Th·ª©c");                            // Protocol
+  PROGMEM Language_Str MSG_CASE_LIGHT                      = _UxGT("ƒê√®n Khu√¥ng");                           // Case light
+  PROGMEM Language_Str MSG_CASE_LIGHT_BRIGHTNESS           = _UxGT("ƒê·ªô S√°ng");                              // Light Brightness
+  #if LCD_WIDTH >= 20
+    PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("S·ªë In");                                // Print Count
+    PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS         = _UxGT("ƒê√£ ho√†n th√†nh");
+    PROGMEM Language_Str MSG_INFO_PRINT_TIME               = _UxGT("T√¥Ãâng s·ªë th·ªùi gian in");                // Total print time
+    PROGMEM Language_Str MSG_INFO_PRINT_LONGEST            = _UxGT("Th·ªùi gian vi·ªác l√¢u nh·∫•t");              // Longest job time
+    PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT           = _UxGT("T·ªïng s·ªë ƒë√πn");                          // Extruded total
+  #else
+    PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("In");                                   // prints
+    PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS         = _UxGT("ƒê√£ ho√†n th√†nh");                        // Completed
+    PROGMEM Language_Str MSG_INFO_PRINT_TIME               = _UxGT("T√¥Ãâng s·ªë");                             // total
+    PROGMEM Language_Str MSG_INFO_PRINT_LONGEST            = _UxGT("D√†i nh·∫•t");                             // Longest
+    PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT           = _UxGT("ƒê√£ √©p ƒë√πn");
+  #endif
+  PROGMEM Language_Str MSG_INFO_MIN_TEMP                   = _UxGT("Nhi·ªát ƒë·ªô t·ªëi thi·ªÉu");                   // Min Temp
+  PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("Nhi·ªát ƒë·ªô t·ªëi ƒëa");                      // Max temp
+  PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("B·ªô ngu·ªìn");                             // PSU
+  PROGMEM Language_Str MSG_DRIVE_STRENGTH                  = _UxGT("S·ª©c m·∫°nh ·ªï ƒëƒ©a");                       // Drive Strength
+  PROGMEM Language_Str MSG_DAC_PERCENT                     = _UxGT("% tr√¨nh ƒëi·ªÅu khi·ªÉn");                   // Driver %
+  PROGMEM Language_Str MSG_DAC_EEPROM_WRITE                = _UxGT("Ghi DAC EEPROM");                       // DAC EEPROM Write
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_PAUSE    = _UxGT("In t·∫°m d·ª´ng");                          // PRINT PAUSED
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_LOAD     = _UxGT("N·∫°p d√¢y nh·ª±a");
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_UNLOAD   = _UxGT("D·ª° d√¢y nh·ª±a");                          // unload filament
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_HEADER   = _UxGT("T√πy ch·ªçn h√¥ÕÄi phuÃ£c:");                   // RESUME OPTIONS
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_PURGE    = _UxGT("X·∫£ th√™m");                              // Purge more
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_RESUME   = _UxGT("Ti·∫øp t·ª•c");                             // continue
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_NOZZLE          = _UxGT("  ƒê·∫ßu Phun: ");                         // Nozzle
+  PROGMEM Language_Str MSG_RUNOUT_SENSOR_ENABLE            = _UxGT("C·∫£m Bi·∫øn H·∫øt");                         // Runout Sensor
+  PROGMEM Language_Str MSG_LCD_HOMING_FAILED               = _UxGT("S∆∞Ã£ nh√† kh√¥ng th√†nh c√¥ng");              // Homing failed
+  PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT(" kh√¥ng th√†nh c√¥ng");                    // Probing failed
+  PROGMEM Language_Str MSG_M600_TOO_COLD                   = _UxGT("M600: Qu√° l·∫°nh");
 
-#define MSG_MOVING                          _UxGT("Di chuy·ªÉn...")                         // Moving
-#define MSG_FREE_XY                         _UxGT("Gi·∫£i ph√≥ng XY")                        // Free XY
-#define MSG_MOVE_X                          _UxGT("Di chuy·ªÉn X")                          // Move X
-#define MSG_MOVE_Y                          _UxGT("Di chuy·ªÉn Y")
-#define MSG_MOVE_Z                          _UxGT("Di chuy·ªÉn Z")
-#define MSG_MOVE_E                          _UxGT("M√°y ƒë√πn")                              // Extruder
-#define MSG_HOTEND_TOO_COLD                 _UxGT("ƒê·∫ßu n√≥ng qu√° l·∫°nh")                    // Hotend too cold
-#define MSG_MOVE_01MM                       _UxGT("Di chuy·ªÉn 0.1mm")                      // Move 0.1mm
-#define MSG_MOVE_1MM                        _UxGT("Di chuy·ªÉn 1mm")                        // Move 1mm
-#define MSG_MOVE_10MM                       _UxGT("Di chuy·ªÉn 10mm")                       // Move 10mm
-#define MSG_SPEED                           _UxGT("T·ªëc ƒë·ªô")                               // Speed
-#define MSG_BED_Z                           _UxGT("Z B√†n")
-#define MSG_NOZZLE                          _UxGT("ƒê·∫ßu phun")                             // Nozzle
-#define MSG_BED                             _UxGT("B√†n")                                  // bed
-#define MSG_FAN_SPEED                       _UxGT("T·ªëc ƒë·ªô qu·∫°t")                          // fan speed
-#define MSG_EXTRA_FAN_SPEED                 _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£")                      // Extra fan speed
-#define MSG_FLOW                            _UxGT("L∆∞u L∆∞·ª£ng")
-#define MSG_CONTROL                         _UxGT("ƒêi·ªÅu khi·ªÉn")                           // Control
-#define MSG_MIN                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" ƒêa")   // min
-#define MSG_MAX                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" Thi·ªÉu")
-#define MSG_FACTOR                          _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" H·ªá S·ªë") // factor
-#define MSG_AUTOTEMP                        _UxGT("Nhi·ªát ƒë·ªô t·ª± ƒë·ªông")                     // Autotemp
-#define MSG_LCD_ON                          _UxGT("B·∫≠t")                                  // on
-#define MSG_LCD_OFF                         _UxGT("T·∫Øt")                                  // off
-#define MSG_PID_P                           _UxGT("PID-P")
-#define MSG_PID_I                           _UxGT("PID-I")
-#define MSG_PID_D                           _UxGT("PID-D")
-#define MSG_PID_C                           _UxGT("PID-C")
-#define MSG_SELECT                          _UxGT("L·ª±a")                                  // Select
-#define MSG_ACC                             _UxGT("TƒÉng T·ªëc")
-#define MSG_JERK                            _UxGT("Gi·∫≠t")
-#if IS_KINEMATIC
-  #define MSG_VA_JERK                       _UxGT("Gi·∫≠t-Va")
-  #define MSG_VB_JERK                       _UxGT("Gi·∫≠t-Vb")
-  #define MSG_VC_JERK                       _UxGT("Gi·∫≠t-Vc")
-#else
-  #define MSG_VA_JERK                       _UxGT("Gi·∫≠t-Vx")
-  #define MSG_VB_JERK                       _UxGT("Gi·∫≠t-Vy")
-  #define MSG_VC_JERK                       _UxGT("Gi·∫≠t-Vz")
-#endif
-#define MSG_VE_JERK                         _UxGT("Gi·∫≠t-Ve")
-#define MSG_JUNCTION_DEVIATION              _UxGT("ƒê·ªô L·ªách Ch√¥ÃÉ Giao")                    // Junction Dev
-#define MSG_VELOCITY                        _UxGT("V√¢Ã£n t√¥ÕÅc")                              // velocity
-#define MSG_VMAX                            _UxGT("Vƒëa")                                  // Vmax
-#define MSG_VMIN                            _UxGT("Vthi·ªÉu")                               // Vmin
-#define MSG_VTRAV_MIN                       _UxGT("Vchuy·ªÉn thi·ªÉu")                        // VTrav min
-#define MSG_ACCELERATION                    _UxGT("S·ª± tƒÉng t·ªëc")                          // Acceleration
-#define MSG_AMAX                            _UxGT("TƒÉng t·ªëc ca")                          // Amax
-#define MSG_A_RETRACT                       _UxGT("TT-R√∫t")                               // A-retract
-#define MSG_A_TRAVEL                        _UxGT("TT-Chuy·ªÉn")                            // A-travel
-#define MSG_STEPS_PER_MM                    _UxGT("B∆∞∆°ÕÅc/mm")                              // Steps
-#if IS_KINEMATIC
-  #define MSG_ASTEPS                        _UxGT("B∆∞·ªõcA/mm")                             // Asteps/mm
-  #define MSG_BSTEPS                        _UxGT("B∆∞·ªõcB/mm")
-  #define MSG_CSTEPS                        _UxGT("B∆∞·ªõcC/mm")
-#else
-  #define MSG_ASTEPS                        _UxGT("B∆∞·ªõcX/mm")                             // Xsteps/mm
-  #define MSG_BSTEPS                        _UxGT("B∆∞·ªõcY/mm")
-  #define MSG_CSTEPS                        _UxGT("B∆∞·ªõcZ/mm")
-#endif
-#define MSG_ESTEPS                          _UxGT("B∆∞·ªõcE/mm")
-#define MSG_E0_STEPS                        _UxGT("B∆∞·ªõcE1/mm")
-#define MSG_E1_STEPS                        _UxGT("B∆∞·ªõcE2/mm")
-#define MSG_E2_STEPS                        _UxGT("B∆∞·ªõcE3/mm")
-#define MSG_E3_STEPS                        _UxGT("B∆∞·ªõcE4/mm")
-#define MSG_E4_STEPS                        _UxGT("B∆∞·ªõcE5/mm")
-#define MSG_E5_STEPS                        _UxGT("B∆∞·ªõcE6/mm")
-#define MSG_TEMPERATURE                     _UxGT("Nhi·ªát ƒë·ªô")                             // Temperature
-#define MSG_MOTION                          _UxGT("Chuy·ªÉn ƒë·ªông")                          // Motion
-#define MSG_FILAMENT                        _UxGT("V·∫≠t li·ªáu in")                          // d√¢y nh·ª±a
-#define MSG_VOLUMETRIC_ENABLED              _UxGT("E b·∫±ng mm") MSG_CUBED                  // E in mm
-#define MSG_FILAMENT_DIAM                   _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a")                      // Fil. Dai.
-#define MSG_FILAMENT_UNLOAD                 _UxGT("D·ª° mm")                                // unload mm
-#define MSG_FILAMENT_LOAD                   _UxGT("N·∫°p mm")
-#define MSG_ADVANCE_K                       _UxGT("K C·∫•p Cao")                            // Advance K
-#define MSG_CONTRAST                        _UxGT("ƒê·ªô t∆∞∆°ng ph·∫£n LCD")                    // LCD contrast
-#define MSG_STORE_EEPROM                    _UxGT("L∆∞u c√°c thi·∫øt l·∫≠p")                    // Store settings
-#define MSG_LOAD_EEPROM                     _UxGT("T·∫£i c√°c c√†i ƒë·∫∑t")                      // Load settings
-#define MSG_RESTORE_FAILSAFE                _UxGT("Kh√¥i ph·ª•c ph√≤ng h∆∞")                   // Restore failsafe
-#define MSG_INIT_EEPROM                     _UxGT("Kh·ªüi T·∫°o EEPROM")                      // Initialize EEPROM
-#define MSG_SD_UPDATE                       _UxGT("C·∫≠p Nh·∫≠t SD")                          // SD Update
-#define MSG_RESET_PRINTER                   _UxGT("B·∫∑t L·∫°i M√°y In")
-#define MSG_REFRESH                         _UxGT("C·∫≠p Nh·∫≠t")                             // Refresh
-#define MSG_WATCH                           _UxGT("M√†n H√¨nh Th√¥ng Tin")                   // Info screen
-#define MSG_PREPARE                         _UxGT("Chu·∫©n b·ªã")                             // Prepare
-#define MSG_TUNE                            _UxGT("ƒêi·ªÅu Ch·ªânh")                           // Tune
-#define MSG_PAUSE_PRINT                     _UxGT("T·∫°m d·ª´ng in")                          // Pause print
-#define MSG_RESUME_PRINT                    _UxGT("Ti·∫øp t·ª•c in")                          // Resume print
-#define MSG_STOP_PRINT                      _UxGT("Ng∆∞ÕÄng in")                             // Stop print
-#define MSG_OUTAGE_RECOVERY                 _UxGT("Ph·ª•c H·ªìi M·∫•t ƒêi·ªán")                    // Outage Recovery
-#define MSG_CARD_MENU                       _UxGT("In t·ª´ SD")                             // Print from SD
-#define MSG_NO_CARD                         _UxGT("Kh√¥ng c√≥ th·∫ª SD")                      // No SD card
-#define MSG_DWELL                           _UxGT("Ng·ªß...")                               // Sleep
-#define MSG_USERWAIT                        _UxGT("Nh·∫•n ƒë·ªÉ ti·∫øp t·ª•c...")                  // Click to resume (same as 'continue')
-#define MSG_PRINT_PAUSED                    _UxGT("In t·∫°m d·ª´ng")                          // print paused
-#define MSG_PRINTING                        _UxGT("ƒêang in...")                           // printing
-#define MSG_PRINT_ABORTED                   _UxGT("In ƒë√£ h·ªßy b·ªè")                         // Print aborted
-#define MSG_NO_MOVE                         _UxGT("Kh√¥ng di chuy·ªÉn.")                     // No move.
-#define MSG_KILLED                          _UxGT("ƒê√É CH√äÕÅT. ")
-#define MSG_STOPPED                         _UxGT("ƒê√É NG∆ØÕÄNG. ")
-#define MSG_CONTROL_RETRACT                 _UxGT("R√∫t mm")                               // Retract mm
-#define MSG_CONTROL_RETRACT_SWAP            _UxGT("R√∫t Trao.mm")                          // Swap Re.mm
-#define MSG_CONTROL_RETRACTF                _UxGT("R√∫t V")
-#define MSG_CONTROL_RETRACT_ZHOP            _UxGT("Nh·∫£y mm")                              // hop
-#define MSG_CONTROL_RETRACT_RECOVER         _UxGT("B·ªèR√∫t mm")                             // UnRet mm
-#define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("B·ªèR√∫t T mm")                           // S UnRet mm
-#define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("B·ªèR√∫t V")                              // UnRet V
-#define MSG_CONTROL_RETRACT_RECOVER_SWAPF   _UxGT("B·ªèR√∫t T V")                            // S UnRet V
-#define MSG_AUTORETRACT                     _UxGT("R√∫tT·ª±ƒê·ªông")                            // AutoRetr.
-#define MSG_FILAMENT_SWAP_LENGTH            _UxGT("Kho·∫£ng C√°ch R√∫t")                      // Retract Distance
-#define MSG_TOOL_CHANGE                     _UxGT("Thay ƒê·ªïi C√¥ng C·ª•")                     // Tool Change
-#define MSG_TOOL_CHANGE_ZLIFT               _UxGT("ƒê∆∞a L√™n Z")                            // Z Raise
-#define MSG_SINGLENOZZLE_PRIME_SPD          _UxGT("T·ªëc ƒê·ªô Tu√¥n Ra")                       // Prime Speed
-#define MSG_SINGLENOZZLE_RETRACT_SPD        _UxGT("T·ªëc ƒê·ªô R√∫t L·∫°i")                       // Retract Speed
-#define MSG_FILAMENTCHANGE                  _UxGT("Thay d√¢y nh·ª±a")                        // change filament
-#define MSG_FILAMENTLOAD                    _UxGT("N·∫°p d√¢y nh·ª±a")                         // load filament
-#define MSG_FILAMENTUNLOAD                  _UxGT("D·ª° d√¢y nh·ª±a")                          // unload filament
-#define MSG_FILAMENTUNLOAD_ALL              _UxGT("D·ª° t·∫•t c·∫£")                            // Unload All
-#define MSG_INIT_SDCARD                     _UxGT("Kh·ªüi t·∫°o th·∫ª SD ")                     // Init. SD card
-#define MSG_CHANGE_SDCARD                   _UxGT("Thay th·∫ª SD")                          // Change SD card
-#define MSG_ZPROBE_OUT                      _UxGT("ƒê·∫ßu D√≤ Z qua b√†n")                     // Z Probe past bed
-#define MSG_SKEW_FACTOR                     _UxGT("H·ªá s·ªë nghi√™ng")                        // Skew Factor
-#define MSG_BLTOUCH                         _UxGT("BLTOUCH")                              // BLTouch
-#define MSG_BLTOUCH_SELFTEST                _UxGT("T·ª± ki·ªÉm tra BLTOUCH ")                 // BLTouch Self-Test
-#define MSG_BLTOUCH_RESET                   _UxGT("B·∫∑t l·∫°i BLTouch")                      // Reset BLTouch
-#define MSG_BLTOUCH_DEPLOY                  _UxGT("ƒêem BLTouch")                          // Deploy BLTouch
-#define MSG_BLTOUCH_STOW                    _UxGT("C·∫•t BLTouch")                          // Stow BLTouch
-#define MSG_MANUAL_DEPLOY                   _UxGT("ƒêem ƒê·∫ßu D√≤-Z")                         // Deploy Z-Probe
-#define MSG_MANUAL_STOW                     _UxGT("C·∫•t ƒê·∫ßu D√≤-Z")                         // Stow Z-Probe
-#define MSG_HOME_FIRST                      _UxGT("V·ªÅ nh√† %s%s%s Tr∆∞∆°ÕÅc")
-#define MSG_ZPROBE_ZOFFSET                  _UxGT("ƒê·∫ßu D√≤ B√π ƒê·∫Øp Z")                      // Probe Z Offset
-#define MSG_BABYSTEP_X                      _UxGT("Nh√≠t X")                               // Babystep X
-#define MSG_BABYSTEP_Y                      _UxGT("Nh√≠t Y")
-#define MSG_BABYSTEP_Z                      _UxGT("Nh√≠t Z")
-#define MSG_ENDSTOP_ABORT                   _UxGT("H·ªßy b·ªè c√¥ng t·∫Øc")                      // Endstop abort
-#define MSG_HEATING_FAILED_LCD              _UxGT("S∆∞·ªüi ƒë·∫ßu phun kh√¥ng th√†nh c√¥ng")       // Heating failed
-#define MSG_HEATING_FAILED_LCD_BED          _UxGT("S∆∞·ªüi b√†n kh√¥ng th√†nh c√¥ng")            // Bed heating failed
-#define MSG_ERR_REDUNDANT_TEMP              _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô d∆∞")                // Err: REDUNDANT TEMP
-#define MSG_THERMAL_RUNAWAY                 _UxGT("V·∫•n ƒë·ªÅ nhi·ªát")                         // THERMAL RUNAWAY | problem
-#define MSG_THERMAL_RUNAWAY_BED             _UxGT("V·∫•n ƒë·ªÅ nhi·ªát b√†n")                     // BED THERMAL RUNAWAY
-#define MSG_ERR_MAXTEMP                     _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi ƒëa")            // Err: MAXTEMP
-#define MSG_ERR_MINTEMP                     _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi thi·ªÉu")         // Err: MINTEMP
-#define MSG_ERR_MAXTEMP_BED                 _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô b√†n t·ªëi ƒëa")        // Err: MAXTEMP BED
-#define MSG_ERR_MINTEMP_BED                 _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô b√†n t·ªëi thi·ªÉu")     // Err: MINTEMP BED
-#define MSG_ERR_Z_HOMING                    _UxGT("V·ªÅ nh√† XY Tr∆∞∆°ÕÅc")                      // Home XY First
-#define MSG_HALTED                          _UxGT("M√ÅY IN ƒê√É D∆ØÕÄNG LAÃ£I")                   // PRINTER HALTED
-#define MSG_PLEASE_RESET                    _UxGT("Xin b·∫∑t l·∫°i")                          // Please reset
-#define MSG_SHORT_DAY                       _UxGT("n")                                    // d - ng√†y - One character only
-#define MSG_SHORT_HOUR                      _UxGT("g")                                    // h - gi·ªù  - One character only
-#define MSG_SHORT_MINUTE                    _UxGT("p")                                    // m - ph√∫t - One character only
-#define MSG_HEATING                         _UxGT("ƒêang s∆∞·ªüi noÕÅng...")                    // heating
-#define MSG_COOLING                         _UxGT("ƒêang laÕÄm ngu√¥Ã£i...")                    // cooling
-#define MSG_BED_HEATING                     _UxGT("ƒêang s∆∞·ªüi nong b√†n...")                // bed heating
-#define MSG_BED_COOLING                     _UxGT("ƒêang laÕÄm ngu√¥Ã£i b√†n...")                // bed cooling
-#define MSG_DELTA_CALIBRATE                 _UxGT("C√¢n Ch·ªânh Delta")                      // Delta calibration
-#define MSG_DELTA_CALIBRATE_X               _UxGT("Ch·ªânh X l·∫°i")
-#define MSG_DELTA_CALIBRATE_Y               _UxGT("Ch·ªânh Y l·∫°i")
-#define MSG_DELTA_CALIBRATE_Z               _UxGT("Ch·ªânh Z l·∫°i")
-#define MSG_DELTA_CALIBRATE_CENTER          _UxGT("Ch·ªânh Z Center")                       // Calibrate Center
-#define MSG_DELTA_SETTINGS                  _UxGT("C√†i ƒê·∫∑t Delta")                        // Delta Settings
-#define MSG_DELTA_AUTO_CALIBRATE            _UxGT("C√¢n Ch·ªânh T·ª± ƒê·ªông")                    // Auto Calibration
-#define MSG_DELTA_HEIGHT_CALIBRATE          _UxGT("ƒê·∫∑t Chi·ªÅu Cao Delta")                  // Set Delta Height
-#define MSG_DELTA_Z_OFFSET_CALIBRATE        _UxGT("ƒê·∫ßu D√≤ Z-B√π ƒê·∫Øp")                      // Probe Z-offset
-#define MSG_DELTA_DIAG_ROD                  _UxGT("G·∫≠y Ch√©o")                             // Diag Rod
-#define MSG_DELTA_HEIGHT                    _UxGT("Chi·ªÅu Cao")                            // Height
-#define MSG_DELTA_RADIUS                    _UxGT("B√°n K√≠nh")                             // Radius
-#define MSG_INFO_MENU                       _UxGT("V·ªÅ M√°y In")
-#define MSG_INFO_PRINTER_MENU               _UxGT("Th√¥ng Tin M√°y In")                     // Printer Info
-#define MSG_3POINT_LEVELING                 _UxGT("San l·∫•p 3-ƒêi·ªÉm")                       // 3-Point Leveling
-#define MSG_LINEAR_LEVELING                 _UxGT("San L·∫•p Tuy·∫øn T√≠nh")                   // Linear Leveling
-#define MSG_BILINEAR_LEVELING               _UxGT("San L·∫•p Song Tuy·∫øn")                   // Bilinear Leveling
-#define MSG_UBL_LEVELING                    _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t")               // Unified Bed Leveling
-#define MSG_MESH_LEVELING                   _UxGT("L∆∞·ªõi San L·∫•p")                         // Mesh Leveling
-#define MSG_INFO_STATS_MENU                 _UxGT("Th·ªëng K√™ M√°y In")                      // Printer Stats
-#define MSG_INFO_BOARD_MENU                 _UxGT("Th√¥ng Tin Bo M·∫°ch")                    // Board Info
-#define MSG_INFO_THERMISTOR_MENU            _UxGT("ƒêi·ªán Tr·ªü Nhi·ªát")                       // Thermistors
-#define MSG_INFO_EXTRUDERS                  _UxGT("M√°y ƒë√πn")                              // Extruders
-#define MSG_INFO_BAUDRATE                   _UxGT("Baud")                                 // Baud
-#define MSG_INFO_PROTOCOL                   _UxGT("Giao Th·ª©c")                            // Protocol
-#define MSG_CASE_LIGHT                      _UxGT("ƒê√®n Khu√¥ng")                           // Case light
-#define MSG_CASE_LIGHT_BRIGHTNESS           _UxGT("ƒê·ªô S√°ng")                              // Light Brightness
-#if LCD_WIDTH >= 20
-  #define MSG_INFO_PRINT_COUNT              _UxGT("S·ªë In")                                // Print Count
-  #define MSG_INFO_COMPLETED_PRINTS         _UxGT("ƒê√£ ho√†n th√†nh")
-  #define MSG_INFO_PRINT_TIME               _UxGT("T√¥Ãâng s·ªë th·ªùi gian in")                // Total print time
-  #define MSG_INFO_PRINT_LONGEST            _UxGT("Th·ªùi gian vi·ªác l√¢u nh·∫•t")              // Longest job time
-  #define MSG_INFO_PRINT_FILAMENT           _UxGT("T·ªïng s·ªë ƒë√πn")                          // Extruded total
-#else
-  #define MSG_INFO_PRINT_COUNT              _UxGT("In")                                   // prints
-  #define MSG_INFO_COMPLETED_PRINTS         _UxGT("ƒê√£ ho√†n th√†nh")                        // Completed
-  #define MSG_INFO_PRINT_TIME               _UxGT("T√¥Ãâng s·ªë")                             // total
-  #define MSG_INFO_PRINT_LONGEST            _UxGT("D√†i nh·∫•t")                             // Longest
-  #define MSG_INFO_PRINT_FILAMENT           _UxGT("ƒê√£ √©p ƒë√πn")
-#endif
-#define MSG_INFO_MIN_TEMP                   _UxGT("Nhi·ªát ƒë·ªô t·ªëi thi·ªÉu")                   // Min Temp
-#define MSG_INFO_MAX_TEMP                   _UxGT("Nhi·ªát ƒë·ªô t·ªëi ƒëa")                      // Max temp
-#define MSG_INFO_PSU                        _UxGT("B·ªô ngu·ªìn")                             // PSU
-#define MSG_DRIVE_STRENGTH                  _UxGT("S·ª©c m·∫°nh ·ªï ƒëƒ©a")                       // Drive Strength
-#define MSG_DAC_PERCENT                     _UxGT("% tr√¨nh ƒëi·ªÅu khi·ªÉn")                   // Driver %
-#define MSG_DAC_EEPROM_WRITE                _UxGT("Ghi DAC EEPROM")                       // DAC EEPROM Write
-#define MSG_FILAMENT_CHANGE_HEADER_PAUSE    _UxGT("In t·∫°m d·ª´ng")                          // PRINT PAUSED
-#define MSG_FILAMENT_CHANGE_HEADER_LOAD     _UxGT("N·∫°p d√¢y nh·ª±a")
-#define MSG_FILAMENT_CHANGE_HEADER_UNLOAD   _UxGT("D·ª° d√¢y nh·ª±a")                          // unload filament
-#define MSG_FILAMENT_CHANGE_OPTION_HEADER   _UxGT("T√πy ch·ªçn h√¥ÕÄi phuÃ£c:")                   // RESUME OPTIONS
-#define MSG_FILAMENT_CHANGE_OPTION_PURGE    _UxGT("X·∫£ th√™m")                              // Purge more
-#define MSG_FILAMENT_CHANGE_OPTION_RESUME   _UxGT("Ti·∫øp t·ª•c")                             // continue
-#define MSG_FILAMENT_CHANGE_NOZZLE          _UxGT("  ƒê·∫ßu Phun: ")                         // Nozzle
-#define MSG_RUNOUT_SENSOR_ENABLE            _UxGT("C·∫£m Bi·∫øn H·∫øt")                         // Runout Sensor
-#define MSG_ERR_HOMING_FAILED               _UxGT("S∆∞Ã£ nh√† kh√¥ng th√†nh c√¥ng")              // Homing failed
-#define MSG_ERR_PROBING_FAILED              _UxGT(" kh√¥ng th√†nh c√¥ng")                    // Probing failed
-#define MSG_M600_TOO_COLD                   _UxGT("M600: Qu√° l·∫°nh")
+  //
+  // Filament Change screens show up to 3 lines on a 4-line display
+  //                        ...or up to 2 lines on a 3-line display
+  //
+  #if LCD_HEIGHT >= 4
+    PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_2_LINE("Nh·∫•n n√∫t", "ƒë·ªÉ ti·∫øp t·ª•c in")); // Press button to resume print
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_3_LINE("Ch·ªù cho s∆∞Ã£", "thay ƒë·ªïi d√¢y nh·ª±a", "bƒÉÕÅt ƒë√¢ÕÄu")); // wait for filament change to start
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_3_LINE("ƒêuÕÅt d√¢y nh·ª±a vaÕÄo", "v√† nh·∫•n n√∫t", "ƒë·ªÉ ti·∫øp t·ª•c")); // insert filament and press button to continue                       //
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_2_LINE("Nh·∫•n n√∫t", "ƒë·ªÉ l√†m n√≥ng ƒë·∫ßu phun")); // Press button to heat nozzle
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_2_LINE("ƒê·∫ßu phun ƒëang n√≥ng l√™n", "Xin ch·ªù...")); // Nozzle heating Please wait
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_2_LINE("Ch·ªù tro", "d√¢y nh·ª±a ra"));   // Wait for filament unload
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_2_LINE("Ch·ªù tro", "d√¢y nh·ª±a vaÕÄo"));  // Wait for filament load
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_2_LINE("Ch·ªù tro", "x·∫£ d√¢y nh·ª±a"));   // wait for filament purge
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE    = _UxGT(MSG_2_LINE("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c", "x·∫£ d√¢y nh·ª±a")); // Click to finish d√¢y nh·ª±a purge
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_2_LINE("Ch·ªù tro in", "ti·∫øp t·ª•c...")); // Wait for print to resume
+  #else // LCD_HEIGHT < 4
+    PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_1_LINE("Nh·∫•n n√∫t ƒë·ªÉ ti·∫øp t·ª•c"));     // Click to continue
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_1_LINE("Xin ch·ªù..."));
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_1_LINE("Ch√®n v√† nh·∫•n"));             // Insert and Click
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_1_LINE("Nh·∫•n ƒë·ªÉ s∆∞·ªüi"));             // Click to heat
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_1_LINE("ƒêang s∆∞·ªüi n√≥ng"));           // Heating
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_1_LINE("ƒêang d·ª° ra..."));            // Ejecting
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_1_LINE("ƒêang n·∫°p..."));              // Loading
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_1_LINE("ƒêang x·∫£..."));               // Purging
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE    = _UxGT(MSG_1_LINE("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c"));     // Click to finish
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_1_LINE("ƒêang ti·∫øp t·ª•c..."));         // Resuming
+  #endif // LCD_HEIGHT < 4
 
-//
-// Filament Change screens show up to 3 lines on a 4-line display
-//                        ...or up to 2 lines on a 3-line display
-//
-#if LCD_HEIGHT >= 4
-  #define MSG_ADVANCED_PAUSE_WAITING_1      _UxGT("Nh·∫•n n√∫t")                             // Press button
-  #define MSG_ADVANCED_PAUSE_WAITING_2      _UxGT("ƒë·ªÉ ti·∫øp t·ª•c in")                       // to resume print
-  #define MSG_FILAMENT_CHANGE_INIT_1        _UxGT("Ch·ªù cho s∆∞Ã£")                           // wait for
-  #define MSG_FILAMENT_CHANGE_INIT_2        _UxGT("thay ƒë·ªïi d√¢y nh·ª±a")                    // filament change
-  #define MSG_FILAMENT_CHANGE_INIT_3        _UxGT("bƒÉÕÅt ƒë√¢ÕÄu")                              // to start
-  #define MSG_FILAMENT_CHANGE_INSERT_1      _UxGT("ƒêuÕÅt d√¢y nh·ª±a vaÕÄo")                     // insert filament
-  #define MSG_FILAMENT_CHANGE_INSERT_2      _UxGT("v√† nh·∫•n n√∫t")                          // and press button
-  #define MSG_FILAMENT_CHANGE_INSERT_3      _UxGT("ƒë·ªÉ ti·∫øp t·ª•c")                          // to continue
-  #define MSG_FILAMENT_CHANGE_HEAT_1        _UxGT("Nh·∫•n n√∫t")                             // Press button
-  #define MSG_FILAMENT_CHANGE_HEAT_2        _UxGT("ƒë·ªÉ l√†m n√≥ng ƒë·∫ßu phun")                 // to heat nozzle
-  #define MSG_FILAMENT_CHANGE_HEATING_1     _UxGT("ƒê·∫ßu phun ƒëang n√≥ng l√™n")               // Nozzle heating
-  #define MSG_FILAMENT_CHANGE_HEATING_2     _UxGT("Xin ch·ªù...")                           // Please wait
-  #define MSG_FILAMENT_CHANGE_UNLOAD_1      _UxGT("Ch·ªù tro")                              // Wait for
-  #define MSG_FILAMENT_CHANGE_UNLOAD_2      _UxGT("d√¢y nh·ª±a ra")                          // filament unload
-  #define MSG_FILAMENT_CHANGE_LOAD_1        _UxGT("Ch·ªù tro")
-  #define MSG_FILAMENT_CHANGE_LOAD_2        _UxGT("d√¢y nh·ª±a vaÕÄo")
-  #define MSG_FILAMENT_CHANGE_PURGE_1       _UxGT("Ch·ªù tro")                              // wait for filament purge
-  #define MSG_FILAMENT_CHANGE_PURGE_2       _UxGT("x·∫£ d√¢y nh·ª±a")
-  #define MSG_FILAMENT_CHANGE_CONT_PURGE_1  _UxGT("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c")                 // Click to finish
-  #define MSG_FILAMENT_CHANGE_CONT_PURGE_2  _UxGT("x·∫£ d√¢y nh·ª±a")                          // d√¢y nh·ª±a purge
-  #define MSG_FILAMENT_CHANGE_RESUME_1      _UxGT("Ch·ªù tro in")                           // Wait for print to resume
-  #define MSG_FILAMENT_CHANGE_RESUME_2      _UxGT("ti·∫øp t·ª•c...")
-#else // LCD_HEIGHT < 4
-  #define MSG_ADVANCED_PAUSE_WAITING_1      _UxGT("Nh·∫•n n√∫t ƒë·ªÉ ti·∫øp t·ª•c")                 // Click to continue
-  #define MSG_FILAMENT_CHANGE_INIT_1        _UxGT("Xin ch·ªù...")
-  #define MSG_FILAMENT_CHANGE_INSERT_1      _UxGT("Ch√®n v√† nh·∫•n")                         // Insert and Click
-  #define MSG_FILAMENT_CHANGE_HEAT_1        _UxGT("Nh·∫•n ƒë·ªÉ s∆∞·ªüi")                         // Click to heat
-  #define MSG_FILAMENT_CHANGE_HEATING_1     _UxGT("ƒêang s∆∞·ªüi n√≥ng")                       // Heating
-  #define MSG_FILAMENT_CHANGE_UNLOAD_1      _UxGT("ƒêang d·ª° ra...")                        // Ejecting
-  #define MSG_FILAMENT_CHANGE_LOAD_1        _UxGT("ƒêang n·∫°p...")                          // Loading
-  #define MSG_FILAMENT_CHANGE_PURGE_1       _UxGT("ƒêang x·∫£...")                           // Purging
-  #define MSG_FILAMENT_CHANGE_CONT_PURGE_1  _UxGT("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c")                 // Click to finish
-  #define MSG_FILAMENT_CHANGE_RESUME_1      _UxGT("ƒêang ti·∫øp t·ª•c...")                     // Resuming
-#endif // LCD_HEIGHT < 4
-
-#define MSG_TMC_DRIVERS                     _UxGT("Tr√¨nh ƒëi·ªÅu khi·ªÉn TMC")                 // TMC drivers
-#define MSG_TMC_CURRENT                     _UxGT("D√≤ng ƒëi·ªán tr√¨nh ƒëi·ªÅu khi·ªÉn")           // Driver current
-#define MSG_TMC_HYBRID_THRS                 _UxGT("Ng∆∞·ª°ng H·ªón H·ª£p")                       // Hybrid threshold
-#define MSG_TMC_HOMING_THRS                 _UxGT("V√¥ c·∫£m bi·∫øn")                          // Sensorless homing
-#define MSG_TMC_STEPPING_MODE               _UxGT("Ch·∫ø ƒë·ªô t·ª´ng b∆∞·ªõc")                     // Stepping mode
-#define MSG_TMC_STEALTH_ENABLED             _UxGT("C·∫ØtT√†ngH√¨nh ƒë∆∞·ª£c k√≠ch ho·∫°t")           // StealthChop enabled
+  PROGMEM Language_Str MSG_TMC_DRIVERS                     = _UxGT("Tr√¨nh ƒëi·ªÅu khi·ªÉn TMC");                 // TMC drivers
+  PROGMEM Language_Str MSG_TMC_CURRENT                     = _UxGT("D√≤ng ƒëi·ªán tr√¨nh ƒëi·ªÅu khi·ªÉn");           // Driver current
+  PROGMEM Language_Str MSG_TMC_HYBRID_THRS                 = _UxGT("Ng∆∞·ª°ng H·ªón H·ª£p");                       // Hybrid threshold
+  PROGMEM Language_Str MSG_TMC_HOMING_THRS                 = _UxGT("V√¥ c·∫£m bi·∫øn");                          // Sensorless homing
+  PROGMEM Language_Str MSG_TMC_STEPPING_MODE               = _UxGT("Ch·∫ø ƒë·ªô t·ª´ng b∆∞·ªõc");                     // Stepping mode
+  PROGMEM Language_Str MSG_TMC_STEALTH_ENABLED             = _UxGT("C·∫ØtT√†ngH√¨nh ƒë∆∞·ª£c k√≠ch ho·∫°t");           // StealthChop enabled
+}

commit 5becda25c56fe0df0541840ca095b21b3c522001
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 8 17:37:17 2019 -0500

    Followup to E renumbering

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 3b8885e707..b1520274fd 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -238,12 +238,12 @@
   #define MSG_CSTEPS                        _UxGT("B∆∞·ªõcZ/mm")
 #endif
 #define MSG_ESTEPS                          _UxGT("B∆∞·ªõcE/mm")
-#define MSG_E1STEPS                         _UxGT("B∆∞·ªõcE1/mm")
-#define MSG_E2STEPS                         _UxGT("B∆∞·ªõcE2/mm")
-#define MSG_E3STEPS                         _UxGT("B∆∞·ªõcE3/mm")
-#define MSG_E4STEPS                         _UxGT("B∆∞·ªõcE4/mm")
-#define MSG_E5STEPS                         _UxGT("B∆∞·ªõcE5/mm")
-#define MSG_E6STEPS                         _UxGT("B∆∞·ªõcE6/mm")
+#define MSG_E0_STEPS                        _UxGT("B∆∞·ªõcE1/mm")
+#define MSG_E1_STEPS                        _UxGT("B∆∞·ªõcE2/mm")
+#define MSG_E2_STEPS                        _UxGT("B∆∞·ªõcE3/mm")
+#define MSG_E3_STEPS                        _UxGT("B∆∞·ªõcE4/mm")
+#define MSG_E4_STEPS                        _UxGT("B∆∞·ªõcE5/mm")
+#define MSG_E5_STEPS                        _UxGT("B∆∞·ªõcE6/mm")
 #define MSG_TEMPERATURE                     _UxGT("Nhi·ªát ƒë·ªô")                             // Temperature
 #define MSG_MOTION                          _UxGT("Chuy·ªÉn ƒë·ªông")                          // Motion
 #define MSG_FILAMENT                        _UxGT("V·∫≠t li·ªáu in")                          // d√¢y nh·ª±a

commit b2e1f77f58a67ac02503cbe36b22a21e5afaeac0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Sep 25 21:01:29 2019 -0500

    Fix extraneous "Home XYZ First" message

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index d2333242f4..3b8885e707 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -88,7 +88,6 @@
 #define MSG_MESH_EDIT_Z                     _UxGT("Gi√° tr·ªã Z")                            // Z Value
 #define MSG_USER_MENU                       _UxGT("C√°c l·ªánh t·ª± ch·ªçn")                     // Custom Commands
 #define MSG_UBL_DOING_G29                   _UxGT("ƒêang ch·∫°y G29")                        // Doing G29
-#define MSG_UBL_UNHOMED                     _UxGT("V·ªÅ nh√† XYZ tr∆∞·ªõc")
 #define MSG_UBL_TOOLS                       _UxGT("C√¥ng c·ª• UBL")                          // UBL tools
 #define MSG_UBL_LEVEL_BED                   _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t (UBL)")         // Unified Bed Leveling
 #define MSG_IDEX_MENU                       _UxGT("ch·∫ø ƒë·ªô IDEX")                          // IDEX Mode
@@ -307,8 +306,7 @@
 #define MSG_BLTOUCH_STOW                    _UxGT("C·∫•t BLTouch")                          // Stow BLTouch
 #define MSG_MANUAL_DEPLOY                   _UxGT("ƒêem ƒê·∫ßu D√≤-Z")                         // Deploy Z-Probe
 #define MSG_MANUAL_STOW                     _UxGT("C·∫•t ƒê·∫ßu D√≤-Z")                         // Stow Z-Probe
-#define MSG_HOME                            _UxGT("V·ªÅ nh√†") // Used as MSG_HOME " " MSG_X MSG_Y MSG_Z " " MSG_FIRST
-#define MSG_FIRST                           _UxGT("Tr∆∞∆°ÕÅc")
+#define MSG_HOME_FIRST                      _UxGT("V·ªÅ nh√† %s%s%s Tr∆∞∆°ÕÅc")
 #define MSG_ZPROBE_ZOFFSET                  _UxGT("ƒê·∫ßu D√≤ B√π ƒê·∫Øp Z")                      // Probe Z Offset
 #define MSG_BABYSTEP_X                      _UxGT("Nh√≠t X")                               // Babystep X
 #define MSG_BABYSTEP_Y                      _UxGT("Nh√≠t Y")
@@ -323,7 +321,7 @@
 #define MSG_ERR_MINTEMP                     _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi thi·ªÉu")         // Err: MINTEMP
 #define MSG_ERR_MAXTEMP_BED                 _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô b√†n t·ªëi ƒëa")        // Err: MAXTEMP BED
 #define MSG_ERR_MINTEMP_BED                 _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô b√†n t·ªëi thi·ªÉu")     // Err: MINTEMP BED
-#define MSG_ERR_Z_HOMING                    MSG_HOME _UxGT(" ") MSG_X MSG_Y _UxGT(" ") MSG_FIRST
+#define MSG_ERR_Z_HOMING                    _UxGT("V·ªÅ nh√† XY Tr∆∞∆°ÕÅc")                      // Home XY First
 #define MSG_HALTED                          _UxGT("M√ÅY IN ƒê√É D∆ØÕÄNG LAÃ£I")                   // PRINTER HALTED
 #define MSG_PLEASE_RESET                    _UxGT("Xin b·∫∑t l·∫°i")                          // Please reset
 #define MSG_SHORT_DAY                       _UxGT("n")                                    // d - ng√†y - One character only

commit beffcd856b87f8b23c90920614bc41b9b3d0716d
Author: Ludy <Ludy87@users.noreply.github.com>
Date:   Wed Sep 4 23:59:26 2019 +0200

    Update German language, (c) (#15164)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
index 3453e88bda..d2333242f4 100644
--- a/Marlin/src/lcd/language/language_vi.h
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit d6a16525c2742719ce2f477738dd548f27015328
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Aug 24 03:40:28 2019 -0500

    New Language: Vietnamese (#13892)

diff --git a/Marlin/src/lcd/language/language_vi.h b/Marlin/src/lcd/language/language_vi.h
new file mode 100644
index 0000000000..3453e88bda
--- /dev/null
+++ b/Marlin/src/lcd/language/language_vi.h
@@ -0,0 +1,439 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+/**
+ * Vietnamese
+ *
+ * LCD Menu Messages
+ * See also http://marlinfw.org/docs/development/lcd_language.html
+ *
+ */
+
+#define CHARSIZE 2
+
+#define THIS_LANGUAGES_SPECIAL_SYMBOLS      _UxGT("√†·∫°·∫≠·∫µ·∫Ø·∫•·∫ßƒë·∫ª·ªÉ·∫ø·ªÅ√¨·ªâ·ªü·ªô·ªó·ª£√∫·ª±")
+
+#define WELCOME_MSG                         MACHINE_NAME _UxGT(" S·∫µn s√†ng.")              // Ready
+#define MSG_BACK                            _UxGT("Tr·ªü l·∫°i")                              // Back
+#define MSG_SD_INSERTED                     _UxGT("Th·∫ª ƒë∆∞·ª£c c·∫Øm v√†o")                     // Card inserted
+#define MSG_SD_REMOVED                      _UxGT("Th·∫ª ƒë∆∞·ª£c r√∫t ra")
+#define MSG_LCD_ENDSTOPS                    _UxGT("C√¥ng t·∫Øc")                             // Endstops - c√¥ng t·∫Øc h√†nh tr√¨nh
+#define MSG_LCD_SOFT_ENDSTOPS               _UxGT("C√¥ng t·∫Øc m·ªÅm")                         // soft Endstops
+#define MSG_MAIN                            _UxGT("Ch√≠nh")                                // Main
+#define MSG_ADVANCED_SETTINGS               _UxGT("Thi·∫øt l·∫≠p c·∫•p cao")                    // Advanced Settings
+#define MSG_CONFIGURATION                   _UxGT("C·∫•u h√¨nh")                             // Configuration
+#define MSG_AUTOSTART                       _UxGT("Kh·ªüi ch·∫°y t·ª± ƒë·ªông")                    // Autostart
+#define MSG_DISABLE_STEPPERS                _UxGT("T·∫Øt ƒë·ªông c∆° b∆∞·ªõc")                     // Disable steppers
+#define MSG_DEBUG_MENU                      _UxGT("Menu g·ª° l·ªói")                          // Debug Menu
+#define MSG_PROGRESS_BAR_TEST               _UxGT("Ki·ªÉm tra ti·∫øn ƒë·ªô")                     // Progress bar test
+#define MSG_AUTO_HOME                       _UxGT("V·ªÅ nh√† t·ª± ƒë·ªông")                       // Auto home
+#define MSG_AUTO_HOME_X                     _UxGT("V·ªÅ nh√† X")                             // home x
+#define MSG_AUTO_HOME_Y                     _UxGT("V·ªÅ nh√† Y")                             // home y
+#define MSG_AUTO_HOME_Z                     _UxGT("V·ªÅ nh√† Z")
+#define MSG_AUTO_Z_ALIGN                    _UxGT("Ch·ªânh canh Z t·ª± ƒë·ªông")
+#define MSG_LEVEL_BED_HOMING                _UxGT("ƒêang v·ªÅ nh√† XYZ")                      // Homing XYZ
+#define MSG_LEVEL_BED_WAITING               _UxGT("Nh·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu")                      // Click to Begin
+#define MSG_LEVEL_BED_NEXT_POINT            _UxGT("ƒêi·ªÉm ti·∫øp theo")                       // Next Point
+#define MSG_LEVEL_BED_DONE                  _UxGT("San l·∫•p ƒë∆∞·ª£c ho√†n th√†nh")              // Leveling Done!
+#define MSG_Z_FADE_HEIGHT                   _UxGT("Chi·ªÅu cao m·ªù d·∫ßn")                     // Fade Height
+#define MSG_SET_HOME_OFFSETS                _UxGT("ƒê·∫∑t b√π ƒë·∫Øp nh√†")                       // Set home offsets
+#define MSG_HOME_OFFSETS_APPLIED            _UxGT("B√π ƒë·∫Øp ƒë∆∞·ª£c √°p d·ª•ng")                  // Offsets applied
+#define MSG_SET_ORIGIN                      _UxGT("ƒê·∫∑t ngu·ªìn g·ªëc")                        // Set origin
+#define MSG_PREHEAT_1                       _UxGT("L√†m n√≥ng " PREHEAT_1_LABEL " tr∆∞·ªõc")   // Preheat
+#define MSG_PREHEAT_1_N                     MSG_PREHEAT_1 _UxGT(" ")
+#define MSG_PREHEAT_1_ALL                   MSG_PREHEAT_1 _UxGT(" T·∫•t c·∫£")                // all
+#define MSG_PREHEAT_1_END                   MSG_PREHEAT_1 _UxGT(" ƒê·∫ßu")
+#define MSG_PREHEAT_1_BEDONLY               MSG_PREHEAT_1 _UxGT(" B√†n")                   // bed -- using vietnamese term for 'table' instead
+#define MSG_PREHEAT_1_SETTINGS              MSG_PREHEAT_1 _UxGT(" C·∫•u h√¨nh")              // conf
+#define MSG_PREHEAT_2                       _UxGT("L√†m n√≥ng " PREHEAT_2_LABEL " tr∆∞·ªõc")
+#define MSG_PREHEAT_2_N                     MSG_PREHEAT_2 _UxGT(" ")
+#define MSG_PREHEAT_2_ALL                   MSG_PREHEAT_2 _UxGT(" T·∫•t c·∫£")
+#define MSG_PREHEAT_2_END                   MSG_PREHEAT_2 _UxGT(" ƒê·∫ßu")
+#define MSG_PREHEAT_2_BEDONLY               MSG_PREHEAT_2 _UxGT(" B√†n")                   // bed -- using vietnamese term for 'table' instead
+#define MSG_PREHEAT_2_SETTINGS              MSG_PREHEAT_2 _UxGT(" C·∫•u h√¨nh")
+#define MSG_PREHEAT_CUSTOM                  _UxGT("S∆∞Ã£ n√≥ng tr∆∞·ªõc t·ª± ch·ªçn")                // Preheat Custom
+#define MSG_COOLDOWN                        _UxGT("Ngu·ªôi xu·ªëng")                          // Cooldown
+#define MSG_SWITCH_PS_ON                    _UxGT("B·∫≠t ngu·ªìn")                            // Switch power on
+#define MSG_SWITCH_PS_OFF                   _UxGT("T·∫Øt ngu·ªìn")                            // Switch power off
+#define MSG_EXTRUDE                         _UxGT("√âp ƒë√πn")                               // Extrude
+#define MSG_RETRACT                         _UxGT("R√∫t l·∫°i")                              // Retract
+#define MSG_MOVE_AXIS                       _UxGT("Di chuy·ªÉn tr·ª•c")                       // Move axis
+#define MSG_BED_LEVELING                    _UxGT("San L·∫•p B√†n")                          // Bed Leveling
+#define MSG_LEVEL_BED                       _UxGT("LaÕÄm bƒÉÕÄng m·∫∑t b√†n")                     // Level bed
+#define MSG_LEVEL_CORNERS                   _UxGT("LaÕÄm bƒÉÕÄng g√≥c b√†n")                     // Level corners
+#define MSG_NEXT_CORNER                     _UxGT("G√≥c ti·∫øp theo")                        // Next corner
+#define MSG_EDITING_STOPPED                 _UxGT("Ch·ªânh l∆∞·ªõi ƒë√£ d·ª´ng")                   // Mesh Editing Stopped
+#define MSG_MESH_X                          _UxGT("MuÃ£c luÃ£c X")                            // Index X
+#define MSG_MESH_Y                          _UxGT("MuÃ£c luÃ£c Y")
+#define MSG_MESH_EDIT_Z                     _UxGT("Gi√° tr·ªã Z")                            // Z Value
+#define MSG_USER_MENU                       _UxGT("C√°c l·ªánh t·ª± ch·ªçn")                     // Custom Commands
+#define MSG_UBL_DOING_G29                   _UxGT("ƒêang ch·∫°y G29")                        // Doing G29
+#define MSG_UBL_UNHOMED                     _UxGT("V·ªÅ nh√† XYZ tr∆∞·ªõc")
+#define MSG_UBL_TOOLS                       _UxGT("C√¥ng c·ª• UBL")                          // UBL tools
+#define MSG_UBL_LEVEL_BED                   _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t (UBL)")         // Unified Bed Leveling
+#define MSG_IDEX_MENU                       _UxGT("ch·∫ø ƒë·ªô IDEX")                          // IDEX Mode
+#define MSG_IDEX_MODE_AUTOPARK              _UxGT("ƒê√¢Ã£u t·ª± ƒë·ªông")                          // Auto-Park
+#define MSG_IDEX_MODE_DUPLICATE             _UxGT("S∆∞Ã£ g√¢ÕÅp ƒë√¥i")                           // Duplication
+#define MSG_IDEX_MODE_SCALED_COPY           _UxGT("B·∫£n sao thu nh·ªè")
+#define MSG_IDEX_MODE_FULL_CTRL             _UxGT("To√†n quy·ªÅn ƒëi·ªÅu khi·ªÉn")                // Full control
+#define MSG_IDEX_X_OFFSET                   _UxGT("ƒê·∫ßu phun X nhiÕÄ")                       // 2nd nozzle X
+#define MSG_IDEX_Y_OFFSET                   _UxGT("ƒê·∫ßu phun Y nhiÕÄ")
+#define MSG_IDEX_Z_OFFSET                   _UxGT("ƒê·∫ßu phun Z nhiÕÄ")
+#define MSG_IDEX_SAVE_OFFSETS               _UxGT("L∆∞u b√π ƒë·∫Øp")                           // Save offsets
+#define MSG_UBL_MANUAL_MESH                 _UxGT("T·ª± x√¢y d·ª±ng l∆∞·ªõi")                     // Manually Build Mesh
+#define MSG_UBL_BC_INSERT                   _UxGT("ƒêƒÉÃ£t ch√™m v√† ƒëo")                       // Place shim & measure
+#define MSG_UBL_BC_INSERT2                  _UxGT("ƒêo")                                   // Measure
+#define MSG_UBL_BC_REMOVE                   _UxGT("ThaÕÅo v√† ƒëo b√†n")                       // Remove & measure bed
+#define MSG_UBL_MOVING_TO_NEXT              _UxGT("Chuy·ªÉn sang ti·∫øp theo")                // moving to next
+#define MSG_UBL_ACTIVATE_MESH               _UxGT("B·∫≠t UBL")
+#define MSG_UBL_DEACTIVATE_MESH             _UxGT("T·∫Øt UBL")
+#define MSG_UBL_SET_TEMP_BED                _UxGT("Nhi·ªát ƒë·ªô b√†n")                         // Bed Temp
+#define MSG_UBL_BED_TEMP_CUSTOM             MSG_UBL_SET_TEMP_BED
+#define MSG_UBL_SET_TEMP_HOTEND             _UxGT("Nhi·ªát ƒë·ªô ƒë·∫ßu phun")                    // Hotend Temp
+#define MSG_UBL_HOTEND_TEMP_CUSTOM          MSG_UBL_SET_TEMP_HOTEND
+#define MSG_UBL_MESH_EDIT                   _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi")                       // Mesh Edit
+#define MSG_UBL_EDIT_CUSTOM_MESH            _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi t·ª± ch·ªçn")               // Edit Custom Mesh
+#define MSG_UBL_FINE_TUNE_MESH              _UxGT("Ch·ªânh l∆∞·ªõi ch√≠nh x√°c")                 // Fine tuning mesh
+#define MSG_UBL_DONE_EDITING_MESH           _UxGT("Ch·ªânh s·ª≠a xong l∆∞·ªõi")                  // Done Editing Mesh
+#define MSG_UBL_BUILD_CUSTOM_MESH           _UxGT("X√¢y d·ª±ng l∆∞·ªõi t·ª± ch·ªçn")                // Build Custom Mesh
+#define MSG_UBL_BUILD_MESH_MENU             _UxGT("X√¢y d·ª±ng l∆∞·ªõi")                        // Build Mesh
+#define MSG_UBL_BUILD_MESH_M1               _UxGT("X√¢y d·ª±ng l∆∞·ªõi (" PREHEAT_1_LABEL ")")
+#define MSG_UBL_BUILD_MESH_M2               _UxGT("X√¢y d·ª±ng l∆∞·ªõi (" PREHEAT_2_LABEL ")")
+#define MSG_UBL_BUILD_COLD_MESH             _UxGT("X√¢y d·ª±ng l∆∞·ªõi l·∫°nh")                   // Build cold mesh
+#define MSG_UBL_MESH_HEIGHT_ADJUST          _UxGT("ƒêi·ªÅu ch·ªânh chi·ªÅu cao l∆∞·ªõi")            // Adjust Mesh Height
+#define MSG_UBL_MESH_HEIGHT_AMOUNT          _UxGT("S·ªë l∆∞·ª£ng chi·ªÅu cao")                   // Height Amount
+#define MSG_UBL_VALIDATE_MESH_MENU          _UxGT("Th·∫©m tra l∆∞·ªõi")                        // Validate Mesh
+#define MSG_UBL_VALIDATE_MESH_M1            _UxGT("Th·∫©m tra l∆∞·ªõi (" PREHEAT_1_LABEL ")")
+#define MSG_UBL_VALIDATE_MESH_M2            _UxGT("Th·∫©m tra l∆∞·ªõi (" PREHEAT_2_LABEL ")")
+#define MSG_UBL_VALIDATE_CUSTOM_MESH        _UxGT("Th·∫©m tra l∆∞·ªõi t·ª± ch·ªçn")                // validate custom mesh
+#define MSG_UBL_CONTINUE_MESH               _UxGT("Ti·∫øp t·ª•c x√¢y l∆∞·ªõi b√†n")                // Continue Bed Mesh
+#define MSG_UBL_MESH_LEVELING               _UxGT("ƒêang san l·∫•p l∆∞·ªõi")                    // Mesh Leveling
+#define MSG_UBL_3POINT_MESH_LEVELING        _UxGT("ƒêang san l·∫•p 3-ƒëi·ªÉm")                  // 3-Point Leveling
+#define MSG_UBL_GRID_MESH_LEVELING          _UxGT("ƒêang san l·∫•p l∆∞·ªõi ph·∫≥ng")              // Grid (planar) Mesh Leveling
+#define MSG_UBL_MESH_LEVEL                  _UxGT("LaÕÄm bƒÉÕÄng l∆∞·ªõi")                        // Level Mesh
+#define MSG_UBL_SIDE_POINTS                 _UxGT("ƒêi·ªÉm b√™n caÃ£nh")                        // Side Points
+#define MSG_UBL_MAP_TYPE                    _UxGT("Lo·∫°i b·∫£n ƒë·ªì")                          // Map Type
+#define MSG_UBL_OUTPUT_MAP                  _UxGT("ƒê·∫ßu ra b·∫£n ƒë·ªì l∆∞·ªõi")                   // Output Mesh Map
+#define MSG_UBL_OUTPUT_MAP_HOST             _UxGT("ƒê·∫ßu ra cho m√°y ch·ªß")                   // Output for Host
+#define MSG_UBL_OUTPUT_MAP_CSV              _UxGT("ƒê·∫ßu ra cho CSV")                       // Output for CSV
+#define MSG_UBL_OUTPUT_MAP_BACKUP           _UxGT("H·ªó tr·ª£ l∆∞·ªõi")                          // Off Printer Backup | backup mesh
+#define MSG_UBL_INFO_UBL                    _UxGT("ƒê·∫ßu ra th√¥ng tin UBL")                 // Output UBL Info
+#define MSG_EDIT_MESH                       _UxGT("Ch·ªânh s·ª≠a l∆∞·ªõi")                       // Edit mesh
+#define MSG_UBL_FILLIN_AMOUNT               _UxGT("S·ªë l∆∞·ª£ng l√¢ÕÅp ƒë√¢ÕÄy")                     // Fill-in Amount
+#define MSG_UBL_MANUAL_FILLIN               _UxGT("T·ª± l√¢ÕÅp ƒë√¢ÕÄy")                           // Manual Fill-in
+#define MSG_UBL_SMART_FILLIN                _UxGT("L√¢ÕÅp ƒë√¢ÕÄy th√¥ng minh")                   // Smart Fill-in
+#define MSG_UBL_FILLIN_MESH                 _UxGT("L∆∞·ªõi l√¢ÕÅp ƒë√¢ÕÄy")                         // Fill-in Mesh
+#define MSG_UBL_INVALIDATE_ALL              _UxGT("BaÕÅc boÃâ t·∫•t c·∫£")                       // Invalidate All
+#define MSG_UBL_INVALIDATE_CLOSEST          _UxGT("BaÕÅc boÃâ g·∫ßn nh·∫•t")                     // Invalidate Closest
+#define MSG_UBL_FINE_TUNE_ALL               _UxGT("Ch·ªânh ch√≠nh x√°c t·∫•t c·∫£")               // Fine Tune ALl
+#define MSG_UBL_FINE_TUNE_CLOSEST           _UxGT("Ch·ªânh ch√≠nh x√°c g·∫ßn nh·∫•t")             // Fine Tune Closest
+#define MSG_UBL_STORAGE_MESH_MENU           _UxGT("L∆∞u tr·ªØ l∆∞·ªõi")                         // Mesh Storage
+#define MSG_UBL_STORAGE_SLOT                _UxGT("Khe nh·ªõ")                              // Memory Slot
+#define MSG_UBL_LOAD_MESH                   _UxGT("T·∫£i l∆∞·ªõi b√†n")                         // Load Bed Mesh
+#define MSG_UBL_SAVE_MESH                   _UxGT("L∆∞u l∆∞·ªõi b√†n")                         // Save Bed Mesh
+#define MSG_MESH_LOADED                     _UxGT("%i l∆∞·ªõi ƒë∆∞·ª£c n·∫°p")                     // Mesh %i loaded
+#define MSG_MESH_SAVED                      _UxGT("%i l∆∞·ªõi ƒë√£ l∆∞u")
+#define MSG_NO_STORAGE                      _UxGT("Kh√¥ng l∆∞u tr·ªØ")                        // No Storage
+#define MSG_UBL_SAVE_ERROR                  _UxGT("ƒêi√™ÕÄu sai: L∆∞u UBL")                    // Err: UBL Save
+#define MSG_UBL_RESTORE_ERROR               _UxGT("ƒêi√™ÕÄu Sai: Kh√¥i Ph·ª•c UBL")              // Err: UBL Restore
+#define MSG_UBL_Z_OFFSET_STOPPED            _UxGT("ƒê·∫ßu D√≤-Z ƒê√£ Ng∆∞ÕÄng")                    // Z-Offset Stopped
+#define MSG_UBL_STEP_BY_STEP_MENU           _UxGT("B∆∞·ªõc-T·ª´ng-B∆∞·ªõc UBL")                   // Step-By-Step UBL
+
+#define MSG_LED_CONTROL                     _UxGT("ƒêi·ªÅu khi·ªÉn LED")                       // LED Control
+#define MSG_LEDS                            _UxGT("ƒê√®n")                                  // Lights
+#define MSG_LED_PRESETS                     _UxGT("ƒê√®n ƒë·ªãnh s·∫µn")                         // Light Presets
+#define MSG_SET_LEDS_RED                    _UxGT("ƒê·ªè")                                   // Red
+#define MSG_SET_LEDS_ORANGE                 _UxGT("Cam")                                  // Orange
+#define MSG_SET_LEDS_YELLOW                 _UxGT("V√†ng")                                 // Yellow
+#define MSG_SET_LEDS_GREEN                  _UxGT("Xanh L√°")                              // Green
+#define MSG_SET_LEDS_BLUE                   _UxGT("Xanh")                                 // Blue
+#define MSG_SET_LEDS_INDIGO                 _UxGT("Xanh ƒê·∫≠m")                             // Indigo
+#define MSG_SET_LEDS_VIOLET                 _UxGT("T√≠m")                                  // Violet
+#define MSG_SET_LEDS_WHITE                  _UxGT("Tr·∫Øng")                                // White
+#define MSG_SET_LEDS_DEFAULT                _UxGT("M·∫∑c ƒë·ªãnh")                             // Default
+#define MSG_CUSTOM_LEDS                     _UxGT("ƒê√®n T·ª± Ch·ªçn")                          // Custom Lights
+#define MSG_INTENSITY_R                     _UxGT("C∆∞·ªùng ƒê·ªô ƒê·ªè")                          // Red Intensity
+#define MSG_INTENSITY_G                     _UxGT("C∆∞·ªùng ƒê·ªô Xanh L√°")                     // Green Intensity
+#define MSG_INTENSITY_B                     _UxGT("C∆∞·ªùng ƒê·ªô Xanh")                        // Blue Intensity
+#define MSG_INTENSITY_W                     _UxGT("C∆∞·ªùng ƒê·ªô Tr·∫Øng")                       // White Intensity
+#define MSG_LED_BRIGHTNESS                  _UxGT("ƒë·ªô s√°ng")                              // Brightness
+
+#define MSG_MOVING                          _UxGT("Di chuy·ªÉn...")                         // Moving
+#define MSG_FREE_XY                         _UxGT("Gi·∫£i ph√≥ng XY")                        // Free XY
+#define MSG_MOVE_X                          _UxGT("Di chuy·ªÉn X")                          // Move X
+#define MSG_MOVE_Y                          _UxGT("Di chuy·ªÉn Y")
+#define MSG_MOVE_Z                          _UxGT("Di chuy·ªÉn Z")
+#define MSG_MOVE_E                          _UxGT("M√°y ƒë√πn")                              // Extruder
+#define MSG_HOTEND_TOO_COLD                 _UxGT("ƒê·∫ßu n√≥ng qu√° l·∫°nh")                    // Hotend too cold
+#define MSG_MOVE_01MM                       _UxGT("Di chuy·ªÉn 0.1mm")                      // Move 0.1mm
+#define MSG_MOVE_1MM                        _UxGT("Di chuy·ªÉn 1mm")                        // Move 1mm
+#define MSG_MOVE_10MM                       _UxGT("Di chuy·ªÉn 10mm")                       // Move 10mm
+#define MSG_SPEED                           _UxGT("T·ªëc ƒë·ªô")                               // Speed
+#define MSG_BED_Z                           _UxGT("Z B√†n")
+#define MSG_NOZZLE                          _UxGT("ƒê·∫ßu phun")                             // Nozzle
+#define MSG_BED                             _UxGT("B√†n")                                  // bed
+#define MSG_FAN_SPEED                       _UxGT("T·ªëc ƒë·ªô qu·∫°t")                          // fan speed
+#define MSG_EXTRA_FAN_SPEED                 _UxGT("T·ªëc ƒë·ªô qu·∫°t phuÃ£")                      // Extra fan speed
+#define MSG_FLOW                            _UxGT("L∆∞u L∆∞·ª£ng")
+#define MSG_CONTROL                         _UxGT("ƒêi·ªÅu khi·ªÉn")                           // Control
+#define MSG_MIN                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" ƒêa")   // min
+#define MSG_MAX                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" Thi·ªÉu")
+#define MSG_FACTOR                          _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" H·ªá S·ªë") // factor
+#define MSG_AUTOTEMP                        _UxGT("Nhi·ªát ƒë·ªô t·ª± ƒë·ªông")                     // Autotemp
+#define MSG_LCD_ON                          _UxGT("B·∫≠t")                                  // on
+#define MSG_LCD_OFF                         _UxGT("T·∫Øt")                                  // off
+#define MSG_PID_P                           _UxGT("PID-P")
+#define MSG_PID_I                           _UxGT("PID-I")
+#define MSG_PID_D                           _UxGT("PID-D")
+#define MSG_PID_C                           _UxGT("PID-C")
+#define MSG_SELECT                          _UxGT("L·ª±a")                                  // Select
+#define MSG_ACC                             _UxGT("TƒÉng T·ªëc")
+#define MSG_JERK                            _UxGT("Gi·∫≠t")
+#if IS_KINEMATIC
+  #define MSG_VA_JERK                       _UxGT("Gi·∫≠t-Va")
+  #define MSG_VB_JERK                       _UxGT("Gi·∫≠t-Vb")
+  #define MSG_VC_JERK                       _UxGT("Gi·∫≠t-Vc")
+#else
+  #define MSG_VA_JERK                       _UxGT("Gi·∫≠t-Vx")
+  #define MSG_VB_JERK                       _UxGT("Gi·∫≠t-Vy")
+  #define MSG_VC_JERK                       _UxGT("Gi·∫≠t-Vz")
+#endif
+#define MSG_VE_JERK                         _UxGT("Gi·∫≠t-Ve")
+#define MSG_JUNCTION_DEVIATION              _UxGT("ƒê·ªô L·ªách Ch√¥ÃÉ Giao")                    // Junction Dev
+#define MSG_VELOCITY                        _UxGT("V√¢Ã£n t√¥ÕÅc")                              // velocity
+#define MSG_VMAX                            _UxGT("Vƒëa")                                  // Vmax
+#define MSG_VMIN                            _UxGT("Vthi·ªÉu")                               // Vmin
+#define MSG_VTRAV_MIN                       _UxGT("Vchuy·ªÉn thi·ªÉu")                        // VTrav min
+#define MSG_ACCELERATION                    _UxGT("S·ª± tƒÉng t·ªëc")                          // Acceleration
+#define MSG_AMAX                            _UxGT("TƒÉng t·ªëc ca")                          // Amax
+#define MSG_A_RETRACT                       _UxGT("TT-R√∫t")                               // A-retract
+#define MSG_A_TRAVEL                        _UxGT("TT-Chuy·ªÉn")                            // A-travel
+#define MSG_STEPS_PER_MM                    _UxGT("B∆∞∆°ÕÅc/mm")                              // Steps
+#if IS_KINEMATIC
+  #define MSG_ASTEPS                        _UxGT("B∆∞·ªõcA/mm")                             // Asteps/mm
+  #define MSG_BSTEPS                        _UxGT("B∆∞·ªõcB/mm")
+  #define MSG_CSTEPS                        _UxGT("B∆∞·ªõcC/mm")
+#else
+  #define MSG_ASTEPS                        _UxGT("B∆∞·ªõcX/mm")                             // Xsteps/mm
+  #define MSG_BSTEPS                        _UxGT("B∆∞·ªõcY/mm")
+  #define MSG_CSTEPS                        _UxGT("B∆∞·ªõcZ/mm")
+#endif
+#define MSG_ESTEPS                          _UxGT("B∆∞·ªõcE/mm")
+#define MSG_E1STEPS                         _UxGT("B∆∞·ªõcE1/mm")
+#define MSG_E2STEPS                         _UxGT("B∆∞·ªõcE2/mm")
+#define MSG_E3STEPS                         _UxGT("B∆∞·ªõcE3/mm")
+#define MSG_E4STEPS                         _UxGT("B∆∞·ªõcE4/mm")
+#define MSG_E5STEPS                         _UxGT("B∆∞·ªõcE5/mm")
+#define MSG_E6STEPS                         _UxGT("B∆∞·ªõcE6/mm")
+#define MSG_TEMPERATURE                     _UxGT("Nhi·ªát ƒë·ªô")                             // Temperature
+#define MSG_MOTION                          _UxGT("Chuy·ªÉn ƒë·ªông")                          // Motion
+#define MSG_FILAMENT                        _UxGT("V·∫≠t li·ªáu in")                          // d√¢y nh·ª±a
+#define MSG_VOLUMETRIC_ENABLED              _UxGT("E b·∫±ng mm") MSG_CUBED                  // E in mm
+#define MSG_FILAMENT_DIAM                   _UxGT("ƒê∆∞·ªùng k√≠nh nh·ª±a")                      // Fil. Dai.
+#define MSG_FILAMENT_UNLOAD                 _UxGT("D·ª° mm")                                // unload mm
+#define MSG_FILAMENT_LOAD                   _UxGT("N·∫°p mm")
+#define MSG_ADVANCE_K                       _UxGT("K C·∫•p Cao")                            // Advance K
+#define MSG_CONTRAST                        _UxGT("ƒê·ªô t∆∞∆°ng ph·∫£n LCD")                    // LCD contrast
+#define MSG_STORE_EEPROM                    _UxGT("L∆∞u c√°c thi·∫øt l·∫≠p")                    // Store settings
+#define MSG_LOAD_EEPROM                     _UxGT("T·∫£i c√°c c√†i ƒë·∫∑t")                      // Load settings
+#define MSG_RESTORE_FAILSAFE                _UxGT("Kh√¥i ph·ª•c ph√≤ng h∆∞")                   // Restore failsafe
+#define MSG_INIT_EEPROM                     _UxGT("Kh·ªüi T·∫°o EEPROM")                      // Initialize EEPROM
+#define MSG_SD_UPDATE                       _UxGT("C·∫≠p Nh·∫≠t SD")                          // SD Update
+#define MSG_RESET_PRINTER                   _UxGT("B·∫∑t L·∫°i M√°y In")
+#define MSG_REFRESH                         _UxGT("C·∫≠p Nh·∫≠t")                             // Refresh
+#define MSG_WATCH                           _UxGT("M√†n H√¨nh Th√¥ng Tin")                   // Info screen
+#define MSG_PREPARE                         _UxGT("Chu·∫©n b·ªã")                             // Prepare
+#define MSG_TUNE                            _UxGT("ƒêi·ªÅu Ch·ªânh")                           // Tune
+#define MSG_PAUSE_PRINT                     _UxGT("T·∫°m d·ª´ng in")                          // Pause print
+#define MSG_RESUME_PRINT                    _UxGT("Ti·∫øp t·ª•c in")                          // Resume print
+#define MSG_STOP_PRINT                      _UxGT("Ng∆∞ÕÄng in")                             // Stop print
+#define MSG_OUTAGE_RECOVERY                 _UxGT("Ph·ª•c H·ªìi M·∫•t ƒêi·ªán")                    // Outage Recovery
+#define MSG_CARD_MENU                       _UxGT("In t·ª´ SD")                             // Print from SD
+#define MSG_NO_CARD                         _UxGT("Kh√¥ng c√≥ th·∫ª SD")                      // No SD card
+#define MSG_DWELL                           _UxGT("Ng·ªß...")                               // Sleep
+#define MSG_USERWAIT                        _UxGT("Nh·∫•n ƒë·ªÉ ti·∫øp t·ª•c...")                  // Click to resume (same as 'continue')
+#define MSG_PRINT_PAUSED                    _UxGT("In t·∫°m d·ª´ng")                          // print paused
+#define MSG_PRINTING                        _UxGT("ƒêang in...")                           // printing
+#define MSG_PRINT_ABORTED                   _UxGT("In ƒë√£ h·ªßy b·ªè")                         // Print aborted
+#define MSG_NO_MOVE                         _UxGT("Kh√¥ng di chuy·ªÉn.")                     // No move.
+#define MSG_KILLED                          _UxGT("ƒê√É CH√äÕÅT. ")
+#define MSG_STOPPED                         _UxGT("ƒê√É NG∆ØÕÄNG. ")
+#define MSG_CONTROL_RETRACT                 _UxGT("R√∫t mm")                               // Retract mm
+#define MSG_CONTROL_RETRACT_SWAP            _UxGT("R√∫t Trao.mm")                          // Swap Re.mm
+#define MSG_CONTROL_RETRACTF                _UxGT("R√∫t V")
+#define MSG_CONTROL_RETRACT_ZHOP            _UxGT("Nh·∫£y mm")                              // hop
+#define MSG_CONTROL_RETRACT_RECOVER         _UxGT("B·ªèR√∫t mm")                             // UnRet mm
+#define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("B·ªèR√∫t T mm")                           // S UnRet mm
+#define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("B·ªèR√∫t V")                              // UnRet V
+#define MSG_CONTROL_RETRACT_RECOVER_SWAPF   _UxGT("B·ªèR√∫t T V")                            // S UnRet V
+#define MSG_AUTORETRACT                     _UxGT("R√∫tT·ª±ƒê·ªông")                            // AutoRetr.
+#define MSG_FILAMENT_SWAP_LENGTH            _UxGT("Kho·∫£ng C√°ch R√∫t")                      // Retract Distance
+#define MSG_TOOL_CHANGE                     _UxGT("Thay ƒê·ªïi C√¥ng C·ª•")                     // Tool Change
+#define MSG_TOOL_CHANGE_ZLIFT               _UxGT("ƒê∆∞a L√™n Z")                            // Z Raise
+#define MSG_SINGLENOZZLE_PRIME_SPD          _UxGT("T·ªëc ƒê·ªô Tu√¥n Ra")                       // Prime Speed
+#define MSG_SINGLENOZZLE_RETRACT_SPD        _UxGT("T·ªëc ƒê·ªô R√∫t L·∫°i")                       // Retract Speed
+#define MSG_FILAMENTCHANGE                  _UxGT("Thay d√¢y nh·ª±a")                        // change filament
+#define MSG_FILAMENTLOAD                    _UxGT("N·∫°p d√¢y nh·ª±a")                         // load filament
+#define MSG_FILAMENTUNLOAD                  _UxGT("D·ª° d√¢y nh·ª±a")                          // unload filament
+#define MSG_FILAMENTUNLOAD_ALL              _UxGT("D·ª° t·∫•t c·∫£")                            // Unload All
+#define MSG_INIT_SDCARD                     _UxGT("Kh·ªüi t·∫°o th·∫ª SD ")                     // Init. SD card
+#define MSG_CHANGE_SDCARD                   _UxGT("Thay th·∫ª SD")                          // Change SD card
+#define MSG_ZPROBE_OUT                      _UxGT("ƒê·∫ßu D√≤ Z qua b√†n")                     // Z Probe past bed
+#define MSG_SKEW_FACTOR                     _UxGT("H·ªá s·ªë nghi√™ng")                        // Skew Factor
+#define MSG_BLTOUCH                         _UxGT("BLTOUCH")                              // BLTouch
+#define MSG_BLTOUCH_SELFTEST                _UxGT("T·ª± ki·ªÉm tra BLTOUCH ")                 // BLTouch Self-Test
+#define MSG_BLTOUCH_RESET                   _UxGT("B·∫∑t l·∫°i BLTouch")                      // Reset BLTouch
+#define MSG_BLTOUCH_DEPLOY                  _UxGT("ƒêem BLTouch")                          // Deploy BLTouch
+#define MSG_BLTOUCH_STOW                    _UxGT("C·∫•t BLTouch")                          // Stow BLTouch
+#define MSG_MANUAL_DEPLOY                   _UxGT("ƒêem ƒê·∫ßu D√≤-Z")                         // Deploy Z-Probe
+#define MSG_MANUAL_STOW                     _UxGT("C·∫•t ƒê·∫ßu D√≤-Z")                         // Stow Z-Probe
+#define MSG_HOME                            _UxGT("V·ªÅ nh√†") // Used as MSG_HOME " " MSG_X MSG_Y MSG_Z " " MSG_FIRST
+#define MSG_FIRST                           _UxGT("Tr∆∞∆°ÕÅc")
+#define MSG_ZPROBE_ZOFFSET                  _UxGT("ƒê·∫ßu D√≤ B√π ƒê·∫Øp Z")                      // Probe Z Offset
+#define MSG_BABYSTEP_X                      _UxGT("Nh√≠t X")                               // Babystep X
+#define MSG_BABYSTEP_Y                      _UxGT("Nh√≠t Y")
+#define MSG_BABYSTEP_Z                      _UxGT("Nh√≠t Z")
+#define MSG_ENDSTOP_ABORT                   _UxGT("H·ªßy b·ªè c√¥ng t·∫Øc")                      // Endstop abort
+#define MSG_HEATING_FAILED_LCD              _UxGT("S∆∞·ªüi ƒë·∫ßu phun kh√¥ng th√†nh c√¥ng")       // Heating failed
+#define MSG_HEATING_FAILED_LCD_BED          _UxGT("S∆∞·ªüi b√†n kh√¥ng th√†nh c√¥ng")            // Bed heating failed
+#define MSG_ERR_REDUNDANT_TEMP              _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô d∆∞")                // Err: REDUNDANT TEMP
+#define MSG_THERMAL_RUNAWAY                 _UxGT("V·∫•n ƒë·ªÅ nhi·ªát")                         // THERMAL RUNAWAY | problem
+#define MSG_THERMAL_RUNAWAY_BED             _UxGT("V·∫•n ƒë·ªÅ nhi·ªát b√†n")                     // BED THERMAL RUNAWAY
+#define MSG_ERR_MAXTEMP                     _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi ƒëa")            // Err: MAXTEMP
+#define MSG_ERR_MINTEMP                     _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô t·ªëi thi·ªÉu")         // Err: MINTEMP
+#define MSG_ERR_MAXTEMP_BED                 _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô b√†n t·ªëi ƒëa")        // Err: MAXTEMP BED
+#define MSG_ERR_MINTEMP_BED                 _UxGT("ƒêi√™ÕÄu sai: nhi·ªát ƒë·ªô b√†n t·ªëi thi·ªÉu")     // Err: MINTEMP BED
+#define MSG_ERR_Z_HOMING                    MSG_HOME _UxGT(" ") MSG_X MSG_Y _UxGT(" ") MSG_FIRST
+#define MSG_HALTED                          _UxGT("M√ÅY IN ƒê√É D∆ØÕÄNG LAÃ£I")                   // PRINTER HALTED
+#define MSG_PLEASE_RESET                    _UxGT("Xin b·∫∑t l·∫°i")                          // Please reset
+#define MSG_SHORT_DAY                       _UxGT("n")                                    // d - ng√†y - One character only
+#define MSG_SHORT_HOUR                      _UxGT("g")                                    // h - gi·ªù  - One character only
+#define MSG_SHORT_MINUTE                    _UxGT("p")                                    // m - ph√∫t - One character only
+#define MSG_HEATING                         _UxGT("ƒêang s∆∞·ªüi noÕÅng...")                    // heating
+#define MSG_COOLING                         _UxGT("ƒêang laÕÄm ngu√¥Ã£i...")                    // cooling
+#define MSG_BED_HEATING                     _UxGT("ƒêang s∆∞·ªüi nong b√†n...")                // bed heating
+#define MSG_BED_COOLING                     _UxGT("ƒêang laÕÄm ngu√¥Ã£i b√†n...")                // bed cooling
+#define MSG_DELTA_CALIBRATE                 _UxGT("C√¢n Ch·ªânh Delta")                      // Delta calibration
+#define MSG_DELTA_CALIBRATE_X               _UxGT("Ch·ªânh X l·∫°i")
+#define MSG_DELTA_CALIBRATE_Y               _UxGT("Ch·ªânh Y l·∫°i")
+#define MSG_DELTA_CALIBRATE_Z               _UxGT("Ch·ªânh Z l·∫°i")
+#define MSG_DELTA_CALIBRATE_CENTER          _UxGT("Ch·ªânh Z Center")                       // Calibrate Center
+#define MSG_DELTA_SETTINGS                  _UxGT("C√†i ƒê·∫∑t Delta")                        // Delta Settings
+#define MSG_DELTA_AUTO_CALIBRATE            _UxGT("C√¢n Ch·ªânh T·ª± ƒê·ªông")                    // Auto Calibration
+#define MSG_DELTA_HEIGHT_CALIBRATE          _UxGT("ƒê·∫∑t Chi·ªÅu Cao Delta")                  // Set Delta Height
+#define MSG_DELTA_Z_OFFSET_CALIBRATE        _UxGT("ƒê·∫ßu D√≤ Z-B√π ƒê·∫Øp")                      // Probe Z-offset
+#define MSG_DELTA_DIAG_ROD                  _UxGT("G·∫≠y Ch√©o")                             // Diag Rod
+#define MSG_DELTA_HEIGHT                    _UxGT("Chi·ªÅu Cao")                            // Height
+#define MSG_DELTA_RADIUS                    _UxGT("B√°n K√≠nh")                             // Radius
+#define MSG_INFO_MENU                       _UxGT("V·ªÅ M√°y In")
+#define MSG_INFO_PRINTER_MENU               _UxGT("Th√¥ng Tin M√°y In")                     // Printer Info
+#define MSG_3POINT_LEVELING                 _UxGT("San l·∫•p 3-ƒêi·ªÉm")                       // 3-Point Leveling
+#define MSG_LINEAR_LEVELING                 _UxGT("San L·∫•p Tuy·∫øn T√≠nh")                   // Linear Leveling
+#define MSG_BILINEAR_LEVELING               _UxGT("San L·∫•p Song Tuy·∫øn")                   // Bilinear Leveling
+#define MSG_UBL_LEVELING                    _UxGT("San L·∫•p B√†n Th·ªëng Nh·∫•t")               // Unified Bed Leveling
+#define MSG_MESH_LEVELING                   _UxGT("L∆∞·ªõi San L·∫•p")                         // Mesh Leveling
+#define MSG_INFO_STATS_MENU                 _UxGT("Th·ªëng K√™ M√°y In")                      // Printer Stats
+#define MSG_INFO_BOARD_MENU                 _UxGT("Th√¥ng Tin Bo M·∫°ch")                    // Board Info
+#define MSG_INFO_THERMISTOR_MENU            _UxGT("ƒêi·ªán Tr·ªü Nhi·ªát")                       // Thermistors
+#define MSG_INFO_EXTRUDERS                  _UxGT("M√°y ƒë√πn")                              // Extruders
+#define MSG_INFO_BAUDRATE                   _UxGT("Baud")                                 // Baud
+#define MSG_INFO_PROTOCOL                   _UxGT("Giao Th·ª©c")                            // Protocol
+#define MSG_CASE_LIGHT                      _UxGT("ƒê√®n Khu√¥ng")                           // Case light
+#define MSG_CASE_LIGHT_BRIGHTNESS           _UxGT("ƒê·ªô S√°ng")                              // Light Brightness
+#if LCD_WIDTH >= 20
+  #define MSG_INFO_PRINT_COUNT              _UxGT("S·ªë In")                                // Print Count
+  #define MSG_INFO_COMPLETED_PRINTS         _UxGT("ƒê√£ ho√†n th√†nh")
+  #define MSG_INFO_PRINT_TIME               _UxGT("T√¥Ãâng s·ªë th·ªùi gian in")                // Total print time
+  #define MSG_INFO_PRINT_LONGEST            _UxGT("Th·ªùi gian vi·ªác l√¢u nh·∫•t")              // Longest job time
+  #define MSG_INFO_PRINT_FILAMENT           _UxGT("T·ªïng s·ªë ƒë√πn")                          // Extruded total
+#else
+  #define MSG_INFO_PRINT_COUNT              _UxGT("In")                                   // prints
+  #define MSG_INFO_COMPLETED_PRINTS         _UxGT("ƒê√£ ho√†n th√†nh")                        // Completed
+  #define MSG_INFO_PRINT_TIME               _UxGT("T√¥Ãâng s·ªë")                             // total
+  #define MSG_INFO_PRINT_LONGEST            _UxGT("D√†i nh·∫•t")                             // Longest
+  #define MSG_INFO_PRINT_FILAMENT           _UxGT("ƒê√£ √©p ƒë√πn")
+#endif
+#define MSG_INFO_MIN_TEMP                   _UxGT("Nhi·ªát ƒë·ªô t·ªëi thi·ªÉu")                   // Min Temp
+#define MSG_INFO_MAX_TEMP                   _UxGT("Nhi·ªát ƒë·ªô t·ªëi ƒëa")                      // Max temp
+#define MSG_INFO_PSU                        _UxGT("B·ªô ngu·ªìn")                             // PSU
+#define MSG_DRIVE_STRENGTH                  _UxGT("S·ª©c m·∫°nh ·ªï ƒëƒ©a")                       // Drive Strength
+#define MSG_DAC_PERCENT                     _UxGT("% tr√¨nh ƒëi·ªÅu khi·ªÉn")                   // Driver %
+#define MSG_DAC_EEPROM_WRITE                _UxGT("Ghi DAC EEPROM")                       // DAC EEPROM Write
+#define MSG_FILAMENT_CHANGE_HEADER_PAUSE    _UxGT("In t·∫°m d·ª´ng")                          // PRINT PAUSED
+#define MSG_FILAMENT_CHANGE_HEADER_LOAD     _UxGT("N·∫°p d√¢y nh·ª±a")
+#define MSG_FILAMENT_CHANGE_HEADER_UNLOAD   _UxGT("D·ª° d√¢y nh·ª±a")                          // unload filament
+#define MSG_FILAMENT_CHANGE_OPTION_HEADER   _UxGT("T√πy ch·ªçn h√¥ÕÄi phuÃ£c:")                   // RESUME OPTIONS
+#define MSG_FILAMENT_CHANGE_OPTION_PURGE    _UxGT("X·∫£ th√™m")                              // Purge more
+#define MSG_FILAMENT_CHANGE_OPTION_RESUME   _UxGT("Ti·∫øp t·ª•c")                             // continue
+#define MSG_FILAMENT_CHANGE_NOZZLE          _UxGT("  ƒê·∫ßu Phun: ")                         // Nozzle
+#define MSG_RUNOUT_SENSOR_ENABLE            _UxGT("C·∫£m Bi·∫øn H·∫øt")                         // Runout Sensor
+#define MSG_ERR_HOMING_FAILED               _UxGT("S∆∞Ã£ nh√† kh√¥ng th√†nh c√¥ng")              // Homing failed
+#define MSG_ERR_PROBING_FAILED              _UxGT(" kh√¥ng th√†nh c√¥ng")                    // Probing failed
+#define MSG_M600_TOO_COLD                   _UxGT("M600: Qu√° l·∫°nh")
+
+//
+// Filament Change screens show up to 3 lines on a 4-line display
+//                        ...or up to 2 lines on a 3-line display
+//
+#if LCD_HEIGHT >= 4
+  #define MSG_ADVANCED_PAUSE_WAITING_1      _UxGT("Nh·∫•n n√∫t")                             // Press button
+  #define MSG_ADVANCED_PAUSE_WAITING_2      _UxGT("ƒë·ªÉ ti·∫øp t·ª•c in")                       // to resume print
+  #define MSG_FILAMENT_CHANGE_INIT_1        _UxGT("Ch·ªù cho s∆∞Ã£")                           // wait for
+  #define MSG_FILAMENT_CHANGE_INIT_2        _UxGT("thay ƒë·ªïi d√¢y nh·ª±a")                    // filament change
+  #define MSG_FILAMENT_CHANGE_INIT_3        _UxGT("bƒÉÕÅt ƒë√¢ÕÄu")                              // to start
+  #define MSG_FILAMENT_CHANGE_INSERT_1      _UxGT("ƒêuÕÅt d√¢y nh·ª±a vaÕÄo")                     // insert filament
+  #define MSG_FILAMENT_CHANGE_INSERT_2      _UxGT("v√† nh·∫•n n√∫t")                          // and press button
+  #define MSG_FILAMENT_CHANGE_INSERT_3      _UxGT("ƒë·ªÉ ti·∫øp t·ª•c")                          // to continue
+  #define MSG_FILAMENT_CHANGE_HEAT_1        _UxGT("Nh·∫•n n√∫t")                             // Press button
+  #define MSG_FILAMENT_CHANGE_HEAT_2        _UxGT("ƒë·ªÉ l√†m n√≥ng ƒë·∫ßu phun")                 // to heat nozzle
+  #define MSG_FILAMENT_CHANGE_HEATING_1     _UxGT("ƒê·∫ßu phun ƒëang n√≥ng l√™n")               // Nozzle heating
+  #define MSG_FILAMENT_CHANGE_HEATING_2     _UxGT("Xin ch·ªù...")                           // Please wait
+  #define MSG_FILAMENT_CHANGE_UNLOAD_1      _UxGT("Ch·ªù tro")                              // Wait for
+  #define MSG_FILAMENT_CHANGE_UNLOAD_2      _UxGT("d√¢y nh·ª±a ra")                          // filament unload
+  #define MSG_FILAMENT_CHANGE_LOAD_1        _UxGT("Ch·ªù tro")
+  #define MSG_FILAMENT_CHANGE_LOAD_2        _UxGT("d√¢y nh·ª±a vaÕÄo")
+  #define MSG_FILAMENT_CHANGE_PURGE_1       _UxGT("Ch·ªù tro")                              // wait for filament purge
+  #define MSG_FILAMENT_CHANGE_PURGE_2       _UxGT("x·∫£ d√¢y nh·ª±a")
+  #define MSG_FILAMENT_CHANGE_CONT_PURGE_1  _UxGT("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c")                 // Click to finish
+  #define MSG_FILAMENT_CHANGE_CONT_PURGE_2  _UxGT("x·∫£ d√¢y nh·ª±a")                          // d√¢y nh·ª±a purge
+  #define MSG_FILAMENT_CHANGE_RESUME_1      _UxGT("Ch·ªù tro in")                           // Wait for print to resume
+  #define MSG_FILAMENT_CHANGE_RESUME_2      _UxGT("ti·∫øp t·ª•c...")
+#else // LCD_HEIGHT < 4
+  #define MSG_ADVANCED_PAUSE_WAITING_1      _UxGT("Nh·∫•n n√∫t ƒë·ªÉ ti·∫øp t·ª•c")                 // Click to continue
+  #define MSG_FILAMENT_CHANGE_INIT_1        _UxGT("Xin ch·ªù...")
+  #define MSG_FILAMENT_CHANGE_INSERT_1      _UxGT("Ch√®n v√† nh·∫•n")                         // Insert and Click
+  #define MSG_FILAMENT_CHANGE_HEAT_1        _UxGT("Nh·∫•n ƒë·ªÉ s∆∞·ªüi")                         // Click to heat
+  #define MSG_FILAMENT_CHANGE_HEATING_1     _UxGT("ƒêang s∆∞·ªüi n√≥ng")                       // Heating
+  #define MSG_FILAMENT_CHANGE_UNLOAD_1      _UxGT("ƒêang d·ª° ra...")                        // Ejecting
+  #define MSG_FILAMENT_CHANGE_LOAD_1        _UxGT("ƒêang n·∫°p...")                          // Loading
+  #define MSG_FILAMENT_CHANGE_PURGE_1       _UxGT("ƒêang x·∫£...")                           // Purging
+  #define MSG_FILAMENT_CHANGE_CONT_PURGE_1  _UxGT("Nh·∫•n n√∫t ƒë·ªÉ k·∫øt th√∫c")                 // Click to finish
+  #define MSG_FILAMENT_CHANGE_RESUME_1      _UxGT("ƒêang ti·∫øp t·ª•c...")                     // Resuming
+#endif // LCD_HEIGHT < 4
+
+#define MSG_TMC_DRIVERS                     _UxGT("Tr√¨nh ƒëi·ªÅu khi·ªÉn TMC")                 // TMC drivers
+#define MSG_TMC_CURRENT                     _UxGT("D√≤ng ƒëi·ªán tr√¨nh ƒëi·ªÅu khi·ªÉn")           // Driver current
+#define MSG_TMC_HYBRID_THRS                 _UxGT("Ng∆∞·ª°ng H·ªón H·ª£p")                       // Hybrid threshold
+#define MSG_TMC_HOMING_THRS                 _UxGT("V√¥ c·∫£m bi·∫øn")                          // Sensorless homing
+#define MSG_TMC_STEPPING_MODE               _UxGT("Ch·∫ø ƒë·ªô t·ª´ng b∆∞·ªõc")                     // Stepping mode
+#define MSG_TMC_STEALTH_ENABLED             _UxGT("C·∫ØtT√†ngH√¨nh ƒë∆∞·ª£c k√≠ch ho·∫°t")           // StealthChop enabled
