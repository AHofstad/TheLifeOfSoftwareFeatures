commit 5639237e2b174715413f9ffc6f6421db9150d9d6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jan 29 20:38:03 2024 -0600

    üé® Misc. cleanup 29-01

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 8908ae6df5..681df2f081 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -38,7 +38,6 @@
 #define PCT_TO_PWM(X) ((X) * 255 / 100)
 #define PCT_TO_SERVO(X) ((X) * 180 / 100)
 
-
 // Laser/Cutter operation mode
 enum CutterMode : int8_t {
   CUTTER_MODE_ERROR = -1,

commit ace9855d6fe4fc956c1c3ad584ca07e25216376b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 16 19:11:56 2023 -0500

    üßë‚Äçüíª Minor SpindleLaser::set_enabled tweak

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 5cbc20866c..8908ae6df5 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -201,8 +201,6 @@ public:
         apply_power(enable ? TERN(SPINDLE_LASER_USE_PWM, (power ?: (unitPower ? upower_to_ocr(cpwr_to_upwr(SPEED_POWER_STARTUP)) : 0)), 255) : 0);
         break;
       case CUTTER_MODE_CONTINUOUS:
-        TERN_(LASER_FEATURE, set_inline_enabled(enable));
-        break;
       case CUTTER_MODE_DYNAMIC:
         TERN_(LASER_FEATURE, set_inline_enabled(enable));
         break;

commit 09ddf9c6ef9708baf42c3145332b2921e75f8d73
Author: Alexey D. Filimonov <alexey@filimonic.net>
Date:   Mon Apr 17 02:38:12 2023 +0300

    ü©π Fix Spindle/Laser ENA pin test (#25622)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 9750d4807f..5cbc20866c 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -210,7 +210,7 @@ public:
         enable = false;
         apply_power(0);
     }
-    #if SPINDLE_LASER_ENA_PIN
+    #if PIN_EXISTS(SPINDLE_LASER_ENA)
       WRITE(SPINDLE_LASER_ENA_PIN, enable ? SPINDLE_LASER_ACTIVE_STATE : !SPINDLE_LASER_ACTIVE_STATE);
     #endif
     enable_state = enable;

commit 802fe519a310e94c7658d7c60deffd240770565b
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Sun Apr 16 18:35:13 2023 -0500

    ü©π Fix laser with no PWM compile (#25290)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index a49e5611a4..9750d4807f 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -281,7 +281,7 @@ public:
         set_enabled(state);
         if (state) {
           if (!menuPower) menuPower = cpwr_to_upwr(SPEED_POWER_STARTUP);
-          power = upower_to_ocr(menuPower);
+          power = TERN(SPINDLE_LASER_USE_PWM, upower_to_ocr(menuPower), 255);
           apply_power(power);
         } else
           apply_power(0);

commit 15992f6426e017760502a0e96774d3521113f65d
Author: Ruedi Steinmann <ruediste@gmail.com>
Date:   Fri Sep 9 22:33:54 2022 +0200

    ü©π Fix a BUZZ (#24740)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 0a99585bc0..a49e5611a4 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -30,9 +30,7 @@
 
 #include "spindle_laser_types.h"
 
-#if HAS_BEEPER
-  #include "../libs/buzzer.h"
-#endif
+#include "../libs/buzzer.h"
 
 // Inline laser power
 #include "../module/planner.h"

commit 306e03b03b1a51dd11b6d70ffcbfab099655e68a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Aug 19 11:00:52 2022 -0500

    üßë‚Äçüíª Use spaces indent for Python

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index b667da25bb..0a99585bc0 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -285,7 +285,7 @@ public:
           if (!menuPower) menuPower = cpwr_to_upwr(SPEED_POWER_STARTUP);
           power = upower_to_ocr(menuPower);
           apply_power(power);
-        } else 
+        } else
           apply_power(0);
       }
 

commit e5f2daa0010f8dffe0eadabccdaad6c5b63e31eb
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Mon Aug 1 01:03:45 2022 -0500

    üêõ Fix laser menu enable_state (#24557)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 8c73394c9b..b667da25bb 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -197,7 +197,7 @@ public:
    *  - For CUTTER_MODE_ERROR set the output enable_state flag directly and set power to 0 for any mode.
    *    This mode allows a global power shutdown action to occur.
    */
-  static void set_enabled(const bool enable) {
+  static void set_enabled(bool enable) {
     switch (cutter_mode) {
       case CUTTER_MODE_STANDARD:
         apply_power(enable ? TERN(SPINDLE_LASER_USE_PWM, (power ?: (unitPower ? upower_to_ocr(cpwr_to_upwr(SPEED_POWER_STARTUP)) : 0)), 255) : 0);
@@ -209,7 +209,7 @@ public:
         TERN_(LASER_FEATURE, set_inline_enabled(enable));
         break;
       case CUTTER_MODE_ERROR: // Error mode, no enable and kill power.
-        enable_state = false;
+        enable = false;
         apply_power(0);
     }
     #if SPINDLE_LASER_ENA_PIN
@@ -279,13 +279,14 @@ public:
 
     #if ENABLED(LASER_FEATURE)
       // Toggle the laser on/off with menuPower. Apply SPEED_POWER_STARTUP if it was 0 on entry.
-      static void laser_menu_toggle(const bool state) {
+      static void menu_set_enabled(const bool state) {
         set_enabled(state);
         if (state) {
           if (!menuPower) menuPower = cpwr_to_upwr(SPEED_POWER_STARTUP);
           power = upower_to_ocr(menuPower);
           apply_power(power);
-        }
+        } else 
+          apply_power(0);
       }
 
       /**
@@ -295,10 +296,10 @@ public:
        */
       static void test_fire_pulse() {
         BUZZ(30, 3000);
-        cutter_mode = CUTTER_MODE_STANDARD;// Menu needs standard mode.
-        laser_menu_toggle(true);           // Laser On
-        delay(testPulse);                  // Delay for time set by user in pulse ms menu screen.
-        laser_menu_toggle(false);          // Laser Off
+        cutter_mode = CUTTER_MODE_STANDARD; // Menu needs standard mode.
+        menu_set_enabled(true);             // Laser On
+        delay(testPulse);                   // Delay for time set by user in pulse ms menu screen.
+        menu_set_enabled(false);            // Laser Off
       }
     #endif // LASER_FEATURE
 
@@ -308,14 +309,14 @@ public:
 
     // Dynamic mode rate calculation
     static uint8_t calc_dynamic_power() {
-      if (feedrate_mm_m > 65535) return 255;         // Too fast, go always on
-      uint16_t rate = uint16_t(feedrate_mm_m);       // 16 bits from the G-code parser float input
-      rate >>= 8;                                    // Take the G-code input e.g. F40000 and shift off the lower bits to get an OCR value from 1-255
+      if (feedrate_mm_m > 65535) return 255;    // Too fast, go always on
+      uint16_t rate = uint16_t(feedrate_mm_m);  // 16 bits from the G-code parser float input
+      rate >>= 8;                               // Take the G-code input e.g. F40000 and shift off the lower bits to get an OCR value from 1-255
       return uint8_t(rate);
     }
 
     // Inline modes of all other functions; all enable planner inline power control
-    static void set_inline_enabled(const bool enable) { planner.laser_inline.status.isEnabled = enable;}
+    static void set_inline_enabled(const bool enable) { planner.laser_inline.status.isEnabled = enable; }
 
     // Set the power for subsequent movement blocks
     static void inline_power(const cutter_power_t cpwr) {

commit 5f2908a117ab45cf9e5a03a39e499979a40bf0f3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 18 19:53:36 2022 -0500

    ‚ôªÔ∏è Small sound / buzz refactor (#24520)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index b945032d8e..8c73394c9b 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -294,7 +294,7 @@ public:
        * If not set defaults to 80% power
        */
       static void test_fire_pulse() {
-        TERN_(HAS_BEEPER, buzzer.tone(30, 3000));
+        BUZZ(30, 3000);
         cutter_mode = CUTTER_MODE_STANDARD;// Menu needs standard mode.
         laser_menu_toggle(true);           // Laser On
         delay(testPulse);                  // Delay for time set by user in pulse ms menu screen.

commit 6a67ad4e4aacf7e7314f9e15fd8fe8489b73742b
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Wed Jul 6 07:46:39 2022 -0500

    ‚ö°Ô∏è Fix and improve Inline Laser Power (#22690)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 808fa634e1..b945032d8e 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -34,85 +34,98 @@
   #include "../libs/buzzer.h"
 #endif
 
-#if ENABLED(LASER_POWER_INLINE)
-  #include "../module/planner.h"
-#endif
+// Inline laser power
+#include "../module/planner.h"
 
 #define PCT_TO_PWM(X) ((X) * 255 / 100)
 #define PCT_TO_SERVO(X) ((X) * 180 / 100)
 
+
+// Laser/Cutter operation mode
+enum CutterMode : int8_t {
+  CUTTER_MODE_ERROR = -1,
+  CUTTER_MODE_STANDARD,     // M3 power is applied directly and waits for planner moves to sync.
+  CUTTER_MODE_CONTINUOUS,   // M3 or G1/2/3 move power is controlled within planner blocks, set with 'M3 I', cleared with 'M5 I'.
+  CUTTER_MODE_DYNAMIC       // M4 laser power is proportional to the feed rate, set with 'M4 I', cleared with 'M5 I'.
+};
+
 class SpindleLaser {
 public:
-  static const inline uint8_t pct_to_ocr(const_float_t pct) { return uint8_t(PCT_TO_PWM(pct)); }
+  static CutterMode cutter_mode;
 
-  // cpower = configured values (e.g., SPEED_POWER_MAX)
+  static constexpr uint8_t pct_to_ocr(const_float_t pct) { return uint8_t(PCT_TO_PWM(pct)); }
 
+  // cpower = configured values (e.g., SPEED_POWER_MAX)
   // Convert configured power range to a percentage
-  static const inline uint8_t cpwr_to_pct(const cutter_cpower_t cpwr) {
-    constexpr cutter_cpower_t power_floor = TERN(CUTTER_POWER_RELATIVE, SPEED_POWER_MIN, 0),
-                              power_range = SPEED_POWER_MAX - power_floor;
-    return cpwr ? round(100.0f * (cpwr - power_floor) / power_range) : 0;
+  static constexpr cutter_cpower_t power_floor = TERN(CUTTER_POWER_RELATIVE, SPEED_POWER_MIN, 0);
+  static constexpr uint8_t cpwr_to_pct(const cutter_cpower_t cpwr) {
+    return cpwr ? round(100.0f * (cpwr - power_floor) / (SPEED_POWER_MAX - power_floor)) : 0;
   }
 
-  // Convert a cpower (e.g., SPEED_POWER_STARTUP) to unit power (upwr, upower),
-  // which can be PWM, Percent, Servo angle, or RPM (rel/abs).
-  static const inline cutter_power_t cpwr_to_upwr(const cutter_cpower_t cpwr) { // STARTUP power to Unit power
-    const cutter_power_t upwr = (
+  // Convert config defines from RPM to %, angle or PWM when in Spindle mode
+  // and convert from PERCENT to PWM when in Laser mode
+  static constexpr cutter_power_t cpwr_to_upwr(const cutter_cpower_t cpwr) { // STARTUP power to Unit power
+    return (
       #if ENABLED(SPINDLE_FEATURE)
-        // Spindle configured values are in RPM
+        // Spindle configured define values are in RPM
         #if CUTTER_UNIT_IS(RPM)
-          cpwr                            // to RPM
-        #elif CUTTER_UNIT_IS(PERCENT)     // to PCT
-          cpwr_to_pct(cpwr)
-        #elif CUTTER_UNIT_IS(SERVO)       // to SERVO angle
-          PCT_TO_SERVO(cpwr_to_pct(cpwr))
-        #else                             // to PWM
-          PCT_TO_PWM(cpwr_to_pct(cpwr))
+          cpwr                            // to same
+        #elif CUTTER_UNIT_IS(PERCENT)
+          cpwr_to_pct(cpwr)               // to Percent
+        #elif CUTTER_UNIT_IS(SERVO)
+          PCT_TO_SERVO(cpwr_to_pct(cpwr)) // to SERVO angle
+        #else
+          PCT_TO_PWM(cpwr_to_pct(cpwr))   // to PWM
         #endif
       #else
-        // Laser configured values are in PCT
+        // Laser configured define values are in Percent
         #if CUTTER_UNIT_IS(PWM255)
-          PCT_TO_PWM(cpwr)
+          PCT_TO_PWM(cpwr)                // to PWM
         #else
-          cpwr                            // to RPM/PCT
+          cpwr                            // to same
         #endif
       #endif
     );
-    return upwr;
   }
 
-  static const cutter_power_t mpower_min() { return cpwr_to_upwr(SPEED_POWER_MIN); }
-  static const cutter_power_t mpower_max() { return cpwr_to_upwr(SPEED_POWER_MAX); }
+  static constexpr cutter_power_t mpower_min() { return cpwr_to_upwr(SPEED_POWER_MIN); }
+  static constexpr cutter_power_t mpower_max() { return cpwr_to_upwr(SPEED_POWER_MAX); }
 
   #if ENABLED(LASER_FEATURE)
-    static cutter_test_pulse_t testPulse; // Test fire Pulse ms value
+    static cutter_test_pulse_t testPulse;                 // (ms) Test fire pulse duration
+    static uint8_t last_block_power;                      // Track power changes for dynamic power
+
+    static feedRate_t feedrate_mm_m, last_feedrate_mm_m;  // (mm/min) Track feedrate changes for dynamic power
+    static bool laser_feedrate_changed() {
+      const bool changed = last_feedrate_mm_m != feedrate_mm_m;
+      if (changed) last_feedrate_mm_m = feedrate_mm_m;
+      return changed;
+    }
   #endif
 
-  static bool isReady;                    // Ready to apply power setting from the UI to OCR
+  static bool isReadyForUI;               // Ready to apply power setting from the UI to OCR
+  static bool enable_state;
   static uint8_t power,
                  last_power_applied;      // Basic power state tracking
 
-  #if ENABLED(MARLIN_DEV_MODE)
-    static cutter_frequency_t frequency;  // Set PWM frequency; range: 2K-50K
-  #endif
+  static cutter_frequency_t frequency;  // Set PWM frequency; range: 2K-50K
 
   static cutter_power_t menuPower,        // Power as set via LCD menu in PWM, Percentage or RPM
                         unitPower;        // Power as displayed status in PWM, Percentage or RPM
 
   static void init();
 
-  #if ENABLED(MARLIN_DEV_MODE)
+  #if ENABLED(HAL_CAN_SET_PWM_FREQ) && SPINDLE_LASER_FREQUENCY
     static void refresh_frequency() { hal.set_pwm_frequency(pin_t(SPINDLE_LASER_PWM_PIN), frequency); }
   #endif
 
   // Modifying this function should update everywhere
   static bool enabled(const cutter_power_t opwr) { return opwr > 0; }
-  static bool enabled() { return enabled(power); }
+  static bool enabled() { return enable_state; }
 
   static void apply_power(const uint8_t inpow);
 
   FORCE_INLINE static void refresh() { apply_power(power); }
-  FORCE_INLINE static void set_power(const uint8_t upwr) { power = upwr; refresh(); }
 
   #if ENABLED(SPINDLE_LASER_USE_PWM)
 
@@ -123,7 +136,6 @@ public:
     public:
 
     static void set_ocr(const uint8_t ocr);
-    static void ocr_set_power(const uint8_t ocr) { power = ocr; set_ocr(ocr); }
     static void ocr_off();
 
     /**
@@ -141,78 +153,76 @@ public:
       );
     }
 
-    /**
-     * Correct power to configured range
-     */
-    static cutter_power_t power_to_range(const cutter_power_t pwr) {
-      return power_to_range(pwr, _CUTTER_POWER(CUTTER_POWER_UNIT));
-    }
-
-    static cutter_power_t power_to_range(const cutter_power_t pwr, const uint8_t pwrUnit) {
-      static constexpr float
-        min_pct = TERN(CUTTER_POWER_RELATIVE, 0, TERN(SPINDLE_FEATURE, round(100.0f * (SPEED_POWER_MIN) / (SPEED_POWER_MAX)), SPEED_POWER_MIN)),
-        max_pct = TERN(SPINDLE_FEATURE, 100, SPEED_POWER_MAX);
-      if (pwr <= 0) return 0;
-      cutter_power_t upwr;
-      switch (pwrUnit) {
-        case _CUTTER_POWER_PWM255:
-          upwr = cutter_power_t(
-              (pwr < pct_to_ocr(min_pct)) ? pct_to_ocr(min_pct) // Use minimum if set below
-            : (pwr > pct_to_ocr(max_pct)) ? pct_to_ocr(max_pct) // Use maximum if set above
-            :  pwr
-          );
-          break;
-        case _CUTTER_POWER_PERCENT:
-          upwr = cutter_power_t(
-              (pwr < min_pct) ? min_pct                         // Use minimum if set below
-            : (pwr > max_pct) ? max_pct                         // Use maximum if set above
-            :  pwr                                              // PCT
-          );
-          break;
-        case _CUTTER_POWER_RPM:
-          upwr = cutter_power_t(
-              (pwr < SPEED_POWER_MIN) ? SPEED_POWER_MIN         // Use minimum if set below
-            : (pwr > SPEED_POWER_MAX) ? SPEED_POWER_MAX         // Use maximum if set above
-            : pwr                                               // Calculate OCR value
-          );
-          break;
-        default: break;
-      }
-      return upwr;
-    }
-
   #endif // SPINDLE_LASER_USE_PWM
 
   /**
-   * Enable/Disable spindle/laser
-   * @param enable true = enable; false = disable
+   * Correct power to configured range
    */
-  static void set_enabled(const bool enable) {
-    uint8_t value = 0;
-    if (enable) {
-      #if ENABLED(SPINDLE_LASER_USE_PWM)
-        if (power)
-          value = power;
-        else if (unitPower)
-          value = upower_to_ocr(cpwr_to_upwr(SPEED_POWER_STARTUP));
-      #else
-        value = 255;
-      #endif
+  static cutter_power_t power_to_range(const cutter_power_t pwr, const uint8_t pwrUnit=_CUTTER_POWER(CUTTER_POWER_UNIT)) {
+    static constexpr float
+      min_pct = TERN(CUTTER_POWER_RELATIVE, 0, TERN(SPINDLE_FEATURE, round(100.0f * (SPEED_POWER_MIN) / (SPEED_POWER_MAX)), SPEED_POWER_MIN)),
+      max_pct = TERN(SPINDLE_FEATURE, 100, SPEED_POWER_MAX);
+    if (pwr <= 0) return 0;
+    cutter_power_t upwr;
+    switch (pwrUnit) {
+      case _CUTTER_POWER_PWM255: {  // PWM
+        const uint8_t pmin = pct_to_ocr(min_pct), pmax = pct_to_ocr(max_pct);
+        upwr = cutter_power_t(constrain(pwr, pmin, pmax));
+      } break;
+      case _CUTTER_POWER_PERCENT:   // Percent
+        upwr = cutter_power_t(constrain(pwr, min_pct, max_pct));
+        break;
+      case _CUTTER_POWER_RPM:       // Calculate OCR value
+        upwr = cutter_power_t(constrain(pwr, SPEED_POWER_MIN, SPEED_POWER_MAX));
+        break;
+      default: break;
     }
-    set_power(value);
+    return upwr;
   }
 
-  static void disable() { isReady = false; set_enabled(false); }
-
   /**
-   * Wait for spindle to spin up or spin down
+   * Enable Laser or Spindle output.
+   * It's important to prevent changing the power output value during inline cutter operation.
+   * Inline power is adjusted in the planner to support LASER_TRAP_POWER and CUTTER_MODE_DYNAMIC mode.
+   *
+   * This method accepts one of the following control states:
+   *
+   *  - For CUTTER_MODE_STANDARD the cutter power is either full on/off or ocr-based and it will apply
+   *    SPEED_POWER_STARTUP if no value is assigned.
    *
-   * @param on true = state to on; false = state to off.
+   *  - For CUTTER_MODE_CONTINUOUS inline and power remains where last set and the cutter output enable flag is set.
+   *
+   *  - CUTTER_MODE_DYNAMIC is also inline-based and it just sets the enable output flag.
+   *
+   *  - For CUTTER_MODE_ERROR set the output enable_state flag directly and set power to 0 for any mode.
+   *    This mode allows a global power shutdown action to occur.
    */
-  static void power_delay(const bool on) {
-    #if DISABLED(LASER_POWER_INLINE)
-      safe_delay(on ? SPINDLE_LASER_POWERUP_DELAY : SPINDLE_LASER_POWERDOWN_DELAY);
+  static void set_enabled(const bool enable) {
+    switch (cutter_mode) {
+      case CUTTER_MODE_STANDARD:
+        apply_power(enable ? TERN(SPINDLE_LASER_USE_PWM, (power ?: (unitPower ? upower_to_ocr(cpwr_to_upwr(SPEED_POWER_STARTUP)) : 0)), 255) : 0);
+        break;
+      case CUTTER_MODE_CONTINUOUS:
+        TERN_(LASER_FEATURE, set_inline_enabled(enable));
+        break;
+      case CUTTER_MODE_DYNAMIC:
+        TERN_(LASER_FEATURE, set_inline_enabled(enable));
+        break;
+      case CUTTER_MODE_ERROR: // Error mode, no enable and kill power.
+        enable_state = false;
+        apply_power(0);
+    }
+    #if SPINDLE_LASER_ENA_PIN
+      WRITE(SPINDLE_LASER_ENA_PIN, enable ? SPINDLE_LASER_ACTIVE_STATE : !SPINDLE_LASER_ACTIVE_STATE);
     #endif
+    enable_state = enable;
+  }
+
+  static void disable() { isReadyForUI = false; set_enabled(false); }
+
+  // Wait for spindle/laser to startup or shutdown
+  static void power_delay(const bool on) {
+    safe_delay(on ? SPINDLE_LASER_POWERUP_DELAY : SPINDLE_LASER_POWERDOWN_DELAY);
   }
 
   #if ENABLED(SPINDLE_CHANGE_DIR)
@@ -224,47 +234,60 @@ public:
   #endif
 
   #if ENABLED(AIR_EVACUATION)
-    static void air_evac_enable();         // Turn On Cutter Vacuum or Laser Blower motor
-    static void air_evac_disable();        // Turn Off Cutter Vacuum or Laser Blower motor
-    static void air_evac_toggle();         // Toggle Cutter Vacuum or Laser Blower motor
-    static bool air_evac_state() {  // Get current state
+    static void air_evac_enable();     // Turn On Cutter Vacuum or Laser Blower motor
+    static void air_evac_disable();    // Turn Off Cutter Vacuum or Laser Blower motor
+    static void air_evac_toggle();     // Toggle Cutter Vacuum or Laser Blower motor
+    static bool air_evac_state() {     // Get current state
       return (READ(AIR_EVACUATION_PIN) == AIR_EVACUATION_ACTIVE);
     }
   #endif
 
   #if ENABLED(AIR_ASSIST)
-    static void air_assist_enable();         // Turn on air assist
-    static void air_assist_disable();        // Turn off air assist
-    static void air_assist_toggle();         // Toggle air assist
-    static bool air_assist_state() {  // Get current state
+    static void air_assist_enable();   // Turn on air assist
+    static void air_assist_disable();  // Turn off air assist
+    static void air_assist_toggle();   // Toggle air assist
+    static bool air_assist_state() {   // Get current state
       return (READ(AIR_ASSIST_PIN) == AIR_ASSIST_ACTIVE);
     }
   #endif
 
   #if HAS_MARLINUI_MENU
-    static void enable_with_dir(const bool reverse) {
-      isReady = true;
-      const uint8_t ocr = TERN(SPINDLE_LASER_USE_PWM, upower_to_ocr(menuPower), 255);
-      if (menuPower)
-        power = ocr;
-      else
-        menuPower = cpwr_to_upwr(SPEED_POWER_STARTUP);
-      unitPower = menuPower;
-      set_reverse(reverse);
-      set_enabled(true);
-    }
-    FORCE_INLINE static void enable_forward() { enable_with_dir(false); }
-    FORCE_INLINE static void enable_reverse() { enable_with_dir(true); }
-    FORCE_INLINE static void enable_same_dir() { enable_with_dir(is_reverse()); }
+
+    #if ENABLED(SPINDLE_FEATURE)
+      static void enable_with_dir(const bool reverse) {
+        isReadyForUI = true;
+        const uint8_t ocr = TERN(SPINDLE_LASER_USE_PWM, upower_to_ocr(menuPower), 255);
+        if (menuPower)
+          power = ocr;
+        else
+          menuPower = cpwr_to_upwr(SPEED_POWER_STARTUP);
+        unitPower = menuPower;
+        set_reverse(reverse);
+        set_enabled(true);
+      }
+      FORCE_INLINE static void enable_forward() { enable_with_dir(false); }
+      FORCE_INLINE static void enable_reverse() { enable_with_dir(true); }
+      FORCE_INLINE static void enable_same_dir() { enable_with_dir(is_reverse()); }
+    #endif // SPINDLE_FEATURE
 
     #if ENABLED(SPINDLE_LASER_USE_PWM)
       static void update_from_mpower() {
-        if (isReady) power = upower_to_ocr(menuPower);
+        if (isReadyForUI) power = upower_to_ocr(menuPower);
         unitPower = menuPower;
       }
     #endif
 
     #if ENABLED(LASER_FEATURE)
+      // Toggle the laser on/off with menuPower. Apply SPEED_POWER_STARTUP if it was 0 on entry.
+      static void laser_menu_toggle(const bool state) {
+        set_enabled(state);
+        if (state) {
+          if (!menuPower) menuPower = cpwr_to_upwr(SPEED_POWER_STARTUP);
+          power = upower_to_ocr(menuPower);
+          apply_power(power);
+        }
+      }
+
       /**
        * Test fire the laser using the testPulse ms duration
        * Also fires with any PWM power that was previous set
@@ -272,74 +295,36 @@ public:
        */
       static void test_fire_pulse() {
         TERN_(HAS_BEEPER, buzzer.tone(30, 3000));
-        enable_forward();                  // Turn Laser on (Spindle speak but same funct)
+        cutter_mode = CUTTER_MODE_STANDARD;// Menu needs standard mode.
+        laser_menu_toggle(true);           // Laser On
         delay(testPulse);                  // Delay for time set by user in pulse ms menu screen.
-        disable();                         // Turn laser off
+        laser_menu_toggle(false);          // Laser Off
       }
-    #endif
+    #endif // LASER_FEATURE
 
   #endif // HAS_MARLINUI_MENU
 
-  #if ENABLED(LASER_POWER_INLINE)
-    /**
-     * Inline power adds extra fields to the planner block
-     * to handle laser power and scale to movement speed.
-     */
+  #if ENABLED(LASER_FEATURE)
 
-    // Force disengage planner power control
-    static void inline_disable() {
-      isReady = false;
-      unitPower = 0;
-      planner.laser_inline.status.isPlanned = false;
-      planner.laser_inline.status.isEnabled = false;
-      planner.laser_inline.power = 0;
+    // Dynamic mode rate calculation
+    static uint8_t calc_dynamic_power() {
+      if (feedrate_mm_m > 65535) return 255;         // Too fast, go always on
+      uint16_t rate = uint16_t(feedrate_mm_m);       // 16 bits from the G-code parser float input
+      rate >>= 8;                                    // Take the G-code input e.g. F40000 and shift off the lower bits to get an OCR value from 1-255
+      return uint8_t(rate);
     }
 
     // Inline modes of all other functions; all enable planner inline power control
-    static void set_inline_enabled(const bool enable) {
-      if (enable)
-        inline_power(255);
-      else {
-        isReady = false;
-        unitPower = menuPower = 0;
-        planner.laser_inline.status.isPlanned = false;
-        TERN(SPINDLE_LASER_USE_PWM, inline_ocr_power, inline_power)(0);
-      }
-    }
+    static void set_inline_enabled(const bool enable) { planner.laser_inline.status.isEnabled = enable;}
 
     // Set the power for subsequent movement blocks
-    static void inline_power(const cutter_power_t upwr) {
-      unitPower = menuPower = upwr;
-      #if ENABLED(SPINDLE_LASER_USE_PWM)
-        #if ENABLED(SPEED_POWER_RELATIVE) && !CUTTER_UNIT_IS(RPM) // relative mode does not turn laser off at 0, except for RPM
-          planner.laser_inline.status.isEnabled = true;
-          planner.laser_inline.power = upower_to_ocr(upwr);
-          isReady = true;
-        #else
-          inline_ocr_power(upower_to_ocr(upwr));
-        #endif
-      #else
-        planner.laser_inline.status.isEnabled = enabled(upwr);
-        planner.laser_inline.power = upwr;
-        isReady = enabled(upwr);
-      #endif
+    static void inline_power(const cutter_power_t cpwr) {
+      TERN(SPINDLE_LASER_USE_PWM, power = planner.laser_inline.power = cpwr, planner.laser_inline.power = cpwr > 0 ? 255 : 0);
     }
 
-    static void inline_direction(const bool) { /* never */ }
-
-    #if ENABLED(SPINDLE_LASER_USE_PWM)
-      static void inline_ocr_power(const uint8_t ocrpwr) {
-        isReady = ocrpwr > 0;
-        planner.laser_inline.status.isEnabled = ocrpwr > 0;
-        planner.laser_inline.power = ocrpwr;
-      }
-    #endif
-  #endif // LASER_POWER_INLINE
+  #endif // LASER_FEATURE
 
-  static void kill() {
-    TERN_(LASER_POWER_INLINE, inline_disable());
-    disable();
-  }
+  static void kill() { disable(); }
 };
 
 extern SpindleLaser cutter;

commit 85c0875db28477d7ed6515c39376b93407353b27
Author: John Robertson <john@cirtech.co.uk>
Date:   Tue May 31 23:09:44 2022 +0100

    ‚ú® Laser Safety Timeout (#24189)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 2791dc7ad1..808fa634e1 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -89,7 +89,8 @@ public:
   #endif
 
   static bool isReady;                    // Ready to apply power setting from the UI to OCR
-  static uint8_t power;
+  static uint8_t power,
+                 last_power_applied;      // Basic power state tracking
 
   #if ENABLED(MARLIN_DEV_MODE)
     static cutter_frequency_t frequency;  // Set PWM frequency; range: 2K-50K

commit c5126de559719ebdaf4475b0db4ab21c26b90a1a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 22 16:08:29 2022 -0500

    üßë‚Äçüíª MAP macro for axis lists, etc. (#24191)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 1f9bec7bf0..2791dc7ad1 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -41,8 +41,6 @@
 #define PCT_TO_PWM(X) ((X) * 255 / 100)
 #define PCT_TO_SERVO(X) ((X) * 180 / 100)
 
-// #define _MAP(N,S1,S2,D1,D2) ((N)*_MAX((D2)-(D1),0)/_MAX((S2)-(S1),1)+(D1))
-
 class SpindleLaser {
 public:
   static const inline uint8_t pct_to_ocr(const_float_t pct) { return uint8_t(PCT_TO_PWM(pct)); }

commit 04fe50936e23a8aca7a400591e700c1220f68b3f
Author: Pauli Jokela <pauli.jokela@didstopia.com>
Date:   Thu May 12 05:23:16 2022 +0300

    ‚ú® SOUND_ON_DEFAULT option (#24102)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index e948d2d37b..1f9bec7bf0 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -30,7 +30,7 @@
 
 #include "spindle_laser_types.h"
 
-#if USE_BEEPER
+#if HAS_BEEPER
   #include "../libs/buzzer.h"
 #endif
 
@@ -272,7 +272,7 @@ public:
        * If not set defaults to 80% power
        */
       static void test_fire_pulse() {
-        TERN_(USE_BEEPER, buzzer.tone(30, 3000));
+        TERN_(HAS_BEEPER, buzzer.tone(30, 3000));
         enable_forward();                  // Turn Laser on (Spindle speak but same funct)
         delay(testPulse);                  // Delay for time set by user in pulse ms menu screen.
         disable();                         // Turn laser off

commit 44eff9a23348dcc117fd1ea9b4b1ef0b54061808
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Feb 17 18:50:31 2022 -0600

    ‚ôªÔ∏è Refactor HAL as singleton (#23357)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 89e11fca08..e948d2d37b 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -103,7 +103,7 @@ public:
   static void init();
 
   #if ENABLED(MARLIN_DEV_MODE)
-    static void refresh_frequency() { set_pwm_frequency(pin_t(SPINDLE_LASER_PWM_PIN), frequency); }
+    static void refresh_frequency() { hal.set_pwm_frequency(pin_t(SPINDLE_LASER_PWM_PIN), frequency); }
   #endif
 
   // Modifying this function should update everywhere

commit ab46b7e2f298826a5512569d6e79bb59a7a6b8ea
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jan 25 15:33:03 2022 -0600

    üßë‚Äçüíª HAS_MARLINUI_MENU, HAS_MANUAL_MOVE_MENU

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 7a8cd2c830..89e11fca08 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -242,7 +242,7 @@ public:
     }
   #endif
 
-  #if HAS_LCD_MENU
+  #if HAS_MARLINUI_MENU
     static void enable_with_dir(const bool reverse) {
       isReady = true;
       const uint8_t ocr = TERN(SPINDLE_LASER_USE_PWM, upower_to_ocr(menuPower), 255);
@@ -279,7 +279,7 @@ public:
       }
     #endif
 
-  #endif // HAS_LCD_MENU
+  #endif // HAS_MARLINUI_MENU
 
   #if ENABLED(LASER_POWER_INLINE)
     /**

commit 6fb2d8a25f096d084348a6f6930f515d947474d4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Dec 28 02:57:24 2021 -0600

    üßë‚Äçüíª Remove extraneous 'inline' hints

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 95d60ae486..7a8cd2c830 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -103,12 +103,12 @@ public:
   static void init();
 
   #if ENABLED(MARLIN_DEV_MODE)
-    static inline void refresh_frequency() { set_pwm_frequency(pin_t(SPINDLE_LASER_PWM_PIN), frequency); }
+    static void refresh_frequency() { set_pwm_frequency(pin_t(SPINDLE_LASER_PWM_PIN), frequency); }
   #endif
 
   // Modifying this function should update everywhere
-  static inline bool enabled(const cutter_power_t opwr) { return opwr > 0; }
-  static inline bool enabled() { return enabled(power); }
+  static bool enabled(const cutter_power_t opwr) { return opwr > 0; }
+  static bool enabled() { return enabled(power); }
 
   static void apply_power(const uint8_t inpow);
 
@@ -124,13 +124,13 @@ public:
     public:
 
     static void set_ocr(const uint8_t ocr);
-    static inline void ocr_set_power(const uint8_t ocr) { power = ocr; set_ocr(ocr); }
+    static void ocr_set_power(const uint8_t ocr) { power = ocr; set_ocr(ocr); }
     static void ocr_off();
 
     /**
      * Update output for power->OCR translation
      */
-    static inline uint8_t upower_to_ocr(const cutter_power_t upwr) {
+    static uint8_t upower_to_ocr(const cutter_power_t upwr) {
       return uint8_t(
         #if CUTTER_UNIT_IS(PWM255)
           upwr
@@ -145,11 +145,11 @@ public:
     /**
      * Correct power to configured range
      */
-    static inline cutter_power_t power_to_range(const cutter_power_t pwr) {
+    static cutter_power_t power_to_range(const cutter_power_t pwr) {
       return power_to_range(pwr, _CUTTER_POWER(CUTTER_POWER_UNIT));
     }
 
-    static inline cutter_power_t power_to_range(const cutter_power_t pwr, const uint8_t pwrUnit) {
+    static cutter_power_t power_to_range(const cutter_power_t pwr, const uint8_t pwrUnit) {
       static constexpr float
         min_pct = TERN(CUTTER_POWER_RELATIVE, 0, TERN(SPINDLE_FEATURE, round(100.0f * (SPEED_POWER_MIN) / (SPEED_POWER_MAX)), SPEED_POWER_MIN)),
         max_pct = TERN(SPINDLE_FEATURE, 100, SPEED_POWER_MAX);
@@ -188,7 +188,7 @@ public:
    * Enable/Disable spindle/laser
    * @param enable true = enable; false = disable
    */
-  static inline void set_enabled(const bool enable) {
+  static void set_enabled(const bool enable) {
     uint8_t value = 0;
     if (enable) {
       #if ENABLED(SPINDLE_LASER_USE_PWM)
@@ -203,14 +203,14 @@ public:
     set_power(value);
   }
 
-  static inline void disable() { isReady = false; set_enabled(false); }
+  static void disable() { isReady = false; set_enabled(false); }
 
   /**
    * Wait for spindle to spin up or spin down
    *
    * @param on true = state to on; false = state to off.
    */
-  static inline void power_delay(const bool on) {
+  static void power_delay(const bool on) {
     #if DISABLED(LASER_POWER_INLINE)
       safe_delay(on ? SPINDLE_LASER_POWERUP_DELAY : SPINDLE_LASER_POWERDOWN_DELAY);
     #endif
@@ -220,7 +220,7 @@ public:
     static void set_reverse(const bool reverse);
     static bool is_reverse() { return READ(SPINDLE_DIR_PIN) == SPINDLE_INVERT_DIR; }
   #else
-    static inline void set_reverse(const bool) {}
+    static void set_reverse(const bool) {}
     static bool is_reverse() { return false; }
   #endif
 
@@ -228,7 +228,7 @@ public:
     static void air_evac_enable();         // Turn On Cutter Vacuum or Laser Blower motor
     static void air_evac_disable();        // Turn Off Cutter Vacuum or Laser Blower motor
     static void air_evac_toggle();         // Toggle Cutter Vacuum or Laser Blower motor
-    static inline bool air_evac_state() {  // Get current state
+    static bool air_evac_state() {  // Get current state
       return (READ(AIR_EVACUATION_PIN) == AIR_EVACUATION_ACTIVE);
     }
   #endif
@@ -237,13 +237,13 @@ public:
     static void air_assist_enable();         // Turn on air assist
     static void air_assist_disable();        // Turn off air assist
     static void air_assist_toggle();         // Toggle air assist
-    static inline bool air_assist_state() {  // Get current state
+    static bool air_assist_state() {  // Get current state
       return (READ(AIR_ASSIST_PIN) == AIR_ASSIST_ACTIVE);
     }
   #endif
 
   #if HAS_LCD_MENU
-    static inline void enable_with_dir(const bool reverse) {
+    static void enable_with_dir(const bool reverse) {
       isReady = true;
       const uint8_t ocr = TERN(SPINDLE_LASER_USE_PWM, upower_to_ocr(menuPower), 255);
       if (menuPower)
@@ -259,7 +259,7 @@ public:
     FORCE_INLINE static void enable_same_dir() { enable_with_dir(is_reverse()); }
 
     #if ENABLED(SPINDLE_LASER_USE_PWM)
-      static inline void update_from_mpower() {
+      static void update_from_mpower() {
         if (isReady) power = upower_to_ocr(menuPower);
         unitPower = menuPower;
       }
@@ -271,7 +271,7 @@ public:
        * Also fires with any PWM power that was previous set
        * If not set defaults to 80% power
        */
-      static inline void test_fire_pulse() {
+      static void test_fire_pulse() {
         TERN_(USE_BEEPER, buzzer.tone(30, 3000));
         enable_forward();                  // Turn Laser on (Spindle speak but same funct)
         delay(testPulse);                  // Delay for time set by user in pulse ms menu screen.
@@ -288,7 +288,7 @@ public:
      */
 
     // Force disengage planner power control
-    static inline void inline_disable() {
+    static void inline_disable() {
       isReady = false;
       unitPower = 0;
       planner.laser_inline.status.isPlanned = false;
@@ -297,7 +297,7 @@ public:
     }
 
     // Inline modes of all other functions; all enable planner inline power control
-    static inline void set_inline_enabled(const bool enable) {
+    static void set_inline_enabled(const bool enable) {
       if (enable)
         inline_power(255);
       else {
@@ -326,10 +326,10 @@ public:
       #endif
     }
 
-    static inline void inline_direction(const bool) { /* never */ }
+    static void inline_direction(const bool) { /* never */ }
 
     #if ENABLED(SPINDLE_LASER_USE_PWM)
-      static inline void inline_ocr_power(const uint8_t ocrpwr) {
+      static void inline_ocr_power(const uint8_t ocrpwr) {
         isReady = ocrpwr > 0;
         planner.laser_inline.status.isEnabled = ocrpwr > 0;
         planner.laser_inline.power = ocrpwr;
@@ -337,7 +337,7 @@ public:
     #endif
   #endif // LASER_POWER_INLINE
 
-  static inline void kill() {
+  static void kill() {
     TERN_(LASER_POWER_INLINE, inline_disable());
     disable();
   }

commit 6a8b9274a31d11c396ce1bc44b3a0b872a4606dc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Dec 25 23:15:17 2021 -0600

    ‚è™Ô∏è Refactor still needs work
    
    Reverting #23295

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 0415c9c8bb..95d60ae486 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -103,7 +103,7 @@ public:
   static void init();
 
   #if ENABLED(MARLIN_DEV_MODE)
-    static inline void refresh_frequency() { hal.set_pwm_frequency(pin_t(SPINDLE_LASER_PWM_PIN), frequency); }
+    static inline void refresh_frequency() { set_pwm_frequency(pin_t(SPINDLE_LASER_PWM_PIN), frequency); }
   #endif
 
   // Modifying this function should update everywhere

commit e211ff148c39bf5dace72de7cffbb83f19d3f1bf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Dec 24 21:33:59 2021 -0600

    ‚ôªÔ∏è Refactor HAL as singleton (#23295)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 95d60ae486..0415c9c8bb 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -103,7 +103,7 @@ public:
   static void init();
 
   #if ENABLED(MARLIN_DEV_MODE)
-    static inline void refresh_frequency() { set_pwm_frequency(pin_t(SPINDLE_LASER_PWM_PIN), frequency); }
+    static inline void refresh_frequency() { hal.set_pwm_frequency(pin_t(SPINDLE_LASER_PWM_PIN), frequency); }
   #endif
 
   // Modifying this function should update everywhere

commit ea0d0e8e8b4552aff660be36a9b70c2c8960cdc3
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Mon Dec 6 15:52:18 2021 -0600

    ü©π Fix non-PWM cutter compile (#23169)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index ba82c4d731..95d60ae486 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -41,18 +41,10 @@
 #define PCT_TO_PWM(X) ((X) * 255 / 100)
 #define PCT_TO_SERVO(X) ((X) * 180 / 100)
 
-#ifndef SPEED_POWER_INTERCEPT
-  #define SPEED_POWER_INTERCEPT 0
-#endif
-
 // #define _MAP(N,S1,S2,D1,D2) ((N)*_MAX((D2)-(D1),0)/_MAX((S2)-(S1),1)+(D1))
 
 class SpindleLaser {
 public:
-  static constexpr float
-    min_pct = TERN(CUTTER_POWER_RELATIVE, 0, TERN(SPINDLE_FEATURE, round(100.0f * (SPEED_POWER_MIN) / (SPEED_POWER_MAX)), SPEED_POWER_MIN)),
-    max_pct = TERN(SPINDLE_FEATURE, 100, SPEED_POWER_MAX);
-
   static const inline uint8_t pct_to_ocr(const_float_t pct) { return uint8_t(PCT_TO_PWM(pct)); }
 
   // cpower = configured values (e.g., SPEED_POWER_MAX)
@@ -158,6 +150,9 @@ public:
     }
 
     static inline cutter_power_t power_to_range(const cutter_power_t pwr, const uint8_t pwrUnit) {
+      static constexpr float
+        min_pct = TERN(CUTTER_POWER_RELATIVE, 0, TERN(SPINDLE_FEATURE, round(100.0f * (SPEED_POWER_MIN) / (SPEED_POWER_MAX)), SPEED_POWER_MIN)),
+        max_pct = TERN(SPINDLE_FEATURE, 100, SPEED_POWER_MAX);
       if (pwr <= 0) return 0;
       cutter_power_t upwr;
       switch (pwrUnit) {
@@ -186,6 +181,7 @@ public:
       }
       return upwr;
     }
+
   #endif // SPINDLE_LASER_USE_PWM
 
   /**

commit 798a8a7a0852c12fb8640c4a531fac70fbc57eda
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Sep 13 16:28:12 2021 -0500

    üîß SPINDLE_LASER_PWM => SPINDLE_LASER_USE_PWM

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 9a2d05c79d..ba82c4d731 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -123,7 +123,7 @@ public:
   FORCE_INLINE static void refresh() { apply_power(power); }
   FORCE_INLINE static void set_power(const uint8_t upwr) { power = upwr; refresh(); }
 
-  #if ENABLED(SPINDLE_LASER_PWM)
+  #if ENABLED(SPINDLE_LASER_USE_PWM)
 
     private:
 
@@ -186,7 +186,7 @@ public:
       }
       return upwr;
     }
-  #endif // SPINDLE_LASER_PWM
+  #endif // SPINDLE_LASER_USE_PWM
 
   /**
    * Enable/Disable spindle/laser
@@ -195,7 +195,7 @@ public:
   static inline void set_enabled(const bool enable) {
     uint8_t value = 0;
     if (enable) {
-      #if ENABLED(SPINDLE_LASER_PWM)
+      #if ENABLED(SPINDLE_LASER_USE_PWM)
         if (power)
           value = power;
         else if (unitPower)
@@ -249,7 +249,7 @@ public:
   #if HAS_LCD_MENU
     static inline void enable_with_dir(const bool reverse) {
       isReady = true;
-      const uint8_t ocr = TERN(SPINDLE_LASER_PWM, upower_to_ocr(menuPower), 255);
+      const uint8_t ocr = TERN(SPINDLE_LASER_USE_PWM, upower_to_ocr(menuPower), 255);
       if (menuPower)
         power = ocr;
       else
@@ -262,7 +262,7 @@ public:
     FORCE_INLINE static void enable_reverse() { enable_with_dir(true); }
     FORCE_INLINE static void enable_same_dir() { enable_with_dir(is_reverse()); }
 
-    #if ENABLED(SPINDLE_LASER_PWM)
+    #if ENABLED(SPINDLE_LASER_USE_PWM)
       static inline void update_from_mpower() {
         if (isReady) power = upower_to_ocr(menuPower);
         unitPower = menuPower;
@@ -308,14 +308,14 @@ public:
         isReady = false;
         unitPower = menuPower = 0;
         planner.laser_inline.status.isPlanned = false;
-        TERN(SPINDLE_LASER_PWM, inline_ocr_power, inline_power)(0);
+        TERN(SPINDLE_LASER_USE_PWM, inline_ocr_power, inline_power)(0);
       }
     }
 
     // Set the power for subsequent movement blocks
     static void inline_power(const cutter_power_t upwr) {
       unitPower = menuPower = upwr;
-      #if ENABLED(SPINDLE_LASER_PWM)
+      #if ENABLED(SPINDLE_LASER_USE_PWM)
         #if ENABLED(SPEED_POWER_RELATIVE) && !CUTTER_UNIT_IS(RPM) // relative mode does not turn laser off at 0, except for RPM
           planner.laser_inline.status.isEnabled = true;
           planner.laser_inline.power = upower_to_ocr(upwr);
@@ -332,7 +332,7 @@ public:
 
     static inline void inline_direction(const bool) { /* never */ }
 
-    #if ENABLED(SPINDLE_LASER_PWM)
+    #if ENABLED(SPINDLE_LASER_USE_PWM)
       static inline void inline_ocr_power(const uint8_t ocrpwr) {
         isReady = ocrpwr > 0;
         planner.laser_inline.status.isEnabled = ocrpwr > 0;

commit 845d42ef40e1adc04315779d31eb55dac2218689
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Sep 6 15:34:12 2021 -0500

    üé® Misc. Spindle/Laser (etc.) cleanup

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index da228cf8a7..9a2d05c79d 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -132,54 +132,50 @@ public:
     public:
 
     static void set_ocr(const uint8_t ocr);
-    static inline void set_ocr_power(const uint8_t ocr) { power = ocr; set_ocr(ocr); }
+    static inline void ocr_set_power(const uint8_t ocr) { power = ocr; set_ocr(ocr); }
     static void ocr_off();
-    // Used to update output for power->OCR translation
+
+    /**
+     * Update output for power->OCR translation
+     */
     static inline uint8_t upower_to_ocr(const cutter_power_t upwr) {
-      return (
+      return uint8_t(
         #if CUTTER_UNIT_IS(PWM255)
-          uint8_t(upwr)
+          upwr
         #elif CUTTER_UNIT_IS(PERCENT)
           pct_to_ocr(upwr)
         #else
-          uint8_t(pct_to_ocr(cpwr_to_pct(upwr)))
+          pct_to_ocr(cpwr_to_pct(upwr))
         #endif
       );
     }
 
-    // Correct power to configured range
+    /**
+     * Correct power to configured range
+     */
     static inline cutter_power_t power_to_range(const cutter_power_t pwr) {
-      return power_to_range(pwr, (
-        #if CUTTER_UNIT_IS(PWM255)
-          0
-        #elif CUTTER_UNIT_IS(PERCENT)
-          1
-        #elif CUTTER_UNIT_IS(RPM)
-          2
-        #else
-          #error "CUTTER_UNIT_IS(unknown)"
-        #endif
-      ));
+      return power_to_range(pwr, _CUTTER_POWER(CUTTER_POWER_UNIT));
     }
+
     static inline cutter_power_t power_to_range(const cutter_power_t pwr, const uint8_t pwrUnit) {
       if (pwr <= 0) return 0;
       cutter_power_t upwr;
       switch (pwrUnit) {
-        case 0:                                                 // PWM
+        case _CUTTER_POWER_PWM255:
           upwr = cutter_power_t(
               (pwr < pct_to_ocr(min_pct)) ? pct_to_ocr(min_pct) // Use minimum if set below
             : (pwr > pct_to_ocr(max_pct)) ? pct_to_ocr(max_pct) // Use maximum if set above
             :  pwr
           );
           break;
-        case 1:                                                 // PERCENT
+        case _CUTTER_POWER_PERCENT:
           upwr = cutter_power_t(
               (pwr < min_pct) ? min_pct                         // Use minimum if set below
             : (pwr > max_pct) ? max_pct                         // Use maximum if set above
             :  pwr                                              // PCT
           );
           break;
-        case 2:                                                 // RPM
+        case _CUTTER_POWER_RPM:
           upwr = cutter_power_t(
               (pwr < SPEED_POWER_MIN) ? SPEED_POWER_MIN         // Use minimum if set below
             : (pwr > SPEED_POWER_MAX) ? SPEED_POWER_MAX         // Use maximum if set above
@@ -190,14 +186,34 @@ public:
       }
       return upwr;
     }
-
   #endif // SPINDLE_LASER_PWM
 
+  /**
+   * Enable/Disable spindle/laser
+   * @param enable true = enable; false = disable
+   */
   static inline void set_enabled(const bool enable) {
-    set_power(enable ? TERN(SPINDLE_LASER_PWM, (power ?: (unitPower ? upower_to_ocr(cpwr_to_upwr(SPEED_POWER_STARTUP)) : 0)), 255) : 0);
+    uint8_t value = 0;
+    if (enable) {
+      #if ENABLED(SPINDLE_LASER_PWM)
+        if (power)
+          value = power;
+        else if (unitPower)
+          value = upower_to_ocr(cpwr_to_upwr(SPEED_POWER_STARTUP));
+      #else
+        value = 255;
+      #endif
+    }
+    set_power(value);
   }
 
-  // Wait for spindle to spin up or spin down
+  static inline void disable() { isReady = false; set_enabled(false); }
+
+  /**
+   * Wait for spindle to spin up or spin down
+   *
+   * @param on true = state to on; false = state to off.
+   */
   static inline void power_delay(const bool on) {
     #if DISABLED(LASER_POWER_INLINE)
       safe_delay(on ? SPINDLE_LASER_POWERUP_DELAY : SPINDLE_LASER_POWERDOWN_DELAY);
@@ -230,8 +246,6 @@ public:
     }
   #endif
 
-  static inline void disable() { isReady = false; set_enabled(false); }
-
   #if HAS_LCD_MENU
     static inline void enable_with_dir(const bool reverse) {
       isReady = true;
@@ -325,7 +339,7 @@ public:
         planner.laser_inline.power = ocrpwr;
       }
     #endif
-  #endif  // LASER_POWER_INLINE
+  #endif // LASER_POWER_INLINE
 
   static inline void kill() {
     TERN_(LASER_POWER_INLINE, inline_disable());

commit 741e3c12803077e60bc4842b74a4bf2365e2b3db
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Sat May 1 19:59:45 2021 -0500

    Laser Cutter Air Assist (#21753)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index c3454d0b3c..da228cf8a7 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -221,6 +221,15 @@ public:
     }
   #endif
 
+  #if ENABLED(AIR_ASSIST)
+    static void air_assist_enable();         // Turn on air assist
+    static void air_assist_disable();        // Turn off air assist
+    static void air_assist_toggle();         // Toggle air assist
+    static inline bool air_assist_state() {  // Get current state
+      return (READ(AIR_ASSIST_PIN) == AIR_ASSIST_ACTIVE);
+    }
+  #endif
+
   static inline void disable() { isReady = false; set_enabled(false); }
 
   #if HAS_LCD_MENU

commit f075dd0db3496d99c84fcf77242f60731982184c
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Thu Apr 22 18:19:41 2021 -0500

    M10-M11 Air Evacuation for Spindle/Laser (#21668)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 88cf372a02..c3454d0b3c 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -212,6 +212,15 @@ public:
     static bool is_reverse() { return false; }
   #endif
 
+  #if ENABLED(AIR_EVACUATION)
+    static void air_evac_enable();         // Turn On Cutter Vacuum or Laser Blower motor
+    static void air_evac_disable();        // Turn Off Cutter Vacuum or Laser Blower motor
+    static void air_evac_toggle();         // Toggle Cutter Vacuum or Laser Blower motor
+    static inline bool air_evac_state() {  // Get current state
+      return (READ(AIR_EVACUATION_PIN) == AIR_EVACUATION_ACTIVE);
+    }
+  #endif
+
   static inline void disable() { isReady = false; set_enabled(false); }
 
   #if HAS_LCD_MENU

commit 8b6718c6320c32abe0fa1de56a033aca54ff0b76
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 4 18:07:16 2021 -0500

    misc. pointer formatting

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index bf7106fab7..88cf372a02 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -215,7 +215,7 @@ public:
   static inline void disable() { isReady = false; set_enabled(false); }
 
   #if HAS_LCD_MENU
-      static inline void enable_with_dir(const bool reverse) {
+    static inline void enable_with_dir(const bool reverse) {
       isReady = true;
       const uint8_t ocr = TERN(SPINDLE_LASER_PWM, upower_to_ocr(menuPower), 255);
       if (menuPower)

commit 62f37669dc506a6e579389ca549ce5993548944d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Apr 1 17:59:57 2021 -0500

    Replace 'const float &' with 'const_float_t' (#21505)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index b3d008851c..bf7106fab7 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -53,7 +53,7 @@ public:
     min_pct = TERN(CUTTER_POWER_RELATIVE, 0, TERN(SPINDLE_FEATURE, round(100.0f * (SPEED_POWER_MIN) / (SPEED_POWER_MAX)), SPEED_POWER_MIN)),
     max_pct = TERN(SPINDLE_FEATURE, 100, SPEED_POWER_MAX);
 
-  static const inline uint8_t pct_to_ocr(const float pct) { return uint8_t(PCT_TO_PWM(pct)); }
+  static const inline uint8_t pct_to_ocr(const_float_t pct) { return uint8_t(PCT_TO_PWM(pct)); }
 
   // cpower = configured values (e.g., SPEED_POWER_MAX)
 

commit ccdbffbf3f599f0860c643647ce6c40f1eb5a4cd
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Mon Mar 29 01:41:56 2021 -0500

    Laser Coolant Flow Meter / Safety Shutdown (#21431)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index d50bc7eb42..b3d008851c 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -215,8 +215,7 @@ public:
   static inline void disable() { isReady = false; set_enabled(false); }
 
   #if HAS_LCD_MENU
-
-    static inline void enable_with_dir(const bool reverse) {
+      static inline void enable_with_dir(const bool reverse) {
       isReady = true;
       const uint8_t ocr = TERN(SPINDLE_LASER_PWM, upower_to_ocr(menuPower), 255);
       if (menuPower)
@@ -245,8 +244,8 @@ public:
        * If not set defaults to 80% power
        */
       static inline void test_fire_pulse() {
-        enable_forward();                  // Turn Laser on (Spindle speak but same funct)
         TERN_(USE_BEEPER, buzzer.tone(30, 3000));
+        enable_forward();                  // Turn Laser on (Spindle speak but same funct)
         delay(testPulse);                  // Delay for time set by user in pulse ms menu screen.
         disable();                         // Turn laser off
       }

commit c929fb52dd5ed9b265f93e3df4b69ac8ea581735
Author: ellensp <ellensp@hotmail.com>
Date:   Thu Jan 28 20:47:12 2021 +1300

    Meatpack::report_state on serial port init (#20903)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 57fc136c8c..d50bc7eb42 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -157,7 +157,7 @@ public:
         #elif CUTTER_UNIT_IS(RPM)
           2
         #else
-          #error "CUTTER_UNIT_IS(???)"
+          #error "CUTTER_UNIT_IS(unknown)"
         #endif
       ));
     }

commit cf1f8aff7781c221d76c671e94a88d6d851b2d4d
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Sun Jan 10 06:01:25 2021 -0600

    Laser Test Fire (#20452)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index b0b9c01ec4..57fc136c8c 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -30,6 +30,10 @@
 
 #include "spindle_laser_types.h"
 
+#if USE_BEEPER
+  #include "../libs/buzzer.h"
+#endif
+
 #if ENABLED(LASER_POWER_INLINE)
   #include "../module/planner.h"
 #endif
@@ -90,6 +94,10 @@ public:
   static const cutter_power_t mpower_min() { return cpwr_to_upwr(SPEED_POWER_MIN); }
   static const cutter_power_t mpower_max() { return cpwr_to_upwr(SPEED_POWER_MAX); }
 
+  #if ENABLED(LASER_FEATURE)
+    static cutter_test_pulse_t testPulse; // Test fire Pulse ms value
+  #endif
+
   static bool isReady;                    // Ready to apply power setting from the UI to OCR
   static uint8_t power;
 
@@ -230,7 +238,21 @@ public:
       }
     #endif
 
-  #endif
+    #if ENABLED(LASER_FEATURE)
+      /**
+       * Test fire the laser using the testPulse ms duration
+       * Also fires with any PWM power that was previous set
+       * If not set defaults to 80% power
+       */
+      static inline void test_fire_pulse() {
+        enable_forward();                  // Turn Laser on (Spindle speak but same funct)
+        TERN_(USE_BEEPER, buzzer.tone(30, 3000));
+        delay(testPulse);                  // Delay for time set by user in pulse ms menu screen.
+        disable();                         // Turn laser off
+      }
+    #endif
+
+  #endif // HAS_LCD_MENU
 
   #if ENABLED(LASER_POWER_INLINE)
     /**

commit 719404803b7b5967d49afda72fe17660bf5388ea
Author: Ashammaru <xgxede@gmail.com>
Date:   Sun Dec 27 02:01:54 2020 +0100

    Fix SPINDLE_LASER_FREQUENCY (#20509)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 4d3c802411..b0b9c01ec4 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -117,6 +117,12 @@ public:
 
   #if ENABLED(SPINDLE_LASER_PWM)
 
+    private:
+
+    static void _set_ocr(const uint8_t ocr);
+
+    public:
+
     static void set_ocr(const uint8_t ocr);
     static inline void set_ocr_power(const uint8_t ocr) { power = ocr; set_ocr(ocr); }
     static void ocr_off();
@@ -143,7 +149,7 @@ public:
         #elif CUTTER_UNIT_IS(RPM)
           2
         #else
-          #error "???"
+          #error "CUTTER_UNIT_IS(???)"
         #endif
       ));
     }

commit 3e68e4b4185dfad5dfb4fb78400783c716edc52c
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Wed Dec 9 04:29:33 2020 -0600

    Fix Spindle/Laser Control menu (#20347)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 74d06634a0..4d3c802411 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -57,7 +57,7 @@ public:
   static const inline uint8_t cpwr_to_pct(const cutter_cpower_t cpwr) {
     constexpr cutter_cpower_t power_floor = TERN(CUTTER_POWER_RELATIVE, SPEED_POWER_MIN, 0),
                               power_range = SPEED_POWER_MAX - power_floor;
-    return unitPower ? round(100.0f * (cpwr - power_floor) / power_range) : 0;
+    return cpwr ? round(100.0f * (cpwr - power_floor) / power_range) : 0;
   }
 
   // Convert a cpower (e.g., SPEED_POWER_STARTUP) to unit power (upwr, upower),
@@ -191,9 +191,11 @@ public:
   }
 
   #if ENABLED(SPINDLE_CHANGE_DIR)
-    static void set_direction(const bool reverse);
+    static void set_reverse(const bool reverse);
+    static bool is_reverse() { return READ(SPINDLE_DIR_PIN) == SPINDLE_INVERT_DIR; }
   #else
-    static inline void set_direction(const bool) {}
+    static inline void set_reverse(const bool) {}
+    static bool is_reverse() { return false; }
   #endif
 
   static inline void disable() { isReady = false; set_enabled(false); }
@@ -208,11 +210,12 @@ public:
       else
         menuPower = cpwr_to_upwr(SPEED_POWER_STARTUP);
       unitPower = menuPower;
-      set_direction(reverse);
+      set_reverse(reverse);
       set_enabled(true);
     }
     FORCE_INLINE static void enable_forward() { enable_with_dir(false); }
     FORCE_INLINE static void enable_reverse() { enable_with_dir(true); }
+    FORCE_INLINE static void enable_same_dir() { enable_with_dir(is_reverse()); }
 
     #if ENABLED(SPINDLE_LASER_PWM)
       static inline void update_from_mpower() {

commit cd89fa141b45dd84644543321994b9b83f159ec4
Author: Alexander Semion <spin7ion@gmail.com>
Date:   Sun Nov 1 01:42:05 2020 +0300

    Add SPINDLE_SERVO option (#19971)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 50e92fe663..74d06634a0 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -35,6 +35,7 @@
 #endif
 
 #define PCT_TO_PWM(X) ((X) * 255 / 100)
+#define PCT_TO_SERVO(X) ((X) * 180 / 100)
 
 #ifndef SPEED_POWER_INTERCEPT
   #define SPEED_POWER_INTERCEPT 0
@@ -60,7 +61,7 @@ public:
   }
 
   // Convert a cpower (e.g., SPEED_POWER_STARTUP) to unit power (upwr, upower),
-  // which can be PWM, Percent, or RPM (rel/abs).
+  // which can be PWM, Percent, Servo angle, or RPM (rel/abs).
   static const inline cutter_power_t cpwr_to_upwr(const cutter_cpower_t cpwr) { // STARTUP power to Unit power
     const cutter_power_t upwr = (
       #if ENABLED(SPINDLE_FEATURE)
@@ -69,6 +70,8 @@ public:
           cpwr                            // to RPM
         #elif CUTTER_UNIT_IS(PERCENT)     // to PCT
           cpwr_to_pct(cpwr)
+        #elif CUTTER_UNIT_IS(SERVO)       // to SERVO angle
+          PCT_TO_SERVO(cpwr_to_pct(cpwr))
         #else                             // to PWM
           PCT_TO_PWM(cpwr_to_pct(cpwr))
         #endif

commit 368a581de94c1dfc249a841db76aeb998cbcc977
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Oct 31 16:28:33 2020 -0500

    Cutter power cleanup

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 9d21c96fb9..50e92fe663 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -39,24 +39,27 @@
 #ifndef SPEED_POWER_INTERCEPT
   #define SPEED_POWER_INTERCEPT 0
 #endif
-#define SPEED_POWER_FLOOR TERN(CUTTER_POWER_RELATIVE, SPEED_POWER_MIN, 0)
 
 // #define _MAP(N,S1,S2,D1,D2) ((N)*_MAX((D2)-(D1),0)/_MAX((S2)-(S1),1)+(D1))
 
 class SpindleLaser {
 public:
   static constexpr float
-    min_pct = TERN(CUTTER_POWER_RELATIVE, 0, TERN(SPINDLE_FEATURE, round(100.0f * (SPEED_POWER_MIN) / (SPEED_POWER_MAX)), SPEED_POWER_MIN))),
+    min_pct = TERN(CUTTER_POWER_RELATIVE, 0, TERN(SPINDLE_FEATURE, round(100.0f * (SPEED_POWER_MIN) / (SPEED_POWER_MAX)), SPEED_POWER_MIN)),
     max_pct = TERN(SPINDLE_FEATURE, 100, SPEED_POWER_MAX);
 
   static const inline uint8_t pct_to_ocr(const float pct) { return uint8_t(PCT_TO_PWM(pct)); }
 
-  // cpower = configured values (ie SPEED_POWER_MAX)
-  static const inline uint8_t cpwr_to_pct(const cutter_cpower_t cpwr) { // configured value to pct
-    return unitPower ? round(100.0f * (cpwr - (SPEED_POWER_FLOOR)) / (SPEED_POWER_MAX - (SPEED_POWER_FLOOR))) : 0;
+  // cpower = configured values (e.g., SPEED_POWER_MAX)
+
+  // Convert configured power range to a percentage
+  static const inline uint8_t cpwr_to_pct(const cutter_cpower_t cpwr) {
+    constexpr cutter_cpower_t power_floor = TERN(CUTTER_POWER_RELATIVE, SPEED_POWER_MIN, 0),
+                              power_range = SPEED_POWER_MAX - power_floor;
+    return unitPower ? round(100.0f * (cpwr - power_floor) / power_range) : 0;
   }
 
-  // Convert a configured value (cpower)(ie SPEED_POWER_STARTUP) to unit power (upwr, upower),
+  // Convert a cpower (e.g., SPEED_POWER_STARTUP) to unit power (upwr, upower),
   // which can be PWM, Percent, or RPM (rel/abs).
   static const inline cutter_power_t cpwr_to_upwr(const cutter_cpower_t cpwr) { // STARTUP power to Unit power
     const cutter_power_t upwr = (

commit 24c525900500b164b5165af127c6f39accf69c3a
Author: Julien Lirochon <julien@lirochon.net>
Date:   Sat Oct 31 19:45:10 2020 +0100

    Fix SpindleLaser::cpwr_to_pct() maths (#19970)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index e8db3aa608..9d21c96fb9 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -46,14 +46,14 @@
 class SpindleLaser {
 public:
   static constexpr float
-    min_pct = round(TERN(CUTTER_POWER_RELATIVE, 0, (100 * float(SPEED_POWER_MIN) / TERN(SPINDLE_FEATURE, float(SPEED_POWER_MAX), 100)))),
-    max_pct = round(TERN(SPINDLE_FEATURE, 100, float(SPEED_POWER_MAX)));
+    min_pct = TERN(CUTTER_POWER_RELATIVE, 0, TERN(SPINDLE_FEATURE, round(100.0f * (SPEED_POWER_MIN) / (SPEED_POWER_MAX)), SPEED_POWER_MIN))),
+    max_pct = TERN(SPINDLE_FEATURE, 100, SPEED_POWER_MAX);
 
   static const inline uint8_t pct_to_ocr(const float pct) { return uint8_t(PCT_TO_PWM(pct)); }
 
   // cpower = configured values (ie SPEED_POWER_MAX)
   static const inline uint8_t cpwr_to_pct(const cutter_cpower_t cpwr) { // configured value to pct
-    return unitPower ? round(100 * (cpwr - SPEED_POWER_FLOOR) / (SPEED_POWER_MAX - SPEED_POWER_FLOOR)) : 0;
+    return unitPower ? round(100.0f * (cpwr - (SPEED_POWER_FLOOR)) / (SPEED_POWER_MAX - (SPEED_POWER_FLOOR))) : 0;
   }
 
   // Convert a configured value (cpower)(ie SPEED_POWER_STARTUP) to unit power (upwr, upower),

commit 211073913873b18edd209ed9569d157c931d5497
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Oct 31 16:12:35 2020 -0500

    Cutter enable inline at full power
    
    Co-Authored-By: Luu Lac <45380455+shitcreek@users.noreply.github.com>

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 15ff661c73..e8db3aa608 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -235,7 +235,7 @@ public:
     // Inline modes of all other functions; all enable planner inline power control
     static inline void set_inline_enabled(const bool enable) {
       if (enable)
-        inline_power(cpwr_to_upwr(SPEED_POWER_STARTUP));
+        inline_power(255);
       else {
         isReady = false;
         unitPower = menuPower = 0;

commit 8e0fac897b2ab0352059d5f9bd2d6293ae7d9bbf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Sep 20 18:24:05 2020 -0500

    Whitespace cleanup

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 8240efa2dd..15ff661c73 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -224,7 +224,7 @@ public:
      */
 
     // Force disengage planner power control
-    static inline void inline_disable()	{
+    static inline void inline_disable() {
       isReady = false;
       unitPower = 0;
       planner.laser_inline.status.isPlanned = false;

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 71937a897a..8240efa2dd 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once

commit 23806aeb3c5db7248ca8a390d1954f444ad2dced
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Tue Jun 16 16:49:32 2020 -0400

    Fix non-PWM spindle/laser compile (#18311)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>
    Co-authored-by: Luu Lac <45380455+shitcreek@users.noreply.github.com>

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 0ddd092852..71937a897a 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -109,8 +109,6 @@ public:
   FORCE_INLINE static void refresh() { apply_power(power); }
   FORCE_INLINE static void set_power(const uint8_t upwr) { power = upwr; refresh(); }
 
-  static inline void set_enabled(const bool enable) { set_power(enable ? (power ?: (unitPower ? upower_to_ocr(cpwr_to_upwr(SPEED_POWER_STARTUP)) : 0)) : 0); }
-
   #if ENABLED(SPINDLE_LASER_PWM)
 
     static void set_ocr(const uint8_t ocr);
@@ -148,21 +146,21 @@ public:
       cutter_power_t upwr;
       switch (pwrUnit) {
         case 0:                                                 // PWM
-          upwr = (
+          upwr = cutter_power_t(
               (pwr < pct_to_ocr(min_pct)) ? pct_to_ocr(min_pct) // Use minimum if set below
             : (pwr > pct_to_ocr(max_pct)) ? pct_to_ocr(max_pct) // Use maximum if set above
             :  pwr
           );
           break;
         case 1:                                                 // PERCENT
-          upwr = (
+          upwr = cutter_power_t(
               (pwr < min_pct) ? min_pct                         // Use minimum if set below
             : (pwr > max_pct) ? max_pct                         // Use maximum if set above
             :  pwr                                              // PCT
           );
           break;
         case 2:                                                 // RPM
-          upwr = (
+          upwr = cutter_power_t(
               (pwr < SPEED_POWER_MIN) ? SPEED_POWER_MIN         // Use minimum if set below
             : (pwr > SPEED_POWER_MAX) ? SPEED_POWER_MAX         // Use maximum if set above
             : pwr                                               // Calculate OCR value
@@ -175,6 +173,10 @@ public:
 
   #endif // SPINDLE_LASER_PWM
 
+  static inline void set_enabled(const bool enable) {
+    set_power(enable ? TERN(SPINDLE_LASER_PWM, (power ?: (unitPower ? upower_to_ocr(cpwr_to_upwr(SPEED_POWER_STARTUP)) : 0)), 255) : 0);
+  }
+
   // Wait for spindle to spin up or spin down
   static inline void power_delay(const bool on) {
     #if DISABLED(LASER_POWER_INLINE)
@@ -194,7 +196,7 @@ public:
 
     static inline void enable_with_dir(const bool reverse) {
       isReady = true;
-      const uint8_t ocr = upower_to_ocr(menuPower);
+      const uint8_t ocr = TERN(SPINDLE_LASER_PWM, upower_to_ocr(menuPower), 255);
       if (menuPower)
         power = ocr;
       else

commit aea60d94507da282c182a065c226734bc83f4d52
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jun 15 18:11:19 2020 -0500

    Clean up trailing spaces

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 4abed6cb9b..0ddd092852 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -233,7 +233,7 @@ public:
     // Inline modes of all other functions; all enable planner inline power control
     static inline void set_inline_enabled(const bool enable) {
       if (enable)
-        inline_power(cpwr_to_upwr(SPEED_POWER_STARTUP)); 
+        inline_power(cpwr_to_upwr(SPEED_POWER_STARTUP));
       else {
         isReady = false;
         unitPower = menuPower = 0;

commit 0fa345f98f7223f2546a9a6808d5c67039fb3aab
Author: Luu Lac <45380455+shitcreek@users.noreply.github.com>
Date:   Mon Jun 8 19:53:39 2020 -0500

    Laser updates followup (#18237)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index e3aa4023c0..4abed6cb9b 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -91,8 +91,8 @@ public:
     static cutter_frequency_t frequency;  // Set PWM frequency; range: 2K-50K
   #endif
 
-  static cutter_power_t menuPower;        // Power as set via LCD menu in PWM, Percentage or RPM
-  static cutter_power_t unitPower;        // Power as displayed status in PWM, Percentage or RPM
+  static cutter_power_t menuPower,        // Power as set via LCD menu in PWM, Percentage or RPM
+                        unitPower;        // Power as displayed status in PWM, Percentage or RPM
 
   static void init();
 
@@ -225,32 +225,37 @@ public:
     static inline void inline_disable()	{
       isReady = false;
       unitPower = 0;
-      planner.laser_inline.status = 0;
+      planner.laser_inline.status.isPlanned = false;
+      planner.laser_inline.status.isEnabled = false;
       planner.laser_inline.power = 0;
     }
 
     // Inline modes of all other functions; all enable planner inline power control
     static inline void set_inline_enabled(const bool enable) {
-      if (enable) { inline_power(cpwr_to_upwr(SPEED_POWER_STARTUP)); }
-      else { unitPower = 0; isReady = false; menuPower = 0; TERN(SPINDLE_LASER_PWM, inline_ocr_power, inline_power)(0);}
+      if (enable)
+        inline_power(cpwr_to_upwr(SPEED_POWER_STARTUP)); 
+      else {
+        isReady = false;
+        unitPower = menuPower = 0;
+        planner.laser_inline.status.isPlanned = false;
+        TERN(SPINDLE_LASER_PWM, inline_ocr_power, inline_power)(0);
+      }
     }
 
     // Set the power for subsequent movement blocks
     static void inline_power(const cutter_power_t upwr) {
-      unitPower = upwr;
-      menuPower = unitPower;
+      unitPower = menuPower = upwr;
       #if ENABLED(SPINDLE_LASER_PWM)
-          isReady = true;
         #if ENABLED(SPEED_POWER_RELATIVE) && !CUTTER_UNIT_IS(RPM) // relative mode does not turn laser off at 0, except for RPM
-          planner.laser_inline.status = 0x03;
+          planner.laser_inline.status.isEnabled = true;
           planner.laser_inline.power = upower_to_ocr(upwr);
+          isReady = true;
         #else
-          if (upwr > 0)
-            inline_ocr_power(upower_to_ocr(upwr));
+          inline_ocr_power(upower_to_ocr(upwr));
         #endif
       #else
-        planner.laser_inline.status = enabled(pwr) ? 0x03 : 0x01;
-        planner.laser_inline.power = pwr;
+        planner.laser_inline.status.isEnabled = enabled(upwr);
+        planner.laser_inline.power = upwr;
         isReady = enabled(upwr);
       #endif
     }
@@ -259,7 +264,8 @@ public:
 
     #if ENABLED(SPINDLE_LASER_PWM)
       static inline void inline_ocr_power(const uint8_t ocrpwr) {
-        planner.laser_inline.status = ocrpwr ? 0x03 : 0x01;
+        isReady = ocrpwr > 0;
+        planner.laser_inline.status.isEnabled = ocrpwr > 0;
         planner.laser_inline.power = ocrpwr;
       }
     #endif

commit eda2fd8dbea69cb8f571f2992cb11334b2cb7a2f
Author: Luu Lac <45380455+shitcreek@users.noreply.github.com>
Date:   Mon Jun 8 00:47:31 2020 -0500

    Improvements for Laser / Spindle (#17661)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 2e86395098..e3aa4023c0 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -34,87 +34,146 @@
   #include "../module/planner.h"
 #endif
 
+#define PCT_TO_PWM(X) ((X) * 255 / 100)
+
+#ifndef SPEED_POWER_INTERCEPT
+  #define SPEED_POWER_INTERCEPT 0
+#endif
+#define SPEED_POWER_FLOOR TERN(CUTTER_POWER_RELATIVE, SPEED_POWER_MIN, 0)
+
+// #define _MAP(N,S1,S2,D1,D2) ((N)*_MAX((D2)-(D1),0)/_MAX((S2)-(S1),1)+(D1))
+
 class SpindleLaser {
 public:
-  static bool isOn;                             //  state to determine when to apply setPower to power
-  static cutter_power_t power;
-  static cutter_setPower_t setPower;            //  spindle/laser menu set power; in PWM, Percentage or RPM
-  #if ENABLED(MARLIN_DEV_MODE)
-    static cutter_frequency_t frequency;        //  set PWM frequency; range: 2K-50K
-  #endif
+  static constexpr float
+    min_pct = round(TERN(CUTTER_POWER_RELATIVE, 0, (100 * float(SPEED_POWER_MIN) / TERN(SPINDLE_FEATURE, float(SPEED_POWER_MAX), 100)))),
+    max_pct = round(TERN(SPINDLE_FEATURE, 100, float(SPEED_POWER_MAX)));
 
-  static cutter_setPower_t interpret_power(const float pwr) {     // convert speed/power to configured PWM, Percentage or RPM in relative or normal range
-    #if CUTTER_DISPLAY_IS(PERCENT)
-      return (pwr / SPEED_POWER_MAX) * 100;                                               // to percent
-    #elif CUTTER_DISPLAY_IS(RPM)                                                          // to RPM is unaltered
-      return pwr;
-    #else                                                                                 // to PWM
-      #if ENABLED(CUTTER_POWER_RELATIVE)
-        return (pwr - SPEED_POWER_MIN) / (SPEED_POWER_MAX - SPEED_POWER_MIN) * 255;     // using rpm range as relative percentage
-      #else
-        return (pwr / SPEED_POWER_MAX) * 255;
-      #endif
-    #endif
+  static const inline uint8_t pct_to_ocr(const float pct) { return uint8_t(PCT_TO_PWM(pct)); }
+
+  // cpower = configured values (ie SPEED_POWER_MAX)
+  static const inline uint8_t cpwr_to_pct(const cutter_cpower_t cpwr) { // configured value to pct
+    return unitPower ? round(100 * (cpwr - SPEED_POWER_FLOOR) / (SPEED_POWER_MAX - SPEED_POWER_FLOOR)) : 0;
   }
-  /**
-  * Translate speed/power --> percentage --> PWM value
-  **/
-  static cutter_power_t translate_power(const float pwr) {
-    float pwrpc;
-    #if CUTTER_DISPLAY_IS(PERCENT)
-      pwrpc = pwr;
-    #elif CUTTER_DISPLAY_IS(RPM)            // RPM to percent
-     #if ENABLED(CUTTER_POWER_RELATIVE)
-        pwrpc = (pwr - SPEED_POWER_MIN) / (SPEED_POWER_MAX - SPEED_POWER_MIN) * 100;
-      #else
-        pwrpc = pwr / SPEED_POWER_MAX * 100;
-      #endif
-    #else
-      return pwr;                           // PWM
-    #endif
 
-    #if ENABLED(SPINDLE_FEATURE)
-      #if ENABLED(CUTTER_POWER_RELATIVE)
-        constexpr float spmin = 0;
+  // Convert a configured value (cpower)(ie SPEED_POWER_STARTUP) to unit power (upwr, upower),
+  // which can be PWM, Percent, or RPM (rel/abs).
+  static const inline cutter_power_t cpwr_to_upwr(const cutter_cpower_t cpwr) { // STARTUP power to Unit power
+    const cutter_power_t upwr = (
+      #if ENABLED(SPINDLE_FEATURE)
+        // Spindle configured values are in RPM
+        #if CUTTER_UNIT_IS(RPM)
+          cpwr                            // to RPM
+        #elif CUTTER_UNIT_IS(PERCENT)     // to PCT
+          cpwr_to_pct(cpwr)
+        #else                             // to PWM
+          PCT_TO_PWM(cpwr_to_pct(cpwr))
+        #endif
       #else
-        constexpr float spmin = SPEED_POWER_MIN / SPEED_POWER_MAX * 100; // convert to percentage
+        // Laser configured values are in PCT
+        #if CUTTER_UNIT_IS(PWM255)
+          PCT_TO_PWM(cpwr)
+        #else
+          cpwr                            // to RPM/PCT
+        #endif
       #endif
-      constexpr float spmax = 100;
-    #else
-      constexpr float spmin = SPEED_POWER_MIN;
-      constexpr float spmax = SPEED_POWER_MAX;
-    #endif
-
-    constexpr float inv_slope = RECIPROCAL(SPEED_POWER_SLOPE),
-                    min_ocr = (spmin - (SPEED_POWER_INTERCEPT)) * inv_slope,         // Minimum allowed
-                    max_ocr = (spmax - (SPEED_POWER_INTERCEPT)) * inv_slope;         // Maximum allowed
-    float ocr_val;
-    if (pwrpc < spmin) ocr_val = min_ocr;                                           // Use minimum if set below
-    else if (pwrpc > spmax) ocr_val = max_ocr;                                      // Use maximum if set above
-    else ocr_val = (pwrpc - (SPEED_POWER_INTERCEPT)) * inv_slope;                   // Use calculated OCR value
-    return ocr_val;                                                                 // ...limited to Atmel PWM max
+    );
+    return upwr;
   }
 
+  static const cutter_power_t mpower_min() { return cpwr_to_upwr(SPEED_POWER_MIN); }
+  static const cutter_power_t mpower_max() { return cpwr_to_upwr(SPEED_POWER_MAX); }
+
+  static bool isReady;                    // Ready to apply power setting from the UI to OCR
+  static uint8_t power;
+
+  #if ENABLED(MARLIN_DEV_MODE)
+    static cutter_frequency_t frequency;  // Set PWM frequency; range: 2K-50K
+  #endif
+
+  static cutter_power_t menuPower;        // Power as set via LCD menu in PWM, Percentage or RPM
+  static cutter_power_t unitPower;        // Power as displayed status in PWM, Percentage or RPM
+
   static void init();
 
-  // Modifying this function should update everywhere
-  static inline bool enabled(const cutter_power_t pwr) { return pwr > 0; }
-  static inline bool enabled() { return enabled(power); }
   #if ENABLED(MARLIN_DEV_MODE)
     static inline void refresh_frequency() { set_pwm_frequency(pin_t(SPINDLE_LASER_PWM_PIN), frequency); }
   #endif
-  static void apply_power(const cutter_power_t inpow);
+
+  // Modifying this function should update everywhere
+  static inline bool enabled(const cutter_power_t opwr) { return opwr > 0; }
+  static inline bool enabled() { return enabled(power); }
+
+  static void apply_power(const uint8_t inpow);
 
   FORCE_INLINE static void refresh() { apply_power(power); }
-  FORCE_INLINE static void set_power(const cutter_power_t pwr) { power = pwr; refresh(); }
+  FORCE_INLINE static void set_power(const uint8_t upwr) { power = upwr; refresh(); }
 
-  static inline void set_enabled(const bool enable) { set_power(enable ? (power ?: interpret_power(SPEED_POWER_STARTUP)) : 0); }
+  static inline void set_enabled(const bool enable) { set_power(enable ? (power ?: (unitPower ? upower_to_ocr(cpwr_to_upwr(SPEED_POWER_STARTUP)) : 0)) : 0); }
 
   #if ENABLED(SPINDLE_LASER_PWM)
+
     static void set_ocr(const uint8_t ocr);
-    static inline void set_ocr_power(const uint8_t pwr) { power = pwr; set_ocr(pwr); }
-    // static uint8_t translate_power(const cutter_power_t pwr); // Used by update output for power->OCR translation
-  #endif
+    static inline void set_ocr_power(const uint8_t ocr) { power = ocr; set_ocr(ocr); }
+    static void ocr_off();
+    // Used to update output for power->OCR translation
+    static inline uint8_t upower_to_ocr(const cutter_power_t upwr) {
+      return (
+        #if CUTTER_UNIT_IS(PWM255)
+          uint8_t(upwr)
+        #elif CUTTER_UNIT_IS(PERCENT)
+          pct_to_ocr(upwr)
+        #else
+          uint8_t(pct_to_ocr(cpwr_to_pct(upwr)))
+        #endif
+      );
+    }
+
+    // Correct power to configured range
+    static inline cutter_power_t power_to_range(const cutter_power_t pwr) {
+      return power_to_range(pwr, (
+        #if CUTTER_UNIT_IS(PWM255)
+          0
+        #elif CUTTER_UNIT_IS(PERCENT)
+          1
+        #elif CUTTER_UNIT_IS(RPM)
+          2
+        #else
+          #error "???"
+        #endif
+      ));
+    }
+    static inline cutter_power_t power_to_range(const cutter_power_t pwr, const uint8_t pwrUnit) {
+      if (pwr <= 0) return 0;
+      cutter_power_t upwr;
+      switch (pwrUnit) {
+        case 0:                                                 // PWM
+          upwr = (
+              (pwr < pct_to_ocr(min_pct)) ? pct_to_ocr(min_pct) // Use minimum if set below
+            : (pwr > pct_to_ocr(max_pct)) ? pct_to_ocr(max_pct) // Use maximum if set above
+            :  pwr
+          );
+          break;
+        case 1:                                                 // PERCENT
+          upwr = (
+              (pwr < min_pct) ? min_pct                         // Use minimum if set below
+            : (pwr > max_pct) ? max_pct                         // Use maximum if set above
+            :  pwr                                              // PCT
+          );
+          break;
+        case 2:                                                 // RPM
+          upwr = (
+              (pwr < SPEED_POWER_MIN) ? SPEED_POWER_MIN         // Use minimum if set below
+            : (pwr > SPEED_POWER_MAX) ? SPEED_POWER_MAX         // Use maximum if set above
+            : pwr                                               // Calculate OCR value
+          );
+          break;
+        default: break;
+      }
+      return upwr;
+    }
+
+  #endif // SPINDLE_LASER_PWM
 
   // Wait for spindle to spin up or spin down
   static inline void power_delay(const bool on) {
@@ -129,37 +188,82 @@ public:
     static inline void set_direction(const bool) {}
   #endif
 
-  static inline void disable() { isOn = false; set_enabled(false); }
+  static inline void disable() { isReady = false; set_enabled(false); }
+
   #if HAS_LCD_MENU
-    static inline void enable_forward() { isOn = true; setPower ? (power = setPower) : (setPower = interpret_power(SPEED_POWER_STARTUP)); set_direction(false); set_enabled(true); }
-    static inline void enable_reverse() { isOn = true; setPower ? (power = setPower) : (setPower = interpret_power(SPEED_POWER_STARTUP)); set_direction(true); set_enabled(true); }
+
+    static inline void enable_with_dir(const bool reverse) {
+      isReady = true;
+      const uint8_t ocr = upower_to_ocr(menuPower);
+      if (menuPower)
+        power = ocr;
+      else
+        menuPower = cpwr_to_upwr(SPEED_POWER_STARTUP);
+      unitPower = menuPower;
+      set_direction(reverse);
+      set_enabled(true);
+    }
+    FORCE_INLINE static void enable_forward() { enable_with_dir(false); }
+    FORCE_INLINE static void enable_reverse() { enable_with_dir(true); }
+
+    #if ENABLED(SPINDLE_LASER_PWM)
+      static inline void update_from_mpower() {
+        if (isReady) power = upower_to_ocr(menuPower);
+        unitPower = menuPower;
+      }
+    #endif
+
   #endif
 
   #if ENABLED(LASER_POWER_INLINE)
+    /**
+     * Inline power adds extra fields to the planner block
+     * to handle laser power and scale to movement speed.
+     */
+
     // Force disengage planner power control
-    static inline void inline_disable() { planner.laser.status = 0; planner.laser.power = 0; isOn = false;}
+    static inline void inline_disable()	{
+      isReady = false;
+      unitPower = 0;
+      planner.laser_inline.status = 0;
+      planner.laser_inline.power = 0;
+    }
 
     // Inline modes of all other functions; all enable planner inline power control
-    static inline void inline_enabled(const bool enable) { enable ? inline_power(SPEED_POWER_STARTUP) : inline_ocr_power(0); }
+    static inline void set_inline_enabled(const bool enable) {
+      if (enable) { inline_power(cpwr_to_upwr(SPEED_POWER_STARTUP)); }
+      else { unitPower = 0; isReady = false; menuPower = 0; TERN(SPINDLE_LASER_PWM, inline_ocr_power, inline_power)(0);}
+    }
 
-    static void inline_power(const cutter_power_t pwr) {
+    // Set the power for subsequent movement blocks
+    static void inline_power(const cutter_power_t upwr) {
+      unitPower = upwr;
+      menuPower = unitPower;
       #if ENABLED(SPINDLE_LASER_PWM)
-        inline_ocr_power(translate_power(pwr));
+          isReady = true;
+        #if ENABLED(SPEED_POWER_RELATIVE) && !CUTTER_UNIT_IS(RPM) // relative mode does not turn laser off at 0, except for RPM
+          planner.laser_inline.status = 0x03;
+          planner.laser_inline.power = upower_to_ocr(upwr);
+        #else
+          if (upwr > 0)
+            inline_ocr_power(upower_to_ocr(upwr));
+        #endif
       #else
-        planner.laser.status = enabled(pwr) ? 0x03 : 0x01;
-        planner.laser.power = pwr;
+        planner.laser_inline.status = enabled(pwr) ? 0x03 : 0x01;
+        planner.laser_inline.power = pwr;
+        isReady = enabled(upwr);
       #endif
     }
 
-    static inline void inline_direction(const bool reverse) { UNUSED(reverse); } // TODO is this ever going to be needed
+    static inline void inline_direction(const bool) { /* never */ }
 
     #if ENABLED(SPINDLE_LASER_PWM)
-      static inline void inline_ocr_power(const uint8_t pwr) {
-        planner.laser.status = pwr ? 0x03 : 0x01;
-        planner.laser.power = pwr;
+      static inline void inline_ocr_power(const uint8_t ocrpwr) {
+        planner.laser_inline.status = ocrpwr ? 0x03 : 0x01;
+        planner.laser_inline.power = ocrpwr;
       }
     #endif
-  #endif
+  #endif  // LASER_POWER_INLINE
 
   static inline void kill() {
     TERN_(LASER_POWER_INLINE, inline_disable());

commit 181739d0d1a54ab01c4f97678f04ae43ebb1facd
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 12 00:09:18 2020 -0500

    Move inline laser state to fix EEPROM error

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 0c2e569aa6..2e86395098 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -137,7 +137,7 @@ public:
 
   #if ENABLED(LASER_POWER_INLINE)
     // Force disengage planner power control
-    static inline void inline_disable() { planner.settings.laser.status = 0; planner.settings.laser.power = 0; isOn = false;}
+    static inline void inline_disable() { planner.laser.status = 0; planner.laser.power = 0; isOn = false;}
 
     // Inline modes of all other functions; all enable planner inline power control
     static inline void inline_enabled(const bool enable) { enable ? inline_power(SPEED_POWER_STARTUP) : inline_ocr_power(0); }
@@ -146,8 +146,8 @@ public:
       #if ENABLED(SPINDLE_LASER_PWM)
         inline_ocr_power(translate_power(pwr));
       #else
-        planner.settings.laser.status = enabled(pwr) ? 0x03 : 0x01;
-        planner.settings.laser.power = pwr;
+        planner.laser.status = enabled(pwr) ? 0x03 : 0x01;
+        planner.laser.power = pwr;
       #endif
     }
 
@@ -155,8 +155,8 @@ public:
 
     #if ENABLED(SPINDLE_LASER_PWM)
       static inline void inline_ocr_power(const uint8_t pwr) {
-        planner.settings.laser.status = pwr ? 0x03 : 0x01;
-        planner.settings.laser.power = pwr;
+        planner.laser.status = pwr ? 0x03 : 0x01;
+        planner.laser.power = pwr;
       }
     #endif
   #endif

commit 6d90d1e1f552dca5e21bc61b676b8e8ce731b280
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 22 16:35:03 2020 -0500

    Apply TERN to compact code (#17619)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 3d7ab6c360..0c2e569aa6 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -162,9 +162,7 @@ public:
   #endif
 
   static inline void kill() {
-    #if ENABLED(LASER_POWER_INLINE)
-      inline_disable();
-    #endif
+    TERN_(LASER_POWER_INLINE, inline_disable());
     disable();
   }
 };

commit df8b7dfc406be095a62b5445b69c40034d418823
Author: Ben <jediminer543@users.noreply.github.com>
Date:   Fri Apr 3 01:31:08 2020 +0100

    Various Laser / Spindle improvements (#15335)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index ea035299be..3d7ab6c360 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -28,55 +28,98 @@
 
 #include "../inc/MarlinConfig.h"
 
-#if ENABLED(SPINDLE_FEATURE)
-  #define _MSG_CUTTER(M) MSG_SPINDLE_##M
-#else
-  #define _MSG_CUTTER(M) MSG_LASER_##M
-#endif
-#define MSG_CUTTER(M) _MSG_CUTTER(M)
-
-#if SPEED_POWER_MAX > 255
-  typedef uint16_t cutter_power_t;
-  #define CUTTER_MENU_TYPE uint16_5
-#else
-  typedef uint8_t cutter_power_t;
-  #define CUTTER_MENU_TYPE uint8
+#include "spindle_laser_types.h"
+
+#if ENABLED(LASER_POWER_INLINE)
+  #include "../module/planner.h"
 #endif
 
 class SpindleLaser {
 public:
+  static bool isOn;                             //  state to determine when to apply setPower to power
   static cutter_power_t power;
-  static inline uint8_t powerPercent(const uint8_t pp) { return ui8_to_percent(pp); } // for display
-
-  static void init();
-
-  static inline bool enabled() { return !!power; }
+  static cutter_setPower_t setPower;            //  spindle/laser menu set power; in PWM, Percentage or RPM
+  #if ENABLED(MARLIN_DEV_MODE)
+    static cutter_frequency_t frequency;        //  set PWM frequency; range: 2K-50K
+  #endif
 
-  static inline void set_power(const cutter_power_t pwr) { power = pwr; }
+  static cutter_setPower_t interpret_power(const float pwr) {     // convert speed/power to configured PWM, Percentage or RPM in relative or normal range
+    #if CUTTER_DISPLAY_IS(PERCENT)
+      return (pwr / SPEED_POWER_MAX) * 100;                                               // to percent
+    #elif CUTTER_DISPLAY_IS(RPM)                                                          // to RPM is unaltered
+      return pwr;
+    #else                                                                                 // to PWM
+      #if ENABLED(CUTTER_POWER_RELATIVE)
+        return (pwr - SPEED_POWER_MIN) / (SPEED_POWER_MAX - SPEED_POWER_MIN) * 255;     // using rpm range as relative percentage
+      #else
+        return (pwr / SPEED_POWER_MAX) * 255;
+      #endif
+    #endif
+  }
+  /**
+  * Translate speed/power --> percentage --> PWM value
+  **/
+  static cutter_power_t translate_power(const float pwr) {
+    float pwrpc;
+    #if CUTTER_DISPLAY_IS(PERCENT)
+      pwrpc = pwr;
+    #elif CUTTER_DISPLAY_IS(RPM)            // RPM to percent
+     #if ENABLED(CUTTER_POWER_RELATIVE)
+        pwrpc = (pwr - SPEED_POWER_MIN) / (SPEED_POWER_MAX - SPEED_POWER_MIN) * 100;
+      #else
+        pwrpc = pwr / SPEED_POWER_MAX * 100;
+      #endif
+    #else
+      return pwr;                           // PWM
+    #endif
 
-  static inline void refresh() { apply_power(power); }
+    #if ENABLED(SPINDLE_FEATURE)
+      #if ENABLED(CUTTER_POWER_RELATIVE)
+        constexpr float spmin = 0;
+      #else
+        constexpr float spmin = SPEED_POWER_MIN / SPEED_POWER_MAX * 100; // convert to percentage
+      #endif
+      constexpr float spmax = 100;
+    #else
+      constexpr float spmin = SPEED_POWER_MIN;
+      constexpr float spmax = SPEED_POWER_MAX;
+    #endif
 
-  static inline void set_enabled(const bool enable) {
-    const bool was = enabled();
-    set_power(enable ? 255 : 0);
-    if (was != enable) power_delay();
+    constexpr float inv_slope = RECIPROCAL(SPEED_POWER_SLOPE),
+                    min_ocr = (spmin - (SPEED_POWER_INTERCEPT)) * inv_slope,         // Minimum allowed
+                    max_ocr = (spmax - (SPEED_POWER_INTERCEPT)) * inv_slope;         // Maximum allowed
+    float ocr_val;
+    if (pwrpc < spmin) ocr_val = min_ocr;                                           // Use minimum if set below
+    else if (pwrpc > spmax) ocr_val = max_ocr;                                      // Use maximum if set above
+    else ocr_val = (pwrpc - (SPEED_POWER_INTERCEPT)) * inv_slope;                   // Use calculated OCR value
+    return ocr_val;                                                                 // ...limited to Atmel PWM max
   }
 
+  static void init();
+
+  // Modifying this function should update everywhere
+  static inline bool enabled(const cutter_power_t pwr) { return pwr > 0; }
+  static inline bool enabled() { return enabled(power); }
+  #if ENABLED(MARLIN_DEV_MODE)
+    static inline void refresh_frequency() { set_pwm_frequency(pin_t(SPINDLE_LASER_PWM_PIN), frequency); }
+  #endif
   static void apply_power(const cutter_power_t inpow);
 
-  //static bool active() { return READ(SPINDLE_LASER_ENA_PIN) == SPINDLE_LASER_ACTIVE_HIGH; }
+  FORCE_INLINE static void refresh() { apply_power(power); }
+  FORCE_INLINE static void set_power(const cutter_power_t pwr) { power = pwr; refresh(); }
 
-  static void update_output();
+  static inline void set_enabled(const bool enable) { set_power(enable ? (power ?: interpret_power(SPEED_POWER_STARTUP)) : 0); }
 
   #if ENABLED(SPINDLE_LASER_PWM)
     static void set_ocr(const uint8_t ocr);
-    static inline void set_ocr_power(const cutter_power_t pwr) { power = pwr; set_ocr(pwr); }
+    static inline void set_ocr_power(const uint8_t pwr) { power = pwr; set_ocr(pwr); }
+    // static uint8_t translate_power(const cutter_power_t pwr); // Used by update output for power->OCR translation
   #endif
 
   // Wait for spindle to spin up or spin down
-  static inline void power_delay() {
-    #if SPINDLE_LASER_POWERUP_DELAY || SPINDLE_LASER_POWERDOWN_DELAY
-      safe_delay(enabled() ? SPINDLE_LASER_POWERUP_DELAY : SPINDLE_LASER_POWERDOWN_DELAY);
+  static inline void power_delay(const bool on) {
+    #if DISABLED(LASER_POWER_INLINE)
+      safe_delay(on ? SPINDLE_LASER_POWERUP_DELAY : SPINDLE_LASER_POWERDOWN_DELAY);
     #endif
   }
 
@@ -86,10 +129,44 @@ public:
     static inline void set_direction(const bool) {}
   #endif
 
-  static inline void disable() { set_enabled(false); }
-  static inline void enable_forward() { set_direction(false); set_enabled(true); }
-  static inline void enable_reverse() { set_direction(true); set_enabled(true); }
+  static inline void disable() { isOn = false; set_enabled(false); }
+  #if HAS_LCD_MENU
+    static inline void enable_forward() { isOn = true; setPower ? (power = setPower) : (setPower = interpret_power(SPEED_POWER_STARTUP)); set_direction(false); set_enabled(true); }
+    static inline void enable_reverse() { isOn = true; setPower ? (power = setPower) : (setPower = interpret_power(SPEED_POWER_STARTUP)); set_direction(true); set_enabled(true); }
+  #endif
 
+  #if ENABLED(LASER_POWER_INLINE)
+    // Force disengage planner power control
+    static inline void inline_disable() { planner.settings.laser.status = 0; planner.settings.laser.power = 0; isOn = false;}
+
+    // Inline modes of all other functions; all enable planner inline power control
+    static inline void inline_enabled(const bool enable) { enable ? inline_power(SPEED_POWER_STARTUP) : inline_ocr_power(0); }
+
+    static void inline_power(const cutter_power_t pwr) {
+      #if ENABLED(SPINDLE_LASER_PWM)
+        inline_ocr_power(translate_power(pwr));
+      #else
+        planner.settings.laser.status = enabled(pwr) ? 0x03 : 0x01;
+        planner.settings.laser.power = pwr;
+      #endif
+    }
+
+    static inline void inline_direction(const bool reverse) { UNUSED(reverse); } // TODO is this ever going to be needed
+
+    #if ENABLED(SPINDLE_LASER_PWM)
+      static inline void inline_ocr_power(const uint8_t pwr) {
+        planner.settings.laser.status = pwr ? 0x03 : 0x01;
+        planner.settings.laser.power = pwr;
+      }
+    #endif
+  #endif
+
+  static inline void kill() {
+    #if ENABLED(LASER_POWER_INLINE)
+      inline_disable();
+    #endif
+    disable();
+  }
 };
 
 extern SpindleLaser cutter;

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 26d7c301b4..ea035299be 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit 01e4b0c067c23defa78a7c68bef872f132728875
Author: Luu Lac <45380455+shitcreek@users.noreply.github.com>
Date:   Sun Dec 1 21:20:15 2019 -0600

    Add Laser / Spindle bitmap for LCD (#16068)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 80b57be314..26d7c301b4 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -46,6 +46,7 @@
 class SpindleLaser {
 public:
   static cutter_power_t power;
+  static inline uint8_t powerPercent(const uint8_t pp) { return ui8_to_percent(pp); } // for display
 
   static void init();
 

commit b7b303f4bfbced9f7a242a87af0f50d4cb24d8ae
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Oct 15 16:10:20 2019 -0500

    Spindle/Laser power in planner blocks (#14437)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 133152a911..80b57be314 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -36,10 +36,10 @@
 #define MSG_CUTTER(M) _MSG_CUTTER(M)
 
 #if SPEED_POWER_MAX > 255
-  #define cutter_power_t   uint16_t
+  typedef uint16_t cutter_power_t;
   #define CUTTER_MENU_TYPE uint16_5
 #else
-  #define cutter_power_t   uint8_t
+  typedef uint8_t cutter_power_t;
   #define CUTTER_MENU_TYPE uint8
 #endif
 
@@ -51,9 +51,17 @@ public:
 
   static inline bool enabled() { return !!power; }
 
-  static inline void set_power(const uint8_t pwr) { power = pwr; update_output(); }
+  static inline void set_power(const cutter_power_t pwr) { power = pwr; }
 
-  static inline void set_enabled(const bool enable) { set_power(enable ? 255 : 0); }
+  static inline void refresh() { apply_power(power); }
+
+  static inline void set_enabled(const bool enable) {
+    const bool was = enabled();
+    set_power(enable ? 255 : 0);
+    if (was != enable) power_delay();
+  }
+
+  static void apply_power(const cutter_power_t inpow);
 
   //static bool active() { return READ(SPINDLE_LASER_ENA_PIN) == SPINDLE_LASER_ACTIVE_HIGH; }
 
@@ -61,11 +69,15 @@ public:
 
   #if ENABLED(SPINDLE_LASER_PWM)
     static void set_ocr(const uint8_t ocr);
-    static inline void set_ocr_power(const uint8_t pwr) { power = pwr; set_ocr(pwr); }
+    static inline void set_ocr_power(const cutter_power_t pwr) { power = pwr; set_ocr(pwr); }
   #endif
 
   // Wait for spindle to spin up or spin down
-  static inline void power_delay(const bool on) { safe_delay(on ? SPINDLE_LASER_POWERUP_DELAY : SPINDLE_LASER_POWERDOWN_DELAY); }
+  static inline void power_delay() {
+    #if SPINDLE_LASER_POWERUP_DELAY || SPINDLE_LASER_POWERDOWN_DELAY
+      safe_delay(enabled() ? SPINDLE_LASER_POWERUP_DELAY : SPINDLE_LASER_POWERDOWN_DELAY);
+    #endif
+  }
 
   #if ENABLED(SPINDLE_CHANGE_DIR)
     static void set_direction(const bool reverse);

commit e3fd0519b323182a3d096eca8209c4eaf56b6802
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Sep 30 21:44:07 2019 -0500

    Reduce need for UNUSED

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index ddc89b5add..133152a911 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -70,7 +70,7 @@ public:
   #if ENABLED(SPINDLE_CHANGE_DIR)
     static void set_direction(const bool reverse);
   #else
-    static inline void set_direction(const bool reverse) { UNUSED(reverse); }
+    static inline void set_direction(const bool) {}
   #endif
 
   static inline void disable() { set_enabled(false); }

commit 021c4ccf5fa0aca0a742fd549cc390242bf17211
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jul 5 18:39:27 2019 -0500

    Fix SpindleLaser class
    
    Fix #14465

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index 5d70895ef5..ddc89b5add 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -57,12 +57,11 @@ public:
 
   //static bool active() { return READ(SPINDLE_LASER_ENA_PIN) == SPINDLE_LASER_ACTIVE_HIGH; }
 
+  static void update_output();
+
   #if ENABLED(SPINDLE_LASER_PWM)
-    static void update_output();
     static void set_ocr(const uint8_t ocr);
     static inline void set_ocr_power(const uint8_t pwr) { power = pwr; set_ocr(pwr); }
-  #else
-    static inline void update_output() { }
   #endif
 
   // Wait for spindle to spin up or spin down

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
index cb514d5f3e..5d70895ef5 100644
--- a/Marlin/src/feature/spindle_laser.h
+++ b/Marlin/src/feature/spindle_laser.h
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit d7d80418aedad1c89e27fcba6aab9aa48187b5cc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jun 27 23:06:49 2019 -0500

    Singleton for cutting tools (#14429)

diff --git a/Marlin/src/feature/spindle_laser.h b/Marlin/src/feature/spindle_laser.h
new file mode 100644
index 0000000000..cb514d5f3e
--- /dev/null
+++ b/Marlin/src/feature/spindle_laser.h
@@ -0,0 +1,83 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+/**
+ * feature/spindle_laser.h
+ * Support for Laser Power or Spindle Power & Direction
+ */
+
+#include "../inc/MarlinConfig.h"
+
+#if ENABLED(SPINDLE_FEATURE)
+  #define _MSG_CUTTER(M) MSG_SPINDLE_##M
+#else
+  #define _MSG_CUTTER(M) MSG_LASER_##M
+#endif
+#define MSG_CUTTER(M) _MSG_CUTTER(M)
+
+#if SPEED_POWER_MAX > 255
+  #define cutter_power_t   uint16_t
+  #define CUTTER_MENU_TYPE uint16_5
+#else
+  #define cutter_power_t   uint8_t
+  #define CUTTER_MENU_TYPE uint8
+#endif
+
+class SpindleLaser {
+public:
+  static cutter_power_t power;
+
+  static void init();
+
+  static inline bool enabled() { return !!power; }
+
+  static inline void set_power(const uint8_t pwr) { power = pwr; update_output(); }
+
+  static inline void set_enabled(const bool enable) { set_power(enable ? 255 : 0); }
+
+  //static bool active() { return READ(SPINDLE_LASER_ENA_PIN) == SPINDLE_LASER_ACTIVE_HIGH; }
+
+  #if ENABLED(SPINDLE_LASER_PWM)
+    static void update_output();
+    static void set_ocr(const uint8_t ocr);
+    static inline void set_ocr_power(const uint8_t pwr) { power = pwr; set_ocr(pwr); }
+  #else
+    static inline void update_output() { }
+  #endif
+
+  // Wait for spindle to spin up or spin down
+  static inline void power_delay(const bool on) { safe_delay(on ? SPINDLE_LASER_POWERUP_DELAY : SPINDLE_LASER_POWERDOWN_DELAY); }
+
+  #if ENABLED(SPINDLE_CHANGE_DIR)
+    static void set_direction(const bool reverse);
+  #else
+    static inline void set_direction(const bool reverse) { UNUSED(reverse); }
+  #endif
+
+  static inline void disable() { set_enabled(false); }
+  static inline void enable_forward() { set_direction(false); set_enabled(true); }
+  static inline void enable_reverse() { set_direction(true); set_enabled(true); }
+
+};
+
+extern SpindleLaser cutter;
