commit 6c018eb7703d9c859a065631553bf2af3ad1aaca
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon May 20 01:01:05 2024 -0400

    üìù Update some G-code and other comments  (#27034)

diff --git a/Marlin/src/feature/bedlevel/bdl/bdl.cpp b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
index d469bb0c06..7e9d583cc1 100644
--- a/Marlin/src/feature/bedlevel/bdl/bdl.cpp
+++ b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
@@ -46,10 +46,16 @@ BDS_Leveling bdl;
 #define DEBUG_OUT ENABLED(DEBUG_OUT_BD)
 #include "../../../core/debug_out.h"
 
-// M102 S-5   Read raw Calibrate data
-// M102 S-6   Start Calibrate
-// M102 S4    Set the adjustable Z height value (e.g., 'M102 S4' means it will do adjusting while the Z height <= 0.4mm , disable with 'M102 S0'.)
-// M102 S-1   Read sensor information
+/**
+ * M102 S<#> : Set adjustable Z height in 0.1mm units (10ths of a mm)
+ *             (e.g., 'M102 S4' enables adjusting for Z <= 0.4mm)
+ * M102 S0   : Disable adjustable Z height
+ *
+ * M102 S-1  : Read BDsensor version
+ * M102 S-2  : Read BDsensor distance value
+ * M102 S-5  : Read raw Calibration data
+ * M102 S-6  : Start Calibration
+ */
 
 #define MAX_BD_HEIGHT                 4.0f
 #define CMD_READ_VERSION              1016

commit 06710e54de8c83af77a4f57d458f6463fbfcad93
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Wed Dec 13 00:33:03 2023 -0500

    ‚ú® EDITABLE_DISPLAY_TIMEOUT (#26517)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/bedlevel/bdl/bdl.cpp b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
index 5345bb78c5..d469bb0c06 100644
--- a/Marlin/src/feature/bedlevel/bdl/bdl.cpp
+++ b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
@@ -195,7 +195,7 @@ void BDS_Leveling::process() {
       safe_delay(10);
       if (config_state == BDS_CALIBRATE_START) {
         config_state = BDS_CALIBRATING;
-        REMEMBER(gsit, gcode.stepper_inactive_time, SEC_TO_MS(60 * 5));
+        REMEMBER(gsit, gcode.stepper_inactive_time, MIN_TO_MS(5));
         SERIAL_ECHOLNPGM("c_z0:", planner.get_axis_position_mm(Z_AXIS), "-", pos_zero_offset);
 
         // Move the z axis instead of enabling the Z axis with M17

commit ffef8f1b297e83aa37eeb5ffcc5369e5c9c42a09
Author: Mark <niujl123@sina.com>
Date:   Mon Aug 7 12:33:20 2023 +0800

    üö∏ BD Sensor Z axis stop height (#26015)

diff --git a/Marlin/src/feature/bedlevel/bdl/bdl.cpp b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
index 14989a07d3..5345bb78c5 100644
--- a/Marlin/src/feature/bedlevel/bdl/bdl.cpp
+++ b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
@@ -78,8 +78,8 @@ bool BDS_Leveling::check(const uint16_t data, const bool raw_data/*=false*/, con
     return true; // error
   }
   if (raw_data == true) {
-    if (hicheck && (data & 0x3FF) > 550)
-      SERIAL_ECHOLNPGM("BD Sensor mounted too high!");
+    if (hicheck && (data & 0x3FF) > 400)
+      SERIAL_ECHOLNPGM("Bad BD Sensor height! Recommended distance 0.5-2.0mm");
     else if (!good_data(data))
       SERIAL_ECHOLNPGM("Invalid data, please calibrate.");
     else
@@ -109,7 +109,8 @@ void BDS_Leveling::process() {
   static float zpos = 0.0f;
   const millis_t ms = millis();
   if (ELAPSED(ms, next_check_ms)) { // timed out (or first run)
-    next_check_ms = ms + (config_state < BDS_IDLE ? 200 : 50);   // check at 5Hz or 20Hz
+    // Check at 1KHz, 5Hz, or 20Hz
+    next_check_ms = ms + (config_state == BDS_HOMING_Z ? 1 : (config_state < BDS_IDLE ? 200 : 50));
 
     uint16_t tmp = 0;
     const float cur_z = planner.get_axis_position_mm(Z_AXIS) - pos_zero_offset;
@@ -127,16 +128,14 @@ void BDS_Leveling::process() {
             babystep.set_mm(Z_AXIS, cur_z - z_sensor);
             DEBUG_ECHOLNPGM("BD:", z_sensor, ", Z:", cur_z, "|", current_position.z);
           }
-          else {
-            babystep.set_mm(Z_AXIS, 0);   //if (old_cur_z <= cur_z) Z_DIR_WRITE(HIGH);
-            //stepper.apply_directions();   // TODO: Remove this line as probably not needed
-          }
+          else
+            babystep.set_mm(Z_AXIS, 0);
         }
       #endif
 
       old_cur_z = cur_z;
       old_buf_z = current_position.z;
-      endstops.bdp_state_update(z_sensor <= 0.01f);
+      endstops.bdp_state_update(z_sensor <= BD_SENSOR_HOME_Z_POSITION);
 
       #if HAS_STATUS_MESSAGE
         static float old_z_sensor = 0;
@@ -149,8 +148,10 @@ void BDS_Leveling::process() {
         }
       #endif
     }
-    else
-      stepper.apply_directions();
+    else if (config_state == BDS_HOMING_Z) {
+      SERIAL_ECHOLNPGM("Read:", tmp);
+      kill(F("BDsensor connect Err!"));
+    }
 
     DEBUG_ECHOLNPGM("BD:", tmp & 0x3FF, " Z:", cur_z, "|", current_position.z);
     if (TERN0(DEBUG_OUT_BD, BD_I2C_SENSOR.BD_Check_OddEven(tmp) == 0)) DEBUG_ECHOLNPGM("CRC error");
@@ -233,11 +234,13 @@ void BDS_Leveling::process() {
           sprintf_P(tmp_1, PSTR("G1Z%d.%d"), int(zpos), int(zpos * 10) % 10);
           gcode.process_subcommands_now(tmp_1);
           SERIAL_ECHO(tmp_1); SERIAL_ECHOLNPGM(", Z:", current_position.z);
-          for (float tmp_k = 0; abs(zpos - tmp_k) > 0.004f;) {
+          uint16_t failcount = 300;
+          for (float tmp_k = 0; abs(zpos - tmp_k) > 0.006f && failcount--;) {
             tmp_k = planner.get_axis_position_mm(Z_AXIS) - pos_zero_offset;
             safe_delay(10);
+            if (!failcount--) break;
           }
-          safe_delay(zpos <= 0.4f ? 600 : 100);
+          safe_delay(600);
           tmp = uint16_t((zpos + 0.00001f) * 10);
           BD_I2C_SENSOR.BD_i2c_write(tmp);
           SERIAL_ECHOLNPGM("w:", tmp, ", Z:", zpos);

commit 441416728cd7f0e9b6ebf94f895d1d27fe59d25a
Author: Mark <niujl123@sina.com>
Date:   Sun Jun 18 17:18:08 2023 +0800

    üö∏ Bed distance sensor improvements (#25847)

diff --git a/Marlin/src/feature/bedlevel/bdl/bdl.cpp b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
index 064a8ffbd2..14989a07d3 100644
--- a/Marlin/src/feature/bedlevel/bdl/bdl.cpp
+++ b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
@@ -34,6 +34,7 @@
 #include "../../../module/temperature.h"
 #include "../../../module/endstops.h"
 #include "../../babystep.h"
+#include "../../../lcd/marlinui.h"
 
 // I2C software Master library for segment bed heating and bed distance sensor
 #include <Panda_segmentBed_I2C.h>
@@ -42,6 +43,8 @@
 BDS_Leveling bdl;
 
 //#define DEBUG_OUT_BD
+#define DEBUG_OUT ENABLED(DEBUG_OUT_BD)
+#include "../../../core/debug_out.h"
 
 // M102 S-5   Read raw Calibrate data
 // M102 S-6   Start Calibrate
@@ -49,144 +52,196 @@ BDS_Leveling bdl;
 // M102 S-1   Read sensor information
 
 #define MAX_BD_HEIGHT                 4.0f
+#define CMD_READ_VERSION              1016
 #define CMD_START_READ_CALIBRATE_DATA 1017
 #define CMD_END_READ_CALIBRATE_DATA   1018
 #define CMD_START_CALIBRATE           1019
 #define CMD_END_CALIBRATE             1021
-#define CMD_READ_VERSION  1016
-
-I2C_SegmentBED BD_I2C_SENSOR;
-
 #define BD_SENSOR_I2C_ADDR            0x3C
 
+I2C_SegmentBED BD_I2C_SENSOR;
+float BDS_Leveling::pos_zero_offset;
 int8_t BDS_Leveling::config_state;
-uint8_t BDS_Leveling::homing;
-
-void BDS_Leveling::echo_name() { SERIAL_ECHOPGM("Bed Distance Leveling"); }
 
 void BDS_Leveling::init(uint8_t _sda, uint8_t _scl, uint16_t delay_s) {
-  int ret = BD_I2C_SENSOR.i2c_init(_sda, _scl, BD_SENSOR_I2C_ADDR, delay_s);
-  if (ret != 1) SERIAL_ECHOLNPGM("BD_I2C_SENSOR Init Fail return code:", ret);
-  config_state = 0;
+  config_state = BDS_IDLE;
+  const int ret = BD_I2C_SENSOR.i2c_init(_sda, _scl, BD_SENSOR_I2C_ADDR, delay_s);
+  if (ret != 1) SERIAL_ECHOLNPGM("BD Sensor Init Fail (", ret, ")");
+  sync_plan_position();
+  pos_zero_offset = planner.get_axis_position_mm(Z_AXIS) - current_position.z;
+  SERIAL_ECHOLNPGM("BD Sensor Zero Offset:", pos_zero_offset);
+}
+
+bool BDS_Leveling::check(const uint16_t data, const bool raw_data/*=false*/, const bool hicheck/*=false*/) {
+  if (BD_I2C_SENSOR.BD_Check_OddEven(data) == 0) {
+    SERIAL_ECHOLNPGM("Read Error.");
+    return true; // error
+  }
+  if (raw_data == true) {
+    if (hicheck && (data & 0x3FF) > 550)
+      SERIAL_ECHOLNPGM("BD Sensor mounted too high!");
+    else if (!good_data(data))
+      SERIAL_ECHOLNPGM("Invalid data, please calibrate.");
+    else
+      return false;
+  }
+  else {
+    if ((data & 0x3FF) >= (MAX_BD_HEIGHT) * 100 - 10)
+      SERIAL_ECHOLNPGM("Out of Range.");
+    else
+      return false;
+  }
+  return true; // error
+}
+
+float BDS_Leveling::interpret(const uint16_t data) {
+  return (data & 0x3FF) / 100.0f;
 }
 
 float BDS_Leveling::read() {
-  const uint16_t tmp = BD_I2C_SENSOR.BD_i2c_read();
-  float BD_z = NAN;
-  if (BD_I2C_SENSOR.BD_Check_OddEven(tmp) && (tmp & 0x3FF) < 1020)
-    BD_z = (tmp & 0x3FF) / 100.0f;
-  return BD_z;
+  const uint16_t data = BD_I2C_SENSOR.BD_i2c_read();
+  return check(data) ? NAN : interpret(data);
 }
 
 void BDS_Leveling::process() {
- //if (config_state == 0) return;
- static millis_t next_check_ms = 0; // starting at T=0
- static float z_pose = 0.0f;
- const millis_t ms = millis();
- if (ELAPSED(ms, next_check_ms)) { // timed out (or first run)
-    next_check_ms = ms + (config_state < 0 ? 1000 : 100);   // check at 1Hz or 10Hz
-
-    unsigned short tmp = 0;
-    const float cur_z = planner.get_axis_position_mm(Z_AXIS); //current_position.z
-    static float old_cur_z = cur_z,
-                 old_buf_z = current_position.z;
-
+  if (config_state == BDS_IDLE && printingIsActive()) return;
+  static millis_t next_check_ms = 0; // starting at T=0
+  static float zpos = 0.0f;
+  const millis_t ms = millis();
+  if (ELAPSED(ms, next_check_ms)) { // timed out (or first run)
+    next_check_ms = ms + (config_state < BDS_IDLE ? 200 : 50);   // check at 5Hz or 20Hz
+
+    uint16_t tmp = 0;
+    const float cur_z = planner.get_axis_position_mm(Z_AXIS) - pos_zero_offset;
+    static float old_cur_z = cur_z, old_buf_z = current_position.z;
     tmp = BD_I2C_SENSOR.BD_i2c_read();
-    if (BD_I2C_SENSOR.BD_Check_OddEven(tmp) && (tmp & 0x3FF) < 1020) {
-      const float z_sensor = (tmp & 0x3FF) / 100.0f;
-      if (cur_z < 0) config_state = 0;
-      //float abs_z = current_position.z > cur_z ? (current_position.z - cur_z) : (cur_z - current_position.z);
+    if (BD_I2C_SENSOR.BD_Check_OddEven(tmp) && good_data(tmp)) {
+      const float z_sensor = interpret(tmp);
       #if ENABLED(BABYSTEPPING)
-        if (cur_z < config_state * 0.1f
-          && config_state > 0
-          && old_cur_z == cur_z
-          && old_buf_z == current_position.z
-          && z_sensor < (MAX_BD_HEIGHT)
-        ) {
-          babystep.set_mm(Z_AXIS, cur_z - z_sensor);
-          #if ENABLED(DEBUG_OUT_BD)
-            SERIAL_ECHOLNPGM("BD:", z_sensor, ", Z:", cur_z, "|", current_position.z);
-          #endif
-        }
-        else {
-          babystep.set_mm(Z_AXIS, 0);          //if (old_cur_z <= cur_z) Z_DIR_WRITE(HIGH);
-          stepper.apply_directions();
+        if (config_state > 0) {
+          if (cur_z < config_state * 0.1f
+            && old_cur_z == cur_z
+            && old_buf_z == current_position.z
+            && z_sensor < (MAX_BD_HEIGHT) - 0.1f
+          ) {
+            babystep.set_mm(Z_AXIS, cur_z - z_sensor);
+            DEBUG_ECHOLNPGM("BD:", z_sensor, ", Z:", cur_z, "|", current_position.z);
+          }
+          else {
+            babystep.set_mm(Z_AXIS, 0);   //if (old_cur_z <= cur_z) Z_DIR_WRITE(HIGH);
+            //stepper.apply_directions();   // TODO: Remove this line as probably not needed
+          }
         }
       #endif
+
       old_cur_z = cur_z;
       old_buf_z = current_position.z;
       endstops.bdp_state_update(z_sensor <= 0.01f);
-      //endstops.update();
+
+      #if HAS_STATUS_MESSAGE
+        static float old_z_sensor = 0;
+        if (old_z_sensor != z_sensor) {
+          old_z_sensor = z_sensor;
+          char tmp_1[32];
+          sprintf_P(tmp_1, PSTR("BD:%d.%02dmm"), int(z_sensor), int(z_sensor * 100) % 100);
+          //SERIAL_ECHOLNPGM("Bed Dis:", z_sensor, "mm");
+          ui.set_status(tmp_1, true);
+        }
+      #endif
     }
     else
       stepper.apply_directions();
 
-    #if ENABLED(DEBUG_OUT_BD)
-      SERIAL_ECHOLNPGM("BD:", tmp & 0x3FF, ", Z:", cur_z, "|", current_position.z);
-      if (BD_I2C_SENSOR.BD_Check_OddEven(tmp) == 0) SERIAL_ECHOLNPGM("errorCRC");
-    #endif
+    DEBUG_ECHOLNPGM("BD:", tmp & 0x3FF, " Z:", cur_z, "|", current_position.z);
+    if (TERN0(DEBUG_OUT_BD, BD_I2C_SENSOR.BD_Check_OddEven(tmp) == 0)) DEBUG_ECHOLNPGM("CRC error");
 
-    if ((tmp & 0x3FF) > 1020) {
+    if (!good_data(tmp)) {
       BD_I2C_SENSOR.BD_i2c_stop();
       safe_delay(10);
     }
 
+    // Read version. Usually used as a connection check
+    if (config_state == BDS_VERSION) {
+      config_state = BDS_IDLE;
+      BD_I2C_SENSOR.BD_i2c_write(CMD_READ_VERSION);
+      safe_delay(100);
+      char tmp_1[21];
+      for (int i = 0; i < 19; i++) {
+        tmp_1[i] = BD_I2C_SENSOR.BD_i2c_read() & 0xFF;
+        safe_delay(50);
+      }
+      BD_I2C_SENSOR.BD_i2c_write(CMD_END_READ_CALIBRATE_DATA);
+      SERIAL_ECHOLNPGM("BD Sensor version:", tmp_1);
+      if (tmp_1[0] != 'V') SERIAL_ECHOLNPGM("Read Error. Check connection and delay.");
+      safe_delay(50);
+    }
     // read raw calibrate data
-    if (config_state == -5) {
+    else if (config_state == BDS_READ_RAW) {
       BD_I2C_SENSOR.BD_i2c_write(CMD_START_READ_CALIBRATE_DATA);
-      safe_delay(1000);
+      safe_delay(100);
 
       for (int i = 0; i < MAX_BD_HEIGHT * 10; i++) {
         tmp = BD_I2C_SENSOR.BD_i2c_read();
-        SERIAL_ECHOLNPGM("Calibrate data:", i, ",", tmp & 0x3FF, ", check:", BD_I2C_SENSOR.BD_Check_OddEven(tmp));
-        safe_delay(500);
+        SERIAL_ECHOLNPGM("Calibrate data:", i, ",", tmp & 0x3FF);
+        (void)check(tmp, true, i == 0);
+        safe_delay(50);
       }
-      config_state = 0;
       BD_I2C_SENSOR.BD_i2c_write(CMD_END_READ_CALIBRATE_DATA);
-      safe_delay(500);
+      safe_delay(50);
+      config_state = BDS_IDLE;
     }
-    else if (config_state <= -6) {   // Start Calibrate
-      safe_delay(100);
-      if (config_state == -6) {
-        //BD_I2C_SENSOR.BD_i2c_write(1019); // begin calibrate
-        //delay(1000);
-        gcode.stepper_inactive_time = SEC_TO_MS(60 * 5);
-        gcode.process_subcommands_now(F("M17 Z"));
-        gcode.process_subcommands_now(F("G1 Z0.0"));
-        z_pose = 0;
-        safe_delay(1000);
+    else if (config_state <= BDS_CALIBRATE_START) {   // Start Calibrate
+      safe_delay(10);
+      if (config_state == BDS_CALIBRATE_START) {
+        config_state = BDS_CALIBRATING;
+        REMEMBER(gsit, gcode.stepper_inactive_time, SEC_TO_MS(60 * 5));
+        SERIAL_ECHOLNPGM("c_z0:", planner.get_axis_position_mm(Z_AXIS), "-", pos_zero_offset);
+
+        // Move the z axis instead of enabling the Z axis with M17
+        // TODO: Use do_blocking_move_to_z for synchronized move.
+        current_position.z = 0;
+        sync_plan_position();
+        gcode.process_subcommands_now(F("G1Z0.05"));
+        safe_delay(300);
+        gcode.process_subcommands_now(F("G1Z0.00"));
+        safe_delay(300);
+        current_position.z = 0;
+        sync_plan_position();
+        //safe_delay(1000);
+
+        while ((planner.get_axis_position_mm(Z_AXIS) - pos_zero_offset) > 0.00001f) {
+          safe_delay(200);
+          SERIAL_ECHOLNPGM("waiting cur_z:", planner.get_axis_position_mm(Z_AXIS));
+        }
+        zpos = 0.00001f;
+        safe_delay(100);
         BD_I2C_SENSOR.BD_i2c_write(CMD_START_CALIBRATE); // Begin calibrate
-        SERIAL_ECHOLNPGM("Begin calibrate");
-        safe_delay(2000);
-        config_state = -7;
+        SERIAL_ECHOLNPGM("BD Sensor Calibrating...");
+        safe_delay(200);
       }
-      else if (planner.get_axis_position_mm(Z_AXIS) < 10.0f) {
-        if (z_pose >= MAX_BD_HEIGHT) {
+      else if ((planner.get_axis_position_mm(Z_AXIS) - pos_zero_offset) < 10.0f) {
+        if (zpos >= MAX_BD_HEIGHT) {
+          config_state = BDS_IDLE;
           BD_I2C_SENSOR.BD_i2c_write(CMD_END_CALIBRATE); // End calibrate
-          SERIAL_ECHOLNPGM("End calibrate data");
-          z_pose = 7;
-          config_state = 0;
-          safe_delay(1000);
+          SERIAL_ECHOLNPGM("BD Sensor calibrated.");
+          zpos = 7.0f;
+          safe_delay(500);
         }
         else {
-          float tmp_k = 0;
-          char tmp_1[30];
-          sprintf_P(tmp_1, PSTR("G1 Z%d.%d"), int(z_pose), int(int(z_pose * 10) % 10));
+          char tmp_1[32];
+          // TODO: Use prepare_internal_move_to_destination to guarantee machine space
+          sprintf_P(tmp_1, PSTR("G1Z%d.%d"), int(zpos), int(zpos * 10) % 10);
           gcode.process_subcommands_now(tmp_1);
-
-          SERIAL_ECHO(tmp_1);
-          SERIAL_ECHOLNPGM(" ,Z:", current_position.z);
-
-          while (tmp_k < (z_pose - 0.1f)) {
-            tmp_k = planner.get_axis_position_mm(Z_AXIS);
-            safe_delay(1);
+          SERIAL_ECHO(tmp_1); SERIAL_ECHOLNPGM(", Z:", current_position.z);
+          for (float tmp_k = 0; abs(zpos - tmp_k) > 0.004f;) {
+            tmp_k = planner.get_axis_position_mm(Z_AXIS) - pos_zero_offset;
+            safe_delay(10);
           }
-          safe_delay(800);
-          tmp = (z_pose + 0.0001f) * 10;
+          safe_delay(zpos <= 0.4f ? 600 : 100);
+          tmp = uint16_t((zpos + 0.00001f) * 10);
           BD_I2C_SENSOR.BD_i2c_write(tmp);
-          SERIAL_ECHOLNPGM("w:", tmp, ",Zpose:", z_pose);
-          z_pose += 0.1001f;
-          //queue.enqueue_now_P(PSTR("G90"));
+          SERIAL_ECHOLNPGM("w:", tmp, ", Z:", zpos);
+          zpos += 0.1001f;
         }
       }
     }

commit 2538a7c4d6148d8249f5418a76c58ec483343d2b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 29 21:28:12 2023 -0500

    üßë‚Äçüíª Move DIR inverting to *_DIR_WRITE

diff --git a/Marlin/src/feature/bedlevel/bdl/bdl.cpp b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
index 5ce5e894ca..064a8ffbd2 100644
--- a/Marlin/src/feature/bedlevel/bdl/bdl.cpp
+++ b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
@@ -109,7 +109,7 @@ void BDS_Leveling::process() {
           #endif
         }
         else {
-          babystep.set_mm(Z_AXIS, 0);          //if (old_cur_z <= cur_z) Z_DIR_WRITE(INVERT_DIR(Z, HIGH));
+          babystep.set_mm(Z_AXIS, 0);          //if (old_cur_z <= cur_z) Z_DIR_WRITE(HIGH);
           stepper.apply_directions();
         }
       #endif

commit f0f7ec88823318c7d778e42b4dc7604120943032
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 23 00:47:44 2023 -0500

    üßë‚Äçüíª Stepper::set_directions() => apply_directions()

diff --git a/Marlin/src/feature/bedlevel/bdl/bdl.cpp b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
index e729022f21..5ce5e894ca 100644
--- a/Marlin/src/feature/bedlevel/bdl/bdl.cpp
+++ b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
@@ -110,7 +110,7 @@ void BDS_Leveling::process() {
         }
         else {
           babystep.set_mm(Z_AXIS, 0);          //if (old_cur_z <= cur_z) Z_DIR_WRITE(INVERT_DIR(Z, HIGH));
-          stepper.set_directions();
+          stepper.apply_directions();
         }
       #endif
       old_cur_z = cur_z;
@@ -119,7 +119,7 @@ void BDS_Leveling::process() {
       //endstops.update();
     }
     else
-      stepper.set_directions();
+      stepper.apply_directions();
 
     #if ENABLED(DEBUG_OUT_BD)
       SERIAL_ECHOLNPGM("BD:", tmp & 0x3FF, ", Z:", cur_z, "|", current_position.z);

commit 4aec74f2465a14b2660a2c28e1da39f1013cb521
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Apr 5 11:58:24 2023 -0500

    üêõ INVERT_*_DIR for FT_MOTION (#25637)

diff --git a/Marlin/src/feature/bedlevel/bdl/bdl.cpp b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
index 1a27011a4b..e729022f21 100644
--- a/Marlin/src/feature/bedlevel/bdl/bdl.cpp
+++ b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
@@ -109,7 +109,7 @@ void BDS_Leveling::process() {
           #endif
         }
         else {
-          babystep.set_mm(Z_AXIS, 0);          //if (old_cur_z <= cur_z) Z_DIR_WRITE(!INVERT_Z_DIR);
+          babystep.set_mm(Z_AXIS, 0);          //if (old_cur_z <= cur_z) Z_DIR_WRITE(INVERT_DIR(Z, HIGH));
           stepper.set_directions();
         }
       #endif

commit 42f8cc4606eedeb800c55f5453b114fedc4353b7
Author: Mark <niujl123@sina.com>
Date:   Fri Aug 26 06:50:03 2022 +0800

    üêõ Fix Bed Distance Sensor reading (#24649)

diff --git a/Marlin/src/feature/bedlevel/bdl/bdl.cpp b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
index 0668eb705c..1a27011a4b 100644
--- a/Marlin/src/feature/bedlevel/bdl/bdl.cpp
+++ b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
@@ -96,22 +96,23 @@ void BDS_Leveling::process() {
       const float z_sensor = (tmp & 0x3FF) / 100.0f;
       if (cur_z < 0) config_state = 0;
       //float abs_z = current_position.z > cur_z ? (current_position.z - cur_z) : (cur_z - current_position.z);
-      if ( cur_z < config_state * 0.1f
-        && config_state > 0
-        && old_cur_z == cur_z
-        && old_buf_z == current_position.z
-        && z_sensor < (MAX_BD_HEIGHT)
-      ) {
-        babystep.set_mm(Z_AXIS, cur_z - z_sensor);
-        #if ENABLED(DEBUG_OUT_BD)
-          SERIAL_ECHOLNPGM("BD:", z_sensor, ", Z:", cur_z, "|", current_position.z);
-        #endif
-      }
-      else {
-        babystep.set_mm(Z_AXIS, 0);
-        //if (old_cur_z <= cur_z) Z_DIR_WRITE(!INVERT_Z_DIR);
-        stepper.set_directions();
-      }
+      #if ENABLED(BABYSTEPPING)
+        if (cur_z < config_state * 0.1f
+          && config_state > 0
+          && old_cur_z == cur_z
+          && old_buf_z == current_position.z
+          && z_sensor < (MAX_BD_HEIGHT)
+        ) {
+          babystep.set_mm(Z_AXIS, cur_z - z_sensor);
+          #if ENABLED(DEBUG_OUT_BD)
+            SERIAL_ECHOLNPGM("BD:", z_sensor, ", Z:", cur_z, "|", current_position.z);
+          #endif
+        }
+        else {
+          babystep.set_mm(Z_AXIS, 0);          //if (old_cur_z <= cur_z) Z_DIR_WRITE(!INVERT_Z_DIR);
+          stepper.set_directions();
+        }
+      #endif
       old_cur_z = cur_z;
       old_buf_z = current_position.z;
       endstops.bdp_state_update(z_sensor <= 0.01f);

commit 83320f1052dd09bff7aae789372e7bffccbced97
Author: Mark <niujl123@sina.com>
Date:   Sat Aug 6 14:14:58 2022 +0800

    ‚ú® Bed Distance Sensor (#24554)

diff --git a/Marlin/src/feature/bedlevel/bdl/bdl.cpp b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
new file mode 100644
index 0000000000..0668eb705c
--- /dev/null
+++ b/Marlin/src/feature/bedlevel/bdl/bdl.cpp
@@ -0,0 +1,195 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2022 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../../inc/MarlinConfig.h"
+
+#if ENABLED(BD_SENSOR)
+
+#include "../../../MarlinCore.h"
+#include "../../../gcode/gcode.h"
+#include "../../../module/settings.h"
+#include "../../../module/motion.h"
+#include "../../../module/planner.h"
+#include "../../../module/stepper.h"
+#include "../../../module/probe.h"
+#include "../../../module/temperature.h"
+#include "../../../module/endstops.h"
+#include "../../babystep.h"
+
+// I2C software Master library for segment bed heating and bed distance sensor
+#include <Panda_segmentBed_I2C.h>
+
+#include "bdl.h"
+BDS_Leveling bdl;
+
+//#define DEBUG_OUT_BD
+
+// M102 S-5   Read raw Calibrate data
+// M102 S-6   Start Calibrate
+// M102 S4    Set the adjustable Z height value (e.g., 'M102 S4' means it will do adjusting while the Z height <= 0.4mm , disable with 'M102 S0'.)
+// M102 S-1   Read sensor information
+
+#define MAX_BD_HEIGHT                 4.0f
+#define CMD_START_READ_CALIBRATE_DATA 1017
+#define CMD_END_READ_CALIBRATE_DATA   1018
+#define CMD_START_CALIBRATE           1019
+#define CMD_END_CALIBRATE             1021
+#define CMD_READ_VERSION  1016
+
+I2C_SegmentBED BD_I2C_SENSOR;
+
+#define BD_SENSOR_I2C_ADDR            0x3C
+
+int8_t BDS_Leveling::config_state;
+uint8_t BDS_Leveling::homing;
+
+void BDS_Leveling::echo_name() { SERIAL_ECHOPGM("Bed Distance Leveling"); }
+
+void BDS_Leveling::init(uint8_t _sda, uint8_t _scl, uint16_t delay_s) {
+  int ret = BD_I2C_SENSOR.i2c_init(_sda, _scl, BD_SENSOR_I2C_ADDR, delay_s);
+  if (ret != 1) SERIAL_ECHOLNPGM("BD_I2C_SENSOR Init Fail return code:", ret);
+  config_state = 0;
+}
+
+float BDS_Leveling::read() {
+  const uint16_t tmp = BD_I2C_SENSOR.BD_i2c_read();
+  float BD_z = NAN;
+  if (BD_I2C_SENSOR.BD_Check_OddEven(tmp) && (tmp & 0x3FF) < 1020)
+    BD_z = (tmp & 0x3FF) / 100.0f;
+  return BD_z;
+}
+
+void BDS_Leveling::process() {
+ //if (config_state == 0) return;
+ static millis_t next_check_ms = 0; // starting at T=0
+ static float z_pose = 0.0f;
+ const millis_t ms = millis();
+ if (ELAPSED(ms, next_check_ms)) { // timed out (or first run)
+    next_check_ms = ms + (config_state < 0 ? 1000 : 100);   // check at 1Hz or 10Hz
+
+    unsigned short tmp = 0;
+    const float cur_z = planner.get_axis_position_mm(Z_AXIS); //current_position.z
+    static float old_cur_z = cur_z,
+                 old_buf_z = current_position.z;
+
+    tmp = BD_I2C_SENSOR.BD_i2c_read();
+    if (BD_I2C_SENSOR.BD_Check_OddEven(tmp) && (tmp & 0x3FF) < 1020) {
+      const float z_sensor = (tmp & 0x3FF) / 100.0f;
+      if (cur_z < 0) config_state = 0;
+      //float abs_z = current_position.z > cur_z ? (current_position.z - cur_z) : (cur_z - current_position.z);
+      if ( cur_z < config_state * 0.1f
+        && config_state > 0
+        && old_cur_z == cur_z
+        && old_buf_z == current_position.z
+        && z_sensor < (MAX_BD_HEIGHT)
+      ) {
+        babystep.set_mm(Z_AXIS, cur_z - z_sensor);
+        #if ENABLED(DEBUG_OUT_BD)
+          SERIAL_ECHOLNPGM("BD:", z_sensor, ", Z:", cur_z, "|", current_position.z);
+        #endif
+      }
+      else {
+        babystep.set_mm(Z_AXIS, 0);
+        //if (old_cur_z <= cur_z) Z_DIR_WRITE(!INVERT_Z_DIR);
+        stepper.set_directions();
+      }
+      old_cur_z = cur_z;
+      old_buf_z = current_position.z;
+      endstops.bdp_state_update(z_sensor <= 0.01f);
+      //endstops.update();
+    }
+    else
+      stepper.set_directions();
+
+    #if ENABLED(DEBUG_OUT_BD)
+      SERIAL_ECHOLNPGM("BD:", tmp & 0x3FF, ", Z:", cur_z, "|", current_position.z);
+      if (BD_I2C_SENSOR.BD_Check_OddEven(tmp) == 0) SERIAL_ECHOLNPGM("errorCRC");
+    #endif
+
+    if ((tmp & 0x3FF) > 1020) {
+      BD_I2C_SENSOR.BD_i2c_stop();
+      safe_delay(10);
+    }
+
+    // read raw calibrate data
+    if (config_state == -5) {
+      BD_I2C_SENSOR.BD_i2c_write(CMD_START_READ_CALIBRATE_DATA);
+      safe_delay(1000);
+
+      for (int i = 0; i < MAX_BD_HEIGHT * 10; i++) {
+        tmp = BD_I2C_SENSOR.BD_i2c_read();
+        SERIAL_ECHOLNPGM("Calibrate data:", i, ",", tmp & 0x3FF, ", check:", BD_I2C_SENSOR.BD_Check_OddEven(tmp));
+        safe_delay(500);
+      }
+      config_state = 0;
+      BD_I2C_SENSOR.BD_i2c_write(CMD_END_READ_CALIBRATE_DATA);
+      safe_delay(500);
+    }
+    else if (config_state <= -6) {   // Start Calibrate
+      safe_delay(100);
+      if (config_state == -6) {
+        //BD_I2C_SENSOR.BD_i2c_write(1019); // begin calibrate
+        //delay(1000);
+        gcode.stepper_inactive_time = SEC_TO_MS(60 * 5);
+        gcode.process_subcommands_now(F("M17 Z"));
+        gcode.process_subcommands_now(F("G1 Z0.0"));
+        z_pose = 0;
+        safe_delay(1000);
+        BD_I2C_SENSOR.BD_i2c_write(CMD_START_CALIBRATE); // Begin calibrate
+        SERIAL_ECHOLNPGM("Begin calibrate");
+        safe_delay(2000);
+        config_state = -7;
+      }
+      else if (planner.get_axis_position_mm(Z_AXIS) < 10.0f) {
+        if (z_pose >= MAX_BD_HEIGHT) {
+          BD_I2C_SENSOR.BD_i2c_write(CMD_END_CALIBRATE); // End calibrate
+          SERIAL_ECHOLNPGM("End calibrate data");
+          z_pose = 7;
+          config_state = 0;
+          safe_delay(1000);
+        }
+        else {
+          float tmp_k = 0;
+          char tmp_1[30];
+          sprintf_P(tmp_1, PSTR("G1 Z%d.%d"), int(z_pose), int(int(z_pose * 10) % 10));
+          gcode.process_subcommands_now(tmp_1);
+
+          SERIAL_ECHO(tmp_1);
+          SERIAL_ECHOLNPGM(" ,Z:", current_position.z);
+
+          while (tmp_k < (z_pose - 0.1f)) {
+            tmp_k = planner.get_axis_position_mm(Z_AXIS);
+            safe_delay(1);
+          }
+          safe_delay(800);
+          tmp = (z_pose + 0.0001f) * 10;
+          BD_I2C_SENSOR.BD_i2c_write(tmp);
+          SERIAL_ECHOLNPGM("w:", tmp, ",Zpose:", z_pose);
+          z_pose += 0.1001f;
+          //queue.enqueue_now_P(PSTR("G90"));
+        }
+      }
+    }
+  }
+}
+
+#endif // BD_SENSOR
