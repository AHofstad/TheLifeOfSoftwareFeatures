commit 6b6865d068c2ebbcb6b56c965807571257d50828
Author: Jonathan Brazier <66009857+JonBr306@users.noreply.github.com>
Date:   Mon May 20 06:03:03 2024 +0100

    ✨ INPUT_SHAPING_Z (#27073)

diff --git a/Marlin/src/gcode/feature/input_shaping/M593.cpp b/Marlin/src/gcode/feature/input_shaping/M593.cpp
index 249536efff..6ce942e4ee 100644
--- a/Marlin/src/gcode/feature/input_shaping/M593.cpp
+++ b/Marlin/src/gcode/feature/input_shaping/M593.cpp
@@ -44,6 +44,15 @@ void GcodeSuite::M593_report(const bool forReplay/*=true*/) {
       " D", stepper.get_shaping_damping_ratio(Y_AXIS)
     );
   #endif
+  #if ENABLED(INPUT_SHAPING_Z)
+    #if ANY(INPUT_SHAPING_X, INPUT_SHAPING_Y)
+      report_echo_start(forReplay);
+    #endif
+    SERIAL_ECHOLNPGM("  M593 Z"
+      " F", stepper.get_shaping_frequency(Z_AXIS),
+      " D", stepper.get_shaping_damping_ratio(Z_AXIS)
+    );
+  #endif
 }
 
 /**
@@ -59,14 +68,17 @@ void GcodeSuite::M593() {
 
   const bool seen_X = TERN0(INPUT_SHAPING_X, parser.seen_test('X')),
              seen_Y = TERN0(INPUT_SHAPING_Y, parser.seen_test('Y')),
-             for_X = seen_X || TERN0(INPUT_SHAPING_X, (!seen_X && !seen_Y)),
-             for_Y = seen_Y || TERN0(INPUT_SHAPING_Y, (!seen_X && !seen_Y));
+             seen_Z = TERN0(INPUT_SHAPING_Z, parser.seen_test('Z')),
+             for_X = seen_X || TERN0(INPUT_SHAPING_X, (!seen_X && !seen_Y && !seen_Z)),
+             for_Y = seen_Y || TERN0(INPUT_SHAPING_Y, (!seen_X && !seen_Y && !seen_Z)),
+             for_Z = seen_Z || TERN0(INPUT_SHAPING_Z, (!seen_X && !seen_Y && !seen_Z));
 
   if (parser.seen('D')) {
     const float zeta = parser.value_float();
     if (WITHIN(zeta, 0, 1)) {
       if (for_X) stepper.set_shaping_damping_ratio(X_AXIS, zeta);
       if (for_Y) stepper.set_shaping_damping_ratio(Y_AXIS, zeta);
+      if (for_Z) stepper.set_shaping_damping_ratio(Z_AXIS, zeta);
     }
     else
       SERIAL_ECHO_MSG("?Zeta (D) value out of range (0-1)");
@@ -78,6 +90,7 @@ void GcodeSuite::M593() {
     if (freq == 0.0f || freq > min_freq) {
       if (for_X) stepper.set_shaping_frequency(X_AXIS, freq);
       if (for_Y) stepper.set_shaping_frequency(Y_AXIS, freq);
+      if (for_Z) stepper.set_shaping_frequency(Z_AXIS, freq);
     }
     else
       SERIAL_ECHOLNPGM(GCODE_ERR_MSG("Frequency (F) must be greater than ", min_freq, " or 0 to disable"));

commit 669814d0d408a622f020a55971ba04030e4fa4bf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Feb 7 23:40:54 2024 -0600

    ✨ MARLIN_SMALL_BUILD option (#26775)

diff --git a/Marlin/src/gcode/feature/input_shaping/M593.cpp b/Marlin/src/gcode/feature/input_shaping/M593.cpp
index 1b6a43f9dd..249536efff 100644
--- a/Marlin/src/gcode/feature/input_shaping/M593.cpp
+++ b/Marlin/src/gcode/feature/input_shaping/M593.cpp
@@ -28,6 +28,8 @@
 #include "../../../module/stepper.h"
 
 void GcodeSuite::M593_report(const bool forReplay/*=true*/) {
+  TERN_(MARLIN_SMALL_BUILD, return);
+
   report_heading_etc(forReplay, F("Input Shaping"));
   #if ENABLED(INPUT_SHAPING_X)
     SERIAL_ECHOLNPGM("  M593 X"
@@ -78,7 +80,7 @@ void GcodeSuite::M593() {
       if (for_Y) stepper.set_shaping_frequency(Y_AXIS, freq);
     }
     else
-      SERIAL_ECHOLNPGM("?Frequency (F) must be greater than ", min_freq, " or 0 to disable");
+      SERIAL_ECHOLNPGM(GCODE_ERR_MSG("Frequency (F) must be greater than ", min_freq, " or 0 to disable"));
   }
 }
 

commit 8cdf43f8fdf8900ad903d094d1aeb5dc651b324b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 31 20:26:49 2023 -0500

    🎨  HAS_SHAPING => HAS_ZV_SHAPING

diff --git a/Marlin/src/gcode/feature/input_shaping/M593.cpp b/Marlin/src/gcode/feature/input_shaping/M593.cpp
index a4b3cd3fee..1b6a43f9dd 100644
--- a/Marlin/src/gcode/feature/input_shaping/M593.cpp
+++ b/Marlin/src/gcode/feature/input_shaping/M593.cpp
@@ -22,7 +22,7 @@
 
 #include "../../../inc/MarlinConfig.h"
 
-#if HAS_SHAPING
+#if HAS_ZV_SHAPING
 
 #include "../../gcode.h"
 #include "../../../module/stepper.h"

commit e744ca78a8095d0d70eb80a00d93fe0c19f93d10
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 3 04:09:40 2023 -0600

    🎨 Misc. IS cleanup

diff --git a/Marlin/src/gcode/feature/input_shaping/M593.cpp b/Marlin/src/gcode/feature/input_shaping/M593.cpp
index aafabb3cb7..a4b3cd3fee 100644
--- a/Marlin/src/gcode/feature/input_shaping/M593.cpp
+++ b/Marlin/src/gcode/feature/input_shaping/M593.cpp
@@ -49,8 +49,8 @@ void GcodeSuite::M593_report(const bool forReplay/*=true*/) {
  *  D<factor>    Set the zeta/damping factor. If axes (X, Y, etc.) are not specified, set for all axes.
  *  F<frequency> Set the frequency. If axes (X, Y, etc.) are not specified, set for all axes.
  *  T[map]       Input Shaping type, 0:ZV, 1:EI, 2:2H EI (not implemented yet)
- *  X<1>         Set the given parameters only for the X axis.
- *  Y<1>         Set the given parameters only for the Y axis.
+ *  X            Set the given parameters only for the X axis.
+ *  Y            Set the given parameters only for the Y axis.
  */
 void GcodeSuite::M593() {
   if (!parser.seen_any()) return M593_report();

commit ebcf26ec5daa82eb165afe68058a8143fb58208a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Dec 18 15:48:47 2022 -0600

    🧑‍💻 M593 F "min" freq

diff --git a/Marlin/src/gcode/feature/input_shaping/M593.cpp b/Marlin/src/gcode/feature/input_shaping/M593.cpp
index 040710f3e5..aafabb3cb7 100644
--- a/Marlin/src/gcode/feature/input_shaping/M593.cpp
+++ b/Marlin/src/gcode/feature/input_shaping/M593.cpp
@@ -72,13 +72,13 @@ void GcodeSuite::M593() {
 
   if (parser.seen('F')) {
     const float freq = parser.value_float();
-    constexpr float max_freq = float(uint32_t(STEPPER_TIMER_RATE) / 2) / shaping_time_t(-2);
-    if (freq == 0.0f || freq > max_freq) {
+    constexpr float min_freq = float(uint32_t(STEPPER_TIMER_RATE) / 2) / shaping_time_t(-2);
+    if (freq == 0.0f || freq > min_freq) {
       if (for_X) stepper.set_shaping_frequency(X_AXIS, freq);
       if (for_Y) stepper.set_shaping_frequency(Y_AXIS, freq);
     }
     else
-      SERIAL_ECHOLNPGM("?Frequency (F) must be greater than ", max_freq, " or 0 to disable");
+      SERIAL_ECHOLNPGM("?Frequency (F) must be greater than ", min_freq, " or 0 to disable");
   }
 }
 

commit 89334caa526f2d300eee834d34d06d8f837a57d5
Author: tombrazier <68918209+tombrazier@users.noreply.github.com>
Date:   Mon Nov 28 03:38:15 2022 +0000

    ⚡️ Input Shaping improvements (#24951)

diff --git a/Marlin/src/gcode/feature/input_shaping/M593.cpp b/Marlin/src/gcode/feature/input_shaping/M593.cpp
index e1e99ca51b..040710f3e5 100644
--- a/Marlin/src/gcode/feature/input_shaping/M593.cpp
+++ b/Marlin/src/gcode/feature/input_shaping/M593.cpp
@@ -22,21 +22,21 @@
 
 #include "../../../inc/MarlinConfig.h"
 
-#if ENABLED(INPUT_SHAPING)
+#if HAS_SHAPING
 
 #include "../../gcode.h"
 #include "../../../module/stepper.h"
 
 void GcodeSuite::M593_report(const bool forReplay/*=true*/) {
   report_heading_etc(forReplay, F("Input Shaping"));
-  #if HAS_SHAPING_X
+  #if ENABLED(INPUT_SHAPING_X)
     SERIAL_ECHOLNPGM("  M593 X"
       " F", stepper.get_shaping_frequency(X_AXIS),
       " D", stepper.get_shaping_damping_ratio(X_AXIS)
     );
   #endif
-  #if HAS_SHAPING_Y
-    TERN_(HAS_SHAPING_X, report_echo_start(forReplay));
+  #if ENABLED(INPUT_SHAPING_Y)
+    TERN_(INPUT_SHAPING_X, report_echo_start(forReplay));
     SERIAL_ECHOLNPGM("  M593 Y"
       " F", stepper.get_shaping_frequency(Y_AXIS),
       " D", stepper.get_shaping_damping_ratio(Y_AXIS)
@@ -55,10 +55,10 @@ void GcodeSuite::M593_report(const bool forReplay/*=true*/) {
 void GcodeSuite::M593() {
   if (!parser.seen_any()) return M593_report();
 
-  const bool seen_X = TERN0(HAS_SHAPING_X, parser.seen_test('X')),
-             seen_Y = TERN0(HAS_SHAPING_Y, parser.seen_test('Y')),
-             for_X = seen_X || TERN0(HAS_SHAPING_X, (!seen_X && !seen_Y)),
-             for_Y = seen_Y || TERN0(HAS_SHAPING_Y, (!seen_X && !seen_Y));
+  const bool seen_X = TERN0(INPUT_SHAPING_X, parser.seen_test('X')),
+             seen_Y = TERN0(INPUT_SHAPING_Y, parser.seen_test('Y')),
+             for_X = seen_X || TERN0(INPUT_SHAPING_X, (!seen_X && !seen_Y)),
+             for_Y = seen_Y || TERN0(INPUT_SHAPING_Y, (!seen_X && !seen_Y));
 
   if (parser.seen('D')) {
     const float zeta = parser.value_float();
@@ -72,12 +72,13 @@ void GcodeSuite::M593() {
 
   if (parser.seen('F')) {
     const float freq = parser.value_float();
-    if (freq > 0) {
+    constexpr float max_freq = float(uint32_t(STEPPER_TIMER_RATE) / 2) / shaping_time_t(-2);
+    if (freq == 0.0f || freq > max_freq) {
       if (for_X) stepper.set_shaping_frequency(X_AXIS, freq);
       if (for_Y) stepper.set_shaping_frequency(Y_AXIS, freq);
     }
     else
-      SERIAL_ECHO_MSG("?Frequency (F) must be greater than 0");
+      SERIAL_ECHOLNPGM("?Frequency (F) must be greater than ", max_freq, " or 0 to disable");
   }
 }
 

commit aaf34fa96bf3da9cf7c95a41ccb7e5bc441dbd20
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Oct 22 23:35:31 2022 -0500

    🩹 Fix M593 report

diff --git a/Marlin/src/gcode/feature/input_shaping/M593.cpp b/Marlin/src/gcode/feature/input_shaping/M593.cpp
index 84301963cb..e1e99ca51b 100644
--- a/Marlin/src/gcode/feature/input_shaping/M593.cpp
+++ b/Marlin/src/gcode/feature/input_shaping/M593.cpp
@@ -30,13 +30,14 @@
 void GcodeSuite::M593_report(const bool forReplay/*=true*/) {
   report_heading_etc(forReplay, F("Input Shaping"));
   #if HAS_SHAPING_X
-    SERIAL_ECHO_MSG("M593 X"
+    SERIAL_ECHOLNPGM("  M593 X"
       " F", stepper.get_shaping_frequency(X_AXIS),
       " D", stepper.get_shaping_damping_ratio(X_AXIS)
     );
   #endif
   #if HAS_SHAPING_Y
-    SERIAL_ECHO_MSG("M593 Y"
+    TERN_(HAS_SHAPING_X, report_echo_start(forReplay));
+    SERIAL_ECHOLNPGM("  M593 Y"
       " F", stepper.get_shaping_frequency(Y_AXIS),
       " D", stepper.get_shaping_damping_ratio(Y_AXIS)
     );

commit a460b01c876ff39901fe55a4b66b2c62737ef46c
Author: tombrazier <68918209+tombrazier@users.noreply.github.com>
Date:   Fri Oct 21 22:34:22 2022 +0100

    🚀 ZV Input Shaping (#24797)

diff --git a/Marlin/src/gcode/feature/input_shaping/M593.cpp b/Marlin/src/gcode/feature/input_shaping/M593.cpp
new file mode 100644
index 0000000000..84301963cb
--- /dev/null
+++ b/Marlin/src/gcode/feature/input_shaping/M593.cpp
@@ -0,0 +1,83 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2022 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "../../../inc/MarlinConfig.h"
+
+#if ENABLED(INPUT_SHAPING)
+
+#include "../../gcode.h"
+#include "../../../module/stepper.h"
+
+void GcodeSuite::M593_report(const bool forReplay/*=true*/) {
+  report_heading_etc(forReplay, F("Input Shaping"));
+  #if HAS_SHAPING_X
+    SERIAL_ECHO_MSG("M593 X"
+      " F", stepper.get_shaping_frequency(X_AXIS),
+      " D", stepper.get_shaping_damping_ratio(X_AXIS)
+    );
+  #endif
+  #if HAS_SHAPING_Y
+    SERIAL_ECHO_MSG("M593 Y"
+      " F", stepper.get_shaping_frequency(Y_AXIS),
+      " D", stepper.get_shaping_damping_ratio(Y_AXIS)
+    );
+  #endif
+}
+
+/**
+ * M593: Get or Set Input Shaping Parameters
+ *  D<factor>    Set the zeta/damping factor. If axes (X, Y, etc.) are not specified, set for all axes.
+ *  F<frequency> Set the frequency. If axes (X, Y, etc.) are not specified, set for all axes.
+ *  T[map]       Input Shaping type, 0:ZV, 1:EI, 2:2H EI (not implemented yet)
+ *  X<1>         Set the given parameters only for the X axis.
+ *  Y<1>         Set the given parameters only for the Y axis.
+ */
+void GcodeSuite::M593() {
+  if (!parser.seen_any()) return M593_report();
+
+  const bool seen_X = TERN0(HAS_SHAPING_X, parser.seen_test('X')),
+             seen_Y = TERN0(HAS_SHAPING_Y, parser.seen_test('Y')),
+             for_X = seen_X || TERN0(HAS_SHAPING_X, (!seen_X && !seen_Y)),
+             for_Y = seen_Y || TERN0(HAS_SHAPING_Y, (!seen_X && !seen_Y));
+
+  if (parser.seen('D')) {
+    const float zeta = parser.value_float();
+    if (WITHIN(zeta, 0, 1)) {
+      if (for_X) stepper.set_shaping_damping_ratio(X_AXIS, zeta);
+      if (for_Y) stepper.set_shaping_damping_ratio(Y_AXIS, zeta);
+    }
+    else
+      SERIAL_ECHO_MSG("?Zeta (D) value out of range (0-1)");
+  }
+
+  if (parser.seen('F')) {
+    const float freq = parser.value_float();
+    if (freq > 0) {
+      if (for_X) stepper.set_shaping_frequency(X_AXIS, freq);
+      if (for_Y) stepper.set_shaping_frequency(Y_AXIS, freq);
+    }
+    else
+      SERIAL_ECHO_MSG("?Frequency (F) must be greater than 0");
+  }
+}
+
+#endif
