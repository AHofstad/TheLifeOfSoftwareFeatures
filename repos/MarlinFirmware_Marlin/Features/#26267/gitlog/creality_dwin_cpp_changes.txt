commit 1f9fc665ec21f95666801aa4fccc4f4f71932018
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jun 26 18:27:05 2024 -0500

    üö∏ MarlinUI:: clear_for_drawing

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 7f057137d8..34bdd29694 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1816,6 +1816,8 @@ void hmiSDCardInit() { card.cdroot(); }
 // Initialize or re-initialize the LCD
 void MarlinUI::init_lcd() { dwinStartup(); }
 
+void MarlinUI::clear_lcd() {}
+
 void MarlinUI::update() {
   eachMomentUpdate(); // Status update
   hmiSDCardUpdate();  // SD card update

commit a3960dfa53394f9d105cbd23dc260ed81ff884f4
Author: David Buezas <dbuezas@users.noreply.github.com>
Date:   Thu May 9 23:20:57 2024 +0200

    üö∏ New encoder logic & debounce (#26723)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 9ecfbfe1fa..7f057137d8 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -4078,7 +4078,6 @@ void hmiInit() {
 }
 
 void dwinInitScreen() {
-  encoderConfiguration();
   hmiInit();
   hmiSetLanguageCache();
   hmiStartFrame(true);

commit 87e94f456348e944ba4487aed436c762dd718966
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon Apr 1 16:05:11 2024 -0400

    üö∏ Update ProUI Plot graph - part 2 (#26563)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 08161dffaf..9ecfbfe1fa 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -4169,8 +4169,8 @@ void eachMomentUpdate() {
     gotoMainMenu();
   }
   #if ENABLED(POWER_LOSS_RECOVERY)
-    else if (DWIN_lcd_sd_status && recovery.dwin_flag) { // resume print before power off
-      recovery.dwin_flag = false;
+    else if (DWIN_lcd_sd_status && recovery.ui_flag_resume) { // Resume interrupted print
+      recovery.ui_flag_resume = false;
 
       auto update_selection = [&](const bool sel) {
         hmiFlag.select_flag = sel;
@@ -4197,7 +4197,7 @@ void eachMomentUpdate() {
           if (encoder_diffState == ENCODER_DIFF_ENTER) {
             recovery_flag = false;
             if (hmiFlag.select_flag) break;
-            TERN_(POWER_LOSS_RECOVERY, queue.inject(F("M1000C")));
+            queue.inject(F("M1000C"));
             hmiStartFrame(true);
             return;
           }

commit 466282f322ae4f42a8f3db5e3c9765c38445fdc8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Mar 31 18:20:37 2024 -0500

    ü©π Misc. changes from ProUI / ExtUI updates (#26928)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index b2c08861d7..08161dffaf 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1822,8 +1822,6 @@ void MarlinUI::update() {
   dwinHandleScreen(); // Rotary encoder update
 }
 
-void MarlinUI::refresh() { /* Nothing to see here */ }
-
 #if HAS_LCD_BRIGHTNESS
   void MarlinUI::_set_brightness() { dwinLCDBrightness(backlight ? brightness : 0); }
 #endif

commit dd3b5a10a09e2a83918af1cf6f8782fd0c473f98
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 21 22:00:37 2024 -0600

    Misc. aesthetic adjustments
    
    Co-Authored-By: Andrew <18502096+classicrocker883@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index ea6265b419..b2c08861d7 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1816,6 +1816,12 @@ void hmiSDCardInit() { card.cdroot(); }
 // Initialize or re-initialize the LCD
 void MarlinUI::init_lcd() { dwinStartup(); }
 
+void MarlinUI::update() {
+  eachMomentUpdate(); // Status update
+  hmiSDCardUpdate();  // SD card update
+  dwinHandleScreen(); // Rotary encoder update
+}
+
 void MarlinUI::refresh() { /* Nothing to see here */ }
 
 #if HAS_LCD_BRIGHTNESS
@@ -4080,14 +4086,6 @@ void dwinInitScreen() {
   hmiStartFrame(true);
 }
 
-void dwinUpdate() {
-  eachMomentUpdate(); // Status update
-  hmiSDCardUpdate();  // SD card update
-  dwinHandleScreen(); // Rotary encoder update
-}
-
-void MarlinUI::update() { dwinUpdate(); }
-
 void eachMomentUpdate() {
   static millis_t next_var_update_ms = 0, next_rts_update_ms = 0;
 

commit 854f3315af645775e7b0aa39bd05db66187bcc38
Author: plampix <plampix@users.noreply.github.com>
Date:   Wed Jan 10 07:33:54 2024 +0100

    ‚ú® EDITABLE_STEPS_PER_UNIT (#26618)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 6ba0184d71..ea6265b419 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1619,23 +1619,27 @@ void hmiMaxAccelerationXYZE() {
 
 #endif // CLASSIC_JERK
 
-void hmiStepXYZE() {
-  EncoderState encoder_diffState = encoderReceiveAnalyze();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (applyEncoder(encoder_diffState, hmiValues.maxStepScaled)) {
-    checkkey = ID_Step;
-    encoderRate.enabled = false;
+#if ENABLED(EDITABLE_STEPS_PER_UNIT)
+
+  void hmiStepXYZE() {
+    EncoderState encoder_diffState = encoderReceiveAnalyze();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+    if (applyEncoder(encoder_diffState, hmiValues.maxStepScaled)) {
+      checkkey = ID_Step;
+      encoderRate.enabled = false;
+      if (WITHIN(hmiFlag.step_axis, X_AXIS, LAST_AXIS))
+        planner.settings.axis_steps_per_mm[hmiFlag.step_axis] = hmiValues.maxStepScaled / MINUNITMULT;
+      drawEditFloat3(select_step.now, hmiValues.maxStepScaled);
+      return;
+    }
+    // Step limit
     if (WITHIN(hmiFlag.step_axis, X_AXIS, LAST_AXIS))
-      planner.settings.axis_steps_per_mm[hmiFlag.step_axis] = hmiValues.maxStepScaled / MINUNITMULT;
-    drawEditFloat3(select_step.now, hmiValues.maxStepScaled);
-    return;
+      LIMIT(hmiValues.maxStepScaled, min_steps_edit_values[hmiFlag.step_axis] * MINUNITMULT, max_steps_edit_values[hmiFlag.step_axis] * MINUNITMULT);
+    // Step value
+    drawEditFloat3(select_step.now, hmiValues.maxStepScaled, true);
   }
-  // Step limit
-  if (WITHIN(hmiFlag.step_axis, X_AXIS, LAST_AXIS))
-    LIMIT(hmiValues.maxStepScaled, min_steps_edit_values[hmiFlag.step_axis] * MINUNITMULT, max_steps_edit_values[hmiFlag.step_axis] * MINUNITMULT);
-  // Step value
-  drawEditFloat3(select_step.now, hmiValues.maxStepScaled, true);
-}
+
+#endif // EDITABLE_STEPS_PER_UNIT
 
 // Draw X, Y, Z and blink if in an un-homed or un-trusted state
 void _update_axis_value(const AxisEnum axis, const uint16_t x, const uint16_t y, const bool blink, const bool force) {
@@ -4279,7 +4283,9 @@ void dwinHandleScreen() {
     #if ENABLED(CLASSIC_JERK)
       case ID_MaxJerkValue: hmiMaxJerkXYZE(); break;
     #endif
-    case ID_StepValue:      hmiStepXYZE(); break;
+    #if ENABLED(EDITABLE_STEPS_PER_UNIT)
+      case ID_StepValue:    hmiStepXYZE(); break;
+    #endif
     default: break;
   }
 }

commit 12d7995a18d3ce59c871e11c4940bbaeb9c352fc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jan 9 18:45:17 2024 -0600

    üé® Minor temp / UI refactor

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 8156489f7b..6ba0184d71 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -4077,11 +4077,13 @@ void dwinInitScreen() {
 }
 
 void dwinUpdate() {
-  eachMomentUpdate();   // Status update
-  hmiSDCardUpdate();   // SD card update
-  dwinHandleScreen();  // Rotary encoder update
+  eachMomentUpdate(); // Status update
+  hmiSDCardUpdate();  // SD card update
+  dwinHandleScreen(); // Rotary encoder update
 }
 
+void MarlinUI::update() { dwinUpdate(); }
+
 void eachMomentUpdate() {
   static millis_t next_var_update_ms = 0, next_rts_update_ms = 0;
 

commit 0f0955492994f4a7f4649c22e0f3aa5cc71541d7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Dec 24 14:53:09 2023 -0600

    üßë‚Äçüíª DWIN icon updates, etc.

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index c1e7a358c0..8156489f7b 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -905,7 +905,7 @@ void drawControlMenu() {
   #if ENABLED(EEPROM_SETTINGS)
     _TEMP_ICON(CONTROL_CASE_SAVE, ICON_WriteEEPROM, false);
     _TEMP_ICON(CONTROL_CASE_LOAD, ICON_ReadEEPROM, false);
-    _TEMP_ICON(CONTROL_CASE_RESET, ICON_ResumeEEPROM, false);
+    _TEMP_ICON(CONTROL_CASE_RESET, ICON_ResetEEPROM, false);
   #endif
 }
 
@@ -2468,7 +2468,7 @@ void itemAdvBedPID(const uint8_t row) {
       itemAreaCopy(145, 104, 167, 114, row, 27); // "PID"
     #endif
   }
-  drawMenuLine(row, ICON_PIDbed);
+  drawMenuLine(row, ICON_PIDBed);
 }
 
 #if ENABLED(POWER_LOSS_RECOVERY)

commit 75da3555ee0910f3d572f4b8176afecdc941524b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Dec 14 10:03:11 2023 -0600

    üîß Update CLASSIC_JERK conditionals

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 2743901891..c1e7a358c0 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -460,7 +460,7 @@ void drawBackFirst(const bool is_sel=true) {
 
 #define MOTION_CASE_RATE   1
 #define MOTION_CASE_ACCEL  2
-#define MOTION_CASE_JERK   (MOTION_CASE_ACCEL + ENABLED(HAS_CLASSIC_JERK))
+#define MOTION_CASE_JERK   (MOTION_CASE_ACCEL + ENABLED(CLASSIC_JERK))
 #define MOTION_CASE_STEPS  (MOTION_CASE_JERK + 1)
 #define MOTION_CASE_TOTAL  MOTION_CASE_STEPS
 
@@ -1004,7 +1004,7 @@ void drawMotionMenu() {
     itemAreaCopy(173, 133, 228, 147, MOTION_CASE_RATE);        // Max speed
     itemAreaCopy(173, 133, 200, 147, MOTION_CASE_ACCEL);       // Max...
     itemAreaCopy(28, 149, 69, 161, MOTION_CASE_ACCEL, 30, 1);  // ...Acceleration
-    #if HAS_CLASSIC_JERK
+    #if ENABLED(CLASSIC_JERK)
       itemAreaCopy(173, 133, 200, 147, MOTION_CASE_JERK);      // Max...
       itemAreaCopy(1, 180, 28, 192, MOTION_CASE_JERK, 30, 1);  // ...
       itemAreaCopy(202, 133, 228, 147, MOTION_CASE_JERK, 57);  // ...Jerk
@@ -1020,14 +1020,14 @@ void drawMotionMenu() {
     #ifdef USE_STRING_TITLES
       dwinDrawLabel(MOTION_CASE_RATE, F("Feedrate"));                 // "Feedrate"
       dwinDrawLabel(MOTION_CASE_ACCEL, GET_TEXT_F(MSG_ACCELERATION)); // "Acceleration"
-      #if HAS_CLASSIC_JERK
+      #if ENABLED(CLASSIC_JERK)
         dwinDrawLabel(MOTION_CASE_JERK, GET_TEXT_F(MSG_JERK));        // "Jerk"
       #endif
       dwinDrawLabel(MOTION_CASE_STEPS, GET_TEXT_F(MSG_STEPS_PER_MM)); // "Steps/mm"
     #else
       say_max_en(MOTION_CASE_RATE); say_speed_en(30, MOTION_CASE_RATE); // "Max Speed"
       say_max_accel_en(MOTION_CASE_ACCEL);                              // "Max Acceleration"
-      #if HAS_CLASSIC_JERK
+      #if ENABLED(CLASSIC_JERK)
         say_max_en(MOTION_CASE_JERK); say_jerk_en(MOTION_CASE_JERK);    // "Max Jerk"
       #endif
       say_steps_per_mm_en(MOTION_CASE_STEPS);                           // "Steps-per-mm"
@@ -1041,7 +1041,7 @@ void drawMotionMenu() {
   #define _MOTION_ICON(N) drawMenuLine(++i, ICON_MaxSpeed + (N) - 1)
   _MOTION_ICON(MOTION_CASE_RATE); drawMoreIcon(i);
   _MOTION_ICON(MOTION_CASE_ACCEL); drawMoreIcon(i);
-  #if HAS_CLASSIC_JERK
+  #if ENABLED(CLASSIC_JERK)
     _MOTION_ICON(MOTION_CASE_JERK); drawMoreIcon(i);
   #endif
   _MOTION_ICON(MOTION_CASE_STEPS); drawMoreIcon(i);
@@ -1597,7 +1597,7 @@ void hmiMaxAccelerationXYZE() {
   drawEditInteger4(select_acc.now, hmiValues.maxAcceleration, true);
 }
 
-#if HAS_CLASSIC_JERK
+#if ENABLED(CLASSIC_JERK)
 
   void hmiMaxJerkXYZE() {
     EncoderState encoder_diffState = encoderReceiveAnalyze();
@@ -1617,7 +1617,7 @@ void hmiMaxAccelerationXYZE() {
     drawEditFloat3(select_jerk.now, hmiValues.maxJerkScaled, true);
   }
 
-#endif // HAS_CLASSIC_JERK
+#endif // CLASSIC_JERK
 
 void hmiStepXYZE() {
   EncoderState encoder_diffState = encoderReceiveAnalyze();
@@ -3349,7 +3349,7 @@ void drawMaxAccelMenu() {
   #endif
 }
 
-#if HAS_CLASSIC_JERK
+#if ENABLED(CLASSIC_JERK)
   void drawMaxJerkMenu() {
     clearMainWindow();
 
@@ -3489,7 +3489,7 @@ void hmiMotion() {
         select_acc.reset();
         drawMaxAccelMenu();
         break;
-      #if HAS_CLASSIC_JERK
+      #if ENABLED(CLASSIC_JERK)
         case MOTION_CASE_JERK:
           checkkey = ID_MaxJerk;
           select_jerk.reset();
@@ -3996,7 +3996,7 @@ void hmiMaxAcceleration() {
   dwinUpdateLCD();
 }
 
-#if HAS_CLASSIC_JERK
+#if ENABLED(CLASSIC_JERK)
   // Max Jerk
   void hmiMaxJerk() {
     EncoderState encoder_diffState = get_encoder_state();
@@ -4025,7 +4025,7 @@ void hmiMaxAcceleration() {
     }
     dwinUpdateLCD();
   }
-#endif // HAS_CLASSIC_JERK
+#endif // CLASSIC_JERK
 
 // Step
 void hmiStep() {
@@ -4251,7 +4251,7 @@ void dwinHandleScreen() {
     #endif
     case ID_MaxSpeed:       hmiMaxSpeed(); break;
     case ID_MaxAcceleration: hmiMaxAcceleration(); break;
-    #if HAS_CLASSIC_JERK
+    #if ENABLED(CLASSIC_JERK)
       case ID_MaxJerk:      hmiMaxJerk(); break;
     #endif
     case ID_Step:           hmiStep(); break;
@@ -4274,7 +4274,7 @@ void dwinHandleScreen() {
     case ID_PrintSpeed:     hmiPrintSpeed(); break;
     case ID_MaxSpeedValue:  hmiMaxFeedspeedXYZE(); break;
     case ID_MaxAccelerationValue: hmiMaxAccelerationXYZE(); break;
-    #if HAS_CLASSIC_JERK
+    #if ENABLED(CLASSIC_JERK)
       case ID_MaxJerkValue: hmiMaxJerkXYZE(); break;
     #endif
     case ID_StepValue:      hmiStepXYZE(); break;

commit a41e16ffee0ae828ecb73eeea3caab2f4aed82a8
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Wed Dec 6 00:11:41 2023 -0500

    ‚ú® Voxelab Aquila N32 (via Maple) (#26470)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index f3935f39dd..2743901891 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -103,7 +103,6 @@
 #define UNITFDIGITS 1
 #define MINUNITMULT pow(10, UNITFDIGITS)
 
-#define ENCODER_WAIT_MS                  20
 #define DWIN_VAR_UPDATE_INTERVAL         1024
 #define DWIN_SCROLL_UPDATE_INTERVAL      SEC_TO_MS(2)
 #define DWIN_REMAIN_TIME_UPDATE_INTERVAL SEC_TO_MS(20)

commit bd872a7a98528da6e1fab95382488ce703fe24c1
Author: Vovodroid <vovodroid@users.noreply.github.com>
Date:   Fri Nov 24 21:03:06 2023 +0200

    üîß Configurable FR/Flow edit ranges (#26446)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index c71ab8cff2..f3935f39dd 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -97,10 +97,6 @@
 #define MENU_CHAR_LIMIT  24
 #define STATUS_Y        354
 
-// Print speed limit
-#define MIN_PRINT_SPEED  10
-#define MAX_PRINT_SPEED 999
-
 #define FEEDRATE_E      (60)
 
 // Minimum unit (0.1) : multiple (10)
@@ -1559,7 +1555,7 @@ void hmiPrintSpeed() {
     return;
   }
   // printSpeed limit
-  LIMIT(hmiValues.printSpeed, MIN_PRINT_SPEED, MAX_PRINT_SPEED);
+  LIMIT(hmiValues.printSpeed, SPEED_EDIT_MIN, SPEED_EDIT_MAX);
   // printSpeed value
   drawEditInteger3(select_tune.now + MROWS - index_tune, hmiValues.printSpeed, true);
 }

commit 014278383645bdfe50313ffd15a2287f377ac8f0
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Sun Nov 19 23:24:32 2023 -0800

    üö∏ Fix more MarlinUI title centering (#26440)
    
    Followup to #26339

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index f99a3d0a1a..c71ab8cff2 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1384,7 +1384,19 @@ void hmiMoveDone(const AxisEnum axis) {
       dwinUpdateLCD();
       return;
     }
-    LIMIT(hmiValues.offset_value, (PROBE_OFFSET_ZMIN) * 100, (PROBE_OFFSET_ZMAX) * 100);
+
+    #if ENABLED(BABYSTEP_ZPROBE_OFFSET) && defined(PROBE_OFFSET_ZMIN)
+      #define _OFFSET_ZMIN (PROBE_OFFSET_ZMIN)
+    #else
+      #define _OFFSET_ZMIN -20
+    #endif
+    #if ENABLED(BABYSTEP_ZPROBE_OFFSET) && defined(PROBE_OFFSET_ZMAX)
+      #define _OFFSET_ZMAX (PROBE_OFFSET_ZMAX)
+    #else
+      #define _OFFSET_ZMAX 20
+    #endif
+    LIMIT(hmiValues.offset_value, _OFFSET_ZMIN * 100, _OFFSET_ZMAX * 100);
+
     last_zoffset = dwin_zoffset;
     dwin_zoffset = hmiValues.offset_value / 100.0f;
     #if ANY(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)

commit cb044d989c397fcbf6f106502df69a7e5c41d34b
Author: Vladimir Sitnikov <sitnikov.vladimir@gmail.com>
Date:   Sun Nov 5 09:46:57 2023 +0300

    ‚ú® Probe XY Offset value limits (#26267)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index b21cc30850..f99a3d0a1a 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1384,7 +1384,7 @@ void hmiMoveDone(const AxisEnum axis) {
       dwinUpdateLCD();
       return;
     }
-    LIMIT(hmiValues.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
+    LIMIT(hmiValues.offset_value, (PROBE_OFFSET_ZMIN) * 100, (PROBE_OFFSET_ZMAX) * 100);
     last_zoffset = dwin_zoffset;
     dwin_zoffset = hmiValues.offset_value / 100.0f;
     #if ANY(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)

commit f14f1be168ebf252dd458c935271aed1a57cfa0b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 30 19:16:00 2023 -0500

    üé® Standardize naming (ProUI) (#25982)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 7a28f1b77e..b21cc30850 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -221,7 +221,7 @@ typedef struct { uint16_t x, y[2], w, h; } text_info_t;
 void iconButton(const bool here, const int iconid, const icon_info_t &ico, const text_info_t (&txt)[2]) {
   const bool cn = hmiIsChinese();
   dwinIconShow(ICON, iconid + here, ico.x, ico.y);
-  if (here) dwinDrawRectangle(0, Color_White, ico.x, ico.y, ico.x + ico.w - 1, ico.y + ico.h - 1);
+  if (here) dwinDrawRectangle(0, COLOR_WHITE, ico.x, ico.y, ico.x + ico.w - 1, ico.y + ico.h - 1);
   dwinFrameAreaCopy(1, txt[cn].x, txt[cn].y[here], txt[cn].x + txt[cn].w - 1, txt[cn].y[here] + txt[cn].h - 1, ico.x + (ico.w - txt[cn].w) / 2, (ico.y + ico.h - 28) - txt[cn].h/2);
 }
 
@@ -341,15 +341,15 @@ void iconStop() {
 }
 
 inline void clearTitleBar() {
-  dwinDrawBox(1, Color_Bg_Blue, 0, 0, DWIN_WIDTH, TITLE_HEIGHT);
+  dwinDrawBox(1, COLOR_BG_BLUE, 0, 0, DWIN_WIDTH, TITLE_HEIGHT);
 }
 
 void drawTitle(FSTR_P ftitle) {
-  dwinDrawString(false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, ftitle);
+  dwinDrawString(false, DWIN_FONT_HEAD, COLOR_WHITE, COLOR_BG_BLUE, 14, 4, ftitle);
 }
 
 inline void clearMenuArea() {
-  dwinDrawBox(1, Color_Bg_Black, 0, TITLE_HEIGHT, DWIN_WIDTH, STATUS_Y - TITLE_HEIGHT);
+  dwinDrawBox(1, COLOR_BG_BLACK, 0, TITLE_HEIGHT, DWIN_WIDTH, STATUS_Y - TITLE_HEIGHT);
 }
 
 void clearMainWindow() {
@@ -359,11 +359,11 @@ void clearMainWindow() {
 
 void clearPopupArea() {
   clearTitleBar();
-  dwinDrawRectangle(1, Color_Bg_Black, 0, 31, DWIN_WIDTH, DWIN_HEIGHT);
+  dwinDrawRectangle(1, COLOR_BG_BLACK, 0, 31, DWIN_WIDTH, DWIN_HEIGHT);
 }
 
 void drawPopupBkgd105() {
-  dwinDrawRectangle(1, Color_Bg_Window, 14, 105, 258, 374);
+  dwinDrawRectangle(1, COLOR_BG_WINDOW, 14, 105, 258, 374);
 }
 
 void drawMoreIcon(const uint8_t line) {
@@ -372,11 +372,11 @@ void drawMoreIcon(const uint8_t line) {
 
 void drawMenuCursor(const uint8_t line) {
   //dwinIconShow(ICON, ICON_Rectangle, 0, MBASE(line) - 18);
-  dwinDrawRectangle(1, Rectangle_Color, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
+  dwinDrawRectangle(1, COLOR_RECTANGLE, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
 }
 
 void eraseMenuCursor(const uint8_t line) {
-  dwinDrawRectangle(1, Color_Bg_Black, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
+  dwinDrawRectangle(1, COLOR_BG_BLACK, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
 }
 
 void moveHighlight(const int16_t from, const uint16_t newline) {
@@ -386,11 +386,11 @@ void moveHighlight(const int16_t from, const uint16_t newline) {
 
 void addMenuLine() {
   moveHighlight(1, MROWS);
-  dwinDrawLine(Line_Color, 16, MBASE(MROWS + 1) - 20, 256, MBASE(MROWS + 1) - 19);
+  dwinDrawLine(COLOR_LINE, 16, MBASE(MROWS + 1) - 20, 256, MBASE(MROWS + 1) - 19);
 }
 
 void scrollMenu(const uint8_t dir) {
-  dwinFrameAreaMove(1, dir, MLINE, Color_Bg_Black, 0, 31, DWIN_WIDTH, 349);
+  dwinFrameAreaMove(1, dir, MLINE, COLOR_BG_BLACK, 0, 31, DWIN_WIDTH, 349);
   switch (dir) {
     case DWIN_SCROLL_DOWN: moveHighlight(-1, 0); break;
     case DWIN_SCROLL_UP:   addMenuLine(); break;
@@ -402,7 +402,7 @@ inline uint16_t nr_sd_menu_items() {
 }
 
 void eraseMenuText(const uint8_t line) {
-  dwinDrawRectangle(1, Color_Bg_Black, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
+  dwinDrawRectangle(1, COLOR_BG_BLACK, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
 }
 
 void drawMenuIcon(const uint8_t line, const uint8_t icon) {
@@ -414,28 +414,28 @@ void _decorateMenuItem(const uint8_t line, const uint8_t icon, bool more) {
   if (more) drawMoreIcon(line);
 }
 void drawMenuItem(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
-  if (label) dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, (char*)label);
+  if (label) dwinDrawString(false, font8x16, COLOR_WHITE, COLOR_BG_BLACK, LBLX, MBASE(line) - 1, (char*)label);
   _decorateMenuItem(line, icon, more);
 }
 void drawMenuItem(const uint8_t line, const uint8_t icon=0, FSTR_P const flabel=nullptr, bool more=false) {
-  if (flabel) dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, flabel);
+  if (flabel) dwinDrawString(false, font8x16, COLOR_WHITE, COLOR_BG_BLACK, LBLX, MBASE(line) - 1, flabel);
   _decorateMenuItem(line, icon, more);
 }
 
 void drawMenuLine(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
   drawMenuItem(line, icon, label, more);
-  dwinDrawLine(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
+  dwinDrawLine(COLOR_LINE, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
 
 void drawMenuLine(const uint8_t line, const uint8_t icon, FSTR_P const flabel, bool more=false) {
   drawMenuItem(line, icon, flabel, more);
-  dwinDrawLine(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
+  dwinDrawLine(COLOR_LINE, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
 
 void drawCheckboxLine(const uint8_t line, const bool ison) {
   const uint16_t x = 225, y = EBASE(line) - 2;
-  dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, x + 5, y, ison ? F("X") : F(" "));
-  dwinDrawRectangle(0, Color_White, x + 2, y + 2, x + 16, y + 16);
+  dwinDrawString(true, font8x16, COLOR_WHITE, COLOR_BG_BLACK, x + 5, y, ison ? F("X") : F(" "));
+  dwinDrawRectangle(0, COLOR_WHITE, x + 2, y + 2, x + 16, y + 16);
 }
 
 // AreaCopy for a Menu Item
@@ -567,43 +567,43 @@ void say_steps_per_mm_en(const uint8_t row) {
 }
 
 void dwinDrawLabel(const uint8_t row, char *string) {
-  dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(row), string);
+  dwinDrawString(true, font8x16, COLOR_WHITE, COLOR_BG_BLACK, LBLX, MBASE(row), string);
 }
 void dwinDrawLabel(const uint8_t row, FSTR_P title) {
   dwinDrawLabel(row, (char*)title);
 }
 
-void dwinDrawSigned_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, int32_t value) {
-  dwinDrawString(true, size, Color_White, bColor, x - 8, y, value < 0 ? F("-") : F(" "));
-  dwinDrawFloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, value < 0 ? -value : value);
+void dwinDrawSignedFloat(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, int32_t value) {
+  dwinDrawString(true, size, COLOR_WHITE, bColor, x - 8, y, value < 0 ? F("-") : F(" "));
+  dwinDrawFloatValue(true, true, 0, size, COLOR_WHITE, bColor, iNum, fNum, x, y, value < 0 ? -value : value);
 }
 
 void drawEditInteger3(const uint8_t row, const uint16_t value, const bool active=false) {
-  dwinDrawIntValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 3, 220, EBASE(row), value);
+  dwinDrawIntValue(true, true, 0, font8x16, COLOR_WHITE, active ? COLOR_SELECT : COLOR_BG_BLACK, 3, 220, EBASE(row), value);
 }
 
 void drawEditInteger4(const uint8_t row, const uint16_t value, const bool active=false) {
-  dwinDrawIntValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 4, 220 - 1 * 8, EBASE(row), value);
+  dwinDrawIntValue(true, true, 0, font8x16, COLOR_WHITE, active ? COLOR_SELECT : COLOR_BG_BLACK, 4, 220 - 1 * 8, EBASE(row), value);
 }
 
 void drawEditFloat3(const uint8_t row, const uint16_t value, const bool active=false) {
-  dwinDrawFloatValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 3, UNITFDIGITS, 220 - UNITFDIGITS * 8, EBASE(row), (int32_t)value);
+  dwinDrawFloatValue(true, true, 0, font8x16, COLOR_WHITE, active ? COLOR_SELECT : COLOR_BG_BLACK, 3, UNITFDIGITS, 220 - UNITFDIGITS * 8, EBASE(row), (int32_t)value);
 }
 
 void drawEditSignedFloat2(const uint8_t row, const float value, const bool active=false) {
-  dwinDrawSigned_Float(font8x16, active ? Select_Color : Color_Bg_Black, 2, UNITFDIGITS + 1, 220 + 8 - UNITFDIGITS * 8, EBASE(row), value);
+  dwinDrawSignedFloat(font8x16, active ? COLOR_SELECT : COLOR_BG_BLACK, 2, UNITFDIGITS + 1, 220 + 8 - UNITFDIGITS * 8, EBASE(row), value);
 }
 
 void drawEditSignedFloat3(const uint8_t row, const float value, const bool active=false) {
-  dwinDrawSigned_Float(font8x16, active ? Select_Color : Color_Bg_Black, 3, UNITFDIGITS, 220 - UNITFDIGITS * 8, EBASE(row), value);
+  dwinDrawSignedFloat(font8x16, active ? COLOR_SELECT : COLOR_BG_BLACK, 3, UNITFDIGITS, 220 - UNITFDIGITS * 8, EBASE(row), value);
 }
 
 void drawStatInt(const uint16_t xpos, const uint16_t ypos, const uint16_t value) {
-  dwinDrawIntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, xpos, ypos, value);
+  dwinDrawIntValue(true, true, 0, DWIN_FONT_STAT, COLOR_WHITE, COLOR_BG_BLACK, 3, xpos, ypos, value);
 }
 
 void drawStatFloat(const uint16_t xpos, const uint16_t ypos, const float value) {
-  dwinDrawFloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, xpos, ypos, value);
+  dwinDrawFloatValue(true, true, 0, DWIN_FONT_STAT, COLOR_WHITE, COLOR_BG_BLACK, 2, 2, xpos, ypos, value);
 }
 
 //
@@ -731,7 +731,7 @@ void itemPrepareLang(const uint8_t row) {
       itemAreaCopy(1, 194, 96, 206, row);    // "LCD Language"
     #endif
   }
-  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, 226, EBASE(row), hmiIsChinese() ? F("CN") : F("EN"));
+  dwinDrawString(false, font8x16, COLOR_WHITE, COLOR_BG_BLACK, 226, EBASE(row), hmiIsChinese() ? F("CN") : F("EN"));
   drawMenuIcon(row, ICON_Language);
 }
 
@@ -1069,8 +1069,8 @@ void drawMotionMenu() {
         dwinFrameAreaCopy(1, 189, 389, 271, 402,  95, 310);
       }
       else {
-        dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
-        dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, 92, 300, F("is too high"));
+        dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, 36, 300, F("Nozzle or Bed temperature"));
+        dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, 92, 300, F("is too high"));
       }
     }
     else {
@@ -1080,8 +1080,8 @@ void drawMotionMenu() {
         dwinFrameAreaCopy(1, 189, 389, 271, 402, 95, 310);
       }
       else {
-        dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
-        dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, 92, 300, F("is too low"));
+        dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, 36, 300, F("Nozzle or Bed temperature"));
+        dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, 92, 300, F("is too low"));
       }
     }
   }
@@ -1089,7 +1089,7 @@ void drawMotionMenu() {
 #endif
 
 void drawPopupBkgd60() {
-  dwinDrawRectangle(1, Color_Bg_Window, 14, 60, 258, 330);
+  dwinDrawRectangle(1, COLOR_BG_WINDOW, 14, 60, 258, 330);
 }
 
 #if HAS_HOTEND
@@ -1104,7 +1104,7 @@ void drawPopupBkgd60() {
       dwinIconShow(ICON, ICON_Confirm_C, 86, 280);
     }
     else {
-      dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, 20, 235, F("Nozzle is too cold"));
+      dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, 20, 235, F("Nozzle is too cold"));
       dwinIconShow(ICON, ICON_Confirm_E, 86, 280);
     }
   }
@@ -1121,9 +1121,9 @@ void popupWindowResume() {
     dwinIconShow(ICON, ICON_Continue_C, 146, 307);
   }
   else {
-    dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 14) / 2, 115, F("Continue Print"));
-    dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 192, F("It looks like the last"));
-    dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 212, F("file was interrupted."));
+    dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, (272 - 8 * 14) / 2, 115, F("Continue Print"));
+    dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, (272 - 8 * 22) / 2, 192, F("It looks like the last"));
+    dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, (272 - 8 * 22) / 2, 212, F("file was interrupted."));
     dwinIconShow(ICON, ICON_Cancel_E,    26, 307);
     dwinIconShow(ICON, ICON_Continue_E, 146, 307);
   }
@@ -1139,8 +1139,8 @@ void popupWindowHome(const bool parking/*=false*/) {
     dwinFrameAreaCopy(1, 0, 389, 150, 402, 61, 280);
   }
   else {
-    dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * (parking ? 7 : 10)) / 2, 230, parking ? F("Parking") : F("Homing XYZ"));
-    dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
+    dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, (272 - 8 * (parking ? 7 : 10)) / 2, 230, parking ? F("Parking") : F("Homing XYZ"));
+    dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
   }
 }
 
@@ -1155,8 +1155,8 @@ void popupWindowHome(const bool parking/*=false*/) {
       dwinFrameAreaCopy(1, 0, 389, 150, 402, 61, 280);
     }
     else {
-      dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 13) / 2, 230, GET_TEXT_F(MSG_BED_LEVELING));
-      dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
+      dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, (272 - 8 * 13) / 2, 230, GET_TEXT_F(MSG_BED_LEVELING));
+      dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
     }
   }
 
@@ -1164,8 +1164,8 @@ void popupWindowHome(const bool parking/*=false*/) {
 
 void drawSelectHighlight(const bool sel) {
   hmiFlag.select_flag = sel;
-  const uint16_t c1 = sel ? Select_Color : Color_Bg_Window,
-                 c2 = sel ? Color_Bg_Window : Select_Color;
+  const uint16_t c1 = sel ? COLOR_SELECT : COLOR_BG_WINDOW,
+                 c2 = sel ? COLOR_BG_WINDOW : COLOR_SELECT;
   dwinDrawRectangle(0, c1, 25, 279, 126, 318);
   dwinDrawRectangle(0, c1, 24, 278, 127, 319);
   dwinDrawRectangle(0, c2, 145, 279, 246, 318);
@@ -1183,8 +1183,8 @@ void popupwindowPauseOrStop() {
     dwinIconShow(ICON, ICON_Cancel_C, 146, 280);
   }
   else {
-         if (select_print.now == PRINT_PAUSE_RESUME) dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 11) / 2, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
-    else if (select_print.now == PRINT_STOP) dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 10) / 2, 150, GET_TEXT_F(MSG_STOP_PRINT));
+         if (select_print.now == PRINT_PAUSE_RESUME) dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, (272 - 8 * 11) / 2, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
+    else if (select_print.now == PRINT_STOP) dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, (272 - 8 * 10) / 2, 150, GET_TEXT_F(MSG_STOP_PRINT));
     dwinIconShow(ICON, ICON_Confirm_E, 26, 280);
     dwinIconShow(ICON, ICON_Cancel_E, 146, 280);
   }
@@ -1208,28 +1208,28 @@ void drawPrintingScreen() {
 void drawPrintProgressBar() {
   constexpr uint16_t y = 93, h = 21;
   dwinIconShow(ICON, ICON_Bar, 15, 93);
-  dwinDrawRectangle(1, BarFill_Color, 16 + _card_percent * 240 / 100, y, 256, y + h - 1);
-  dwinDrawIntValue(true, true, 0, font8x16, Percent_Color, Color_Bg_Black, 2, 117, y + 40, _card_percent);
-  dwinDrawString(false, font8x16, Percent_Color, Color_Bg_Black, 133, y + 40, F("%"));
+  dwinDrawRectangle(1, COLOR_BARFILL, 16 + _card_percent * 240 / 100, y, 256, y + h - 1);
+  dwinDrawIntValue(true, true, 0, font8x16, COLOR_PERCENT, COLOR_BG_BLACK, 2, 117, y + 40, _card_percent);
+  dwinDrawString(false, font8x16, COLOR_PERCENT, COLOR_BG_BLACK, 133, y + 40, F("%"));
 }
 
 void drawPrintProgressElapsed() {
   constexpr uint16_t x = 45, y = 192;
   duration_t elapsed = print_job_timer.duration(); // Print timer
-  dwinDrawIntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x, y, elapsed.value / 3600);
-  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, x + 8 * 2, y, F(":"));
-  dwinDrawIntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x + 8 * 3, y, (elapsed.value % 3600) / 60);
+  dwinDrawIntValue(true, true, 1, font8x16, COLOR_WHITE, COLOR_BG_BLACK, 2, x, y, elapsed.value / 3600);
+  dwinDrawString(false, font8x16, COLOR_WHITE, COLOR_BG_BLACK, x + 8 * 2, y, F(":"));
+  dwinDrawIntValue(true, true, 1, font8x16, COLOR_WHITE, COLOR_BG_BLACK, 2, x + 8 * 3, y, (elapsed.value % 3600) / 60);
 }
 
 void drawPrintProgressRemain() {
   constexpr uint16_t x = 179, y = 192;
-  dwinDrawIntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x, y, _remain_time / 3600);
-  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, x + 8 * 2, y, F(":"));
-  dwinDrawIntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x + 8 * 3, y, (_remain_time % 3600) / 60);
+  dwinDrawIntValue(true, true, 1, font8x16, COLOR_WHITE, COLOR_BG_BLACK, 2, x, y, _remain_time / 3600);
+  dwinDrawString(false, font8x16, COLOR_WHITE, COLOR_BG_BLACK, x + 8 * 2, y, F(":"));
+  dwinDrawIntValue(true, true, 1, font8x16, COLOR_WHITE, COLOR_BG_BLACK, 2, x + 8 * 3, y, (_remain_time % 3600) / 60);
 }
 
 void gotoPrintProcess() {
-  checkkey = PrintProcess;
+  checkkey = ID_PrintProcess;
 
   clearMainWindow();
   drawPrintingScreen();
@@ -1241,7 +1241,7 @@ void gotoPrintProcess() {
   // Copy into filebuf string before entry
   char * const name = card.longest_filename();
   const int8_t npos = _MAX(0U, DWIN_WIDTH - strlen(name) * MENU_CHR_W) / 2;
-  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, npos, 60, name);
+  dwinDrawString(false, font8x16, COLOR_WHITE, COLOR_BG_BLACK, npos, 60, name);
 
   dwinIconShow(ICON, ICON_PrintTime,   17, 163);
   dwinIconShow(ICON, ICON_RemainTime, 150, 161);
@@ -1252,7 +1252,7 @@ void gotoPrintProcess() {
 }
 
 void gotoMainMenu() {
-  checkkey = MainMenu;
+  checkkey = ID_MainMenu;
 
   clearMainWindow();
 
@@ -1285,51 +1285,63 @@ void hmiPlanMove(const feedRate_t fr_mm_s) {
 void hmiMoveDone(const AxisEnum axis) {
   encoderRate.enabled = false;
   planner.synchronize();
-  checkkey = AxisMove;
+  checkkey = ID_AxisMove;
   dwinUpdateLCD();
 }
 
-void hmiMoveX() {
-  EncoderState encoder_diffState = encoderReceiveAnalyze();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (applyEncoder(encoder_diffState, hmiValues.Move_X_scaled)) {
-    drawEditFloat3(1, hmiValues.Move_X_scaled);
-    return hmiMoveDone(X_AXIS);
+#if HAS_X_AXIS
+
+  void hmiMoveX() {
+    EncoderState encoder_diffState = encoderReceiveAnalyze();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+    if (applyEncoder(encoder_diffState, hmiValues.moveScaled.x)) {
+      drawEditFloat3(1, hmiValues.moveScaled.x);
+      return hmiMoveDone(X_AXIS);
+    }
+    LIMIT(hmiValues.moveScaled.x, (X_MIN_POS) * MINUNITMULT, (X_MAX_POS) * MINUNITMULT);
+    current_position.x = hmiValues.moveScaled.x / MINUNITMULT;
+    drawEditFloat3(1, hmiValues.moveScaled.x, true);
+    dwinUpdateLCD();
+    hmiPlanMove(homing_feedrate(X_AXIS));
   }
-  LIMIT(hmiValues.Move_X_scaled, (X_MIN_POS) * MINUNITMULT, (X_MAX_POS) * MINUNITMULT);
-  current_position.x = hmiValues.Move_X_scaled / MINUNITMULT;
-  drawEditFloat3(1, hmiValues.Move_X_scaled, true);
-  dwinUpdateLCD();
-  hmiPlanMove(homing_feedrate(X_AXIS));
-}
 
-void hmiMoveY() {
-  EncoderState encoder_diffState = encoderReceiveAnalyze();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (applyEncoder(encoder_diffState, hmiValues.Move_Y_scaled)) {
-    drawEditFloat3(2, hmiValues.Move_Y_scaled);
-    return hmiMoveDone(Y_AXIS);
+#endif
+
+#if HAS_Y_AXIS
+
+  void hmiMoveY() {
+    EncoderState encoder_diffState = encoderReceiveAnalyze();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+    if (applyEncoder(encoder_diffState, hmiValues.moveScaled.y)) {
+      drawEditFloat3(2, hmiValues.moveScaled.y);
+      return hmiMoveDone(Y_AXIS);
+    }
+    LIMIT(hmiValues.moveScaled.y, (Y_MIN_POS) * MINUNITMULT, (Y_MAX_POS) * MINUNITMULT);
+    current_position.y = hmiValues.moveScaled.y / MINUNITMULT;
+    drawEditFloat3(2, hmiValues.moveScaled.y, true);
+    dwinUpdateLCD();
+    hmiPlanMove(homing_feedrate(Y_AXIS));
   }
-  LIMIT(hmiValues.Move_Y_scaled, (Y_MIN_POS) * MINUNITMULT, (Y_MAX_POS) * MINUNITMULT);
-  current_position.y = hmiValues.Move_Y_scaled / MINUNITMULT;
-  drawEditFloat3(2, hmiValues.Move_Y_scaled, true);
-  dwinUpdateLCD();
-  hmiPlanMove(homing_feedrate(Y_AXIS));
-}
 
-void hmiMoveZ() {
-  EncoderState encoder_diffState = encoderReceiveAnalyze();
-  if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (applyEncoder(encoder_diffState, hmiValues.Move_Z_scaled)) {
-    drawEditFloat3(3, hmiValues.Move_Z_scaled);
-    return hmiMoveDone(Z_AXIS);
+#endif
+
+#if HAS_Z_AXIS
+
+  void hmiMoveZ() {
+    EncoderState encoder_diffState = encoderReceiveAnalyze();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+    if (applyEncoder(encoder_diffState, hmiValues.moveScaled.z)) {
+      drawEditFloat3(3, hmiValues.moveScaled.z);
+      return hmiMoveDone(Z_AXIS);
+    }
+    LIMIT(hmiValues.moveScaled.z, (Z_MIN_POS) * MINUNITMULT, (Z_MAX_POS) * MINUNITMULT);
+    current_position.z = hmiValues.moveScaled.z / MINUNITMULT;
+    drawEditFloat3(3, hmiValues.moveScaled.z, true);
+    dwinUpdateLCD();
+    hmiPlanMove(homing_feedrate(Z_AXIS));
   }
-  LIMIT(hmiValues.Move_Z_scaled, (Z_MIN_POS) * MINUNITMULT, (Z_MAX_POS) * MINUNITMULT);
-  current_position.z = hmiValues.Move_Z_scaled / MINUNITMULT;
-  drawEditFloat3(3, hmiValues.Move_Z_scaled, true);
-  dwinUpdateLCD();
-  hmiPlanMove(homing_feedrate(Z_AXIS));
-}
+
+#endif
 
 #if HAS_HOTEND
 
@@ -1337,14 +1349,14 @@ void hmiMoveZ() {
     static float last_E_scaled = 0;
     EncoderState encoder_diffState = encoderReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
-    if (applyEncoder(encoder_diffState, hmiValues.Move_E_scaled)) {
-      last_E_scaled = hmiValues.Move_E_scaled;
+    if (applyEncoder(encoder_diffState, hmiValues.moveScaled.e)) {
+      last_E_scaled = hmiValues.moveScaled.e;
       drawEditSignedFloat3(4, last_E_scaled);
       return hmiMoveDone(E_AXIS);
     }
-    LIMIT(hmiValues.Move_E_scaled, last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT, last_E_scaled + (EXTRUDE_MAXLENGTH) * MINUNITMULT);
-    current_position.e = hmiValues.Move_E_scaled / MINUNITMULT;
-    drawEditSignedFloat3(4, hmiValues.Move_E_scaled, true);
+    LIMIT(hmiValues.moveScaled.e, last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT, last_E_scaled + (EXTRUDE_MAXLENGTH) * MINUNITMULT);
+    current_position.e = hmiValues.moveScaled.e / MINUNITMULT;
+    drawEditSignedFloat3(4, hmiValues.moveScaled.e, true);
     dwinUpdateLCD();
     hmiPlanMove(MMM_TO_MMS(FEEDRATE_E));
   }
@@ -1367,7 +1379,7 @@ void hmiMoveZ() {
         probe.offset.z = dwin_zoffset;
         TERN_(EEPROM_SETTINGS, settings.save());
       #endif
-      checkkey = hmiValues.show_mode == -4 ? Prepare : Tune;
+      checkkey = hmiValues.show_mode == -4 ? ID_Prepare : ID_Tune;
       drawEditSignedFloat2(zoff_line, TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, hmiValues.offset_value));
       dwinUpdateLCD();
       return;
@@ -1400,19 +1412,19 @@ void hmiMoveZ() {
       #endif
       default: temp_line = TUNE_CASE_TEMP + MROWS - index_tune;
     }
-    if (applyEncoder(encoder_diffState, hmiValues.E_Temp)) {
+    if (applyEncoder(encoder_diffState, hmiValues.tempE)) {
       encoderRate.enabled = false;
       #if HAS_PREHEAT
         if (hmiValues.show_mode == -2) {
-          checkkey = PLAPreheat;
-          ui.material_preset[0].hotend_temp = hmiValues.E_Temp;
+          checkkey = ID_PLAPreheat;
+          ui.material_preset[0].hotend_temp = hmiValues.tempE;
           drawEditInteger3(temp_line, ui.material_preset[0].hotend_temp);
           return;
         }
         #if PREHEAT_COUNT > 1
           if (hmiValues.show_mode == -3) {
-            checkkey = ABSPreheat;
-            ui.material_preset[1].hotend_temp = hmiValues.E_Temp;
+            checkkey = ID_ABSPreheat;
+            ui.material_preset[1].hotend_temp = hmiValues.tempE;
             drawEditInteger3(temp_line, ui.material_preset[1].hotend_temp);
             return;
           }
@@ -1420,17 +1432,17 @@ void hmiMoveZ() {
       #endif
 
       if (hmiValues.show_mode == -1) // Temperature
-        checkkey = TemperatureID;
+        checkkey = ID_TemperatureID;
       else
-        checkkey = Tune;
-      drawEditInteger3(temp_line, hmiValues.E_Temp);
-      thermalManager.setTargetHotend(hmiValues.E_Temp, 0);
+        checkkey = ID_Tune;
+      drawEditInteger3(temp_line, hmiValues.tempE);
+      thermalManager.setTargetHotend(hmiValues.tempE, 0);
       return;
     }
-    // E_Temp limit
-    LIMIT(hmiValues.E_Temp, HEATER_0_MINTEMP, thermalManager.hotend_max_target(0));
-    // E_Temp value
-    drawEditInteger3(temp_line, hmiValues.E_Temp, true);
+    // tempE limit
+    LIMIT(hmiValues.tempE, HEATER_0_MINTEMP, thermalManager.hotend_max_target(0));
+    // tempE value
+    drawEditInteger3(temp_line, hmiValues.tempE, true);
   }
 
 #endif // HAS_HOTEND
@@ -1451,33 +1463,33 @@ void hmiMoveZ() {
       #endif
       default: bed_line = TUNE_CASE_BED + MROWS - index_tune;
     }
-    if (applyEncoder(encoder_diffState, hmiValues.Bed_Temp)) {
+    if (applyEncoder(encoder_diffState, hmiValues.tempBed)) {
       encoderRate.enabled = false;
       #if HAS_PREHEAT
         if (hmiValues.show_mode == -2) {
-          checkkey = PLAPreheat;
-          ui.material_preset[0].bed_temp = hmiValues.Bed_Temp;
+          checkkey = ID_PLAPreheat;
+          ui.material_preset[0].bed_temp = hmiValues.tempBed;
           drawEditInteger3(bed_line, ui.material_preset[0].bed_temp);
           return;
         }
         #if PREHEAT_COUNT > 1
           if (hmiValues.show_mode == -3) {
-            checkkey = ABSPreheat;
-            ui.material_preset[1].bed_temp = hmiValues.Bed_Temp;
+            checkkey = ID_ABSPreheat;
+            ui.material_preset[1].bed_temp = hmiValues.tempBed;
             drawEditInteger3(bed_line, ui.material_preset[1].bed_temp);
             return;
           }
         #endif
       #endif
-      checkkey = hmiValues.show_mode == -1 ? TemperatureID : Tune;
-      drawEditInteger3(bed_line, hmiValues.Bed_Temp);
-      thermalManager.setTargetBed(hmiValues.Bed_Temp);
+      checkkey = hmiValues.show_mode == -1 ? ID_TemperatureID : ID_Tune;
+      drawEditInteger3(bed_line, hmiValues.tempBed);
+      thermalManager.setTargetBed(hmiValues.tempBed);
       return;
     }
-    // Bed_Temp limit
-    LIMIT(hmiValues.Bed_Temp, BED_MINTEMP, BED_MAX_TARGET);
-    // Bed_Temp value
-    drawEditInteger3(bed_line, hmiValues.Bed_Temp, true);
+    // tempBed limit
+    LIMIT(hmiValues.tempBed, BED_MINTEMP, BED_MAX_TARGET);
+    // tempBed value
+    drawEditInteger3(bed_line, hmiValues.tempBed, true);
   }
 
 #endif // HAS_HEATED_BED
@@ -1495,31 +1507,31 @@ void hmiMoveZ() {
       default: fan_line = TUNE_CASE_FAN + MROWS - index_tune;
     }
 
-    if (applyEncoder(encoder_diffState, hmiValues.Fan_speed)) {
+    if (applyEncoder(encoder_diffState, hmiValues.fanSpeed)) {
       encoderRate.enabled = false;
       if (hmiValues.show_mode == -2) {
-        checkkey = PLAPreheat;
-        ui.material_preset[0].fan_speed = hmiValues.Fan_speed;
+        checkkey = ID_PLAPreheat;
+        ui.material_preset[0].fan_speed = hmiValues.fanSpeed;
         drawEditInteger3(fan_line, ui.material_preset[0].fan_speed);
         return;
       }
       #if PREHEAT_COUNT > 1
         if (hmiValues.show_mode == -3) {
-          checkkey = ABSPreheat;
-          ui.material_preset[1].fan_speed = hmiValues.Fan_speed;
+          checkkey = ID_ABSPreheat;
+          ui.material_preset[1].fan_speed = hmiValues.fanSpeed;
           drawEditInteger3(fan_line, ui.material_preset[1].fan_speed);
           return;
         }
       #endif
-      checkkey = hmiValues.show_mode == -1 ? TemperatureID : Tune;
-      drawEditInteger3(fan_line, hmiValues.Fan_speed);
-      thermalManager.set_fan_speed(0, hmiValues.Fan_speed);
+      checkkey = hmiValues.show_mode == -1 ? ID_TemperatureID : ID_Tune;
+      drawEditInteger3(fan_line, hmiValues.fanSpeed);
+      thermalManager.set_fan_speed(0, hmiValues.fanSpeed);
       return;
     }
-    // Fan_speed limit
-    LIMIT(hmiValues.Fan_speed, 0, 255);
-    // Fan_speed value
-    drawEditInteger3(fan_line, hmiValues.Fan_speed, true);
+    // fanSpeed limit
+    LIMIT(hmiValues.fanSpeed, 0, 255);
+    // fanSpeed value
+    drawEditInteger3(fan_line, hmiValues.fanSpeed, true);
   }
 
 #endif // HAS_PREHEAT && HAS_FAN
@@ -1527,17 +1539,17 @@ void hmiMoveZ() {
 void hmiPrintSpeed() {
   EncoderState encoder_diffState = encoderReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (applyEncoder(encoder_diffState, hmiValues.print_speed)) {
-    checkkey = Tune;
+  if (applyEncoder(encoder_diffState, hmiValues.printSpeed)) {
+    checkkey = ID_Tune;
     encoderRate.enabled = false;
-    feedrate_percentage = hmiValues.print_speed;
-    drawEditInteger3(select_tune.now + MROWS - index_tune, hmiValues.print_speed);
+    feedrate_percentage = hmiValues.printSpeed;
+    drawEditInteger3(select_tune.now + MROWS - index_tune, hmiValues.printSpeed);
     return;
   }
-  // print_speed limit
-  LIMIT(hmiValues.print_speed, MIN_PRINT_SPEED, MAX_PRINT_SPEED);
-  // print_speed value
-  drawEditInteger3(select_tune.now + MROWS - index_tune, hmiValues.print_speed, true);
+  // printSpeed limit
+  LIMIT(hmiValues.printSpeed, MIN_PRINT_SPEED, MAX_PRINT_SPEED);
+  // printSpeed value
+  drawEditInteger3(select_tune.now + MROWS - index_tune, hmiValues.printSpeed, true);
 }
 
 #define LAST_AXIS TERN(HAS_HOTEND, E_AXIS, Z_AXIS)
@@ -1545,37 +1557,37 @@ void hmiPrintSpeed() {
 void hmiMaxFeedspeedXYZE() {
   EncoderState encoder_diffState = encoderReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (applyEncoder(encoder_diffState, hmiValues.Max_Feedspeed)) {
-    checkkey = MaxSpeed;
+  if (applyEncoder(encoder_diffState, hmiValues.maxFeedSpeed)) {
+    checkkey = ID_MaxSpeed;
     encoderRate.enabled = false;
     if (WITHIN(hmiFlag.feedspeed_axis, X_AXIS, LAST_AXIS))
-      planner.set_max_feedrate(hmiFlag.feedspeed_axis, hmiValues.Max_Feedspeed);
-    drawEditInteger4(select_speed.now, hmiValues.Max_Feedspeed);
+      planner.set_max_feedrate(hmiFlag.feedspeed_axis, hmiValues.maxFeedSpeed);
+    drawEditInteger4(select_speed.now, hmiValues.maxFeedSpeed);
     return;
   }
   // MaxFeedspeed limit
   if (WITHIN(hmiFlag.feedspeed_axis, X_AXIS, LAST_AXIS))
-    LIMIT(hmiValues.Max_Feedspeed, min_feedrate_edit_values[hmiFlag.feedspeed_axis], max_feedrate_edit_values[hmiFlag.feedspeed_axis]);
+    LIMIT(hmiValues.maxFeedSpeed, min_feedrate_edit_values[hmiFlag.feedspeed_axis], max_feedrate_edit_values[hmiFlag.feedspeed_axis]);
   // MaxFeedspeed value
-  drawEditInteger4(select_speed.now, hmiValues.Max_Feedspeed, true);
+  drawEditInteger4(select_speed.now, hmiValues.maxFeedSpeed, true);
 }
 
 void hmiMaxAccelerationXYZE() {
   EncoderState encoder_diffState = encoderReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (applyEncoder(encoder_diffState, hmiValues.Max_Acceleration)) {
-    checkkey = MaxAcceleration;
+  if (applyEncoder(encoder_diffState, hmiValues.maxAcceleration)) {
+    checkkey = ID_MaxAcceleration;
     encoderRate.enabled = false;
     if (WITHIN(hmiFlag.acc_axis, X_AXIS, LAST_AXIS))
-      planner.set_max_acceleration(hmiFlag.acc_axis, hmiValues.Max_Acceleration);
-    drawEditInteger4(select_acc.now, hmiValues.Max_Acceleration);
+      planner.set_max_acceleration(hmiFlag.acc_axis, hmiValues.maxAcceleration);
+    drawEditInteger4(select_acc.now, hmiValues.maxAcceleration);
     return;
   }
   // MaxAcceleration limit
   if (WITHIN(hmiFlag.acc_axis, X_AXIS, LAST_AXIS))
-    LIMIT(hmiValues.Max_Acceleration, min_acceleration_edit_values[hmiFlag.acc_axis], max_acceleration_edit_values[hmiFlag.acc_axis]);
+    LIMIT(hmiValues.maxAcceleration, min_acceleration_edit_values[hmiFlag.acc_axis], max_acceleration_edit_values[hmiFlag.acc_axis]);
   // MaxAcceleration value
-  drawEditInteger4(select_acc.now, hmiValues.Max_Acceleration, true);
+  drawEditInteger4(select_acc.now, hmiValues.maxAcceleration, true);
 }
 
 #if HAS_CLASSIC_JERK
@@ -1583,19 +1595,19 @@ void hmiMaxAccelerationXYZE() {
   void hmiMaxJerkXYZE() {
     EncoderState encoder_diffState = encoderReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
-    if (applyEncoder(encoder_diffState, hmiValues.Max_Jerk_scaled)) {
-      checkkey = MaxJerk;
+    if (applyEncoder(encoder_diffState, hmiValues.maxJerkScaled)) {
+      checkkey = ID_MaxJerk;
       encoderRate.enabled = false;
       if (WITHIN(hmiFlag.jerk_axis, X_AXIS, LAST_AXIS))
-        planner.set_max_jerk(hmiFlag.jerk_axis, hmiValues.Max_Jerk_scaled / MINUNITMULT);
-      drawEditFloat3(select_jerk.now, hmiValues.Max_Jerk_scaled);
+        planner.set_max_jerk(hmiFlag.jerk_axis, hmiValues.maxJerkScaled / MINUNITMULT);
+      drawEditFloat3(select_jerk.now, hmiValues.maxJerkScaled);
       return;
     }
     // MaxJerk limit
     if (WITHIN(hmiFlag.jerk_axis, X_AXIS, LAST_AXIS))
-      LIMIT(hmiValues.Max_Jerk_scaled, min_jerk_edit_values[hmiFlag.jerk_axis] * MINUNITMULT, max_jerk_edit_values[hmiFlag.jerk_axis] * MINUNITMULT);
+      LIMIT(hmiValues.maxJerkScaled, min_jerk_edit_values[hmiFlag.jerk_axis] * MINUNITMULT, max_jerk_edit_values[hmiFlag.jerk_axis] * MINUNITMULT);
     // MaxJerk value
-    drawEditFloat3(select_jerk.now, hmiValues.Max_Jerk_scaled, true);
+    drawEditFloat3(select_jerk.now, hmiValues.maxJerkScaled, true);
   }
 
 #endif // HAS_CLASSIC_JERK
@@ -1603,19 +1615,19 @@ void hmiMaxAccelerationXYZE() {
 void hmiStepXYZE() {
   EncoderState encoder_diffState = encoderReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (applyEncoder(encoder_diffState, hmiValues.Max_Step_scaled)) {
-    checkkey = Step;
+  if (applyEncoder(encoder_diffState, hmiValues.maxStepScaled)) {
+    checkkey = ID_Step;
     encoderRate.enabled = false;
     if (WITHIN(hmiFlag.step_axis, X_AXIS, LAST_AXIS))
-      planner.settings.axis_steps_per_mm[hmiFlag.step_axis] = hmiValues.Max_Step_scaled / MINUNITMULT;
-    drawEditFloat3(select_step.now, hmiValues.Max_Step_scaled);
+      planner.settings.axis_steps_per_mm[hmiFlag.step_axis] = hmiValues.maxStepScaled / MINUNITMULT;
+    drawEditFloat3(select_step.now, hmiValues.maxStepScaled);
     return;
   }
   // Step limit
   if (WITHIN(hmiFlag.step_axis, X_AXIS, LAST_AXIS))
-    LIMIT(hmiValues.Max_Step_scaled, min_steps_edit_values[hmiFlag.step_axis] * MINUNITMULT, max_steps_edit_values[hmiFlag.step_axis] * MINUNITMULT);
+    LIMIT(hmiValues.maxStepScaled, min_steps_edit_values[hmiFlag.step_axis] * MINUNITMULT, max_steps_edit_values[hmiFlag.step_axis] * MINUNITMULT);
   // Step value
-  drawEditFloat3(select_step.now, hmiValues.Max_Step_scaled, true);
+  drawEditFloat3(select_step.now, hmiValues.maxStepScaled, true);
 }
 
 // Draw X, Y, Z and blink if in an un-homed or un-trusted state
@@ -1631,11 +1643,11 @@ void _update_axis_value(const AxisEnum axis, const uint16_t x, const uint16_t y,
 
   if (force || changed || draw_qmark || draw_empty) {
     if (blink && draw_qmark)
-      dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, x, y, F("???.?"));
+      dwinDrawString(true, font8x16, COLOR_WHITE, COLOR_BG_BLACK, x, y, F("???.?"));
     else if (blink && draw_empty)
-      dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, x, y, F("     "));
+      dwinDrawString(true, font8x16, COLOR_WHITE, COLOR_BG_BLACK, x, y, F("     "));
     else
-      dwinDrawFloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, x, y, p);
+      dwinDrawFloatValue(true, true, 0, font8x16, COLOR_WHITE, COLOR_BG_BLACK, 3, 1, x, y, p);
   }
 }
 
@@ -1653,7 +1665,7 @@ void _draw_xyz_position(const bool force) {
   //SERIAL_EOL();
 }
 
-void update_variable() {
+void updateVariable() {
   #if HAS_HOTEND
     static celsius_t _hotendtemp = 0, _hotendtarget = 0;
     const celsius_t hc = thermalManager.wholeDegHotend(0),
@@ -1678,7 +1690,7 @@ void update_variable() {
     if (_new_fanspeed) _fanspeed = thermalManager.fan_speed[0];
   #endif
 
-  if (checkkey == Tune) {
+  if (checkkey == ID_Tune) {
     // Tune page temperature update
     #if HAS_HOTEND
       if (_new_hotend_target)
@@ -1693,7 +1705,7 @@ void update_variable() {
         drawEditInteger3(TUNE_CASE_FAN + MROWS - index_tune, _fanspeed);
     #endif
   }
-  else if (checkkey == TemperatureID) {
+  else if (checkkey == ID_TemperatureID) {
     // Temperature page temperature update
     #if HAS_HOTEND
       if (_new_hotend_target) drawEditInteger3(TEMP_CASE_TEMP, _hotendtarget);
@@ -1746,11 +1758,11 @@ void update_variable() {
     _offset = BABY_Z_VAR;
     if (BABY_Z_VAR < 0) {
       drawStatFloat(207, 417, -_offset);
-      dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
+      dwinDrawString(true, font8x16, COLOR_WHITE, COLOR_BG_BLACK, 205, 419, F("-"));
     }
     else {
       drawStatFloat(207, 417, _offset);
-      dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
+      dwinDrawString(true, font8x16, COLOR_WHITE, COLOR_BG_BLACK, 205, 419, F(" "));
     }
   }
 
@@ -1893,8 +1905,8 @@ void redrawSDList() {
     TERN_(SCROLL_LONG_FILENAMES, initSDItemShift());
   }
   else {
-    dwinDrawRectangle(1, Color_Bg_Red, 10, MBASE(3) - 10, DWIN_WIDTH - 10, MBASE(4));
-    dwinDrawString(false, font16x32, Color_Yellow, Color_Bg_Red, ((DWIN_WIDTH) - 8 * 16) / 2, MBASE(3), F("No Media"));
+    dwinDrawRectangle(1, COLOR_BG_RED, 10, MBASE(3) - 10, DWIN_WIDTH - 10, MBASE(4));
+    dwinDrawString(false, font16x32, COLOR_YELLOW, COLOR_BG_RED, ((DWIN_WIDTH) - 8 * 16) / 2, MBASE(3), F("No Media"));
   }
 }
 
@@ -1921,15 +1933,15 @@ void hmiSDCardUpdate() {
     DWIN_lcd_sd_status = card.isMounted();
     //SERIAL_ECHOLNPGM("HMI_SDCardUpdate: ", DWIN_lcd_sd_status);
     if (DWIN_lcd_sd_status) {
-      if (checkkey == SelectFile)
+      if (checkkey == ID_SelectFile)
         redrawSDList();
     }
     else {
       // clean file icon
-      if (checkkey == SelectFile) {
+      if (checkkey == ID_SelectFile) {
         redrawSDList();
       }
-      else if (checkkey == PrintProcess || checkkey == Tune || printingIsActive()) {
+      else if (checkkey == ID_PrintProcess || checkkey == ID_Tune || printingIsActive()) {
         // TODO: Move card removed abort handling
         //       to CardReader::manage_media.
         card.abortFilePrintSoon();
@@ -1947,29 +1959,29 @@ void hmiSDCardUpdate() {
 //
 void drawStatusArea(const bool with_update) {
 
-  dwinDrawRectangle(1, Color_Bg_Black, 0, STATUS_Y, DWIN_WIDTH, DWIN_HEIGHT - 1);
+  dwinDrawRectangle(1, COLOR_BG_BLACK, 0, STATUS_Y, DWIN_WIDTH, DWIN_HEIGHT - 1);
 
   #if HAS_HOTEND
     dwinIconShow(ICON, ICON_HotendTemp, 10, 383);
     drawStatInt(28, 384, thermalManager.wholeDegHotend(0));
-    dwinDrawString(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 384, F("/"));
+    dwinDrawString(false, DWIN_FONT_STAT, COLOR_WHITE, COLOR_BG_BLACK, 25 + 3 * STAT_CHR_W + 5, 384, F("/"));
     drawStatInt(25 + 4 * STAT_CHR_W + 6, 384, thermalManager.degTargetHotend(0));
 
     dwinIconShow(ICON, ICON_StepE, 112, 417);
     drawStatInt(116 + 2 * STAT_CHR_W, 417, planner.flow_percentage[0]);
-    dwinDrawString(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 417, F("%"));
+    dwinDrawString(false, DWIN_FONT_STAT, COLOR_WHITE, COLOR_BG_BLACK, 116 + 5 * STAT_CHR_W + 2, 417, F("%"));
   #endif
 
   #if HAS_HEATED_BED
     dwinIconShow(ICON, ICON_BedTemp, 10, 416);
     drawStatInt(28, 417, thermalManager.wholeDegBed());
-    dwinDrawString(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 417, F("/"));
+    dwinDrawString(false, DWIN_FONT_STAT, COLOR_WHITE, COLOR_BG_BLACK, 25 + 3 * STAT_CHR_W + 5, 417, F("/"));
     drawStatInt(25 + 4 * STAT_CHR_W + 6, 417, thermalManager.degTargetBed());
   #endif
 
   dwinIconShow(ICON, ICON_Speed, 113, 383);
   drawStatInt(116 + 2 * STAT_CHR_W, 384, feedrate_percentage);
-  dwinDrawString(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 384, F("%"));
+  dwinDrawString(false, DWIN_FONT_STAT, COLOR_WHITE, COLOR_BG_BLACK, 116 + 5 * STAT_CHR_W + 2, 384, F("%"));
 
   #if HAS_FAN
     dwinIconShow(ICON, ICON_FanSpeed, 187, 383);
@@ -1982,14 +1994,14 @@ void drawStatusArea(const bool with_update) {
 
   if (BABY_Z_VAR < 0) {
     drawStatFloat(207, 417, -BABY_Z_VAR * 100);
-    dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
+    dwinDrawString(true, font8x16, COLOR_WHITE, COLOR_BG_BLACK, 205, 419, F("-"));
   }
   else {
     drawStatFloat(207, 417, BABY_Z_VAR * 100);
-    dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
+    dwinDrawString(true, font8x16, COLOR_WHITE, COLOR_BG_BLACK, 205, 419, F(" "));
   }
 
-  dwinDrawRectangle(1, Line_Color, 0, 449, DWIN_WIDTH, 451);
+  dwinDrawRectangle(1, COLOR_LINE, 0, 449, DWIN_WIDTH, 451);
 
   dwinIconShow(ICON, ICON_MaxSpeedX,  10, 456);
   dwinIconShow(ICON, ICON_MaxSpeedY,  95, 456);
@@ -2010,8 +2022,8 @@ void hmiStartFrame(const bool with_update) {
 void drawInfoMenu() {
   clearMainWindow();
 
-  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(MACHINE_SIZE) * MENU_CHR_W) / 2, 122, F(MACHINE_SIZE));
-  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, F(SHORT_BUILD_VERSION));
+  dwinDrawString(false, font8x16, COLOR_WHITE, COLOR_BG_BLACK, (DWIN_WIDTH - strlen(MACHINE_SIZE) * MENU_CHR_W) / 2, 122, F(MACHINE_SIZE));
+  dwinDrawString(false, font8x16, COLOR_WHITE, COLOR_BG_BLACK, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, F(SHORT_BUILD_VERSION));
 
   if (hmiIsChinese()) {
     dwinFrameTitleCopy(30, 17, 28, 13);                   // "Info"
@@ -2031,12 +2043,12 @@ void drawInfoMenu() {
     dwinFrameAreaCopy(1, 146, 151, 254, 161,  82, 175);   // "Firmware Version"
     dwinFrameAreaCopy(1,   1, 164,  96, 175,  89, 248);   // "Contact details"
   }
-  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE));
+  dwinDrawString(false, font8x16, COLOR_WHITE, COLOR_BG_BLACK, (DWIN_WIDTH - strlen(CORP_WEBSITE) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE));
 
   drawBackFirst();
   for (uint8_t i = 0; i < 3; ++i) {
     dwinIconShow(ICON, ICON_PrintSize + i, 26, 99 + i * 73);
-    dwinDrawLine(Line_Color, 16, MBASE(2) + i * 73, 256, 156 + i * 73);
+    dwinDrawLine(COLOR_LINE, 16, MBASE(2) + i * 73, 256, 156 + i * 73);
   }
 }
 
@@ -2084,19 +2096,19 @@ void hmiMainMenu() {
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_page.now) {
       case PAGE_PRINT:
-        checkkey = SelectFile;
+        checkkey = ID_SelectFile;
         drawPrintFileMenu();
         break;
 
       case PAGE_PREPARE:
-        checkkey = Prepare;
+        checkkey = ID_Prepare;
         select_prepare.reset();
         index_prepare = MROWS;
         drawPrepareMenu();
         break;
 
       case PAGE_CONTROL:
-        checkkey = Control;
+        checkkey = ID_Control;
         select_control.reset();
         index_control = MROWS;
         drawControlMenu();
@@ -2104,10 +2116,10 @@ void hmiMainMenu() {
 
       case PAGE_INFO_LEVELING:
         #if HAS_ONESTEP_LEVELING
-          checkkey = Leveling;
+          checkkey = ID_Leveling;
           hmiLeveling();
         #else
-          checkkey = Info;
+          checkkey = ID_Info;
           drawInfoMenu();
         #endif
         break;
@@ -2273,7 +2285,7 @@ void hmiPrinting() {
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_print.now) {
       case PRINT_SETUP:
-        checkkey = Tune;
+        checkkey = ID_Tune;
         hmiValues.show_mode = 0;
         select_tune.reset();
         index_tune = MROWS;
@@ -2299,14 +2311,14 @@ void hmiPrinting() {
         }
         else {
           hmiFlag.select_flag = true;
-          checkkey = Print_window;
+          checkkey = ID_PrintWindow;
           popupwindowPauseOrStop();
         }
         break;
 
       case PRINT_STOP:
         hmiFlag.select_flag = true;
-        checkkey = Print_window;
+        checkkey = ID_PrintWindow;
         popupwindowPauseOrStop();
         break;
 
@@ -2335,7 +2347,7 @@ void hmiPauseOrStop() {
     }
     else if (select_print.now == PRINT_STOP) {
       if (hmiFlag.select_flag) {
-        checkkey = Back_Main;
+        checkkey = ID_BackMain;
         wait_for_heatup = wait_for_user = false;      // Stop waiting for heating/user
         card.abortFilePrintSoon();                    // Let the main loop handle SD abort
         dwin_abort_flag = true;                       // Reset feedrate, return to Home
@@ -2518,7 +2530,7 @@ void itemHomeOffs_X(const uint8_t row) {
     #endif
   }
   drawMenuLine(row, ICON_HomeOffset);
-  drawEditSignedFloat3(row, hmiValues.Home_OffX_scaled);
+  drawEditSignedFloat3(row, hmiValues.homeOffsScaled.x);
 }
 
 void itemHomeOffs_Y(const uint8_t row) {
@@ -2533,7 +2545,7 @@ void itemHomeOffs_Y(const uint8_t row) {
     #endif
   }
   drawMenuLine(row, ICON_HomeOffset);
-  drawEditSignedFloat3(row, hmiValues.Home_OffY_scaled);
+  drawEditSignedFloat3(row, hmiValues.homeOffsScaled.y);
 }
 
 void itemHomeOffs_Z(const uint8_t row) {
@@ -2548,7 +2560,7 @@ void itemHomeOffs_Z(const uint8_t row) {
     #endif
   }
   drawMenuLine(row, ICON_HomeOffset);
-  drawEditSignedFloat3(row, hmiValues.Home_OffZ_scaled);
+  drawEditSignedFloat3(row, hmiValues.homeOffsScaled.z);
 }
 
 void drawHomeOffMenu() {
@@ -2593,8 +2605,8 @@ void drawHomeOffMenu() {
       #endif
     }
 
-    drawEditSignedFloat3(1, hmiValues.Probe_OffX_scaled);
-    drawEditSignedFloat3(2, hmiValues.Probe_OffY_scaled);
+    drawEditSignedFloat3(1, hmiValues.probeOffsScaled.x);
+    drawEditSignedFloat3(2, hmiValues.probeOffsScaled.y);
 
     if (select_item.now != CASE_BACK) drawMenuCursor(select_item.now);
   }
@@ -2673,7 +2685,7 @@ void hmiPrepare() {
         gotoMainMenu();
         break;
       case PREPARE_CASE_MOVE:
-        checkkey = AxisMove;
+        checkkey = ID_AxisMove;
         select_axis.reset();
         drawMoveMenu();
 
@@ -2681,15 +2693,15 @@ void hmiPrepare() {
         drawEditFloat3(2, current_position.y * MINUNITMULT);
         drawEditFloat3(3, current_position.z * MINUNITMULT);
         #if HAS_HOTEND
-          hmiValues.Move_E_scaled = current_position.e * MINUNITMULT;
-          drawEditSignedFloat3(4, hmiValues.Move_E_scaled);
+          hmiValues.moveScaled.e = current_position.e * MINUNITMULT;
+          drawEditSignedFloat3(4, hmiValues.moveScaled.e);
         #endif
         break;
 
       case PREPARE_CASE_DISA: queue.inject(F("M84")); break;
 
       case PREPARE_CASE_HOME: // Homing
-        checkkey = Last_Prepare;
+        checkkey = ID_LastPrepare;
         index_prepare = MROWS;
         queue.inject_P(G28_STR); // G28 will set home_flag
         popupWindowHome();
@@ -2698,7 +2710,7 @@ void hmiPrepare() {
       #if HAS_ZOFFSET_ITEM
         case PREPARE_CASE_ZOFF:
           #if ANY(HAS_BED_PROBE, BABYSTEPPING)
-            checkkey = Homeoffset;
+            checkkey = ID_HomeOffset;
             hmiValues.show_mode = -4;
             hmiValues.offset_value = BABY_Z_VAR * 100;
             drawEditSignedFloat2(PREPARE_CASE_ZOFF + MROWS - index_prepare, hmiValues.offset_value, true);
@@ -2879,13 +2891,13 @@ void hmiControl() {
         gotoMainMenu();
         break;
       case CONTROL_CASE_TEMP:
-        checkkey = TemperatureID;
+        checkkey = ID_TemperatureID;
         hmiValues.show_mode = -1;
         select_temp.reset();
         drawTemperatureMenu();
         break;
       case CONTROL_CASE_MOVE:
-        checkkey = Motion;
+        checkkey = ID_Motion;
         select_motion.reset();
         drawMotionMenu();
         break;
@@ -2904,12 +2916,12 @@ void hmiControl() {
           break;
       #endif
       case CONTROL_CASE_ADVSET:
-        checkkey = AdvSet;
+        checkkey = ID_AdvSet;
         select_advset.reset();
         drawAdvancedSettingsMenu();
         break;
       case CONTROL_CASE_INFO:
-        checkkey = Info;
+        checkkey = ID_Info;
         drawInfoMenu();
         break;
       default: break;
@@ -2937,11 +2949,11 @@ void hmiAxisMove() {
     if (hmiFlag.cold_flag) {
       if (encoder_diffState == ENCODER_DIFF_ENTER) {
         hmiFlag.cold_flag = false;
-        hmiValues.Move_E_scaled = current_position.e * MINUNITMULT;
+        hmiValues.moveScaled.e = current_position.e * MINUNITMULT;
         drawMoveMenu();
-        drawEditFloat3(1, hmiValues.Move_X_scaled);
-        drawEditFloat3(2, hmiValues.Move_Y_scaled);
-        drawEditFloat3(3, hmiValues.Move_Z_scaled);
+        TERN_(HAS_X_AXIS, drawEditFloat3(1, hmiValues.moveScaled.x));
+        TERN_(HAS_Y_AXIS, drawEditFloat3(2, hmiValues.moveScaled.y));
+        TERN_(HAS_Z_AXIS, drawEditFloat3(3, hmiValues.moveScaled.z));
         drawEditSignedFloat3(4, 0);
         dwinUpdateLCD();
       }
@@ -2959,45 +2971,52 @@ void hmiAxisMove() {
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_axis.now) {
       case CASE_BACK:
-        checkkey = Prepare;
+        checkkey = ID_Prepare;
         select_prepare.set(1);
         index_prepare = MROWS;
         drawPrepareMenu();
         break;
-      case 1: // X axis move
-        checkkey = Move_X;
-        hmiValues.Move_X_scaled = current_position.x * MINUNITMULT;
-        drawEditFloat3(1, hmiValues.Move_X_scaled, true);
-        encoderRate.enabled = true;
-        break;
-      case 2: // Y axis move
-        checkkey = Move_Y;
-        hmiValues.Move_Y_scaled = current_position.y * MINUNITMULT;
-        drawEditFloat3(2, hmiValues.Move_Y_scaled, true);
-        encoderRate.enabled = true;
-        break;
-      case 3: // Z axis move
-        checkkey = Move_Z;
-        hmiValues.Move_Z_scaled = current_position.z * MINUNITMULT;
-        drawEditFloat3(3, hmiValues.Move_Z_scaled, true);
-        encoderRate.enabled = true;
-        break;
-        #if HAS_HOTEND
-          case 4: // Extruder
-            #if ENABLED(PREVENT_COLD_EXTRUSION)
-              if (thermalManager.tooColdToExtrude(0)) {
-                hmiFlag.cold_flag = true;
-                popupWindowETempTooLow();
-                dwinUpdateLCD();
-                return;
-              }
-            #endif
-            checkkey = Extruder;
-            hmiValues.Move_E_scaled = current_position.e * MINUNITMULT;
-            drawEditSignedFloat3(4, hmiValues.Move_E_scaled, true);
-            encoderRate.enabled = true;
-            break;
-        #endif
+
+      #if HAS_X_AXIS
+        case 1: // X axis move
+          checkkey = ID_MoveX;
+          hmiValues.moveScaled.x = current_position.x * MINUNITMULT;
+          drawEditFloat3(1, hmiValues.moveScaled.x, true);
+          encoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_Y_AXIS
+        case 2: // Y axis move
+          checkkey = ID_MoveY;
+          hmiValues.moveScaled.y = current_position.y * MINUNITMULT;
+          drawEditFloat3(2, hmiValues.moveScaled.y, true);
+          encoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_Z_AXIS
+        case 3: // Z axis move
+          checkkey = ID_MoveZ;
+          hmiValues.moveScaled.z = current_position.z * MINUNITMULT;
+          drawEditFloat3(3, hmiValues.moveScaled.z, true);
+          encoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_HOTEND
+        case 4: // Extruder
+          #if ENABLED(PREVENT_COLD_EXTRUSION)
+            if (thermalManager.tooColdToExtrude(0)) {
+              hmiFlag.cold_flag = true;
+              popupWindowETempTooLow();
+              dwinUpdateLCD();
+              return;
+            }
+          #endif
+          checkkey = ID_Extruder;
+          hmiValues.moveScaled.e = current_position.e * MINUNITMULT;
+          drawEditSignedFloat3(4, hmiValues.moveScaled.e, true);
+          encoderRate.enabled = true;
+          break;
+      #endif
     }
   }
   dwinUpdateLCD();
@@ -3018,39 +3037,39 @@ void hmiTemperature() {
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_temp.now) {
       case CASE_BACK:
-        checkkey = Control;
+        checkkey = ID_Control;
         select_control.set(1);
         index_control = MROWS;
         drawControlMenu();
         break;
       #if HAS_HOTEND
         case TEMP_CASE_TEMP:
-          checkkey = ETemp;
-          hmiValues.E_Temp = thermalManager.degTargetHotend(0);
-          drawEditInteger3(1, hmiValues.E_Temp, true);
+          checkkey = ID_ETemp;
+          hmiValues.tempE = thermalManager.degTargetHotend(0);
+          drawEditInteger3(1, hmiValues.tempE, true);
           encoderRate.enabled = true;
           break;
       #endif
       #if HAS_HEATED_BED
         case TEMP_CASE_BED:
-          checkkey = BedTemp;
-          hmiValues.Bed_Temp = thermalManager.degTargetBed();
-          drawEditInteger3(2, hmiValues.Bed_Temp, true);
+          checkkey = ID_BedTemp;
+          hmiValues.tempBed = thermalManager.degTargetBed();
+          drawEditInteger3(2, hmiValues.tempBed, true);
           encoderRate.enabled = true;
           break;
       #endif
       #if HAS_FAN
         case TEMP_CASE_FAN:
-          checkkey = FanSpeed;
-          hmiValues.Fan_speed = thermalManager.fan_speed[0];
-          drawEditInteger3(3, hmiValues.Fan_speed, true);
+          checkkey = ID_FanSpeed;
+          hmiValues.fanSpeed = thermalManager.fan_speed[0];
+          drawEditInteger3(3, hmiValues.fanSpeed, true);
           encoderRate.enabled = true;
           break;
       #endif
 
       #if HAS_PREHEAT
         case TEMP_CASE_PLA: {
-          checkkey = PLAPreheat;
+          checkkey = ID_PLAPreheat;
           select_PLA.reset();
           hmiValues.show_mode = -2;
 
@@ -3129,7 +3148,7 @@ void hmiTemperature() {
 
       #if PREHEAT_COUNT > 1
         case TEMP_CASE_ABS: { // ABS preheat setting
-          checkkey = ABSPreheat;
+          checkkey = ID_ABSPreheat;
           select_ABS.reset();
           hmiValues.show_mode = -3;
 
@@ -3448,30 +3467,30 @@ void hmiMotion() {
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_motion.now) {
       case CASE_BACK:
-        checkkey = Control;
+        checkkey = ID_Control;
         select_control.set(CONTROL_CASE_MOVE);
         index_control = MROWS;
         drawControlMenu();
         break;
       case MOTION_CASE_RATE:
-        checkkey = MaxSpeed;
+        checkkey = ID_MaxSpeed;
         select_speed.reset();
         drawMaxSpeedMenu();
         break;
       case MOTION_CASE_ACCEL:
-        checkkey = MaxAcceleration;
+        checkkey = ID_MaxAcceleration;
         select_acc.reset();
         drawMaxAccelMenu();
         break;
       #if HAS_CLASSIC_JERK
         case MOTION_CASE_JERK:
-          checkkey = MaxJerk;
+          checkkey = ID_MaxJerk;
           select_jerk.reset();
           drawMaxJerkMenu();
          break;
       #endif
       case MOTION_CASE_STEPS:
-        checkkey = Step;
+        checkkey = ID_Step;
         select_step.reset();
         drawStepsMenu();
         break;
@@ -3523,7 +3542,7 @@ void hmiAdvSet() {
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_advset.now) {
       case CASE_BACK:
-        checkkey = Control;
+        checkkey = ID_Control;
         select_control.set(CONTROL_CASE_ADVSET);
         index_control = CONTROL_CASE_ADVSET;
         drawControlMenu();
@@ -3531,21 +3550,21 @@ void hmiAdvSet() {
 
       #if HAS_HOME_OFFSET
         case ADVSET_CASE_HOMEOFF:
-          checkkey = HomeOff;
+          checkkey = ID_HomeOff;
           select_item.reset();
-          hmiValues.Home_OffX_scaled = home_offset.x * 10;
-          hmiValues.Home_OffY_scaled = home_offset.y * 10;
-          hmiValues.Home_OffZ_scaled = home_offset.z * 10;
+          hmiValues.homeOffsScaled.x = home_offset.x * 10;
+          hmiValues.homeOffsScaled.y = home_offset.y * 10;
+          hmiValues.homeOffsScaled.z = home_offset.z * 10;
           drawHomeOffMenu();
           break;
       #endif
 
       #if HAS_ONESTEP_LEVELING
         case ADVSET_CASE_PROBEOFF:
-          checkkey = ProbeOff;
+          checkkey = ID_ProbeOff;
           select_item.reset();
-          hmiValues.Probe_OffX_scaled = probe.offset.x * 10;
-          hmiValues.Probe_OffY_scaled = probe.offset.y * 10;
+          hmiValues.probeOffsScaled.x = probe.offset.x * 10;
+          hmiValues.probeOffsScaled.y = probe.offset.y * 10;
           drawProbeOffMenu();
           break;
       #endif
@@ -3591,23 +3610,23 @@ void hmiAdvSet() {
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       switch (select_item.now) {
         case CASE_BACK:
-          checkkey = AdvSet;
+          checkkey = ID_AdvSet;
           select_advset.set(ADVSET_CASE_HOMEOFF);
           drawAdvancedSettingsMenu();
           break;
         case 1: // Home Offset X
-          checkkey = HomeOffX;
-          drawEditSignedFloat3(1, hmiValues.Home_OffX_scaled, true);
+          checkkey = ID_HomeOffX;
+          drawEditSignedFloat3(1, hmiValues.homeOffsScaled.x, true);
           encoderRate.enabled = true;
           break;
         case 2: // Home Offset Y
-          checkkey = HomeOffY;
-          drawEditSignedFloat3(2, hmiValues.Home_OffY_scaled, true);
+          checkkey = ID_HomeOffY;
+          drawEditSignedFloat3(2, hmiValues.homeOffsScaled.y, true);
           encoderRate.enabled = true;
           break;
         case 3: // Home Offset Z
-          checkkey = HomeOffZ;
-          drawEditSignedFloat3(3, hmiValues.Home_OffZ_scaled, true);
+          checkkey = ID_HomeOffZ;
+          drawEditSignedFloat3(3, hmiValues.homeOffsScaled.z, true);
           encoderRate.enabled = true;
           break;
         default: break;
@@ -3621,7 +3640,7 @@ void hmiAdvSet() {
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     if (applyEncoder(encoder_diffState, posScaled)) {
-      checkkey = HomeOff;
+      checkkey = ID_HomeOff;
       encoderRate.enabled = false;
       set_home_offset(axis, posScaled / 10);
       drawEditSignedFloat3(select_item.now, posScaled);
@@ -3631,9 +3650,9 @@ void hmiAdvSet() {
     drawEditSignedFloat3(select_item.now, posScaled, true);
   }
 
-  void hmiHomeOffX() { hmiHomeOffN(X_AXIS, hmiValues.Home_OffX_scaled, -500, 500); }
-  void hmiHomeOffY() { hmiHomeOffN(Y_AXIS, hmiValues.Home_OffY_scaled, -500, 500); }
-  void hmiHomeOffZ() { hmiHomeOffN(Z_AXIS, hmiValues.Home_OffZ_scaled,  -20,  20); }
+  void hmiHomeOffX() { hmiHomeOffN(X_AXIS, hmiValues.homeOffsScaled.x, -500, 500); }
+  void hmiHomeOffY() { hmiHomeOffN(Y_AXIS, hmiValues.homeOffsScaled.y, -500, 500); }
+  void hmiHomeOffZ() { hmiHomeOffN(Z_AXIS, hmiValues.homeOffsScaled.z,  -20,  20); }
 
 #endif // HAS_HOME_OFFSET
 
@@ -3654,18 +3673,18 @@ void hmiAdvSet() {
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       switch (select_item.now) {
         case CASE_BACK:
-          checkkey = AdvSet;
+          checkkey = ID_AdvSet;
           select_advset.set(ADVSET_CASE_PROBEOFF);
           drawAdvancedSettingsMenu();
           break;
         case 1: // Probe Offset X
-          checkkey = ProbeOffX;
-          drawEditSignedFloat3(1, hmiValues.Probe_OffX_scaled, true);
+          checkkey = ID_ProbeOffX;
+          drawEditSignedFloat3(1, hmiValues.probeOffsScaled.x, true);
           encoderRate.enabled = true;
           break;
         case 2: // Probe Offset Y
-          checkkey = ProbeOffY;
-          drawEditSignedFloat3(2, hmiValues.Probe_OffY_scaled, true);
+          checkkey = ID_ProbeOffY;
+          drawEditSignedFloat3(2, hmiValues.probeOffsScaled.y, true);
           encoderRate.enabled = true;
           break;
       }
@@ -3678,7 +3697,7 @@ void hmiAdvSet() {
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     if (applyEncoder(encoder_diffState, posScaled)) {
-      checkkey = ProbeOff;
+      checkkey = ID_ProbeOff;
       encoderRate.enabled = false;
       offset_ref = posScaled / 10;
       drawEditSignedFloat3(select_item.now, posScaled);
@@ -3688,8 +3707,8 @@ void hmiAdvSet() {
     drawEditSignedFloat3(select_item.now, posScaled, true);
   }
 
-  void hmiProbeOffX() { hmiProbeOffN(hmiValues.Probe_OffX_scaled, probe.offset.x); }
-  void hmiProbeOffY() { hmiProbeOffN(hmiValues.Probe_OffY_scaled, probe.offset.y); }
+  void hmiProbeOffX() { hmiProbeOffN(hmiValues.probeOffsScaled.x, probe.offset.x); }
+  void hmiProbeOffY() { hmiProbeOffN(hmiValues.probeOffsScaled.y, probe.offset.y); }
 
 #endif // HAS_ONESTEP_LEVELING
 
@@ -3699,7 +3718,7 @@ void hmiInfo() {
   if (encoder_diffState == ENCODER_DIFF_NO) return;
   if (encoder_diffState == ENCODER_DIFF_ENTER) {
     #if HAS_ONESTEP_LEVELING
-      checkkey = Control;
+      checkkey = ID_Control;
       select_control.set(CONTROL_CASE_INFO);
       drawControlMenu();
     #else
@@ -3745,39 +3764,39 @@ void hmiTune() {
       }
       break;
       case TUNE_CASE_SPEED: // Print speed
-        checkkey = PrintSpeed;
-        hmiValues.print_speed = feedrate_percentage;
-        drawEditInteger3(TUNE_CASE_SPEED + MROWS - index_tune, hmiValues.print_speed, true);
+        checkkey = ID_PrintSpeed;
+        hmiValues.printSpeed = feedrate_percentage;
+        drawEditInteger3(TUNE_CASE_SPEED + MROWS - index_tune, hmiValues.printSpeed, true);
         encoderRate.enabled = true;
         break;
       #if HAS_HOTEND
         case TUNE_CASE_TEMP: // Nozzle temp
-          checkkey = ETemp;
-          hmiValues.E_Temp = thermalManager.degTargetHotend(0);
-          drawEditInteger3(TUNE_CASE_TEMP + MROWS - index_tune, hmiValues.E_Temp, true);
+          checkkey = ID_ETemp;
+          hmiValues.tempE = thermalManager.degTargetHotend(0);
+          drawEditInteger3(TUNE_CASE_TEMP + MROWS - index_tune, hmiValues.tempE, true);
           encoderRate.enabled = true;
           break;
       #endif
       #if HAS_HEATED_BED
         case TUNE_CASE_BED: // Bed temp
-          checkkey = BedTemp;
-          hmiValues.Bed_Temp = thermalManager.degTargetBed();
-          drawEditInteger3(TUNE_CASE_BED + MROWS - index_tune, hmiValues.Bed_Temp, true);
+          checkkey = ID_BedTemp;
+          hmiValues.tempBed = thermalManager.degTargetBed();
+          drawEditInteger3(TUNE_CASE_BED + MROWS - index_tune, hmiValues.tempBed, true);
           encoderRate.enabled = true;
           break;
       #endif
       #if HAS_FAN
         case TUNE_CASE_FAN: // Fan speed
-          checkkey = FanSpeed;
-          hmiValues.Fan_speed = thermalManager.fan_speed[0];
-          drawEditInteger3(TUNE_CASE_FAN + MROWS - index_tune, hmiValues.Fan_speed, true);
+          checkkey = ID_FanSpeed;
+          hmiValues.fanSpeed = thermalManager.fan_speed[0];
+          drawEditInteger3(TUNE_CASE_FAN + MROWS - index_tune, hmiValues.fanSpeed, true);
           encoderRate.enabled = true;
           break;
       #endif
       #if HAS_ZOFFSET_ITEM
         case TUNE_CASE_ZOFF: // Z-offset
           #if ANY(HAS_BED_PROBE, BABYSTEPPING)
-            checkkey = Homeoffset;
+            checkkey = ID_HomeOffset;
             hmiValues.offset_value = BABY_Z_VAR * 100;
             drawEditSignedFloat2(TUNE_CASE_ZOFF + MROWS - index_tune, hmiValues.offset_value, true);
             encoderRate.enabled = true;
@@ -3811,31 +3830,31 @@ void hmiTune() {
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       switch (select_PLA.now) {
         case CASE_BACK:
-          checkkey = TemperatureID;
+          checkkey = ID_TemperatureID;
           select_temp.now = TEMP_CASE_PLA;
           hmiValues.show_mode = -1;
           drawTemperatureMenu();
           break;
         #if HAS_HOTEND
           case PREHEAT_CASE_TEMP:
-            checkkey = ETemp;
-            hmiValues.E_Temp = ui.material_preset[0].hotend_temp;
+            checkkey = ID_ETemp;
+            hmiValues.tempE = ui.material_preset[0].hotend_temp;
             drawEditInteger3(PREHEAT_CASE_TEMP, ui.material_preset[0].hotend_temp, true);
             encoderRate.enabled = true;
             break;
         #endif
         #if HAS_HEATED_BED
           case PREHEAT_CASE_BED:
-            checkkey = BedTemp;
-            hmiValues.Bed_Temp = ui.material_preset[0].bed_temp;
+            checkkey = ID_BedTemp;
+            hmiValues.tempBed = ui.material_preset[0].bed_temp;
             drawEditInteger3(PREHEAT_CASE_BED, ui.material_preset[0].bed_temp, true);
             encoderRate.enabled = true;
             break;
         #endif
         #if HAS_FAN
           case PREHEAT_CASE_FAN:
-            checkkey = FanSpeed;
-            hmiValues.Fan_speed = ui.material_preset[0].fan_speed;
+            checkkey = ID_FanSpeed;
+            hmiValues.fanSpeed = ui.material_preset[0].fan_speed;
             drawEditInteger3(PREHEAT_CASE_FAN, ui.material_preset[0].fan_speed, true);
             encoderRate.enabled = true;
             break;
@@ -3868,31 +3887,31 @@ void hmiTune() {
       else if (encoder_diffState == ENCODER_DIFF_ENTER) {
         switch (select_ABS.now) {
           case CASE_BACK:
-            checkkey = TemperatureID;
+            checkkey = ID_TemperatureID;
             select_temp.now = TEMP_CASE_ABS;
             hmiValues.show_mode = -1;
             drawTemperatureMenu();
             break;
           #if HAS_HOTEND
             case PREHEAT_CASE_TEMP:
-              checkkey = ETemp;
-              hmiValues.E_Temp = ui.material_preset[1].hotend_temp;
+              checkkey = ID_ETemp;
+              hmiValues.tempE = ui.material_preset[1].hotend_temp;
               drawEditInteger3(PREHEAT_CASE_TEMP, ui.material_preset[1].hotend_temp, true);
               encoderRate.enabled = true;
               break;
           #endif
           #if HAS_HEATED_BED
             case PREHEAT_CASE_BED:
-              checkkey = BedTemp;
-              hmiValues.Bed_Temp = ui.material_preset[1].bed_temp;
+              checkkey = ID_BedTemp;
+              hmiValues.tempBed = ui.material_preset[1].bed_temp;
               drawEditInteger3(PREHEAT_CASE_BED, ui.material_preset[1].bed_temp, true);
               encoderRate.enabled = true;
               break;
           #endif
           #if HAS_FAN
             case PREHEAT_CASE_FAN:
-              checkkey = FanSpeed;
-              hmiValues.Fan_speed = ui.material_preset[1].fan_speed;
+              checkkey = ID_FanSpeed;
+              hmiValues.fanSpeed = ui.material_preset[1].fan_speed;
               drawEditInteger3(PREHEAT_CASE_FAN, ui.material_preset[1].fan_speed, true);
               encoderRate.enabled = true;
               break;
@@ -3926,14 +3945,14 @@ void hmiMaxSpeed() {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (WITHIN(select_speed.now, 1, 4)) {
-      checkkey = MaxSpeed_value;
+      checkkey = ID_MaxSpeedValue;
       hmiFlag.feedspeed_axis = AxisEnum(select_speed.now - 1);
-      hmiValues.Max_Feedspeed = planner.settings.max_feedrate_mm_s[hmiFlag.feedspeed_axis];
-      drawEditInteger4(select_speed.now, hmiValues.Max_Feedspeed, true);
+      hmiValues.maxFeedSpeed = planner.settings.max_feedrate_mm_s[hmiFlag.feedspeed_axis];
+      drawEditInteger4(select_speed.now, hmiValues.maxFeedSpeed, true);
       encoderRate.enabled = true;
     }
     else { // Back
-      checkkey = Motion;
+      checkkey = ID_Motion;
       select_motion.now = MOTION_CASE_RATE;
       drawMotionMenu();
     }
@@ -3955,14 +3974,14 @@ void hmiMaxAcceleration() {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (WITHIN(select_acc.now, 1, 4)) {
-      checkkey = MaxAcceleration_value;
+      checkkey = ID_MaxAccelerationValue;
       hmiFlag.acc_axis = AxisEnum(select_acc.now - 1);
-      hmiValues.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[hmiFlag.acc_axis];
-      drawEditInteger4(select_acc.now, hmiValues.Max_Acceleration, true);
+      hmiValues.maxAcceleration = planner.settings.max_acceleration_mm_per_s2[hmiFlag.acc_axis];
+      drawEditInteger4(select_acc.now, hmiValues.maxAcceleration, true);
       encoderRate.enabled = true;
     }
     else { // Back
-      checkkey = Motion;
+      checkkey = ID_Motion;
       select_motion.now = MOTION_CASE_ACCEL;
       drawMotionMenu();
     }
@@ -3985,14 +4004,14 @@ void hmiMaxAcceleration() {
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       if (WITHIN(select_jerk.now, 1, 4)) {
-        checkkey = MaxJerk_value;
+        checkkey = ID_MaxJerkValue;
         hmiFlag.jerk_axis = AxisEnum(select_jerk.now - 1);
-        hmiValues.Max_Jerk_scaled = planner.max_jerk[hmiFlag.jerk_axis] * MINUNITMULT;
-        drawEditFloat3(select_jerk.now, hmiValues.Max_Jerk_scaled, true);
+        hmiValues.maxJerkScaled = planner.max_jerk[hmiFlag.jerk_axis] * MINUNITMULT;
+        drawEditFloat3(select_jerk.now, hmiValues.maxJerkScaled, true);
         encoderRate.enabled = true;
       }
       else { // Back
-        checkkey = Motion;
+        checkkey = ID_Motion;
         select_motion.now = MOTION_CASE_JERK;
         drawMotionMenu();
       }
@@ -4015,14 +4034,14 @@ void hmiStep() {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (WITHIN(select_step.now, 1, 4)) {
-      checkkey = Step_value;
+      checkkey = ID_StepValue;
       hmiFlag.step_axis = AxisEnum(select_step.now - 1);
-      hmiValues.Max_Step_scaled = planner.settings.axis_steps_per_mm[hmiFlag.step_axis] * MINUNITMULT;
-      drawEditFloat3(select_step.now, hmiValues.Max_Step_scaled, true);
+      hmiValues.maxStepScaled = planner.settings.axis_steps_per_mm[hmiFlag.step_axis] * MINUNITMULT;
+      drawEditFloat3(select_step.now, hmiValues.maxStepScaled, true);
       encoderRate.enabled = true;
     }
     else { // Back
-      checkkey = Motion;
+      checkkey = ID_Motion;
       select_motion.now = MOTION_CASE_STEPS;
       drawMotionMenu();
     }
@@ -4035,7 +4054,7 @@ void hmiInit() {
 
   for (uint16_t t = 0; t <= 100; t += 2) {
     dwinIconShow(ICON, ICON_Bar, 15, 260);
-    dwinDrawRectangle(1, Color_Bg_Black, 15 + t * 242 / 100, 260, 257, 280);
+    dwinDrawRectangle(1, COLOR_BG_BLACK, 15 + t * 242 / 100, 260, 257, 280);
     dwinUpdateLCD();
     delay(20);
   }
@@ -4062,13 +4081,13 @@ void eachMomentUpdate() {
   const millis_t ms = millis();
   if (ELAPSED(ms, next_var_update_ms)) {
     next_var_update_ms = ms + DWIN_VAR_UPDATE_INTERVAL;
-    update_variable();
+    updateVariable();
   }
 
   if (PENDING(ms, next_rts_update_ms)) return;
   next_rts_update_ms = ms + DWIN_SCROLL_UPDATE_INTERVAL;
 
-  if (checkkey == PrintProcess) {
+  if (checkkey == ID_PrintProcess) {
     // if print done
     if (hmiFlag.print_finish && !hmiFlag.done_confirm_flag) {
       hmiFlag.print_finish = false;
@@ -4083,7 +4102,7 @@ void eachMomentUpdate() {
       drawPrintProgressBar();
 
       // show print done confirm
-      dwinDrawRectangle(1, Color_Bg_Black, 0, 250, DWIN_WIDTH - 1, STATUS_Y);
+      dwinDrawRectangle(1, COLOR_BG_BLACK, 0, 250, DWIN_WIDTH - 1, STATUS_Y);
       dwinIconShow(ICON, hmiIsChinese() ? ICON_Confirm_C : ICON_Confirm_E, 86, 283);
     }
     else if (hmiFlag.pause_flag != printingIsPaused()) {
@@ -4104,7 +4123,7 @@ void eachMomentUpdate() {
     queue.inject(F("G1 F1200 X0 Y0"));
   }
 
-  if (card.isPrinting() && checkkey == PrintProcess) { // Print process
+  if (card.isPrinting() && checkkey == ID_PrintProcess) { // Print process
     const uint8_t card_pct = card.percentDone();
     static uint8_t last_cardpercentValue = 101;
     if (last_cardpercentValue != card_pct) { // print percent
@@ -4135,7 +4154,7 @@ void eachMomentUpdate() {
   }
   else if (dwin_abort_flag && !hmiFlag.home_flag) { // Print Stop
     dwin_abort_flag = false;
-    hmiValues.print_speed = feedrate_percentage = 100;
+    hmiValues.printSpeed = feedrate_percentage = 100;
     dwin_zoffset = BABY_Z_VAR;
     select_page.set(0);
     gotoMainMenu();
@@ -4146,10 +4165,10 @@ void eachMomentUpdate() {
 
       auto update_selection = [&](const bool sel) {
         hmiFlag.select_flag = sel;
-        const uint16_t c1 = sel ? Color_Bg_Window : Select_Color;
+        const uint16_t c1 = sel ? COLOR_BG_WINDOW : COLOR_SELECT;
         dwinDrawRectangle(0, c1, 25, 306, 126, 345);
         dwinDrawRectangle(0, c1, 24, 305, 127, 346);
-        const uint16_t c2 = sel ? Select_Color : Color_Bg_Window;
+        const uint16_t c2 = sel ? COLOR_SELECT : COLOR_BG_WINDOW;
         dwinDrawRectangle(0, c2, 145, 306, 246, 345);
         dwinDrawRectangle(0, c2, 144, 305, 247, 346);
       };
@@ -4159,7 +4178,7 @@ void eachMomentUpdate() {
 
       char * const name = card.longest_filename();
       const int8_t npos = _MAX(0U, DWIN_WIDTH - strlen(name) * (MENU_CHR_W)) / 2;
-      dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, npos, 252, name);
+      dwinDrawString(true, font8x16, COLOR_POPUP_TEXT, COLOR_BG_WINDOW, npos, 252, name);
       dwinUpdateLCD();
 
       bool recovery_flag = true;
@@ -4193,65 +4212,65 @@ void eachMomentUpdate() {
 
 void dwinHandleScreen() {
   switch (checkkey) {
-    case MainMenu:        hmiMainMenu(); break;
-    case SelectFile:      hmiSelectFile(); break;
-    case Prepare:         hmiPrepare(); break;
-    case Control:         hmiControl(); break;
-    case Leveling:        break;
-    case PrintProcess:    hmiPrinting(); break;
-    case Print_window:    hmiPauseOrStop(); break;
-    case AxisMove:        hmiAxisMove(); break;
-    case TemperatureID:   hmiTemperature(); break;
-    case Motion:          hmiMotion(); break;
-    case AdvSet:          hmiAdvSet(); break;
+    case ID_MainMenu:       hmiMainMenu(); break;
+    case ID_SelectFile:     hmiSelectFile(); break;
+    case ID_Prepare:        hmiPrepare(); break;
+    case ID_Control:        hmiControl(); break;
+    case ID_Leveling:       break;
+    case ID_PrintProcess:   hmiPrinting(); break;
+    case ID_PrintWindow:    hmiPauseOrStop(); break;
+    case ID_AxisMove:       hmiAxisMove(); break;
+    case ID_TemperatureID:  hmiTemperature(); break;
+    case ID_Motion:         hmiMotion(); break;
+    case ID_AdvSet:         hmiAdvSet(); break;
     #if HAS_HOME_OFFSET
-      case HomeOff:       hmiHomeOff(); break;
-      case HomeOffX:      hmiHomeOffX(); break;
-      case HomeOffY:      hmiHomeOffY(); break;
-      case HomeOffZ:      hmiHomeOffZ(); break;
+      case ID_HomeOff:      hmiHomeOff(); break;
+      case ID_HomeOffX:     hmiHomeOffX(); break;
+      case ID_HomeOffY:     hmiHomeOffY(); break;
+      case ID_HomeOffZ:     hmiHomeOffZ(); break;
     #endif
     #if HAS_ONESTEP_LEVELING
-      case ProbeOff:      hmiProbeOff(); break;
-      case ProbeOffX:     hmiProbeOffX(); break;
-      case ProbeOffY:     hmiProbeOffY(); break;
+      case ID_ProbeOff:     hmiProbeOff(); break;
+      case ID_ProbeOffX:    hmiProbeOffX(); break;
+      case ID_ProbeOffY:    hmiProbeOffY(); break;
     #endif
-    case Info:            hmiInfo(); break;
-    case Tune:            hmiTune(); break;
+    case ID_Info:           hmiInfo(); break;
+    case ID_Tune:           hmiTune(); break;
     #if HAS_PREHEAT
-      case PLAPreheat:    hmiPLAPreheatSetting(); break;
+      case ID_PLAPreheat:   hmiPLAPreheatSetting(); break;
       #if PREHEAT_COUNT > 1
-        case ABSPreheat:  hmiABSPreheatSetting(); break;
+        case ID_ABSPreheat: hmiABSPreheatSetting(); break;
       #endif
     #endif
-    case MaxSpeed:        hmiMaxSpeed(); break;
-    case MaxAcceleration: hmiMaxAcceleration(); break;
+    case ID_MaxSpeed:       hmiMaxSpeed(); break;
+    case ID_MaxAcceleration: hmiMaxAcceleration(); break;
     #if HAS_CLASSIC_JERK
-      case MaxJerk:       hmiMaxJerk(); break;
+      case ID_MaxJerk:      hmiMaxJerk(); break;
     #endif
-    case Step:            hmiStep(); break;
-    case Move_X:          hmiMoveX(); break;
-    case Move_Y:          hmiMoveY(); break;
-    case Move_Z:          hmiMoveZ(); break;
+    case ID_Step:           hmiStep(); break;
+    case ID_MoveX:          hmiMoveX(); break;
+    case ID_MoveY:          hmiMoveY(); break;
+    case ID_MoveZ:          hmiMoveZ(); break;
     #if HAS_HOTEND
-      case Extruder:      hmiMoveE(); break;
-      case ETemp:         hmiETemp(); break;
+      case ID_Extruder:     hmiMoveE(); break;
+      case ID_ETemp:        hmiETemp(); break;
     #endif
     #if ANY(HAS_BED_PROBE, BABYSTEPPING)
-      case Homeoffset:    hmiZoffset(); break;
+      case ID_HomeOffset:   hmiZoffset(); break;
     #endif
     #if HAS_HEATED_BED
-      case BedTemp:       hmiBedTemp(); break;
+      case ID_BedTemp:      hmiBedTemp(); break;
     #endif
     #if HAS_PREHEAT && HAS_FAN
-      case FanSpeed:      hmiFanSpeed(); break;
+      case ID_FanSpeed:     hmiFanSpeed(); break;
     #endif
-    case PrintSpeed:      hmiPrintSpeed(); break;
-    case MaxSpeed_value:  hmiMaxFeedspeedXYZE(); break;
-    case MaxAcceleration_value: hmiMaxAccelerationXYZE(); break;
+    case ID_PrintSpeed:     hmiPrintSpeed(); break;
+    case ID_MaxSpeedValue:  hmiMaxFeedspeedXYZE(); break;
+    case ID_MaxAccelerationValue: hmiMaxAccelerationXYZE(); break;
     #if HAS_CLASSIC_JERK
-      case MaxJerk_value: hmiMaxJerkXYZE(); break;
+      case ID_MaxJerkValue: hmiMaxJerkXYZE(); break;
     #endif
-    case Step_value:      hmiStepXYZE(); break;
+    case ID_StepValue:      hmiStepXYZE(); break;
     default: break;
   }
 }
@@ -4259,27 +4278,27 @@ void dwinHandleScreen() {
 void dwinHomingDone() {
   hmiFlag.home_flag = false;
   dwin_zoffset = TERN0(HAS_BED_PROBE, probe.offset.z);
-  if (checkkey == Last_Prepare) {
-    checkkey = Prepare;
+  if (checkkey == ID_LastPrepare) {
+    checkkey = ID_Prepare;
     select_prepare.now = PREPARE_CASE_HOME;
     index_prepare = MROWS;
     drawPrepareMenu();
   }
-  else if (checkkey == Back_Main) {
-    hmiValues.print_speed = feedrate_percentage = 100;
+  else if (checkkey == ID_BackMain) {
+    hmiValues.printSpeed = feedrate_percentage = 100;
     planner.finish_and_disable();
     gotoMainMenu();
   }
 }
 
 void dwinLevelingDone() {
-  if (checkkey == Leveling) gotoMainMenu();
+  if (checkkey == ID_Leveling) gotoMainMenu();
 }
 
 void dwinStatusChanged(const char * const cstr/*=nullptr*/) {
-  dwinDrawRectangle(1, Color_Bg_Blue, 0, STATUS_Y, DWIN_WIDTH, STATUS_Y + 24);
+  dwinDrawRectangle(1, COLOR_BG_BLUE, 0, STATUS_Y, DWIN_WIDTH, STATUS_Y + 24);
   const int8_t x = _MAX(0U, DWIN_WIDTH - strlen(cstr) * MENU_CHR_W) / 2;
-  dwinDrawString(false, font8x16, Color_White, Color_Bg_Blue, x, STATUS_Y + 3, cstr);
+  dwinDrawString(false, font8x16, COLOR_WHITE, COLOR_BG_BLUE, x, STATUS_Y + 3, cstr);
   dwinUpdateLCD();
 }
 

commit 574dd34c49fde76e1e736b8a7e1ea579d724ff22
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jun 27 13:19:36 2023 -0500

    ‚ôªÔ∏è String helper class (#24390)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 303807aa21..7a28f1b77e 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1215,7 +1215,7 @@ void drawPrintProgressBar() {
 
 void drawPrintProgressElapsed() {
   constexpr uint16_t x = 45, y = 192;
-  duration_t elapsed = print_job_timer.duration(); // print timer
+  duration_t elapsed = print_job_timer.duration(); // Print timer
   dwinDrawIntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x, y, elapsed.value / 3600);
   dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, x + 8 * 2, y, F(":"));
   dwinDrawIntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x + 8 * 3, y, (elapsed.value % 3600) / 60);
@@ -4104,7 +4104,7 @@ void eachMomentUpdate() {
     queue.inject(F("G1 F1200 X0 Y0"));
   }
 
-  if (card.isPrinting() && checkkey == PrintProcess) { // print process
+  if (card.isPrinting() && checkkey == PrintProcess) { // Print process
     const uint8_t card_pct = card.percentDone();
     static uint8_t last_cardpercentValue = 101;
     if (last_cardpercentValue != card_pct) { // print percent
@@ -4115,7 +4115,7 @@ void eachMomentUpdate() {
       }
     }
 
-    duration_t elapsed = print_job_timer.duration(); // print timer
+    duration_t elapsed = print_job_timer.duration(); // Print timer
 
     // Print time so far
     static uint16_t last_Printtime = 0;

commit c3694f1c038fa20ad749118b0a1c7aa88e3dd5f2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jun 14 17:24:50 2023 -0500

    üé® Lowercase methods, functions, data members (#25939)
    
    For: TFT, DGUS, MarlinUI, Anycubic, JyersUI, CrealityUI

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index af3d1eaeb8..303807aa21 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -128,8 +128,8 @@ constexpr uint16_t MROWS = TROWS - 1,   // Last Row Index
 #define DWIN_RIGHT (DWIN_WIDTH-1)
 
 // Value Init
-HMI_value_t HMI_ValueStruct;
-HMI_flag_t HMI_flag{0};
+hmi_value_t hmiValues;
+hmi_flag_t hmiFlag{0};
 
 millis_t dwin_heat_time = 0;
 
@@ -194,206 +194,206 @@ static uint16_t _remain_time = 0;
 #define DWIN_LANGUAGE_EEPROM_ADDRESS 0x01   // Between 0x01 and 0x63 (EEPROM_OFFSET-1)
                                             // BL24CXX::check() uses 0x00
 
-inline bool HMI_IsChinese() { return HMI_flag.language == DWIN_CHINESE; }
+inline bool hmiIsChinese() { return hmiFlag.language == DWIN_CHINESE; }
 
-void HMI_SetLanguageCache() {
-  DWIN_JPG_CacheTo1(HMI_IsChinese() ? Language_Chinese : Language_English);
+void hmiSetLanguageCache() {
+  dwinJPGCacheTo1(hmiIsChinese() ? Language_Chinese : Language_English);
 }
 
-void HMI_SetLanguage() {
+void hmiSetLanguage() {
   #if ALL(EEPROM_SETTINGS, IIC_BL24CXX_EEPROM)
-    BL24CXX::read(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language, sizeof(HMI_flag.language));
+    BL24CXX::read(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&hmiFlag.language, sizeof(hmiFlag.language));
   #endif
-  HMI_SetLanguageCache();
+  hmiSetLanguageCache();
 }
 
-void HMI_ToggleLanguage() {
-  HMI_flag.language = HMI_IsChinese() ? DWIN_ENGLISH : DWIN_CHINESE;
-  HMI_SetLanguageCache();
+void hmiToggleLanguage() {
+  hmiFlag.language = hmiIsChinese() ? DWIN_ENGLISH : DWIN_CHINESE;
+  hmiSetLanguageCache();
   #if ALL(EEPROM_SETTINGS, IIC_BL24CXX_EEPROM)
-    BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language, sizeof(HMI_flag.language));
+    BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&hmiFlag.language, sizeof(hmiFlag.language));
   #endif
 }
 
 typedef struct { uint16_t x, y, w, h; } icon_info_t;
 typedef struct { uint16_t x, y[2], w, h; } text_info_t;
 
-void ICON_Button(const bool here, const int iconid, const icon_info_t &ico, const text_info_t (&txt)[2]) {
-  const bool cn = HMI_IsChinese();
-  DWIN_ICON_Show(ICON, iconid + here, ico.x, ico.y);
-  if (here) DWIN_Draw_Rectangle(0, Color_White, ico.x, ico.y, ico.x + ico.w - 1, ico.y + ico.h - 1);
-  DWIN_Frame_AreaCopy(1, txt[cn].x, txt[cn].y[here], txt[cn].x + txt[cn].w - 1, txt[cn].y[here] + txt[cn].h - 1, ico.x + (ico.w - txt[cn].w) / 2, (ico.y + ico.h - 28) - txt[cn].h/2);
+void iconButton(const bool here, const int iconid, const icon_info_t &ico, const text_info_t (&txt)[2]) {
+  const bool cn = hmiIsChinese();
+  dwinIconShow(ICON, iconid + here, ico.x, ico.y);
+  if (here) dwinDrawRectangle(0, Color_White, ico.x, ico.y, ico.x + ico.w - 1, ico.y + ico.h - 1);
+  dwinFrameAreaCopy(1, txt[cn].x, txt[cn].y[here], txt[cn].x + txt[cn].w - 1, txt[cn].y[here] + txt[cn].h - 1, ico.x + (ico.w - txt[cn].w) / 2, (ico.y + ico.h - 28) - txt[cn].h/2);
 }
 
 //
 // Main Menu: "Print"
 //
-void ICON_Print() {
+void iconPrint() {
   constexpr icon_info_t ico = { 17, 110, 110, 100 };
   constexpr text_info_t txt[2] = {
     { 1, { 417, 449 }, 30, 14 },
     { 1, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_page.now == PAGE_PRINT, ICON_Print_0, ico, txt);
+  iconButton(select_page.now == PAGE_PRINT, ICON_Print_0, ico, txt);
 }
 
 //
 // Main Menu: "Prepare"
 //
-void ICON_Prepare() {
+void iconPrepare() {
   constexpr icon_info_t ico = { 145, 110, 110, 100 };
   constexpr text_info_t txt[2] = {
     { 33, { 417, 449 }, 51, 14 },
     { 31, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_page.now == PAGE_PREPARE, ICON_Prepare_0, ico, txt);
+  iconButton(select_page.now == PAGE_PREPARE, ICON_Prepare_0, ico, txt);
 }
 
 //
 // Main Menu: "Control"
 //
-void ICON_Control() {
+void iconControl() {
   constexpr icon_info_t ico = { 17, 226, 110, 100 };
   constexpr text_info_t txt[2] = {
     { 85, { 417, 449 }, 46, 14 },
     { 61, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_page.now == PAGE_CONTROL, ICON_Control_0, ico, txt);
+  iconButton(select_page.now == PAGE_CONTROL, ICON_Control_0, ico, txt);
 }
 
 //
 // Main Menu: "Info"
 //
-void ICON_StartInfo() {
+void iconStartInfo() {
   constexpr icon_info_t ico = { 145, 226, 110, 100 };
   constexpr text_info_t txt[2] = {
     { 133, { 417, 449 }, 23, 14 },
     {  91, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_page.now == PAGE_INFO_LEVELING, ICON_Info_0, ico, txt);
+  iconButton(select_page.now == PAGE_INFO_LEVELING, ICON_Info_0, ico, txt);
 }
 
 //
 // Main Menu: "Level"
 //
-void ICON_Leveling() {
+void iconLeveling() {
   constexpr icon_info_t ico = { 145, 226, 110, 100 };
   constexpr text_info_t txt[2] = {
     {  88, { 433, 464 }, 36, 14 },
     { 211, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_page.now == PAGE_INFO_LEVELING, ICON_Leveling_0, ico, txt);
+  iconButton(select_page.now == PAGE_INFO_LEVELING, ICON_Leveling_0, ico, txt);
 }
 
 //
 // Printing: "Tune"
 //
-void ICON_Tune() {
+void iconTune() {
   constexpr icon_info_t ico = { 8, 232, 80, 100 };
   constexpr text_info_t txt[2] = {
     {   0, { 433, 464 }, 32, 14 },
     { 121, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_print.now == PRINT_SETUP, ICON_Setup_0, ico, txt);
+  iconButton(select_print.now == PRINT_SETUP, ICON_Setup_0, ico, txt);
 }
 
 //
 // Printing: "Pause"
 //
-void ICON_Pause() {
+void iconPause() {
   constexpr icon_info_t ico = { 96, 232, 80, 100 };
   constexpr text_info_t txt[2] = {
     { 157, { 417, 449 }, 39, 14 },
     { 181, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_print.now == PRINT_PAUSE_RESUME, ICON_Pause_0, ico, txt);
+  iconButton(select_print.now == PRINT_PAUSE_RESUME, ICON_Pause_0, ico, txt);
 }
 
 //
 // Printing: "Resume"
 //
-void ICON_Resume() {
+void iconResume() {
   constexpr icon_info_t ico = { 96, 232, 80, 100 };
   constexpr text_info_t txt[2] = {
     { 33, { 433, 464 }, 53, 14 },
     {  1, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_print.now == PRINT_PAUSE_RESUME, ICON_Continue_0, ico, txt);
+  iconButton(select_print.now == PRINT_PAUSE_RESUME, ICON_Continue_0, ico, txt);
 }
 
-void ICON_ResumeOrPause() {
-  if (printingIsPaused() || HMI_flag.pause_flag || HMI_flag.pause_action)
-    ICON_Resume();
+void iconResumeOrPause() {
+  if (printingIsPaused() || hmiFlag.pause_flag || hmiFlag.pause_action)
+    iconResume();
   else
-    ICON_Pause();
+    iconPause();
 }
 
 //
 // Printing: "Stop"
 //
-void ICON_Stop() {
+void iconStop() {
   constexpr icon_info_t ico = { 184, 232, 80, 100 };
   constexpr text_info_t txt[2] = {
     { 196, { 417, 449 }, 29, 14 },
     { 151, { 405, 447 }, 27, 12 }
   };
-  ICON_Button(select_print.now == PRINT_STOP, ICON_Stop_0, ico, txt);
+  iconButton(select_print.now == PRINT_STOP, ICON_Stop_0, ico, txt);
 }
 
-inline void Clear_Title_Bar() {
-  DWIN_Draw_Box(1, Color_Bg_Blue, 0, 0, DWIN_WIDTH, TITLE_HEIGHT);
+inline void clearTitleBar() {
+  dwinDrawBox(1, Color_Bg_Blue, 0, 0, DWIN_WIDTH, TITLE_HEIGHT);
 }
 
-void Draw_Title(FSTR_P ftitle) {
-  DWIN_Draw_String(false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, ftitle);
+void drawTitle(FSTR_P ftitle) {
+  dwinDrawString(false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, ftitle);
 }
 
-inline void Clear_Menu_Area() {
-  DWIN_Draw_Box(1, Color_Bg_Black, 0, TITLE_HEIGHT, DWIN_WIDTH, STATUS_Y - TITLE_HEIGHT);
+inline void clearMenuArea() {
+  dwinDrawBox(1, Color_Bg_Black, 0, TITLE_HEIGHT, DWIN_WIDTH, STATUS_Y - TITLE_HEIGHT);
 }
 
-void Clear_Main_Window() {
-  Clear_Title_Bar();
-  Clear_Menu_Area();
+void clearMainWindow() {
+  clearTitleBar();
+  clearMenuArea();
 }
 
-void Clear_Popup_Area() {
-  Clear_Title_Bar();
-  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 31, DWIN_WIDTH, DWIN_HEIGHT);
+void clearPopupArea() {
+  clearTitleBar();
+  dwinDrawRectangle(1, Color_Bg_Black, 0, 31, DWIN_WIDTH, DWIN_HEIGHT);
 }
 
-void Draw_Popup_Bkgd_105() {
-  DWIN_Draw_Rectangle(1, Color_Bg_Window, 14, 105, 258, 374);
+void drawPopupBkgd105() {
+  dwinDrawRectangle(1, Color_Bg_Window, 14, 105, 258, 374);
 }
 
-void Draw_More_Icon(const uint8_t line) {
-  DWIN_ICON_Show(ICON, ICON_More, 226, MBASE(line) - 3);
+void drawMoreIcon(const uint8_t line) {
+  dwinIconShow(ICON, ICON_More, 226, MBASE(line) - 3);
 }
 
-void Draw_Menu_Cursor(const uint8_t line) {
-  //DWIN_ICON_Show(ICON, ICON_Rectangle, 0, MBASE(line) - 18);
-  DWIN_Draw_Rectangle(1, Rectangle_Color, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
+void drawMenuCursor(const uint8_t line) {
+  //dwinIconShow(ICON, ICON_Rectangle, 0, MBASE(line) - 18);
+  dwinDrawRectangle(1, Rectangle_Color, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
 }
 
-void Erase_Menu_Cursor(const uint8_t line) {
-  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
+void eraseMenuCursor(const uint8_t line) {
+  dwinDrawRectangle(1, Color_Bg_Black, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
 }
 
-void Move_Highlight(const int16_t from, const uint16_t newline) {
-  Erase_Menu_Cursor(newline - from);
-  Draw_Menu_Cursor(newline);
+void moveHighlight(const int16_t from, const uint16_t newline) {
+  eraseMenuCursor(newline - from);
+  drawMenuCursor(newline);
 }
 
-void Add_Menu_Line() {
-  Move_Highlight(1, MROWS);
-  DWIN_Draw_Line(Line_Color, 16, MBASE(MROWS + 1) - 20, 256, MBASE(MROWS + 1) - 19);
+void addMenuLine() {
+  moveHighlight(1, MROWS);
+  dwinDrawLine(Line_Color, 16, MBASE(MROWS + 1) - 20, 256, MBASE(MROWS + 1) - 19);
 }
 
-void Scroll_Menu(const uint8_t dir) {
-  DWIN_Frame_AreaMove(1, dir, MLINE, Color_Bg_Black, 0, 31, DWIN_WIDTH, 349);
+void scrollMenu(const uint8_t dir) {
+  dwinFrameAreaMove(1, dir, MLINE, Color_Bg_Black, 0, 31, DWIN_WIDTH, 349);
   switch (dir) {
-    case DWIN_SCROLL_DOWN: Move_Highlight(-1, 0); break;
-    case DWIN_SCROLL_UP:   Add_Menu_Line(); break;
+    case DWIN_SCROLL_DOWN: moveHighlight(-1, 0); break;
+    case DWIN_SCROLL_UP:   addMenuLine(); break;
   }
 }
 
@@ -401,61 +401,61 @@ inline uint16_t nr_sd_menu_items() {
   return card.get_num_items() + !card.flag.workDirIsRoot;
 }
 
-void Erase_Menu_Text(const uint8_t line) {
-  DWIN_Draw_Rectangle(1, Color_Bg_Black, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
+void eraseMenuText(const uint8_t line) {
+  dwinDrawRectangle(1, Color_Bg_Black, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
 }
 
-void Draw_Menu_Icon(const uint8_t line, const uint8_t icon) {
-  DWIN_ICON_Show(ICON, icon, 26, MBASE(line) - 3);
+void drawMenuIcon(const uint8_t line, const uint8_t icon) {
+  dwinIconShow(ICON, icon, 26, MBASE(line) - 3);
 }
 
-void _Decorate_Menu_Item(const uint8_t line, const uint8_t icon, bool more) {
-  if (icon) Draw_Menu_Icon(line, icon);
-  if (more) Draw_More_Icon(line);
+void _decorateMenuItem(const uint8_t line, const uint8_t icon, bool more) {
+  if (icon) drawMenuIcon(line, icon);
+  if (more) drawMoreIcon(line);
 }
-void Draw_Menu_Item(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
-  if (label) DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, (char*)label);
-  _Decorate_Menu_Item(line, icon, more);
+void drawMenuItem(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
+  if (label) dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, (char*)label);
+  _decorateMenuItem(line, icon, more);
 }
-void Draw_Menu_Item(const uint8_t line, const uint8_t icon=0, FSTR_P const flabel=nullptr, bool more=false) {
-  if (flabel) DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, flabel);
-  _Decorate_Menu_Item(line, icon, more);
+void drawMenuItem(const uint8_t line, const uint8_t icon=0, FSTR_P const flabel=nullptr, bool more=false) {
+  if (flabel) dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, flabel);
+  _decorateMenuItem(line, icon, more);
 }
 
-void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
-  Draw_Menu_Item(line, icon, label, more);
-  DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
+void drawMenuLine(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
+  drawMenuItem(line, icon, label, more);
+  dwinDrawLine(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
 
-void Draw_Menu_Line(const uint8_t line, const uint8_t icon, FSTR_P const flabel, bool more=false) {
-  Draw_Menu_Item(line, icon, flabel, more);
-  DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
+void drawMenuLine(const uint8_t line, const uint8_t icon, FSTR_P const flabel, bool more=false) {
+  drawMenuItem(line, icon, flabel, more);
+  dwinDrawLine(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
 
-void Draw_Checkbox_Line(const uint8_t line, const bool ison) {
+void drawCheckboxLine(const uint8_t line, const bool ison) {
   const uint16_t x = 225, y = EBASE(line) - 2;
-  DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, x + 5, y, ison ? F("X") : F(" "));
-  DWIN_Draw_Rectangle(0, Color_White, x + 2, y + 2, x + 16, y + 16);
+  dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, x + 5, y, ison ? F("X") : F(" "));
+  dwinDrawRectangle(0, Color_White, x + 2, y + 2, x + 16, y + 16);
 }
 
 // AreaCopy for a Menu Item
-void Item_AreaCopy(const uint16_t x1, const uint16_t y1, const uint16_t x2, const uint16_t y2, const uint8_t row=0, const uint16_t inset=0, const uint16_t yadd=0) {
-  DWIN_Frame_AreaCopy(1, x1, y1, x2, y2, LBLX + inset, MBASE(row) + yadd);
+void itemAreaCopy(const uint16_t x1, const uint16_t y1, const uint16_t x2, const uint16_t y2, const uint8_t row=0, const uint16_t inset=0, const uint16_t yadd=0) {
+  dwinFrameAreaCopy(1, x1, y1, x2, y2, LBLX + inset, MBASE(row) + yadd);
 }
 
 // AreaCopy for a Screen Title
-void DWIN_Frame_TitleCopy(const uint16_t x1, const uint16_t y1, const uint16_t w, const uint16_t h) {
-  DWIN_Frame_AreaCopy(1, x1, y1, x1 + w - 1, y1 + h - 1, (DWIN_WIDTH - w) / 2, (TITLE_HEIGHT - h) / 2);
+void dwinFrameTitleCopy(const uint16_t x1, const uint16_t y1, const uint16_t w, const uint16_t h) {
+  dwinFrameAreaCopy(1, x1, y1, x1 + w - 1, y1 + h - 1, (DWIN_WIDTH - w) / 2, (TITLE_HEIGHT - h) / 2);
 }
 
 // Draw "Back" line at the top
-void Draw_Back_First(const bool is_sel=true) {
-  Draw_Menu_Line(0, ICON_Back);
-  if (HMI_IsChinese())
-    Item_AreaCopy(129,  72, 156,  84);
+void drawBackFirst(const bool is_sel=true) {
+  drawMenuLine(0, ICON_Back);
+  if (hmiIsChinese())
+    itemAreaCopy(129,  72, 156,  84);
   else
-    Item_AreaCopy(223, 179, 254, 189);
-  if (is_sel) Draw_Menu_Cursor(0);
+    itemAreaCopy(223, 179, 254, 189);
+  if (is_sel) drawMenuCursor(0);
 }
 
 //
@@ -520,323 +520,323 @@ void Draw_Back_First(const bool is_sel=true) {
 //
 
 void say_move_en(const uint8_t row) {
-  Item_AreaCopy( 69,  61, 102,  71, row);         // "Move"
+  itemAreaCopy( 69,  61, 102,  71, row);         // "Move"
 }
 void say_max_en(const uint8_t row) {
-  Item_AreaCopy( 75, 119, 100, 129, row);         // "Max"
+  itemAreaCopy( 75, 119, 100, 129, row);         // "Max"
 }
 void say_jerk_en(const uint8_t row) {
-  Item_AreaCopy(104, 119, 128, 129, row, 30);     // "Jerk"
+  itemAreaCopy(104, 119, 128, 129, row, 30);     // "Jerk"
 }
 void say_speed_en(const uint16_t inset, const uint8_t row) {
-  Item_AreaCopy(133, 119, 172, 132, row, inset);  // "Speed"
+  itemAreaCopy(133, 119, 172, 132, row, inset);  // "Speed"
 }
 void say_max_accel_en(const uint8_t row) {
    say_max_en(row);                               // "Max"
-   Item_AreaCopy(  0, 135,  79, 145, row, 30);    // "Acceleration"
+   itemAreaCopy(  0, 135,  79, 145, row, 30);    // "Acceleration"
 }
 void say_max_jerk_speed_en(const uint8_t row) {
-  Item_AreaCopy( 75, 119, 172, 132, row);         // "Max Jerk Speed"
+  itemAreaCopy( 75, 119, 172, 132, row);         // "Max Jerk Speed"
 }
 void say_x_en(const uint16_t inset, const uint8_t row) {
-  Item_AreaCopy(175, 119, 184, 129, row, inset);  // "X"
+  itemAreaCopy(175, 119, 184, 129, row, inset);  // "X"
 }
 void say_y_en(const uint16_t inset, const uint8_t row) {
-  Item_AreaCopy(184, 119, 192, 129, row, inset);  // "Y"
+  itemAreaCopy(184, 119, 192, 129, row, inset);  // "Y"
 }
 void say_z_en(const uint16_t inset, const uint8_t row) {
-  Item_AreaCopy(193, 119, 201, 129, row, inset);  // "Z"
+  itemAreaCopy(193, 119, 201, 129, row, inset);  // "Z"
 }
 void say_e_en(const uint16_t inset, const uint8_t row) {
-  Item_AreaCopy(201, 119, 209, 129, row, inset);  // "E"
+  itemAreaCopy(201, 119, 209, 129, row, inset);  // "E"
 }
 void say_pla_en(const uint16_t inset, const uint8_t row) {
-  Item_AreaCopy(131, 164, 153, 174, row, inset);  // "PLA"
+  itemAreaCopy(131, 164, 153, 174, row, inset);  // "PLA"
 }
 void say_abs_en(const uint16_t inset, const uint8_t row) {
-  Item_AreaCopy(157,  76, 181,  86, row, inset);  // "ABS"
+  itemAreaCopy(157,  76, 181,  86, row, inset);  // "ABS"
 }
 void say_home_offs_en(const uint8_t row) {
-  Item_AreaCopy(153, 193, 225, 203, row);         // "Home Offset"
+  itemAreaCopy(153, 193, 225, 203, row);         // "Home Offset"
 }
 void say_probe_offs_en(const uint8_t row) {
-  Item_AreaCopy(153, 205, 225, 215, row);         // "Probe Offset"
+  itemAreaCopy(153, 205, 225, 215, row);         // "Probe Offset"
 }
 void say_steps_per_mm_en(const uint8_t row) {
-  Item_AreaCopy(  1, 151,  91, 161, row);         // "Steps-per-mm"
+  itemAreaCopy(  1, 151,  91, 161, row);         // "Steps-per-mm"
 }
 
-void DWIN_Draw_Label(const uint8_t row, char *string) {
-  DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(row), string);
+void dwinDrawLabel(const uint8_t row, char *string) {
+  dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(row), string);
 }
-void DWIN_Draw_Label(const uint8_t row, FSTR_P title) {
-  DWIN_Draw_Label(row, (char*)title);
+void dwinDrawLabel(const uint8_t row, FSTR_P title) {
+  dwinDrawLabel(row, (char*)title);
 }
 
-void DWIN_Draw_Signed_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, int32_t value) {
-  DWIN_Draw_String(true, size, Color_White, bColor, x - 8, y, value < 0 ? F("-") : F(" "));
-  DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, value < 0 ? -value : value);
+void dwinDrawSigned_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, int32_t value) {
+  dwinDrawString(true, size, Color_White, bColor, x - 8, y, value < 0 ? F("-") : F(" "));
+  dwinDrawFloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, value < 0 ? -value : value);
 }
 
-void Draw_Edit_Integer3(const uint8_t row, const uint16_t value, const bool active=false) {
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 3, 220, EBASE(row), value);
+void drawEditInteger3(const uint8_t row, const uint16_t value, const bool active=false) {
+  dwinDrawIntValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 3, 220, EBASE(row), value);
 }
 
-void Draw_Edit_Integer4(const uint8_t row, const uint16_t value, const bool active=false) {
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 4, 220 - 1 * 8, EBASE(row), value);
+void drawEditInteger4(const uint8_t row, const uint16_t value, const bool active=false) {
+  dwinDrawIntValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 4, 220 - 1 * 8, EBASE(row), value);
 }
 
-void Draw_Edit_Float3(const uint8_t row, const uint16_t value, const bool active=false) {
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 3, UNITFDIGITS, 220 - UNITFDIGITS * 8, EBASE(row), (int32_t)value);
+void drawEditFloat3(const uint8_t row, const uint16_t value, const bool active=false) {
+  dwinDrawFloatValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 3, UNITFDIGITS, 220 - UNITFDIGITS * 8, EBASE(row), (int32_t)value);
 }
 
-void Draw_Edit_Signed_Float2(const uint8_t row, const float value, const bool active=false) {
-  DWIN_Draw_Signed_Float(font8x16, active ? Select_Color : Color_Bg_Black, 2, UNITFDIGITS + 1, 220 + 8 - UNITFDIGITS * 8, EBASE(row), value);
+void drawEditSignedFloat2(const uint8_t row, const float value, const bool active=false) {
+  dwinDrawSigned_Float(font8x16, active ? Select_Color : Color_Bg_Black, 2, UNITFDIGITS + 1, 220 + 8 - UNITFDIGITS * 8, EBASE(row), value);
 }
 
-void Draw_Edit_Signed_Float3(const uint8_t row, const float value, const bool active=false) {
-  DWIN_Draw_Signed_Float(font8x16, active ? Select_Color : Color_Bg_Black, 3, UNITFDIGITS, 220 - UNITFDIGITS * 8, EBASE(row), value);
+void drawEditSignedFloat3(const uint8_t row, const float value, const bool active=false) {
+  dwinDrawSigned_Float(font8x16, active ? Select_Color : Color_Bg_Black, 3, UNITFDIGITS, 220 - UNITFDIGITS * 8, EBASE(row), value);
 }
 
-void Draw_Stat_Int(const uint16_t xpos, const uint16_t ypos, const uint16_t value) {
-  DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, xpos, ypos, value);
+void drawStatInt(const uint16_t xpos, const uint16_t ypos, const uint16_t value) {
+  dwinDrawIntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, xpos, ypos, value);
 }
 
-void Draw_Stat_Float(const uint16_t xpos, const uint16_t ypos, const float value) {
-  DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, xpos, ypos, value);
+void drawStatFloat(const uint16_t xpos, const uint16_t ypos, const float value) {
+  dwinDrawFloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, xpos, ypos, value);
 }
 
 //
 // Prepare Menu
 //
 
-void Item_Prepare_Move(const uint8_t row) {
-  if (HMI_IsChinese())
-    Item_AreaCopy(159, 70, 200, 84, row);
+void itemPrepareMove(const uint8_t row) {
+  if (hmiIsChinese())
+    itemAreaCopy(159, 70, 200, 84, row);
   else
     say_move_en(row);             // "Move"
-  Draw_Menu_Line(row, ICON_Axis);
-  Draw_More_Icon(row);
+  drawMenuLine(row, ICON_Axis);
+  drawMoreIcon(row);
 }
 
-void Item_Prepare_Disable(const uint8_t row) {
-  if (HMI_IsChinese())
-    Item_AreaCopy(204, 70, 259, 82, row);
+void itemPrepareDisable(const uint8_t row) {
+  if (hmiIsChinese())
+    itemAreaCopy(204, 70, 259, 82, row);
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(row, GET_TEXT_F(MSG_DISABLE_STEPPERS));
+      dwinDrawLabel(row, GET_TEXT_F(MSG_DISABLE_STEPPERS));
     #else
-      Item_AreaCopy(104, 61, 191, 74, row); // "Disable Stepper"
+      itemAreaCopy(104, 61, 191, 74, row); // "Disable Stepper"
     #endif
   }
-  Draw_Menu_Line(row, ICON_CloseMotor);
+  drawMenuLine(row, ICON_CloseMotor);
 }
 
-void Item_Prepare_Home(const uint8_t row) {
-  if (HMI_IsChinese())
-    Item_AreaCopy(0, 89, 41, 101, row);
+void itemPrepareHome(const uint8_t row) {
+  if (hmiIsChinese())
+    itemAreaCopy(0, 89, 41, 101, row);
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(row, GET_TEXT_F(MSG_AUTO_HOME));
+      dwinDrawLabel(row, GET_TEXT_F(MSG_AUTO_HOME));
     #else
-      Item_AreaCopy(202, 61, 271, 71, row); // "Auto Home"
+      itemAreaCopy(202, 61, 271, 71, row); // "Auto Home"
     #endif
   }
-  Draw_Menu_Line(row, ICON_Homing);
+  drawMenuLine(row, ICON_Homing);
 }
 
 #if HAS_ZOFFSET_ITEM
 
-  void Item_Prepare_Offset(const uint8_t row) {
-    if (HMI_IsChinese()) {
+  void itemPrepareOffset(const uint8_t row) {
+    if (hmiIsChinese()) {
       #if HAS_BED_PROBE
-        Item_AreaCopy(174, 164, 223, 177, row);
+        itemAreaCopy(174, 164, 223, 177, row);
       #else
-        Item_AreaCopy(43, 89, 98, 101, row);
+        itemAreaCopy(43, 89, 98, 101, row);
       #endif
     }
     else {
       #if HAS_BED_PROBE
         #ifdef USE_STRING_TITLES
-          DWIN_Draw_Label(row, GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+          dwinDrawLabel(row, GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
         #else
-          Item_AreaCopy( 94, 179, 143, 190, row); // "Z-Offset"
+          itemAreaCopy( 94, 179, 143, 190, row); // "Z-Offset"
         #endif
       #else
         #ifdef USE_STRING_TITLES
-          DWIN_Draw_Label(row, GET_TEXT_F(MSG_SET_HOME_OFFSETS));
+          dwinDrawLabel(row, GET_TEXT_F(MSG_SET_HOME_OFFSETS));
         #else
-          Item_AreaCopy(  1,  76, 103,  87, row); // "Set home offsets"
+          itemAreaCopy(  1,  76, 103,  87, row); // "Set home offsets"
         #endif
       #endif
     }
-    Draw_Edit_Signed_Float2(row, BABY_Z_VAR * 100);
-    Draw_Menu_Line(row, ICON_SetHome);
+    drawEditSignedFloat2(row, BABY_Z_VAR * 100);
+    drawMenuLine(row, ICON_SetHome);
   }
 
 #endif
 
 #if HAS_PREHEAT
-  void Item_Prepare_PLA(const uint8_t row) {
-    if (HMI_IsChinese())
-      Item_AreaCopy(100, 89, 151, 101, row);
+  void itemPrepare_PLA(const uint8_t row) {
+    if (hmiIsChinese())
+      itemAreaCopy(100, 89, 151, 101, row);
     else {
       #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(row, GET_TEXT_F(MSG_PREHEAT_1));
+        dwinDrawLabel(row, GET_TEXT_F(MSG_PREHEAT_1));
       #else
-        Item_AreaCopy(108,  76, 155,  87, row); // "Preheat"
+        itemAreaCopy(108,  76, 155,  87, row); // "Preheat"
         say_pla_en(52, row);                    // "PLA"
       #endif
     }
-    Draw_Menu_Line(row, ICON_PLAPreheat);
+    drawMenuLine(row, ICON_PLAPreheat);
   }
 
   #if PREHEAT_COUNT > 1
-    void Item_Prepare_ABS(const uint8_t row) {
-      if (HMI_IsChinese())
-        Item_AreaCopy(180,  89, 233, 100, row);
+    void itemPrepare_ABS(const uint8_t row) {
+      if (hmiIsChinese())
+        itemAreaCopy(180,  89, 233, 100, row);
       else {
         #ifdef USE_STRING_TITLES
-          DWIN_Draw_Label(row, F("Preheat " PREHEAT_2_LABEL));
+          dwinDrawLabel(row, F("Preheat " PREHEAT_2_LABEL));
         #else
-          Item_AreaCopy(108,  76, 155,  87, row); // "Preheat"
+          itemAreaCopy(108,  76, 155,  87, row); // "Preheat"
           say_abs_en(52, row);                    // "ABS"
         #endif
       }
-      Draw_Menu_Line(row, ICON_ABSPreheat);
+      drawMenuLine(row, ICON_ABSPreheat);
     }
   #endif
 
-  void Item_Prepare_Cool(const uint8_t row) {
-    if (HMI_IsChinese())
-      Item_AreaCopy(1, 104,  56, 117, row);
+  void itemPrepareCool(const uint8_t row) {
+    if (hmiIsChinese())
+      itemAreaCopy(1, 104,  56, 117, row);
     else {
       #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(row, GET_TEXT_F(MSG_COOLDOWN));
+        dwinDrawLabel(row, GET_TEXT_F(MSG_COOLDOWN));
       #else
-        Item_AreaCopy(200, 76, 264, 86, row); // "Cooldown"
+        itemAreaCopy(200, 76, 264, 86, row); // "Cooldown"
       #endif
     }
-    Draw_Menu_Line(row, ICON_Cool);
+    drawMenuLine(row, ICON_Cool);
   }
 #endif
 
-void Item_Prepare_Lang(const uint8_t row) {
-  if (HMI_IsChinese())
-    Item_AreaCopy(239, 134, 266, 146, row);
+void itemPrepareLang(const uint8_t row) {
+  if (hmiIsChinese())
+    itemAreaCopy(239, 134, 266, 146, row);
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(row, F("UI Language"));
+      dwinDrawLabel(row, F("UI Language"));
     #else
-      Item_AreaCopy(1, 194, 96, 206, row);    // "LCD Language"
+      itemAreaCopy(1, 194, 96, 206, row);    // "LCD Language"
     #endif
   }
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, 226, EBASE(row), HMI_IsChinese() ? F("CN") : F("EN"));
-  Draw_Menu_Icon(row, ICON_Language);
+  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, 226, EBASE(row), hmiIsChinese() ? F("CN") : F("EN"));
+  drawMenuIcon(row, ICON_Language);
 }
 
 #define VISI(T,L,S) (WITHIN(L, T - MROWS, MROWS) || WITHIN(S, 0, MROWS))
 
-void Draw_Prepare_Menu() {
-  Clear_Main_Window();
+void drawPrepareMenu() {
+  clearMainWindow();
 
   const int16_t scroll = MROWS - index_prepare; // Scrolled-up lines
   #define PSCROL(L) (scroll + (L))
   #define PVISI(L) VISI(PREPARE_CASE_TOTAL, L, PSCROL(L))
 
-  if (HMI_IsChinese())
-    DWIN_Frame_TitleCopy(133, 1, 28, 13);   // "Prepare"
+  if (hmiIsChinese())
+    dwinFrameTitleCopy(133, 1, 28, 13);   // "Prepare"
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_PREPARE));
+      drawTitle(GET_TEXT_F(MSG_PREPARE));
     #else
-      DWIN_Frame_TitleCopy(179, 0, 48, 14); // "Prepare"
+      dwinFrameTitleCopy(179, 0, 48, 14); // "Prepare"
     #endif
   }
 
-  if (PVISI(0)) Draw_Back_First(select_prepare.now == CASE_BACK);                 // < Back
-  if (PVISI(PREPARE_CASE_MOVE)) Item_Prepare_Move(PSCROL(PREPARE_CASE_MOVE));     // Move >
-  if (PVISI(PREPARE_CASE_DISA)) Item_Prepare_Disable(PSCROL(PREPARE_CASE_DISA));  // Disable Stepper
-  if (PVISI(PREPARE_CASE_HOME)) Item_Prepare_Home(PSCROL(PREPARE_CASE_HOME));     // Auto Home
+  if (PVISI(0)) drawBackFirst(select_prepare.now == CASE_BACK);                 // < Back
+  if (PVISI(PREPARE_CASE_MOVE)) itemPrepareMove(PSCROL(PREPARE_CASE_MOVE));     // Move >
+  if (PVISI(PREPARE_CASE_DISA)) itemPrepareDisable(PSCROL(PREPARE_CASE_DISA));  // Disable Stepper
+  if (PVISI(PREPARE_CASE_HOME)) itemPrepareHome(PSCROL(PREPARE_CASE_HOME));     // Auto Home
   #if HAS_ZOFFSET_ITEM
-    if (PVISI(PREPARE_CASE_ZOFF)) Item_Prepare_Offset(PSCROL(PREPARE_CASE_ZOFF)); // Edit Z-Offset / Babystep / Set Home Offset
+    if (PVISI(PREPARE_CASE_ZOFF)) itemPrepareOffset(PSCROL(PREPARE_CASE_ZOFF)); // Edit Z-Offset / Babystep / Set Home Offset
   #endif
   #if HAS_PREHEAT
-    if (PVISI(PREPARE_CASE_PLA)) Item_Prepare_PLA(PSCROL(PREPARE_CASE_PLA));      // Preheat PLA
+    if (PVISI(PREPARE_CASE_PLA)) itemPrepare_PLA(PSCROL(PREPARE_CASE_PLA));      // Preheat PLA
     #if PREHEAT_COUNT > 1
-      if (PVISI(PREPARE_CASE_ABS)) Item_Prepare_ABS(PSCROL(PREPARE_CASE_ABS));    // Preheat ABS
+      if (PVISI(PREPARE_CASE_ABS)) itemPrepare_ABS(PSCROL(PREPARE_CASE_ABS));    // Preheat ABS
     #endif
   #endif
   #if HAS_HOTEND || HAS_HEATED_BED
-    if (PVISI(PREPARE_CASE_COOL)) Item_Prepare_Cool(PSCROL(PREPARE_CASE_COOL));   // Cooldown
+    if (PVISI(PREPARE_CASE_COOL)) itemPrepareCool(PSCROL(PREPARE_CASE_COOL));   // Cooldown
   #endif
-  if (PVISI(PREPARE_CASE_LANG)) Item_Prepare_Lang(PSCROL(PREPARE_CASE_LANG));     // Language CN/EN
+  if (PVISI(PREPARE_CASE_LANG)) itemPrepareLang(PSCROL(PREPARE_CASE_LANG));     // Language CN/EN
 
-  if (select_prepare.now != CASE_BACK) Draw_Menu_Cursor(PSCROL(select_prepare.now));
+  if (select_prepare.now != CASE_BACK) drawMenuCursor(PSCROL(select_prepare.now));
 }
 
 //
 // Control Menu
 //
 
-void Item_Control_Temp(const uint16_t row) {
-  if (HMI_IsChinese())
-    Item_AreaCopy(57, 104,  84, 116, row);
+void itemControlTemp(const uint16_t row) {
+  if (hmiIsChinese())
+    itemAreaCopy(57, 104,  84, 116, row);
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(row, GET_TEXT_F(MSG_TEMPERATURE));
+      dwinDrawLabel(row, GET_TEXT_F(MSG_TEMPERATURE));
     #else
-      Item_AreaCopy(1, 89,  83, 101, row);
+      itemAreaCopy(1, 89,  83, 101, row);
     #endif
   }
-  Draw_Menu_Line(row, ICON_Temperature);
-  Draw_More_Icon(row);
+  drawMenuLine(row, ICON_Temperature);
+  drawMoreIcon(row);
 }
 
-void Item_Control_Motion(const uint16_t row) {
-  if (HMI_IsChinese())
-    Item_AreaCopy(87, 104, 114, 116, row);
+void itemControlMotion(const uint16_t row) {
+  if (hmiIsChinese())
+    itemAreaCopy(87, 104, 114, 116, row);
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(row, GET_TEXT_F(MSG_MOTION));
+      dwinDrawLabel(row, GET_TEXT_F(MSG_MOTION));
     #else
-      Item_AreaCopy(84, 89, 128,  99, row);
+      itemAreaCopy(84, 89, 128,  99, row);
     #endif
   }
-  Draw_Menu_Line(row, ICON_Motion);
-  Draw_More_Icon(row);
+  drawMenuLine(row, ICON_Motion);
+  drawMoreIcon(row);
 }
 
-void Item_Control_Advanced(const uint16_t row) {
-  if (HMI_IsChinese())
-    Item_AreaCopy(62, 180, 120, 192, row);
+void itemControlAdvanced(const uint16_t row) {
+  if (hmiIsChinese())
+    itemAreaCopy(62, 180, 120, 192, row);
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(row, GET_TEXT_F(MSG_ADVANCED_SETTINGS));
+      dwinDrawLabel(row, GET_TEXT_F(MSG_ADVANCED_SETTINGS));
     #else
-      Item_AreaCopy(82, 135, 200, 149, row);
+      itemAreaCopy(82, 135, 200, 149, row);
     #endif
   }
-  Draw_Menu_Line(row, ICON_AdvSet);
-  Draw_More_Icon(row);
+  drawMenuLine(row, ICON_AdvSet);
+  drawMoreIcon(row);
 }
 
-void Item_Control_Info(const uint16_t row) {
-  if (HMI_IsChinese())
-    Item_AreaCopy(231, 104, 258, 116, row);
+void itemControlInfo(const uint16_t row) {
+  if (hmiIsChinese())
+    itemAreaCopy(231, 104, 258, 116, row);
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(row, GET_TEXT_F(MSG_INFO_SCREEN));
+      dwinDrawLabel(row, GET_TEXT_F(MSG_INFO_SCREEN));
     #else
-      Item_AreaCopy(0, 104, 24, 114, row);
+      itemAreaCopy(0, 104, 24, 114, row);
     #endif
   }
-  Draw_Menu_Line(row, ICON_Info);
-  Draw_More_Icon(row);
+  drawMenuLine(row, ICON_Info);
+  drawMoreIcon(row);
 }
 
-void Draw_Control_Menu() {
-  Clear_Main_Window();
+void drawControlMenu() {
+  clearMainWindow();
 
   #if CONTROL_CASE_TOTAL >= TROWS
     const int16_t scroll = MROWS - index_control; // Scrolled-up lines
@@ -847,62 +847,62 @@ void Draw_Control_Menu() {
   #define CLINE(L) MBASE(CSCROL(L))
   #define CVISI(L) VISI(CONTROL_CASE_TOTAL, L, CSCROL(L))
 
-  if (HMI_IsChinese())
-    DWIN_Frame_TitleCopy(103, 1, 28, 14);     // "Control"
+  if (hmiIsChinese())
+    dwinFrameTitleCopy(103, 1, 28, 14);     // "Control"
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_CONTROL));
+      drawTitle(GET_TEXT_F(MSG_CONTROL));
     #else
-      DWIN_Frame_TitleCopy(128, 2, 49, 11);   // "Control"
+      dwinFrameTitleCopy(128, 2, 49, 11);   // "Control"
     #endif
   }
 
-  if (CVISI(0)) Draw_Back_First(select_control.now == CASE_BACK);               // < Back
-  if (CVISI(CONTROL_CASE_TEMP)) Item_Control_Temp(CSCROL(CONTROL_CASE_TEMP));   // Temperature >
-  if (CVISI(CONTROL_CASE_MOVE)) Item_Control_Motion(CSCROL(CONTROL_CASE_MOVE)); // Motion >
+  if (CVISI(0)) drawBackFirst(select_control.now == CASE_BACK);               // < Back
+  if (CVISI(CONTROL_CASE_TEMP)) itemControlTemp(CSCROL(CONTROL_CASE_TEMP));   // Temperature >
+  if (CVISI(CONTROL_CASE_MOVE)) itemControlMotion(CSCROL(CONTROL_CASE_MOVE)); // Motion >
 
-  if (HMI_IsChinese()) {
+  if (hmiIsChinese()) {
     #if ENABLED(EEPROM_SETTINGS)
-      Item_AreaCopy(117, 104, 172, 116, CSCROL(CONTROL_CASE_SAVE));   // "Store Configuration"
-      Item_AreaCopy(174, 103, 229, 116, CSCROL(CONTROL_CASE_LOAD));   // "Read Configuration"
-      Item_AreaCopy(  1, 118,  56, 131, CSCROL(CONTROL_CASE_RESET));  // "Reset Configuration"
+      itemAreaCopy(117, 104, 172, 116, CSCROL(CONTROL_CASE_SAVE));   // "Store Configuration"
+      itemAreaCopy(174, 103, 229, 116, CSCROL(CONTROL_CASE_LOAD));   // "Read Configuration"
+      itemAreaCopy(  1, 118,  56, 131, CSCROL(CONTROL_CASE_RESET));  // "Reset Configuration"
     #endif
   }
   else {
     #ifdef USE_STRING_TITLES
       #if ENABLED(EEPROM_SETTINGS)
-        if (CVISI(CONTROL_CASE_SAVE)) DWIN_Draw_Label(CSCROL(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));        // "Store Configuration"
-        if (CVISI(CONTROL_CASE_LOAD)) DWIN_Draw_Label(CSCROL(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));         // "Read Configuration"
-        if (CVISI(CONTROL_CASE_RESET)) DWIN_Draw_Label(CSCROL(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));  // "Reset Configuration"
+        if (CVISI(CONTROL_CASE_SAVE)) dwinDrawLabel(CSCROL(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));        // "Store Configuration"
+        if (CVISI(CONTROL_CASE_LOAD)) dwinDrawLabel(CSCROL(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));         // "Read Configuration"
+        if (CVISI(CONTROL_CASE_RESET)) dwinDrawLabel(CSCROL(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));  // "Reset Configuration"
       #endif
     #else
       #if ENABLED(EEPROM_SETTINGS)
         if (CVISI(CONTROL_CASE_SAVE))
-          Item_AreaCopy(150,  89, 263, 102, CSCROL(CONTROL_CASE_SAVE));       // "Store Configuration"
+          itemAreaCopy(150,  89, 263, 102, CSCROL(CONTROL_CASE_SAVE));       // "Store Configuration"
         if (CVISI(CONTROL_CASE_LOAD)) {
-          Item_AreaCopy( 26, 104,  57, 114, CSCROL(CONTROL_CASE_LOAD));       // "Read"
-          Item_AreaCopy(182,  89, 263, 102, CSCROL(CONTROL_CASE_LOAD), 34);   // "Configuration"
+          itemAreaCopy( 26, 104,  57, 114, CSCROL(CONTROL_CASE_LOAD));       // "Read"
+          itemAreaCopy(182,  89, 263, 102, CSCROL(CONTROL_CASE_LOAD), 34);   // "Configuration"
         }
         if (CVISI(CONTROL_CASE_RESET)) {
-          Item_AreaCopy( 59, 104,  93, 114, CSCROL(CONTROL_CASE_RESET));      // "Reset"
-          Item_AreaCopy(182,  89, 263, 102, CSCROL(CONTROL_CASE_RESET), 37);  // "Configuration"
+          itemAreaCopy( 59, 104,  93, 114, CSCROL(CONTROL_CASE_RESET));      // "Reset"
+          itemAreaCopy(182,  89, 263, 102, CSCROL(CONTROL_CASE_RESET), 37);  // "Configuration"
         }
       #endif
     #endif
   }
 
-  if (CVISI(CONTROL_CASE_ADVSET)) Item_Control_Advanced(CSCROL(CONTROL_CASE_ADVSET));
-  if (CVISI(CONTROL_CASE_INFO)) Item_Control_Info(CSCROL(CONTROL_CASE_INFO));
+  if (CVISI(CONTROL_CASE_ADVSET)) itemControlAdvanced(CSCROL(CONTROL_CASE_ADVSET));
+  if (CVISI(CONTROL_CASE_INFO)) itemControlInfo(CSCROL(CONTROL_CASE_INFO));
 
   if (select_control.now != CASE_BACK && CVISI(select_control.now))
-    Draw_Menu_Cursor(CSCROL(select_control.now));
+    drawMenuCursor(CSCROL(select_control.now));
 
   // Draw icons and lines
   #define _TEMP_ICON(N, I, M) do { \
     if (CVISI(N)) { \
-      Draw_Menu_Line(CSCROL(N), I); \
+      drawMenuLine(CSCROL(N), I); \
       if (M) { \
-        Draw_More_Icon(CSCROL(N)); \
+        drawMoreIcon(CSCROL(N)); \
       } \
     } \
   } while(0)
@@ -918,117 +918,117 @@ void Draw_Control_Menu() {
 // Tune Menu
 //
 
-void Draw_Tune_Menu() {
-  Clear_Main_Window();
+void drawTuneMenu() {
+  clearMainWindow();
 
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(73, 2, 28, 12);       // "Tune"
-    Item_AreaCopy(116, 164, 171, 176, TUNE_CASE_SPEED);
+  if (hmiIsChinese()) {
+    dwinFrameTitleCopy(73, 2, 28, 12);       // "Tune"
+    itemAreaCopy(116, 164, 171, 176, TUNE_CASE_SPEED);
     #if HAS_HOTEND
-      Item_AreaCopy(1, 134, 56, 146, TUNE_CASE_TEMP);
+      itemAreaCopy(1, 134, 56, 146, TUNE_CASE_TEMP);
     #endif
     #if HAS_HEATED_BED
-      Item_AreaCopy(58, 134, 113, 146, TUNE_CASE_BED);
+      itemAreaCopy(58, 134, 113, 146, TUNE_CASE_BED);
     #endif
     #if HAS_FAN
-      Item_AreaCopy(115, 134, 170, 146, TUNE_CASE_FAN);
+      itemAreaCopy(115, 134, 170, 146, TUNE_CASE_FAN);
     #endif
     #if HAS_ZOFFSET_ITEM
-      Item_AreaCopy(174, 164, 223, 177, TUNE_CASE_ZOFF);
+      itemAreaCopy(174, 164, 223, 177, TUNE_CASE_ZOFF);
     #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_TUNE));
+      drawTitle(GET_TEXT_F(MSG_TUNE));
     #else
-      DWIN_Frame_TitleCopy(94, 2, 33, 11);    // "Tune"
+      dwinFrameTitleCopy(94, 2, 33, 11);    // "Tune"
     #endif
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(TUNE_CASE_SPEED, GET_TEXT_F(MSG_SPEED));
+      dwinDrawLabel(TUNE_CASE_SPEED, GET_TEXT_F(MSG_SPEED));
       #if HAS_HOTEND
-        DWIN_Draw_Label(TUNE_CASE_TEMP, GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+        dwinDrawLabel(TUNE_CASE_TEMP, GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
       #endif
       #if HAS_HEATED_BED
-        DWIN_Draw_Label(TUNE_CASE_BED, GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+        dwinDrawLabel(TUNE_CASE_BED, GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
       #endif
       #if HAS_FAN
-        DWIN_Draw_Label(TUNE_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
+        dwinDrawLabel(TUNE_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
       #endif
-      DWIN_Draw_Label(TUNE_CASE_ZOFF, GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+      dwinDrawLabel(TUNE_CASE_ZOFF, GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
     #else
-      Item_AreaCopy(1, 179, 92, 190, TUNE_CASE_SPEED);          // "Print speed"
+      itemAreaCopy(1, 179, 92, 190, TUNE_CASE_SPEED);          // "Print speed"
       #if HAS_HOTEND
-        Item_AreaCopy(197, 104, 238, 114, TUNE_CASE_TEMP);      // "Hotend"
-        Item_AreaCopy(  1,  89,  83, 101, TUNE_CASE_TEMP, 44);  // "Temperature"
+        itemAreaCopy(197, 104, 238, 114, TUNE_CASE_TEMP);      // "Hotend"
+        itemAreaCopy(  1,  89,  83, 101, TUNE_CASE_TEMP, 44);  // "Temperature"
       #endif
       #if HAS_HEATED_BED
-        Item_AreaCopy(240, 104, 264, 114, TUNE_CASE_BED);       // "Bed"
-        Item_AreaCopy(  1,  89,  83, 101, TUNE_CASE_BED, 27);   // "Temperature"
+        itemAreaCopy(240, 104, 264, 114, TUNE_CASE_BED);       // "Bed"
+        itemAreaCopy(  1,  89,  83, 101, TUNE_CASE_BED, 27);   // "Temperature"
       #endif
       #if HAS_FAN
-        Item_AreaCopy(0, 119, 64, 132, TUNE_CASE_FAN);          // "Fan speed"
+        itemAreaCopy(0, 119, 64, 132, TUNE_CASE_FAN);          // "Fan speed"
       #endif
       #if HAS_ZOFFSET_ITEM
-        Item_AreaCopy(93, 179, 141, 189, TUNE_CASE_ZOFF);       // "Z-offset"
+        itemAreaCopy(93, 179, 141, 189, TUNE_CASE_ZOFF);       // "Z-offset"
       #endif
     #endif
   }
 
-  Draw_Back_First(select_tune.now == CASE_BACK);
-  if (select_tune.now != CASE_BACK) Draw_Menu_Cursor(select_tune.now);
+  drawBackFirst(select_tune.now == CASE_BACK);
+  if (select_tune.now != CASE_BACK) drawMenuCursor(select_tune.now);
 
-  Draw_Menu_Line(TUNE_CASE_SPEED, ICON_Speed);
-  Draw_Edit_Integer3(TUNE_CASE_SPEED, feedrate_percentage);
+  drawMenuLine(TUNE_CASE_SPEED, ICON_Speed);
+  drawEditInteger3(TUNE_CASE_SPEED, feedrate_percentage);
 
   #if HAS_HOTEND
-    Draw_Menu_Line(TUNE_CASE_TEMP, ICON_HotendTemp);
-    Draw_Edit_Integer3(TUNE_CASE_TEMP, thermalManager.degTargetHotend(0));
+    drawMenuLine(TUNE_CASE_TEMP, ICON_HotendTemp);
+    drawEditInteger3(TUNE_CASE_TEMP, thermalManager.degTargetHotend(0));
   #endif
   #if HAS_HEATED_BED
-    Draw_Menu_Line(TUNE_CASE_BED, ICON_BedTemp);
-    Draw_Edit_Integer3(TUNE_CASE_BED, thermalManager.degTargetBed());
+    drawMenuLine(TUNE_CASE_BED, ICON_BedTemp);
+    drawEditInteger3(TUNE_CASE_BED, thermalManager.degTargetBed());
   #endif
   #if HAS_FAN
-    Draw_Menu_Line(TUNE_CASE_FAN, ICON_FanSpeed);
-    Draw_Edit_Integer3(TUNE_CASE_FAN, thermalManager.fan_speed[0]);
+    drawMenuLine(TUNE_CASE_FAN, ICON_FanSpeed);
+    drawEditInteger3(TUNE_CASE_FAN, thermalManager.fan_speed[0]);
   #endif
   #if HAS_ZOFFSET_ITEM
-    Draw_Menu_Line(TUNE_CASE_ZOFF, ICON_Zoffset);
-    Draw_Edit_Signed_Float2(TUNE_CASE_ZOFF, BABY_Z_VAR * 100);
+    drawMenuLine(TUNE_CASE_ZOFF, ICON_Zoffset);
+    drawEditSignedFloat2(TUNE_CASE_ZOFF, BABY_Z_VAR * 100);
   #endif
 }
 
 //
 // Motion Menu
 //
-void Draw_Motion_Menu() {
-  Clear_Main_Window();
-
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 16, 28, 13);                        // "Motion"
-    Item_AreaCopy(173, 133, 228, 147, MOTION_CASE_RATE);        // Max speed
-    Item_AreaCopy(173, 133, 200, 147, MOTION_CASE_ACCEL);       // Max...
-    Item_AreaCopy(28, 149, 69, 161, MOTION_CASE_ACCEL, 30, 1);  // ...Acceleration
+void drawMotionMenu() {
+  clearMainWindow();
+
+  if (hmiIsChinese()) {
+    dwinFrameTitleCopy(1, 16, 28, 13);                        // "Motion"
+    itemAreaCopy(173, 133, 228, 147, MOTION_CASE_RATE);        // Max speed
+    itemAreaCopy(173, 133, 200, 147, MOTION_CASE_ACCEL);       // Max...
+    itemAreaCopy(28, 149, 69, 161, MOTION_CASE_ACCEL, 30, 1);  // ...Acceleration
     #if HAS_CLASSIC_JERK
-      Item_AreaCopy(173, 133, 200, 147, MOTION_CASE_JERK);      // Max...
-      Item_AreaCopy(1, 180, 28, 192, MOTION_CASE_JERK, 30, 1);  // ...
-      Item_AreaCopy(202, 133, 228, 147, MOTION_CASE_JERK, 57);  // ...Jerk
+      itemAreaCopy(173, 133, 200, 147, MOTION_CASE_JERK);      // Max...
+      itemAreaCopy(1, 180, 28, 192, MOTION_CASE_JERK, 30, 1);  // ...
+      itemAreaCopy(202, 133, 228, 147, MOTION_CASE_JERK, 57);  // ...Jerk
     #endif
-    Item_AreaCopy(153, 148, 194, 161, MOTION_CASE_STEPS);       // Flow ratio
+    itemAreaCopy(153, 148, 194, 161, MOTION_CASE_STEPS);       // Flow ratio
   }
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_MOTION));
+      drawTitle(GET_TEXT_F(MSG_MOTION));
     #else
-      DWIN_Frame_TitleCopy(144, 16, 46, 11);                            // "Motion"
+      dwinFrameTitleCopy(144, 16, 46, 11);                            // "Motion"
     #endif
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MOTION_CASE_RATE, F("Feedrate"));                 // "Feedrate"
-      DWIN_Draw_Label(MOTION_CASE_ACCEL, GET_TEXT_F(MSG_ACCELERATION)); // "Acceleration"
+      dwinDrawLabel(MOTION_CASE_RATE, F("Feedrate"));                 // "Feedrate"
+      dwinDrawLabel(MOTION_CASE_ACCEL, GET_TEXT_F(MSG_ACCELERATION)); // "Acceleration"
       #if HAS_CLASSIC_JERK
-        DWIN_Draw_Label(MOTION_CASE_JERK, GET_TEXT_F(MSG_JERK));        // "Jerk"
+        dwinDrawLabel(MOTION_CASE_JERK, GET_TEXT_F(MSG_JERK));        // "Jerk"
       #endif
-      DWIN_Draw_Label(MOTION_CASE_STEPS, GET_TEXT_F(MSG_STEPS_PER_MM)); // "Steps/mm"
+      dwinDrawLabel(MOTION_CASE_STEPS, GET_TEXT_F(MSG_STEPS_PER_MM)); // "Steps/mm"
     #else
       say_max_en(MOTION_CASE_RATE); say_speed_en(30, MOTION_CASE_RATE); // "Max Speed"
       say_max_accel_en(MOTION_CASE_ACCEL);                              // "Max Acceleration"
@@ -1039,17 +1039,17 @@ void Draw_Motion_Menu() {
     #endif
   }
 
-  Draw_Back_First(select_motion.now == CASE_BACK);
-  if (select_motion.now != CASE_BACK) Draw_Menu_Cursor(select_motion.now);
+  drawBackFirst(select_motion.now == CASE_BACK);
+  if (select_motion.now != CASE_BACK) drawMenuCursor(select_motion.now);
 
   uint8_t i = 0;
-  #define _MOTION_ICON(N) Draw_Menu_Line(++i, ICON_MaxSpeed + (N) - 1)
-  _MOTION_ICON(MOTION_CASE_RATE); Draw_More_Icon(i);
-  _MOTION_ICON(MOTION_CASE_ACCEL); Draw_More_Icon(i);
+  #define _MOTION_ICON(N) drawMenuLine(++i, ICON_MaxSpeed + (N) - 1)
+  _MOTION_ICON(MOTION_CASE_RATE); drawMoreIcon(i);
+  _MOTION_ICON(MOTION_CASE_ACCEL); drawMoreIcon(i);
   #if HAS_CLASSIC_JERK
-    _MOTION_ICON(MOTION_CASE_JERK); Draw_More_Icon(i);
+    _MOTION_ICON(MOTION_CASE_JERK); drawMoreIcon(i);
   #endif
-  _MOTION_ICON(MOTION_CASE_STEPS); Draw_More_Icon(i);
+  _MOTION_ICON(MOTION_CASE_STEPS); drawMoreIcon(i);
 }
 
 //
@@ -1058,339 +1058,339 @@ void Draw_Motion_Menu() {
 
 #if HAS_HOTEND || HAS_HEATED_BED
 
-  void DWIN_Popup_Temperature(const bool toohigh) {
-    Clear_Popup_Area();
-    Draw_Popup_Bkgd_105();
+  void dwinPopupTemperature(const bool toohigh) {
+    clearPopupArea();
+    drawPopupBkgd105();
     if (toohigh) {
-      DWIN_ICON_Show(ICON, ICON_TempTooHigh, 102, 165);
-      if (HMI_IsChinese()) {
-        DWIN_Frame_AreaCopy(1, 103, 371, 237, 386,  52, 285); // Temp Too High
-        DWIN_Frame_AreaCopy(1, 151, 389, 185, 402, 187, 285);
-        DWIN_Frame_AreaCopy(1, 189, 389, 271, 402,  95, 310);
+      dwinIconShow(ICON, ICON_TempTooHigh, 102, 165);
+      if (hmiIsChinese()) {
+        dwinFrameAreaCopy(1, 103, 371, 237, 386,  52, 285); // Temp Too High
+        dwinFrameAreaCopy(1, 151, 389, 185, 402, 187, 285);
+        dwinFrameAreaCopy(1, 189, 389, 271, 402,  95, 310);
       }
       else {
-        DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
-        DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, 92, 300, F("is too high"));
+        dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
+        dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, 92, 300, F("is too high"));
       }
     }
     else {
-      DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 165);
-      if (HMI_IsChinese()) {
-        DWIN_Frame_AreaCopy(1, 103, 371, 270, 386, 52, 285); // Tenp Too Low
-        DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
+      dwinIconShow(ICON, ICON_TempTooLow, 102, 165);
+      if (hmiIsChinese()) {
+        dwinFrameAreaCopy(1, 103, 371, 270, 386, 52, 285); // Tenp Too Low
+        dwinFrameAreaCopy(1, 189, 389, 271, 402, 95, 310);
       }
       else {
-        DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
-        DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, 92, 300, F("is too low"));
+        dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
+        dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, 92, 300, F("is too low"));
       }
     }
   }
 
 #endif
 
-void Draw_Popup_Bkgd_60() {
-  DWIN_Draw_Rectangle(1, Color_Bg_Window, 14, 60, 258, 330);
+void drawPopupBkgd60() {
+  dwinDrawRectangle(1, Color_Bg_Window, 14, 60, 258, 330);
 }
 
 #if HAS_HOTEND
 
-  void Popup_Window_ETempTooLow() {
-    Clear_Main_Window();
-    Draw_Popup_Bkgd_60();
-    DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 105);
-    if (HMI_IsChinese()) {
-      DWIN_Frame_AreaCopy(1, 103, 371, 136, 386, 69, 240);      // Nozzle Too Cold
-      DWIN_Frame_AreaCopy(1, 170, 371, 270, 386, 69 + 33, 240);
-      DWIN_ICON_Show(ICON, ICON_Confirm_C, 86, 280);
+  void popupWindowETempTooLow() {
+    clearMainWindow();
+    drawPopupBkgd60();
+    dwinIconShow(ICON, ICON_TempTooLow, 102, 105);
+    if (hmiIsChinese()) {
+      dwinFrameAreaCopy(1, 103, 371, 136, 386, 69, 240);      // Nozzle Too Cold
+      dwinFrameAreaCopy(1, 170, 371, 270, 386, 69 + 33, 240);
+      dwinIconShow(ICON, ICON_Confirm_C, 86, 280);
     }
     else {
-      DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, 20, 235, F("Nozzle is too cold"));
-      DWIN_ICON_Show(ICON, ICON_Confirm_E, 86, 280);
+      dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, 20, 235, F("Nozzle is too cold"));
+      dwinIconShow(ICON, ICON_Confirm_E, 86, 280);
     }
   }
 
 #endif
 
-void Popup_Window_Resume() {
-  Clear_Popup_Area();
-  Draw_Popup_Bkgd_105();
-  if (HMI_IsChinese()) {
-    DWIN_Frame_AreaCopy(1, 160, 338, 235, 354, 98, 135);    // Resume Interrupted Print
-    DWIN_Frame_AreaCopy(1, 103, 321, 271, 335, 52, 192);
-    DWIN_ICON_Show(ICON, ICON_Cancel_C,    26, 307);
-    DWIN_ICON_Show(ICON, ICON_Continue_C, 146, 307);
+void popupWindowResume() {
+  clearPopupArea();
+  drawPopupBkgd105();
+  if (hmiIsChinese()) {
+    dwinFrameAreaCopy(1, 160, 338, 235, 354, 98, 135);    // Resume Interrupted Print
+    dwinFrameAreaCopy(1, 103, 321, 271, 335, 52, 192);
+    dwinIconShow(ICON, ICON_Cancel_C,    26, 307);
+    dwinIconShow(ICON, ICON_Continue_C, 146, 307);
   }
   else {
-    DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 14) / 2, 115, F("Continue Print"));
-    DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 192, F("It looks like the last"));
-    DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 212, F("file was interrupted."));
-    DWIN_ICON_Show(ICON, ICON_Cancel_E,    26, 307);
-    DWIN_ICON_Show(ICON, ICON_Continue_E, 146, 307);
+    dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 14) / 2, 115, F("Continue Print"));
+    dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 192, F("It looks like the last"));
+    dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 212, F("file was interrupted."));
+    dwinIconShow(ICON, ICON_Cancel_E,    26, 307);
+    dwinIconShow(ICON, ICON_Continue_E, 146, 307);
   }
 }
 
-void Popup_Window_Home(const bool parking/*=false*/) {
-  Clear_Main_Window();
-  Draw_Popup_Bkgd_60();
-  DWIN_ICON_Show(ICON, ICON_BLTouch, 101, 105);
-  if (HMI_IsChinese()) {
-    DWIN_Frame_AreaCopy(1, 0, 371, 33, 386, 85, 240);       // Wait for Move to Complete
-    DWIN_Frame_AreaCopy(1, 203, 286, 271, 302, 118, 240);
-    DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
+void popupWindowHome(const bool parking/*=false*/) {
+  clearMainWindow();
+  drawPopupBkgd60();
+  dwinIconShow(ICON, ICON_BLTouch, 101, 105);
+  if (hmiIsChinese()) {
+    dwinFrameAreaCopy(1, 0, 371, 33, 386, 85, 240);       // Wait for Move to Complete
+    dwinFrameAreaCopy(1, 203, 286, 271, 302, 118, 240);
+    dwinFrameAreaCopy(1, 0, 389, 150, 402, 61, 280);
   }
   else {
-    DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * (parking ? 7 : 10)) / 2, 230, parking ? F("Parking") : F("Homing XYZ"));
-    DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
+    dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * (parking ? 7 : 10)) / 2, 230, parking ? F("Parking") : F("Homing XYZ"));
+    dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
   }
 }
 
 #if HAS_ONESTEP_LEVELING
 
-  void Popup_Window_Leveling() {
-    Clear_Main_Window();
-    Draw_Popup_Bkgd_60();
-    DWIN_ICON_Show(ICON, ICON_AutoLeveling, 101, 105);
-    if (HMI_IsChinese()) {
-      DWIN_Frame_AreaCopy(1, 0, 371, 100, 386, 84, 240);    // Wait for Leveling
-      DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
+  void popupWindowLeveling() {
+    clearMainWindow();
+    drawPopupBkgd60();
+    dwinIconShow(ICON, ICON_AutoLeveling, 101, 105);
+    if (hmiIsChinese()) {
+      dwinFrameAreaCopy(1, 0, 371, 100, 386, 84, 240);    // Wait for Leveling
+      dwinFrameAreaCopy(1, 0, 389, 150, 402, 61, 280);
     }
     else {
-      DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 13) / 2, 230, GET_TEXT_F(MSG_BED_LEVELING));
-      DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
+      dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 13) / 2, 230, GET_TEXT_F(MSG_BED_LEVELING));
+      dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
     }
   }
 
 #endif
 
-void Draw_Select_Highlight(const bool sel) {
-  HMI_flag.select_flag = sel;
+void drawSelectHighlight(const bool sel) {
+  hmiFlag.select_flag = sel;
   const uint16_t c1 = sel ? Select_Color : Color_Bg_Window,
                  c2 = sel ? Color_Bg_Window : Select_Color;
-  DWIN_Draw_Rectangle(0, c1, 25, 279, 126, 318);
-  DWIN_Draw_Rectangle(0, c1, 24, 278, 127, 319);
-  DWIN_Draw_Rectangle(0, c2, 145, 279, 246, 318);
-  DWIN_Draw_Rectangle(0, c2, 144, 278, 247, 319);
-}
-
-void Popup_window_PauseOrStop() {
-  Clear_Main_Window();
-  Draw_Popup_Bkgd_60();
-  if (HMI_IsChinese()) {
-         if (select_print.now == PRINT_PAUSE_RESUME) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);    // Pause
-    else if (select_print.now == PRINT_STOP) DWIN_Frame_AreaCopy(1, 221, 320, 253, 336, 98, 150);    // Stop
-    DWIN_Frame_AreaCopy(1, 220, 304, 264, 319, 130, 150); // Print
-    DWIN_ICON_Show(ICON, ICON_Confirm_C, 26, 280);
-    DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 280);
+  dwinDrawRectangle(0, c1, 25, 279, 126, 318);
+  dwinDrawRectangle(0, c1, 24, 278, 127, 319);
+  dwinDrawRectangle(0, c2, 145, 279, 246, 318);
+  dwinDrawRectangle(0, c2, 144, 278, 247, 319);
+}
+
+void popupwindowPauseOrStop() {
+  clearMainWindow();
+  drawPopupBkgd60();
+  if (hmiIsChinese()) {
+         if (select_print.now == PRINT_PAUSE_RESUME) dwinFrameAreaCopy(1, 237, 338, 269, 356, 98, 150);    // Pause
+    else if (select_print.now == PRINT_STOP) dwinFrameAreaCopy(1, 221, 320, 253, 336, 98, 150);    // Stop
+    dwinFrameAreaCopy(1, 220, 304, 264, 319, 130, 150); // Print
+    dwinIconShow(ICON, ICON_Confirm_C, 26, 280);
+    dwinIconShow(ICON, ICON_Cancel_C, 146, 280);
   }
   else {
-         if (select_print.now == PRINT_PAUSE_RESUME) DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 11) / 2, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
-    else if (select_print.now == PRINT_STOP) DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 10) / 2, 150, GET_TEXT_F(MSG_STOP_PRINT));
-    DWIN_ICON_Show(ICON, ICON_Confirm_E, 26, 280);
-    DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 280);
+         if (select_print.now == PRINT_PAUSE_RESUME) dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 11) / 2, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
+    else if (select_print.now == PRINT_STOP) dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 10) / 2, 150, GET_TEXT_F(MSG_STOP_PRINT));
+    dwinIconShow(ICON, ICON_Confirm_E, 26, 280);
+    dwinIconShow(ICON, ICON_Cancel_E, 146, 280);
   }
-  Draw_Select_Highlight(true);
+  drawSelectHighlight(true);
 }
 
-void Draw_Printing_Screen() {
+void drawPrintingScreen() {
   const uint16_t y = 168;
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(30, 1, 42, 14);              // "Printing"
-    DWIN_Frame_AreaCopy(1,  0, 72,  63, 86,  43, y);  // "Printing Time"
-    DWIN_Frame_AreaCopy(1, 65, 72, 128, 86, 178, y);  // "Remain"
+  if (hmiIsChinese()) {
+    dwinFrameTitleCopy(30, 1, 42, 14);              // "Printing"
+    dwinFrameAreaCopy(1,  0, 72,  63, 86,  43, y);  // "Printing Time"
+    dwinFrameAreaCopy(1, 65, 72, 128, 86, 178, y);  // "Remain"
   }
   else {
-    DWIN_Frame_TitleCopy(42, 0, 47, 14);              // "Printing"
-    DWIN_Frame_AreaCopy(1,   1, 43,  97, 59,  43, y); // "Printing Time"
-    DWIN_Frame_AreaCopy(1, 100, 43, 152, 56, 178, y); // "Remain"
+    dwinFrameTitleCopy(42, 0, 47, 14);              // "Printing"
+    dwinFrameAreaCopy(1,   1, 43,  97, 59,  43, y); // "Printing Time"
+    dwinFrameAreaCopy(1, 100, 43, 152, 56, 178, y); // "Remain"
   }
 }
 
-void Draw_Print_ProgressBar() {
+void drawPrintProgressBar() {
   constexpr uint16_t y = 93, h = 21;
-  DWIN_ICON_Show(ICON, ICON_Bar, 15, 93);
-  DWIN_Draw_Rectangle(1, BarFill_Color, 16 + _card_percent * 240 / 100, y, 256, y + h - 1);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Percent_Color, Color_Bg_Black, 2, 117, y + 40, _card_percent);
-  DWIN_Draw_String(false, font8x16, Percent_Color, Color_Bg_Black, 133, y + 40, F("%"));
+  dwinIconShow(ICON, ICON_Bar, 15, 93);
+  dwinDrawRectangle(1, BarFill_Color, 16 + _card_percent * 240 / 100, y, 256, y + h - 1);
+  dwinDrawIntValue(true, true, 0, font8x16, Percent_Color, Color_Bg_Black, 2, 117, y + 40, _card_percent);
+  dwinDrawString(false, font8x16, Percent_Color, Color_Bg_Black, 133, y + 40, F("%"));
 }
 
-void Draw_Print_ProgressElapsed() {
+void drawPrintProgressElapsed() {
   constexpr uint16_t x = 45, y = 192;
   duration_t elapsed = print_job_timer.duration(); // print timer
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x, y, elapsed.value / 3600);
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, x + 8 * 2, y, F(":"));
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x + 8 * 3, y, (elapsed.value % 3600) / 60);
+  dwinDrawIntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x, y, elapsed.value / 3600);
+  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, x + 8 * 2, y, F(":"));
+  dwinDrawIntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x + 8 * 3, y, (elapsed.value % 3600) / 60);
 }
 
-void Draw_Print_ProgressRemain() {
+void drawPrintProgressRemain() {
   constexpr uint16_t x = 179, y = 192;
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x, y, _remain_time / 3600);
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, x + 8 * 2, y, F(":"));
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x + 8 * 3, y, (_remain_time % 3600) / 60);
+  dwinDrawIntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x, y, _remain_time / 3600);
+  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, x + 8 * 2, y, F(":"));
+  dwinDrawIntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x + 8 * 3, y, (_remain_time % 3600) / 60);
 }
 
-void Goto_PrintProcess() {
+void gotoPrintProcess() {
   checkkey = PrintProcess;
 
-  Clear_Main_Window();
-  Draw_Printing_Screen();
+  clearMainWindow();
+  drawPrintingScreen();
 
-  ICON_Tune();
-  ICON_ResumeOrPause();
-  ICON_Stop();
+  iconTune();
+  iconResumeOrPause();
+  iconStop();
 
   // Copy into filebuf string before entry
   char * const name = card.longest_filename();
   const int8_t npos = _MAX(0U, DWIN_WIDTH - strlen(name) * MENU_CHR_W) / 2;
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, npos, 60, name);
+  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, npos, 60, name);
 
-  DWIN_ICON_Show(ICON, ICON_PrintTime,   17, 163);
-  DWIN_ICON_Show(ICON, ICON_RemainTime, 150, 161);
+  dwinIconShow(ICON, ICON_PrintTime,   17, 163);
+  dwinIconShow(ICON, ICON_RemainTime, 150, 161);
 
-  Draw_Print_ProgressBar();
-  Draw_Print_ProgressElapsed();
-  Draw_Print_ProgressRemain();
+  drawPrintProgressBar();
+  drawPrintProgressElapsed();
+  drawPrintProgressRemain();
 }
 
-void Goto_MainMenu() {
+void gotoMainMenu() {
   checkkey = MainMenu;
 
-  Clear_Main_Window();
+  clearMainWindow();
 
-  if (HMI_IsChinese())
-    DWIN_Frame_TitleCopy(2, 2, 26, 13);   // "Home" etc
+  if (hmiIsChinese())
+    dwinFrameTitleCopy(2, 2, 26, 13);   // "Home" etc
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_MAIN_MENU));
+      drawTitle(GET_TEXT_F(MSG_MAIN_MENU));
     #else
-      DWIN_Frame_TitleCopy(0, 2, 40, 11); // "Home"
+      dwinFrameTitleCopy(0, 2, 40, 11); // "Home"
     #endif
   }
 
-  DWIN_ICON_Show(ICON, ICON_LOGO, 71, 52);
+  dwinIconShow(ICON, ICON_LOGO, 71, 52);
 
-  ICON_Print();
-  ICON_Prepare();
-  ICON_Control();
-  TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)();
+  iconPrint();
+  iconPrepare();
+  iconControl();
+  TERN(HAS_ONESTEP_LEVELING, iconLeveling, iconStartInfo)();
 }
 
-void HMI_Plan_Move(const feedRate_t fr_mm_s) {
+void hmiPlanMove(const feedRate_t fr_mm_s) {
   if (!planner.is_full()) {
     planner.synchronize();
     planner.buffer_line(current_position, fr_mm_s);
-    DWIN_UpdateLCD();
+    dwinUpdateLCD();
   }
 }
 
-void HMI_Move_Done(const AxisEnum axis) {
-  EncoderRate.enabled = false;
+void hmiMoveDone(const AxisEnum axis) {
+  encoderRate.enabled = false;
   planner.synchronize();
   checkkey = AxisMove;
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
-void HMI_Move_X() {
-  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+void hmiMoveX() {
+  EncoderState encoder_diffState = encoderReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scaled)) {
-    Draw_Edit_Float3(1, HMI_ValueStruct.Move_X_scaled);
-    return HMI_Move_Done(X_AXIS);
+  if (applyEncoder(encoder_diffState, hmiValues.Move_X_scaled)) {
+    drawEditFloat3(1, hmiValues.Move_X_scaled);
+    return hmiMoveDone(X_AXIS);
   }
-  LIMIT(HMI_ValueStruct.Move_X_scaled, (X_MIN_POS) * MINUNITMULT, (X_MAX_POS) * MINUNITMULT);
-  current_position.x = HMI_ValueStruct.Move_X_scaled / MINUNITMULT;
-  Draw_Edit_Float3(1, HMI_ValueStruct.Move_X_scaled, true);
-  DWIN_UpdateLCD();
-  HMI_Plan_Move(homing_feedrate(X_AXIS));
+  LIMIT(hmiValues.Move_X_scaled, (X_MIN_POS) * MINUNITMULT, (X_MAX_POS) * MINUNITMULT);
+  current_position.x = hmiValues.Move_X_scaled / MINUNITMULT;
+  drawEditFloat3(1, hmiValues.Move_X_scaled, true);
+  dwinUpdateLCD();
+  hmiPlanMove(homing_feedrate(X_AXIS));
 }
 
-void HMI_Move_Y() {
-  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+void hmiMoveY() {
+  EncoderState encoder_diffState = encoderReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scaled)) {
-    Draw_Edit_Float3(2, HMI_ValueStruct.Move_Y_scaled);
-    return HMI_Move_Done(Y_AXIS);
+  if (applyEncoder(encoder_diffState, hmiValues.Move_Y_scaled)) {
+    drawEditFloat3(2, hmiValues.Move_Y_scaled);
+    return hmiMoveDone(Y_AXIS);
   }
-  LIMIT(HMI_ValueStruct.Move_Y_scaled, (Y_MIN_POS) * MINUNITMULT, (Y_MAX_POS) * MINUNITMULT);
-  current_position.y = HMI_ValueStruct.Move_Y_scaled / MINUNITMULT;
-  Draw_Edit_Float3(2, HMI_ValueStruct.Move_Y_scaled, true);
-  DWIN_UpdateLCD();
-  HMI_Plan_Move(homing_feedrate(Y_AXIS));
+  LIMIT(hmiValues.Move_Y_scaled, (Y_MIN_POS) * MINUNITMULT, (Y_MAX_POS) * MINUNITMULT);
+  current_position.y = hmiValues.Move_Y_scaled / MINUNITMULT;
+  drawEditFloat3(2, hmiValues.Move_Y_scaled, true);
+  dwinUpdateLCD();
+  hmiPlanMove(homing_feedrate(Y_AXIS));
 }
 
-void HMI_Move_Z() {
-  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+void hmiMoveZ() {
+  EncoderState encoder_diffState = encoderReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scaled)) {
-    Draw_Edit_Float3(3, HMI_ValueStruct.Move_Z_scaled);
-    return HMI_Move_Done(Z_AXIS);
+  if (applyEncoder(encoder_diffState, hmiValues.Move_Z_scaled)) {
+    drawEditFloat3(3, hmiValues.Move_Z_scaled);
+    return hmiMoveDone(Z_AXIS);
   }
-  LIMIT(HMI_ValueStruct.Move_Z_scaled, (Z_MIN_POS) * MINUNITMULT, (Z_MAX_POS) * MINUNITMULT);
-  current_position.z = HMI_ValueStruct.Move_Z_scaled / MINUNITMULT;
-  Draw_Edit_Float3(3, HMI_ValueStruct.Move_Z_scaled, true);
-  DWIN_UpdateLCD();
-  HMI_Plan_Move(homing_feedrate(Z_AXIS));
+  LIMIT(hmiValues.Move_Z_scaled, (Z_MIN_POS) * MINUNITMULT, (Z_MAX_POS) * MINUNITMULT);
+  current_position.z = hmiValues.Move_Z_scaled / MINUNITMULT;
+  drawEditFloat3(3, hmiValues.Move_Z_scaled, true);
+  dwinUpdateLCD();
+  hmiPlanMove(homing_feedrate(Z_AXIS));
 }
 
 #if HAS_HOTEND
 
-  void HMI_Move_E() {
+  void hmiMoveE() {
     static float last_E_scaled = 0;
-    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+    EncoderState encoder_diffState = encoderReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_E_scaled)) {
-      last_E_scaled = HMI_ValueStruct.Move_E_scaled;
-      Draw_Edit_Signed_Float3(4, last_E_scaled);
-      return HMI_Move_Done(E_AXIS);
+    if (applyEncoder(encoder_diffState, hmiValues.Move_E_scaled)) {
+      last_E_scaled = hmiValues.Move_E_scaled;
+      drawEditSignedFloat3(4, last_E_scaled);
+      return hmiMoveDone(E_AXIS);
     }
-    LIMIT(HMI_ValueStruct.Move_E_scaled, last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT, last_E_scaled + (EXTRUDE_MAXLENGTH) * MINUNITMULT);
-    current_position.e = HMI_ValueStruct.Move_E_scaled / MINUNITMULT;
-    Draw_Edit_Signed_Float3(4, HMI_ValueStruct.Move_E_scaled, true);
-    DWIN_UpdateLCD();
-    HMI_Plan_Move(MMM_TO_MMS(FEEDRATE_E));
+    LIMIT(hmiValues.Move_E_scaled, last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT, last_E_scaled + (EXTRUDE_MAXLENGTH) * MINUNITMULT);
+    current_position.e = hmiValues.Move_E_scaled / MINUNITMULT;
+    drawEditSignedFloat3(4, hmiValues.Move_E_scaled, true);
+    dwinUpdateLCD();
+    hmiPlanMove(MMM_TO_MMS(FEEDRATE_E));
   }
 
 #endif
 
 #if HAS_ZOFFSET_ITEM
 
-  void HMI_Zoffset() {
-    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+  void hmiZoffset() {
+    EncoderState encoder_diffState = encoderReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
     uint8_t zoff_line;
-    switch (HMI_ValueStruct.show_mode) {
+    switch (hmiValues.show_mode) {
       case -4: zoff_line = PREPARE_CASE_ZOFF + MROWS - index_prepare; break;
       default: zoff_line = TUNE_CASE_ZOFF + MROWS - index_tune;
     }
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.offset_value)) {
-      EncoderRate.enabled = false;
+    if (applyEncoder(encoder_diffState, hmiValues.offset_value)) {
+      encoderRate.enabled = false;
       #if HAS_BED_PROBE
         probe.offset.z = dwin_zoffset;
         TERN_(EEPROM_SETTINGS, settings.save());
       #endif
-      checkkey = HMI_ValueStruct.show_mode == -4 ? Prepare : Tune;
-      Draw_Edit_Signed_Float2(zoff_line, TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
-      DWIN_UpdateLCD();
+      checkkey = hmiValues.show_mode == -4 ? Prepare : Tune;
+      drawEditSignedFloat2(zoff_line, TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, hmiValues.offset_value));
+      dwinUpdateLCD();
       return;
     }
-    LIMIT(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
+    LIMIT(hmiValues.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
     last_zoffset = dwin_zoffset;
-    dwin_zoffset = HMI_ValueStruct.offset_value / 100.0f;
+    dwin_zoffset = hmiValues.offset_value / 100.0f;
     #if ANY(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
       if (BABYSTEP_ALLOWED()) babystep.add_mm(Z_AXIS, dwin_zoffset - last_zoffset);
     #endif
-    Draw_Edit_Signed_Float2(zoff_line, HMI_ValueStruct.offset_value, true);
-    DWIN_UpdateLCD();
+    drawEditSignedFloat2(zoff_line, hmiValues.offset_value, true);
+    dwinUpdateLCD();
   }
 
 #endif // HAS_ZOFFSET_ITEM
 
 #if HAS_HOTEND
 
-  void HMI_ETemp() {
-    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+  void hmiETemp() {
+    EncoderState encoder_diffState = encoderReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
     uint8_t temp_line;
-    switch (HMI_ValueStruct.show_mode) {
+    switch (hmiValues.show_mode) {
       case -1: temp_line = TEMP_CASE_TEMP; break;
       #if HAS_PREHEAT
         case -2: temp_line = PREHEAT_CASE_TEMP; break;
@@ -1400,48 +1400,48 @@ void HMI_Move_Z() {
       #endif
       default: temp_line = TUNE_CASE_TEMP + MROWS - index_tune;
     }
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.E_Temp)) {
-      EncoderRate.enabled = false;
+    if (applyEncoder(encoder_diffState, hmiValues.E_Temp)) {
+      encoderRate.enabled = false;
       #if HAS_PREHEAT
-        if (HMI_ValueStruct.show_mode == -2) {
+        if (hmiValues.show_mode == -2) {
           checkkey = PLAPreheat;
-          ui.material_preset[0].hotend_temp = HMI_ValueStruct.E_Temp;
-          Draw_Edit_Integer3(temp_line, ui.material_preset[0].hotend_temp);
+          ui.material_preset[0].hotend_temp = hmiValues.E_Temp;
+          drawEditInteger3(temp_line, ui.material_preset[0].hotend_temp);
           return;
         }
         #if PREHEAT_COUNT > 1
-          if (HMI_ValueStruct.show_mode == -3) {
+          if (hmiValues.show_mode == -3) {
             checkkey = ABSPreheat;
-            ui.material_preset[1].hotend_temp = HMI_ValueStruct.E_Temp;
-            Draw_Edit_Integer3(temp_line, ui.material_preset[1].hotend_temp);
+            ui.material_preset[1].hotend_temp = hmiValues.E_Temp;
+            drawEditInteger3(temp_line, ui.material_preset[1].hotend_temp);
             return;
           }
         #endif
       #endif
 
-      if (HMI_ValueStruct.show_mode == -1) // Temperature
+      if (hmiValues.show_mode == -1) // Temperature
         checkkey = TemperatureID;
       else
         checkkey = Tune;
-      Draw_Edit_Integer3(temp_line, HMI_ValueStruct.E_Temp);
-      thermalManager.setTargetHotend(HMI_ValueStruct.E_Temp, 0);
+      drawEditInteger3(temp_line, hmiValues.E_Temp);
+      thermalManager.setTargetHotend(hmiValues.E_Temp, 0);
       return;
     }
     // E_Temp limit
-    LIMIT(HMI_ValueStruct.E_Temp, HEATER_0_MINTEMP, thermalManager.hotend_max_target(0));
+    LIMIT(hmiValues.E_Temp, HEATER_0_MINTEMP, thermalManager.hotend_max_target(0));
     // E_Temp value
-    Draw_Edit_Integer3(temp_line, HMI_ValueStruct.E_Temp, true);
+    drawEditInteger3(temp_line, hmiValues.E_Temp, true);
   }
 
 #endif // HAS_HOTEND
 
 #if HAS_HEATED_BED
 
-  void HMI_BedTemp() {
-    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+  void hmiBedTemp() {
+    EncoderState encoder_diffState = encoderReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
     uint8_t bed_line;
-    switch (HMI_ValueStruct.show_mode) {
+    switch (hmiValues.show_mode) {
       case -1: bed_line = TEMP_CASE_BED; break;
       #if HAS_PREHEAT
         case -2: bed_line = PREHEAT_CASE_BED; break;
@@ -1451,171 +1451,171 @@ void HMI_Move_Z() {
       #endif
       default: bed_line = TUNE_CASE_BED + MROWS - index_tune;
     }
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Bed_Temp)) {
-      EncoderRate.enabled = false;
+    if (applyEncoder(encoder_diffState, hmiValues.Bed_Temp)) {
+      encoderRate.enabled = false;
       #if HAS_PREHEAT
-        if (HMI_ValueStruct.show_mode == -2) {
+        if (hmiValues.show_mode == -2) {
           checkkey = PLAPreheat;
-          ui.material_preset[0].bed_temp = HMI_ValueStruct.Bed_Temp;
-          Draw_Edit_Integer3(bed_line, ui.material_preset[0].bed_temp);
+          ui.material_preset[0].bed_temp = hmiValues.Bed_Temp;
+          drawEditInteger3(bed_line, ui.material_preset[0].bed_temp);
           return;
         }
         #if PREHEAT_COUNT > 1
-          if (HMI_ValueStruct.show_mode == -3) {
+          if (hmiValues.show_mode == -3) {
             checkkey = ABSPreheat;
-            ui.material_preset[1].bed_temp = HMI_ValueStruct.Bed_Temp;
-            Draw_Edit_Integer3(bed_line, ui.material_preset[1].bed_temp);
+            ui.material_preset[1].bed_temp = hmiValues.Bed_Temp;
+            drawEditInteger3(bed_line, ui.material_preset[1].bed_temp);
             return;
           }
         #endif
       #endif
-      checkkey = HMI_ValueStruct.show_mode == -1 ? TemperatureID : Tune;
-      Draw_Edit_Integer3(bed_line, HMI_ValueStruct.Bed_Temp);
-      thermalManager.setTargetBed(HMI_ValueStruct.Bed_Temp);
+      checkkey = hmiValues.show_mode == -1 ? TemperatureID : Tune;
+      drawEditInteger3(bed_line, hmiValues.Bed_Temp);
+      thermalManager.setTargetBed(hmiValues.Bed_Temp);
       return;
     }
     // Bed_Temp limit
-    LIMIT(HMI_ValueStruct.Bed_Temp, BED_MINTEMP, BED_MAX_TARGET);
+    LIMIT(hmiValues.Bed_Temp, BED_MINTEMP, BED_MAX_TARGET);
     // Bed_Temp value
-    Draw_Edit_Integer3(bed_line, HMI_ValueStruct.Bed_Temp, true);
+    drawEditInteger3(bed_line, hmiValues.Bed_Temp, true);
   }
 
 #endif // HAS_HEATED_BED
 
 #if HAS_PREHEAT && HAS_FAN
 
-  void HMI_FanSpeed() {
-    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+  void hmiFanSpeed() {
+    EncoderState encoder_diffState = encoderReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
     uint8_t fan_line;
-    switch (HMI_ValueStruct.show_mode) {
+    switch (hmiValues.show_mode) {
       case -1: fan_line = TEMP_CASE_FAN; break;
       case -2: fan_line = PREHEAT_CASE_FAN; break;
       case -3: fan_line = PREHEAT_CASE_FAN; break;
       default: fan_line = TUNE_CASE_FAN + MROWS - index_tune;
     }
 
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Fan_speed)) {
-      EncoderRate.enabled = false;
-      if (HMI_ValueStruct.show_mode == -2) {
+    if (applyEncoder(encoder_diffState, hmiValues.Fan_speed)) {
+      encoderRate.enabled = false;
+      if (hmiValues.show_mode == -2) {
         checkkey = PLAPreheat;
-        ui.material_preset[0].fan_speed = HMI_ValueStruct.Fan_speed;
-        Draw_Edit_Integer3(fan_line, ui.material_preset[0].fan_speed);
+        ui.material_preset[0].fan_speed = hmiValues.Fan_speed;
+        drawEditInteger3(fan_line, ui.material_preset[0].fan_speed);
         return;
       }
       #if PREHEAT_COUNT > 1
-        if (HMI_ValueStruct.show_mode == -3) {
+        if (hmiValues.show_mode == -3) {
           checkkey = ABSPreheat;
-          ui.material_preset[1].fan_speed = HMI_ValueStruct.Fan_speed;
-          Draw_Edit_Integer3(fan_line, ui.material_preset[1].fan_speed);
+          ui.material_preset[1].fan_speed = hmiValues.Fan_speed;
+          drawEditInteger3(fan_line, ui.material_preset[1].fan_speed);
           return;
         }
       #endif
-      checkkey = HMI_ValueStruct.show_mode == -1 ? TemperatureID : Tune;
-      Draw_Edit_Integer3(fan_line, HMI_ValueStruct.Fan_speed);
-      thermalManager.set_fan_speed(0, HMI_ValueStruct.Fan_speed);
+      checkkey = hmiValues.show_mode == -1 ? TemperatureID : Tune;
+      drawEditInteger3(fan_line, hmiValues.Fan_speed);
+      thermalManager.set_fan_speed(0, hmiValues.Fan_speed);
       return;
     }
     // Fan_speed limit
-    LIMIT(HMI_ValueStruct.Fan_speed, 0, 255);
+    LIMIT(hmiValues.Fan_speed, 0, 255);
     // Fan_speed value
-    Draw_Edit_Integer3(fan_line, HMI_ValueStruct.Fan_speed, true);
+    drawEditInteger3(fan_line, hmiValues.Fan_speed, true);
   }
 
 #endif // HAS_PREHEAT && HAS_FAN
 
-void HMI_PrintSpeed() {
-  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+void hmiPrintSpeed() {
+  EncoderState encoder_diffState = encoderReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.print_speed)) {
+  if (applyEncoder(encoder_diffState, hmiValues.print_speed)) {
     checkkey = Tune;
-    EncoderRate.enabled = false;
-    feedrate_percentage = HMI_ValueStruct.print_speed;
-    Draw_Edit_Integer3(select_tune.now + MROWS - index_tune, HMI_ValueStruct.print_speed);
+    encoderRate.enabled = false;
+    feedrate_percentage = hmiValues.print_speed;
+    drawEditInteger3(select_tune.now + MROWS - index_tune, hmiValues.print_speed);
     return;
   }
   // print_speed limit
-  LIMIT(HMI_ValueStruct.print_speed, MIN_PRINT_SPEED, MAX_PRINT_SPEED);
+  LIMIT(hmiValues.print_speed, MIN_PRINT_SPEED, MAX_PRINT_SPEED);
   // print_speed value
-  Draw_Edit_Integer3(select_tune.now + MROWS - index_tune, HMI_ValueStruct.print_speed, true);
+  drawEditInteger3(select_tune.now + MROWS - index_tune, hmiValues.print_speed, true);
 }
 
 #define LAST_AXIS TERN(HAS_HOTEND, E_AXIS, Z_AXIS)
 
-void HMI_MaxFeedspeedXYZE() {
-  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+void hmiMaxFeedspeedXYZE() {
+  EncoderState encoder_diffState = encoderReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Feedspeed)) {
+  if (applyEncoder(encoder_diffState, hmiValues.Max_Feedspeed)) {
     checkkey = MaxSpeed;
-    EncoderRate.enabled = false;
-    if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
-      planner.set_max_feedrate(HMI_flag.feedspeed_axis, HMI_ValueStruct.Max_Feedspeed);
-    Draw_Edit_Integer4(select_speed.now, HMI_ValueStruct.Max_Feedspeed);
+    encoderRate.enabled = false;
+    if (WITHIN(hmiFlag.feedspeed_axis, X_AXIS, LAST_AXIS))
+      planner.set_max_feedrate(hmiFlag.feedspeed_axis, hmiValues.Max_Feedspeed);
+    drawEditInteger4(select_speed.now, hmiValues.Max_Feedspeed);
     return;
   }
   // MaxFeedspeed limit
-  if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
-    LIMIT(HMI_ValueStruct.Max_Feedspeed, min_feedrate_edit_values[HMI_flag.feedspeed_axis], max_feedrate_edit_values[HMI_flag.feedspeed_axis]);
+  if (WITHIN(hmiFlag.feedspeed_axis, X_AXIS, LAST_AXIS))
+    LIMIT(hmiValues.Max_Feedspeed, min_feedrate_edit_values[hmiFlag.feedspeed_axis], max_feedrate_edit_values[hmiFlag.feedspeed_axis]);
   // MaxFeedspeed value
-  Draw_Edit_Integer4(select_speed.now, HMI_ValueStruct.Max_Feedspeed, true);
+  drawEditInteger4(select_speed.now, hmiValues.Max_Feedspeed, true);
 }
 
-void HMI_MaxAccelerationXYZE() {
-  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+void hmiMaxAccelerationXYZE() {
+  EncoderState encoder_diffState = encoderReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Acceleration)) {
+  if (applyEncoder(encoder_diffState, hmiValues.Max_Acceleration)) {
     checkkey = MaxAcceleration;
-    EncoderRate.enabled = false;
-    if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
-      planner.set_max_acceleration(HMI_flag.acc_axis, HMI_ValueStruct.Max_Acceleration);
-    Draw_Edit_Integer4(select_acc.now, HMI_ValueStruct.Max_Acceleration);
+    encoderRate.enabled = false;
+    if (WITHIN(hmiFlag.acc_axis, X_AXIS, LAST_AXIS))
+      planner.set_max_acceleration(hmiFlag.acc_axis, hmiValues.Max_Acceleration);
+    drawEditInteger4(select_acc.now, hmiValues.Max_Acceleration);
     return;
   }
   // MaxAcceleration limit
-  if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
-    LIMIT(HMI_ValueStruct.Max_Acceleration, min_acceleration_edit_values[HMI_flag.acc_axis], max_acceleration_edit_values[HMI_flag.acc_axis]);
+  if (WITHIN(hmiFlag.acc_axis, X_AXIS, LAST_AXIS))
+    LIMIT(hmiValues.Max_Acceleration, min_acceleration_edit_values[hmiFlag.acc_axis], max_acceleration_edit_values[hmiFlag.acc_axis]);
   // MaxAcceleration value
-  Draw_Edit_Integer4(select_acc.now, HMI_ValueStruct.Max_Acceleration, true);
+  drawEditInteger4(select_acc.now, hmiValues.Max_Acceleration, true);
 }
 
 #if HAS_CLASSIC_JERK
 
-  void HMI_MaxJerkXYZE() {
-    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+  void hmiMaxJerkXYZE() {
+    EncoderState encoder_diffState = encoderReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Jerk_scaled)) {
+    if (applyEncoder(encoder_diffState, hmiValues.Max_Jerk_scaled)) {
       checkkey = MaxJerk;
-      EncoderRate.enabled = false;
-      if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
-        planner.set_max_jerk(HMI_flag.jerk_axis, HMI_ValueStruct.Max_Jerk_scaled / MINUNITMULT);
-      Draw_Edit_Float3(select_jerk.now, HMI_ValueStruct.Max_Jerk_scaled);
+      encoderRate.enabled = false;
+      if (WITHIN(hmiFlag.jerk_axis, X_AXIS, LAST_AXIS))
+        planner.set_max_jerk(hmiFlag.jerk_axis, hmiValues.Max_Jerk_scaled / MINUNITMULT);
+      drawEditFloat3(select_jerk.now, hmiValues.Max_Jerk_scaled);
       return;
     }
     // MaxJerk limit
-    if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
-      LIMIT(HMI_ValueStruct.Max_Jerk_scaled, min_jerk_edit_values[HMI_flag.jerk_axis] * MINUNITMULT, max_jerk_edit_values[HMI_flag.jerk_axis] * MINUNITMULT);
+    if (WITHIN(hmiFlag.jerk_axis, X_AXIS, LAST_AXIS))
+      LIMIT(hmiValues.Max_Jerk_scaled, min_jerk_edit_values[hmiFlag.jerk_axis] * MINUNITMULT, max_jerk_edit_values[hmiFlag.jerk_axis] * MINUNITMULT);
     // MaxJerk value
-    Draw_Edit_Float3(select_jerk.now, HMI_ValueStruct.Max_Jerk_scaled, true);
+    drawEditFloat3(select_jerk.now, hmiValues.Max_Jerk_scaled, true);
   }
 
 #endif // HAS_CLASSIC_JERK
 
-void HMI_StepXYZE() {
-  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+void hmiStepXYZE() {
+  EncoderState encoder_diffState = encoderReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
-  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Step_scaled)) {
+  if (applyEncoder(encoder_diffState, hmiValues.Max_Step_scaled)) {
     checkkey = Step;
-    EncoderRate.enabled = false;
-    if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
-      planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step_scaled / MINUNITMULT;
-    Draw_Edit_Float3(select_step.now, HMI_ValueStruct.Max_Step_scaled);
+    encoderRate.enabled = false;
+    if (WITHIN(hmiFlag.step_axis, X_AXIS, LAST_AXIS))
+      planner.settings.axis_steps_per_mm[hmiFlag.step_axis] = hmiValues.Max_Step_scaled / MINUNITMULT;
+    drawEditFloat3(select_step.now, hmiValues.Max_Step_scaled);
     return;
   }
   // Step limit
-  if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
-    LIMIT(HMI_ValueStruct.Max_Step_scaled, min_steps_edit_values[HMI_flag.step_axis] * MINUNITMULT, max_steps_edit_values[HMI_flag.step_axis] * MINUNITMULT);
+  if (WITHIN(hmiFlag.step_axis, X_AXIS, LAST_AXIS))
+    LIMIT(hmiValues.Max_Step_scaled, min_steps_edit_values[hmiFlag.step_axis] * MINUNITMULT, max_steps_edit_values[hmiFlag.step_axis] * MINUNITMULT);
   // Step value
-  Draw_Edit_Float3(select_step.now, HMI_ValueStruct.Max_Step_scaled, true);
+  drawEditFloat3(select_step.now, hmiValues.Max_Step_scaled, true);
 }
 
 // Draw X, Y, Z and blink if in an un-homed or un-trusted state
@@ -1631,11 +1631,11 @@ void _update_axis_value(const AxisEnum axis, const uint16_t x, const uint16_t y,
 
   if (force || changed || draw_qmark || draw_empty) {
     if (blink && draw_qmark)
-      DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, x, y, F("???.?"));
+      dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, x, y, F("???.?"));
     else if (blink && draw_empty)
-      DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, x, y, F("     "));
+      dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, x, y, F("     "));
     else
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, x, y, p);
+      dwinDrawFloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, x, y, p);
   }
 }
 
@@ -1682,27 +1682,27 @@ void update_variable() {
     // Tune page temperature update
     #if HAS_HOTEND
       if (_new_hotend_target)
-        Draw_Edit_Integer3(TUNE_CASE_TEMP + MROWS - index_tune, _hotendtarget);
+        drawEditInteger3(TUNE_CASE_TEMP + MROWS - index_tune, _hotendtarget);
     #endif
     #if HAS_HEATED_BED
       if (_new_bed_target)
-        Draw_Edit_Integer3(TUNE_CASE_BED + MROWS - index_tune, _bedtarget);
+        drawEditInteger3(TUNE_CASE_BED + MROWS - index_tune, _bedtarget);
     #endif
     #if HAS_FAN
       if (_new_fanspeed)
-        Draw_Edit_Integer3(TUNE_CASE_FAN + MROWS - index_tune, _fanspeed);
+        drawEditInteger3(TUNE_CASE_FAN + MROWS - index_tune, _fanspeed);
     #endif
   }
   else if (checkkey == TemperatureID) {
     // Temperature page temperature update
     #if HAS_HOTEND
-      if (_new_hotend_target) Draw_Edit_Integer3(TEMP_CASE_TEMP, _hotendtarget);
+      if (_new_hotend_target) drawEditInteger3(TEMP_CASE_TEMP, _hotendtarget);
     #endif
     #if HAS_HEATED_BED
-      if (_new_bed_target) Draw_Edit_Integer3(TEMP_CASE_BED, _bedtarget);
+      if (_new_bed_target) drawEditInteger3(TEMP_CASE_BED, _bedtarget);
     #endif
     #if HAS_FAN
-      if (_new_fanspeed) Draw_Edit_Integer3(TEMP_CASE_FAN, _fanspeed);
+      if (_new_fanspeed) drawEditInteger3(TEMP_CASE_FAN, _fanspeed);
     #endif
   }
 
@@ -1710,34 +1710,34 @@ void update_variable() {
 
   #if HAS_HOTEND
     if (_new_hotend_temp)
-      Draw_Stat_Int(28, 384, _hotendtemp);
+      drawStatInt(28, 384, _hotendtemp);
     if (_new_hotend_target)
-      Draw_Stat_Int(25 + 4 * STAT_CHR_W + 6, 384, _hotendtarget);
+      drawStatInt(25 + 4 * STAT_CHR_W + 6, 384, _hotendtarget);
 
     static int16_t _flow = 0;
     if (_flow != planner.flow_percentage[0]) {
       _flow = planner.flow_percentage[0];
-      Draw_Stat_Int(116 + 2 * STAT_CHR_W, 417, _flow);
+      drawStatInt(116 + 2 * STAT_CHR_W, 417, _flow);
     }
   #endif
 
   #if HAS_HEATED_BED
     if (_new_bed_temp)
-      Draw_Stat_Int(28, 417, _bedtemp);
+      drawStatInt(28, 417, _bedtemp);
     if (_new_bed_target)
-      Draw_Stat_Int(25 + 4 * STAT_CHR_W + 6, 417, _bedtarget);
+      drawStatInt(25 + 4 * STAT_CHR_W + 6, 417, _bedtarget);
   #endif
 
   static int16_t _feedrate = 0;
   if (_feedrate != feedrate_percentage) {
     _feedrate = feedrate_percentage;
-    Draw_Stat_Int(116 + 2 * STAT_CHR_W, 384, _feedrate);
+    drawStatInt(116 + 2 * STAT_CHR_W, 384, _feedrate);
   }
 
   #if HAS_FAN
     if (_new_fanspeed) {
       _fanspeed = thermalManager.fan_speed[0];
-      Draw_Stat_Int(195 + 2 * STAT_CHR_W, 384, _fanspeed);
+      drawStatInt(195 + 2 * STAT_CHR_W, 384, _fanspeed);
     }
   #endif
 
@@ -1745,12 +1745,12 @@ void update_variable() {
   if (BABY_Z_VAR != _offset) {
     _offset = BABY_Z_VAR;
     if (BABY_Z_VAR < 0) {
-      Draw_Stat_Float(207, 417, -_offset);
-      DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
+      drawStatFloat(207, 417, -_offset);
+      dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
     }
     else {
-      Draw_Stat_Float(207, 417, _offset);
-      DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
+      drawStatFloat(207, 417, _offset);
+      dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
     }
   }
 
@@ -1765,10 +1765,6 @@ void update_variable() {
  * cache files here.
  */
 
-#ifndef strcasecmp_P
-  #define strcasecmp_P(a, b) strcasecmp((a), (b))
-#endif
-
 void make_name_without_ext(char *dst, char *src, size_t maxlen=MENU_CHAR_LIMIT) {
   char * const name = card.longest_filename();
   size_t pos        = strlen(name); // index of ending nul
@@ -1792,15 +1788,15 @@ void make_name_without_ext(char *dst, char *src, size_t maxlen=MENU_CHAR_LIMIT)
   while (pos--) dst[pos] = src[pos];
 }
 
-void HMI_SDCardInit() { card.cdroot(); }
+void hmiSDCardInit() { card.cdroot(); }
 
 // Initialize or re-initialize the LCD
-void MarlinUI::init_lcd() { DWIN_Startup(); }
+void MarlinUI::init_lcd() { dwinStartup(); }
 
 void MarlinUI::refresh() { /* Nothing to see here */ }
 
 #if HAS_LCD_BRIGHTNESS
-  void MarlinUI::_set_brightness() { DWIN_LCD_Brightness(backlight ? brightness : 0); }
+  void MarlinUI::_set_brightness() { dwinLCDBrightness(backlight ? brightness : 0); }
 #endif
 
 #if ENABLED(SCROLL_LONG_FILENAMES)
@@ -1810,7 +1806,7 @@ void MarlinUI::refresh() { /* Nothing to see here */ }
   millis_t shift_ms; // = 0
 
   // Init the shift name based on the highlighted item
-  void Init_Shift_Name() {
+  void initShiftName() {
     const bool is_subdir = !card.flag.workDirIsRoot;
     const int8_t filenum = select_file.now - 1 - is_subdir; // Skip "Back" and ".."
     const int16_t fileCnt = card.get_num_items();
@@ -1821,7 +1817,7 @@ void MarlinUI::refresh() { /* Nothing to see here */ }
     }
   }
 
-  void Init_SDItem_Shift() {
+  void initSDItemShift() {
     shift_amt = 0;
     shift_ms  = select_file.now != CASE_BACK && strlen(shift_name) > MENU_CHAR_LIMIT
            ? millis() + 750UL : 0;
@@ -1832,11 +1828,11 @@ void MarlinUI::refresh() { /* Nothing to see here */ }
 /**
  * Display an SD item, adding a CDUP for subfolders.
  */
-void Draw_SDItem(const uint16_t item, int16_t row=-1) {
+void drawSDItem(const uint16_t item, int16_t row=-1) {
   if (row < 0) row = item + 1 + MROWS - index_file;
   const bool is_subdir = !card.flag.workDirIsRoot;
   if (is_subdir && item == 0) {
-    Draw_Menu_Line(row, ICON_Folder, F(".."));
+    drawMenuLine(row, ICON_Folder, F(".."));
     return;
   }
 
@@ -1848,19 +1844,19 @@ void Draw_SDItem(const uint16_t item, int16_t row=-1) {
     // This is used during scroll drawing
     if (item == select_file.now - 1) {
       make_name_without_ext(shift_name, name, 100);
-      Init_SDItem_Shift();
+      initSDItemShift();
     }
   #endif
 
   // Draw the file/folder with name aligned left
   char str[strlen(name) + 1];
   make_name_without_ext(str, name);
-  Draw_Menu_Line(row, card.flag.filenameIsDir ? ICON_Folder : ICON_File, str);
+  drawMenuLine(row, card.flag.filenameIsDir ? ICON_Folder : ICON_File, str);
 }
 
 #if ENABLED(SCROLL_LONG_FILENAMES)
 
-  void Draw_SDItem_Shifted(uint8_t &shift) {
+  void drawSDItemShifted(uint8_t &shift) {
     // Limit to the number of chars past the cutoff
     const size_t len = strlen(shift_name);
     NOMORE(shift, _MAX(len - MENU_CHAR_LIMIT, 0U));
@@ -1872,8 +1868,8 @@ void Draw_SDItem(const uint16_t item, int16_t row=-1) {
     shift_name[lastchar] = '\0';
 
     const uint8_t row = select_file.now + MROWS - index_file; // skip "Back" and scroll
-    Erase_Menu_Text(row);
-    Draw_Menu_Line(row, 0, &shift_name[shift]);
+    eraseMenuText(row);
+    drawMenuLine(row, 0, &shift_name[shift]);
 
     shift_name[lastchar] = c;
   }
@@ -1881,57 +1877,57 @@ void Draw_SDItem(const uint16_t item, int16_t row=-1) {
 #endif
 
 // Redraw the first set of SD Files
-void Redraw_SD_List() {
+void redrawSDList() {
   select_file.reset();
   index_file = MROWS;
 
-  Clear_Menu_Area(); // Leave title bar unchanged
+  clearMenuArea(); // Leave title bar unchanged
 
-  Draw_Back_First();
+  drawBackFirst();
 
   if (card.isMounted()) {
     // As many files as will fit
     for (uint8_t i = 0; i < _MIN(nr_sd_menu_items(), MROWS); ++i)
-      Draw_SDItem(i, i + 1);
+      drawSDItem(i, i + 1);
 
-    TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());
+    TERN_(SCROLL_LONG_FILENAMES, initSDItemShift());
   }
   else {
-    DWIN_Draw_Rectangle(1, Color_Bg_Red, 10, MBASE(3) - 10, DWIN_WIDTH - 10, MBASE(4));
-    DWIN_Draw_String(false, font16x32, Color_Yellow, Color_Bg_Red, ((DWIN_WIDTH) - 8 * 16) / 2, MBASE(3), F("No Media"));
+    dwinDrawRectangle(1, Color_Bg_Red, 10, MBASE(3) - 10, DWIN_WIDTH - 10, MBASE(4));
+    dwinDrawString(false, font16x32, Color_Yellow, Color_Bg_Red, ((DWIN_WIDTH) - 8 * 16) / 2, MBASE(3), F("No Media"));
   }
 }
 
 bool DWIN_lcd_sd_status = false;
 
-void SDCard_Up() {
+void sdCardUp() {
   card.cdup();
-  Redraw_SD_List();
+  redrawSDList();
   DWIN_lcd_sd_status = false; // On next DWIN_Update
 }
 
-void SDCard_Folder(char * const dirname) {
+void sdCardFolder(char * const dirname) {
   card.cd(dirname);
-  Redraw_SD_List();
+  redrawSDList();
   DWIN_lcd_sd_status = false; // On next DWIN_Update
 }
 
 //
 // Watch for media mount / unmount
 //
-void HMI_SDCardUpdate() {
-  if (HMI_flag.home_flag) return;
+void hmiSDCardUpdate() {
+  if (hmiFlag.home_flag) return;
   if (DWIN_lcd_sd_status != card.isMounted()) {
     DWIN_lcd_sd_status = card.isMounted();
     //SERIAL_ECHOLNPGM("HMI_SDCardUpdate: ", DWIN_lcd_sd_status);
     if (DWIN_lcd_sd_status) {
       if (checkkey == SelectFile)
-        Redraw_SD_List();
+        redrawSDList();
     }
     else {
       // clean file icon
       if (checkkey == SelectFile) {
-        Redraw_SD_List();
+        redrawSDList();
       }
       else if (checkkey == PrintProcess || checkkey == Tune || printingIsActive()) {
         // TODO: Move card removed abort handling
@@ -1941,7 +1937,7 @@ void HMI_SDCardUpdate() {
         dwin_abort_flag = true; // Reset feedrate, return to Home
       }
     }
-    DWIN_UpdateLCD();
+    dwinUpdateLCD();
   }
 }
 
@@ -1949,139 +1945,139 @@ void HMI_SDCardUpdate() {
 // The status area is always on-screen, except during
 // full-screen modal dialogs. (TODO: Keep alive during dialogs)
 //
-void Draw_Status_Area(const bool with_update) {
+void drawStatusArea(const bool with_update) {
 
-  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, STATUS_Y, DWIN_WIDTH, DWIN_HEIGHT - 1);
+  dwinDrawRectangle(1, Color_Bg_Black, 0, STATUS_Y, DWIN_WIDTH, DWIN_HEIGHT - 1);
 
   #if HAS_HOTEND
-    DWIN_ICON_Show(ICON, ICON_HotendTemp, 10, 383);
-    Draw_Stat_Int(28, 384, thermalManager.wholeDegHotend(0));
-    DWIN_Draw_String(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 384, F("/"));
-    Draw_Stat_Int(25 + 4 * STAT_CHR_W + 6, 384, thermalManager.degTargetHotend(0));
-
-    DWIN_ICON_Show(ICON, ICON_StepE, 112, 417);
-    Draw_Stat_Int(116 + 2 * STAT_CHR_W, 417, planner.flow_percentage[0]);
-    DWIN_Draw_String(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 417, F("%"));
+    dwinIconShow(ICON, ICON_HotendTemp, 10, 383);
+    drawStatInt(28, 384, thermalManager.wholeDegHotend(0));
+    dwinDrawString(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 384, F("/"));
+    drawStatInt(25 + 4 * STAT_CHR_W + 6, 384, thermalManager.degTargetHotend(0));
+
+    dwinIconShow(ICON, ICON_StepE, 112, 417);
+    drawStatInt(116 + 2 * STAT_CHR_W, 417, planner.flow_percentage[0]);
+    dwinDrawString(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 417, F("%"));
   #endif
 
   #if HAS_HEATED_BED
-    DWIN_ICON_Show(ICON, ICON_BedTemp, 10, 416);
-    Draw_Stat_Int(28, 417, thermalManager.wholeDegBed());
-    DWIN_Draw_String(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 417, F("/"));
-    Draw_Stat_Int(25 + 4 * STAT_CHR_W + 6, 417, thermalManager.degTargetBed());
+    dwinIconShow(ICON, ICON_BedTemp, 10, 416);
+    drawStatInt(28, 417, thermalManager.wholeDegBed());
+    dwinDrawString(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 417, F("/"));
+    drawStatInt(25 + 4 * STAT_CHR_W + 6, 417, thermalManager.degTargetBed());
   #endif
 
-  DWIN_ICON_Show(ICON, ICON_Speed, 113, 383);
-  Draw_Stat_Int(116 + 2 * STAT_CHR_W, 384, feedrate_percentage);
-  DWIN_Draw_String(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 384, F("%"));
+  dwinIconShow(ICON, ICON_Speed, 113, 383);
+  drawStatInt(116 + 2 * STAT_CHR_W, 384, feedrate_percentage);
+  dwinDrawString(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 384, F("%"));
 
   #if HAS_FAN
-    DWIN_ICON_Show(ICON, ICON_FanSpeed, 187, 383);
-    Draw_Stat_Int(195 + 2 * STAT_CHR_W, 384, thermalManager.fan_speed[0]);
+    dwinIconShow(ICON, ICON_FanSpeed, 187, 383);
+    drawStatInt(195 + 2 * STAT_CHR_W, 384, thermalManager.fan_speed[0]);
   #endif
 
   #if HAS_ZOFFSET_ITEM
-    DWIN_ICON_Show(ICON, ICON_Zoffset, 187, 416);
+    dwinIconShow(ICON, ICON_Zoffset, 187, 416);
   #endif
 
   if (BABY_Z_VAR < 0) {
-    Draw_Stat_Float(207, 417, -BABY_Z_VAR * 100);
-    DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
+    drawStatFloat(207, 417, -BABY_Z_VAR * 100);
+    dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
   }
   else {
-    Draw_Stat_Float(207, 417, BABY_Z_VAR * 100);
-    DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
+    drawStatFloat(207, 417, BABY_Z_VAR * 100);
+    dwinDrawString(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
   }
 
-  DWIN_Draw_Rectangle(1, Line_Color, 0, 449, DWIN_WIDTH, 451);
+  dwinDrawRectangle(1, Line_Color, 0, 449, DWIN_WIDTH, 451);
 
-  DWIN_ICON_Show(ICON, ICON_MaxSpeedX,  10, 456);
-  DWIN_ICON_Show(ICON, ICON_MaxSpeedY,  95, 456);
-  DWIN_ICON_Show(ICON, ICON_MaxSpeedZ, 180, 456);
+  dwinIconShow(ICON, ICON_MaxSpeedX,  10, 456);
+  dwinIconShow(ICON, ICON_MaxSpeedY,  95, 456);
+  dwinIconShow(ICON, ICON_MaxSpeedZ, 180, 456);
   _draw_xyz_position(true);
 
   if (with_update) {
-    DWIN_UpdateLCD();
+    dwinUpdateLCD();
     delay(5);
   }
 }
 
-void HMI_StartFrame(const bool with_update) {
-  Goto_MainMenu();
-  Draw_Status_Area(with_update);
+void hmiStartFrame(const bool with_update) {
+  gotoMainMenu();
+  drawStatusArea(with_update);
 }
 
-void Draw_Info_Menu() {
-  Clear_Main_Window();
+void drawInfoMenu() {
+  clearMainWindow();
 
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(MACHINE_SIZE) * MENU_CHR_W) / 2, 122, F(MACHINE_SIZE));
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, F(SHORT_BUILD_VERSION));
+  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(MACHINE_SIZE) * MENU_CHR_W) / 2, 122, F(MACHINE_SIZE));
+  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, F(SHORT_BUILD_VERSION));
 
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(30, 17, 28, 13);                   // "Info"
+  if (hmiIsChinese()) {
+    dwinFrameTitleCopy(30, 17, 28, 13);                   // "Info"
 
-    DWIN_Frame_AreaCopy(1, 197, 149, 252, 161, 108, 102);   // "Size"
-    DWIN_Frame_AreaCopy(1,   1, 164,  56, 176, 108, 175);   // "Firmware Version"
-    DWIN_Frame_AreaCopy(1,  58, 164, 113, 176, 105, 248);   // "Contact Details"
+    dwinFrameAreaCopy(1, 197, 149, 252, 161, 108, 102);   // "Size"
+    dwinFrameAreaCopy(1,   1, 164,  56, 176, 108, 175);   // "Firmware Version"
+    dwinFrameAreaCopy(1,  58, 164, 113, 176, 105, 248);   // "Contact Details"
   }
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_INFO_SCREEN));
+      drawTitle(GET_TEXT_F(MSG_INFO_SCREEN));
     #else
-      DWIN_Frame_TitleCopy(192, 15, 23, 12);                // "Info"
+      dwinFrameTitleCopy(192, 15, 23, 12);                // "Info"
     #endif
 
-    DWIN_Frame_AreaCopy(1, 120, 150, 146, 161, 124, 102);   // "Size"
-    DWIN_Frame_AreaCopy(1, 146, 151, 254, 161,  82, 175);   // "Firmware Version"
-    DWIN_Frame_AreaCopy(1,   1, 164,  96, 175,  89, 248);   // "Contact details"
+    dwinFrameAreaCopy(1, 120, 150, 146, 161, 124, 102);   // "Size"
+    dwinFrameAreaCopy(1, 146, 151, 254, 161,  82, 175);   // "Firmware Version"
+    dwinFrameAreaCopy(1,   1, 164,  96, 175,  89, 248);   // "Contact details"
   }
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE));
+  dwinDrawString(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE));
 
-  Draw_Back_First();
+  drawBackFirst();
   for (uint8_t i = 0; i < 3; ++i) {
-    DWIN_ICON_Show(ICON, ICON_PrintSize + i, 26, 99 + i * 73);
-    DWIN_Draw_Line(Line_Color, 16, MBASE(2) + i * 73, 256, 156 + i * 73);
+    dwinIconShow(ICON, ICON_PrintSize + i, 26, 99 + i * 73);
+    dwinDrawLine(Line_Color, 16, MBASE(2) + i * 73, 256, 156 + i * 73);
   }
 }
 
-void Draw_Print_File_Menu() {
-  Clear_Title_Bar();
+void drawPrintFileMenu() {
+  clearTitleBar();
 
-  if (HMI_IsChinese())
-    DWIN_Frame_TitleCopy(0, 31, 56, 14);  // "Print file"
+  if (hmiIsChinese())
+    dwinFrameTitleCopy(0, 31, 56, 14);  // "Print file"
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_MEDIA_MENU));
+      drawTitle(GET_TEXT_F(MSG_MEDIA_MENU));
     #else
-      DWIN_Frame_TitleCopy(52, 31, 86, 11); // "Print file"
+      dwinFrameTitleCopy(52, 31, 86, 11); // "Print file"
     #endif
   }
 
-  Redraw_SD_List();
+  redrawSDList();
 }
 
 // Main Process
-void HMI_MainMenu() {
+void hmiMainMenu() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   if (encoder_diffState == ENCODER_DIFF_CW) {
     if (select_page.inc(4)) {
       switch (select_page.now) {
-        case PAGE_PRINT: ICON_Print(); break;
-        case PAGE_PREPARE: ICON_Print(); ICON_Prepare(); break;
-        case PAGE_CONTROL: ICON_Prepare(); ICON_Control(); break;
-        case PAGE_INFO_LEVELING: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(); break;
+        case PAGE_PRINT: iconPrint(); break;
+        case PAGE_PREPARE: iconPrint(); iconPrepare(); break;
+        case PAGE_CONTROL: iconPrepare(); iconControl(); break;
+        case PAGE_INFO_LEVELING: iconControl(); TERN(HAS_ONESTEP_LEVELING, iconLeveling, iconStartInfo)(); break;
       }
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
     if (select_page.dec()) {
       switch (select_page.now) {
-        case PAGE_PRINT: ICON_Print(); ICON_Prepare(); break;
-        case PAGE_PREPARE: ICON_Prepare(); ICON_Control(); break;
-        case PAGE_CONTROL: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(); break;
-        case PAGE_INFO_LEVELING: TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(); break;
+        case PAGE_PRINT: iconPrint(); iconPrepare(); break;
+        case PAGE_PREPARE: iconPrepare(); iconControl(); break;
+        case PAGE_CONTROL: iconControl(); TERN(HAS_ONESTEP_LEVELING, iconLeveling, iconStartInfo)(); break;
+        case PAGE_INFO_LEVELING: TERN(HAS_ONESTEP_LEVELING, iconLeveling, iconStartInfo)(); break;
       }
     }
   }
@@ -2089,39 +2085,39 @@ void HMI_MainMenu() {
     switch (select_page.now) {
       case PAGE_PRINT:
         checkkey = SelectFile;
-        Draw_Print_File_Menu();
+        drawPrintFileMenu();
         break;
 
       case PAGE_PREPARE:
         checkkey = Prepare;
         select_prepare.reset();
         index_prepare = MROWS;
-        Draw_Prepare_Menu();
+        drawPrepareMenu();
         break;
 
       case PAGE_CONTROL:
         checkkey = Control;
         select_control.reset();
         index_control = MROWS;
-        Draw_Control_Menu();
+        drawControlMenu();
         break;
 
       case PAGE_INFO_LEVELING:
         #if HAS_ONESTEP_LEVELING
           checkkey = Leveling;
-          HMI_Leveling();
+          hmiLeveling();
         #else
           checkkey = Info;
-          Draw_Info_Menu();
+          drawInfoMenu();
         #endif
         break;
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
 // Select (and Print) File
-void HMI_SelectFile() {
+void hmiSelectFile() {
   EncoderState encoder_diffState = get_encoder_state();
 
   const uint16_t hasUpDir = !card.flag.workDirIsRoot;
@@ -2134,8 +2130,8 @@ void HMI_SelectFile() {
         if (ELAPSED(ms, shift_ms)) {
           const bool was_reset = shift_amt < 0;
           shift_ms = ms + 375UL + was_reset * 250UL;  // ms per character
-          uint8_t shift_new = shift_amt + 1;           // Try to shift by...
-          Draw_SDItem_Shifted(shift_new);             // Draw the item
+          uint8_t shift_new = shift_amt + 1;          // Try to shift by...
+          drawSDItemShifted(shift_new);               // Draw the item
           if (!was_reset && shift_new == 0)           // Was it limited to 0?
             shift_ms = 0;                             // No scrolling needed
           else if (shift_new == shift_amt)            // Scroll reached the end
@@ -2156,52 +2152,52 @@ void HMI_SelectFile() {
     if (select_file.inc(1 + fullCnt)) {
       const uint8_t itemnum = select_file.now - 1;              // -1 for "Back"
       if (TERN0(SCROLL_LONG_FILENAMES, shift_ms)) {             // If line was shifted
-        Erase_Menu_Text(itemnum + MROWS - index_file);          // Erase and
-        Draw_SDItem(itemnum - 1);                               // redraw
+        eraseMenuText(itemnum + MROWS - index_file);            // Erase and
+        drawSDItem(itemnum - 1);                                // redraw
       }
       if (select_file.now > MROWS && select_file.now > index_file) { // Cursor past the bottom
         index_file = select_file.now;                           // New bottom line
-        Scroll_Menu(DWIN_SCROLL_UP);
-        Draw_SDItem(itemnum, MROWS);                            // Draw and init the shift name
+        scrollMenu(DWIN_SCROLL_UP);
+        drawSDItem(itemnum, MROWS);                             // Draw and init the shift name
       }
       else {
-        Move_Highlight(1, select_file.now + MROWS - index_file); // Just move highlight
-        TERN_(SCROLL_LONG_FILENAMES, Init_Shift_Name());         // ...and init the shift name
+        moveHighlight(1, select_file.now + MROWS - index_file); // Just move highlight
+        TERN_(SCROLL_LONG_FILENAMES, initShiftName());          // ...and init the shift name
       }
-      TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());
+      TERN_(SCROLL_LONG_FILENAMES, initSDItemShift());
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW && fullCnt) {
     if (select_file.dec()) {
       const uint8_t itemnum = select_file.now - 1;              // -1 for "Back"
       if (TERN0(SCROLL_LONG_FILENAMES, shift_ms)) {             // If line was shifted
-        Erase_Menu_Text(select_file.now + 1 + MROWS - index_file); // Erase and
-        Draw_SDItem(itemnum + 1);                               // redraw
+        eraseMenuText(select_file.now + 1 + MROWS - index_file); // Erase and
+        drawSDItem(itemnum + 1);                                // redraw
       }
       if (select_file.now < index_file - MROWS) {               // Cursor past the top
         index_file--;                                           // New bottom line
-        Scroll_Menu(DWIN_SCROLL_DOWN);
+        scrollMenu(DWIN_SCROLL_DOWN);
         if (index_file == MROWS) {
-          Draw_Back_First();
+          drawBackFirst();
           TERN_(SCROLL_LONG_FILENAMES, shift_ms = 0);
         }
         else
-          Draw_SDItem(itemnum, 0);                              // Draw the item (and init shift name)
+          drawSDItem(itemnum, 0);                               // Draw the item (and init shift name)
       }
       else {
-        Move_Highlight(-1, select_file.now + MROWS - index_file); // Just move highlight
-        TERN_(SCROLL_LONG_FILENAMES, Init_Shift_Name());        // ...and init the shift name
+        moveHighlight(-1, select_file.now + MROWS - index_file); // Just move highlight
+        TERN_(SCROLL_LONG_FILENAMES, initShiftName());          // ...and init the shift name
       }
-      TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());        // Reset left. Init timer.
+      TERN_(SCROLL_LONG_FILENAMES, initSDItemShift());        // Reset left. Init timer.
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (select_file.now == CASE_BACK) { // Back
       select_page.set(0);
-      Goto_MainMenu();
+      gotoMainMenu();
     }
     else if (hasUpDir && select_file.now == 1) { // CD-Up
-      SDCard_Up();
+      sdCardUp();
       goto HMI_SelectFileExit;
     }
     else {
@@ -2210,7 +2206,7 @@ void HMI_SelectFile() {
 
       // Enter that folder!
       if (card.flag.filenameIsDir) {
-        SDCard_Folder(card.filename);
+        sdCardFolder(card.filename);
         goto HMI_SelectFileExit;
       }
 
@@ -2219,9 +2215,9 @@ void HMI_SelectFile() {
       select_file.reset();
 
       // Start choice and print SD file
-      HMI_flag.heat_flag = true;
-      HMI_flag.print_finish = false;
-      HMI_ValueStruct.show_mode = 0;
+      hmiFlag.heat_flag = true;
+      hmiFlag.print_finish = false;
+      hmiValues.show_mode = 0;
 
       card.openAndPrintFile(card.filename);
 
@@ -2234,22 +2230,22 @@ void HMI_SelectFile() {
 
       _card_percent = 0;
       _remain_time = 0;
-      Goto_PrintProcess();
+      gotoPrintProcess();
     }
   }
 
   HMI_SelectFileExit:
-    DWIN_UpdateLCD();
+    dwinUpdateLCD();
 }
 
 // Printing
-void HMI_Printing() {
+void hmiPrinting() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
-  if (HMI_flag.done_confirm_flag) {
+  if (hmiFlag.done_confirm_flag) {
     if (encoder_diffState == ENCODER_DIFF_ENTER) {
-      HMI_flag.done_confirm_flag = false;
+      hmiFlag.done_confirm_flag = false;
       dwin_abort_flag = true; // Reset feedrate, return to Home
     }
     return;
@@ -2259,18 +2255,18 @@ void HMI_Printing() {
   if (encoder_diffState == ENCODER_DIFF_CW) {
     if (select_print.inc(3)) {
       switch (select_print.now) {
-        case PRINT_SETUP: ICON_Tune(); break;
-        case PRINT_PAUSE_RESUME: ICON_Tune(); ICON_ResumeOrPause(); break;
-        case PRINT_STOP: ICON_ResumeOrPause(); ICON_Stop(); break;
+        case PRINT_SETUP: iconTune(); break;
+        case PRINT_PAUSE_RESUME: iconTune(); iconResumeOrPause(); break;
+        case PRINT_STOP: iconResumeOrPause(); iconStop(); break;
       }
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
     if (select_print.dec()) {
       switch (select_print.now) {
-        case PRINT_SETUP: ICON_Tune(); ICON_ResumeOrPause(); break;
-        case PRINT_PAUSE_RESUME: ICON_ResumeOrPause(); ICON_Stop(); break;
-        case PRINT_STOP: ICON_Stop(); break;
+        case PRINT_SETUP: iconTune(); iconResumeOrPause(); break;
+        case PRINT_PAUSE_RESUME: iconResumeOrPause(); iconStop(); break;
+        case PRINT_STOP: iconStop(); break;
       }
     }
   }
@@ -2278,15 +2274,15 @@ void HMI_Printing() {
     switch (select_print.now) {
       case PRINT_SETUP:
         checkkey = Tune;
-        HMI_ValueStruct.show_mode = 0;
+        hmiValues.show_mode = 0;
         select_tune.reset();
         index_tune = MROWS;
-        Draw_Tune_Menu();
+        drawTuneMenu();
         break;
 
       case PRINT_PAUSE_RESUME:
-        if (HMI_flag.pause_flag) {
-          ICON_Pause();
+        if (hmiFlag.pause_flag) {
+          iconPause();
 
           char cmd[40];
           cmd[0] = '\0';
@@ -2302,181 +2298,181 @@ void HMI_Printing() {
           queue.inject(cmd);
         }
         else {
-          HMI_flag.select_flag = true;
+          hmiFlag.select_flag = true;
           checkkey = Print_window;
-          Popup_window_PauseOrStop();
+          popupwindowPauseOrStop();
         }
         break;
 
       case PRINT_STOP:
-        HMI_flag.select_flag = true;
+        hmiFlag.select_flag = true;
         checkkey = Print_window;
-        Popup_window_PauseOrStop();
+        popupwindowPauseOrStop();
         break;
 
       default: break;
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
 // Pause and Stop window
-void HMI_PauseOrStop() {
+void hmiPauseOrStop() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   if (encoder_diffState == ENCODER_DIFF_CW)
-    Draw_Select_Highlight(false);
+    drawSelectHighlight(false);
   else if (encoder_diffState == ENCODER_DIFF_CCW)
-    Draw_Select_Highlight(true);
+    drawSelectHighlight(true);
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (select_print.now == PRINT_PAUSE_RESUME) {
-      if (HMI_flag.select_flag) {
-        HMI_flag.pause_action = true;
+      if (hmiFlag.select_flag) {
+        hmiFlag.pause_action = true;
         queue.inject(F("M25"));
       }
-      Goto_PrintProcess();
+      gotoPrintProcess();
     }
     else if (select_print.now == PRINT_STOP) {
-      if (HMI_flag.select_flag) {
+      if (hmiFlag.select_flag) {
         checkkey = Back_Main;
-        wait_for_heatup = wait_for_user = false;       // Stop waiting for heating/user
-        card.abortFilePrintSoon();                     // Let the main loop handle SD abort
-        dwin_abort_flag = true;                        // Reset feedrate, return to Home
+        wait_for_heatup = wait_for_user = false;      // Stop waiting for heating/user
+        card.abortFilePrintSoon();                    // Let the main loop handle SD abort
+        dwin_abort_flag = true;                       // Reset feedrate, return to Home
         #ifdef ACTION_ON_CANCEL
           hostui.cancel();
         #endif
-        Popup_Window_Home(true);
-        if (HMI_flag.home_flag) planner.synchronize(); // Wait for planner moves to finish!
+        popupWindowHome(true);
+        if (hmiFlag.home_flag) planner.synchronize(); // Wait for planner moves to finish!
       }
       else
-        Goto_PrintProcess(); // cancel stop
+        gotoPrintProcess(); // cancel stop
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
-void Draw_Move_Menu() {
-  Clear_Main_Window();
+void drawMoveMenu() {
+  clearMainWindow();
 
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(192, 1, 42, 14); // "Move"
-    Item_AreaCopy(58, 118, 106, 132, 1);
-    Item_AreaCopy(109, 118, 157, 132, 2);
-    Item_AreaCopy(160, 118, 209, 132, 3);
-    TERN_(HAS_HOTEND, Item_AreaCopy(212, 118, 253, 131, 4));
+  if (hmiIsChinese()) {
+    dwinFrameTitleCopy(192, 1, 42, 14); // "Move"
+    itemAreaCopy(58, 118, 106, 132, 1);
+    itemAreaCopy(109, 118, 157, 132, 2);
+    itemAreaCopy(160, 118, 209, 132, 3);
+    TERN_(HAS_HOTEND, itemAreaCopy(212, 118, 253, 131, 4));
   }
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_MOVE_AXIS));
+      drawTitle(GET_TEXT_F(MSG_MOVE_AXIS));
     #else
-      DWIN_Frame_TitleCopy(231, 2, 35, 11);   // "Move"
+      dwinFrameTitleCopy(231, 2, 35, 11);   // "Move"
     #endif
 
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(1, GET_TEXT_F(MSG_MOVE_X));
-      DWIN_Draw_Label(2, GET_TEXT_F(MSG_MOVE_Y));
-      DWIN_Draw_Label(3, GET_TEXT_F(MSG_MOVE_Z));
-      TERN_(HAS_HOTEND, DWIN_Draw_Label(4, GET_TEXT_F(MSG_MOVE_E)));
+      dwinDrawLabel(1, GET_TEXT_F(MSG_MOVE_X));
+      dwinDrawLabel(2, GET_TEXT_F(MSG_MOVE_Y));
+      dwinDrawLabel(3, GET_TEXT_F(MSG_MOVE_Z));
+      TERN_(HAS_HOTEND, dwinDrawLabel(4, GET_TEXT_F(MSG_MOVE_E)));
     #else
       say_move_en(1); say_x_en(38, 1); // "Move X"
       say_move_en(2); say_y_en(38, 2); // "Move Y"
       say_move_en(3); say_z_en(38, 3); // "Move Z"
-      TERN_(HAS_HOTEND, (say_move_en(4), Item_AreaCopy(99, 194, 151, 204, 4, 38))); // "Move Extruder"
+      TERN_(HAS_HOTEND, (say_move_en(4), itemAreaCopy(99, 194, 151, 204, 4, 38))); // "Move Extruder"
     #endif
   }
 
-  Draw_Back_First(select_axis.now == CASE_BACK);
-  if (select_axis.now != CASE_BACK) Draw_Menu_Cursor(select_axis.now);
+  drawBackFirst(select_axis.now == CASE_BACK);
+  if (select_axis.now != CASE_BACK) drawMenuCursor(select_axis.now);
 
   // Draw separators and icons
-  for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) Draw_Menu_Line(i + 1, ICON_MoveX + i);
+  for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) drawMenuLine(i + 1, ICON_MoveX + i);
 }
 
-void Item_Adv_HomeOffsets(const uint8_t row) {
-  if (false && HMI_IsChinese()) {
+void itemAdvHomeOffsets(const uint8_t row) {
+  if (false && hmiIsChinese()) {
     // TODO: Chinese "Set Home Offsets"
   }
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(row, GET_TEXT_F(MSG_SET_HOME_OFFSETS));
+      dwinDrawLabel(row, GET_TEXT_F(MSG_SET_HOME_OFFSETS));
     #else
-      Item_AreaCopy(1,  76, 102,  87, row); // "Set Home Offsets"
+      itemAreaCopy(1,  76, 102,  87, row); // "Set Home Offsets"
     #endif
   }
-  Draw_Menu_Line(row, ICON_HomeOffset);
-  Draw_More_Icon(row);
+  drawMenuLine(row, ICON_HomeOffset);
+  drawMoreIcon(row);
 }
 
 #if HAS_ONESTEP_LEVELING
 
-  void Item_Adv_ProbeOffsets(const uint8_t row) {
-    if (false && HMI_IsChinese()) {
+  void itemAdvProbeOffsets(const uint8_t row) {
+    if (false && hmiIsChinese()) {
       // TODO: Chinese "Probe Offsets"
     }
     else {
       #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(row, GET_TEXT_F(MSG_ZPROBE_OFFSETS));
+        dwinDrawLabel(row, GET_TEXT_F(MSG_ZPROBE_OFFSETS));
       #else
         say_probe_offs_en(row);
       #endif
     }
-    Draw_Menu_Line(row, ICON_ProbeOffset);
-    Draw_More_Icon(row);
+    drawMenuLine(row, ICON_ProbeOffset);
+    drawMoreIcon(row);
   }
 
 #endif
 
-void Item_Adv_HotendPID(const uint8_t row) {
-  if (false && HMI_IsChinese()) {
+void itemAdvHotendPID(const uint8_t row) {
+  if (false && hmiIsChinese()) {
     // TODO: Chinese "Hotend PID"
   }
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(row, F("Hotend PID"));
+      dwinDrawLabel(row, F("Hotend PID"));
     #else
-      Item_AreaCopy(96, 104, 167, 114, row); // "Hotend PID"
+      itemAreaCopy(96, 104, 167, 114, row); // "Hotend PID"
     #endif
   }
-  Draw_Menu_Line(row, ICON_PIDNozzle);
+  drawMenuLine(row, ICON_PIDNozzle);
 }
 
-void Item_Adv_BedPID(const uint8_t row) {
-  if (false && HMI_IsChinese()) {
+void itemAdvBedPID(const uint8_t row) {
+  if (false && hmiIsChinese()) {
     // TODO: Chinese "Bed PID"
   }
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(row, F("Bed PID"));
+      dwinDrawLabel(row, F("Bed PID"));
     #else
-      Item_AreaCopy(241, 104, 263, 115, row);     // "Bed"
-      Item_AreaCopy(145, 104, 167, 114, row, 27); // "PID"
+      itemAreaCopy(241, 104, 263, 115, row);     // "Bed"
+      itemAreaCopy(145, 104, 167, 114, row, 27); // "PID"
     #endif
   }
-  Draw_Menu_Line(row, ICON_PIDbed);
+  drawMenuLine(row, ICON_PIDbed);
 }
 
 #if ENABLED(POWER_LOSS_RECOVERY)
 
-  void Item_Adv_PLR(const uint8_t row) {
-    if (false && HMI_IsChinese()) {
+  void itemAdv_PLR(const uint8_t row) {
+    if (false && hmiIsChinese()) {
       // TODO: Chinese "Power-loss Recovery"
     }
     else {
       #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(row, GET_TEXT_F(MSG_ZPROBE_OFFSETS));
+        dwinDrawLabel(row, GET_TEXT_F(MSG_ZPROBE_OFFSETS));
       #else
-        Item_AreaCopy(1, 208, 137, 221, row);  // "Power-loss Recovery"
+        itemAreaCopy(1, 208, 137, 221, row);  // "Power-loss Recovery"
       #endif
     }
-    Draw_Menu_Line(row, ICON_Motion);
-    Draw_Checkbox_Line(row, recovery.enabled);
+    drawMenuLine(row, ICON_Motion);
+    drawCheckboxLine(row, recovery.enabled);
   }
 
 #endif
 
-void Draw_AdvancedSettings_Menu() {
-  Clear_Main_Window();
+void drawAdvancedSettingsMenu() {
+  clearMainWindow();
 
   #if ADVSET_CASE_TOTAL >= TROWS
     const int16_t scroll = MROWS - index_advset; // Scrolled-up lines
@@ -2486,128 +2482,128 @@ void Draw_AdvancedSettings_Menu() {
   #define ASCROL(L) (scroll + (L))
   #define AVISI(L) VISI(ADVSET_CASE_TOTAL, L, ASCROL(L))
 
-  if (false && HMI_IsChinese()) {
+  if (false && hmiIsChinese()) {
     // TODO: Chinese "Advanced Settings"
   }
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_ADVANCED_SETTINGS));
+      drawTitle(GET_TEXT_F(MSG_ADVANCED_SETTINGS));
     #else
-      DWIN_Frame_TitleCopy(93, 401, 126, 15); // "Advanced Settings"
+      dwinFrameTitleCopy(93, 401, 126, 15); // "Advanced Settings"
     #endif
   }
 
-  if (AVISI(0)) Draw_Back_First(select_advset.now == CASE_BACK);
-  if (AVISI(ADVSET_CASE_HOMEOFF)) Item_Adv_HomeOffsets(ASCROL(ADVSET_CASE_HOMEOFF));      // Set Home Offsets >
+  if (AVISI(0)) drawBackFirst(select_advset.now == CASE_BACK);
+  if (AVISI(ADVSET_CASE_HOMEOFF)) itemAdvHomeOffsets(ASCROL(ADVSET_CASE_HOMEOFF));      // Set Home Offsets >
   #if HAS_ONESTEP_LEVELING
-    if (AVISI(ADVSET_CASE_PROBEOFF)) Item_Adv_ProbeOffsets(ASCROL(ADVSET_CASE_PROBEOFF)); // Probe Offsets >
+    if (AVISI(ADVSET_CASE_PROBEOFF)) itemAdvProbeOffsets(ASCROL(ADVSET_CASE_PROBEOFF)); // Probe Offsets >
   #endif
-  if (AVISI(ADVSET_CASE_HEPID)) Item_Adv_HotendPID(ASCROL(ADVSET_CASE_HEPID));            // Nozzle PID
-  if (AVISI(ADVSET_CASE_BEDPID)) Item_Adv_BedPID(ASCROL(ADVSET_CASE_BEDPID));             // Bed PID
+  if (AVISI(ADVSET_CASE_HEPID)) itemAdvHotendPID(ASCROL(ADVSET_CASE_HEPID));            // Nozzle PID
+  if (AVISI(ADVSET_CASE_BEDPID)) itemAdvBedPID(ASCROL(ADVSET_CASE_BEDPID));             // Bed PID
   #if ENABLED(POWER_LOSS_RECOVERY)
-    if (AVISI(ADVSET_CASE_PWRLOSSR)) Item_Adv_PLR(ASCROL(ADVSET_CASE_PWRLOSSR));          // Power-loss recovery
+    if (AVISI(ADVSET_CASE_PWRLOSSR)) itemAdv_PLR(ASCROL(ADVSET_CASE_PWRLOSSR));          // Power-loss recovery
   #endif
-  if (select_advset.now != CASE_BACK) Draw_Menu_Cursor(ASCROL(select_advset.now));
+  if (select_advset.now != CASE_BACK) drawMenuCursor(ASCROL(select_advset.now));
 }
 
-void Item_HomeOffs_X(const uint8_t row) {
-  if (false && HMI_IsChinese()) {
+void itemHomeOffs_X(const uint8_t row) {
+  if (false && hmiIsChinese()) {
     // TODO: Chinese "Home Offset X"
   }
   else {
     #ifdef USE_STRING_TITLES
-      Draw_Menu_Line(row, ICON_HomeOffsetX, GET_TEXT_F(MSG_HOME_OFFSET_X));
+      drawMenuLine(row, ICON_HomeOffsetX, GET_TEXT_F(MSG_HOME_OFFSET_X));
     #else
       say_home_offs_en(row); say_x_en(75, row);   // "Home Offset X"
     #endif
   }
-  Draw_Menu_Line(row, ICON_HomeOffset);
-  Draw_Edit_Signed_Float3(row, HMI_ValueStruct.Home_OffX_scaled);
+  drawMenuLine(row, ICON_HomeOffset);
+  drawEditSignedFloat3(row, hmiValues.Home_OffX_scaled);
 }
 
-void Item_HomeOffs_Y(const uint8_t row) {
-  if (false && HMI_IsChinese()) {
+void itemHomeOffs_Y(const uint8_t row) {
+  if (false && hmiIsChinese()) {
     // TODO: Chinese "Home Offset Y"
   }
   else {
     #ifdef USE_STRING_TITLES
-      Draw_Menu_Line(row, ICON_HomeOffsetY, GET_TEXT_F(MSG_HOME_OFFSET_Y));
+      drawMenuLine(row, ICON_HomeOffsetY, GET_TEXT_F(MSG_HOME_OFFSET_Y));
     #else
       say_home_offs_en(row); say_y_en(75, row);   // "Home Offset X"
     #endif
   }
-  Draw_Menu_Line(row, ICON_HomeOffset);
-  Draw_Edit_Signed_Float3(row, HMI_ValueStruct.Home_OffY_scaled);
+  drawMenuLine(row, ICON_HomeOffset);
+  drawEditSignedFloat3(row, hmiValues.Home_OffY_scaled);
 }
 
-void Item_HomeOffs_Z(const uint8_t row) {
-  if (false && HMI_IsChinese()) {
+void itemHomeOffs_Z(const uint8_t row) {
+  if (false && hmiIsChinese()) {
     // TODO: Chinese "Home Offset Z"
   }
   else {
     #ifdef USE_STRING_TITLES
-      Draw_Menu_Line(row, ICON_HomeOffsetZ, GET_TEXT_F(MSG_HOME_OFFSET_Z));
+      drawMenuLine(row, ICON_HomeOffsetZ, GET_TEXT_F(MSG_HOME_OFFSET_Z));
     #else
       say_home_offs_en(row); say_z_en(75, row);   // "Home Offset Z"
     #endif
   }
-  Draw_Menu_Line(row, ICON_HomeOffset);
-  Draw_Edit_Signed_Float3(row, HMI_ValueStruct.Home_OffZ_scaled);
+  drawMenuLine(row, ICON_HomeOffset);
+  drawEditSignedFloat3(row, hmiValues.Home_OffZ_scaled);
 }
 
-void Draw_HomeOff_Menu() {
-  Clear_Main_Window();
-  if (false && HMI_IsChinese()) {
+void drawHomeOffMenu() {
+  clearMainWindow();
+  if (false && hmiIsChinese()) {
     // TODO: Chinese "Home Offsets"
   }
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_SET_HOME_OFFSETS));
+      drawTitle(GET_TEXT_F(MSG_SET_HOME_OFFSETS));
     #else
-      DWIN_Frame_TitleCopy(1, 401, 91, 12);         // "Home Offsets"
+      dwinFrameTitleCopy(1, 401, 91, 12);         // "Home Offsets"
     #endif
   }
-  Draw_Back_First(select_item.now == CASE_BACK);
-  Item_HomeOffs_X(1);                               // "Home Offset X"
-  Item_HomeOffs_Y(2);                               // "Home Offset Y"
-  Item_HomeOffs_Z(3);                               // "Home Offset Z"
-  if (select_item.now != CASE_BACK) Draw_Menu_Cursor(select_item.now);
+  drawBackFirst(select_item.now == CASE_BACK);
+  itemHomeOffs_X(1);                               // "Home Offset X"
+  itemHomeOffs_Y(2);                               // "Home Offset Y"
+  itemHomeOffs_Z(3);                               // "Home Offset Z"
+  if (select_item.now != CASE_BACK) drawMenuCursor(select_item.now);
 }
 
 #if HAS_ONESTEP_LEVELING
 
-  void Draw_ProbeOff_Menu() {
-    Clear_Main_Window();
-    Draw_Back_First(select_item.now == CASE_BACK);
-    if (false && HMI_IsChinese()) {
+  void drawProbeOffMenu() {
+    clearMainWindow();
+    drawBackFirst(select_item.now == CASE_BACK);
+    if (false && hmiIsChinese()) {
       // TODO: Chinese "Probe Offsets"
     }
     else {
       #ifdef USE_STRING_HEADINGS
-        Draw_Title(GET_TEXT_F(MSG_ZPROBE_OFFSETS));
+        drawTitle(GET_TEXT_F(MSG_ZPROBE_OFFSETS));
       #else
-        DWIN_Frame_TitleCopy(124, 431, 91, 12);                             // "Probe Offsets"
+        dwinFrameTitleCopy(124, 431, 91, 12);                             // "Probe Offsets"
       #endif
       #ifdef USE_STRING_TITLES
-        Draw_Menu_Line(1, ICON_ProbeOffsetX, GET_TEXT_F(MSG_ZPROBE_XOFFSET));  // Probe X Offset
-        Draw_Menu_Line(2, ICON_ProbeOffsetY, GET_TEXT_F(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
+        drawMenuLine(1, ICON_ProbeOffsetX, GET_TEXT_F(MSG_ZPROBE_XOFFSET));  // Probe X Offset
+        drawMenuLine(2, ICON_ProbeOffsetY, GET_TEXT_F(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
       #else
         say_probe_offs_en(1); say_x_en(75, 1);  // "Probe Offset X"
         say_probe_offs_en(2); say_y_en(75, 2);  // "Probe Offset Y"
       #endif
     }
 
-    Draw_Edit_Signed_Float3(1, HMI_ValueStruct.Probe_OffX_scaled);
-    Draw_Edit_Signed_Float3(2, HMI_ValueStruct.Probe_OffY_scaled);
+    drawEditSignedFloat3(1, hmiValues.Probe_OffX_scaled);
+    drawEditSignedFloat3(2, hmiValues.Probe_OffY_scaled);
 
-    if (select_item.now != CASE_BACK) Draw_Menu_Cursor(select_item.now);
+    if (select_item.now != CASE_BACK) drawMenuCursor(select_item.now);
   }
 
 #endif
 
 #include "../../../libs/buzzer.h"
 
-void HMI_AudioFeedback(const bool success=true) {
+void hmiAudioFeedback(const bool success=true) {
   if (success) {
     BUZZ(100, 659);
     BUZZ(10, 0);
@@ -2618,7 +2614,7 @@ void HMI_AudioFeedback(const bool success=true) {
 }
 
 // Prepare
-void HMI_Prepare() {
+void hmiPrepare() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
@@ -2629,22 +2625,22 @@ void HMI_Prepare() {
         index_prepare = select_prepare.now;
 
         // Scroll up and draw a blank bottom line
-        Scroll_Menu(DWIN_SCROLL_UP);
-        Draw_Menu_Icon(MROWS, ICON_Axis + select_prepare.now - 1);
+        scrollMenu(DWIN_SCROLL_UP);
+        drawMenuIcon(MROWS, ICON_Axis + select_prepare.now - 1);
 
         // Draw "More" icon for sub-menus
-        if (index_prepare < 7) Draw_More_Icon(MROWS - index_prepare + 1);
+        if (index_prepare < 7) drawMoreIcon(MROWS - index_prepare + 1);
 
         #if PREHEAT_COUNT > 1
-          if (index_prepare == PREPARE_CASE_ABS) Item_Prepare_ABS(MROWS);
+          if (index_prepare == PREPARE_CASE_ABS) itemPrepare_ABS(MROWS);
         #endif
         #if HAS_HOTEND || HAS_HEATED_BED
-          if (index_prepare == PREPARE_CASE_COOL) Item_Prepare_Cool(MROWS);
+          if (index_prepare == PREPARE_CASE_COOL) itemPrepareCool(MROWS);
         #endif
-        if (index_prepare == PREPARE_CASE_LANG) Item_Prepare_Lang(MROWS);
+        if (index_prepare == PREPARE_CASE_LANG) itemPrepareLang(MROWS);
       }
       else {
-        Move_Highlight(1, select_prepare.now + MROWS - index_prepare);
+        moveHighlight(1, select_prepare.now + MROWS - index_prepare);
       }
     }
   }
@@ -2652,21 +2648,21 @@ void HMI_Prepare() {
     if (select_prepare.dec()) {
       if (select_prepare.now < index_prepare - MROWS) {
         index_prepare--;
-        Scroll_Menu(DWIN_SCROLL_DOWN);
+        scrollMenu(DWIN_SCROLL_DOWN);
 
         if (index_prepare == MROWS)
-          Draw_Back_First();
+          drawBackFirst();
         else
-          Draw_Menu_Line(0, ICON_Axis + select_prepare.now - 1);
+          drawMenuLine(0, ICON_Axis + select_prepare.now - 1);
 
-        if (index_prepare < 7) Draw_More_Icon(MROWS - index_prepare + 1);
+        if (index_prepare < 7) drawMoreIcon(MROWS - index_prepare + 1);
 
-             if (index_prepare == 6) Item_Prepare_Move(0);
-        else if (index_prepare == 7) Item_Prepare_Disable(0);
-        else if (index_prepare == 8) Item_Prepare_Home(0);
+             if (index_prepare == 6) itemPrepareMove(0);
+        else if (index_prepare == 7) itemPrepareDisable(0);
+        else if (index_prepare == 8) itemPrepareHome(0);
       }
       else {
-        Move_Highlight(-1, select_prepare.now + MROWS - index_prepare);
+        moveHighlight(-1, select_prepare.now + MROWS - index_prepare);
       }
     }
   }
@@ -2674,19 +2670,19 @@ void HMI_Prepare() {
     switch (select_prepare.now) {
       case CASE_BACK:
         select_page.set(1);
-        Goto_MainMenu();
+        gotoMainMenu();
         break;
       case PREPARE_CASE_MOVE:
         checkkey = AxisMove;
         select_axis.reset();
-        Draw_Move_Menu();
+        drawMoveMenu();
 
-        Draw_Edit_Float3(1, current_position.x * MINUNITMULT);
-        Draw_Edit_Float3(2, current_position.y * MINUNITMULT);
-        Draw_Edit_Float3(3, current_position.z * MINUNITMULT);
+        drawEditFloat3(1, current_position.x * MINUNITMULT);
+        drawEditFloat3(2, current_position.y * MINUNITMULT);
+        drawEditFloat3(3, current_position.z * MINUNITMULT);
         #if HAS_HOTEND
-          HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
-          Draw_Edit_Signed_Float3(4, HMI_ValueStruct.Move_E_scaled);
+          hmiValues.Move_E_scaled = current_position.e * MINUNITMULT;
+          drawEditSignedFloat3(4, hmiValues.Move_E_scaled);
         #endif
         break;
 
@@ -2696,21 +2692,21 @@ void HMI_Prepare() {
         checkkey = Last_Prepare;
         index_prepare = MROWS;
         queue.inject_P(G28_STR); // G28 will set home_flag
-        Popup_Window_Home();
+        popupWindowHome();
         break;
 
       #if HAS_ZOFFSET_ITEM
         case PREPARE_CASE_ZOFF:
           #if ANY(HAS_BED_PROBE, BABYSTEPPING)
             checkkey = Homeoffset;
-            HMI_ValueStruct.show_mode = -4;
-            HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
-            Draw_Edit_Signed_Float2(PREPARE_CASE_ZOFF + MROWS - index_prepare, HMI_ValueStruct.offset_value, true);
-            EncoderRate.enabled = true;
+            hmiValues.show_mode = -4;
+            hmiValues.offset_value = BABY_Z_VAR * 100;
+            drawEditSignedFloat2(PREPARE_CASE_ZOFF + MROWS - index_prepare, hmiValues.offset_value, true);
+            encoderRate.enabled = true;
           #else
             // Apply workspace offset, making the current position 0,0,0
             queue.inject(F("G92X0Y0Z0"));
-            HMI_AudioFeedback();
+            hmiAudioFeedback();
           #endif
           break;
       #endif
@@ -2730,113 +2726,113 @@ void HMI_Prepare() {
       #endif
 
       case PREPARE_CASE_LANG:
-        HMI_ToggleLanguage();
-        Draw_Prepare_Menu();
+        hmiToggleLanguage();
+        drawPrepareMenu();
         break;
 
       default: break;
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
-void Draw_Temperature_Menu() {
-  Clear_Main_Window();
+void drawTemperatureMenu() {
+  clearMainWindow();
 
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(236, 2, 28, 12); // "Temperature"
+  if (hmiIsChinese()) {
+    dwinFrameTitleCopy(236, 2, 28, 12); // "Temperature"
     #if HAS_HOTEND
-      Item_AreaCopy(1, 134, 56, 146, TEMP_CASE_TEMP);
+      itemAreaCopy(1, 134, 56, 146, TEMP_CASE_TEMP);
     #endif
     #if HAS_HEATED_BED
-      Item_AreaCopy(58, 134, 113, 146, TEMP_CASE_BED);
+      itemAreaCopy(58, 134, 113, 146, TEMP_CASE_BED);
     #endif
     #if HAS_FAN
-      Item_AreaCopy(115, 134, 170, 146, TEMP_CASE_FAN);
+      itemAreaCopy(115, 134, 170, 146, TEMP_CASE_FAN);
     #endif
     #if HAS_PREHEAT
-      Item_AreaCopy(100, 89, 178, 101, TEMP_CASE_PLA);
+      itemAreaCopy(100, 89, 178, 101, TEMP_CASE_PLA);
       #if PREHEAT_COUNT > 1
-        Item_AreaCopy(180, 89, 260, 100, TEMP_CASE_ABS);
+        itemAreaCopy(180, 89, 260, 100, TEMP_CASE_ABS);
       #endif
     #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_TEMPERATURE));
+      drawTitle(GET_TEXT_F(MSG_TEMPERATURE));
     #else
-      DWIN_Frame_TitleCopy(56, 15, 85, 14);   // "Temperature"
+      dwinFrameTitleCopy(56, 15, 85, 14);   // "Temperature"
     #endif
     #ifdef USE_STRING_TITLES
       #if HAS_HOTEND
-        DWIN_Draw_Label(TEMP_CASE_TEMP, GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+        dwinDrawLabel(TEMP_CASE_TEMP, GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
       #endif
       #if HAS_HEATED_BED
-        DWIN_Draw_Label(TEMP_CASE_BED, GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+        dwinDrawLabel(TEMP_CASE_BED, GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
       #endif
       #if HAS_FAN
-        DWIN_Draw_Label(TEMP_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
+        dwinDrawLabel(TEMP_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
       #endif
       #if HAS_PREHEAT
-        DWIN_Draw_Label(TEMP_CASE_PLA, F(PREHEAT_1_LABEL " Preheat Settings"));
+        dwinDrawLabel(TEMP_CASE_PLA, F(PREHEAT_1_LABEL " Preheat Settings"));
         #if PREHEAT_COUNT > 1
-          DWIN_Draw_Label(TEMP_CASE_ABS, F(PREHEAT_2_LABEL " Preheat Settings"));
+          dwinDrawLabel(TEMP_CASE_ABS, F(PREHEAT_2_LABEL " Preheat Settings"));
         #endif
       #endif
     #else
       #if HAS_HOTEND
-        Item_AreaCopy(197, 104, 238, 114, TEMP_CASE_TEMP);      // "Nozzle"
-        Item_AreaCopy(1,  89,  83, 101, TEMP_CASE_TEMP, 44);    // "Temperature"
+        itemAreaCopy(197, 104, 238, 114, TEMP_CASE_TEMP);      // "Nozzle"
+        itemAreaCopy(1,  89,  83, 101, TEMP_CASE_TEMP, 44);    // "Temperature"
       #endif
       #if HAS_HEATED_BED
-        Item_AreaCopy(240, 104, 264, 114, TEMP_CASE_BED);       // "Bed"
-        Item_AreaCopy(1,  89,  83, 101, TEMP_CASE_BED, 27);     // "Temperature"
+        itemAreaCopy(240, 104, 264, 114, TEMP_CASE_BED);       // "Bed"
+        itemAreaCopy(1,  89,  83, 101, TEMP_CASE_BED, 27);     // "Temperature"
       #endif
       #if HAS_FAN
-        Item_AreaCopy(  1, 119,  61, 132, TEMP_CASE_FAN);       // "Fan speed"
+        itemAreaCopy(  1, 119,  61, 132, TEMP_CASE_FAN);       // "Fan speed"
       #endif
       #if HAS_PREHEAT
-        Item_AreaCopy(107,  76, 156,  86, TEMP_CASE_PLA);       // "Preheat"
+        itemAreaCopy(107,  76, 156,  86, TEMP_CASE_PLA);       // "Preheat"
         say_pla_en(52, TEMP_CASE_PLA);                          // "PLA"
-        Item_AreaCopy(150, 135, 202, 148, TEMP_CASE_PLA, 79);   // "Settings"
+        itemAreaCopy(150, 135, 202, 148, TEMP_CASE_PLA, 79);   // "Settings"
         #if PREHEAT_COUNT > 1
-          Item_AreaCopy(107,  76, 156,  86, TEMP_CASE_ABS);     // "Preheat"
+          itemAreaCopy(107,  76, 156,  86, TEMP_CASE_ABS);     // "Preheat"
           say_abs_en(52, TEMP_CASE_ABS);                        // "ABS"
-          Item_AreaCopy(150, 135, 202, 148, TEMP_CASE_ABS, 81); // "Settings"
+          itemAreaCopy(150, 135, 202, 148, TEMP_CASE_ABS, 81); // "Settings"
         #endif
       #endif
     #endif
   }
 
-  Draw_Back_First(select_temp.now == CASE_BACK);
-  if (select_temp.now != CASE_BACK) Draw_Menu_Cursor(select_temp.now);
+  drawBackFirst(select_temp.now == CASE_BACK);
+  if (select_temp.now != CASE_BACK) drawMenuCursor(select_temp.now);
 
   // Draw icons and lines
   uint8_t i = 0;
-  #define _TMENU_ICON(N) Draw_Menu_Line(++i, ICON_SetEndTemp + (N) - 1)
+  #define _TMENU_ICON(N) drawMenuLine(++i, ICON_SetEndTemp + (N) - 1)
   #if HAS_HOTEND
     _TMENU_ICON(TEMP_CASE_TEMP);
-    Draw_Edit_Integer3(i, thermalManager.degTargetHotend(0));
+    drawEditInteger3(i, thermalManager.degTargetHotend(0));
   #endif
   #if HAS_HEATED_BED
     _TMENU_ICON(TEMP_CASE_BED);
-    Draw_Edit_Integer3(i, thermalManager.degTargetBed());
+    drawEditInteger3(i, thermalManager.degTargetBed());
   #endif
   #if HAS_FAN
     _TMENU_ICON(TEMP_CASE_FAN);
-    Draw_Edit_Integer3(i, thermalManager.fan_speed[0]);
+    drawEditInteger3(i, thermalManager.fan_speed[0]);
   #endif
   #if HAS_PREHEAT
     // PLA/ABS items have submenus
-    _TMENU_ICON(TEMP_CASE_PLA); Draw_More_Icon(i);
+    _TMENU_ICON(TEMP_CASE_PLA); drawMoreIcon(i);
     #if PREHEAT_COUNT > 1
-      _TMENU_ICON(TEMP_CASE_ABS); Draw_More_Icon(i);
+      _TMENU_ICON(TEMP_CASE_ABS); drawMoreIcon(i);
     #endif
   #endif
 }
 
 // Control
-void HMI_Control() {
+void hmiControl() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
@@ -2847,107 +2843,107 @@ void HMI_Control() {
         index_control = select_control.now;
 
         // Scroll up and draw a blank bottom line
-        Scroll_Menu(DWIN_SCROLL_UP);
+        scrollMenu(DWIN_SCROLL_UP);
 
         switch (index_control) {  // Last menu items
-          case CONTROL_CASE_ADVSET: Item_Control_Advanced(MROWS); break;
-          case CONTROL_CASE_INFO:   Item_Control_Info(MROWS);     break;
+          case CONTROL_CASE_ADVSET: itemControlAdvanced(MROWS); break;
+          case CONTROL_CASE_INFO:   itemControlInfo(MROWS);     break;
           default: break;
         }
 
       }
       else
-        Move_Highlight(1, select_control.now + MROWS - index_control);
+        moveHighlight(1, select_control.now + MROWS - index_control);
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
     if (select_control.dec()) {
       if (select_control.now < index_control - MROWS) {
         index_control--;
-        Scroll_Menu(DWIN_SCROLL_DOWN);
+        scrollMenu(DWIN_SCROLL_DOWN);
         switch (index_control) {  // First menu items
-          case MROWS:     Draw_Back_First();      break;
-          case MROWS + 1: Item_Control_Temp(0);   break;
-          case MROWS + 2: Item_Control_Motion(0); break;
+          case MROWS:     drawBackFirst();      break;
+          case MROWS + 1: itemControlTemp(0);   break;
+          case MROWS + 2: itemControlMotion(0); break;
           default: break;
         }
       }
       else
-        Move_Highlight(-1, select_control.now + MROWS - index_control);
+        moveHighlight(-1, select_control.now + MROWS - index_control);
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_control.now) {
       case CASE_BACK:
         select_page.set(2);
-        Goto_MainMenu();
+        gotoMainMenu();
         break;
       case CONTROL_CASE_TEMP:
         checkkey = TemperatureID;
-        HMI_ValueStruct.show_mode = -1;
+        hmiValues.show_mode = -1;
         select_temp.reset();
-        Draw_Temperature_Menu();
+        drawTemperatureMenu();
         break;
       case CONTROL_CASE_MOVE:
         checkkey = Motion;
         select_motion.reset();
-        Draw_Motion_Menu();
+        drawMotionMenu();
         break;
       #if ENABLED(EEPROM_SETTINGS)
         case CONTROL_CASE_SAVE: {
           const bool success = settings.save();
-          HMI_AudioFeedback(success);
+          hmiAudioFeedback(success);
         } break;
         case CONTROL_CASE_LOAD: {
           const bool success = settings.load();
-          HMI_AudioFeedback(success);
+          hmiAudioFeedback(success);
         } break;
         case CONTROL_CASE_RESET:
           settings.reset();
-          HMI_AudioFeedback();
+          hmiAudioFeedback();
           break;
       #endif
       case CONTROL_CASE_ADVSET:
         checkkey = AdvSet;
         select_advset.reset();
-        Draw_AdvancedSettings_Menu();
+        drawAdvancedSettingsMenu();
         break;
       case CONTROL_CASE_INFO:
         checkkey = Info;
-        Draw_Info_Menu();
+        drawInfoMenu();
         break;
       default: break;
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
 #if HAS_ONESTEP_LEVELING
   // Leveling
-  void HMI_Leveling() {
-    Popup_Window_Leveling();
-    DWIN_UpdateLCD();
+  void hmiLeveling() {
+    popupWindowLeveling();
+    dwinUpdateLCD();
     queue.inject(F("G28O\nG29"));
   }
 #endif
 
 // Axis Move
-void HMI_AxisMove() {
+void hmiAxisMove() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     // popup window resume
-    if (HMI_flag.cold_flag) {
+    if (hmiFlag.cold_flag) {
       if (encoder_diffState == ENCODER_DIFF_ENTER) {
-        HMI_flag.cold_flag = false;
-        HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
-        Draw_Move_Menu();
-        Draw_Edit_Float3(1, HMI_ValueStruct.Move_X_scaled);
-        Draw_Edit_Float3(2, HMI_ValueStruct.Move_Y_scaled);
-        Draw_Edit_Float3(3, HMI_ValueStruct.Move_Z_scaled);
-        Draw_Edit_Signed_Float3(4, 0);
-        DWIN_UpdateLCD();
+        hmiFlag.cold_flag = false;
+        hmiValues.Move_E_scaled = current_position.e * MINUNITMULT;
+        drawMoveMenu();
+        drawEditFloat3(1, hmiValues.Move_X_scaled);
+        drawEditFloat3(2, hmiValues.Move_Y_scaled);
+        drawEditFloat3(3, hmiValues.Move_Z_scaled);
+        drawEditSignedFloat3(4, 0);
+        dwinUpdateLCD();
       }
       return;
     }
@@ -2955,10 +2951,10 @@ void HMI_AxisMove() {
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_axis.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_axis.now);
+    if (select_axis.inc(1 + 3 + ENABLED(HAS_HOTEND))) moveHighlight(1, select_axis.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_axis.dec()) Move_Highlight(-1, select_axis.now);
+    if (select_axis.dec()) moveHighlight(-1, select_axis.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_axis.now) {
@@ -2966,58 +2962,58 @@ void HMI_AxisMove() {
         checkkey = Prepare;
         select_prepare.set(1);
         index_prepare = MROWS;
-        Draw_Prepare_Menu();
+        drawPrepareMenu();
         break;
       case 1: // X axis move
         checkkey = Move_X;
-        HMI_ValueStruct.Move_X_scaled = current_position.x * MINUNITMULT;
-        Draw_Edit_Float3(1, HMI_ValueStruct.Move_X_scaled, true);
-        EncoderRate.enabled = true;
+        hmiValues.Move_X_scaled = current_position.x * MINUNITMULT;
+        drawEditFloat3(1, hmiValues.Move_X_scaled, true);
+        encoderRate.enabled = true;
         break;
       case 2: // Y axis move
         checkkey = Move_Y;
-        HMI_ValueStruct.Move_Y_scaled = current_position.y * MINUNITMULT;
-        Draw_Edit_Float3(2, HMI_ValueStruct.Move_Y_scaled, true);
-        EncoderRate.enabled = true;
+        hmiValues.Move_Y_scaled = current_position.y * MINUNITMULT;
+        drawEditFloat3(2, hmiValues.Move_Y_scaled, true);
+        encoderRate.enabled = true;
         break;
       case 3: // Z axis move
         checkkey = Move_Z;
-        HMI_ValueStruct.Move_Z_scaled = current_position.z * MINUNITMULT;
-        Draw_Edit_Float3(3, HMI_ValueStruct.Move_Z_scaled, true);
-        EncoderRate.enabled = true;
+        hmiValues.Move_Z_scaled = current_position.z * MINUNITMULT;
+        drawEditFloat3(3, hmiValues.Move_Z_scaled, true);
+        encoderRate.enabled = true;
         break;
         #if HAS_HOTEND
           case 4: // Extruder
             #if ENABLED(PREVENT_COLD_EXTRUSION)
               if (thermalManager.tooColdToExtrude(0)) {
-                HMI_flag.cold_flag = true;
-                Popup_Window_ETempTooLow();
-                DWIN_UpdateLCD();
+                hmiFlag.cold_flag = true;
+                popupWindowETempTooLow();
+                dwinUpdateLCD();
                 return;
               }
             #endif
             checkkey = Extruder;
-            HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
-            Draw_Edit_Signed_Float3(4, HMI_ValueStruct.Move_E_scaled, true);
-            EncoderRate.enabled = true;
+            hmiValues.Move_E_scaled = current_position.e * MINUNITMULT;
+            drawEditSignedFloat3(4, hmiValues.Move_E_scaled, true);
+            encoderRate.enabled = true;
             break;
         #endif
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
 // TemperatureID
-void HMI_Temperature() {
+void hmiTemperature() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_temp.inc(1 + TEMP_CASE_TOTAL)) Move_Highlight(1, select_temp.now);
+    if (select_temp.inc(1 + TEMP_CASE_TOTAL)) moveHighlight(1, select_temp.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_temp.dec()) Move_Highlight(-1, select_temp.now);
+    if (select_temp.dec()) moveHighlight(-1, select_temp.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_temp.now) {
@@ -3025,30 +3021,30 @@ void HMI_Temperature() {
         checkkey = Control;
         select_control.set(1);
         index_control = MROWS;
-        Draw_Control_Menu();
+        drawControlMenu();
         break;
       #if HAS_HOTEND
         case TEMP_CASE_TEMP:
           checkkey = ETemp;
-          HMI_ValueStruct.E_Temp = thermalManager.degTargetHotend(0);
-          Draw_Edit_Integer3(1, HMI_ValueStruct.E_Temp, true);
-          EncoderRate.enabled = true;
+          hmiValues.E_Temp = thermalManager.degTargetHotend(0);
+          drawEditInteger3(1, hmiValues.E_Temp, true);
+          encoderRate.enabled = true;
           break;
       #endif
       #if HAS_HEATED_BED
         case TEMP_CASE_BED:
           checkkey = BedTemp;
-          HMI_ValueStruct.Bed_Temp = thermalManager.degTargetBed();
-          Draw_Edit_Integer3(2, HMI_ValueStruct.Bed_Temp, true);
-          EncoderRate.enabled = true;
+          hmiValues.Bed_Temp = thermalManager.degTargetBed();
+          drawEditInteger3(2, hmiValues.Bed_Temp, true);
+          encoderRate.enabled = true;
           break;
       #endif
       #if HAS_FAN
         case TEMP_CASE_FAN:
           checkkey = FanSpeed;
-          HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
-          Draw_Edit_Integer3(3, HMI_ValueStruct.Fan_speed, true);
-          EncoderRate.enabled = true;
+          hmiValues.Fan_speed = thermalManager.fan_speed[0];
+          drawEditInteger3(3, hmiValues.Fan_speed, true);
+          encoderRate.enabled = true;
           break;
       #endif
 
@@ -3056,77 +3052,77 @@ void HMI_Temperature() {
         case TEMP_CASE_PLA: {
           checkkey = PLAPreheat;
           select_PLA.reset();
-          HMI_ValueStruct.show_mode = -2;
+          hmiValues.show_mode = -2;
 
-          Clear_Main_Window();
+          clearMainWindow();
 
-          if (HMI_IsChinese()) {
-            DWIN_Frame_TitleCopy(59, 16, 81, 14);                       // "PLA Settings"
-            Item_AreaCopy(100, 89, 124, 101, PREHEAT_CASE_TEMP);
-            Item_AreaCopy(1, 134, 56, 146, PREHEAT_CASE_TEMP, 24);      // PLA nozzle temp
+          if (hmiIsChinese()) {
+            dwinFrameTitleCopy(59, 16, 81, 14);                       // "PLA Settings"
+            itemAreaCopy(100, 89, 124, 101, PREHEAT_CASE_TEMP);
+            itemAreaCopy(1, 134, 56, 146, PREHEAT_CASE_TEMP, 24);      // PLA nozzle temp
             #if HAS_HEATED_BED
-              Item_AreaCopy(100, 89, 124, 101, PREHEAT_CASE_BED);
-              Item_AreaCopy(58, 134, 113, 146, PREHEAT_CASE_BED, 24);   // PLA bed temp
+              itemAreaCopy(100, 89, 124, 101, PREHEAT_CASE_BED);
+              itemAreaCopy(58, 134, 113, 146, PREHEAT_CASE_BED, 24);   // PLA bed temp
             #endif
             #if HAS_FAN
-              Item_AreaCopy(100, 89, 124, 101, PREHEAT_CASE_FAN);
-              Item_AreaCopy(115, 134, 170, 146, PREHEAT_CASE_FAN, 24);  // PLA fan speed
+              itemAreaCopy(100, 89, 124, 101, PREHEAT_CASE_FAN);
+              itemAreaCopy(115, 134, 170, 146, PREHEAT_CASE_FAN, 24);  // PLA fan speed
             #endif
             #if ENABLED(EEPROM_SETTINGS)
-              Item_AreaCopy(72, 148, 151, 162, PREHEAT_CASE_SAVE);      // Save PLA configuration
+              itemAreaCopy(72, 148, 151, 162, PREHEAT_CASE_SAVE);      // Save PLA configuration
             #endif
           }
           else {
             #ifdef USE_STRING_HEADINGS
-              Draw_Title(F(PREHEAT_1_LABEL " Settings")); // TODO: GET_TEXT_F
+              drawTitle(F(PREHEAT_1_LABEL " Settings")); // TODO: GET_TEXT_F
             #else
-              DWIN_Frame_TitleCopy(56, 15, 85, 14);                       // "Temperature"  TODO: "PLA Settings"
+              dwinFrameTitleCopy(56, 15, 85, 14);                       // "Temperature"  TODO: "PLA Settings"
             #endif
             #ifdef USE_STRING_TITLES
-              DWIN_Draw_Label(PREHEAT_CASE_TEMP, F("Nozzle Temp"));
+              dwinDrawLabel(PREHEAT_CASE_TEMP, F("Nozzle Temp"));
               #if HAS_HEATED_BED
-                DWIN_Draw_Label(PREHEAT_CASE_BED, F("Bed Temp"));
+                dwinDrawLabel(PREHEAT_CASE_BED, F("Bed Temp"));
               #endif
               #if HAS_FAN
-                DWIN_Draw_Label(PREHEAT_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
+                dwinDrawLabel(PREHEAT_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Draw_Label(PREHEAT_CASE_SAVE, GET_TEXT_F(MSG_STORE_EEPROM));
+                dwinDrawLabel(PREHEAT_CASE_SAVE, GET_TEXT_F(MSG_STORE_EEPROM));
               #endif
             #else
               say_pla_en(0, PREHEAT_CASE_TEMP);                           // "PLA"
-              Item_AreaCopy(198, 104, 237, 114, PREHEAT_CASE_TEMP, 27);   // "Nozzle"
-              Item_AreaCopy(1,  89,  81, 102, PREHEAT_CASE_TEMP, 71);     // "Temperature"
+              itemAreaCopy(198, 104, 237, 114, PREHEAT_CASE_TEMP, 27);   // "Nozzle"
+              itemAreaCopy(1,  89,  81, 102, PREHEAT_CASE_TEMP, 71);     // "Temperature"
               #if HAS_HEATED_BED
                 say_pla_en(0, PREHEAT_CASE_BED);                          // "PLA"
-                Item_AreaCopy(240, 104, 264, 114, PREHEAT_CASE_BED, 27);  // "Bed"
-                Item_AreaCopy(1, 89, 83, 101, PREHEAT_CASE_BED, 54);      // "Temperature"
+                itemAreaCopy(240, 104, 264, 114, PREHEAT_CASE_BED, 27);  // "Bed"
+                itemAreaCopy(1, 89, 83, 101, PREHEAT_CASE_BED, 54);      // "Temperature"
               #endif
               #if HAS_FAN
                 say_pla_en(0, PREHEAT_CASE_FAN);                          // "PLA"
-                Item_AreaCopy(0, 119, 64, 132, PREHEAT_CASE_FAN, 27);     // "Fan speed"
+                itemAreaCopy(0, 119, 64, 132, PREHEAT_CASE_FAN, 27);     // "Fan speed"
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                Item_AreaCopy(98, 164, 233, 177, PREHEAT_CASE_SAVE);      // "Save PLA parameters"
+                itemAreaCopy(98, 164, 233, 177, PREHEAT_CASE_SAVE);      // "Save PLA parameters"
               #endif
             #endif
           }
 
-          Draw_Back_First();
+          drawBackFirst();
 
           uint8_t i = 0;
-          Draw_Menu_Line(++i, ICON_SetEndTemp);
-          Draw_Edit_Integer3(i, ui.material_preset[0].hotend_temp);
+          drawMenuLine(++i, ICON_SetEndTemp);
+          drawEditInteger3(i, ui.material_preset[0].hotend_temp);
           #if HAS_HEATED_BED
-            Draw_Menu_Line(++i, ICON_SetBedTemp);
-            Draw_Edit_Integer3(i, ui.material_preset[0].bed_temp);
+            drawMenuLine(++i, ICON_SetBedTemp);
+            drawEditInteger3(i, ui.material_preset[0].bed_temp);
           #endif
           #if HAS_FAN
-            Draw_Menu_Line(++i, ICON_FanSpeed);
-            Draw_Edit_Integer3(i, ui.material_preset[0].fan_speed);
+            drawMenuLine(++i, ICON_FanSpeed);
+            drawEditInteger3(i, ui.material_preset[0].fan_speed);
           #endif
           #if ENABLED(EEPROM_SETTINGS)
-            Draw_Menu_Line(++i, ICON_WriteEEPROM);
+            drawMenuLine(++i, ICON_WriteEEPROM);
           #endif
         } break;
       #endif // HAS_PREHEAT
@@ -3135,80 +3131,80 @@ void HMI_Temperature() {
         case TEMP_CASE_ABS: { // ABS preheat setting
           checkkey = ABSPreheat;
           select_ABS.reset();
-          HMI_ValueStruct.show_mode = -3;
+          hmiValues.show_mode = -3;
 
-          Clear_Main_Window();
+          clearMainWindow();
 
-          if (HMI_IsChinese()) {
-            DWIN_Frame_TitleCopy(142, 16, 82, 14);                        // "ABS Settings"
+          if (hmiIsChinese()) {
+            dwinFrameTitleCopy(142, 16, 82, 14);                        // "ABS Settings"
 
-            Item_AreaCopy(180, 89, 204, 100, PREHEAT_CASE_TEMP);
-            Item_AreaCopy(1, 134, 56, 146, PREHEAT_CASE_TEMP, 24);        // ABS nozzle temp
+            itemAreaCopy(180, 89, 204, 100, PREHEAT_CASE_TEMP);
+            itemAreaCopy(1, 134, 56, 146, PREHEAT_CASE_TEMP, 24);        // ABS nozzle temp
             #if HAS_HEATED_BED
-              Item_AreaCopy(180, 89, 204, 100, PREHEAT_CASE_BED);
-              Item_AreaCopy(58, 134, 113, 146, PREHEAT_CASE_BED, 24);     // ABS bed temp
+              itemAreaCopy(180, 89, 204, 100, PREHEAT_CASE_BED);
+              itemAreaCopy(58, 134, 113, 146, PREHEAT_CASE_BED, 24);     // ABS bed temp
             #endif
             #if HAS_FAN
-              Item_AreaCopy(180, 89, 204, 100, PREHEAT_CASE_FAN);
-              Item_AreaCopy(115, 134, 170, 146, PREHEAT_CASE_FAN, 24);    // ABS fan speed
+              itemAreaCopy(180, 89, 204, 100, PREHEAT_CASE_FAN);
+              itemAreaCopy(115, 134, 170, 146, PREHEAT_CASE_FAN, 24);    // ABS fan speed
             #endif
             #if ENABLED(EEPROM_SETTINGS)
-              Item_AreaCopy(72, 148, 151, 162, PREHEAT_CASE_SAVE);
-              Item_AreaCopy(180, 89, 204, 100, PREHEAT_CASE_SAVE, 28, 2); // Save ABS configuration
+              itemAreaCopy(72, 148, 151, 162, PREHEAT_CASE_SAVE);
+              itemAreaCopy(180, 89, 204, 100, PREHEAT_CASE_SAVE, 28, 2); // Save ABS configuration
             #endif
           }
           else {
             #ifdef USE_STRING_HEADINGS
-              Draw_Title(F("ABS Settings")); // TODO: GET_TEXT_F
+              drawTitle(F("ABS Settings")); // TODO: GET_TEXT_F
             #else
-              DWIN_Frame_TitleCopy(56, 15, 85, 14);                       // "Temperature"  TODO: "ABS Settings"
+              dwinFrameTitleCopy(56, 15, 85, 14);                       // "Temperature"  TODO: "ABS Settings"
             #endif
             #ifdef USE_STRING_TITLES
-              DWIN_Draw_Label(PREHEAT_CASE_TEMP, F("Nozzle Temp"));
+              dwinDrawLabel(PREHEAT_CASE_TEMP, F("Nozzle Temp"));
               #if HAS_HEATED_BED
-                DWIN_Draw_Label(PREHEAT_CASE_BED, F("Bed Temp"));
+                dwinDrawLabel(PREHEAT_CASE_BED, F("Bed Temp"));
               #endif
               #if HAS_FAN
-                DWIN_Draw_Label(PREHEAT_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
+                dwinDrawLabel(PREHEAT_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Draw_Label(PREHEAT_CASE_SAVE, GET_TEXT_F(MSG_STORE_EEPROM));
+                dwinDrawLabel(PREHEAT_CASE_SAVE, GET_TEXT_F(MSG_STORE_EEPROM));
               #endif
             #else
               say_abs_en(0, PREHEAT_CASE_TEMP);                           // "ABS"
-              Item_AreaCopy(197, 104, 238, 114, PREHEAT_CASE_TEMP, 29);   // "Nozzle"
-              Item_AreaCopy(1,  89,  34, 102, PREHEAT_CASE_TEMP, 73);     // "Temp"
+              itemAreaCopy(197, 104, 238, 114, PREHEAT_CASE_TEMP, 29);   // "Nozzle"
+              itemAreaCopy(1,  89,  34, 102, PREHEAT_CASE_TEMP, 73);     // "Temp"
               #if HAS_HEATED_BED
                 say_abs_en(0, PREHEAT_CASE_BED);                          // "ABS"
-                Item_AreaCopy(240, 104, 264, 114, PREHEAT_CASE_BED, 29);  // "Bed"
-                Item_AreaCopy(1,  89,  83, 102, PREHEAT_CASE_BED, 56);    // "Temperature"
+                itemAreaCopy(240, 104, 264, 114, PREHEAT_CASE_BED, 29);  // "Bed"
+                itemAreaCopy(1,  89,  83, 102, PREHEAT_CASE_BED, 56);    // "Temperature"
               #endif
               #if HAS_FAN
                 say_abs_en(0, PREHEAT_CASE_FAN);                          // "ABS"
-                Item_AreaCopy(0, 119,  64, 132, PREHEAT_CASE_FAN, 29);    // "Fan speed"
+                itemAreaCopy(0, 119,  64, 132, PREHEAT_CASE_FAN, 29);    // "Fan speed"
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                Item_AreaCopy(98, 165, 233, 177, PREHEAT_CASE_SAVE);      // "Save PLA parameters"
+                itemAreaCopy(98, 165, 233, 177, PREHEAT_CASE_SAVE);      // "Save PLA parameters"
                 say_abs_en(33, PREHEAT_CASE_SAVE);                        // "ABS"
               #endif
             #endif
           }
 
-          Draw_Back_First();
+          drawBackFirst();
 
           uint8_t i = 0;
-          Draw_Menu_Line(++i, ICON_SetEndTemp);
-          Draw_Edit_Integer3(i, ui.material_preset[1].hotend_temp);
+          drawMenuLine(++i, ICON_SetEndTemp);
+          drawEditInteger3(i, ui.material_preset[1].hotend_temp);
           #if HAS_HEATED_BED
-            Draw_Menu_Line(++i, ICON_SetBedTemp);
-            Draw_Edit_Integer3(i, ui.material_preset[1].bed_temp);
+            drawMenuLine(++i, ICON_SetBedTemp);
+            drawEditInteger3(i, ui.material_preset[1].bed_temp);
           #endif
           #if HAS_FAN
-            Draw_Menu_Line(++i, ICON_FanSpeed);
-            Draw_Edit_Integer3(i, ui.material_preset[1].fan_speed);
+            drawMenuLine(++i, ICON_FanSpeed);
+            drawEditInteger3(i, ui.material_preset[1].fan_speed);
           #endif
           #if ENABLED(EEPROM_SETTINGS)
-            Draw_Menu_Line(++i, ICON_WriteEEPROM);
+            drawMenuLine(++i, ICON_WriteEEPROM);
           #endif
 
         } break;
@@ -3216,42 +3212,42 @@ void HMI_Temperature() {
       #endif // PREHEAT_COUNT > 1
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
-void Draw_Max_Speed_Menu() {
-  Clear_Main_Window();
+void drawMaxSpeedMenu() {
+  clearMainWindow();
 
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 16, 28, 13);          // "Max Speed (mm/s)"
+  if (hmiIsChinese()) {
+    dwinFrameTitleCopy(1, 16, 28, 13);          // "Max Speed (mm/s)"
 
     auto say_max_speed_cn = [](const uint8_t line) {
-      Item_AreaCopy(173, 133, 228, 147, line);    // "Max speed"
+      itemAreaCopy(173, 133, 228, 147, line);    // "Max speed"
     };
 
     say_max_speed_cn(1);                          // "Max speed"
-    Item_AreaCopy(229, 133, 236, 147, 1, 58);     // "X"
+    itemAreaCopy(229, 133, 236, 147, 1, 58);     // "X"
     say_max_speed_cn(2);                          // "Max speed"
-    Item_AreaCopy(1, 150, 7, 160, 2, 58, 3);      // "Y"
+    itemAreaCopy(1, 150, 7, 160, 2, 58, 3);      // "Y"
     say_max_speed_cn(3);                          // "Max speed"
-    Item_AreaCopy(9, 150, 16, 160, 3, 58, 3);     // "Z"
+    itemAreaCopy(9, 150, 16, 160, 3, 58, 3);     // "Z"
     #if HAS_HOTEND
       say_max_speed_cn(4);                        // "Max speed"
-      Item_AreaCopy(18, 150, 25, 160, 4, 58, 3);  // "E"
+      itemAreaCopy(18, 150, 25, 160, 4, 58, 3);  // "E"
     #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(F("Max Speed (mm/s)")); // TODO: GET_TEXT_F
+      drawTitle(F("Max Speed (mm/s)")); // TODO: GET_TEXT_F
     #else
-      DWIN_Frame_TitleCopy(144, 16, 46, 11);                  // "Max Speed (mm/s)"
+      dwinFrameTitleCopy(144, 16, 46, 11);                  // "Max Speed (mm/s)"
     #endif
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(1, F("Max Feedrate X"));
-      DWIN_Draw_Label(2, F("Max Feedrate Y"));
-      DWIN_Draw_Label(3, F("Max Feedrate Z"));
+      dwinDrawLabel(1, F("Max Feedrate X"));
+      dwinDrawLabel(2, F("Max Feedrate Y"));
+      dwinDrawLabel(3, F("Max Feedrate Z"));
       #if HAS_HOTEND
-        DWIN_Draw_Label(4, F("Max Feedrate E"));
+        dwinDrawLabel(4, F("Max Feedrate E"));
       #endif
     #else
       say_max_en(1); say_speed_en(30, 1); say_x_en(73, 1);    // "Max Speed X"
@@ -3263,49 +3259,49 @@ void Draw_Max_Speed_Menu() {
     #endif
   }
 
-  Draw_Back_First();
-  for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) Draw_Menu_Line(i + 1, ICON_MaxSpeedX + i);
-  Draw_Edit_Integer4(1, planner.settings.max_feedrate_mm_s[X_AXIS]);
-  Draw_Edit_Integer4(2, planner.settings.max_feedrate_mm_s[Y_AXIS]);
-  Draw_Edit_Integer4(3, planner.settings.max_feedrate_mm_s[Z_AXIS]);
+  drawBackFirst();
+  for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) drawMenuLine(i + 1, ICON_MaxSpeedX + i);
+  drawEditInteger4(1, planner.settings.max_feedrate_mm_s[X_AXIS]);
+  drawEditInteger4(2, planner.settings.max_feedrate_mm_s[Y_AXIS]);
+  drawEditInteger4(3, planner.settings.max_feedrate_mm_s[Z_AXIS]);
   #if HAS_HOTEND
-    Draw_Edit_Integer4(4, planner.settings.max_feedrate_mm_s[E_AXIS]);
+    drawEditInteger4(4, planner.settings.max_feedrate_mm_s[E_AXIS]);
   #endif
 }
 
-void Draw_Max_Accel_Menu() {
-  Clear_Main_Window();
+void drawMaxAccelMenu() {
+  clearMainWindow();
 
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 16, 28, 13);            // "Acceleration"
+  if (hmiIsChinese()) {
+    dwinFrameTitleCopy(1, 16, 28, 13);            // "Acceleration"
 
-    Item_AreaCopy(173, 133, 200, 147, 1);
-    Item_AreaCopy( 28, 149,  69, 161, 1, 30, 1);
-    Item_AreaCopy(229, 133, 236, 147, 1, 74);       // Max acceleration X
-    Item_AreaCopy(173, 133, 200, 147, 2);
-    Item_AreaCopy( 28, 149,  69, 161, 2, 30, 1);
-    Item_AreaCopy(  1, 150,   7, 160, 2, 74, 2);    // Max acceleration Y
-    Item_AreaCopy(173, 133, 200, 147, 3);
-    Item_AreaCopy( 28, 149,  69, 161, 3, 30, 1);
-    Item_AreaCopy(  9, 150,  16, 160, 3, 74, 2);    // Max acceleration Z
+    itemAreaCopy(173, 133, 200, 147, 1);
+    itemAreaCopy( 28, 149,  69, 161, 1, 30, 1);
+    itemAreaCopy(229, 133, 236, 147, 1, 74);       // Max acceleration X
+    itemAreaCopy(173, 133, 200, 147, 2);
+    itemAreaCopy( 28, 149,  69, 161, 2, 30, 1);
+    itemAreaCopy(  1, 150,   7, 160, 2, 74, 2);    // Max acceleration Y
+    itemAreaCopy(173, 133, 200, 147, 3);
+    itemAreaCopy( 28, 149,  69, 161, 3, 30, 1);
+    itemAreaCopy(  9, 150,  16, 160, 3, 74, 2);    // Max acceleration Z
     #if HAS_HOTEND
-      Item_AreaCopy(173, 133, 200, 147, 4);
-      Item_AreaCopy( 28, 149,  69, 161, 4, 30, 1);
-      Item_AreaCopy( 18, 150,  25, 160, 4, 74, 2);  // Max acceleration E
+      itemAreaCopy(173, 133, 200, 147, 4);
+      itemAreaCopy( 28, 149,  69, 161, 4, 30, 1);
+      itemAreaCopy( 18, 150,  25, 160, 4, 74, 2);  // Max acceleration E
     #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_ACCELERATION));
+      drawTitle(GET_TEXT_F(MSG_ACCELERATION));
     #else
-      DWIN_Frame_TitleCopy(144, 16, 46, 11);    // "Acceleration"
+      dwinFrameTitleCopy(144, 16, 46, 11);    // "Acceleration"
     #endif
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(1, F("Max Accel X"));
-      DWIN_Draw_Label(2, F("Max Accel Y"));
-      DWIN_Draw_Label(3, F("Max Accel Z"));
+      dwinDrawLabel(1, F("Max Accel X"));
+      dwinDrawLabel(2, F("Max Accel Y"));
+      dwinDrawLabel(3, F("Max Accel Z"));
       #if HAS_HOTEND
-        DWIN_Draw_Label(4, F("Max Accel E"));
+        dwinDrawLabel(4, F("Max Accel E"));
       #endif
     #else
       say_max_accel_en(1); say_x_en(112, 1);    // "Max Acceleration X"
@@ -3317,54 +3313,54 @@ void Draw_Max_Accel_Menu() {
     #endif
   }
 
-  Draw_Back_First();
-  for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) Draw_Menu_Line(i + 1, ICON_MaxAccX + i);
-  Draw_Edit_Integer4(1, planner.settings.max_acceleration_mm_per_s2[X_AXIS]);
-  Draw_Edit_Integer4(2, planner.settings.max_acceleration_mm_per_s2[Y_AXIS]);
-  Draw_Edit_Integer4(3, planner.settings.max_acceleration_mm_per_s2[Z_AXIS]);
+  drawBackFirst();
+  for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) drawMenuLine(i + 1, ICON_MaxAccX + i);
+  drawEditInteger4(1, planner.settings.max_acceleration_mm_per_s2[X_AXIS]);
+  drawEditInteger4(2, planner.settings.max_acceleration_mm_per_s2[Y_AXIS]);
+  drawEditInteger4(3, planner.settings.max_acceleration_mm_per_s2[Z_AXIS]);
   #if HAS_HOTEND
-    Draw_Edit_Integer4(4, planner.settings.max_acceleration_mm_per_s2[E_AXIS]);
+    drawEditInteger4(4, planner.settings.max_acceleration_mm_per_s2[E_AXIS]);
   #endif
 }
 
 #if HAS_CLASSIC_JERK
-  void Draw_Max_Jerk_Menu() {
-    Clear_Main_Window();
-
-    if (HMI_IsChinese()) {
-      DWIN_Frame_TitleCopy(1, 16, 28, 13);            // "Jerk"
-
-      Item_AreaCopy(173, 133, 200, 147, 1);
-      Item_AreaCopy(  1, 180,  28, 192, 1, 30, 1);
-      Item_AreaCopy(202, 133, 228, 147, 1, 56);
-      Item_AreaCopy(229, 133, 236, 147, 1, 86);       // Max Jerk speed X
-      Item_AreaCopy(173, 133, 200, 147, 2);
-      Item_AreaCopy(  1, 180,  28, 192, 2, 30, 1);
-      Item_AreaCopy(202, 133, 228, 147, 2, 56);
-      Item_AreaCopy(  1, 150,   7, 160, 2, 86, 3);    // Max Jerk speed Y
-      Item_AreaCopy(173, 133, 200, 147, 3);
-      Item_AreaCopy(  1, 180,  28, 192, 3, 30, 1);
-      Item_AreaCopy(202, 133, 228, 147, 3, 56);
-      Item_AreaCopy(  9, 150,  16, 160, 3, 86, 3);    // Max Jerk speed Z
+  void drawMaxJerkMenu() {
+    clearMainWindow();
+
+    if (hmiIsChinese()) {
+      dwinFrameTitleCopy(1, 16, 28, 13);            // "Jerk"
+
+      itemAreaCopy(173, 133, 200, 147, 1);
+      itemAreaCopy(  1, 180,  28, 192, 1, 30, 1);
+      itemAreaCopy(202, 133, 228, 147, 1, 56);
+      itemAreaCopy(229, 133, 236, 147, 1, 86);       // Max Jerk speed X
+      itemAreaCopy(173, 133, 200, 147, 2);
+      itemAreaCopy(  1, 180,  28, 192, 2, 30, 1);
+      itemAreaCopy(202, 133, 228, 147, 2, 56);
+      itemAreaCopy(  1, 150,   7, 160, 2, 86, 3);    // Max Jerk speed Y
+      itemAreaCopy(173, 133, 200, 147, 3);
+      itemAreaCopy(  1, 180,  28, 192, 3, 30, 1);
+      itemAreaCopy(202, 133, 228, 147, 3, 56);
+      itemAreaCopy(  9, 150,  16, 160, 3, 86, 3);    // Max Jerk speed Z
       #if HAS_HOTEND
-        Item_AreaCopy(173, 133, 200, 147, 4);
-        Item_AreaCopy(  1, 180,  28, 192, 4, 30, 1);
-        Item_AreaCopy(202, 133, 228, 147, 4, 56);
-        Item_AreaCopy( 18, 150,  25, 160, 4, 86, 3);  // Max Jerk speed E
+        itemAreaCopy(173, 133, 200, 147, 4);
+        itemAreaCopy(  1, 180,  28, 192, 4, 30, 1);
+        itemAreaCopy(202, 133, 228, 147, 4, 56);
+        itemAreaCopy( 18, 150,  25, 160, 4, 86, 3);  // Max Jerk speed E
       #endif
     }
     else {
       #ifdef USE_STRING_HEADINGS
-        Draw_Title(GET_TEXT_F(MSG_JERK));
+        drawTitle(GET_TEXT_F(MSG_JERK));
       #else
-        DWIN_Frame_TitleCopy(144, 16, 46, 11);        // "Jerk"
+        dwinFrameTitleCopy(144, 16, 46, 11);        // "Jerk"
       #endif
       #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(1, GET_TEXT_F(MSG_VA_JERK));
-        DWIN_Draw_Label(2, GET_TEXT_F(MSG_VB_JERK));
-        DWIN_Draw_Label(3, GET_TEXT_F(MSG_VC_JERK));
+        dwinDrawLabel(1, GET_TEXT_F(MSG_VA_JERK));
+        dwinDrawLabel(2, GET_TEXT_F(MSG_VB_JERK));
+        dwinDrawLabel(3, GET_TEXT_F(MSG_VC_JERK));
         #if HAS_HOTEND
-          DWIN_Draw_Label(4, GET_TEXT_F(MSG_VE_JERK));
+          dwinDrawLabel(4, GET_TEXT_F(MSG_VE_JERK));
         #endif
       #else
         say_max_jerk_speed_en(1); say_x_en(102, 1);   // Max Jerk speed X
@@ -3376,46 +3372,46 @@ void Draw_Max_Accel_Menu() {
       #endif
     }
 
-    Draw_Back_First();
-    for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
-    Draw_Edit_Float3(1, planner.max_jerk.x * MINUNITMULT);
-    Draw_Edit_Float3(2, planner.max_jerk.y * MINUNITMULT);
-    Draw_Edit_Float3(3, planner.max_jerk.z * MINUNITMULT);
+    drawBackFirst();
+    for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) drawMenuLine(i + 1, ICON_MaxSpeedJerkX + i);
+    drawEditFloat3(1, planner.max_jerk.x * MINUNITMULT);
+    drawEditFloat3(2, planner.max_jerk.y * MINUNITMULT);
+    drawEditFloat3(3, planner.max_jerk.z * MINUNITMULT);
     #if HAS_HOTEND
-      Draw_Edit_Float3(4, planner.max_jerk.e * MINUNITMULT);
+      drawEditFloat3(4, planner.max_jerk.e * MINUNITMULT);
     #endif
   }
 #endif
 
-void Draw_Steps_Menu() {
-  Clear_Main_Window();
+void drawStepsMenu() {
+  clearMainWindow();
 
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 16, 28, 13);            // "Steps per mm"
+  if (hmiIsChinese()) {
+    dwinFrameTitleCopy(1, 16, 28, 13);            // "Steps per mm"
 
-    Item_AreaCopy(153, 148, 194, 161, 1);
-    Item_AreaCopy(229, 133, 236, 147, 1, 44);       // Transmission Ratio X
-    Item_AreaCopy(153, 148, 194, 161, 2);
-    Item_AreaCopy(  1, 150,   7, 160, 2, 44, 3);    // Transmission Ratio Y
-    Item_AreaCopy(153, 148, 194, 161, 3);
-    Item_AreaCopy(  9, 150,  16, 160, 3, 44, 3);    // Transmission Ratio Z
+    itemAreaCopy(153, 148, 194, 161, 1);
+    itemAreaCopy(229, 133, 236, 147, 1, 44);       // Transmission Ratio X
+    itemAreaCopy(153, 148, 194, 161, 2);
+    itemAreaCopy(  1, 150,   7, 160, 2, 44, 3);    // Transmission Ratio Y
+    itemAreaCopy(153, 148, 194, 161, 3);
+    itemAreaCopy(  9, 150,  16, 160, 3, 44, 3);    // Transmission Ratio Z
     #if HAS_HOTEND
-      Item_AreaCopy(153, 148, 194, 161, 4);
-      Item_AreaCopy( 18, 150,  25, 160, 4, 44, 3);  // Transmission Ratio E
+      itemAreaCopy(153, 148, 194, 161, 4);
+      itemAreaCopy( 18, 150,  25, 160, 4, 44, 3);  // Transmission Ratio E
     #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_STEPS_PER_MM));
+      drawTitle(GET_TEXT_F(MSG_STEPS_PER_MM));
     #else
-      DWIN_Frame_TitleCopy(144, 16, 46, 11);        // "Steps per mm"
+      dwinFrameTitleCopy(144, 16, 46, 11);        // "Steps per mm"
     #endif
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(1, GET_TEXT_F(MSG_A_STEPS));
-      DWIN_Draw_Label(2, GET_TEXT_F(MSG_B_STEPS));
-      DWIN_Draw_Label(3, GET_TEXT_F(MSG_C_STEPS));
+      dwinDrawLabel(1, GET_TEXT_F(MSG_A_STEPS));
+      dwinDrawLabel(2, GET_TEXT_F(MSG_B_STEPS));
+      dwinDrawLabel(3, GET_TEXT_F(MSG_C_STEPS));
       #if HAS_HOTEND
-        DWIN_Draw_Label(4, GET_TEXT_F(MSG_E_STEPS));
+        dwinDrawLabel(4, GET_TEXT_F(MSG_E_STEPS));
       #endif
     #else
       say_steps_per_mm_en(1); say_x_en(101, 1);     // "Steps-per-mm X"
@@ -3427,27 +3423,27 @@ void Draw_Steps_Menu() {
     #endif
   }
 
-  Draw_Back_First();
-  for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) Draw_Menu_Line(i + 1, ICON_StepX + i);
-  Draw_Edit_Float3(1, planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
-  Draw_Edit_Float3(2, planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
-  Draw_Edit_Float3(3, planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
+  drawBackFirst();
+  for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) drawMenuLine(i + 1, ICON_StepX + i);
+  drawEditFloat3(1, planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
+  drawEditFloat3(2, planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
+  drawEditFloat3(3, planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
   #if HAS_HOTEND
-    Draw_Edit_Float3(4, planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
+    drawEditFloat3(4, planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
   #endif
 }
 
 // Motion
-void HMI_Motion() {
+void hmiMotion() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_motion.inc(1 + MOTION_CASE_TOTAL)) Move_Highlight(1, select_motion.now);
+    if (select_motion.inc(1 + MOTION_CASE_TOTAL)) moveHighlight(1, select_motion.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_motion.dec()) Move_Highlight(-1, select_motion.now);
+    if (select_motion.dec()) moveHighlight(-1, select_motion.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_motion.now) {
@@ -3455,38 +3451,38 @@ void HMI_Motion() {
         checkkey = Control;
         select_control.set(CONTROL_CASE_MOVE);
         index_control = MROWS;
-        Draw_Control_Menu();
+        drawControlMenu();
         break;
       case MOTION_CASE_RATE:
         checkkey = MaxSpeed;
         select_speed.reset();
-        Draw_Max_Speed_Menu();
+        drawMaxSpeedMenu();
         break;
       case MOTION_CASE_ACCEL:
         checkkey = MaxAcceleration;
         select_acc.reset();
-        Draw_Max_Accel_Menu();
+        drawMaxAccelMenu();
         break;
       #if HAS_CLASSIC_JERK
         case MOTION_CASE_JERK:
           checkkey = MaxJerk;
           select_jerk.reset();
-          Draw_Max_Jerk_Menu();
+          drawMaxJerkMenu();
          break;
       #endif
       case MOTION_CASE_STEPS:
         checkkey = Step;
         select_step.reset();
-        Draw_Steps_Menu();
+        drawStepsMenu();
         break;
       default: break;
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
 // Advanced Settings
-void HMI_AdvSet() {
+void hmiAdvSet() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
@@ -3497,7 +3493,7 @@ void HMI_AdvSet() {
         index_advset = select_advset.now;
 
         // Scroll up and draw a blank bottom line
-        Scroll_Menu(DWIN_SCROLL_UP);
+        scrollMenu(DWIN_SCROLL_UP);
 
         //switch (index_advset) {  // Redraw last menu items
         //  default: break;
@@ -3505,7 +3501,7 @@ void HMI_AdvSet() {
 
       }
       else {
-        Move_Highlight(1, select_advset.now + MROWS - index_advset);
+        moveHighlight(1, select_advset.now + MROWS - index_advset);
       }
     }
   }
@@ -3513,14 +3509,14 @@ void HMI_AdvSet() {
     if (select_advset.dec()) {
       if (select_advset.now < index_advset - MROWS) {
         index_advset--;
-        Scroll_Menu(DWIN_SCROLL_DOWN);
+        scrollMenu(DWIN_SCROLL_DOWN);
 
         //switch (index_advset) {  // Redraw first menu items
         //  default: break;
         //}
       }
       else {
-        Move_Highlight(-1, select_advset.now + MROWS - index_advset);
+        moveHighlight(-1, select_advset.now + MROWS - index_advset);
       }
     }
   }
@@ -3530,17 +3526,17 @@ void HMI_AdvSet() {
         checkkey = Control;
         select_control.set(CONTROL_CASE_ADVSET);
         index_control = CONTROL_CASE_ADVSET;
-        Draw_Control_Menu();
+        drawControlMenu();
         break;
 
       #if HAS_HOME_OFFSET
         case ADVSET_CASE_HOMEOFF:
           checkkey = HomeOff;
           select_item.reset();
-          HMI_ValueStruct.Home_OffX_scaled = home_offset.x * 10;
-          HMI_ValueStruct.Home_OffY_scaled = home_offset.y * 10;
-          HMI_ValueStruct.Home_OffZ_scaled = home_offset.z * 10;
-          Draw_HomeOff_Menu();
+          hmiValues.Home_OffX_scaled = home_offset.x * 10;
+          hmiValues.Home_OffY_scaled = home_offset.y * 10;
+          hmiValues.Home_OffZ_scaled = home_offset.z * 10;
+          drawHomeOffMenu();
           break;
       #endif
 
@@ -3548,9 +3544,9 @@ void HMI_AdvSet() {
         case ADVSET_CASE_PROBEOFF:
           checkkey = ProbeOff;
           select_item.reset();
-          HMI_ValueStruct.Probe_OffX_scaled = probe.offset.x * 10;
-          HMI_ValueStruct.Probe_OffY_scaled = probe.offset.y * 10;
-          Draw_ProbeOff_Menu();
+          hmiValues.Probe_OffX_scaled = probe.offset.x * 10;
+          hmiValues.Probe_OffY_scaled = probe.offset.y * 10;
+          drawProbeOffMenu();
           break;
       #endif
 
@@ -3569,153 +3565,153 @@ void HMI_AdvSet() {
       #if ENABLED(POWER_LOSS_RECOVERY)
         case ADVSET_CASE_PWRLOSSR:
           recovery.enable(!recovery.enabled);
-          Draw_Checkbox_Line(ADVSET_CASE_PWRLOSSR + MROWS - index_advset, recovery.enabled);
+          drawCheckboxLine(ADVSET_CASE_PWRLOSSR + MROWS - index_advset, recovery.enabled);
           break;
       #endif
       default: break;
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
 #if HAS_HOME_OFFSET
 
   // Home Offset
-  void HMI_HomeOff() {
+  void hmiHomeOff() {
     EncoderState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     // Avoid flicker by updating only the previous menu
     if (encoder_diffState == ENCODER_DIFF_CW) {
-      if (select_item.inc(1 + 3)) Move_Highlight(1, select_item.now);
+      if (select_item.inc(1 + 3)) moveHighlight(1, select_item.now);
     }
     else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      if (select_item.dec()) Move_Highlight(-1, select_item.now);
+      if (select_item.dec()) moveHighlight(-1, select_item.now);
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       switch (select_item.now) {
         case CASE_BACK:
           checkkey = AdvSet;
           select_advset.set(ADVSET_CASE_HOMEOFF);
-          Draw_AdvancedSettings_Menu();
+          drawAdvancedSettingsMenu();
           break;
         case 1: // Home Offset X
           checkkey = HomeOffX;
-          Draw_Edit_Signed_Float3(1, HMI_ValueStruct.Home_OffX_scaled, true);
-          EncoderRate.enabled = true;
+          drawEditSignedFloat3(1, hmiValues.Home_OffX_scaled, true);
+          encoderRate.enabled = true;
           break;
         case 2: // Home Offset Y
           checkkey = HomeOffY;
-          Draw_Edit_Signed_Float3(2, HMI_ValueStruct.Home_OffY_scaled, true);
-          EncoderRate.enabled = true;
+          drawEditSignedFloat3(2, hmiValues.Home_OffY_scaled, true);
+          encoderRate.enabled = true;
           break;
         case 3: // Home Offset Z
           checkkey = HomeOffZ;
-          Draw_Edit_Signed_Float3(3, HMI_ValueStruct.Home_OffZ_scaled, true);
-          EncoderRate.enabled = true;
+          drawEditSignedFloat3(3, hmiValues.Home_OffZ_scaled, true);
+          encoderRate.enabled = true;
           break;
         default: break;
       }
     }
-    DWIN_UpdateLCD();
+    dwinUpdateLCD();
   }
 
-  void HMI_HomeOffN(const AxisEnum axis, float &posScaled, const_float_t lo, const_float_t hi) {
-    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+  void hmiHomeOffN(const AxisEnum axis, float &posScaled, const_float_t lo, const_float_t hi) {
+    EncoderState encoder_diffState = encoderReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
-    if (Apply_Encoder(encoder_diffState, posScaled)) {
+    if (applyEncoder(encoder_diffState, posScaled)) {
       checkkey = HomeOff;
-      EncoderRate.enabled = false;
+      encoderRate.enabled = false;
       set_home_offset(axis, posScaled / 10);
-      Draw_Edit_Signed_Float3(select_item.now, posScaled);
+      drawEditSignedFloat3(select_item.now, posScaled);
       return;
     }
     LIMIT(posScaled, lo, hi);
-    Draw_Edit_Signed_Float3(select_item.now, posScaled, true);
+    drawEditSignedFloat3(select_item.now, posScaled, true);
   }
 
-  void HMI_HomeOffX() { HMI_HomeOffN(X_AXIS, HMI_ValueStruct.Home_OffX_scaled, -500, 500); }
-  void HMI_HomeOffY() { HMI_HomeOffN(Y_AXIS, HMI_ValueStruct.Home_OffY_scaled, -500, 500); }
-  void HMI_HomeOffZ() { HMI_HomeOffN(Z_AXIS, HMI_ValueStruct.Home_OffZ_scaled,  -20,  20); }
+  void hmiHomeOffX() { hmiHomeOffN(X_AXIS, hmiValues.Home_OffX_scaled, -500, 500); }
+  void hmiHomeOffY() { hmiHomeOffN(Y_AXIS, hmiValues.Home_OffY_scaled, -500, 500); }
+  void hmiHomeOffZ() { hmiHomeOffN(Z_AXIS, hmiValues.Home_OffZ_scaled,  -20,  20); }
 
 #endif // HAS_HOME_OFFSET
 
 #if HAS_ONESTEP_LEVELING
 
   // Probe Offset
-  void HMI_ProbeOff() {
+  void hmiProbeOff() {
     EncoderState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     // Avoid flicker by updating only the previous menu
     if (encoder_diffState == ENCODER_DIFF_CW) {
-      if (select_item.inc(1 + 2)) Move_Highlight(1, select_item.now);
+      if (select_item.inc(1 + 2)) moveHighlight(1, select_item.now);
     }
     else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      if (select_item.dec()) Move_Highlight(-1, select_item.now);
+      if (select_item.dec()) moveHighlight(-1, select_item.now);
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       switch (select_item.now) {
         case CASE_BACK:
           checkkey = AdvSet;
           select_advset.set(ADVSET_CASE_PROBEOFF);
-          Draw_AdvancedSettings_Menu();
+          drawAdvancedSettingsMenu();
           break;
         case 1: // Probe Offset X
           checkkey = ProbeOffX;
-          Draw_Edit_Signed_Float3(1, HMI_ValueStruct.Probe_OffX_scaled, true);
-          EncoderRate.enabled = true;
+          drawEditSignedFloat3(1, hmiValues.Probe_OffX_scaled, true);
+          encoderRate.enabled = true;
           break;
         case 2: // Probe Offset Y
           checkkey = ProbeOffY;
-          Draw_Edit_Signed_Float3(2, HMI_ValueStruct.Probe_OffY_scaled, true);
-          EncoderRate.enabled = true;
+          drawEditSignedFloat3(2, hmiValues.Probe_OffY_scaled, true);
+          encoderRate.enabled = true;
           break;
       }
     }
-    DWIN_UpdateLCD();
+    dwinUpdateLCD();
   }
 
-  void HMI_ProbeOffN(float &posScaled, float &offset_ref) {
-    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+  void hmiProbeOffN(float &posScaled, float &offset_ref) {
+    EncoderState encoder_diffState = encoderReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
-    if (Apply_Encoder(encoder_diffState, posScaled)) {
+    if (applyEncoder(encoder_diffState, posScaled)) {
       checkkey = ProbeOff;
-      EncoderRate.enabled = false;
+      encoderRate.enabled = false;
       offset_ref = posScaled / 10;
-      Draw_Edit_Signed_Float3(select_item.now, posScaled);
+      drawEditSignedFloat3(select_item.now, posScaled);
       return;
     }
     LIMIT(posScaled, -500, 500);
-    Draw_Edit_Signed_Float3(select_item.now, posScaled, true);
+    drawEditSignedFloat3(select_item.now, posScaled, true);
   }
 
-  void HMI_ProbeOffX() { HMI_ProbeOffN(HMI_ValueStruct.Probe_OffX_scaled, probe.offset.x); }
-  void HMI_ProbeOffY() { HMI_ProbeOffN(HMI_ValueStruct.Probe_OffY_scaled, probe.offset.y); }
+  void hmiProbeOffX() { hmiProbeOffN(hmiValues.Probe_OffX_scaled, probe.offset.x); }
+  void hmiProbeOffY() { hmiProbeOffN(hmiValues.Probe_OffY_scaled, probe.offset.y); }
 
 #endif // HAS_ONESTEP_LEVELING
 
 // Info
-void HMI_Info() {
+void hmiInfo() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
   if (encoder_diffState == ENCODER_DIFF_ENTER) {
     #if HAS_ONESTEP_LEVELING
       checkkey = Control;
       select_control.set(CONTROL_CASE_INFO);
-      Draw_Control_Menu();
+      drawControlMenu();
     #else
       select_page.set(3);
-      Goto_MainMenu();
+      gotoMainMenu();
     #endif
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
 // Tune
-void HMI_Tune() {
+void hmiTune() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
@@ -3724,343 +3720,343 @@ void HMI_Tune() {
     if (select_tune.inc(1 + TUNE_CASE_TOTAL)) {
       if (select_tune.now > MROWS && select_tune.now > index_tune) {
         index_tune = select_tune.now;
-        Scroll_Menu(DWIN_SCROLL_UP);
+        scrollMenu(DWIN_SCROLL_UP);
       }
       else
-        Move_Highlight(1, select_tune.now + MROWS - index_tune);
+        moveHighlight(1, select_tune.now + MROWS - index_tune);
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
     if (select_tune.dec()) {
       if (select_tune.now < index_tune - MROWS) {
         index_tune--;
-        Scroll_Menu(DWIN_SCROLL_DOWN);
-        if (index_tune == MROWS) Draw_Back_First();
+        scrollMenu(DWIN_SCROLL_DOWN);
+        if (index_tune == MROWS) drawBackFirst();
       }
       else
-        Move_Highlight(-1, select_tune.now + MROWS - index_tune);
+        moveHighlight(-1, select_tune.now + MROWS - index_tune);
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_tune.now) {
       case 0: { // Back
         select_print.set(0);
-        Goto_PrintProcess();
+        gotoPrintProcess();
       }
       break;
       case TUNE_CASE_SPEED: // Print speed
         checkkey = PrintSpeed;
-        HMI_ValueStruct.print_speed = feedrate_percentage;
-        Draw_Edit_Integer3(TUNE_CASE_SPEED + MROWS - index_tune, HMI_ValueStruct.print_speed, true);
-        EncoderRate.enabled = true;
+        hmiValues.print_speed = feedrate_percentage;
+        drawEditInteger3(TUNE_CASE_SPEED + MROWS - index_tune, hmiValues.print_speed, true);
+        encoderRate.enabled = true;
         break;
       #if HAS_HOTEND
         case TUNE_CASE_TEMP: // Nozzle temp
           checkkey = ETemp;
-          HMI_ValueStruct.E_Temp = thermalManager.degTargetHotend(0);
-          Draw_Edit_Integer3(TUNE_CASE_TEMP + MROWS - index_tune, HMI_ValueStruct.E_Temp, true);
-          EncoderRate.enabled = true;
+          hmiValues.E_Temp = thermalManager.degTargetHotend(0);
+          drawEditInteger3(TUNE_CASE_TEMP + MROWS - index_tune, hmiValues.E_Temp, true);
+          encoderRate.enabled = true;
           break;
       #endif
       #if HAS_HEATED_BED
         case TUNE_CASE_BED: // Bed temp
           checkkey = BedTemp;
-          HMI_ValueStruct.Bed_Temp = thermalManager.degTargetBed();
-          Draw_Edit_Integer3(TUNE_CASE_BED + MROWS - index_tune, HMI_ValueStruct.Bed_Temp, true);
-          EncoderRate.enabled = true;
+          hmiValues.Bed_Temp = thermalManager.degTargetBed();
+          drawEditInteger3(TUNE_CASE_BED + MROWS - index_tune, hmiValues.Bed_Temp, true);
+          encoderRate.enabled = true;
           break;
       #endif
       #if HAS_FAN
         case TUNE_CASE_FAN: // Fan speed
           checkkey = FanSpeed;
-          HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
-          Draw_Edit_Integer3(TUNE_CASE_FAN + MROWS - index_tune, HMI_ValueStruct.Fan_speed, true);
-          EncoderRate.enabled = true;
+          hmiValues.Fan_speed = thermalManager.fan_speed[0];
+          drawEditInteger3(TUNE_CASE_FAN + MROWS - index_tune, hmiValues.Fan_speed, true);
+          encoderRate.enabled = true;
           break;
       #endif
       #if HAS_ZOFFSET_ITEM
         case TUNE_CASE_ZOFF: // Z-offset
           #if ANY(HAS_BED_PROBE, BABYSTEPPING)
             checkkey = Homeoffset;
-            HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
-            Draw_Edit_Signed_Float2(TUNE_CASE_ZOFF + MROWS - index_tune, HMI_ValueStruct.offset_value, true);
-            EncoderRate.enabled = true;
+            hmiValues.offset_value = BABY_Z_VAR * 100;
+            drawEditSignedFloat2(TUNE_CASE_ZOFF + MROWS - index_tune, hmiValues.offset_value, true);
+            encoderRate.enabled = true;
           #else
             // Apply workspace offset, making the current position 0,0,0
             queue.inject(F("G92X0Y0Z0"));
-            HMI_AudioFeedback();
+            hmiAudioFeedback();
           #endif
         break;
       #endif
       default: break;
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
 #if HAS_PREHEAT
 
   // PLA Preheat
-  void HMI_PLAPreheatSetting() {
+  void hmiPLAPreheatSetting() {
     EncoderState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     // Avoid flicker by updating only the previous menu
     if (encoder_diffState == ENCODER_DIFF_CW) {
-      if (select_PLA.inc(1 + PREHEAT_CASE_TOTAL)) Move_Highlight(1, select_PLA.now);
+      if (select_PLA.inc(1 + PREHEAT_CASE_TOTAL)) moveHighlight(1, select_PLA.now);
     }
     else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      if (select_PLA.dec()) Move_Highlight(-1, select_PLA.now);
+      if (select_PLA.dec()) moveHighlight(-1, select_PLA.now);
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       switch (select_PLA.now) {
         case CASE_BACK:
           checkkey = TemperatureID;
           select_temp.now = TEMP_CASE_PLA;
-          HMI_ValueStruct.show_mode = -1;
-          Draw_Temperature_Menu();
+          hmiValues.show_mode = -1;
+          drawTemperatureMenu();
           break;
         #if HAS_HOTEND
           case PREHEAT_CASE_TEMP:
             checkkey = ETemp;
-            HMI_ValueStruct.E_Temp = ui.material_preset[0].hotend_temp;
-            Draw_Edit_Integer3(PREHEAT_CASE_TEMP, ui.material_preset[0].hotend_temp, true);
-            EncoderRate.enabled = true;
+            hmiValues.E_Temp = ui.material_preset[0].hotend_temp;
+            drawEditInteger3(PREHEAT_CASE_TEMP, ui.material_preset[0].hotend_temp, true);
+            encoderRate.enabled = true;
             break;
         #endif
         #if HAS_HEATED_BED
           case PREHEAT_CASE_BED:
             checkkey = BedTemp;
-            HMI_ValueStruct.Bed_Temp = ui.material_preset[0].bed_temp;
-            Draw_Edit_Integer3(PREHEAT_CASE_BED, ui.material_preset[0].bed_temp, true);
-            EncoderRate.enabled = true;
+            hmiValues.Bed_Temp = ui.material_preset[0].bed_temp;
+            drawEditInteger3(PREHEAT_CASE_BED, ui.material_preset[0].bed_temp, true);
+            encoderRate.enabled = true;
             break;
         #endif
         #if HAS_FAN
           case PREHEAT_CASE_FAN:
             checkkey = FanSpeed;
-            HMI_ValueStruct.Fan_speed = ui.material_preset[0].fan_speed;
-            Draw_Edit_Integer3(PREHEAT_CASE_FAN, ui.material_preset[0].fan_speed, true);
-            EncoderRate.enabled = true;
+            hmiValues.Fan_speed = ui.material_preset[0].fan_speed;
+            drawEditInteger3(PREHEAT_CASE_FAN, ui.material_preset[0].fan_speed, true);
+            encoderRate.enabled = true;
             break;
         #endif
         #if ENABLED(EEPROM_SETTINGS)
           case PREHEAT_CASE_SAVE: {
             const bool success = settings.save();
-            HMI_AudioFeedback(success);
+            hmiAudioFeedback(success);
           } break;
         #endif
         default: break;
       }
     }
-    DWIN_UpdateLCD();
+    dwinUpdateLCD();
   }
 
   #if PREHEAT_COUNT > 1
     // ABS Preheat
-    void HMI_ABSPreheatSetting() {
+    void hmiABSPreheatSetting() {
       EncoderState encoder_diffState = get_encoder_state();
       if (encoder_diffState == ENCODER_DIFF_NO) return;
 
       // Avoid flicker by updating only the previous menu
       if (encoder_diffState == ENCODER_DIFF_CW) {
-        if (select_ABS.inc(1 + PREHEAT_CASE_TOTAL)) Move_Highlight(1, select_ABS.now);
+        if (select_ABS.inc(1 + PREHEAT_CASE_TOTAL)) moveHighlight(1, select_ABS.now);
       }
       else if (encoder_diffState == ENCODER_DIFF_CCW) {
-        if (select_ABS.dec()) Move_Highlight(-1, select_ABS.now);
+        if (select_ABS.dec()) moveHighlight(-1, select_ABS.now);
       }
       else if (encoder_diffState == ENCODER_DIFF_ENTER) {
         switch (select_ABS.now) {
           case CASE_BACK:
             checkkey = TemperatureID;
             select_temp.now = TEMP_CASE_ABS;
-            HMI_ValueStruct.show_mode = -1;
-            Draw_Temperature_Menu();
+            hmiValues.show_mode = -1;
+            drawTemperatureMenu();
             break;
           #if HAS_HOTEND
             case PREHEAT_CASE_TEMP:
               checkkey = ETemp;
-              HMI_ValueStruct.E_Temp = ui.material_preset[1].hotend_temp;
-              Draw_Edit_Integer3(PREHEAT_CASE_TEMP, ui.material_preset[1].hotend_temp, true);
-              EncoderRate.enabled = true;
+              hmiValues.E_Temp = ui.material_preset[1].hotend_temp;
+              drawEditInteger3(PREHEAT_CASE_TEMP, ui.material_preset[1].hotend_temp, true);
+              encoderRate.enabled = true;
               break;
           #endif
           #if HAS_HEATED_BED
             case PREHEAT_CASE_BED:
               checkkey = BedTemp;
-              HMI_ValueStruct.Bed_Temp = ui.material_preset[1].bed_temp;
-              Draw_Edit_Integer3(PREHEAT_CASE_BED, ui.material_preset[1].bed_temp, true);
-              EncoderRate.enabled = true;
+              hmiValues.Bed_Temp = ui.material_preset[1].bed_temp;
+              drawEditInteger3(PREHEAT_CASE_BED, ui.material_preset[1].bed_temp, true);
+              encoderRate.enabled = true;
               break;
           #endif
           #if HAS_FAN
             case PREHEAT_CASE_FAN:
               checkkey = FanSpeed;
-              HMI_ValueStruct.Fan_speed = ui.material_preset[1].fan_speed;
-              Draw_Edit_Integer3(PREHEAT_CASE_FAN, ui.material_preset[1].fan_speed, true);
-              EncoderRate.enabled = true;
+              hmiValues.Fan_speed = ui.material_preset[1].fan_speed;
+              drawEditInteger3(PREHEAT_CASE_FAN, ui.material_preset[1].fan_speed, true);
+              encoderRate.enabled = true;
               break;
           #endif
           #if ENABLED(EEPROM_SETTINGS)
             case PREHEAT_CASE_SAVE: {
               const bool success = settings.save();
-              HMI_AudioFeedback(success);
+              hmiAudioFeedback(success);
             } break;
           #endif
           default: break;
         }
       }
-      DWIN_UpdateLCD();
+      dwinUpdateLCD();
     }
   #endif // PREHEAT_COUNT > 1
 
 #endif // HAS_PREHEAT
 
 // Max Speed
-void HMI_MaxSpeed() {
+void hmiMaxSpeed() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_speed.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_speed.now);
+    if (select_speed.inc(1 + 3 + ENABLED(HAS_HOTEND))) moveHighlight(1, select_speed.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_speed.dec()) Move_Highlight(-1, select_speed.now);
+    if (select_speed.dec()) moveHighlight(-1, select_speed.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (WITHIN(select_speed.now, 1, 4)) {
       checkkey = MaxSpeed_value;
-      HMI_flag.feedspeed_axis = AxisEnum(select_speed.now - 1);
-      HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[HMI_flag.feedspeed_axis];
-      Draw_Edit_Integer4(select_speed.now, HMI_ValueStruct.Max_Feedspeed, true);
-      EncoderRate.enabled = true;
+      hmiFlag.feedspeed_axis = AxisEnum(select_speed.now - 1);
+      hmiValues.Max_Feedspeed = planner.settings.max_feedrate_mm_s[hmiFlag.feedspeed_axis];
+      drawEditInteger4(select_speed.now, hmiValues.Max_Feedspeed, true);
+      encoderRate.enabled = true;
     }
     else { // Back
       checkkey = Motion;
       select_motion.now = MOTION_CASE_RATE;
-      Draw_Motion_Menu();
+      drawMotionMenu();
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
 // Max Acceleration
-void HMI_MaxAcceleration() {
+void hmiMaxAcceleration() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_acc.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_acc.now);
+    if (select_acc.inc(1 + 3 + ENABLED(HAS_HOTEND))) moveHighlight(1, select_acc.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_acc.dec()) Move_Highlight(-1, select_acc.now);
+    if (select_acc.dec()) moveHighlight(-1, select_acc.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (WITHIN(select_acc.now, 1, 4)) {
       checkkey = MaxAcceleration_value;
-      HMI_flag.acc_axis = AxisEnum(select_acc.now - 1);
-      HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[HMI_flag.acc_axis];
-      Draw_Edit_Integer4(select_acc.now, HMI_ValueStruct.Max_Acceleration, true);
-      EncoderRate.enabled = true;
+      hmiFlag.acc_axis = AxisEnum(select_acc.now - 1);
+      hmiValues.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[hmiFlag.acc_axis];
+      drawEditInteger4(select_acc.now, hmiValues.Max_Acceleration, true);
+      encoderRate.enabled = true;
     }
     else { // Back
       checkkey = Motion;
       select_motion.now = MOTION_CASE_ACCEL;
-      Draw_Motion_Menu();
+      drawMotionMenu();
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
 #if HAS_CLASSIC_JERK
   // Max Jerk
-  void HMI_MaxJerk() {
+  void hmiMaxJerk() {
     EncoderState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     // Avoid flicker by updating only the previous menu
     if (encoder_diffState == ENCODER_DIFF_CW) {
-      if (select_jerk.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_jerk.now);
+      if (select_jerk.inc(1 + 3 + ENABLED(HAS_HOTEND))) moveHighlight(1, select_jerk.now);
     }
     else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      if (select_jerk.dec()) Move_Highlight(-1, select_jerk.now);
+      if (select_jerk.dec()) moveHighlight(-1, select_jerk.now);
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       if (WITHIN(select_jerk.now, 1, 4)) {
         checkkey = MaxJerk_value;
-        HMI_flag.jerk_axis = AxisEnum(select_jerk.now - 1);
-        HMI_ValueStruct.Max_Jerk_scaled = planner.max_jerk[HMI_flag.jerk_axis] * MINUNITMULT;
-        Draw_Edit_Float3(select_jerk.now, HMI_ValueStruct.Max_Jerk_scaled, true);
-        EncoderRate.enabled = true;
+        hmiFlag.jerk_axis = AxisEnum(select_jerk.now - 1);
+        hmiValues.Max_Jerk_scaled = planner.max_jerk[hmiFlag.jerk_axis] * MINUNITMULT;
+        drawEditFloat3(select_jerk.now, hmiValues.Max_Jerk_scaled, true);
+        encoderRate.enabled = true;
       }
       else { // Back
         checkkey = Motion;
         select_motion.now = MOTION_CASE_JERK;
-        Draw_Motion_Menu();
+        drawMotionMenu();
       }
     }
-    DWIN_UpdateLCD();
+    dwinUpdateLCD();
   }
 #endif // HAS_CLASSIC_JERK
 
 // Step
-void HMI_Step() {
+void hmiStep() {
   EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
   if (encoder_diffState == ENCODER_DIFF_CW) {
-    if (select_step.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_step.now);
+    if (select_step.inc(1 + 3 + ENABLED(HAS_HOTEND))) moveHighlight(1, select_step.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
-    if (select_step.dec()) Move_Highlight(-1, select_step.now);
+    if (select_step.dec()) moveHighlight(-1, select_step.now);
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     if (WITHIN(select_step.now, 1, 4)) {
       checkkey = Step_value;
-      HMI_flag.step_axis = AxisEnum(select_step.now - 1);
-      HMI_ValueStruct.Max_Step_scaled = planner.settings.axis_steps_per_mm[HMI_flag.step_axis] * MINUNITMULT;
-      Draw_Edit_Float3(select_step.now, HMI_ValueStruct.Max_Step_scaled, true);
-      EncoderRate.enabled = true;
+      hmiFlag.step_axis = AxisEnum(select_step.now - 1);
+      hmiValues.Max_Step_scaled = planner.settings.axis_steps_per_mm[hmiFlag.step_axis] * MINUNITMULT;
+      drawEditFloat3(select_step.now, hmiValues.Max_Step_scaled, true);
+      encoderRate.enabled = true;
     }
     else { // Back
       checkkey = Motion;
       select_motion.now = MOTION_CASE_STEPS;
-      Draw_Motion_Menu();
+      drawMotionMenu();
     }
   }
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
-void HMI_Init() {
-  HMI_SDCardInit();
+void hmiInit() {
+  hmiSDCardInit();
 
   for (uint16_t t = 0; t <= 100; t += 2) {
-    DWIN_ICON_Show(ICON, ICON_Bar, 15, 260);
-    DWIN_Draw_Rectangle(1, Color_Bg_Black, 15 + t * 242 / 100, 260, 257, 280);
-    DWIN_UpdateLCD();
+    dwinIconShow(ICON, ICON_Bar, 15, 260);
+    dwinDrawRectangle(1, Color_Bg_Black, 15 + t * 242 / 100, 260, 257, 280);
+    dwinUpdateLCD();
     delay(20);
   }
 
-  HMI_SetLanguage();
+  hmiSetLanguage();
 }
 
-void DWIN_InitScreen() {
-  Encoder_Configuration();
-  HMI_Init();
-  HMI_SetLanguageCache();
-  HMI_StartFrame(true);
+void dwinInitScreen() {
+  encoderConfiguration();
+  hmiInit();
+  hmiSetLanguageCache();
+  hmiStartFrame(true);
 }
 
-void DWIN_Update() {
-  EachMomentUpdate();   // Status update
-  HMI_SDCardUpdate();   // SD card update
-  DWIN_HandleScreen();  // Rotary encoder update
+void dwinUpdate() {
+  eachMomentUpdate();   // Status update
+  hmiSDCardUpdate();   // SD card update
+  dwinHandleScreen();  // Rotary encoder update
 }
 
-void EachMomentUpdate() {
+void eachMomentUpdate() {
   static millis_t next_var_update_ms = 0, next_rts_update_ms = 0;
 
   const millis_t ms = millis();
@@ -4074,9 +4070,9 @@ void EachMomentUpdate() {
 
   if (checkkey == PrintProcess) {
     // if print done
-    if (HMI_flag.print_finish && !HMI_flag.done_confirm_flag) {
-      HMI_flag.print_finish = false;
-      HMI_flag.done_confirm_flag = true;
+    if (hmiFlag.print_finish && !hmiFlag.done_confirm_flag) {
+      hmiFlag.print_finish = false;
+      hmiFlag.done_confirm_flag = true;
 
       TERN_(POWER_LOSS_RECOVERY, recovery.cancel());
 
@@ -4084,22 +4080,22 @@ void EachMomentUpdate() {
 
       // show percent bar and value
       _card_percent = 0;
-      Draw_Print_ProgressBar();
+      drawPrintProgressBar();
 
       // show print done confirm
-      DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 250, DWIN_WIDTH - 1, STATUS_Y);
-      DWIN_ICON_Show(ICON, HMI_IsChinese() ? ICON_Confirm_C : ICON_Confirm_E, 86, 283);
+      dwinDrawRectangle(1, Color_Bg_Black, 0, 250, DWIN_WIDTH - 1, STATUS_Y);
+      dwinIconShow(ICON, hmiIsChinese() ? ICON_Confirm_C : ICON_Confirm_E, 86, 283);
     }
-    else if (HMI_flag.pause_flag != printingIsPaused()) {
+    else if (hmiFlag.pause_flag != printingIsPaused()) {
       // print status update
-      HMI_flag.pause_flag = printingIsPaused();
-      ICON_ResumeOrPause();
+      hmiFlag.pause_flag = printingIsPaused();
+      iconResumeOrPause();
     }
   }
 
   // pause after homing
-  if (HMI_flag.pause_action && printingIsPaused() && !planner.has_blocks_queued()) {
-    HMI_flag.pause_action = false;
+  if (hmiFlag.pause_action && printingIsPaused() && !planner.has_blocks_queued()) {
+    hmiFlag.pause_action = false;
     #if ENABLED(PAUSE_HEAT)
       TERN_(HAS_HOTEND, resume_hotend_temp = thermalManager.degTargetHotend(0));
       TERN_(HAS_HEATED_BED, resume_bed_temp = thermalManager.degTargetBed());
@@ -4115,7 +4111,7 @@ void EachMomentUpdate() {
       last_cardpercentValue = card_pct;
       if (card_pct) {
         _card_percent = card_pct;
-        Draw_Print_ProgressBar();
+        drawPrintProgressBar();
       }
     }
 
@@ -4126,174 +4122,174 @@ void EachMomentUpdate() {
     const uint16_t min = (elapsed.value % 3600) / 60;
     if (last_Printtime != min) { // 1 minute update
       last_Printtime = min;
-      Draw_Print_ProgressElapsed();
+      drawPrintProgressElapsed();
     }
 
     // Estimate remaining time every 20 seconds
     static millis_t next_remain_time_update = 0;
-    if (_card_percent > 1 && ELAPSED(ms, next_remain_time_update) && !HMI_flag.heat_flag) {
+    if (_card_percent > 1 && ELAPSED(ms, next_remain_time_update) && !hmiFlag.heat_flag) {
       _remain_time = (elapsed.value - dwin_heat_time) / (_card_percent * 0.01f) - (elapsed.value - dwin_heat_time);
       next_remain_time_update += DWIN_REMAIN_TIME_UPDATE_INTERVAL;
-      Draw_Print_ProgressRemain();
+      drawPrintProgressRemain();
     }
   }
-  else if (dwin_abort_flag && !HMI_flag.home_flag) { // Print Stop
+  else if (dwin_abort_flag && !hmiFlag.home_flag) { // Print Stop
     dwin_abort_flag = false;
-    HMI_ValueStruct.print_speed = feedrate_percentage = 100;
+    hmiValues.print_speed = feedrate_percentage = 100;
     dwin_zoffset = BABY_Z_VAR;
     select_page.set(0);
-    Goto_MainMenu();
+    gotoMainMenu();
   }
   #if ENABLED(POWER_LOSS_RECOVERY)
     else if (DWIN_lcd_sd_status && recovery.dwin_flag) { // resume print before power off
       recovery.dwin_flag = false;
 
       auto update_selection = [&](const bool sel) {
-        HMI_flag.select_flag = sel;
+        hmiFlag.select_flag = sel;
         const uint16_t c1 = sel ? Color_Bg_Window : Select_Color;
-        DWIN_Draw_Rectangle(0, c1, 25, 306, 126, 345);
-        DWIN_Draw_Rectangle(0, c1, 24, 305, 127, 346);
+        dwinDrawRectangle(0, c1, 25, 306, 126, 345);
+        dwinDrawRectangle(0, c1, 24, 305, 127, 346);
         const uint16_t c2 = sel ? Select_Color : Color_Bg_Window;
-        DWIN_Draw_Rectangle(0, c2, 145, 306, 246, 345);
-        DWIN_Draw_Rectangle(0, c2, 144, 305, 247, 346);
+        dwinDrawRectangle(0, c2, 145, 306, 246, 345);
+        dwinDrawRectangle(0, c2, 144, 305, 247, 346);
       };
 
-      Popup_Window_Resume();
+      popupWindowResume();
       update_selection(true);
 
       char * const name = card.longest_filename();
       const int8_t npos = _MAX(0U, DWIN_WIDTH - strlen(name) * (MENU_CHR_W)) / 2;
-      DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, npos, 252, name);
-      DWIN_UpdateLCD();
+      dwinDrawString(true, font8x16, Popup_Text_Color, Color_Bg_Window, npos, 252, name);
+      dwinUpdateLCD();
 
       bool recovery_flag = true;
       while (recovery_flag) {
-        EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
+        EncoderState encoder_diffState = encoderReceiveAnalyze();
         if (encoder_diffState != ENCODER_DIFF_NO) {
           if (encoder_diffState == ENCODER_DIFF_ENTER) {
             recovery_flag = false;
-            if (HMI_flag.select_flag) break;
+            if (hmiFlag.select_flag) break;
             TERN_(POWER_LOSS_RECOVERY, queue.inject(F("M1000C")));
-            HMI_StartFrame(true);
+            hmiStartFrame(true);
             return;
           }
           else
             update_selection(encoder_diffState == ENCODER_DIFF_CW);
 
-          DWIN_UpdateLCD();
+          dwinUpdateLCD();
         }
       }
 
       select_print.set(0);
-      HMI_ValueStruct.show_mode = 0;
+      hmiValues.show_mode = 0;
       queue.inject(F("M1000"));
-      Goto_PrintProcess();
-      Draw_Status_Area(true);
+      gotoPrintProcess();
+      drawStatusArea(true);
     }
   #endif // POWER_LOSS_RECOVERY
 
-  DWIN_UpdateLCD();
+  dwinUpdateLCD();
 }
 
-void DWIN_HandleScreen() {
+void dwinHandleScreen() {
   switch (checkkey) {
-    case MainMenu:        HMI_MainMenu(); break;
-    case SelectFile:      HMI_SelectFile(); break;
-    case Prepare:         HMI_Prepare(); break;
-    case Control:         HMI_Control(); break;
+    case MainMenu:        hmiMainMenu(); break;
+    case SelectFile:      hmiSelectFile(); break;
+    case Prepare:         hmiPrepare(); break;
+    case Control:         hmiControl(); break;
     case Leveling:        break;
-    case PrintProcess:    HMI_Printing(); break;
-    case Print_window:    HMI_PauseOrStop(); break;
-    case AxisMove:        HMI_AxisMove(); break;
-    case TemperatureID:   HMI_Temperature(); break;
-    case Motion:          HMI_Motion(); break;
-    case AdvSet:          HMI_AdvSet(); break;
+    case PrintProcess:    hmiPrinting(); break;
+    case Print_window:    hmiPauseOrStop(); break;
+    case AxisMove:        hmiAxisMove(); break;
+    case TemperatureID:   hmiTemperature(); break;
+    case Motion:          hmiMotion(); break;
+    case AdvSet:          hmiAdvSet(); break;
     #if HAS_HOME_OFFSET
-      case HomeOff:       HMI_HomeOff(); break;
-      case HomeOffX:      HMI_HomeOffX(); break;
-      case HomeOffY:      HMI_HomeOffY(); break;
-      case HomeOffZ:      HMI_HomeOffZ(); break;
+      case HomeOff:       hmiHomeOff(); break;
+      case HomeOffX:      hmiHomeOffX(); break;
+      case HomeOffY:      hmiHomeOffY(); break;
+      case HomeOffZ:      hmiHomeOffZ(); break;
     #endif
     #if HAS_ONESTEP_LEVELING
-      case ProbeOff:      HMI_ProbeOff(); break;
-      case ProbeOffX:     HMI_ProbeOffX(); break;
-      case ProbeOffY:     HMI_ProbeOffY(); break;
+      case ProbeOff:      hmiProbeOff(); break;
+      case ProbeOffX:     hmiProbeOffX(); break;
+      case ProbeOffY:     hmiProbeOffY(); break;
     #endif
-    case Info:            HMI_Info(); break;
-    case Tune:            HMI_Tune(); break;
+    case Info:            hmiInfo(); break;
+    case Tune:            hmiTune(); break;
     #if HAS_PREHEAT
-      case PLAPreheat:    HMI_PLAPreheatSetting(); break;
+      case PLAPreheat:    hmiPLAPreheatSetting(); break;
       #if PREHEAT_COUNT > 1
-        case ABSPreheat:  HMI_ABSPreheatSetting(); break;
+        case ABSPreheat:  hmiABSPreheatSetting(); break;
       #endif
     #endif
-    case MaxSpeed:        HMI_MaxSpeed(); break;
-    case MaxAcceleration: HMI_MaxAcceleration(); break;
+    case MaxSpeed:        hmiMaxSpeed(); break;
+    case MaxAcceleration: hmiMaxAcceleration(); break;
     #if HAS_CLASSIC_JERK
-      case MaxJerk:       HMI_MaxJerk(); break;
+      case MaxJerk:       hmiMaxJerk(); break;
     #endif
-    case Step:            HMI_Step(); break;
-    case Move_X:          HMI_Move_X(); break;
-    case Move_Y:          HMI_Move_Y(); break;
-    case Move_Z:          HMI_Move_Z(); break;
+    case Step:            hmiStep(); break;
+    case Move_X:          hmiMoveX(); break;
+    case Move_Y:          hmiMoveY(); break;
+    case Move_Z:          hmiMoveZ(); break;
     #if HAS_HOTEND
-      case Extruder:      HMI_Move_E(); break;
-      case ETemp:         HMI_ETemp(); break;
+      case Extruder:      hmiMoveE(); break;
+      case ETemp:         hmiETemp(); break;
     #endif
     #if ANY(HAS_BED_PROBE, BABYSTEPPING)
-      case Homeoffset:    HMI_Zoffset(); break;
+      case Homeoffset:    hmiZoffset(); break;
     #endif
     #if HAS_HEATED_BED
-      case BedTemp:       HMI_BedTemp(); break;
+      case BedTemp:       hmiBedTemp(); break;
     #endif
     #if HAS_PREHEAT && HAS_FAN
-      case FanSpeed:      HMI_FanSpeed(); break;
+      case FanSpeed:      hmiFanSpeed(); break;
     #endif
-    case PrintSpeed:      HMI_PrintSpeed(); break;
-    case MaxSpeed_value:  HMI_MaxFeedspeedXYZE(); break;
-    case MaxAcceleration_value: HMI_MaxAccelerationXYZE(); break;
+    case PrintSpeed:      hmiPrintSpeed(); break;
+    case MaxSpeed_value:  hmiMaxFeedspeedXYZE(); break;
+    case MaxAcceleration_value: hmiMaxAccelerationXYZE(); break;
     #if HAS_CLASSIC_JERK
-      case MaxJerk_value: HMI_MaxJerkXYZE(); break;
+      case MaxJerk_value: hmiMaxJerkXYZE(); break;
     #endif
-    case Step_value:      HMI_StepXYZE(); break;
+    case Step_value:      hmiStepXYZE(); break;
     default: break;
   }
 }
 
-void DWIN_HomingDone() {
-  HMI_flag.home_flag = false;
+void dwinHomingDone() {
+  hmiFlag.home_flag = false;
   dwin_zoffset = TERN0(HAS_BED_PROBE, probe.offset.z);
   if (checkkey == Last_Prepare) {
     checkkey = Prepare;
     select_prepare.now = PREPARE_CASE_HOME;
     index_prepare = MROWS;
-    Draw_Prepare_Menu();
+    drawPrepareMenu();
   }
   else if (checkkey == Back_Main) {
-    HMI_ValueStruct.print_speed = feedrate_percentage = 100;
+    hmiValues.print_speed = feedrate_percentage = 100;
     planner.finish_and_disable();
-    Goto_MainMenu();
+    gotoMainMenu();
   }
 }
 
-void DWIN_LevelingDone() {
-  if (checkkey == Leveling) Goto_MainMenu();
+void dwinLevelingDone() {
+  if (checkkey == Leveling) gotoMainMenu();
 }
 
-void DWIN_StatusChanged(const char * const cstr/*=nullptr*/) {
-  DWIN_Draw_Rectangle(1, Color_Bg_Blue, 0, STATUS_Y, DWIN_WIDTH, STATUS_Y + 24);
+void dwinStatusChanged(const char * const cstr/*=nullptr*/) {
+  dwinDrawRectangle(1, Color_Bg_Blue, 0, STATUS_Y, DWIN_WIDTH, STATUS_Y + 24);
   const int8_t x = _MAX(0U, DWIN_WIDTH - strlen(cstr) * MENU_CHR_W) / 2;
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Blue, x, STATUS_Y + 3, cstr);
-  DWIN_UpdateLCD();
+  dwinDrawString(false, font8x16, Color_White, Color_Bg_Blue, x, STATUS_Y + 3, cstr);
+  dwinUpdateLCD();
 }
 
-void DWIN_StatusChanged(FSTR_P const fstr) {
+void dwinStatusChanged(FSTR_P const fstr) {
   #ifdef __AVR__
     char str[strlen_P(FTOP(fstr)) + 1];
     strcpy_P(str, FTOP(fstr));
-    DWIN_StatusChanged(str);
+    dwinStatusChanged(str);
   #else
-    DWIN_StatusChanged(FTOP(fstr));
+    dwinStatusChanged(FTOP(fstr));
   #endif
 }
 

commit 86c811660ebf0b3fcbae2f34273d4c9d0c22abc4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:30:34 2023 -0500

    üßë‚Äçüíª Remove LOOP macros (#25917)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 3c259e5bf4..af3d1eaeb8 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1891,7 +1891,7 @@ void Redraw_SD_List() {
 
   if (card.isMounted()) {
     // As many files as will fit
-    LOOP_L_N(i, _MIN(nr_sd_menu_items(), MROWS))
+    for (uint8_t i = 0; i < _MIN(nr_sd_menu_items(), MROWS); ++i)
       Draw_SDItem(i, i + 1);
 
     TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());
@@ -2038,7 +2038,7 @@ void Draw_Info_Menu() {
   DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE));
 
   Draw_Back_First();
-  LOOP_L_N(i, 3) {
+  for (uint8_t i = 0; i < 3; ++i) {
     DWIN_ICON_Show(ICON, ICON_PrintSize + i, 26, 99 + i * 73);
     DWIN_Draw_Line(Line_Color, 16, MBASE(2) + i * 73, 256, 156 + i * 73);
   }
@@ -2390,7 +2390,7 @@ void Draw_Move_Menu() {
   if (select_axis.now != CASE_BACK) Draw_Menu_Cursor(select_axis.now);
 
   // Draw separators and icons
-  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MoveX + i);
+  for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) Draw_Menu_Line(i + 1, ICON_MoveX + i);
 }
 
 void Item_Adv_HomeOffsets(const uint8_t row) {
@@ -3264,7 +3264,7 @@ void Draw_Max_Speed_Menu() {
   }
 
   Draw_Back_First();
-  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedX + i);
+  for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) Draw_Menu_Line(i + 1, ICON_MaxSpeedX + i);
   Draw_Edit_Integer4(1, planner.settings.max_feedrate_mm_s[X_AXIS]);
   Draw_Edit_Integer4(2, planner.settings.max_feedrate_mm_s[Y_AXIS]);
   Draw_Edit_Integer4(3, planner.settings.max_feedrate_mm_s[Z_AXIS]);
@@ -3318,7 +3318,7 @@ void Draw_Max_Accel_Menu() {
   }
 
   Draw_Back_First();
-  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxAccX + i);
+  for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) Draw_Menu_Line(i + 1, ICON_MaxAccX + i);
   Draw_Edit_Integer4(1, planner.settings.max_acceleration_mm_per_s2[X_AXIS]);
   Draw_Edit_Integer4(2, planner.settings.max_acceleration_mm_per_s2[Y_AXIS]);
   Draw_Edit_Integer4(3, planner.settings.max_acceleration_mm_per_s2[Z_AXIS]);
@@ -3377,7 +3377,7 @@ void Draw_Max_Accel_Menu() {
     }
 
     Draw_Back_First();
-    LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
+    for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
     Draw_Edit_Float3(1, planner.max_jerk.x * MINUNITMULT);
     Draw_Edit_Float3(2, planner.max_jerk.y * MINUNITMULT);
     Draw_Edit_Float3(3, planner.max_jerk.z * MINUNITMULT);
@@ -3428,7 +3428,7 @@ void Draw_Steps_Menu() {
   }
 
   Draw_Back_First();
-  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_StepX + i);
+  for (uint8_t i = 0; i < 3 + ENABLED(HAS_HOTEND); ++i) Draw_Menu_Line(i + 1, ICON_StepX + i);
   Draw_Edit_Float3(1, planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
   Draw_Edit_Float3(2, planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
   Draw_Edit_Float3(3, planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);

commit 2691167afe02fbbe74b0fdca2c28a49fac635741
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:26:02 2023 -0500

    üßë‚Äçüíª Dump BOTH and EITHER macros (#25908)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 9ae1cf1e06..3c259e5bf4 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -76,7 +76,7 @@
   #include "../../../module/probe.h"
 #endif
 
-#if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
+#if ANY(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
   #include "../../../feature/babystep.h"
 #endif
 
@@ -201,7 +201,7 @@ void HMI_SetLanguageCache() {
 }
 
 void HMI_SetLanguage() {
-  #if BOTH(EEPROM_SETTINGS, IIC_BL24CXX_EEPROM)
+  #if ALL(EEPROM_SETTINGS, IIC_BL24CXX_EEPROM)
     BL24CXX::read(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language, sizeof(HMI_flag.language));
   #endif
   HMI_SetLanguageCache();
@@ -210,7 +210,7 @@ void HMI_SetLanguage() {
 void HMI_ToggleLanguage() {
   HMI_flag.language = HMI_IsChinese() ? DWIN_ENGLISH : DWIN_CHINESE;
   HMI_SetLanguageCache();
-  #if BOTH(EEPROM_SETTINGS, IIC_BL24CXX_EEPROM)
+  #if ALL(EEPROM_SETTINGS, IIC_BL24CXX_EEPROM)
     BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language, sizeof(HMI_flag.language));
   #endif
 }
@@ -475,7 +475,7 @@ void Draw_Back_First(const bool is_sel=true) {
 #define PREPARE_CASE_ZOFF (PREPARE_CASE_HOME + ENABLED(HAS_ZOFFSET_ITEM))
 #define PREPARE_CASE_PLA  (PREPARE_CASE_ZOFF + ENABLED(HAS_PREHEAT))
 #define PREPARE_CASE_ABS  (PREPARE_CASE_PLA + (TERN0(HAS_PREHEAT, PREHEAT_COUNT > 1)))
-#define PREPARE_CASE_COOL (PREPARE_CASE_ABS + EITHER(HAS_HOTEND, HAS_HEATED_BED))
+#define PREPARE_CASE_COOL (PREPARE_CASE_ABS + ANY(HAS_HOTEND, HAS_HEATED_BED))
 #define PREPARE_CASE_LANG (PREPARE_CASE_COOL + 1)
 #define PREPARE_CASE_TOTAL PREPARE_CASE_LANG
 
@@ -1375,7 +1375,7 @@ void HMI_Move_Z() {
     LIMIT(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
     last_zoffset = dwin_zoffset;
     dwin_zoffset = HMI_ValueStruct.offset_value / 100.0f;
-    #if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
+    #if ANY(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
       if (BABYSTEP_ALLOWED()) babystep.add_mm(Z_AXIS, dwin_zoffset - last_zoffset);
     #endif
     Draw_Edit_Signed_Float2(zoff_line, HMI_ValueStruct.offset_value, true);
@@ -2291,10 +2291,10 @@ void HMI_Printing() {
           char cmd[40];
           cmd[0] = '\0';
 
-          #if BOTH(HAS_HEATED_BED, PAUSE_HEAT)
+          #if ALL(HAS_HEATED_BED, PAUSE_HEAT)
             if (resume_bed_temp) sprintf_P(cmd, PSTR("M190 S%i\n"), resume_bed_temp);
           #endif
-          #if BOTH(HAS_HOTEND, PAUSE_HEAT)
+          #if ALL(HAS_HOTEND, PAUSE_HEAT)
             if (resume_hotend_temp) sprintf_P(&cmd[strlen(cmd)], PSTR("M109 S%i\n"), resume_hotend_temp);
           #endif
 
@@ -2701,7 +2701,7 @@ void HMI_Prepare() {
 
       #if HAS_ZOFFSET_ITEM
         case PREPARE_CASE_ZOFF:
-          #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
+          #if ANY(HAS_BED_PROBE, BABYSTEPPING)
             checkkey = Homeoffset;
             HMI_ValueStruct.show_mode = -4;
             HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
@@ -3780,7 +3780,7 @@ void HMI_Tune() {
       #endif
       #if HAS_ZOFFSET_ITEM
         case TUNE_CASE_ZOFF: // Z-offset
-          #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
+          #if ANY(HAS_BED_PROBE, BABYSTEPPING)
             checkkey = Homeoffset;
             HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
             Draw_Edit_Signed_Float2(TUNE_CASE_ZOFF + MROWS - index_tune, HMI_ValueStruct.offset_value, true);
@@ -4240,7 +4240,7 @@ void DWIN_HandleScreen() {
       case Extruder:      HMI_Move_E(); break;
       case ETemp:         HMI_ETemp(); break;
     #endif
-    #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
+    #if ANY(HAS_BED_PROBE, BABYSTEPPING)
       case Homeoffset:    HMI_Zoffset(); break;
     #endif
     #if HAS_HEATED_BED

commit b2f372b20f375852e3e009d490260307e399792c
Author: Krzysztof B≈Ça≈ºewicz <blazewicz.krzysztof@gmail.com>
Date:   Thu May 18 07:38:21 2023 +0200

    üö∏ Unify edit limits for some E3V2 LCDs (#25045)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 73621851df..9ae1cf1e06 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -101,12 +101,6 @@
 #define MIN_PRINT_SPEED  10
 #define MAX_PRINT_SPEED 999
 
-// Feedspeed limit (max feedspeed = DEFAULT_MAX_FEEDRATE * 2)
-#define MIN_MAXFEEDSPEED      1
-#define MIN_MAXACCELERATION   1
-#define MIN_MAXJERK           0.1
-#define MIN_STEP              1
-
 #define FEEDRATE_E      (60)
 
 // Minimum unit (0.1) : multiple (10)
@@ -181,13 +175,6 @@ uint8_t index_file     = MROWS,
 
 bool dwin_abort_flag = false; // Flag to reset feedrate, return to Home
 
-constexpr float default_max_feedrate[]        = DEFAULT_MAX_FEEDRATE;
-constexpr float default_max_acceleration[]    = DEFAULT_MAX_ACCELERATION;
-
-#if HAS_CLASSIC_JERK
-  constexpr float default_max_jerk[]          = { DEFAULT_XJERK, DEFAULT_YJERK, DEFAULT_ZJERK, DEFAULT_EJERK };
-#endif
-
 static uint8_t _card_percent = 0;
 static uint16_t _remain_time = 0;
 
@@ -1568,8 +1555,7 @@ void HMI_MaxFeedspeedXYZE() {
   }
   // MaxFeedspeed limit
   if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
-    NOMORE(HMI_ValueStruct.Max_Feedspeed, default_max_feedrate[HMI_flag.feedspeed_axis] * 2);
-  if (HMI_ValueStruct.Max_Feedspeed < MIN_MAXFEEDSPEED) HMI_ValueStruct.Max_Feedspeed = MIN_MAXFEEDSPEED;
+    LIMIT(HMI_ValueStruct.Max_Feedspeed, min_feedrate_edit_values[HMI_flag.feedspeed_axis], max_feedrate_edit_values[HMI_flag.feedspeed_axis]);
   // MaxFeedspeed value
   Draw_Edit_Integer4(select_speed.now, HMI_ValueStruct.Max_Feedspeed, true);
 }
@@ -1587,8 +1573,7 @@ void HMI_MaxAccelerationXYZE() {
   }
   // MaxAcceleration limit
   if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
-    NOMORE(HMI_ValueStruct.Max_Acceleration, default_max_acceleration[HMI_flag.acc_axis] * 2);
-  if (HMI_ValueStruct.Max_Acceleration < MIN_MAXACCELERATION) HMI_ValueStruct.Max_Acceleration = MIN_MAXACCELERATION;
+    LIMIT(HMI_ValueStruct.Max_Acceleration, min_acceleration_edit_values[HMI_flag.acc_axis], max_acceleration_edit_values[HMI_flag.acc_axis]);
   // MaxAcceleration value
   Draw_Edit_Integer4(select_acc.now, HMI_ValueStruct.Max_Acceleration, true);
 }
@@ -1602,14 +1587,13 @@ void HMI_MaxAccelerationXYZE() {
       checkkey = MaxJerk;
       EncoderRate.enabled = false;
       if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
-        planner.set_max_jerk(HMI_flag.jerk_axis, HMI_ValueStruct.Max_Jerk_scaled / 10);
+        planner.set_max_jerk(HMI_flag.jerk_axis, HMI_ValueStruct.Max_Jerk_scaled / MINUNITMULT);
       Draw_Edit_Float3(select_jerk.now, HMI_ValueStruct.Max_Jerk_scaled);
       return;
     }
     // MaxJerk limit
     if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
-      NOMORE(HMI_ValueStruct.Max_Jerk_scaled, default_max_jerk[HMI_flag.jerk_axis] * 2 * MINUNITMULT);
-    NOLESS(HMI_ValueStruct.Max_Jerk_scaled, (MIN_MAXJERK) * MINUNITMULT);
+      LIMIT(HMI_ValueStruct.Max_Jerk_scaled, min_jerk_edit_values[HMI_flag.jerk_axis] * MINUNITMULT, max_jerk_edit_values[HMI_flag.jerk_axis] * MINUNITMULT);
     // MaxJerk value
     Draw_Edit_Float3(select_jerk.now, HMI_ValueStruct.Max_Jerk_scaled, true);
   }
@@ -1623,14 +1607,13 @@ void HMI_StepXYZE() {
     checkkey = Step;
     EncoderRate.enabled = false;
     if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
-      planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step_scaled / 10;
+      planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step_scaled / MINUNITMULT;
     Draw_Edit_Float3(select_step.now, HMI_ValueStruct.Max_Step_scaled);
     return;
   }
   // Step limit
   if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
-    NOMORE(HMI_ValueStruct.Max_Step_scaled, 999.9 * MINUNITMULT);
-  NOLESS(HMI_ValueStruct.Max_Step_scaled, MIN_STEP);
+    LIMIT(HMI_ValueStruct.Max_Step_scaled, min_steps_edit_values[HMI_flag.step_axis] * MINUNITMULT, max_steps_edit_values[HMI_flag.step_axis] * MINUNITMULT);
   // Step value
   Draw_Edit_Float3(select_step.now, HMI_ValueStruct.Max_Step_scaled, true);
 }

commit 9a7d9e6995f4f66c4b48147ec7876d49d4b3ae77
Author: Martin Turski <turningtides@outlook.de>
Date:   Thu Apr 27 14:05:24 2023 +0200

    üßë‚Äçüíª Optimize PlatformIO source filtering (#25332)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 66baff1611..73621851df 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -45,7 +45,7 @@
   #define JUST_BABYSTEP 1
 #endif
 
-#include "../../fontutils.h"
+#include "../../utf8.h"
 #include "../../marlinui.h"
 
 #include "../../../sd/cardreader.h"

commit 92721d1bf7d3516ffa591bf7fa9b0b03099f5156
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 14 17:45:45 2023 -0500

    üö∏ "Main" => "Main Menu"

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 02bfa624fa..66baff1611 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1273,7 +1273,7 @@ void Goto_MainMenu() {
     DWIN_Frame_TitleCopy(2, 2, 26, 13);   // "Home" etc
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_MAIN));
+      Draw_Title(GET_TEXT_F(MSG_MAIN_MENU));
     #else
       DWIN_Frame_TitleCopy(0, 2, 40, 11); // "Home"
     #endif

commit 5b1f087c5b79fa7797aca5acc22a72570a36b64a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Apr 6 17:24:32 2023 -0500

    üìù Update Ender # labels

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 459b00ae1b..02bfa624fa 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -2243,7 +2243,7 @@ void HMI_SelectFile() {
       card.openAndPrintFile(card.filename);
 
       #if HAS_FAN
-        // All fans on for Ender 3 v2 ?
+        // All fans on for Ender-3 v2 ?
         // The slicer should manage this for us.
         //for (uint8_t i = 0; i < FAN_COUNT; i++)
         //  thermalManager.fan_speed[i] = 255;

commit 06e5273d24776219253a9229621c034ab263cba7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 31 18:18:25 2023 -0500

    üßë‚Äçüíª CardReader adjustments (#25611)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 08d928684a..459b00ae1b 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -411,7 +411,7 @@ void Scroll_Menu(const uint8_t dir) {
 }
 
 inline uint16_t nr_sd_menu_items() {
-  return card.get_num_Files() + !card.flag.workDirIsRoot;
+  return card.get_num_items() + !card.flag.workDirIsRoot;
 }
 
 void Erase_Menu_Text(const uint8_t line) {
@@ -1830,9 +1830,9 @@ void MarlinUI::refresh() { /* Nothing to see here */ }
   void Init_Shift_Name() {
     const bool is_subdir = !card.flag.workDirIsRoot;
     const int8_t filenum = select_file.now - 1 - is_subdir; // Skip "Back" and ".."
-    const uint16_t fileCnt = card.get_num_Files();
+    const int16_t fileCnt = card.get_num_items();
     if (WITHIN(filenum, 0, fileCnt - 1)) {
-      card.getfilename_sorted(SD_ORDER(filenum, fileCnt));
+      card.selectFileByIndexSorted(filenum);
       char * const name = card.longest_filename();
       make_name_without_ext(shift_name, name, 100);
     }
@@ -1857,7 +1857,7 @@ void Draw_SDItem(const uint16_t item, int16_t row=-1) {
     return;
   }
 
-  card.getfilename_sorted(SD_ORDER(item - is_subdir, card.get_num_Files()));
+  card.selectFileByIndexSorted(item - is_subdir);
   char * const name = card.longest_filename();
 
   #if ENABLED(SCROLL_LONG_FILENAMES)
@@ -2223,7 +2223,7 @@ void HMI_SelectFile() {
     }
     else {
       const uint16_t filenum = select_file.now - 1 - hasUpDir;
-      card.getfilename_sorted(SD_ORDER(filenum, card.get_num_Files()));
+      card.selectFileByIndexSorted(filenum);
 
       // Enter that folder!
       if (card.flag.filenameIsDir) {

commit d123ea7346c4a72b08e82e7c876a97296d5c8090
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Nov 11 16:09:26 2022 -0600

    üé® Prefer axis element over index

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 1232c8e0c9..08d928684a 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -3395,11 +3395,11 @@ void Draw_Max_Accel_Menu() {
 
     Draw_Back_First();
     LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
-    Draw_Edit_Float3(1, planner.max_jerk[X_AXIS] * MINUNITMULT);
-    Draw_Edit_Float3(2, planner.max_jerk[Y_AXIS] * MINUNITMULT);
-    Draw_Edit_Float3(3, planner.max_jerk[Z_AXIS] * MINUNITMULT);
+    Draw_Edit_Float3(1, planner.max_jerk.x * MINUNITMULT);
+    Draw_Edit_Float3(2, planner.max_jerk.y * MINUNITMULT);
+    Draw_Edit_Float3(3, planner.max_jerk.z * MINUNITMULT);
     #if HAS_HOTEND
-      Draw_Edit_Float3(4, planner.max_jerk[E_AXIS] * MINUNITMULT);
+      Draw_Edit_Float3(4, planner.max_jerk.e * MINUNITMULT);
     #endif
   }
 #endif

commit 5f2908a117ab45cf9e5a03a39e499979a40bf0f3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 18 19:53:36 2022 -0500

    ‚ôªÔ∏è Small sound / buzz refactor (#24520)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 3ca7627db0..1232c8e0c9 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -2625,15 +2625,13 @@ void Draw_HomeOff_Menu() {
 #include "../../../libs/buzzer.h"
 
 void HMI_AudioFeedback(const bool success=true) {
-  #if HAS_BUZZER
-    if (success) {
-      buzzer.tone(100, 659);
-      buzzer.tone(10, 0);
-      buzzer.tone(100, 698);
-    }
-    else
-      buzzer.tone(40, 440);
-  #endif
+  if (success) {
+    BUZZ(100, 659);
+    BUZZ(10, 0);
+    BUZZ(100, 698);
+  }
+  else
+    BUZZ(40, 440);
 }
 
 // Prepare

commit 640282b8dc5de4ccdfb607b99e795d3eaa1334a7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jun 13 20:43:23 2022 -0500

    üßë‚Äçüíª Apply F() to some LCD / TFT strings
    
    Followup to #24228

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index b2cb1bee30..3ca7627db0 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -4307,9 +4307,13 @@ void DWIN_StatusChanged(const char * const cstr/*=nullptr*/) {
 }
 
 void DWIN_StatusChanged(FSTR_P const fstr) {
-  char str[strlen_P(FTOP(fstr)) + 1];
-  strcpy_P(str, FTOP(fstr));
-  DWIN_StatusChanged(str);
+  #ifdef __AVR__
+    char str[strlen_P(FTOP(fstr)) + 1];
+    strcpy_P(str, FTOP(fstr));
+    DWIN_StatusChanged(str);
+  #else
+    DWIN_StatusChanged(FTOP(fstr));
+  #endif
 }
 
 #endif // DWIN_CREALITY_LCD

commit 310ff2367690a9b3c40cec756f193add76900fe3
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 17 15:05:25 2022 -0500

    üé® Misc. E3V2 DWIN cleanup

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 65da4cb421..b2cb1bee30 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -2728,7 +2728,7 @@ void HMI_Prepare() {
             EncoderRate.enabled = true;
           #else
             // Apply workspace offset, making the current position 0,0,0
-            queue.inject(F("G92 X0 Y0 Z0"));
+            queue.inject(F("G92X0Y0Z0"));
             HMI_AudioFeedback();
           #endif
           break;
@@ -3556,9 +3556,9 @@ void HMI_AdvSet() {
         case ADVSET_CASE_HOMEOFF:
           checkkey = HomeOff;
           select_item.reset();
-          HMI_ValueStruct.Home_OffX_scaled = home_offset[X_AXIS] * 10;
-          HMI_ValueStruct.Home_OffY_scaled = home_offset[Y_AXIS] * 10;
-          HMI_ValueStruct.Home_OffZ_scaled = home_offset[Z_AXIS] * 10;
+          HMI_ValueStruct.Home_OffX_scaled = home_offset.x * 10;
+          HMI_ValueStruct.Home_OffY_scaled = home_offset.y * 10;
+          HMI_ValueStruct.Home_OffZ_scaled = home_offset.z * 10;
           Draw_HomeOff_Menu();
           break;
       #endif
@@ -3806,7 +3806,7 @@ void HMI_Tune() {
             EncoderRate.enabled = true;
           #else
             // Apply workspace offset, making the current position 0,0,0
-            queue.inject(F("G92 X0 Y0 Z0"));
+            queue.inject(F("G92X0Y0Z0"));
             HMI_AudioFeedback();
           #endif
         break;

commit 1e749e4f48f528179213e736c99371843a90b4fb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu May 12 20:13:59 2022 -0500

    üßë‚Äçüíª Misc. LCD cleanup

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 05ac38d226..65da4cb421 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -33,7 +33,7 @@
 //#define USE_STRING_HEADINGS
 //#define USE_STRING_TITLES
 
-#if ENABLED(LCD_BED_LEVELING) && DISABLED(PROBE_MANUALLY) && ANY(AUTO_BED_LEVELING_BILINEAR, AUTO_BED_LEVELING_LINEAR, AUTO_BED_LEVELING_3POINT)
+#if DISABLED(PROBE_MANUALLY) && ANY(AUTO_BED_LEVELING_BILINEAR, AUTO_BED_LEVELING_LINEAR, AUTO_BED_LEVELING_3POINT)
   #define HAS_ONESTEP_LEVELING 1
 #endif
 
@@ -1366,8 +1366,6 @@ void HMI_Move_Z() {
 
 #if HAS_ZOFFSET_ITEM
 
-  bool printer_busy() { return planner.movesplanned() || printingIsActive(); }
-
   void HMI_Zoffset() {
     EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;

commit 623c6b720b0d9b14934fb8ccb895d421ab043cc9
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 12 15:58:28 2022 -0600

    üßë‚Äçüíª Add ExtUI::onLevelingDone, match DWIN to ExtUI

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 7dc06d00f2..05ac38d226 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -4281,7 +4281,7 @@ void DWIN_HandleScreen() {
   }
 }
 
-void DWIN_CompletedHoming() {
+void DWIN_HomingDone() {
   HMI_flag.home_flag = false;
   dwin_zoffset = TERN0(HAS_BED_PROBE, probe.offset.z);
   if (checkkey == Last_Prepare) {
@@ -4297,7 +4297,7 @@ void DWIN_CompletedHoming() {
   }
 }
 
-void DWIN_CompletedLeveling() {
+void DWIN_LevelingDone() {
   if (checkkey == Leveling) Goto_MainMenu();
 }
 

commit 79b38e0e14074b52e0aeb98b08a686a99a9b1aad
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Fri Mar 11 15:06:49 2022 -0500

    üö∏ Update Ender3 V2/S1 Pro UI (#23878)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index f20260e43d..7dc06d00f2 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -471,15 +471,6 @@ void Draw_Back_First(const bool is_sel=true) {
   if (is_sel) Draw_Menu_Cursor(0);
 }
 
-template <typename T>
-inline bool Apply_Encoder(const EncoderState &encoder_diffState, T &valref) {
-  if (encoder_diffState == ENCODER_DIFF_CW)
-    valref += EncoderRate.encoderMoveValue;
-  else if (encoder_diffState == ENCODER_DIFF_CCW)
-    valref -= EncoderRate.encoderMoveValue;
-  return encoder_diffState == ENCODER_DIFF_ENTER;
-}
-
 //
 // Draw Menus
 //
@@ -1296,15 +1287,6 @@ void Goto_MainMenu() {
   TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)();
 }
 
-inline EncoderState get_encoder_state() {
-  static millis_t Encoder_ms = 0;
-  const millis_t ms = millis();
-  if (PENDING(ms, Encoder_ms)) return ENCODER_DIFF_NO;
-  const EncoderState state = Encoder_ReceiveAnalyze();
-  if (state != ENCODER_DIFF_NO) Encoder_ms = ms + ENCODER_WAIT_MS;
-  return state;
-}
-
 void HMI_Plan_Move(const feedRate_t fr_mm_s) {
   if (!planner.is_full()) {
     planner.synchronize();
@@ -4086,6 +4068,13 @@ void HMI_Init() {
   HMI_SetLanguage();
 }
 
+void DWIN_InitScreen() {
+  Encoder_Configuration();
+  HMI_Init();
+  HMI_SetLanguageCache();
+  HMI_StartFrame(true);
+}
+
 void DWIN_Update() {
   EachMomentUpdate();   // Status update
   HMI_SDCardUpdate();   // SD card update

commit 0564cb188f1a74dc9ecfb55b793f4225424a9ca4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 5 10:30:17 2022 -0600

    üö∏ Enhanced UI => Professional UI - with updates (#23624)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index f17d97cc7c..f20260e43d 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -91,9 +91,6 @@
 #ifndef MACHINE_SIZE
   #define MACHINE_SIZE STRINGIFY(X_BED_SIZE) "x" STRINGIFY(Y_BED_SIZE) "x" STRINGIFY(Z_MAX_POS)
 #endif
-#ifndef CORP_WEBSITE
-  #define CORP_WEBSITE WEBSITE_URL
-#endif
 
 #define PAUSE_HEAT
 

commit d5f2334140e6f8ead29d3648b371547ebe72c7aa
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Jan 22 10:14:47 2022 -0600

    ‚ôªÔ∏è Adjust LCD init, contrast default, settings load

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 03f08ac184..f17d97cc7c 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1834,6 +1834,9 @@ void make_name_without_ext(char *dst, char *src, size_t maxlen=MENU_CHAR_LIMIT)
 
 void HMI_SDCardInit() { card.cdroot(); }
 
+// Initialize or re-initialize the LCD
+void MarlinUI::init_lcd() { DWIN_Startup(); }
+
 void MarlinUI::refresh() { /* Nothing to see here */ }
 
 #if HAS_LCD_BRIGHTNESS

commit 0026430835eb4d707cc3d14e44c887e0ad9f39ed
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Sun Jan 9 02:24:56 2022 -0500

    ü©π Reset DWIN CrealityUI print progress on start (#23481)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 3eed9650c1..03f08ac184 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1754,7 +1754,7 @@ void update_variable() {
     if (_new_hotend_target)
       Draw_Stat_Int(25 + 4 * STAT_CHR_W + 6, 384, _hotendtarget);
 
-    static int16_t _flow = planner.flow_percentage[0];
+    static int16_t _flow = 0;
     if (_flow != planner.flow_percentage[0]) {
       _flow = planner.flow_percentage[0];
       Draw_Stat_Int(116 + 2 * STAT_CHR_W, 417, _flow);
@@ -1768,7 +1768,7 @@ void update_variable() {
       Draw_Stat_Int(25 + 4 * STAT_CHR_W + 6, 417, _bedtarget);
   #endif
 
-  static int16_t _feedrate = 100;
+  static int16_t _feedrate = 0;
   if (_feedrate != feedrate_percentage) {
     _feedrate = feedrate_percentage;
     Draw_Stat_Int(116 + 2 * STAT_CHR_W, 384, _feedrate);
@@ -2269,6 +2269,8 @@ void HMI_SelectFile() {
         //  thermalManager.fan_speed[i] = 255;
       #endif
 
+      _card_percent = 0;
+      _remain_time = 0;
       Goto_PrintProcess();
     }
   }
@@ -4176,10 +4178,7 @@ void EachMomentUpdate() {
   }
   #if ENABLED(POWER_LOSS_RECOVERY)
     else if (DWIN_lcd_sd_status && recovery.dwin_flag) { // resume print before power off
-      static bool recovery_flag = false;
-
       recovery.dwin_flag = false;
-      recovery_flag = true;
 
       auto update_selection = [&](const bool sel) {
         HMI_flag.select_flag = sel;
@@ -4199,6 +4198,7 @@ void EachMomentUpdate() {
       DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, npos, 252, name);
       DWIN_UpdateLCD();
 
+      bool recovery_flag = true;
       while (recovery_flag) {
         EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
         if (encoder_diffState != ENCODER_DIFF_NO) {

commit 1bd921d6a69412686fa4b31c4c1e5710de9840cf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jan 6 05:07:47 2022 -0600

    üé® Misc. cleanup, comments

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index adf8f3771f..3eed9650c1 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -2760,7 +2760,10 @@ void HMI_Prepare() {
       #endif
 
       #if HAS_HOTEND || HAS_HEATED_BED
-        case PREPARE_CASE_COOL: thermalManager.cooldown(); break;
+        case PREPARE_CASE_COOL:
+          thermalManager.cooldown();
+          ui.reset_status();
+          break;
       #endif
 
       case PREPARE_CASE_LANG:

commit 70e31bff45165dd07375cd6140fc0a72468e0894
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 27 21:36:06 2021 -0500

    üé® Standard 'cooldown' method

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 82623d7c7d..adf8f3771f 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -2735,6 +2735,7 @@ void HMI_Prepare() {
         queue.inject_P(G28_STR); // G28 will set home_flag
         Popup_Window_Home();
         break;
+
       #if HAS_ZOFFSET_ITEM
         case PREPARE_CASE_ZOFF:
           #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
@@ -2750,6 +2751,7 @@ void HMI_Prepare() {
           #endif
           break;
       #endif
+
       #if HAS_PREHEAT
         case PREPARE_CASE_PLA: ui.preheat_all(0); break;
         #if PREHEAT_COUNT > 1
@@ -2758,18 +2760,14 @@ void HMI_Prepare() {
       #endif
 
       #if HAS_HOTEND || HAS_HEATED_BED
-        case PREPARE_CASE_COOL:
-          TERN_(HAS_FAN, thermalManager.zero_fan_speeds());
-          #if HAS_HOTEND || HAS_HEATED_BED
-            thermalManager.disable_all_heaters();
-          #endif
-          break;
+        case PREPARE_CASE_COOL: thermalManager.cooldown(); break;
       #endif
 
       case PREPARE_CASE_LANG:
         HMI_ToggleLanguage();
         Draw_Prepare_Menu();
         break;
+
       default: break;
     }
   }

commit b09038fcc72bc8df4ec8a7014597586e0b0390ca
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 27 20:01:44 2021 -0500

    üé® Standard material presets behavior

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index a27762d71e..82623d7c7d 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -166,8 +166,14 @@ typedef struct {
 
 select_t select_page{0}, select_file{0}, select_print{0}, select_prepare{0}
        , select_control{0}, select_axis{0}, select_temp{0}, select_motion{0}, select_tune{0}
-       , select_advset{0}, select_PLA{0}, select_ABS{0}
-       , select_speed{0}, select_acc{0}, select_jerk{0}, select_step{0}, select_item{0};
+       , select_advset{0}, select_speed{0}, select_acc{0}, select_jerk{0}, select_step{0}, select_item{0};
+
+#if HAS_PREHEAT
+  select_t select_PLA{0};
+  #if PREHEAT_COUNT > 1
+    select_t select_ABS{0};
+  #endif
+#endif
 
 uint8_t index_file     = MROWS,
         index_prepare  = MROWS,
@@ -492,8 +498,8 @@ inline bool Apply_Encoder(const EncoderState &encoder_diffState, T &valref) {
 #define PREPARE_CASE_DISA  2
 #define PREPARE_CASE_HOME  3
 #define PREPARE_CASE_ZOFF (PREPARE_CASE_HOME + ENABLED(HAS_ZOFFSET_ITEM))
-#define PREPARE_CASE_PLA  (PREPARE_CASE_ZOFF + ENABLED(HAS_HOTEND))
-#define PREPARE_CASE_ABS  (PREPARE_CASE_PLA + ENABLED(HAS_HOTEND))
+#define PREPARE_CASE_PLA  (PREPARE_CASE_ZOFF + ENABLED(HAS_PREHEAT))
+#define PREPARE_CASE_ABS  (PREPARE_CASE_PLA + (TERN0(HAS_PREHEAT, PREHEAT_COUNT > 1)))
 #define PREPARE_CASE_COOL (PREPARE_CASE_ABS + EITHER(HAS_HOTEND, HAS_HEATED_BED))
 #define PREPARE_CASE_LANG (PREPARE_CASE_COOL + 1)
 #define PREPARE_CASE_TOTAL PREPARE_CASE_LANG
@@ -517,8 +523,8 @@ inline bool Apply_Encoder(const EncoderState &encoder_diffState, T &valref) {
 #define TEMP_CASE_TEMP (0 + ENABLED(HAS_HOTEND))
 #define TEMP_CASE_BED  (TEMP_CASE_TEMP + ENABLED(HAS_HEATED_BED))
 #define TEMP_CASE_FAN  (TEMP_CASE_BED + ENABLED(HAS_FAN))
-#define TEMP_CASE_PLA  (TEMP_CASE_FAN + ENABLED(HAS_HOTEND))
-#define TEMP_CASE_ABS  (TEMP_CASE_PLA + ENABLED(HAS_HOTEND))
+#define TEMP_CASE_PLA  (TEMP_CASE_FAN + ENABLED(HAS_PREHEAT))
+#define TEMP_CASE_ABS  (TEMP_CASE_PLA + (TERN0(HAS_PREHEAT, PREHEAT_COUNT > 1)))
 #define TEMP_CASE_TOTAL TEMP_CASE_ABS
 
 #define PREHEAT_CASE_TEMP (0 + ENABLED(HAS_HOTEND))
@@ -785,6 +791,8 @@ void Draw_Prepare_Menu() {
     #if PREHEAT_COUNT > 1
       if (PVISI(PREPARE_CASE_ABS)) Item_Prepare_ABS(PSCROL(PREPARE_CASE_ABS));    // Preheat ABS
     #endif
+  #endif
+  #if HAS_HOTEND || HAS_HEATED_BED
     if (PVISI(PREPARE_CASE_COOL)) Item_Prepare_Cool(PSCROL(PREPARE_CASE_COOL));   // Cooldown
   #endif
   if (PVISI(PREPARE_CASE_LANG)) Item_Prepare_Lang(PSCROL(PREPARE_CASE_LANG));     // Language CN/EN
@@ -2664,10 +2672,10 @@ void HMI_Prepare() {
         // Draw "More" icon for sub-menus
         if (index_prepare < 7) Draw_More_Icon(MROWS - index_prepare + 1);
 
-        #if HAS_HOTEND
+        #if PREHEAT_COUNT > 1
           if (index_prepare == PREPARE_CASE_ABS) Item_Prepare_ABS(MROWS);
         #endif
-        #if HAS_PREHEAT
+        #if HAS_HOTEND || HAS_HEATED_BED
           if (index_prepare == PREPARE_CASE_COOL) Item_Prepare_Cool(MROWS);
         #endif
         if (index_prepare == PREPARE_CASE_LANG) Item_Prepare_Lang(MROWS);
@@ -2743,16 +2751,13 @@ void HMI_Prepare() {
           break;
       #endif
       #if HAS_PREHEAT
-        case PREPARE_CASE_PLA:
-          TERN_(HAS_HOTEND, thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0));
-          TERN_(HAS_HEATED_BED, thermalManager.setTargetBed(ui.material_preset[0].bed_temp));
-          TERN_(HAS_FAN, thermalManager.set_fan_speed(0, ui.material_preset[0].fan_speed));
-          break;
-        case PREPARE_CASE_ABS:
-          TERN_(HAS_HOTEND, thermalManager.setTargetHotend(ui.material_preset[1].hotend_temp, 0));
-          TERN_(HAS_HEATED_BED, thermalManager.setTargetBed(ui.material_preset[1].bed_temp));
-          TERN_(HAS_FAN, thermalManager.set_fan_speed(0, ui.material_preset[1].fan_speed));
-          break;
+        case PREPARE_CASE_PLA: ui.preheat_all(0); break;
+        #if PREHEAT_COUNT > 1
+          case PREPARE_CASE_ABS: ui.preheat_all(1); break;
+        #endif
+      #endif
+
+      #if HAS_HOTEND || HAS_HEATED_BED
         case PREPARE_CASE_COOL:
           TERN_(HAS_FAN, thermalManager.zero_fan_speeds());
           #if HAS_HOTEND || HAS_HEATED_BED
@@ -2760,6 +2765,7 @@ void HMI_Prepare() {
           #endif
           break;
       #endif
+
       case PREPARE_CASE_LANG:
         HMI_ToggleLanguage();
         Draw_Prepare_Menu();
@@ -2784,9 +2790,11 @@ void Draw_Temperature_Menu() {
     #if HAS_FAN
       Item_AreaCopy(115, 134, 170, 146, TEMP_CASE_FAN);
     #endif
-    #if HAS_HOTEND
+    #if HAS_PREHEAT
       Item_AreaCopy(100, 89, 178, 101, TEMP_CASE_PLA);
-      Item_AreaCopy(180, 89, 260, 100, TEMP_CASE_ABS);
+      #if PREHEAT_COUNT > 1
+        Item_AreaCopy(180, 89, 260, 100, TEMP_CASE_ABS);
+      #endif
     #endif
   }
   else {
@@ -2805,30 +2813,33 @@ void Draw_Temperature_Menu() {
       #if HAS_FAN
         DWIN_Draw_Label(TEMP_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
       #endif
-      #if HAS_HOTEND
+      #if HAS_PREHEAT
         DWIN_Draw_Label(TEMP_CASE_PLA, F(PREHEAT_1_LABEL " Preheat Settings"));
-        DWIN_Draw_Label(TEMP_CASE_ABS, F(PREHEAT_2_LABEL " Preheat Settings"));
+        #if PREHEAT_COUNT > 1
+          DWIN_Draw_Label(TEMP_CASE_ABS, F(PREHEAT_2_LABEL " Preheat Settings"));
+        #endif
       #endif
     #else
       #if HAS_HOTEND
-        Item_AreaCopy(197, 104, 238, 114, TEMP_CASE_TEMP);    // "Nozzle"
-        Item_AreaCopy(1,  89,  83, 101, TEMP_CASE_TEMP, 44);  // "Temperature"
+        Item_AreaCopy(197, 104, 238, 114, TEMP_CASE_TEMP);      // "Nozzle"
+        Item_AreaCopy(1,  89,  83, 101, TEMP_CASE_TEMP, 44);    // "Temperature"
       #endif
       #if HAS_HEATED_BED
-        Item_AreaCopy(240, 104, 264, 114, TEMP_CASE_BED);     // "Bed"
-        Item_AreaCopy(1,  89,  83, 101, TEMP_CASE_BED, 27);   // "Temperature"
+        Item_AreaCopy(240, 104, 264, 114, TEMP_CASE_BED);       // "Bed"
+        Item_AreaCopy(1,  89,  83, 101, TEMP_CASE_BED, 27);     // "Temperature"
       #endif
       #if HAS_FAN
-        Item_AreaCopy(  1, 119,  61, 132, TEMP_CASE_FAN);     // "Fan speed"
+        Item_AreaCopy(  1, 119,  61, 132, TEMP_CASE_FAN);       // "Fan speed"
       #endif
-      #if HAS_HOTEND
-        Item_AreaCopy(107,  76, 156,  86, TEMP_CASE_PLA);     // "Preheat"
-        say_pla_en(52, TEMP_CASE_PLA);                        // "PLA"
-        Item_AreaCopy(150, 135, 202, 148, TEMP_CASE_PLA, 79); // "Settings"
-
-        Item_AreaCopy(107,  76, 156,  86, TEMP_CASE_ABS);     // "Preheat"
-        say_abs_en(52, TEMP_CASE_ABS);                        // "ABS"
-        Item_AreaCopy(150, 135, 202, 148, TEMP_CASE_ABS, 81); // "Settings"
+      #if HAS_PREHEAT
+        Item_AreaCopy(107,  76, 156,  86, TEMP_CASE_PLA);       // "Preheat"
+        say_pla_en(52, TEMP_CASE_PLA);                          // "PLA"
+        Item_AreaCopy(150, 135, 202, 148, TEMP_CASE_PLA, 79);   // "Settings"
+        #if PREHEAT_COUNT > 1
+          Item_AreaCopy(107,  76, 156,  86, TEMP_CASE_ABS);     // "Preheat"
+          say_abs_en(52, TEMP_CASE_ABS);                        // "ABS"
+          Item_AreaCopy(150, 135, 202, 148, TEMP_CASE_ABS, 81); // "Settings"
+        #endif
       #endif
     #endif
   }
@@ -2851,12 +2862,12 @@ void Draw_Temperature_Menu() {
     _TMENU_ICON(TEMP_CASE_FAN);
     Draw_Edit_Integer3(i, thermalManager.fan_speed[0]);
   #endif
-  #if HAS_HOTEND
+  #if HAS_PREHEAT
     // PLA/ABS items have submenus
-    _TMENU_ICON(TEMP_CASE_PLA);
-    Draw_More_Icon(i);
-    _TMENU_ICON(TEMP_CASE_ABS);
-    Draw_More_Icon(i);
+    _TMENU_ICON(TEMP_CASE_PLA); Draw_More_Icon(i);
+    #if PREHEAT_COUNT > 1
+      _TMENU_ICON(TEMP_CASE_ABS); Draw_More_Icon(i);
+    #endif
   #endif
 }
 
@@ -3076,6 +3087,7 @@ void HMI_Temperature() {
           EncoderRate.enabled = true;
           break;
       #endif
+
       #if HAS_PREHEAT
         case TEMP_CASE_PLA: {
           checkkey = PLAPreheat;
@@ -3153,7 +3165,8 @@ void HMI_Temperature() {
             Draw_Menu_Line(++i, ICON_WriteEEPROM);
           #endif
         } break;
-      #endif
+      #endif // HAS_PREHEAT
+
       #if PREHEAT_COUNT > 1
         case TEMP_CASE_ABS: { // ABS preheat setting
           checkkey = ABSPreheat;
@@ -3236,7 +3249,7 @@ void HMI_Temperature() {
 
         } break;
 
-      #endif // HAS_HOTEND
+      #endif // PREHEAT_COUNT > 1
     }
   }
   DWIN_UpdateLCD();
@@ -3579,14 +3592,12 @@ void HMI_AdvSet() {
 
       #if HAS_HOTEND
         case ADVSET_CASE_HEPID:
-          thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0);
           thermalManager.PID_autotune(ui.material_preset[0].hotend_temp, H_E0, 10, true);
           break;
       #endif
 
       #if HAS_HEATED_BED
         case ADVSET_CASE_BEDPID:
-          thermalManager.setTargetBed(ui.material_preset[0].bed_temp);
           thermalManager.PID_autotune(ui.material_preset[0].bed_temp, H_BED, 10, true);
           break;
       #endif
@@ -3881,63 +3892,65 @@ void HMI_Tune() {
     DWIN_UpdateLCD();
   }
 
-  // ABS Preheat
-  void HMI_ABSPreheatSetting() {
-    EncoderState encoder_diffState = get_encoder_state();
-    if (encoder_diffState == ENCODER_DIFF_NO) return;
-
-    // Avoid flicker by updating only the previous menu
-    if (encoder_diffState == ENCODER_DIFF_CW) {
-      if (select_ABS.inc(1 + PREHEAT_CASE_TOTAL)) Move_Highlight(1, select_ABS.now);
-    }
-    else if (encoder_diffState == ENCODER_DIFF_CCW) {
-      if (select_ABS.dec()) Move_Highlight(-1, select_ABS.now);
-    }
-    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-      switch (select_ABS.now) {
-        case CASE_BACK:
-          checkkey = TemperatureID;
-          select_temp.now = TEMP_CASE_ABS;
-          HMI_ValueStruct.show_mode = -1;
-          Draw_Temperature_Menu();
-          break;
-        #if HAS_HOTEND
-          case PREHEAT_CASE_TEMP:
-            checkkey = ETemp;
-            HMI_ValueStruct.E_Temp = ui.material_preset[1].hotend_temp;
-            Draw_Edit_Integer3(PREHEAT_CASE_TEMP, ui.material_preset[1].hotend_temp, true);
-            EncoderRate.enabled = true;
-            break;
-        #endif
-        #if HAS_HEATED_BED
-          case PREHEAT_CASE_BED:
-            checkkey = BedTemp;
-            HMI_ValueStruct.Bed_Temp = ui.material_preset[1].bed_temp;
-            Draw_Edit_Integer3(PREHEAT_CASE_BED, ui.material_preset[1].bed_temp, true);
-            EncoderRate.enabled = true;
-            break;
-        #endif
-        #if HAS_FAN
-          case PREHEAT_CASE_FAN:
-            checkkey = FanSpeed;
-            HMI_ValueStruct.Fan_speed = ui.material_preset[1].fan_speed;
-            Draw_Edit_Integer3(PREHEAT_CASE_FAN, ui.material_preset[1].fan_speed, true);
-            EncoderRate.enabled = true;
+  #if PREHEAT_COUNT > 1
+    // ABS Preheat
+    void HMI_ABSPreheatSetting() {
+      EncoderState encoder_diffState = get_encoder_state();
+      if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+      // Avoid flicker by updating only the previous menu
+      if (encoder_diffState == ENCODER_DIFF_CW) {
+        if (select_ABS.inc(1 + PREHEAT_CASE_TOTAL)) Move_Highlight(1, select_ABS.now);
+      }
+      else if (encoder_diffState == ENCODER_DIFF_CCW) {
+        if (select_ABS.dec()) Move_Highlight(-1, select_ABS.now);
+      }
+      else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+        switch (select_ABS.now) {
+          case CASE_BACK:
+            checkkey = TemperatureID;
+            select_temp.now = TEMP_CASE_ABS;
+            HMI_ValueStruct.show_mode = -1;
+            Draw_Temperature_Menu();
             break;
-        #endif
-        #if ENABLED(EEPROM_SETTINGS)
-          case PREHEAT_CASE_SAVE: {
-            const bool success = settings.save();
-            HMI_AudioFeedback(success);
-          } break;
-        #endif
-        default: break;
+          #if HAS_HOTEND
+            case PREHEAT_CASE_TEMP:
+              checkkey = ETemp;
+              HMI_ValueStruct.E_Temp = ui.material_preset[1].hotend_temp;
+              Draw_Edit_Integer3(PREHEAT_CASE_TEMP, ui.material_preset[1].hotend_temp, true);
+              EncoderRate.enabled = true;
+              break;
+          #endif
+          #if HAS_HEATED_BED
+            case PREHEAT_CASE_BED:
+              checkkey = BedTemp;
+              HMI_ValueStruct.Bed_Temp = ui.material_preset[1].bed_temp;
+              Draw_Edit_Integer3(PREHEAT_CASE_BED, ui.material_preset[1].bed_temp, true);
+              EncoderRate.enabled = true;
+              break;
+          #endif
+          #if HAS_FAN
+            case PREHEAT_CASE_FAN:
+              checkkey = FanSpeed;
+              HMI_ValueStruct.Fan_speed = ui.material_preset[1].fan_speed;
+              Draw_Edit_Integer3(PREHEAT_CASE_FAN, ui.material_preset[1].fan_speed, true);
+              EncoderRate.enabled = true;
+              break;
+          #endif
+          #if ENABLED(EEPROM_SETTINGS)
+            case PREHEAT_CASE_SAVE: {
+              const bool success = settings.save();
+              HMI_AudioFeedback(success);
+            } break;
+          #endif
+          default: break;
+        }
       }
+      DWIN_UpdateLCD();
     }
-    DWIN_UpdateLCD();
-  }
+  #endif // PREHEAT_COUNT > 1
 
-#endif
+#endif // HAS_PREHEAT
 
 // Max Speed
 void HMI_MaxSpeed() {
@@ -4241,7 +4254,9 @@ void DWIN_HandleScreen() {
     case Tune:            HMI_Tune(); break;
     #if HAS_PREHEAT
       case PLAPreheat:    HMI_PLAPreheatSetting(); break;
-      case ABSPreheat:    HMI_ABSPreheatSetting(); break;
+      #if PREHEAT_COUNT > 1
+        case ABSPreheat:  HMI_ABSPreheatSetting(); break;
+      #endif
     #endif
     case MaxSpeed:        HMI_MaxSpeed(); break;
     case MaxAcceleration: HMI_MaxAcceleration(); break;

commit 1d80464ba77bc576426f15af28a633bf48d769ad
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 27 21:15:58 2021 -0500

    üé® Define HAS_PREHEAT conditional

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 5114e8a38a..a27762d71e 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -165,14 +165,9 @@ typedef struct {
 } select_t;
 
 select_t select_page{0}, select_file{0}, select_print{0}, select_prepare{0}
-         , select_control{0}, select_axis{0}, select_temp{0}, select_motion{0}, select_tune{0}
-         , select_advset{0}, select_PLA{0}, select_ABS{0}
-         , select_speed{0}
-         , select_acc{0}
-         , select_jerk{0}
-         , select_step{0}
-         , select_item{0}
-         ;
+       , select_control{0}, select_axis{0}, select_temp{0}, select_motion{0}, select_tune{0}
+       , select_advset{0}, select_PLA{0}, select_ABS{0}
+       , select_speed{0}, select_acc{0}, select_jerk{0}, select_step{0}, select_item{0};
 
 uint8_t index_file     = MROWS,
         index_prepare  = MROWS,
@@ -700,7 +695,7 @@ void Item_Prepare_Home(const uint8_t row) {
 
 #endif
 
-#if HAS_HOTEND
+#if HAS_PREHEAT
   void Item_Prepare_PLA(const uint8_t row) {
     if (HMI_IsChinese())
       Item_AreaCopy(100, 89, 151, 101, row);
@@ -715,22 +710,22 @@ void Item_Prepare_Home(const uint8_t row) {
     Draw_Menu_Line(row, ICON_PLAPreheat);
   }
 
-  void Item_Prepare_ABS(const uint8_t row) {
-    if (HMI_IsChinese())
-      Item_AreaCopy(180,  89, 233, 100, row);
-    else {
-      #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(row, F("Preheat " PREHEAT_2_LABEL));
-      #else
-        Item_AreaCopy(108,  76, 155,  87, row); // "Preheat"
-        say_abs_en(52, row);                    // "ABS"
-      #endif
+  #if PREHEAT_COUNT > 1
+    void Item_Prepare_ABS(const uint8_t row) {
+      if (HMI_IsChinese())
+        Item_AreaCopy(180,  89, 233, 100, row);
+      else {
+        #ifdef USE_STRING_TITLES
+          DWIN_Draw_Label(row, F("Preheat " PREHEAT_2_LABEL));
+        #else
+          Item_AreaCopy(108,  76, 155,  87, row); // "Preheat"
+          say_abs_en(52, row);                    // "ABS"
+        #endif
+      }
+      Draw_Menu_Line(row, ICON_ABSPreheat);
     }
-    Draw_Menu_Line(row, ICON_ABSPreheat);
-  }
-#endif
+  #endif
 
-#if HAS_PREHEAT
   void Item_Prepare_Cool(const uint8_t row) {
     if (HMI_IsChinese())
       Item_AreaCopy(1, 104,  56, 117, row);
@@ -785,11 +780,11 @@ void Draw_Prepare_Menu() {
   #if HAS_ZOFFSET_ITEM
     if (PVISI(PREPARE_CASE_ZOFF)) Item_Prepare_Offset(PSCROL(PREPARE_CASE_ZOFF)); // Edit Z-Offset / Babystep / Set Home Offset
   #endif
-  #if HAS_HOTEND
-    if (PVISI(PREPARE_CASE_PLA)) Item_Prepare_PLA(PSCROL(PREPARE_CASE_PLA));      // Preheat PLA
-    if (PVISI(PREPARE_CASE_ABS)) Item_Prepare_ABS(PSCROL(PREPARE_CASE_ABS));      // Preheat ABS
-  #endif
   #if HAS_PREHEAT
+    if (PVISI(PREPARE_CASE_PLA)) Item_Prepare_PLA(PSCROL(PREPARE_CASE_PLA));      // Preheat PLA
+    #if PREHEAT_COUNT > 1
+      if (PVISI(PREPARE_CASE_ABS)) Item_Prepare_ABS(PSCROL(PREPARE_CASE_ABS));    // Preheat ABS
+    #endif
     if (PVISI(PREPARE_CASE_COOL)) Item_Prepare_Cool(PSCROL(PREPARE_CASE_COOL));   // Cooldown
   #endif
   if (PVISI(PREPARE_CASE_LANG)) Item_Prepare_Lang(PSCROL(PREPARE_CASE_LANG));     // Language CN/EN
@@ -1425,25 +1420,34 @@ void HMI_Move_Z() {
     uint8_t temp_line;
     switch (HMI_ValueStruct.show_mode) {
       case -1: temp_line = TEMP_CASE_TEMP; break;
-      case -2: temp_line = PREHEAT_CASE_TEMP; break;
-      case -3: temp_line = PREHEAT_CASE_TEMP; break;
+      #if HAS_PREHEAT
+        case -2: temp_line = PREHEAT_CASE_TEMP; break;
+        #if PREHEAT_COUNT > 1
+          case -3: temp_line = PREHEAT_CASE_TEMP; break;
+        #endif
+      #endif
       default: temp_line = TUNE_CASE_TEMP + MROWS - index_tune;
     }
     if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.E_Temp)) {
       EncoderRate.enabled = false;
-      if (HMI_ValueStruct.show_mode == -2) {
-        checkkey = PLAPreheat;
-        ui.material_preset[0].hotend_temp = HMI_ValueStruct.E_Temp;
-        Draw_Edit_Integer3(temp_line, ui.material_preset[0].hotend_temp);
-        return;
-      }
-      else if (HMI_ValueStruct.show_mode == -3) {
-        checkkey = ABSPreheat;
-        ui.material_preset[1].hotend_temp = HMI_ValueStruct.E_Temp;
-        Draw_Edit_Integer3(temp_line, ui.material_preset[1].hotend_temp);
-        return;
-      }
-      else if (HMI_ValueStruct.show_mode == -1) // Temperature
+      #if HAS_PREHEAT
+        if (HMI_ValueStruct.show_mode == -2) {
+          checkkey = PLAPreheat;
+          ui.material_preset[0].hotend_temp = HMI_ValueStruct.E_Temp;
+          Draw_Edit_Integer3(temp_line, ui.material_preset[0].hotend_temp);
+          return;
+        }
+        #if PREHEAT_COUNT > 1
+          if (HMI_ValueStruct.show_mode == -3) {
+            checkkey = ABSPreheat;
+            ui.material_preset[1].hotend_temp = HMI_ValueStruct.E_Temp;
+            Draw_Edit_Integer3(temp_line, ui.material_preset[1].hotend_temp);
+            return;
+          }
+        #endif
+      #endif
+
+      if (HMI_ValueStruct.show_mode == -1) // Temperature
         checkkey = TemperatureID;
       else
         checkkey = Tune;
@@ -1467,28 +1471,33 @@ void HMI_Move_Z() {
     uint8_t bed_line;
     switch (HMI_ValueStruct.show_mode) {
       case -1: bed_line = TEMP_CASE_BED; break;
-      case -2: bed_line = PREHEAT_CASE_BED; break;
-      case -3: bed_line = PREHEAT_CASE_BED; break;
+      #if HAS_PREHEAT
+        case -2: bed_line = PREHEAT_CASE_BED; break;
+        #if PREHEAT_COUNT > 1
+          case -3: bed_line = PREHEAT_CASE_BED; break;
+        #endif
+      #endif
       default: bed_line = TUNE_CASE_BED + MROWS - index_tune;
     }
     if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Bed_Temp)) {
       EncoderRate.enabled = false;
-      if (HMI_ValueStruct.show_mode == -2) {
-        checkkey = PLAPreheat;
-        ui.material_preset[0].bed_temp = HMI_ValueStruct.Bed_Temp;
-        Draw_Edit_Integer3(bed_line, ui.material_preset[0].bed_temp);
-        return;
-      }
-      else if (HMI_ValueStruct.show_mode == -3) {
-        checkkey = ABSPreheat;
-        ui.material_preset[1].bed_temp = HMI_ValueStruct.Bed_Temp;
-        Draw_Edit_Integer3(bed_line, ui.material_preset[1].bed_temp);
-        return;
-      }
-      else if (HMI_ValueStruct.show_mode == -1)
-        checkkey = TemperatureID;
-      else
-        checkkey = Tune;
+      #if HAS_PREHEAT
+        if (HMI_ValueStruct.show_mode == -2) {
+          checkkey = PLAPreheat;
+          ui.material_preset[0].bed_temp = HMI_ValueStruct.Bed_Temp;
+          Draw_Edit_Integer3(bed_line, ui.material_preset[0].bed_temp);
+          return;
+        }
+        #if PREHEAT_COUNT > 1
+          if (HMI_ValueStruct.show_mode == -3) {
+            checkkey = ABSPreheat;
+            ui.material_preset[1].bed_temp = HMI_ValueStruct.Bed_Temp;
+            Draw_Edit_Integer3(bed_line, ui.material_preset[1].bed_temp);
+            return;
+          }
+        #endif
+      #endif
+      checkkey = HMI_ValueStruct.show_mode == -1 ? TemperatureID : Tune;
       Draw_Edit_Integer3(bed_line, HMI_ValueStruct.Bed_Temp);
       thermalManager.setTargetBed(HMI_ValueStruct.Bed_Temp);
       return;
@@ -1522,16 +1531,15 @@ void HMI_Move_Z() {
         Draw_Edit_Integer3(fan_line, ui.material_preset[0].fan_speed);
         return;
       }
-      else if (HMI_ValueStruct.show_mode == -3) {
-        checkkey = ABSPreheat;
-        ui.material_preset[1].fan_speed = HMI_ValueStruct.Fan_speed;
-        Draw_Edit_Integer3(fan_line, ui.material_preset[1].fan_speed);
-        return;
-      }
-      else if (HMI_ValueStruct.show_mode == -1)
-        checkkey = TemperatureID;
-      else
-        checkkey = Tune;
+      #if PREHEAT_COUNT > 1
+        if (HMI_ValueStruct.show_mode == -3) {
+          checkkey = ABSPreheat;
+          ui.material_preset[1].fan_speed = HMI_ValueStruct.Fan_speed;
+          Draw_Edit_Integer3(fan_line, ui.material_preset[1].fan_speed);
+          return;
+        }
+      #endif
+      checkkey = HMI_ValueStruct.show_mode == -1 ? TemperatureID : Tune;
       Draw_Edit_Integer3(fan_line, HMI_ValueStruct.Fan_speed);
       thermalManager.set_fan_speed(0, HMI_ValueStruct.Fan_speed);
       return;
@@ -3068,7 +3076,7 @@ void HMI_Temperature() {
           EncoderRate.enabled = true;
           break;
       #endif
-      #if HAS_HOTEND
+      #if HAS_PREHEAT
         case TEMP_CASE_PLA: {
           checkkey = PLAPreheat;
           select_PLA.reset();
@@ -3145,7 +3153,8 @@ void HMI_Temperature() {
             Draw_Menu_Line(++i, ICON_WriteEEPROM);
           #endif
         } break;
-
+      #endif
+      #if PREHEAT_COUNT > 1
         case TEMP_CASE_ABS: { // ABS preheat setting
           checkkey = ABSPreheat;
           select_ABS.reset();

commit 3b9bea6f80f02b76f6b71c6c1dcdb751e3611d8e
Author: tome9111991 <57866234+tome9111991@users.noreply.github.com>
Date:   Sat Oct 30 00:49:12 2021 +0200

    üêõ Fix E3V2 (CrealityUI) Tune/Prepare > Zoffset (#23040)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 0f8a739728..5114e8a38a 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -615,7 +615,7 @@ void Draw_Edit_Float3(const uint8_t row, const uint16_t value, const bool active
 }
 
 void Draw_Edit_Signed_Float2(const uint8_t row, const float value, const bool active=false) {
-  DWIN_Draw_Signed_Float(font8x16, active ? Select_Color : Color_Bg_Black, 2, UNITFDIGITS, 220 + 8 - UNITFDIGITS * 8, EBASE(row), value);
+  DWIN_Draw_Signed_Float(font8x16, active ? Select_Color : Color_Bg_Black, 2, UNITFDIGITS + 1, 220 + 8 - UNITFDIGITS * 8, EBASE(row), value);
 }
 
 void Draw_Edit_Signed_Float3(const uint8_t row, const float value, const bool active=false) {

commit 2199ae77c80aa419a580f9ed8dc2f11ecddd6912
Author: tome9111991 <57866234+tome9111991@users.noreply.github.com>
Date:   Wed Oct 27 21:58:32 2021 +0200

    üêõ Fix E3V2 (CrealityUI) position display (#23023)
    
    Followup to #23005, #22778

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 3326ccb1f3..0f8a739728 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1659,7 +1659,7 @@ void _update_axis_value(const AxisEnum axis, const uint16_t x, const uint16_t y,
     else if (blink && draw_empty)
       DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, x, y, F("     "));
     else
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, x, y, p * 10);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, x, y, p);
   }
 }
 
@@ -1769,11 +1769,11 @@ void update_variable() {
   if (BABY_Z_VAR != _offset) {
     _offset = BABY_Z_VAR;
     if (BABY_Z_VAR < 0) {
-      Draw_Stat_Float(207, 417, -_offset * 100);
+      Draw_Stat_Float(207, 417, -_offset);
       DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
     }
     else {
-      Draw_Stat_Float(207, 417, _offset * 100);
+      Draw_Stat_Float(207, 417, _offset);
       DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
     }
   }

commit ee28a14e8e7f6b33fe5813dbedcd85380207c345
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Oct 15 00:24:08 2021 -0500

    üé® Refactor Host Actions as singleton

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index d5abe977e5..3326ccb1f3 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -2363,7 +2363,7 @@ void HMI_PauseOrStop() {
         card.abortFilePrintSoon();                     // Let the main loop handle SD abort
         dwin_abort_flag = true;                        // Reset feedrate, return to Home
         #ifdef ACTION_ON_CANCEL
-          host_action_cancel();
+          hostui.cancel();
         #endif
         Popup_Window_Home(true);
         if (HMI_flag.home_flag) planner.synchronize(); // Wait for planner moves to finish!

commit 7f1286a11f87065c4e666985e679cf9c77d668bf
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 17:05:11 2021 -0500

    üé® Apply F() to status message

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 5b1d36fdae..d5abe977e5 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -4287,16 +4287,16 @@ void DWIN_CompletedLeveling() {
   if (checkkey == Leveling) Goto_MainMenu();
 }
 
-void DWIN_StatusChanged(const char *text) {
+void DWIN_StatusChanged(const char * const cstr/*=nullptr*/) {
   DWIN_Draw_Rectangle(1, Color_Bg_Blue, 0, STATUS_Y, DWIN_WIDTH, STATUS_Y + 24);
-  const int8_t x = _MAX(0U, DWIN_WIDTH - strlen_P(text) * MENU_CHR_W) / 2;
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Blue, x, STATUS_Y + 3, F(text));
+  const int8_t x = _MAX(0U, DWIN_WIDTH - strlen(cstr) * MENU_CHR_W) / 2;
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Blue, x, STATUS_Y + 3, cstr);
   DWIN_UpdateLCD();
 }
 
-void DWIN_StatusChanged_P(PGM_P const pstr) {
-  char str[strlen_P((const char*)pstr) + 1];
-  strcpy_P(str, (const char*)pstr);
+void DWIN_StatusChanged(FSTR_P const fstr) {
+  char str[strlen_P(FTOP(fstr)) + 1];
+  strcpy_P(str, FTOP(fstr));
   DWIN_StatusChanged(str);
 }
 

commit 417e2530ebc5b6c74ac34adaba8be552b407383a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 21:11:31 2021 -0500

    üé® Apply F() to G-code suite and queue

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 54fa6f941b..5b1d36fdae 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -2352,7 +2352,7 @@ void HMI_PauseOrStop() {
     if (select_print.now == PRINT_PAUSE_RESUME) {
       if (HMI_flag.select_flag) {
         HMI_flag.pause_action = true;
-        queue.inject_P(PSTR("M25"));
+        queue.inject(F("M25"));
       }
       Goto_PrintProcess();
     }
@@ -2711,7 +2711,7 @@ void HMI_Prepare() {
         #endif
         break;
 
-      case PREPARE_CASE_DISA: queue.inject_P(PSTR("M84")); break;
+      case PREPARE_CASE_DISA: queue.inject(F("M84")); break;
 
       case PREPARE_CASE_HOME: // Homing
         checkkey = Last_Prepare;
@@ -2729,7 +2729,7 @@ void HMI_Prepare() {
             EncoderRate.enabled = true;
           #else
             // Apply workspace offset, making the current position 0,0,0
-            queue.inject_P(PSTR("G92 X0 Y0 Z0"));
+            queue.inject(F("G92 X0 Y0 Z0"));
             HMI_AudioFeedback();
           #endif
           break;
@@ -2944,7 +2944,7 @@ void HMI_Control() {
   void HMI_Leveling() {
     Popup_Window_Leveling();
     DWIN_UpdateLCD();
-    queue.inject_P(PSTR("G28O\nG29"));
+    queue.inject(F("G28O\nG29"));
   }
 #endif
 
@@ -3803,7 +3803,7 @@ void HMI_Tune() {
             EncoderRate.enabled = true;
           #else
             // Apply workspace offset, making the current position 0,0,0
-            queue.inject_P(PSTR("G92 X0 Y0 Z0"));
+            queue.inject(F("G92 X0 Y0 Z0"));
             HMI_AudioFeedback();
           #endif
         break;
@@ -4112,7 +4112,7 @@ void EachMomentUpdate() {
       TERN_(HAS_HEATED_BED, resume_bed_temp = thermalManager.degTargetBed());
       thermalManager.disable_all_heaters();
     #endif
-    queue.inject_P(PSTR("G1 F1200 X0 Y0"));
+    queue.inject(F("G1 F1200 X0 Y0"));
   }
 
   if (card.isPrinting() && checkkey == PrintProcess) { // print process
@@ -4182,7 +4182,7 @@ void EachMomentUpdate() {
           if (encoder_diffState == ENCODER_DIFF_ENTER) {
             recovery_flag = false;
             if (HMI_flag.select_flag) break;
-            TERN_(POWER_LOSS_RECOVERY, queue.inject_P(PSTR("M1000C")));
+            TERN_(POWER_LOSS_RECOVERY, queue.inject(F("M1000C")));
             HMI_StartFrame(true);
             return;
           }
@@ -4195,7 +4195,7 @@ void EachMomentUpdate() {
 
       select_print.set(0);
       HMI_ValueStruct.show_mode = 0;
-      queue.inject_P(PSTR("M1000"));
+      queue.inject(F("M1000"));
       Goto_PrintProcess();
       Draw_Status_Area(true);
     }

commit 64a919da2a6dbe8b529c3471935a6d632420ca3a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 05:59:03 2021 -0500

    üé® Apply F() to E3V2 titles, popups

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 006ff5db26..54fa6f941b 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -359,12 +359,8 @@ inline void Clear_Title_Bar() {
   DWIN_Draw_Box(1, Color_Bg_Blue, 0, 0, DWIN_WIDTH, TITLE_HEIGHT);
 }
 
-void Draw_Title(const char * const title) {
-  DWIN_Draw_String(false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, (char*)title);
-}
-
-void Draw_Title(FSTR_P title) {
-  DWIN_Draw_String(false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, (char*)title);
+void Draw_Title(FSTR_P ftitle) {
+  DWIN_Draw_String(false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, ftitle);
 }
 
 inline void Clear_Menu_Area() {
@@ -420,18 +416,25 @@ inline uint16_t nr_sd_menu_items() {
   return card.get_num_Files() + !card.flag.workDirIsRoot;
 }
 
+void Erase_Menu_Text(const uint8_t line) {
+  DWIN_Draw_Rectangle(1, Color_Bg_Black, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
+}
+
 void Draw_Menu_Icon(const uint8_t line, const uint8_t icon) {
   DWIN_ICON_Show(ICON, icon, 26, MBASE(line) - 3);
 }
 
-void Erase_Menu_Text(const uint8_t line) {
-  DWIN_Draw_Rectangle(1, Color_Bg_Black, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
+void _Decorate_Menu_Item(const uint8_t line, const uint8_t icon, bool more) {
+  if (icon) Draw_Menu_Icon(line, icon);
+  if (more) Draw_More_Icon(line);
 }
-
 void Draw_Menu_Item(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
   if (label) DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, (char*)label);
-  if (icon) Draw_Menu_Icon(line, icon);
-  if (more) Draw_More_Icon(line);
+  _Decorate_Menu_Item(line, icon, more);
+}
+void Draw_Menu_Item(const uint8_t line, const uint8_t icon=0, FSTR_P const flabel=nullptr, bool more=false) {
+  if (flabel) DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, flabel);
+  _Decorate_Menu_Item(line, icon, more);
 }
 
 void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
@@ -439,13 +442,14 @@ void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const
   DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
 
-void Draw_Menu_LineF(const uint8_t line, const uint8_t icon=0, FSTR_P label=nullptr, bool more=false) {
-  Draw_Menu_Line(line, icon, (char*)label, more);
+void Draw_Menu_Line(const uint8_t line, const uint8_t icon, FSTR_P const flabel, bool more=false) {
+  Draw_Menu_Item(line, icon, flabel, more);
+  DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
 
 void Draw_Checkbox_Line(const uint8_t line, const bool ison) {
   const uint16_t x = 225, y = EBASE(line) - 2;
-  DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, x + 5, y, F(ison ? "X" : " "));
+  DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, x + 5, y, ison ? F("X") : F(" "));
   DWIN_Draw_Rectangle(0, Color_White, x + 2, y + 2, x + 16, y + 16);
 }
 
@@ -1853,7 +1857,7 @@ void Draw_SDItem(const uint16_t item, int16_t row=-1) {
   if (row < 0) row = item + 1 + MROWS - index_file;
   const bool is_subdir = !card.flag.workDirIsRoot;
   if (is_subdir && item == 0) {
-    Draw_Menu_Line(row, ICON_Folder, "..");
+    Draw_Menu_Line(row, ICON_Folder, F(".."));
     return;
   }
 
@@ -2531,7 +2535,7 @@ void Item_HomeOffs_X(const uint8_t row) {
   }
   else {
     #ifdef USE_STRING_TITLES
-      Draw_Menu_LineF(row, ICON_HomeOffsetX, GET_TEXT_F(MSG_HOME_OFFSET_X));
+      Draw_Menu_Line(row, ICON_HomeOffsetX, GET_TEXT_F(MSG_HOME_OFFSET_X));
     #else
       say_home_offs_en(row); say_x_en(75, row);   // "Home Offset X"
     #endif
@@ -2546,7 +2550,7 @@ void Item_HomeOffs_Y(const uint8_t row) {
   }
   else {
     #ifdef USE_STRING_TITLES
-      Draw_Menu_LineF(row, ICON_HomeOffsetY, GET_TEXT_F(MSG_HOME_OFFSET_Y));
+      Draw_Menu_Line(row, ICON_HomeOffsetY, GET_TEXT_F(MSG_HOME_OFFSET_Y));
     #else
       say_home_offs_en(row); say_y_en(75, row);   // "Home Offset X"
     #endif
@@ -2561,7 +2565,7 @@ void Item_HomeOffs_Z(const uint8_t row) {
   }
   else {
     #ifdef USE_STRING_TITLES
-      Draw_Menu_LineF(row, ICON_HomeOffsetZ, GET_TEXT_F(MSG_HOME_OFFSET_Z));
+      Draw_Menu_Line(row, ICON_HomeOffsetZ, GET_TEXT_F(MSG_HOME_OFFSET_Z));
     #else
       say_home_offs_en(row); say_z_en(75, row);   // "Home Offset Z"
     #endif
@@ -2604,8 +2608,8 @@ void Draw_HomeOff_Menu() {
         DWIN_Frame_TitleCopy(124, 431, 91, 12);                             // "Probe Offsets"
       #endif
       #ifdef USE_STRING_TITLES
-        Draw_Menu_LineF(1, ICON_ProbeOffsetX, GET_TEXT_F(MSG_ZPROBE_XOFFSET));  // Probe X Offset
-        Draw_Menu_LineF(2, ICON_ProbeOffsetY, GET_TEXT_F(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
+        Draw_Menu_Line(1, ICON_ProbeOffsetX, GET_TEXT_F(MSG_ZPROBE_XOFFSET));  // Probe X Offset
+        Draw_Menu_Line(2, ICON_ProbeOffsetY, GET_TEXT_F(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
       #else
         say_probe_offs_en(1); say_x_en(75, 1);  // "Probe Offset X"
         say_probe_offs_en(2); say_y_en(75, 2);  // "Probe Offset Y"
@@ -3090,7 +3094,7 @@ void HMI_Temperature() {
           }
           else {
             #ifdef USE_STRING_HEADINGS
-              Draw_Title(PREHEAT_1_LABEL " Settings"); // TODO: GET_TEXT_F
+              Draw_Title(F(PREHEAT_1_LABEL " Settings")); // TODO: GET_TEXT_F
             #else
               DWIN_Frame_TitleCopy(56, 15, 85, 14);                       // "Temperature"  TODO: "PLA Settings"
             #endif
@@ -3169,7 +3173,7 @@ void HMI_Temperature() {
           }
           else {
             #ifdef USE_STRING_HEADINGS
-              Draw_Title("ABS Settings"); // TODO: GET_TEXT_F
+              Draw_Title(F("ABS Settings")); // TODO: GET_TEXT_F
             #else
               DWIN_Frame_TitleCopy(56, 15, 85, 14);                       // "Temperature"  TODO: "ABS Settings"
             #endif
@@ -3252,7 +3256,7 @@ void Draw_Max_Speed_Menu() {
   }
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title("Max Speed (mm/s)"); // TODO: GET_TEXT_F
+      Draw_Title(F("Max Speed (mm/s)")); // TODO: GET_TEXT_F
     #else
       DWIN_Frame_TitleCopy(144, 16, 46, 11);                  // "Max Speed (mm/s)"
     #endif

commit 1ac7a56a823b5012250dd7259a9a7a46d3bfcde5
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Sat Sep 25 05:59:43 2021 -0500

    üêõ E3V2 Brightness followup (#22821)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 0a52c9b965..006ff5db26 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1816,6 +1816,10 @@ void HMI_SDCardInit() { card.cdroot(); }
 
 void MarlinUI::refresh() { /* Nothing to see here */ }
 
+#if HAS_LCD_BRIGHTNESS
+  void MarlinUI::_set_brightness() { DWIN_LCD_Brightness(backlight ? brightness : 0); }
+#endif
+
 #if ENABLED(SCROLL_LONG_FILENAMES)
 
   char shift_name[LONG_FILENAME_LENGTH + 1];

commit a7fdaabd54475e5f4dec3afad693b0c623bf7bf6
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Sep 25 02:27:07 2021 -0500

    üé® Updated string macros

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 05aa9f0ec3..0a52c9b965 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -363,7 +363,7 @@ void Draw_Title(const char * const title) {
   DWIN_Draw_String(false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, (char*)title);
 }
 
-void Draw_Title(const __FlashStringHelper * title) {
+void Draw_Title(FSTR_P title) {
   DWIN_Draw_String(false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, (char*)title);
 }
 
@@ -439,7 +439,7 @@ void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const
   DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
 
-void Draw_Menu_LineF(const uint8_t line, const uint8_t icon=0, const __FlashStringHelper *label=nullptr, bool more=false) {
+void Draw_Menu_LineF(const uint8_t line, const uint8_t icon=0, FSTR_P label=nullptr, bool more=false) {
   Draw_Menu_Line(line, icon, (char*)label, more);
 }
 
@@ -589,7 +589,7 @@ void say_steps_per_mm_en(const uint8_t row) {
 void DWIN_Draw_Label(const uint8_t row, char *string) {
   DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(row), string);
 }
-void DWIN_Draw_Label(const uint8_t row, const __FlashStringHelper *title) {
+void DWIN_Draw_Label(const uint8_t row, FSTR_P title) {
   DWIN_Draw_Label(row, (char*)title);
 }
 

commit 5b5a8798f8fe202e86c008088f847a3edb51cc71
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Sep 15 19:48:29 2021 -0500

    üé® Consolidate Ender-3 V2 DWIN common code (#22778)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 5593147b7a..05aa9f0ec3 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -138,7 +138,7 @@ constexpr uint16_t MROWS = TROWS - 1,   // Last Row Index
 
 // Value Init
 HMI_value_t HMI_ValueStruct;
-HMI_Flag_t HMI_flag{0};
+HMI_flag_t HMI_flag{0};
 
 millis_t dwin_heat_time = 0;
 
@@ -470,7 +470,7 @@ void Draw_Back_First(const bool is_sel=true) {
 }
 
 template <typename T>
-inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, T &valref) {
+inline bool Apply_Encoder(const EncoderState &encoder_diffState, T &valref) {
   if (encoder_diffState == ENCODER_DIFF_CW)
     valref += EncoderRate.encoderMoveValue;
   else if (encoder_diffState == ENCODER_DIFF_CCW)
@@ -593,7 +593,7 @@ void DWIN_Draw_Label(const uint8_t row, const __FlashStringHelper *title) {
   DWIN_Draw_Label(row, (char*)title);
 }
 
-void DWIN_Draw_Signed_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, long value) {
+void DWIN_Draw_Signed_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, int32_t value) {
   DWIN_Draw_String(true, size, Color_White, bColor, x - 8, y, value < 0 ? F("-") : F(" "));
   DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, value < 0 ? -value : value);
 }
@@ -607,7 +607,7 @@ void Draw_Edit_Integer4(const uint8_t row, const uint16_t value, const bool acti
 }
 
 void Draw_Edit_Float3(const uint8_t row, const uint16_t value, const bool active=false) {
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 3, UNITFDIGITS, 220 - UNITFDIGITS * 8, EBASE(row), value);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 3, UNITFDIGITS, 220 - UNITFDIGITS * 8, EBASE(row), (int32_t)value);
 }
 
 void Draw_Edit_Signed_Float2(const uint8_t row, const float value, const bool active=false) {
@@ -1292,11 +1292,11 @@ void Goto_MainMenu() {
   TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)();
 }
 
-inline ENCODER_DiffState get_encoder_state() {
+inline EncoderState get_encoder_state() {
   static millis_t Encoder_ms = 0;
   const millis_t ms = millis();
   if (PENDING(ms, Encoder_ms)) return ENCODER_DIFF_NO;
-  const ENCODER_DiffState state = Encoder_ReceiveAnalyze();
+  const EncoderState state = Encoder_ReceiveAnalyze();
   if (state != ENCODER_DIFF_NO) Encoder_ms = ms + ENCODER_WAIT_MS;
   return state;
 }
@@ -1317,7 +1317,7 @@ void HMI_Move_Done(const AxisEnum axis) {
 }
 
 void HMI_Move_X() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
   if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scaled)) {
     Draw_Edit_Float3(1, HMI_ValueStruct.Move_X_scaled);
@@ -1331,7 +1331,7 @@ void HMI_Move_X() {
 }
 
 void HMI_Move_Y() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
   if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scaled)) {
     Draw_Edit_Float3(2, HMI_ValueStruct.Move_Y_scaled);
@@ -1345,7 +1345,7 @@ void HMI_Move_Y() {
 }
 
 void HMI_Move_Z() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
   if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scaled)) {
     Draw_Edit_Float3(3, HMI_ValueStruct.Move_Z_scaled);
@@ -1362,7 +1362,7 @@ void HMI_Move_Z() {
 
   void HMI_Move_E() {
     static float last_E_scaled = 0;
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
     if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_E_scaled)) {
       last_E_scaled = HMI_ValueStruct.Move_E_scaled;
@@ -1383,7 +1383,7 @@ void HMI_Move_Z() {
   bool printer_busy() { return planner.movesplanned() || printingIsActive(); }
 
   void HMI_Zoffset() {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
     uint8_t zoff_line;
     switch (HMI_ValueStruct.show_mode) {
@@ -1416,7 +1416,7 @@ void HMI_Move_Z() {
 #if HAS_HOTEND
 
   void HMI_ETemp() {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
     uint8_t temp_line;
     switch (HMI_ValueStruct.show_mode) {
@@ -1458,7 +1458,7 @@ void HMI_Move_Z() {
 #if HAS_HEATED_BED
 
   void HMI_BedTemp() {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
     uint8_t bed_line;
     switch (HMI_ValueStruct.show_mode) {
@@ -1500,7 +1500,7 @@ void HMI_Move_Z() {
 #if HAS_PREHEAT && HAS_FAN
 
   void HMI_FanSpeed() {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
     uint8_t fan_line;
     switch (HMI_ValueStruct.show_mode) {
@@ -1541,7 +1541,7 @@ void HMI_Move_Z() {
 #endif // HAS_PREHEAT && HAS_FAN
 
 void HMI_PrintSpeed() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
   if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.print_speed)) {
     checkkey = Tune;
@@ -1559,7 +1559,7 @@ void HMI_PrintSpeed() {
 #define LAST_AXIS TERN(HAS_HOTEND, E_AXIS, Z_AXIS)
 
 void HMI_MaxFeedspeedXYZE() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
   if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Feedspeed)) {
     checkkey = MaxSpeed;
@@ -1578,7 +1578,7 @@ void HMI_MaxFeedspeedXYZE() {
 }
 
 void HMI_MaxAccelerationXYZE() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
   if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Acceleration)) {
     checkkey = MaxAcceleration;
@@ -1599,7 +1599,7 @@ void HMI_MaxAccelerationXYZE() {
 #if HAS_CLASSIC_JERK
 
   void HMI_MaxJerkXYZE() {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
     if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Jerk_scaled)) {
       checkkey = MaxJerk;
@@ -1620,7 +1620,7 @@ void HMI_MaxAccelerationXYZE() {
 #endif // HAS_CLASSIC_JERK
 
 void HMI_StepXYZE() {
-  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
   if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Step_scaled)) {
     checkkey = Step;
@@ -1816,8 +1816,6 @@ void HMI_SDCardInit() { card.cdroot(); }
 
 void MarlinUI::refresh() { /* Nothing to see here */ }
 
-#define ICON_Folder ICON_More
-
 #if ENABLED(SCROLL_LONG_FILENAMES)
 
   char shift_name[LONG_FILENAME_LENGTH + 1];
@@ -2077,7 +2075,7 @@ void Draw_Print_File_Menu() {
 
 // Main Process
 void HMI_MainMenu() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   if (encoder_diffState == ENCODER_DIFF_CW) {
@@ -2137,7 +2135,7 @@ void HMI_MainMenu() {
 
 // Select (and Print) File
 void HMI_SelectFile() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
 
   const uint16_t hasUpDir = !card.flag.workDirIsRoot;
 
@@ -2257,7 +2255,7 @@ void HMI_SelectFile() {
 
 // Printing
 void HMI_Printing() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   if (HMI_flag.done_confirm_flag) {
@@ -2335,7 +2333,7 @@ void HMI_Printing() {
 
 // Pause and Stop window
 void HMI_PauseOrStop() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   if (encoder_diffState == ENCODER_DIFF_CW)
@@ -2417,7 +2415,7 @@ void Item_Adv_HomeOffsets(const uint8_t row) {
       Item_AreaCopy(1,  76, 102,  87, row); // "Set Home Offsets"
     #endif
   }
-  Draw_Menu_Line(row, ICON_HomeOff);
+  Draw_Menu_Line(row, ICON_HomeOffset);
   Draw_More_Icon(row);
 }
 
@@ -2434,7 +2432,7 @@ void Item_Adv_HomeOffsets(const uint8_t row) {
         say_probe_offs_en(row);
       #endif
     }
-    Draw_Menu_Line(row, ICON_ProbeOff);
+    Draw_Menu_Line(row, ICON_ProbeOffset);
     Draw_More_Icon(row);
   }
 
@@ -2529,12 +2527,12 @@ void Item_HomeOffs_X(const uint8_t row) {
   }
   else {
     #ifdef USE_STRING_TITLES
-      Draw_Menu_LineF(row, ICON_HomeOffX, GET_TEXT_F(MSG_HOME_OFFSET_X));
+      Draw_Menu_LineF(row, ICON_HomeOffsetX, GET_TEXT_F(MSG_HOME_OFFSET_X));
     #else
       say_home_offs_en(row); say_x_en(75, row);   // "Home Offset X"
     #endif
   }
-  Draw_Menu_Line(row, ICON_HomeOff);
+  Draw_Menu_Line(row, ICON_HomeOffset);
   Draw_Edit_Signed_Float3(row, HMI_ValueStruct.Home_OffX_scaled);
 }
 
@@ -2544,12 +2542,12 @@ void Item_HomeOffs_Y(const uint8_t row) {
   }
   else {
     #ifdef USE_STRING_TITLES
-      Draw_Menu_LineF(row, ICON_HomeOffY, GET_TEXT_F(MSG_HOME_OFFSET_Y));
+      Draw_Menu_LineF(row, ICON_HomeOffsetY, GET_TEXT_F(MSG_HOME_OFFSET_Y));
     #else
       say_home_offs_en(row); say_y_en(75, row);   // "Home Offset X"
     #endif
   }
-  Draw_Menu_Line(row, ICON_HomeOff);
+  Draw_Menu_Line(row, ICON_HomeOffset);
   Draw_Edit_Signed_Float3(row, HMI_ValueStruct.Home_OffY_scaled);
 }
 
@@ -2559,12 +2557,12 @@ void Item_HomeOffs_Z(const uint8_t row) {
   }
   else {
     #ifdef USE_STRING_TITLES
-      Draw_Menu_LineF(row, ICON_HomeOffZ, GET_TEXT_F(MSG_HOME_OFFSET_Z));
+      Draw_Menu_LineF(row, ICON_HomeOffsetZ, GET_TEXT_F(MSG_HOME_OFFSET_Z));
     #else
       say_home_offs_en(row); say_z_en(75, row);   // "Home Offset Z"
     #endif
   }
-  Draw_Menu_Line(row, ICON_HomeOff);
+  Draw_Menu_Line(row, ICON_HomeOffset);
   Draw_Edit_Signed_Float3(row, HMI_ValueStruct.Home_OffZ_scaled);
 }
 
@@ -2602,8 +2600,8 @@ void Draw_HomeOff_Menu() {
         DWIN_Frame_TitleCopy(124, 431, 91, 12);                             // "Probe Offsets"
       #endif
       #ifdef USE_STRING_TITLES
-        Draw_Menu_LineF(1, ICON_ProbeOffX, GET_TEXT_F(MSG_ZPROBE_XOFFSET));  // Probe X Offset
-        Draw_Menu_LineF(2, ICON_ProbeOffY, GET_TEXT_F(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
+        Draw_Menu_LineF(1, ICON_ProbeOffsetX, GET_TEXT_F(MSG_ZPROBE_XOFFSET));  // Probe X Offset
+        Draw_Menu_LineF(2, ICON_ProbeOffsetY, GET_TEXT_F(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
       #else
         say_probe_offs_en(1); say_x_en(75, 1);  // "Probe Offset X"
         say_probe_offs_en(2); say_y_en(75, 2);  // "Probe Offset Y"
@@ -2615,6 +2613,7 @@ void Draw_HomeOff_Menu() {
 
     if (select_item.now != CASE_BACK) Draw_Menu_Cursor(select_item.now);
   }
+
 #endif
 
 #include "../../../libs/buzzer.h"
@@ -2633,7 +2632,7 @@ void HMI_AudioFeedback(const bool success=true) {
 
 // Prepare
 void HMI_Prepare() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
@@ -2847,7 +2846,7 @@ void Draw_Temperature_Menu() {
 
 // Control
 void HMI_Control() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
@@ -2932,28 +2931,25 @@ void HMI_Control() {
   DWIN_UpdateLCD();
 }
 
-
 #if HAS_ONESTEP_LEVELING
-
   // Leveling
   void HMI_Leveling() {
     Popup_Window_Leveling();
     DWIN_UpdateLCD();
     queue.inject_P(PSTR("G28O\nG29"));
   }
-
 #endif
 
 // Axis Move
 void HMI_AxisMove() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   #if ENABLED(PREVENT_COLD_EXTRUSION)
     // popup window resume
-    if (HMI_flag.ETempTooLow_flag) {
+    if (HMI_flag.cold_flag) {
       if (encoder_diffState == ENCODER_DIFF_ENTER) {
-        HMI_flag.ETempTooLow_flag = false;
+        HMI_flag.cold_flag = false;
         HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
         Draw_Move_Menu();
         Draw_Edit_Float3(1, HMI_ValueStruct.Move_X_scaled);
@@ -3003,7 +2999,7 @@ void HMI_AxisMove() {
           case 4: // Extruder
             #if ENABLED(PREVENT_COLD_EXTRUSION)
               if (thermalManager.tooColdToExtrude(0)) {
-                HMI_flag.ETempTooLow_flag = true;
+                HMI_flag.cold_flag = true;
                 Popup_Window_ETempTooLow();
                 DWIN_UpdateLCD();
                 return;
@@ -3022,7 +3018,7 @@ void HMI_AxisMove() {
 
 // TemperatureID
 void HMI_Temperature() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
@@ -3449,7 +3445,7 @@ void Draw_Steps_Menu() {
 
 // Motion
 void HMI_Motion() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
@@ -3497,7 +3493,7 @@ void HMI_Motion() {
 
 // Advanced Settings
 void HMI_AdvSet() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
@@ -3594,7 +3590,7 @@ void HMI_AdvSet() {
 
   // Home Offset
   void HMI_HomeOff() {
-    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    EncoderState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     // Avoid flicker by updating only the previous menu
@@ -3633,7 +3629,7 @@ void HMI_AdvSet() {
   }
 
   void HMI_HomeOffN(const AxisEnum axis, float &posScaled, const_float_t lo, const_float_t hi) {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     if (Apply_Encoder(encoder_diffState, posScaled)) {
@@ -3654,9 +3650,10 @@ void HMI_AdvSet() {
 #endif // HAS_HOME_OFFSET
 
 #if HAS_ONESTEP_LEVELING
+
   // Probe Offset
   void HMI_ProbeOff() {
-    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    EncoderState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     // Avoid flicker by updating only the previous menu
@@ -3689,7 +3686,7 @@ void HMI_AdvSet() {
   }
 
   void HMI_ProbeOffN(float &posScaled, float &offset_ref) {
-    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     if (Apply_Encoder(encoder_diffState, posScaled)) {
@@ -3710,7 +3707,7 @@ void HMI_AdvSet() {
 
 // Info
 void HMI_Info() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
   if (encoder_diffState == ENCODER_DIFF_ENTER) {
     #if HAS_ONESTEP_LEVELING
@@ -3727,7 +3724,7 @@ void HMI_Info() {
 
 // Tune
 void HMI_Tune() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
@@ -3813,7 +3810,7 @@ void HMI_Tune() {
 
   // PLA Preheat
   void HMI_PLAPreheatSetting() {
-    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    EncoderState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     // Avoid flicker by updating only the previous menu
@@ -3869,7 +3866,7 @@ void HMI_Tune() {
 
   // ABS Preheat
   void HMI_ABSPreheatSetting() {
-    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    EncoderState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     // Avoid flicker by updating only the previous menu
@@ -3927,7 +3924,7 @@ void HMI_Tune() {
 
 // Max Speed
 void HMI_MaxSpeed() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
@@ -3956,7 +3953,7 @@ void HMI_MaxSpeed() {
 
 // Max Acceleration
 void HMI_MaxAcceleration() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
@@ -3986,7 +3983,7 @@ void HMI_MaxAcceleration() {
 #if HAS_CLASSIC_JERK
   // Max Jerk
   void HMI_MaxJerk() {
-    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    EncoderState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
 
     // Avoid flicker by updating only the previous menu
@@ -4016,7 +4013,7 @@ void HMI_MaxAcceleration() {
 
 // Step
 void HMI_Step() {
-  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  EncoderState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
 
   // Avoid flicker by updating only the previous menu
@@ -4172,7 +4169,7 @@ void EachMomentUpdate() {
       DWIN_UpdateLCD();
 
       while (recovery_flag) {
-        ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+        EncoderState encoder_diffState = Encoder_ReceiveAnalyze();
         if (encoder_diffState != ENCODER_DIFF_NO) {
           if (encoder_diffState == ENCODER_DIFF_ENTER) {
             recovery_flag = false;

commit 8235ae9cc00b10362ca9f6e79acb4516c08557af
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Wed Sep 15 01:44:28 2021 -0500

    ü©π Fix DWIN Enhanced Tune menu during homing (#22773)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 76d77e4cab..5593147b7a 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -30,6 +30,9 @@
 
 #include "dwin.h"
 
+//#define USE_STRING_HEADINGS
+//#define USE_STRING_TITLES
+
 #if ENABLED(LCD_BED_LEVELING) && DISABLED(PROBE_MANUALLY) && ANY(AUTO_BED_LEVELING_BILINEAR, AUTO_BED_LEVELING_LINEAR, AUTO_BED_LEVELING_3POINT)
   #define HAS_ONESTEP_LEVELING 1
 #endif
@@ -141,6 +144,17 @@ millis_t dwin_heat_time = 0;
 
 uint8_t checkkey = 0;
 
+enum SelectItem : uint8_t {
+  PAGE_PRINT = 0,
+  PAGE_PREPARE,
+  PAGE_CONTROL,
+  PAGE_INFO_LEVELING,
+
+  PRINT_SETUP = 0,
+  PRINT_PAUSE_RESUME,
+  PRINT_STOP
+};
+
 typedef struct {
   uint8_t now, last;
   void set(uint8_t v) { now = last = v; }
@@ -235,7 +249,7 @@ void ICON_Print() {
     { 1, { 417, 449 }, 30, 14 },
     { 1, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_page.now == 0, ICON_Print_0, ico, txt);
+  ICON_Button(select_page.now == PAGE_PRINT, ICON_Print_0, ico, txt);
 }
 
 //
@@ -247,7 +261,7 @@ void ICON_Prepare() {
     { 33, { 417, 449 }, 51, 14 },
     { 31, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_page.now == 1, ICON_Prepare_0, ico, txt);
+  ICON_Button(select_page.now == PAGE_PREPARE, ICON_Prepare_0, ico, txt);
 }
 
 //
@@ -259,7 +273,7 @@ void ICON_Control() {
     { 85, { 417, 449 }, 46, 14 },
     { 61, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_page.now == 2, ICON_Control_0, ico, txt);
+  ICON_Button(select_page.now == PAGE_CONTROL, ICON_Control_0, ico, txt);
 }
 
 //
@@ -271,7 +285,7 @@ void ICON_StartInfo() {
     { 133, { 417, 449 }, 23, 14 },
     {  91, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_page.now == 3, ICON_Info_0, ico, txt);
+  ICON_Button(select_page.now == PAGE_INFO_LEVELING, ICON_Info_0, ico, txt);
 }
 
 //
@@ -283,7 +297,7 @@ void ICON_Leveling() {
     {  88, { 433, 464 }, 36, 14 },
     { 211, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_page.now == 3, ICON_Leveling_0, ico, txt);
+  ICON_Button(select_page.now == PAGE_INFO_LEVELING, ICON_Leveling_0, ico, txt);
 }
 
 //
@@ -295,7 +309,7 @@ void ICON_Tune() {
     {   0, { 433, 464 }, 32, 14 },
     { 121, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_print.now == 0, ICON_Setup_0, ico, txt);
+  ICON_Button(select_print.now == PRINT_SETUP, ICON_Setup_0, ico, txt);
 }
 
 //
@@ -307,7 +321,7 @@ void ICON_Pause() {
     { 157, { 417, 449 }, 39, 14 },
     { 181, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_print.now == 1, ICON_Pause_0, ico, txt);
+  ICON_Button(select_print.now == PRINT_PAUSE_RESUME, ICON_Pause_0, ico, txt);
 }
 
 //
@@ -319,7 +333,7 @@ void ICON_Resume() {
     { 33, { 433, 464 }, 53, 14 },
     {  1, { 405, 447 }, 27, 15 }
   };
-  ICON_Button(select_print.now == 1, ICON_Continue_0, ico, txt);
+  ICON_Button(select_print.now == PRINT_PAUSE_RESUME, ICON_Continue_0, ico, txt);
 }
 
 void ICON_ResumeOrPause() {
@@ -338,7 +352,7 @@ void ICON_Stop() {
     { 196, { 417, 449 }, 29, 14 },
     { 151, { 405, 447 }, 27, 12 }
   };
-  ICON_Button(select_print.now == 2, ICON_Stop_0, ico, txt);
+  ICON_Button(select_print.now == PRINT_STOP, ICON_Stop_0, ico, txt);
 }
 
 inline void Clear_Title_Bar() {
@@ -467,6 +481,7 @@ inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, T &valref)
 //
 // Draw Menus
 //
+#define CASE_BACK          0
 
 #define MOTION_CASE_RATE   1
 #define MOTION_CASE_ACCEL  2
@@ -759,7 +774,7 @@ void Draw_Prepare_Menu() {
     #endif
   }
 
-  if (PVISI(0)) Draw_Back_First(select_prepare.now == 0);                         // < Back
+  if (PVISI(0)) Draw_Back_First(select_prepare.now == CASE_BACK);                 // < Back
   if (PVISI(PREPARE_CASE_MOVE)) Item_Prepare_Move(PSCROL(PREPARE_CASE_MOVE));     // Move >
   if (PVISI(PREPARE_CASE_DISA)) Item_Prepare_Disable(PSCROL(PREPARE_CASE_DISA));  // Disable Stepper
   if (PVISI(PREPARE_CASE_HOME)) Item_Prepare_Home(PSCROL(PREPARE_CASE_HOME));     // Auto Home
@@ -775,7 +790,7 @@ void Draw_Prepare_Menu() {
   #endif
   if (PVISI(PREPARE_CASE_LANG)) Item_Prepare_Lang(PSCROL(PREPARE_CASE_LANG));     // Language CN/EN
 
-  if (select_prepare.now) Draw_Menu_Cursor(PSCROL(select_prepare.now));
+  if (select_prepare.now != CASE_BACK) Draw_Menu_Cursor(PSCROL(select_prepare.now));
 }
 
 //
@@ -860,7 +875,7 @@ void Draw_Control_Menu() {
     #endif
   }
 
-  if (CVISI(0)) Draw_Back_First(select_control.now == 0);                       // < Back
+  if (CVISI(0)) Draw_Back_First(select_control.now == CASE_BACK);               // < Back
   if (CVISI(CONTROL_CASE_TEMP)) Item_Control_Temp(CSCROL(CONTROL_CASE_TEMP));   // Temperature >
   if (CVISI(CONTROL_CASE_MOVE)) Item_Control_Motion(CSCROL(CONTROL_CASE_MOVE)); // Motion >
 
@@ -897,7 +912,7 @@ void Draw_Control_Menu() {
   if (CVISI(CONTROL_CASE_ADVSET)) Item_Control_Advanced(CSCROL(CONTROL_CASE_ADVSET));
   if (CVISI(CONTROL_CASE_INFO)) Item_Control_Info(CSCROL(CONTROL_CASE_INFO));
 
-  if (select_control.now && CVISI(select_control.now))
+  if (select_control.now != CASE_BACK && CVISI(select_control.now))
     Draw_Menu_Cursor(CSCROL(select_control.now));
 
   // Draw icons and lines
@@ -977,8 +992,8 @@ void Draw_Tune_Menu() {
     #endif
   }
 
-  Draw_Back_First(select_tune.now == 0);
-  if (select_tune.now) Draw_Menu_Cursor(select_tune.now);
+  Draw_Back_First(select_tune.now == CASE_BACK);
+  if (select_tune.now != CASE_BACK) Draw_Menu_Cursor(select_tune.now);
 
   Draw_Menu_Line(TUNE_CASE_SPEED, ICON_Speed);
   Draw_Edit_Integer3(TUNE_CASE_SPEED, feedrate_percentage);
@@ -1042,8 +1057,8 @@ void Draw_Motion_Menu() {
     #endif
   }
 
-  Draw_Back_First(select_motion.now == 0);
-  if (select_motion.now) Draw_Menu_Cursor(select_motion.now);
+  Draw_Back_First(select_motion.now == CASE_BACK);
+  if (select_motion.now != CASE_BACK) Draw_Menu_Cursor(select_motion.now);
 
   uint8_t i = 0;
   #define _MOTION_ICON(N) Draw_Menu_Line(++i, ICON_MaxSpeed + (N) - 1)
@@ -1179,15 +1194,15 @@ void Popup_window_PauseOrStop() {
   Clear_Main_Window();
   Draw_Popup_Bkgd_60();
   if (HMI_IsChinese()) {
-         if (select_print.now == 1) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);    // Pause
-    else if (select_print.now == 2) DWIN_Frame_AreaCopy(1, 221, 320, 253, 336, 98, 150);    // Stop
+         if (select_print.now == PRINT_PAUSE_RESUME) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);    // Pause
+    else if (select_print.now == PRINT_STOP) DWIN_Frame_AreaCopy(1, 221, 320, 253, 336, 98, 150);    // Stop
     DWIN_Frame_AreaCopy(1, 220, 304, 264, 319, 130, 150); // Print
     DWIN_ICON_Show(ICON, ICON_Confirm_C, 26, 280);
     DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 280);
   }
   else {
-         if (select_print.now == 1) DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 11) / 2, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
-    else if (select_print.now == 2) DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 10) / 2, 150, GET_TEXT_F(MSG_STOP_PRINT));
+         if (select_print.now == PRINT_PAUSE_RESUME) DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 11) / 2, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
+    else if (select_print.now == PRINT_STOP) DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 10) / 2, 150, GET_TEXT_F(MSG_STOP_PRINT));
     DWIN_ICON_Show(ICON, ICON_Confirm_E, 26, 280);
     DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 280);
   }
@@ -1823,7 +1838,7 @@ void MarlinUI::refresh() { /* Nothing to see here */ }
 
   void Init_SDItem_Shift() {
     shift_amt = 0;
-    shift_ms  = select_file.now > 0 && strlen(shift_name) > MENU_CHAR_LIMIT
+    shift_ms  = select_file.now != CASE_BACK && strlen(shift_name) > MENU_CHAR_LIMIT
            ? millis() + 750UL : 0;
   }
 
@@ -2068,45 +2083,45 @@ void HMI_MainMenu() {
   if (encoder_diffState == ENCODER_DIFF_CW) {
     if (select_page.inc(4)) {
       switch (select_page.now) {
-        case 0: ICON_Print(); break;
-        case 1: ICON_Print(); ICON_Prepare(); break;
-        case 2: ICON_Prepare(); ICON_Control(); break;
-        case 3: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(); break;
+        case PAGE_PRINT: ICON_Print(); break;
+        case PAGE_PREPARE: ICON_Print(); ICON_Prepare(); break;
+        case PAGE_CONTROL: ICON_Prepare(); ICON_Control(); break;
+        case PAGE_INFO_LEVELING: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(); break;
       }
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
     if (select_page.dec()) {
       switch (select_page.now) {
-        case 0: ICON_Print(); ICON_Prepare(); break;
-        case 1: ICON_Prepare(); ICON_Control(); break;
-        case 2: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(); break;
-        case 3: TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(); break;
+        case PAGE_PRINT: ICON_Print(); ICON_Prepare(); break;
+        case PAGE_PREPARE: ICON_Prepare(); ICON_Control(); break;
+        case PAGE_CONTROL: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(); break;
+        case PAGE_INFO_LEVELING: TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(); break;
       }
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_page.now) {
-      case 0: // Print File
+      case PAGE_PRINT:
         checkkey = SelectFile;
         Draw_Print_File_Menu();
         break;
 
-      case 1: // Prepare
+      case PAGE_PREPARE:
         checkkey = Prepare;
         select_prepare.reset();
         index_prepare = MROWS;
         Draw_Prepare_Menu();
         break;
 
-      case 2: // Control
+      case PAGE_CONTROL:
         checkkey = Control;
         select_control.reset();
         index_control = MROWS;
         Draw_Control_Menu();
         break;
 
-      case 3: // Leveling or Info
+      case PAGE_INFO_LEVELING:
         #if HAS_ONESTEP_LEVELING
           checkkey = Leveling;
           HMI_Leveling();
@@ -2196,7 +2211,7 @@ void HMI_SelectFile() {
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    if (select_file.now == 0) { // Back
+    if (select_file.now == CASE_BACK) { // Back
       select_page.set(0);
       Goto_MainMenu();
     }
@@ -2257,43 +2272,32 @@ void HMI_Printing() {
   if (encoder_diffState == ENCODER_DIFF_CW) {
     if (select_print.inc(3)) {
       switch (select_print.now) {
-        case 0: ICON_Tune(); break;
-        case 1:
-          ICON_Tune();
-          ICON_ResumeOrPause();
-          break;
-        case 2:
-          ICON_ResumeOrPause();
-          ICON_Stop();
-          break;
+        case PRINT_SETUP: ICON_Tune(); break;
+        case PRINT_PAUSE_RESUME: ICON_Tune(); ICON_ResumeOrPause(); break;
+        case PRINT_STOP: ICON_ResumeOrPause(); ICON_Stop(); break;
       }
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
     if (select_print.dec()) {
       switch (select_print.now) {
-        case 0:
-          ICON_Tune();
-          ICON_ResumeOrPause();
-          break;
-        case 1:
-          ICON_ResumeOrPause();
-          ICON_Stop();
-          break;
-        case 2: ICON_Stop(); break;
+        case PRINT_SETUP: ICON_Tune(); ICON_ResumeOrPause(); break;
+        case PRINT_PAUSE_RESUME: ICON_ResumeOrPause(); ICON_Stop(); break;
+        case PRINT_STOP: ICON_Stop(); break;
       }
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_print.now) {
-      case 0: // Tune
+      case PRINT_SETUP:
         checkkey = Tune;
         HMI_ValueStruct.show_mode = 0;
         select_tune.reset();
         index_tune = MROWS;
         Draw_Tune_Menu();
         break;
-      case 1: // Pause
+
+      case PRINT_PAUSE_RESUME:
         if (HMI_flag.pause_flag) {
           ICON_Pause();
 
@@ -2317,7 +2321,7 @@ void HMI_Printing() {
         }
         break;
 
-      case 2: // Stop
+      case PRINT_STOP:
         HMI_flag.select_flag = true;
         checkkey = Print_window;
         Popup_window_PauseOrStop();
@@ -2339,14 +2343,14 @@ void HMI_PauseOrStop() {
   else if (encoder_diffState == ENCODER_DIFF_CCW)
     Draw_Select_Highlight(true);
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
-    if (select_print.now == 1) { // pause window
+    if (select_print.now == PRINT_PAUSE_RESUME) {
       if (HMI_flag.select_flag) {
         HMI_flag.pause_action = true;
         queue.inject_P(PSTR("M25"));
       }
       Goto_PrintProcess();
     }
-    else if (select_print.now == 2) { // stop window
+    else if (select_print.now == PRINT_STOP) {
       if (HMI_flag.select_flag) {
         checkkey = Back_Main;
         wait_for_heatup = wait_for_user = false;       // Stop waiting for heating/user
@@ -2395,8 +2399,8 @@ void Draw_Move_Menu() {
     #endif
   }
 
-  Draw_Back_First(select_axis.now == 0);
-  if (select_axis.now) Draw_Menu_Cursor(select_axis.now);
+  Draw_Back_First(select_axis.now == CASE_BACK);
+  if (select_axis.now != CASE_BACK) Draw_Menu_Cursor(select_axis.now);
 
   // Draw separators and icons
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MoveX + i);
@@ -2506,7 +2510,7 @@ void Draw_AdvancedSettings_Menu() {
     #endif
   }
 
-  if (AVISI(0)) Draw_Back_First(select_advset.now == 0);
+  if (AVISI(0)) Draw_Back_First(select_advset.now == CASE_BACK);
   if (AVISI(ADVSET_CASE_HOMEOFF)) Item_Adv_HomeOffsets(ASCROL(ADVSET_CASE_HOMEOFF));      // Set Home Offsets >
   #if HAS_ONESTEP_LEVELING
     if (AVISI(ADVSET_CASE_PROBEOFF)) Item_Adv_ProbeOffsets(ASCROL(ADVSET_CASE_PROBEOFF)); // Probe Offsets >
@@ -2516,7 +2520,7 @@ void Draw_AdvancedSettings_Menu() {
   #if ENABLED(POWER_LOSS_RECOVERY)
     if (AVISI(ADVSET_CASE_PWRLOSSR)) Item_Adv_PLR(ASCROL(ADVSET_CASE_PWRLOSSR));          // Power-loss recovery
   #endif
-  if (select_advset.now) Draw_Menu_Cursor(ASCROL(select_advset.now));
+  if (select_advset.now != CASE_BACK) Draw_Menu_Cursor(ASCROL(select_advset.now));
 }
 
 void Item_HomeOffs_X(const uint8_t row) {
@@ -2576,18 +2580,18 @@ void Draw_HomeOff_Menu() {
       DWIN_Frame_TitleCopy(1, 401, 91, 12);         // "Home Offsets"
     #endif
   }
-  Draw_Back_First(select_item.now == 0);
+  Draw_Back_First(select_item.now == CASE_BACK);
   Item_HomeOffs_X(1);                               // "Home Offset X"
   Item_HomeOffs_Y(2);                               // "Home Offset Y"
   Item_HomeOffs_Z(3);                               // "Home Offset Z"
-  if (select_item.now) Draw_Menu_Cursor(select_item.now);
+  if (select_item.now != CASE_BACK) Draw_Menu_Cursor(select_item.now);
 }
 
 #if HAS_ONESTEP_LEVELING
 
   void Draw_ProbeOff_Menu() {
     Clear_Main_Window();
-    Draw_Back_First(select_item.now == 0);
+    Draw_Back_First(select_item.now == CASE_BACK);
     if (false && HMI_IsChinese()) {
       // TODO: Chinese "Probe Offsets"
     }
@@ -2609,7 +2613,7 @@ void Draw_HomeOff_Menu() {
     Draw_Edit_Signed_Float3(1, HMI_ValueStruct.Probe_OffX_scaled);
     Draw_Edit_Signed_Float3(2, HMI_ValueStruct.Probe_OffY_scaled);
 
-    if (select_item.now) Draw_Menu_Cursor(select_item.now);
+    if (select_item.now != CASE_BACK) Draw_Menu_Cursor(select_item.now);
   }
 #endif
 
@@ -2682,11 +2686,11 @@ void HMI_Prepare() {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_prepare.now) {
-      case 0: // Back
+      case CASE_BACK:
         select_page.set(1);
         Goto_MainMenu();
         break;
-      case PREPARE_CASE_MOVE: // Axis move
+      case PREPARE_CASE_MOVE:
         checkkey = AxisMove;
         select_axis.reset();
         Draw_Move_Menu();
@@ -2699,9 +2703,9 @@ void HMI_Prepare() {
           Draw_Edit_Signed_Float3(4, HMI_ValueStruct.Move_E_scaled);
         #endif
         break;
-      case PREPARE_CASE_DISA: // Disable steppers
-        queue.inject_P(PSTR("M84"));
-        break;
+
+      case PREPARE_CASE_DISA: queue.inject_P(PSTR("M84")); break;
+
       case PREPARE_CASE_HOME: // Homing
         checkkey = Last_Prepare;
         index_prepare = MROWS;
@@ -2709,7 +2713,7 @@ void HMI_Prepare() {
         Popup_Window_Home();
         break;
       #if HAS_ZOFFSET_ITEM
-        case PREPARE_CASE_ZOFF: // Z-offset
+        case PREPARE_CASE_ZOFF:
           #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
             checkkey = Homeoffset;
             HMI_ValueStruct.show_mode = -4;
@@ -2724,24 +2728,24 @@ void HMI_Prepare() {
           break;
       #endif
       #if HAS_PREHEAT
-        case PREPARE_CASE_PLA: // PLA preheat
+        case PREPARE_CASE_PLA:
           TERN_(HAS_HOTEND, thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0));
           TERN_(HAS_HEATED_BED, thermalManager.setTargetBed(ui.material_preset[0].bed_temp));
           TERN_(HAS_FAN, thermalManager.set_fan_speed(0, ui.material_preset[0].fan_speed));
           break;
-        case PREPARE_CASE_ABS: // ABS preheat
+        case PREPARE_CASE_ABS:
           TERN_(HAS_HOTEND, thermalManager.setTargetHotend(ui.material_preset[1].hotend_temp, 0));
           TERN_(HAS_HEATED_BED, thermalManager.setTargetBed(ui.material_preset[1].bed_temp));
           TERN_(HAS_FAN, thermalManager.set_fan_speed(0, ui.material_preset[1].fan_speed));
           break;
-        case PREPARE_CASE_COOL: // Cool
+        case PREPARE_CASE_COOL:
           TERN_(HAS_FAN, thermalManager.zero_fan_speeds());
           #if HAS_HOTEND || HAS_HEATED_BED
             thermalManager.disable_all_heaters();
           #endif
           break;
       #endif
-      case PREPARE_CASE_LANG: // Toggle Language
+      case PREPARE_CASE_LANG:
         HMI_ToggleLanguage();
         Draw_Prepare_Menu();
         break;
@@ -2814,8 +2818,8 @@ void Draw_Temperature_Menu() {
     #endif
   }
 
-  Draw_Back_First(select_temp.now == 0);
-  if (select_temp.now) Draw_Menu_Cursor(select_temp.now);
+  Draw_Back_First(select_temp.now == CASE_BACK);
+  if (select_temp.now != CASE_BACK) Draw_Menu_Cursor(select_temp.now);
 
   // Draw icons and lines
   uint8_t i = 0;
@@ -2884,41 +2888,41 @@ void HMI_Control() {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_control.now) {
-      case 0: // Back
+      case CASE_BACK:
         select_page.set(2);
         Goto_MainMenu();
         break;
-      case CONTROL_CASE_TEMP: // Temperature
+      case CONTROL_CASE_TEMP:
         checkkey = TemperatureID;
         HMI_ValueStruct.show_mode = -1;
         select_temp.reset();
         Draw_Temperature_Menu();
         break;
-      case CONTROL_CASE_MOVE: // Motion
+      case CONTROL_CASE_MOVE:
         checkkey = Motion;
         select_motion.reset();
         Draw_Motion_Menu();
         break;
       #if ENABLED(EEPROM_SETTINGS)
-        case CONTROL_CASE_SAVE: { // Write EEPROM
+        case CONTROL_CASE_SAVE: {
           const bool success = settings.save();
           HMI_AudioFeedback(success);
         } break;
-        case CONTROL_CASE_LOAD: { // Read EEPROM
+        case CONTROL_CASE_LOAD: {
           const bool success = settings.load();
           HMI_AudioFeedback(success);
         } break;
-        case CONTROL_CASE_RESET: // Reset EEPROM
+        case CONTROL_CASE_RESET:
           settings.reset();
           HMI_AudioFeedback();
           break;
       #endif
-      case CONTROL_CASE_ADVSET: // Advanced Settings
+      case CONTROL_CASE_ADVSET:
         checkkey = AdvSet;
         select_advset.reset();
         Draw_AdvancedSettings_Menu();
         break;
-      case CONTROL_CASE_INFO: // Info
+      case CONTROL_CASE_INFO:
         checkkey = Info;
         Draw_Info_Menu();
         break;
@@ -2971,7 +2975,7 @@ void HMI_AxisMove() {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_axis.now) {
-      case 0: // Back
+      case CASE_BACK:
         checkkey = Prepare;
         select_prepare.set(1);
         index_prepare = MROWS;
@@ -2997,8 +3001,7 @@ void HMI_AxisMove() {
         break;
         #if HAS_HOTEND
           case 4: // Extruder
-            // window tips
-            #ifdef PREVENT_COLD_EXTRUSION
+            #if ENABLED(PREVENT_COLD_EXTRUSION)
               if (thermalManager.tooColdToExtrude(0)) {
                 HMI_flag.ETempTooLow_flag = true;
                 Popup_Window_ETempTooLow();
@@ -3031,14 +3034,14 @@ void HMI_Temperature() {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_temp.now) {
-      case 0: // Back
+      case CASE_BACK:
         checkkey = Control;
         select_control.set(1);
         index_control = MROWS;
         Draw_Control_Menu();
         break;
       #if HAS_HOTEND
-        case TEMP_CASE_TEMP: // Nozzle temperature
+        case TEMP_CASE_TEMP:
           checkkey = ETemp;
           HMI_ValueStruct.E_Temp = thermalManager.degTargetHotend(0);
           Draw_Edit_Integer3(1, HMI_ValueStruct.E_Temp, true);
@@ -3046,7 +3049,7 @@ void HMI_Temperature() {
           break;
       #endif
       #if HAS_HEATED_BED
-        case TEMP_CASE_BED: // Bed temperature
+        case TEMP_CASE_BED:
           checkkey = BedTemp;
           HMI_ValueStruct.Bed_Temp = thermalManager.degTargetBed();
           Draw_Edit_Integer3(2, HMI_ValueStruct.Bed_Temp, true);
@@ -3054,7 +3057,7 @@ void HMI_Temperature() {
           break;
       #endif
       #if HAS_FAN
-        case TEMP_CASE_FAN: // Fan speed
+        case TEMP_CASE_FAN:
           checkkey = FanSpeed;
           HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
           Draw_Edit_Integer3(3, HMI_ValueStruct.Fan_speed, true);
@@ -3062,7 +3065,7 @@ void HMI_Temperature() {
           break;
       #endif
       #if HAS_HOTEND
-        case TEMP_CASE_PLA: { // PLA preheat setting
+        case TEMP_CASE_PLA: {
           checkkey = PLAPreheat;
           select_PLA.reset();
           HMI_ValueStruct.show_mode = -2;
@@ -3458,30 +3461,30 @@ void HMI_Motion() {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_motion.now) {
-      case 0: // Back
+      case CASE_BACK:
         checkkey = Control;
         select_control.set(CONTROL_CASE_MOVE);
         index_control = MROWS;
         Draw_Control_Menu();
         break;
-      case MOTION_CASE_RATE:   // Max speed
+      case MOTION_CASE_RATE:
         checkkey = MaxSpeed;
         select_speed.reset();
         Draw_Max_Speed_Menu();
         break;
-      case MOTION_CASE_ACCEL:  // Max acceleration
+      case MOTION_CASE_ACCEL:
         checkkey = MaxAcceleration;
         select_acc.reset();
         Draw_Max_Accel_Menu();
         break;
       #if HAS_CLASSIC_JERK
-        case MOTION_CASE_JERK: // Max jerk
+        case MOTION_CASE_JERK:
           checkkey = MaxJerk;
           select_jerk.reset();
           Draw_Max_Jerk_Menu();
          break;
       #endif
-      case MOTION_CASE_STEPS:  // Steps per mm
+      case MOTION_CASE_STEPS:
         checkkey = Step;
         select_step.reset();
         Draw_Steps_Menu();
@@ -3533,7 +3536,7 @@ void HMI_AdvSet() {
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
     switch (select_advset.now) {
-      case 0: // Back
+      case CASE_BACK:
         checkkey = Control;
         select_control.set(CONTROL_CASE_ADVSET);
         index_control = CONTROL_CASE_ADVSET;
@@ -3541,7 +3544,7 @@ void HMI_AdvSet() {
         break;
 
       #if HAS_HOME_OFFSET
-        case ADVSET_CASE_HOMEOFF:   // Home Offsets
+        case ADVSET_CASE_HOMEOFF:
           checkkey = HomeOff;
           select_item.reset();
           HMI_ValueStruct.Home_OffX_scaled = home_offset[X_AXIS] * 10;
@@ -3552,7 +3555,7 @@ void HMI_AdvSet() {
       #endif
 
       #if HAS_ONESTEP_LEVELING
-        case ADVSET_CASE_PROBEOFF:   // Probe Offsets
+        case ADVSET_CASE_PROBEOFF:
           checkkey = ProbeOff;
           select_item.reset();
           HMI_ValueStruct.Probe_OffX_scaled = probe.offset.x * 10;
@@ -3562,21 +3565,21 @@ void HMI_AdvSet() {
       #endif
 
       #if HAS_HOTEND
-        case ADVSET_CASE_HEPID:   // Nozzle PID Autotune
+        case ADVSET_CASE_HEPID:
           thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0);
           thermalManager.PID_autotune(ui.material_preset[0].hotend_temp, H_E0, 10, true);
           break;
       #endif
 
       #if HAS_HEATED_BED
-        case ADVSET_CASE_BEDPID:  // Bed PID Autotune
+        case ADVSET_CASE_BEDPID:
           thermalManager.setTargetBed(ui.material_preset[0].bed_temp);
           thermalManager.PID_autotune(ui.material_preset[0].bed_temp, H_BED, 10, true);
           break;
       #endif
 
       #if ENABLED(POWER_LOSS_RECOVERY)
-        case ADVSET_CASE_PWRLOSSR:  // Power-loss recovery
+        case ADVSET_CASE_PWRLOSSR:
           recovery.enable(!recovery.enabled);
           Draw_Checkbox_Line(ADVSET_CASE_PWRLOSSR + MROWS - index_advset, recovery.enabled);
           break;
@@ -3603,7 +3606,7 @@ void HMI_AdvSet() {
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       switch (select_item.now) {
-        case 0: // Back
+        case CASE_BACK:
           checkkey = AdvSet;
           select_advset.set(ADVSET_CASE_HOMEOFF);
           Draw_AdvancedSettings_Menu();
@@ -3665,7 +3668,7 @@ void HMI_AdvSet() {
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       switch (select_item.now) {
-        case 0: // Back
+        case CASE_BACK:
           checkkey = AdvSet;
           select_advset.set(ADVSET_CASE_PROBEOFF);
           Draw_AdvancedSettings_Menu();
@@ -3675,7 +3678,7 @@ void HMI_AdvSet() {
           Draw_Edit_Signed_Float3(1, HMI_ValueStruct.Probe_OffX_scaled, true);
           EncoderRate.enabled = true;
           break;
-        case 2: // Probe Offset X
+        case 2: // Probe Offset Y
           checkkey = ProbeOffY;
           Draw_Edit_Signed_Float3(2, HMI_ValueStruct.Probe_OffY_scaled, true);
           EncoderRate.enabled = true;
@@ -3822,14 +3825,14 @@ void HMI_Tune() {
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       switch (select_PLA.now) {
-        case 0: // Back
+        case CASE_BACK:
           checkkey = TemperatureID;
           select_temp.now = TEMP_CASE_PLA;
           HMI_ValueStruct.show_mode = -1;
           Draw_Temperature_Menu();
           break;
         #if HAS_HOTEND
-          case PREHEAT_CASE_TEMP: // Nozzle temperature
+          case PREHEAT_CASE_TEMP:
             checkkey = ETemp;
             HMI_ValueStruct.E_Temp = ui.material_preset[0].hotend_temp;
             Draw_Edit_Integer3(PREHEAT_CASE_TEMP, ui.material_preset[0].hotend_temp, true);
@@ -3837,7 +3840,7 @@ void HMI_Tune() {
             break;
         #endif
         #if HAS_HEATED_BED
-          case PREHEAT_CASE_BED: // Bed temperature
+          case PREHEAT_CASE_BED:
             checkkey = BedTemp;
             HMI_ValueStruct.Bed_Temp = ui.material_preset[0].bed_temp;
             Draw_Edit_Integer3(PREHEAT_CASE_BED, ui.material_preset[0].bed_temp, true);
@@ -3845,7 +3848,7 @@ void HMI_Tune() {
             break;
         #endif
         #if HAS_FAN
-          case PREHEAT_CASE_FAN: // Fan speed
+          case PREHEAT_CASE_FAN:
             checkkey = FanSpeed;
             HMI_ValueStruct.Fan_speed = ui.material_preset[0].fan_speed;
             Draw_Edit_Integer3(PREHEAT_CASE_FAN, ui.material_preset[0].fan_speed, true);
@@ -3853,7 +3856,7 @@ void HMI_Tune() {
             break;
         #endif
         #if ENABLED(EEPROM_SETTINGS)
-          case 4: { // Save PLA configuration
+          case PREHEAT_CASE_SAVE: {
             const bool success = settings.save();
             HMI_AudioFeedback(success);
           } break;
@@ -3878,14 +3881,14 @@ void HMI_Tune() {
     }
     else if (encoder_diffState == ENCODER_DIFF_ENTER) {
       switch (select_ABS.now) {
-        case 0: // Back
+        case CASE_BACK:
           checkkey = TemperatureID;
           select_temp.now = TEMP_CASE_ABS;
           HMI_ValueStruct.show_mode = -1;
           Draw_Temperature_Menu();
           break;
         #if HAS_HOTEND
-          case PREHEAT_CASE_TEMP: // Set nozzle temperature
+          case PREHEAT_CASE_TEMP:
             checkkey = ETemp;
             HMI_ValueStruct.E_Temp = ui.material_preset[1].hotend_temp;
             Draw_Edit_Integer3(PREHEAT_CASE_TEMP, ui.material_preset[1].hotend_temp, true);
@@ -3893,7 +3896,7 @@ void HMI_Tune() {
             break;
         #endif
         #if HAS_HEATED_BED
-          case PREHEAT_CASE_BED: // Set bed temperature
+          case PREHEAT_CASE_BED:
             checkkey = BedTemp;
             HMI_ValueStruct.Bed_Temp = ui.material_preset[1].bed_temp;
             Draw_Edit_Integer3(PREHEAT_CASE_BED, ui.material_preset[1].bed_temp, true);
@@ -3901,7 +3904,7 @@ void HMI_Tune() {
             break;
         #endif
         #if HAS_FAN
-          case PREHEAT_CASE_FAN: // Set fan speed
+          case PREHEAT_CASE_FAN:
             checkkey = FanSpeed;
             HMI_ValueStruct.Fan_speed = ui.material_preset[1].fan_speed;
             Draw_Edit_Integer3(PREHEAT_CASE_FAN, ui.material_preset[1].fan_speed, true);
@@ -3909,7 +3912,7 @@ void HMI_Tune() {
             break;
         #endif
         #if ENABLED(EEPROM_SETTINGS)
-          case PREHEAT_CASE_SAVE: { // Save ABS configuration
+          case PREHEAT_CASE_SAVE: {
             const bool success = settings.save();
             HMI_AudioFeedback(success);
           } break;

commit 754b31918a73cb08c322102be5d3926d2ac59c18
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Sep 9 04:57:05 2021 -0500

    üé® Fewer serial macros

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index d14d6f10dd..76d77e4cab 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -1923,7 +1923,7 @@ void HMI_SDCardUpdate() {
   if (HMI_flag.home_flag) return;
   if (DWIN_lcd_sd_status != card.isMounted()) {
     DWIN_lcd_sd_status = card.isMounted();
-    //SERIAL_ECHOLNPAIR("HMI_SDCardUpdate: ", DWIN_lcd_sd_status);
+    //SERIAL_ECHOLNPGM("HMI_SDCardUpdate: ", DWIN_lcd_sd_status);
     if (DWIN_lcd_sd_status) {
       if (checkkey == SelectFile)
         Redraw_SD_List();

commit 521fda0235bc07c5e07889373a2a22c57fadf07f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Aug 27 16:12:08 2021 -0500

    üé® MarlinUI for E3V2 tweaks

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index a6218609df..d14d6f10dd 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -579,14 +579,8 @@ void DWIN_Draw_Label(const uint8_t row, const __FlashStringHelper *title) {
 }
 
 void DWIN_Draw_Signed_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, long value) {
-  if (value < 0) {
-    DWIN_Draw_String(true, size, Color_White, bColor, x - 8, y, F("-"));
-    DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, -value);
-  }
-  else {
-    DWIN_Draw_String(true, size, Color_White, bColor, x - 8, y, F(" "));
-    DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, value);
-  }
+  DWIN_Draw_String(true, size, Color_White, bColor, x - 8, y, value < 0 ? F("-") : F(" "));
+  DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, value < 0 ? -value : value);
 }
 
 void Draw_Edit_Integer3(const uint8_t row, const uint16_t value, const bool active=false) {

commit b0a91073b25f53e9e377f0ef4e01c9dd6fefd021
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Sep 5 20:32:29 2021 -0500

    üîß Sanity checks for Ender 3 V2

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 5ddc231817..a6218609df 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -30,7 +30,7 @@
 
 #include "dwin.h"
 
-#if ANY(AUTO_BED_LEVELING_BILINEAR, AUTO_BED_LEVELING_LINEAR, AUTO_BED_LEVELING_3POINT) && DISABLED(PROBE_MANUALLY)
+#if ENABLED(LCD_BED_LEVELING) && DISABLED(PROBE_MANUALLY) && ANY(AUTO_BED_LEVELING_BILINEAR, AUTO_BED_LEVELING_LINEAR, AUTO_BED_LEVELING_3POINT)
   #define HAS_ONESTEP_LEVELING 1
 #endif
 

commit 193205a40dd6b756bd69cab6fcb1af63ddd6d452
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Aug 19 21:11:10 2021 -0500

    Followup to CrealityUI cleanup
    
    Followup to #22586

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 1bbdc326be..5ddc231817 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -856,9 +856,8 @@ void Draw_Control_Menu() {
   #define CLINE(L) MBASE(CSCROL(L))
   #define CVISI(L) VISI(CONTROL_CASE_TOTAL, L, CSCROL(L))
 
-  // "Control" Title
   if (HMI_IsChinese())
-    DWIN_Frame_TitleCopy(103, 1, 28, 14);
+    DWIN_Frame_TitleCopy(103, 1, 28, 14);     // "Control"
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_CONTROL));
@@ -2028,8 +2027,8 @@ void Draw_Info_Menu() {
     DWIN_Frame_TitleCopy(30, 17, 28, 13);                   // "Info"
 
     DWIN_Frame_AreaCopy(1, 197, 149, 252, 161, 108, 102);   // "Size"
-    DWIN_Frame_AreaCopy(1, 1, 164, 56, 176, 108, 175);      // "Firmware Version"
-    DWIN_Frame_AreaCopy(1, 58, 164, 113, 176, 105, 248);    // "Contact Details"
+    DWIN_Frame_AreaCopy(1,   1, 164,  56, 176, 108, 175);   // "Firmware Version"
+    DWIN_Frame_AreaCopy(1,  58, 164, 113, 176, 105, 248);   // "Contact Details"
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -2432,7 +2431,7 @@ void Item_Adv_HomeOffsets(const uint8_t row) {
     }
     else {
       #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(row, GET_TEXT_F(MSG_SET_HOME_OFFSETS));
+        DWIN_Draw_Label(row, GET_TEXT_F(MSG_ZPROBE_OFFSETS));
       #else
         say_probe_offs_en(row);
       #endif
@@ -2502,11 +2501,16 @@ void Draw_AdvancedSettings_Menu() {
   #define ASCROL(L) (scroll + (L))
   #define AVISI(L) VISI(ADVSET_CASE_TOTAL, L, ASCROL(L))
 
-  #ifdef USE_STRING_HEADINGS
-    Draw_Title(GET_TEXT_F(MSG_ADVANCED_SETTINGS));
-  #else
-    DWIN_Frame_TitleCopy(93, 401, 126, 15); // "Advanced Settings"
-  #endif
+  if (false && HMI_IsChinese()) {
+    // TODO: Chinese "Advanced Settings"
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_ADVANCED_SETTINGS));
+    #else
+      DWIN_Frame_TitleCopy(93, 401, 126, 15); // "Advanced Settings"
+    #endif
+  }
 
   if (AVISI(0)) Draw_Back_First(select_advset.now == 0);
   if (AVISI(ADVSET_CASE_HOMEOFF)) Item_Adv_HomeOffsets(ASCROL(ADVSET_CASE_HOMEOFF));      // Set Home Offsets >

commit 737d2dd56438ba02f07e3693e9138fc9816d143b
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Aug 19 19:16:46 2021 -0500

    Followup to CrealityUI cleanup
    
    Followup to #22586

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 9e8ceed368..1bbdc326be 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -2434,7 +2434,7 @@ void Item_Adv_HomeOffsets(const uint8_t row) {
       #ifdef USE_STRING_TITLES
         DWIN_Draw_Label(row, GET_TEXT_F(MSG_SET_HOME_OFFSETS));
       #else
-        say_probe_offs_en(0, row);
+        say_probe_offs_en(row);
       #endif
     }
     Draw_Menu_Line(row, ICON_ProbeOff);

commit 11e8cd9db938fcc5ee5c5234f148655a8f19c20d
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Aug 18 02:32:37 2021 -0500

    ü©π Followup to CrealityUI cleanup
    
    - Followup to #22586 fixing `Draw_Menu_Line` with `GET_TEXT_F`.
    - More number drawing convenience functions.
    - Return on `ENCODER_DIFF_NO` to reduce indent.
    - Put Main Menu buttons closer to the top.
    - Move status message up slightly.
    - Fix some indentation.

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index f008a7a2b4..9e8ceed368 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -95,7 +95,7 @@
 #define PAUSE_HEAT
 
 #define MENU_CHAR_LIMIT  24
-#define STATUS_Y        360
+#define STATUS_Y        354
 
 // Print speed limit
 #define MIN_PRINT_SPEED  10
@@ -216,17 +216,6 @@ void HMI_ToggleLanguage() {
   #endif
 }
 
-void DWIN_Draw_Signed_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, long value) {
-  if (value < 0) {
-    DWIN_Draw_String(true, size, Color_White, bColor, x - 6, y, F("-"));
-    DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, -value);
-  }
-  else {
-    DWIN_Draw_String(true, size, Color_White, bColor, x - 6, y, F(" "));
-    DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, value);
-  }
-}
-
 typedef struct { uint16_t x, y, w, h; } icon_info_t;
 typedef struct { uint16_t x, y[2], w, h; } text_info_t;
 
@@ -241,7 +230,7 @@ void ICON_Button(const bool here, const int iconid, const icon_info_t &ico, cons
 // Main Menu: "Print"
 //
 void ICON_Print() {
-  constexpr icon_info_t ico = { 17, 130, 110, 100 };
+  constexpr icon_info_t ico = { 17, 110, 110, 100 };
   constexpr text_info_t txt[2] = {
     { 1, { 417, 449 }, 30, 14 },
     { 1, { 405, 447 }, 27, 15 }
@@ -253,7 +242,7 @@ void ICON_Print() {
 // Main Menu: "Prepare"
 //
 void ICON_Prepare() {
-  constexpr icon_info_t ico = { 145, 130, 110, 100 };
+  constexpr icon_info_t ico = { 145, 110, 110, 100 };
   constexpr text_info_t txt[2] = {
     { 33, { 417, 449 }, 51, 14 },
     { 31, { 405, 447 }, 27, 15 }
@@ -265,7 +254,7 @@ void ICON_Prepare() {
 // Main Menu: "Control"
 //
 void ICON_Control() {
-  constexpr icon_info_t ico = { 17, 246, 110, 100 };
+  constexpr icon_info_t ico = { 17, 226, 110, 100 };
   constexpr text_info_t txt[2] = {
     { 85, { 417, 449 }, 46, 14 },
     { 61, { 405, 447 }, 27, 15 }
@@ -277,7 +266,7 @@ void ICON_Control() {
 // Main Menu: "Info"
 //
 void ICON_StartInfo() {
-  constexpr icon_info_t ico = { 145, 246, 110, 100 };
+  constexpr icon_info_t ico = { 145, 226, 110, 100 };
   constexpr text_info_t txt[2] = {
     { 133, { 417, 449 }, 23, 14 },
     {  91, { 405, 447 }, 27, 15 }
@@ -289,7 +278,7 @@ void ICON_StartInfo() {
 // Main Menu: "Level"
 //
 void ICON_Leveling() {
-  constexpr icon_info_t ico = { 145, 246, 110, 100 };
+  constexpr icon_info_t ico = { 145, 226, 110, 100 };
   constexpr text_info_t txt[2] = {
     {  88, { 433, 464 }, 36, 14 },
     { 211, { 405, 447 }, 27, 15 }
@@ -301,7 +290,7 @@ void ICON_Leveling() {
 // Printing: "Tune"
 //
 void ICON_Tune() {
-  constexpr icon_info_t ico = { 8, 252, 80, 100 };
+  constexpr icon_info_t ico = { 8, 232, 80, 100 };
   constexpr text_info_t txt[2] = {
     {   0, { 433, 464 }, 32, 14 },
     { 121, { 405, 447 }, 27, 15 }
@@ -313,7 +302,7 @@ void ICON_Tune() {
 // Printing: "Pause"
 //
 void ICON_Pause() {
-  constexpr icon_info_t ico = { 96, 252, 80, 100 };
+  constexpr icon_info_t ico = { 96, 232, 80, 100 };
   constexpr text_info_t txt[2] = {
     { 157, { 417, 449 }, 39, 14 },
     { 181, { 405, 447 }, 27, 15 }
@@ -325,7 +314,7 @@ void ICON_Pause() {
 // Printing: "Resume"
 //
 void ICON_Resume() {
-  constexpr icon_info_t ico = { 96, 252, 80, 100 };
+  constexpr icon_info_t ico = { 96, 232, 80, 100 };
   constexpr text_info_t txt[2] = {
     { 33, { 433, 464 }, 53, 14 },
     {  1, { 405, 447 }, 27, 15 }
@@ -333,11 +322,18 @@ void ICON_Resume() {
   ICON_Button(select_print.now == 1, ICON_Continue_0, ico, txt);
 }
 
+void ICON_ResumeOrPause() {
+  if (printingIsPaused() || HMI_flag.pause_flag || HMI_flag.pause_action)
+    ICON_Resume();
+  else
+    ICON_Pause();
+}
+
 //
 // Printing: "Stop"
 //
 void ICON_Stop() {
-  constexpr icon_info_t ico = { 184, 252, 80, 100 };
+  constexpr icon_info_t ico = { 184, 232, 80, 100 };
   constexpr text_info_t txt[2] = {
     { 196, { 417, 449 }, 29, 14 },
     { 151, { 405, 447 }, 27, 12 }
@@ -429,10 +425,14 @@ void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const
   DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
 
+void Draw_Menu_LineF(const uint8_t line, const uint8_t icon=0, const __FlashStringHelper *label=nullptr, bool more=false) {
+  Draw_Menu_Line(line, icon, (char*)label, more);
+}
+
 void Draw_Checkbox_Line(const uint8_t line, const bool ison) {
   const uint16_t x = 225, y = EBASE(line) - 2;
   DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, x + 5, y, F(ison ? "X" : " "));
-  DWIN_Draw_Rectangle(0, Color_White, x + 2, y + 2, x + 17, y + 17);
+  DWIN_Draw_Rectangle(0, Color_White, x + 2, y + 2, x + 16, y + 16);
 }
 
 // AreaCopy for a Menu Item
@@ -578,6 +578,45 @@ void DWIN_Draw_Label(const uint8_t row, const __FlashStringHelper *title) {
   DWIN_Draw_Label(row, (char*)title);
 }
 
+void DWIN_Draw_Signed_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, long value) {
+  if (value < 0) {
+    DWIN_Draw_String(true, size, Color_White, bColor, x - 8, y, F("-"));
+    DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, -value);
+  }
+  else {
+    DWIN_Draw_String(true, size, Color_White, bColor, x - 8, y, F(" "));
+    DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, value);
+  }
+}
+
+void Draw_Edit_Integer3(const uint8_t row, const uint16_t value, const bool active=false) {
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 3, 220, EBASE(row), value);
+}
+
+void Draw_Edit_Integer4(const uint8_t row, const uint16_t value, const bool active=false) {
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 4, 220 - 1 * 8, EBASE(row), value);
+}
+
+void Draw_Edit_Float3(const uint8_t row, const uint16_t value, const bool active=false) {
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 3, UNITFDIGITS, 220 - UNITFDIGITS * 8, EBASE(row), value);
+}
+
+void Draw_Edit_Signed_Float2(const uint8_t row, const float value, const bool active=false) {
+  DWIN_Draw_Signed_Float(font8x16, active ? Select_Color : Color_Bg_Black, 2, UNITFDIGITS, 220 + 8 - UNITFDIGITS * 8, EBASE(row), value);
+}
+
+void Draw_Edit_Signed_Float3(const uint8_t row, const float value, const bool active=false) {
+  DWIN_Draw_Signed_Float(font8x16, active ? Select_Color : Color_Bg_Black, 3, UNITFDIGITS, 220 - UNITFDIGITS * 8, EBASE(row), value);
+}
+
+void Draw_Stat_Int(const uint16_t xpos, const uint16_t ypos, const uint16_t value) {
+  DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, xpos, ypos, value);
+}
+
+void Draw_Stat_Float(const uint16_t xpos, const uint16_t ypos, const float value) {
+  DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, xpos, ypos, value);
+}
+
 //
 // Prepare Menu
 //
@@ -623,7 +662,6 @@ void Item_Prepare_Home(const uint8_t row) {
     if (HMI_IsChinese()) {
       #if HAS_BED_PROBE
         Item_AreaCopy(174, 164, 223, 177, row);
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, EBASE(row), probe.offset.z * 100);
       #else
         Item_AreaCopy(43, 89, 98, 101, row);
       #endif
@@ -633,17 +671,17 @@ void Item_Prepare_Home(const uint8_t row) {
         #ifdef USE_STRING_TITLES
           DWIN_Draw_Label(row, GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
         #else
-          Item_AreaCopy(94, 179, 143, 190, row);   // "Z-Offset"
+          Item_AreaCopy( 94, 179, 143, 190, row); // "Z-Offset"
         #endif
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, EBASE(row), probe.offset.z * 100);
       #else
         #ifdef USE_STRING_TITLES
           DWIN_Draw_Label(row, GET_TEXT_F(MSG_SET_HOME_OFFSETS));
         #else
-          Item_AreaCopy(1,  76, 103,  87, row);       // "Set home offsets"
+          Item_AreaCopy(  1,  76, 103,  87, row); // "Set home offsets"
         #endif
       #endif
     }
+    Draw_Edit_Signed_Float2(row, BABY_Z_VAR * 100);
     Draw_Menu_Line(row, ICON_SetHome);
   }
 
@@ -658,7 +696,7 @@ void Item_Prepare_Home(const uint8_t row) {
         DWIN_Draw_Label(row, GET_TEXT_F(MSG_PREHEAT_1));
       #else
         Item_AreaCopy(108,  76, 155,  87, row); // "Preheat"
-        say_pla_en(52, row);                                          // "PLA"
+        say_pla_en(52, row);                    // "PLA"
       #endif
     }
     Draw_Menu_Line(row, ICON_PLAPreheat);
@@ -672,7 +710,7 @@ void Item_Prepare_Home(const uint8_t row) {
         DWIN_Draw_Label(row, F("Preheat " PREHEAT_2_LABEL));
       #else
         Item_AreaCopy(108,  76, 155,  87, row); // "Preheat"
-        say_abs_en(52, row);                                          // "ABS"
+        say_abs_en(52, row);                    // "ABS"
       #endif
     }
     Draw_Menu_Line(row, ICON_ABSPreheat);
@@ -829,9 +867,9 @@ void Draw_Control_Menu() {
     #endif
   }
 
-  if (CVISI(0)) Draw_Back_First(select_control.now == 0);                           // < Back
-  if (CVISI(CONTROL_CASE_TEMP)) Item_Control_Temp(CSCROL(CONTROL_CASE_TEMP));       // Temperature >
-  if (CVISI(CONTROL_CASE_MOVE)) Item_Control_Motion(CSCROL(CONTROL_CASE_MOVE));     // Motion >
+  if (CVISI(0)) Draw_Back_First(select_control.now == 0);                       // < Back
+  if (CVISI(CONTROL_CASE_TEMP)) Item_Control_Temp(CSCROL(CONTROL_CASE_TEMP));   // Temperature >
+  if (CVISI(CONTROL_CASE_MOVE)) Item_Control_Motion(CSCROL(CONTROL_CASE_MOVE)); // Motion >
 
   if (HMI_IsChinese()) {
     #if ENABLED(EEPROM_SETTINGS)
@@ -886,14 +924,6 @@ void Draw_Control_Menu() {
   #endif
 }
 
-void Draw_Edit_Integer3(const uint8_t line, const uint16_t value, const bool active=false) {
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 3, 220, EBASE(line), value);
-}
-
-void Draw_Edit_Integer4(const uint8_t line, const uint16_t value, const bool active=false) {
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 4, 210, EBASE(line), value);
-}
-
 //
 // Tune Menu
 //
@@ -974,7 +1004,7 @@ void Draw_Tune_Menu() {
   #endif
   #if HAS_ZOFFSET_ITEM
     Draw_Menu_Line(TUNE_CASE_ZOFF, ICON_Zoffset);
-    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, EBASE(TUNE_CASE_ZOFF), BABY_Z_VAR * 100);
+    Draw_Edit_Signed_Float2(TUNE_CASE_ZOFF, BABY_Z_VAR * 100);
   #endif
 }
 
@@ -1156,9 +1186,9 @@ void Popup_window_PauseOrStop() {
   Clear_Main_Window();
   Draw_Popup_Bkgd_60();
   if (HMI_IsChinese()) {
-         if (select_print.now == 1) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);    // Pause Print
-    else if (select_print.now == 2) DWIN_Frame_AreaCopy(1, 221, 320, 253, 336, 98, 150);    // Stop Print
-    DWIN_Frame_AreaCopy(1, 220, 304, 264, 319, 130, 150);
+         if (select_print.now == 1) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);    // Pause
+    else if (select_print.now == 2) DWIN_Frame_AreaCopy(1, 221, 320, 253, 336, 98, 150);    // Stop
+    DWIN_Frame_AreaCopy(1, 220, 304, 264, 319, 130, 150); // Print
     DWIN_ICON_Show(ICON, ICON_Confirm_C, 26, 280);
     DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 280);
   }
@@ -1172,43 +1202,40 @@ void Popup_window_PauseOrStop() {
 }
 
 void Draw_Printing_Screen() {
+  const uint16_t y = 168;
   if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(30, 1, 42, 14);                // "Printing"
-    DWIN_Frame_AreaCopy(1,  0, 72,  63, 86,  41, 188);  // "Printing Time"
-    DWIN_Frame_AreaCopy(1, 65, 72, 128, 86, 176, 188);  // "Remain"
+    DWIN_Frame_TitleCopy(30, 1, 42, 14);              // "Printing"
+    DWIN_Frame_AreaCopy(1,  0, 72,  63, 86,  43, y);  // "Printing Time"
+    DWIN_Frame_AreaCopy(1, 65, 72, 128, 86, 178, y);  // "Remain"
   }
   else {
-    DWIN_Frame_TitleCopy(42, 0, 47, 14);                // "Printing"
-    DWIN_Frame_AreaCopy(1,   1, 43,  97, 59,  41, 188); // "Printing Time"
-    DWIN_Frame_AreaCopy(1, 100, 43, 152, 56, 176, 188); // "Remain"
+    DWIN_Frame_TitleCopy(42, 0, 47, 14);              // "Printing"
+    DWIN_Frame_AreaCopy(1,   1, 43,  97, 59,  43, y); // "Printing Time"
+    DWIN_Frame_AreaCopy(1, 100, 43, 152, 56, 178, y); // "Remain"
   }
 }
 
 void Draw_Print_ProgressBar() {
+  constexpr uint16_t y = 93, h = 21;
   DWIN_ICON_Show(ICON, ICON_Bar, 15, 93);
-  DWIN_Draw_Rectangle(1, BarFill_Color, 16 + _card_percent * 240 / 100, 93, 256, 113);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Percent_Color, Color_Bg_Black, 2, 117, 133, _card_percent);
-  DWIN_Draw_String(false, font8x16, Percent_Color, Color_Bg_Black, 133, 133, F("%"));
+  DWIN_Draw_Rectangle(1, BarFill_Color, 16 + _card_percent * 240 / 100, y, 256, y + h - 1);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Percent_Color, Color_Bg_Black, 2, 117, y + 40, _card_percent);
+  DWIN_Draw_String(false, font8x16, Percent_Color, Color_Bg_Black, 133, y + 40, F("%"));
 }
 
 void Draw_Print_ProgressElapsed() {
+  constexpr uint16_t x = 45, y = 192;
   duration_t elapsed = print_job_timer.duration(); // print timer
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 42, 212, elapsed.value / 3600);
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, 58, 212, F(":"));
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 66, 212, (elapsed.value % 3600) / 60);
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x, y, elapsed.value / 3600);
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, x + 8 * 2, y, F(":"));
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x + 8 * 3, y, (elapsed.value % 3600) / 60);
 }
 
 void Draw_Print_ProgressRemain() {
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 176, 212, _remain_time / 3600);
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, 192, 212, F(":"));
-  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 200, 212, (_remain_time % 3600) / 60);
-}
-
-void ICON_ResumeOrPause() {
-  if (printingIsPaused() || HMI_flag.pause_flag || HMI_flag.pause_action)
-    ICON_Resume();
-  else
-    ICON_Pause();
+  constexpr uint16_t x = 179, y = 192;
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x, y, _remain_time / 3600);
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, x + 8 * 2, y, F(":"));
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, x + 8 * 3, y, (_remain_time % 3600) / 60);
 }
 
 void Goto_PrintProcess() {
@@ -1226,8 +1253,8 @@ void Goto_PrintProcess() {
   const int8_t npos = _MAX(0U, DWIN_WIDTH - strlen(name) * MENU_CHR_W) / 2;
   DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, npos, 60, name);
 
-  DWIN_ICON_Show(ICON, ICON_PrintTime, 17, 193);
-  DWIN_ICON_Show(ICON, ICON_RemainTime, 150, 191);
+  DWIN_ICON_Show(ICON, ICON_PrintTime,   17, 163);
+  DWIN_ICON_Show(ICON, ICON_RemainTime, 150, 161);
 
   Draw_Print_ProgressBar();
   Draw_Print_ProgressElapsed();
@@ -1283,47 +1310,44 @@ void HMI_Move_Done(const AxisEnum axis) {
 
 void HMI_Move_X() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scaled)) {
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Move_X_scaled);
-      return HMI_Move_Done(X_AXIS);
-    }
-    LIMIT(HMI_ValueStruct.Move_X_scaled, (X_MIN_POS) * MINUNITMULT, (X_MAX_POS) * MINUNITMULT);
-    current_position.x = HMI_ValueStruct.Move_X_scaled / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Move_X_scaled);
-    DWIN_UpdateLCD();
-    HMI_Plan_Move(homing_feedrate(X_AXIS));
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scaled)) {
+    Draw_Edit_Float3(1, HMI_ValueStruct.Move_X_scaled);
+    return HMI_Move_Done(X_AXIS);
   }
+  LIMIT(HMI_ValueStruct.Move_X_scaled, (X_MIN_POS) * MINUNITMULT, (X_MAX_POS) * MINUNITMULT);
+  current_position.x = HMI_ValueStruct.Move_X_scaled / MINUNITMULT;
+  Draw_Edit_Float3(1, HMI_ValueStruct.Move_X_scaled, true);
+  DWIN_UpdateLCD();
+  HMI_Plan_Move(homing_feedrate(X_AXIS));
 }
 
 void HMI_Move_Y() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scaled)) {
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Move_Y_scaled);
-      return HMI_Move_Done(Y_AXIS);
-    }
-    LIMIT(HMI_ValueStruct.Move_Y_scaled, (Y_MIN_POS) * MINUNITMULT, (Y_MAX_POS) * MINUNITMULT);
-    current_position.y = HMI_ValueStruct.Move_Y_scaled / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Move_Y_scaled);
-    DWIN_UpdateLCD();
-    HMI_Plan_Move(homing_feedrate(Y_AXIS));
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scaled)) {
+    Draw_Edit_Float3(2, HMI_ValueStruct.Move_Y_scaled);
+    return HMI_Move_Done(Y_AXIS);
   }
+  LIMIT(HMI_ValueStruct.Move_Y_scaled, (Y_MIN_POS) * MINUNITMULT, (Y_MAX_POS) * MINUNITMULT);
+  current_position.y = HMI_ValueStruct.Move_Y_scaled / MINUNITMULT;
+  Draw_Edit_Float3(2, HMI_ValueStruct.Move_Y_scaled, true);
+  DWIN_UpdateLCD();
+  HMI_Plan_Move(homing_feedrate(Y_AXIS));
 }
 
 void HMI_Move_Z() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scaled)) {
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(3), HMI_ValueStruct.Move_Z_scaled);
-      return HMI_Move_Done(Z_AXIS);
-    }
-    LIMIT(HMI_ValueStruct.Move_Z_scaled, (Z_MIN_POS) * MINUNITMULT, (Z_MAX_POS) * MINUNITMULT);
-    current_position.z = HMI_ValueStruct.Move_Z_scaled / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 220, EBASE(3), HMI_ValueStruct.Move_Z_scaled);
-    DWIN_UpdateLCD();
-    HMI_Plan_Move(homing_feedrate(Z_AXIS));
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scaled)) {
+    Draw_Edit_Float3(3, HMI_ValueStruct.Move_Z_scaled);
+    return HMI_Move_Done(Z_AXIS);
   }
+  LIMIT(HMI_ValueStruct.Move_Z_scaled, (Z_MIN_POS) * MINUNITMULT, (Z_MAX_POS) * MINUNITMULT);
+  current_position.z = HMI_ValueStruct.Move_Z_scaled / MINUNITMULT;
+  Draw_Edit_Float3(3, HMI_ValueStruct.Move_Z_scaled, true);
+  DWIN_UpdateLCD();
+  HMI_Plan_Move(homing_feedrate(Z_AXIS));
 }
 
 #if HAS_HOTEND
@@ -1331,18 +1355,17 @@ void HMI_Move_Z() {
   void HMI_Move_E() {
     static float last_E_scaled = 0;
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_E_scaled)) {
-        last_E_scaled = HMI_ValueStruct.Move_E_scaled;
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(4), last_E_scaled);
-        return HMI_Move_Done(E_AXIS);
-      }
-      LIMIT(HMI_ValueStruct.Move_E_scaled, last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT, last_E_scaled + (EXTRUDE_MAXLENGTH) * MINUNITMULT);
-      current_position.e = HMI_ValueStruct.Move_E_scaled / MINUNITMULT;
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(4), HMI_ValueStruct.Move_E_scaled);
-      DWIN_UpdateLCD();
-      HMI_Plan_Move(MMM_TO_MMS(FEEDRATE_E));
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_E_scaled)) {
+      last_E_scaled = HMI_ValueStruct.Move_E_scaled;
+      Draw_Edit_Signed_Float3(4, last_E_scaled);
+      return HMI_Move_Done(E_AXIS);
     }
+    LIMIT(HMI_ValueStruct.Move_E_scaled, last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT, last_E_scaled + (EXTRUDE_MAXLENGTH) * MINUNITMULT);
+    current_position.e = HMI_ValueStruct.Move_E_scaled / MINUNITMULT;
+    Draw_Edit_Signed_Float3(4, HMI_ValueStruct.Move_E_scaled, true);
+    DWIN_UpdateLCD();
+    HMI_Plan_Move(MMM_TO_MMS(FEEDRATE_E));
   }
 
 #endif
@@ -1353,32 +1376,31 @@ void HMI_Move_Z() {
 
   void HMI_Zoffset() {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      uint8_t zoff_line;
-      switch (HMI_ValueStruct.show_mode) {
-        case -4: zoff_line = PREPARE_CASE_ZOFF + MROWS - index_prepare; break;
-        default: zoff_line = TUNE_CASE_ZOFF + MROWS - index_tune;
-      }
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.offset_value)) {
-        EncoderRate.enabled = false;
-        #if HAS_BED_PROBE
-          probe.offset.z = dwin_zoffset;
-          TERN_(EEPROM_SETTINGS, settings.save());
-        #endif
-        checkkey = HMI_ValueStruct.show_mode == -4 ? Prepare : Tune;
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, EBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
-        DWIN_UpdateLCD();
-        return;
-      }
-      LIMIT(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
-      last_zoffset = dwin_zoffset;
-      dwin_zoffset = HMI_ValueStruct.offset_value / 100.0f;
-      #if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
-        if (BABYSTEP_ALLOWED()) babystep.add_mm(Z_AXIS, dwin_zoffset - last_zoffset);
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+    uint8_t zoff_line;
+    switch (HMI_ValueStruct.show_mode) {
+      case -4: zoff_line = PREPARE_CASE_ZOFF + MROWS - index_prepare; break;
+      default: zoff_line = TUNE_CASE_ZOFF + MROWS - index_tune;
+    }
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.offset_value)) {
+      EncoderRate.enabled = false;
+      #if HAS_BED_PROBE
+        probe.offset.z = dwin_zoffset;
+        TERN_(EEPROM_SETTINGS, settings.save());
       #endif
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, EBASE(zoff_line), HMI_ValueStruct.offset_value);
+      checkkey = HMI_ValueStruct.show_mode == -4 ? Prepare : Tune;
+      Draw_Edit_Signed_Float2(zoff_line, TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
       DWIN_UpdateLCD();
+      return;
     }
+    LIMIT(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
+    last_zoffset = dwin_zoffset;
+    dwin_zoffset = HMI_ValueStruct.offset_value / 100.0f;
+    #if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
+      if (BABYSTEP_ALLOWED()) babystep.add_mm(Z_AXIS, dwin_zoffset - last_zoffset);
+    #endif
+    Draw_Edit_Signed_Float2(zoff_line, HMI_ValueStruct.offset_value, true);
+    DWIN_UpdateLCD();
   }
 
 #endif // HAS_ZOFFSET_ITEM
@@ -1387,41 +1409,40 @@ void HMI_Move_Z() {
 
   void HMI_ETemp() {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      uint8_t temp_line;
-      switch (HMI_ValueStruct.show_mode) {
-        case -1: temp_line = TEMP_CASE_TEMP; break;
-        case -2: temp_line = PREHEAT_CASE_TEMP; break;
-        case -3: temp_line = PREHEAT_CASE_TEMP; break;
-        default: temp_line = TUNE_CASE_TEMP + MROWS - index_tune;
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+    uint8_t temp_line;
+    switch (HMI_ValueStruct.show_mode) {
+      case -1: temp_line = TEMP_CASE_TEMP; break;
+      case -2: temp_line = PREHEAT_CASE_TEMP; break;
+      case -3: temp_line = PREHEAT_CASE_TEMP; break;
+      default: temp_line = TUNE_CASE_TEMP + MROWS - index_tune;
+    }
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.E_Temp)) {
+      EncoderRate.enabled = false;
+      if (HMI_ValueStruct.show_mode == -2) {
+        checkkey = PLAPreheat;
+        ui.material_preset[0].hotend_temp = HMI_ValueStruct.E_Temp;
+        Draw_Edit_Integer3(temp_line, ui.material_preset[0].hotend_temp);
+        return;
       }
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.E_Temp)) {
-        EncoderRate.enabled = false;
-        if (HMI_ValueStruct.show_mode == -2) {
-          checkkey = PLAPreheat;
-          ui.material_preset[0].hotend_temp = HMI_ValueStruct.E_Temp;
-          Draw_Edit_Integer3(temp_line, ui.material_preset[0].hotend_temp);
-          return;
-        }
-        else if (HMI_ValueStruct.show_mode == -3) {
-          checkkey = ABSPreheat;
-          ui.material_preset[1].hotend_temp = HMI_ValueStruct.E_Temp;
-          Draw_Edit_Integer3(temp_line, ui.material_preset[1].hotend_temp);
-          return;
-        }
-        else if (HMI_ValueStruct.show_mode == -1) // Temperature
-          checkkey = TemperatureID;
-        else
-          checkkey = Tune;
-        Draw_Edit_Integer3(temp_line, HMI_ValueStruct.E_Temp);
-        thermalManager.setTargetHotend(HMI_ValueStruct.E_Temp, 0);
+      else if (HMI_ValueStruct.show_mode == -3) {
+        checkkey = ABSPreheat;
+        ui.material_preset[1].hotend_temp = HMI_ValueStruct.E_Temp;
+        Draw_Edit_Integer3(temp_line, ui.material_preset[1].hotend_temp);
         return;
       }
-      // E_Temp limit
-      LIMIT(HMI_ValueStruct.E_Temp, HEATER_0_MINTEMP, thermalManager.hotend_max_target(0));
-      // E_Temp value
-      Draw_Edit_Integer3(temp_line, HMI_ValueStruct.E_Temp, true);
+      else if (HMI_ValueStruct.show_mode == -1) // Temperature
+        checkkey = TemperatureID;
+      else
+        checkkey = Tune;
+      Draw_Edit_Integer3(temp_line, HMI_ValueStruct.E_Temp);
+      thermalManager.setTargetHotend(HMI_ValueStruct.E_Temp, 0);
+      return;
     }
+    // E_Temp limit
+    LIMIT(HMI_ValueStruct.E_Temp, HEATER_0_MINTEMP, thermalManager.hotend_max_target(0));
+    // E_Temp value
+    Draw_Edit_Integer3(temp_line, HMI_ValueStruct.E_Temp, true);
   }
 
 #endif // HAS_HOTEND
@@ -1430,41 +1451,40 @@ void HMI_Move_Z() {
 
   void HMI_BedTemp() {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      uint8_t bed_line;
-      switch (HMI_ValueStruct.show_mode) {
-        case -1: bed_line = TEMP_CASE_BED; break;
-        case -2: bed_line = PREHEAT_CASE_BED; break;
-        case -3: bed_line = PREHEAT_CASE_BED; break;
-        default: bed_line = TUNE_CASE_BED + MROWS - index_tune;
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+    uint8_t bed_line;
+    switch (HMI_ValueStruct.show_mode) {
+      case -1: bed_line = TEMP_CASE_BED; break;
+      case -2: bed_line = PREHEAT_CASE_BED; break;
+      case -3: bed_line = PREHEAT_CASE_BED; break;
+      default: bed_line = TUNE_CASE_BED + MROWS - index_tune;
+    }
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Bed_Temp)) {
+      EncoderRate.enabled = false;
+      if (HMI_ValueStruct.show_mode == -2) {
+        checkkey = PLAPreheat;
+        ui.material_preset[0].bed_temp = HMI_ValueStruct.Bed_Temp;
+        Draw_Edit_Integer3(bed_line, ui.material_preset[0].bed_temp);
+        return;
       }
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Bed_Temp)) {
-        EncoderRate.enabled = false;
-        if (HMI_ValueStruct.show_mode == -2) {
-          checkkey = PLAPreheat;
-          ui.material_preset[0].bed_temp = HMI_ValueStruct.Bed_Temp;
-          Draw_Edit_Integer3(bed_line, ui.material_preset[0].bed_temp);
-          return;
-        }
-        else if (HMI_ValueStruct.show_mode == -3) {
-          checkkey = ABSPreheat;
-          ui.material_preset[1].bed_temp = HMI_ValueStruct.Bed_Temp;
-          Draw_Edit_Integer3(bed_line, ui.material_preset[1].bed_temp);
-          return;
-        }
-        else if (HMI_ValueStruct.show_mode == -1)
-          checkkey = TemperatureID;
-        else
-          checkkey = Tune;
-        Draw_Edit_Integer3(bed_line, HMI_ValueStruct.Bed_Temp);
-        thermalManager.setTargetBed(HMI_ValueStruct.Bed_Temp);
+      else if (HMI_ValueStruct.show_mode == -3) {
+        checkkey = ABSPreheat;
+        ui.material_preset[1].bed_temp = HMI_ValueStruct.Bed_Temp;
+        Draw_Edit_Integer3(bed_line, ui.material_preset[1].bed_temp);
         return;
       }
-      // Bed_Temp limit
-      LIMIT(HMI_ValueStruct.Bed_Temp, BED_MINTEMP, BED_MAX_TARGET);
-      // Bed_Temp value
-      Draw_Edit_Integer3(bed_line, HMI_ValueStruct.Bed_Temp, true);
+      else if (HMI_ValueStruct.show_mode == -1)
+        checkkey = TemperatureID;
+      else
+        checkkey = Tune;
+      Draw_Edit_Integer3(bed_line, HMI_ValueStruct.Bed_Temp);
+      thermalManager.setTargetBed(HMI_ValueStruct.Bed_Temp);
+      return;
     }
+    // Bed_Temp limit
+    LIMIT(HMI_ValueStruct.Bed_Temp, BED_MINTEMP, BED_MAX_TARGET);
+    // Bed_Temp value
+    Draw_Edit_Integer3(bed_line, HMI_ValueStruct.Bed_Temp, true);
   }
 
 #endif // HAS_HEATED_BED
@@ -1473,147 +1493,141 @@ void HMI_Move_Z() {
 
   void HMI_FanSpeed() {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      uint8_t fan_line;
-      switch (HMI_ValueStruct.show_mode) {
-        case -1: fan_line = TEMP_CASE_FAN; break;
-        case -2: fan_line = PREHEAT_CASE_FAN; break;
-        case -3: fan_line = PREHEAT_CASE_FAN; break;
-        default: fan_line = TUNE_CASE_FAN + MROWS - index_tune;
-      }
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+    uint8_t fan_line;
+    switch (HMI_ValueStruct.show_mode) {
+      case -1: fan_line = TEMP_CASE_FAN; break;
+      case -2: fan_line = PREHEAT_CASE_FAN; break;
+      case -3: fan_line = PREHEAT_CASE_FAN; break;
+      default: fan_line = TUNE_CASE_FAN + MROWS - index_tune;
+    }
 
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Fan_speed)) {
-        EncoderRate.enabled = false;
-        if (HMI_ValueStruct.show_mode == -2) {
-          checkkey = PLAPreheat;
-          ui.material_preset[0].fan_speed = HMI_ValueStruct.Fan_speed;
-          Draw_Edit_Integer3(fan_line, ui.material_preset[0].fan_speed);
-          return;
-        }
-        else if (HMI_ValueStruct.show_mode == -3) {
-          checkkey = ABSPreheat;
-          ui.material_preset[1].fan_speed = HMI_ValueStruct.Fan_speed;
-          Draw_Edit_Integer3(fan_line, ui.material_preset[1].fan_speed);
-          return;
-        }
-        else if (HMI_ValueStruct.show_mode == -1)
-          checkkey = TemperatureID;
-        else
-          checkkey = Tune;
-        Draw_Edit_Integer3(fan_line, HMI_ValueStruct.Fan_speed);
-        thermalManager.set_fan_speed(0, HMI_ValueStruct.Fan_speed);
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Fan_speed)) {
+      EncoderRate.enabled = false;
+      if (HMI_ValueStruct.show_mode == -2) {
+        checkkey = PLAPreheat;
+        ui.material_preset[0].fan_speed = HMI_ValueStruct.Fan_speed;
+        Draw_Edit_Integer3(fan_line, ui.material_preset[0].fan_speed);
+        return;
+      }
+      else if (HMI_ValueStruct.show_mode == -3) {
+        checkkey = ABSPreheat;
+        ui.material_preset[1].fan_speed = HMI_ValueStruct.Fan_speed;
+        Draw_Edit_Integer3(fan_line, ui.material_preset[1].fan_speed);
         return;
       }
-      // Fan_speed limit
-      LIMIT(HMI_ValueStruct.Fan_speed, 0, 255);
-      // Fan_speed value
-      Draw_Edit_Integer3(fan_line, HMI_ValueStruct.Fan_speed, true);
+      else if (HMI_ValueStruct.show_mode == -1)
+        checkkey = TemperatureID;
+      else
+        checkkey = Tune;
+      Draw_Edit_Integer3(fan_line, HMI_ValueStruct.Fan_speed);
+      thermalManager.set_fan_speed(0, HMI_ValueStruct.Fan_speed);
+      return;
     }
+    // Fan_speed limit
+    LIMIT(HMI_ValueStruct.Fan_speed, 0, 255);
+    // Fan_speed value
+    Draw_Edit_Integer3(fan_line, HMI_ValueStruct.Fan_speed, true);
   }
 
 #endif // HAS_PREHEAT && HAS_FAN
 
 void HMI_PrintSpeed() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.print_speed)) {
-      checkkey = Tune;
-      EncoderRate.enabled = false;
-      feedrate_percentage = HMI_ValueStruct.print_speed;
-      Draw_Edit_Integer3(select_tune.now + MROWS - index_tune, HMI_ValueStruct.print_speed);
-      return;
-    }
-    // print_speed limit
-    LIMIT(HMI_ValueStruct.print_speed, MIN_PRINT_SPEED, MAX_PRINT_SPEED);
-    // print_speed value
-    Draw_Edit_Integer3(select_tune.now + MROWS - index_tune, HMI_ValueStruct.print_speed, true);
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.print_speed)) {
+    checkkey = Tune;
+    EncoderRate.enabled = false;
+    feedrate_percentage = HMI_ValueStruct.print_speed;
+    Draw_Edit_Integer3(select_tune.now + MROWS - index_tune, HMI_ValueStruct.print_speed);
+    return;
   }
+  // print_speed limit
+  LIMIT(HMI_ValueStruct.print_speed, MIN_PRINT_SPEED, MAX_PRINT_SPEED);
+  // print_speed value
+  Draw_Edit_Integer3(select_tune.now + MROWS - index_tune, HMI_ValueStruct.print_speed, true);
 }
 
 #define LAST_AXIS TERN(HAS_HOTEND, E_AXIS, Z_AXIS)
 
 void HMI_MaxFeedspeedXYZE() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Feedspeed)) {
-      checkkey = MaxSpeed;
-      EncoderRate.enabled = false;
-      if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
-        planner.set_max_feedrate(HMI_flag.feedspeed_axis, HMI_ValueStruct.Max_Feedspeed);
-      Draw_Edit_Integer4(select_speed.now, HMI_ValueStruct.Max_Feedspeed);
-      return;
-    }
-    // MaxFeedspeed limit
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Feedspeed)) {
+    checkkey = MaxSpeed;
+    EncoderRate.enabled = false;
     if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
-      NOMORE(HMI_ValueStruct.Max_Feedspeed, default_max_feedrate[HMI_flag.feedspeed_axis] * 2);
-    if (HMI_ValueStruct.Max_Feedspeed < MIN_MAXFEEDSPEED) HMI_ValueStruct.Max_Feedspeed = MIN_MAXFEEDSPEED;
-    // MaxFeedspeed value
-    Draw_Edit_Integer4(select_speed.now, HMI_ValueStruct.Max_Feedspeed, true);
+      planner.set_max_feedrate(HMI_flag.feedspeed_axis, HMI_ValueStruct.Max_Feedspeed);
+    Draw_Edit_Integer4(select_speed.now, HMI_ValueStruct.Max_Feedspeed);
+    return;
   }
+  // MaxFeedspeed limit
+  if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
+    NOMORE(HMI_ValueStruct.Max_Feedspeed, default_max_feedrate[HMI_flag.feedspeed_axis] * 2);
+  if (HMI_ValueStruct.Max_Feedspeed < MIN_MAXFEEDSPEED) HMI_ValueStruct.Max_Feedspeed = MIN_MAXFEEDSPEED;
+  // MaxFeedspeed value
+  Draw_Edit_Integer4(select_speed.now, HMI_ValueStruct.Max_Feedspeed, true);
 }
 
 void HMI_MaxAccelerationXYZE() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Acceleration)) {
-      checkkey = MaxAcceleration;
-      EncoderRate.enabled = false;
-      if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
-        planner.set_max_acceleration(HMI_flag.acc_axis, HMI_ValueStruct.Max_Acceleration);
-      Draw_Edit_Integer4(select_acc.now, HMI_ValueStruct.Max_Acceleration);
-      return;
-    }
-    // MaxAcceleration limit
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Acceleration)) {
+    checkkey = MaxAcceleration;
+    EncoderRate.enabled = false;
     if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
-      NOMORE(HMI_ValueStruct.Max_Acceleration, default_max_acceleration[HMI_flag.acc_axis] * 2);
-    if (HMI_ValueStruct.Max_Acceleration < MIN_MAXACCELERATION) HMI_ValueStruct.Max_Acceleration = MIN_MAXACCELERATION;
-    // MaxAcceleration value
-    Draw_Edit_Integer4(select_acc.now, HMI_ValueStruct.Max_Acceleration, true);
+      planner.set_max_acceleration(HMI_flag.acc_axis, HMI_ValueStruct.Max_Acceleration);
+    Draw_Edit_Integer4(select_acc.now, HMI_ValueStruct.Max_Acceleration);
+    return;
   }
+  // MaxAcceleration limit
+  if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
+    NOMORE(HMI_ValueStruct.Max_Acceleration, default_max_acceleration[HMI_flag.acc_axis] * 2);
+  if (HMI_ValueStruct.Max_Acceleration < MIN_MAXACCELERATION) HMI_ValueStruct.Max_Acceleration = MIN_MAXACCELERATION;
+  // MaxAcceleration value
+  Draw_Edit_Integer4(select_acc.now, HMI_ValueStruct.Max_Acceleration, true);
 }
 
 #if HAS_CLASSIC_JERK
 
   void HMI_MaxJerkXYZE() {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Jerk_scaled)) {
-        checkkey = MaxJerk;
-        EncoderRate.enabled = false;
-        if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
-          planner.set_max_jerk(HMI_flag.jerk_axis, HMI_ValueStruct.Max_Jerk_scaled / 10);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
-        return;
-      }
-      // MaxJerk limit
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Jerk_scaled)) {
+      checkkey = MaxJerk;
+      EncoderRate.enabled = false;
       if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
-        NOMORE(HMI_ValueStruct.Max_Jerk_scaled, default_max_jerk[HMI_flag.jerk_axis] * 2 * MINUNITMULT);
-      NOLESS(HMI_ValueStruct.Max_Jerk_scaled, (MIN_MAXJERK) * MINUNITMULT);
-      // MaxJerk value
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, EBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
+        planner.set_max_jerk(HMI_flag.jerk_axis, HMI_ValueStruct.Max_Jerk_scaled / 10);
+      Draw_Edit_Float3(select_jerk.now, HMI_ValueStruct.Max_Jerk_scaled);
+      return;
     }
+    // MaxJerk limit
+    if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
+      NOMORE(HMI_ValueStruct.Max_Jerk_scaled, default_max_jerk[HMI_flag.jerk_axis] * 2 * MINUNITMULT);
+    NOLESS(HMI_ValueStruct.Max_Jerk_scaled, (MIN_MAXJERK) * MINUNITMULT);
+    // MaxJerk value
+    Draw_Edit_Float3(select_jerk.now, HMI_ValueStruct.Max_Jerk_scaled, true);
   }
 
 #endif // HAS_CLASSIC_JERK
 
 void HMI_StepXYZE() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-  if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Step_scaled)) {
-      checkkey = Step;
-      EncoderRate.enabled = false;
-      if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
-        planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step_scaled / 10;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
-      return;
-    }
-    // Step limit
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+  if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Step_scaled)) {
+    checkkey = Step;
+    EncoderRate.enabled = false;
     if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
-      NOMORE(HMI_ValueStruct.Max_Step_scaled, 999.9 * MINUNITMULT);
-    NOLESS(HMI_ValueStruct.Max_Step_scaled, MIN_STEP);
-    // Step value
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, EBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
+      planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step_scaled / 10;
+    Draw_Edit_Float3(select_step.now, HMI_ValueStruct.Max_Step_scaled);
+    return;
   }
+  // Step limit
+  if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
+    NOMORE(HMI_ValueStruct.Max_Step_scaled, 999.9 * MINUNITMULT);
+  NOLESS(HMI_ValueStruct.Max_Step_scaled, MIN_STEP);
+  // Step value
+  Draw_Edit_Float3(select_step.now, HMI_ValueStruct.Max_Step_scaled, true);
 }
 
 // Draw X, Y, Z and blink if in an un-homed or un-trusted state
@@ -1708,34 +1722,34 @@ void update_variable() {
 
   #if HAS_HOTEND
     if (_new_hotend_temp)
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 384, _hotendtemp);
+      Draw_Stat_Int(28, 384, _hotendtemp);
     if (_new_hotend_target)
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 384, _hotendtarget);
+      Draw_Stat_Int(25 + 4 * STAT_CHR_W + 6, 384, _hotendtarget);
 
     static int16_t _flow = planner.flow_percentage[0];
     if (_flow != planner.flow_percentage[0]) {
       _flow = planner.flow_percentage[0];
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 417, _flow);
+      Draw_Stat_Int(116 + 2 * STAT_CHR_W, 417, _flow);
     }
   #endif
 
   #if HAS_HEATED_BED
     if (_new_bed_temp)
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 417, _bedtemp);
+      Draw_Stat_Int(28, 417, _bedtemp);
     if (_new_bed_target)
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 417, _bedtarget);
+      Draw_Stat_Int(25 + 4 * STAT_CHR_W + 6, 417, _bedtarget);
   #endif
 
   static int16_t _feedrate = 100;
   if (_feedrate != feedrate_percentage) {
     _feedrate = feedrate_percentage;
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 384, _feedrate);
+    Draw_Stat_Int(116 + 2 * STAT_CHR_W, 384, _feedrate);
   }
 
   #if HAS_FAN
     if (_new_fanspeed) {
       _fanspeed = thermalManager.fan_speed[0];
-      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 195 + 2 * STAT_CHR_W, 384, _fanspeed);
+      Draw_Stat_Int(195 + 2 * STAT_CHR_W, 384, _fanspeed);
     }
   #endif
 
@@ -1743,11 +1757,11 @@ void update_variable() {
   if (BABY_Z_VAR != _offset) {
     _offset = BABY_Z_VAR;
     if (BABY_Z_VAR < 0) {
-      DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, -_offset * 100);
+      Draw_Stat_Float(207, 417, -_offset * 100);
       DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
     }
     else {
-      DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, _offset * 100);
+      Draw_Stat_Float(207, 417, _offset * 100);
       DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
     }
   }
@@ -1948,29 +1962,29 @@ void Draw_Status_Area(const bool with_update) {
 
   #if HAS_HOTEND
     DWIN_ICON_Show(ICON, ICON_HotendTemp, 10, 383);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 384, thermalManager.wholeDegHotend(0));
+    Draw_Stat_Int(28, 384, thermalManager.wholeDegHotend(0));
     DWIN_Draw_String(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 384, F("/"));
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 384, thermalManager.degTargetHotend(0));
+    Draw_Stat_Int(25 + 4 * STAT_CHR_W + 6, 384, thermalManager.degTargetHotend(0));
 
     DWIN_ICON_Show(ICON, ICON_StepE, 112, 417);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 417, planner.flow_percentage[0]);
+    Draw_Stat_Int(116 + 2 * STAT_CHR_W, 417, planner.flow_percentage[0]);
     DWIN_Draw_String(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 417, F("%"));
   #endif
 
   #if HAS_HEATED_BED
     DWIN_ICON_Show(ICON, ICON_BedTemp, 10, 416);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 417, thermalManager.wholeDegBed());
+    Draw_Stat_Int(28, 417, thermalManager.wholeDegBed());
     DWIN_Draw_String(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 417, F("/"));
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 417, thermalManager.degTargetBed());
+    Draw_Stat_Int(25 + 4 * STAT_CHR_W + 6, 417, thermalManager.degTargetBed());
   #endif
 
   DWIN_ICON_Show(ICON, ICON_Speed, 113, 383);
-  DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 384, feedrate_percentage);
+  Draw_Stat_Int(116 + 2 * STAT_CHR_W, 384, feedrate_percentage);
   DWIN_Draw_String(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 384, F("%"));
 
   #if HAS_FAN
     DWIN_ICON_Show(ICON, ICON_FanSpeed, 187, 383);
-    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 195 + 2 * STAT_CHR_W, 384, thermalManager.fan_speed[0]);
+    Draw_Stat_Int(195 + 2 * STAT_CHR_W, 384, thermalManager.fan_speed[0]);
   #endif
 
   #if HAS_ZOFFSET_ITEM
@@ -1978,11 +1992,11 @@ void Draw_Status_Area(const bool with_update) {
   #endif
 
   if (BABY_Z_VAR < 0) {
-    DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, -BABY_Z_VAR * 100);
+    Draw_Stat_Float(207, 417, -BABY_Z_VAR * 100);
     DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
   }
   else {
-    DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, BABY_Z_VAR * 100);
+    Draw_Stat_Float(207, 417, BABY_Z_VAR * 100);
     DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
   }
 
@@ -2366,9 +2380,7 @@ void Draw_Move_Menu() {
     Item_AreaCopy(58, 118, 106, 132, 1);
     Item_AreaCopy(109, 118, 157, 132, 2);
     Item_AreaCopy(160, 118, 209, 132, 3);
-    #if HAS_HOTEND
-      Item_AreaCopy(212, 118, 253, 131, 4);
-    #endif
+    TERN_(HAS_HOTEND, Item_AreaCopy(212, 118, 253, 131, 4));
   }
   else {
     #ifdef USE_STRING_HEADINGS
@@ -2381,16 +2393,12 @@ void Draw_Move_Menu() {
       DWIN_Draw_Label(1, GET_TEXT_F(MSG_MOVE_X));
       DWIN_Draw_Label(2, GET_TEXT_F(MSG_MOVE_Y));
       DWIN_Draw_Label(3, GET_TEXT_F(MSG_MOVE_Z));
-      #if HAS_HOTEND
-        DWIN_Draw_Label(4, GET_TEXT_F(MSG_MOVE_E));
-      #endif
+      TERN_(HAS_HOTEND, DWIN_Draw_Label(4, GET_TEXT_F(MSG_MOVE_E)));
     #else
       say_move_en(1); say_x_en(38, 1); // "Move X"
       say_move_en(2); say_y_en(38, 2); // "Move Y"
       say_move_en(3); say_z_en(38, 3); // "Move Z"
-      #if HAS_HOTEND
-        say_move_en(4); Item_AreaCopy(99, 194, 151, 204, 4, 38); // "Move Extruder"
-      #endif
+      TERN_(HAS_HOTEND, (say_move_en(4), Item_AreaCopy(99, 194, 151, 204, 4, 38))); // "Move Extruder"
     #endif
   }
 
@@ -2519,13 +2527,13 @@ void Item_HomeOffs_X(const uint8_t row) {
   }
   else {
     #ifdef USE_STRING_TITLES
-      Draw_Menu_Line(row, ICON_HomeOffX, GET_TEXT_F(MSG_HOME_OFFSET_X));
+      Draw_Menu_LineF(row, ICON_HomeOffX, GET_TEXT_F(MSG_HOME_OFFSET_X));
     #else
       say_home_offs_en(row); say_x_en(75, row);   // "Home Offset X"
     #endif
   }
   Draw_Menu_Line(row, ICON_HomeOff);
-  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(row), HMI_ValueStruct.Home_OffX_scaled);
+  Draw_Edit_Signed_Float3(row, HMI_ValueStruct.Home_OffX_scaled);
 }
 
 void Item_HomeOffs_Y(const uint8_t row) {
@@ -2534,13 +2542,13 @@ void Item_HomeOffs_Y(const uint8_t row) {
   }
   else {
     #ifdef USE_STRING_TITLES
-      Draw_Menu_Line(row, ICON_HomeOffY, GET_TEXT_F(MSG_HOME_OFFSET_Y));
+      Draw_Menu_LineF(row, ICON_HomeOffY, GET_TEXT_F(MSG_HOME_OFFSET_Y));
     #else
       say_home_offs_en(row); say_y_en(75, row);   // "Home Offset X"
     #endif
   }
   Draw_Menu_Line(row, ICON_HomeOff);
-  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(row), HMI_ValueStruct.Home_OffY_scaled);
+  Draw_Edit_Signed_Float3(row, HMI_ValueStruct.Home_OffY_scaled);
 }
 
 void Item_HomeOffs_Z(const uint8_t row) {
@@ -2549,13 +2557,13 @@ void Item_HomeOffs_Z(const uint8_t row) {
   }
   else {
     #ifdef USE_STRING_TITLES
-      Draw_Menu_Line(row, ICON_HomeOffZ, GET_TEXT_F(MSG_HOME_OFFSET_Z));
+      Draw_Menu_LineF(row, ICON_HomeOffZ, GET_TEXT_F(MSG_HOME_OFFSET_Z));
     #else
       say_home_offs_en(row); say_z_en(75, row);   // "Home Offset Z"
     #endif
   }
   Draw_Menu_Line(row, ICON_HomeOff);
-  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(row), HMI_ValueStruct.Home_OffZ_scaled);
+  Draw_Edit_Signed_Float3(row, HMI_ValueStruct.Home_OffZ_scaled);
 }
 
 void Draw_HomeOff_Menu() {
@@ -2592,16 +2600,16 @@ void Draw_HomeOff_Menu() {
         DWIN_Frame_TitleCopy(124, 431, 91, 12);                             // "Probe Offsets"
       #endif
       #ifdef USE_STRING_TITLES
-        Draw_Menu_Line(1, ICON_ProbeOffX, GET_TEXT_F(MSG_ZPROBE_XOFFSET));  // Probe X Offset
-        Draw_Menu_Line(2, ICON_ProbeOffY, GET_TEXT_F(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
+        Draw_Menu_LineF(1, ICON_ProbeOffX, GET_TEXT_F(MSG_ZPROBE_XOFFSET));  // Probe X Offset
+        Draw_Menu_LineF(2, ICON_ProbeOffY, GET_TEXT_F(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
       #else
         say_probe_offs_en(1); say_x_en(75, 1);  // "Probe Offset X"
         say_probe_offs_en(2); say_y_en(75, 2);  // "Probe Offset Y"
       #endif
     }
 
-    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Probe_OffX_scaled);
-    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Probe_OffY_scaled);
+    Draw_Edit_Signed_Float3(1, HMI_ValueStruct.Probe_OffX_scaled);
+    Draw_Edit_Signed_Float3(2, HMI_ValueStruct.Probe_OffY_scaled);
 
     if (select_item.now) Draw_Menu_Cursor(select_item.now);
   }
@@ -2685,12 +2693,12 @@ void HMI_Prepare() {
         select_axis.reset();
         Draw_Move_Menu();
 
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(1), current_position.x * MINUNITMULT);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(2), current_position.y * MINUNITMULT);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(3), current_position.z * MINUNITMULT);
+        Draw_Edit_Float3(1, current_position.x * MINUNITMULT);
+        Draw_Edit_Float3(2, current_position.y * MINUNITMULT);
+        Draw_Edit_Float3(3, current_position.z * MINUNITMULT);
         #if HAS_HOTEND
           HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
-          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(4), HMI_ValueStruct.Move_E_scaled);
+          Draw_Edit_Signed_Float3(4, HMI_ValueStruct.Move_E_scaled);
         #endif
         break;
       case PREPARE_CASE_DISA: // Disable steppers
@@ -2708,7 +2716,7 @@ void HMI_Prepare() {
             checkkey = Homeoffset;
             HMI_ValueStruct.show_mode = -4;
             HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
-            DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, EBASE(PREPARE_CASE_ZOFF + MROWS - index_prepare), HMI_ValueStruct.offset_value);
+            Draw_Edit_Signed_Float2(PREPARE_CASE_ZOFF + MROWS - index_prepare, HMI_ValueStruct.offset_value, true);
             EncoderRate.enabled = true;
           #else
             // Apply workspace offset, making the current position 0,0,0
@@ -2946,10 +2954,10 @@ void HMI_AxisMove() {
         HMI_flag.ETempTooLow_flag = false;
         HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
         Draw_Move_Menu();
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Move_X_scaled);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Move_Y_scaled);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(3), HMI_ValueStruct.Move_Z_scaled);
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(4), 0);
+        Draw_Edit_Float3(1, HMI_ValueStruct.Move_X_scaled);
+        Draw_Edit_Float3(2, HMI_ValueStruct.Move_Y_scaled);
+        Draw_Edit_Float3(3, HMI_ValueStruct.Move_Z_scaled);
+        Draw_Edit_Signed_Float3(4, 0);
         DWIN_UpdateLCD();
       }
       return;
@@ -2974,19 +2982,19 @@ void HMI_AxisMove() {
       case 1: // X axis move
         checkkey = Move_X;
         HMI_ValueStruct.Move_X_scaled = current_position.x * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Move_X_scaled);
+        Draw_Edit_Float3(1, HMI_ValueStruct.Move_X_scaled, true);
         EncoderRate.enabled = true;
         break;
       case 2: // Y axis move
         checkkey = Move_Y;
         HMI_ValueStruct.Move_Y_scaled = current_position.y * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Move_Y_scaled);
+        Draw_Edit_Float3(2, HMI_ValueStruct.Move_Y_scaled, true);
         EncoderRate.enabled = true;
         break;
       case 3: // Z axis move
         checkkey = Move_Z;
         HMI_ValueStruct.Move_Z_scaled = current_position.z * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 220, EBASE(3), HMI_ValueStruct.Move_Z_scaled);
+        Draw_Edit_Float3(3, HMI_ValueStruct.Move_Z_scaled, true);
         EncoderRate.enabled = true;
         break;
         #if HAS_HOTEND
@@ -3002,7 +3010,7 @@ void HMI_AxisMove() {
             #endif
             checkkey = Extruder;
             HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
-            DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(4), HMI_ValueStruct.Move_E_scaled);
+            Draw_Edit_Signed_Float3(4, HMI_ValueStruct.Move_E_scaled, true);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3083,7 +3091,7 @@ void HMI_Temperature() {
             #ifdef USE_STRING_HEADINGS
               Draw_Title(PREHEAT_1_LABEL " Settings"); // TODO: GET_TEXT_F
             #else
-              DWIN_Frame_TitleCopy(57, 16, 84, 14);                     // "PLA Settings"
+              DWIN_Frame_TitleCopy(56, 15, 85, 14);                       // "Temperature"  TODO: "PLA Settings"
             #endif
             #ifdef USE_STRING_TITLES
               DWIN_Draw_Label(PREHEAT_CASE_TEMP, F("Nozzle Temp"));
@@ -3162,7 +3170,7 @@ void HMI_Temperature() {
             #ifdef USE_STRING_HEADINGS
               Draw_Title("ABS Settings"); // TODO: GET_TEXT_F
             #else
-              DWIN_Frame_TitleCopy(57, 16, 84, 14);                       // "ABS Settings"
+              DWIN_Frame_TitleCopy(56, 15, 85, 14);                       // "Temperature"  TODO: "ABS Settings"
             #endif
             #ifdef USE_STRING_TITLES
               DWIN_Draw_Label(PREHEAT_CASE_TEMP, F("Nozzle Temp"));
@@ -3278,17 +3286,17 @@ void Draw_Max_Accel_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 16, 28, 13);                // "Acceleration"
+    DWIN_Frame_TitleCopy(1, 16, 28, 13);            // "Acceleration"
 
     Item_AreaCopy(173, 133, 200, 147, 1);
     Item_AreaCopy( 28, 149,  69, 161, 1, 30, 1);
-    Item_AreaCopy(229, 133, 236, 147, 1, 74);           // Max acceleration X
+    Item_AreaCopy(229, 133, 236, 147, 1, 74);       // Max acceleration X
     Item_AreaCopy(173, 133, 200, 147, 2);
     Item_AreaCopy( 28, 149,  69, 161, 2, 30, 1);
-    Item_AreaCopy(  1, 150,   7, 160, 2, 74, 2);      // Max acceleration Y
+    Item_AreaCopy(  1, 150,   7, 160, 2, 74, 2);    // Max acceleration Y
     Item_AreaCopy(173, 133, 200, 147, 3);
     Item_AreaCopy( 28, 149,  69, 161, 3, 30, 1);
-    Item_AreaCopy(  9, 150,  16, 160, 3, 74, 2);     // Max acceleration Z
+    Item_AreaCopy(  9, 150,  16, 160, 3, 74, 2);    // Max acceleration Z
     #if HAS_HOTEND
       Item_AreaCopy(173, 133, 200, 147, 4);
       Item_AreaCopy( 28, 149,  69, 161, 4, 30, 1);
@@ -3379,11 +3387,11 @@ void Draw_Max_Accel_Menu() {
 
     Draw_Back_First();
     LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
+    Draw_Edit_Float3(1, planner.max_jerk[X_AXIS] * MINUNITMULT);
+    Draw_Edit_Float3(2, planner.max_jerk[Y_AXIS] * MINUNITMULT);
+    Draw_Edit_Float3(3, planner.max_jerk[Z_AXIS] * MINUNITMULT);
     #if HAS_HOTEND
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
+      Draw_Edit_Float3(4, planner.max_jerk[E_AXIS] * MINUNITMULT);
     #endif
   }
 #endif
@@ -3430,11 +3438,11 @@ void Draw_Steps_Menu() {
 
   Draw_Back_First();
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_StepX + i);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(1), planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(2), planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(3), planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
+  Draw_Edit_Float3(1, planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
+  Draw_Edit_Float3(2, planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
+  Draw_Edit_Float3(3, planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
   #if HAS_HOTEND
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(4), planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
+    Draw_Edit_Float3(4, planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
   #endif
 }
 
@@ -3604,17 +3612,17 @@ void HMI_AdvSet() {
           break;
         case 1: // Home Offset X
           checkkey = HomeOffX;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Home_OffX_scaled);
+          Draw_Edit_Signed_Float3(1, HMI_ValueStruct.Home_OffX_scaled, true);
           EncoderRate.enabled = true;
           break;
         case 2: // Home Offset Y
           checkkey = HomeOffY;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Home_OffY_scaled);
+          Draw_Edit_Signed_Float3(2, HMI_ValueStruct.Home_OffY_scaled, true);
           EncoderRate.enabled = true;
           break;
         case 3: // Home Offset Z
           checkkey = HomeOffZ;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(3), HMI_ValueStruct.Home_OffZ_scaled);
+          Draw_Edit_Signed_Float3(3, HMI_ValueStruct.Home_OffZ_scaled, true);
           EncoderRate.enabled = true;
           break;
         default: break;
@@ -3631,11 +3639,11 @@ void HMI_AdvSet() {
       checkkey = HomeOff;
       EncoderRate.enabled = false;
       set_home_offset(axis, posScaled / 10);
-      DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(select_item.now), posScaled);
+      Draw_Edit_Signed_Float3(select_item.now, posScaled);
       return;
     }
     LIMIT(posScaled, lo, hi);
-    DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(select_item.now), posScaled);
+    Draw_Edit_Signed_Float3(select_item.now, posScaled, true);
   }
 
   void HMI_HomeOffX() { HMI_HomeOffN(X_AXIS, HMI_ValueStruct.Home_OffX_scaled, -500, 500); }
@@ -3666,12 +3674,12 @@ void HMI_AdvSet() {
           break;
         case 1: // Probe Offset X
           checkkey = ProbeOffX;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Probe_OffX_scaled);
+          Draw_Edit_Signed_Float3(1, HMI_ValueStruct.Probe_OffX_scaled, true);
           EncoderRate.enabled = true;
           break;
         case 2: // Probe Offset X
           checkkey = ProbeOffY;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Probe_OffY_scaled);
+          Draw_Edit_Signed_Float3(2, HMI_ValueStruct.Probe_OffY_scaled, true);
           EncoderRate.enabled = true;
           break;
       }
@@ -3687,11 +3695,11 @@ void HMI_AdvSet() {
       checkkey = ProbeOff;
       EncoderRate.enabled = false;
       offset_ref = posScaled / 10;
-      DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(select_item.now), posScaled);
+      Draw_Edit_Signed_Float3(select_item.now, posScaled);
       return;
     }
     LIMIT(posScaled, -500, 500);
-    DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(select_item.now), posScaled);
+    Draw_Edit_Signed_Float3(select_item.now, posScaled, true);
   }
 
   void HMI_ProbeOffX() { HMI_ProbeOffN(HMI_ValueStruct.Probe_OffX_scaled, probe.offset.x); }
@@ -3785,7 +3793,7 @@ void HMI_Tune() {
           #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
             checkkey = Homeoffset;
             HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
-            DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, EBASE(TUNE_CASE_ZOFF + MROWS - index_tune), HMI_ValueStruct.offset_value);
+            Draw_Edit_Signed_Float2(TUNE_CASE_ZOFF + MROWS - index_tune, HMI_ValueStruct.offset_value, true);
             EncoderRate.enabled = true;
           #else
             // Apply workspace offset, making the current position 0,0,0
@@ -3992,7 +4000,7 @@ void HMI_MaxAcceleration() {
         checkkey = MaxJerk_value;
         HMI_flag.jerk_axis = AxisEnum(select_jerk.now - 1);
         HMI_ValueStruct.Max_Jerk_scaled = planner.max_jerk[HMI_flag.jerk_axis] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, EBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
+        Draw_Edit_Float3(select_jerk.now, HMI_ValueStruct.Max_Jerk_scaled, true);
         EncoderRate.enabled = true;
       }
       else { // Back
@@ -4022,7 +4030,7 @@ void HMI_Step() {
       checkkey = Step_value;
       HMI_flag.step_axis = AxisEnum(select_step.now - 1);
       HMI_ValueStruct.Max_Step_scaled = planner.settings.axis_steps_per_mm[HMI_flag.step_axis] * MINUNITMULT;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, EBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
+      Draw_Edit_Float3(select_step.now, HMI_ValueStruct.Max_Step_scaled, true);
       EncoderRate.enabled = true;
     }
     else { // Back
@@ -4274,9 +4282,9 @@ void DWIN_CompletedLeveling() {
 }
 
 void DWIN_StatusChanged(const char *text) {
-  DWIN_Draw_Rectangle(1, Color_Bg_Blue, 0, STATUS_Y, DWIN_WIDTH, STATUS_Y + 20);
+  DWIN_Draw_Rectangle(1, Color_Bg_Blue, 0, STATUS_Y, DWIN_WIDTH, STATUS_Y + 24);
   const int8_t x = _MAX(0U, DWIN_WIDTH - strlen_P(text) * MENU_CHR_W) / 2;
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Blue, x, STATUS_Y + 2, F(text));
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Blue, x, STATUS_Y + 3, F(text));
   DWIN_UpdateLCD();
 }
 

commit 09af42e1af38b441d44ddcc71b9d6906ce68b51d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Aug 17 06:18:19 2021 -0500

    Clean up CrealityUI and MarlinUI (#22586)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
index 05da343f9e..f008a7a2b4 100644
--- a/Marlin/src/lcd/e3v2/creality/dwin.cpp
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -94,9 +94,6 @@
 
 #define PAUSE_HEAT
 
-#define USE_STRING_HEADINGS
-//#define USE_STRING_TITLES
-
 #define MENU_CHAR_LIMIT  24
 #define STATUS_Y        360
 
@@ -121,20 +118,22 @@
 #define DWIN_SCROLL_UPDATE_INTERVAL      SEC_TO_MS(2)
 #define DWIN_REMAIN_TIME_UPDATE_INTERVAL SEC_TO_MS(20)
 
-constexpr uint16_t TROWS = 6, MROWS = TROWS - 1,        // Total rows, and other-than-Back
-                   TITLE_HEIGHT = 30,                   // Title bar height
-                   MLINE = 53,                          // Menu line height
-                   LBLX = 60,                           // Menu item label X
+#define TROWS 6                         // Total rows
+constexpr uint16_t MROWS = TROWS - 1,   // Last Row Index
+                   TITLE_HEIGHT = 30,   // Title bar height
+                   MLINE = 53,          // Menu line height
+                   LBLX = 60,           // Menu item label X
                    MENU_CHR_W = 8, STAT_CHR_W = 10;
 
 #define MBASE(L) (49 + MLINE * (L))
+#define EBASE(L) (MBASE(L) - 2 * DISABLED(USE_STRING_TITLES))
 
 #define BABY_Z_VAR TERN(HAS_BED_PROBE, probe.offset.z, dwin_zoffset)
 
 #define DWIN_BOTTOM (DWIN_HEIGHT-1)
 #define DWIN_RIGHT (DWIN_WIDTH-1)
 
-/* Value Init */
+// Value Init
 HMI_value_t HMI_ValueStruct;
 HMI_Flag_t HMI_flag{0};
 
@@ -228,166 +227,122 @@ void DWIN_Draw_Signed_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t
   }
 }
 
+typedef struct { uint16_t x, y, w, h; } icon_info_t;
+typedef struct { uint16_t x, y[2], w, h; } text_info_t;
+
+void ICON_Button(const bool here, const int iconid, const icon_info_t &ico, const text_info_t (&txt)[2]) {
+  const bool cn = HMI_IsChinese();
+  DWIN_ICON_Show(ICON, iconid + here, ico.x, ico.y);
+  if (here) DWIN_Draw_Rectangle(0, Color_White, ico.x, ico.y, ico.x + ico.w - 1, ico.y + ico.h - 1);
+  DWIN_Frame_AreaCopy(1, txt[cn].x, txt[cn].y[here], txt[cn].x + txt[cn].w - 1, txt[cn].y[here] + txt[cn].h - 1, ico.x + (ico.w - txt[cn].w) / 2, (ico.y + ico.h - 28) - txt[cn].h/2);
+}
+
+//
+// Main Menu: "Print"
+//
 void ICON_Print() {
-  if (select_page.now == 0) {
-    DWIN_ICON_Show(ICON, ICON_Print_1, 17, 130);
-    DWIN_Draw_Rectangle(0, Color_White, 17, 130, 126, 229);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 58, 201);
-    else
-      DWIN_Frame_AreaCopy(1, 1, 451, 31, 463, 57, 201);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Print_0, 17, 130);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 1, 405, 28, 420, 58, 201);
-    else
-      DWIN_Frame_AreaCopy(1, 1, 423, 31, 435, 57, 201);
-  }
+  constexpr icon_info_t ico = { 17, 130, 110, 100 };
+  constexpr text_info_t txt[2] = {
+    { 1, { 417, 449 }, 30, 14 },
+    { 1, { 405, 447 }, 27, 15 }
+  };
+  ICON_Button(select_page.now == 0, ICON_Print_0, ico, txt);
 }
 
+//
+// Main Menu: "Prepare"
+//
 void ICON_Prepare() {
-  if (select_page.now == 1) {
-    DWIN_ICON_Show(ICON, ICON_Prepare_1, 145, 130);
-    DWIN_Draw_Rectangle(0, Color_White, 145, 130, 254, 229);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 31, 447, 58, 460, 186, 201);
-    else
-      DWIN_Frame_AreaCopy(1, 33, 451, 82, 466, 175, 201);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Prepare_0, 145, 130);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 31, 405, 58, 420, 186, 201);
-    else
-      DWIN_Frame_AreaCopy(1, 33, 423, 82, 438, 175, 201);
-  }
+  constexpr icon_info_t ico = { 145, 130, 110, 100 };
+  constexpr text_info_t txt[2] = {
+    { 33, { 417, 449 }, 51, 14 },
+    { 31, { 405, 447 }, 27, 15 }
+  };
+  ICON_Button(select_page.now == 1, ICON_Prepare_0, ico, txt);
 }
 
+//
+// Main Menu: "Control"
+//
 void ICON_Control() {
-  if (select_page.now == 2) {
-    DWIN_ICON_Show(ICON, ICON_Control_1, 17, 246);
-    DWIN_Draw_Rectangle(0, Color_White, 17, 246, 126, 345);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 61, 447, 88, 460, 58, 318);
-    else
-      DWIN_Frame_AreaCopy(1, 85, 451, 132, 463, 48, 318);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Control_0, 17, 246);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 61, 405, 88, 420, 58, 318);
-    else
-      DWIN_Frame_AreaCopy(1, 85, 423, 132, 434, 48, 318);
-  }
+  constexpr icon_info_t ico = { 17, 246, 110, 100 };
+  constexpr text_info_t txt[2] = {
+    { 85, { 417, 449 }, 46, 14 },
+    { 61, { 405, 447 }, 27, 15 }
+  };
+  ICON_Button(select_page.now == 2, ICON_Control_0, ico, txt);
 }
 
-void ICON_StartInfo(bool show) {
-  if (show) {
-    DWIN_ICON_Show(ICON, ICON_Info_1, 145, 246);
-    DWIN_Draw_Rectangle(0, Color_White, 145, 246, 254, 345);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 91, 447, 118, 460, 186, 318);
-    else
-      DWIN_Frame_AreaCopy(1, 132, 451, 159, 466, 186, 318);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Info_0, 145, 246);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 91, 405, 118, 420, 186, 318);
-    else
-      DWIN_Frame_AreaCopy(1, 132, 423, 159, 435, 186, 318);
-  }
+//
+// Main Menu: "Info"
+//
+void ICON_StartInfo() {
+  constexpr icon_info_t ico = { 145, 246, 110, 100 };
+  constexpr text_info_t txt[2] = {
+    { 133, { 417, 449 }, 23, 14 },
+    {  91, { 405, 447 }, 27, 15 }
+  };
+  ICON_Button(select_page.now == 3, ICON_Info_0, ico, txt);
 }
 
-void ICON_Leveling(bool show) {
-  if (show) {
-    DWIN_ICON_Show(ICON, ICON_Leveling_1, 145, 246);
-    DWIN_Draw_Rectangle(0, Color_White, 145, 246, 254, 345);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 211, 447, 238, 460, 186, 318);
-    else
-      DWIN_Frame_AreaCopy(1, 84, 437, 120,  449, 182, 318);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Leveling_0, 145, 246);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 211, 405, 238, 420, 186, 318);
-    else
-      DWIN_Frame_AreaCopy(1, 84, 465, 120, 478, 182, 318);
-  }
+//
+// Main Menu: "Level"
+//
+void ICON_Leveling() {
+  constexpr icon_info_t ico = { 145, 246, 110, 100 };
+  constexpr text_info_t txt[2] = {
+    {  88, { 433, 464 }, 36, 14 },
+    { 211, { 405, 447 }, 27, 15 }
+  };
+  ICON_Button(select_page.now == 3, ICON_Leveling_0, ico, txt);
 }
 
+//
+// Printing: "Tune"
+//
 void ICON_Tune() {
-  if (select_print.now == 0) {
-    DWIN_ICON_Show(ICON, ICON_Setup_1, 8, 252);
-    DWIN_Draw_Rectangle(0, Color_White, 8, 252, 87, 351);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 121, 447, 148, 458, 34, 325);
-    else
-      DWIN_Frame_AreaCopy(1,   0, 466,  34, 476, 31, 325);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Setup_0, 8, 252);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 121, 405, 148, 420, 34, 325);
-    else
-      DWIN_Frame_AreaCopy(1,   0, 438,  32, 448, 31, 325);
-  }
+  constexpr icon_info_t ico = { 8, 252, 80, 100 };
+  constexpr text_info_t txt[2] = {
+    {   0, { 433, 464 }, 32, 14 },
+    { 121, { 405, 447 }, 27, 15 }
+  };
+  ICON_Button(select_print.now == 0, ICON_Setup_0, ico, txt);
 }
 
+//
+// Printing: "Pause"
+//
 void ICON_Pause() {
-  if (select_print.now == 1) {
-    DWIN_ICON_Show(ICON, ICON_Pause_1, 96, 252);
-    DWIN_Draw_Rectangle(0, Color_White, 96, 252, 175, 351);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 181, 447, 208, 459, 124, 325);
-    else
-      DWIN_Frame_AreaCopy(1, 177, 451, 216, 462, 116, 325);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Pause_0, 96, 252);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 181, 405, 208, 420, 124, 325);
-    else
-      DWIN_Frame_AreaCopy(1, 177, 423, 215, 433, 116, 325);
-  }
+  constexpr icon_info_t ico = { 96, 252, 80, 100 };
+  constexpr text_info_t txt[2] = {
+    { 157, { 417, 449 }, 39, 14 },
+    { 181, { 405, 447 }, 27, 15 }
+  };
+  ICON_Button(select_print.now == 1, ICON_Pause_0, ico, txt);
 }
 
-void ICON_Continue() {
-  if (select_print.now == 1) {
-    DWIN_ICON_Show(ICON, ICON_Continue_1, 96, 252);
-    DWIN_Draw_Rectangle(0, Color_White, 96, 252, 175, 351);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 124, 325);
-    else
-      DWIN_Frame_AreaCopy(1, 1, 452, 32, 464, 121, 325);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Continue_0, 96, 252);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 1, 405, 28, 420, 124, 325);
-    else
-      DWIN_Frame_AreaCopy(1, 1, 424, 31, 434, 121, 325);
-  }
+//
+// Printing: "Resume"
+//
+void ICON_Resume() {
+  constexpr icon_info_t ico = { 96, 252, 80, 100 };
+  constexpr text_info_t txt[2] = {
+    { 33, { 433, 464 }, 53, 14 },
+    {  1, { 405, 447 }, 27, 15 }
+  };
+  ICON_Button(select_print.now == 1, ICON_Continue_0, ico, txt);
 }
 
+//
+// Printing: "Stop"
+//
 void ICON_Stop() {
-  if (select_print.now == 2) {
-    DWIN_ICON_Show(ICON, ICON_Stop_1, 184, 252);
-    DWIN_Draw_Rectangle(0, Color_White, 184, 252, 263, 351);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 151, 447, 178, 459, 210, 325);
-    else
-      DWIN_Frame_AreaCopy(1, 218, 452, 249, 466, 209, 325);
-  }
-  else {
-    DWIN_ICON_Show(ICON, ICON_Stop_0, 184, 252);
-    if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1, 151, 405, 178, 420, 210, 325);
-    else
-      DWIN_Frame_AreaCopy(1, 218, 423, 247, 436, 209, 325);
-  }
+  constexpr icon_info_t ico = { 184, 252, 80, 100 };
+  constexpr text_info_t txt[2] = {
+    { 196, { 417, 449 }, 29, 14 },
+    { 151, { 405, 447 }, 27, 12 }
+  };
+  ICON_Button(select_print.now == 2, ICON_Stop_0, ico, txt);
 }
 
 inline void Clear_Title_Bar() {
@@ -425,7 +380,7 @@ void Draw_More_Icon(const uint8_t line) {
 }
 
 void Draw_Menu_Cursor(const uint8_t line) {
-  // DWIN_ICON_Show(ICON,ICON_Rectangle, 0, MBASE(line) - 18);
+  //DWIN_ICON_Show(ICON, ICON_Rectangle, 0, MBASE(line) - 18);
   DWIN_Draw_Rectangle(1, Rectangle_Color, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
 }
 
@@ -474,22 +429,29 @@ void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const
   DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
 }
 
-void Draw_Chkb_Line(const uint8_t line, const bool mode) {
-  DWIN_Draw_Checkbox(Color_White, Color_Bg_Black, 225, MBASE(line) - 1, mode);
+void Draw_Checkbox_Line(const uint8_t line, const bool ison) {
+  const uint16_t x = 225, y = EBASE(line) - 2;
+  DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, x + 5, y, F(ison ? "X" : " "));
+  DWIN_Draw_Rectangle(0, Color_White, x + 2, y + 2, x + 17, y + 17);
 }
 
-// The "Back" label is always on the first line
-void Draw_Back_Label() {
-  if (HMI_IsChinese())
-    DWIN_Frame_AreaCopy(1, 129, 72, 156, 84, LBLX, MBASE(0));
-  else
-    DWIN_Frame_AreaCopy(1, 226, 179, 256, 189, LBLX, MBASE(0));
+// AreaCopy for a Menu Item
+void Item_AreaCopy(const uint16_t x1, const uint16_t y1, const uint16_t x2, const uint16_t y2, const uint8_t row=0, const uint16_t inset=0, const uint16_t yadd=0) {
+  DWIN_Frame_AreaCopy(1, x1, y1, x2, y2, LBLX + inset, MBASE(row) + yadd);
+}
+
+// AreaCopy for a Screen Title
+void DWIN_Frame_TitleCopy(const uint16_t x1, const uint16_t y1, const uint16_t w, const uint16_t h) {
+  DWIN_Frame_AreaCopy(1, x1, y1, x1 + w - 1, y1 + h - 1, (DWIN_WIDTH - w) / 2, (TITLE_HEIGHT - h) / 2);
 }
 
 // Draw "Back" line at the top
 void Draw_Back_First(const bool is_sel=true) {
   Draw_Menu_Line(0, ICON_Back);
-  Draw_Back_Label();
+  if (HMI_IsChinese())
+    Item_AreaCopy(129,  72, 156,  84);
+  else
+    Item_AreaCopy(223, 179, 254, 189);
   if (is_sel) Draw_Menu_Cursor(0);
 }
 
@@ -562,42 +524,81 @@ inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, T &valref)
 // Draw Menus
 //
 
-void DWIN_Draw_Label(const uint16_t y, char *string) {
-  DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, LBLX, y, string);
+void say_move_en(const uint8_t row) {
+  Item_AreaCopy( 69,  61, 102,  71, row);         // "Move"
 }
-void DWIN_Draw_Label(const uint16_t y, const __FlashStringHelper *title) {
-  DWIN_Draw_Label(y, (char*)title);
+void say_max_en(const uint8_t row) {
+  Item_AreaCopy( 75, 119, 100, 129, row);         // "Max"
 }
-
-void draw_move_en(const uint16_t line) {
-  #ifdef USE_STRING_TITLES
-    DWIN_Draw_Label(line, F("Move"));
-  #else
-    DWIN_Frame_AreaCopy(1, 69, 61, 102, 71, LBLX, line); // "Move"
-  #endif
+void say_jerk_en(const uint8_t row) {
+  Item_AreaCopy(104, 119, 128, 129, row, 30);     // "Jerk"
+}
+void say_speed_en(const uint16_t inset, const uint8_t row) {
+  Item_AreaCopy(133, 119, 172, 132, row, inset);  // "Speed"
+}
+void say_max_accel_en(const uint8_t row) {
+   say_max_en(row);                               // "Max"
+   Item_AreaCopy(  0, 135,  79, 145, row, 30);    // "Acceleration"
+}
+void say_max_jerk_speed_en(const uint8_t row) {
+  Item_AreaCopy( 75, 119, 172, 132, row);         // "Max Jerk Speed"
+}
+void say_x_en(const uint16_t inset, const uint8_t row) {
+  Item_AreaCopy(175, 119, 184, 129, row, inset);  // "X"
+}
+void say_y_en(const uint16_t inset, const uint8_t row) {
+  Item_AreaCopy(184, 119, 192, 129, row, inset);  // "Y"
+}
+void say_z_en(const uint16_t inset, const uint8_t row) {
+  Item_AreaCopy(193, 119, 201, 129, row, inset);  // "Z"
+}
+void say_e_en(const uint16_t inset, const uint8_t row) {
+  Item_AreaCopy(201, 119, 209, 129, row, inset);  // "E"
+}
+void say_pla_en(const uint16_t inset, const uint8_t row) {
+  Item_AreaCopy(131, 164, 153, 174, row, inset);  // "PLA"
+}
+void say_abs_en(const uint16_t inset, const uint8_t row) {
+  Item_AreaCopy(157,  76, 181,  86, row, inset);  // "ABS"
+}
+void say_home_offs_en(const uint8_t row) {
+  Item_AreaCopy(153, 193, 225, 203, row);         // "Home Offset"
+}
+void say_probe_offs_en(const uint8_t row) {
+  Item_AreaCopy(153, 205, 225, 215, row);         // "Probe Offset"
+}
+void say_steps_per_mm_en(const uint8_t row) {
+  Item_AreaCopy(  1, 151,  91, 161, row);         // "Steps-per-mm"
 }
 
-inline void DWIN_Frame_TitleCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
-  DWIN_Frame_AreaCopy(id, x1, y1, x2, y2, 14, 8);
+void DWIN_Draw_Label(const uint8_t row, char *string) {
+  DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(row), string);
+}
+void DWIN_Draw_Label(const uint8_t row, const __FlashStringHelper *title) {
+  DWIN_Draw_Label(row, (char*)title);
 }
 
+//
+// Prepare Menu
+//
+
 void Item_Prepare_Move(const uint8_t row) {
   if (HMI_IsChinese())
-    DWIN_Frame_AreaCopy(1, 159, 70, 200, 84, LBLX, MBASE(row));
+    Item_AreaCopy(159, 70, 200, 84, row);
   else
-    draw_move_en(MBASE(row)); // "Move"
+    say_move_en(row);             // "Move"
   Draw_Menu_Line(row, ICON_Axis);
   Draw_More_Icon(row);
 }
 
 void Item_Prepare_Disable(const uint8_t row) {
   if (HMI_IsChinese())
-    DWIN_Frame_AreaCopy(1, 204, 70, 259, 82, LBLX, MBASE(row));
+    Item_AreaCopy(204, 70, 259, 82, row);
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_DISABLE_STEPPERS));
+      DWIN_Draw_Label(row, GET_TEXT_F(MSG_DISABLE_STEPPERS));
     #else
-      DWIN_Frame_AreaCopy(1, 103, 59, 200, 74, LBLX, MBASE(row)); // "Disable Stepper"
+      Item_AreaCopy(104, 61, 191, 74, row); // "Disable Stepper"
     #endif
   }
   Draw_Menu_Line(row, ICON_CloseMotor);
@@ -605,12 +606,12 @@ void Item_Prepare_Disable(const uint8_t row) {
 
 void Item_Prepare_Home(const uint8_t row) {
   if (HMI_IsChinese())
-    DWIN_Frame_AreaCopy(1, 0, 89, 41, 101, LBLX, MBASE(row));
+    Item_AreaCopy(0, 89, 41, 101, row);
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_AUTO_HOME));
+      DWIN_Draw_Label(row, GET_TEXT_F(MSG_AUTO_HOME));
     #else
-      DWIN_Frame_AreaCopy(1, 202, 61, 271, 71, LBLX, MBASE(row)); // "Auto Home"
+      Item_AreaCopy(202, 61, 271, 71, row); // "Auto Home"
     #endif
   }
   Draw_Menu_Line(row, ICON_Homing);
@@ -621,25 +622,25 @@ void Item_Prepare_Home(const uint8_t row) {
   void Item_Prepare_Offset(const uint8_t row) {
     if (HMI_IsChinese()) {
       #if HAS_BED_PROBE
-        DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(row));
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
+        Item_AreaCopy(174, 164, 223, 177, row);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, EBASE(row), probe.offset.z * 100);
       #else
-        DWIN_Frame_AreaCopy(1, 43, 89, 98, 101, LBLX, MBASE(row));
+        Item_AreaCopy(43, 89, 98, 101, row);
       #endif
     }
     else {
       #if HAS_BED_PROBE
         #ifdef USE_STRING_TITLES
-          DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+          DWIN_Draw_Label(row, GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
         #else
-          DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(row));    // "Z-Offset"
+          Item_AreaCopy(94, 179, 143, 190, row);   // "Z-Offset"
         #endif
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, EBASE(row), probe.offset.z * 100);
       #else
         #ifdef USE_STRING_TITLES
-          DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_SET_HOME_OFFSETS));
+          DWIN_Draw_Label(row, GET_TEXT_F(MSG_SET_HOME_OFFSETS));
         #else
-          DWIN_Frame_AreaCopy(1, 1, 76, 106, 86, LBLX, MBASE(row));       // "Set home offsets"
+          Item_AreaCopy(1,  76, 103,  87, row);       // "Set home offsets"
         #endif
       #endif
     }
@@ -650,30 +651,28 @@ void Item_Prepare_Home(const uint8_t row) {
 
 #if HAS_HOTEND
   void Item_Prepare_PLA(const uint8_t row) {
-    if (HMI_IsChinese()) {
-      DWIN_Frame_AreaCopy(1, 100, 89, 151, 101, LBLX, MBASE(row));
-    }
+    if (HMI_IsChinese())
+      Item_AreaCopy(100, 89, 151, 101, row);
     else {
       #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(MBASE(row), F("Preheat " PREHEAT_1_LABEL));
+        DWIN_Draw_Label(row, GET_TEXT_F(MSG_PREHEAT_1));
       #else
-        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
-        DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(row));  // "PLA"
+        Item_AreaCopy(108,  76, 155,  87, row); // "Preheat"
+        say_pla_en(52, row);                                          // "PLA"
       #endif
     }
     Draw_Menu_Line(row, ICON_PLAPreheat);
   }
 
   void Item_Prepare_ABS(const uint8_t row) {
-    if (HMI_IsChinese()) {
-      DWIN_Frame_AreaCopy(1, 180, 89, 233, 100, LBLX, MBASE(row));
-    }
+    if (HMI_IsChinese())
+      Item_AreaCopy(180,  89, 233, 100, row);
     else {
       #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(MBASE(row), F("Preheat " PREHEAT_2_LABEL));
+        DWIN_Draw_Label(row, F("Preheat " PREHEAT_2_LABEL));
       #else
-        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
-        DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(row));  // "ABS"
+        Item_AreaCopy(108,  76, 155,  87, row); // "Preheat"
+        say_abs_en(52, row);                                          // "ABS"
       #endif
     }
     Draw_Menu_Line(row, ICON_ABSPreheat);
@@ -683,12 +682,12 @@ void Item_Prepare_Home(const uint8_t row) {
 #if HAS_PREHEAT
   void Item_Prepare_Cool(const uint8_t row) {
     if (HMI_IsChinese())
-      DWIN_Frame_AreaCopy(1,   1, 104,  56, 117, LBLX, MBASE(row));
+      Item_AreaCopy(1, 104,  56, 117, row);
     else {
       #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_COOLDOWN));
+        DWIN_Draw_Label(row, GET_TEXT_F(MSG_COOLDOWN));
       #else
-        DWIN_Frame_AreaCopy(1, 200,  76, 264,  86, LBLX, MBASE(row));      // "Cooldown"
+        Item_AreaCopy(200, 76, 264, 86, row); // "Cooldown"
       #endif
     }
     Draw_Menu_Line(row, ICON_Cool);
@@ -697,33 +696,34 @@ void Item_Prepare_Home(const uint8_t row) {
 
 void Item_Prepare_Lang(const uint8_t row) {
   if (HMI_IsChinese())
-    DWIN_Frame_AreaCopy(1, 239, 134, 266, 146, LBLX, MBASE(row));
+    Item_AreaCopy(239, 134, 266, 146, row);
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(row), F("UI Language"));
+      DWIN_Draw_Label(row, F("UI Language"));
     #else
-      DWIN_Frame_AreaCopy(1, 0, 194, 121, 207, LBLX, MBASE(row)); // "Language selection"
+      Item_AreaCopy(1, 194, 96, 206, row);    // "LCD Language"
     #endif
   }
-  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, 226, MBASE(row), HMI_IsChinese() ? F("CN") : F("EN"));
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, 226, EBASE(row), HMI_IsChinese() ? F("CN") : F("EN"));
   Draw_Menu_Icon(row, ICON_Language);
 }
 
+#define VISI(T,L,S) (WITHIN(L, T - MROWS, MROWS) || WITHIN(S, 0, MROWS))
+
 void Draw_Prepare_Menu() {
   Clear_Main_Window();
 
   const int16_t scroll = MROWS - index_prepare; // Scrolled-up lines
   #define PSCROL(L) (scroll + (L))
-  #define PVISI(L)  WITHIN(PSCROL(L), 0, MROWS)
+  #define PVISI(L) VISI(PREPARE_CASE_TOTAL, L, PSCROL(L))
 
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 133, 1, 160, 13);   // "Prepare"
-  }
+  if (HMI_IsChinese())
+    DWIN_Frame_TitleCopy(133, 1, 28, 13);   // "Prepare"
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_PREPARE));
     #else
-      DWIN_Frame_TitleCopy(1, 178, 2, 229, 14); // "Prepare"
+      DWIN_Frame_TitleCopy(179, 0, 48, 14); // "Prepare"
     #endif
   }
 
@@ -746,80 +746,125 @@ void Draw_Prepare_Menu() {
   if (select_prepare.now) Draw_Menu_Cursor(PSCROL(select_prepare.now));
 }
 
-void Item_Control_Info(const uint16_t line) {
+//
+// Control Menu
+//
+
+void Item_Control_Temp(const uint16_t row) {
+  if (HMI_IsChinese())
+    Item_AreaCopy(57, 104,  84, 116, row);
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(row, GET_TEXT_F(MSG_TEMPERATURE));
+    #else
+      Item_AreaCopy(1, 89,  83, 101, row);
+    #endif
+  }
+  Draw_Menu_Line(row, ICON_Temperature);
+  Draw_More_Icon(row);
+}
+
+void Item_Control_Motion(const uint16_t row) {
+  if (HMI_IsChinese())
+    Item_AreaCopy(87, 104, 114, 116, row);
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(row, GET_TEXT_F(MSG_MOTION));
+    #else
+      Item_AreaCopy(84, 89, 128,  99, row);
+    #endif
+  }
+  Draw_Menu_Line(row, ICON_Motion);
+  Draw_More_Icon(row);
+}
+
+void Item_Control_Advanced(const uint16_t row) {
+  if (HMI_IsChinese())
+    Item_AreaCopy(62, 180, 120, 192, row);
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(row, GET_TEXT_F(MSG_ADVANCED_SETTINGS));
+    #else
+      Item_AreaCopy(82, 135, 200, 149, row);
+    #endif
+  }
+  Draw_Menu_Line(row, ICON_AdvSet);
+  Draw_More_Icon(row);
+}
+
+void Item_Control_Info(const uint16_t row) {
   if (HMI_IsChinese())
-    DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, line);
+    Item_AreaCopy(231, 104, 258, 116, row);
   else {
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(line, F("Info"));
+      DWIN_Draw_Label(row, GET_TEXT_F(MSG_INFO_SCREEN));
     #else
-      DWIN_Frame_AreaCopy(1, 0, 104, 24, 114, LBLX, line);
+      Item_AreaCopy(0, 104, 24, 114, row);
     #endif
   }
+  Draw_Menu_Line(row, ICON_Info);
+  Draw_More_Icon(row);
 }
 
 void Draw_Control_Menu() {
   Clear_Main_Window();
 
-  #if CONTROL_CASE_TOTAL >= 6
+  #if CONTROL_CASE_TOTAL >= TROWS
     const int16_t scroll = MROWS - index_control; // Scrolled-up lines
-    #define CSCROL(L) (scroll + (L))
   #else
-    #define CSCROL(L) (L)
+    constexpr int16_t scroll = 0;
   #endif
-  #define CLINE(L)  MBASE(CSCROL(L))
-  #define CVISI(L)  WITHIN(CSCROL(L), 0, MROWS)
-
-  if (CVISI(0)) Draw_Back_First(select_control.now == 0);                         // < Back
+  #define CSCROL(L) (scroll + (L))
+  #define CLINE(L) MBASE(CSCROL(L))
+  #define CVISI(L) VISI(CONTROL_CASE_TOTAL, L, CSCROL(L))
 
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 103, 1, 130, 14);                                     // "Control"
+  // "Control" Title
+  if (HMI_IsChinese())
+    DWIN_Frame_TitleCopy(103, 1, 28, 14);
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_CONTROL));
+    #else
+      DWIN_Frame_TitleCopy(128, 2, 49, 11);   // "Control"
+    #endif
+  }
 
-    DWIN_Frame_AreaCopy(1,  57, 104,  84, 116, LBLX, CLINE(CONTROL_CASE_TEMP));   // Temperature >
-    DWIN_Frame_AreaCopy(1,  87, 104, 114, 116, LBLX, CLINE(CONTROL_CASE_MOVE));   // Motion >
+  if (CVISI(0)) Draw_Back_First(select_control.now == 0);                           // < Back
+  if (CVISI(CONTROL_CASE_TEMP)) Item_Control_Temp(CSCROL(CONTROL_CASE_TEMP));       // Temperature >
+  if (CVISI(CONTROL_CASE_MOVE)) Item_Control_Motion(CSCROL(CONTROL_CASE_MOVE));     // Motion >
 
+  if (HMI_IsChinese()) {
     #if ENABLED(EEPROM_SETTINGS)
-      DWIN_Frame_AreaCopy(1, 117, 104, 172, 116, LBLX, CLINE(CONTROL_CASE_SAVE));   // Store Configuration
-      DWIN_Frame_AreaCopy(1, 174, 103, 229, 116, LBLX, CLINE(CONTROL_CASE_LOAD));   // Read Configuration
-      DWIN_Frame_AreaCopy(1,   1, 118,  56, 131, LBLX, CLINE(CONTROL_CASE_RESET));  // Reset Configuration
+      Item_AreaCopy(117, 104, 172, 116, CSCROL(CONTROL_CASE_SAVE));   // "Store Configuration"
+      Item_AreaCopy(174, 103, 229, 116, CSCROL(CONTROL_CASE_LOAD));   // "Read Configuration"
+      Item_AreaCopy(  1, 118,  56, 131, CSCROL(CONTROL_CASE_RESET));  // "Reset Configuration"
     #endif
   }
   else {
-    #ifdef USE_STRING_HEADINGS
-      Draw_Title(GET_TEXT_F(MSG_CONTROL));
-    #else
-      DWIN_Frame_TitleCopy(1, 128, 2, 176, 12);                                         // "Control"
-    #endif
     #ifdef USE_STRING_TITLES
-      if (CVISI(CONTROL_CASE_TEMP)) DWIN_Draw_Label(CLINE(CONTROL_CASE_TEMP), GET_TEXT_F(MSG_TEMPERATURE));
-      if (CVISI(CONTROL_CASE_MOVE)) DWIN_Draw_Label(CLINE(CONTROL_CASE_MOVE), GET_TEXT_F(MSG_MOTION));
       #if ENABLED(EEPROM_SETTINGS)
-        if (CVISI(CONTROL_CASE_SAVE)) DWIN_Draw_Label(CLINE(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
-        if (CVISI(CONTROL_CASE_LOAD)) DWIN_Draw_Label(CLINE(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));
-        if (CVISI(CONTROL_CASE_RESET)) DWIN_Draw_Label(CLINE(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
+        if (CVISI(CONTROL_CASE_SAVE)) DWIN_Draw_Label(CSCROL(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));        // "Store Configuration"
+        if (CVISI(CONTROL_CASE_LOAD)) DWIN_Draw_Label(CSCROL(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));         // "Read Configuration"
+        if (CVISI(CONTROL_CASE_RESET)) DWIN_Draw_Label(CSCROL(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));  // "Reset Configuration"
       #endif
     #else
-      if (CVISI(CONTROL_CASE_TEMP)) DWIN_Frame_AreaCopy(1,  1, 89,  83, 101, LBLX, CLINE(CONTROL_CASE_TEMP));           // Temperature >
-      if (CVISI(CONTROL_CASE_MOVE)) DWIN_Frame_AreaCopy(1, 84, 89, 128,  99, LBLX, CLINE(CONTROL_CASE_MOVE));           // Motion >
       #if ENABLED(EEPROM_SETTINGS)
-        if (CVISI(CONTROL_CASE_SAVE)) DWIN_Frame_AreaCopy(1, 148,  89, 268, 101, LBLX     , CLINE(CONTROL_CASE_SAVE));  // "Store Configuration"
+        if (CVISI(CONTROL_CASE_SAVE))
+          Item_AreaCopy(150,  89, 263, 102, CSCROL(CONTROL_CASE_SAVE));       // "Store Configuration"
         if (CVISI(CONTROL_CASE_LOAD)) {
-          DWIN_Frame_AreaCopy(1,  26, 104,  57, 114, LBLX     , CLINE(CONTROL_CASE_LOAD));  // "Read"
-          DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 34, CLINE(CONTROL_CASE_LOAD));  // "Configuration"
+          Item_AreaCopy( 26, 104,  57, 114, CSCROL(CONTROL_CASE_LOAD));       // "Read"
+          Item_AreaCopy(182,  89, 263, 102, CSCROL(CONTROL_CASE_LOAD), 34);   // "Configuration"
         }
         if (CVISI(CONTROL_CASE_RESET)) {
-          DWIN_Frame_AreaCopy(1,  59, 104,  93, 114, LBLX     , CLINE(CONTROL_CASE_RESET)); // "Reset"
-          DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 37, CLINE(CONTROL_CASE_RESET)); // "Configuration"
+          Item_AreaCopy( 59, 104,  93, 114, CSCROL(CONTROL_CASE_RESET));      // "Reset"
+          Item_AreaCopy(182,  89, 263, 102, CSCROL(CONTROL_CASE_RESET), 37);  // "Configuration"
         }
       #endif
     #endif
   }
 
-  if (CVISI(CONTROL_CASE_ADVSET)) {
-    DWIN_Draw_Label(CLINE(CONTROL_CASE_ADVSET), GET_TEXT_F(MSG_ADVANCED_SETTINGS));  // Advanced Settings
-  }
-
-  if (CVISI(CONTROL_CASE_INFO)) Item_Control_Info(CLINE(CONTROL_CASE_INFO));
+  if (CVISI(CONTROL_CASE_ADVSET)) Item_Control_Advanced(CSCROL(CONTROL_CASE_ADVSET));
+  if (CVISI(CONTROL_CASE_INFO)) Item_Control_Info(CSCROL(CONTROL_CASE_INFO));
 
   if (select_control.now && CVISI(select_control.now))
     Draw_Menu_Cursor(CSCROL(select_control.now));
@@ -834,72 +879,77 @@ void Draw_Control_Menu() {
     } \
   } while(0)
 
-  _TEMP_ICON(CONTROL_CASE_TEMP, ICON_Temperature, true);
-  _TEMP_ICON(CONTROL_CASE_MOVE, ICON_Motion, true);
-
   #if ENABLED(EEPROM_SETTINGS)
     _TEMP_ICON(CONTROL_CASE_SAVE, ICON_WriteEEPROM, false);
     _TEMP_ICON(CONTROL_CASE_LOAD, ICON_ReadEEPROM, false);
     _TEMP_ICON(CONTROL_CASE_RESET, ICON_ResumeEEPROM, false);
   #endif
+}
 
-  _TEMP_ICON(CONTROL_CASE_ADVSET, ICON_AdvSet, true);
-  _TEMP_ICON(CONTROL_CASE_INFO, ICON_Info, true);
+void Draw_Edit_Integer3(const uint8_t line, const uint16_t value, const bool active=false) {
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 3, 220, EBASE(line), value);
 }
 
+void Draw_Edit_Integer4(const uint8_t line, const uint16_t value, const bool active=false) {
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, active ? Select_Color : Color_Bg_Black, 4, 210, EBASE(line), value);
+}
+
+//
+// Tune Menu
+//
+
 void Draw_Tune_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 73, 2, 100, 13);
-    DWIN_Frame_AreaCopy(1, 116, 164, 171, 176, LBLX, MBASE(TUNE_CASE_SPEED));
+    DWIN_Frame_TitleCopy(73, 2, 28, 12);       // "Tune"
+    Item_AreaCopy(116, 164, 171, 176, TUNE_CASE_SPEED);
     #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(TUNE_CASE_TEMP));
+      Item_AreaCopy(1, 134, 56, 146, TUNE_CASE_TEMP);
     #endif
     #if HAS_HEATED_BED
-      DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX, MBASE(TUNE_CASE_BED));
+      Item_AreaCopy(58, 134, 113, 146, TUNE_CASE_BED);
     #endif
     #if HAS_FAN
-      DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX, MBASE(TUNE_CASE_FAN));
+      Item_AreaCopy(115, 134, 170, 146, TUNE_CASE_FAN);
     #endif
     #if HAS_ZOFFSET_ITEM
-      DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(TUNE_CASE_ZOFF));
+      Item_AreaCopy(174, 164, 223, 177, TUNE_CASE_ZOFF);
     #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_TUNE));
     #else
-      DWIN_Frame_AreaCopy(1, 94, 2, 126, 12, 14, 9);
+      DWIN_Frame_TitleCopy(94, 2, 33, 11);    // "Tune"
     #endif
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(TUNE_CASE_SPEED), GET_TEXT_F(MSG_SPEED));
+      DWIN_Draw_Label(TUNE_CASE_SPEED, GET_TEXT_F(MSG_SPEED));
       #if HAS_HOTEND
-        DWIN_Draw_Label(MBASE(TUNE_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+        DWIN_Draw_Label(TUNE_CASE_TEMP, GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
       #endif
       #if HAS_HEATED_BED
-        DWIN_Draw_Label(MBASE(TUNE_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+        DWIN_Draw_Label(TUNE_CASE_BED, GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
       #endif
       #if HAS_FAN
-        DWIN_Draw_Label(MBASE(TUNE_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+        DWIN_Draw_Label(TUNE_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
       #endif
-      DWIN_Draw_Label(MBASE(TUNE_CASE_ZOFF), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+      DWIN_Draw_Label(TUNE_CASE_ZOFF, GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
     #else
-      DWIN_Frame_TitleCopy(1, 94, 2, 126, 12);
-      DWIN_Frame_AreaCopy(1, 1, 179, 92, 190, LBLX, MBASE(TUNE_CASE_SPEED));      // Print speed
+      Item_AreaCopy(1, 179, 92, 190, TUNE_CASE_SPEED);          // "Print speed"
       #if HAS_HOTEND
-        DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(TUNE_CASE_TEMP));  // Hotend...
-        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(TUNE_CASE_TEMP)); // ...Temperature
+        Item_AreaCopy(197, 104, 238, 114, TUNE_CASE_TEMP);      // "Hotend"
+        Item_AreaCopy(  1,  89,  83, 101, TUNE_CASE_TEMP, 44);  // "Temperature"
       #endif
       #if HAS_HEATED_BED
-        DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX, MBASE(TUNE_CASE_BED));   // Bed...
-        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 27, MBASE(TUNE_CASE_BED));  // ...Temperature
+        Item_AreaCopy(240, 104, 264, 114, TUNE_CASE_BED);       // "Bed"
+        Item_AreaCopy(  1,  89,  83, 101, TUNE_CASE_BED, 27);   // "Temperature"
       #endif
       #if HAS_FAN
-        DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX, MBASE(TUNE_CASE_FAN));      // Fan speed
+        Item_AreaCopy(0, 119, 64, 132, TUNE_CASE_FAN);          // "Fan speed"
       #endif
       #if HAS_ZOFFSET_ITEM
-        DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(TUNE_CASE_ZOFF));   // Z-offset
+        Item_AreaCopy(93, 179, 141, 189, TUNE_CASE_ZOFF);       // "Z-offset"
       #endif
     #endif
   }
@@ -908,90 +958,64 @@ void Draw_Tune_Menu() {
   if (select_tune.now) Draw_Menu_Cursor(select_tune.now);
 
   Draw_Menu_Line(TUNE_CASE_SPEED, ICON_Speed);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_SPEED), feedrate_percentage);
+  Draw_Edit_Integer3(TUNE_CASE_SPEED, feedrate_percentage);
 
   #if HAS_HOTEND
     Draw_Menu_Line(TUNE_CASE_TEMP, ICON_HotendTemp);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP), thermalManager.degTargetHotend(0));
+    Draw_Edit_Integer3(TUNE_CASE_TEMP, thermalManager.degTargetHotend(0));
   #endif
   #if HAS_HEATED_BED
     Draw_Menu_Line(TUNE_CASE_BED, ICON_BedTemp);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED), thermalManager.degTargetBed());
+    Draw_Edit_Integer3(TUNE_CASE_BED, thermalManager.degTargetBed());
   #endif
   #if HAS_FAN
     Draw_Menu_Line(TUNE_CASE_FAN, ICON_FanSpeed);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_FAN), thermalManager.fan_speed[0]);
+    Draw_Edit_Integer3(TUNE_CASE_FAN, thermalManager.fan_speed[0]);
   #endif
   #if HAS_ZOFFSET_ITEM
     Draw_Menu_Line(TUNE_CASE_ZOFF, ICON_Zoffset);
-    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(TUNE_CASE_ZOFF), BABY_Z_VAR * 100);
+    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, EBASE(TUNE_CASE_ZOFF), BABY_Z_VAR * 100);
   #endif
 }
 
-void draw_max_en(const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 245, 119, 269, 129, LBLX, line);   // "Max"
-}
-void draw_max_accel_en(const uint16_t line) {
-  draw_max_en(line);
-  DWIN_Frame_AreaCopy(1, 1, 135, 79, 145, LBLX + 27, line); // "Acceleration"
-}
-void draw_speed_en(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 184, 119, 224, 132, LBLX + inset, line); // "Speed"
-}
-void draw_jerk_en(const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 64, 119, 106, 129, LBLX + 27, line); // "Jerk"
-}
-void draw_steps_per_mm(const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 1, 151, 101, 161, LBLX, line);   // "Steps-per-mm"
-}
-void say_x(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 95, 104, 102, 114, LBLX + inset, line); // "X"
-}
-void say_y(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 104, 104, 110, 114, LBLX + inset, line); // "Y"
-}
-void say_z(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 112, 104, 120, 114, LBLX + inset, line); // "Z"
-}
-void say_e(const uint16_t inset, const uint16_t line) {
-  DWIN_Frame_AreaCopy(1, 237, 119, 244, 129, LBLX + inset, line); // "E"
-}
-
+//
+// Motion Menu
+//
 void Draw_Motion_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28);                                     // "Motion"
-    DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, MBASE(MOTION_CASE_RATE));  // Max speed
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(MOTION_CASE_ACCEL));        // Max...
-    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(MOTION_CASE_ACCEL) + 1); // ...Acceleration
+    DWIN_Frame_TitleCopy(1, 16, 28, 13);                        // "Motion"
+    Item_AreaCopy(173, 133, 228, 147, MOTION_CASE_RATE);        // Max speed
+    Item_AreaCopy(173, 133, 200, 147, MOTION_CASE_ACCEL);       // Max...
+    Item_AreaCopy(28, 149, 69, 161, MOTION_CASE_ACCEL, 30, 1);  // ...Acceleration
     #if HAS_CLASSIC_JERK
-      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(MOTION_CASE_JERK));        // Max...
-      DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(MOTION_CASE_JERK) + 1);  // ...
-      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 54, MBASE(MOTION_CASE_JERK));   // ...Jerk
+      Item_AreaCopy(173, 133, 200, 147, MOTION_CASE_JERK);      // Max...
+      Item_AreaCopy(1, 180, 28, 192, MOTION_CASE_JERK, 30, 1);  // ...
+      Item_AreaCopy(202, 133, 228, 147, MOTION_CASE_JERK, 57);  // ...Jerk
     #endif
-    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(MOTION_CASE_STEPS));         // Flow ratio
+    Item_AreaCopy(153, 148, 194, 161, MOTION_CASE_STEPS);       // Flow ratio
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_MOTION));
     #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);                                        // "Motion"
+      DWIN_Frame_TitleCopy(144, 16, 46, 11);                            // "Motion"
     #endif
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(MOTION_CASE_RATE), F("Feedrate"));
-      DWIN_Draw_Label(MBASE(MOTION_CASE_ACCEL), GET_TEXT_F(MSG_ACCELERATION));
+      DWIN_Draw_Label(MOTION_CASE_RATE, F("Feedrate"));                 // "Feedrate"
+      DWIN_Draw_Label(MOTION_CASE_ACCEL, GET_TEXT_F(MSG_ACCELERATION)); // "Acceleration"
       #if HAS_CLASSIC_JERK
-        DWIN_Draw_Label(MBASE(MOTION_CASE_JERK), GET_TEXT_F(MSG_JERK));
+        DWIN_Draw_Label(MOTION_CASE_JERK, GET_TEXT_F(MSG_JERK));        // "Jerk"
       #endif
-      DWIN_Draw_Label(MBASE(MOTION_CASE_STEPS), GET_TEXT_F(MSG_STEPS_PER_MM));
+      DWIN_Draw_Label(MOTION_CASE_STEPS, GET_TEXT_F(MSG_STEPS_PER_MM)); // "Steps/mm"
     #else
-      draw_max_en(MBASE(MOTION_CASE_RATE)); draw_speed_en(27, MBASE(MOTION_CASE_RATE)); // "Max Speed"
-      draw_max_accel_en(MBASE(MOTION_CASE_ACCEL));                                      // "Max Acceleration"
+      say_max_en(MOTION_CASE_RATE); say_speed_en(30, MOTION_CASE_RATE); // "Max Speed"
+      say_max_accel_en(MOTION_CASE_ACCEL);                              // "Max Acceleration"
       #if HAS_CLASSIC_JERK
-        draw_max_en(MBASE(MOTION_CASE_JERK)); draw_jerk_en(MBASE(MOTION_CASE_JERK));    // "Max Jerk"
+        say_max_en(MOTION_CASE_JERK); say_jerk_en(MOTION_CASE_JERK);    // "Max Jerk"
       #endif
-      draw_steps_per_mm(MBASE(MOTION_CASE_STEPS));                                      // "Steps-per-mm"
+      say_steps_per_mm_en(MOTION_CASE_STEPS);                           // "Steps-per-mm"
     #endif
   }
 
@@ -1020,9 +1044,9 @@ void Draw_Motion_Menu() {
     if (toohigh) {
       DWIN_ICON_Show(ICON, ICON_TempTooHigh, 102, 165);
       if (HMI_IsChinese()) {
-        DWIN_Frame_AreaCopy(1, 103, 371, 237, 386, 52, 285);
+        DWIN_Frame_AreaCopy(1, 103, 371, 237, 386,  52, 285); // Temp Too High
         DWIN_Frame_AreaCopy(1, 151, 389, 185, 402, 187, 285);
-        DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
+        DWIN_Frame_AreaCopy(1, 189, 389, 271, 402,  95, 310);
       }
       else {
         DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
@@ -1032,7 +1056,7 @@ void Draw_Motion_Menu() {
     else {
       DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 165);
       if (HMI_IsChinese()) {
-        DWIN_Frame_AreaCopy(1, 103, 371, 270, 386, 52, 285);
+        DWIN_Frame_AreaCopy(1, 103, 371, 270, 386, 52, 285); // Tenp Too Low
         DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
       }
       else {
@@ -1055,7 +1079,7 @@ void Draw_Popup_Bkgd_60() {
     Draw_Popup_Bkgd_60();
     DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 105);
     if (HMI_IsChinese()) {
-      DWIN_Frame_AreaCopy(1, 103, 371, 136, 386, 69, 240);
+      DWIN_Frame_AreaCopy(1, 103, 371, 136, 386, 69, 240);      // Nozzle Too Cold
       DWIN_Frame_AreaCopy(1, 170, 371, 270, 386, 69 + 33, 240);
       DWIN_ICON_Show(ICON, ICON_Confirm_C, 86, 280);
     }
@@ -1071,7 +1095,7 @@ void Popup_Window_Resume() {
   Clear_Popup_Area();
   Draw_Popup_Bkgd_105();
   if (HMI_IsChinese()) {
-    DWIN_Frame_AreaCopy(1, 160, 338, 235, 354, 98, 135);
+    DWIN_Frame_AreaCopy(1, 160, 338, 235, 354, 98, 135);    // Resume Interrupted Print
     DWIN_Frame_AreaCopy(1, 103, 321, 271, 335, 52, 192);
     DWIN_ICON_Show(ICON, ICON_Cancel_C,    26, 307);
     DWIN_ICON_Show(ICON, ICON_Continue_C, 146, 307);
@@ -1090,7 +1114,7 @@ void Popup_Window_Home(const bool parking/*=false*/) {
   Draw_Popup_Bkgd_60();
   DWIN_ICON_Show(ICON, ICON_BLTouch, 101, 105);
   if (HMI_IsChinese()) {
-    DWIN_Frame_AreaCopy(1, 0, 371, 33, 386, 85, 240);
+    DWIN_Frame_AreaCopy(1, 0, 371, 33, 386, 85, 240);       // Wait for Move to Complete
     DWIN_Frame_AreaCopy(1, 203, 286, 271, 302, 118, 240);
     DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
   }
@@ -1107,7 +1131,7 @@ void Popup_Window_Home(const bool parking/*=false*/) {
     Draw_Popup_Bkgd_60();
     DWIN_ICON_Show(ICON, ICON_AutoLeveling, 101, 105);
     if (HMI_IsChinese()) {
-      DWIN_Frame_AreaCopy(1, 0, 371, 100, 386, 84, 240);
+      DWIN_Frame_AreaCopy(1, 0, 371, 100, 386, 84, 240);    // Wait for Leveling
       DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
     }
     else {
@@ -1132,8 +1156,8 @@ void Popup_window_PauseOrStop() {
   Clear_Main_Window();
   Draw_Popup_Bkgd_60();
   if (HMI_IsChinese()) {
-         if (select_print.now == 1) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);
-    else if (select_print.now == 2) DWIN_Frame_AreaCopy(1, 221, 320, 253, 336, 98, 150);
+         if (select_print.now == 1) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);    // Pause Print
+    else if (select_print.now == 2) DWIN_Frame_AreaCopy(1, 221, 320, 253, 336, 98, 150);    // Stop Print
     DWIN_Frame_AreaCopy(1, 220, 304, 264, 319, 130, 150);
     DWIN_ICON_Show(ICON, ICON_Confirm_C, 26, 280);
     DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 280);
@@ -1149,14 +1173,14 @@ void Popup_window_PauseOrStop() {
 
 void Draw_Printing_Screen() {
   if (HMI_IsChinese()) {
-    DWIN_Frame_AreaCopy(1, 30,  1,  71, 14,  14,   9);  // Tune
-    DWIN_Frame_AreaCopy(1,  0, 72,  63, 86,  41, 188);  // Pause
-    DWIN_Frame_AreaCopy(1, 65, 72, 128, 86, 176, 188);  // Stop
+    DWIN_Frame_TitleCopy(30, 1, 42, 14);                // "Printing"
+    DWIN_Frame_AreaCopy(1,  0, 72,  63, 86,  41, 188);  // "Printing Time"
+    DWIN_Frame_AreaCopy(1, 65, 72, 128, 86, 176, 188);  // "Remain"
   }
   else {
-    DWIN_Frame_AreaCopy(1, 40,  2,  92, 14,  14,   9);  // Tune
-    DWIN_Frame_AreaCopy(1,  0, 44,  96, 58,  41, 188);  // Pause
-    DWIN_Frame_AreaCopy(1, 98, 44, 152, 58, 176, 188);  // Stop
+    DWIN_Frame_TitleCopy(42, 0, 47, 14);                // "Printing"
+    DWIN_Frame_AreaCopy(1,   1, 43,  97, 59,  41, 188); // "Printing Time"
+    DWIN_Frame_AreaCopy(1, 100, 43, 152, 56, 176, 188); // "Remain"
   }
 }
 
@@ -1180,6 +1204,13 @@ void Draw_Print_ProgressRemain() {
   DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 200, 212, (_remain_time % 3600) / 60);
 }
 
+void ICON_ResumeOrPause() {
+  if (printingIsPaused() || HMI_flag.pause_flag || HMI_flag.pause_action)
+    ICON_Resume();
+  else
+    ICON_Pause();
+}
+
 void Goto_PrintProcess() {
   checkkey = PrintProcess;
 
@@ -1187,7 +1218,7 @@ void Goto_PrintProcess() {
   Draw_Printing_Screen();
 
   ICON_Tune();
-  if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+  ICON_ResumeOrPause();
   ICON_Stop();
 
   // Copy into filebuf string before entry
@@ -1209,12 +1240,12 @@ void Goto_MainMenu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese())
-    DWIN_Frame_TitleCopy(1, 2, 2, 27, 14); // "Home"
+    DWIN_Frame_TitleCopy(2, 2, 26, 13);   // "Home" etc
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_MAIN));
     #else
-      DWIN_Frame_TitleCopy(1, 0, 2, 39, 12);
+      DWIN_Frame_TitleCopy(0, 2, 40, 11); // "Home"
     #endif
   }
 
@@ -1223,7 +1254,7 @@ void Goto_MainMenu() {
   ICON_Print();
   ICON_Prepare();
   ICON_Control();
-  TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(select_page.now == 3);
+  TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)();
 }
 
 inline ENCODER_DiffState get_encoder_state() {
@@ -1253,11 +1284,13 @@ void HMI_Move_Done(const AxisEnum axis) {
 void HMI_Move_X() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scaled))
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scaled)) {
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Move_X_scaled);
       return HMI_Move_Done(X_AXIS);
+    }
     LIMIT(HMI_ValueStruct.Move_X_scaled, (X_MIN_POS) * MINUNITMULT, (X_MAX_POS) * MINUNITMULT);
     current_position.x = HMI_ValueStruct.Move_X_scaled / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Move_X_scaled);
     DWIN_UpdateLCD();
     HMI_Plan_Move(homing_feedrate(X_AXIS));
   }
@@ -1266,11 +1299,13 @@ void HMI_Move_X() {
 void HMI_Move_Y() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scaled))
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scaled)) {
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Move_Y_scaled);
       return HMI_Move_Done(Y_AXIS);
+    }
     LIMIT(HMI_ValueStruct.Move_Y_scaled, (Y_MIN_POS) * MINUNITMULT, (Y_MAX_POS) * MINUNITMULT);
     current_position.y = HMI_ValueStruct.Move_Y_scaled / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Move_Y_scaled);
     DWIN_UpdateLCD();
     HMI_Plan_Move(homing_feedrate(Y_AXIS));
   }
@@ -1279,11 +1314,13 @@ void HMI_Move_Y() {
 void HMI_Move_Z() {
   ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
   if (encoder_diffState != ENCODER_DIFF_NO) {
-    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scaled))
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scaled)) {
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(3), HMI_ValueStruct.Move_Z_scaled);
       return HMI_Move_Done(Z_AXIS);
+    }
     LIMIT(HMI_ValueStruct.Move_Z_scaled, (Z_MIN_POS) * MINUNITMULT, (Z_MAX_POS) * MINUNITMULT);
     current_position.z = HMI_ValueStruct.Move_Z_scaled / MINUNITMULT;
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 220, EBASE(3), HMI_ValueStruct.Move_Z_scaled);
     DWIN_UpdateLCD();
     HMI_Plan_Move(homing_feedrate(Z_AXIS));
   }
@@ -1297,11 +1334,12 @@ void HMI_Move_Z() {
     if (encoder_diffState != ENCODER_DIFF_NO) {
       if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_E_scaled)) {
         last_E_scaled = HMI_ValueStruct.Move_E_scaled;
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(4), last_E_scaled);
         return HMI_Move_Done(E_AXIS);
       }
       LIMIT(HMI_ValueStruct.Move_E_scaled, last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT, last_E_scaled + (EXTRUDE_MAXLENGTH) * MINUNITMULT);
       current_position.e = HMI_ValueStruct.Move_E_scaled / MINUNITMULT;
-      DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(4), HMI_ValueStruct.Move_E_scaled);
       DWIN_UpdateLCD();
       HMI_Plan_Move(MMM_TO_MMS(FEEDRATE_E));
     }
@@ -1328,7 +1366,7 @@ void HMI_Move_Z() {
           TERN_(EEPROM_SETTINGS, settings.save());
         #endif
         checkkey = HMI_ValueStruct.show_mode == -4 ? Prepare : Tune;
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, EBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
         DWIN_UpdateLCD();
         return;
       }
@@ -1338,7 +1376,7 @@ void HMI_Move_Z() {
       #if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
         if (BABYSTEP_ALLOWED()) babystep.add_mm(Z_AXIS, dwin_zoffset - last_zoffset);
       #endif
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(zoff_line), HMI_ValueStruct.offset_value);
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, EBASE(zoff_line), HMI_ValueStruct.offset_value);
       DWIN_UpdateLCD();
     }
   }
@@ -1362,27 +1400,27 @@ void HMI_Move_Z() {
         if (HMI_ValueStruct.show_mode == -2) {
           checkkey = PLAPreheat;
           ui.material_preset[0].hotend_temp = HMI_ValueStruct.E_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), ui.material_preset[0].hotend_temp);
+          Draw_Edit_Integer3(temp_line, ui.material_preset[0].hotend_temp);
           return;
         }
         else if (HMI_ValueStruct.show_mode == -3) {
           checkkey = ABSPreheat;
           ui.material_preset[1].hotend_temp = HMI_ValueStruct.E_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), ui.material_preset[1].hotend_temp);
+          Draw_Edit_Integer3(temp_line, ui.material_preset[1].hotend_temp);
           return;
         }
         else if (HMI_ValueStruct.show_mode == -1) // Temperature
           checkkey = TemperatureID;
         else
           checkkey = Tune;
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
+        Draw_Edit_Integer3(temp_line, HMI_ValueStruct.E_Temp);
         thermalManager.setTargetHotend(HMI_ValueStruct.E_Temp, 0);
         return;
       }
       // E_Temp limit
       LIMIT(HMI_ValueStruct.E_Temp, HEATER_0_MINTEMP, thermalManager.hotend_max_target(0));
       // E_Temp value
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
+      Draw_Edit_Integer3(temp_line, HMI_ValueStruct.E_Temp, true);
     }
   }
 
@@ -1405,27 +1443,27 @@ void HMI_Move_Z() {
         if (HMI_ValueStruct.show_mode == -2) {
           checkkey = PLAPreheat;
           ui.material_preset[0].bed_temp = HMI_ValueStruct.Bed_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), ui.material_preset[0].bed_temp);
+          Draw_Edit_Integer3(bed_line, ui.material_preset[0].bed_temp);
           return;
         }
         else if (HMI_ValueStruct.show_mode == -3) {
           checkkey = ABSPreheat;
           ui.material_preset[1].bed_temp = HMI_ValueStruct.Bed_Temp;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), ui.material_preset[1].bed_temp);
+          Draw_Edit_Integer3(bed_line, ui.material_preset[1].bed_temp);
           return;
         }
         else if (HMI_ValueStruct.show_mode == -1)
           checkkey = TemperatureID;
         else
           checkkey = Tune;
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
+        Draw_Edit_Integer3(bed_line, HMI_ValueStruct.Bed_Temp);
         thermalManager.setTargetBed(HMI_ValueStruct.Bed_Temp);
         return;
       }
       // Bed_Temp limit
       LIMIT(HMI_ValueStruct.Bed_Temp, BED_MINTEMP, BED_MAX_TARGET);
       // Bed_Temp value
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
+      Draw_Edit_Integer3(bed_line, HMI_ValueStruct.Bed_Temp, true);
     }
   }
 
@@ -1449,27 +1487,27 @@ void HMI_Move_Z() {
         if (HMI_ValueStruct.show_mode == -2) {
           checkkey = PLAPreheat;
           ui.material_preset[0].fan_speed = HMI_ValueStruct.Fan_speed;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), ui.material_preset[0].fan_speed);
+          Draw_Edit_Integer3(fan_line, ui.material_preset[0].fan_speed);
           return;
         }
         else if (HMI_ValueStruct.show_mode == -3) {
           checkkey = ABSPreheat;
           ui.material_preset[1].fan_speed = HMI_ValueStruct.Fan_speed;
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), ui.material_preset[1].fan_speed);
+          Draw_Edit_Integer3(fan_line, ui.material_preset[1].fan_speed);
           return;
         }
         else if (HMI_ValueStruct.show_mode == -1)
           checkkey = TemperatureID;
         else
           checkkey = Tune;
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
+        Draw_Edit_Integer3(fan_line, HMI_ValueStruct.Fan_speed);
         thermalManager.set_fan_speed(0, HMI_ValueStruct.Fan_speed);
         return;
       }
       // Fan_speed limit
       LIMIT(HMI_ValueStruct.Fan_speed, 0, 255);
       // Fan_speed value
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
+      Draw_Edit_Integer3(fan_line, HMI_ValueStruct.Fan_speed, true);
     }
   }
 
@@ -1482,13 +1520,13 @@ void HMI_PrintSpeed() {
       checkkey = Tune;
       EncoderRate.enabled = false;
       feedrate_percentage = HMI_ValueStruct.print_speed;
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
+      Draw_Edit_Integer3(select_tune.now + MROWS - index_tune, HMI_ValueStruct.print_speed);
       return;
     }
     // print_speed limit
     LIMIT(HMI_ValueStruct.print_speed, MIN_PRINT_SPEED, MAX_PRINT_SPEED);
     // print_speed value
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
+    Draw_Edit_Integer3(select_tune.now + MROWS - index_tune, HMI_ValueStruct.print_speed, true);
   }
 }
 
@@ -1502,7 +1540,7 @@ void HMI_MaxFeedspeedXYZE() {
       EncoderRate.enabled = false;
       if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
         planner.set_max_feedrate(HMI_flag.feedspeed_axis, HMI_ValueStruct.Max_Feedspeed);
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+      Draw_Edit_Integer4(select_speed.now, HMI_ValueStruct.Max_Feedspeed);
       return;
     }
     // MaxFeedspeed limit
@@ -1510,7 +1548,7 @@ void HMI_MaxFeedspeedXYZE() {
       NOMORE(HMI_ValueStruct.Max_Feedspeed, default_max_feedrate[HMI_flag.feedspeed_axis] * 2);
     if (HMI_ValueStruct.Max_Feedspeed < MIN_MAXFEEDSPEED) HMI_ValueStruct.Max_Feedspeed = MIN_MAXFEEDSPEED;
     // MaxFeedspeed value
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+    Draw_Edit_Integer4(select_speed.now, HMI_ValueStruct.Max_Feedspeed, true);
   }
 }
 
@@ -1522,7 +1560,7 @@ void HMI_MaxAccelerationXYZE() {
       EncoderRate.enabled = false;
       if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
         planner.set_max_acceleration(HMI_flag.acc_axis, HMI_ValueStruct.Max_Acceleration);
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+      Draw_Edit_Integer4(select_acc.now, HMI_ValueStruct.Max_Acceleration);
       return;
     }
     // MaxAcceleration limit
@@ -1530,7 +1568,7 @@ void HMI_MaxAccelerationXYZE() {
       NOMORE(HMI_ValueStruct.Max_Acceleration, default_max_acceleration[HMI_flag.acc_axis] * 2);
     if (HMI_ValueStruct.Max_Acceleration < MIN_MAXACCELERATION) HMI_ValueStruct.Max_Acceleration = MIN_MAXACCELERATION;
     // MaxAcceleration value
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+    Draw_Edit_Integer4(select_acc.now, HMI_ValueStruct.Max_Acceleration, true);
   }
 }
 
@@ -1544,7 +1582,7 @@ void HMI_MaxAccelerationXYZE() {
         EncoderRate.enabled = false;
         if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
           planner.set_max_jerk(HMI_flag.jerk_axis, HMI_ValueStruct.Max_Jerk_scaled / 10);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
         return;
       }
       // MaxJerk limit
@@ -1552,7 +1590,7 @@ void HMI_MaxAccelerationXYZE() {
         NOMORE(HMI_ValueStruct.Max_Jerk_scaled, default_max_jerk[HMI_flag.jerk_axis] * 2 * MINUNITMULT);
       NOLESS(HMI_ValueStruct.Max_Jerk_scaled, (MIN_MAXJERK) * MINUNITMULT);
       // MaxJerk value
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, EBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
     }
   }
 
@@ -1566,7 +1604,7 @@ void HMI_StepXYZE() {
       EncoderRate.enabled = false;
       if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
         planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step_scaled / 10;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
       return;
     }
     // Step limit
@@ -1574,7 +1612,7 @@ void HMI_StepXYZE() {
       NOMORE(HMI_ValueStruct.Max_Step_scaled, 999.9 * MINUNITMULT);
     NOLESS(HMI_ValueStruct.Max_Step_scaled, MIN_STEP);
     // Step value
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, EBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
   }
 }
 
@@ -1642,30 +1680,27 @@ void update_variable() {
     // Tune page temperature update
     #if HAS_HOTEND
       if (_new_hotend_target)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), _hotendtarget);
+        Draw_Edit_Integer3(TUNE_CASE_TEMP + MROWS - index_tune, _hotendtarget);
     #endif
     #if HAS_HEATED_BED
       if (_new_bed_target)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), _bedtarget);
+        Draw_Edit_Integer3(TUNE_CASE_BED + MROWS - index_tune, _bedtarget);
     #endif
     #if HAS_FAN
       if (_new_fanspeed)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), _fanspeed);
+        Draw_Edit_Integer3(TUNE_CASE_FAN + MROWS - index_tune, _fanspeed);
     #endif
   }
   else if (checkkey == TemperatureID) {
     // Temperature page temperature update
     #if HAS_HOTEND
-      if (_new_hotend_target)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_TEMP), _hotendtarget);
+      if (_new_hotend_target) Draw_Edit_Integer3(TEMP_CASE_TEMP, _hotendtarget);
     #endif
     #if HAS_HEATED_BED
-      if (_new_bed_target)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_BED), _bedtarget);
+      if (_new_bed_target) Draw_Edit_Integer3(TEMP_CASE_BED, _bedtarget);
     #endif
     #if HAS_FAN
-      if (_new_fanspeed)
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_FAN), _fanspeed);
+      if (_new_fanspeed) Draw_Edit_Integer3(TEMP_CASE_FAN, _fanspeed);
     #endif
   }
 
@@ -1976,22 +2011,22 @@ void Draw_Info_Menu() {
   DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, F(SHORT_BUILD_VERSION));
 
   if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 30, 17, 57, 29); // "Info"
+    DWIN_Frame_TitleCopy(30, 17, 28, 13);                   // "Info"
 
-    DWIN_Frame_AreaCopy(1, 197, 149, 252, 161, 108, 102);
-    DWIN_Frame_AreaCopy(1, 1, 164, 56, 176, 108, 175);
-    DWIN_Frame_AreaCopy(1, 58, 164, 113, 176, 105, 248);
+    DWIN_Frame_AreaCopy(1, 197, 149, 252, 161, 108, 102);   // "Size"
+    DWIN_Frame_AreaCopy(1, 1, 164, 56, 176, 108, 175);      // "Firmware Version"
+    DWIN_Frame_AreaCopy(1, 58, 164, 113, 176, 105, 248);    // "Contact Details"
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_INFO_SCREEN));
     #else
-      DWIN_Frame_TitleCopy(1, 190, 16, 215, 26); // "Info"
+      DWIN_Frame_TitleCopy(192, 15, 23, 12);                // "Info"
     #endif
 
-    DWIN_Frame_AreaCopy(1, 120, 150, 146, 161, 124, 102);
-    DWIN_Frame_AreaCopy(1, 146, 151, 254, 161, 82, 175);
-    DWIN_Frame_AreaCopy(1, 0, 165, 94, 175, 89, 248);
+    DWIN_Frame_AreaCopy(1, 120, 150, 146, 161, 124, 102);   // "Size"
+    DWIN_Frame_AreaCopy(1, 146, 151, 254, 161,  82, 175);   // "Firmware Version"
+    DWIN_Frame_AreaCopy(1,   1, 164,  96, 175,  89, 248);   // "Contact details"
   }
   DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE));
 
@@ -2005,21 +2040,20 @@ void Draw_Info_Menu() {
 void Draw_Print_File_Menu() {
   Clear_Title_Bar();
 
-  if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 0, 31, 55, 44); // "Print file"
-  }
+  if (HMI_IsChinese())
+    DWIN_Frame_TitleCopy(0, 31, 56, 14);  // "Print file"
   else {
     #ifdef USE_STRING_HEADINGS
-      Draw_Title("Print file"); // TODO: GET_TEXT_F
+      Draw_Title(GET_TEXT_F(MSG_MEDIA_MENU));
     #else
-      DWIN_Frame_TitleCopy(1, 52, 31, 137, 41); // "Print file"
+      DWIN_Frame_TitleCopy(52, 31, 86, 11); // "Print file"
     #endif
   }
 
   Redraw_SD_List();
 }
 
-/* Main Process */
+// Main Process
 void HMI_MainMenu() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -2030,7 +2064,7 @@ void HMI_MainMenu() {
         case 0: ICON_Print(); break;
         case 1: ICON_Print(); ICON_Prepare(); break;
         case 2: ICON_Prepare(); ICON_Control(); break;
-        case 3: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(1); break;
+        case 3: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(); break;
       }
     }
   }
@@ -2039,8 +2073,8 @@ void HMI_MainMenu() {
       switch (select_page.now) {
         case 0: ICON_Print(); ICON_Prepare(); break;
         case 1: ICON_Prepare(); ICON_Control(); break;
-        case 2: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(0); break;
-        case 3: TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(1); break;
+        case 2: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(); break;
+        case 3: TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(); break;
       }
     }
   }
@@ -2144,9 +2178,8 @@ void HMI_SelectFile() {
           Draw_Back_First();
           TERN_(SCROLL_LONG_FILENAMES, shift_ms = 0);
         }
-        else {
+        else
           Draw_SDItem(itemnum, 0);                              // Draw the item (and init shift name)
-        }
       }
       else {
         Move_Highlight(-1, select_file.now + MROWS - index_file); // Just move highlight
@@ -2195,11 +2228,12 @@ void HMI_SelectFile() {
       Goto_PrintProcess();
     }
   }
-HMI_SelectFileExit:
-  DWIN_UpdateLCD();
+
+  HMI_SelectFileExit:
+    DWIN_UpdateLCD();
 }
 
-/* Printing */
+// Printing
 void HMI_Printing() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -2219,10 +2253,10 @@ void HMI_Printing() {
         case 0: ICON_Tune(); break;
         case 1:
           ICON_Tune();
-          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+          ICON_ResumeOrPause();
           break;
         case 2:
-          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+          ICON_ResumeOrPause();
           ICON_Stop();
           break;
       }
@@ -2233,10 +2267,10 @@ void HMI_Printing() {
       switch (select_print.now) {
         case 0:
           ICON_Tune();
-          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+          ICON_ResumeOrPause();
           break;
         case 1:
-          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+          ICON_ResumeOrPause();
           ICON_Stop();
           break;
         case 2: ICON_Stop(); break;
@@ -2288,7 +2322,7 @@ void HMI_Printing() {
   DWIN_UpdateLCD();
 }
 
-/* Pause and Stop window */
+// Pause and Stop window
 void HMI_PauseOrStop() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -2301,18 +2335,13 @@ void HMI_PauseOrStop() {
     if (select_print.now == 1) { // pause window
       if (HMI_flag.select_flag) {
         HMI_flag.pause_action = true;
-        ICON_Continue();
         queue.inject_P(PSTR("M25"));
       }
-      else {
-        // cancel pause
-      }
       Goto_PrintProcess();
     }
     else if (select_print.now == 2) { // stop window
       if (HMI_flag.select_flag) {
         checkkey = Back_Main;
-        if (HMI_flag.home_flag) planner.synchronize(); // Wait for planner moves to finish!
         wait_for_heatup = wait_for_user = false;       // Stop waiting for heating/user
         card.abortFilePrintSoon();                     // Let the main loop handle SD abort
         dwin_abort_flag = true;                        // Reset feedrate, return to Home
@@ -2320,6 +2349,7 @@ void HMI_PauseOrStop() {
           host_action_cancel();
         #endif
         Popup_Window_Home(true);
+        if (HMI_flag.home_flag) planner.synchronize(); // Wait for planner moves to finish!
       }
       else
         Goto_PrintProcess(); // cancel stop
@@ -2332,25 +2362,35 @@ void Draw_Move_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 192, 1, 233, 14); // "Move"
-    DWIN_Frame_AreaCopy(1, 58, 118, 106, 132, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 109, 118, 157, 132, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 160, 118, 209, 132, LBLX, MBASE(3));
+    DWIN_Frame_TitleCopy(192, 1, 42, 14); // "Move"
+    Item_AreaCopy(58, 118, 106, 132, 1);
+    Item_AreaCopy(109, 118, 157, 132, 2);
+    Item_AreaCopy(160, 118, 209, 132, 3);
     #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 212, 118, 253, 131, LBLX, MBASE(4));
+      Item_AreaCopy(212, 118, 253, 131, 4);
     #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_MOVE_AXIS));
     #else
-      DWIN_Frame_TitleCopy(1, 231, 2, 265, 12);                     // "Move"
+      DWIN_Frame_TitleCopy(231, 2, 35, 11);   // "Move"
     #endif
-    draw_move_en(MBASE(1)); say_x(36, MBASE(1));                    // "Move X"
-    draw_move_en(MBASE(2)); say_y(36, MBASE(2));                    // "Move Y"
-    draw_move_en(MBASE(3)); say_z(36, MBASE(3));                    // "Move Z"
-    #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 123, 192, 176, 202, LBLX, MBASE(4));   // "Extruder"
+
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(1, GET_TEXT_F(MSG_MOVE_X));
+      DWIN_Draw_Label(2, GET_TEXT_F(MSG_MOVE_Y));
+      DWIN_Draw_Label(3, GET_TEXT_F(MSG_MOVE_Z));
+      #if HAS_HOTEND
+        DWIN_Draw_Label(4, GET_TEXT_F(MSG_MOVE_E));
+      #endif
+    #else
+      say_move_en(1); say_x_en(38, 1); // "Move X"
+      say_move_en(2); say_y_en(38, 2); // "Move Y"
+      say_move_en(3); say_z_en(38, 3); // "Move Z"
+      #if HAS_HOTEND
+        say_move_en(4); Item_AreaCopy(99, 194, 151, 204, 4, 38); // "Move Extruder"
+      #endif
     #endif
   }
 
@@ -2361,58 +2401,208 @@ void Draw_Move_Menu() {
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MoveX + i);
 }
 
-void Draw_AdvSet_Menu() {
+void Item_Adv_HomeOffsets(const uint8_t row) {
+  if (false && HMI_IsChinese()) {
+    // TODO: Chinese "Set Home Offsets"
+  }
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(row, GET_TEXT_F(MSG_SET_HOME_OFFSETS));
+    #else
+      Item_AreaCopy(1,  76, 102,  87, row); // "Set Home Offsets"
+    #endif
+  }
+  Draw_Menu_Line(row, ICON_HomeOff);
+  Draw_More_Icon(row);
+}
+
+#if HAS_ONESTEP_LEVELING
+
+  void Item_Adv_ProbeOffsets(const uint8_t row) {
+    if (false && HMI_IsChinese()) {
+      // TODO: Chinese "Probe Offsets"
+    }
+    else {
+      #ifdef USE_STRING_TITLES
+        DWIN_Draw_Label(row, GET_TEXT_F(MSG_SET_HOME_OFFSETS));
+      #else
+        say_probe_offs_en(0, row);
+      #endif
+    }
+    Draw_Menu_Line(row, ICON_ProbeOff);
+    Draw_More_Icon(row);
+  }
+
+#endif
+
+void Item_Adv_HotendPID(const uint8_t row) {
+  if (false && HMI_IsChinese()) {
+    // TODO: Chinese "Hotend PID"
+  }
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(row, F("Hotend PID"));
+    #else
+      Item_AreaCopy(96, 104, 167, 114, row); // "Hotend PID"
+    #endif
+  }
+  Draw_Menu_Line(row, ICON_PIDNozzle);
+}
+
+void Item_Adv_BedPID(const uint8_t row) {
+  if (false && HMI_IsChinese()) {
+    // TODO: Chinese "Bed PID"
+  }
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(row, F("Bed PID"));
+    #else
+      Item_AreaCopy(241, 104, 263, 115, row);     // "Bed"
+      Item_AreaCopy(145, 104, 167, 114, row, 27); // "PID"
+    #endif
+  }
+  Draw_Menu_Line(row, ICON_PIDbed);
+}
+
+#if ENABLED(POWER_LOSS_RECOVERY)
+
+  void Item_Adv_PLR(const uint8_t row) {
+    if (false && HMI_IsChinese()) {
+      // TODO: Chinese "Power-loss Recovery"
+    }
+    else {
+      #ifdef USE_STRING_TITLES
+        DWIN_Draw_Label(row, GET_TEXT_F(MSG_ZPROBE_OFFSETS));
+      #else
+        Item_AreaCopy(1, 208, 137, 221, row);  // "Power-loss Recovery"
+      #endif
+    }
+    Draw_Menu_Line(row, ICON_Motion);
+    Draw_Checkbox_Line(row, recovery.enabled);
+  }
+
+#endif
+
+void Draw_AdvancedSettings_Menu() {
   Clear_Main_Window();
 
-  #if ADVSET_CASE_TOTAL >= 6
+  #if ADVSET_CASE_TOTAL >= TROWS
     const int16_t scroll = MROWS - index_advset; // Scrolled-up lines
-    #define ASCROL(L) (scroll + (L))
   #else
-    #define ASCROL(L) (L)
+    constexpr int16_t scroll = 0;
   #endif
+  #define ASCROL(L) (scroll + (L))
+  #define AVISI(L) VISI(ADVSET_CASE_TOTAL, L, ASCROL(L))
 
-  #define AVISI(L)  WITHIN(ASCROL(L), 0, MROWS)
-
-  Draw_Title(GET_TEXT_F(MSG_ADVANCED_SETTINGS));
+  #ifdef USE_STRING_HEADINGS
+    Draw_Title(GET_TEXT_F(MSG_ADVANCED_SETTINGS));
+  #else
+    DWIN_Frame_TitleCopy(93, 401, 126, 15); // "Advanced Settings"
+  #endif
 
   if (AVISI(0)) Draw_Back_First(select_advset.now == 0);
-  if (AVISI(ADVSET_CASE_HOMEOFF)) Draw_Menu_Line(ASCROL(ADVSET_CASE_HOMEOFF), ICON_HomeOff, GET_TEXT(MSG_SET_HOME_OFFSETS),true);  // Home Offset >
+  if (AVISI(ADVSET_CASE_HOMEOFF)) Item_Adv_HomeOffsets(ASCROL(ADVSET_CASE_HOMEOFF));      // Set Home Offsets >
   #if HAS_ONESTEP_LEVELING
-    if (AVISI(ADVSET_CASE_PROBEOFF)) Draw_Menu_Line(ASCROL(ADVSET_CASE_PROBEOFF), ICON_ProbeOff, GET_TEXT(MSG_ZPROBE_OFFSETS),true);  // Probe Offset >
+    if (AVISI(ADVSET_CASE_PROBEOFF)) Item_Adv_ProbeOffsets(ASCROL(ADVSET_CASE_PROBEOFF)); // Probe Offsets >
   #endif
-  if (AVISI(ADVSET_CASE_HEPID)) Draw_Menu_Line(ASCROL(ADVSET_CASE_HEPID), ICON_PIDNozzle, "Hotend PID", false);  // Nozzle PID
-  if (AVISI(ADVSET_CASE_BEDPID)) Draw_Menu_Line(ASCROL(ADVSET_CASE_BEDPID), ICON_PIDbed, "Bed PID", false);  // Bed PID
+  if (AVISI(ADVSET_CASE_HEPID)) Item_Adv_HotendPID(ASCROL(ADVSET_CASE_HEPID));            // Nozzle PID
+  if (AVISI(ADVSET_CASE_BEDPID)) Item_Adv_BedPID(ASCROL(ADVSET_CASE_BEDPID));             // Bed PID
   #if ENABLED(POWER_LOSS_RECOVERY)
-    if (AVISI(ADVSET_CASE_PWRLOSSR)) {
-      Draw_Menu_Line(ASCROL(ADVSET_CASE_PWRLOSSR), ICON_Motion, "Power-loss recovery", false);  // Power-loss recovery
-      Draw_Chkb_Line(ASCROL(ADVSET_CASE_PWRLOSSR), recovery.enabled);
-    }
+    if (AVISI(ADVSET_CASE_PWRLOSSR)) Item_Adv_PLR(ASCROL(ADVSET_CASE_PWRLOSSR));          // Power-loss recovery
   #endif
   if (select_advset.now) Draw_Menu_Cursor(ASCROL(select_advset.now));
 }
 
+void Item_HomeOffs_X(const uint8_t row) {
+  if (false && HMI_IsChinese()) {
+    // TODO: Chinese "Home Offset X"
+  }
+  else {
+    #ifdef USE_STRING_TITLES
+      Draw_Menu_Line(row, ICON_HomeOffX, GET_TEXT_F(MSG_HOME_OFFSET_X));
+    #else
+      say_home_offs_en(row); say_x_en(75, row);   // "Home Offset X"
+    #endif
+  }
+  Draw_Menu_Line(row, ICON_HomeOff);
+  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(row), HMI_ValueStruct.Home_OffX_scaled);
+}
+
+void Item_HomeOffs_Y(const uint8_t row) {
+  if (false && HMI_IsChinese()) {
+    // TODO: Chinese "Home Offset Y"
+  }
+  else {
+    #ifdef USE_STRING_TITLES
+      Draw_Menu_Line(row, ICON_HomeOffY, GET_TEXT_F(MSG_HOME_OFFSET_Y));
+    #else
+      say_home_offs_en(row); say_y_en(75, row);   // "Home Offset X"
+    #endif
+  }
+  Draw_Menu_Line(row, ICON_HomeOff);
+  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(row), HMI_ValueStruct.Home_OffY_scaled);
+}
+
+void Item_HomeOffs_Z(const uint8_t row) {
+  if (false && HMI_IsChinese()) {
+    // TODO: Chinese "Home Offset Z"
+  }
+  else {
+    #ifdef USE_STRING_TITLES
+      Draw_Menu_Line(row, ICON_HomeOffZ, GET_TEXT_F(MSG_HOME_OFFSET_Z));
+    #else
+      say_home_offs_en(row); say_z_en(75, row);   // "Home Offset Z"
+    #endif
+  }
+  Draw_Menu_Line(row, ICON_HomeOff);
+  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(row), HMI_ValueStruct.Home_OffZ_scaled);
+}
+
 void Draw_HomeOff_Menu() {
   Clear_Main_Window();
-  Draw_Title(GET_TEXT_F(MSG_SET_HOME_OFFSETS));                 // Home Offsets
+  if (false && HMI_IsChinese()) {
+    // TODO: Chinese "Home Offsets"
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_SET_HOME_OFFSETS));
+    #else
+      DWIN_Frame_TitleCopy(1, 401, 91, 12);         // "Home Offsets"
+    #endif
+  }
   Draw_Back_First(select_item.now == 0);
-  Draw_Menu_Line(1, ICON_HomeOffX, GET_TEXT(MSG_HOME_OFFSET_X));  // Home X Offset
-  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Home_OffX_scaled);
-  Draw_Menu_Line(2, ICON_HomeOffY, GET_TEXT(MSG_HOME_OFFSET_Y));  // Home Y Offset
-  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Home_OffY_scaled);
-  Draw_Menu_Line(3, ICON_HomeOffZ, GET_TEXT(MSG_HOME_OFFSET_Z));  // Home Y Offset
-  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Home_OffZ_scaled);
+  Item_HomeOffs_X(1);                               // "Home Offset X"
+  Item_HomeOffs_Y(2);                               // "Home Offset Y"
+  Item_HomeOffs_Z(3);                               // "Home Offset Z"
   if (select_item.now) Draw_Menu_Cursor(select_item.now);
 }
 
 #if HAS_ONESTEP_LEVELING
+
   void Draw_ProbeOff_Menu() {
     Clear_Main_Window();
-    Draw_Title(GET_TEXT_F(MSG_ZPROBE_OFFSETS));                 // Probe Offsets
     Draw_Back_First(select_item.now == 0);
-    Draw_Menu_Line(1, ICON_ProbeOffX, GET_TEXT(MSG_ZPROBE_XOFFSET));  // Probe X Offset
-    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Probe_OffX_scaled);
-    Draw_Menu_Line(2, ICON_ProbeOffY, GET_TEXT(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
-    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Probe_OffY_scaled);
+    if (false && HMI_IsChinese()) {
+      // TODO: Chinese "Probe Offsets"
+    }
+    else {
+      #ifdef USE_STRING_HEADINGS
+        Draw_Title(GET_TEXT_F(MSG_ZPROBE_OFFSETS));
+      #else
+        DWIN_Frame_TitleCopy(124, 431, 91, 12);                             // "Probe Offsets"
+      #endif
+      #ifdef USE_STRING_TITLES
+        Draw_Menu_Line(1, ICON_ProbeOffX, GET_TEXT_F(MSG_ZPROBE_XOFFSET));  // Probe X Offset
+        Draw_Menu_Line(2, ICON_ProbeOffY, GET_TEXT_F(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
+      #else
+        say_probe_offs_en(1); say_x_en(75, 1);  // "Probe Offset X"
+        say_probe_offs_en(2); say_y_en(75, 2);  // "Probe Offset Y"
+      #endif
+    }
+
+    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Probe_OffX_scaled);
+    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Probe_OffY_scaled);
+
     if (select_item.now) Draw_Menu_Cursor(select_item.now);
   }
 #endif
@@ -2431,7 +2621,7 @@ void HMI_AudioFeedback(const bool success=true) {
   #endif
 }
 
-/* Prepare */
+// Prepare
 void HMI_Prepare() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -2495,12 +2685,12 @@ void HMI_Prepare() {
         select_axis.reset();
         Draw_Move_Menu();
 
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(1), current_position.x * MINUNITMULT);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(2), current_position.y * MINUNITMULT);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), current_position.z * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(1), current_position.x * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(2), current_position.y * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(3), current_position.z * MINUNITMULT);
         #if HAS_HOTEND
           HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
-          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
+          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(4), HMI_ValueStruct.Move_E_scaled);
         #endif
         break;
       case PREPARE_CASE_DISA: // Disable steppers
@@ -2518,7 +2708,7 @@ void HMI_Prepare() {
             checkkey = Homeoffset;
             HMI_ValueStruct.show_mode = -4;
             HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
-            DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(PREPARE_CASE_ZOFF + MROWS - index_prepare), HMI_ValueStruct.offset_value);
+            DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, EBASE(PREPARE_CASE_ZOFF + MROWS - index_prepare), HMI_ValueStruct.offset_value);
             EncoderRate.enabled = true;
           #else
             // Apply workspace offset, making the current position 0,0,0
@@ -2559,60 +2749,61 @@ void Draw_Temperature_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 236, 2, 263, 13); // "Temperature"
+    DWIN_Frame_TitleCopy(236, 2, 28, 12); // "Temperature"
     #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(TEMP_CASE_TEMP));
+      Item_AreaCopy(1, 134, 56, 146, TEMP_CASE_TEMP);
     #endif
     #if HAS_HEATED_BED
-      DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX, MBASE(TEMP_CASE_BED));
+      Item_AreaCopy(58, 134, 113, 146, TEMP_CASE_BED);
     #endif
     #if HAS_FAN
-      DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX, MBASE(TEMP_CASE_FAN));
+      Item_AreaCopy(115, 134, 170, 146, TEMP_CASE_FAN);
     #endif
     #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 100, 89, 178, 101, LBLX, MBASE(TEMP_CASE_PLA));
-      DWIN_Frame_AreaCopy(1, 180, 89, 260, 100, LBLX, MBASE(TEMP_CASE_ABS));
+      Item_AreaCopy(100, 89, 178, 101, TEMP_CASE_PLA);
+      Item_AreaCopy(180, 89, 260, 100, TEMP_CASE_ABS);
     #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_TEMPERATURE));
     #else
-      DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                       // "Temperature"
+      DWIN_Frame_TitleCopy(56, 15, 85, 14);   // "Temperature"
     #endif
     #ifdef USE_STRING_TITLES
       #if HAS_HOTEND
-        DWIN_Draw_Label(MBASE(TEMP_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+        DWIN_Draw_Label(TEMP_CASE_TEMP, GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
       #endif
       #if HAS_HEATED_BED
-        DWIN_Draw_Label(MBASE(TEMP_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+        DWIN_Draw_Label(TEMP_CASE_BED, GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
       #endif
       #if HAS_FAN
-        DWIN_Draw_Label(MBASE(TEMP_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+        DWIN_Draw_Label(TEMP_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
       #endif
       #if HAS_HOTEND
-        DWIN_Draw_Label(MBASE(TEMP_CASE_PLA), F("PLA Preheat Settings"));
-        DWIN_Draw_Label(MBASE(TEMP_CASE_ABS), F("ABS Preheat Settings"));
+        DWIN_Draw_Label(TEMP_CASE_PLA, F(PREHEAT_1_LABEL " Preheat Settings"));
+        DWIN_Draw_Label(TEMP_CASE_ABS, F(PREHEAT_2_LABEL " Preheat Settings"));
       #endif
     #else
       #if HAS_HOTEND
-        DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(TEMP_CASE_TEMP));      // Nozzle...
-        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(TEMP_CASE_TEMP));     // ...Temperature
+        Item_AreaCopy(197, 104, 238, 114, TEMP_CASE_TEMP);    // "Nozzle"
+        Item_AreaCopy(1,  89,  83, 101, TEMP_CASE_TEMP, 44);  // "Temperature"
       #endif
       #if HAS_HEATED_BED
-        DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX, MBASE(TEMP_CASE_BED));       // Bed...
-        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 27, MBASE(TEMP_CASE_BED));      // ...Temperature
+        Item_AreaCopy(240, 104, 264, 114, TEMP_CASE_BED);     // "Bed"
+        Item_AreaCopy(1,  89,  83, 101, TEMP_CASE_BED, 27);   // "Temperature"
       #endif
       #if HAS_FAN
-        DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX, MBASE(TEMP_CASE_FAN));          // Fan speed
+        Item_AreaCopy(  1, 119,  61, 132, TEMP_CASE_FAN);     // "Fan speed"
       #endif
       #if HAS_HOTEND
-        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(TEMP_CASE_PLA));         // Preheat...
-        DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(TEMP_CASE_PLA));    // ...PLA
-        DWIN_Frame_AreaCopy(1, 131, 119, 182, 132, LBLX + 79, MBASE(TEMP_CASE_PLA));  // PLA setting
-        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(TEMP_CASE_ABS));         // Preheat...
-        DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(TEMP_CASE_ABS));    // ...ABS
-        DWIN_Frame_AreaCopy(1, 131, 119, 182, 132, LBLX + 81, MBASE(TEMP_CASE_ABS));  // ABS setting
+        Item_AreaCopy(107,  76, 156,  86, TEMP_CASE_PLA);     // "Preheat"
+        say_pla_en(52, TEMP_CASE_PLA);                        // "PLA"
+        Item_AreaCopy(150, 135, 202, 148, TEMP_CASE_PLA, 79); // "Settings"
+
+        Item_AreaCopy(107,  76, 156,  86, TEMP_CASE_ABS);     // "Preheat"
+        say_abs_en(52, TEMP_CASE_ABS);                        // "ABS"
+        Item_AreaCopy(150, 135, 202, 148, TEMP_CASE_ABS, 81); // "Settings"
       #endif
     #endif
   }
@@ -2625,15 +2816,15 @@ void Draw_Temperature_Menu() {
   #define _TMENU_ICON(N) Draw_Menu_Line(++i, ICON_SetEndTemp + (N) - 1)
   #if HAS_HOTEND
     _TMENU_ICON(TEMP_CASE_TEMP);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.degTargetHotend(0));
+    Draw_Edit_Integer3(i, thermalManager.degTargetHotend(0));
   #endif
   #if HAS_HEATED_BED
     _TMENU_ICON(TEMP_CASE_BED);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.degTargetBed());
+    Draw_Edit_Integer3(i, thermalManager.degTargetBed());
   #endif
   #if HAS_FAN
     _TMENU_ICON(TEMP_CASE_FAN);
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.fan_speed[0]);
+    Draw_Edit_Integer3(i, thermalManager.fan_speed[0]);
   #endif
   #if HAS_HOTEND
     // PLA/ABS items have submenus
@@ -2644,7 +2835,7 @@ void Draw_Temperature_Menu() {
   #endif
 }
 
-/* Control */
+// Control
 void HMI_Control() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -2659,20 +2850,14 @@ void HMI_Control() {
         Scroll_Menu(DWIN_SCROLL_UP);
 
         switch (index_control) {  // Last menu items
-          case CONTROL_CASE_ADVSET:  // Advanced Settings >
-            Draw_Menu_Item(MROWS, ICON_AdvSet, GET_TEXT(MSG_ADVANCED_SETTINGS), true);
-            break;
-          case CONTROL_CASE_INFO:    // Info >
-            Item_Control_Info(MBASE(MROWS));
-            Draw_Menu_Icon(MROWS, ICON_Info);
-            break;
+          case CONTROL_CASE_ADVSET: Item_Control_Advanced(MROWS); break;
+          case CONTROL_CASE_INFO:   Item_Control_Info(MROWS);     break;
           default: break;
         }
 
       }
-      else {
+      else
         Move_Highlight(1, select_control.now + MROWS - index_control);
-      }
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
@@ -2681,20 +2866,14 @@ void HMI_Control() {
         index_control--;
         Scroll_Menu(DWIN_SCROLL_DOWN);
         switch (index_control) {  // First menu items
-          case MROWS :
-          Draw_Back_First();
-            break;
-          case MROWS + 1: // Temperature >
-            Draw_Menu_Line(0, ICON_Temperature, GET_TEXT(MSG_TEMPERATURE), true);
-            break;
-          case MROWS + 2: // Move >
-            Draw_Menu_Line(0, ICON_Motion, GET_TEXT(MSG_MOTION), true);
+          case MROWS:     Draw_Back_First();      break;
+          case MROWS + 1: Item_Control_Temp(0);   break;
+          case MROWS + 2: Item_Control_Motion(0); break;
           default: break;
         }
       }
-      else {
+      else
         Move_Highlight(-1, select_control.now + MROWS - index_control);
-      }
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
@@ -2731,7 +2910,7 @@ void HMI_Control() {
       case CONTROL_CASE_ADVSET: // Advanced Settings
         checkkey = AdvSet;
         select_advset.reset();
-        Draw_AdvSet_Menu();
+        Draw_AdvancedSettings_Menu();
         break;
       case CONTROL_CASE_INFO: // Info
         checkkey = Info;
@@ -2746,7 +2925,7 @@ void HMI_Control() {
 
 #if HAS_ONESTEP_LEVELING
 
-  /* Leveling */
+  // Leveling
   void HMI_Leveling() {
     Popup_Window_Leveling();
     DWIN_UpdateLCD();
@@ -2755,7 +2934,7 @@ void HMI_Control() {
 
 #endif
 
-/* Axis Move */
+// Axis Move
 void HMI_AxisMove() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -2767,10 +2946,10 @@ void HMI_AxisMove() {
         HMI_flag.ETempTooLow_flag = false;
         HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
         Draw_Move_Menu();
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), 0);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Move_X_scaled);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Move_Y_scaled);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(3), HMI_ValueStruct.Move_Z_scaled);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(4), 0);
         DWIN_UpdateLCD();
       }
       return;
@@ -2795,19 +2974,19 @@ void HMI_AxisMove() {
       case 1: // X axis move
         checkkey = Move_X;
         HMI_ValueStruct.Move_X_scaled = current_position.x * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Move_X_scaled);
         EncoderRate.enabled = true;
         break;
       case 2: // Y axis move
         checkkey = Move_Y;
         HMI_ValueStruct.Move_Y_scaled = current_position.y * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Move_Y_scaled);
         EncoderRate.enabled = true;
         break;
       case 3: // Z axis move
         checkkey = Move_Z;
         HMI_ValueStruct.Move_Z_scaled = current_position.z * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 220, EBASE(3), HMI_ValueStruct.Move_Z_scaled);
         EncoderRate.enabled = true;
         break;
         #if HAS_HOTEND
@@ -2823,7 +3002,7 @@ void HMI_AxisMove() {
             #endif
             checkkey = Extruder;
             HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
-            DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
+            DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(4), HMI_ValueStruct.Move_E_scaled);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -2832,7 +3011,7 @@ void HMI_AxisMove() {
   DWIN_UpdateLCD();
 }
 
-/* TemperatureID */
+// TemperatureID
 void HMI_Temperature() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -2856,7 +3035,7 @@ void HMI_Temperature() {
         case TEMP_CASE_TEMP: // Nozzle temperature
           checkkey = ETemp;
           HMI_ValueStruct.E_Temp = thermalManager.degTargetHotend(0);
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(1), HMI_ValueStruct.E_Temp);
+          Draw_Edit_Integer3(1, HMI_ValueStruct.E_Temp, true);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -2864,7 +3043,7 @@ void HMI_Temperature() {
         case TEMP_CASE_BED: // Bed temperature
           checkkey = BedTemp;
           HMI_ValueStruct.Bed_Temp = thermalManager.degTargetBed();
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(2), HMI_ValueStruct.Bed_Temp);
+          Draw_Edit_Integer3(2, HMI_ValueStruct.Bed_Temp, true);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -2872,7 +3051,7 @@ void HMI_Temperature() {
         case TEMP_CASE_FAN: // Fan speed
           checkkey = FanSpeed;
           HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(3), HMI_ValueStruct.Fan_speed);
+          Draw_Edit_Integer3(3, HMI_ValueStruct.Fan_speed, true);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -2885,53 +3064,53 @@ void HMI_Temperature() {
           Clear_Main_Window();
 
           if (HMI_IsChinese()) {
-            DWIN_Frame_TitleCopy(1, 59, 16, 139, 29);                                         // "PLA Settings"
-            DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_TEMP));
-            DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(PREHEAT_CASE_TEMP));     // PLA nozzle temp
+            DWIN_Frame_TitleCopy(59, 16, 81, 14);                       // "PLA Settings"
+            Item_AreaCopy(100, 89, 124, 101, PREHEAT_CASE_TEMP);
+            Item_AreaCopy(1, 134, 56, 146, PREHEAT_CASE_TEMP, 24);      // PLA nozzle temp
             #if HAS_HEATED_BED
-              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_BED));
-              DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX + 24, MBASE(PREHEAT_CASE_BED));  // PLA bed temp
+              Item_AreaCopy(100, 89, 124, 101, PREHEAT_CASE_BED);
+              Item_AreaCopy(58, 134, 113, 146, PREHEAT_CASE_BED, 24);   // PLA bed temp
             #endif
             #if HAS_FAN
-              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_FAN));
-              DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX + 24, MBASE(PREHEAT_CASE_FAN)); // PLA fan speed
+              Item_AreaCopy(100, 89, 124, 101, PREHEAT_CASE_FAN);
+              Item_AreaCopy(115, 134, 170, 146, PREHEAT_CASE_FAN, 24);  // PLA fan speed
             #endif
             #if ENABLED(EEPROM_SETTINGS)
-              DWIN_Frame_AreaCopy(1, 72, 148, 151, 162, LBLX, MBASE(PREHEAT_CASE_SAVE));      // Save PLA configuration
+              Item_AreaCopy(72, 148, 151, 162, PREHEAT_CASE_SAVE);      // Save PLA configuration
             #endif
           }
           else {
             #ifdef USE_STRING_HEADINGS
-              Draw_Title("PLA Settings"); // TODO: GET_TEXT_F
+              Draw_Title(PREHEAT_1_LABEL " Settings"); // TODO: GET_TEXT_F
             #else
-              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                       // "PLA Settings"
+              DWIN_Frame_TitleCopy(57, 16, 84, 14);                     // "PLA Settings"
             #endif
             #ifdef USE_STRING_TITLES
-              DWIN_Draw_Label(MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
+              DWIN_Draw_Label(PREHEAT_CASE_TEMP, F("Nozzle Temp"));
               #if HAS_HEATED_BED
-                DWIN_Draw_Label(MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
+                DWIN_Draw_Label(PREHEAT_CASE_BED, F("Bed Temp"));
               #endif
               #if HAS_FAN
-                DWIN_Draw_Label(MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+                DWIN_Draw_Label(PREHEAT_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Draw_Label(MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+                DWIN_Draw_Label(PREHEAT_CASE_SAVE, GET_TEXT_F(MSG_STORE_EEPROM));
               #endif
             #else
-              DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_TEMP));
-              DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(PREHEAT_CASE_TEMP));
-              DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(PREHEAT_CASE_TEMP));      // PLA nozzle temp
+              say_pla_en(0, PREHEAT_CASE_TEMP);                           // "PLA"
+              Item_AreaCopy(198, 104, 237, 114, PREHEAT_CASE_TEMP, 27);   // "Nozzle"
+              Item_AreaCopy(1,  89,  81, 102, PREHEAT_CASE_TEMP, 71);     // "Temperature"
               #if HAS_HEATED_BED
-                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_BED) + 3);
-                DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(PREHEAT_CASE_BED) + 3);
-                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 54, MBASE(PREHEAT_CASE_BED) + 3); // PLA bed temp
+                say_pla_en(0, PREHEAT_CASE_BED);                          // "PLA"
+                Item_AreaCopy(240, 104, 264, 114, PREHEAT_CASE_BED, 27);  // "Bed"
+                Item_AreaCopy(1, 89, 83, 101, PREHEAT_CASE_BED, 54);      // "Temperature"
               #endif
               #if HAS_FAN
-                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_FAN));
-                DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(PREHEAT_CASE_FAN));    // PLA fan speed
+                say_pla_en(0, PREHEAT_CASE_FAN);                          // "PLA"
+                Item_AreaCopy(0, 119, 64, 132, PREHEAT_CASE_FAN, 27);     // "Fan speed"
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(PREHEAT_CASE_SAVE));      // Save PLA configuration
+                Item_AreaCopy(98, 164, 233, 177, PREHEAT_CASE_SAVE);      // "Save PLA parameters"
               #endif
             #endif
           }
@@ -2940,14 +3119,14 @@ void HMI_Temperature() {
 
           uint8_t i = 0;
           Draw_Menu_Line(++i, ICON_SetEndTemp);
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[0].hotend_temp);
+          Draw_Edit_Integer3(i, ui.material_preset[0].hotend_temp);
           #if HAS_HEATED_BED
             Draw_Menu_Line(++i, ICON_SetBedTemp);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[0].bed_temp);
+            Draw_Edit_Integer3(i, ui.material_preset[0].bed_temp);
           #endif
           #if HAS_FAN
             Draw_Menu_Line(++i, ICON_FanSpeed);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[0].fan_speed);
+            Draw_Edit_Integer3(i, ui.material_preset[0].fan_speed);
           #endif
           #if ENABLED(EEPROM_SETTINGS)
             Draw_Menu_Line(++i, ICON_WriteEEPROM);
@@ -2962,56 +3141,56 @@ void HMI_Temperature() {
           Clear_Main_Window();
 
           if (HMI_IsChinese()) {
-            DWIN_Frame_TitleCopy(1, 142, 16, 223, 29);                                        // "ABS Settings"
+            DWIN_Frame_TitleCopy(142, 16, 82, 14);                        // "ABS Settings"
 
-            DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_TEMP));
-            DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(PREHEAT_CASE_TEMP));    // ABS nozzle temp
+            Item_AreaCopy(180, 89, 204, 100, PREHEAT_CASE_TEMP);
+            Item_AreaCopy(1, 134, 56, 146, PREHEAT_CASE_TEMP, 24);        // ABS nozzle temp
             #if HAS_HEATED_BED
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_BED));
-              DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX + 24, MBASE(PREHEAT_CASE_BED));  // ABS bed temp
+              Item_AreaCopy(180, 89, 204, 100, PREHEAT_CASE_BED);
+              Item_AreaCopy(58, 134, 113, 146, PREHEAT_CASE_BED, 24);     // ABS bed temp
             #endif
             #if HAS_FAN
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_FAN));
-              DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX + 24, MBASE(PREHEAT_CASE_FAN)); // ABS fan speed
+              Item_AreaCopy(180, 89, 204, 100, PREHEAT_CASE_FAN);
+              Item_AreaCopy(115, 134, 170, 146, PREHEAT_CASE_FAN, 24);    // ABS fan speed
             #endif
             #if ENABLED(EEPROM_SETTINGS)
-              DWIN_Frame_AreaCopy(1, 72, 148, 151, 162, LBLX, MBASE(PREHEAT_CASE_SAVE));
-              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX + 28, MBASE(PREHEAT_CASE_SAVE) + 2);   // Save ABS configuration
+              Item_AreaCopy(72, 148, 151, 162, PREHEAT_CASE_SAVE);
+              Item_AreaCopy(180, 89, 204, 100, PREHEAT_CASE_SAVE, 28, 2); // Save ABS configuration
             #endif
           }
           else {
             #ifdef USE_STRING_HEADINGS
               Draw_Title("ABS Settings"); // TODO: GET_TEXT_F
             #else
-              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                                  // "ABS Settings"
+              DWIN_Frame_TitleCopy(57, 16, 84, 14);                       // "ABS Settings"
             #endif
             #ifdef USE_STRING_TITLES
-              DWIN_Draw_Label(MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
+              DWIN_Draw_Label(PREHEAT_CASE_TEMP, F("Nozzle Temp"));
               #if HAS_HEATED_BED
-                DWIN_Draw_Label(MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
+                DWIN_Draw_Label(PREHEAT_CASE_BED, F("Bed Temp"));
               #endif
               #if HAS_FAN
-                DWIN_Draw_Label(MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+                DWIN_Draw_Label(PREHEAT_CASE_FAN, GET_TEXT_F(MSG_FAN_SPEED));
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Draw_Label(MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+                DWIN_Draw_Label(PREHEAT_CASE_SAVE, GET_TEXT_F(MSG_STORE_EEPROM));
               #endif
             #else
-              DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_TEMP));
-              DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(PREHEAT_CASE_TEMP));
-              DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(PREHEAT_CASE_TEMP));      // ABS nozzle temp
+              say_abs_en(0, PREHEAT_CASE_TEMP);                           // "ABS"
+              Item_AreaCopy(197, 104, 238, 114, PREHEAT_CASE_TEMP, 29);   // "Nozzle"
+              Item_AreaCopy(1,  89,  34, 102, PREHEAT_CASE_TEMP, 73);     // "Temp"
               #if HAS_HEATED_BED
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_BED) + 3);
-                DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(PREHEAT_CASE_BED) + 3);
-                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 54, MBASE(PREHEAT_CASE_BED) + 3); // ABS bed temp
+                say_abs_en(0, PREHEAT_CASE_BED);                          // "ABS"
+                Item_AreaCopy(240, 104, 264, 114, PREHEAT_CASE_BED, 29);  // "Bed"
+                Item_AreaCopy(1,  89,  83, 102, PREHEAT_CASE_BED, 56);    // "Temperature"
               #endif
               #if HAS_FAN
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_FAN));
-                DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(PREHEAT_CASE_FAN));             // ABS fan speed
+                say_abs_en(0, PREHEAT_CASE_FAN);                          // "ABS"
+                Item_AreaCopy(0, 119,  64, 132, PREHEAT_CASE_FAN, 29);    // "Fan speed"
               #endif
               #if ENABLED(EEPROM_SETTINGS)
-                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(PREHEAT_CASE_SAVE));
-                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 33, MBASE(PREHEAT_CASE_SAVE));                     // Save ABS configuration
+                Item_AreaCopy(98, 165, 233, 177, PREHEAT_CASE_SAVE);      // "Save PLA parameters"
+                say_abs_en(33, PREHEAT_CASE_SAVE);                        // "ABS"
               #endif
             #endif
           }
@@ -3020,14 +3199,14 @@ void HMI_Temperature() {
 
           uint8_t i = 0;
           Draw_Menu_Line(++i, ICON_SetEndTemp);
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[1].hotend_temp);
+          Draw_Edit_Integer3(i, ui.material_preset[1].hotend_temp);
           #if HAS_HEATED_BED
             Draw_Menu_Line(++i, ICON_SetBedTemp);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[1].bed_temp);
+            Draw_Edit_Integer3(i, ui.material_preset[1].bed_temp);
           #endif
           #if HAS_FAN
             Draw_Menu_Line(++i, ICON_FanSpeed);
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[1].fan_speed);
+            Draw_Edit_Integer3(i, ui.material_preset[1].fan_speed);
           #endif
           #if ENABLED(EEPROM_SETTINGS)
             Draw_Menu_Line(++i, ICON_WriteEEPROM);
@@ -3045,63 +3224,53 @@ void Draw_Max_Speed_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Max Speed (mm/s)"
+    DWIN_Frame_TitleCopy(1, 16, 28, 13);          // "Max Speed (mm/s)"
 
-    auto say_max_speed = [](const uint16_t row) {
-      DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, row);              // "Max speed"
+    auto say_max_speed_cn = [](const uint8_t line) {
+      Item_AreaCopy(173, 133, 228, 147, line);    // "Max speed"
     };
 
-    say_max_speed(MBASE(1));                                              // "Max speed"
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 58, MBASE(1));      // X
-    say_max_speed(MBASE(2));                                              // "Max speed"
-    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 58, MBASE(2) + 3);      // Y
-    say_max_speed(MBASE(3));                                              // "Max speed"
-    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 58, MBASE(3) + 3);     // Z
+    say_max_speed_cn(1);                          // "Max speed"
+    Item_AreaCopy(229, 133, 236, 147, 1, 58);     // "X"
+    say_max_speed_cn(2);                          // "Max speed"
+    Item_AreaCopy(1, 150, 7, 160, 2, 58, 3);      // "Y"
+    say_max_speed_cn(3);                          // "Max speed"
+    Item_AreaCopy(9, 150, 16, 160, 3, 58, 3);     // "Z"
     #if HAS_HOTEND
-      say_max_speed(MBASE(4));                                            // "Max speed"
-      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 58, MBASE(4) + 3);  // E
+      say_max_speed_cn(4);                        // "Max speed"
+      Item_AreaCopy(18, 150, 25, 160, 4, 58, 3);  // "E"
     #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title("Max Speed (mm/s)"); // TODO: GET_TEXT_F
     #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Max Speed (mm/s)"
+      DWIN_Frame_TitleCopy(144, 16, 46, 11);                  // "Max Speed (mm/s)"
     #endif
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(1), F("Max Feedrate X"));
-      DWIN_Draw_Label(MBASE(2), F("Max Feedrate Y"));
-      DWIN_Draw_Label(MBASE(3), F("Max Feedrate Z"));
+      DWIN_Draw_Label(1, F("Max Feedrate X"));
+      DWIN_Draw_Label(2, F("Max Feedrate Y"));
+      DWIN_Draw_Label(3, F("Max Feedrate Z"));
       #if HAS_HOTEND
-        DWIN_Draw_Label(MBASE(4), F("Max Feedrate E"));
+        DWIN_Draw_Label(4, F("Max Feedrate E"));
       #endif
     #else
-      draw_max_en(MBASE(1));          // "Max"
-      DWIN_Frame_AreaCopy(1, 184, 119, 234, 132, LBLX + 27, MBASE(1)); // "Speed X"
-
-      draw_max_en(MBASE(2));          // "Max"
-      draw_speed_en(27, MBASE(2));    // "Speed"
-      say_y(70, MBASE(2));            // "Y"
-
-      draw_max_en(MBASE(3));          // "Max"
-      draw_speed_en(27, MBASE(3));    // "Speed"
-      say_z(70, MBASE(3));            // "Z"
-
+      say_max_en(1); say_speed_en(30, 1); say_x_en(73, 1);    // "Max Speed X"
+      say_max_en(2); say_speed_en(30, 2); say_y_en(73, 2);    // "Max Speed Y"
+      say_max_en(3); say_speed_en(30, 3); say_z_en(73, 3);    // "Max Speed Z"
       #if HAS_HOTEND
-        draw_max_en(MBASE(4));        // "Max"
-        draw_speed_en(27, MBASE(4));  // "Speed"
-        say_e(70, MBASE(4));          // "E"
+        say_max_en(4); say_speed_en(30, 4); say_e_en(73, 4);  // "Max Speed E"
       #endif
     #endif
   }
 
   Draw_Back_First();
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedX + i);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(1), planner.settings.max_feedrate_mm_s[X_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(2), planner.settings.max_feedrate_mm_s[Y_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(3), planner.settings.max_feedrate_mm_s[Z_AXIS]);
+  Draw_Edit_Integer4(1, planner.settings.max_feedrate_mm_s[X_AXIS]);
+  Draw_Edit_Integer4(2, planner.settings.max_feedrate_mm_s[Y_AXIS]);
+  Draw_Edit_Integer4(3, planner.settings.max_feedrate_mm_s[Z_AXIS]);
   #if HAS_HOTEND
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(4), planner.settings.max_feedrate_mm_s[E_AXIS]);
+    Draw_Edit_Integer4(4, planner.settings.max_feedrate_mm_s[E_AXIS]);
   #endif
 }
 
@@ -3109,53 +3278,53 @@ void Draw_Max_Accel_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Acceleration"
-
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(1) + 1);
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 71, MBASE(1));   // Max acceleration X
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(2) + 1);
-    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 71, MBASE(2) + 2);   // Max acceleration Y
-    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(3) + 1);
-    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 71, MBASE(3) + 2);  // Max acceleration Z
+    DWIN_Frame_TitleCopy(1, 16, 28, 13);                // "Acceleration"
+
+    Item_AreaCopy(173, 133, 200, 147, 1);
+    Item_AreaCopy( 28, 149,  69, 161, 1, 30, 1);
+    Item_AreaCopy(229, 133, 236, 147, 1, 74);           // Max acceleration X
+    Item_AreaCopy(173, 133, 200, 147, 2);
+    Item_AreaCopy( 28, 149,  69, 161, 2, 30, 1);
+    Item_AreaCopy(  1, 150,   7, 160, 2, 74, 2);      // Max acceleration Y
+    Item_AreaCopy(173, 133, 200, 147, 3);
+    Item_AreaCopy( 28, 149,  69, 161, 3, 30, 1);
+    Item_AreaCopy(  9, 150,  16, 160, 3, 74, 2);     // Max acceleration Z
     #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(4));
-      DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(4) + 1);
-      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 71, MBASE(4) + 2); // Max acceleration E
+      Item_AreaCopy(173, 133, 200, 147, 4);
+      Item_AreaCopy( 28, 149,  69, 161, 4, 30, 1);
+      Item_AreaCopy( 18, 150,  25, 160, 4, 74, 2);  // Max acceleration E
     #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_ACCELERATION));
     #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);          // "Acceleration"
+      DWIN_Frame_TitleCopy(144, 16, 46, 11);    // "Acceleration"
     #endif
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(1), F("Max Accel X"));
-      DWIN_Draw_Label(MBASE(2), F("Max Accel Y"));
-      DWIN_Draw_Label(MBASE(3), F("Max Accel Z"));
+      DWIN_Draw_Label(1, F("Max Accel X"));
+      DWIN_Draw_Label(2, F("Max Accel Y"));
+      DWIN_Draw_Label(3, F("Max Accel Z"));
       #if HAS_HOTEND
-        DWIN_Draw_Label(MBASE(4), F("Max Accel E"));
+        DWIN_Draw_Label(4, F("Max Accel E"));
       #endif
     #else
-      draw_max_accel_en(MBASE(1)); say_x(108, MBASE(1));  // "Max Acceleration X"
-      draw_max_accel_en(MBASE(2)); say_y(108, MBASE(2));  // "Max Acceleration Y"
-      draw_max_accel_en(MBASE(3)); say_z(108, MBASE(3));  // "Max Acceleration Z"
+      say_max_accel_en(1); say_x_en(112, 1);    // "Max Acceleration X"
+      say_max_accel_en(2); say_y_en(112, 2);    // "Max Acceleration Y"
+      say_max_accel_en(3); say_z_en(112, 3);    // "Max Acceleration Z"
       #if HAS_HOTEND
-        draw_max_accel_en(MBASE(4)); say_e(108, MBASE(4)); // "Max Acceleration E"
+        say_max_accel_en(4); say_e_en(112, 4);  // "Max Acceleration E"
       #endif
     #endif
   }
 
   Draw_Back_First();
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxAccX + i);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(1), planner.settings.max_acceleration_mm_per_s2[X_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(2), planner.settings.max_acceleration_mm_per_s2[Y_AXIS]);
-  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(3), planner.settings.max_acceleration_mm_per_s2[Z_AXIS]);
+  Draw_Edit_Integer4(1, planner.settings.max_acceleration_mm_per_s2[X_AXIS]);
+  Draw_Edit_Integer4(2, planner.settings.max_acceleration_mm_per_s2[Y_AXIS]);
+  Draw_Edit_Integer4(3, planner.settings.max_acceleration_mm_per_s2[Z_AXIS]);
   #if HAS_HOTEND
-    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(4), planner.settings.max_acceleration_mm_per_s2[E_AXIS]);
+    Draw_Edit_Integer4(4, planner.settings.max_acceleration_mm_per_s2[E_AXIS]);
   #endif
 }
 
@@ -3164,72 +3333,57 @@ void Draw_Max_Accel_Menu() {
     Clear_Main_Window();
 
     if (HMI_IsChinese()) {
-      DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Jerk"
-
-      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(1));
-      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(1) + 1);
-      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(1));
-      DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 83, MBASE(1));        // Max Jerk speed X
-      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(2));
-      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(2) + 1);
-      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(2));
-      DWIN_Frame_AreaCopy(1,   1, 150,   7, 160, LBLX + 83, MBASE(2) + 3);    // Max Jerk speed Y
-      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(3));
-      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(3) + 1);
-      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(3));
-      DWIN_Frame_AreaCopy(1,   9, 150,  16, 160, LBLX + 83, MBASE(3) + 3);    // Max Jerk speed Z
+      DWIN_Frame_TitleCopy(1, 16, 28, 13);            // "Jerk"
+
+      Item_AreaCopy(173, 133, 200, 147, 1);
+      Item_AreaCopy(  1, 180,  28, 192, 1, 30, 1);
+      Item_AreaCopy(202, 133, 228, 147, 1, 56);
+      Item_AreaCopy(229, 133, 236, 147, 1, 86);       // Max Jerk speed X
+      Item_AreaCopy(173, 133, 200, 147, 2);
+      Item_AreaCopy(  1, 180,  28, 192, 2, 30, 1);
+      Item_AreaCopy(202, 133, 228, 147, 2, 56);
+      Item_AreaCopy(  1, 150,   7, 160, 2, 86, 3);    // Max Jerk speed Y
+      Item_AreaCopy(173, 133, 200, 147, 3);
+      Item_AreaCopy(  1, 180,  28, 192, 3, 30, 1);
+      Item_AreaCopy(202, 133, 228, 147, 3, 56);
+      Item_AreaCopy(  9, 150,  16, 160, 3, 86, 3);    // Max Jerk speed Z
       #if HAS_HOTEND
-        DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(4));
-        DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(4) + 1);
-        DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(4));
-        DWIN_Frame_AreaCopy(1,  18, 150,  25, 160, LBLX + 83, MBASE(4) + 3);  // Max Jerk speed E
+        Item_AreaCopy(173, 133, 200, 147, 4);
+        Item_AreaCopy(  1, 180,  28, 192, 4, 30, 1);
+        Item_AreaCopy(202, 133, 228, 147, 4, 56);
+        Item_AreaCopy( 18, 150,  25, 160, 4, 86, 3);  // Max Jerk speed E
       #endif
     }
     else {
       #ifdef USE_STRING_HEADINGS
         Draw_Title(GET_TEXT_F(MSG_JERK));
       #else
-        DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Jerk"
+        DWIN_Frame_TitleCopy(144, 16, 46, 11);        // "Jerk"
       #endif
       #ifdef USE_STRING_TITLES
-        DWIN_Draw_Label(MBASE(1), F("Max Jerk X"));
-        DWIN_Draw_Label(MBASE(2), F("Max Jerk Y"));
-        DWIN_Draw_Label(MBASE(3), F("Max Jerk Z"));
+        DWIN_Draw_Label(1, GET_TEXT_F(MSG_VA_JERK));
+        DWIN_Draw_Label(2, GET_TEXT_F(MSG_VB_JERK));
+        DWIN_Draw_Label(3, GET_TEXT_F(MSG_VC_JERK));
         #if HAS_HOTEND
-          DWIN_Draw_Label(MBASE(4), F("Max Jerk E"));
+          DWIN_Draw_Label(4, GET_TEXT_F(MSG_VE_JERK));
         #endif
       #else
-        draw_max_en(MBASE(1));          // "Max"
-        draw_jerk_en(MBASE(1));         // "Jerk"
-        draw_speed_en(72, MBASE(1));    // "Speed"
-        say_x(115, MBASE(1));           // "X"
-
-        draw_max_en(MBASE(2));          // "Max"
-        draw_jerk_en(MBASE(2));         // "Jerk"
-        draw_speed_en(72, MBASE(2));    // "Speed"
-        say_y(115, MBASE(2));           // "Y"
-
-        draw_max_en(MBASE(3));          // "Max"
-        draw_jerk_en(MBASE(3));         // "Jerk"
-        draw_speed_en(72, MBASE(3));    // "Speed"
-        say_z(115, MBASE(3));           // "Z"
-
+        say_max_jerk_speed_en(1); say_x_en(102, 1);   // Max Jerk speed X
+        say_max_jerk_speed_en(2); say_y_en(102, 2);   // Max Jerk speed Y
+        say_max_jerk_speed_en(3); say_z_en(102, 3);   // Max Jerk speed Z
         #if HAS_HOTEND
-          draw_max_en(MBASE(4));        // "Max"
-          draw_jerk_en(MBASE(4));       // "Jerk"
-          draw_speed_en(72, MBASE(4));  // "Speed"
-          say_e(115, MBASE(4));         // "E"
+          say_max_jerk_speed_en(4); say_e_en(102, 4); // Max Jerk speed E
         #endif
       #endif
     }
 
     Draw_Back_First();
     LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
     #if HAS_HOTEND
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
     #endif
   }
 #endif
@@ -3238,53 +3392,53 @@ void Draw_Steps_Menu() {
   Clear_Main_Window();
 
   if (HMI_IsChinese()) {
-    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Steps per mm"
-
-    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(1));
-    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 44, MBASE(1)); // Transmission Ratio X
-    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(2));
-    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 44, MBASE(2) + 3); // Transmission Ratio Y
-    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(3));
-    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 44, MBASE(3) + 3); // Transmission Ratio Z
+    DWIN_Frame_TitleCopy(1, 16, 28, 13);            // "Steps per mm"
+
+    Item_AreaCopy(153, 148, 194, 161, 1);
+    Item_AreaCopy(229, 133, 236, 147, 1, 44);       // Transmission Ratio X
+    Item_AreaCopy(153, 148, 194, 161, 2);
+    Item_AreaCopy(  1, 150,   7, 160, 2, 44, 3);    // Transmission Ratio Y
+    Item_AreaCopy(153, 148, 194, 161, 3);
+    Item_AreaCopy(  9, 150,  16, 160, 3, 44, 3);    // Transmission Ratio Z
     #if HAS_HOTEND
-      DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(4));
-      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 44, MBASE(4) + 3); // Transmission Ratio E
+      Item_AreaCopy(153, 148, 194, 161, 4);
+      Item_AreaCopy( 18, 150,  25, 160, 4, 44, 3);  // Transmission Ratio E
     #endif
   }
   else {
     #ifdef USE_STRING_HEADINGS
       Draw_Title(GET_TEXT_F(MSG_STEPS_PER_MM));
     #else
-      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Steps per mm"
+      DWIN_Frame_TitleCopy(144, 16, 46, 11);        // "Steps per mm"
     #endif
     #ifdef USE_STRING_TITLES
-      DWIN_Draw_Label(MBASE(1), F("Steps/mm X"));
-      DWIN_Draw_Label(MBASE(2), F("Steps/mm Y"));
-      DWIN_Draw_Label(MBASE(3), F("Steps/mm Z"));
+      DWIN_Draw_Label(1, GET_TEXT_F(MSG_A_STEPS));
+      DWIN_Draw_Label(2, GET_TEXT_F(MSG_B_STEPS));
+      DWIN_Draw_Label(3, GET_TEXT_F(MSG_C_STEPS));
       #if HAS_HOTEND
-        DWIN_Draw_Label(MBASE(4), F("Steps/mm E"));
+        DWIN_Draw_Label(4, GET_TEXT_F(MSG_E_STEPS));
       #endif
     #else
-      draw_steps_per_mm(MBASE(1)); say_x(103, MBASE(1)); // "Steps-per-mm X"
-      draw_steps_per_mm(MBASE(2)); say_y(103, MBASE(2)); // "Y"
-      draw_steps_per_mm(MBASE(3)); say_z(103, MBASE(3)); // "Z"
+      say_steps_per_mm_en(1); say_x_en(101, 1);     // "Steps-per-mm X"
+      say_steps_per_mm_en(2); say_y_en(101, 2);     // "Y"
+      say_steps_per_mm_en(3); say_z_en(101, 3);     // "Z"
       #if HAS_HOTEND
-        draw_steps_per_mm(MBASE(4)); say_e(103, MBASE(4)); // "E"
+        say_steps_per_mm_en(4); say_e_en(101, 4);   // "E"
       #endif
     #endif
   }
 
   Draw_Back_First();
   LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_StepX + i);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(1), planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(2), planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
-  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(3), planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(1), planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(2), planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(3), planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
   #if HAS_HOTEND
-    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(4), planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, EBASE(4), planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
   #endif
 }
 
-/* Motion */
+// Motion
 void HMI_Motion() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -3332,7 +3486,7 @@ void HMI_Motion() {
   DWIN_UpdateLCD();
 }
 
-/* Advanced Settings */
+// Advanced Settings
 void HMI_AdvSet() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -3418,7 +3572,7 @@ void HMI_AdvSet() {
       #if ENABLED(POWER_LOSS_RECOVERY)
         case ADVSET_CASE_PWRLOSSR:  // Power-loss recovery
           recovery.enable(!recovery.enabled);
-          Draw_Chkb_Line(ADVSET_CASE_PWRLOSSR + MROWS - index_advset, recovery.enabled);
+          Draw_Checkbox_Line(ADVSET_CASE_PWRLOSSR + MROWS - index_advset, recovery.enabled);
           break;
       #endif
       default: break;
@@ -3429,7 +3583,7 @@ void HMI_AdvSet() {
 
 #if HAS_HOME_OFFSET
 
-  /* Home Offset */
+  // Home Offset
   void HMI_HomeOff() {
     ENCODER_DiffState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -3446,21 +3600,21 @@ void HMI_AdvSet() {
         case 0: // Back
           checkkey = AdvSet;
           select_advset.set(ADVSET_CASE_HOMEOFF);
-          Draw_AdvSet_Menu();
+          Draw_AdvancedSettings_Menu();
           break;
         case 1: // Home Offset X
           checkkey = HomeOffX;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Home_OffX_scaled);
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Home_OffX_scaled);
           EncoderRate.enabled = true;
           break;
         case 2: // Home Offset Y
           checkkey = HomeOffY;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Home_OffY_scaled);
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Home_OffY_scaled);
           EncoderRate.enabled = true;
           break;
         case 3: // Home Offset Z
           checkkey = HomeOffZ;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Home_OffZ_scaled);
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(3), HMI_ValueStruct.Home_OffZ_scaled);
           EncoderRate.enabled = true;
           break;
         default: break;
@@ -3471,17 +3625,17 @@ void HMI_AdvSet() {
 
   void HMI_HomeOffN(const AxisEnum axis, float &posScaled, const_float_t lo, const_float_t hi) {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      if (Apply_Encoder(encoder_diffState, posScaled)) {
-        checkkey = HomeOff;
-        EncoderRate.enabled = false;
-        set_home_offset(axis, posScaled / 10);
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(select_item.now), posScaled);
-        return;
-      }
-      LIMIT(posScaled, lo, hi);
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 216, MBASE(select_item.now), posScaled);
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+    if (Apply_Encoder(encoder_diffState, posScaled)) {
+      checkkey = HomeOff;
+      EncoderRate.enabled = false;
+      set_home_offset(axis, posScaled / 10);
+      DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(select_item.now), posScaled);
+      return;
     }
+    LIMIT(posScaled, lo, hi);
+    DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(select_item.now), posScaled);
   }
 
   void HMI_HomeOffX() { HMI_HomeOffN(X_AXIS, HMI_ValueStruct.Home_OffX_scaled, -500, 500); }
@@ -3491,7 +3645,7 @@ void HMI_AdvSet() {
 #endif // HAS_HOME_OFFSET
 
 #if HAS_ONESTEP_LEVELING
-  /*Probe Offset */
+  // Probe Offset
   void HMI_ProbeOff() {
     ENCODER_DiffState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -3508,16 +3662,16 @@ void HMI_AdvSet() {
         case 0: // Back
           checkkey = AdvSet;
           select_advset.set(ADVSET_CASE_PROBEOFF);
-          Draw_AdvSet_Menu();
+          Draw_AdvancedSettings_Menu();
           break;
         case 1: // Probe Offset X
           checkkey = ProbeOffX;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Probe_OffX_scaled);
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(1), HMI_ValueStruct.Probe_OffX_scaled);
           EncoderRate.enabled = true;
           break;
         case 2: // Probe Offset X
           checkkey = ProbeOffY;
-          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Probe_OffY_scaled);
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(2), HMI_ValueStruct.Probe_OffY_scaled);
           EncoderRate.enabled = true;
           break;
       }
@@ -3527,17 +3681,17 @@ void HMI_AdvSet() {
 
   void HMI_ProbeOffN(float &posScaled, float &offset_ref) {
     ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
-    if (encoder_diffState != ENCODER_DIFF_NO) {
-      if (Apply_Encoder(encoder_diffState, posScaled)) {
-        checkkey = ProbeOff;
-        EncoderRate.enabled = false;
-        offset_ref = posScaled / 10;
-        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(select_item.now), posScaled);
-        return;
-      }
-      LIMIT(posScaled, -500, 500);
-      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 216, MBASE(select_item.now), posScaled);
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+    if (Apply_Encoder(encoder_diffState, posScaled)) {
+      checkkey = ProbeOff;
+      EncoderRate.enabled = false;
+      offset_ref = posScaled / 10;
+      DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 220, EBASE(select_item.now), posScaled);
+      return;
     }
+    LIMIT(posScaled, -500, 500);
+    DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 220, EBASE(select_item.now), posScaled);
   }
 
   void HMI_ProbeOffX() { HMI_ProbeOffN(HMI_ValueStruct.Probe_OffX_scaled, probe.offset.x); }
@@ -3545,7 +3699,7 @@ void HMI_AdvSet() {
 
 #endif // HAS_ONESTEP_LEVELING
 
-/* Info */
+// Info
 void HMI_Info() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -3562,7 +3716,7 @@ void HMI_Info() {
   DWIN_UpdateLCD();
 }
 
-/* Tune */
+// Tune
 void HMI_Tune() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -3574,9 +3728,8 @@ void HMI_Tune() {
         index_tune = select_tune.now;
         Scroll_Menu(DWIN_SCROLL_UP);
       }
-      else {
+      else
         Move_Highlight(1, select_tune.now + MROWS - index_tune);
-      }
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_CCW) {
@@ -3586,9 +3739,8 @@ void HMI_Tune() {
         Scroll_Menu(DWIN_SCROLL_DOWN);
         if (index_tune == MROWS) Draw_Back_First();
       }
-      else {
+      else
         Move_Highlight(-1, select_tune.now + MROWS - index_tune);
-      }
     }
   }
   else if (encoder_diffState == ENCODER_DIFF_ENTER) {
@@ -3601,14 +3753,14 @@ void HMI_Tune() {
       case TUNE_CASE_SPEED: // Print speed
         checkkey = PrintSpeed;
         HMI_ValueStruct.print_speed = feedrate_percentage;
-        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_SPEED + MROWS - index_tune), HMI_ValueStruct.print_speed);
+        Draw_Edit_Integer3(TUNE_CASE_SPEED + MROWS - index_tune, HMI_ValueStruct.print_speed, true);
         EncoderRate.enabled = true;
         break;
       #if HAS_HOTEND
         case TUNE_CASE_TEMP: // Nozzle temp
           checkkey = ETemp;
           HMI_ValueStruct.E_Temp = thermalManager.degTargetHotend(0);
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), HMI_ValueStruct.E_Temp);
+          Draw_Edit_Integer3(TUNE_CASE_TEMP + MROWS - index_tune, HMI_ValueStruct.E_Temp, true);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -3616,7 +3768,7 @@ void HMI_Tune() {
         case TUNE_CASE_BED: // Bed temp
           checkkey = BedTemp;
           HMI_ValueStruct.Bed_Temp = thermalManager.degTargetBed();
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), HMI_ValueStruct.Bed_Temp);
+          Draw_Edit_Integer3(TUNE_CASE_BED + MROWS - index_tune, HMI_ValueStruct.Bed_Temp, true);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -3624,7 +3776,7 @@ void HMI_Tune() {
         case TUNE_CASE_FAN: // Fan speed
           checkkey = FanSpeed;
           HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
-          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), HMI_ValueStruct.Fan_speed);
+          Draw_Edit_Integer3(TUNE_CASE_FAN + MROWS - index_tune, HMI_ValueStruct.Fan_speed, true);
           EncoderRate.enabled = true;
           break;
       #endif
@@ -3633,7 +3785,7 @@ void HMI_Tune() {
           #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
             checkkey = Homeoffset;
             HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
-            DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(TUNE_CASE_ZOFF + MROWS - index_tune), HMI_ValueStruct.offset_value);
+            DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, EBASE(TUNE_CASE_ZOFF + MROWS - index_tune), HMI_ValueStruct.offset_value);
             EncoderRate.enabled = true;
           #else
             // Apply workspace offset, making the current position 0,0,0
@@ -3650,7 +3802,7 @@ void HMI_Tune() {
 
 #if HAS_PREHEAT
 
-  /* PLA Preheat */
+  // PLA Preheat
   void HMI_PLAPreheatSetting() {
     ENCODER_DiffState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -3674,7 +3826,7 @@ void HMI_Tune() {
           case PREHEAT_CASE_TEMP: // Nozzle temperature
             checkkey = ETemp;
             HMI_ValueStruct.E_Temp = ui.material_preset[0].hotend_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_TEMP), ui.material_preset[0].hotend_temp);
+            Draw_Edit_Integer3(PREHEAT_CASE_TEMP, ui.material_preset[0].hotend_temp, true);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3682,7 +3834,7 @@ void HMI_Tune() {
           case PREHEAT_CASE_BED: // Bed temperature
             checkkey = BedTemp;
             HMI_ValueStruct.Bed_Temp = ui.material_preset[0].bed_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_BED), ui.material_preset[0].bed_temp);
+            Draw_Edit_Integer3(PREHEAT_CASE_BED, ui.material_preset[0].bed_temp, true);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3690,7 +3842,7 @@ void HMI_Tune() {
           case PREHEAT_CASE_FAN: // Fan speed
             checkkey = FanSpeed;
             HMI_ValueStruct.Fan_speed = ui.material_preset[0].fan_speed;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_FAN), ui.material_preset[0].fan_speed);
+            Draw_Edit_Integer3(PREHEAT_CASE_FAN, ui.material_preset[0].fan_speed, true);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3706,7 +3858,7 @@ void HMI_Tune() {
     DWIN_UpdateLCD();
   }
 
-  /* ABS Preheat */
+  // ABS Preheat
   void HMI_ABSPreheatSetting() {
     ENCODER_DiffState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -3730,7 +3882,7 @@ void HMI_Tune() {
           case PREHEAT_CASE_TEMP: // Set nozzle temperature
             checkkey = ETemp;
             HMI_ValueStruct.E_Temp = ui.material_preset[1].hotend_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_TEMP), ui.material_preset[1].hotend_temp);
+            Draw_Edit_Integer3(PREHEAT_CASE_TEMP, ui.material_preset[1].hotend_temp, true);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3738,7 +3890,7 @@ void HMI_Tune() {
           case PREHEAT_CASE_BED: // Set bed temperature
             checkkey = BedTemp;
             HMI_ValueStruct.Bed_Temp = ui.material_preset[1].bed_temp;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_BED), ui.material_preset[1].bed_temp);
+            Draw_Edit_Integer3(PREHEAT_CASE_BED, ui.material_preset[1].bed_temp, true);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3746,7 +3898,7 @@ void HMI_Tune() {
           case PREHEAT_CASE_FAN: // Set fan speed
             checkkey = FanSpeed;
             HMI_ValueStruct.Fan_speed = ui.material_preset[1].fan_speed;
-            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_FAN), ui.material_preset[1].fan_speed);
+            Draw_Edit_Integer3(PREHEAT_CASE_FAN, ui.material_preset[1].fan_speed, true);
             EncoderRate.enabled = true;
             break;
         #endif
@@ -3764,7 +3916,7 @@ void HMI_Tune() {
 
 #endif
 
-/* Max Speed */
+// Max Speed
 void HMI_MaxSpeed() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -3781,7 +3933,7 @@ void HMI_MaxSpeed() {
       checkkey = MaxSpeed_value;
       HMI_flag.feedspeed_axis = AxisEnum(select_speed.now - 1);
       HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[HMI_flag.feedspeed_axis];
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+      Draw_Edit_Integer4(select_speed.now, HMI_ValueStruct.Max_Feedspeed, true);
       EncoderRate.enabled = true;
     }
     else { // Back
@@ -3793,7 +3945,7 @@ void HMI_MaxSpeed() {
   DWIN_UpdateLCD();
 }
 
-/* Max Acceleration */
+// Max Acceleration
 void HMI_MaxAcceleration() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -3810,7 +3962,7 @@ void HMI_MaxAcceleration() {
       checkkey = MaxAcceleration_value;
       HMI_flag.acc_axis = AxisEnum(select_acc.now - 1);
       HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[HMI_flag.acc_axis];
-      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+      Draw_Edit_Integer4(select_acc.now, HMI_ValueStruct.Max_Acceleration, true);
       EncoderRate.enabled = true;
     }
     else { // Back
@@ -3823,7 +3975,7 @@ void HMI_MaxAcceleration() {
 }
 
 #if HAS_CLASSIC_JERK
-  /* Max Jerk */
+  // Max Jerk
   void HMI_MaxJerk() {
     ENCODER_DiffState encoder_diffState = get_encoder_state();
     if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -3840,7 +3992,7 @@ void HMI_MaxAcceleration() {
         checkkey = MaxJerk_value;
         HMI_flag.jerk_axis = AxisEnum(select_jerk.now - 1);
         HMI_ValueStruct.Max_Jerk_scaled = planner.max_jerk[HMI_flag.jerk_axis] * MINUNITMULT;
-        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, EBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
         EncoderRate.enabled = true;
       }
       else { // Back
@@ -3853,7 +4005,7 @@ void HMI_MaxAcceleration() {
   }
 #endif // HAS_CLASSIC_JERK
 
-/* Step */
+// Step
 void HMI_Step() {
   ENCODER_DiffState encoder_diffState = get_encoder_state();
   if (encoder_diffState == ENCODER_DIFF_NO) return;
@@ -3870,7 +4022,7 @@ void HMI_Step() {
       checkkey = Step_value;
       HMI_flag.step_axis = AxisEnum(select_step.now - 1);
       HMI_ValueStruct.Max_Step_scaled = planner.settings.axis_steps_per_mm[HMI_flag.step_axis] * MINUNITMULT;
-      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, EBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
       EncoderRate.enabled = true;
     }
     else { // Back
@@ -3934,7 +4086,7 @@ void EachMomentUpdate() {
     else if (HMI_flag.pause_flag != printingIsPaused()) {
       // print status update
       HMI_flag.pause_flag = printingIsPaused();
-      if (HMI_flag.pause_flag) ICON_Continue(); else ICON_Pause();
+      ICON_ResumeOrPause();
     }
   }
 
@@ -4005,9 +4157,6 @@ void EachMomentUpdate() {
       Popup_Window_Resume();
       update_selection(true);
 
-      // TODO: Get the name of the current file from someplace
-      //
-      //(void)recovery.interrupted_file_exists();
       char * const name = card.longest_filename();
       const int8_t npos = _MAX(0U, DWIN_WIDTH - strlen(name) * (MENU_CHR_W)) / 2;
       DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, npos, 252, name);
@@ -4137,10 +4286,4 @@ void DWIN_StatusChanged_P(PGM_P const pstr) {
   DWIN_StatusChanged(str);
 }
 
-// GUI extension
-void DWIN_Draw_Checkbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool mode=false) {
-  DWIN_Draw_String(true, font8x16, Select_Color, bcolor, x + 4, y, F(mode ? "x" : " "));
-  DWIN_Draw_Rectangle(0, color, x + 2, y + 2, x + 17, y + 17);
-}
-
 #endif // DWIN_CREALITY_LCD

commit 9bb5b10c0c9cf5a61d2bfb9dfdb6cfe210b6002b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jul 31 05:32:13 2021 -0500

    üöö Relocate and adjust DWIN E3V2 (#22471)

diff --git a/Marlin/src/lcd/e3v2/creality/dwin.cpp b/Marlin/src/lcd/e3v2/creality/dwin.cpp
new file mode 100644
index 0000000000..05da343f9e
--- /dev/null
+++ b/Marlin/src/lcd/e3v2/creality/dwin.cpp
@@ -0,0 +1,4146 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * DWIN by Creality3D
+ */
+
+#include "../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(DWIN_CREALITY_LCD)
+
+#include "dwin.h"
+
+#if ANY(AUTO_BED_LEVELING_BILINEAR, AUTO_BED_LEVELING_LINEAR, AUTO_BED_LEVELING_3POINT) && DISABLED(PROBE_MANUALLY)
+  #define HAS_ONESTEP_LEVELING 1
+#endif
+
+#if ANY(BABYSTEPPING, HAS_BED_PROBE, HAS_WORKSPACE_OFFSET)
+  #define HAS_ZOFFSET_ITEM 1
+#endif
+
+#if !HAS_BED_PROBE && ENABLED(BABYSTEPPING)
+  #define JUST_BABYSTEP 1
+#endif
+
+#include "../../fontutils.h"
+#include "../../marlinui.h"
+
+#include "../../../sd/cardreader.h"
+
+#include "../../../MarlinCore.h"
+#include "../../../core/serial.h"
+#include "../../../core/macros.h"
+#include "../../../gcode/queue.h"
+
+#include "../../../module/temperature.h"
+#include "../../../module/printcounter.h"
+#include "../../../module/motion.h"
+#include "../../../module/planner.h"
+
+#if ENABLED(EEPROM_SETTINGS)
+  #include "../../../module/settings.h"
+#endif
+
+#if ENABLED(HOST_ACTION_COMMANDS)
+  #include "../../../feature/host_actions.h"
+#endif
+
+#if HAS_ONESTEP_LEVELING
+  #include "../../../feature/bedlevel/bedlevel.h"
+#endif
+
+#if HAS_BED_PROBE
+  #include "../../../module/probe.h"
+#endif
+
+#if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
+  #include "../../../feature/babystep.h"
+#endif
+
+#if ENABLED(POWER_LOSS_RECOVERY)
+  #include "../../../feature/powerloss.h"
+#endif
+
+#include <WString.h>
+#include <stdio.h>
+#include <string.h>
+
+#ifndef MACHINE_SIZE
+  #define MACHINE_SIZE STRINGIFY(X_BED_SIZE) "x" STRINGIFY(Y_BED_SIZE) "x" STRINGIFY(Z_MAX_POS)
+#endif
+#ifndef CORP_WEBSITE
+  #define CORP_WEBSITE WEBSITE_URL
+#endif
+
+#define PAUSE_HEAT
+
+#define USE_STRING_HEADINGS
+//#define USE_STRING_TITLES
+
+#define MENU_CHAR_LIMIT  24
+#define STATUS_Y        360
+
+// Print speed limit
+#define MIN_PRINT_SPEED  10
+#define MAX_PRINT_SPEED 999
+
+// Feedspeed limit (max feedspeed = DEFAULT_MAX_FEEDRATE * 2)
+#define MIN_MAXFEEDSPEED      1
+#define MIN_MAXACCELERATION   1
+#define MIN_MAXJERK           0.1
+#define MIN_STEP              1
+
+#define FEEDRATE_E      (60)
+
+// Minimum unit (0.1) : multiple (10)
+#define UNITFDIGITS 1
+#define MINUNITMULT pow(10, UNITFDIGITS)
+
+#define ENCODER_WAIT_MS                  20
+#define DWIN_VAR_UPDATE_INTERVAL         1024
+#define DWIN_SCROLL_UPDATE_INTERVAL      SEC_TO_MS(2)
+#define DWIN_REMAIN_TIME_UPDATE_INTERVAL SEC_TO_MS(20)
+
+constexpr uint16_t TROWS = 6, MROWS = TROWS - 1,        // Total rows, and other-than-Back
+                   TITLE_HEIGHT = 30,                   // Title bar height
+                   MLINE = 53,                          // Menu line height
+                   LBLX = 60,                           // Menu item label X
+                   MENU_CHR_W = 8, STAT_CHR_W = 10;
+
+#define MBASE(L) (49 + MLINE * (L))
+
+#define BABY_Z_VAR TERN(HAS_BED_PROBE, probe.offset.z, dwin_zoffset)
+
+#define DWIN_BOTTOM (DWIN_HEIGHT-1)
+#define DWIN_RIGHT (DWIN_WIDTH-1)
+
+/* Value Init */
+HMI_value_t HMI_ValueStruct;
+HMI_Flag_t HMI_flag{0};
+
+millis_t dwin_heat_time = 0;
+
+uint8_t checkkey = 0;
+
+typedef struct {
+  uint8_t now, last;
+  void set(uint8_t v) { now = last = v; }
+  void reset() { set(0); }
+  bool changed() { bool c = (now != last); if (c) last = now; return c; }
+  bool dec() { if (now) now--; return changed(); }
+  bool inc(uint8_t v) { if (now < (v - 1)) now++; else now = (v - 1); return changed(); }
+} select_t;
+
+select_t select_page{0}, select_file{0}, select_print{0}, select_prepare{0}
+         , select_control{0}, select_axis{0}, select_temp{0}, select_motion{0}, select_tune{0}
+         , select_advset{0}, select_PLA{0}, select_ABS{0}
+         , select_speed{0}
+         , select_acc{0}
+         , select_jerk{0}
+         , select_step{0}
+         , select_item{0}
+         ;
+
+uint8_t index_file     = MROWS,
+        index_prepare  = MROWS,
+        index_control  = MROWS,
+        index_leveling = MROWS,
+        index_tune     = MROWS,
+        index_advset   = MROWS;
+
+bool dwin_abort_flag = false; // Flag to reset feedrate, return to Home
+
+constexpr float default_max_feedrate[]        = DEFAULT_MAX_FEEDRATE;
+constexpr float default_max_acceleration[]    = DEFAULT_MAX_ACCELERATION;
+
+#if HAS_CLASSIC_JERK
+  constexpr float default_max_jerk[]          = { DEFAULT_XJERK, DEFAULT_YJERK, DEFAULT_ZJERK, DEFAULT_EJERK };
+#endif
+
+static uint8_t _card_percent = 0;
+static uint16_t _remain_time = 0;
+
+#if ENABLED(PAUSE_HEAT)
+  #if HAS_HOTEND
+    uint16_t resume_hotend_temp = 0;
+  #endif
+  #if HAS_HEATED_BED
+    uint16_t resume_bed_temp = 0;
+  #endif
+#endif
+
+#if HAS_ZOFFSET_ITEM
+  float dwin_zoffset = 0, last_zoffset = 0;
+#endif
+
+#define DWIN_LANGUAGE_EEPROM_ADDRESS 0x01   // Between 0x01 and 0x63 (EEPROM_OFFSET-1)
+                                            // BL24CXX::check() uses 0x00
+
+inline bool HMI_IsChinese() { return HMI_flag.language == DWIN_CHINESE; }
+
+void HMI_SetLanguageCache() {
+  DWIN_JPG_CacheTo1(HMI_IsChinese() ? Language_Chinese : Language_English);
+}
+
+void HMI_SetLanguage() {
+  #if BOTH(EEPROM_SETTINGS, IIC_BL24CXX_EEPROM)
+    BL24CXX::read(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language, sizeof(HMI_flag.language));
+  #endif
+  HMI_SetLanguageCache();
+}
+
+void HMI_ToggleLanguage() {
+  HMI_flag.language = HMI_IsChinese() ? DWIN_ENGLISH : DWIN_CHINESE;
+  HMI_SetLanguageCache();
+  #if BOTH(EEPROM_SETTINGS, IIC_BL24CXX_EEPROM)
+    BL24CXX::write(DWIN_LANGUAGE_EEPROM_ADDRESS, (uint8_t*)&HMI_flag.language, sizeof(HMI_flag.language));
+  #endif
+}
+
+void DWIN_Draw_Signed_Float(uint8_t size, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, long value) {
+  if (value < 0) {
+    DWIN_Draw_String(true, size, Color_White, bColor, x - 6, y, F("-"));
+    DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, -value);
+  }
+  else {
+    DWIN_Draw_String(true, size, Color_White, bColor, x - 6, y, F(" "));
+    DWIN_Draw_FloatValue(true, true, 0, size, Color_White, bColor, iNum, fNum, x, y, value);
+  }
+}
+
+void ICON_Print() {
+  if (select_page.now == 0) {
+    DWIN_ICON_Show(ICON, ICON_Print_1, 17, 130);
+    DWIN_Draw_Rectangle(0, Color_White, 17, 130, 126, 229);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 58, 201);
+    else
+      DWIN_Frame_AreaCopy(1, 1, 451, 31, 463, 57, 201);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Print_0, 17, 130);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 1, 405, 28, 420, 58, 201);
+    else
+      DWIN_Frame_AreaCopy(1, 1, 423, 31, 435, 57, 201);
+  }
+}
+
+void ICON_Prepare() {
+  if (select_page.now == 1) {
+    DWIN_ICON_Show(ICON, ICON_Prepare_1, 145, 130);
+    DWIN_Draw_Rectangle(0, Color_White, 145, 130, 254, 229);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 31, 447, 58, 460, 186, 201);
+    else
+      DWIN_Frame_AreaCopy(1, 33, 451, 82, 466, 175, 201);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Prepare_0, 145, 130);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 31, 405, 58, 420, 186, 201);
+    else
+      DWIN_Frame_AreaCopy(1, 33, 423, 82, 438, 175, 201);
+  }
+}
+
+void ICON_Control() {
+  if (select_page.now == 2) {
+    DWIN_ICON_Show(ICON, ICON_Control_1, 17, 246);
+    DWIN_Draw_Rectangle(0, Color_White, 17, 246, 126, 345);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 61, 447, 88, 460, 58, 318);
+    else
+      DWIN_Frame_AreaCopy(1, 85, 451, 132, 463, 48, 318);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Control_0, 17, 246);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 61, 405, 88, 420, 58, 318);
+    else
+      DWIN_Frame_AreaCopy(1, 85, 423, 132, 434, 48, 318);
+  }
+}
+
+void ICON_StartInfo(bool show) {
+  if (show) {
+    DWIN_ICON_Show(ICON, ICON_Info_1, 145, 246);
+    DWIN_Draw_Rectangle(0, Color_White, 145, 246, 254, 345);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 91, 447, 118, 460, 186, 318);
+    else
+      DWIN_Frame_AreaCopy(1, 132, 451, 159, 466, 186, 318);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Info_0, 145, 246);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 91, 405, 118, 420, 186, 318);
+    else
+      DWIN_Frame_AreaCopy(1, 132, 423, 159, 435, 186, 318);
+  }
+}
+
+void ICON_Leveling(bool show) {
+  if (show) {
+    DWIN_ICON_Show(ICON, ICON_Leveling_1, 145, 246);
+    DWIN_Draw_Rectangle(0, Color_White, 145, 246, 254, 345);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 211, 447, 238, 460, 186, 318);
+    else
+      DWIN_Frame_AreaCopy(1, 84, 437, 120,  449, 182, 318);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Leveling_0, 145, 246);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 211, 405, 238, 420, 186, 318);
+    else
+      DWIN_Frame_AreaCopy(1, 84, 465, 120, 478, 182, 318);
+  }
+}
+
+void ICON_Tune() {
+  if (select_print.now == 0) {
+    DWIN_ICON_Show(ICON, ICON_Setup_1, 8, 252);
+    DWIN_Draw_Rectangle(0, Color_White, 8, 252, 87, 351);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 121, 447, 148, 458, 34, 325);
+    else
+      DWIN_Frame_AreaCopy(1,   0, 466,  34, 476, 31, 325);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Setup_0, 8, 252);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 121, 405, 148, 420, 34, 325);
+    else
+      DWIN_Frame_AreaCopy(1,   0, 438,  32, 448, 31, 325);
+  }
+}
+
+void ICON_Pause() {
+  if (select_print.now == 1) {
+    DWIN_ICON_Show(ICON, ICON_Pause_1, 96, 252);
+    DWIN_Draw_Rectangle(0, Color_White, 96, 252, 175, 351);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 181, 447, 208, 459, 124, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 177, 451, 216, 462, 116, 325);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Pause_0, 96, 252);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 181, 405, 208, 420, 124, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 177, 423, 215, 433, 116, 325);
+  }
+}
+
+void ICON_Continue() {
+  if (select_print.now == 1) {
+    DWIN_ICON_Show(ICON, ICON_Continue_1, 96, 252);
+    DWIN_Draw_Rectangle(0, Color_White, 96, 252, 175, 351);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 1, 447, 28, 460, 124, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 1, 452, 32, 464, 121, 325);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Continue_0, 96, 252);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 1, 405, 28, 420, 124, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 1, 424, 31, 434, 121, 325);
+  }
+}
+
+void ICON_Stop() {
+  if (select_print.now == 2) {
+    DWIN_ICON_Show(ICON, ICON_Stop_1, 184, 252);
+    DWIN_Draw_Rectangle(0, Color_White, 184, 252, 263, 351);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 151, 447, 178, 459, 210, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 218, 452, 249, 466, 209, 325);
+  }
+  else {
+    DWIN_ICON_Show(ICON, ICON_Stop_0, 184, 252);
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1, 151, 405, 178, 420, 210, 325);
+    else
+      DWIN_Frame_AreaCopy(1, 218, 423, 247, 436, 209, 325);
+  }
+}
+
+inline void Clear_Title_Bar() {
+  DWIN_Draw_Box(1, Color_Bg_Blue, 0, 0, DWIN_WIDTH, TITLE_HEIGHT);
+}
+
+void Draw_Title(const char * const title) {
+  DWIN_Draw_String(false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, (char*)title);
+}
+
+void Draw_Title(const __FlashStringHelper * title) {
+  DWIN_Draw_String(false, DWIN_FONT_HEAD, Color_White, Color_Bg_Blue, 14, 4, (char*)title);
+}
+
+inline void Clear_Menu_Area() {
+  DWIN_Draw_Box(1, Color_Bg_Black, 0, TITLE_HEIGHT, DWIN_WIDTH, STATUS_Y - TITLE_HEIGHT);
+}
+
+void Clear_Main_Window() {
+  Clear_Title_Bar();
+  Clear_Menu_Area();
+}
+
+void Clear_Popup_Area() {
+  Clear_Title_Bar();
+  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 31, DWIN_WIDTH, DWIN_HEIGHT);
+}
+
+void Draw_Popup_Bkgd_105() {
+  DWIN_Draw_Rectangle(1, Color_Bg_Window, 14, 105, 258, 374);
+}
+
+void Draw_More_Icon(const uint8_t line) {
+  DWIN_ICON_Show(ICON, ICON_More, 226, MBASE(line) - 3);
+}
+
+void Draw_Menu_Cursor(const uint8_t line) {
+  // DWIN_ICON_Show(ICON,ICON_Rectangle, 0, MBASE(line) - 18);
+  DWIN_Draw_Rectangle(1, Rectangle_Color, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
+}
+
+void Erase_Menu_Cursor(const uint8_t line) {
+  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, MBASE(line) - 18, 14, MBASE(line + 1) - 20);
+}
+
+void Move_Highlight(const int16_t from, const uint16_t newline) {
+  Erase_Menu_Cursor(newline - from);
+  Draw_Menu_Cursor(newline);
+}
+
+void Add_Menu_Line() {
+  Move_Highlight(1, MROWS);
+  DWIN_Draw_Line(Line_Color, 16, MBASE(MROWS + 1) - 20, 256, MBASE(MROWS + 1) - 19);
+}
+
+void Scroll_Menu(const uint8_t dir) {
+  DWIN_Frame_AreaMove(1, dir, MLINE, Color_Bg_Black, 0, 31, DWIN_WIDTH, 349);
+  switch (dir) {
+    case DWIN_SCROLL_DOWN: Move_Highlight(-1, 0); break;
+    case DWIN_SCROLL_UP:   Add_Menu_Line(); break;
+  }
+}
+
+inline uint16_t nr_sd_menu_items() {
+  return card.get_num_Files() + !card.flag.workDirIsRoot;
+}
+
+void Draw_Menu_Icon(const uint8_t line, const uint8_t icon) {
+  DWIN_ICON_Show(ICON, icon, 26, MBASE(line) - 3);
+}
+
+void Erase_Menu_Text(const uint8_t line) {
+  DWIN_Draw_Rectangle(1, Color_Bg_Black, LBLX, MBASE(line) - 14, 271, MBASE(line) + 28);
+}
+
+void Draw_Menu_Item(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
+  if (label) DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, LBLX, MBASE(line) - 1, (char*)label);
+  if (icon) Draw_Menu_Icon(line, icon);
+  if (more) Draw_More_Icon(line);
+}
+
+void Draw_Menu_Line(const uint8_t line, const uint8_t icon=0, const char * const label=nullptr, bool more=false) {
+  Draw_Menu_Item(line, icon, label, more);
+  DWIN_Draw_Line(Line_Color, 16, MBASE(line) + 33, 256, MBASE(line) + 34);
+}
+
+void Draw_Chkb_Line(const uint8_t line, const bool mode) {
+  DWIN_Draw_Checkbox(Color_White, Color_Bg_Black, 225, MBASE(line) - 1, mode);
+}
+
+// The "Back" label is always on the first line
+void Draw_Back_Label() {
+  if (HMI_IsChinese())
+    DWIN_Frame_AreaCopy(1, 129, 72, 156, 84, LBLX, MBASE(0));
+  else
+    DWIN_Frame_AreaCopy(1, 226, 179, 256, 189, LBLX, MBASE(0));
+}
+
+// Draw "Back" line at the top
+void Draw_Back_First(const bool is_sel=true) {
+  Draw_Menu_Line(0, ICON_Back);
+  Draw_Back_Label();
+  if (is_sel) Draw_Menu_Cursor(0);
+}
+
+template <typename T>
+inline bool Apply_Encoder(const ENCODER_DiffState &encoder_diffState, T &valref) {
+  if (encoder_diffState == ENCODER_DIFF_CW)
+    valref += EncoderRate.encoderMoveValue;
+  else if (encoder_diffState == ENCODER_DIFF_CCW)
+    valref -= EncoderRate.encoderMoveValue;
+  return encoder_diffState == ENCODER_DIFF_ENTER;
+}
+
+//
+// Draw Menus
+//
+
+#define MOTION_CASE_RATE   1
+#define MOTION_CASE_ACCEL  2
+#define MOTION_CASE_JERK   (MOTION_CASE_ACCEL + ENABLED(HAS_CLASSIC_JERK))
+#define MOTION_CASE_STEPS  (MOTION_CASE_JERK + 1)
+#define MOTION_CASE_TOTAL  MOTION_CASE_STEPS
+
+#define PREPARE_CASE_MOVE  1
+#define PREPARE_CASE_DISA  2
+#define PREPARE_CASE_HOME  3
+#define PREPARE_CASE_ZOFF (PREPARE_CASE_HOME + ENABLED(HAS_ZOFFSET_ITEM))
+#define PREPARE_CASE_PLA  (PREPARE_CASE_ZOFF + ENABLED(HAS_HOTEND))
+#define PREPARE_CASE_ABS  (PREPARE_CASE_PLA + ENABLED(HAS_HOTEND))
+#define PREPARE_CASE_COOL (PREPARE_CASE_ABS + EITHER(HAS_HOTEND, HAS_HEATED_BED))
+#define PREPARE_CASE_LANG (PREPARE_CASE_COOL + 1)
+#define PREPARE_CASE_TOTAL PREPARE_CASE_LANG
+
+#define CONTROL_CASE_TEMP 1
+#define CONTROL_CASE_MOVE  (CONTROL_CASE_TEMP + 1)
+#define CONTROL_CASE_SAVE  (CONTROL_CASE_MOVE + ENABLED(EEPROM_SETTINGS))
+#define CONTROL_CASE_LOAD  (CONTROL_CASE_SAVE + ENABLED(EEPROM_SETTINGS))
+#define CONTROL_CASE_RESET (CONTROL_CASE_LOAD + ENABLED(EEPROM_SETTINGS))
+#define CONTROL_CASE_ADVSET (CONTROL_CASE_RESET + 1)
+#define CONTROL_CASE_INFO  (CONTROL_CASE_ADVSET + 1)
+#define CONTROL_CASE_TOTAL CONTROL_CASE_INFO
+
+#define TUNE_CASE_SPEED 1
+#define TUNE_CASE_TEMP (TUNE_CASE_SPEED + ENABLED(HAS_HOTEND))
+#define TUNE_CASE_BED  (TUNE_CASE_TEMP + ENABLED(HAS_HEATED_BED))
+#define TUNE_CASE_FAN  (TUNE_CASE_BED + ENABLED(HAS_FAN))
+#define TUNE_CASE_ZOFF (TUNE_CASE_FAN + ENABLED(HAS_ZOFFSET_ITEM))
+#define TUNE_CASE_TOTAL TUNE_CASE_ZOFF
+
+#define TEMP_CASE_TEMP (0 + ENABLED(HAS_HOTEND))
+#define TEMP_CASE_BED  (TEMP_CASE_TEMP + ENABLED(HAS_HEATED_BED))
+#define TEMP_CASE_FAN  (TEMP_CASE_BED + ENABLED(HAS_FAN))
+#define TEMP_CASE_PLA  (TEMP_CASE_FAN + ENABLED(HAS_HOTEND))
+#define TEMP_CASE_ABS  (TEMP_CASE_PLA + ENABLED(HAS_HOTEND))
+#define TEMP_CASE_TOTAL TEMP_CASE_ABS
+
+#define PREHEAT_CASE_TEMP (0 + ENABLED(HAS_HOTEND))
+#define PREHEAT_CASE_BED  (PREHEAT_CASE_TEMP + ENABLED(HAS_HEATED_BED))
+#define PREHEAT_CASE_FAN  (PREHEAT_CASE_BED + ENABLED(HAS_FAN))
+#define PREHEAT_CASE_SAVE (PREHEAT_CASE_FAN + ENABLED(EEPROM_SETTINGS))
+#define PREHEAT_CASE_TOTAL PREHEAT_CASE_SAVE
+
+#define ADVSET_CASE_HOMEOFF   1
+#define ADVSET_CASE_PROBEOFF  (ADVSET_CASE_HOMEOFF + ENABLED(HAS_ONESTEP_LEVELING))
+#define ADVSET_CASE_HEPID     (ADVSET_CASE_PROBEOFF + ENABLED(HAS_HOTEND))
+#define ADVSET_CASE_BEDPID    (ADVSET_CASE_HEPID + ENABLED(HAS_HEATED_BED))
+#define ADVSET_CASE_PWRLOSSR  (ADVSET_CASE_BEDPID + ENABLED(POWER_LOSS_RECOVERY))
+#define ADVSET_CASE_TOTAL     ADVSET_CASE_PWRLOSSR
+
+//
+// Draw Menus
+//
+
+void DWIN_Draw_Label(const uint16_t y, char *string) {
+  DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, LBLX, y, string);
+}
+void DWIN_Draw_Label(const uint16_t y, const __FlashStringHelper *title) {
+  DWIN_Draw_Label(y, (char*)title);
+}
+
+void draw_move_en(const uint16_t line) {
+  #ifdef USE_STRING_TITLES
+    DWIN_Draw_Label(line, F("Move"));
+  #else
+    DWIN_Frame_AreaCopy(1, 69, 61, 102, 71, LBLX, line); // "Move"
+  #endif
+}
+
+inline void DWIN_Frame_TitleCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
+  DWIN_Frame_AreaCopy(id, x1, y1, x2, y2, 14, 8);
+}
+
+void Item_Prepare_Move(const uint8_t row) {
+  if (HMI_IsChinese())
+    DWIN_Frame_AreaCopy(1, 159, 70, 200, 84, LBLX, MBASE(row));
+  else
+    draw_move_en(MBASE(row)); // "Move"
+  Draw_Menu_Line(row, ICON_Axis);
+  Draw_More_Icon(row);
+}
+
+void Item_Prepare_Disable(const uint8_t row) {
+  if (HMI_IsChinese())
+    DWIN_Frame_AreaCopy(1, 204, 70, 259, 82, LBLX, MBASE(row));
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_DISABLE_STEPPERS));
+    #else
+      DWIN_Frame_AreaCopy(1, 103, 59, 200, 74, LBLX, MBASE(row)); // "Disable Stepper"
+    #endif
+  }
+  Draw_Menu_Line(row, ICON_CloseMotor);
+}
+
+void Item_Prepare_Home(const uint8_t row) {
+  if (HMI_IsChinese())
+    DWIN_Frame_AreaCopy(1, 0, 89, 41, 101, LBLX, MBASE(row));
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_AUTO_HOME));
+    #else
+      DWIN_Frame_AreaCopy(1, 202, 61, 271, 71, LBLX, MBASE(row)); // "Auto Home"
+    #endif
+  }
+  Draw_Menu_Line(row, ICON_Homing);
+}
+
+#if HAS_ZOFFSET_ITEM
+
+  void Item_Prepare_Offset(const uint8_t row) {
+    if (HMI_IsChinese()) {
+      #if HAS_BED_PROBE
+        DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(row));
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
+      #else
+        DWIN_Frame_AreaCopy(1, 43, 89, 98, 101, LBLX, MBASE(row));
+      #endif
+    }
+    else {
+      #if HAS_BED_PROBE
+        #ifdef USE_STRING_TITLES
+          DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+        #else
+          DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(row));    // "Z-Offset"
+        #endif
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(row), probe.offset.z * 100);
+      #else
+        #ifdef USE_STRING_TITLES
+          DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_SET_HOME_OFFSETS));
+        #else
+          DWIN_Frame_AreaCopy(1, 1, 76, 106, 86, LBLX, MBASE(row));       // "Set home offsets"
+        #endif
+      #endif
+    }
+    Draw_Menu_Line(row, ICON_SetHome);
+  }
+
+#endif
+
+#if HAS_HOTEND
+  void Item_Prepare_PLA(const uint8_t row) {
+    if (HMI_IsChinese()) {
+      DWIN_Frame_AreaCopy(1, 100, 89, 151, 101, LBLX, MBASE(row));
+    }
+    else {
+      #ifdef USE_STRING_TITLES
+        DWIN_Draw_Label(MBASE(row), F("Preheat " PREHEAT_1_LABEL));
+      #else
+        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
+        DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(row));  // "PLA"
+      #endif
+    }
+    Draw_Menu_Line(row, ICON_PLAPreheat);
+  }
+
+  void Item_Prepare_ABS(const uint8_t row) {
+    if (HMI_IsChinese()) {
+      DWIN_Frame_AreaCopy(1, 180, 89, 233, 100, LBLX, MBASE(row));
+    }
+    else {
+      #ifdef USE_STRING_TITLES
+        DWIN_Draw_Label(MBASE(row), F("Preheat " PREHEAT_2_LABEL));
+      #else
+        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(row));       // "Preheat"
+        DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(row));  // "ABS"
+      #endif
+    }
+    Draw_Menu_Line(row, ICON_ABSPreheat);
+  }
+#endif
+
+#if HAS_PREHEAT
+  void Item_Prepare_Cool(const uint8_t row) {
+    if (HMI_IsChinese())
+      DWIN_Frame_AreaCopy(1,   1, 104,  56, 117, LBLX, MBASE(row));
+    else {
+      #ifdef USE_STRING_TITLES
+        DWIN_Draw_Label(MBASE(row), GET_TEXT_F(MSG_COOLDOWN));
+      #else
+        DWIN_Frame_AreaCopy(1, 200,  76, 264,  86, LBLX, MBASE(row));      // "Cooldown"
+      #endif
+    }
+    Draw_Menu_Line(row, ICON_Cool);
+  }
+#endif
+
+void Item_Prepare_Lang(const uint8_t row) {
+  if (HMI_IsChinese())
+    DWIN_Frame_AreaCopy(1, 239, 134, 266, 146, LBLX, MBASE(row));
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(row), F("UI Language"));
+    #else
+      DWIN_Frame_AreaCopy(1, 0, 194, 121, 207, LBLX, MBASE(row)); // "Language selection"
+    #endif
+  }
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, 226, MBASE(row), HMI_IsChinese() ? F("CN") : F("EN"));
+  Draw_Menu_Icon(row, ICON_Language);
+}
+
+void Draw_Prepare_Menu() {
+  Clear_Main_Window();
+
+  const int16_t scroll = MROWS - index_prepare; // Scrolled-up lines
+  #define PSCROL(L) (scroll + (L))
+  #define PVISI(L)  WITHIN(PSCROL(L), 0, MROWS)
+
+  if (HMI_IsChinese()) {
+    DWIN_Frame_TitleCopy(1, 133, 1, 160, 13);   // "Prepare"
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_PREPARE));
+    #else
+      DWIN_Frame_TitleCopy(1, 178, 2, 229, 14); // "Prepare"
+    #endif
+  }
+
+  if (PVISI(0)) Draw_Back_First(select_prepare.now == 0);                         // < Back
+  if (PVISI(PREPARE_CASE_MOVE)) Item_Prepare_Move(PSCROL(PREPARE_CASE_MOVE));     // Move >
+  if (PVISI(PREPARE_CASE_DISA)) Item_Prepare_Disable(PSCROL(PREPARE_CASE_DISA));  // Disable Stepper
+  if (PVISI(PREPARE_CASE_HOME)) Item_Prepare_Home(PSCROL(PREPARE_CASE_HOME));     // Auto Home
+  #if HAS_ZOFFSET_ITEM
+    if (PVISI(PREPARE_CASE_ZOFF)) Item_Prepare_Offset(PSCROL(PREPARE_CASE_ZOFF)); // Edit Z-Offset / Babystep / Set Home Offset
+  #endif
+  #if HAS_HOTEND
+    if (PVISI(PREPARE_CASE_PLA)) Item_Prepare_PLA(PSCROL(PREPARE_CASE_PLA));      // Preheat PLA
+    if (PVISI(PREPARE_CASE_ABS)) Item_Prepare_ABS(PSCROL(PREPARE_CASE_ABS));      // Preheat ABS
+  #endif
+  #if HAS_PREHEAT
+    if (PVISI(PREPARE_CASE_COOL)) Item_Prepare_Cool(PSCROL(PREPARE_CASE_COOL));   // Cooldown
+  #endif
+  if (PVISI(PREPARE_CASE_LANG)) Item_Prepare_Lang(PSCROL(PREPARE_CASE_LANG));     // Language CN/EN
+
+  if (select_prepare.now) Draw_Menu_Cursor(PSCROL(select_prepare.now));
+}
+
+void Item_Control_Info(const uint16_t line) {
+  if (HMI_IsChinese())
+    DWIN_Frame_AreaCopy(1, 231, 104, 258, 116, LBLX, line);
+  else {
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(line, F("Info"));
+    #else
+      DWIN_Frame_AreaCopy(1, 0, 104, 24, 114, LBLX, line);
+    #endif
+  }
+}
+
+void Draw_Control_Menu() {
+  Clear_Main_Window();
+
+  #if CONTROL_CASE_TOTAL >= 6
+    const int16_t scroll = MROWS - index_control; // Scrolled-up lines
+    #define CSCROL(L) (scroll + (L))
+  #else
+    #define CSCROL(L) (L)
+  #endif
+  #define CLINE(L)  MBASE(CSCROL(L))
+  #define CVISI(L)  WITHIN(CSCROL(L), 0, MROWS)
+
+  if (CVISI(0)) Draw_Back_First(select_control.now == 0);                         // < Back
+
+  if (HMI_IsChinese()) {
+    DWIN_Frame_TitleCopy(1, 103, 1, 130, 14);                                     // "Control"
+
+    DWIN_Frame_AreaCopy(1,  57, 104,  84, 116, LBLX, CLINE(CONTROL_CASE_TEMP));   // Temperature >
+    DWIN_Frame_AreaCopy(1,  87, 104, 114, 116, LBLX, CLINE(CONTROL_CASE_MOVE));   // Motion >
+
+    #if ENABLED(EEPROM_SETTINGS)
+      DWIN_Frame_AreaCopy(1, 117, 104, 172, 116, LBLX, CLINE(CONTROL_CASE_SAVE));   // Store Configuration
+      DWIN_Frame_AreaCopy(1, 174, 103, 229, 116, LBLX, CLINE(CONTROL_CASE_LOAD));   // Read Configuration
+      DWIN_Frame_AreaCopy(1,   1, 118,  56, 131, LBLX, CLINE(CONTROL_CASE_RESET));  // Reset Configuration
+    #endif
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_CONTROL));
+    #else
+      DWIN_Frame_TitleCopy(1, 128, 2, 176, 12);                                         // "Control"
+    #endif
+    #ifdef USE_STRING_TITLES
+      if (CVISI(CONTROL_CASE_TEMP)) DWIN_Draw_Label(CLINE(CONTROL_CASE_TEMP), GET_TEXT_F(MSG_TEMPERATURE));
+      if (CVISI(CONTROL_CASE_MOVE)) DWIN_Draw_Label(CLINE(CONTROL_CASE_MOVE), GET_TEXT_F(MSG_MOTION));
+      #if ENABLED(EEPROM_SETTINGS)
+        if (CVISI(CONTROL_CASE_SAVE)) DWIN_Draw_Label(CLINE(CONTROL_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+        if (CVISI(CONTROL_CASE_LOAD)) DWIN_Draw_Label(CLINE(CONTROL_CASE_LOAD), GET_TEXT_F(MSG_LOAD_EEPROM));
+        if (CVISI(CONTROL_CASE_RESET)) DWIN_Draw_Label(CLINE(CONTROL_CASE_RESET), GET_TEXT_F(MSG_RESTORE_DEFAULTS));
+      #endif
+    #else
+      if (CVISI(CONTROL_CASE_TEMP)) DWIN_Frame_AreaCopy(1,  1, 89,  83, 101, LBLX, CLINE(CONTROL_CASE_TEMP));           // Temperature >
+      if (CVISI(CONTROL_CASE_MOVE)) DWIN_Frame_AreaCopy(1, 84, 89, 128,  99, LBLX, CLINE(CONTROL_CASE_MOVE));           // Motion >
+      #if ENABLED(EEPROM_SETTINGS)
+        if (CVISI(CONTROL_CASE_SAVE)) DWIN_Frame_AreaCopy(1, 148,  89, 268, 101, LBLX     , CLINE(CONTROL_CASE_SAVE));  // "Store Configuration"
+        if (CVISI(CONTROL_CASE_LOAD)) {
+          DWIN_Frame_AreaCopy(1,  26, 104,  57, 114, LBLX     , CLINE(CONTROL_CASE_LOAD));  // "Read"
+          DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 34, CLINE(CONTROL_CASE_LOAD));  // "Configuration"
+        }
+        if (CVISI(CONTROL_CASE_RESET)) {
+          DWIN_Frame_AreaCopy(1,  59, 104,  93, 114, LBLX     , CLINE(CONTROL_CASE_RESET)); // "Reset"
+          DWIN_Frame_AreaCopy(1, 182,  89, 268, 101, LBLX + 37, CLINE(CONTROL_CASE_RESET)); // "Configuration"
+        }
+      #endif
+    #endif
+  }
+
+  if (CVISI(CONTROL_CASE_ADVSET)) {
+    DWIN_Draw_Label(CLINE(CONTROL_CASE_ADVSET), GET_TEXT_F(MSG_ADVANCED_SETTINGS));  // Advanced Settings
+  }
+
+  if (CVISI(CONTROL_CASE_INFO)) Item_Control_Info(CLINE(CONTROL_CASE_INFO));
+
+  if (select_control.now && CVISI(select_control.now))
+    Draw_Menu_Cursor(CSCROL(select_control.now));
+
+  // Draw icons and lines
+  #define _TEMP_ICON(N, I, M) do { \
+    if (CVISI(N)) { \
+      Draw_Menu_Line(CSCROL(N), I); \
+      if (M) { \
+        Draw_More_Icon(CSCROL(N)); \
+      } \
+    } \
+  } while(0)
+
+  _TEMP_ICON(CONTROL_CASE_TEMP, ICON_Temperature, true);
+  _TEMP_ICON(CONTROL_CASE_MOVE, ICON_Motion, true);
+
+  #if ENABLED(EEPROM_SETTINGS)
+    _TEMP_ICON(CONTROL_CASE_SAVE, ICON_WriteEEPROM, false);
+    _TEMP_ICON(CONTROL_CASE_LOAD, ICON_ReadEEPROM, false);
+    _TEMP_ICON(CONTROL_CASE_RESET, ICON_ResumeEEPROM, false);
+  #endif
+
+  _TEMP_ICON(CONTROL_CASE_ADVSET, ICON_AdvSet, true);
+  _TEMP_ICON(CONTROL_CASE_INFO, ICON_Info, true);
+}
+
+void Draw_Tune_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_IsChinese()) {
+    DWIN_Frame_TitleCopy(1, 73, 2, 100, 13);
+    DWIN_Frame_AreaCopy(1, 116, 164, 171, 176, LBLX, MBASE(TUNE_CASE_SPEED));
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(TUNE_CASE_TEMP));
+    #endif
+    #if HAS_HEATED_BED
+      DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX, MBASE(TUNE_CASE_BED));
+    #endif
+    #if HAS_FAN
+      DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX, MBASE(TUNE_CASE_FAN));
+    #endif
+    #if HAS_ZOFFSET_ITEM
+      DWIN_Frame_AreaCopy(1, 174, 164, 223, 177, LBLX, MBASE(TUNE_CASE_ZOFF));
+    #endif
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_TUNE));
+    #else
+      DWIN_Frame_AreaCopy(1, 94, 2, 126, 12, 14, 9);
+    #endif
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(TUNE_CASE_SPEED), GET_TEXT_F(MSG_SPEED));
+      #if HAS_HOTEND
+        DWIN_Draw_Label(MBASE(TUNE_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+      #endif
+      #if HAS_HEATED_BED
+        DWIN_Draw_Label(MBASE(TUNE_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+      #endif
+      #if HAS_FAN
+        DWIN_Draw_Label(MBASE(TUNE_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+      #endif
+      DWIN_Draw_Label(MBASE(TUNE_CASE_ZOFF), GET_TEXT_F(MSG_ZPROBE_ZOFFSET));
+    #else
+      DWIN_Frame_TitleCopy(1, 94, 2, 126, 12);
+      DWIN_Frame_AreaCopy(1, 1, 179, 92, 190, LBLX, MBASE(TUNE_CASE_SPEED));      // Print speed
+      #if HAS_HOTEND
+        DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(TUNE_CASE_TEMP));  // Hotend...
+        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(TUNE_CASE_TEMP)); // ...Temperature
+      #endif
+      #if HAS_HEATED_BED
+        DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX, MBASE(TUNE_CASE_BED));   // Bed...
+        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 27, MBASE(TUNE_CASE_BED));  // ...Temperature
+      #endif
+      #if HAS_FAN
+        DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX, MBASE(TUNE_CASE_FAN));      // Fan speed
+      #endif
+      #if HAS_ZOFFSET_ITEM
+        DWIN_Frame_AreaCopy(1, 93, 179, 141, 189, LBLX, MBASE(TUNE_CASE_ZOFF));   // Z-offset
+      #endif
+    #endif
+  }
+
+  Draw_Back_First(select_tune.now == 0);
+  if (select_tune.now) Draw_Menu_Cursor(select_tune.now);
+
+  Draw_Menu_Line(TUNE_CASE_SPEED, ICON_Speed);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_SPEED), feedrate_percentage);
+
+  #if HAS_HOTEND
+    Draw_Menu_Line(TUNE_CASE_TEMP, ICON_HotendTemp);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP), thermalManager.degTargetHotend(0));
+  #endif
+  #if HAS_HEATED_BED
+    Draw_Menu_Line(TUNE_CASE_BED, ICON_BedTemp);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED), thermalManager.degTargetBed());
+  #endif
+  #if HAS_FAN
+    Draw_Menu_Line(TUNE_CASE_FAN, ICON_FanSpeed);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_FAN), thermalManager.fan_speed[0]);
+  #endif
+  #if HAS_ZOFFSET_ITEM
+    Draw_Menu_Line(TUNE_CASE_ZOFF, ICON_Zoffset);
+    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(TUNE_CASE_ZOFF), BABY_Z_VAR * 100);
+  #endif
+}
+
+void draw_max_en(const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 245, 119, 269, 129, LBLX, line);   // "Max"
+}
+void draw_max_accel_en(const uint16_t line) {
+  draw_max_en(line);
+  DWIN_Frame_AreaCopy(1, 1, 135, 79, 145, LBLX + 27, line); // "Acceleration"
+}
+void draw_speed_en(const uint16_t inset, const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 184, 119, 224, 132, LBLX + inset, line); // "Speed"
+}
+void draw_jerk_en(const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 64, 119, 106, 129, LBLX + 27, line); // "Jerk"
+}
+void draw_steps_per_mm(const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 1, 151, 101, 161, LBLX, line);   // "Steps-per-mm"
+}
+void say_x(const uint16_t inset, const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 95, 104, 102, 114, LBLX + inset, line); // "X"
+}
+void say_y(const uint16_t inset, const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 104, 104, 110, 114, LBLX + inset, line); // "Y"
+}
+void say_z(const uint16_t inset, const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 112, 104, 120, 114, LBLX + inset, line); // "Z"
+}
+void say_e(const uint16_t inset, const uint16_t line) {
+  DWIN_Frame_AreaCopy(1, 237, 119, 244, 129, LBLX + inset, line); // "E"
+}
+
+void Draw_Motion_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_IsChinese()) {
+    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28);                                     // "Motion"
+    DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, MBASE(MOTION_CASE_RATE));  // Max speed
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(MOTION_CASE_ACCEL));        // Max...
+    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(MOTION_CASE_ACCEL) + 1); // ...Acceleration
+    #if HAS_CLASSIC_JERK
+      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(MOTION_CASE_JERK));        // Max...
+      DWIN_Frame_AreaCopy(1, 1, 180, 28, 192, LBLX + 27, MBASE(MOTION_CASE_JERK) + 1);  // ...
+      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 54, MBASE(MOTION_CASE_JERK));   // ...Jerk
+    #endif
+    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(MOTION_CASE_STEPS));         // Flow ratio
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_MOTION));
+    #else
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);                                        // "Motion"
+    #endif
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(MOTION_CASE_RATE), F("Feedrate"));
+      DWIN_Draw_Label(MBASE(MOTION_CASE_ACCEL), GET_TEXT_F(MSG_ACCELERATION));
+      #if HAS_CLASSIC_JERK
+        DWIN_Draw_Label(MBASE(MOTION_CASE_JERK), GET_TEXT_F(MSG_JERK));
+      #endif
+      DWIN_Draw_Label(MBASE(MOTION_CASE_STEPS), GET_TEXT_F(MSG_STEPS_PER_MM));
+    #else
+      draw_max_en(MBASE(MOTION_CASE_RATE)); draw_speed_en(27, MBASE(MOTION_CASE_RATE)); // "Max Speed"
+      draw_max_accel_en(MBASE(MOTION_CASE_ACCEL));                                      // "Max Acceleration"
+      #if HAS_CLASSIC_JERK
+        draw_max_en(MBASE(MOTION_CASE_JERK)); draw_jerk_en(MBASE(MOTION_CASE_JERK));    // "Max Jerk"
+      #endif
+      draw_steps_per_mm(MBASE(MOTION_CASE_STEPS));                                      // "Steps-per-mm"
+    #endif
+  }
+
+  Draw_Back_First(select_motion.now == 0);
+  if (select_motion.now) Draw_Menu_Cursor(select_motion.now);
+
+  uint8_t i = 0;
+  #define _MOTION_ICON(N) Draw_Menu_Line(++i, ICON_MaxSpeed + (N) - 1)
+  _MOTION_ICON(MOTION_CASE_RATE); Draw_More_Icon(i);
+  _MOTION_ICON(MOTION_CASE_ACCEL); Draw_More_Icon(i);
+  #if HAS_CLASSIC_JERK
+    _MOTION_ICON(MOTION_CASE_JERK); Draw_More_Icon(i);
+  #endif
+  _MOTION_ICON(MOTION_CASE_STEPS); Draw_More_Icon(i);
+}
+
+//
+// Draw Popup Windows
+//
+
+#if HAS_HOTEND || HAS_HEATED_BED
+
+  void DWIN_Popup_Temperature(const bool toohigh) {
+    Clear_Popup_Area();
+    Draw_Popup_Bkgd_105();
+    if (toohigh) {
+      DWIN_ICON_Show(ICON, ICON_TempTooHigh, 102, 165);
+      if (HMI_IsChinese()) {
+        DWIN_Frame_AreaCopy(1, 103, 371, 237, 386, 52, 285);
+        DWIN_Frame_AreaCopy(1, 151, 389, 185, 402, 187, 285);
+        DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
+      }
+      else {
+        DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
+        DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, 92, 300, F("is too high"));
+      }
+    }
+    else {
+      DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 165);
+      if (HMI_IsChinese()) {
+        DWIN_Frame_AreaCopy(1, 103, 371, 270, 386, 52, 285);
+        DWIN_Frame_AreaCopy(1, 189, 389, 271, 402, 95, 310);
+      }
+      else {
+        DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, 36, 300, F("Nozzle or Bed temperature"));
+        DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, 92, 300, F("is too low"));
+      }
+    }
+  }
+
+#endif
+
+void Draw_Popup_Bkgd_60() {
+  DWIN_Draw_Rectangle(1, Color_Bg_Window, 14, 60, 258, 330);
+}
+
+#if HAS_HOTEND
+
+  void Popup_Window_ETempTooLow() {
+    Clear_Main_Window();
+    Draw_Popup_Bkgd_60();
+    DWIN_ICON_Show(ICON, ICON_TempTooLow, 102, 105);
+    if (HMI_IsChinese()) {
+      DWIN_Frame_AreaCopy(1, 103, 371, 136, 386, 69, 240);
+      DWIN_Frame_AreaCopy(1, 170, 371, 270, 386, 69 + 33, 240);
+      DWIN_ICON_Show(ICON, ICON_Confirm_C, 86, 280);
+    }
+    else {
+      DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, 20, 235, F("Nozzle is too cold"));
+      DWIN_ICON_Show(ICON, ICON_Confirm_E, 86, 280);
+    }
+  }
+
+#endif
+
+void Popup_Window_Resume() {
+  Clear_Popup_Area();
+  Draw_Popup_Bkgd_105();
+  if (HMI_IsChinese()) {
+    DWIN_Frame_AreaCopy(1, 160, 338, 235, 354, 98, 135);
+    DWIN_Frame_AreaCopy(1, 103, 321, 271, 335, 52, 192);
+    DWIN_ICON_Show(ICON, ICON_Cancel_C,    26, 307);
+    DWIN_ICON_Show(ICON, ICON_Continue_C, 146, 307);
+  }
+  else {
+    DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 14) / 2, 115, F("Continue Print"));
+    DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 192, F("It looks like the last"));
+    DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 22) / 2, 212, F("file was interrupted."));
+    DWIN_ICON_Show(ICON, ICON_Cancel_E,    26, 307);
+    DWIN_ICON_Show(ICON, ICON_Continue_E, 146, 307);
+  }
+}
+
+void Popup_Window_Home(const bool parking/*=false*/) {
+  Clear_Main_Window();
+  Draw_Popup_Bkgd_60();
+  DWIN_ICON_Show(ICON, ICON_BLTouch, 101, 105);
+  if (HMI_IsChinese()) {
+    DWIN_Frame_AreaCopy(1, 0, 371, 33, 386, 85, 240);
+    DWIN_Frame_AreaCopy(1, 203, 286, 271, 302, 118, 240);
+    DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
+  }
+  else {
+    DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * (parking ? 7 : 10)) / 2, 230, parking ? F("Parking") : F("Homing XYZ"));
+    DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
+  }
+}
+
+#if HAS_ONESTEP_LEVELING
+
+  void Popup_Window_Leveling() {
+    Clear_Main_Window();
+    Draw_Popup_Bkgd_60();
+    DWIN_ICON_Show(ICON, ICON_AutoLeveling, 101, 105);
+    if (HMI_IsChinese()) {
+      DWIN_Frame_AreaCopy(1, 0, 371, 100, 386, 84, 240);
+      DWIN_Frame_AreaCopy(1, 0, 389, 150, 402, 61, 280);
+    }
+    else {
+      DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 13) / 2, 230, GET_TEXT_F(MSG_BED_LEVELING));
+      DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 23) / 2, 260, F("Please wait until done."));
+    }
+  }
+
+#endif
+
+void Draw_Select_Highlight(const bool sel) {
+  HMI_flag.select_flag = sel;
+  const uint16_t c1 = sel ? Select_Color : Color_Bg_Window,
+                 c2 = sel ? Color_Bg_Window : Select_Color;
+  DWIN_Draw_Rectangle(0, c1, 25, 279, 126, 318);
+  DWIN_Draw_Rectangle(0, c1, 24, 278, 127, 319);
+  DWIN_Draw_Rectangle(0, c2, 145, 279, 246, 318);
+  DWIN_Draw_Rectangle(0, c2, 144, 278, 247, 319);
+}
+
+void Popup_window_PauseOrStop() {
+  Clear_Main_Window();
+  Draw_Popup_Bkgd_60();
+  if (HMI_IsChinese()) {
+         if (select_print.now == 1) DWIN_Frame_AreaCopy(1, 237, 338, 269, 356, 98, 150);
+    else if (select_print.now == 2) DWIN_Frame_AreaCopy(1, 221, 320, 253, 336, 98, 150);
+    DWIN_Frame_AreaCopy(1, 220, 304, 264, 319, 130, 150);
+    DWIN_ICON_Show(ICON, ICON_Confirm_C, 26, 280);
+    DWIN_ICON_Show(ICON, ICON_Cancel_C, 146, 280);
+  }
+  else {
+         if (select_print.now == 1) DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 11) / 2, 150, GET_TEXT_F(MSG_PAUSE_PRINT));
+    else if (select_print.now == 2) DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, (272 - 8 * 10) / 2, 150, GET_TEXT_F(MSG_STOP_PRINT));
+    DWIN_ICON_Show(ICON, ICON_Confirm_E, 26, 280);
+    DWIN_ICON_Show(ICON, ICON_Cancel_E, 146, 280);
+  }
+  Draw_Select_Highlight(true);
+}
+
+void Draw_Printing_Screen() {
+  if (HMI_IsChinese()) {
+    DWIN_Frame_AreaCopy(1, 30,  1,  71, 14,  14,   9);  // Tune
+    DWIN_Frame_AreaCopy(1,  0, 72,  63, 86,  41, 188);  // Pause
+    DWIN_Frame_AreaCopy(1, 65, 72, 128, 86, 176, 188);  // Stop
+  }
+  else {
+    DWIN_Frame_AreaCopy(1, 40,  2,  92, 14,  14,   9);  // Tune
+    DWIN_Frame_AreaCopy(1,  0, 44,  96, 58,  41, 188);  // Pause
+    DWIN_Frame_AreaCopy(1, 98, 44, 152, 58, 176, 188);  // Stop
+  }
+}
+
+void Draw_Print_ProgressBar() {
+  DWIN_ICON_Show(ICON, ICON_Bar, 15, 93);
+  DWIN_Draw_Rectangle(1, BarFill_Color, 16 + _card_percent * 240 / 100, 93, 256, 113);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Percent_Color, Color_Bg_Black, 2, 117, 133, _card_percent);
+  DWIN_Draw_String(false, font8x16, Percent_Color, Color_Bg_Black, 133, 133, F("%"));
+}
+
+void Draw_Print_ProgressElapsed() {
+  duration_t elapsed = print_job_timer.duration(); // print timer
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 42, 212, elapsed.value / 3600);
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, 58, 212, F(":"));
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 66, 212, (elapsed.value % 3600) / 60);
+}
+
+void Draw_Print_ProgressRemain() {
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 176, 212, _remain_time / 3600);
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, 192, 212, F(":"));
+  DWIN_Draw_IntValue(true, true, 1, font8x16, Color_White, Color_Bg_Black, 2, 200, 212, (_remain_time % 3600) / 60);
+}
+
+void Goto_PrintProcess() {
+  checkkey = PrintProcess;
+
+  Clear_Main_Window();
+  Draw_Printing_Screen();
+
+  ICON_Tune();
+  if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+  ICON_Stop();
+
+  // Copy into filebuf string before entry
+  char * const name = card.longest_filename();
+  const int8_t npos = _MAX(0U, DWIN_WIDTH - strlen(name) * MENU_CHR_W) / 2;
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, npos, 60, name);
+
+  DWIN_ICON_Show(ICON, ICON_PrintTime, 17, 193);
+  DWIN_ICON_Show(ICON, ICON_RemainTime, 150, 191);
+
+  Draw_Print_ProgressBar();
+  Draw_Print_ProgressElapsed();
+  Draw_Print_ProgressRemain();
+}
+
+void Goto_MainMenu() {
+  checkkey = MainMenu;
+
+  Clear_Main_Window();
+
+  if (HMI_IsChinese())
+    DWIN_Frame_TitleCopy(1, 2, 2, 27, 14); // "Home"
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_MAIN));
+    #else
+      DWIN_Frame_TitleCopy(1, 0, 2, 39, 12);
+    #endif
+  }
+
+  DWIN_ICON_Show(ICON, ICON_LOGO, 71, 52);
+
+  ICON_Print();
+  ICON_Prepare();
+  ICON_Control();
+  TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(select_page.now == 3);
+}
+
+inline ENCODER_DiffState get_encoder_state() {
+  static millis_t Encoder_ms = 0;
+  const millis_t ms = millis();
+  if (PENDING(ms, Encoder_ms)) return ENCODER_DIFF_NO;
+  const ENCODER_DiffState state = Encoder_ReceiveAnalyze();
+  if (state != ENCODER_DIFF_NO) Encoder_ms = ms + ENCODER_WAIT_MS;
+  return state;
+}
+
+void HMI_Plan_Move(const feedRate_t fr_mm_s) {
+  if (!planner.is_full()) {
+    planner.synchronize();
+    planner.buffer_line(current_position, fr_mm_s);
+    DWIN_UpdateLCD();
+  }
+}
+
+void HMI_Move_Done(const AxisEnum axis) {
+  EncoderRate.enabled = false;
+  planner.synchronize();
+  checkkey = AxisMove;
+  DWIN_UpdateLCD();
+}
+
+void HMI_Move_X() {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_X_scaled))
+      return HMI_Move_Done(X_AXIS);
+    LIMIT(HMI_ValueStruct.Move_X_scaled, (X_MIN_POS) * MINUNITMULT, (X_MAX_POS) * MINUNITMULT);
+    current_position.x = HMI_ValueStruct.Move_X_scaled / MINUNITMULT;
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
+    DWIN_UpdateLCD();
+    HMI_Plan_Move(homing_feedrate(X_AXIS));
+  }
+}
+
+void HMI_Move_Y() {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Y_scaled))
+      return HMI_Move_Done(Y_AXIS);
+    LIMIT(HMI_ValueStruct.Move_Y_scaled, (Y_MIN_POS) * MINUNITMULT, (Y_MAX_POS) * MINUNITMULT);
+    current_position.y = HMI_ValueStruct.Move_Y_scaled / MINUNITMULT;
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
+    DWIN_UpdateLCD();
+    HMI_Plan_Move(homing_feedrate(Y_AXIS));
+  }
+}
+
+void HMI_Move_Z() {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_Z_scaled))
+      return HMI_Move_Done(Z_AXIS);
+    LIMIT(HMI_ValueStruct.Move_Z_scaled, (Z_MIN_POS) * MINUNITMULT, (Z_MAX_POS) * MINUNITMULT);
+    current_position.z = HMI_ValueStruct.Move_Z_scaled / MINUNITMULT;
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
+    DWIN_UpdateLCD();
+    HMI_Plan_Move(homing_feedrate(Z_AXIS));
+  }
+}
+
+#if HAS_HOTEND
+
+  void HMI_Move_E() {
+    static float last_E_scaled = 0;
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Move_E_scaled)) {
+        last_E_scaled = HMI_ValueStruct.Move_E_scaled;
+        return HMI_Move_Done(E_AXIS);
+      }
+      LIMIT(HMI_ValueStruct.Move_E_scaled, last_E_scaled - (EXTRUDE_MAXLENGTH) * MINUNITMULT, last_E_scaled + (EXTRUDE_MAXLENGTH) * MINUNITMULT);
+      current_position.e = HMI_ValueStruct.Move_E_scaled / MINUNITMULT;
+      DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
+      DWIN_UpdateLCD();
+      HMI_Plan_Move(MMM_TO_MMS(FEEDRATE_E));
+    }
+  }
+
+#endif
+
+#if HAS_ZOFFSET_ITEM
+
+  bool printer_busy() { return planner.movesplanned() || printingIsActive(); }
+
+  void HMI_Zoffset() {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      uint8_t zoff_line;
+      switch (HMI_ValueStruct.show_mode) {
+        case -4: zoff_line = PREPARE_CASE_ZOFF + MROWS - index_prepare; break;
+        default: zoff_line = TUNE_CASE_ZOFF + MROWS - index_tune;
+      }
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.offset_value)) {
+        EncoderRate.enabled = false;
+        #if HAS_BED_PROBE
+          probe.offset.z = dwin_zoffset;
+          TERN_(EEPROM_SETTINGS, settings.save());
+        #endif
+        checkkey = HMI_ValueStruct.show_mode == -4 ? Prepare : Tune;
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 2, 2, 202, MBASE(zoff_line), TERN(HAS_BED_PROBE, BABY_Z_VAR * 100, HMI_ValueStruct.offset_value));
+        DWIN_UpdateLCD();
+        return;
+      }
+      LIMIT(HMI_ValueStruct.offset_value, (Z_PROBE_OFFSET_RANGE_MIN) * 100, (Z_PROBE_OFFSET_RANGE_MAX) * 100);
+      last_zoffset = dwin_zoffset;
+      dwin_zoffset = HMI_ValueStruct.offset_value / 100.0f;
+      #if EITHER(BABYSTEP_ZPROBE_OFFSET, JUST_BABYSTEP)
+        if (BABYSTEP_ALLOWED()) babystep.add_mm(Z_AXIS, dwin_zoffset - last_zoffset);
+      #endif
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(zoff_line), HMI_ValueStruct.offset_value);
+      DWIN_UpdateLCD();
+    }
+  }
+
+#endif // HAS_ZOFFSET_ITEM
+
+#if HAS_HOTEND
+
+  void HMI_ETemp() {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      uint8_t temp_line;
+      switch (HMI_ValueStruct.show_mode) {
+        case -1: temp_line = TEMP_CASE_TEMP; break;
+        case -2: temp_line = PREHEAT_CASE_TEMP; break;
+        case -3: temp_line = PREHEAT_CASE_TEMP; break;
+        default: temp_line = TUNE_CASE_TEMP + MROWS - index_tune;
+      }
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.E_Temp)) {
+        EncoderRate.enabled = false;
+        if (HMI_ValueStruct.show_mode == -2) {
+          checkkey = PLAPreheat;
+          ui.material_preset[0].hotend_temp = HMI_ValueStruct.E_Temp;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), ui.material_preset[0].hotend_temp);
+          return;
+        }
+        else if (HMI_ValueStruct.show_mode == -3) {
+          checkkey = ABSPreheat;
+          ui.material_preset[1].hotend_temp = HMI_ValueStruct.E_Temp;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), ui.material_preset[1].hotend_temp);
+          return;
+        }
+        else if (HMI_ValueStruct.show_mode == -1) // Temperature
+          checkkey = TemperatureID;
+        else
+          checkkey = Tune;
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
+        thermalManager.setTargetHotend(HMI_ValueStruct.E_Temp, 0);
+        return;
+      }
+      // E_Temp limit
+      LIMIT(HMI_ValueStruct.E_Temp, HEATER_0_MINTEMP, thermalManager.hotend_max_target(0));
+      // E_Temp value
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(temp_line), HMI_ValueStruct.E_Temp);
+    }
+  }
+
+#endif // HAS_HOTEND
+
+#if HAS_HEATED_BED
+
+  void HMI_BedTemp() {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      uint8_t bed_line;
+      switch (HMI_ValueStruct.show_mode) {
+        case -1: bed_line = TEMP_CASE_BED; break;
+        case -2: bed_line = PREHEAT_CASE_BED; break;
+        case -3: bed_line = PREHEAT_CASE_BED; break;
+        default: bed_line = TUNE_CASE_BED + MROWS - index_tune;
+      }
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Bed_Temp)) {
+        EncoderRate.enabled = false;
+        if (HMI_ValueStruct.show_mode == -2) {
+          checkkey = PLAPreheat;
+          ui.material_preset[0].bed_temp = HMI_ValueStruct.Bed_Temp;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), ui.material_preset[0].bed_temp);
+          return;
+        }
+        else if (HMI_ValueStruct.show_mode == -3) {
+          checkkey = ABSPreheat;
+          ui.material_preset[1].bed_temp = HMI_ValueStruct.Bed_Temp;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), ui.material_preset[1].bed_temp);
+          return;
+        }
+        else if (HMI_ValueStruct.show_mode == -1)
+          checkkey = TemperatureID;
+        else
+          checkkey = Tune;
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
+        thermalManager.setTargetBed(HMI_ValueStruct.Bed_Temp);
+        return;
+      }
+      // Bed_Temp limit
+      LIMIT(HMI_ValueStruct.Bed_Temp, BED_MINTEMP, BED_MAX_TARGET);
+      // Bed_Temp value
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(bed_line), HMI_ValueStruct.Bed_Temp);
+    }
+  }
+
+#endif // HAS_HEATED_BED
+
+#if HAS_PREHEAT && HAS_FAN
+
+  void HMI_FanSpeed() {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      uint8_t fan_line;
+      switch (HMI_ValueStruct.show_mode) {
+        case -1: fan_line = TEMP_CASE_FAN; break;
+        case -2: fan_line = PREHEAT_CASE_FAN; break;
+        case -3: fan_line = PREHEAT_CASE_FAN; break;
+        default: fan_line = TUNE_CASE_FAN + MROWS - index_tune;
+      }
+
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Fan_speed)) {
+        EncoderRate.enabled = false;
+        if (HMI_ValueStruct.show_mode == -2) {
+          checkkey = PLAPreheat;
+          ui.material_preset[0].fan_speed = HMI_ValueStruct.Fan_speed;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), ui.material_preset[0].fan_speed);
+          return;
+        }
+        else if (HMI_ValueStruct.show_mode == -3) {
+          checkkey = ABSPreheat;
+          ui.material_preset[1].fan_speed = HMI_ValueStruct.Fan_speed;
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), ui.material_preset[1].fan_speed);
+          return;
+        }
+        else if (HMI_ValueStruct.show_mode == -1)
+          checkkey = TemperatureID;
+        else
+          checkkey = Tune;
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
+        thermalManager.set_fan_speed(0, HMI_ValueStruct.Fan_speed);
+        return;
+      }
+      // Fan_speed limit
+      LIMIT(HMI_ValueStruct.Fan_speed, 0, 255);
+      // Fan_speed value
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(fan_line), HMI_ValueStruct.Fan_speed);
+    }
+  }
+
+#endif // HAS_PREHEAT && HAS_FAN
+
+void HMI_PrintSpeed() {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.print_speed)) {
+      checkkey = Tune;
+      EncoderRate.enabled = false;
+      feedrate_percentage = HMI_ValueStruct.print_speed;
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
+      return;
+    }
+    // print_speed limit
+    LIMIT(HMI_ValueStruct.print_speed, MIN_PRINT_SPEED, MAX_PRINT_SPEED);
+    // print_speed value
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(select_tune.now + MROWS - index_tune), HMI_ValueStruct.print_speed);
+  }
+}
+
+#define LAST_AXIS TERN(HAS_HOTEND, E_AXIS, Z_AXIS)
+
+void HMI_MaxFeedspeedXYZE() {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Feedspeed)) {
+      checkkey = MaxSpeed;
+      EncoderRate.enabled = false;
+      if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
+        planner.set_max_feedrate(HMI_flag.feedspeed_axis, HMI_ValueStruct.Max_Feedspeed);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+      return;
+    }
+    // MaxFeedspeed limit
+    if (WITHIN(HMI_flag.feedspeed_axis, X_AXIS, LAST_AXIS))
+      NOMORE(HMI_ValueStruct.Max_Feedspeed, default_max_feedrate[HMI_flag.feedspeed_axis] * 2);
+    if (HMI_ValueStruct.Max_Feedspeed < MIN_MAXFEEDSPEED) HMI_ValueStruct.Max_Feedspeed = MIN_MAXFEEDSPEED;
+    // MaxFeedspeed value
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+  }
+}
+
+void HMI_MaxAccelerationXYZE() {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Acceleration)) {
+      checkkey = MaxAcceleration;
+      EncoderRate.enabled = false;
+      if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
+        planner.set_max_acceleration(HMI_flag.acc_axis, HMI_ValueStruct.Max_Acceleration);
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+      return;
+    }
+    // MaxAcceleration limit
+    if (WITHIN(HMI_flag.acc_axis, X_AXIS, LAST_AXIS))
+      NOMORE(HMI_ValueStruct.Max_Acceleration, default_max_acceleration[HMI_flag.acc_axis] * 2);
+    if (HMI_ValueStruct.Max_Acceleration < MIN_MAXACCELERATION) HMI_ValueStruct.Max_Acceleration = MIN_MAXACCELERATION;
+    // MaxAcceleration value
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+  }
+}
+
+#if HAS_CLASSIC_JERK
+
+  void HMI_MaxJerkXYZE() {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Jerk_scaled)) {
+        checkkey = MaxJerk;
+        EncoderRate.enabled = false;
+        if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
+          planner.set_max_jerk(HMI_flag.jerk_axis, HMI_ValueStruct.Max_Jerk_scaled / 10);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
+        return;
+      }
+      // MaxJerk limit
+      if (WITHIN(HMI_flag.jerk_axis, X_AXIS, LAST_AXIS))
+        NOMORE(HMI_ValueStruct.Max_Jerk_scaled, default_max_jerk[HMI_flag.jerk_axis] * 2 * MINUNITMULT);
+      NOLESS(HMI_ValueStruct.Max_Jerk_scaled, (MIN_MAXJERK) * MINUNITMULT);
+      // MaxJerk value
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
+    }
+  }
+
+#endif // HAS_CLASSIC_JERK
+
+void HMI_StepXYZE() {
+  ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+  if (encoder_diffState != ENCODER_DIFF_NO) {
+    if (Apply_Encoder(encoder_diffState, HMI_ValueStruct.Max_Step_scaled)) {
+      checkkey = Step;
+      EncoderRate.enabled = false;
+      if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
+        planner.settings.axis_steps_per_mm[HMI_flag.step_axis] = HMI_ValueStruct.Max_Step_scaled / 10;
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
+      return;
+    }
+    // Step limit
+    if (WITHIN(HMI_flag.step_axis, X_AXIS, LAST_AXIS))
+      NOMORE(HMI_ValueStruct.Max_Step_scaled, 999.9 * MINUNITMULT);
+    NOLESS(HMI_ValueStruct.Max_Step_scaled, MIN_STEP);
+    // Step value
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
+  }
+}
+
+// Draw X, Y, Z and blink if in an un-homed or un-trusted state
+void _update_axis_value(const AxisEnum axis, const uint16_t x, const uint16_t y, const bool blink, const bool force) {
+  const bool draw_qmark = axis_should_home(axis),
+             draw_empty = NONE(HOME_AFTER_DEACTIVATE, DISABLE_REDUCED_ACCURACY_WARNING) && !draw_qmark && !axis_is_trusted(axis);
+
+  // Check for a position change
+  static xyz_pos_t oldpos = { -1, -1, -1 };
+  const float p = current_position[axis];
+  const bool changed = oldpos[axis] != p;
+  if (changed) oldpos[axis] = p;
+
+  if (force || changed || draw_qmark || draw_empty) {
+    if (blink && draw_qmark)
+      DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, x, y, F("???.?"));
+    else if (blink && draw_empty)
+      DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, x, y, F("     "));
+    else
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, x, y, p * 10);
+  }
+}
+
+void _draw_xyz_position(const bool force) {
+  //SERIAL_ECHOPGM("Draw XYZ:");
+  static bool _blink = false;
+  const bool blink = !!(millis() & 0x400UL);
+  if (force || blink != _blink) {
+    _blink = blink;
+    //SERIAL_ECHOPGM(" (blink)");
+    _update_axis_value(X_AXIS,  35, 459, blink, true);
+    _update_axis_value(Y_AXIS, 120, 459, blink, true);
+    _update_axis_value(Z_AXIS, 205, 459, blink, true);
+  }
+  //SERIAL_EOL();
+}
+
+void update_variable() {
+  #if HAS_HOTEND
+    static celsius_t _hotendtemp = 0, _hotendtarget = 0;
+    const celsius_t hc = thermalManager.wholeDegHotend(0),
+                    ht = thermalManager.degTargetHotend(0);
+    const bool _new_hotend_temp = _hotendtemp != hc,
+               _new_hotend_target = _hotendtarget != ht;
+    if (_new_hotend_temp) _hotendtemp = hc;
+    if (_new_hotend_target) _hotendtarget = ht;
+  #endif
+  #if HAS_HEATED_BED
+    static celsius_t _bedtemp = 0, _bedtarget = 0;
+    const celsius_t bc = thermalManager.wholeDegBed(),
+                    bt = thermalManager.degTargetBed();
+    const bool _new_bed_temp = _bedtemp != bc,
+               _new_bed_target = _bedtarget != bt;
+    if (_new_bed_temp) _bedtemp = bc;
+    if (_new_bed_target) _bedtarget = bt;
+  #endif
+  #if HAS_FAN
+    static uint8_t _fanspeed = 0;
+    const bool _new_fanspeed = _fanspeed != thermalManager.fan_speed[0];
+    if (_new_fanspeed) _fanspeed = thermalManager.fan_speed[0];
+  #endif
+
+  if (checkkey == Tune) {
+    // Tune page temperature update
+    #if HAS_HOTEND
+      if (_new_hotend_target)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), _hotendtarget);
+    #endif
+    #if HAS_HEATED_BED
+      if (_new_bed_target)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), _bedtarget);
+    #endif
+    #if HAS_FAN
+      if (_new_fanspeed)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), _fanspeed);
+    #endif
+  }
+  else if (checkkey == TemperatureID) {
+    // Temperature page temperature update
+    #if HAS_HOTEND
+      if (_new_hotend_target)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_TEMP), _hotendtarget);
+    #endif
+    #if HAS_HEATED_BED
+      if (_new_bed_target)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_BED), _bedtarget);
+    #endif
+    #if HAS_FAN
+      if (_new_fanspeed)
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(TEMP_CASE_FAN), _fanspeed);
+    #endif
+  }
+
+  // Bottom temperature update
+
+  #if HAS_HOTEND
+    if (_new_hotend_temp)
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 384, _hotendtemp);
+    if (_new_hotend_target)
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 384, _hotendtarget);
+
+    static int16_t _flow = planner.flow_percentage[0];
+    if (_flow != planner.flow_percentage[0]) {
+      _flow = planner.flow_percentage[0];
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 417, _flow);
+    }
+  #endif
+
+  #if HAS_HEATED_BED
+    if (_new_bed_temp)
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 417, _bedtemp);
+    if (_new_bed_target)
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 417, _bedtarget);
+  #endif
+
+  static int16_t _feedrate = 100;
+  if (_feedrate != feedrate_percentage) {
+    _feedrate = feedrate_percentage;
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 384, _feedrate);
+  }
+
+  #if HAS_FAN
+    if (_new_fanspeed) {
+      _fanspeed = thermalManager.fan_speed[0];
+      DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 195 + 2 * STAT_CHR_W, 384, _fanspeed);
+    }
+  #endif
+
+  static float _offset = 0;
+  if (BABY_Z_VAR != _offset) {
+    _offset = BABY_Z_VAR;
+    if (BABY_Z_VAR < 0) {
+      DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, -_offset * 100);
+      DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
+    }
+    else {
+      DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, _offset * 100);
+      DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
+    }
+  }
+
+  _draw_xyz_position(false);
+}
+
+/**
+ * Read and cache the working directory.
+ *
+ * TODO: New code can follow the pattern of menu_media.cpp
+ * and rely on Marlin caching for performance. No need to
+ * cache files here.
+ */
+
+#ifndef strcasecmp_P
+  #define strcasecmp_P(a, b) strcasecmp((a), (b))
+#endif
+
+void make_name_without_ext(char *dst, char *src, size_t maxlen=MENU_CHAR_LIMIT) {
+  char * const name = card.longest_filename();
+  size_t pos        = strlen(name); // index of ending nul
+
+  // For files, remove the extension
+  // which may be .gcode, .gco, or .g
+  if (!card.flag.filenameIsDir)
+    while (pos && src[pos] != '.') pos--; // find last '.' (stop at 0)
+
+  size_t len = pos;   // nul or '.'
+  if (len > maxlen) { // Keep the name short
+    pos        = len = maxlen; // move nul down
+    dst[--pos] = '.'; // insert dots
+    dst[--pos] = '.';
+    dst[--pos] = '.';
+  }
+
+  dst[len] = '\0';    // end it
+
+  // Copy down to 0
+  while (pos--) dst[pos] = src[pos];
+}
+
+void HMI_SDCardInit() { card.cdroot(); }
+
+void MarlinUI::refresh() { /* Nothing to see here */ }
+
+#define ICON_Folder ICON_More
+
+#if ENABLED(SCROLL_LONG_FILENAMES)
+
+  char shift_name[LONG_FILENAME_LENGTH + 1];
+  int8_t shift_amt; // = 0
+  millis_t shift_ms; // = 0
+
+  // Init the shift name based on the highlighted item
+  void Init_Shift_Name() {
+    const bool is_subdir = !card.flag.workDirIsRoot;
+    const int8_t filenum = select_file.now - 1 - is_subdir; // Skip "Back" and ".."
+    const uint16_t fileCnt = card.get_num_Files();
+    if (WITHIN(filenum, 0, fileCnt - 1)) {
+      card.getfilename_sorted(SD_ORDER(filenum, fileCnt));
+      char * const name = card.longest_filename();
+      make_name_without_ext(shift_name, name, 100);
+    }
+  }
+
+  void Init_SDItem_Shift() {
+    shift_amt = 0;
+    shift_ms  = select_file.now > 0 && strlen(shift_name) > MENU_CHAR_LIMIT
+           ? millis() + 750UL : 0;
+  }
+
+#endif
+
+/**
+ * Display an SD item, adding a CDUP for subfolders.
+ */
+void Draw_SDItem(const uint16_t item, int16_t row=-1) {
+  if (row < 0) row = item + 1 + MROWS - index_file;
+  const bool is_subdir = !card.flag.workDirIsRoot;
+  if (is_subdir && item == 0) {
+    Draw_Menu_Line(row, ICON_Folder, "..");
+    return;
+  }
+
+  card.getfilename_sorted(SD_ORDER(item - is_subdir, card.get_num_Files()));
+  char * const name = card.longest_filename();
+
+  #if ENABLED(SCROLL_LONG_FILENAMES)
+    // Init the current selected name
+    // This is used during scroll drawing
+    if (item == select_file.now - 1) {
+      make_name_without_ext(shift_name, name, 100);
+      Init_SDItem_Shift();
+    }
+  #endif
+
+  // Draw the file/folder with name aligned left
+  char str[strlen(name) + 1];
+  make_name_without_ext(str, name);
+  Draw_Menu_Line(row, card.flag.filenameIsDir ? ICON_Folder : ICON_File, str);
+}
+
+#if ENABLED(SCROLL_LONG_FILENAMES)
+
+  void Draw_SDItem_Shifted(uint8_t &shift) {
+    // Limit to the number of chars past the cutoff
+    const size_t len = strlen(shift_name);
+    NOMORE(shift, _MAX(len - MENU_CHAR_LIMIT, 0U));
+
+    // Shorten to the available space
+    const size_t lastchar = _MIN((signed)len, shift + MENU_CHAR_LIMIT);
+
+    const char c = shift_name[lastchar];
+    shift_name[lastchar] = '\0';
+
+    const uint8_t row = select_file.now + MROWS - index_file; // skip "Back" and scroll
+    Erase_Menu_Text(row);
+    Draw_Menu_Line(row, 0, &shift_name[shift]);
+
+    shift_name[lastchar] = c;
+  }
+
+#endif
+
+// Redraw the first set of SD Files
+void Redraw_SD_List() {
+  select_file.reset();
+  index_file = MROWS;
+
+  Clear_Menu_Area(); // Leave title bar unchanged
+
+  Draw_Back_First();
+
+  if (card.isMounted()) {
+    // As many files as will fit
+    LOOP_L_N(i, _MIN(nr_sd_menu_items(), MROWS))
+      Draw_SDItem(i, i + 1);
+
+    TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());
+  }
+  else {
+    DWIN_Draw_Rectangle(1, Color_Bg_Red, 10, MBASE(3) - 10, DWIN_WIDTH - 10, MBASE(4));
+    DWIN_Draw_String(false, font16x32, Color_Yellow, Color_Bg_Red, ((DWIN_WIDTH) - 8 * 16) / 2, MBASE(3), F("No Media"));
+  }
+}
+
+bool DWIN_lcd_sd_status = false;
+
+void SDCard_Up() {
+  card.cdup();
+  Redraw_SD_List();
+  DWIN_lcd_sd_status = false; // On next DWIN_Update
+}
+
+void SDCard_Folder(char * const dirname) {
+  card.cd(dirname);
+  Redraw_SD_List();
+  DWIN_lcd_sd_status = false; // On next DWIN_Update
+}
+
+//
+// Watch for media mount / unmount
+//
+void HMI_SDCardUpdate() {
+  if (HMI_flag.home_flag) return;
+  if (DWIN_lcd_sd_status != card.isMounted()) {
+    DWIN_lcd_sd_status = card.isMounted();
+    //SERIAL_ECHOLNPAIR("HMI_SDCardUpdate: ", DWIN_lcd_sd_status);
+    if (DWIN_lcd_sd_status) {
+      if (checkkey == SelectFile)
+        Redraw_SD_List();
+    }
+    else {
+      // clean file icon
+      if (checkkey == SelectFile) {
+        Redraw_SD_List();
+      }
+      else if (checkkey == PrintProcess || checkkey == Tune || printingIsActive()) {
+        // TODO: Move card removed abort handling
+        //       to CardReader::manage_media.
+        card.abortFilePrintSoon();
+        wait_for_heatup = wait_for_user = false;
+        dwin_abort_flag = true; // Reset feedrate, return to Home
+      }
+    }
+    DWIN_UpdateLCD();
+  }
+}
+
+//
+// The status area is always on-screen, except during
+// full-screen modal dialogs. (TODO: Keep alive during dialogs)
+//
+void Draw_Status_Area(const bool with_update) {
+
+  DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, STATUS_Y, DWIN_WIDTH, DWIN_HEIGHT - 1);
+
+  #if HAS_HOTEND
+    DWIN_ICON_Show(ICON, ICON_HotendTemp, 10, 383);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 384, thermalManager.wholeDegHotend(0));
+    DWIN_Draw_String(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 384, F("/"));
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 384, thermalManager.degTargetHotend(0));
+
+    DWIN_ICON_Show(ICON, ICON_StepE, 112, 417);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 417, planner.flow_percentage[0]);
+    DWIN_Draw_String(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 417, F("%"));
+  #endif
+
+  #if HAS_HEATED_BED
+    DWIN_ICON_Show(ICON, ICON_BedTemp, 10, 416);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 28, 417, thermalManager.wholeDegBed());
+    DWIN_Draw_String(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 25 + 3 * STAT_CHR_W + 5, 417, F("/"));
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 25 + 4 * STAT_CHR_W + 6, 417, thermalManager.degTargetBed());
+  #endif
+
+  DWIN_ICON_Show(ICON, ICON_Speed, 113, 383);
+  DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 116 + 2 * STAT_CHR_W, 384, feedrate_percentage);
+  DWIN_Draw_String(false, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 116 + 5 * STAT_CHR_W + 2, 384, F("%"));
+
+  #if HAS_FAN
+    DWIN_ICON_Show(ICON, ICON_FanSpeed, 187, 383);
+    DWIN_Draw_IntValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 3, 195 + 2 * STAT_CHR_W, 384, thermalManager.fan_speed[0]);
+  #endif
+
+  #if HAS_ZOFFSET_ITEM
+    DWIN_ICON_Show(ICON, ICON_Zoffset, 187, 416);
+  #endif
+
+  if (BABY_Z_VAR < 0) {
+    DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, -BABY_Z_VAR * 100);
+    DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F("-"));
+  }
+  else {
+    DWIN_Draw_FloatValue(true, true, 0, DWIN_FONT_STAT, Color_White, Color_Bg_Black, 2, 2, 207, 417, BABY_Z_VAR * 100);
+    DWIN_Draw_String(true, font8x16, Color_White, Color_Bg_Black, 205, 419, F(" "));
+  }
+
+  DWIN_Draw_Rectangle(1, Line_Color, 0, 449, DWIN_WIDTH, 451);
+
+  DWIN_ICON_Show(ICON, ICON_MaxSpeedX,  10, 456);
+  DWIN_ICON_Show(ICON, ICON_MaxSpeedY,  95, 456);
+  DWIN_ICON_Show(ICON, ICON_MaxSpeedZ, 180, 456);
+  _draw_xyz_position(true);
+
+  if (with_update) {
+    DWIN_UpdateLCD();
+    delay(5);
+  }
+}
+
+void HMI_StartFrame(const bool with_update) {
+  Goto_MainMenu();
+  Draw_Status_Area(with_update);
+}
+
+void Draw_Info_Menu() {
+  Clear_Main_Window();
+
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(MACHINE_SIZE) * MENU_CHR_W) / 2, 122, F(MACHINE_SIZE));
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(SHORT_BUILD_VERSION) * MENU_CHR_W) / 2, 195, F(SHORT_BUILD_VERSION));
+
+  if (HMI_IsChinese()) {
+    DWIN_Frame_TitleCopy(1, 30, 17, 57, 29); // "Info"
+
+    DWIN_Frame_AreaCopy(1, 197, 149, 252, 161, 108, 102);
+    DWIN_Frame_AreaCopy(1, 1, 164, 56, 176, 108, 175);
+    DWIN_Frame_AreaCopy(1, 58, 164, 113, 176, 105, 248);
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_INFO_SCREEN));
+    #else
+      DWIN_Frame_TitleCopy(1, 190, 16, 215, 26); // "Info"
+    #endif
+
+    DWIN_Frame_AreaCopy(1, 120, 150, 146, 161, 124, 102);
+    DWIN_Frame_AreaCopy(1, 146, 151, 254, 161, 82, 175);
+    DWIN_Frame_AreaCopy(1, 0, 165, 94, 175, 89, 248);
+  }
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Black, (DWIN_WIDTH - strlen(CORP_WEBSITE) * MENU_CHR_W) / 2, 268, F(CORP_WEBSITE));
+
+  Draw_Back_First();
+  LOOP_L_N(i, 3) {
+    DWIN_ICON_Show(ICON, ICON_PrintSize + i, 26, 99 + i * 73);
+    DWIN_Draw_Line(Line_Color, 16, MBASE(2) + i * 73, 256, 156 + i * 73);
+  }
+}
+
+void Draw_Print_File_Menu() {
+  Clear_Title_Bar();
+
+  if (HMI_IsChinese()) {
+    DWIN_Frame_TitleCopy(1, 0, 31, 55, 44); // "Print file"
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title("Print file"); // TODO: GET_TEXT_F
+    #else
+      DWIN_Frame_TitleCopy(1, 52, 31, 137, 41); // "Print file"
+    #endif
+  }
+
+  Redraw_SD_List();
+}
+
+/* Main Process */
+void HMI_MainMenu() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_page.inc(4)) {
+      switch (select_page.now) {
+        case 0: ICON_Print(); break;
+        case 1: ICON_Print(); ICON_Prepare(); break;
+        case 2: ICON_Prepare(); ICON_Control(); break;
+        case 3: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(1); break;
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_page.dec()) {
+      switch (select_page.now) {
+        case 0: ICON_Print(); ICON_Prepare(); break;
+        case 1: ICON_Prepare(); ICON_Control(); break;
+        case 2: ICON_Control(); TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(0); break;
+        case 3: TERN(HAS_ONESTEP_LEVELING, ICON_Leveling, ICON_StartInfo)(1); break;
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_page.now) {
+      case 0: // Print File
+        checkkey = SelectFile;
+        Draw_Print_File_Menu();
+        break;
+
+      case 1: // Prepare
+        checkkey = Prepare;
+        select_prepare.reset();
+        index_prepare = MROWS;
+        Draw_Prepare_Menu();
+        break;
+
+      case 2: // Control
+        checkkey = Control;
+        select_control.reset();
+        index_control = MROWS;
+        Draw_Control_Menu();
+        break;
+
+      case 3: // Leveling or Info
+        #if HAS_ONESTEP_LEVELING
+          checkkey = Leveling;
+          HMI_Leveling();
+        #else
+          checkkey = Info;
+          Draw_Info_Menu();
+        #endif
+        break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+// Select (and Print) File
+void HMI_SelectFile() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+
+  const uint16_t hasUpDir = !card.flag.workDirIsRoot;
+
+  if (encoder_diffState == ENCODER_DIFF_NO) {
+    #if ENABLED(SCROLL_LONG_FILENAMES)
+      if (shift_ms && select_file.now >= 1 + hasUpDir) {
+        // Scroll selected filename every second
+        const millis_t ms = millis();
+        if (ELAPSED(ms, shift_ms)) {
+          const bool was_reset = shift_amt < 0;
+          shift_ms = ms + 375UL + was_reset * 250UL;  // ms per character
+          uint8_t shift_new = shift_amt + 1;           // Try to shift by...
+          Draw_SDItem_Shifted(shift_new);             // Draw the item
+          if (!was_reset && shift_new == 0)           // Was it limited to 0?
+            shift_ms = 0;                             // No scrolling needed
+          else if (shift_new == shift_amt)            // Scroll reached the end
+            shift_new = -1;                           // Reset
+          shift_amt = shift_new;                      // Set new scroll
+        }
+      }
+    #endif
+    return;
+  }
+
+  // First pause is long. Easy.
+  // On reset, long pause must be after 0.
+
+  const uint16_t fullCnt = nr_sd_menu_items();
+
+  if (encoder_diffState == ENCODER_DIFF_CW && fullCnt) {
+    if (select_file.inc(1 + fullCnt)) {
+      const uint8_t itemnum = select_file.now - 1;              // -1 for "Back"
+      if (TERN0(SCROLL_LONG_FILENAMES, shift_ms)) {             // If line was shifted
+        Erase_Menu_Text(itemnum + MROWS - index_file);          // Erase and
+        Draw_SDItem(itemnum - 1);                               // redraw
+      }
+      if (select_file.now > MROWS && select_file.now > index_file) { // Cursor past the bottom
+        index_file = select_file.now;                           // New bottom line
+        Scroll_Menu(DWIN_SCROLL_UP);
+        Draw_SDItem(itemnum, MROWS);                            // Draw and init the shift name
+      }
+      else {
+        Move_Highlight(1, select_file.now + MROWS - index_file); // Just move highlight
+        TERN_(SCROLL_LONG_FILENAMES, Init_Shift_Name());         // ...and init the shift name
+      }
+      TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW && fullCnt) {
+    if (select_file.dec()) {
+      const uint8_t itemnum = select_file.now - 1;              // -1 for "Back"
+      if (TERN0(SCROLL_LONG_FILENAMES, shift_ms)) {             // If line was shifted
+        Erase_Menu_Text(select_file.now + 1 + MROWS - index_file); // Erase and
+        Draw_SDItem(itemnum + 1);                               // redraw
+      }
+      if (select_file.now < index_file - MROWS) {               // Cursor past the top
+        index_file--;                                           // New bottom line
+        Scroll_Menu(DWIN_SCROLL_DOWN);
+        if (index_file == MROWS) {
+          Draw_Back_First();
+          TERN_(SCROLL_LONG_FILENAMES, shift_ms = 0);
+        }
+        else {
+          Draw_SDItem(itemnum, 0);                              // Draw the item (and init shift name)
+        }
+      }
+      else {
+        Move_Highlight(-1, select_file.now + MROWS - index_file); // Just move highlight
+        TERN_(SCROLL_LONG_FILENAMES, Init_Shift_Name());        // ...and init the shift name
+      }
+      TERN_(SCROLL_LONG_FILENAMES, Init_SDItem_Shift());        // Reset left. Init timer.
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    if (select_file.now == 0) { // Back
+      select_page.set(0);
+      Goto_MainMenu();
+    }
+    else if (hasUpDir && select_file.now == 1) { // CD-Up
+      SDCard_Up();
+      goto HMI_SelectFileExit;
+    }
+    else {
+      const uint16_t filenum = select_file.now - 1 - hasUpDir;
+      card.getfilename_sorted(SD_ORDER(filenum, card.get_num_Files()));
+
+      // Enter that folder!
+      if (card.flag.filenameIsDir) {
+        SDCard_Folder(card.filename);
+        goto HMI_SelectFileExit;
+      }
+
+      // Reset highlight for next entry
+      select_print.reset();
+      select_file.reset();
+
+      // Start choice and print SD file
+      HMI_flag.heat_flag = true;
+      HMI_flag.print_finish = false;
+      HMI_ValueStruct.show_mode = 0;
+
+      card.openAndPrintFile(card.filename);
+
+      #if HAS_FAN
+        // All fans on for Ender 3 v2 ?
+        // The slicer should manage this for us.
+        //for (uint8_t i = 0; i < FAN_COUNT; i++)
+        //  thermalManager.fan_speed[i] = 255;
+      #endif
+
+      Goto_PrintProcess();
+    }
+  }
+HMI_SelectFileExit:
+  DWIN_UpdateLCD();
+}
+
+/* Printing */
+void HMI_Printing() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  if (HMI_flag.done_confirm_flag) {
+    if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      HMI_flag.done_confirm_flag = false;
+      dwin_abort_flag = true; // Reset feedrate, return to Home
+    }
+    return;
+  }
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_print.inc(3)) {
+      switch (select_print.now) {
+        case 0: ICON_Tune(); break;
+        case 1:
+          ICON_Tune();
+          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+          break;
+        case 2:
+          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+          ICON_Stop();
+          break;
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_print.dec()) {
+      switch (select_print.now) {
+        case 0:
+          ICON_Tune();
+          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+          break;
+        case 1:
+          if (printingIsPaused()) ICON_Continue(); else ICON_Pause();
+          ICON_Stop();
+          break;
+        case 2: ICON_Stop(); break;
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_print.now) {
+      case 0: // Tune
+        checkkey = Tune;
+        HMI_ValueStruct.show_mode = 0;
+        select_tune.reset();
+        index_tune = MROWS;
+        Draw_Tune_Menu();
+        break;
+      case 1: // Pause
+        if (HMI_flag.pause_flag) {
+          ICON_Pause();
+
+          char cmd[40];
+          cmd[0] = '\0';
+
+          #if BOTH(HAS_HEATED_BED, PAUSE_HEAT)
+            if (resume_bed_temp) sprintf_P(cmd, PSTR("M190 S%i\n"), resume_bed_temp);
+          #endif
+          #if BOTH(HAS_HOTEND, PAUSE_HEAT)
+            if (resume_hotend_temp) sprintf_P(&cmd[strlen(cmd)], PSTR("M109 S%i\n"), resume_hotend_temp);
+          #endif
+
+          strcat_P(cmd, M24_STR);
+          queue.inject(cmd);
+        }
+        else {
+          HMI_flag.select_flag = true;
+          checkkey = Print_window;
+          Popup_window_PauseOrStop();
+        }
+        break;
+
+      case 2: // Stop
+        HMI_flag.select_flag = true;
+        checkkey = Print_window;
+        Popup_window_PauseOrStop();
+        break;
+
+      default: break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* Pause and Stop window */
+void HMI_PauseOrStop() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  if (encoder_diffState == ENCODER_DIFF_CW)
+    Draw_Select_Highlight(false);
+  else if (encoder_diffState == ENCODER_DIFF_CCW)
+    Draw_Select_Highlight(true);
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    if (select_print.now == 1) { // pause window
+      if (HMI_flag.select_flag) {
+        HMI_flag.pause_action = true;
+        ICON_Continue();
+        queue.inject_P(PSTR("M25"));
+      }
+      else {
+        // cancel pause
+      }
+      Goto_PrintProcess();
+    }
+    else if (select_print.now == 2) { // stop window
+      if (HMI_flag.select_flag) {
+        checkkey = Back_Main;
+        if (HMI_flag.home_flag) planner.synchronize(); // Wait for planner moves to finish!
+        wait_for_heatup = wait_for_user = false;       // Stop waiting for heating/user
+        card.abortFilePrintSoon();                     // Let the main loop handle SD abort
+        dwin_abort_flag = true;                        // Reset feedrate, return to Home
+        #ifdef ACTION_ON_CANCEL
+          host_action_cancel();
+        #endif
+        Popup_Window_Home(true);
+      }
+      else
+        Goto_PrintProcess(); // cancel stop
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+void Draw_Move_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_IsChinese()) {
+    DWIN_Frame_TitleCopy(1, 192, 1, 233, 14); // "Move"
+    DWIN_Frame_AreaCopy(1, 58, 118, 106, 132, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 109, 118, 157, 132, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 160, 118, 209, 132, LBLX, MBASE(3));
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 212, 118, 253, 131, LBLX, MBASE(4));
+    #endif
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_MOVE_AXIS));
+    #else
+      DWIN_Frame_TitleCopy(1, 231, 2, 265, 12);                     // "Move"
+    #endif
+    draw_move_en(MBASE(1)); say_x(36, MBASE(1));                    // "Move X"
+    draw_move_en(MBASE(2)); say_y(36, MBASE(2));                    // "Move Y"
+    draw_move_en(MBASE(3)); say_z(36, MBASE(3));                    // "Move Z"
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 123, 192, 176, 202, LBLX, MBASE(4));   // "Extruder"
+    #endif
+  }
+
+  Draw_Back_First(select_axis.now == 0);
+  if (select_axis.now) Draw_Menu_Cursor(select_axis.now);
+
+  // Draw separators and icons
+  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MoveX + i);
+}
+
+void Draw_AdvSet_Menu() {
+  Clear_Main_Window();
+
+  #if ADVSET_CASE_TOTAL >= 6
+    const int16_t scroll = MROWS - index_advset; // Scrolled-up lines
+    #define ASCROL(L) (scroll + (L))
+  #else
+    #define ASCROL(L) (L)
+  #endif
+
+  #define AVISI(L)  WITHIN(ASCROL(L), 0, MROWS)
+
+  Draw_Title(GET_TEXT_F(MSG_ADVANCED_SETTINGS));
+
+  if (AVISI(0)) Draw_Back_First(select_advset.now == 0);
+  if (AVISI(ADVSET_CASE_HOMEOFF)) Draw_Menu_Line(ASCROL(ADVSET_CASE_HOMEOFF), ICON_HomeOff, GET_TEXT(MSG_SET_HOME_OFFSETS),true);  // Home Offset >
+  #if HAS_ONESTEP_LEVELING
+    if (AVISI(ADVSET_CASE_PROBEOFF)) Draw_Menu_Line(ASCROL(ADVSET_CASE_PROBEOFF), ICON_ProbeOff, GET_TEXT(MSG_ZPROBE_OFFSETS),true);  // Probe Offset >
+  #endif
+  if (AVISI(ADVSET_CASE_HEPID)) Draw_Menu_Line(ASCROL(ADVSET_CASE_HEPID), ICON_PIDNozzle, "Hotend PID", false);  // Nozzle PID
+  if (AVISI(ADVSET_CASE_BEDPID)) Draw_Menu_Line(ASCROL(ADVSET_CASE_BEDPID), ICON_PIDbed, "Bed PID", false);  // Bed PID
+  #if ENABLED(POWER_LOSS_RECOVERY)
+    if (AVISI(ADVSET_CASE_PWRLOSSR)) {
+      Draw_Menu_Line(ASCROL(ADVSET_CASE_PWRLOSSR), ICON_Motion, "Power-loss recovery", false);  // Power-loss recovery
+      Draw_Chkb_Line(ASCROL(ADVSET_CASE_PWRLOSSR), recovery.enabled);
+    }
+  #endif
+  if (select_advset.now) Draw_Menu_Cursor(ASCROL(select_advset.now));
+}
+
+void Draw_HomeOff_Menu() {
+  Clear_Main_Window();
+  Draw_Title(GET_TEXT_F(MSG_SET_HOME_OFFSETS));                 // Home Offsets
+  Draw_Back_First(select_item.now == 0);
+  Draw_Menu_Line(1, ICON_HomeOffX, GET_TEXT(MSG_HOME_OFFSET_X));  // Home X Offset
+  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Home_OffX_scaled);
+  Draw_Menu_Line(2, ICON_HomeOffY, GET_TEXT(MSG_HOME_OFFSET_Y));  // Home Y Offset
+  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Home_OffY_scaled);
+  Draw_Menu_Line(3, ICON_HomeOffZ, GET_TEXT(MSG_HOME_OFFSET_Z));  // Home Y Offset
+  DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Home_OffZ_scaled);
+  if (select_item.now) Draw_Menu_Cursor(select_item.now);
+}
+
+#if HAS_ONESTEP_LEVELING
+  void Draw_ProbeOff_Menu() {
+    Clear_Main_Window();
+    Draw_Title(GET_TEXT_F(MSG_ZPROBE_OFFSETS));                 // Probe Offsets
+    Draw_Back_First(select_item.now == 0);
+    Draw_Menu_Line(1, ICON_ProbeOffX, GET_TEXT(MSG_ZPROBE_XOFFSET));  // Probe X Offset
+    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Probe_OffX_scaled);
+    Draw_Menu_Line(2, ICON_ProbeOffY, GET_TEXT(MSG_ZPROBE_YOFFSET));  // Probe Y Offset
+    DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Probe_OffY_scaled);
+    if (select_item.now) Draw_Menu_Cursor(select_item.now);
+  }
+#endif
+
+#include "../../../libs/buzzer.h"
+
+void HMI_AudioFeedback(const bool success=true) {
+  #if HAS_BUZZER
+    if (success) {
+      buzzer.tone(100, 659);
+      buzzer.tone(10, 0);
+      buzzer.tone(100, 698);
+    }
+    else
+      buzzer.tone(40, 440);
+  #endif
+}
+
+/* Prepare */
+void HMI_Prepare() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_prepare.inc(1 + PREPARE_CASE_TOTAL)) {
+      if (select_prepare.now > MROWS && select_prepare.now > index_prepare) {
+        index_prepare = select_prepare.now;
+
+        // Scroll up and draw a blank bottom line
+        Scroll_Menu(DWIN_SCROLL_UP);
+        Draw_Menu_Icon(MROWS, ICON_Axis + select_prepare.now - 1);
+
+        // Draw "More" icon for sub-menus
+        if (index_prepare < 7) Draw_More_Icon(MROWS - index_prepare + 1);
+
+        #if HAS_HOTEND
+          if (index_prepare == PREPARE_CASE_ABS) Item_Prepare_ABS(MROWS);
+        #endif
+        #if HAS_PREHEAT
+          if (index_prepare == PREPARE_CASE_COOL) Item_Prepare_Cool(MROWS);
+        #endif
+        if (index_prepare == PREPARE_CASE_LANG) Item_Prepare_Lang(MROWS);
+      }
+      else {
+        Move_Highlight(1, select_prepare.now + MROWS - index_prepare);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_prepare.dec()) {
+      if (select_prepare.now < index_prepare - MROWS) {
+        index_prepare--;
+        Scroll_Menu(DWIN_SCROLL_DOWN);
+
+        if (index_prepare == MROWS)
+          Draw_Back_First();
+        else
+          Draw_Menu_Line(0, ICON_Axis + select_prepare.now - 1);
+
+        if (index_prepare < 7) Draw_More_Icon(MROWS - index_prepare + 1);
+
+             if (index_prepare == 6) Item_Prepare_Move(0);
+        else if (index_prepare == 7) Item_Prepare_Disable(0);
+        else if (index_prepare == 8) Item_Prepare_Home(0);
+      }
+      else {
+        Move_Highlight(-1, select_prepare.now + MROWS - index_prepare);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_prepare.now) {
+      case 0: // Back
+        select_page.set(1);
+        Goto_MainMenu();
+        break;
+      case PREPARE_CASE_MOVE: // Axis move
+        checkkey = AxisMove;
+        select_axis.reset();
+        Draw_Move_Menu();
+
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(1), current_position.x * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(2), current_position.y * MINUNITMULT);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 216, MBASE(3), current_position.z * MINUNITMULT);
+        #if HAS_HOTEND
+          HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
+          DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
+        #endif
+        break;
+      case PREPARE_CASE_DISA: // Disable steppers
+        queue.inject_P(PSTR("M84"));
+        break;
+      case PREPARE_CASE_HOME: // Homing
+        checkkey = Last_Prepare;
+        index_prepare = MROWS;
+        queue.inject_P(G28_STR); // G28 will set home_flag
+        Popup_Window_Home();
+        break;
+      #if HAS_ZOFFSET_ITEM
+        case PREPARE_CASE_ZOFF: // Z-offset
+          #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
+            checkkey = Homeoffset;
+            HMI_ValueStruct.show_mode = -4;
+            HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
+            DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(PREPARE_CASE_ZOFF + MROWS - index_prepare), HMI_ValueStruct.offset_value);
+            EncoderRate.enabled = true;
+          #else
+            // Apply workspace offset, making the current position 0,0,0
+            queue.inject_P(PSTR("G92 X0 Y0 Z0"));
+            HMI_AudioFeedback();
+          #endif
+          break;
+      #endif
+      #if HAS_PREHEAT
+        case PREPARE_CASE_PLA: // PLA preheat
+          TERN_(HAS_HOTEND, thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0));
+          TERN_(HAS_HEATED_BED, thermalManager.setTargetBed(ui.material_preset[0].bed_temp));
+          TERN_(HAS_FAN, thermalManager.set_fan_speed(0, ui.material_preset[0].fan_speed));
+          break;
+        case PREPARE_CASE_ABS: // ABS preheat
+          TERN_(HAS_HOTEND, thermalManager.setTargetHotend(ui.material_preset[1].hotend_temp, 0));
+          TERN_(HAS_HEATED_BED, thermalManager.setTargetBed(ui.material_preset[1].bed_temp));
+          TERN_(HAS_FAN, thermalManager.set_fan_speed(0, ui.material_preset[1].fan_speed));
+          break;
+        case PREPARE_CASE_COOL: // Cool
+          TERN_(HAS_FAN, thermalManager.zero_fan_speeds());
+          #if HAS_HOTEND || HAS_HEATED_BED
+            thermalManager.disable_all_heaters();
+          #endif
+          break;
+      #endif
+      case PREPARE_CASE_LANG: // Toggle Language
+        HMI_ToggleLanguage();
+        Draw_Prepare_Menu();
+        break;
+      default: break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+void Draw_Temperature_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_IsChinese()) {
+    DWIN_Frame_TitleCopy(1, 236, 2, 263, 13); // "Temperature"
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX, MBASE(TEMP_CASE_TEMP));
+    #endif
+    #if HAS_HEATED_BED
+      DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX, MBASE(TEMP_CASE_BED));
+    #endif
+    #if HAS_FAN
+      DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX, MBASE(TEMP_CASE_FAN));
+    #endif
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 100, 89, 178, 101, LBLX, MBASE(TEMP_CASE_PLA));
+      DWIN_Frame_AreaCopy(1, 180, 89, 260, 100, LBLX, MBASE(TEMP_CASE_ABS));
+    #endif
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_TEMPERATURE));
+    #else
+      DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                       // "Temperature"
+    #endif
+    #ifdef USE_STRING_TITLES
+      #if HAS_HOTEND
+        DWIN_Draw_Label(MBASE(TEMP_CASE_TEMP), GET_TEXT_F(MSG_UBL_SET_TEMP_HOTEND));
+      #endif
+      #if HAS_HEATED_BED
+        DWIN_Draw_Label(MBASE(TEMP_CASE_BED), GET_TEXT_F(MSG_UBL_SET_TEMP_BED));
+      #endif
+      #if HAS_FAN
+        DWIN_Draw_Label(MBASE(TEMP_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+      #endif
+      #if HAS_HOTEND
+        DWIN_Draw_Label(MBASE(TEMP_CASE_PLA), F("PLA Preheat Settings"));
+        DWIN_Draw_Label(MBASE(TEMP_CASE_ABS), F("ABS Preheat Settings"));
+      #endif
+    #else
+      #if HAS_HOTEND
+        DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX, MBASE(TEMP_CASE_TEMP));      // Nozzle...
+        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 44, MBASE(TEMP_CASE_TEMP));     // ...Temperature
+      #endif
+      #if HAS_HEATED_BED
+        DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX, MBASE(TEMP_CASE_BED));       // Bed...
+        DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 27, MBASE(TEMP_CASE_BED));      // ...Temperature
+      #endif
+      #if HAS_FAN
+        DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX, MBASE(TEMP_CASE_FAN));          // Fan speed
+      #endif
+      #if HAS_HOTEND
+        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(TEMP_CASE_PLA));         // Preheat...
+        DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX + 52, MBASE(TEMP_CASE_PLA));    // ...PLA
+        DWIN_Frame_AreaCopy(1, 131, 119, 182, 132, LBLX + 79, MBASE(TEMP_CASE_PLA));  // PLA setting
+        DWIN_Frame_AreaCopy(1, 107, 76, 156, 86, LBLX, MBASE(TEMP_CASE_ABS));         // Preheat...
+        DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 52, MBASE(TEMP_CASE_ABS));    // ...ABS
+        DWIN_Frame_AreaCopy(1, 131, 119, 182, 132, LBLX + 81, MBASE(TEMP_CASE_ABS));  // ABS setting
+      #endif
+    #endif
+  }
+
+  Draw_Back_First(select_temp.now == 0);
+  if (select_temp.now) Draw_Menu_Cursor(select_temp.now);
+
+  // Draw icons and lines
+  uint8_t i = 0;
+  #define _TMENU_ICON(N) Draw_Menu_Line(++i, ICON_SetEndTemp + (N) - 1)
+  #if HAS_HOTEND
+    _TMENU_ICON(TEMP_CASE_TEMP);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.degTargetHotend(0));
+  #endif
+  #if HAS_HEATED_BED
+    _TMENU_ICON(TEMP_CASE_BED);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.degTargetBed());
+  #endif
+  #if HAS_FAN
+    _TMENU_ICON(TEMP_CASE_FAN);
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), thermalManager.fan_speed[0]);
+  #endif
+  #if HAS_HOTEND
+    // PLA/ABS items have submenus
+    _TMENU_ICON(TEMP_CASE_PLA);
+    Draw_More_Icon(i);
+    _TMENU_ICON(TEMP_CASE_ABS);
+    Draw_More_Icon(i);
+  #endif
+}
+
+/* Control */
+void HMI_Control() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_control.inc(1 + CONTROL_CASE_TOTAL)) {
+      if (select_control.now > MROWS && select_control.now > index_control) {
+        index_control = select_control.now;
+
+        // Scroll up and draw a blank bottom line
+        Scroll_Menu(DWIN_SCROLL_UP);
+
+        switch (index_control) {  // Last menu items
+          case CONTROL_CASE_ADVSET:  // Advanced Settings >
+            Draw_Menu_Item(MROWS, ICON_AdvSet, GET_TEXT(MSG_ADVANCED_SETTINGS), true);
+            break;
+          case CONTROL_CASE_INFO:    // Info >
+            Item_Control_Info(MBASE(MROWS));
+            Draw_Menu_Icon(MROWS, ICON_Info);
+            break;
+          default: break;
+        }
+
+      }
+      else {
+        Move_Highlight(1, select_control.now + MROWS - index_control);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_control.dec()) {
+      if (select_control.now < index_control - MROWS) {
+        index_control--;
+        Scroll_Menu(DWIN_SCROLL_DOWN);
+        switch (index_control) {  // First menu items
+          case MROWS :
+          Draw_Back_First();
+            break;
+          case MROWS + 1: // Temperature >
+            Draw_Menu_Line(0, ICON_Temperature, GET_TEXT(MSG_TEMPERATURE), true);
+            break;
+          case MROWS + 2: // Move >
+            Draw_Menu_Line(0, ICON_Motion, GET_TEXT(MSG_MOTION), true);
+          default: break;
+        }
+      }
+      else {
+        Move_Highlight(-1, select_control.now + MROWS - index_control);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_control.now) {
+      case 0: // Back
+        select_page.set(2);
+        Goto_MainMenu();
+        break;
+      case CONTROL_CASE_TEMP: // Temperature
+        checkkey = TemperatureID;
+        HMI_ValueStruct.show_mode = -1;
+        select_temp.reset();
+        Draw_Temperature_Menu();
+        break;
+      case CONTROL_CASE_MOVE: // Motion
+        checkkey = Motion;
+        select_motion.reset();
+        Draw_Motion_Menu();
+        break;
+      #if ENABLED(EEPROM_SETTINGS)
+        case CONTROL_CASE_SAVE: { // Write EEPROM
+          const bool success = settings.save();
+          HMI_AudioFeedback(success);
+        } break;
+        case CONTROL_CASE_LOAD: { // Read EEPROM
+          const bool success = settings.load();
+          HMI_AudioFeedback(success);
+        } break;
+        case CONTROL_CASE_RESET: // Reset EEPROM
+          settings.reset();
+          HMI_AudioFeedback();
+          break;
+      #endif
+      case CONTROL_CASE_ADVSET: // Advanced Settings
+        checkkey = AdvSet;
+        select_advset.reset();
+        Draw_AdvSet_Menu();
+        break;
+      case CONTROL_CASE_INFO: // Info
+        checkkey = Info;
+        Draw_Info_Menu();
+        break;
+      default: break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+
+#if HAS_ONESTEP_LEVELING
+
+  /* Leveling */
+  void HMI_Leveling() {
+    Popup_Window_Leveling();
+    DWIN_UpdateLCD();
+    queue.inject_P(PSTR("G28O\nG29"));
+  }
+
+#endif
+
+/* Axis Move */
+void HMI_AxisMove() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  #if ENABLED(PREVENT_COLD_EXTRUSION)
+    // popup window resume
+    if (HMI_flag.ETempTooLow_flag) {
+      if (encoder_diffState == ENCODER_DIFF_ENTER) {
+        HMI_flag.ETempTooLow_flag = false;
+        HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
+        Draw_Move_Menu();
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(4), 0);
+        DWIN_UpdateLCD();
+      }
+      return;
+    }
+  #endif
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_axis.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_axis.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_axis.dec()) Move_Highlight(-1, select_axis.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_axis.now) {
+      case 0: // Back
+        checkkey = Prepare;
+        select_prepare.set(1);
+        index_prepare = MROWS;
+        Draw_Prepare_Menu();
+        break;
+      case 1: // X axis move
+        checkkey = Move_X;
+        HMI_ValueStruct.Move_X_scaled = current_position.x * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Move_X_scaled);
+        EncoderRate.enabled = true;
+        break;
+      case 2: // Y axis move
+        checkkey = Move_Y;
+        HMI_ValueStruct.Move_Y_scaled = current_position.y * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Move_Y_scaled);
+        EncoderRate.enabled = true;
+        break;
+      case 3: // Z axis move
+        checkkey = Move_Z;
+        HMI_ValueStruct.Move_Z_scaled = current_position.z * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Move_Z_scaled);
+        EncoderRate.enabled = true;
+        break;
+        #if HAS_HOTEND
+          case 4: // Extruder
+            // window tips
+            #ifdef PREVENT_COLD_EXTRUSION
+              if (thermalManager.tooColdToExtrude(0)) {
+                HMI_flag.ETempTooLow_flag = true;
+                Popup_Window_ETempTooLow();
+                DWIN_UpdateLCD();
+                return;
+              }
+            #endif
+            checkkey = Extruder;
+            HMI_ValueStruct.Move_E_scaled = current_position.e * MINUNITMULT;
+            DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(4), HMI_ValueStruct.Move_E_scaled);
+            EncoderRate.enabled = true;
+            break;
+        #endif
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* TemperatureID */
+void HMI_Temperature() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_temp.inc(1 + TEMP_CASE_TOTAL)) Move_Highlight(1, select_temp.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_temp.dec()) Move_Highlight(-1, select_temp.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_temp.now) {
+      case 0: // Back
+        checkkey = Control;
+        select_control.set(1);
+        index_control = MROWS;
+        Draw_Control_Menu();
+        break;
+      #if HAS_HOTEND
+        case TEMP_CASE_TEMP: // Nozzle temperature
+          checkkey = ETemp;
+          HMI_ValueStruct.E_Temp = thermalManager.degTargetHotend(0);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(1), HMI_ValueStruct.E_Temp);
+          EncoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_HEATED_BED
+        case TEMP_CASE_BED: // Bed temperature
+          checkkey = BedTemp;
+          HMI_ValueStruct.Bed_Temp = thermalManager.degTargetBed();
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(2), HMI_ValueStruct.Bed_Temp);
+          EncoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_FAN
+        case TEMP_CASE_FAN: // Fan speed
+          checkkey = FanSpeed;
+          HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(3), HMI_ValueStruct.Fan_speed);
+          EncoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_HOTEND
+        case TEMP_CASE_PLA: { // PLA preheat setting
+          checkkey = PLAPreheat;
+          select_PLA.reset();
+          HMI_ValueStruct.show_mode = -2;
+
+          Clear_Main_Window();
+
+          if (HMI_IsChinese()) {
+            DWIN_Frame_TitleCopy(1, 59, 16, 139, 29);                                         // "PLA Settings"
+            DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_TEMP));
+            DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(PREHEAT_CASE_TEMP));     // PLA nozzle temp
+            #if HAS_HEATED_BED
+              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_BED));
+              DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX + 24, MBASE(PREHEAT_CASE_BED));  // PLA bed temp
+            #endif
+            #if HAS_FAN
+              DWIN_Frame_AreaCopy(1, 100, 89, 124, 101, LBLX, MBASE(PREHEAT_CASE_FAN));
+              DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX + 24, MBASE(PREHEAT_CASE_FAN)); // PLA fan speed
+            #endif
+            #if ENABLED(EEPROM_SETTINGS)
+              DWIN_Frame_AreaCopy(1, 72, 148, 151, 162, LBLX, MBASE(PREHEAT_CASE_SAVE));      // Save PLA configuration
+            #endif
+          }
+          else {
+            #ifdef USE_STRING_HEADINGS
+              Draw_Title("PLA Settings"); // TODO: GET_TEXT_F
+            #else
+              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                       // "PLA Settings"
+            #endif
+            #ifdef USE_STRING_TITLES
+              DWIN_Draw_Label(MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
+              #if HAS_HEATED_BED
+                DWIN_Draw_Label(MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
+              #endif
+              #if HAS_FAN
+                DWIN_Draw_Label(MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+              #endif
+              #if ENABLED(EEPROM_SETTINGS)
+                DWIN_Draw_Label(MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+              #endif
+            #else
+              DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_TEMP));
+              DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(PREHEAT_CASE_TEMP));
+              DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(PREHEAT_CASE_TEMP));      // PLA nozzle temp
+              #if HAS_HEATED_BED
+                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_BED) + 3);
+                DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(PREHEAT_CASE_BED) + 3);
+                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 54, MBASE(PREHEAT_CASE_BED) + 3); // PLA bed temp
+              #endif
+              #if HAS_FAN
+                DWIN_Frame_AreaCopy(1, 157, 76, 181, 86, LBLX, MBASE(PREHEAT_CASE_FAN));
+                DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(PREHEAT_CASE_FAN));    // PLA fan speed
+              #endif
+              #if ENABLED(EEPROM_SETTINGS)
+                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(PREHEAT_CASE_SAVE));      // Save PLA configuration
+              #endif
+            #endif
+          }
+
+          Draw_Back_First();
+
+          uint8_t i = 0;
+          Draw_Menu_Line(++i, ICON_SetEndTemp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[0].hotend_temp);
+          #if HAS_HEATED_BED
+            Draw_Menu_Line(++i, ICON_SetBedTemp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[0].bed_temp);
+          #endif
+          #if HAS_FAN
+            Draw_Menu_Line(++i, ICON_FanSpeed);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[0].fan_speed);
+          #endif
+          #if ENABLED(EEPROM_SETTINGS)
+            Draw_Menu_Line(++i, ICON_WriteEEPROM);
+          #endif
+        } break;
+
+        case TEMP_CASE_ABS: { // ABS preheat setting
+          checkkey = ABSPreheat;
+          select_ABS.reset();
+          HMI_ValueStruct.show_mode = -3;
+
+          Clear_Main_Window();
+
+          if (HMI_IsChinese()) {
+            DWIN_Frame_TitleCopy(1, 142, 16, 223, 29);                                        // "ABS Settings"
+
+            DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_TEMP));
+            DWIN_Frame_AreaCopy(1, 1, 134, 56, 146, LBLX + 24, MBASE(PREHEAT_CASE_TEMP));    // ABS nozzle temp
+            #if HAS_HEATED_BED
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_BED));
+              DWIN_Frame_AreaCopy(1, 58, 134, 113, 146, LBLX + 24, MBASE(PREHEAT_CASE_BED));  // ABS bed temp
+            #endif
+            #if HAS_FAN
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX, MBASE(PREHEAT_CASE_FAN));
+              DWIN_Frame_AreaCopy(1, 115, 134, 170, 146, LBLX + 24, MBASE(PREHEAT_CASE_FAN)); // ABS fan speed
+            #endif
+            #if ENABLED(EEPROM_SETTINGS)
+              DWIN_Frame_AreaCopy(1, 72, 148, 151, 162, LBLX, MBASE(PREHEAT_CASE_SAVE));
+              DWIN_Frame_AreaCopy(1, 180, 89, 204, 100, LBLX + 28, MBASE(PREHEAT_CASE_SAVE) + 2);   // Save ABS configuration
+            #endif
+          }
+          else {
+            #ifdef USE_STRING_HEADINGS
+              Draw_Title("ABS Settings"); // TODO: GET_TEXT_F
+            #else
+              DWIN_Frame_TitleCopy(1, 56, 16, 141, 28);                                                  // "ABS Settings"
+            #endif
+            #ifdef USE_STRING_TITLES
+              DWIN_Draw_Label(MBASE(PREHEAT_CASE_TEMP), F("Nozzle Temp"));
+              #if HAS_HEATED_BED
+                DWIN_Draw_Label(MBASE(PREHEAT_CASE_BED), F("Bed Temp"));
+              #endif
+              #if HAS_FAN
+                DWIN_Draw_Label(MBASE(PREHEAT_CASE_FAN), GET_TEXT_F(MSG_FAN_SPEED));
+              #endif
+              #if ENABLED(EEPROM_SETTINGS)
+                DWIN_Draw_Label(MBASE(PREHEAT_CASE_SAVE), GET_TEXT_F(MSG_STORE_EEPROM));
+              #endif
+            #else
+              DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_TEMP));
+              DWIN_Frame_AreaCopy(1, 197, 104, 238, 114, LBLX + 27, MBASE(PREHEAT_CASE_TEMP));
+              DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 71, MBASE(PREHEAT_CASE_TEMP));      // ABS nozzle temp
+              #if HAS_HEATED_BED
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_BED) + 3);
+                DWIN_Frame_AreaCopy(1, 240, 104, 264, 114, LBLX + 27, MBASE(PREHEAT_CASE_BED) + 3);
+                DWIN_Frame_AreaCopy(1, 1, 89, 83, 101, LBLX + 54, MBASE(PREHEAT_CASE_BED) + 3); // ABS bed temp
+              #endif
+              #if HAS_FAN
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX, MBASE(PREHEAT_CASE_FAN));
+                DWIN_Frame_AreaCopy(1, 0, 119, 64, 132, LBLX + 27, MBASE(PREHEAT_CASE_FAN));             // ABS fan speed
+              #endif
+              #if ENABLED(EEPROM_SETTINGS)
+                DWIN_Frame_AreaCopy(1, 97, 165, 229, 177, LBLX, MBASE(PREHEAT_CASE_SAVE));
+                DWIN_Frame_AreaCopy(1, 172, 76, 198, 86, LBLX + 33, MBASE(PREHEAT_CASE_SAVE));                     // Save ABS configuration
+              #endif
+            #endif
+          }
+
+          Draw_Back_First();
+
+          uint8_t i = 0;
+          Draw_Menu_Line(++i, ICON_SetEndTemp);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[1].hotend_temp);
+          #if HAS_HEATED_BED
+            Draw_Menu_Line(++i, ICON_SetBedTemp);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[1].bed_temp);
+          #endif
+          #if HAS_FAN
+            Draw_Menu_Line(++i, ICON_FanSpeed);
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, 216, MBASE(i), ui.material_preset[1].fan_speed);
+          #endif
+          #if ENABLED(EEPROM_SETTINGS)
+            Draw_Menu_Line(++i, ICON_WriteEEPROM);
+          #endif
+
+        } break;
+
+      #endif // HAS_HOTEND
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+void Draw_Max_Speed_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_IsChinese()) {
+    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Max Speed (mm/s)"
+
+    auto say_max_speed = [](const uint16_t row) {
+      DWIN_Frame_AreaCopy(1, 173, 133, 228, 147, LBLX, row);              // "Max speed"
+    };
+
+    say_max_speed(MBASE(1));                                              // "Max speed"
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 58, MBASE(1));      // X
+    say_max_speed(MBASE(2));                                              // "Max speed"
+    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 58, MBASE(2) + 3);      // Y
+    say_max_speed(MBASE(3));                                              // "Max speed"
+    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 58, MBASE(3) + 3);     // Z
+    #if HAS_HOTEND
+      say_max_speed(MBASE(4));                                            // "Max speed"
+      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 58, MBASE(4) + 3);  // E
+    #endif
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title("Max Speed (mm/s)"); // TODO: GET_TEXT_F
+    #else
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Max Speed (mm/s)"
+    #endif
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(1), F("Max Feedrate X"));
+      DWIN_Draw_Label(MBASE(2), F("Max Feedrate Y"));
+      DWIN_Draw_Label(MBASE(3), F("Max Feedrate Z"));
+      #if HAS_HOTEND
+        DWIN_Draw_Label(MBASE(4), F("Max Feedrate E"));
+      #endif
+    #else
+      draw_max_en(MBASE(1));          // "Max"
+      DWIN_Frame_AreaCopy(1, 184, 119, 234, 132, LBLX + 27, MBASE(1)); // "Speed X"
+
+      draw_max_en(MBASE(2));          // "Max"
+      draw_speed_en(27, MBASE(2));    // "Speed"
+      say_y(70, MBASE(2));            // "Y"
+
+      draw_max_en(MBASE(3));          // "Max"
+      draw_speed_en(27, MBASE(3));    // "Speed"
+      say_z(70, MBASE(3));            // "Z"
+
+      #if HAS_HOTEND
+        draw_max_en(MBASE(4));        // "Max"
+        draw_speed_en(27, MBASE(4));  // "Speed"
+        say_e(70, MBASE(4));          // "E"
+      #endif
+    #endif
+  }
+
+  Draw_Back_First();
+  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedX + i);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(1), planner.settings.max_feedrate_mm_s[X_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(2), planner.settings.max_feedrate_mm_s[Y_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(3), planner.settings.max_feedrate_mm_s[Z_AXIS]);
+  #if HAS_HOTEND
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(4), planner.settings.max_feedrate_mm_s[E_AXIS]);
+  #endif
+}
+
+void Draw_Max_Accel_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_IsChinese()) {
+    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Acceleration"
+
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(1) + 1);
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 71, MBASE(1));   // Max acceleration X
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(2) + 1);
+    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 71, MBASE(2) + 2);   // Max acceleration Y
+    DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(3) + 1);
+    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 71, MBASE(3) + 2);  // Max acceleration Z
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX, MBASE(4));
+      DWIN_Frame_AreaCopy(1, 28, 149, 69, 161, LBLX + 27, MBASE(4) + 1);
+      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 71, MBASE(4) + 2); // Max acceleration E
+    #endif
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_ACCELERATION));
+    #else
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26);          // "Acceleration"
+    #endif
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(1), F("Max Accel X"));
+      DWIN_Draw_Label(MBASE(2), F("Max Accel Y"));
+      DWIN_Draw_Label(MBASE(3), F("Max Accel Z"));
+      #if HAS_HOTEND
+        DWIN_Draw_Label(MBASE(4), F("Max Accel E"));
+      #endif
+    #else
+      draw_max_accel_en(MBASE(1)); say_x(108, MBASE(1));  // "Max Acceleration X"
+      draw_max_accel_en(MBASE(2)); say_y(108, MBASE(2));  // "Max Acceleration Y"
+      draw_max_accel_en(MBASE(3)); say_z(108, MBASE(3));  // "Max Acceleration Z"
+      #if HAS_HOTEND
+        draw_max_accel_en(MBASE(4)); say_e(108, MBASE(4)); // "Max Acceleration E"
+      #endif
+    #endif
+  }
+
+  Draw_Back_First();
+  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxAccX + i);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(1), planner.settings.max_acceleration_mm_per_s2[X_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(2), planner.settings.max_acceleration_mm_per_s2[Y_AXIS]);
+  DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(3), planner.settings.max_acceleration_mm_per_s2[Z_AXIS]);
+  #if HAS_HOTEND
+    DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 4, 210, MBASE(4), planner.settings.max_acceleration_mm_per_s2[E_AXIS]);
+  #endif
+}
+
+#if HAS_CLASSIC_JERK
+  void Draw_Max_Jerk_Menu() {
+    Clear_Main_Window();
+
+    if (HMI_IsChinese()) {
+      DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Jerk"
+
+      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(1));
+      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(1) + 1);
+      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(1));
+      DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 83, MBASE(1));        // Max Jerk speed X
+      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(2));
+      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(2) + 1);
+      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(2));
+      DWIN_Frame_AreaCopy(1,   1, 150,   7, 160, LBLX + 83, MBASE(2) + 3);    // Max Jerk speed Y
+      DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(3));
+      DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(3) + 1);
+      DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(3));
+      DWIN_Frame_AreaCopy(1,   9, 150,  16, 160, LBLX + 83, MBASE(3) + 3);    // Max Jerk speed Z
+      #if HAS_HOTEND
+        DWIN_Frame_AreaCopy(1, 173, 133, 200, 147, LBLX     , MBASE(4));
+        DWIN_Frame_AreaCopy(1,   1, 180,  28, 192, LBLX + 27, MBASE(4) + 1);
+        DWIN_Frame_AreaCopy(1, 202, 133, 228, 147, LBLX + 53, MBASE(4));
+        DWIN_Frame_AreaCopy(1,  18, 150,  25, 160, LBLX + 83, MBASE(4) + 3);  // Max Jerk speed E
+      #endif
+    }
+    else {
+      #ifdef USE_STRING_HEADINGS
+        Draw_Title(GET_TEXT_F(MSG_JERK));
+      #else
+        DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Jerk"
+      #endif
+      #ifdef USE_STRING_TITLES
+        DWIN_Draw_Label(MBASE(1), F("Max Jerk X"));
+        DWIN_Draw_Label(MBASE(2), F("Max Jerk Y"));
+        DWIN_Draw_Label(MBASE(3), F("Max Jerk Z"));
+        #if HAS_HOTEND
+          DWIN_Draw_Label(MBASE(4), F("Max Jerk E"));
+        #endif
+      #else
+        draw_max_en(MBASE(1));          // "Max"
+        draw_jerk_en(MBASE(1));         // "Jerk"
+        draw_speed_en(72, MBASE(1));    // "Speed"
+        say_x(115, MBASE(1));           // "X"
+
+        draw_max_en(MBASE(2));          // "Max"
+        draw_jerk_en(MBASE(2));         // "Jerk"
+        draw_speed_en(72, MBASE(2));    // "Speed"
+        say_y(115, MBASE(2));           // "Y"
+
+        draw_max_en(MBASE(3));          // "Max"
+        draw_jerk_en(MBASE(3));         // "Jerk"
+        draw_speed_en(72, MBASE(3));    // "Speed"
+        say_z(115, MBASE(3));           // "Z"
+
+        #if HAS_HOTEND
+          draw_max_en(MBASE(4));        // "Max"
+          draw_jerk_en(MBASE(4));       // "Jerk"
+          draw_speed_en(72, MBASE(4));  // "Speed"
+          say_e(115, MBASE(4));         // "E"
+        #endif
+      #endif
+    }
+
+    Draw_Back_First();
+    LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_MaxSpeedJerkX + i);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(1), planner.max_jerk[X_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(2), planner.max_jerk[Y_AXIS] * MINUNITMULT);
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(3), planner.max_jerk[Z_AXIS] * MINUNITMULT);
+    #if HAS_HOTEND
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(4), planner.max_jerk[E_AXIS] * MINUNITMULT);
+    #endif
+  }
+#endif
+
+void Draw_Steps_Menu() {
+  Clear_Main_Window();
+
+  if (HMI_IsChinese()) {
+    DWIN_Frame_TitleCopy(1, 1, 16, 28, 28); // "Steps per mm"
+
+    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(1));
+    DWIN_Frame_AreaCopy(1, 229, 133, 236, 147, LBLX + 44, MBASE(1)); // Transmission Ratio X
+    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(2));
+    DWIN_Frame_AreaCopy(1, 1, 150, 7, 160, LBLX + 44, MBASE(2) + 3); // Transmission Ratio Y
+    DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(3));
+    DWIN_Frame_AreaCopy(1, 9, 150, 16, 160, LBLX + 44, MBASE(3) + 3); // Transmission Ratio Z
+    #if HAS_HOTEND
+      DWIN_Frame_AreaCopy(1, 153, 148, 194, 161, LBLX, MBASE(4));
+      DWIN_Frame_AreaCopy(1, 18, 150, 25, 160, LBLX + 44, MBASE(4) + 3); // Transmission Ratio E
+    #endif
+  }
+  else {
+    #ifdef USE_STRING_HEADINGS
+      Draw_Title(GET_TEXT_F(MSG_STEPS_PER_MM));
+    #else
+      DWIN_Frame_TitleCopy(1, 144, 16, 189, 26); // "Steps per mm"
+    #endif
+    #ifdef USE_STRING_TITLES
+      DWIN_Draw_Label(MBASE(1), F("Steps/mm X"));
+      DWIN_Draw_Label(MBASE(2), F("Steps/mm Y"));
+      DWIN_Draw_Label(MBASE(3), F("Steps/mm Z"));
+      #if HAS_HOTEND
+        DWIN_Draw_Label(MBASE(4), F("Steps/mm E"));
+      #endif
+    #else
+      draw_steps_per_mm(MBASE(1)); say_x(103, MBASE(1)); // "Steps-per-mm X"
+      draw_steps_per_mm(MBASE(2)); say_y(103, MBASE(2)); // "Y"
+      draw_steps_per_mm(MBASE(3)); say_z(103, MBASE(3)); // "Z"
+      #if HAS_HOTEND
+        draw_steps_per_mm(MBASE(4)); say_e(103, MBASE(4)); // "E"
+      #endif
+    #endif
+  }
+
+  Draw_Back_First();
+  LOOP_L_N(i, 3 + ENABLED(HAS_HOTEND)) Draw_Menu_Line(i + 1, ICON_StepX + i);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(1), planner.settings.axis_steps_per_mm[X_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(2), planner.settings.axis_steps_per_mm[Y_AXIS] * MINUNITMULT);
+  DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(3), planner.settings.axis_steps_per_mm[Z_AXIS] * MINUNITMULT);
+  #if HAS_HOTEND
+    DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Color_Bg_Black, 3, UNITFDIGITS, 210, MBASE(4), planner.settings.axis_steps_per_mm[E_AXIS] * MINUNITMULT);
+  #endif
+}
+
+/* Motion */
+void HMI_Motion() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_motion.inc(1 + MOTION_CASE_TOTAL)) Move_Highlight(1, select_motion.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_motion.dec()) Move_Highlight(-1, select_motion.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_motion.now) {
+      case 0: // Back
+        checkkey = Control;
+        select_control.set(CONTROL_CASE_MOVE);
+        index_control = MROWS;
+        Draw_Control_Menu();
+        break;
+      case MOTION_CASE_RATE:   // Max speed
+        checkkey = MaxSpeed;
+        select_speed.reset();
+        Draw_Max_Speed_Menu();
+        break;
+      case MOTION_CASE_ACCEL:  // Max acceleration
+        checkkey = MaxAcceleration;
+        select_acc.reset();
+        Draw_Max_Accel_Menu();
+        break;
+      #if HAS_CLASSIC_JERK
+        case MOTION_CASE_JERK: // Max jerk
+          checkkey = MaxJerk;
+          select_jerk.reset();
+          Draw_Max_Jerk_Menu();
+         break;
+      #endif
+      case MOTION_CASE_STEPS:  // Steps per mm
+        checkkey = Step;
+        select_step.reset();
+        Draw_Steps_Menu();
+        break;
+      default: break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* Advanced Settings */
+void HMI_AdvSet() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_advset.inc(1 + ADVSET_CASE_TOTAL)) {
+      if (select_advset.now > MROWS && select_advset.now > index_advset) {
+        index_advset = select_advset.now;
+
+        // Scroll up and draw a blank bottom line
+        Scroll_Menu(DWIN_SCROLL_UP);
+
+        //switch (index_advset) {  // Redraw last menu items
+        //  default: break;
+        //}
+
+      }
+      else {
+        Move_Highlight(1, select_advset.now + MROWS - index_advset);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_advset.dec()) {
+      if (select_advset.now < index_advset - MROWS) {
+        index_advset--;
+        Scroll_Menu(DWIN_SCROLL_DOWN);
+
+        //switch (index_advset) {  // Redraw first menu items
+        //  default: break;
+        //}
+      }
+      else {
+        Move_Highlight(-1, select_advset.now + MROWS - index_advset);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_advset.now) {
+      case 0: // Back
+        checkkey = Control;
+        select_control.set(CONTROL_CASE_ADVSET);
+        index_control = CONTROL_CASE_ADVSET;
+        Draw_Control_Menu();
+        break;
+
+      #if HAS_HOME_OFFSET
+        case ADVSET_CASE_HOMEOFF:   // Home Offsets
+          checkkey = HomeOff;
+          select_item.reset();
+          HMI_ValueStruct.Home_OffX_scaled = home_offset[X_AXIS] * 10;
+          HMI_ValueStruct.Home_OffY_scaled = home_offset[Y_AXIS] * 10;
+          HMI_ValueStruct.Home_OffZ_scaled = home_offset[Z_AXIS] * 10;
+          Draw_HomeOff_Menu();
+          break;
+      #endif
+
+      #if HAS_ONESTEP_LEVELING
+        case ADVSET_CASE_PROBEOFF:   // Probe Offsets
+          checkkey = ProbeOff;
+          select_item.reset();
+          HMI_ValueStruct.Probe_OffX_scaled = probe.offset.x * 10;
+          HMI_ValueStruct.Probe_OffY_scaled = probe.offset.y * 10;
+          Draw_ProbeOff_Menu();
+          break;
+      #endif
+
+      #if HAS_HOTEND
+        case ADVSET_CASE_HEPID:   // Nozzle PID Autotune
+          thermalManager.setTargetHotend(ui.material_preset[0].hotend_temp, 0);
+          thermalManager.PID_autotune(ui.material_preset[0].hotend_temp, H_E0, 10, true);
+          break;
+      #endif
+
+      #if HAS_HEATED_BED
+        case ADVSET_CASE_BEDPID:  // Bed PID Autotune
+          thermalManager.setTargetBed(ui.material_preset[0].bed_temp);
+          thermalManager.PID_autotune(ui.material_preset[0].bed_temp, H_BED, 10, true);
+          break;
+      #endif
+
+      #if ENABLED(POWER_LOSS_RECOVERY)
+        case ADVSET_CASE_PWRLOSSR:  // Power-loss recovery
+          recovery.enable(!recovery.enabled);
+          Draw_Chkb_Line(ADVSET_CASE_PWRLOSSR + MROWS - index_advset, recovery.enabled);
+          break;
+      #endif
+      default: break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+#if HAS_HOME_OFFSET
+
+  /* Home Offset */
+  void HMI_HomeOff() {
+    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+    // Avoid flicker by updating only the previous menu
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      if (select_item.inc(1 + 3)) Move_Highlight(1, select_item.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      if (select_item.dec()) Move_Highlight(-1, select_item.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      switch (select_item.now) {
+        case 0: // Back
+          checkkey = AdvSet;
+          select_advset.set(ADVSET_CASE_HOMEOFF);
+          Draw_AdvSet_Menu();
+          break;
+        case 1: // Home Offset X
+          checkkey = HomeOffX;
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Home_OffX_scaled);
+          EncoderRate.enabled = true;
+          break;
+        case 2: // Home Offset Y
+          checkkey = HomeOffY;
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Home_OffY_scaled);
+          EncoderRate.enabled = true;
+          break;
+        case 3: // Home Offset Z
+          checkkey = HomeOffZ;
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(3), HMI_ValueStruct.Home_OffZ_scaled);
+          EncoderRate.enabled = true;
+          break;
+        default: break;
+      }
+    }
+    DWIN_UpdateLCD();
+  }
+
+  void HMI_HomeOffN(const AxisEnum axis, float &posScaled, const_float_t lo, const_float_t hi) {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      if (Apply_Encoder(encoder_diffState, posScaled)) {
+        checkkey = HomeOff;
+        EncoderRate.enabled = false;
+        set_home_offset(axis, posScaled / 10);
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(select_item.now), posScaled);
+        return;
+      }
+      LIMIT(posScaled, lo, hi);
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 216, MBASE(select_item.now), posScaled);
+    }
+  }
+
+  void HMI_HomeOffX() { HMI_HomeOffN(X_AXIS, HMI_ValueStruct.Home_OffX_scaled, -500, 500); }
+  void HMI_HomeOffY() { HMI_HomeOffN(Y_AXIS, HMI_ValueStruct.Home_OffY_scaled, -500, 500); }
+  void HMI_HomeOffZ() { HMI_HomeOffN(Z_AXIS, HMI_ValueStruct.Home_OffZ_scaled,  -20,  20); }
+
+#endif // HAS_HOME_OFFSET
+
+#if HAS_ONESTEP_LEVELING
+  /*Probe Offset */
+  void HMI_ProbeOff() {
+    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+    // Avoid flicker by updating only the previous menu
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      if (select_item.inc(1 + 2)) Move_Highlight(1, select_item.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      if (select_item.dec()) Move_Highlight(-1, select_item.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      switch (select_item.now) {
+        case 0: // Back
+          checkkey = AdvSet;
+          select_advset.set(ADVSET_CASE_PROBEOFF);
+          Draw_AdvSet_Menu();
+          break;
+        case 1: // Probe Offset X
+          checkkey = ProbeOffX;
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(1), HMI_ValueStruct.Probe_OffX_scaled);
+          EncoderRate.enabled = true;
+          break;
+        case 2: // Probe Offset X
+          checkkey = ProbeOffY;
+          DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, 1, 216, MBASE(2), HMI_ValueStruct.Probe_OffY_scaled);
+          EncoderRate.enabled = true;
+          break;
+      }
+    }
+    DWIN_UpdateLCD();
+  }
+
+  void HMI_ProbeOffN(float &posScaled, float &offset_ref) {
+    ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+    if (encoder_diffState != ENCODER_DIFF_NO) {
+      if (Apply_Encoder(encoder_diffState, posScaled)) {
+        checkkey = ProbeOff;
+        EncoderRate.enabled = false;
+        offset_ref = posScaled / 10;
+        DWIN_Draw_Signed_Float(font8x16, Color_Bg_Black, 3, 1, 216, MBASE(select_item.now), posScaled);
+        return;
+      }
+      LIMIT(posScaled, -500, 500);
+      DWIN_Draw_Signed_Float(font8x16, Select_Color, 3, UNITFDIGITS, 216, MBASE(select_item.now), posScaled);
+    }
+  }
+
+  void HMI_ProbeOffX() { HMI_ProbeOffN(HMI_ValueStruct.Probe_OffX_scaled, probe.offset.x); }
+  void HMI_ProbeOffY() { HMI_ProbeOffN(HMI_ValueStruct.Probe_OffY_scaled, probe.offset.y); }
+
+#endif // HAS_ONESTEP_LEVELING
+
+/* Info */
+void HMI_Info() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+  if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    #if HAS_ONESTEP_LEVELING
+      checkkey = Control;
+      select_control.set(CONTROL_CASE_INFO);
+      Draw_Control_Menu();
+    #else
+      select_page.set(3);
+      Goto_MainMenu();
+    #endif
+  }
+  DWIN_UpdateLCD();
+}
+
+/* Tune */
+void HMI_Tune() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_tune.inc(1 + TUNE_CASE_TOTAL)) {
+      if (select_tune.now > MROWS && select_tune.now > index_tune) {
+        index_tune = select_tune.now;
+        Scroll_Menu(DWIN_SCROLL_UP);
+      }
+      else {
+        Move_Highlight(1, select_tune.now + MROWS - index_tune);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_tune.dec()) {
+      if (select_tune.now < index_tune - MROWS) {
+        index_tune--;
+        Scroll_Menu(DWIN_SCROLL_DOWN);
+        if (index_tune == MROWS) Draw_Back_First();
+      }
+      else {
+        Move_Highlight(-1, select_tune.now + MROWS - index_tune);
+      }
+    }
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    switch (select_tune.now) {
+      case 0: { // Back
+        select_print.set(0);
+        Goto_PrintProcess();
+      }
+      break;
+      case TUNE_CASE_SPEED: // Print speed
+        checkkey = PrintSpeed;
+        HMI_ValueStruct.print_speed = feedrate_percentage;
+        DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_SPEED + MROWS - index_tune), HMI_ValueStruct.print_speed);
+        EncoderRate.enabled = true;
+        break;
+      #if HAS_HOTEND
+        case TUNE_CASE_TEMP: // Nozzle temp
+          checkkey = ETemp;
+          HMI_ValueStruct.E_Temp = thermalManager.degTargetHotend(0);
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_TEMP + MROWS - index_tune), HMI_ValueStruct.E_Temp);
+          EncoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_HEATED_BED
+        case TUNE_CASE_BED: // Bed temp
+          checkkey = BedTemp;
+          HMI_ValueStruct.Bed_Temp = thermalManager.degTargetBed();
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_BED + MROWS - index_tune), HMI_ValueStruct.Bed_Temp);
+          EncoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_FAN
+        case TUNE_CASE_FAN: // Fan speed
+          checkkey = FanSpeed;
+          HMI_ValueStruct.Fan_speed = thermalManager.fan_speed[0];
+          DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(TUNE_CASE_FAN + MROWS - index_tune), HMI_ValueStruct.Fan_speed);
+          EncoderRate.enabled = true;
+          break;
+      #endif
+      #if HAS_ZOFFSET_ITEM
+        case TUNE_CASE_ZOFF: // Z-offset
+          #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
+            checkkey = Homeoffset;
+            HMI_ValueStruct.offset_value = BABY_Z_VAR * 100;
+            DWIN_Draw_Signed_Float(font8x16, Select_Color, 2, 2, 202, MBASE(TUNE_CASE_ZOFF + MROWS - index_tune), HMI_ValueStruct.offset_value);
+            EncoderRate.enabled = true;
+          #else
+            // Apply workspace offset, making the current position 0,0,0
+            queue.inject_P(PSTR("G92 X0 Y0 Z0"));
+            HMI_AudioFeedback();
+          #endif
+        break;
+      #endif
+      default: break;
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+#if HAS_PREHEAT
+
+  /* PLA Preheat */
+  void HMI_PLAPreheatSetting() {
+    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+    // Avoid flicker by updating only the previous menu
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      if (select_PLA.inc(1 + PREHEAT_CASE_TOTAL)) Move_Highlight(1, select_PLA.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      if (select_PLA.dec()) Move_Highlight(-1, select_PLA.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      switch (select_PLA.now) {
+        case 0: // Back
+          checkkey = TemperatureID;
+          select_temp.now = TEMP_CASE_PLA;
+          HMI_ValueStruct.show_mode = -1;
+          Draw_Temperature_Menu();
+          break;
+        #if HAS_HOTEND
+          case PREHEAT_CASE_TEMP: // Nozzle temperature
+            checkkey = ETemp;
+            HMI_ValueStruct.E_Temp = ui.material_preset[0].hotend_temp;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_TEMP), ui.material_preset[0].hotend_temp);
+            EncoderRate.enabled = true;
+            break;
+        #endif
+        #if HAS_HEATED_BED
+          case PREHEAT_CASE_BED: // Bed temperature
+            checkkey = BedTemp;
+            HMI_ValueStruct.Bed_Temp = ui.material_preset[0].bed_temp;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_BED), ui.material_preset[0].bed_temp);
+            EncoderRate.enabled = true;
+            break;
+        #endif
+        #if HAS_FAN
+          case PREHEAT_CASE_FAN: // Fan speed
+            checkkey = FanSpeed;
+            HMI_ValueStruct.Fan_speed = ui.material_preset[0].fan_speed;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_FAN), ui.material_preset[0].fan_speed);
+            EncoderRate.enabled = true;
+            break;
+        #endif
+        #if ENABLED(EEPROM_SETTINGS)
+          case 4: { // Save PLA configuration
+            const bool success = settings.save();
+            HMI_AudioFeedback(success);
+          } break;
+        #endif
+        default: break;
+      }
+    }
+    DWIN_UpdateLCD();
+  }
+
+  /* ABS Preheat */
+  void HMI_ABSPreheatSetting() {
+    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+    // Avoid flicker by updating only the previous menu
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      if (select_ABS.inc(1 + PREHEAT_CASE_TOTAL)) Move_Highlight(1, select_ABS.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      if (select_ABS.dec()) Move_Highlight(-1, select_ABS.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      switch (select_ABS.now) {
+        case 0: // Back
+          checkkey = TemperatureID;
+          select_temp.now = TEMP_CASE_ABS;
+          HMI_ValueStruct.show_mode = -1;
+          Draw_Temperature_Menu();
+          break;
+        #if HAS_HOTEND
+          case PREHEAT_CASE_TEMP: // Set nozzle temperature
+            checkkey = ETemp;
+            HMI_ValueStruct.E_Temp = ui.material_preset[1].hotend_temp;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_TEMP), ui.material_preset[1].hotend_temp);
+            EncoderRate.enabled = true;
+            break;
+        #endif
+        #if HAS_HEATED_BED
+          case PREHEAT_CASE_BED: // Set bed temperature
+            checkkey = BedTemp;
+            HMI_ValueStruct.Bed_Temp = ui.material_preset[1].bed_temp;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_BED), ui.material_preset[1].bed_temp);
+            EncoderRate.enabled = true;
+            break;
+        #endif
+        #if HAS_FAN
+          case PREHEAT_CASE_FAN: // Set fan speed
+            checkkey = FanSpeed;
+            HMI_ValueStruct.Fan_speed = ui.material_preset[1].fan_speed;
+            DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 3, 216, MBASE(PREHEAT_CASE_FAN), ui.material_preset[1].fan_speed);
+            EncoderRate.enabled = true;
+            break;
+        #endif
+        #if ENABLED(EEPROM_SETTINGS)
+          case PREHEAT_CASE_SAVE: { // Save ABS configuration
+            const bool success = settings.save();
+            HMI_AudioFeedback(success);
+          } break;
+        #endif
+        default: break;
+      }
+    }
+    DWIN_UpdateLCD();
+  }
+
+#endif
+
+/* Max Speed */
+void HMI_MaxSpeed() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_speed.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_speed.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_speed.dec()) Move_Highlight(-1, select_speed.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    if (WITHIN(select_speed.now, 1, 4)) {
+      checkkey = MaxSpeed_value;
+      HMI_flag.feedspeed_axis = AxisEnum(select_speed.now - 1);
+      HMI_ValueStruct.Max_Feedspeed = planner.settings.max_feedrate_mm_s[HMI_flag.feedspeed_axis];
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_speed.now), HMI_ValueStruct.Max_Feedspeed);
+      EncoderRate.enabled = true;
+    }
+    else { // Back
+      checkkey = Motion;
+      select_motion.now = MOTION_CASE_RATE;
+      Draw_Motion_Menu();
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+/* Max Acceleration */
+void HMI_MaxAcceleration() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_acc.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_acc.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_acc.dec()) Move_Highlight(-1, select_acc.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    if (WITHIN(select_acc.now, 1, 4)) {
+      checkkey = MaxAcceleration_value;
+      HMI_flag.acc_axis = AxisEnum(select_acc.now - 1);
+      HMI_ValueStruct.Max_Acceleration = planner.settings.max_acceleration_mm_per_s2[HMI_flag.acc_axis];
+      DWIN_Draw_IntValue(true, true, 0, font8x16, Color_White, Select_Color, 4, 210, MBASE(select_acc.now), HMI_ValueStruct.Max_Acceleration);
+      EncoderRate.enabled = true;
+    }
+    else { // Back
+      checkkey = Motion;
+      select_motion.now = MOTION_CASE_ACCEL;
+      Draw_Motion_Menu();
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+#if HAS_CLASSIC_JERK
+  /* Max Jerk */
+  void HMI_MaxJerk() {
+    ENCODER_DiffState encoder_diffState = get_encoder_state();
+    if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+    // Avoid flicker by updating only the previous menu
+    if (encoder_diffState == ENCODER_DIFF_CW) {
+      if (select_jerk.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_jerk.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_CCW) {
+      if (select_jerk.dec()) Move_Highlight(-1, select_jerk.now);
+    }
+    else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+      if (WITHIN(select_jerk.now, 1, 4)) {
+        checkkey = MaxJerk_value;
+        HMI_flag.jerk_axis = AxisEnum(select_jerk.now - 1);
+        HMI_ValueStruct.Max_Jerk_scaled = planner.max_jerk[HMI_flag.jerk_axis] * MINUNITMULT;
+        DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_jerk.now), HMI_ValueStruct.Max_Jerk_scaled);
+        EncoderRate.enabled = true;
+      }
+      else { // Back
+        checkkey = Motion;
+        select_motion.now = MOTION_CASE_JERK;
+        Draw_Motion_Menu();
+      }
+    }
+    DWIN_UpdateLCD();
+  }
+#endif // HAS_CLASSIC_JERK
+
+/* Step */
+void HMI_Step() {
+  ENCODER_DiffState encoder_diffState = get_encoder_state();
+  if (encoder_diffState == ENCODER_DIFF_NO) return;
+
+  // Avoid flicker by updating only the previous menu
+  if (encoder_diffState == ENCODER_DIFF_CW) {
+    if (select_step.inc(1 + 3 + ENABLED(HAS_HOTEND))) Move_Highlight(1, select_step.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_CCW) {
+    if (select_step.dec()) Move_Highlight(-1, select_step.now);
+  }
+  else if (encoder_diffState == ENCODER_DIFF_ENTER) {
+    if (WITHIN(select_step.now, 1, 4)) {
+      checkkey = Step_value;
+      HMI_flag.step_axis = AxisEnum(select_step.now - 1);
+      HMI_ValueStruct.Max_Step_scaled = planner.settings.axis_steps_per_mm[HMI_flag.step_axis] * MINUNITMULT;
+      DWIN_Draw_FloatValue(true, true, 0, font8x16, Color_White, Select_Color, 3, UNITFDIGITS, 210, MBASE(select_step.now), HMI_ValueStruct.Max_Step_scaled);
+      EncoderRate.enabled = true;
+    }
+    else { // Back
+      checkkey = Motion;
+      select_motion.now = MOTION_CASE_STEPS;
+      Draw_Motion_Menu();
+    }
+  }
+  DWIN_UpdateLCD();
+}
+
+void HMI_Init() {
+  HMI_SDCardInit();
+
+  for (uint16_t t = 0; t <= 100; t += 2) {
+    DWIN_ICON_Show(ICON, ICON_Bar, 15, 260);
+    DWIN_Draw_Rectangle(1, Color_Bg_Black, 15 + t * 242 / 100, 260, 257, 280);
+    DWIN_UpdateLCD();
+    delay(20);
+  }
+
+  HMI_SetLanguage();
+}
+
+void DWIN_Update() {
+  EachMomentUpdate();   // Status update
+  HMI_SDCardUpdate();   // SD card update
+  DWIN_HandleScreen();  // Rotary encoder update
+}
+
+void EachMomentUpdate() {
+  static millis_t next_var_update_ms = 0, next_rts_update_ms = 0;
+
+  const millis_t ms = millis();
+  if (ELAPSED(ms, next_var_update_ms)) {
+    next_var_update_ms = ms + DWIN_VAR_UPDATE_INTERVAL;
+    update_variable();
+  }
+
+  if (PENDING(ms, next_rts_update_ms)) return;
+  next_rts_update_ms = ms + DWIN_SCROLL_UPDATE_INTERVAL;
+
+  if (checkkey == PrintProcess) {
+    // if print done
+    if (HMI_flag.print_finish && !HMI_flag.done_confirm_flag) {
+      HMI_flag.print_finish = false;
+      HMI_flag.done_confirm_flag = true;
+
+      TERN_(POWER_LOSS_RECOVERY, recovery.cancel());
+
+      planner.finish_and_disable();
+
+      // show percent bar and value
+      _card_percent = 0;
+      Draw_Print_ProgressBar();
+
+      // show print done confirm
+      DWIN_Draw_Rectangle(1, Color_Bg_Black, 0, 250, DWIN_WIDTH - 1, STATUS_Y);
+      DWIN_ICON_Show(ICON, HMI_IsChinese() ? ICON_Confirm_C : ICON_Confirm_E, 86, 283);
+    }
+    else if (HMI_flag.pause_flag != printingIsPaused()) {
+      // print status update
+      HMI_flag.pause_flag = printingIsPaused();
+      if (HMI_flag.pause_flag) ICON_Continue(); else ICON_Pause();
+    }
+  }
+
+  // pause after homing
+  if (HMI_flag.pause_action && printingIsPaused() && !planner.has_blocks_queued()) {
+    HMI_flag.pause_action = false;
+    #if ENABLED(PAUSE_HEAT)
+      TERN_(HAS_HOTEND, resume_hotend_temp = thermalManager.degTargetHotend(0));
+      TERN_(HAS_HEATED_BED, resume_bed_temp = thermalManager.degTargetBed());
+      thermalManager.disable_all_heaters();
+    #endif
+    queue.inject_P(PSTR("G1 F1200 X0 Y0"));
+  }
+
+  if (card.isPrinting() && checkkey == PrintProcess) { // print process
+    const uint8_t card_pct = card.percentDone();
+    static uint8_t last_cardpercentValue = 101;
+    if (last_cardpercentValue != card_pct) { // print percent
+      last_cardpercentValue = card_pct;
+      if (card_pct) {
+        _card_percent = card_pct;
+        Draw_Print_ProgressBar();
+      }
+    }
+
+    duration_t elapsed = print_job_timer.duration(); // print timer
+
+    // Print time so far
+    static uint16_t last_Printtime = 0;
+    const uint16_t min = (elapsed.value % 3600) / 60;
+    if (last_Printtime != min) { // 1 minute update
+      last_Printtime = min;
+      Draw_Print_ProgressElapsed();
+    }
+
+    // Estimate remaining time every 20 seconds
+    static millis_t next_remain_time_update = 0;
+    if (_card_percent > 1 && ELAPSED(ms, next_remain_time_update) && !HMI_flag.heat_flag) {
+      _remain_time = (elapsed.value - dwin_heat_time) / (_card_percent * 0.01f) - (elapsed.value - dwin_heat_time);
+      next_remain_time_update += DWIN_REMAIN_TIME_UPDATE_INTERVAL;
+      Draw_Print_ProgressRemain();
+    }
+  }
+  else if (dwin_abort_flag && !HMI_flag.home_flag) { // Print Stop
+    dwin_abort_flag = false;
+    HMI_ValueStruct.print_speed = feedrate_percentage = 100;
+    dwin_zoffset = BABY_Z_VAR;
+    select_page.set(0);
+    Goto_MainMenu();
+  }
+  #if ENABLED(POWER_LOSS_RECOVERY)
+    else if (DWIN_lcd_sd_status && recovery.dwin_flag) { // resume print before power off
+      static bool recovery_flag = false;
+
+      recovery.dwin_flag = false;
+      recovery_flag = true;
+
+      auto update_selection = [&](const bool sel) {
+        HMI_flag.select_flag = sel;
+        const uint16_t c1 = sel ? Color_Bg_Window : Select_Color;
+        DWIN_Draw_Rectangle(0, c1, 25, 306, 126, 345);
+        DWIN_Draw_Rectangle(0, c1, 24, 305, 127, 346);
+        const uint16_t c2 = sel ? Select_Color : Color_Bg_Window;
+        DWIN_Draw_Rectangle(0, c2, 145, 306, 246, 345);
+        DWIN_Draw_Rectangle(0, c2, 144, 305, 247, 346);
+      };
+
+      Popup_Window_Resume();
+      update_selection(true);
+
+      // TODO: Get the name of the current file from someplace
+      //
+      //(void)recovery.interrupted_file_exists();
+      char * const name = card.longest_filename();
+      const int8_t npos = _MAX(0U, DWIN_WIDTH - strlen(name) * (MENU_CHR_W)) / 2;
+      DWIN_Draw_String(true, font8x16, Popup_Text_Color, Color_Bg_Window, npos, 252, name);
+      DWIN_UpdateLCD();
+
+      while (recovery_flag) {
+        ENCODER_DiffState encoder_diffState = Encoder_ReceiveAnalyze();
+        if (encoder_diffState != ENCODER_DIFF_NO) {
+          if (encoder_diffState == ENCODER_DIFF_ENTER) {
+            recovery_flag = false;
+            if (HMI_flag.select_flag) break;
+            TERN_(POWER_LOSS_RECOVERY, queue.inject_P(PSTR("M1000C")));
+            HMI_StartFrame(true);
+            return;
+          }
+          else
+            update_selection(encoder_diffState == ENCODER_DIFF_CW);
+
+          DWIN_UpdateLCD();
+        }
+      }
+
+      select_print.set(0);
+      HMI_ValueStruct.show_mode = 0;
+      queue.inject_P(PSTR("M1000"));
+      Goto_PrintProcess();
+      Draw_Status_Area(true);
+    }
+  #endif // POWER_LOSS_RECOVERY
+
+  DWIN_UpdateLCD();
+}
+
+void DWIN_HandleScreen() {
+  switch (checkkey) {
+    case MainMenu:        HMI_MainMenu(); break;
+    case SelectFile:      HMI_SelectFile(); break;
+    case Prepare:         HMI_Prepare(); break;
+    case Control:         HMI_Control(); break;
+    case Leveling:        break;
+    case PrintProcess:    HMI_Printing(); break;
+    case Print_window:    HMI_PauseOrStop(); break;
+    case AxisMove:        HMI_AxisMove(); break;
+    case TemperatureID:   HMI_Temperature(); break;
+    case Motion:          HMI_Motion(); break;
+    case AdvSet:          HMI_AdvSet(); break;
+    #if HAS_HOME_OFFSET
+      case HomeOff:       HMI_HomeOff(); break;
+      case HomeOffX:      HMI_HomeOffX(); break;
+      case HomeOffY:      HMI_HomeOffY(); break;
+      case HomeOffZ:      HMI_HomeOffZ(); break;
+    #endif
+    #if HAS_ONESTEP_LEVELING
+      case ProbeOff:      HMI_ProbeOff(); break;
+      case ProbeOffX:     HMI_ProbeOffX(); break;
+      case ProbeOffY:     HMI_ProbeOffY(); break;
+    #endif
+    case Info:            HMI_Info(); break;
+    case Tune:            HMI_Tune(); break;
+    #if HAS_PREHEAT
+      case PLAPreheat:    HMI_PLAPreheatSetting(); break;
+      case ABSPreheat:    HMI_ABSPreheatSetting(); break;
+    #endif
+    case MaxSpeed:        HMI_MaxSpeed(); break;
+    case MaxAcceleration: HMI_MaxAcceleration(); break;
+    #if HAS_CLASSIC_JERK
+      case MaxJerk:       HMI_MaxJerk(); break;
+    #endif
+    case Step:            HMI_Step(); break;
+    case Move_X:          HMI_Move_X(); break;
+    case Move_Y:          HMI_Move_Y(); break;
+    case Move_Z:          HMI_Move_Z(); break;
+    #if HAS_HOTEND
+      case Extruder:      HMI_Move_E(); break;
+      case ETemp:         HMI_ETemp(); break;
+    #endif
+    #if EITHER(HAS_BED_PROBE, BABYSTEPPING)
+      case Homeoffset:    HMI_Zoffset(); break;
+    #endif
+    #if HAS_HEATED_BED
+      case BedTemp:       HMI_BedTemp(); break;
+    #endif
+    #if HAS_PREHEAT && HAS_FAN
+      case FanSpeed:      HMI_FanSpeed(); break;
+    #endif
+    case PrintSpeed:      HMI_PrintSpeed(); break;
+    case MaxSpeed_value:  HMI_MaxFeedspeedXYZE(); break;
+    case MaxAcceleration_value: HMI_MaxAccelerationXYZE(); break;
+    #if HAS_CLASSIC_JERK
+      case MaxJerk_value: HMI_MaxJerkXYZE(); break;
+    #endif
+    case Step_value:      HMI_StepXYZE(); break;
+    default: break;
+  }
+}
+
+void DWIN_CompletedHoming() {
+  HMI_flag.home_flag = false;
+  dwin_zoffset = TERN0(HAS_BED_PROBE, probe.offset.z);
+  if (checkkey == Last_Prepare) {
+    checkkey = Prepare;
+    select_prepare.now = PREPARE_CASE_HOME;
+    index_prepare = MROWS;
+    Draw_Prepare_Menu();
+  }
+  else if (checkkey == Back_Main) {
+    HMI_ValueStruct.print_speed = feedrate_percentage = 100;
+    planner.finish_and_disable();
+    Goto_MainMenu();
+  }
+}
+
+void DWIN_CompletedLeveling() {
+  if (checkkey == Leveling) Goto_MainMenu();
+}
+
+void DWIN_StatusChanged(const char *text) {
+  DWIN_Draw_Rectangle(1, Color_Bg_Blue, 0, STATUS_Y, DWIN_WIDTH, STATUS_Y + 20);
+  const int8_t x = _MAX(0U, DWIN_WIDTH - strlen_P(text) * MENU_CHR_W) / 2;
+  DWIN_Draw_String(false, font8x16, Color_White, Color_Bg_Blue, x, STATUS_Y + 2, F(text));
+  DWIN_UpdateLCD();
+}
+
+void DWIN_StatusChanged_P(PGM_P const pstr) {
+  char str[strlen_P((const char*)pstr) + 1];
+  strcpy_P(str, (const char*)pstr);
+  DWIN_StatusChanged(str);
+}
+
+// GUI extension
+void DWIN_Draw_Checkbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool mode=false) {
+  DWIN_Draw_String(true, font8x16, Select_Color, bcolor, x + 4, y, F(mode ? "x" : " "));
+  DWIN_Draw_Rectangle(0, color, x + 2, y + 2, x + 17, y + 17);
+}
+
+#endif // DWIN_CREALITY_LCD
