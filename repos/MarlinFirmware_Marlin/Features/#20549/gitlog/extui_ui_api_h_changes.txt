commit ab0173b7e6843f1a6328658e2de742b3bc52ce1b
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Jun 2 15:45:19 2024 -0400

    üö∏ ExtUI: Shaping, Probing limits (#26754)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 7065e21f8f..638f8d88b8 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -74,6 +74,7 @@ namespace ExtUI {
   #if ENABLED(MPC_AUTOTUNE)
     enum mpcresult_t : uint8_t { MPC_STARTED, MPC_TEMP_ERROR, MPC_INTERRUPTED, MPC_DONE };
   #endif
+  struct probe_limits_t { float xmin, ymin, xmax, ymax; };
 
   constexpr uint8_t extruderCount = EXTRUDERS;
   constexpr uint8_t hotendCount   = HOTENDS;
@@ -327,6 +328,13 @@ namespace ExtUI {
     void setLinearAdvance_mm_mm_s(const_float_t, const extruder_t);
   #endif
 
+  #if HAS_SHAPING
+    float getShapingZeta(const axis_t);
+    void setShapingZeta(const float, const axis_t);
+    float getShapingFrequency(const axis_t);
+    void setShapingFrequency(const float, const axis_t);
+  #endif
+
   // JD or Jerk Control
   #if HAS_JUNCTION_DEVIATION
     float getJunctionDeviation_mm();
@@ -367,6 +375,7 @@ namespace ExtUI {
   #if HAS_BED_PROBE
     float getProbeOffset_mm(const axis_t);
     void setProbeOffset_mm(const_float_t, const axis_t);
+    probe_limits_t getBedProbeLimits();
   #endif
 
   // Backlash Control

commit 521e7eafce4921a36532e0a89f2cc7417c2c4e21
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue May 21 15:42:56 2024 -0500

    üßë‚Äçüíª Clarify media "mounted"

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 8202f7be8d..7065e21f8f 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -100,7 +100,7 @@ namespace ExtUI {
 
   /**
    * The Extensible UI API is a utility class that can be used to implement:
-   * - An LCD view that responds to standard events, e.g., onMediaInserted(...)
+   * - An LCD view that responds to standard events, e.g., onMediaMounted(...)
    * - An LCD that polls firmware states and settings in a standard manner.
    *   (e.g., With tool indexes and extruder indexes).
    * - Standard hooks to send data to a serial-based controller.
@@ -451,7 +451,7 @@ namespace ExtUI {
    * Media access routines
    * Use these to operate on files
    */
-  bool isMediaInserted();
+  bool isMediaMounted();
   bool isPrintingFromMediaPaused();
   bool isPrintingFromMedia();
   bool isPrinting();
@@ -486,7 +486,7 @@ namespace ExtUI {
   void onStartup();
   void onIdle();
 
-  void onMediaInserted();
+  void onMediaMounted();
   void onMediaError();
   void onMediaRemoved();
 

commit 87e94f456348e944ba4487aed436c762dd718966
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon Apr 1 16:05:11 2024 -0400

    üö∏ Update ProUI Plot graph - part 2 (#26563)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index b7d670de13..8202f7be8d 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -46,8 +46,10 @@
 
 #include "../marlinui.h"
 #include "../../gcode/gcode.h"
+#include "../../module/temperature.h"
 
-#if M600_PURGE_MORE_RESUMABLE
+#if ENABLED(ADVANCED_PAUSE_FEATURE)
+  #include "../../module/motion.h"
   #include "../../feature/pause.h"
 #endif
 
@@ -66,14 +68,12 @@ namespace ExtUI {
   enum extruder_t : uint8_t { E0, E1, E2, E3, E4, E5, E6, E7 };
   enum heater_t   : uint8_t { H0, H1, H2, H3, H4, H5, BED, CHAMBER, COOLER };
   enum fan_t      : uint8_t { FAN0, FAN1, FAN2, FAN3, FAN4, FAN5, FAN6, FAN7 };
-  enum result_t   : uint8_t {
-    OPTITEM(HAS_PID_HEATING, PID_STARTED)
-    OPTITEM(HAS_PID_HEATING, PID_BED_STARTED)
-    OPTITEM(HAS_PID_HEATING, PID_BAD_HEATER_ID)
-    OPTITEM(HAS_PID_HEATING, PID_TEMP_TOO_HIGH)
-    OPTITEM(HAS_PID_HEATING, PID_TUNING_TIMEOUT)
-    OPTITEM(HAS_PID_HEATING, PID_DONE)
-  };
+  #if HAS_PID_HEATING
+    enum pidresult_t : uint8_t { PID_STARTED, PID_BED_STARTED, PID_CHAMBER_STARTED, PID_BAD_HEATER_ID, PID_TEMP_TOO_HIGH, PID_TUNING_TIMEOUT, PID_DONE };
+  #endif
+  #if ENABLED(MPC_AUTOTUNE)
+    enum mpcresult_t : uint8_t { MPC_STARTED, MPC_TEMP_ERROR, MPC_INTERRUPTED, MPC_DONE };
+  #endif
 
   constexpr uint8_t extruderCount = EXTRUDERS;
   constexpr uint8_t hotendCount   = HOTENDS;
@@ -234,6 +234,9 @@ namespace ExtUI {
     bool getLevelingIsValid();
     void onLevelingStart();
     void onLevelingDone();
+    #if ENABLED(PREHEAT_BEFORE_LEVELING)
+      celsius_t getLevelingBedTemp();
+    #endif
     #if HAS_MESH
       // Mesh data, utilities, events
       bed_mesh_t& getMeshArray();
@@ -312,10 +315,9 @@ namespace ExtUI {
   bool awaitingUserConfirm();
   void setUserConfirmed();
 
-  #if M600_PURGE_MORE_RESUMABLE
+  #if ENABLED(ADVANCED_PAUSE_FEATURE)
     // "Purge More" has a control screen
     void setPauseMenuResponse(PauseMenuResponse);
-    extern PauseMessage pauseModeStatus;
     PauseMode getPauseMode();
   #endif
 
@@ -488,6 +490,10 @@ namespace ExtUI {
   void onMediaError();
   void onMediaRemoved();
 
+  void onHeatingError(const heater_id_t header_id);
+  void onMinTempError(const heater_id_t header_id);
+  void onMaxTempError(const heater_id_t header_id);
+
   void onPlayTone(const uint16_t frequency, const uint16_t duration=0);
 
   void onPrinterKilled(FSTR_P const error, FSTR_P const component);
@@ -503,6 +509,17 @@ namespace ExtUI {
   void onUserConfirmRequired(const char * const msg);
   void onUserConfirmRequired(FSTR_P const fstr);
 
+  // For fancy LCDs include an icon ID, message, and translated button title
+  void onUserConfirmRequired(const int icon, const char * const cstr, FSTR_P const fBtn);
+  void onUserConfirmRequired(const int icon, FSTR_P const fstr, FSTR_P const fBtn);
+
+  #if ENABLED(ADVANCED_PAUSE_FEATURE)
+    // Standard stdOnPauseMode sets pauseModeStatus and calls onUserConfirmRequired
+    extern PauseMessage pauseModeStatus;
+    void stdOnPauseMode(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
+    void onPauseMode(const PauseMessage message, const PauseMode mode=PAUSE_MODE_SAME, const uint8_t extruder=active_extruder);
+  #endif
+
   void onStatusChanged(const char * const msg);
   void onStatusChanged(FSTR_P const fstr);
 
@@ -511,6 +528,8 @@ namespace ExtUI {
 
   void onSteppersDisabled();
   void onSteppersEnabled();
+  void onAxisDisabled(const axis_t axis);
+  void onAxisEnabled(const axis_t axis);
 
   void onFactoryReset();
   void onStoreSettings(char *);
@@ -519,13 +538,23 @@ namespace ExtUI {
   void onSettingsStored(const bool success);
   void onSettingsLoaded(const bool success);
 
+  #if ENABLED(PREVENT_COLD_EXTRUSION)
+    void onSetMinExtrusionTemp(const celsius_t t);
+  #endif
   #if ENABLED(POWER_LOSS_RECOVERY)
     void onSetPowerLoss(const bool onoff);
     void onPowerLoss();
     void onPowerLossResume();
   #endif
   #if HAS_PID_HEATING
-    void onPIDTuning(const result_t rst);
+    void onPIDTuning(const pidresult_t rst);
+    void onStartM303(const int count, const heater_id_t hid, const celsius_t temp);
+  #endif
+  #if ENABLED(MPC_AUTOTUNE)
+    void onMPCTuning(const mpcresult_t rst);
+  #endif
+  #if ENABLED(PLATFORM_M997_SUPPORT)
+    void onFirmwareFlash();
   #endif
 };
 

commit 466282f322ae4f42a8f3db5e3c9765c38445fdc8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Mar 31 18:20:37 2024 -0500

    ü©π Misc. changes from ProUI / ExtUI updates (#26928)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 50ecd13d75..b7d670de13 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -57,18 +57,43 @@ namespace ExtUI {
   // in the EEPROM when the methods onStoreSettings and
   // onLoadSettings are called.
 
-  static constexpr size_t eeprom_data_size = 48;
+  #ifndef EXTUI_EEPROM_DATA_SIZE
+    #define EXTUI_EEPROM_DATA_SIZE 48
+  #endif
+  static constexpr size_t eeprom_data_size = EXTUI_EEPROM_DATA_SIZE;
 
   enum axis_t     : uint8_t { X, Y, Z, I, J, K, U, V, W, X2, Y2, Z2, Z3, Z4 };
   enum extruder_t : uint8_t { E0, E1, E2, E3, E4, E5, E6, E7 };
   enum heater_t   : uint8_t { H0, H1, H2, H3, H4, H5, BED, CHAMBER, COOLER };
   enum fan_t      : uint8_t { FAN0, FAN1, FAN2, FAN3, FAN4, FAN5, FAN6, FAN7 };
-  enum result_t   : uint8_t { PID_STARTED, PID_BAD_HEATER_ID, PID_TEMP_TOO_HIGH, PID_TUNING_TIMEOUT, PID_DONE };
+  enum result_t   : uint8_t {
+    OPTITEM(HAS_PID_HEATING, PID_STARTED)
+    OPTITEM(HAS_PID_HEATING, PID_BED_STARTED)
+    OPTITEM(HAS_PID_HEATING, PID_BAD_HEATER_ID)
+    OPTITEM(HAS_PID_HEATING, PID_TEMP_TOO_HIGH)
+    OPTITEM(HAS_PID_HEATING, PID_TUNING_TIMEOUT)
+    OPTITEM(HAS_PID_HEATING, PID_DONE)
+  };
 
   constexpr uint8_t extruderCount = EXTRUDERS;
   constexpr uint8_t hotendCount   = HOTENDS;
   constexpr uint8_t fanCount      = FAN_COUNT;
 
+  inline const axis_t axis_to_axis_t(const AxisEnum a) {
+    switch (a) {
+      TERN_(HAS_X_AXIS, case X_AXIS:)
+      default: return X;
+      OPTCODE(HAS_Y_AXIS, case Y_AXIS: return Y)
+      OPTCODE(HAS_Z_AXIS, case Z_AXIS: return Z)
+      OPTCODE(HAS_I_AXIS, case I_AXIS: return I)
+      OPTCODE(HAS_J_AXIS, case J_AXIS: return J)
+      OPTCODE(HAS_K_AXIS, case K_AXIS: return K)
+      OPTCODE(HAS_U_AXIS, case U_AXIS: return U)
+      OPTCODE(HAS_V_AXIS, case V_AXIS: return V)
+      OPTCODE(HAS_W_AXIS, case W_AXIS: return W)
+    }
+  }
+
   #if HAS_MESH
     typedef float bed_mesh_t[GRID_MAX_POINTS_X][GRID_MAX_POINTS_Y];
   #endif
@@ -458,38 +483,49 @@ namespace ExtUI {
    */
   void onStartup();
   void onIdle();
+
   void onMediaInserted();
   void onMediaError();
   void onMediaRemoved();
+
   void onPlayTone(const uint16_t frequency, const uint16_t duration=0);
+
   void onPrinterKilled(FSTR_P const error, FSTR_P const component);
   void onSurviveInKilled();
+
   void onPrintTimerStarted();
   void onPrintTimerPaused();
   void onPrintTimerStopped();
   void onPrintDone();
+
   void onFilamentRunout(const extruder_t extruder);
+
   void onUserConfirmRequired(const char * const msg);
   void onUserConfirmRequired(FSTR_P const fstr);
+
   void onStatusChanged(const char * const msg);
   void onStatusChanged(FSTR_P const fstr);
+
   void onHomingStart();
   void onHomingDone();
+
   void onSteppersDisabled();
   void onSteppersEnabled();
+
   void onFactoryReset();
   void onStoreSettings(char *);
   void onLoadSettings(const char *);
   void onPostprocessSettings();
   void onSettingsStored(const bool success);
   void onSettingsLoaded(const bool success);
+
   #if ENABLED(POWER_LOSS_RECOVERY)
     void onSetPowerLoss(const bool onoff);
     void onPowerLoss();
     void onPowerLossResume();
   #endif
   #if HAS_PID_HEATING
-    void onPidTuning(const result_t rst);
+    void onPIDTuning(const result_t rst);
   #endif
 };
 

commit 22fc07d72ba08df8db9545da4286ccd2558ecf30
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 15:03:02 2023 -0500

    üßë‚Äçüíª ExtUI::onPlayTone optional duration

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 28c34bd08a..50ecd13d75 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -43,6 +43,7 @@
  ****************************************************************************/
 
 #include "../../inc/MarlinConfig.h"
+
 #include "../marlinui.h"
 #include "../../gcode/gcode.h"
 
@@ -460,7 +461,7 @@ namespace ExtUI {
   void onMediaInserted();
   void onMediaError();
   void onMediaRemoved();
-  void onPlayTone(const uint16_t frequency, const uint16_t duration);
+  void onPlayTone(const uint16_t frequency, const uint16_t duration=0);
   void onPrinterKilled(FSTR_P const error, FSTR_P const component);
   void onSurviveInKilled();
   void onPrintTimerStarted();

commit 854f3315af645775e7b0aa39bd05db66187bcc38
Author: plampix <plampix@users.noreply.github.com>
Date:   Wed Jan 10 07:33:54 2024 +0100

    ‚ú® EDITABLE_STEPS_PER_UNIT (#26618)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 0d2c3e8d86..28c34bd08a 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -265,8 +265,10 @@ namespace ExtUI {
   void setAxisPosition_mm(const_float_t, const extruder_t, const feedRate_t=0);
 
   // Planner Control
-  void setAxisSteps_per_mm(const_float_t, const axis_t);
-  void setAxisSteps_per_mm(const_float_t, const extruder_t);
+  #if ENABLED(EDITABLE_STEPS_PER_UNIT)
+    void setAxisSteps_per_mm(const_float_t, const axis_t);
+    void setAxisSteps_per_mm(const_float_t, const extruder_t);
+  #endif
   void setAxisMaxFeedrate_mm_s(const feedRate_t, const axis_t);
   void setAxisMaxFeedrate_mm_s(const feedRate_t, const extruder_t);
   void setAxisMaxAcceleration_mm_s2(const_float_t, const axis_t);

commit be031e18509884c42051fba6849af06e089e383f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Oct 3 14:57:07 2023 -0500

    üìù More ExtUI documentation

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 125c85ffa2..0d2c3e8d86 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -72,6 +72,28 @@ namespace ExtUI {
     typedef float bed_mesh_t[GRID_MAX_POINTS_X][GRID_MAX_POINTS_Y];
   #endif
 
+  /**
+   * The Extensible UI API is a utility class that can be used to implement:
+   * - An LCD view that responds to standard events, e.g., onMediaInserted(...)
+   * - An LCD that polls firmware states and settings in a standard manner.
+   *   (e.g., With tool indexes and extruder indexes).
+   * - Standard hooks to send data to a serial-based controller.
+   *
+   * ExtUI is best used when:
+   * - The display handles LCD touch / buttons so the firmware doesn't see these events.
+   * - Commands and value edits are sent over serial to Marlin as G-codes.
+   * - The display can get data from Marlin, but is not necessarily drawn by Marlin.
+   * - The display cannot implement a MarlinUI menu.
+   * - The display is implemented with code callbacks alongside ExtUI callbacks.
+   *
+   * Building an ExtUI layer:
+   * - Start by making an lcd/extui subfolder. Copy 'example' or another display.
+   * - Many of these methods are optional. Implement them according to your UI needs.
+   * - If your display needs information from Marlin, add an accessor to ExtUI.
+   * - If some addition seems like it should be standard part of ExtUI, submit a PR with the new
+   *   methods added to this API. Implement in the ExtUI example and/or with some existing displays.
+   */
+
   bool isMoving();
   bool isAxisPositionKnown(const axis_t);
   bool isAxisPositionKnown(const extruder_t);
@@ -89,11 +111,6 @@ namespace ExtUI {
     bool getHostKeepaliveIsPaused();
   #endif
 
-  bool isHeaterIdle(const heater_t);
-  bool isHeaterIdle(const extruder_t);
-  void enableHeater(const heater_t);
-  void enableHeater(const extruder_t);
-
   #if ENABLED(JOYSTICK)
     void jog(const xyz_float_t &dir);
     void _joystick_update(xyz_float_t &norm_jog);
@@ -101,7 +118,7 @@ namespace ExtUI {
 
   /**
    * Getters and setters
-   * Should be used by the EXTENSIBLE_UI to query or change Marlin's state.
+   * Use to query or change Marlin's state.
    */
   PGM_P getFirmwareName_str();
 
@@ -110,6 +127,7 @@ namespace ExtUI {
     void setSoftEndstopState(const bool);
   #endif
 
+  // Trinamic Current / Bump Sensitivity
   #if HAS_TRINAMIC_CONFIG
     float getAxisCurrent_mA(const axis_t);
     float getAxisCurrent_mA(const extruder_t);
@@ -120,37 +138,50 @@ namespace ExtUI {
     void setTMCBumpSensitivity(const_float_t, const axis_t);
   #endif
 
+  // Actual and target accessors, by Heater ID, Extruder ID, Fan ID
+  void enableHeater(const heater_t);
+  void enableHeater(const extruder_t);
+  bool isHeaterIdle(const heater_t);
+  bool isHeaterIdle(const extruder_t);
   celsius_float_t getActualTemp_celsius(const heater_t);
   celsius_float_t getActualTemp_celsius(const extruder_t);
   celsius_float_t getTargetTemp_celsius(const heater_t);
   celsius_float_t getTargetTemp_celsius(const extruder_t);
-  float getTargetFan_percent(const fan_t);
   float getActualFan_percent(const fan_t);
+  float getTargetFan_percent(const fan_t);
+
+  // High level positions, by Axis ID, Extruder ID
   float getAxisPosition_mm(const axis_t);
   float getAxisPosition_mm(const extruder_t);
+  // Axis steps-per-mm, by Axis ID, Extruder ID
   float getAxisSteps_per_mm(const axis_t);
   float getAxisSteps_per_mm(const extruder_t);
+  // Speed and acceleration limits, per Axis ID or Extruder ID
   feedRate_t getAxisMaxFeedrate_mm_s(const axis_t);
   feedRate_t getAxisMaxFeedrate_mm_s(const extruder_t);
   float getAxisMaxAcceleration_mm_s2(const axis_t);
   float getAxisMaxAcceleration_mm_s2(const extruder_t);
+  // Standard speeds, as set in the planner
   feedRate_t getMinFeedrate_mm_s();
   feedRate_t getMinTravelFeedrate_mm_s();
   feedRate_t getFeedrate_mm_s();
+  // Standard accelerations, as set in the planner
   float getPrintingAcceleration_mm_s2();
   float getRetractAcceleration_mm_s2();
   float getTravelAcceleration_mm_s2();
+  // A speed multiplier for overall printing
   float getFeedrate_percent();
+  // The flow percentage of an extruder
   int16_t getFlow_percent(const extruder_t);
 
+  // Progress / Elapsed Time
   inline uint8_t getProgress_percent() { return ui.get_progress_percent(); }
-
   #if HAS_PRINT_PROGRESS_PERMYRIAD
     inline uint16_t getProgress_permyriad() { return ui.get_progress_permyriad(); }
   #endif
-
   uint32_t getProgress_seconds_elapsed();
 
+  // Material Preheat Presets
   #if HAS_PREHEAT
     uint16_t getMaterial_preset_E(const uint16_t);
     #if HAS_HEATED_BED
@@ -158,6 +189,7 @@ namespace ExtUI {
     #endif
   #endif
 
+  // IDEX Machine Mode
   #if ENABLED(DUAL_X_CARRIAGE)
     uint8_t getIDEX_Mode();
   #endif
@@ -170,12 +202,14 @@ namespace ExtUI {
   #endif
 
   #if HAS_LEVELING
+    // Global leveling state, events
     bool getLevelingActive();
     void setLevelingActive(const bool);
     bool getLevelingIsValid();
     void onLevelingStart();
     void onLevelingDone();
     #if HAS_MESH
+      // Mesh data, utilities, events
       bed_mesh_t& getMeshArray();
       float getMeshPoint(const xy_uint8_t &pos);
       void setMeshPoint(const xy_uint8_t &pos, const_float_t zval);
@@ -198,17 +232,20 @@ namespace ExtUI {
     #endif
   #endif
 
+  // Send an 'M876 S' host response
   #if ENABLED(HOST_PROMPT_SUPPORT)
     void setHostResponse(const uint8_t);
   #endif
 
+  // Provide a simulated click to MarlinUI
   inline void simulateUserClick() {
-    #if ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_JYERSUI)
+    #if ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI)
       ui.lcd_clicked = true;
     #endif
   }
 
   #if ENABLED(PRINTCOUNTER)
+    // Printcounter strings (See nextion_tft.cpp)
     char* getFailedPrints_str(char buffer[21]);
     char* getTotalPrints_str(char buffer[21]);
     char* getFinishedPrints_str(char buffer[21]);
@@ -217,12 +254,17 @@ namespace ExtUI {
     char* getFilamentUsed_str(char buffer[21]);
   #endif
 
+  // Temperature Control
   void setTargetTemp_celsius(const_float_t, const heater_t);
   void setTargetTemp_celsius(const_float_t, const extruder_t);
   void setTargetFan_percent(const_float_t, const fan_t);
   void coolDown();
+
+  // Motion Control
   void setAxisPosition_mm(const_float_t, const axis_t, const feedRate_t=0);
   void setAxisPosition_mm(const_float_t, const extruder_t, const feedRate_t=0);
+
+  // Planner Control
   void setAxisSteps_per_mm(const_float_t, const axis_t);
   void setAxisSteps_per_mm(const_float_t, const extruder_t);
   void setAxisMaxFeedrate_mm_s(const feedRate_t, const axis_t);
@@ -237,20 +279,25 @@ namespace ExtUI {
   void setTravelAcceleration_mm_s2(const_float_t);
   void setFeedrate_percent(const_float_t);
   void setFlow_percent(const int16_t, const extruder_t);
+
+  // Waiting for User Interaction
   bool awaitingUserConfirm();
   void setUserConfirmed();
 
   #if M600_PURGE_MORE_RESUMABLE
+    // "Purge More" has a control screen
     void setPauseMenuResponse(PauseMenuResponse);
     extern PauseMessage pauseModeStatus;
     PauseMode getPauseMode();
   #endif
 
   #if ENABLED(LIN_ADVANCE)
+    // Linear Advance Control
     float getLinearAdvance_mm_mm_s(const extruder_t);
     void setLinearAdvance_mm_mm_s(const_float_t, const extruder_t);
   #endif
 
+  // JD or Jerk Control
   #if HAS_JUNCTION_DEVIATION
     float getJunctionDeviation_mm();
     void setJunctionDeviation_mm(const_float_t);
@@ -261,10 +308,12 @@ namespace ExtUI {
     void setAxisMaxJerk_mm_s(const_float_t, const extruder_t);
   #endif
 
+  // Tool Changing
   extruder_t getTool(const uint8_t extruder);
   extruder_t getActiveTool();
   void setActiveTool(const extruder_t, bool no_move);
 
+  // Babystepping (axis, probe offset)
   #if ENABLED(BABYSTEPPING)
     int16_t mmToWholeSteps(const_float_t mm, const axis_t axis);
     float mmFromWholeSteps(int16_t steps, const axis_t axis);
@@ -273,20 +322,24 @@ namespace ExtUI {
     void smartAdjustAxis_steps(const int16_t steps, const axis_t axis, bool linked_nozzles);
   #endif
 
+  // Hotend Offsets
   #if HAS_HOTEND_OFFSET
     float getNozzleOffset_mm(const axis_t, const extruder_t);
     void setNozzleOffset_mm(const_float_t, const axis_t, const extruder_t);
     void normalizeNozzleOffset(const axis_t axis);
   #endif
 
+  // The Probe Z Offset
   float getZOffset_mm();
   void setZOffset_mm(const_float_t);
 
+  // The Probe XYZ Offset
   #if HAS_BED_PROBE
     float getProbeOffset_mm(const axis_t);
     void setProbeOffset_mm(const_float_t, const axis_t);
   #endif
 
+  // Backlash Control
   #if ENABLED(BACKLASH_GCODE)
     float getAxisBacklash_mm(const axis_t);
     void setAxisBacklash_mm(const_float_t, const axis_t);
@@ -300,6 +353,7 @@ namespace ExtUI {
     #endif
   #endif
 
+  // Filament Runout Sensor
   #if HAS_FILAMENT_SENSOR
     bool getFilamentRunoutEnabled();
     void setFilamentRunoutEnabled(const bool);
@@ -312,6 +366,7 @@ namespace ExtUI {
     #endif
   #endif
 
+  // Case Light Control
   #if ENABLED(CASE_LIGHT_ENABLE)
     bool getCaseLightState();
     void setCaseLightState(const bool);
@@ -322,11 +377,13 @@ namespace ExtUI {
     #endif
   #endif
 
+  // Power-Loss Recovery
   #if ENABLED(POWER_LOSS_RECOVERY)
     bool getPowerLossRecoveryEnabled();
     void setPowerLossRecoveryEnabled(const bool);
   #endif
 
+  // Hotend PID
   #if ENABLED(PIDTEMP)
     float getPID_Kp(const extruder_t);
     float getPID_Ki(const extruder_t);
@@ -335,6 +392,7 @@ namespace ExtUI {
     void startPIDTune(const celsius_t, extruder_t);
   #endif
 
+  // Bed PID
   #if ENABLED(PIDTEMPBED)
     float getBedPID_Kp();
     float getBedPID_Ki();
@@ -361,8 +419,7 @@ namespace ExtUI {
 
   /**
    * Media access routines
-   *
-   * Should be used by the EXTENSIBLE_UI to operate on files
+   * Use these to operate on files
    */
   bool isMediaInserted();
   bool isPrintingFromMediaPaused();
@@ -394,8 +451,7 @@ namespace ExtUI {
 
   /**
    * Event callback routines
-   *
-   * Should be declared by EXTENSIBLE_UI and will be called by Marlin
+   * Must be defined, and will be called by Marlin as needed
    */
   void onStartup();
   void onIdle();

commit 9e0dcd4a2b6d0262ee2b09170aff0c1f21d9175e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jun 1 16:53:02 2023 -0500

    üßë‚Äçüíª ExtUI::onLevelingStart/Done for all leveling (#25913)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 209635ea09..125c85ffa2 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -172,14 +172,14 @@ namespace ExtUI {
   #if HAS_LEVELING
     bool getLevelingActive();
     void setLevelingActive(const bool);
-    bool getMeshValid();
+    bool getLevelingIsValid();
+    void onLevelingStart();
+    void onLevelingDone();
     #if HAS_MESH
       bed_mesh_t& getMeshArray();
       float getMeshPoint(const xy_uint8_t &pos);
       void setMeshPoint(const xy_uint8_t &pos, const_float_t zval);
       void moveToMeshPoint(const xy_uint8_t &pos, const_float_t z);
-      void onLevelingStart();
-      void onLevelingDone();
       void onMeshUpdate(const int8_t xpos, const int8_t ypos, const_float_t zval);
       inline void onMeshUpdate(const xy_int8_t &pos, const_float_t zval) { onMeshUpdate(pos.x, pos.y, zval); }
 

commit 06e5273d24776219253a9229621c034ab263cba7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 31 18:18:25 2023 -0500

    üßë‚Äçüíª CardReader adjustments (#25611)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index d9594bace6..209635ea09 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -376,9 +376,6 @@ namespace ExtUI {
   void resumePrint();
 
   class FileList {
-    private:
-      uint16_t num_files;
-
     public:
       FileList();
       void refresh();

commit 0021a58943721a81b1ef23fa5e7366cfd80a3d28
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Sun Mar 26 04:07:25 2023 -0500

    ‚ú® AnyCubic Vyper / Vyper LCD (#25405)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 98441ccdd9..d9594bace6 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -45,6 +45,7 @@
 #include "../../inc/MarlinConfig.h"
 #include "../marlinui.h"
 #include "../../gcode/gcode.h"
+
 #if M600_PURGE_MORE_RESUMABLE
   #include "../../feature/pause.h"
 #endif
@@ -406,6 +407,7 @@ namespace ExtUI {
   void onMediaRemoved();
   void onPlayTone(const uint16_t frequency, const uint16_t duration);
   void onPrinterKilled(FSTR_P const error, FSTR_P const component);
+  void onSurviveInKilled();
   void onPrintTimerStarted();
   void onPrintTimerPaused();
   void onPrintTimerStopped();

commit 91b5015a8b3ec5efd1052fdf7208124ff8b4120b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Mar 22 03:22:29 2023 -0500

    üßë‚Äçüíª ExtUI::onSetPowerLoss

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 46f0891bb7..98441ccdd9 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -423,9 +423,10 @@ namespace ExtUI {
   void onStoreSettings(char *);
   void onLoadSettings(const char *);
   void onPostprocessSettings();
-  void onSettingsStored(bool success);
-  void onSettingsLoaded(bool success);
+  void onSettingsStored(const bool success);
+  void onSettingsLoaded(const bool success);
   #if ENABLED(POWER_LOSS_RECOVERY)
+    void onSetPowerLoss(const bool onoff);
     void onPowerLoss();
     void onPowerLossResume();
   #endif

commit c950f0f5d1e6804365506d1718e0a4029fb232cf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Feb 19 11:41:50 2023 -0600

    üßë‚Äçüíª ExtUI::onPowerLoss

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index b48dc94f8f..46f0891bb7 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -426,6 +426,7 @@ namespace ExtUI {
   void onSettingsStored(bool success);
   void onSettingsLoaded(bool success);
   #if ENABLED(POWER_LOSS_RECOVERY)
+    void onPowerLoss();
     void onPowerLossResume();
   #endif
   #if HAS_PID_HEATING

commit 6fe387b6f0722033e6cca96fd5e8215ea7b162eb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 15 06:48:17 2023 -0600

    üßë‚Äçüíª Adjust PID / MPC / ProUI
    
    Changes to simplify #25232 WIP

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index c2ce52ba4c..b48dc94f8f 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -61,7 +61,7 @@ namespace ExtUI {
   enum extruder_t : uint8_t { E0, E1, E2, E3, E4, E5, E6, E7 };
   enum heater_t   : uint8_t { H0, H1, H2, H3, H4, H5, BED, CHAMBER, COOLER };
   enum fan_t      : uint8_t { FAN0, FAN1, FAN2, FAN3, FAN4, FAN5, FAN6, FAN7 };
-  enum result_t   : uint8_t { PID_STARTED, PID_BAD_EXTRUDER_NUM, PID_TEMP_TOO_HIGH, PID_TUNING_TIMEOUT, PID_DONE };
+  enum result_t   : uint8_t { PID_STARTED, PID_BAD_HEATER_ID, PID_TEMP_TOO_HIGH, PID_TUNING_TIMEOUT, PID_DONE };
 
   constexpr uint8_t extruderCount = EXTRUDERS;
   constexpr uint8_t hotendCount   = HOTENDS;

commit f595e40ceb0c79d7f0d6438636658dfcfa2a75b8
Author: EvilGremlin <22657714+EvilGremlin@users.noreply.github.com>
Date:   Sun Oct 9 18:30:47 2022 +0300

    ‚ôªÔ∏è Set Progress without LCD (#24767)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index bf32c5703e..c2ce52ba4c 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -164,6 +164,9 @@ namespace ExtUI {
   #if ENABLED(SHOW_REMAINING_TIME)
     inline uint32_t getProgress_seconds_remaining() { return ui.get_remaining_time(); }
   #endif
+  #if ENABLED(SHOW_INTERACTION_TIME)
+    inline uint32_t getInteraction_seconds_remaining() { return ui.interaction_time; }
+  #endif
 
   #if HAS_LEVELING
     bool getLevelingActive();

commit 094701cc71ccf1c6fcf3d768b9fcb227d0abf3b0
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Sun Sep 4 02:51:53 2022 +0200

    üêõ Fix / refactor shared PID (#24673)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 8455518767..bf32c5703e 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -324,18 +324,18 @@ namespace ExtUI {
   #endif
 
   #if ENABLED(PIDTEMP)
-    float getPIDValues_Kp(const extruder_t);
-    float getPIDValues_Ki(const extruder_t);
-    float getPIDValues_Kd(const extruder_t);
-    void setPIDValues(const_float_t, const_float_t , const_float_t , extruder_t);
+    float getPID_Kp(const extruder_t);
+    float getPID_Ki(const extruder_t);
+    float getPID_Kd(const extruder_t);
+    void setPID(const_float_t, const_float_t , const_float_t , extruder_t);
     void startPIDTune(const celsius_t, extruder_t);
   #endif
 
   #if ENABLED(PIDTEMPBED)
-    float getBedPIDValues_Kp();
-    float getBedPIDValues_Ki();
-    float getBedPIDValues_Kd();
-    void setBedPIDValues(const_float_t, const_float_t , const_float_t);
+    float getBedPID_Kp();
+    float getBedPID_Ki();
+    float getBedPID_Kd();
+    void setBedPID(const_float_t, const_float_t , const_float_t);
     void startBedPIDTune(const celsius_t);
   #endif
 

commit 007af4776880fda761e925bce383ac41a7769833
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jul 22 21:59:00 2022 -0500

    ‚ú® Reinstate JyersUI

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 933f6a568e..8455518767 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -199,7 +199,7 @@ namespace ExtUI {
   #endif
 
   inline void simulateUserClick() {
-    #if EITHER(HAS_MARLINUI_MENU, EXTENSIBLE_UI)
+    #if ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_JYERSUI)
       ui.lcd_clicked = true;
     #endif
   }

commit f73fad1b2fa6e70b3d632969ecf2773bee826643
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jul 6 19:34:45 2022 -0500

    üî• Remove JyersUI (#24459)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 8455518767..933f6a568e 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -199,7 +199,7 @@ namespace ExtUI {
   #endif
 
   inline void simulateUserClick() {
-    #if ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_JYERSUI)
+    #if EITHER(HAS_MARLINUI_MENU, EXTENSIBLE_UI)
       ui.lcd_clicked = true;
     #endif
   }

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ‚ú® Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 84b2ed8c6d..8455518767 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -57,7 +57,7 @@ namespace ExtUI {
 
   static constexpr size_t eeprom_data_size = 48;
 
-  enum axis_t     : uint8_t { X, Y, Z, I, J, K, X2, Y2, Z2, Z3, Z4 };
+  enum axis_t     : uint8_t { X, Y, Z, I, J, K, U, V, W, X2, Y2, Z2, Z3, Z4 };
   enum extruder_t : uint8_t { E0, E1, E2, E3, E4, E5, E6, E7 };
   enum heater_t   : uint8_t { H0, H1, H2, H3, H4, H5, BED, CHAMBER, COOLER };
   enum fan_t      : uint8_t { FAN0, FAN1, FAN2, FAN3, FAN4, FAN5, FAN6, FAN7 };

commit d6fcae40c4ded0901aae33f7a1a9d5049ab12b89
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Mar 29 03:38:25 2022 -0500

    üí• Rename ExtUI settings methods

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 248bffb6f4..84b2ed8c6d 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -420,8 +420,8 @@ namespace ExtUI {
   void onStoreSettings(char *);
   void onLoadSettings(const char *);
   void onPostprocessSettings();
-  void onConfigurationStoreWritten(bool success);
-  void onConfigurationStoreRead(bool success);
+  void onSettingsStored(bool success);
+  void onSettingsLoaded(bool success);
   #if ENABLED(POWER_LOSS_RECOVERY)
     void onPowerLossResume();
   #endif

commit de87f5309da712a94da984d611bf1265bdce880c
Author: Julien Staub <atsju2@yahoo.fr>
Date:   Sun Mar 13 23:09:32 2022 +0100

    ü©π Fix ExtUI build with Host Keepalive disabled (#23898)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index b575684a03..248bffb6f4 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -83,8 +83,10 @@ namespace ExtUI {
   void injectCommands(char * const);
   bool commandsInQueue();
 
-  GcodeSuite::MarlinBusyState getHostKeepaliveState();
-  bool getHostKeepaliveIsPaused();
+  #if ENABLED(HOST_KEEPALIVE_FEATURE)
+    GcodeSuite::MarlinBusyState getHostKeepaliveState();
+    bool getHostKeepaliveIsPaused();
+  #endif
 
   bool isHeaterIdle(const heater_t);
   bool isHeaterIdle(const extruder_t);

commit 623c6b720b0d9b14934fb8ccb895d421ab043cc9
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 12 15:58:28 2022 -0600

    üßë‚Äçüíª Add ExtUI::onLevelingDone, match DWIN to ExtUI

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 6753c53740..b575684a03 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -172,7 +172,8 @@ namespace ExtUI {
       float getMeshPoint(const xy_uint8_t &pos);
       void setMeshPoint(const xy_uint8_t &pos, const_float_t zval);
       void moveToMeshPoint(const xy_uint8_t &pos, const_float_t z);
-      void onMeshLevelingStart();
+      void onLevelingStart();
+      void onLevelingDone();
       void onMeshUpdate(const int8_t xpos, const int8_t ypos, const_float_t zval);
       inline void onMeshUpdate(const xy_int8_t &pos, const_float_t zval) { onMeshUpdate(pos.x, pos.y, zval); }
 
@@ -403,14 +404,14 @@ namespace ExtUI {
   void onPrintTimerStarted();
   void onPrintTimerPaused();
   void onPrintTimerStopped();
-  void onPrintFinished();
+  void onPrintDone();
   void onFilamentRunout(const extruder_t extruder);
   void onUserConfirmRequired(const char * const msg);
   void onUserConfirmRequired(FSTR_P const fstr);
   void onStatusChanged(const char * const msg);
   void onStatusChanged(FSTR_P const fstr);
   void onHomingStart();
-  void onHomingComplete();
+  void onHomingDone();
   void onSteppersDisabled();
   void onSteppersEnabled();
   void onFactoryReset();

commit c2fa7e594200a18856e61dcaaa8ef1a689a5121c
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Mon Feb 7 17:24:18 2022 -0500

    PLR accessors for Ext UI (#23687)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 59b509981b..6753c53740 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -315,6 +315,11 @@ namespace ExtUI {
     #endif
   #endif
 
+  #if ENABLED(POWER_LOSS_RECOVERY)
+    bool getPowerLossRecoveryEnabled();
+    void setPowerLossRecoveryEnabled(const bool);
+  #endif
+
   #if ENABLED(PIDTEMP)
     float getPIDValues_Kp(const extruder_t);
     float getPIDValues_Ki(const extruder_t);

commit ab46b7e2f298826a5512569d6e79bb59a7a6b8ea
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jan 25 15:33:03 2022 -0600

    üßë‚Äçüíª HAS_MARLINUI_MENU, HAS_MANUAL_MOVE_MENU

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 04a298ba58..59b509981b 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -196,7 +196,7 @@ namespace ExtUI {
   #endif
 
   inline void simulateUserClick() {
-    #if ANY(HAS_LCD_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_JYERSUI)
+    #if ANY(HAS_MARLINUI_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_JYERSUI)
       ui.lcd_clicked = true;
     #endif
   }

commit 1d80464ba77bc576426f15af28a633bf48d769ad
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 27 21:15:58 2021 -0500

    üé® Define HAS_PREHEAT conditional

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 7e899221ad..04a298ba58 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -148,7 +148,7 @@ namespace ExtUI {
 
   uint32_t getProgress_seconds_elapsed();
 
-  #if PREHEAT_COUNT
+  #if HAS_PREHEAT
     uint16_t getMaterial_preset_E(const uint16_t);
     #if HAS_HEATED_BED
       uint16_t getMaterial_preset_B(const uint16_t);

commit 65b950a489c35b1d5547da3a504af4dad8cde3d7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 20:15:52 2021 -0500

    üé® Apply F() to kill / sendinfoscreen

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 4866c5b9d7..7e899221ad 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -394,7 +394,7 @@ namespace ExtUI {
   void onMediaError();
   void onMediaRemoved();
   void onPlayTone(const uint16_t frequency, const uint16_t duration);
-  void onPrinterKilled(PGM_P const error, PGM_P const component);
+  void onPrinterKilled(FSTR_P const error, FSTR_P const component);
   void onPrintTimerStarted();
   void onPrintTimerPaused();
   void onPrintTimerStopped();

commit 12b5d997a2cee538e5026a68f8e0cfdd53248986
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 25 22:11:48 2021 -0500

    üé® Apply F() to some ExtUI functions

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 9e1ae3a9c0..4866c5b9d7 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -79,6 +79,7 @@ namespace ExtUI {
   bool canMove(const axis_t);
   bool canMove(const extruder_t);
   void injectCommands_P(PGM_P const);
+  inline void injectCommands(FSTR_P const fstr) { injectCommands_P(FTOP(fstr)); }
   void injectCommands(char * const);
   bool commandsInQueue();
 
@@ -400,9 +401,9 @@ namespace ExtUI {
   void onPrintFinished();
   void onFilamentRunout(const extruder_t extruder);
   void onUserConfirmRequired(const char * const msg);
-  void onUserConfirmRequired_P(PGM_P const pstr);
+  void onUserConfirmRequired(FSTR_P const fstr);
   void onStatusChanged(const char * const msg);
-  void onStatusChanged_P(PGM_P const pstr);
+  void onStatusChanged(FSTR_P const fstr);
   void onHomingStart();
   void onHomingComplete();
   void onSteppersDisabled();

commit 08a40c43750eb49521849792520d8d819c0fcd29
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Thu Sep 16 03:46:16 2021 -0400

    ‚ú® Improve pause/filament change for ExtUI (#22655)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 59759319be..9e1ae3a9c0 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -234,6 +234,8 @@ namespace ExtUI {
 
   #if M600_PURGE_MORE_RESUMABLE
     void setPauseMenuResponse(PauseMenuResponse);
+    extern PauseMessage pauseModeStatus;
+    PauseMode getPauseMode();
   #endif
 
   #if ENABLED(LIN_ADVANCE)

commit 43a9c71ef7a1c9e9e294707017d372d344c774ce
Author: Jyers <76993396+Jyers@users.noreply.github.com>
Date:   Mon Sep 6 21:06:27 2021 -0700

    ‚ú® Ender-3 V2 with Jyers UI (#22422)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index faa6c8f41a..59759319be 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -195,7 +195,7 @@ namespace ExtUI {
   #endif
 
   inline void simulateUserClick() {
-    #if EITHER(HAS_LCD_MENU, EXTENSIBLE_UI)
+    #if ANY(HAS_LCD_MENU, EXTENSIBLE_UI, DWIN_CREALITY_LCD_JYERSUI)
       ui.lcd_clicked = true;
     #endif
   }

commit 3ba5eda0b28498a3e557669496e0d6ffec875876
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Fri Jul 9 19:24:14 2021 -0400

    üì∫ ExtUI pause state response (#22164)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 5efd74b8df..faa6c8f41a 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -45,6 +45,9 @@
 #include "../../inc/MarlinConfig.h"
 #include "../marlinui.h"
 #include "../../gcode/gcode.h"
+#if M600_PURGE_MORE_RESUMABLE
+  #include "../../feature/pause.h"
+#endif
 
 namespace ExtUI {
 
@@ -79,7 +82,8 @@ namespace ExtUI {
   void injectCommands(char * const);
   bool commandsInQueue();
 
-  GcodeSuite::MarlinBusyState getMachineBusyState();
+  GcodeSuite::MarlinBusyState getHostKeepaliveState();
+  bool getHostKeepaliveIsPaused();
 
   bool isHeaterIdle(const heater_t);
   bool isHeaterIdle(const extruder_t);
@@ -220,14 +224,18 @@ namespace ExtUI {
   void setFeedrate_mm_s(const feedRate_t);
   void setMinFeedrate_mm_s(const feedRate_t);
   void setMinTravelFeedrate_mm_s(const feedRate_t);
-  void setPrintingAcceleration_mm_s2(const_float_t );
-  void setRetractAcceleration_mm_s2(const_float_t );
-  void setTravelAcceleration_mm_s2(const_float_t );
-  void setFeedrate_percent(const_float_t );
+  void setPrintingAcceleration_mm_s2(const_float_t);
+  void setRetractAcceleration_mm_s2(const_float_t);
+  void setTravelAcceleration_mm_s2(const_float_t);
+  void setFeedrate_percent(const_float_t);
   void setFlow_percent(const int16_t, const extruder_t);
   bool awaitingUserConfirm();
   void setUserConfirmed();
 
+  #if M600_PURGE_MORE_RESUMABLE
+    void setPauseMenuResponse(PauseMenuResponse);
+  #endif
+
   #if ENABLED(LIN_ADVANCE)
     float getLinearAdvance_mm_mm_s(const extruder_t);
     void setLinearAdvance_mm_mm_s(const_float_t, const extruder_t);
@@ -235,7 +243,7 @@ namespace ExtUI {
 
   #if HAS_JUNCTION_DEVIATION
     float getJunctionDeviation_mm();
-    void setJunctionDeviation_mm(const_float_t );
+    void setJunctionDeviation_mm(const_float_t);
   #else
     float getAxisMaxJerk_mm_s(const axis_t);
     float getAxisMaxJerk_mm_s(const extruder_t);
@@ -262,7 +270,7 @@ namespace ExtUI {
   #endif
 
   float getZOffset_mm();
-  void setZOffset_mm(const_float_t );
+  void setZOffset_mm(const_float_t);
 
   #if HAS_BED_PROBE
     float getProbeOffset_mm(const axis_t);
@@ -274,11 +282,11 @@ namespace ExtUI {
     void setAxisBacklash_mm(const_float_t, const axis_t);
 
     float getBacklashCorrection_percent();
-    void setBacklashCorrection_percent(const_float_t );
+    void setBacklashCorrection_percent(const_float_t);
 
     #ifdef BACKLASH_SMOOTHING_MM
       float getBacklashSmoothing_mm();
-      void setBacklashSmoothing_mm(const_float_t );
+      void setBacklashSmoothing_mm(const_float_t);
     #endif
   #endif
 
@@ -290,7 +298,7 @@ namespace ExtUI {
 
     #if HAS_FILAMENT_RUNOUT_DISTANCE
       float getFilamentRunoutDistance_mm();
-      void setFilamentRunoutDistance_mm(const_float_t );
+      void setFilamentRunoutDistance_mm(const_float_t);
     #endif
   #endif
 
@@ -300,7 +308,7 @@ namespace ExtUI {
 
     #if DISABLED(CASE_LIGHT_NO_BRIGHTNESS)
       float getCaseLightBrightness_percent();
-      void setCaseLightBrightness_percent(const_float_t );
+      void setCaseLightBrightness_percent(const_float_t);
     #endif
   #endif
 
@@ -309,15 +317,15 @@ namespace ExtUI {
     float getPIDValues_Ki(const extruder_t);
     float getPIDValues_Kd(const extruder_t);
     void setPIDValues(const_float_t, const_float_t , const_float_t , extruder_t);
-    void startPIDTune(const_float_t, extruder_t);
+    void startPIDTune(const celsius_t, extruder_t);
   #endif
 
   #if ENABLED(PIDTEMPBED)
     float getBedPIDValues_Kp();
     float getBedPIDValues_Ki();
     float getBedPIDValues_Kd();
-    void setBedPIDValues(const_float_t, const_float_t , const_float_t );
-    void startBedPIDTune(const_float_t );
+    void setBedPIDValues(const_float_t, const_float_t , const_float_t);
+    void startBedPIDTune(const celsius_t);
   #endif
 
   /**

commit e5e939bb4c02212ac8a3a7006737b0b8895c7525
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Tue Jul 6 19:32:08 2021 -0600

    üì∫ Assorted small FTDI Eve Touch UI fixes (#22273)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 8d8b0e59e4..5efd74b8df 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -190,7 +190,11 @@ namespace ExtUI {
     void setHostResponse(const uint8_t);
   #endif
 
-  inline void simulateUserClick() { ui.lcd_clicked = true; }
+  inline void simulateUserClick() {
+    #if EITHER(HAS_LCD_MENU, EXTENSIBLE_UI)
+      ui.lcd_clicked = true;
+    #endif
+  }
 
   #if ENABLED(PRINTCOUNTER)
     char* getFailedPrints_str(char buffer[21]);

commit a3e8bb99e472042c7db0b2d0be8d515ee715cf28
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Jun 13 23:08:46 2021 -0400

    üé® ExtUI "user click" and other tweaks (#22122)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 9922fa6799..8d8b0e59e4 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -44,6 +44,7 @@
 
 #include "../../inc/MarlinConfig.h"
 #include "../marlinui.h"
+#include "../../gcode/gcode.h"
 
 namespace ExtUI {
 
@@ -53,7 +54,7 @@ namespace ExtUI {
 
   static constexpr size_t eeprom_data_size = 48;
 
-  enum axis_t     : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, Z4 };
+  enum axis_t     : uint8_t { X, Y, Z, I, J, K, X2, Y2, Z2, Z3, Z4 };
   enum extruder_t : uint8_t { E0, E1, E2, E3, E4, E5, E6, E7 };
   enum heater_t   : uint8_t { H0, H1, H2, H3, H4, H5, BED, CHAMBER, COOLER };
   enum fan_t      : uint8_t { FAN0, FAN1, FAN2, FAN3, FAN4, FAN5, FAN6, FAN7 };
@@ -78,6 +79,8 @@ namespace ExtUI {
   void injectCommands(char * const);
   bool commandsInQueue();
 
+  GcodeSuite::MarlinBusyState getMachineBusyState();
+
   bool isHeaterIdle(const heater_t);
   bool isHeaterIdle(const extruder_t);
   void enableHeater(const heater_t);
@@ -125,6 +128,7 @@ namespace ExtUI {
   float getAxisMaxAcceleration_mm_s2(const extruder_t);
   feedRate_t getMinFeedrate_mm_s();
   feedRate_t getMinTravelFeedrate_mm_s();
+  feedRate_t getFeedrate_mm_s();
   float getPrintingAcceleration_mm_s2();
   float getRetractAcceleration_mm_s2();
   float getTravelAcceleration_mm_s2();
@@ -186,6 +190,8 @@ namespace ExtUI {
     void setHostResponse(const uint8_t);
   #endif
 
+  inline void simulateUserClick() { ui.lcd_clicked = true; }
+
   #if ENABLED(PRINTCOUNTER)
     char* getFailedPrints_str(char buffer[21]);
     char* getTotalPrints_str(char buffer[21]);

commit 6d2c7aa227a5868badc9ab748bbd799a95ed7740
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Thu Jun 10 02:17:39 2021 -0600

    üé® Fix and improve FTDI Eve Touch UI (#22093)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 5603169626..9922fa6799 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -239,6 +239,7 @@ namespace ExtUI {
 
   #if ENABLED(BABYSTEPPING)
     int16_t mmToWholeSteps(const_float_t mm, const axis_t axis);
+    float mmFromWholeSteps(int16_t steps, const axis_t axis);
 
     bool babystepAxis_steps(const int16_t steps, const axis_t axis);
     void smartAdjustAxis_steps(const int16_t steps, const axis_t axis, bool linked_nozzles);

commit 46eb12da51b50f4fdbd482866e366faee446f3f3
Author: vyacheslav-shubin <shubin-vv@krista.ru>
Date:   Sun May 2 04:28:49 2021 +0300

    ExtUI event for PID tuning start (#21734)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index e6452243fd..5603169626 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -57,7 +57,7 @@ namespace ExtUI {
   enum extruder_t : uint8_t { E0, E1, E2, E3, E4, E5, E6, E7 };
   enum heater_t   : uint8_t { H0, H1, H2, H3, H4, H5, BED, CHAMBER, COOLER };
   enum fan_t      : uint8_t { FAN0, FAN1, FAN2, FAN3, FAN4, FAN5, FAN6, FAN7 };
-  enum result_t   : uint8_t { PID_BAD_EXTRUDER_NUM, PID_TEMP_TOO_HIGH, PID_TUNING_TIMEOUT, PID_DONE };
+  enum result_t   : uint8_t { PID_STARTED, PID_BAD_EXTRUDER_NUM, PID_TEMP_TOO_HIGH, PID_TUNING_TIMEOUT, PID_DONE };
 
   constexpr uint8_t extruderCount = EXTRUDERS;
   constexpr uint8_t hotendCount   = HOTENDS;

commit 9c7344487a04940c845d9c39215f0d28ac26208f
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Mon Apr 26 22:40:59 2021 -0600

    FTDI EVE Touch UI fixes (#21706)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 04395bec4e..e6452243fd 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -129,7 +129,7 @@ namespace ExtUI {
   float getRetractAcceleration_mm_s2();
   float getTravelAcceleration_mm_s2();
   float getFeedrate_percent();
-  int16_t getFlowPercentage(const extruder_t);
+  int16_t getFlow_percent(const extruder_t);
 
   inline uint8_t getProgress_percent() { return ui.get_progress_percent(); }
 

commit f424da498a8fabf19a7bdabe23c6d843cd4a5191
Author: vyacheslav-shubin <shubin-vv@krista.ru>
Date:   Sat Apr 24 09:16:14 2021 +0300

    ExtUI::onPostprocessSettings (#21683)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index ba633741f7..04395bec4e 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -389,6 +389,7 @@ namespace ExtUI {
   void onFactoryReset();
   void onStoreSettings(char *);
   void onLoadSettings(const char *);
+  void onPostprocessSettings();
   void onConfigurationStoreWritten(bool success);
   void onConfigurationStoreRead(bool success);
   #if ENABLED(POWER_LOSS_RECOVERY)

commit 3bddbb1110b6ca13a291de426553839b99cae102
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Apr 23 19:06:55 2021 -0500

    Clean up formatting, wrap macros

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index bd017c6bd3..ba633741f7 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -102,11 +102,11 @@ namespace ExtUI {
   #if HAS_TRINAMIC_CONFIG
     float getAxisCurrent_mA(const axis_t);
     float getAxisCurrent_mA(const extruder_t);
-    void  setAxisCurrent_mA(const_float_t , const axis_t);
-    void  setAxisCurrent_mA(const_float_t , const extruder_t);
+    void  setAxisCurrent_mA(const_float_t, const axis_t);
+    void  setAxisCurrent_mA(const_float_t, const extruder_t);
 
      int getTMCBumpSensitivity(const axis_t);
-    void setTMCBumpSensitivity(const_float_t , const axis_t);
+    void setTMCBumpSensitivity(const_float_t, const axis_t);
   #endif
 
   celsius_float_t getActualTemp_celsius(const heater_t);
@@ -195,18 +195,18 @@ namespace ExtUI {
     char* getFilamentUsed_str(char buffer[21]);
   #endif
 
-  void setTargetTemp_celsius(const_float_t , const heater_t);
-  void setTargetTemp_celsius(const_float_t , const extruder_t);
-  void setTargetFan_percent(const_float_t , const fan_t);
+  void setTargetTemp_celsius(const_float_t, const heater_t);
+  void setTargetTemp_celsius(const_float_t, const extruder_t);
+  void setTargetFan_percent(const_float_t, const fan_t);
   void coolDown();
-  void setAxisPosition_mm(const_float_t , const axis_t, const feedRate_t=0);
-  void setAxisPosition_mm(const_float_t , const extruder_t, const feedRate_t=0);
-  void setAxisSteps_per_mm(const_float_t , const axis_t);
-  void setAxisSteps_per_mm(const_float_t , const extruder_t);
+  void setAxisPosition_mm(const_float_t, const axis_t, const feedRate_t=0);
+  void setAxisPosition_mm(const_float_t, const extruder_t, const feedRate_t=0);
+  void setAxisSteps_per_mm(const_float_t, const axis_t);
+  void setAxisSteps_per_mm(const_float_t, const extruder_t);
   void setAxisMaxFeedrate_mm_s(const feedRate_t, const axis_t);
   void setAxisMaxFeedrate_mm_s(const feedRate_t, const extruder_t);
-  void setAxisMaxAcceleration_mm_s2(const_float_t , const axis_t);
-  void setAxisMaxAcceleration_mm_s2(const_float_t , const extruder_t);
+  void setAxisMaxAcceleration_mm_s2(const_float_t, const axis_t);
+  void setAxisMaxAcceleration_mm_s2(const_float_t, const extruder_t);
   void setFeedrate_mm_s(const feedRate_t);
   void setMinFeedrate_mm_s(const feedRate_t);
   void setMinTravelFeedrate_mm_s(const feedRate_t);
@@ -220,7 +220,7 @@ namespace ExtUI {
 
   #if ENABLED(LIN_ADVANCE)
     float getLinearAdvance_mm_mm_s(const extruder_t);
-    void setLinearAdvance_mm_mm_s(const_float_t , const extruder_t);
+    void setLinearAdvance_mm_mm_s(const_float_t, const extruder_t);
   #endif
 
   #if HAS_JUNCTION_DEVIATION
@@ -229,8 +229,8 @@ namespace ExtUI {
   #else
     float getAxisMaxJerk_mm_s(const axis_t);
     float getAxisMaxJerk_mm_s(const extruder_t);
-    void setAxisMaxJerk_mm_s(const_float_t , const axis_t);
-    void setAxisMaxJerk_mm_s(const_float_t , const extruder_t);
+    void setAxisMaxJerk_mm_s(const_float_t, const axis_t);
+    void setAxisMaxJerk_mm_s(const_float_t, const extruder_t);
   #endif
 
   extruder_t getTool(const uint8_t extruder);
@@ -246,7 +246,7 @@ namespace ExtUI {
 
   #if HAS_HOTEND_OFFSET
     float getNozzleOffset_mm(const axis_t, const extruder_t);
-    void setNozzleOffset_mm(const_float_t , const axis_t, const extruder_t);
+    void setNozzleOffset_mm(const_float_t, const axis_t, const extruder_t);
     void normalizeNozzleOffset(const axis_t axis);
   #endif
 
@@ -255,12 +255,12 @@ namespace ExtUI {
 
   #if HAS_BED_PROBE
     float getProbeOffset_mm(const axis_t);
-    void setProbeOffset_mm(const_float_t , const axis_t);
+    void setProbeOffset_mm(const_float_t, const axis_t);
   #endif
 
   #if ENABLED(BACKLASH_GCODE)
     float getAxisBacklash_mm(const axis_t);
-    void setAxisBacklash_mm(const_float_t , const axis_t);
+    void setAxisBacklash_mm(const_float_t, const axis_t);
 
     float getBacklashCorrection_percent();
     void setBacklashCorrection_percent(const_float_t );
@@ -297,15 +297,15 @@ namespace ExtUI {
     float getPIDValues_Kp(const extruder_t);
     float getPIDValues_Ki(const extruder_t);
     float getPIDValues_Kd(const extruder_t);
-    void setPIDValues(const_float_t , const_float_t , const_float_t , extruder_t);
-    void startPIDTune(const_float_t , extruder_t);
+    void setPIDValues(const_float_t, const_float_t , const_float_t , extruder_t);
+    void startPIDTune(const_float_t, extruder_t);
   #endif
 
   #if ENABLED(PIDTEMPBED)
     float getBedPIDValues_Kp();
     float getBedPIDValues_Ki();
     float getBedPIDValues_Kd();
-    void setBedPIDValues(const_float_t , const_float_t , const_float_t );
+    void setBedPIDValues(const_float_t, const_float_t , const_float_t );
     void startBedPIDTune(const_float_t );
   #endif
 

commit 72e3d2492f2085efe9c5fb0b33d67c24baf8a4bc
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Apr 23 19:14:49 2021 -0500

    Update temperature types

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index c59fe0bd17..bd017c6bd3 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -109,10 +109,10 @@ namespace ExtUI {
     void setTMCBumpSensitivity(const_float_t , const axis_t);
   #endif
 
-  float getActualTemp_celsius(const heater_t);
-  float getActualTemp_celsius(const extruder_t);
-  float getTargetTemp_celsius(const heater_t);
-  float getTargetTemp_celsius(const extruder_t);
+  celsius_float_t getActualTemp_celsius(const heater_t);
+  celsius_float_t getActualTemp_celsius(const extruder_t);
+  celsius_float_t getTargetTemp_celsius(const heater_t);
+  celsius_float_t getTargetTemp_celsius(const extruder_t);
   float getTargetFan_percent(const fan_t);
   float getActualFan_percent(const fan_t);
   float getAxisPosition_mm(const axis_t);

commit 75b790376d1b20e0345efc2b8d2a58e9b201f9d3
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Sun Apr 4 17:58:03 2021 -0600

    Touch UI Bed Mesh Screen refactor, enhancements (#21521)
    
    - Split mesh view and edit screen into two screens
    - The editor now live-updates the graphics
    - Added Touch UI mesh progress feedback to `G26`
    - Show positive / negative mesh values in different colors

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 24bf284648..c59fe0bd17 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -168,10 +168,14 @@ namespace ExtUI {
       inline void onMeshUpdate(const xy_int8_t &pos, const_float_t zval) { onMeshUpdate(pos.x, pos.y, zval); }
 
       typedef enum : uint8_t {
-        MESH_START,    // Prior to start of probe
-        MESH_FINISH,   // Following probe of all points
-        PROBE_START,   // Beginning probe of grid location
-        PROBE_FINISH   // Finished probe of grid location
+        G29_START,        // Prior to start of probe
+        G29_FINISH,       // Following probe of all points
+        G29_POINT_START,  // Beginning probe of grid location
+        G29_POINT_FINISH, // Finished probe of grid location
+        G26_START,
+        G26_FINISH,
+        G26_POINT_START,
+        G26_POINT_FINISH
       } probe_state_t;
       void onMeshUpdate(const int8_t xpos, const int8_t ypos, probe_state_t state);
       inline void onMeshUpdate(const xy_int8_t &pos, probe_state_t state) { onMeshUpdate(pos.x, pos.y, state); }

commit 62f37669dc506a6e579389ca549ce5993548944d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Apr 1 17:59:57 2021 -0500

    Replace 'const float &' with 'const_float_t' (#21505)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index ea49a3b63d..24bf284648 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -102,11 +102,11 @@ namespace ExtUI {
   #if HAS_TRINAMIC_CONFIG
     float getAxisCurrent_mA(const axis_t);
     float getAxisCurrent_mA(const extruder_t);
-    void  setAxisCurrent_mA(const float&, const axis_t);
-    void  setAxisCurrent_mA(const float&, const extruder_t);
+    void  setAxisCurrent_mA(const_float_t , const axis_t);
+    void  setAxisCurrent_mA(const_float_t , const extruder_t);
 
      int getTMCBumpSensitivity(const axis_t);
-    void setTMCBumpSensitivity(const float&, const axis_t);
+    void setTMCBumpSensitivity(const_float_t , const axis_t);
   #endif
 
   float getActualTemp_celsius(const heater_t);
@@ -161,11 +161,11 @@ namespace ExtUI {
     #if HAS_MESH
       bed_mesh_t& getMeshArray();
       float getMeshPoint(const xy_uint8_t &pos);
-      void setMeshPoint(const xy_uint8_t &pos, const float &zval);
-      void moveToMeshPoint(const xy_uint8_t &pos, const float &z);
+      void setMeshPoint(const xy_uint8_t &pos, const_float_t zval);
+      void moveToMeshPoint(const xy_uint8_t &pos, const_float_t z);
       void onMeshLevelingStart();
-      void onMeshUpdate(const int8_t xpos, const int8_t ypos, const float &zval);
-      inline void onMeshUpdate(const xy_int8_t &pos, const float &zval) { onMeshUpdate(pos.x, pos.y, zval); }
+      void onMeshUpdate(const int8_t xpos, const int8_t ypos, const_float_t zval);
+      inline void onMeshUpdate(const xy_int8_t &pos, const_float_t zval) { onMeshUpdate(pos.x, pos.y, zval); }
 
       typedef enum : uint8_t {
         MESH_START,    // Prior to start of probe
@@ -191,42 +191,42 @@ namespace ExtUI {
     char* getFilamentUsed_str(char buffer[21]);
   #endif
 
-  void setTargetTemp_celsius(const float&, const heater_t);
-  void setTargetTemp_celsius(const float&, const extruder_t);
-  void setTargetFan_percent(const float&, const fan_t);
+  void setTargetTemp_celsius(const_float_t , const heater_t);
+  void setTargetTemp_celsius(const_float_t , const extruder_t);
+  void setTargetFan_percent(const_float_t , const fan_t);
   void coolDown();
-  void setAxisPosition_mm(const float&, const axis_t, const feedRate_t=0);
-  void setAxisPosition_mm(const float&, const extruder_t, const feedRate_t=0);
-  void setAxisSteps_per_mm(const float&, const axis_t);
-  void setAxisSteps_per_mm(const float&, const extruder_t);
+  void setAxisPosition_mm(const_float_t , const axis_t, const feedRate_t=0);
+  void setAxisPosition_mm(const_float_t , const extruder_t, const feedRate_t=0);
+  void setAxisSteps_per_mm(const_float_t , const axis_t);
+  void setAxisSteps_per_mm(const_float_t , const extruder_t);
   void setAxisMaxFeedrate_mm_s(const feedRate_t, const axis_t);
   void setAxisMaxFeedrate_mm_s(const feedRate_t, const extruder_t);
-  void setAxisMaxAcceleration_mm_s2(const float&, const axis_t);
-  void setAxisMaxAcceleration_mm_s2(const float&, const extruder_t);
+  void setAxisMaxAcceleration_mm_s2(const_float_t , const axis_t);
+  void setAxisMaxAcceleration_mm_s2(const_float_t , const extruder_t);
   void setFeedrate_mm_s(const feedRate_t);
   void setMinFeedrate_mm_s(const feedRate_t);
   void setMinTravelFeedrate_mm_s(const feedRate_t);
-  void setPrintingAcceleration_mm_s2(const float&);
-  void setRetractAcceleration_mm_s2(const float&);
-  void setTravelAcceleration_mm_s2(const float&);
-  void setFeedrate_percent(const float&);
+  void setPrintingAcceleration_mm_s2(const_float_t );
+  void setRetractAcceleration_mm_s2(const_float_t );
+  void setTravelAcceleration_mm_s2(const_float_t );
+  void setFeedrate_percent(const_float_t );
   void setFlow_percent(const int16_t, const extruder_t);
   bool awaitingUserConfirm();
   void setUserConfirmed();
 
   #if ENABLED(LIN_ADVANCE)
     float getLinearAdvance_mm_mm_s(const extruder_t);
-    void setLinearAdvance_mm_mm_s(const float&, const extruder_t);
+    void setLinearAdvance_mm_mm_s(const_float_t , const extruder_t);
   #endif
 
   #if HAS_JUNCTION_DEVIATION
     float getJunctionDeviation_mm();
-    void setJunctionDeviation_mm(const float&);
+    void setJunctionDeviation_mm(const_float_t );
   #else
     float getAxisMaxJerk_mm_s(const axis_t);
     float getAxisMaxJerk_mm_s(const extruder_t);
-    void setAxisMaxJerk_mm_s(const float&, const axis_t);
-    void setAxisMaxJerk_mm_s(const float&, const extruder_t);
+    void setAxisMaxJerk_mm_s(const_float_t , const axis_t);
+    void setAxisMaxJerk_mm_s(const_float_t , const extruder_t);
   #endif
 
   extruder_t getTool(const uint8_t extruder);
@@ -234,7 +234,7 @@ namespace ExtUI {
   void setActiveTool(const extruder_t, bool no_move);
 
   #if ENABLED(BABYSTEPPING)
-    int16_t mmToWholeSteps(const float& mm, const axis_t axis);
+    int16_t mmToWholeSteps(const_float_t mm, const axis_t axis);
 
     bool babystepAxis_steps(const int16_t steps, const axis_t axis);
     void smartAdjustAxis_steps(const int16_t steps, const axis_t axis, bool linked_nozzles);
@@ -242,28 +242,28 @@ namespace ExtUI {
 
   #if HAS_HOTEND_OFFSET
     float getNozzleOffset_mm(const axis_t, const extruder_t);
-    void setNozzleOffset_mm(const float&, const axis_t, const extruder_t);
+    void setNozzleOffset_mm(const_float_t , const axis_t, const extruder_t);
     void normalizeNozzleOffset(const axis_t axis);
   #endif
 
   float getZOffset_mm();
-  void setZOffset_mm(const float&);
+  void setZOffset_mm(const_float_t );
 
   #if HAS_BED_PROBE
     float getProbeOffset_mm(const axis_t);
-    void setProbeOffset_mm(const float&, const axis_t);
+    void setProbeOffset_mm(const_float_t , const axis_t);
   #endif
 
   #if ENABLED(BACKLASH_GCODE)
     float getAxisBacklash_mm(const axis_t);
-    void setAxisBacklash_mm(const float&, const axis_t);
+    void setAxisBacklash_mm(const_float_t , const axis_t);
 
     float getBacklashCorrection_percent();
-    void setBacklashCorrection_percent(const float&);
+    void setBacklashCorrection_percent(const_float_t );
 
     #ifdef BACKLASH_SMOOTHING_MM
       float getBacklashSmoothing_mm();
-      void setBacklashSmoothing_mm(const float&);
+      void setBacklashSmoothing_mm(const_float_t );
     #endif
   #endif
 
@@ -275,7 +275,7 @@ namespace ExtUI {
 
     #if HAS_FILAMENT_RUNOUT_DISTANCE
       float getFilamentRunoutDistance_mm();
-      void setFilamentRunoutDistance_mm(const float&);
+      void setFilamentRunoutDistance_mm(const_float_t );
     #endif
   #endif
 
@@ -285,7 +285,7 @@ namespace ExtUI {
 
     #if DISABLED(CASE_LIGHT_NO_BRIGHTNESS)
       float getCaseLightBrightness_percent();
-      void setCaseLightBrightness_percent(const float&);
+      void setCaseLightBrightness_percent(const_float_t );
     #endif
   #endif
 
@@ -293,16 +293,16 @@ namespace ExtUI {
     float getPIDValues_Kp(const extruder_t);
     float getPIDValues_Ki(const extruder_t);
     float getPIDValues_Kd(const extruder_t);
-    void setPIDValues(const float&, const float&, const float&, extruder_t);
-    void startPIDTune(const float&, extruder_t);
+    void setPIDValues(const_float_t , const_float_t , const_float_t , extruder_t);
+    void startPIDTune(const_float_t , extruder_t);
   #endif
 
   #if ENABLED(PIDTEMPBED)
     float getBedPIDValues_Kp();
     float getBedPIDValues_Ki();
     float getBedPIDValues_Kd();
-    void setBedPIDValues(const float&, const float&, const float&);
-    void startBedPIDTune(const float&);
+    void setBedPIDValues(const_float_t , const_float_t , const_float_t );
+    void startBedPIDTune(const_float_t );
   #endif
 
   /**

commit 3e7d830f570ece878f18732072de1b34156cdd66
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Mon Mar 22 23:51:03 2021 -0600

    Mesh Editor for FTDI Eve Touch UI (#21381)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 380d311517..ea49a3b63d 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -162,6 +162,7 @@ namespace ExtUI {
       bed_mesh_t& getMeshArray();
       float getMeshPoint(const xy_uint8_t &pos);
       void setMeshPoint(const xy_uint8_t &pos, const float &zval);
+      void moveToMeshPoint(const xy_uint8_t &pos, const float &z);
       void onMeshLevelingStart();
       void onMeshUpdate(const int8_t xpos, const int8_t ypos, const float &zval);
       inline void onMeshUpdate(const xy_int8_t &pos, const float &zval) { onMeshUpdate(pos.x, pos.y, zval); }

commit b51aed8aa54f41cc5897485d3b34b019ce38343d
Author: Skorpi08 <skorpik08@gmail.com>
Date:   Fri Mar 19 02:51:19 2021 +0100

    Nextion TFT touch screen (#21324)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 701bf9eb54..380d311517 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -139,6 +139,17 @@ namespace ExtUI {
 
   uint32_t getProgress_seconds_elapsed();
 
+  #if PREHEAT_COUNT
+    uint16_t getMaterial_preset_E(const uint16_t);
+    #if HAS_HEATED_BED
+      uint16_t getMaterial_preset_B(const uint16_t);
+    #endif
+  #endif
+
+  #if ENABLED(DUAL_X_CARRIAGE)
+    uint8_t getIDEX_Mode();
+  #endif
+
   #if ENABLED(SHOW_REMAINING_TIME)
     inline uint32_t getProgress_seconds_remaining() { return ui.get_remaining_time(); }
   #endif
@@ -171,6 +182,7 @@ namespace ExtUI {
   #endif
 
   #if ENABLED(PRINTCOUNTER)
+    char* getFailedPrints_str(char buffer[21]);
     char* getTotalPrints_str(char buffer[21]);
     char* getFinishedPrints_str(char buffer[21]);
     char* getTotalPrintTime_str(char buffer[21]);

commit 1affbe2100c32f79d469b059be3eddd364a80431
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 12 06:54:42 2021 -0600

    Clean up, optimize ExtUI/TFT code (#21333)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index a6cfb82b88..701bf9eb54 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -102,11 +102,11 @@ namespace ExtUI {
   #if HAS_TRINAMIC_CONFIG
     float getAxisCurrent_mA(const axis_t);
     float getAxisCurrent_mA(const extruder_t);
-    void  setAxisCurrent_mA(const float, const axis_t);
-    void  setAxisCurrent_mA(const float, const extruder_t);
+    void  setAxisCurrent_mA(const float&, const axis_t);
+    void  setAxisCurrent_mA(const float&, const extruder_t);
 
      int getTMCBumpSensitivity(const axis_t);
-    void setTMCBumpSensitivity(const float, const axis_t);
+    void setTMCBumpSensitivity(const float&, const axis_t);
   #endif
 
   float getActualTemp_celsius(const heater_t);
@@ -150,10 +150,10 @@ namespace ExtUI {
     #if HAS_MESH
       bed_mesh_t& getMeshArray();
       float getMeshPoint(const xy_uint8_t &pos);
-      void setMeshPoint(const xy_uint8_t &pos, const float zval);
+      void setMeshPoint(const xy_uint8_t &pos, const float &zval);
       void onMeshLevelingStart();
-      void onMeshUpdate(const int8_t xpos, const int8_t ypos, const float zval);
-      inline void onMeshUpdate(const xy_int8_t &pos, const float zval) { onMeshUpdate(pos.x, pos.y, zval); }
+      void onMeshUpdate(const int8_t xpos, const int8_t ypos, const float &zval);
+      inline void onMeshUpdate(const xy_int8_t &pos, const float &zval) { onMeshUpdate(pos.x, pos.y, zval); }
 
       typedef enum : uint8_t {
         MESH_START,    // Prior to start of probe
@@ -178,41 +178,42 @@ namespace ExtUI {
     char* getFilamentUsed_str(char buffer[21]);
   #endif
 
-  void setTargetTemp_celsius(const float, const heater_t);
-  void setTargetTemp_celsius(const float, const extruder_t);
-  void setTargetFan_percent(const float, const fan_t);
-  void setAxisPosition_mm(const float, const axis_t, const feedRate_t=0);
-  void setAxisPosition_mm(const float, const extruder_t, const feedRate_t=0);
-  void setAxisSteps_per_mm(const float, const axis_t);
-  void setAxisSteps_per_mm(const float, const extruder_t);
+  void setTargetTemp_celsius(const float&, const heater_t);
+  void setTargetTemp_celsius(const float&, const extruder_t);
+  void setTargetFan_percent(const float&, const fan_t);
+  void coolDown();
+  void setAxisPosition_mm(const float&, const axis_t, const feedRate_t=0);
+  void setAxisPosition_mm(const float&, const extruder_t, const feedRate_t=0);
+  void setAxisSteps_per_mm(const float&, const axis_t);
+  void setAxisSteps_per_mm(const float&, const extruder_t);
   void setAxisMaxFeedrate_mm_s(const feedRate_t, const axis_t);
   void setAxisMaxFeedrate_mm_s(const feedRate_t, const extruder_t);
-  void setAxisMaxAcceleration_mm_s2(const float, const axis_t);
-  void setAxisMaxAcceleration_mm_s2(const float, const extruder_t);
+  void setAxisMaxAcceleration_mm_s2(const float&, const axis_t);
+  void setAxisMaxAcceleration_mm_s2(const float&, const extruder_t);
   void setFeedrate_mm_s(const feedRate_t);
   void setMinFeedrate_mm_s(const feedRate_t);
   void setMinTravelFeedrate_mm_s(const feedRate_t);
-  void setPrintingAcceleration_mm_s2(const float);
-  void setRetractAcceleration_mm_s2(const float);
-  void setTravelAcceleration_mm_s2(const float);
-  void setFeedrate_percent(const float);
+  void setPrintingAcceleration_mm_s2(const float&);
+  void setRetractAcceleration_mm_s2(const float&);
+  void setTravelAcceleration_mm_s2(const float&);
+  void setFeedrate_percent(const float&);
   void setFlow_percent(const int16_t, const extruder_t);
   bool awaitingUserConfirm();
   void setUserConfirmed();
 
   #if ENABLED(LIN_ADVANCE)
     float getLinearAdvance_mm_mm_s(const extruder_t);
-    void setLinearAdvance_mm_mm_s(const float, const extruder_t);
+    void setLinearAdvance_mm_mm_s(const float&, const extruder_t);
   #endif
 
   #if HAS_JUNCTION_DEVIATION
     float getJunctionDeviation_mm();
-    void setJunctionDeviation_mm(const float);
+    void setJunctionDeviation_mm(const float&);
   #else
     float getAxisMaxJerk_mm_s(const axis_t);
     float getAxisMaxJerk_mm_s(const extruder_t);
-    void setAxisMaxJerk_mm_s(const float, const axis_t);
-    void setAxisMaxJerk_mm_s(const float, const extruder_t);
+    void setAxisMaxJerk_mm_s(const float&, const axis_t);
+    void setAxisMaxJerk_mm_s(const float&, const extruder_t);
   #endif
 
   extruder_t getTool(const uint8_t extruder);
@@ -220,7 +221,7 @@ namespace ExtUI {
   void setActiveTool(const extruder_t, bool no_move);
 
   #if ENABLED(BABYSTEPPING)
-    int16_t mmToWholeSteps(const float mm, const axis_t axis);
+    int16_t mmToWholeSteps(const float& mm, const axis_t axis);
 
     bool babystepAxis_steps(const int16_t steps, const axis_t axis);
     void smartAdjustAxis_steps(const int16_t steps, const axis_t axis, bool linked_nozzles);
@@ -228,28 +229,28 @@ namespace ExtUI {
 
   #if HAS_HOTEND_OFFSET
     float getNozzleOffset_mm(const axis_t, const extruder_t);
-    void setNozzleOffset_mm(const float, const axis_t, const extruder_t);
+    void setNozzleOffset_mm(const float&, const axis_t, const extruder_t);
     void normalizeNozzleOffset(const axis_t axis);
   #endif
 
   float getZOffset_mm();
-  void setZOffset_mm(const float);
+  void setZOffset_mm(const float&);
 
   #if HAS_BED_PROBE
     float getProbeOffset_mm(const axis_t);
-    void setProbeOffset_mm(const float, const axis_t);
+    void setProbeOffset_mm(const float&, const axis_t);
   #endif
 
   #if ENABLED(BACKLASH_GCODE)
     float getAxisBacklash_mm(const axis_t);
-    void setAxisBacklash_mm(const float, const axis_t);
+    void setAxisBacklash_mm(const float&, const axis_t);
 
     float getBacklashCorrection_percent();
-    void setBacklashCorrection_percent(const float);
+    void setBacklashCorrection_percent(const float&);
 
     #ifdef BACKLASH_SMOOTHING_MM
       float getBacklashSmoothing_mm();
-      void setBacklashSmoothing_mm(const float);
+      void setBacklashSmoothing_mm(const float&);
     #endif
   #endif
 
@@ -261,7 +262,7 @@ namespace ExtUI {
 
     #if HAS_FILAMENT_RUNOUT_DISTANCE
       float getFilamentRunoutDistance_mm();
-      void setFilamentRunoutDistance_mm(const float);
+      void setFilamentRunoutDistance_mm(const float&);
     #endif
   #endif
 
@@ -271,7 +272,7 @@ namespace ExtUI {
 
     #if DISABLED(CASE_LIGHT_NO_BRIGHTNESS)
       float getCaseLightBrightness_percent();
-      void setCaseLightBrightness_percent(const float);
+      void setCaseLightBrightness_percent(const float&);
     #endif
   #endif
 
@@ -279,16 +280,16 @@ namespace ExtUI {
     float getPIDValues_Kp(const extruder_t);
     float getPIDValues_Ki(const extruder_t);
     float getPIDValues_Kd(const extruder_t);
-    void setPIDValues(const float, const float, const float, extruder_t);
-    void startPIDTune(const float, extruder_t);
+    void setPIDValues(const float&, const float&, const float&, extruder_t);
+    void startPIDTune(const float&, extruder_t);
   #endif
 
   #if ENABLED(PIDTEMPBED)
     float getBedPIDValues_Kp();
     float getBedPIDValues_Ki();
     float getBedPIDValues_Kd();
-    void setBedPIDValues(const float, const float, const float);
-    void startBedPIDTune(const float);
+    void setBedPIDValues(const float&, const float&, const float&);
+    void startBedPIDTune(const float&);
   #endif
 
   /**

commit b95e548ddbcbc1c088eabc17992d0a06f82ac167
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Sat Mar 6 14:13:28 2021 -0600

    Cooler (for Laser) - M143, M193 (#21255)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 4214ba5821..a6cfb82b88 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -55,7 +55,7 @@ namespace ExtUI {
 
   enum axis_t     : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, Z4 };
   enum extruder_t : uint8_t { E0, E1, E2, E3, E4, E5, E6, E7 };
-  enum heater_t   : uint8_t { H0, H1, H2, H3, H4, H5, BED, CHAMBER };
+  enum heater_t   : uint8_t { H0, H1, H2, H3, H4, H5, BED, CHAMBER, COOLER };
   enum fan_t      : uint8_t { FAN0, FAN1, FAN2, FAN3, FAN4, FAN5, FAN6, FAN7 };
   enum result_t   : uint8_t { PID_BAD_EXTRUDER_NUM, PID_TEMP_TOO_HIGH, PID_TUNING_TIMEOUT, PID_DONE };
 

commit 1aa421efe54eef40a5ba2ba7706908a4ca384586
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Feb 28 19:50:17 2021 -0600

    Filament sensor cleanup

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index bfd658b0d9..4214ba5821 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -215,6 +215,7 @@ namespace ExtUI {
     void setAxisMaxJerk_mm_s(const float, const extruder_t);
   #endif
 
+  extruder_t getTool(const uint8_t extruder);
   extruder_t getActiveTool();
   void setActiveTool(const extruder_t, bool no_move);
 

commit 9d0e64a725290233d6002017147c578ffd32c504
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jan 28 20:40:20 2021 -0600

    AutoReport class (Temperature, Cardreader) (#20913)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 478fe68909..bfd658b0d9 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -155,7 +155,7 @@ namespace ExtUI {
       void onMeshUpdate(const int8_t xpos, const int8_t ypos, const float zval);
       inline void onMeshUpdate(const xy_int8_t &pos, const float zval) { onMeshUpdate(pos.x, pos.y, zval); }
 
-      typedef enum : unsigned char {
+      typedef enum : uint8_t {
         MESH_START,    // Prior to start of probe
         MESH_FINISH,   // Following probe of all points
         PROBE_START,   // Beginning probe of grid location
@@ -302,8 +302,8 @@ namespace ExtUI {
     FORCE_INLINE uint32_t safe_millis() { return millis(); } // TODO: Implement for AVR
   #endif
 
-  void delay_us(unsigned long us);
-  void delay_ms(unsigned long ms);
+  void delay_us(uint32_t us);
+  void delay_ms(uint32_t ms);
   void yield();
 
   /**

commit d03c3980de30e593e3336737f6da45f3bfc7d42e
Author: Marcio Teixeira <mlt4356-github@yahoo.com>
Date:   Fri Jan 15 12:59:27 2021 -0700

    Improve filament runout handling in FTDI EVE Touch UI
    
    - On filament runout, take the user to the tune menu where they can initiate a filament change or resume the print.

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 5322ac69ce..478fe68909 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -197,6 +197,7 @@ namespace ExtUI {
   void setTravelAcceleration_mm_s2(const float);
   void setFeedrate_percent(const float);
   void setFlow_percent(const int16_t, const extruder_t);
+  bool awaitingUserConfirm();
   void setUserConfirmed();
 
   #if ENABLED(LIN_ADVANCE)

commit 2d88a2cfb7a85104414154ae66a92b2d63dda352
Author: LinFor <linfor@gmail.com>
Date:   Thu Dec 24 01:37:17 2020 +0300

    Remaining Time for FTDI EVE, bp for ExtUI (#20549)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index cdf9b4412a..5322ac69ce 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -43,6 +43,7 @@
  ****************************************************************************/
 
 #include "../../inc/MarlinConfig.h"
+#include "../marlinui.h"
 
 namespace ExtUI {
 
@@ -129,9 +130,19 @@ namespace ExtUI {
   float getTravelAcceleration_mm_s2();
   float getFeedrate_percent();
   int16_t getFlowPercentage(const extruder_t);
-  uint8_t getProgress_percent();
+
+  inline uint8_t getProgress_percent() { return ui.get_progress_percent(); }
+
+  #if HAS_PRINT_PROGRESS_PERMYRIAD
+    inline uint16_t getProgress_permyriad() { return ui.get_progress_permyriad(); }
+  #endif
+
   uint32_t getProgress_seconds_elapsed();
 
+  #if ENABLED(SHOW_REMAINING_TIME)
+    inline uint32_t getProgress_seconds_remaining() { return ui.get_remaining_time(); }
+  #endif
+
   #if HAS_LEVELING
     bool getLevelingActive();
     void setLevelingActive(const bool);

commit 889695b6ba54ec56ca7ed7fd50d597c29a854687
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Nov 5 16:45:22 2020 -0600

    ExtUI homing / leveling additions

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index c429a0aade..cdf9b4412a 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -140,6 +140,7 @@ namespace ExtUI {
       bed_mesh_t& getMeshArray();
       float getMeshPoint(const xy_uint8_t &pos);
       void setMeshPoint(const xy_uint8_t &pos, const float zval);
+      void onMeshLevelingStart();
       void onMeshUpdate(const int8_t xpos, const int8_t ypos, const float zval);
       inline void onMeshUpdate(const xy_int8_t &pos, const float zval) { onMeshUpdate(pos.x, pos.y, zval); }
 
@@ -344,11 +345,16 @@ namespace ExtUI {
   void onPrintTimerStarted();
   void onPrintTimerPaused();
   void onPrintTimerStopped();
+  void onPrintFinished();
   void onFilamentRunout(const extruder_t extruder);
   void onUserConfirmRequired(const char * const msg);
   void onUserConfirmRequired_P(PGM_P const pstr);
   void onStatusChanged(const char * const msg);
   void onStatusChanged_P(PGM_P const pstr);
+  void onHomingStart();
+  void onHomingComplete();
+  void onSteppersDisabled();
+  void onSteppersEnabled();
   void onFactoryReset();
   void onStoreSettings(char *);
   void onLoadSettings(const char *);

commit af75e24c2e4bb380dc9496cba5fd397f056ad0ab
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Nov 6 19:09:29 2020 -0600

    Clean up corrected urls

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 48d0e97220..c429a0aade 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -39,7 +39,7 @@
  *   GNU General Public License for more details.                           *
  *                                                                          *
  *   To view a copy of the GNU General Public License, go to the following  *
- *   location: <https://www.gnu.org/licenses/>.                              *
+ *   location: <https://www.gnu.org/licenses/>.                             *
  ****************************************************************************/
 
 #include "../../inc/MarlinConfig.h"

commit b6856dcb999b51077c89eb30c5ec102c507152c0
Author: Marcio Teixeira <mlt4356-github@yahoo.com>
Date:   Wed Oct 28 11:23:46 2020 -0600

    Improvement and fixes to FTDI touch UI
    
    - Fixed incorrect LCD text string
    - Fixed incorrect refresh of filament change screens
    - Allow host control via touch UI
    - Updates to leveling menu
    - Modified ExtUI::isPrinting() to check if the job timer is running
    - Added ExtUI method to check whether a host print is paused

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 15122ec69e..48d0e97220 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -302,6 +302,7 @@ namespace ExtUI {
   bool isPrintingFromMediaPaused();
   bool isPrintingFromMedia();
   bool isPrinting();
+  bool isPrintingPaused();
 
   void printFile(const char *filename);
   void stopPrint();

commit 4424645e04c9e75462d36de8f7a82e67cc9c262e
Author: qwewer0 <57561110+qwewer0@users.noreply.github.com>
Date:   Mon Sep 28 21:53:50 2020 +0200

    Multi-line comments cleanup (#19535)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 02c4717d77..15122ec69e 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -375,7 +375,6 @@ namespace ExtUI {
  *   constexpr float increment = 10;
  *
  *   UI_INCREMENT(TargetTemp_celsius, E0)
- *
  */
 #define UI_INCREMENT_BY(method, inc, ...) ExtUI::set ## method(ExtUI::get ## method (__VA_ARGS__) + inc, ##__VA_ARGS__)
 #define UI_DECREMENT_BY(method, inc, ...) ExtUI::set ## method(ExtUI::get ## method (__VA_ARGS__) - inc, ##__VA_ARGS__)

commit 872516f9f903157fbd927bf6083996da70ab4e63
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Sat Sep 12 22:32:00 2020 -0600

    Touch UI "Leveling" menu, misc. fixes (#19349)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index ca12d79a8b..02c4717d77 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -143,7 +143,12 @@ namespace ExtUI {
       void onMeshUpdate(const int8_t xpos, const int8_t ypos, const float zval);
       inline void onMeshUpdate(const xy_int8_t &pos, const float zval) { onMeshUpdate(pos.x, pos.y, zval); }
 
-      typedef enum : unsigned char { PROBE_START, PROBE_FINISH } probe_state_t;
+      typedef enum : unsigned char {
+        MESH_START,    // Prior to start of probe
+        MESH_FINISH,   // Following probe of all points
+        PROBE_START,   // Beginning probe of grid location
+        PROBE_FINISH   // Finished probe of grid location
+      } probe_state_t;
       void onMeshUpdate(const int8_t xpos, const int8_t ypos, probe_state_t state);
       inline void onMeshUpdate(const xy_int8_t &pos, probe_state_t state) { onMeshUpdate(pos.x, pos.y, state); }
     #endif

commit 6bcfb58cd4b208cf042fa4a66faf14f382d33d07
Author: Marco Burato <zmaster.adsl@gmail.com>
Date:   Thu Aug 6 12:38:18 2020 +0200

    More Anycubic + Trigorilla mappings, ExtUI (#18903)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index ae6f31d43e..ca12d79a8b 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -164,8 +164,8 @@ namespace ExtUI {
   void setTargetTemp_celsius(const float, const heater_t);
   void setTargetTemp_celsius(const float, const extruder_t);
   void setTargetFan_percent(const float, const fan_t);
-  void setAxisPosition_mm(const float, const axis_t);
-  void setAxisPosition_mm(const float, const extruder_t);
+  void setAxisPosition_mm(const float, const axis_t, const feedRate_t=0);
+  void setAxisPosition_mm(const float, const extruder_t, const feedRate_t=0);
   void setAxisSteps_per_mm(const float, const axis_t);
   void setAxisSteps_per_mm(const float, const extruder_t);
   void setAxisMaxFeedrate_mm_s(const feedRate_t, const axis_t);

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 103cf6c104..ae6f31d43e 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
@@ -39,7 +39,7 @@
  *   GNU General Public License for more details.                           *
  *                                                                          *
  *   To view a copy of the GNU General Public License, go to the following  *
- *   location: <http://www.gnu.org/licenses/>.                              *
+ *   location: <https://www.gnu.org/licenses/>.                              *
  ****************************************************************************/
 
 #include "../../inc/MarlinConfig.h"

commit 3b80690a71c0a97f75efb1721fc007ef5a018c1c
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sat Jun 27 23:02:28 2020 -0400

    ExtUI additions (#18447)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 0f9c6ff48e..103cf6c104 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -74,6 +74,7 @@ namespace ExtUI {
   bool canMove(const axis_t);
   bool canMove(const extruder_t);
   void injectCommands_P(PGM_P const);
+  void injectCommands(char * const);
   bool commandsInQueue();
 
   bool isHeaterIdle(const heater_t);
@@ -236,6 +237,8 @@ namespace ExtUI {
   #if HAS_FILAMENT_SENSOR
     bool getFilamentRunoutEnabled();
     void setFilamentRunoutEnabled(const bool);
+    bool getFilamentRunoutState();
+    void setFilamentRunoutState(const bool);
 
     #if HAS_FILAMENT_RUNOUT_DISTANCE
       float getFilamentRunoutDistance_mm();

commit cfd31ff70ee949eb5eea61bf30eac24aef9fcb9c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 5 23:18:23 2020 -0500

    Add HAS_FILAMENT_RUNOUT_DISTANCE

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 506157f9af..0f9c6ff48e 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -237,7 +237,7 @@ namespace ExtUI {
     bool getFilamentRunoutEnabled();
     void setFilamentRunoutEnabled(const bool);
 
-    #ifdef FILAMENT_RUNOUT_DISTANCE_MM
+    #if HAS_FILAMENT_RUNOUT_DISTANCE
       float getFilamentRunoutDistance_mm();
       void setFilamentRunoutDistance_mm(const float);
     #endif

commit a226b281aff5d569bc18afb9879149e0e89d29df
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Apr 30 22:52:33 2020 -0500

    UI and stall reset for extra TMC axes (#17818)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 652f77198a..506157f9af 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -52,7 +52,7 @@ namespace ExtUI {
 
   static constexpr size_t eeprom_data_size = 48;
 
-  enum axis_t     : uint8_t { X, Y, Z };
+  enum axis_t     : uint8_t { X, Y, Z, X2, Y2, Z2, Z3, Z4 };
   enum extruder_t : uint8_t { E0, E1, E2, E3, E4, E5, E6, E7 };
   enum heater_t   : uint8_t { H0, H1, H2, H3, H4, H5, BED, CHAMBER };
   enum fan_t      : uint8_t { FAN0, FAN1, FAN2, FAN3, FAN4, FAN5, FAN6, FAN7 };

commit 55d66fb8971d9e5dbfb15e7ae5c952839b488f59
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Apr 23 20:49:11 2020 -0500

    Add HAS_JUNCTION_DEVIATION

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 3852686898..652f77198a 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -186,7 +186,7 @@ namespace ExtUI {
     void setLinearAdvance_mm_mm_s(const float, const extruder_t);
   #endif
 
-  #if DISABLED(CLASSIC_JERK)
+  #if HAS_JUNCTION_DEVIATION
     float getJunctionDeviation_mm();
     void setJunctionDeviation_mm(const float);
   #else

commit 2824e67d95a115ae8bde00608c5768cfd4cccd5f
Author: Desuuuu <contact@desuuuu.com>
Date:   Thu Apr 16 07:33:31 2020 +0200

    Add ExtUI::onStatusChanged_P (#17543)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 2ed602c32c..3852686898 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -339,6 +339,7 @@ namespace ExtUI {
   void onUserConfirmRequired(const char * const msg);
   void onUserConfirmRequired_P(PGM_P const pstr);
   void onStatusChanged(const char * const msg);
+  void onStatusChanged_P(PGM_P const pstr);
   void onFactoryReset();
   void onStoreSettings(char *);
   void onLoadSettings(const char *);

commit d6badb77a41b79c3b5a8ff40cc87338c413bccb2
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 6 15:39:34 2020 -0500

    Clean up whitespace

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 43e337e877..2ed602c32c 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -141,7 +141,7 @@ namespace ExtUI {
       void setMeshPoint(const xy_uint8_t &pos, const float zval);
       void onMeshUpdate(const int8_t xpos, const int8_t ypos, const float zval);
       inline void onMeshUpdate(const xy_int8_t &pos, const float zval) { onMeshUpdate(pos.x, pos.y, zval); }
-      
+
       typedef enum : unsigned char { PROBE_START, PROBE_FINISH } probe_state_t;
       void onMeshUpdate(const int8_t xpos, const int8_t ypos, probe_state_t state);
       inline void onMeshUpdate(const xy_int8_t &pos, probe_state_t state) { onMeshUpdate(pos.x, pos.y, state); }

commit be0e313c078c7425de7bc45a0371756ee2571056
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Thu Apr 2 13:24:55 2020 -0600

    Touch UI additions, bug fixes (#17379)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 01e0d1b7a3..43e337e877 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -141,6 +141,10 @@ namespace ExtUI {
       void setMeshPoint(const xy_uint8_t &pos, const float zval);
       void onMeshUpdate(const int8_t xpos, const int8_t ypos, const float zval);
       inline void onMeshUpdate(const xy_int8_t &pos, const float zval) { onMeshUpdate(pos.x, pos.y, zval); }
+      
+      typedef enum : unsigned char { PROBE_START, PROBE_FINISH } probe_state_t;
+      void onMeshUpdate(const int8_t xpos, const int8_t ypos, probe_state_t state);
+      inline void onMeshUpdate(const xy_int8_t &pos, probe_state_t state) { onMeshUpdate(pos.x, pos.y, state); }
     #endif
   #endif
 

commit d83ad6f321af6511d35e0396776f557195fcba9f
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Tue Mar 31 13:22:04 2020 -0600

    Improve / fix FTDI EVE Touch UI (#17338)
    
    - Fix timeout and debugging string
    - Fix check for whether `LCD_TIMEOUT_TO_STATUS` is valid
    - Fix incorrect debugging message
    - Make capitalization of callbacks consistent.
    - Allow Touch UI to use hardware SPI on Einsy boards
    - Move print stats to About Printer page.
    - More generic about screen with GPL license.
    - Add missing handler for power loss event
    - Less code duplication on status screen and main/advanced menu; more legible
    - Reorganize advanced and main menu to add more features
    - Hide home Z button when using Z_SAFE_HOMING
    - Fix compilation errors when certain features enabled
    - Fix missing labels in UI
    - Improve color scheme
    - Add new preheat menus
    - Fix incorrect rendering of Marlin logo on boot
    - Add Level X Axis and Auto calibrate buttons

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
index 61fecaed46..01e0d1b7a3 100644
--- a/Marlin/src/lcd/extui/ui_api.h
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -341,10 +341,10 @@ namespace ExtUI {
   void onConfigurationStoreWritten(bool success);
   void onConfigurationStoreRead(bool success);
   #if ENABLED(POWER_LOSS_RECOVERY)
-    void OnPowerLossResume();
+    void onPowerLossResume();
   #endif
   #if HAS_PID_HEATING
-    void OnPidTuning(const result_t rst);
+    void onPidTuning(const result_t rst);
   #endif
 };
 

commit 6bead0c1b04152f6a291d851f6cd4029fe0fc616
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 16:29:29 2020 -0500

    Shorter paths to HAL, ExtUI (#17156)

diff --git a/Marlin/src/lcd/extui/ui_api.h b/Marlin/src/lcd/extui/ui_api.h
new file mode 100644
index 0000000000..61fecaed46
--- /dev/null
+++ b/Marlin/src/lcd/extui/ui_api.h
@@ -0,0 +1,371 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+/************
+ * ui_api.h *
+ ************/
+
+/****************************************************************************
+ *   Written By Marcio Teixeira 2018 - Aleph Objects, Inc.                  *
+ *                                                                          *
+ *   This program is free software: you can redistribute it and/or modify   *
+ *   it under the terms of the GNU General Public License as published by   *
+ *   the Free Software Foundation, either version 3 of the License, or      *
+ *   (at your option) any later version.                                    *
+ *                                                                          *
+ *   This program is distributed in the hope that it will be useful,        *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
+ *   GNU General Public License for more details.                           *
+ *                                                                          *
+ *   To view a copy of the GNU General Public License, go to the following  *
+ *   location: <http://www.gnu.org/licenses/>.                              *
+ ****************************************************************************/
+
+#include "../../inc/MarlinConfig.h"
+
+namespace ExtUI {
+
+  // The ExtUI implementation can store up to this many bytes
+  // in the EEPROM when the methods onStoreSettings and
+  // onLoadSettings are called.
+
+  static constexpr size_t eeprom_data_size = 48;
+
+  enum axis_t     : uint8_t { X, Y, Z };
+  enum extruder_t : uint8_t { E0, E1, E2, E3, E4, E5, E6, E7 };
+  enum heater_t   : uint8_t { H0, H1, H2, H3, H4, H5, BED, CHAMBER };
+  enum fan_t      : uint8_t { FAN0, FAN1, FAN2, FAN3, FAN4, FAN5, FAN6, FAN7 };
+  enum result_t   : uint8_t { PID_BAD_EXTRUDER_NUM, PID_TEMP_TOO_HIGH, PID_TUNING_TIMEOUT, PID_DONE };
+
+  constexpr uint8_t extruderCount = EXTRUDERS;
+  constexpr uint8_t hotendCount   = HOTENDS;
+  constexpr uint8_t fanCount      = FAN_COUNT;
+
+  #if HAS_MESH
+    typedef float bed_mesh_t[GRID_MAX_POINTS_X][GRID_MAX_POINTS_Y];
+  #endif
+
+  bool isMoving();
+  bool isAxisPositionKnown(const axis_t);
+  bool isAxisPositionKnown(const extruder_t);
+  bool isPositionKnown(); // Axis position guaranteed, steppers active since homing
+  bool isMachineHomed(); // Axis position most likely correct, steppers may have deactivated
+  bool canMove(const axis_t);
+  bool canMove(const extruder_t);
+  void injectCommands_P(PGM_P const);
+  bool commandsInQueue();
+
+  bool isHeaterIdle(const heater_t);
+  bool isHeaterIdle(const extruder_t);
+  void enableHeater(const heater_t);
+  void enableHeater(const extruder_t);
+
+  #if ENABLED(JOYSTICK)
+    void jog(const xyz_float_t &dir);
+    void _joystick_update(xyz_float_t &norm_jog);
+  #endif
+
+  /**
+   * Getters and setters
+   * Should be used by the EXTENSIBLE_UI to query or change Marlin's state.
+   */
+  PGM_P getFirmwareName_str();
+
+  #if HAS_SOFTWARE_ENDSTOPS
+    bool getSoftEndstopState();
+    void setSoftEndstopState(const bool);
+  #endif
+
+  #if HAS_TRINAMIC_CONFIG
+    float getAxisCurrent_mA(const axis_t);
+    float getAxisCurrent_mA(const extruder_t);
+    void  setAxisCurrent_mA(const float, const axis_t);
+    void  setAxisCurrent_mA(const float, const extruder_t);
+
+     int getTMCBumpSensitivity(const axis_t);
+    void setTMCBumpSensitivity(const float, const axis_t);
+  #endif
+
+  float getActualTemp_celsius(const heater_t);
+  float getActualTemp_celsius(const extruder_t);
+  float getTargetTemp_celsius(const heater_t);
+  float getTargetTemp_celsius(const extruder_t);
+  float getTargetFan_percent(const fan_t);
+  float getActualFan_percent(const fan_t);
+  float getAxisPosition_mm(const axis_t);
+  float getAxisPosition_mm(const extruder_t);
+  float getAxisSteps_per_mm(const axis_t);
+  float getAxisSteps_per_mm(const extruder_t);
+  feedRate_t getAxisMaxFeedrate_mm_s(const axis_t);
+  feedRate_t getAxisMaxFeedrate_mm_s(const extruder_t);
+  float getAxisMaxAcceleration_mm_s2(const axis_t);
+  float getAxisMaxAcceleration_mm_s2(const extruder_t);
+  feedRate_t getMinFeedrate_mm_s();
+  feedRate_t getMinTravelFeedrate_mm_s();
+  float getPrintingAcceleration_mm_s2();
+  float getRetractAcceleration_mm_s2();
+  float getTravelAcceleration_mm_s2();
+  float getFeedrate_percent();
+  int16_t getFlowPercentage(const extruder_t);
+  uint8_t getProgress_percent();
+  uint32_t getProgress_seconds_elapsed();
+
+  #if HAS_LEVELING
+    bool getLevelingActive();
+    void setLevelingActive(const bool);
+    bool getMeshValid();
+    #if HAS_MESH
+      bed_mesh_t& getMeshArray();
+      float getMeshPoint(const xy_uint8_t &pos);
+      void setMeshPoint(const xy_uint8_t &pos, const float zval);
+      void onMeshUpdate(const int8_t xpos, const int8_t ypos, const float zval);
+      inline void onMeshUpdate(const xy_int8_t &pos, const float zval) { onMeshUpdate(pos.x, pos.y, zval); }
+    #endif
+  #endif
+
+  #if ENABLED(HOST_PROMPT_SUPPORT)
+    void setHostResponse(const uint8_t);
+  #endif
+
+  #if ENABLED(PRINTCOUNTER)
+    char* getTotalPrints_str(char buffer[21]);
+    char* getFinishedPrints_str(char buffer[21]);
+    char* getTotalPrintTime_str(char buffer[21]);
+    char* getLongestPrint_str(char buffer[21]);
+    char* getFilamentUsed_str(char buffer[21]);
+  #endif
+
+  void setTargetTemp_celsius(const float, const heater_t);
+  void setTargetTemp_celsius(const float, const extruder_t);
+  void setTargetFan_percent(const float, const fan_t);
+  void setAxisPosition_mm(const float, const axis_t);
+  void setAxisPosition_mm(const float, const extruder_t);
+  void setAxisSteps_per_mm(const float, const axis_t);
+  void setAxisSteps_per_mm(const float, const extruder_t);
+  void setAxisMaxFeedrate_mm_s(const feedRate_t, const axis_t);
+  void setAxisMaxFeedrate_mm_s(const feedRate_t, const extruder_t);
+  void setAxisMaxAcceleration_mm_s2(const float, const axis_t);
+  void setAxisMaxAcceleration_mm_s2(const float, const extruder_t);
+  void setFeedrate_mm_s(const feedRate_t);
+  void setMinFeedrate_mm_s(const feedRate_t);
+  void setMinTravelFeedrate_mm_s(const feedRate_t);
+  void setPrintingAcceleration_mm_s2(const float);
+  void setRetractAcceleration_mm_s2(const float);
+  void setTravelAcceleration_mm_s2(const float);
+  void setFeedrate_percent(const float);
+  void setFlow_percent(const int16_t, const extruder_t);
+  void setUserConfirmed();
+
+  #if ENABLED(LIN_ADVANCE)
+    float getLinearAdvance_mm_mm_s(const extruder_t);
+    void setLinearAdvance_mm_mm_s(const float, const extruder_t);
+  #endif
+
+  #if DISABLED(CLASSIC_JERK)
+    float getJunctionDeviation_mm();
+    void setJunctionDeviation_mm(const float);
+  #else
+    float getAxisMaxJerk_mm_s(const axis_t);
+    float getAxisMaxJerk_mm_s(const extruder_t);
+    void setAxisMaxJerk_mm_s(const float, const axis_t);
+    void setAxisMaxJerk_mm_s(const float, const extruder_t);
+  #endif
+
+  extruder_t getActiveTool();
+  void setActiveTool(const extruder_t, bool no_move);
+
+  #if ENABLED(BABYSTEPPING)
+    int16_t mmToWholeSteps(const float mm, const axis_t axis);
+
+    bool babystepAxis_steps(const int16_t steps, const axis_t axis);
+    void smartAdjustAxis_steps(const int16_t steps, const axis_t axis, bool linked_nozzles);
+  #endif
+
+  #if HAS_HOTEND_OFFSET
+    float getNozzleOffset_mm(const axis_t, const extruder_t);
+    void setNozzleOffset_mm(const float, const axis_t, const extruder_t);
+    void normalizeNozzleOffset(const axis_t axis);
+  #endif
+
+  float getZOffset_mm();
+  void setZOffset_mm(const float);
+
+  #if HAS_BED_PROBE
+    float getProbeOffset_mm(const axis_t);
+    void setProbeOffset_mm(const float, const axis_t);
+  #endif
+
+  #if ENABLED(BACKLASH_GCODE)
+    float getAxisBacklash_mm(const axis_t);
+    void setAxisBacklash_mm(const float, const axis_t);
+
+    float getBacklashCorrection_percent();
+    void setBacklashCorrection_percent(const float);
+
+    #ifdef BACKLASH_SMOOTHING_MM
+      float getBacklashSmoothing_mm();
+      void setBacklashSmoothing_mm(const float);
+    #endif
+  #endif
+
+  #if HAS_FILAMENT_SENSOR
+    bool getFilamentRunoutEnabled();
+    void setFilamentRunoutEnabled(const bool);
+
+    #ifdef FILAMENT_RUNOUT_DISTANCE_MM
+      float getFilamentRunoutDistance_mm();
+      void setFilamentRunoutDistance_mm(const float);
+    #endif
+  #endif
+
+  #if ENABLED(CASE_LIGHT_ENABLE)
+    bool getCaseLightState();
+    void setCaseLightState(const bool);
+
+    #if DISABLED(CASE_LIGHT_NO_BRIGHTNESS)
+      float getCaseLightBrightness_percent();
+      void setCaseLightBrightness_percent(const float);
+    #endif
+  #endif
+
+  #if ENABLED(PIDTEMP)
+    float getPIDValues_Kp(const extruder_t);
+    float getPIDValues_Ki(const extruder_t);
+    float getPIDValues_Kd(const extruder_t);
+    void setPIDValues(const float, const float, const float, extruder_t);
+    void startPIDTune(const float, extruder_t);
+  #endif
+
+  #if ENABLED(PIDTEMPBED)
+    float getBedPIDValues_Kp();
+    float getBedPIDValues_Ki();
+    float getBedPIDValues_Kd();
+    void setBedPIDValues(const float, const float, const float);
+    void startBedPIDTune(const float);
+  #endif
+
+  /**
+   * Delay and timing routines
+   * Should be used by the EXTENSIBLE_UI to safely pause or measure time
+   * safe_millis must be called at least every 1 sec to guarantee time
+   * yield should be called within lengthy loops
+   */
+  #ifdef __SAM3X8E__
+    uint32_t safe_millis();
+  #else
+    FORCE_INLINE uint32_t safe_millis() { return millis(); } // TODO: Implement for AVR
+  #endif
+
+  void delay_us(unsigned long us);
+  void delay_ms(unsigned long ms);
+  void yield();
+
+  /**
+   * Media access routines
+   *
+   * Should be used by the EXTENSIBLE_UI to operate on files
+   */
+  bool isMediaInserted();
+  bool isPrintingFromMediaPaused();
+  bool isPrintingFromMedia();
+  bool isPrinting();
+
+  void printFile(const char *filename);
+  void stopPrint();
+  void pausePrint();
+  void resumePrint();
+
+  class FileList {
+    private:
+      uint16_t num_files;
+
+    public:
+      FileList();
+      void refresh();
+      bool seek(const uint16_t, const bool skip_range_check = false);
+
+      const char *longFilename();
+      const char *shortFilename();
+      const char *filename();
+      bool isDir();
+
+      void changeDir(const char * const dirname);
+      void upDir();
+      bool isAtRootDir();
+      uint16_t count();
+  };
+
+  /**
+   * Event callback routines
+   *
+   * Should be declared by EXTENSIBLE_UI and will be called by Marlin
+   */
+  void onStartup();
+  void onIdle();
+  void onMediaInserted();
+  void onMediaError();
+  void onMediaRemoved();
+  void onPlayTone(const uint16_t frequency, const uint16_t duration);
+  void onPrinterKilled(PGM_P const error, PGM_P const component);
+  void onPrintTimerStarted();
+  void onPrintTimerPaused();
+  void onPrintTimerStopped();
+  void onFilamentRunout(const extruder_t extruder);
+  void onUserConfirmRequired(const char * const msg);
+  void onUserConfirmRequired_P(PGM_P const pstr);
+  void onStatusChanged(const char * const msg);
+  void onFactoryReset();
+  void onStoreSettings(char *);
+  void onLoadSettings(const char *);
+  void onConfigurationStoreWritten(bool success);
+  void onConfigurationStoreRead(bool success);
+  #if ENABLED(POWER_LOSS_RECOVERY)
+    void OnPowerLossResume();
+  #endif
+  #if HAS_PID_HEATING
+    void OnPidTuning(const result_t rst);
+  #endif
+};
+
+/**
+ * Helper macros to increment or decrement a value. For example:
+ *
+ *   UI_INCREMENT_BY(TargetTemp_celsius, 10, E0)
+ *
+ * Expands to:
+ *
+ *   setTargetTemp_celsius(getTargetTemp_celsius(E0) + 10, E0);
+ *
+ * Or, in the case where a constant increment is desired:
+ *
+ *   constexpr float increment = 10;
+ *
+ *   UI_INCREMENT(TargetTemp_celsius, E0)
+ *
+ */
+#define UI_INCREMENT_BY(method, inc, ...) ExtUI::set ## method(ExtUI::get ## method (__VA_ARGS__) + inc, ##__VA_ARGS__)
+#define UI_DECREMENT_BY(method, inc, ...) ExtUI::set ## method(ExtUI::get ## method (__VA_ARGS__) - inc, ##__VA_ARGS__)
+
+#define UI_INCREMENT(method, ...) UI_INCREMENT_BY(method, increment, ##__VA_ARGS__)
+#define UI_DECREMENT(method, ...) UI_DECREMENT_BY(method, increment, ##__VA_ARGS__)
