commit 8d9021e8069c0550e9a31107adf44b9112b87471
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu May 6 04:17:59 2021 -0500

    Move ExtUI subfolders up a level (#21820)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
deleted file mode 100644
index a0cb71a6a6..0000000000
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ /dev/null
@@ -1,271 +0,0 @@
-/*************
- * screens.h *
- *************/
-
-/****************************************************************************
- *   Written By Mark Pelletier  2017 - Aleph Objects, Inc.                  *
- *   Written By Marcio Teixeira 2018 - Aleph Objects, Inc.                  *
- *                                                                          *
- *   This program is free software: you can redistribute it and/or modify   *
- *   it under the terms of the GNU General Public License as published by   *
- *   the Free Software Foundation, either version 3 of the License, or      *
- *   (at your option) any later version.                                    *
- *                                                                          *
- *   This program is distributed in the hope that it will be useful,        *
- *   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
- *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
- *   GNU General Public License for more details.                           *
- *                                                                          *
- *   To view a copy of the GNU General Public License, go to the following  *
- *   location: <https://www.gnu.org/licenses/>.                             *
- ****************************************************************************/
-
-#pragma once
-
-#if ENABLED(TOUCH_UI_FTDI_EVE)
-
-#include "../ftdi_eve_lib/ftdi_eve_lib.h"
-#include "../language/language.h"
-#include "../theme/theme.h"
-#include "string_format.h"
-
-#ifndef BED_LEVELING_COMMANDS
-  #define BED_LEVELING_COMMANDS "G29"
-#endif
-
-extern tiny_timer_t refresh_timer;
-
-/********************************* DL CACHE SLOTS ******************************/
-
-// In order to reduce SPI traffic, we cache display lists (DL) in RAMG. This
-// is done using the CLCD::DLCache class, which takes a unique ID for each
-// cache location. These IDs are defined here:
-
-enum {
-  STATUS_SCREEN_CACHE,
-  MENU_SCREEN_CACHE,
-  TUNE_SCREEN_CACHE,
-  ALERT_BOX_CACHE,
-  SPINNER_CACHE,
-  ADVANCED_SETTINGS_SCREEN_CACHE,
-  MOVE_AXIS_SCREEN_CACHE,
-  TEMPERATURE_SCREEN_CACHE,
-  STEPS_SCREEN_CACHE,
-  MAX_FEEDRATE_SCREEN_CACHE,
-  MAX_VELOCITY_SCREEN_CACHE,
-  MAX_ACCELERATION_SCREEN_CACHE,
-  DEFAULT_ACCELERATION_SCREEN_CACHE,
-  FLOW_PERCENT_SCREEN_CACHE,
-  #if HAS_LEVELING
-    LEVELING_SCREEN_CACHE,
-    #if HAS_BED_PROBE
-      ZOFFSET_SCREEN_CACHE,
-    #endif
-    #if HAS_MESH
-      BED_MESH_VIEW_SCREEN_CACHE,
-      BED_MESH_EDIT_SCREEN_CACHE,
-    #endif
-  #endif
-  #if ENABLED(BABYSTEPPING)
-    ADJUST_OFFSETS_SCREEN_CACHE,
-  #endif
-  #if HAS_TRINAMIC_CONFIG
-    STEPPER_CURRENT_SCREEN_CACHE,
-    STEPPER_BUMP_SENSITIVITY_SCREEN_CACHE,
-  #endif
-  #if HAS_MULTI_HOTEND
-    NOZZLE_OFFSET_SCREEN_CACHE,
-  #endif
-  #if ENABLED(BACKLASH_GCODE)
-    BACKLASH_COMPENSATION_SCREEN_CACHE,
-  #endif
-  #if HAS_JUNCTION_DEVIATION
-    JUNC_DEV_SCREEN_CACHE,
-  #else
-    JERK_SCREEN_CACHE,
-  #endif
-  #if ENABLED(CASE_LIGHT_ENABLE)
-    CASE_LIGHT_SCREEN_CACHE,
-  #endif
-  #if EITHER(LIN_ADVANCE, FILAMENT_RUNOUT_SENSOR)
-    FILAMENT_MENU_CACHE,
-  #endif
-  #if ENABLED(LIN_ADVANCE)
-    LINEAR_ADVANCE_SCREEN_CACHE,
-  #endif
-  #if ENABLED(FILAMENT_RUNOUT_SENSOR)
-    FILAMENT_RUNOUT_SCREEN_CACHE,
-  #endif
-  #if ENABLED(TOUCH_UI_LULZBOT_BIO)
-    PRINTING_SCREEN_CACHE,
-  #endif
-  #if ENABLED(TOUCH_UI_COCOA_PRESS)
-    PREHEAT_MENU_CACHE,
-    PREHEAT_TIMER_SCREEN_CACHE,
-    LOAD_CHOCOLATE_SCREEN_CACHE,
-    MOVE_XYZ_SCREEN_CACHE,
-    MOVE_E_SCREEN_CACHE,
-  #endif
-  #if ENABLED(SDSUPPORT)
-    FILES_SCREEN_CACHE,
-  #endif
-  #if ENABLED(CUSTOM_MENU_MAIN)
-    CUSTOM_USER_MENUS_SCREEN_CACHE,
-  #endif
-  CHANGE_FILAMENT_SCREEN_CACHE,
-  INTERFACE_SETTINGS_SCREEN_CACHE,
-  INTERFACE_SOUNDS_SCREEN_CACHE,
-  LOCK_SCREEN_CACHE,
-  DISPLAY_TIMINGS_SCREEN_CACHE
-};
-
-// To save MCU RAM, the status message is "baked" in to the status screen
-// cache, so we reserve a large chunk of memory for the DL cache
-
-#define STATUS_SCREEN_DL_SIZE        4096
-#define ALERT_BOX_DL_SIZE            3072
-#define SPINNER_DL_SIZE              3072
-#define FILE_SCREEN_DL_SIZE          4160
-#define PRINTING_SCREEN_DL_SIZE      2048
-
-/************************* MENU SCREEN DECLARATIONS *************************/
-
-#include "base_screen.h"
-#include "base_numeric_adjustment_screen.h"
-#include "dialog_box_base_class.h"
-
-#if ENABLED(TOUCH_UI_LULZBOT_BIO)
-  #include "bio_status_screen.h"
-  #include "bio_main_menu.h"
-  #include "bio_tune_menu.h"
-  #include "bio_advanced_settings.h"
-  #include "bio_printing_dialog_box.h"
-  #include "bio_confirm_home_xyz.h"
-  #include "bio_confirm_home_e.h"
-
-#elif ENABLED(TOUCH_UI_COCOA_PRESS)
-  #include "cocoa_press_status_screen.h"
-  #include "cocoa_press_main_menu.h"
-  #include "cocoa_press_advanced_settings_menu.h"
-  #include "cocoa_press_preheat_menu.h"
-  #include "cocoa_press_preheat_screen.h"
-  #include "cocoa_press_load_chocolate.h"
-  #include "move_axis_screen.h"
-  #include "flow_percent_screen.h"
-  #include "cocoa_press_move_xyz_screen.h"
-  #include "cocoa_press_move_e_screen.h"
-  #include "tune_menu.h"
-
-#else
-  #include "status_screen.h"
-  #include "main_menu.h"
-  #include "advanced_settings_menu.h"
-  #include "tune_menu.h"
-#endif
-
-#include "boot_screen.h"
-#include "about_screen.h"
-#include "kill_screen.h"
-#include "alert_dialog_box.h"
-#include "spinner_dialog_box.h"
-#include "restore_failsafe_dialog_box.h"
-#include "save_settings_dialog_box.h"
-#include "confirm_start_print_dialog_box.h"
-#include "confirm_abort_print_dialog_box.h"
-#include "confirm_user_request_alert_box.h"
-#include "touch_calibration_screen.h"
-#include "touch_registers_screen.h"
-#include "change_filament_screen.h"
-#include "move_axis_screen.h"
-#include "steps_screen.h"
-#include "feedrate_percent_screen.h"
-#include "max_velocity_screen.h"
-#include "max_acceleration_screen.h"
-#include "default_acceleration_screen.h"
-#include "temperature_screen.h"
-#include "interface_sounds_screen.h"
-#include "interface_settings_screen.h"
-#include "lock_screen.h"
-#include "endstop_state_screen.h"
-#include "display_tuning_screen.h"
-#include "media_player_screen.h"
-
-#if ENABLED(PRINTCOUNTER)
-  #include "statistics_screen.h"
-#endif
-
-#if HAS_TRINAMIC_CONFIG
-  #include "stepper_current_screen.h"
-  #include "stepper_bump_sensitivity_screen.h"
-#endif
-
-#if HAS_MULTI_HOTEND
-  #include "nozzle_offsets_screen.h"
-#endif
-
-#if HAS_LEVELING
-  #include "leveling_menu.h"
-  #if HAS_BED_PROBE
-    #include "z_offset_screen.h"
-  #endif
-  #if HAS_MESH
-    #include "bed_mesh_base.h"
-    #include "bed_mesh_view_screen.h"
-    #include "bed_mesh_edit_screen.h"
-  #endif
-#endif
-
-#if ENABLED(CALIBRATION_GCODE)
-  #include "confirm_auto_calibration_dialog_box.h"
-#endif
-
-#if ENABLED(BABYSTEPPING)
-  #include "nudge_nozzle_screen.h"
-#endif
-
-#if ENABLED(BACKLASH_GCODE)
-  #include "backlash_compensation_screen.h"
-#endif
-
-#if HAS_JUNCTION_DEVIATION
-  #include "junction_deviation_screen.h"
-#else
-  #include "jerk_screen.h"
-#endif
-
-#if ENABLED(CASE_LIGHT_ENABLE)
-  #include "case_light_screen.h"
-#endif
-
-#if EITHER(LIN_ADVANCE, FILAMENT_RUNOUT_SENSOR)
-  #include "filament_menu.h"
-#endif
-
-#if ENABLED(FILAMENT_RUNOUT_SENSOR)
-  #include "filament_runout_screen.h"
-#endif
-
-#if ENABLED(LIN_ADVANCE)
-  #include "linear_advance_screen.h"
-#endif
-
-#if ENABLED(SDSUPPORT)
-  #include "files_screen.h"
-#endif
-
-#if ENABLED(CUSTOM_MENU_MAIN)
-  #include "custom_user_menus.h"
-#endif
-
-#if ENABLED(TOUCH_UI_DEVELOPER_MENU)
-  #include "developer_menu.h"
-  #include "confirm_erase_flash_dialog_box.h"
-  #include "widget_demo_screen.h"
-  #include "stress_test_screen.h"
-#endif
-
-#if NUM_LANGUAGES > 1
-  #include "language_menu.h"
-#endif
-
-#endif // TOUCH_UI_FTDI_EVE

commit 9c7344487a04940c845d9c39215f0d28ac26208f
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Mon Apr 26 22:40:59 2021 -0600

    FTDI EVE Touch UI fixes (#21706)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 14b8197fbf..a0cb71a6a6 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -55,6 +55,7 @@ enum {
   MAX_VELOCITY_SCREEN_CACHE,
   MAX_ACCELERATION_SCREEN_CACHE,
   DEFAULT_ACCELERATION_SCREEN_CACHE,
+  FLOW_PERCENT_SCREEN_CACHE,
   #if HAS_LEVELING
     LEVELING_SCREEN_CACHE,
     #if HAS_BED_PROBE
@@ -150,6 +151,7 @@ enum {
   #include "cocoa_press_preheat_screen.h"
   #include "cocoa_press_load_chocolate.h"
   #include "move_axis_screen.h"
+  #include "flow_percent_screen.h"
   #include "cocoa_press_move_xyz_screen.h"
   #include "cocoa_press_move_e_screen.h"
   #include "tune_menu.h"

commit 75b790376d1b20e0345efc2b8d2a58e9b201f9d3
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Sun Apr 4 17:58:03 2021 -0600

    Touch UI Bed Mesh Screen refactor, enhancements (#21521)
    
    - Split mesh view and edit screen into two screens
    - The editor now live-updates the graphics
    - Added Touch UI mesh progress feedback to `G26`
    - Show positive / negative mesh values in different colors

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 7aca5800e1..14b8197fbf 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -61,7 +61,8 @@ enum {
       ZOFFSET_SCREEN_CACHE,
     #endif
     #if HAS_MESH
-      BED_MESH_SCREEN_CACHE,
+      BED_MESH_VIEW_SCREEN_CACHE,
+      BED_MESH_EDIT_SCREEN_CACHE,
     #endif
   #endif
   #if ENABLED(BABYSTEPPING)
@@ -206,7 +207,9 @@ enum {
     #include "z_offset_screen.h"
   #endif
   #if HAS_MESH
-    #include "bed_mesh_screen.h"
+    #include "bed_mesh_base.h"
+    #include "bed_mesh_view_screen.h"
+    #include "bed_mesh_edit_screen.h"
   #endif
 #endif
 

commit 7573524a1437faa7cecdd9e5611f61db667923ef
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Tue Mar 30 20:23:43 2021 -0600

    FTDI Touch UI fix and reorganize (#21487)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 3e69a3ad2f..7aca5800e1 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -22,6 +22,8 @@
 
 #pragma once
 
+#if ENABLED(TOUCH_UI_FTDI_EVE)
+
 #include "../ftdi_eve_lib/ftdi_eve_lib.h"
 #include "../language/language.h"
 #include "../theme/theme.h"
@@ -260,3 +262,5 @@ enum {
 #if NUM_LANGUAGES > 1
   #include "language_menu.h"
 #endif
+
+#endif // TOUCH_UI_FTDI_EVE

commit df1ef496d1a88996cb1156fe933df59c6aaecbac
Author: borland1 <barryorlando@hotmail.com>
Date:   Tue Mar 23 06:21:11 2021 -0700

    Main / Config Custom Submenus (#18177)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 61d702ebaf..3e69a3ad2f 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -22,8 +22,6 @@
 
 #pragma once
 
-#if ENABLED(TOUCH_UI_FTDI_EVE)
-
 #include "../ftdi_eve_lib/ftdi_eve_lib.h"
 #include "../language/language.h"
 #include "../theme/theme.h"
@@ -107,7 +105,7 @@ enum {
   #if ENABLED(SDSUPPORT)
     FILES_SCREEN_CACHE,
   #endif
-  #if ENABLED(CUSTOM_USER_MENUS)
+  #if ENABLED(CUSTOM_MENU_MAIN)
     CUSTOM_USER_MENUS_SCREEN_CACHE,
   #endif
   CHANGE_FILAMENT_SCREEN_CACHE,
@@ -248,7 +246,7 @@ enum {
   #include "files_screen.h"
 #endif
 
-#if ENABLED(CUSTOM_USER_MENUS)
+#if ENABLED(CUSTOM_MENU_MAIN)
   #include "custom_user_menus.h"
 #endif
 
@@ -262,5 +260,3 @@ enum {
 #if NUM_LANGUAGES > 1
   #include "language_menu.h"
 #endif
-
-#endif // TOUCH_UI_FTDI_EVE

commit ba301fd800173ccdf9703e1e8bdb702720c6a872
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Mon Feb 22 21:38:54 2021 -0700

    FTDI Touch UI followup (#21167)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 1574576fa1..61d702ebaf 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -175,7 +175,6 @@ enum {
 #include "change_filament_screen.h"
 #include "move_axis_screen.h"
 #include "steps_screen.h"
-#include "stepper_current_screen.h"
 #include "feedrate_percent_screen.h"
 #include "max_velocity_screen.h"
 #include "max_acceleration_screen.h"

commit ece06c26a92cd545a3cc1b15aea7b5a222f7faf9
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Sun Feb 21 03:05:59 2021 -0700

    Enhance and fix FTDI Touch UI (#21148)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index a82d8988da..1574576fa1 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -100,7 +100,6 @@ enum {
   #if ENABLED(TOUCH_UI_COCOA_PRESS)
     PREHEAT_MENU_CACHE,
     PREHEAT_TIMER_SCREEN_CACHE,
-    UNLOAD_CARTRIDGE_SCREEN_CACHE,
     LOAD_CHOCOLATE_SCREEN_CACHE,
     MOVE_XYZ_SCREEN_CACHE,
     MOVE_E_SCREEN_CACHE,
@@ -145,11 +144,11 @@ enum {
 #elif ENABLED(TOUCH_UI_COCOA_PRESS)
   #include "cocoa_press_status_screen.h"
   #include "cocoa_press_main_menu.h"
-  #include "cocoa_press_advanced_settings.h"
+  #include "cocoa_press_advanced_settings_menu.h"
   #include "cocoa_press_preheat_menu.h"
   #include "cocoa_press_preheat_screen.h"
-  #include "cocoa_press_unload_cartridge.h"
   #include "cocoa_press_load_chocolate.h"
+  #include "move_axis_screen.h"
   #include "cocoa_press_move_xyz_screen.h"
   #include "cocoa_press_move_e_screen.h"
   #include "tune_menu.h"

commit ee66d9ccf9772206d151cf821b5adff2081423bb
Author: Marcio Teixeira <mlt4356-github@yahoo.com>
Date:   Wed Feb 3 10:03:48 2021 -0700

    Refactor FTDI EVE Touch Screen (#20987)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 51fc76f15b..a82d8988da 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -22,6 +22,8 @@
 
 #pragma once
 
+#if ENABLED(TOUCH_UI_FTDI_EVE)
+
 #include "../ftdi_eve_lib/ftdi_eve_lib.h"
 #include "../language/language.h"
 #include "../theme/theme.h"
@@ -127,785 +129,140 @@ enum {
 
 /************************* MENU SCREEN DECLARATIONS *************************/
 
-class BaseScreen : public UIScreen {
-  protected:
-    #if LCD_TIMEOUT_TO_STATUS > 0
-      static uint32_t last_interaction;
-    #endif
-
-    static bool buttonIsPressed(uint8_t tag);
-
-  public:
-    static bool buttonStyleCallback(CommandProcessor &, uint8_t, uint8_t &, uint16_t &, bool);
+#include "base_screen.h"
+#include "base_numeric_adjustment_screen.h"
+#include "dialog_box_base_class.h"
 
-    static void reset_menu_timeout();
-
-    static void onEntry();
-    static void onIdle();
-};
-
-class BootScreen : public BaseScreen, public UncachedScreen {
-  private:
-    static void showSplashScreen();
-  public:
-    static void onRedraw(draw_mode_t);
-    static void onIdle();
-};
-
-class AboutScreen : public BaseScreen, public UncachedScreen {
-  public:
-    static void onEntry();
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t tag);
-};
-
-#if ENABLED(PRINTCOUNTER)
-  class StatisticsScreen : public BaseScreen, public UncachedScreen {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-  };
-#endif
-
-class KillScreen {
-  // The KillScreen is behaves differently than the
-  // others, so we do not bother extending UIScreen.
-  public:
-    static void show(const char*);
-};
-
-class DialogBoxBaseClass : public BaseScreen {
-  protected:
-    template<typename T> static void drawMessage(const T, int16_t font = 0);
-    static void drawYesNoButtons(uint8_t default_btn = 0);
-    static void drawOkayButton();
-    static void drawSpinner();
-    static void drawButton(const progmem_str);
-
-    static void onRedraw(draw_mode_t) {};
-  public:
-    static bool onTouchEnd(uint8_t tag);
-    static void onIdle();
-};
-
-class AlertDialogBox : public DialogBoxBaseClass, public CachedScreen<ALERT_BOX_CACHE,ALERT_BOX_DL_SIZE> {
-  public:
-    static void onEntry();
-    static void onRedraw(draw_mode_t);
-    template<typename T> static void show(T);
-    template<typename T> static void showError(T);
-    static void hide();
-};
-
-class RestoreFailsafeDialogBox : public DialogBoxBaseClass, public UncachedScreen {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t tag);
-};
-
-class SaveSettingsDialogBox : public DialogBoxBaseClass, public UncachedScreen {
-  private:
-    static bool needs_save;
-
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t tag);
-
-    static void promptToSaveSettings();
-    static void settingsChanged() {needs_save = true;}
-};
-
-class ConfirmStartPrintDialogBox : public DialogBoxBaseClass, public UncachedScreen {
-  private:
-    inline static const char *getShortFilename() {return getFilename(false);}
-    inline static const char *getLongFilename()  {return getFilename(true);}
-
-    static const char *getFilename(bool longName);
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t);
-
-    static void show(uint8_t file_index);
-};
-
-class ConfirmAbortPrintDialogBox : public DialogBoxBaseClass, public UncachedScreen {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t tag);
-};
-
-#if ENABLED(CALIBRATION_GCODE)
-class ConfirmAutoCalibrationDialogBox : public DialogBoxBaseClass, public UncachedScreen {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t tag);
-};
-#endif
-
-class ConfirmUserRequestAlertBox : public AlertDialogBox {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t);
-    static void hide();
-    static void show(const char*);
-};
-
-#if ENABLED(CUSTOM_USER_MENUS)
-  class CustomUserMenus : public BaseScreen, public CachedScreen<CUSTOM_USER_MENUS_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-  };
-#endif
-
-class SpinnerDialogBox : public DialogBoxBaseClass, public CachedScreen<SPINNER_CACHE,SPINNER_DL_SIZE> {
-  public:
-    static void onRedraw(draw_mode_t);
-    static void onIdle();
-
-    static void show(const progmem_str);
-    static void hide();
-    static void enqueueAndWait_P(const progmem_str commands);
-    static void enqueueAndWait_P(const progmem_str message, const progmem_str commands);
-};
+#if ENABLED(TOUCH_UI_LULZBOT_BIO)
+  #include "bio_status_screen.h"
+  #include "bio_main_menu.h"
+  #include "bio_tune_menu.h"
+  #include "bio_advanced_settings.h"
+  #include "bio_printing_dialog_box.h"
+  #include "bio_confirm_home_xyz.h"
+  #include "bio_confirm_home_e.h"
+
+#elif ENABLED(TOUCH_UI_COCOA_PRESS)
+  #include "cocoa_press_status_screen.h"
+  #include "cocoa_press_main_menu.h"
+  #include "cocoa_press_advanced_settings.h"
+  #include "cocoa_press_preheat_menu.h"
+  #include "cocoa_press_preheat_screen.h"
+  #include "cocoa_press_unload_cartridge.h"
+  #include "cocoa_press_load_chocolate.h"
+  #include "cocoa_press_move_xyz_screen.h"
+  #include "cocoa_press_move_e_screen.h"
+  #include "tune_menu.h"
 
-#if NONE(TOUCH_UI_LULZBOT_BIO, TOUCH_UI_COCOA_PRESS)
-class StatusScreen : public BaseScreen, public CachedScreen<STATUS_SCREEN_CACHE,STATUS_SCREEN_DL_SIZE> {
-  private:
-    static void draw_axis_position(draw_mode_t);
-    static void draw_temperature(draw_mode_t);
-    static void draw_progress(draw_mode_t);
-    static void draw_interaction_buttons(draw_mode_t);
-    static void draw_status_message(draw_mode_t, const char * const);
-    static void _format_time(char *outstr, uint32_t time);
-  public:
-    static void loadBitmaps();
-    static void setStatusMessage(const char *);
-    static void setStatusMessage(progmem_str);
-    static void onRedraw(draw_mode_t);
-    static void onStartup();
-    static void onEntry();
-    static void onIdle();
-    static bool onTouchEnd(uint8_t tag);
-};
 #else
-  class StatusScreen : public BaseScreen, public CachedScreen<STATUS_SCREEN_CACHE> {
-    private:
-      static float increment;
-      static bool  jog_xy;
-      static bool  fine_motion;
-
-      static void draw_progress(draw_mode_t what);
-      static void draw_temperature(draw_mode_t what);
-      static void draw_syringe(draw_mode_t what);
-      static void draw_arrows(draw_mode_t what);
-      static void draw_overlay_icons(draw_mode_t what);
-      static void draw_fine_motion(draw_mode_t what);
-      static void draw_buttons(draw_mode_t what);
-    public:
-      static void loadBitmaps();
-      static void unlockMotors();
-
-      static void setStatusMessage(const char *);
-      static void setStatusMessage(progmem_str);
-
-      static void onRedraw(draw_mode_t);
-
-      static bool onTouchStart(uint8_t tag);
-      static bool onTouchHeld(uint8_t tag);
-      static bool onTouchEnd(uint8_t tag);
-      static void onIdle();
-
-  };
+  #include "status_screen.h"
+  #include "main_menu.h"
+  #include "advanced_settings_menu.h"
+  #include "tune_menu.h"
 #endif
 
-#if ENABLED(TOUCH_UI_LULZBOT_BIO)
-  class BioPrintingDialogBox : public BaseScreen, public CachedScreen<PRINTING_SCREEN_CACHE,PRINTING_SCREEN_DL_SIZE> {
-    private:
-      static void draw_status_message(draw_mode_t, const char * const);
-      static void draw_progress(draw_mode_t);
-      static void draw_time_remaining(draw_mode_t);
-      static void draw_interaction_buttons(draw_mode_t);
-    public:
-      static void onRedraw(draw_mode_t);
-
-      static void show();
-
-      static void setStatusMessage(const char *);
-      static void setStatusMessage(progmem_str);
-
-      static void onIdle();
-      static bool onTouchEnd(uint8_t tag);
-  };
-
-  class BioConfirmHomeXYZ : public DialogBoxBaseClass, public UncachedScreen {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-  };
-
-  class BioConfirmHomeE : public DialogBoxBaseClass, public UncachedScreen {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-  };
-#endif
-
-class MainMenu : public BaseScreen, public CachedScreen<MENU_SCREEN_CACHE> {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t tag);
-};
-
-class TuneMenu : public BaseScreen, public CachedScreen<TUNE_SCREEN_CACHE> {
-  private:
-    static void pausePrint();
-    static void resumePrint();
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t tag);
-};
-
-class TouchCalibrationScreen : public BaseScreen, public UncachedScreen {
-  public:
-    static void onRefresh();
-    static void onEntry();
-    static void onRedraw(draw_mode_t);
-    static void onIdle();
-};
-
-class TouchRegistersScreen : public BaseScreen, public UncachedScreen {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t tag);
-};
-
-class AdvancedSettingsMenu : public BaseScreen, public CachedScreen<ADVANCED_SETTINGS_SCREEN_CACHE> {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t tag);
-};
-
-class ChangeFilamentScreen : public BaseScreen, public CachedScreen<CHANGE_FILAMENT_SCREEN_CACHE> {
-  private:
-    static uint8_t getSoftenTemp();
-    static ExtUI::extruder_t getExtruder();
-    static void drawTempGradient(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
-    static uint32_t getTempColor(uint32_t temp);
-    static void doPurge();
-  public:
-    static void onEntry();
-    static void onExit();
-    static void onRedraw(draw_mode_t);
-    static bool onTouchStart(uint8_t tag);
-    static bool onTouchEnd(uint8_t tag);
-    static bool onTouchHeld(uint8_t tag);
-    static void onIdle();
-};
-
-class BaseNumericAdjustmentScreen : public BaseScreen {
-  public:
-    enum precision_default_t {
-      DEFAULT_LOWEST,
-      DEFAULT_MIDRANGE,
-      DEFAULT_HIGHEST
-    };
-
-  protected:
-    class widgets_t {
-      private:
-        draw_mode_t _what;
-        uint8_t     _line;
-        uint32_t    _color;
-        uint8_t     _decimals;
-        progmem_str _units;
-        enum style_t {
-          BTN_NORMAL,
-          BTN_ACTION,
-          BTN_TOGGLE,
-          BTN_DISABLED,
-          TEXT_AREA,
-          TEXT_LABEL
-        } _style;
-
-      protected:
-        void _draw_increment_btn(CommandProcessor &, uint8_t line, const uint8_t tag);
-        void _button(CommandProcessor &, uint8_t tag, int16_t x, int16_t y, int16_t w, int16_t h, progmem_str, bool enabled = true, bool highlight = false);
-        void _button_style(CommandProcessor &cmd, style_t style);
-      public:
-        widgets_t(draw_mode_t);
-
-        widgets_t &color(uint32_t color)       {_color = color; return *this;}
-        widgets_t &units(progmem_str units)    {_units = units; return *this;}
-        widgets_t &draw_mode(draw_mode_t what) {_what  = what;  return *this;}
-        widgets_t &precision(uint8_t decimals, precision_default_t = DEFAULT_HIGHEST);
-
-        void heading           (progmem_str label);
-        void adjuster_sram_val (uint8_t tag,  progmem_str label, const char *value,  bool is_enabled = true);
-        void adjuster          (uint8_t tag,  progmem_str label, const char *value,  bool is_enabled = true);
-        void adjuster          (uint8_t tag,  progmem_str label, float value=0,      bool is_enabled = true);
-        void button            (uint8_t tag,  progmem_str label,                     bool is_enabled = true);
-        void text_field        (uint8_t tag,  progmem_str label, const char *value,  bool is_enabled = true);
-        void two_buttons       (uint8_t tag1, progmem_str label1,
-                                uint8_t tag2, progmem_str label2,                    bool is_enabled = true);
-        void toggle            (uint8_t tag,  progmem_str label,                     bool value, bool is_enabled = true);
-        void home_buttons      (uint8_t tag);
-        void increments        ();
-    };
-
-    static float getIncrement();
-
-  public:
-    static void onEntry();
-    static bool onTouchEnd(uint8_t tag);
-};
-
-class BaseMoveAxisScreen : public BaseNumericAdjustmentScreen {
-  private:
-    static float getManualFeedrate(uint8_t axis, float increment_mm);
-  public:
-    static void setManualFeedrate(ExtUI::axis_t, float increment_mm);
-    static void setManualFeedrate(ExtUI::extruder_t, float increment_mm);
-
-    static void onEntry();
-    static bool onTouchHeld(uint8_t tag);
-};
+#include "boot_screen.h"
+#include "about_screen.h"
+#include "kill_screen.h"
+#include "alert_dialog_box.h"
+#include "spinner_dialog_box.h"
+#include "restore_failsafe_dialog_box.h"
+#include "save_settings_dialog_box.h"
+#include "confirm_start_print_dialog_box.h"
+#include "confirm_abort_print_dialog_box.h"
+#include "confirm_user_request_alert_box.h"
+#include "touch_calibration_screen.h"
+#include "touch_registers_screen.h"
+#include "change_filament_screen.h"
+#include "move_axis_screen.h"
+#include "steps_screen.h"
+#include "stepper_current_screen.h"
+#include "feedrate_percent_screen.h"
+#include "max_velocity_screen.h"
+#include "max_acceleration_screen.h"
+#include "default_acceleration_screen.h"
+#include "temperature_screen.h"
+#include "interface_sounds_screen.h"
+#include "interface_settings_screen.h"
+#include "lock_screen.h"
+#include "endstop_state_screen.h"
+#include "display_tuning_screen.h"
+#include "media_player_screen.h"
 
-class MoveAxisScreen : public BaseMoveAxisScreen, public CachedScreen<MOVE_AXIS_SCREEN_CACHE> {
-  public:
-    static void onRedraw(draw_mode_t);
-    static void onIdle();
-};
-
-class StepsScreen : public BaseNumericAdjustmentScreen, public CachedScreen<STEPS_SCREEN_CACHE> {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchHeld(uint8_t tag);
-};
+#if ENABLED(PRINTCOUNTER)
+  #include "statistics_screen.h"
+#endif
 
 #if HAS_TRINAMIC_CONFIG
-  class StepperCurrentScreen : public BaseNumericAdjustmentScreen, public CachedScreen<STEPPER_CURRENT_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchHeld(uint8_t tag);
-  };
-
-  class StepperBumpSensitivityScreen : public BaseNumericAdjustmentScreen, public CachedScreen<STEPPER_BUMP_SENSITIVITY_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchHeld(uint8_t tag);
-  };
+  #include "stepper_current_screen.h"
+  #include "stepper_bump_sensitivity_screen.h"
 #endif
 
 #if HAS_MULTI_HOTEND
-  class NozzleOffsetScreen : public BaseNumericAdjustmentScreen, public CachedScreen<NOZZLE_OFFSET_SCREEN_CACHE> {
-    public:
-      static void onEntry();
-      static void onRedraw(draw_mode_t);
-      static bool onTouchHeld(uint8_t tag);
-  };
+  #include "nozzle_offsets_screen.h"
 #endif
 
 #if HAS_LEVELING
-
-  class LevelingMenu : public BaseScreen, public CachedScreen<LEVELING_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-  };
-
+  #include "leveling_menu.h"
   #if HAS_BED_PROBE
-    class ZOffsetScreen : public BaseNumericAdjustmentScreen, public CachedScreen<ZOFFSET_SCREEN_CACHE> {
-      public:
-        static void onRedraw(draw_mode_t);
-        static bool onTouchHeld(uint8_t tag);
-    };
+    #include "z_offset_screen.h"
   #endif
-
   #if HAS_MESH
+    #include "bed_mesh_screen.h"
+  #endif
+#endif
 
-    class BedMeshScreen : public BaseScreen, public CachedScreen<BED_MESH_SCREEN_CACHE> {
-      private:
-        enum MeshOpts {
-          USE_POINTS    = 0x01,
-          USE_COLORS    = 0x02,
-          USE_TAGS      = 0x04,
-          USE_HIGHLIGHT = 0x08,
-          USE_AUTOSCALE = 0x10
-        };
-
-        static uint8_t pointToTag(uint8_t x, uint8_t y);
-        static bool tagToPoint(uint8_t tag, uint8_t &x, uint8_t &y);
-        static float getHightlightedValue();
-        static void drawHighlightedPointValue();
-        static void drawMesh(int16_t x, int16_t y, int16_t w, int16_t h, ExtUI::bed_mesh_t data, uint8_t opts, float autoscale_max = 0.1);
-
-      public:
-        static void onMeshUpdate(const int8_t x, const int8_t y, const float val);
-        static void onMeshUpdate(const int8_t x, const int8_t y, const ExtUI::probe_state_t);
-        static void onEntry();
-        static void onRedraw(draw_mode_t);
-        static bool onTouchStart(uint8_t tag);
-        static bool onTouchEnd(uint8_t tag);
-
-        static void startMeshProbe();
-    };
-
-  #endif // HAS_MESH
-
-#endif // HAS_LEVELING
+#if ENABLED(CALIBRATION_GCODE)
+  #include "confirm_auto_calibration_dialog_box.h"
+#endif
 
 #if ENABLED(BABYSTEPPING)
-  class NudgeNozzleScreen : public BaseNumericAdjustmentScreen, public CachedScreen<ADJUST_OFFSETS_SCREEN_CACHE> {
-    public:
-      static void onEntry();
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-      static bool onTouchHeld(uint8_t tag);
-      static void onIdle();
-  };
+  #include "nudge_nozzle_screen.h"
 #endif
 
 #if ENABLED(BACKLASH_GCODE)
-  class BacklashCompensationScreen : public BaseNumericAdjustmentScreen, public CachedScreen<BACKLASH_COMPENSATION_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchHeld(uint8_t tag);
-  };
+  #include "backlash_compensation_screen.h"
 #endif
 
-class FeedratePercentScreen : public BaseNumericAdjustmentScreen, public CachedScreen<MAX_FEEDRATE_SCREEN_CACHE> {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchHeld(uint8_t tag);
-};
-
-class MaxVelocityScreen : public BaseNumericAdjustmentScreen, public CachedScreen<MAX_VELOCITY_SCREEN_CACHE> {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchHeld(uint8_t tag);
-};
-
-class MaxAccelerationScreen : public BaseNumericAdjustmentScreen, public CachedScreen<MAX_ACCELERATION_SCREEN_CACHE> {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchHeld(uint8_t tag);
-};
-
-class DefaultAccelerationScreen : public BaseNumericAdjustmentScreen, public CachedScreen<DEFAULT_ACCELERATION_SCREEN_CACHE> {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchHeld(uint8_t tag);
-};
-
 #if HAS_JUNCTION_DEVIATION
-  class JunctionDeviationScreen : public BaseNumericAdjustmentScreen, public CachedScreen<JUNC_DEV_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchHeld(uint8_t tag);
-  };
+  #include "junction_deviation_screen.h"
 #else
-  class JerkScreen : public BaseNumericAdjustmentScreen, public CachedScreen<JERK_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchHeld(uint8_t tag);
-  };
+  #include "jerk_screen.h"
 #endif
 
 #if ENABLED(CASE_LIGHT_ENABLE)
-  class CaseLightScreen : public BaseNumericAdjustmentScreen, public CachedScreen<CASE_LIGHT_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchHeld(uint8_t tag);
-  };
+  #include "case_light_screen.h"
 #endif
 
 #if EITHER(LIN_ADVANCE, FILAMENT_RUNOUT_SENSOR)
-  class FilamentMenu : public BaseNumericAdjustmentScreen, public CachedScreen<FILAMENT_MENU_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-  };
+  #include "filament_menu.h"
 #endif
 
 #if ENABLED(FILAMENT_RUNOUT_SENSOR)
-  class FilamentRunoutScreen : public BaseNumericAdjustmentScreen, public CachedScreen<FILAMENT_RUNOUT_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchHeld(uint8_t tag);
-  };
+  #include "filament_runout_screen.h"
 #endif
 
 #if ENABLED(LIN_ADVANCE)
-  class LinearAdvanceScreen : public BaseNumericAdjustmentScreen, public CachedScreen<LINEAR_ADVANCE_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchHeld(uint8_t tag);
-  };
+  #include "linear_advance_screen.h"
 #endif
 
-class TemperatureScreen : public BaseNumericAdjustmentScreen, public CachedScreen<TEMPERATURE_SCREEN_CACHE> {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchHeld(uint8_t tag);
-};
-
-class InterfaceSoundsScreen : public BaseScreen, public CachedScreen<INTERFACE_SOUNDS_SCREEN_CACHE> {
-  public:
-    enum event_t {
-      PRINTING_STARTED  = 0,
-      PRINTING_FINISHED = 1,
-      PRINTING_FAILED   = 2,
-
-      NUM_EVENTS
-    };
-
-  private:
-    friend class InterfaceSettingsScreen;
-
-    static uint8_t event_sounds[NUM_EVENTS];
-
-    static const char* getSoundSelection(event_t);
-    static void toggleSoundSelection(event_t);
-    static void setSoundSelection(event_t, const FTDI::SoundPlayer::sound_t*);
-
-  public:
-    static void playEventSound(event_t, FTDI::play_mode_t = FTDI::PLAY_ASYNCHRONOUS);
-
-    static void defaultSettings();
-
-    static void onEntry();
-    static void onRedraw(draw_mode_t);
-    static bool onTouchStart(uint8_t tag);
-    static bool onTouchEnd(uint8_t tag);
-    static void onIdle();
-};
-
-class InterfaceSettingsScreen : public BaseScreen, public CachedScreen<INTERFACE_SETTINGS_SCREEN_CACHE> {
-  private:
-    struct persistent_data_t {
-      uint32_t touch_transform_a;
-      uint32_t touch_transform_b;
-      uint32_t touch_transform_c;
-      uint32_t touch_transform_d;
-      uint32_t touch_transform_e;
-      uint32_t touch_transform_f;
-      uint16_t passcode;
-      uint8_t  display_brightness;
-      int8_t   display_h_offset_adj;
-      int8_t   display_v_offset_adj;
-      uint8_t  sound_volume;
-      uint8_t  bit_flags;
-      uint8_t  event_sounds[InterfaceSoundsScreen::NUM_EVENTS];
-    };
-
-  public:
-    #ifdef ARCHIM2_SPI_FLASH_EEPROM_BACKUP_SIZE
-      static bool backupEEPROM();
-    #endif
-
-    static void saveSettings(char *);
-    static void loadSettings(const char *);
-    static void defaultSettings();
-    static void failSafeSettings();
-
-    static void onStartup();
-    static void onEntry();
-    static void onRedraw(draw_mode_t);
-    static bool onTouchStart(uint8_t tag);
-    static bool onTouchEnd(uint8_t tag);
-    static void onIdle();
-};
-
-class LockScreen : public BaseScreen, public CachedScreen<LOCK_SCREEN_CACHE> {
-  private:
-    friend InterfaceSettingsScreen;
-
-    static uint16_t passcode;
-
-    static char & message_style();
-    static uint16_t compute_checksum();
-    static void onPasscodeEntered();
-  public:
-    static bool is_enabled();
-    static void check_passcode();
-    static void enable();
-    static void disable();
-
-    static void set_hash(uint16_t pass) {passcode = pass;};
-    static uint16_t get_hash() {return passcode;};
-
-    static void onEntry();
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t tag);
-};
-
 #if ENABLED(SDSUPPORT)
+  #include "files_screen.h"
+#endif
 
-  class FilesScreen : public BaseScreen, public CachedScreen<FILES_SCREEN_CACHE, FILE_SCREEN_DL_SIZE> {
-    private:
-      #if ENABLED(TOUCH_UI_PORTRAIT)
-        static constexpr uint8_t header_h       = 2;
-        static constexpr uint8_t footer_h       = 2;
-        static constexpr uint8_t files_per_page = 11;
-      #else
-        static constexpr uint8_t header_h       = 1;
-        static constexpr uint8_t footer_h       = 1;
-        static constexpr uint8_t files_per_page = 6;
-      #endif
-
-      static uint8_t  getTagForLine(uint8_t line) {return line + 2;}
-      static uint8_t  getLineForTag(uint8_t tag)  {return  tag - 2;}
-      static uint16_t getFileForTag(uint8_t tag);
-      static uint16_t getSelectedFileIndex();
-
-      inline static const char *getSelectedShortFilename() {return getSelectedFilename(false);}
-      inline static const char *getSelectedLongFilename()  {return getSelectedFilename(true);}
-      static const char *getSelectedFilename(bool longName);
-
-      static void drawFileButton(const char* filename, uint8_t tag, bool is_dir, bool is_highlighted);
-      static void drawFileList();
-      static void drawHeader();
-      static void drawFooter();
-      static void drawSelectedFile();
-
-      static void gotoPage(uint8_t);
-    public:
-      static void onEntry();
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-      static void onIdle();
-  };
-
-#endif // SDSUPPORT
-
-class EndstopStatesScreen : public BaseScreen, public UncachedScreen {
-  public:
-    static void onEntry();
-    static void onExit();
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t tag);
-    static void onIdle();
-};
-
-class DisplayTuningScreen : public BaseNumericAdjustmentScreen, public CachedScreen<DISPLAY_TIMINGS_SCREEN_CACHE> {
-  public:
-    static void onRedraw(draw_mode_t);
-    static bool onTouchHeld(uint8_t tag);
-};
+#if ENABLED(CUSTOM_USER_MENUS)
+  #include "custom_user_menus.h"
+#endif
 
 #if ENABLED(TOUCH_UI_DEVELOPER_MENU)
-
-  class DeveloperMenu : public BaseScreen, public UncachedScreen {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-  };
-
-  class ConfirmEraseFlashDialogBox : public DialogBoxBaseClass, public UncachedScreen {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-  };
-
-  class WidgetsScreen : public BaseScreen, public UncachedScreen {
-    public:
-      static void onEntry();
-      static void onRedraw(draw_mode_t);
-      static bool onTouchStart(uint8_t tag);
-      static void onIdle();
-  };
-
-  class StressTestScreen : public BaseScreen, public UncachedScreen {
-    private:
-      static void drawDots(uint16_t x, uint16_t y, uint16_t h, uint16_t v);
-      static bool watchDogTestNow();
-      static void recursiveLockup();
-      static void iterativeLockup();
-      static void runTestOnBootup(bool enable);
-
-    public:
-      static void startupCheck();
-
-      static void onEntry();
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-      static void onIdle();
-  };
-
-#endif // TOUCH_UI_DEVELOPER_MENU
-
-class MediaPlayerScreen : public BaseScreen, public UncachedScreen {
-  private:
-    typedef int16_t media_streamer_func_t(void *obj, void *buff, size_t bytes);
-
-  public:
-    static bool playCardMedia();
-    static bool playBootMedia();
-
-    static void onEntry();
-    static void onRedraw(draw_mode_t);
-
-    static void playStream(void *obj, media_streamer_func_t*);
-};
+  #include "developer_menu.h"
+  #include "confirm_erase_flash_dialog_box.h"
+  #include "widget_demo_screen.h"
+  #include "stress_test_screen.h"
+#endif
 
 #if NUM_LANGUAGES > 1
-  class LanguageMenu : public BaseScreen, public UncachedScreen {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-  };
+  #include "language_menu.h"
 #endif
 
-#if ENABLED(TOUCH_UI_COCOA_PRESS)
-
-  class PreheatMenu : public BaseScreen, public CachedScreen<PREHEAT_MENU_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-  };
-
-  class PreheatTimerScreen : public BaseScreen, public CachedScreen<PREHEAT_TIMER_SCREEN_CACHE> {
-    private:
-      static uint16_t secondsRemaining();
-
-      static void draw_message(draw_mode_t);
-      static void draw_time_remaining(draw_mode_t);
-      static void draw_interaction_buttons(draw_mode_t);
-      static void draw_adjuster(draw_mode_t, uint8_t tag, progmem_str label, float value, int16_t x, int16_t y, int16_t w, int16_t h);
-    public:
-      static void onRedraw(draw_mode_t);
-
-      static void onEntry();
-      static void onIdle();
-      static bool onTouchHeld(uint8_t tag);
-      static bool onTouchEnd(uint8_t tag);
-  };
-
-  class UnloadCartridgeScreen : public BaseScreen, public CachedScreen<UNLOAD_CARTRIDGE_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-      static bool onTouchHeld(uint8_t tag);
-  };
-
-  class LoadChocolateScreen : public BaseScreen, public CachedScreen<LOAD_CHOCOLATE_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-      static bool onTouchHeld(uint8_t tag);
-  };
-
-  class MoveXYZScreen : public BaseMoveAxisScreen, public CachedScreen<MOVE_XYZ_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static void onIdle();
-  };
-
-  class MoveEScreen : public BaseMoveAxisScreen, public CachedScreen<MOVE_E_SCREEN_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static void onIdle();
-  };
-
-#endif // TOUCH_UI_COCOA_PRESS
+#endif // TOUCH_UI_FTDI_EVE

commit 6b458676b1a5477b73ccdd5071ee322fcf23f814
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sun Jan 3 22:59:48 2021 -0500

    Fix SD SPI Speed override, FTDI mesh edit (#20657)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 4388eebae0..51fc76f15b 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -539,7 +539,6 @@ class StepsScreen : public BaseNumericAdjustmentScreen, public CachedScreen<STEP
         static float getHightlightedValue();
         static void drawHighlightedPointValue();
         static void drawMesh(int16_t x, int16_t y, int16_t w, int16_t h, ExtUI::bed_mesh_t data, uint8_t opts, float autoscale_max = 0.1);
-        static bool isMeshComplete(ExtUI::bed_mesh_t data);
 
       public:
         static void onMeshUpdate(const int8_t x, const int8_t y, const float val);

commit 2d88a2cfb7a85104414154ae66a92b2d63dda352
Author: LinFor <linfor@gmail.com>
Date:   Thu Dec 24 01:37:17 2020 +0300

    Remaining Time for FTDI EVE, bp for ExtUI (#20549)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 4a2a407bd7..4388eebae0 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -277,7 +277,7 @@ class StatusScreen : public BaseScreen, public CachedScreen<STATUS_SCREEN_CACHE,
     static void draw_progress(draw_mode_t);
     static void draw_interaction_buttons(draw_mode_t);
     static void draw_status_message(draw_mode_t, const char * const);
-
+    static void _format_time(char *outstr, uint32_t time);
   public:
     static void loadBitmaps();
     static void setStatusMessage(const char *);

commit 59de35e749ee6e36ca5fbf7eeae32f34d78f3cb0
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Dec 23 15:33:34 2020 -0600

    Apply ENABLED in ExiUI / FTDI

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 265d6eb486..4a2a407bd7 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -1,25 +1,3 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-
 /*************
  * screens.h *
  *************/
@@ -767,7 +745,7 @@ class LockScreen : public BaseScreen, public CachedScreen<LOCK_SCREEN_CACHE> {
 
   class FilesScreen : public BaseScreen, public CachedScreen<FILES_SCREEN_CACHE, FILE_SCREEN_DL_SIZE> {
     private:
-      #ifdef TOUCH_UI_PORTRAIT
+      #if ENABLED(TOUCH_UI_PORTRAIT)
         static constexpr uint8_t header_h       = 2;
         static constexpr uint8_t footer_h       = 2;
         static constexpr uint8_t files_per_page = 11;

commit 82540be931940651f247e011071c1f18c0b96ed0
Author: LinFor <linfor@gmail.com>
Date:   Tue Dec 22 09:31:14 2020 +0300

    FTDI EVE custom user menus (#20518)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 3fa18d9f67..265d6eb486 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -1,3 +1,25 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
 /*************
  * screens.h *
  *************/
@@ -53,59 +75,62 @@ enum {
   MAX_VELOCITY_SCREEN_CACHE,
   MAX_ACCELERATION_SCREEN_CACHE,
   DEFAULT_ACCELERATION_SCREEN_CACHE,
-#if HAS_LEVELING
-  LEVELING_SCREEN_CACHE,
-  #if HAS_BED_PROBE
-    ZOFFSET_SCREEN_CACHE,
+  #if HAS_LEVELING
+    LEVELING_SCREEN_CACHE,
+    #if HAS_BED_PROBE
+      ZOFFSET_SCREEN_CACHE,
+    #endif
+    #if HAS_MESH
+      BED_MESH_SCREEN_CACHE,
+    #endif
   #endif
-  #if HAS_MESH
-    BED_MESH_SCREEN_CACHE,
+  #if ENABLED(BABYSTEPPING)
+    ADJUST_OFFSETS_SCREEN_CACHE,
+  #endif
+  #if HAS_TRINAMIC_CONFIG
+    STEPPER_CURRENT_SCREEN_CACHE,
+    STEPPER_BUMP_SENSITIVITY_SCREEN_CACHE,
+  #endif
+  #if HAS_MULTI_HOTEND
+    NOZZLE_OFFSET_SCREEN_CACHE,
+  #endif
+  #if ENABLED(BACKLASH_GCODE)
+    BACKLASH_COMPENSATION_SCREEN_CACHE,
+  #endif
+  #if HAS_JUNCTION_DEVIATION
+    JUNC_DEV_SCREEN_CACHE,
+  #else
+    JERK_SCREEN_CACHE,
+  #endif
+  #if ENABLED(CASE_LIGHT_ENABLE)
+    CASE_LIGHT_SCREEN_CACHE,
+  #endif
+  #if EITHER(LIN_ADVANCE, FILAMENT_RUNOUT_SENSOR)
+    FILAMENT_MENU_CACHE,
+  #endif
+  #if ENABLED(LIN_ADVANCE)
+    LINEAR_ADVANCE_SCREEN_CACHE,
+  #endif
+  #if ENABLED(FILAMENT_RUNOUT_SENSOR)
+    FILAMENT_RUNOUT_SCREEN_CACHE,
+  #endif
+  #if ENABLED(TOUCH_UI_LULZBOT_BIO)
+    PRINTING_SCREEN_CACHE,
+  #endif
+  #if ENABLED(TOUCH_UI_COCOA_PRESS)
+    PREHEAT_MENU_CACHE,
+    PREHEAT_TIMER_SCREEN_CACHE,
+    UNLOAD_CARTRIDGE_SCREEN_CACHE,
+    LOAD_CHOCOLATE_SCREEN_CACHE,
+    MOVE_XYZ_SCREEN_CACHE,
+    MOVE_E_SCREEN_CACHE,
+  #endif
+  #if ENABLED(SDSUPPORT)
+    FILES_SCREEN_CACHE,
+  #endif
+  #if ENABLED(CUSTOM_USER_MENUS)
+    CUSTOM_USER_MENUS_SCREEN_CACHE,
   #endif
-#endif
-#if ENABLED(BABYSTEPPING)
-  ADJUST_OFFSETS_SCREEN_CACHE,
-#endif
-#if HAS_TRINAMIC_CONFIG
-  STEPPER_CURRENT_SCREEN_CACHE,
-  STEPPER_BUMP_SENSITIVITY_SCREEN_CACHE,
-#endif
-#if HAS_MULTI_HOTEND
-  NOZZLE_OFFSET_SCREEN_CACHE,
-#endif
-#if ENABLED(BACKLASH_GCODE)
-  BACKLASH_COMPENSATION_SCREEN_CACHE,
-#endif
-#if HAS_JUNCTION_DEVIATION
-  JUNC_DEV_SCREEN_CACHE,
-#else
-  JERK_SCREEN_CACHE,
-#endif
-#if ENABLED(CASE_LIGHT_ENABLE)
-  CASE_LIGHT_SCREEN_CACHE,
-#endif
-#if EITHER(LIN_ADVANCE, FILAMENT_RUNOUT_SENSOR)
-  FILAMENT_MENU_CACHE,
-#endif
-#if ENABLED(LIN_ADVANCE)
-  LINEAR_ADVANCE_SCREEN_CACHE,
-#endif
-#if ENABLED(FILAMENT_RUNOUT_SENSOR)
-  FILAMENT_RUNOUT_SCREEN_CACHE,
-#endif
-#if ENABLED(TOUCH_UI_LULZBOT_BIO)
-  PRINTING_SCREEN_CACHE,
-#endif
-#if ENABLED(TOUCH_UI_COCOA_PRESS)
-  PREHEAT_MENU_CACHE,
-  PREHEAT_TIMER_SCREEN_CACHE,
-  UNLOAD_CARTRIDGE_SCREEN_CACHE,
-  LOAD_CHOCOLATE_SCREEN_CACHE,
-  MOVE_XYZ_SCREEN_CACHE,
-  MOVE_E_SCREEN_CACHE,
-#endif
-#if ENABLED(SDSUPPORT)
-  FILES_SCREEN_CACHE,
-#endif
   CHANGE_FILAMENT_SCREEN_CACHE,
   INTERFACE_SETTINGS_SCREEN_CACHE,
   INTERFACE_SOUNDS_SCREEN_CACHE,
@@ -247,6 +272,14 @@ class ConfirmUserRequestAlertBox : public AlertDialogBox {
     static void show(const char*);
 };
 
+#if ENABLED(CUSTOM_USER_MENUS)
+  class CustomUserMenus : public BaseScreen, public CachedScreen<CUSTOM_USER_MENUS_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+  };
+#endif
+
 class SpinnerDialogBox : public DialogBoxBaseClass, public CachedScreen<SPINNER_CACHE,SPINNER_DL_SIZE> {
   public:
     static void onRedraw(draw_mode_t);
@@ -496,6 +529,7 @@ class StepsScreen : public BaseNumericAdjustmentScreen, public CachedScreen<STEP
 #endif
 
 #if HAS_LEVELING
+
   class LevelingMenu : public BaseScreen, public CachedScreen<LEVELING_SCREEN_CACHE> {
     public:
       static void onRedraw(draw_mode_t);
@@ -511,35 +545,38 @@ class StepsScreen : public BaseNumericAdjustmentScreen, public CachedScreen<STEP
   #endif
 
   #if HAS_MESH
-  class BedMeshScreen : public BaseScreen, public CachedScreen<BED_MESH_SCREEN_CACHE> {
-    private:
-      enum MeshOpts {
-        USE_POINTS    = 0x01,
-        USE_COLORS    = 0x02,
-        USE_TAGS      = 0x04,
-        USE_HIGHLIGHT = 0x08,
-        USE_AUTOSCALE = 0x10
-      };
-
-      static uint8_t pointToTag(uint8_t x, uint8_t y);
-      static bool tagToPoint(uint8_t tag, uint8_t &x, uint8_t &y);
-      static float getHightlightedValue();
-      static void drawHighlightedPointValue();
-      static void drawMesh(int16_t x, int16_t y, int16_t w, int16_t h, ExtUI::bed_mesh_t data, uint8_t opts, float autoscale_max = 0.1);
-      static bool isMeshComplete(ExtUI::bed_mesh_t data);
 
-    public:
-      static void onMeshUpdate(const int8_t x, const int8_t y, const float val);
-      static void onMeshUpdate(const int8_t x, const int8_t y, const ExtUI::probe_state_t);
-      static void onEntry();
-      static void onRedraw(draw_mode_t);
-      static bool onTouchStart(uint8_t tag);
-      static bool onTouchEnd(uint8_t tag);
+    class BedMeshScreen : public BaseScreen, public CachedScreen<BED_MESH_SCREEN_CACHE> {
+      private:
+        enum MeshOpts {
+          USE_POINTS    = 0x01,
+          USE_COLORS    = 0x02,
+          USE_TAGS      = 0x04,
+          USE_HIGHLIGHT = 0x08,
+          USE_AUTOSCALE = 0x10
+        };
+
+        static uint8_t pointToTag(uint8_t x, uint8_t y);
+        static bool tagToPoint(uint8_t tag, uint8_t &x, uint8_t &y);
+        static float getHightlightedValue();
+        static void drawHighlightedPointValue();
+        static void drawMesh(int16_t x, int16_t y, int16_t w, int16_t h, ExtUI::bed_mesh_t data, uint8_t opts, float autoscale_max = 0.1);
+        static bool isMeshComplete(ExtUI::bed_mesh_t data);
 
-      static void startMeshProbe();
-  };
-  #endif
-#endif
+      public:
+        static void onMeshUpdate(const int8_t x, const int8_t y, const float val);
+        static void onMeshUpdate(const int8_t x, const int8_t y, const ExtUI::probe_state_t);
+        static void onEntry();
+        static void onRedraw(draw_mode_t);
+        static bool onTouchStart(uint8_t tag);
+        static bool onTouchEnd(uint8_t tag);
+
+        static void startMeshProbe();
+    };
+
+  #endif // HAS_MESH
+
+#endif // HAS_LEVELING
 
 #if ENABLED(BABYSTEPPING)
   class NudgeNozzleScreen : public BaseNumericAdjustmentScreen, public CachedScreen<ADJUST_OFFSETS_SCREEN_CACHE> {
@@ -727,6 +764,7 @@ class LockScreen : public BaseScreen, public CachedScreen<LOCK_SCREEN_CACHE> {
 };
 
 #if ENABLED(SDSUPPORT)
+
   class FilesScreen : public BaseScreen, public CachedScreen<FILES_SCREEN_CACHE, FILE_SCREEN_DL_SIZE> {
     private:
       #ifdef TOUCH_UI_PORTRAIT
@@ -761,7 +799,8 @@ class LockScreen : public BaseScreen, public CachedScreen<LOCK_SCREEN_CACHE> {
       static bool onTouchEnd(uint8_t tag);
       static void onIdle();
   };
-#endif
+
+#endif // SDSUPPORT
 
 class EndstopStatesScreen : public BaseScreen, public UncachedScreen {
   public:
@@ -779,6 +818,7 @@ class DisplayTuningScreen : public BaseNumericAdjustmentScreen, public CachedScr
 };
 
 #if ENABLED(TOUCH_UI_DEVELOPER_MENU)
+
   class DeveloperMenu : public BaseScreen, public UncachedScreen {
     public:
       static void onRedraw(draw_mode_t);
@@ -815,7 +855,8 @@ class DisplayTuningScreen : public BaseNumericAdjustmentScreen, public CachedScr
       static bool onTouchEnd(uint8_t tag);
       static void onIdle();
   };
-#endif
+
+#endif // TOUCH_UI_DEVELOPER_MENU
 
 class MediaPlayerScreen : public BaseScreen, public UncachedScreen {
   private:
@@ -840,6 +881,7 @@ class MediaPlayerScreen : public BaseScreen, public UncachedScreen {
 #endif
 
 #if ENABLED(TOUCH_UI_COCOA_PRESS)
+
   class PreheatMenu : public BaseScreen, public CachedScreen<PREHEAT_MENU_CACHE> {
     public:
       static void onRedraw(draw_mode_t);
@@ -888,4 +930,5 @@ class MediaPlayerScreen : public BaseScreen, public UncachedScreen {
       static void onRedraw(draw_mode_t);
       static void onIdle();
   };
-#endif
\ No newline at end of file
+
+#endif // TOUCH_UI_COCOA_PRESS

commit f3bddc4e4eefbcf4dd6fee946b4b7d305ac50686
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Wed Dec 9 04:09:31 2020 -0700

    Fixes and additions to FTDI EVE Touch UI (#20393)
    
    - Fixed name conflict with "SUBSCRIPT_TWO"
    - Fixed rendering bugs in "Leveling Menu"
    - Only show "Bed Mesh Screen" when UBL is enabled
    - Removed CocoaPress code from generic "Main Menu"
    - Removed CocoaPress code from LulzBot Bio "Status" screen
    - Moved generic "Move Axis" functionality into a base class
    - Added CocoaPress custom screens:
       - Status Screen
       - Unload Cartridge
       - Load Chocolate
       - Main Menu
       - Advanced Settings
       - XYZ Move (based on "Move Axis" base class)
       - Extrusion Move (based on "Move Axis" base class)
    - CocoaPress tweaks to "Temperature" screen
    - Fix FTDI EVE Touch UI compilation errors when not using leveling.

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 7b062045f9..3fa18d9f67 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -98,6 +98,10 @@ enum {
 #if ENABLED(TOUCH_UI_COCOA_PRESS)
   PREHEAT_MENU_CACHE,
   PREHEAT_TIMER_SCREEN_CACHE,
+  UNLOAD_CARTRIDGE_SCREEN_CACHE,
+  LOAD_CHOCOLATE_SCREEN_CACHE,
+  MOVE_XYZ_SCREEN_CACHE,
+  MOVE_E_SCREEN_CACHE,
 #endif
 #if ENABLED(SDSUPPORT)
   FILES_SCREEN_CACHE,
@@ -112,7 +116,7 @@ enum {
 // To save MCU RAM, the status message is "baked" in to the status screen
 // cache, so we reserve a large chunk of memory for the DL cache
 
-#define STATUS_SCREEN_DL_SIZE        2048
+#define STATUS_SCREEN_DL_SIZE        4096
 #define ALERT_BOX_DL_SIZE            3072
 #define SPINNER_DL_SIZE              3072
 #define FILE_SCREEN_DL_SIZE          4160
@@ -280,6 +284,7 @@ class StatusScreen : public BaseScreen, public CachedScreen<STATUS_SCREEN_CACHE,
       static bool  jog_xy;
       static bool  fine_motion;
 
+      static void draw_progress(draw_mode_t what);
       static void draw_temperature(draw_mode_t what);
       static void draw_syringe(draw_mode_t what);
       static void draw_arrows(draw_mode_t what);
@@ -335,29 +340,6 @@ class StatusScreen : public BaseScreen, public CachedScreen<STATUS_SCREEN_CACHE,
   };
 #endif
 
-#if ENABLED(TOUCH_UI_COCOA_PRESS)
-  class PreheatMenu : public BaseScreen, public CachedScreen<PREHEAT_MENU_CACHE> {
-    public:
-      static void onRedraw(draw_mode_t);
-      static bool onTouchEnd(uint8_t tag);
-  };
-
-  class PreheatTimerScreen : public BaseScreen, public CachedScreen<PREHEAT_TIMER_SCREEN_CACHE> {
-    private:
-      static uint16_t secondsRemaining();
-
-      static void draw_message(draw_mode_t);
-      static void draw_time_remaining(draw_mode_t);
-      static void draw_interaction_buttons(draw_mode_t);
-    public:
-      static void onRedraw(draw_mode_t);
-
-      static void onEntry();
-      static void onIdle();
-      static bool onTouchEnd(uint8_t tag);
-  };
-#endif
-
 class MainMenu : public BaseScreen, public CachedScreen<MENU_SCREEN_CACHE> {
   public:
     static void onRedraw(draw_mode_t);
@@ -467,7 +449,7 @@ class BaseNumericAdjustmentScreen : public BaseScreen {
     static bool onTouchEnd(uint8_t tag);
 };
 
-class MoveAxisScreen : public BaseNumericAdjustmentScreen, public CachedScreen<MOVE_AXIS_SCREEN_CACHE> {
+class BaseMoveAxisScreen : public BaseNumericAdjustmentScreen {
   private:
     static float getManualFeedrate(uint8_t axis, float increment_mm);
   public:
@@ -475,8 +457,12 @@ class MoveAxisScreen : public BaseNumericAdjustmentScreen, public CachedScreen<M
     static void setManualFeedrate(ExtUI::extruder_t, float increment_mm);
 
     static void onEntry();
-    static void onRedraw(draw_mode_t);
     static bool onTouchHeld(uint8_t tag);
+};
+
+class MoveAxisScreen : public BaseMoveAxisScreen, public CachedScreen<MOVE_AXIS_SCREEN_CACHE> {
+  public:
+    static void onRedraw(draw_mode_t);
     static void onIdle();
 };
 
@@ -852,3 +838,54 @@ class MediaPlayerScreen : public BaseScreen, public UncachedScreen {
       static bool onTouchEnd(uint8_t tag);
   };
 #endif
+
+#if ENABLED(TOUCH_UI_COCOA_PRESS)
+  class PreheatMenu : public BaseScreen, public CachedScreen<PREHEAT_MENU_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+  };
+
+  class PreheatTimerScreen : public BaseScreen, public CachedScreen<PREHEAT_TIMER_SCREEN_CACHE> {
+    private:
+      static uint16_t secondsRemaining();
+
+      static void draw_message(draw_mode_t);
+      static void draw_time_remaining(draw_mode_t);
+      static void draw_interaction_buttons(draw_mode_t);
+      static void draw_adjuster(draw_mode_t, uint8_t tag, progmem_str label, float value, int16_t x, int16_t y, int16_t w, int16_t h);
+    public:
+      static void onRedraw(draw_mode_t);
+
+      static void onEntry();
+      static void onIdle();
+      static bool onTouchHeld(uint8_t tag);
+      static bool onTouchEnd(uint8_t tag);
+  };
+
+  class UnloadCartridgeScreen : public BaseScreen, public CachedScreen<UNLOAD_CARTRIDGE_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+      static bool onTouchHeld(uint8_t tag);
+  };
+
+  class LoadChocolateScreen : public BaseScreen, public CachedScreen<LOAD_CHOCOLATE_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+      static bool onTouchHeld(uint8_t tag);
+  };
+
+  class MoveXYZScreen : public BaseMoveAxisScreen, public CachedScreen<MOVE_XYZ_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static void onIdle();
+  };
+
+  class MoveEScreen : public BaseMoveAxisScreen, public CachedScreen<MOVE_E_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static void onIdle();
+  };
+#endif
\ No newline at end of file

commit af75e24c2e4bb380dc9496cba5fd397f056ad0ab
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Nov 6 19:09:29 2020 -0600

    Clean up corrected urls

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 71fc7d9ee3..7b062045f9 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -17,7 +17,7 @@
  *   GNU General Public License for more details.                           *
  *                                                                          *
  *   To view a copy of the GNU General Public License, go to the following  *
- *   location: <https://www.gnu.org/licenses/>.                              *
+ *   location: <https://www.gnu.org/licenses/>.                             *
  ****************************************************************************/
 
 #pragma once

commit b6856dcb999b51077c89eb30c5ec102c507152c0
Author: Marcio Teixeira <mlt4356-github@yahoo.com>
Date:   Wed Oct 28 11:23:46 2020 -0600

    Improvement and fixes to FTDI touch UI
    
    - Fixed incorrect LCD text string
    - Fixed incorrect refresh of filament change screens
    - Allow host control via touch UI
    - Updates to leveling menu
    - Modified ExtUI::isPrinting() to check if the job timer is running
    - Added ExtUI method to check whether a host print is paused

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 2108cff8df..71fc7d9ee3 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -365,6 +365,9 @@ class MainMenu : public BaseScreen, public CachedScreen<MENU_SCREEN_CACHE> {
 };
 
 class TuneMenu : public BaseScreen, public CachedScreen<TUNE_SCREEN_CACHE> {
+  private:
+    static void pausePrint();
+    static void resumePrint();
   public:
     static void onRedraw(draw_mode_t);
     static bool onTouchEnd(uint8_t tag);

commit 4696142a31fe74ad32a57a5939e3af1cbae23e52
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Sat Sep 19 10:20:15 2020 -0400

    Fix compile for Taz Pro (#19424)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index b425c4fa45..2108cff8df 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -27,6 +27,10 @@
 #include "../theme/theme.h"
 #include "string_format.h"
 
+#ifndef BED_LEVELING_COMMANDS
+  #define BED_LEVELING_COMMANDS "G29"
+#endif
+
 extern tiny_timer_t refresh_timer;
 
 /********************************* DL CACHE SLOTS ******************************/

commit c539254101f33b0782dca6fa7e00275e033c6ba3
Author: Marcio Teixeira <mlt4356-github@yahoo.com>
Date:   Mon Sep 14 16:32:54 2020 -0600

    Add warning to ExtUI Bed Mesh Screen. (#19397)
    
    - Show a warning on the Mesh Bed Leveling screen if some points aren't probed.

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index ec8df27607..b425c4fa45 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -533,6 +533,7 @@ class StepsScreen : public BaseNumericAdjustmentScreen, public CachedScreen<STEP
       static float getHightlightedValue();
       static void drawHighlightedPointValue();
       static void drawMesh(int16_t x, int16_t y, int16_t w, int16_t h, ExtUI::bed_mesh_t data, uint8_t opts, float autoscale_max = 0.1);
+      static bool isMeshComplete(ExtUI::bed_mesh_t data);
 
     public:
       static void onMeshUpdate(const int8_t x, const int8_t y, const float val);

commit 872516f9f903157fbd927bf6083996da70ab4e63
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Sat Sep 12 22:32:00 2020 -0600

    Touch UI "Leveling" menu, misc. fixes (#19349)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index ae48f75240..ec8df27607 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -39,24 +39,37 @@ enum {
   STATUS_SCREEN_CACHE,
   MENU_SCREEN_CACHE,
   TUNE_SCREEN_CACHE,
-  ADJUST_OFFSETS_SCREEN_CACHE,
   ALERT_BOX_CACHE,
   SPINNER_CACHE,
   ADVANCED_SETTINGS_SCREEN_CACHE,
   MOVE_AXIS_SCREEN_CACHE,
   TEMPERATURE_SCREEN_CACHE,
   STEPS_SCREEN_CACHE,
-  STEPPER_CURRENT_SCREEN_CACHE,
-  STEPPER_BUMP_SENSITIVITY_SCREEN_CACHE,
-  ZOFFSET_SCREEN_CACHE,
-  NOZZLE_OFFSET_SCREEN_CACHE,
-  BACKLASH_COMPENSATION_SCREEN_CACHE,
   MAX_FEEDRATE_SCREEN_CACHE,
   MAX_VELOCITY_SCREEN_CACHE,
   MAX_ACCELERATION_SCREEN_CACHE,
   DEFAULT_ACCELERATION_SCREEN_CACHE,
-#if HAS_MESH
-  BED_MESH_SCREEN_CACHE,
+#if HAS_LEVELING
+  LEVELING_SCREEN_CACHE,
+  #if HAS_BED_PROBE
+    ZOFFSET_SCREEN_CACHE,
+  #endif
+  #if HAS_MESH
+    BED_MESH_SCREEN_CACHE,
+  #endif
+#endif
+#if ENABLED(BABYSTEPPING)
+  ADJUST_OFFSETS_SCREEN_CACHE,
+#endif
+#if HAS_TRINAMIC_CONFIG
+  STEPPER_CURRENT_SCREEN_CACHE,
+  STEPPER_BUMP_SENSITIVITY_SCREEN_CACHE,
+#endif
+#if HAS_MULTI_HOTEND
+  NOZZLE_OFFSET_SCREEN_CACHE,
+#endif
+#if ENABLED(BACKLASH_GCODE)
+  BACKLASH_COMPENSATION_SCREEN_CACHE,
 #endif
 #if HAS_JUNCTION_DEVIATION
   JUNC_DEV_SCREEN_CACHE,
@@ -81,12 +94,14 @@ enum {
 #if ENABLED(TOUCH_UI_COCOA_PRESS)
   PREHEAT_MENU_CACHE,
   PREHEAT_TIMER_SCREEN_CACHE,
+#endif
+#if ENABLED(SDSUPPORT)
+  FILES_SCREEN_CACHE,
 #endif
   CHANGE_FILAMENT_SCREEN_CACHE,
   INTERFACE_SETTINGS_SCREEN_CACHE,
   INTERFACE_SOUNDS_SCREEN_CACHE,
   LOCK_SCREEN_CACHE,
-  FILES_SCREEN_CACHE,
   DISPLAY_TIMINGS_SCREEN_CACHE
 };
 
@@ -133,33 +148,6 @@ class AboutScreen : public BaseScreen, public UncachedScreen {
     static bool onTouchEnd(uint8_t tag);
 };
 
-#if HAS_MESH
-class BedMeshScreen : public BaseScreen, public CachedScreen<BED_MESH_SCREEN_CACHE> {
-  private:
-    enum MeshOpts {
-      USE_POINTS    = 0x01,
-      USE_COLORS    = 0x02,
-      USE_TAGS      = 0x04,
-      USE_HIGHLIGHT = 0x08,
-      USE_AUTOSCALE = 0x10
-    };
-
-    static uint8_t pointToTag(uint8_t x, uint8_t y);
-    static bool tagToPoint(uint8_t tag, uint8_t &x, uint8_t &y);
-    static float getHightlightedValue();
-    static void drawHighlightedPointValue();
-    static void drawMesh(int16_t x, int16_t y, int16_t w, int16_t h, ExtUI::bed_mesh_t data, uint8_t opts, float autoscale_max = 0.1);
-
-  public:
-    static void onMeshUpdate(const int8_t x, const int8_t y, const float val);
-    static void onMeshUpdate(const int8_t x, const int8_t y, const ExtUI::probe_state_t);
-    static void onEntry();
-    static void onRedraw(draw_mode_t);
-    static bool onTouchStart(uint8_t tag);
-    static bool onTouchEnd(uint8_t tag);
-};
-#endif
-
 #if ENABLED(PRINTCOUNTER)
   class StatisticsScreen : public BaseScreen, public UncachedScreen {
     public:
@@ -505,21 +493,58 @@ class StepsScreen : public BaseNumericAdjustmentScreen, public CachedScreen<STEP
   };
 #endif
 
-#if HAS_BED_PROBE
-  class ZOffsetScreen : public BaseNumericAdjustmentScreen, public CachedScreen<ZOFFSET_SCREEN_CACHE> {
+#if HAS_MULTI_HOTEND
+  class NozzleOffsetScreen : public BaseNumericAdjustmentScreen, public CachedScreen<NOZZLE_OFFSET_SCREEN_CACHE> {
     public:
+      static void onEntry();
       static void onRedraw(draw_mode_t);
       static bool onTouchHeld(uint8_t tag);
   };
 #endif
 
-#if HAS_MULTI_HOTEND
-  class NozzleOffsetScreen : public BaseNumericAdjustmentScreen, public CachedScreen<NOZZLE_OFFSET_SCREEN_CACHE> {
+#if HAS_LEVELING
+  class LevelingMenu : public BaseScreen, public CachedScreen<LEVELING_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+  };
+
+  #if HAS_BED_PROBE
+    class ZOffsetScreen : public BaseNumericAdjustmentScreen, public CachedScreen<ZOFFSET_SCREEN_CACHE> {
+      public:
+        static void onRedraw(draw_mode_t);
+        static bool onTouchHeld(uint8_t tag);
+    };
+  #endif
+
+  #if HAS_MESH
+  class BedMeshScreen : public BaseScreen, public CachedScreen<BED_MESH_SCREEN_CACHE> {
+    private:
+      enum MeshOpts {
+        USE_POINTS    = 0x01,
+        USE_COLORS    = 0x02,
+        USE_TAGS      = 0x04,
+        USE_HIGHLIGHT = 0x08,
+        USE_AUTOSCALE = 0x10
+      };
+
+      static uint8_t pointToTag(uint8_t x, uint8_t y);
+      static bool tagToPoint(uint8_t tag, uint8_t &x, uint8_t &y);
+      static float getHightlightedValue();
+      static void drawHighlightedPointValue();
+      static void drawMesh(int16_t x, int16_t y, int16_t w, int16_t h, ExtUI::bed_mesh_t data, uint8_t opts, float autoscale_max = 0.1);
+
     public:
+      static void onMeshUpdate(const int8_t x, const int8_t y, const float val);
+      static void onMeshUpdate(const int8_t x, const int8_t y, const ExtUI::probe_state_t);
       static void onEntry();
       static void onRedraw(draw_mode_t);
-      static bool onTouchHeld(uint8_t tag);
+      static bool onTouchStart(uint8_t tag);
+      static bool onTouchEnd(uint8_t tag);
+
+      static void startMeshProbe();
   };
+  #endif
 #endif
 
 #if ENABLED(BABYSTEPPING)
@@ -707,40 +732,42 @@ class LockScreen : public BaseScreen, public CachedScreen<LOCK_SCREEN_CACHE> {
     static bool onTouchEnd(uint8_t tag);
 };
 
-class FilesScreen : public BaseScreen, public CachedScreen<FILES_SCREEN_CACHE, FILE_SCREEN_DL_SIZE> {
-  private:
-    #ifdef TOUCH_UI_PORTRAIT
-      static constexpr uint8_t header_h       = 2;
-      static constexpr uint8_t footer_h       = 2;
-      static constexpr uint8_t files_per_page = 11;
-    #else
-      static constexpr uint8_t header_h       = 1;
-      static constexpr uint8_t footer_h       = 1;
-      static constexpr uint8_t files_per_page = 6;
-    #endif
-
-    static uint8_t  getTagForLine(uint8_t line) {return line + 2;}
-    static uint8_t  getLineForTag(uint8_t tag)  {return  tag - 2;}
-    static uint16_t getFileForTag(uint8_t tag);
-    static uint16_t getSelectedFileIndex();
-
-    inline static const char *getSelectedShortFilename() {return getSelectedFilename(false);}
-    inline static const char *getSelectedLongFilename()  {return getSelectedFilename(true);}
-    static const char *getSelectedFilename(bool longName);
-
-    static void drawFileButton(const char* filename, uint8_t tag, bool is_dir, bool is_highlighted);
-    static void drawFileList();
-    static void drawHeader();
-    static void drawFooter();
-    static void drawSelectedFile();
-
-    static void gotoPage(uint8_t);
-  public:
-    static void onEntry();
-    static void onRedraw(draw_mode_t);
-    static bool onTouchEnd(uint8_t tag);
-    static void onIdle();
-};
+#if ENABLED(SDSUPPORT)
+  class FilesScreen : public BaseScreen, public CachedScreen<FILES_SCREEN_CACHE, FILE_SCREEN_DL_SIZE> {
+    private:
+      #ifdef TOUCH_UI_PORTRAIT
+        static constexpr uint8_t header_h       = 2;
+        static constexpr uint8_t footer_h       = 2;
+        static constexpr uint8_t files_per_page = 11;
+      #else
+        static constexpr uint8_t header_h       = 1;
+        static constexpr uint8_t footer_h       = 1;
+        static constexpr uint8_t files_per_page = 6;
+      #endif
+
+      static uint8_t  getTagForLine(uint8_t line) {return line + 2;}
+      static uint8_t  getLineForTag(uint8_t tag)  {return  tag - 2;}
+      static uint16_t getFileForTag(uint8_t tag);
+      static uint16_t getSelectedFileIndex();
+
+      inline static const char *getSelectedShortFilename() {return getSelectedFilename(false);}
+      inline static const char *getSelectedLongFilename()  {return getSelectedFilename(true);}
+      static const char *getSelectedFilename(bool longName);
+
+      static void drawFileButton(const char* filename, uint8_t tag, bool is_dir, bool is_highlighted);
+      static void drawFileList();
+      static void drawHeader();
+      static void drawFooter();
+      static void drawSelectedFile();
+
+      static void gotoPage(uint8_t);
+    public:
+      static void onEntry();
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+      static void onIdle();
+  };
+#endif
 
 class EndstopStatesScreen : public BaseScreen, public UncachedScreen {
   public:

commit 2b789ddab968cf7040b5c927c76e6c7bec944cc3
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Sun Sep 6 16:37:16 2020 -0600

    Touch UI long filenames fixes (#19262)
    
    * Improvements to FTDI DLCache functionality.
    * Better handling of long file names in Touch UI
    - Long file names now truncated and shown with ellipsis.
    - Increased display cache buffer to allow for longer filenames.
    - Visual error message when display cache is exceeded.

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 92e6b230f7..ae48f75240 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -96,7 +96,7 @@ enum {
 #define STATUS_SCREEN_DL_SIZE        2048
 #define ALERT_BOX_DL_SIZE            3072
 #define SPINNER_DL_SIZE              3072
-#define FILE_SCREEN_DL_SIZE          3072
+#define FILE_SCREEN_DL_SIZE          4160
 #define PRINTING_SCREEN_DL_SIZE      2048
 
 /************************* MENU SCREEN DECLARATIONS *************************/

commit 99ba866d8d3c9abc16558ca12ba34efb9a7922e5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Aug 6 08:14:00 2020 -0500

    Optimize G-code / feature dependencies (#18919)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 276727fc46..92e6b230f7 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -63,7 +63,7 @@ enum {
 #else
   JERK_SCREEN_CACHE,
 #endif
-#if HAS_CASE_LIGHT
+#if ENABLED(CASE_LIGHT_ENABLE)
   CASE_LIGHT_SCREEN_CACHE,
 #endif
 #if EITHER(LIN_ADVANCE, FILAMENT_RUNOUT_SENSOR)
@@ -579,7 +579,7 @@ class DefaultAccelerationScreen : public BaseNumericAdjustmentScreen, public Cac
   };
 #endif
 
-#if HAS_CASE_LIGHT
+#if ENABLED(CASE_LIGHT_ENABLE)
   class CaseLightScreen : public BaseNumericAdjustmentScreen, public CachedScreen<CASE_LIGHT_SCREEN_CACHE> {
     public:
       static void onRedraw(draw_mode_t);

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index ce77a00b81..276727fc46 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -17,7 +17,7 @@
  *   GNU General Public License for more details.                           *
  *                                                                          *
  *   To view a copy of the GNU General Public License, go to the following  *
- *   location: <http://www.gnu.org/licenses/>.                              *
+ *   location: <https://www.gnu.org/licenses/>.                              *
  ****************************************************************************/
 
 #pragma once

commit 7c26a54d3f2434c4d578f58af011a76dd298d4e3
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed May 6 03:34:05 2020 -0500

    Fix, clarify LCD_TIMEOUT_TO_STATUS
    
    Replaces #17887
    
    Co-Authored-By: Daniel Callander <knifa@users.noreply.github.com>

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index b2d5e55a12..ce77a00b81 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -103,7 +103,7 @@ enum {
 
 class BaseScreen : public UIScreen {
   protected:
-    #if LCD_TIMEOUT_TO_STATUS
+    #if LCD_TIMEOUT_TO_STATUS > 0
       static uint32_t last_interaction;
     #endif
 

commit 07a6bf9b8464346326e9b35bcfa88a20fa2191d1
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Mon Apr 27 23:31:05 2020 -0600

    Enhance and fix FTDI EVE Touch UI (#17755)
    
    - Stop print and play error sound if USB drive is removed.
    - Allow configuration of version string in touch UI.
    - Print a completion message in the bed mesh leveling screen.
    - Don't play redundant sound at the start of a print.
    - Clicking on percentage in status screen now goes into print speed screen
    - Clicking on axis in status screen now goes to nozzle motion screens
    - Use default increment of 100 when nozzle is preheated in temp screen, 10 otherwise
    - Fixed grayed out change filament button in tune menu
    - Eliminated code duplication in tune menu
    - Add button for resetting BLTouch to advanced settings menu

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 87522870b9..b2d5e55a12 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -223,7 +223,6 @@ class ConfirmStartPrintDialogBox : public DialogBoxBaseClass, public UncachedScr
 
     static const char *getFilename(bool longName);
   public:
-    static void onEntry();
     static void onRedraw(draw_mode_t);
     static bool onTouchEnd(uint8_t);
 

commit 55d66fb8971d9e5dbfb15e7ae5c952839b488f59
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Apr 23 20:49:11 2020 -0500

    Add HAS_JUNCTION_DEVIATION

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index c659f50fc1..87522870b9 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -58,7 +58,7 @@ enum {
 #if HAS_MESH
   BED_MESH_SCREEN_CACHE,
 #endif
-#if DISABLED(CLASSIC_JERK)
+#if HAS_JUNCTION_DEVIATION
   JUNC_DEV_SCREEN_CACHE,
 #else
   JERK_SCREEN_CACHE,
@@ -566,7 +566,7 @@ class DefaultAccelerationScreen : public BaseNumericAdjustmentScreen, public Cac
     static bool onTouchHeld(uint8_t tag);
 };
 
-#if DISABLED(CLASSIC_JERK)
+#if HAS_JUNCTION_DEVIATION
   class JunctionDeviationScreen : public BaseNumericAdjustmentScreen, public CachedScreen<JUNC_DEV_SCREEN_CACHE> {
     public:
       static void onRedraw(draw_mode_t);

commit 15f6f53638a6778d22a17e1900fb3a9fdc92dade
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 19 23:56:55 2020 -0500

    Add HAS_HOTEND, etc.

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 06f64d38cb..c659f50fc1 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -514,7 +514,7 @@ class StepsScreen : public BaseNumericAdjustmentScreen, public CachedScreen<STEP
   };
 #endif
 
-#if HOTENDS > 1
+#if HAS_MULTI_HOTEND
   class NozzleOffsetScreen : public BaseNumericAdjustmentScreen, public CachedScreen<NOZZLE_OFFSET_SCREEN_CACHE> {
     public:
       static void onEntry();

commit dbdfe61644df845a4bdebb62b4b7d1cd51fc4a07
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Thu Apr 9 15:00:25 2020 -0600

    Fix and improve FTDI Eve Touch UI (#17426)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 8fa4800d6a..06f64d38cb 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -145,10 +145,10 @@ class BedMeshScreen : public BaseScreen, public CachedScreen<BED_MESH_SCREEN_CAC
     };
 
     static uint8_t pointToTag(uint8_t x, uint8_t y);
-    static void tagToPoint(uint8_t tag, uint8_t &x, uint8_t &y);
+    static bool tagToPoint(uint8_t tag, uint8_t &x, uint8_t &y);
     static float getHightlightedValue();
     static void drawHighlightedPointValue();
-    static void drawMesh(int16_t x, int16_t y, int16_t w, int16_t h, ExtUI::bed_mesh_t data, uint8_t opts);
+    static void drawMesh(int16_t x, int16_t y, int16_t w, int16_t h, ExtUI::bed_mesh_t data, uint8_t opts, float autoscale_max = 0.1);
 
   public:
     static void onMeshUpdate(const int8_t x, const int8_t y, const float val);

commit be0e313c078c7425de7bc45a0371756ee2571056
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Thu Apr 2 13:24:55 2020 -0600

    Touch UI additions, bug fixes (#17379)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 346d122a0f..8fa4800d6a 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -55,6 +55,9 @@ enum {
   MAX_VELOCITY_SCREEN_CACHE,
   MAX_ACCELERATION_SCREEN_CACHE,
   DEFAULT_ACCELERATION_SCREEN_CACHE,
+#if HAS_MESH
+  BED_MESH_SCREEN_CACHE,
+#endif
 #if DISABLED(CLASSIC_JERK)
   JUNC_DEV_SCREEN_CACHE,
 #else
@@ -130,6 +133,33 @@ class AboutScreen : public BaseScreen, public UncachedScreen {
     static bool onTouchEnd(uint8_t tag);
 };
 
+#if HAS_MESH
+class BedMeshScreen : public BaseScreen, public CachedScreen<BED_MESH_SCREEN_CACHE> {
+  private:
+    enum MeshOpts {
+      USE_POINTS    = 0x01,
+      USE_COLORS    = 0x02,
+      USE_TAGS      = 0x04,
+      USE_HIGHLIGHT = 0x08,
+      USE_AUTOSCALE = 0x10
+    };
+
+    static uint8_t pointToTag(uint8_t x, uint8_t y);
+    static void tagToPoint(uint8_t tag, uint8_t &x, uint8_t &y);
+    static float getHightlightedValue();
+    static void drawHighlightedPointValue();
+    static void drawMesh(int16_t x, int16_t y, int16_t w, int16_t h, ExtUI::bed_mesh_t data, uint8_t opts);
+
+  public:
+    static void onMeshUpdate(const int8_t x, const int8_t y, const float val);
+    static void onMeshUpdate(const int8_t x, const int8_t y, const ExtUI::probe_state_t);
+    static void onEntry();
+    static void onRedraw(draw_mode_t);
+    static bool onTouchStart(uint8_t tag);
+    static bool onTouchEnd(uint8_t tag);
+};
+#endif
+
 #if ENABLED(PRINTCOUNTER)
   class StatisticsScreen : public BaseScreen, public UncachedScreen {
     public:

commit d83ad6f321af6511d35e0396776f557195fcba9f
Author: Marcio T <mlt4356-github@yahoo.com>
Date:   Tue Mar 31 13:22:04 2020 -0600

    Improve / fix FTDI EVE Touch UI (#17338)
    
    - Fix timeout and debugging string
    - Fix check for whether `LCD_TIMEOUT_TO_STATUS` is valid
    - Fix incorrect debugging message
    - Make capitalization of callbacks consistent.
    - Allow Touch UI to use hardware SPI on Einsy boards
    - Move print stats to About Printer page.
    - More generic about screen with GPL license.
    - Add missing handler for power loss event
    - Less code duplication on status screen and main/advanced menu; more legible
    - Reorganize advanced and main menu to add more features
    - Hide home Z button when using Z_SAFE_HOMING
    - Fix compilation errors when certain features enabled
    - Fix missing labels in UI
    - Improve color scheme
    - Add new preheat menus
    - Fix incorrect rendering of Marlin logo on boot
    - Add Level X Axis and Auto calibrate buttons

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
index 02c5b14831..346d122a0f 100644
--- a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -76,6 +76,7 @@ enum {
   PRINTING_SCREEN_CACHE,
 #endif
 #if ENABLED(TOUCH_UI_COCOA_PRESS)
+  PREHEAT_MENU_CACHE,
   PREHEAT_TIMER_SCREEN_CACHE,
 #endif
   CHANGE_FILAMENT_SCREEN_CACHE,
@@ -99,7 +100,7 @@ enum {
 
 class BaseScreen : public UIScreen {
   protected:
-    #ifdef LCD_TIMEOUT_TO_STATUS
+    #if LCD_TIMEOUT_TO_STATUS
       static uint32_t last_interaction;
     #endif
 
@@ -314,6 +315,12 @@ class StatusScreen : public BaseScreen, public CachedScreen<STATUS_SCREEN_CACHE,
 #endif
 
 #if ENABLED(TOUCH_UI_COCOA_PRESS)
+  class PreheatMenu : public BaseScreen, public CachedScreen<PREHEAT_MENU_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+  };
+
   class PreheatTimerScreen : public BaseScreen, public CachedScreen<PREHEAT_TIMER_SCREEN_CACHE> {
     private:
       static uint16_t secondsRemaining();

commit 6bead0c1b04152f6a291d851f6cd4029fe0fc616
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 16:29:29 2020 -0500

    Shorter paths to HAL, ExtUI (#17156)

diff --git a/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
new file mode 100644
index 0000000000..02c5b14831
--- /dev/null
+++ b/Marlin/src/lcd/extui/lib/ftdi_eve_touch_ui/screens/screens.h
@@ -0,0 +1,783 @@
+/*************
+ * screens.h *
+ *************/
+
+/****************************************************************************
+ *   Written By Mark Pelletier  2017 - Aleph Objects, Inc.                  *
+ *   Written By Marcio Teixeira 2018 - Aleph Objects, Inc.                  *
+ *                                                                          *
+ *   This program is free software: you can redistribute it and/or modify   *
+ *   it under the terms of the GNU General Public License as published by   *
+ *   the Free Software Foundation, either version 3 of the License, or      *
+ *   (at your option) any later version.                                    *
+ *                                                                          *
+ *   This program is distributed in the hope that it will be useful,        *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
+ *   GNU General Public License for more details.                           *
+ *                                                                          *
+ *   To view a copy of the GNU General Public License, go to the following  *
+ *   location: <http://www.gnu.org/licenses/>.                              *
+ ****************************************************************************/
+
+#pragma once
+
+#include "../ftdi_eve_lib/ftdi_eve_lib.h"
+#include "../language/language.h"
+#include "../theme/theme.h"
+#include "string_format.h"
+
+extern tiny_timer_t refresh_timer;
+
+/********************************* DL CACHE SLOTS ******************************/
+
+// In order to reduce SPI traffic, we cache display lists (DL) in RAMG. This
+// is done using the CLCD::DLCache class, which takes a unique ID for each
+// cache location. These IDs are defined here:
+
+enum {
+  STATUS_SCREEN_CACHE,
+  MENU_SCREEN_CACHE,
+  TUNE_SCREEN_CACHE,
+  ADJUST_OFFSETS_SCREEN_CACHE,
+  ALERT_BOX_CACHE,
+  SPINNER_CACHE,
+  ADVANCED_SETTINGS_SCREEN_CACHE,
+  MOVE_AXIS_SCREEN_CACHE,
+  TEMPERATURE_SCREEN_CACHE,
+  STEPS_SCREEN_CACHE,
+  STEPPER_CURRENT_SCREEN_CACHE,
+  STEPPER_BUMP_SENSITIVITY_SCREEN_CACHE,
+  ZOFFSET_SCREEN_CACHE,
+  NOZZLE_OFFSET_SCREEN_CACHE,
+  BACKLASH_COMPENSATION_SCREEN_CACHE,
+  MAX_FEEDRATE_SCREEN_CACHE,
+  MAX_VELOCITY_SCREEN_CACHE,
+  MAX_ACCELERATION_SCREEN_CACHE,
+  DEFAULT_ACCELERATION_SCREEN_CACHE,
+#if DISABLED(CLASSIC_JERK)
+  JUNC_DEV_SCREEN_CACHE,
+#else
+  JERK_SCREEN_CACHE,
+#endif
+#if HAS_CASE_LIGHT
+  CASE_LIGHT_SCREEN_CACHE,
+#endif
+#if EITHER(LIN_ADVANCE, FILAMENT_RUNOUT_SENSOR)
+  FILAMENT_MENU_CACHE,
+#endif
+#if ENABLED(LIN_ADVANCE)
+  LINEAR_ADVANCE_SCREEN_CACHE,
+#endif
+#if ENABLED(FILAMENT_RUNOUT_SENSOR)
+  FILAMENT_RUNOUT_SCREEN_CACHE,
+#endif
+#if ENABLED(TOUCH_UI_LULZBOT_BIO)
+  PRINTING_SCREEN_CACHE,
+#endif
+#if ENABLED(TOUCH_UI_COCOA_PRESS)
+  PREHEAT_TIMER_SCREEN_CACHE,
+#endif
+  CHANGE_FILAMENT_SCREEN_CACHE,
+  INTERFACE_SETTINGS_SCREEN_CACHE,
+  INTERFACE_SOUNDS_SCREEN_CACHE,
+  LOCK_SCREEN_CACHE,
+  FILES_SCREEN_CACHE,
+  DISPLAY_TIMINGS_SCREEN_CACHE
+};
+
+// To save MCU RAM, the status message is "baked" in to the status screen
+// cache, so we reserve a large chunk of memory for the DL cache
+
+#define STATUS_SCREEN_DL_SIZE        2048
+#define ALERT_BOX_DL_SIZE            3072
+#define SPINNER_DL_SIZE              3072
+#define FILE_SCREEN_DL_SIZE          3072
+#define PRINTING_SCREEN_DL_SIZE      2048
+
+/************************* MENU SCREEN DECLARATIONS *************************/
+
+class BaseScreen : public UIScreen {
+  protected:
+    #ifdef LCD_TIMEOUT_TO_STATUS
+      static uint32_t last_interaction;
+    #endif
+
+    static bool buttonIsPressed(uint8_t tag);
+
+  public:
+    static bool buttonStyleCallback(CommandProcessor &, uint8_t, uint8_t &, uint16_t &, bool);
+
+    static void reset_menu_timeout();
+
+    static void onEntry();
+    static void onIdle();
+};
+
+class BootScreen : public BaseScreen, public UncachedScreen {
+  private:
+    static void showSplashScreen();
+  public:
+    static void onRedraw(draw_mode_t);
+    static void onIdle();
+};
+
+class AboutScreen : public BaseScreen, public UncachedScreen {
+  public:
+    static void onEntry();
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t tag);
+};
+
+#if ENABLED(PRINTCOUNTER)
+  class StatisticsScreen : public BaseScreen, public UncachedScreen {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+  };
+#endif
+
+class KillScreen {
+  // The KillScreen is behaves differently than the
+  // others, so we do not bother extending UIScreen.
+  public:
+    static void show(const char*);
+};
+
+class DialogBoxBaseClass : public BaseScreen {
+  protected:
+    template<typename T> static void drawMessage(const T, int16_t font = 0);
+    static void drawYesNoButtons(uint8_t default_btn = 0);
+    static void drawOkayButton();
+    static void drawSpinner();
+    static void drawButton(const progmem_str);
+
+    static void onRedraw(draw_mode_t) {};
+  public:
+    static bool onTouchEnd(uint8_t tag);
+    static void onIdle();
+};
+
+class AlertDialogBox : public DialogBoxBaseClass, public CachedScreen<ALERT_BOX_CACHE,ALERT_BOX_DL_SIZE> {
+  public:
+    static void onEntry();
+    static void onRedraw(draw_mode_t);
+    template<typename T> static void show(T);
+    template<typename T> static void showError(T);
+    static void hide();
+};
+
+class RestoreFailsafeDialogBox : public DialogBoxBaseClass, public UncachedScreen {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t tag);
+};
+
+class SaveSettingsDialogBox : public DialogBoxBaseClass, public UncachedScreen {
+  private:
+    static bool needs_save;
+
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t tag);
+
+    static void promptToSaveSettings();
+    static void settingsChanged() {needs_save = true;}
+};
+
+class ConfirmStartPrintDialogBox : public DialogBoxBaseClass, public UncachedScreen {
+  private:
+    inline static const char *getShortFilename() {return getFilename(false);}
+    inline static const char *getLongFilename()  {return getFilename(true);}
+
+    static const char *getFilename(bool longName);
+  public:
+    static void onEntry();
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t);
+
+    static void show(uint8_t file_index);
+};
+
+class ConfirmAbortPrintDialogBox : public DialogBoxBaseClass, public UncachedScreen {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t tag);
+};
+
+#if ENABLED(CALIBRATION_GCODE)
+class ConfirmAutoCalibrationDialogBox : public DialogBoxBaseClass, public UncachedScreen {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t tag);
+};
+#endif
+
+class ConfirmUserRequestAlertBox : public AlertDialogBox {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t);
+    static void hide();
+    static void show(const char*);
+};
+
+class SpinnerDialogBox : public DialogBoxBaseClass, public CachedScreen<SPINNER_CACHE,SPINNER_DL_SIZE> {
+  public:
+    static void onRedraw(draw_mode_t);
+    static void onIdle();
+
+    static void show(const progmem_str);
+    static void hide();
+    static void enqueueAndWait_P(const progmem_str commands);
+    static void enqueueAndWait_P(const progmem_str message, const progmem_str commands);
+};
+
+#if NONE(TOUCH_UI_LULZBOT_BIO, TOUCH_UI_COCOA_PRESS)
+class StatusScreen : public BaseScreen, public CachedScreen<STATUS_SCREEN_CACHE,STATUS_SCREEN_DL_SIZE> {
+  private:
+    static void draw_axis_position(draw_mode_t);
+    static void draw_temperature(draw_mode_t);
+    static void draw_progress(draw_mode_t);
+    static void draw_interaction_buttons(draw_mode_t);
+    static void draw_status_message(draw_mode_t, const char * const);
+
+  public:
+    static void loadBitmaps();
+    static void setStatusMessage(const char *);
+    static void setStatusMessage(progmem_str);
+    static void onRedraw(draw_mode_t);
+    static void onStartup();
+    static void onEntry();
+    static void onIdle();
+    static bool onTouchEnd(uint8_t tag);
+};
+#else
+  class StatusScreen : public BaseScreen, public CachedScreen<STATUS_SCREEN_CACHE> {
+    private:
+      static float increment;
+      static bool  jog_xy;
+      static bool  fine_motion;
+
+      static void draw_temperature(draw_mode_t what);
+      static void draw_syringe(draw_mode_t what);
+      static void draw_arrows(draw_mode_t what);
+      static void draw_overlay_icons(draw_mode_t what);
+      static void draw_fine_motion(draw_mode_t what);
+      static void draw_buttons(draw_mode_t what);
+    public:
+      static void loadBitmaps();
+      static void unlockMotors();
+
+      static void setStatusMessage(const char *);
+      static void setStatusMessage(progmem_str);
+
+      static void onRedraw(draw_mode_t);
+
+      static bool onTouchStart(uint8_t tag);
+      static bool onTouchHeld(uint8_t tag);
+      static bool onTouchEnd(uint8_t tag);
+      static void onIdle();
+
+  };
+#endif
+
+#if ENABLED(TOUCH_UI_LULZBOT_BIO)
+  class BioPrintingDialogBox : public BaseScreen, public CachedScreen<PRINTING_SCREEN_CACHE,PRINTING_SCREEN_DL_SIZE> {
+    private:
+      static void draw_status_message(draw_mode_t, const char * const);
+      static void draw_progress(draw_mode_t);
+      static void draw_time_remaining(draw_mode_t);
+      static void draw_interaction_buttons(draw_mode_t);
+    public:
+      static void onRedraw(draw_mode_t);
+
+      static void show();
+
+      static void setStatusMessage(const char *);
+      static void setStatusMessage(progmem_str);
+
+      static void onIdle();
+      static bool onTouchEnd(uint8_t tag);
+  };
+
+  class BioConfirmHomeXYZ : public DialogBoxBaseClass, public UncachedScreen {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+  };
+
+  class BioConfirmHomeE : public DialogBoxBaseClass, public UncachedScreen {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+  };
+#endif
+
+#if ENABLED(TOUCH_UI_COCOA_PRESS)
+  class PreheatTimerScreen : public BaseScreen, public CachedScreen<PREHEAT_TIMER_SCREEN_CACHE> {
+    private:
+      static uint16_t secondsRemaining();
+
+      static void draw_message(draw_mode_t);
+      static void draw_time_remaining(draw_mode_t);
+      static void draw_interaction_buttons(draw_mode_t);
+    public:
+      static void onRedraw(draw_mode_t);
+
+      static void onEntry();
+      static void onIdle();
+      static bool onTouchEnd(uint8_t tag);
+  };
+#endif
+
+class MainMenu : public BaseScreen, public CachedScreen<MENU_SCREEN_CACHE> {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t tag);
+};
+
+class TuneMenu : public BaseScreen, public CachedScreen<TUNE_SCREEN_CACHE> {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t tag);
+};
+
+class TouchCalibrationScreen : public BaseScreen, public UncachedScreen {
+  public:
+    static void onRefresh();
+    static void onEntry();
+    static void onRedraw(draw_mode_t);
+    static void onIdle();
+};
+
+class TouchRegistersScreen : public BaseScreen, public UncachedScreen {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t tag);
+};
+
+class AdvancedSettingsMenu : public BaseScreen, public CachedScreen<ADVANCED_SETTINGS_SCREEN_CACHE> {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t tag);
+};
+
+class ChangeFilamentScreen : public BaseScreen, public CachedScreen<CHANGE_FILAMENT_SCREEN_CACHE> {
+  private:
+    static uint8_t getSoftenTemp();
+    static ExtUI::extruder_t getExtruder();
+    static void drawTempGradient(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
+    static uint32_t getTempColor(uint32_t temp);
+    static void doPurge();
+  public:
+    static void onEntry();
+    static void onExit();
+    static void onRedraw(draw_mode_t);
+    static bool onTouchStart(uint8_t tag);
+    static bool onTouchEnd(uint8_t tag);
+    static bool onTouchHeld(uint8_t tag);
+    static void onIdle();
+};
+
+class BaseNumericAdjustmentScreen : public BaseScreen {
+  public:
+    enum precision_default_t {
+      DEFAULT_LOWEST,
+      DEFAULT_MIDRANGE,
+      DEFAULT_HIGHEST
+    };
+
+  protected:
+    class widgets_t {
+      private:
+        draw_mode_t _what;
+        uint8_t     _line;
+        uint32_t    _color;
+        uint8_t     _decimals;
+        progmem_str _units;
+        enum style_t {
+          BTN_NORMAL,
+          BTN_ACTION,
+          BTN_TOGGLE,
+          BTN_DISABLED,
+          TEXT_AREA,
+          TEXT_LABEL
+        } _style;
+
+      protected:
+        void _draw_increment_btn(CommandProcessor &, uint8_t line, const uint8_t tag);
+        void _button(CommandProcessor &, uint8_t tag, int16_t x, int16_t y, int16_t w, int16_t h, progmem_str, bool enabled = true, bool highlight = false);
+        void _button_style(CommandProcessor &cmd, style_t style);
+      public:
+        widgets_t(draw_mode_t);
+
+        widgets_t &color(uint32_t color)       {_color = color; return *this;}
+        widgets_t &units(progmem_str units)    {_units = units; return *this;}
+        widgets_t &draw_mode(draw_mode_t what) {_what  = what;  return *this;}
+        widgets_t &precision(uint8_t decimals, precision_default_t = DEFAULT_HIGHEST);
+
+        void heading           (progmem_str label);
+        void adjuster_sram_val (uint8_t tag,  progmem_str label, const char *value,  bool is_enabled = true);
+        void adjuster          (uint8_t tag,  progmem_str label, const char *value,  bool is_enabled = true);
+        void adjuster          (uint8_t tag,  progmem_str label, float value=0,      bool is_enabled = true);
+        void button            (uint8_t tag,  progmem_str label,                     bool is_enabled = true);
+        void text_field        (uint8_t tag,  progmem_str label, const char *value,  bool is_enabled = true);
+        void two_buttons       (uint8_t tag1, progmem_str label1,
+                                uint8_t tag2, progmem_str label2,                    bool is_enabled = true);
+        void toggle            (uint8_t tag,  progmem_str label,                     bool value, bool is_enabled = true);
+        void home_buttons      (uint8_t tag);
+        void increments        ();
+    };
+
+    static float getIncrement();
+
+  public:
+    static void onEntry();
+    static bool onTouchEnd(uint8_t tag);
+};
+
+class MoveAxisScreen : public BaseNumericAdjustmentScreen, public CachedScreen<MOVE_AXIS_SCREEN_CACHE> {
+  private:
+    static float getManualFeedrate(uint8_t axis, float increment_mm);
+  public:
+    static void setManualFeedrate(ExtUI::axis_t, float increment_mm);
+    static void setManualFeedrate(ExtUI::extruder_t, float increment_mm);
+
+    static void onEntry();
+    static void onRedraw(draw_mode_t);
+    static bool onTouchHeld(uint8_t tag);
+    static void onIdle();
+};
+
+class StepsScreen : public BaseNumericAdjustmentScreen, public CachedScreen<STEPS_SCREEN_CACHE> {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchHeld(uint8_t tag);
+};
+
+#if HAS_TRINAMIC_CONFIG
+  class StepperCurrentScreen : public BaseNumericAdjustmentScreen, public CachedScreen<STEPPER_CURRENT_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchHeld(uint8_t tag);
+  };
+
+  class StepperBumpSensitivityScreen : public BaseNumericAdjustmentScreen, public CachedScreen<STEPPER_BUMP_SENSITIVITY_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchHeld(uint8_t tag);
+  };
+#endif
+
+#if HAS_BED_PROBE
+  class ZOffsetScreen : public BaseNumericAdjustmentScreen, public CachedScreen<ZOFFSET_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchHeld(uint8_t tag);
+  };
+#endif
+
+#if HOTENDS > 1
+  class NozzleOffsetScreen : public BaseNumericAdjustmentScreen, public CachedScreen<NOZZLE_OFFSET_SCREEN_CACHE> {
+    public:
+      static void onEntry();
+      static void onRedraw(draw_mode_t);
+      static bool onTouchHeld(uint8_t tag);
+  };
+#endif
+
+#if ENABLED(BABYSTEPPING)
+  class NudgeNozzleScreen : public BaseNumericAdjustmentScreen, public CachedScreen<ADJUST_OFFSETS_SCREEN_CACHE> {
+    public:
+      static void onEntry();
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+      static bool onTouchHeld(uint8_t tag);
+      static void onIdle();
+  };
+#endif
+
+#if ENABLED(BACKLASH_GCODE)
+  class BacklashCompensationScreen : public BaseNumericAdjustmentScreen, public CachedScreen<BACKLASH_COMPENSATION_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchHeld(uint8_t tag);
+  };
+#endif
+
+class FeedratePercentScreen : public BaseNumericAdjustmentScreen, public CachedScreen<MAX_FEEDRATE_SCREEN_CACHE> {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchHeld(uint8_t tag);
+};
+
+class MaxVelocityScreen : public BaseNumericAdjustmentScreen, public CachedScreen<MAX_VELOCITY_SCREEN_CACHE> {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchHeld(uint8_t tag);
+};
+
+class MaxAccelerationScreen : public BaseNumericAdjustmentScreen, public CachedScreen<MAX_ACCELERATION_SCREEN_CACHE> {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchHeld(uint8_t tag);
+};
+
+class DefaultAccelerationScreen : public BaseNumericAdjustmentScreen, public CachedScreen<DEFAULT_ACCELERATION_SCREEN_CACHE> {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchHeld(uint8_t tag);
+};
+
+#if DISABLED(CLASSIC_JERK)
+  class JunctionDeviationScreen : public BaseNumericAdjustmentScreen, public CachedScreen<JUNC_DEV_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchHeld(uint8_t tag);
+  };
+#else
+  class JerkScreen : public BaseNumericAdjustmentScreen, public CachedScreen<JERK_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchHeld(uint8_t tag);
+  };
+#endif
+
+#if HAS_CASE_LIGHT
+  class CaseLightScreen : public BaseNumericAdjustmentScreen, public CachedScreen<CASE_LIGHT_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchHeld(uint8_t tag);
+  };
+#endif
+
+#if EITHER(LIN_ADVANCE, FILAMENT_RUNOUT_SENSOR)
+  class FilamentMenu : public BaseNumericAdjustmentScreen, public CachedScreen<FILAMENT_MENU_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+  };
+#endif
+
+#if ENABLED(FILAMENT_RUNOUT_SENSOR)
+  class FilamentRunoutScreen : public BaseNumericAdjustmentScreen, public CachedScreen<FILAMENT_RUNOUT_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchHeld(uint8_t tag);
+  };
+#endif
+
+#if ENABLED(LIN_ADVANCE)
+  class LinearAdvanceScreen : public BaseNumericAdjustmentScreen, public CachedScreen<LINEAR_ADVANCE_SCREEN_CACHE> {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchHeld(uint8_t tag);
+  };
+#endif
+
+class TemperatureScreen : public BaseNumericAdjustmentScreen, public CachedScreen<TEMPERATURE_SCREEN_CACHE> {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchHeld(uint8_t tag);
+};
+
+class InterfaceSoundsScreen : public BaseScreen, public CachedScreen<INTERFACE_SOUNDS_SCREEN_CACHE> {
+  public:
+    enum event_t {
+      PRINTING_STARTED  = 0,
+      PRINTING_FINISHED = 1,
+      PRINTING_FAILED   = 2,
+
+      NUM_EVENTS
+    };
+
+  private:
+    friend class InterfaceSettingsScreen;
+
+    static uint8_t event_sounds[NUM_EVENTS];
+
+    static const char* getSoundSelection(event_t);
+    static void toggleSoundSelection(event_t);
+    static void setSoundSelection(event_t, const FTDI::SoundPlayer::sound_t*);
+
+  public:
+    static void playEventSound(event_t, FTDI::play_mode_t = FTDI::PLAY_ASYNCHRONOUS);
+
+    static void defaultSettings();
+
+    static void onEntry();
+    static void onRedraw(draw_mode_t);
+    static bool onTouchStart(uint8_t tag);
+    static bool onTouchEnd(uint8_t tag);
+    static void onIdle();
+};
+
+class InterfaceSettingsScreen : public BaseScreen, public CachedScreen<INTERFACE_SETTINGS_SCREEN_CACHE> {
+  private:
+    struct persistent_data_t {
+      uint32_t touch_transform_a;
+      uint32_t touch_transform_b;
+      uint32_t touch_transform_c;
+      uint32_t touch_transform_d;
+      uint32_t touch_transform_e;
+      uint32_t touch_transform_f;
+      uint16_t passcode;
+      uint8_t  display_brightness;
+      int8_t   display_h_offset_adj;
+      int8_t   display_v_offset_adj;
+      uint8_t  sound_volume;
+      uint8_t  bit_flags;
+      uint8_t  event_sounds[InterfaceSoundsScreen::NUM_EVENTS];
+    };
+
+  public:
+    #ifdef ARCHIM2_SPI_FLASH_EEPROM_BACKUP_SIZE
+      static bool backupEEPROM();
+    #endif
+
+    static void saveSettings(char *);
+    static void loadSettings(const char *);
+    static void defaultSettings();
+    static void failSafeSettings();
+
+    static void onStartup();
+    static void onEntry();
+    static void onRedraw(draw_mode_t);
+    static bool onTouchStart(uint8_t tag);
+    static bool onTouchEnd(uint8_t tag);
+    static void onIdle();
+};
+
+class LockScreen : public BaseScreen, public CachedScreen<LOCK_SCREEN_CACHE> {
+  private:
+    friend InterfaceSettingsScreen;
+
+    static uint16_t passcode;
+
+    static char & message_style();
+    static uint16_t compute_checksum();
+    static void onPasscodeEntered();
+  public:
+    static bool is_enabled();
+    static void check_passcode();
+    static void enable();
+    static void disable();
+
+    static void set_hash(uint16_t pass) {passcode = pass;};
+    static uint16_t get_hash() {return passcode;};
+
+    static void onEntry();
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t tag);
+};
+
+class FilesScreen : public BaseScreen, public CachedScreen<FILES_SCREEN_CACHE, FILE_SCREEN_DL_SIZE> {
+  private:
+    #ifdef TOUCH_UI_PORTRAIT
+      static constexpr uint8_t header_h       = 2;
+      static constexpr uint8_t footer_h       = 2;
+      static constexpr uint8_t files_per_page = 11;
+    #else
+      static constexpr uint8_t header_h       = 1;
+      static constexpr uint8_t footer_h       = 1;
+      static constexpr uint8_t files_per_page = 6;
+    #endif
+
+    static uint8_t  getTagForLine(uint8_t line) {return line + 2;}
+    static uint8_t  getLineForTag(uint8_t tag)  {return  tag - 2;}
+    static uint16_t getFileForTag(uint8_t tag);
+    static uint16_t getSelectedFileIndex();
+
+    inline static const char *getSelectedShortFilename() {return getSelectedFilename(false);}
+    inline static const char *getSelectedLongFilename()  {return getSelectedFilename(true);}
+    static const char *getSelectedFilename(bool longName);
+
+    static void drawFileButton(const char* filename, uint8_t tag, bool is_dir, bool is_highlighted);
+    static void drawFileList();
+    static void drawHeader();
+    static void drawFooter();
+    static void drawSelectedFile();
+
+    static void gotoPage(uint8_t);
+  public:
+    static void onEntry();
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t tag);
+    static void onIdle();
+};
+
+class EndstopStatesScreen : public BaseScreen, public UncachedScreen {
+  public:
+    static void onEntry();
+    static void onExit();
+    static void onRedraw(draw_mode_t);
+    static bool onTouchEnd(uint8_t tag);
+    static void onIdle();
+};
+
+class DisplayTuningScreen : public BaseNumericAdjustmentScreen, public CachedScreen<DISPLAY_TIMINGS_SCREEN_CACHE> {
+  public:
+    static void onRedraw(draw_mode_t);
+    static bool onTouchHeld(uint8_t tag);
+};
+
+#if ENABLED(TOUCH_UI_DEVELOPER_MENU)
+  class DeveloperMenu : public BaseScreen, public UncachedScreen {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+  };
+
+  class ConfirmEraseFlashDialogBox : public DialogBoxBaseClass, public UncachedScreen {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+  };
+
+  class WidgetsScreen : public BaseScreen, public UncachedScreen {
+    public:
+      static void onEntry();
+      static void onRedraw(draw_mode_t);
+      static bool onTouchStart(uint8_t tag);
+      static void onIdle();
+  };
+
+  class StressTestScreen : public BaseScreen, public UncachedScreen {
+    private:
+      static void drawDots(uint16_t x, uint16_t y, uint16_t h, uint16_t v);
+      static bool watchDogTestNow();
+      static void recursiveLockup();
+      static void iterativeLockup();
+      static void runTestOnBootup(bool enable);
+
+    public:
+      static void startupCheck();
+
+      static void onEntry();
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+      static void onIdle();
+  };
+#endif
+
+class MediaPlayerScreen : public BaseScreen, public UncachedScreen {
+  private:
+    typedef int16_t media_streamer_func_t(void *obj, void *buff, size_t bytes);
+
+  public:
+    static bool playCardMedia();
+    static bool playBootMedia();
+
+    static void onEntry();
+    static void onRedraw(draw_mode_t);
+
+    static void playStream(void *obj, media_streamer_func_t*);
+};
+
+#if NUM_LANGUAGES > 1
+  class LanguageMenu : public BaseScreen, public UncachedScreen {
+    public:
+      static void onRedraw(draw_mode_t);
+      static bool onTouchEnd(uint8_t tag);
+  };
+#endif
