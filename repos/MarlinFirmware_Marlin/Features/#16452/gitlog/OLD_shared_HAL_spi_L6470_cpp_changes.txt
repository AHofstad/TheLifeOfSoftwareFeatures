commit 3f4e4a4d891e3c4b73ab80aedec46e69c1b59f0d
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Wed Jul 13 22:16:22 2022 -0500

    🔥 Drop STM L64** drivers, STEVAL_3DP001V1 (#24427)

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
deleted file mode 100644
index 5d4ce89b27..0000000000
--- a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
+++ /dev/null
@@ -1,139 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-
-/**
- * Software L6470 SPI functions originally from Arduino Sd2Card Library
- * Copyright (c) 2009 by William Greiman
- */
-
-#include "../../inc/MarlinConfig.h"
-
-#if HAS_L64XX
-
-#include "Delay.h"
-
-#include "../../core/serial.h"
-#include "../../libs/L64XX/L64XX_Marlin.h"
-
-// Make sure GCC optimizes this file.
-// Note that this line triggers a bug in GCC which is fixed by casting.
-// See the note below.
-#pragma GCC optimize (3)
-
-// run at ~4Mhz
-inline uint8_t L6470_SpiTransfer_Mode_0(uint8_t b) { // using Mode 0
-  for (uint8_t bits = 8; bits--;) {
-    WRITE(L6470_CHAIN_MOSI_PIN, b & 0x80);
-    b <<= 1;        // little setup time
-
-    WRITE(L6470_CHAIN_SCK_PIN, HIGH);
-    DELAY_NS(125);  // 10 cycles @ 84mhz
-
-    b |= (READ(L6470_CHAIN_MISO_PIN) != 0);
-
-    WRITE(L6470_CHAIN_SCK_PIN, LOW);
-    DELAY_NS(125);  // 10 cycles @ 84mhz
-  }
-  return b;
-}
-
-inline uint8_t L6470_SpiTransfer_Mode_3(uint8_t b) { // using Mode 3
-  for (uint8_t bits = 8; bits--;) {
-    WRITE(L6470_CHAIN_SCK_PIN, LOW);
-    WRITE(L6470_CHAIN_MOSI_PIN, b & 0x80);
-
-    DELAY_NS(125);  // 10 cycles @ 84mhz
-    WRITE(L6470_CHAIN_SCK_PIN, HIGH);
-    DELAY_NS(125);  // Need more delay for fast CPUs
-
-    b <<= 1;        // little setup time
-    b |= (READ(L6470_CHAIN_MISO_PIN) != 0);
-  }
-  DELAY_NS(125);    // 10 cycles @ 84mhz
-  return b;
-}
-
-/**
- * L64XX methods for SPI init and transfer
- */
-void L64XX_Marlin::spi_init() {
-  OUT_WRITE(L6470_CHAIN_SS_PIN, HIGH);
-  OUT_WRITE(L6470_CHAIN_SCK_PIN, HIGH);
-  OUT_WRITE(L6470_CHAIN_MOSI_PIN, HIGH);
-  SET_INPUT(L6470_CHAIN_MISO_PIN);
-
-  #if PIN_EXISTS(L6470_BUSY)
-    SET_INPUT(L6470_BUSY_PIN);
-  #endif
-
-  OUT_WRITE(L6470_CHAIN_MOSI_PIN, HIGH);
-}
-
-uint8_t L64XX_Marlin::transfer_single(uint8_t data, int16_t ss_pin) {
-  // First device in chain has data sent last
-  extDigitalWrite(ss_pin, LOW);
-
-  hal.isr_off();  // Disable interrupts during SPI transfer (can't allow partial command to chips)
-  const uint8_t data_out = L6470_SpiTransfer_Mode_3(data);
-  hal.isr_on();   // Enable interrupts
-
-  extDigitalWrite(ss_pin, HIGH);
-  return data_out;
-}
-
-uint8_t L64XX_Marlin::transfer_chain(uint8_t data, int16_t ss_pin, uint8_t chain_position) {
-  uint8_t data_out = 0;
-
-  // first device in chain has data sent last
-  extDigitalWrite(ss_pin, LOW);
-
-  for (uint8_t i = L64XX::chain[0]; !L64xxManager.spi_abort && i >= 1; i--) {   // Send data unless aborted
-    hal.isr_off();    // Disable interrupts during SPI transfer (can't allow partial command to chips)
-    const uint8_t temp = L6470_SpiTransfer_Mode_3(uint8_t(i == chain_position ? data : dSPIN_NOP));
-    hal.isr_on();     // Enable interrupts
-    if (i == chain_position) data_out = temp;
-  }
-
-  extDigitalWrite(ss_pin, HIGH);
-  return data_out;
-}
-
-/**
- * Platform-supplied L6470 buffer transfer method
- */
-void L64XX_Marlin::transfer(uint8_t L6470_buf[], const uint8_t length) {
-  // First device in chain has its data sent last
-
-  if (spi_active) {                   // Interrupted SPI transfer so need to
-    WRITE(L6470_CHAIN_SS_PIN, HIGH);  //  guarantee min high of 650ns
-    DELAY_US(1);
-  }
-
-  WRITE(L6470_CHAIN_SS_PIN, LOW);
-  for (uint8_t i = length; i >= 1; i--)
-    L6470_SpiTransfer_Mode_3(uint8_t(L6470_buf[i]));
-  WRITE(L6470_CHAIN_SS_PIN, HIGH);
-}
-
-#pragma GCC reset_options
-
-#endif // HAS_L64XX

commit 44eff9a23348dcc117fd1ea9b4b1ef0b54061808
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Feb 17 18:50:31 2022 -0600

    ♻️ Refactor HAL as singleton (#23357)

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
index bd85dbe7bd..5d4ce89b27 100644
--- a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
+++ b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
@@ -92,9 +92,9 @@ uint8_t L64XX_Marlin::transfer_single(uint8_t data, int16_t ss_pin) {
   // First device in chain has data sent last
   extDigitalWrite(ss_pin, LOW);
 
-  DISABLE_ISRS(); // Disable interrupts during SPI transfer (can't allow partial command to chips)
+  hal.isr_off();  // Disable interrupts during SPI transfer (can't allow partial command to chips)
   const uint8_t data_out = L6470_SpiTransfer_Mode_3(data);
-  ENABLE_ISRS();  // Enable interrupts
+  hal.isr_on();   // Enable interrupts
 
   extDigitalWrite(ss_pin, HIGH);
   return data_out;
@@ -107,9 +107,9 @@ uint8_t L64XX_Marlin::transfer_chain(uint8_t data, int16_t ss_pin, uint8_t chain
   extDigitalWrite(ss_pin, LOW);
 
   for (uint8_t i = L64XX::chain[0]; !L64xxManager.spi_abort && i >= 1; i--) {   // Send data unless aborted
-    DISABLE_ISRS();   // Disable interrupts during SPI transfer (can't allow partial command to chips)
+    hal.isr_off();    // Disable interrupts during SPI transfer (can't allow partial command to chips)
     const uint8_t temp = L6470_SpiTransfer_Mode_3(uint8_t(i == chain_position ? data : dSPIN_NOP));
-    ENABLE_ISRS();    // Enable interrupts
+    hal.isr_on();     // Enable interrupts
     if (i == chain_position) data_out = temp;
   }
 

commit 6a8b9274a31d11c396ce1bc44b3a0b872a4606dc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Dec 25 23:15:17 2021 -0600

    ⏪️ Refactor still needs work
    
    Reverting #23295

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
index 5d4ce89b27..bd85dbe7bd 100644
--- a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
+++ b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
@@ -92,9 +92,9 @@ uint8_t L64XX_Marlin::transfer_single(uint8_t data, int16_t ss_pin) {
   // First device in chain has data sent last
   extDigitalWrite(ss_pin, LOW);
 
-  hal.isr_off();  // Disable interrupts during SPI transfer (can't allow partial command to chips)
+  DISABLE_ISRS(); // Disable interrupts during SPI transfer (can't allow partial command to chips)
   const uint8_t data_out = L6470_SpiTransfer_Mode_3(data);
-  hal.isr_on();   // Enable interrupts
+  ENABLE_ISRS();  // Enable interrupts
 
   extDigitalWrite(ss_pin, HIGH);
   return data_out;
@@ -107,9 +107,9 @@ uint8_t L64XX_Marlin::transfer_chain(uint8_t data, int16_t ss_pin, uint8_t chain
   extDigitalWrite(ss_pin, LOW);
 
   for (uint8_t i = L64XX::chain[0]; !L64xxManager.spi_abort && i >= 1; i--) {   // Send data unless aborted
-    hal.isr_off();    // Disable interrupts during SPI transfer (can't allow partial command to chips)
+    DISABLE_ISRS();   // Disable interrupts during SPI transfer (can't allow partial command to chips)
     const uint8_t temp = L6470_SpiTransfer_Mode_3(uint8_t(i == chain_position ? data : dSPIN_NOP));
-    hal.isr_on();     // Enable interrupts
+    ENABLE_ISRS();    // Enable interrupts
     if (i == chain_position) data_out = temp;
   }
 

commit e211ff148c39bf5dace72de7cffbb83f19d3f1bf
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Dec 24 21:33:59 2021 -0600

    ♻️ Refactor HAL as singleton (#23295)

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
index bd85dbe7bd..5d4ce89b27 100644
--- a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
+++ b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
@@ -92,9 +92,9 @@ uint8_t L64XX_Marlin::transfer_single(uint8_t data, int16_t ss_pin) {
   // First device in chain has data sent last
   extDigitalWrite(ss_pin, LOW);
 
-  DISABLE_ISRS(); // Disable interrupts during SPI transfer (can't allow partial command to chips)
+  hal.isr_off();  // Disable interrupts during SPI transfer (can't allow partial command to chips)
   const uint8_t data_out = L6470_SpiTransfer_Mode_3(data);
-  ENABLE_ISRS();  // Enable interrupts
+  hal.isr_on();   // Enable interrupts
 
   extDigitalWrite(ss_pin, HIGH);
   return data_out;
@@ -107,9 +107,9 @@ uint8_t L64XX_Marlin::transfer_chain(uint8_t data, int16_t ss_pin, uint8_t chain
   extDigitalWrite(ss_pin, LOW);
 
   for (uint8_t i = L64XX::chain[0]; !L64xxManager.spi_abort && i >= 1; i--) {   // Send data unless aborted
-    DISABLE_ISRS();   // Disable interrupts during SPI transfer (can't allow partial command to chips)
+    hal.isr_off();    // Disable interrupts during SPI transfer (can't allow partial command to chips)
     const uint8_t temp = L6470_SpiTransfer_Mode_3(uint8_t(i == chain_position ? data : dSPIN_NOP));
-    ENABLE_ISRS();    // Enable interrupts
+    hal.isr_on();     // Enable interrupts
     if (i == chain_position) data_out = temp;
   }
 

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
index 46e7b71f88..bd85dbe7bd 100644
--- a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
+++ b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
index e740a171d8..46e7b71f88 100644
--- a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
+++ b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit 1ad53cee1f4e2768310fca98de0381df9c39b617
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Mon Jan 13 18:47:30 2020 -0600

    Improved STMicro L64XX stepper driver support (#16452)

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
index 936acc7ce8..e740a171d8 100644
--- a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
+++ b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
@@ -27,12 +27,12 @@
 
 #include "../../inc/MarlinConfig.h"
 
-#if HAS_DRIVER(L6470)
+#if HAS_L64XX
 
 #include "Delay.h"
 
 #include "../../core/serial.h"
-#include "../../libs/L6470/L6470_Marlin.h"
+#include "../../libs/L64XX/L64XX_Marlin.h"
 
 // Make sure GCC optimizes this file.
 // Note that this line triggers a bug in GCC which is fixed by casting.
@@ -40,7 +40,7 @@
 #pragma GCC optimize (3)
 
 // run at ~4Mhz
-uint8_t L6470_SpiTransfer_Mode_0(uint8_t b) { // using Mode 0
+inline uint8_t L6470_SpiTransfer_Mode_0(uint8_t b) { // using Mode 0
   for (uint8_t bits = 8; bits--;) {
     WRITE(L6470_CHAIN_MOSI_PIN, b & 0x80);
     b <<= 1;        // little setup time
@@ -56,39 +56,60 @@ uint8_t L6470_SpiTransfer_Mode_0(uint8_t b) { // using Mode 0
   return b;
 }
 
-uint8_t L6470_SpiTransfer_Mode_3(uint8_t b) { // using Mode 3
+inline uint8_t L6470_SpiTransfer_Mode_3(uint8_t b) { // using Mode 3
   for (uint8_t bits = 8; bits--;) {
     WRITE(L6470_CHAIN_SCK_PIN, LOW);
     WRITE(L6470_CHAIN_MOSI_PIN, b & 0x80);
 
     DELAY_NS(125);  // 10 cycles @ 84mhz
-
     WRITE(L6470_CHAIN_SCK_PIN, HIGH);
+    DELAY_NS(125);  // Need more delay for fast CPUs
 
     b <<= 1;        // little setup time
     b |= (READ(L6470_CHAIN_MISO_PIN) != 0);
   }
-
-  DELAY_NS(125);  // 10 cycles @ 84mhz
+  DELAY_NS(125);    // 10 cycles @ 84mhz
   return b;
 }
 
 /**
- * The following are weak-linked and defined as do-nothing
- * functions by the L6470-Arduino library. They must be
- * defined by the client (Marlin) to provide an SPI interface.
+ * L64XX methods for SPI init and transfer
  */
+void L64XX_Marlin::spi_init() {
+  OUT_WRITE(L6470_CHAIN_SS_PIN, HIGH);
+  OUT_WRITE(L6470_CHAIN_SCK_PIN, HIGH);
+  OUT_WRITE(L6470_CHAIN_MOSI_PIN, HIGH);
+  SET_INPUT(L6470_CHAIN_MISO_PIN);
+
+  #if PIN_EXISTS(L6470_BUSY)
+    SET_INPUT(L6470_BUSY_PIN);
+  #endif
 
-uint8_t L6470_transfer(uint8_t data, int16_t ss_pin, const uint8_t chain_position) {
+  OUT_WRITE(L6470_CHAIN_MOSI_PIN, HIGH);
+}
+
+uint8_t L64XX_Marlin::transfer_single(uint8_t data, int16_t ss_pin) {
+  // First device in chain has data sent last
+  extDigitalWrite(ss_pin, LOW);
+
+  DISABLE_ISRS(); // Disable interrupts during SPI transfer (can't allow partial command to chips)
+  const uint8_t data_out = L6470_SpiTransfer_Mode_3(data);
+  ENABLE_ISRS();  // Enable interrupts
+
+  extDigitalWrite(ss_pin, HIGH);
+  return data_out;
+}
+
+uint8_t L64XX_Marlin::transfer_chain(uint8_t data, int16_t ss_pin, uint8_t chain_position) {
   uint8_t data_out = 0;
 
   // first device in chain has data sent last
   extDigitalWrite(ss_pin, LOW);
 
-  for (uint8_t i = L6470::chain[0]; (i >= 1) && !spi_abort; i--) {    // stop sending data if spi_abort is active
-    DISABLE_ISRS();  // disable interrupts during SPI transfer (can't allow partial command to chips)
-    uint8_t temp = L6470_SpiTransfer_Mode_3(uint8_t(i == chain_position ? data : dSPIN_NOP));
-    ENABLE_ISRS();  // enable interrupts
+  for (uint8_t i = L64XX::chain[0]; !L64xxManager.spi_abort && i >= 1; i--) {   // Send data unless aborted
+    DISABLE_ISRS();   // Disable interrupts during SPI transfer (can't allow partial command to chips)
+    const uint8_t temp = L6470_SpiTransfer_Mode_3(uint8_t(i == chain_position ? data : dSPIN_NOP));
+    ENABLE_ISRS();    // Enable interrupts
     if (i == chain_position) data_out = temp;
   }
 
@@ -96,11 +117,14 @@ uint8_t L6470_transfer(uint8_t data, int16_t ss_pin, const uint8_t chain_positio
   return data_out;
 }
 
-void L6470_transfer(uint8_t L6470_buf[], const uint8_t length) {
-  // first device in chain has data sent last
+/**
+ * Platform-supplied L6470 buffer transfer method
+ */
+void L64XX_Marlin::transfer(uint8_t L6470_buf[], const uint8_t length) {
+  // First device in chain has its data sent last
 
-  if (spi_active) {                    // interrupted SPI transfer so need to
-    WRITE(L6470_CHAIN_SS_PIN, HIGH);   // guarantee min high of 650nS
+  if (spi_active) {                   // Interrupted SPI transfer so need to
+    WRITE(L6470_CHAIN_SS_PIN, HIGH);  //  guarantee min high of 650ns
     DELAY_US(1);
   }
 
@@ -110,19 +134,6 @@ void L6470_transfer(uint8_t L6470_buf[], const uint8_t length) {
   WRITE(L6470_CHAIN_SS_PIN, HIGH);
 }
 
-void L6470_spi_init() {
-  OUT_WRITE(L6470_CHAIN_SS_PIN, HIGH);
-  OUT_WRITE(L6470_CHAIN_SCK_PIN, HIGH);
-  OUT_WRITE(L6470_CHAIN_MOSI_PIN, HIGH);
-  SET_INPUT(L6470_CHAIN_MISO_PIN);
-
-  #if PIN_EXISTS(L6470_BUSY)
-    SET_INPUT(L6470_BUSY_PIN);
-  #endif
-
-  OUT_WRITE(L6470_CHAIN_MOSI_PIN, HIGH);
-}
-
 #pragma GCC reset_options
 
-#endif // HAS_DRIVER(L6470)
+#endif // HAS_L64XX

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
index ecd808fe46..936acc7ce8 100644
--- a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
+++ b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -22,7 +22,7 @@
 
 /**
  * Software L6470 SPI functions originally from Arduino Sd2Card Library
- * Copyright (C) 2009 by William Greiman
+ * Copyright (c) 2009 by William Greiman
  */
 
 #include "../../inc/MarlinConfig.h"

commit 2212da453aa8a575df529cd4333b5248d9bae5b5
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Mar 5 00:41:31 2019 -0600

    Distinguish between analog/digital auto fans (#13298)

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
index f3c5a31f60..ecd808fe46 100644
--- a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
+++ b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
@@ -83,7 +83,7 @@ uint8_t L6470_transfer(uint8_t data, int16_t ss_pin, const uint8_t chain_positio
   uint8_t data_out = 0;
 
   // first device in chain has data sent last
-  digitalWrite(ss_pin, LOW);
+  extDigitalWrite(ss_pin, LOW);
 
   for (uint8_t i = L6470::chain[0]; (i >= 1) && !spi_abort; i--) {    // stop sending data if spi_abort is active
     DISABLE_ISRS();  // disable interrupts during SPI transfer (can't allow partial command to chips)
@@ -92,7 +92,7 @@ uint8_t L6470_transfer(uint8_t data, int16_t ss_pin, const uint8_t chain_positio
     if (i == chain_position) data_out = temp;
   }
 
-  digitalWrite(ss_pin, HIGH);
+  extDigitalWrite(ss_pin, HIGH);
   return data_out;
 }
 

commit fa236e9718cd2feb85a1986b8f56ad97cd2f4871
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Mar 1 19:29:48 2019 -0600

    General cleanup ahead of L64XX

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
index f3a4544a77..f3c5a31f60 100644
--- a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
+++ b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
@@ -25,31 +25,15 @@
  * Copyright (C) 2009 by William Greiman
  */
 
-// --------------------------------------------------------------------------
-// Includes
-// --------------------------------------------------------------------------
-
 #include "../../inc/MarlinConfig.h"
 
 #if HAS_DRIVER(L6470)
 
 #include "Delay.h"
 
-// --------------------------------------------------------------------------
-// Public Variables
-// --------------------------------------------------------------------------
-
-// --------------------------------------------------------------------------
-// Public functions
-// --------------------------------------------------------------------------
-
 #include "../../core/serial.h"
 #include "../../libs/L6470/L6470_Marlin.h"
 
-// --------------------------------------------------------------------------
-// Software L6470 SPI
-// --------------------------------------------------------------------------
-
 // Make sure GCC optimizes this file.
 // Note that this line triggers a bug in GCC which is fixed by casting.
 // See the note below.

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
index d009ad5351..f3a4544a77 100644
--- a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
+++ b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm

commit 00cdd41b5f048aee4f1363acfe477e9bc5ddd010
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Jan 23 20:08:43 2019 -0600

    Clean up for recent changes

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
index db79a846a3..d009ad5351 100644
--- a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
+++ b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
@@ -95,11 +95,11 @@ uint8_t L6470_SpiTransfer_Mode_3(uint8_t b) { // using Mode 3
  * defined by the client (Marlin) to provide an SPI interface.
  */
 
-uint8_t L6470_transfer(uint8_t data, int _SSPin, const uint8_t chain_position) {
+uint8_t L6470_transfer(uint8_t data, int16_t ss_pin, const uint8_t chain_position) {
   uint8_t data_out = 0;
 
   // first device in chain has data sent last
-  digitalWrite(_SSPin, LOW);
+  digitalWrite(ss_pin, LOW);
 
   for (uint8_t i = L6470::chain[0]; (i >= 1) && !spi_abort; i--) {    // stop sending data if spi_abort is active
     DISABLE_ISRS();  // disable interrupts during SPI transfer (can't allow partial command to chips)
@@ -108,7 +108,7 @@ uint8_t L6470_transfer(uint8_t data, int _SSPin, const uint8_t chain_position) {
     if (i == chain_position) data_out = temp;
   }
 
-  digitalWrite(_SSPin, HIGH);
+  digitalWrite(ss_pin, HIGH);
   return data_out;
 }
 

commit 2f35747f294c4b3dc3e6920b34e208f89bd4841d
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Wed Jan 23 19:06:54 2019 -0600

    L6470 SPI daisy chain support (#12895)

diff --git a/Marlin/src/HAL/shared/HAL_spi_L6470.cpp b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
new file mode 100644
index 0000000000..db79a846a3
--- /dev/null
+++ b/Marlin/src/HAL/shared/HAL_spi_L6470.cpp
@@ -0,0 +1,144 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * Software L6470 SPI functions originally from Arduino Sd2Card Library
+ * Copyright (C) 2009 by William Greiman
+ */
+
+// --------------------------------------------------------------------------
+// Includes
+// --------------------------------------------------------------------------
+
+#include "../../inc/MarlinConfig.h"
+
+#if HAS_DRIVER(L6470)
+
+#include "Delay.h"
+
+// --------------------------------------------------------------------------
+// Public Variables
+// --------------------------------------------------------------------------
+
+// --------------------------------------------------------------------------
+// Public functions
+// --------------------------------------------------------------------------
+
+#include "../../core/serial.h"
+#include "../../libs/L6470/L6470_Marlin.h"
+
+// --------------------------------------------------------------------------
+// Software L6470 SPI
+// --------------------------------------------------------------------------
+
+// Make sure GCC optimizes this file.
+// Note that this line triggers a bug in GCC which is fixed by casting.
+// See the note below.
+#pragma GCC optimize (3)
+
+// run at ~4Mhz
+uint8_t L6470_SpiTransfer_Mode_0(uint8_t b) { // using Mode 0
+  for (uint8_t bits = 8; bits--;) {
+    WRITE(L6470_CHAIN_MOSI_PIN, b & 0x80);
+    b <<= 1;        // little setup time
+
+    WRITE(L6470_CHAIN_SCK_PIN, HIGH);
+    DELAY_NS(125);  // 10 cycles @ 84mhz
+
+    b |= (READ(L6470_CHAIN_MISO_PIN) != 0);
+
+    WRITE(L6470_CHAIN_SCK_PIN, LOW);
+    DELAY_NS(125);  // 10 cycles @ 84mhz
+  }
+  return b;
+}
+
+uint8_t L6470_SpiTransfer_Mode_3(uint8_t b) { // using Mode 3
+  for (uint8_t bits = 8; bits--;) {
+    WRITE(L6470_CHAIN_SCK_PIN, LOW);
+    WRITE(L6470_CHAIN_MOSI_PIN, b & 0x80);
+
+    DELAY_NS(125);  // 10 cycles @ 84mhz
+
+    WRITE(L6470_CHAIN_SCK_PIN, HIGH);
+
+    b <<= 1;        // little setup time
+    b |= (READ(L6470_CHAIN_MISO_PIN) != 0);
+  }
+
+  DELAY_NS(125);  // 10 cycles @ 84mhz
+  return b;
+}
+
+/**
+ * The following are weak-linked and defined as do-nothing
+ * functions by the L6470-Arduino library. They must be
+ * defined by the client (Marlin) to provide an SPI interface.
+ */
+
+uint8_t L6470_transfer(uint8_t data, int _SSPin, const uint8_t chain_position) {
+  uint8_t data_out = 0;
+
+  // first device in chain has data sent last
+  digitalWrite(_SSPin, LOW);
+
+  for (uint8_t i = L6470::chain[0]; (i >= 1) && !spi_abort; i--) {    // stop sending data if spi_abort is active
+    DISABLE_ISRS();  // disable interrupts during SPI transfer (can't allow partial command to chips)
+    uint8_t temp = L6470_SpiTransfer_Mode_3(uint8_t(i == chain_position ? data : dSPIN_NOP));
+    ENABLE_ISRS();  // enable interrupts
+    if (i == chain_position) data_out = temp;
+  }
+
+  digitalWrite(_SSPin, HIGH);
+  return data_out;
+}
+
+void L6470_transfer(uint8_t L6470_buf[], const uint8_t length) {
+  // first device in chain has data sent last
+
+  if (spi_active) {                    // interrupted SPI transfer so need to
+    WRITE(L6470_CHAIN_SS_PIN, HIGH);   // guarantee min high of 650nS
+    DELAY_US(1);
+  }
+
+  WRITE(L6470_CHAIN_SS_PIN, LOW);
+  for (uint8_t i = length; i >= 1; i--)
+    L6470_SpiTransfer_Mode_3(uint8_t(L6470_buf[i]));
+  WRITE(L6470_CHAIN_SS_PIN, HIGH);
+}
+
+void L6470_spi_init() {
+  OUT_WRITE(L6470_CHAIN_SS_PIN, HIGH);
+  OUT_WRITE(L6470_CHAIN_SCK_PIN, HIGH);
+  OUT_WRITE(L6470_CHAIN_MOSI_PIN, HIGH);
+  SET_INPUT(L6470_CHAIN_MISO_PIN);
+
+  #if PIN_EXISTS(L6470_BUSY)
+    SET_INPUT(L6470_BUSY_PIN);
+  #endif
+
+  OUT_WRITE(L6470_CHAIN_MOSI_PIN, HIGH);
+}
+
+#pragma GCC reset_options
+
+#endif // HAS_DRIVER(L6470)
