commit 3f4e4a4d891e3c4b73ab80aedec46e69c1b59f0d
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Wed Jul 13 22:16:22 2022 -0500

    🔥 Drop STM L64** drivers, STEVAL_3DP001V1 (#24427)

diff --git a/Marlin/src/module/stepper/L64xx.cpp b/Marlin/src/module/stepper/L64xx.cpp
deleted file mode 100644
index 5b60746396..0000000000
--- a/Marlin/src/module/stepper/L64xx.cpp
+++ /dev/null
@@ -1,264 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- *
- * Based on Sprinter and grbl.
- * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- *
- */
-
-/**
- * stepper/L64xx.cpp
- * Stepper driver indirection for L64XX drivers
- */
-
-#include "../../inc/MarlinConfig.h"
-
-#if HAS_L64XX
-
-#include "L64xx.h"
-
-#if AXIS_IS_L64XX(X)
-  L64XX_CLASS(X) stepperX(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(X2)
-  L64XX_CLASS(X2) stepperX2(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(Y)
-  L64XX_CLASS(Y) stepperY(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(Y2)
-  L64XX_CLASS(Y2) stepperY2(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(Z)
-  L64XX_CLASS(Z) stepperZ(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(Z2)
-  L64XX_CLASS(Z2) stepperZ2(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(Z3)
-  L64XX_CLASS(Z3) stepperZ3(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(Z4)
-  L64XX_CLASS(Z4) stepperZ4(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(I)
-  L64XX_CLASS(I) stepperI(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(J)
-  L64XX_CLASS(J) stepperJ(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(K)
-  L64XX_CLASS(K) stepperK(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(U)
-  L64XX_CLASS(u) stepperU(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(V)
-  L64XX_CLASS(v) stepperV(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(W)
-  L64XX_CLASS(w) stepperW(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(E0)
-  L64XX_CLASS(E0) stepperE0(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(E1)
-  L64XX_CLASS(E1) stepperE1(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(E2)
-  L64XX_CLASS(E2) stepperE2(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(E3)
-  L64XX_CLASS(E3) stepperE3(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(E4)
-  L64XX_CLASS(E4) stepperE4(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(E5)
-  L64XX_CLASS(E5) stepperE5(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(E6)
-  L64XX_CLASS(E6) stepperE6(L6470_CHAIN_SS_PIN);
-#endif
-#if AXIS_IS_L64XX(E7)
-  L64XX_CLASS(E7) stepperE7(L6470_CHAIN_SS_PIN);
-#endif
-
-// Not using L64XX class init method because it
-// briefly sends power to the steppers
-
-inline void L6470_init_chip(L64XX &st, const int ms, const int oc, const int sc, const int mv, const int slew_rate) {
-  st.set_handlers(L64xxManager.spi_init, L64xxManager.transfer_single, L64xxManager.transfer_chain);  // specify which external SPI routines to use
-  switch (st.L6470_status_layout) {
-    case L6470_STATUS_LAYOUT: {
-      st.resetDev();
-      st.softFree();
-      st.SetParam(st.L64XX_CONFIG, CONFIG_PWM_DIV_1 | CONFIG_PWM_MUL_2 | CONFIG_OC_SD_DISABLE | CONFIG_VS_COMP_DISABLE | CONFIG_SW_HARD_STOP | CONFIG_INT_16MHZ);
-      st.SetParam(L6470_KVAL_RUN, 0xFF);
-      st.SetParam(L6470_KVAL_ACC, 0xFF);
-      st.SetParam(L6470_KVAL_DEC, 0xFF);
-      st.setMicroSteps(ms);
-      st.setOverCurrent(oc);
-      st.setStallCurrent(sc);
-      st.SetParam(L6470_KVAL_HOLD, mv);
-      st.SetParam(L6470_ABS_POS, 0);
-      uint32_t config_temp = st.GetParam(st.L64XX_CONFIG);
-      config_temp &= ~CONFIG_POW_SR;
-      switch (slew_rate) {
-        case 0: st.SetParam(st.L64XX_CONFIG, config_temp | CONFIG_SR_75V_us); break;
-        default:
-        case 1: st.SetParam(st.L64XX_CONFIG, config_temp | CONFIG_SR_110V_us); break;
-        case 3:
-        case 2: st.SetParam(st.L64XX_CONFIG, config_temp | CONFIG_SR_260V_us); break;
-      }
-      st.getStatus();
-      st.getStatus();
-      break;
-    }
-
-    case L6474_STATUS_LAYOUT: {
-      st.free();
-      //st.SetParam(st.L64XX_CONFIG, CONFIG_PWM_DIV_1 | CONFIG_PWM_MUL_2 | CONFIG_OC_SD_DISABLE | CONFIG_VS_COMP_DISABLE | CONFIG_SW_HARD_STOP | CONFIG_INT_16MHZ);
-      //st.SetParam(L6474_TVAL, 0xFF);
-      st.setMicroSteps(ms);
-      st.setOverCurrent(oc);
-      st.setTVALCurrent(sc);
-      st.SetParam(L6470_ABS_POS, 0);
-      uint32_t config_temp = st.GetParam(st.L64XX_CONFIG);
-      config_temp &= ~CONFIG_POW_SR & ~CONFIG_EN_TQREG;  // clear out slew rate and set current to be controlled by TVAL register
-      switch (slew_rate) {
-        case 0: st.SetParam(st.L64XX_CONFIG, config_temp | CONFIG_SR_75V_us); break;
-        default:
-        case 1: st.SetParam(st.L64XX_CONFIG, config_temp | CONFIG_SR_110V_us); break;
-        case 3:
-        case 2: st.SetParam(st.L64XX_CONFIG, config_temp | CONFIG_SR_260V_us); break;
-        //case 0: st.SetParam(st.L64XX_CONFIG, 0x2E88 | CONFIG_EN_TQREG | CONFIG_SR_75V_us); break;
-        //default:
-        //case 1: st.SetParam(st.L64XX_CONFIG, 0x2E88 | CONFIG_EN_TQREG | CONFIG_SR_110V_us); break;
-        //case 3:
-        //case 2: st.SetParam(st.L64XX_CONFIG, 0x2E88 | CONFIG_EN_TQREG | CONFIG_SR_260V_us); break;
-
-        //case 0: st.SetParam(st.L64XX_CONFIG, 0x2E88 ); break;
-        //default:
-        //case 1: st.SetParam(st.L64XX_CONFIG, 0x2E88 ); break;
-        //case 3:
-        //case 2: st.SetParam(st.L64XX_CONFIG, 0x2E88 ); break;
-      }
-      st.getStatus();
-      st.getStatus();
-      break;
-    }
-
-    case L6480_STATUS_LAYOUT: {
-      st.resetDev();
-      st.softFree();
-      st.SetParam(st.L64XX_CONFIG, CONFIG_PWM_DIV_1 | CONFIG_PWM_MUL_2 | CONFIG_OC_SD_DISABLE | CONFIG_VS_COMP_DISABLE | CONFIG_SW_HARD_STOP | CONFIG_INT_16MHZ);
-      st.SetParam(L6470_KVAL_RUN, 0xFF);
-      st.SetParam(L6470_KVAL_ACC, 0xFF);
-      st.SetParam(L6470_KVAL_DEC, 0xFF);
-      st.setMicroSteps(ms);
-      st.setOverCurrent(oc);
-      st.setStallCurrent(sc);
-      st.SetParam(+-L6470_KVAL_HOLD, mv);
-      st.SetParam(L6470_ABS_POS, 0);
-      st.SetParam(st.L64XX_CONFIG,(st.GetParam(st.L64XX_CONFIG) | PWR_VCC_7_5V));
-      st.getStatus();     // must clear out status bits before can set slew rate
-      st.getStatus();
-      switch (slew_rate) {
-        case 0: st.SetParam(L6470_GATECFG1, CONFIG1_SR_220V_us); st.SetParam(L6470_GATECFG2, CONFIG2_SR_220V_us); break;
-        default:
-        case 1: st.SetParam(L6470_GATECFG1, CONFIG1_SR_400V_us); st.SetParam(L6470_GATECFG2, CONFIG2_SR_400V_us); break;
-        case 2: st.SetParam(L6470_GATECFG1, CONFIG1_SR_520V_us); st.SetParam(L6470_GATECFG2, CONFIG2_SR_520V_us); break;
-        case 3: st.SetParam(L6470_GATECFG1, CONFIG1_SR_980V_us); st.SetParam(L6470_GATECFG2, CONFIG2_SR_980V_us); break;
-      }
-      break;
-    }
-  }
-}
-
-#define L6470_INIT_CHIP(Q) L6470_init_chip(stepper##Q, Q##_MICROSTEPS, Q##_OVERCURRENT, Q##_STALLCURRENT, Q##_MAX_VOLTAGE, Q##_SLEW_RATE)
-
-void L64XX_Marlin::init_to_defaults() {
-  #if AXIS_IS_L64XX(X)
-    L6470_INIT_CHIP(X);
-  #endif
-  #if AXIS_IS_L64XX(X2)
-    L6470_INIT_CHIP(X2);
-  #endif
-  #if AXIS_IS_L64XX(Y)
-    L6470_INIT_CHIP(Y);
-  #endif
-  #if AXIS_IS_L64XX(Y2)
-    L6470_INIT_CHIP(Y2);
-  #endif
-  #if AXIS_IS_L64XX(Z)
-    L6470_INIT_CHIP(Z);
-  #endif
-  #if AXIS_IS_L64XX(Z2)
-    L6470_INIT_CHIP(Z2);
-  #endif
-  #if AXIS_IS_L64XX(Z3)
-    L6470_INIT_CHIP(Z3);
-  #endif
-  #if AXIS_IS_L64XX(Z4)
-    L6470_INIT_CHIP(Z4);
-  #endif
-  #if AXIS_IS_L64XX(I)
-    L6470_INIT_CHIP(I);
-  #endif
-  #if AXIS_IS_L64XX(J)
-    L6470_INIT_CHIP(J);
-  #endif
-  #if AXIS_IS_L64XX(K)
-    L6470_INIT_CHIP(K);
-  #endif
-  #if AXIS_IS_L64XX(U)
-    L6470_INIT_CHIP(U);
-  #endif
-  #if AXIS_IS_L64XX(V)
-    L6470_INIT_CHIP(V);
-  #endif
-  #if AXIS_IS_L64XX(W)
-    L6470_INIT_CHIP(W);
-  #endif
-  #if AXIS_IS_L64XX(E0)
-    L6470_INIT_CHIP(E0);
-  #endif
-  #if AXIS_IS_L64XX(E1)
-    L6470_INIT_CHIP(E1);
-  #endif
-  #if AXIS_IS_L64XX(E2)
-    L6470_INIT_CHIP(E2);
-  #endif
-  #if AXIS_IS_L64XX(E3)
-    L6470_INIT_CHIP(E3);
-  #endif
-  #if AXIS_IS_L64XX(E4)
-    L6470_INIT_CHIP(E4);
-  #endif
-  #if AXIS_IS_L64XX(E5)
-    L6470_INIT_CHIP(E5);
-  #endif
-  #if AXIS_IS_L64XX(E6)
-    L6470_INIT_CHIP(E6);
-  #endif
-  #if AXIS_IS_L64XX(E7)
-    L6470_INIT_CHIP(E7);
-  #endif
-}
-
-#endif // HAS_L64XX

commit e5b651f407fcb743e2d00c45b0d361fb98230efb
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Fri Apr 1 07:10:38 2022 +0200

    ✨ Support for up to 9 axes (linear, rotary) (#23112)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/module/stepper/L64xx.cpp b/Marlin/src/module/stepper/L64xx.cpp
index 27816fb4f7..5b60746396 100644
--- a/Marlin/src/module/stepper/L64xx.cpp
+++ b/Marlin/src/module/stepper/L64xx.cpp
@@ -64,6 +64,15 @@
 #if AXIS_IS_L64XX(K)
   L64XX_CLASS(K) stepperK(L6470_CHAIN_SS_PIN);
 #endif
+#if AXIS_IS_L64XX(U)
+  L64XX_CLASS(u) stepperU(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(V)
+  L64XX_CLASS(v) stepperV(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(W)
+  L64XX_CLASS(w) stepperW(L6470_CHAIN_SS_PIN);
+#endif
 #if AXIS_IS_L64XX(E0)
   L64XX_CLASS(E0) stepperE0(L6470_CHAIN_SS_PIN);
 #endif
@@ -217,6 +226,15 @@ void L64XX_Marlin::init_to_defaults() {
   #if AXIS_IS_L64XX(K)
     L6470_INIT_CHIP(K);
   #endif
+  #if AXIS_IS_L64XX(U)
+    L6470_INIT_CHIP(U);
+  #endif
+  #if AXIS_IS_L64XX(V)
+    L6470_INIT_CHIP(V);
+  #endif
+  #if AXIS_IS_L64XX(W)
+    L6470_INIT_CHIP(W);
+  #endif
   #if AXIS_IS_L64XX(E0)
     L6470_INIT_CHIP(E0);
   #endif

commit 7726af9c5348c1c7d0fd9a56eca87d00cd75fee6
Author: DerAndere <26200979+DerAndere1@users.noreply.github.com>
Date:   Sat Jun 5 09:18:47 2021 +0200

    🏗️ Support for up to 6 linear axes (#19112)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/module/stepper/L64xx.cpp b/Marlin/src/module/stepper/L64xx.cpp
index 004e17a3fd..27816fb4f7 100644
--- a/Marlin/src/module/stepper/L64xx.cpp
+++ b/Marlin/src/module/stepper/L64xx.cpp
@@ -55,6 +55,15 @@
 #if AXIS_IS_L64XX(Z4)
   L64XX_CLASS(Z4) stepperZ4(L6470_CHAIN_SS_PIN);
 #endif
+#if AXIS_IS_L64XX(I)
+  L64XX_CLASS(I) stepperI(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(J)
+  L64XX_CLASS(J) stepperJ(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(K)
+  L64XX_CLASS(K) stepperK(L6470_CHAIN_SS_PIN);
+#endif
 #if AXIS_IS_L64XX(E0)
   L64XX_CLASS(E0) stepperE0(L6470_CHAIN_SS_PIN);
 #endif
@@ -199,6 +208,15 @@ void L64XX_Marlin::init_to_defaults() {
   #if AXIS_IS_L64XX(Z4)
     L6470_INIT_CHIP(Z4);
   #endif
+  #if AXIS_IS_L64XX(I)
+    L6470_INIT_CHIP(I);
+  #endif
+  #if AXIS_IS_L64XX(J)
+    L6470_INIT_CHIP(J);
+  #endif
+  #if AXIS_IS_L64XX(K)
+    L6470_INIT_CHIP(K);
+  #endif
   #if AXIS_IS_L64XX(E0)
     L6470_INIT_CHIP(E0);
   #endif

commit 026431679747ff972be14e8de8433c0d2e20326e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue May 11 02:59:54 2021 -0500

    Fix L64xx init for Z4

diff --git a/Marlin/src/module/stepper/L64xx.cpp b/Marlin/src/module/stepper/L64xx.cpp
index 3e2bf09446..004e17a3fd 100644
--- a/Marlin/src/module/stepper/L64xx.cpp
+++ b/Marlin/src/module/stepper/L64xx.cpp
@@ -196,6 +196,9 @@ void L64XX_Marlin::init_to_defaults() {
   #if AXIS_IS_L64XX(Z3)
     L6470_INIT_CHIP(Z3);
   #endif
+  #if AXIS_IS_L64XX(Z4)
+    L6470_INIT_CHIP(Z4);
+  #endif
   #if AXIS_IS_L64XX(E0)
     L6470_INIT_CHIP(E0);
   #endif

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/module/stepper/L64xx.cpp b/Marlin/src/module/stepper/L64xx.cpp
index 74f2e12fed..3e2bf09446 100644
--- a/Marlin/src/module/stepper/L64xx.cpp
+++ b/Marlin/src/module/stepper/L64xx.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit f312ddfa4fd5772d825908f8e376dedf29442893
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 4 12:37:20 2020 -0600

    More updates for 8 extruders, REPEAT

diff --git a/Marlin/src/module/stepper/L64xx.cpp b/Marlin/src/module/stepper/L64xx.cpp
index cc6a0bb711..74f2e12fed 100644
--- a/Marlin/src/module/stepper/L64xx.cpp
+++ b/Marlin/src/module/stepper/L64xx.cpp
@@ -73,6 +73,12 @@
 #if AXIS_IS_L64XX(E5)
   L64XX_CLASS(E5) stepperE5(L6470_CHAIN_SS_PIN);
 #endif
+#if AXIS_IS_L64XX(E6)
+  L64XX_CLASS(E6) stepperE6(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(E7)
+  L64XX_CLASS(E7) stepperE7(L6470_CHAIN_SS_PIN);
+#endif
 
 // Not using L64XX class init method because it
 // briefly sends power to the steppers
@@ -208,6 +214,12 @@ void L64XX_Marlin::init_to_defaults() {
   #if AXIS_IS_L64XX(E5)
     L6470_INIT_CHIP(E5);
   #endif
+  #if AXIS_IS_L64XX(E6)
+    L6470_INIT_CHIP(E6);
+  #endif
+  #if AXIS_IS_L64XX(E7)
+    L6470_INIT_CHIP(E7);
+  #endif
 }
 
 #endif // HAS_L64XX

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/module/stepper/L64xx.cpp b/Marlin/src/module/stepper/L64xx.cpp
index 40f74c175a..cc6a0bb711 100644
--- a/Marlin/src/module/stepper/L64xx.cpp
+++ b/Marlin/src/module/stepper/L64xx.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit 0fcf2b1110d9f0d362e5aab9cc73d963710e9865
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Mon Jan 20 00:35:07 2020 -0500

    Quad Z stepper support (#16277)

diff --git a/Marlin/src/module/stepper/L64xx.cpp b/Marlin/src/module/stepper/L64xx.cpp
index c007d418ab..40f74c175a 100644
--- a/Marlin/src/module/stepper/L64xx.cpp
+++ b/Marlin/src/module/stepper/L64xx.cpp
@@ -52,6 +52,9 @@
 #if AXIS_IS_L64XX(Z3)
   L64XX_CLASS(Z3) stepperZ3(L6470_CHAIN_SS_PIN);
 #endif
+#if AXIS_IS_L64XX(Z4)
+  L64XX_CLASS(Z4) stepperZ4(L6470_CHAIN_SS_PIN);
+#endif
 #if AXIS_IS_L64XX(E0)
   L64XX_CLASS(E0) stepperE0(L6470_CHAIN_SS_PIN);
 #endif

commit 1ad53cee1f4e2768310fca98de0381df9c39b617
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Mon Jan 13 18:47:30 2020 -0600

    Improved STMicro L64XX stepper driver support (#16452)

diff --git a/Marlin/src/module/stepper/L64xx.cpp b/Marlin/src/module/stepper/L64xx.cpp
new file mode 100644
index 0000000000..c007d418ab
--- /dev/null
+++ b/Marlin/src/module/stepper/L64xx.cpp
@@ -0,0 +1,210 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * stepper/L64xx.cpp
+ * Stepper driver indirection for L64XX drivers
+ */
+
+#include "../../inc/MarlinConfig.h"
+
+#if HAS_L64XX
+
+#include "L64xx.h"
+
+#if AXIS_IS_L64XX(X)
+  L64XX_CLASS(X) stepperX(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(X2)
+  L64XX_CLASS(X2) stepperX2(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(Y)
+  L64XX_CLASS(Y) stepperY(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(Y2)
+  L64XX_CLASS(Y2) stepperY2(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(Z)
+  L64XX_CLASS(Z) stepperZ(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(Z2)
+  L64XX_CLASS(Z2) stepperZ2(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(Z3)
+  L64XX_CLASS(Z3) stepperZ3(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(E0)
+  L64XX_CLASS(E0) stepperE0(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(E1)
+  L64XX_CLASS(E1) stepperE1(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(E2)
+  L64XX_CLASS(E2) stepperE2(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(E3)
+  L64XX_CLASS(E3) stepperE3(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(E4)
+  L64XX_CLASS(E4) stepperE4(L6470_CHAIN_SS_PIN);
+#endif
+#if AXIS_IS_L64XX(E5)
+  L64XX_CLASS(E5) stepperE5(L6470_CHAIN_SS_PIN);
+#endif
+
+// Not using L64XX class init method because it
+// briefly sends power to the steppers
+
+inline void L6470_init_chip(L64XX &st, const int ms, const int oc, const int sc, const int mv, const int slew_rate) {
+  st.set_handlers(L64xxManager.spi_init, L64xxManager.transfer_single, L64xxManager.transfer_chain);  // specify which external SPI routines to use
+  switch (st.L6470_status_layout) {
+    case L6470_STATUS_LAYOUT: {
+      st.resetDev();
+      st.softFree();
+      st.SetParam(st.L64XX_CONFIG, CONFIG_PWM_DIV_1 | CONFIG_PWM_MUL_2 | CONFIG_OC_SD_DISABLE | CONFIG_VS_COMP_DISABLE | CONFIG_SW_HARD_STOP | CONFIG_INT_16MHZ);
+      st.SetParam(L6470_KVAL_RUN, 0xFF);
+      st.SetParam(L6470_KVAL_ACC, 0xFF);
+      st.SetParam(L6470_KVAL_DEC, 0xFF);
+      st.setMicroSteps(ms);
+      st.setOverCurrent(oc);
+      st.setStallCurrent(sc);
+      st.SetParam(L6470_KVAL_HOLD, mv);
+      st.SetParam(L6470_ABS_POS, 0);
+      uint32_t config_temp = st.GetParam(st.L64XX_CONFIG);
+      config_temp &= ~CONFIG_POW_SR;
+      switch (slew_rate) {
+        case 0: st.SetParam(st.L64XX_CONFIG, config_temp | CONFIG_SR_75V_us); break;
+        default:
+        case 1: st.SetParam(st.L64XX_CONFIG, config_temp | CONFIG_SR_110V_us); break;
+        case 3:
+        case 2: st.SetParam(st.L64XX_CONFIG, config_temp | CONFIG_SR_260V_us); break;
+      }
+      st.getStatus();
+      st.getStatus();
+      break;
+    }
+
+    case L6474_STATUS_LAYOUT: {
+      st.free();
+      //st.SetParam(st.L64XX_CONFIG, CONFIG_PWM_DIV_1 | CONFIG_PWM_MUL_2 | CONFIG_OC_SD_DISABLE | CONFIG_VS_COMP_DISABLE | CONFIG_SW_HARD_STOP | CONFIG_INT_16MHZ);
+      //st.SetParam(L6474_TVAL, 0xFF);
+      st.setMicroSteps(ms);
+      st.setOverCurrent(oc);
+      st.setTVALCurrent(sc);
+      st.SetParam(L6470_ABS_POS, 0);
+      uint32_t config_temp = st.GetParam(st.L64XX_CONFIG);
+      config_temp &= ~CONFIG_POW_SR & ~CONFIG_EN_TQREG;  // clear out slew rate and set current to be controlled by TVAL register
+      switch (slew_rate) {
+        case 0: st.SetParam(st.L64XX_CONFIG, config_temp | CONFIG_SR_75V_us); break;
+        default:
+        case 1: st.SetParam(st.L64XX_CONFIG, config_temp | CONFIG_SR_110V_us); break;
+        case 3:
+        case 2: st.SetParam(st.L64XX_CONFIG, config_temp | CONFIG_SR_260V_us); break;
+        //case 0: st.SetParam(st.L64XX_CONFIG, 0x2E88 | CONFIG_EN_TQREG | CONFIG_SR_75V_us); break;
+        //default:
+        //case 1: st.SetParam(st.L64XX_CONFIG, 0x2E88 | CONFIG_EN_TQREG | CONFIG_SR_110V_us); break;
+        //case 3:
+        //case 2: st.SetParam(st.L64XX_CONFIG, 0x2E88 | CONFIG_EN_TQREG | CONFIG_SR_260V_us); break;
+
+        //case 0: st.SetParam(st.L64XX_CONFIG, 0x2E88 ); break;
+        //default:
+        //case 1: st.SetParam(st.L64XX_CONFIG, 0x2E88 ); break;
+        //case 3:
+        //case 2: st.SetParam(st.L64XX_CONFIG, 0x2E88 ); break;
+      }
+      st.getStatus();
+      st.getStatus();
+      break;
+    }
+
+    case L6480_STATUS_LAYOUT: {
+      st.resetDev();
+      st.softFree();
+      st.SetParam(st.L64XX_CONFIG, CONFIG_PWM_DIV_1 | CONFIG_PWM_MUL_2 | CONFIG_OC_SD_DISABLE | CONFIG_VS_COMP_DISABLE | CONFIG_SW_HARD_STOP | CONFIG_INT_16MHZ);
+      st.SetParam(L6470_KVAL_RUN, 0xFF);
+      st.SetParam(L6470_KVAL_ACC, 0xFF);
+      st.SetParam(L6470_KVAL_DEC, 0xFF);
+      st.setMicroSteps(ms);
+      st.setOverCurrent(oc);
+      st.setStallCurrent(sc);
+      st.SetParam(+-L6470_KVAL_HOLD, mv);
+      st.SetParam(L6470_ABS_POS, 0);
+      st.SetParam(st.L64XX_CONFIG,(st.GetParam(st.L64XX_CONFIG) | PWR_VCC_7_5V));
+      st.getStatus();     // must clear out status bits before can set slew rate
+      st.getStatus();
+      switch (slew_rate) {
+        case 0: st.SetParam(L6470_GATECFG1, CONFIG1_SR_220V_us); st.SetParam(L6470_GATECFG2, CONFIG2_SR_220V_us); break;
+        default:
+        case 1: st.SetParam(L6470_GATECFG1, CONFIG1_SR_400V_us); st.SetParam(L6470_GATECFG2, CONFIG2_SR_400V_us); break;
+        case 2: st.SetParam(L6470_GATECFG1, CONFIG1_SR_520V_us); st.SetParam(L6470_GATECFG2, CONFIG2_SR_520V_us); break;
+        case 3: st.SetParam(L6470_GATECFG1, CONFIG1_SR_980V_us); st.SetParam(L6470_GATECFG2, CONFIG2_SR_980V_us); break;
+      }
+      break;
+    }
+  }
+}
+
+#define L6470_INIT_CHIP(Q) L6470_init_chip(stepper##Q, Q##_MICROSTEPS, Q##_OVERCURRENT, Q##_STALLCURRENT, Q##_MAX_VOLTAGE, Q##_SLEW_RATE)
+
+void L64XX_Marlin::init_to_defaults() {
+  #if AXIS_IS_L64XX(X)
+    L6470_INIT_CHIP(X);
+  #endif
+  #if AXIS_IS_L64XX(X2)
+    L6470_INIT_CHIP(X2);
+  #endif
+  #if AXIS_IS_L64XX(Y)
+    L6470_INIT_CHIP(Y);
+  #endif
+  #if AXIS_IS_L64XX(Y2)
+    L6470_INIT_CHIP(Y2);
+  #endif
+  #if AXIS_IS_L64XX(Z)
+    L6470_INIT_CHIP(Z);
+  #endif
+  #if AXIS_IS_L64XX(Z2)
+    L6470_INIT_CHIP(Z2);
+  #endif
+  #if AXIS_IS_L64XX(Z3)
+    L6470_INIT_CHIP(Z3);
+  #endif
+  #if AXIS_IS_L64XX(E0)
+    L6470_INIT_CHIP(E0);
+  #endif
+  #if AXIS_IS_L64XX(E1)
+    L6470_INIT_CHIP(E1);
+  #endif
+  #if AXIS_IS_L64XX(E2)
+    L6470_INIT_CHIP(E2);
+  #endif
+  #if AXIS_IS_L64XX(E3)
+    L6470_INIT_CHIP(E3);
+  #endif
+  #if AXIS_IS_L64XX(E4)
+    L6470_INIT_CHIP(E4);
+  #endif
+  #if AXIS_IS_L64XX(E5)
+    L6470_INIT_CHIP(E5);
+  #endif
+}
+
+#endif // HAS_L64XX
