commit 6bead0c1b04152f6a291d851f6cd4029fe0fc616
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 16:29:29 2020 -0500

    Shorter paths to HAL, ExtUI (#17156)

diff --git a/Marlin/src/HAL/HAL_STM32/timers.h b/Marlin/src/HAL/HAL_STM32/timers.h
deleted file mode 100644
index 8a0950a4d7..0000000000
--- a/Marlin/src/HAL/HAL_STM32/timers.h
+++ /dev/null
@@ -1,181 +0,0 @@
-/**
- * Marlin 3D Printer Firmware
- *
- * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
- * Copyright (c) 2016 Bob Cousins bobcousins42@googlemail.com
- * Copyright (c) 2017 Victor Perez
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- *
- */
-#pragma once
-
-#include <stdint.h>
-#include "../../inc/MarlinConfig.h"
-
-// ------------------------
-// Defines
-// ------------------------
-
-#define FORCE_INLINE __attribute__((always_inline)) inline
-
-#define hal_timer_t uint32_t
-#define HAL_TIMER_TYPE_MAX 0xFFFFFFFF // Timers can be 16 or 32 bit
-
-#ifdef STM32F0xx
-
-  #define HAL_TIMER_RATE (F_CPU) // frequency of timer peripherals
-
-  #ifndef STEP_TIMER
-    #define STEP_TIMER 16
-  #endif
-
-  #ifndef TEMP_TIMER
-    #define TEMP_TIMER 17
-  #endif
-
-#elif defined(STM32F1xx)
-
-  #define HAL_TIMER_RATE (F_CPU) // frequency of timer peripherals
-
-  #ifndef STEP_TIMER
-    #define STEP_TIMER 4
-  #endif
-
-  #ifndef TEMP_TIMER
-    #define TEMP_TIMER 2
-  #endif
-
-#elif defined(STM32F401xC) || defined(STM32F401xE)
-
-  #define HAL_TIMER_RATE (F_CPU / 2) // frequency of timer peripherals
-
-  #ifndef STEP_TIMER
-    #define STEP_TIMER 9
-  #endif
-
-  #ifndef TEMP_TIMER
-    #define TEMP_TIMER 10
-  #endif
-
-#elif defined(STM32F4xx)
-
-  #define HAL_TIMER_RATE (F_CPU / 2) // frequency of timer peripherals
-
-  #ifndef STEP_TIMER
-    #define STEP_TIMER 6  // STM32F401 has no TIM6, TIM7, or TIM8
-  #endif
-
-  #ifndef TEMP_TIMER
-    #define TEMP_TIMER 14 // TIM7 is consumed by Software Serial if used.
-  #endif
-
-#elif defined(STM32F7xx)
-
-  #define HAL_TIMER_RATE (F_CPU / 2) // frequency of timer peripherals
-
-  #ifndef STEP_TIMER
-    #define STEP_TIMER 6  // the RIGHT timer!
-  #endif
-
-  #ifndef TEMP_TIMER
-    #define TEMP_TIMER 14
-  #endif
-
-#endif
-
-#ifndef SWSERIAL_TIMER_IRQ_PRIO
-  #define SWSERIAL_TIMER_IRQ_PRIO 1
-#endif
-
-#ifndef STEP_TIMER_IRQ_PRIO
-  #define STEP_TIMER_IRQ_PRIO 2
-#endif
-
-#ifndef TEMP_TIMER_IRQ_PRIO
-  #define TEMP_TIMER_IRQ_PRIO 14   // 14 = after hardware ISRs
-#endif
-
-#define STEP_TIMER_NUM 0  // index of timer to use for stepper
-#define TEMP_TIMER_NUM 1  // index of timer to use for temperature
-#define PULSE_TIMER_NUM STEP_TIMER_NUM
-
-#define TEMP_TIMER_FREQUENCY 1000   // Temperature::isr() is expected to be called at around 1kHz
-
-// TODO: get rid of manual rate/prescale/ticks/cycles taken for procedures in stepper.cpp
-#define STEPPER_TIMER_RATE 2000000 // 2 Mhz
-#define STEPPER_TIMER_PRESCALE ((HAL_TIMER_RATE)/(STEPPER_TIMER_RATE))
-#define STEPPER_TIMER_TICKS_PER_US ((STEPPER_TIMER_RATE) / 1000000) // stepper timer ticks per Âµs
-
-#define PULSE_TIMER_RATE STEPPER_TIMER_RATE
-#define PULSE_TIMER_PRESCALE STEPPER_TIMER_PRESCALE
-#define PULSE_TIMER_TICKS_PER_US STEPPER_TIMER_TICKS_PER_US
-
-#define __TIMER_IRQ_NAME(X) TIM##X##_IRQn
-#define _TIMER_IRQ_NAME(X) __TIMER_IRQ_NAME(X)
-
-#define STEP_TIMER_IRQ_NAME _TIMER_IRQ_NAME(STEP_TIMER)
-#define TEMP_TIMER_IRQ_NAME _TIMER_IRQ_NAME(TEMP_TIMER)
-
-#define ENABLE_STEPPER_DRIVER_INTERRUPT() HAL_timer_enable_interrupt(STEP_TIMER_NUM)
-#define DISABLE_STEPPER_DRIVER_INTERRUPT() HAL_timer_disable_interrupt(STEP_TIMER_NUM)
-#define STEPPER_ISR_ENABLED() HAL_timer_interrupt_enabled(STEP_TIMER_NUM)
-
-#define ENABLE_TEMPERATURE_INTERRUPT() HAL_timer_enable_interrupt(TEMP_TIMER_NUM)
-#define DISABLE_TEMPERATURE_INTERRUPT() HAL_timer_disable_interrupt(TEMP_TIMER_NUM)
-
-extern void Step_Handler(HardwareTimer *htim);
-extern void Temp_Handler(HardwareTimer *htim);
-#define HAL_STEP_TIMER_ISR() void Step_Handler(HardwareTimer *htim)
-#define HAL_TEMP_TIMER_ISR() void Temp_Handler(HardwareTimer *htim)
-
-// ------------------------
-// Public Variables
-// ------------------------
-
-extern HardwareTimer *timer_instance[];
-
-// ------------------------
-// Public functions
-// ------------------------
-
-void HAL_timer_start(const uint8_t timer_num, const uint32_t frequency);
-void HAL_timer_enable_interrupt(const uint8_t timer_num);
-void HAL_timer_disable_interrupt(const uint8_t timer_num);
-bool HAL_timer_interrupt_enabled(const uint8_t timer_num);
-
-//TIM_TypeDef* HAL_timer_device(const uint8_t timer_num); no need to be public for now. not public = not used externally
-
-// FORCE_INLINE because these are used in performance-critical situations
-FORCE_INLINE bool HAL_timer_initialized(const uint8_t timer_num) {
-  return timer_instance[timer_num] != NULL;
-}
-FORCE_INLINE static hal_timer_t HAL_timer_get_count(const uint8_t timer_num) {
-  return HAL_timer_initialized(timer_num) ? timer_instance[timer_num]->getCount() : 0;
-}
-
-// NOTE: Method name may be misleading.
-// STM32 has an Auto-Reload Register (ARR) as opposed to a "compare" register
-FORCE_INLINE static void HAL_timer_set_compare(const uint8_t timer_num, const hal_timer_t overflow) {
-  if (HAL_timer_initialized(timer_num)) {
-    timer_instance[timer_num]->setOverflow(overflow + 1, TICK_FORMAT); // Value decremented by setOverflow()
-    // wiki: "force all registers (Autoreload, prescaler, compare) to be taken into account"
-    // So, if the new overflow value is less than the count it will trigger a rollover interrupt.
-    if (overflow < timer_instance[timer_num]->getCount())  // Added 'if' here because reports say it won't boot without it
-      timer_instance[timer_num]->refresh();
-  }
-}
-
-#define HAL_timer_isr_prologue(TIMER_NUM)
-#define HAL_timer_isr_epilogue(TIMER_NUM)

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/HAL/HAL_STM32/timers.h b/Marlin/src/HAL/HAL_STM32/timers.h
index f1dce173e4..8a0950a4d7 100644
--- a/Marlin/src/HAL/HAL_STM32/timers.h
+++ b/Marlin/src/HAL/HAL_STM32/timers.h
@@ -1,7 +1,7 @@
 /**
  * Marlin 3D Printer Firmware
  *
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  * Copyright (c) 2016 Bob Cousins bobcousins42@googlemail.com
  * Copyright (c) 2017 Victor Perez
  *

commit e2eef1256a6feaceb8f4c7f02188e8d6d6d43519
Author: Hans007a <32525735+Hans007a@users.noreply.github.com>
Date:   Tue Jan 7 20:52:19 2020 +0100

    G60/G61 Position Save/Restore (#16557)

diff --git a/Marlin/src/HAL/HAL_STM32/timers.h b/Marlin/src/HAL/HAL_STM32/timers.h
index aa85836bd5..f1dce173e4 100644
--- a/Marlin/src/HAL/HAL_STM32/timers.h
+++ b/Marlin/src/HAL/HAL_STM32/timers.h
@@ -61,8 +61,6 @@
 
   #define HAL_TIMER_RATE (F_CPU / 2) // frequency of timer peripherals
 
-  // STM32F401 only has timers 1-5 & 9-11 with timers 4 & 5 usually assigned to TIMER_SERVO and TIMER_TONE
-
   #ifndef STEP_TIMER
     #define STEP_TIMER 9
   #endif
@@ -76,19 +74,19 @@
   #define HAL_TIMER_RATE (F_CPU / 2) // frequency of timer peripherals
 
   #ifndef STEP_TIMER
-    #define STEP_TIMER 6
+    #define STEP_TIMER 6  // STM32F401 has no TIM6, TIM7, or TIM8
   #endif
 
   #ifndef TEMP_TIMER
-    #define TEMP_TIMER 14
+    #define TEMP_TIMER 14 // TIM7 is consumed by Software Serial if used.
   #endif
 
 #elif defined(STM32F7xx)
 
-  #define HAL_TIMER_RATE (F_CPU/2) // frequency of timer peripherals
+  #define HAL_TIMER_RATE (F_CPU / 2) // frequency of timer peripherals
 
   #ifndef STEP_TIMER
-    #define STEP_TIMER 6
+    #define STEP_TIMER 6  // the RIGHT timer!
   #endif
 
   #ifndef TEMP_TIMER

commit 1a5cbc9052dd44902508ef092634c2080ebea851
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Mon Jan 20 18:33:36 2020 -0600

    Fix STM401/4xx/STM32F7xx timers, STEVAL_3DP001V1 warning (#16621)

diff --git a/Marlin/src/HAL/HAL_STM32/timers.h b/Marlin/src/HAL/HAL_STM32/timers.h
index 7d028e6079..aa85836bd5 100644
--- a/Marlin/src/HAL/HAL_STM32/timers.h
+++ b/Marlin/src/HAL/HAL_STM32/timers.h
@@ -57,9 +57,9 @@
     #define TEMP_TIMER 2
   #endif
 
-#elif defined(STM32F4xx) || defined(STM32F7xx)
+#elif defined(STM32F401xC) || defined(STM32F401xE)
 
-  #define HAL_TIMER_RATE (F_CPU/2) // frequency of timer peripherals
+  #define HAL_TIMER_RATE (F_CPU / 2) // frequency of timer peripherals
 
   // STM32F401 only has timers 1-5 & 9-11 with timers 4 & 5 usually assigned to TIMER_SERVO and TIMER_TONE
 
@@ -71,6 +71,30 @@
     #define TEMP_TIMER 10
   #endif
 
+#elif defined(STM32F4xx)
+
+  #define HAL_TIMER_RATE (F_CPU / 2) // frequency of timer peripherals
+
+  #ifndef STEP_TIMER
+    #define STEP_TIMER 6
+  #endif
+
+  #ifndef TEMP_TIMER
+    #define TEMP_TIMER 14
+  #endif
+
+#elif defined(STM32F7xx)
+
+  #define HAL_TIMER_RATE (F_CPU/2) // frequency of timer peripherals
+
+  #ifndef STEP_TIMER
+    #define STEP_TIMER 6
+  #endif
+
+  #ifndef TEMP_TIMER
+    #define TEMP_TIMER 14
+  #endif
+
 #endif
 
 #ifndef SWSERIAL_TIMER_IRQ_PRIO
@@ -82,16 +106,16 @@
 #endif
 
 #ifndef TEMP_TIMER_IRQ_PRIO
-  #define TEMP_TIMER_IRQ_PRIO 14 //14 = after hardware ISRs
+  #define TEMP_TIMER_IRQ_PRIO 14   // 14 = after hardware ISRs
 #endif
 
 #define STEP_TIMER_NUM 0  // index of timer to use for stepper
 #define TEMP_TIMER_NUM 1  // index of timer to use for temperature
 #define PULSE_TIMER_NUM STEP_TIMER_NUM
 
-#define TEMP_TIMER_FREQUENCY 1000 //Temperature::isr() is expected to be called at around 1kHz
+#define TEMP_TIMER_FREQUENCY 1000   // Temperature::isr() is expected to be called at around 1kHz
 
-//TODO: get rid of manual rate/prescale/ticks/cycles taken for procedures in stepper.cpp
+// TODO: get rid of manual rate/prescale/ticks/cycles taken for procedures in stepper.cpp
 #define STEPPER_TIMER_RATE 2000000 // 2 Mhz
 #define STEPPER_TIMER_PRESCALE ((HAL_TIMER_RATE)/(STEPPER_TIMER_RATE))
 #define STEPPER_TIMER_TICKS_PER_US ((STEPPER_TIMER_RATE) / 1000000) // stepper timer ticks per Âµs

commit 53dfeed6c0584fc6c93d592d164ee5c3af9446e4
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Tue Jan 14 22:35:25 2020 -0600

    Steval_3DP001V1 timers, analog inputs, etc. (#16565)

diff --git a/Marlin/src/HAL/HAL_STM32/timers.h b/Marlin/src/HAL/HAL_STM32/timers.h
index 001b298535..7d028e6079 100644
--- a/Marlin/src/HAL/HAL_STM32/timers.h
+++ b/Marlin/src/HAL/HAL_STM32/timers.h
@@ -61,12 +61,14 @@
 
   #define HAL_TIMER_RATE (F_CPU/2) // frequency of timer peripherals
 
+  // STM32F401 only has timers 1-5 & 9-11 with timers 4 & 5 usually assigned to TIMER_SERVO and TIMER_TONE
+
   #ifndef STEP_TIMER
-    #define STEP_TIMER 9  // STM32F401 has no TIM6, TIM7, or TIM8
+    #define STEP_TIMER 9
   #endif
 
   #ifndef TEMP_TIMER
-    #define TEMP_TIMER 14 // TIM7 is consumed by Software Serial if used.
+    #define TEMP_TIMER 10
   #endif
 
 #endif

commit 1ad53cee1f4e2768310fca98de0381df9c39b617
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Mon Jan 13 18:47:30 2020 -0600

    Improved STMicro L64XX stepper driver support (#16452)

diff --git a/Marlin/src/HAL/HAL_STM32/timers.h b/Marlin/src/HAL/HAL_STM32/timers.h
index dda7a8ce9a..001b298535 100644
--- a/Marlin/src/HAL/HAL_STM32/timers.h
+++ b/Marlin/src/HAL/HAL_STM32/timers.h
@@ -33,7 +33,6 @@
 #define hal_timer_t uint32_t
 #define HAL_TIMER_TYPE_MAX 0xFFFFFFFF // Timers can be 16 or 32 bit
 
-
 #ifdef STM32F0xx
 
   #define HAL_TIMER_RATE (F_CPU) // frequency of timer peripherals
@@ -63,7 +62,7 @@
   #define HAL_TIMER_RATE (F_CPU/2) // frequency of timer peripherals
 
   #ifndef STEP_TIMER
-    #define STEP_TIMER 6
+    #define STEP_TIMER 9  // STM32F401 has no TIM6, TIM7, or TIM8
   #endif
 
   #ifndef TEMP_TIMER

commit 5c4c052fd79db45522130ab72588b7cce0518257
Author: Lino Barreca <linobarreca@hotmail.com>
Date:   Wed Jan 8 04:54:26 2020 +0100

    Fix SKR Pro BLTouch conflicting timers (#16499)

diff --git a/Marlin/src/HAL/HAL_STM32/timers.h b/Marlin/src/HAL/HAL_STM32/timers.h
index 1d2c095f2b..dda7a8ce9a 100644
--- a/Marlin/src/HAL/HAL_STM32/timers.h
+++ b/Marlin/src/HAL/HAL_STM32/timers.h
@@ -63,7 +63,7 @@
   #define HAL_TIMER_RATE (F_CPU/2) // frequency of timer peripherals
 
   #ifndef STEP_TIMER
-    #define STEP_TIMER 5
+    #define STEP_TIMER 6
   #endif
 
   #ifndef TEMP_TIMER

commit ac71cdc265374717c067102b2bc22af002c86ee3
Author: Lino Barreca <linobarreca@hotmail.com>
Date:   Wed Nov 13 02:23:02 2019 +0100

    New HardwareTimer for STM32 5.7.0 (#15655)

diff --git a/Marlin/src/HAL/HAL_STM32/timers.h b/Marlin/src/HAL/HAL_STM32/timers.h
index aefe880b4e..1d2c095f2b 100644
--- a/Marlin/src/HAL/HAL_STM32/timers.h
+++ b/Marlin/src/HAL/HAL_STM32/timers.h
@@ -33,6 +33,7 @@
 #define hal_timer_t uint32_t
 #define HAL_TIMER_TYPE_MAX 0xFFFFFFFF // Timers can be 16 or 32 bit
 
+
 #ifdef STM32F0xx
 
   #define HAL_TIMER_RATE (F_CPU) // frequency of timer peripherals
@@ -66,27 +67,30 @@
   #endif
 
   #ifndef TEMP_TIMER
-    #define TEMP_TIMER 7
+    #define TEMP_TIMER 14 // TIM7 is consumed by Software Serial if used.
   #endif
 
 #endif
 
+#ifndef SWSERIAL_TIMER_IRQ_PRIO
+  #define SWSERIAL_TIMER_IRQ_PRIO 1
+#endif
+
 #ifndef STEP_TIMER_IRQ_PRIO
-  #define STEP_TIMER_IRQ_PRIO 1
+  #define STEP_TIMER_IRQ_PRIO 2
 #endif
 
 #ifndef TEMP_TIMER_IRQ_PRIO
-  #define TEMP_TIMER_IRQ_PRIO 2
+  #define TEMP_TIMER_IRQ_PRIO 14 //14 = after hardware ISRs
 #endif
 
 #define STEP_TIMER_NUM 0  // index of timer to use for stepper
 #define TEMP_TIMER_NUM 1  // index of timer to use for temperature
 #define PULSE_TIMER_NUM STEP_TIMER_NUM
 
-#define TEMP_TIMER_RATE 72000 // 72 Khz
-#define TEMP_TIMER_PRESCALE ((HAL_TIMER_RATE)/(TEMP_TIMER_RATE))
-#define TEMP_TIMER_FREQUENCY 1000
+#define TEMP_TIMER_FREQUENCY 1000 //Temperature::isr() is expected to be called at around 1kHz
 
+//TODO: get rid of manual rate/prescale/ticks/cycles taken for procedures in stepper.cpp
 #define STEPPER_TIMER_RATE 2000000 // 2 Mhz
 #define STEPPER_TIMER_PRESCALE ((HAL_TIMER_RATE)/(STEPPER_TIMER_RATE))
 #define STEPPER_TIMER_TICKS_PER_US ((STEPPER_TIMER_RATE) / 1000000) // stepper timer ticks per Âµs
@@ -95,17 +99,6 @@
 #define PULSE_TIMER_PRESCALE STEPPER_TIMER_PRESCALE
 #define PULSE_TIMER_TICKS_PER_US STEPPER_TIMER_TICKS_PER_US
 
-#define __TIMER_DEV(X) TIM##X
-#define _TIMER_DEV(X) __TIMER_DEV(X)
-#define STEP_TIMER_DEV _TIMER_DEV(STEP_TIMER)
-#define TEMP_TIMER_DEV _TIMER_DEV(TEMP_TIMER)
-
-#define __TIMER_CALLBACK(X) TIM##X##_IRQHandler
-#define _TIMER_CALLBACK(X) __TIMER_CALLBACK(X)
-
-#define STEP_TIMER_CALLBACK _TIMER_CALLBACK(STEP_TIMER)
-#define TEMP_TIMER_CALLBACK _TIMER_CALLBACK(TEMP_TIMER)
-
 #define __TIMER_IRQ_NAME(X) TIM##X##_IRQn
 #define _TIMER_IRQ_NAME(X) __TIMER_IRQ_NAME(X)
 
@@ -119,22 +112,16 @@
 #define ENABLE_TEMPERATURE_INTERRUPT() HAL_timer_enable_interrupt(TEMP_TIMER_NUM)
 #define DISABLE_TEMPERATURE_INTERRUPT() HAL_timer_disable_interrupt(TEMP_TIMER_NUM)
 
-extern void Step_Handler(stimer_t *htim);
-extern void Temp_Handler(stimer_t *htim);
-#define HAL_STEP_TIMER_ISR() void Step_Handler(stimer_t *htim)
-#define HAL_TEMP_TIMER_ISR() void Temp_Handler(stimer_t *htim)
-
-// ------------------------
-// Types
-// ------------------------
-
-typedef stimer_t stm32_timer_t;
+extern void Step_Handler(HardwareTimer *htim);
+extern void Temp_Handler(HardwareTimer *htim);
+#define HAL_STEP_TIMER_ISR() void Step_Handler(HardwareTimer *htim)
+#define HAL_TEMP_TIMER_ISR() void Temp_Handler(HardwareTimer *htim)
 
 // ------------------------
 // Public Variables
 // ------------------------
 
-extern stm32_timer_t TimerHandle[];
+extern HardwareTimer *timer_instance[];
 
 // ------------------------
 // Public functions
@@ -145,18 +132,26 @@ void HAL_timer_enable_interrupt(const uint8_t timer_num);
 void HAL_timer_disable_interrupt(const uint8_t timer_num);
 bool HAL_timer_interrupt_enabled(const uint8_t timer_num);
 
-FORCE_INLINE static uint32_t HAL_timer_get_count(const uint8_t timer_num) {
-  return __HAL_TIM_GET_COUNTER(&TimerHandle[timer_num].handle);
-}
+//TIM_TypeDef* HAL_timer_device(const uint8_t timer_num); no need to be public for now. not public = not used externally
 
-FORCE_INLINE static void HAL_timer_set_compare(const uint8_t timer_num, const uint32_t compare) {
-  __HAL_TIM_SET_AUTORELOAD(&TimerHandle[timer_num].handle, compare);
-  if (HAL_timer_get_count(timer_num) >= compare)
-    TimerHandle[timer_num].handle.Instance->EGR |= TIM_EGR_UG; // Generate an immediate update interrupt
+// FORCE_INLINE because these are used in performance-critical situations
+FORCE_INLINE bool HAL_timer_initialized(const uint8_t timer_num) {
+  return timer_instance[timer_num] != NULL;
+}
+FORCE_INLINE static hal_timer_t HAL_timer_get_count(const uint8_t timer_num) {
+  return HAL_timer_initialized(timer_num) ? timer_instance[timer_num]->getCount() : 0;
 }
 
-FORCE_INLINE static hal_timer_t HAL_timer_get_compare(const uint8_t timer_num) {
-  return __HAL_TIM_GET_AUTORELOAD(&TimerHandle[timer_num].handle);
+// NOTE: Method name may be misleading.
+// STM32 has an Auto-Reload Register (ARR) as opposed to a "compare" register
+FORCE_INLINE static void HAL_timer_set_compare(const uint8_t timer_num, const hal_timer_t overflow) {
+  if (HAL_timer_initialized(timer_num)) {
+    timer_instance[timer_num]->setOverflow(overflow + 1, TICK_FORMAT); // Value decremented by setOverflow()
+    // wiki: "force all registers (Autoreload, prescaler, compare) to be taken into account"
+    // So, if the new overflow value is less than the count it will trigger a rollover interrupt.
+    if (overflow < timer_instance[timer_num]->getCount())  // Added 'if' here because reports say it won't boot without it
+      timer_instance[timer_num]->refresh();
+  }
 }
 
 #define HAL_timer_isr_prologue(TIMER_NUM)

commit 75efa3cdacd8271ca360e7d1680f25f5be218da3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Sep 2 19:49:58 2019 -0500

    Reorganize HAL (#14832)

diff --git a/Marlin/src/HAL/HAL_STM32/timers.h b/Marlin/src/HAL/HAL_STM32/timers.h
new file mode 100644
index 0000000000..aefe880b4e
--- /dev/null
+++ b/Marlin/src/HAL/HAL_STM32/timers.h
@@ -0,0 +1,163 @@
+/**
+ * Marlin 3D Printer Firmware
+ *
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2016 Bob Cousins bobcousins42@googlemail.com
+ * Copyright (c) 2017 Victor Perez
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+#include <stdint.h>
+#include "../../inc/MarlinConfig.h"
+
+// ------------------------
+// Defines
+// ------------------------
+
+#define FORCE_INLINE __attribute__((always_inline)) inline
+
+#define hal_timer_t uint32_t
+#define HAL_TIMER_TYPE_MAX 0xFFFFFFFF // Timers can be 16 or 32 bit
+
+#ifdef STM32F0xx
+
+  #define HAL_TIMER_RATE (F_CPU) // frequency of timer peripherals
+
+  #ifndef STEP_TIMER
+    #define STEP_TIMER 16
+  #endif
+
+  #ifndef TEMP_TIMER
+    #define TEMP_TIMER 17
+  #endif
+
+#elif defined(STM32F1xx)
+
+  #define HAL_TIMER_RATE (F_CPU) // frequency of timer peripherals
+
+  #ifndef STEP_TIMER
+    #define STEP_TIMER 4
+  #endif
+
+  #ifndef TEMP_TIMER
+    #define TEMP_TIMER 2
+  #endif
+
+#elif defined(STM32F4xx) || defined(STM32F7xx)
+
+  #define HAL_TIMER_RATE (F_CPU/2) // frequency of timer peripherals
+
+  #ifndef STEP_TIMER
+    #define STEP_TIMER 5
+  #endif
+
+  #ifndef TEMP_TIMER
+    #define TEMP_TIMER 7
+  #endif
+
+#endif
+
+#ifndef STEP_TIMER_IRQ_PRIO
+  #define STEP_TIMER_IRQ_PRIO 1
+#endif
+
+#ifndef TEMP_TIMER_IRQ_PRIO
+  #define TEMP_TIMER_IRQ_PRIO 2
+#endif
+
+#define STEP_TIMER_NUM 0  // index of timer to use for stepper
+#define TEMP_TIMER_NUM 1  // index of timer to use for temperature
+#define PULSE_TIMER_NUM STEP_TIMER_NUM
+
+#define TEMP_TIMER_RATE 72000 // 72 Khz
+#define TEMP_TIMER_PRESCALE ((HAL_TIMER_RATE)/(TEMP_TIMER_RATE))
+#define TEMP_TIMER_FREQUENCY 1000
+
+#define STEPPER_TIMER_RATE 2000000 // 2 Mhz
+#define STEPPER_TIMER_PRESCALE ((HAL_TIMER_RATE)/(STEPPER_TIMER_RATE))
+#define STEPPER_TIMER_TICKS_PER_US ((STEPPER_TIMER_RATE) / 1000000) // stepper timer ticks per Âµs
+
+#define PULSE_TIMER_RATE STEPPER_TIMER_RATE
+#define PULSE_TIMER_PRESCALE STEPPER_TIMER_PRESCALE
+#define PULSE_TIMER_TICKS_PER_US STEPPER_TIMER_TICKS_PER_US
+
+#define __TIMER_DEV(X) TIM##X
+#define _TIMER_DEV(X) __TIMER_DEV(X)
+#define STEP_TIMER_DEV _TIMER_DEV(STEP_TIMER)
+#define TEMP_TIMER_DEV _TIMER_DEV(TEMP_TIMER)
+
+#define __TIMER_CALLBACK(X) TIM##X##_IRQHandler
+#define _TIMER_CALLBACK(X) __TIMER_CALLBACK(X)
+
+#define STEP_TIMER_CALLBACK _TIMER_CALLBACK(STEP_TIMER)
+#define TEMP_TIMER_CALLBACK _TIMER_CALLBACK(TEMP_TIMER)
+
+#define __TIMER_IRQ_NAME(X) TIM##X##_IRQn
+#define _TIMER_IRQ_NAME(X) __TIMER_IRQ_NAME(X)
+
+#define STEP_TIMER_IRQ_NAME _TIMER_IRQ_NAME(STEP_TIMER)
+#define TEMP_TIMER_IRQ_NAME _TIMER_IRQ_NAME(TEMP_TIMER)
+
+#define ENABLE_STEPPER_DRIVER_INTERRUPT() HAL_timer_enable_interrupt(STEP_TIMER_NUM)
+#define DISABLE_STEPPER_DRIVER_INTERRUPT() HAL_timer_disable_interrupt(STEP_TIMER_NUM)
+#define STEPPER_ISR_ENABLED() HAL_timer_interrupt_enabled(STEP_TIMER_NUM)
+
+#define ENABLE_TEMPERATURE_INTERRUPT() HAL_timer_enable_interrupt(TEMP_TIMER_NUM)
+#define DISABLE_TEMPERATURE_INTERRUPT() HAL_timer_disable_interrupt(TEMP_TIMER_NUM)
+
+extern void Step_Handler(stimer_t *htim);
+extern void Temp_Handler(stimer_t *htim);
+#define HAL_STEP_TIMER_ISR() void Step_Handler(stimer_t *htim)
+#define HAL_TEMP_TIMER_ISR() void Temp_Handler(stimer_t *htim)
+
+// ------------------------
+// Types
+// ------------------------
+
+typedef stimer_t stm32_timer_t;
+
+// ------------------------
+// Public Variables
+// ------------------------
+
+extern stm32_timer_t TimerHandle[];
+
+// ------------------------
+// Public functions
+// ------------------------
+
+void HAL_timer_start(const uint8_t timer_num, const uint32_t frequency);
+void HAL_timer_enable_interrupt(const uint8_t timer_num);
+void HAL_timer_disable_interrupt(const uint8_t timer_num);
+bool HAL_timer_interrupt_enabled(const uint8_t timer_num);
+
+FORCE_INLINE static uint32_t HAL_timer_get_count(const uint8_t timer_num) {
+  return __HAL_TIM_GET_COUNTER(&TimerHandle[timer_num].handle);
+}
+
+FORCE_INLINE static void HAL_timer_set_compare(const uint8_t timer_num, const uint32_t compare) {
+  __HAL_TIM_SET_AUTORELOAD(&TimerHandle[timer_num].handle, compare);
+  if (HAL_timer_get_count(timer_num) >= compare)
+    TimerHandle[timer_num].handle.Instance->EGR |= TIM_EGR_UG; // Generate an immediate update interrupt
+}
+
+FORCE_INLINE static hal_timer_t HAL_timer_get_compare(const uint8_t timer_num) {
+  return __HAL_TIM_GET_AUTORELOAD(&TimerHandle[timer_num].handle);
+}
+
+#define HAL_timer_isr_prologue(TIMER_NUM)
+#define HAL_timer_isr_epilogue(TIMER_NUM)
