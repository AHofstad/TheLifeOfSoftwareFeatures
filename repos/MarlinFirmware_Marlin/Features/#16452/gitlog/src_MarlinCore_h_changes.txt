commit 27b828891db155f8b372e4efb9891bdc91bf6d33
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 7 01:33:03 2023 -0500

    üé® Apply const (#25643)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index f80405a302..e9c63bb31f 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -30,7 +30,7 @@
 void stop();
 
 // Pass true to keep steppers from timing out
-void idle(bool no_stepper_sleep=false);
+void idle(const bool no_stepper_sleep=false);
 inline void idle_no_sleep() { idle(true); }
 
 #if ENABLED(G38_PROBE_TARGET)

commit 1e749e4f48f528179213e736c99371843a90b4fb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu May 12 20:13:59 2022 -0500

    üßë‚Äçüíª Misc. LCD cleanup

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 7063c7e2de..f80405a302 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -61,6 +61,8 @@ bool printJobOngoing();
 bool printingIsPaused();
 void startOrResumeJob();
 
+bool printer_busy();
+
 extern bool wait_for_heatup;
 
 #if HAS_RESUME_CONTINUE

commit 65b950a489c35b1d5547da3a504af4dad8cde3d7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 20:15:52 2021 -0500

    üé® Apply F() to kill / sendinfoscreen

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index c3698d616d..7063c7e2de 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -38,7 +38,7 @@ inline void idle_no_sleep() { idle(true); }
   extern bool G38_did_trigger;      // Flag from the ISR to indicate the endstop changed
 #endif
 
-void kill(PGM_P const lcd_error=nullptr, PGM_P const lcd_component=nullptr, const bool steppers_off=false);
+void kill(FSTR_P const lcd_error=nullptr, FSTR_P const lcd_component=nullptr, const bool steppers_off=false);
 void minkill(const bool steppers_off=false);
 
 // Global State of the firmware

commit 33e0855e2c173680865aaa6c6aa93047d63fc469
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Sep 28 01:07:51 2021 -0500

    ‚ö°Ô∏è Handle shared enable pins (#22824)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 6428b77398..c3698d616d 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -38,15 +38,6 @@ inline void idle_no_sleep() { idle(true); }
   extern bool G38_did_trigger;      // Flag from the ISR to indicate the endstop changed
 #endif
 
-/**
- * The axis order in all axis related arrays is X, Y, Z, E
- */
-void enable_e_steppers();
-void enable_all_steppers();
-void disable_e_stepper(const uint8_t e);
-void disable_e_steppers();
-void disable_all_steppers();
-
 void kill(PGM_P const lcd_error=nullptr, PGM_P const lcd_component=nullptr, const bool steppers_off=false);
 void minkill(const bool steppers_off=false);
 

commit 67d82ff228789408f7f32e6c9af3108c989c0c90
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Sep 10 18:49:57 2021 -0500

    üêõ Followup to JyersUI

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 6147d43f17..6428b77398 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -23,10 +23,6 @@
 
 #include "inc/MarlinConfig.h"
 
-#ifdef DEBUG_GCODE_PARSER
-  #include "gcode/parser.h"
-#endif
-
 #include <math.h>
 #include <stdio.h>
 #include <stdlib.h>

commit c161a46112debd280dc1ed6945d50f971ff505e6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Aug 13 16:32:25 2021 -0500

    üé® Update MKSPWC, some other pins (#22557)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index d7ab11d046..6147d43f17 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -84,7 +84,7 @@ extern bool wait_for_heatup;
 bool pin_is_protected(const pin_t pin);
 
 #if HAS_SUICIDE
-  inline void suicide() { OUT_WRITE(SUICIDE_PIN, SUICIDE_PIN_INVERTING); }
+  inline void suicide() { OUT_WRITE(SUICIDE_PIN, SUICIDE_PIN_STATE); }
 #endif
 
 #if HAS_KILL

commit c8ee056cc63c5cb996b70c3336aae9be52f8cc85
Author: Katelyn Schiesser <katelyn.schiesser@gmail.com>
Date:   Sun Jul 11 22:13:58 2021 -0700

    ‚ôªÔ∏è Consolidate PSU_CONTROL (#22304)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 243811d7fb..d7ab11d046 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -81,25 +81,6 @@ extern bool wait_for_heatup;
   void wait_for_user_response(millis_t ms=0, const bool no_sleep=false);
 #endif
 
-#if ENABLED(PSU_CONTROL)
-  extern bool powersupply_on;
-  #define PSU_PIN_ON()  do{ OUT_WRITE(PS_ON_PIN,  PSU_ACTIVE_STATE); powersupply_on = true;  }while(0)
-  #define PSU_PIN_OFF() do{ OUT_WRITE(PS_ON_PIN, !PSU_ACTIVE_STATE); powersupply_on = false; }while(0)
-  #if ENABLED(AUTO_POWER_CONTROL)
-    #define PSU_ON()       powerManager.power_on()
-    #define PSU_OFF()      powerManager.power_off()
-    #define PSU_OFF_SOON() powerManager.power_off_soon()
-  #else
-    #define PSU_ON()     PSU_PIN_ON()
-    #if ENABLED(PS_OFF_SOUND)
-      #define PSU_OFF()  do{ BUZZ(1000, 659); PSU_PIN_OFF(); }while(0)
-    #else
-      #define PSU_OFF()  PSU_PIN_OFF()
-    #endif
-    #define PSU_OFF_SOON PSU_OFF
-  #endif
-#endif
-
 bool pin_is_protected(const pin_t pin);
 
 #if HAS_SUICIDE

commit 61c48b8513f445e4c57e4bf3e4c46ea6e7b39808
Author: Cytown <cytown@gmail.com>
Date:   Wed Jun 30 01:58:11 2021 +0800

    üö∏ Retain power during Pause (#22227)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 01a1be4d59..243811d7fb 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -91,7 +91,11 @@ extern bool wait_for_heatup;
     #define PSU_OFF_SOON() powerManager.power_off_soon()
   #else
     #define PSU_ON()     PSU_PIN_ON()
-    #define PSU_OFF()    PSU_PIN_OFF()
+    #if ENABLED(PS_OFF_SOUND)
+      #define PSU_OFF()  do{ BUZZ(1000, 659); PSU_PIN_OFF(); }while(0)
+    #else
+      #define PSU_OFF()  PSU_PIN_OFF()
+    #endif
     #define PSU_OFF_SOON PSU_OFF
   #endif
 #endif

commit 6b3dc80b551e2a46776f157060e92cc7727d3bc9
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jun 14 18:44:27 2021 -0500

    üêõ Prevent stepper sleep during long UBL idle (#22137)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index ce1b106bfa..01a1be4d59 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -34,8 +34,8 @@
 void stop();
 
 // Pass true to keep steppers from timing out
-void idle(TERN_(ADVANCED_PAUSE_FEATURE, bool no_stepper_sleep=false));
-inline void idle_no_sleep() { idle(TERN_(ADVANCED_PAUSE_FEATURE, true)); }
+void idle(bool no_stepper_sleep=false);
+inline void idle_no_sleep() { idle(true); }
 
 #if ENABLED(G38_PROBE_TARGET)
   extern uint8_t G38_move;          // Flag to tell the ISR that G38 is in progress, and the type

commit b65cdbed91782c83188706a9c340de9c503cf430
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat May 8 04:35:35 2021 -0500

    Signal SD completion later (#21840)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index d016151c2d..ce1b106bfa 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -70,6 +70,7 @@ inline bool IsRunning() { return marlin_state >= MF_RUNNING; }
 inline bool IsStopped() { return marlin_state == MF_STOPPED; }
 
 bool printingIsActive();
+bool printJobOngoing();
 bool printingIsPaused();
 void startOrResumeJob();
 

commit a03811f4e8bcc794c02108ec8a33edc071221187
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri May 7 22:54:06 2021 -0500

    Update MF states

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index d43d46bbd8..d016151c2d 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -56,18 +56,18 @@ void minkill(const bool steppers_off=false);
 
 // Global State of the firmware
 enum MarlinState : uint8_t {
-  MF_INITIALIZING =  0,
-  MF_RUNNING      = _BV(0),
-  MF_PAUSED       = _BV(1),
-  MF_WAITING      = _BV(2),
-  MF_STOPPED      = _BV(3),
-  MF_SD_COMPLETE  = _BV(4),
-  MF_KILLED       = _BV(7)
+  MF_INITIALIZING = 0,
+  MF_STOPPED,
+  MF_KILLED,
+  MF_RUNNING,
+  MF_SD_COMPLETE,
+  MF_PAUSED,
+  MF_WAITING,
 };
 
 extern MarlinState marlin_state;
-inline bool IsRunning() { return marlin_state == MF_RUNNING; }
-inline bool IsStopped() { return marlin_state != MF_RUNNING; }
+inline bool IsRunning() { return marlin_state >= MF_RUNNING; }
+inline bool IsStopped() { return marlin_state == MF_STOPPED; }
 
 bool printingIsActive();
 bool printingIsPaused();

commit d33fe2378c25d258b02440aef6cc31e36753f98f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jan 22 15:01:19 2021 -0600

    Move common strings (#20846)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index f5bdbed535..d43d46bbd8 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -108,7 +108,4 @@ bool pin_is_protected(const pin_t pin);
   inline bool kill_state() { return READ(KILL_PIN) == KILL_PIN_STATE; }
 #endif
 
-extern const char NUL_STR[], M112_KILL_STR[], G28_STR[], M21_STR[], M23_STR[], M24_STR[],
-                  SP_A_STR[], SP_B_STR[], SP_C_STR[],
-                  SP_P_STR[], SP_T_STR[], SP_X_STR[], SP_Y_STR[], SP_Z_STR[], SP_E_STR[],
-                  X_LBL[], Y_LBL[], Z_LBL[], E_LBL[], SP_X_LBL[], SP_Y_LBL[], SP_Z_LBL[], SP_E_LBL[];
+extern const char M112_KILL_STR[];

commit c0870d417a68ff4303100f165282d41be9129a5c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jan 21 03:40:07 2021 -0600

    Move some MarlinCore and MarlinUI code (#20832)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 908636e967..f5bdbed535 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -37,11 +37,6 @@ void stop();
 void idle(TERN_(ADVANCED_PAUSE_FEATURE, bool no_stepper_sleep=false));
 inline void idle_no_sleep() { idle(TERN_(ADVANCED_PAUSE_FEATURE, true)); }
 
-#if ENABLED(EXPERIMENTAL_I2CBUS)
-  #include "feature/twibus.h"
-  extern TWIBus i2c;
-#endif
-
 #if ENABLED(G38_PROBE_TARGET)
   extern uint8_t G38_move;          // Flag to tell the ISR that G38 is in progress, and the type
   extern bool G38_did_trigger;      // Flag from the ISR to indicate the endstop changed
@@ -59,8 +54,6 @@ void disable_all_steppers();
 void kill(PGM_P const lcd_error=nullptr, PGM_P const lcd_component=nullptr, const bool steppers_off=false);
 void minkill(const bool steppers_off=false);
 
-void quickstop_stepper();
-
 // Global State of the firmware
 enum MarlinState : uint8_t {
   MF_INITIALIZING =  0,
@@ -103,7 +96,6 @@ extern bool wait_for_heatup;
 #endif
 
 bool pin_is_protected(const pin_t pin);
-void protected_pin_err();
 
 #if HAS_SUICIDE
   inline void suicide() { OUT_WRITE(SUICIDE_PIN, SUICIDE_PIN_INVERTING); }
@@ -116,11 +108,6 @@ void protected_pin_err();
   inline bool kill_state() { return READ(KILL_PIN) == KILL_PIN_STATE; }
 #endif
 
-#if ENABLED(G29_RETRY_AND_RECOVER)
-  void event_probe_recover();
-  void event_probe_failure();
-#endif
-
 extern const char NUL_STR[], M112_KILL_STR[], G28_STR[], M21_STR[], M23_STR[], M24_STR[],
                   SP_A_STR[], SP_B_STR[], SP_C_STR[],
                   SP_P_STR[], SP_T_STR[], SP_X_STR[], SP_Y_STR[], SP_Z_STR[], SP_E_STR[],

commit 4ace02f4c2b6eda750412feaa661c856fe7a8674
Author: Hebezo <Kannix2005@users.noreply.github.com>
Date:   Mon Nov 9 01:37:41 2020 +0100

    Add POWER_OFF_DELAY option (#19987)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 69afc7f30e..908636e967 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -92,11 +92,13 @@ extern bool wait_for_heatup;
   #define PSU_PIN_ON()  do{ OUT_WRITE(PS_ON_PIN,  PSU_ACTIVE_STATE); powersupply_on = true;  }while(0)
   #define PSU_PIN_OFF() do{ OUT_WRITE(PS_ON_PIN, !PSU_ACTIVE_STATE); powersupply_on = false; }while(0)
   #if ENABLED(AUTO_POWER_CONTROL)
-    #define PSU_ON()  powerManager.power_on()
-    #define PSU_OFF() powerManager.power_off()
+    #define PSU_ON()       powerManager.power_on()
+    #define PSU_OFF()      powerManager.power_off()
+    #define PSU_OFF_SOON() powerManager.power_off_soon()
   #else
-    #define PSU_ON()  PSU_PIN_ON()
-    #define PSU_OFF() PSU_PIN_OFF()
+    #define PSU_ON()     PSU_PIN_ON()
+    #define PSU_OFF()    PSU_PIN_OFF()
+    #define PSU_OFF_SOON PSU_OFF
   #endif
 #endif
 

commit 8652a7bdd2dada6b5dcdbccbbf5feb76b465083d
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Sat Aug 22 06:13:43 2020 +0200

    HIGH/LOW naming of pin state settings (#19089)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 81041c8ee6..69afc7f30e 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -89,8 +89,8 @@ extern bool wait_for_heatup;
 
 #if ENABLED(PSU_CONTROL)
   extern bool powersupply_on;
-  #define PSU_PIN_ON()  do{ OUT_WRITE(PS_ON_PIN,  PSU_ACTIVE_HIGH); powersupply_on = true; }while(0)
-  #define PSU_PIN_OFF() do{ OUT_WRITE(PS_ON_PIN, !PSU_ACTIVE_HIGH); powersupply_on = false; }while(0)
+  #define PSU_PIN_ON()  do{ OUT_WRITE(PS_ON_PIN,  PSU_ACTIVE_STATE); powersupply_on = true;  }while(0)
+  #define PSU_PIN_OFF() do{ OUT_WRITE(PS_ON_PIN, !PSU_ACTIVE_STATE); powersupply_on = false; }while(0)
   #if ENABLED(AUTO_POWER_CONTROL)
     #define PSU_ON()  powerManager.power_on()
     #define PSU_OFF() powerManager.power_off()

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 254f1567ab..81041c8ee6 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once

commit dc6d8357a681cc99e04c5980c0ac66009c173e85
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Jun 27 23:27:28 2020 -0500

    Reduce string duplication

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 18b679aca1..254f1567ab 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -120,5 +120,6 @@ void protected_pin_err();
 #endif
 
 extern const char NUL_STR[], M112_KILL_STR[], G28_STR[], M21_STR[], M23_STR[], M24_STR[],
+                  SP_A_STR[], SP_B_STR[], SP_C_STR[],
                   SP_P_STR[], SP_T_STR[], SP_X_STR[], SP_Y_STR[], SP_Z_STR[], SP_E_STR[],
                   X_LBL[], Y_LBL[], Z_LBL[], E_LBL[], SP_X_LBL[], SP_Y_LBL[], SP_Z_LBL[], SP_E_LBL[];

commit c43bbcce152b4d3b4697e1e188d3bcada76a24a7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Jul 1 16:27:28 2020 -0500

    Enforce sensor range for temperature target (#18465)
    
    * Mitigate stepper timeout
    
    * Add CHAMBER PWM code
    
    * Structured thermistor tables
    
    * Fix reversed sensor ranges
    
    * Prevent temps outside sensor range

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 1ed8974835..18b679aca1 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -87,9 +87,6 @@ extern bool wait_for_heatup;
   void wait_for_user_response(millis_t ms=0, const bool no_sleep=false);
 #endif
 
-// Inactivity shutdown timer
-extern millis_t max_inactive_time, stepper_inactive_time;
-
 #if ENABLED(PSU_CONTROL)
   extern bool powersupply_on;
   #define PSU_PIN_ON()  do{ OUT_WRITE(PS_ON_PIN,  PSU_ACTIVE_HIGH); powersupply_on = true; }while(0)

commit 852a8d6685ec1137eb65e78fa748cae41fbd36b6
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 5 03:31:03 2020 -0500

    Configurable kill pin state
    
    Co-Authored-By: AbdullahGheith <abdullahgheith@users.noreply.github.com>

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 7f6d4432db..1ed8974835 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -110,6 +110,13 @@ void protected_pin_err();
   inline void suicide() { OUT_WRITE(SUICIDE_PIN, SUICIDE_PIN_INVERTING); }
 #endif
 
+#if HAS_KILL
+  #ifndef KILL_PIN_STATE
+    #define KILL_PIN_STATE LOW
+  #endif
+  inline bool kill_state() { return READ(KILL_PIN) == KILL_PIN_STATE; }
+#endif
+
 #if ENABLED(G29_RETRY_AND_RECOVER)
   void event_probe_recover();
   void event_probe_failure();

commit 94291eb59fa7696009be8eafd5d0f8348c286ad5
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 27 22:26:31 2020 -0500

    Clean up old externs / includes

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 3f8b72b88a..7f6d4432db 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -31,11 +31,6 @@
 #include <stdio.h>
 #include <stdlib.h>
 
-#if HAS_L64XX
-  #include "libs/L64XX/L64XX_Marlin.h"
-  extern uint8_t axis_known_position;
-#endif
-
 void stop();
 
 // Pass true to keep steppers from timing out
@@ -95,10 +90,6 @@ extern bool wait_for_heatup;
 // Inactivity shutdown timer
 extern millis_t max_inactive_time, stepper_inactive_time;
 
-#if ENABLED(USE_CONTROLLER_FAN)
-  extern uint8_t controllerfan_speed;
-#endif
-
 #if ENABLED(PSU_CONTROL)
   extern bool powersupply_on;
   #define PSU_PIN_ON()  do{ OUT_WRITE(PS_ON_PIN,  PSU_ACTIVE_HIGH); powersupply_on = true; }while(0)
@@ -127,4 +118,3 @@ void protected_pin_err();
 extern const char NUL_STR[], M112_KILL_STR[], G28_STR[], M21_STR[], M23_STR[], M24_STR[],
                   SP_P_STR[], SP_T_STR[], SP_X_STR[], SP_Y_STR[], SP_Z_STR[], SP_E_STR[],
                   X_LBL[], Y_LBL[], Z_LBL[], E_LBL[], SP_X_LBL[], SP_Y_LBL[], SP_Z_LBL[], SP_E_LBL[];
-

commit 9f86dde19525af511b07239c23d93d586a045122
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Apr 2 01:22:48 2020 -0500

    Clean up UI declarations, apply TERN_

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index e6678c5b18..3f8b72b88a 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -38,19 +38,9 @@
 
 void stop();
 
-void idle(
-  #if ENABLED(ADVANCED_PAUSE_FEATURE)
-    bool no_stepper_sleep=false    // Pass true to keep steppers from timing out
-  #endif
-);
-
-inline void idle_no_sleep() {
-  idle(
-    #if ENABLED(ADVANCED_PAUSE_FEATURE)
-      true
-    #endif
-  );
-}
+// Pass true to keep steppers from timing out
+void idle(TERN_(ADVANCED_PAUSE_FEATURE, bool no_stepper_sleep=false));
+inline void idle_no_sleep() { idle(TERN_(ADVANCED_PAUSE_FEATURE, true)); }
 
 #if ENABLED(EXPERIMENTAL_I2CBUS)
   #include "feature/twibus.h"

commit 747b964295118d425ad41cd7593dae48ccf9f14f
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 28 03:18:53 2020 -0500

    Clean up user-wait, SD completion (#17315)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 3bce72ab80..e6678c5b18 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -83,6 +83,7 @@ enum MarlinState : uint8_t {
   MF_PAUSED       = _BV(1),
   MF_WAITING      = _BV(2),
   MF_STOPPED      = _BV(3),
+  MF_SD_COMPLETE  = _BV(4),
   MF_KILLED       = _BV(7)
 };
 
@@ -98,6 +99,7 @@ extern bool wait_for_heatup;
 
 #if HAS_RESUME_CONTINUE
   extern bool wait_for_user;
+  void wait_for_user_response(millis_t ms=0, const bool no_sleep=false);
 #endif
 
 // Inactivity shutdown timer

commit 095a1123c191db46040688daba4b4505d4615d6e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Mar 14 18:47:44 2020 -0500

    Add a global machine state

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 141ce7156e..3bce72ab80 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -76,9 +76,19 @@ void minkill(const bool steppers_off=false);
 
 void quickstop_stepper();
 
-extern bool Running;
-inline bool IsRunning() { return  Running; }
-inline bool IsStopped() { return !Running; }
+// Global State of the firmware
+enum MarlinState : uint8_t {
+  MF_INITIALIZING =  0,
+  MF_RUNNING      = _BV(0),
+  MF_PAUSED       = _BV(1),
+  MF_WAITING      = _BV(2),
+  MF_STOPPED      = _BV(3),
+  MF_KILLED       = _BV(7)
+};
+
+extern MarlinState marlin_state;
+inline bool IsRunning() { return marlin_state == MF_RUNNING; }
+inline bool IsStopped() { return marlin_state != MF_RUNNING; }
 
 bool printingIsActive();
 bool printingIsPaused();

commit 5e9a10dbaeaa885a670af0bd7ef3e7c068f5a7b8
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 1 07:36:25 2020 -0600

    Use PSTR for common labels

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index fd2cbeaba9..141ce7156e 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -123,4 +123,6 @@ void protected_pin_err();
 #endif
 
 extern const char NUL_STR[], M112_KILL_STR[], G28_STR[], M21_STR[], M23_STR[], M24_STR[],
-                  SP_P_STR[], SP_T_STR[], SP_X_STR[], SP_Y_STR[], SP_Z_STR[], SP_E_STR[];
+                  SP_P_STR[], SP_T_STR[], SP_X_STR[], SP_Y_STR[], SP_Z_STR[], SP_E_STR[],
+                  X_LBL[], Y_LBL[], Z_LBL[], E_LBL[], SP_X_LBL[], SP_Y_LBL[], SP_Z_LBL[], SP_E_LBL[];
+

commit 77b82d300a2afdc9b96d23ab0abb929ca0df36b4
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Feb 27 06:34:48 2020 -0600

    Add idle_no_sleep

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 5a8157bde1..fd2cbeaba9 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -40,10 +40,18 @@ void stop();
 
 void idle(
   #if ENABLED(ADVANCED_PAUSE_FEATURE)
-    bool no_stepper_sleep = false  // pass true to keep steppers from disabling on timeout
+    bool no_stepper_sleep=false    // Pass true to keep steppers from timing out
   #endif
 );
 
+inline void idle_no_sleep() {
+  idle(
+    #if ENABLED(ADVANCED_PAUSE_FEATURE)
+      true
+    #endif
+  );
+}
+
 #if ENABLED(EXPERIMENTAL_I2CBUS)
   #include "feature/twibus.h"
   extern TWIBus i2c;

commit a1f026f57ad7dbf4c50b135cf1dc0f9eacc06025
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Feb 20 20:09:37 2020 -0600

    Inline manage_inactivity, tweak autoreport_paused

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index fb57462259..5a8157bde1 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -44,8 +44,6 @@ void idle(
   #endif
 );
 
-void manage_inactivity(const bool ignore_stepper_queue=false);
-
 #if ENABLED(EXPERIMENTAL_I2CBUS)
   #include "feature/twibus.h"
   extern TWIBus i2c;
@@ -84,10 +82,6 @@ extern bool wait_for_heatup;
   extern bool wait_for_user;
 #endif
 
-#if HAS_AUTO_REPORTING || ENABLED(HOST_KEEPALIVE_FEATURE)
-  extern bool suspend_auto_report;
-#endif
-
 // Inactivity shutdown timer
 extern millis_t max_inactive_time, stepper_inactive_time;
 

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 85138268bf..fb57462259 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit 0e72c315a0be49e98758d9744ac0117b0904b7e1
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Feb 1 17:05:42 2020 -0600

    Minor string storage optimization

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index b7f1460ff8..85138268bf 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -121,4 +121,4 @@ void protected_pin_err();
 #endif
 
 extern const char NUL_STR[], M112_KILL_STR[], G28_STR[], M21_STR[], M23_STR[], M24_STR[],
-                  SP_X_STR[], SP_Y_STR[], SP_Z_STR[], SP_E_STR[];
+                  SP_P_STR[], SP_T_STR[], SP_X_STR[], SP_Y_STR[], SP_Z_STR[], SP_E_STR[];

commit 79c2f05e7d1e83817f23e09bcafa3b9f55c3acf5
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jan 19 19:00:17 2020 -0600

    Fix M112 with Emergency Parser

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index acc9a2a623..b7f1460ff8 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -120,5 +120,5 @@ void protected_pin_err();
   void event_probe_failure();
 #endif
 
-extern const char NUL_STR[], G28_STR[], M21_STR[], M23_STR[], M24_STR[],
+extern const char NUL_STR[], M112_KILL_STR[], G28_STR[], M21_STR[], M23_STR[], M24_STR[],
                   SP_X_STR[], SP_Y_STR[], SP_Z_STR[], SP_E_STR[];

commit 1bb1ce7475457301be6bc9c8488c258414349e7f
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 16 05:25:10 2020 -0600

    Move macros to stepper/indirection

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 9cc06b20c0..acc9a2a623 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -46,250 +46,6 @@ void idle(
 
 void manage_inactivity(const bool ignore_stepper_queue=false);
 
-//
-// X, Y, Z Stepper enable / disable
-//
-#if AXIS_IS_L64XX(X)
-  #define X_enable()  NOOP
-  #define X_disable() stepperX.free()
-#elif HAS_X_ENABLE
-  #define X_enable()  X_ENABLE_WRITE( X_ENABLE_ON)
-  #define X_disable() X_ENABLE_WRITE(!X_ENABLE_ON)
-#else
-  #define X_enable()  NOOP
-  #define X_disable() NOOP
-#endif
-
-#if AXIS_IS_L64XX(X2)
-  #define X2_enable()  NOOP
-  #define X2_disable() stepperX2.free()
-#elif HAS_X2_ENABLE
-  #define X2_enable()  X2_ENABLE_WRITE( X_ENABLE_ON)
-  #define X2_disable() X2_ENABLE_WRITE(!X_ENABLE_ON)
-#else
-  #define X2_enable()  NOOP
-  #define X2_disable() NOOP
-#endif
-
-#define  enable_X() do{ X_enable(); X2_enable(); }while(0)
-#define disable_X() do{ X_disable(); X2_disable(); CBI(axis_known_position, X_AXIS); }while(0)
-
-#if AXIS_IS_L64XX(Y)
-  #define Y_enable()  NOOP
-  #define Y_disable() stepperY.free()
-#elif HAS_Y_ENABLE
-  #define Y_enable()  Y_ENABLE_WRITE( Y_ENABLE_ON)
-  #define Y_disable() Y_ENABLE_WRITE(!Y_ENABLE_ON)
-#else
-  #define Y_enable()  NOOP
-  #define Y_disable() NOOP
-#endif
-
-#if AXIS_IS_L64XX(Y2)
-  #define Y2_enable()  NOOP
-  #define Y2_disable() stepperY2.free()
-#elif HAS_Y2_ENABLE
-  #define Y2_enable()  Y2_ENABLE_WRITE( Y_ENABLE_ON)
-  #define Y2_disable() Y2_ENABLE_WRITE(!Y_ENABLE_ON)
-#else
-  #define Y2_enable()  NOOP
-  #define Y2_disable() NOOP
-#endif
-
-#define  enable_Y() do{ Y_enable(); Y2_enable(); }while(0)
-#define disable_Y() do{ Y_disable(); Y2_disable(); CBI(axis_known_position, Y_AXIS); }while(0)
-
-#if AXIS_IS_L64XX(Z)
-  #define Z_enable()  NOOP
-  #define Z_disable() stepperZ.free()
-#elif HAS_Z_ENABLE
-  #define Z_enable()  Z_ENABLE_WRITE( Z_ENABLE_ON)
-  #define Z_disable() Z_ENABLE_WRITE(!Z_ENABLE_ON)
-#else
-  #define Z_enable()  NOOP
-  #define Z_disable() NOOP
-#endif
-
-#if AXIS_IS_L64XX(Z2)
-  #define Z2_enable()  NOOP
-  #define Z2_disable() stepperZ2.free()
-#elif HAS_Z2_ENABLE
-  #define Z2_enable()  Z2_ENABLE_WRITE( Z_ENABLE_ON)
-  #define Z2_disable() Z2_ENABLE_WRITE(!Z_ENABLE_ON)
-#else
-  #define Z2_enable()  NOOP
-  #define Z2_disable() NOOP
-#endif
-
-#if AXIS_IS_L64XX(Z3)
-  #define Z3_enable()  NOOP
-  #define Z3_disable() stepperZ3.free()
-#elif HAS_Z3_ENABLE
-  #define Z3_enable()  Z3_ENABLE_WRITE( Z_ENABLE_ON)
-  #define Z3_disable() Z3_ENABLE_WRITE(!Z_ENABLE_ON)
-#else
-  #define Z3_enable()  NOOP
-  #define Z3_disable() NOOP
-#endif
-
-#define  enable_Z() do{ Z_enable(); Z2_enable(); Z3_enable(); }while(0)
-#define disable_Z() do{ Z_disable(); Z2_disable(); Z3_disable(); CBI(axis_known_position, Z_AXIS); }while(0)
-
-//
-// Extruder Stepper enable / disable
-//
-
-// define the individual enables/disables
-#if AXIS_IS_L64XX(E0)
-  #define  E0_enable() NOOP
-  #define E0_disable() do{ stepperE0.free(); CBI(axis_known_position, E_AXIS); }while(0)
-#elif HAS_E0_ENABLE
-  #define  E0_enable() E0_ENABLE_WRITE( E_ENABLE_ON)
-  #define E0_disable() E0_ENABLE_WRITE(!E_ENABLE_ON)
-#else
-  #define  E0_enable() NOOP
-  #define E0_disable() NOOP
-#endif
-
-#if AXIS_IS_L64XX(E1)
-  #define  E1_enable() NOOP
-  #define E1_disable() do{ stepperE1.free(); CBI(axis_known_position, E_AXIS); }while(0)
-#elif E_STEPPERS > 1 && HAS_E1_ENABLE
-  #define  E1_enable() E1_ENABLE_WRITE( E_ENABLE_ON)
-  #define E1_disable() E1_ENABLE_WRITE(!E_ENABLE_ON)
-#else
-  #define  E1_enable() NOOP
-  #define E1_disable() NOOP
-#endif
-
-#if AXIS_IS_L64XX(E2)
-  #define  E2_enable() NOOP
-  #define E2_disable() do{ stepperE2.free(); CBI(axis_known_position, E_AXIS); }while(0)
-#elif E_STEPPERS > 2 && HAS_E2_ENABLE
-  #define  E2_enable() E2_ENABLE_WRITE( E_ENABLE_ON)
-  #define E2_disable() E2_ENABLE_WRITE(!E_ENABLE_ON)
-#else
-  #define  E2_enable() NOOP
-  #define E2_disable() NOOP
-#endif
-
-#if AXIS_IS_L64XX(E3)
-  #define  E3_enable() NOOP
-  #define E3_disable() do{ stepperE3.free(); CBI(axis_known_position, E_AXIS); }while(0)
-#elif E_STEPPERS > 3 && HAS_E3_ENABLE
-  #define  E3_enable() E3_ENABLE_WRITE( E_ENABLE_ON)
-  #define E3_disable() E3_ENABLE_WRITE(!E_ENABLE_ON)
-#else
-  #define  E3_enable() NOOP
-  #define E3_disable() NOOP
-#endif
-
-#if AXIS_IS_L64XX(E4)
-  #define  E4_enable() NOOP
-  #define E4_disable() do{ stepperE4.free(); CBI(axis_known_position, E_AXIS); }while(0)
-#elif E_STEPPERS > 4 && HAS_E4_ENABLE
-  #define  E4_enable() E4_ENABLE_WRITE( E_ENABLE_ON)
-  #define E4_disable() E4_ENABLE_WRITE(!E_ENABLE_ON)
-#else
-  #define  E4_enable() NOOP
-  #define E4_disable() NOOP
-#endif
-
-#if AXIS_IS_L64XX(E5)
-  #define  E5_enable() NOOP
-  #define E5_disable() do{ stepperE5.free(); CBI(axis_known_position, E_AXIS); }while(0)
-#elif E_STEPPERS > 5 && HAS_E5_ENABLE
-  #define  E5_enable() E5_ENABLE_WRITE( E_ENABLE_ON)
-  #define E5_disable() E5_ENABLE_WRITE(!E_ENABLE_ON)
-#else
-  #define  E5_enable() NOOP
-  #define E5_disable() NOOP
-#endif
-
-#if ENABLED(MIXING_EXTRUDER)
-
-  /**
-   * Mixing steppers synchronize their enable (and direction) together
-   */
-  #if MIXING_STEPPERS > 5
-    #define  enable_E0() { E0_enable();  E1_enable();  E2_enable();  E3_enable();  E4_enable();  E5_enable(); }
-    #define disable_E0() { E0_disable(); E1_disable(); E2_disable(); E3_disable(); E4_disable(); E5_disable(); }
-  #elif MIXING_STEPPERS > 4
-    #define  enable_E0() { E0_enable();  E1_enable();  E2_enable();  E3_enable();  E4_enable(); }
-    #define disable_E0() { E0_disable(); E1_disable(); E2_disable(); E3_disable(); E4_disable(); }
-  #elif MIXING_STEPPERS > 3
-    #define  enable_E0() { E0_enable();  E1_enable();  E2_enable();  E3_enable(); }
-    #define disable_E0() { E0_disable(); E1_disable(); E2_disable(); E3_disable(); }
-  #elif MIXING_STEPPERS > 2
-    #define  enable_E0() { E0_enable();  E1_enable();  E2_enable(); }
-    #define disable_E0() { E0_disable(); E1_disable(); E2_disable(); }
-  #else
-    #define  enable_E0() { E0_enable();  E1_enable(); }
-    #define disable_E0() { E0_disable(); E1_disable(); }
-  #endif
-  #define  enable_E1() NOOP
-  #define disable_E1() NOOP
-  #define  enable_E2() NOOP
-  #define disable_E2() NOOP
-  #define  enable_E3() NOOP
-  #define disable_E3() NOOP
-  #define  enable_E4() NOOP
-  #define disable_E4() NOOP
-  #define  enable_E5() NOOP
-  #define disable_E5() NOOP
-
-#else // !MIXING_EXTRUDER
-
-  #if (HAS_E0_ENABLE || AXIS_IS_L64XX(E0))
-    #define  enable_E0() E0_enable()
-    #define disable_E0() E0_disable()
-  #else
-    #define  enable_E0() NOOP
-    #define disable_E0() NOOP
-  #endif
-
-  #if E_STEPPERS > 1 && (HAS_E1_ENABLE || AXIS_IS_L64XX(E1))
-    #define  enable_E1() E1_enable()
-    #define disable_E1() E1_disable()
-  #else
-    #define  enable_E1() NOOP
-    #define disable_E1() NOOP
-  #endif
-
-  #if E_STEPPERS > 2 && (HAS_E2_ENABLE || AXIS_IS_L64XX(E2))
-    #define  enable_E2() E2_enable()
-    #define disable_E2() E2_disable()
-  #else
-    #define  enable_E2() NOOP
-    #define disable_E2() NOOP
-  #endif
-
-  #if E_STEPPERS > 3 && (HAS_E3_ENABLE || AXIS_IS_L64XX(E3))
-    #define  enable_E3() E3_enable()
-    #define disable_E3() E3_disable()
-  #else
-    #define  enable_E3() NOOP
-    #define disable_E3() NOOP
-  #endif
-
-  #if E_STEPPERS > 4 && (HAS_E4_ENABLE || AXIS_IS_L64XX(E4))
-    #define  enable_E4() E4_enable()
-    #define disable_E4() E4_disable()
-  #else
-    #define  enable_E4() NOOP
-    #define disable_E4() NOOP
-  #endif
-
-  #if E_STEPPERS > 5 && (HAS_E5_ENABLE || AXIS_IS_L64XX(E5))
-    #define  enable_E5() E5_enable()
-    #define disable_E5() E5_disable()
-  #else
-    #define  enable_E5() NOOP
-    #define disable_E5() NOOP
-  #endif
-
-#endif // !MIXING_EXTRUDER
-
 #if ENABLED(EXPERIMENTAL_I2CBUS)
   #include "feature/twibus.h"
   extern TWIBus i2c;

commit 1ad53cee1f4e2768310fca98de0381df9c39b617
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Mon Jan 13 18:47:30 2020 -0600

    Improved STMicro L64XX stepper driver support (#16452)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
index 8b44298a91..9cc06b20c0 100644
--- a/Marlin/src/MarlinCore.h
+++ b/Marlin/src/MarlinCore.h
@@ -31,8 +31,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 
-#if HAS_DRIVER(L6470)
-  #include "libs/L6470/L6470_Marlin.h"
+#if HAS_L64XX
+  #include "libs/L64XX/L64XX_Marlin.h"
   extern uint8_t axis_known_position;
 #endif
 
@@ -49,8 +49,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
 //
 // X, Y, Z Stepper enable / disable
 //
-#if AXIS_DRIVER_TYPE_X(L6470)
-  extern L6470 stepperX;
+#if AXIS_IS_L64XX(X)
   #define X_enable()  NOOP
   #define X_disable() stepperX.free()
 #elif HAS_X_ENABLE
@@ -61,8 +60,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
   #define X_disable() NOOP
 #endif
 
-#if AXIS_DRIVER_TYPE_X2(L6470)
-  extern L6470 stepperX2;
+#if AXIS_IS_L64XX(X2)
   #define X2_enable()  NOOP
   #define X2_disable() stepperX2.free()
 #elif HAS_X2_ENABLE
@@ -76,8 +74,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
 #define  enable_X() do{ X_enable(); X2_enable(); }while(0)
 #define disable_X() do{ X_disable(); X2_disable(); CBI(axis_known_position, X_AXIS); }while(0)
 
-#if AXIS_DRIVER_TYPE_Y(L6470)
-  extern L6470 stepperY;
+#if AXIS_IS_L64XX(Y)
   #define Y_enable()  NOOP
   #define Y_disable() stepperY.free()
 #elif HAS_Y_ENABLE
@@ -88,8 +85,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
   #define Y_disable() NOOP
 #endif
 
-#if AXIS_DRIVER_TYPE_Y2(L6470)
-  extern L6470 stepperY2;
+#if AXIS_IS_L64XX(Y2)
   #define Y2_enable()  NOOP
   #define Y2_disable() stepperY2.free()
 #elif HAS_Y2_ENABLE
@@ -103,8 +99,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
 #define  enable_Y() do{ Y_enable(); Y2_enable(); }while(0)
 #define disable_Y() do{ Y_disable(); Y2_disable(); CBI(axis_known_position, Y_AXIS); }while(0)
 
-#if AXIS_DRIVER_TYPE_Z(L6470)
-  extern L6470 stepperZ;
+#if AXIS_IS_L64XX(Z)
   #define Z_enable()  NOOP
   #define Z_disable() stepperZ.free()
 #elif HAS_Z_ENABLE
@@ -115,8 +110,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
   #define Z_disable() NOOP
 #endif
 
-#if AXIS_DRIVER_TYPE_Z2(L6470)
-  extern L6470 stepperZ2;
+#if AXIS_IS_L64XX(Z2)
   #define Z2_enable()  NOOP
   #define Z2_disable() stepperZ2.free()
 #elif HAS_Z2_ENABLE
@@ -127,8 +121,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
   #define Z2_disable() NOOP
 #endif
 
-#if AXIS_DRIVER_TYPE_Z3(L6470)
-  extern L6470 stepperZ3;
+#if AXIS_IS_L64XX(Z3)
   #define Z3_enable()  NOOP
   #define Z3_disable() stepperZ3.free()
 #elif HAS_Z3_ENABLE
@@ -147,8 +140,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
 //
 
 // define the individual enables/disables
-#if AXIS_DRIVER_TYPE_E0(L6470)
-  extern L6470 stepperE0;
+#if AXIS_IS_L64XX(E0)
   #define  E0_enable() NOOP
   #define E0_disable() do{ stepperE0.free(); CBI(axis_known_position, E_AXIS); }while(0)
 #elif HAS_E0_ENABLE
@@ -159,8 +151,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
   #define E0_disable() NOOP
 #endif
 
-#if AXIS_DRIVER_TYPE_E1(L6470)
-  extern L6470 stepperE1;
+#if AXIS_IS_L64XX(E1)
   #define  E1_enable() NOOP
   #define E1_disable() do{ stepperE1.free(); CBI(axis_known_position, E_AXIS); }while(0)
 #elif E_STEPPERS > 1 && HAS_E1_ENABLE
@@ -171,8 +162,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
   #define E1_disable() NOOP
 #endif
 
-#if AXIS_DRIVER_TYPE_E2(L6470)
-  extern L6470 stepperE2;
+#if AXIS_IS_L64XX(E2)
   #define  E2_enable() NOOP
   #define E2_disable() do{ stepperE2.free(); CBI(axis_known_position, E_AXIS); }while(0)
 #elif E_STEPPERS > 2 && HAS_E2_ENABLE
@@ -183,8 +173,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
   #define E2_disable() NOOP
 #endif
 
-#if AXIS_DRIVER_TYPE_E3(L6470)
-  extern L6470 stepperE3;
+#if AXIS_IS_L64XX(E3)
   #define  E3_enable() NOOP
   #define E3_disable() do{ stepperE3.free(); CBI(axis_known_position, E_AXIS); }while(0)
 #elif E_STEPPERS > 3 && HAS_E3_ENABLE
@@ -195,8 +184,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
   #define E3_disable() NOOP
 #endif
 
-#if AXIS_DRIVER_TYPE_E4(L6470)
-  extern L6470 stepperE4;
+#if AXIS_IS_L64XX(E4)
   #define  E4_enable() NOOP
   #define E4_disable() do{ stepperE4.free(); CBI(axis_known_position, E_AXIS); }while(0)
 #elif E_STEPPERS > 4 && HAS_E4_ENABLE
@@ -207,8 +195,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
   #define E4_disable() NOOP
 #endif
 
-#if AXIS_DRIVER_TYPE_E5(L6470)
-  extern L6470 stepperE5;
+#if AXIS_IS_L64XX(E5)
   #define  E5_enable() NOOP
   #define E5_disable() do{ stepperE5.free(); CBI(axis_known_position, E_AXIS); }while(0)
 #elif E_STEPPERS > 5 && HAS_E5_ENABLE
@@ -253,7 +240,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
 
 #else // !MIXING_EXTRUDER
 
-  #if HAS_E0_ENABLE
+  #if (HAS_E0_ENABLE || AXIS_IS_L64XX(E0))
     #define  enable_E0() E0_enable()
     #define disable_E0() E0_disable()
   #else
@@ -261,7 +248,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
     #define disable_E0() NOOP
   #endif
 
-  #if E_STEPPERS > 1 && HAS_E1_ENABLE
+  #if E_STEPPERS > 1 && (HAS_E1_ENABLE || AXIS_IS_L64XX(E1))
     #define  enable_E1() E1_enable()
     #define disable_E1() E1_disable()
   #else
@@ -269,7 +256,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
     #define disable_E1() NOOP
   #endif
 
-  #if E_STEPPERS > 2 && HAS_E2_ENABLE
+  #if E_STEPPERS > 2 && (HAS_E2_ENABLE || AXIS_IS_L64XX(E2))
     #define  enable_E2() E2_enable()
     #define disable_E2() E2_disable()
   #else
@@ -277,7 +264,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
     #define disable_E2() NOOP
   #endif
 
-  #if E_STEPPERS > 3 && HAS_E3_ENABLE
+  #if E_STEPPERS > 3 && (HAS_E3_ENABLE || AXIS_IS_L64XX(E3))
     #define  enable_E3() E3_enable()
     #define disable_E3() E3_disable()
   #else
@@ -285,7 +272,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
     #define disable_E3() NOOP
   #endif
 
-  #if E_STEPPERS > 4 && HAS_E4_ENABLE
+  #if E_STEPPERS > 4 && (HAS_E4_ENABLE || AXIS_IS_L64XX(E4))
     #define  enable_E4() E4_enable()
     #define disable_E4() E4_disable()
   #else
@@ -293,7 +280,7 @@ void manage_inactivity(const bool ignore_stepper_queue=false);
     #define disable_E4() NOOP
   #endif
 
-  #if E_STEPPERS > 5 && HAS_E5_ENABLE
+  #if E_STEPPERS > 5 && (HAS_E5_ENABLE || AXIS_IS_L64XX(E5))
     #define  enable_E5() E5_enable()
     #define disable_E5() E5_disable()
   #else

commit d0e1166cce60381fbdad1105d13765806a525d99
Author: Dirk O. Kaar <19971886+dok-net@users.noreply.github.com>
Date:   Fri Jan 3 02:01:38 2020 +0100

    Fix Visual Micro "Arduino IDE for Visual Studio" support (#16418)

diff --git a/Marlin/src/MarlinCore.h b/Marlin/src/MarlinCore.h
new file mode 100644
index 0000000000..8b44298a91
--- /dev/null
+++ b/Marlin/src/MarlinCore.h
@@ -0,0 +1,381 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+#include "inc/MarlinConfig.h"
+
+#ifdef DEBUG_GCODE_PARSER
+  #include "gcode/parser.h"
+#endif
+
+#include <math.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#if HAS_DRIVER(L6470)
+  #include "libs/L6470/L6470_Marlin.h"
+  extern uint8_t axis_known_position;
+#endif
+
+void stop();
+
+void idle(
+  #if ENABLED(ADVANCED_PAUSE_FEATURE)
+    bool no_stepper_sleep = false  // pass true to keep steppers from disabling on timeout
+  #endif
+);
+
+void manage_inactivity(const bool ignore_stepper_queue=false);
+
+//
+// X, Y, Z Stepper enable / disable
+//
+#if AXIS_DRIVER_TYPE_X(L6470)
+  extern L6470 stepperX;
+  #define X_enable()  NOOP
+  #define X_disable() stepperX.free()
+#elif HAS_X_ENABLE
+  #define X_enable()  X_ENABLE_WRITE( X_ENABLE_ON)
+  #define X_disable() X_ENABLE_WRITE(!X_ENABLE_ON)
+#else
+  #define X_enable()  NOOP
+  #define X_disable() NOOP
+#endif
+
+#if AXIS_DRIVER_TYPE_X2(L6470)
+  extern L6470 stepperX2;
+  #define X2_enable()  NOOP
+  #define X2_disable() stepperX2.free()
+#elif HAS_X2_ENABLE
+  #define X2_enable()  X2_ENABLE_WRITE( X_ENABLE_ON)
+  #define X2_disable() X2_ENABLE_WRITE(!X_ENABLE_ON)
+#else
+  #define X2_enable()  NOOP
+  #define X2_disable() NOOP
+#endif
+
+#define  enable_X() do{ X_enable(); X2_enable(); }while(0)
+#define disable_X() do{ X_disable(); X2_disable(); CBI(axis_known_position, X_AXIS); }while(0)
+
+#if AXIS_DRIVER_TYPE_Y(L6470)
+  extern L6470 stepperY;
+  #define Y_enable()  NOOP
+  #define Y_disable() stepperY.free()
+#elif HAS_Y_ENABLE
+  #define Y_enable()  Y_ENABLE_WRITE( Y_ENABLE_ON)
+  #define Y_disable() Y_ENABLE_WRITE(!Y_ENABLE_ON)
+#else
+  #define Y_enable()  NOOP
+  #define Y_disable() NOOP
+#endif
+
+#if AXIS_DRIVER_TYPE_Y2(L6470)
+  extern L6470 stepperY2;
+  #define Y2_enable()  NOOP
+  #define Y2_disable() stepperY2.free()
+#elif HAS_Y2_ENABLE
+  #define Y2_enable()  Y2_ENABLE_WRITE( Y_ENABLE_ON)
+  #define Y2_disable() Y2_ENABLE_WRITE(!Y_ENABLE_ON)
+#else
+  #define Y2_enable()  NOOP
+  #define Y2_disable() NOOP
+#endif
+
+#define  enable_Y() do{ Y_enable(); Y2_enable(); }while(0)
+#define disable_Y() do{ Y_disable(); Y2_disable(); CBI(axis_known_position, Y_AXIS); }while(0)
+
+#if AXIS_DRIVER_TYPE_Z(L6470)
+  extern L6470 stepperZ;
+  #define Z_enable()  NOOP
+  #define Z_disable() stepperZ.free()
+#elif HAS_Z_ENABLE
+  #define Z_enable()  Z_ENABLE_WRITE( Z_ENABLE_ON)
+  #define Z_disable() Z_ENABLE_WRITE(!Z_ENABLE_ON)
+#else
+  #define Z_enable()  NOOP
+  #define Z_disable() NOOP
+#endif
+
+#if AXIS_DRIVER_TYPE_Z2(L6470)
+  extern L6470 stepperZ2;
+  #define Z2_enable()  NOOP
+  #define Z2_disable() stepperZ2.free()
+#elif HAS_Z2_ENABLE
+  #define Z2_enable()  Z2_ENABLE_WRITE( Z_ENABLE_ON)
+  #define Z2_disable() Z2_ENABLE_WRITE(!Z_ENABLE_ON)
+#else
+  #define Z2_enable()  NOOP
+  #define Z2_disable() NOOP
+#endif
+
+#if AXIS_DRIVER_TYPE_Z3(L6470)
+  extern L6470 stepperZ3;
+  #define Z3_enable()  NOOP
+  #define Z3_disable() stepperZ3.free()
+#elif HAS_Z3_ENABLE
+  #define Z3_enable()  Z3_ENABLE_WRITE( Z_ENABLE_ON)
+  #define Z3_disable() Z3_ENABLE_WRITE(!Z_ENABLE_ON)
+#else
+  #define Z3_enable()  NOOP
+  #define Z3_disable() NOOP
+#endif
+
+#define  enable_Z() do{ Z_enable(); Z2_enable(); Z3_enable(); }while(0)
+#define disable_Z() do{ Z_disable(); Z2_disable(); Z3_disable(); CBI(axis_known_position, Z_AXIS); }while(0)
+
+//
+// Extruder Stepper enable / disable
+//
+
+// define the individual enables/disables
+#if AXIS_DRIVER_TYPE_E0(L6470)
+  extern L6470 stepperE0;
+  #define  E0_enable() NOOP
+  #define E0_disable() do{ stepperE0.free(); CBI(axis_known_position, E_AXIS); }while(0)
+#elif HAS_E0_ENABLE
+  #define  E0_enable() E0_ENABLE_WRITE( E_ENABLE_ON)
+  #define E0_disable() E0_ENABLE_WRITE(!E_ENABLE_ON)
+#else
+  #define  E0_enable() NOOP
+  #define E0_disable() NOOP
+#endif
+
+#if AXIS_DRIVER_TYPE_E1(L6470)
+  extern L6470 stepperE1;
+  #define  E1_enable() NOOP
+  #define E1_disable() do{ stepperE1.free(); CBI(axis_known_position, E_AXIS); }while(0)
+#elif E_STEPPERS > 1 && HAS_E1_ENABLE
+  #define  E1_enable() E1_ENABLE_WRITE( E_ENABLE_ON)
+  #define E1_disable() E1_ENABLE_WRITE(!E_ENABLE_ON)
+#else
+  #define  E1_enable() NOOP
+  #define E1_disable() NOOP
+#endif
+
+#if AXIS_DRIVER_TYPE_E2(L6470)
+  extern L6470 stepperE2;
+  #define  E2_enable() NOOP
+  #define E2_disable() do{ stepperE2.free(); CBI(axis_known_position, E_AXIS); }while(0)
+#elif E_STEPPERS > 2 && HAS_E2_ENABLE
+  #define  E2_enable() E2_ENABLE_WRITE( E_ENABLE_ON)
+  #define E2_disable() E2_ENABLE_WRITE(!E_ENABLE_ON)
+#else
+  #define  E2_enable() NOOP
+  #define E2_disable() NOOP
+#endif
+
+#if AXIS_DRIVER_TYPE_E3(L6470)
+  extern L6470 stepperE3;
+  #define  E3_enable() NOOP
+  #define E3_disable() do{ stepperE3.free(); CBI(axis_known_position, E_AXIS); }while(0)
+#elif E_STEPPERS > 3 && HAS_E3_ENABLE
+  #define  E3_enable() E3_ENABLE_WRITE( E_ENABLE_ON)
+  #define E3_disable() E3_ENABLE_WRITE(!E_ENABLE_ON)
+#else
+  #define  E3_enable() NOOP
+  #define E3_disable() NOOP
+#endif
+
+#if AXIS_DRIVER_TYPE_E4(L6470)
+  extern L6470 stepperE4;
+  #define  E4_enable() NOOP
+  #define E4_disable() do{ stepperE4.free(); CBI(axis_known_position, E_AXIS); }while(0)
+#elif E_STEPPERS > 4 && HAS_E4_ENABLE
+  #define  E4_enable() E4_ENABLE_WRITE( E_ENABLE_ON)
+  #define E4_disable() E4_ENABLE_WRITE(!E_ENABLE_ON)
+#else
+  #define  E4_enable() NOOP
+  #define E4_disable() NOOP
+#endif
+
+#if AXIS_DRIVER_TYPE_E5(L6470)
+  extern L6470 stepperE5;
+  #define  E5_enable() NOOP
+  #define E5_disable() do{ stepperE5.free(); CBI(axis_known_position, E_AXIS); }while(0)
+#elif E_STEPPERS > 5 && HAS_E5_ENABLE
+  #define  E5_enable() E5_ENABLE_WRITE( E_ENABLE_ON)
+  #define E5_disable() E5_ENABLE_WRITE(!E_ENABLE_ON)
+#else
+  #define  E5_enable() NOOP
+  #define E5_disable() NOOP
+#endif
+
+#if ENABLED(MIXING_EXTRUDER)
+
+  /**
+   * Mixing steppers synchronize their enable (and direction) together
+   */
+  #if MIXING_STEPPERS > 5
+    #define  enable_E0() { E0_enable();  E1_enable();  E2_enable();  E3_enable();  E4_enable();  E5_enable(); }
+    #define disable_E0() { E0_disable(); E1_disable(); E2_disable(); E3_disable(); E4_disable(); E5_disable(); }
+  #elif MIXING_STEPPERS > 4
+    #define  enable_E0() { E0_enable();  E1_enable();  E2_enable();  E3_enable();  E4_enable(); }
+    #define disable_E0() { E0_disable(); E1_disable(); E2_disable(); E3_disable(); E4_disable(); }
+  #elif MIXING_STEPPERS > 3
+    #define  enable_E0() { E0_enable();  E1_enable();  E2_enable();  E3_enable(); }
+    #define disable_E0() { E0_disable(); E1_disable(); E2_disable(); E3_disable(); }
+  #elif MIXING_STEPPERS > 2
+    #define  enable_E0() { E0_enable();  E1_enable();  E2_enable(); }
+    #define disable_E0() { E0_disable(); E1_disable(); E2_disable(); }
+  #else
+    #define  enable_E0() { E0_enable();  E1_enable(); }
+    #define disable_E0() { E0_disable(); E1_disable(); }
+  #endif
+  #define  enable_E1() NOOP
+  #define disable_E1() NOOP
+  #define  enable_E2() NOOP
+  #define disable_E2() NOOP
+  #define  enable_E3() NOOP
+  #define disable_E3() NOOP
+  #define  enable_E4() NOOP
+  #define disable_E4() NOOP
+  #define  enable_E5() NOOP
+  #define disable_E5() NOOP
+
+#else // !MIXING_EXTRUDER
+
+  #if HAS_E0_ENABLE
+    #define  enable_E0() E0_enable()
+    #define disable_E0() E0_disable()
+  #else
+    #define  enable_E0() NOOP
+    #define disable_E0() NOOP
+  #endif
+
+  #if E_STEPPERS > 1 && HAS_E1_ENABLE
+    #define  enable_E1() E1_enable()
+    #define disable_E1() E1_disable()
+  #else
+    #define  enable_E1() NOOP
+    #define disable_E1() NOOP
+  #endif
+
+  #if E_STEPPERS > 2 && HAS_E2_ENABLE
+    #define  enable_E2() E2_enable()
+    #define disable_E2() E2_disable()
+  #else
+    #define  enable_E2() NOOP
+    #define disable_E2() NOOP
+  #endif
+
+  #if E_STEPPERS > 3 && HAS_E3_ENABLE
+    #define  enable_E3() E3_enable()
+    #define disable_E3() E3_disable()
+  #else
+    #define  enable_E3() NOOP
+    #define disable_E3() NOOP
+  #endif
+
+  #if E_STEPPERS > 4 && HAS_E4_ENABLE
+    #define  enable_E4() E4_enable()
+    #define disable_E4() E4_disable()
+  #else
+    #define  enable_E4() NOOP
+    #define disable_E4() NOOP
+  #endif
+
+  #if E_STEPPERS > 5 && HAS_E5_ENABLE
+    #define  enable_E5() E5_enable()
+    #define disable_E5() E5_disable()
+  #else
+    #define  enable_E5() NOOP
+    #define disable_E5() NOOP
+  #endif
+
+#endif // !MIXING_EXTRUDER
+
+#if ENABLED(EXPERIMENTAL_I2CBUS)
+  #include "feature/twibus.h"
+  extern TWIBus i2c;
+#endif
+
+#if ENABLED(G38_PROBE_TARGET)
+  extern uint8_t G38_move;          // Flag to tell the ISR that G38 is in progress, and the type
+  extern bool G38_did_trigger;      // Flag from the ISR to indicate the endstop changed
+#endif
+
+/**
+ * The axis order in all axis related arrays is X, Y, Z, E
+ */
+void enable_e_steppers();
+void enable_all_steppers();
+void disable_e_stepper(const uint8_t e);
+void disable_e_steppers();
+void disable_all_steppers();
+
+void kill(PGM_P const lcd_error=nullptr, PGM_P const lcd_component=nullptr, const bool steppers_off=false);
+void minkill(const bool steppers_off=false);
+
+void quickstop_stepper();
+
+extern bool Running;
+inline bool IsRunning() { return  Running; }
+inline bool IsStopped() { return !Running; }
+
+bool printingIsActive();
+bool printingIsPaused();
+void startOrResumeJob();
+
+extern bool wait_for_heatup;
+
+#if HAS_RESUME_CONTINUE
+  extern bool wait_for_user;
+#endif
+
+#if HAS_AUTO_REPORTING || ENABLED(HOST_KEEPALIVE_FEATURE)
+  extern bool suspend_auto_report;
+#endif
+
+// Inactivity shutdown timer
+extern millis_t max_inactive_time, stepper_inactive_time;
+
+#if ENABLED(USE_CONTROLLER_FAN)
+  extern uint8_t controllerfan_speed;
+#endif
+
+#if ENABLED(PSU_CONTROL)
+  extern bool powersupply_on;
+  #define PSU_PIN_ON()  do{ OUT_WRITE(PS_ON_PIN,  PSU_ACTIVE_HIGH); powersupply_on = true; }while(0)
+  #define PSU_PIN_OFF() do{ OUT_WRITE(PS_ON_PIN, !PSU_ACTIVE_HIGH); powersupply_on = false; }while(0)
+  #if ENABLED(AUTO_POWER_CONTROL)
+    #define PSU_ON()  powerManager.power_on()
+    #define PSU_OFF() powerManager.power_off()
+  #else
+    #define PSU_ON()  PSU_PIN_ON()
+    #define PSU_OFF() PSU_PIN_OFF()
+  #endif
+#endif
+
+bool pin_is_protected(const pin_t pin);
+void protected_pin_err();
+
+#if HAS_SUICIDE
+  inline void suicide() { OUT_WRITE(SUICIDE_PIN, SUICIDE_PIN_INVERTING); }
+#endif
+
+#if ENABLED(G29_RETRY_AND_RECOVER)
+  void event_probe_recover();
+  void event_probe_failure();
+#endif
+
+extern const char NUL_STR[], G28_STR[], M21_STR[], M23_STR[], M24_STR[],
+                  SP_X_STR[], SP_Y_STR[], SP_Z_STR[], SP_E_STR[];
