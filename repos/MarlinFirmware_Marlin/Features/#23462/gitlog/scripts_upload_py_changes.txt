commit 959be66cc22611bbaa8eabafaec308dbcbf3b03d
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Fri Jun 14 17:01:34 2024 -0400

    üî® Build scripts cleanup (#27157)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index ae7f7e6261..a20c2701fe 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -1,18 +1,13 @@
-import argparse
-import sys
-import os
-import time
-import random
-import serial
-
-Import("env")
+import argparse, sys, os, time, random, serial
+from SCons.Script import DefaultEnvironment
+env = DefaultEnvironment()
 
 import MarlinBinaryProtocol
 
 #-----------------#
 # Upload Callback #
 #-----------------#
 def Upload(source, target, env):
 
     #-------#
     # Debug #

commit 0b9f487ab9ce5a91238d3135f84e0ddbca861c6a
Author: Jordan Stocker <Pvthaggard@gmail.com>
Date:   Thu Mar 28 06:14:03 2024 +1030

    üî® Fix binary upload firmware path (#26909)

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index 9fb927c426..ae7f7e6261 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -150,28 +150,28 @@ def Upload(source, target, env):
     marlin_board_info_name = _GetMarlinEnv(MarlinEnv, 'BOARD_INFO_NAME')
     marlin_board_custom_build_flags = _GetMarlinEnv(MarlinEnv, 'BOARD_CUSTOM_BUILD_FLAGS')
     marlin_firmware_bin = _GetMarlinEnv(MarlinEnv, 'FIRMWARE_BIN')
     marlin_long_filename_host_support = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_HOST_SUPPORT') is not None
     marlin_longname_write = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_WRITE_SUPPORT') is not None
     marlin_custom_firmware_upload = _GetMarlinEnv(MarlinEnv, 'CUSTOM_FIRMWARE_UPLOAD') is not None
     marlin_short_build_version = _GetMarlinEnv(MarlinEnv, 'SHORT_BUILD_VERSION')
     marlin_string_config_h_author = _GetMarlinEnv(MarlinEnv, 'STRING_CONFIG_H_AUTHOR')
 
     # Get firmware upload params
-    upload_firmware_source_name = env['PROGNAME'] + '.bin' if 'PROGNAME' in env else str(source[0])
+    upload_firmware_source_path = os.path.join(env["PROJECT_BUILD_DIR"], env["PIOENV"], f"{env['PROGNAME']}.bin") if 'PROGNAME' in env else str(source[0])
                                                     # Source firmware filename
     upload_speed = env['UPLOAD_SPEED'] if 'UPLOAD_SPEED' in env else 115200
                                                     # baud rate of serial connection
     upload_port = _GetUploadPort(env)               # Serial port to use
 
     # Set local upload params
-    upload_firmware_target_name = os.path.basename(upload_firmware_source_name)
+    upload_firmware_target_name = os.path.basename(upload_firmware_source_path)
                                                     # Target firmware filename
     upload_timeout = 1000                           # Communication timout, lossy/slow connections need higher values
     upload_blocksize = 512                          # Transfer block size. 512 = Autodetect
     upload_compression = True                       # Enable compression
     upload_error_ratio = 0                          # Simulated corruption ratio
     upload_test = False                             # Benchmark the serial link without storing the file
     upload_reset = True                             # Trigger a soft reset for firmware update after the upload
 
     # Set local upload params based on board type to change script behavior
     # "upload_delete_old_bins": delete all *.bin files in the root of SD Card
@@ -209,21 +209,21 @@ def Upload(source, target, env):
             print(f' SHORT_BUILD_VERSION         : {marlin_short_build_version}')
             print(f' STRING_CONFIG_H_AUTHOR      : {marlin_string_config_h_author}')
             print(f' MOTHERBOARD                 : {marlin_motherboard}')
             print(f' BOARD_INFO_NAME             : {marlin_board_info_name}')
             print(f' CUSTOM_BUILD_FLAGS          : {marlin_board_custom_build_flags}')
             print(f' FIRMWARE_BIN                : {marlin_firmware_bin}')
             print(f' LONG_FILENAME_HOST_SUPPORT  : {marlin_long_filename_host_support}')
             print(f' LONG_FILENAME_WRITE_SUPPORT : {marlin_longname_write}')
             print(f' CUSTOM_FIRMWARE_UPLOAD      : {marlin_custom_firmware_upload}')
             print('---- Upload parameters ------------------------')
-            print(f' Source                      : {upload_firmware_source_name}')
+            print(f' Source                      : {upload_firmware_source_path}')
             print(f' Target                      : {upload_firmware_target_name}')
             print(f' Port                        : {upload_port} @ {upload_speed} baudrate')
             print(f' Timeout                     : {upload_timeout}')
             print(f' Block size                  : {upload_blocksize}')
             print(f' Compression                 : {upload_compression}')
             print(f' Error ratio                 : {upload_error_ratio}')
             print(f' Test                        : {upload_test}')
             print(f' Reset                       : {upload_reset}')
             print('-----------------------------------------------')
 
@@ -264,28 +264,28 @@ def Upload(source, target, env):
 
             # Close serial
             _ClosePort()
 
             # Cleanup completed
             debugPrint('Cleanup completed')
 
         # WARNING! The serial port must be closed here because the serial transfer that follow needs it!
 
         # Upload firmware file
-        debugPrint(f"Copy '{upload_firmware_source_name}' --> '{upload_firmware_target_name}'")
+        debugPrint(f"Copy '{upload_firmware_source_path}' --> '{upload_firmware_target_name}'")
         protocol = MarlinBinaryProtocol.Protocol(upload_port, upload_speed, upload_blocksize, float(upload_error_ratio), int(upload_timeout))
         #echologger = MarlinBinaryProtocol.EchoProtocol(protocol)
         protocol.connect()
         # Mark the rollback (delete broken transfer) from this point on
         rollback = True
         filetransfer = MarlinBinaryProtocol.FileTransferProtocol(protocol)
-        transferOK = filetransfer.copy(upload_firmware_source_name, upload_firmware_target_name, upload_compression, upload_test)
+        transferOK = filetransfer.copy(upload_firmware_source_path, upload_firmware_target_name, upload_compression, upload_test)
         protocol.disconnect()
 
         # Notify upload completed
         protocol.send_ascii('M117 Firmware uploaded' if transferOK else 'M117 Firmware upload failed')
 
         # Remount SD card
         print('Wait for SD card release...')
         time.sleep(1)
         print('Remount SD card')
         protocol.send_ascii('M21')

commit dba613fadde7671858cc11a80b500601d648b177
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 5 12:29:05 2023 -0600

    üî® Fix test of env['PROGNAME']
    
    Fixes #26386

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index ee48af6fc6..9fb927c426 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -150,21 +150,21 @@ def Upload(source, target, env):
     marlin_board_info_name = _GetMarlinEnv(MarlinEnv, 'BOARD_INFO_NAME')
     marlin_board_custom_build_flags = _GetMarlinEnv(MarlinEnv, 'BOARD_CUSTOM_BUILD_FLAGS')
     marlin_firmware_bin = _GetMarlinEnv(MarlinEnv, 'FIRMWARE_BIN')
     marlin_long_filename_host_support = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_HOST_SUPPORT') is not None
     marlin_longname_write = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_WRITE_SUPPORT') is not None
     marlin_custom_firmware_upload = _GetMarlinEnv(MarlinEnv, 'CUSTOM_FIRMWARE_UPLOAD') is not None
     marlin_short_build_version = _GetMarlinEnv(MarlinEnv, 'SHORT_BUILD_VERSION')
     marlin_string_config_h_author = _GetMarlinEnv(MarlinEnv, 'STRING_CONFIG_H_AUTHOR')
 
     # Get firmware upload params
-    upload_firmware_source_name = env['PROGNAME'] + '.bin' if env['PROGNAME'] else str(source[0])
+    upload_firmware_source_name = env['PROGNAME'] + '.bin' if 'PROGNAME' in env else str(source[0])
                                                     # Source firmware filename
     upload_speed = env['UPLOAD_SPEED'] if 'UPLOAD_SPEED' in env else 115200
                                                     # baud rate of serial connection
     upload_port = _GetUploadPort(env)               # Serial port to use
 
     # Set local upload params
     upload_firmware_target_name = os.path.basename(upload_firmware_source_name)
                                                     # Target firmware filename
     upload_timeout = 1000                           # Communication timout, lossy/slow connections need higher values
     upload_blocksize = 512                          # Transfer block size. 512 = Autodetect

commit f7d5188b2f0a59b752fbabf6b96ff1ed4aed8112
Author: GHGiampy <83699429+GHGiampy@users.noreply.github.com>
Date:   Sat Aug 19 22:53:45 2023 +0200

    üêõ Fixes for ProUI, build rename (#26177)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index c97605e3f4..ee48af6fc6 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -150,21 +150,22 @@ def Upload(source, target, env):
     marlin_board_info_name = _GetMarlinEnv(MarlinEnv, 'BOARD_INFO_NAME')
     marlin_board_custom_build_flags = _GetMarlinEnv(MarlinEnv, 'BOARD_CUSTOM_BUILD_FLAGS')
     marlin_firmware_bin = _GetMarlinEnv(MarlinEnv, 'FIRMWARE_BIN')
     marlin_long_filename_host_support = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_HOST_SUPPORT') is not None
     marlin_longname_write = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_WRITE_SUPPORT') is not None
     marlin_custom_firmware_upload = _GetMarlinEnv(MarlinEnv, 'CUSTOM_FIRMWARE_UPLOAD') is not None
     marlin_short_build_version = _GetMarlinEnv(MarlinEnv, 'SHORT_BUILD_VERSION')
     marlin_string_config_h_author = _GetMarlinEnv(MarlinEnv, 'STRING_CONFIG_H_AUTHOR')
 
     # Get firmware upload params
-    upload_firmware_source_name = str(source[0])    # Source firmware filename
+    upload_firmware_source_name = env['PROGNAME'] + '.bin' if env['PROGNAME'] else str(source[0])
+                                                    # Source firmware filename
     upload_speed = env['UPLOAD_SPEED'] if 'UPLOAD_SPEED' in env else 115200
                                                     # baud rate of serial connection
     upload_port = _GetUploadPort(env)               # Serial port to use
 
     # Set local upload params
     upload_firmware_target_name = os.path.basename(upload_firmware_source_name)
                                                     # Target firmware filename
     upload_timeout = 1000                           # Communication timout, lossy/slow connections need higher values
     upload_blocksize = 512                          # Transfer block size. 512 = Autodetect
     upload_compression = True                       # Enable compression

commit 47616c7dfa7f3f7fddd8fa8d207929d65d2291a6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon May 29 19:00:09 2023 -0500

    üî® Install 'heatshrink' if needed (#25896)

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index af15a82590..c97605e3f4 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -1,30 +1,19 @@
 import argparse
 import sys
 import os
 import time
 import random
 import serial
 
 Import("env")
 
-# Needed (only) for compression, but there are problems with pip install heatshrink
-#try:
-#    import heatshrink
-#except ImportError:
-#    # Install heatshrink
-#    print("Installing 'heatshrink' python module...")
-#    env.Execute(env.subst("$PYTHONEXE -m pip install heatshrink"))
-#
-# Not tested: If it's safe to install python libraries in PIO python try:
-#    env.Execute(env.subst("$PYTHONEXE -m pip install https://github.com/p3p/pyheatshrink/releases/download/0.3.3/pyheatshrink-pip.zip"))
-
 import MarlinBinaryProtocol
 
 #-----------------#
 # Upload Callback #
 #-----------------#
 def Upload(source, target, env):
 
     #-------#
     # Debug #
     #-------#
@@ -184,20 +173,35 @@ def Upload(source, target, env):
     upload_reset = True                             # Trigger a soft reset for firmware update after the upload
 
     # Set local upload params based on board type to change script behavior
     # "upload_delete_old_bins": delete all *.bin files in the root of SD Card
     upload_delete_old_bins = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
                                                     'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
                                                     'BOARD_CREALITY_V24S1']
     # "upload_random_name": generate a random 8.3 firmware filename to upload
     upload_random_filename = upload_delete_old_bins and not marlin_long_filename_host_support
 
+    # Heatshrink module is needed (only) for compression
+    if upload_compression:
+        if sys.version_info[0] > 2:
+            try:
+               import heatshrink2
+            except ImportError:
+               print("Installing 'heatshrink2' python module...")
+               env.Execute(env.subst("$PYTHONEXE -m pip install heatshrink2"))
+        else:
+            try:
+               import heatshrink
+            except ImportError:
+               print("Installing 'heatshrink' python module...")
+               env.Execute(env.subst("$PYTHONEXE -m pip install heatshrink"))
+
     try:
 
         # Start upload job
         print(f"Uploading firmware '{os.path.basename(upload_firmware_target_name)}' to '{marlin_motherboard}' via '{upload_port}'")
 
         # Dump some debug info
         if Debug:
             print('Upload using:')
             print('---- Marlin -----------------------------------')
             print(f' PIOENV                      : {marlin_pioenv}')

commit b6794f6a7e076d3276a3589dbcd4ebc3eea1a44e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Dec 1 23:39:17 2022 -0600

    üé® Misc. cleanup

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index caa1fbae23..af15a82590 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -182,23 +182,21 @@ def Upload(source, target, env):
     upload_error_ratio = 0                          # Simulated corruption ratio
     upload_test = False                             # Benchmark the serial link without storing the file
     upload_reset = True                             # Trigger a soft reset for firmware update after the upload
 
     # Set local upload params based on board type to change script behavior
     # "upload_delete_old_bins": delete all *.bin files in the root of SD Card
     upload_delete_old_bins = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
                                                     'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
                                                     'BOARD_CREALITY_V24S1']
     # "upload_random_name": generate a random 8.3 firmware filename to upload
-    upload_random_filename = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
-                                                    'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
-                                                    'BOARD_CREALITY_V24S1'] and not marlin_long_filename_host_support
+    upload_random_filename = upload_delete_old_bins and not marlin_long_filename_host_support
 
     try:
 
         # Start upload job
         print(f"Uploading firmware '{os.path.basename(upload_firmware_target_name)}' to '{marlin_motherboard}' via '{upload_port}'")
 
         # Dump some debug info
         if Debug:
             print('Upload using:')
             print('---- Marlin -----------------------------------')

commit 93139e757ca91e1b5c7eb89d491514bbff65116c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed Oct 12 17:52:56 2022 -0500

    üßë‚Äçüíª Use spaces indent for Python

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index ef042fcded..caa1fbae23 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -18,327 +18,327 @@ Import("env")
 # Not tested: If it's safe to install python libraries in PIO python try:
 #    env.Execute(env.subst("$PYTHONEXE -m pip install https://github.com/p3p/pyheatshrink/releases/download/0.3.3/pyheatshrink-pip.zip"))
 
 import MarlinBinaryProtocol
 
 #-----------------#
 # Upload Callback #
 #-----------------#
 def Upload(source, target, env):
 
-	#-------#
-	# Debug #
-	#-------#
-	Debug = False                # Set to True to enable script debug
-	def debugPrint(data):
-		if Debug: print(f"[Debug]: {data}")
-
-	#------------------#
-	# Marlin functions #
-	#------------------#
-	def _GetMarlinEnv(marlinEnv, feature):
-		if not marlinEnv: return None
-		return marlinEnv[feature] if feature in marlinEnv else None
-
-	#----------------#
-	# Port functions #
-	#----------------#
-	def _GetUploadPort(env):
-		debugPrint('Autodetecting upload port...')
-		env.AutodetectUploadPort(env)
-		portName = env.subst('$UPLOAD_PORT')
-		if not portName:
-			raise Exception('Error detecting the upload port.')
-		debugPrint('OK')
-		return portName
-
-	#-------------------------#
-	# Simple serial functions #
-	#-------------------------#
-	def _OpenPort():
-		# Open serial port
-		if port.is_open: return
-		debugPrint('Opening upload port...')
-		port.open()
-		port.reset_input_buffer()
-		debugPrint('OK')
-
-	def _ClosePort():
-		# Open serial port
-		if port is None: return
-		if not port.is_open: return
-		debugPrint('Closing upload port...')
-		port.close()
-		debugPrint('OK')
-
-	def _Send(data):
-		debugPrint(f'>> {data}')
-		strdata = bytearray(data, 'utf8') + b'\n'
-		port.write(strdata)
-		time.sleep(0.010)
-
-	def _Recv():
-		clean_responses = []
-		responses = port.readlines()
-		for Resp in responses:
-			# Suppress invalid chars (coming from debug info)
-			try:
-				clean_response = Resp.decode('utf8').rstrip().lstrip()
-				clean_responses.append(clean_response)
-				debugPrint(f'<< {clean_response}')
-			except:
-				pass
-		return clean_responses
-
-	#------------------#
-	# SDCard functions #
-	#------------------#
-	def _CheckSDCard():
-		debugPrint('Checking SD card...')
-		_Send('M21')
-		Responses = _Recv()
-		if len(Responses) < 1 or not any('SD card ok' in r for r in Responses):
-			raise Exception('Error accessing SD card')
-		debugPrint('SD Card OK')
-		return True
-
-	#----------------#
-	# File functions #
-	#----------------#
-	def _GetFirmwareFiles(UseLongFilenames):
-		debugPrint('Get firmware files...')
-		_Send(f"M20 F{'L' if UseLongFilenames else ''}")
-		Responses = _Recv()
-		if len(Responses) < 3 or not any('file list' in r for r in Responses):
-			raise Exception('Error getting firmware files')
-		debugPrint('OK')
-		return Responses
-
-	def _FilterFirmwareFiles(FirmwareList, UseLongFilenames):
-		Firmwares = []
-		for FWFile in FirmwareList:
-			# For long filenames take the 3rd column of the firmwares list
-			if UseLongFilenames:
-				Space = 0
-				Space = FWFile.find(' ')
-				if Space >= 0: Space = FWFile.find(' ', Space + 1)
-				if Space >= 0: FWFile = FWFile[Space + 1:]
-			if not '/' in FWFile and '.BIN' in FWFile.upper():
-				Firmwares.append(FWFile[:FWFile.upper().index('.BIN') + 4])
-		return Firmwares
-
-	def _RemoveFirmwareFile(FirmwareFile):
-		_Send(f'M30 /{FirmwareFile}')
-		Responses = _Recv()
-		Removed = len(Responses) >= 1 and any('File deleted' in r for r in Responses)
-		if not Removed:
-			raise Exception(f"Firmware file '{FirmwareFile}' not removed")
-		return Removed
-
-	def _RollbackUpload(FirmwareFile):
-		if not rollback: return
-		print(f"Rollback: trying to delete firmware '{FirmwareFile}'...")
-		_OpenPort()
-		# Wait for SD card release
-		time.sleep(1)
-		# Remount SD card
-		_CheckSDCard()
-		print(' OK' if _RemoveFirmwareFile(FirmwareFile) else ' Error!')
-		_ClosePort()
-
-
-	#---------------------#
-	# Callback Entrypoint #
-	#---------------------#
-	port = None
-	protocol = None
-	filetransfer = None
-	rollback = False
-
-	# Get Marlin evironment vars
-	MarlinEnv = env['MARLIN_FEATURES']
-	marlin_pioenv = _GetMarlinEnv(MarlinEnv, 'PIOENV')
-	marlin_motherboard = _GetMarlinEnv(MarlinEnv, 'MOTHERBOARD')
-	marlin_board_info_name = _GetMarlinEnv(MarlinEnv, 'BOARD_INFO_NAME')
-	marlin_board_custom_build_flags = _GetMarlinEnv(MarlinEnv, 'BOARD_CUSTOM_BUILD_FLAGS')
-	marlin_firmware_bin = _GetMarlinEnv(MarlinEnv, 'FIRMWARE_BIN')
-	marlin_long_filename_host_support = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_HOST_SUPPORT') is not None
-	marlin_longname_write = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_WRITE_SUPPORT') is not None
-	marlin_custom_firmware_upload = _GetMarlinEnv(MarlinEnv, 'CUSTOM_FIRMWARE_UPLOAD') is not None
-	marlin_short_build_version = _GetMarlinEnv(MarlinEnv, 'SHORT_BUILD_VERSION')
-	marlin_string_config_h_author = _GetMarlinEnv(MarlinEnv, 'STRING_CONFIG_H_AUTHOR')
-
-	# Get firmware upload params
-	upload_firmware_source_name = str(source[0])    # Source firmware filename
-	upload_speed = env['UPLOAD_SPEED'] if 'UPLOAD_SPEED' in env else 115200
-													# baud rate of serial connection
-	upload_port = _GetUploadPort(env)               # Serial port to use
-
-	# Set local upload params
-	upload_firmware_target_name = os.path.basename(upload_firmware_source_name)
-													# Target firmware filename
-	upload_timeout = 1000                           # Communication timout, lossy/slow connections need higher values
-	upload_blocksize = 512                          # Transfer block size. 512 = Autodetect
-	upload_compression = True                       # Enable compression
-	upload_error_ratio = 0                          # Simulated corruption ratio
-	upload_test = False                             # Benchmark the serial link without storing the file
-	upload_reset = True                             # Trigger a soft reset for firmware update after the upload
-
-	# Set local upload params based on board type to change script behavior
-	# "upload_delete_old_bins": delete all *.bin files in the root of SD Card
-	upload_delete_old_bins = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
-													'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
-													'BOARD_CREALITY_V24S1']
-	# "upload_random_name": generate a random 8.3 firmware filename to upload
-	upload_random_filename = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
-													'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
-													'BOARD_CREALITY_V24S1'] and not marlin_long_filename_host_support
-
-	try:
-
-		# Start upload job
-		print(f"Uploading firmware '{os.path.basename(upload_firmware_target_name)}' to '{marlin_motherboard}' via '{upload_port}'")
-
-		# Dump some debug info
-		if Debug:
-			print('Upload using:')
-			print('---- Marlin -----------------------------------')
-			print(f' PIOENV                      : {marlin_pioenv}')
-			print(f' SHORT_BUILD_VERSION         : {marlin_short_build_version}')
-			print(f' STRING_CONFIG_H_AUTHOR      : {marlin_string_config_h_author}')
-			print(f' MOTHERBOARD                 : {marlin_motherboard}')
-			print(f' BOARD_INFO_NAME             : {marlin_board_info_name}')
-			print(f' CUSTOM_BUILD_FLAGS          : {marlin_board_custom_build_flags}')
-			print(f' FIRMWARE_BIN                : {marlin_firmware_bin}')
-			print(f' LONG_FILENAME_HOST_SUPPORT  : {marlin_long_filename_host_support}')
-			print(f' LONG_FILENAME_WRITE_SUPPORT : {marlin_longname_write}')
-			print(f' CUSTOM_FIRMWARE_UPLOAD      : {marlin_custom_firmware_upload}')
-			print('---- Upload parameters ------------------------')
-			print(f' Source                      : {upload_firmware_source_name}')
-			print(f' Target                      : {upload_firmware_target_name}')
-			print(f' Port                        : {upload_port} @ {upload_speed} baudrate')
-			print(f' Timeout                     : {upload_timeout}')
-			print(f' Block size                  : {upload_blocksize}')
-			print(f' Compression                 : {upload_compression}')
-			print(f' Error ratio                 : {upload_error_ratio}')
-			print(f' Test                        : {upload_test}')
-			print(f' Reset                       : {upload_reset}')
-			print('-----------------------------------------------')
-
-		# Custom implementations based on board parameters
-		# Generate a new 8.3 random filename
-		if upload_random_filename:
-			upload_firmware_target_name = f"fw-{''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=5))}.BIN"
-			print(f"Board {marlin_motherboard}: Overriding firmware filename to '{upload_firmware_target_name}'")
-
-		# Delete all *.bin files on the root of SD Card (if flagged)
-		if upload_delete_old_bins:
-			# CUSTOM_FIRMWARE_UPLOAD is needed for this feature
-			if not marlin_custom_firmware_upload:
-				raise Exception(f"CUSTOM_FIRMWARE_UPLOAD must be enabled in 'Configuration_adv.h' for '{marlin_motherboard}'")
-
-			# Init & Open serial port
-			port = serial.Serial(upload_port, baudrate = upload_speed, write_timeout = 0, timeout = 0.1)
-			_OpenPort()
-
-			# Check SD card status
-			_CheckSDCard()
-
-			# Get firmware files
-			FirmwareFiles = _GetFirmwareFiles(marlin_long_filename_host_support)
-			if Debug:
-				for FirmwareFile in FirmwareFiles:
-					print(f'Found: {FirmwareFile}')
-
-			# Get all 1st level firmware files (to remove)
-			OldFirmwareFiles = _FilterFirmwareFiles(FirmwareFiles[1:len(FirmwareFiles)-2], marlin_long_filename_host_support)   # Skip header and footers of list
-			if len(OldFirmwareFiles) == 0:
-				print('No old firmware files to delete')
-			else:
-				print(f"Remove {len(OldFirmwareFiles)} old firmware file{'s' if len(OldFirmwareFiles) != 1 else ''}:")
-				for OldFirmwareFile in OldFirmwareFiles:
-					print(f" -Removing- '{OldFirmwareFile}'...")
-					print(' OK' if _RemoveFirmwareFile(OldFirmwareFile) else ' Error!')
-
-			# Close serial
-			_ClosePort()
-
-			# Cleanup completed
-			debugPrint('Cleanup completed')
-
-		# WARNING! The serial port must be closed here because the serial transfer that follow needs it!
-
-		# Upload firmware file
-		debugPrint(f"Copy '{upload_firmware_source_name}' --> '{upload_firmware_target_name}'")
-		protocol = MarlinBinaryProtocol.Protocol(upload_port, upload_speed, upload_blocksize, float(upload_error_ratio), int(upload_timeout))
-		#echologger = MarlinBinaryProtocol.EchoProtocol(protocol)
-		protocol.connect()
-		# Mark the rollback (delete broken transfer) from this point on
-		rollback = True
-		filetransfer = MarlinBinaryProtocol.FileTransferProtocol(protocol)
-		transferOK = filetransfer.copy(upload_firmware_source_name, upload_firmware_target_name, upload_compression, upload_test)
-		protocol.disconnect()
-
-		# Notify upload completed
-		protocol.send_ascii('M117 Firmware uploaded' if transferOK else 'M117 Firmware upload failed')
-
-		# Remount SD card
-		print('Wait for SD card release...')
-		time.sleep(1)
-		print('Remount SD card')
-		protocol.send_ascii('M21')
-
-		# Transfer failed?
-		if not transferOK:
-			protocol.shutdown()
-			_RollbackUpload(upload_firmware_target_name)
-		else:
-			# Trigger firmware update
-			if upload_reset:
-				print('Trigger firmware update...')
-				protocol.send_ascii('M997', True)
-			protocol.shutdown()
-
-		print('Firmware update completed' if transferOK else 'Firmware update failed')
-		return 0 if transferOK else -1
-
-	except KeyboardInterrupt:
-		print('Aborted by user')
-		if filetransfer: filetransfer.abort()
-		if protocol:
-			protocol.disconnect()
-			protocol.shutdown()
-		_RollbackUpload(upload_firmware_target_name)
-		_ClosePort()
-		raise
-
-	except serial.SerialException as se:
-		# This exception is raised only for send_ascii data (not for binary transfer)
-		print(f'Serial excepion: {se}, transfer aborted')
-		if protocol:
-			protocol.disconnect()
-			protocol.shutdown()
-		_RollbackUpload(upload_firmware_target_name)
-		_ClosePort()
-		raise Exception(se)
-
-	except MarlinBinaryProtocol.FatalError:
-		print('Too many retries, transfer aborted')
-		if protocol:
-			protocol.disconnect()
-			protocol.shutdown()
-		_RollbackUpload(upload_firmware_target_name)
-		_ClosePort()
-		raise
-
-	except Exception as ex:
-		print(f"\nException: {ex}, transfer aborted")
-		if protocol:
-			protocol.disconnect()
-			protocol.shutdown()
-		_RollbackUpload(upload_firmware_target_name)
-		_ClosePort()
-		print('Firmware not updated')
-		raise
+    #-------#
+    # Debug #
+    #-------#
+    Debug = False                # Set to True to enable script debug
+    def debugPrint(data):
+        if Debug: print(f"[Debug]: {data}")
+
+    #------------------#
+    # Marlin functions #
+    #------------------#
+    def _GetMarlinEnv(marlinEnv, feature):
+        if not marlinEnv: return None
+        return marlinEnv[feature] if feature in marlinEnv else None
+
+    #----------------#
+    # Port functions #
+    #----------------#
+    def _GetUploadPort(env):
+        debugPrint('Autodetecting upload port...')
+        env.AutodetectUploadPort(env)
+        portName = env.subst('$UPLOAD_PORT')
+        if not portName:
+            raise Exception('Error detecting the upload port.')
+        debugPrint('OK')
+        return portName
+
+    #-------------------------#
+    # Simple serial functions #
+    #-------------------------#
+    def _OpenPort():
+        # Open serial port
+        if port.is_open: return
+        debugPrint('Opening upload port...')
+        port.open()
+        port.reset_input_buffer()
+        debugPrint('OK')
+
+    def _ClosePort():
+        # Open serial port
+        if port is None: return
+        if not port.is_open: return
+        debugPrint('Closing upload port...')
+        port.close()
+        debugPrint('OK')
+
+    def _Send(data):
+        debugPrint(f'>> {data}')
+        strdata = bytearray(data, 'utf8') + b'\n'
+        port.write(strdata)
+        time.sleep(0.010)
+
+    def _Recv():
+        clean_responses = []
+        responses = port.readlines()
+        for Resp in responses:
+            # Suppress invalid chars (coming from debug info)
+            try:
+                clean_response = Resp.decode('utf8').rstrip().lstrip()
+                clean_responses.append(clean_response)
+                debugPrint(f'<< {clean_response}')
+            except:
+                pass
+        return clean_responses
+
+    #------------------#
+    # SDCard functions #
+    #------------------#
+    def _CheckSDCard():
+        debugPrint('Checking SD card...')
+        _Send('M21')
+        Responses = _Recv()
+        if len(Responses) < 1 or not any('SD card ok' in r for r in Responses):
+            raise Exception('Error accessing SD card')
+        debugPrint('SD Card OK')
+        return True
+
+    #----------------#
+    # File functions #
+    #----------------#
+    def _GetFirmwareFiles(UseLongFilenames):
+        debugPrint('Get firmware files...')
+        _Send(f"M20 F{'L' if UseLongFilenames else ''}")
+        Responses = _Recv()
+        if len(Responses) < 3 or not any('file list' in r for r in Responses):
+            raise Exception('Error getting firmware files')
+        debugPrint('OK')
+        return Responses
+
+    def _FilterFirmwareFiles(FirmwareList, UseLongFilenames):
+        Firmwares = []
+        for FWFile in FirmwareList:
+            # For long filenames take the 3rd column of the firmwares list
+            if UseLongFilenames:
+                Space = 0
+                Space = FWFile.find(' ')
+                if Space >= 0: Space = FWFile.find(' ', Space + 1)
+                if Space >= 0: FWFile = FWFile[Space + 1:]
+            if not '/' in FWFile and '.BIN' in FWFile.upper():
+                Firmwares.append(FWFile[:FWFile.upper().index('.BIN') + 4])
+        return Firmwares
+
+    def _RemoveFirmwareFile(FirmwareFile):
+        _Send(f'M30 /{FirmwareFile}')
+        Responses = _Recv()
+        Removed = len(Responses) >= 1 and any('File deleted' in r for r in Responses)
+        if not Removed:
+            raise Exception(f"Firmware file '{FirmwareFile}' not removed")
+        return Removed
+
+    def _RollbackUpload(FirmwareFile):
+        if not rollback: return
+        print(f"Rollback: trying to delete firmware '{FirmwareFile}'...")
+        _OpenPort()
+        # Wait for SD card release
+        time.sleep(1)
+        # Remount SD card
+        _CheckSDCard()
+        print(' OK' if _RemoveFirmwareFile(FirmwareFile) else ' Error!')
+        _ClosePort()
+
+
+    #---------------------#
+    # Callback Entrypoint #
+    #---------------------#
+    port = None
+    protocol = None
+    filetransfer = None
+    rollback = False
+
+    # Get Marlin evironment vars
+    MarlinEnv = env['MARLIN_FEATURES']
+    marlin_pioenv = _GetMarlinEnv(MarlinEnv, 'PIOENV')
+    marlin_motherboard = _GetMarlinEnv(MarlinEnv, 'MOTHERBOARD')
+    marlin_board_info_name = _GetMarlinEnv(MarlinEnv, 'BOARD_INFO_NAME')
+    marlin_board_custom_build_flags = _GetMarlinEnv(MarlinEnv, 'BOARD_CUSTOM_BUILD_FLAGS')
+    marlin_firmware_bin = _GetMarlinEnv(MarlinEnv, 'FIRMWARE_BIN')
+    marlin_long_filename_host_support = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_HOST_SUPPORT') is not None
+    marlin_longname_write = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_WRITE_SUPPORT') is not None
+    marlin_custom_firmware_upload = _GetMarlinEnv(MarlinEnv, 'CUSTOM_FIRMWARE_UPLOAD') is not None
+    marlin_short_build_version = _GetMarlinEnv(MarlinEnv, 'SHORT_BUILD_VERSION')
+    marlin_string_config_h_author = _GetMarlinEnv(MarlinEnv, 'STRING_CONFIG_H_AUTHOR')
+
+    # Get firmware upload params
+    upload_firmware_source_name = str(source[0])    # Source firmware filename
+    upload_speed = env['UPLOAD_SPEED'] if 'UPLOAD_SPEED' in env else 115200
+                                                    # baud rate of serial connection
+    upload_port = _GetUploadPort(env)               # Serial port to use
+
+    # Set local upload params
+    upload_firmware_target_name = os.path.basename(upload_firmware_source_name)
+                                                    # Target firmware filename
+    upload_timeout = 1000                           # Communication timout, lossy/slow connections need higher values
+    upload_blocksize = 512                          # Transfer block size. 512 = Autodetect
+    upload_compression = True                       # Enable compression
+    upload_error_ratio = 0                          # Simulated corruption ratio
+    upload_test = False                             # Benchmark the serial link without storing the file
+    upload_reset = True                             # Trigger a soft reset for firmware update after the upload
+
+    # Set local upload params based on board type to change script behavior
+    # "upload_delete_old_bins": delete all *.bin files in the root of SD Card
+    upload_delete_old_bins = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
+                                                    'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
+                                                    'BOARD_CREALITY_V24S1']
+    # "upload_random_name": generate a random 8.3 firmware filename to upload
+    upload_random_filename = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
+                                                    'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
+                                                    'BOARD_CREALITY_V24S1'] and not marlin_long_filename_host_support
+
+    try:
+
+        # Start upload job
+        print(f"Uploading firmware '{os.path.basename(upload_firmware_target_name)}' to '{marlin_motherboard}' via '{upload_port}'")
+
+        # Dump some debug info
+        if Debug:
+            print('Upload using:')
+            print('---- Marlin -----------------------------------')
+            print(f' PIOENV                      : {marlin_pioenv}')
+            print(f' SHORT_BUILD_VERSION         : {marlin_short_build_version}')
+            print(f' STRING_CONFIG_H_AUTHOR      : {marlin_string_config_h_author}')
+            print(f' MOTHERBOARD                 : {marlin_motherboard}')
+            print(f' BOARD_INFO_NAME             : {marlin_board_info_name}')
+            print(f' CUSTOM_BUILD_FLAGS          : {marlin_board_custom_build_flags}')
+            print(f' FIRMWARE_BIN                : {marlin_firmware_bin}')
+            print(f' LONG_FILENAME_HOST_SUPPORT  : {marlin_long_filename_host_support}')
+            print(f' LONG_FILENAME_WRITE_SUPPORT : {marlin_longname_write}')
+            print(f' CUSTOM_FIRMWARE_UPLOAD      : {marlin_custom_firmware_upload}')
+            print('---- Upload parameters ------------------------')
+            print(f' Source                      : {upload_firmware_source_name}')
+            print(f' Target                      : {upload_firmware_target_name}')
+            print(f' Port                        : {upload_port} @ {upload_speed} baudrate')
+            print(f' Timeout                     : {upload_timeout}')
+            print(f' Block size                  : {upload_blocksize}')
+            print(f' Compression                 : {upload_compression}')
+            print(f' Error ratio                 : {upload_error_ratio}')
+            print(f' Test                        : {upload_test}')
+            print(f' Reset                       : {upload_reset}')
+            print('-----------------------------------------------')
+
+        # Custom implementations based on board parameters
+        # Generate a new 8.3 random filename
+        if upload_random_filename:
+            upload_firmware_target_name = f"fw-{''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=5))}.BIN"
+            print(f"Board {marlin_motherboard}: Overriding firmware filename to '{upload_firmware_target_name}'")
+
+        # Delete all *.bin files on the root of SD Card (if flagged)
+        if upload_delete_old_bins:
+            # CUSTOM_FIRMWARE_UPLOAD is needed for this feature
+            if not marlin_custom_firmware_upload:
+                raise Exception(f"CUSTOM_FIRMWARE_UPLOAD must be enabled in 'Configuration_adv.h' for '{marlin_motherboard}'")
+
+            # Init & Open serial port
+            port = serial.Serial(upload_port, baudrate = upload_speed, write_timeout = 0, timeout = 0.1)
+            _OpenPort()
+
+            # Check SD card status
+            _CheckSDCard()
+
+            # Get firmware files
+            FirmwareFiles = _GetFirmwareFiles(marlin_long_filename_host_support)
+            if Debug:
+                for FirmwareFile in FirmwareFiles:
+                    print(f'Found: {FirmwareFile}')
+
+            # Get all 1st level firmware files (to remove)
+            OldFirmwareFiles = _FilterFirmwareFiles(FirmwareFiles[1:len(FirmwareFiles)-2], marlin_long_filename_host_support)   # Skip header and footers of list
+            if len(OldFirmwareFiles) == 0:
+                print('No old firmware files to delete')
+            else:
+                print(f"Remove {len(OldFirmwareFiles)} old firmware file{'s' if len(OldFirmwareFiles) != 1 else ''}:")
+                for OldFirmwareFile in OldFirmwareFiles:
+                    print(f" -Removing- '{OldFirmwareFile}'...")
+                    print(' OK' if _RemoveFirmwareFile(OldFirmwareFile) else ' Error!')
+
+            # Close serial
+            _ClosePort()
+
+            # Cleanup completed
+            debugPrint('Cleanup completed')
+
+        # WARNING! The serial port must be closed here because the serial transfer that follow needs it!
+
+        # Upload firmware file
+        debugPrint(f"Copy '{upload_firmware_source_name}' --> '{upload_firmware_target_name}'")
+        protocol = MarlinBinaryProtocol.Protocol(upload_port, upload_speed, upload_blocksize, float(upload_error_ratio), int(upload_timeout))
+        #echologger = MarlinBinaryProtocol.EchoProtocol(protocol)
+        protocol.connect()
+        # Mark the rollback (delete broken transfer) from this point on
+        rollback = True
+        filetransfer = MarlinBinaryProtocol.FileTransferProtocol(protocol)
+        transferOK = filetransfer.copy(upload_firmware_source_name, upload_firmware_target_name, upload_compression, upload_test)
+        protocol.disconnect()
+
+        # Notify upload completed
+        protocol.send_ascii('M117 Firmware uploaded' if transferOK else 'M117 Firmware upload failed')
+
+        # Remount SD card
+        print('Wait for SD card release...')
+        time.sleep(1)
+        print('Remount SD card')
+        protocol.send_ascii('M21')
+
+        # Transfer failed?
+        if not transferOK:
+            protocol.shutdown()
+            _RollbackUpload(upload_firmware_target_name)
+        else:
+            # Trigger firmware update
+            if upload_reset:
+                print('Trigger firmware update...')
+                protocol.send_ascii('M997', True)
+            protocol.shutdown()
+
+        print('Firmware update completed' if transferOK else 'Firmware update failed')
+        return 0 if transferOK else -1
+
+    except KeyboardInterrupt:
+        print('Aborted by user')
+        if filetransfer: filetransfer.abort()
+        if protocol:
+            protocol.disconnect()
+            protocol.shutdown()
+        _RollbackUpload(upload_firmware_target_name)
+        _ClosePort()
+        raise
+
+    except serial.SerialException as se:
+        # This exception is raised only for send_ascii data (not for binary transfer)
+        print(f'Serial excepion: {se}, transfer aborted')
+        if protocol:
+            protocol.disconnect()
+            protocol.shutdown()
+        _RollbackUpload(upload_firmware_target_name)
+        _ClosePort()
+        raise Exception(se)
+
+    except MarlinBinaryProtocol.FatalError:
+        print('Too many retries, transfer aborted')
+        if protocol:
+            protocol.disconnect()
+            protocol.shutdown()
+        _RollbackUpload(upload_firmware_target_name)
+        _ClosePort()
+        raise
+
+    except Exception as ex:
+        print(f"\nException: {ex}, transfer aborted")
+        if protocol:
+            protocol.disconnect()
+            protocol.shutdown()
+        _RollbackUpload(upload_firmware_target_name)
+        _ClosePort()
+        print('Firmware not updated')
+        raise
 
 # Attach custom upload callback
 env.Replace(UPLOADCMD=Upload)

commit 306e03b03b1a51dd11b6d70ffcbfab099655e68a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Aug 19 11:00:52 2022 -0500

    üßë‚Äçüíª Use spaces indent for Python

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index 52fa1abc54..ef042fcded 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -18,327 +18,327 @@ Import("env")
 # Not tested: If it's safe to install python libraries in PIO python try:
 #    env.Execute(env.subst("$PYTHONEXE -m pip install https://github.com/p3p/pyheatshrink/releases/download/0.3.3/pyheatshrink-pip.zip"))
 
 import MarlinBinaryProtocol
 
 #-----------------#
 # Upload Callback #
 #-----------------#
 def Upload(source, target, env):
 
-    #-------#
-    # Debug #
-    #-------#
-    Debug = False                # Set to True to enable script debug
-    def debugPrint(data):
-        if Debug: print(f"[Debug]: {data}")
-
-    #------------------#
-    # Marlin functions #
-    #------------------#
-    def _GetMarlinEnv(marlinEnv, feature):
-        if not marlinEnv: return None
-        return marlinEnv[feature] if feature in marlinEnv else None
-
-    #----------------#
-    # Port functions #
-    #----------------#
-    def _GetUploadPort(env):
-        debugPrint('Autodetecting upload port...')
-        env.AutodetectUploadPort(env)
-        portName = env.subst('$UPLOAD_PORT')
-        if not portName:
-            raise Exception('Error detecting the upload port.')
-        debugPrint('OK')
-        return portName
-
-    #-------------------------#
-    # Simple serial functions #
-    #-------------------------#
-    def _OpenPort():
-        # Open serial port
-        if port.is_open: return
-        debugPrint('Opening upload port...')
-        port.open()
-        port.reset_input_buffer()
-        debugPrint('OK')
-
-    def _ClosePort():
-        # Open serial port
-        if port is None: return
-        if not port.is_open: return
-        debugPrint('Closing upload port...')
-        port.close()
-        debugPrint('OK')
-
-    def _Send(data):
-        debugPrint(f'>> {data}')
-        strdata = bytearray(data, 'utf8') + b'\n'
-        port.write(strdata)
-        time.sleep(0.010)
-
-    def _Recv():
-        clean_responses = []
-        responses = port.readlines()
-        for Resp in responses:
-            # Suppress invalid chars (coming from debug info)
-            try:
-                clean_response = Resp.decode('utf8').rstrip().lstrip()
-                clean_responses.append(clean_response)
-                debugPrint(f'<< {clean_response}')
-            except:
-                pass
-        return clean_responses
-
-    #------------------#
-    # SDCard functions #
-    #------------------#
-    def _CheckSDCard():
-        debugPrint('Checking SD card...')
-        _Send('M21')
-        Responses = _Recv()
-        if len(Responses) < 1 or not any('SD card ok' in r for r in Responses):
-            raise Exception('Error accessing SD card')
-        debugPrint('SD Card OK')
-        return True
-
-    #----------------#
-    # File functions #
-    #----------------#
-    def _GetFirmwareFiles(UseLongFilenames):
-        debugPrint('Get firmware files...')
-        _Send(f"M20 F{'L' if UseLongFilenames else ''}")
-        Responses = _Recv()
-        if len(Responses) < 3 or not any('file list' in r for r in Responses):
-            raise Exception('Error getting firmware files')
-        debugPrint('OK')
-        return Responses
-
-    def _FilterFirmwareFiles(FirmwareList, UseLongFilenames):
-        Firmwares = []
-        for FWFile in FirmwareList:
-            # For long filenames take the 3rd column of the firmwares list
-            if UseLongFilenames:
-                Space = 0
-                Space = FWFile.find(' ')
-                if Space >= 0: Space = FWFile.find(' ', Space + 1)
-                if Space >= 0: FWFile = FWFile[Space + 1:]
-            if not '/' in FWFile and '.BIN' in FWFile.upper():
-                Firmwares.append(FWFile[:FWFile.upper().index('.BIN') + 4])
-        return Firmwares
-
-    def _RemoveFirmwareFile(FirmwareFile):
-        _Send(f'M30 /{FirmwareFile}')
-        Responses = _Recv()
-        Removed = len(Responses) >= 1 and any('File deleted' in r for r in Responses)
-        if not Removed:
-            raise Exception(f"Firmware file '{FirmwareFile}' not removed")
-        return Removed
-
-    def _RollbackUpload(FirmwareFile):
-        if not rollback: return
-        print(f"Rollback: trying to delete firmware '{FirmwareFile}'...")
-        _OpenPort()
-        # Wait for SD card release
-        time.sleep(1)
-        # Remount SD card
-        _CheckSDCard()
-        print(' OK' if _RemoveFirmwareFile(FirmwareFile) else ' Error!')
-        _ClosePort()
-
-
-    #---------------------#
-    # Callback Entrypoint #
-    #---------------------#
-    port = None
-    protocol = None
-    filetransfer = None
-    rollback = False
-
-    # Get Marlin evironment vars
-    MarlinEnv = env['MARLIN_FEATURES']
-    marlin_pioenv = _GetMarlinEnv(MarlinEnv, 'PIOENV')
-    marlin_motherboard = _GetMarlinEnv(MarlinEnv, 'MOTHERBOARD')
-    marlin_board_info_name = _GetMarlinEnv(MarlinEnv, 'BOARD_INFO_NAME')
-    marlin_board_custom_build_flags = _GetMarlinEnv(MarlinEnv, 'BOARD_CUSTOM_BUILD_FLAGS')
-    marlin_firmware_bin = _GetMarlinEnv(MarlinEnv, 'FIRMWARE_BIN')
-    marlin_long_filename_host_support = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_HOST_SUPPORT') is not None
-    marlin_longname_write = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_WRITE_SUPPORT') is not None
-    marlin_custom_firmware_upload = _GetMarlinEnv(MarlinEnv, 'CUSTOM_FIRMWARE_UPLOAD') is not None
-    marlin_short_build_version = _GetMarlinEnv(MarlinEnv, 'SHORT_BUILD_VERSION')
-    marlin_string_config_h_author = _GetMarlinEnv(MarlinEnv, 'STRING_CONFIG_H_AUTHOR')
-
-    # Get firmware upload params
-    upload_firmware_source_name = str(source[0])    # Source firmware filename
-    upload_speed = env['UPLOAD_SPEED'] if 'UPLOAD_SPEED' in env else 115200
-                                                    # baud rate of serial connection
-    upload_port = _GetUploadPort(env)               # Serial port to use
-
-    # Set local upload params
-    upload_firmware_target_name = os.path.basename(upload_firmware_source_name)
-                                                    # Target firmware filename
-    upload_timeout = 1000                           # Communication timout, lossy/slow connections need higher values
-    upload_blocksize = 512                          # Transfer block size. 512 = Autodetect
-    upload_compression = True                       # Enable compression
-    upload_error_ratio = 0                          # Simulated corruption ratio
-    upload_test = False                             # Benchmark the serial link without storing the file
-    upload_reset = True                             # Trigger a soft reset for firmware update after the upload
-
-    # Set local upload params based on board type to change script behavior
-    # "upload_delete_old_bins": delete all *.bin files in the root of SD Card
-    upload_delete_old_bins = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
-                                                    'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
-                                                    'BOARD_CREALITY_V24S1']
-    # "upload_random_name": generate a random 8.3 firmware filename to upload
-    upload_random_filename = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
-                                                    'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
-                                                    'BOARD_CREALITY_V24S1'] and not marlin_long_filename_host_support
-
-    try:
-
-        # Start upload job
-        print(f"Uploading firmware '{os.path.basename(upload_firmware_target_name)}' to '{marlin_motherboard}' via '{upload_port}'")
-
-        # Dump some debug info
-        if Debug:
-            print('Upload using:')
-            print('---- Marlin -----------------------------------')
-            print(f' PIOENV                      : {marlin_pioenv}')
-            print(f' SHORT_BUILD_VERSION         : {marlin_short_build_version}')
-            print(f' STRING_CONFIG_H_AUTHOR      : {marlin_string_config_h_author}')
-            print(f' MOTHERBOARD                 : {marlin_motherboard}')
-            print(f' BOARD_INFO_NAME             : {marlin_board_info_name}')
-            print(f' CUSTOM_BUILD_FLAGS          : {marlin_board_custom_build_flags}')
-            print(f' FIRMWARE_BIN                : {marlin_firmware_bin}')
-            print(f' LONG_FILENAME_HOST_SUPPORT  : {marlin_long_filename_host_support}')
-            print(f' LONG_FILENAME_WRITE_SUPPORT : {marlin_longname_write}')
-            print(f' CUSTOM_FIRMWARE_UPLOAD      : {marlin_custom_firmware_upload}')
-            print('---- Upload parameters ------------------------')
-            print(f' Source                      : {upload_firmware_source_name}')
-            print(f' Target                      : {upload_firmware_target_name}')
-            print(f' Port                        : {upload_port} @ {upload_speed} baudrate')
-            print(f' Timeout                     : {upload_timeout}')
-            print(f' Block size                  : {upload_blocksize}')
-            print(f' Compression                 : {upload_compression}')
-            print(f' Error ratio                 : {upload_error_ratio}')
-            print(f' Test                        : {upload_test}')
-            print(f' Reset                       : {upload_reset}')
-            print('-----------------------------------------------')
-
-        # Custom implementations based on board parameters
-        # Generate a new 8.3 random filename
-        if upload_random_filename:
-            upload_firmware_target_name = f"fw-{''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=5))}.BIN"
-            print(f"Board {marlin_motherboard}: Overriding firmware filename to '{upload_firmware_target_name}'")
-
-        # Delete all *.bin files on the root of SD Card (if flagged)
-        if upload_delete_old_bins:
-            # CUSTOM_FIRMWARE_UPLOAD is needed for this feature
-            if not marlin_custom_firmware_upload:
-                raise Exception(f"CUSTOM_FIRMWARE_UPLOAD must be enabled in 'Configuration_adv.h' for '{marlin_motherboard}'")
-
-            # Init & Open serial port
-            port = serial.Serial(upload_port, baudrate = upload_speed, write_timeout = 0, timeout = 0.1)
-            _OpenPort()
-
-            # Check SD card status
-            _CheckSDCard()
-
-            # Get firmware files
-            FirmwareFiles = _GetFirmwareFiles(marlin_long_filename_host_support)
-            if Debug:
-                for FirmwareFile in FirmwareFiles:
-                    print(f'Found: {FirmwareFile}')
-
-            # Get all 1st level firmware files (to remove)
-            OldFirmwareFiles = _FilterFirmwareFiles(FirmwareFiles[1:len(FirmwareFiles)-2], marlin_long_filename_host_support)   # Skip header and footers of list
-            if len(OldFirmwareFiles) == 0:
-                print('No old firmware files to delete')
-            else:
-                print(f"Remove {len(OldFirmwareFiles)} old firmware file{'s' if len(OldFirmwareFiles) != 1 else ''}:")
-                for OldFirmwareFile in OldFirmwareFiles:
-                    print(f" -Removing- '{OldFirmwareFile}'...")
-                    print(' OK' if _RemoveFirmwareFile(OldFirmwareFile) else ' Error!')
-
-            # Close serial
-            _ClosePort()
-
-            # Cleanup completed
-            debugPrint('Cleanup completed')
-
-        # WARNING! The serial port must be closed here because the serial transfer that follow needs it!
-
-        # Upload firmware file
-        debugPrint(f"Copy '{upload_firmware_source_name}' --> '{upload_firmware_target_name}'")
-        protocol = MarlinBinaryProtocol.Protocol(upload_port, upload_speed, upload_blocksize, float(upload_error_ratio), int(upload_timeout))
-        #echologger = MarlinBinaryProtocol.EchoProtocol(protocol)
-        protocol.connect()
-        # Mark the rollback (delete broken transfer) from this point on
-        rollback = True
-        filetransfer = MarlinBinaryProtocol.FileTransferProtocol(protocol)
-        transferOK = filetransfer.copy(upload_firmware_source_name, upload_firmware_target_name, upload_compression, upload_test)
-        protocol.disconnect()
-
-        # Notify upload completed
-        protocol.send_ascii('M117 Firmware uploaded' if transferOK else 'M117 Firmware upload failed')
-
-        # Remount SD card
-        print('Wait for SD card release...')
-        time.sleep(1)
-        print('Remount SD card')
-        protocol.send_ascii('M21')
-
-        # Transfer failed?
-        if not transferOK:
-            protocol.shutdown()
-            _RollbackUpload(upload_firmware_target_name)
-        else:
-            # Trigger firmware update
-            if upload_reset:
-                print('Trigger firmware update...')
-                protocol.send_ascii('M997', True)
-            protocol.shutdown()
-
-        print('Firmware update completed' if transferOK else 'Firmware update failed')
-        return 0 if transferOK else -1
-
-    except KeyboardInterrupt:
-        print('Aborted by user')
-        if filetransfer: filetransfer.abort()
-        if protocol: 
-            protocol.disconnect()
-            protocol.shutdown()
-        _RollbackUpload(upload_firmware_target_name)
-        _ClosePort()
-        raise
-
-    except serial.SerialException as se:
-        # This exception is raised only for send_ascii data (not for binary transfer)
-        print(f'Serial excepion: {se}, transfer aborted')
-        if protocol: 
-            protocol.disconnect()
-            protocol.shutdown()
-        _RollbackUpload(upload_firmware_target_name)
-        _ClosePort()
-        raise Exception(se)
-
-    except MarlinBinaryProtocol.FatalError:
-        print('Too many retries, transfer aborted')
-        if protocol: 
-            protocol.disconnect()
-            protocol.shutdown()
-        _RollbackUpload(upload_firmware_target_name)
-        _ClosePort()
-        raise
-
-    except Exception as ex:
-        print(f"\nException: {ex}, transfer aborted")
-        if protocol: 
-            protocol.disconnect()
-            protocol.shutdown()
-        _RollbackUpload(upload_firmware_target_name)
-        _ClosePort()
-        print('Firmware not updated')
-        raise
+	#-------#
+	# Debug #
+	#-------#
+	Debug = False                # Set to True to enable script debug
+	def debugPrint(data):
+		if Debug: print(f"[Debug]: {data}")
+
+	#------------------#
+	# Marlin functions #
+	#------------------#
+	def _GetMarlinEnv(marlinEnv, feature):
+		if not marlinEnv: return None
+		return marlinEnv[feature] if feature in marlinEnv else None
+
+	#----------------#
+	# Port functions #
+	#----------------#
+	def _GetUploadPort(env):
+		debugPrint('Autodetecting upload port...')
+		env.AutodetectUploadPort(env)
+		portName = env.subst('$UPLOAD_PORT')
+		if not portName:
+			raise Exception('Error detecting the upload port.')
+		debugPrint('OK')
+		return portName
+
+	#-------------------------#
+	# Simple serial functions #
+	#-------------------------#
+	def _OpenPort():
+		# Open serial port
+		if port.is_open: return
+		debugPrint('Opening upload port...')
+		port.open()
+		port.reset_input_buffer()
+		debugPrint('OK')
+
+	def _ClosePort():
+		# Open serial port
+		if port is None: return
+		if not port.is_open: return
+		debugPrint('Closing upload port...')
+		port.close()
+		debugPrint('OK')
+
+	def _Send(data):
+		debugPrint(f'>> {data}')
+		strdata = bytearray(data, 'utf8') + b'\n'
+		port.write(strdata)
+		time.sleep(0.010)
+
+	def _Recv():
+		clean_responses = []
+		responses = port.readlines()
+		for Resp in responses:
+			# Suppress invalid chars (coming from debug info)
+			try:
+				clean_response = Resp.decode('utf8').rstrip().lstrip()
+				clean_responses.append(clean_response)
+				debugPrint(f'<< {clean_response}')
+			except:
+				pass
+		return clean_responses
+
+	#------------------#
+	# SDCard functions #
+	#------------------#
+	def _CheckSDCard():
+		debugPrint('Checking SD card...')
+		_Send('M21')
+		Responses = _Recv()
+		if len(Responses) < 1 or not any('SD card ok' in r for r in Responses):
+			raise Exception('Error accessing SD card')
+		debugPrint('SD Card OK')
+		return True
+
+	#----------------#
+	# File functions #
+	#----------------#
+	def _GetFirmwareFiles(UseLongFilenames):
+		debugPrint('Get firmware files...')
+		_Send(f"M20 F{'L' if UseLongFilenames else ''}")
+		Responses = _Recv()
+		if len(Responses) < 3 or not any('file list' in r for r in Responses):
+			raise Exception('Error getting firmware files')
+		debugPrint('OK')
+		return Responses
+
+	def _FilterFirmwareFiles(FirmwareList, UseLongFilenames):
+		Firmwares = []
+		for FWFile in FirmwareList:
+			# For long filenames take the 3rd column of the firmwares list
+			if UseLongFilenames:
+				Space = 0
+				Space = FWFile.find(' ')
+				if Space >= 0: Space = FWFile.find(' ', Space + 1)
+				if Space >= 0: FWFile = FWFile[Space + 1:]
+			if not '/' in FWFile and '.BIN' in FWFile.upper():
+				Firmwares.append(FWFile[:FWFile.upper().index('.BIN') + 4])
+		return Firmwares
+
+	def _RemoveFirmwareFile(FirmwareFile):
+		_Send(f'M30 /{FirmwareFile}')
+		Responses = _Recv()
+		Removed = len(Responses) >= 1 and any('File deleted' in r for r in Responses)
+		if not Removed:
+			raise Exception(f"Firmware file '{FirmwareFile}' not removed")
+		return Removed
+
+	def _RollbackUpload(FirmwareFile):
+		if not rollback: return
+		print(f"Rollback: trying to delete firmware '{FirmwareFile}'...")
+		_OpenPort()
+		# Wait for SD card release
+		time.sleep(1)
+		# Remount SD card
+		_CheckSDCard()
+		print(' OK' if _RemoveFirmwareFile(FirmwareFile) else ' Error!')
+		_ClosePort()
+
+
+	#---------------------#
+	# Callback Entrypoint #
+	#---------------------#
+	port = None
+	protocol = None
+	filetransfer = None
+	rollback = False
+
+	# Get Marlin evironment vars
+	MarlinEnv = env['MARLIN_FEATURES']
+	marlin_pioenv = _GetMarlinEnv(MarlinEnv, 'PIOENV')
+	marlin_motherboard = _GetMarlinEnv(MarlinEnv, 'MOTHERBOARD')
+	marlin_board_info_name = _GetMarlinEnv(MarlinEnv, 'BOARD_INFO_NAME')
+	marlin_board_custom_build_flags = _GetMarlinEnv(MarlinEnv, 'BOARD_CUSTOM_BUILD_FLAGS')
+	marlin_firmware_bin = _GetMarlinEnv(MarlinEnv, 'FIRMWARE_BIN')
+	marlin_long_filename_host_support = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_HOST_SUPPORT') is not None
+	marlin_longname_write = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_WRITE_SUPPORT') is not None
+	marlin_custom_firmware_upload = _GetMarlinEnv(MarlinEnv, 'CUSTOM_FIRMWARE_UPLOAD') is not None
+	marlin_short_build_version = _GetMarlinEnv(MarlinEnv, 'SHORT_BUILD_VERSION')
+	marlin_string_config_h_author = _GetMarlinEnv(MarlinEnv, 'STRING_CONFIG_H_AUTHOR')
+
+	# Get firmware upload params
+	upload_firmware_source_name = str(source[0])    # Source firmware filename
+	upload_speed = env['UPLOAD_SPEED'] if 'UPLOAD_SPEED' in env else 115200
+													# baud rate of serial connection
+	upload_port = _GetUploadPort(env)               # Serial port to use
+
+	# Set local upload params
+	upload_firmware_target_name = os.path.basename(upload_firmware_source_name)
+													# Target firmware filename
+	upload_timeout = 1000                           # Communication timout, lossy/slow connections need higher values
+	upload_blocksize = 512                          # Transfer block size. 512 = Autodetect
+	upload_compression = True                       # Enable compression
+	upload_error_ratio = 0                          # Simulated corruption ratio
+	upload_test = False                             # Benchmark the serial link without storing the file
+	upload_reset = True                             # Trigger a soft reset for firmware update after the upload
+
+	# Set local upload params based on board type to change script behavior
+	# "upload_delete_old_bins": delete all *.bin files in the root of SD Card
+	upload_delete_old_bins = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
+													'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
+													'BOARD_CREALITY_V24S1']
+	# "upload_random_name": generate a random 8.3 firmware filename to upload
+	upload_random_filename = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
+													'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
+													'BOARD_CREALITY_V24S1'] and not marlin_long_filename_host_support
+
+	try:
+
+		# Start upload job
+		print(f"Uploading firmware '{os.path.basename(upload_firmware_target_name)}' to '{marlin_motherboard}' via '{upload_port}'")
+
+		# Dump some debug info
+		if Debug:
+			print('Upload using:')
+			print('---- Marlin -----------------------------------')
+			print(f' PIOENV                      : {marlin_pioenv}')
+			print(f' SHORT_BUILD_VERSION         : {marlin_short_build_version}')
+			print(f' STRING_CONFIG_H_AUTHOR      : {marlin_string_config_h_author}')
+			print(f' MOTHERBOARD                 : {marlin_motherboard}')
+			print(f' BOARD_INFO_NAME             : {marlin_board_info_name}')
+			print(f' CUSTOM_BUILD_FLAGS          : {marlin_board_custom_build_flags}')
+			print(f' FIRMWARE_BIN                : {marlin_firmware_bin}')
+			print(f' LONG_FILENAME_HOST_SUPPORT  : {marlin_long_filename_host_support}')
+			print(f' LONG_FILENAME_WRITE_SUPPORT : {marlin_longname_write}')
+			print(f' CUSTOM_FIRMWARE_UPLOAD      : {marlin_custom_firmware_upload}')
+			print('---- Upload parameters ------------------------')
+			print(f' Source                      : {upload_firmware_source_name}')
+			print(f' Target                      : {upload_firmware_target_name}')
+			print(f' Port                        : {upload_port} @ {upload_speed} baudrate')
+			print(f' Timeout                     : {upload_timeout}')
+			print(f' Block size                  : {upload_blocksize}')
+			print(f' Compression                 : {upload_compression}')
+			print(f' Error ratio                 : {upload_error_ratio}')
+			print(f' Test                        : {upload_test}')
+			print(f' Reset                       : {upload_reset}')
+			print('-----------------------------------------------')
+
+		# Custom implementations based on board parameters
+		# Generate a new 8.3 random filename
+		if upload_random_filename:
+			upload_firmware_target_name = f"fw-{''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=5))}.BIN"
+			print(f"Board {marlin_motherboard}: Overriding firmware filename to '{upload_firmware_target_name}'")
+
+		# Delete all *.bin files on the root of SD Card (if flagged)
+		if upload_delete_old_bins:
+			# CUSTOM_FIRMWARE_UPLOAD is needed for this feature
+			if not marlin_custom_firmware_upload:
+				raise Exception(f"CUSTOM_FIRMWARE_UPLOAD must be enabled in 'Configuration_adv.h' for '{marlin_motherboard}'")
+
+			# Init & Open serial port
+			port = serial.Serial(upload_port, baudrate = upload_speed, write_timeout = 0, timeout = 0.1)
+			_OpenPort()
+
+			# Check SD card status
+			_CheckSDCard()
+
+			# Get firmware files
+			FirmwareFiles = _GetFirmwareFiles(marlin_long_filename_host_support)
+			if Debug:
+				for FirmwareFile in FirmwareFiles:
+					print(f'Found: {FirmwareFile}')
+
+			# Get all 1st level firmware files (to remove)
+			OldFirmwareFiles = _FilterFirmwareFiles(FirmwareFiles[1:len(FirmwareFiles)-2], marlin_long_filename_host_support)   # Skip header and footers of list
+			if len(OldFirmwareFiles) == 0:
+				print('No old firmware files to delete')
+			else:
+				print(f"Remove {len(OldFirmwareFiles)} old firmware file{'s' if len(OldFirmwareFiles) != 1 else ''}:")
+				for OldFirmwareFile in OldFirmwareFiles:
+					print(f" -Removing- '{OldFirmwareFile}'...")
+					print(' OK' if _RemoveFirmwareFile(OldFirmwareFile) else ' Error!')
+
+			# Close serial
+			_ClosePort()
+
+			# Cleanup completed
+			debugPrint('Cleanup completed')
+
+		# WARNING! The serial port must be closed here because the serial transfer that follow needs it!
+
+		# Upload firmware file
+		debugPrint(f"Copy '{upload_firmware_source_name}' --> '{upload_firmware_target_name}'")
+		protocol = MarlinBinaryProtocol.Protocol(upload_port, upload_speed, upload_blocksize, float(upload_error_ratio), int(upload_timeout))
+		#echologger = MarlinBinaryProtocol.EchoProtocol(protocol)
+		protocol.connect()
+		# Mark the rollback (delete broken transfer) from this point on
+		rollback = True
+		filetransfer = MarlinBinaryProtocol.FileTransferProtocol(protocol)
+		transferOK = filetransfer.copy(upload_firmware_source_name, upload_firmware_target_name, upload_compression, upload_test)
+		protocol.disconnect()
+
+		# Notify upload completed
+		protocol.send_ascii('M117 Firmware uploaded' if transferOK else 'M117 Firmware upload failed')
+
+		# Remount SD card
+		print('Wait for SD card release...')
+		time.sleep(1)
+		print('Remount SD card')
+		protocol.send_ascii('M21')
+
+		# Transfer failed?
+		if not transferOK:
+			protocol.shutdown()
+			_RollbackUpload(upload_firmware_target_name)
+		else:
+			# Trigger firmware update
+			if upload_reset:
+				print('Trigger firmware update...')
+				protocol.send_ascii('M997', True)
+			protocol.shutdown()
+
+		print('Firmware update completed' if transferOK else 'Firmware update failed')
+		return 0 if transferOK else -1
+
+	except KeyboardInterrupt:
+		print('Aborted by user')
+		if filetransfer: filetransfer.abort()
+		if protocol:
+			protocol.disconnect()
+			protocol.shutdown()
+		_RollbackUpload(upload_firmware_target_name)
+		_ClosePort()
+		raise
+
+	except serial.SerialException as se:
+		# This exception is raised only for send_ascii data (not for binary transfer)
+		print(f'Serial excepion: {se}, transfer aborted')
+		if protocol:
+			protocol.disconnect()
+			protocol.shutdown()
+		_RollbackUpload(upload_firmware_target_name)
+		_ClosePort()
+		raise Exception(se)
+
+	except MarlinBinaryProtocol.FatalError:
+		print('Too many retries, transfer aborted')
+		if protocol:
+			protocol.disconnect()
+			protocol.shutdown()
+		_RollbackUpload(upload_firmware_target_name)
+		_ClosePort()
+		raise
+
+	except Exception as ex:
+		print(f"\nException: {ex}, transfer aborted")
+		if protocol:
+			protocol.disconnect()
+			protocol.shutdown()
+		_RollbackUpload(upload_firmware_target_name)
+		_ClosePort()
+		print('Firmware not updated')
+		raise
 
 # Attach custom upload callback
 env.Replace(UPLOADCMD=Upload)

commit 6eef8075205cc61abedd50f318e089d44c07209f
Author: GHGiampy <83699429+GHGiampy@users.noreply.github.com>
Date:   Fri Jul 15 10:18:57 2022 +0200

    üî® Fix firmware upload (#24499)

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index 31d5620f4e..52fa1abc54 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -77,23 +77,23 @@ def Upload(source, target, env):
         time.sleep(0.010)
 
     def _Recv():
         clean_responses = []
         responses = port.readlines()
         for Resp in responses:
             # Suppress invalid chars (coming from debug info)
             try:
                 clean_response = Resp.decode('utf8').rstrip().lstrip()
                 clean_responses.append(clean_response)
+                debugPrint(f'<< {clean_response}')
             except:
                 pass
-            debugPrint(f'<< {clean_response}')
         return clean_responses
 
     #------------------#
     # SDCard functions #
     #------------------#
     def _CheckSDCard():
         debugPrint('Checking SD card...')
         _Send('M21')
         Responses = _Recv()
         if len(Responses) < 1 or not any('SD card ok' in r for r in Responses):

commit 1d31b6215a4af5d768c0066f632e5c56326f218a
Author: GHGiampy <83699429+GHGiampy@users.noreply.github.com>
Date:   Thu Jul 14 03:25:35 2022 +0200

    üî® Abort firmware update on transfer error (#24472)

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index c7730d8f29..31d5620f4e 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -13,91 +13,111 @@ Import("env")
 #except ImportError:
 #    # Install heatshrink
 #    print("Installing 'heatshrink' python module...")
 #    env.Execute(env.subst("$PYTHONEXE -m pip install heatshrink"))
 #
 # Not tested: If it's safe to install python libraries in PIO python try:
 #    env.Execute(env.subst("$PYTHONEXE -m pip install https://github.com/p3p/pyheatshrink/releases/download/0.3.3/pyheatshrink-pip.zip"))
 
 import MarlinBinaryProtocol
 
-# Internal debug flag
-Debug = False
-
 #-----------------#
 # Upload Callback #
 #-----------------#
 def Upload(source, target, env):
 
+    #-------#
+    # Debug #
+    #-------#
+    Debug = False                # Set to True to enable script debug
+    def debugPrint(data):
+        if Debug: print(f"[Debug]: {data}")
+
     #------------------#
     # Marlin functions #
     #------------------#
     def _GetMarlinEnv(marlinEnv, feature):
         if not marlinEnv: return None
         return marlinEnv[feature] if feature in marlinEnv else None
 
     #----------------#
     # Port functions #
     #----------------#
     def _GetUploadPort(env):
-        if Debug: print('Autodetecting upload port...')
+        debugPrint('Autodetecting upload port...')
         env.AutodetectUploadPort(env)
-        port = env.subst('$UPLOAD_PORT')
-        if not port:
+        portName = env.subst('$UPLOAD_PORT')
+        if not portName:
             raise Exception('Error detecting the upload port.')
-        if Debug: print('OK')
-        return port
+        debugPrint('OK')
+        return portName
 
     #-------------------------#
     # Simple serial functions #
     #-------------------------#
+    def _OpenPort():
+        # Open serial port
+        if port.is_open: return
+        debugPrint('Opening upload port...')
+        port.open()
+        port.reset_input_buffer()
+        debugPrint('OK')
+
+    def _ClosePort():
+        # Open serial port
+        if port is None: return
+        if not port.is_open: return
+        debugPrint('Closing upload port...')
+        port.close()
+        debugPrint('OK')
+
     def _Send(data):
-        if Debug: print(f'>> {data}')
+        debugPrint(f'>> {data}')
         strdata = bytearray(data, 'utf8') + b'\n'
         port.write(strdata)
         time.sleep(0.010)
 
     def _Recv():
         clean_responses = []
         responses = port.readlines()
         for Resp in responses:
-            # Test: suppress invaid chars (coming from debug info)
+            # Suppress invalid chars (coming from debug info)
             try:
                 clean_response = Resp.decode('utf8').rstrip().lstrip()
                 clean_responses.append(clean_response)
             except:
                 pass
-            if Debug: print(f'<< {clean_response}')
+            debugPrint(f'<< {clean_response}')
         return clean_responses
 
     #------------------#
     # SDCard functions #
     #------------------#
     def _CheckSDCard():
-        if Debug: print('Checking SD card...')
+        debugPrint('Checking SD card...')
         _Send('M21')
         Responses = _Recv()
         if len(Responses) < 1 or not any('SD card ok' in r for r in Responses):
             raise Exception('Error accessing SD card')
-        if Debug: print('SD Card OK')
+        debugPrint('SD Card OK')
         return True
 
     #----------------#
     # File functions #
     #----------------#
     def _GetFirmwareFiles(UseLongFilenames):
-        if Debug: print('Get firmware files...')
+        debugPrint('Get firmware files...')
         _Send(f"M20 F{'L' if UseLongFilenames else ''}")
         Responses = _Recv()
         if len(Responses) < 3 or not any('file list' in r for r in Responses):
             raise Exception('Error getting firmware files')
-        if Debug: print('OK')
+        debugPrint('OK')
         return Responses
 
     def _FilterFirmwareFiles(FirmwareList, UseLongFilenames):
         Firmwares = []
         for FWFile in FirmwareList:
             # For long filenames take the 3rd column of the firmwares list
             if UseLongFilenames:
                 Space = 0
                 Space = FWFile.find(' ')
                 if Space >= 0: Space = FWFile.find(' ', Space + 1)
@@ -107,27 +127,39 @@ def Upload(source, target, env):
         return Firmwares
 
     def _RemoveFirmwareFile(FirmwareFile):
         _Send(f'M30 /{FirmwareFile}')
         Responses = _Recv()
         Removed = len(Responses) >= 1 and any('File deleted' in r for r in Responses)
         if not Removed:
             raise Exception(f"Firmware file '{FirmwareFile}' not removed")
         return Removed
 
+    def _RollbackUpload(FirmwareFile):
+        if not rollback: return
+        print(f"Rollback: trying to delete firmware '{FirmwareFile}'...")
+        _OpenPort()
+        # Wait for SD card release
+        time.sleep(1)
+        # Remount SD card
+        _CheckSDCard()
+        print(' OK' if _RemoveFirmwareFile(FirmwareFile) else ' Error!')
+        _ClosePort()
+
 
     #---------------------#
     # Callback Entrypoint #
     #---------------------#
     port = None
     protocol = None
     filetransfer = None
+    rollback = False
 
     # Get Marlin evironment vars
     MarlinEnv = env['MARLIN_FEATURES']
     marlin_pioenv = _GetMarlinEnv(MarlinEnv, 'PIOENV')
     marlin_motherboard = _GetMarlinEnv(MarlinEnv, 'MOTHERBOARD')
     marlin_board_info_name = _GetMarlinEnv(MarlinEnv, 'BOARD_INFO_NAME')
     marlin_board_custom_build_flags = _GetMarlinEnv(MarlinEnv, 'BOARD_CUSTOM_BUILD_FLAGS')
     marlin_firmware_bin = _GetMarlinEnv(MarlinEnv, 'FIRMWARE_BIN')
     marlin_long_filename_host_support = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_HOST_SUPPORT') is not None
     marlin_longname_write = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_WRITE_SUPPORT') is not None
@@ -197,23 +229,23 @@ def Upload(source, target, env):
         if upload_random_filename:
             upload_firmware_target_name = f"fw-{''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=5))}.BIN"
             print(f"Board {marlin_motherboard}: Overriding firmware filename to '{upload_firmware_target_name}'")
 
         # Delete all *.bin files on the root of SD Card (if flagged)
         if upload_delete_old_bins:
             # CUSTOM_FIRMWARE_UPLOAD is needed for this feature
             if not marlin_custom_firmware_upload:
                 raise Exception(f"CUSTOM_FIRMWARE_UPLOAD must be enabled in 'Configuration_adv.h' for '{marlin_motherboard}'")
 
-            # Init serial port
+            # Init & Open serial port
             port = serial.Serial(upload_port, baudrate = upload_speed, write_timeout = 0, timeout = 0.1)
-            port.reset_input_buffer()
+            _OpenPort()
 
             # Check SD card status
             _CheckSDCard()
 
             # Get firmware files
             FirmwareFiles = _GetFirmwareFiles(marlin_long_filename_host_support)
             if Debug:
                 for FirmwareFile in FirmwareFiles:
                     print(f'Found: {FirmwareFile}')
 
@@ -221,68 +253,92 @@ def Upload(source, target, env):
             OldFirmwareFiles = _FilterFirmwareFiles(FirmwareFiles[1:len(FirmwareFiles)-2], marlin_long_filename_host_support)   # Skip header and footers of list
             if len(OldFirmwareFiles) == 0:
                 print('No old firmware files to delete')
             else:
                 print(f"Remove {len(OldFirmwareFiles)} old firmware file{'s' if len(OldFirmwareFiles) != 1 else ''}:")
                 for OldFirmwareFile in OldFirmwareFiles:
                     print(f" -Removing- '{OldFirmwareFile}'...")
                     print(' OK' if _RemoveFirmwareFile(OldFirmwareFile) else ' Error!')
 
             # Close serial
-            port.close()
+            _ClosePort()
 
             # Cleanup completed
-            if Debug: print('Cleanup completed')
+            debugPrint('Cleanup completed')
 
         # WARNING! The serial port must be closed here because the serial transfer that follow needs it!
 
         # Upload firmware file
-        if Debug: print(f"Copy '{upload_firmware_source_name}' --> '{upload_firmware_target_name}'")
+        debugPrint(f"Copy '{upload_firmware_source_name}' --> '{upload_firmware_target_name}'")
         protocol = MarlinBinaryProtocol.Protocol(upload_port, upload_speed, upload_blocksize, float(upload_error_ratio), int(upload_timeout))
         #echologger = MarlinBinaryProtocol.EchoProtocol(protocol)
         protocol.connect()
+        # Mark the rollback (delete broken transfer) from this point on
+        rollback = True
         filetransfer = MarlinBinaryProtocol.FileTransferProtocol(protocol)
-        filetransfer.copy(upload_firmware_source_name, upload_firmware_target_name, upload_compression, upload_test)
+        transferOK = filetransfer.copy(upload_firmware_source_name, upload_firmware_target_name, upload_compression, upload_test)
         protocol.disconnect()
 
         # Notify upload completed
-        protocol.send_ascii('M117 Firmware uploaded')
+        protocol.send_ascii('M117 Firmware uploaded' if transferOK else 'M117 Firmware upload failed')
 
         # Remount SD card
         print('Wait for SD card release...')
         time.sleep(1)
         print('Remount SD card')
         protocol.send_ascii('M21')
 
-        # Trigger firmware update
-        if upload_reset:
-            print('Trigger firmware update...')
-            protocol.send_ascii('M997', True)
+        # Transfer failed?
+        if not transferOK:
+            protocol.shutdown()
+            _RollbackUpload(upload_firmware_target_name)
+        else:
+            # Trigger firmware update
+            if upload_reset:
+                print('Trigger firmware update...')
+                protocol.send_ascii('M997', True)
+            protocol.shutdown()
 
-        protocol.shutdown()
-        print('Firmware update completed')
+        print('Firmware update completed' if transferOK else 'Firmware update failed')
+        return 0 if transferOK else -1
 
     except KeyboardInterrupt:
-        if port: port.close()
+        print('Aborted by user')
         if filetransfer: filetransfer.abort()
-        if protocol: protocol.shutdown()
+        if protocol: 
+            protocol.disconnect()
+            protocol.shutdown()
+        _RollbackUpload(upload_firmware_target_name)
+        _ClosePort()
         raise
 
     except serial.SerialException as se:
-        if port: port.close()
-        print(f'Serial excepion: {se}')
+        # This exception is raised only for send_ascii data (not for binary transfer)
+        print(f'Serial excepion: {se}, transfer aborted')
+        if protocol: 
+            protocol.disconnect()
+            protocol.shutdown()
+        _RollbackUpload(upload_firmware_target_name)
+        _ClosePort()
         raise Exception(se)
 
     except MarlinBinaryProtocol.FatalError:
-        if port: port.close()
-        if protocol: protocol.shutdown()
-        print('Too many retries, Abort')
+        print('Too many retries, transfer aborted')
+        if protocol: 
+            protocol.disconnect()
+            protocol.shutdown()
+        _RollbackUpload(upload_firmware_target_name)
+        _ClosePort()
         raise
 
-    except:
-        if port: port.close()
-        if protocol: protocol.shutdown()
+    except Exception as ex:
+        print(f"\nException: {ex}, transfer aborted")
+        if protocol: 
+            protocol.disconnect()
+            protocol.shutdown()
+        _RollbackUpload(upload_firmware_target_name)
+        _ClosePort()
         print('Firmware not updated')
         raise
 
 # Attach custom upload callback
 env.Replace(UPLOADCMD=Upload)

commit 6af5cb295c2ddd8ffcf3a07bfc920106f3f62c20
Author: GHGiampy <83699429+GHGiampy@users.noreply.github.com>
Date:   Sat Feb 5 17:23:44 2022 +0100

    üî® Clean up upload.py (#23679)

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index f6b25396ad..c7730d8f29 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -135,37 +135,37 @@ def Upload(source, target, env):
     marlin_short_build_version = _GetMarlinEnv(MarlinEnv, 'SHORT_BUILD_VERSION')
     marlin_string_config_h_author = _GetMarlinEnv(MarlinEnv, 'STRING_CONFIG_H_AUTHOR')
 
     # Get firmware upload params
     upload_firmware_source_name = str(source[0])    # Source firmware filename
     upload_speed = env['UPLOAD_SPEED'] if 'UPLOAD_SPEED' in env else 115200
                                                     # baud rate of serial connection
     upload_port = _GetUploadPort(env)               # Serial port to use
 
     # Set local upload params
-    upload_firmware_target_name = os.path.basename(upload_firmware_source_name)     # WARNING! Need rework on "binary_stream" to allow filename > 8.3
+    upload_firmware_target_name = os.path.basename(upload_firmware_source_name)
                                                     # Target firmware filename
     upload_timeout = 1000                           # Communication timout, lossy/slow connections need higher values
     upload_blocksize = 512                          # Transfer block size. 512 = Autodetect
     upload_compression = True                       # Enable compression
     upload_error_ratio = 0                          # Simulated corruption ratio
     upload_test = False                             # Benchmark the serial link without storing the file
     upload_reset = True                             # Trigger a soft reset for firmware update after the upload
 
     # Set local upload params based on board type to change script behavior
     # "upload_delete_old_bins": delete all *.bin files in the root of SD Card
     upload_delete_old_bins = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
-                                                    'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431', 'BOARD_CREALITY_V452',  'BOARD_CREALITY_V453',
+                                                    'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
                                                     'BOARD_CREALITY_V24S1']
     # "upload_random_name": generate a random 8.3 firmware filename to upload
     upload_random_filename = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
-                                                    'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431', 'BOARD_CREALITY_V452',  'BOARD_CREALITY_V453',
+                                                    'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431',  'BOARD_CREALITY_V452', 'BOARD_CREALITY_V453',
                                                     'BOARD_CREALITY_V24S1'] and not marlin_long_filename_host_support
 
     try:
 
         # Start upload job
         print(f"Uploading firmware '{os.path.basename(upload_firmware_target_name)}' to '{marlin_motherboard}' via '{upload_port}'")
 
         # Dump some debug info
         if Debug:
             print('Upload using:')
@@ -251,21 +251,21 @@ def Upload(source, target, env):
         print('Wait for SD card release...')
         time.sleep(1)
         print('Remount SD card')
         protocol.send_ascii('M21')
 
         # Trigger firmware update
         if upload_reset:
             print('Trigger firmware update...')
             protocol.send_ascii('M997', True)
 
-        protocol: protocol.shutdown()
+        protocol.shutdown()
         print('Firmware update completed')
 
     except KeyboardInterrupt:
         if port: port.close()
         if filetransfer: filetransfer.abort()
         if protocol: protocol.shutdown()
         raise
 
     except serial.SerialException as se:
         if port: port.close()

commit d99d0c8a10b2d0ee540e115b15eef24a71028863
Author: Bruno Henrique de Paula <bruno.henriquy@gmail.com>
Date:   Fri Feb 4 18:57:43 2022 -0300

    üìå Distinct BOARD_CREALITY_V422 (#23674)

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index ceb0db4f10..f6b25396ad 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -146,25 +146,27 @@ def Upload(source, target, env):
                                                     # Target firmware filename
     upload_timeout = 1000                           # Communication timout, lossy/slow connections need higher values
     upload_blocksize = 512                          # Transfer block size. 512 = Autodetect
     upload_compression = True                       # Enable compression
     upload_error_ratio = 0                          # Simulated corruption ratio
     upload_test = False                             # Benchmark the serial link without storing the file
     upload_reset = True                             # Trigger a soft reset for firmware update after the upload
 
     # Set local upload params based on board type to change script behavior
     # "upload_delete_old_bins": delete all *.bin files in the root of SD Card
-    upload_delete_old_bins = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V423', 'BOARD_CREALITY_V427',
-                                                    'BOARD_CREALITY_V431', 'BOARD_CREALITY_V452',  'BOARD_CREALITY_V453', 'BOARD_CREALITY_V24S1']
+    upload_delete_old_bins = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
+                                                    'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431', 'BOARD_CREALITY_V452',  'BOARD_CREALITY_V453',
+                                                    'BOARD_CREALITY_V24S1']
     # "upload_random_name": generate a random 8.3 firmware filename to upload
-    upload_random_filename = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V423', 'BOARD_CREALITY_V427',
-                                                    'BOARD_CREALITY_V431', 'BOARD_CREALITY_V452',  'BOARD_CREALITY_V453', 'BOARD_CREALITY_V24S1'] and not marlin_long_filename_host_support
+    upload_random_filename = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V422', 'BOARD_CREALITY_V423',
+                                                    'BOARD_CREALITY_V427', 'BOARD_CREALITY_V431', 'BOARD_CREALITY_V452',  'BOARD_CREALITY_V453',
+                                                    'BOARD_CREALITY_V24S1'] and not marlin_long_filename_host_support
 
     try:
 
         # Start upload job
         print(f"Uploading firmware '{os.path.basename(upload_firmware_target_name)}' to '{marlin_motherboard}' via '{upload_port}'")
 
         # Dump some debug info
         if Debug:
             print('Upload using:')
             print('---- Marlin -----------------------------------')

commit 1e246d65ad160d0a33d598046374f3910d8e4084
Author: GHGiampy <83699429+GHGiampy@users.noreply.github.com>
Date:   Tue Jan 18 07:56:11 2022 +0100

    ‚ú® Long filename open/create/write (#23526)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index bfce4ea49d..ceb0db4f10 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -77,35 +77,40 @@ def Upload(source, target, env):
         _Send('M21')
         Responses = _Recv()
         if len(Responses) < 1 or not any('SD card ok' in r for r in Responses):
             raise Exception('Error accessing SD card')
         if Debug: print('SD Card OK')
         return True
 
     #----------------#
     # File functions #
     #----------------#
-    def _GetFirmwareFiles():
+    def _GetFirmwareFiles(UseLongFilenames):
         if Debug: print('Get firmware files...')
-        _Send('M20 F')
+        _Send(f"M20 F{'L' if UseLongFilenames else ''}")
         Responses = _Recv()
         if len(Responses) < 3 or not any('file list' in r for r in Responses):
             raise Exception('Error getting firmware files')
         if Debug: print('OK')
         return Responses
 
-    def _FilterFirmwareFiles(FirmwareList):
+    def _FilterFirmwareFiles(FirmwareList, UseLongFilenames):
         Firmwares = []
         for FWFile in FirmwareList:
-            if not '/' in FWFile and '.BIN' in FWFile:
-                idx = FWFile.index('.BIN')
-                Firmwares.append(FWFile[:idx+4])
+            # For long filenames take the 3rd column of the firmwares list
+            if UseLongFilenames:
+                Space = 0
+                Space = FWFile.find(' ')
+                if Space >= 0: Space = FWFile.find(' ', Space + 1)
+                if Space >= 0: FWFile = FWFile[Space + 1:]
+            if not '/' in FWFile and '.BIN' in FWFile.upper():
+                Firmwares.append(FWFile[:FWFile.upper().index('.BIN') + 4])
         return Firmwares
 
     def _RemoveFirmwareFile(FirmwareFile):
         _Send(f'M30 /{FirmwareFile}')
         Responses = _Recv()
         Removed = len(Responses) >= 1 and any('File deleted' in r for r in Responses)
         if not Removed:
             raise Exception(f"Firmware file '{FirmwareFile}' not removed")
         return Removed
 
@@ -117,20 +122,22 @@ def Upload(source, target, env):
     protocol = None
     filetransfer = None
 
     # Get Marlin evironment vars
     MarlinEnv = env['MARLIN_FEATURES']
     marlin_pioenv = _GetMarlinEnv(MarlinEnv, 'PIOENV')
     marlin_motherboard = _GetMarlinEnv(MarlinEnv, 'MOTHERBOARD')
     marlin_board_info_name = _GetMarlinEnv(MarlinEnv, 'BOARD_INFO_NAME')
     marlin_board_custom_build_flags = _GetMarlinEnv(MarlinEnv, 'BOARD_CUSTOM_BUILD_FLAGS')
     marlin_firmware_bin = _GetMarlinEnv(MarlinEnv, 'FIRMWARE_BIN')
+    marlin_long_filename_host_support = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_HOST_SUPPORT') is not None
+    marlin_longname_write = _GetMarlinEnv(MarlinEnv, 'LONG_FILENAME_WRITE_SUPPORT') is not None
     marlin_custom_firmware_upload = _GetMarlinEnv(MarlinEnv, 'CUSTOM_FIRMWARE_UPLOAD') is not None
     marlin_short_build_version = _GetMarlinEnv(MarlinEnv, 'SHORT_BUILD_VERSION')
     marlin_string_config_h_author = _GetMarlinEnv(MarlinEnv, 'STRING_CONFIG_H_AUTHOR')
 
     # Get firmware upload params
     upload_firmware_source_name = str(source[0])    # Source firmware filename
     upload_speed = env['UPLOAD_SPEED'] if 'UPLOAD_SPEED' in env else 115200
                                                     # baud rate of serial connection
     upload_port = _GetUploadPort(env)               # Serial port to use
 
@@ -141,77 +148,82 @@ def Upload(source, target, env):
     upload_blocksize = 512                          # Transfer block size. 512 = Autodetect
     upload_compression = True                       # Enable compression
     upload_error_ratio = 0                          # Simulated corruption ratio
     upload_test = False                             # Benchmark the serial link without storing the file
     upload_reset = True                             # Trigger a soft reset for firmware update after the upload
 
     # Set local upload params based on board type to change script behavior
     # "upload_delete_old_bins": delete all *.bin files in the root of SD Card
     upload_delete_old_bins = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V423', 'BOARD_CREALITY_V427',
                                                     'BOARD_CREALITY_V431', 'BOARD_CREALITY_V452',  'BOARD_CREALITY_V453', 'BOARD_CREALITY_V24S1']
+    # "upload_random_name": generate a random 8.3 firmware filename to upload
+    upload_random_filename = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V423', 'BOARD_CREALITY_V427',
+                                                    'BOARD_CREALITY_V431', 'BOARD_CREALITY_V452',  'BOARD_CREALITY_V453', 'BOARD_CREALITY_V24S1'] and not marlin_long_filename_host_support
+
     try:
 
         # Start upload job
         print(f"Uploading firmware '{os.path.basename(upload_firmware_target_name)}' to '{marlin_motherboard}' via '{upload_port}'")
 
         # Dump some debug info
         if Debug:
             print('Upload using:')
-            print('---- Marlin --------------------')
-            print(f' PIOENV                 : {marlin_pioenv}')
-            print(f' SHORT_BUILD_VERSION    : {marlin_short_build_version}')
-            print(f' STRING_CONFIG_H_AUTHOR : {marlin_string_config_h_author}')
-            print(f' MOTHERBOARD            : {marlin_motherboard}')
-            print(f' BOARD_INFO_NAME        : {marlin_board_info_name}')
-            print(f' CUSTOM_BUILD_FLAGS     : {marlin_board_custom_build_flags}')
-            print(f' FIRMWARE_BIN           : {marlin_firmware_bin}')
-            print(f' CUSTOM_FIRMWARE_UPLOAD : {marlin_custom_firmware_upload}')
-            print('---- Upload parameters ---------')
-            print(f' Source      : {upload_firmware_source_name}')
-            print(f' Target      : {upload_firmware_target_name}')
-            print(f' Port        : {upload_port} @ {upload_speed} baudrate')
-            print(f' Timeout     : {upload_timeout}')
-            print(f' Block size  : {upload_blocksize}')
-            print(f' Compression : {upload_compression}')
-            print(f' Error ratio : {upload_error_ratio}')
-            print(f' Test        : {upload_test}')
-            print(f' Reset       : {upload_reset}')
-            print('--------------------------------')
+            print('---- Marlin -----------------------------------')
+            print(f' PIOENV                      : {marlin_pioenv}')
+            print(f' SHORT_BUILD_VERSION         : {marlin_short_build_version}')
+            print(f' STRING_CONFIG_H_AUTHOR      : {marlin_string_config_h_author}')
+            print(f' MOTHERBOARD                 : {marlin_motherboard}')
+            print(f' BOARD_INFO_NAME             : {marlin_board_info_name}')
+            print(f' CUSTOM_BUILD_FLAGS          : {marlin_board_custom_build_flags}')
+            print(f' FIRMWARE_BIN                : {marlin_firmware_bin}')
+            print(f' LONG_FILENAME_HOST_SUPPORT  : {marlin_long_filename_host_support}')
+            print(f' LONG_FILENAME_WRITE_SUPPORT : {marlin_longname_write}')
+            print(f' CUSTOM_FIRMWARE_UPLOAD      : {marlin_custom_firmware_upload}')
+            print('---- Upload parameters ------------------------')
+            print(f' Source                      : {upload_firmware_source_name}')
+            print(f' Target                      : {upload_firmware_target_name}')
+            print(f' Port                        : {upload_port} @ {upload_speed} baudrate')
+            print(f' Timeout                     : {upload_timeout}')
+            print(f' Block size                  : {upload_blocksize}')
+            print(f' Compression                 : {upload_compression}')
+            print(f' Error ratio                 : {upload_error_ratio}')
+            print(f' Test                        : {upload_test}')
+            print(f' Reset                       : {upload_reset}')
+            print('-----------------------------------------------')
 
         # Custom implementations based on board parameters
+        # Generate a new 8.3 random filename
+        if upload_random_filename:
+            upload_firmware_target_name = f"fw-{''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=5))}.BIN"
+            print(f"Board {marlin_motherboard}: Overriding firmware filename to '{upload_firmware_target_name}'")
 
         # Delete all *.bin files on the root of SD Card (if flagged)
         if upload_delete_old_bins:
             # CUSTOM_FIRMWARE_UPLOAD is needed for this feature
             if not marlin_custom_firmware_upload:
                 raise Exception(f"CUSTOM_FIRMWARE_UPLOAD must be enabled in 'Configuration_adv.h' for '{marlin_motherboard}'")
 
-            # Generate a new 8.3 random filename
-            # This board remember the last firmware filename and doesn't allow to flash from that filename
-            upload_firmware_target_name = f"fw-{''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=5))}.BIN"
-            print(f"Board {marlin_motherboard}: Overriding firmware filename to '{upload_firmware_target_name}'")
-
             # Init serial port
             port = serial.Serial(upload_port, baudrate = upload_speed, write_timeout = 0, timeout = 0.1)
             port.reset_input_buffer()
 
             # Check SD card status
             _CheckSDCard()
 
             # Get firmware files
-            FirmwareFiles = _GetFirmwareFiles()
+            FirmwareFiles = _GetFirmwareFiles(marlin_long_filename_host_support)
             if Debug:
                 for FirmwareFile in FirmwareFiles:
                     print(f'Found: {FirmwareFile}')
 
             # Get all 1st level firmware files (to remove)
-            OldFirmwareFiles = _FilterFirmwareFiles(FirmwareFiles[1:len(FirmwareFiles)-2])   # Skip header and footers of list
+            OldFirmwareFiles = _FilterFirmwareFiles(FirmwareFiles[1:len(FirmwareFiles)-2], marlin_long_filename_host_support)   # Skip header and footers of list
             if len(OldFirmwareFiles) == 0:
                 print('No old firmware files to delete')
             else:
                 print(f"Remove {len(OldFirmwareFiles)} old firmware file{'s' if len(OldFirmwareFiles) != 1 else ''}:")
                 for OldFirmwareFile in OldFirmwareFiles:
                     print(f" -Removing- '{OldFirmwareFile}'...")
                     print(' OK' if _RemoveFirmwareFile(OldFirmwareFile) else ' Error!')
 
             # Close serial
             port.close()

commit 08b659747191d3b234c39e81546d845d31d49852
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jan 10 04:49:03 2022 -0600

    üé® Followup to #23462

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
index 4a152067a4..bfce4ea49d 100644
--- a/buildroot/share/scripts/upload.py
+++ b/buildroot/share/scripts/upload.py
@@ -7,21 +7,21 @@ import serial
 
 Import("env")
 
 # Needed (only) for compression, but there are problems with pip install heatshrink
 #try:
 #    import heatshrink
 #except ImportError:
 #    # Install heatshrink
 #    print("Installing 'heatshrink' python module...")
 #    env.Execute(env.subst("$PYTHONEXE -m pip install heatshrink"))
-# 
+#
 # Not tested: If it's safe to install python libraries in PIO python try:
 #    env.Execute(env.subst("$PYTHONEXE -m pip install https://github.com/p3p/pyheatshrink/releases/download/0.3.3/pyheatshrink-pip.zip"))
 
 import MarlinBinaryProtocol
 
 # Internal debug flag
 Debug = False
 
 #-----------------#
 # Upload Callback #
@@ -85,21 +85,21 @@ def Upload(source, target, env):
     # File functions #
     #----------------#
     def _GetFirmwareFiles():
         if Debug: print('Get firmware files...')
         _Send('M20 F')
         Responses = _Recv()
         if len(Responses) < 3 or not any('file list' in r for r in Responses):
             raise Exception('Error getting firmware files')
         if Debug: print('OK')
         return Responses
-        
+
     def _FilterFirmwareFiles(FirmwareList):
         Firmwares = []
         for FWFile in FirmwareList:
             if not '/' in FWFile and '.BIN' in FWFile:
                 idx = FWFile.index('.BIN')
                 Firmwares.append(FWFile[:idx+4])
         return Firmwares
 
     def _RemoveFirmwareFile(FirmwareFile):
         _Send(f'M30 /{FirmwareFile}')
@@ -178,56 +178,56 @@ def Upload(source, target, env):
             print('--------------------------------')
 
         # Custom implementations based on board parameters
 
         # Delete all *.bin files on the root of SD Card (if flagged)
         if upload_delete_old_bins:
             # CUSTOM_FIRMWARE_UPLOAD is needed for this feature
             if not marlin_custom_firmware_upload:
                 raise Exception(f"CUSTOM_FIRMWARE_UPLOAD must be enabled in 'Configuration_adv.h' for '{marlin_motherboard}'")
 
-            # Generate a new 8.3 random filename 
+            # Generate a new 8.3 random filename
             # This board remember the last firmware filename and doesn't allow to flash from that filename
             upload_firmware_target_name = f"fw-{''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=5))}.BIN"
             print(f"Board {marlin_motherboard}: Overriding firmware filename to '{upload_firmware_target_name}'")
 
             # Init serial port
             port = serial.Serial(upload_port, baudrate = upload_speed, write_timeout = 0, timeout = 0.1)
             port.reset_input_buffer()
 
             # Check SD card status
             _CheckSDCard()
-            
+
             # Get firmware files
             FirmwareFiles = _GetFirmwareFiles()
             if Debug:
                 for FirmwareFile in FirmwareFiles:
                     print(f'Found: {FirmwareFile}')
-                
+
             # Get all 1st level firmware files (to remove)
             OldFirmwareFiles = _FilterFirmwareFiles(FirmwareFiles[1:len(FirmwareFiles)-2])   # Skip header and footers of list
             if len(OldFirmwareFiles) == 0:
                 print('No old firmware files to delete')
             else:
                 print(f"Remove {len(OldFirmwareFiles)} old firmware file{'s' if len(OldFirmwareFiles) != 1 else ''}:")
                 for OldFirmwareFile in OldFirmwareFiles:
                     print(f" -Removing- '{OldFirmwareFile}'...")
                     print(' OK' if _RemoveFirmwareFile(OldFirmwareFile) else ' Error!')
 
             # Close serial
             port.close()
 
             # Cleanup completed
             if Debug: print('Cleanup completed')
 
         # WARNING! The serial port must be closed here because the serial transfer that follow needs it!
-    
+
         # Upload firmware file
         if Debug: print(f"Copy '{upload_firmware_source_name}' --> '{upload_firmware_target_name}'")
         protocol = MarlinBinaryProtocol.Protocol(upload_port, upload_speed, upload_blocksize, float(upload_error_ratio), int(upload_timeout))
         #echologger = MarlinBinaryProtocol.EchoProtocol(protocol)
         protocol.connect()
         filetransfer = MarlinBinaryProtocol.FileTransferProtocol(protocol)
         filetransfer.copy(upload_firmware_source_name, upload_firmware_target_name, upload_compression, upload_test)
         protocol.disconnect()
 
         # Notify upload completed

commit 1363b439462af4fac2e9e3a8801abde5981575cf
Author: GHGiampy <83699429+GHGiampy@users.noreply.github.com>
Date:   Sun Jan 9 08:14:03 2022 +0100

    ‚ú® Firmware Upload via Binary Transfer (#23462)

diff --git a/buildroot/share/scripts/upload.py b/buildroot/share/scripts/upload.py
new file mode 100644
index 0000000000..4a152067a4
--- /dev/null
+++ b/buildroot/share/scripts/upload.py
@@ -0,0 +1,274 @@
+import argparse
+import sys
+import os
+import time
+import random
+import serial
+
+Import("env")
+
+# Needed (only) for compression, but there are problems with pip install heatshrink
+#try:
+#    import heatshrink
+#except ImportError:
+#    # Install heatshrink
+#    print("Installing 'heatshrink' python module...")
+#    env.Execute(env.subst("$PYTHONEXE -m pip install heatshrink"))
+# 
+# Not tested: If it's safe to install python libraries in PIO python try:
+#    env.Execute(env.subst("$PYTHONEXE -m pip install https://github.com/p3p/pyheatshrink/releases/download/0.3.3/pyheatshrink-pip.zip"))
+
+import MarlinBinaryProtocol
+
+# Internal debug flag
+Debug = False
+
+#-----------------#
+# Upload Callback #
+#-----------------#
+def Upload(source, target, env):
+
+    #------------------#
+    # Marlin functions #
+    #------------------#
+    def _GetMarlinEnv(marlinEnv, feature):
+        if not marlinEnv: return None
+        return marlinEnv[feature] if feature in marlinEnv else None
+
+    #----------------#
+    # Port functions #
+    #----------------#
+    def _GetUploadPort(env):
+        if Debug: print('Autodetecting upload port...')
+        env.AutodetectUploadPort(env)
+        port = env.subst('$UPLOAD_PORT')
+        if not port:
+            raise Exception('Error detecting the upload port.')
+        if Debug: print('OK')
+        return port
+
+    #-------------------------#
+    # Simple serial functions #
+    #-------------------------#
+    def _Send(data):
+        if Debug: print(f'>> {data}')
+        strdata = bytearray(data, 'utf8') + b'\n'
+        port.write(strdata)
+        time.sleep(0.010)
+
+    def _Recv():
+        clean_responses = []
+        responses = port.readlines()
+        for Resp in responses:
+            # Test: suppress invaid chars (coming from debug info)
+            try:
+                clean_response = Resp.decode('utf8').rstrip().lstrip()
+                clean_responses.append(clean_response)
+            except:
+                pass
+            if Debug: print(f'<< {clean_response}')
+        return clean_responses
+
+    #------------------#
+    # SDCard functions #
+    #------------------#
+    def _CheckSDCard():
+        if Debug: print('Checking SD card...')
+        _Send('M21')
+        Responses = _Recv()
+        if len(Responses) < 1 or not any('SD card ok' in r for r in Responses):
+            raise Exception('Error accessing SD card')
+        if Debug: print('SD Card OK')
+        return True
+
+    #----------------#
+    # File functions #
+    #----------------#
+    def _GetFirmwareFiles():
+        if Debug: print('Get firmware files...')
+        _Send('M20 F')
+        Responses = _Recv()
+        if len(Responses) < 3 or not any('file list' in r for r in Responses):
+            raise Exception('Error getting firmware files')
+        if Debug: print('OK')
+        return Responses
+        
+    def _FilterFirmwareFiles(FirmwareList):
+        Firmwares = []
+        for FWFile in FirmwareList:
+            if not '/' in FWFile and '.BIN' in FWFile:
+                idx = FWFile.index('.BIN')
+                Firmwares.append(FWFile[:idx+4])
+        return Firmwares
+
+    def _RemoveFirmwareFile(FirmwareFile):
+        _Send(f'M30 /{FirmwareFile}')
+        Responses = _Recv()
+        Removed = len(Responses) >= 1 and any('File deleted' in r for r in Responses)
+        if not Removed:
+            raise Exception(f"Firmware file '{FirmwareFile}' not removed")
+        return Removed
+
+
+    #---------------------#
+    # Callback Entrypoint #
+    #---------------------#
+    port = None
+    protocol = None
+    filetransfer = None
+
+    # Get Marlin evironment vars
+    MarlinEnv = env['MARLIN_FEATURES']
+    marlin_pioenv = _GetMarlinEnv(MarlinEnv, 'PIOENV')
+    marlin_motherboard = _GetMarlinEnv(MarlinEnv, 'MOTHERBOARD')
+    marlin_board_info_name = _GetMarlinEnv(MarlinEnv, 'BOARD_INFO_NAME')
+    marlin_board_custom_build_flags = _GetMarlinEnv(MarlinEnv, 'BOARD_CUSTOM_BUILD_FLAGS')
+    marlin_firmware_bin = _GetMarlinEnv(MarlinEnv, 'FIRMWARE_BIN')
+    marlin_custom_firmware_upload = _GetMarlinEnv(MarlinEnv, 'CUSTOM_FIRMWARE_UPLOAD') is not None
+    marlin_short_build_version = _GetMarlinEnv(MarlinEnv, 'SHORT_BUILD_VERSION')
+    marlin_string_config_h_author = _GetMarlinEnv(MarlinEnv, 'STRING_CONFIG_H_AUTHOR')
+
+    # Get firmware upload params
+    upload_firmware_source_name = str(source[0])    # Source firmware filename
+    upload_speed = env['UPLOAD_SPEED'] if 'UPLOAD_SPEED' in env else 115200
+                                                    # baud rate of serial connection
+    upload_port = _GetUploadPort(env)               # Serial port to use
+
+    # Set local upload params
+    upload_firmware_target_name = os.path.basename(upload_firmware_source_name)     # WARNING! Need rework on "binary_stream" to allow filename > 8.3
+                                                    # Target firmware filename
+    upload_timeout = 1000                           # Communication timout, lossy/slow connections need higher values
+    upload_blocksize = 512                          # Transfer block size. 512 = Autodetect
+    upload_compression = True                       # Enable compression
+    upload_error_ratio = 0                          # Simulated corruption ratio
+    upload_test = False                             # Benchmark the serial link without storing the file
+    upload_reset = True                             # Trigger a soft reset for firmware update after the upload
+
+    # Set local upload params based on board type to change script behavior
+    # "upload_delete_old_bins": delete all *.bin files in the root of SD Card
+    upload_delete_old_bins = marlin_motherboard in ['BOARD_CREALITY_V4',   'BOARD_CREALITY_V4210', 'BOARD_CREALITY_V423', 'BOARD_CREALITY_V427',
+                                                    'BOARD_CREALITY_V431', 'BOARD_CREALITY_V452',  'BOARD_CREALITY_V453', 'BOARD_CREALITY_V24S1']
+    try:
+
+        # Start upload job
+        print(f"Uploading firmware '{os.path.basename(upload_firmware_target_name)}' to '{marlin_motherboard}' via '{upload_port}'")
+
+        # Dump some debug info
+        if Debug:
+            print('Upload using:')
+            print('---- Marlin --------------------')
+            print(f' PIOENV                 : {marlin_pioenv}')
+            print(f' SHORT_BUILD_VERSION    : {marlin_short_build_version}')
+            print(f' STRING_CONFIG_H_AUTHOR : {marlin_string_config_h_author}')
+            print(f' MOTHERBOARD            : {marlin_motherboard}')
+            print(f' BOARD_INFO_NAME        : {marlin_board_info_name}')
+            print(f' CUSTOM_BUILD_FLAGS     : {marlin_board_custom_build_flags}')
+            print(f' FIRMWARE_BIN           : {marlin_firmware_bin}')
+            print(f' CUSTOM_FIRMWARE_UPLOAD : {marlin_custom_firmware_upload}')
+            print('---- Upload parameters ---------')
+            print(f' Source      : {upload_firmware_source_name}')
+            print(f' Target      : {upload_firmware_target_name}')
+            print(f' Port        : {upload_port} @ {upload_speed} baudrate')
+            print(f' Timeout     : {upload_timeout}')
+            print(f' Block size  : {upload_blocksize}')
+            print(f' Compression : {upload_compression}')
+            print(f' Error ratio : {upload_error_ratio}')
+            print(f' Test        : {upload_test}')
+            print(f' Reset       : {upload_reset}')
+            print('--------------------------------')
+
+        # Custom implementations based on board parameters
+
+        # Delete all *.bin files on the root of SD Card (if flagged)
+        if upload_delete_old_bins:
+            # CUSTOM_FIRMWARE_UPLOAD is needed for this feature
+            if not marlin_custom_firmware_upload:
+                raise Exception(f"CUSTOM_FIRMWARE_UPLOAD must be enabled in 'Configuration_adv.h' for '{marlin_motherboard}'")
+
+            # Generate a new 8.3 random filename 
+            # This board remember the last firmware filename and doesn't allow to flash from that filename
+            upload_firmware_target_name = f"fw-{''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=5))}.BIN"
+            print(f"Board {marlin_motherboard}: Overriding firmware filename to '{upload_firmware_target_name}'")
+
+            # Init serial port
+            port = serial.Serial(upload_port, baudrate = upload_speed, write_timeout = 0, timeout = 0.1)
+            port.reset_input_buffer()
+
+            # Check SD card status
+            _CheckSDCard()
+            
+            # Get firmware files
+            FirmwareFiles = _GetFirmwareFiles()
+            if Debug:
+                for FirmwareFile in FirmwareFiles:
+                    print(f'Found: {FirmwareFile}')
+                
+            # Get all 1st level firmware files (to remove)
+            OldFirmwareFiles = _FilterFirmwareFiles(FirmwareFiles[1:len(FirmwareFiles)-2])   # Skip header and footers of list
+            if len(OldFirmwareFiles) == 0:
+                print('No old firmware files to delete')
+            else:
+                print(f"Remove {len(OldFirmwareFiles)} old firmware file{'s' if len(OldFirmwareFiles) != 1 else ''}:")
+                for OldFirmwareFile in OldFirmwareFiles:
+                    print(f" -Removing- '{OldFirmwareFile}'...")
+                    print(' OK' if _RemoveFirmwareFile(OldFirmwareFile) else ' Error!')
+
+            # Close serial
+            port.close()
+
+            # Cleanup completed
+            if Debug: print('Cleanup completed')
+
+        # WARNING! The serial port must be closed here because the serial transfer that follow needs it!
+    
+        # Upload firmware file
+        if Debug: print(f"Copy '{upload_firmware_source_name}' --> '{upload_firmware_target_name}'")
+        protocol = MarlinBinaryProtocol.Protocol(upload_port, upload_speed, upload_blocksize, float(upload_error_ratio), int(upload_timeout))
+        #echologger = MarlinBinaryProtocol.EchoProtocol(protocol)
+        protocol.connect()
+        filetransfer = MarlinBinaryProtocol.FileTransferProtocol(protocol)
+        filetransfer.copy(upload_firmware_source_name, upload_firmware_target_name, upload_compression, upload_test)
+        protocol.disconnect()
+
+        # Notify upload completed
+        protocol.send_ascii('M117 Firmware uploaded')
+
+        # Remount SD card
+        print('Wait for SD card release...')
+        time.sleep(1)
+        print('Remount SD card')
+        protocol.send_ascii('M21')
+
+        # Trigger firmware update
+        if upload_reset:
+            print('Trigger firmware update...')
+            protocol.send_ascii('M997', True)
+
+        protocol: protocol.shutdown()
+        print('Firmware update completed')
+
+    except KeyboardInterrupt:
+        if port: port.close()
+        if filetransfer: filetransfer.abort()
+        if protocol: protocol.shutdown()
+        raise
+
+    except serial.SerialException as se:
+        if port: port.close()
+        print(f'Serial excepion: {se}')
+        raise Exception(se)
+
+    except MarlinBinaryProtocol.FatalError:
+        if port: port.close()
+        if protocol: protocol.shutdown()
+        print('Too many retries, Abort')
+        raise
+
+    except:
+        if port: port.close()
+        if protocol: protocol.shutdown()
+        print('Firmware not updated')
+        raise
+
+# Attach custom upload callback
+env.Replace(UPLOADCMD=Upload)
