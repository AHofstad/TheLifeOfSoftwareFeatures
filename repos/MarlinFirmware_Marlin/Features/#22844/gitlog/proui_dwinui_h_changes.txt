commit 46e426ce9648682b1c59b75b4eabb9e647c18b05
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Sun May 12 13:28:38 2024 -0500

    üìù Use "based on" for partial ProUI (#26998)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 27825b0869..f606c24400 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -16,21 +16,22 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 /**
  * DWIN Enhanced implementation for PRO UI
- * Author: Miguel A. Risco-Castillo (MRISCOC)
+ * Based on the original work of: Miguel Risco-Castillo (MRISCOC)
+ * https://github.com/mriscoc/Ender3V2S1
  * Version: 3.21.1
  * Date: 2023/03/21
  */
 
 #include "../../../inc/MarlinConfigPre.h"
 
 #include "../common/dwin_set.h"
 #include "../common/dwin_font.h"
 #include "../common/dwin_color.h"
 #include "dwin_lcd.h"

commit 87e94f456348e944ba4487aed436c762dd718966
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon Apr 1 16:05:11 2024 -0400

    üö∏ Update ProUI Plot graph - part 2 (#26563)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index b0ff00c527..27825b0869 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -29,125 +29,140 @@
  */
 
 #include "../../../inc/MarlinConfigPre.h"
 
 #include "../common/dwin_set.h"
 #include "../common/dwin_font.h"
 #include "../common/dwin_color.h"
 #include "dwin_lcd.h"
 
 // Extra Icons
+#define ICON_Printer_0         93
+#define ICON_Box              200
+#define ICON_Checkbox         201
+#define ICON_Fade             202
+#define ICON_Mesh             203
+#define ICON_Tilt             204
+#define ICON_Brightness       205
+#define ICON_Probe            206
+#define ICON_AxisD            249
+#define ICON_AxisBR           250
+#define ICON_AxisTR           251
+#define ICON_AxisBL           252
+#define ICON_AxisTL           253
+#define ICON_AxisC            254
+
 #define ICON_BedSizeX         ICON_PrintSize
 #define ICON_BedSizeY         ICON_PrintSize
 #define ICON_BedTramming      ICON_SetHome
 #define ICON_Binary           ICON_Contact
-#define ICON_BltouchReset     ICON_StockConfiguration
-#define ICON_Brightness       ICON_Motion
+#define ICON_BLTouchReset     ICON_ResetEEPROM
 #define ICON_Cancel           ICON_StockConfiguration
-#define ICON_CustomPreheat    ICON_SetEndTemp
+#define ICON_CustomPreheat    ICON_BedTemp
 #define ICON_Error            ICON_TempTooHigh
 #define ICON_esDiag           ICON_Info
 #define ICON_ExtrudeMinT      ICON_HotendTemp
 #define ICON_FilLoad          ICON_WriteEEPROM
 #define ICON_FilMan           ICON_ResetEEPROM
 #define ICON_FilSet           ICON_ResetEEPROM
 #define ICON_FilUnload        ICON_ReadEEPROM
 #define ICON_Flow             ICON_StepE
 #define ICON_HomeX            ICON_MoveX
 #define ICON_HomeY            ICON_MoveY
 #define ICON_HomeZ            ICON_MoveZ
-#define ICON_HSMode           ICON_StockConfiguration
+#define ICON_HSMode           ICON_MaxAccZ
 #define ICON_InputShaping     ICON_MaxAccelerated
 #define ICON_JDmm             ICON_MaxJerk
-#define ICON_Tram             ICON_SetEndTemp
-#define ICON_Level            ICON_HotendTemp
-#define ICON_Lock             ICON_Cool
-#define ICON_ManualMesh       ICON_HotendTemp
+#define ICON_Level            ICON_Mesh
+#define ICON_Lock             ICON_Checkbox
+#define ICON_ManualMesh       ICON_Mesh
 #define ICON_MaxPosX          ICON_MoveX
 #define ICON_MaxPosY          ICON_MoveY
 #define ICON_MaxPosZ          ICON_MoveZ
-#define ICON_MeshEdit         ICON_Homing
+#define ICON_MeshEdit         ICON_Fade
 #define ICON_MeshEditX        ICON_MoveX
 #define ICON_MeshEditY        ICON_MoveY
-#define ICON_MeshEditZ        ICON_MoveZ
-#define ICON_MeshNext         ICON_Axis
-#define ICON_MeshPoints       ICON_SetEndTemp
-#define ICON_MeshReset        ICON_StockConfiguration
+#define ICON_MeshEditZ        ICON_Zoffset
+#define ICON_MeshNext         ICON_AxisD
+#define ICON_MeshPoints       ICON_HotendTemp
+#define ICON_MeshReset        ICON_ResetEEPROM
 #define ICON_MeshSave         ICON_WriteEEPROM
-#define ICON_MeshViewer       ICON_HotendTemp
-#define ICON_MoveZ0           ICON_HotendTemp
-#define ICON_Park             ICON_Motion
-#define ICON_ParkPos          ICON_AdvSet
+#define ICON_MeshViewer       ICON_Mesh
+#define ICON_MoveZ0           ICON_CloseMotor
+#define ICON_Park             ICON_SetHome
+#define ICON_ParkPos          ICON_AxisC
 #define ICON_ParkPosX         ICON_StepX
 #define ICON_ParkPosY         ICON_StepY
 #define ICON_ParkPosZ         ICON_StepZ
 #define ICON_PhySet           ICON_PrintSize
 #define ICON_PIDCycles        ICON_ResetEEPROM
 #define ICON_PIDValue         ICON_Contact
 #define ICON_PrintStats       ICON_PrintTime
 #define ICON_PrintStatsReset  ICON_RemainTime
 #define ICON_Preheat1         ICON_PLAPreheat
 #define ICON_Preheat2         ICON_ABSPreheat
 #define ICON_Preheat3         ICON_CustomPreheat
 #define ICON_Preheat4         ICON_CustomPreheat
 #define ICON_Preheat5         ICON_CustomPreheat
 #define ICON_Preheat6         ICON_CustomPreheat
 #define ICON_Preheat7         ICON_CustomPreheat
 #define ICON_Preheat8         ICON_CustomPreheat
 #define ICON_Preheat9         ICON_CustomPreheat
 #define ICON_Preheat10        ICON_CustomPreheat
-#define ICON_ProbeDeploy      ICON_SetEndTemp
+#define ICON_ProbeDeploy      ICON_Probe
 #define ICON_ProbeMargin      ICON_PrintSize
 #define ICON_ProbeSet         ICON_SetEndTemp
-#define ICON_ProbeStow        ICON_SetEndTemp
-#define ICON_ProbeTest        ICON_SetEndTemp
+#define ICON_ProbeStow        ICON_Tilt
+#define ICON_ProbeTest        ICON_Zoffset
 #define ICON_ProbeZSpeed      ICON_MaxSpeedZ
 #define ICON_Pwrlossr         ICON_Motion
 #define ICON_Reboot           ICON_ResetEEPROM
 #define ICON_Runout           ICON_MaxAccE
 #define ICON_Scolor           ICON_MaxSpeed
 #define ICON_SetBaudRate      ICON_Setspeed
-#define ICON_SetCustomPreheat ICON_SetEndTemp
+#define ICON_SetCustomPreheat ICON_BedTemp
 #define ICON_SetPreheat1      ICON_SetPLAPreheat
 #define ICON_SetPreheat2      ICON_SetABSPreheat
 #define ICON_SetPreheat3      ICON_SetCustomPreheat
 #define ICON_SetPreheat4      ICON_SetCustomPreheat
 #define ICON_SetPreheat5      ICON_SetCustomPreheat
 #define ICON_SetPreheat6      ICON_SetCustomPreheat
 #define ICON_SetPreheat7      ICON_SetCustomPreheat
 #define ICON_SetPreheat8      ICON_SetCustomPreheat
 #define ICON_SetPreheat9      ICON_SetCustomPreheat
 #define ICON_SetPreheat10     ICON_SetCustomPreheat
 #define ICON_ShapingX         ICON_MoveX
 #define ICON_ShapingY         ICON_MoveY
 #define ICON_Sound            ICON_Cool
 #define ICON_TMCSet           ICON_PrintSize
 #define ICON_TMCXSet          ICON_MoveX
 #define ICON_TMCYSet          ICON_MoveY
 #define ICON_TMCZSet          ICON_MoveZ
 #define ICON_TMCESet          ICON_Extruder
-#define ICON_UBLActive        ICON_HotendTemp
+#define ICON_Tram             ICON_Step
+#define ICON_UBLActive        ICON_Fade
 #define ICON_UBLSlot          ICON_ResetEEPROM
 #define ICON_UBLMeshSave      ICON_WriteEEPROM
 #define ICON_UBLMeshLoad      ICON_ReadEEPROM
-#define ICON_UBLTiltGrid      ICON_PrintSize
 #define ICON_UBLSmartFill     ICON_StockConfiguration
-#define ICON_ZAfterHome       ICON_SetEndTemp
+#define ICON_UBLTiltGrid      ICON_Tilt
+#define ICON_ZAfterHome       ICON_Tilt
 
+// LED Lights
 #define ICON_CaseLight        ICON_Motion
 #define ICON_LedControl       ICON_Motion
 
 // MPC
-#define ICON_MPCNozzle        ICON_SetEndTemp
+#define ICON_MPCNozzle        ICON_HotendTemp
 #define ICON_MPCValue         ICON_Contact
 #define ICON_MPCHeater        ICON_Temperature
-#define ICON_MPCHeatCap       ICON_SetBedTemp
+#define ICON_MPCHeatCap       ICON_BedTemp
 #define ICON_MPCFan           ICON_FanSpeed
 
 // Buttons
 #define BTN_Continue          85
 #define BTN_Cancel            87
 #define BTN_Confirm           89
 #define BTN_Print             90
 #define BTN_Save              91
 #define BTN_Purge             92
 
@@ -293,34 +308,34 @@ namespace DWINUI {
     t.w = frame.w + 2 * v;
     t.h = frame.h + 2 * v;
     return t;
   }
 
   // Draw an Icon and select library automatically
   //  BG: The icon background display: false=Background filtering is not displayed, true=Background display
   //  libID: Icon library ID
   //  picID: Icon ID
   //  x/y: Upper-left point
-  void ICON_Show(bool BG, uint8_t icon, uint16_t x, uint16_t y);
+  void iconShow(bool BG, uint8_t icon, uint16_t x, uint16_t y);
 
   // Draw an Icon with transparent background from the library ICON
   //  icon: Icon ID
   //  x/y: Upper-left point
   inline void drawIcon(uint8_t icon, uint16_t x, uint16_t y) {
-    ICON_Show(false, icon, x, y);
+    iconShow(false, icon, x, y);
   }
 
   // Draw an Icon from the library ICON with its background
   //  icon: Icon ID
   //  x/y: Upper-left point
   inline void drawIconWB(uint8_t icon, uint16_t x, uint16_t y) {
-    ICON_Show(true, icon, x, y);
+    iconShow(true, icon, x, y);
   }
 
   // Draw a numeric integer value
   //  bShow: true=display background color; false=don't display background color
   //  signedMode: 1=signed; 0=unsigned
   //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  iNum: Number of digits
   //  x/y: Upper-left coordinate
@@ -479,20 +494,23 @@ namespace DWINUI {
   }
 
   // Draw a centered string using DWIN_WIDTH
   //  bShow: true=display background color; false=don't display background color
   //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  y: Upper coordinate of the string
   //  *string: The string
   void drawCenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string);
+  inline void drawCenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t x, uint16_t y, const char * const string) {
+    drawCenteredString(bShow, fid, color, bColor, 2 * x, 0, y, string);
+  }
   inline void drawCenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t y, const char * const string) {
     drawCenteredString(bShow, fid, color, bColor, 0, DWIN_WIDTH, y, string);
   }
   inline void drawCenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t y, FSTR_P string) {
     drawCenteredString(bShow, fid, color, bColor, y, FTOP(string));
   }
   inline void drawCenteredString(uint16_t color, uint16_t bcolor, uint16_t y, const char * const string) {
     drawCenteredString(true, fontID, color, bcolor, y, string);
   }
   inline void drawCenteredString(fontid_t fid, uint16_t color, uint16_t y, const char * const string) {

commit dd3b5a10a09e2a83918af1cf6f8782fd0c473f98
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 21 22:00:37 2024 -0600

    Misc. aesthetic adjustments
    
    Co-Authored-By: Andrew <18502096+classicrocker883@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 97da3f05ab..b0ff00c527 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -146,42 +146,41 @@
 // Buttons
 #define BTN_Continue          85
 #define BTN_Cancel            87
 #define BTN_Confirm           89
 #define BTN_Print             90
 #define BTN_Save              91
 #define BTN_Purge             92
 
 // Extended and default UI Colors
 #define COLOR_BLACK           0
-#define COLOR_GREEN           RGB(0,63,0)
-#define COLOR_AQUA            RGB(0,63,31)
-#define COLOR_BLUE            RGB(0,0,31)
+#define COLOR_GREEN           RGB(0, 63, 0)
+#define COLOR_BLUE            RGB(0, 0, 31)
 #define COLOR_LIGHT_WHITE     0xBDD7
 #define COLOR_LIGHT_GREEN     0x3460
 #define COLOR_CYAN            0x07FF
 #define COLOR_LIGHT_CYAN      0x04F3
 #define COLOR_LIGHT_BLUE      0x3A6A
 #define COLOR_MAGENTA         0xF81F
 #define COLOR_LIGHT_MAGENTA   0x9813
 #define COLOR_LIGHT_RED       0x8800
 #define COLOR_ORANGE          0xFA20
 #define COLOR_LIGHT_ORANGE    0xFBC0
 #define COLOR_LIGHT_YELLOW    0x8BE0
 #define COLOR_BROWN           0xCC27
 #define COLOR_LIGHT_BROWN     0x6204
 #define COLOR_GREY            0x18E3
 
 // UI element defines and constants
-#define DWIN_FONT_MENU font8x16
-#define DWIN_FONT_STAT font10x20
-#define DWIN_FONT_HEAD font10x20
+#define DWIN_FONT_MENU  font8x16
+#define DWIN_FONT_STAT  font10x20
+#define DWIN_FONT_HEAD  font10x20
 #define DWIN_FONT_ALERT font10x20
 #define STATUS_Y 354
 #define LCD_WIDTH (DWIN_WIDTH / 8)  // only if the default fontID is font8x16
 
 // Minimum unit (0.1) : multiple (10)
 #define UNITFDIGITS 1
 #define MINUNITMULT POW(10, UNITFDIGITS)
 
 /**
  * @brief Menu Line Spacing

commit 0f0955492994f4a7f4649c22e0f3aa5cc71541d7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Dec 24 14:53:09 2023 -0600

    üßë‚Äçüíª DWIN icon updates, etc.

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 636b4fbbad..97da3f05ab 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -29,138 +29,126 @@
  */
 
 #include "../../../inc/MarlinConfigPre.h"
 
 #include "../common/dwin_set.h"
 #include "../common/dwin_font.h"
 #include "../common/dwin_color.h"
 #include "dwin_lcd.h"
 
 // Extra Icons
-#define ICON_AdvSet               ICON_Language
-#define ICON_BedSizeX             ICON_PrintSize
-#define ICON_BedSizeY             ICON_PrintSize
-#define ICON_BedTramming          ICON_SetHome
-#define ICON_Binary               ICON_Contact
-#define ICON_BltouchReset         ICON_StockConfiguration
-#define ICON_Brightness           ICON_Motion
-#define ICON_Cancel               ICON_StockConfiguration
-#define ICON_CustomPreheat        ICON_SetEndTemp
-#define ICON_Error                ICON_TempTooHigh
-#define ICON_esDiag               ICON_Info
-#define ICON_ExtrudeMinT          ICON_HotendTemp
-#define ICON_FilLoad              ICON_WriteEEPROM
-#define ICON_FilMan               ICON_ResumeEEPROM
-#define ICON_FilSet               ICON_ResumeEEPROM
-#define ICON_FilUnload            ICON_ReadEEPROM
-#define ICON_Flow                 ICON_StepE
-#define ICON_Folder               ICON_More
-#define ICON_HomeX                ICON_MoveX
-#define ICON_HomeY                ICON_MoveY
-#define ICON_HomeZ                ICON_MoveZ
-#define ICON_HomeOffset           ICON_AdvSet
-#define ICON_HomeOffsetX          ICON_StepX
-#define ICON_HomeOffsetY          ICON_StepY
-#define ICON_HomeOffsetZ          ICON_StepZ
-#define ICON_HSMode               ICON_StockConfiguration
-#define ICON_InputShaping         ICON_MaxAccelerated
-#define ICON_JDmm                 ICON_MaxJerk
-#define ICON_Tram                 ICON_SetEndTemp
-#define ICON_Level                ICON_HotendTemp
-#define ICON_Lock                 ICON_Cool
-#define ICON_ManualMesh           ICON_HotendTemp
-#define ICON_MaxPosX              ICON_MoveX
-#define ICON_MaxPosY              ICON_MoveY
-#define ICON_MaxPosZ              ICON_MoveZ
-#define ICON_MeshEdit             ICON_Homing
-#define ICON_MeshEditX            ICON_MoveX
-#define ICON_MeshEditY            ICON_MoveY
-#define ICON_MeshEditZ            ICON_MoveZ
-#define ICON_MeshNext             ICON_Axis
-#define ICON_MeshPoints           ICON_SetEndTemp
-#define ICON_MeshReset            ICON_StockConfiguration
-#define ICON_MeshSave             ICON_WriteEEPROM
-#define ICON_MeshViewer           ICON_HotendTemp
-#define ICON_MoveZ0               ICON_HotendTemp
-#define ICON_Park                 ICON_Motion
-#define ICON_ParkPos              ICON_AdvSet
-#define ICON_ParkPosX             ICON_StepX
-#define ICON_ParkPosY             ICON_StepY
-#define ICON_ParkPosZ             ICON_StepZ
-#define ICON_PhySet               ICON_PrintSize
-#define ICON_PIDNozzle            ICON_SetEndTemp
-#define ICON_PIDBed               ICON_SetBedTemp
-#define ICON_PIDCycles            ICON_ResumeEEPROM
-#define ICON_PIDValue             ICON_Contact
-#define ICON_PrintStats           ICON_PrintTime
-#define ICON_PrintStatsReset      ICON_RemainTime
-#define ICON_Preheat1             ICON_PLAPreheat
-#define ICON_Preheat2             ICON_ABSPreheat
-#define ICON_Preheat3             ICON_CustomPreheat
-#define ICON_Preheat4             ICON_CustomPreheat
-#define ICON_Preheat5             ICON_CustomPreheat
-#define ICON_Preheat6             ICON_CustomPreheat
-#define ICON_Preheat7             ICON_CustomPreheat
-#define ICON_Preheat8             ICON_CustomPreheat
-#define ICON_Preheat9             ICON_CustomPreheat
-#define ICON_Preheat10            ICON_CustomPreheat
-#define ICON_ProbeDeploy          ICON_SetEndTemp
-#define ICON_ProbeMargin          ICON_PrintSize
-#define ICON_ProbeOffsetX         ICON_StepX
-#define ICON_ProbeOffsetY         ICON_StepY
-#define ICON_ProbeOffsetZ         ICON_StepZ
-#define ICON_ProbeSet             ICON_SetEndTemp
-#define ICON_ProbeStow            ICON_SetEndTemp
-#define ICON_ProbeTest            ICON_SetEndTemp
-#define ICON_ProbeZSpeed          ICON_MaxSpeedZ
-#define ICON_Pwrlossr             ICON_Motion
-#define ICON_Reboot               ICON_ResumeEEPROM
-#define ICON_Runout               ICON_MaxAccE
-#define ICON_Scolor               ICON_MaxSpeed
-#define ICON_SetBaudRate          ICON_Setspeed
-#define ICON_SetCustomPreheat     ICON_SetEndTemp
-#define ICON_SetPreheat1          ICON_SetPLAPreheat
-#define ICON_SetPreheat2          ICON_SetABSPreheat
-#define ICON_SetPreheat3          ICON_SetCustomPreheat
-#define ICON_SetPreheat4          ICON_SetCustomPreheat
-#define ICON_SetPreheat5          ICON_SetCustomPreheat
-#define ICON_SetPreheat6          ICON_SetCustomPreheat
-#define ICON_SetPreheat7          ICON_SetCustomPreheat
-#define ICON_SetPreheat8          ICON_SetCustomPreheat
-#define ICON_SetPreheat9          ICON_SetCustomPreheat
-#define ICON_SetPreheat10         ICON_SetCustomPreheat
-#define ICON_ShapingX             ICON_MoveX
-#define ICON_ShapingY             ICON_MoveY
-#define ICON_Sound                ICON_Cool
-#define ICON_TMCSet               ICON_PrintSize
-#define ICON_TMCXSet              ICON_MoveX
-#define ICON_TMCYSet              ICON_MoveY
-#define ICON_TMCZSet              ICON_MoveZ
-#define ICON_TMCESet              ICON_Extruder
-#define ICON_UBLActive            ICON_HotendTemp
-#define ICON_UBLActive            ICON_HotendTemp
-#define ICON_UBLSlot              ICON_ResumeEEPROM
-#define ICON_UBLMeshSave          ICON_WriteEEPROM
-#define ICON_UBLMeshLoad          ICON_ReadEEPROM
-#define ICON_UBLTiltGrid          ICON_PrintSize
-#define ICON_UBLSmartFill         ICON_StockConfiguration
-#define ICON_ZAfterHome           ICON_SetEndTemp
-
-#define ICON_CaseLight            ICON_Motion
-#define ICON_LedControl           ICON_Motion
+#define ICON_BedSizeX         ICON_PrintSize
+#define ICON_BedSizeY         ICON_PrintSize
+#define ICON_BedTramming      ICON_SetHome
+#define ICON_Binary           ICON_Contact
+#define ICON_BltouchReset     ICON_StockConfiguration
+#define ICON_Brightness       ICON_Motion
+#define ICON_Cancel           ICON_StockConfiguration
+#define ICON_CustomPreheat    ICON_SetEndTemp
+#define ICON_Error            ICON_TempTooHigh
+#define ICON_esDiag           ICON_Info
+#define ICON_ExtrudeMinT      ICON_HotendTemp
+#define ICON_FilLoad          ICON_WriteEEPROM
+#define ICON_FilMan           ICON_ResetEEPROM
+#define ICON_FilSet           ICON_ResetEEPROM
+#define ICON_FilUnload        ICON_ReadEEPROM
+#define ICON_Flow             ICON_StepE
+#define ICON_HomeX            ICON_MoveX
+#define ICON_HomeY            ICON_MoveY
+#define ICON_HomeZ            ICON_MoveZ
+#define ICON_HSMode           ICON_StockConfiguration
+#define ICON_InputShaping     ICON_MaxAccelerated
+#define ICON_JDmm             ICON_MaxJerk
+#define ICON_Tram             ICON_SetEndTemp
+#define ICON_Level            ICON_HotendTemp
+#define ICON_Lock             ICON_Cool
+#define ICON_ManualMesh       ICON_HotendTemp
+#define ICON_MaxPosX          ICON_MoveX
+#define ICON_MaxPosY          ICON_MoveY
+#define ICON_MaxPosZ          ICON_MoveZ
+#define ICON_MeshEdit         ICON_Homing
+#define ICON_MeshEditX        ICON_MoveX
+#define ICON_MeshEditY        ICON_MoveY
+#define ICON_MeshEditZ        ICON_MoveZ
+#define ICON_MeshNext         ICON_Axis
+#define ICON_MeshPoints       ICON_SetEndTemp
+#define ICON_MeshReset        ICON_StockConfiguration
+#define ICON_MeshSave         ICON_WriteEEPROM
+#define ICON_MeshViewer       ICON_HotendTemp
+#define ICON_MoveZ0           ICON_HotendTemp
+#define ICON_Park             ICON_Motion
+#define ICON_ParkPos          ICON_AdvSet
+#define ICON_ParkPosX         ICON_StepX
+#define ICON_ParkPosY         ICON_StepY
+#define ICON_ParkPosZ         ICON_StepZ
+#define ICON_PhySet           ICON_PrintSize
+#define ICON_PIDCycles        ICON_ResetEEPROM
+#define ICON_PIDValue         ICON_Contact
+#define ICON_PrintStats       ICON_PrintTime
+#define ICON_PrintStatsReset  ICON_RemainTime
+#define ICON_Preheat1         ICON_PLAPreheat
+#define ICON_Preheat2         ICON_ABSPreheat
+#define ICON_Preheat3         ICON_CustomPreheat
+#define ICON_Preheat4         ICON_CustomPreheat
+#define ICON_Preheat5         ICON_CustomPreheat
+#define ICON_Preheat6         ICON_CustomPreheat
+#define ICON_Preheat7         ICON_CustomPreheat
+#define ICON_Preheat8         ICON_CustomPreheat
+#define ICON_Preheat9         ICON_CustomPreheat
+#define ICON_Preheat10        ICON_CustomPreheat
+#define ICON_ProbeDeploy      ICON_SetEndTemp
+#define ICON_ProbeMargin      ICON_PrintSize
+#define ICON_ProbeSet         ICON_SetEndTemp
+#define ICON_ProbeStow        ICON_SetEndTemp
+#define ICON_ProbeTest        ICON_SetEndTemp
+#define ICON_ProbeZSpeed      ICON_MaxSpeedZ
+#define ICON_Pwrlossr         ICON_Motion
+#define ICON_Reboot           ICON_ResetEEPROM
+#define ICON_Runout           ICON_MaxAccE
+#define ICON_Scolor           ICON_MaxSpeed
+#define ICON_SetBaudRate      ICON_Setspeed
+#define ICON_SetCustomPreheat ICON_SetEndTemp
+#define ICON_SetPreheat1      ICON_SetPLAPreheat
+#define ICON_SetPreheat2      ICON_SetABSPreheat
+#define ICON_SetPreheat3      ICON_SetCustomPreheat
+#define ICON_SetPreheat4      ICON_SetCustomPreheat
+#define ICON_SetPreheat5      ICON_SetCustomPreheat
+#define ICON_SetPreheat6      ICON_SetCustomPreheat
+#define ICON_SetPreheat7      ICON_SetCustomPreheat
+#define ICON_SetPreheat8      ICON_SetCustomPreheat
+#define ICON_SetPreheat9      ICON_SetCustomPreheat
+#define ICON_SetPreheat10     ICON_SetCustomPreheat
+#define ICON_ShapingX         ICON_MoveX
+#define ICON_ShapingY         ICON_MoveY
+#define ICON_Sound            ICON_Cool
+#define ICON_TMCSet           ICON_PrintSize
+#define ICON_TMCXSet          ICON_MoveX
+#define ICON_TMCYSet          ICON_MoveY
+#define ICON_TMCZSet          ICON_MoveZ
+#define ICON_TMCESet          ICON_Extruder
+#define ICON_UBLActive        ICON_HotendTemp
+#define ICON_UBLSlot          ICON_ResetEEPROM
+#define ICON_UBLMeshSave      ICON_WriteEEPROM
+#define ICON_UBLMeshLoad      ICON_ReadEEPROM
+#define ICON_UBLTiltGrid      ICON_PrintSize
+#define ICON_UBLSmartFill     ICON_StockConfiguration
+#define ICON_ZAfterHome       ICON_SetEndTemp
+
+#define ICON_CaseLight        ICON_Motion
+#define ICON_LedControl       ICON_Motion
 
 // MPC
-#define ICON_MPCNozzle         ICON_SetEndTemp
-#define ICON_MPCValue          ICON_Contact
-#define ICON_MPCHeater         ICON_Temperature
-#define ICON_MPCHeatCap        ICON_SetBedTemp
-#define ICON_MPCFan            ICON_FanSpeed
+#define ICON_MPCNozzle        ICON_SetEndTemp
+#define ICON_MPCValue         ICON_Contact
+#define ICON_MPCHeater        ICON_Temperature
+#define ICON_MPCHeatCap       ICON_SetBedTemp
+#define ICON_MPCFan           ICON_FanSpeed
 
 // Buttons
 #define BTN_Continue          85
 #define BTN_Cancel            87
 #define BTN_Confirm           89
 #define BTN_Print             90
 #define BTN_Save              91
 #define BTN_Purge             92
 
 // Extended and default UI Colors

commit a41e16ffee0ae828ecb73eeea3caab2f4aed82a8
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Wed Dec 6 00:11:41 2023 -0500

    ‚ú® Voxelab Aquila N32 (via Maple) (#26470)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 015e66c8cb..636b4fbbad 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -331,21 +331,21 @@ namespace DWINUI {
 
   // Draw a numeric integer value
   //  bShow: true=display background color; false=don't display background color
   //  signedMode: 1=signed; 0=unsigned
   //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  iNum: Number of digits
   //  x/y: Upper-left coordinate
   //  value: Integer value
-  void drawInt(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value);
+  void drawInt(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value);
 
   // Draw a positive integer
   inline void drawInt(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
     drawInt(bShow, 0, fid, color, bColor, iNum, x, y, value);
   }
   inline void drawInt(uint8_t iNum, long value) {
     drawInt(false, 0, fontID, textColor, backColor, iNum, cursor.x, cursor.y, value);
     moveBy(iNum * fontWidth(fontID), 0);
   }
   inline void drawInt(uint8_t iNum, uint16_t x, uint16_t y, long value) {

commit cc8f7c83dabdff51a0980d8fa066833aeaa3d97d
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Tue Nov 21 04:57:31 2023 -0500

    üö∏ Fix, clean up ProUI (#26434)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 35f07404ff..015e66c8cb 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -188,29 +188,32 @@
 #define DWIN_FONT_STAT font10x20
 #define DWIN_FONT_HEAD font10x20
 #define DWIN_FONT_ALERT font10x20
 #define STATUS_Y 354
 #define LCD_WIDTH (DWIN_WIDTH / 8)  // only if the default fontID is font8x16
 
 // Minimum unit (0.1) : multiple (10)
 #define UNITFDIGITS 1
 #define MINUNITMULT POW(10, UNITFDIGITS)
 
-constexpr uint8_t  TITLE_HEIGHT = 30,                          // Title bar height
-                   MLINE = 53,                                 // Menu line height
-                   TROWS = (STATUS_Y - TITLE_HEIGHT) / MLINE,  // Total rows
-                   MROWS = TROWS - 1,                          // Other-than-Back
-                   ICOX = 26,                                  // Menu item icon X position
-                   LBLX = 55,                                  // Menu item label X position
-                   VALX = 210,                                 // Menu item value X position
-                   MENU_CHR_W = 8, MENU_CHR_H = 16,            // Menu font 8x16
-                   STAT_CHR_W = 10;
+/**
+ * @brief Menu Line Spacing
+ */
+constexpr uint8_t  TITLE_HEIGHT = 30,                          //< Title bar height
+                   MLINE = 53,                                 //< Menu line height
+                   TROWS = (STATUS_Y - TITLE_HEIGHT) / MLINE,  //< Total rows
+                   MROWS = TROWS - 1,                          //< Other-than-Back
+                   ICOX = 26,                                  //< Menu item icon X position
+                   LBLX = 55,                                  //< Menu item label X position
+                   VALX = 210,                                 //< Menu item value X position
+                   MENU_CHR_W = 8, MENU_CHR_H = 16,            //< Menu font 8x16
+                   STAT_CHR_W = 10;                            //< Menu Stats character width
 
 // Menuitem Y position
 #define MYPOS(L) (TITLE_HEIGHT + MLINE * (L))
 
 // Menuitem caption Offset
 #define CAPOFF ((MLINE - MENU_CHR_H) / 2)
 
 // Menuitem caption Y position
 #define MBASE(L) (MYPOS(L) + CAPOFF)
 

commit 6d3122d4e8525dea64cf83a98354a95f2a1d9a29
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Thu Oct 19 21:22:04 2023 -0400

    üö∏ Misc. JyersUI tweaks (#26228)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 255b7ac601..35f07404ff 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -47,26 +47,20 @@
 #define ICON_CustomPreheat        ICON_SetEndTemp
 #define ICON_Error                ICON_TempTooHigh
 #define ICON_esDiag               ICON_Info
 #define ICON_ExtrudeMinT          ICON_HotendTemp
 #define ICON_FilLoad              ICON_WriteEEPROM
 #define ICON_FilMan               ICON_ResumeEEPROM
 #define ICON_FilSet               ICON_ResumeEEPROM
 #define ICON_FilUnload            ICON_ReadEEPROM
 #define ICON_Flow                 ICON_StepE
 #define ICON_Folder               ICON_More
-#define ICON_FWRetract            ICON_StepE
-#define ICON_FWRetLength          ICON_StepE
-#define ICON_FWRetSpeed           ICON_Setspeed
-#define ICON_FWRetZRaise          ICON_MoveZ
-#define ICON_FWRecSpeed           ICON_Setspeed
-#define ICON_FWRecExtra           ICON_StepE
 #define ICON_HomeX                ICON_MoveX
 #define ICON_HomeY                ICON_MoveY
 #define ICON_HomeZ                ICON_MoveZ
 #define ICON_HomeOffset           ICON_AdvSet
 #define ICON_HomeOffsetX          ICON_StepX
 #define ICON_HomeOffsetY          ICON_StepY
 #define ICON_HomeOffsetZ          ICON_StepZ
 #define ICON_HSMode               ICON_StockConfiguration
 #define ICON_InputShaping         ICON_MaxAccelerated
 #define ICON_JDmm                 ICON_MaxJerk

commit 8fa6a4da2eebc1dbe120dcac87b159e389e17dc3
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Fri Aug 25 19:33:49 2023 -0400

    üö∏ Fixes for ProUI, JyersUI, backlight, etc. (#26086)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 9f8ab70e71..255b7ac601 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -557,21 +557,21 @@ namespace DWINUI {
   inline void drawCheckbox(uint16_t x, uint16_t y, bool checked=false) {
     drawCheckbox(textColor, backColor, x, y, checked);
   }
 
   // Color Interpolator
   //  val : Interpolator minv..maxv
   //  minv : Minimum value
   //  maxv : Maximum value
   //  color1 : Start color
   //  color2 : End color
-  uint16_t ColorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t color1, uint16_t color2);
+  uint16_t colorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t color1, uint16_t color2);
 
   // ------------------------- Buttons ------------------------------//
 
   void drawButton(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const char * const caption);
   inline void drawButton(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, FSTR_P caption) {
     drawButton(color, bcolor, x1, y1, x2, y2, FTOP(caption));
   }
   inline void drawButton(FSTR_P caption, uint16_t x, uint16_t y) {
     drawButton(textColor, buttonColor, x, y, x + 99, y + 37, caption);
   }
@@ -586,33 +586,33 @@ namespace DWINUI {
   //  r: circle radius
   void drawFillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r);
   inline void drawFillCircle(uint16_t bcolor, uint8_t r) {
     drawFillCircle(bcolor, cursor.x, cursor.y, r);
   }
 
   // Color Interpolator through Red->Yellow->Green->Blue
   //  val : Interpolator minv..maxv
   //  minv : Minimum value
   //  maxv : Maximum value
-  uint16_t RainbowInt(int16_t val, int16_t minv, int16_t maxv);
+  uint16_t rainbowInt(int16_t val, int16_t minv, int16_t maxv);
 
   // Write buffer data to the SRAM
   //  addr: SRAM start address 0x0000-0x7FFF
   //  length: Bytes to write
   //  data: address of the buffer with data
-  inline void WriteToSRAM(uint16_t addr, uint16_t length, uint8_t *data) {
+  inline void writeToSRAM(uint16_t addr, uint16_t length, uint8_t *data) {
     dwinWriteToMem(0x5A, addr, length, data);
   }
 
   // Write buffer data to the Flash
   //  addr: Flash start address 0x0000-0x3FFF
   //  length: Bytes to write
   //  data: address of the buffer with data
-  inline void WriteToFlash(uint16_t addr, uint16_t length, uint8_t *data) {
+  inline void writeToFlash(uint16_t addr, uint16_t length, uint8_t *data) {
     dwinWriteToMem(0xA5, addr, length, data);
   }
 
   // Clear by filling the area with background color
   // Area (0, TITLE_HEIGHT, DWIN_WIDTH, STATUS_Y - 1)
   void clearMainArea();
 
 };

commit f14f1be168ebf252dd458c935271aed1a57cfa0b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 30 19:16:00 2023 -0500

    üé® Standardize naming (ProUI) (#25982)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 06daece9d0..9f8ab70e71 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -39,21 +39,21 @@
 #define ICON_AdvSet               ICON_Language
 #define ICON_BedSizeX             ICON_PrintSize
 #define ICON_BedSizeY             ICON_PrintSize
 #define ICON_BedTramming          ICON_SetHome
 #define ICON_Binary               ICON_Contact
 #define ICON_BltouchReset         ICON_StockConfiguration
 #define ICON_Brightness           ICON_Motion
 #define ICON_Cancel               ICON_StockConfiguration
 #define ICON_CustomPreheat        ICON_SetEndTemp
 #define ICON_Error                ICON_TempTooHigh
-#define ICON_ESDiag               ICON_Info
+#define ICON_esDiag               ICON_Info
 #define ICON_ExtrudeMinT          ICON_HotendTemp
 #define ICON_FilLoad              ICON_WriteEEPROM
 #define ICON_FilMan               ICON_ResumeEEPROM
 #define ICON_FilSet               ICON_ResumeEEPROM
 #define ICON_FilUnload            ICON_ReadEEPROM
 #define ICON_Flow                 ICON_StepE
 #define ICON_Folder               ICON_More
 #define ICON_FWRetract            ICON_StepE
 #define ICON_FWRetLength          ICON_StepE
 #define ICON_FWRetSpeed           ICON_Setspeed
@@ -163,46 +163,46 @@
 
 // Buttons
 #define BTN_Continue          85
 #define BTN_Cancel            87
 #define BTN_Confirm           89
 #define BTN_Print             90
 #define BTN_Save              91
 #define BTN_Purge             92
 
 // Extended and default UI Colors
-#define Color_Black           0
-#define Color_Green           RGB(0,63,0)
-#define Color_Aqua            RGB(0,63,31)
-#define Color_Blue            RGB(0,0,31)
-#define Color_Light_White     0xBDD7
-#define Color_Light_Green     0x3460
-#define Color_Cyan            0x07FF
-#define Color_Light_Cyan      0x04F3
-#define Color_Light_Blue      0x3A6A
-#define Color_Magenta         0xF81F
-#define Color_Light_Magenta   0x9813
-#define Color_Light_Red       0x8800
-#define Color_Orange          0xFA20
-#define Color_Light_Orange    0xFBC0
-#define Color_Light_Yellow    0x8BE0
-#define Color_Brown           0xCC27
-#define Color_Light_Brown     0x6204
-#define Color_Grey            0x18E3
+#define COLOR_BLACK           0
+#define COLOR_GREEN           RGB(0,63,0)
+#define COLOR_AQUA            RGB(0,63,31)
+#define COLOR_BLUE            RGB(0,0,31)
+#define COLOR_LIGHT_WHITE     0xBDD7
+#define COLOR_LIGHT_GREEN     0x3460
+#define COLOR_CYAN            0x07FF
+#define COLOR_LIGHT_CYAN      0x04F3
+#define COLOR_LIGHT_BLUE      0x3A6A
+#define COLOR_MAGENTA         0xF81F
+#define COLOR_LIGHT_MAGENTA   0x9813
+#define COLOR_LIGHT_RED       0x8800
+#define COLOR_ORANGE          0xFA20
+#define COLOR_LIGHT_ORANGE    0xFBC0
+#define COLOR_LIGHT_YELLOW    0x8BE0
+#define COLOR_BROWN           0xCC27
+#define COLOR_LIGHT_BROWN     0x6204
+#define COLOR_GREY            0x18E3
 
 // UI element defines and constants
 #define DWIN_FONT_MENU font8x16
 #define DWIN_FONT_STAT font10x20
 #define DWIN_FONT_HEAD font10x20
 #define DWIN_FONT_ALERT font10x20
 #define STATUS_Y 354
-#define LCD_WIDTH (DWIN_WIDTH / 8)  // only if the default fontid is font8x16
+#define LCD_WIDTH (DWIN_WIDTH / 8)  // only if the default fontID is font8x16
 
 // Minimum unit (0.1) : multiple (10)
 #define UNITFDIGITS 1
 #define MINUNITMULT POW(10, UNITFDIGITS)
 
 constexpr uint8_t  TITLE_HEIGHT = 30,                          // Title bar height
                    MLINE = 53,                                 // Menu line height
                    TROWS = (STATUS_Y - TITLE_HEIGHT) / MLINE,  // Total rows
                    MROWS = TROWS - 1,                          // Other-than-Back
                    ICOX = 26,                                  // Menu item icon X position
@@ -216,403 +216,403 @@ constexpr uint8_t  TITLE_HEIGHT = 30,                          // Title bar heig
 
 // Menuitem caption Offset
 #define CAPOFF ((MLINE - MENU_CHR_H) / 2)
 
 // Menuitem caption Y position
 #define MBASE(L) (MYPOS(L) + CAPOFF)
 
 typedef struct { uint16_t left, top, right, bottom; } rect_t;
 typedef struct { uint16_t x, y, w, h; } frame_rect_t;
 
-class TitleClass {
+class Title {
 public:
   char caption[32] = "";
   uint8_t frameid = 0;
   rect_t frame = {0};
   void draw();
-  void SetCaption(const char * const title);
-  inline void SetCaption(FSTR_P title) { SetCaption((char *)title); }
-  void ShowCaption(const char * const title);
-  inline void ShowCaption(FSTR_P title) { ShowCaption((char *)title); }
-  void SetFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
-  void SetFrame(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
-  void FrameCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
-  void FrameCopy(uint16_t x, uint16_t y, uint16_t h, uint16_t v);
+  void setCaption(const char * const titleStr);
+  inline void setCaption(FSTR_P fTitle) { setCaption((char *)fTitle); }
+  void showCaption(const char * const titleStr);
+  inline void showCaption(FSTR_P fTitle) { showCaption((char *)fTitle); }
+  void setFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
+  void setFrame(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
+  void frameCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
+  void frameCopy(uint16_t x, uint16_t y, uint16_t h, uint16_t v);
 };
-extern TitleClass Title;
+extern Title title;
 
 namespace DWINUI {
   extern xy_int_t cursor;
-  extern uint16_t pencolor;
-  extern uint16_t textcolor;
-  extern uint16_t backcolor;
-  extern uint16_t buttoncolor;
-  extern fontid_t fontid;
-  extern FSTR_P const Author;
+  extern uint16_t penColor;
+  extern uint16_t textColor;
+  extern uint16_t backColor;
+  extern uint16_t buttonColor;
+  extern fontid_t fontID;
+  extern FSTR_P const author;
 
-  extern void (*onTitleDraw)(TitleClass* title);
+  extern void (*onTitleDraw)(Title* t);
 
   // DWIN LCD Initialization
   void init();
 
   // Set text/number font
   void setFont(fontid_t cfont);
 
   // Get font character width
   uint8_t fontWidth(fontid_t cfont);
-  inline uint8_t fontWidth() { return fontWidth(fontid); };
+  inline uint8_t fontWidth() { return fontWidth(fontID); };
 
   // Get font character height
   uint8_t fontHeight(fontid_t cfont);
-  inline uint8_t fontHeight() { return fontHeight(fontid); };
+  inline uint8_t fontHeight() { return fontHeight(fontID); };
 
   // Get screen x coordinates from text column
-  uint16_t ColToX(uint8_t col);
+  uint16_t colToX(uint8_t col);
 
   // Get screen y coordinates from text row
-  uint16_t RowToY(uint8_t row);
+  uint16_t rowToY(uint8_t row);
 
   // Set text/number color
-  void SetColors(uint16_t fgcolor, uint16_t bgcolor, uint16_t alcolor);
-  void SetTextColor(uint16_t fgcolor);
-  void SetBackgroundColor(uint16_t bgcolor);
+  void setColors(uint16_t fgcolor, uint16_t bgcolor, uint16_t alcolor);
+  void setTextColor(uint16_t fgcolor);
+  void setBackgroundColor(uint16_t bgcolor);
 
   // Moves cursor to point
   //  x: abscissa of the display
   //  y: ordinate of the display
   //  point: xy coordinate
-  void MoveTo(int16_t x, int16_t y);
-  void MoveTo(xy_int_t point);
+  void moveTo(int16_t x, int16_t y);
+  void moveTo(xy_int_t point);
 
   // Moves cursor relative to the actual position
   //  x: abscissa of the display
   //  y: ordinate of the display
   //  point: xy coordinate
-  void MoveBy(int16_t x, int16_t y);
-  void MoveBy(xy_int_t point);
+  void moveBy(int16_t x, int16_t y);
+  void moveBy(xy_int_t point);
 
   // Draw a line from the cursor to xy position
   //  color: Line segment color
   //  x/y: End point
-  inline void LineTo(uint16_t color, uint16_t x, uint16_t y) {
+  inline void lineTo(uint16_t color, uint16_t x, uint16_t y) {
     dwinDrawLine(color, cursor.x, cursor.y, x, y);
   }
-  inline void LineTo(uint16_t x, uint16_t y) {
-    dwinDrawLine(pencolor, cursor.x, cursor.y, x, y);
+  inline void lineTo(uint16_t x, uint16_t y) {
+    dwinDrawLine(penColor, cursor.x, cursor.y, x, y);
   }
 
   // Extend a frame box
   //  v: value to extend
-  inline frame_rect_t ExtendFrame(frame_rect_t frame, uint8_t v) {
+  inline frame_rect_t extendFrame(frame_rect_t frame, uint8_t v) {
     frame_rect_t t;
     t.x = frame.x - v;
     t.y = frame.y - v;
     t.w = frame.w + 2 * v;
     t.h = frame.h + 2 * v;
     return t;
   }
 
   // Draw an Icon and select library automatically
   //  BG: The icon background display: false=Background filtering is not displayed, true=Background display
   //  libID: Icon library ID
   //  picID: Icon ID
   //  x/y: Upper-left point
   void ICON_Show(bool BG, uint8_t icon, uint16_t x, uint16_t y);
 
   // Draw an Icon with transparent background from the library ICON
   //  icon: Icon ID
   //  x/y: Upper-left point
-  inline void Draw_Icon(uint8_t icon, uint16_t x, uint16_t y) {
+  inline void drawIcon(uint8_t icon, uint16_t x, uint16_t y) {
     ICON_Show(false, icon, x, y);
   }
 
   // Draw an Icon from the library ICON with its background
   //  icon: Icon ID
   //  x/y: Upper-left point
-  inline void Draw_IconWB(uint8_t icon, uint16_t x, uint16_t y) {
+  inline void drawIconWB(uint8_t icon, uint16_t x, uint16_t y) {
     ICON_Show(true, icon, x, y);
   }
 
   // Draw a numeric integer value
   //  bShow: true=display background color; false=don't display background color
   //  signedMode: 1=signed; 0=unsigned
   //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  iNum: Number of digits
   //  x/y: Upper-left coordinate
   //  value: Integer value
-  void Draw_Int(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value);
+  void drawInt(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value);
 
   // Draw a positive integer
-  inline void Draw_Int(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(bShow, 0, fid, color, bColor, iNum, x, y, value);
+  inline void drawInt(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    drawInt(bShow, 0, fid, color, bColor, iNum, x, y, value);
   }
-  inline void Draw_Int(uint8_t iNum, long value) {
-    Draw_Int(false, 0, fontid, textcolor, backcolor, iNum, cursor.x, cursor.y, value);
-    MoveBy(iNum * fontWidth(fontid), 0);
+  inline void drawInt(uint8_t iNum, long value) {
+    drawInt(false, 0, fontID, textColor, backColor, iNum, cursor.x, cursor.y, value);
+    moveBy(iNum * fontWidth(fontID), 0);
   }
-  inline void Draw_Int(uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(false, 0, fontid, textcolor, backcolor, iNum, x, y, value);
+  inline void drawInt(uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    drawInt(false, 0, fontID, textColor, backColor, iNum, x, y, value);
   }
-  inline void Draw_Int(uint16_t color, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(false, 0, fontid, color, backcolor, iNum, x, y, value);
+  inline void drawInt(uint16_t color, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    drawInt(false, 0, fontID, color, backColor, iNum, x, y, value);
   }
-  inline void Draw_Int(uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(true, 0, fontid, color, bColor, iNum, x, y, value);
+  inline void drawInt(uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    drawInt(true, 0, fontID, color, bColor, iNum, x, y, value);
   }
-  inline void Draw_Int(fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(true, 0, fid, color, bColor, iNum, x, y, value);
+  inline void drawInt(fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    drawInt(true, 0, fid, color, bColor, iNum, x, y, value);
   }
 
   // Draw a signed integer
-  inline void Draw_Signed_Int(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(bShow, 1, fid, color, bColor, iNum, x, y, value);
+  inline void drawSignedInt(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    drawInt(bShow, 1, fid, color, bColor, iNum, x, y, value);
   }
-  inline void Draw_Signed_Int(uint8_t iNum, long value) {
-    Draw_Int(false, 1, fontid, textcolor, backcolor, iNum, cursor.x, cursor.y, value);
-    MoveBy(iNum * fontWidth(fontid), 0);
+  inline void drawSignedInt(uint8_t iNum, long value) {
+    drawInt(false, 1, fontID, textColor, backColor, iNum, cursor.x, cursor.y, value);
+    moveBy(iNum * fontWidth(fontID), 0);
   }
-  inline void Draw_Signed_Int(uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(false, 1, fontid, textcolor, backcolor, iNum, x, y, value);
+  inline void drawSignedInt(uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    drawInt(false, 1, fontID, textColor, backColor, iNum, x, y, value);
   }
-  inline void Draw_Signed_Int(uint16_t color, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(false, 1, fontid, color, backcolor, iNum, x, y, value);
+  inline void drawSignedInt(uint16_t color, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    drawInt(false, 1, fontID, color, backColor, iNum, x, y, value);
   }
-  inline void Draw_Signed_Int(uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(true, 1, fontid, color, bColor, iNum, x, y, value);
+  inline void drawSignedInt(uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    drawInt(true, 1, fontID, color, bColor, iNum, x, y, value);
   }
-  inline void Draw_Signed_Int(fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(true, 1, fid, color, bColor, iNum, x, y, value);
+  inline void drawSignedInt(fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    drawInt(true, 1, fid, color, bColor, iNum, x, y, value);
   }
 
   // Draw a numeric float value
   //  bShow: true=display background color; false=don't display background color
   //  signedMode: 1=signed; 0=unsigned
   //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  iNum: Number of digits
   //  fNum: Number of decimal digits
   //  x/y: Upper-left coordinate
   //  value: float value
-  void Draw_Float(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value);
+  void drawFloat(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value);
 
   // Draw a positive floating point number
-  inline void Draw_Float(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(bShow, 0, fid, color, bColor, iNum, fNum, x, y, value);
+  inline void drawFloat(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    drawFloat(bShow, 0, fid, color, bColor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Float(uint8_t iNum, uint8_t fNum, float value) {
-    Draw_Float(false, 0, fontid, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
-    MoveBy((iNum + fNum + 1) * fontWidth(fontid), 0);
+  inline void drawFloat(uint8_t iNum, uint8_t fNum, float value) {
+    drawFloat(false, 0, fontID, textColor, backColor, iNum, fNum, cursor.x, cursor.y, value);
+    moveBy((iNum + fNum + 1) * fontWidth(fontID), 0);
   }
-  inline void Draw_Float(uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(false, 0, fontid, textcolor, backcolor, iNum, fNum, x, y, value);
+  inline void drawFloat(uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    drawFloat(false, 0, fontID, textColor, backColor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Float(fontid_t fid, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(false, 0, fid, textcolor, backcolor, iNum, fNum, x, y, value);
+  inline void drawFloat(fontid_t fid, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    drawFloat(false, 0, fid, textColor, backColor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Float(uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(true, 0, fontid, color, bColor, iNum, fNum, x, y, value);
+  inline void drawFloat(uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    drawFloat(true, 0, fontID, color, bColor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Float(fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(true, 0, fid, color, bColor, iNum, fNum, x, y, value);
+  inline void drawFloat(fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    drawFloat(true, 0, fid, color, bColor, iNum, fNum, x, y, value);
   }
 
   // Draw a signed floating point number
-  inline void Draw_Signed_Float(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(bShow, 1, fid, color, bColor, iNum, fNum, x, y, value);
+  inline void drawSignedFloat(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    drawFloat(bShow, 1, fid, color, bColor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Signed_Float(uint8_t iNum, uint8_t fNum, float value) {
-    Draw_Float(false, 1, fontid, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
-    MoveBy((iNum + fNum + 1) * fontWidth(fontid), 0);
+  inline void drawSignedFloat(uint8_t iNum, uint8_t fNum, float value) {
+    drawFloat(false, 1, fontID, textColor, backColor, iNum, fNum, cursor.x, cursor.y, value);
+    moveBy((iNum + fNum + 1) * fontWidth(fontID), 0);
   }
-  inline void Draw_Signed_Float(uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(false, 1, fontid, textcolor, backcolor, iNum, fNum, x, y, value);
+  inline void drawSignedFloat(uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    drawFloat(false, 1, fontID, textColor, backColor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Signed_Float(fontid_t fid, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(false, 1, fid, textcolor, backcolor, iNum, fNum, x, y, value);
+  inline void drawSignedFloat(fontid_t fid, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    drawFloat(false, 1, fid, textColor, backColor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Signed_Float(uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(true, 1, fontid, color, bColor, iNum, fNum, x, y, value);
+  inline void drawSignedFloat(uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    drawFloat(true, 1, fontID, color, bColor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Signed_Float(fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(true, 1, fid, color, bColor, iNum, fNum, x, y, value);
+  inline void drawSignedFloat(fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    drawFloat(true, 1, fid, color, bColor, iNum, fNum, x, y, value);
   }
 
   // Draw a char
   //  color: Character color
   //  x: abscissa of the display
   //  y: ordinate of the display
   //  c: ASCII code of char
-  void Draw_Char(uint16_t color, uint16_t x, uint16_t y, const char c);
-  inline void Draw_Char(uint16_t x, uint16_t y, const char c) { Draw_Char(textcolor, x, y, c); };
+  void drawChar(uint16_t color, uint16_t x, uint16_t y, const char c);
+  inline void drawChar(uint16_t x, uint16_t y, const char c) { drawChar(textColor, x, y, c); };
   // Draw a char at cursor position and increment cursor
-  void Draw_Char(uint16_t color, const char c);
-  inline void Draw_Char(const char c) { Draw_Char(textcolor, c); }
+  void drawChar(uint16_t color, const char c);
+  inline void drawChar(const char c) { drawChar(textColor, c); }
 
   // Draw a string at cursor position
   //  color: Character color
   //  *string: The string
   //  rlimit: For draw less chars than string length use rlimit
-  void Draw_String(const char * const string, uint16_t rlimit = 0xFFFF);
-  void Draw_String(uint16_t color, const char * const string, uint16_t rlimit = 0xFFFF);
-  inline void Draw_String(FSTR_P  string, uint16_t rlimit = 0xFFFF) {
-    Draw_String(FTOP(string), rlimit);
+  void drawString(const char * const string, uint16_t rlimit = 0xFFFF);
+  void drawString(uint16_t color, const char * const string, uint16_t rlimit = 0xFFFF);
+  inline void drawString(FSTR_P  string, uint16_t rlimit = 0xFFFF) {
+    drawString(FTOP(string), rlimit);
   }
-  inline void Draw_String(uint16_t color, FSTR_P string, uint16_t rlimit = 0xFFFF) {
-    Draw_String(color, FTOP(string), rlimit);
+  inline void drawString(uint16_t color, FSTR_P string, uint16_t rlimit = 0xFFFF) {
+    drawString(color, FTOP(string), rlimit);
   }
 
   // Draw a string
   //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  x/y: Upper-left coordinate of the string
   //  *string: The string
-  inline void Draw_String(uint16_t x, uint16_t y, const char * const string) {
-    dwinDrawString(false, fontid, textcolor, backcolor, x, y, string);
+  inline void drawString(uint16_t x, uint16_t y, const char * const string) {
+    dwinDrawString(false, fontID, textColor, backColor, x, y, string);
   }
-  inline void Draw_String(uint16_t x, uint16_t y, FSTR_P title) {
-    dwinDrawString(false, fontid, textcolor, backcolor, x, y, FTOP(title));
+  inline void drawString(uint16_t x, uint16_t y, FSTR_P fTitle) {
+    dwinDrawString(false, fontID, textColor, backColor, x, y, FTOP(fTitle));
   }
-  inline void Draw_String(uint16_t color, uint16_t x, uint16_t y, const char * const string) {
-    dwinDrawString(false, fontid, color, backcolor, x, y, string);
+  inline void drawString(uint16_t color, uint16_t x, uint16_t y, const char * const string) {
+    dwinDrawString(false, fontID, color, backColor, x, y, string);
   }
-  inline void Draw_String(uint16_t color, uint16_t x, uint16_t y, FSTR_P title) {
-    dwinDrawString(false, fontid, color, backcolor, x, y, title);
+  inline void drawString(uint16_t color, uint16_t x, uint16_t y, FSTR_P fTitle) {
+    dwinDrawString(false, fontID, color, backColor, x, y, fTitle);
   }
-  inline void Draw_String(uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, const char * const string) {
-    dwinDrawString(true, fontid, color, bgcolor, x, y, string);
+  inline void drawString(uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, const char * const string) {
+    dwinDrawString(true, fontID, color, bgcolor, x, y, string);
   }
-  inline void Draw_String(uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, FSTR_P title) {
-    dwinDrawString(true, fontid, color, bgcolor, x, y, title);
+  inline void drawString(uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, FSTR_P fTitle) {
+    dwinDrawString(true, fontID, color, bgcolor, x, y, fTitle);
   }
-  inline void Draw_String(fontid_t fid, uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, const char * const string) {
+  inline void drawString(fontid_t fid, uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, const char * const string) {
     dwinDrawString(true, fid, color, bgcolor, x, y, string);
   }
-  inline void Draw_String(fontid_t fid, uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, FSTR_P title) {
-    dwinDrawString(true, fid, color, bgcolor, x, y, title);
+  inline void drawString(fontid_t fid, uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, FSTR_P fTitle) {
+    dwinDrawString(true, fid, color, bgcolor, x, y, fTitle);
   }
 
   // Draw a centered string using DWIN_WIDTH
   //  bShow: true=display background color; false=don't display background color
   //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  y: Upper coordinate of the string
   //  *string: The string
-  void Draw_CenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string);
-  inline void Draw_CenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t y, const char * const string) {
-    Draw_CenteredString(bShow, fid, color, bColor, 0, DWIN_WIDTH, y, string);
+  void drawCenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string);
+  inline void drawCenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t y, const char * const string) {
+    drawCenteredString(bShow, fid, color, bColor, 0, DWIN_WIDTH, y, string);
   }
-  inline void Draw_CenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t y, FSTR_P string) {
-    Draw_CenteredString(bShow, fid, color, bColor, y, FTOP(string));
+  inline void drawCenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t y, FSTR_P string) {
+    drawCenteredString(bShow, fid, color, bColor, y, FTOP(string));
   }
-  inline void Draw_CenteredString(uint16_t color, uint16_t bcolor, uint16_t y, const char * const string) {
-    Draw_CenteredString(true, fontid, color, bcolor, y, string);
+  inline void drawCenteredString(uint16_t color, uint16_t bcolor, uint16_t y, const char * const string) {
+    drawCenteredString(true, fontID, color, bcolor, y, string);
   }
-  inline void Draw_CenteredString(fontid_t fid, uint16_t color, uint16_t y, const char * const string) {
-    Draw_CenteredString(false, fid, color, backcolor, y, string);
+  inline void drawCenteredString(fontid_t fid, uint16_t color, uint16_t y, const char * const string) {
+    drawCenteredString(false, fid, color, backColor, y, string);
   }
-  inline void Draw_CenteredString(fontid_t fid, uint16_t color, uint16_t y, FSTR_P title) {
-    Draw_CenteredString(false, fid, color, backcolor, y, title);
+  inline void drawCenteredString(fontid_t fid, uint16_t color, uint16_t y, FSTR_P fTitle) {
+    drawCenteredString(false, fid, color, backColor, y, fTitle);
   }
-  inline void Draw_CenteredString(uint16_t color, uint16_t y, const char * const string) {
-    Draw_CenteredString(false, fontid, color, backcolor, y, string);
+  inline void drawCenteredString(uint16_t color, uint16_t y, const char * const string) {
+    drawCenteredString(false, fontID, color, backColor, y, string);
   }
-  inline void Draw_CenteredString(uint16_t color, uint16_t y, FSTR_P title) {
-    Draw_CenteredString(false, fontid, color, backcolor, y, title);
+  inline void drawCenteredString(uint16_t color, uint16_t y, FSTR_P fTitle) {
+    drawCenteredString(false, fontID, color, backColor, y, fTitle);
   }
-  inline void Draw_CenteredString(uint16_t y, const char * const string) {
-    Draw_CenteredString(false, fontid, textcolor, backcolor, y, string);
+  inline void drawCenteredString(uint16_t y, const char * const string) {
+    drawCenteredString(false, fontID, textColor, backColor, y, string);
   }
-  inline void Draw_CenteredString(uint16_t y, FSTR_P title) {
-    Draw_CenteredString(false, fontid, textcolor, backcolor, y, title);
+  inline void drawCenteredString(uint16_t y, FSTR_P fTitle) {
+    drawCenteredString(false, fontID, textColor, backColor, y, fTitle);
   }
 
   // Draw a box
   //  mode: 0=frame, 1=fill, 2=XOR fill
   //  color: Rectangle color
   //  frame: Box coordinates and size
-  inline void Draw_Box(uint8_t mode, uint16_t color, frame_rect_t frame) {
+  inline void drawBox(uint8_t mode, uint16_t color, frame_rect_t frame) {
     dwinDrawBox(mode, color, frame.x, frame.y, frame.w, frame.h);
   }
 
   // Draw a circle
   //  Color: circle color
   //  x: abscissa of the center of the circle
   //  y: ordinate of the center of the circle
   //  r: circle radius
-  void Draw_Circle(uint16_t color, uint16_t x,uint16_t y,uint8_t r);
-  inline void Draw_Circle(uint16_t color, uint8_t r) {
-    Draw_Circle(color, cursor.x, cursor.y, r);
+  void drawCircle(uint16_t color, uint16_t x,uint16_t y,uint8_t r);
+  inline void drawCircle(uint16_t color, uint8_t r) {
+    drawCircle(color, cursor.x, cursor.y, r);
   }
 
   // Draw a checkbox
   //  Color: frame color
   //  bColor: Background color
   //  x/y: Upper-left point
   //  checked : 0 : unchecked, 1 : checked
-  void Draw_Checkbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool checked);
-  inline void Draw_Checkbox(uint16_t x, uint16_t y, bool checked=false) {
-    Draw_Checkbox(textcolor, backcolor, x, y, checked);
+  void drawCheckbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool checked);
+  inline void drawCheckbox(uint16_t x, uint16_t y, bool checked=false) {
+    drawCheckbox(textColor, backColor, x, y, checked);
   }
 
   // Color Interpolator
   //  val : Interpolator minv..maxv
   //  minv : Minimum value
   //  maxv : Maximum value
   //  color1 : Start color
   //  color2 : End color
   uint16_t ColorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t color1, uint16_t color2);
 
   // ------------------------- Buttons ------------------------------//
 
-  void Draw_Button(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const char * const caption);
-  inline void Draw_Button(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, FSTR_P caption) {
-    Draw_Button(color, bcolor, x1, y1, x2, y2, FTOP(caption));
+  void drawButton(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const char * const caption);
+  inline void drawButton(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, FSTR_P caption) {
+    drawButton(color, bcolor, x1, y1, x2, y2, FTOP(caption));
   }
-  inline void Draw_Button(FSTR_P caption, uint16_t x, uint16_t y) {
-    Draw_Button(textcolor, buttoncolor, x, y, x + 99, y + 37, caption);
+  inline void drawButton(FSTR_P caption, uint16_t x, uint16_t y) {
+    drawButton(textColor, buttonColor, x, y, x + 99, y + 37, caption);
   }
-  void Draw_Button(uint8_t id, uint16_t x, uint16_t y);
+  void drawButton(uint8_t id, uint16_t x, uint16_t y);
 
   // -------------------------- Extra -------------------------------//
 
   // Draw a circle filled with color
   //  bcolor: fill color
   //  x: abscissa of the center of the circle
   //  y: ordinate of the center of the circle
   //  r: circle radius
-  void Draw_FillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r);
-  inline void Draw_FillCircle(uint16_t bcolor, uint8_t r) {
-    Draw_FillCircle(bcolor, cursor.x, cursor.y, r);
+  void drawFillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r);
+  inline void drawFillCircle(uint16_t bcolor, uint8_t r) {
+    drawFillCircle(bcolor, cursor.x, cursor.y, r);
   }
 
   // Color Interpolator through Red->Yellow->Green->Blue
   //  val : Interpolator minv..maxv
   //  minv : Minimum value
   //  maxv : Maximum value
   uint16_t RainbowInt(int16_t val, int16_t minv, int16_t maxv);
 
   // Write buffer data to the SRAM
   //  addr: SRAM start address 0x0000-0x7FFF
   //  length: Bytes to write
   //  data: address of the buffer with data
   inline void WriteToSRAM(uint16_t addr, uint16_t length, uint8_t *data) {
-    DWIN_WriteToMem(0x5A, addr, length, data);
+    dwinWriteToMem(0x5A, addr, length, data);
   }
 
   // Write buffer data to the Flash
   //  addr: Flash start address 0x0000-0x3FFF
   //  length: Bytes to write
   //  data: address of the buffer with data
   inline void WriteToFlash(uint16_t addr, uint16_t length, uint8_t *data) {
-    DWIN_WriteToMem(0xA5, addr, length, data);
+    dwinWriteToMem(0xA5, addr, length, data);
   }
 
   // Clear by filling the area with background color
   // Area (0, TITLE_HEIGHT, DWIN_WIDTH, STATUS_Y - 1)
-  void ClearMainArea();
+  void clearMainArea();
 
 };

commit 858916d628526b5d56c34c5c9663e3535bfc7788
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Fri Jun 23 04:57:22 2023 -0500

    üö∏ Update DWIN ProUI (#26003)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index fd59757d64..06daece9d0 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -17,22 +17,22 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 /**
  * DWIN Enhanced implementation for PRO UI
  * Author: Miguel A. Risco-Castillo (MRISCOC)
- * Version: 3.18.1
- * Date: 2022/07/05
+ * Version: 3.21.1
+ * Date: 2023/03/21
  */
 
 #include "../../../inc/MarlinConfigPre.h"
 
 #include "../common/dwin_set.h"
 #include "../common/dwin_font.h"
 #include "../common/dwin_color.h"
 #include "dwin_lcd.h"
 
 // Extra Icons
@@ -61,34 +61,36 @@
 #define ICON_FWRecSpeed           ICON_Setspeed
 #define ICON_FWRecExtra           ICON_StepE
 #define ICON_HomeX                ICON_MoveX
 #define ICON_HomeY                ICON_MoveY
 #define ICON_HomeZ                ICON_MoveZ
 #define ICON_HomeOffset           ICON_AdvSet
 #define ICON_HomeOffsetX          ICON_StepX
 #define ICON_HomeOffsetY          ICON_StepY
 #define ICON_HomeOffsetZ          ICON_StepZ
 #define ICON_HSMode               ICON_StockConfiguration
-#define ICON_InvertE0             ICON_StepE
+#define ICON_InputShaping         ICON_MaxAccelerated
+#define ICON_JDmm                 ICON_MaxJerk
 #define ICON_Tram                 ICON_SetEndTemp
 #define ICON_Level                ICON_HotendTemp
 #define ICON_Lock                 ICON_Cool
 #define ICON_ManualMesh           ICON_HotendTemp
 #define ICON_MaxPosX              ICON_MoveX
 #define ICON_MaxPosY              ICON_MoveY
 #define ICON_MaxPosZ              ICON_MoveZ
 #define ICON_MeshEdit             ICON_Homing
 #define ICON_MeshEditX            ICON_MoveX
 #define ICON_MeshEditY            ICON_MoveY
 #define ICON_MeshEditZ            ICON_MoveZ
 #define ICON_MeshNext             ICON_Axis
 #define ICON_MeshPoints           ICON_SetEndTemp
+#define ICON_MeshReset            ICON_StockConfiguration
 #define ICON_MeshSave             ICON_WriteEEPROM
 #define ICON_MeshViewer           ICON_HotendTemp
 #define ICON_MoveZ0               ICON_HotendTemp
 #define ICON_Park                 ICON_Motion
 #define ICON_ParkPos              ICON_AdvSet
 #define ICON_ParkPosX             ICON_StepX
 #define ICON_ParkPosY             ICON_StepY
 #define ICON_ParkPosZ             ICON_StepZ
 #define ICON_PhySet               ICON_PrintSize
 #define ICON_PIDNozzle            ICON_SetEndTemp
@@ -125,22 +127,28 @@
 #define ICON_SetPreheat1          ICON_SetPLAPreheat
 #define ICON_SetPreheat2          ICON_SetABSPreheat
 #define ICON_SetPreheat3          ICON_SetCustomPreheat
 #define ICON_SetPreheat4          ICON_SetCustomPreheat
 #define ICON_SetPreheat5          ICON_SetCustomPreheat
 #define ICON_SetPreheat6          ICON_SetCustomPreheat
 #define ICON_SetPreheat7          ICON_SetCustomPreheat
 #define ICON_SetPreheat8          ICON_SetCustomPreheat
 #define ICON_SetPreheat9          ICON_SetCustomPreheat
 #define ICON_SetPreheat10         ICON_SetCustomPreheat
+#define ICON_ShapingX             ICON_MoveX
+#define ICON_ShapingY             ICON_MoveY
 #define ICON_Sound                ICON_Cool
-#define ICON_TBSetup              ICON_Contact
+#define ICON_TMCSet               ICON_PrintSize
+#define ICON_TMCXSet              ICON_MoveX
+#define ICON_TMCYSet              ICON_MoveY
+#define ICON_TMCZSet              ICON_MoveZ
+#define ICON_TMCESet              ICON_Extruder
 #define ICON_UBLActive            ICON_HotendTemp
 #define ICON_UBLActive            ICON_HotendTemp
 #define ICON_UBLSlot              ICON_ResumeEEPROM
 #define ICON_UBLMeshSave          ICON_WriteEEPROM
 #define ICON_UBLMeshLoad          ICON_ReadEEPROM
 #define ICON_UBLTiltGrid          ICON_PrintSize
 #define ICON_UBLSmartFill         ICON_StockConfiguration
 #define ICON_ZAfterHome           ICON_SetEndTemp
 
 #define ICON_CaseLight            ICON_Motion

commit 238951a966204ce9bc109e06fdb4027125b28feb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 16 18:08:59 2023 -0500

    üé® More more lowercase (partial ProUI)
    
    Followup to #25939

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 85d969043f..fd59757d64 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -279,24 +279,24 @@ namespace DWINUI {
   //  x: abscissa of the display
   //  y: ordinate of the display
   //  point: xy coordinate
   void MoveBy(int16_t x, int16_t y);
   void MoveBy(xy_int_t point);
 
   // Draw a line from the cursor to xy position
   //  color: Line segment color
   //  x/y: End point
   inline void LineTo(uint16_t color, uint16_t x, uint16_t y) {
-    DWIN_Draw_Line(color, cursor.x, cursor.y, x, y);
+    dwinDrawLine(color, cursor.x, cursor.y, x, y);
   }
   inline void LineTo(uint16_t x, uint16_t y) {
-    DWIN_Draw_Line(pencolor, cursor.x, cursor.y, x, y);
+    dwinDrawLine(pencolor, cursor.x, cursor.y, x, y);
   }
 
   // Extend a frame box
   //  v: value to extend
   inline frame_rect_t ExtendFrame(frame_rect_t frame, uint8_t v) {
     frame_rect_t t;
     t.x = frame.x - v;
     t.y = frame.y - v;
     t.w = frame.w + 2 * v;
     t.h = frame.h + 2 * v;
@@ -455,42 +455,42 @@ namespace DWINUI {
     Draw_String(color, FTOP(string), rlimit);
   }
 
   // Draw a string
   //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  x/y: Upper-left coordinate of the string
   //  *string: The string
   inline void Draw_String(uint16_t x, uint16_t y, const char * const string) {
-    DWIN_Draw_String(false, fontid, textcolor, backcolor, x, y, string);
+    dwinDrawString(false, fontid, textcolor, backcolor, x, y, string);
   }
   inline void Draw_String(uint16_t x, uint16_t y, FSTR_P title) {
-    DWIN_Draw_String(false, fontid, textcolor, backcolor, x, y, FTOP(title));
+    dwinDrawString(false, fontid, textcolor, backcolor, x, y, FTOP(title));
   }
   inline void Draw_String(uint16_t color, uint16_t x, uint16_t y, const char * const string) {
-    DWIN_Draw_String(false, fontid, color, backcolor, x, y, string);
+    dwinDrawString(false, fontid, color, backcolor, x, y, string);
   }
   inline void Draw_String(uint16_t color, uint16_t x, uint16_t y, FSTR_P title) {
-    DWIN_Draw_String(false, fontid, color, backcolor, x, y, title);
+    dwinDrawString(false, fontid, color, backcolor, x, y, title);
   }
   inline void Draw_String(uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, const char * const string) {
-    DWIN_Draw_String(true, fontid, color, bgcolor, x, y, string);
+    dwinDrawString(true, fontid, color, bgcolor, x, y, string);
   }
   inline void Draw_String(uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, FSTR_P title) {
-    DWIN_Draw_String(true, fontid, color, bgcolor, x, y, title);
+    dwinDrawString(true, fontid, color, bgcolor, x, y, title);
   }
   inline void Draw_String(fontid_t fid, uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, const char * const string) {
-    DWIN_Draw_String(true, fid, color, bgcolor, x, y, string);
+    dwinDrawString(true, fid, color, bgcolor, x, y, string);
   }
   inline void Draw_String(fontid_t fid, uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, FSTR_P title) {
-    DWIN_Draw_String(true, fid, color, bgcolor, x, y, title);
+    dwinDrawString(true, fid, color, bgcolor, x, y, title);
   }
 
   // Draw a centered string using DWIN_WIDTH
   //  bShow: true=display background color; false=don't display background color
   //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  y: Upper coordinate of the string
   //  *string: The string
   void Draw_CenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string);
@@ -520,21 +520,21 @@ namespace DWINUI {
   }
   inline void Draw_CenteredString(uint16_t y, FSTR_P title) {
     Draw_CenteredString(false, fontid, textcolor, backcolor, y, title);
   }
 
   // Draw a box
   //  mode: 0=frame, 1=fill, 2=XOR fill
   //  color: Rectangle color
   //  frame: Box coordinates and size
   inline void Draw_Box(uint8_t mode, uint16_t color, frame_rect_t frame) {
-    DWIN_Draw_Box(mode, color, frame.x, frame.y, frame.w, frame.h);
+    dwinDrawBox(mode, color, frame.x, frame.y, frame.w, frame.h);
   }
 
   // Draw a circle
   //  Color: circle color
   //  x: abscissa of the center of the circle
   //  y: ordinate of the center of the circle
   //  r: circle radius
   void Draw_Circle(uint16_t color, uint16_t x,uint16_t y,uint8_t r);
   inline void Draw_Circle(uint16_t color, uint8_t r) {
     Draw_Circle(color, cursor.x, cursor.y, r);

commit b3f65b674f23db5c32e4d7e96ad2dff97c77c717
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Tue Jan 17 18:41:36 2023 -0500

    üö∏ ProUI MPC menu (#25232)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 55345a7899..85d969043f 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -12,30 +12,29 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
+#pragma once
 
 /**
  * DWIN Enhanced implementation for PRO UI
  * Author: Miguel A. Risco-Castillo (MRISCOC)
  * Version: 3.18.1
  * Date: 2022/07/05
  */
 
-#pragma once
-
 #include "../../../inc/MarlinConfigPre.h"
 
 #include "../common/dwin_set.h"
 #include "../common/dwin_font.h"
 #include "../common/dwin_color.h"
 #include "dwin_lcd.h"
 
 // Extra Icons
 #define ICON_AdvSet               ICON_Language
 #define ICON_BedSizeX             ICON_PrintSize
@@ -140,20 +139,27 @@
 #define ICON_UBLSlot              ICON_ResumeEEPROM
 #define ICON_UBLMeshSave          ICON_WriteEEPROM
 #define ICON_UBLMeshLoad          ICON_ReadEEPROM
 #define ICON_UBLTiltGrid          ICON_PrintSize
 #define ICON_UBLSmartFill         ICON_StockConfiguration
 #define ICON_ZAfterHome           ICON_SetEndTemp
 
 #define ICON_CaseLight            ICON_Motion
 #define ICON_LedControl           ICON_Motion
 
+// MPC
+#define ICON_MPCNozzle         ICON_SetEndTemp
+#define ICON_MPCValue          ICON_Contact
+#define ICON_MPCHeater         ICON_Temperature
+#define ICON_MPCHeatCap        ICON_SetBedTemp
+#define ICON_MPCFan            ICON_FanSpeed
+
 // Buttons
 #define BTN_Continue          85
 #define BTN_Cancel            87
 #define BTN_Confirm           89
 #define BTN_Print             90
 #define BTN_Save              91
 #define BTN_Purge             92
 
 // Extended and default UI Colors
 #define Color_Black           0

commit d94defc545ad477c82a8bc77e949aa91cdd3e0f2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 15 06:48:17 2023 -0600

    üé® Language / menu cleanup

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 3dd37f30df..55345a7899 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -131,28 +131,26 @@
 #define ICON_SetPreheat6          ICON_SetCustomPreheat
 #define ICON_SetPreheat7          ICON_SetCustomPreheat
 #define ICON_SetPreheat8          ICON_SetCustomPreheat
 #define ICON_SetPreheat9          ICON_SetCustomPreheat
 #define ICON_SetPreheat10         ICON_SetCustomPreheat
 #define ICON_Sound                ICON_Cool
 #define ICON_TBSetup              ICON_Contact
 #define ICON_UBLActive            ICON_HotendTemp
 #define ICON_UBLActive            ICON_HotendTemp
 #define ICON_UBLSlot              ICON_ResumeEEPROM
-#define ICON_UBLSaveMesh          ICON_WriteEEPROM
-#define ICON_UBLLoadMesh          ICON_ReadEEPROM
+#define ICON_UBLMeshSave          ICON_WriteEEPROM
+#define ICON_UBLMeshLoad          ICON_ReadEEPROM
 #define ICON_UBLTiltGrid          ICON_PrintSize
 #define ICON_UBLSmartFill         ICON_StockConfiguration
 #define ICON_ZAfterHome           ICON_SetEndTemp
 
-
-
 #define ICON_CaseLight            ICON_Motion
 #define ICON_LedControl           ICON_Motion
 
 // Buttons
 #define BTN_Continue          85
 #define BTN_Cancel            87
 #define BTN_Confirm           89
 #define BTN_Print             90
 #define BTN_Save              91
 #define BTN_Purge             92

commit c66b3cf8a429c427c014f33171407c634da735f1
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Sun Jan 8 04:22:21 2023 -0500

    üö∏ ProUI updates (#25176)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index a544471831..3dd37f30df 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -12,33 +12,36 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
-#pragma once
 
 /**
  * DWIN Enhanced implementation for PRO UI
  * Author: Miguel A. Risco-Castillo (MRISCOC)
  * Version: 3.18.1
  * Date: 2022/07/05
  */
 
-#include "dwin_lcd.h"
+#pragma once
+
+#include "../../../inc/MarlinConfigPre.h"
+
 #include "../common/dwin_set.h"
 #include "../common/dwin_font.h"
 #include "../common/dwin_color.h"
+#include "dwin_lcd.h"
 
 // Extra Icons
 #define ICON_AdvSet               ICON_Language
 #define ICON_BedSizeX             ICON_PrintSize
 #define ICON_BedSizeY             ICON_PrintSize
 #define ICON_BedTramming          ICON_SetHome
 #define ICON_Binary               ICON_Contact
 #define ICON_BltouchReset         ICON_StockConfiguration
 #define ICON_Brightness           ICON_Motion
 #define ICON_Cancel               ICON_StockConfiguration
@@ -67,54 +70,88 @@
 #define ICON_HomeOffsetZ          ICON_StepZ
 #define ICON_HSMode               ICON_StockConfiguration
 #define ICON_InvertE0             ICON_StepE
 #define ICON_Tram                 ICON_SetEndTemp
 #define ICON_Level                ICON_HotendTemp
 #define ICON_Lock                 ICON_Cool
 #define ICON_ManualMesh           ICON_HotendTemp
 #define ICON_MaxPosX              ICON_MoveX
 #define ICON_MaxPosY              ICON_MoveY
 #define ICON_MaxPosZ              ICON_MoveZ
+#define ICON_MeshEdit             ICON_Homing
+#define ICON_MeshEditX            ICON_MoveX
+#define ICON_MeshEditY            ICON_MoveY
+#define ICON_MeshEditZ            ICON_MoveZ
 #define ICON_MeshNext             ICON_Axis
 #define ICON_MeshPoints           ICON_SetEndTemp
 #define ICON_MeshSave             ICON_WriteEEPROM
 #define ICON_MeshViewer           ICON_HotendTemp
 #define ICON_MoveZ0               ICON_HotendTemp
 #define ICON_Park                 ICON_Motion
 #define ICON_ParkPos              ICON_AdvSet
 #define ICON_ParkPosX             ICON_StepX
 #define ICON_ParkPosY             ICON_StepY
 #define ICON_ParkPosZ             ICON_StepZ
 #define ICON_PhySet               ICON_PrintSize
-#define ICON_PIDbed               ICON_SetBedTemp
-#define ICON_PIDcycles            ICON_ResumeEEPROM
+#define ICON_PIDNozzle            ICON_SetEndTemp
+#define ICON_PIDBed               ICON_SetBedTemp
+#define ICON_PIDCycles            ICON_ResumeEEPROM
 #define ICON_PIDValue             ICON_Contact
 #define ICON_PrintStats           ICON_PrintTime
 #define ICON_PrintStatsReset      ICON_RemainTime
+#define ICON_Preheat1             ICON_PLAPreheat
+#define ICON_Preheat2             ICON_ABSPreheat
+#define ICON_Preheat3             ICON_CustomPreheat
+#define ICON_Preheat4             ICON_CustomPreheat
+#define ICON_Preheat5             ICON_CustomPreheat
+#define ICON_Preheat6             ICON_CustomPreheat
+#define ICON_Preheat7             ICON_CustomPreheat
+#define ICON_Preheat8             ICON_CustomPreheat
+#define ICON_Preheat9             ICON_CustomPreheat
+#define ICON_Preheat10            ICON_CustomPreheat
 #define ICON_ProbeDeploy          ICON_SetEndTemp
 #define ICON_ProbeMargin          ICON_PrintSize
 #define ICON_ProbeOffsetX         ICON_StepX
 #define ICON_ProbeOffsetY         ICON_StepY
 #define ICON_ProbeOffsetZ         ICON_StepZ
 #define ICON_ProbeSet             ICON_SetEndTemp
 #define ICON_ProbeStow            ICON_SetEndTemp
 #define ICON_ProbeTest            ICON_SetEndTemp
 #define ICON_ProbeZSpeed          ICON_MaxSpeedZ
 #define ICON_Pwrlossr             ICON_Motion
 #define ICON_Reboot               ICON_ResumeEEPROM
 #define ICON_Runout               ICON_MaxAccE
 #define ICON_Scolor               ICON_MaxSpeed
 #define ICON_SetBaudRate          ICON_Setspeed
 #define ICON_SetCustomPreheat     ICON_SetEndTemp
+#define ICON_SetPreheat1          ICON_SetPLAPreheat
+#define ICON_SetPreheat2          ICON_SetABSPreheat
+#define ICON_SetPreheat3          ICON_SetCustomPreheat
+#define ICON_SetPreheat4          ICON_SetCustomPreheat
+#define ICON_SetPreheat5          ICON_SetCustomPreheat
+#define ICON_SetPreheat6          ICON_SetCustomPreheat
+#define ICON_SetPreheat7          ICON_SetCustomPreheat
+#define ICON_SetPreheat8          ICON_SetCustomPreheat
+#define ICON_SetPreheat9          ICON_SetCustomPreheat
+#define ICON_SetPreheat10         ICON_SetCustomPreheat
 #define ICON_Sound                ICON_Cool
 #define ICON_TBSetup              ICON_Contact
 #define ICON_UBLActive            ICON_HotendTemp
+#define ICON_UBLActive            ICON_HotendTemp
+#define ICON_UBLSlot              ICON_ResumeEEPROM
+#define ICON_UBLSaveMesh          ICON_WriteEEPROM
+#define ICON_UBLLoadMesh          ICON_ReadEEPROM
+#define ICON_UBLTiltGrid          ICON_PrintSize
+#define ICON_UBLSmartFill         ICON_StockConfiguration
+#define ICON_ZAfterHome           ICON_SetEndTemp
+
+
 
 #define ICON_CaseLight            ICON_Motion
 #define ICON_LedControl           ICON_Motion
 
 // Buttons
 #define BTN_Continue          85
 #define BTN_Cancel            87
 #define BTN_Confirm           89
 #define BTN_Print             90
 #define BTN_Save              91
@@ -255,32 +292,39 @@ namespace DWINUI {
   //  v: value to extend
   inline frame_rect_t ExtendFrame(frame_rect_t frame, uint8_t v) {
     frame_rect_t t;
     t.x = frame.x - v;
     t.y = frame.y - v;
     t.w = frame.w + 2 * v;
     t.h = frame.h + 2 * v;
     return t;
   }
 
+  // Draw an Icon and select library automatically
+  //  BG: The icon background display: false=Background filtering is not displayed, true=Background display
+  //  libID: Icon library ID
+  //  picID: Icon ID
+  //  x/y: Upper-left point
+  void ICON_Show(bool BG, uint8_t icon, uint16_t x, uint16_t y);
+
   // Draw an Icon with transparent background from the library ICON
   //  icon: Icon ID
   //  x/y: Upper-left point
   inline void Draw_Icon(uint8_t icon, uint16_t x, uint16_t y) {
-    DWIN_ICON_Show(ICON, icon, x, y);
+    ICON_Show(false, icon, x, y);
   }
 
   // Draw an Icon from the library ICON with its background
   //  icon: Icon ID
   //  x/y: Upper-left point
   inline void Draw_IconWB(uint8_t icon, uint16_t x, uint16_t y) {
-    DWIN_ICON_Show(true, false, false, ICON, icon, x, y);
+    ICON_Show(true, icon, x, y);
   }
 
   // Draw a numeric integer value
   //  bShow: true=display background color; false=don't display background color
   //  signedMode: 1=signed; 0=unsigned
   //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  iNum: Number of digits
   //  x/y: Upper-left coordinate

commit 8fb54d4621c5f571d613fca2943393d4a95cb8e4
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Thu Jul 14 00:00:33 2022 -0500

    üö∏ Fix and update ProUI (#24477)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index f8ff091769..a544471831 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -17,35 +17,36 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 /**
  * DWIN Enhanced implementation for PRO UI
  * Author: Miguel A. Risco-Castillo (MRISCOC)
- * Version: 3.17.1
- * Date: 2022/04/12
+ * Version: 3.18.1
+ * Date: 2022/07/05
  */
 
 #include "dwin_lcd.h"
 #include "../common/dwin_set.h"
 #include "../common/dwin_font.h"
 #include "../common/dwin_color.h"
 
 // Extra Icons
 #define ICON_AdvSet               ICON_Language
 #define ICON_BedSizeX             ICON_PrintSize
 #define ICON_BedSizeY             ICON_PrintSize
 #define ICON_BedTramming          ICON_SetHome
 #define ICON_Binary               ICON_Contact
+#define ICON_BltouchReset         ICON_StockConfiguration
 #define ICON_Brightness           ICON_Motion
 #define ICON_Cancel               ICON_StockConfiguration
 #define ICON_CustomPreheat        ICON_SetEndTemp
 #define ICON_Error                ICON_TempTooHigh
 #define ICON_ESDiag               ICON_Info
 #define ICON_ExtrudeMinT          ICON_HotendTemp
 #define ICON_FilLoad              ICON_WriteEEPROM
 #define ICON_FilMan               ICON_ResumeEEPROM
 #define ICON_FilSet               ICON_ResumeEEPROM
 #define ICON_FilUnload            ICON_ReadEEPROM
@@ -138,32 +139,32 @@
 #define Color_Brown           0xCC27
 #define Color_Light_Brown     0x6204
 #define Color_Grey            0x18E3
 
 // UI element defines and constants
 #define DWIN_FONT_MENU font8x16
 #define DWIN_FONT_STAT font10x20
 #define DWIN_FONT_HEAD font10x20
 #define DWIN_FONT_ALERT font10x20
 #define STATUS_Y 354
-#define LCD_WIDTH (DWIN_WIDTH / 8)  // only if the default font is font8x16
+#define LCD_WIDTH (DWIN_WIDTH / 8)  // only if the default fontid is font8x16
 
 // Minimum unit (0.1) : multiple (10)
 #define UNITFDIGITS 1
 #define MINUNITMULT POW(10, UNITFDIGITS)
 
 constexpr uint8_t  TITLE_HEIGHT = 30,                          // Title bar height
                    MLINE = 53,                                 // Menu line height
                    TROWS = (STATUS_Y - TITLE_HEIGHT) / MLINE,  // Total rows
                    MROWS = TROWS - 1,                          // Other-than-Back
                    ICOX = 26,                                  // Menu item icon X position
-                   LBLX = 60,                                  // Menu item label X position
+                   LBLX = 55,                                  // Menu item label X position
                    VALX = 210,                                 // Menu item value X position
                    MENU_CHR_W = 8, MENU_CHR_H = 16,            // Menu font 8x16
                    STAT_CHR_W = 10;
 
 // Menuitem Y position
 #define MYPOS(L) (TITLE_HEIGHT + MLINE * (L))
 
 // Menuitem caption Offset
 #define CAPOFF ((MLINE - MENU_CHR_H) / 2)
 
@@ -189,38 +190,38 @@ public:
   void FrameCopy(uint16_t x, uint16_t y, uint16_t h, uint16_t v);
 };
 extern TitleClass Title;
 
 namespace DWINUI {
   extern xy_int_t cursor;
   extern uint16_t pencolor;
   extern uint16_t textcolor;
   extern uint16_t backcolor;
   extern uint16_t buttoncolor;
-  extern uint8_t  font;
+  extern fontid_t fontid;
   extern FSTR_P const Author;
 
   extern void (*onTitleDraw)(TitleClass* title);
 
   // DWIN LCD Initialization
   void init();
 
   // Set text/number font
-  void setFont(uint8_t cfont);
+  void setFont(fontid_t cfont);
 
   // Get font character width
-  uint8_t fontWidth(uint8_t cfont);
-  inline uint8_t fontWidth() { return fontWidth(font); };
+  uint8_t fontWidth(fontid_t cfont);
+  inline uint8_t fontWidth() { return fontWidth(fontid); };
 
   // Get font character height
-  uint8_t fontHeight(uint8_t cfont);
-  inline uint8_t fontHeight() { return fontHeight(font); };
+  uint8_t fontHeight(fontid_t cfont);
+  inline uint8_t fontHeight() { return fontHeight(fontid); };
 
   // Get screen x coordinates from text column
   uint16_t ColToX(uint8_t col);
 
   // Get screen y coordinates from text row
   uint16_t RowToY(uint8_t row);
 
   // Set text/number color
   void SetColors(uint16_t fgcolor, uint16_t bgcolor, uint16_t alcolor);
   void SetTextColor(uint16_t fgcolor);
@@ -271,122 +272,122 @@ namespace DWINUI {
   // Draw an Icon from the library ICON with its background
   //  icon: Icon ID
   //  x/y: Upper-left point
   inline void Draw_IconWB(uint8_t icon, uint16_t x, uint16_t y) {
     DWIN_ICON_Show(true, false, false, ICON, icon, x, y);
   }
 
   // Draw a numeric integer value
   //  bShow: true=display background color; false=don't display background color
   //  signedMode: 1=signed; 0=unsigned
-  //  size: Font size
+  //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  iNum: Number of digits
   //  x/y: Upper-left coordinate
   //  value: Integer value
-  void Draw_Int(uint8_t bShow, bool signedMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value);
+  void Draw_Int(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value);
 
   // Draw a positive integer
-  inline void Draw_Int(uint8_t bShow, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(bShow, 0, size, color, bColor, iNum, x, y, value);
+  inline void Draw_Int(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    Draw_Int(bShow, 0, fid, color, bColor, iNum, x, y, value);
   }
   inline void Draw_Int(uint8_t iNum, long value) {
-    Draw_Int(false, 0, font, textcolor, backcolor, iNum, cursor.x, cursor.y, value);
-    MoveBy(iNum * fontWidth(font), 0);
+    Draw_Int(false, 0, fontid, textcolor, backcolor, iNum, cursor.x, cursor.y, value);
+    MoveBy(iNum * fontWidth(fontid), 0);
   }
   inline void Draw_Int(uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(false, 0, font, textcolor, backcolor, iNum, x, y, value);
+    Draw_Int(false, 0, fontid, textcolor, backcolor, iNum, x, y, value);
   }
   inline void Draw_Int(uint16_t color, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(false, 0, font, color, backcolor, iNum, x, y, value);
+    Draw_Int(false, 0, fontid, color, backcolor, iNum, x, y, value);
   }
   inline void Draw_Int(uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(true, 0, font, color, bColor, iNum, x, y, value);
+    Draw_Int(true, 0, fontid, color, bColor, iNum, x, y, value);
   }
-  inline void Draw_Int(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(true, 0, size, color, bColor, iNum, x, y, value);
+  inline void Draw_Int(fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    Draw_Int(true, 0, fid, color, bColor, iNum, x, y, value);
   }
 
   // Draw a signed integer
-  inline void Draw_Signed_Int(uint8_t bShow, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(bShow, 1, size, color, bColor, iNum, x, y, value);
+  inline void Draw_Signed_Int(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    Draw_Int(bShow, 1, fid, color, bColor, iNum, x, y, value);
   }
   inline void Draw_Signed_Int(uint8_t iNum, long value) {
-    Draw_Int(false, 1, font, textcolor, backcolor, iNum, cursor.x, cursor.y, value);
-    MoveBy(iNum * fontWidth(font), 0);
+    Draw_Int(false, 1, fontid, textcolor, backcolor, iNum, cursor.x, cursor.y, value);
+    MoveBy(iNum * fontWidth(fontid), 0);
   }
   inline void Draw_Signed_Int(uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(false, 1, font, textcolor, backcolor, iNum, x, y, value);
+    Draw_Int(false, 1, fontid, textcolor, backcolor, iNum, x, y, value);
   }
   inline void Draw_Signed_Int(uint16_t color, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(false, 1, font, color, backcolor, iNum, x, y, value);
+    Draw_Int(false, 1, fontid, color, backcolor, iNum, x, y, value);
   }
   inline void Draw_Signed_Int(uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(true, 1, font, color, bColor, iNum, x, y, value);
+    Draw_Int(true, 1, fontid, color, bColor, iNum, x, y, value);
   }
-  inline void Draw_Signed_Int(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    Draw_Int(true, 1, size, color, bColor, iNum, x, y, value);
+  inline void Draw_Signed_Int(fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    Draw_Int(true, 1, fid, color, bColor, iNum, x, y, value);
   }
 
   // Draw a numeric float value
   //  bShow: true=display background color; false=don't display background color
   //  signedMode: 1=signed; 0=unsigned
-  //  size: Font size
+  //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  iNum: Number of digits
   //  fNum: Number of decimal digits
   //  x/y: Upper-left coordinate
   //  value: float value
-  void Draw_Float(uint8_t bShow, bool signedMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value);
+  void Draw_Float(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value);
 
   // Draw a positive floating point number
-  inline void Draw_Float(uint8_t bShow, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(bShow, 0, size, color, bColor, iNum, fNum, x, y, value);
+  inline void Draw_Float(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Float(bShow, 0, fid, color, bColor, iNum, fNum, x, y, value);
   }
   inline void Draw_Float(uint8_t iNum, uint8_t fNum, float value) {
-    Draw_Float(false, 0, font, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
-    MoveBy((iNum + fNum + 1) * fontWidth(font), 0);
+    Draw_Float(false, 0, fontid, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
+    MoveBy((iNum + fNum + 1) * fontWidth(fontid), 0);
   }
   inline void Draw_Float(uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(false, 0, font, textcolor, backcolor, iNum, fNum, x, y, value);
+    Draw_Float(false, 0, fontid, textcolor, backcolor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Float(uint8_t size, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(false, 0, size, textcolor, backcolor, iNum, fNum, x, y, value);
+  inline void Draw_Float(fontid_t fid, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Float(false, 0, fid, textcolor, backcolor, iNum, fNum, x, y, value);
   }
   inline void Draw_Float(uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(true, 0, font, color, bColor, iNum, fNum, x, y, value);
+    Draw_Float(true, 0, fontid, color, bColor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Float(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(true, 0, size, color, bColor, iNum, fNum, x, y, value);
+  inline void Draw_Float(fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Float(true, 0, fid, color, bColor, iNum, fNum, x, y, value);
   }
 
   // Draw a signed floating point number
-  inline void Draw_Signed_Float(uint8_t bShow, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(bShow, 1, size, color, bColor, iNum, fNum, x, y, value);
+  inline void Draw_Signed_Float(uint8_t bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Float(bShow, 1, fid, color, bColor, iNum, fNum, x, y, value);
   }
   inline void Draw_Signed_Float(uint8_t iNum, uint8_t fNum, float value) {
-    Draw_Float(false, 1, font, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
-    MoveBy((iNum + fNum + 1) * fontWidth(font), 0);
+    Draw_Float(false, 1, fontid, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
+    MoveBy((iNum + fNum + 1) * fontWidth(fontid), 0);
   }
   inline void Draw_Signed_Float(uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(false, 1, font, textcolor, backcolor, iNum, fNum, x, y, value);
+    Draw_Float(false, 1, fontid, textcolor, backcolor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Signed_Float(uint8_t size, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(false, 1, size, textcolor, backcolor, iNum, fNum, x, y, value);
+  inline void Draw_Signed_Float(fontid_t fid, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Float(false, 1, fid, textcolor, backcolor, iNum, fNum, x, y, value);
   }
   inline void Draw_Signed_Float(uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(true, 1, font, color, bColor, iNum, fNum, x, y, value);
+    Draw_Float(true, 1, fontid, color, bColor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Signed_Float(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Float(true, 1, size, color, bColor, iNum, fNum, x, y, value);
+  inline void Draw_Signed_Float(fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Float(true, 1, fid, color, bColor, iNum, fNum, x, y, value);
   }
 
   // Draw a char
   //  color: Character color
   //  x: abscissa of the display
   //  y: ordinate of the display
   //  c: ASCII code of char
   void Draw_Char(uint16_t color, uint16_t x, uint16_t y, const char c);
   inline void Draw_Char(uint16_t x, uint16_t y, const char c) { Draw_Char(textcolor, x, y, c); };
   // Draw a char at cursor position and increment cursor
@@ -400,84 +401,84 @@ namespace DWINUI {
   void Draw_String(const char * const string, uint16_t rlimit = 0xFFFF);
   void Draw_String(uint16_t color, const char * const string, uint16_t rlimit = 0xFFFF);
   inline void Draw_String(FSTR_P  string, uint16_t rlimit = 0xFFFF) {
     Draw_String(FTOP(string), rlimit);
   }
   inline void Draw_String(uint16_t color, FSTR_P string, uint16_t rlimit = 0xFFFF) {
     Draw_String(color, FTOP(string), rlimit);
   }
 
   // Draw a string
-  //  size: Font size
+  //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  x/y: Upper-left coordinate of the string
   //  *string: The string
   inline void Draw_String(uint16_t x, uint16_t y, const char * const string) {
-    DWIN_Draw_String(false, font, textcolor, backcolor, x, y, string);
+    DWIN_Draw_String(false, fontid, textcolor, backcolor, x, y, string);
   }
   inline void Draw_String(uint16_t x, uint16_t y, FSTR_P title) {
-    DWIN_Draw_String(false, font, textcolor, backcolor, x, y, FTOP(title));
+    DWIN_Draw_String(false, fontid, textcolor, backcolor, x, y, FTOP(title));
   }
   inline void Draw_String(uint16_t color, uint16_t x, uint16_t y, const char * const string) {
-    DWIN_Draw_String(false, font, color, backcolor, x, y, string);
+    DWIN_Draw_String(false, fontid, color, backcolor, x, y, string);
   }
   inline void Draw_String(uint16_t color, uint16_t x, uint16_t y, FSTR_P title) {
-    DWIN_Draw_String(false, font, color, backcolor, x, y, title);
+    DWIN_Draw_String(false, fontid, color, backcolor, x, y, title);
   }
   inline void Draw_String(uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, const char * const string) {
-    DWIN_Draw_String(true, font, color, bgcolor, x, y, string);
+    DWIN_Draw_String(true, fontid, color, bgcolor, x, y, string);
   }
   inline void Draw_String(uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, FSTR_P title) {
-    DWIN_Draw_String(true, font, color, bgcolor, x, y, title);
+    DWIN_Draw_String(true, fontid, color, bgcolor, x, y, title);
   }
-  inline void Draw_String(uint8_t size, uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, const char * const string) {
-    DWIN_Draw_String(true, size, color, bgcolor, x, y, string);
+  inline void Draw_String(fontid_t fid, uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, const char * const string) {
+    DWIN_Draw_String(true, fid, color, bgcolor, x, y, string);
   }
-  inline void Draw_String(uint8_t size, uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, FSTR_P title) {
-    DWIN_Draw_String(true, size, color, bgcolor, x, y, title);
+  inline void Draw_String(fontid_t fid, uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, FSTR_P title) {
+    DWIN_Draw_String(true, fid, color, bgcolor, x, y, title);
   }
 
   // Draw a centered string using DWIN_WIDTH
   //  bShow: true=display background color; false=don't display background color
-  //  size: Font size
+  //  fid: Font ID
   //  color: Character color
   //  bColor: Background color
   //  y: Upper coordinate of the string
   //  *string: The string
-  void Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string);
-  inline void Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t y, const char * const string) {
-    Draw_CenteredString(bShow, size, color, bColor, 0, DWIN_WIDTH, y, string);
+  void Draw_CenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string);
+  inline void Draw_CenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t y, const char * const string) {
+    Draw_CenteredString(bShow, fid, color, bColor, 0, DWIN_WIDTH, y, string);
   }
-  inline void Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t y, FSTR_P string) {
-    Draw_CenteredString(bShow, size, color, bColor, y, FTOP(string));
+  inline void Draw_CenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t y, FSTR_P string) {
+    Draw_CenteredString(bShow, fid, color, bColor, y, FTOP(string));
   }
   inline void Draw_CenteredString(uint16_t color, uint16_t bcolor, uint16_t y, const char * const string) {
-    Draw_CenteredString(true, font, color, bcolor, y, string);
+    Draw_CenteredString(true, fontid, color, bcolor, y, string);
   }
-  inline void Draw_CenteredString(uint8_t size, uint16_t color, uint16_t y, const char * const string) {
-    Draw_CenteredString(false, size, color, backcolor, y, string);
+  inline void Draw_CenteredString(fontid_t fid, uint16_t color, uint16_t y, const char * const string) {
+    Draw_CenteredString(false, fid, color, backcolor, y, string);
   }
-  inline void Draw_CenteredString(uint8_t size, uint16_t color, uint16_t y, FSTR_P title) {
-    Draw_CenteredString(false, size, color, backcolor, y, title);
+  inline void Draw_CenteredString(fontid_t fid, uint16_t color, uint16_t y, FSTR_P title) {
+    Draw_CenteredString(false, fid, color, backcolor, y, title);
   }
   inline void Draw_CenteredString(uint16_t color, uint16_t y, const char * const string) {
-    Draw_CenteredString(false, font, color, backcolor, y, string);
+    Draw_CenteredString(false, fontid, color, backcolor, y, string);
   }
   inline void Draw_CenteredString(uint16_t color, uint16_t y, FSTR_P title) {
-    Draw_CenteredString(false, font, color, backcolor, y, title);
+    Draw_CenteredString(false, fontid, color, backcolor, y, title);
   }
   inline void Draw_CenteredString(uint16_t y, const char * const string) {
-    Draw_CenteredString(false, font, textcolor, backcolor, y, string);
+    Draw_CenteredString(false, fontid, textcolor, backcolor, y, string);
   }
   inline void Draw_CenteredString(uint16_t y, FSTR_P title) {
-    Draw_CenteredString(false, font, textcolor, backcolor, y, title);
+    Draw_CenteredString(false, fontid, textcolor, backcolor, y, title);
   }
 
   // Draw a box
   //  mode: 0=frame, 1=fill, 2=XOR fill
   //  color: Rectangle color
   //  frame: Box coordinates and size
   inline void Draw_Box(uint8_t mode, uint16_t color, frame_rect_t frame) {
     DWIN_Draw_Box(mode, color, frame.x, frame.y, frame.w, frame.h);
   }
 

commit a65e4edb1c794dcd22980f3cce9bf2993da1514b
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Tue May 17 15:44:30 2022 -0500

    üö∏ ProUI APRIL2022 updates (#24084)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 6771c77d5d..f8ff091769 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -17,50 +17,53 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 /**
  * DWIN Enhanced implementation for PRO UI
  * Author: Miguel A. Risco-Castillo (MRISCOC)
- * Version: 3.15.1
- * Date: 2022/02/25
+ * Version: 3.17.1
+ * Date: 2022/04/12
  */
 
 #include "dwin_lcd.h"
 #include "../common/dwin_set.h"
 #include "../common/dwin_font.h"
 #include "../common/dwin_color.h"
 
 // Extra Icons
 #define ICON_AdvSet               ICON_Language
 #define ICON_BedSizeX             ICON_PrintSize
 #define ICON_BedSizeY             ICON_PrintSize
+#define ICON_BedTramming          ICON_SetHome
 #define ICON_Binary               ICON_Contact
 #define ICON_Brightness           ICON_Motion
 #define ICON_Cancel               ICON_StockConfiguration
 #define ICON_CustomPreheat        ICON_SetEndTemp
 #define ICON_Error                ICON_TempTooHigh
 #define ICON_ESDiag               ICON_Info
 #define ICON_ExtrudeMinT          ICON_HotendTemp
 #define ICON_FilLoad              ICON_WriteEEPROM
 #define ICON_FilMan               ICON_ResumeEEPROM
 #define ICON_FilSet               ICON_ResumeEEPROM
 #define ICON_FilUnload            ICON_ReadEEPROM
 #define ICON_Flow                 ICON_StepE
 #define ICON_Folder               ICON_More
+#define ICON_FWRetract            ICON_StepE
 #define ICON_FWRetLength          ICON_StepE
 #define ICON_FWRetSpeed           ICON_Setspeed
 #define ICON_FWRetZRaise          ICON_MoveZ
 #define ICON_FWRecSpeed           ICON_Setspeed
+#define ICON_FWRecExtra           ICON_StepE
 #define ICON_HomeX                ICON_MoveX
 #define ICON_HomeY                ICON_MoveY
 #define ICON_HomeZ                ICON_MoveZ
 #define ICON_HomeOffset           ICON_AdvSet
 #define ICON_HomeOffsetX          ICON_StepX
 #define ICON_HomeOffsetY          ICON_StepY
 #define ICON_HomeOffsetZ          ICON_StepZ
 #define ICON_HSMode               ICON_StockConfiguration
 #define ICON_InvertE0             ICON_StepE
 #define ICON_Tram                 ICON_SetEndTemp
@@ -95,147 +98,115 @@
 #define ICON_ProbeStow            ICON_SetEndTemp
 #define ICON_ProbeTest            ICON_SetEndTemp
 #define ICON_ProbeZSpeed          ICON_MaxSpeedZ
 #define ICON_Pwrlossr             ICON_Motion
 #define ICON_Reboot               ICON_ResumeEEPROM
 #define ICON_Runout               ICON_MaxAccE
 #define ICON_Scolor               ICON_MaxSpeed
 #define ICON_SetBaudRate          ICON_Setspeed
 #define ICON_SetCustomPreheat     ICON_SetEndTemp
 #define ICON_Sound                ICON_Cool
+#define ICON_TBSetup              ICON_Contact
+#define ICON_UBLActive            ICON_HotendTemp
+
 #define ICON_CaseLight            ICON_Motion
 #define ICON_LedControl           ICON_Motion
 
 // Buttons
 #define BTN_Continue          85
 #define BTN_Cancel            87
 #define BTN_Confirm           89
 #define BTN_Print             90
 #define BTN_Save              91
+#define BTN_Purge             92
 
 // Extended and default UI Colors
 #define Color_Black           0
 #define Color_Green           RGB(0,63,0)
 #define Color_Aqua            RGB(0,63,31)
 #define Color_Blue            RGB(0,0,31)
+#define Color_Light_White     0xBDD7
+#define Color_Light_Green     0x3460
+#define Color_Cyan            0x07FF
+#define Color_Light_Cyan      0x04F3
+#define Color_Light_Blue      0x3A6A
+#define Color_Magenta         0xF81F
+#define Color_Light_Magenta   0x9813
+#define Color_Light_Red       0x8800
+#define Color_Orange          0xFA20
+#define Color_Light_Orange    0xFBC0
+#define Color_Light_Yellow    0x8BE0
+#define Color_Brown           0xCC27
+#define Color_Light_Brown     0x6204
+#define Color_Grey            0x18E3
 
 // UI element defines and constants
 #define DWIN_FONT_MENU font8x16
 #define DWIN_FONT_STAT font10x20
 #define DWIN_FONT_HEAD font10x20
 #define DWIN_FONT_ALERT font10x20
 #define STATUS_Y 354
 #define LCD_WIDTH (DWIN_WIDTH / 8)  // only if the default font is font8x16
 
 // Minimum unit (0.1) : multiple (10)
 #define UNITFDIGITS 1
 #define MINUNITMULT POW(10, UNITFDIGITS)
 
-constexpr uint16_t TITLE_HEIGHT = 30,                          // Title bar height
+constexpr uint8_t  TITLE_HEIGHT = 30,                          // Title bar height
                    MLINE = 53,                                 // Menu line height
                    TROWS = (STATUS_Y - TITLE_HEIGHT) / MLINE,  // Total rows
                    MROWS = TROWS - 1,                          // Other-than-Back
                    ICOX = 26,                                  // Menu item icon X position
                    LBLX = 60,                                  // Menu item label X position
                    VALX = 210,                                 // Menu item value X position
                    MENU_CHR_W = 8, MENU_CHR_H = 16,            // Menu font 8x16
                    STAT_CHR_W = 10;
 
 // Menuitem Y position
 #define MYPOS(L) (TITLE_HEIGHT + MLINE * (L))
 
 // Menuitem caption Offset
 #define CAPOFF ((MLINE - MENU_CHR_H) / 2)
 
 // Menuitem caption Y position
 #define MBASE(L) (MYPOS(L) + CAPOFF)
 
-// Create and add a MenuItem object to the menu array
-#define MENU_ITEM(V...) DWINUI::MenuItemsAdd(new MenuItemClass(V))
-#define EDIT_ITEM(V...) DWINUI::MenuItemsAdd(new MenuItemPtrClass(V))
-
 typedef struct { uint16_t left, top, right, bottom; } rect_t;
 typedef struct { uint16_t x, y, w, h; } frame_rect_t;
 
 class TitleClass {
 public:
   char caption[32] = "";
   uint8_t frameid = 0;
   rect_t frame = {0};
   void draw();
   void SetCaption(const char * const title);
   inline void SetCaption(FSTR_P title) { SetCaption((char *)title); }
   void ShowCaption(const char * const title);
   inline void ShowCaption(FSTR_P title) { ShowCaption((char *)title); }
   void SetFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
   void SetFrame(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
   void FrameCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
   void FrameCopy(uint16_t x, uint16_t y, uint16_t h, uint16_t v);
 };
 extern TitleClass Title;
 
-class MenuItemClass {
-protected:
-public:
-  int8_t pos = 0;
-  uint8_t icon = 0;
-  char caption[32] = "";
-  uint8_t frameid = 0;
-  rect_t frame = {0};
-  void (*onDraw)(MenuItemClass* menuitem, int8_t line) = nullptr;
-  void (*onClick)() = nullptr;
-  MenuItemClass() {};
-  MenuItemClass(uint8_t cicon, const char * const text=nullptr, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr);
-  MenuItemClass(uint8_t cicon, FSTR_P text = nullptr, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr) : MenuItemClass(cicon, FTOP(text), ondraw, onclick){}
-  MenuItemClass(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr);
-  void SetFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
-  virtual ~MenuItemClass(){};
-  virtual void draw(int8_t line);
-};
-
-class MenuItemPtrClass: public MenuItemClass {
-public:
-  void *value = nullptr;
-  using MenuItemClass::MenuItemClass;
-  MenuItemPtrClass(uint8_t cicon, const char * const text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val);
-  MenuItemPtrClass(uint8_t cicon, FSTR_P text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val) : MenuItemPtrClass(cicon, FTOP(text), ondraw, onclick, val){}
-};
-
-class MenuClass {
-public:
-  int8_t topline = 0;
-  int8_t selected = 0;
-  TitleClass MenuTitle;
-  MenuClass();
-  virtual ~MenuClass(){};
-  inline int8_t line() { return selected - topline; };
-  inline int8_t line(uint8_t pos) {return pos - topline; };
-  void draw();
-  void onScroll(bool dir);
-  void onClick();
-  MenuItemClass* SelectedItem();
-};
-extern MenuClass *CurrentMenu;
-
 namespace DWINUI {
   extern xy_int_t cursor;
   extern uint16_t pencolor;
   extern uint16_t textcolor;
   extern uint16_t backcolor;
   extern uint16_t buttoncolor;
   extern uint8_t  font;
   extern FSTR_P const Author;
 
-  extern void (*onCursorErase)(const int8_t line);
-  extern void (*onCursorDraw)(const int8_t line);
   extern void (*onTitleDraw)(TitleClass* title);
-  extern void (*onMenuDraw)(MenuClass* menu);
 
   // DWIN LCD Initialization
   void init();
 
   // Set text/number font
   void setFont(uint8_t cfont);
 
   // Get font character width
   uint8_t fontWidth(uint8_t cfont);
   inline uint8_t fontWidth() { return fontWidth(font); };
@@ -297,143 +268,135 @@ namespace DWINUI {
     DWIN_ICON_Show(ICON, icon, x, y);
   }
 
   // Draw an Icon from the library ICON with its background
   //  icon: Icon ID
   //  x/y: Upper-left point
   inline void Draw_IconWB(uint8_t icon, uint16_t x, uint16_t y) {
     DWIN_ICON_Show(true, false, false, ICON, icon, x, y);
   }
 
-  // Draw a positive integer
+  // Draw a numeric integer value
   //  bShow: true=display background color; false=don't display background color
-  //  zeroFill: true=zero fill; false=no zero fill
-  //  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
+  //  signedMode: 1=signed; 0=unsigned
   //  size: Font size
   //  color: Character color
   //  bColor: Background color
   //  iNum: Number of digits
   //  x/y: Upper-left coordinate
   //  value: Integer value
-  inline void Draw_Int(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_Value(bShow, 0, zeroFill, zeroMode, size, color, bColor, iNum, 0, x, y, value);
+  void Draw_Int(uint8_t bShow, bool signedMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value);
+
+  // Draw a positive integer
+  inline void Draw_Int(uint8_t bShow, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    Draw_Int(bShow, 0, size, color, bColor, iNum, x, y, value);
   }
   inline void Draw_Int(uint8_t iNum, long value) {
-    DWIN_Draw_Value(false, 0, true, 0, font, textcolor, backcolor, iNum, 0, cursor.x, cursor.y, value);
+    Draw_Int(false, 0, font, textcolor, backcolor, iNum, cursor.x, cursor.y, value);
     MoveBy(iNum * fontWidth(font), 0);
   }
   inline void Draw_Int(uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_Value(false, 0, true, 0, font, textcolor, backcolor, iNum, 0, x, y, value);
+    Draw_Int(false, 0, font, textcolor, backcolor, iNum, x, y, value);
   }
   inline void Draw_Int(uint16_t color, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_Value(false, 0, true, 0, font, color, backcolor, iNum, 0, x, y, value);
+    Draw_Int(false, 0, font, color, backcolor, iNum, x, y, value);
   }
   inline void Draw_Int(uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_Value(true, 0, true, 0, font, color, bColor, iNum, 0, x, y, value);
+    Draw_Int(true, 0, font, color, bColor, iNum, x, y, value);
   }
   inline void Draw_Int(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_Value(true, 0, true, 0, size, color, bColor, iNum, 0, x, y, value);
+    Draw_Int(true, 0, size, color, bColor, iNum, x, y, value);
   }
 
   // Draw a signed integer
-  //  bShow: true=display background color; false=don't display background color
-  //  zeroFill: true=zero fill; false=no zero fill
-  //  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
-  //  size: Font size
-  //  color: Character color
-  //  bColor: Background color
-  //  iNum: Number of digits
-  //  x/y: Upper-left coordinate
-  //  value: Integer value
-  inline void Draw_Signed_Int(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_Value(bShow, 1, zeroFill, zeroMode, size, color, bColor, iNum, 0, x, y, value);
+  inline void Draw_Signed_Int(uint8_t bShow, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    Draw_Int(bShow, 1, size, color, bColor, iNum, x, y, value);
   }
   inline void Draw_Signed_Int(uint8_t iNum, long value) {
-    DWIN_Draw_Value(false, 1, true, 0, font, textcolor, backcolor, iNum, 0, cursor.x, cursor.y, value);
+    Draw_Int(false, 1, font, textcolor, backcolor, iNum, cursor.x, cursor.y, value);
     MoveBy(iNum * fontWidth(font), 0);
   }
   inline void Draw_Signed_Int(uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_Value(false, 1, true, 0, font, textcolor, backcolor, iNum, 0, x, y, value);
+    Draw_Int(false, 1, font, textcolor, backcolor, iNum, x, y, value);
   }
   inline void Draw_Signed_Int(uint16_t color, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_Value(false, 1, true, 0, font, color, backcolor, iNum, 0, x, y, value);
+    Draw_Int(false, 1, font, color, backcolor, iNum, x, y, value);
   }
   inline void Draw_Signed_Int(uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_Value(true, 1, true, 0, font, color, bColor, iNum, 0, x, y, value);
+    Draw_Int(true, 1, font, color, bColor, iNum, x, y, value);
   }
   inline void Draw_Signed_Int(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_Value(true, 1, true, 0, size, color, bColor, iNum, 0, x, y, value);
+    Draw_Int(true, 1, size, color, bColor, iNum, x, y, value);
   }
 
-  // Draw a positive floating point number
+  // Draw a numeric float value
   //  bShow: true=display background color; false=don't display background color
-  //  zeroFill: true=zero fill; false=no zero fill
-  //  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
+  //  signedMode: 1=signed; 0=unsigned
   //  size: Font size
   //  color: Character color
   //  bColor: Background color
-  //  iNum: Number of whole digits
+  //  iNum: Number of digits
   //  fNum: Number of decimal digits
-  //  x/y: Upper-left point
-  //  value: Float value
-  inline void Draw_Float(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_Value(bShow, 0, zeroFill, zeroMode, size, color, bColor, iNum, fNum, x, y, value);
+  //  x/y: Upper-left coordinate
+  //  value: float value
+  void Draw_Float(uint8_t bShow, bool signedMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value);
+
+  // Draw a positive floating point number
+  inline void Draw_Float(uint8_t bShow, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Float(bShow, 0, size, color, bColor, iNum, fNum, x, y, value);
   }
   inline void Draw_Float(uint8_t iNum, uint8_t fNum, float value) {
-    DWIN_Draw_Value(false, 0, true, 0, font, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
+    Draw_Float(false, 0, font, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
     MoveBy((iNum + fNum + 1) * fontWidth(font), 0);
   }
   inline void Draw_Float(uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_Value(false, 0, true, 0, font, textcolor, backcolor, iNum, fNum, x, y, value);
+    Draw_Float(false, 0, font, textcolor, backcolor, iNum, fNum, x, y, value);
   }
-  inline void Draw_Float(uint16_t color, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_Value(false, 0, true, 0, font, color, backcolor, iNum, fNum, x, y, value);
+  inline void Draw_Float(uint8_t size, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Float(false, 0, size, textcolor, backcolor, iNum, fNum, x, y, value);
   }
   inline void Draw_Float(uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_Value(true, 0, true, 0, font, color, bColor, iNum, fNum, x, y, value);
+    Draw_Float(true, 0, font, color, bColor, iNum, fNum, x, y, value);
   }
   inline void Draw_Float(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_Value(true, 0, true, 0, size, color, bColor, iNum, fNum, x, y, value);
+    Draw_Float(true, 0, size, color, bColor, iNum, fNum, x, y, value);
   }
 
   // Draw a signed floating point number
-  //  bShow: true=display background color; false=don't display background color
-  //  zeroFill: true=zero fill; false=no zero fill
-  //  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
-  //  size: Font size
-  //  color: Character color
-  //  bColor: Background color
-  //  iNum: Number of whole digits
-  //  fNum: Number of decimal digits
-  //  x/y: Upper-left point
-  //  value: Float value
-  inline void Draw_Signed_Float(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_Value(bShow, 1, zeroFill, zeroMode, size, color, bColor, iNum, fNum, x, y, value);
+  inline void Draw_Signed_Float(uint8_t bShow, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Float(bShow, 1, size, color, bColor, iNum, fNum, x, y, value);
   }
   inline void Draw_Signed_Float(uint8_t iNum, uint8_t fNum, float value) {
-    DWIN_Draw_Value(false, 1, true, 0, font, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
+    Draw_Float(false, 1, font, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
     MoveBy((iNum + fNum + 1) * fontWidth(font), 0);
   }
   inline void Draw_Signed_Float(uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_Value(false, 1, true, 0, font, textcolor, backcolor, iNum, fNum, x, y, value);
+    Draw_Float(false, 1, font, textcolor, backcolor, iNum, fNum, x, y, value);
   }
   inline void Draw_Signed_Float(uint8_t size, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_Value(false, 1, true, 0, size, textcolor, backcolor, iNum, fNum, x, y, value);
+    Draw_Float(false, 1, size, textcolor, backcolor, iNum, fNum, x, y, value);
   }
   inline void Draw_Signed_Float(uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_Value(true, 1, true, 0, font, color, bColor, iNum, fNum, x, y, value);
+    Draw_Float(true, 1, font, color, bColor, iNum, fNum, x, y, value);
   }
   inline void Draw_Signed_Float(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_Value(true, 1, true, 0, size, color, bColor, iNum, fNum, x, y, value);
+    Draw_Float(true, 1, size, color, bColor, iNum, fNum, x, y, value);
   }
 
-  // Draw a char at cursor position
+  // Draw a char
+  //  color: Character color
+  //  x: abscissa of the display
+  //  y: ordinate of the display
+  //  c: ASCII code of char
+  void Draw_Char(uint16_t color, uint16_t x, uint16_t y, const char c);
+  inline void Draw_Char(uint16_t x, uint16_t y, const char c) { Draw_Char(textcolor, x, y, c); };
+  // Draw a char at cursor position and increment cursor
   void Draw_Char(uint16_t color, const char c);
   inline void Draw_Char(const char c) { Draw_Char(textcolor, c); }
 
   // Draw a string at cursor position
   //  color: Character color
   //  *string: The string
   //  rlimit: For draw less chars than string length use rlimit
   void Draw_String(const char * const string, uint16_t rlimit = 0xFFFF);
   void Draw_String(uint16_t color, const char * const string, uint16_t rlimit = 0xFFFF);
   inline void Draw_String(FSTR_P  string, uint16_t rlimit = 0xFFFF) {
@@ -584,24 +547,15 @@ namespace DWINUI {
   }
 
   // Write buffer data to the Flash
   //  addr: Flash start address 0x0000-0x3FFF
   //  length: Bytes to write
   //  data: address of the buffer with data
   inline void WriteToFlash(uint16_t addr, uint16_t length, uint8_t *data) {
     DWIN_WriteToMem(0xA5, addr, length, data);
   }
 
-  // Clear Menu by filling the area with background color
+  // Clear by filling the area with background color
   // Area (0, TITLE_HEIGHT, DWIN_WIDTH, STATUS_Y - 1)
   void ClearMainArea();
 
-  // Clear MenuItems array and free MenuItems elements
-  void MenuItemsClear();
-
-  // Prepare MenuItems array
-  void MenuItemsPrepare(int8_t totalitems);
-
-  // Add elements to the MenuItems array
-  MenuItemClass* MenuItemsAdd(MenuItemClass* menuitem);
-
 };

commit 1e749e4f48f528179213e736c99371843a90b4fb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu May 12 20:13:59 2022 -0500

    üßë‚Äçüíª Misc. LCD cleanup

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 1504dcd305..6771c77d5d 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -586,21 +586,21 @@ namespace DWINUI {
   // Write buffer data to the Flash
   //  addr: Flash start address 0x0000-0x3FFF
   //  length: Bytes to write
   //  data: address of the buffer with data
   inline void WriteToFlash(uint16_t addr, uint16_t length, uint8_t *data) {
     DWIN_WriteToMem(0xA5, addr, length, data);
   }
 
   // Clear Menu by filling the area with background color
   // Area (0, TITLE_HEIGHT, DWIN_WIDTH, STATUS_Y - 1)
-  void ClearMenuArea();
+  void ClearMainArea();
 
   // Clear MenuItems array and free MenuItems elements
   void MenuItemsClear();
 
   // Prepare MenuItems array
   void MenuItemsPrepare(int8_t totalitems);
 
   // Add elements to the MenuItems array
   MenuItemClass* MenuItemsAdd(MenuItemClass* menuitem);
 

commit 79b38e0e14074b52e0aeb98b08a686a99a9b1aad
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Fri Mar 11 15:06:49 2022 -0500

    üö∏ Update Ender3 V2/S1 Pro UI (#23878)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
index 595c534356..1504dcd305 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.h
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -15,26 +15,24 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once
 
 /**
- * DWIN UI Enhanced implementation
+ * DWIN Enhanced implementation for PRO UI
  * Author: Miguel A. Risco-Castillo (MRISCOC)
- * Version: 3.11.1
- * Date: 2022/01/19
- *
- * Based on the original code provided by Creality under GPL
+ * Version: 3.15.1
+ * Date: 2022/02/25
  */
 
 #include "dwin_lcd.h"
 #include "../common/dwin_set.h"
 #include "../common/dwin_font.h"
 #include "../common/dwin_color.h"
 
 // Extra Icons
 #define ICON_AdvSet               ICON_Language
 #define ICON_BedSizeX             ICON_PrintSize
@@ -100,33 +98,44 @@
 #define ICON_Pwrlossr             ICON_Motion
 #define ICON_Reboot               ICON_ResumeEEPROM
 #define ICON_Runout               ICON_MaxAccE
 #define ICON_Scolor               ICON_MaxSpeed
 #define ICON_SetBaudRate          ICON_Setspeed
 #define ICON_SetCustomPreheat     ICON_SetEndTemp
 #define ICON_Sound                ICON_Cool
 #define ICON_CaseLight            ICON_Motion
 #define ICON_LedControl           ICON_Motion
 
+// Buttons
+#define BTN_Continue          85
+#define BTN_Cancel            87
+#define BTN_Confirm           89
+#define BTN_Print             90
+#define BTN_Save              91
+
 // Extended and default UI Colors
 #define Color_Black           0
 #define Color_Green           RGB(0,63,0)
 #define Color_Aqua            RGB(0,63,31)
 #define Color_Blue            RGB(0,0,31)
 
 // UI element defines and constants
 #define DWIN_FONT_MENU font8x16
 #define DWIN_FONT_STAT font10x20
 #define DWIN_FONT_HEAD font10x20
 #define DWIN_FONT_ALERT font10x20
 #define STATUS_Y 354
-#define LCD_WIDTH (DWIN_WIDTH / 8)
+#define LCD_WIDTH (DWIN_WIDTH / 8)  // only if the default font is font8x16
+
+// Minimum unit (0.1) : multiple (10)
+#define UNITFDIGITS 1
+#define MINUNITMULT POW(10, UNITFDIGITS)
 
 constexpr uint16_t TITLE_HEIGHT = 30,                          // Title bar height
                    MLINE = 53,                                 // Menu line height
                    TROWS = (STATUS_Y - TITLE_HEIGHT) / MLINE,  // Total rows
                    MROWS = TROWS - 1,                          // Other-than-Back
                    ICOX = 26,                                  // Menu item icon X position
                    LBLX = 60,                                  // Menu item label X position
                    VALX = 210,                                 // Menu item value X position
                    MENU_CHR_W = 8, MENU_CHR_H = 16,            // Menu font 8x16
                    STAT_CHR_W = 10;
@@ -205,21 +214,23 @@ public:
   void onClick();
   MenuItemClass* SelectedItem();
 };
 extern MenuClass *CurrentMenu;
 
 namespace DWINUI {
   extern xy_int_t cursor;
   extern uint16_t pencolor;
   extern uint16_t textcolor;
   extern uint16_t backcolor;
+  extern uint16_t buttoncolor;
   extern uint8_t  font;
+  extern FSTR_P const Author;
 
   extern void (*onCursorErase)(const int8_t line);
   extern void (*onCursorDraw)(const int8_t line);
   extern void (*onTitleDraw)(TitleClass* title);
   extern void (*onMenuDraw)(MenuClass* menu);
 
   // DWIN LCD Initialization
   void init();
 
   // Set text/number font
@@ -233,21 +244,21 @@ namespace DWINUI {
   uint8_t fontHeight(uint8_t cfont);
   inline uint8_t fontHeight() { return fontHeight(font); };
 
   // Get screen x coordinates from text column
   uint16_t ColToX(uint8_t col);
 
   // Get screen y coordinates from text row
   uint16_t RowToY(uint8_t row);
 
   // Set text/number color
-  void SetColors(uint16_t fgcolor, uint16_t bgcolor);
+  void SetColors(uint16_t fgcolor, uint16_t bgcolor, uint16_t alcolor);
   void SetTextColor(uint16_t fgcolor);
   void SetBackgroundColor(uint16_t bgcolor);
 
   // Moves cursor to point
   //  x: abscissa of the display
   //  y: ordinate of the display
   //  point: xy coordinate
   void MoveTo(int16_t x, int16_t y);
   void MoveTo(xy_int_t point);
 
@@ -261,20 +272,31 @@ namespace DWINUI {
   // Draw a line from the cursor to xy position
   //  color: Line segment color
   //  x/y: End point
   inline void LineTo(uint16_t color, uint16_t x, uint16_t y) {
     DWIN_Draw_Line(color, cursor.x, cursor.y, x, y);
   }
   inline void LineTo(uint16_t x, uint16_t y) {
     DWIN_Draw_Line(pencolor, cursor.x, cursor.y, x, y);
   }
 
+  // Extend a frame box
+  //  v: value to extend
+  inline frame_rect_t ExtendFrame(frame_rect_t frame, uint8_t v) {
+    frame_rect_t t;
+    t.x = frame.x - v;
+    t.y = frame.y - v;
+    t.w = frame.w + 2 * v;
+    t.h = frame.h + 2 * v;
+    return t;
+  }
+
   // Draw an Icon with transparent background from the library ICON
   //  icon: Icon ID
   //  x/y: Upper-left point
   inline void Draw_Icon(uint8_t icon, uint16_t x, uint16_t y) {
     DWIN_ICON_Show(ICON, icon, x, y);
   }
 
   // Draw an Icon from the library ICON with its background
   //  icon: Icon ID
   //  x/y: Upper-left point
@@ -286,100 +308,134 @@ namespace DWINUI {
   //  bShow: true=display background color; false=don't display background color
   //  zeroFill: true=zero fill; false=no zero fill
   //  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
   //  size: Font size
   //  color: Character color
   //  bColor: Background color
   //  iNum: Number of digits
   //  x/y: Upper-left coordinate
   //  value: Integer value
   inline void Draw_Int(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_IntValue(bShow, zeroFill, zeroMode, size, color, bColor, iNum, x, y, value);
+    DWIN_Draw_Value(bShow, 0, zeroFill, zeroMode, size, color, bColor, iNum, 0, x, y, value);
   }
   inline void Draw_Int(uint8_t iNum, long value) {
-    DWIN_Draw_IntValue(false, true, 0, font, textcolor, backcolor, iNum, cursor.x, cursor.y, value);
+    DWIN_Draw_Value(false, 0, true, 0, font, textcolor, backcolor, iNum, 0, cursor.x, cursor.y, value);
     MoveBy(iNum * fontWidth(font), 0);
   }
   inline void Draw_Int(uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_IntValue(false, true, 0, font, textcolor, backcolor, iNum, x, y, value);
+    DWIN_Draw_Value(false, 0, true, 0, font, textcolor, backcolor, iNum, 0, x, y, value);
   }
   inline void Draw_Int(uint16_t color, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_IntValue(false, true, 0, font, color, backcolor, iNum, x, y, value);
+    DWIN_Draw_Value(false, 0, true, 0, font, color, backcolor, iNum, 0, x, y, value);
   }
   inline void Draw_Int(uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_IntValue(true, true, 0, font, color, bColor, iNum, x, y, value);
+    DWIN_Draw_Value(true, 0, true, 0, font, color, bColor, iNum, 0, x, y, value);
   }
   inline void Draw_Int(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
-    DWIN_Draw_IntValue(true, true, 0, size, color, bColor, iNum, x, y, value);
+    DWIN_Draw_Value(true, 0, true, 0, size, color, bColor, iNum, 0, x, y, value);
   }
 
-  // Draw a floating point number
+  // Draw a signed integer
+  //  bShow: true=display background color; false=don't display background color
+  //  zeroFill: true=zero fill; false=no zero fill
+  //  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
+  //  size: Font size
+  //  color: Character color
+  //  bColor: Background color
+  //  iNum: Number of digits
+  //  x/y: Upper-left coordinate
+  //  value: Integer value
+  inline void Draw_Signed_Int(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    DWIN_Draw_Value(bShow, 1, zeroFill, zeroMode, size, color, bColor, iNum, 0, x, y, value);
+  }
+  inline void Draw_Signed_Int(uint8_t iNum, long value) {
+    DWIN_Draw_Value(false, 1, true, 0, font, textcolor, backcolor, iNum, 0, cursor.x, cursor.y, value);
+    MoveBy(iNum * fontWidth(font), 0);
+  }
+  inline void Draw_Signed_Int(uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    DWIN_Draw_Value(false, 1, true, 0, font, textcolor, backcolor, iNum, 0, x, y, value);
+  }
+  inline void Draw_Signed_Int(uint16_t color, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    DWIN_Draw_Value(false, 1, true, 0, font, color, backcolor, iNum, 0, x, y, value);
+  }
+  inline void Draw_Signed_Int(uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    DWIN_Draw_Value(true, 1, true, 0, font, color, bColor, iNum, 0, x, y, value);
+  }
+  inline void Draw_Signed_Int(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    DWIN_Draw_Value(true, 1, true, 0, size, color, bColor, iNum, 0, x, y, value);
+  }
+
+  // Draw a positive floating point number
   //  bShow: true=display background color; false=don't display background color
   //  zeroFill: true=zero fill; false=no zero fill
   //  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
   //  size: Font size
   //  color: Character color
   //  bColor: Background color
   //  iNum: Number of whole digits
   //  fNum: Number of decimal digits
   //  x/y: Upper-left point
   //  value: Float value
   inline void Draw_Float(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_FloatValue(bShow, zeroFill, zeroMode, size, color, bColor, iNum, fNum, x, y, value);
+    DWIN_Draw_Value(bShow, 0, zeroFill, zeroMode, size, color, bColor, iNum, fNum, x, y, value);
   }
   inline void Draw_Float(uint8_t iNum, uint8_t fNum, float value) {
-    DWIN_Draw_FloatValue(false, true, 0, font, textcolor, backcolor, iNum, fNum,  cursor.x, cursor.y, value);
+    DWIN_Draw_Value(false, 0, true, 0, font, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
     MoveBy((iNum + fNum + 1) * fontWidth(font), 0);
   }
   inline void Draw_Float(uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_FloatValue(false, true, 0, font, textcolor, backcolor, iNum, fNum, x, y, value);
+    DWIN_Draw_Value(false, 0, true, 0, font, textcolor, backcolor, iNum, fNum, x, y, value);
   }
   inline void Draw_Float(uint16_t color, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_FloatValue(false, true, 0, font, color, backcolor, iNum, fNum, x, y, value);
+    DWIN_Draw_Value(false, 0, true, 0, font, color, backcolor, iNum, fNum, x, y, value);
   }
   inline void Draw_Float(uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_FloatValue(true, true, 0, font, color, bColor, iNum, fNum, x, y, value);
+    DWIN_Draw_Value(true, 0, true, 0, font, color, bColor, iNum, fNum, x, y, value);
   }
   inline void Draw_Float(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    DWIN_Draw_FloatValue(true, true, 0, size, color, bColor, iNum, fNum, x, y, value);
+    DWIN_Draw_Value(true, 0, true, 0, size, color, bColor, iNum, fNum, x, y, value);
   }
 
   // Draw a signed floating point number
   //  bShow: true=display background color; false=don't display background color
   //  zeroFill: true=zero fill; false=no zero fill
   //  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
   //  size: Font size
+  //  color: Character color
   //  bColor: Background color
   //  iNum: Number of whole digits
   //  fNum: Number of decimal digits
   //  x/y: Upper-left point
   //  value: Float value
-  void Draw_Signed_Float(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value);
+  inline void Draw_Signed_Float(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    DWIN_Draw_Value(bShow, 1, zeroFill, zeroMode, size, color, bColor, iNum, fNum, x, y, value);
+  }
   inline void Draw_Signed_Float(uint8_t iNum, uint8_t fNum, float value) {
-    Draw_Signed_Float(false, true, 0, font, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
+    DWIN_Draw_Value(false, 1, true, 0, font, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
     MoveBy((iNum + fNum + 1) * fontWidth(font), 0);
   }
   inline void Draw_Signed_Float(uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Signed_Float(false, true, 0, font, textcolor, backcolor, iNum, fNum, x, y, value);
+    DWIN_Draw_Value(false, 1, true, 0, font, textcolor, backcolor, iNum, fNum, x, y, value);
   }
   inline void Draw_Signed_Float(uint8_t size, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Signed_Float(false, true, 0, size, textcolor, backcolor, iNum, fNum, x, y, value);
+    DWIN_Draw_Value(false, 1, true, 0, size, textcolor, backcolor, iNum, fNum, x, y, value);
   }
   inline void Draw_Signed_Float(uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Signed_Float(true, true, 0, font, color, bColor, iNum, fNum, x, y, value);
+    DWIN_Draw_Value(true, 1, true, 0, font, color, bColor, iNum, fNum, x, y, value);
   }
   inline void Draw_Signed_Float(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-    Draw_Signed_Float(true, true, 0, size, color, bColor, iNum, fNum, x, y, value);
+    DWIN_Draw_Value(true, 1, true, 0, size, color, bColor, iNum, fNum, x, y, value);
   }
 
   // Draw a char at cursor position
-  void Draw_Char(const char c);
+  void Draw_Char(uint16_t color, const char c);
+  inline void Draw_Char(const char c) { Draw_Char(textcolor, c); }
 
   // Draw a string at cursor position
   //  color: Character color
   //  *string: The string
   //  rlimit: For draw less chars than string length use rlimit
   void Draw_String(const char * const string, uint16_t rlimit = 0xFFFF);
   void Draw_String(uint16_t color, const char * const string, uint16_t rlimit = 0xFFFF);
   inline void Draw_String(FSTR_P  string, uint16_t rlimit = 0xFFFF) {
     Draw_String(FTOP(string), rlimit);
   }
@@ -418,21 +474,24 @@ namespace DWINUI {
     DWIN_Draw_String(true, size, color, bgcolor, x, y, title);
   }
 
   // Draw a centered string using DWIN_WIDTH
   //  bShow: true=display background color; false=don't display background color
   //  size: Font size
   //  color: Character color
   //  bColor: Background color
   //  y: Upper coordinate of the string
   //  *string: The string
-  void Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t y, const char * const string);
+  void Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string);
+  inline void Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t y, const char * const string) {
+    Draw_CenteredString(bShow, size, color, bColor, 0, DWIN_WIDTH, y, string);
+  }
   inline void Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t y, FSTR_P string) {
     Draw_CenteredString(bShow, size, color, bColor, y, FTOP(string));
   }
   inline void Draw_CenteredString(uint16_t color, uint16_t bcolor, uint16_t y, const char * const string) {
     Draw_CenteredString(true, font, color, bcolor, y, string);
   }
   inline void Draw_CenteredString(uint8_t size, uint16_t color, uint16_t y, const char * const string) {
     Draw_CenteredString(false, size, color, backcolor, y, string);
   }
   inline void Draw_CenteredString(uint8_t size, uint16_t color, uint16_t y, FSTR_P title) {
@@ -480,20 +539,31 @@ namespace DWINUI {
   }
 
   // Color Interpolator
   //  val : Interpolator minv..maxv
   //  minv : Minimum value
   //  maxv : Maximum value
   //  color1 : Start color
   //  color2 : End color
   uint16_t ColorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t color1, uint16_t color2);
 
+  // ------------------------- Buttons ------------------------------//
+
+  void Draw_Button(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const char * const caption);
+  inline void Draw_Button(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, FSTR_P caption) {
+    Draw_Button(color, bcolor, x1, y1, x2, y2, FTOP(caption));
+  }
+  inline void Draw_Button(FSTR_P caption, uint16_t x, uint16_t y) {
+    Draw_Button(textcolor, buttoncolor, x, y, x + 99, y + 37, caption);
+  }
+  void Draw_Button(uint8_t id, uint16_t x, uint16_t y);
+
   // -------------------------- Extra -------------------------------//
 
   // Draw a circle filled with color
   //  bcolor: fill color
   //  x: abscissa of the center of the circle
   //  y: ordinate of the center of the circle
   //  r: circle radius
   void Draw_FillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r);
   inline void Draw_FillCircle(uint16_t bcolor, uint8_t r) {
     Draw_FillCircle(bcolor, cursor.x, cursor.y, r);

commit 0564cb188f1a74dc9ecfb55b793f4225424a9ca4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 5 10:30:17 2022 -0600

    üö∏ Enhanced UI => Professional UI - with updates (#23624)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.h b/Marlin/src/lcd/e3v2/proui/dwinui.h
new file mode 100644
index 0000000000..595c534356
--- /dev/null
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.h
@@ -0,0 +1,537 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2021 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+#pragma once
+
+/**
+ * DWIN UI Enhanced implementation
+ * Author: Miguel A. Risco-Castillo (MRISCOC)
+ * Version: 3.11.1
+ * Date: 2022/01/19
+ *
+ * Based on the original code provided by Creality under GPL
+ */
+
+#include "dwin_lcd.h"
+#include "../common/dwin_set.h"
+#include "../common/dwin_font.h"
+#include "../common/dwin_color.h"
+
+// Extra Icons
+#define ICON_AdvSet               ICON_Language
+#define ICON_BedSizeX             ICON_PrintSize
+#define ICON_BedSizeY             ICON_PrintSize
+#define ICON_Binary               ICON_Contact
+#define ICON_Brightness           ICON_Motion
+#define ICON_Cancel               ICON_StockConfiguration
+#define ICON_CustomPreheat        ICON_SetEndTemp
+#define ICON_Error                ICON_TempTooHigh
+#define ICON_ESDiag               ICON_Info
+#define ICON_ExtrudeMinT          ICON_HotendTemp
+#define ICON_FilLoad              ICON_WriteEEPROM
+#define ICON_FilMan               ICON_ResumeEEPROM
+#define ICON_FilSet               ICON_ResumeEEPROM
+#define ICON_FilUnload            ICON_ReadEEPROM
+#define ICON_Flow                 ICON_StepE
+#define ICON_Folder               ICON_More
+#define ICON_FWRetLength          ICON_StepE
+#define ICON_FWRetSpeed           ICON_Setspeed
+#define ICON_FWRetZRaise          ICON_MoveZ
+#define ICON_FWRecSpeed           ICON_Setspeed
+#define ICON_HomeX                ICON_MoveX
+#define ICON_HomeY                ICON_MoveY
+#define ICON_HomeZ                ICON_MoveZ
+#define ICON_HomeOffset           ICON_AdvSet
+#define ICON_HomeOffsetX          ICON_StepX
+#define ICON_HomeOffsetY          ICON_StepY
+#define ICON_HomeOffsetZ          ICON_StepZ
+#define ICON_HSMode               ICON_StockConfiguration
+#define ICON_InvertE0             ICON_StepE
+#define ICON_Tram                 ICON_SetEndTemp
+#define ICON_Level                ICON_HotendTemp
+#define ICON_Lock                 ICON_Cool
+#define ICON_ManualMesh           ICON_HotendTemp
+#define ICON_MaxPosX              ICON_MoveX
+#define ICON_MaxPosY              ICON_MoveY
+#define ICON_MaxPosZ              ICON_MoveZ
+#define ICON_MeshNext             ICON_Axis
+#define ICON_MeshPoints           ICON_SetEndTemp
+#define ICON_MeshSave             ICON_WriteEEPROM
+#define ICON_MeshViewer           ICON_HotendTemp
+#define ICON_MoveZ0               ICON_HotendTemp
+#define ICON_Park                 ICON_Motion
+#define ICON_ParkPos              ICON_AdvSet
+#define ICON_ParkPosX             ICON_StepX
+#define ICON_ParkPosY             ICON_StepY
+#define ICON_ParkPosZ             ICON_StepZ
+#define ICON_PhySet               ICON_PrintSize
+#define ICON_PIDbed               ICON_SetBedTemp
+#define ICON_PIDcycles            ICON_ResumeEEPROM
+#define ICON_PIDValue             ICON_Contact
+#define ICON_PrintStats           ICON_PrintTime
+#define ICON_PrintStatsReset      ICON_RemainTime
+#define ICON_ProbeDeploy          ICON_SetEndTemp
+#define ICON_ProbeMargin          ICON_PrintSize
+#define ICON_ProbeOffsetX         ICON_StepX
+#define ICON_ProbeOffsetY         ICON_StepY
+#define ICON_ProbeOffsetZ         ICON_StepZ
+#define ICON_ProbeSet             ICON_SetEndTemp
+#define ICON_ProbeStow            ICON_SetEndTemp
+#define ICON_ProbeTest            ICON_SetEndTemp
+#define ICON_ProbeZSpeed          ICON_MaxSpeedZ
+#define ICON_Pwrlossr             ICON_Motion
+#define ICON_Reboot               ICON_ResumeEEPROM
+#define ICON_Runout               ICON_MaxAccE
+#define ICON_Scolor               ICON_MaxSpeed
+#define ICON_SetBaudRate          ICON_Setspeed
+#define ICON_SetCustomPreheat     ICON_SetEndTemp
+#define ICON_Sound                ICON_Cool
+#define ICON_CaseLight            ICON_Motion
+#define ICON_LedControl           ICON_Motion
+
+// Extended and default UI Colors
+#define Color_Black           0
+#define Color_Green           RGB(0,63,0)
+#define Color_Aqua            RGB(0,63,31)
+#define Color_Blue            RGB(0,0,31)
+
+// UI element defines and constants
+#define DWIN_FONT_MENU font8x16
+#define DWIN_FONT_STAT font10x20
+#define DWIN_FONT_HEAD font10x20
+#define DWIN_FONT_ALERT font10x20
+#define STATUS_Y 354
+#define LCD_WIDTH (DWIN_WIDTH / 8)
+
+constexpr uint16_t TITLE_HEIGHT = 30,                          // Title bar height
+                   MLINE = 53,                                 // Menu line height
+                   TROWS = (STATUS_Y - TITLE_HEIGHT) / MLINE,  // Total rows
+                   MROWS = TROWS - 1,                          // Other-than-Back
+                   ICOX = 26,                                  // Menu item icon X position
+                   LBLX = 60,                                  // Menu item label X position
+                   VALX = 210,                                 // Menu item value X position
+                   MENU_CHR_W = 8, MENU_CHR_H = 16,            // Menu font 8x16
+                   STAT_CHR_W = 10;
+
+// Menuitem Y position
+#define MYPOS(L) (TITLE_HEIGHT + MLINE * (L))
+
+// Menuitem caption Offset
+#define CAPOFF ((MLINE - MENU_CHR_H) / 2)
+
+// Menuitem caption Y position
+#define MBASE(L) (MYPOS(L) + CAPOFF)
+
+// Create and add a MenuItem object to the menu array
+#define MENU_ITEM(V...) DWINUI::MenuItemsAdd(new MenuItemClass(V))
+#define EDIT_ITEM(V...) DWINUI::MenuItemsAdd(new MenuItemPtrClass(V))
+
+typedef struct { uint16_t left, top, right, bottom; } rect_t;
+typedef struct { uint16_t x, y, w, h; } frame_rect_t;
+
+class TitleClass {
+public:
+  char caption[32] = "";
+  uint8_t frameid = 0;
+  rect_t frame = {0};
+  void draw();
+  void SetCaption(const char * const title);
+  inline void SetCaption(FSTR_P title) { SetCaption((char *)title); }
+  void ShowCaption(const char * const title);
+  inline void ShowCaption(FSTR_P title) { ShowCaption((char *)title); }
+  void SetFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
+  void SetFrame(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
+  void FrameCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
+  void FrameCopy(uint16_t x, uint16_t y, uint16_t h, uint16_t v);
+};
+extern TitleClass Title;
+
+class MenuItemClass {
+protected:
+public:
+  int8_t pos = 0;
+  uint8_t icon = 0;
+  char caption[32] = "";
+  uint8_t frameid = 0;
+  rect_t frame = {0};
+  void (*onDraw)(MenuItemClass* menuitem, int8_t line) = nullptr;
+  void (*onClick)() = nullptr;
+  MenuItemClass() {};
+  MenuItemClass(uint8_t cicon, const char * const text=nullptr, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr);
+  MenuItemClass(uint8_t cicon, FSTR_P text = nullptr, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr) : MenuItemClass(cicon, FTOP(text), ondraw, onclick){}
+  MenuItemClass(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, void (*ondraw)(MenuItemClass* menuitem, int8_t line)=nullptr, void (*onclick)()=nullptr);
+  void SetFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
+  virtual ~MenuItemClass(){};
+  virtual void draw(int8_t line);
+};
+
+class MenuItemPtrClass: public MenuItemClass {
+public:
+  void *value = nullptr;
+  using MenuItemClass::MenuItemClass;
+  MenuItemPtrClass(uint8_t cicon, const char * const text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val);
+  MenuItemPtrClass(uint8_t cicon, FSTR_P text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val) : MenuItemPtrClass(cicon, FTOP(text), ondraw, onclick, val){}
+};
+
+class MenuClass {
+public:
+  int8_t topline = 0;
+  int8_t selected = 0;
+  TitleClass MenuTitle;
+  MenuClass();
+  virtual ~MenuClass(){};
+  inline int8_t line() { return selected - topline; };
+  inline int8_t line(uint8_t pos) {return pos - topline; };
+  void draw();
+  void onScroll(bool dir);
+  void onClick();
+  MenuItemClass* SelectedItem();
+};
+extern MenuClass *CurrentMenu;
+
+namespace DWINUI {
+  extern xy_int_t cursor;
+  extern uint16_t pencolor;
+  extern uint16_t textcolor;
+  extern uint16_t backcolor;
+  extern uint8_t  font;
+
+  extern void (*onCursorErase)(const int8_t line);
+  extern void (*onCursorDraw)(const int8_t line);
+  extern void (*onTitleDraw)(TitleClass* title);
+  extern void (*onMenuDraw)(MenuClass* menu);
+
+  // DWIN LCD Initialization
+  void init();
+
+  // Set text/number font
+  void setFont(uint8_t cfont);
+
+  // Get font character width
+  uint8_t fontWidth(uint8_t cfont);
+  inline uint8_t fontWidth() { return fontWidth(font); };
+
+  // Get font character height
+  uint8_t fontHeight(uint8_t cfont);
+  inline uint8_t fontHeight() { return fontHeight(font); };
+
+  // Get screen x coordinates from text column
+  uint16_t ColToX(uint8_t col);
+
+  // Get screen y coordinates from text row
+  uint16_t RowToY(uint8_t row);
+
+  // Set text/number color
+  void SetColors(uint16_t fgcolor, uint16_t bgcolor);
+  void SetTextColor(uint16_t fgcolor);
+  void SetBackgroundColor(uint16_t bgcolor);
+
+  // Moves cursor to point
+  //  x: abscissa of the display
+  //  y: ordinate of the display
+  //  point: xy coordinate
+  void MoveTo(int16_t x, int16_t y);
+  void MoveTo(xy_int_t point);
+
+  // Moves cursor relative to the actual position
+  //  x: abscissa of the display
+  //  y: ordinate of the display
+  //  point: xy coordinate
+  void MoveBy(int16_t x, int16_t y);
+  void MoveBy(xy_int_t point);
+
+  // Draw a line from the cursor to xy position
+  //  color: Line segment color
+  //  x/y: End point
+  inline void LineTo(uint16_t color, uint16_t x, uint16_t y) {
+    DWIN_Draw_Line(color, cursor.x, cursor.y, x, y);
+  }
+  inline void LineTo(uint16_t x, uint16_t y) {
+    DWIN_Draw_Line(pencolor, cursor.x, cursor.y, x, y);
+  }
+
+  // Draw an Icon with transparent background from the library ICON
+  //  icon: Icon ID
+  //  x/y: Upper-left point
+  inline void Draw_Icon(uint8_t icon, uint16_t x, uint16_t y) {
+    DWIN_ICON_Show(ICON, icon, x, y);
+  }
+
+  // Draw an Icon from the library ICON with its background
+  //  icon: Icon ID
+  //  x/y: Upper-left point
+  inline void Draw_IconWB(uint8_t icon, uint16_t x, uint16_t y) {
+    DWIN_ICON_Show(true, false, false, ICON, icon, x, y);
+  }
+
+  // Draw a positive integer
+  //  bShow: true=display background color; false=don't display background color
+  //  zeroFill: true=zero fill; false=no zero fill
+  //  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
+  //  size: Font size
+  //  color: Character color
+  //  bColor: Background color
+  //  iNum: Number of digits
+  //  x/y: Upper-left coordinate
+  //  value: Integer value
+  inline void Draw_Int(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    DWIN_Draw_IntValue(bShow, zeroFill, zeroMode, size, color, bColor, iNum, x, y, value);
+  }
+  inline void Draw_Int(uint8_t iNum, long value) {
+    DWIN_Draw_IntValue(false, true, 0, font, textcolor, backcolor, iNum, cursor.x, cursor.y, value);
+    MoveBy(iNum * fontWidth(font), 0);
+  }
+  inline void Draw_Int(uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    DWIN_Draw_IntValue(false, true, 0, font, textcolor, backcolor, iNum, x, y, value);
+  }
+  inline void Draw_Int(uint16_t color, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    DWIN_Draw_IntValue(false, true, 0, font, color, backcolor, iNum, x, y, value);
+  }
+  inline void Draw_Int(uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    DWIN_Draw_IntValue(true, true, 0, font, color, bColor, iNum, x, y, value);
+  }
+  inline void Draw_Int(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
+    DWIN_Draw_IntValue(true, true, 0, size, color, bColor, iNum, x, y, value);
+  }
+
+  // Draw a floating point number
+  //  bShow: true=display background color; false=don't display background color
+  //  zeroFill: true=zero fill; false=no zero fill
+  //  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
+  //  size: Font size
+  //  color: Character color
+  //  bColor: Background color
+  //  iNum: Number of whole digits
+  //  fNum: Number of decimal digits
+  //  x/y: Upper-left point
+  //  value: Float value
+  inline void Draw_Float(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    DWIN_Draw_FloatValue(bShow, zeroFill, zeroMode, size, color, bColor, iNum, fNum, x, y, value);
+  }
+  inline void Draw_Float(uint8_t iNum, uint8_t fNum, float value) {
+    DWIN_Draw_FloatValue(false, true, 0, font, textcolor, backcolor, iNum, fNum,  cursor.x, cursor.y, value);
+    MoveBy((iNum + fNum + 1) * fontWidth(font), 0);
+  }
+  inline void Draw_Float(uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    DWIN_Draw_FloatValue(false, true, 0, font, textcolor, backcolor, iNum, fNum, x, y, value);
+  }
+  inline void Draw_Float(uint16_t color, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    DWIN_Draw_FloatValue(false, true, 0, font, color, backcolor, iNum, fNum, x, y, value);
+  }
+  inline void Draw_Float(uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    DWIN_Draw_FloatValue(true, true, 0, font, color, bColor, iNum, fNum, x, y, value);
+  }
+  inline void Draw_Float(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    DWIN_Draw_FloatValue(true, true, 0, size, color, bColor, iNum, fNum, x, y, value);
+  }
+
+  // Draw a signed floating point number
+  //  bShow: true=display background color; false=don't display background color
+  //  zeroFill: true=zero fill; false=no zero fill
+  //  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
+  //  size: Font size
+  //  bColor: Background color
+  //  iNum: Number of whole digits
+  //  fNum: Number of decimal digits
+  //  x/y: Upper-left point
+  //  value: Float value
+  void Draw_Signed_Float(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value);
+  inline void Draw_Signed_Float(uint8_t iNum, uint8_t fNum, float value) {
+    Draw_Signed_Float(false, true, 0, font, textcolor, backcolor, iNum, fNum, cursor.x, cursor.y, value);
+    MoveBy((iNum + fNum + 1) * fontWidth(font), 0);
+  }
+  inline void Draw_Signed_Float(uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Signed_Float(false, true, 0, font, textcolor, backcolor, iNum, fNum, x, y, value);
+  }
+  inline void Draw_Signed_Float(uint8_t size, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Signed_Float(false, true, 0, size, textcolor, backcolor, iNum, fNum, x, y, value);
+  }
+  inline void Draw_Signed_Float(uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Signed_Float(true, true, 0, font, color, bColor, iNum, fNum, x, y, value);
+  }
+  inline void Draw_Signed_Float(uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+    Draw_Signed_Float(true, true, 0, size, color, bColor, iNum, fNum, x, y, value);
+  }
+
+  // Draw a char at cursor position
+  void Draw_Char(const char c);
+
+  // Draw a string at cursor position
+  //  color: Character color
+  //  *string: The string
+  //  rlimit: For draw less chars than string length use rlimit
+  void Draw_String(const char * const string, uint16_t rlimit = 0xFFFF);
+  void Draw_String(uint16_t color, const char * const string, uint16_t rlimit = 0xFFFF);
+  inline void Draw_String(FSTR_P  string, uint16_t rlimit = 0xFFFF) {
+    Draw_String(FTOP(string), rlimit);
+  }
+  inline void Draw_String(uint16_t color, FSTR_P string, uint16_t rlimit = 0xFFFF) {
+    Draw_String(color, FTOP(string), rlimit);
+  }
+
+  // Draw a string
+  //  size: Font size
+  //  color: Character color
+  //  bColor: Background color
+  //  x/y: Upper-left coordinate of the string
+  //  *string: The string
+  inline void Draw_String(uint16_t x, uint16_t y, const char * const string) {
+    DWIN_Draw_String(false, font, textcolor, backcolor, x, y, string);
+  }
+  inline void Draw_String(uint16_t x, uint16_t y, FSTR_P title) {
+    DWIN_Draw_String(false, font, textcolor, backcolor, x, y, FTOP(title));
+  }
+  inline void Draw_String(uint16_t color, uint16_t x, uint16_t y, const char * const string) {
+    DWIN_Draw_String(false, font, color, backcolor, x, y, string);
+  }
+  inline void Draw_String(uint16_t color, uint16_t x, uint16_t y, FSTR_P title) {
+    DWIN_Draw_String(false, font, color, backcolor, x, y, title);
+  }
+  inline void Draw_String(uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, const char * const string) {
+    DWIN_Draw_String(true, font, color, bgcolor, x, y, string);
+  }
+  inline void Draw_String(uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, FSTR_P title) {
+    DWIN_Draw_String(true, font, color, bgcolor, x, y, title);
+  }
+  inline void Draw_String(uint8_t size, uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, const char * const string) {
+    DWIN_Draw_String(true, size, color, bgcolor, x, y, string);
+  }
+  inline void Draw_String(uint8_t size, uint16_t color, uint16_t bgcolor, uint16_t x, uint16_t y, FSTR_P title) {
+    DWIN_Draw_String(true, size, color, bgcolor, x, y, title);
+  }
+
+  // Draw a centered string using DWIN_WIDTH
+  //  bShow: true=display background color; false=don't display background color
+  //  size: Font size
+  //  color: Character color
+  //  bColor: Background color
+  //  y: Upper coordinate of the string
+  //  *string: The string
+  void Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t y, const char * const string);
+  inline void Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t y, FSTR_P string) {
+    Draw_CenteredString(bShow, size, color, bColor, y, FTOP(string));
+  }
+  inline void Draw_CenteredString(uint16_t color, uint16_t bcolor, uint16_t y, const char * const string) {
+    Draw_CenteredString(true, font, color, bcolor, y, string);
+  }
+  inline void Draw_CenteredString(uint8_t size, uint16_t color, uint16_t y, const char * const string) {
+    Draw_CenteredString(false, size, color, backcolor, y, string);
+  }
+  inline void Draw_CenteredString(uint8_t size, uint16_t color, uint16_t y, FSTR_P title) {
+    Draw_CenteredString(false, size, color, backcolor, y, title);
+  }
+  inline void Draw_CenteredString(uint16_t color, uint16_t y, const char * const string) {
+    Draw_CenteredString(false, font, color, backcolor, y, string);
+  }
+  inline void Draw_CenteredString(uint16_t color, uint16_t y, FSTR_P title) {
+    Draw_CenteredString(false, font, color, backcolor, y, title);
+  }
+  inline void Draw_CenteredString(uint16_t y, const char * const string) {
+    Draw_CenteredString(false, font, textcolor, backcolor, y, string);
+  }
+  inline void Draw_CenteredString(uint16_t y, FSTR_P title) {
+    Draw_CenteredString(false, font, textcolor, backcolor, y, title);
+  }
+
+  // Draw a box
+  //  mode: 0=frame, 1=fill, 2=XOR fill
+  //  color: Rectangle color
+  //  frame: Box coordinates and size
+  inline void Draw_Box(uint8_t mode, uint16_t color, frame_rect_t frame) {
+    DWIN_Draw_Box(mode, color, frame.x, frame.y, frame.w, frame.h);
+  }
+
+  // Draw a circle
+  //  Color: circle color
+  //  x: abscissa of the center of the circle
+  //  y: ordinate of the center of the circle
+  //  r: circle radius
+  void Draw_Circle(uint16_t color, uint16_t x,uint16_t y,uint8_t r);
+  inline void Draw_Circle(uint16_t color, uint8_t r) {
+    Draw_Circle(color, cursor.x, cursor.y, r);
+  }
+
+  // Draw a checkbox
+  //  Color: frame color
+  //  bColor: Background color
+  //  x/y: Upper-left point
+  //  checked : 0 : unchecked, 1 : checked
+  void Draw_Checkbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool checked);
+  inline void Draw_Checkbox(uint16_t x, uint16_t y, bool checked=false) {
+    Draw_Checkbox(textcolor, backcolor, x, y, checked);
+  }
+
+  // Color Interpolator
+  //  val : Interpolator minv..maxv
+  //  minv : Minimum value
+  //  maxv : Maximum value
+  //  color1 : Start color
+  //  color2 : End color
+  uint16_t ColorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t color1, uint16_t color2);
+
+  // -------------------------- Extra -------------------------------//
+
+  // Draw a circle filled with color
+  //  bcolor: fill color
+  //  x: abscissa of the center of the circle
+  //  y: ordinate of the center of the circle
+  //  r: circle radius
+  void Draw_FillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r);
+  inline void Draw_FillCircle(uint16_t bcolor, uint8_t r) {
+    Draw_FillCircle(bcolor, cursor.x, cursor.y, r);
+  }
+
+  // Color Interpolator through Red->Yellow->Green->Blue
+  //  val : Interpolator minv..maxv
+  //  minv : Minimum value
+  //  maxv : Maximum value
+  uint16_t RainbowInt(int16_t val, int16_t minv, int16_t maxv);
+
+  // Write buffer data to the SRAM
+  //  addr: SRAM start address 0x0000-0x7FFF
+  //  length: Bytes to write
+  //  data: address of the buffer with data
+  inline void WriteToSRAM(uint16_t addr, uint16_t length, uint8_t *data) {
+    DWIN_WriteToMem(0x5A, addr, length, data);
+  }
+
+  // Write buffer data to the Flash
+  //  addr: Flash start address 0x0000-0x3FFF
+  //  length: Bytes to write
+  //  data: address of the buffer with data
+  inline void WriteToFlash(uint16_t addr, uint16_t length, uint8_t *data) {
+    DWIN_WriteToMem(0xA5, addr, length, data);
+  }
+
+  // Clear Menu by filling the area with background color
+  // Area (0, TITLE_HEIGHT, DWIN_WIDTH, STATUS_Y - 1)
+  void ClearMenuArea();
+
+  // Clear MenuItems array and free MenuItems elements
+  void MenuItemsClear();
+
+  // Prepare MenuItems array
+  void MenuItemsPrepare(int8_t totalitems);
+
+  // Add elements to the MenuItems array
+  MenuItemClass* MenuItemsAdd(MenuItemClass* menuitem);
+
+};
