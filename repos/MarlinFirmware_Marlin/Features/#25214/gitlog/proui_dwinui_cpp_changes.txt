commit 46e426ce9648682b1c59b75b4eabb9e647c18b05
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Sun May 12 13:28:38 2024 -0500

    üìù Use "based on" for partial ProUI (#26998)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index 41eab78785..2d6dc67197 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -22,7 +22,8 @@
 
 /**
  * DWIN Enhanced implementation for PRO UI
- * Author: Miguel A. Risco-Castillo (MRISCOC)
+ * Based on the original work of: Miguel Risco-Castillo (MRISCOC)
+ * https://github.com/mriscoc/Ender3V2S1
  * Version: 3.21.1
  * Date: 2023/03/21
  */

commit 87e94f456348e944ba4487aed436c762dd718966
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon Apr 1 16:05:11 2024 -0400

    üö∏ Update ProUI Plot graph - part 2 (#26563)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index 453e21a240..41eab78785 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -209,7 +209,7 @@ void DWINUI::drawFloat(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t co
 //  libID: Icon library ID
 //  picID: Icon ID
 //  x/y: Upper-left point
-void DWINUI::ICON_Show(bool BG, uint8_t icon, uint16_t x, uint16_t y) {
+void DWINUI::iconShow(bool BG, uint8_t icon, uint16_t x, uint16_t y) {
   const uint8_t libID = ICON TERN_(HAS_CUSTOMICONS, + (icon / 100));
   const uint8_t picID = icon TERN_(HAS_CUSTOMICONS, % 100);
   dwinIconShow(BG, false, !BG, libID, picID, x, y);

commit dd3b5a10a09e2a83918af1cf6f8782fd0c473f98
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 21 22:00:37 2024 -0600

    Misc. aesthetic adjustments
    
    Co-Authored-By: Andrew <18502096+classicrocker883@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index 23cd1736fd..453e21a240 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -79,7 +79,7 @@ uint8_t DWINUI::fontWidth(fontid_t fid) {
 uint8_t DWINUI::fontHeight(fontid_t fid) {
   switch (fid) {
     #if DISABLED(TJC_DISPLAY)
-    case font6x12 : return 12;
+      case font6x12 : return 12;
       case font20x40: return 40;
       case font24x48: return 48;
       case font28x56: return 56;
@@ -199,7 +199,7 @@ void DWINUI::drawInt(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t colo
 //  value: float value
 void DWINUI::drawFloat(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
   char nstr[10];
-  dwinDrawString(bShow, fid, color, bColor, x, y, dtostrf(value, iNum + (signedMode ? 2:1) + fNum, fNum, nstr));
+  dwinDrawString(bShow, fid, color, bColor, x, y, dtostrf(value, iNum + (signedMode ? 2 : 1) + fNum, fNum, nstr));
 }
 
 // ------------------------- Icons -------------------------------//
@@ -219,17 +219,17 @@ void DWINUI::ICON_Show(bool BG, uint8_t icon, uint16_t x, uint16_t y) {
 
 void DWINUI::drawButton(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const char * const caption) {
   dwinDrawRectangle(1, bcolor, x1, y1, x2, y2);
-  drawCenteredString(0, fontID, color, bcolor, x1, x2, (y2 + y1 - fontHeight())/2, caption);
+  drawCenteredString(0, fontID, color, bcolor, x1, x2, (y2 + y1 - fontHeight()) / 2, caption);
 }
 
 void DWINUI::drawButton(uint8_t id, uint16_t x, uint16_t y) {
   switch (id) {
-    case BTN_Cancel  : drawButton(GET_TEXT_F(MSG_BUTTON_CANCEL), x, y); break;
-    case BTN_Confirm : drawButton(GET_TEXT_F(MSG_BUTTON_CONFIRM), x, y); break;
     case BTN_Continue: drawButton(GET_TEXT_F(MSG_BUTTON_CONTINUE), x, y); break;
-    case BTN_Print   : drawButton(GET_TEXT_F(MSG_BUTTON_PRINT), x, y); break;
-    case BTN_Save    : drawButton(GET_TEXT_F(MSG_BUTTON_SAVE), x, y); break;
-    case BTN_Purge   : drawButton(GET_TEXT_F(MSG_BUTTON_PURGE), x, y); break;
+    case BTN_Cancel  : drawButton(GET_TEXT_F(MSG_BUTTON_CANCEL),   x, y); break;
+    case BTN_Confirm : drawButton(GET_TEXT_F(MSG_BUTTON_CONFIRM),  x, y); break;
+    case BTN_Print   : drawButton(GET_TEXT_F(MSG_BUTTON_PRINT),    x, y); break;
+    case BTN_Save    : drawButton(GET_TEXT_F(MSG_BUTTON_SAVE),     x, y); break;
+    case BTN_Purge   : drawButton(GET_TEXT_F(MSG_BUTTON_PURGE),    x, y); break;
     default: break;
   }
 }

commit a41e16ffee0ae828ecb73eeea3caab2f4aed82a8
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Wed Dec 6 00:11:41 2023 -0500

    ‚ú® Voxelab Aquila N32 (via Maple) (#26470)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index 7e94fc3e56..23cd1736fd 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -181,7 +181,7 @@ void DWINUI::drawString(uint16_t color, const char * const string, uint16_t rlim
 //  iNum: Number of digits
 //  x/y: Upper-left coordinate
 //  value: Integer value
-void DWINUI::drawInt(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value) {
+void DWINUI::drawInt(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, long value) {
   char nstr[10];
   sprintf_P(nstr, PSTR("%*li"), (signedMode ? iNum + 1 : iNum), value);
   dwinDrawString(bShow, fid, color, bColor, x, y, nstr);

commit 8fa6a4da2eebc1dbe120dcac87b159e389e17dc3
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Fri Aug 25 19:33:49 2023 -0400

    üö∏ Fixes for ProUI, JyersUI, backlight, etc. (#26086)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index 72b66fb5b3..7e94fc3e56 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -263,7 +263,7 @@ void DWINUI::drawCircle(uint16_t color, uint16_t x, uint16_t y, uint8_t r) {
 //  x: the abscissa of the center of the circle
 //  y: ordinate of the center of the circle
 //  r: circle radius
-void DWINUI::drawFillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r) {
+void DWINUI::drawFillCircle(uint16_t bcolor, uint16_t x, uint16_t y, uint8_t r) {
   dwinDrawLine(bcolor, x - r, y, x + r, y);
   uint16_t b = 1;
   while (b <= r) {
@@ -280,12 +280,12 @@ void DWINUI::drawFillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r) {
 //  maxv : Maximum value
 //  color1 : Start color
 //  color2 : End color
-uint16_t DWINUI::ColorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t color1, uint16_t color2) {
+uint16_t DWINUI::colorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t color1, uint16_t color2) {
   uint8_t B, G, R;
-  const float n = float(val - minv) / (maxv - minv);
-  R = (1 - n) * GetRColor(color1) + n * GetRColor(color2);
-  G = (1 - n) * GetGColor(color1) + n * GetGColor(color2);
-  B = (1 - n) * GetBColor(color1) + n * GetBColor(color2);
+  const float n = float(val - minv) / (maxv - minv + 1);
+  R = (1.0f - n) * GetRColor(color1) + n * GetRColor(color2);
+  G = (1.0f - n) * GetGColor(color1) + n * GetGColor(color2);
+  B = (1.0f - n) * GetBColor(color1) + n * GetBColor(color2);
   return RGB(R, G, B);
 }
 
@@ -293,27 +293,17 @@ uint16_t DWINUI::ColorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t colo
 //  val : Interpolator minv..maxv
 //  minv : Minimum value
 //  maxv : Maximum value
-uint16_t DWINUI::RainbowInt(int16_t val, int16_t minv, int16_t maxv) {
-  uint8_t B, G, R;
-  const uint8_t maxB = 28, maxR = 28, maxG = 38;
+uint16_t DWINUI::rainbowInt(int16_t val, int16_t minv, int16_t maxv) {
   const int16_t limv = _MAX(abs(minv), abs(maxv));
-  float n = minv >= 0 ? float(val - minv) / (maxv - minv) : (float)val / limv;
+  float n = (minv >= 0) ? float(val - minv) / (maxv - minv + 1) : (float)val / limv;
   LIMIT(n, -1, 1);
-  if (n < 0) {
-    R = 0;
-    G = (1 + n) * maxG;
-    B = (-n) * maxB;
-  }
-  else if (n < 0.5) {
-    R = maxR * n * 2;
-    G = maxG;
-    B = 0;
-  }
-  else {
-    R = maxR;
-    G = maxG * (1 - n);
-    B = 0;
-  }
+
+  constexpr uint8_t maxB = 28, maxR = 28, maxG = 38;
+  uint8_t R, G, B;
+       if (n <= -0.5f) { R = 0;            G = maxG * (1.0f + n); B = maxB; }
+  else if (n <=  0.0f) { R = 0;            G = maxG;              B = maxB * (-n) * 2; }
+  else if (n <   0.5f) { R = maxR * n * 2; G = maxG;              B = 0; }
+  else                 { R = maxR;         G = maxG * (1.0f - n); B = 0; }
   return RGB(R, G, B);
 }
 

commit f14f1be168ebf252dd458c935271aed1a57cfa0b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 30 19:16:00 2023 -0500

    üé® Standardize naming (ProUI) (#25982)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index 235b30f9fa..72b66fb5b3 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -35,26 +35,26 @@
 #include "dwinui.h"
 
 xy_int_t DWINUI::cursor = { 0 };
-uint16_t DWINUI::pencolor = Color_White;
-uint16_t DWINUI::textcolor = Def_Text_Color;
-uint16_t DWINUI::backcolor = Def_Background_Color;
-uint16_t DWINUI::buttoncolor = Def_Button_Color;
-uint8_t  DWINUI::fontid = font8x16;
-FSTR_P const DWINUI::Author = F(STRING_CONFIG_H_AUTHOR);
+uint16_t DWINUI::penColor = COLOR_WHITE;
+uint16_t DWINUI::textColor = defColorText;
+uint16_t DWINUI::backColor = defColorBackground;
+uint16_t DWINUI::buttonColor = defColorButton;
+uint8_t  DWINUI::fontID = font8x16;
+FSTR_P const DWINUI::author = F(STRING_CONFIG_H_AUTHOR);
 
-void (*DWINUI::onTitleDraw)(TitleClass* title) = nullptr;
+void (*DWINUI::onTitleDraw)(Title* t) = nullptr;
 
 void DWINUI::init() {
   cursor.reset();
-  pencolor = Color_White;
-  textcolor = Def_Text_Color;
-  backcolor = Def_Background_Color;
-  buttoncolor = Def_Button_Color;
-  fontid = font8x16;
+  penColor = COLOR_WHITE;
+  textColor = defColorText;
+  backColor = defColorBackground;
+  buttonColor = defColorButton;
+  fontID = font8x16;
 }
 
 // Set text/number font
-void DWINUI::setFont(fontid_t fid) { fontid = fid; }
+void DWINUI::setFont(fontid_t fid) { fontID = fid; }
 
 // Get font character width
 uint8_t DWINUI::fontWidth(fontid_t fid) {
@@ -95,33 +95,33 @@ uint8_t DWINUI::fontHeight(fontid_t fid) {
 }
 
 // Get screen x coordinates from text column
-uint16_t DWINUI::ColToX(uint8_t col) { return col * fontWidth(fontid); }
+uint16_t DWINUI::colToX(uint8_t col) { return col * fontWidth(fontID); }
 
 // Get screen y coordinates from text row
-uint16_t DWINUI::RowToY(uint8_t row) { return row * fontHeight(fontid); }
+uint16_t DWINUI::rowToY(uint8_t row) { return row * fontHeight(fontID); }
 
 // Set text/number color
-void DWINUI::SetColors(uint16_t fgcolor, uint16_t bgcolor, uint16_t alcolor) {
-  textcolor = fgcolor;
-  backcolor = bgcolor;
-  buttoncolor = alcolor;
+void DWINUI::setColors(uint16_t fgcolor, uint16_t bgcolor, uint16_t alcolor) {
+  textColor = fgcolor;
+  backColor = bgcolor;
+  buttonColor = alcolor;
 }
-void DWINUI::SetTextColor(uint16_t fgcolor) {
-  textcolor = fgcolor;
+void DWINUI::setTextColor(uint16_t fgcolor) {
+  textColor = fgcolor;
 }
-void DWINUI::SetBackgroundColor(uint16_t bgcolor) {
-  backcolor = bgcolor;
+void DWINUI::setBackgroundColor(uint16_t bgcolor) {
+  backColor = bgcolor;
 }
 
 // Moves cursor to point
 //  x: abscissa of the display
 //  y: ordinate of the display
 //  point: xy coordinate
-void DWINUI::MoveTo(int16_t x, int16_t y) {
+void DWINUI::moveTo(int16_t x, int16_t y) {
   cursor.x = x;
   cursor.y = y;
 }
-void DWINUI::MoveTo(xy_int_t point) {
+void DWINUI::moveTo(xy_int_t point) {
   cursor = point;
 }
 
@@ -129,16 +129,16 @@ void DWINUI::MoveTo(xy_int_t point) {
 //  x: abscissa of the display
 //  y: ordinate of the display
 //  point: xy coordinate
-void DWINUI::MoveBy(int16_t x, int16_t y) {
+void DWINUI::moveBy(int16_t x, int16_t y) {
   cursor.x += x;
   cursor.y += y;
 }
-void DWINUI::MoveBy(xy_int_t point) {
+void DWINUI::moveBy(xy_int_t point) {
   cursor += point;
 }
 
 // Draw a Centered string using arbitrary x1 and x2 margins
-void DWINUI::Draw_CenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string) {
+void DWINUI::drawCenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string) {
   const uint16_t x = _MAX(0U, x2 + x1 - strlen_P(string) * fontWidth(fid)) / 2 - 1;
   dwinDrawString(bShow, fid, color, bColor, x, y, string);
 }
@@ -148,28 +148,28 @@ void DWINUI::Draw_CenteredString(bool bShow, fontid_t fid, uint16_t color, uint1
 //  x: abscissa of the display
 //  y: ordinate of the display
 //  c: ASCII code of char
-void DWINUI::Draw_Char(uint16_t color, uint16_t x, uint16_t y, const char c) {
+void DWINUI::drawChar(uint16_t color, uint16_t x, uint16_t y, const char c) {
   const char string[2] = { c, 0};
-  dwinDrawString(false, fontid, color, backcolor, x, y, string, 1);
+  dwinDrawString(false, fontID, color, backColor, x, y, string, 1);
 }
 
 // Draw a char at cursor position and increment cursor
-void DWINUI::Draw_Char(uint16_t color, const char c) {
-  Draw_Char(color, cursor.x, cursor.y, c);
-  MoveBy(fontWidth(fontid), 0);
+void DWINUI::drawChar(uint16_t color, const char c) {
+  drawChar(color, cursor.x, cursor.y, c);
+  moveBy(fontWidth(fontID), 0);
 }
 
 // Draw a string at cursor position
 //  color: Character color
 //  *string: The string
 //  rlimit: For draw less chars than string length use rlimit
-void DWINUI::Draw_String(const char * const string, uint16_t rlimit) {
-  dwinDrawString(false, fontid, textcolor, backcolor, cursor.x, cursor.y, string, rlimit);
-  MoveBy(strlen(string) * fontWidth(fontid), 0);
+void DWINUI::drawString(const char * const string, uint16_t rlimit) {
+  dwinDrawString(false, fontID, textColor, backColor, cursor.x, cursor.y, string, rlimit);
+  moveBy(strlen(string) * fontWidth(fontID), 0);
 }
-void DWINUI::Draw_String(uint16_t color, const char * const string, uint16_t rlimit) {
-  dwinDrawString(false, fontid, color, backcolor, cursor.x, cursor.y, string, rlimit);
-  MoveBy(strlen(string) * fontWidth(fontid), 0);
+void DWINUI::drawString(uint16_t color, const char * const string, uint16_t rlimit) {
+  dwinDrawString(false, fontID, color, backColor, cursor.x, cursor.y, string, rlimit);
+  moveBy(strlen(string) * fontWidth(fontID), 0);
 }
 
 // Draw a numeric integer value
@@ -181,7 +181,7 @@ void DWINUI::Draw_String(uint16_t color, const char * const string, uint16_t rli
 //  iNum: Number of digits
 //  x/y: Upper-left coordinate
 //  value: Integer value
-void DWINUI::Draw_Int(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value) {
+void DWINUI::drawInt(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value) {
   char nstr[10];
   sprintf_P(nstr, PSTR("%*li"), (signedMode ? iNum + 1 : iNum), value);
   dwinDrawString(bShow, fid, color, bColor, x, y, nstr);
@@ -197,7 +197,7 @@ void DWINUI::Draw_Int(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t col
 //  fNum: Number of decimal digits
 //  x/y: Upper-left coordinate
 //  value: float value
-void DWINUI::Draw_Float(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+void DWINUI::drawFloat(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
   char nstr[10];
   dwinDrawString(bShow, fid, color, bColor, x, y, dtostrf(value, iNum + (signedMode ? 2:1) + fNum, fNum, nstr));
 }
@@ -217,19 +217,19 @@ void DWINUI::ICON_Show(bool BG, uint8_t icon, uint16_t x, uint16_t y) {
 
 // ------------------------- Buttons ------------------------------//
 
-void DWINUI::Draw_Button(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const char * const caption) {
+void DWINUI::drawButton(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const char * const caption) {
   dwinDrawRectangle(1, bcolor, x1, y1, x2, y2);
-  Draw_CenteredString(0, fontid, color, bcolor, x1, x2, (y2 + y1 - fontHeight())/2, caption);
+  drawCenteredString(0, fontID, color, bcolor, x1, x2, (y2 + y1 - fontHeight())/2, caption);
 }
 
-void DWINUI::Draw_Button(uint8_t id, uint16_t x, uint16_t y) {
+void DWINUI::drawButton(uint8_t id, uint16_t x, uint16_t y) {
   switch (id) {
-    case BTN_Cancel  : Draw_Button(GET_TEXT_F(MSG_BUTTON_CANCEL), x, y); break;
-    case BTN_Confirm : Draw_Button(GET_TEXT_F(MSG_BUTTON_CONFIRM), x, y); break;
-    case BTN_Continue: Draw_Button(GET_TEXT_F(MSG_BUTTON_CONTINUE), x, y); break;
-    case BTN_Print   : Draw_Button(GET_TEXT_F(MSG_BUTTON_PRINT), x, y); break;
-    case BTN_Save    : Draw_Button(GET_TEXT_F(MSG_BUTTON_SAVE), x, y); break;
-    case BTN_Purge   : Draw_Button(GET_TEXT_F(MSG_BUTTON_PURGE), x, y); break;
+    case BTN_Cancel  : drawButton(GET_TEXT_F(MSG_BUTTON_CANCEL), x, y); break;
+    case BTN_Confirm : drawButton(GET_TEXT_F(MSG_BUTTON_CONFIRM), x, y); break;
+    case BTN_Continue: drawButton(GET_TEXT_F(MSG_BUTTON_CONTINUE), x, y); break;
+    case BTN_Print   : drawButton(GET_TEXT_F(MSG_BUTTON_PRINT), x, y); break;
+    case BTN_Save    : drawButton(GET_TEXT_F(MSG_BUTTON_SAVE), x, y); break;
+    case BTN_Purge   : drawButton(GET_TEXT_F(MSG_BUTTON_PURGE), x, y); break;
     default: break;
   }
 }
@@ -241,7 +241,7 @@ void DWINUI::Draw_Button(uint8_t id, uint16_t x, uint16_t y) {
 //  x: the abscissa of the center of the circle
 //  y: ordinate of the center of the circle
 //  r: circle radius
-void DWINUI::Draw_Circle(uint16_t color, uint16_t x, uint16_t y, uint8_t r) {
+void DWINUI::drawCircle(uint16_t color, uint16_t x, uint16_t y, uint8_t r) {
   int a = 0, b = 0;
   while (a <= b) {
     b = SQRT(sq(r) - sq(a));
@@ -263,7 +263,7 @@ void DWINUI::Draw_Circle(uint16_t color, uint16_t x, uint16_t y, uint8_t r) {
 //  x: the abscissa of the center of the circle
 //  y: ordinate of the center of the circle
 //  r: circle radius
-void DWINUI::Draw_FillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r) {
+void DWINUI::drawFillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r) {
   dwinDrawLine(bcolor, x - r, y, x + r, y);
   uint16_t b = 1;
   while (b <= r) {
@@ -322,54 +322,54 @@ uint16_t DWINUI::RainbowInt(int16_t val, int16_t minv, int16_t maxv) {
 //  bColor: Background color
 //  x/y: Upper-left point
 //  mode : 0 : unchecked, 1 : checked
-void DWINUI::Draw_Checkbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool checked=false) {
+void DWINUI::drawCheckbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool checked=false) {
   dwinDrawRectangle(0, color, x + 2, y + 2, x + 17, y + 17);
   dwinDrawRectangle(1, checked ? color : bcolor, x + 6, y + 6, x + 13, y + 13);
 }
 
 // Clear Menu by filling the menu area with background color
-void DWINUI::ClearMainArea() {
-  dwinDrawRectangle(1, backcolor, 0, TITLE_HEIGHT, DWIN_WIDTH - 1, STATUS_Y - 1);
+void DWINUI::clearMainArea() {
+  dwinDrawRectangle(1, backColor, 0, TITLE_HEIGHT, DWIN_WIDTH - 1, STATUS_Y - 1);
 }
 
 /* Title Class ==============================================================*/
 
-TitleClass Title;
+Title title;
 
-void TitleClass::draw() {
+void Title::draw() {
   if (DWINUI::onTitleDraw != nullptr) (*DWINUI::onTitleDraw)(this);
 }
 
-void TitleClass::SetCaption(const char * const title) {
+void Title::setCaption(const char * const titleStr) {
   frameid = 0;
-  if ( caption == title ) return;
-  const uint8_t len = _MIN(sizeof(caption) - 1, strlen(title));
-  memcpy(&caption[0], title, len);
+  if ( caption == titleStr ) return;
+  const uint8_t len = _MIN(sizeof(caption) - 1, strlen(titleStr));
+  memcpy(&caption[0], titleStr, len);
   caption[len] = '\0';
 }
 
-void TitleClass::ShowCaption(const char * const title) {
-  SetCaption(title);
+void Title::showCaption(const char * const titleStr) {
+  setCaption(titleStr);
   draw();
 }
 
-void TitleClass::SetFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
+void Title::setFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
   caption[0] = '\0';
   frameid = id;
   frame = { x1, y1, x2, y2 };
 }
 
-void TitleClass::SetFrame(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
-  SetFrame(1, x, y, x + w - 1, y + h - 1);
+void Title::setFrame(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
+  setFrame(1, x, y, x + w - 1, y + h - 1);
 }
 
-void TitleClass::FrameCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
-  SetFrame(id, x1, y1, x2, y2);
+void Title::frameCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
+  setFrame(id, x1, y1, x2, y2);
   draw();
 }
 
-void TitleClass::FrameCopy(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
-  FrameCopy(1, x, y, x + w - 1, y + h - 1);
+void Title::frameCopy(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
+  frameCopy(1, x, y, x + w - 1, y + h - 1);
 }
 
 #endif // DWIN_LCD_PROUI

commit 858916d628526b5d56c34c5c9663e3535bfc7788
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Fri Jun 23 04:57:22 2023 -0500

    üö∏ Update DWIN ProUI (#26003)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index 4ed6ce6783..235b30f9fa 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -23,8 +23,8 @@
 /**
  * DWIN Enhanced implementation for PRO UI
  * Author: Miguel A. Risco-Castillo (MRISCOC)
- * Version: 3.20.1
- * Date: 2022/10/25
+ * Version: 3.21.1
+ * Date: 2023/03/21
  */
 
 #include "../../../inc/MarlinConfig.h"
@@ -32,7 +32,6 @@
 #if ENABLED(DWIN_LCD_PROUI)
 
 #include "dwin_defines.h"
-#include "dwin_lcd.h"
 #include "dwinui.h"
 
 xy_int_t DWINUI::cursor = { 0 };
@@ -60,16 +59,18 @@ void DWINUI::setFont(fontid_t fid) { fontid = fid; }
 // Get font character width
 uint8_t DWINUI::fontWidth(fontid_t fid) {
   switch (fid) {
-    case font6x12 : return 6;
+    #if DISABLED(TJC_DISPLAY)
+      case font6x12 : return 6;
+      case font20x40: return 20;
+      case font24x48: return 24;
+      case font28x56: return 28;
+      case font32x64: return 32;
+    #endif
     case font8x16 : return 8;
     case font10x20: return 10;
     case font12x24: return 12;
     case font14x28: return 14;
     case font16x32: return 16;
-    case font20x40: return 20;
-    case font24x48: return 24;
-    case font28x56: return 28;
-    case font32x64: return 32;
     default: return 0;
   }
 }
@@ -77,16 +78,18 @@ uint8_t DWINUI::fontWidth(fontid_t fid) {
 // Get font character height
 uint8_t DWINUI::fontHeight(fontid_t fid) {
   switch (fid) {
+    #if DISABLED(TJC_DISPLAY)
     case font6x12 : return 12;
+      case font20x40: return 40;
+      case font24x48: return 48;
+      case font28x56: return 56;
+      case font32x64: return 64;
+    #endif
     case font8x16 : return 16;
     case font10x20: return 20;
     case font12x24: return 24;
     case font14x28: return 28;
     case font16x32: return 32;
-    case font20x40: return 40;
-    case font24x48: return 48;
-    case font28x56: return 56;
-    case font32x64: return 64;
     default: return 0;
   }
 }
@@ -261,15 +264,13 @@ void DWINUI::Draw_Circle(uint16_t color, uint16_t x, uint16_t y, uint8_t r) {
 //  y: ordinate of the center of the circle
 //  r: circle radius
 void DWINUI::Draw_FillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r) {
-  int a = 0, b = 0;
-  while (a <= b) {
-    b = SQRT(sq(r) - sq(a)); // b=sqrt(r*r-a*a);
-    if (a == 0) b--;
-    dwinDrawLine(bcolor, x-b,y-a,x+b,y-a);
-    dwinDrawLine(bcolor, x-a,y-b,x+a,y-b);
-    dwinDrawLine(bcolor, x-b,y+a,x+b,y+a);
-    dwinDrawLine(bcolor, x-a,y+b,x+a,y+b);
-    a++;
+  dwinDrawLine(bcolor, x - r, y, x + r, y);
+  uint16_t b = 1;
+  while (b <= r) {
+    uint16_t a = SQRT(sq(r) - sq(b));
+    dwinDrawLine(bcolor, x - a, y + b, x + a, y + b);
+    dwinDrawLine(bcolor, x - a, y - b, x + a, y - b);
+    b += TERN(TJC_DISPLAY, 2, 1);
   }
 }
 

commit 238951a966204ce9bc109e06fdb4027125b28feb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 16 18:08:59 2023 -0500

    üé® More more lowercase (partial ProUI)
    
    Followup to #25939

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index f950d7451c..4ed6ce6783 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -137,7 +137,7 @@ void DWINUI::MoveBy(xy_int_t point) {
 // Draw a Centered string using arbitrary x1 and x2 margins
 void DWINUI::Draw_CenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string) {
   const uint16_t x = _MAX(0U, x2 + x1 - strlen_P(string) * fontWidth(fid)) / 2 - 1;
-  DWIN_Draw_String(bShow, fid, color, bColor, x, y, string);
+  dwinDrawString(bShow, fid, color, bColor, x, y, string);
 }
 
 // Draw a char
@@ -147,7 +147,7 @@ void DWINUI::Draw_CenteredString(bool bShow, fontid_t fid, uint16_t color, uint1
 //  c: ASCII code of char
 void DWINUI::Draw_Char(uint16_t color, uint16_t x, uint16_t y, const char c) {
   const char string[2] = { c, 0};
-  DWIN_Draw_String(false, fontid, color, backcolor, x, y, string, 1);
+  dwinDrawString(false, fontid, color, backcolor, x, y, string, 1);
 }
 
 // Draw a char at cursor position and increment cursor
@@ -161,11 +161,11 @@ void DWINUI::Draw_Char(uint16_t color, const char c) {
 //  *string: The string
 //  rlimit: For draw less chars than string length use rlimit
 void DWINUI::Draw_String(const char * const string, uint16_t rlimit) {
-  DWIN_Draw_String(false, fontid, textcolor, backcolor, cursor.x, cursor.y, string, rlimit);
+  dwinDrawString(false, fontid, textcolor, backcolor, cursor.x, cursor.y, string, rlimit);
   MoveBy(strlen(string) * fontWidth(fontid), 0);
 }
 void DWINUI::Draw_String(uint16_t color, const char * const string, uint16_t rlimit) {
-  DWIN_Draw_String(false, fontid, color, backcolor, cursor.x, cursor.y, string, rlimit);
+  dwinDrawString(false, fontid, color, backcolor, cursor.x, cursor.y, string, rlimit);
   MoveBy(strlen(string) * fontWidth(fontid), 0);
 }
 
@@ -181,7 +181,7 @@ void DWINUI::Draw_String(uint16_t color, const char * const string, uint16_t rli
 void DWINUI::Draw_Int(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value) {
   char nstr[10];
   sprintf_P(nstr, PSTR("%*li"), (signedMode ? iNum + 1 : iNum), value);
-  DWIN_Draw_String(bShow, fid, color, bColor, x, y, nstr);
+  dwinDrawString(bShow, fid, color, bColor, x, y, nstr);
 }
 
 // Draw a numeric float value
@@ -196,7 +196,7 @@ void DWINUI::Draw_Int(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t col
 //  value: float value
 void DWINUI::Draw_Float(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
   char nstr[10];
-  DWIN_Draw_String(bShow, fid, color, bColor, x, y, dtostrf(value, iNum + (signedMode ? 2:1) + fNum, fNum, nstr));
+  dwinDrawString(bShow, fid, color, bColor, x, y, dtostrf(value, iNum + (signedMode ? 2:1) + fNum, fNum, nstr));
 }
 
 // ------------------------- Icons -------------------------------//
@@ -209,13 +209,13 @@ void DWINUI::Draw_Float(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t c
 void DWINUI::ICON_Show(bool BG, uint8_t icon, uint16_t x, uint16_t y) {
   const uint8_t libID = ICON TERN_(HAS_CUSTOMICONS, + (icon / 100));
   const uint8_t picID = icon TERN_(HAS_CUSTOMICONS, % 100);
-  DWIN_ICON_Show(BG, false, !BG, libID, picID, x, y);
+  dwinIconShow(BG, false, !BG, libID, picID, x, y);
 }
 
 // ------------------------- Buttons ------------------------------//
 
 void DWINUI::Draw_Button(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const char * const caption) {
-  DWIN_Draw_Rectangle(1, bcolor, x1, y1, x2, y2);
+  dwinDrawRectangle(1, bcolor, x1, y1, x2, y2);
   Draw_CenteredString(0, fontid, color, bcolor, x1, x2, (y2 + y1 - fontHeight())/2, caption);
 }
 
@@ -243,14 +243,14 @@ void DWINUI::Draw_Circle(uint16_t color, uint16_t x, uint16_t y, uint8_t r) {
   while (a <= b) {
     b = SQRT(sq(r) - sq(a));
     if (a == 0) b--;
-    DWIN_Draw_Point(color, 1, 1, x + a, y + b);   // Draw some sector 1
-    DWIN_Draw_Point(color, 1, 1, x + b, y + a);   // Draw some sector 2
-    DWIN_Draw_Point(color, 1, 1, x + b, y - a);   // Draw some sector 3
-    DWIN_Draw_Point(color, 1, 1, x + a, y - b);   // Draw some sector 4
-    DWIN_Draw_Point(color, 1, 1, x - a, y - b);   // Draw some sector 5
-    DWIN_Draw_Point(color, 1, 1, x - b, y - a);   // Draw some sector 6
-    DWIN_Draw_Point(color, 1, 1, x - b, y + a);   // Draw some sector 7
-    DWIN_Draw_Point(color, 1, 1, x - a, y + b);   // Draw some sector 8
+    dwinDrawPoint(color, 1, 1, x + a, y + b);   // Draw some sector 1
+    dwinDrawPoint(color, 1, 1, x + b, y + a);   // Draw some sector 2
+    dwinDrawPoint(color, 1, 1, x + b, y - a);   // Draw some sector 3
+    dwinDrawPoint(color, 1, 1, x + a, y - b);   // Draw some sector 4
+    dwinDrawPoint(color, 1, 1, x - a, y - b);   // Draw some sector 5
+    dwinDrawPoint(color, 1, 1, x - b, y - a);   // Draw some sector 6
+    dwinDrawPoint(color, 1, 1, x - b, y + a);   // Draw some sector 7
+    dwinDrawPoint(color, 1, 1, x - a, y + b);   // Draw some sector 8
     a++;
   }
 }
@@ -265,10 +265,10 @@ void DWINUI::Draw_FillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r) {
   while (a <= b) {
     b = SQRT(sq(r) - sq(a)); // b=sqrt(r*r-a*a);
     if (a == 0) b--;
-    DWIN_Draw_Line(bcolor, x-b,y-a,x+b,y-a);
-    DWIN_Draw_Line(bcolor, x-a,y-b,x+a,y-b);
-    DWIN_Draw_Line(bcolor, x-b,y+a,x+b,y+a);
-    DWIN_Draw_Line(bcolor, x-a,y+b,x+a,y+b);
+    dwinDrawLine(bcolor, x-b,y-a,x+b,y-a);
+    dwinDrawLine(bcolor, x-a,y-b,x+a,y-b);
+    dwinDrawLine(bcolor, x-b,y+a,x+b,y+a);
+    dwinDrawLine(bcolor, x-a,y+b,x+a,y+b);
     a++;
   }
 }
@@ -322,13 +322,13 @@ uint16_t DWINUI::RainbowInt(int16_t val, int16_t minv, int16_t maxv) {
 //  x/y: Upper-left point
 //  mode : 0 : unchecked, 1 : checked
 void DWINUI::Draw_Checkbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool checked=false) {
-  DWIN_Draw_Rectangle(0, color, x + 2, y + 2, x + 17, y + 17);
-  DWIN_Draw_Rectangle(1, checked ? color : bcolor, x + 6, y + 6, x + 13, y + 13);
+  dwinDrawRectangle(0, color, x + 2, y + 2, x + 17, y + 17);
+  dwinDrawRectangle(1, checked ? color : bcolor, x + 6, y + 6, x + 13, y + 13);
 }
 
 // Clear Menu by filling the menu area with background color
 void DWINUI::ClearMainArea() {
-  DWIN_Draw_Rectangle(1, backcolor, 0, TITLE_HEIGHT, DWIN_WIDTH - 1, STATUS_Y - 1);
+  dwinDrawRectangle(1, backcolor, 0, TITLE_HEIGHT, DWIN_WIDTH - 1, STATUS_Y - 1);
 }
 
 /* Title Class ==============================================================*/

commit 7717beb79362522b8239d5af62b32ff3d0e2d748
Author: kadir ilkimen <kadirilkimen@gmail.com>
Date:   Wed Jan 11 06:29:38 2023 +0200

    ‚ú® Polar Kinematics (#25214)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index afb18f24db..f950d7451c 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -281,7 +281,7 @@ void DWINUI::Draw_FillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r) {
 //  color2 : End color
 uint16_t DWINUI::ColorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t color1, uint16_t color2) {
   uint8_t B, G, R;
-  const float n = (float)(val - minv) / (maxv - minv);
+  const float n = float(val - minv) / (maxv - minv);
   R = (1 - n) * GetRColor(color1) + n * GetRColor(color2);
   G = (1 - n) * GetGColor(color1) + n * GetGColor(color2);
   B = (1 - n) * GetBColor(color1) + n * GetBColor(color2);
@@ -296,7 +296,7 @@ uint16_t DWINUI::RainbowInt(int16_t val, int16_t minv, int16_t maxv) {
   uint8_t B, G, R;
   const uint8_t maxB = 28, maxR = 28, maxG = 38;
   const int16_t limv = _MAX(abs(minv), abs(maxv));
-  float n = minv >= 0 ? (float)(val - minv) / (maxv - minv) : (float)val / limv;
+  float n = minv >= 0 ? float(val - minv) / (maxv - minv) : (float)val / limv;
   LIMIT(n, -1, 1);
   if (n < 0) {
     R = 0;

commit c66b3cf8a429c427c014f33171407c634da735f1
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Sun Jan 8 04:22:21 2023 -0500

    üö∏ ProUI updates (#25176)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index 5ed36e7dac..afb18f24db 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -23,21 +23,17 @@
 /**
  * DWIN Enhanced implementation for PRO UI
  * Author: Miguel A. Risco-Castillo (MRISCOC)
- * Version: 3.18.1
- * Date: 2022/07/05
+ * Version: 3.20.1
+ * Date: 2022/10/25
  */
 
-#include "../../../inc/MarlinConfigPre.h"
+#include "../../../inc/MarlinConfig.h"
 
 #if ENABLED(DWIN_LCD_PROUI)
 
-#include "../../../inc/MarlinConfig.h"
+#include "dwin_defines.h"
 #include "dwin_lcd.h"
 #include "dwinui.h"
-#include "dwin_defines.h"
-
-//#define DEBUG_OUT 1
-#include "../../../core/debug_out.h"
 
 xy_int_t DWINUI::cursor = { 0 };
 uint16_t DWINUI::pencolor = Color_White;
@@ -50,13 +46,6 @@ FSTR_P const DWINUI::Author = F(STRING_CONFIG_H_AUTHOR);
 void (*DWINUI::onTitleDraw)(TitleClass* title) = nullptr;
 
 void DWINUI::init() {
-  delay(750);   // Delay for wait to wakeup screen
-  const bool hs = DWIN_Handshake(); UNUSED(hs);
-  #if ENABLED(DEBUG_DWIN)
-    SERIAL_ECHOPGM("DWIN_Handshake ");
-    SERIAL_ECHOLNF(hs ? F("ok.") : F("error."));
-  #endif
-  DWIN_Frame_SetDir(1);
   cursor.reset();
   pencolor = Color_White;
   textcolor = Def_Text_Color;
@@ -210,6 +199,19 @@ void DWINUI::Draw_Float(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t c
   DWIN_Draw_String(bShow, fid, color, bColor, x, y, dtostrf(value, iNum + (signedMode ? 2:1) + fNum, fNum, nstr));
 }
 
+// ------------------------- Icons -------------------------------//
+
+// Draw an Icon and select library automatically
+//  BG: The icon background display: false=Background filtering is not displayed, true=Background display
+//  libID: Icon library ID
+//  picID: Icon ID
+//  x/y: Upper-left point
+void DWINUI::ICON_Show(bool BG, uint8_t icon, uint16_t x, uint16_t y) {
+  const uint8_t libID = ICON TERN_(HAS_CUSTOMICONS, + (icon / 100));
+  const uint8_t picID = icon TERN_(HAS_CUSTOMICONS, % 100);
+  DWIN_ICON_Show(BG, false, !BG, libID, picID, x, y);
+}
+
 // ------------------------- Buttons ------------------------------//
 
 void DWINUI::Draw_Button(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const char * const caption) {
@@ -320,8 +322,8 @@ uint16_t DWINUI::RainbowInt(int16_t val, int16_t minv, int16_t maxv) {
 //  x/y: Upper-left point
 //  mode : 0 : unchecked, 1 : checked
 void DWINUI::Draw_Checkbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool checked=false) {
-  DWIN_Draw_String(true, font8x16, color, bcolor, x + 4, y, checked ? F("x") : F(" "));
   DWIN_Draw_Rectangle(0, color, x + 2, y + 2, x + 17, y + 17);
+  DWIN_Draw_Rectangle(1, checked ? color : bcolor, x + 6, y + 6, x + 13, y + 13);
 }
 
 // Clear Menu by filling the menu area with background color

commit 8fb54d4621c5f571d613fca2943393d4a95cb8e4
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Thu Jul 14 00:00:33 2022 -0500

    üö∏ Fix and update ProUI (#24477)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index ecb4754a0f..5ed36e7dac 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -23,8 +23,8 @@
 /**
  * DWIN Enhanced implementation for PRO UI
  * Author: Miguel A. Risco-Castillo (MRISCOC)
- * Version: 3.17.1
- * Date: 2022/04/12
+ * Version: 3.18.1
+ * Date: 2022/07/05
  */
 
 #include "../../../inc/MarlinConfigPre.h"
@@ -44,7 +44,7 @@ uint16_t DWINUI::pencolor = Color_White;
 uint16_t DWINUI::textcolor = Def_Text_Color;
 uint16_t DWINUI::backcolor = Def_Background_Color;
 uint16_t DWINUI::buttoncolor = Def_Button_Color;
-uint8_t  DWINUI::font = font8x16;
+uint8_t  DWINUI::fontid = font8x16;
 FSTR_P const DWINUI::Author = F(STRING_CONFIG_H_AUTHOR);
 
 void (*DWINUI::onTitleDraw)(TitleClass* title) = nullptr;
@@ -62,17 +62,15 @@ void DWINUI::init() {
   textcolor = Def_Text_Color;
   backcolor = Def_Background_Color;
   buttoncolor = Def_Button_Color;
-  font = font8x16;
+  fontid = font8x16;
 }
 
 // Set text/number font
-void DWINUI::setFont(uint8_t cfont) {
-  font = cfont;
-}
+void DWINUI::setFont(fontid_t fid) { fontid = fid; }
 
 // Get font character width
-uint8_t DWINUI::fontWidth(uint8_t cfont) {
-  switch (cfont) {
+uint8_t DWINUI::fontWidth(fontid_t fid) {
+  switch (fid) {
     case font6x12 : return 6;
     case font8x16 : return 8;
     case font10x20: return 10;
@@ -88,8 +86,8 @@ uint8_t DWINUI::fontWidth(uint8_t cfont) {
 }
 
 // Get font character height
-uint8_t DWINUI::fontHeight(uint8_t cfont) {
-  switch (cfont) {
+uint8_t DWINUI::fontHeight(fontid_t fid) {
+  switch (fid) {
     case font6x12 : return 12;
     case font8x16 : return 16;
     case font10x20: return 20;
@@ -105,14 +103,10 @@ uint8_t DWINUI::fontHeight(uint8_t cfont) {
 }
 
 // Get screen x coordinates from text column
-uint16_t DWINUI::ColToX(uint8_t col) {
-  return col * fontWidth(font);
-}
+uint16_t DWINUI::ColToX(uint8_t col) { return col * fontWidth(fontid); }
 
 // Get screen y coordinates from text row
-uint16_t DWINUI::RowToY(uint8_t row) {
-  return row * fontHeight(font);
-}
+uint16_t DWINUI::RowToY(uint8_t row) { return row * fontHeight(fontid); }
 
 // Set text/number color
 void DWINUI::SetColors(uint16_t fgcolor, uint16_t bgcolor, uint16_t alcolor) {
@@ -152,9 +146,9 @@ void DWINUI::MoveBy(xy_int_t point) {
 }
 
 // Draw a Centered string using arbitrary x1 and x2 margins
-void DWINUI::Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string) {
-  const uint16_t x = _MAX(0U, x2 + x1 - strlen_P(string) * fontWidth(size)) / 2 - 1;
-  DWIN_Draw_String(bShow, size, color, bColor, x, y, string);
+void DWINUI::Draw_CenteredString(bool bShow, fontid_t fid, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string) {
+  const uint16_t x = _MAX(0U, x2 + x1 - strlen_P(string) * fontWidth(fid)) / 2 - 1;
+  DWIN_Draw_String(bShow, fid, color, bColor, x, y, string);
 }
 
 // Draw a char
@@ -164,13 +158,13 @@ void DWINUI::Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint1
 //  c: ASCII code of char
 void DWINUI::Draw_Char(uint16_t color, uint16_t x, uint16_t y, const char c) {
   const char string[2] = { c, 0};
-  DWIN_Draw_String(false, font, color, backcolor, x, y, string, 1);
+  DWIN_Draw_String(false, fontid, color, backcolor, x, y, string, 1);
 }
 
 // Draw a char at cursor position and increment cursor
 void DWINUI::Draw_Char(uint16_t color, const char c) {
   Draw_Char(color, cursor.x, cursor.y, c);
-  MoveBy(fontWidth(font), 0);
+  MoveBy(fontWidth(fontid), 0);
 }
 
 // Draw a string at cursor position
@@ -178,49 +172,49 @@ void DWINUI::Draw_Char(uint16_t color, const char c) {
 //  *string: The string
 //  rlimit: For draw less chars than string length use rlimit
 void DWINUI::Draw_String(const char * const string, uint16_t rlimit) {
-  DWIN_Draw_String(false, font, textcolor, backcolor, cursor.x, cursor.y, string, rlimit);
-  MoveBy(strlen(string) * fontWidth(font), 0);
+  DWIN_Draw_String(false, fontid, textcolor, backcolor, cursor.x, cursor.y, string, rlimit);
+  MoveBy(strlen(string) * fontWidth(fontid), 0);
 }
 void DWINUI::Draw_String(uint16_t color, const char * const string, uint16_t rlimit) {
-  DWIN_Draw_String(false, font, color, backcolor, cursor.x, cursor.y, string, rlimit);
-  MoveBy(strlen(string) * fontWidth(font), 0);
+  DWIN_Draw_String(false, fontid, color, backcolor, cursor.x, cursor.y, string, rlimit);
+  MoveBy(strlen(string) * fontWidth(fontid), 0);
 }
 
 // Draw a numeric integer value
 //  bShow: true=display background color; false=don't display background color
 //  signedMode: 1=signed; 0=unsigned
-//  size: Font size
+//  fid: Font ID
 //  color: Character color
 //  bColor: Background color
 //  iNum: Number of digits
 //  x/y: Upper-left coordinate
 //  value: Integer value
-void DWINUI::Draw_Int(uint8_t bShow, bool signedMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value) {
+void DWINUI::Draw_Int(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value) {
   char nstr[10];
   sprintf_P(nstr, PSTR("%*li"), (signedMode ? iNum + 1 : iNum), value);
-  DWIN_Draw_String(bShow, size, color, bColor, x, y, nstr);
+  DWIN_Draw_String(bShow, fid, color, bColor, x, y, nstr);
 }
 
 // Draw a numeric float value
 //  bShow: true=display background color; false=don't display background color
 //  signedMode: 1=signed; 0=unsigned
-//  size: Font size
+//  fid: Font ID
 //  color: Character color
 //  bColor: Background color
 //  iNum: Number of digits
 //  fNum: Number of decimal digits
 //  x/y: Upper-left coordinate
 //  value: float value
-void DWINUI::Draw_Float(uint8_t bShow, bool signedMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+void DWINUI::Draw_Float(uint8_t bShow, bool signedMode, fontid_t fid, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
   char nstr[10];
-  DWIN_Draw_String(bShow, size, color, bColor, x, y, dtostrf(value, iNum + (signedMode ? 2:1) + fNum, fNum, nstr));
+  DWIN_Draw_String(bShow, fid, color, bColor, x, y, dtostrf(value, iNum + (signedMode ? 2:1) + fNum, fNum, nstr));
 }
 
 // ------------------------- Buttons ------------------------------//
 
 void DWINUI::Draw_Button(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const char * const caption) {
   DWIN_Draw_Rectangle(1, bcolor, x1, y1, x2, y2);
-  Draw_CenteredString(0, font, color, bcolor, x1, x2, (y2 + y1 - fontHeight())/2, caption);
+  Draw_CenteredString(0, fontid, color, bcolor, x1, x2, (y2 + y1 - fontHeight())/2, caption);
 }
 
 void DWINUI::Draw_Button(uint8_t id, uint16_t x, uint16_t y) {

commit a65e4edb1c794dcd22980f3cce9bf2993da1514b
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Tue May 17 15:44:30 2022 -0500

    üö∏ ProUI APRIL2022 updates (#24084)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index e190fa06fb..ecb4754a0f 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -23,8 +23,8 @@
 /**
  * DWIN Enhanced implementation for PRO UI
  * Author: Miguel A. Risco-Castillo (MRISCOC)
- * Version: 3.15.1
- * Date: 2022/02/25
+ * Version: 3.17.1
+ * Date: 2022/04/12
  */
 
 #include "../../../inc/MarlinConfigPre.h"
@@ -39,12 +39,6 @@
 //#define DEBUG_OUT 1
 #include "../../../core/debug_out.h"
 
-int8_t MenuItemTotal = 0;
-int8_t MenuItemCount = 0;
-MenuItemClass** MenuItems = nullptr;
-MenuClass *CurrentMenu = nullptr;
-MenuClass *PreviousMenu = nullptr;
-
 xy_int_t DWINUI::cursor = { 0 };
 uint16_t DWINUI::pencolor = Color_White;
 uint16_t DWINUI::textcolor = Def_Text_Color;
@@ -53,16 +47,15 @@ uint16_t DWINUI::buttoncolor = Def_Button_Color;
 uint8_t  DWINUI::font = font8x16;
 FSTR_P const DWINUI::Author = F(STRING_CONFIG_H_AUTHOR);
 
-void (*DWINUI::onCursorErase)(const int8_t line)=nullptr;
-void (*DWINUI::onCursorDraw)(const int8_t line)=nullptr;
-void (*DWINUI::onTitleDraw)(TitleClass* title)=nullptr;
-void (*DWINUI::onMenuDraw)(MenuClass* menu)=nullptr;
+void (*DWINUI::onTitleDraw)(TitleClass* title) = nullptr;
 
 void DWINUI::init() {
-  TERN_(DEBUG_DWIN, SERIAL_ECHOPGM("\r\nDWIN handshake "));
   delay(750);   // Delay for wait to wakeup screen
-  const bool hs = DWIN_Handshake();
-  TERN(DEBUG_DWIN, SERIAL_ECHOLNF(hs ? F("ok.") : F("error.")), UNUSED(hs));
+  const bool hs = DWIN_Handshake(); UNUSED(hs);
+  #if ENABLED(DEBUG_DWIN)
+    SERIAL_ECHOPGM("DWIN_Handshake ");
+    SERIAL_ECHOLNF(hs ? F("ok.") : F("error."));
+  #endif
   DWIN_Frame_SetDir(1);
   cursor.reset();
   pencolor = Color_White;
@@ -164,16 +157,19 @@ void DWINUI::Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint1
   DWIN_Draw_String(bShow, size, color, bColor, x, y, string);
 }
 
-// // Draw a Centered string using DWIN_WIDTH
-// void DWINUI::Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t y, const char * const string) {
-//   const int8_t x = _MAX(0U, DWIN_WIDTH - strlen_P(string) * fontWidth(size)) / 2 - 1;
-//   DWIN_Draw_String(bShow, size, color, bColor, x, y, string);
-// }
+// Draw a char
+//  color: Character color
+//  x: abscissa of the display
+//  y: ordinate of the display
+//  c: ASCII code of char
+void DWINUI::Draw_Char(uint16_t color, uint16_t x, uint16_t y, const char c) {
+  const char string[2] = { c, 0};
+  DWIN_Draw_String(false, font, color, backcolor, x, y, string, 1);
+}
 
-// Draw a char at cursor position
+// Draw a char at cursor position and increment cursor
 void DWINUI::Draw_Char(uint16_t color, const char c) {
-  const char string[2] = { c, 0};
-  DWIN_Draw_String(false, font, color, backcolor, cursor.x, cursor.y, string, 1);
+  Draw_Char(color, cursor.x, cursor.y, c);
   MoveBy(fontWidth(font), 0);
 }
 
@@ -190,6 +186,36 @@ void DWINUI::Draw_String(uint16_t color, const char * const string, uint16_t rli
   MoveBy(strlen(string) * fontWidth(font), 0);
 }
 
+// Draw a numeric integer value
+//  bShow: true=display background color; false=don't display background color
+//  signedMode: 1=signed; 0=unsigned
+//  size: Font size
+//  color: Character color
+//  bColor: Background color
+//  iNum: Number of digits
+//  x/y: Upper-left coordinate
+//  value: Integer value
+void DWINUI::Draw_Int(uint8_t bShow, bool signedMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint16_t x, uint16_t y, int32_t value) {
+  char nstr[10];
+  sprintf_P(nstr, PSTR("%*li"), (signedMode ? iNum + 1 : iNum), value);
+  DWIN_Draw_String(bShow, size, color, bColor, x, y, nstr);
+}
+
+// Draw a numeric float value
+//  bShow: true=display background color; false=don't display background color
+//  signedMode: 1=signed; 0=unsigned
+//  size: Font size
+//  color: Character color
+//  bColor: Background color
+//  iNum: Number of digits
+//  fNum: Number of decimal digits
+//  x/y: Upper-left coordinate
+//  value: float value
+void DWINUI::Draw_Float(uint8_t bShow, bool signedMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+  char nstr[10];
+  DWIN_Draw_String(bShow, size, color, bColor, x, y, dtostrf(value, iNum + (signedMode ? 2:1) + fNum, fNum, nstr));
+}
+
 // ------------------------- Buttons ------------------------------//
 
 void DWINUI::Draw_Button(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const char * const caption) {
@@ -204,6 +230,7 @@ void DWINUI::Draw_Button(uint8_t id, uint16_t x, uint16_t y) {
     case BTN_Continue: Draw_Button(GET_TEXT_F(MSG_BUTTON_CONTINUE), x, y); break;
     case BTN_Print   : Draw_Button(GET_TEXT_F(MSG_BUTTON_PRINT), x, y); break;
     case BTN_Save    : Draw_Button(GET_TEXT_F(MSG_BUTTON_SAVE), x, y); break;
+    case BTN_Purge   : Draw_Button(GET_TEXT_F(MSG_BUTTON_PURGE), x, y); break;
     default: break;
   }
 }
@@ -265,7 +292,7 @@ uint16_t DWINUI::ColorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t colo
   return RGB(R, G, B);
 }
 
-// Color Interpolator through Red->Yellow->Green->Blue
+// Color Interpolator through Red->Yellow->Green->Blue (Pro UI)
 //  val : Interpolator minv..maxv
 //  minv : Minimum value
 //  maxv : Maximum value
@@ -308,33 +335,6 @@ void DWINUI::ClearMainArea() {
   DWIN_Draw_Rectangle(1, backcolor, 0, TITLE_HEIGHT, DWIN_WIDTH - 1, STATUS_Y - 1);
 }
 
-void DWINUI::MenuItemsClear() {
-  if (MenuItems == nullptr) return;
-  for (int8_t i = 0; i < MenuItemCount; i++) delete MenuItems[i];
-  delete[] MenuItems;
-  MenuItems = nullptr;
-  MenuItemCount = 0;
-  MenuItemTotal = 0;
-}
-
-void DWINUI::MenuItemsPrepare(int8_t totalitems) {
-  MenuItemsClear();
-  MenuItemTotal = totalitems;
-  MenuItems = new MenuItemClass*[totalitems];
-}
-
-MenuItemClass* DWINUI::MenuItemsAdd(MenuItemClass* menuitem) {
-  if (MenuItemCount < MenuItemTotal) {
-    MenuItems[MenuItemCount] = menuitem;
-    menuitem->pos = MenuItemCount++;
-    return menuitem;
-  }
-  else {
-    delete menuitem;
-    return nullptr;
-  }
-}
-
 /* Title Class ==============================================================*/
 
 TitleClass Title;
@@ -375,85 +375,4 @@ void TitleClass::FrameCopy(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
   FrameCopy(1, x, y, x + w - 1, y + h - 1);
 }
 
-/* Menu Class ===============================================================*/
-
-MenuClass::MenuClass() {
-  selected = 0;
-  topline = 0;
-}
-
-void MenuClass::draw() {
-  MenuTitle.draw();
-  if (DWINUI::onMenuDraw != nullptr) (*DWINUI::onMenuDraw)(this);
-  for (int8_t i = 0; i < MenuItemCount; i++)
-    MenuItems[i]->draw(i - topline);
-  if (DWINUI::onCursorDraw != nullptr) DWINUI::onCursorDraw(line());
-  DWIN_UpdateLCD();
-}
-
-void MenuClass::onScroll(bool dir) {
-  int8_t sel = selected;
-  if (dir) sel++; else sel--;
-  LIMIT(sel, 0, MenuItemCount - 1);
-  if (sel != selected) {
-    if (DWINUI::onCursorErase != nullptr) DWINUI::onCursorErase(line());
-    if ((sel - topline) == TROWS) {
-      DWIN_Frame_AreaMove(1, DWIN_SCROLL_UP, MLINE, DWINUI::backcolor, 0, TITLE_HEIGHT + 1, DWIN_WIDTH, STATUS_Y - 1);
-      topline++;
-      MenuItems[sel]->draw(TROWS - 1);
-    }
-    if ((sel < topline)) {
-      DWIN_Frame_AreaMove(1, DWIN_SCROLL_DOWN, MLINE, DWINUI::backcolor, 0, TITLE_HEIGHT + 1, DWIN_WIDTH, STATUS_Y - 1);
-      topline--;
-      MenuItems[sel]->draw(0);
-    }
-    selected = sel;
-    if (DWINUI::onCursorDraw != nullptr) DWINUI::onCursorDraw(line());
-    DWIN_UpdateLCD();
-  }
-}
-
-void MenuClass::onClick() {
-  if (MenuItems[selected]->onClick != nullptr) (*MenuItems[selected]->onClick)();
-}
-
-MenuItemClass *MenuClass::SelectedItem() {
-  return MenuItems[selected];
-}
-
-/* MenuItem Class ===========================================================*/
-
-MenuItemClass::MenuItemClass(uint8_t cicon, const char * const text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)()) {
-  icon = cicon;
-  onClick = onclick;
-  onDraw = ondraw;
-  const uint8_t len = _MIN(sizeof(caption) - 1, strlen(text));
-  memcpy(&caption[0], text, len);
-  caption[len] = '\0';
-}
-
-MenuItemClass::MenuItemClass(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)()) {
-  icon = cicon;
-  onClick = onclick;
-  onDraw = ondraw;
-  caption[0] = '\0';
-  frameid = id;
-  frame = { x1, y1, x2, y2 };
-}
-
-void MenuItemClass::SetFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
-  caption[0] = '\0';
-  frameid = id;
-  frame = { x1, y1, x2, y2 };
-}
-
-void MenuItemClass::draw(int8_t line) {
-  if (line < 0 || line >= TROWS) return;
-  if (onDraw != nullptr) (*onDraw)(this, line);
-};
-
-MenuItemPtrClass::MenuItemPtrClass(uint8_t cicon, const char * const text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val) : MenuItemClass(cicon, text, ondraw, onclick) {
-  value = val;
-};
-
 #endif // DWIN_LCD_PROUI

commit 1e749e4f48f528179213e736c99371843a90b4fb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu May 12 20:13:59 2022 -0500

    üßë‚Äçüíª Misc. LCD cleanup

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index ddc494fc84..e190fa06fb 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -304,7 +304,7 @@ void DWINUI::Draw_Checkbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t
 }
 
 // Clear Menu by filling the menu area with background color
-void DWINUI::ClearMenuArea() {
+void DWINUI::ClearMainArea() {
   DWIN_Draw_Rectangle(1, backcolor, 0, TITLE_HEIGHT, DWIN_WIDTH - 1, STATUS_Y - 1);
 }
 

commit 79b38e0e14074b52e0aeb98b08a686a99a9b1aad
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Fri Mar 11 15:06:49 2022 -0500

    üö∏ Update Ender3 V2/S1 Pro UI (#23878)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index 1dbd531390..ddc494fc84 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -21,12 +21,10 @@
  */
 
 /**
- * DWIN UI Enhanced implementation
+ * DWIN Enhanced implementation for PRO UI
  * Author: Miguel A. Risco-Castillo (MRISCOC)
- * Version: 3.8.2
- * Date: 2021/11/09
- *
- * Based on the original code provided by Creality under GPL
+ * Version: 3.15.1
+ * Date: 2022/02/25
  */
 
 #include "../../../inc/MarlinConfigPre.h"
@@ -51,7 +49,9 @@ xy_int_t DWINUI::cursor = { 0 };
 uint16_t DWINUI::pencolor = Color_White;
 uint16_t DWINUI::textcolor = Def_Text_Color;
 uint16_t DWINUI::backcolor = Def_Background_Color;
+uint16_t DWINUI::buttoncolor = Def_Button_Color;
 uint8_t  DWINUI::font = font8x16;
+FSTR_P const DWINUI::Author = F(STRING_CONFIG_H_AUTHOR);
 
 void (*DWINUI::onCursorErase)(const int8_t line)=nullptr;
 void (*DWINUI::onCursorDraw)(const int8_t line)=nullptr;
@@ -59,18 +59,16 @@ void (*DWINUI::onTitleDraw)(TitleClass* title)=nullptr;
 void (*DWINUI::onMenuDraw)(MenuClass* menu)=nullptr;
 
 void DWINUI::init() {
-  DEBUG_ECHOPGM("\r\nDWIN handshake ");
-  delay(750);   // Delay here or init later in the boot process
-  const bool success = DWIN_Handshake();
-  if (success) DEBUG_ECHOLNPGM("ok."); else DEBUG_ECHOLNPGM("error.");
+  TERN_(DEBUG_DWIN, SERIAL_ECHOPGM("\r\nDWIN handshake "));
+  delay(750);   // Delay for wait to wakeup screen
+  const bool hs = DWIN_Handshake();
+  TERN(DEBUG_DWIN, SERIAL_ECHOLNF(hs ? F("ok.") : F("error.")), UNUSED(hs));
   DWIN_Frame_SetDir(1);
-  TERN(SHOW_BOOTSCREEN,,DWIN_Frame_Clear(Color_Bg_Black));
-  DWIN_UpdateLCD();
-  cursor.x = 0;
-  cursor.y = 0;
+  cursor.reset();
   pencolor = Color_White;
   textcolor = Def_Text_Color;
   backcolor = Def_Background_Color;
+  buttoncolor = Def_Button_Color;
   font = font8x16;
 }
 
@@ -124,9 +122,10 @@ uint16_t DWINUI::RowToY(uint8_t row) {
 }
 
 // Set text/number color
-void DWINUI::SetColors(uint16_t fgcolor, uint16_t bgcolor) {
+void DWINUI::SetColors(uint16_t fgcolor, uint16_t bgcolor, uint16_t alcolor) {
   textcolor = fgcolor;
   backcolor = bgcolor;
+  buttoncolor = alcolor;
 }
 void DWINUI::SetTextColor(uint16_t fgcolor) {
   textcolor = fgcolor;
@@ -159,16 +158,22 @@ void DWINUI::MoveBy(xy_int_t point) {
   cursor += point;
 }
 
-// Draw a Centered string using DWIN_WIDTH
-void DWINUI::Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t y, const char * const string) {
-  const int8_t x = _MAX(0U, DWIN_WIDTH - strlen_P(string) * fontWidth(size)) / 2 - 1;
+// Draw a Centered string using arbitrary x1 and x2 margins
+void DWINUI::Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t x1, uint16_t x2, uint16_t y, const char * const string) {
+  const uint16_t x = _MAX(0U, x2 + x1 - strlen_P(string) * fontWidth(size)) / 2 - 1;
   DWIN_Draw_String(bShow, size, color, bColor, x, y, string);
 }
 
+// // Draw a Centered string using DWIN_WIDTH
+// void DWINUI::Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t y, const char * const string) {
+//   const int8_t x = _MAX(0U, DWIN_WIDTH - strlen_P(string) * fontWidth(size)) / 2 - 1;
+//   DWIN_Draw_String(bShow, size, color, bColor, x, y, string);
+// }
+
 // Draw a char at cursor position
-void DWINUI::Draw_Char(const char c) {
+void DWINUI::Draw_Char(uint16_t color, const char c) {
   const char string[2] = { c, 0};
-  DWIN_Draw_String(false, font, textcolor, backcolor, cursor.x, cursor.y, string, 1);
+  DWIN_Draw_String(false, font, color, backcolor, cursor.x, cursor.y, string, 1);
   MoveBy(fontWidth(font), 0);
 }
 
@@ -185,21 +190,26 @@ void DWINUI::Draw_String(uint16_t color, const char * const string, uint16_t rli
   MoveBy(strlen(string) * fontWidth(font), 0);
 }
 
-// Draw a signed floating point number
-//  bShow: true=display background color; false=don't display background color
-//  zeroFill: true=zero fill; false=no zero fill
-//  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
-//  size: Font size
-//  bColor: Background color
-//  iNum: Number of whole digits
-//  fNum: Number of decimal digits
-//  x/y: Upper-left point
-//  value: Float value
-void DWINUI::Draw_Signed_Float(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
-  DWIN_Draw_FloatValue(bShow, zeroFill, zeroMode, size, color, bColor, iNum, fNum, x, y, value < 0 ? -value : value);
-  DWIN_Draw_String(bShow, size, color, bColor, x - 6, y, value < 0 ? F("-") : F(" "));
+// ------------------------- Buttons ------------------------------//
+
+void DWINUI::Draw_Button(uint16_t color, uint16_t bcolor, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const char * const caption) {
+  DWIN_Draw_Rectangle(1, bcolor, x1, y1, x2, y2);
+  Draw_CenteredString(0, font, color, bcolor, x1, x2, (y2 + y1 - fontHeight())/2, caption);
+}
+
+void DWINUI::Draw_Button(uint8_t id, uint16_t x, uint16_t y) {
+  switch (id) {
+    case BTN_Cancel  : Draw_Button(GET_TEXT_F(MSG_BUTTON_CANCEL), x, y); break;
+    case BTN_Confirm : Draw_Button(GET_TEXT_F(MSG_BUTTON_CONFIRM), x, y); break;
+    case BTN_Continue: Draw_Button(GET_TEXT_F(MSG_BUTTON_CONTINUE), x, y); break;
+    case BTN_Print   : Draw_Button(GET_TEXT_F(MSG_BUTTON_PRINT), x, y); break;
+    case BTN_Save    : Draw_Button(GET_TEXT_F(MSG_BUTTON_SAVE), x, y); break;
+    default: break;
+  }
 }
 
+// -------------------------- Extra -------------------------------//
+
 // Draw a circle
 //  color: circle color
 //  x: the abscissa of the center of the circle
@@ -247,13 +257,12 @@ void DWINUI::Draw_FillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r) {
 //  color1 : Start color
 //  color2 : End color
 uint16_t DWINUI::ColorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t color1, uint16_t color2) {
-  uint8_t B,G,R;
-  float n;
-  n = (float)(val-minv)/(maxv-minv);
-  R = (1-n)*GetRColor(color1) + n*GetRColor(color2);
-  G = (1-n)*GetGColor(color1) + n*GetGColor(color2);
-  B = (1-n)*GetBColor(color1) + n*GetBColor(color2);
-  return RGB(R,G,B);
+  uint8_t B, G, R;
+  const float n = (float)(val - minv) / (maxv - minv);
+  R = (1 - n) * GetRColor(color1) + n * GetRColor(color2);
+  G = (1 - n) * GetGColor(color1) + n * GetGColor(color2);
+  B = (1 - n) * GetBColor(color1) + n * GetBColor(color2);
+  return RGB(R, G, B);
 }
 
 // Color Interpolator through Red->Yellow->Green->Blue
@@ -261,33 +270,27 @@ uint16_t DWINUI::ColorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t colo
 //  minv : Minimum value
 //  maxv : Maximum value
 uint16_t DWINUI::RainbowInt(int16_t val, int16_t minv, int16_t maxv) {
-  uint8_t B,G,R;
-  const uint8_t maxB = 28;
-  const uint8_t maxR = 28;
-  const uint8_t maxG = 38;
+  uint8_t B, G, R;
+  const uint8_t maxB = 28, maxR = 28, maxG = 38;
   const int16_t limv = _MAX(abs(minv), abs(maxv));
-  float n;
-  if (minv>=0) {
-    n = (float)(val-minv)/(maxv-minv);
-  } else {
-    n = (float)val/limv;
-  }
-  n = _MIN(1, n);
-  n = _MAX(-1, n);
+  float n = minv >= 0 ? (float)(val - minv) / (maxv - minv) : (float)val / limv;
+  LIMIT(n, -1, 1);
   if (n < 0) {
     R = 0;
-    G = (1+n)*maxG;
-    B = (-n)*maxB;
-  } else if (n < 0.5) {
-    R = maxR*n*2;
+    G = (1 + n) * maxG;
+    B = (-n) * maxB;
+  }
+  else if (n < 0.5) {
+    R = maxR * n * 2;
     G = maxG;
     B = 0;
-  } else {
+  }
+  else {
     R = maxR;
-    G = maxG*(1-n);
+    G = maxG * (1 - n);
     B = 0;
   }
-  return RGB(R,G,B);
+  return RGB(R, G, B);
 }
 
 // Draw a checkbox

commit 48b5362cf02ff12c9e9fc4d5825ceebe457ea34b
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Mar 10 22:07:47 2022 -0600

    üîß DWIN_CREALITY_LCD_ENHANCED => DWIN_LCD_PROUI
    
    Followup to #23624

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
index d3cfc9a3e4..1dbd531390 100644
--- a/Marlin/src/lcd/e3v2/proui/dwinui.cpp
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -31,7 +31,7 @@
 
 #include "../../../inc/MarlinConfigPre.h"
 
-#if ENABLED(DWIN_CREALITY_LCD_ENHANCED)
+#if ENABLED(DWIN_LCD_PROUI)
 
 #include "../../../inc/MarlinConfig.h"
 #include "dwin_lcd.h"
@@ -453,4 +453,4 @@ MenuItemPtrClass::MenuItemPtrClass(uint8_t cicon, const char * const text, void
   value = val;
 };
 
-#endif // DWIN_CREALITY_LCD_ENHANCED
+#endif // DWIN_LCD_PROUI

commit 0564cb188f1a74dc9ecfb55b793f4225424a9ca4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 5 10:30:17 2022 -0600

    üö∏ Enhanced UI => Professional UI - with updates (#23624)

diff --git a/Marlin/src/lcd/e3v2/proui/dwinui.cpp b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
new file mode 100644
index 0000000000..d3cfc9a3e4
--- /dev/null
+++ b/Marlin/src/lcd/e3v2/proui/dwinui.cpp
@@ -0,0 +1,456 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2021 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * DWIN UI Enhanced implementation
+ * Author: Miguel A. Risco-Castillo (MRISCOC)
+ * Version: 3.8.2
+ * Date: 2021/11/09
+ *
+ * Based on the original code provided by Creality under GPL
+ */
+
+#include "../../../inc/MarlinConfigPre.h"
+
+#if ENABLED(DWIN_CREALITY_LCD_ENHANCED)
+
+#include "../../../inc/MarlinConfig.h"
+#include "dwin_lcd.h"
+#include "dwinui.h"
+#include "dwin_defines.h"
+
+//#define DEBUG_OUT 1
+#include "../../../core/debug_out.h"
+
+int8_t MenuItemTotal = 0;
+int8_t MenuItemCount = 0;
+MenuItemClass** MenuItems = nullptr;
+MenuClass *CurrentMenu = nullptr;
+MenuClass *PreviousMenu = nullptr;
+
+xy_int_t DWINUI::cursor = { 0 };
+uint16_t DWINUI::pencolor = Color_White;
+uint16_t DWINUI::textcolor = Def_Text_Color;
+uint16_t DWINUI::backcolor = Def_Background_Color;
+uint8_t  DWINUI::font = font8x16;
+
+void (*DWINUI::onCursorErase)(const int8_t line)=nullptr;
+void (*DWINUI::onCursorDraw)(const int8_t line)=nullptr;
+void (*DWINUI::onTitleDraw)(TitleClass* title)=nullptr;
+void (*DWINUI::onMenuDraw)(MenuClass* menu)=nullptr;
+
+void DWINUI::init() {
+  DEBUG_ECHOPGM("\r\nDWIN handshake ");
+  delay(750);   // Delay here or init later in the boot process
+  const bool success = DWIN_Handshake();
+  if (success) DEBUG_ECHOLNPGM("ok."); else DEBUG_ECHOLNPGM("error.");
+  DWIN_Frame_SetDir(1);
+  TERN(SHOW_BOOTSCREEN,,DWIN_Frame_Clear(Color_Bg_Black));
+  DWIN_UpdateLCD();
+  cursor.x = 0;
+  cursor.y = 0;
+  pencolor = Color_White;
+  textcolor = Def_Text_Color;
+  backcolor = Def_Background_Color;
+  font = font8x16;
+}
+
+// Set text/number font
+void DWINUI::setFont(uint8_t cfont) {
+  font = cfont;
+}
+
+// Get font character width
+uint8_t DWINUI::fontWidth(uint8_t cfont) {
+  switch (cfont) {
+    case font6x12 : return 6;
+    case font8x16 : return 8;
+    case font10x20: return 10;
+    case font12x24: return 12;
+    case font14x28: return 14;
+    case font16x32: return 16;
+    case font20x40: return 20;
+    case font24x48: return 24;
+    case font28x56: return 28;
+    case font32x64: return 32;
+    default: return 0;
+  }
+}
+
+// Get font character height
+uint8_t DWINUI::fontHeight(uint8_t cfont) {
+  switch (cfont) {
+    case font6x12 : return 12;
+    case font8x16 : return 16;
+    case font10x20: return 20;
+    case font12x24: return 24;
+    case font14x28: return 28;
+    case font16x32: return 32;
+    case font20x40: return 40;
+    case font24x48: return 48;
+    case font28x56: return 56;
+    case font32x64: return 64;
+    default: return 0;
+  }
+}
+
+// Get screen x coordinates from text column
+uint16_t DWINUI::ColToX(uint8_t col) {
+  return col * fontWidth(font);
+}
+
+// Get screen y coordinates from text row
+uint16_t DWINUI::RowToY(uint8_t row) {
+  return row * fontHeight(font);
+}
+
+// Set text/number color
+void DWINUI::SetColors(uint16_t fgcolor, uint16_t bgcolor) {
+  textcolor = fgcolor;
+  backcolor = bgcolor;
+}
+void DWINUI::SetTextColor(uint16_t fgcolor) {
+  textcolor = fgcolor;
+}
+void DWINUI::SetBackgroundColor(uint16_t bgcolor) {
+  backcolor = bgcolor;
+}
+
+// Moves cursor to point
+//  x: abscissa of the display
+//  y: ordinate of the display
+//  point: xy coordinate
+void DWINUI::MoveTo(int16_t x, int16_t y) {
+  cursor.x = x;
+  cursor.y = y;
+}
+void DWINUI::MoveTo(xy_int_t point) {
+  cursor = point;
+}
+
+// Moves cursor relative to the actual position
+//  x: abscissa of the display
+//  y: ordinate of the display
+//  point: xy coordinate
+void DWINUI::MoveBy(int16_t x, int16_t y) {
+  cursor.x += x;
+  cursor.y += y;
+}
+void DWINUI::MoveBy(xy_int_t point) {
+  cursor += point;
+}
+
+// Draw a Centered string using DWIN_WIDTH
+void DWINUI::Draw_CenteredString(bool bShow, uint8_t size, uint16_t color, uint16_t bColor, uint16_t y, const char * const string) {
+  const int8_t x = _MAX(0U, DWIN_WIDTH - strlen_P(string) * fontWidth(size)) / 2 - 1;
+  DWIN_Draw_String(bShow, size, color, bColor, x, y, string);
+}
+
+// Draw a char at cursor position
+void DWINUI::Draw_Char(const char c) {
+  const char string[2] = { c, 0};
+  DWIN_Draw_String(false, font, textcolor, backcolor, cursor.x, cursor.y, string, 1);
+  MoveBy(fontWidth(font), 0);
+}
+
+// Draw a string at cursor position
+//  color: Character color
+//  *string: The string
+//  rlimit: For draw less chars than string length use rlimit
+void DWINUI::Draw_String(const char * const string, uint16_t rlimit) {
+  DWIN_Draw_String(false, font, textcolor, backcolor, cursor.x, cursor.y, string, rlimit);
+  MoveBy(strlen(string) * fontWidth(font), 0);
+}
+void DWINUI::Draw_String(uint16_t color, const char * const string, uint16_t rlimit) {
+  DWIN_Draw_String(false, font, color, backcolor, cursor.x, cursor.y, string, rlimit);
+  MoveBy(strlen(string) * fontWidth(font), 0);
+}
+
+// Draw a signed floating point number
+//  bShow: true=display background color; false=don't display background color
+//  zeroFill: true=zero fill; false=no zero fill
+//  zeroMode: 1=leading 0 displayed as 0; 0=leading 0 displayed as a space
+//  size: Font size
+//  bColor: Background color
+//  iNum: Number of whole digits
+//  fNum: Number of decimal digits
+//  x/y: Upper-left point
+//  value: Float value
+void DWINUI::Draw_Signed_Float(uint8_t bShow, bool zeroFill, uint8_t zeroMode, uint8_t size, uint16_t color, uint16_t bColor, uint8_t iNum, uint8_t fNum, uint16_t x, uint16_t y, float value) {
+  DWIN_Draw_FloatValue(bShow, zeroFill, zeroMode, size, color, bColor, iNum, fNum, x, y, value < 0 ? -value : value);
+  DWIN_Draw_String(bShow, size, color, bColor, x - 6, y, value < 0 ? F("-") : F(" "));
+}
+
+// Draw a circle
+//  color: circle color
+//  x: the abscissa of the center of the circle
+//  y: ordinate of the center of the circle
+//  r: circle radius
+void DWINUI::Draw_Circle(uint16_t color, uint16_t x, uint16_t y, uint8_t r) {
+  int a = 0, b = 0;
+  while (a <= b) {
+    b = SQRT(sq(r) - sq(a));
+    if (a == 0) b--;
+    DWIN_Draw_Point(color, 1, 1, x + a, y + b);   // Draw some sector 1
+    DWIN_Draw_Point(color, 1, 1, x + b, y + a);   // Draw some sector 2
+    DWIN_Draw_Point(color, 1, 1, x + b, y - a);   // Draw some sector 3
+    DWIN_Draw_Point(color, 1, 1, x + a, y - b);   // Draw some sector 4
+    DWIN_Draw_Point(color, 1, 1, x - a, y - b);   // Draw some sector 5
+    DWIN_Draw_Point(color, 1, 1, x - b, y - a);   // Draw some sector 6
+    DWIN_Draw_Point(color, 1, 1, x - b, y + a);   // Draw some sector 7
+    DWIN_Draw_Point(color, 1, 1, x - a, y + b);   // Draw some sector 8
+    a++;
+  }
+}
+
+// Draw a circle filled with color
+//  bcolor: fill color
+//  x: the abscissa of the center of the circle
+//  y: ordinate of the center of the circle
+//  r: circle radius
+void DWINUI::Draw_FillCircle(uint16_t bcolor, uint16_t x,uint16_t y,uint8_t r) {
+  int a = 0, b = 0;
+  while (a <= b) {
+    b = SQRT(sq(r) - sq(a)); // b=sqrt(r*r-a*a);
+    if (a == 0) b--;
+    DWIN_Draw_Line(bcolor, x-b,y-a,x+b,y-a);
+    DWIN_Draw_Line(bcolor, x-a,y-b,x+a,y-b);
+    DWIN_Draw_Line(bcolor, x-b,y+a,x+b,y+a);
+    DWIN_Draw_Line(bcolor, x-a,y+b,x+a,y+b);
+    a++;
+  }
+}
+
+// Color Interpolator
+//  val : Interpolator minv..maxv
+//  minv : Minimum value
+//  maxv : Maximum value
+//  color1 : Start color
+//  color2 : End color
+uint16_t DWINUI::ColorInt(int16_t val, int16_t minv, int16_t maxv, uint16_t color1, uint16_t color2) {
+  uint8_t B,G,R;
+  float n;
+  n = (float)(val-minv)/(maxv-minv);
+  R = (1-n)*GetRColor(color1) + n*GetRColor(color2);
+  G = (1-n)*GetGColor(color1) + n*GetGColor(color2);
+  B = (1-n)*GetBColor(color1) + n*GetBColor(color2);
+  return RGB(R,G,B);
+}
+
+// Color Interpolator through Red->Yellow->Green->Blue
+//  val : Interpolator minv..maxv
+//  minv : Minimum value
+//  maxv : Maximum value
+uint16_t DWINUI::RainbowInt(int16_t val, int16_t minv, int16_t maxv) {
+  uint8_t B,G,R;
+  const uint8_t maxB = 28;
+  const uint8_t maxR = 28;
+  const uint8_t maxG = 38;
+  const int16_t limv = _MAX(abs(minv), abs(maxv));
+  float n;
+  if (minv>=0) {
+    n = (float)(val-minv)/(maxv-minv);
+  } else {
+    n = (float)val/limv;
+  }
+  n = _MIN(1, n);
+  n = _MAX(-1, n);
+  if (n < 0) {
+    R = 0;
+    G = (1+n)*maxG;
+    B = (-n)*maxB;
+  } else if (n < 0.5) {
+    R = maxR*n*2;
+    G = maxG;
+    B = 0;
+  } else {
+    R = maxR;
+    G = maxG*(1-n);
+    B = 0;
+  }
+  return RGB(R,G,B);
+}
+
+// Draw a checkbox
+//  Color: frame color
+//  bColor: Background color
+//  x/y: Upper-left point
+//  mode : 0 : unchecked, 1 : checked
+void DWINUI::Draw_Checkbox(uint16_t color, uint16_t bcolor, uint16_t x, uint16_t y, bool checked=false) {
+  DWIN_Draw_String(true, font8x16, color, bcolor, x + 4, y, checked ? F("x") : F(" "));
+  DWIN_Draw_Rectangle(0, color, x + 2, y + 2, x + 17, y + 17);
+}
+
+// Clear Menu by filling the menu area with background color
+void DWINUI::ClearMenuArea() {
+  DWIN_Draw_Rectangle(1, backcolor, 0, TITLE_HEIGHT, DWIN_WIDTH - 1, STATUS_Y - 1);
+}
+
+void DWINUI::MenuItemsClear() {
+  if (MenuItems == nullptr) return;
+  for (int8_t i = 0; i < MenuItemCount; i++) delete MenuItems[i];
+  delete[] MenuItems;
+  MenuItems = nullptr;
+  MenuItemCount = 0;
+  MenuItemTotal = 0;
+}
+
+void DWINUI::MenuItemsPrepare(int8_t totalitems) {
+  MenuItemsClear();
+  MenuItemTotal = totalitems;
+  MenuItems = new MenuItemClass*[totalitems];
+}
+
+MenuItemClass* DWINUI::MenuItemsAdd(MenuItemClass* menuitem) {
+  if (MenuItemCount < MenuItemTotal) {
+    MenuItems[MenuItemCount] = menuitem;
+    menuitem->pos = MenuItemCount++;
+    return menuitem;
+  }
+  else {
+    delete menuitem;
+    return nullptr;
+  }
+}
+
+/* Title Class ==============================================================*/
+
+TitleClass Title;
+
+void TitleClass::draw() {
+  if (DWINUI::onTitleDraw != nullptr) (*DWINUI::onTitleDraw)(this);
+}
+
+void TitleClass::SetCaption(const char * const title) {
+  frameid = 0;
+  if ( caption == title ) return;
+  const uint8_t len = _MIN(sizeof(caption) - 1, strlen(title));
+  memcpy(&caption[0], title, len);
+  caption[len] = '\0';
+}
+
+void TitleClass::ShowCaption(const char * const title) {
+  SetCaption(title);
+  draw();
+}
+
+void TitleClass::SetFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
+  caption[0] = '\0';
+  frameid = id;
+  frame = { x1, y1, x2, y2 };
+}
+
+void TitleClass::SetFrame(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
+  SetFrame(1, x, y, x + w - 1, y + h - 1);
+}
+
+void TitleClass::FrameCopy(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
+  SetFrame(id, x1, y1, x2, y2);
+  draw();
+}
+
+void TitleClass::FrameCopy(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
+  FrameCopy(1, x, y, x + w - 1, y + h - 1);
+}
+
+/* Menu Class ===============================================================*/
+
+MenuClass::MenuClass() {
+  selected = 0;
+  topline = 0;
+}
+
+void MenuClass::draw() {
+  MenuTitle.draw();
+  if (DWINUI::onMenuDraw != nullptr) (*DWINUI::onMenuDraw)(this);
+  for (int8_t i = 0; i < MenuItemCount; i++)
+    MenuItems[i]->draw(i - topline);
+  if (DWINUI::onCursorDraw != nullptr) DWINUI::onCursorDraw(line());
+  DWIN_UpdateLCD();
+}
+
+void MenuClass::onScroll(bool dir) {
+  int8_t sel = selected;
+  if (dir) sel++; else sel--;
+  LIMIT(sel, 0, MenuItemCount - 1);
+  if (sel != selected) {
+    if (DWINUI::onCursorErase != nullptr) DWINUI::onCursorErase(line());
+    if ((sel - topline) == TROWS) {
+      DWIN_Frame_AreaMove(1, DWIN_SCROLL_UP, MLINE, DWINUI::backcolor, 0, TITLE_HEIGHT + 1, DWIN_WIDTH, STATUS_Y - 1);
+      topline++;
+      MenuItems[sel]->draw(TROWS - 1);
+    }
+    if ((sel < topline)) {
+      DWIN_Frame_AreaMove(1, DWIN_SCROLL_DOWN, MLINE, DWINUI::backcolor, 0, TITLE_HEIGHT + 1, DWIN_WIDTH, STATUS_Y - 1);
+      topline--;
+      MenuItems[sel]->draw(0);
+    }
+    selected = sel;
+    if (DWINUI::onCursorDraw != nullptr) DWINUI::onCursorDraw(line());
+    DWIN_UpdateLCD();
+  }
+}
+
+void MenuClass::onClick() {
+  if (MenuItems[selected]->onClick != nullptr) (*MenuItems[selected]->onClick)();
+}
+
+MenuItemClass *MenuClass::SelectedItem() {
+  return MenuItems[selected];
+}
+
+/* MenuItem Class ===========================================================*/
+
+MenuItemClass::MenuItemClass(uint8_t cicon, const char * const text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)()) {
+  icon = cicon;
+  onClick = onclick;
+  onDraw = ondraw;
+  const uint8_t len = _MIN(sizeof(caption) - 1, strlen(text));
+  memcpy(&caption[0], text, len);
+  caption[len] = '\0';
+}
+
+MenuItemClass::MenuItemClass(uint8_t cicon, uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)()) {
+  icon = cicon;
+  onClick = onclick;
+  onDraw = ondraw;
+  caption[0] = '\0';
+  frameid = id;
+  frame = { x1, y1, x2, y2 };
+}
+
+void MenuItemClass::SetFrame(uint8_t id, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
+  caption[0] = '\0';
+  frameid = id;
+  frame = { x1, y1, x2, y2 };
+}
+
+void MenuItemClass::draw(int8_t line) {
+  if (line < 0 || line >= TROWS) return;
+  if (onDraw != nullptr) (*onDraw)(this, line);
+};
+
+MenuItemPtrClass::MenuItemPtrClass(uint8_t cicon, const char * const text, void (*ondraw)(MenuItemClass* menuitem, int8_t line), void (*onclick)(), void* val) : MenuItemClass(cicon, text, ondraw, onclick) {
+  value = val;
+};
+
+#endif // DWIN_CREALITY_LCD_ENHANCED
