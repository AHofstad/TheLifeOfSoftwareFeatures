commit f0bc4274f817166fcce82949d94330bd1c441c15
Author: narno2202 <130909513+narno2202@users.noreply.github.com>
Date:   Mon Jul 15 20:13:00 2024 +0200

    üßë‚Äçüíª FT Motion: Individual axis shaping, new buffer management (#26848)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index 5404c3e9e2..4b17db3daf 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -145,21 +145,21 @@ static void IRAM_ATTR i2s_intr_handler_default(void *arg) {
 void stepperTask(void *parameter) {
   uint32_t nextMainISR = 0;
   #if ENABLED(LIN_ADVANCE)
     uint32_t nextAdvanceISR = Stepper::LA_ADV_NEVER;
   #endif
 
   for (;;) {
     xQueueReceive(dma.queue, &dma.current, portMAX_DELAY);
     dma.rw_pos = 0;
 
-    const bool using_ftMotion = TERN0(FT_MOTION, ftMotion.cfg.mode);
+    const bool using_ftMotion = TERN0(FT_MOTION, ftMotion.cfg.active);
 
     while (dma.rw_pos < DMA_SAMPLE_COUNT) {
 
       #if ENABLED(FT_MOTION)
 
         if (using_ftMotion) {
           if (!nextMainISR) stepper.ftMotion_stepper();
           nextMainISR = 0;
         }
 

commit b106f59eb495718d7158e27347eca5deb11fbe86
Author: narno2202 <130909513+narno2202@users.noreply.github.com>
Date:   Mon Jan 8 05:17:43 2024 +0100

    üêõ Refine FT Motion, I2S Stepping (#26628)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index 69f8ca9845..5404c3e9e2 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -27,20 +27,24 @@
 
 #include "i2s.h"
 
 #include "../shared/Marduino.h"
 #include <driver/periph_ctrl.h>
 #include <rom/lldesc.h>
 #include <soc/i2s_struct.h>
 #include <freertos/queue.h>
 #include "../../module/stepper.h"
 
+#if ENABLED(FT_MOTION)
+  #include "../../module/ft_motion.h"
+#endif
+
 #define DMA_BUF_COUNT 8                                // number of DMA buffers to store data
 #define DMA_BUF_LEN   4092                             // maximum size in bytes
 #define I2S_SAMPLE_SIZE 4                              // 4 bytes, 32 bits per sample
 #define DMA_SAMPLE_COUNT DMA_BUF_LEN / I2S_SAMPLE_SIZE // number of samples per buffer
 
 typedef enum {
   I2S_NUM_0 = 0x0,  /*!< I2S 0*/
   I2S_NUM_1 = 0x1,  /*!< I2S 1*/
   I2S_NUM_MAX,
 } i2s_port_t;
@@ -127,57 +131,71 @@ static void IRAM_ATTR i2s_intr_handler_default(void *arg) {
     // If the queue is full it's because we have an underflow,
     // more than buf_count isr without new data, remove the front buffer
     if (xQueueIsQueueFullFromISR(dma.queue))
       xQueueReceiveFromISR(dma.queue, &dummy, &high_priority_task_awoken);
 
     xQueueSendFromISR(dma.queue, (void *)(&finish_desc->buf), &high_priority_task_awoken);
   }
 
   if (high_priority_task_awoken == pdTRUE) portYIELD_FROM_ISR();
 
-  // clear interrupt
-  I2S0.int_clr.val = I2S0.int_st.val; //clear pending interrupt
+  // Clear pending interrupt
+  I2S0.int_clr.val = I2S0.int_st.val;
 }
 
 void stepperTask(void *parameter) {
   uint32_t nextMainISR = 0;
   #if ENABLED(LIN_ADVANCE)
     uint32_t nextAdvanceISR = Stepper::LA_ADV_NEVER;
   #endif
 
   for (;;) {
     xQueueReceive(dma.queue, &dma.current, portMAX_DELAY);
     dma.rw_pos = 0;
 
+    const bool using_ftMotion = TERN0(FT_MOTION, ftMotion.cfg.mode);
+
     while (dma.rw_pos < DMA_SAMPLE_COUNT) {
-      if (!nextMainISR) {
-        Stepper::pulse_phase_isr();
-        nextMainISR = Stepper::block_phase_isr();
-      }
-      #if ENABLED(LIN_ADVANCE)
-        else if (!nextAdvanceISR) {
-          Stepper::advance_isr();
-          nextAdvanceISR = Stepper::la_interval;
-        }
-      #endif
-      else
-        i2s_push_sample();
 
-      nextMainISR--;
+      #if ENABLED(FT_MOTION)
 
-      #if ENABLED(LIN_ADVANCE)
-        if (nextAdvanceISR == Stepper::LA_ADV_NEVER)
-          nextAdvanceISR = Stepper::la_interval;
+        if (using_ftMotion) {
+          if (!nextMainISR) stepper.ftMotion_stepper();
+          nextMainISR = 0;
+        }
 
-        if (nextAdvanceISR && nextAdvanceISR != Stepper::LA_ADV_NEVER)
-          nextAdvanceISR--;
       #endif
+
+      if (!using_ftMotion) {
+        if (!nextMainISR) {
+          Stepper::pulse_phase_isr();
+          nextMainISR = Stepper::block_phase_isr();
+        }
+        #if ENABLED(LIN_ADVANCE)
+          else if (!nextAdvanceISR) {
+            Stepper::advance_isr();
+            nextAdvanceISR = Stepper::la_interval;
+          }
+        #endif
+        else
+          i2s_push_sample();
+
+        nextMainISR--;
+
+        #if ENABLED(LIN_ADVANCE)
+          if (nextAdvanceISR == Stepper::LA_ADV_NEVER)
+            nextAdvanceISR = Stepper::la_interval;
+
+          if (nextAdvanceISR && nextAdvanceISR != Stepper::LA_ADV_NEVER)
+            nextAdvanceISR--;
+        #endif
+      }
     }
   }
 }
 
 int i2s_init() {
   periph_module_enable(PERIPH_I2S0_MODULE);
 
   /**
    * Each i2s transfer will take
    *   fpll = PLL_D2_CLK      -- clka_en = 0

commit 86c811660ebf0b3fcbae2f34273d4c9d0c22abc4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 2 14:30:34 2023 -0500

    üßë‚Äçüíª Remove LOOP macros (#25917)

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index 63ceed4c9d..69f8ca9845 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -349,21 +349,21 @@ uint8_t i2s_state(uint8_t pin) {
   #if ENABLED(I2S_STEPPER_SPLIT_STREAM)
     if (pin >= 16) return TEST(I2S0.conf_single_data, pin);
   #endif
   return TEST(i2s_port_data, pin);
 }
 
 void i2s_push_sample() {
   // Every 4¬µs (when space in DMA buffer) toggle each expander PWM output using
   // the current duty cycle/frequency so they sync with any steps (once
   // through the DMA/FIFO buffers).  PWM signal inversion handled by other functions
-  LOOP_L_N(p, MAX_EXPANDER_BITS) {
+  for (uint8_t p = 0; p < MAX_EXPANDER_BITS; ++p) {
     if (hal.pwm_pin_data[p].pwm_duty_ticks > 0) { // pin has active pwm?
       if (hal.pwm_pin_data[p].pwm_tick_count == 0) {
         if (TEST32(i2s_port_data, p)) {  // hi->lo
           CBI32(i2s_port_data, p);
           hal.pwm_pin_data[p].pwm_tick_count = hal.pwm_pin_data[p].pwm_cycle_ticks - hal.pwm_pin_data[p].pwm_duty_ticks;
         }
         else { // lo->hi
           SBI32(i2s_port_data, p);
           hal.pwm_pin_data[p].pwm_tick_count = hal.pwm_pin_data[p].pwm_duty_ticks;
         }

commit f81c468f1e4fab9df0741011d34852886a6ab8cc
Author: John Robertson <john@cirtech.co.uk>
Date:   Tue Jan 17 23:53:39 2023 +0000

    üêõ Fix potential I2S buffer overwrite (#25113)

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index d9bad4ec2d..63ceed4c9d 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -142,44 +142,42 @@ void stepperTask(void *parameter) {
   uint32_t nextMainISR = 0;
   #if ENABLED(LIN_ADVANCE)
     uint32_t nextAdvanceISR = Stepper::LA_ADV_NEVER;
   #endif
 
   for (;;) {
     xQueueReceive(dma.queue, &dma.current, portMAX_DELAY);
     dma.rw_pos = 0;
 
     while (dma.rw_pos < DMA_SAMPLE_COUNT) {
-      // Fill with the port data post pulse_phase until the next step
-      if (nextMainISR && TERN1(LIN_ADVANCE, nextAdvanceISR))
-        i2s_push_sample();
-
-      // i2s_push_sample() is also called from Stepper::pulse_phase_isr() and Stepper::advance_isr()
-      // in a rare case where both are called, we need to double decrement the counters
-      const uint8_t push_count = 1 + (!nextMainISR && TERN0(LIN_ADVANCE, !nextAdvanceISR));
-
+      if (!nextMainISR) {
+        Stepper::pulse_phase_isr();
+        nextMainISR = Stepper::block_phase_isr();
+      }
       #if ENABLED(LIN_ADVANCE)
-        if (!nextAdvanceISR) {
+        else if (!nextAdvanceISR) {
           Stepper::advance_isr();
           nextAdvanceISR = Stepper::la_interval;
         }
-        else if (nextAdvanceISR == Stepper::LA_ADV_NEVER)
-          nextAdvanceISR = Stepper::la_interval;
       #endif
+      else
+        i2s_push_sample();
 
-      if (!nextMainISR) {
-        Stepper::pulse_phase_isr();
-        nextMainISR = Stepper::block_phase_isr();
-      }
+      nextMainISR--;
 
-      nextMainISR -= push_count;
-      TERN_(LIN_ADVANCE, nextAdvanceISR -= push_count);
+      #if ENABLED(LIN_ADVANCE)
+        if (nextAdvanceISR == Stepper::LA_ADV_NEVER)
+          nextAdvanceISR = Stepper::la_interval;
+
+        if (nextAdvanceISR && nextAdvanceISR != Stepper::LA_ADV_NEVER)
+          nextAdvanceISR--;
+      #endif
     }
   }
 }
 
 int i2s_init() {
   periph_module_enable(PERIPH_I2S0_MODULE);
 
   /**
    * Each i2s transfer will take
    *   fpll = PLL_D2_CLK      -- clka_en = 0

commit 8e71f7add45782f17ce485c6a2bd9004edac156c
Author: tombrazier <68918209+tombrazier@users.noreply.github.com>
Date:   Fri Sep 2 03:04:46 2022 +0100

    ‚ú® Permit Linear Advance with I2S Streaming (#24684)

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index cf337eeb46..d9bad4ec2d 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -132,36 +132,54 @@ static void IRAM_ATTR i2s_intr_handler_default(void *arg) {
     xQueueSendFromISR(dma.queue, (void *)(&finish_desc->buf), &high_priority_task_awoken);
   }
 
   if (high_priority_task_awoken == pdTRUE) portYIELD_FROM_ISR();
 
   // clear interrupt
   I2S0.int_clr.val = I2S0.int_st.val; //clear pending interrupt
 }
 
 void stepperTask(void *parameter) {
-  uint32_t remaining = 0;
+  uint32_t nextMainISR = 0;
+  #if ENABLED(LIN_ADVANCE)
+    uint32_t nextAdvanceISR = Stepper::LA_ADV_NEVER;
+  #endif
 
-  while (1) {
+  for (;;) {
     xQueueReceive(dma.queue, &dma.current, portMAX_DELAY);
     dma.rw_pos = 0;
 
     while (dma.rw_pos < DMA_SAMPLE_COUNT) {
       // Fill with the port data post pulse_phase until the next step
-      if (remaining) {
+      if (nextMainISR && TERN1(LIN_ADVANCE, nextAdvanceISR))
         i2s_push_sample();
-        remaining--;
-      }
-      else {
+
+      // i2s_push_sample() is also called from Stepper::pulse_phase_isr() and Stepper::advance_isr()
+      // in a rare case where both are called, we need to double decrement the counters
+      const uint8_t push_count = 1 + (!nextMainISR && TERN0(LIN_ADVANCE, !nextAdvanceISR));
+
+      #if ENABLED(LIN_ADVANCE)
+        if (!nextAdvanceISR) {
+          Stepper::advance_isr();
+          nextAdvanceISR = Stepper::la_interval;
+        }
+        else if (nextAdvanceISR == Stepper::LA_ADV_NEVER)
+          nextAdvanceISR = Stepper::la_interval;
+      #endif
+
+      if (!nextMainISR) {
         Stepper::pulse_phase_isr();
-        remaining = Stepper::block_phase_isr();
+        nextMainISR = Stepper::block_phase_isr();
       }
+
+      nextMainISR -= push_count;
+      TERN_(LIN_ADVANCE, nextAdvanceISR -= push_count);
     }
   }
 }
 
 int i2s_init() {
   periph_module_enable(PERIPH_I2S0_MODULE);
 
   /**
    * Each i2s transfer will take
    *   fpll = PLL_D2_CLK      -- clka_en = 0

commit ca06c6eab97407b3ef897f1512cc51e1b4aa083c
Author: John Robertson <john@cirtech.co.uk>
Date:   Sat Jun 4 07:26:08 2022 +0100

    ‚ö°Ô∏è PWM for ESP32 I2S expander (#24193)

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index 3e77b65836..cf337eeb46 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -330,15 +330,35 @@ void i2s_write(uint8_t pin, uint8_t val) {
 }
 
 uint8_t i2s_state(uint8_t pin) {
   #if ENABLED(I2S_STEPPER_SPLIT_STREAM)
     if (pin >= 16) return TEST(I2S0.conf_single_data, pin);
   #endif
   return TEST(i2s_port_data, pin);
 }
 
 void i2s_push_sample() {
+  // Every 4¬µs (when space in DMA buffer) toggle each expander PWM output using
+  // the current duty cycle/frequency so they sync with any steps (once
+  // through the DMA/FIFO buffers).  PWM signal inversion handled by other functions
+  LOOP_L_N(p, MAX_EXPANDER_BITS) {
+    if (hal.pwm_pin_data[p].pwm_duty_ticks > 0) { // pin has active pwm?
+      if (hal.pwm_pin_data[p].pwm_tick_count == 0) {
+        if (TEST32(i2s_port_data, p)) {  // hi->lo
+          CBI32(i2s_port_data, p);
+          hal.pwm_pin_data[p].pwm_tick_count = hal.pwm_pin_data[p].pwm_cycle_ticks - hal.pwm_pin_data[p].pwm_duty_ticks;
+        }
+        else { // lo->hi
+          SBI32(i2s_port_data, p);
+          hal.pwm_pin_data[p].pwm_tick_count = hal.pwm_pin_data[p].pwm_duty_ticks;
+        }
+      }
+      else
+        hal.pwm_pin_data[p].pwm_tick_count--;
+    }
+  }
+
   dma.current[dma.rw_pos++] = i2s_port_data;
 }
 
 #endif // !USE_ESP32_EXIO
 #endif // ARDUINO_ARCH_ESP32

commit 3e2a38b653b1d8479b7b38447d5fdff51ea9947f
Author: Keith Bennett <13375512+thisiskeithb@users.noreply.github.com>
Date:   Wed Jan 12 08:24:56 2022 -0800

    üìù KHz => kHz (#23512)

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index e9f418689e..3e77b65836 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -169,21 +169,21 @@ int i2s_init() {
    *   fi2s = fpll / N + b/a  -- N = clkm_div_num
    *   fi2s = 160MHz / 2
    *   fi2s = 80MHz
    *
    *   fbclk = fi2s / M   -- M = tx_bck_div_num
    *   fbclk = 80MHz / 2
    *   fbclk = 40MHz
    *
    *   fwclk = fbclk / 32
    *
-   *   for fwclk = 250KHz (4¬µS pulse time)
+   *   for fwclk = 250kHz (4¬µS pulse time)
    *      N = 10
    *      M = 20
    */
 
   // Allocate the array of pointers to the buffers
   dma.buffers = (uint32_t **)malloc(sizeof(uint32_t*) * DMA_BUF_COUNT);
   if (!dma.buffers) return -1;
 
   // Allocate each buffer that can be used by the DMA controller
   for (int buf_idx = 0; buf_idx < DMA_BUF_COUNT; buf_idx++) {

commit 02b29c0fecd1d68226cd64d660bb409e6f131f9e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jan 10 19:49:03 2022 -0600

    üìù kHz => KHz

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index 3e77b65836..e9f418689e 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -169,21 +169,21 @@ int i2s_init() {
    *   fi2s = fpll / N + b/a  -- N = clkm_div_num
    *   fi2s = 160MHz / 2
    *   fi2s = 80MHz
    *
    *   fbclk = fi2s / M   -- M = tx_bck_div_num
    *   fbclk = 80MHz / 2
    *   fbclk = 40MHz
    *
    *   fwclk = fbclk / 32
    *
-   *   for fwclk = 250kHz (4¬µS pulse time)
+   *   for fwclk = 250KHz (4¬µS pulse time)
    *      N = 10
    *      M = 20
    */
 
   // Allocate the array of pointers to the buffers
   dma.buffers = (uint32_t **)malloc(sizeof(uint32_t*) * DMA_BUF_COUNT);
   if (!dma.buffers) return -1;
 
   // Allocate each buffer that can be used by the DMA controller
   for (int buf_idx = 0; buf_idx < DMA_BUF_COUNT; buf_idx++) {

commit aa4e32555dd247c391356a2e1449dd9820beeab6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Oct 29 20:46:55 2021 -0500

    ‚ú® "Rutilea" ESP32 board (#22880)

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index 557ea319e6..3e77b65836 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -57,26 +57,23 @@ static portMUX_TYPE i2s_spinlock[I2S_NUM_MAX] = {portMUX_INITIALIZER_UNLOCKED, p
 static i2s_dev_t* I2S[I2S_NUM_MAX] = {&I2S0, &I2S1};
 static i2s_dma_t dma;
 
 // output value
 uint32_t i2s_port_data = 0;
 
 #define I2S_ENTER_CRITICAL()  portENTER_CRITICAL(&i2s_spinlock[i2s_num])
 #define I2S_EXIT_CRITICAL()   portEXIT_CRITICAL(&i2s_spinlock[i2s_num])
 
 static inline void gpio_matrix_out_check(uint32_t gpio, uint32_t signal_idx, bool out_inv, bool oen_inv) {
-  //if pin = -1, do not need to configure
-  if (gpio != -1) {
-    PIN_FUNC_SELECT(GPIO_PIN_MUX_REG[gpio], PIN_FUNC_GPIO);
-    gpio_set_direction((gpio_num_t)gpio, (gpio_mode_t)GPIO_MODE_DEF_OUTPUT);
-    gpio_matrix_out(gpio, signal_idx, out_inv, oen_inv);
-  }
+  PIN_FUNC_SELECT(GPIO_PIN_MUX_REG[gpio], PIN_FUNC_GPIO);
+  gpio_set_direction((gpio_num_t)gpio, (gpio_mode_t)GPIO_MODE_DEF_OUTPUT);
+  gpio_matrix_out(gpio, signal_idx, out_inv, oen_inv);
 }
 
 static esp_err_t i2s_reset_fifo(i2s_port_t i2s_num) {
   I2S_ENTER_CRITICAL();
   I2S[i2s_num]->conf.rx_fifo_reset = 1;
   I2S[i2s_num]->conf.rx_fifo_reset = 0;
   I2S[i2s_num]->conf.tx_fifo_reset = 1;
   I2S[i2s_num]->conf.tx_fifo_reset = 0;
   I2S_EXIT_CRITICAL();
 
@@ -249,27 +246,21 @@ int i2s_init() {
   I2S0.lc_conf.indscr_burst_en = 0;
   I2S0.lc_conf.out_eof_mode = 1;
 
   I2S0.conf2.lcd_en = 0;
   I2S0.conf2.camera_en = 0;
   I2S0.pdm_conf.pcm2pdm_conv_en = 0;
   I2S0.pdm_conf.pdm2pcm_conv_en = 0;
 
   I2S0.fifo_conf.dscr_en = 0;
 
-  I2S0.conf_chan.tx_chan_mod = (
-    #if ENABLED(I2S_STEPPER_SPLIT_STREAM)
-      4
-    #else
-      0
-    #endif
-  );
+  I2S0.conf_chan.tx_chan_mod = TERN(I2S_STEPPER_SPLIT_STREAM, 4, 0);
   I2S0.fifo_conf.tx_fifo_mod = 0;
   I2S0.conf.tx_mono = 0;
 
   I2S0.conf_chan.rx_chan_mod = 0;
   I2S0.fifo_conf.rx_fifo_mod = 0;
   I2S0.conf.rx_mono = 0;
 
   I2S0.fifo_conf.dscr_en = 1; //connect dma to fifo
 
   I2S0.conf.tx_start = 0;
@@ -306,23 +297,30 @@ int i2s_init() {
 
   // Allocate and Enable the I2S interrupt
   intr_handle_t i2s_isr_handle;
   esp_intr_alloc(ETS_I2S0_INTR_SOURCE, 0, i2s_intr_handler_default, nullptr, &i2s_isr_handle);
   esp_intr_enable(i2s_isr_handle);
 
   // Create the task that will feed the buffer
   xTaskCreatePinnedToCore(stepperTask, "StepperTask", 10000, nullptr, 1, nullptr, CONFIG_ARDUINO_RUNNING_CORE); // run I2S stepper task on same core as rest of Marlin
 
   // Route the i2s pins to the appropriate GPIO
-  gpio_matrix_out_check(I2S_DATA, I2S0O_DATA_OUT23_IDX, 0, 0);
-  gpio_matrix_out_check(I2S_BCK, I2S0O_BCK_OUT_IDX, 0, 0);
-  gpio_matrix_out_check(I2S_WS, I2S0O_WS_OUT_IDX, 0, 0);
+  // If a pin is not defined, no need to configure
+  #if defined(I2S_DATA) && I2S_DATA >= 0
+    gpio_matrix_out_check(I2S_DATA, I2S0O_DATA_OUT23_IDX, 0, 0);
+  #endif
+  #if defined(I2S_BCK) && I2S_BCK >= 0
+    gpio_matrix_out_check(I2S_BCK, I2S0O_BCK_OUT_IDX, 0, 0);
+  #endif
+  #if defined(I2S_WS) && I2S_WS >= 0
+    gpio_matrix_out_check(I2S_WS, I2S0O_WS_OUT_IDX, 0, 0);
+  #endif
 
   // Start the I2S peripheral
   return i2s_start(I2S_NUM_0);
 }
 
 void i2s_write(uint8_t pin, uint8_t val) {
   #if ENABLED(I2S_STEPPER_SPLIT_STREAM)
     if (pin >= 16) {
       SET_BIT_TO(I2S0.conf_single_data, pin, val);
       return;

commit 4e9ae9449fbdc9ad3cd9267d8e620b5ec5eddb3e
Author: Mark <niujl123@sina.com>
Date:   Tue Oct 5 12:23:02 2021 +0800

    ‚ú® ESP32 Panda_ZHU and Panda_M4 (#22644)

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index c28c008793..557ea319e6 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -16,20 +16,22 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #ifdef ARDUINO_ARCH_ESP32
 
 #include "../../inc/MarlinConfigPre.h"
 
+#if DISABLED(USE_ESP32_EXIO)
+
 #include "i2s.h"
 
 #include "../shared/Marduino.h"
 #include <driver/periph_ctrl.h>
 #include <rom/lldesc.h>
 #include <soc/i2s_struct.h>
 #include <freertos/queue.h>
 #include "../../module/stepper.h"
 
 #define DMA_BUF_COUNT 8                                // number of DMA buffers to store data
@@ -333,11 +335,12 @@ uint8_t i2s_state(uint8_t pin) {
   #if ENABLED(I2S_STEPPER_SPLIT_STREAM)
     if (pin >= 16) return TEST(I2S0.conf_single_data, pin);
   #endif
   return TEST(i2s_port_data, pin);
 }
 
 void i2s_push_sample() {
   dma.current[dma.rw_pos++] = i2s_port_data;
 }
 
+#endif // !USE_ESP32_EXIO
 #endif // ARDUINO_ARCH_ESP32

commit 8b6718c6320c32abe0fa1de56a033aca54ff0b76
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 4 18:07:16 2021 -0500

    misc. pointer formatting

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index e8f3806543..c28c008793 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -132,21 +132,21 @@ static void IRAM_ATTR i2s_intr_handler_default(void *arg) {
 
     xQueueSendFromISR(dma.queue, (void *)(&finish_desc->buf), &high_priority_task_awoken);
   }
 
   if (high_priority_task_awoken == pdTRUE) portYIELD_FROM_ISR();
 
   // clear interrupt
   I2S0.int_clr.val = I2S0.int_st.val; //clear pending interrupt
 }
 
-void stepperTask(void* parameter) {
+void stepperTask(void *parameter) {
   uint32_t remaining = 0;
 
   while (1) {
     xQueueReceive(dma.queue, &dma.current, portMAX_DELAY);
     dma.rw_pos = 0;
 
     while (dma.rw_pos < DMA_SAMPLE_COUNT) {
       // Fill with the port data post pulse_phase until the next step
       if (remaining) {
         i2s_push_sample();

commit ec23e37a4a31d12febc06922d3fa68446f58d7fb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Oct 24 17:13:10 2020 -0500

    Clean up comments, USB flash, NULLs

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index 99b2f755e5..e8f3806543 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -177,31 +177,31 @@ int i2s_init() {
    *
    *   fwclk = fbclk / 32
    *
    *   for fwclk = 250kHz (4¬µS pulse time)
    *      N = 10
    *      M = 20
    */
 
   // Allocate the array of pointers to the buffers
   dma.buffers = (uint32_t **)malloc(sizeof(uint32_t*) * DMA_BUF_COUNT);
-  if (dma.buffers == nullptr) return -1;
+  if (!dma.buffers) return -1;
 
   // Allocate each buffer that can be used by the DMA controller
   for (int buf_idx = 0; buf_idx < DMA_BUF_COUNT; buf_idx++) {
     dma.buffers[buf_idx] = (uint32_t*) heap_caps_calloc(1, DMA_BUF_LEN, MALLOC_CAP_DMA);
     if (dma.buffers[buf_idx] == nullptr) return -1;
   }
 
   // Allocate the array of DMA descriptors
   dma.desc = (lldesc_t**) malloc(sizeof(lldesc_t*) * DMA_BUF_COUNT);
-  if (dma.desc == nullptr) return -1;
+  if (!dma.desc) return -1;
 
   // Allocate each DMA descriptor that will be used by the DMA controller
   for (int buf_idx = 0; buf_idx < DMA_BUF_COUNT; buf_idx++) {
     dma.desc[buf_idx] = (lldesc_t*) heap_caps_malloc(sizeof(lldesc_t), MALLOC_CAP_DMA);
     if (dma.desc[buf_idx] == nullptr) return -1;
   }
 
   // Initialize
   for (int buf_idx = 0; buf_idx < DMA_BUF_COUNT; buf_idx++) {
     dma.desc[buf_idx]->owner = 1;

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
index d80c3c24e1..99b2f755e5 100644
--- a/Marlin/src/HAL/ESP32/i2s.cpp
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -9,21 +9,21 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #ifdef ARDUINO_ARCH_ESP32
 
 #include "../../inc/MarlinConfigPre.h"
 
 #include "i2s.h"
 
 #include "../shared/Marduino.h"
 #include <driver/periph_ctrl.h>

commit 6bead0c1b04152f6a291d851f6cd4029fe0fc616
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 13 16:29:29 2020 -0500

    Shorter paths to HAL, ExtUI (#17156)

diff --git a/Marlin/src/HAL/ESP32/i2s.cpp b/Marlin/src/HAL/ESP32/i2s.cpp
new file mode 100644
index 0000000000..d80c3c24e1
--- /dev/null
+++ b/Marlin/src/HAL/ESP32/i2s.cpp
@@ -0,0 +1,343 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+#ifdef ARDUINO_ARCH_ESP32
+
+#include "../../inc/MarlinConfigPre.h"
+
+#include "i2s.h"
+
+#include "../shared/Marduino.h"
+#include <driver/periph_ctrl.h>
+#include <rom/lldesc.h>
+#include <soc/i2s_struct.h>
+#include <freertos/queue.h>
+#include "../../module/stepper.h"
+
+#define DMA_BUF_COUNT 8                                // number of DMA buffers to store data
+#define DMA_BUF_LEN   4092                             // maximum size in bytes
+#define I2S_SAMPLE_SIZE 4                              // 4 bytes, 32 bits per sample
+#define DMA_SAMPLE_COUNT DMA_BUF_LEN / I2S_SAMPLE_SIZE // number of samples per buffer
+
+typedef enum {
+  I2S_NUM_0 = 0x0,  /*!< I2S 0*/
+  I2S_NUM_1 = 0x1,  /*!< I2S 1*/
+  I2S_NUM_MAX,
+} i2s_port_t;
+
+typedef struct {
+  uint32_t     **buffers;
+  uint32_t     *current;
+  uint32_t     rw_pos;
+  lldesc_t     **desc;
+  xQueueHandle queue;
+} i2s_dma_t;
+
+static portMUX_TYPE i2s_spinlock[I2S_NUM_MAX] = {portMUX_INITIALIZER_UNLOCKED, portMUX_INITIALIZER_UNLOCKED};
+static i2s_dev_t* I2S[I2S_NUM_MAX] = {&I2S0, &I2S1};
+static i2s_dma_t dma;
+
+// output value
+uint32_t i2s_port_data = 0;
+
+#define I2S_ENTER_CRITICAL()  portENTER_CRITICAL(&i2s_spinlock[i2s_num])
+#define I2S_EXIT_CRITICAL()   portEXIT_CRITICAL(&i2s_spinlock[i2s_num])
+
+static inline void gpio_matrix_out_check(uint32_t gpio, uint32_t signal_idx, bool out_inv, bool oen_inv) {
+  //if pin = -1, do not need to configure
+  if (gpio != -1) {
+    PIN_FUNC_SELECT(GPIO_PIN_MUX_REG[gpio], PIN_FUNC_GPIO);
+    gpio_set_direction((gpio_num_t)gpio, (gpio_mode_t)GPIO_MODE_DEF_OUTPUT);
+    gpio_matrix_out(gpio, signal_idx, out_inv, oen_inv);
+  }
+}
+
+static esp_err_t i2s_reset_fifo(i2s_port_t i2s_num) {
+  I2S_ENTER_CRITICAL();
+  I2S[i2s_num]->conf.rx_fifo_reset = 1;
+  I2S[i2s_num]->conf.rx_fifo_reset = 0;
+  I2S[i2s_num]->conf.tx_fifo_reset = 1;
+  I2S[i2s_num]->conf.tx_fifo_reset = 0;
+  I2S_EXIT_CRITICAL();
+
+  return ESP_OK;
+}
+
+esp_err_t i2s_start(i2s_port_t i2s_num) {
+  //start DMA link
+  I2S_ENTER_CRITICAL();
+  i2s_reset_fifo(i2s_num);
+
+  //reset dma
+  I2S[i2s_num]->lc_conf.in_rst = 1;
+  I2S[i2s_num]->lc_conf.in_rst = 0;
+  I2S[i2s_num]->lc_conf.out_rst = 1;
+  I2S[i2s_num]->lc_conf.out_rst = 0;
+
+  I2S[i2s_num]->conf.tx_reset = 1;
+  I2S[i2s_num]->conf.tx_reset = 0;
+  I2S[i2s_num]->conf.rx_reset = 1;
+  I2S[i2s_num]->conf.rx_reset = 0;
+
+  I2S[i2s_num]->int_clr.val = 0xFFFFFFFF;
+  I2S[i2s_num]->out_link.start = 1;
+  I2S[i2s_num]->conf.tx_start = 1;
+  I2S_EXIT_CRITICAL();
+
+  return ESP_OK;
+}
+
+esp_err_t i2s_stop(i2s_port_t i2s_num) {
+  I2S_ENTER_CRITICAL();
+  I2S[i2s_num]->out_link.stop = 1;
+  I2S[i2s_num]->conf.tx_start = 0;
+
+  I2S[i2s_num]->int_clr.val = I2S[i2s_num]->int_st.val; //clear pending interrupt
+  I2S_EXIT_CRITICAL();
+
+  return ESP_OK;
+}
+
+static void IRAM_ATTR i2s_intr_handler_default(void *arg) {
+  int dummy;
+  lldesc_t *finish_desc;
+  portBASE_TYPE high_priority_task_awoken = pdFALSE;
+
+  if (I2S0.int_st.out_eof) {
+    // Get the descriptor of the last item in the linkedlist
+    finish_desc = (lldesc_t*) I2S0.out_eof_des_addr;
+
+    // If the queue is full it's because we have an underflow,
+    // more than buf_count isr without new data, remove the front buffer
+    if (xQueueIsQueueFullFromISR(dma.queue))
+      xQueueReceiveFromISR(dma.queue, &dummy, &high_priority_task_awoken);
+
+    xQueueSendFromISR(dma.queue, (void *)(&finish_desc->buf), &high_priority_task_awoken);
+  }
+
+  if (high_priority_task_awoken == pdTRUE) portYIELD_FROM_ISR();
+
+  // clear interrupt
+  I2S0.int_clr.val = I2S0.int_st.val; //clear pending interrupt
+}
+
+void stepperTask(void* parameter) {
+  uint32_t remaining = 0;
+
+  while (1) {
+    xQueueReceive(dma.queue, &dma.current, portMAX_DELAY);
+    dma.rw_pos = 0;
+
+    while (dma.rw_pos < DMA_SAMPLE_COUNT) {
+      // Fill with the port data post pulse_phase until the next step
+      if (remaining) {
+        i2s_push_sample();
+        remaining--;
+      }
+      else {
+        Stepper::pulse_phase_isr();
+        remaining = Stepper::block_phase_isr();
+      }
+    }
+  }
+}
+
+int i2s_init() {
+  periph_module_enable(PERIPH_I2S0_MODULE);
+
+  /**
+   * Each i2s transfer will take
+   *   fpll = PLL_D2_CLK      -- clka_en = 0
+   *
+   *   fi2s = fpll / N + b/a  -- N = clkm_div_num
+   *   fi2s = 160MHz / 2
+   *   fi2s = 80MHz
+   *
+   *   fbclk = fi2s / M   -- M = tx_bck_div_num
+   *   fbclk = 80MHz / 2
+   *   fbclk = 40MHz
+   *
+   *   fwclk = fbclk / 32
+   *
+   *   for fwclk = 250kHz (4¬µS pulse time)
+   *      N = 10
+   *      M = 20
+   */
+
+  // Allocate the array of pointers to the buffers
+  dma.buffers = (uint32_t **)malloc(sizeof(uint32_t*) * DMA_BUF_COUNT);
+  if (dma.buffers == nullptr) return -1;
+
+  // Allocate each buffer that can be used by the DMA controller
+  for (int buf_idx = 0; buf_idx < DMA_BUF_COUNT; buf_idx++) {
+    dma.buffers[buf_idx] = (uint32_t*) heap_caps_calloc(1, DMA_BUF_LEN, MALLOC_CAP_DMA);
+    if (dma.buffers[buf_idx] == nullptr) return -1;
+  }
+
+  // Allocate the array of DMA descriptors
+  dma.desc = (lldesc_t**) malloc(sizeof(lldesc_t*) * DMA_BUF_COUNT);
+  if (dma.desc == nullptr) return -1;
+
+  // Allocate each DMA descriptor that will be used by the DMA controller
+  for (int buf_idx = 0; buf_idx < DMA_BUF_COUNT; buf_idx++) {
+    dma.desc[buf_idx] = (lldesc_t*) heap_caps_malloc(sizeof(lldesc_t), MALLOC_CAP_DMA);
+    if (dma.desc[buf_idx] == nullptr) return -1;
+  }
+
+  // Initialize
+  for (int buf_idx = 0; buf_idx < DMA_BUF_COUNT; buf_idx++) {
+    dma.desc[buf_idx]->owner = 1;
+    dma.desc[buf_idx]->eof = 1; // set to 1 will trigger the interrupt
+    dma.desc[buf_idx]->sosf = 0;
+    dma.desc[buf_idx]->length = DMA_BUF_LEN;
+    dma.desc[buf_idx]->size = DMA_BUF_LEN;
+    dma.desc[buf_idx]->buf = (uint8_t *) dma.buffers[buf_idx];
+    dma.desc[buf_idx]->offset = 0;
+    dma.desc[buf_idx]->empty = (uint32_t)((buf_idx < (DMA_BUF_COUNT - 1)) ? (dma.desc[buf_idx + 1]) : dma.desc[0]);
+  }
+
+  dma.queue = xQueueCreate(DMA_BUF_COUNT, sizeof(uint32_t *));
+
+  // Set the first DMA descriptor
+  I2S0.out_link.addr = (uint32_t)dma.desc[0];
+
+  // stop i2s
+  i2s_stop(I2S_NUM_0);
+
+  // configure I2S data port interface.
+  i2s_reset_fifo(I2S_NUM_0);
+
+  //reset i2s
+  I2S0.conf.tx_reset = 1;
+  I2S0.conf.tx_reset = 0;
+  I2S0.conf.rx_reset = 1;
+  I2S0.conf.rx_reset = 0;
+
+  //reset dma
+  I2S0.lc_conf.in_rst = 1;
+  I2S0.lc_conf.in_rst = 0;
+  I2S0.lc_conf.out_rst = 1;
+  I2S0.lc_conf.out_rst = 0;
+
+  //Enable and configure DMA
+  I2S0.lc_conf.check_owner = 0;
+  I2S0.lc_conf.out_loop_test = 0;
+  I2S0.lc_conf.out_auto_wrback = 0;
+  I2S0.lc_conf.out_data_burst_en = 0;
+  I2S0.lc_conf.outdscr_burst_en = 0;
+  I2S0.lc_conf.out_no_restart_clr = 0;
+  I2S0.lc_conf.indscr_burst_en = 0;
+  I2S0.lc_conf.out_eof_mode = 1;
+
+  I2S0.conf2.lcd_en = 0;
+  I2S0.conf2.camera_en = 0;
+  I2S0.pdm_conf.pcm2pdm_conv_en = 0;
+  I2S0.pdm_conf.pdm2pcm_conv_en = 0;
+
+  I2S0.fifo_conf.dscr_en = 0;
+
+  I2S0.conf_chan.tx_chan_mod = (
+    #if ENABLED(I2S_STEPPER_SPLIT_STREAM)
+      4
+    #else
+      0
+    #endif
+  );
+  I2S0.fifo_conf.tx_fifo_mod = 0;
+  I2S0.conf.tx_mono = 0;
+
+  I2S0.conf_chan.rx_chan_mod = 0;
+  I2S0.fifo_conf.rx_fifo_mod = 0;
+  I2S0.conf.rx_mono = 0;
+
+  I2S0.fifo_conf.dscr_en = 1; //connect dma to fifo
+
+  I2S0.conf.tx_start = 0;
+  I2S0.conf.rx_start = 0;
+
+  I2S0.conf.tx_msb_right = 1;
+  I2S0.conf.tx_right_first = 1;
+
+  I2S0.conf.tx_slave_mod = 0; // Master
+  I2S0.fifo_conf.tx_fifo_mod_force_en = 1;
+
+  I2S0.pdm_conf.rx_pdm_en = 0;
+  I2S0.pdm_conf.tx_pdm_en = 0;
+
+  I2S0.conf.tx_short_sync = 0;
+  I2S0.conf.rx_short_sync = 0;
+  I2S0.conf.tx_msb_shift = 0;
+  I2S0.conf.rx_msb_shift = 0;
+
+  // set clock
+  I2S0.clkm_conf.clka_en = 0;       // Use PLL/2 as reference
+  I2S0.clkm_conf.clkm_div_num = 10; // minimum value of 2, reset value of 4, max 256
+  I2S0.clkm_conf.clkm_div_a = 0;    // 0 at reset, what about divide by 0? (not an issue)
+  I2S0.clkm_conf.clkm_div_b = 0;    // 0 at reset
+
+  // fbck = fi2s / tx_bck_div_num
+  I2S0.sample_rate_conf.tx_bck_div_num = 2; // minimum value of 2 defaults to 6
+
+  // Enable TX interrupts
+  I2S0.int_ena.out_eof = 1;
+  I2S0.int_ena.out_dscr_err = 0;
+  I2S0.int_ena.out_total_eof = 0;
+  I2S0.int_ena.out_done = 0;
+
+  // Allocate and Enable the I2S interrupt
+  intr_handle_t i2s_isr_handle;
+  esp_intr_alloc(ETS_I2S0_INTR_SOURCE, 0, i2s_intr_handler_default, nullptr, &i2s_isr_handle);
+  esp_intr_enable(i2s_isr_handle);
+
+  // Create the task that will feed the buffer
+  xTaskCreatePinnedToCore(stepperTask, "StepperTask", 10000, nullptr, 1, nullptr, CONFIG_ARDUINO_RUNNING_CORE); // run I2S stepper task on same core as rest of Marlin
+
+  // Route the i2s pins to the appropriate GPIO
+  gpio_matrix_out_check(I2S_DATA, I2S0O_DATA_OUT23_IDX, 0, 0);
+  gpio_matrix_out_check(I2S_BCK, I2S0O_BCK_OUT_IDX, 0, 0);
+  gpio_matrix_out_check(I2S_WS, I2S0O_WS_OUT_IDX, 0, 0);
+
+  // Start the I2S peripheral
+  return i2s_start(I2S_NUM_0);
+}
+
+void i2s_write(uint8_t pin, uint8_t val) {
+  #if ENABLED(I2S_STEPPER_SPLIT_STREAM)
+    if (pin >= 16) {
+      SET_BIT_TO(I2S0.conf_single_data, pin, val);
+      return;
+    }
+  #endif
+  SET_BIT_TO(i2s_port_data, pin, val);
+}
+
+uint8_t i2s_state(uint8_t pin) {
+  #if ENABLED(I2S_STEPPER_SPLIT_STREAM)
+    if (pin >= 16) return TEST(I2S0.conf_single_data, pin);
+  #endif
+  return TEST(i2s_port_data, pin);
+}
+
+void i2s_push_sample() {
+  dma.current[dma.rw_pos++] = i2s_port_data;
+}
+
+#endif // ARDUINO_ARCH_ESP32
