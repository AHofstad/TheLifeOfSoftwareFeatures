commit 006768ab58ff426fa7cfdaa72dba135b10a47ed7
Author: Andrew <18502096+classicrocker883@users.noreply.github.com>
Date:   Mon Nov 20 02:23:07 2023 -0500

    üö∏ Fix MarlinUI axis move / UBL strings (#26439)
    
    Followup to #26344

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index df2a31b3fe..e47704da7e 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -119,7 +119,6 @@ namespace LanguageNarrow_zh_TW {
   LSTR MSG_HOTEND_OFFSET_A                = _UxGT("2nd Nozzle @");
   LSTR MSG_UBL_DOING_G29                  = _UxGT("Âü∑Ë°åG29"); // "Doing G29"
   LSTR MSG_UBL_TOOLS                      = _UxGT("UBLÂ∑•ÂÖ∑"); // "UBL Tools"
-  LSTR MSG_UBL_LEVEL_BED                  = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)"); // "Unified Bed Leveling"
   LSTR MSG_LCD_TILTING_MESH               = _UxGT("ÂÇæÊñúÈªû"); // "Tilting Point"
   LSTR MSG_UBL_MANUAL_MESH                = _UxGT("ÊâãÂ∑•Âª∫Á∂≤"); // "Manually Build Mesh"
   LSTR MSG_UBL_BC_INSERT                  = _UxGT("ÊîæÁΩÆÂ¢äÁâá‰∏¶Ê∏¨Èáè"); // "Place shim & measure"
@@ -220,9 +219,9 @@ namespace LanguageNarrow_zh_TW {
   LSTR MSG_MOVE_E                         = _UxGT("Êì†Âá∫Ê©ü"); // "Extruder"
   LSTR MSG_MOVE_EN                        = _UxGT("Êì†Âá∫Ê©ü *"); // "Extruder *"
   LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†"); // "Hotend too cold"
-  LSTR MSG_MOVE_N_MM                      = _UxGT("ÁßªÂãï $ mm"); // "Move $mm"
-  LSTR MSG_MOVE_N_IN                      = _UxGT("ÁßªÂãï $ in"); // "Move $in"
-  LSTR MSG_MOVE_N_DEG                     = _UxGT("ÁßªÂãï $ ") LCD_STR_DEGREE; // "Move $¬∞"
+  LSTR MSG_MOVE_N_MM                      = _UxGT("ÁßªÂãï $mm"); // "Move $mm"
+  LSTR MSG_MOVE_N_IN                      = _UxGT("ÁßªÂãï $in"); // "Move $in"
+  LSTR MSG_MOVE_N_DEG                     = _UxGT("ÁßªÂãï $") LCD_STR_DEGREE; // "Move $¬∞"
   LSTR MSG_SPEED                          = _UxGT("ÈÄüÁéá"); // "Speed"
   LSTR MSG_MESH_Z_OFFSET                  = _UxGT("ÁÜ±Â∫äZ"); // "Bed Z"
   LSTR MSG_NOZZLE                         = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥"); // "Nozzle" Âô¥Âò¥

commit aed577271ff94c822e861d8f652f2bdf46b2aeb9
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Nov 17 22:39:00 2023 -0600

    üî® Rotational move items (#26438)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 14f37079c7..df2a31b3fe 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -222,6 +222,7 @@ namespace LanguageNarrow_zh_TW {
   LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†"); // "Hotend too cold"
   LSTR MSG_MOVE_N_MM                      = _UxGT("ÁßªÂãï $ mm"); // "Move $mm"
   LSTR MSG_MOVE_N_IN                      = _UxGT("ÁßªÂãï $ in"); // "Move $in"
+  LSTR MSG_MOVE_N_DEG                     = _UxGT("ÁßªÂãï $ ") LCD_STR_DEGREE; // "Move $¬∞"
   LSTR MSG_SPEED                          = _UxGT("ÈÄüÁéá"); // "Speed"
   LSTR MSG_MESH_Z_OFFSET                  = _UxGT("ÁÜ±Â∫äZ"); // "Bed Z"
   LSTR MSG_NOZZLE                         = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥"); // "Nozzle" Âô¥Âò¥

commit 36e66bdd9ff22ddfdcaa36ac8a9b9448c78ca44c
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sat Nov 18 09:11:59 2023 +1300

    üîß Define MarlinUI axis moves with lists (#26344)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 9106487b14..14f37079c7 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -220,12 +220,8 @@ namespace LanguageNarrow_zh_TW {
   LSTR MSG_MOVE_E                         = _UxGT("Êì†Âá∫Ê©ü"); // "Extruder"
   LSTR MSG_MOVE_EN                        = _UxGT("Êì†Âá∫Ê©ü *"); // "Extruder *"
   LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†"); // "Hotend too cold"
-  LSTR MSG_MOVE_N_MM                      = _UxGT("ÁßªÂãï $ mm"); // "Move 0.025mm"
-  LSTR MSG_MOVE_01MM                      = _UxGT("ÁßªÂãï 0.1 mm"); // "Move 0.1mm"
-  LSTR MSG_MOVE_1MM                       = _UxGT("ÁßªÂãï 1 mm"); // "Move 1mm"
-  LSTR MSG_MOVE_10MM                      = _UxGT("ÁßªÂãï 10 mm"); // "Move 10mm"
-  LSTR MSG_MOVE_50MM                      = _UxGT("ÁßªÂãï 50 mm"); // "Move 50mm"
-  LSTR MSG_MOVE_100MM                     = _UxGT("ÁßªÂãï 100 mm"); // "Move 100mm"
+  LSTR MSG_MOVE_N_MM                      = _UxGT("ÁßªÂãï $ mm"); // "Move $mm"
+  LSTR MSG_MOVE_N_IN                      = _UxGT("ÁßªÂãï $ in"); // "Move $in"
   LSTR MSG_SPEED                          = _UxGT("ÈÄüÁéá"); // "Speed"
   LSTR MSG_MESH_Z_OFFSET                  = _UxGT("ÁÜ±Â∫äZ"); // "Bed Z"
   LSTR MSG_NOZZLE                         = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥"); // "Nozzle" Âô¥Âò¥

commit 88cdf487b433bf2187f2dad31587882ebf02cc59
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Aug 22 17:36:53 2023 -0500

    üö∏ Avoid LCD messages starting with "Error:" (#26164)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index b22a3cd1ac..9106487b14 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -377,11 +377,9 @@ namespace LanguageNarrow_zh_TW {
   LSTR MSG_BABYSTEP_Z                     = _UxGT("ÂæÆÈáèË™øÊï¥ZËª∏"); // "Babystep Z"
   LSTR MSG_BABYSTEP_TOTAL                 = _UxGT("Á∏ΩË®à"); // "Total"
   LSTR MSG_ENDSTOP_ABORT                  = _UxGT("ÊìãÂ°äÁµÇÊ≠¢"); // "Endstop abort"
-  LSTR MSG_HEATING_FAILED_LCD             = _UxGT("Âä†ÁÜ±Â§±Êïó"); // "Heating failed"
+  LSTR MSG_ERR_HEATING_FAILED             = _UxGT("Âä†ÁÜ±Â§±Êïó"); // "Heating failed"
   LSTR MSG_ERR_REDUNDANT_TEMP             = _UxGT("ÈåØË™§ÔºöÂÜóÈ§òÊ∫´Â∫¶"); // "Err: REDUNDANT TEMP"
-  LSTR MSG_THERMAL_RUNAWAY                = _UxGT("Ê∫´Â∫¶Â§±Êéß"); // "THERMAL RUNAWAY"
-  LSTR MSG_THERMAL_RUNAWAY_BED            = _UxGT("ÁÜ±Â∫äÊ∫´Â∫¶Â§±Êéß"); // "BED THERMAL RUNAWAY"
-  LSTR MSG_THERMAL_RUNAWAY_CHAMBER        = _UxGT("Ê©üÁÆ±Ê∫´Â∫¶Â§±Êéß"); // "CHAMBER T. RUNAWAY"
+  LSTR MSG_ERR_THERMAL_RUNAWAY            = _UxGT("Ê∫´Â∫¶Â§±Êéß"); // "THERMAL RUNAWAY"
   LSTR MSG_ERR_MAXTEMP                    = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ∫´Â∫¶"); // "Err: MAXTEMP"
   LSTR MSG_ERR_MINTEMP                    = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶"); // "Err: MINTEMP"
   LSTR MSG_HALTED                         = _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü"); // "PRINTER HALTED"

commit 0878b99b2cb38ffd40faa12d9e3de3bd659af205
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 30 19:21:56 2023 -0500

    üåê Language Import/Export (#25889)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 968ad4424e..b22a3cd1ac 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -27,7 +27,7 @@
  * LCD Menu Messages
  * See also https://marlinfw.org/docs/development/lcd_language.html
  */
-namespace Language_zh_TW {
+namespace LanguageNarrow_zh_TW {
   using namespace Language_en; // Inherit undefined strings from English
 
   constexpr uint8_t CHARSIZE              = 3;
@@ -65,23 +65,23 @@ namespace Language_zh_TW {
   LSTR MSG_Z_FADE_HEIGHT                  = _UxGT("Ê∑°Âá∫È´òÂ∫¶"); // "Fade Height"
   LSTR MSG_SET_HOME_OFFSETS               = _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª"); // "Set home offsets"
   LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®"); // "Offsets applied"
-  #if HAS_PREHEAT
-    LSTR MSG_PREHEAT_1                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL; // "Preheat PREHEAT_1_LABEL"
-    LSTR MSG_PREHEAT_1_H                  = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~"; // "Preheat PREHEAT_1_LABEL"
-    LSTR MSG_PREHEAT_1_END                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥"); //MSG_PREHEAT_1 " "
-    LSTR MSG_PREHEAT_1_END_E              = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ~"); //MSG_PREHEAT_1 " "
-    LSTR MSG_PREHEAT_1_ALL                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÂÖ®ÈÉ®"); //MSG_PREHEAT_1 " All"
-    LSTR MSG_PREHEAT_1_BEDONLY            = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÁÜ±Â∫ä"); //MSG_PREHEAT_1 " Bed"
-    LSTR MSG_PREHEAT_1_SETTINGS           = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Ë®≠ÁΩÆ"); //MSG_PREHEAT_1 " conf"
 
-    LSTR MSG_PREHEAT_M                    = _UxGT("È†êÁÜ± $"); // "Preheat PREHEAT_1_LABEL"
-    LSTR MSG_PREHEAT_M_H                  = _UxGT("È†êÁÜ± $ ~"); // "Preheat PREHEAT_1_LABEL"
-    LSTR MSG_PREHEAT_M_END                = _UxGT("È†êÁÜ± $ Âô¥Âò¥"); //MSG_PREHEAT_1 " "
-    LSTR MSG_PREHEAT_M_END_E              = _UxGT("È†êÁÜ± $ Âô¥Âò¥ ~"); //MSG_PREHEAT_1 " "
-    LSTR MSG_PREHEAT_M_ALL                = _UxGT("È†êÁÜ± $ ÂÖ®ÈÉ®"); //MSG_PREHEAT_1 " All"
-    LSTR MSG_PREHEAT_M_BEDONLY            = _UxGT("È†êÁÜ± $ ÁÜ±Â∫ä"); //MSG_PREHEAT_1 " Bed"
-    LSTR MSG_PREHEAT_M_SETTINGS           = _UxGT("È†êÁÜ± $ Ë®≠ÁΩÆ"); //MSG_PREHEAT_1 " conf"
-  #endif
+  LSTR MSG_PREHEAT_1                      = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL; // "Preheat PREHEAT_1_LABEL"
+  LSTR MSG_PREHEAT_1_H                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~"; // "Preheat PREHEAT_1_LABEL"
+  LSTR MSG_PREHEAT_1_END                  = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥"); //MSG_PREHEAT_1 " "
+  LSTR MSG_PREHEAT_1_END_E                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ~"); //MSG_PREHEAT_1 " "
+  LSTR MSG_PREHEAT_1_ALL                  = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÂÖ®ÈÉ®"); //MSG_PREHEAT_1 " All"
+  LSTR MSG_PREHEAT_1_BEDONLY              = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÁÜ±Â∫ä"); //MSG_PREHEAT_1 " Bed"
+  LSTR MSG_PREHEAT_1_SETTINGS             = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Ë®≠ÁΩÆ"); //MSG_PREHEAT_1 " conf"
+
+  LSTR MSG_PREHEAT_M                      = _UxGT("È†êÁÜ± $"); // "Preheat PREHEAT_1_LABEL"
+  LSTR MSG_PREHEAT_M_H                    = _UxGT("È†êÁÜ± $ ~"); // "Preheat PREHEAT_1_LABEL"
+  LSTR MSG_PREHEAT_M_END                  = _UxGT("È†êÁÜ± $ Âô¥Âò¥"); //MSG_PREHEAT_1 " "
+  LSTR MSG_PREHEAT_M_END_E                = _UxGT("È†êÁÜ± $ Âô¥Âò¥ ~"); //MSG_PREHEAT_1 " "
+  LSTR MSG_PREHEAT_M_ALL                  = _UxGT("È†êÁÜ± $ ÂÖ®ÈÉ®"); //MSG_PREHEAT_1 " All"
+  LSTR MSG_PREHEAT_M_BEDONLY              = _UxGT("È†êÁÜ± $ ÁÜ±Â∫ä"); //MSG_PREHEAT_1 " Bed"
+  LSTR MSG_PREHEAT_M_SETTINGS             = _UxGT("È†êÁÜ± $ Ë®≠ÁΩÆ"); //MSG_PREHEAT_1 " conf"
+
   LSTR MSG_PREHEAT_CUSTOM                 = _UxGT("Ëá™ÂÆöÈ†êÁÜ±"); // "Preheat Custom"
   LSTR MSG_COOLDOWN                       = _UxGT("ÈôçÊ∫´"); // "Cooldown"
   LSTR MSG_LASER_MENU                     = _UxGT("ÊøÄÂÖâÊéßÂà∂"); // "Laser Control"
@@ -138,10 +138,8 @@ namespace Language_zh_TW {
   LSTR MSG_UBL_DONE_EDITING_MESH          = _UxGT("ÂÆåÊàêÁ∑®ËºØÁ∂≤Ê†º"); // "Done Editing Mesh"
   LSTR MSG_UBL_BUILD_CUSTOM_MESH          = _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º"); // "Build Custom Mesh"
   LSTR MSG_UBL_BUILD_MESH_MENU            = _UxGT("ÂâµË®≠Á∂≤Ê†º"); // "Build Mesh"
-  #if HAS_PREHEAT
-    LSTR MSG_UBL_BUILD_MESH_M             = _UxGT("ÂâµË®≠ $ Á∂≤Ê†º"); // "Build PREHEAT_1_LABEL Mesh"
-    LSTR MSG_UBL_VALIDATE_MESH_M          = _UxGT("ÊâπÂáÜ $ Á∂≤Ê†º"); // "Validate PREHEAT_1_LABEL Mesh"
-  #endif
+  LSTR MSG_UBL_BUILD_MESH_M               = _UxGT("ÂâµË®≠ $ Á∂≤Ê†º"); // "Build PREHEAT_1_LABEL Mesh"
+  LSTR MSG_UBL_VALIDATE_MESH_M            = _UxGT("ÊâπÂáÜ $ Á∂≤Ê†º"); // "Validate PREHEAT_1_LABEL Mesh"
   LSTR MSG_UBL_BUILD_COLD_MESH            = _UxGT("ÂâµË®≠ÂÜ∑Á∂≤Ê†º"); // "Build Cold Mesh"
   LSTR MSG_UBL_MESH_HEIGHT_ADJUST         = _UxGT("Ë™øÊï¥Á∂≤Ê†ºÈ´òÂ∫¶"); // "Adjust Mesh Height"
   LSTR MSG_UBL_MESH_HEIGHT_AMOUNT         = _UxGT("È´òÂ∫¶ÂêàË®à"); // "Height Amount"
@@ -424,19 +422,11 @@ namespace Language_zh_TW {
   LSTR MSG_CASE_LIGHT_BRIGHTNESS          = _UxGT("Ááà‰∫ÆÂ∫¶"); // "Light BRIGHTNESS"
   LSTR MSG_KILL_EXPECTED_PRINTER          = _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫"); // "The printer is incorrect"
 
-  #if LCD_WIDTH >= 20 || HAS_DWIN_E3V2
-    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("ÂàóÂç∞Ë®àÊï∏"); // "Print Count"
-    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("Â∑≤ÂÆåÊàê"); // "Completed"
-    LSTR MSG_INFO_PRINT_TIME              = _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì"); // "Total print time"
-    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì"); // "Longest job time"
-    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("Á∏ΩË®àÊì†Âá∫"); // "Extruded total"
-  #else
-    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("ÂàóÂç∞Êï∏"); // "Prints"
-    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("ÂÆåÊàê"); // "Completed"
-    LSTR MSG_INFO_PRINT_TIME              = _UxGT("Á∏ΩÂÖ±"); // "Total"
-    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("ÊúÄÈï∑"); // "Longest"
-    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("Â∑≤Êì†Âá∫"); // "Extruded"
-  #endif
+  LSTR MSG_INFO_PRINT_COUNT               = _UxGT("ÂàóÂç∞Êï∏"); // "Prints"
+  LSTR MSG_INFO_COMPLETED_PRINTS          = _UxGT("ÂÆåÊàê"); // "Completed"
+  LSTR MSG_INFO_PRINT_TIME                = _UxGT("Á∏ΩÂÖ±"); // "Total"
+  LSTR MSG_INFO_PRINT_LONGEST             = _UxGT("ÊúÄÈï∑"); // "Longest"
+  LSTR MSG_INFO_PRINT_FILAMENT            = _UxGT("Â∑≤Êì†Âá∫"); // "Extruded"
 
   LSTR MSG_INFO_MIN_TEMP                  = _UxGT("ÊúÄ‰ΩéÊ∫´Â∫¶"); // "Min Temp"
   LSTR MSG_INFO_MAX_TEMP                  = _UxGT("ÊúÄÈ´òÊ∫´Â∫¶"); // "Max Temp"
@@ -459,10 +449,40 @@ namespace Language_zh_TW {
   LSTR MSG_LCD_PROBING_FAILED             = _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó"); // "Probing failed"
 
   //
-  // Filament Change screens show up to 3 lines on a 4-line display
-  //                        ...or up to 2 lines on a 3-line display
+  // Filament Change screens show up to 2 lines on a 3-line display
   //
+  LSTR MSG_ADVANCED_PAUSE_WAITING         = _UxGT(MSG_1_LINE("Êåâ‰∏ãÁπºÁ∫å..")); // "Click to continue"
+  LSTR MSG_PAUSE_PRINT_PARKING            = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ...")); // "Parking..."
+  LSTR MSG_FILAMENT_CHANGE_INIT           = _UxGT(MSG_1_LINE("Ë´ãÁ≠âÂæÖ ...")); // "Please wait..."
+  LSTR MSG_FILAMENT_CHANGE_INSERT         = _UxGT(MSG_1_LINE("ÊèíÂÖ•‰∏¶ÈªûÊìä")); // "Insert and Click"
+  LSTR MSG_FILAMENT_CHANGE_HEAT           = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂä†ÁÜ±..")); // "Click to heat"
+  LSTR MSG_FILAMENT_CHANGE_HEATING        = _UxGT(MSG_1_LINE("Âä†ÁÜ±‰∏≠ ...")); // "Heating..."
+  LSTR MSG_FILAMENT_CHANGE_UNLOAD         = _UxGT(MSG_1_LINE("ÈÄÄÂá∫‰∏≠ ...")); // "Ejecting..."
+  LSTR MSG_FILAMENT_CHANGE_LOAD           = _UxGT(MSG_1_LINE("ËºâÂÖ•‰∏≠ ...")); // "Loading..."
+  LSTR MSG_FILAMENT_CHANGE_PURGE          = _UxGT(MSG_1_LINE("Ê∏ÖÈô§‰∏≠ ...")); // "Purging..."
+  LSTR MSG_FILAMENT_CHANGE_CONT_PURGE     = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂÆåÊàê..")); // "Click to finish"
+  LSTR MSG_FILAMENT_CHANGE_RESUME         = _UxGT(MSG_1_LINE("ÊÅ¢Âæ©‰∏≠ ...")); // "Resuming..."
+
+  LSTR MSG_SHORT_DAY                      = _UxGT("Â§©"); // "d" // One character only
+  LSTR MSG_SHORT_HOUR                     = _UxGT("ÊôÇ"); // "h" // One character only
+  LSTR MSG_SHORT_MINUTE                   = _UxGT("ÂàÜ"); // "m" // One character only
+}
+
+namespace LanguageWide_zh_TW {
+  using namespace LanguageNarrow_zh_TW;
+  #if LCD_WIDTH >= 20 || HAS_DWIN_E3V2
+    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("ÂàóÂç∞Ë®àÊï∏"); // "Print Count"
+    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("Â∑≤ÂÆåÊàê"); // "Completed"
+    LSTR MSG_INFO_PRINT_TIME              = _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì"); // "Total print time"
+    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì"); // "Longest job time"
+    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("Á∏ΩË®àÊì†Âá∫"); // "Extruded total"
+  #endif
+}
+
+namespace LanguageTall_zh_TW {
+  using namespace LanguageWide_zh_TW;
   #if LCD_HEIGHT >= 4
+    // Filament Change screens show up to 3 lines on a 4-line display
     LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "ÊÅ¢Âæ©ÂàóÂç∞")); //"Press Button to resume print"
     LSTR MSG_PAUSE_PRINT_PARKING          = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ...")); // "Parking..."
     LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_3_LINE("Á≠âÂæÖÈñãÂßã", "Áµ≤Êñô", "ËÆäÊõ¥")); // "Wait for start of the filament change"
@@ -474,21 +494,9 @@ namespace Language_zh_TW {
     LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Áµ≤ÊñôÊ∏ÖÈô§")); // "Wait for filament purge"
     LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_2_LINE("Êåâ‰∏ãÂÆåÊàê","Áµ≤ÊñôÊ∏ÖÈô§")); //"Press button to filament purge"
     LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_2_LINE("Á≠âÂæÖÂàóÂç∞", "ÊÅ¢Âæ©")); // "Wait for print to resume"
-  #else // LCD_HEIGHT < 4
-    LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_1_LINE("Êåâ‰∏ãÁπºÁ∫å..")); // "Click to continue"
-    LSTR MSG_PAUSE_PRINT_PARKING          = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ...")); // "Parking..."
-    LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_1_LINE("Ë´ãÁ≠âÂæÖ ...")); // "Please wait..."
-    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_1_LINE("ÊèíÂÖ•‰∏¶ÈªûÊìä")); // "Insert and Click"
-    LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂä†ÁÜ±..")); // "Click to heat"
-    LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_1_LINE("Âä†ÁÜ±‰∏≠ ...")); // "Heating..."
-    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_1_LINE("ÈÄÄÂá∫‰∏≠ ...")); // "Ejecting..."
-    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_1_LINE("ËºâÂÖ•‰∏≠ ...")); // "Loading..."
-    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_1_LINE("Ê∏ÖÈô§‰∏≠ ...")); // "Purging..."
-    LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂÆåÊàê..")); // "Click to finish"
-    LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_1_LINE("ÊÅ¢Âæ©‰∏≠ ...")); // "Resuming..."
-  #endif // LCD_HEIGHT < 4
+  #endif
+}
 
-  LSTR MSG_SHORT_DAY                      = _UxGT("Â§©"); // "d" // One character only
-  LSTR MSG_SHORT_HOUR                     = _UxGT("ÊôÇ"); // "h" // One character only
-  LSTR MSG_SHORT_MINUTE                   = _UxGT("ÂàÜ"); // "m" // One character only
+namespace Language_zh_TW {
+  using namespace LanguageTall_zh_TW;
 }

commit 154e48ba22ceedb01e9058a7f8da9457a445ee19
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri May 26 18:54:50 2023 -0500

    üé® Misc. spacing

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 9365225cae..968ad4424e 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -28,87 +28,87 @@
  * See also https://marlinfw.org/docs/development/lcd_language.html
  */
 namespace Language_zh_TW {
-  using namespace Language_en;  // Inherit undefined strings from English
+  using namespace Language_en; // Inherit undefined strings from English
 
   constexpr uint8_t CHARSIZE              = 3;
   LSTR LANGUAGE                           = _UxGT("Traditional Chinese");
 
-  LSTR WELCOME_MSG                        = MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.");     // " ready."
-  LSTR MSG_YES                            = _UxGT("ÊòØ");  // "YES"
-  LSTR MSG_NO                             = _UxGT("Âê¶");  // "NO"
-  LSTR MSG_BACK                           = _UxGT("ËøîÂõû");     // "Back"
-  LSTR MSG_MEDIA_ABORTING                 = _UxGT("Ê≠£Âú®‰∏≠Ê≠¢...");   // "Aborting..."
-  LSTR MSG_MEDIA_INSERTED                 = _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•");     // "Card inserted"
-  LSTR MSG_MEDIA_REMOVED                  = _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫");     // "Card removed"
-  LSTR MSG_MEDIA_WAITING                  = _UxGT("Á≠âÂæÖË®òÊÜ∂Âç°");    // "Waiting for media"
+  LSTR WELCOME_MSG                        = MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í."); // " ready."
+  LSTR MSG_YES                            = _UxGT("ÊòØ"); // "YES"
+  LSTR MSG_NO                             = _UxGT("Âê¶"); // "NO"
+  LSTR MSG_BACK                           = _UxGT("ËøîÂõû"); // "Back"
+  LSTR MSG_MEDIA_ABORTING                 = _UxGT("Ê≠£Âú®‰∏≠Ê≠¢..."); // "Aborting..."
+  LSTR MSG_MEDIA_INSERTED                 = _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•"); // "Card inserted"
+  LSTR MSG_MEDIA_REMOVED                  = _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫"); // "Card removed"
+  LSTR MSG_MEDIA_WAITING                  = _UxGT("Á≠âÂæÖË®òÊÜ∂Âç°"); // "Waiting for media"
   LSTR MSG_MEDIA_READ_ERROR               = _UxGT("Ë®òÊÜ∂Âç°ËÆÄÂèñÈåØË™§"); //"Media read error"
-  LSTR MSG_MEDIA_USB_REMOVED              = _UxGT("USBË£ùÁΩÆÂ∑≤ÁßªÈô§");   // "USB device removed"
-  LSTR MSG_MEDIA_USB_FAILED               = _UxGT("USBÂïüÂãïÂ§±Êïó");  // "USB start failed"
-  LSTR MSG_LCD_ENDSTOPS                   = _UxGT("ÊìãÂ°ä");     // "Endstops" // Max length 8 characters
-  LSTR MSG_LCD_SOFT_ENDSTOPS              = _UxGT("ËªüÈ´îÊìãÂ°ä");    // "Soft Endstops"
-  LSTR MSG_MAIN_MENU                      = _UxGT("‰∏ªÈÅ∏ÂñÆ");     // "Main"
-  LSTR MSG_ADVANCED_SETTINGS              = _UxGT("ÈÄ≤ÈöéË®≠ÁΩÆ");   // "Advanced Settings"
-  LSTR MSG_CONFIGURATION                  = _UxGT("Ë®≠ÁΩÆ");    //Configuration
-  LSTR MSG_RUN_AUTO_FILES                 = _UxGT("Ëá™ÂãïÈñãÂßã");     // "Autostart"
-  LSTR MSG_DISABLE_STEPPERS               = _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È¶¨ÈÅî");     // "Disable steppers"
-  LSTR MSG_DEBUG_MENU                     = _UxGT("Èô§ÈåØÈÅ∏ÂñÆ");     // "Debug Menu"
-  LSTR MSG_PROGRESS_BAR_TEST              = _UxGT("ÈÄ≤Â∫¶Ê¢ùÊ∏¨Ë©¶");     // "Progress Bar Test"
-  LSTR MSG_AUTO_HOME                      = _UxGT("Ëá™ÂãïÂõûÂéüÈªû");     // "Auto home"
-  LSTR MSG_AUTO_HOME_X                    = _UxGT("ÂõûXÂéüÈªû");     // "Home X"
-  LSTR MSG_AUTO_HOME_Y                    = _UxGT("ÂõûYÂéüÈªû");     // "Home Y"
-  LSTR MSG_AUTO_HOME_Z                    = _UxGT("ÂõûZÂéüÈªû");     // "Home Z"
-  LSTR MSG_AUTO_Z_ALIGN                   = _UxGT("Ëá™ÂãïZÂ∞çÈΩä");   // "Auto Z-Align"
-  LSTR MSG_LEVEL_BED_HOMING               = _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏ÂéüÈªû");     // "Homing XYZ"
-  LSTR MSG_LEVEL_BED_WAITING              = _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥");     // "Click to Begin"
-  LSTR MSG_LEVEL_BED_NEXT_POINT           = _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû");     // "Next Point"
-  LSTR MSG_LEVEL_BED_DONE                 = _UxGT("ÂÆåÊàêÁÜ±Â∫äË™øÂπ≥");     // "Leveling Done!"
-  LSTR MSG_Z_FADE_HEIGHT                  = _UxGT("Ê∑°Âá∫È´òÂ∫¶");     // "Fade Height"
-  LSTR MSG_SET_HOME_OFFSETS               = _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª");     // "Set home offsets"
-  LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®");     // "Offsets applied"
+  LSTR MSG_MEDIA_USB_REMOVED              = _UxGT("USBË£ùÁΩÆÂ∑≤ÁßªÈô§"); // "USB device removed"
+  LSTR MSG_MEDIA_USB_FAILED               = _UxGT("USBÂïüÂãïÂ§±Êïó"); // "USB start failed"
+  LSTR MSG_LCD_ENDSTOPS                   = _UxGT("ÊìãÂ°ä"); // "Endstops" // Max length 8 characters
+  LSTR MSG_LCD_SOFT_ENDSTOPS              = _UxGT("ËªüÈ´îÊìãÂ°ä"); // "Soft Endstops"
+  LSTR MSG_MAIN_MENU                      = _UxGT("‰∏ªÈÅ∏ÂñÆ"); // "Main"
+  LSTR MSG_ADVANCED_SETTINGS              = _UxGT("ÈÄ≤ÈöéË®≠ÁΩÆ"); // "Advanced Settings"
+  LSTR MSG_CONFIGURATION                  = _UxGT("Ë®≠ÁΩÆ"); //Configuration
+  LSTR MSG_RUN_AUTO_FILES                 = _UxGT("Ëá™ÂãïÈñãÂßã"); // "Autostart"
+  LSTR MSG_DISABLE_STEPPERS               = _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È¶¨ÈÅî"); // "Disable steppers"
+  LSTR MSG_DEBUG_MENU                     = _UxGT("Èô§ÈåØÈÅ∏ÂñÆ"); // "Debug Menu"
+  LSTR MSG_PROGRESS_BAR_TEST              = _UxGT("ÈÄ≤Â∫¶Ê¢ùÊ∏¨Ë©¶"); // "Progress Bar Test"
+  LSTR MSG_AUTO_HOME                      = _UxGT("Ëá™ÂãïÂõûÂéüÈªû"); // "Auto home"
+  LSTR MSG_AUTO_HOME_X                    = _UxGT("ÂõûXÂéüÈªû"); // "Home X"
+  LSTR MSG_AUTO_HOME_Y                    = _UxGT("ÂõûYÂéüÈªû"); // "Home Y"
+  LSTR MSG_AUTO_HOME_Z                    = _UxGT("ÂõûZÂéüÈªû"); // "Home Z"
+  LSTR MSG_AUTO_Z_ALIGN                   = _UxGT("Ëá™ÂãïZÂ∞çÈΩä"); // "Auto Z-Align"
+  LSTR MSG_LEVEL_BED_HOMING               = _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏ÂéüÈªû"); // "Homing XYZ"
+  LSTR MSG_LEVEL_BED_WAITING              = _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥"); // "Click to Begin"
+  LSTR MSG_LEVEL_BED_NEXT_POINT           = _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû"); // "Next Point"
+  LSTR MSG_LEVEL_BED_DONE                 = _UxGT("ÂÆåÊàêÁÜ±Â∫äË™øÂπ≥"); // "Leveling Done!"
+  LSTR MSG_Z_FADE_HEIGHT                  = _UxGT("Ê∑°Âá∫È´òÂ∫¶"); // "Fade Height"
+  LSTR MSG_SET_HOME_OFFSETS               = _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª"); // "Set home offsets"
+  LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®"); // "Offsets applied"
   #if HAS_PREHEAT
-    LSTR MSG_PREHEAT_1                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL;     // "Preheat PREHEAT_1_LABEL"
-    LSTR MSG_PREHEAT_1_H                  = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~";     // "Preheat PREHEAT_1_LABEL"
-    LSTR MSG_PREHEAT_1_END                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥");     //MSG_PREHEAT_1 " "
-    LSTR MSG_PREHEAT_1_END_E              = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ~");   //MSG_PREHEAT_1 " "
-    LSTR MSG_PREHEAT_1_ALL                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
-    LSTR MSG_PREHEAT_1_BEDONLY            = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
-    LSTR MSG_PREHEAT_1_SETTINGS           = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
+    LSTR MSG_PREHEAT_1                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL; // "Preheat PREHEAT_1_LABEL"
+    LSTR MSG_PREHEAT_1_H                  = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~"; // "Preheat PREHEAT_1_LABEL"
+    LSTR MSG_PREHEAT_1_END                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥"); //MSG_PREHEAT_1 " "
+    LSTR MSG_PREHEAT_1_END_E              = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ~"); //MSG_PREHEAT_1 " "
+    LSTR MSG_PREHEAT_1_ALL                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÂÖ®ÈÉ®"); //MSG_PREHEAT_1 " All"
+    LSTR MSG_PREHEAT_1_BEDONLY            = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÁÜ±Â∫ä"); //MSG_PREHEAT_1 " Bed"
+    LSTR MSG_PREHEAT_1_SETTINGS           = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Ë®≠ÁΩÆ"); //MSG_PREHEAT_1 " conf"
 
-    LSTR MSG_PREHEAT_M                    = _UxGT("È†êÁÜ± $");     // "Preheat PREHEAT_1_LABEL"
-    LSTR MSG_PREHEAT_M_H                  = _UxGT("È†êÁÜ± $ ~");     // "Preheat PREHEAT_1_LABEL"
-    LSTR MSG_PREHEAT_M_END                = _UxGT("È†êÁÜ± $ Âô¥Âò¥");     //MSG_PREHEAT_1 " "
-    LSTR MSG_PREHEAT_M_END_E              = _UxGT("È†êÁÜ± $ Âô¥Âò¥ ~");   //MSG_PREHEAT_1 " "
-    LSTR MSG_PREHEAT_M_ALL                = _UxGT("È†êÁÜ± $ ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
-    LSTR MSG_PREHEAT_M_BEDONLY            = _UxGT("È†êÁÜ± $ ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
-    LSTR MSG_PREHEAT_M_SETTINGS           = _UxGT("È†êÁÜ± $ Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
+    LSTR MSG_PREHEAT_M                    = _UxGT("È†êÁÜ± $"); // "Preheat PREHEAT_1_LABEL"
+    LSTR MSG_PREHEAT_M_H                  = _UxGT("È†êÁÜ± $ ~"); // "Preheat PREHEAT_1_LABEL"
+    LSTR MSG_PREHEAT_M_END                = _UxGT("È†êÁÜ± $ Âô¥Âò¥"); //MSG_PREHEAT_1 " "
+    LSTR MSG_PREHEAT_M_END_E              = _UxGT("È†êÁÜ± $ Âô¥Âò¥ ~"); //MSG_PREHEAT_1 " "
+    LSTR MSG_PREHEAT_M_ALL                = _UxGT("È†êÁÜ± $ ÂÖ®ÈÉ®"); //MSG_PREHEAT_1 " All"
+    LSTR MSG_PREHEAT_M_BEDONLY            = _UxGT("È†êÁÜ± $ ÁÜ±Â∫ä"); //MSG_PREHEAT_1 " Bed"
+    LSTR MSG_PREHEAT_M_SETTINGS           = _UxGT("È†êÁÜ± $ Ë®≠ÁΩÆ"); //MSG_PREHEAT_1 " conf"
   #endif
-  LSTR MSG_PREHEAT_CUSTOM                 = _UxGT("Ëá™ÂÆöÈ†êÁÜ±");   // "Preheat Custom"
-  LSTR MSG_COOLDOWN                       = _UxGT("ÈôçÊ∫´");     // "Cooldown"
-  LSTR MSG_LASER_MENU                     = _UxGT("ÊøÄÂÖâÊéßÂà∂");    // "Laser Control"
-  LSTR MSG_LASER_POWER                    = _UxGT("ÊøÄÂÖâÈõªÊ∫ê");    // "Laser Power"
-  LSTR MSG_SPINDLE_MENU                   = _UxGT("‰∏ªËª∏ÊéßÂëäÂà∂");    // "Spindle Control"
-  LSTR MSG_SPINDLE_POWER                  = _UxGT("‰∏ªËª∏ÈõªÊ∫ê");    // "Spindle Power"
-  LSTR MSG_SPINDLE_REVERSE                = _UxGT("‰∏ªËª∏ÂèçËΩâ");  // "Spindle Reverse"
-  LSTR MSG_SWITCH_PS_ON                   = _UxGT("ÈõªÊ∫êÊâìÈñã");     // "Switch power on"
-  LSTR MSG_SWITCH_PS_OFF                  = _UxGT("ÈõªÊ∫êÈóúÈñâ");     // "Switch power off"
-  LSTR MSG_EXTRUDE                        = _UxGT("Êì†Âá∫");     // "Extrude"
-  LSTR MSG_RETRACT                        = _UxGT("ÂõûÁ∏Æ");     // "Retract"
-  LSTR MSG_MOVE_AXIS                      = _UxGT("ÁßªÂãïËª∏");     // "Move axis"
-  LSTR MSG_BED_LEVELING                   = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     // "Bed leveling"
-  LSTR MSG_LEVEL_BED                      = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     // "Level bed"
-  LSTR MSG_BED_TRAMMING                   = _UxGT("Ë™øÂπ≥ÈÇäËßí");     // "Bed Tramming"
-  LSTR MSG_NEXT_CORNER                    = _UxGT("‰∏ãÂÄãÈÇäËßí");     // "Next corner"
-  LSTR MSG_MESH_EDITOR                    = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂô®");    // "Mesh Editor"
-  LSTR MSG_EDIT_MESH                      = _UxGT("Á∑®ËºØÁ∂≤Ê†º");     // "Edit Mesh"
-  LSTR MSG_EDITING_STOPPED                = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂ∑≤ÂÅúÊ≠¢");     // "Mesh Editing Stopped"
-  LSTR MSG_PROBING_POINT                  = _UxGT("Êé¢Ê∏¨Èªû");   // "Probing Point"
-  LSTR MSG_MESH_X                         = _UxGT("Á¥¢Âºï X");    // "Index X"
-  LSTR MSG_MESH_Y                         = _UxGT("Á¥¢Âºï Y");    // "Index Y"
-  LSTR MSG_MESH_EDIT_Z                    = _UxGT("Z ÂÄº");    // "Z Value"
-  LSTR MSG_CUSTOM_COMMANDS                = _UxGT("Ëá™ÂÆöÂëΩ‰ª§");     // "Custom Commands"
-  LSTR MSG_M48_TEST                       = _UxGT("M48 Êé¢Ê∏¨Ê∏¨Ë©¶");   // "M48 Probe Test"
-  LSTR MSG_M48_POINT                      = _UxGT("M48 Êé¢Ê∏¨Èªû");    // "M48 Point"
-  LSTR MSG_M48_DEVIATION                  = _UxGT("ÂÅèÂ∑Æ");    // "Deviation"
+  LSTR MSG_PREHEAT_CUSTOM                 = _UxGT("Ëá™ÂÆöÈ†êÁÜ±"); // "Preheat Custom"
+  LSTR MSG_COOLDOWN                       = _UxGT("ÈôçÊ∫´"); // "Cooldown"
+  LSTR MSG_LASER_MENU                     = _UxGT("ÊøÄÂÖâÊéßÂà∂"); // "Laser Control"
+  LSTR MSG_LASER_POWER                    = _UxGT("ÊøÄÂÖâÈõªÊ∫ê"); // "Laser Power"
+  LSTR MSG_SPINDLE_MENU                   = _UxGT("‰∏ªËª∏ÊéßÂëäÂà∂"); // "Spindle Control"
+  LSTR MSG_SPINDLE_POWER                  = _UxGT("‰∏ªËª∏ÈõªÊ∫ê"); // "Spindle Power"
+  LSTR MSG_SPINDLE_REVERSE                = _UxGT("‰∏ªËª∏ÂèçËΩâ"); // "Spindle Reverse"
+  LSTR MSG_SWITCH_PS_ON                   = _UxGT("ÈõªÊ∫êÊâìÈñã"); // "Switch power on"
+  LSTR MSG_SWITCH_PS_OFF                  = _UxGT("ÈõªÊ∫êÈóúÈñâ"); // "Switch power off"
+  LSTR MSG_EXTRUDE                        = _UxGT("Êì†Âá∫"); // "Extrude"
+  LSTR MSG_RETRACT                        = _UxGT("ÂõûÁ∏Æ"); // "Retract"
+  LSTR MSG_MOVE_AXIS                      = _UxGT("ÁßªÂãïËª∏"); // "Move axis"
+  LSTR MSG_BED_LEVELING                   = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä"); // "Bed leveling"
+  LSTR MSG_LEVEL_BED                      = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä"); // "Level bed"
+  LSTR MSG_BED_TRAMMING                   = _UxGT("Ë™øÂπ≥ÈÇäËßí"); // "Bed Tramming"
+  LSTR MSG_NEXT_CORNER                    = _UxGT("‰∏ãÂÄãÈÇäËßí"); // "Next corner"
+  LSTR MSG_MESH_EDITOR                    = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂô®"); // "Mesh Editor"
+  LSTR MSG_EDIT_MESH                      = _UxGT("Á∑®ËºØÁ∂≤Ê†º"); // "Edit Mesh"
+  LSTR MSG_EDITING_STOPPED                = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂ∑≤ÂÅúÊ≠¢"); // "Mesh Editing Stopped"
+  LSTR MSG_PROBING_POINT                  = _UxGT("Êé¢Ê∏¨Èªû"); // "Probing Point"
+  LSTR MSG_MESH_X                         = _UxGT("Á¥¢Âºï X"); // "Index X"
+  LSTR MSG_MESH_Y                         = _UxGT("Á¥¢Âºï Y"); // "Index Y"
+  LSTR MSG_MESH_EDIT_Z                    = _UxGT("Z ÂÄº"); // "Z Value"
+  LSTR MSG_CUSTOM_COMMANDS                = _UxGT("Ëá™ÂÆöÂëΩ‰ª§"); // "Custom Commands"
+  LSTR MSG_M48_TEST                       = _UxGT("M48 Êé¢Ê∏¨Ê∏¨Ë©¶"); // "M48 Probe Test"
+  LSTR MSG_M48_POINT                      = _UxGT("M48 Êé¢Ê∏¨Èªû"); // "M48 Point"
+  LSTR MSG_M48_DEVIATION                  = _UxGT("ÂÅèÂ∑Æ"); // "Deviation"
   LSTR MSG_IDEX_MENU                      = _UxGT("IDEX Mode");
   LSTR MSG_OFFSETS_MENU                   = _UxGT("Tool Offsets");
   LSTR MSG_IDEX_MODE_AUTOPARK             = _UxGT("Auto-Park");
@@ -117,75 +117,75 @@ namespace Language_zh_TW {
   LSTR MSG_IDEX_MODE_FULL_CTRL            = _UxGT("Full Control");
   LSTR MSG_HOTEND_OFFSET_Z                = _UxGT("2nd Nozzle Z");
   LSTR MSG_HOTEND_OFFSET_A                = _UxGT("2nd Nozzle @");
-  LSTR MSG_UBL_DOING_G29                  = _UxGT("Âü∑Ë°åG29");     // "Doing G29"
-  LSTR MSG_UBL_TOOLS                      = _UxGT("UBLÂ∑•ÂÖ∑");     // "UBL Tools"
-  LSTR MSG_UBL_LEVEL_BED                  = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"
-  LSTR MSG_LCD_TILTING_MESH               = _UxGT("ÂÇæÊñúÈªû");  // "Tilting Point"
-  LSTR MSG_UBL_MANUAL_MESH                = _UxGT("ÊâãÂ∑•Âª∫Á∂≤");     // "Manually Build Mesh"
-  LSTR MSG_UBL_BC_INSERT                  = _UxGT("ÊîæÁΩÆÂ¢äÁâá‰∏¶Ê∏¨Èáè");     // "Place shim & measure"
-  LSTR MSG_UBL_BC_INSERT2                 = _UxGT("Ê∏¨Èáè");     // "Measure"
-  LSTR MSG_UBL_BC_REMOVE                  = _UxGT("ÁßªÈô§‰∏¶Ê∏¨ÈáèÁÜ±Â∫ä");     // "Remove & measure bed"
-  LSTR MSG_UBL_MOVING_TO_NEXT             = _UxGT("ÁßªÂãïÂà∞‰∏ã‰∏ÄÂÄã");     // "Moving to next"
-  LSTR MSG_UBL_ACTIVATE_MESH              = _UxGT("ÂïüÂãïUBL");     // "Activate UBL"
-  LSTR MSG_UBL_DEACTIVATE_MESH            = _UxGT("ÈóúÈñâUBL");     // "Deactivate UBL"
-  LSTR MSG_UBL_SET_TEMP_BED               = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");     // "Bed Temp"
-  LSTR MSG_UBL_BED_TEMP_CUSTOM            = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");    // "Bed Temp"
-  LSTR MSG_UBL_SET_TEMP_HOTEND            = _UxGT("ÁΩÆË®≠Âô¥Âò¥Ê∫´Â∫¶");     // "Hotend Temp"
-  LSTR MSG_UBL_HOTEND_TEMP_CUSTOM         = _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶");    // "Hotend Temp"
-  LSTR MSG_UBL_MESH_EDIT                  = _UxGT("Á∂≤Ê†ºÁ∑®ËºØ");     // "Mesh Edit"
-  LSTR MSG_UBL_EDIT_CUSTOM_MESH           = _UxGT("Á∑®ËºØÂÆ¢Êà∂Á∂≤Ê†º");     // "Edit Custom Mesh"
-  LSTR MSG_UBL_FINE_TUNE_MESH             = _UxGT("Á¥∞Ë™øÁ∂≤Ê†º");     // "Fine Tuning Mesh"
-  LSTR MSG_UBL_DONE_EDITING_MESH          = _UxGT("ÂÆåÊàêÁ∑®ËºØÁ∂≤Ê†º");     // "Done Editing Mesh"
-  LSTR MSG_UBL_BUILD_CUSTOM_MESH          = _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º");     // "Build Custom Mesh"
-  LSTR MSG_UBL_BUILD_MESH_MENU            = _UxGT("ÂâµË®≠Á∂≤Ê†º");     // "Build Mesh"
+  LSTR MSG_UBL_DOING_G29                  = _UxGT("Âü∑Ë°åG29"); // "Doing G29"
+  LSTR MSG_UBL_TOOLS                      = _UxGT("UBLÂ∑•ÂÖ∑"); // "UBL Tools"
+  LSTR MSG_UBL_LEVEL_BED                  = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)"); // "Unified Bed Leveling"
+  LSTR MSG_LCD_TILTING_MESH               = _UxGT("ÂÇæÊñúÈªû"); // "Tilting Point"
+  LSTR MSG_UBL_MANUAL_MESH                = _UxGT("ÊâãÂ∑•Âª∫Á∂≤"); // "Manually Build Mesh"
+  LSTR MSG_UBL_BC_INSERT                  = _UxGT("ÊîæÁΩÆÂ¢äÁâá‰∏¶Ê∏¨Èáè"); // "Place shim & measure"
+  LSTR MSG_UBL_BC_INSERT2                 = _UxGT("Ê∏¨Èáè"); // "Measure"
+  LSTR MSG_UBL_BC_REMOVE                  = _UxGT("ÁßªÈô§‰∏¶Ê∏¨ÈáèÁÜ±Â∫ä"); // "Remove & measure bed"
+  LSTR MSG_UBL_MOVING_TO_NEXT             = _UxGT("ÁßªÂãïÂà∞‰∏ã‰∏ÄÂÄã"); // "Moving to next"
+  LSTR MSG_UBL_ACTIVATE_MESH              = _UxGT("ÂïüÂãïUBL"); // "Activate UBL"
+  LSTR MSG_UBL_DEACTIVATE_MESH            = _UxGT("ÈóúÈñâUBL"); // "Deactivate UBL"
+  LSTR MSG_UBL_SET_TEMP_BED               = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶"); // "Bed Temp"
+  LSTR MSG_UBL_BED_TEMP_CUSTOM            = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶"); // "Bed Temp"
+  LSTR MSG_UBL_SET_TEMP_HOTEND            = _UxGT("ÁΩÆË®≠Âô¥Âò¥Ê∫´Â∫¶"); // "Hotend Temp"
+  LSTR MSG_UBL_HOTEND_TEMP_CUSTOM         = _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶"); // "Hotend Temp"
+  LSTR MSG_UBL_MESH_EDIT                  = _UxGT("Á∂≤Ê†ºÁ∑®ËºØ"); // "Mesh Edit"
+  LSTR MSG_UBL_EDIT_CUSTOM_MESH           = _UxGT("Á∑®ËºØÂÆ¢Êà∂Á∂≤Ê†º"); // "Edit Custom Mesh"
+  LSTR MSG_UBL_FINE_TUNE_MESH             = _UxGT("Á¥∞Ë™øÁ∂≤Ê†º"); // "Fine Tuning Mesh"
+  LSTR MSG_UBL_DONE_EDITING_MESH          = _UxGT("ÂÆåÊàêÁ∑®ËºØÁ∂≤Ê†º"); // "Done Editing Mesh"
+  LSTR MSG_UBL_BUILD_CUSTOM_MESH          = _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º"); // "Build Custom Mesh"
+  LSTR MSG_UBL_BUILD_MESH_MENU            = _UxGT("ÂâµË®≠Á∂≤Ê†º"); // "Build Mesh"
   #if HAS_PREHEAT
-    LSTR MSG_UBL_BUILD_MESH_M             = _UxGT("ÂâµË®≠ $ Á∂≤Ê†º");     // "Build PREHEAT_1_LABEL Mesh"
-    LSTR MSG_UBL_VALIDATE_MESH_M          = _UxGT("ÊâπÂáÜ $ Á∂≤Ê†º");     // "Validate PREHEAT_1_LABEL Mesh"
+    LSTR MSG_UBL_BUILD_MESH_M             = _UxGT("ÂâµË®≠ $ Á∂≤Ê†º"); // "Build PREHEAT_1_LABEL Mesh"
+    LSTR MSG_UBL_VALIDATE_MESH_M          = _UxGT("ÊâπÂáÜ $ Á∂≤Ê†º"); // "Validate PREHEAT_1_LABEL Mesh"
   #endif
-  LSTR MSG_UBL_BUILD_COLD_MESH            = _UxGT("ÂâµË®≠ÂÜ∑Á∂≤Ê†º");     // "Build Cold Mesh"
-  LSTR MSG_UBL_MESH_HEIGHT_ADJUST         = _UxGT("Ë™øÊï¥Á∂≤Ê†ºÈ´òÂ∫¶");     // "Adjust Mesh Height"
-  LSTR MSG_UBL_MESH_HEIGHT_AMOUNT         = _UxGT("È´òÂ∫¶ÂêàË®à");     // "Height Amount"
-  LSTR MSG_UBL_VALIDATE_MESH_MENU         = _UxGT("ÊâπÂáÜÁ∂≤Ê†º");     // "Validate Mesh"
-  LSTR MSG_UBL_VALIDATE_CUSTOM_MESH       = _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º");     // "Validate Custom Mesh"
-  LSTR MSG_G26_HEATING_BED                = _UxGT("G26 Âä†ÁÜ±ÁÜ±Â∫ä");    // "G26 Heating Bed"
+  LSTR MSG_UBL_BUILD_COLD_MESH            = _UxGT("ÂâµË®≠ÂÜ∑Á∂≤Ê†º"); // "Build Cold Mesh"
+  LSTR MSG_UBL_MESH_HEIGHT_ADJUST         = _UxGT("Ë™øÊï¥Á∂≤Ê†ºÈ´òÂ∫¶"); // "Adjust Mesh Height"
+  LSTR MSG_UBL_MESH_HEIGHT_AMOUNT         = _UxGT("È´òÂ∫¶ÂêàË®à"); // "Height Amount"
+  LSTR MSG_UBL_VALIDATE_MESH_MENU         = _UxGT("ÊâπÂáÜÁ∂≤Ê†º"); // "Validate Mesh"
+  LSTR MSG_UBL_VALIDATE_CUSTOM_MESH       = _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º"); // "Validate Custom Mesh"
+  LSTR MSG_G26_HEATING_BED                = _UxGT("G26 Âä†ÁÜ±ÁÜ±Â∫ä"); // "G26 Heating Bed"
   LSTR MSG_G26_HEATING_NOZZLE             = _UxGT("G26 Âä†ÁÜ±Âô¥Âò¥"); //"G26 Heating Nozzle"
-  LSTR MSG_G26_MANUAL_PRIME               = _UxGT("ÊâãÂãïÂ°´Ë£ù");  // "Manual priming..."
-  LSTR MSG_G26_FIXED_LENGTH               = _UxGT("Âõ∫ÂÆöË∑ùÈõ¢Â°´Ë£ù");   // "Fixed Length Prime"
-  LSTR MSG_G26_PRIME_DONE                 = _UxGT("ÂÆåÊàêÂ°´Ë£ù");   // "Done Priming"
-  LSTR MSG_G26_CANCELED                   = _UxGT("G26Â∑≤ÂèñÊ∂à");   // "G26 Canceled"
-  LSTR MSG_G26_LEAVING                    = _UxGT("Èõ¢Èñã G26");  // "Leaving G26"
-  LSTR MSG_UBL_CONTINUE_MESH              = _UxGT("ÁπºÁ∫åÁÜ±Â∫äÁ∂≤Ê†º");     // "Continue Bed Mesh"
-  LSTR MSG_UBL_MESH_LEVELING              = _UxGT("Á∂≤Ê†ºË™øÂπ≥");     // "Mesh Leveling"
-  LSTR MSG_UBL_3POINT_MESH_LEVELING       = _UxGT("‰∏âÈªûË™øÂπ≥");     // "3-Point Leveling"
-  LSTR MSG_UBL_GRID_MESH_LEVELING         = _UxGT("Ê†ºÂ≠êÁ∂≤Ê†ºË™øÂπ≥");     // "Grid Mesh Leveling"
-  LSTR MSG_UBL_MESH_LEVEL                 = _UxGT("Ë™øÂπ≥Á∂≤Ê†º");     // "Level Mesh"
-  LSTR MSG_UBL_SIDE_POINTS                = _UxGT("ÈÇäÈªû");     // "Side Points"
-  LSTR MSG_UBL_MAP_TYPE                   = _UxGT("ÂúñÈ°ûÂûã");     // "Map Type"
-  LSTR MSG_UBL_OUTPUT_MAP                 = _UxGT("Ëº∏Âá∫Á∂≤Ê†ºÂúñ");     // "Output Mesh Map"
-  LSTR MSG_UBL_OUTPUT_MAP_HOST            = _UxGT("Ëº∏Âá∫Âà∞‰∏ªÊ©ü");     // "Output for Host"
-  LSTR MSG_UBL_OUTPUT_MAP_CSV             = _UxGT("Ëº∏Âá∫Âà∞CSV");     // "Output for CSV"
-  LSTR MSG_UBL_OUTPUT_MAP_BACKUP          = _UxGT("Ëº∏Âá∫Âà∞ÂÇô‰ªΩ");     // "Off Printer Backup"
-  LSTR MSG_UBL_INFO_UBL                   = _UxGT("Ëº∏Âá∫UBL‰ø°ÊÅØ");     // "Output UBL Info"
-  LSTR MSG_UBL_FILLIN_AMOUNT              = _UxGT("Â°´ÂÖÖÂêàË®à");     // "Fill-in Amount"
-  LSTR MSG_UBL_MANUAL_FILLIN              = _UxGT("ÊâãÂ∑•Â°´ÂÖÖ");     // "Manual Fill-in"
-  LSTR MSG_UBL_SMART_FILLIN               = _UxGT("ËÅ∞ÊòéÂ°´ÂÖÖ");     // "Smart Fill-in"
-  LSTR MSG_UBL_FILLIN_MESH                = _UxGT("Â°´ÂÖÖÁ∂≤Ê†º");     // "Fill-in Mesh"
-  LSTR MSG_UBL_INVALIDATE_ALL             = _UxGT("‰ΩúÂª¢ÊâÄÊúâÁöÑ");     // "Invalidate All"
-  LSTR MSG_UBL_INVALIDATE_CLOSEST         = _UxGT("‰ΩúÂª¢ÊúÄËøëÁöÑ");     // "Invalidate Closest"
-  LSTR MSG_UBL_FINE_TUNE_ALL              = _UxGT("Á¥∞Ë™øÊâÄÊúâÁöÑ");     // "Fine Tune All"
-  LSTR MSG_UBL_FINE_TUNE_CLOSEST          = _UxGT("Á¥∞Ë™øÊúÄËøëÁöÑ");     // "Fine Tune Closest"
-  LSTR MSG_UBL_STORAGE_MESH_MENU          = _UxGT("Á∂≤Ê†ºÂ≠òÂÑ≤");     // "Mesh Storage"
-  LSTR MSG_UBL_STORAGE_SLOT               = _UxGT("Â≠òÂÑ≤ÊßΩ");     // "Memory Slot"
-  LSTR MSG_UBL_LOAD_MESH                  = _UxGT("Ë£ùËºâÁÜ±Â∫äÁ∂≤Ê†º");     // "Load Bed Mesh"
-  LSTR MSG_UBL_SAVE_MESH                  = _UxGT("‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º");     // "Save Bed Mesh"
-  LSTR MSG_MESH_LOADED                    = _UxGT("Á∂≤Ê†º %i Â∑≤Ë£ùËºâ");     // "Mesh %i loaded"
-  LSTR MSG_MESH_SAVED                     = _UxGT("Á∂≤Ê†º %i Â∑≤‰øùÂ≠ò");     // "Mesh %i saved"
-  LSTR MSG_UBL_NO_STORAGE                 = _UxGT("Ê≤íÊúâÂ≠òÂÑ≤");     // "No storage"
-  LSTR MSG_UBL_SAVE_ERROR                 = _UxGT("ÈåØË™§: UBL‰øùÂ≠ò");     // "Err: UBL Save"
-  LSTR MSG_UBL_RESTORE_ERROR              = _UxGT("ÈåØË™§: UBLÈÇÑÂéü");     // "Err: UBL Restore"
-  LSTR MSG_UBL_Z_OFFSET                   = _UxGT("Z-ÂÅèÁßª:");   // "Z-Offset: "
-  LSTR MSG_UBL_Z_OFFSET_STOPPED           = _UxGT("ZÂÅèÁßªÂ∑≤ÂÅúÊ≠¢");     // "Z-Offset Stopped"
-  LSTR MSG_UBL_STEP_BY_STEP_MENU          = _UxGT("‰∏ÄÊ≠•Ê≠•UBL");     // "Step-By-Step UBL"
+  LSTR MSG_G26_MANUAL_PRIME               = _UxGT("ÊâãÂãïÂ°´Ë£ù"); // "Manual priming..."
+  LSTR MSG_G26_FIXED_LENGTH               = _UxGT("Âõ∫ÂÆöË∑ùÈõ¢Â°´Ë£ù"); // "Fixed Length Prime"
+  LSTR MSG_G26_PRIME_DONE                 = _UxGT("ÂÆåÊàêÂ°´Ë£ù"); // "Done Priming"
+  LSTR MSG_G26_CANCELED                   = _UxGT("G26Â∑≤ÂèñÊ∂à"); // "G26 Canceled"
+  LSTR MSG_G26_LEAVING                    = _UxGT("Èõ¢Èñã G26"); // "Leaving G26"
+  LSTR MSG_UBL_CONTINUE_MESH              = _UxGT("ÁπºÁ∫åÁÜ±Â∫äÁ∂≤Ê†º"); // "Continue Bed Mesh"
+  LSTR MSG_UBL_MESH_LEVELING              = _UxGT("Á∂≤Ê†ºË™øÂπ≥"); // "Mesh Leveling"
+  LSTR MSG_UBL_3POINT_MESH_LEVELING       = _UxGT("‰∏âÈªûË™øÂπ≥"); // "3-Point Leveling"
+  LSTR MSG_UBL_GRID_MESH_LEVELING         = _UxGT("Ê†ºÂ≠êÁ∂≤Ê†ºË™øÂπ≥"); // "Grid Mesh Leveling"
+  LSTR MSG_UBL_MESH_LEVEL                 = _UxGT("Ë™øÂπ≥Á∂≤Ê†º"); // "Level Mesh"
+  LSTR MSG_UBL_SIDE_POINTS                = _UxGT("ÈÇäÈªû"); // "Side Points"
+  LSTR MSG_UBL_MAP_TYPE                   = _UxGT("ÂúñÈ°ûÂûã"); // "Map Type"
+  LSTR MSG_UBL_OUTPUT_MAP                 = _UxGT("Ëº∏Âá∫Á∂≤Ê†ºÂúñ"); // "Output Mesh Map"
+  LSTR MSG_UBL_OUTPUT_MAP_HOST            = _UxGT("Ëº∏Âá∫Âà∞‰∏ªÊ©ü"); // "Output for Host"
+  LSTR MSG_UBL_OUTPUT_MAP_CSV             = _UxGT("Ëº∏Âá∫Âà∞CSV"); // "Output for CSV"
+  LSTR MSG_UBL_OUTPUT_MAP_BACKUP          = _UxGT("Ëº∏Âá∫Âà∞ÂÇô‰ªΩ"); // "Off Printer Backup"
+  LSTR MSG_UBL_INFO_UBL                   = _UxGT("Ëº∏Âá∫UBL‰ø°ÊÅØ"); // "Output UBL Info"
+  LSTR MSG_UBL_FILLIN_AMOUNT              = _UxGT("Â°´ÂÖÖÂêàË®à"); // "Fill-in Amount"
+  LSTR MSG_UBL_MANUAL_FILLIN              = _UxGT("ÊâãÂ∑•Â°´ÂÖÖ"); // "Manual Fill-in"
+  LSTR MSG_UBL_SMART_FILLIN               = _UxGT("ËÅ∞ÊòéÂ°´ÂÖÖ"); // "Smart Fill-in"
+  LSTR MSG_UBL_FILLIN_MESH                = _UxGT("Â°´ÂÖÖÁ∂≤Ê†º"); // "Fill-in Mesh"
+  LSTR MSG_UBL_INVALIDATE_ALL             = _UxGT("‰ΩúÂª¢ÊâÄÊúâÁöÑ"); // "Invalidate All"
+  LSTR MSG_UBL_INVALIDATE_CLOSEST         = _UxGT("‰ΩúÂª¢ÊúÄËøëÁöÑ"); // "Invalidate Closest"
+  LSTR MSG_UBL_FINE_TUNE_ALL              = _UxGT("Á¥∞Ë™øÊâÄÊúâÁöÑ"); // "Fine Tune All"
+  LSTR MSG_UBL_FINE_TUNE_CLOSEST          = _UxGT("Á¥∞Ë™øÊúÄËøëÁöÑ"); // "Fine Tune Closest"
+  LSTR MSG_UBL_STORAGE_MESH_MENU          = _UxGT("Á∂≤Ê†ºÂ≠òÂÑ≤"); // "Mesh Storage"
+  LSTR MSG_UBL_STORAGE_SLOT               = _UxGT("Â≠òÂÑ≤ÊßΩ"); // "Memory Slot"
+  LSTR MSG_UBL_LOAD_MESH                  = _UxGT("Ë£ùËºâÁÜ±Â∫äÁ∂≤Ê†º"); // "Load Bed Mesh"
+  LSTR MSG_UBL_SAVE_MESH                  = _UxGT("‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º"); // "Save Bed Mesh"
+  LSTR MSG_MESH_LOADED                    = _UxGT("Á∂≤Ê†º %i Â∑≤Ë£ùËºâ"); // "Mesh %i loaded"
+  LSTR MSG_MESH_SAVED                     = _UxGT("Á∂≤Ê†º %i Â∑≤‰øùÂ≠ò"); // "Mesh %i saved"
+  LSTR MSG_UBL_NO_STORAGE                 = _UxGT("Ê≤íÊúâÂ≠òÂÑ≤"); // "No storage"
+  LSTR MSG_UBL_SAVE_ERROR                 = _UxGT("ÈåØË™§: UBL‰øùÂ≠ò"); // "Err: UBL Save"
+  LSTR MSG_UBL_RESTORE_ERROR              = _UxGT("ÈåØË™§: UBLÈÇÑÂéü"); // "Err: UBL Restore"
+  LSTR MSG_UBL_Z_OFFSET                   = _UxGT("Z-ÂÅèÁßª:"); // "Z-Offset: "
+  LSTR MSG_UBL_Z_OFFSET_STOPPED           = _UxGT("ZÂÅèÁßªÂ∑≤ÂÅúÊ≠¢"); // "Z-Offset Stopped"
+  LSTR MSG_UBL_STEP_BY_STEP_MENU          = _UxGT("‰∏ÄÊ≠•Ê≠•UBL"); // "Step-By-Step UBL"
   LSTR MSG_UBL_1_BUILD_COLD_MESH          = _UxGT("1. ÂâµË®≠ÂÜ∑Á∂≤Ê†º");
   LSTR MSG_UBL_2_SMART_FILLIN             = _UxGT("2. ËÅ∞ÊòéÂ°´ÂÖÖ");
   LSTR MSG_UBL_3_VALIDATE_MESH_MENU       = _UxGT("3. ÊâπÂáÜÁ∂≤Ê†º");
@@ -194,269 +194,269 @@ namespace Language_zh_TW {
   LSTR MSG_UBL_6_FINE_TUNE_ALL            = _UxGT("6. Á¥∞Ë™øÊâÄÊúâÁöÑ");
   LSTR MSG_UBL_7_SAVE_MESH                = _UxGT("7. ‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º");
 
-  LSTR MSG_LED_CONTROL                    = _UxGT("ÁáàÁÆ°ÊéßÂà∂");     // "LED Control"
-  LSTR MSG_LEDS                           = _UxGT("Ááà");     // "Lights"
-  LSTR MSG_LED_PRESETS                    = _UxGT("ÁáàÈ†êÁΩÆ");     // "Light Presets"
-  LSTR MSG_SET_LEDS_RED                   = _UxGT("Á∫¢");     // "Red"
-  LSTR MSG_SET_LEDS_ORANGE                = _UxGT("Ê©ô");     // "Orange"
-  LSTR MSG_SET_LEDS_YELLOW                = _UxGT("ÈªÉ");     // "Yellow"
-  LSTR MSG_SET_LEDS_GREEN                 = _UxGT("Á∂†");     // "Green"
-  LSTR MSG_SET_LEDS_BLUE                  = _UxGT("Ëóç");     // "Blue"
-  LSTR MSG_SET_LEDS_INDIGO                = _UxGT("Èùí");     // "Indigo"
-  LSTR MSG_SET_LEDS_VIOLET                = _UxGT("Á¥´");     // "Violet"
-  LSTR MSG_SET_LEDS_WHITE                 = _UxGT("ÁôΩ");     // "White"
-  LSTR MSG_SET_LEDS_DEFAULT               = _UxGT("Âæ©Ê≠∏");     // "Default"
-  LSTR MSG_CUSTOM_LEDS                    = _UxGT("ÂÆöÂà∂Ááà");     // "Custom Lights"
-  LSTR MSG_INTENSITY_R                    = _UxGT("Á¥ÖÈ£ΩÂíåÂ∫¶");     // "Red Intensity"
-  LSTR MSG_INTENSITY_G                    = _UxGT("Á∂†È£ΩÂíåÂ∫¶");     // "Green Intensity"
-  LSTR MSG_INTENSITY_B                    = _UxGT("ËóçÈ£ΩÂíåÂ∫¶");     // "Blue Intensity"
-  LSTR MSG_INTENSITY_W                    = _UxGT("ÁôΩÈ£ΩÂíåÂ∫¶");     // "White Intensity"
-  LSTR MSG_LED_BRIGHTNESS                 = _UxGT("‰∫ÆÂ∫¶");     // "Brightness"
+  LSTR MSG_LED_CONTROL                    = _UxGT("ÁáàÁÆ°ÊéßÂà∂"); // "LED Control"
+  LSTR MSG_LEDS                           = _UxGT("Ááà"); // "Lights"
+  LSTR MSG_LED_PRESETS                    = _UxGT("ÁáàÈ†êÁΩÆ"); // "Light Presets"
+  LSTR MSG_SET_LEDS_RED                   = _UxGT("Á∫¢"); // "Red"
+  LSTR MSG_SET_LEDS_ORANGE                = _UxGT("Ê©ô"); // "Orange"
+  LSTR MSG_SET_LEDS_YELLOW                = _UxGT("ÈªÉ"); // "Yellow"
+  LSTR MSG_SET_LEDS_GREEN                 = _UxGT("Á∂†"); // "Green"
+  LSTR MSG_SET_LEDS_BLUE                  = _UxGT("Ëóç"); // "Blue"
+  LSTR MSG_SET_LEDS_INDIGO                = _UxGT("Èùí"); // "Indigo"
+  LSTR MSG_SET_LEDS_VIOLET                = _UxGT("Á¥´"); // "Violet"
+  LSTR MSG_SET_LEDS_WHITE                 = _UxGT("ÁôΩ"); // "White"
+  LSTR MSG_SET_LEDS_DEFAULT               = _UxGT("Âæ©Ê≠∏"); // "Default"
+  LSTR MSG_CUSTOM_LEDS                    = _UxGT("ÂÆöÂà∂Ááà"); // "Custom Lights"
+  LSTR MSG_INTENSITY_R                    = _UxGT("Á¥ÖÈ£ΩÂíåÂ∫¶"); // "Red Intensity"
+  LSTR MSG_INTENSITY_G                    = _UxGT("Á∂†È£ΩÂíåÂ∫¶"); // "Green Intensity"
+  LSTR MSG_INTENSITY_B                    = _UxGT("ËóçÈ£ΩÂíåÂ∫¶"); // "Blue Intensity"
+  LSTR MSG_INTENSITY_W                    = _UxGT("ÁôΩÈ£ΩÂíåÂ∫¶"); // "White Intensity"
+  LSTR MSG_LED_BRIGHTNESS                 = _UxGT("‰∫ÆÂ∫¶"); // "Brightness"
 
-  LSTR MSG_MOVING                         = _UxGT("ÁßªÂãï ...");     // "Moving..."
-  LSTR MSG_FREE_XY                        = _UxGT("ÈáãÊîæ XY");     // "Free XY"
-  LSTR MSG_MOVE_X                         = _UxGT("ÁßªÂãïX");     // "Move X"
-  LSTR MSG_MOVE_Y                         = _UxGT("ÁßªÂãïY");     // "Move Y"
-  LSTR MSG_MOVE_Z                         = _UxGT("ÁßªÂãïZ");     // "Move Z"
-  LSTR MSG_MOVE_N                         = _UxGT("ÁßªÂãïQ");     // "Move @"
-  LSTR MSG_MOVE_E                         = _UxGT("Êì†Âá∫Ê©ü");     // "Extruder"
-  LSTR MSG_MOVE_EN                        = _UxGT("Êì†Âá∫Ê©ü *");       // "Extruder *"
-  LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†");   // "Hotend too cold"
-  LSTR MSG_MOVE_N_MM                      = _UxGT("ÁßªÂãï $ mm");      // "Move 0.025mm"
-  LSTR MSG_MOVE_01MM                      = _UxGT("ÁßªÂãï 0.1 mm");    // "Move 0.1mm"
-  LSTR MSG_MOVE_1MM                       = _UxGT("ÁßªÂãï 1 mm");      // "Move 1mm"
-  LSTR MSG_MOVE_10MM                      = _UxGT("ÁßªÂãï 10 mm");     // "Move 10mm"
-  LSTR MSG_MOVE_50MM                      = _UxGT("ÁßªÂãï 50 mm");     // "Move 50mm"
-  LSTR MSG_MOVE_100MM                     = _UxGT("ÁßªÂãï 100 mm");    // "Move 100mm"
-  LSTR MSG_SPEED                          = _UxGT("ÈÄüÁéá");     // "Speed"
-  LSTR MSG_MESH_Z_OFFSET                  = _UxGT("ÁÜ±Â∫äZ");     // "Bed Z"
-  LSTR MSG_NOZZLE                         = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥");     // "Nozzle" Âô¥Âò¥
+  LSTR MSG_MOVING                         = _UxGT("ÁßªÂãï ..."); // "Moving..."
+  LSTR MSG_FREE_XY                        = _UxGT("ÈáãÊîæ XY"); // "Free XY"
+  LSTR MSG_MOVE_X                         = _UxGT("ÁßªÂãïX"); // "Move X"
+  LSTR MSG_MOVE_Y                         = _UxGT("ÁßªÂãïY"); // "Move Y"
+  LSTR MSG_MOVE_Z                         = _UxGT("ÁßªÂãïZ"); // "Move Z"
+  LSTR MSG_MOVE_N                         = _UxGT("ÁßªÂãïQ"); // "Move @"
+  LSTR MSG_MOVE_E                         = _UxGT("Êì†Âá∫Ê©ü"); // "Extruder"
+  LSTR MSG_MOVE_EN                        = _UxGT("Êì†Âá∫Ê©ü *"); // "Extruder *"
+  LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†"); // "Hotend too cold"
+  LSTR MSG_MOVE_N_MM                      = _UxGT("ÁßªÂãï $ mm"); // "Move 0.025mm"
+  LSTR MSG_MOVE_01MM                      = _UxGT("ÁßªÂãï 0.1 mm"); // "Move 0.1mm"
+  LSTR MSG_MOVE_1MM                       = _UxGT("ÁßªÂãï 1 mm"); // "Move 1mm"
+  LSTR MSG_MOVE_10MM                      = _UxGT("ÁßªÂãï 10 mm"); // "Move 10mm"
+  LSTR MSG_MOVE_50MM                      = _UxGT("ÁßªÂãï 50 mm"); // "Move 50mm"
+  LSTR MSG_MOVE_100MM                     = _UxGT("ÁßªÂãï 100 mm"); // "Move 100mm"
+  LSTR MSG_SPEED                          = _UxGT("ÈÄüÁéá"); // "Speed"
+  LSTR MSG_MESH_Z_OFFSET                  = _UxGT("ÁÜ±Â∫äZ"); // "Bed Z"
+  LSTR MSG_NOZZLE                         = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥"); // "Nozzle" Âô¥Âò¥
   LSTR MSG_NOZZLE_N                       = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ~");
-  LSTR MSG_BED                            = " " LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä");     // "Bed"
+  LSTR MSG_BED                            = " " LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä"); // "Bed"
   LSTR MSG_CHAMBER                        = _UxGT("Enclosure");
-  LSTR MSG_FAN_SPEED                      = _UxGT("È¢®ÊâáÈÄüÁéá");     // "Fan speed"
+  LSTR MSG_FAN_SPEED                      = _UxGT("È¢®ÊâáÈÄüÁéá"); // "Fan speed"
   LSTR MSG_FAN_SPEED_N                    = _UxGT("È¢®ÊâáÈÄüÁéá {");
   LSTR MSG_STORED_FAN_N                   = _UxGT("Stored Fan {");
-  LSTR MSG_EXTRA_FAN_SPEED                = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá");     // "Extra fan speed"
+  LSTR MSG_EXTRA_FAN_SPEED                = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá"); // "Extra fan speed"
   LSTR MSG_EXTRA_FAN_SPEED_N              = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá {");
   LSTR MSG_FLOW                           = _UxGT("Êì†Âá∫ÈÄüÁéá");
-  LSTR MSG_FLOW_N                         = _UxGT("Êì†Âá∫ÈÄüÁéá ~");     // "Flow"
-  LSTR MSG_CONTROL                        = _UxGT("ÊéßÂà∂");     // "Control"
-  LSTR MSG_MIN                            = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ∞è");     // " " LCD_STR_THERMOMETER " Min"
-  LSTR MSG_MAX                            = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ§ß");     // " " LCD_STR_THERMOMETER " Max"
-  LSTR MSG_FACTOR                         = " " LCD_STR_THERMOMETER _UxGT(" Á≥ªÊï∏");     // " " LCD_STR_THERMOMETER " Fact"
-  LSTR MSG_AUTOTEMP                       = _UxGT("Ëá™ÂãïÊéßÊ∫´");     // "Autotemp"
-  LSTR MSG_LCD_ON                         = _UxGT("Èñã ");     // "On"
-  LSTR MSG_LCD_OFF                        = _UxGT("Èóú ");     // "Off"
+  LSTR MSG_FLOW_N                         = _UxGT("Êì†Âá∫ÈÄüÁéá ~"); // "Flow"
+  LSTR MSG_CONTROL                        = _UxGT("ÊéßÂà∂"); // "Control"
+  LSTR MSG_MIN                            = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ∞è"); // " " LCD_STR_THERMOMETER " Min"
+  LSTR MSG_MAX                            = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ§ß"); // " " LCD_STR_THERMOMETER " Max"
+  LSTR MSG_FACTOR                         = " " LCD_STR_THERMOMETER _UxGT(" Á≥ªÊï∏"); // " " LCD_STR_THERMOMETER " Fact"
+  LSTR MSG_AUTOTEMP                       = _UxGT("Ëá™ÂãïÊéßÊ∫´"); // "Autotemp"
+  LSTR MSG_LCD_ON                         = _UxGT("Èñã "); // "On"
+  LSTR MSG_LCD_OFF                        = _UxGT("Èóú "); // "Off"
 
   LSTR MSG_SELECT_E                       = _UxGT("ÈÅ∏Êìá *");
-  LSTR MSG_ACC                            = _UxGT("Âä†ÈÄüÂ∫¶");     // "Accel" acceleration
-  LSTR MSG_JERK                           = _UxGT("ÊäñÂãïÈÄüÁéá");     // "Jerk"
-  LSTR MSG_VA_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_A;     // "Va-jerk"
+  LSTR MSG_ACC                            = _UxGT("Âä†ÈÄüÂ∫¶"); // "Accel" acceleration
+  LSTR MSG_JERK                           = _UxGT("ÊäñÂãïÈÄüÁéá"); // "Jerk"
+  LSTR MSG_VA_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_A; // "Va-jerk"
   LSTR MSG_VB_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_B;
   LSTR MSG_VC_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_C;
   LSTR MSG_VN_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá@");
   LSTR MSG_VE_JERK                        = _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá");
 
-  LSTR MSG_MAX_SPEED                      = _UxGT("ÈÄüÂ∫¶");     // "Velocity"
-  LSTR MSG_VMAX_A                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_A;     // "Vmax " max_feedrate_mm_s
+  LSTR MSG_MAX_SPEED                      = _UxGT("ÈÄüÂ∫¶"); // "Velocity"
+  LSTR MSG_VMAX_A                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_A; // "Vmax " max_feedrate_mm_s
   LSTR MSG_VMAX_B                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_B;
   LSTR MSG_VMAX_C                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_C;
   LSTR MSG_VMAX_N                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá@");
   LSTR MSG_VMAX_E                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéáE");
-  LSTR MSG_VMAX_EN                        = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá *");     // "Vmax " max_feedrate_mm_s
-  LSTR MSG_VMIN                           = _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá");     // "Vmin"  min_feedrate_mm_s
-  LSTR MSG_VTRAV_MIN                      = _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá");     // "VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
-  LSTR MSG_ACCELERATION                   = _UxGT("Âä†ÈÄüÂ∫¶");     // "Acceleration"
-  LSTR MSG_AMAX_A                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_A;     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
+  LSTR MSG_VMAX_EN                        = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá *"); // "Vmax " max_feedrate_mm_s
+  LSTR MSG_VMIN                           = _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá"); // "Vmin"  min_feedrate_mm_s
+  LSTR MSG_VTRAV_MIN                      = _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá"); // "VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
+  LSTR MSG_ACCELERATION                   = _UxGT("Âä†ÈÄüÂ∫¶"); // "Acceleration"
+  LSTR MSG_AMAX_A                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_A; // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
   LSTR MSG_AMAX_B                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_B;
   LSTR MSG_AMAX_C                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_C;
   LSTR MSG_AMAX_N                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶@");
   LSTR MSG_AMAX_E                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶E");
-  LSTR MSG_AMAX_EN                        = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ *");     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
-  LSTR MSG_A_RETRACT                      = _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶");     // "A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
-  LSTR MSG_A_TRAVEL                       = _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶");     // "A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
-  LSTR MSG_STEPS_PER_MM                   = _UxGT("Ëª∏Ê≠•Êï∏/mm");     // "Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
-  LSTR MSG_A_STEPS                        = STR_A _UxGT(" Ëª∏Ê≠•Êï∏/mm");     // "Asteps/mm" axis_steps_per_mm, axis steps-per-unit G92
+  LSTR MSG_AMAX_EN                        = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ *"); // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
+  LSTR MSG_A_RETRACT                      = _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶"); // "A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
+  LSTR MSG_A_TRAVEL                       = _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶"); // "A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
+  LSTR MSG_STEPS_PER_MM                   = _UxGT("Ëª∏Ê≠•Êï∏/mm"); // "Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
+  LSTR MSG_A_STEPS                        = STR_A _UxGT(" Ëª∏Ê≠•Êï∏/mm"); // "Asteps/mm" axis_steps_per_mm, axis steps-per-unit G92
   LSTR MSG_B_STEPS                        = STR_B _UxGT(" Ëª∏Ê≠•Êï∏/mm");
   LSTR MSG_C_STEPS                        = STR_C _UxGT(" Ëª∏Ê≠•Êï∏/mm");
   LSTR MSG_N_STEPS                        = _UxGT("@ Ëª∏Ê≠•Êï∏/mm");
-  LSTR MSG_E_STEPS                        = _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm");     // "Esteps/mm"
+  LSTR MSG_E_STEPS                        = _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm"); // "Esteps/mm"
   LSTR MSG_EN_STEPS                       = _UxGT("Êì†Âá∫Ê©ü~Ê≠•Êï∏/mm");
-  LSTR MSG_TEMPERATURE                    = _UxGT("Ê∫´Â∫¶");     // "Temperature"
-  LSTR MSG_MOTION                         = _UxGT("ÈÅã‰Ωú");     // "Motion"
-  LSTR MSG_FILAMENT                       = _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ");     // "Filament" menu_control_volumetric
-  LSTR MSG_VOLUMETRIC_ENABLED             = _UxGT("Ê∏¨ÂÆπÁ©çmm") SUPERSCRIPT_THREE;     // "E in mm3" volumetric_enabled
-  LSTR MSG_FILAMENT_DIAM                  = _UxGT("Áµ≤ÊñôÁõ¥Âæë");     // "Fil. Dia."
+  LSTR MSG_TEMPERATURE                    = _UxGT("Ê∫´Â∫¶"); // "Temperature"
+  LSTR MSG_MOTION                         = _UxGT("ÈÅã‰Ωú"); // "Motion"
+  LSTR MSG_FILAMENT                       = _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ"); // "Filament" menu_control_volumetric
+  LSTR MSG_VOLUMETRIC_ENABLED             = _UxGT("Ê∏¨ÂÆπÁ©çmm") SUPERSCRIPT_THREE; // "E in mm3" volumetric_enabled
+  LSTR MSG_FILAMENT_DIAM                  = _UxGT("Áµ≤ÊñôÁõ¥Âæë"); // "Fil. Dia."
   LSTR MSG_FILAMENT_DIAM_E                = _UxGT("Áµ≤ÊñôÁõ¥Âæë *");
-  LSTR MSG_FILAMENT_UNLOAD                = _UxGT("Âç∏Ëºâ mm");     // "Unload mm"
-  LSTR MSG_FILAMENT_LOAD                  = _UxGT("Ë£ÖËºâ mm");     // "Load mm"
+  LSTR MSG_FILAMENT_UNLOAD                = _UxGT("Âç∏Ëºâ mm"); // "Unload mm"
+  LSTR MSG_FILAMENT_LOAD                  = _UxGT("Ë£ÖËºâ mm"); // "Load mm"
   LSTR MSG_ADVANCE_K                      = _UxGT("Advance K");
   LSTR MSG_ADVANCE_K_E                    = _UxGT("Advance K *");
-  LSTR MSG_CONTRAST                       = _UxGT("LCDÂ∞çÊØîÂ∫¶");     // "LCD contrast"
-  LSTR MSG_STORE_EEPROM                   = _UxGT("‰øùÂ≠òË®≠ÁΩÆ");     // "Store memory"
-  LSTR MSG_LOAD_EEPROM                    = _UxGT("ËºâÂÖ•Ë®≠ÁΩÆ");     // "Load memory"
-  LSTR MSG_RESTORE_DEFAULTS               = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº");     // "Restore failsafe"
-  LSTR MSG_INIT_EEPROM                    = _UxGT("ÂàùÂßãÂåñË®≠ÁΩÆ");     // "Initialize EEPROM"
-  LSTR MSG_ERR_EEPROM_CRC                 = _UxGT("ÈåØË™§: EEPROM CRC");    // "Err: EEPROM CRC"
-  LSTR MSG_ERR_EEPROM_SIZE                = _UxGT("ÈåØË™§: EEPROM Â∞∫ÂØ∏");    // "Err: EEPROM Index"
-  LSTR MSG_ERR_EEPROM_VERSION             = _UxGT("ÈåØË™§: EEPROM ÁâàÊú¨");    // "EEPROM Version"
-  LSTR MSG_MEDIA_UPDATE                   = _UxGT("Â™íÈ´îÊõ¥Êñ∞");    // "Media Update"
-  LSTR MSG_RESET_PRINTER                  = _UxGT("ÈáçÁΩÆÊâìÂç∞Ê©ü");    // "Reset Printer
-  LSTR MSG_REFRESH                        = _UxGT("Âà∑Êñ∞");     // "Refresh"
-  LSTR MSG_INFO_SCREEN                    = _UxGT("Ë≥áË®äÁïåÈù¢");     // "Info screen"
-  LSTR MSG_PREPARE                        = _UxGT("Ê∫ñÂÇô");     // "Prepare"
-  LSTR MSG_TUNE                           = _UxGT("Ë™øÊï¥");     // "Tune"
-  LSTR MSG_START_PRINT                    = _UxGT("ÈñãÂßãÂàóÂç∞");   // "Start Print"
-  LSTR MSG_BUTTON_NEXT                    = _UxGT("‰∏ã‰∏ÄÂÄã");   // "Next"
-  LSTR MSG_BUTTON_INIT                    = _UxGT("ÂàùÂßã  ");   // "Init"
-  LSTR MSG_BUTTON_STOP                    = _UxGT("ÂÅúÊ≠¢  ");   // "Stop"
-  LSTR MSG_BUTTON_PRINT                   = _UxGT("ÂàóÂç∞  ");   // "Print"
-  LSTR MSG_BUTTON_RESET                   = _UxGT("Âæ©Ê≠∏  ");   // "Reset"
-  LSTR MSG_BUTTON_CANCEL                  = _UxGT("ÊîæÊ£Ñ  ");   // "Cancel"
-  LSTR MSG_BUTTON_DONE                    = _UxGT("Á¢∫Ë™ç  ");   // "Done"
-  LSTR MSG_BUTTON_BACK                    = _UxGT("ËøîÂõû  ");   // "Back"
-  LSTR MSG_BUTTON_PROCEED                 = _UxGT("ÁπºÁ∫å  ");   // "Proceed"
-  LSTR MSG_PAUSE_PRINT                    = _UxGT("Êö´ÂÅúÂàóÂç∞");     // "Pause print"
-  LSTR MSG_RESUME_PRINT                   = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     // "Resume print"
-  LSTR MSG_STOP_PRINT                     = _UxGT("ÂÅúÊ≠¢ÂàóÂç∞");     // "Stop print"
-  LSTR MSG_PRINTING_OBJECT                = _UxGT("ÂàóÂç∞Áâ©‰ª∂");   // "Printing Object"
-  LSTR MSG_CANCEL_OBJECT                  = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂");   // "Cancel Object"
-  LSTR MSG_CANCEL_OBJECT_N                = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂ {");   // "Cancel Object {"
-  LSTR MSG_OUTAGE_RECOVERY                = _UxGT("‰∏≠Êñ∑ÊÅ¢Âæ©");   // "Outage Recovery"
-  LSTR MSG_MEDIA_MENU                     = _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞");     // "Print from SD"
-  LSTR MSG_NO_MEDIA                       = _UxGT("ÁÑ°Ë®òÊÜ∂Âç°");     // "No SD card"
-  LSTR MSG_DWELL                          = _UxGT("‰ºëÁú† ...");     // "Sleep..."
-  LSTR MSG_USERWAIT                       = _UxGT("ÈªûÊìäÁπºÁ∫å ...");     // "Click to resume..."
-  LSTR MSG_PRINT_PAUSED                   = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "Print paused"
-  LSTR MSG_PRINTING                       = _UxGT("ÂàóÂç∞‰∏≠ ...");   // "Printing..."
-  LSTR MSG_PRINT_ABORTED                  = _UxGT("Â∑≤ÂèñÊ∂àÂàóÂç∞");     // "Print aborted"
-  LSTR MSG_NO_MOVE                        = _UxGT("ÁÑ°ÁßªÂãï");     // "No move."
-  LSTR MSG_KILLED                         = _UxGT("Â∑≤Á†çÊéâ");     // "KILLED. "
-  LSTR MSG_STOPPED                        = _UxGT("Â∑≤ÂÅúÊ≠¢");     // "STOPPED. "
-  LSTR MSG_CONTROL_RETRACT                = _UxGT("ÂõûÁ∏ÆÈï∑Â∫¶mm");     // "Retract mm" retract_length, retract length (positive mm)
-  LSTR MSG_CONTROL_RETRACT_SWAP           = _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm");     // "Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
-  LSTR MSG_CONTROL_RETRACTF               = _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s");     // "Retract V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
-  LSTR MSG_CONTROL_RETRACT_ZHOP           = _UxGT("Hop mm");     // "Hop mm" retract_zraise, retract Z-lift
-  LSTR MSG_CONTROL_RETRACT_RECOVER        = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     // "UnRet +mm" retract_recover_extra, additional recover length (mm, added to retract length when recovering)
-  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAP   = _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     // "S UnRet+mm" swap_retract_recover_extra, additional swap recover length (mm, added to retract length when recovering from extruder change)
-  LSTR MSG_CONTROL_RETRACT_RECOVERF       = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s");     // "Unretract V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
-  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAPF  = _UxGT("S UnRet V");     // "S UnRet V"
-  LSTR MSG_AUTORETRACT                    = _UxGT("Ëá™ÂãïÂõûÁ∏Æ");     // "Auto-Retract" autoretract_enabled,
-  LSTR MSG_FILAMENT_SWAP_LENGTH           = _UxGT("‰∫§ÊèõÈï∑Â∫¶");    // "Swap Length"
-  LSTR MSG_FILAMENT_PURGE_LENGTH          = _UxGT("Ê∏ÖÈô§Èï∑Â∫¶");   // "Purge Length"
+  LSTR MSG_CONTRAST                       = _UxGT("LCDÂ∞çÊØîÂ∫¶"); // "LCD contrast"
+  LSTR MSG_STORE_EEPROM                   = _UxGT("‰øùÂ≠òË®≠ÁΩÆ"); // "Store memory"
+  LSTR MSG_LOAD_EEPROM                    = _UxGT("ËºâÂÖ•Ë®≠ÁΩÆ"); // "Load memory"
+  LSTR MSG_RESTORE_DEFAULTS               = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº"); // "Restore failsafe"
+  LSTR MSG_INIT_EEPROM                    = _UxGT("ÂàùÂßãÂåñË®≠ÁΩÆ"); // "Initialize EEPROM"
+  LSTR MSG_ERR_EEPROM_CRC                 = _UxGT("ÈåØË™§: EEPROM CRC"); // "Err: EEPROM CRC"
+  LSTR MSG_ERR_EEPROM_SIZE                = _UxGT("ÈåØË™§: EEPROM Â∞∫ÂØ∏"); // "Err: EEPROM Index"
+  LSTR MSG_ERR_EEPROM_VERSION             = _UxGT("ÈåØË™§: EEPROM ÁâàÊú¨"); // "EEPROM Version"
+  LSTR MSG_MEDIA_UPDATE                   = _UxGT("Â™íÈ´îÊõ¥Êñ∞"); // "Media Update"
+  LSTR MSG_RESET_PRINTER                  = _UxGT("ÈáçÁΩÆÊâìÂç∞Ê©ü"); // "Reset Printer
+  LSTR MSG_REFRESH                        = _UxGT("Âà∑Êñ∞"); // "Refresh"
+  LSTR MSG_INFO_SCREEN                    = _UxGT("Ë≥áË®äÁïåÈù¢"); // "Info screen"
+  LSTR MSG_PREPARE                        = _UxGT("Ê∫ñÂÇô"); // "Prepare"
+  LSTR MSG_TUNE                           = _UxGT("Ë™øÊï¥"); // "Tune"
+  LSTR MSG_START_PRINT                    = _UxGT("ÈñãÂßãÂàóÂç∞"); // "Start Print"
+  LSTR MSG_BUTTON_NEXT                    = _UxGT("‰∏ã‰∏ÄÂÄã"); // "Next"
+  LSTR MSG_BUTTON_INIT                    = _UxGT("ÂàùÂßã  "); // "Init"
+  LSTR MSG_BUTTON_STOP                    = _UxGT("ÂÅúÊ≠¢  "); // "Stop"
+  LSTR MSG_BUTTON_PRINT                   = _UxGT("ÂàóÂç∞  "); // "Print"
+  LSTR MSG_BUTTON_RESET                   = _UxGT("Âæ©Ê≠∏  "); // "Reset"
+  LSTR MSG_BUTTON_CANCEL                  = _UxGT("ÊîæÊ£Ñ  "); // "Cancel"
+  LSTR MSG_BUTTON_DONE                    = _UxGT("Á¢∫Ë™ç  "); // "Done"
+  LSTR MSG_BUTTON_BACK                    = _UxGT("ËøîÂõû  "); // "Back"
+  LSTR MSG_BUTTON_PROCEED                 = _UxGT("ÁπºÁ∫å  "); // "Proceed"
+  LSTR MSG_PAUSE_PRINT                    = _UxGT("Êö´ÂÅúÂàóÂç∞"); // "Pause print"
+  LSTR MSG_RESUME_PRINT                   = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞"); // "Resume print"
+  LSTR MSG_STOP_PRINT                     = _UxGT("ÂÅúÊ≠¢ÂàóÂç∞"); // "Stop print"
+  LSTR MSG_PRINTING_OBJECT                = _UxGT("ÂàóÂç∞Áâ©‰ª∂"); // "Printing Object"
+  LSTR MSG_CANCEL_OBJECT                  = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂"); // "Cancel Object"
+  LSTR MSG_CANCEL_OBJECT_N                = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂ {"); // "Cancel Object {"
+  LSTR MSG_OUTAGE_RECOVERY                = _UxGT("‰∏≠Êñ∑ÊÅ¢Âæ©"); // "Outage Recovery"
+  LSTR MSG_MEDIA_MENU                     = _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞"); // "Print from SD"
+  LSTR MSG_NO_MEDIA                       = _UxGT("ÁÑ°Ë®òÊÜ∂Âç°"); // "No SD card"
+  LSTR MSG_DWELL                          = _UxGT("‰ºëÁú† ..."); // "Sleep..."
+  LSTR MSG_USERWAIT                       = _UxGT("ÈªûÊìäÁπºÁ∫å ..."); // "Click to resume..."
+  LSTR MSG_PRINT_PAUSED                   = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú"); // "Print paused"
+  LSTR MSG_PRINTING                       = _UxGT("ÂàóÂç∞‰∏≠ ..."); // "Printing..."
+  LSTR MSG_PRINT_ABORTED                  = _UxGT("Â∑≤ÂèñÊ∂àÂàóÂç∞"); // "Print aborted"
+  LSTR MSG_NO_MOVE                        = _UxGT("ÁÑ°ÁßªÂãï"); // "No move."
+  LSTR MSG_KILLED                         = _UxGT("Â∑≤Á†çÊéâ"); // "KILLED. "
+  LSTR MSG_STOPPED                        = _UxGT("Â∑≤ÂÅúÊ≠¢"); // "STOPPED. "
+  LSTR MSG_CONTROL_RETRACT                = _UxGT("ÂõûÁ∏ÆÈï∑Â∫¶mm"); // "Retract mm" retract_length, retract length (positive mm)
+  LSTR MSG_CONTROL_RETRACT_SWAP           = _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm"); // "Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
+  LSTR MSG_CONTROL_RETRACTF               = _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s"); // "Retract V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
+  LSTR MSG_CONTROL_RETRACT_ZHOP           = _UxGT("Hop mm"); // "Hop mm" retract_zraise, retract Z-lift
+  LSTR MSG_CONTROL_RETRACT_RECOVER        = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm"); // "UnRet +mm" retract_recover_extra, additional recover length (mm, added to retract length when recovering)
+  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAP   = _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm"); // "S UnRet+mm" swap_retract_recover_extra, additional swap recover length (mm, added to retract length when recovering from extruder change)
+  LSTR MSG_CONTROL_RETRACT_RECOVERF       = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s"); // "Unretract V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
+  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAPF  = _UxGT("S UnRet V"); // "S UnRet V"
+  LSTR MSG_AUTORETRACT                    = _UxGT("Ëá™ÂãïÂõûÁ∏Æ"); // "Auto-Retract" autoretract_enabled,
+  LSTR MSG_FILAMENT_SWAP_LENGTH           = _UxGT("‰∫§ÊèõÈï∑Â∫¶"); // "Swap Length"
+  LSTR MSG_FILAMENT_PURGE_LENGTH          = _UxGT("Ê∏ÖÈô§Èï∑Â∫¶"); // "Purge Length"
   LSTR MSG_TOOL_CHANGE                    = _UxGT("‰∫§ÊèõÂ∑•ÂÖ∑"); //"Tool Change"
-  LSTR MSG_TOOL_CHANGE_ZLIFT              = _UxGT("ZËª∏ÊèêÊòá");    // "Z Raise"
-  LSTR MSG_SINGLENOZZLE_PRIME_SPEED       = _UxGT("ÊúÄÈ´òÈÄüÂ∫¶");    // "Prime Speed"
-  LSTR MSG_SINGLENOZZLE_RETRACT_SPEED     = _UxGT("Êî∂ÂõûÈÄüÂ∫¶");  // "Retract Speed"
+  LSTR MSG_TOOL_CHANGE_ZLIFT              = _UxGT("ZËª∏ÊèêÊòá"); // "Z Raise"
+  LSTR MSG_SINGLENOZZLE_PRIME_SPEED       = _UxGT("ÊúÄÈ´òÈÄüÂ∫¶"); // "Prime Speed"
+  LSTR MSG_SINGLENOZZLE_RETRACT_SPEED     = _UxGT("Êî∂ÂõûÈÄüÂ∫¶"); // "Retract Speed"
   LSTR MSG_NOZZLE_STANDBY                 = _UxGT("Âô¥Âò¥ÂæÖÊ©ü"); //"Nozzle Standby"
-  LSTR MSG_FILAMENTCHANGE                 = _UxGT("Êõ¥ÊèõÁµ≤Êñô");     // "Change filament"
+  LSTR MSG_FILAMENTCHANGE                 = _UxGT("Êõ¥ÊèõÁµ≤Êñô"); // "Change filament"
   LSTR MSG_FILAMENTCHANGE_E               = _UxGT("Êõ¥ÊèõÁµ≤Êñô *");
-  LSTR MSG_FILAMENTLOAD                   = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "Load filament"
+  LSTR MSG_FILAMENTLOAD                   = _UxGT("Ë£ùËºâÁµ≤Êñô"); // "Load filament"
   LSTR MSG_FILAMENTLOAD_E                 = _UxGT("Ë£ùËºâÁµ≤Êñô *");
-  LSTR MSG_FILAMENTUNLOAD                 = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "Unload filament"
-  LSTR MSG_FILAMENTUNLOAD_E               = _UxGT("Âç∏ËºâÁµ≤Êñô *");     // "Unload filament"
-  LSTR MSG_FILAMENTUNLOAD_ALL             = _UxGT("Âç∏ËºâÂÖ®ÈÉ®");     // "Unload All"
-  LSTR MSG_INIT_MEDIA                     = _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°");     // "Init. SD card"
-  LSTR MSG_ATTACH_MEDIA                   = _UxGT("ÈÄ£Êé•Ë®òÊÜ∂Âç°");     // "Attach Media
-  LSTR MSG_CHANGE_MEDIA                   = _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°");     // "Change SD card"
-  LSTR MSG_RELEASE_MEDIA                  = _UxGT("ÈáãÊîæÂ™íÈ´î");   // "Release Media"
-  LSTR MSG_ZPROBE_OUT                     = _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ");     // "Z probe out. bed" Z probe is not within the physical limits
-  LSTR MSG_SKEW_FACTOR                    = _UxGT("ÂÅèÊñúÂõ†Êï∏");     // "Skew Factor"
+  LSTR MSG_FILAMENTUNLOAD                 = _UxGT("Âç∏ËºâÁµ≤Êñô"); // "Unload filament"
+  LSTR MSG_FILAMENTUNLOAD_E               = _UxGT("Âç∏ËºâÁµ≤Êñô *"); // "Unload filament"
+  LSTR MSG_FILAMENTUNLOAD_ALL             = _UxGT("Âç∏ËºâÂÖ®ÈÉ®"); // "Unload All"
+  LSTR MSG_INIT_MEDIA                     = _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°"); // "Init. SD card"
+  LSTR MSG_ATTACH_MEDIA                   = _UxGT("ÈÄ£Êé•Ë®òÊÜ∂Âç°"); // "Attach Media
+  LSTR MSG_CHANGE_MEDIA                   = _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°"); // "Change SD card"
+  LSTR MSG_RELEASE_MEDIA                  = _UxGT("ÈáãÊîæÂ™íÈ´î"); // "Release Media"
+  LSTR MSG_ZPROBE_OUT                     = _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ"); // "Z probe out. bed" Z probe is not within the physical limits
+  LSTR MSG_SKEW_FACTOR                    = _UxGT("ÂÅèÊñúÂõ†Êï∏"); // "Skew Factor"
 
-  LSTR MSG_BLTOUCH_SELFTEST               = _UxGT("BLTouch Ëá™Ê™¢");     // "BLTouch Self-Test"
-  LSTR MSG_BLTOUCH_RESET                  = _UxGT("ÈáçÁΩÆBLTouch");     // "Reset BLTouch"
-  LSTR MSG_BLTOUCH_STOW                   = _UxGT("Ë£ùËºâBLTouch");     // "Stow BLTouch"
-  LSTR MSG_BLTOUCH_DEPLOY                 = _UxGT("ÈÉ®ÁΩ≤BLTouch");     // "Deploy BLTouch"
+  LSTR MSG_BLTOUCH_SELFTEST               = _UxGT("BLTouch Ëá™Ê™¢"); // "BLTouch Self-Test"
+  LSTR MSG_BLTOUCH_RESET                  = _UxGT("ÈáçÁΩÆBLTouch"); // "Reset BLTouch"
+  LSTR MSG_BLTOUCH_STOW                   = _UxGT("Ë£ùËºâBLTouch"); // "Stow BLTouch"
+  LSTR MSG_BLTOUCH_DEPLOY                 = _UxGT("ÈÉ®ÁΩ≤BLTouch"); // "Deploy BLTouch"
 
-  LSTR MSG_HOME_FIRST                     = _UxGT("Ê≠∏‰Ωç %s ÂÖà");     // "Home ... first"
-  LSTR MSG_ZPROBE_OFFSETS                 = _UxGT("Êé¢ÈáùÂÅèÁßª");   //Probe Offsets
-  LSTR MSG_ZPROBE_XOFFSET                 = _UxGT("Êé¢ÈáùXÂÅèÁßªÈáè");   //Probe X Offset
-  LSTR MSG_ZPROBE_YOFFSET                 = _UxGT("Êé¢ÈáùYÂÅèÁßªÈáè");   //Probe Y Offset
-  LSTR MSG_ZPROBE_ZOFFSET                 = _UxGT("Êé¢ÈáùZÂÅèÁßªÈáè");   //Probe Z Offset
-  LSTR MSG_BABYSTEP_X                     = _UxGT("ÂæÆÈáèË™øÊï¥XËª∏");     // "Babystep X" lcd_babystep_x, Babystepping enables the user to control the axis in tiny amounts
-  LSTR MSG_BABYSTEP_Y                     = _UxGT("ÂæÆÈáèË™øÊï¥YËª∏");     // "Babystep Y"
-  LSTR MSG_BABYSTEP_Z                     = _UxGT("ÂæÆÈáèË™øÊï¥ZËª∏");     // "Babystep Z"
-  LSTR MSG_BABYSTEP_TOTAL                 = _UxGT("Á∏ΩË®à");    // "Total"
-  LSTR MSG_ENDSTOP_ABORT                  = _UxGT("ÊìãÂ°äÁµÇÊ≠¢");     // "Endstop abort"
-  LSTR MSG_HEATING_FAILED_LCD             = _UxGT("Âä†ÁÜ±Â§±Êïó");     // "Heating failed"
-  LSTR MSG_ERR_REDUNDANT_TEMP             = _UxGT("ÈåØË™§ÔºöÂÜóÈ§òÊ∫´Â∫¶");     // "Err: REDUNDANT TEMP"
-  LSTR MSG_THERMAL_RUNAWAY                = _UxGT("Ê∫´Â∫¶Â§±Êéß");    // "THERMAL RUNAWAY"
-  LSTR MSG_THERMAL_RUNAWAY_BED            = _UxGT("ÁÜ±Â∫äÊ∫´Â∫¶Â§±Êéß");    // "BED THERMAL RUNAWAY"
-  LSTR MSG_THERMAL_RUNAWAY_CHAMBER        = _UxGT("Ê©üÁÆ±Ê∫´Â∫¶Â§±Êéß");   // "CHAMBER T. RUNAWAY"
-  LSTR MSG_ERR_MAXTEMP                    = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ∫´Â∫¶");     // "Err: MAXTEMP"
-  LSTR MSG_ERR_MINTEMP                    = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶");     // "Err: MINTEMP"
-  LSTR MSG_HALTED                         = _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü");     // "PRINTER HALTED"
-  LSTR MSG_PLEASE_RESET                   = _UxGT("Ë´ãÈáçÁΩÆ");     // "Please reset"
-  LSTR MSG_HEATING                        = _UxGT("Âä†ÁÜ±‰∏≠ ...");     // "Heating..."
-  LSTR MSG_COOLING                        = _UxGT("ÂÜ∑Âçª‰∏≠ ...");   // "Cooling..."
-  LSTR MSG_BED_HEATING                    = _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠ ...");     // "Bed Heating..."
-  LSTR MSG_BED_COOLING                    = _UxGT("ÁÜ±Â∫äÂÜ∑Âçª‰∏≠ ...");   // "Bed Cooling..."
-  LSTR MSG_CHAMBER_HEATING                = _UxGT("Ê©üÁÆ±Âä†ÁÜ±‰∏≠ ..");   // "Chamber Heating..."
-  LSTR MSG_CHAMBER_COOLING                = _UxGT("Ê©üÁÆ±ÂÜ∑Âçª‰∏≠ ...");   //Chamber Cooling...
-  LSTR MSG_DELTA_CALIBRATE                = _UxGT("‚äøÊ†°Ê∫ñ");     // "Delta Calibration"
-  LSTR MSG_DELTA_CALIBRATE_X              = _UxGT("‚äøÊ†°Ê∫ñX");     // "Calibrate X"
-  LSTR MSG_DELTA_CALIBRATE_Y              = _UxGT("‚äøÊ†°Ê∫ñY");     // "Calibrate Y"
-  LSTR MSG_DELTA_CALIBRATE_Z              = _UxGT("‚äøÊ†°Ê∫ñZ");     // "Calibrate Z"
-  LSTR MSG_DELTA_CALIBRATE_CENTER         = _UxGT("‚äøÊ†°Ê∫ñ‰∏≠ÂøÉ");     // "Calibrate Center"
-  LSTR MSG_DELTA_SETTINGS                 = _UxGT("‚äøË®≠ÁΩÆ");     // "Delta Settings"
-  LSTR MSG_DELTA_AUTO_CALIBRATE           = _UxGT("‚äøËá™ÂãïÊ†°Ê∫ñ");     // "Auto Calibration"
-  LSTR MSG_DELTA_DIAG_ROD                 = _UxGT("‚äøÊñúÊü±");     // "Diag Rod"
-  LSTR MSG_DELTA_HEIGHT                   = _UxGT("‚äøÈ´òÂ∫¶");     // "Height"
-  LSTR MSG_DELTA_RADIUS                   = _UxGT("‚äøÂçäÂæë");     // "Radius"
-  LSTR MSG_INFO_MENU                      = _UxGT("ÈóúÊñºÂç∞Ë°®Ê©ü");     // "About Printer"
-  LSTR MSG_INFO_PRINTER_MENU              = _UxGT("Âç∞Ë°®Ê©üË®äÊÅØ");     // "Printer Info"
-  LSTR MSG_3POINT_LEVELING                = _UxGT("‰∏âÈªûË™øÂπ≥");     // "3-Point Leveling"
-  LSTR MSG_LINEAR_LEVELING                = _UxGT("Á∑öÊÄßË™øÂπ≥");     // "Linear Leveling"
-  LSTR MSG_BILINEAR_LEVELING              = _UxGT("      ÈõôÁ∑öÊÄßË™øÂπ≥");     // "Bilinear Leveling"
-  LSTR MSG_UBL_LEVELING                   = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"
-  LSTR MSG_MESH_LEVELING                  = _UxGT("Á∂≤Ê†ºË™øÂπ≥");     // "Mesh Leveling"
-  LSTR MSG_INFO_STATS_MENU                = _UxGT("Âç∞Ë°®Ê©üÁµ±Ë®à");     // "Printer Stats"
-  LSTR MSG_INFO_BOARD_MENU                = _UxGT("‰∏ªÊùøË®äÊÅØ");     // "Board Info"
-  LSTR MSG_INFO_THERMISTOR_MENU           = _UxGT("Ê∫´Â∫¶Ë®à");     // "Thermistors"
-  LSTR MSG_INFO_EXTRUDERS                 = _UxGT("      Êì†Âá∫Ê©ü");     // "Extruders"
-  LSTR MSG_INFO_BAUDRATE                  = _UxGT("ÂÇ≥Ëº∏Áéá");     // "Baud"
-  LSTR MSG_INFO_PROTOCOL                  = _UxGT("ÂçîË≠∞");     // "Protocol"
-  LSTR MSG_INFO_RUNAWAY_OFF               = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èóú");   // "Runaway Watch: OFF"
-  LSTR MSG_INFO_RUNAWAY_ON                = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èñã");    // "Runaway Watch: ON"
+  LSTR MSG_HOME_FIRST                     = _UxGT("Ê≠∏‰Ωç %s ÂÖà"); // "Home ... first"
+  LSTR MSG_ZPROBE_OFFSETS                 = _UxGT("Êé¢ÈáùÂÅèÁßª"); //Probe Offsets
+  LSTR MSG_ZPROBE_XOFFSET                 = _UxGT("Êé¢ÈáùXÂÅèÁßªÈáè"); //Probe X Offset
+  LSTR MSG_ZPROBE_YOFFSET                 = _UxGT("Êé¢ÈáùYÂÅèÁßªÈáè"); //Probe Y Offset
+  LSTR MSG_ZPROBE_ZOFFSET                 = _UxGT("Êé¢ÈáùZÂÅèÁßªÈáè"); //Probe Z Offset
+  LSTR MSG_BABYSTEP_X                     = _UxGT("ÂæÆÈáèË™øÊï¥XËª∏"); // "Babystep X" lcd_babystep_x, Babystepping enables the user to control the axis in tiny amounts
+  LSTR MSG_BABYSTEP_Y                     = _UxGT("ÂæÆÈáèË™øÊï¥YËª∏"); // "Babystep Y"
+  LSTR MSG_BABYSTEP_Z                     = _UxGT("ÂæÆÈáèË™øÊï¥ZËª∏"); // "Babystep Z"
+  LSTR MSG_BABYSTEP_TOTAL                 = _UxGT("Á∏ΩË®à"); // "Total"
+  LSTR MSG_ENDSTOP_ABORT                  = _UxGT("ÊìãÂ°äÁµÇÊ≠¢"); // "Endstop abort"
+  LSTR MSG_HEATING_FAILED_LCD             = _UxGT("Âä†ÁÜ±Â§±Êïó"); // "Heating failed"
+  LSTR MSG_ERR_REDUNDANT_TEMP             = _UxGT("ÈåØË™§ÔºöÂÜóÈ§òÊ∫´Â∫¶"); // "Err: REDUNDANT TEMP"
+  LSTR MSG_THERMAL_RUNAWAY                = _UxGT("Ê∫´Â∫¶Â§±Êéß"); // "THERMAL RUNAWAY"
+  LSTR MSG_THERMAL_RUNAWAY_BED            = _UxGT("ÁÜ±Â∫äÊ∫´Â∫¶Â§±Êéß"); // "BED THERMAL RUNAWAY"
+  LSTR MSG_THERMAL_RUNAWAY_CHAMBER        = _UxGT("Ê©üÁÆ±Ê∫´Â∫¶Â§±Êéß"); // "CHAMBER T. RUNAWAY"
+  LSTR MSG_ERR_MAXTEMP                    = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ∫´Â∫¶"); // "Err: MAXTEMP"
+  LSTR MSG_ERR_MINTEMP                    = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶"); // "Err: MINTEMP"
+  LSTR MSG_HALTED                         = _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü"); // "PRINTER HALTED"
+  LSTR MSG_PLEASE_RESET                   = _UxGT("Ë´ãÈáçÁΩÆ"); // "Please reset"
+  LSTR MSG_HEATING                        = _UxGT("Âä†ÁÜ±‰∏≠ ..."); // "Heating..."
+  LSTR MSG_COOLING                        = _UxGT("ÂÜ∑Âçª‰∏≠ ..."); // "Cooling..."
+  LSTR MSG_BED_HEATING                    = _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠ ..."); // "Bed Heating..."
+  LSTR MSG_BED_COOLING                    = _UxGT("ÁÜ±Â∫äÂÜ∑Âçª‰∏≠ ..."); // "Bed Cooling..."
+  LSTR MSG_CHAMBER_HEATING                = _UxGT("Ê©üÁÆ±Âä†ÁÜ±‰∏≠ .."); // "Chamber Heating..."
+  LSTR MSG_CHAMBER_COOLING                = _UxGT("Ê©üÁÆ±ÂÜ∑Âçª‰∏≠ ..."); //Chamber Cooling...
+  LSTR MSG_DELTA_CALIBRATE                = _UxGT("‚äøÊ†°Ê∫ñ"); // "Delta Calibration"
+  LSTR MSG_DELTA_CALIBRATE_X              = _UxGT("‚äøÊ†°Ê∫ñX"); // "Calibrate X"
+  LSTR MSG_DELTA_CALIBRATE_Y              = _UxGT("‚äøÊ†°Ê∫ñY"); // "Calibrate Y"
+  LSTR MSG_DELTA_CALIBRATE_Z              = _UxGT("‚äøÊ†°Ê∫ñZ"); // "Calibrate Z"
+  LSTR MSG_DELTA_CALIBRATE_CENTER         = _UxGT("‚äøÊ†°Ê∫ñ‰∏≠ÂøÉ"); // "Calibrate Center"
+  LSTR MSG_DELTA_SETTINGS                 = _UxGT("‚äøË®≠ÁΩÆ"); // "Delta Settings"
+  LSTR MSG_DELTA_AUTO_CALIBRATE           = _UxGT("‚äøËá™ÂãïÊ†°Ê∫ñ"); // "Auto Calibration"
+  LSTR MSG_DELTA_DIAG_ROD                 = _UxGT("‚äøÊñúÊü±"); // "Diag Rod"
+  LSTR MSG_DELTA_HEIGHT                   = _UxGT("‚äøÈ´òÂ∫¶"); // "Height"
+  LSTR MSG_DELTA_RADIUS                   = _UxGT("‚äøÂçäÂæë"); // "Radius"
+  LSTR MSG_INFO_MENU                      = _UxGT("ÈóúÊñºÂç∞Ë°®Ê©ü"); // "About Printer"
+  LSTR MSG_INFO_PRINTER_MENU              = _UxGT("Âç∞Ë°®Ê©üË®äÊÅØ"); // "Printer Info"
+  LSTR MSG_3POINT_LEVELING                = _UxGT("‰∏âÈªûË™øÂπ≥"); // "3-Point Leveling"
+  LSTR MSG_LINEAR_LEVELING                = _UxGT("Á∑öÊÄßË™øÂπ≥"); // "Linear Leveling"
+  LSTR MSG_BILINEAR_LEVELING              = _UxGT("      ÈõôÁ∑öÊÄßË™øÂπ≥"); // "Bilinear Leveling"
+  LSTR MSG_UBL_LEVELING                   = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)"); // "Unified Bed Leveling"
+  LSTR MSG_MESH_LEVELING                  = _UxGT("Á∂≤Ê†ºË™øÂπ≥"); // "Mesh Leveling"
+  LSTR MSG_INFO_STATS_MENU                = _UxGT("Âç∞Ë°®Ê©üÁµ±Ë®à"); // "Printer Stats"
+  LSTR MSG_INFO_BOARD_MENU                = _UxGT("‰∏ªÊùøË®äÊÅØ"); // "Board Info"
+  LSTR MSG_INFO_THERMISTOR_MENU           = _UxGT("Ê∫´Â∫¶Ë®à"); // "Thermistors"
+  LSTR MSG_INFO_EXTRUDERS                 = _UxGT("      Êì†Âá∫Ê©ü"); // "Extruders"
+  LSTR MSG_INFO_BAUDRATE                  = _UxGT("ÂÇ≥Ëº∏Áéá"); // "Baud"
+  LSTR MSG_INFO_PROTOCOL                  = _UxGT("ÂçîË≠∞"); // "Protocol"
+  LSTR MSG_INFO_RUNAWAY_OFF               = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èóú"); // "Runaway Watch: OFF"
+  LSTR MSG_INFO_RUNAWAY_ON                = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èñã"); // "Runaway Watch: ON"
 
-  LSTR MSG_CASE_LIGHT                     = _UxGT("Â§ñÊÆºÁáà");     // "Case light"
-  LSTR MSG_CASE_LIGHT_BRIGHTNESS          = _UxGT("Ááà‰∫ÆÂ∫¶");     // "Light BRIGHTNESS"
-  LSTR MSG_KILL_EXPECTED_PRINTER          = _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫");     // "The printer is incorrect"
+  LSTR MSG_CASE_LIGHT                     = _UxGT("Â§ñÊÆºÁáà"); // "Case light"
+  LSTR MSG_CASE_LIGHT_BRIGHTNESS          = _UxGT("Ááà‰∫ÆÂ∫¶"); // "Light BRIGHTNESS"
+  LSTR MSG_KILL_EXPECTED_PRINTER          = _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫"); // "The printer is incorrect"
 
   #if LCD_WIDTH >= 20 || HAS_DWIN_E3V2
-    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("ÂàóÂç∞Ë®àÊï∏");     // "Print Count"
-    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("Â∑≤ÂÆåÊàê");     // "Completed"
-    LSTR MSG_INFO_PRINT_TIME              = _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì");     // "Total print time"
-    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì");     // "Longest job time"
-    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("Á∏ΩË®àÊì†Âá∫");     // "Extruded total"
+    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("ÂàóÂç∞Ë®àÊï∏"); // "Print Count"
+    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("Â∑≤ÂÆåÊàê"); // "Completed"
+    LSTR MSG_INFO_PRINT_TIME              = _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì"); // "Total print time"
+    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì"); // "Longest job time"
+    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("Á∏ΩË®àÊì†Âá∫"); // "Extruded total"
   #else
-    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("ÂàóÂç∞Êï∏");     // "Prints"
-    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("ÂÆåÊàê");     // "Completed"
-    LSTR MSG_INFO_PRINT_TIME              = _UxGT("Á∏ΩÂÖ±");     // "Total"
-    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("ÊúÄÈï∑");     // "Longest"
-    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("Â∑≤Êì†Âá∫");     // "Extruded"
+    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("ÂàóÂç∞Êï∏"); // "Prints"
+    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("ÂÆåÊàê"); // "Completed"
+    LSTR MSG_INFO_PRINT_TIME              = _UxGT("Á∏ΩÂÖ±"); // "Total"
+    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("ÊúÄÈï∑"); // "Longest"
+    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("Â∑≤Êì†Âá∫"); // "Extruded"
   #endif
 
-  LSTR MSG_INFO_MIN_TEMP                  = _UxGT("ÊúÄ‰ΩéÊ∫´Â∫¶");     // "Min Temp"
-  LSTR MSG_INFO_MAX_TEMP                  = _UxGT("ÊúÄÈ´òÊ∫´Â∫¶");     // "Max Temp"
-  LSTR MSG_INFO_PSU                       = _UxGT("ÈõªÊ∫ê‰æõÊáâ");     // "Power Supply"
-  LSTR MSG_DRIVE_STRENGTH                 = _UxGT("È©ÖÂãïÂäõÂ∫¶");     // "Drive Strength"
-  LSTR MSG_DAC_PERCENT_N                  = _UxGT("@ È©ÖÂãï %");    //E Driver %
-  LSTR MSG_ERROR_TMC                      = _UxGT("TMCÈÄ£Êé•ÈåØË™§");   // "TMC CONNECTION ERROR"
-  LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("‰øùÂ≠òÈ©ÖÂãïË®≠ÁΩÆ");     // "DAC EEPROM Write"
-  LSTR MSG_FILAMENT_CHANGE_HEADER         = _UxGT("Êõ¥ÊèõÁµ≤Êñô");   // "FILAMENT CHANGE"
-  LSTR MSG_FILAMENT_CHANGE_HEADER_PAUSE   = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "PRINT PAUSED"
-  LSTR MSG_FILAMENT_CHANGE_HEADER_LOAD    = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "LOAD FILAMENT"
-  LSTR MSG_FILAMENT_CHANGE_HEADER_UNLOAD  = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "UNLOAD FILAMENT"
-  LSTR MSG_FILAMENT_CHANGE_OPTION_HEADER  = _UxGT("ÊÅ¢Ë§áÈÅ∏È†Ö:");     // "RESUME OPTIONS:"
-  LSTR MSG_FILAMENT_CHANGE_OPTION_PURGE   = _UxGT("Ê∏ÖÈô§Êõ¥Â§ö");     // "Purge more"
-  LSTR MSG_FILAMENT_CHANGE_OPTION_RESUME  = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     // "Resume print"
-  LSTR MSG_FILAMENT_CHANGE_NOZZLE         = _UxGT("  Âô¥Âò¥: ");     // "  Nozzle: "
-  LSTR MSG_RUNOUT_SENSOR                  = _UxGT("Êñ∑Áµ≤ÂÅµÊ∏¨");    // "Runout Sensor"
-  LSTR MSG_RUNOUT_DISTANCE_MM             = _UxGT("Áµ≤Ë∑ùÈõ¢mm");   // "Runout Dist mm"
-  LSTR MSG_KILL_HOMING_FAILED             = _UxGT("Ê≠∏Âéü‰ΩçÂ§±Êïó");     // "Homing failed"
-  LSTR MSG_LCD_PROBING_FAILED             = _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó");     // "Probing failed"
+  LSTR MSG_INFO_MIN_TEMP                  = _UxGT("ÊúÄ‰ΩéÊ∫´Â∫¶"); // "Min Temp"
+  LSTR MSG_INFO_MAX_TEMP                  = _UxGT("ÊúÄÈ´òÊ∫´Â∫¶"); // "Max Temp"
+  LSTR MSG_INFO_PSU                       = _UxGT("ÈõªÊ∫ê‰æõÊáâ"); // "Power Supply"
+  LSTR MSG_DRIVE_STRENGTH                 = _UxGT("È©ÖÂãïÂäõÂ∫¶"); // "Drive Strength"
+  LSTR MSG_DAC_PERCENT_N                  = _UxGT("@ È©ÖÂãï %"); //E Driver %
+  LSTR MSG_ERROR_TMC                      = _UxGT("TMCÈÄ£Êé•ÈåØË™§"); // "TMC CONNECTION ERROR"
+  LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("‰øùÂ≠òÈ©ÖÂãïË®≠ÁΩÆ"); // "DAC EEPROM Write"
+  LSTR MSG_FILAMENT_CHANGE_HEADER         = _UxGT("Êõ¥ÊèõÁµ≤Êñô"); // "FILAMENT CHANGE"
+  LSTR MSG_FILAMENT_CHANGE_HEADER_PAUSE   = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú"); // "PRINT PAUSED"
+  LSTR MSG_FILAMENT_CHANGE_HEADER_LOAD    = _UxGT("Ë£ùËºâÁµ≤Êñô"); // "LOAD FILAMENT"
+  LSTR MSG_FILAMENT_CHANGE_HEADER_UNLOAD  = _UxGT("Âç∏ËºâÁµ≤Êñô"); // "UNLOAD FILAMENT"
+  LSTR MSG_FILAMENT_CHANGE_OPTION_HEADER  = _UxGT("ÊÅ¢Ë§áÈÅ∏È†Ö:"); // "RESUME OPTIONS:"
+  LSTR MSG_FILAMENT_CHANGE_OPTION_PURGE   = _UxGT("Ê∏ÖÈô§Êõ¥Â§ö"); // "Purge more"
+  LSTR MSG_FILAMENT_CHANGE_OPTION_RESUME  = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞"); // "Resume print"
+  LSTR MSG_FILAMENT_CHANGE_NOZZLE         = _UxGT("  Âô¥Âò¥: "); // "  Nozzle: "
+  LSTR MSG_RUNOUT_SENSOR                  = _UxGT("Êñ∑Áµ≤ÂÅµÊ∏¨"); // "Runout Sensor"
+  LSTR MSG_RUNOUT_DISTANCE_MM             = _UxGT("Áµ≤Ë∑ùÈõ¢mm"); // "Runout Dist mm"
+  LSTR MSG_KILL_HOMING_FAILED             = _UxGT("Ê≠∏Âéü‰ΩçÂ§±Êïó"); // "Homing failed"
+  LSTR MSG_LCD_PROBING_FAILED             = _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó"); // "Probing failed"
 
   //
   // Filament Change screens show up to 3 lines on a 4-line display
@@ -464,31 +464,31 @@ namespace Language_zh_TW {
   //
   #if LCD_HEIGHT >= 4
     LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "ÊÅ¢Âæ©ÂàóÂç∞")); //"Press Button to resume print"
-    LSTR MSG_PAUSE_PRINT_PARKING          = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));   // "Parking..."
-    LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_3_LINE("Á≠âÂæÖÈñãÂßã", "Áµ≤Êñô", "ËÆäÊõ¥"));     // "Wait for start of the filament change"
-    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Âç∏‰∏ãÁµ≤Êñô"));     // "Wait for filament unload"
-    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_3_LINE("ÊèíÂÖ•Áµ≤Êñô", "‰∏¶ÊåâÈçµ", "ÁπºÁ∫å ..."));     // "Insert filament and press button to continue..."
-    LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "Âä†ÁÜ±Âô¥Âò¥."));     // "Press button to heat nozzle."
-    LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_2_LINE("Âä†ÁÜ±Âô¥Âò¥", "Ë´ãÁ≠âÂæÖ ..."));     // "Heating nozzle Please wait..."
-    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "ÈÄ≤Êñô"));     // "Wait for filament load"
-    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Áµ≤ÊñôÊ∏ÖÈô§"));     // "Wait for filament purge"
+    LSTR MSG_PAUSE_PRINT_PARKING          = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ...")); // "Parking..."
+    LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_3_LINE("Á≠âÂæÖÈñãÂßã", "Áµ≤Êñô", "ËÆäÊõ¥")); // "Wait for start of the filament change"
+    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Âç∏‰∏ãÁµ≤Êñô")); // "Wait for filament unload"
+    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_3_LINE("ÊèíÂÖ•Áµ≤Êñô", "‰∏¶ÊåâÈçµ", "ÁπºÁ∫å ...")); // "Insert filament and press button to continue..."
+    LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "Âä†ÁÜ±Âô¥Âò¥.")); // "Press button to heat nozzle."
+    LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_2_LINE("Âä†ÁÜ±Âô¥Âò¥", "Ë´ãÁ≠âÂæÖ ...")); // "Heating nozzle Please wait..."
+    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "ÈÄ≤Êñô")); // "Wait for filament load"
+    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Áµ≤ÊñôÊ∏ÖÈô§")); // "Wait for filament purge"
     LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_2_LINE("Êåâ‰∏ãÂÆåÊàê","Áµ≤ÊñôÊ∏ÖÈô§")); //"Press button to filament purge"
-    LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_2_LINE("Á≠âÂæÖÂàóÂç∞", "ÊÅ¢Âæ©"));     // "Wait for print to resume"
+    LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_2_LINE("Á≠âÂæÖÂàóÂç∞", "ÊÅ¢Âæ©")); // "Wait for print to resume"
   #else // LCD_HEIGHT < 4
-    LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_1_LINE("Êåâ‰∏ãÁπºÁ∫å.."));   // "Click to continue"
-    LSTR MSG_PAUSE_PRINT_PARKING          = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));     // "Parking..."
-    LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_1_LINE("Ë´ãÁ≠âÂæÖ ..."));     // "Please wait..."
-    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_1_LINE("ÊèíÂÖ•‰∏¶ÈªûÊìä"));     // "Insert and Click"
-    LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂä†ÁÜ±.."));     // "Click to heat"
-    LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_1_LINE("Âä†ÁÜ±‰∏≠ ..."));     // "Heating..."
-    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_1_LINE("ÈÄÄÂá∫‰∏≠ ..."));     // "Ejecting..."
-    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_1_LINE("ËºâÂÖ•‰∏≠ ..."));     // "Loading..."
-    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_1_LINE("Ê∏ÖÈô§‰∏≠ ..."));     // "Purging..."
-    LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂÆåÊàê.."));     // "Click to finish"
-    LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_1_LINE("ÊÅ¢Âæ©‰∏≠ ..."));     // "Resuming..."
+    LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_1_LINE("Êåâ‰∏ãÁπºÁ∫å..")); // "Click to continue"
+    LSTR MSG_PAUSE_PRINT_PARKING          = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ...")); // "Parking..."
+    LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_1_LINE("Ë´ãÁ≠âÂæÖ ...")); // "Please wait..."
+    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_1_LINE("ÊèíÂÖ•‰∏¶ÈªûÊìä")); // "Insert and Click"
+    LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂä†ÁÜ±..")); // "Click to heat"
+    LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_1_LINE("Âä†ÁÜ±‰∏≠ ...")); // "Heating..."
+    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_1_LINE("ÈÄÄÂá∫‰∏≠ ...")); // "Ejecting..."
+    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_1_LINE("ËºâÂÖ•‰∏≠ ...")); // "Loading..."
+    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_1_LINE("Ê∏ÖÈô§‰∏≠ ...")); // "Purging..."
+    LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂÆåÊàê..")); // "Click to finish"
+    LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_1_LINE("ÊÅ¢Âæ©‰∏≠ ...")); // "Resuming..."
   #endif // LCD_HEIGHT < 4
 
-  LSTR MSG_SHORT_DAY                      = _UxGT("Â§©");     // "d" // One character only
-  LSTR MSG_SHORT_HOUR                     = _UxGT("ÊôÇ");     // "h" // One character only
-  LSTR MSG_SHORT_MINUTE                   = _UxGT("ÂàÜ");     // "m" // One character only
+  LSTR MSG_SHORT_DAY                      = _UxGT("Â§©"); // "d" // One character only
+  LSTR MSG_SHORT_HOUR                     = _UxGT("ÊôÇ"); // "h" // One character only
+  LSTR MSG_SHORT_MINUTE                   = _UxGT("ÂàÜ"); // "m" // One character only
 }

commit 5bc84bf08cb47741537fe705dbfe19eee5396d4e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri May 19 23:30:48 2023 -0500

    üö∏ Improve EEPROM validation (#25860)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 570dc292c5..9365225cae 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -299,8 +299,8 @@ namespace Language_zh_TW {
   LSTR MSG_RESTORE_DEFAULTS               = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº");     // "Restore failsafe"
   LSTR MSG_INIT_EEPROM                    = _UxGT("ÂàùÂßãÂåñË®≠ÁΩÆ");     // "Initialize EEPROM"
   LSTR MSG_ERR_EEPROM_CRC                 = _UxGT("ÈåØË™§: EEPROM CRC");    // "Err: EEPROM CRC"
-  LSTR MSG_ERR_EEPROM_INDEX               = _UxGT("ÈåØË™§: EEPROM Index");    // "Err: EEPROM Index"
-  LSTR MSG_ERR_EEPROM_VERSION             = _UxGT("ÈåØË™§: EEPROM Version");    // "EEPROM Version"
+  LSTR MSG_ERR_EEPROM_SIZE                = _UxGT("ÈåØË™§: EEPROM Â∞∫ÂØ∏");    // "Err: EEPROM Index"
+  LSTR MSG_ERR_EEPROM_VERSION             = _UxGT("ÈåØË™§: EEPROM ÁâàÊú¨");    // "EEPROM Version"
   LSTR MSG_MEDIA_UPDATE                   = _UxGT("Â™íÈ´îÊõ¥Êñ∞");    // "Media Update"
   LSTR MSG_RESET_PRINTER                  = _UxGT("ÈáçÁΩÆÊâìÂç∞Ê©ü");    // "Reset Printer
   LSTR MSG_REFRESH                        = _UxGT("Âà∑Êñ∞");     // "Refresh"

commit 2954bf26979e43c6b36ca2739af4e887b651f3f8
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Apr 24 00:24:40 2023 -0500

    üåê Replace '=' with '{' for substitution

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 5f9f0e3904..570dc292c5 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -129,7 +129,7 @@ namespace Language_zh_TW {
   LSTR MSG_UBL_ACTIVATE_MESH              = _UxGT("ÂïüÂãïUBL");     // "Activate UBL"
   LSTR MSG_UBL_DEACTIVATE_MESH            = _UxGT("ÈóúÈñâUBL");     // "Deactivate UBL"
   LSTR MSG_UBL_SET_TEMP_BED               = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");     // "Bed Temp"
-  LSTR MSG_UBL_BED_TEMP_CUSTOM            = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");    // "Bed Temp")
+  LSTR MSG_UBL_BED_TEMP_CUSTOM            = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");    // "Bed Temp"
   LSTR MSG_UBL_SET_TEMP_HOTEND            = _UxGT("ÁΩÆË®≠Âô¥Âò¥Ê∫´Â∫¶");     // "Hotend Temp"
   LSTR MSG_UBL_HOTEND_TEMP_CUSTOM         = _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶");    // "Hotend Temp"
   LSTR MSG_UBL_MESH_EDIT                  = _UxGT("Á∂≤Ê†ºÁ∑®ËºØ");     // "Mesh Edit"
@@ -194,27 +194,27 @@ namespace Language_zh_TW {
   LSTR MSG_UBL_6_FINE_TUNE_ALL            = _UxGT("6. Á¥∞Ë™øÊâÄÊúâÁöÑ");
   LSTR MSG_UBL_7_SAVE_MESH                = _UxGT("7. ‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º");
 
-  LSTR MSG_LED_CONTROL                    = _UxGT("ÁáàÁÆ°ÊéßÂà∂");     // "LED Control")
-  LSTR MSG_LEDS                           = _UxGT("Ááà");     // "Lights")
-  LSTR MSG_LED_PRESETS                    = _UxGT("ÁáàÈ†êÁΩÆ");     // "Light Presets")
-  LSTR MSG_SET_LEDS_RED                   = _UxGT("Á∫¢");     // "Red")
-  LSTR MSG_SET_LEDS_ORANGE                = _UxGT("Ê©ô");     // "Orange")
-  LSTR MSG_SET_LEDS_YELLOW                = _UxGT("ÈªÉ");     // "Yellow")
-  LSTR MSG_SET_LEDS_GREEN                 = _UxGT("Á∂†");     // "Green")
-  LSTR MSG_SET_LEDS_BLUE                  = _UxGT("Ëóç");     // "Blue")
-  LSTR MSG_SET_LEDS_INDIGO                = _UxGT("Èùí");     // "Indigo")
-  LSTR MSG_SET_LEDS_VIOLET                = _UxGT("Á¥´");     // "Violet")
-  LSTR MSG_SET_LEDS_WHITE                 = _UxGT("ÁôΩ");     // "White")
-  LSTR MSG_SET_LEDS_DEFAULT               = _UxGT("Âæ©Ê≠∏");     // "Default")
-  LSTR MSG_CUSTOM_LEDS                    = _UxGT("ÂÆöÂà∂Ááà");     // "Custom Lights")
-  LSTR MSG_INTENSITY_R                    = _UxGT("Á¥ÖÈ£ΩÂíåÂ∫¶");     // "Red Intensity")
-  LSTR MSG_INTENSITY_G                    = _UxGT("Á∂†È£ΩÂíåÂ∫¶");     // "Green Intensity")
-  LSTR MSG_INTENSITY_B                    = _UxGT("ËóçÈ£ΩÂíåÂ∫¶");     // "Blue Intensity")
-  LSTR MSG_INTENSITY_W                    = _UxGT("ÁôΩÈ£ΩÂíåÂ∫¶");     // "White Intensity")
-  LSTR MSG_LED_BRIGHTNESS                 = _UxGT("‰∫ÆÂ∫¶");     // "Brightness")
+  LSTR MSG_LED_CONTROL                    = _UxGT("ÁáàÁÆ°ÊéßÂà∂");     // "LED Control"
+  LSTR MSG_LEDS                           = _UxGT("Ááà");     // "Lights"
+  LSTR MSG_LED_PRESETS                    = _UxGT("ÁáàÈ†êÁΩÆ");     // "Light Presets"
+  LSTR MSG_SET_LEDS_RED                   = _UxGT("Á∫¢");     // "Red"
+  LSTR MSG_SET_LEDS_ORANGE                = _UxGT("Ê©ô");     // "Orange"
+  LSTR MSG_SET_LEDS_YELLOW                = _UxGT("ÈªÉ");     // "Yellow"
+  LSTR MSG_SET_LEDS_GREEN                 = _UxGT("Á∂†");     // "Green"
+  LSTR MSG_SET_LEDS_BLUE                  = _UxGT("Ëóç");     // "Blue"
+  LSTR MSG_SET_LEDS_INDIGO                = _UxGT("Èùí");     // "Indigo"
+  LSTR MSG_SET_LEDS_VIOLET                = _UxGT("Á¥´");     // "Violet"
+  LSTR MSG_SET_LEDS_WHITE                 = _UxGT("ÁôΩ");     // "White"
+  LSTR MSG_SET_LEDS_DEFAULT               = _UxGT("Âæ©Ê≠∏");     // "Default"
+  LSTR MSG_CUSTOM_LEDS                    = _UxGT("ÂÆöÂà∂Ááà");     // "Custom Lights"
+  LSTR MSG_INTENSITY_R                    = _UxGT("Á¥ÖÈ£ΩÂíåÂ∫¶");     // "Red Intensity"
+  LSTR MSG_INTENSITY_G                    = _UxGT("Á∂†È£ΩÂíåÂ∫¶");     // "Green Intensity"
+  LSTR MSG_INTENSITY_B                    = _UxGT("ËóçÈ£ΩÂíåÂ∫¶");     // "Blue Intensity"
+  LSTR MSG_INTENSITY_W                    = _UxGT("ÁôΩÈ£ΩÂíåÂ∫¶");     // "White Intensity"
+  LSTR MSG_LED_BRIGHTNESS                 = _UxGT("‰∫ÆÂ∫¶");     // "Brightness"
 
-  LSTR MSG_MOVING                         = _UxGT("ÁßªÂãï ...");     // "Moving...")
-  LSTR MSG_FREE_XY                        = _UxGT("ÈáãÊîæ XY");     // "Free XY")
+  LSTR MSG_MOVING                         = _UxGT("ÁßªÂãï ...");     // "Moving..."
+  LSTR MSG_FREE_XY                        = _UxGT("ÈáãÊîæ XY");     // "Free XY"
   LSTR MSG_MOVE_X                         = _UxGT("ÁßªÂãïX");     // "Move X"
   LSTR MSG_MOVE_Y                         = _UxGT("ÁßªÂãïY");     // "Move Y"
   LSTR MSG_MOVE_Z                         = _UxGT("ÁßªÂãïZ");     // "Move Z"
@@ -235,10 +235,10 @@ namespace Language_zh_TW {
   LSTR MSG_BED                            = " " LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä");     // "Bed"
   LSTR MSG_CHAMBER                        = _UxGT("Enclosure");
   LSTR MSG_FAN_SPEED                      = _UxGT("È¢®ÊâáÈÄüÁéá");     // "Fan speed"
-  LSTR MSG_FAN_SPEED_N                    = _UxGT("È¢®ÊâáÈÄüÁéá =");
-  LSTR MSG_STORED_FAN_N                   = _UxGT("Stored Fan =");
+  LSTR MSG_FAN_SPEED_N                    = _UxGT("È¢®ÊâáÈÄüÁéá {");
+  LSTR MSG_STORED_FAN_N                   = _UxGT("Stored Fan {");
   LSTR MSG_EXTRA_FAN_SPEED                = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá");     // "Extra fan speed"
-  LSTR MSG_EXTRA_FAN_SPEED_N              = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá =");
+  LSTR MSG_EXTRA_FAN_SPEED_N              = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá {");
   LSTR MSG_FLOW                           = _UxGT("Êì†Âá∫ÈÄüÁéá");
   LSTR MSG_FLOW_N                         = _UxGT("Êì†Âá∫ÈÄüÁéá ~");     // "Flow"
   LSTR MSG_CONTROL                        = _UxGT("ÊéßÂà∂");     // "Control"
@@ -322,7 +322,7 @@ namespace Language_zh_TW {
   LSTR MSG_STOP_PRINT                     = _UxGT("ÂÅúÊ≠¢ÂàóÂç∞");     // "Stop print"
   LSTR MSG_PRINTING_OBJECT                = _UxGT("ÂàóÂç∞Áâ©‰ª∂");   // "Printing Object"
   LSTR MSG_CANCEL_OBJECT                  = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂");   // "Cancel Object"
-  LSTR MSG_CANCEL_OBJECT_N                = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂ =");   // "Cancel Object ="
+  LSTR MSG_CANCEL_OBJECT_N                = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂ {");   // "Cancel Object {"
   LSTR MSG_OUTAGE_RECOVERY                = _UxGT("‰∏≠Êñ∑ÊÅ¢Âæ©");   // "Outage Recovery"
   LSTR MSG_MEDIA_MENU                     = _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞");     // "Print from SD"
   LSTR MSG_NO_MEDIA                       = _UxGT("ÁÑ°Ë®òÊÜ∂Âç°");     // "No SD card"

commit 92721d1bf7d3516ffa591bf7fa9b0b03099f5156
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Apr 14 17:45:45 2023 -0500

    üö∏ "Main" => "Main Menu"

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index a00303864a..5f9f0e3904 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -46,7 +46,7 @@ namespace Language_zh_TW {
   LSTR MSG_MEDIA_USB_FAILED               = _UxGT("USBÂïüÂãïÂ§±Êïó");  // "USB start failed"
   LSTR MSG_LCD_ENDSTOPS                   = _UxGT("ÊìãÂ°ä");     // "Endstops" // Max length 8 characters
   LSTR MSG_LCD_SOFT_ENDSTOPS              = _UxGT("ËªüÈ´îÊìãÂ°ä");    // "Soft Endstops"
-  LSTR MSG_MAIN                           = _UxGT("‰∏ªÈÅ∏ÂñÆ");     // "Main"
+  LSTR MSG_MAIN_MENU                      = _UxGT("‰∏ªÈÅ∏ÂñÆ");     // "Main"
   LSTR MSG_ADVANCED_SETTINGS              = _UxGT("ÈÄ≤ÈöéË®≠ÁΩÆ");   // "Advanced Settings"
   LSTR MSG_CONFIGURATION                  = _UxGT("Ë®≠ÁΩÆ");    //Configuration
   LSTR MSG_RUN_AUTO_FILES                 = _UxGT("Ëá™ÂãïÈñãÂßã");     // "Autostart"

commit c63577fd1dacaa232cfcd44a1e9ea1426cd8c0bc
Author: Abdullah YILMAZ <h.abdullahyilmaz@hotmail.com>
Date:   Mon Mar 6 01:29:43 2023 +0300

    üåê Update Turkish language (#25447)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 4ba94f3014..a00303864a 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -388,9 +388,6 @@ namespace Language_zh_TW {
   LSTR MSG_ERR_MINTEMP                    = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶");     // "Err: MINTEMP"
   LSTR MSG_HALTED                         = _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü");     // "PRINTER HALTED"
   LSTR MSG_PLEASE_RESET                   = _UxGT("Ë´ãÈáçÁΩÆ");     // "Please reset"
-  LSTR MSG_SHORT_DAY                      = _UxGT("Â§©");     // "d" // One character only
-  LSTR MSG_SHORT_HOUR                     = _UxGT("ÊôÇ");     // "h" // One character only
-  LSTR MSG_SHORT_MINUTE                   = _UxGT("ÂàÜ");     // "m" // One character only
   LSTR MSG_HEATING                        = _UxGT("Âä†ÁÜ±‰∏≠ ...");     // "Heating..."
   LSTR MSG_COOLING                        = _UxGT("ÂÜ∑Âçª‰∏≠ ...");   // "Cooling..."
   LSTR MSG_BED_HEATING                    = _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠ ...");     // "Bed Heating..."
@@ -490,12 +487,8 @@ namespace Language_zh_TW {
     LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂÆåÊàê.."));     // "Click to finish"
     LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_1_LINE("ÊÅ¢Âæ©‰∏≠ ..."));     // "Resuming..."
   #endif // LCD_HEIGHT < 4
-}
 
-#if FAN_COUNT == 1
-  #define MSG_FIRST_FAN_SPEED       MSG_FAN_SPEED
-  #define MSG_EXTRA_FIRST_FAN_SPEED MSG_EXTRA_FAN_SPEED
-#else
-  #define MSG_FIRST_FAN_SPEED       MSG_FAN_SPEED_N
-  #define MSG_EXTRA_FIRST_FAN_SPEED MSG_EXTRA_FAN_SPEED_N
-#endif
+  LSTR MSG_SHORT_DAY                      = _UxGT("Â§©");     // "d" // One character only
+  LSTR MSG_SHORT_HOUR                     = _UxGT("ÊôÇ");     // "h" // One character only
+  LSTR MSG_SHORT_MINUTE                   = _UxGT("ÂàÜ");     // "m" // One character only
+}

commit 96bc084f3d791bc93265f217181986863e8e5fc7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Feb 18 02:15:16 2023 -0600

    üé® Misc. LCD cleanup (#25400)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 79d4ba75a7..4ba94f3014 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -229,7 +229,7 @@ namespace Language_zh_TW {
   LSTR MSG_MOVE_50MM                      = _UxGT("ÁßªÂãï 50 mm");     // "Move 50mm"
   LSTR MSG_MOVE_100MM                     = _UxGT("ÁßªÂãï 100 mm");    // "Move 100mm"
   LSTR MSG_SPEED                          = _UxGT("ÈÄüÁéá");     // "Speed"
-  LSTR MSG_BED_Z                          = _UxGT("ÁÜ±Â∫äZ");     // "Bed Z"
+  LSTR MSG_MESH_Z_OFFSET                  = _UxGT("ÁÜ±Â∫äZ");     // "Bed Z"
   LSTR MSG_NOZZLE                         = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥");     // "Nozzle" Âô¥Âò¥
   LSTR MSG_NOZZLE_N                       = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ~");
   LSTR MSG_BED                            = " " LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä");     // "Bed"

commit 7e72981b8cbaa7a6276f6833527e97cb10e060e7
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jan 21 22:57:56 2023 -0600

    üö∏ Fix homing_needed_error language

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 6bc00e712a..79d4ba75a7 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -369,7 +369,7 @@ namespace Language_zh_TW {
   LSTR MSG_BLTOUCH_STOW                   = _UxGT("Ë£ùËºâBLTouch");     // "Stow BLTouch"
   LSTR MSG_BLTOUCH_DEPLOY                 = _UxGT("ÈÉ®ÁΩ≤BLTouch");     // "Deploy BLTouch"
 
-  LSTR MSG_HOME_FIRST                     = _UxGT("Ê≠∏‰Ωç %s%s%s ÂÖà");     // "Home ... first"
+  LSTR MSG_HOME_FIRST                     = _UxGT("Ê≠∏‰Ωç %s ÂÖà");     // "Home ... first"
   LSTR MSG_ZPROBE_OFFSETS                 = _UxGT("Êé¢ÈáùÂÅèÁßª");   //Probe Offsets
   LSTR MSG_ZPROBE_XOFFSET                 = _UxGT("Êé¢ÈáùXÂÅèÁßªÈáè");   //Probe X Offset
   LSTR MSG_ZPROBE_YOFFSET                 = _UxGT("Êé¢ÈáùYÂÅèÁßªÈáè");   //Probe Y Offset

commit d94defc545ad477c82a8bc77e949aa91cdd3e0f2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jan 15 06:48:17 2023 -0600

    üé® Language / menu cleanup

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 2aa3554fe8..6bc00e712a 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -249,7 +249,6 @@ namespace Language_zh_TW {
   LSTR MSG_LCD_ON                         = _UxGT("Èñã ");     // "On"
   LSTR MSG_LCD_OFF                        = _UxGT("Èóú ");     // "Off"
 
-  LSTR MSG_SELECT                         = _UxGT("ÈÅ∏Êìá");     // "Select"
   LSTR MSG_SELECT_E                       = _UxGT("ÈÅ∏Êìá *");
   LSTR MSG_ACC                            = _UxGT("Âä†ÈÄüÂ∫¶");     // "Accel" acceleration
   LSTR MSG_JERK                           = _UxGT("ÊäñÂãïÈÄüÁéá");     // "Jerk"

commit 5f831768a2576edc679fe06d9bf41c090fced8e1
Author: mikemerryguy <57319047+mikemerryguy@users.noreply.github.com>
Date:   Sat Nov 26 20:14:05 2022 -0500

    üö∏ Add 50mm manual move (#24884)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 4eba832c4f..2aa3554fe8 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -226,6 +226,7 @@ namespace Language_zh_TW {
   LSTR MSG_MOVE_01MM                      = _UxGT("ÁßªÂãï 0.1 mm");    // "Move 0.1mm"
   LSTR MSG_MOVE_1MM                       = _UxGT("ÁßªÂãï 1 mm");      // "Move 1mm"
   LSTR MSG_MOVE_10MM                      = _UxGT("ÁßªÂãï 10 mm");     // "Move 10mm"
+  LSTR MSG_MOVE_50MM                      = _UxGT("ÁßªÂãï 50 mm");     // "Move 50mm"
   LSTR MSG_MOVE_100MM                     = _UxGT("ÁßªÂãï 100 mm");    // "Move 100mm"
   LSTR MSG_SPEED                          = _UxGT("ÈÄüÁéá");     // "Speed"
   LSTR MSG_BED_Z                          = _UxGT("ÁÜ±Â∫äZ");     // "Bed Z"

commit ed2071aabdebf0c1d9b82b6d8575b8fefae763c4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 18 19:52:47 2022 -0500

    ü©π Fix manual move titles (#24518)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index b35a486e4f..4eba832c4f 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -218,6 +218,7 @@ namespace Language_zh_TW {
   LSTR MSG_MOVE_X                         = _UxGT("ÁßªÂãïX");     // "Move X"
   LSTR MSG_MOVE_Y                         = _UxGT("ÁßªÂãïY");     // "Move Y"
   LSTR MSG_MOVE_Z                         = _UxGT("ÁßªÂãïZ");     // "Move Z"
+  LSTR MSG_MOVE_N                         = _UxGT("ÁßªÂãïQ");     // "Move @"
   LSTR MSG_MOVE_E                         = _UxGT("Êì†Âá∫Ê©ü");     // "Extruder"
   LSTR MSG_MOVE_EN                        = _UxGT("Êì†Âá∫Ê©ü *");       // "Extruder *"
   LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†");   // "Hotend too cold"

commit 546b3066c3b45f0511e3a6c068d85f30a41e9d15
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jun 24 22:07:06 2022 -0500

    üåê Drop unused delta strings

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 5f7c85c838..b35a486e4f 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -403,8 +403,6 @@ namespace Language_zh_TW {
   LSTR MSG_DELTA_CALIBRATE_CENTER         = _UxGT("‚äøÊ†°Ê∫ñ‰∏≠ÂøÉ");     // "Calibrate Center"
   LSTR MSG_DELTA_SETTINGS                 = _UxGT("‚äøË®≠ÁΩÆ");     // "Delta Settings"
   LSTR MSG_DELTA_AUTO_CALIBRATE           = _UxGT("‚äøËá™ÂãïÊ†°Ê∫ñ");     // "Auto Calibration"
-  LSTR MSG_DELTA_HEIGHT_CALIBRATE         = _UxGT("Ë®≠ÁΩÆ‚äøÈ´òÂ∫¶");     // "Set Delta Height"
-  LSTR MSG_DELTA_Z_OFFSET_CALIBRATE       = _UxGT("ZÂÅèÁßª");
   LSTR MSG_DELTA_DIAG_ROD                 = _UxGT("‚äøÊñúÊü±");     // "Diag Rod"
   LSTR MSG_DELTA_HEIGHT                   = _UxGT("‚äøÈ´òÂ∫¶");     // "Height"
   LSTR MSG_DELTA_RADIUS                   = _UxGT("‚äøÂçäÂæë");     // "Radius"

commit 8aca38351cd6d33a1202bf9a13890dc8e5eadd49
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Jun 3 22:56:38 2022 -0500

    üßë‚Äçüíª Extend LCD string substitution (#24278)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 3c0acd5fa8..5f7c85c838 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -221,7 +221,7 @@ namespace Language_zh_TW {
   LSTR MSG_MOVE_E                         = _UxGT("Êì†Âá∫Ê©ü");     // "Extruder"
   LSTR MSG_MOVE_EN                        = _UxGT("Êì†Âá∫Ê©ü *");       // "Extruder *"
   LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†");   // "Hotend too cold"
-  LSTR MSG_MOVE_N_MM                      = _UxGT("ÁßªÂãï %s mm");     // "Move 0.025mm"
+  LSTR MSG_MOVE_N_MM                      = _UxGT("ÁßªÂãï $ mm");      // "Move 0.025mm"
   LSTR MSG_MOVE_01MM                      = _UxGT("ÁßªÂãï 0.1 mm");    // "Move 0.1mm"
   LSTR MSG_MOVE_1MM                       = _UxGT("ÁßªÂãï 1 mm");      // "Move 1mm"
   LSTR MSG_MOVE_10MM                      = _UxGT("ÁßªÂãï 10 mm");     // "Move 10mm"
@@ -254,19 +254,15 @@ namespace Language_zh_TW {
   LSTR MSG_VA_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_A;     // "Va-jerk"
   LSTR MSG_VB_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_B;
   LSTR MSG_VC_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_C;
-  LSTR MSG_VI_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_I;
-  LSTR MSG_VJ_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_J;
-  LSTR MSG_VK_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_K;
+  LSTR MSG_VN_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá@");
   LSTR MSG_VE_JERK                        = _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá");
 
-  LSTR MSG_VELOCITY                       = _UxGT("ÈÄüÂ∫¶");     // "Velocity"
+  LSTR MSG_MAX_SPEED                      = _UxGT("ÈÄüÂ∫¶");     // "Velocity"
   LSTR MSG_VMAX_A                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_A;     // "Vmax " max_feedrate_mm_s
   LSTR MSG_VMAX_B                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_B;
   LSTR MSG_VMAX_C                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_C;
-  LSTR MSG_VMAX_I                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_I;
-  LSTR MSG_VMAX_J                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_J;
-  LSTR MSG_VMAX_K                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_K;
-  LSTR MSG_VMAX_E                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_E;
+  LSTR MSG_VMAX_N                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá@");
+  LSTR MSG_VMAX_E                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéáE");
   LSTR MSG_VMAX_EN                        = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá *");     // "Vmax " max_feedrate_mm_s
   LSTR MSG_VMIN                           = _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá");     // "Vmin"  min_feedrate_mm_s
   LSTR MSG_VTRAV_MIN                      = _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá");     // "VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
@@ -274,10 +270,8 @@ namespace Language_zh_TW {
   LSTR MSG_AMAX_A                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_A;     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
   LSTR MSG_AMAX_B                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_B;
   LSTR MSG_AMAX_C                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_C;
-  LSTR MSG_AMAX_I                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_I;
-  LSTR MSG_AMAX_J                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_J;
-  LSTR MSG_AMAX_K                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_K;
-  LSTR MSG_AMAX_E                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_E;
+  LSTR MSG_AMAX_N                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶@");
+  LSTR MSG_AMAX_E                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶E");
   LSTR MSG_AMAX_EN                        = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ *");     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
   LSTR MSG_A_RETRACT                      = _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶");     // "A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
   LSTR MSG_A_TRAVEL                       = _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶");     // "A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
@@ -285,9 +279,7 @@ namespace Language_zh_TW {
   LSTR MSG_A_STEPS                        = STR_A _UxGT(" Ëª∏Ê≠•Êï∏/mm");     // "Asteps/mm" axis_steps_per_mm, axis steps-per-unit G92
   LSTR MSG_B_STEPS                        = STR_B _UxGT(" Ëª∏Ê≠•Êï∏/mm");
   LSTR MSG_C_STEPS                        = STR_C _UxGT(" Ëª∏Ê≠•Êï∏/mm");
-  LSTR MSG_I_STEPS                        = STR_I _UxGT(" Ëª∏Ê≠•Êï∏/mm");
-  LSTR MSG_J_STEPS                        = STR_J _UxGT(" Ëª∏Ê≠•Êï∏/mm");
-  LSTR MSG_K_STEPS                        = STR_K _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  LSTR MSG_N_STEPS                        = _UxGT("@ Ëª∏Ê≠•Êï∏/mm");
   LSTR MSG_E_STEPS                        = _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm");     // "Esteps/mm"
   LSTR MSG_EN_STEPS                       = _UxGT("Êì†Âá∫Ê©ü~Ê≠•Êï∏/mm");
   LSTR MSG_TEMPERATURE                    = _UxGT("Ê∫´Â∫¶");     // "Temperature"
@@ -454,13 +446,7 @@ namespace Language_zh_TW {
   LSTR MSG_INFO_MAX_TEMP                  = _UxGT("ÊúÄÈ´òÊ∫´Â∫¶");     // "Max Temp"
   LSTR MSG_INFO_PSU                       = _UxGT("ÈõªÊ∫ê‰æõÊáâ");     // "Power Supply"
   LSTR MSG_DRIVE_STRENGTH                 = _UxGT("È©ÖÂãïÂäõÂ∫¶");     // "Drive Strength"
-  LSTR MSG_DAC_PERCENT_A                  = STR_A _UxGT(" È©ÖÂãï %");    // X Driver %
-  LSTR MSG_DAC_PERCENT_B                  = STR_B _UxGT(" È©ÖÂãï %");    // Y Driver %
-  LSTR MSG_DAC_PERCENT_C                  = STR_C _UxGT(" È©ÖÂãï %");    // Z Driver %
-  LSTR MSG_DAC_PERCENT_I                  = STR_I _UxGT(" È©ÖÂãï %");    // I Driver %
-  LSTR MSG_DAC_PERCENT_J                  = STR_J _UxGT(" È©ÖÂãï %");    // J Driver %
-  LSTR MSG_DAC_PERCENT_K                  = STR_K _UxGT(" È©ÖÂãï %");    // K Driver %
-  LSTR MSG_DAC_PERCENT_E                  = _UxGT("E È©ÖÂãï %");    //E Driver %
+  LSTR MSG_DAC_PERCENT_N                  = _UxGT("@ È©ÖÂãï %");    //E Driver %
   LSTR MSG_ERROR_TMC                      = _UxGT("TMCÈÄ£Êé•ÈåØË™§");   // "TMC CONNECTION ERROR"
   LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("‰øùÂ≠òÈ©ÖÂãïË®≠ÁΩÆ");     // "DAC EEPROM Write"
   LSTR MSG_FILAMENT_CHANGE_HEADER         = _UxGT("Êõ¥ÊèõÁµ≤Êñô");   // "FILAMENT CHANGE"

commit 23a26e4033763b4c7b8763fd420211423e558d08
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed May 4 17:03:25 2022 -0500

    üåê Clean up languages

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 6c91cc1fec..3c0acd5fa8 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -65,7 +65,6 @@ namespace Language_zh_TW {
   LSTR MSG_Z_FADE_HEIGHT                  = _UxGT("Ê∑°Âá∫È´òÂ∫¶");     // "Fade Height"
   LSTR MSG_SET_HOME_OFFSETS               = _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª");     // "Set home offsets"
   LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®");     // "Offsets applied"
-  LSTR MSG_SET_ORIGIN                     = _UxGT("Ë®≠ÁΩÆÂéüÈªû");     // "Set origin"
   #if HAS_PREHEAT
     LSTR MSG_PREHEAT_1                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL;     // "Preheat PREHEAT_1_LABEL"
     LSTR MSG_PREHEAT_1_H                  = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~";     // "Preheat PREHEAT_1_LABEL"

commit 9665a4434cee0386fa2a63a058b6f2598943ee98
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Jan 10 02:51:34 2022 -0600

    üßë‚Äçüíª Fewer string macros

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index f168679e4a..6c91cc1fec 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -252,43 +252,43 @@ namespace Language_zh_TW {
   LSTR MSG_SELECT_E                       = _UxGT("ÈÅ∏Êìá *");
   LSTR MSG_ACC                            = _UxGT("Âä†ÈÄüÂ∫¶");     // "Accel" acceleration
   LSTR MSG_JERK                           = _UxGT("ÊäñÂãïÈÄüÁéá");     // "Jerk"
-  LSTR MSG_VA_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_A;     // "Va-jerk"
-  LSTR MSG_VB_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_B;
-  LSTR MSG_VC_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_C;
-  LSTR MSG_VI_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_I;
-  LSTR MSG_VJ_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_J;
-  LSTR MSG_VK_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_K;
+  LSTR MSG_VA_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_A;     // "Va-jerk"
+  LSTR MSG_VB_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_B;
+  LSTR MSG_VC_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_C;
+  LSTR MSG_VI_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_I;
+  LSTR MSG_VJ_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_J;
+  LSTR MSG_VK_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") STR_K;
   LSTR MSG_VE_JERK                        = _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá");
 
   LSTR MSG_VELOCITY                       = _UxGT("ÈÄüÂ∫¶");     // "Velocity"
-  LSTR MSG_VMAX_A                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_A;     // "Vmax " max_feedrate_mm_s
-  LSTR MSG_VMAX_B                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_B;
-  LSTR MSG_VMAX_C                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_C;
-  LSTR MSG_VMAX_I                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_I;
-  LSTR MSG_VMAX_J                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_J;
-  LSTR MSG_VMAX_K                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_K;
-  LSTR MSG_VMAX_E                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_E;
+  LSTR MSG_VMAX_A                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_A;     // "Vmax " max_feedrate_mm_s
+  LSTR MSG_VMAX_B                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_B;
+  LSTR MSG_VMAX_C                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_C;
+  LSTR MSG_VMAX_I                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_I;
+  LSTR MSG_VMAX_J                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_J;
+  LSTR MSG_VMAX_K                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_K;
+  LSTR MSG_VMAX_E                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") STR_E;
   LSTR MSG_VMAX_EN                        = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá *");     // "Vmax " max_feedrate_mm_s
   LSTR MSG_VMIN                           = _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá");     // "Vmin"  min_feedrate_mm_s
   LSTR MSG_VTRAV_MIN                      = _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá");     // "VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
   LSTR MSG_ACCELERATION                   = _UxGT("Âä†ÈÄüÂ∫¶");     // "Acceleration"
-  LSTR MSG_AMAX_A                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_A;     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
-  LSTR MSG_AMAX_B                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_B;
-  LSTR MSG_AMAX_C                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_C;
-  LSTR MSG_AMAX_I                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_I;
-  LSTR MSG_AMAX_J                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_J;
-  LSTR MSG_AMAX_K                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_K;
-  LSTR MSG_AMAX_E                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_E;
+  LSTR MSG_AMAX_A                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_A;     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
+  LSTR MSG_AMAX_B                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_B;
+  LSTR MSG_AMAX_C                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_C;
+  LSTR MSG_AMAX_I                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_I;
+  LSTR MSG_AMAX_J                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_J;
+  LSTR MSG_AMAX_K                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_K;
+  LSTR MSG_AMAX_E                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") STR_E;
   LSTR MSG_AMAX_EN                        = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ *");     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
   LSTR MSG_A_RETRACT                      = _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶");     // "A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
   LSTR MSG_A_TRAVEL                       = _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶");     // "A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
   LSTR MSG_STEPS_PER_MM                   = _UxGT("Ëª∏Ê≠•Êï∏/mm");     // "Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
-  LSTR MSG_A_STEPS                        = LCD_STR_A _UxGT(" Ëª∏Ê≠•Êï∏/mm");     // "Asteps/mm" axis_steps_per_mm, axis steps-per-unit G92
-  LSTR MSG_B_STEPS                        = LCD_STR_B _UxGT(" Ëª∏Ê≠•Êï∏/mm");
-  LSTR MSG_C_STEPS                        = LCD_STR_C _UxGT(" Ëª∏Ê≠•Êï∏/mm");
-  LSTR MSG_I_STEPS                        = LCD_STR_I _UxGT(" Ëª∏Ê≠•Êï∏/mm");
-  LSTR MSG_J_STEPS                        = LCD_STR_J _UxGT(" Ëª∏Ê≠•Êï∏/mm");
-  LSTR MSG_K_STEPS                        = LCD_STR_K _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  LSTR MSG_A_STEPS                        = STR_A _UxGT(" Ëª∏Ê≠•Êï∏/mm");     // "Asteps/mm" axis_steps_per_mm, axis steps-per-unit G92
+  LSTR MSG_B_STEPS                        = STR_B _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  LSTR MSG_C_STEPS                        = STR_C _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  LSTR MSG_I_STEPS                        = STR_I _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  LSTR MSG_J_STEPS                        = STR_J _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  LSTR MSG_K_STEPS                        = STR_K _UxGT(" Ëª∏Ê≠•Êï∏/mm");
   LSTR MSG_E_STEPS                        = _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm");     // "Esteps/mm"
   LSTR MSG_EN_STEPS                       = _UxGT("Êì†Âá∫Ê©ü~Ê≠•Êï∏/mm");
   LSTR MSG_TEMPERATURE                    = _UxGT("Ê∫´Â∫¶");     // "Temperature"
@@ -455,12 +455,12 @@ namespace Language_zh_TW {
   LSTR MSG_INFO_MAX_TEMP                  = _UxGT("ÊúÄÈ´òÊ∫´Â∫¶");     // "Max Temp"
   LSTR MSG_INFO_PSU                       = _UxGT("ÈõªÊ∫ê‰æõÊáâ");     // "Power Supply"
   LSTR MSG_DRIVE_STRENGTH                 = _UxGT("È©ÖÂãïÂäõÂ∫¶");     // "Drive Strength"
-  LSTR MSG_DAC_PERCENT_A                  = LCD_STR_A _UxGT(" È©ÖÂãï %");    // X Driver %
-  LSTR MSG_DAC_PERCENT_B                  = LCD_STR_B _UxGT(" È©ÖÂãï %");    // Y Driver %
-  LSTR MSG_DAC_PERCENT_C                  = LCD_STR_C _UxGT(" È©ÖÂãï %");    // Z Driver %
-  LSTR MSG_DAC_PERCENT_I                  = LCD_STR_I _UxGT(" È©ÖÂãï %");    // I Driver %
-  LSTR MSG_DAC_PERCENT_J                  = LCD_STR_J _UxGT(" È©ÖÂãï %");    // J Driver %
-  LSTR MSG_DAC_PERCENT_K                  = LCD_STR_K _UxGT(" È©ÖÂãï %");    // K Driver %
+  LSTR MSG_DAC_PERCENT_A                  = STR_A _UxGT(" È©ÖÂãï %");    // X Driver %
+  LSTR MSG_DAC_PERCENT_B                  = STR_B _UxGT(" È©ÖÂãï %");    // Y Driver %
+  LSTR MSG_DAC_PERCENT_C                  = STR_C _UxGT(" È©ÖÂãï %");    // Z Driver %
+  LSTR MSG_DAC_PERCENT_I                  = STR_I _UxGT(" È©ÖÂãï %");    // I Driver %
+  LSTR MSG_DAC_PERCENT_J                  = STR_J _UxGT(" È©ÖÂãï %");    // J Driver %
+  LSTR MSG_DAC_PERCENT_K                  = STR_K _UxGT(" È©ÖÂãï %");    // K Driver %
   LSTR MSG_DAC_PERCENT_E                  = _UxGT("E È©ÖÂãï %");    //E Driver %
   LSTR MSG_ERROR_TMC                      = _UxGT("TMCÈÄ£Êé•ÈåØË™§");   // "TMC CONNECTION ERROR"
   LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("‰øùÂ≠òÈ©ÖÂãïË®≠ÁΩÆ");     // "DAC EEPROM Write"

commit d58daaa42c8e238b3e1eba4041ca5bcfa497c61f
Author: Miguel Risco-Castillo <mriscoc@users.noreply.github.com>
Date:   Tue Dec 28 00:23:50 2021 -0500

    üö∏ DWIN Enhanced improve, fix, and extend (#23240)
    
    - Offset icon change to show mesh leveling status
    - Reset extruder position when enter to Move menu
    - New live end-stop diagnostic page
    - Editable firmware retracts settings for Tune and filament settings menu
    - Print Statistics page accessible from the Advanced Settings menu
    - Reset printer draws the boot image
    - Adds individual axes homing menu
    - Adds probe deploy/stow to Probe Settings menu
    - Updates lock screen
    - Rebuilds main buttons to support text caption in other languages
    - Increases probe offset limits to 60 mm
    - Fix M303 PID variable update
    - Fix Resume/Pause button update
    - Fix redraw of print done
    - Fix very large file name bug
    - Fix bug in bed manual leveling

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 7680721b00..f168679e4a 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -437,7 +437,7 @@ namespace Language_zh_TW {
   LSTR MSG_CASE_LIGHT_BRIGHTNESS          = _UxGT("Ááà‰∫ÆÂ∫¶");     // "Light BRIGHTNESS"
   LSTR MSG_KILL_EXPECTED_PRINTER          = _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫");     // "The printer is incorrect"
 
-  #if LCD_WIDTH >= 20
+  #if LCD_WIDTH >= 20 || HAS_DWIN_E3V2
     LSTR MSG_INFO_PRINT_COUNT             = _UxGT("ÂàóÂç∞Ë®àÊï∏");     // "Print Count"
     LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("Â∑≤ÂÆåÊàê");     // "Completed"
     LSTR MSG_INFO_PRINT_TIME              = _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì");     // "Total print time"

commit 1d80464ba77bc576426f15af28a633bf48d769ad
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Oct 27 21:15:58 2021 -0500

    üé® Define HAS_PREHEAT conditional

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 01b11225e3..7680721b00 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -66,7 +66,7 @@ namespace Language_zh_TW {
   LSTR MSG_SET_HOME_OFFSETS               = _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª");     // "Set home offsets"
   LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®");     // "Offsets applied"
   LSTR MSG_SET_ORIGIN                     = _UxGT("Ë®≠ÁΩÆÂéüÈªû");     // "Set origin"
-  #if PREHEAT_COUNT
+  #if HAS_PREHEAT
     LSTR MSG_PREHEAT_1                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL;     // "Preheat PREHEAT_1_LABEL"
     LSTR MSG_PREHEAT_1_H                  = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~";     // "Preheat PREHEAT_1_LABEL"
     LSTR MSG_PREHEAT_1_END                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥");     //MSG_PREHEAT_1 " "
@@ -139,7 +139,7 @@ namespace Language_zh_TW {
   LSTR MSG_UBL_DONE_EDITING_MESH          = _UxGT("ÂÆåÊàêÁ∑®ËºØÁ∂≤Ê†º");     // "Done Editing Mesh"
   LSTR MSG_UBL_BUILD_CUSTOM_MESH          = _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º");     // "Build Custom Mesh"
   LSTR MSG_UBL_BUILD_MESH_MENU            = _UxGT("ÂâµË®≠Á∂≤Ê†º");     // "Build Mesh"
-  #if PREHEAT_COUNT
+  #if HAS_PREHEAT
     LSTR MSG_UBL_BUILD_MESH_M             = _UxGT("ÂâµË®≠ $ Á∂≤Ê†º");     // "Build PREHEAT_1_LABEL Mesh"
     LSTR MSG_UBL_VALIDATE_MESH_M          = _UxGT("ÊâπÂáÜ $ Á∂≤Ê†º");     // "Validate PREHEAT_1_LABEL Mesh"
   #endif

commit 54d400608db83bfa606e1b757589c169c9a38fc2
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Oct 4 00:24:41 2021 -0500

    üé® Axis name string interpolation, with examples (#22879)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index fd43fefd29..01b11225e3 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -116,9 +116,8 @@ namespace Language_zh_TW {
   LSTR MSG_IDEX_MODE_DUPLICATE            = _UxGT("Duplication");
   LSTR MSG_IDEX_MODE_MIRRORED_COPY        = _UxGT("Mirrored Copy");
   LSTR MSG_IDEX_MODE_FULL_CTRL            = _UxGT("Full Control");
-  LSTR MSG_HOTEND_OFFSET_X                = _UxGT("2nd Nozzle X");
-  LSTR MSG_HOTEND_OFFSET_Y                = _UxGT("2nd Nozzle Y");
   LSTR MSG_HOTEND_OFFSET_Z                = _UxGT("2nd Nozzle Z");
+  LSTR MSG_HOTEND_OFFSET_A                = _UxGT("2nd Nozzle @");
   LSTR MSG_UBL_DOING_G29                  = _UxGT("Âü∑Ë°åG29");     // "Doing G29"
   LSTR MSG_UBL_TOOLS                      = _UxGT("UBLÂ∑•ÂÖ∑");     // "UBL Tools"
   LSTR MSG_UBL_LEVEL_BED                  = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"

commit 216a66b42c8240f37befe98e6a410d1e3694ff4e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Sep 19 19:25:01 2021 -0500

    üåê Skip non-essential translations

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 42bb5be080..fd43fefd29 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -34,7 +34,6 @@ namespace Language_zh_TW {
   LSTR LANGUAGE                           = _UxGT("Traditional Chinese");
 
   LSTR WELCOME_MSG                        = MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.");     // " ready."
-  LSTR MSG_MARLIN                         = _UxGT("Marlin");
   LSTR MSG_YES                            = _UxGT("ÊòØ");  // "YES"
   LSTR MSG_NO                             = _UxGT("Âê¶");  // "NO"
   LSTR MSG_BACK                           = _UxGT("ËøîÂõû");     // "Back"

commit c1d7e234e1aba1ecc91cfc77d17d38b67618c315
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Sep 19 18:40:56 2021 -0500

    üåê Reduce language file sizes

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 467a2467f5..42bb5be080 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -30,483 +30,483 @@
 namespace Language_zh_TW {
   using namespace Language_en;  // Inherit undefined strings from English
 
-  constexpr uint8_t    CHARSIZE                            = 3;
-  PROGMEM Language_Str LANGUAGE                            = _UxGT("Traditional Chinese");
+  constexpr uint8_t CHARSIZE              = 3;
+  LSTR LANGUAGE                           = _UxGT("Traditional Chinese");
 
-  PROGMEM Language_Str WELCOME_MSG                         = MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.");     // " ready."
-  PROGMEM Language_Str MSG_MARLIN                          = _UxGT("Marlin");
-  PROGMEM Language_Str MSG_YES                             = _UxGT("ÊòØ");  // "YES"
-  PROGMEM Language_Str MSG_NO                              = _UxGT("Âê¶");  // "NO"
-  PROGMEM Language_Str MSG_BACK                            = _UxGT("ËøîÂõû");     // "Back"
-  PROGMEM Language_Str MSG_MEDIA_ABORTING                  = _UxGT("Ê≠£Âú®‰∏≠Ê≠¢...");   // "Aborting..."
-  PROGMEM Language_Str MSG_MEDIA_INSERTED                  = _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•");     // "Card inserted"
-  PROGMEM Language_Str MSG_MEDIA_REMOVED                   = _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫");     // "Card removed"
-  PROGMEM Language_Str MSG_MEDIA_WAITING                   = _UxGT("Á≠âÂæÖË®òÊÜ∂Âç°");    // "Waiting for media"
-  PROGMEM Language_Str MSG_MEDIA_READ_ERROR                = _UxGT("Ë®òÊÜ∂Âç°ËÆÄÂèñÈåØË™§"); //"Media read error"
-  PROGMEM Language_Str MSG_MEDIA_USB_REMOVED               = _UxGT("USBË£ùÁΩÆÂ∑≤ÁßªÈô§");   // "USB device removed"
-  PROGMEM Language_Str MSG_MEDIA_USB_FAILED                = _UxGT("USBÂïüÂãïÂ§±Êïó");  // "USB start failed"
-  PROGMEM Language_Str MSG_LCD_ENDSTOPS                    = _UxGT("ÊìãÂ°ä");     // "Endstops" // Max length 8 characters
-  PROGMEM Language_Str MSG_LCD_SOFT_ENDSTOPS               = _UxGT("ËªüÈ´îÊìãÂ°ä");    // "Soft Endstops"
-  PROGMEM Language_Str MSG_MAIN                            = _UxGT("‰∏ªÈÅ∏ÂñÆ");     // "Main"
-  PROGMEM Language_Str MSG_ADVANCED_SETTINGS               = _UxGT("ÈÄ≤ÈöéË®≠ÁΩÆ");   // "Advanced Settings"
-  PROGMEM Language_Str MSG_CONFIGURATION                   = _UxGT("Ë®≠ÁΩÆ");    //Configuration
-  PROGMEM Language_Str MSG_RUN_AUTO_FILES                  = _UxGT("Ëá™ÂãïÈñãÂßã");     // "Autostart"
-  PROGMEM Language_Str MSG_DISABLE_STEPPERS                = _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È¶¨ÈÅî");     // "Disable steppers"
-  PROGMEM Language_Str MSG_DEBUG_MENU                      = _UxGT("Èô§ÈåØÈÅ∏ÂñÆ");     // "Debug Menu"
-  PROGMEM Language_Str MSG_PROGRESS_BAR_TEST               = _UxGT("ÈÄ≤Â∫¶Ê¢ùÊ∏¨Ë©¶");     // "Progress Bar Test"
-  PROGMEM Language_Str MSG_AUTO_HOME                       = _UxGT("Ëá™ÂãïÂõûÂéüÈªû");     // "Auto home"
-  PROGMEM Language_Str MSG_AUTO_HOME_X                     = _UxGT("ÂõûXÂéüÈªû");     // "Home X"
-  PROGMEM Language_Str MSG_AUTO_HOME_Y                     = _UxGT("ÂõûYÂéüÈªû");     // "Home Y"
-  PROGMEM Language_Str MSG_AUTO_HOME_Z                     = _UxGT("ÂõûZÂéüÈªû");     // "Home Z"
-  PROGMEM Language_Str MSG_AUTO_Z_ALIGN                    = _UxGT("Ëá™ÂãïZÂ∞çÈΩä");   // "Auto Z-Align"
-  PROGMEM Language_Str MSG_LEVEL_BED_HOMING                = _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏ÂéüÈªû");     // "Homing XYZ"
-  PROGMEM Language_Str MSG_LEVEL_BED_WAITING               = _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥");     // "Click to Begin"
-  PROGMEM Language_Str MSG_LEVEL_BED_NEXT_POINT            = _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû");     // "Next Point"
-  PROGMEM Language_Str MSG_LEVEL_BED_DONE                  = _UxGT("ÂÆåÊàêÁÜ±Â∫äË™øÂπ≥");     // "Leveling Done!"
-  PROGMEM Language_Str MSG_Z_FADE_HEIGHT                   = _UxGT("Ê∑°Âá∫È´òÂ∫¶");     // "Fade Height"
-  PROGMEM Language_Str MSG_SET_HOME_OFFSETS                = _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª");     // "Set home offsets"
-  PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®");     // "Offsets applied"
-  PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("Ë®≠ÁΩÆÂéüÈªû");     // "Set origin"
+  LSTR WELCOME_MSG                        = MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.");     // " ready."
+  LSTR MSG_MARLIN                         = _UxGT("Marlin");
+  LSTR MSG_YES                            = _UxGT("ÊòØ");  // "YES"
+  LSTR MSG_NO                             = _UxGT("Âê¶");  // "NO"
+  LSTR MSG_BACK                           = _UxGT("ËøîÂõû");     // "Back"
+  LSTR MSG_MEDIA_ABORTING                 = _UxGT("Ê≠£Âú®‰∏≠Ê≠¢...");   // "Aborting..."
+  LSTR MSG_MEDIA_INSERTED                 = _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•");     // "Card inserted"
+  LSTR MSG_MEDIA_REMOVED                  = _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫");     // "Card removed"
+  LSTR MSG_MEDIA_WAITING                  = _UxGT("Á≠âÂæÖË®òÊÜ∂Âç°");    // "Waiting for media"
+  LSTR MSG_MEDIA_READ_ERROR               = _UxGT("Ë®òÊÜ∂Âç°ËÆÄÂèñÈåØË™§"); //"Media read error"
+  LSTR MSG_MEDIA_USB_REMOVED              = _UxGT("USBË£ùÁΩÆÂ∑≤ÁßªÈô§");   // "USB device removed"
+  LSTR MSG_MEDIA_USB_FAILED               = _UxGT("USBÂïüÂãïÂ§±Êïó");  // "USB start failed"
+  LSTR MSG_LCD_ENDSTOPS                   = _UxGT("ÊìãÂ°ä");     // "Endstops" // Max length 8 characters
+  LSTR MSG_LCD_SOFT_ENDSTOPS              = _UxGT("ËªüÈ´îÊìãÂ°ä");    // "Soft Endstops"
+  LSTR MSG_MAIN                           = _UxGT("‰∏ªÈÅ∏ÂñÆ");     // "Main"
+  LSTR MSG_ADVANCED_SETTINGS              = _UxGT("ÈÄ≤ÈöéË®≠ÁΩÆ");   // "Advanced Settings"
+  LSTR MSG_CONFIGURATION                  = _UxGT("Ë®≠ÁΩÆ");    //Configuration
+  LSTR MSG_RUN_AUTO_FILES                 = _UxGT("Ëá™ÂãïÈñãÂßã");     // "Autostart"
+  LSTR MSG_DISABLE_STEPPERS               = _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È¶¨ÈÅî");     // "Disable steppers"
+  LSTR MSG_DEBUG_MENU                     = _UxGT("Èô§ÈåØÈÅ∏ÂñÆ");     // "Debug Menu"
+  LSTR MSG_PROGRESS_BAR_TEST              = _UxGT("ÈÄ≤Â∫¶Ê¢ùÊ∏¨Ë©¶");     // "Progress Bar Test"
+  LSTR MSG_AUTO_HOME                      = _UxGT("Ëá™ÂãïÂõûÂéüÈªû");     // "Auto home"
+  LSTR MSG_AUTO_HOME_X                    = _UxGT("ÂõûXÂéüÈªû");     // "Home X"
+  LSTR MSG_AUTO_HOME_Y                    = _UxGT("ÂõûYÂéüÈªû");     // "Home Y"
+  LSTR MSG_AUTO_HOME_Z                    = _UxGT("ÂõûZÂéüÈªû");     // "Home Z"
+  LSTR MSG_AUTO_Z_ALIGN                   = _UxGT("Ëá™ÂãïZÂ∞çÈΩä");   // "Auto Z-Align"
+  LSTR MSG_LEVEL_BED_HOMING               = _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏ÂéüÈªû");     // "Homing XYZ"
+  LSTR MSG_LEVEL_BED_WAITING              = _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥");     // "Click to Begin"
+  LSTR MSG_LEVEL_BED_NEXT_POINT           = _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû");     // "Next Point"
+  LSTR MSG_LEVEL_BED_DONE                 = _UxGT("ÂÆåÊàêÁÜ±Â∫äË™øÂπ≥");     // "Leveling Done!"
+  LSTR MSG_Z_FADE_HEIGHT                  = _UxGT("Ê∑°Âá∫È´òÂ∫¶");     // "Fade Height"
+  LSTR MSG_SET_HOME_OFFSETS               = _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª");     // "Set home offsets"
+  LSTR MSG_HOME_OFFSETS_APPLIED           = _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®");     // "Offsets applied"
+  LSTR MSG_SET_ORIGIN                     = _UxGT("Ë®≠ÁΩÆÂéüÈªû");     // "Set origin"
   #if PREHEAT_COUNT
-    PROGMEM Language_Str MSG_PREHEAT_1                     = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL;     // "Preheat PREHEAT_1_LABEL"
-    PROGMEM Language_Str MSG_PREHEAT_1_H                   = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~";     // "Preheat PREHEAT_1_LABEL"
-    PROGMEM Language_Str MSG_PREHEAT_1_END                 = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥");     //MSG_PREHEAT_1 " "
-    PROGMEM Language_Str MSG_PREHEAT_1_END_E               = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ~");   //MSG_PREHEAT_1 " "
-    PROGMEM Language_Str MSG_PREHEAT_1_ALL                 = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
-    PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY             = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
-    PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS            = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
+    LSTR MSG_PREHEAT_1                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL;     // "Preheat PREHEAT_1_LABEL"
+    LSTR MSG_PREHEAT_1_H                  = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~";     // "Preheat PREHEAT_1_LABEL"
+    LSTR MSG_PREHEAT_1_END                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥");     //MSG_PREHEAT_1 " "
+    LSTR MSG_PREHEAT_1_END_E              = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ~");   //MSG_PREHEAT_1 " "
+    LSTR MSG_PREHEAT_1_ALL                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
+    LSTR MSG_PREHEAT_1_BEDONLY            = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
+    LSTR MSG_PREHEAT_1_SETTINGS           = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
 
-    PROGMEM Language_Str MSG_PREHEAT_M                     = _UxGT("È†êÁÜ± $");     // "Preheat PREHEAT_1_LABEL"
-    PROGMEM Language_Str MSG_PREHEAT_M_H                   = _UxGT("È†êÁÜ± $ ~");     // "Preheat PREHEAT_1_LABEL"
-    PROGMEM Language_Str MSG_PREHEAT_M_END                 = _UxGT("È†êÁÜ± $ Âô¥Âò¥");     //MSG_PREHEAT_1 " "
-    PROGMEM Language_Str MSG_PREHEAT_M_END_E               = _UxGT("È†êÁÜ± $ Âô¥Âò¥ ~");   //MSG_PREHEAT_1 " "
-    PROGMEM Language_Str MSG_PREHEAT_M_ALL                 = _UxGT("È†êÁÜ± $ ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
-    PROGMEM Language_Str MSG_PREHEAT_M_BEDONLY             = _UxGT("È†êÁÜ± $ ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
-    PROGMEM Language_Str MSG_PREHEAT_M_SETTINGS            = _UxGT("È†êÁÜ± $ Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
+    LSTR MSG_PREHEAT_M                    = _UxGT("È†êÁÜ± $");     // "Preheat PREHEAT_1_LABEL"
+    LSTR MSG_PREHEAT_M_H                  = _UxGT("È†êÁÜ± $ ~");     // "Preheat PREHEAT_1_LABEL"
+    LSTR MSG_PREHEAT_M_END                = _UxGT("È†êÁÜ± $ Âô¥Âò¥");     //MSG_PREHEAT_1 " "
+    LSTR MSG_PREHEAT_M_END_E              = _UxGT("È†êÁÜ± $ Âô¥Âò¥ ~");   //MSG_PREHEAT_1 " "
+    LSTR MSG_PREHEAT_M_ALL                = _UxGT("È†êÁÜ± $ ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
+    LSTR MSG_PREHEAT_M_BEDONLY            = _UxGT("È†êÁÜ± $ ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
+    LSTR MSG_PREHEAT_M_SETTINGS           = _UxGT("È†êÁÜ± $ Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
   #endif
-  PROGMEM Language_Str MSG_PREHEAT_CUSTOM                  = _UxGT("Ëá™ÂÆöÈ†êÁÜ±");   // "Preheat Custom"
-  PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("ÈôçÊ∫´");     // "Cooldown"
-  PROGMEM Language_Str MSG_LASER_MENU                      = _UxGT("ÊøÄÂÖâÊéßÂà∂");    // "Laser Control"
-  PROGMEM Language_Str MSG_LASER_POWER                     = _UxGT("ÊøÄÂÖâÈõªÊ∫ê");    // "Laser Power"
-  PROGMEM Language_Str MSG_SPINDLE_MENU                    = _UxGT("‰∏ªËª∏ÊéßÂëäÂà∂");    // "Spindle Control"
-  PROGMEM Language_Str MSG_SPINDLE_POWER                   = _UxGT("‰∏ªËª∏ÈõªÊ∫ê");    // "Spindle Power"
-  PROGMEM Language_Str MSG_SPINDLE_REVERSE                 = _UxGT("‰∏ªËª∏ÂèçËΩâ");  // "Spindle Reverse"
-  PROGMEM Language_Str MSG_SWITCH_PS_ON                    = _UxGT("ÈõªÊ∫êÊâìÈñã");     // "Switch power on"
-  PROGMEM Language_Str MSG_SWITCH_PS_OFF                   = _UxGT("ÈõªÊ∫êÈóúÈñâ");     // "Switch power off"
-  PROGMEM Language_Str MSG_EXTRUDE                         = _UxGT("Êì†Âá∫");     // "Extrude"
-  PROGMEM Language_Str MSG_RETRACT                         = _UxGT("ÂõûÁ∏Æ");     // "Retract"
-  PROGMEM Language_Str MSG_MOVE_AXIS                       = _UxGT("ÁßªÂãïËª∏");     // "Move axis"
-  PROGMEM Language_Str MSG_BED_LEVELING                    = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     // "Bed leveling"
-  PROGMEM Language_Str MSG_LEVEL_BED                       = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     // "Level bed"
-  PROGMEM Language_Str MSG_BED_TRAMMING                    = _UxGT("Ë™øÂπ≥ÈÇäËßí");     // "Bed Tramming"
-  PROGMEM Language_Str MSG_NEXT_CORNER                     = _UxGT("‰∏ãÂÄãÈÇäËßí");     // "Next corner"
-  PROGMEM Language_Str MSG_MESH_EDITOR                     = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂô®");    // "Mesh Editor"
-  PROGMEM Language_Str MSG_EDIT_MESH                       = _UxGT("Á∑®ËºØÁ∂≤Ê†º");     // "Edit Mesh"
-  PROGMEM Language_Str MSG_EDITING_STOPPED                 = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂ∑≤ÂÅúÊ≠¢");     // "Mesh Editing Stopped"
-  PROGMEM Language_Str MSG_PROBING_POINT                   = _UxGT("Êé¢Ê∏¨Èªû");   // "Probing Point"
-  PROGMEM Language_Str MSG_MESH_X                          = _UxGT("Á¥¢Âºï X");    // "Index X"
-  PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("Á¥¢Âºï Y");    // "Index Y"
-  PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Z ÂÄº");    // "Z Value"
-  PROGMEM Language_Str MSG_CUSTOM_COMMANDS                 = _UxGT("Ëá™ÂÆöÂëΩ‰ª§");     // "Custom Commands"
-  PROGMEM Language_Str MSG_M48_TEST                        = _UxGT("M48 Êé¢Ê∏¨Ê∏¨Ë©¶");   // "M48 Probe Test"
-  PROGMEM Language_Str MSG_M48_POINT                       = _UxGT("M48 Êé¢Ê∏¨Èªû");    // "M48 Point"
-  PROGMEM Language_Str MSG_M48_DEVIATION                   = _UxGT("ÂÅèÂ∑Æ");    // "Deviation"
-  PROGMEM Language_Str MSG_IDEX_MENU                       = _UxGT("IDEX Mode");
-  PROGMEM Language_Str MSG_OFFSETS_MENU                    = _UxGT("Tool Offsets");
-  PROGMEM Language_Str MSG_IDEX_MODE_AUTOPARK              = _UxGT("Auto-Park");
-  PROGMEM Language_Str MSG_IDEX_MODE_DUPLICATE             = _UxGT("Duplication");
-  PROGMEM Language_Str MSG_IDEX_MODE_MIRRORED_COPY         = _UxGT("Mirrored Copy");
-  PROGMEM Language_Str MSG_IDEX_MODE_FULL_CTRL             = _UxGT("Full Control");
-  PROGMEM Language_Str MSG_HOTEND_OFFSET_X                 = _UxGT("2nd Nozzle X");
-  PROGMEM Language_Str MSG_HOTEND_OFFSET_Y                 = _UxGT("2nd Nozzle Y");
-  PROGMEM Language_Str MSG_HOTEND_OFFSET_Z                 = _UxGT("2nd Nozzle Z");
-  PROGMEM Language_Str MSG_UBL_DOING_G29                   = _UxGT("Âü∑Ë°åG29");     // "Doing G29"
-  PROGMEM Language_Str MSG_UBL_TOOLS                       = _UxGT("UBLÂ∑•ÂÖ∑");     // "UBL Tools"
-  PROGMEM Language_Str MSG_UBL_LEVEL_BED                   = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"
-  PROGMEM Language_Str MSG_LCD_TILTING_MESH                = _UxGT("ÂÇæÊñúÈªû");  // "Tilting Point"
-  PROGMEM Language_Str MSG_UBL_MANUAL_MESH                 = _UxGT("ÊâãÂ∑•Âª∫Á∂≤");     // "Manually Build Mesh"
-  PROGMEM Language_Str MSG_UBL_BC_INSERT                   = _UxGT("ÊîæÁΩÆÂ¢äÁâá‰∏¶Ê∏¨Èáè");     // "Place shim & measure"
-  PROGMEM Language_Str MSG_UBL_BC_INSERT2                  = _UxGT("Ê∏¨Èáè");     // "Measure"
-  PROGMEM Language_Str MSG_UBL_BC_REMOVE                   = _UxGT("ÁßªÈô§‰∏¶Ê∏¨ÈáèÁÜ±Â∫ä");     // "Remove & measure bed"
-  PROGMEM Language_Str MSG_UBL_MOVING_TO_NEXT              = _UxGT("ÁßªÂãïÂà∞‰∏ã‰∏ÄÂÄã");     // "Moving to next"
-  PROGMEM Language_Str MSG_UBL_ACTIVATE_MESH               = _UxGT("ÂïüÂãïUBL");     // "Activate UBL"
-  PROGMEM Language_Str MSG_UBL_DEACTIVATE_MESH             = _UxGT("ÈóúÈñâUBL");     // "Deactivate UBL"
-  PROGMEM Language_Str MSG_UBL_SET_TEMP_BED                = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");     // "Bed Temp"
-  PROGMEM Language_Str MSG_UBL_BED_TEMP_CUSTOM             = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");    // "Bed Temp")
-  PROGMEM Language_Str MSG_UBL_SET_TEMP_HOTEND             = _UxGT("ÁΩÆË®≠Âô¥Âò¥Ê∫´Â∫¶");     // "Hotend Temp"
-  PROGMEM Language_Str MSG_UBL_HOTEND_TEMP_CUSTOM          = _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶");    // "Hotend Temp"
-  PROGMEM Language_Str MSG_UBL_MESH_EDIT                   = _UxGT("Á∂≤Ê†ºÁ∑®ËºØ");     // "Mesh Edit"
-  PROGMEM Language_Str MSG_UBL_EDIT_CUSTOM_MESH            = _UxGT("Á∑®ËºØÂÆ¢Êà∂Á∂≤Ê†º");     // "Edit Custom Mesh"
-  PROGMEM Language_Str MSG_UBL_FINE_TUNE_MESH              = _UxGT("Á¥∞Ë™øÁ∂≤Ê†º");     // "Fine Tuning Mesh"
-  PROGMEM Language_Str MSG_UBL_DONE_EDITING_MESH           = _UxGT("ÂÆåÊàêÁ∑®ËºØÁ∂≤Ê†º");     // "Done Editing Mesh"
-  PROGMEM Language_Str MSG_UBL_BUILD_CUSTOM_MESH           = _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º");     // "Build Custom Mesh"
-  PROGMEM Language_Str MSG_UBL_BUILD_MESH_MENU             = _UxGT("ÂâµË®≠Á∂≤Ê†º");     // "Build Mesh"
+  LSTR MSG_PREHEAT_CUSTOM                 = _UxGT("Ëá™ÂÆöÈ†êÁÜ±");   // "Preheat Custom"
+  LSTR MSG_COOLDOWN                       = _UxGT("ÈôçÊ∫´");     // "Cooldown"
+  LSTR MSG_LASER_MENU                     = _UxGT("ÊøÄÂÖâÊéßÂà∂");    // "Laser Control"
+  LSTR MSG_LASER_POWER                    = _UxGT("ÊøÄÂÖâÈõªÊ∫ê");    // "Laser Power"
+  LSTR MSG_SPINDLE_MENU                   = _UxGT("‰∏ªËª∏ÊéßÂëäÂà∂");    // "Spindle Control"
+  LSTR MSG_SPINDLE_POWER                  = _UxGT("‰∏ªËª∏ÈõªÊ∫ê");    // "Spindle Power"
+  LSTR MSG_SPINDLE_REVERSE                = _UxGT("‰∏ªËª∏ÂèçËΩâ");  // "Spindle Reverse"
+  LSTR MSG_SWITCH_PS_ON                   = _UxGT("ÈõªÊ∫êÊâìÈñã");     // "Switch power on"
+  LSTR MSG_SWITCH_PS_OFF                  = _UxGT("ÈõªÊ∫êÈóúÈñâ");     // "Switch power off"
+  LSTR MSG_EXTRUDE                        = _UxGT("Êì†Âá∫");     // "Extrude"
+  LSTR MSG_RETRACT                        = _UxGT("ÂõûÁ∏Æ");     // "Retract"
+  LSTR MSG_MOVE_AXIS                      = _UxGT("ÁßªÂãïËª∏");     // "Move axis"
+  LSTR MSG_BED_LEVELING                   = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     // "Bed leveling"
+  LSTR MSG_LEVEL_BED                      = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     // "Level bed"
+  LSTR MSG_BED_TRAMMING                   = _UxGT("Ë™øÂπ≥ÈÇäËßí");     // "Bed Tramming"
+  LSTR MSG_NEXT_CORNER                    = _UxGT("‰∏ãÂÄãÈÇäËßí");     // "Next corner"
+  LSTR MSG_MESH_EDITOR                    = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂô®");    // "Mesh Editor"
+  LSTR MSG_EDIT_MESH                      = _UxGT("Á∑®ËºØÁ∂≤Ê†º");     // "Edit Mesh"
+  LSTR MSG_EDITING_STOPPED                = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂ∑≤ÂÅúÊ≠¢");     // "Mesh Editing Stopped"
+  LSTR MSG_PROBING_POINT                  = _UxGT("Êé¢Ê∏¨Èªû");   // "Probing Point"
+  LSTR MSG_MESH_X                         = _UxGT("Á¥¢Âºï X");    // "Index X"
+  LSTR MSG_MESH_Y                         = _UxGT("Á¥¢Âºï Y");    // "Index Y"
+  LSTR MSG_MESH_EDIT_Z                    = _UxGT("Z ÂÄº");    // "Z Value"
+  LSTR MSG_CUSTOM_COMMANDS                = _UxGT("Ëá™ÂÆöÂëΩ‰ª§");     // "Custom Commands"
+  LSTR MSG_M48_TEST                       = _UxGT("M48 Êé¢Ê∏¨Ê∏¨Ë©¶");   // "M48 Probe Test"
+  LSTR MSG_M48_POINT                      = _UxGT("M48 Êé¢Ê∏¨Èªû");    // "M48 Point"
+  LSTR MSG_M48_DEVIATION                  = _UxGT("ÂÅèÂ∑Æ");    // "Deviation"
+  LSTR MSG_IDEX_MENU                      = _UxGT("IDEX Mode");
+  LSTR MSG_OFFSETS_MENU                   = _UxGT("Tool Offsets");
+  LSTR MSG_IDEX_MODE_AUTOPARK             = _UxGT("Auto-Park");
+  LSTR MSG_IDEX_MODE_DUPLICATE            = _UxGT("Duplication");
+  LSTR MSG_IDEX_MODE_MIRRORED_COPY        = _UxGT("Mirrored Copy");
+  LSTR MSG_IDEX_MODE_FULL_CTRL            = _UxGT("Full Control");
+  LSTR MSG_HOTEND_OFFSET_X                = _UxGT("2nd Nozzle X");
+  LSTR MSG_HOTEND_OFFSET_Y                = _UxGT("2nd Nozzle Y");
+  LSTR MSG_HOTEND_OFFSET_Z                = _UxGT("2nd Nozzle Z");
+  LSTR MSG_UBL_DOING_G29                  = _UxGT("Âü∑Ë°åG29");     // "Doing G29"
+  LSTR MSG_UBL_TOOLS                      = _UxGT("UBLÂ∑•ÂÖ∑");     // "UBL Tools"
+  LSTR MSG_UBL_LEVEL_BED                  = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"
+  LSTR MSG_LCD_TILTING_MESH               = _UxGT("ÂÇæÊñúÈªû");  // "Tilting Point"
+  LSTR MSG_UBL_MANUAL_MESH                = _UxGT("ÊâãÂ∑•Âª∫Á∂≤");     // "Manually Build Mesh"
+  LSTR MSG_UBL_BC_INSERT                  = _UxGT("ÊîæÁΩÆÂ¢äÁâá‰∏¶Ê∏¨Èáè");     // "Place shim & measure"
+  LSTR MSG_UBL_BC_INSERT2                 = _UxGT("Ê∏¨Èáè");     // "Measure"
+  LSTR MSG_UBL_BC_REMOVE                  = _UxGT("ÁßªÈô§‰∏¶Ê∏¨ÈáèÁÜ±Â∫ä");     // "Remove & measure bed"
+  LSTR MSG_UBL_MOVING_TO_NEXT             = _UxGT("ÁßªÂãïÂà∞‰∏ã‰∏ÄÂÄã");     // "Moving to next"
+  LSTR MSG_UBL_ACTIVATE_MESH              = _UxGT("ÂïüÂãïUBL");     // "Activate UBL"
+  LSTR MSG_UBL_DEACTIVATE_MESH            = _UxGT("ÈóúÈñâUBL");     // "Deactivate UBL"
+  LSTR MSG_UBL_SET_TEMP_BED               = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");     // "Bed Temp"
+  LSTR MSG_UBL_BED_TEMP_CUSTOM            = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");    // "Bed Temp")
+  LSTR MSG_UBL_SET_TEMP_HOTEND            = _UxGT("ÁΩÆË®≠Âô¥Âò¥Ê∫´Â∫¶");     // "Hotend Temp"
+  LSTR MSG_UBL_HOTEND_TEMP_CUSTOM         = _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶");    // "Hotend Temp"
+  LSTR MSG_UBL_MESH_EDIT                  = _UxGT("Á∂≤Ê†ºÁ∑®ËºØ");     // "Mesh Edit"
+  LSTR MSG_UBL_EDIT_CUSTOM_MESH           = _UxGT("Á∑®ËºØÂÆ¢Êà∂Á∂≤Ê†º");     // "Edit Custom Mesh"
+  LSTR MSG_UBL_FINE_TUNE_MESH             = _UxGT("Á¥∞Ë™øÁ∂≤Ê†º");     // "Fine Tuning Mesh"
+  LSTR MSG_UBL_DONE_EDITING_MESH          = _UxGT("ÂÆåÊàêÁ∑®ËºØÁ∂≤Ê†º");     // "Done Editing Mesh"
+  LSTR MSG_UBL_BUILD_CUSTOM_MESH          = _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º");     // "Build Custom Mesh"
+  LSTR MSG_UBL_BUILD_MESH_MENU            = _UxGT("ÂâµË®≠Á∂≤Ê†º");     // "Build Mesh"
   #if PREHEAT_COUNT
-    PROGMEM Language_Str MSG_UBL_BUILD_MESH_M              = _UxGT("ÂâµË®≠ $ Á∂≤Ê†º");     // "Build PREHEAT_1_LABEL Mesh"
-    PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M           = _UxGT("ÊâπÂáÜ $ Á∂≤Ê†º");     // "Validate PREHEAT_1_LABEL Mesh"
+    LSTR MSG_UBL_BUILD_MESH_M             = _UxGT("ÂâµË®≠ $ Á∂≤Ê†º");     // "Build PREHEAT_1_LABEL Mesh"
+    LSTR MSG_UBL_VALIDATE_MESH_M          = _UxGT("ÊâπÂáÜ $ Á∂≤Ê†º");     // "Validate PREHEAT_1_LABEL Mesh"
   #endif
-  PROGMEM Language_Str MSG_UBL_BUILD_COLD_MESH             = _UxGT("ÂâµË®≠ÂÜ∑Á∂≤Ê†º");     // "Build Cold Mesh"
-  PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_ADJUST          = _UxGT("Ë™øÊï¥Á∂≤Ê†ºÈ´òÂ∫¶");     // "Adjust Mesh Height"
-  PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_AMOUNT          = _UxGT("È´òÂ∫¶ÂêàË®à");     // "Height Amount"
-  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_MENU          = _UxGT("ÊâπÂáÜÁ∂≤Ê†º");     // "Validate Mesh"
-  PROGMEM Language_Str MSG_UBL_VALIDATE_CUSTOM_MESH        = _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º");     // "Validate Custom Mesh"
-  PROGMEM Language_Str MSG_G26_HEATING_BED                 = _UxGT("G26 Âä†ÁÜ±ÁÜ±Â∫ä");    // "G26 Heating Bed"
-  PROGMEM Language_Str MSG_G26_HEATING_NOZZLE              = _UxGT("G26 Âä†ÁÜ±Âô¥Âò¥"); //"G26 Heating Nozzle"
-  PROGMEM Language_Str MSG_G26_MANUAL_PRIME                = _UxGT("ÊâãÂãïÂ°´Ë£ù");  // "Manual priming..."
-  PROGMEM Language_Str MSG_G26_FIXED_LENGTH                = _UxGT("Âõ∫ÂÆöË∑ùÈõ¢Â°´Ë£ù");   // "Fixed Length Prime"
-  PROGMEM Language_Str MSG_G26_PRIME_DONE                  = _UxGT("ÂÆåÊàêÂ°´Ë£ù");   // "Done Priming"
-  PROGMEM Language_Str MSG_G26_CANCELED                    = _UxGT("G26Â∑≤ÂèñÊ∂à");   // "G26 Canceled"
-  PROGMEM Language_Str MSG_G26_LEAVING                     = _UxGT("Èõ¢Èñã G26");  // "Leaving G26"
-  PROGMEM Language_Str MSG_UBL_CONTINUE_MESH               = _UxGT("ÁπºÁ∫åÁÜ±Â∫äÁ∂≤Ê†º");     // "Continue Bed Mesh"
-  PROGMEM Language_Str MSG_UBL_MESH_LEVELING               = _UxGT("Á∂≤Ê†ºË™øÂπ≥");     // "Mesh Leveling"
-  PROGMEM Language_Str MSG_UBL_3POINT_MESH_LEVELING        = _UxGT("‰∏âÈªûË™øÂπ≥");     // "3-Point Leveling"
-  PROGMEM Language_Str MSG_UBL_GRID_MESH_LEVELING          = _UxGT("Ê†ºÂ≠êÁ∂≤Ê†ºË™øÂπ≥");     // "Grid Mesh Leveling"
-  PROGMEM Language_Str MSG_UBL_MESH_LEVEL                  = _UxGT("Ë™øÂπ≥Á∂≤Ê†º");     // "Level Mesh"
-  PROGMEM Language_Str MSG_UBL_SIDE_POINTS                 = _UxGT("ÈÇäÈªû");     // "Side Points"
-  PROGMEM Language_Str MSG_UBL_MAP_TYPE                    = _UxGT("ÂúñÈ°ûÂûã");     // "Map Type"
-  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP                  = _UxGT("Ëº∏Âá∫Á∂≤Ê†ºÂúñ");     // "Output Mesh Map"
-  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_HOST             = _UxGT("Ëº∏Âá∫Âà∞‰∏ªÊ©ü");     // "Output for Host"
-  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_CSV              = _UxGT("Ëº∏Âá∫Âà∞CSV");     // "Output for CSV"
-  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_BACKUP           = _UxGT("Ëº∏Âá∫Âà∞ÂÇô‰ªΩ");     // "Off Printer Backup"
-  PROGMEM Language_Str MSG_UBL_INFO_UBL                    = _UxGT("Ëº∏Âá∫UBL‰ø°ÊÅØ");     // "Output UBL Info"
-  PROGMEM Language_Str MSG_UBL_FILLIN_AMOUNT               = _UxGT("Â°´ÂÖÖÂêàË®à");     // "Fill-in Amount"
-  PROGMEM Language_Str MSG_UBL_MANUAL_FILLIN               = _UxGT("ÊâãÂ∑•Â°´ÂÖÖ");     // "Manual Fill-in"
-  PROGMEM Language_Str MSG_UBL_SMART_FILLIN                = _UxGT("ËÅ∞ÊòéÂ°´ÂÖÖ");     // "Smart Fill-in"
-  PROGMEM Language_Str MSG_UBL_FILLIN_MESH                 = _UxGT("Â°´ÂÖÖÁ∂≤Ê†º");     // "Fill-in Mesh"
-  PROGMEM Language_Str MSG_UBL_INVALIDATE_ALL              = _UxGT("‰ΩúÂª¢ÊâÄÊúâÁöÑ");     // "Invalidate All"
-  PROGMEM Language_Str MSG_UBL_INVALIDATE_CLOSEST          = _UxGT("‰ΩúÂª¢ÊúÄËøëÁöÑ");     // "Invalidate Closest"
-  PROGMEM Language_Str MSG_UBL_FINE_TUNE_ALL               = _UxGT("Á¥∞Ë™øÊâÄÊúâÁöÑ");     // "Fine Tune All"
-  PROGMEM Language_Str MSG_UBL_FINE_TUNE_CLOSEST           = _UxGT("Á¥∞Ë™øÊúÄËøëÁöÑ");     // "Fine Tune Closest"
-  PROGMEM Language_Str MSG_UBL_STORAGE_MESH_MENU           = _UxGT("Á∂≤Ê†ºÂ≠òÂÑ≤");     // "Mesh Storage"
-  PROGMEM Language_Str MSG_UBL_STORAGE_SLOT                = _UxGT("Â≠òÂÑ≤ÊßΩ");     // "Memory Slot"
-  PROGMEM Language_Str MSG_UBL_LOAD_MESH                   = _UxGT("Ë£ùËºâÁÜ±Â∫äÁ∂≤Ê†º");     // "Load Bed Mesh"
-  PROGMEM Language_Str MSG_UBL_SAVE_MESH                   = _UxGT("‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º");     // "Save Bed Mesh"
-  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("Á∂≤Ê†º %i Â∑≤Ë£ùËºâ");     // "Mesh %i loaded"
-  PROGMEM Language_Str MSG_MESH_SAVED                      = _UxGT("Á∂≤Ê†º %i Â∑≤‰øùÂ≠ò");     // "Mesh %i saved"
-  PROGMEM Language_Str MSG_UBL_NO_STORAGE                  = _UxGT("Ê≤íÊúâÂ≠òÂÑ≤");     // "No storage"
-  PROGMEM Language_Str MSG_UBL_SAVE_ERROR                  = _UxGT("ÈåØË™§: UBL‰øùÂ≠ò");     // "Err: UBL Save"
-  PROGMEM Language_Str MSG_UBL_RESTORE_ERROR               = _UxGT("ÈåØË™§: UBLÈÇÑÂéü");     // "Err: UBL Restore"
-  PROGMEM Language_Str MSG_UBL_Z_OFFSET                    = _UxGT("Z-ÂÅèÁßª:");   // "Z-Offset: "
-  PROGMEM Language_Str MSG_UBL_Z_OFFSET_STOPPED            = _UxGT("ZÂÅèÁßªÂ∑≤ÂÅúÊ≠¢");     // "Z-Offset Stopped"
-  PROGMEM Language_Str MSG_UBL_STEP_BY_STEP_MENU           = _UxGT("‰∏ÄÊ≠•Ê≠•UBL");     // "Step-By-Step UBL"
-  PROGMEM Language_Str MSG_UBL_1_BUILD_COLD_MESH           = _UxGT("1. ÂâµË®≠ÂÜ∑Á∂≤Ê†º");
-  PROGMEM Language_Str MSG_UBL_2_SMART_FILLIN              = _UxGT("2. ËÅ∞ÊòéÂ°´ÂÖÖ");
-  PROGMEM Language_Str MSG_UBL_3_VALIDATE_MESH_MENU        = _UxGT("3. ÊâπÂáÜÁ∂≤Ê†º");
-  PROGMEM Language_Str MSG_UBL_4_FINE_TUNE_ALL             = _UxGT("4. Á¥∞Ë™øÊâÄÊúâÁöÑ");
-  PROGMEM Language_Str MSG_UBL_5_VALIDATE_MESH_MENU        = _UxGT("5. ÊâπÂáÜÁ∂≤Ê†º");
-  PROGMEM Language_Str MSG_UBL_6_FINE_TUNE_ALL             = _UxGT("6. Á¥∞Ë™øÊâÄÊúâÁöÑ");
-  PROGMEM Language_Str MSG_UBL_7_SAVE_MESH                 = _UxGT("7. ‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º");
+  LSTR MSG_UBL_BUILD_COLD_MESH            = _UxGT("ÂâµË®≠ÂÜ∑Á∂≤Ê†º");     // "Build Cold Mesh"
+  LSTR MSG_UBL_MESH_HEIGHT_ADJUST         = _UxGT("Ë™øÊï¥Á∂≤Ê†ºÈ´òÂ∫¶");     // "Adjust Mesh Height"
+  LSTR MSG_UBL_MESH_HEIGHT_AMOUNT         = _UxGT("È´òÂ∫¶ÂêàË®à");     // "Height Amount"
+  LSTR MSG_UBL_VALIDATE_MESH_MENU         = _UxGT("ÊâπÂáÜÁ∂≤Ê†º");     // "Validate Mesh"
+  LSTR MSG_UBL_VALIDATE_CUSTOM_MESH       = _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º");     // "Validate Custom Mesh"
+  LSTR MSG_G26_HEATING_BED                = _UxGT("G26 Âä†ÁÜ±ÁÜ±Â∫ä");    // "G26 Heating Bed"
+  LSTR MSG_G26_HEATING_NOZZLE             = _UxGT("G26 Âä†ÁÜ±Âô¥Âò¥"); //"G26 Heating Nozzle"
+  LSTR MSG_G26_MANUAL_PRIME               = _UxGT("ÊâãÂãïÂ°´Ë£ù");  // "Manual priming..."
+  LSTR MSG_G26_FIXED_LENGTH               = _UxGT("Âõ∫ÂÆöË∑ùÈõ¢Â°´Ë£ù");   // "Fixed Length Prime"
+  LSTR MSG_G26_PRIME_DONE                 = _UxGT("ÂÆåÊàêÂ°´Ë£ù");   // "Done Priming"
+  LSTR MSG_G26_CANCELED                   = _UxGT("G26Â∑≤ÂèñÊ∂à");   // "G26 Canceled"
+  LSTR MSG_G26_LEAVING                    = _UxGT("Èõ¢Èñã G26");  // "Leaving G26"
+  LSTR MSG_UBL_CONTINUE_MESH              = _UxGT("ÁπºÁ∫åÁÜ±Â∫äÁ∂≤Ê†º");     // "Continue Bed Mesh"
+  LSTR MSG_UBL_MESH_LEVELING              = _UxGT("Á∂≤Ê†ºË™øÂπ≥");     // "Mesh Leveling"
+  LSTR MSG_UBL_3POINT_MESH_LEVELING       = _UxGT("‰∏âÈªûË™øÂπ≥");     // "3-Point Leveling"
+  LSTR MSG_UBL_GRID_MESH_LEVELING         = _UxGT("Ê†ºÂ≠êÁ∂≤Ê†ºË™øÂπ≥");     // "Grid Mesh Leveling"
+  LSTR MSG_UBL_MESH_LEVEL                 = _UxGT("Ë™øÂπ≥Á∂≤Ê†º");     // "Level Mesh"
+  LSTR MSG_UBL_SIDE_POINTS                = _UxGT("ÈÇäÈªû");     // "Side Points"
+  LSTR MSG_UBL_MAP_TYPE                   = _UxGT("ÂúñÈ°ûÂûã");     // "Map Type"
+  LSTR MSG_UBL_OUTPUT_MAP                 = _UxGT("Ëº∏Âá∫Á∂≤Ê†ºÂúñ");     // "Output Mesh Map"
+  LSTR MSG_UBL_OUTPUT_MAP_HOST            = _UxGT("Ëº∏Âá∫Âà∞‰∏ªÊ©ü");     // "Output for Host"
+  LSTR MSG_UBL_OUTPUT_MAP_CSV             = _UxGT("Ëº∏Âá∫Âà∞CSV");     // "Output for CSV"
+  LSTR MSG_UBL_OUTPUT_MAP_BACKUP          = _UxGT("Ëº∏Âá∫Âà∞ÂÇô‰ªΩ");     // "Off Printer Backup"
+  LSTR MSG_UBL_INFO_UBL                   = _UxGT("Ëº∏Âá∫UBL‰ø°ÊÅØ");     // "Output UBL Info"
+  LSTR MSG_UBL_FILLIN_AMOUNT              = _UxGT("Â°´ÂÖÖÂêàË®à");     // "Fill-in Amount"
+  LSTR MSG_UBL_MANUAL_FILLIN              = _UxGT("ÊâãÂ∑•Â°´ÂÖÖ");     // "Manual Fill-in"
+  LSTR MSG_UBL_SMART_FILLIN               = _UxGT("ËÅ∞ÊòéÂ°´ÂÖÖ");     // "Smart Fill-in"
+  LSTR MSG_UBL_FILLIN_MESH                = _UxGT("Â°´ÂÖÖÁ∂≤Ê†º");     // "Fill-in Mesh"
+  LSTR MSG_UBL_INVALIDATE_ALL             = _UxGT("‰ΩúÂª¢ÊâÄÊúâÁöÑ");     // "Invalidate All"
+  LSTR MSG_UBL_INVALIDATE_CLOSEST         = _UxGT("‰ΩúÂª¢ÊúÄËøëÁöÑ");     // "Invalidate Closest"
+  LSTR MSG_UBL_FINE_TUNE_ALL              = _UxGT("Á¥∞Ë™øÊâÄÊúâÁöÑ");     // "Fine Tune All"
+  LSTR MSG_UBL_FINE_TUNE_CLOSEST          = _UxGT("Á¥∞Ë™øÊúÄËøëÁöÑ");     // "Fine Tune Closest"
+  LSTR MSG_UBL_STORAGE_MESH_MENU          = _UxGT("Á∂≤Ê†ºÂ≠òÂÑ≤");     // "Mesh Storage"
+  LSTR MSG_UBL_STORAGE_SLOT               = _UxGT("Â≠òÂÑ≤ÊßΩ");     // "Memory Slot"
+  LSTR MSG_UBL_LOAD_MESH                  = _UxGT("Ë£ùËºâÁÜ±Â∫äÁ∂≤Ê†º");     // "Load Bed Mesh"
+  LSTR MSG_UBL_SAVE_MESH                  = _UxGT("‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º");     // "Save Bed Mesh"
+  LSTR MSG_MESH_LOADED                    = _UxGT("Á∂≤Ê†º %i Â∑≤Ë£ùËºâ");     // "Mesh %i loaded"
+  LSTR MSG_MESH_SAVED                     = _UxGT("Á∂≤Ê†º %i Â∑≤‰øùÂ≠ò");     // "Mesh %i saved"
+  LSTR MSG_UBL_NO_STORAGE                 = _UxGT("Ê≤íÊúâÂ≠òÂÑ≤");     // "No storage"
+  LSTR MSG_UBL_SAVE_ERROR                 = _UxGT("ÈåØË™§: UBL‰øùÂ≠ò");     // "Err: UBL Save"
+  LSTR MSG_UBL_RESTORE_ERROR              = _UxGT("ÈåØË™§: UBLÈÇÑÂéü");     // "Err: UBL Restore"
+  LSTR MSG_UBL_Z_OFFSET                   = _UxGT("Z-ÂÅèÁßª:");   // "Z-Offset: "
+  LSTR MSG_UBL_Z_OFFSET_STOPPED           = _UxGT("ZÂÅèÁßªÂ∑≤ÂÅúÊ≠¢");     // "Z-Offset Stopped"
+  LSTR MSG_UBL_STEP_BY_STEP_MENU          = _UxGT("‰∏ÄÊ≠•Ê≠•UBL");     // "Step-By-Step UBL"
+  LSTR MSG_UBL_1_BUILD_COLD_MESH          = _UxGT("1. ÂâµË®≠ÂÜ∑Á∂≤Ê†º");
+  LSTR MSG_UBL_2_SMART_FILLIN             = _UxGT("2. ËÅ∞ÊòéÂ°´ÂÖÖ");
+  LSTR MSG_UBL_3_VALIDATE_MESH_MENU       = _UxGT("3. ÊâπÂáÜÁ∂≤Ê†º");
+  LSTR MSG_UBL_4_FINE_TUNE_ALL            = _UxGT("4. Á¥∞Ë™øÊâÄÊúâÁöÑ");
+  LSTR MSG_UBL_5_VALIDATE_MESH_MENU       = _UxGT("5. ÊâπÂáÜÁ∂≤Ê†º");
+  LSTR MSG_UBL_6_FINE_TUNE_ALL            = _UxGT("6. Á¥∞Ë™øÊâÄÊúâÁöÑ");
+  LSTR MSG_UBL_7_SAVE_MESH                = _UxGT("7. ‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º");
 
-  PROGMEM Language_Str MSG_LED_CONTROL                     = _UxGT("ÁáàÁÆ°ÊéßÂà∂");     // "LED Control")
-  PROGMEM Language_Str MSG_LEDS                            = _UxGT("Ááà");     // "Lights")
-  PROGMEM Language_Str MSG_LED_PRESETS                     = _UxGT("ÁáàÈ†êÁΩÆ");     // "Light Presets")
-  PROGMEM Language_Str MSG_SET_LEDS_RED                    = _UxGT("Á∫¢");     // "Red")
-  PROGMEM Language_Str MSG_SET_LEDS_ORANGE                 = _UxGT("Ê©ô");     // "Orange")
-  PROGMEM Language_Str MSG_SET_LEDS_YELLOW                 = _UxGT("ÈªÉ");     // "Yellow")
-  PROGMEM Language_Str MSG_SET_LEDS_GREEN                  = _UxGT("Á∂†");     // "Green")
-  PROGMEM Language_Str MSG_SET_LEDS_BLUE                   = _UxGT("Ëóç");     // "Blue")
-  PROGMEM Language_Str MSG_SET_LEDS_INDIGO                 = _UxGT("Èùí");     // "Indigo")
-  PROGMEM Language_Str MSG_SET_LEDS_VIOLET                 = _UxGT("Á¥´");     // "Violet")
-  PROGMEM Language_Str MSG_SET_LEDS_WHITE                  = _UxGT("ÁôΩ");     // "White")
-  PROGMEM Language_Str MSG_SET_LEDS_DEFAULT                = _UxGT("Âæ©Ê≠∏");     // "Default")
-  PROGMEM Language_Str MSG_CUSTOM_LEDS                     = _UxGT("ÂÆöÂà∂Ááà");     // "Custom Lights")
-  PROGMEM Language_Str MSG_INTENSITY_R                     = _UxGT("Á¥ÖÈ£ΩÂíåÂ∫¶");     // "Red Intensity")
-  PROGMEM Language_Str MSG_INTENSITY_G                     = _UxGT("Á∂†È£ΩÂíåÂ∫¶");     // "Green Intensity")
-  PROGMEM Language_Str MSG_INTENSITY_B                     = _UxGT("ËóçÈ£ΩÂíåÂ∫¶");     // "Blue Intensity")
-  PROGMEM Language_Str MSG_INTENSITY_W                     = _UxGT("ÁôΩÈ£ΩÂíåÂ∫¶");     // "White Intensity")
-  PROGMEM Language_Str MSG_LED_BRIGHTNESS                  = _UxGT("‰∫ÆÂ∫¶");     // "Brightness")
+  LSTR MSG_LED_CONTROL                    = _UxGT("ÁáàÁÆ°ÊéßÂà∂");     // "LED Control")
+  LSTR MSG_LEDS                           = _UxGT("Ááà");     // "Lights")
+  LSTR MSG_LED_PRESETS                    = _UxGT("ÁáàÈ†êÁΩÆ");     // "Light Presets")
+  LSTR MSG_SET_LEDS_RED                   = _UxGT("Á∫¢");     // "Red")
+  LSTR MSG_SET_LEDS_ORANGE                = _UxGT("Ê©ô");     // "Orange")
+  LSTR MSG_SET_LEDS_YELLOW                = _UxGT("ÈªÉ");     // "Yellow")
+  LSTR MSG_SET_LEDS_GREEN                 = _UxGT("Á∂†");     // "Green")
+  LSTR MSG_SET_LEDS_BLUE                  = _UxGT("Ëóç");     // "Blue")
+  LSTR MSG_SET_LEDS_INDIGO                = _UxGT("Èùí");     // "Indigo")
+  LSTR MSG_SET_LEDS_VIOLET                = _UxGT("Á¥´");     // "Violet")
+  LSTR MSG_SET_LEDS_WHITE                 = _UxGT("ÁôΩ");     // "White")
+  LSTR MSG_SET_LEDS_DEFAULT               = _UxGT("Âæ©Ê≠∏");     // "Default")
+  LSTR MSG_CUSTOM_LEDS                    = _UxGT("ÂÆöÂà∂Ááà");     // "Custom Lights")
+  LSTR MSG_INTENSITY_R                    = _UxGT("Á¥ÖÈ£ΩÂíåÂ∫¶");     // "Red Intensity")
+  LSTR MSG_INTENSITY_G                    = _UxGT("Á∂†È£ΩÂíåÂ∫¶");     // "Green Intensity")
+  LSTR MSG_INTENSITY_B                    = _UxGT("ËóçÈ£ΩÂíåÂ∫¶");     // "Blue Intensity")
+  LSTR MSG_INTENSITY_W                    = _UxGT("ÁôΩÈ£ΩÂíåÂ∫¶");     // "White Intensity")
+  LSTR MSG_LED_BRIGHTNESS                 = _UxGT("‰∫ÆÂ∫¶");     // "Brightness")
 
-  PROGMEM Language_Str MSG_MOVING                          = _UxGT("ÁßªÂãï ...");     // "Moving...")
-  PROGMEM Language_Str MSG_FREE_XY                         = _UxGT("ÈáãÊîæ XY");     // "Free XY")
-  PROGMEM Language_Str MSG_MOVE_X                          = _UxGT("ÁßªÂãïX");     // "Move X"
-  PROGMEM Language_Str MSG_MOVE_Y                          = _UxGT("ÁßªÂãïY");     // "Move Y"
-  PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("ÁßªÂãïZ");     // "Move Z"
-  PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("Êì†Âá∫Ê©ü");     // "Extruder"
-  PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("Êì†Âá∫Ê©ü *");       // "Extruder *"
-  PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†");   // "Hotend too cold"
-  PROGMEM Language_Str MSG_MOVE_N_MM                       = _UxGT("ÁßªÂãï %s mm");     // "Move 0.025mm"
-  PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("ÁßªÂãï 0.1 mm");    // "Move 0.1mm"
-  PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("ÁßªÂãï 1 mm");      // "Move 1mm"
-  PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("ÁßªÂãï 10 mm");     // "Move 10mm"
-  PROGMEM Language_Str MSG_MOVE_100MM                      = _UxGT("ÁßªÂãï 100 mm");    // "Move 100mm"
-  PROGMEM Language_Str MSG_SPEED                           = _UxGT("ÈÄüÁéá");     // "Speed"
-  PROGMEM Language_Str MSG_BED_Z                           = _UxGT("ÁÜ±Â∫äZ");     // "Bed Z"
-  PROGMEM Language_Str MSG_NOZZLE                          = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥");     // "Nozzle" Âô¥Âò¥
-  PROGMEM Language_Str MSG_NOZZLE_N                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ~");
-  PROGMEM Language_Str MSG_BED                             = " " LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä");     // "Bed"
-  PROGMEM Language_Str MSG_CHAMBER                         = _UxGT("Enclosure");
-  PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("È¢®ÊâáÈÄüÁéá");     // "Fan speed"
-  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("È¢®ÊâáÈÄüÁéá =");
-  PROGMEM Language_Str MSG_STORED_FAN_N                    = _UxGT("Stored Fan =");
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá");     // "Extra fan speed"
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá =");
-  PROGMEM Language_Str MSG_FLOW                            = _UxGT("Êì†Âá∫ÈÄüÁéá");
-  PROGMEM Language_Str MSG_FLOW_N                          = _UxGT("Êì†Âá∫ÈÄüÁéá ~");     // "Flow"
-  PROGMEM Language_Str MSG_CONTROL                         = _UxGT("ÊéßÂà∂");     // "Control"
-  PROGMEM Language_Str MSG_MIN                             = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ∞è");     // " " LCD_STR_THERMOMETER " Min"
-  PROGMEM Language_Str MSG_MAX                             = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ§ß");     // " " LCD_STR_THERMOMETER " Max"
-  PROGMEM Language_Str MSG_FACTOR                          = " " LCD_STR_THERMOMETER _UxGT(" Á≥ªÊï∏");     // " " LCD_STR_THERMOMETER " Fact"
-  PROGMEM Language_Str MSG_AUTOTEMP                        = _UxGT("Ëá™ÂãïÊéßÊ∫´");     // "Autotemp"
-  PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("Èñã ");     // "On"
-  PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("Èóú ");     // "Off"
+  LSTR MSG_MOVING                         = _UxGT("ÁßªÂãï ...");     // "Moving...")
+  LSTR MSG_FREE_XY                        = _UxGT("ÈáãÊîæ XY");     // "Free XY")
+  LSTR MSG_MOVE_X                         = _UxGT("ÁßªÂãïX");     // "Move X"
+  LSTR MSG_MOVE_Y                         = _UxGT("ÁßªÂãïY");     // "Move Y"
+  LSTR MSG_MOVE_Z                         = _UxGT("ÁßªÂãïZ");     // "Move Z"
+  LSTR MSG_MOVE_E                         = _UxGT("Êì†Âá∫Ê©ü");     // "Extruder"
+  LSTR MSG_MOVE_EN                        = _UxGT("Êì†Âá∫Ê©ü *");       // "Extruder *"
+  LSTR MSG_HOTEND_TOO_COLD                = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†");   // "Hotend too cold"
+  LSTR MSG_MOVE_N_MM                      = _UxGT("ÁßªÂãï %s mm");     // "Move 0.025mm"
+  LSTR MSG_MOVE_01MM                      = _UxGT("ÁßªÂãï 0.1 mm");    // "Move 0.1mm"
+  LSTR MSG_MOVE_1MM                       = _UxGT("ÁßªÂãï 1 mm");      // "Move 1mm"
+  LSTR MSG_MOVE_10MM                      = _UxGT("ÁßªÂãï 10 mm");     // "Move 10mm"
+  LSTR MSG_MOVE_100MM                     = _UxGT("ÁßªÂãï 100 mm");    // "Move 100mm"
+  LSTR MSG_SPEED                          = _UxGT("ÈÄüÁéá");     // "Speed"
+  LSTR MSG_BED_Z                          = _UxGT("ÁÜ±Â∫äZ");     // "Bed Z"
+  LSTR MSG_NOZZLE                         = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥");     // "Nozzle" Âô¥Âò¥
+  LSTR MSG_NOZZLE_N                       = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ~");
+  LSTR MSG_BED                            = " " LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä");     // "Bed"
+  LSTR MSG_CHAMBER                        = _UxGT("Enclosure");
+  LSTR MSG_FAN_SPEED                      = _UxGT("È¢®ÊâáÈÄüÁéá");     // "Fan speed"
+  LSTR MSG_FAN_SPEED_N                    = _UxGT("È¢®ÊâáÈÄüÁéá =");
+  LSTR MSG_STORED_FAN_N                   = _UxGT("Stored Fan =");
+  LSTR MSG_EXTRA_FAN_SPEED                = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá");     // "Extra fan speed"
+  LSTR MSG_EXTRA_FAN_SPEED_N              = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá =");
+  LSTR MSG_FLOW                           = _UxGT("Êì†Âá∫ÈÄüÁéá");
+  LSTR MSG_FLOW_N                         = _UxGT("Êì†Âá∫ÈÄüÁéá ~");     // "Flow"
+  LSTR MSG_CONTROL                        = _UxGT("ÊéßÂà∂");     // "Control"
+  LSTR MSG_MIN                            = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ∞è");     // " " LCD_STR_THERMOMETER " Min"
+  LSTR MSG_MAX                            = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ§ß");     // " " LCD_STR_THERMOMETER " Max"
+  LSTR MSG_FACTOR                         = " " LCD_STR_THERMOMETER _UxGT(" Á≥ªÊï∏");     // " " LCD_STR_THERMOMETER " Fact"
+  LSTR MSG_AUTOTEMP                       = _UxGT("Ëá™ÂãïÊéßÊ∫´");     // "Autotemp"
+  LSTR MSG_LCD_ON                         = _UxGT("Èñã ");     // "On"
+  LSTR MSG_LCD_OFF                        = _UxGT("Èóú ");     // "Off"
 
-  PROGMEM Language_Str MSG_SELECT                          = _UxGT("ÈÅ∏Êìá");     // "Select"
-  PROGMEM Language_Str MSG_SELECT_E                        = _UxGT("ÈÅ∏Êìá *");
-  PROGMEM Language_Str MSG_ACC                             = _UxGT("Âä†ÈÄüÂ∫¶");     // "Accel" acceleration
-  PROGMEM Language_Str MSG_JERK                            = _UxGT("ÊäñÂãïÈÄüÁéá");     // "Jerk"
-  PROGMEM Language_Str MSG_VA_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_A;     // "Va-jerk"
-  PROGMEM Language_Str MSG_VB_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_B;
-  PROGMEM Language_Str MSG_VC_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_C;
-  PROGMEM Language_Str MSG_VI_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_I;
-  PROGMEM Language_Str MSG_VJ_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_J;
-  PROGMEM Language_Str MSG_VK_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_K;
-  PROGMEM Language_Str MSG_VE_JERK                         = _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá");
+  LSTR MSG_SELECT                         = _UxGT("ÈÅ∏Êìá");     // "Select"
+  LSTR MSG_SELECT_E                       = _UxGT("ÈÅ∏Êìá *");
+  LSTR MSG_ACC                            = _UxGT("Âä†ÈÄüÂ∫¶");     // "Accel" acceleration
+  LSTR MSG_JERK                           = _UxGT("ÊäñÂãïÈÄüÁéá");     // "Jerk"
+  LSTR MSG_VA_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_A;     // "Va-jerk"
+  LSTR MSG_VB_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_B;
+  LSTR MSG_VC_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_C;
+  LSTR MSG_VI_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_I;
+  LSTR MSG_VJ_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_J;
+  LSTR MSG_VK_JERK                        = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_K;
+  LSTR MSG_VE_JERK                        = _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá");
 
-  PROGMEM Language_Str MSG_VELOCITY                        = _UxGT("ÈÄüÂ∫¶");     // "Velocity"
-  PROGMEM Language_Str MSG_VMAX_A                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_A;     // "Vmax " max_feedrate_mm_s
-  PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_B;
-  PROGMEM Language_Str MSG_VMAX_C                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_C;
-  PROGMEM Language_Str MSG_VMAX_I                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_I;
-  PROGMEM Language_Str MSG_VMAX_J                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_J;
-  PROGMEM Language_Str MSG_VMAX_K                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_K;
-  PROGMEM Language_Str MSG_VMAX_E                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_E;
-  PROGMEM Language_Str MSG_VMAX_EN                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá *");     // "Vmax " max_feedrate_mm_s
-  PROGMEM Language_Str MSG_VMIN                            = _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá");     // "Vmin"  min_feedrate_mm_s
-  PROGMEM Language_Str MSG_VTRAV_MIN                       = _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá");     // "VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
-  PROGMEM Language_Str MSG_ACCELERATION                    = _UxGT("Âä†ÈÄüÂ∫¶");     // "Acceleration"
-  PROGMEM Language_Str MSG_AMAX_A                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_A;     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
-  PROGMEM Language_Str MSG_AMAX_B                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_B;
-  PROGMEM Language_Str MSG_AMAX_C                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_C;
-  PROGMEM Language_Str MSG_AMAX_I                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_I;
-  PROGMEM Language_Str MSG_AMAX_J                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_J;
-  PROGMEM Language_Str MSG_AMAX_K                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_K;
-  PROGMEM Language_Str MSG_AMAX_E                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_E;
-  PROGMEM Language_Str MSG_AMAX_EN                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ *");     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
-  PROGMEM Language_Str MSG_A_RETRACT                       = _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶");     // "A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
-  PROGMEM Language_Str MSG_A_TRAVEL                        = _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶");     // "A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
-  PROGMEM Language_Str MSG_STEPS_PER_MM                    = _UxGT("Ëª∏Ê≠•Êï∏/mm");     // "Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
-  PROGMEM Language_Str MSG_A_STEPS                         = LCD_STR_A _UxGT(" Ëª∏Ê≠•Êï∏/mm");     // "Asteps/mm" axis_steps_per_mm, axis steps-per-unit G92
-  PROGMEM Language_Str MSG_B_STEPS                         = LCD_STR_B _UxGT(" Ëª∏Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_C_STEPS                         = LCD_STR_C _UxGT(" Ëª∏Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_I_STEPS                         = LCD_STR_I _UxGT(" Ëª∏Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_J_STEPS                         = LCD_STR_J _UxGT(" Ëª∏Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_K_STEPS                         = LCD_STR_K _UxGT(" Ëª∏Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_E_STEPS                         = _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm");     // "Esteps/mm"
-  PROGMEM Language_Str MSG_EN_STEPS                        = _UxGT("Êì†Âá∫Ê©ü~Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Ê∫´Â∫¶");     // "Temperature"
-  PROGMEM Language_Str MSG_MOTION                          = _UxGT("ÈÅã‰Ωú");     // "Motion"
-  PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ");     // "Filament" menu_control_volumetric
-  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("Ê∏¨ÂÆπÁ©çmm") SUPERSCRIPT_THREE;     // "E in mm3" volumetric_enabled
-  PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("Áµ≤ÊñôÁõ¥Âæë");     // "Fil. Dia."
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E                 = _UxGT("Áµ≤ÊñôÁõ¥Âæë *");
-  PROGMEM Language_Str MSG_FILAMENT_UNLOAD                 = _UxGT("Âç∏Ëºâ mm");     // "Unload mm"
-  PROGMEM Language_Str MSG_FILAMENT_LOAD                   = _UxGT("Ë£ÖËºâ mm");     // "Load mm"
-  PROGMEM Language_Str MSG_ADVANCE_K                       = _UxGT("Advance K");
-  PROGMEM Language_Str MSG_ADVANCE_K_E                     = _UxGT("Advance K *");
-  PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("LCDÂ∞çÊØîÂ∫¶");     // "LCD contrast"
-  PROGMEM Language_Str MSG_STORE_EEPROM                    = _UxGT("‰øùÂ≠òË®≠ÁΩÆ");     // "Store memory"
-  PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("ËºâÂÖ•Ë®≠ÁΩÆ");     // "Load memory"
-  PROGMEM Language_Str MSG_RESTORE_DEFAULTS                = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº");     // "Restore failsafe"
-  PROGMEM Language_Str MSG_INIT_EEPROM                     = _UxGT("ÂàùÂßãÂåñË®≠ÁΩÆ");     // "Initialize EEPROM"
-  PROGMEM Language_Str MSG_ERR_EEPROM_CRC                  = _UxGT("ÈåØË™§: EEPROM CRC");    // "Err: EEPROM CRC"
-  PROGMEM Language_Str MSG_ERR_EEPROM_INDEX                = _UxGT("ÈåØË™§: EEPROM Index");    // "Err: EEPROM Index"
-  PROGMEM Language_Str MSG_ERR_EEPROM_VERSION              = _UxGT("ÈåØË™§: EEPROM Version");    // "EEPROM Version"
-  PROGMEM Language_Str MSG_MEDIA_UPDATE                    = _UxGT("Â™íÈ´îÊõ¥Êñ∞");    // "Media Update"
-  PROGMEM Language_Str MSG_RESET_PRINTER                   = _UxGT("ÈáçÁΩÆÊâìÂç∞Ê©ü");    // "Reset Printer
-  PROGMEM Language_Str MSG_REFRESH                         = _UxGT("Âà∑Êñ∞");     // "Refresh"
-  PROGMEM Language_Str MSG_INFO_SCREEN                     = _UxGT("Ë≥áË®äÁïåÈù¢");     // "Info screen"
-  PROGMEM Language_Str MSG_PREPARE                         = _UxGT("Ê∫ñÂÇô");     // "Prepare"
-  PROGMEM Language_Str MSG_TUNE                            = _UxGT("Ë™øÊï¥");     // "Tune"
-  PROGMEM Language_Str MSG_START_PRINT                     = _UxGT("ÈñãÂßãÂàóÂç∞");   // "Start Print"
-  PROGMEM Language_Str MSG_BUTTON_NEXT                     = _UxGT("‰∏ã‰∏ÄÂÄã");   // "Next"
-  PROGMEM Language_Str MSG_BUTTON_INIT                     = _UxGT("ÂàùÂßã  ");   // "Init"
-  PROGMEM Language_Str MSG_BUTTON_STOP                     = _UxGT("ÂÅúÊ≠¢  ");   // "Stop"
-  PROGMEM Language_Str MSG_BUTTON_PRINT                    = _UxGT("ÂàóÂç∞  ");   // "Print"
-  PROGMEM Language_Str MSG_BUTTON_RESET                    = _UxGT("Âæ©Ê≠∏  ");   // "Reset"
-  PROGMEM Language_Str MSG_BUTTON_CANCEL                   = _UxGT("ÊîæÊ£Ñ  ");   // "Cancel"
-  PROGMEM Language_Str MSG_BUTTON_DONE                     = _UxGT("Á¢∫Ë™ç  ");   // "Done"
-  PROGMEM Language_Str MSG_BUTTON_BACK                     = _UxGT("ËøîÂõû  ");   // "Back"
-  PROGMEM Language_Str MSG_BUTTON_PROCEED                  = _UxGT("ÁπºÁ∫å  ");   // "Proceed"
-  PROGMEM Language_Str MSG_PAUSE_PRINT                     = _UxGT("Êö´ÂÅúÂàóÂç∞");     // "Pause print"
-  PROGMEM Language_Str MSG_RESUME_PRINT                    = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     // "Resume print"
-  PROGMEM Language_Str MSG_STOP_PRINT                      = _UxGT("ÂÅúÊ≠¢ÂàóÂç∞");     // "Stop print"
-  PROGMEM Language_Str MSG_PRINTING_OBJECT                 = _UxGT("ÂàóÂç∞Áâ©‰ª∂");   // "Printing Object"
-  PROGMEM Language_Str MSG_CANCEL_OBJECT                   = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂");   // "Cancel Object"
-  PROGMEM Language_Str MSG_CANCEL_OBJECT_N                 = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂ =");   // "Cancel Object ="
-  PROGMEM Language_Str MSG_OUTAGE_RECOVERY                 = _UxGT("‰∏≠Êñ∑ÊÅ¢Âæ©");   // "Outage Recovery"
-  PROGMEM Language_Str MSG_MEDIA_MENU                      = _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞");     // "Print from SD"
-  PROGMEM Language_Str MSG_NO_MEDIA                        = _UxGT("ÁÑ°Ë®òÊÜ∂Âç°");     // "No SD card"
-  PROGMEM Language_Str MSG_DWELL                           = _UxGT("‰ºëÁú† ...");     // "Sleep..."
-  PROGMEM Language_Str MSG_USERWAIT                        = _UxGT("ÈªûÊìäÁπºÁ∫å ...");     // "Click to resume..."
-  PROGMEM Language_Str MSG_PRINT_PAUSED                    = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "Print paused"
-  PROGMEM Language_Str MSG_PRINTING                        = _UxGT("ÂàóÂç∞‰∏≠ ...");   // "Printing..."
-  PROGMEM Language_Str MSG_PRINT_ABORTED                   = _UxGT("Â∑≤ÂèñÊ∂àÂàóÂç∞");     // "Print aborted"
-  PROGMEM Language_Str MSG_NO_MOVE                         = _UxGT("ÁÑ°ÁßªÂãï");     // "No move."
-  PROGMEM Language_Str MSG_KILLED                          = _UxGT("Â∑≤Á†çÊéâ");     // "KILLED. "
-  PROGMEM Language_Str MSG_STOPPED                         = _UxGT("Â∑≤ÂÅúÊ≠¢");     // "STOPPED. "
-  PROGMEM Language_Str MSG_CONTROL_RETRACT                 = _UxGT("ÂõûÁ∏ÆÈï∑Â∫¶mm");     // "Retract mm" retract_length, retract length (positive mm)
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_SWAP            = _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm");     // "Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
-  PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s");     // "Retract V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_ZHOP            = _UxGT("Hop mm");     // "Hop mm" retract_zraise, retract Z-lift
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     // "UnRet +mm" retract_recover_extra, additional recover length (mm, added to retract length when recovering)
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     // "S UnRet+mm" swap_retract_recover_extra, additional swap recover length (mm, added to retract length when recovering from extruder change)
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s");     // "Unretract V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAPF   = _UxGT("S UnRet V");     // "S UnRet V"
-  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("Ëá™ÂãïÂõûÁ∏Æ");     // "Auto-Retract" autoretract_enabled,
-  PROGMEM Language_Str MSG_FILAMENT_SWAP_LENGTH            = _UxGT("‰∫§ÊèõÈï∑Â∫¶");    // "Swap Length"
-  PROGMEM Language_Str MSG_FILAMENT_PURGE_LENGTH           = _UxGT("Ê∏ÖÈô§Èï∑Â∫¶");   // "Purge Length"
-  PROGMEM Language_Str MSG_TOOL_CHANGE                     = _UxGT("‰∫§ÊèõÂ∑•ÂÖ∑"); //"Tool Change"
-  PROGMEM Language_Str MSG_TOOL_CHANGE_ZLIFT               = _UxGT("ZËª∏ÊèêÊòá");    // "Z Raise"
-  PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPEED        = _UxGT("ÊúÄÈ´òÈÄüÂ∫¶");    // "Prime Speed"
-  PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPEED      = _UxGT("Êî∂ÂõûÈÄüÂ∫¶");  // "Retract Speed"
-  PROGMEM Language_Str MSG_NOZZLE_STANDBY                  = _UxGT("Âô¥Âò¥ÂæÖÊ©ü"); //"Nozzle Standby"
-  PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Êõ¥ÊèõÁµ≤Êñô");     // "Change filament"
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E                = _UxGT("Êõ¥ÊèõÁµ≤Êñô *");
-  PROGMEM Language_Str MSG_FILAMENTLOAD                    = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "Load filament"
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E                  = _UxGT("Ë£ùËºâÁµ≤Êñô *");
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD                  = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "Unload filament"
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E                = _UxGT("Âç∏ËºâÁµ≤Êñô *");     // "Unload filament"
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("Âç∏ËºâÂÖ®ÈÉ®");     // "Unload All"
-  PROGMEM Language_Str MSG_INIT_MEDIA                      = _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°");     // "Init. SD card"
-  PROGMEM Language_Str MSG_ATTACH_MEDIA                    = _UxGT("ÈÄ£Êé•Ë®òÊÜ∂Âç°");     // "Attach Media
-  PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°");     // "Change SD card"
-  PROGMEM Language_Str MSG_RELEASE_MEDIA                   = _UxGT("ÈáãÊîæÂ™íÈ´î");   // "Release Media"
-  PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ");     // "Z probe out. bed" Z probe is not within the physical limits
-  PROGMEM Language_Str MSG_SKEW_FACTOR                     = _UxGT("ÂÅèÊñúÂõ†Êï∏");     // "Skew Factor"
+  LSTR MSG_VELOCITY                       = _UxGT("ÈÄüÂ∫¶");     // "Velocity"
+  LSTR MSG_VMAX_A                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_A;     // "Vmax " max_feedrate_mm_s
+  LSTR MSG_VMAX_B                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_B;
+  LSTR MSG_VMAX_C                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_C;
+  LSTR MSG_VMAX_I                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_I;
+  LSTR MSG_VMAX_J                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_J;
+  LSTR MSG_VMAX_K                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_K;
+  LSTR MSG_VMAX_E                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_E;
+  LSTR MSG_VMAX_EN                        = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá *");     // "Vmax " max_feedrate_mm_s
+  LSTR MSG_VMIN                           = _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá");     // "Vmin"  min_feedrate_mm_s
+  LSTR MSG_VTRAV_MIN                      = _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá");     // "VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
+  LSTR MSG_ACCELERATION                   = _UxGT("Âä†ÈÄüÂ∫¶");     // "Acceleration"
+  LSTR MSG_AMAX_A                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_A;     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
+  LSTR MSG_AMAX_B                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_B;
+  LSTR MSG_AMAX_C                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_C;
+  LSTR MSG_AMAX_I                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_I;
+  LSTR MSG_AMAX_J                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_J;
+  LSTR MSG_AMAX_K                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_K;
+  LSTR MSG_AMAX_E                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_E;
+  LSTR MSG_AMAX_EN                        = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ *");     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
+  LSTR MSG_A_RETRACT                      = _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶");     // "A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
+  LSTR MSG_A_TRAVEL                       = _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶");     // "A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
+  LSTR MSG_STEPS_PER_MM                   = _UxGT("Ëª∏Ê≠•Êï∏/mm");     // "Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
+  LSTR MSG_A_STEPS                        = LCD_STR_A _UxGT(" Ëª∏Ê≠•Êï∏/mm");     // "Asteps/mm" axis_steps_per_mm, axis steps-per-unit G92
+  LSTR MSG_B_STEPS                        = LCD_STR_B _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  LSTR MSG_C_STEPS                        = LCD_STR_C _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  LSTR MSG_I_STEPS                        = LCD_STR_I _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  LSTR MSG_J_STEPS                        = LCD_STR_J _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  LSTR MSG_K_STEPS                        = LCD_STR_K _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  LSTR MSG_E_STEPS                        = _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm");     // "Esteps/mm"
+  LSTR MSG_EN_STEPS                       = _UxGT("Êì†Âá∫Ê©ü~Ê≠•Êï∏/mm");
+  LSTR MSG_TEMPERATURE                    = _UxGT("Ê∫´Â∫¶");     // "Temperature"
+  LSTR MSG_MOTION                         = _UxGT("ÈÅã‰Ωú");     // "Motion"
+  LSTR MSG_FILAMENT                       = _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ");     // "Filament" menu_control_volumetric
+  LSTR MSG_VOLUMETRIC_ENABLED             = _UxGT("Ê∏¨ÂÆπÁ©çmm") SUPERSCRIPT_THREE;     // "E in mm3" volumetric_enabled
+  LSTR MSG_FILAMENT_DIAM                  = _UxGT("Áµ≤ÊñôÁõ¥Âæë");     // "Fil. Dia."
+  LSTR MSG_FILAMENT_DIAM_E                = _UxGT("Áµ≤ÊñôÁõ¥Âæë *");
+  LSTR MSG_FILAMENT_UNLOAD                = _UxGT("Âç∏Ëºâ mm");     // "Unload mm"
+  LSTR MSG_FILAMENT_LOAD                  = _UxGT("Ë£ÖËºâ mm");     // "Load mm"
+  LSTR MSG_ADVANCE_K                      = _UxGT("Advance K");
+  LSTR MSG_ADVANCE_K_E                    = _UxGT("Advance K *");
+  LSTR MSG_CONTRAST                       = _UxGT("LCDÂ∞çÊØîÂ∫¶");     // "LCD contrast"
+  LSTR MSG_STORE_EEPROM                   = _UxGT("‰øùÂ≠òË®≠ÁΩÆ");     // "Store memory"
+  LSTR MSG_LOAD_EEPROM                    = _UxGT("ËºâÂÖ•Ë®≠ÁΩÆ");     // "Load memory"
+  LSTR MSG_RESTORE_DEFAULTS               = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº");     // "Restore failsafe"
+  LSTR MSG_INIT_EEPROM                    = _UxGT("ÂàùÂßãÂåñË®≠ÁΩÆ");     // "Initialize EEPROM"
+  LSTR MSG_ERR_EEPROM_CRC                 = _UxGT("ÈåØË™§: EEPROM CRC");    // "Err: EEPROM CRC"
+  LSTR MSG_ERR_EEPROM_INDEX               = _UxGT("ÈåØË™§: EEPROM Index");    // "Err: EEPROM Index"
+  LSTR MSG_ERR_EEPROM_VERSION             = _UxGT("ÈåØË™§: EEPROM Version");    // "EEPROM Version"
+  LSTR MSG_MEDIA_UPDATE                   = _UxGT("Â™íÈ´îÊõ¥Êñ∞");    // "Media Update"
+  LSTR MSG_RESET_PRINTER                  = _UxGT("ÈáçÁΩÆÊâìÂç∞Ê©ü");    // "Reset Printer
+  LSTR MSG_REFRESH                        = _UxGT("Âà∑Êñ∞");     // "Refresh"
+  LSTR MSG_INFO_SCREEN                    = _UxGT("Ë≥áË®äÁïåÈù¢");     // "Info screen"
+  LSTR MSG_PREPARE                        = _UxGT("Ê∫ñÂÇô");     // "Prepare"
+  LSTR MSG_TUNE                           = _UxGT("Ë™øÊï¥");     // "Tune"
+  LSTR MSG_START_PRINT                    = _UxGT("ÈñãÂßãÂàóÂç∞");   // "Start Print"
+  LSTR MSG_BUTTON_NEXT                    = _UxGT("‰∏ã‰∏ÄÂÄã");   // "Next"
+  LSTR MSG_BUTTON_INIT                    = _UxGT("ÂàùÂßã  ");   // "Init"
+  LSTR MSG_BUTTON_STOP                    = _UxGT("ÂÅúÊ≠¢  ");   // "Stop"
+  LSTR MSG_BUTTON_PRINT                   = _UxGT("ÂàóÂç∞  ");   // "Print"
+  LSTR MSG_BUTTON_RESET                   = _UxGT("Âæ©Ê≠∏  ");   // "Reset"
+  LSTR MSG_BUTTON_CANCEL                  = _UxGT("ÊîæÊ£Ñ  ");   // "Cancel"
+  LSTR MSG_BUTTON_DONE                    = _UxGT("Á¢∫Ë™ç  ");   // "Done"
+  LSTR MSG_BUTTON_BACK                    = _UxGT("ËøîÂõû  ");   // "Back"
+  LSTR MSG_BUTTON_PROCEED                 = _UxGT("ÁπºÁ∫å  ");   // "Proceed"
+  LSTR MSG_PAUSE_PRINT                    = _UxGT("Êö´ÂÅúÂàóÂç∞");     // "Pause print"
+  LSTR MSG_RESUME_PRINT                   = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     // "Resume print"
+  LSTR MSG_STOP_PRINT                     = _UxGT("ÂÅúÊ≠¢ÂàóÂç∞");     // "Stop print"
+  LSTR MSG_PRINTING_OBJECT                = _UxGT("ÂàóÂç∞Áâ©‰ª∂");   // "Printing Object"
+  LSTR MSG_CANCEL_OBJECT                  = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂");   // "Cancel Object"
+  LSTR MSG_CANCEL_OBJECT_N                = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂ =");   // "Cancel Object ="
+  LSTR MSG_OUTAGE_RECOVERY                = _UxGT("‰∏≠Êñ∑ÊÅ¢Âæ©");   // "Outage Recovery"
+  LSTR MSG_MEDIA_MENU                     = _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞");     // "Print from SD"
+  LSTR MSG_NO_MEDIA                       = _UxGT("ÁÑ°Ë®òÊÜ∂Âç°");     // "No SD card"
+  LSTR MSG_DWELL                          = _UxGT("‰ºëÁú† ...");     // "Sleep..."
+  LSTR MSG_USERWAIT                       = _UxGT("ÈªûÊìäÁπºÁ∫å ...");     // "Click to resume..."
+  LSTR MSG_PRINT_PAUSED                   = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "Print paused"
+  LSTR MSG_PRINTING                       = _UxGT("ÂàóÂç∞‰∏≠ ...");   // "Printing..."
+  LSTR MSG_PRINT_ABORTED                  = _UxGT("Â∑≤ÂèñÊ∂àÂàóÂç∞");     // "Print aborted"
+  LSTR MSG_NO_MOVE                        = _UxGT("ÁÑ°ÁßªÂãï");     // "No move."
+  LSTR MSG_KILLED                         = _UxGT("Â∑≤Á†çÊéâ");     // "KILLED. "
+  LSTR MSG_STOPPED                        = _UxGT("Â∑≤ÂÅúÊ≠¢");     // "STOPPED. "
+  LSTR MSG_CONTROL_RETRACT                = _UxGT("ÂõûÁ∏ÆÈï∑Â∫¶mm");     // "Retract mm" retract_length, retract length (positive mm)
+  LSTR MSG_CONTROL_RETRACT_SWAP           = _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm");     // "Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
+  LSTR MSG_CONTROL_RETRACTF               = _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s");     // "Retract V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
+  LSTR MSG_CONTROL_RETRACT_ZHOP           = _UxGT("Hop mm");     // "Hop mm" retract_zraise, retract Z-lift
+  LSTR MSG_CONTROL_RETRACT_RECOVER        = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     // "UnRet +mm" retract_recover_extra, additional recover length (mm, added to retract length when recovering)
+  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAP   = _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     // "S UnRet+mm" swap_retract_recover_extra, additional swap recover length (mm, added to retract length when recovering from extruder change)
+  LSTR MSG_CONTROL_RETRACT_RECOVERF       = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s");     // "Unretract V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
+  LSTR MSG_CONTROL_RETRACT_RECOVER_SWAPF  = _UxGT("S UnRet V");     // "S UnRet V"
+  LSTR MSG_AUTORETRACT                    = _UxGT("Ëá™ÂãïÂõûÁ∏Æ");     // "Auto-Retract" autoretract_enabled,
+  LSTR MSG_FILAMENT_SWAP_LENGTH           = _UxGT("‰∫§ÊèõÈï∑Â∫¶");    // "Swap Length"
+  LSTR MSG_FILAMENT_PURGE_LENGTH          = _UxGT("Ê∏ÖÈô§Èï∑Â∫¶");   // "Purge Length"
+  LSTR MSG_TOOL_CHANGE                    = _UxGT("‰∫§ÊèõÂ∑•ÂÖ∑"); //"Tool Change"
+  LSTR MSG_TOOL_CHANGE_ZLIFT              = _UxGT("ZËª∏ÊèêÊòá");    // "Z Raise"
+  LSTR MSG_SINGLENOZZLE_PRIME_SPEED       = _UxGT("ÊúÄÈ´òÈÄüÂ∫¶");    // "Prime Speed"
+  LSTR MSG_SINGLENOZZLE_RETRACT_SPEED     = _UxGT("Êî∂ÂõûÈÄüÂ∫¶");  // "Retract Speed"
+  LSTR MSG_NOZZLE_STANDBY                 = _UxGT("Âô¥Âò¥ÂæÖÊ©ü"); //"Nozzle Standby"
+  LSTR MSG_FILAMENTCHANGE                 = _UxGT("Êõ¥ÊèõÁµ≤Êñô");     // "Change filament"
+  LSTR MSG_FILAMENTCHANGE_E               = _UxGT("Êõ¥ÊèõÁµ≤Êñô *");
+  LSTR MSG_FILAMENTLOAD                   = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "Load filament"
+  LSTR MSG_FILAMENTLOAD_E                 = _UxGT("Ë£ùËºâÁµ≤Êñô *");
+  LSTR MSG_FILAMENTUNLOAD                 = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "Unload filament"
+  LSTR MSG_FILAMENTUNLOAD_E               = _UxGT("Âç∏ËºâÁµ≤Êñô *");     // "Unload filament"
+  LSTR MSG_FILAMENTUNLOAD_ALL             = _UxGT("Âç∏ËºâÂÖ®ÈÉ®");     // "Unload All"
+  LSTR MSG_INIT_MEDIA                     = _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°");     // "Init. SD card"
+  LSTR MSG_ATTACH_MEDIA                   = _UxGT("ÈÄ£Êé•Ë®òÊÜ∂Âç°");     // "Attach Media
+  LSTR MSG_CHANGE_MEDIA                   = _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°");     // "Change SD card"
+  LSTR MSG_RELEASE_MEDIA                  = _UxGT("ÈáãÊîæÂ™íÈ´î");   // "Release Media"
+  LSTR MSG_ZPROBE_OUT                     = _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ");     // "Z probe out. bed" Z probe is not within the physical limits
+  LSTR MSG_SKEW_FACTOR                    = _UxGT("ÂÅèÊñúÂõ†Êï∏");     // "Skew Factor"
 
-  PROGMEM Language_Str MSG_BLTOUCH_SELFTEST                = _UxGT("BLTouch Ëá™Ê™¢");     // "BLTouch Self-Test"
-  PROGMEM Language_Str MSG_BLTOUCH_RESET                   = _UxGT("ÈáçÁΩÆBLTouch");     // "Reset BLTouch"
-  PROGMEM Language_Str MSG_BLTOUCH_STOW                    = _UxGT("Ë£ùËºâBLTouch");     // "Stow BLTouch"
-  PROGMEM Language_Str MSG_BLTOUCH_DEPLOY                  = _UxGT("ÈÉ®ÁΩ≤BLTouch");     // "Deploy BLTouch"
+  LSTR MSG_BLTOUCH_SELFTEST               = _UxGT("BLTouch Ëá™Ê™¢");     // "BLTouch Self-Test"
+  LSTR MSG_BLTOUCH_RESET                  = _UxGT("ÈáçÁΩÆBLTouch");     // "Reset BLTouch"
+  LSTR MSG_BLTOUCH_STOW                   = _UxGT("Ë£ùËºâBLTouch");     // "Stow BLTouch"
+  LSTR MSG_BLTOUCH_DEPLOY                 = _UxGT("ÈÉ®ÁΩ≤BLTouch");     // "Deploy BLTouch"
 
-  PROGMEM Language_Str MSG_HOME_FIRST                      = _UxGT("Ê≠∏‰Ωç %s%s%s ÂÖà");     // "Home ... first"
-  PROGMEM Language_Str MSG_ZPROBE_OFFSETS                  = _UxGT("Êé¢ÈáùÂÅèÁßª");   //Probe Offsets
-  PROGMEM Language_Str MSG_ZPROBE_XOFFSET                  = _UxGT("Êé¢ÈáùXÂÅèÁßªÈáè");   //Probe X Offset
-  PROGMEM Language_Str MSG_ZPROBE_YOFFSET                  = _UxGT("Êé¢ÈáùYÂÅèÁßªÈáè");   //Probe Y Offset
-  PROGMEM Language_Str MSG_ZPROBE_ZOFFSET                  = _UxGT("Êé¢ÈáùZÂÅèÁßªÈáè");   //Probe Z Offset
-  PROGMEM Language_Str MSG_BABYSTEP_X                      = _UxGT("ÂæÆÈáèË™øÊï¥XËª∏");     // "Babystep X" lcd_babystep_x, Babystepping enables the user to control the axis in tiny amounts
-  PROGMEM Language_Str MSG_BABYSTEP_Y                      = _UxGT("ÂæÆÈáèË™øÊï¥YËª∏");     // "Babystep Y"
-  PROGMEM Language_Str MSG_BABYSTEP_Z                      = _UxGT("ÂæÆÈáèË™øÊï¥ZËª∏");     // "Babystep Z"
-  PROGMEM Language_Str MSG_BABYSTEP_TOTAL                  = _UxGT("Á∏ΩË®à");    // "Total"
-  PROGMEM Language_Str MSG_ENDSTOP_ABORT                   = _UxGT("ÊìãÂ°äÁµÇÊ≠¢");     // "Endstop abort"
-  PROGMEM Language_Str MSG_HEATING_FAILED_LCD              = _UxGT("Âä†ÁÜ±Â§±Êïó");     // "Heating failed"
-  PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("ÈåØË™§ÔºöÂÜóÈ§òÊ∫´Â∫¶");     // "Err: REDUNDANT TEMP"
-  PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("Ê∫´Â∫¶Â§±Êéß");    // "THERMAL RUNAWAY"
-  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_BED             = _UxGT("ÁÜ±Â∫äÊ∫´Â∫¶Â§±Êéß");    // "BED THERMAL RUNAWAY"
-  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_CHAMBER         = _UxGT("Ê©üÁÆ±Ê∫´Â∫¶Â§±Êéß");   // "CHAMBER T. RUNAWAY"
-  PROGMEM Language_Str MSG_ERR_MAXTEMP                     = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ∫´Â∫¶");     // "Err: MAXTEMP"
-  PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶");     // "Err: MINTEMP"
-  PROGMEM Language_Str MSG_HALTED                          = _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü");     // "PRINTER HALTED"
-  PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Ë´ãÈáçÁΩÆ");     // "Please reset"
-  PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("Â§©");     // "d" // One character only
-  PROGMEM Language_Str MSG_SHORT_HOUR                      = _UxGT("ÊôÇ");     // "h" // One character only
-  PROGMEM Language_Str MSG_SHORT_MINUTE                    = _UxGT("ÂàÜ");     // "m" // One character only
-  PROGMEM Language_Str MSG_HEATING                         = _UxGT("Âä†ÁÜ±‰∏≠ ...");     // "Heating..."
-  PROGMEM Language_Str MSG_COOLING                         = _UxGT("ÂÜ∑Âçª‰∏≠ ...");   // "Cooling..."
-  PROGMEM Language_Str MSG_BED_HEATING                     = _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠ ...");     // "Bed Heating..."
-  PROGMEM Language_Str MSG_BED_COOLING                     = _UxGT("ÁÜ±Â∫äÂÜ∑Âçª‰∏≠ ...");   // "Bed Cooling..."
-  PROGMEM Language_Str MSG_CHAMBER_HEATING                 = _UxGT("Ê©üÁÆ±Âä†ÁÜ±‰∏≠ ..");   // "Chamber Heating..."
-  PROGMEM Language_Str MSG_CHAMBER_COOLING                 = _UxGT("Ê©üÁÆ±ÂÜ∑Âçª‰∏≠ ...");   //Chamber Cooling...
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE                 = _UxGT("‚äøÊ†°Ê∫ñ");     // "Delta Calibration"
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_X               = _UxGT("‚äøÊ†°Ê∫ñX");     // "Calibrate X"
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Y               = _UxGT("‚äøÊ†°Ê∫ñY");     // "Calibrate Y"
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Z               = _UxGT("‚äøÊ†°Ê∫ñZ");     // "Calibrate Z"
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_CENTER          = _UxGT("‚äøÊ†°Ê∫ñ‰∏≠ÂøÉ");     // "Calibrate Center"
-  PROGMEM Language_Str MSG_DELTA_SETTINGS                  = _UxGT("‚äøË®≠ÁΩÆ");     // "Delta Settings"
-  PROGMEM Language_Str MSG_DELTA_AUTO_CALIBRATE            = _UxGT("‚äøËá™ÂãïÊ†°Ê∫ñ");     // "Auto Calibration"
-  PROGMEM Language_Str MSG_DELTA_HEIGHT_CALIBRATE          = _UxGT("Ë®≠ÁΩÆ‚äøÈ´òÂ∫¶");     // "Set Delta Height"
-  PROGMEM Language_Str MSG_DELTA_Z_OFFSET_CALIBRATE        = _UxGT("ZÂÅèÁßª");
-  PROGMEM Language_Str MSG_DELTA_DIAG_ROD                  = _UxGT("‚äøÊñúÊü±");     // "Diag Rod"
-  PROGMEM Language_Str MSG_DELTA_HEIGHT                    = _UxGT("‚äøÈ´òÂ∫¶");     // "Height"
-  PROGMEM Language_Str MSG_DELTA_RADIUS                    = _UxGT("‚äøÂçäÂæë");     // "Radius"
-  PROGMEM Language_Str MSG_INFO_MENU                       = _UxGT("ÈóúÊñºÂç∞Ë°®Ê©ü");     // "About Printer"
-  PROGMEM Language_Str MSG_INFO_PRINTER_MENU               = _UxGT("Âç∞Ë°®Ê©üË®äÊÅØ");     // "Printer Info"
-  PROGMEM Language_Str MSG_3POINT_LEVELING                 = _UxGT("‰∏âÈªûË™øÂπ≥");     // "3-Point Leveling"
-  PROGMEM Language_Str MSG_LINEAR_LEVELING                 = _UxGT("Á∑öÊÄßË™øÂπ≥");     // "Linear Leveling"
-  PROGMEM Language_Str MSG_BILINEAR_LEVELING               = _UxGT("      ÈõôÁ∑öÊÄßË™øÂπ≥");     // "Bilinear Leveling"
-  PROGMEM Language_Str MSG_UBL_LEVELING                    = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"
-  PROGMEM Language_Str MSG_MESH_LEVELING                   = _UxGT("Á∂≤Ê†ºË™øÂπ≥");     // "Mesh Leveling"
-  PROGMEM Language_Str MSG_INFO_STATS_MENU                 = _UxGT("Âç∞Ë°®Ê©üÁµ±Ë®à");     // "Printer Stats"
-  PROGMEM Language_Str MSG_INFO_BOARD_MENU                 = _UxGT("‰∏ªÊùøË®äÊÅØ");     // "Board Info"
-  PROGMEM Language_Str MSG_INFO_THERMISTOR_MENU            = _UxGT("Ê∫´Â∫¶Ë®à");     // "Thermistors"
-  PROGMEM Language_Str MSG_INFO_EXTRUDERS                  = _UxGT("      Êì†Âá∫Ê©ü");     // "Extruders"
-  PROGMEM Language_Str MSG_INFO_BAUDRATE                   = _UxGT("ÂÇ≥Ëº∏Áéá");     // "Baud"
-  PROGMEM Language_Str MSG_INFO_PROTOCOL                   = _UxGT("ÂçîË≠∞");     // "Protocol"
-  PROGMEM Language_Str MSG_INFO_RUNAWAY_OFF                = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èóú");   // "Runaway Watch: OFF"
-  PROGMEM Language_Str MSG_INFO_RUNAWAY_ON                 = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èñã");    // "Runaway Watch: ON"
+  LSTR MSG_HOME_FIRST                     = _UxGT("Ê≠∏‰Ωç %s%s%s ÂÖà");     // "Home ... first"
+  LSTR MSG_ZPROBE_OFFSETS                 = _UxGT("Êé¢ÈáùÂÅèÁßª");   //Probe Offsets
+  LSTR MSG_ZPROBE_XOFFSET                 = _UxGT("Êé¢ÈáùXÂÅèÁßªÈáè");   //Probe X Offset
+  LSTR MSG_ZPROBE_YOFFSET                 = _UxGT("Êé¢ÈáùYÂÅèÁßªÈáè");   //Probe Y Offset
+  LSTR MSG_ZPROBE_ZOFFSET                 = _UxGT("Êé¢ÈáùZÂÅèÁßªÈáè");   //Probe Z Offset
+  LSTR MSG_BABYSTEP_X                     = _UxGT("ÂæÆÈáèË™øÊï¥XËª∏");     // "Babystep X" lcd_babystep_x, Babystepping enables the user to control the axis in tiny amounts
+  LSTR MSG_BABYSTEP_Y                     = _UxGT("ÂæÆÈáèË™øÊï¥YËª∏");     // "Babystep Y"
+  LSTR MSG_BABYSTEP_Z                     = _UxGT("ÂæÆÈáèË™øÊï¥ZËª∏");     // "Babystep Z"
+  LSTR MSG_BABYSTEP_TOTAL                 = _UxGT("Á∏ΩË®à");    // "Total"
+  LSTR MSG_ENDSTOP_ABORT                  = _UxGT("ÊìãÂ°äÁµÇÊ≠¢");     // "Endstop abort"
+  LSTR MSG_HEATING_FAILED_LCD             = _UxGT("Âä†ÁÜ±Â§±Êïó");     // "Heating failed"
+  LSTR MSG_ERR_REDUNDANT_TEMP             = _UxGT("ÈåØË™§ÔºöÂÜóÈ§òÊ∫´Â∫¶");     // "Err: REDUNDANT TEMP"
+  LSTR MSG_THERMAL_RUNAWAY                = _UxGT("Ê∫´Â∫¶Â§±Êéß");    // "THERMAL RUNAWAY"
+  LSTR MSG_THERMAL_RUNAWAY_BED            = _UxGT("ÁÜ±Â∫äÊ∫´Â∫¶Â§±Êéß");    // "BED THERMAL RUNAWAY"
+  LSTR MSG_THERMAL_RUNAWAY_CHAMBER        = _UxGT("Ê©üÁÆ±Ê∫´Â∫¶Â§±Êéß");   // "CHAMBER T. RUNAWAY"
+  LSTR MSG_ERR_MAXTEMP                    = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ∫´Â∫¶");     // "Err: MAXTEMP"
+  LSTR MSG_ERR_MINTEMP                    = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶");     // "Err: MINTEMP"
+  LSTR MSG_HALTED                         = _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü");     // "PRINTER HALTED"
+  LSTR MSG_PLEASE_RESET                   = _UxGT("Ë´ãÈáçÁΩÆ");     // "Please reset"
+  LSTR MSG_SHORT_DAY                      = _UxGT("Â§©");     // "d" // One character only
+  LSTR MSG_SHORT_HOUR                     = _UxGT("ÊôÇ");     // "h" // One character only
+  LSTR MSG_SHORT_MINUTE                   = _UxGT("ÂàÜ");     // "m" // One character only
+  LSTR MSG_HEATING                        = _UxGT("Âä†ÁÜ±‰∏≠ ...");     // "Heating..."
+  LSTR MSG_COOLING                        = _UxGT("ÂÜ∑Âçª‰∏≠ ...");   // "Cooling..."
+  LSTR MSG_BED_HEATING                    = _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠ ...");     // "Bed Heating..."
+  LSTR MSG_BED_COOLING                    = _UxGT("ÁÜ±Â∫äÂÜ∑Âçª‰∏≠ ...");   // "Bed Cooling..."
+  LSTR MSG_CHAMBER_HEATING                = _UxGT("Ê©üÁÆ±Âä†ÁÜ±‰∏≠ ..");   // "Chamber Heating..."
+  LSTR MSG_CHAMBER_COOLING                = _UxGT("Ê©üÁÆ±ÂÜ∑Âçª‰∏≠ ...");   //Chamber Cooling...
+  LSTR MSG_DELTA_CALIBRATE                = _UxGT("‚äøÊ†°Ê∫ñ");     // "Delta Calibration"
+  LSTR MSG_DELTA_CALIBRATE_X              = _UxGT("‚äøÊ†°Ê∫ñX");     // "Calibrate X"
+  LSTR MSG_DELTA_CALIBRATE_Y              = _UxGT("‚äøÊ†°Ê∫ñY");     // "Calibrate Y"
+  LSTR MSG_DELTA_CALIBRATE_Z              = _UxGT("‚äøÊ†°Ê∫ñZ");     // "Calibrate Z"
+  LSTR MSG_DELTA_CALIBRATE_CENTER         = _UxGT("‚äøÊ†°Ê∫ñ‰∏≠ÂøÉ");     // "Calibrate Center"
+  LSTR MSG_DELTA_SETTINGS                 = _UxGT("‚äøË®≠ÁΩÆ");     // "Delta Settings"
+  LSTR MSG_DELTA_AUTO_CALIBRATE           = _UxGT("‚äøËá™ÂãïÊ†°Ê∫ñ");     // "Auto Calibration"
+  LSTR MSG_DELTA_HEIGHT_CALIBRATE         = _UxGT("Ë®≠ÁΩÆ‚äøÈ´òÂ∫¶");     // "Set Delta Height"
+  LSTR MSG_DELTA_Z_OFFSET_CALIBRATE       = _UxGT("ZÂÅèÁßª");
+  LSTR MSG_DELTA_DIAG_ROD                 = _UxGT("‚äøÊñúÊü±");     // "Diag Rod"
+  LSTR MSG_DELTA_HEIGHT                   = _UxGT("‚äøÈ´òÂ∫¶");     // "Height"
+  LSTR MSG_DELTA_RADIUS                   = _UxGT("‚äøÂçäÂæë");     // "Radius"
+  LSTR MSG_INFO_MENU                      = _UxGT("ÈóúÊñºÂç∞Ë°®Ê©ü");     // "About Printer"
+  LSTR MSG_INFO_PRINTER_MENU              = _UxGT("Âç∞Ë°®Ê©üË®äÊÅØ");     // "Printer Info"
+  LSTR MSG_3POINT_LEVELING                = _UxGT("‰∏âÈªûË™øÂπ≥");     // "3-Point Leveling"
+  LSTR MSG_LINEAR_LEVELING                = _UxGT("Á∑öÊÄßË™øÂπ≥");     // "Linear Leveling"
+  LSTR MSG_BILINEAR_LEVELING              = _UxGT("      ÈõôÁ∑öÊÄßË™øÂπ≥");     // "Bilinear Leveling"
+  LSTR MSG_UBL_LEVELING                   = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"
+  LSTR MSG_MESH_LEVELING                  = _UxGT("Á∂≤Ê†ºË™øÂπ≥");     // "Mesh Leveling"
+  LSTR MSG_INFO_STATS_MENU                = _UxGT("Âç∞Ë°®Ê©üÁµ±Ë®à");     // "Printer Stats"
+  LSTR MSG_INFO_BOARD_MENU                = _UxGT("‰∏ªÊùøË®äÊÅØ");     // "Board Info"
+  LSTR MSG_INFO_THERMISTOR_MENU           = _UxGT("Ê∫´Â∫¶Ë®à");     // "Thermistors"
+  LSTR MSG_INFO_EXTRUDERS                 = _UxGT("      Êì†Âá∫Ê©ü");     // "Extruders"
+  LSTR MSG_INFO_BAUDRATE                  = _UxGT("ÂÇ≥Ëº∏Áéá");     // "Baud"
+  LSTR MSG_INFO_PROTOCOL                  = _UxGT("ÂçîË≠∞");     // "Protocol"
+  LSTR MSG_INFO_RUNAWAY_OFF               = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èóú");   // "Runaway Watch: OFF"
+  LSTR MSG_INFO_RUNAWAY_ON                = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èñã");    // "Runaway Watch: ON"
 
-  PROGMEM Language_Str MSG_CASE_LIGHT                      = _UxGT("Â§ñÊÆºÁáà");     // "Case light"
-  PROGMEM Language_Str MSG_CASE_LIGHT_BRIGHTNESS           = _UxGT("Ááà‰∫ÆÂ∫¶");     // "Light BRIGHTNESS"
-  PROGMEM Language_Str MSG_KILL_EXPECTED_PRINTER           = _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫");     // "The printer is incorrect"
+  LSTR MSG_CASE_LIGHT                     = _UxGT("Â§ñÊÆºÁáà");     // "Case light"
+  LSTR MSG_CASE_LIGHT_BRIGHTNESS          = _UxGT("Ááà‰∫ÆÂ∫¶");     // "Light BRIGHTNESS"
+  LSTR MSG_KILL_EXPECTED_PRINTER          = _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫");     // "The printer is incorrect"
 
   #if LCD_WIDTH >= 20
-    PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("ÂàóÂç∞Ë®àÊï∏");     // "Print Count"
-    PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS         = _UxGT("Â∑≤ÂÆåÊàê");     // "Completed"
-    PROGMEM Language_Str MSG_INFO_PRINT_TIME               = _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì");     // "Total print time"
-    PROGMEM Language_Str MSG_INFO_PRINT_LONGEST            = _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì");     // "Longest job time"
-    PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT           = _UxGT("Á∏ΩË®àÊì†Âá∫");     // "Extruded total"
+    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("ÂàóÂç∞Ë®àÊï∏");     // "Print Count"
+    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("Â∑≤ÂÆåÊàê");     // "Completed"
+    LSTR MSG_INFO_PRINT_TIME              = _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì");     // "Total print time"
+    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì");     // "Longest job time"
+    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("Á∏ΩË®àÊì†Âá∫");     // "Extruded total"
   #else
-    PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("ÂàóÂç∞Êï∏");     // "Prints"
-    PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS         = _UxGT("ÂÆåÊàê");     // "Completed"
-    PROGMEM Language_Str MSG_INFO_PRINT_TIME               = _UxGT("Á∏ΩÂÖ±");     // "Total"
-    PROGMEM Language_Str MSG_INFO_PRINT_LONGEST            = _UxGT("ÊúÄÈï∑");     // "Longest"
-    PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT           = _UxGT("Â∑≤Êì†Âá∫");     // "Extruded"
+    LSTR MSG_INFO_PRINT_COUNT             = _UxGT("ÂàóÂç∞Êï∏");     // "Prints"
+    LSTR MSG_INFO_COMPLETED_PRINTS        = _UxGT("ÂÆåÊàê");     // "Completed"
+    LSTR MSG_INFO_PRINT_TIME              = _UxGT("Á∏ΩÂÖ±");     // "Total"
+    LSTR MSG_INFO_PRINT_LONGEST           = _UxGT("ÊúÄÈï∑");     // "Longest"
+    LSTR MSG_INFO_PRINT_FILAMENT          = _UxGT("Â∑≤Êì†Âá∫");     // "Extruded"
   #endif
 
-  PROGMEM Language_Str MSG_INFO_MIN_TEMP                   = _UxGT("ÊúÄ‰ΩéÊ∫´Â∫¶");     // "Min Temp"
-  PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("ÊúÄÈ´òÊ∫´Â∫¶");     // "Max Temp"
-  PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("ÈõªÊ∫ê‰æõÊáâ");     // "Power Supply"
-  PROGMEM Language_Str MSG_DRIVE_STRENGTH                  = _UxGT("È©ÖÂãïÂäõÂ∫¶");     // "Drive Strength"
-  PROGMEM Language_Str MSG_DAC_PERCENT_A                   = LCD_STR_A _UxGT(" È©ÖÂãï %");    // X Driver %
-  PROGMEM Language_Str MSG_DAC_PERCENT_B                   = LCD_STR_B _UxGT(" È©ÖÂãï %");    // Y Driver %
-  PROGMEM Language_Str MSG_DAC_PERCENT_C                   = LCD_STR_C _UxGT(" È©ÖÂãï %");    // Z Driver %
-  PROGMEM Language_Str MSG_DAC_PERCENT_I                   = LCD_STR_I _UxGT(" È©ÖÂãï %");    // I Driver %
-  PROGMEM Language_Str MSG_DAC_PERCENT_J                   = LCD_STR_J _UxGT(" È©ÖÂãï %");    // J Driver %
-  PROGMEM Language_Str MSG_DAC_PERCENT_K                   = LCD_STR_K _UxGT(" È©ÖÂãï %");    // K Driver %
-  PROGMEM Language_Str MSG_DAC_PERCENT_E                   = _UxGT("E È©ÖÂãï %");    //E Driver %
-  PROGMEM Language_Str MSG_ERROR_TMC                       = _UxGT("TMCÈÄ£Êé•ÈåØË™§");   // "TMC CONNECTION ERROR"
-  PROGMEM Language_Str MSG_DAC_EEPROM_WRITE                = _UxGT("‰øùÂ≠òÈ©ÖÂãïË®≠ÁΩÆ");     // "DAC EEPROM Write"
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER          = _UxGT("Êõ¥ÊèõÁµ≤Êñô");   // "FILAMENT CHANGE"
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_PAUSE    = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "PRINT PAUSED"
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_LOAD     = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "LOAD FILAMENT"
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_UNLOAD   = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "UNLOAD FILAMENT"
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_HEADER   = _UxGT("ÊÅ¢Ë§áÈÅ∏È†Ö:");     // "RESUME OPTIONS:"
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_PURGE    = _UxGT("Ê∏ÖÈô§Êõ¥Â§ö");     // "Purge more"
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_RESUME   = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     // "Resume print"
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_NOZZLE          = _UxGT("  Âô¥Âò¥: ");     // "  Nozzle: "
-  PROGMEM Language_Str MSG_RUNOUT_SENSOR                   = _UxGT("Êñ∑Áµ≤ÂÅµÊ∏¨");    // "Runout Sensor"
-  PROGMEM Language_Str MSG_RUNOUT_DISTANCE_MM              = _UxGT("Áµ≤Ë∑ùÈõ¢mm");   // "Runout Dist mm"
-  PROGMEM Language_Str MSG_KILL_HOMING_FAILED              = _UxGT("Ê≠∏Âéü‰ΩçÂ§±Êïó");     // "Homing failed"
-  PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó");     // "Probing failed"
+  LSTR MSG_INFO_MIN_TEMP                  = _UxGT("ÊúÄ‰ΩéÊ∫´Â∫¶");     // "Min Temp"
+  LSTR MSG_INFO_MAX_TEMP                  = _UxGT("ÊúÄÈ´òÊ∫´Â∫¶");     // "Max Temp"
+  LSTR MSG_INFO_PSU                       = _UxGT("ÈõªÊ∫ê‰æõÊáâ");     // "Power Supply"
+  LSTR MSG_DRIVE_STRENGTH                 = _UxGT("È©ÖÂãïÂäõÂ∫¶");     // "Drive Strength"
+  LSTR MSG_DAC_PERCENT_A                  = LCD_STR_A _UxGT(" È©ÖÂãï %");    // X Driver %
+  LSTR MSG_DAC_PERCENT_B                  = LCD_STR_B _UxGT(" È©ÖÂãï %");    // Y Driver %
+  LSTR MSG_DAC_PERCENT_C                  = LCD_STR_C _UxGT(" È©ÖÂãï %");    // Z Driver %
+  LSTR MSG_DAC_PERCENT_I                  = LCD_STR_I _UxGT(" È©ÖÂãï %");    // I Driver %
+  LSTR MSG_DAC_PERCENT_J                  = LCD_STR_J _UxGT(" È©ÖÂãï %");    // J Driver %
+  LSTR MSG_DAC_PERCENT_K                  = LCD_STR_K _UxGT(" È©ÖÂãï %");    // K Driver %
+  LSTR MSG_DAC_PERCENT_E                  = _UxGT("E È©ÖÂãï %");    //E Driver %
+  LSTR MSG_ERROR_TMC                      = _UxGT("TMCÈÄ£Êé•ÈåØË™§");   // "TMC CONNECTION ERROR"
+  LSTR MSG_DAC_EEPROM_WRITE               = _UxGT("‰øùÂ≠òÈ©ÖÂãïË®≠ÁΩÆ");     // "DAC EEPROM Write"
+  LSTR MSG_FILAMENT_CHANGE_HEADER         = _UxGT("Êõ¥ÊèõÁµ≤Êñô");   // "FILAMENT CHANGE"
+  LSTR MSG_FILAMENT_CHANGE_HEADER_PAUSE   = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "PRINT PAUSED"
+  LSTR MSG_FILAMENT_CHANGE_HEADER_LOAD    = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "LOAD FILAMENT"
+  LSTR MSG_FILAMENT_CHANGE_HEADER_UNLOAD  = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "UNLOAD FILAMENT"
+  LSTR MSG_FILAMENT_CHANGE_OPTION_HEADER  = _UxGT("ÊÅ¢Ë§áÈÅ∏È†Ö:");     // "RESUME OPTIONS:"
+  LSTR MSG_FILAMENT_CHANGE_OPTION_PURGE   = _UxGT("Ê∏ÖÈô§Êõ¥Â§ö");     // "Purge more"
+  LSTR MSG_FILAMENT_CHANGE_OPTION_RESUME  = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     // "Resume print"
+  LSTR MSG_FILAMENT_CHANGE_NOZZLE         = _UxGT("  Âô¥Âò¥: ");     // "  Nozzle: "
+  LSTR MSG_RUNOUT_SENSOR                  = _UxGT("Êñ∑Áµ≤ÂÅµÊ∏¨");    // "Runout Sensor"
+  LSTR MSG_RUNOUT_DISTANCE_MM             = _UxGT("Áµ≤Ë∑ùÈõ¢mm");   // "Runout Dist mm"
+  LSTR MSG_KILL_HOMING_FAILED             = _UxGT("Ê≠∏Âéü‰ΩçÂ§±Êïó");     // "Homing failed"
+  LSTR MSG_LCD_PROBING_FAILED             = _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó");     // "Probing failed"
 
   //
   // Filament Change screens show up to 3 lines on a 4-line display
   //                        ...or up to 2 lines on a 3-line display
   //
   #if LCD_HEIGHT >= 4
-    PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "ÊÅ¢Âæ©ÂàóÂç∞")); //"Press Button to resume print"
-    PROGMEM Language_Str MSG_PAUSE_PRINT_PARKING           = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));   // "Parking..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_3_LINE("Á≠âÂæÖÈñãÂßã", "Áµ≤Êñô", "ËÆäÊõ¥"));     // "Wait for start of the filament change"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Âç∏‰∏ãÁµ≤Êñô"));     // "Wait for filament unload"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_3_LINE("ÊèíÂÖ•Áµ≤Êñô", "‰∏¶ÊåâÈçµ", "ÁπºÁ∫å ..."));     // "Insert filament and press button to continue..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "Âä†ÁÜ±Âô¥Âò¥."));     // "Press button to heat nozzle."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_2_LINE("Âä†ÁÜ±Âô¥Âò¥", "Ë´ãÁ≠âÂæÖ ..."));     // "Heating nozzle Please wait..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "ÈÄ≤Êñô"));     // "Wait for filament load"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Áµ≤ÊñôÊ∏ÖÈô§"));     // "Wait for filament purge"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE    = _UxGT(MSG_2_LINE("Êåâ‰∏ãÂÆåÊàê","Áµ≤ÊñôÊ∏ÖÈô§")); //"Press button to filament purge"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_2_LINE("Á≠âÂæÖÂàóÂç∞", "ÊÅ¢Âæ©"));     // "Wait for print to resume"
+    LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "ÊÅ¢Âæ©ÂàóÂç∞")); //"Press Button to resume print"
+    LSTR MSG_PAUSE_PRINT_PARKING          = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));   // "Parking..."
+    LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_3_LINE("Á≠âÂæÖÈñãÂßã", "Áµ≤Êñô", "ËÆäÊõ¥"));     // "Wait for start of the filament change"
+    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Âç∏‰∏ãÁµ≤Êñô"));     // "Wait for filament unload"
+    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_3_LINE("ÊèíÂÖ•Áµ≤Êñô", "‰∏¶ÊåâÈçµ", "ÁπºÁ∫å ..."));     // "Insert filament and press button to continue..."
+    LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "Âä†ÁÜ±Âô¥Âò¥."));     // "Press button to heat nozzle."
+    LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_2_LINE("Âä†ÁÜ±Âô¥Âò¥", "Ë´ãÁ≠âÂæÖ ..."));     // "Heating nozzle Please wait..."
+    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "ÈÄ≤Êñô"));     // "Wait for filament load"
+    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Áµ≤ÊñôÊ∏ÖÈô§"));     // "Wait for filament purge"
+    LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_2_LINE("Êåâ‰∏ãÂÆåÊàê","Áµ≤ÊñôÊ∏ÖÈô§")); //"Press button to filament purge"
+    LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_2_LINE("Á≠âÂæÖÂàóÂç∞", "ÊÅ¢Âæ©"));     // "Wait for print to resume"
   #else // LCD_HEIGHT < 4
-    PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_1_LINE("Êåâ‰∏ãÁπºÁ∫å.."));   // "Click to continue"
-    PROGMEM Language_Str MSG_PAUSE_PRINT_PARKING           = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));     // "Parking..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_1_LINE("Ë´ãÁ≠âÂæÖ ..."));     // "Please wait..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_1_LINE("ÊèíÂÖ•‰∏¶ÈªûÊìä"));     // "Insert and Click"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂä†ÁÜ±.."));     // "Click to heat"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_1_LINE("Âä†ÁÜ±‰∏≠ ..."));     // "Heating..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_1_LINE("ÈÄÄÂá∫‰∏≠ ..."));     // "Ejecting..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_1_LINE("ËºâÂÖ•‰∏≠ ..."));     // "Loading..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_1_LINE("Ê∏ÖÈô§‰∏≠ ..."));     // "Purging..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE    = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂÆåÊàê.."));     // "Click to finish"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_1_LINE("ÊÅ¢Âæ©‰∏≠ ..."));     // "Resuming..."
+    LSTR MSG_ADVANCED_PAUSE_WAITING       = _UxGT(MSG_1_LINE("Êåâ‰∏ãÁπºÁ∫å.."));   // "Click to continue"
+    LSTR MSG_PAUSE_PRINT_PARKING          = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));     // "Parking..."
+    LSTR MSG_FILAMENT_CHANGE_INIT         = _UxGT(MSG_1_LINE("Ë´ãÁ≠âÂæÖ ..."));     // "Please wait..."
+    LSTR MSG_FILAMENT_CHANGE_INSERT       = _UxGT(MSG_1_LINE("ÊèíÂÖ•‰∏¶ÈªûÊìä"));     // "Insert and Click"
+    LSTR MSG_FILAMENT_CHANGE_HEAT         = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂä†ÁÜ±.."));     // "Click to heat"
+    LSTR MSG_FILAMENT_CHANGE_HEATING      = _UxGT(MSG_1_LINE("Âä†ÁÜ±‰∏≠ ..."));     // "Heating..."
+    LSTR MSG_FILAMENT_CHANGE_UNLOAD       = _UxGT(MSG_1_LINE("ÈÄÄÂá∫‰∏≠ ..."));     // "Ejecting..."
+    LSTR MSG_FILAMENT_CHANGE_LOAD         = _UxGT(MSG_1_LINE("ËºâÂÖ•‰∏≠ ..."));     // "Loading..."
+    LSTR MSG_FILAMENT_CHANGE_PURGE        = _UxGT(MSG_1_LINE("Ê∏ÖÈô§‰∏≠ ..."));     // "Purging..."
+    LSTR MSG_FILAMENT_CHANGE_CONT_PURGE   = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂÆåÊàê.."));     // "Click to finish"
+    LSTR MSG_FILAMENT_CHANGE_RESUME       = _UxGT(MSG_1_LINE("ÊÅ¢Âæ©‰∏≠ ..."));     // "Resuming..."
   #endif // LCD_HEIGHT < 4
 }
 

commit d95d452b29b80e66d534b36c78262454664ce5a1
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Aug 29 23:02:53 2021 -0500

    üåê MSG_PROBING_MESH => MSG_PROBING_POINT

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 2c7d1bf69f..467a2467f5 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -103,7 +103,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_MESH_EDITOR                     = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂô®");    // "Mesh Editor"
   PROGMEM Language_Str MSG_EDIT_MESH                       = _UxGT("Á∑®ËºØÁ∂≤Ê†º");     // "Edit Mesh"
   PROGMEM Language_Str MSG_EDITING_STOPPED                 = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂ∑≤ÂÅúÊ≠¢");     // "Mesh Editing Stopped"
-  PROGMEM Language_Str MSG_PROBING_MESH                    = _UxGT("Êé¢Ê∏¨Èªû");   // "Probing Point"
+  PROGMEM Language_Str MSG_PROBING_POINT                   = _UxGT("Êé¢Ê∏¨Èªû");   // "Probing Point"
   PROGMEM Language_Str MSG_MESH_X                          = _UxGT("Á¥¢Âºï X");    // "Index X"
   PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("Á¥¢Âºï Y");    // "Index Y"
   PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Z ÂÄº");    // "Z Value"

commit 9046254a14b92b6bdf1696b1ed839b71615a0772
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Aug 20 15:40:17 2021 -0500

    üåê Update menu titles, add more IJK (#22605)
    
    Followup to #19112

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index f162536132..2c7d1bf69f 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -33,84 +33,84 @@ namespace Language_zh_TW {
   constexpr uint8_t    CHARSIZE                            = 3;
   PROGMEM Language_Str LANGUAGE                            = _UxGT("Traditional Chinese");
 
-  PROGMEM Language_Str WELCOME_MSG                         = MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.");     //" ready."
+  PROGMEM Language_Str WELCOME_MSG                         = MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.");     // " ready."
   PROGMEM Language_Str MSG_MARLIN                          = _UxGT("Marlin");
-  PROGMEM Language_Str MSG_YES                             = _UxGT("ÊòØ");  //"YES"
-  PROGMEM Language_Str MSG_NO                              = _UxGT("Âê¶");  //"NO"
+  PROGMEM Language_Str MSG_YES                             = _UxGT("ÊòØ");  // "YES"
+  PROGMEM Language_Str MSG_NO                              = _UxGT("Âê¶");  // "NO"
   PROGMEM Language_Str MSG_BACK                            = _UxGT("ËøîÂõû");     // "Back"
-  PROGMEM Language_Str MSG_MEDIA_ABORTING                  = _UxGT("Ê≠£Âú®‰∏≠Ê≠¢...");   //"Aborting..."
-  PROGMEM Language_Str MSG_MEDIA_INSERTED                  = _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•");     //"Card inserted"
-  PROGMEM Language_Str MSG_MEDIA_REMOVED                   = _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫");     //"Card removed"
-  PROGMEM Language_Str MSG_MEDIA_WAITING                   = _UxGT("Á≠âÂæÖË®òÊÜ∂Âç°");    //"Waiting for media"
+  PROGMEM Language_Str MSG_MEDIA_ABORTING                  = _UxGT("Ê≠£Âú®‰∏≠Ê≠¢...");   // "Aborting..."
+  PROGMEM Language_Str MSG_MEDIA_INSERTED                  = _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•");     // "Card inserted"
+  PROGMEM Language_Str MSG_MEDIA_REMOVED                   = _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫");     // "Card removed"
+  PROGMEM Language_Str MSG_MEDIA_WAITING                   = _UxGT("Á≠âÂæÖË®òÊÜ∂Âç°");    // "Waiting for media"
   PROGMEM Language_Str MSG_MEDIA_READ_ERROR                = _UxGT("Ë®òÊÜ∂Âç°ËÆÄÂèñÈåØË™§"); //"Media read error"
-  PROGMEM Language_Str MSG_MEDIA_USB_REMOVED               = _UxGT("USBË£ùÁΩÆÂ∑≤ÁßªÈô§");   //"USB device removed"
-  PROGMEM Language_Str MSG_MEDIA_USB_FAILED                = _UxGT("USBÂïüÂãïÂ§±Êïó");  //"USB start failed"
-  PROGMEM Language_Str MSG_LCD_ENDSTOPS                    = _UxGT("ÊìãÂ°ä");     //"Endstops" // Max length 8 characters
-  PROGMEM Language_Str MSG_LCD_SOFT_ENDSTOPS               = _UxGT("ËªüÈ´îÊìãÂ°ä");    //"Soft Endstops"
-  PROGMEM Language_Str MSG_MAIN                            = _UxGT("‰∏ªÈÅ∏ÂñÆ");     //"Main"
-  PROGMEM Language_Str MSG_ADVANCED_SETTINGS               = _UxGT("ÈÄ≤ÈöéË®≠ÁΩÆ");   //"Advanced Settings"
+  PROGMEM Language_Str MSG_MEDIA_USB_REMOVED               = _UxGT("USBË£ùÁΩÆÂ∑≤ÁßªÈô§");   // "USB device removed"
+  PROGMEM Language_Str MSG_MEDIA_USB_FAILED                = _UxGT("USBÂïüÂãïÂ§±Êïó");  // "USB start failed"
+  PROGMEM Language_Str MSG_LCD_ENDSTOPS                    = _UxGT("ÊìãÂ°ä");     // "Endstops" // Max length 8 characters
+  PROGMEM Language_Str MSG_LCD_SOFT_ENDSTOPS               = _UxGT("ËªüÈ´îÊìãÂ°ä");    // "Soft Endstops"
+  PROGMEM Language_Str MSG_MAIN                            = _UxGT("‰∏ªÈÅ∏ÂñÆ");     // "Main"
+  PROGMEM Language_Str MSG_ADVANCED_SETTINGS               = _UxGT("ÈÄ≤ÈöéË®≠ÁΩÆ");   // "Advanced Settings"
   PROGMEM Language_Str MSG_CONFIGURATION                   = _UxGT("Ë®≠ÁΩÆ");    //Configuration
-  PROGMEM Language_Str MSG_RUN_AUTO_FILES                  = _UxGT("Ëá™ÂãïÈñãÂßã");     //"Autostart"
-  PROGMEM Language_Str MSG_DISABLE_STEPPERS                = _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È¶¨ÈÅî");     //"Disable steppers"
+  PROGMEM Language_Str MSG_RUN_AUTO_FILES                  = _UxGT("Ëá™ÂãïÈñãÂßã");     // "Autostart"
+  PROGMEM Language_Str MSG_DISABLE_STEPPERS                = _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È¶¨ÈÅî");     // "Disable steppers"
   PROGMEM Language_Str MSG_DEBUG_MENU                      = _UxGT("Èô§ÈåØÈÅ∏ÂñÆ");     // "Debug Menu"
   PROGMEM Language_Str MSG_PROGRESS_BAR_TEST               = _UxGT("ÈÄ≤Â∫¶Ê¢ùÊ∏¨Ë©¶");     // "Progress Bar Test"
-  PROGMEM Language_Str MSG_AUTO_HOME                       = _UxGT("Ëá™ÂãïÂõûÂéüÈªû");     //"Auto home"
-  PROGMEM Language_Str MSG_AUTO_HOME_X                     = _UxGT("ÂõûXÂéüÈªû");     //"Home X"
-  PROGMEM Language_Str MSG_AUTO_HOME_Y                     = _UxGT("ÂõûYÂéüÈªû");     //"Home Y"
-  PROGMEM Language_Str MSG_AUTO_HOME_Z                     = _UxGT("ÂõûZÂéüÈªû");     //"Home Z"
-  PROGMEM Language_Str MSG_AUTO_Z_ALIGN                    = _UxGT("Ëá™ÂãïZÂ∞çÈΩä");   //"Auto Z-Align"
-  PROGMEM Language_Str MSG_LEVEL_BED_HOMING                = _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏ÂéüÈªû");     //"Homing XYZ"
-  PROGMEM Language_Str MSG_LEVEL_BED_WAITING               = _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥");     //"Click to Begin"
-  PROGMEM Language_Str MSG_LEVEL_BED_NEXT_POINT            = _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû");     //"Next Point"
-  PROGMEM Language_Str MSG_LEVEL_BED_DONE                  = _UxGT("ÂÆåÊàêÁÜ±Â∫äË™øÂπ≥");     //"Leveling Done!"
+  PROGMEM Language_Str MSG_AUTO_HOME                       = _UxGT("Ëá™ÂãïÂõûÂéüÈªû");     // "Auto home"
+  PROGMEM Language_Str MSG_AUTO_HOME_X                     = _UxGT("ÂõûXÂéüÈªû");     // "Home X"
+  PROGMEM Language_Str MSG_AUTO_HOME_Y                     = _UxGT("ÂõûYÂéüÈªû");     // "Home Y"
+  PROGMEM Language_Str MSG_AUTO_HOME_Z                     = _UxGT("ÂõûZÂéüÈªû");     // "Home Z"
+  PROGMEM Language_Str MSG_AUTO_Z_ALIGN                    = _UxGT("Ëá™ÂãïZÂ∞çÈΩä");   // "Auto Z-Align"
+  PROGMEM Language_Str MSG_LEVEL_BED_HOMING                = _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏ÂéüÈªû");     // "Homing XYZ"
+  PROGMEM Language_Str MSG_LEVEL_BED_WAITING               = _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥");     // "Click to Begin"
+  PROGMEM Language_Str MSG_LEVEL_BED_NEXT_POINT            = _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû");     // "Next Point"
+  PROGMEM Language_Str MSG_LEVEL_BED_DONE                  = _UxGT("ÂÆåÊàêÁÜ±Â∫äË™øÂπ≥");     // "Leveling Done!"
   PROGMEM Language_Str MSG_Z_FADE_HEIGHT                   = _UxGT("Ê∑°Âá∫È´òÂ∫¶");     // "Fade Height"
-  PROGMEM Language_Str MSG_SET_HOME_OFFSETS                = _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª");     //"Set home offsets"
-  PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®");     //"Offsets applied"
-  PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("Ë®≠ÁΩÆÂéüÈªû");     //"Set origin"
+  PROGMEM Language_Str MSG_SET_HOME_OFFSETS                = _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª");     // "Set home offsets"
+  PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®");     // "Offsets applied"
+  PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("Ë®≠ÁΩÆÂéüÈªû");     // "Set origin"
   #if PREHEAT_COUNT
-    PROGMEM Language_Str MSG_PREHEAT_1                     = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL;     //"Preheat PREHEAT_1_LABEL"
-    PROGMEM Language_Str MSG_PREHEAT_1_H                   = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~";     //"Preheat PREHEAT_1_LABEL"
+    PROGMEM Language_Str MSG_PREHEAT_1                     = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL;     // "Preheat PREHEAT_1_LABEL"
+    PROGMEM Language_Str MSG_PREHEAT_1_H                   = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~";     // "Preheat PREHEAT_1_LABEL"
     PROGMEM Language_Str MSG_PREHEAT_1_END                 = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥");     //MSG_PREHEAT_1 " "
     PROGMEM Language_Str MSG_PREHEAT_1_END_E               = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ~");   //MSG_PREHEAT_1 " "
     PROGMEM Language_Str MSG_PREHEAT_1_ALL                 = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
     PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY             = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
     PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS            = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
 
-    PROGMEM Language_Str MSG_PREHEAT_M                     = _UxGT("È†êÁÜ± $");     //"Preheat PREHEAT_1_LABEL"
-    PROGMEM Language_Str MSG_PREHEAT_M_H                   = _UxGT("È†êÁÜ± $ ~");     //"Preheat PREHEAT_1_LABEL"
+    PROGMEM Language_Str MSG_PREHEAT_M                     = _UxGT("È†êÁÜ± $");     // "Preheat PREHEAT_1_LABEL"
+    PROGMEM Language_Str MSG_PREHEAT_M_H                   = _UxGT("È†êÁÜ± $ ~");     // "Preheat PREHEAT_1_LABEL"
     PROGMEM Language_Str MSG_PREHEAT_M_END                 = _UxGT("È†êÁÜ± $ Âô¥Âò¥");     //MSG_PREHEAT_1 " "
     PROGMEM Language_Str MSG_PREHEAT_M_END_E               = _UxGT("È†êÁÜ± $ Âô¥Âò¥ ~");   //MSG_PREHEAT_1 " "
     PROGMEM Language_Str MSG_PREHEAT_M_ALL                 = _UxGT("È†êÁÜ± $ ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
     PROGMEM Language_Str MSG_PREHEAT_M_BEDONLY             = _UxGT("È†êÁÜ± $ ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
     PROGMEM Language_Str MSG_PREHEAT_M_SETTINGS            = _UxGT("È†êÁÜ± $ Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
   #endif
-  PROGMEM Language_Str MSG_PREHEAT_CUSTOM                  = _UxGT("Ëá™ÂÆöÈ†êÁÜ±");   //"Preheat Custom"
-  PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("ÈôçÊ∫´");     //"Cooldown"
-  PROGMEM Language_Str MSG_LASER_MENU                      = _UxGT("ÊøÄÂÖâÊéßÂà∂");    //"Laser Control"
-  PROGMEM Language_Str MSG_LASER_POWER                     = _UxGT("ÊøÄÂÖâÈõªÊ∫ê");    //"Laser Power"
-  PROGMEM Language_Str MSG_SPINDLE_MENU                    = _UxGT("‰∏ªËª∏ÊéßÂëäÂà∂");    //"Spindle Control"
-  PROGMEM Language_Str MSG_SPINDLE_POWER                   = _UxGT("‰∏ªËª∏ÈõªÊ∫ê");    //"Spindle Power"
-  PROGMEM Language_Str MSG_SPINDLE_REVERSE                 = _UxGT("‰∏ªËª∏ÂèçËΩâ");  //"Spindle Reverse"
-  PROGMEM Language_Str MSG_SWITCH_PS_ON                    = _UxGT("ÈõªÊ∫êÊâìÈñã");     //"Switch power on"
-  PROGMEM Language_Str MSG_SWITCH_PS_OFF                   = _UxGT("ÈõªÊ∫êÈóúÈñâ");     //"Switch power off"
-  PROGMEM Language_Str MSG_EXTRUDE                         = _UxGT("Êì†Âá∫");     //"Extrude"
-  PROGMEM Language_Str MSG_RETRACT                         = _UxGT("ÂõûÁ∏Æ");     //"Retract"
-  PROGMEM Language_Str MSG_MOVE_AXIS                       = _UxGT("ÁßªÂãïËª∏");     //"Move axis"
-  PROGMEM Language_Str MSG_BED_LEVELING                    = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     //"Bed leveling"
-  PROGMEM Language_Str MSG_LEVEL_BED                       = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     //"Level bed"
+  PROGMEM Language_Str MSG_PREHEAT_CUSTOM                  = _UxGT("Ëá™ÂÆöÈ†êÁÜ±");   // "Preheat Custom"
+  PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("ÈôçÊ∫´");     // "Cooldown"
+  PROGMEM Language_Str MSG_LASER_MENU                      = _UxGT("ÊøÄÂÖâÊéßÂà∂");    // "Laser Control"
+  PROGMEM Language_Str MSG_LASER_POWER                     = _UxGT("ÊøÄÂÖâÈõªÊ∫ê");    // "Laser Power"
+  PROGMEM Language_Str MSG_SPINDLE_MENU                    = _UxGT("‰∏ªËª∏ÊéßÂëäÂà∂");    // "Spindle Control"
+  PROGMEM Language_Str MSG_SPINDLE_POWER                   = _UxGT("‰∏ªËª∏ÈõªÊ∫ê");    // "Spindle Power"
+  PROGMEM Language_Str MSG_SPINDLE_REVERSE                 = _UxGT("‰∏ªËª∏ÂèçËΩâ");  // "Spindle Reverse"
+  PROGMEM Language_Str MSG_SWITCH_PS_ON                    = _UxGT("ÈõªÊ∫êÊâìÈñã");     // "Switch power on"
+  PROGMEM Language_Str MSG_SWITCH_PS_OFF                   = _UxGT("ÈõªÊ∫êÈóúÈñâ");     // "Switch power off"
+  PROGMEM Language_Str MSG_EXTRUDE                         = _UxGT("Êì†Âá∫");     // "Extrude"
+  PROGMEM Language_Str MSG_RETRACT                         = _UxGT("ÂõûÁ∏Æ");     // "Retract"
+  PROGMEM Language_Str MSG_MOVE_AXIS                       = _UxGT("ÁßªÂãïËª∏");     // "Move axis"
+  PROGMEM Language_Str MSG_BED_LEVELING                    = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     // "Bed leveling"
+  PROGMEM Language_Str MSG_LEVEL_BED                       = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     // "Level bed"
   PROGMEM Language_Str MSG_BED_TRAMMING                    = _UxGT("Ë™øÂπ≥ÈÇäËßí");     // "Bed Tramming"
   PROGMEM Language_Str MSG_NEXT_CORNER                     = _UxGT("‰∏ãÂÄãÈÇäËßí");     // "Next corner"
-  PROGMEM Language_Str MSG_MESH_EDITOR                     = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂô®");    //"Mesh Editor"
+  PROGMEM Language_Str MSG_MESH_EDITOR                     = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂô®");    // "Mesh Editor"
   PROGMEM Language_Str MSG_EDIT_MESH                       = _UxGT("Á∑®ËºØÁ∂≤Ê†º");     // "Edit Mesh"
   PROGMEM Language_Str MSG_EDITING_STOPPED                 = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂ∑≤ÂÅúÊ≠¢");     // "Mesh Editing Stopped"
-  PROGMEM Language_Str MSG_PROBING_MESH                    = _UxGT("Êé¢Ê∏¨Èªû");   //"Probing Point"
-  PROGMEM Language_Str MSG_MESH_X                          = _UxGT("Á¥¢Âºï X");    //"Index X"
-  PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("Á¥¢Âºï Y");    //"Index Y"
-  PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Z ÂÄº");    //"Z Value"
+  PROGMEM Language_Str MSG_PROBING_MESH                    = _UxGT("Êé¢Ê∏¨Èªû");   // "Probing Point"
+  PROGMEM Language_Str MSG_MESH_X                          = _UxGT("Á¥¢Âºï X");    // "Index X"
+  PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("Á¥¢Âºï Y");    // "Index Y"
+  PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Z ÂÄº");    // "Z Value"
   PROGMEM Language_Str MSG_CUSTOM_COMMANDS                 = _UxGT("Ëá™ÂÆöÂëΩ‰ª§");     // "Custom Commands"
-  PROGMEM Language_Str MSG_M48_TEST                        = _UxGT("M48 Êé¢Ê∏¨Ê∏¨Ë©¶");   //"M48 Probe Test"
-  PROGMEM Language_Str MSG_M48_POINT                       = _UxGT("M48 Êé¢Ê∏¨Èªû");    //"M48 Point"
-  PROGMEM Language_Str MSG_M48_DEVIATION                   = _UxGT("ÂÅèÂ∑Æ");    //"Deviation"
+  PROGMEM Language_Str MSG_M48_TEST                        = _UxGT("M48 Êé¢Ê∏¨Ê∏¨Ë©¶");   // "M48 Probe Test"
+  PROGMEM Language_Str MSG_M48_POINT                       = _UxGT("M48 Êé¢Ê∏¨Èªû");    // "M48 Point"
+  PROGMEM Language_Str MSG_M48_DEVIATION                   = _UxGT("ÂÅèÂ∑Æ");    // "Deviation"
   PROGMEM Language_Str MSG_IDEX_MENU                       = _UxGT("IDEX Mode");
   PROGMEM Language_Str MSG_OFFSETS_MENU                    = _UxGT("Tool Offsets");
   PROGMEM Language_Str MSG_IDEX_MODE_AUTOPARK              = _UxGT("Auto-Park");
@@ -123,7 +123,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_UBL_DOING_G29                   = _UxGT("Âü∑Ë°åG29");     // "Doing G29"
   PROGMEM Language_Str MSG_UBL_TOOLS                       = _UxGT("UBLÂ∑•ÂÖ∑");     // "UBL Tools"
   PROGMEM Language_Str MSG_UBL_LEVEL_BED                   = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"
-  PROGMEM Language_Str MSG_LCD_TILTING_MESH                = _UxGT("ÂÇæÊñúÈªû");  //"Tilting Point"
+  PROGMEM Language_Str MSG_LCD_TILTING_MESH                = _UxGT("ÂÇæÊñúÈªû");  // "Tilting Point"
   PROGMEM Language_Str MSG_UBL_MANUAL_MESH                 = _UxGT("ÊâãÂ∑•Âª∫Á∂≤");     // "Manually Build Mesh"
   PROGMEM Language_Str MSG_UBL_BC_INSERT                   = _UxGT("ÊîæÁΩÆÂ¢äÁâá‰∏¶Ê∏¨Èáè");     // "Place shim & measure"
   PROGMEM Language_Str MSG_UBL_BC_INSERT2                  = _UxGT("Ê∏¨Èáè");     // "Measure"
@@ -132,9 +132,9 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_UBL_ACTIVATE_MESH               = _UxGT("ÂïüÂãïUBL");     // "Activate UBL"
   PROGMEM Language_Str MSG_UBL_DEACTIVATE_MESH             = _UxGT("ÈóúÈñâUBL");     // "Deactivate UBL"
   PROGMEM Language_Str MSG_UBL_SET_TEMP_BED                = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");     // "Bed Temp"
-  PROGMEM Language_Str MSG_UBL_BED_TEMP_CUSTOM             = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");    //"Bed Temp")
+  PROGMEM Language_Str MSG_UBL_BED_TEMP_CUSTOM             = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");    // "Bed Temp")
   PROGMEM Language_Str MSG_UBL_SET_TEMP_HOTEND             = _UxGT("ÁΩÆË®≠Âô¥Âò¥Ê∫´Â∫¶");     // "Hotend Temp"
-  PROGMEM Language_Str MSG_UBL_HOTEND_TEMP_CUSTOM          = _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶");    //"Hotend Temp"
+  PROGMEM Language_Str MSG_UBL_HOTEND_TEMP_CUSTOM          = _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶");    // "Hotend Temp"
   PROGMEM Language_Str MSG_UBL_MESH_EDIT                   = _UxGT("Á∂≤Ê†ºÁ∑®ËºØ");     // "Mesh Edit"
   PROGMEM Language_Str MSG_UBL_EDIT_CUSTOM_MESH            = _UxGT("Á∑®ËºØÂÆ¢Êà∂Á∂≤Ê†º");     // "Edit Custom Mesh"
   PROGMEM Language_Str MSG_UBL_FINE_TUNE_MESH              = _UxGT("Á¥∞Ë™øÁ∂≤Ê†º");     // "Fine Tuning Mesh"
@@ -150,13 +150,13 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_AMOUNT          = _UxGT("È´òÂ∫¶ÂêàË®à");     // "Height Amount"
   PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_MENU          = _UxGT("ÊâπÂáÜÁ∂≤Ê†º");     // "Validate Mesh"
   PROGMEM Language_Str MSG_UBL_VALIDATE_CUSTOM_MESH        = _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º");     // "Validate Custom Mesh"
-  PROGMEM Language_Str MSG_G26_HEATING_BED                 = _UxGT("G26 Âä†ÁÜ±ÁÜ±Â∫ä");    //"G26 Heating Bed"
+  PROGMEM Language_Str MSG_G26_HEATING_BED                 = _UxGT("G26 Âä†ÁÜ±ÁÜ±Â∫ä");    // "G26 Heating Bed"
   PROGMEM Language_Str MSG_G26_HEATING_NOZZLE              = _UxGT("G26 Âä†ÁÜ±Âô¥Âò¥"); //"G26 Heating Nozzle"
-  PROGMEM Language_Str MSG_G26_MANUAL_PRIME                = _UxGT("ÊâãÂãïÂ°´Ë£ù");  //"Manual priming..."
-  PROGMEM Language_Str MSG_G26_FIXED_LENGTH                = _UxGT("Âõ∫ÂÆöË∑ùÈõ¢Â°´Ë£ù");   //"Fixed Length Prime"
-  PROGMEM Language_Str MSG_G26_PRIME_DONE                  = _UxGT("ÂÆåÊàêÂ°´Ë£ù");   //"Done Priming"
-  PROGMEM Language_Str MSG_G26_CANCELED                    = _UxGT("G26Â∑≤ÂèñÊ∂à");   //"G26 Canceled"
-  PROGMEM Language_Str MSG_G26_LEAVING                     = _UxGT("Èõ¢Èñã G26");  //"Leaving G26"
+  PROGMEM Language_Str MSG_G26_MANUAL_PRIME                = _UxGT("ÊâãÂãïÂ°´Ë£ù");  // "Manual priming..."
+  PROGMEM Language_Str MSG_G26_FIXED_LENGTH                = _UxGT("Âõ∫ÂÆöË∑ùÈõ¢Â°´Ë£ù");   // "Fixed Length Prime"
+  PROGMEM Language_Str MSG_G26_PRIME_DONE                  = _UxGT("ÂÆåÊàêÂ°´Ë£ù");   // "Done Priming"
+  PROGMEM Language_Str MSG_G26_CANCELED                    = _UxGT("G26Â∑≤ÂèñÊ∂à");   // "G26 Canceled"
+  PROGMEM Language_Str MSG_G26_LEAVING                     = _UxGT("Èõ¢Èñã G26");  // "Leaving G26"
   PROGMEM Language_Str MSG_UBL_CONTINUE_MESH               = _UxGT("ÁπºÁ∫åÁÜ±Â∫äÁ∂≤Ê†º");     // "Continue Bed Mesh"
   PROGMEM Language_Str MSG_UBL_MESH_LEVELING               = _UxGT("Á∂≤Ê†ºË™øÂπ≥");     // "Mesh Leveling"
   PROGMEM Language_Str MSG_UBL_3POINT_MESH_LEVELING        = _UxGT("‰∏âÈªûË™øÂπ≥");     // "3-Point Leveling"
@@ -186,7 +186,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_UBL_NO_STORAGE                  = _UxGT("Ê≤íÊúâÂ≠òÂÑ≤");     // "No storage"
   PROGMEM Language_Str MSG_UBL_SAVE_ERROR                  = _UxGT("ÈåØË™§: UBL‰øùÂ≠ò");     // "Err: UBL Save"
   PROGMEM Language_Str MSG_UBL_RESTORE_ERROR               = _UxGT("ÈåØË™§: UBLÈÇÑÂéü");     // "Err: UBL Restore"
-  PROGMEM Language_Str MSG_UBL_Z_OFFSET                    = _UxGT("Z-ÂÅèÁßª:");   //"Z-Offset: "
+  PROGMEM Language_Str MSG_UBL_Z_OFFSET                    = _UxGT("Z-ÂÅèÁßª:");   // "Z-Offset: "
   PROGMEM Language_Str MSG_UBL_Z_OFFSET_STOPPED            = _UxGT("ZÂÅèÁßªÂ∑≤ÂÅúÊ≠¢");     // "Z-Offset Stopped"
   PROGMEM Language_Str MSG_UBL_STEP_BY_STEP_MENU           = _UxGT("‰∏ÄÊ≠•Ê≠•UBL");     // "Step-By-Step UBL"
   PROGMEM Language_Str MSG_UBL_1_BUILD_COLD_MESH           = _UxGT("1. ÂâµË®≠ÂÜ∑Á∂≤Ê†º");
@@ -218,148 +218,160 @@ namespace Language_zh_TW {
 
   PROGMEM Language_Str MSG_MOVING                          = _UxGT("ÁßªÂãï ...");     // "Moving...")
   PROGMEM Language_Str MSG_FREE_XY                         = _UxGT("ÈáãÊîæ XY");     // "Free XY")
-  PROGMEM Language_Str MSG_MOVE_X                          = _UxGT("ÁßªÂãïX");     //"Move X"
-  PROGMEM Language_Str MSG_MOVE_Y                          = _UxGT("ÁßªÂãïY");     //"Move Y"
-  PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("ÁßªÂãïZ");     //"Move Z"
-  PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("Êì†Âá∫Ê©ü");     //"Extruder"
-  PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("Êì†Âá∫Ê©ü *");       //"Extruder *"
-  PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†");   //"Hotend too cold"
-  PROGMEM Language_Str MSG_MOVE_N_MM                       = _UxGT("ÁßªÂãï %s mm");     //"Move 0.025mm"
-  PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("ÁßªÂãï 0.1 mm");    //"Move 0.1mm"
-  PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("ÁßªÂãï 1 mm");      //"Move 1mm"
-  PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("ÁßªÂãï 10 mm");     //"Move 10mm"
-  PROGMEM Language_Str MSG_MOVE_100MM                      = _UxGT("ÁßªÂãï 100 mm");    //"Move 100mm"
-  PROGMEM Language_Str MSG_SPEED                           = _UxGT("ÈÄüÁéá");     //"Speed"
-  PROGMEM Language_Str MSG_BED_Z                           = _UxGT("ÁÜ±Â∫äZ");     //"Bed Z"
-  PROGMEM Language_Str MSG_NOZZLE                          = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥");     //"Nozzle" Âô¥Âò¥
+  PROGMEM Language_Str MSG_MOVE_X                          = _UxGT("ÁßªÂãïX");     // "Move X"
+  PROGMEM Language_Str MSG_MOVE_Y                          = _UxGT("ÁßªÂãïY");     // "Move Y"
+  PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("ÁßªÂãïZ");     // "Move Z"
+  PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("Êì†Âá∫Ê©ü");     // "Extruder"
+  PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("Êì†Âá∫Ê©ü *");       // "Extruder *"
+  PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†");   // "Hotend too cold"
+  PROGMEM Language_Str MSG_MOVE_N_MM                       = _UxGT("ÁßªÂãï %s mm");     // "Move 0.025mm"
+  PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("ÁßªÂãï 0.1 mm");    // "Move 0.1mm"
+  PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("ÁßªÂãï 1 mm");      // "Move 1mm"
+  PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("ÁßªÂãï 10 mm");     // "Move 10mm"
+  PROGMEM Language_Str MSG_MOVE_100MM                      = _UxGT("ÁßªÂãï 100 mm");    // "Move 100mm"
+  PROGMEM Language_Str MSG_SPEED                           = _UxGT("ÈÄüÁéá");     // "Speed"
+  PROGMEM Language_Str MSG_BED_Z                           = _UxGT("ÁÜ±Â∫äZ");     // "Bed Z"
+  PROGMEM Language_Str MSG_NOZZLE                          = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥");     // "Nozzle" Âô¥Âò¥
   PROGMEM Language_Str MSG_NOZZLE_N                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ~");
-  PROGMEM Language_Str MSG_BED                             = " " LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä");     //"Bed"
+  PROGMEM Language_Str MSG_BED                             = " " LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä");     // "Bed"
   PROGMEM Language_Str MSG_CHAMBER                         = _UxGT("Enclosure");
-  PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("È¢®ÊâáÈÄüÁéá");     //"Fan speed"
+  PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("È¢®ÊâáÈÄüÁéá");     // "Fan speed"
   PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("È¢®ÊâáÈÄüÁéá =");
   PROGMEM Language_Str MSG_STORED_FAN_N                    = _UxGT("Stored Fan =");
   PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá");     // "Extra fan speed"
   PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá =");
   PROGMEM Language_Str MSG_FLOW                            = _UxGT("Êì†Âá∫ÈÄüÁéá");
-  PROGMEM Language_Str MSG_FLOW_N                          = _UxGT("Êì†Âá∫ÈÄüÁéá ~");     //"Flow"
-  PROGMEM Language_Str MSG_CONTROL                         = _UxGT("ÊéßÂà∂");     //"Control"
-  PROGMEM Language_Str MSG_MIN                             = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ∞è");     //" " LCD_STR_THERMOMETER " Min"
-  PROGMEM Language_Str MSG_MAX                             = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ§ß");     //" " LCD_STR_THERMOMETER " Max"
-  PROGMEM Language_Str MSG_FACTOR                          = " " LCD_STR_THERMOMETER _UxGT(" Á≥ªÊï∏");     //" " LCD_STR_THERMOMETER " Fact"
-  PROGMEM Language_Str MSG_AUTOTEMP                        = _UxGT("Ëá™ÂãïÊéßÊ∫´");     //"Autotemp"
-  PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("Èñã ");     //"On"
-  PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("Èóú ");     //"Off"
+  PROGMEM Language_Str MSG_FLOW_N                          = _UxGT("Êì†Âá∫ÈÄüÁéá ~");     // "Flow"
+  PROGMEM Language_Str MSG_CONTROL                         = _UxGT("ÊéßÂà∂");     // "Control"
+  PROGMEM Language_Str MSG_MIN                             = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ∞è");     // " " LCD_STR_THERMOMETER " Min"
+  PROGMEM Language_Str MSG_MAX                             = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ§ß");     // " " LCD_STR_THERMOMETER " Max"
+  PROGMEM Language_Str MSG_FACTOR                          = " " LCD_STR_THERMOMETER _UxGT(" Á≥ªÊï∏");     // " " LCD_STR_THERMOMETER " Fact"
+  PROGMEM Language_Str MSG_AUTOTEMP                        = _UxGT("Ëá™ÂãïÊéßÊ∫´");     // "Autotemp"
+  PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("Èñã ");     // "On"
+  PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("Èóú ");     // "Off"
 
-  PROGMEM Language_Str MSG_SELECT                          = _UxGT("ÈÅ∏Êìá");     //"Select"
+  PROGMEM Language_Str MSG_SELECT                          = _UxGT("ÈÅ∏Êìá");     // "Select"
   PROGMEM Language_Str MSG_SELECT_E                        = _UxGT("ÈÅ∏Êìá *");
-  PROGMEM Language_Str MSG_ACC                             = _UxGT("Âä†ÈÄüÂ∫¶");     //"Accel" acceleration
-  PROGMEM Language_Str MSG_JERK                            = _UxGT("ÊäñÂãïÈÄüÁéá");     //"Jerk"
-  PROGMEM Language_Str MSG_VA_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_A;     //"Va-jerk"
-  PROGMEM Language_Str MSG_VB_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_B;     //"Vb-jerk"
-  PROGMEM Language_Str MSG_VC_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_C;     //"Vc-jerk"
-  PROGMEM Language_Str MSG_VE_JERK                         = _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá");     //"Ve-jerk"
+  PROGMEM Language_Str MSG_ACC                             = _UxGT("Âä†ÈÄüÂ∫¶");     // "Accel" acceleration
+  PROGMEM Language_Str MSG_JERK                            = _UxGT("ÊäñÂãïÈÄüÁéá");     // "Jerk"
+  PROGMEM Language_Str MSG_VA_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_A;     // "Va-jerk"
+  PROGMEM Language_Str MSG_VB_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_B;
+  PROGMEM Language_Str MSG_VC_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_C;
+  PROGMEM Language_Str MSG_VI_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_I;
+  PROGMEM Language_Str MSG_VJ_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_J;
+  PROGMEM Language_Str MSG_VK_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_K;
+  PROGMEM Language_Str MSG_VE_JERK                         = _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá");
 
   PROGMEM Language_Str MSG_VELOCITY                        = _UxGT("ÈÄüÂ∫¶");     // "Velocity"
-  PROGMEM Language_Str MSG_VMAX_A                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_A;     //"Vmax " max_feedrate_mm_s
+  PROGMEM Language_Str MSG_VMAX_A                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_A;     // "Vmax " max_feedrate_mm_s
   PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_B;
   PROGMEM Language_Str MSG_VMAX_C                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_C;
+  PROGMEM Language_Str MSG_VMAX_I                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_I;
+  PROGMEM Language_Str MSG_VMAX_J                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_J;
+  PROGMEM Language_Str MSG_VMAX_K                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_K;
   PROGMEM Language_Str MSG_VMAX_E                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_E;
-  PROGMEM Language_Str MSG_VMAX_EN                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá *");     //"Vmax " max_feedrate_mm_s
-  PROGMEM Language_Str MSG_VMIN                            = _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá");     //"Vmin"  min_feedrate_mm_s
-  PROGMEM Language_Str MSG_VTRAV_MIN                       = _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá");     //"VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
+  PROGMEM Language_Str MSG_VMAX_EN                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá *");     // "Vmax " max_feedrate_mm_s
+  PROGMEM Language_Str MSG_VMIN                            = _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá");     // "Vmin"  min_feedrate_mm_s
+  PROGMEM Language_Str MSG_VTRAV_MIN                       = _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá");     // "VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
   PROGMEM Language_Str MSG_ACCELERATION                    = _UxGT("Âä†ÈÄüÂ∫¶");     // "Acceleration"
-  PROGMEM Language_Str MSG_AMAX_A                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_A;     //"Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
+  PROGMEM Language_Str MSG_AMAX_A                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_A;     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
   PROGMEM Language_Str MSG_AMAX_B                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_B;
   PROGMEM Language_Str MSG_AMAX_C                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_C;
+  PROGMEM Language_Str MSG_AMAX_I                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_I;
+  PROGMEM Language_Str MSG_AMAX_J                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_J;
+  PROGMEM Language_Str MSG_AMAX_K                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_K;
   PROGMEM Language_Str MSG_AMAX_E                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_E;
-  PROGMEM Language_Str MSG_AMAX_EN                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ *");     //"Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
-  PROGMEM Language_Str MSG_A_RETRACT                       = _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶");     //"A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
-  PROGMEM Language_Str MSG_A_TRAVEL                        = _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶");     //"A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
-  PROGMEM Language_Str MSG_STEPS_PER_MM                    = _UxGT("Ëª∏Ê≠•Êï∏/mm");     //"Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
-  PROGMEM Language_Str MSG_A_STEPS                         = LCD_STR_A _UxGT("Ëª∏Ê≠•Êï∏/mm");     //"Asteps/mm" axis_steps_per_mm, axis steps-per-unit G92
-  PROGMEM Language_Str MSG_B_STEPS                         = LCD_STR_B _UxGT("Ëª∏Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_C_STEPS                         = LCD_STR_C _UxGT("Ëª∏Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_E_STEPS                         = _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm");     //"Esteps/mm"
+  PROGMEM Language_Str MSG_AMAX_EN                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ *");     // "Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
+  PROGMEM Language_Str MSG_A_RETRACT                       = _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶");     // "A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
+  PROGMEM Language_Str MSG_A_TRAVEL                        = _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶");     // "A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
+  PROGMEM Language_Str MSG_STEPS_PER_MM                    = _UxGT("Ëª∏Ê≠•Êï∏/mm");     // "Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
+  PROGMEM Language_Str MSG_A_STEPS                         = LCD_STR_A _UxGT(" Ëª∏Ê≠•Êï∏/mm");     // "Asteps/mm" axis_steps_per_mm, axis steps-per-unit G92
+  PROGMEM Language_Str MSG_B_STEPS                         = LCD_STR_B _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_C_STEPS                         = LCD_STR_C _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_I_STEPS                         = LCD_STR_I _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_J_STEPS                         = LCD_STR_J _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_K_STEPS                         = LCD_STR_K _UxGT(" Ëª∏Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_E_STEPS                         = _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm");     // "Esteps/mm"
   PROGMEM Language_Str MSG_EN_STEPS                        = _UxGT("Êì†Âá∫Ê©ü~Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Ê∫´Â∫¶");     //"Temperature"
-  PROGMEM Language_Str MSG_MOTION                          = _UxGT("ÈÅã‰Ωú");     //"Motion"
-  PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ");     //"Filament" menu_control_volumetric
-  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("Ê∏¨ÂÆπÁ©çmm") SUPERSCRIPT_THREE;     //"E in mm3" volumetric_enabled
-  PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("Áµ≤ÊñôÁõ¥Âæë");     //"Fil. Dia."
+  PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Ê∫´Â∫¶");     // "Temperature"
+  PROGMEM Language_Str MSG_MOTION                          = _UxGT("ÈÅã‰Ωú");     // "Motion"
+  PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ");     // "Filament" menu_control_volumetric
+  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("Ê∏¨ÂÆπÁ©çmm") SUPERSCRIPT_THREE;     // "E in mm3" volumetric_enabled
+  PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("Áµ≤ÊñôÁõ¥Âæë");     // "Fil. Dia."
   PROGMEM Language_Str MSG_FILAMENT_DIAM_E                 = _UxGT("Áµ≤ÊñôÁõ¥Âæë *");
   PROGMEM Language_Str MSG_FILAMENT_UNLOAD                 = _UxGT("Âç∏Ëºâ mm");     // "Unload mm"
   PROGMEM Language_Str MSG_FILAMENT_LOAD                   = _UxGT("Ë£ÖËºâ mm");     // "Load mm"
   PROGMEM Language_Str MSG_ADVANCE_K                       = _UxGT("Advance K");
   PROGMEM Language_Str MSG_ADVANCE_K_E                     = _UxGT("Advance K *");
-  PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("LCDÂ∞çÊØîÂ∫¶");     //"LCD contrast"
-  PROGMEM Language_Str MSG_STORE_EEPROM                    = _UxGT("‰øùÂ≠òË®≠ÁΩÆ");     //"Store memory"
-  PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("ËºâÂÖ•Ë®≠ÁΩÆ");     //"Load memory"
-  PROGMEM Language_Str MSG_RESTORE_DEFAULTS                = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº");     //"Restore failsafe"
+  PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("LCDÂ∞çÊØîÂ∫¶");     // "LCD contrast"
+  PROGMEM Language_Str MSG_STORE_EEPROM                    = _UxGT("‰øùÂ≠òË®≠ÁΩÆ");     // "Store memory"
+  PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("ËºâÂÖ•Ë®≠ÁΩÆ");     // "Load memory"
+  PROGMEM Language_Str MSG_RESTORE_DEFAULTS                = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº");     // "Restore failsafe"
   PROGMEM Language_Str MSG_INIT_EEPROM                     = _UxGT("ÂàùÂßãÂåñË®≠ÁΩÆ");     // "Initialize EEPROM"
-  PROGMEM Language_Str MSG_ERR_EEPROM_CRC                  = _UxGT("ÈåØË™§: EEPROM CRC");    //"Err: EEPROM CRC"
-  PROGMEM Language_Str MSG_ERR_EEPROM_INDEX                = _UxGT("ÈåØË™§: EEPROM Index");    //"Err: EEPROM Index"
-  PROGMEM Language_Str MSG_ERR_EEPROM_VERSION              = _UxGT("ÈåØË™§: EEPROM Version");    //"EEPROM Version"
-  PROGMEM Language_Str MSG_MEDIA_UPDATE                    = _UxGT("Â™íÈ´îÊõ¥Êñ∞");    //"Media Update"
-  PROGMEM Language_Str MSG_RESET_PRINTER                   = _UxGT("ÈáçÁΩÆÊâìÂç∞Ê©ü");    //"Reset Printer
-  PROGMEM Language_Str MSG_REFRESH                         = _UxGT("Âà∑Êñ∞");     //"Refresh"
-  PROGMEM Language_Str MSG_INFO_SCREEN                     = _UxGT("Ë≥áË®äÁïåÈù¢");     //"Info screen"
-  PROGMEM Language_Str MSG_PREPARE                         = _UxGT("Ê∫ñÂÇô");     //"Prepare"
-  PROGMEM Language_Str MSG_TUNE                            = _UxGT("Ë™øÊï¥");     //"Tune"
-  PROGMEM Language_Str MSG_START_PRINT                     = _UxGT("ÈñãÂßãÂàóÂç∞");   //"Start Print"
-  PROGMEM Language_Str MSG_BUTTON_NEXT                     = _UxGT("‰∏ã‰∏ÄÂÄã");   //"Next"
-  PROGMEM Language_Str MSG_BUTTON_INIT                     = _UxGT("ÂàùÂßã  ");   //"Init"
-  PROGMEM Language_Str MSG_BUTTON_STOP                     = _UxGT("ÂÅúÊ≠¢  ");   //"Stop"
-  PROGMEM Language_Str MSG_BUTTON_PRINT                    = _UxGT("ÂàóÂç∞  ");   //"Print"
-  PROGMEM Language_Str MSG_BUTTON_RESET                    = _UxGT("Âæ©Ê≠∏  ");   //"Reset"
-  PROGMEM Language_Str MSG_BUTTON_CANCEL                   = _UxGT("ÊîæÊ£Ñ  ");   //"Cancel"
-  PROGMEM Language_Str MSG_BUTTON_DONE                     = _UxGT("Á¢∫Ë™ç  ");   //"Done"
-  PROGMEM Language_Str MSG_BUTTON_BACK                     = _UxGT("ËøîÂõû  ");   //"Back"
-  PROGMEM Language_Str MSG_BUTTON_PROCEED                  = _UxGT("ÁπºÁ∫å  ");   //"Proceed"
-  PROGMEM Language_Str MSG_PAUSE_PRINT                     = _UxGT("Êö´ÂÅúÂàóÂç∞");     //"Pause print"
-  PROGMEM Language_Str MSG_RESUME_PRINT                    = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     //"Resume print"
-  PROGMEM Language_Str MSG_STOP_PRINT                      = _UxGT("ÂÅúÊ≠¢ÂàóÂç∞");     //"Stop print"
-  PROGMEM Language_Str MSG_PRINTING_OBJECT                 = _UxGT("ÂàóÂç∞Áâ©‰ª∂");   //"Printing Object"
-  PROGMEM Language_Str MSG_CANCEL_OBJECT                   = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂");   //"Cancel Object"
-  PROGMEM Language_Str MSG_CANCEL_OBJECT_N                 = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂ =");   //"Cancel Object ="
-  PROGMEM Language_Str MSG_OUTAGE_RECOVERY                 = _UxGT("‰∏≠Êñ∑ÊÅ¢Âæ©");   //"Outage Recovery"
-  PROGMEM Language_Str MSG_MEDIA_MENU                      = _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞");     //"Print from SD"
-  PROGMEM Language_Str MSG_NO_MEDIA                        = _UxGT("ÁÑ°Ë®òÊÜ∂Âç°");     //"No SD card"
-  PROGMEM Language_Str MSG_DWELL                           = _UxGT("‰ºëÁú† ...");     //"Sleep..."
-  PROGMEM Language_Str MSG_USERWAIT                        = _UxGT("ÈªûÊìäÁπºÁ∫å ...");     //"Click to resume..."
+  PROGMEM Language_Str MSG_ERR_EEPROM_CRC                  = _UxGT("ÈåØË™§: EEPROM CRC");    // "Err: EEPROM CRC"
+  PROGMEM Language_Str MSG_ERR_EEPROM_INDEX                = _UxGT("ÈåØË™§: EEPROM Index");    // "Err: EEPROM Index"
+  PROGMEM Language_Str MSG_ERR_EEPROM_VERSION              = _UxGT("ÈåØË™§: EEPROM Version");    // "EEPROM Version"
+  PROGMEM Language_Str MSG_MEDIA_UPDATE                    = _UxGT("Â™íÈ´îÊõ¥Êñ∞");    // "Media Update"
+  PROGMEM Language_Str MSG_RESET_PRINTER                   = _UxGT("ÈáçÁΩÆÊâìÂç∞Ê©ü");    // "Reset Printer
+  PROGMEM Language_Str MSG_REFRESH                         = _UxGT("Âà∑Êñ∞");     // "Refresh"
+  PROGMEM Language_Str MSG_INFO_SCREEN                     = _UxGT("Ë≥áË®äÁïåÈù¢");     // "Info screen"
+  PROGMEM Language_Str MSG_PREPARE                         = _UxGT("Ê∫ñÂÇô");     // "Prepare"
+  PROGMEM Language_Str MSG_TUNE                            = _UxGT("Ë™øÊï¥");     // "Tune"
+  PROGMEM Language_Str MSG_START_PRINT                     = _UxGT("ÈñãÂßãÂàóÂç∞");   // "Start Print"
+  PROGMEM Language_Str MSG_BUTTON_NEXT                     = _UxGT("‰∏ã‰∏ÄÂÄã");   // "Next"
+  PROGMEM Language_Str MSG_BUTTON_INIT                     = _UxGT("ÂàùÂßã  ");   // "Init"
+  PROGMEM Language_Str MSG_BUTTON_STOP                     = _UxGT("ÂÅúÊ≠¢  ");   // "Stop"
+  PROGMEM Language_Str MSG_BUTTON_PRINT                    = _UxGT("ÂàóÂç∞  ");   // "Print"
+  PROGMEM Language_Str MSG_BUTTON_RESET                    = _UxGT("Âæ©Ê≠∏  ");   // "Reset"
+  PROGMEM Language_Str MSG_BUTTON_CANCEL                   = _UxGT("ÊîæÊ£Ñ  ");   // "Cancel"
+  PROGMEM Language_Str MSG_BUTTON_DONE                     = _UxGT("Á¢∫Ë™ç  ");   // "Done"
+  PROGMEM Language_Str MSG_BUTTON_BACK                     = _UxGT("ËøîÂõû  ");   // "Back"
+  PROGMEM Language_Str MSG_BUTTON_PROCEED                  = _UxGT("ÁπºÁ∫å  ");   // "Proceed"
+  PROGMEM Language_Str MSG_PAUSE_PRINT                     = _UxGT("Êö´ÂÅúÂàóÂç∞");     // "Pause print"
+  PROGMEM Language_Str MSG_RESUME_PRINT                    = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     // "Resume print"
+  PROGMEM Language_Str MSG_STOP_PRINT                      = _UxGT("ÂÅúÊ≠¢ÂàóÂç∞");     // "Stop print"
+  PROGMEM Language_Str MSG_PRINTING_OBJECT                 = _UxGT("ÂàóÂç∞Áâ©‰ª∂");   // "Printing Object"
+  PROGMEM Language_Str MSG_CANCEL_OBJECT                   = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂");   // "Cancel Object"
+  PROGMEM Language_Str MSG_CANCEL_OBJECT_N                 = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂ =");   // "Cancel Object ="
+  PROGMEM Language_Str MSG_OUTAGE_RECOVERY                 = _UxGT("‰∏≠Êñ∑ÊÅ¢Âæ©");   // "Outage Recovery"
+  PROGMEM Language_Str MSG_MEDIA_MENU                      = _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞");     // "Print from SD"
+  PROGMEM Language_Str MSG_NO_MEDIA                        = _UxGT("ÁÑ°Ë®òÊÜ∂Âç°");     // "No SD card"
+  PROGMEM Language_Str MSG_DWELL                           = _UxGT("‰ºëÁú† ...");     // "Sleep..."
+  PROGMEM Language_Str MSG_USERWAIT                        = _UxGT("ÈªûÊìäÁπºÁ∫å ...");     // "Click to resume..."
   PROGMEM Language_Str MSG_PRINT_PAUSED                    = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "Print paused"
-  PROGMEM Language_Str MSG_PRINTING                        = _UxGT("ÂàóÂç∞‰∏≠ ...");   //"Printing..."
-  PROGMEM Language_Str MSG_PRINT_ABORTED                   = _UxGT("Â∑≤ÂèñÊ∂àÂàóÂç∞");     //"Print aborted"
-  PROGMEM Language_Str MSG_NO_MOVE                         = _UxGT("ÁÑ°ÁßªÂãï");     //"No move."
-  PROGMEM Language_Str MSG_KILLED                          = _UxGT("Â∑≤Á†çÊéâ");     //"KILLED. "
-  PROGMEM Language_Str MSG_STOPPED                         = _UxGT("Â∑≤ÂÅúÊ≠¢");     //"STOPPED. "
-  PROGMEM Language_Str MSG_CONTROL_RETRACT                 = _UxGT("ÂõûÁ∏ÆÈï∑Â∫¶mm");     //"Retract mm" retract_length, retract length (positive mm)
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_SWAP            = _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm");     //"Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
-  PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s");     //"Retract V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_ZHOP            = _UxGT("Hop mm");     //"Hop mm" retract_zraise, retract Z-lift
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     //"UnRet +mm" retract_recover_extra, additional recover length (mm, added to retract length when recovering)
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     //"S UnRet+mm" swap_retract_recover_extra, additional swap recover length (mm, added to retract length when recovering from extruder change)
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s");     //"Unretract V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
+  PROGMEM Language_Str MSG_PRINTING                        = _UxGT("ÂàóÂç∞‰∏≠ ...");   // "Printing..."
+  PROGMEM Language_Str MSG_PRINT_ABORTED                   = _UxGT("Â∑≤ÂèñÊ∂àÂàóÂç∞");     // "Print aborted"
+  PROGMEM Language_Str MSG_NO_MOVE                         = _UxGT("ÁÑ°ÁßªÂãï");     // "No move."
+  PROGMEM Language_Str MSG_KILLED                          = _UxGT("Â∑≤Á†çÊéâ");     // "KILLED. "
+  PROGMEM Language_Str MSG_STOPPED                         = _UxGT("Â∑≤ÂÅúÊ≠¢");     // "STOPPED. "
+  PROGMEM Language_Str MSG_CONTROL_RETRACT                 = _UxGT("ÂõûÁ∏ÆÈï∑Â∫¶mm");     // "Retract mm" retract_length, retract length (positive mm)
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_SWAP            = _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm");     // "Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
+  PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s");     // "Retract V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_ZHOP            = _UxGT("Hop mm");     // "Hop mm" retract_zraise, retract Z-lift
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     // "UnRet +mm" retract_recover_extra, additional recover length (mm, added to retract length when recovering)
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     // "S UnRet+mm" swap_retract_recover_extra, additional swap recover length (mm, added to retract length when recovering from extruder change)
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s");     // "Unretract V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
   PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAPF   = _UxGT("S UnRet V");     // "S UnRet V"
-  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("Ëá™ÂãïÂõûÁ∏Æ");     //"Auto-Retract" autoretract_enabled,
-  PROGMEM Language_Str MSG_FILAMENT_SWAP_LENGTH            = _UxGT("‰∫§ÊèõÈï∑Â∫¶");    //"Swap Length"
-  PROGMEM Language_Str MSG_FILAMENT_PURGE_LENGTH           = _UxGT("Ê∏ÖÈô§Èï∑Â∫¶");   //"Purge Length"
+  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("Ëá™ÂãïÂõûÁ∏Æ");     // "Auto-Retract" autoretract_enabled,
+  PROGMEM Language_Str MSG_FILAMENT_SWAP_LENGTH            = _UxGT("‰∫§ÊèõÈï∑Â∫¶");    // "Swap Length"
+  PROGMEM Language_Str MSG_FILAMENT_PURGE_LENGTH           = _UxGT("Ê∏ÖÈô§Èï∑Â∫¶");   // "Purge Length"
   PROGMEM Language_Str MSG_TOOL_CHANGE                     = _UxGT("‰∫§ÊèõÂ∑•ÂÖ∑"); //"Tool Change"
-  PROGMEM Language_Str MSG_TOOL_CHANGE_ZLIFT               = _UxGT("ZËª∏ÊèêÊòá");    //"Z Raise"
-  PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPEED        = _UxGT("ÊúÄÈ´òÈÄüÂ∫¶");    //"Prime Speed"
-  PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPEED      = _UxGT("Êî∂ÂõûÈÄüÂ∫¶");  //"Retract Speed"
+  PROGMEM Language_Str MSG_TOOL_CHANGE_ZLIFT               = _UxGT("ZËª∏ÊèêÊòá");    // "Z Raise"
+  PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPEED        = _UxGT("ÊúÄÈ´òÈÄüÂ∫¶");    // "Prime Speed"
+  PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPEED      = _UxGT("Êî∂ÂõûÈÄüÂ∫¶");  // "Retract Speed"
   PROGMEM Language_Str MSG_NOZZLE_STANDBY                  = _UxGT("Âô¥Âò¥ÂæÖÊ©ü"); //"Nozzle Standby"
-  PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Êõ¥ÊèõÁµ≤Êñô");     //"Change filament"
+  PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Êõ¥ÊèõÁµ≤Êñô");     // "Change filament"
   PROGMEM Language_Str MSG_FILAMENTCHANGE_E                = _UxGT("Êõ¥ÊèõÁµ≤Êñô *");
   PROGMEM Language_Str MSG_FILAMENTLOAD                    = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "Load filament"
   PROGMEM Language_Str MSG_FILAMENTLOAD_E                  = _UxGT("Ë£ùËºâÁµ≤Êñô *");
   PROGMEM Language_Str MSG_FILAMENTUNLOAD                  = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "Unload filament"
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_E                = _UxGT("Âç∏ËºâÁµ≤Êñô *");     // "Unload filament"
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("Âç∏ËºâÂÖ®ÈÉ®");     // "Unload All"
-  PROGMEM Language_Str MSG_INIT_MEDIA                      = _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°");     //"Init. SD card"
-  PROGMEM Language_Str MSG_ATTACH_MEDIA                    = _UxGT("ÈÄ£Êé•Ë®òÊÜ∂Âç°");     //"Attach Media
-  PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°");     //"Change SD card"
-  PROGMEM Language_Str MSG_RELEASE_MEDIA                   = _UxGT("ÈáãÊîæÂ™íÈ´î");   //"Release Media"
-  PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ");     //"Z probe out. bed" Z probe is not within the physical limits
+  PROGMEM Language_Str MSG_INIT_MEDIA                      = _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°");     // "Init. SD card"
+  PROGMEM Language_Str MSG_ATTACH_MEDIA                    = _UxGT("ÈÄ£Êé•Ë®òÊÜ∂Âç°");     // "Attach Media
+  PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°");     // "Change SD card"
+  PROGMEM Language_Str MSG_RELEASE_MEDIA                   = _UxGT("ÈáãÊîæÂ™íÈ´î");   // "Release Media"
+  PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ");     // "Z probe out. bed" Z probe is not within the physical limits
   PROGMEM Language_Str MSG_SKEW_FACTOR                     = _UxGT("ÂÅèÊñúÂõ†Êï∏");     // "Skew Factor"
 
   PROGMEM Language_Str MSG_BLTOUCH_SELFTEST                = _UxGT("BLTouch Ëá™Ê™¢");     // "BLTouch Self-Test"
@@ -367,39 +379,39 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_BLTOUCH_STOW                    = _UxGT("Ë£ùËºâBLTouch");     // "Stow BLTouch"
   PROGMEM Language_Str MSG_BLTOUCH_DEPLOY                  = _UxGT("ÈÉ®ÁΩ≤BLTouch");     // "Deploy BLTouch"
 
-  PROGMEM Language_Str MSG_HOME_FIRST                      = _UxGT("Ê≠∏‰Ωç %s%s%s ÂÖà");     //"Home ... first"
+  PROGMEM Language_Str MSG_HOME_FIRST                      = _UxGT("Ê≠∏‰Ωç %s%s%s ÂÖà");     // "Home ... first"
   PROGMEM Language_Str MSG_ZPROBE_OFFSETS                  = _UxGT("Êé¢ÈáùÂÅèÁßª");   //Probe Offsets
   PROGMEM Language_Str MSG_ZPROBE_XOFFSET                  = _UxGT("Êé¢ÈáùXÂÅèÁßªÈáè");   //Probe X Offset
   PROGMEM Language_Str MSG_ZPROBE_YOFFSET                  = _UxGT("Êé¢ÈáùYÂÅèÁßªÈáè");   //Probe Y Offset
   PROGMEM Language_Str MSG_ZPROBE_ZOFFSET                  = _UxGT("Êé¢ÈáùZÂÅèÁßªÈáè");   //Probe Z Offset
-  PROGMEM Language_Str MSG_BABYSTEP_X                      = _UxGT("ÂæÆÈáèË™øÊï¥XËª∏");     //"Babystep X" lcd_babystep_x, Babystepping enables the user to control the axis in tiny amounts
-  PROGMEM Language_Str MSG_BABYSTEP_Y                      = _UxGT("ÂæÆÈáèË™øÊï¥YËª∏");     //"Babystep Y"
-  PROGMEM Language_Str MSG_BABYSTEP_Z                      = _UxGT("ÂæÆÈáèË™øÊï¥ZËª∏");     //"Babystep Z"
-  PROGMEM Language_Str MSG_BABYSTEP_TOTAL                  = _UxGT("Á∏ΩË®à");    //"Total"
-  PROGMEM Language_Str MSG_ENDSTOP_ABORT                   = _UxGT("ÊìãÂ°äÁµÇÊ≠¢");     //"Endstop abort"
-  PROGMEM Language_Str MSG_HEATING_FAILED_LCD              = _UxGT("Âä†ÁÜ±Â§±Êïó");     //"Heating failed"
-  PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("ÈåØË™§ÔºöÂÜóÈ§òÊ∫´Â∫¶");     //"Err: REDUNDANT TEMP"
-  PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("Ê∫´Â∫¶Â§±Êéß");    //"THERMAL RUNAWAY"
-  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_BED             = _UxGT("ÁÜ±Â∫äÊ∫´Â∫¶Â§±Êéß");    //"BED THERMAL RUNAWAY"
-  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_CHAMBER         = _UxGT("Ê©üÁÆ±Ê∫´Â∫¶Â§±Êéß");   //"CHAMBER T. RUNAWAY"
-  PROGMEM Language_Str MSG_ERR_MAXTEMP                     = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ∫´Â∫¶");     //"Err: MAXTEMP"
-  PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶");     //"Err: MINTEMP"
-  PROGMEM Language_Str MSG_HALTED                          = _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü");     //"PRINTER HALTED"
-  PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Ë´ãÈáçÁΩÆ");     //"Please reset"
-  PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("Â§©");     //"d" // One character only
-  PROGMEM Language_Str MSG_SHORT_HOUR                      = _UxGT("ÊôÇ");     //"h" // One character only
-  PROGMEM Language_Str MSG_SHORT_MINUTE                    = _UxGT("ÂàÜ");     //"m" // One character only
-  PROGMEM Language_Str MSG_HEATING                         = _UxGT("Âä†ÁÜ±‰∏≠ ...");     //"Heating..."
-  PROGMEM Language_Str MSG_COOLING                         = _UxGT("ÂÜ∑Âçª‰∏≠ ...");   //"Cooling..."
-  PROGMEM Language_Str MSG_BED_HEATING                     = _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠ ...");     //"Bed Heating..."
-  PROGMEM Language_Str MSG_BED_COOLING                     = _UxGT("ÁÜ±Â∫äÂÜ∑Âçª‰∏≠ ...");   //"Bed Cooling..."
-  PROGMEM Language_Str MSG_CHAMBER_HEATING                 = _UxGT("Ê©üÁÆ±Âä†ÁÜ±‰∏≠ ..");   //"Chamber Heating..."
+  PROGMEM Language_Str MSG_BABYSTEP_X                      = _UxGT("ÂæÆÈáèË™øÊï¥XËª∏");     // "Babystep X" lcd_babystep_x, Babystepping enables the user to control the axis in tiny amounts
+  PROGMEM Language_Str MSG_BABYSTEP_Y                      = _UxGT("ÂæÆÈáèË™øÊï¥YËª∏");     // "Babystep Y"
+  PROGMEM Language_Str MSG_BABYSTEP_Z                      = _UxGT("ÂæÆÈáèË™øÊï¥ZËª∏");     // "Babystep Z"
+  PROGMEM Language_Str MSG_BABYSTEP_TOTAL                  = _UxGT("Á∏ΩË®à");    // "Total"
+  PROGMEM Language_Str MSG_ENDSTOP_ABORT                   = _UxGT("ÊìãÂ°äÁµÇÊ≠¢");     // "Endstop abort"
+  PROGMEM Language_Str MSG_HEATING_FAILED_LCD              = _UxGT("Âä†ÁÜ±Â§±Êïó");     // "Heating failed"
+  PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("ÈåØË™§ÔºöÂÜóÈ§òÊ∫´Â∫¶");     // "Err: REDUNDANT TEMP"
+  PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("Ê∫´Â∫¶Â§±Êéß");    // "THERMAL RUNAWAY"
+  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_BED             = _UxGT("ÁÜ±Â∫äÊ∫´Â∫¶Â§±Êéß");    // "BED THERMAL RUNAWAY"
+  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_CHAMBER         = _UxGT("Ê©üÁÆ±Ê∫´Â∫¶Â§±Êéß");   // "CHAMBER T. RUNAWAY"
+  PROGMEM Language_Str MSG_ERR_MAXTEMP                     = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ∫´Â∫¶");     // "Err: MAXTEMP"
+  PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶");     // "Err: MINTEMP"
+  PROGMEM Language_Str MSG_HALTED                          = _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü");     // "PRINTER HALTED"
+  PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Ë´ãÈáçÁΩÆ");     // "Please reset"
+  PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("Â§©");     // "d" // One character only
+  PROGMEM Language_Str MSG_SHORT_HOUR                      = _UxGT("ÊôÇ");     // "h" // One character only
+  PROGMEM Language_Str MSG_SHORT_MINUTE                    = _UxGT("ÂàÜ");     // "m" // One character only
+  PROGMEM Language_Str MSG_HEATING                         = _UxGT("Âä†ÁÜ±‰∏≠ ...");     // "Heating..."
+  PROGMEM Language_Str MSG_COOLING                         = _UxGT("ÂÜ∑Âçª‰∏≠ ...");   // "Cooling..."
+  PROGMEM Language_Str MSG_BED_HEATING                     = _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠ ...");     // "Bed Heating..."
+  PROGMEM Language_Str MSG_BED_COOLING                     = _UxGT("ÁÜ±Â∫äÂÜ∑Âçª‰∏≠ ...");   // "Bed Cooling..."
+  PROGMEM Language_Str MSG_CHAMBER_HEATING                 = _UxGT("Ê©üÁÆ±Âä†ÁÜ±‰∏≠ ..");   // "Chamber Heating..."
   PROGMEM Language_Str MSG_CHAMBER_COOLING                 = _UxGT("Ê©üÁÆ±ÂÜ∑Âçª‰∏≠ ...");   //Chamber Cooling...
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE                 = _UxGT("‚äøÊ†°Ê∫ñ");     //"Delta Calibration"
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_X               = _UxGT("‚äøÊ†°Ê∫ñX");     //"Calibrate X"
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Y               = _UxGT("‚äøÊ†°Ê∫ñY");     //"Calibrate Y"
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Z               = _UxGT("‚äøÊ†°Ê∫ñZ");     //"Calibrate Z"
-  PROGMEM Language_Str MSG_DELTA_CALIBRATE_CENTER          = _UxGT("‚äøÊ†°Ê∫ñ‰∏≠ÂøÉ");     //"Calibrate Center"
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE                 = _UxGT("‚äøÊ†°Ê∫ñ");     // "Delta Calibration"
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_X               = _UxGT("‚äøÊ†°Ê∫ñX");     // "Calibrate X"
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Y               = _UxGT("‚äøÊ†°Ê∫ñY");     // "Calibrate Y"
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Z               = _UxGT("‚äøÊ†°Ê∫ñZ");     // "Calibrate Z"
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_CENTER          = _UxGT("‚äøÊ†°Ê∫ñ‰∏≠ÂøÉ");     // "Calibrate Center"
   PROGMEM Language_Str MSG_DELTA_SETTINGS                  = _UxGT("‚äøË®≠ÁΩÆ");     // "Delta Settings"
   PROGMEM Language_Str MSG_DELTA_AUTO_CALIBRATE            = _UxGT("‚äøËá™ÂãïÊ†°Ê∫ñ");     // "Auto Calibration"
   PROGMEM Language_Str MSG_DELTA_HEIGHT_CALIBRATE          = _UxGT("Ë®≠ÁΩÆ‚äøÈ´òÂ∫¶");     // "Set Delta Height"
@@ -407,61 +419,63 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_DELTA_DIAG_ROD                  = _UxGT("‚äøÊñúÊü±");     // "Diag Rod"
   PROGMEM Language_Str MSG_DELTA_HEIGHT                    = _UxGT("‚äøÈ´òÂ∫¶");     // "Height"
   PROGMEM Language_Str MSG_DELTA_RADIUS                    = _UxGT("‚äøÂçäÂæë");     // "Radius"
-  PROGMEM Language_Str MSG_INFO_MENU                       = _UxGT("ÈóúÊñºÂç∞Ë°®Ê©ü");     //"About Printer"
-  PROGMEM Language_Str MSG_INFO_PRINTER_MENU               = _UxGT("Âç∞Ë°®Ê©üË®äÊÅØ");     //"Printer Info"
+  PROGMEM Language_Str MSG_INFO_MENU                       = _UxGT("ÈóúÊñºÂç∞Ë°®Ê©ü");     // "About Printer"
+  PROGMEM Language_Str MSG_INFO_PRINTER_MENU               = _UxGT("Âç∞Ë°®Ê©üË®äÊÅØ");     // "Printer Info"
   PROGMEM Language_Str MSG_3POINT_LEVELING                 = _UxGT("‰∏âÈªûË™øÂπ≥");     // "3-Point Leveling"
   PROGMEM Language_Str MSG_LINEAR_LEVELING                 = _UxGT("Á∑öÊÄßË™øÂπ≥");     // "Linear Leveling"
   PROGMEM Language_Str MSG_BILINEAR_LEVELING               = _UxGT("      ÈõôÁ∑öÊÄßË™øÂπ≥");     // "Bilinear Leveling"
   PROGMEM Language_Str MSG_UBL_LEVELING                    = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"
   PROGMEM Language_Str MSG_MESH_LEVELING                   = _UxGT("Á∂≤Ê†ºË™øÂπ≥");     // "Mesh Leveling"
-  PROGMEM Language_Str MSG_INFO_STATS_MENU                 = _UxGT("Âç∞Ë°®Ê©üÁµ±Ë®à");     //"Printer Stats"
-  PROGMEM Language_Str MSG_INFO_BOARD_MENU                 = _UxGT("‰∏ªÊùøË®äÊÅØ");     //"Board Info"
-  PROGMEM Language_Str MSG_INFO_THERMISTOR_MENU            = _UxGT("Ê∫´Â∫¶Ë®à");     //"Thermistors"
-  PROGMEM Language_Str MSG_INFO_EXTRUDERS                  = _UxGT("      Êì†Âá∫Ê©ü");     //"Extruders"
-  PROGMEM Language_Str MSG_INFO_BAUDRATE                   = _UxGT("ÂÇ≥Ëº∏Áéá");     //"Baud"
-  PROGMEM Language_Str MSG_INFO_PROTOCOL                   = _UxGT("ÂçîË≠∞");     //"Protocol"
-  PROGMEM Language_Str MSG_INFO_RUNAWAY_OFF                = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èóú");   //"Runaway Watch: OFF"
-  PROGMEM Language_Str MSG_INFO_RUNAWAY_ON                 = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èñã");    //"Runaway Watch: ON"
+  PROGMEM Language_Str MSG_INFO_STATS_MENU                 = _UxGT("Âç∞Ë°®Ê©üÁµ±Ë®à");     // "Printer Stats"
+  PROGMEM Language_Str MSG_INFO_BOARD_MENU                 = _UxGT("‰∏ªÊùøË®äÊÅØ");     // "Board Info"
+  PROGMEM Language_Str MSG_INFO_THERMISTOR_MENU            = _UxGT("Ê∫´Â∫¶Ë®à");     // "Thermistors"
+  PROGMEM Language_Str MSG_INFO_EXTRUDERS                  = _UxGT("      Êì†Âá∫Ê©ü");     // "Extruders"
+  PROGMEM Language_Str MSG_INFO_BAUDRATE                   = _UxGT("ÂÇ≥Ëº∏Áéá");     // "Baud"
+  PROGMEM Language_Str MSG_INFO_PROTOCOL                   = _UxGT("ÂçîË≠∞");     // "Protocol"
+  PROGMEM Language_Str MSG_INFO_RUNAWAY_OFF                = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èóú");   // "Runaway Watch: OFF"
+  PROGMEM Language_Str MSG_INFO_RUNAWAY_ON                 = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èñã");    // "Runaway Watch: ON"
 
   PROGMEM Language_Str MSG_CASE_LIGHT                      = _UxGT("Â§ñÊÆºÁáà");     // "Case light"
   PROGMEM Language_Str MSG_CASE_LIGHT_BRIGHTNESS           = _UxGT("Ááà‰∫ÆÂ∫¶");     // "Light BRIGHTNESS"
   PROGMEM Language_Str MSG_KILL_EXPECTED_PRINTER           = _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫");     // "The printer is incorrect"
 
   #if LCD_WIDTH >= 20
-    PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("ÂàóÂç∞Ë®àÊï∏");     //"Print Count"
-    PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS         = _UxGT("Â∑≤ÂÆåÊàê");     //"Completed"
-    PROGMEM Language_Str MSG_INFO_PRINT_TIME               = _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì");     //"Total print time"
-    PROGMEM Language_Str MSG_INFO_PRINT_LONGEST            = _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì");     //"Longest job time"
-    PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT           = _UxGT("Á∏ΩË®àÊì†Âá∫");     //"Extruded total"
+    PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("ÂàóÂç∞Ë®àÊï∏");     // "Print Count"
+    PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS         = _UxGT("Â∑≤ÂÆåÊàê");     // "Completed"
+    PROGMEM Language_Str MSG_INFO_PRINT_TIME               = _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì");     // "Total print time"
+    PROGMEM Language_Str MSG_INFO_PRINT_LONGEST            = _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì");     // "Longest job time"
+    PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT           = _UxGT("Á∏ΩË®àÊì†Âá∫");     // "Extruded total"
   #else
-    PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("ÂàóÂç∞Êï∏");     //"Prints"
-    PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS         = _UxGT("ÂÆåÊàê");     //"Completed"
-    PROGMEM Language_Str MSG_INFO_PRINT_TIME               = _UxGT("Á∏ΩÂÖ±");     //"Total"
-    PROGMEM Language_Str MSG_INFO_PRINT_LONGEST            = _UxGT("ÊúÄÈï∑");     //"Longest"
-    PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT           = _UxGT("Â∑≤Êì†Âá∫");     //"Extruded"
+    PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("ÂàóÂç∞Êï∏");     // "Prints"
+    PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS         = _UxGT("ÂÆåÊàê");     // "Completed"
+    PROGMEM Language_Str MSG_INFO_PRINT_TIME               = _UxGT("Á∏ΩÂÖ±");     // "Total"
+    PROGMEM Language_Str MSG_INFO_PRINT_LONGEST            = _UxGT("ÊúÄÈï∑");     // "Longest"
+    PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT           = _UxGT("Â∑≤Êì†Âá∫");     // "Extruded"
   #endif
 
-  PROGMEM Language_Str MSG_INFO_MIN_TEMP                   = _UxGT("ÊúÄ‰ΩéÊ∫´Â∫¶");     //"Min Temp"
-  PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("ÊúÄÈ´òÊ∫´Â∫¶");     //"Max Temp"
-  PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("ÈõªÊ∫ê‰æõÊáâ");     //"Power Supply"
+  PROGMEM Language_Str MSG_INFO_MIN_TEMP                   = _UxGT("ÊúÄ‰ΩéÊ∫´Â∫¶");     // "Min Temp"
+  PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("ÊúÄÈ´òÊ∫´Â∫¶");     // "Max Temp"
+  PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("ÈõªÊ∫ê‰æõÊáâ");     // "Power Supply"
   PROGMEM Language_Str MSG_DRIVE_STRENGTH                  = _UxGT("È©ÖÂãïÂäõÂ∫¶");     // "Drive Strength"
-  PROGMEM Language_Str MSG_DAC_PERCENT                     = _UxGT("È©ÖÂãï %");     // "Driver %"
-  PROGMEM Language_Str MSG_DAC_PERCENT_X                   = _UxGT("X È©ÖÂãï %");    //X Driver %
-  PROGMEM Language_Str MSG_DAC_PERCENT_Y                   = _UxGT("Y È©ÖÂãï %");    //Y Driver %
-  PROGMEM Language_Str MSG_DAC_PERCENT_Z                   = _UxGT("Z È©ÖÂãï %");    //Z Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_A                   = LCD_STR_A _UxGT(" È©ÖÂãï %");    // X Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_B                   = LCD_STR_B _UxGT(" È©ÖÂãï %");    // Y Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_C                   = LCD_STR_C _UxGT(" È©ÖÂãï %");    // Z Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_I                   = LCD_STR_I _UxGT(" È©ÖÂãï %");    // I Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_J                   = LCD_STR_J _UxGT(" È©ÖÂãï %");    // J Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_K                   = LCD_STR_K _UxGT(" È©ÖÂãï %");    // K Driver %
   PROGMEM Language_Str MSG_DAC_PERCENT_E                   = _UxGT("E È©ÖÂãï %");    //E Driver %
-  PROGMEM Language_Str MSG_ERROR_TMC                       = _UxGT("TMCÈÄ£Êé•ÈåØË™§");   //"TMC CONNECTION ERROR"
+  PROGMEM Language_Str MSG_ERROR_TMC                       = _UxGT("TMCÈÄ£Êé•ÈåØË™§");   // "TMC CONNECTION ERROR"
   PROGMEM Language_Str MSG_DAC_EEPROM_WRITE                = _UxGT("‰øùÂ≠òÈ©ÖÂãïË®≠ÁΩÆ");     // "DAC EEPROM Write"
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER          = _UxGT("Êõ¥ÊèõÁµ≤Êñô");   //"FILAMENT CHANGE"
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER          = _UxGT("Êõ¥ÊèõÁµ≤Êñô");   // "FILAMENT CHANGE"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_PAUSE    = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "PRINT PAUSED"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_LOAD     = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "LOAD FILAMENT"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_UNLOAD   = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "UNLOAD FILAMENT"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_HEADER   = _UxGT("ÊÅ¢Ë§áÈÅ∏È†Ö:");     // "RESUME OPTIONS:"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_PURGE    = _UxGT("Ê∏ÖÈô§Êõ¥Â§ö");     // "Purge more"
-  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_RESUME   = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     //"Resume print"
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_RESUME   = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     // "Resume print"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_NOZZLE          = _UxGT("  Âô¥Âò¥: ");     // "  Nozzle: "
-  PROGMEM Language_Str MSG_RUNOUT_SENSOR                   = _UxGT("Êñ∑Áµ≤ÂÅµÊ∏¨");    //"Runout Sensor"
-  PROGMEM Language_Str MSG_RUNOUT_DISTANCE_MM              = _UxGT("Áµ≤Ë∑ùÈõ¢mm");   //"Runout Dist mm"
+  PROGMEM Language_Str MSG_RUNOUT_SENSOR                   = _UxGT("Êñ∑Áµ≤ÂÅµÊ∏¨");    // "Runout Sensor"
+  PROGMEM Language_Str MSG_RUNOUT_DISTANCE_MM              = _UxGT("Áµ≤Ë∑ùÈõ¢mm");   // "Runout Dist mm"
   PROGMEM Language_Str MSG_KILL_HOMING_FAILED              = _UxGT("Ê≠∏Âéü‰ΩçÂ§±Êïó");     // "Homing failed"
   PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó");     // "Probing failed"
 
@@ -471,28 +485,28 @@ namespace Language_zh_TW {
   //
   #if LCD_HEIGHT >= 4
     PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "ÊÅ¢Âæ©ÂàóÂç∞")); //"Press Button to resume print"
-    PROGMEM Language_Str MSG_PAUSE_PRINT_PARKING           = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));   //"Parking..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_3_LINE("Á≠âÂæÖÈñãÂßã", "Áµ≤Êñô", "ËÆäÊõ¥"));     //"Wait for start of the filament change"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Âç∏‰∏ãÁµ≤Êñô"));     //"Wait for filament unload"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_3_LINE("ÊèíÂÖ•Áµ≤Êñô", "‰∏¶ÊåâÈçµ", "ÁπºÁ∫å ..."));     //"Insert filament and press button to continue..."
+    PROGMEM Language_Str MSG_PAUSE_PRINT_PARKING           = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));   // "Parking..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_3_LINE("Á≠âÂæÖÈñãÂßã", "Áµ≤Êñô", "ËÆäÊõ¥"));     // "Wait for start of the filament change"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Âç∏‰∏ãÁµ≤Êñô"));     // "Wait for filament unload"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_3_LINE("ÊèíÂÖ•Áµ≤Êñô", "‰∏¶ÊåâÈçµ", "ÁπºÁ∫å ..."));     // "Insert filament and press button to continue..."
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "Âä†ÁÜ±Âô¥Âò¥."));     // "Press button to heat nozzle."
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_2_LINE("Âä†ÁÜ±Âô¥Âò¥", "Ë´ãÁ≠âÂæÖ ..."));     // "Heating nozzle Please wait..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "ÈÄ≤Êñô"));     //"Wait for filament load"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "ÈÄ≤Êñô"));     // "Wait for filament load"
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Áµ≤ÊñôÊ∏ÖÈô§"));     // "Wait for filament purge"
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE    = _UxGT(MSG_2_LINE("Êåâ‰∏ãÂÆåÊàê","Áµ≤ÊñôÊ∏ÖÈô§")); //"Press button to filament purge"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_2_LINE("Á≠âÂæÖÂàóÂç∞", "ÊÅ¢Âæ©"));     //"Wait for print to resume"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_2_LINE("Á≠âÂæÖÂàóÂç∞", "ÊÅ¢Âæ©"));     // "Wait for print to resume"
   #else // LCD_HEIGHT < 4
-    PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_1_LINE("Êåâ‰∏ãÁπºÁ∫å.."));   //"Click to continue"
-    PROGMEM Language_Str MSG_PAUSE_PRINT_PARKING           = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));     //"Parking..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_1_LINE("Ë´ãÁ≠âÂæÖ ..."));     //"Please wait..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_1_LINE("ÊèíÂÖ•‰∏¶ÈªûÊìä"));     //"Insert and Click"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂä†ÁÜ±.."));     //"Click to heat"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_1_LINE("Âä†ÁÜ±‰∏≠ ..."));     //"Heating..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_1_LINE("ÈÄÄÂá∫‰∏≠ ..."));     //"Ejecting..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_1_LINE("ËºâÂÖ•‰∏≠ ..."));     //"Loading..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_1_LINE("Ê∏ÖÈô§‰∏≠ ..."));     //"Purging..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE    = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂÆåÊàê.."));     //"Click to finish"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_1_LINE("ÊÅ¢Âæ©‰∏≠ ..."));     //"Resuming..."
+    PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_1_LINE("Êåâ‰∏ãÁπºÁ∫å.."));   // "Click to continue"
+    PROGMEM Language_Str MSG_PAUSE_PRINT_PARKING           = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));     // "Parking..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_1_LINE("Ë´ãÁ≠âÂæÖ ..."));     // "Please wait..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_1_LINE("ÊèíÂÖ•‰∏¶ÈªûÊìä"));     // "Insert and Click"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂä†ÁÜ±.."));     // "Click to heat"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_1_LINE("Âä†ÁÜ±‰∏≠ ..."));     // "Heating..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_1_LINE("ÈÄÄÂá∫‰∏≠ ..."));     // "Ejecting..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_1_LINE("ËºâÂÖ•‰∏≠ ..."));     // "Loading..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_1_LINE("Ê∏ÖÈô§‰∏≠ ..."));     // "Purging..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE    = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂÆåÊàê.."));     // "Click to finish"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_1_LINE("ÊÅ¢Âæ©‰∏≠ ..."));     // "Resuming..."
   #endif // LCD_HEIGHT < 4
 }
 

commit b1bc2e80036131cde58b4fbc02b76ac08b5a7924
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jul 25 02:12:48 2021 -0500

    üåê Level Corners => Bed Tramming

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 2061a66ad8..f162536132 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -98,7 +98,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_MOVE_AXIS                       = _UxGT("ÁßªÂãïËª∏");     //"Move axis"
   PROGMEM Language_Str MSG_BED_LEVELING                    = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     //"Bed leveling"
   PROGMEM Language_Str MSG_LEVEL_BED                       = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     //"Level bed"
-  PROGMEM Language_Str MSG_LEVEL_CORNERS                   = _UxGT("Ë™øÂπ≥ÈÇäËßí");     // "Level corners"
+  PROGMEM Language_Str MSG_BED_TRAMMING                    = _UxGT("Ë™øÂπ≥ÈÇäËßí");     // "Bed Tramming"
   PROGMEM Language_Str MSG_NEXT_CORNER                     = _UxGT("‰∏ãÂÄãÈÇäËßí");     // "Next corner"
   PROGMEM Language_Str MSG_MESH_EDITOR                     = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂô®");    //"Mesh Editor"
   PROGMEM Language_Str MSG_EDIT_MESH                       = _UxGT("Á∑®ËºØÁ∂≤Ê†º");     // "Edit Mesh"

commit 81ca2dd273358a0cfc0f65d5b4900d83abc96d69
Author: S√©bastien Gari√©py <46988275+BeePerNet@users.noreply.github.com>
Date:   Sun Jun 27 17:44:49 2021 -0400

    üåê MSG_MOVE_100MM (#22242)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 0ada34a476..2061a66ad8 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -223,11 +223,12 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("ÁßªÂãïZ");     //"Move Z"
   PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("Êì†Âá∫Ê©ü");     //"Extruder"
   PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("Êì†Âá∫Ê©ü *");       //"Extruder *"
-  PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†");  //"Hotend too cold"
+  PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†");   //"Hotend too cold"
   PROGMEM Language_Str MSG_MOVE_N_MM                       = _UxGT("ÁßªÂãï %s mm");     //"Move 0.025mm"
-  PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("ÁßªÂãï 0.1 mm");     //"Move 0.1mm"
-  PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("ÁßªÂãï 1 mm");     //"Move 1mm"
+  PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("ÁßªÂãï 0.1 mm");    //"Move 0.1mm"
+  PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("ÁßªÂãï 1 mm");      //"Move 1mm"
   PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("ÁßªÂãï 10 mm");     //"Move 10mm"
+  PROGMEM Language_Str MSG_MOVE_100MM                      = _UxGT("ÁßªÂãï 100 mm");    //"Move 100mm"
   PROGMEM Language_Str MSG_SPEED                           = _UxGT("ÈÄüÁéá");     //"Speed"
   PROGMEM Language_Str MSG_BED_Z                           = _UxGT("ÁÜ±Â∫äZ");     //"Bed Z"
   PROGMEM Language_Str MSG_NOZZLE                          = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥");     //"Nozzle" Âô¥Âò¥

commit df1ef496d1a88996cb1156fe933df59c6aaecbac
Author: borland1 <barryorlando@hotmail.com>
Date:   Tue Mar 23 06:21:11 2021 -0700

    Main / Config Custom Submenus (#18177)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index f86b15351f..0ada34a476 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -107,7 +107,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_MESH_X                          = _UxGT("Á¥¢Âºï X");    //"Index X"
   PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("Á¥¢Âºï Y");    //"Index Y"
   PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Z ÂÄº");    //"Z Value"
-  PROGMEM Language_Str MSG_USER_MENU                       = _UxGT("Ëá™ÂÆöÂëΩ‰ª§");     // "Custom Commands"
+  PROGMEM Language_Str MSG_CUSTOM_COMMANDS                 = _UxGT("Ëá™ÂÆöÂëΩ‰ª§");     // "Custom Commands"
   PROGMEM Language_Str MSG_M48_TEST                        = _UxGT("M48 Êé¢Ê∏¨Ê∏¨Ë©¶");   //"M48 Probe Test"
   PROGMEM Language_Str MSG_M48_POINT                       = _UxGT("M48 Êé¢Ê∏¨Èªû");    //"M48 Point"
   PROGMEM Language_Str MSG_M48_DEVIATION                   = _UxGT("ÂÅèÂ∑Æ");    //"Deviation"

commit 62cc65cafeb79626e6ff5520620e7ff29cb36304
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Dec 20 00:27:04 2020 -0600

    Languages cleanup

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 4654f770ea..f86b15351f 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -87,12 +87,8 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_PREHEAT_CUSTOM                  = _UxGT("Ëá™ÂÆöÈ†êÁÜ±");   //"Preheat Custom"
   PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("ÈôçÊ∫´");     //"Cooldown"
   PROGMEM Language_Str MSG_LASER_MENU                      = _UxGT("ÊøÄÂÖâÊéßÂà∂");    //"Laser Control"
-  PROGMEM Language_Str MSG_LASER_OFF                       = _UxGT("ÊøÄÂÖâ Èóú");    //"Laser Off"
-  PROGMEM Language_Str MSG_LASER_ON                        = _UxGT("ÊøÄÂÖâ Èñã");   //"Laser On"
   PROGMEM Language_Str MSG_LASER_POWER                     = _UxGT("ÊøÄÂÖâÈõªÊ∫ê");    //"Laser Power"
   PROGMEM Language_Str MSG_SPINDLE_MENU                    = _UxGT("‰∏ªËª∏ÊéßÂëäÂà∂");    //"Spindle Control"
-  PROGMEM Language_Str MSG_SPINDLE_OFF                     = _UxGT("‰∏ªËª∏ Èóú");    //"Spindle Off"
-  PROGMEM Language_Str MSG_SPINDLE_ON                      = _UxGT("‰∏ªËª∏ Èñã");   //"Spindle On"
   PROGMEM Language_Str MSG_SPINDLE_POWER                   = _UxGT("‰∏ªËª∏ÈõªÊ∫ê");    //"Spindle Power"
   PROGMEM Language_Str MSG_SPINDLE_REVERSE                 = _UxGT("‰∏ªËª∏ÂèçËΩâ");  //"Spindle Reverse"
   PROGMEM Language_Str MSG_SWITCH_PS_ON                    = _UxGT("ÈõªÊ∫êÊâìÈñã");     //"Switch power on"

commit b0392be4bf872954d0134c90cd027ea3610d5b9a
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Dec 13 01:50:02 2020 -0600

    SHORT_MANUAL_Z_MOVE => FINE_MANUAL_MOVE

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 9708bbda9c..4654f770ea 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -228,7 +228,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("Êì†Âá∫Ê©ü");     //"Extruder"
   PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("Êì†Âá∫Ê©ü *");       //"Extruder *"
   PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†");  //"Hotend too cold"
-  PROGMEM Language_Str MSG_MOVE_Z_DIST                     = _UxGT("ÁßªÂãï %s mm");     //"Move 0.025mm"
+  PROGMEM Language_Str MSG_MOVE_N_MM                       = _UxGT("ÁßªÂãï %s mm");     //"Move 0.025mm"
   PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("ÁßªÂãï 0.1 mm");     //"Move 0.1mm"
   PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("ÁßªÂãï 1 mm");     //"Move 1mm"
   PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("ÁßªÂãï 10 mm");     //"Move 10mm"

commit f8e83f79c5012c70bae788308f8665f117c4f93c
Author: Simone Primarosa <simonepri@outlook.com>
Date:   Sat Nov 21 03:36:19 2020 +0100

    Superscript substitution (#20219)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index ac061e9b81..9708bbda9c 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -287,7 +287,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Ê∫´Â∫¶");     //"Temperature"
   PROGMEM Language_Str MSG_MOTION                          = _UxGT("ÈÅã‰Ωú");     //"Motion"
   PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ");     //"Filament" menu_control_volumetric
-  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("Ê∏¨ÂÆπÁ©çmm¬≥");     //"E in mm3" volumetric_enabled
+  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("Ê∏¨ÂÆπÁ©çmm") SUPERSCRIPT_THREE;     //"E in mm3" volumetric_enabled
   PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("Áµ≤ÊñôÁõ¥Âæë");     //"Fil. Dia."
   PROGMEM Language_Str MSG_FILAMENT_DIAM_E                 = _UxGT("Áµ≤ÊñôÁõ¥Âæë *");
   PROGMEM Language_Str MSG_FILAMENT_UNLOAD                 = _UxGT("Âç∏Ëºâ mm");     // "Unload mm"

commit 18fb4b1ce1cff0843bb2ac2cb810dd15081747b4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Nov 7 17:43:47 2020 -0600

    MSG_AUTOSTART => MSG_RUN_AUTO_FILES

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 7abf895d54..ac061e9b81 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -50,7 +50,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_MAIN                            = _UxGT("‰∏ªÈÅ∏ÂñÆ");     //"Main"
   PROGMEM Language_Str MSG_ADVANCED_SETTINGS               = _UxGT("ÈÄ≤ÈöéË®≠ÁΩÆ");   //"Advanced Settings"
   PROGMEM Language_Str MSG_CONFIGURATION                   = _UxGT("Ë®≠ÁΩÆ");    //Configuration
-  PROGMEM Language_Str MSG_AUTOSTART                       = _UxGT("Ëá™ÂãïÈñãÂßã");     //"Autostart"
+  PROGMEM Language_Str MSG_RUN_AUTO_FILES                  = _UxGT("Ëá™ÂãïÈñãÂßã");     //"Autostart"
   PROGMEM Language_Str MSG_DISABLE_STEPPERS                = _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È¶¨ÈÅî");     //"Disable steppers"
   PROGMEM Language_Str MSG_DEBUG_MENU                      = _UxGT("Èô§ÈåØÈÅ∏ÂñÆ");     // "Debug Menu"
   PROGMEM Language_Str MSG_PROGRESS_BAR_TEST               = _UxGT("ÈÄ≤Â∫¶Ê¢ùÊ∏¨Ë©¶");     // "Progress Bar Test"

commit b31e358270608afd02be895d4e3ca43ae927d31e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 6 02:59:51 2020 -0500

    Improve retract / unretract labels

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 6b4bac37d1..7abf895d54 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -337,13 +337,13 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_STOPPED                         = _UxGT("Â∑≤ÂÅúÊ≠¢");     //"STOPPED. "
   PROGMEM Language_Str MSG_CONTROL_RETRACT                 = _UxGT("ÂõûÁ∏ÆÈï∑Â∫¶mm");     //"Retract mm" retract_length, retract length (positive mm)
   PROGMEM Language_Str MSG_CONTROL_RETRACT_SWAP            = _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm");     //"Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
-  PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s");     //"Retract  V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
+  PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s");     //"Retract V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
   PROGMEM Language_Str MSG_CONTROL_RETRACT_ZHOP            = _UxGT("Hop mm");     //"Hop mm" retract_zraise, retract Z-lift
   PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     //"UnRet +mm" retract_recover_extra, additional recover length (mm, added to retract length when recovering)
   PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     //"S UnRet+mm" swap_retract_recover_extra, additional swap recover length (mm, added to retract length when recovering from extruder change)
-  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s");     //"UnRet V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s");     //"Unretract V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
   PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAPF   = _UxGT("S UnRet V");     // "S UnRet V"
-  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("Ëá™ÂãïÂõûÁ∏Æ");     //"AutoRetr." autoretract_enabled,
+  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("Ëá™ÂãïÂõûÁ∏Æ");     //"Auto-Retract" autoretract_enabled,
   PROGMEM Language_Str MSG_FILAMENT_SWAP_LENGTH            = _UxGT("‰∫§ÊèõÈï∑Â∫¶");    //"Swap Length"
   PROGMEM Language_Str MSG_FILAMENT_PURGE_LENGTH           = _UxGT("Ê∏ÖÈô§Èï∑Â∫¶");   //"Purge Length"
   PROGMEM Language_Str MSG_TOOL_CHANGE                     = _UxGT("‰∫§ÊèõÂ∑•ÂÖ∑"); //"Tool Change"

commit 0ff3ae3cc600828fec955c35c37b44497fdff621
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Oct 4 14:29:02 2020 -0500

    Fix Tune/Fan edit items
    
    - Fixes #19617
    - Followup to #18400

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 7f1fce649e..6b4bac37d1 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -501,8 +501,8 @@ namespace Language_zh_TW {
 
 #if FAN_COUNT == 1
   #define MSG_FIRST_FAN_SPEED       MSG_FAN_SPEED
-  #define MSG_FIRST_EXTRA_FAN_SPEED MSG_EXTRA_FAN_SPEED
+  #define MSG_EXTRA_FIRST_FAN_SPEED MSG_EXTRA_FAN_SPEED
 #else
   #define MSG_FIRST_FAN_SPEED       MSG_FAN_SPEED_N
-  #define MSG_FIRST_EXTRA_FAN_SPEED MSG_EXTRA_FAN_SPEED_N
+  #define MSG_EXTRA_FIRST_FAN_SPEED MSG_EXTRA_FAN_SPEED_N
 #endif

commit 4424645e04c9e75462d36de8f7a82e67cc9c262e
Author: qwewer0 <57561110+qwewer0@users.noreply.github.com>
Date:   Mon Sep 28 21:53:50 2020 +0200

    Multi-line comments cleanup (#19535)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 6764af6d73..7f1fce649e 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -26,7 +26,6 @@
  *
  * LCD Menu Messages
  * See also https://marlinfw.org/docs/development/lcd_language.html
- *
  */
 namespace Language_zh_TW {
   using namespace Language_en;  // Inherit undefined strings from English

commit 979876e958e73e642b51eb655461c92947fe1deb
Author: ellensp <ellensp@hotmail.com>
Date:   Mon Sep 14 16:58:39 2020 +1200

    Improve temperature runaway, idle timeout (#19339)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 532886d451..6764af6d73 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -388,10 +388,6 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_THERMAL_RUNAWAY_CHAMBER         = _UxGT("Ê©üÁÆ±Ê∫´Â∫¶Â§±Êéß");   //"CHAMBER T. RUNAWAY"
   PROGMEM Language_Str MSG_ERR_MAXTEMP                     = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ∫´Â∫¶");     //"Err: MAXTEMP"
   PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶");     //"Err: MINTEMP"
-  PROGMEM Language_Str MSG_ERR_MAXTEMP_BED                 = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÁÜ±Â∫äÊ∫´Â∫¶");     //"Err: MAXTEMP BED"
-  PROGMEM Language_Str MSG_ERR_MINTEMP_BED                 = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÁÜ±Â∫äÊ∫´Â∫¶");     //"Err: MINTEMP BED"
-  PROGMEM Language_Str MSG_ERR_MAXTEMP_CHAMBER             = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ©üÁÆ±Ê∫´Â∫¶");   //"Err: MAXTEMP CHAMBER"
-  PROGMEM Language_Str MSG_ERR_MINTEMP_CHAMBER             = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ©üÁÆ±Ê∫´Â∫¶");   //"Err: MINTEMP CHAMBER"
   PROGMEM Language_Str MSG_HALTED                          = _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü");     //"PRINTER HALTED"
   PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Ë´ãÈáçÁΩÆ");     //"Please reset"
   PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("Â§©");     //"d" // One character only

commit b2ba9009d045fc21e7a923e92ab9a91e4275247d
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Thu Sep 10 23:47:58 2020 +0200

    Fix "too cold" in M600 (#19332)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index ac54358534..532886d451 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -472,7 +472,6 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_RUNOUT_DISTANCE_MM              = _UxGT("Áµ≤Ë∑ùÈõ¢mm");   //"Runout Dist mm"
   PROGMEM Language_Str MSG_KILL_HOMING_FAILED              = _UxGT("Ê≠∏Âéü‰ΩçÂ§±Êïó");     // "Homing failed"
   PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó");     // "Probing failed"
-  PROGMEM Language_Str MSG_M600_TOO_COLD                   = _UxGT("M600: Â§™ÂÜ∑");     // "M600: Too cold"
 
   //
   // Filament Change screens show up to 3 lines on a 4-line display

commit 56c44b053d11925c67a32f26ad84c2e76c97fd56
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Tue Sep 1 23:59:29 2020 +0200

    Delete old LCD strings (#19227)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 94a7944b35..ac54358534 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -382,8 +382,6 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_BABYSTEP_TOTAL                  = _UxGT("Á∏ΩË®à");    //"Total"
   PROGMEM Language_Str MSG_ENDSTOP_ABORT                   = _UxGT("ÊìãÂ°äÁµÇÊ≠¢");     //"Endstop abort"
   PROGMEM Language_Str MSG_HEATING_FAILED_LCD              = _UxGT("Âä†ÁÜ±Â§±Êïó");     //"Heating failed"
-  PROGMEM Language_Str MSG_HEATING_FAILED_LCD_BED          = _UxGT("ÁÜ±Â∫äÂä†ÁÜ±Â§±Êïó");   //"Bed Heating Failed"
-  PROGMEM Language_Str MSG_HEATING_FAILED_LCD_CHAMBER      = _UxGT("Ê©üÁÆ±Âä†ÁÜ±Â§±Êïó");   //"Chamber Heating Fail"
   PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("ÈåØË™§ÔºöÂÜóÈ§òÊ∫´Â∫¶");     //"Err: REDUNDANT TEMP"
   PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("Ê∫´Â∫¶Â§±Êéß");    //"THERMAL RUNAWAY"
   PROGMEM Language_Str MSG_THERMAL_RUNAWAY_BED             = _UxGT("ÁÜ±Â∫äÊ∫´Â∫¶Â§±Êéß");    //"BED THERMAL RUNAWAY"

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index efc9b570bb..94a7944b35 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 #pragma once

commit b0c6cfb0511b8d71fec26ab91cd945f3d623b3c0
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Thu Jul 9 10:11:57 2020 +0200

    MarlinUI support for up to 5 Material Presets (#18488)
    
    - Add `I` preset parameter to `G26`, `M106`, `M140`, and `M190`.
    - Extend menu items to permit a string interpolation.
    - Keep material names in a list and interpolate in menu items.
    - Extend material presets to support up to 5 predefined materials.
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 793890e300..efc9b570bb 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -68,20 +68,23 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_SET_HOME_OFFSETS                = _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª");     //"Set home offsets"
   PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®");     //"Offsets applied"
   PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("Ë®≠ÁΩÆÂéüÈªû");     //"Set origin"
-  PROGMEM Language_Str MSG_PREHEAT_1                       = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL;     //"Preheat PREHEAT_1_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_1_H                     = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~";     //"Preheat PREHEAT_1_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_1_END                   = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥");     //MSG_PREHEAT_1 " "
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E                 = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ~");     //MSG_PREHEAT_1 " "
-  PROGMEM Language_Str MSG_PREHEAT_1_ALL                   = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
-  PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY               = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
-  PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS              = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
-  PROGMEM Language_Str MSG_PREHEAT_2                       = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL;     //"Preheat PREHEAT_2_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_2_H                     = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " ~";     //"Preheat PREHEAT_2_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_2_END                   = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥");     //MSG_PREHEAT_2 " "
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E                 = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ~");     //MSG_PREHEAT_2 " "
-  PROGMEM Language_Str MSG_PREHEAT_2_ALL                   = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" ÂÖ®ÈÉ®");     //MSG_PREHEAT_2 " All"
-  PROGMEM Language_Str MSG_PREHEAT_2_BEDONLY               = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" ÁÜ±Â∫ä");     //MSG_PREHEAT_2 " Bed"
-  PROGMEM Language_Str MSG_PREHEAT_2_SETTINGS              = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Ë®≠ÁΩÆ");     //MSG_PREHEAT_2 " conf"
+  #if PREHEAT_COUNT
+    PROGMEM Language_Str MSG_PREHEAT_1                     = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL;     //"Preheat PREHEAT_1_LABEL"
+    PROGMEM Language_Str MSG_PREHEAT_1_H                   = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~";     //"Preheat PREHEAT_1_LABEL"
+    PROGMEM Language_Str MSG_PREHEAT_1_END                 = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥");     //MSG_PREHEAT_1 " "
+    PROGMEM Language_Str MSG_PREHEAT_1_END_E               = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ~");   //MSG_PREHEAT_1 " "
+    PROGMEM Language_Str MSG_PREHEAT_1_ALL                 = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
+    PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY             = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
+    PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS            = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
+
+    PROGMEM Language_Str MSG_PREHEAT_M                     = _UxGT("È†êÁÜ± $");     //"Preheat PREHEAT_1_LABEL"
+    PROGMEM Language_Str MSG_PREHEAT_M_H                   = _UxGT("È†êÁÜ± $ ~");     //"Preheat PREHEAT_1_LABEL"
+    PROGMEM Language_Str MSG_PREHEAT_M_END                 = _UxGT("È†êÁÜ± $ Âô¥Âò¥");     //MSG_PREHEAT_1 " "
+    PROGMEM Language_Str MSG_PREHEAT_M_END_E               = _UxGT("È†êÁÜ± $ Âô¥Âò¥ ~");   //MSG_PREHEAT_1 " "
+    PROGMEM Language_Str MSG_PREHEAT_M_ALL                 = _UxGT("È†êÁÜ± $ ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
+    PROGMEM Language_Str MSG_PREHEAT_M_BEDONLY             = _UxGT("È†êÁÜ± $ ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
+    PROGMEM Language_Str MSG_PREHEAT_M_SETTINGS            = _UxGT("È†êÁÜ± $ Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
+  #endif
   PROGMEM Language_Str MSG_PREHEAT_CUSTOM                  = _UxGT("Ëá™ÂÆöÈ†êÁÜ±");   //"Preheat Custom"
   PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("ÈôçÊ∫´");     //"Cooldown"
   PROGMEM Language_Str MSG_LASER_MENU                      = _UxGT("ÊøÄÂÖâÊéßÂà∂");    //"Laser Control"
@@ -143,14 +146,14 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_UBL_DONE_EDITING_MESH           = _UxGT("ÂÆåÊàêÁ∑®ËºØÁ∂≤Ê†º");     // "Done Editing Mesh"
   PROGMEM Language_Str MSG_UBL_BUILD_CUSTOM_MESH           = _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º");     // "Build Custom Mesh"
   PROGMEM Language_Str MSG_UBL_BUILD_MESH_MENU             = _UxGT("ÂâµË®≠Á∂≤Ê†º");     // "Build Mesh"
-  PROGMEM Language_Str MSG_UBL_BUILD_MESH_M1               = _UxGT("ÂâµË®≠ ") PREHEAT_1_LABEL _UxGT(" Á∂≤Ê†º");     // "Build PREHEAT_1_LABEL Mesh"
-  PROGMEM Language_Str MSG_UBL_BUILD_MESH_M2               = _UxGT("ÂâµË®≠ ") PREHEAT_2_LABEL _UxGT(" Á∂≤Ê†º");     // "Build PREHEAT_2_LABEL Mesh"
+  #if PREHEAT_COUNT
+    PROGMEM Language_Str MSG_UBL_BUILD_MESH_M              = _UxGT("ÂâµË®≠ $ Á∂≤Ê†º");     // "Build PREHEAT_1_LABEL Mesh"
+    PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M           = _UxGT("ÊâπÂáÜ $ Á∂≤Ê†º");     // "Validate PREHEAT_1_LABEL Mesh"
+  #endif
   PROGMEM Language_Str MSG_UBL_BUILD_COLD_MESH             = _UxGT("ÂâµË®≠ÂÜ∑Á∂≤Ê†º");     // "Build Cold Mesh"
   PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_ADJUST          = _UxGT("Ë™øÊï¥Á∂≤Ê†ºÈ´òÂ∫¶");     // "Adjust Mesh Height"
   PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_AMOUNT          = _UxGT("È´òÂ∫¶ÂêàË®à");     // "Height Amount"
   PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_MENU          = _UxGT("ÊâπÂáÜÁ∂≤Ê†º");     // "Validate Mesh"
-  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M1            = _UxGT("ÊâπÂáÜ ") PREHEAT_1_LABEL _UxGT(" Á∂≤Ê†º");     // "Validate PREHEAT_1_LABEL Mesh"
-  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M2            = _UxGT("ÊâπÂáÜ ") PREHEAT_2_LABEL _UxGT(" Á∂≤Ê†º");     // "Validate PREHEAT_2_LABEL Mesh"
   PROGMEM Language_Str MSG_UBL_VALIDATE_CUSTOM_MESH        = _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º");     // "Validate Custom Mesh"
   PROGMEM Language_Str MSG_G26_HEATING_BED                 = _UxGT("G26 Âä†ÁÜ±ÁÜ±Â∫ä");    //"G26 Heating Bed"
   PROGMEM Language_Str MSG_G26_HEATING_NOZZLE              = _UxGT("G26 Âä†ÁÜ±Âô¥Âò¥"); //"G26 Heating Nozzle"

commit a6b8b12a6a001a25dc73e8ab08f71e357ea58e48
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jul 5 18:00:37 2020 -0500

    Simplify home_z_safely, respect HOME_AFTER_DEACTIVATE

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 1019fcb03a..793890e300 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -391,7 +391,6 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_ERR_MINTEMP_BED                 = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÁÜ±Â∫äÊ∫´Â∫¶");     //"Err: MINTEMP BED"
   PROGMEM Language_Str MSG_ERR_MAXTEMP_CHAMBER             = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ©üÁÆ±Ê∫´Â∫¶");   //"Err: MAXTEMP CHAMBER"
   PROGMEM Language_Str MSG_ERR_MINTEMP_CHAMBER             = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ©üÁÆ±Ê∫´Â∫¶");   //"Err: MINTEMP CHAMBER"
-  PROGMEM Language_Str MSG_ERR_Z_HOMING                    = _UxGT("Ê≠∏‰Ωç XY ÂÖà");     //"Home XY First"
   PROGMEM Language_Str MSG_HALTED                          = _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü");     //"PRINTER HALTED"
   PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Ë´ãÈáçÁΩÆ");     //"Please reset"
   PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("Â§©");     //"d" // One character only

commit 2f6262c27b11598293839f6d46f3b340ee6a1f4c
Author: studiodyne <42887851+studiodyne@users.noreply.github.com>
Date:   Thu Apr 23 04:03:28 2020 +0200

    Automatic Tool Migration feature (#17248)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 6bb7d759f6..1019fcb03a 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -346,8 +346,8 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_FILAMENT_PURGE_LENGTH           = _UxGT("Ê∏ÖÈô§Èï∑Â∫¶");   //"Purge Length"
   PROGMEM Language_Str MSG_TOOL_CHANGE                     = _UxGT("‰∫§ÊèõÂ∑•ÂÖ∑"); //"Tool Change"
   PROGMEM Language_Str MSG_TOOL_CHANGE_ZLIFT               = _UxGT("ZËª∏ÊèêÊòá");    //"Z Raise"
-  PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPD          = _UxGT("ÊúÄÈ´òÈÄüÂ∫¶");    //"Prime Speed"
-  PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPD        = _UxGT("Êî∂ÂõûÈÄüÂ∫¶");  //"Retract Speed"
+  PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPEED        = _UxGT("ÊúÄÈ´òÈÄüÂ∫¶");    //"Prime Speed"
+  PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPEED      = _UxGT("Êî∂ÂõûÈÄüÂ∫¶");  //"Retract Speed"
   PROGMEM Language_Str MSG_NOZZLE_STANDBY                  = _UxGT("Âô¥Âò¥ÂæÖÊ©ü"); //"Nozzle Standby"
   PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Êõ¥ÊèõÁµ≤Êñô");     //"Change filament"
   PROGMEM Language_Str MSG_FILAMENTCHANGE_E                = _UxGT("Êõ¥ÊèõÁµ≤Êñô *");

commit 875cd4e081ef6885aa2593d125b2db5ff393a391
Author: Mathias Rasmussen <mathiasvr@gmail.com>
Date:   Mon Apr 20 16:17:55 2020 +0200

    Remove 'Media Released' message (#17272)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 274d692776..6bb7d759f6 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -42,7 +42,6 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_MEDIA_ABORTING                  = _UxGT("Ê≠£Âú®‰∏≠Ê≠¢...");   //"Aborting..."
   PROGMEM Language_Str MSG_MEDIA_INSERTED                  = _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•");     //"Card inserted"
   PROGMEM Language_Str MSG_MEDIA_REMOVED                   = _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫");     //"Card removed"
-  PROGMEM Language_Str MSG_MEDIA_RELEASED                  = _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÈáãÊîæ");   //"Media Released"
   PROGMEM Language_Str MSG_MEDIA_WAITING                   = _UxGT("Á≠âÂæÖË®òÊÜ∂Âç°");    //"Waiting for media"
   PROGMEM Language_Str MSG_MEDIA_READ_ERROR                = _UxGT("Ë®òÊÜ∂Âç°ËÆÄÂèñÈåØË™§"); //"Media read error"
   PROGMEM Language_Str MSG_MEDIA_USB_REMOVED               = _UxGT("USBË£ùÁΩÆÂ∑≤ÁßªÈô§");   //"USB device removed"

commit 1bbd77646e4400f556eb916acf829a5f626a13d1
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 19 02:37:33 2020 -0500

    Clean up language files

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 0c6f69ebba..274d692776 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -251,18 +251,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_AUTOTEMP                        = _UxGT("Ëá™ÂãïÊéßÊ∫´");     //"Autotemp"
   PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("Èñã ");     //"On"
   PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("Èóú ");     //"Off"
-  PROGMEM Language_Str MSG_PID_AUTOTUNE                    = _UxGT("PID Autotune");
-  PROGMEM Language_Str MSG_PID_AUTOTUNE_E                  = _UxGT("PID Autotune *");
-  PROGMEM Language_Str MSG_PID_P                           = _UxGT("PID-P");     //"PID-P"
-  PROGMEM Language_Str MSG_PID_P_E                         = _UxGT("PID-P *");
-  PROGMEM Language_Str MSG_PID_I                           = _UxGT("PID-I");     //"PID-I"
-  PROGMEM Language_Str MSG_PID_I_E                         = _UxGT("PID-I *");
-  PROGMEM Language_Str MSG_PID_D                           = _UxGT("PID-D");     //"PID-D"
-  PROGMEM Language_Str MSG_PID_D_E                         = _UxGT("PID-D *");
-  PROGMEM Language_Str MSG_PID_C                           = _UxGT("PID-C");     //"PID-C"
-  PROGMEM Language_Str MSG_PID_C_E                         = _UxGT("PID-C *");
-  PROGMEM Language_Str MSG_PID_F                           = _UxGT("PID-F");    //"PID-F"
-  PROGMEM Language_Str MSG_PID_F_E                         = _UxGT("PID-F *");
+
   PROGMEM Language_Str MSG_SELECT                          = _UxGT("ÈÅ∏Êìá");     //"Select"
   PROGMEM Language_Str MSG_SELECT_E                        = _UxGT("ÈÅ∏Êìá *");
   PROGMEM Language_Str MSG_ACC                             = _UxGT("Âä†ÈÄüÂ∫¶");     //"Accel" acceleration
@@ -271,7 +260,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_VB_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_B;     //"Vb-jerk"
   PROGMEM Language_Str MSG_VC_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_C;     //"Vc-jerk"
   PROGMEM Language_Str MSG_VE_JERK                         = _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá");     //"Ve-jerk"
-  PROGMEM Language_Str MSG_JUNCTION_DEVIATION              = _UxGT("Junction Dev");
+
   PROGMEM Language_Str MSG_VELOCITY                        = _UxGT("ÈÄüÂ∫¶");     // "Velocity"
   PROGMEM Language_Str MSG_VMAX_A                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_A;     //"Vmax " max_feedrate_mm_s
   PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_B;
@@ -374,26 +363,12 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_RELEASE_MEDIA                   = _UxGT("ÈáãÊîæÂ™íÈ´î");   //"Release Media"
   PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ");     //"Z probe out. bed" Z probe is not within the physical limits
   PROGMEM Language_Str MSG_SKEW_FACTOR                     = _UxGT("ÂÅèÊñúÂõ†Êï∏");     // "Skew Factor"
-  PROGMEM Language_Str MSG_BLTOUCH                         = _UxGT("BLTouch");     // "BLTouch"
+
   PROGMEM Language_Str MSG_BLTOUCH_SELFTEST                = _UxGT("BLTouch Ëá™Ê™¢");     // "BLTouch Self-Test"
   PROGMEM Language_Str MSG_BLTOUCH_RESET                   = _UxGT("ÈáçÁΩÆBLTouch");     // "Reset BLTouch"
   PROGMEM Language_Str MSG_BLTOUCH_STOW                    = _UxGT("Ë£ùËºâBLTouch");     // "Stow BLTouch"
   PROGMEM Language_Str MSG_BLTOUCH_DEPLOY                  = _UxGT("ÈÉ®ÁΩ≤BLTouch");     // "Deploy BLTouch"
-  PROGMEM Language_Str MSG_BLTOUCH_SW_MODE                 = _UxGT("Cmd: SW-Mode");
-  PROGMEM Language_Str MSG_BLTOUCH_5V_MODE                 = _UxGT("Cmd: 5V-Mode");
-  PROGMEM Language_Str MSG_BLTOUCH_OD_MODE                 = _UxGT("Cmd: OD-Mode");
-  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE              = _UxGT("Cmd: Mode-Store");
-  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE_5V           = _UxGT("Set BLTouch to 5V");
-  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE_OD           = _UxGT("Set BLTouch to OD");
-  PROGMEM Language_Str MSG_BLTOUCH_MODE_ECHO               = _UxGT("Report Drain");
-  PROGMEM Language_Str MSG_BLTOUCH_MODE_CHANGE             = _UxGT("DANGER: Bad settings can cause damage! Proceed anyway?");
-  PROGMEM Language_Str MSG_TOUCHMI_PROBE                   = _UxGT("TouchMI");
-  PROGMEM Language_Str MSG_TOUCHMI_INIT                    = _UxGT("Init TouchMI");
-  PROGMEM Language_Str MSG_TOUCHMI_ZTEST                   = _UxGT("Z Offset Test");
-  PROGMEM Language_Str MSG_TOUCHMI_SAVE                    = _UxGT("Save");
-  PROGMEM Language_Str MSG_MANUAL_DEPLOY_TOUCHMI           = _UxGT("Deploy TouchMI");
-  PROGMEM Language_Str MSG_MANUAL_DEPLOY                   = _UxGT("Deploy Z-Probe");
-  PROGMEM Language_Str MSG_MANUAL_STOW                     = _UxGT("Stow Z-Probe");
+
   PROGMEM Language_Str MSG_HOME_FIRST                      = _UxGT("Ê≠∏‰Ωç %s%s%s ÂÖà");     //"Home ... first"
   PROGMEM Language_Str MSG_ZPROBE_OFFSETS                  = _UxGT("Êé¢ÈáùÂÅèÁßª");   //Probe Offsets
   PROGMEM Language_Str MSG_ZPROBE_XOFFSET                  = _UxGT("Êé¢ÈáùXÂÅèÁßªÈáè");   //Probe X Offset
@@ -500,52 +475,6 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó");     // "Probing failed"
   PROGMEM Language_Str MSG_M600_TOO_COLD                   = _UxGT("M600: Â§™ÂÜ∑");     // "M600: Too cold"
 
-  PROGMEM Language_Str MSG_MMU2_CHOOSE_FILAMENT_HEADER     = _UxGT("CHOOSE FILAMENT");
-  PROGMEM Language_Str MSG_MMU2_MENU                       = _UxGT("MMU");
-  PROGMEM Language_Str MSG_KILL_MMU2_FIRMWARE              = _UxGT("Update MMU Firmware!");
-  PROGMEM Language_Str MSG_MMU2_NOT_RESPONDING             = _UxGT("MMU Needs Attention.");
-  PROGMEM Language_Str MSG_MMU2_RESUME                     = _UxGT("Resume Print");
-  PROGMEM Language_Str MSG_MMU2_RESUMING                   = _UxGT("Resuming...");
-  PROGMEM Language_Str MSG_MMU2_LOAD_FILAMENT              = _UxGT("Load Filament");
-  PROGMEM Language_Str MSG_MMU2_LOAD_ALL                   = _UxGT("Load All");
-  PROGMEM Language_Str MSG_MMU2_LOAD_TO_NOZZLE             = _UxGT("Load to Nozzle");
-  PROGMEM Language_Str MSG_MMU2_EJECT_FILAMENT             = _UxGT("Eject Filament");
-  PROGMEM Language_Str MSG_MMU2_EJECT_FILAMENT_N           = _UxGT("Eject Filament ~");
-  PROGMEM Language_Str MSG_MMU2_UNLOAD_FILAMENT            = _UxGT("Unload Filament");
-  PROGMEM Language_Str MSG_MMU2_LOADING_FILAMENT           = _UxGT("Loading Fil. %i...");
-  PROGMEM Language_Str MSG_MMU2_EJECTING_FILAMENT          = _UxGT("Ejecting Fil. ...");
-  PROGMEM Language_Str MSG_MMU2_UNLOADING_FILAMENT         = _UxGT("Unloading Fil....");
-  PROGMEM Language_Str MSG_MMU2_ALL                        = _UxGT("All");
-  PROGMEM Language_Str MSG_MMU2_FILAMENT_N                 = _UxGT("Filament ~");
-  PROGMEM Language_Str MSG_MMU2_RESET                      = _UxGT("Reset MMU");
-  PROGMEM Language_Str MSG_MMU2_RESETTING                  = _UxGT("Resetting MMU...");
-  PROGMEM Language_Str MSG_MMU2_EJECT_RECOVER              = _UxGT("Remove, click");
-
-  PROGMEM Language_Str MSG_MIX                             = _UxGT("Mix");
-  PROGMEM Language_Str MSG_MIX_COMPONENT_N                 = _UxGT("Component =");
-  PROGMEM Language_Str MSG_MIXER                           = _UxGT("Mixer");
-  PROGMEM Language_Str MSG_GRADIENT                        = _UxGT("Gradient");
-  PROGMEM Language_Str MSG_FULL_GRADIENT                   = _UxGT("Full Gradient");
-  PROGMEM Language_Str MSG_TOGGLE_MIX                      = _UxGT("Toggle Mix");
-  PROGMEM Language_Str MSG_CYCLE_MIX                       = _UxGT("Cycle Mix");
-  PROGMEM Language_Str MSG_GRADIENT_MIX                    = _UxGT("Gradient Mix");
-  PROGMEM Language_Str MSG_REVERSE_GRADIENT                = _UxGT("Reverse Gradient");
-  PROGMEM Language_Str MSG_ACTIVE_VTOOL                    = _UxGT("Active V-tool");
-  PROGMEM Language_Str MSG_START_VTOOL                     = _UxGT("Start V-tool");
-  PROGMEM Language_Str MSG_END_VTOOL                       = _UxGT("  End V-tool");
-  PROGMEM Language_Str MSG_GRADIENT_ALIAS                  = _UxGT("Alias V-tool");
-  PROGMEM Language_Str MSG_RESET_VTOOLS                    = _UxGT("Reset V-tools");
-  PROGMEM Language_Str MSG_COMMIT_VTOOL                    = _UxGT("Commit V-tool Mix");
-  PROGMEM Language_Str MSG_VTOOLS_RESET                    = _UxGT("V-tools Were Reset");
-  PROGMEM Language_Str MSG_START_Z                         = _UxGT("Start Z:");
-  PROGMEM Language_Str MSG_END_Z                           = _UxGT("  End Z:");
-
-  PROGMEM Language_Str MSG_GAMES                           = _UxGT("Games");
-  PROGMEM Language_Str MSG_BRICKOUT                        = _UxGT("Brickout");
-  PROGMEM Language_Str MSG_INVADERS                        = _UxGT("Invaders");
-  PROGMEM Language_Str MSG_SNAKE                           = _UxGT("Sn4k3");
-  PROGMEM Language_Str MSG_MAZE                            = _UxGT("Maze");
-
   //
   // Filament Change screens show up to 3 lines on a 4-line display
   //                        ...or up to 2 lines on a 3-line display
@@ -575,21 +504,6 @@ namespace Language_zh_TW {
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE    = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂÆåÊàê.."));     //"Click to finish"
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_1_LINE("ÊÅ¢Âæ©‰∏≠ ..."));     //"Resuming..."
   #endif // LCD_HEIGHT < 4
-
-  PROGMEM Language_Str MSG_TMC_DRIVERS                     = _UxGT("TMC Drivers");
-  PROGMEM Language_Str MSG_TMC_CURRENT                     = _UxGT("Driver Current");
-  PROGMEM Language_Str MSG_TMC_HYBRID_THRS                 = _UxGT("Hybrid Threshold");
-  PROGMEM Language_Str MSG_TMC_HOMING_THRS                 = _UxGT("Sensorless Homing");
-  PROGMEM Language_Str MSG_TMC_STEPPING_MODE               = _UxGT("Stepping Mode");
-  PROGMEM Language_Str MSG_TMC_STEALTH_ENABLED             = _UxGT("StealthChop Enabled");
-  PROGMEM Language_Str MSG_SERVICE_RESET                   = _UxGT("Reset");
-  PROGMEM Language_Str MSG_SERVICE_IN                      = _UxGT(" in:");
-  PROGMEM Language_Str MSG_BACKLASH                        = _UxGT("Backlash");
-  PROGMEM Language_Str MSG_BACKLASH_A                      = LCD_STR_A;
-  PROGMEM Language_Str MSG_BACKLASH_B                      = LCD_STR_B;
-  PROGMEM Language_Str MSG_BACKLASH_C                      = LCD_STR_C;
-  PROGMEM Language_Str MSG_BACKLASH_CORRECTION             = _UxGT("Correction");
-  PROGMEM Language_Str MSG_BACKLASH_SMOOTHING              = _UxGT("Smoothing");
 }
 
 #if FAN_COUNT == 1

commit 22da1b2b310158ae3362c54f2534f5f5af30fa83
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Apr 13 14:53:21 2020 -0500

    Rename some "kill" messages

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 53e40bbab8..0c6f69ebba 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -459,7 +459,7 @@ namespace Language_zh_TW {
 
   PROGMEM Language_Str MSG_CASE_LIGHT                      = _UxGT("Â§ñÊÆºÁáà");     // "Case light"
   PROGMEM Language_Str MSG_CASE_LIGHT_BRIGHTNESS           = _UxGT("Ááà‰∫ÆÂ∫¶");     // "Light BRIGHTNESS"
-  PROGMEM Language_Str MSG_EXPECTED_PRINTER                = _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫");     // "The printer is incorrect"
+  PROGMEM Language_Str MSG_KILL_EXPECTED_PRINTER           = _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫");     // "The printer is incorrect"
 
   #if LCD_WIDTH >= 20
     PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("ÂàóÂç∞Ë®àÊï∏");     //"Print Count"
@@ -496,13 +496,13 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_NOZZLE          = _UxGT("  Âô¥Âò¥: ");     // "  Nozzle: "
   PROGMEM Language_Str MSG_RUNOUT_SENSOR                   = _UxGT("Êñ∑Áµ≤ÂÅµÊ∏¨");    //"Runout Sensor"
   PROGMEM Language_Str MSG_RUNOUT_DISTANCE_MM              = _UxGT("Áµ≤Ë∑ùÈõ¢mm");   //"Runout Dist mm"
-  PROGMEM Language_Str MSG_LCD_HOMING_FAILED               = _UxGT("Ê≠∏Âéü‰ΩçÂ§±Êïó");     // "Homing failed"
+  PROGMEM Language_Str MSG_KILL_HOMING_FAILED              = _UxGT("Ê≠∏Âéü‰ΩçÂ§±Êïó");     // "Homing failed"
   PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó");     // "Probing failed"
   PROGMEM Language_Str MSG_M600_TOO_COLD                   = _UxGT("M600: Â§™ÂÜ∑");     // "M600: Too cold"
 
   PROGMEM Language_Str MSG_MMU2_CHOOSE_FILAMENT_HEADER     = _UxGT("CHOOSE FILAMENT");
   PROGMEM Language_Str MSG_MMU2_MENU                       = _UxGT("MMU");
-  PROGMEM Language_Str MSG_MMU2_WRONG_FIRMWARE             = _UxGT("Update MMU Firmware!");
+  PROGMEM Language_Str MSG_KILL_MMU2_FIRMWARE              = _UxGT("Update MMU Firmware!");
   PROGMEM Language_Str MSG_MMU2_NOT_RESPONDING             = _UxGT("MMU Needs Attention.");
   PROGMEM Language_Str MSG_MMU2_RESUME                     = _UxGT("Resume Print");
   PROGMEM Language_Str MSG_MMU2_RESUMING                   = _UxGT("Resuming...");

commit e3321920f3bab800812ed0d2395fb00fe80072fb
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 12 17:21:02 2020 -0500

    Update Marlin website links to https

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index a0812a89f3..53e40bbab8 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -25,7 +25,7 @@
  * Traditional Chinese
  *
  * LCD Menu Messages
- * See also http://marlinfw.org/docs/development/lcd_language.html
+ * See also https://marlinfw.org/docs/development/lcd_language.html
  *
  */
 namespace Language_zh_TW {

commit e4903396d4ac2fa9b89dd535dae9c3e8a68b3526
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Apr 11 20:36:17 2020 -0500

    Fix up pausing / parking display (#17460)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index f9eeb0e649..a0812a89f3 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -552,7 +552,7 @@ namespace Language_zh_TW {
   //
   #if LCD_HEIGHT >= 4
     PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "ÊÅ¢Âæ©ÂàóÂç∞")); //"Press Button to resume print"
-    PROGMEM Language_Str MSG_PAUSE_PRINT_INIT              = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));   //"Parking..."
+    PROGMEM Language_Str MSG_PAUSE_PRINT_PARKING           = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));   //"Parking..."
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_3_LINE("Á≠âÂæÖÈñãÂßã", "Áµ≤Êñô", "ËÆäÊõ¥"));     //"Wait for start of the filament change"
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Âç∏‰∏ãÁµ≤Êñô"));     //"Wait for filament unload"
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_3_LINE("ÊèíÂÖ•Áµ≤Êñô", "‰∏¶ÊåâÈçµ", "ÁπºÁ∫å ..."));     //"Insert filament and press button to continue..."
@@ -564,7 +564,7 @@ namespace Language_zh_TW {
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_2_LINE("Á≠âÂæÖÂàóÂç∞", "ÊÅ¢Âæ©"));     //"Wait for print to resume"
   #else // LCD_HEIGHT < 4
     PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_1_LINE("Êåâ‰∏ãÁπºÁ∫å.."));   //"Click to continue"
-    PROGMEM Language_Str MSG_PAUSE_PRINT_INIT              = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));     //"Parking..."
+    PROGMEM Language_Str MSG_PAUSE_PRINT_PARKING           = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));     //"Parking..."
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_1_LINE("Ë´ãÁ≠âÂæÖ ..."));     //"Please wait..."
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_1_LINE("ÊèíÂÖ•‰∏¶ÈªûÊìä"));     //"Insert and Click"
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂä†ÁÜ±.."));     //"Click to heat"

commit 48919c54fb4e793b6bb17022f9badbd3530733ae
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Apr 9 20:05:58 2020 -0500

    Add SRAM command injection (#17459)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 053a90d586..f9eeb0e649 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -184,8 +184,8 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_UBL_STORAGE_SLOT                = _UxGT("Â≠òÂÑ≤ÊßΩ");     // "Memory Slot"
   PROGMEM Language_Str MSG_UBL_LOAD_MESH                   = _UxGT("Ë£ùËºâÁÜ±Â∫äÁ∂≤Ê†º");     // "Load Bed Mesh"
   PROGMEM Language_Str MSG_UBL_SAVE_MESH                   = _UxGT("‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º");     // "Save Bed Mesh"
-  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("M117 Á∂≤Ê†º %i Â∑≤Ë£ùËºâ");     // "Mesh %i loaded"
-  PROGMEM Language_Str MSG_MESH_SAVED                      = _UxGT("M117 Á∂≤Ê†º %i Â∑≤‰øùÂ≠ò");     // "Mesh %i saved"
+  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("Á∂≤Ê†º %i Â∑≤Ë£ùËºâ");     // "Mesh %i loaded"
+  PROGMEM Language_Str MSG_MESH_SAVED                      = _UxGT("Á∂≤Ê†º %i Â∑≤‰øùÂ≠ò");     // "Mesh %i saved"
   PROGMEM Language_Str MSG_UBL_NO_STORAGE                  = _UxGT("Ê≤íÊúâÂ≠òÂÑ≤");     // "No storage"
   PROGMEM Language_Str MSG_UBL_SAVE_ERROR                  = _UxGT("ÈåØË™§: UBL‰øùÂ≠ò");     // "Err: UBL Save"
   PROGMEM Language_Str MSG_UBL_RESTORE_ERROR               = _UxGT("ÈåØË™§: UBLÈÇÑÂéü");     // "Err: UBL Restore"

commit fad9235cd80f2acdf1c0658d9633857fad94edea
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Apr 5 18:24:50 2020 -0500

    Move MSG_x_LINE to multi_language.h

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 06b19440f2..053a90d586 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -546,10 +546,6 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_SNAKE                           = _UxGT("Sn4k3");
   PROGMEM Language_Str MSG_MAZE                            = _UxGT("Maze");
 
-  #define MSG_1_LINE(A)     A "\0"   "\0"
-  #define MSG_2_LINE(A,B)   A "\0" B "\0"
-  #define MSG_3_LINE(A,B,C) A "\0" B "\0" C
-
   //
   // Filament Change screens show up to 3 lines on a 4-line display
   //                        ...or up to 2 lines on a 3-line display

commit 3a72b0fd419c225121a414319142b51c54d22142
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Mar 5 15:39:49 2020 -0600

    Update Chinese (TW) language (#17071)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index d0871f0e46..06b19440f2 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -35,11 +35,23 @@ namespace Language_zh_TW {
   PROGMEM Language_Str LANGUAGE                            = _UxGT("Traditional Chinese");
 
   PROGMEM Language_Str WELCOME_MSG                         = MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.");     //" ready."
-  PROGMEM Language_Str MSG_BACK                            = _UxGT("ËøîÂõû");     // ‚ÄùBack‚Äú
+  PROGMEM Language_Str MSG_MARLIN                          = _UxGT("Marlin");
+  PROGMEM Language_Str MSG_YES                             = _UxGT("ÊòØ");  //"YES"
+  PROGMEM Language_Str MSG_NO                              = _UxGT("Âê¶");  //"NO"
+  PROGMEM Language_Str MSG_BACK                            = _UxGT("ËøîÂõû");     // "Back"
+  PROGMEM Language_Str MSG_MEDIA_ABORTING                  = _UxGT("Ê≠£Âú®‰∏≠Ê≠¢...");   //"Aborting..."
   PROGMEM Language_Str MSG_MEDIA_INSERTED                  = _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•");     //"Card inserted"
   PROGMEM Language_Str MSG_MEDIA_REMOVED                   = _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫");     //"Card removed"
+  PROGMEM Language_Str MSG_MEDIA_RELEASED                  = _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÈáãÊîæ");   //"Media Released"
+  PROGMEM Language_Str MSG_MEDIA_WAITING                   = _UxGT("Á≠âÂæÖË®òÊÜ∂Âç°");    //"Waiting for media"
+  PROGMEM Language_Str MSG_MEDIA_READ_ERROR                = _UxGT("Ë®òÊÜ∂Âç°ËÆÄÂèñÈåØË™§"); //"Media read error"
+  PROGMEM Language_Str MSG_MEDIA_USB_REMOVED               = _UxGT("USBË£ùÁΩÆÂ∑≤ÁßªÈô§");   //"USB device removed"
+  PROGMEM Language_Str MSG_MEDIA_USB_FAILED                = _UxGT("USBÂïüÂãïÂ§±Êïó");  //"USB start failed"
   PROGMEM Language_Str MSG_LCD_ENDSTOPS                    = _UxGT("ÊìãÂ°ä");     //"Endstops" // Max length 8 characters
+  PROGMEM Language_Str MSG_LCD_SOFT_ENDSTOPS               = _UxGT("ËªüÈ´îÊìãÂ°ä");    //"Soft Endstops"
   PROGMEM Language_Str MSG_MAIN                            = _UxGT("‰∏ªÈÅ∏ÂñÆ");     //"Main"
+  PROGMEM Language_Str MSG_ADVANCED_SETTINGS               = _UxGT("ÈÄ≤ÈöéË®≠ÁΩÆ");   //"Advanced Settings"
+  PROGMEM Language_Str MSG_CONFIGURATION                   = _UxGT("Ë®≠ÁΩÆ");    //Configuration
   PROGMEM Language_Str MSG_AUTOSTART                       = _UxGT("Ëá™ÂãïÈñãÂßã");     //"Autostart"
   PROGMEM Language_Str MSG_DISABLE_STEPPERS                = _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È¶¨ÈÅî");     //"Disable steppers"
   PROGMEM Language_Str MSG_DEBUG_MENU                      = _UxGT("Èô§ÈåØÈÅ∏ÂñÆ");     // "Debug Menu"
@@ -48,6 +60,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_AUTO_HOME_X                     = _UxGT("ÂõûXÂéüÈªû");     //"Home X"
   PROGMEM Language_Str MSG_AUTO_HOME_Y                     = _UxGT("ÂõûYÂéüÈªû");     //"Home Y"
   PROGMEM Language_Str MSG_AUTO_HOME_Z                     = _UxGT("ÂõûZÂéüÈªû");     //"Home Z"
+  PROGMEM Language_Str MSG_AUTO_Z_ALIGN                    = _UxGT("Ëá™ÂãïZÂ∞çÈΩä");   //"Auto Z-Align"
   PROGMEM Language_Str MSG_LEVEL_BED_HOMING                = _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏ÂéüÈªû");     //"Homing XYZ"
   PROGMEM Language_Str MSG_LEVEL_BED_WAITING               = _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥");     //"Click to Begin"
   PROGMEM Language_Str MSG_LEVEL_BED_NEXT_POINT            = _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû");     //"Next Point"
@@ -70,7 +83,17 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_PREHEAT_2_ALL                   = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" ÂÖ®ÈÉ®");     //MSG_PREHEAT_2 " All"
   PROGMEM Language_Str MSG_PREHEAT_2_BEDONLY               = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" ÁÜ±Â∫ä");     //MSG_PREHEAT_2 " Bed"
   PROGMEM Language_Str MSG_PREHEAT_2_SETTINGS              = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Ë®≠ÁΩÆ");     //MSG_PREHEAT_2 " conf"
+  PROGMEM Language_Str MSG_PREHEAT_CUSTOM                  = _UxGT("Ëá™ÂÆöÈ†êÁÜ±");   //"Preheat Custom"
   PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("ÈôçÊ∫´");     //"Cooldown"
+  PROGMEM Language_Str MSG_LASER_MENU                      = _UxGT("ÊøÄÂÖâÊéßÂà∂");    //"Laser Control"
+  PROGMEM Language_Str MSG_LASER_OFF                       = _UxGT("ÊøÄÂÖâ Èóú");    //"Laser Off"
+  PROGMEM Language_Str MSG_LASER_ON                        = _UxGT("ÊøÄÂÖâ Èñã");   //"Laser On"
+  PROGMEM Language_Str MSG_LASER_POWER                     = _UxGT("ÊøÄÂÖâÈõªÊ∫ê");    //"Laser Power"
+  PROGMEM Language_Str MSG_SPINDLE_MENU                    = _UxGT("‰∏ªËª∏ÊéßÂëäÂà∂");    //"Spindle Control"
+  PROGMEM Language_Str MSG_SPINDLE_OFF                     = _UxGT("‰∏ªËª∏ Èóú");    //"Spindle Off"
+  PROGMEM Language_Str MSG_SPINDLE_ON                      = _UxGT("‰∏ªËª∏ Èñã");   //"Spindle On"
+  PROGMEM Language_Str MSG_SPINDLE_POWER                   = _UxGT("‰∏ªËª∏ÈõªÊ∫ê");    //"Spindle Power"
+  PROGMEM Language_Str MSG_SPINDLE_REVERSE                 = _UxGT("‰∏ªËª∏ÂèçËΩâ");  //"Spindle Reverse"
   PROGMEM Language_Str MSG_SWITCH_PS_ON                    = _UxGT("ÈõªÊ∫êÊâìÈñã");     //"Switch power on"
   PROGMEM Language_Str MSG_SWITCH_PS_OFF                   = _UxGT("ÈõªÊ∫êÈóúÈñâ");     //"Switch power off"
   PROGMEM Language_Str MSG_EXTRUDE                         = _UxGT("Êì†Âá∫");     //"Extrude"
@@ -79,15 +102,31 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_BED_LEVELING                    = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     //"Bed leveling"
   PROGMEM Language_Str MSG_LEVEL_BED                       = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     //"Level bed"
   PROGMEM Language_Str MSG_LEVEL_CORNERS                   = _UxGT("Ë™øÂπ≥ÈÇäËßí");     // "Level corners"
-
   PROGMEM Language_Str MSG_NEXT_CORNER                     = _UxGT("‰∏ãÂÄãÈÇäËßí");     // "Next corner"
+  PROGMEM Language_Str MSG_MESH_EDITOR                     = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂô®");    //"Mesh Editor"
   PROGMEM Language_Str MSG_EDIT_MESH                       = _UxGT("Á∑®ËºØÁ∂≤Ê†º");     // "Edit Mesh"
   PROGMEM Language_Str MSG_EDITING_STOPPED                 = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂ∑≤ÂÅúÊ≠¢");     // "Mesh Editing Stopped"
-  PROGMEM Language_Str MSG_USER_MENU                       = _UxGT("ÂÆ¢Âà∂ÂëΩ‰ª§");     // "Custom Commands"
-
+  PROGMEM Language_Str MSG_PROBING_MESH                    = _UxGT("Êé¢Ê∏¨Èªû");   //"Probing Point"
+  PROGMEM Language_Str MSG_MESH_X                          = _UxGT("Á¥¢Âºï X");    //"Index X"
+  PROGMEM Language_Str MSG_MESH_Y                          = _UxGT("Á¥¢Âºï Y");    //"Index Y"
+  PROGMEM Language_Str MSG_MESH_EDIT_Z                     = _UxGT("Z ÂÄº");    //"Z Value"
+  PROGMEM Language_Str MSG_USER_MENU                       = _UxGT("Ëá™ÂÆöÂëΩ‰ª§");     // "Custom Commands"
+  PROGMEM Language_Str MSG_M48_TEST                        = _UxGT("M48 Êé¢Ê∏¨Ê∏¨Ë©¶");   //"M48 Probe Test"
+  PROGMEM Language_Str MSG_M48_POINT                       = _UxGT("M48 Êé¢Ê∏¨Èªû");    //"M48 Point"
+  PROGMEM Language_Str MSG_M48_DEVIATION                   = _UxGT("ÂÅèÂ∑Æ");    //"Deviation"
+  PROGMEM Language_Str MSG_IDEX_MENU                       = _UxGT("IDEX Mode");
+  PROGMEM Language_Str MSG_OFFSETS_MENU                    = _UxGT("Tool Offsets");
+  PROGMEM Language_Str MSG_IDEX_MODE_AUTOPARK              = _UxGT("Auto-Park");
+  PROGMEM Language_Str MSG_IDEX_MODE_DUPLICATE             = _UxGT("Duplication");
+  PROGMEM Language_Str MSG_IDEX_MODE_MIRRORED_COPY         = _UxGT("Mirrored Copy");
+  PROGMEM Language_Str MSG_IDEX_MODE_FULL_CTRL             = _UxGT("Full Control");
+  PROGMEM Language_Str MSG_HOTEND_OFFSET_X                 = _UxGT("2nd Nozzle X");
+  PROGMEM Language_Str MSG_HOTEND_OFFSET_Y                 = _UxGT("2nd Nozzle Y");
+  PROGMEM Language_Str MSG_HOTEND_OFFSET_Z                 = _UxGT("2nd Nozzle Z");
   PROGMEM Language_Str MSG_UBL_DOING_G29                   = _UxGT("Âü∑Ë°åG29");     // "Doing G29"
   PROGMEM Language_Str MSG_UBL_TOOLS                       = _UxGT("UBLÂ∑•ÂÖ∑");     // "UBL Tools"
   PROGMEM Language_Str MSG_UBL_LEVEL_BED                   = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"
+  PROGMEM Language_Str MSG_LCD_TILTING_MESH                = _UxGT("ÂÇæÊñúÈªû");  //"Tilting Point"
   PROGMEM Language_Str MSG_UBL_MANUAL_MESH                 = _UxGT("ÊâãÂ∑•Âª∫Á∂≤");     // "Manually Build Mesh"
   PROGMEM Language_Str MSG_UBL_BC_INSERT                   = _UxGT("ÊîæÁΩÆÂ¢äÁâá‰∏¶Ê∏¨Èáè");     // "Place shim & measure"
   PROGMEM Language_Str MSG_UBL_BC_INSERT2                  = _UxGT("Ê∏¨Èáè");     // "Measure"
@@ -95,8 +134,10 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_UBL_MOVING_TO_NEXT              = _UxGT("ÁßªÂãïÂà∞‰∏ã‰∏ÄÂÄã");     // "Moving to next"
   PROGMEM Language_Str MSG_UBL_ACTIVATE_MESH               = _UxGT("ÂïüÂãïUBL");     // "Activate UBL"
   PROGMEM Language_Str MSG_UBL_DEACTIVATE_MESH             = _UxGT("ÈóúÈñâUBL");     // "Deactivate UBL"
-  PROGMEM Language_Str MSG_UBL_SET_TEMP_BED                = _UxGT("Ë®≠ÁΩÆÁÜ±Â∫äÊ∫´Â∫¶");     // "Bed Temp"
-  PROGMEM Language_Str MSG_UBL_SET_TEMP_HOTEND             = _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶");     // "Hotend Temp"
+  PROGMEM Language_Str MSG_UBL_SET_TEMP_BED                = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");     // "Bed Temp"
+  PROGMEM Language_Str MSG_UBL_BED_TEMP_CUSTOM             = _UxGT("ÁΩÆË®≠ÁÜ±Â∫äÊ∫´Â∫¶");    //"Bed Temp")
+  PROGMEM Language_Str MSG_UBL_SET_TEMP_HOTEND             = _UxGT("ÁΩÆË®≠Âô¥Âò¥Ê∫´Â∫¶");     // "Hotend Temp"
+  PROGMEM Language_Str MSG_UBL_HOTEND_TEMP_CUSTOM          = _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶");    //"Hotend Temp"
   PROGMEM Language_Str MSG_UBL_MESH_EDIT                   = _UxGT("Á∂≤Ê†ºÁ∑®ËºØ");     // "Mesh Edit"
   PROGMEM Language_Str MSG_UBL_EDIT_CUSTOM_MESH            = _UxGT("Á∑®ËºØÂÆ¢Êà∂Á∂≤Ê†º");     // "Edit Custom Mesh"
   PROGMEM Language_Str MSG_UBL_FINE_TUNE_MESH              = _UxGT("Á¥∞Ë™øÁ∂≤Ê†º");     // "Fine Tuning Mesh"
@@ -112,6 +153,13 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M1            = _UxGT("ÊâπÂáÜ ") PREHEAT_1_LABEL _UxGT(" Á∂≤Ê†º");     // "Validate PREHEAT_1_LABEL Mesh"
   PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M2            = _UxGT("ÊâπÂáÜ ") PREHEAT_2_LABEL _UxGT(" Á∂≤Ê†º");     // "Validate PREHEAT_2_LABEL Mesh"
   PROGMEM Language_Str MSG_UBL_VALIDATE_CUSTOM_MESH        = _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º");     // "Validate Custom Mesh"
+  PROGMEM Language_Str MSG_G26_HEATING_BED                 = _UxGT("G26 Âä†ÁÜ±ÁÜ±Â∫ä");    //"G26 Heating Bed"
+  PROGMEM Language_Str MSG_G26_HEATING_NOZZLE              = _UxGT("G26 Âä†ÁÜ±Âô¥Âò¥"); //"G26 Heating Nozzle"
+  PROGMEM Language_Str MSG_G26_MANUAL_PRIME                = _UxGT("ÊâãÂãïÂ°´Ë£ù");  //"Manual priming..."
+  PROGMEM Language_Str MSG_G26_FIXED_LENGTH                = _UxGT("Âõ∫ÂÆöË∑ùÈõ¢Â°´Ë£ù");   //"Fixed Length Prime"
+  PROGMEM Language_Str MSG_G26_PRIME_DONE                  = _UxGT("ÂÆåÊàêÂ°´Ë£ù");   //"Done Priming"
+  PROGMEM Language_Str MSG_G26_CANCELED                    = _UxGT("G26Â∑≤ÂèñÊ∂à");   //"G26 Canceled"
+  PROGMEM Language_Str MSG_G26_LEAVING                     = _UxGT("Èõ¢Èñã G26");  //"Leaving G26"
   PROGMEM Language_Str MSG_UBL_CONTINUE_MESH               = _UxGT("ÁπºÁ∫åÁÜ±Â∫äÁ∂≤Ê†º");     // "Continue Bed Mesh"
   PROGMEM Language_Str MSG_UBL_MESH_LEVELING               = _UxGT("Á∂≤Ê†ºË™øÂπ≥");     // "Mesh Leveling"
   PROGMEM Language_Str MSG_UBL_3POINT_MESH_LEVELING        = _UxGT("‰∏âÈªûË™øÂπ≥");     // "3-Point Leveling"
@@ -141,6 +189,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_UBL_NO_STORAGE                  = _UxGT("Ê≤íÊúâÂ≠òÂÑ≤");     // "No storage"
   PROGMEM Language_Str MSG_UBL_SAVE_ERROR                  = _UxGT("ÈåØË™§: UBL‰øùÂ≠ò");     // "Err: UBL Save"
   PROGMEM Language_Str MSG_UBL_RESTORE_ERROR               = _UxGT("ÈåØË™§: UBLÈÇÑÂéü");     // "Err: UBL Restore"
+  PROGMEM Language_Str MSG_UBL_Z_OFFSET                    = _UxGT("Z-ÂÅèÁßª:");   //"Z-Offset: "
   PROGMEM Language_Str MSG_UBL_Z_OFFSET_STOPPED            = _UxGT("ZÂÅèÁßªÂ∑≤ÂÅúÊ≠¢");     // "Z-Offset Stopped"
   PROGMEM Language_Str MSG_UBL_STEP_BY_STEP_MENU           = _UxGT("‰∏ÄÊ≠•Ê≠•UBL");     // "Step-By-Step UBL"
   PROGMEM Language_Str MSG_UBL_1_BUILD_COLD_MESH           = _UxGT("1. ÂâµË®≠ÂÜ∑Á∂≤Ê†º");
@@ -162,7 +211,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_SET_LEDS_INDIGO                 = _UxGT("Èùí");     // "Indigo")
   PROGMEM Language_Str MSG_SET_LEDS_VIOLET                 = _UxGT("Á¥´");     // "Violet")
   PROGMEM Language_Str MSG_SET_LEDS_WHITE                  = _UxGT("ÁôΩ");     // "White")
-  PROGMEM Language_Str MSG_SET_LEDS_DEFAULT                = _UxGT("Áº∫ÁúÅ");     // "Default")
+  PROGMEM Language_Str MSG_SET_LEDS_DEFAULT                = _UxGT("Âæ©Ê≠∏");     // "Default")
   PROGMEM Language_Str MSG_CUSTOM_LEDS                     = _UxGT("ÂÆöÂà∂Ááà");     // "Custom Lights")
   PROGMEM Language_Str MSG_INTENSITY_R                     = _UxGT("Á¥ÖÈ£ΩÂíåÂ∫¶");     // "Red Intensity")
   PROGMEM Language_Str MSG_INTENSITY_G                     = _UxGT("Á∂†È£ΩÂíåÂ∫¶");     // "Green Intensity")
@@ -176,7 +225,8 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_MOVE_Y                          = _UxGT("ÁßªÂãïY");     //"Move Y"
   PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("ÁßªÂãïZ");     //"Move Z"
   PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("Êì†Âá∫Ê©ü");     //"Extruder"
-  PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("Êì†Âá∫Ê©ü *");
+  PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("Êì†Âá∫Ê©ü *");       //"Extruder *"
+  PROGMEM Language_Str MSG_HOTEND_TOO_COLD                 = _UxGT("Âô¥Âò¥Ê∫´Â∫¶‰∏çÂ§†");  //"Hotend too cold"
   PROGMEM Language_Str MSG_MOVE_Z_DIST                     = _UxGT("ÁßªÂãï %s mm");     //"Move 0.025mm"
   PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("ÁßªÂãï 0.1 mm");     //"Move 0.1mm"
   PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("ÁßªÂãï 1 mm");     //"Move 1mm"
@@ -186,10 +236,12 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_NOZZLE                          = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥");     //"Nozzle" Âô¥Âò¥
   PROGMEM Language_Str MSG_NOZZLE_N                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ~");
   PROGMEM Language_Str MSG_BED                             = " " LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä");     //"Bed"
+  PROGMEM Language_Str MSG_CHAMBER                         = _UxGT("Enclosure");
   PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("È¢®ÊâáÈÄüÁéá");     //"Fan speed"
-  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("È¢®ÊâáÈÄüÁéá ~");
+  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("È¢®ÊâáÈÄüÁéá =");
+  PROGMEM Language_Str MSG_STORED_FAN_N                    = _UxGT("Stored Fan =");
   PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá");     // "Extra fan speed"
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá ~");
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá =");
   PROGMEM Language_Str MSG_FLOW                            = _UxGT("Êì†Âá∫ÈÄüÁéá");
   PROGMEM Language_Str MSG_FLOW_N                          = _UxGT("Êì†Âá∫ÈÄüÁéá ~");     //"Flow"
   PROGMEM Language_Str MSG_CONTROL                         = _UxGT("ÊéßÂà∂");     //"Control"
@@ -197,8 +249,20 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_MAX                             = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ§ß");     //" " LCD_STR_THERMOMETER " Max"
   PROGMEM Language_Str MSG_FACTOR                          = " " LCD_STR_THERMOMETER _UxGT(" Á≥ªÊï∏");     //" " LCD_STR_THERMOMETER " Fact"
   PROGMEM Language_Str MSG_AUTOTEMP                        = _UxGT("Ëá™ÂãïÊéßÊ∫´");     //"Autotemp"
-  PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("Èñã");     //"On"
-  PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("Èóú");     //"Off"
+  PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("Èñã ");     //"On"
+  PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("Èóú ");     //"Off"
+  PROGMEM Language_Str MSG_PID_AUTOTUNE                    = _UxGT("PID Autotune");
+  PROGMEM Language_Str MSG_PID_AUTOTUNE_E                  = _UxGT("PID Autotune *");
+  PROGMEM Language_Str MSG_PID_P                           = _UxGT("PID-P");     //"PID-P"
+  PROGMEM Language_Str MSG_PID_P_E                         = _UxGT("PID-P *");
+  PROGMEM Language_Str MSG_PID_I                           = _UxGT("PID-I");     //"PID-I"
+  PROGMEM Language_Str MSG_PID_I_E                         = _UxGT("PID-I *");
+  PROGMEM Language_Str MSG_PID_D                           = _UxGT("PID-D");     //"PID-D"
+  PROGMEM Language_Str MSG_PID_D_E                         = _UxGT("PID-D *");
+  PROGMEM Language_Str MSG_PID_C                           = _UxGT("PID-C");     //"PID-C"
+  PROGMEM Language_Str MSG_PID_C_E                         = _UxGT("PID-C *");
+  PROGMEM Language_Str MSG_PID_F                           = _UxGT("PID-F");    //"PID-F"
+  PROGMEM Language_Str MSG_PID_F_E                         = _UxGT("PID-F *");
   PROGMEM Language_Str MSG_SELECT                          = _UxGT("ÈÅ∏Êìá");     //"Select"
   PROGMEM Language_Str MSG_SELECT_E                        = _UxGT("ÈÅ∏Êìá *");
   PROGMEM Language_Str MSG_ACC                             = _UxGT("Âä†ÈÄüÂ∫¶");     //"Accel" acceleration
@@ -207,6 +271,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_VB_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_B;     //"Vb-jerk"
   PROGMEM Language_Str MSG_VC_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_C;     //"Vc-jerk"
   PROGMEM Language_Str MSG_VE_JERK                         = _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá");     //"Ve-jerk"
+  PROGMEM Language_Str MSG_JUNCTION_DEVIATION              = _UxGT("Junction Dev");
   PROGMEM Language_Str MSG_VELOCITY                        = _UxGT("ÈÄüÂ∫¶");     // "Velocity"
   PROGMEM Language_Str MSG_VMAX_A                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_A;     //"Vmax " max_feedrate_mm_s
   PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_B;
@@ -237,23 +302,45 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_FILAMENT_DIAM_E                 = _UxGT("Áµ≤ÊñôÁõ¥Âæë *");
   PROGMEM Language_Str MSG_FILAMENT_UNLOAD                 = _UxGT("Âç∏Ëºâ mm");     // "Unload mm"
   PROGMEM Language_Str MSG_FILAMENT_LOAD                   = _UxGT("Ë£ÖËºâ mm");     // "Load mm"
+  PROGMEM Language_Str MSG_ADVANCE_K                       = _UxGT("Advance K");
+  PROGMEM Language_Str MSG_ADVANCE_K_E                     = _UxGT("Advance K *");
   PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("LCDÂ∞çÊØîÂ∫¶");     //"LCD contrast"
   PROGMEM Language_Str MSG_STORE_EEPROM                    = _UxGT("‰øùÂ≠òË®≠ÁΩÆ");     //"Store memory"
   PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("ËºâÂÖ•Ë®≠ÁΩÆ");     //"Load memory"
-  PROGMEM Language_Str MSG_RESTORE_DEFAULTS                = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº");     //"Restore Defaults"
+  PROGMEM Language_Str MSG_RESTORE_DEFAULTS                = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº");     //"Restore failsafe"
   PROGMEM Language_Str MSG_INIT_EEPROM                     = _UxGT("ÂàùÂßãÂåñË®≠ÁΩÆ");     // "Initialize EEPROM"
-  PROGMEM Language_Str MSG_REFRESH                         = LCD_STR_REFRESH  _UxGT("Âà∑Êñ∞");     //"Refresh"
+  PROGMEM Language_Str MSG_ERR_EEPROM_CRC                  = _UxGT("ÈåØË™§: EEPROM CRC");    //"Err: EEPROM CRC"
+  PROGMEM Language_Str MSG_ERR_EEPROM_INDEX                = _UxGT("ÈåØË™§: EEPROM Index");    //"Err: EEPROM Index"
+  PROGMEM Language_Str MSG_ERR_EEPROM_VERSION              = _UxGT("ÈåØË™§: EEPROM Version");    //"EEPROM Version"
+  PROGMEM Language_Str MSG_MEDIA_UPDATE                    = _UxGT("Â™íÈ´îÊõ¥Êñ∞");    //"Media Update"
+  PROGMEM Language_Str MSG_RESET_PRINTER                   = _UxGT("ÈáçÁΩÆÊâìÂç∞Ê©ü");    //"Reset Printer
+  PROGMEM Language_Str MSG_REFRESH                         = _UxGT("Âà∑Êñ∞");     //"Refresh"
   PROGMEM Language_Str MSG_INFO_SCREEN                     = _UxGT("Ë≥áË®äÁïåÈù¢");     //"Info screen"
   PROGMEM Language_Str MSG_PREPARE                         = _UxGT("Ê∫ñÂÇô");     //"Prepare"
   PROGMEM Language_Str MSG_TUNE                            = _UxGT("Ë™øÊï¥");     //"Tune"
+  PROGMEM Language_Str MSG_START_PRINT                     = _UxGT("ÈñãÂßãÂàóÂç∞");   //"Start Print"
+  PROGMEM Language_Str MSG_BUTTON_NEXT                     = _UxGT("‰∏ã‰∏ÄÂÄã");   //"Next"
+  PROGMEM Language_Str MSG_BUTTON_INIT                     = _UxGT("ÂàùÂßã  ");   //"Init"
+  PROGMEM Language_Str MSG_BUTTON_STOP                     = _UxGT("ÂÅúÊ≠¢  ");   //"Stop"
+  PROGMEM Language_Str MSG_BUTTON_PRINT                    = _UxGT("ÂàóÂç∞  ");   //"Print"
+  PROGMEM Language_Str MSG_BUTTON_RESET                    = _UxGT("Âæ©Ê≠∏  ");   //"Reset"
+  PROGMEM Language_Str MSG_BUTTON_CANCEL                   = _UxGT("ÊîæÊ£Ñ  ");   //"Cancel"
+  PROGMEM Language_Str MSG_BUTTON_DONE                     = _UxGT("Á¢∫Ë™ç  ");   //"Done"
+  PROGMEM Language_Str MSG_BUTTON_BACK                     = _UxGT("ËøîÂõû  ");   //"Back"
+  PROGMEM Language_Str MSG_BUTTON_PROCEED                  = _UxGT("ÁπºÁ∫å  ");   //"Proceed"
   PROGMEM Language_Str MSG_PAUSE_PRINT                     = _UxGT("Êö´ÂÅúÂàóÂç∞");     //"Pause print"
   PROGMEM Language_Str MSG_RESUME_PRINT                    = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     //"Resume print"
   PROGMEM Language_Str MSG_STOP_PRINT                      = _UxGT("ÂÅúÊ≠¢ÂàóÂç∞");     //"Stop print"
+  PROGMEM Language_Str MSG_PRINTING_OBJECT                 = _UxGT("ÂàóÂç∞Áâ©‰ª∂");   //"Printing Object"
+  PROGMEM Language_Str MSG_CANCEL_OBJECT                   = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂");   //"Cancel Object"
+  PROGMEM Language_Str MSG_CANCEL_OBJECT_N                 = _UxGT("‰∏≠Ê≠¢Áâ©‰ª∂ =");   //"Cancel Object ="
+  PROGMEM Language_Str MSG_OUTAGE_RECOVERY                 = _UxGT("‰∏≠Êñ∑ÊÅ¢Âæ©");   //"Outage Recovery"
   PROGMEM Language_Str MSG_MEDIA_MENU                      = _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞");     //"Print from SD"
   PROGMEM Language_Str MSG_NO_MEDIA                        = _UxGT("ÁÑ°Ë®òÊÜ∂Âç°");     //"No SD card"
   PROGMEM Language_Str MSG_DWELL                           = _UxGT("‰ºëÁú† ...");     //"Sleep..."
   PROGMEM Language_Str MSG_USERWAIT                        = _UxGT("ÈªûÊìäÁπºÁ∫å ...");     //"Click to resume..."
   PROGMEM Language_Str MSG_PRINT_PAUSED                    = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "Print paused"
+  PROGMEM Language_Str MSG_PRINTING                        = _UxGT("ÂàóÂç∞‰∏≠ ...");   //"Printing..."
   PROGMEM Language_Str MSG_PRINT_ABORTED                   = _UxGT("Â∑≤ÂèñÊ∂àÂàóÂç∞");     //"Print aborted"
   PROGMEM Language_Str MSG_NO_MOVE                         = _UxGT("ÁÑ°ÁßªÂãï");     //"No move."
   PROGMEM Language_Str MSG_KILLED                          = _UxGT("Â∑≤Á†çÊéâ");     //"KILLED. "
@@ -267,6 +354,13 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s");     //"UnRet V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
   PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAPF   = _UxGT("S UnRet V");     // "S UnRet V"
   PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("Ëá™ÂãïÂõûÁ∏Æ");     //"AutoRetr." autoretract_enabled,
+  PROGMEM Language_Str MSG_FILAMENT_SWAP_LENGTH            = _UxGT("‰∫§ÊèõÈï∑Â∫¶");    //"Swap Length"
+  PROGMEM Language_Str MSG_FILAMENT_PURGE_LENGTH           = _UxGT("Ê∏ÖÈô§Èï∑Â∫¶");   //"Purge Length"
+  PROGMEM Language_Str MSG_TOOL_CHANGE                     = _UxGT("‰∫§ÊèõÂ∑•ÂÖ∑"); //"Tool Change"
+  PROGMEM Language_Str MSG_TOOL_CHANGE_ZLIFT               = _UxGT("ZËª∏ÊèêÊòá");    //"Z Raise"
+  PROGMEM Language_Str MSG_SINGLENOZZLE_PRIME_SPD          = _UxGT("ÊúÄÈ´òÈÄüÂ∫¶");    //"Prime Speed"
+  PROGMEM Language_Str MSG_SINGLENOZZLE_RETRACT_SPD        = _UxGT("Êî∂ÂõûÈÄüÂ∫¶");  //"Retract Speed"
+  PROGMEM Language_Str MSG_NOZZLE_STANDBY                  = _UxGT("Âô¥Âò¥ÂæÖÊ©ü"); //"Nozzle Standby"
   PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Êõ¥ÊèõÁµ≤Êñô");     //"Change filament"
   PROGMEM Language_Str MSG_FILAMENTCHANGE_E                = _UxGT("Êõ¥ÊèõÁµ≤Êñô *");
   PROGMEM Language_Str MSG_FILAMENTLOAD                    = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "Load filament"
@@ -274,28 +368,55 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_FILAMENTUNLOAD                  = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "Unload filament"
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_E                = _UxGT("Âç∏ËºâÁµ≤Êñô *");     // "Unload filament"
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("Âç∏ËºâÂÖ®ÈÉ®");     // "Unload All"
-  PROGMEM Language_Str MSG_ATTACH_MEDIA                    = _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°");     //"Init. SD card"
+  PROGMEM Language_Str MSG_INIT_MEDIA                      = _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°");     //"Init. SD card"
+  PROGMEM Language_Str MSG_ATTACH_MEDIA                    = _UxGT("ÈÄ£Êé•Ë®òÊÜ∂Âç°");     //"Attach Media
   PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°");     //"Change SD card"
+  PROGMEM Language_Str MSG_RELEASE_MEDIA                   = _UxGT("ÈáãÊîæÂ™íÈ´î");   //"Release Media"
   PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ");     //"Z probe out. bed" Z probe is not within the physical limits
   PROGMEM Language_Str MSG_SKEW_FACTOR                     = _UxGT("ÂÅèÊñúÂõ†Êï∏");     // "Skew Factor"
   PROGMEM Language_Str MSG_BLTOUCH                         = _UxGT("BLTouch");     // "BLTouch"
   PROGMEM Language_Str MSG_BLTOUCH_SELFTEST                = _UxGT("BLTouch Ëá™Ê™¢");     // "BLTouch Self-Test"
   PROGMEM Language_Str MSG_BLTOUCH_RESET                   = _UxGT("ÈáçÁΩÆBLTouch");     // "Reset BLTouch"
-  PROGMEM Language_Str MSG_BLTOUCH_DEPLOY                  = _UxGT("ÈÉ®ÁΩ≤BLTouch");     // "Deploy BLTouch"
   PROGMEM Language_Str MSG_BLTOUCH_STOW                    = _UxGT("Ë£ùËºâBLTouch");     // "Stow BLTouch"
+  PROGMEM Language_Str MSG_BLTOUCH_DEPLOY                  = _UxGT("ÈÉ®ÁΩ≤BLTouch");     // "Deploy BLTouch"
+  PROGMEM Language_Str MSG_BLTOUCH_SW_MODE                 = _UxGT("Cmd: SW-Mode");
+  PROGMEM Language_Str MSG_BLTOUCH_5V_MODE                 = _UxGT("Cmd: 5V-Mode");
+  PROGMEM Language_Str MSG_BLTOUCH_OD_MODE                 = _UxGT("Cmd: OD-Mode");
+  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE              = _UxGT("Cmd: Mode-Store");
+  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE_5V           = _UxGT("Set BLTouch to 5V");
+  PROGMEM Language_Str MSG_BLTOUCH_MODE_STORE_OD           = _UxGT("Set BLTouch to OD");
+  PROGMEM Language_Str MSG_BLTOUCH_MODE_ECHO               = _UxGT("Report Drain");
+  PROGMEM Language_Str MSG_BLTOUCH_MODE_CHANGE             = _UxGT("DANGER: Bad settings can cause damage! Proceed anyway?");
+  PROGMEM Language_Str MSG_TOUCHMI_PROBE                   = _UxGT("TouchMI");
+  PROGMEM Language_Str MSG_TOUCHMI_INIT                    = _UxGT("Init TouchMI");
+  PROGMEM Language_Str MSG_TOUCHMI_ZTEST                   = _UxGT("Z Offset Test");
+  PROGMEM Language_Str MSG_TOUCHMI_SAVE                    = _UxGT("Save");
+  PROGMEM Language_Str MSG_MANUAL_DEPLOY_TOUCHMI           = _UxGT("Deploy TouchMI");
+  PROGMEM Language_Str MSG_MANUAL_DEPLOY                   = _UxGT("Deploy Z-Probe");
+  PROGMEM Language_Str MSG_MANUAL_STOW                     = _UxGT("Stow Z-Probe");
   PROGMEM Language_Str MSG_HOME_FIRST                      = _UxGT("Ê≠∏‰Ωç %s%s%s ÂÖà");     //"Home ... first"
-  PROGMEM Language_Str MSG_ZPROBE_ZOFFSET                  = _UxGT("ZÂÅèÁßª");     //"Z Offset"
+  PROGMEM Language_Str MSG_ZPROBE_OFFSETS                  = _UxGT("Êé¢ÈáùÂÅèÁßª");   //Probe Offsets
+  PROGMEM Language_Str MSG_ZPROBE_XOFFSET                  = _UxGT("Êé¢ÈáùXÂÅèÁßªÈáè");   //Probe X Offset
+  PROGMEM Language_Str MSG_ZPROBE_YOFFSET                  = _UxGT("Êé¢ÈáùYÂÅèÁßªÈáè");   //Probe Y Offset
+  PROGMEM Language_Str MSG_ZPROBE_ZOFFSET                  = _UxGT("Êé¢ÈáùZÂÅèÁßªÈáè");   //Probe Z Offset
   PROGMEM Language_Str MSG_BABYSTEP_X                      = _UxGT("ÂæÆÈáèË™øÊï¥XËª∏");     //"Babystep X" lcd_babystep_x, Babystepping enables the user to control the axis in tiny amounts
   PROGMEM Language_Str MSG_BABYSTEP_Y                      = _UxGT("ÂæÆÈáèË™øÊï¥YËª∏");     //"Babystep Y"
   PROGMEM Language_Str MSG_BABYSTEP_Z                      = _UxGT("ÂæÆÈáèË™øÊï¥ZËª∏");     //"Babystep Z"
+  PROGMEM Language_Str MSG_BABYSTEP_TOTAL                  = _UxGT("Á∏ΩË®à");    //"Total"
   PROGMEM Language_Str MSG_ENDSTOP_ABORT                   = _UxGT("ÊìãÂ°äÁµÇÊ≠¢");     //"Endstop abort"
   PROGMEM Language_Str MSG_HEATING_FAILED_LCD              = _UxGT("Âä†ÁÜ±Â§±Êïó");     //"Heating failed"
-  PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("ÈåØË™§ÔºöREDUNDANT TEMP");     //"Err: REDUNDANT TEMP"
-  PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("Ê∫´ÊéßÂ§±Êéß");     //"THERMAL RUNAWAY"
+  PROGMEM Language_Str MSG_HEATING_FAILED_LCD_BED          = _UxGT("ÁÜ±Â∫äÂä†ÁÜ±Â§±Êïó");   //"Bed Heating Failed"
+  PROGMEM Language_Str MSG_HEATING_FAILED_LCD_CHAMBER      = _UxGT("Ê©üÁÆ±Âä†ÁÜ±Â§±Êïó");   //"Chamber Heating Fail"
+  PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("ÈåØË™§ÔºöÂÜóÈ§òÊ∫´Â∫¶");     //"Err: REDUNDANT TEMP"
+  PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("Ê∫´Â∫¶Â§±Êéß");    //"THERMAL RUNAWAY"
+  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_BED             = _UxGT("ÁÜ±Â∫äÊ∫´Â∫¶Â§±Êéß");    //"BED THERMAL RUNAWAY"
+  PROGMEM Language_Str MSG_THERMAL_RUNAWAY_CHAMBER         = _UxGT("Ê©üÁÆ±Ê∫´Â∫¶Â§±Êéß");   //"CHAMBER T. RUNAWAY"
   PROGMEM Language_Str MSG_ERR_MAXTEMP                     = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ∫´Â∫¶");     //"Err: MAXTEMP"
   PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶");     //"Err: MINTEMP"
   PROGMEM Language_Str MSG_ERR_MAXTEMP_BED                 = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÁÜ±Â∫äÊ∫´Â∫¶");     //"Err: MAXTEMP BED"
   PROGMEM Language_Str MSG_ERR_MINTEMP_BED                 = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÁÜ±Â∫äÊ∫´Â∫¶");     //"Err: MINTEMP BED"
+  PROGMEM Language_Str MSG_ERR_MAXTEMP_CHAMBER             = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ©üÁÆ±Ê∫´Â∫¶");   //"Err: MAXTEMP CHAMBER"
+  PROGMEM Language_Str MSG_ERR_MINTEMP_CHAMBER             = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ©üÁÆ±Ê∫´Â∫¶");   //"Err: MINTEMP CHAMBER"
   PROGMEM Language_Str MSG_ERR_Z_HOMING                    = _UxGT("Ê≠∏‰Ωç XY ÂÖà");     //"Home XY First"
   PROGMEM Language_Str MSG_HALTED                          = _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü");     //"PRINTER HALTED"
   PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Ë´ãÈáçÁΩÆ");     //"Please reset"
@@ -303,7 +424,11 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_SHORT_HOUR                      = _UxGT("ÊôÇ");     //"h" // One character only
   PROGMEM Language_Str MSG_SHORT_MINUTE                    = _UxGT("ÂàÜ");     //"m" // One character only
   PROGMEM Language_Str MSG_HEATING                         = _UxGT("Âä†ÁÜ±‰∏≠ ...");     //"Heating..."
+  PROGMEM Language_Str MSG_COOLING                         = _UxGT("ÂÜ∑Âçª‰∏≠ ...");   //"Cooling..."
   PROGMEM Language_Str MSG_BED_HEATING                     = _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠ ...");     //"Bed Heating..."
+  PROGMEM Language_Str MSG_BED_COOLING                     = _UxGT("ÁÜ±Â∫äÂÜ∑Âçª‰∏≠ ...");   //"Bed Cooling..."
+  PROGMEM Language_Str MSG_CHAMBER_HEATING                 = _UxGT("Ê©üÁÆ±Âä†ÁÜ±‰∏≠ ..");   //"Chamber Heating..."
+  PROGMEM Language_Str MSG_CHAMBER_COOLING                 = _UxGT("Ê©üÁÆ±ÂÜ∑Âçª‰∏≠ ...");   //Chamber Cooling...
   PROGMEM Language_Str MSG_DELTA_CALIBRATE                 = _UxGT("‚äøÊ†°Ê∫ñ");     //"Delta Calibration"
   PROGMEM Language_Str MSG_DELTA_CALIBRATE_X               = _UxGT("‚äøÊ†°Ê∫ñX");     //"Calibrate X"
   PROGMEM Language_Str MSG_DELTA_CALIBRATE_Y               = _UxGT("‚äøÊ†°Ê∫ñY");     //"Calibrate Y"
@@ -312,6 +437,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_DELTA_SETTINGS                  = _UxGT("‚äøË®≠ÁΩÆ");     // "Delta Settings"
   PROGMEM Language_Str MSG_DELTA_AUTO_CALIBRATE            = _UxGT("‚äøËá™ÂãïÊ†°Ê∫ñ");     // "Auto Calibration"
   PROGMEM Language_Str MSG_DELTA_HEIGHT_CALIBRATE          = _UxGT("Ë®≠ÁΩÆ‚äøÈ´òÂ∫¶");     // "Set Delta Height"
+  PROGMEM Language_Str MSG_DELTA_Z_OFFSET_CALIBRATE        = _UxGT("ZÂÅèÁßª");
   PROGMEM Language_Str MSG_DELTA_DIAG_ROD                  = _UxGT("‚äøÊñúÊü±");     // "Diag Rod"
   PROGMEM Language_Str MSG_DELTA_HEIGHT                    = _UxGT("‚äøÈ´òÂ∫¶");     // "Height"
   PROGMEM Language_Str MSG_DELTA_RADIUS                    = _UxGT("‚äøÂçäÂæë");     // "Radius"
@@ -319,18 +445,20 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_INFO_PRINTER_MENU               = _UxGT("Âç∞Ë°®Ê©üË®äÊÅØ");     //"Printer Info"
   PROGMEM Language_Str MSG_3POINT_LEVELING                 = _UxGT("‰∏âÈªûË™øÂπ≥");     // "3-Point Leveling"
   PROGMEM Language_Str MSG_LINEAR_LEVELING                 = _UxGT("Á∑öÊÄßË™øÂπ≥");     // "Linear Leveling"
-  PROGMEM Language_Str MSG_BILINEAR_LEVELING               = _UxGT("ÈõôÁ∑öÊÄßË™øÂπ≥");     // "Bilinear Leveling"
+  PROGMEM Language_Str MSG_BILINEAR_LEVELING               = _UxGT("      ÈõôÁ∑öÊÄßË™øÂπ≥");     // "Bilinear Leveling"
   PROGMEM Language_Str MSG_UBL_LEVELING                    = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"
   PROGMEM Language_Str MSG_MESH_LEVELING                   = _UxGT("Á∂≤Ê†ºË™øÂπ≥");     // "Mesh Leveling"
   PROGMEM Language_Str MSG_INFO_STATS_MENU                 = _UxGT("Âç∞Ë°®Ê©üÁµ±Ë®à");     //"Printer Stats"
   PROGMEM Language_Str MSG_INFO_BOARD_MENU                 = _UxGT("‰∏ªÊùøË®äÊÅØ");     //"Board Info"
   PROGMEM Language_Str MSG_INFO_THERMISTOR_MENU            = _UxGT("Ê∫´Â∫¶Ë®à");     //"Thermistors"
-  PROGMEM Language_Str MSG_INFO_EXTRUDERS                  = _UxGT("Êì†Âá∫Ê©ü");     //"Extruders"
+  PROGMEM Language_Str MSG_INFO_EXTRUDERS                  = _UxGT("      Êì†Âá∫Ê©ü");     //"Extruders"
   PROGMEM Language_Str MSG_INFO_BAUDRATE                   = _UxGT("ÂÇ≥Ëº∏Áéá");     //"Baud"
   PROGMEM Language_Str MSG_INFO_PROTOCOL                   = _UxGT("ÂçîË≠∞");     //"Protocol"
+  PROGMEM Language_Str MSG_INFO_RUNAWAY_OFF                = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èóú");   //"Runaway Watch: OFF"
+  PROGMEM Language_Str MSG_INFO_RUNAWAY_ON                 = _UxGT("Áõ£Ê∏¨Ê∫´Â∫¶Â§±Êéß:Èñã");    //"Runaway Watch: ON"
+
   PROGMEM Language_Str MSG_CASE_LIGHT                      = _UxGT("Â§ñÊÆºÁáà");     // "Case light"
   PROGMEM Language_Str MSG_CASE_LIGHT_BRIGHTNESS           = _UxGT("Ááà‰∫ÆÂ∫¶");     // "Light BRIGHTNESS"
-
   PROGMEM Language_Str MSG_EXPECTED_PRINTER                = _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫");     // "The printer is incorrect"
 
   #if LCD_WIDTH >= 20
@@ -351,11 +479,14 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("ÊúÄÈ´òÊ∫´Â∫¶");     //"Max Temp"
   PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("ÈõªÊ∫ê‰æõÊáâ");     //"Power Supply"
   PROGMEM Language_Str MSG_DRIVE_STRENGTH                  = _UxGT("È©ÖÂãïÂäõÂ∫¶");     // "Drive Strength"
-  PROGMEM Language_Str MSG_DAC_PERCENT_X                   = _UxGT("X È©ÖÂãï %");     // "X Driver %"
-  PROGMEM Language_Str MSG_DAC_PERCENT_Y                   = _UxGT("Y È©ÖÂãï %");     // "Y Driver %"
-  PROGMEM Language_Str MSG_DAC_PERCENT_Z                   = _UxGT("Z È©ÖÂãï %");     // "Z Driver %"
-  PROGMEM Language_Str MSG_DAC_PERCENT_E                   = _UxGT("E È©ÖÂãï %");     // "E Driver %"
+  PROGMEM Language_Str MSG_DAC_PERCENT                     = _UxGT("È©ÖÂãï %");     // "Driver %"
+  PROGMEM Language_Str MSG_DAC_PERCENT_X                   = _UxGT("X È©ÖÂãï %");    //X Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_Y                   = _UxGT("Y È©ÖÂãï %");    //Y Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_Z                   = _UxGT("Z È©ÖÂãï %");    //Z Driver %
+  PROGMEM Language_Str MSG_DAC_PERCENT_E                   = _UxGT("E È©ÖÂãï %");    //E Driver %
+  PROGMEM Language_Str MSG_ERROR_TMC                       = _UxGT("TMCÈÄ£Êé•ÈåØË™§");   //"TMC CONNECTION ERROR"
   PROGMEM Language_Str MSG_DAC_EEPROM_WRITE                = _UxGT("‰øùÂ≠òÈ©ÖÂãïË®≠ÁΩÆ");     // "DAC EEPROM Write"
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER          = _UxGT("Êõ¥ÊèõÁµ≤Êñô");   //"FILAMENT CHANGE"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_PAUSE    = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "PRINT PAUSED"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_LOAD     = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "LOAD FILAMENT"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_UNLOAD   = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "UNLOAD FILAMENT"
@@ -363,26 +494,112 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_PURGE    = _UxGT("Ê∏ÖÈô§Êõ¥Â§ö");     // "Purge more"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_RESUME   = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     //"Resume print"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_NOZZLE          = _UxGT("  Âô¥Âò¥: ");     // "  Nozzle: "
+  PROGMEM Language_Str MSG_RUNOUT_SENSOR                   = _UxGT("Êñ∑Áµ≤ÂÅµÊ∏¨");    //"Runout Sensor"
+  PROGMEM Language_Str MSG_RUNOUT_DISTANCE_MM              = _UxGT("Áµ≤Ë∑ùÈõ¢mm");   //"Runout Dist mm"
   PROGMEM Language_Str MSG_LCD_HOMING_FAILED               = _UxGT("Ê≠∏Âéü‰ΩçÂ§±Êïó");     // "Homing failed"
   PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó");     // "Probing failed"
   PROGMEM Language_Str MSG_M600_TOO_COLD                   = _UxGT("M600: Â§™ÂÜ∑");     // "M600: Too cold"
 
+  PROGMEM Language_Str MSG_MMU2_CHOOSE_FILAMENT_HEADER     = _UxGT("CHOOSE FILAMENT");
+  PROGMEM Language_Str MSG_MMU2_MENU                       = _UxGT("MMU");
+  PROGMEM Language_Str MSG_MMU2_WRONG_FIRMWARE             = _UxGT("Update MMU Firmware!");
+  PROGMEM Language_Str MSG_MMU2_NOT_RESPONDING             = _UxGT("MMU Needs Attention.");
+  PROGMEM Language_Str MSG_MMU2_RESUME                     = _UxGT("Resume Print");
+  PROGMEM Language_Str MSG_MMU2_RESUMING                   = _UxGT("Resuming...");
+  PROGMEM Language_Str MSG_MMU2_LOAD_FILAMENT              = _UxGT("Load Filament");
+  PROGMEM Language_Str MSG_MMU2_LOAD_ALL                   = _UxGT("Load All");
+  PROGMEM Language_Str MSG_MMU2_LOAD_TO_NOZZLE             = _UxGT("Load to Nozzle");
+  PROGMEM Language_Str MSG_MMU2_EJECT_FILAMENT             = _UxGT("Eject Filament");
+  PROGMEM Language_Str MSG_MMU2_EJECT_FILAMENT_N           = _UxGT("Eject Filament ~");
+  PROGMEM Language_Str MSG_MMU2_UNLOAD_FILAMENT            = _UxGT("Unload Filament");
+  PROGMEM Language_Str MSG_MMU2_LOADING_FILAMENT           = _UxGT("Loading Fil. %i...");
+  PROGMEM Language_Str MSG_MMU2_EJECTING_FILAMENT          = _UxGT("Ejecting Fil. ...");
+  PROGMEM Language_Str MSG_MMU2_UNLOADING_FILAMENT         = _UxGT("Unloading Fil....");
+  PROGMEM Language_Str MSG_MMU2_ALL                        = _UxGT("All");
+  PROGMEM Language_Str MSG_MMU2_FILAMENT_N                 = _UxGT("Filament ~");
+  PROGMEM Language_Str MSG_MMU2_RESET                      = _UxGT("Reset MMU");
+  PROGMEM Language_Str MSG_MMU2_RESETTING                  = _UxGT("Resetting MMU...");
+  PROGMEM Language_Str MSG_MMU2_EJECT_RECOVER              = _UxGT("Remove, click");
+
+  PROGMEM Language_Str MSG_MIX                             = _UxGT("Mix");
+  PROGMEM Language_Str MSG_MIX_COMPONENT_N                 = _UxGT("Component =");
+  PROGMEM Language_Str MSG_MIXER                           = _UxGT("Mixer");
+  PROGMEM Language_Str MSG_GRADIENT                        = _UxGT("Gradient");
+  PROGMEM Language_Str MSG_FULL_GRADIENT                   = _UxGT("Full Gradient");
+  PROGMEM Language_Str MSG_TOGGLE_MIX                      = _UxGT("Toggle Mix");
+  PROGMEM Language_Str MSG_CYCLE_MIX                       = _UxGT("Cycle Mix");
+  PROGMEM Language_Str MSG_GRADIENT_MIX                    = _UxGT("Gradient Mix");
+  PROGMEM Language_Str MSG_REVERSE_GRADIENT                = _UxGT("Reverse Gradient");
+  PROGMEM Language_Str MSG_ACTIVE_VTOOL                    = _UxGT("Active V-tool");
+  PROGMEM Language_Str MSG_START_VTOOL                     = _UxGT("Start V-tool");
+  PROGMEM Language_Str MSG_END_VTOOL                       = _UxGT("  End V-tool");
+  PROGMEM Language_Str MSG_GRADIENT_ALIAS                  = _UxGT("Alias V-tool");
+  PROGMEM Language_Str MSG_RESET_VTOOLS                    = _UxGT("Reset V-tools");
+  PROGMEM Language_Str MSG_COMMIT_VTOOL                    = _UxGT("Commit V-tool Mix");
+  PROGMEM Language_Str MSG_VTOOLS_RESET                    = _UxGT("V-tools Were Reset");
+  PROGMEM Language_Str MSG_START_Z                         = _UxGT("Start Z:");
+  PROGMEM Language_Str MSG_END_Z                           = _UxGT("  End Z:");
+
+  PROGMEM Language_Str MSG_GAMES                           = _UxGT("Games");
+  PROGMEM Language_Str MSG_BRICKOUT                        = _UxGT("Brickout");
+  PROGMEM Language_Str MSG_INVADERS                        = _UxGT("Invaders");
+  PROGMEM Language_Str MSG_SNAKE                           = _UxGT("Sn4k3");
+  PROGMEM Language_Str MSG_MAZE                            = _UxGT("Maze");
+
+  #define MSG_1_LINE(A)     A "\0"   "\0"
+  #define MSG_2_LINE(A,B)   A "\0" B "\0"
+  #define MSG_3_LINE(A,B,C) A "\0" B "\0" C
+
+  //
+  // Filament Change screens show up to 3 lines on a 4-line display
+  //                        ...or up to 2 lines on a 3-line display
+  //
   #if LCD_HEIGHT >= 4
+    PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "ÊÅ¢Âæ©ÂàóÂç∞")); //"Press Button to resume print"
+    PROGMEM Language_Str MSG_PAUSE_PRINT_INIT              = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));   //"Parking..."
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_3_LINE("Á≠âÂæÖÈñãÂßã", "Áµ≤Êñô", "ËÆäÊõ¥"));     //"Wait for start of the filament change"
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Âç∏‰∏ãÁµ≤Êñô"));     //"Wait for filament unload"
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_3_LINE("ÊèíÂÖ•Áµ≤Êñô", "‰∏¶ÊåâÈçµ", "ÁπºÁ∫å ..."));     //"Insert filament and press button to continue..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï‰æÜ", "Âä†ÁÜ±Âô¥Âò¥."));     // "Press button to heat nozzle."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï", "Âä†ÁÜ±Âô¥Âò¥."));     // "Press button to heat nozzle."
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_2_LINE("Âä†ÁÜ±Âô¥Âò¥", "Ë´ãÁ≠âÂæÖ ..."));     // "Heating nozzle Please wait..."
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "ÈÄ≤Êñô"));     //"Wait for filament load"
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Áµ≤ÊñôÊ∏ÖÈô§"));     // "Wait for filament purge"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE    = _UxGT(MSG_2_LINE("Êåâ‰∏ãÂÆåÊàê","Áµ≤ÊñôÊ∏ÖÈô§")); //"Press button to filament purge"
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_2_LINE("Á≠âÂæÖÂàóÂç∞", "ÊÅ¢Âæ©"));     //"Wait for print to resume"
   #else // LCD_HEIGHT < 4
+    PROGMEM Language_Str MSG_ADVANCED_PAUSE_WAITING        = _UxGT(MSG_1_LINE("Êåâ‰∏ãÁπºÁ∫å.."));   //"Click to continue"
+    PROGMEM Language_Str MSG_PAUSE_PRINT_INIT              = _UxGT(MSG_1_LINE("ÂÅúËªä‰∏≠ ..."));     //"Parking..."
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_1_LINE("Ë´ãÁ≠âÂæÖ ..."));     //"Please wait..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_1_LINE("ÈÄÄÂá∫‰∏≠ ..."));     //"Ejecting..."
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_1_LINE("ÊèíÂÖ•‰∏¶ÈªûÊìä"));     //"Insert and Click"
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_1_LINE("Âä†ÁÜ±‰∏≠ ..."));     // "Heating..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂä†ÁÜ±.."));     //"Click to heat"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_1_LINE("Âä†ÁÜ±‰∏≠ ..."));     //"Heating..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_1_LINE("ÈÄÄÂá∫‰∏≠ ..."));     //"Ejecting..."
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_1_LINE("ËºâÂÖ•‰∏≠ ..."));     //"Loading..."
-    PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_1_LINE("Ê∏ÖÈô§‰∏≠ ..."));     // "Purging..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_1_LINE("Ê∏ÖÈô§‰∏≠ ..."));     //"Purging..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_CONT_PURGE    = _UxGT(MSG_1_LINE("Êåâ‰∏ãÂÆåÊàê.."));     //"Click to finish"
     PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_1_LINE("ÊÅ¢Âæ©‰∏≠ ..."));     //"Resuming..."
   #endif // LCD_HEIGHT < 4
+
+  PROGMEM Language_Str MSG_TMC_DRIVERS                     = _UxGT("TMC Drivers");
+  PROGMEM Language_Str MSG_TMC_CURRENT                     = _UxGT("Driver Current");
+  PROGMEM Language_Str MSG_TMC_HYBRID_THRS                 = _UxGT("Hybrid Threshold");
+  PROGMEM Language_Str MSG_TMC_HOMING_THRS                 = _UxGT("Sensorless Homing");
+  PROGMEM Language_Str MSG_TMC_STEPPING_MODE               = _UxGT("Stepping Mode");
+  PROGMEM Language_Str MSG_TMC_STEALTH_ENABLED             = _UxGT("StealthChop Enabled");
+  PROGMEM Language_Str MSG_SERVICE_RESET                   = _UxGT("Reset");
+  PROGMEM Language_Str MSG_SERVICE_IN                      = _UxGT(" in:");
+  PROGMEM Language_Str MSG_BACKLASH                        = _UxGT("Backlash");
+  PROGMEM Language_Str MSG_BACKLASH_A                      = LCD_STR_A;
+  PROGMEM Language_Str MSG_BACKLASH_B                      = LCD_STR_B;
+  PROGMEM Language_Str MSG_BACKLASH_C                      = LCD_STR_C;
+  PROGMEM Language_Str MSG_BACKLASH_CORRECTION             = _UxGT("Correction");
+  PROGMEM Language_Str MSG_BACKLASH_SMOOTHING              = _UxGT("Smoothing");
 }
+
+#if FAN_COUNT == 1
+  #define MSG_FIRST_FAN_SPEED       MSG_FAN_SPEED
+  #define MSG_FIRST_EXTRA_FAN_SPEED MSG_EXTRA_FAN_SPEED
+#else
+  #define MSG_FIRST_FAN_SPEED       MSG_FAN_SPEED_N
+  #define MSG_FIRST_EXTRA_FAN_SPEED MSG_EXTRA_FAN_SPEED_N
+#endif

commit 6b9a17be16448459cdbf3447598094fae455e39a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Feb 26 02:02:20 2020 -0600

    Language: "failsafe" => "Defaults"

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 77a6c04d9a..d0871f0e46 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -240,7 +240,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("LCDÂ∞çÊØîÂ∫¶");     //"LCD contrast"
   PROGMEM Language_Str MSG_STORE_EEPROM                    = _UxGT("‰øùÂ≠òË®≠ÁΩÆ");     //"Store memory"
   PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("ËºâÂÖ•Ë®≠ÁΩÆ");     //"Load memory"
-  PROGMEM Language_Str MSG_RESTORE_FAILSAFE                = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº");     //"Restore failsafe"
+  PROGMEM Language_Str MSG_RESTORE_DEFAULTS                = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº");     //"Restore Defaults"
   PROGMEM Language_Str MSG_INIT_EEPROM                     = _UxGT("ÂàùÂßãÂåñË®≠ÁΩÆ");     // "Initialize EEPROM"
   PROGMEM Language_Str MSG_REFRESH                         = LCD_STR_REFRESH  _UxGT("Âà∑Êñ∞");     //"Refresh"
   PROGMEM Language_Str MSG_INFO_SCREEN                     = _UxGT("Ë≥áË®äÁïåÈù¢");     //"Info screen"

commit 8ba5ef8cae5f7323688749e699606dcc14182c3e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 24 05:33:16 2020 -0600

    "Init. Media" => "Attach Media"

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index f3cc322a92..77a6c04d9a 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -274,7 +274,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_FILAMENTUNLOAD                  = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "Unload filament"
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_E                = _UxGT("Âç∏ËºâÁµ≤Êñô *");     // "Unload filament"
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("Âç∏ËºâÂÖ®ÈÉ®");     // "Unload All"
-  PROGMEM Language_Str MSG_INIT_MEDIA                      = _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°");     //"Init. SD card"
+  PROGMEM Language_Str MSG_ATTACH_MEDIA                    = _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°");     //"Init. SD card"
   PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°");     //"Change SD card"
   PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ");     //"Z probe out. bed" Z probe is not within the physical limits
   PROGMEM Language_Str MSG_SKEW_FACTOR                     = _UxGT("ÂÅèÊñúÂõ†Êï∏");     // "Skew Factor"

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index f260836916..f3cc322a92 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit bbfbcb8a5d938df2f2da0baca128046a0eb4792d
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Jan 26 03:20:02 2020 -0600

    Clean up PID language defines

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 92343b3efa..f260836916 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -199,14 +199,6 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_AUTOTEMP                        = _UxGT("Ëá™ÂãïÊéßÊ∫´");     //"Autotemp"
   PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("Èñã");     //"On"
   PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("Èóú");     //"Off"
-  PROGMEM Language_Str MSG_PID_P                           = _UxGT("PID-P");     //"PID-P"
-  PROGMEM Language_Str MSG_PID_P_E                         = _UxGT("PID-P *");
-  PROGMEM Language_Str MSG_PID_I                           = _UxGT("PID-I");     //"PID-I"
-  PROGMEM Language_Str MSG_PID_I_E                         = _UxGT("PID-I *");
-  PROGMEM Language_Str MSG_PID_D                           = _UxGT("PID-D");     //"PID-D"
-  PROGMEM Language_Str MSG_PID_D_E                         = _UxGT("PID-D *");
-  PROGMEM Language_Str MSG_PID_C                           = _UxGT("PID-C");     //"PID-C"
-  PROGMEM Language_Str MSG_PID_C_E                         = _UxGT("PID-C *");
   PROGMEM Language_Str MSG_SELECT                          = _UxGT("ÈÅ∏Êìá");     //"Select"
   PROGMEM Language_Str MSG_SELECT_E                        = _UxGT("ÈÅ∏Êìá *");
   PROGMEM Language_Str MSG_ACC                             = _UxGT("Âä†ÈÄüÂ∫¶");     //"Accel" acceleration

commit 248b7dfa591a34a8aa1c6960944e1a3a468ad1de
Author: yangwenxiong <46896566+yangwenxiong@users.noreply.github.com>
Date:   Sat Jan 25 16:13:39 2020 +0800

    BigTreeTech GTR V1.0 / Support 8 extruders, heaters, temp sensors, fans (#16595)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 7d38694911..92343b3efa 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -187,9 +187,9 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_NOZZLE_N                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ~");
   PROGMEM Language_Str MSG_BED                             = " " LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä");     //"Bed"
   PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("È¢®ÊâáÈÄüÁéá");     //"Fan speed"
-  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("È¢®ÊâáÈÄüÁéá =");
+  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("È¢®ÊâáÈÄüÁéá ~");
   PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá");     // "Extra fan speed"
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá =");
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá ~");
   PROGMEM Language_Str MSG_FLOW                            = _UxGT("Êì†Âá∫ÈÄüÁéá");
   PROGMEM Language_Str MSG_FLOW_N                          = _UxGT("Êì†Âá∫ÈÄüÁéá ~");     //"Flow"
   PROGMEM Language_Str MSG_CONTROL                         = _UxGT("ÊéßÂà∂");     //"Control"

commit aa4db785f257942ed9869486288d6612c41421a6
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Jan 3 19:46:05 2020 -0600

    MSG_WATCH => MSG_INFO_SCREEN

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 58c7dc705b..7d38694911 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -251,7 +251,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_RESTORE_FAILSAFE                = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº");     //"Restore failsafe"
   PROGMEM Language_Str MSG_INIT_EEPROM                     = _UxGT("ÂàùÂßãÂåñË®≠ÁΩÆ");     // "Initialize EEPROM"
   PROGMEM Language_Str MSG_REFRESH                         = LCD_STR_REFRESH  _UxGT("Âà∑Êñ∞");     //"Refresh"
-  PROGMEM Language_Str MSG_WATCH                           = _UxGT("Ë≥áË®äÁïåÈù¢");     //"Info screen"
+  PROGMEM Language_Str MSG_INFO_SCREEN                     = _UxGT("Ë≥áË®äÁïåÈù¢");     //"Info screen"
   PROGMEM Language_Str MSG_PREPARE                         = _UxGT("Ê∫ñÂÇô");     //"Prepare"
   PROGMEM Language_Str MSG_TUNE                            = _UxGT("Ë™øÊï¥");     //"Tune"
   PROGMEM Language_Str MSG_PAUSE_PRINT                     = _UxGT("Êö´ÂÅúÂàóÂç∞");     //"Pause print"

commit 1c4f672eae494875c36eafe0e050222c6bb7bf1e
Author: dagorel <37673727+dagorel@users.noreply.github.com>
Date:   Wed Dec 11 06:37:25 2019 +0100

    Formalize DAC percent strings (#16176)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 1042f841e9..58c7dc705b 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -359,7 +359,10 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("ÊúÄÈ´òÊ∫´Â∫¶");     //"Max Temp"
   PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("ÈõªÊ∫ê‰æõÊáâ");     //"Power Supply"
   PROGMEM Language_Str MSG_DRIVE_STRENGTH                  = _UxGT("È©ÖÂãïÂäõÂ∫¶");     // "Drive Strength"
-  PROGMEM Language_Str MSG_DAC_PERCENT                     = _UxGT("È©ÖÂãï %");     // "Driver %"
+  PROGMEM Language_Str MSG_DAC_PERCENT_X                   = _UxGT("X È©ÖÂãï %");     // "X Driver %"
+  PROGMEM Language_Str MSG_DAC_PERCENT_Y                   = _UxGT("Y È©ÖÂãï %");     // "Y Driver %"
+  PROGMEM Language_Str MSG_DAC_PERCENT_Z                   = _UxGT("Z È©ÖÂãï %");     // "Z Driver %"
+  PROGMEM Language_Str MSG_DAC_PERCENT_E                   = _UxGT("E È©ÖÂãï %");     // "E Driver %"
   PROGMEM Language_Str MSG_DAC_EEPROM_WRITE                = _UxGT("‰øùÂ≠òÈ©ÖÂãïË®≠ÁΩÆ");     // "DAC EEPROM Write"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_PAUSE    = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "PRINT PAUSED"
   PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_LOAD     = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "LOAD FILAMENT"

commit 27cb4db80eae73eb842f1a944260517bb8783eb3
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Nov 14 20:30:30 2019 -0600

    Reduced string storage using tokens (#15593)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 051e71ccae..1042f841e9 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -57,36 +57,16 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®");     //"Offsets applied"
   PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("Ë®≠ÁΩÆÂéüÈªû");     //"Set origin"
   PROGMEM Language_Str MSG_PREHEAT_1                       = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL;     //"Preheat PREHEAT_1_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_1_H0                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " " LCD_STR_N0;     //"Preheat PREHEAT_1_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_1_H1                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " " LCD_STR_N1;     //"Preheat PREHEAT_1_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_1_H2                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " " LCD_STR_N2;     //"Preheat PREHEAT_1_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_1_H3                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " " LCD_STR_N3;     //"Preheat PREHEAT_1_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_1_H4                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " " LCD_STR_N4;     //"Preheat PREHEAT_1_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_1_H5                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " " LCD_STR_N5;     //"Preheat PREHEAT_1_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_1_H                     = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " ~";     //"Preheat PREHEAT_1_LABEL"
   PROGMEM Language_Str MSG_PREHEAT_1_END                   = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥");     //MSG_PREHEAT_1 " "
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E0                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N0;     //MSG_PREHEAT_1 " "
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E1                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N1;     //MSG_PREHEAT_1 " "
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E2                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N2;     //MSG_PREHEAT_1 " "
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E3                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N3;     //MSG_PREHEAT_1 " "
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E4                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N4;     //MSG_PREHEAT_1 " "
-  PROGMEM Language_Str MSG_PREHEAT_1_END_E5                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N5;     //MSG_PREHEAT_1 " "
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E                 = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ~");     //MSG_PREHEAT_1 " "
   PROGMEM Language_Str MSG_PREHEAT_1_ALL                   = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
   PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY               = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
   PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS              = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
   PROGMEM Language_Str MSG_PREHEAT_2                       = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL;     //"Preheat PREHEAT_2_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_2_H0                    = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " " LCD_STR_N0;     //"Preheat PREHEAT_2_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_2_H1                    = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " " LCD_STR_N1;     //"Preheat PREHEAT_2_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_2_H2                    = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " " LCD_STR_N2;     //"Preheat PREHEAT_2_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_2_H3                    = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " " LCD_STR_N3;     //"Preheat PREHEAT_2_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_2_H4                    = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " " LCD_STR_N4;     //"Preheat PREHEAT_2_LABEL"
-  PROGMEM Language_Str MSG_PREHEAT_2_H5                    = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " " LCD_STR_N5;     //"Preheat PREHEAT_2_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_2_H                     = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " ~";     //"Preheat PREHEAT_2_LABEL"
   PROGMEM Language_Str MSG_PREHEAT_2_END                   = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥");     //MSG_PREHEAT_2 " "
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E0                = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N0;     //MSG_PREHEAT_2 " "
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E1                = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N1;     //MSG_PREHEAT_2 " "
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E2                = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N2;     //MSG_PREHEAT_2 " "
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E3                = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N3;     //MSG_PREHEAT_2 " "
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E4                = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N4;     //MSG_PREHEAT_2 " "
-  PROGMEM Language_Str MSG_PREHEAT_2_END_E5                = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N5;     //MSG_PREHEAT_2 " "
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E                 = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ~");     //MSG_PREHEAT_2 " "
   PROGMEM Language_Str MSG_PREHEAT_2_ALL                   = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" ÂÖ®ÈÉ®");     //MSG_PREHEAT_2 " All"
   PROGMEM Language_Str MSG_PREHEAT_2_BEDONLY               = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" ÁÜ±Â∫ä");     //MSG_PREHEAT_2 " Bed"
   PROGMEM Language_Str MSG_PREHEAT_2_SETTINGS              = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Ë®≠ÁΩÆ");     //MSG_PREHEAT_2 " conf"
@@ -196,12 +176,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_MOVE_Y                          = _UxGT("ÁßªÂãïY");     //"Move Y"
   PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("ÁßªÂãïZ");     //"Move Z"
   PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("Êì†Âá∫Ê©ü");     //"Extruder"
-  PROGMEM Language_Str MSG_MOVE_E0                         = _UxGT("Êì†Âá∫Ê©ü ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_MOVE_E1                         = _UxGT("Êì†Âá∫Ê©ü ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_MOVE_E2                         = _UxGT("Êì†Âá∫Ê©ü ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_MOVE_E3                         = _UxGT("Êì†Âá∫Ê©ü ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_MOVE_E4                         = _UxGT("Êì†Âá∫Ê©ü ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_MOVE_E5                         = _UxGT("Êì†Âá∫Ê©ü ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_MOVE_EN                         = _UxGT("Êì†Âá∫Ê©ü *");
   PROGMEM Language_Str MSG_MOVE_Z_DIST                     = _UxGT("ÁßªÂãï %s mm");     //"Move 0.025mm"
   PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("ÁßªÂãï 0.1 mm");     //"Move 0.1mm"
   PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("ÁßªÂãï 1 mm");     //"Move 1mm"
@@ -209,28 +184,14 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_SPEED                           = _UxGT("ÈÄüÁéá");     //"Speed"
   PROGMEM Language_Str MSG_BED_Z                           = _UxGT("ÁÜ±Â∫äZ");     //"Bed Z"
   PROGMEM Language_Str MSG_NOZZLE                          = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥");     //"Nozzle" Âô¥Âò¥
-  PROGMEM Language_Str MSG_NOZZLE_0                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ") LCD_STR_N0;
-  PROGMEM Language_Str MSG_NOZZLE_1                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ") LCD_STR_N1;
-  PROGMEM Language_Str MSG_NOZZLE_2                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ") LCD_STR_N2;
-  PROGMEM Language_Str MSG_NOZZLE_3                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ") LCD_STR_N3;
-  PROGMEM Language_Str MSG_NOZZLE_4                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ") LCD_STR_N4;
-  PROGMEM Language_Str MSG_NOZZLE_5                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ") LCD_STR_N5;
+  PROGMEM Language_Str MSG_NOZZLE_N                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ~");
   PROGMEM Language_Str MSG_BED                             = " " LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä");     //"Bed"
   PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("È¢®ÊâáÈÄüÁéá");     //"Fan speed"
-  PROGMEM Language_Str MSG_FAN_SPEED_1                     = _UxGT("È¢®ÊâáÈÄüÁéá 1");
-  PROGMEM Language_Str MSG_FAN_SPEED_2                     = _UxGT("È¢®ÊâáÈÄüÁéá 2");
-  PROGMEM Language_Str MSG_FAN_SPEED_3                     = _UxGT("È¢®ÊâáÈÄüÁéá 3");
+  PROGMEM Language_Str MSG_FAN_SPEED_N                     = _UxGT("È¢®ÊâáÈÄüÁéá =");
   PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá");     // "Extra fan speed"
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_1               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá 1");
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_2               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá 2");
-  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_3               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá 3");
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_N               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá =");
   PROGMEM Language_Str MSG_FLOW                            = _UxGT("Êì†Âá∫ÈÄüÁéá");
-  PROGMEM Language_Str MSG_FLOW_0                          = _UxGT("Êì†Âá∫ÈÄüÁéá ") LCD_STR_N0;     //"Flow"
-  PROGMEM Language_Str MSG_FLOW_1                          = _UxGT("Êì†Âá∫ÈÄüÁéá ") LCD_STR_N1;     //"Flow"
-  PROGMEM Language_Str MSG_FLOW_2                          = _UxGT("Êì†Âá∫ÈÄüÁéá ") LCD_STR_N2;     //"Flow"
-  PROGMEM Language_Str MSG_FLOW_3                          = _UxGT("Êì†Âá∫ÈÄüÁéá ") LCD_STR_N3;     //"Flow"
-  PROGMEM Language_Str MSG_FLOW_4                          = _UxGT("Êì†Âá∫ÈÄüÁéá ") LCD_STR_N4;     //"Flow"
-  PROGMEM Language_Str MSG_FLOW_5                          = _UxGT("Êì†Âá∫ÈÄüÁéá ") LCD_STR_N5;     //"Flow"
+  PROGMEM Language_Str MSG_FLOW_N                          = _UxGT("Êì†Âá∫ÈÄüÁéá ~");     //"Flow"
   PROGMEM Language_Str MSG_CONTROL                         = _UxGT("ÊéßÂà∂");     //"Control"
   PROGMEM Language_Str MSG_MIN                             = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ∞è");     //" " LCD_STR_THERMOMETER " Min"
   PROGMEM Language_Str MSG_MAX                             = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ§ß");     //" " LCD_STR_THERMOMETER " Max"
@@ -239,40 +200,15 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("Èñã");     //"On"
   PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("Èóú");     //"Off"
   PROGMEM Language_Str MSG_PID_P                           = _UxGT("PID-P");     //"PID-P"
-  PROGMEM Language_Str MSG_PID_P_E0                        = _UxGT("PID-P ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_PID_P_E1                        = _UxGT("PID-P ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_PID_P_E2                        = _UxGT("PID-P ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_PID_P_E3                        = _UxGT("PID-P ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_PID_P_E4                        = _UxGT("PID-P ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_PID_P_E5                        = _UxGT("PID-P ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_P_E                         = _UxGT("PID-P *");
   PROGMEM Language_Str MSG_PID_I                           = _UxGT("PID-I");     //"PID-I"
-  PROGMEM Language_Str MSG_PID_I_E0                        = _UxGT("PID-I ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_PID_I_E1                        = _UxGT("PID-I ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_PID_I_E2                        = _UxGT("PID-I ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_PID_I_E3                        = _UxGT("PID-I ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_PID_I_E4                        = _UxGT("PID-I ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_PID_I_E5                        = _UxGT("PID-I ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_I_E                         = _UxGT("PID-I *");
   PROGMEM Language_Str MSG_PID_D                           = _UxGT("PID-D");     //"PID-D"
-  PROGMEM Language_Str MSG_PID_D_E0                        = _UxGT("PID-D ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_PID_D_E1                        = _UxGT("PID-D ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_PID_D_E2                        = _UxGT("PID-D ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_PID_D_E3                        = _UxGT("PID-D ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_PID_D_E4                        = _UxGT("PID-D ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_PID_D_E5                        = _UxGT("PID-D ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_D_E                         = _UxGT("PID-D *");
   PROGMEM Language_Str MSG_PID_C                           = _UxGT("PID-C");     //"PID-C"
-  PROGMEM Language_Str MSG_PID_C_E0                        = _UxGT("PID-C ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_PID_C_E1                        = _UxGT("PID-C ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_PID_C_E2                        = _UxGT("PID-C ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_PID_C_E3                        = _UxGT("PID-C ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_PID_C_E4                        = _UxGT("PID-C ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_PID_C_E5                        = _UxGT("PID-C ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_C_E                         = _UxGT("PID-C *");
   PROGMEM Language_Str MSG_SELECT                          = _UxGT("ÈÅ∏Êìá");     //"Select"
-  PROGMEM Language_Str MSG_SELECT_E0                       = _UxGT("ÈÅ∏Êìá ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_SELECT_E1                       = _UxGT("ÈÅ∏Êìá ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_SELECT_E2                       = _UxGT("ÈÅ∏Êìá ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_SELECT_E3                       = _UxGT("ÈÅ∏Êìá ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_SELECT_E4                       = _UxGT("ÈÅ∏Êìá ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_SELECT_E5                       = _UxGT("ÈÅ∏Êìá ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_SELECT_E                        = _UxGT("ÈÅ∏Êìá *");
   PROGMEM Language_Str MSG_ACC                             = _UxGT("Âä†ÈÄüÂ∫¶");     //"Accel" acceleration
   PROGMEM Language_Str MSG_JERK                            = _UxGT("ÊäñÂãïÈÄüÁéá");     //"Jerk"
   PROGMEM Language_Str MSG_VA_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_A;     //"Va-jerk"
@@ -284,12 +220,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_B;
   PROGMEM Language_Str MSG_VMAX_C                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_C;
   PROGMEM Language_Str MSG_VMAX_E                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_E;
-  PROGMEM Language_Str MSG_VMAX_E0                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá ") LCD_STR_E0;     //"Vmax " max_feedrate_mm_s
-  PROGMEM Language_Str MSG_VMAX_E1                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_VMAX_E2                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_VMAX_E3                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_VMAX_E4                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_VMAX_E5                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_VMAX_EN                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá *");     //"Vmax " max_feedrate_mm_s
   PROGMEM Language_Str MSG_VMIN                            = _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá");     //"Vmin"  min_feedrate_mm_s
   PROGMEM Language_Str MSG_VTRAV_MIN                       = _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá");     //"VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
   PROGMEM Language_Str MSG_ACCELERATION                    = _UxGT("Âä†ÈÄüÂ∫¶");     // "Acceleration"
@@ -297,12 +228,7 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_AMAX_B                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_B;
   PROGMEM Language_Str MSG_AMAX_C                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_C;
   PROGMEM Language_Str MSG_AMAX_E                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_E;
-  PROGMEM Language_Str MSG_AMAX_E0                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ ") LCD_STR_E0;     //"Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
-  PROGMEM Language_Str MSG_AMAX_E1                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_AMAX_E2                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_AMAX_E3                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_AMAX_E4                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_AMAX_E5                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_AMAX_EN                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ *");     //"Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
   PROGMEM Language_Str MSG_A_RETRACT                       = _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶");     //"A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
   PROGMEM Language_Str MSG_A_TRAVEL                        = _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶");     //"A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
   PROGMEM Language_Str MSG_STEPS_PER_MM                    = _UxGT("Ëª∏Ê≠•Êï∏/mm");     //"Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
@@ -310,23 +236,13 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_B_STEPS                         = LCD_STR_B _UxGT("Ëª∏Ê≠•Êï∏/mm");
   PROGMEM Language_Str MSG_C_STEPS                         = LCD_STR_C _UxGT("Ëª∏Ê≠•Êï∏/mm");
   PROGMEM Language_Str MSG_E_STEPS                         = _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm");     //"Esteps/mm"
-  PROGMEM Language_Str MSG_E0_STEPS                        = _UxGT("Êì†Âá∫Ê©ü") LCD_STR_N0 _UxGT("Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_E1_STEPS                        = _UxGT("Êì†Âá∫Ê©ü") LCD_STR_N1 _UxGT("Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_E2_STEPS                        = _UxGT("Êì†Âá∫Ê©ü") LCD_STR_N2 _UxGT("Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_E3_STEPS                        = _UxGT("Êì†Âá∫Ê©ü") LCD_STR_N3 _UxGT("Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_E4_STEPS                        = _UxGT("Êì†Âá∫Ê©ü") LCD_STR_N4 _UxGT("Ê≠•Êï∏/mm");
-  PROGMEM Language_Str MSG_E5_STEPS                        = _UxGT("Êì†Âá∫Ê©ü") LCD_STR_N5 _UxGT("Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_EN_STEPS                        = _UxGT("Êì†Âá∫Ê©ü~Ê≠•Êï∏/mm");
   PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Ê∫´Â∫¶");     //"Temperature"
   PROGMEM Language_Str MSG_MOTION                          = _UxGT("ÈÅã‰Ωú");     //"Motion"
   PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ");     //"Filament" menu_control_volumetric
   PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("Ê∏¨ÂÆπÁ©çmm¬≥");     //"E in mm3" volumetric_enabled
   PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("Áµ≤ÊñôÁõ¥Âæë");     //"Fil. Dia."
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E0                = _UxGT("Áµ≤ÊñôÁõ¥Âæë ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E1                = _UxGT("Áµ≤ÊñôÁõ¥Âæë ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E2                = _UxGT("Áµ≤ÊñôÁõ¥Âæë ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E3                = _UxGT("Áµ≤ÊñôÁõ¥Âæë ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E4                = _UxGT("Áµ≤ÊñôÁõ¥Âæë ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_FILAMENT_DIAM_E5                = _UxGT("Áµ≤ÊñôÁõ¥Âæë ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E                 = _UxGT("Áµ≤ÊñôÁõ¥Âæë *");
   PROGMEM Language_Str MSG_FILAMENT_UNLOAD                 = _UxGT("Âç∏Ëºâ mm");     // "Unload mm"
   PROGMEM Language_Str MSG_FILAMENT_LOAD                   = _UxGT("Ë£ÖËºâ mm");     // "Load mm"
   PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("LCDÂ∞çÊØîÂ∫¶");     //"LCD contrast"
@@ -360,25 +276,11 @@ namespace Language_zh_TW {
   PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAPF   = _UxGT("S UnRet V");     // "S UnRet V"
   PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("Ëá™ÂãïÂõûÁ∏Æ");     //"AutoRetr." autoretract_enabled,
   PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Êõ¥ÊèõÁµ≤Êñô");     //"Change filament"
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E0               = _UxGT("Êõ¥ÊèõÁµ≤Êñô ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E1               = _UxGT("Êõ¥ÊèõÁµ≤Êñô ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E2               = _UxGT("Êõ¥ÊèõÁµ≤Êñô ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E3               = _UxGT("Êõ¥ÊèõÁµ≤Êñô ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E4               = _UxGT("Êõ¥ÊèõÁµ≤Êñô ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_FILAMENTCHANGE_E5               = _UxGT("Êõ¥ÊèõÁµ≤Êñô ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E                = _UxGT("Êõ¥ÊèõÁµ≤Êñô *");
   PROGMEM Language_Str MSG_FILAMENTLOAD                    = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "Load filament"
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E0                 = _UxGT("Ë£ùËºâÁµ≤Êñô ") LCD_STR_E0;
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E1                 = _UxGT("Ë£ùËºâÁµ≤Êñô ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E2                 = _UxGT("Ë£ùËºâÁµ≤Êñô ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E3                 = _UxGT("Ë£ùËºâÁµ≤Êñô ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E4                 = _UxGT("Ë£ùËºâÁµ≤Êñô ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_FILAMENTLOAD_E5                 = _UxGT("Ë£ùËºâÁµ≤Êñô ") LCD_STR_E5;
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E0               = _UxGT("Âç∏ËºâÁµ≤Êñô ") LCD_STR_E0;     // "Unload filament"
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E1               = _UxGT("Âç∏ËºâÁµ≤Êñô ") LCD_STR_E1;
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E2               = _UxGT("Âç∏ËºâÁµ≤Êñô ") LCD_STR_E2;
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E3               = _UxGT("Âç∏ËºâÁµ≤Êñô ") LCD_STR_E3;
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E4               = _UxGT("Âç∏ËºâÁµ≤Êñô ") LCD_STR_E4;
-  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E5               = _UxGT("Âç∏ËºâÁµ≤Êñô ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E                  = _UxGT("Ë£ùËºâÁµ≤Êñô *");
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD                  = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "Unload filament"
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E                = _UxGT("Âç∏ËºâÁµ≤Êñô *");     // "Unload filament"
   PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("Âç∏ËºâÂÖ®ÈÉ®");     // "Unload All"
   PROGMEM Language_Str MSG_INIT_MEDIA                      = _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°");     //"Init. SD card"
   PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°");     //"Change SD card"

commit 6a865a614620d71521bd3dc032adffe0bf82378c
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Wed Oct 9 18:46:10 2019 -0600

    Multi-language support (#15453)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 90b7b00758..051e71ccae 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -28,357 +28,464 @@
  * See also http://marlinfw.org/docs/development/lcd_language.html
  *
  */
+namespace Language_zh_TW {
+  using namespace Language_en;  // Inherit undefined strings from English
 
-#define CHARSIZE 3
+  constexpr uint8_t    CHARSIZE                            = 3;
+  PROGMEM Language_Str LANGUAGE                            = _UxGT("Traditional Chinese");
 
-#define WELCOME_MSG                         MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.")  //" ready."
-#define MSG_BACK                            _UxGT("ËøîÂõû")         // ‚ÄùBack‚Äú
-#define MSG_MEDIA_INSERTED                  _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•")  //"Card inserted"
-#define MSG_MEDIA_REMOVED                   _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫")  //"Card removed"
-#define MSG_LCD_ENDSTOPS                    _UxGT("ÊìãÂ°ä")  //"Endstops" // Max length 8 characters
-#define MSG_MAIN                            _UxGT("‰∏ªÈÅ∏ÂñÆ")  //"Main"
-#define MSG_AUTOSTART                       _UxGT("Ëá™ÂãïÈñãÂßã")  //"Autostart"
-#define MSG_DISABLE_STEPPERS                _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È¶¨ÈÅî")  //"Disable steppers"
-#define MSG_DEBUG_MENU                      _UxGT("Èô§ÈåØÈÅ∏ÂñÆ")    // "Debug Menu"
-#define MSG_PROGRESS_BAR_TEST               _UxGT("ÈÄ≤Â∫¶Ê¢ùÊ∏¨Ë©¶")  // "Progress Bar Test"
-#define MSG_AUTO_HOME                       _UxGT("Ëá™ÂãïÂõûÂéüÈªû")  //"Auto home"
-#define MSG_AUTO_HOME_X                     _UxGT("ÂõûXÂéüÈªû")  //"Home X"
-#define MSG_AUTO_HOME_Y                     _UxGT("ÂõûYÂéüÈªû")  //"Home Y"
-#define MSG_AUTO_HOME_Z                     _UxGT("ÂõûZÂéüÈªû")  //"Home Z"
-#define MSG_LEVEL_BED_HOMING                _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏ÂéüÈªû")  //"Homing XYZ"
-#define MSG_LEVEL_BED_WAITING               _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥")  //"Click to Begin"
-#define MSG_LEVEL_BED_NEXT_POINT            _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû")  //"Next Point"
-#define MSG_LEVEL_BED_DONE                  _UxGT("ÂÆåÊàêÁÜ±Â∫äË™øÂπ≥")  //"Leveling Done!"
-#define MSG_Z_FADE_HEIGHT                   _UxGT("Ê∑°Âá∫È´òÂ∫¶")     // "Fade Height"
-#define MSG_SET_HOME_OFFSETS                _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª")  //"Set home offsets"
-#define MSG_HOME_OFFSETS_APPLIED            _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®")  //"Offsets applied"
-#define MSG_SET_ORIGIN                      _UxGT("Ë®≠ÁΩÆÂéüÈªû")  //"Set origin"
-#define MSG_PREHEAT_1                       _UxGT("È†êÁÜ±" PREHEAT_1_LABEL)  //"Preheat PREHEAT_1_LABEL"
-#define MSG_PREHEAT_1_N                     MSG_PREHEAT_1 _UxGT(" ")  //MSG_PREHEAT_1 " "
-#define MSG_PREHEAT_1_ALL                   MSG_PREHEAT_1 _UxGT(" ÂÖ®ÈÉ®")  //MSG_PREHEAT_1 " All"
-#define MSG_PREHEAT_1_BEDONLY               MSG_PREHEAT_1 _UxGT(" ÁÜ±Â∫ä")  //MSG_PREHEAT_1 " Bed"
-#define MSG_PREHEAT_1_SETTINGS              MSG_PREHEAT_1 _UxGT(" Ë®≠ÁΩÆ")  //MSG_PREHEAT_1 " conf"
-#define MSG_PREHEAT_2                       _UxGT("È†êÁÜ±" PREHEAT_2_LABEL)  //"Preheat PREHEAT_2_LABEL"
-#define MSG_PREHEAT_2_N                     MSG_PREHEAT_2 _UxGT(" ")  //MSG_PREHEAT_2 " "
-#define MSG_PREHEAT_2_ALL                   MSG_PREHEAT_2 _UxGT(" ÂÖ®ÈÉ®")  //MSG_PREHEAT_2 " All"
-#define MSG_PREHEAT_2_BEDONLY               MSG_PREHEAT_2 _UxGT(" ÁÜ±Â∫ä")  //MSG_PREHEAT_2 " Bed"
-#define MSG_PREHEAT_2_SETTINGS              MSG_PREHEAT_2 _UxGT(" Ë®≠ÁΩÆ")  //MSG_PREHEAT_2 " conf"
-#define MSG_COOLDOWN                        _UxGT("ÈôçÊ∫´")  //"Cooldown"
-#define MSG_SWITCH_PS_ON                    _UxGT("ÈõªÊ∫êÊâìÈñã")  //"Switch power on"
-#define MSG_SWITCH_PS_OFF                   _UxGT("ÈõªÊ∫êÈóúÈñâ")  //"Switch power off"
-#define MSG_EXTRUDE                         _UxGT("Êì†Âá∫")  //"Extrude"
-#define MSG_RETRACT                         _UxGT("ÂõûÁ∏Æ")  //"Retract"
-#define MSG_MOVE_AXIS                       _UxGT("ÁßªÂãïËª∏")  //"Move axis"
-#define MSG_BED_LEVELING                    _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä")  //"Bed leveling"
-#define MSG_LEVEL_BED                       _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä")  //"Level bed"
-#define MSG_LEVEL_CORNERS                   _UxGT("Ë™øÂπ≥ÈÇäËßí") // "Level corners"
+  PROGMEM Language_Str WELCOME_MSG                         = MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.");     //" ready."
+  PROGMEM Language_Str MSG_BACK                            = _UxGT("ËøîÂõû");     // ‚ÄùBack‚Äú
+  PROGMEM Language_Str MSG_MEDIA_INSERTED                  = _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•");     //"Card inserted"
+  PROGMEM Language_Str MSG_MEDIA_REMOVED                   = _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫");     //"Card removed"
+  PROGMEM Language_Str MSG_LCD_ENDSTOPS                    = _UxGT("ÊìãÂ°ä");     //"Endstops" // Max length 8 characters
+  PROGMEM Language_Str MSG_MAIN                            = _UxGT("‰∏ªÈÅ∏ÂñÆ");     //"Main"
+  PROGMEM Language_Str MSG_AUTOSTART                       = _UxGT("Ëá™ÂãïÈñãÂßã");     //"Autostart"
+  PROGMEM Language_Str MSG_DISABLE_STEPPERS                = _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È¶¨ÈÅî");     //"Disable steppers"
+  PROGMEM Language_Str MSG_DEBUG_MENU                      = _UxGT("Èô§ÈåØÈÅ∏ÂñÆ");     // "Debug Menu"
+  PROGMEM Language_Str MSG_PROGRESS_BAR_TEST               = _UxGT("ÈÄ≤Â∫¶Ê¢ùÊ∏¨Ë©¶");     // "Progress Bar Test"
+  PROGMEM Language_Str MSG_AUTO_HOME                       = _UxGT("Ëá™ÂãïÂõûÂéüÈªû");     //"Auto home"
+  PROGMEM Language_Str MSG_AUTO_HOME_X                     = _UxGT("ÂõûXÂéüÈªû");     //"Home X"
+  PROGMEM Language_Str MSG_AUTO_HOME_Y                     = _UxGT("ÂõûYÂéüÈªû");     //"Home Y"
+  PROGMEM Language_Str MSG_AUTO_HOME_Z                     = _UxGT("ÂõûZÂéüÈªû");     //"Home Z"
+  PROGMEM Language_Str MSG_LEVEL_BED_HOMING                = _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏ÂéüÈªû");     //"Homing XYZ"
+  PROGMEM Language_Str MSG_LEVEL_BED_WAITING               = _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥");     //"Click to Begin"
+  PROGMEM Language_Str MSG_LEVEL_BED_NEXT_POINT            = _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû");     //"Next Point"
+  PROGMEM Language_Str MSG_LEVEL_BED_DONE                  = _UxGT("ÂÆåÊàêÁÜ±Â∫äË™øÂπ≥");     //"Leveling Done!"
+  PROGMEM Language_Str MSG_Z_FADE_HEIGHT                   = _UxGT("Ê∑°Âá∫È´òÂ∫¶");     // "Fade Height"
+  PROGMEM Language_Str MSG_SET_HOME_OFFSETS                = _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª");     //"Set home offsets"
+  PROGMEM Language_Str MSG_HOME_OFFSETS_APPLIED            = _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®");     //"Offsets applied"
+  PROGMEM Language_Str MSG_SET_ORIGIN                      = _UxGT("Ë®≠ÁΩÆÂéüÈªû");     //"Set origin"
+  PROGMEM Language_Str MSG_PREHEAT_1                       = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL;     //"Preheat PREHEAT_1_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_1_H0                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " " LCD_STR_N0;     //"Preheat PREHEAT_1_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_1_H1                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " " LCD_STR_N1;     //"Preheat PREHEAT_1_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_1_H2                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " " LCD_STR_N2;     //"Preheat PREHEAT_1_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_1_H3                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " " LCD_STR_N3;     //"Preheat PREHEAT_1_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_1_H4                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " " LCD_STR_N4;     //"Preheat PREHEAT_1_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_1_H5                    = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL " " LCD_STR_N5;     //"Preheat PREHEAT_1_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_1_END                   = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥");     //MSG_PREHEAT_1 " "
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E0                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N0;     //MSG_PREHEAT_1 " "
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E1                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N1;     //MSG_PREHEAT_1 " "
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E2                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N2;     //MSG_PREHEAT_1 " "
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E3                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N3;     //MSG_PREHEAT_1 " "
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E4                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N4;     //MSG_PREHEAT_1 " "
+  PROGMEM Language_Str MSG_PREHEAT_1_END_E5                = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N5;     //MSG_PREHEAT_1 " "
+  PROGMEM Language_Str MSG_PREHEAT_1_ALL                   = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÂÖ®ÈÉ®");     //MSG_PREHEAT_1 " All"
+  PROGMEM Language_Str MSG_PREHEAT_1_BEDONLY               = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" ÁÜ±Â∫ä");     //MSG_PREHEAT_1 " Bed"
+  PROGMEM Language_Str MSG_PREHEAT_1_SETTINGS              = _UxGT("È†êÁÜ± ") PREHEAT_1_LABEL _UxGT(" Ë®≠ÁΩÆ");     //MSG_PREHEAT_1 " conf"
+  PROGMEM Language_Str MSG_PREHEAT_2                       = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL;     //"Preheat PREHEAT_2_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_2_H0                    = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " " LCD_STR_N0;     //"Preheat PREHEAT_2_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_2_H1                    = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " " LCD_STR_N1;     //"Preheat PREHEAT_2_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_2_H2                    = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " " LCD_STR_N2;     //"Preheat PREHEAT_2_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_2_H3                    = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " " LCD_STR_N3;     //"Preheat PREHEAT_2_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_2_H4                    = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " " LCD_STR_N4;     //"Preheat PREHEAT_2_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_2_H5                    = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL " " LCD_STR_N5;     //"Preheat PREHEAT_2_LABEL"
+  PROGMEM Language_Str MSG_PREHEAT_2_END                   = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥");     //MSG_PREHEAT_2 " "
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E0                = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N0;     //MSG_PREHEAT_2 " "
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E1                = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N1;     //MSG_PREHEAT_2 " "
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E2                = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N2;     //MSG_PREHEAT_2 " "
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E3                = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N3;     //MSG_PREHEAT_2 " "
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E4                = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N4;     //MSG_PREHEAT_2 " "
+  PROGMEM Language_Str MSG_PREHEAT_2_END_E5                = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Âô¥Âò¥ ") LCD_STR_N5;     //MSG_PREHEAT_2 " "
+  PROGMEM Language_Str MSG_PREHEAT_2_ALL                   = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" ÂÖ®ÈÉ®");     //MSG_PREHEAT_2 " All"
+  PROGMEM Language_Str MSG_PREHEAT_2_BEDONLY               = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" ÁÜ±Â∫ä");     //MSG_PREHEAT_2 " Bed"
+  PROGMEM Language_Str MSG_PREHEAT_2_SETTINGS              = _UxGT("È†êÁÜ± ") PREHEAT_2_LABEL _UxGT(" Ë®≠ÁΩÆ");     //MSG_PREHEAT_2 " conf"
+  PROGMEM Language_Str MSG_COOLDOWN                        = _UxGT("ÈôçÊ∫´");     //"Cooldown"
+  PROGMEM Language_Str MSG_SWITCH_PS_ON                    = _UxGT("ÈõªÊ∫êÊâìÈñã");     //"Switch power on"
+  PROGMEM Language_Str MSG_SWITCH_PS_OFF                   = _UxGT("ÈõªÊ∫êÈóúÈñâ");     //"Switch power off"
+  PROGMEM Language_Str MSG_EXTRUDE                         = _UxGT("Êì†Âá∫");     //"Extrude"
+  PROGMEM Language_Str MSG_RETRACT                         = _UxGT("ÂõûÁ∏Æ");     //"Retract"
+  PROGMEM Language_Str MSG_MOVE_AXIS                       = _UxGT("ÁßªÂãïËª∏");     //"Move axis"
+  PROGMEM Language_Str MSG_BED_LEVELING                    = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     //"Bed leveling"
+  PROGMEM Language_Str MSG_LEVEL_BED                       = _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä");     //"Level bed"
+  PROGMEM Language_Str MSG_LEVEL_CORNERS                   = _UxGT("Ë™øÂπ≥ÈÇäËßí");     // "Level corners"
 
-#define MSG_NEXT_CORNER                     _UxGT("‰∏ã‰∏™ÈÇäËßí") // "Next corner"
-#define MSG_EDIT_MESH                       _UxGT("Á∑®ËºØÁ∂≤Ê†º") // "Edit Mesh"
-#define MSG_EDITING_STOPPED                 _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂ∑≤ÂÅúÊ≠¢") // "Mesh Editing Stopped"
-#define MSG_USER_MENU                       _UxGT("ÂÆ¢Âà∂ÂëΩ‰ª§") // "Custom Commands"
+  PROGMEM Language_Str MSG_NEXT_CORNER                     = _UxGT("‰∏ãÂÄãÈÇäËßí");     // "Next corner"
+  PROGMEM Language_Str MSG_EDIT_MESH                       = _UxGT("Á∑®ËºØÁ∂≤Ê†º");     // "Edit Mesh"
+  PROGMEM Language_Str MSG_EDITING_STOPPED                 = _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂ∑≤ÂÅúÊ≠¢");     // "Mesh Editing Stopped"
+  PROGMEM Language_Str MSG_USER_MENU                       = _UxGT("ÂÆ¢Âà∂ÂëΩ‰ª§");     // "Custom Commands"
 
-#define MSG_UBL_DOING_G29                   _UxGT("ÊâßË°åG29") // "Doing G29"
-#define MSG_UBL_TOOLS                       _UxGT("UBLÂ∑•ÂÖ∑") // "UBL Tools"
-#define MSG_UBL_LEVEL_BED                   _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)") // "Unified Bed Leveling"
-#define MSG_UBL_MANUAL_MESH                 _UxGT("ÊâãÂ∑•Âª∫ÁΩë") // "Manually Build Mesh"
-#define MSG_UBL_BC_INSERT                   _UxGT("ÊîæÁΩÆÂ¢äÁâá‰∏¶Ê∏¨Èáè") // "Place shim & measure"
-#define MSG_UBL_BC_INSERT2                  _UxGT("Ê∏¨Èáè") // "Measure"
-#define MSG_UBL_BC_REMOVE                   _UxGT("ÁßªÈô§‰∏¶Ê∏¨ÈáèÁÜ±Â∫ä") // "Remove & measure bed"
-#define MSG_UBL_MOVING_TO_NEXT              _UxGT("ÁßªÂãïÂà∞‰∏ã‰∏ÄÂÄã") // "Moving to next"
-#define MSG_UBL_ACTIVATE_MESH               _UxGT("ÊøÄÊ¥ªUBL") // "Activate UBL"
-#define MSG_UBL_DEACTIVATE_MESH             _UxGT("ÈóúÈñâUBL") // "Deactivate UBL"
-#define MSG_UBL_SET_TEMP_BED                _UxGT("Ë®≠ÁΩÆÁÜ±Â∫äÊ∫´Â∫¶") // "Bed Temp"
-#define MSG_UBL_SET_TEMP_HOTEND             _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶") // "Hotend Temp"
-#define MSG_UBL_MESH_EDIT                   _UxGT("Á∂≤Ê†ºÁ∑®ËºØ") // "Mesh Edit"
-#define MSG_UBL_EDIT_CUSTOM_MESH            _UxGT("Á∑®ËºØÂÆ¢Êà∂Á∂≤Ê†º") // "Edit Custom Mesh"
-#define MSG_UBL_FINE_TUNE_MESH              _UxGT("Á¥∞Ë™øÁ∂≤Ê†º") // "Fine Tuning Mesh"
-#define MSG_UBL_DONE_EDITING_MESH           _UxGT("ÂÆåÊàêÁ∑®ËºØÁ∂≤Ê†º") // "Done Editing Mesh"
-#define MSG_UBL_BUILD_CUSTOM_MESH           _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º") // "Build Custom Mesh"
-#define MSG_UBL_BUILD_MESH_MENU             _UxGT("ÂâµË®≠Á∂≤Ê†º") // "Build Mesh"
-#define MSG_UBL_BUILD_MESH_M1               _UxGT("ÂâµË®≠" PREHEAT_1_LABEL "Á∂≤Ê†º") // "Build PREHEAT_1_LABEL Mesh"
-#define MSG_UBL_BUILD_MESH_M2               _UxGT("ÂâµË®≠" PREHEAT_2_LABEL "Á∂≤Ê†º") // "Build PREHEAT_2_LABEL Mesh"
-#define MSG_UBL_BUILD_COLD_MESH             _UxGT("ÂâµË®≠ÂÜ∑Á∂≤Ê†º") // "Build Cold Mesh"
-#define MSG_UBL_MESH_HEIGHT_ADJUST          _UxGT("Ë™øÊï¥Á∂≤Ê†ºÈ´òÂ∫¶") // "Adjust Mesh Height"
-#define MSG_UBL_MESH_HEIGHT_AMOUNT          _UxGT("È´òÂ∫¶ÂêàË®à") // "Height Amount"
-#define MSG_UBL_VALIDATE_MESH_MENU          _UxGT("ÊâπÂáÜÁ∂≤Ê†º") // "Validate Mesh"
-#define MSG_UBL_VALIDATE_MESH_M1            _UxGT("ÊâπÂáÜ" PREHEAT_1_LABEL "Á∂≤Ê†º") // "Validate PREHEAT_1_LABEL Mesh"
-#define MSG_UBL_VALIDATE_MESH_M2            _UxGT("ÊâπÂáÜ" PREHEAT_2_LABEL "Á∂≤Ê†º") // "Validate PREHEAT_2_LABEL Mesh"
-#define MSG_UBL_VALIDATE_CUSTOM_MESH        _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º") // "Validate Custom Mesh"
-#define MSG_UBL_CONTINUE_MESH               _UxGT("ÁπºÁ∫åÁÜ±Â∫äÁ∂≤Ê†º") // "Continue Bed Mesh"
-#define MSG_UBL_MESH_LEVELING               _UxGT("Á∂≤Ê†ºË™øÂπ≥") // "Mesh Leveling"
-#define MSG_UBL_3POINT_MESH_LEVELING        _UxGT("‰∏âÈªûË™øÂπ≥") // "3-Point Leveling"
-#define MSG_UBL_GRID_MESH_LEVELING          _UxGT("Ê†ºÂ≠êÁ∂≤Ê†ºË™øÂπ≥") // "Grid Mesh Leveling"
-#define MSG_UBL_MESH_LEVEL                  _UxGT("Ë™øÂπ≥Á∂≤Ê†º") // "Level Mesh"
-#define MSG_UBL_SIDE_POINTS                 _UxGT("ÈÇäÈªû") // "Side Points"
-#define MSG_UBL_MAP_TYPE                    _UxGT("ÂúñÈ°ûÂûã") // "Map Type"
-#define MSG_UBL_OUTPUT_MAP                  _UxGT("Ëº∏Âá∫Á∂≤Ê†ºÂúñ") // "Output Mesh Map"
-#define MSG_UBL_OUTPUT_MAP_HOST             _UxGT("Ëº∏Âá∫Âà∞‰∏ªÊ©ü") // "Output for Host"
-#define MSG_UBL_OUTPUT_MAP_CSV              _UxGT("Ëº∏Âá∫Âà∞CSV") // "Output for CSV"
-#define MSG_UBL_OUTPUT_MAP_BACKUP           _UxGT("Ëº∏Âá∫Âà∞ÂÇô‰ªΩ") // "Off Printer Backup"
-#define MSG_UBL_INFO_UBL                    _UxGT("Ëº∏Âá∫UBL‰ø°ÊÅØ") // "Output UBL Info"
-#define MSG_UBL_FILLIN_AMOUNT               _UxGT("Â°´ÂÖÖÂêàË®à") // "Fill-in Amount"
-#define MSG_UBL_MANUAL_FILLIN               _UxGT("ÊâãÂ∑•Â°´ÂÖÖ") // "Manual Fill-in"
-#define MSG_UBL_SMART_FILLIN                _UxGT("ËÅ∞ÊòéÂ°´ÂÖÖ") // "Smart Fill-in"
-#define MSG_UBL_FILLIN_MESH                 _UxGT("Â°´ÂÖÖÁ∂≤Ê†º") // "Fill-in Mesh"
-#define MSG_UBL_INVALIDATE_ALL              _UxGT("‰ΩúÂª¢ÊâÄÊúâÁöÑ") // "Invalidate All"
-#define MSG_UBL_INVALIDATE_CLOSEST          _UxGT("‰ΩúÂª¢ÊúÄËøëÁöÑ") // "Invalidate Closest"
-#define MSG_UBL_FINE_TUNE_ALL               _UxGT("Á¥∞Ë™øÊâÄÊúâÁöÑ") // "Fine Tune All"
-#define MSG_UBL_FINE_TUNE_CLOSEST           _UxGT("Á¥∞Ë™øÊúÄËøëÁöÑ") // "Fine Tune Closest"
-#define MSG_UBL_STORAGE_MESH_MENU           _UxGT("Á∂≤Ê†ºÂ≠òÂÑ≤") // "Mesh Storage"
-#define MSG_UBL_STORAGE_SLOT                _UxGT("Â≠òÂÑ≤ÊßΩ") // "Memory Slot"
-#define MSG_UBL_LOAD_MESH                   _UxGT("Ë£ùËºâÁÜ±Â∫äÁ∂≤Ê†º") // "Load Bed Mesh"
-#define MSG_UBL_SAVE_MESH                   _UxGT("‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º") // "Save Bed Mesh"
-#define MSG_MESH_LOADED                     _UxGT("Á∂≤Ê†º %i Â∑≤Ë£ùËºâ") // "Mesh %i loaded"
-#define MSG_MESH_SAVED                      _UxGT("Á∂≤Ê†º %i Â∑≤‰øùÂ≠ò") // "Mesh %i saved"
-#define MSG_UBL_NO_STORAGE                  _UxGT("Ê≤íÊúâÂ≠òÂÑ≤") // "No storage"
-#define MSG_UBL_SAVE_ERROR                  _UxGT("ÈåØË™§: UBL‰øùÂ≠ò") // "Err: UBL Save"
-#define MSG_UBL_RESTORE_ERROR               _UxGT("ÈåØË™§: UBLÈÇÑÂéü") // "Err: UBL Restore"
-#define MSG_UBL_Z_OFFSET_STOPPED            _UxGT("ZÂÅèÁßªÂ∑≤ÂÅúÊ≠¢") // "Z-Offset Stopped"
-#define MSG_UBL_STEP_BY_STEP_MENU           _UxGT("‰∏ÄÊ≠•Ê≠•UBL") // "Step-By-Step UBL"
+  PROGMEM Language_Str MSG_UBL_DOING_G29                   = _UxGT("Âü∑Ë°åG29");     // "Doing G29"
+  PROGMEM Language_Str MSG_UBL_TOOLS                       = _UxGT("UBLÂ∑•ÂÖ∑");     // "UBL Tools"
+  PROGMEM Language_Str MSG_UBL_LEVEL_BED                   = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"
+  PROGMEM Language_Str MSG_UBL_MANUAL_MESH                 = _UxGT("ÊâãÂ∑•Âª∫Á∂≤");     // "Manually Build Mesh"
+  PROGMEM Language_Str MSG_UBL_BC_INSERT                   = _UxGT("ÊîæÁΩÆÂ¢äÁâá‰∏¶Ê∏¨Èáè");     // "Place shim & measure"
+  PROGMEM Language_Str MSG_UBL_BC_INSERT2                  = _UxGT("Ê∏¨Èáè");     // "Measure"
+  PROGMEM Language_Str MSG_UBL_BC_REMOVE                   = _UxGT("ÁßªÈô§‰∏¶Ê∏¨ÈáèÁÜ±Â∫ä");     // "Remove & measure bed"
+  PROGMEM Language_Str MSG_UBL_MOVING_TO_NEXT              = _UxGT("ÁßªÂãïÂà∞‰∏ã‰∏ÄÂÄã");     // "Moving to next"
+  PROGMEM Language_Str MSG_UBL_ACTIVATE_MESH               = _UxGT("ÂïüÂãïUBL");     // "Activate UBL"
+  PROGMEM Language_Str MSG_UBL_DEACTIVATE_MESH             = _UxGT("ÈóúÈñâUBL");     // "Deactivate UBL"
+  PROGMEM Language_Str MSG_UBL_SET_TEMP_BED                = _UxGT("Ë®≠ÁΩÆÁÜ±Â∫äÊ∫´Â∫¶");     // "Bed Temp"
+  PROGMEM Language_Str MSG_UBL_SET_TEMP_HOTEND             = _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶");     // "Hotend Temp"
+  PROGMEM Language_Str MSG_UBL_MESH_EDIT                   = _UxGT("Á∂≤Ê†ºÁ∑®ËºØ");     // "Mesh Edit"
+  PROGMEM Language_Str MSG_UBL_EDIT_CUSTOM_MESH            = _UxGT("Á∑®ËºØÂÆ¢Êà∂Á∂≤Ê†º");     // "Edit Custom Mesh"
+  PROGMEM Language_Str MSG_UBL_FINE_TUNE_MESH              = _UxGT("Á¥∞Ë™øÁ∂≤Ê†º");     // "Fine Tuning Mesh"
+  PROGMEM Language_Str MSG_UBL_DONE_EDITING_MESH           = _UxGT("ÂÆåÊàêÁ∑®ËºØÁ∂≤Ê†º");     // "Done Editing Mesh"
+  PROGMEM Language_Str MSG_UBL_BUILD_CUSTOM_MESH           = _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º");     // "Build Custom Mesh"
+  PROGMEM Language_Str MSG_UBL_BUILD_MESH_MENU             = _UxGT("ÂâµË®≠Á∂≤Ê†º");     // "Build Mesh"
+  PROGMEM Language_Str MSG_UBL_BUILD_MESH_M1               = _UxGT("ÂâµË®≠ ") PREHEAT_1_LABEL _UxGT(" Á∂≤Ê†º");     // "Build PREHEAT_1_LABEL Mesh"
+  PROGMEM Language_Str MSG_UBL_BUILD_MESH_M2               = _UxGT("ÂâµË®≠ ") PREHEAT_2_LABEL _UxGT(" Á∂≤Ê†º");     // "Build PREHEAT_2_LABEL Mesh"
+  PROGMEM Language_Str MSG_UBL_BUILD_COLD_MESH             = _UxGT("ÂâµË®≠ÂÜ∑Á∂≤Ê†º");     // "Build Cold Mesh"
+  PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_ADJUST          = _UxGT("Ë™øÊï¥Á∂≤Ê†ºÈ´òÂ∫¶");     // "Adjust Mesh Height"
+  PROGMEM Language_Str MSG_UBL_MESH_HEIGHT_AMOUNT          = _UxGT("È´òÂ∫¶ÂêàË®à");     // "Height Amount"
+  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_MENU          = _UxGT("ÊâπÂáÜÁ∂≤Ê†º");     // "Validate Mesh"
+  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M1            = _UxGT("ÊâπÂáÜ ") PREHEAT_1_LABEL _UxGT(" Á∂≤Ê†º");     // "Validate PREHEAT_1_LABEL Mesh"
+  PROGMEM Language_Str MSG_UBL_VALIDATE_MESH_M2            = _UxGT("ÊâπÂáÜ ") PREHEAT_2_LABEL _UxGT(" Á∂≤Ê†º");     // "Validate PREHEAT_2_LABEL Mesh"
+  PROGMEM Language_Str MSG_UBL_VALIDATE_CUSTOM_MESH        = _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º");     // "Validate Custom Mesh"
+  PROGMEM Language_Str MSG_UBL_CONTINUE_MESH               = _UxGT("ÁπºÁ∫åÁÜ±Â∫äÁ∂≤Ê†º");     // "Continue Bed Mesh"
+  PROGMEM Language_Str MSG_UBL_MESH_LEVELING               = _UxGT("Á∂≤Ê†ºË™øÂπ≥");     // "Mesh Leveling"
+  PROGMEM Language_Str MSG_UBL_3POINT_MESH_LEVELING        = _UxGT("‰∏âÈªûË™øÂπ≥");     // "3-Point Leveling"
+  PROGMEM Language_Str MSG_UBL_GRID_MESH_LEVELING          = _UxGT("Ê†ºÂ≠êÁ∂≤Ê†ºË™øÂπ≥");     // "Grid Mesh Leveling"
+  PROGMEM Language_Str MSG_UBL_MESH_LEVEL                  = _UxGT("Ë™øÂπ≥Á∂≤Ê†º");     // "Level Mesh"
+  PROGMEM Language_Str MSG_UBL_SIDE_POINTS                 = _UxGT("ÈÇäÈªû");     // "Side Points"
+  PROGMEM Language_Str MSG_UBL_MAP_TYPE                    = _UxGT("ÂúñÈ°ûÂûã");     // "Map Type"
+  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP                  = _UxGT("Ëº∏Âá∫Á∂≤Ê†ºÂúñ");     // "Output Mesh Map"
+  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_HOST             = _UxGT("Ëº∏Âá∫Âà∞‰∏ªÊ©ü");     // "Output for Host"
+  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_CSV              = _UxGT("Ëº∏Âá∫Âà∞CSV");     // "Output for CSV"
+  PROGMEM Language_Str MSG_UBL_OUTPUT_MAP_BACKUP           = _UxGT("Ëº∏Âá∫Âà∞ÂÇô‰ªΩ");     // "Off Printer Backup"
+  PROGMEM Language_Str MSG_UBL_INFO_UBL                    = _UxGT("Ëº∏Âá∫UBL‰ø°ÊÅØ");     // "Output UBL Info"
+  PROGMEM Language_Str MSG_UBL_FILLIN_AMOUNT               = _UxGT("Â°´ÂÖÖÂêàË®à");     // "Fill-in Amount"
+  PROGMEM Language_Str MSG_UBL_MANUAL_FILLIN               = _UxGT("ÊâãÂ∑•Â°´ÂÖÖ");     // "Manual Fill-in"
+  PROGMEM Language_Str MSG_UBL_SMART_FILLIN                = _UxGT("ËÅ∞ÊòéÂ°´ÂÖÖ");     // "Smart Fill-in"
+  PROGMEM Language_Str MSG_UBL_FILLIN_MESH                 = _UxGT("Â°´ÂÖÖÁ∂≤Ê†º");     // "Fill-in Mesh"
+  PROGMEM Language_Str MSG_UBL_INVALIDATE_ALL              = _UxGT("‰ΩúÂª¢ÊâÄÊúâÁöÑ");     // "Invalidate All"
+  PROGMEM Language_Str MSG_UBL_INVALIDATE_CLOSEST          = _UxGT("‰ΩúÂª¢ÊúÄËøëÁöÑ");     // "Invalidate Closest"
+  PROGMEM Language_Str MSG_UBL_FINE_TUNE_ALL               = _UxGT("Á¥∞Ë™øÊâÄÊúâÁöÑ");     // "Fine Tune All"
+  PROGMEM Language_Str MSG_UBL_FINE_TUNE_CLOSEST           = _UxGT("Á¥∞Ë™øÊúÄËøëÁöÑ");     // "Fine Tune Closest"
+  PROGMEM Language_Str MSG_UBL_STORAGE_MESH_MENU           = _UxGT("Á∂≤Ê†ºÂ≠òÂÑ≤");     // "Mesh Storage"
+  PROGMEM Language_Str MSG_UBL_STORAGE_SLOT                = _UxGT("Â≠òÂÑ≤ÊßΩ");     // "Memory Slot"
+  PROGMEM Language_Str MSG_UBL_LOAD_MESH                   = _UxGT("Ë£ùËºâÁÜ±Â∫äÁ∂≤Ê†º");     // "Load Bed Mesh"
+  PROGMEM Language_Str MSG_UBL_SAVE_MESH                   = _UxGT("‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º");     // "Save Bed Mesh"
+  PROGMEM Language_Str MSG_MESH_LOADED                     = _UxGT("M117 Á∂≤Ê†º %i Â∑≤Ë£ùËºâ");     // "Mesh %i loaded"
+  PROGMEM Language_Str MSG_MESH_SAVED                      = _UxGT("M117 Á∂≤Ê†º %i Â∑≤‰øùÂ≠ò");     // "Mesh %i saved"
+  PROGMEM Language_Str MSG_UBL_NO_STORAGE                  = _UxGT("Ê≤íÊúâÂ≠òÂÑ≤");     // "No storage"
+  PROGMEM Language_Str MSG_UBL_SAVE_ERROR                  = _UxGT("ÈåØË™§: UBL‰øùÂ≠ò");     // "Err: UBL Save"
+  PROGMEM Language_Str MSG_UBL_RESTORE_ERROR               = _UxGT("ÈåØË™§: UBLÈÇÑÂéü");     // "Err: UBL Restore"
+  PROGMEM Language_Str MSG_UBL_Z_OFFSET_STOPPED            = _UxGT("ZÂÅèÁßªÂ∑≤ÂÅúÊ≠¢");     // "Z-Offset Stopped"
+  PROGMEM Language_Str MSG_UBL_STEP_BY_STEP_MENU           = _UxGT("‰∏ÄÊ≠•Ê≠•UBL");     // "Step-By-Step UBL"
+  PROGMEM Language_Str MSG_UBL_1_BUILD_COLD_MESH           = _UxGT("1. ÂâµË®≠ÂÜ∑Á∂≤Ê†º");
+  PROGMEM Language_Str MSG_UBL_2_SMART_FILLIN              = _UxGT("2. ËÅ∞ÊòéÂ°´ÂÖÖ");
+  PROGMEM Language_Str MSG_UBL_3_VALIDATE_MESH_MENU        = _UxGT("3. ÊâπÂáÜÁ∂≤Ê†º");
+  PROGMEM Language_Str MSG_UBL_4_FINE_TUNE_ALL             = _UxGT("4. Á¥∞Ë™øÊâÄÊúâÁöÑ");
+  PROGMEM Language_Str MSG_UBL_5_VALIDATE_MESH_MENU        = _UxGT("5. ÊâπÂáÜÁ∂≤Ê†º");
+  PROGMEM Language_Str MSG_UBL_6_FINE_TUNE_ALL             = _UxGT("6. Á¥∞Ë™øÊâÄÊúâÁöÑ");
+  PROGMEM Language_Str MSG_UBL_7_SAVE_MESH                 = _UxGT("7. ‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º");
 
-#define MSG_LED_CONTROL                     _UxGT("ÁÅØÁÆ°ÊéßÂà∂") // "LED Control")
-#define MSG_LEDS                            _UxGT("ÁÅØ") // "Lights")
-#define MSG_LED_PRESETS                     _UxGT("ÁÅØÈ¢ÑÁΩÆ") // "Light Presets")
-#define MSG_SET_LEDS_RED                    _UxGT("Á∫¢") // "Red")
-#define MSG_SET_LEDS_ORANGE                 _UxGT("Ê©ô") // "Orange")
-#define MSG_SET_LEDS_YELLOW                 _UxGT("ÈªÑ") // "Yellow")
-#define MSG_SET_LEDS_GREEN                  _UxGT("Áªø") // "Green")
-#define MSG_SET_LEDS_BLUE                   _UxGT("Ëìù") // "Blue")
-#define MSG_SET_LEDS_INDIGO                 _UxGT("Èùí") // "Indigo")
-#define MSG_SET_LEDS_VIOLET                 _UxGT("Á¥´") // "Violet")
-#define MSG_SET_LEDS_WHITE                  _UxGT("ÁôΩ") // "White")
-#define MSG_SET_LEDS_DEFAULT                _UxGT("Áº∫ÁúÅ") // "Default")
-#define MSG_CUSTOM_LEDS                     _UxGT("ÂÆöÂà∂ÁÅØ") // "Custom Lights")
-#define MSG_INTENSITY_R                     _UxGT("Á∫¢È£ΩÂíåÂ∫¶") // "Red Intensity")
-#define MSG_INTENSITY_G                     _UxGT("ÁªøÈ£ΩÂíåÂ∫¶") // "Green Intensity")
-#define MSG_INTENSITY_B                     _UxGT("ËìùÈ£ΩÂíåÂ∫¶") // "Blue Intensity")
-#define MSG_INTENSITY_W                     _UxGT("ÁôΩÈ£ΩÂíåÂ∫¶") // "White Intensity")
-#define MSG_LED_BRIGHTNESS                  _UxGT("‰∫ÆÂ∫¶") // "Brightness")
+  PROGMEM Language_Str MSG_LED_CONTROL                     = _UxGT("ÁáàÁÆ°ÊéßÂà∂");     // "LED Control")
+  PROGMEM Language_Str MSG_LEDS                            = _UxGT("Ááà");     // "Lights")
+  PROGMEM Language_Str MSG_LED_PRESETS                     = _UxGT("ÁáàÈ†êÁΩÆ");     // "Light Presets")
+  PROGMEM Language_Str MSG_SET_LEDS_RED                    = _UxGT("Á∫¢");     // "Red")
+  PROGMEM Language_Str MSG_SET_LEDS_ORANGE                 = _UxGT("Ê©ô");     // "Orange")
+  PROGMEM Language_Str MSG_SET_LEDS_YELLOW                 = _UxGT("ÈªÉ");     // "Yellow")
+  PROGMEM Language_Str MSG_SET_LEDS_GREEN                  = _UxGT("Á∂†");     // "Green")
+  PROGMEM Language_Str MSG_SET_LEDS_BLUE                   = _UxGT("Ëóç");     // "Blue")
+  PROGMEM Language_Str MSG_SET_LEDS_INDIGO                 = _UxGT("Èùí");     // "Indigo")
+  PROGMEM Language_Str MSG_SET_LEDS_VIOLET                 = _UxGT("Á¥´");     // "Violet")
+  PROGMEM Language_Str MSG_SET_LEDS_WHITE                  = _UxGT("ÁôΩ");     // "White")
+  PROGMEM Language_Str MSG_SET_LEDS_DEFAULT                = _UxGT("Áº∫ÁúÅ");     // "Default")
+  PROGMEM Language_Str MSG_CUSTOM_LEDS                     = _UxGT("ÂÆöÂà∂Ááà");     // "Custom Lights")
+  PROGMEM Language_Str MSG_INTENSITY_R                     = _UxGT("Á¥ÖÈ£ΩÂíåÂ∫¶");     // "Red Intensity")
+  PROGMEM Language_Str MSG_INTENSITY_G                     = _UxGT("Á∂†È£ΩÂíåÂ∫¶");     // "Green Intensity")
+  PROGMEM Language_Str MSG_INTENSITY_B                     = _UxGT("ËóçÈ£ΩÂíåÂ∫¶");     // "Blue Intensity")
+  PROGMEM Language_Str MSG_INTENSITY_W                     = _UxGT("ÁôΩÈ£ΩÂíåÂ∫¶");     // "White Intensity")
+  PROGMEM Language_Str MSG_LED_BRIGHTNESS                  = _UxGT("‰∫ÆÂ∫¶");     // "Brightness")
 
-#define MSG_MOVING                          _UxGT("ÁßªÂä® ...") // "Moving...")
-#define MSG_FREE_XY                         _UxGT("ÈáäÊîæ XY") // "Free XY")
-#define MSG_MOVE_X                          _UxGT("ÁßªÂãïX")  //"Move X"
-#define MSG_MOVE_Y                          _UxGT("ÁßªÂãïY")  //"Move Y"
-#define MSG_MOVE_Z                          _UxGT("ÁßªÂãïZ")  //"Move Z"
-#define MSG_MOVE_E                          _UxGT("Êì†Âá∫Ê©ü")  //"Extruder"
-#define MSG_MOVE_Z_DIST                     _UxGT("ÁßªÂãï %s mm")  //"Move 0.025mm"
-#define MSG_MOVE_01MM                       _UxGT("ÁßªÂãï 0.1 mm")  //"Move 0.1mm"
-#define MSG_MOVE_1MM                        _UxGT("ÁßªÂãï 1 mm")  //"Move 1mm"
-#define MSG_MOVE_10MM                       _UxGT("ÁßªÂãï 10 mm")  //"Move 10mm"
-#define MSG_SPEED                           _UxGT("ÈÄüÁéá")  //"Speed"
-#define MSG_BED_Z                           _UxGT("ÁÜ±Â∫äZ")  //"Bed Z"
-#define MSG_NOZZLE                          _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥")  //"Nozzle" Âô¥Âò¥
-#define MSG_BED                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä")  //"Bed"
-#define MSG_FAN_SPEED                       _UxGT("È¢®ÊâáÈÄüÁéá")  //"Fan speed"
-#define MSG_EXTRA_FAN_SPEED                 _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá") // "Extra fan speed"
-#define MSG_FLOW                            _UxGT("Êì†Âá∫ÈÄüÁéá")  //"Flow"
-#define MSG_CONTROL                         _UxGT("ÊéßÂà∂")  //"Control"
-#define MSG_MIN                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ∞è") //" " LCD_STR_THERMOMETER " Min"
-#define MSG_MAX                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ§ß")  //" " LCD_STR_THERMOMETER " Max"
-#define MSG_FACTOR                          _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" Á≥ªÊï∏")  //" " LCD_STR_THERMOMETER " Fact"
-#define MSG_AUTOTEMP                        _UxGT("Ëá™ÂãïÊéßÊ∫´")  //"Autotemp"
-#define MSG_LCD_ON                          _UxGT("Èñã")  //"On"
-#define MSG_LCD_OFF                         _UxGT("Èóú")  //"Off"
-#define MSG_PID_P                           _UxGT("PID-P")  //"PID-P"
-#define MSG_PID_I                           _UxGT("PID-I")  //"PID-I"
-#define MSG_PID_D                           _UxGT("PID-D")  //"PID-D"
-#define MSG_PID_C                           _UxGT("PID-C")  //"PID-C"
-#define MSG_SELECT                          _UxGT("ÈÅ∏Êìá")  //"Select"
-#define MSG_ACC                             _UxGT("Âä†ÈÄüÂ∫¶")  //"Accel" acceleration
-#define MSG_JERK                            _UxGT("ÊäñÂãïÈÄüÁéá")  //"Jerk"
-#if IS_KINEMATIC
-  #define MSG_VA_JERK                       _UxGT("AËª∏ÊäñÂãïÈÄüÁéá")  //"Va-jerk"
-  #define MSG_VB_JERK                       _UxGT("BËª∏ÊäñÂãïÈÄüÁéá")  //"Vb-jerk"
-  #define MSG_VC_JERK                       _UxGT("CËª∏ÊäñÂãïÈÄüÁéá")  //"Vc-jerk"
-#else
-  #define MSG_VA_JERK                       _UxGT("XËª∏ÊäñÂãïÈÄüÁéá")  //"Vx-jerk"
-  #define MSG_VB_JERK                       _UxGT("YËª∏ÊäñÂãïÈÄüÁéá")  //"Vy-jerk"
-  #define MSG_VC_JERK                       _UxGT("ZËª∏ÊäñÂãïÈÄüÁéá")  //"Vz-jerk"
-#endif
-#define MSG_VE_JERK                         _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá")  //"Ve-jerk"
-#define MSG_VELOCITY                        _UxGT("ÈÄüÂ∫¶")          // "Velocity"
-#define MSG_VMAX                            _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá")  //"Vmax " max_feedrate_mm_s
-#define MSG_VMIN                            _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá")  //"Vmin"  min_feedrate_mm_s
-#define MSG_VTRAV_MIN                       _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá")  //"VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
-#define MSG_ACCELERATION                    _UxGT("Âä†ÈÄüÂ∫¶")       // "Acceleration"
-#define MSG_AMAX                            _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶")  //"Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
-#define MSG_A_RETRACT                       _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶")  //"A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
-#define MSG_A_TRAVEL                        _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶")  //"A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
-#define MSG_STEPS_PER_MM                    _UxGT("Ëª∏Ê≠•Êï∏/mm")  //"Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
-#if IS_KINEMATIC
-  #define MSG_ASTEPS                        _UxGT("AËª∏Ê≠•Êï∏/mm")  //"Asteps/mm" axis_steps_per_mm, axis steps-per-unit G92
-  #define MSG_BSTEPS                        _UxGT("BËª∏Ê≠•Êï∏/mm")  //"Bsteps/mm"
-  #define MSG_CSTEPS                        _UxGT("CËª∏Ê≠•Êï∏/mm")  //"Csteps/mm"
-#else
-  #define MSG_ASTEPS                        _UxGT("XËª∏Ê≠•Êï∏/mm")  //"Xsteps/mm" axis_steps_per_mm, axis steps-per-unit G92
-  #define MSG_BSTEPS                        _UxGT("YËª∏Ê≠•Êï∏/mm")  //"Ysteps/mm"
-  #define MSG_CSTEPS                        _UxGT("ZËª∏Ê≠•Êï∏/mm")  //"Zsteps/mm"
-#endif
-#define MSG_ESTEPS                          _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm")  //"Esteps/mm"
-#define MSG_E0_STEPS                        _UxGT("Êì†Âá∫Ê©ü1Ê≠•Êï∏/mm") //"E1steps/mm"
-#define MSG_E1_STEPS                        _UxGT("Êì†Âá∫Ê©ü2Ê≠•Êï∏/mm") //"E2steps/mm"
-#define MSG_E2_STEPS                        _UxGT("Êì†Âá∫Ê©ü3Ê≠•Êï∏/mm") //"E3steps/mm"
-#define MSG_E3_STEPS                        _UxGT("Êì†Âá∫Ê©ü4Ê≠•Êï∏/mm") //"E4steps/mm"
-#define MSG_E4_STEPS                        _UxGT("Êì†Âá∫Ê©ü5Ê≠•Êï∏/mm") //"E5steps/mm"
-#define MSG_E5_STEPS                        _UxGT("Êì†Âá∫Ê©ü6Ê≠•Êï∏/mm") //"E6steps/mm"
-#define MSG_TEMPERATURE                     _UxGT("Ê∫´Â∫¶")  //"Temperature"
-#define MSG_MOTION                          _UxGT("ÈÅã‰Ωú")  //"Motion"
-#define MSG_FILAMENT                        _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ")  //"Filament" menu_control_volumetric
-#define MSG_VOLUMETRIC_ENABLED              _UxGT("Ê∏¨ÂÆπÁ©çmm¬≥")  //"E in mm3" volumetric_enabled
-#define MSG_FILAMENT_DIAM                   _UxGT("Áµ≤ÊñôÁõ¥Âæë")  //"Fil. Dia."
-#define MSG_FILAMENT_UNLOAD                 _UxGT("Âç∏Ëºâ mm") // "Unload mm"
-#define MSG_FILAMENT_LOAD                   _UxGT("Ë£ÖËºâ mm")   // "Load mm"
-#define MSG_ADVANCE_K                       _UxGT("Advance K") // "Advance K"
-#define MSG_CONTRAST                        _UxGT("LCDÂ∞çÊØîÂ∫¶")  //"LCD contrast"
-#define MSG_STORE_EEPROM                    _UxGT("‰øùÂ≠òË®≠ÁΩÆ")  //"Store memory"
-#define MSG_LOAD_EEPROM                     _UxGT("ËºâÂÖ•Ë®≠ÁΩÆ")  //"Load memory"
-#define MSG_RESTORE_FAILSAFE                _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº")  //"Restore failsafe"
-#define MSG_INIT_EEPROM                     _UxGT("ÂàùÂßãÂåñË®≠ÁΩÆ") // "Initialize EEPROM"
-#define MSG_REFRESH                         _UxGT("Âà∑Êñ∞")  //"Refresh"
-#define MSG_WATCH                           _UxGT("Ë≥áË®äÁïåÈù¢")  //"Info screen"
-#define MSG_PREPARE                         _UxGT("Ê∫ñÂÇô")  //"Prepare"
-#define MSG_TUNE                            _UxGT("Ë™øÊï¥")  //"Tune"
-#define MSG_PAUSE_PRINT                     _UxGT("Êö´ÂÅúÂàóÂç∞")  //"Pause print"
-#define MSG_RESUME_PRINT                    _UxGT("ÊÅ¢Âæ©ÂàóÂç∞")  //"Resume print"
-#define MSG_STOP_PRINT                      _UxGT("ÂÅúÊ≠¢ÂàóÂç∞")  //"Stop print"
-#define MSG_MEDIA_MENU                      _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞")  //"Print from SD"
-#define MSG_NO_MEDIA                        _UxGT("ÁÑ°Ë®òÊÜ∂Âç°")  //"No SD card"
-#define MSG_DWELL                           _UxGT("‰ºëÁú† ...")  //"Sleep..."
-#define MSG_USERWAIT                        _UxGT("ÈªûÊìäÁπºÁ∫å ...")  //"Click to resume..."
-#define MSG_PRINT_PAUSED                    _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú") // "Print paused"
-#define MSG_PRINT_ABORTED                   _UxGT("Â∑≤ÂèñÊ∂àÂàóÂç∞")  //"Print aborted"
-#define MSG_NO_MOVE                         _UxGT("ÁÑ°ÁßªÂãï")  //"No move."
-#define MSG_KILLED                          _UxGT("Â∑≤Á†çÊéâ")  //"KILLED. "
-#define MSG_STOPPED                         _UxGT("Â∑≤ÂÅúÊ≠¢")  //"STOPPED. "
-#define MSG_CONTROL_RETRACT                 _UxGT("ÂõûÁ∏ÆÈï∑Â∫¶mm")  //"Retract mm" retract_length, retract length (positive mm)
-#define MSG_CONTROL_RETRACT_SWAP            _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm")  //"Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
-#define MSG_CONTROL_RETRACTF                _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s")  //"Retract  V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
-#define MSG_CONTROL_RETRACT_ZHOP            _UxGT("Hop mm")  //"Hop mm" retract_zraise, retract Z-lift
-#define MSG_CONTROL_RETRACT_RECOVER         _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm")  //"UnRet +mm" retract_recover_extra, additional recover length (mm, added to retract length when recovering)
-#define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm")  //"S UnRet+mm" swap_retract_recover_extra, additional swap recover length (mm, added to retract length when recovering from extruder change)
-#define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s")  //"UnRet V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
-#define MSG_CONTROL_RETRACT_RECOVER_SWAPF   _UxGT("S UnRet V") // "S UnRet V"
-#define MSG_AUTORETRACT                     _UxGT("Ëá™ÂãïÂõûÁ∏Æ")  //"AutoRetr." autoretract_enabled,
-#define MSG_FILAMENTCHANGE                  _UxGT("Êõ¥ÊèõÁµ≤Êñô")  //"Change filament"
-#define MSG_FILAMENTLOAD                    _UxGT("Ë£ùËºâÁµ≤Êñô") // "Load filament"
-#define MSG_FILAMENTUNLOAD                  _UxGT("Âç∏ËºâÁµ≤Êñô") // "Unload filament"
-#define MSG_FILAMENTUNLOAD_ALL              _UxGT("Âç∏ËºâÂÖ®ÈÉ®") // "Unload All"
-#define MSG_INIT_MEDIA                      _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°")  //"Init. SD card"
-#define MSG_CHANGE_MEDIA                    _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°")  //"Change SD card"
-#define MSG_ZPROBE_OUT                      _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ")  //"Z probe out. bed" Z probe is not within the physical limits
-#define MSG_SKEW_FACTOR                     _UxGT("ÂÅèÊñúÂõ†Êï∏") // "Skew Factor"
-#define MSG_BLTOUCH                         _UxGT("BLTouch")     // "BLTouch"
-#define MSG_BLTOUCH_SELFTEST                _UxGT("BLTouch Ëá™Ê™¢") // "BLTouch Self-Test"
-#define MSG_BLTOUCH_RESET                   _UxGT("ÈáçÁΩÆBLTouch")  // "Reset BLTouch"
-#define MSG_BLTOUCH_DEPLOY                  _UxGT("ÈÉ®ÁΩ≤BLTouch") // "Deploy BLTouch"
-#define MSG_BLTOUCH_STOW                    _UxGT("Ë£ùËºâBLTouch")   // "Stow BLTouch"
-#define MSG_HOME_FIRST                      _UxGT("Ê≠∏‰Ωç %s%s%s ÂÖà")  //"Home ... first"
-#define MSG_ZPROBE_ZOFFSET                  _UxGT("ZÂÅèÁßª")  //"Z Offset"
-#define MSG_BABYSTEP_X                      _UxGT("ÂæÆÈáèË™øÊï¥XËª∏")  //"Babystep X" lcd_babystep_x, Babystepping enables the user to control the axis in tiny amounts
-#define MSG_BABYSTEP_Y                      _UxGT("ÂæÆÈáèË™øÊï¥YËª∏")  //"Babystep Y"
-#define MSG_BABYSTEP_Z                      _UxGT("ÂæÆÈáèË™øÊï¥ZËª∏")  //"Babystep Z"
-#define MSG_ENDSTOP_ABORT                   _UxGT("ÊìãÂ°äÁµÇÊ≠¢")  //"Endstop abort"
-#define MSG_HEATING_FAILED_LCD              _UxGT("Âä†ÁÜ±Â§±Êïó")  //"Heating failed"
-#define MSG_ERR_REDUNDANT_TEMP              _UxGT("ÈåØË™§ÔºöREDUNDANT TEMP")  //"Err: REDUNDANT TEMP"
-#define MSG_THERMAL_RUNAWAY                 _UxGT("Ê∫´ÊéßÂ§±Êéß")  //"THERMAL RUNAWAY"
-#define MSG_ERR_MAXTEMP                     _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ∫´Â∫¶")  //"Err: MAXTEMP"
-#define MSG_ERR_MINTEMP                     _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶")  //"Err: MINTEMP"
-#define MSG_ERR_MAXTEMP_BED                 _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÁÜ±Â∫äÊ∫´Â∫¶")  //"Err: MAXTEMP BED"
-#define MSG_ERR_MINTEMP_BED                 _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÁÜ±Â∫äÊ∫´Â∫¶")  //"Err: MINTEMP BED"
-#define MSG_ERR_Z_HOMING                    _UxGT("Ê≠∏‰Ωç XY ÂÖà")  //"Home XY First"
-#define MSG_HALTED                          _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü")  //"PRINTER HALTED"
-#define MSG_PLEASE_RESET                    _UxGT("Ë´ãÈáçÁΩÆ")  //"Please reset"
-#define MSG_SHORT_DAY                       _UxGT("Â§©")  //"d" // One character only
-#define MSG_SHORT_HOUR                      _UxGT("ÊôÇ")  //"h" // One character only
-#define MSG_SHORT_MINUTE                    _UxGT("ÂàÜ")  //"m" // One character only
-#define MSG_HEATING                         _UxGT("Âä†ÁÜ±‰∏≠ ...")  //"Heating..."
-#define MSG_BED_HEATING                     _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠ ...")  //"Bed Heating..."
-#define MSG_DELTA_CALIBRATE                 _UxGT("‚äøÊ†°Ê∫ñ")  //"Delta Calibration"
-#define MSG_DELTA_CALIBRATE_X               _UxGT("‚äøÊ†°Ê∫ñX")  //"Calibrate X"
-#define MSG_DELTA_CALIBRATE_Y               _UxGT("‚äøÊ†°Ê∫ñY")  //"Calibrate Y"
-#define MSG_DELTA_CALIBRATE_Z               _UxGT("‚äøÊ†°Ê∫ñZ")  //"Calibrate Z"
-#define MSG_DELTA_CALIBRATE_CENTER          _UxGT("‚äøÊ†°Ê∫ñ‰∏≠ÂøÉ")  //"Calibrate Center"
-#define MSG_DELTA_SETTINGS                  _UxGT("‚äøË®≠ÁΩÆ") // "Delta Settings"
-#define MSG_DELTA_AUTO_CALIBRATE            _UxGT("‚äøËá™ÂãïÊ†°Ê∫ñ") // "Auto Calibration"
-#define MSG_DELTA_HEIGHT_CALIBRATE          _UxGT("Ë®≠ÁΩÆ‚äøÈ´òÂ∫¶") // "Set Delta Height"
-#define MSG_DELTA_DIAG_ROD                  _UxGT("‚äøÊñúÊü±") // "Diag Rod"
-#define MSG_DELTA_HEIGHT                    _UxGT("‚äøÈ´òÂ∫¶") // "Height"
-#define MSG_DELTA_RADIUS                    _UxGT("‚äøÂçäÂæë") // "Radius"
-#define MSG_INFO_MENU                       _UxGT("ÈóúÊñºÂç∞Ë°®Ê©ü")  //"About Printer"
-#define MSG_INFO_PRINTER_MENU               _UxGT("Âç∞Ë°®Ê©üË®äÊÅØ")  //"Printer Info"
-#define MSG_3POINT_LEVELING                 _UxGT("‰∏âÈªûË™øÂπ≥") // "3-Point Leveling"
-#define MSG_LINEAR_LEVELING                 _UxGT("Á∑öÊÄßË™øÂπ≥") // "Linear Leveling"
-#define MSG_BILINEAR_LEVELING               _UxGT("ÈõôÁ∑öÊÄßË™øÂπ≥") // "Bilinear Leveling"
-#define MSG_UBL_LEVELING                    _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)") // "Unified Bed Leveling"
-#define MSG_MESH_LEVELING                   _UxGT("Á∂≤Ê†ºË™øÂπ≥") // "Mesh Leveling"
-#define MSG_INFO_STATS_MENU                 _UxGT("Âç∞Ë°®Ê©üÁµ±Ë®à")  //"Printer Stats"
-#define MSG_INFO_BOARD_MENU                 _UxGT("‰∏ªÊùøË®äÊÅØ")  //"Board Info"
-#define MSG_INFO_THERMISTOR_MENU            _UxGT("Ê∫´Â∫¶Ë®à")  //"Thermistors"
-#define MSG_INFO_EXTRUDERS                  _UxGT("Êì†Âá∫Ê©ü")  //"Extruders"
-#define MSG_INFO_BAUDRATE                   _UxGT("ÂÇ≥Ëº∏Áéá")  //"Baud"
-#define MSG_INFO_PROTOCOL                   _UxGT("ÂçîË≠∞")  //"Protocol"
-#define MSG_CASE_LIGHT                      _UxGT("Â§ñÊÆºÁáà") // "Case light"
-#define MSG_CASE_LIGHT_BRIGHTNESS           _UxGT("Ááà‰∫ÆÂ∫¶") // "Light BRIGHTNESS"
+  PROGMEM Language_Str MSG_MOVING                          = _UxGT("ÁßªÂãï ...");     // "Moving...")
+  PROGMEM Language_Str MSG_FREE_XY                         = _UxGT("ÈáãÊîæ XY");     // "Free XY")
+  PROGMEM Language_Str MSG_MOVE_X                          = _UxGT("ÁßªÂãïX");     //"Move X"
+  PROGMEM Language_Str MSG_MOVE_Y                          = _UxGT("ÁßªÂãïY");     //"Move Y"
+  PROGMEM Language_Str MSG_MOVE_Z                          = _UxGT("ÁßªÂãïZ");     //"Move Z"
+  PROGMEM Language_Str MSG_MOVE_E                          = _UxGT("Êì†Âá∫Ê©ü");     //"Extruder"
+  PROGMEM Language_Str MSG_MOVE_E0                         = _UxGT("Êì†Âá∫Ê©ü ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_MOVE_E1                         = _UxGT("Êì†Âá∫Ê©ü ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_MOVE_E2                         = _UxGT("Êì†Âá∫Ê©ü ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_MOVE_E3                         = _UxGT("Êì†Âá∫Ê©ü ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_MOVE_E4                         = _UxGT("Êì†Âá∫Ê©ü ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_MOVE_E5                         = _UxGT("Êì†Âá∫Ê©ü ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_MOVE_Z_DIST                     = _UxGT("ÁßªÂãï %s mm");     //"Move 0.025mm"
+  PROGMEM Language_Str MSG_MOVE_01MM                       = _UxGT("ÁßªÂãï 0.1 mm");     //"Move 0.1mm"
+  PROGMEM Language_Str MSG_MOVE_1MM                        = _UxGT("ÁßªÂãï 1 mm");     //"Move 1mm"
+  PROGMEM Language_Str MSG_MOVE_10MM                       = _UxGT("ÁßªÂãï 10 mm");     //"Move 10mm"
+  PROGMEM Language_Str MSG_SPEED                           = _UxGT("ÈÄüÁéá");     //"Speed"
+  PROGMEM Language_Str MSG_BED_Z                           = _UxGT("ÁÜ±Â∫äZ");     //"Bed Z"
+  PROGMEM Language_Str MSG_NOZZLE                          = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥");     //"Nozzle" Âô¥Âò¥
+  PROGMEM Language_Str MSG_NOZZLE_0                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ") LCD_STR_N0;
+  PROGMEM Language_Str MSG_NOZZLE_1                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ") LCD_STR_N1;
+  PROGMEM Language_Str MSG_NOZZLE_2                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ") LCD_STR_N2;
+  PROGMEM Language_Str MSG_NOZZLE_3                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ") LCD_STR_N3;
+  PROGMEM Language_Str MSG_NOZZLE_4                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ") LCD_STR_N4;
+  PROGMEM Language_Str MSG_NOZZLE_5                        = " " LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥ ") LCD_STR_N5;
+  PROGMEM Language_Str MSG_BED                             = " " LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä");     //"Bed"
+  PROGMEM Language_Str MSG_FAN_SPEED                       = _UxGT("È¢®ÊâáÈÄüÁéá");     //"Fan speed"
+  PROGMEM Language_Str MSG_FAN_SPEED_1                     = _UxGT("È¢®ÊâáÈÄüÁéá 1");
+  PROGMEM Language_Str MSG_FAN_SPEED_2                     = _UxGT("È¢®ÊâáÈÄüÁéá 2");
+  PROGMEM Language_Str MSG_FAN_SPEED_3                     = _UxGT("È¢®ÊâáÈÄüÁéá 3");
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED                 = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá");     // "Extra fan speed"
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_1               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá 1");
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_2               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá 2");
+  PROGMEM Language_Str MSG_EXTRA_FAN_SPEED_3               = _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá 3");
+  PROGMEM Language_Str MSG_FLOW                            = _UxGT("Êì†Âá∫ÈÄüÁéá");
+  PROGMEM Language_Str MSG_FLOW_0                          = _UxGT("Êì†Âá∫ÈÄüÁéá ") LCD_STR_N0;     //"Flow"
+  PROGMEM Language_Str MSG_FLOW_1                          = _UxGT("Êì†Âá∫ÈÄüÁéá ") LCD_STR_N1;     //"Flow"
+  PROGMEM Language_Str MSG_FLOW_2                          = _UxGT("Êì†Âá∫ÈÄüÁéá ") LCD_STR_N2;     //"Flow"
+  PROGMEM Language_Str MSG_FLOW_3                          = _UxGT("Êì†Âá∫ÈÄüÁéá ") LCD_STR_N3;     //"Flow"
+  PROGMEM Language_Str MSG_FLOW_4                          = _UxGT("Êì†Âá∫ÈÄüÁéá ") LCD_STR_N4;     //"Flow"
+  PROGMEM Language_Str MSG_FLOW_5                          = _UxGT("Êì†Âá∫ÈÄüÁéá ") LCD_STR_N5;     //"Flow"
+  PROGMEM Language_Str MSG_CONTROL                         = _UxGT("ÊéßÂà∂");     //"Control"
+  PROGMEM Language_Str MSG_MIN                             = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ∞è");     //" " LCD_STR_THERMOMETER " Min"
+  PROGMEM Language_Str MSG_MAX                             = " " LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ§ß");     //" " LCD_STR_THERMOMETER " Max"
+  PROGMEM Language_Str MSG_FACTOR                          = " " LCD_STR_THERMOMETER _UxGT(" Á≥ªÊï∏");     //" " LCD_STR_THERMOMETER " Fact"
+  PROGMEM Language_Str MSG_AUTOTEMP                        = _UxGT("Ëá™ÂãïÊéßÊ∫´");     //"Autotemp"
+  PROGMEM Language_Str MSG_LCD_ON                          = _UxGT("Èñã");     //"On"
+  PROGMEM Language_Str MSG_LCD_OFF                         = _UxGT("Èóú");     //"Off"
+  PROGMEM Language_Str MSG_PID_P                           = _UxGT("PID-P");     //"PID-P"
+  PROGMEM Language_Str MSG_PID_P_E0                        = _UxGT("PID-P ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_PID_P_E1                        = _UxGT("PID-P ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_PID_P_E2                        = _UxGT("PID-P ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_PID_P_E3                        = _UxGT("PID-P ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_PID_P_E4                        = _UxGT("PID-P ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_PID_P_E5                        = _UxGT("PID-P ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_I                           = _UxGT("PID-I");     //"PID-I"
+  PROGMEM Language_Str MSG_PID_I_E0                        = _UxGT("PID-I ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_PID_I_E1                        = _UxGT("PID-I ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_PID_I_E2                        = _UxGT("PID-I ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_PID_I_E3                        = _UxGT("PID-I ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_PID_I_E4                        = _UxGT("PID-I ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_PID_I_E5                        = _UxGT("PID-I ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_D                           = _UxGT("PID-D");     //"PID-D"
+  PROGMEM Language_Str MSG_PID_D_E0                        = _UxGT("PID-D ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_PID_D_E1                        = _UxGT("PID-D ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_PID_D_E2                        = _UxGT("PID-D ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_PID_D_E3                        = _UxGT("PID-D ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_PID_D_E4                        = _UxGT("PID-D ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_PID_D_E5                        = _UxGT("PID-D ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_PID_C                           = _UxGT("PID-C");     //"PID-C"
+  PROGMEM Language_Str MSG_PID_C_E0                        = _UxGT("PID-C ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_PID_C_E1                        = _UxGT("PID-C ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_PID_C_E2                        = _UxGT("PID-C ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_PID_C_E3                        = _UxGT("PID-C ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_PID_C_E4                        = _UxGT("PID-C ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_PID_C_E5                        = _UxGT("PID-C ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_SELECT                          = _UxGT("ÈÅ∏Êìá");     //"Select"
+  PROGMEM Language_Str MSG_SELECT_E0                       = _UxGT("ÈÅ∏Êìá ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_SELECT_E1                       = _UxGT("ÈÅ∏Êìá ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_SELECT_E2                       = _UxGT("ÈÅ∏Êìá ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_SELECT_E3                       = _UxGT("ÈÅ∏Êìá ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_SELECT_E4                       = _UxGT("ÈÅ∏Êìá ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_SELECT_E5                       = _UxGT("ÈÅ∏Êìá ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_ACC                             = _UxGT("Âä†ÈÄüÂ∫¶");     //"Accel" acceleration
+  PROGMEM Language_Str MSG_JERK                            = _UxGT("ÊäñÂãïÈÄüÁéá");     //"Jerk"
+  PROGMEM Language_Str MSG_VA_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_A;     //"Va-jerk"
+  PROGMEM Language_Str MSG_VB_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_B;     //"Vb-jerk"
+  PROGMEM Language_Str MSG_VC_JERK                         = _UxGT("Ëª∏ÊäñÂãïÈÄüÁéá") LCD_STR_C;     //"Vc-jerk"
+  PROGMEM Language_Str MSG_VE_JERK                         = _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá");     //"Ve-jerk"
+  PROGMEM Language_Str MSG_VELOCITY                        = _UxGT("ÈÄüÂ∫¶");     // "Velocity"
+  PROGMEM Language_Str MSG_VMAX_A                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_A;     //"Vmax " max_feedrate_mm_s
+  PROGMEM Language_Str MSG_VMAX_B                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_B;
+  PROGMEM Language_Str MSG_VMAX_C                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_C;
+  PROGMEM Language_Str MSG_VMAX_E                          = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá") LCD_STR_E;
+  PROGMEM Language_Str MSG_VMAX_E0                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá ") LCD_STR_E0;     //"Vmax " max_feedrate_mm_s
+  PROGMEM Language_Str MSG_VMAX_E1                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_VMAX_E2                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_VMAX_E3                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_VMAX_E4                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_VMAX_E5                         = _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_VMIN                            = _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá");     //"Vmin"  min_feedrate_mm_s
+  PROGMEM Language_Str MSG_VTRAV_MIN                       = _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá");     //"VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
+  PROGMEM Language_Str MSG_ACCELERATION                    = _UxGT("Âä†ÈÄüÂ∫¶");     // "Acceleration"
+  PROGMEM Language_Str MSG_AMAX_A                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_A;     //"Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
+  PROGMEM Language_Str MSG_AMAX_B                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_B;
+  PROGMEM Language_Str MSG_AMAX_C                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_C;
+  PROGMEM Language_Str MSG_AMAX_E                          = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶") LCD_STR_E;
+  PROGMEM Language_Str MSG_AMAX_E0                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ ") LCD_STR_E0;     //"Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
+  PROGMEM Language_Str MSG_AMAX_E1                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_AMAX_E2                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_AMAX_E3                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_AMAX_E4                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_AMAX_E5                         = _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶ ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_A_RETRACT                       = _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶");     //"A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
+  PROGMEM Language_Str MSG_A_TRAVEL                        = _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶");     //"A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
+  PROGMEM Language_Str MSG_STEPS_PER_MM                    = _UxGT("Ëª∏Ê≠•Êï∏/mm");     //"Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
+  PROGMEM Language_Str MSG_A_STEPS                         = LCD_STR_A _UxGT("Ëª∏Ê≠•Êï∏/mm");     //"Asteps/mm" axis_steps_per_mm, axis steps-per-unit G92
+  PROGMEM Language_Str MSG_B_STEPS                         = LCD_STR_B _UxGT("Ëª∏Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_C_STEPS                         = LCD_STR_C _UxGT("Ëª∏Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_E_STEPS                         = _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm");     //"Esteps/mm"
+  PROGMEM Language_Str MSG_E0_STEPS                        = _UxGT("Êì†Âá∫Ê©ü") LCD_STR_N0 _UxGT("Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_E1_STEPS                        = _UxGT("Êì†Âá∫Ê©ü") LCD_STR_N1 _UxGT("Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_E2_STEPS                        = _UxGT("Êì†Âá∫Ê©ü") LCD_STR_N2 _UxGT("Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_E3_STEPS                        = _UxGT("Êì†Âá∫Ê©ü") LCD_STR_N3 _UxGT("Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_E4_STEPS                        = _UxGT("Êì†Âá∫Ê©ü") LCD_STR_N4 _UxGT("Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_E5_STEPS                        = _UxGT("Êì†Âá∫Ê©ü") LCD_STR_N5 _UxGT("Ê≠•Êï∏/mm");
+  PROGMEM Language_Str MSG_TEMPERATURE                     = _UxGT("Ê∫´Â∫¶");     //"Temperature"
+  PROGMEM Language_Str MSG_MOTION                          = _UxGT("ÈÅã‰Ωú");     //"Motion"
+  PROGMEM Language_Str MSG_FILAMENT                        = _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ");     //"Filament" menu_control_volumetric
+  PROGMEM Language_Str MSG_VOLUMETRIC_ENABLED              = _UxGT("Ê∏¨ÂÆπÁ©çmm¬≥");     //"E in mm3" volumetric_enabled
+  PROGMEM Language_Str MSG_FILAMENT_DIAM                   = _UxGT("Áµ≤ÊñôÁõ¥Âæë");     //"Fil. Dia."
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E0                = _UxGT("Áµ≤ÊñôÁõ¥Âæë ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E1                = _UxGT("Áµ≤ÊñôÁõ¥Âæë ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E2                = _UxGT("Áµ≤ÊñôÁõ¥Âæë ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E3                = _UxGT("Áµ≤ÊñôÁõ¥Âæë ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E4                = _UxGT("Áµ≤ÊñôÁõ¥Âæë ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_FILAMENT_DIAM_E5                = _UxGT("Áµ≤ÊñôÁõ¥Âæë ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_FILAMENT_UNLOAD                 = _UxGT("Âç∏Ëºâ mm");     // "Unload mm"
+  PROGMEM Language_Str MSG_FILAMENT_LOAD                   = _UxGT("Ë£ÖËºâ mm");     // "Load mm"
+  PROGMEM Language_Str MSG_CONTRAST                        = _UxGT("LCDÂ∞çÊØîÂ∫¶");     //"LCD contrast"
+  PROGMEM Language_Str MSG_STORE_EEPROM                    = _UxGT("‰øùÂ≠òË®≠ÁΩÆ");     //"Store memory"
+  PROGMEM Language_Str MSG_LOAD_EEPROM                     = _UxGT("ËºâÂÖ•Ë®≠ÁΩÆ");     //"Load memory"
+  PROGMEM Language_Str MSG_RESTORE_FAILSAFE                = _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº");     //"Restore failsafe"
+  PROGMEM Language_Str MSG_INIT_EEPROM                     = _UxGT("ÂàùÂßãÂåñË®≠ÁΩÆ");     // "Initialize EEPROM"
+  PROGMEM Language_Str MSG_REFRESH                         = LCD_STR_REFRESH  _UxGT("Âà∑Êñ∞");     //"Refresh"
+  PROGMEM Language_Str MSG_WATCH                           = _UxGT("Ë≥áË®äÁïåÈù¢");     //"Info screen"
+  PROGMEM Language_Str MSG_PREPARE                         = _UxGT("Ê∫ñÂÇô");     //"Prepare"
+  PROGMEM Language_Str MSG_TUNE                            = _UxGT("Ë™øÊï¥");     //"Tune"
+  PROGMEM Language_Str MSG_PAUSE_PRINT                     = _UxGT("Êö´ÂÅúÂàóÂç∞");     //"Pause print"
+  PROGMEM Language_Str MSG_RESUME_PRINT                    = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     //"Resume print"
+  PROGMEM Language_Str MSG_STOP_PRINT                      = _UxGT("ÂÅúÊ≠¢ÂàóÂç∞");     //"Stop print"
+  PROGMEM Language_Str MSG_MEDIA_MENU                      = _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞");     //"Print from SD"
+  PROGMEM Language_Str MSG_NO_MEDIA                        = _UxGT("ÁÑ°Ë®òÊÜ∂Âç°");     //"No SD card"
+  PROGMEM Language_Str MSG_DWELL                           = _UxGT("‰ºëÁú† ...");     //"Sleep..."
+  PROGMEM Language_Str MSG_USERWAIT                        = _UxGT("ÈªûÊìäÁπºÁ∫å ...");     //"Click to resume..."
+  PROGMEM Language_Str MSG_PRINT_PAUSED                    = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "Print paused"
+  PROGMEM Language_Str MSG_PRINT_ABORTED                   = _UxGT("Â∑≤ÂèñÊ∂àÂàóÂç∞");     //"Print aborted"
+  PROGMEM Language_Str MSG_NO_MOVE                         = _UxGT("ÁÑ°ÁßªÂãï");     //"No move."
+  PROGMEM Language_Str MSG_KILLED                          = _UxGT("Â∑≤Á†çÊéâ");     //"KILLED. "
+  PROGMEM Language_Str MSG_STOPPED                         = _UxGT("Â∑≤ÂÅúÊ≠¢");     //"STOPPED. "
+  PROGMEM Language_Str MSG_CONTROL_RETRACT                 = _UxGT("ÂõûÁ∏ÆÈï∑Â∫¶mm");     //"Retract mm" retract_length, retract length (positive mm)
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_SWAP            = _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm");     //"Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
+  PROGMEM Language_Str MSG_CONTROL_RETRACTF                = _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s");     //"Retract  V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_ZHOP            = _UxGT("Hop mm");     //"Hop mm" retract_zraise, retract Z-lift
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER         = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     //"UnRet +mm" retract_recover_extra, additional recover length (mm, added to retract length when recovering)
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAP    = _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm");     //"S UnRet+mm" swap_retract_recover_extra, additional swap recover length (mm, added to retract length when recovering from extruder change)
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVERF        = _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s");     //"UnRet V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
+  PROGMEM Language_Str MSG_CONTROL_RETRACT_RECOVER_SWAPF   = _UxGT("S UnRet V");     // "S UnRet V"
+  PROGMEM Language_Str MSG_AUTORETRACT                     = _UxGT("Ëá™ÂãïÂõûÁ∏Æ");     //"AutoRetr." autoretract_enabled,
+  PROGMEM Language_Str MSG_FILAMENTCHANGE                  = _UxGT("Êõ¥ÊèõÁµ≤Êñô");     //"Change filament"
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E0               = _UxGT("Êõ¥ÊèõÁµ≤Êñô ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E1               = _UxGT("Êõ¥ÊèõÁµ≤Êñô ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E2               = _UxGT("Êõ¥ÊèõÁµ≤Êñô ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E3               = _UxGT("Êõ¥ÊèõÁµ≤Êñô ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E4               = _UxGT("Êõ¥ÊèõÁµ≤Êñô ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_FILAMENTCHANGE_E5               = _UxGT("Êõ¥ÊèõÁµ≤Êñô ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_FILAMENTLOAD                    = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "Load filament"
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E0                 = _UxGT("Ë£ùËºâÁµ≤Êñô ") LCD_STR_E0;
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E1                 = _UxGT("Ë£ùËºâÁµ≤Êñô ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E2                 = _UxGT("Ë£ùËºâÁµ≤Êñô ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E3                 = _UxGT("Ë£ùËºâÁµ≤Êñô ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E4                 = _UxGT("Ë£ùËºâÁµ≤Êñô ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_FILAMENTLOAD_E5                 = _UxGT("Ë£ùËºâÁµ≤Êñô ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E0               = _UxGT("Âç∏ËºâÁµ≤Êñô ") LCD_STR_E0;     // "Unload filament"
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E1               = _UxGT("Âç∏ËºâÁµ≤Êñô ") LCD_STR_E1;
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E2               = _UxGT("Âç∏ËºâÁµ≤Êñô ") LCD_STR_E2;
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E3               = _UxGT("Âç∏ËºâÁµ≤Êñô ") LCD_STR_E3;
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E4               = _UxGT("Âç∏ËºâÁµ≤Êñô ") LCD_STR_E4;
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_E5               = _UxGT("Âç∏ËºâÁµ≤Êñô ") LCD_STR_E5;
+  PROGMEM Language_Str MSG_FILAMENTUNLOAD_ALL              = _UxGT("Âç∏ËºâÂÖ®ÈÉ®");     // "Unload All"
+  PROGMEM Language_Str MSG_INIT_MEDIA                      = _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°");     //"Init. SD card"
+  PROGMEM Language_Str MSG_CHANGE_MEDIA                    = _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°");     //"Change SD card"
+  PROGMEM Language_Str MSG_ZPROBE_OUT                      = _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ");     //"Z probe out. bed" Z probe is not within the physical limits
+  PROGMEM Language_Str MSG_SKEW_FACTOR                     = _UxGT("ÂÅèÊñúÂõ†Êï∏");     // "Skew Factor"
+  PROGMEM Language_Str MSG_BLTOUCH                         = _UxGT("BLTouch");     // "BLTouch"
+  PROGMEM Language_Str MSG_BLTOUCH_SELFTEST                = _UxGT("BLTouch Ëá™Ê™¢");     // "BLTouch Self-Test"
+  PROGMEM Language_Str MSG_BLTOUCH_RESET                   = _UxGT("ÈáçÁΩÆBLTouch");     // "Reset BLTouch"
+  PROGMEM Language_Str MSG_BLTOUCH_DEPLOY                  = _UxGT("ÈÉ®ÁΩ≤BLTouch");     // "Deploy BLTouch"
+  PROGMEM Language_Str MSG_BLTOUCH_STOW                    = _UxGT("Ë£ùËºâBLTouch");     // "Stow BLTouch"
+  PROGMEM Language_Str MSG_HOME_FIRST                      = _UxGT("Ê≠∏‰Ωç %s%s%s ÂÖà");     //"Home ... first"
+  PROGMEM Language_Str MSG_ZPROBE_ZOFFSET                  = _UxGT("ZÂÅèÁßª");     //"Z Offset"
+  PROGMEM Language_Str MSG_BABYSTEP_X                      = _UxGT("ÂæÆÈáèË™øÊï¥XËª∏");     //"Babystep X" lcd_babystep_x, Babystepping enables the user to control the axis in tiny amounts
+  PROGMEM Language_Str MSG_BABYSTEP_Y                      = _UxGT("ÂæÆÈáèË™øÊï¥YËª∏");     //"Babystep Y"
+  PROGMEM Language_Str MSG_BABYSTEP_Z                      = _UxGT("ÂæÆÈáèË™øÊï¥ZËª∏");     //"Babystep Z"
+  PROGMEM Language_Str MSG_ENDSTOP_ABORT                   = _UxGT("ÊìãÂ°äÁµÇÊ≠¢");     //"Endstop abort"
+  PROGMEM Language_Str MSG_HEATING_FAILED_LCD              = _UxGT("Âä†ÁÜ±Â§±Êïó");     //"Heating failed"
+  PROGMEM Language_Str MSG_ERR_REDUNDANT_TEMP              = _UxGT("ÈåØË™§ÔºöREDUNDANT TEMP");     //"Err: REDUNDANT TEMP"
+  PROGMEM Language_Str MSG_THERMAL_RUNAWAY                 = _UxGT("Ê∫´ÊéßÂ§±Êéß");     //"THERMAL RUNAWAY"
+  PROGMEM Language_Str MSG_ERR_MAXTEMP                     = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ∫´Â∫¶");     //"Err: MAXTEMP"
+  PROGMEM Language_Str MSG_ERR_MINTEMP                     = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶");     //"Err: MINTEMP"
+  PROGMEM Language_Str MSG_ERR_MAXTEMP_BED                 = _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÁÜ±Â∫äÊ∫´Â∫¶");     //"Err: MAXTEMP BED"
+  PROGMEM Language_Str MSG_ERR_MINTEMP_BED                 = _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÁÜ±Â∫äÊ∫´Â∫¶");     //"Err: MINTEMP BED"
+  PROGMEM Language_Str MSG_ERR_Z_HOMING                    = _UxGT("Ê≠∏‰Ωç XY ÂÖà");     //"Home XY First"
+  PROGMEM Language_Str MSG_HALTED                          = _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü");     //"PRINTER HALTED"
+  PROGMEM Language_Str MSG_PLEASE_RESET                    = _UxGT("Ë´ãÈáçÁΩÆ");     //"Please reset"
+  PROGMEM Language_Str MSG_SHORT_DAY                       = _UxGT("Â§©");     //"d" // One character only
+  PROGMEM Language_Str MSG_SHORT_HOUR                      = _UxGT("ÊôÇ");     //"h" // One character only
+  PROGMEM Language_Str MSG_SHORT_MINUTE                    = _UxGT("ÂàÜ");     //"m" // One character only
+  PROGMEM Language_Str MSG_HEATING                         = _UxGT("Âä†ÁÜ±‰∏≠ ...");     //"Heating..."
+  PROGMEM Language_Str MSG_BED_HEATING                     = _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠ ...");     //"Bed Heating..."
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE                 = _UxGT("‚äøÊ†°Ê∫ñ");     //"Delta Calibration"
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_X               = _UxGT("‚äøÊ†°Ê∫ñX");     //"Calibrate X"
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Y               = _UxGT("‚äøÊ†°Ê∫ñY");     //"Calibrate Y"
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_Z               = _UxGT("‚äøÊ†°Ê∫ñZ");     //"Calibrate Z"
+  PROGMEM Language_Str MSG_DELTA_CALIBRATE_CENTER          = _UxGT("‚äøÊ†°Ê∫ñ‰∏≠ÂøÉ");     //"Calibrate Center"
+  PROGMEM Language_Str MSG_DELTA_SETTINGS                  = _UxGT("‚äøË®≠ÁΩÆ");     // "Delta Settings"
+  PROGMEM Language_Str MSG_DELTA_AUTO_CALIBRATE            = _UxGT("‚äøËá™ÂãïÊ†°Ê∫ñ");     // "Auto Calibration"
+  PROGMEM Language_Str MSG_DELTA_HEIGHT_CALIBRATE          = _UxGT("Ë®≠ÁΩÆ‚äøÈ´òÂ∫¶");     // "Set Delta Height"
+  PROGMEM Language_Str MSG_DELTA_DIAG_ROD                  = _UxGT("‚äøÊñúÊü±");     // "Diag Rod"
+  PROGMEM Language_Str MSG_DELTA_HEIGHT                    = _UxGT("‚äøÈ´òÂ∫¶");     // "Height"
+  PROGMEM Language_Str MSG_DELTA_RADIUS                    = _UxGT("‚äøÂçäÂæë");     // "Radius"
+  PROGMEM Language_Str MSG_INFO_MENU                       = _UxGT("ÈóúÊñºÂç∞Ë°®Ê©ü");     //"About Printer"
+  PROGMEM Language_Str MSG_INFO_PRINTER_MENU               = _UxGT("Âç∞Ë°®Ê©üË®äÊÅØ");     //"Printer Info"
+  PROGMEM Language_Str MSG_3POINT_LEVELING                 = _UxGT("‰∏âÈªûË™øÂπ≥");     // "3-Point Leveling"
+  PROGMEM Language_Str MSG_LINEAR_LEVELING                 = _UxGT("Á∑öÊÄßË™øÂπ≥");     // "Linear Leveling"
+  PROGMEM Language_Str MSG_BILINEAR_LEVELING               = _UxGT("ÈõôÁ∑öÊÄßË™øÂπ≥");     // "Bilinear Leveling"
+  PROGMEM Language_Str MSG_UBL_LEVELING                    = _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)");     // "Unified Bed Leveling"
+  PROGMEM Language_Str MSG_MESH_LEVELING                   = _UxGT("Á∂≤Ê†ºË™øÂπ≥");     // "Mesh Leveling"
+  PROGMEM Language_Str MSG_INFO_STATS_MENU                 = _UxGT("Âç∞Ë°®Ê©üÁµ±Ë®à");     //"Printer Stats"
+  PROGMEM Language_Str MSG_INFO_BOARD_MENU                 = _UxGT("‰∏ªÊùøË®äÊÅØ");     //"Board Info"
+  PROGMEM Language_Str MSG_INFO_THERMISTOR_MENU            = _UxGT("Ê∫´Â∫¶Ë®à");     //"Thermistors"
+  PROGMEM Language_Str MSG_INFO_EXTRUDERS                  = _UxGT("Êì†Âá∫Ê©ü");     //"Extruders"
+  PROGMEM Language_Str MSG_INFO_BAUDRATE                   = _UxGT("ÂÇ≥Ëº∏Áéá");     //"Baud"
+  PROGMEM Language_Str MSG_INFO_PROTOCOL                   = _UxGT("ÂçîË≠∞");     //"Protocol"
+  PROGMEM Language_Str MSG_CASE_LIGHT                      = _UxGT("Â§ñÊÆºÁáà");     // "Case light"
+  PROGMEM Language_Str MSG_CASE_LIGHT_BRIGHTNESS           = _UxGT("Ááà‰∫ÆÂ∫¶");     // "Light BRIGHTNESS"
 
-#define MSG_EXPECTED_PRINTER                _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫") // "The printer is incorrect"
+  PROGMEM Language_Str MSG_EXPECTED_PRINTER                = _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫");     // "The printer is incorrect"
 
-#if LCD_WIDTH >= 20
-  #define MSG_INFO_PRINT_COUNT              _UxGT("ÂàóÂç∞Ë®àÊï∏")  //"Print Count"
-  #define MSG_INFO_COMPLETED_PRINTS         _UxGT("Â∑≤ÂÆåÊàê")  //"Completed"
-  #define MSG_INFO_PRINT_TIME               _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì")  //"Total print time"
-  #define MSG_INFO_PRINT_LONGEST            _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì")  //"Longest job time"
-  #define MSG_INFO_PRINT_FILAMENT           _UxGT("Á∏ΩË®àÊì†Âá∫")  //"Extruded total"
-#else
-  #define MSG_INFO_PRINT_COUNT              _UxGT("ÂàóÂç∞Êï∏")  //"Prints"
-  #define MSG_INFO_COMPLETED_PRINTS         _UxGT("ÂÆåÊàê")  //"Completed"
-  #define MSG_INFO_PRINT_TIME               _UxGT("Á∏ΩÂÖ±")  //"Total"
-  #define MSG_INFO_PRINT_LONGEST            _UxGT("ÊúÄÈï∑")  //"Longest"
-  #define MSG_INFO_PRINT_FILAMENT           _UxGT("Â∑≤Êì†Âá∫")  //"Extruded"
-#endif
+  #if LCD_WIDTH >= 20
+    PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("ÂàóÂç∞Ë®àÊï∏");     //"Print Count"
+    PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS         = _UxGT("Â∑≤ÂÆåÊàê");     //"Completed"
+    PROGMEM Language_Str MSG_INFO_PRINT_TIME               = _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì");     //"Total print time"
+    PROGMEM Language_Str MSG_INFO_PRINT_LONGEST            = _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì");     //"Longest job time"
+    PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT           = _UxGT("Á∏ΩË®àÊì†Âá∫");     //"Extruded total"
+  #else
+    PROGMEM Language_Str MSG_INFO_PRINT_COUNT              = _UxGT("ÂàóÂç∞Êï∏");     //"Prints"
+    PROGMEM Language_Str MSG_INFO_COMPLETED_PRINTS         = _UxGT("ÂÆåÊàê");     //"Completed"
+    PROGMEM Language_Str MSG_INFO_PRINT_TIME               = _UxGT("Á∏ΩÂÖ±");     //"Total"
+    PROGMEM Language_Str MSG_INFO_PRINT_LONGEST            = _UxGT("ÊúÄÈï∑");     //"Longest"
+    PROGMEM Language_Str MSG_INFO_PRINT_FILAMENT           = _UxGT("Â∑≤Êì†Âá∫");     //"Extruded"
+  #endif
 
-#define MSG_INFO_MIN_TEMP                   _UxGT("ÊúÄ‰ΩéÊ∫´Â∫¶")  //"Min Temp"
-#define MSG_INFO_MAX_TEMP                   _UxGT("ÊúÄÈ´òÊ∫´Â∫¶")  //"Max Temp"
-#define MSG_INFO_PSU                        _UxGT("ÈõªÊ∫ê‰æõÊáâ")  //"Power Supply"
-#define MSG_DRIVE_STRENGTH                  _UxGT("È©ÖÂãïÂäõÂ∫¶") // "Drive Strength"
-#define MSG_DAC_PERCENT                     _UxGT("È©ÖÂãï %") // "Driver %"
-#define MSG_DAC_EEPROM_WRITE                _UxGT("‰øùÂ≠òÈ©ÖÂãïË®≠ÁΩÆ") // "DAC EEPROM Write"
-#define MSG_FILAMENT_CHANGE_HEADER_PAUSE    _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú") // "PRINT PAUSED"
-#define MSG_FILAMENT_CHANGE_HEADER_LOAD     _UxGT("Ë£ùËºâÁµ≤Êñô") // "LOAD FILAMENT"
-#define MSG_FILAMENT_CHANGE_HEADER_UNLOAD   _UxGT("Âç∏ËºâÁµ≤Êñô") // "UNLOAD FILAMENT"
-#define MSG_FILAMENT_CHANGE_OPTION_HEADER   _UxGT("ÊÅ¢Ë§áÈÅ∏È†Ö:") // "RESUME OPTIONS:"
-#define MSG_FILAMENT_CHANGE_OPTION_PURGE    _UxGT("Ê∏ÖÈô§Êõ¥Â§ö") // "Purge more"
-#define MSG_FILAMENT_CHANGE_OPTION_RESUME   _UxGT("ÊÅ¢Âæ©ÂàóÂç∞")  //"Resume print"
-#define MSG_FILAMENT_CHANGE_NOZZLE          _UxGT("  Âô¥Âò¥: ") // "  Nozzle: "
-#define MSG_ERR_HOMING_FAILED               _UxGT("Ê≠∏Âéü‰ΩçÂ§±Êïó") // "Homing failed"
-#define MSG_ERR_PROBING_FAILED              _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó") // "Probing failed"
-#define MSG_M600_TOO_COLD                   _UxGT("M600: Â§™Ê∂º") // "M600: Too cold"
+  PROGMEM Language_Str MSG_INFO_MIN_TEMP                   = _UxGT("ÊúÄ‰ΩéÊ∫´Â∫¶");     //"Min Temp"
+  PROGMEM Language_Str MSG_INFO_MAX_TEMP                   = _UxGT("ÊúÄÈ´òÊ∫´Â∫¶");     //"Max Temp"
+  PROGMEM Language_Str MSG_INFO_PSU                        = _UxGT("ÈõªÊ∫ê‰æõÊáâ");     //"Power Supply"
+  PROGMEM Language_Str MSG_DRIVE_STRENGTH                  = _UxGT("È©ÖÂãïÂäõÂ∫¶");     // "Drive Strength"
+  PROGMEM Language_Str MSG_DAC_PERCENT                     = _UxGT("È©ÖÂãï %");     // "Driver %"
+  PROGMEM Language_Str MSG_DAC_EEPROM_WRITE                = _UxGT("‰øùÂ≠òÈ©ÖÂãïË®≠ÁΩÆ");     // "DAC EEPROM Write"
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_PAUSE    = _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú");     // "PRINT PAUSED"
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_LOAD     = _UxGT("Ë£ùËºâÁµ≤Êñô");     // "LOAD FILAMENT"
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEADER_UNLOAD   = _UxGT("Âç∏ËºâÁµ≤Êñô");     // "UNLOAD FILAMENT"
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_HEADER   = _UxGT("ÊÅ¢Ë§áÈÅ∏È†Ö:");     // "RESUME OPTIONS:"
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_PURGE    = _UxGT("Ê∏ÖÈô§Êõ¥Â§ö");     // "Purge more"
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_OPTION_RESUME   = _UxGT("ÊÅ¢Âæ©ÂàóÂç∞");     //"Resume print"
+  PROGMEM Language_Str MSG_FILAMENT_CHANGE_NOZZLE          = _UxGT("  Âô¥Âò¥: ");     // "  Nozzle: "
+  PROGMEM Language_Str MSG_LCD_HOMING_FAILED               = _UxGT("Ê≠∏Âéü‰ΩçÂ§±Êïó");     // "Homing failed"
+  PROGMEM Language_Str MSG_LCD_PROBING_FAILED              = _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó");     // "Probing failed"
+  PROGMEM Language_Str MSG_M600_TOO_COLD                   = _UxGT("M600: Â§™ÂÜ∑");     // "M600: Too cold"
 
-#if LCD_HEIGHT >= 4
-  #define MSG_FILAMENT_CHANGE_INIT_1        _UxGT("Á≠âÂæÖÈñãÂßã")  //"Wait for start"
-  #define MSG_FILAMENT_CHANGE_INIT_2        _UxGT("Áµ≤Êñô")  //"of the filament"
-  #define MSG_FILAMENT_CHANGE_INIT_3        _UxGT("ËÆäÊõ¥")  //"change"
-  #define MSG_FILAMENT_CHANGE_UNLOAD_1      _UxGT("Á≠âÂæÖ")  //"Wait for"
-  #define MSG_FILAMENT_CHANGE_UNLOAD_2      _UxGT("Âç∏‰∏ãÁµ≤Êñô")  //"filament unload"
-  #define MSG_FILAMENT_CHANGE_INSERT_1      _UxGT("ÊèíÂÖ•Áµ≤Êñô")  //"Insert filament"
-  #define MSG_FILAMENT_CHANGE_INSERT_2      _UxGT("‰∏¶ÊåâÈçµ")  //"and press button"
-  #define MSG_FILAMENT_CHANGE_INSERT_3      _UxGT("ÁπºÁ∫å ...")  //"to continue..."
-  #define MSG_FILAMENT_CHANGE_HEAT_1        _UxGT("Êåâ‰∏ãÊåâÈàï‰æÜ") // "Press button to"
-  #define MSG_FILAMENT_CHANGE_HEAT_2        _UxGT("Âä†ÁÜ±Âô¥Âò¥.") // "heat nozzle."
-  #define MSG_FILAMENT_CHANGE_HEATING_1     _UxGT("Âä†ÁÜ±Âô¥Âò¥") // "Heating nozzle"
-  #define MSG_FILAMENT_CHANGE_HEATING_2     _UxGT("Ë´ãÁ≠âÂæÖ ...") // "Please wait..."
-  #define MSG_FILAMENT_CHANGE_LOAD_1        _UxGT("Á≠âÂæÖ")  //"Wait for"
-  #define MSG_FILAMENT_CHANGE_LOAD_2        _UxGT("ÈÄ≤Êñô")  //"filament load"
-  #define MSG_FILAMENT_CHANGE_PURGE_1       _UxGT("Á≠âÂæÖ") // "Wait for"
-  #define MSG_FILAMENT_CHANGE_PURGE_2       _UxGT("Áµ≤ÊñôÊ∏ÖÈô§") // "filament purge"
-  #define MSG_FILAMENT_CHANGE_RESUME_1      _UxGT("Á≠âÂæÖÂàóÂç∞")  //"Wait for print"
-  #define MSG_FILAMENT_CHANGE_RESUME_2      _UxGT("ÊÅ¢Âæ©")  //"to resume"
-#else // LCD_HEIGHT < 4
-  #define MSG_FILAMENT_CHANGE_INIT_1        _UxGT("Ë´ãÁ≠âÂæÖ ...")  //"Please wait..."
-  #define MSG_FILAMENT_CHANGE_UNLOAD_1      _UxGT("ÈÄÄÂá∫‰∏≠ ...")  //"Ejecting..."
-  #define MSG_FILAMENT_CHANGE_INSERT_1      _UxGT("ÊèíÂÖ•‰∏¶ÈªûÊìä")  //"Insert and Click"
-  #define MSG_FILAMENT_CHANGE_HEATING_1     _UxGT("Âä†ÁÜ±‰∏≠ ...") // "Heating..."
-  #define MSG_FILAMENT_CHANGE_LOAD_1        _UxGT("ËºâÂÖ•‰∏≠ ...")  //"Loading..."
-  #define MSG_FILAMENT_CHANGE_PURGE_1       _UxGT("Ê∏ÖÈô§‰∏≠ ...") // "Purging..."
-  #define MSG_FILAMENT_CHANGE_RESUME_1      _UxGT("ÊÅ¢Âæ©‰∏≠ ...")  //"Resuming..."
-#endif // LCD_HEIGHT < 4
+  #if LCD_HEIGHT >= 4
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_3_LINE("Á≠âÂæÖÈñãÂßã", "Áµ≤Êñô", "ËÆäÊõ¥"));     //"Wait for start of the filament change"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Âç∏‰∏ãÁµ≤Êñô"));     //"Wait for filament unload"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_3_LINE("ÊèíÂÖ•Áµ≤Êñô", "‰∏¶ÊåâÈçµ", "ÁπºÁ∫å ..."));     //"Insert filament and press button to continue..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEAT          = _UxGT(MSG_2_LINE("Êåâ‰∏ãÊåâÈàï‰æÜ", "Âä†ÁÜ±Âô¥Âò¥."));     // "Press button to heat nozzle."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_2_LINE("Âä†ÁÜ±Âô¥Âò¥", "Ë´ãÁ≠âÂæÖ ..."));     // "Heating nozzle Please wait..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "ÈÄ≤Êñô"));     //"Wait for filament load"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_2_LINE("Á≠âÂæÖ", "Áµ≤ÊñôÊ∏ÖÈô§"));     // "Wait for filament purge"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_2_LINE("Á≠âÂæÖÂàóÂç∞", "ÊÅ¢Âæ©"));     //"Wait for print to resume"
+  #else // LCD_HEIGHT < 4
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INIT          = _UxGT(MSG_1_LINE("Ë´ãÁ≠âÂæÖ ..."));     //"Please wait..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_UNLOAD        = _UxGT(MSG_1_LINE("ÈÄÄÂá∫‰∏≠ ..."));     //"Ejecting..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_INSERT        = _UxGT(MSG_1_LINE("ÊèíÂÖ•‰∏¶ÈªûÊìä"));     //"Insert and Click"
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_HEATING       = _UxGT(MSG_1_LINE("Âä†ÁÜ±‰∏≠ ..."));     // "Heating..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_LOAD          = _UxGT(MSG_1_LINE("ËºâÂÖ•‰∏≠ ..."));     //"Loading..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_PURGE         = _UxGT(MSG_1_LINE("Ê∏ÖÈô§‰∏≠ ..."));     // "Purging..."
+    PROGMEM Language_Str MSG_FILAMENT_CHANGE_RESUME        = _UxGT(MSG_1_LINE("ÊÅ¢Âæ©‰∏≠ ..."));     //"Resuming..."
+  #endif // LCD_HEIGHT < 4
+}

commit 5becda25c56fe0df0541840ca095b21b3c522001
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 8 17:37:17 2019 -0500

    Followup to E renumbering

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index ce8cda2692..90b7b00758 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -216,12 +216,12 @@
   #define MSG_CSTEPS                        _UxGT("ZËª∏Ê≠•Êï∏/mm")  //"Zsteps/mm"
 #endif
 #define MSG_ESTEPS                          _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm")  //"Esteps/mm"
-#define MSG_E1STEPS                         _UxGT("Êì†Âá∫Ê©ü1Ê≠•Êï∏/mm") //"E1steps/mm"
-#define MSG_E2STEPS                         _UxGT("Êì†Âá∫Ê©ü2Ê≠•Êï∏/mm") //"E2steps/mm"
-#define MSG_E3STEPS                         _UxGT("Êì†Âá∫Ê©ü3Ê≠•Êï∏/mm") //"E3steps/mm"
-#define MSG_E4STEPS                         _UxGT("Êì†Âá∫Ê©ü4Ê≠•Êï∏/mm") //"E4steps/mm"
-#define MSG_E5STEPS                         _UxGT("Êì†Âá∫Ê©ü5Ê≠•Êï∏/mm") //"E5steps/mm"
-#define MSG_E6STEPS                         _UxGT("Êì†Âá∫Ê©ü6Ê≠•Êï∏/mm") //"E6steps/mm"
+#define MSG_E0_STEPS                        _UxGT("Êì†Âá∫Ê©ü1Ê≠•Êï∏/mm") //"E1steps/mm"
+#define MSG_E1_STEPS                        _UxGT("Êì†Âá∫Ê©ü2Ê≠•Êï∏/mm") //"E2steps/mm"
+#define MSG_E2_STEPS                        _UxGT("Êì†Âá∫Ê©ü3Ê≠•Êï∏/mm") //"E3steps/mm"
+#define MSG_E3_STEPS                        _UxGT("Êì†Âá∫Ê©ü4Ê≠•Êï∏/mm") //"E4steps/mm"
+#define MSG_E4_STEPS                        _UxGT("Êì†Âá∫Ê©ü5Ê≠•Êï∏/mm") //"E5steps/mm"
+#define MSG_E5_STEPS                        _UxGT("Êì†Âá∫Ê©ü6Ê≠•Êï∏/mm") //"E6steps/mm"
 #define MSG_TEMPERATURE                     _UxGT("Ê∫´Â∫¶")  //"Temperature"
 #define MSG_MOTION                          _UxGT("ÈÅã‰Ωú")  //"Motion"
 #define MSG_FILAMENT                        _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ")  //"Filament" menu_control_volumetric

commit b2e1f77f58a67ac02503cbe36b22a21e5afaeac0
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Sep 25 21:01:29 2019 -0500

    Fix extraneous "Home XYZ First" message

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index e9e871ac2a..ce8cda2692 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -79,7 +79,6 @@
 #define MSG_USER_MENU                       _UxGT("ÂÆ¢Âà∂ÂëΩ‰ª§") // "Custom Commands"
 
 #define MSG_UBL_DOING_G29                   _UxGT("ÊâßË°åG29") // "Doing G29"
-#define MSG_UBL_UNHOMED                     _UxGT("ÂÖàÂõûXYZÂéüÈªû") // "Home XYZ first"
 #define MSG_UBL_TOOLS                       _UxGT("UBLÂ∑•ÂÖ∑") // "UBL Tools"
 #define MSG_UBL_LEVEL_BED                   _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)") // "Unified Bed Leveling"
 #define MSG_UBL_MANUAL_MESH                 _UxGT("ÊâãÂ∑•Âª∫ÁΩë") // "Manually Build Mesh"
@@ -274,8 +273,7 @@
 #define MSG_BLTOUCH_RESET                   _UxGT("ÈáçÁΩÆBLTouch")  // "Reset BLTouch"
 #define MSG_BLTOUCH_DEPLOY                  _UxGT("ÈÉ®ÁΩ≤BLTouch") // "Deploy BLTouch"
 #define MSG_BLTOUCH_STOW                    _UxGT("Ë£ùËºâBLTouch")   // "Stow BLTouch"
-#define MSG_HOME                            _UxGT("Ê≠∏‰Ωç")  //"Home"  // Used as MSG_HOME " " MSG_X MSG_Y MSG_Z " " MSG_FIRST
-#define MSG_FIRST                           _UxGT("ÂÖà")  //"first"
+#define MSG_HOME_FIRST                      _UxGT("Ê≠∏‰Ωç %s%s%s ÂÖà")  //"Home ... first"
 #define MSG_ZPROBE_ZOFFSET                  _UxGT("ZÂÅèÁßª")  //"Z Offset"
 #define MSG_BABYSTEP_X                      _UxGT("ÂæÆÈáèË™øÊï¥XËª∏")  //"Babystep X" lcd_babystep_x, Babystepping enables the user to control the axis in tiny amounts
 #define MSG_BABYSTEP_Y                      _UxGT("ÂæÆÈáèË™øÊï¥YËª∏")  //"Babystep Y"
@@ -288,7 +286,7 @@
 #define MSG_ERR_MINTEMP                     _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶")  //"Err: MINTEMP"
 #define MSG_ERR_MAXTEMP_BED                 _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÁÜ±Â∫äÊ∫´Â∫¶")  //"Err: MAXTEMP BED"
 #define MSG_ERR_MINTEMP_BED                 _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÁÜ±Â∫äÊ∫´Â∫¶")  //"Err: MINTEMP BED"
-#define MSG_ERR_Z_HOMING                    MSG_HOME _UxGT(" ") MSG_X MSG_Y _UxGT(" ") MSG_FIRST
+#define MSG_ERR_Z_HOMING                    _UxGT("Ê≠∏‰Ωç XY ÂÖà")  //"Home XY First"
 #define MSG_HALTED                          _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü")  //"PRINTER HALTED"
 #define MSG_PLEASE_RESET                    _UxGT("Ë´ãÈáçÁΩÆ")  //"Please reset"
 #define MSG_SHORT_DAY                       _UxGT("Â§©")  //"d" // One character only

commit 263d7d37af4341b579f7fd630173e2ecee3b4e3f
Author: Marcio Teixeira <marcio@alephobjects.com>
Date:   Wed Aug 14 16:52:14 2019 -0600

    "SD card" => "Media" (#14951)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index b02d86be38..e9e871ac2a 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -33,8 +33,8 @@
 
 #define WELCOME_MSG                         MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.")  //" ready."
 #define MSG_BACK                            _UxGT("ËøîÂõû")         // ‚ÄùBack‚Äú
-#define MSG_SD_INSERTED                     _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•")  //"Card inserted"
-#define MSG_SD_REMOVED                      _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫")  //"Card removed"
+#define MSG_MEDIA_INSERTED                  _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•")  //"Card inserted"
+#define MSG_MEDIA_REMOVED                   _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫")  //"Card removed"
 #define MSG_LCD_ENDSTOPS                    _UxGT("ÊìãÂ°ä")  //"Endstops" // Max length 8 characters
 #define MSG_MAIN                            _UxGT("‰∏ªÈÅ∏ÂñÆ")  //"Main"
 #define MSG_AUTOSTART                       _UxGT("Ëá™ÂãïÈñãÂßã")  //"Autostart"
@@ -243,8 +243,8 @@
 #define MSG_PAUSE_PRINT                     _UxGT("Êö´ÂÅúÂàóÂç∞")  //"Pause print"
 #define MSG_RESUME_PRINT                    _UxGT("ÊÅ¢Âæ©ÂàóÂç∞")  //"Resume print"
 #define MSG_STOP_PRINT                      _UxGT("ÂÅúÊ≠¢ÂàóÂç∞")  //"Stop print"
-#define MSG_CARD_MENU                       _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞")  //"Print from SD"
-#define MSG_NO_CARD                         _UxGT("ÁÑ°Ë®òÊÜ∂Âç°")  //"No SD card"
+#define MSG_MEDIA_MENU                      _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞")  //"Print from SD"
+#define MSG_NO_MEDIA                        _UxGT("ÁÑ°Ë®òÊÜ∂Âç°")  //"No SD card"
 #define MSG_DWELL                           _UxGT("‰ºëÁú† ...")  //"Sleep..."
 #define MSG_USERWAIT                        _UxGT("ÈªûÊìäÁπºÁ∫å ...")  //"Click to resume..."
 #define MSG_PRINT_PAUSED                    _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú") // "Print paused"
@@ -265,8 +265,8 @@
 #define MSG_FILAMENTLOAD                    _UxGT("Ë£ùËºâÁµ≤Êñô") // "Load filament"
 #define MSG_FILAMENTUNLOAD                  _UxGT("Âç∏ËºâÁµ≤Êñô") // "Unload filament"
 #define MSG_FILAMENTUNLOAD_ALL              _UxGT("Âç∏ËºâÂÖ®ÈÉ®") // "Unload All"
-#define MSG_INIT_SDCARD                     _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°")  //"Init. SD card"
-#define MSG_CHANGE_SDCARD                   _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°")  //"Change SD card"
+#define MSG_INIT_MEDIA                      _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°")  //"Init. SD card"
+#define MSG_CHANGE_MEDIA                    _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°")  //"Change SD card"
 #define MSG_ZPROBE_OUT                      _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ")  //"Z probe out. bed" Z probe is not within the physical limits
 #define MSG_SKEW_FACTOR                     _UxGT("ÂÅèÊñúÂõ†Êï∏") // "Skew Factor"
 #define MSG_BLTOUCH                         _UxGT("BLTouch")     // "BLTouch"

commit 0fbb26c28fb714a6b34fe0b69b07fc14835c957b
Author: Joseph Bozarth <bozarjp@gmail.com>
Date:   Tue Aug 13 23:38:45 2019 -0500

    M16 - Expected Printer Check (#14924)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index ed1e40ceed..b02d86be38 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -323,6 +323,8 @@
 #define MSG_CASE_LIGHT                      _UxGT("Â§ñÊÆºÁáà") // "Case light"
 #define MSG_CASE_LIGHT_BRIGHTNESS           _UxGT("Ááà‰∫ÆÂ∫¶") // "Light BRIGHTNESS"
 
+#define MSG_EXPECTED_PRINTER                _UxGT("ÊâìÂç∞Ê©ü‰∏çÊ≠£Á¢∫") // "The printer is incorrect"
+
 #if LCD_WIDTH >= 20
   #define MSG_INFO_PRINT_COUNT              _UxGT("ÂàóÂç∞Ë®àÊï∏")  //"Print Count"
   #define MSG_INFO_COMPLETED_PRINTS         _UxGT("Â∑≤ÂÆåÊàê")  //"Completed"

commit 8f0aedeeadff5e40d5435ee48e5d32facbb46da4
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Aug 5 19:09:40 2019 -0500

    Reorder some language defines

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 26984499d1..ed1e40ceed 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -74,6 +74,7 @@
 #define MSG_LEVEL_CORNERS                   _UxGT("Ë™øÂπ≥ÈÇäËßí") // "Level corners"
 
 #define MSG_NEXT_CORNER                     _UxGT("‰∏ã‰∏™ÈÇäËßí") // "Next corner"
+#define MSG_EDIT_MESH                       _UxGT("Á∑®ËºØÁ∂≤Ê†º") // "Edit Mesh"
 #define MSG_EDITING_STOPPED                 _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂ∑≤ÂÅúÊ≠¢") // "Mesh Editing Stopped"
 #define MSG_USER_MENU                       _UxGT("ÂÆ¢Âà∂ÂëΩ‰ª§") // "Custom Commands"
 
@@ -82,7 +83,6 @@
 #define MSG_UBL_TOOLS                       _UxGT("UBLÂ∑•ÂÖ∑") // "UBL Tools"
 #define MSG_UBL_LEVEL_BED                   _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)") // "Unified Bed Leveling"
 #define MSG_UBL_MANUAL_MESH                 _UxGT("ÊâãÂ∑•Âª∫ÁΩë") // "Manually Build Mesh"
-
 #define MSG_UBL_BC_INSERT                   _UxGT("ÊîæÁΩÆÂ¢äÁâá‰∏¶Ê∏¨Èáè") // "Place shim & measure"
 #define MSG_UBL_BC_INSERT2                  _UxGT("Ê∏¨Èáè") // "Measure"
 #define MSG_UBL_BC_REMOVE                   _UxGT("ÁßªÈô§‰∏¶Ê∏¨ÈáèÁÜ±Â∫ä") // "Remove & measure bed"
@@ -118,7 +118,6 @@
 #define MSG_UBL_OUTPUT_MAP_CSV              _UxGT("Ëº∏Âá∫Âà∞CSV") // "Output for CSV"
 #define MSG_UBL_OUTPUT_MAP_BACKUP           _UxGT("Ëº∏Âá∫Âà∞ÂÇô‰ªΩ") // "Off Printer Backup"
 #define MSG_UBL_INFO_UBL                    _UxGT("Ëº∏Âá∫UBL‰ø°ÊÅØ") // "Output UBL Info"
-#define MSG_EDIT_MESH                       _UxGT("Á∑®ËºØÁ∂≤Ê†º") // "Edit Mesh"
 #define MSG_UBL_FILLIN_AMOUNT               _UxGT("Â°´ÂÖÖÂêàË®à") // "Fill-in Amount"
 #define MSG_UBL_MANUAL_FILLIN               _UxGT("ÊâãÂ∑•Â°´ÂÖÖ") // "Manual Fill-in"
 #define MSG_UBL_SMART_FILLIN                _UxGT("ËÅ∞ÊòéÂ°´ÂÖÖ") // "Smart Fill-in"
@@ -133,7 +132,7 @@
 #define MSG_UBL_SAVE_MESH                   _UxGT("‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º") // "Save Bed Mesh"
 #define MSG_MESH_LOADED                     _UxGT("Á∂≤Ê†º %i Â∑≤Ë£ùËºâ") // "Mesh %i loaded"
 #define MSG_MESH_SAVED                      _UxGT("Á∂≤Ê†º %i Â∑≤‰øùÂ≠ò") // "Mesh %i saved"
-#define MSG_NO_STORAGE                      _UxGT("Ê≤íÊúâÂ≠òÂÑ≤") // "No storage"
+#define MSG_UBL_NO_STORAGE                  _UxGT("Ê≤íÊúâÂ≠òÂÑ≤") // "No storage"
 #define MSG_UBL_SAVE_ERROR                  _UxGT("ÈåØË™§: UBL‰øùÂ≠ò") // "Err: UBL Save"
 #define MSG_UBL_RESTORE_ERROR               _UxGT("ÈåØË™§: UBLÈÇÑÂéü") // "Err: UBL Restore"
 #define MSG_UBL_Z_OFFSET_STOPPED            _UxGT("ZÂÅèÁßªÂ∑≤ÂÅúÊ≠¢") // "Z-Offset Stopped"

commit f8aa52346f8a514302f962b484dbf2fbe7ce4c63
Author: MarcelMo <mommsen@gmx.de>
Date:   Tue Jul 30 09:16:26 2019 +0200

    Configurable Z move distance (#14593)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 90ac8bd573..26984499d1 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -164,7 +164,7 @@
 #define MSG_MOVE_Y                          _UxGT("ÁßªÂãïY")  //"Move Y"
 #define MSG_MOVE_Z                          _UxGT("ÁßªÂãïZ")  //"Move Z"
 #define MSG_MOVE_E                          _UxGT("Êì†Âá∫Ê©ü")  //"Extruder"
-#define MSG_MOVE_0025MM                     _UxGT("ÁßªÂãï 0.025 mm")  //"Move 0.025mm"
+#define MSG_MOVE_Z_DIST                     _UxGT("ÁßªÂãï %s mm")  //"Move 0.025mm"
 #define MSG_MOVE_01MM                       _UxGT("ÁßªÂãï 0.1 mm")  //"Move 0.1mm"
 #define MSG_MOVE_1MM                        _UxGT("ÁßªÂãï 1 mm")  //"Move 1mm"
 #define MSG_MOVE_10MM                       _UxGT("ÁßªÂãï 10 mm")  //"Move 10mm"

commit ca7f56e60b66fdad0ec89f5f73bdd8680b99e06a
Author: Tanguy Pruvot <tpruvot@users.noreply.github.com>
Date:   Mon Jul 1 10:17:50 2019 +0200

    Add 0.025mm Manual Move for Z (#14456)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 43bfabc3fb..90ac8bd573 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -164,6 +164,7 @@
 #define MSG_MOVE_Y                          _UxGT("ÁßªÂãïY")  //"Move Y"
 #define MSG_MOVE_Z                          _UxGT("ÁßªÂãïZ")  //"Move Z"
 #define MSG_MOVE_E                          _UxGT("Êì†Âá∫Ê©ü")  //"Extruder"
+#define MSG_MOVE_0025MM                     _UxGT("ÁßªÂãï 0.025 mm")  //"Move 0.025mm"
 #define MSG_MOVE_01MM                       _UxGT("ÁßªÂãï 0.1 mm")  //"Move 0.1mm"
 #define MSG_MOVE_1MM                        _UxGT("ÁßªÂãï 1 mm")  //"Move 1mm"
 #define MSG_MOVE_10MM                       _UxGT("ÁßªÂãï 10 mm")  //"Move 10mm"

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 40a1448c11..43bfabc3fb 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit 9a515cbd3268b30eb7a4dc9ea0f96f3a253d9063
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Mar 14 02:26:07 2019 -0500

    Fix Pause Print message and behavior (#13394)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 23d3a997e3..40a1448c11 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -256,8 +256,8 @@
 #define MSG_CONTROL_RETRACT_SWAP            _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm")  //"Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
 #define MSG_CONTROL_RETRACTF                _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s")  //"Retract  V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
 #define MSG_CONTROL_RETRACT_ZHOP            _UxGT("Hop mm")  //"Hop mm" retract_zraise, retract Z-lift
-#define MSG_CONTROL_RETRACT_RECOVER         _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm")  //"UnRet +mm" retract_recover_length, additional recover length (mm, added to retract length when recovering)
-#define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm")  //"S UnRet+mm" swap_retract_recover_length, additional swap recover length (mm, added to retract length when recovering from extruder change)
+#define MSG_CONTROL_RETRACT_RECOVER         _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm")  //"UnRet +mm" retract_recover_extra, additional recover length (mm, added to retract length when recovering)
+#define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm")  //"S UnRet+mm" swap_retract_recover_extra, additional swap recover length (mm, added to retract length when recovering from extruder change)
 #define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s")  //"UnRet V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
 #define MSG_CONTROL_RETRACT_RECOVER_SWAPF   _UxGT("S UnRet V") // "S UnRet V"
 #define MSG_AUTORETRACT                     _UxGT("Ëá™ÂãïÂõûÁ∏Æ")  //"AutoRetr." autoretract_enabled,

commit 0feeef26048883640b37ebe3994730f31ef6e922
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Feb 12 15:06:53 2019 -0600

    Update copyright in headers

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 17634448b5..23d3a997e3 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm

commit 1a79878dff2d4846b1f58a45b8880a346fb9cb41
Author: teemuatlut <teemu.mantykallio@live.fi>
Date:   Sat Jan 12 00:56:23 2019 +0200

    Remove TMC_Z_CALIBRATION in favor of Z_STEPPER_AUTO_ALIGN

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index d823ad4d6f..17634448b5 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -45,7 +45,6 @@
 #define MSG_AUTO_HOME_X                     _UxGT("ÂõûXÂéüÈªû")  //"Home X"
 #define MSG_AUTO_HOME_Y                     _UxGT("ÂõûYÂéüÈªû")  //"Home Y"
 #define MSG_AUTO_HOME_Z                     _UxGT("ÂõûZÂéüÈªû")  //"Home Z"
-#define MSG_TMC_Z_CALIBRATION               _UxGT("‚äøÊ†°Ê∫ñZ")
 #define MSG_LEVEL_BED_HOMING                _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏ÂéüÈªû")  //"Homing XYZ"
 #define MSG_LEVEL_BED_WAITING               _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥")  //"Click to Begin"
 #define MSG_LEVEL_BED_NEXT_POINT            _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû")  //"Next Point"

commit 50af1d1e0874c787fcafc9cf71c6a8ef55b20643
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Nov 12 17:04:00 2018 -0600

    Differentiate translated On/Off from Serial ON/OFF

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 5f28b48d0b..d823ad4d6f 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -180,8 +180,8 @@
 #define MSG_MAX                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ§ß")  //" " LCD_STR_THERMOMETER " Max"
 #define MSG_FACTOR                          _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" Á≥ªÊï∏")  //" " LCD_STR_THERMOMETER " Fact"
 #define MSG_AUTOTEMP                        _UxGT("Ëá™ÂãïÊéßÊ∫´")  //"Autotemp"
-#define MSG_ON                              _UxGT("Èñã ")  //"On "
-#define MSG_OFF                             _UxGT("Èóú ")  //"Off"
+#define MSG_LCD_ON                          _UxGT("Èñã")  //"On"
+#define MSG_LCD_OFF                         _UxGT("Èóú")  //"Off"
 #define MSG_PID_P                           _UxGT("PID-P")  //"PID-P"
 #define MSG_PID_I                           _UxGT("PID-I")  //"PID-I"
 #define MSG_PID_D                           _UxGT("PID-D")  //"PID-D"

commit a0c795b097a30eff006c8dff178abf5f1f1907fa
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 11 12:16:24 2018 -0600

    Encapsulate common display code in a singleton (#12395)
    
    * Encapsulate common LCD code in a singleton
    * Depend more UBL code on UBL_DEVEL_DEBUGGING
      - Since most users don't need the debugging on at all times, this helps reduce the default build size for UBL by over 2K, a little closer to fitting on 128K boards.

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index c64ac2f2b6..5f28b48d0b 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -324,7 +324,7 @@
 #define MSG_CASE_LIGHT                      _UxGT("Â§ñÊÆºÁáà") // "Case light"
 #define MSG_CASE_LIGHT_BRIGHTNESS           _UxGT("Ááà‰∫ÆÂ∫¶") // "Light BRIGHTNESS"
 
-#if LCD_WIDTH > 19
+#if LCD_WIDTH >= 20
   #define MSG_INFO_PRINT_COUNT              _UxGT("ÂàóÂç∞Ë®àÊï∏")  //"Print Count"
   #define MSG_INFO_COMPLETED_PRINTS         _UxGT("Â∑≤ÂÆåÊàê")  //"Completed"
   #define MSG_INFO_PRINT_TIME               _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì")  //"Total print time"

commit fc84878cbaf7a4ed5931f94fd4934619d7fb945b
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Nov 3 02:20:06 2018 -0500

    MSG_UBL_EDIT_MESH_MENU => MSG_EDIT_MESH

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index f780cbe043..c64ac2f2b6 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -119,7 +119,7 @@
 #define MSG_UBL_OUTPUT_MAP_CSV              _UxGT("Ëº∏Âá∫Âà∞CSV") // "Output for CSV"
 #define MSG_UBL_OUTPUT_MAP_BACKUP           _UxGT("Ëº∏Âá∫Âà∞ÂÇô‰ªΩ") // "Off Printer Backup"
 #define MSG_UBL_INFO_UBL                    _UxGT("Ëº∏Âá∫UBL‰ø°ÊÅØ") // "Output UBL Info"
-#define MSG_UBL_EDIT_MESH_MENU              _UxGT("Á∑®ËºØÁ∂≤Ê†º") // "Edit Mesh"
+#define MSG_EDIT_MESH                       _UxGT("Á∑®ËºØÁ∂≤Ê†º") // "Edit Mesh"
 #define MSG_UBL_FILLIN_AMOUNT               _UxGT("Â°´ÂÖÖÂêàË®à") // "Fill-in Amount"
 #define MSG_UBL_MANUAL_FILLIN               _UxGT("ÊâãÂ∑•Â°´ÂÖÖ") // "Manual Fill-in"
 #define MSG_UBL_SMART_FILLIN                _UxGT("ËÅ∞ÊòéÂ°´ÂÖÖ") // "Smart Fill-in"

commit f5eab912ed6d336f2c37a688a0ec822ed3d42fcc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Nov 4 02:25:55 2018 -0600

    Apply #pragma once, misc cleanup (#12322)
    
    * Apply #pragma once in headers
    * Adjust some thermistors formatting
    * Misc cleanup and formatting

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index ff2d690650..f780cbe043 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -19,6 +19,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
+#pragma once
 
 /**
  * Traditional Chinese
@@ -27,8 +28,6 @@
  * See also http://marlinfw.org/docs/development/lcd_language.html
  *
  */
-#ifndef LANGUAGE_ZH_TW_H
-#define LANGUAGE_ZH_TW_H
 
 #define CHARSIZE 3
 
@@ -384,5 +383,3 @@
   #define MSG_FILAMENT_CHANGE_PURGE_1       _UxGT("Ê∏ÖÈô§‰∏≠ ...") // "Purging..."
   #define MSG_FILAMENT_CHANGE_RESUME_1      _UxGT("ÊÅ¢Âæ©‰∏≠ ...")  //"Resuming..."
 #endif // LCD_HEIGHT < 4
-
-#endif // LANGUAGE_ZH_TW_H

commit 774a6e81995b23c383bbc2fdcb5f6f5c014043f2
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Oct 27 13:07:03 2018 -0500

    Drop TALL_FONT_CORRECTION

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 3ae7f70212..ff2d690650 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -30,8 +30,6 @@
 #ifndef LANGUAGE_ZH_TW_H
 #define LANGUAGE_ZH_TW_H
 
-//#define TALL_FONT_CORRECTION (1)
-
 #define CHARSIZE 3
 
 #define WELCOME_MSG                         MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.")  //" ready."

commit 2bf18950ab2070e842c91057d5812dcaa1bff9a2
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 23 16:00:34 2018 -0500

    Refactor LCD menus

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 1116a9eab1..3ae7f70212 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -229,7 +229,7 @@
 #define MSG_E6STEPS                         _UxGT("Êì†Âá∫Ê©ü6Ê≠•Êï∏/mm") //"E6steps/mm"
 #define MSG_TEMPERATURE                     _UxGT("Ê∫´Â∫¶")  //"Temperature"
 #define MSG_MOTION                          _UxGT("ÈÅã‰Ωú")  //"Motion"
-#define MSG_FILAMENT                        _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ")  //"Filament" lcd_control_volumetric_menu
+#define MSG_FILAMENT                        _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ")  //"Filament" menu_control_volumetric
 #define MSG_VOLUMETRIC_ENABLED              _UxGT("Ê∏¨ÂÆπÁ©çmm¬≥")  //"E in mm3" volumetric_enabled
 #define MSG_FILAMENT_DIAM                   _UxGT("Áµ≤ÊñôÁõ¥Âæë")  //"Fil. Dia."
 #define MSG_FILAMENT_UNLOAD                 _UxGT("Âç∏Ëºâ mm") // "Unload mm"

commit 3c9daf322a3cda6e618d2f3e0c56a9cc6d68a835
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Oct 27 13:22:15 2018 -0500

    MSG_CNG_SDCARD => MSG_CHANGE_SDCARD

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 5e41128dee..1116a9eab1 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -270,7 +270,7 @@
 #define MSG_FILAMENTUNLOAD                  _UxGT("Âç∏ËºâÁµ≤Êñô") // "Unload filament"
 #define MSG_FILAMENTUNLOAD_ALL              _UxGT("Âç∏ËºâÂÖ®ÈÉ®") // "Unload All"
 #define MSG_INIT_SDCARD                     _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°")  //"Init. SD card"
-#define MSG_CNG_SDCARD                      _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°")  //"Change SD card"
+#define MSG_CHANGE_SDCARD                   _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°")  //"Change SD card"
 #define MSG_ZPROBE_OUT                      _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ")  //"Z probe out. bed" Z probe is not within the physical limits
 #define MSG_SKEW_FACTOR                     _UxGT("ÂÅèÊñúÂõ†Êï∏") // "Skew Factor"
 #define MSG_BLTOUCH                         _UxGT("BLTouch")     // "BLTouch"

commit 2f873a119f9de2a7f2e6b40dd08f8a51710ef1d1
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 23 15:39:52 2018 -0500

    Revert some UBL strings

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index e795afed87..5e41128dee 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -99,7 +99,7 @@
 #define MSG_UBL_EDIT_CUSTOM_MESH            _UxGT("Á∑®ËºØÂÆ¢Êà∂Á∂≤Ê†º") // "Edit Custom Mesh"
 #define MSG_UBL_FINE_TUNE_MESH              _UxGT("Á¥∞Ë™øÁ∂≤Ê†º") // "Fine Tuning Mesh"
 #define MSG_UBL_DONE_EDITING_MESH           _UxGT("ÂÆåÊàêÁ∑®ËºØÁ∂≤Ê†º") // "Done Editing Mesh"
-#define MSG_UBL_BUILD_MESH_CUSTOM           _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º") // "Build Custom Mesh"
+#define MSG_UBL_BUILD_CUSTOM_MESH           _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º") // "Build Custom Mesh"
 #define MSG_UBL_BUILD_MESH_MENU             _UxGT("ÂâµË®≠Á∂≤Ê†º") // "Build Mesh"
 #define MSG_UBL_BUILD_MESH_M1               _UxGT("ÂâµË®≠" PREHEAT_1_LABEL "Á∂≤Ê†º") // "Build PREHEAT_1_LABEL Mesh"
 #define MSG_UBL_BUILD_MESH_M2               _UxGT("ÂâµË®≠" PREHEAT_2_LABEL "Á∂≤Ê†º") // "Build PREHEAT_2_LABEL Mesh"
@@ -109,7 +109,7 @@
 #define MSG_UBL_VALIDATE_MESH_MENU          _UxGT("ÊâπÂáÜÁ∂≤Ê†º") // "Validate Mesh"
 #define MSG_UBL_VALIDATE_MESH_M1            _UxGT("ÊâπÂáÜ" PREHEAT_1_LABEL "Á∂≤Ê†º") // "Validate PREHEAT_1_LABEL Mesh"
 #define MSG_UBL_VALIDATE_MESH_M2            _UxGT("ÊâπÂáÜ" PREHEAT_2_LABEL "Á∂≤Ê†º") // "Validate PREHEAT_2_LABEL Mesh"
-#define MSG_UBL_VALIDATE_MESH_CUSTOM        _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º") // "Validate Custom Mesh"
+#define MSG_UBL_VALIDATE_CUSTOM_MESH        _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º") // "Validate Custom Mesh"
 #define MSG_UBL_CONTINUE_MESH               _UxGT("ÁπºÁ∫åÁÜ±Â∫äÁ∂≤Ê†º") // "Continue Bed Mesh"
 #define MSG_UBL_MESH_LEVELING               _UxGT("Á∂≤Ê†ºË™øÂπ≥") // "Mesh Leveling"
 #define MSG_UBL_3POINT_MESH_LEVELING        _UxGT("‰∏âÈªûË™øÂπ≥") // "3-Point Leveling"

commit a93e9e6e9b96512e1dda6f9e1cfb836a4a4e0fde
Author: Ludy <Ludy87@users.noreply.github.com>
Date:   Tue Oct 23 22:38:17 2018 +0200

    Use preheat labels in place of PLA/ABS (#12194)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 89f04f7470..e795afed87 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -57,12 +57,12 @@
 #define MSG_SET_HOME_OFFSETS                _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª")  //"Set home offsets"
 #define MSG_HOME_OFFSETS_APPLIED            _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®")  //"Offsets applied"
 #define MSG_SET_ORIGIN                      _UxGT("Ë®≠ÁΩÆÂéüÈªû")  //"Set origin"
-#define MSG_PREHEAT_1                       _UxGT("È†êÁÜ±PLA")  //"Preheat PLA"
+#define MSG_PREHEAT_1                       _UxGT("È†êÁÜ±" PREHEAT_1_LABEL)  //"Preheat PREHEAT_1_LABEL"
 #define MSG_PREHEAT_1_N                     MSG_PREHEAT_1 _UxGT(" ")  //MSG_PREHEAT_1 " "
 #define MSG_PREHEAT_1_ALL                   MSG_PREHEAT_1 _UxGT(" ÂÖ®ÈÉ®")  //MSG_PREHEAT_1 " All"
 #define MSG_PREHEAT_1_BEDONLY               MSG_PREHEAT_1 _UxGT(" ÁÜ±Â∫ä")  //MSG_PREHEAT_1 " Bed"
 #define MSG_PREHEAT_1_SETTINGS              MSG_PREHEAT_1 _UxGT(" Ë®≠ÁΩÆ")  //MSG_PREHEAT_1 " conf"
-#define MSG_PREHEAT_2                       _UxGT("È†êÁÜ±ABS")  //"Preheat ABS"
+#define MSG_PREHEAT_2                       _UxGT("È†êÁÜ±" PREHEAT_2_LABEL)  //"Preheat PREHEAT_2_LABEL"
 #define MSG_PREHEAT_2_N                     MSG_PREHEAT_2 _UxGT(" ")  //MSG_PREHEAT_2 " "
 #define MSG_PREHEAT_2_ALL                   MSG_PREHEAT_2 _UxGT(" ÂÖ®ÈÉ®")  //MSG_PREHEAT_2 " All"
 #define MSG_PREHEAT_2_BEDONLY               MSG_PREHEAT_2 _UxGT(" ÁÜ±Â∫ä")  //MSG_PREHEAT_2 " Bed"
@@ -93,23 +93,23 @@
 #define MSG_UBL_MOVING_TO_NEXT              _UxGT("ÁßªÂãïÂà∞‰∏ã‰∏ÄÂÄã") // "Moving to next"
 #define MSG_UBL_ACTIVATE_MESH               _UxGT("ÊøÄÊ¥ªUBL") // "Activate UBL"
 #define MSG_UBL_DEACTIVATE_MESH             _UxGT("ÈóúÈñâUBL") // "Deactivate UBL"
-#define MSG_UBL_SET_BED_TEMP                _UxGT("Ë®≠ÁΩÆÁÜ±Â∫äÊ∫´Â∫¶") // "Bed Temp"
-#define MSG_UBL_SET_HOTEND_TEMP             _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶") // "Hotend Temp"
+#define MSG_UBL_SET_TEMP_BED                _UxGT("Ë®≠ÁΩÆÁÜ±Â∫äÊ∫´Â∫¶") // "Bed Temp"
+#define MSG_UBL_SET_TEMP_HOTEND             _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶") // "Hotend Temp"
 #define MSG_UBL_MESH_EDIT                   _UxGT("Á∂≤Ê†ºÁ∑®ËºØ") // "Mesh Edit"
 #define MSG_UBL_EDIT_CUSTOM_MESH            _UxGT("Á∑®ËºØÂÆ¢Êà∂Á∂≤Ê†º") // "Edit Custom Mesh"
 #define MSG_UBL_FINE_TUNE_MESH              _UxGT("Á¥∞Ë™øÁ∂≤Ê†º") // "Fine Tuning Mesh"
 #define MSG_UBL_DONE_EDITING_MESH           _UxGT("ÂÆåÊàêÁ∑®ËºØÁ∂≤Ê†º") // "Done Editing Mesh"
-#define MSG_UBL_BUILD_CUSTOM_MESH           _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º") // "Build Custom Mesh"
+#define MSG_UBL_BUILD_MESH_CUSTOM           _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º") // "Build Custom Mesh"
 #define MSG_UBL_BUILD_MESH_MENU             _UxGT("ÂâµË®≠Á∂≤Ê†º") // "Build Mesh"
-#define MSG_UBL_BUILD_PLA_MESH              _UxGT("ÂâµË®≠PLAÁ∂≤Ê†º") // "Build PLA Mesh"
-#define MSG_UBL_BUILD_ABS_MESH              _UxGT("ÂâµË®≠ABSÁ∂≤Ê†º") // "Build ABS Mesh"
+#define MSG_UBL_BUILD_MESH_M1               _UxGT("ÂâµË®≠" PREHEAT_1_LABEL "Á∂≤Ê†º") // "Build PREHEAT_1_LABEL Mesh"
+#define MSG_UBL_BUILD_MESH_M2               _UxGT("ÂâµË®≠" PREHEAT_2_LABEL "Á∂≤Ê†º") // "Build PREHEAT_2_LABEL Mesh"
 #define MSG_UBL_BUILD_COLD_MESH             _UxGT("ÂâµË®≠ÂÜ∑Á∂≤Ê†º") // "Build Cold Mesh"
 #define MSG_UBL_MESH_HEIGHT_ADJUST          _UxGT("Ë™øÊï¥Á∂≤Ê†ºÈ´òÂ∫¶") // "Adjust Mesh Height"
 #define MSG_UBL_MESH_HEIGHT_AMOUNT          _UxGT("È´òÂ∫¶ÂêàË®à") // "Height Amount"
 #define MSG_UBL_VALIDATE_MESH_MENU          _UxGT("ÊâπÂáÜÁ∂≤Ê†º") // "Validate Mesh"
-#define MSG_UBL_VALIDATE_PLA_MESH           _UxGT("ÊâπÂáÜPLAÁ∂≤Ê†º") // "Validate PLA Mesh"
-#define MSG_UBL_VALIDATE_ABS_MESH           _UxGT("ÊâπÂáÜABSÁ∂≤Ê†º") // "Validate ABS Mesh"
-#define MSG_UBL_VALIDATE_CUSTOM_MESH        _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º") // "Validate Custom Mesh"
+#define MSG_UBL_VALIDATE_MESH_M1            _UxGT("ÊâπÂáÜ" PREHEAT_1_LABEL "Á∂≤Ê†º") // "Validate PREHEAT_1_LABEL Mesh"
+#define MSG_UBL_VALIDATE_MESH_M2            _UxGT("ÊâπÂáÜ" PREHEAT_2_LABEL "Á∂≤Ê†º") // "Validate PREHEAT_2_LABEL Mesh"
+#define MSG_UBL_VALIDATE_MESH_CUSTOM        _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º") // "Validate Custom Mesh"
 #define MSG_UBL_CONTINUE_MESH               _UxGT("ÁπºÁ∫åÁÜ±Â∫äÁ∂≤Ê†º") // "Continue Bed Mesh"
 #define MSG_UBL_MESH_LEVELING               _UxGT("Á∂≤Ê†ºË™øÂπ≥") // "Mesh Leveling"
 #define MSG_UBL_3POINT_MESH_LEVELING        _UxGT("‰∏âÈªûË™øÂπ≥") // "3-Point Leveling"

commit 8bf596bd4cb6879eb50994d497b30acf84082395
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Oct 16 16:46:24 2018 -0500

    RETRACT_ZLIFT => RETRACT_ZRAISE

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index a4885a80da..89f04f7470 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -259,7 +259,7 @@
 #define MSG_CONTROL_RETRACT                 _UxGT("ÂõûÁ∏ÆÈï∑Â∫¶mm")  //"Retract mm" retract_length, retract length (positive mm)
 #define MSG_CONTROL_RETRACT_SWAP            _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm")  //"Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
 #define MSG_CONTROL_RETRACTF                _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s")  //"Retract  V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
-#define MSG_CONTROL_RETRACT_ZLIFT           _UxGT("Hop mm")  //"Hop mm" retract_zlift, retract Z-lift
+#define MSG_CONTROL_RETRACT_ZHOP            _UxGT("Hop mm")  //"Hop mm" retract_zraise, retract Z-lift
 #define MSG_CONTROL_RETRACT_RECOVER         _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm")  //"UnRet +mm" retract_recover_length, additional recover length (mm, added to retract length when recovering)
 #define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm")  //"S UnRet+mm" swap_retract_recover_length, additional swap recover length (mm, added to retract length when recovering from extruder change)
 #define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s")  //"UnRet V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)

commit f38570ac554d42ef8a3c5e0f177edcafe0438ab7
Author: InsanityAutomation <38436470+InsanityAutomation@users.noreply.github.com>
Date:   Wed Sep 19 16:04:34 2018 -0400

    Add custom user menu title (#11769)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 60e1661cf0..a4885a80da 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -79,8 +79,8 @@
 
 #define MSG_NEXT_CORNER                     _UxGT("‰∏ã‰∏™ÈÇäËßí") // "Next corner"
 #define MSG_EDITING_STOPPED                 _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂ∑≤ÂÅúÊ≠¢") // "Mesh Editing Stopped"
-
 #define MSG_USER_MENU                       _UxGT("ÂÆ¢Âà∂ÂëΩ‰ª§") // "Custom Commands"
+
 #define MSG_UBL_DOING_G29                   _UxGT("ÊâßË°åG29") // "Doing G29"
 #define MSG_UBL_UNHOMED                     _UxGT("ÂÖàÂõûXYZÂéüÈªû") // "Home XYZ first"
 #define MSG_UBL_TOOLS                       _UxGT("UBLÂ∑•ÂÖ∑") // "UBL Tools"
@@ -161,9 +161,9 @@
 #define MSG_INTENSITY_B                     _UxGT("ËìùÈ£ΩÂíåÂ∫¶") // "Blue Intensity")
 #define MSG_INTENSITY_W                     _UxGT("ÁôΩÈ£ΩÂíåÂ∫¶") // "White Intensity")
 #define MSG_LED_BRIGHTNESS                  _UxGT("‰∫ÆÂ∫¶") // "Brightness")
+
 #define MSG_MOVING                          _UxGT("ÁßªÂä® ...") // "Moving...")
 #define MSG_FREE_XY                         _UxGT("ÈáäÊîæ XY") // "Free XY")
-
 #define MSG_MOVE_X                          _UxGT("ÁßªÂãïX")  //"Move X"
 #define MSG_MOVE_Y                          _UxGT("ÁßªÂãïY")  //"Move Y"
 #define MSG_MOVE_Z                          _UxGT("ÁßªÂãïZ")  //"Move Z"

commit 39732838b499d29b4d23aff3c662affa50bc611b
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Sep 17 00:57:26 2018 -0500

    Tweak indent of Chinese languages

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 8500a4f9a8..60e1661cf0 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -328,17 +328,17 @@
 #define MSG_CASE_LIGHT_BRIGHTNESS           _UxGT("Ááà‰∫ÆÂ∫¶") // "Light BRIGHTNESS"
 
 #if LCD_WIDTH > 19
-#define MSG_INFO_PRINT_COUNT              _UxGT("ÂàóÂç∞Ë®àÊï∏")  //"Print Count"
-#define MSG_INFO_COMPLETED_PRINTS         _UxGT("Â∑≤ÂÆåÊàê")  //"Completed"
-#define MSG_INFO_PRINT_TIME               _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì")  //"Total print time"
-#define MSG_INFO_PRINT_LONGEST            _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì")  //"Longest job time"
-#define MSG_INFO_PRINT_FILAMENT           _UxGT("Á∏ΩË®àÊì†Âá∫")  //"Extruded total"
+  #define MSG_INFO_PRINT_COUNT              _UxGT("ÂàóÂç∞Ë®àÊï∏")  //"Print Count"
+  #define MSG_INFO_COMPLETED_PRINTS         _UxGT("Â∑≤ÂÆåÊàê")  //"Completed"
+  #define MSG_INFO_PRINT_TIME               _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì")  //"Total print time"
+  #define MSG_INFO_PRINT_LONGEST            _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì")  //"Longest job time"
+  #define MSG_INFO_PRINT_FILAMENT           _UxGT("Á∏ΩË®àÊì†Âá∫")  //"Extruded total"
 #else
-#define MSG_INFO_PRINT_COUNT              _UxGT("ÂàóÂç∞Êï∏")  //"Prints"
-#define MSG_INFO_COMPLETED_PRINTS         _UxGT("ÂÆåÊàê")  //"Completed"
-#define MSG_INFO_PRINT_TIME               _UxGT("Á∏ΩÂÖ±")  //"Total"
-#define MSG_INFO_PRINT_LONGEST            _UxGT("ÊúÄÈï∑")  //"Longest"
-#define MSG_INFO_PRINT_FILAMENT           _UxGT("Â∑≤Êì†Âá∫")  //"Extruded"
+  #define MSG_INFO_PRINT_COUNT              _UxGT("ÂàóÂç∞Êï∏")  //"Prints"
+  #define MSG_INFO_COMPLETED_PRINTS         _UxGT("ÂÆåÊàê")  //"Completed"
+  #define MSG_INFO_PRINT_TIME               _UxGT("Á∏ΩÂÖ±")  //"Total"
+  #define MSG_INFO_PRINT_LONGEST            _UxGT("ÊúÄÈï∑")  //"Longest"
+  #define MSG_INFO_PRINT_FILAMENT           _UxGT("Â∑≤Êì†Âá∫")  //"Extruded"
 #endif
 
 #define MSG_INFO_MIN_TEMP                   _UxGT("ÊúÄ‰ΩéÊ∫´Â∫¶")  //"Min Temp"
@@ -359,33 +359,32 @@
 #define MSG_M600_TOO_COLD                   _UxGT("M600: Â§™Ê∂º") // "M600: Too cold"
 
 #if LCD_HEIGHT >= 4
-#define MSG_FILAMENT_CHANGE_INIT_1          _UxGT("Á≠âÂæÖÈñãÂßã")  //"Wait for start"
-#define MSG_FILAMENT_CHANGE_INIT_2          _UxGT("Áµ≤Êñô")  //"of the filament"
-#define MSG_FILAMENT_CHANGE_INIT_3          _UxGT("ËÆäÊõ¥")  //"change"
-#define MSG_FILAMENT_CHANGE_UNLOAD_1        _UxGT("Á≠âÂæÖ")  //"Wait for"
-#define MSG_FILAMENT_CHANGE_UNLOAD_2        _UxGT("Âç∏‰∏ãÁµ≤Êñô")  //"filament unload"
-#define MSG_FILAMENT_CHANGE_INSERT_1        _UxGT("ÊèíÂÖ•Áµ≤Êñô")  //"Insert filament"
-#define MSG_FILAMENT_CHANGE_INSERT_2        _UxGT("‰∏¶ÊåâÈçµ")  //"and press button"
-#define MSG_FILAMENT_CHANGE_INSERT_3        _UxGT("ÁπºÁ∫å ...")  //"to continue..."
-#define MSG_FILAMENT_CHANGE_HEAT_1          _UxGT("Êåâ‰∏ãÊåâÈàï‰æÜ") // "Press button to"
-#define MSG_FILAMENT_CHANGE_HEAT_2          _UxGT("Âä†ÁÜ±Âô¥Âò¥.") // "heat nozzle."
-#define MSG_FILAMENT_CHANGE_HEATING_1       _UxGT("Âä†ÁÜ±Âô¥Âò¥") // "Heating nozzle"
-#define MSG_FILAMENT_CHANGE_HEATING_2       _UxGT("Ë´ãÁ≠âÂæÖ ...") // "Please wait..."
-#define MSG_FILAMENT_CHANGE_LOAD_1          _UxGT("Á≠âÂæÖ")  //"Wait for"
-#define MSG_FILAMENT_CHANGE_LOAD_2          _UxGT("ÈÄ≤Êñô")  //"filament load"
-#define MSG_FILAMENT_CHANGE_PURGE_1         _UxGT("Á≠âÂæÖ") // "Wait for"
-#define MSG_FILAMENT_CHANGE_PURGE_2         _UxGT("Áµ≤ÊñôÊ∏ÖÈô§") // "filament purge"
-#define MSG_FILAMENT_CHANGE_RESUME_1        _UxGT("Á≠âÂæÖÂàóÂç∞")  //"Wait for print"
-#define MSG_FILAMENT_CHANGE_RESUME_2        _UxGT("ÊÅ¢Âæ©")  //"to resume"
-
+  #define MSG_FILAMENT_CHANGE_INIT_1        _UxGT("Á≠âÂæÖÈñãÂßã")  //"Wait for start"
+  #define MSG_FILAMENT_CHANGE_INIT_2        _UxGT("Áµ≤Êñô")  //"of the filament"
+  #define MSG_FILAMENT_CHANGE_INIT_3        _UxGT("ËÆäÊõ¥")  //"change"
+  #define MSG_FILAMENT_CHANGE_UNLOAD_1      _UxGT("Á≠âÂæÖ")  //"Wait for"
+  #define MSG_FILAMENT_CHANGE_UNLOAD_2      _UxGT("Âç∏‰∏ãÁµ≤Êñô")  //"filament unload"
+  #define MSG_FILAMENT_CHANGE_INSERT_1      _UxGT("ÊèíÂÖ•Áµ≤Êñô")  //"Insert filament"
+  #define MSG_FILAMENT_CHANGE_INSERT_2      _UxGT("‰∏¶ÊåâÈçµ")  //"and press button"
+  #define MSG_FILAMENT_CHANGE_INSERT_3      _UxGT("ÁπºÁ∫å ...")  //"to continue..."
+  #define MSG_FILAMENT_CHANGE_HEAT_1        _UxGT("Êåâ‰∏ãÊåâÈàï‰æÜ") // "Press button to"
+  #define MSG_FILAMENT_CHANGE_HEAT_2        _UxGT("Âä†ÁÜ±Âô¥Âò¥.") // "heat nozzle."
+  #define MSG_FILAMENT_CHANGE_HEATING_1     _UxGT("Âä†ÁÜ±Âô¥Âò¥") // "Heating nozzle"
+  #define MSG_FILAMENT_CHANGE_HEATING_2     _UxGT("Ë´ãÁ≠âÂæÖ ...") // "Please wait..."
+  #define MSG_FILAMENT_CHANGE_LOAD_1        _UxGT("Á≠âÂæÖ")  //"Wait for"
+  #define MSG_FILAMENT_CHANGE_LOAD_2        _UxGT("ÈÄ≤Êñô")  //"filament load"
+  #define MSG_FILAMENT_CHANGE_PURGE_1       _UxGT("Á≠âÂæÖ") // "Wait for"
+  #define MSG_FILAMENT_CHANGE_PURGE_2       _UxGT("Áµ≤ÊñôÊ∏ÖÈô§") // "filament purge"
+  #define MSG_FILAMENT_CHANGE_RESUME_1      _UxGT("Á≠âÂæÖÂàóÂç∞")  //"Wait for print"
+  #define MSG_FILAMENT_CHANGE_RESUME_2      _UxGT("ÊÅ¢Âæ©")  //"to resume"
 #else // LCD_HEIGHT < 4
-#define MSG_FILAMENT_CHANGE_INIT_1          _UxGT("Ë´ãÁ≠âÂæÖ ...")  //"Please wait..."
-#define MSG_FILAMENT_CHANGE_UNLOAD_1        _UxGT("ÈÄÄÂá∫‰∏≠ ...")  //"Ejecting..."
-#define MSG_FILAMENT_CHANGE_INSERT_1        _UxGT("ÊèíÂÖ•‰∏¶ÈªûÊìä")  //"Insert and Click"
-#define MSG_FILAMENT_CHANGE_HEATING_1       _UxGT("Âä†ÁÜ±‰∏≠ ...") // "Heating..."
-#define MSG_FILAMENT_CHANGE_LOAD_1          _UxGT("ËºâÂÖ•‰∏≠ ...")  //"Loading..."
-#define MSG_FILAMENT_CHANGE_PURGE_1         _UxGT("Ê∏ÖÈô§‰∏≠ ...") // "Purging..."
-#define MSG_FILAMENT_CHANGE_RESUME_1        _UxGT("ÊÅ¢Âæ©‰∏≠ ...")  //"Resuming..."
+  #define MSG_FILAMENT_CHANGE_INIT_1        _UxGT("Ë´ãÁ≠âÂæÖ ...")  //"Please wait..."
+  #define MSG_FILAMENT_CHANGE_UNLOAD_1      _UxGT("ÈÄÄÂá∫‰∏≠ ...")  //"Ejecting..."
+  #define MSG_FILAMENT_CHANGE_INSERT_1      _UxGT("ÊèíÂÖ•‰∏¶ÈªûÊìä")  //"Insert and Click"
+  #define MSG_FILAMENT_CHANGE_HEATING_1     _UxGT("Âä†ÁÜ±‰∏≠ ...") // "Heating..."
+  #define MSG_FILAMENT_CHANGE_LOAD_1        _UxGT("ËºâÂÖ•‰∏≠ ...")  //"Loading..."
+  #define MSG_FILAMENT_CHANGE_PURGE_1       _UxGT("Ê∏ÖÈô§‰∏≠ ...") // "Purging..."
+  #define MSG_FILAMENT_CHANGE_RESUME_1      _UxGT("ÊÅ¢Âæ©‰∏≠ ...")  //"Resuming..."
 #endif // LCD_HEIGHT < 4
 
 #endif // LANGUAGE_ZH_TW_H

commit 1718eff54adefc7cc95851f28df0c7e02eae3a36
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Sep 13 01:35:55 2018 -0500

    Code changes supporting up to 6 extruders

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 8455843773..8500a4f9a8 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -226,6 +226,7 @@
 #define MSG_E3STEPS                         _UxGT("Êì†Âá∫Ê©ü3Ê≠•Êï∏/mm") //"E3steps/mm"
 #define MSG_E4STEPS                         _UxGT("Êì†Âá∫Ê©ü4Ê≠•Êï∏/mm") //"E4steps/mm"
 #define MSG_E5STEPS                         _UxGT("Êì†Âá∫Ê©ü5Ê≠•Êï∏/mm") //"E5steps/mm"
+#define MSG_E6STEPS                         _UxGT("Êì†Âá∫Ê©ü6Ê≠•Êï∏/mm") //"E6steps/mm"
 #define MSG_TEMPERATURE                     _UxGT("Ê∫´Â∫¶")  //"Temperature"
 #define MSG_MOTION                          _UxGT("ÈÅã‰Ωú")  //"Motion"
 #define MSG_FILAMENT                        _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ")  //"Filament" lcd_control_volumetric_menu

commit aadcf0891306bfef9f085390931095466a82a6e6
Author: MikeLud <36526272+MikeLud@users.noreply.github.com>
Date:   Thu Jul 26 06:09:49 2018 -0400

    [2.0.x] add Calibrate Z (M915) to Prepare Menu (#11331)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index d57f2deef9..8455843773 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -48,6 +48,7 @@
 #define MSG_AUTO_HOME_X                     _UxGT("ÂõûXÂéüÈªû")  //"Home X"
 #define MSG_AUTO_HOME_Y                     _UxGT("ÂõûYÂéüÈªû")  //"Home Y"
 #define MSG_AUTO_HOME_Z                     _UxGT("ÂõûZÂéüÈªû")  //"Home Z"
+#define MSG_TMC_Z_CALIBRATION               _UxGT("‚äøÊ†°Ê∫ñZ")
 #define MSG_LEVEL_BED_HOMING                _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏ÂéüÈªû")  //"Homing XYZ"
 #define MSG_LEVEL_BED_WAITING               _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥")  //"Click to Begin"
 #define MSG_LEVEL_BED_NEXT_POINT            _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû")  //"Next Point"

commit 2fd9ba56dad9bd884598d1ae435d7cc54d981785
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sat Jun 2 20:53:25 2018 -0500

    LED menu item bool (like Case Lights)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 87fc2c17cc..d57f2deef9 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -143,8 +143,7 @@
 #define MSG_UBL_STEP_BY_STEP_MENU           _UxGT("‰∏ÄÊ≠•Ê≠•UBL") // "Step-By-Step UBL"
 
 #define MSG_LED_CONTROL                     _UxGT("ÁÅØÁÆ°ÊéßÂà∂") // "LED Control")
-#define MSG_LEDS_ON                         _UxGT("ÁÅØ‰∫Æ") // "Lights On")
-#define MSG_LEDS_OFF                        _UxGT("ÁÅØÁÅ≠") // "Lights Off")
+#define MSG_LEDS                            _UxGT("ÁÅØ") // "Lights")
 #define MSG_LED_PRESETS                     _UxGT("ÁÅØÈ¢ÑÁΩÆ") // "Light Presets")
 #define MSG_SET_LEDS_RED                    _UxGT("Á∫¢") // "Red")
 #define MSG_SET_LEDS_ORANGE                 _UxGT("Ê©ô") // "Orange")

commit 33966710119b64f83a19075875a8d27452cca9a4
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Apr 22 00:16:30 2018 -0500

    [2.0.x] Reset LCD status to fallbacks (#10470)
    
    * Remove obsolete strings
    * Tweak some static consts
    * Reset LCD status to fallbacks

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index edd3e70bdb..87fc2c17cc 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -251,7 +251,6 @@
 #define MSG_DWELL                           _UxGT("‰ºëÁú† ...")  //"Sleep..."
 #define MSG_USERWAIT                        _UxGT("ÈªûÊìäÁπºÁ∫å ...")  //"Click to resume..."
 #define MSG_PRINT_PAUSED                    _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú") // "Print paused"
-#define MSG_RESUMING                        _UxGT("ÊÅ¢Âæ©ÂàóÂç∞‰∏≠")  //"Resuming print"
 #define MSG_PRINT_ABORTED                   _UxGT("Â∑≤ÂèñÊ∂àÂàóÂç∞")  //"Print aborted"
 #define MSG_NO_MOVE                         _UxGT("ÁÑ°ÁßªÂãï")  //"No move."
 #define MSG_KILLED                          _UxGT("Â∑≤Á†çÊéâ")  //"KILLED. "
@@ -299,9 +298,7 @@
 #define MSG_SHORT_HOUR                      _UxGT("ÊôÇ")  //"h" // One character only
 #define MSG_SHORT_MINUTE                    _UxGT("ÂàÜ")  //"m" // One character only
 #define MSG_HEATING                         _UxGT("Âä†ÁÜ±‰∏≠ ...")  //"Heating..."
-#define MSG_HEATING_COMPLETE                _UxGT("Âä†ÁÜ±ÂÆåÊàê")  //"Heating done."
-#define MSG_BED_HEATING                     _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠")  //"Bed Heating."
-#define MSG_BED_DONE                        _UxGT("ÂÆåÊàêÂä†ÁÜ±ÁÜ±Â∫ä")  //"Bed done."
+#define MSG_BED_HEATING                     _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠ ...")  //"Bed Heating..."
 #define MSG_DELTA_CALIBRATE                 _UxGT("‚äøÊ†°Ê∫ñ")  //"Delta Calibration"
 #define MSG_DELTA_CALIBRATE_X               _UxGT("‚äøÊ†°Ê∫ñX")  //"Calibrate X"
 #define MSG_DELTA_CALIBRATE_Y               _UxGT("‚äøÊ†°Ê∫ñY")  //"Calibrate Y"

commit 627348b46cf02da5525fc367baaa86207f7a3a5e
Author: Yunhui Fu <yhfudev@gmail.com>
Date:   Tue Apr 17 22:20:38 2018 -0400

    move the TALL_FONT_CORRECTION to language files

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 39af29450e..edd3e70bdb 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -30,6 +30,8 @@
 #ifndef LANGUAGE_ZH_TW_H
 #define LANGUAGE_ZH_TW_H
 
+//#define TALL_FONT_CORRECTION (1)
+
 #define CHARSIZE 3
 
 #define WELCOME_MSG                         MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.")  //" ready."

commit f04be05a14c40984986fc7089687d6f72237645a
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Mar 28 21:50:59 2018 -0500

    "G28 Z Forbidden" => "Home XY first"
    
    Some languages will need to be updated for proper phrasing

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index baabff0091..39af29450e 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -290,7 +290,7 @@
 #define MSG_ERR_MINTEMP                     _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶")  //"Err: MINTEMP"
 #define MSG_ERR_MAXTEMP_BED                 _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÁÜ±Â∫äÊ∫´Â∫¶")  //"Err: MAXTEMP BED"
 #define MSG_ERR_MINTEMP_BED                 _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÁÜ±Â∫äÊ∫´Â∫¶")  //"Err: MINTEMP BED"
-#define MSG_ERR_Z_HOMING                    _UxGT("G28 Z Â∑≤Á¶ÅÊ≠¢") // "G28 Z Forbidden"
+#define MSG_ERR_Z_HOMING                    MSG_HOME _UxGT(" ") MSG_X MSG_Y _UxGT(" ") MSG_FIRST
 #define MSG_HALTED                          _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü")  //"PRINTER HALTED"
 #define MSG_PLEASE_RESET                    _UxGT("Ë´ãÈáçÁΩÆ")  //"Please reset"
 #define MSG_SHORT_DAY                       _UxGT("Â§©")  //"d" // One character only

commit 8322a79bb9db66227eff45a6de7b84a41d1db561
Author: Yunhui Fu <yhfudev@gmail.com>
Date:   Sun Mar 25 12:37:54 2018 -0400

    update the UTF-8 C strings for Chinsee languages, for Simplified and Traditional Chinese (#10211)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index f7e0ffac7d..baabff0091 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -33,12 +33,15 @@
 #define CHARSIZE 3
 
 #define WELCOME_MSG                         MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.")  //" ready."
+#define MSG_BACK                            _UxGT("ËøîÂõû")         // ‚ÄùBack‚Äú
 #define MSG_SD_INSERTED                     _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•")  //"Card inserted"
 #define MSG_SD_REMOVED                      _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫")  //"Card removed"
 #define MSG_LCD_ENDSTOPS                    _UxGT("ÊìãÂ°ä")  //"Endstops" // Max length 8 characters
 #define MSG_MAIN                            _UxGT("‰∏ªÈÅ∏ÂñÆ")  //"Main"
 #define MSG_AUTOSTART                       _UxGT("Ëá™ÂãïÈñãÂßã")  //"Autostart"
 #define MSG_DISABLE_STEPPERS                _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È¶¨ÈÅî")  //"Disable steppers"
+#define MSG_DEBUG_MENU                      _UxGT("Èô§ÈåØÈÅ∏ÂñÆ")    // "Debug Menu"
+#define MSG_PROGRESS_BAR_TEST               _UxGT("ÈÄ≤Â∫¶Ê¢ùÊ∏¨Ë©¶")  // "Progress Bar Test"
 #define MSG_AUTO_HOME                       _UxGT("Ëá™ÂãïÂõûÂéüÈªû")  //"Auto home"
 #define MSG_AUTO_HOME_X                     _UxGT("ÂõûXÂéüÈªû")  //"Home X"
 #define MSG_AUTO_HOME_Y                     _UxGT("ÂõûYÂéüÈªû")  //"Home Y"
@@ -47,6 +50,7 @@
 #define MSG_LEVEL_BED_WAITING               _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥")  //"Click to Begin"
 #define MSG_LEVEL_BED_NEXT_POINT            _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû")  //"Next Point"
 #define MSG_LEVEL_BED_DONE                  _UxGT("ÂÆåÊàêÁÜ±Â∫äË™øÂπ≥")  //"Leveling Done!"
+#define MSG_Z_FADE_HEIGHT                   _UxGT("Ê∑°Âá∫È´òÂ∫¶")     // "Fade Height"
 #define MSG_SET_HOME_OFFSETS                _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª")  //"Set home offsets"
 #define MSG_HOME_OFFSETS_APPLIED            _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®")  //"Offsets applied"
 #define MSG_SET_ORIGIN                      _UxGT("Ë®≠ÁΩÆÂéüÈªû")  //"Set origin"
@@ -68,6 +72,96 @@
 #define MSG_MOVE_AXIS                       _UxGT("ÁßªÂãïËª∏")  //"Move axis"
 #define MSG_BED_LEVELING                    _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä")  //"Bed leveling"
 #define MSG_LEVEL_BED                       _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä")  //"Level bed"
+#define MSG_LEVEL_CORNERS                   _UxGT("Ë™øÂπ≥ÈÇäËßí") // "Level corners"
+
+#define MSG_NEXT_CORNER                     _UxGT("‰∏ã‰∏™ÈÇäËßí") // "Next corner"
+#define MSG_EDITING_STOPPED                 _UxGT("Á∂≤Ê†ºÁ∑®ËºØÂ∑≤ÂÅúÊ≠¢") // "Mesh Editing Stopped"
+
+#define MSG_USER_MENU                       _UxGT("ÂÆ¢Âà∂ÂëΩ‰ª§") // "Custom Commands"
+#define MSG_UBL_DOING_G29                   _UxGT("ÊâßË°åG29") // "Doing G29"
+#define MSG_UBL_UNHOMED                     _UxGT("ÂÖàÂõûXYZÂéüÈªû") // "Home XYZ first"
+#define MSG_UBL_TOOLS                       _UxGT("UBLÂ∑•ÂÖ∑") // "UBL Tools"
+#define MSG_UBL_LEVEL_BED                   _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)") // "Unified Bed Leveling"
+#define MSG_UBL_MANUAL_MESH                 _UxGT("ÊâãÂ∑•Âª∫ÁΩë") // "Manually Build Mesh"
+
+#define MSG_UBL_BC_INSERT                   _UxGT("ÊîæÁΩÆÂ¢äÁâá‰∏¶Ê∏¨Èáè") // "Place shim & measure"
+#define MSG_UBL_BC_INSERT2                  _UxGT("Ê∏¨Èáè") // "Measure"
+#define MSG_UBL_BC_REMOVE                   _UxGT("ÁßªÈô§‰∏¶Ê∏¨ÈáèÁÜ±Â∫ä") // "Remove & measure bed"
+#define MSG_UBL_MOVING_TO_NEXT              _UxGT("ÁßªÂãïÂà∞‰∏ã‰∏ÄÂÄã") // "Moving to next"
+#define MSG_UBL_ACTIVATE_MESH               _UxGT("ÊøÄÊ¥ªUBL") // "Activate UBL"
+#define MSG_UBL_DEACTIVATE_MESH             _UxGT("ÈóúÈñâUBL") // "Deactivate UBL"
+#define MSG_UBL_SET_BED_TEMP                _UxGT("Ë®≠ÁΩÆÁÜ±Â∫äÊ∫´Â∫¶") // "Bed Temp"
+#define MSG_UBL_SET_HOTEND_TEMP             _UxGT("ÁÜ±Á´ØÊ∫´Â∫¶") // "Hotend Temp"
+#define MSG_UBL_MESH_EDIT                   _UxGT("Á∂≤Ê†ºÁ∑®ËºØ") // "Mesh Edit"
+#define MSG_UBL_EDIT_CUSTOM_MESH            _UxGT("Á∑®ËºØÂÆ¢Êà∂Á∂≤Ê†º") // "Edit Custom Mesh"
+#define MSG_UBL_FINE_TUNE_MESH              _UxGT("Á¥∞Ë™øÁ∂≤Ê†º") // "Fine Tuning Mesh"
+#define MSG_UBL_DONE_EDITING_MESH           _UxGT("ÂÆåÊàêÁ∑®ËºØÁ∂≤Ê†º") // "Done Editing Mesh"
+#define MSG_UBL_BUILD_CUSTOM_MESH           _UxGT("ÂâµË®≠ÂÆ¢Êà∂Á∂≤Ê†º") // "Build Custom Mesh"
+#define MSG_UBL_BUILD_MESH_MENU             _UxGT("ÂâµË®≠Á∂≤Ê†º") // "Build Mesh"
+#define MSG_UBL_BUILD_PLA_MESH              _UxGT("ÂâµË®≠PLAÁ∂≤Ê†º") // "Build PLA Mesh"
+#define MSG_UBL_BUILD_ABS_MESH              _UxGT("ÂâµË®≠ABSÁ∂≤Ê†º") // "Build ABS Mesh"
+#define MSG_UBL_BUILD_COLD_MESH             _UxGT("ÂâµË®≠ÂÜ∑Á∂≤Ê†º") // "Build Cold Mesh"
+#define MSG_UBL_MESH_HEIGHT_ADJUST          _UxGT("Ë™øÊï¥Á∂≤Ê†ºÈ´òÂ∫¶") // "Adjust Mesh Height"
+#define MSG_UBL_MESH_HEIGHT_AMOUNT          _UxGT("È´òÂ∫¶ÂêàË®à") // "Height Amount"
+#define MSG_UBL_VALIDATE_MESH_MENU          _UxGT("ÊâπÂáÜÁ∂≤Ê†º") // "Validate Mesh"
+#define MSG_UBL_VALIDATE_PLA_MESH           _UxGT("ÊâπÂáÜPLAÁ∂≤Ê†º") // "Validate PLA Mesh"
+#define MSG_UBL_VALIDATE_ABS_MESH           _UxGT("ÊâπÂáÜABSÁ∂≤Ê†º") // "Validate ABS Mesh"
+#define MSG_UBL_VALIDATE_CUSTOM_MESH        _UxGT("ÊâπÂáÜÂÆ¢Êà∂Á∂≤Ê†º") // "Validate Custom Mesh"
+#define MSG_UBL_CONTINUE_MESH               _UxGT("ÁπºÁ∫åÁÜ±Â∫äÁ∂≤Ê†º") // "Continue Bed Mesh"
+#define MSG_UBL_MESH_LEVELING               _UxGT("Á∂≤Ê†ºË™øÂπ≥") // "Mesh Leveling"
+#define MSG_UBL_3POINT_MESH_LEVELING        _UxGT("‰∏âÈªûË™øÂπ≥") // "3-Point Leveling"
+#define MSG_UBL_GRID_MESH_LEVELING          _UxGT("Ê†ºÂ≠êÁ∂≤Ê†ºË™øÂπ≥") // "Grid Mesh Leveling"
+#define MSG_UBL_MESH_LEVEL                  _UxGT("Ë™øÂπ≥Á∂≤Ê†º") // "Level Mesh"
+#define MSG_UBL_SIDE_POINTS                 _UxGT("ÈÇäÈªû") // "Side Points"
+#define MSG_UBL_MAP_TYPE                    _UxGT("ÂúñÈ°ûÂûã") // "Map Type"
+#define MSG_UBL_OUTPUT_MAP                  _UxGT("Ëº∏Âá∫Á∂≤Ê†ºÂúñ") // "Output Mesh Map"
+#define MSG_UBL_OUTPUT_MAP_HOST             _UxGT("Ëº∏Âá∫Âà∞‰∏ªÊ©ü") // "Output for Host"
+#define MSG_UBL_OUTPUT_MAP_CSV              _UxGT("Ëº∏Âá∫Âà∞CSV") // "Output for CSV"
+#define MSG_UBL_OUTPUT_MAP_BACKUP           _UxGT("Ëº∏Âá∫Âà∞ÂÇô‰ªΩ") // "Off Printer Backup"
+#define MSG_UBL_INFO_UBL                    _UxGT("Ëº∏Âá∫UBL‰ø°ÊÅØ") // "Output UBL Info"
+#define MSG_UBL_EDIT_MESH_MENU              _UxGT("Á∑®ËºØÁ∂≤Ê†º") // "Edit Mesh"
+#define MSG_UBL_FILLIN_AMOUNT               _UxGT("Â°´ÂÖÖÂêàË®à") // "Fill-in Amount"
+#define MSG_UBL_MANUAL_FILLIN               _UxGT("ÊâãÂ∑•Â°´ÂÖÖ") // "Manual Fill-in"
+#define MSG_UBL_SMART_FILLIN                _UxGT("ËÅ∞ÊòéÂ°´ÂÖÖ") // "Smart Fill-in"
+#define MSG_UBL_FILLIN_MESH                 _UxGT("Â°´ÂÖÖÁ∂≤Ê†º") // "Fill-in Mesh"
+#define MSG_UBL_INVALIDATE_ALL              _UxGT("‰ΩúÂª¢ÊâÄÊúâÁöÑ") // "Invalidate All"
+#define MSG_UBL_INVALIDATE_CLOSEST          _UxGT("‰ΩúÂª¢ÊúÄËøëÁöÑ") // "Invalidate Closest"
+#define MSG_UBL_FINE_TUNE_ALL               _UxGT("Á¥∞Ë™øÊâÄÊúâÁöÑ") // "Fine Tune All"
+#define MSG_UBL_FINE_TUNE_CLOSEST           _UxGT("Á¥∞Ë™øÊúÄËøëÁöÑ") // "Fine Tune Closest"
+#define MSG_UBL_STORAGE_MESH_MENU           _UxGT("Á∂≤Ê†ºÂ≠òÂÑ≤") // "Mesh Storage"
+#define MSG_UBL_STORAGE_SLOT                _UxGT("Â≠òÂÑ≤ÊßΩ") // "Memory Slot"
+#define MSG_UBL_LOAD_MESH                   _UxGT("Ë£ùËºâÁÜ±Â∫äÁ∂≤Ê†º") // "Load Bed Mesh"
+#define MSG_UBL_SAVE_MESH                   _UxGT("‰øùÂ≠òÁÜ±Â∫äÁ∂≤Ê†º") // "Save Bed Mesh"
+#define MSG_MESH_LOADED                     _UxGT("Á∂≤Ê†º %i Â∑≤Ë£ùËºâ") // "Mesh %i loaded"
+#define MSG_MESH_SAVED                      _UxGT("Á∂≤Ê†º %i Â∑≤‰øùÂ≠ò") // "Mesh %i saved"
+#define MSG_NO_STORAGE                      _UxGT("Ê≤íÊúâÂ≠òÂÑ≤") // "No storage"
+#define MSG_UBL_SAVE_ERROR                  _UxGT("ÈåØË™§: UBL‰øùÂ≠ò") // "Err: UBL Save"
+#define MSG_UBL_RESTORE_ERROR               _UxGT("ÈåØË™§: UBLÈÇÑÂéü") // "Err: UBL Restore"
+#define MSG_UBL_Z_OFFSET_STOPPED            _UxGT("ZÂÅèÁßªÂ∑≤ÂÅúÊ≠¢") // "Z-Offset Stopped"
+#define MSG_UBL_STEP_BY_STEP_MENU           _UxGT("‰∏ÄÊ≠•Ê≠•UBL") // "Step-By-Step UBL"
+
+#define MSG_LED_CONTROL                     _UxGT("ÁÅØÁÆ°ÊéßÂà∂") // "LED Control")
+#define MSG_LEDS_ON                         _UxGT("ÁÅØ‰∫Æ") // "Lights On")
+#define MSG_LEDS_OFF                        _UxGT("ÁÅØÁÅ≠") // "Lights Off")
+#define MSG_LED_PRESETS                     _UxGT("ÁÅØÈ¢ÑÁΩÆ") // "Light Presets")
+#define MSG_SET_LEDS_RED                    _UxGT("Á∫¢") // "Red")
+#define MSG_SET_LEDS_ORANGE                 _UxGT("Ê©ô") // "Orange")
+#define MSG_SET_LEDS_YELLOW                 _UxGT("ÈªÑ") // "Yellow")
+#define MSG_SET_LEDS_GREEN                  _UxGT("Áªø") // "Green")
+#define MSG_SET_LEDS_BLUE                   _UxGT("Ëìù") // "Blue")
+#define MSG_SET_LEDS_INDIGO                 _UxGT("Èùí") // "Indigo")
+#define MSG_SET_LEDS_VIOLET                 _UxGT("Á¥´") // "Violet")
+#define MSG_SET_LEDS_WHITE                  _UxGT("ÁôΩ") // "White")
+#define MSG_SET_LEDS_DEFAULT                _UxGT("Áº∫ÁúÅ") // "Default")
+#define MSG_CUSTOM_LEDS                     _UxGT("ÂÆöÂà∂ÁÅØ") // "Custom Lights")
+#define MSG_INTENSITY_R                     _UxGT("Á∫¢È£ΩÂíåÂ∫¶") // "Red Intensity")
+#define MSG_INTENSITY_G                     _UxGT("ÁªøÈ£ΩÂíåÂ∫¶") // "Green Intensity")
+#define MSG_INTENSITY_B                     _UxGT("ËìùÈ£ΩÂíåÂ∫¶") // "Blue Intensity")
+#define MSG_INTENSITY_W                     _UxGT("ÁôΩÈ£ΩÂíåÂ∫¶") // "White Intensity")
+#define MSG_LED_BRIGHTNESS                  _UxGT("‰∫ÆÂ∫¶") // "Brightness")
+#define MSG_MOVING                          _UxGT("ÁßªÂä® ...") // "Moving...")
+#define MSG_FREE_XY                         _UxGT("ÈáäÊîæ XY") // "Free XY")
+
 #define MSG_MOVE_X                          _UxGT("ÁßªÂãïX")  //"Move X"
 #define MSG_MOVE_Y                          _UxGT("ÁßªÂãïY")  //"Move Y"
 #define MSG_MOVE_Z                          _UxGT("ÁßªÂãïZ")  //"Move Z"
@@ -80,6 +174,7 @@
 #define MSG_NOZZLE                          _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥")  //"Nozzle" Âô¥Âò¥
 #define MSG_BED                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä")  //"Bed"
 #define MSG_FAN_SPEED                       _UxGT("È¢®ÊâáÈÄüÁéá")  //"Fan speed"
+#define MSG_EXTRA_FAN_SPEED                 _UxGT("È°çÂ§ñÈ¢®ÊâáÈÄüÁéá") // "Extra fan speed"
 #define MSG_FLOW                            _UxGT("Êì†Âá∫ÈÄüÁéá")  //"Flow"
 #define MSG_CONTROL                         _UxGT("ÊéßÂà∂")  //"Control"
 #define MSG_MIN                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ∞è") //" " LCD_STR_THERMOMETER " Min"
@@ -105,9 +200,11 @@
   #define MSG_VC_JERK                       _UxGT("ZËª∏ÊäñÂãïÈÄüÁéá")  //"Vz-jerk"
 #endif
 #define MSG_VE_JERK                         _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá")  //"Ve-jerk"
+#define MSG_VELOCITY                        _UxGT("ÈÄüÂ∫¶")          // "Velocity"
 #define MSG_VMAX                            _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá")  //"Vmax " max_feedrate_mm_s
 #define MSG_VMIN                            _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá")  //"Vmin"  min_feedrate_mm_s
 #define MSG_VTRAV_MIN                       _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá")  //"VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
+#define MSG_ACCELERATION                    _UxGT("Âä†ÈÄüÂ∫¶")       // "Acceleration"
 #define MSG_AMAX                            _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶")  //"Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
 #define MSG_A_RETRACT                       _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶")  //"A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
 #define MSG_A_TRAVEL                        _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶")  //"A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
@@ -122,15 +219,24 @@
   #define MSG_CSTEPS                        _UxGT("ZËª∏Ê≠•Êï∏/mm")  //"Zsteps/mm"
 #endif
 #define MSG_ESTEPS                          _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm")  //"Esteps/mm"
+#define MSG_E1STEPS                         _UxGT("Êì†Âá∫Ê©ü1Ê≠•Êï∏/mm") //"E1steps/mm"
+#define MSG_E2STEPS                         _UxGT("Êì†Âá∫Ê©ü2Ê≠•Êï∏/mm") //"E2steps/mm"
+#define MSG_E3STEPS                         _UxGT("Êì†Âá∫Ê©ü3Ê≠•Êï∏/mm") //"E3steps/mm"
+#define MSG_E4STEPS                         _UxGT("Êì†Âá∫Ê©ü4Ê≠•Êï∏/mm") //"E4steps/mm"
+#define MSG_E5STEPS                         _UxGT("Êì†Âá∫Ê©ü5Ê≠•Êï∏/mm") //"E5steps/mm"
 #define MSG_TEMPERATURE                     _UxGT("Ê∫´Â∫¶")  //"Temperature"
 #define MSG_MOTION                          _UxGT("ÈÅã‰Ωú")  //"Motion"
 #define MSG_FILAMENT                        _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ")  //"Filament" lcd_control_volumetric_menu
 #define MSG_VOLUMETRIC_ENABLED              _UxGT("Ê∏¨ÂÆπÁ©çmm¬≥")  //"E in mm3" volumetric_enabled
 #define MSG_FILAMENT_DIAM                   _UxGT("Áµ≤ÊñôÁõ¥Âæë")  //"Fil. Dia."
+#define MSG_FILAMENT_UNLOAD                 _UxGT("Âç∏Ëºâ mm") // "Unload mm"
+#define MSG_FILAMENT_LOAD                   _UxGT("Ë£ÖËºâ mm")   // "Load mm"
+#define MSG_ADVANCE_K                       _UxGT("Advance K") // "Advance K"
 #define MSG_CONTRAST                        _UxGT("LCDÂ∞çÊØîÂ∫¶")  //"LCD contrast"
 #define MSG_STORE_EEPROM                    _UxGT("‰øùÂ≠òË®≠ÁΩÆ")  //"Store memory"
 #define MSG_LOAD_EEPROM                     _UxGT("ËºâÂÖ•Ë®≠ÁΩÆ")  //"Load memory"
 #define MSG_RESTORE_FAILSAFE                _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº")  //"Restore failsafe"
+#define MSG_INIT_EEPROM                     _UxGT("ÂàùÂßãÂåñË®≠ÁΩÆ") // "Initialize EEPROM"
 #define MSG_REFRESH                         _UxGT("Âà∑Êñ∞")  //"Refresh"
 #define MSG_WATCH                           _UxGT("Ë≥áË®äÁïåÈù¢")  //"Info screen"
 #define MSG_PREPARE                         _UxGT("Ê∫ñÂÇô")  //"Prepare"
@@ -141,9 +247,10 @@
 #define MSG_CARD_MENU                       _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞")  //"Print from SD"
 #define MSG_NO_CARD                         _UxGT("ÁÑ°Ë®òÊÜ∂Âç°")  //"No SD card"
 #define MSG_DWELL                           _UxGT("‰ºëÁú† ...")  //"Sleep..."
-#define MSG_USERWAIT                        _UxGT("Á≠âÂæÖÁî®Êà∂ ...")  //"Wait for user..."
+#define MSG_USERWAIT                        _UxGT("ÈªûÊìäÁπºÁ∫å ...")  //"Click to resume..."
+#define MSG_PRINT_PAUSED                    _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú") // "Print paused"
 #define MSG_RESUMING                        _UxGT("ÊÅ¢Âæ©ÂàóÂç∞‰∏≠")  //"Resuming print"
-#define MSG_PRINT_ABORTED                   _UxGT("ÂàóÂç∞Â∑≤ÂèñÊ∂à")  //"Print aborted"
+#define MSG_PRINT_ABORTED                   _UxGT("Â∑≤ÂèñÊ∂àÂàóÂç∞")  //"Print aborted"
 #define MSG_NO_MOVE                         _UxGT("ÁÑ°ÁßªÂãï")  //"No move."
 #define MSG_KILLED                          _UxGT("Â∑≤Á†çÊéâ")  //"KILLED. "
 #define MSG_STOPPED                         _UxGT("Â∑≤ÂÅúÊ≠¢")  //"STOPPED. "
@@ -153,12 +260,22 @@
 #define MSG_CONTROL_RETRACT_ZLIFT           _UxGT("Hop mm")  //"Hop mm" retract_zlift, retract Z-lift
 #define MSG_CONTROL_RETRACT_RECOVER         _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm")  //"UnRet +mm" retract_recover_length, additional recover length (mm, added to retract length when recovering)
 #define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm")  //"S UnRet+mm" swap_retract_recover_length, additional swap recover length (mm, added to retract length when recovering from extruder change)
-#define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s")  //"UnRet  V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
+#define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s")  //"UnRet V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
+#define MSG_CONTROL_RETRACT_RECOVER_SWAPF   _UxGT("S UnRet V") // "S UnRet V"
 #define MSG_AUTORETRACT                     _UxGT("Ëá™ÂãïÂõûÁ∏Æ")  //"AutoRetr." autoretract_enabled,
 #define MSG_FILAMENTCHANGE                  _UxGT("Êõ¥ÊèõÁµ≤Êñô")  //"Change filament"
+#define MSG_FILAMENTLOAD                    _UxGT("Ë£ùËºâÁµ≤Êñô") // "Load filament"
+#define MSG_FILAMENTUNLOAD                  _UxGT("Âç∏ËºâÁµ≤Êñô") // "Unload filament"
+#define MSG_FILAMENTUNLOAD_ALL              _UxGT("Âç∏ËºâÂÖ®ÈÉ®") // "Unload All"
 #define MSG_INIT_SDCARD                     _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°")  //"Init. SD card"
 #define MSG_CNG_SDCARD                      _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°")  //"Change SD card"
 #define MSG_ZPROBE_OUT                      _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ")  //"Z probe out. bed" Z probe is not within the physical limits
+#define MSG_SKEW_FACTOR                     _UxGT("ÂÅèÊñúÂõ†Êï∏") // "Skew Factor"
+#define MSG_BLTOUCH                         _UxGT("BLTouch")     // "BLTouch"
+#define MSG_BLTOUCH_SELFTEST                _UxGT("BLTouch Ëá™Ê™¢") // "BLTouch Self-Test"
+#define MSG_BLTOUCH_RESET                   _UxGT("ÈáçÁΩÆBLTouch")  // "Reset BLTouch"
+#define MSG_BLTOUCH_DEPLOY                  _UxGT("ÈÉ®ÁΩ≤BLTouch") // "Deploy BLTouch"
+#define MSG_BLTOUCH_STOW                    _UxGT("Ë£ùËºâBLTouch")   // "Stow BLTouch"
 #define MSG_HOME                            _UxGT("Ê≠∏‰Ωç")  //"Home"  // Used as MSG_HOME " " MSG_X MSG_Y MSG_Z " " MSG_FIRST
 #define MSG_FIRST                           _UxGT("ÂÖà")  //"first"
 #define MSG_ZPROBE_ZOFFSET                  _UxGT("ZÂÅèÁßª")  //"Z Offset"
@@ -173,29 +290,42 @@
 #define MSG_ERR_MINTEMP                     _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶")  //"Err: MINTEMP"
 #define MSG_ERR_MAXTEMP_BED                 _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÁÜ±Â∫äÊ∫´Â∫¶")  //"Err: MAXTEMP BED"
 #define MSG_ERR_MINTEMP_BED                 _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÁÜ±Â∫äÊ∫´Â∫¶")  //"Err: MINTEMP BED"
+#define MSG_ERR_Z_HOMING                    _UxGT("G28 Z Â∑≤Á¶ÅÊ≠¢") // "G28 Z Forbidden"
 #define MSG_HALTED                          _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü")  //"PRINTER HALTED"
 #define MSG_PLEASE_RESET                    _UxGT("Ë´ãÈáçÁΩÆ")  //"Please reset"
 #define MSG_SHORT_DAY                       _UxGT("Â§©")  //"d" // One character only
 #define MSG_SHORT_HOUR                      _UxGT("ÊôÇ")  //"h" // One character only
 #define MSG_SHORT_MINUTE                    _UxGT("ÂàÜ")  //"m" // One character only
 #define MSG_HEATING                         _UxGT("Âä†ÁÜ±‰∏≠ ...")  //"Heating..."
-#define MSG_HEATING_COMPLETE                _UxGT("ÂÆåÊàêÂä†ÁÜ±")  //"Heating done."
+#define MSG_HEATING_COMPLETE                _UxGT("Âä†ÁÜ±ÂÆåÊàê")  //"Heating done."
 #define MSG_BED_HEATING                     _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠")  //"Bed Heating."
 #define MSG_BED_DONE                        _UxGT("ÂÆåÊàêÂä†ÁÜ±ÁÜ±Â∫ä")  //"Bed done."
 #define MSG_DELTA_CALIBRATE                 _UxGT("‚äøÊ†°Ê∫ñ")  //"Delta Calibration"
-#define MSG_DELTA_CALIBRATE_X               _UxGT("Ê†°Ê∫ñX")  //"Calibrate X"
-#define MSG_DELTA_CALIBRATE_Y               _UxGT("Ê†°Ê∫ñY")  //"Calibrate Y"
-#define MSG_DELTA_CALIBRATE_Z               _UxGT("Ê†°Ê∫ñZ")  //"Calibrate Z"
-#define MSG_DELTA_CALIBRATE_CENTER          _UxGT("Ê†°Ê∫ñ‰∏≠ÂøÉ")  //"Calibrate Center"
-
+#define MSG_DELTA_CALIBRATE_X               _UxGT("‚äøÊ†°Ê∫ñX")  //"Calibrate X"
+#define MSG_DELTA_CALIBRATE_Y               _UxGT("‚äøÊ†°Ê∫ñY")  //"Calibrate Y"
+#define MSG_DELTA_CALIBRATE_Z               _UxGT("‚äøÊ†°Ê∫ñZ")  //"Calibrate Z"
+#define MSG_DELTA_CALIBRATE_CENTER          _UxGT("‚äøÊ†°Ê∫ñ‰∏≠ÂøÉ")  //"Calibrate Center"
+#define MSG_DELTA_SETTINGS                  _UxGT("‚äøË®≠ÁΩÆ") // "Delta Settings"
+#define MSG_DELTA_AUTO_CALIBRATE            _UxGT("‚äøËá™ÂãïÊ†°Ê∫ñ") // "Auto Calibration"
+#define MSG_DELTA_HEIGHT_CALIBRATE          _UxGT("Ë®≠ÁΩÆ‚äøÈ´òÂ∫¶") // "Set Delta Height"
+#define MSG_DELTA_DIAG_ROD                  _UxGT("‚äøÊñúÊü±") // "Diag Rod"
+#define MSG_DELTA_HEIGHT                    _UxGT("‚äøÈ´òÂ∫¶") // "Height"
+#define MSG_DELTA_RADIUS                    _UxGT("‚äøÂçäÂæë") // "Radius"
 #define MSG_INFO_MENU                       _UxGT("ÈóúÊñºÂç∞Ë°®Ê©ü")  //"About Printer"
 #define MSG_INFO_PRINTER_MENU               _UxGT("Âç∞Ë°®Ê©üË®äÊÅØ")  //"Printer Info"
+#define MSG_3POINT_LEVELING                 _UxGT("‰∏âÈªûË™øÂπ≥") // "3-Point Leveling"
+#define MSG_LINEAR_LEVELING                 _UxGT("Á∑öÊÄßË™øÂπ≥") // "Linear Leveling"
+#define MSG_BILINEAR_LEVELING               _UxGT("ÈõôÁ∑öÊÄßË™øÂπ≥") // "Bilinear Leveling"
+#define MSG_UBL_LEVELING                    _UxGT("Áµ±‰∏ÄÁÜ±Â∫äË™øÂπ≥(UBL)") // "Unified Bed Leveling"
+#define MSG_MESH_LEVELING                   _UxGT("Á∂≤Ê†ºË™øÂπ≥") // "Mesh Leveling"
 #define MSG_INFO_STATS_MENU                 _UxGT("Âç∞Ë°®Ê©üÁµ±Ë®à")  //"Printer Stats"
 #define MSG_INFO_BOARD_MENU                 _UxGT("‰∏ªÊùøË®äÊÅØ")  //"Board Info"
 #define MSG_INFO_THERMISTOR_MENU            _UxGT("Ê∫´Â∫¶Ë®à")  //"Thermistors"
 #define MSG_INFO_EXTRUDERS                  _UxGT("Êì†Âá∫Ê©ü")  //"Extruders"
 #define MSG_INFO_BAUDRATE                   _UxGT("ÂÇ≥Ëº∏Áéá")  //"Baud"
 #define MSG_INFO_PROTOCOL                   _UxGT("ÂçîË≠∞")  //"Protocol"
+#define MSG_CASE_LIGHT                      _UxGT("Â§ñÊÆºÁáà") // "Case light"
+#define MSG_CASE_LIGHT_BRIGHTNESS           _UxGT("Ááà‰∫ÆÂ∫¶") // "Light BRIGHTNESS"
 
 #if LCD_WIDTH > 19
 #define MSG_INFO_PRINT_COUNT              _UxGT("ÂàóÂç∞Ë®àÊï∏")  //"Print Count"
@@ -214,8 +344,19 @@
 #define MSG_INFO_MIN_TEMP                   _UxGT("ÊúÄ‰ΩéÊ∫´Â∫¶")  //"Min Temp"
 #define MSG_INFO_MAX_TEMP                   _UxGT("ÊúÄÈ´òÊ∫´Â∫¶")  //"Max Temp"
 #define MSG_INFO_PSU                        _UxGT("ÈõªÊ∫ê‰æõÊáâ")  //"Power Supply"
-
+#define MSG_DRIVE_STRENGTH                  _UxGT("È©ÖÂãïÂäõÂ∫¶") // "Drive Strength"
+#define MSG_DAC_PERCENT                     _UxGT("È©ÖÂãï %") // "Driver %"
+#define MSG_DAC_EEPROM_WRITE                _UxGT("‰øùÂ≠òÈ©ÖÂãïË®≠ÁΩÆ") // "DAC EEPROM Write"
+#define MSG_FILAMENT_CHANGE_HEADER_PAUSE    _UxGT("ÂàóÂç∞Â∑≤Êö´ÂÅú") // "PRINT PAUSED"
+#define MSG_FILAMENT_CHANGE_HEADER_LOAD     _UxGT("Ë£ùËºâÁµ≤Êñô") // "LOAD FILAMENT"
+#define MSG_FILAMENT_CHANGE_HEADER_UNLOAD   _UxGT("Âç∏ËºâÁµ≤Êñô") // "UNLOAD FILAMENT"
+#define MSG_FILAMENT_CHANGE_OPTION_HEADER   _UxGT("ÊÅ¢Ë§áÈÅ∏È†Ö:") // "RESUME OPTIONS:"
+#define MSG_FILAMENT_CHANGE_OPTION_PURGE    _UxGT("Ê∏ÖÈô§Êõ¥Â§ö") // "Purge more"
 #define MSG_FILAMENT_CHANGE_OPTION_RESUME   _UxGT("ÊÅ¢Âæ©ÂàóÂç∞")  //"Resume print"
+#define MSG_FILAMENT_CHANGE_NOZZLE          _UxGT("  Âô¥Âò¥: ") // "  Nozzle: "
+#define MSG_ERR_HOMING_FAILED               _UxGT("Ê≠∏Âéü‰ΩçÂ§±Êïó") // "Homing failed"
+#define MSG_ERR_PROBING_FAILED              _UxGT("Êé¢ÈáùÊé¢Ê∏¨Â§±Êïó") // "Probing failed"
+#define MSG_M600_TOO_COLD                   _UxGT("M600: Â§™Ê∂º") // "M600: Too cold"
 
 #if LCD_HEIGHT >= 4
 #define MSG_FILAMENT_CHANGE_INIT_1          _UxGT("Á≠âÂæÖÈñãÂßã")  //"Wait for start"
@@ -223,22 +364,27 @@
 #define MSG_FILAMENT_CHANGE_INIT_3          _UxGT("ËÆäÊõ¥")  //"change"
 #define MSG_FILAMENT_CHANGE_UNLOAD_1        _UxGT("Á≠âÂæÖ")  //"Wait for"
 #define MSG_FILAMENT_CHANGE_UNLOAD_2        _UxGT("Âç∏‰∏ãÁµ≤Êñô")  //"filament unload"
-#define MSG_FILAMENT_CHANGE_UNLOAD_3        _UxGT("")  //""
 #define MSG_FILAMENT_CHANGE_INSERT_1        _UxGT("ÊèíÂÖ•Áµ≤Êñô")  //"Insert filament"
 #define MSG_FILAMENT_CHANGE_INSERT_2        _UxGT("‰∏¶ÊåâÈçµ")  //"and press button"
 #define MSG_FILAMENT_CHANGE_INSERT_3        _UxGT("ÁπºÁ∫å ...")  //"to continue..."
+#define MSG_FILAMENT_CHANGE_HEAT_1          _UxGT("Êåâ‰∏ãÊåâÈàï‰æÜ") // "Press button to"
+#define MSG_FILAMENT_CHANGE_HEAT_2          _UxGT("Âä†ÁÜ±Âô¥Âò¥.") // "heat nozzle."
+#define MSG_FILAMENT_CHANGE_HEATING_1       _UxGT("Âä†ÁÜ±Âô¥Âò¥") // "Heating nozzle"
+#define MSG_FILAMENT_CHANGE_HEATING_2       _UxGT("Ë´ãÁ≠âÂæÖ ...") // "Please wait..."
 #define MSG_FILAMENT_CHANGE_LOAD_1          _UxGT("Á≠âÂæÖ")  //"Wait for"
 #define MSG_FILAMENT_CHANGE_LOAD_2          _UxGT("ÈÄ≤Êñô")  //"filament load"
-#define MSG_FILAMENT_CHANGE_LOAD_3          _UxGT("")  //""
+#define MSG_FILAMENT_CHANGE_PURGE_1         _UxGT("Á≠âÂæÖ") // "Wait for"
+#define MSG_FILAMENT_CHANGE_PURGE_2         _UxGT("Áµ≤ÊñôÊ∏ÖÈô§") // "filament purge"
 #define MSG_FILAMENT_CHANGE_RESUME_1        _UxGT("Á≠âÂæÖÂàóÂç∞")  //"Wait for print"
 #define MSG_FILAMENT_CHANGE_RESUME_2        _UxGT("ÊÅ¢Âæ©")  //"to resume"
-#define MSG_FILAMENT_CHANGE_RESUME_3        _UxGT("")  //""
 
 #else // LCD_HEIGHT < 4
 #define MSG_FILAMENT_CHANGE_INIT_1          _UxGT("Ë´ãÁ≠âÂæÖ ...")  //"Please wait..."
 #define MSG_FILAMENT_CHANGE_UNLOAD_1        _UxGT("ÈÄÄÂá∫‰∏≠ ...")  //"Ejecting..."
 #define MSG_FILAMENT_CHANGE_INSERT_1        _UxGT("ÊèíÂÖ•‰∏¶ÈªûÊìä")  //"Insert and Click"
+#define MSG_FILAMENT_CHANGE_HEATING_1       _UxGT("Âä†ÁÜ±‰∏≠ ...") // "Heating..."
 #define MSG_FILAMENT_CHANGE_LOAD_1          _UxGT("ËºâÂÖ•‰∏≠ ...")  //"Loading..."
+#define MSG_FILAMENT_CHANGE_PURGE_1         _UxGT("Ê∏ÖÈô§‰∏≠ ...") // "Purging..."
 #define MSG_FILAMENT_CHANGE_RESUME_1        _UxGT("ÊÅ¢Âæ©‰∏≠ ...")  //"Resuming..."
 #endif // LCD_HEIGHT < 4
 

commit 5a7088746755b46521d1342875cb2f49c40959fa
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Feb 8 23:03:47 2018 -0600

    Size lcd_status_message based on language (#9545)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 12682c7b13..f7e0ffac7d 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -30,6 +30,8 @@
 #ifndef LANGUAGE_ZH_TW_H
 #define LANGUAGE_ZH_TW_H
 
+#define CHARSIZE 3
+
 #define WELCOME_MSG                         MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.")  //" ready."
 #define MSG_SD_INSERTED                     _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•")  //"Card inserted"
 #define MSG_SD_REMOVED                      _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫")  //"Card removed"

commit 786746404b8aa58c44a93734afd61c701d2abecb
Author: Thomas Moore <tcm0116@users.noreply.github.com>
Date:   Sun Feb 4 00:26:05 2018 -0600

    [2.0.x] Apply feedrate to nozzle movement for kinematic machines (#8778)

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 39b0e99444..12682c7b13 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -93,9 +93,15 @@
 #define MSG_SELECT                          _UxGT("ÈÅ∏Êìá")  //"Select"
 #define MSG_ACC                             _UxGT("Âä†ÈÄüÂ∫¶")  //"Accel" acceleration
 #define MSG_JERK                            _UxGT("ÊäñÂãïÈÄüÁéá")  //"Jerk"
-#define MSG_VX_JERK                         _UxGT("XËª∏ÊäñÂãïÈÄüÁéá")  //"Vx-jerk"
-#define MSG_VY_JERK                         _UxGT("YËª∏ÊäñÂãïÈÄüÁéá")  //"Vy-jerk"
-#define MSG_VZ_JERK                         _UxGT("ZËª∏ÊäñÂãïÈÄüÁéá")  //"Vz-jerk"
+#if IS_KINEMATIC
+  #define MSG_VA_JERK                       _UxGT("AËª∏ÊäñÂãïÈÄüÁéá")  //"Va-jerk"
+  #define MSG_VB_JERK                       _UxGT("BËª∏ÊäñÂãïÈÄüÁéá")  //"Vb-jerk"
+  #define MSG_VC_JERK                       _UxGT("CËª∏ÊäñÂãïÈÄüÁéá")  //"Vc-jerk"
+#else
+  #define MSG_VA_JERK                       _UxGT("XËª∏ÊäñÂãïÈÄüÁéá")  //"Vx-jerk"
+  #define MSG_VB_JERK                       _UxGT("YËª∏ÊäñÂãïÈÄüÁéá")  //"Vy-jerk"
+  #define MSG_VC_JERK                       _UxGT("ZËª∏ÊäñÂãïÈÄüÁéá")  //"Vz-jerk"
+#endif
 #define MSG_VE_JERK                         _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá")  //"Ve-jerk"
 #define MSG_VMAX                            _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá")  //"Vmax " max_feedrate_mm_s
 #define MSG_VMIN                            _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá")  //"Vmin"  min_feedrate_mm_s
@@ -104,9 +110,15 @@
 #define MSG_A_RETRACT                       _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶")  //"A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
 #define MSG_A_TRAVEL                        _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶")  //"A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
 #define MSG_STEPS_PER_MM                    _UxGT("Ëª∏Ê≠•Êï∏/mm")  //"Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
-#define MSG_XSTEPS                          _UxGT("XËª∏Ê≠•Êï∏/mm")  //"Xsteps/mm" axis_steps_per_mm, axis steps-per-unit G92
-#define MSG_YSTEPS                          _UxGT("YËª∏Ê≠•Êï∏/mm")  //"Ysteps/mm"
-#define MSG_ZSTEPS                          _UxGT("ZËª∏Ê≠•Êï∏/mm")  //"Zsteps/mm"
+#if IS_KINEMATIC
+  #define MSG_ASTEPS                        _UxGT("AËª∏Ê≠•Êï∏/mm")  //"Asteps/mm" axis_steps_per_mm, axis steps-per-unit G92
+  #define MSG_BSTEPS                        _UxGT("BËª∏Ê≠•Êï∏/mm")  //"Bsteps/mm"
+  #define MSG_CSTEPS                        _UxGT("CËª∏Ê≠•Êï∏/mm")  //"Csteps/mm"
+#else
+  #define MSG_ASTEPS                        _UxGT("XËª∏Ê≠•Êï∏/mm")  //"Xsteps/mm" axis_steps_per_mm, axis steps-per-unit G92
+  #define MSG_BSTEPS                        _UxGT("YËª∏Ê≠•Êï∏/mm")  //"Ysteps/mm"
+  #define MSG_CSTEPS                        _UxGT("ZËª∏Ê≠•Êï∏/mm")  //"Zsteps/mm"
+#endif
 #define MSG_ESTEPS                          _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm")  //"Esteps/mm"
 #define MSG_TEMPERATURE                     _UxGT("Ê∫´Â∫¶")  //"Temperature"
 #define MSG_MOTION                          _UxGT("ÈÅã‰Ωú")  //"Motion"

commit 81211da7b49dd3d053547eec629442ca274c4cd6
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jan 4 05:05:28 2018 -0600

    M701 / M702 language changes

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 315f77f7f4..39b0e99444 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -201,9 +201,6 @@
 #define MSG_INFO_MAX_TEMP                   _UxGT("ÊúÄÈ´òÊ∫´Â∫¶")  //"Max Temp"
 #define MSG_INFO_PSU                        _UxGT("ÈõªÊ∫ê‰æõÊáâ")  //"Power Supply"
 
-#define MSG_FILAMENT_CHANGE_HEADER          _UxGT("PRINT PAUSED")
-#define MSG_FILAMENT_CHANGE_OPTION_HEADER   _UxGT("RESUME OPTIONS:")
-#define MSG_FILAMENT_CHANGE_OPTION_EXTRUDE  _UxGT("Êì†Âá∫Êõ¥Â§ö")  //"Extrude more"
 #define MSG_FILAMENT_CHANGE_OPTION_RESUME   _UxGT("ÊÅ¢Âæ©ÂàóÂç∞")  //"Resume print"
 
 #if LCD_HEIGHT >= 4
@@ -219,9 +216,6 @@
 #define MSG_FILAMENT_CHANGE_LOAD_1          _UxGT("Á≠âÂæÖ")  //"Wait for"
 #define MSG_FILAMENT_CHANGE_LOAD_2          _UxGT("ÈÄ≤Êñô")  //"filament load"
 #define MSG_FILAMENT_CHANGE_LOAD_3          _UxGT("")  //""
-#define MSG_FILAMENT_CHANGE_EXTRUDE_1       _UxGT("Á≠âÂæÖ")  //"Wait for"
-#define MSG_FILAMENT_CHANGE_EXTRUDE_2       _UxGT("Áµ≤ÊñôÊì†Âá∫")  //"filament extrude"
-#define MSG_FILAMENT_CHANGE_EXTRUDE_3       _UxGT("")  //""
 #define MSG_FILAMENT_CHANGE_RESUME_1        _UxGT("Á≠âÂæÖÂàóÂç∞")  //"Wait for print"
 #define MSG_FILAMENT_CHANGE_RESUME_2        _UxGT("ÊÅ¢Âæ©")  //"to resume"
 #define MSG_FILAMENT_CHANGE_RESUME_3        _UxGT("")  //""
@@ -231,7 +225,6 @@
 #define MSG_FILAMENT_CHANGE_UNLOAD_1        _UxGT("ÈÄÄÂá∫‰∏≠ ...")  //"Ejecting..."
 #define MSG_FILAMENT_CHANGE_INSERT_1        _UxGT("ÊèíÂÖ•‰∏¶ÈªûÊìä")  //"Insert and Click"
 #define MSG_FILAMENT_CHANGE_LOAD_1          _UxGT("ËºâÂÖ•‰∏≠ ...")  //"Loading..."
-#define MSG_FILAMENT_CHANGE_EXTRUDE_1       _UxGT("Êì†Âá∫‰∏≠ ...")  //"Extruding..."
 #define MSG_FILAMENT_CHANGE_RESUME_1        _UxGT("ÊÅ¢Âæ©‰∏≠ ...")  //"Resuming..."
 #endif // LCD_HEIGHT < 4
 

commit 0efa66be0baf7524779dfe8d4a6e2310800389c3
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Nov 10 04:52:20 2017 -0600

    Updates to Traditional Chinese
    
    From @cheton at #8347

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 777c09312f..315f77f7f4 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -36,12 +36,12 @@
 #define MSG_LCD_ENDSTOPS                    _UxGT("ÊìãÂ°ä")  //"Endstops" // Max length 8 characters
 #define MSG_MAIN                            _UxGT("‰∏ªÈÅ∏ÂñÆ")  //"Main"
 #define MSG_AUTOSTART                       _UxGT("Ëá™ÂãïÈñãÂßã")  //"Autostart"
-#define MSG_DISABLE_STEPPERS                _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È©ÖÂãï")  //"Disable steppers"
+#define MSG_DISABLE_STEPPERS                _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È¶¨ÈÅî")  //"Disable steppers"
 #define MSG_AUTO_HOME                       _UxGT("Ëá™ÂãïÂõûÂéüÈªû")  //"Auto home"
-#define MSG_AUTO_HOME_X                     _UxGT("ÂõûXÂéü‰Ωç")  //"Home X"
-#define MSG_AUTO_HOME_Y                     _UxGT("ÂõûYÂéü‰Ωç")  //"Home Y"
-#define MSG_AUTO_HOME_Z                     _UxGT("ÂõûZÂéü‰Ωç")  //"Home Z"
-#define MSG_LEVEL_BED_HOMING                _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏Âéü‰Ωç")  //"Homing XYZ"
+#define MSG_AUTO_HOME_X                     _UxGT("ÂõûXÂéüÈªû")  //"Home X"
+#define MSG_AUTO_HOME_Y                     _UxGT("ÂõûYÂéüÈªû")  //"Home Y"
+#define MSG_AUTO_HOME_Z                     _UxGT("ÂõûZÂéüÈªû")  //"Home Z"
+#define MSG_LEVEL_BED_HOMING                _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏ÂéüÈªû")  //"Homing XYZ"
 #define MSG_LEVEL_BED_WAITING               _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥")  //"Click to Begin"
 #define MSG_LEVEL_BED_NEXT_POINT            _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû")  //"Next Point"
 #define MSG_LEVEL_BED_DONE                  _UxGT("ÂÆåÊàêÁÜ±Â∫äË™øÂπ≥")  //"Leveling Done!"
@@ -62,7 +62,7 @@
 #define MSG_SWITCH_PS_ON                    _UxGT("ÈõªÊ∫êÊâìÈñã")  //"Switch power on"
 #define MSG_SWITCH_PS_OFF                   _UxGT("ÈõªÊ∫êÈóúÈñâ")  //"Switch power off"
 #define MSG_EXTRUDE                         _UxGT("Êì†Âá∫")  //"Extrude"
-#define MSG_RETRACT                         _UxGT("ÂõûÊäΩ")  //"Retract"
+#define MSG_RETRACT                         _UxGT("ÂõûÁ∏Æ")  //"Retract"
 #define MSG_MOVE_AXIS                       _UxGT("ÁßªÂãïËª∏")  //"Move axis"
 #define MSG_BED_LEVELING                    _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä")  //"Bed leveling"
 #define MSG_LEVEL_BED                       _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä")  //"Level bed"
@@ -101,7 +101,7 @@
 #define MSG_VMIN                            _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá")  //"Vmin"  min_feedrate_mm_s
 #define MSG_VTRAV_MIN                       _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá")  //"VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
 #define MSG_AMAX                            _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶")  //"Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
-#define MSG_A_RETRACT                       _UxGT("Êî∂ÈÄ≤Âä†ÈÄüÂ∫¶")  //"A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
+#define MSG_A_RETRACT                       _UxGT("ÂõûÁ∏ÆÂä†ÈÄüÂ∫¶")  //"A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
 #define MSG_A_TRAVEL                        _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶")  //"A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
 #define MSG_STEPS_PER_MM                    _UxGT("Ëª∏Ê≠•Êï∏/mm")  //"Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
 #define MSG_XSTEPS                          _UxGT("XËª∏Ê≠•Êï∏/mm")  //"Xsteps/mm" axis_steps_per_mm, axis steps-per-unit G92
@@ -109,38 +109,38 @@
 #define MSG_ZSTEPS                          _UxGT("ZËª∏Ê≠•Êï∏/mm")  //"Zsteps/mm"
 #define MSG_ESTEPS                          _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm")  //"Esteps/mm"
 #define MSG_TEMPERATURE                     _UxGT("Ê∫´Â∫¶")  //"Temperature"
-#define MSG_MOTION                          _UxGT("ÈÅãÂãï")  //"Motion"
+#define MSG_MOTION                          _UxGT("ÈÅã‰Ωú")  //"Motion"
 #define MSG_FILAMENT                        _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ")  //"Filament" lcd_control_volumetric_menu
 #define MSG_VOLUMETRIC_ENABLED              _UxGT("Ê∏¨ÂÆπÁ©çmm¬≥")  //"E in mm3" volumetric_enabled
 #define MSG_FILAMENT_DIAM                   _UxGT("Áµ≤ÊñôÁõ¥Âæë")  //"Fil. Dia."
 #define MSG_CONTRAST                        _UxGT("LCDÂ∞çÊØîÂ∫¶")  //"LCD contrast"
 #define MSG_STORE_EEPROM                    _UxGT("‰øùÂ≠òË®≠ÁΩÆ")  //"Store memory"
-#define MSG_LOAD_EEPROM                     _UxGT("Ë£ùËºâË®≠ÁΩÆ")  //"Load memory"
-#define MSG_RESTORE_FAILSAFE                _UxGT("ÊÅ¢Ë§áÂÆâÂÖ®ÂÄº")  //"Restore failsafe"
+#define MSG_LOAD_EEPROM                     _UxGT("ËºâÂÖ•Ë®≠ÁΩÆ")  //"Load memory"
+#define MSG_RESTORE_FAILSAFE                _UxGT("ÊÅ¢Âæ©ÂÆâÂÖ®ÂÄº")  //"Restore failsafe"
 #define MSG_REFRESH                         _UxGT("Âà∑Êñ∞")  //"Refresh"
 #define MSG_WATCH                           _UxGT("Ë≥áË®äÁïåÈù¢")  //"Info screen"
 #define MSG_PREPARE                         _UxGT("Ê∫ñÂÇô")  //"Prepare"
 #define MSG_TUNE                            _UxGT("Ë™øÊï¥")  //"Tune"
 #define MSG_PAUSE_PRINT                     _UxGT("Êö´ÂÅúÂàóÂç∞")  //"Pause print"
-#define MSG_RESUME_PRINT                    _UxGT("ÊÅ¢Ë§áÂàóÂç∞")  //"Resume print"
+#define MSG_RESUME_PRINT                    _UxGT("ÊÅ¢Âæ©ÂàóÂç∞")  //"Resume print"
 #define MSG_STOP_PRINT                      _UxGT("ÂÅúÊ≠¢ÂàóÂç∞")  //"Stop print"
 #define MSG_CARD_MENU                       _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞")  //"Print from SD"
 #define MSG_NO_CARD                         _UxGT("ÁÑ°Ë®òÊÜ∂Âç°")  //"No SD card"
 #define MSG_DWELL                           _UxGT("‰ºëÁú† ...")  //"Sleep..."
 #define MSG_USERWAIT                        _UxGT("Á≠âÂæÖÁî®Êà∂ ...")  //"Wait for user..."
-#define MSG_RESUMING                        _UxGT("ÊÅ¢Ë§áÂàóÂç∞‰∏≠")  //"Resuming print"
+#define MSG_RESUMING                        _UxGT("ÊÅ¢Âæ©ÂàóÂç∞‰∏≠")  //"Resuming print"
 #define MSG_PRINT_ABORTED                   _UxGT("ÂàóÂç∞Â∑≤ÂèñÊ∂à")  //"Print aborted"
 #define MSG_NO_MOVE                         _UxGT("ÁÑ°ÁßªÂãï")  //"No move."
-#define MSG_KILLED                          _UxGT("Â∑≤ÊÆ∫Êéâ")  //"KILLED. "
+#define MSG_KILLED                          _UxGT("Â∑≤Á†çÊéâ")  //"KILLED. "
 #define MSG_STOPPED                         _UxGT("Â∑≤ÂÅúÊ≠¢")  //"STOPPED. "
-#define MSG_CONTROL_RETRACT                 _UxGT("ÂõûÊäΩÈï∑Â∫¶mm")  //"Retract mm" retract_length, retract length (positive mm)
+#define MSG_CONTROL_RETRACT                 _UxGT("ÂõûÁ∏ÆÈï∑Â∫¶mm")  //"Retract mm" retract_length, retract length (positive mm)
 #define MSG_CONTROL_RETRACT_SWAP            _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm")  //"Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
-#define MSG_CONTROL_RETRACTF                _UxGT("ÂõûÊäΩÈÄüÁéámm/s")  //"Retract  V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
+#define MSG_CONTROL_RETRACTF                _UxGT("ÂõûÁ∏ÆÈÄüÁéámm/s")  //"Retract  V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
 #define MSG_CONTROL_RETRACT_ZLIFT           _UxGT("Hop mm")  //"Hop mm" retract_zlift, retract Z-lift
-#define MSG_CONTROL_RETRACT_RECOVER         _UxGT("ÂõûÊäΩÊÅ¢Ë§áÈï∑Â∫¶mm")  //"UnRet +mm" retract_recover_length, additional recover length (mm, added to retract length when recovering)
-#define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("ÊèõÊâãÂõûÊäΩÊÅ¢Ë§áÈï∑Â∫¶mm")  //"S UnRet+mm" swap_retract_recover_length, additional swap recover length (mm, added to retract length when recovering from extruder change)
-#define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("ÂõûÊäΩÊÅ¢Ë§áÂæåÈÄ≤ÊñôÈÄüÁéámm/s")  //"UnRet  V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
-#define MSG_AUTORETRACT                     _UxGT("Ëá™ÂãïÊäΩÂõû")  //"AutoRetr." autoretract_enabled,
+#define MSG_CONTROL_RETRACT_RECOVER         _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm")  //"UnRet +mm" retract_recover_length, additional recover length (mm, added to retract length when recovering)
+#define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("ÊèõÊâãÂõûÁ∏ÆÊÅ¢Âæ©Èï∑Â∫¶mm")  //"S UnRet+mm" swap_retract_recover_length, additional swap recover length (mm, added to retract length when recovering from extruder change)
+#define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("ÂõûÁ∏ÆÊÅ¢Âæ©ÂæåÈÄ≤ÊñôÈÄüÁéámm/s")  //"UnRet  V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
+#define MSG_AUTORETRACT                     _UxGT("Ëá™ÂãïÂõûÁ∏Æ")  //"AutoRetr." autoretract_enabled,
 #define MSG_FILAMENTCHANGE                  _UxGT("Êõ¥ÊèõÁµ≤Êñô")  //"Change filament"
 #define MSG_INIT_SDCARD                     _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°")  //"Init. SD card"
 #define MSG_CNG_SDCARD                      _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°")  //"Change SD card"
@@ -175,17 +175,17 @@
 #define MSG_DELTA_CALIBRATE_CENTER          _UxGT("Ê†°Ê∫ñ‰∏≠ÂøÉ")  //"Calibrate Center"
 
 #define MSG_INFO_MENU                       _UxGT("ÈóúÊñºÂç∞Ë°®Ê©ü")  //"About Printer"
-#define MSG_INFO_PRINTER_MENU               _UxGT("Âç∞Ë°®Ê©ü‰ø°ÊÅØ")  //"Printer Info"
+#define MSG_INFO_PRINTER_MENU               _UxGT("Âç∞Ë°®Ê©üË®äÊÅØ")  //"Printer Info"
 #define MSG_INFO_STATS_MENU                 _UxGT("Âç∞Ë°®Ê©üÁµ±Ë®à")  //"Printer Stats"
-#define MSG_INFO_BOARD_MENU                 _UxGT("‰∏ªÊùø‰ø°ÊÅØ")  //"Board Info"
+#define MSG_INFO_BOARD_MENU                 _UxGT("‰∏ªÊùøË®äÊÅØ")  //"Board Info"
 #define MSG_INFO_THERMISTOR_MENU            _UxGT("Ê∫´Â∫¶Ë®à")  //"Thermistors"
 #define MSG_INFO_EXTRUDERS                  _UxGT("Êì†Âá∫Ê©ü")  //"Extruders"
-#define MSG_INFO_BAUDRATE                   _UxGT("Ê≥¢ÁâπÁéá")  //"Baud"
+#define MSG_INFO_BAUDRATE                   _UxGT("ÂÇ≥Ëº∏Áéá")  //"Baud"
 #define MSG_INFO_PROTOCOL                   _UxGT("ÂçîË≠∞")  //"Protocol"
 
 #if LCD_WIDTH > 19
 #define MSG_INFO_PRINT_COUNT              _UxGT("ÂàóÂç∞Ë®àÊï∏")  //"Print Count"
-#define MSG_INFO_COMPLETED_PRINTS         _UxGT("ÂÆåÊàê‰∫Ü")  //"Completed"
+#define MSG_INFO_COMPLETED_PRINTS         _UxGT("Â∑≤ÂÆåÊàê")  //"Completed"
 #define MSG_INFO_PRINT_TIME               _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì")  //"Total print time"
 #define MSG_INFO_PRINT_LONGEST            _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì")  //"Longest job time"
 #define MSG_INFO_PRINT_FILAMENT           _UxGT("Á∏ΩË®àÊì†Âá∫")  //"Extruded total"
@@ -204,7 +204,7 @@
 #define MSG_FILAMENT_CHANGE_HEADER          _UxGT("PRINT PAUSED")
 #define MSG_FILAMENT_CHANGE_OPTION_HEADER   _UxGT("RESUME OPTIONS:")
 #define MSG_FILAMENT_CHANGE_OPTION_EXTRUDE  _UxGT("Êì†Âá∫Êõ¥Â§ö")  //"Extrude more"
-#define MSG_FILAMENT_CHANGE_OPTION_RESUME   _UxGT("ÊÅ¢Ë§áÂàóÂç∞")  //"Resume print"
+#define MSG_FILAMENT_CHANGE_OPTION_RESUME   _UxGT("ÊÅ¢Âæ©ÂàóÂç∞")  //"Resume print"
 
 #if LCD_HEIGHT >= 4
 #define MSG_FILAMENT_CHANGE_INIT_1          _UxGT("Á≠âÂæÖÈñãÂßã")  //"Wait for start"
@@ -215,7 +215,7 @@
 #define MSG_FILAMENT_CHANGE_UNLOAD_3        _UxGT("")  //""
 #define MSG_FILAMENT_CHANGE_INSERT_1        _UxGT("ÊèíÂÖ•Áµ≤Êñô")  //"Insert filament"
 #define MSG_FILAMENT_CHANGE_INSERT_2        _UxGT("‰∏¶ÊåâÈçµ")  //"and press button"
-#define MSG_FILAMENT_CHANGE_INSERT_3        _UxGT("‰æÜÁπºÁ∫å ...")  //"to continue..."
+#define MSG_FILAMENT_CHANGE_INSERT_3        _UxGT("ÁπºÁ∫å ...")  //"to continue..."
 #define MSG_FILAMENT_CHANGE_LOAD_1          _UxGT("Á≠âÂæÖ")  //"Wait for"
 #define MSG_FILAMENT_CHANGE_LOAD_2          _UxGT("ÈÄ≤Êñô")  //"filament load"
 #define MSG_FILAMENT_CHANGE_LOAD_3          _UxGT("")  //""
@@ -223,16 +223,16 @@
 #define MSG_FILAMENT_CHANGE_EXTRUDE_2       _UxGT("Áµ≤ÊñôÊì†Âá∫")  //"filament extrude"
 #define MSG_FILAMENT_CHANGE_EXTRUDE_3       _UxGT("")  //""
 #define MSG_FILAMENT_CHANGE_RESUME_1        _UxGT("Á≠âÂæÖÂàóÂç∞")  //"Wait for print"
-#define MSG_FILAMENT_CHANGE_RESUME_2        _UxGT("ÊÅ¢Ë§á")  //"to resume"
+#define MSG_FILAMENT_CHANGE_RESUME_2        _UxGT("ÊÅ¢Âæ©")  //"to resume"
 #define MSG_FILAMENT_CHANGE_RESUME_3        _UxGT("")  //""
 
 #else // LCD_HEIGHT < 4
 #define MSG_FILAMENT_CHANGE_INIT_1          _UxGT("Ë´ãÁ≠âÂæÖ ...")  //"Please wait..."
 #define MSG_FILAMENT_CHANGE_UNLOAD_1        _UxGT("ÈÄÄÂá∫‰∏≠ ...")  //"Ejecting..."
-#define MSG_FILAMENT_CHANGE_INSERT_1        _UxGT("ÊèíÂÖ•‰∏¶ÂñÆÊìä")  //"Insert and Click"
-#define MSG_FILAMENT_CHANGE_LOAD_1          _UxGT("Ë£ùËºâ‰∏≠ ...")  //"Loading..."
+#define MSG_FILAMENT_CHANGE_INSERT_1        _UxGT("ÊèíÂÖ•‰∏¶ÈªûÊìä")  //"Insert and Click"
+#define MSG_FILAMENT_CHANGE_LOAD_1          _UxGT("ËºâÂÖ•‰∏≠ ...")  //"Loading..."
 #define MSG_FILAMENT_CHANGE_EXTRUDE_1       _UxGT("Êì†Âá∫‰∏≠ ...")  //"Extruding..."
-#define MSG_FILAMENT_CHANGE_RESUME_1        _UxGT("ÊÅ¢Ë§á‰∏≠ ...")  //"Resuming..."
+#define MSG_FILAMENT_CHANGE_RESUME_1        _UxGT("ÊÅ¢Âæ©‰∏≠ ...")  //"Resuming..."
 #endif // LCD_HEIGHT < 4
 
 #endif // LANGUAGE_ZH_TW_H

commit 7dd0a467325e75eafb19fc7e8b1ccce78686069b
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Sep 6 06:28:32 2017 -0500

    Language updates

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
index 1ac9aaf099..777c09312f 100644
--- a/Marlin/src/lcd/language/language_zh_TW.h
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -24,7 +24,7 @@
  * Traditional Chinese
  *
  * LCD Menu Messages
- * See also https://github.com/MarlinFirmware/Marlin/wiki/LCD-Language
+ * See also http://marlinfw.org/docs/development/lcd_language.html
  *
  */
 #ifndef LANGUAGE_ZH_TW_H

commit cc92e544a58dc259a4a2f70ba57b6b48b3aa1e7b
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Wed Sep 6 06:28:30 2017 -0500

    Move 'lcd' files

diff --git a/Marlin/src/lcd/language/language_zh_TW.h b/Marlin/src/lcd/language/language_zh_TW.h
new file mode 100644
index 0000000000..1ac9aaf099
--- /dev/null
+++ b/Marlin/src/lcd/language/language_zh_TW.h
@@ -0,0 +1,238 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+/**
+ * Traditional Chinese
+ *
+ * LCD Menu Messages
+ * See also https://github.com/MarlinFirmware/Marlin/wiki/LCD-Language
+ *
+ */
+#ifndef LANGUAGE_ZH_TW_H
+#define LANGUAGE_ZH_TW_H
+
+#define WELCOME_MSG                         MACHINE_NAME _UxGT("Â∑≤Â∞±Á∑í.")  //" ready."
+#define MSG_SD_INSERTED                     _UxGT("Ë®òÊÜ∂Âç°Â∑≤ÊèíÂÖ•")  //"Card inserted"
+#define MSG_SD_REMOVED                      _UxGT("Ë®òÊÜ∂Âç°Ë¢´ÊãîÂá∫")  //"Card removed"
+#define MSG_LCD_ENDSTOPS                    _UxGT("ÊìãÂ°ä")  //"Endstops" // Max length 8 characters
+#define MSG_MAIN                            _UxGT("‰∏ªÈÅ∏ÂñÆ")  //"Main"
+#define MSG_AUTOSTART                       _UxGT("Ëá™ÂãïÈñãÂßã")  //"Autostart"
+#define MSG_DISABLE_STEPPERS                _UxGT("ÈóúÈñâÊ≠•ÈÄ≤È©ÖÂãï")  //"Disable steppers"
+#define MSG_AUTO_HOME                       _UxGT("Ëá™ÂãïÂõûÂéüÈªû")  //"Auto home"
+#define MSG_AUTO_HOME_X                     _UxGT("ÂõûXÂéü‰Ωç")  //"Home X"
+#define MSG_AUTO_HOME_Y                     _UxGT("ÂõûYÂéü‰Ωç")  //"Home Y"
+#define MSG_AUTO_HOME_Z                     _UxGT("ÂõûZÂéü‰Ωç")  //"Home Z"
+#define MSG_LEVEL_BED_HOMING                _UxGT("Âπ≥Âè∞Ë™øÂπ≥XYZÊ≠∏Âéü‰Ωç")  //"Homing XYZ"
+#define MSG_LEVEL_BED_WAITING               _UxGT("ÂñÆÊìäÈñãÂßãÁÜ±Â∫äË™øÂπ≥")  //"Click to Begin"
+#define MSG_LEVEL_BED_NEXT_POINT            _UxGT("‰∏ãÂÄãÁÜ±Â∫äË™øÂπ≥Èªû")  //"Next Point"
+#define MSG_LEVEL_BED_DONE                  _UxGT("ÂÆåÊàêÁÜ±Â∫äË™øÂπ≥")  //"Leveling Done!"
+#define MSG_SET_HOME_OFFSETS                _UxGT("Ë®≠ÁΩÆÂéüÈªûÂÅèÁßª")  //"Set home offsets"
+#define MSG_HOME_OFFSETS_APPLIED            _UxGT("ÂÅèÁßªÂ∑≤ÂïüÁî®")  //"Offsets applied"
+#define MSG_SET_ORIGIN                      _UxGT("Ë®≠ÁΩÆÂéüÈªû")  //"Set origin"
+#define MSG_PREHEAT_1                       _UxGT("È†êÁÜ±PLA")  //"Preheat PLA"
+#define MSG_PREHEAT_1_N                     MSG_PREHEAT_1 _UxGT(" ")  //MSG_PREHEAT_1 " "
+#define MSG_PREHEAT_1_ALL                   MSG_PREHEAT_1 _UxGT(" ÂÖ®ÈÉ®")  //MSG_PREHEAT_1 " All"
+#define MSG_PREHEAT_1_BEDONLY               MSG_PREHEAT_1 _UxGT(" ÁÜ±Â∫ä")  //MSG_PREHEAT_1 " Bed"
+#define MSG_PREHEAT_1_SETTINGS              MSG_PREHEAT_1 _UxGT(" Ë®≠ÁΩÆ")  //MSG_PREHEAT_1 " conf"
+#define MSG_PREHEAT_2                       _UxGT("È†êÁÜ±ABS")  //"Preheat ABS"
+#define MSG_PREHEAT_2_N                     MSG_PREHEAT_2 _UxGT(" ")  //MSG_PREHEAT_2 " "
+#define MSG_PREHEAT_2_ALL                   MSG_PREHEAT_2 _UxGT(" ÂÖ®ÈÉ®")  //MSG_PREHEAT_2 " All"
+#define MSG_PREHEAT_2_BEDONLY               MSG_PREHEAT_2 _UxGT(" ÁÜ±Â∫ä")  //MSG_PREHEAT_2 " Bed"
+#define MSG_PREHEAT_2_SETTINGS              MSG_PREHEAT_2 _UxGT(" Ë®≠ÁΩÆ")  //MSG_PREHEAT_2 " conf"
+#define MSG_COOLDOWN                        _UxGT("ÈôçÊ∫´")  //"Cooldown"
+#define MSG_SWITCH_PS_ON                    _UxGT("ÈõªÊ∫êÊâìÈñã")  //"Switch power on"
+#define MSG_SWITCH_PS_OFF                   _UxGT("ÈõªÊ∫êÈóúÈñâ")  //"Switch power off"
+#define MSG_EXTRUDE                         _UxGT("Êì†Âá∫")  //"Extrude"
+#define MSG_RETRACT                         _UxGT("ÂõûÊäΩ")  //"Retract"
+#define MSG_MOVE_AXIS                       _UxGT("ÁßªÂãïËª∏")  //"Move axis"
+#define MSG_BED_LEVELING                    _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä")  //"Bed leveling"
+#define MSG_LEVEL_BED                       _UxGT("Ë™øÂπ≥ÁÜ±Â∫ä")  //"Level bed"
+#define MSG_MOVE_X                          _UxGT("ÁßªÂãïX")  //"Move X"
+#define MSG_MOVE_Y                          _UxGT("ÁßªÂãïY")  //"Move Y"
+#define MSG_MOVE_Z                          _UxGT("ÁßªÂãïZ")  //"Move Z"
+#define MSG_MOVE_E                          _UxGT("Êì†Âá∫Ê©ü")  //"Extruder"
+#define MSG_MOVE_01MM                       _UxGT("ÁßªÂãï 0.1 mm")  //"Move 0.1mm"
+#define MSG_MOVE_1MM                        _UxGT("ÁßªÂãï 1 mm")  //"Move 1mm"
+#define MSG_MOVE_10MM                       _UxGT("ÁßªÂãï 10 mm")  //"Move 10mm"
+#define MSG_SPEED                           _UxGT("ÈÄüÁéá")  //"Speed"
+#define MSG_BED_Z                           _UxGT("ÁÜ±Â∫äZ")  //"Bed Z"
+#define MSG_NOZZLE                          _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" Âô¥Âò¥")  //"Nozzle" Âô¥Âò¥
+#define MSG_BED                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" ÁÜ±Â∫ä")  //"Bed"
+#define MSG_FAN_SPEED                       _UxGT("È¢®ÊâáÈÄüÁéá")  //"Fan speed"
+#define MSG_FLOW                            _UxGT("Êì†Âá∫ÈÄüÁéá")  //"Flow"
+#define MSG_CONTROL                         _UxGT("ÊéßÂà∂")  //"Control"
+#define MSG_MIN                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ∞è") //" " LCD_STR_THERMOMETER " Min"
+#define MSG_MAX                             _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" ÊúÄÂ§ß")  //" " LCD_STR_THERMOMETER " Max"
+#define MSG_FACTOR                          _UxGT(" ") LCD_STR_THERMOMETER _UxGT(" Á≥ªÊï∏")  //" " LCD_STR_THERMOMETER " Fact"
+#define MSG_AUTOTEMP                        _UxGT("Ëá™ÂãïÊéßÊ∫´")  //"Autotemp"
+#define MSG_ON                              _UxGT("Èñã ")  //"On "
+#define MSG_OFF                             _UxGT("Èóú ")  //"Off"
+#define MSG_PID_P                           _UxGT("PID-P")  //"PID-P"
+#define MSG_PID_I                           _UxGT("PID-I")  //"PID-I"
+#define MSG_PID_D                           _UxGT("PID-D")  //"PID-D"
+#define MSG_PID_C                           _UxGT("PID-C")  //"PID-C"
+#define MSG_SELECT                          _UxGT("ÈÅ∏Êìá")  //"Select"
+#define MSG_ACC                             _UxGT("Âä†ÈÄüÂ∫¶")  //"Accel" acceleration
+#define MSG_JERK                            _UxGT("ÊäñÂãïÈÄüÁéá")  //"Jerk"
+#define MSG_VX_JERK                         _UxGT("XËª∏ÊäñÂãïÈÄüÁéá")  //"Vx-jerk"
+#define MSG_VY_JERK                         _UxGT("YËª∏ÊäñÂãïÈÄüÁéá")  //"Vy-jerk"
+#define MSG_VZ_JERK                         _UxGT("ZËª∏ÊäñÂãïÈÄüÁéá")  //"Vz-jerk"
+#define MSG_VE_JERK                         _UxGT("Êì†Âá∫Ê©üÊäñÂãïÈÄüÁéá")  //"Ve-jerk"
+#define MSG_VMAX                            _UxGT("ÊúÄÂ§ßÈÄ≤ÊñôÈÄüÁéá")  //"Vmax " max_feedrate_mm_s
+#define MSG_VMIN                            _UxGT("ÊúÄÂ∞èÈÄ≤ÊñôÈÄüÁéá")  //"Vmin"  min_feedrate_mm_s
+#define MSG_VTRAV_MIN                       _UxGT("ÊúÄÂ∞èÁßªÂãïÈÄüÁéá")  //"VTrav min" min_travel_feedrate_mm_s, (target) speed of the move
+#define MSG_AMAX                            _UxGT("ÊúÄÂ§ßÂàóÂç∞Âä†ÈÄüÂ∫¶")  //"Amax " max_acceleration_mm_per_s2, acceleration in units/s^2 for print moves
+#define MSG_A_RETRACT                       _UxGT("Êî∂ÈÄ≤Âä†ÈÄüÂ∫¶")  //"A-retract" retract_acceleration, E acceleration in mm/s^2 for retracts
+#define MSG_A_TRAVEL                        _UxGT("ÈùûÂàóÂç∞ÁßªÂãïÂä†ÈÄüÂ∫¶")  //"A-travel" travel_acceleration, X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
+#define MSG_STEPS_PER_MM                    _UxGT("Ëª∏Ê≠•Êï∏/mm")  //"Steps/mm" axis_steps_per_mm, axis steps-per-unit G92
+#define MSG_XSTEPS                          _UxGT("XËª∏Ê≠•Êï∏/mm")  //"Xsteps/mm" axis_steps_per_mm, axis steps-per-unit G92
+#define MSG_YSTEPS                          _UxGT("YËª∏Ê≠•Êï∏/mm")  //"Ysteps/mm"
+#define MSG_ZSTEPS                          _UxGT("ZËª∏Ê≠•Êï∏/mm")  //"Zsteps/mm"
+#define MSG_ESTEPS                          _UxGT("Êì†Âá∫Ê©üÊ≠•Êï∏/mm")  //"Esteps/mm"
+#define MSG_TEMPERATURE                     _UxGT("Ê∫´Â∫¶")  //"Temperature"
+#define MSG_MOTION                          _UxGT("ÈÅãÂãï")  //"Motion"
+#define MSG_FILAMENT                        _UxGT("Áµ≤ÊñôÊ∏¨ÂÆπ")  //"Filament" lcd_control_volumetric_menu
+#define MSG_VOLUMETRIC_ENABLED              _UxGT("Ê∏¨ÂÆπÁ©çmm¬≥")  //"E in mm3" volumetric_enabled
+#define MSG_FILAMENT_DIAM                   _UxGT("Áµ≤ÊñôÁõ¥Âæë")  //"Fil. Dia."
+#define MSG_CONTRAST                        _UxGT("LCDÂ∞çÊØîÂ∫¶")  //"LCD contrast"
+#define MSG_STORE_EEPROM                    _UxGT("‰øùÂ≠òË®≠ÁΩÆ")  //"Store memory"
+#define MSG_LOAD_EEPROM                     _UxGT("Ë£ùËºâË®≠ÁΩÆ")  //"Load memory"
+#define MSG_RESTORE_FAILSAFE                _UxGT("ÊÅ¢Ë§áÂÆâÂÖ®ÂÄº")  //"Restore failsafe"
+#define MSG_REFRESH                         _UxGT("Âà∑Êñ∞")  //"Refresh"
+#define MSG_WATCH                           _UxGT("Ë≥áË®äÁïåÈù¢")  //"Info screen"
+#define MSG_PREPARE                         _UxGT("Ê∫ñÂÇô")  //"Prepare"
+#define MSG_TUNE                            _UxGT("Ë™øÊï¥")  //"Tune"
+#define MSG_PAUSE_PRINT                     _UxGT("Êö´ÂÅúÂàóÂç∞")  //"Pause print"
+#define MSG_RESUME_PRINT                    _UxGT("ÊÅ¢Ë§áÂàóÂç∞")  //"Resume print"
+#define MSG_STOP_PRINT                      _UxGT("ÂÅúÊ≠¢ÂàóÂç∞")  //"Stop print"
+#define MSG_CARD_MENU                       _UxGT("ÂæûË®òÊÜ∂Âç°‰∏äÂàóÂç∞")  //"Print from SD"
+#define MSG_NO_CARD                         _UxGT("ÁÑ°Ë®òÊÜ∂Âç°")  //"No SD card"
+#define MSG_DWELL                           _UxGT("‰ºëÁú† ...")  //"Sleep..."
+#define MSG_USERWAIT                        _UxGT("Á≠âÂæÖÁî®Êà∂ ...")  //"Wait for user..."
+#define MSG_RESUMING                        _UxGT("ÊÅ¢Ë§áÂàóÂç∞‰∏≠")  //"Resuming print"
+#define MSG_PRINT_ABORTED                   _UxGT("ÂàóÂç∞Â∑≤ÂèñÊ∂à")  //"Print aborted"
+#define MSG_NO_MOVE                         _UxGT("ÁÑ°ÁßªÂãï")  //"No move."
+#define MSG_KILLED                          _UxGT("Â∑≤ÊÆ∫Êéâ")  //"KILLED. "
+#define MSG_STOPPED                         _UxGT("Â∑≤ÂÅúÊ≠¢")  //"STOPPED. "
+#define MSG_CONTROL_RETRACT                 _UxGT("ÂõûÊäΩÈï∑Â∫¶mm")  //"Retract mm" retract_length, retract length (positive mm)
+#define MSG_CONTROL_RETRACT_SWAP            _UxGT("ÊèõÊâãÂõûÊäΩÈï∑Â∫¶mm")  //"Swap Re.mm" swap_retract_length, swap retract length (positive mm), for extruder change
+#define MSG_CONTROL_RETRACTF                _UxGT("ÂõûÊäΩÈÄüÁéámm/s")  //"Retract  V" retract_feedrate_mm_s, feedrate for retracting (mm/s)
+#define MSG_CONTROL_RETRACT_ZLIFT           _UxGT("Hop mm")  //"Hop mm" retract_zlift, retract Z-lift
+#define MSG_CONTROL_RETRACT_RECOVER         _UxGT("ÂõûÊäΩÊÅ¢Ë§áÈï∑Â∫¶mm")  //"UnRet +mm" retract_recover_length, additional recover length (mm, added to retract length when recovering)
+#define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("ÊèõÊâãÂõûÊäΩÊÅ¢Ë§áÈï∑Â∫¶mm")  //"S UnRet+mm" swap_retract_recover_length, additional swap recover length (mm, added to retract length when recovering from extruder change)
+#define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("ÂõûÊäΩÊÅ¢Ë§áÂæåÈÄ≤ÊñôÈÄüÁéámm/s")  //"UnRet  V" retract_recover_feedrate_mm_s, feedrate for recovering from retraction (mm/s)
+#define MSG_AUTORETRACT                     _UxGT("Ëá™ÂãïÊäΩÂõû")  //"AutoRetr." autoretract_enabled,
+#define MSG_FILAMENTCHANGE                  _UxGT("Êõ¥ÊèõÁµ≤Êñô")  //"Change filament"
+#define MSG_INIT_SDCARD                     _UxGT("ÂàùÂßãÂåñË®òÊÜ∂Âç°")  //"Init. SD card"
+#define MSG_CNG_SDCARD                      _UxGT("Êõ¥ÊèõË®òÊÜ∂Âç°")  //"Change SD card"
+#define MSG_ZPROBE_OUT                      _UxGT("ZÊé¢ÈáùÂú®ÁÜ±Â∫ä‰πãÂ§ñ")  //"Z probe out. bed" Z probe is not within the physical limits
+#define MSG_HOME                            _UxGT("Ê≠∏‰Ωç")  //"Home"  // Used as MSG_HOME " " MSG_X MSG_Y MSG_Z " " MSG_FIRST
+#define MSG_FIRST                           _UxGT("ÂÖà")  //"first"
+#define MSG_ZPROBE_ZOFFSET                  _UxGT("ZÂÅèÁßª")  //"Z Offset"
+#define MSG_BABYSTEP_X                      _UxGT("ÂæÆÈáèË™øÊï¥XËª∏")  //"Babystep X" lcd_babystep_x, Babystepping enables the user to control the axis in tiny amounts
+#define MSG_BABYSTEP_Y                      _UxGT("ÂæÆÈáèË™øÊï¥YËª∏")  //"Babystep Y"
+#define MSG_BABYSTEP_Z                      _UxGT("ÂæÆÈáèË™øÊï¥ZËª∏")  //"Babystep Z"
+#define MSG_ENDSTOP_ABORT                   _UxGT("ÊìãÂ°äÁµÇÊ≠¢")  //"Endstop abort"
+#define MSG_HEATING_FAILED_LCD              _UxGT("Âä†ÁÜ±Â§±Êïó")  //"Heating failed"
+#define MSG_ERR_REDUNDANT_TEMP              _UxGT("ÈåØË™§ÔºöREDUNDANT TEMP")  //"Err: REDUNDANT TEMP"
+#define MSG_THERMAL_RUNAWAY                 _UxGT("Ê∫´ÊéßÂ§±Êéß")  //"THERMAL RUNAWAY"
+#define MSG_ERR_MAXTEMP                     _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÊ∫´Â∫¶")  //"Err: MAXTEMP"
+#define MSG_ERR_MINTEMP                     _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÊ∫´Â∫¶")  //"Err: MINTEMP"
+#define MSG_ERR_MAXTEMP_BED                 _UxGT("ÈåØË™§ÔºöÊúÄÈ´òÁÜ±Â∫äÊ∫´Â∫¶")  //"Err: MAXTEMP BED"
+#define MSG_ERR_MINTEMP_BED                 _UxGT("ÈåØË™§ÔºöÊúÄ‰ΩéÁÜ±Â∫äÊ∫´Â∫¶")  //"Err: MINTEMP BED"
+#define MSG_HALTED                          _UxGT("Âç∞Ë°®Ê©üÂÅúÊ©ü")  //"PRINTER HALTED"
+#define MSG_PLEASE_RESET                    _UxGT("Ë´ãÈáçÁΩÆ")  //"Please reset"
+#define MSG_SHORT_DAY                       _UxGT("Â§©")  //"d" // One character only
+#define MSG_SHORT_HOUR                      _UxGT("ÊôÇ")  //"h" // One character only
+#define MSG_SHORT_MINUTE                    _UxGT("ÂàÜ")  //"m" // One character only
+#define MSG_HEATING                         _UxGT("Âä†ÁÜ±‰∏≠ ...")  //"Heating..."
+#define MSG_HEATING_COMPLETE                _UxGT("ÂÆåÊàêÂä†ÁÜ±")  //"Heating done."
+#define MSG_BED_HEATING                     _UxGT("Âä†ÁÜ±ÁÜ±Â∫ä‰∏≠")  //"Bed Heating."
+#define MSG_BED_DONE                        _UxGT("ÂÆåÊàêÂä†ÁÜ±ÁÜ±Â∫ä")  //"Bed done."
+#define MSG_DELTA_CALIBRATE                 _UxGT("‚äøÊ†°Ê∫ñ")  //"Delta Calibration"
+#define MSG_DELTA_CALIBRATE_X               _UxGT("Ê†°Ê∫ñX")  //"Calibrate X"
+#define MSG_DELTA_CALIBRATE_Y               _UxGT("Ê†°Ê∫ñY")  //"Calibrate Y"
+#define MSG_DELTA_CALIBRATE_Z               _UxGT("Ê†°Ê∫ñZ")  //"Calibrate Z"
+#define MSG_DELTA_CALIBRATE_CENTER          _UxGT("Ê†°Ê∫ñ‰∏≠ÂøÉ")  //"Calibrate Center"
+
+#define MSG_INFO_MENU                       _UxGT("ÈóúÊñºÂç∞Ë°®Ê©ü")  //"About Printer"
+#define MSG_INFO_PRINTER_MENU               _UxGT("Âç∞Ë°®Ê©ü‰ø°ÊÅØ")  //"Printer Info"
+#define MSG_INFO_STATS_MENU                 _UxGT("Âç∞Ë°®Ê©üÁµ±Ë®à")  //"Printer Stats"
+#define MSG_INFO_BOARD_MENU                 _UxGT("‰∏ªÊùø‰ø°ÊÅØ")  //"Board Info"
+#define MSG_INFO_THERMISTOR_MENU            _UxGT("Ê∫´Â∫¶Ë®à")  //"Thermistors"
+#define MSG_INFO_EXTRUDERS                  _UxGT("Êì†Âá∫Ê©ü")  //"Extruders"
+#define MSG_INFO_BAUDRATE                   _UxGT("Ê≥¢ÁâπÁéá")  //"Baud"
+#define MSG_INFO_PROTOCOL                   _UxGT("ÂçîË≠∞")  //"Protocol"
+
+#if LCD_WIDTH > 19
+#define MSG_INFO_PRINT_COUNT              _UxGT("ÂàóÂç∞Ë®àÊï∏")  //"Print Count"
+#define MSG_INFO_COMPLETED_PRINTS         _UxGT("ÂÆåÊàê‰∫Ü")  //"Completed"
+#define MSG_INFO_PRINT_TIME               _UxGT("Á∏ΩÂàóÂç∞ÊôÇÈñì")  //"Total print time"
+#define MSG_INFO_PRINT_LONGEST            _UxGT("ÊúÄÈï∑Â∑•‰ΩúÊôÇÈñì")  //"Longest job time"
+#define MSG_INFO_PRINT_FILAMENT           _UxGT("Á∏ΩË®àÊì†Âá∫")  //"Extruded total"
+#else
+#define MSG_INFO_PRINT_COUNT              _UxGT("ÂàóÂç∞Êï∏")  //"Prints"
+#define MSG_INFO_COMPLETED_PRINTS         _UxGT("ÂÆåÊàê")  //"Completed"
+#define MSG_INFO_PRINT_TIME               _UxGT("Á∏ΩÂÖ±")  //"Total"
+#define MSG_INFO_PRINT_LONGEST            _UxGT("ÊúÄÈï∑")  //"Longest"
+#define MSG_INFO_PRINT_FILAMENT           _UxGT("Â∑≤Êì†Âá∫")  //"Extruded"
+#endif
+
+#define MSG_INFO_MIN_TEMP                   _UxGT("ÊúÄ‰ΩéÊ∫´Â∫¶")  //"Min Temp"
+#define MSG_INFO_MAX_TEMP                   _UxGT("ÊúÄÈ´òÊ∫´Â∫¶")  //"Max Temp"
+#define MSG_INFO_PSU                        _UxGT("ÈõªÊ∫ê‰æõÊáâ")  //"Power Supply"
+
+#define MSG_FILAMENT_CHANGE_HEADER          _UxGT("PRINT PAUSED")
+#define MSG_FILAMENT_CHANGE_OPTION_HEADER   _UxGT("RESUME OPTIONS:")
+#define MSG_FILAMENT_CHANGE_OPTION_EXTRUDE  _UxGT("Êì†Âá∫Êõ¥Â§ö")  //"Extrude more"
+#define MSG_FILAMENT_CHANGE_OPTION_RESUME   _UxGT("ÊÅ¢Ë§áÂàóÂç∞")  //"Resume print"
+
+#if LCD_HEIGHT >= 4
+#define MSG_FILAMENT_CHANGE_INIT_1          _UxGT("Á≠âÂæÖÈñãÂßã")  //"Wait for start"
+#define MSG_FILAMENT_CHANGE_INIT_2          _UxGT("Áµ≤Êñô")  //"of the filament"
+#define MSG_FILAMENT_CHANGE_INIT_3          _UxGT("ËÆäÊõ¥")  //"change"
+#define MSG_FILAMENT_CHANGE_UNLOAD_1        _UxGT("Á≠âÂæÖ")  //"Wait for"
+#define MSG_FILAMENT_CHANGE_UNLOAD_2        _UxGT("Âç∏‰∏ãÁµ≤Êñô")  //"filament unload"
+#define MSG_FILAMENT_CHANGE_UNLOAD_3        _UxGT("")  //""
+#define MSG_FILAMENT_CHANGE_INSERT_1        _UxGT("ÊèíÂÖ•Áµ≤Êñô")  //"Insert filament"
+#define MSG_FILAMENT_CHANGE_INSERT_2        _UxGT("‰∏¶ÊåâÈçµ")  //"and press button"
+#define MSG_FILAMENT_CHANGE_INSERT_3        _UxGT("‰æÜÁπºÁ∫å ...")  //"to continue..."
+#define MSG_FILAMENT_CHANGE_LOAD_1          _UxGT("Á≠âÂæÖ")  //"Wait for"
+#define MSG_FILAMENT_CHANGE_LOAD_2          _UxGT("ÈÄ≤Êñô")  //"filament load"
+#define MSG_FILAMENT_CHANGE_LOAD_3          _UxGT("")  //""
+#define MSG_FILAMENT_CHANGE_EXTRUDE_1       _UxGT("Á≠âÂæÖ")  //"Wait for"
+#define MSG_FILAMENT_CHANGE_EXTRUDE_2       _UxGT("Áµ≤ÊñôÊì†Âá∫")  //"filament extrude"
+#define MSG_FILAMENT_CHANGE_EXTRUDE_3       _UxGT("")  //""
+#define MSG_FILAMENT_CHANGE_RESUME_1        _UxGT("Á≠âÂæÖÂàóÂç∞")  //"Wait for print"
+#define MSG_FILAMENT_CHANGE_RESUME_2        _UxGT("ÊÅ¢Ë§á")  //"to resume"
+#define MSG_FILAMENT_CHANGE_RESUME_3        _UxGT("")  //""
+
+#else // LCD_HEIGHT < 4
+#define MSG_FILAMENT_CHANGE_INIT_1          _UxGT("Ë´ãÁ≠âÂæÖ ...")  //"Please wait..."
+#define MSG_FILAMENT_CHANGE_UNLOAD_1        _UxGT("ÈÄÄÂá∫‰∏≠ ...")  //"Ejecting..."
+#define MSG_FILAMENT_CHANGE_INSERT_1        _UxGT("ÊèíÂÖ•‰∏¶ÂñÆÊìä")  //"Insert and Click"
+#define MSG_FILAMENT_CHANGE_LOAD_1          _UxGT("Ë£ùËºâ‰∏≠ ...")  //"Loading..."
+#define MSG_FILAMENT_CHANGE_EXTRUDE_1       _UxGT("Êì†Âá∫‰∏≠ ...")  //"Extruding..."
+#define MSG_FILAMENT_CHANGE_RESUME_1        _UxGT("ÊÅ¢Ë§á‰∏≠ ...")  //"Resuming..."
+#endif // LCD_HEIGHT < 4
+
+#endif // LANGUAGE_ZH_TW_H
