commit 5639237e2b174715413f9ffc6f6421db9150d9d6
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jan 29 20:38:03 2024 -0600

    ðŸŽ¨ Misc. cleanup 29-01

diff --git a/Marlin/src/feature/meatpack.h b/Marlin/src/feature/meatpack.h
index 37039c3056..0de1f792c1 100644
--- a/Marlin/src/feature/meatpack.h
+++ b/Marlin/src/feature/meatpack.h
@@ -144,7 +144,6 @@ struct MeatpackSerial : public SerialBase <MeatpackSerial < SerialT >> {
   void flushTX()                      { CALL_IF_EXISTS(void, &out, flushTX); }
   SerialFeature features(serial_index_t index) const  { return SerialFeature::MeatPack | CALL_IF_EXISTS(SerialFeature, &out, features, index);  }
 
-
   int available(serial_index_t index) {
     if (charCount) return charCount;          // The buffer still has data
     if (out.available(index) <= 0) return 0;  // No data to read

commit 821d77fe4c2ea0260d63e02ae65ab575da840801
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun Jul 16 23:43:50 2023 -0500

    ðŸŽ¨ Misc. comment open

diff --git a/Marlin/src/feature/meatpack.h b/Marlin/src/feature/meatpack.h
index 98a535e592..37039c3056 100644
--- a/Marlin/src/feature/meatpack.h
+++ b/Marlin/src/feature/meatpack.h
@@ -20,7 +20,7 @@
  *
  */
 
-/*
+/**
  * MeatPack G-code Compression
  *
  * Algorithm & Implementation: Scott Mudge - mail@scottmudge.com

commit 58ce5182c2ea93e79ccaef4c912c68aa554e637e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue May 31 12:43:44 2022 -0500

    ðŸŽ¨ Fix spelling, whitespace

diff --git a/Marlin/src/feature/meatpack.h b/Marlin/src/feature/meatpack.h
index a56e65b6cc..98a535e592 100644
--- a/Marlin/src/feature/meatpack.h
+++ b/Marlin/src/feature/meatpack.h
@@ -29,7 +29,7 @@
  * Specifically optimized for 3D printing G-Code, this is a zero-cost data compression method
  * which packs ~180-190% more data into the same amount of bytes going to the CNC controller.
  * As a majority of G-Code can be represented by a restricted alphabet, I performed histogram
- * analysis on a wide variety of 3D printing gcode samples, and found ~93% of all gcode could
+ * analysis on a wide variety of 3D printing G-code samples, and found ~93% of all G-code could
  * be represented by the same 15-character alphabet.
  *
  * This allowed me to design a system of packing 2 8-bit characters into a single byte, assuming
@@ -38,7 +38,7 @@
  *
  * Combined with some logic to allow commingling of full-width characters outside of this 15-
  * character alphabet (at the cost of an extra 8-bits per full-width character), and by stripping
- * out unnecessary comments, the end result is gcode which is roughly half the original size.
+ * out unnecessary comments, the end result is G-code which is roughly half the original size.
  *
  * Why did I do this? I noticed micro-stuttering and other data-bottleneck issues while printing
  * objects with high curvature, especially at high speeds. There is also the issue of the limited

commit 62f992af23b0dd3160db049aa83e541fe164630a
Author: ellensp <ellensp@hotmail.com>
Date:   Sun Apr 11 08:35:45 2021 +1200

    Followup to "no status for serial::write" (#21577)

diff --git a/Marlin/src/feature/meatpack.h b/Marlin/src/feature/meatpack.h
index ce8c7465eb..a56e65b6cc 100644
--- a/Marlin/src/feature/meatpack.h
+++ b/Marlin/src/feature/meatpack.h
@@ -133,7 +133,7 @@ struct MeatpackSerial : public SerialBase <MeatpackSerial < SerialT >> {
   uint8_t charCount;
   uint8_t readIndex;
 
-  NO_INLINE size_t write(uint8_t c)   { return out.write(c); }
+  NO_INLINE void write(uint8_t c)     { out.write(c); }
   void flush()                        { out.flush();  }
   void begin(long br)                 { out.begin(br); readIndex = 0; }
   void end()                          { out.end(); }

commit 139c14948621adcaa227bcef67765a5228039cd3
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Tue Mar 30 04:36:01 2021 +0200

    Flags for MarlinSerial instance features (#21318)

diff --git a/Marlin/src/feature/meatpack.h b/Marlin/src/feature/meatpack.h
index 2c4c4686d8..ce8c7465eb 100644
--- a/Marlin/src/feature/meatpack.h
+++ b/Marlin/src/feature/meatpack.h
@@ -142,6 +142,8 @@ struct MeatpackSerial : public SerialBase <MeatpackSerial < SerialT >> {
   // Existing instances implement Arduino's operator bool, so use that if it's available
   bool connected()                    { return Private::HasMember_connected<SerialT>::value ? CALL_IF_EXISTS(bool, &out, connected) : (bool)out; }
   void flushTX()                      { CALL_IF_EXISTS(void, &out, flushTX); }
+  SerialFeature features(serial_index_t index) const  { return SerialFeature::MeatPack | CALL_IF_EXISTS(SerialFeature, &out, features, index);  }
+
 
   int available(serial_index_t index) {
     if (charCount) return charCount;          // The buffer still has data

commit 3b73b115ca9366f0155986b717d4c85c31ed2f80
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Mar 29 20:36:37 2021 -0500

    Apply pointer formatting

diff --git a/Marlin/src/feature/meatpack.h b/Marlin/src/feature/meatpack.h
index 80f4570e03..2c4c4686d8 100644
--- a/Marlin/src/feature/meatpack.h
+++ b/Marlin/src/feature/meatpack.h
@@ -109,7 +109,7 @@ public:
    * @param out [in] Output pointer for unpacked/processed data.
    * @return Number of characters returned. Range from 0 to 2.
    */
-  uint8_t get_result_char(char* const __restrict out);
+  uint8_t get_result_char(char * const __restrict out);
 
   void reset_state();
   void report_state();

commit f147a8990a68503cd5eb2bb0fc7b26b7c00efe91
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Wed Mar 10 21:22:20 2021 +0100

    Fix MeatPack with per-serial-port instances (#21306)

diff --git a/Marlin/src/feature/meatpack.h b/Marlin/src/feature/meatpack.h
index 96004cfeaf..80f4570e03 100644
--- a/Marlin/src/feature/meatpack.h
+++ b/Marlin/src/feature/meatpack.h
@@ -90,18 +90,18 @@ class MeatPack {
   static const uint8_t kSpaceCharIdx = 11;
   static const char kSpaceCharReplace = 'E';
 
-  static bool cmd_is_next;        // A command is pending
-  static uint8_t state;           // Configuration state
-  static uint8_t second_char;     // Buffers a character if dealing with out-of-sequence pairs
-  static uint8_t cmd_count,       // Counter of command bytes received (need 2)
-                 full_char_count, // Counter for full-width characters to be received
-                 char_out_count;  // Stores number of characters to be read out.
-  static uint8_t char_out_buf[2]; // Output buffer for caching up to 2 characters
+  bool cmd_is_next;        // A command is pending
+  uint8_t state;           // Configuration state
+  uint8_t second_char;     // Buffers a character if dealing with out-of-sequence pairs
+  uint8_t cmd_count,       // Counter of command bytes received (need 2)
+          full_char_count, // Counter for full-width characters to be received
+          char_out_count;  // Stores number of characters to be read out.
+  uint8_t char_out_buf[2]; // Output buffer for caching up to 2 characters
 
 public:
   // Pass in a character rx'd by SD card or serial. Automatically parses command/ctrl sequences,
   // and will control state internally.
-  static void handle_rx_char(const uint8_t c, const serial_index_t serial_ind);
+  void handle_rx_char(const uint8_t c, const serial_index_t serial_ind);
 
   /**
    * After passing in rx'd char using above method, call this to get characters out.
@@ -109,17 +109,17 @@ public:
    * @param out [in] Output pointer for unpacked/processed data.
    * @return Number of characters returned. Range from 0 to 2.
    */
-  static uint8_t get_result_char(char* const __restrict out);
-
-  static void reset_state();
-  static void report_state();
-  static uint8_t unpack_chars(const uint8_t pk, uint8_t* __restrict const chars_out);
-  static void handle_command(const MeatPack_Command c);
-  static void handle_output_char(const uint8_t c);
-  static void handle_rx_char_inner(const uint8_t c);
-};
+  uint8_t get_result_char(char* const __restrict out);
+
+  void reset_state();
+  void report_state();
+  uint8_t unpack_chars(const uint8_t pk, uint8_t* __restrict const chars_out);
+  void handle_command(const MeatPack_Command c);
+  void handle_output_char(const uint8_t c);
+  void handle_rx_char_inner(const uint8_t c);
 
-extern MeatPack meatpack;
+  MeatPack() : cmd_is_next(false), state(0), second_char(0), cmd_count(0), full_char_count(0), char_out_count(0) {}
+};
 
 // Implement the MeatPack serial class so it's transparent to rest of the code
 template <typename SerialT>
@@ -127,6 +127,7 @@ struct MeatpackSerial : public SerialBase <MeatpackSerial < SerialT >> {
   typedef SerialBase< MeatpackSerial<SerialT> > BaseClassT;
 
   SerialT & out;
+  MeatPack meatpack;
 
   char serialBuffer[2];
   uint8_t charCount;
@@ -143,10 +144,6 @@ struct MeatpackSerial : public SerialBase <MeatpackSerial < SerialT >> {
   void flushTX()                      { CALL_IF_EXISTS(void, &out, flushTX); }
 
   int available(serial_index_t index) {
-    // There is a potential issue here with multiserial, since it'll return its decoded buffer whatever the serial index here.
-    // So, instead of doing MeatpackSerial<MultiSerial<...>> we should do MultiSerial<MeatpackSerial<...>, MeatpackSerial<...>>
-    // TODO, let's fix this later on
-
     if (charCount) return charCount;          // The buffer still has data
     if (out.available(index) <= 0) return 0;  // No data to read
 

commit 55c31fbe9a70710c6a209d40b7d0165d081dcdd0
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Tue Mar 9 10:20:37 2021 +0100

    Distinguish serial index from mask (#21287)

diff --git a/Marlin/src/feature/meatpack.h b/Marlin/src/feature/meatpack.h
index e30a5ac979..96004cfeaf 100644
--- a/Marlin/src/feature/meatpack.h
+++ b/Marlin/src/feature/meatpack.h
@@ -132,17 +132,17 @@ struct MeatpackSerial : public SerialBase <MeatpackSerial < SerialT >> {
   uint8_t charCount;
   uint8_t readIndex;
 
-  NO_INLINE size_t write(uint8_t c) { return out.write(c); }
-  void flush()                      { out.flush();  }
-  void begin(long br)               { out.begin(br); readIndex = 0; }
-  void end()                        { out.end(); }
+  NO_INLINE size_t write(uint8_t c)   { return out.write(c); }
+  void flush()                        { out.flush();  }
+  void begin(long br)                 { out.begin(br); readIndex = 0; }
+  void end()                          { out.end(); }
 
-  void msgDone()                    { out.msgDone(); }
+  void msgDone()                      { out.msgDone(); }
   // Existing instances implement Arduino's operator bool, so use that if it's available
-  bool connected()                  { return Private::HasMember_connected<SerialT>::value ? CALL_IF_EXISTS(bool, &out, connected) : (bool)out; }
-  void flushTX()                    { CALL_IF_EXISTS(void, &out, flushTX); }
+  bool connected()                    { return Private::HasMember_connected<SerialT>::value ? CALL_IF_EXISTS(bool, &out, connected) : (bool)out; }
+  void flushTX()                      { CALL_IF_EXISTS(void, &out, flushTX); }
 
-  int available(uint8_t index) {
+  int available(serial_index_t index) {
     // There is a potential issue here with multiserial, since it'll return its decoded buffer whatever the serial index here.
     // So, instead of doing MeatpackSerial<MultiSerial<...>> we should do MultiSerial<MeatpackSerial<...>, MeatpackSerial<...>>
     // TODO, let's fix this later on
@@ -160,7 +160,7 @@ struct MeatpackSerial : public SerialBase <MeatpackSerial < SerialT >> {
     return charCount;
   }
 
-  int readImpl(const uint8_t index) {
+  int readImpl(const serial_index_t index) {
     // Not enough char to make progress?
     if (charCount == 0 && available(index) == 0) return -1;
 
@@ -168,9 +168,9 @@ struct MeatpackSerial : public SerialBase <MeatpackSerial < SerialT >> {
     return serialBuffer[readIndex++];
   }
 
-  int read(uint8_t index) { return readImpl(index); }
-  int available()         { return available(0); }
-  int read()              { return readImpl(0); }
+  int read(serial_index_t index)  { return readImpl(index); }
+  int available()                 { return available(0); }
+  int read()                      { return readImpl(0); }
 
   MeatpackSerial(const bool e, SerialT & out) : BaseClassT(e), out(out) {}
 };

commit ec42be346d5c0d072feb8a1b63ef2fdbd6dc1e98
Author: X-Ryl669 <boite.pour.spam@gmail.com>
Date:   Fri Feb 26 23:54:46 2021 +0100

    Fix and improve G-code queue (#21122)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/meatpack.h b/Marlin/src/feature/meatpack.h
index 2641130bd8..e30a5ac979 100644
--- a/Marlin/src/feature/meatpack.h
+++ b/Marlin/src/feature/meatpack.h
@@ -49,6 +49,7 @@
 #pragma once
 
 #include <stdint.h>
+#include "../core/serial_hook.h"
 
 /**
  * Commands sent to MeatPack to control its behavior.
@@ -78,8 +79,6 @@ enum MeatPack_ConfigStateBits : uint8_t {
 };
 
 class MeatPack {
-private:
-  friend class GCodeQueue;
 
   // Utility definitions
   static const uint8_t kCommandByte         = 0b11111111,
@@ -99,6 +98,7 @@ private:
                  char_out_count;  // Stores number of characters to be read out.
   static uint8_t char_out_buf[2]; // Output buffer for caching up to 2 characters
 
+public:
   // Pass in a character rx'd by SD card or serial. Automatically parses command/ctrl sequences,
   // and will control state internally.
   static void handle_rx_char(const uint8_t c, const serial_index_t serial_ind);
@@ -113,7 +113,6 @@ private:
 
   static void reset_state();
   static void report_state();
-  static uint8_t unpacked_char(register const uint8_t in);
   static uint8_t unpack_chars(const uint8_t pk, uint8_t* __restrict const chars_out);
   static void handle_command(const MeatPack_Command c);
   static void handle_output_char(const uint8_t c);
@@ -121,3 +120,57 @@ private:
 };
 
 extern MeatPack meatpack;
+
+// Implement the MeatPack serial class so it's transparent to rest of the code
+template <typename SerialT>
+struct MeatpackSerial : public SerialBase <MeatpackSerial < SerialT >> {
+  typedef SerialBase< MeatpackSerial<SerialT> > BaseClassT;
+
+  SerialT & out;
+
+  char serialBuffer[2];
+  uint8_t charCount;
+  uint8_t readIndex;
+
+  NO_INLINE size_t write(uint8_t c) { return out.write(c); }
+  void flush()                      { out.flush();  }
+  void begin(long br)               { out.begin(br); readIndex = 0; }
+  void end()                        { out.end(); }
+
+  void msgDone()                    { out.msgDone(); }
+  // Existing instances implement Arduino's operator bool, so use that if it's available
+  bool connected()                  { return Private::HasMember_connected<SerialT>::value ? CALL_IF_EXISTS(bool, &out, connected) : (bool)out; }
+  void flushTX()                    { CALL_IF_EXISTS(void, &out, flushTX); }
+
+  int available(uint8_t index) {
+    // There is a potential issue here with multiserial, since it'll return its decoded buffer whatever the serial index here.
+    // So, instead of doing MeatpackSerial<MultiSerial<...>> we should do MultiSerial<MeatpackSerial<...>, MeatpackSerial<...>>
+    // TODO, let's fix this later on
+
+    if (charCount) return charCount;          // The buffer still has data
+    if (out.available(index) <= 0) return 0;  // No data to read
+
+    // Don't read in read method, instead do it here, so we can make progress in the read method
+    const int r = out.read(index);
+    if (r == -1) return 0;  // This is an error from the underlying serial code
+    meatpack.handle_rx_char((uint8_t)r, index);
+    charCount = meatpack.get_result_char(serialBuffer);
+    readIndex = 0;
+
+    return charCount;
+  }
+
+  int readImpl(const uint8_t index) {
+    // Not enough char to make progress?
+    if (charCount == 0 && available(index) == 0) return -1;
+
+    charCount--;
+    return serialBuffer[readIndex++];
+  }
+
+  int read(uint8_t index) { return readImpl(index); }
+  int available()         { return available(0); }
+  int read()              { return readImpl(0); }
+
+  MeatpackSerial(const bool e, SerialT & out) : BaseClassT(e), out(out) {}
+};

commit c929fb52dd5ed9b265f93e3df4b69ac8ea581735
Author: ellensp <ellensp@hotmail.com>
Date:   Thu Jan 28 20:47:12 2021 +1300

    Meatpack::report_state on serial port init (#20903)
    
    Co-authored-by: Scott Lahteine <github@thinkyhead.com>

diff --git a/Marlin/src/feature/meatpack.h b/Marlin/src/feature/meatpack.h
index b895bcae50..2641130bd8 100644
--- a/Marlin/src/feature/meatpack.h
+++ b/Marlin/src/feature/meatpack.h
@@ -101,7 +101,7 @@ private:
 
   // Pass in a character rx'd by SD card or serial. Automatically parses command/ctrl sequences,
   // and will control state internally.
-  static void handle_rx_char(const uint8_t c);
+  static void handle_rx_char(const uint8_t c, const serial_index_t serial_ind);
 
   /**
    * After passing in rx'd char using above method, call this to get characters out.

commit 11b407045ab47e862eacc32b47fede6c6c58261d
Author: ellensp <ellensp@hotmail.com>
Date:   Thu Jan 28 20:46:17 2021 +1300

    MeatPack followup - unused command (#20893)

diff --git a/Marlin/src/feature/meatpack.h b/Marlin/src/feature/meatpack.h
index b89f87844f..b895bcae50 100644
--- a/Marlin/src/feature/meatpack.h
+++ b/Marlin/src/feature/meatpack.h
@@ -64,7 +64,6 @@
  */
 enum MeatPack_Command : uint8_t {
   MPCommand_None            = 0,
-  MPCommand_TogglePacking   = 0xFD,
   MPCommand_EnablePacking   = 0xFB,
   MPCommand_DisablePacking  = 0xFA,
   MPCommand_ResetAll        = 0xF9,

commit 3921369f98f39280800b1c9944677e9644278106
Author: ellensp <ellensp@hotmail.com>
Date:   Sun Jan 24 19:43:23 2021 +1300

    MeatPack serial encoding (#20802)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/feature/meatpack.h b/Marlin/src/feature/meatpack.h
new file mode 100644
index 0000000000..b89f87844f
--- /dev/null
+++ b/Marlin/src/feature/meatpack.h
@@ -0,0 +1,124 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ */
+
+/*
+ * MeatPack G-code Compression
+ *
+ * Algorithm & Implementation: Scott Mudge - mail@scottmudge.com
+ * Date: Dec. 2020
+ *
+ * Specifically optimized for 3D printing G-Code, this is a zero-cost data compression method
+ * which packs ~180-190% more data into the same amount of bytes going to the CNC controller.
+ * As a majority of G-Code can be represented by a restricted alphabet, I performed histogram
+ * analysis on a wide variety of 3D printing gcode samples, and found ~93% of all gcode could
+ * be represented by the same 15-character alphabet.
+ *
+ * This allowed me to design a system of packing 2 8-bit characters into a single byte, assuming
+ * they fall within this limited 15-character alphabet. Using a 4-bit lookup table, these 8-bit
+ * characters can be represented by a 4-bit index.
+ *
+ * Combined with some logic to allow commingling of full-width characters outside of this 15-
+ * character alphabet (at the cost of an extra 8-bits per full-width character), and by stripping
+ * out unnecessary comments, the end result is gcode which is roughly half the original size.
+ *
+ * Why did I do this? I noticed micro-stuttering and other data-bottleneck issues while printing
+ * objects with high curvature, especially at high speeds. There is also the issue of the limited
+ * baud rate provided by Prusa's Atmega2560-based boards, over the USB serial connection. So soft-
+ * ware like OctoPrint would also suffer this same micro-stuttering and poor print quality issue.
+ *
+ */
+#pragma once
+
+#include <stdint.h>
+
+/**
+ * Commands sent to MeatPack to control its behavior.
+ * They are sent by first sending 2x MeatPack_CommandByte (0xFF) in sequence,
+ *      followed by one of the command bytes below.
+ * Provided that 0xFF is an exceedingly rare character that is virtually never
+ * present in G-code naturally, it is safe to assume 2 in sequence should never
+ * happen naturally, and so it is used as a signal here.
+ *
+ * 0xFF *IS* used in "packed" G-code (used to denote that the next 2 characters are
+ * full-width), however 2 in a row will never occur, as the next 2 bytes will always
+ * some non-0xFF character.
+ */
+enum MeatPack_Command : uint8_t {
+  MPCommand_None            = 0,
+  MPCommand_TogglePacking   = 0xFD,
+  MPCommand_EnablePacking   = 0xFB,
+  MPCommand_DisablePacking  = 0xFA,
+  MPCommand_ResetAll        = 0xF9,
+  MPCommand_QueryConfig     = 0xF8,
+  MPCommand_EnableNoSpaces  = 0xF7,
+  MPCommand_DisableNoSpaces = 0xF6
+};
+
+enum MeatPack_ConfigStateBits : uint8_t {
+  MPConfig_Bit_Active   = 0,
+  MPConfig_Bit_NoSpaces = 1
+};
+
+class MeatPack {
+private:
+  friend class GCodeQueue;
+
+  // Utility definitions
+  static const uint8_t kCommandByte         = 0b11111111,
+                       kFirstNotPacked      = 0b00001111,
+                       kSecondNotPacked     = 0b11110000,
+                       kFirstCharIsLiteral  = 0b00000001,
+                       kSecondCharIsLiteral = 0b00000010;
+
+  static const uint8_t kSpaceCharIdx = 11;
+  static const char kSpaceCharReplace = 'E';
+
+  static bool cmd_is_next;        // A command is pending
+  static uint8_t state;           // Configuration state
+  static uint8_t second_char;     // Buffers a character if dealing with out-of-sequence pairs
+  static uint8_t cmd_count,       // Counter of command bytes received (need 2)
+                 full_char_count, // Counter for full-width characters to be received
+                 char_out_count;  // Stores number of characters to be read out.
+  static uint8_t char_out_buf[2]; // Output buffer for caching up to 2 characters
+
+  // Pass in a character rx'd by SD card or serial. Automatically parses command/ctrl sequences,
+  // and will control state internally.
+  static void handle_rx_char(const uint8_t c);
+
+  /**
+   * After passing in rx'd char using above method, call this to get characters out.
+   * Can return from 0 to 2 characters at once.
+   * @param out [in] Output pointer for unpacked/processed data.
+   * @return Number of characters returned. Range from 0 to 2.
+   */
+  static uint8_t get_result_char(char* const __restrict out);
+
+  static void reset_state();
+  static void report_state();
+  static uint8_t unpacked_char(register const uint8_t in);
+  static uint8_t unpack_chars(const uint8_t pk, uint8_t* __restrict const chars_out);
+  static void handle_command(const MeatPack_Command c);
+  static void handle_output_char(const uint8_t c);
+  static void handle_rx_char_inner(const uint8_t c);
+};
+
+extern MeatPack meatpack;
