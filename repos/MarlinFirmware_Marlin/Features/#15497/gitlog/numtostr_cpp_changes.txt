commit 8cf936ccb144fa8a23712d181ad7c743709eb683
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Tue Dec 5 16:35:12 2023 +1300

    ü©π Fix ftostrX3sign (#26497)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 3efbf68217..6f4e4a480b 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -314,7 +314,7 @@ const char* ftostr51sign(const_float_t f) { return ftostrX1sign(f, 1); }
 // Convert float to string with +/ /- and 3 decimal places
 //
 inline const char* ftostrX3sign(const_float_t f, const int index, char plus/*=' '*/) {
-  long i = INTFLOAT(f, 1);
+  long i = INTFLOAT(f, 3);
   conv[index] = i ? MINUSOR(i, plus) : ' ';
   switch (index + 1) {
     case 1: conv[1] = DIGIMOD(i, 100000);

commit b17d3d3e9c68032d4b7e4ad03a7f65fb9f0fd5d0
Author: ellensp <530024+ellensp@users.noreply.github.com>
Date:   Sat Dec 2 04:25:57 2023 +1300

    üßë‚Äçüíª More num-to-string digits / precisions (#26343)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index e273732635..3efbf68217 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -45,7 +45,7 @@ constexpr long UINTFLOAT(const float V, const int N) {
 
 char conv[9] = { 0 };
 
-// Format uint8_t (0-100) as rj string with 123% / _12% / __1% format
+// Format uint8_t (0-100) as rj string with __3% / _23% / 123% format
 const char* pcttostrpctrj(const uint8_t i) {
   conv[4] = RJDIGIT(i, 100);
   conv[5] = RJDIGIT(i, 10);
@@ -59,7 +59,7 @@ const char* ui8tostr4pctrj(const uint8_t i) {
   return pcttostrpctrj(ui8_to_percent(i));
 }
 
-// Convert unsigned 8bit int to string 123 format
+// Convert unsigned 8bit int to string with __3 / _23 / 123 format
 const char* ui8tostr3rj(const uint8_t i) {
   conv[5] = RJDIGIT(i, 100);
   conv[6] = RJDIGIT(i, 10);
@@ -74,7 +74,7 @@ const char* ui8tostr2(const uint8_t i) {
   return &conv[6];
 }
 
-// Convert signed 8bit int to rj string with 123 or -12 format
+// Convert signed 8bit int to rj string with __3 / _23 / 123 / -_3 / -23 format
 const char* i8tostr3rj(const int8_t x) {
   int xx = x;
   conv[5] = MINUSOR(xx, RJDIGIT(xx, 100));
@@ -105,32 +105,26 @@ const char* i8tostr3rj(const int8_t x) {
   }
 #endif
 
-// Convert unsigned 16bit int to string 12345 format
-const char* ui16tostr5rj(const uint16_t xx) {
-  conv[3] = RJDIGIT(xx, 10000);
-  conv[4] = RJDIGIT(xx, 1000);
-  conv[5] = RJDIGIT(xx, 100);
-  conv[6] = RJDIGIT(xx, 10);
+// Convert unsigned 16bit int to right-justified string
+inline const char* ui16tostrXrj(const uint16_t xx, const int index) {
+  switch (index) {
+    case 0 ... 3: conv[3] = RJDIGIT(xx, 10000);
+    case 4:       conv[4] = RJDIGIT(xx, 1000);
+    case 5:       conv[5] = RJDIGIT(xx, 100);
+    case 6:       conv[6] = RJDIGIT(xx, 10);
+  }
   conv[7] = DIGIMOD(xx, 1);
-  return &conv[3];
+  return &conv[index];
 }
 
-// Convert unsigned 16bit int to string 1234 format
-const char* ui16tostr4rj(const uint16_t xx) {
-  conv[4] = RJDIGIT(xx, 1000);
-  conv[5] = RJDIGIT(xx, 100);
-  conv[6] = RJDIGIT(xx, 10);
-  conv[7] = DIGIMOD(xx, 1);
-  return &conv[4];
-}
+// Convert unsigned 16bit int to string with 12345 format
+const char* ui16tostr5rj(const uint16_t xx) { return ui16tostrXrj(xx, 8 - 5); }
 
-// Convert unsigned 16bit int to string 123 format
-const char* ui16tostr3rj(const uint16_t xx) {
-  conv[5] = RJDIGIT(xx, 100);
-  conv[6] = RJDIGIT(xx, 10);
-  conv[7] = DIGIMOD(xx, 1);
-  return &conv[5];
-}
+// Convert unsigned 16bit int to string with 1234 format
+const char* ui16tostr4rj(const uint16_t xx) { return ui16tostrXrj(xx, 8 - 4); }
+
+// Convert unsigned 16bit int to string with 123 format
+const char* ui16tostr3rj(const uint16_t xx) { return ui16tostrXrj(xx, 8 - 3); }
 
 // Convert signed 16bit int to rj string with 123 or -12 format
 const char* i16tostr3rj(const int16_t x) {
@@ -222,7 +216,7 @@ const char* ftostr41ns(const_float_t f) {
   return &conv[3];
 }
 
-// Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
+// Convert float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
 const char* ftostr42_52(const_float_t f) {
   if (f <= -10 || f >= 100) return ftostr52(f); // -23.45 / 123.45
   long i = INTFLOAT(f, 2);
@@ -234,7 +228,7 @@ const char* ftostr42_52(const_float_t f) {
   return &conv[3];
 }
 
-// Convert signed float to fixed-length string with 023.45 / -23.45 format
+// Convert float to fixed-length string with 023.45 / -23.45 format
 const char* ftostr52(const_float_t f) {
   long i = INTFLOAT(f, 2);
   conv[2] = MINUSOR(i, DIGIMOD(i, 10000));
@@ -246,7 +240,7 @@ const char* ftostr52(const_float_t f) {
   return &conv[2];
 }
 
-// Convert signed float to fixed-length string with 12.345 / _2.345 / -2.345 or -23.45 / 123.45 format
+// Convert float to fixed-length string with 12.345 / _2.345 / -2.345 or -23.45 / 123.45 format
 const char* ftostr53_63(const_float_t f) {
   if (f <= -10 || f >= 100) return ftostr63(f); // -23.456 / 123.456
   long i = INTFLOAT(f, 3);
@@ -259,7 +253,7 @@ const char* ftostr53_63(const_float_t f) {
   return &conv[2];
 }
 
-// Convert signed float to fixed-length string with 023.456 / -23.456 format
+// Convert float to fixed-length string with 023.456 / -23.456 format
 const char* ftostr63(const_float_t f) {
   long i = INTFLOAT(f, 3);
   conv[1] = MINUSOR(i, DIGIMOD(i, 100000));
@@ -289,42 +283,58 @@ const char* ftostr63(const_float_t f) {
 
 #endif
 
-// Convert float to fixed-length string with +12.3 / -12.3 format
-const char* ftostr31sign(const_float_t f) {
-  int i = INTFLOAT(f, 1);
-  conv[3] = MINUSOR(i, '+');
-  conv[4] = DIGIMOD(i, 100);
+//
+// Convert float to fixed-length string with +/- and a single decimal place
+//
+inline const char* ftostrX1sign(const_float_t f, const int index) {
+  long i = INTFLOAT(f, 1);
+  conv[index] = MINUSOR(i, '+');
+  switch (index + 1) {
+    case 1: conv[1] = DIGIMOD(i, 100000);
+    case 2: conv[2] = DIGIMOD(i, 10000);
+    case 3: conv[3] = DIGIMOD(i, 1000);
+    case 4: conv[4] = DIGIMOD(i, 100);
+  }
   conv[5] = DIGIMOD(i, 10);
   conv[6] = '.';
   conv[7] = DIGIMOD(i, 1);
-  return &conv[3];
+  return &conv[index];
 }
 
+// Convert float to fixed-length string with +12.3 / -12.3 format
+const char* ftostr31sign(const_float_t f) { return ftostrX1sign(f, 3); }
+
 // Convert float to fixed-length string with +123.4 / -123.4 format
-const char* ftostr41sign(const_float_t f) {
-  int i = INTFLOAT(f, 1);
-  conv[2] = MINUSOR(i, '+');
-  conv[3] = DIGIMOD(i, 1000);
-  conv[4] = DIGIMOD(i, 100);
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = '.';
-  conv[7] = DIGIMOD(i, 1);
-  return &conv[2];
-}
+const char* ftostr41sign(const_float_t f) { return ftostrX1sign(f, 2); }
 
-// Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
-const char* ftostr43sign(const_float_t f, char plus/*=' '*/) {
-  long i = INTFLOAT(f, 3);
-  conv[2] = i ? MINUSOR(i, plus) : ' ';
+// Convert float to fixed-length string with +1234.5 / +1234.5 format
+const char* ftostr51sign(const_float_t f) { return ftostrX1sign(f, 1); }
+
+//
+// Convert float to string with +/ /- and 3 decimal places
+//
+inline const char* ftostrX3sign(const_float_t f, const int index, char plus/*=' '*/) {
+  long i = INTFLOAT(f, 1);
+  conv[index] = i ? MINUSOR(i, plus) : ' ';
+  switch (index + 1) {
+    case 1: conv[1] = DIGIMOD(i, 100000);
+    case 2: conv[2] = DIGIMOD(i, 10000);
+  }
   conv[3] = DIGIMOD(i, 1000);
   conv[4] = '.';
   conv[5] = DIGIMOD(i, 100);
   conv[6] = DIGIMOD(i, 10);
   conv[7] = DIGIMOD(i, 1);
-  return &conv[2];
+  return &conv[index];
 }
 
-// Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format
+// Convert float to string (6 chars) with -1.234 / _0.000 / +1.234 format
+const char* ftostr43sign(const_float_t f, char plus/*=' '*/) { return ftostrX3sign(f, 2, plus); }
+
+// Convert float to string (7 chars) with -12.345 / _00.000 / +12.345 format
+const char* ftostr53sign(const_float_t f, char plus/*=' '*/) { return ftostrX3sign(f, 1, plus); }
+
+// Convert float to string (7 chars) with -1.2345 / _0.0000 / +1.2345 format
 const char* ftostr54sign(const_float_t f, char plus/*=' '*/) {
   long i = INTFLOAT(f, 4);
   conv[1] = i ? MINUSOR(i, plus) : ' ';
@@ -343,19 +353,6 @@ const char* ftostr5rj(const_float_t f) {
   return ui16tostr5rj(i);
 }
 
-// Convert signed float to string with +1234.5 format
-const char* ftostr51sign(const_float_t f) {
-  long i = INTFLOAT(f, 1);
-  conv[1] = MINUSOR(i, '+');
-  conv[2] = DIGIMOD(i, 10000);
-  conv[3] = DIGIMOD(i, 1000);
-  conv[4] = DIGIMOD(i, 100);
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = '.';
-  conv[7] = DIGIMOD(i, 1);
-  return &conv[1];
-}
-
 // Convert signed float to string with +123.45 format
 const char* ftostr52sign(const_float_t f) {
   long i = INTFLOAT(f, 2);
@@ -369,47 +366,66 @@ const char* ftostr52sign(const_float_t f) {
   return &conv[1];
 }
 
-// Convert signed float to string with +12.345 format
-const char* ftostr53sign(const_float_t f) {
-  long i = INTFLOAT(f, 3);
-  conv[1] = MINUSOR(i, '+');
-  conv[2] = DIGIMOD(i, 10000);
-  conv[3] = DIGIMOD(i, 1000);
-  conv[4] = '.';
-  conv[5] = DIGIMOD(i, 100);
-  conv[6] = DIGIMOD(i, 10);
-  conv[7] = DIGIMOD(i, 1);
-  return &conv[1];
-}
-
-// Convert unsigned float to string with ____5.6, ___45.6, __345.6, _2345.6, 12345.6 format
-const char* ftostr61rj(const_float_t f) {
+// Convert unsigned float to string with a single digit precision
+inline const char* ftostrX1rj(const_float_t f, const int index=1) {
   const long i = UINTFLOAT(f, 1);
-  conv[1] = RJDIGIT(i, 100000);
-  conv[2] = RJDIGIT(i, 10000);
-  conv[3] = RJDIGIT(i, 1000);
-  conv[4] = RJDIGIT(i, 100);
+  switch (index) {
+    case 0: conv[0] = RJDIGIT(i, 1000000);
+    case 1: conv[1] = RJDIGIT(i, 100000);
+    case 2: conv[2] = RJDIGIT(i, 10000);
+    case 3: conv[3] = RJDIGIT(i, 1000);
+    case 4: conv[4] = RJDIGIT(i, 100);
+  }
   conv[5] = DIGIMOD(i, 10);
   conv[6] = '.';
   conv[7] = DIGIMOD(i, 1);
-  return &conv[1];
+  return &conv[index];
 }
 
-// Convert unsigned float to string with ____5.67, ___45.67, __345.67, _2345.67, 12345.67 format
-const char* ftostr72rj(const_float_t f) {
+// Convert unsigned float to string with _2.3 / 12.3 format
+const char* ftostr31rj(const_float_t f) { return ftostrX1rj(f, 7 - 3); }
+
+// Convert unsigned float to string with __3.4 / _23.4 / 123.4 format
+const char* ftostr41rj(const_float_t f) { return ftostrX1rj(f, 7 - 4); }
+
+// Convert unsigned float to string with ___4.5 / __34.5 / _234.5 / 1234.5 format
+const char* ftostr51rj(const_float_t f) { return ftostrX1rj(f, 7 - 5); }
+
+// Convert unsigned float to string with ____5.6 / ___45.6 / __345.6 / _2345.6 / 12345.6 format
+const char* ftostr61rj(const_float_t f) { return ftostrX1rj(f, 7 - 6); }
+
+// Convert unsigned float to string with two digit precision
+inline const char* ftostrX2rj(const_float_t f, const int index=1) {
   const long i = UINTFLOAT(f, 2);
-  conv[0] = RJDIGIT(i, 1000000);
-  conv[1] = RJDIGIT(i, 100000);
-  conv[2] = RJDIGIT(i, 10000);
-  conv[3] = RJDIGIT(i, 1000);
-  conv[4] = DIGIMOD(i, 100);
+  switch (index) {
+    case 0: conv[0] = RJDIGIT(i, 1000000);
+    case 1: conv[1] = RJDIGIT(i, 100000);
+    case 2: conv[2] = RJDIGIT(i, 10000);
+    case 3: conv[3] = RJDIGIT(i, 1000);
+    case 4: conv[4] = RJDIGIT(i, 100);
+  }
   conv[5] = '.';
   conv[6] = DIGIMOD(i, 10);
   conv[7] = DIGIMOD(i, 1);
-  return conv;
+  return &conv[index];
 }
 
-// Convert signed float to space-padded string with -_23.4_ format
+// Convert unsigned float to string with 1.23 format
+const char* ftostr32rj(const_float_t f) { return ftostrX2rj(f, 4); }
+
+// Convert unsigned float to string with _2.34, 12.34 format
+const char* ftostr42rj(const_float_t f) { return ftostrX2rj(f, 3); }
+
+// Convert unsigned float to string with __3.45, _23.45, 123.45 format
+const char* ftostr52rj(const_float_t f) { return ftostrX2rj(f, 2); }
+
+// Convert unsigned float to string with ___4.56, __34.56, _234.56, 1234.56 format
+const char* ftostr62rj(const_float_t f) { return ftostrX2rj(f, 1); }
+
+// Convert unsigned float to string with ____5.67, ___45.67, __345.67, _2345.67, 12345.67 format
+const char* ftostr72rj(const_float_t f) { return ftostrX2rj(f, 0); }
+
+// Convert float to space-padded string with -_23.4_ format
 const char* ftostr52sp(const_float_t f) {
   long i = INTFLOAT(f, 2);
   uint8_t dig;
@@ -418,17 +434,17 @@ const char* ftostr52sp(const_float_t f) {
   conv[3] = RJDIGIT(i, 1000);
   conv[4] = DIGIMOD(i, 100);
 
-  if ((dig = i % 10)) {          // second digit after decimal point?
+  if ((dig = i % 10)) {           // Second digit after decimal point?
     conv[5] = '.';
     conv[6] = DIGIMOD(i, 10);
     conv[7] = DIGIT(dig);
   }
   else {
-    if ((dig = (i / 10) % 10)) { // first digit after decimal point?
+    if ((dig = (i / 10) % 10)) {  // First digit after decimal point?
       conv[5] = '.';
       conv[6] = DIGIT(dig);
     }
-    else                          // nothing after decimal point
+    else                          // Nothing after decimal point
       conv[5] = conv[6] = ' ';
     conv[7] = ' ';
   }
@@ -440,7 +456,7 @@ const char* utostr3(const uint16_t x) {
   return i16tostr3left(_MIN(x, 999U));
 }
 
-// Convert signed float to space-padded string with 1.23, 12.34, 123.45 format
+// Convert float to space-padded string with 1.23, 12.34, 123.45 format
 const char* ftostr52sprj(const_float_t f) {
   long i = INTFLOAT(f, 2);
   LIMIT(i, -99999, 99999);            // cap to -999.99 - 999.99 range

commit ba08dcfb76804a912380603b3f69831ea0d1d6eb
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Jun 3 04:40:07 2023 -0500

    üßë‚Äçüíª Fix narrowing conversions (#25924)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index c34faf68ff..e273732635 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -31,7 +31,7 @@ template <typename T1, typename T2>
 constexpr char DIGIMOD(const T1 n, const T2 f) { return DIGIT((n / f) % 10); }
 
 template <typename T1, typename T2>
-constexpr char RJDIGIT(const T1 n, const T2 f) { return (n >= f ? DIGIMOD(n, f) : ' '); }
+constexpr char RJDIGIT(const T1 n, const T2 f) { return (n >= (T1)f ? DIGIMOD(n, f) : ' '); }
 
 template <typename T>
 constexpr char MINUSOR(T &n, const char alt) { return (n >= 0) ? alt : (n = -n) ? '-' : '-'; }

commit 32be4065efeafe781e007ca6ff47bd5a3fc22184
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Wed May 31 16:47:05 2023 -0500

    üßë‚Äçüíª numtostr use functions

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 2938229a7a..c34faf68ff 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -25,14 +25,25 @@
 #include "../inc/MarlinConfigPre.h"
 #include "../core/utility.h"
 
-char conv[9] = { 0 };
+constexpr char DIGIT(const uint8_t n) { return '0' + n; }
+
+template <typename T1, typename T2>
+constexpr char DIGIMOD(const T1 n, const T2 f) { return DIGIT((n / f) % 10); }
+
+template <typename T1, typename T2>
+constexpr char RJDIGIT(const T1 n, const T2 f) { return (n >= f ? DIGIMOD(n, f) : ' '); }
+
+template <typename T>
+constexpr char MINUSOR(T &n, const char alt) { return (n >= 0) ? alt : (n = -n) ? '-' : '-'; }
 
-#define DIGIT(n) ('0' + (n))
-#define DIGIMOD(n, f) DIGIT(((n)/(f)) % 10)
-#define RJDIGIT(n, f) ((n) >= (f) ? DIGIMOD(n, f) : ' ')
-#define MINUSOR(n, alt) (n >= 0 ? (alt) : (n = -n, '-'))
-#define INTFLOAT(V,N) (((V) * 10 * pow(10, N) + ((V) < 0 ? -5: 5)) / 10)      // pow10?
-#define UINTFLOAT(V,N) INTFLOAT((V) < 0 ? -(V) : (V), N)
+constexpr long INTFLOAT(const float V, const int N) {
+  return long((V * 10.0f * pow(10.0f, N) + (V < 0.0f ? -5.0f : 5.0f)) / 10.0f);
+}
+constexpr long UINTFLOAT(const float V, const int N) {
+  return INTFLOAT(V < 0.0f ? -V : V, N);
+}
+
+char conv[9] = { 0 };
 
 // Format uint8_t (0-100) as rj string with 123% / _12% / __1% format
 const char* pcttostrpctrj(const uint8_t i) {

commit 0021a58943721a81b1ef23fa5e7366cfd80a3d28
Author: Bob Kuhn <bob.kuhn@att.net>
Date:   Sun Mar 26 04:07:25 2023 -0500

    ‚ú® AnyCubic Vyper / Vyper LCD (#25405)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 4cc40a96d1..2938229a7a 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -423,3 +423,34 @@ const char* ftostr52sp(const_float_t f) {
   }
   return &conv[1];
 }
+
+// Convert unsigned 16bit int to string 1, 12, 123 format, capped at 999
+const char* utostr3(const uint16_t x) {
+  return i16tostr3left(_MIN(x, 999U));
+}
+
+// Convert signed float to space-padded string with 1.23, 12.34, 123.45 format
+const char* ftostr52sprj(const_float_t f) {
+  long i = INTFLOAT(f, 2);
+  LIMIT(i, -99999, 99999);            // cap to -999.99 - 999.99 range
+  if (WITHIN(i, -999, 999)) {         // -9.99 - 9.99 range
+    conv[1] = conv[2] = ' ';          // default to ' ' for smaller numbers
+    conv[3] = MINUSOR(i, ' ');
+  }
+  else if (WITHIN(i, -9999, 9999)) {  // -99.99 - 99.99 range
+    conv[1] = ' ';
+    conv[2] = MINUSOR(i, ' ');
+    conv[3] = DIGIMOD(i, 1000);
+  }
+  else {                              // -999.99 - 999.99 range
+    conv[1] = MINUSOR(i, ' ');
+    conv[2] = DIGIMOD(i, 10000);
+    conv[3] = DIGIMOD(i, 1000);
+  }
+  conv[4] = DIGIMOD(i, 100);          // always convert last 3 digits
+  conv[5] = '.';
+  conv[6] = DIGIMOD(i, 10);
+  conv[7] = DIGIMOD(i, 1);
+
+  return &conv[1];
+}

commit ec91d5a1efb56377ed784a48377521332c0a7e3e
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Mar 24 03:01:15 2023 -0500

    üé® Misc. fixes, cleanup
    
    Co-Authored-By: Martin Turski <turningtides@outlook.de>

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index c28d1246d6..4cc40a96d1 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -28,7 +28,7 @@
 char conv[9] = { 0 };
 
 #define DIGIT(n) ('0' + (n))
-#define DIGIMOD(n, f) DIGIT((n)/(f) % 10)
+#define DIGIMOD(n, f) DIGIT(((n)/(f)) % 10)
 #define RJDIGIT(n, f) ((n) >= (f) ? DIGIMOD(n, f) : ' ')
 #define MINUSOR(n, alt) (n >= 0 ? (alt) : (n = -n, '-'))
 #define INTFLOAT(V,N) (((V) * 10 * pow(10, N) + ((V) < 0 ? -5: 5)) / 10)      // pow10?

commit 4f7df32b775bcf7f196f73602df2a8281e60e55b
Author: Giuliano Zaro <3684609+GMagician@users.noreply.github.com>
Date:   Sun Jan 1 04:03:50 2023 +0100

    üö∏ MarlinUI edit steps/mm to 2 decimal places (#25144)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index cd50bffffe..c28d1246d6 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -25,7 +25,7 @@
 #include "../inc/MarlinConfigPre.h"
 #include "../core/utility.h"
 
-char conv[8] = { 0 };
+char conv[9] = { 0 };
 
 #define DIGIT(n) ('0' + (n))
 #define DIGIMOD(n, f) DIGIT((n)/(f) % 10)
@@ -36,11 +36,11 @@ char conv[8] = { 0 };
 
 // Format uint8_t (0-100) as rj string with 123% / _12% / __1% format
 const char* pcttostrpctrj(const uint8_t i) {
-  conv[3] = RJDIGIT(i, 100);
-  conv[4] = RJDIGIT(i, 10);
-  conv[5] = DIGIMOD(i, 1);
-  conv[6] = '%';
-  return &conv[3];
+  conv[4] = RJDIGIT(i, 100);
+  conv[5] = RJDIGIT(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  conv[7] = '%';
+  return &conv[4];
 }
 
 // Convert uint8_t (0-255) to a percentage, format as above
@@ -50,26 +50,26 @@ const char* ui8tostr4pctrj(const uint8_t i) {
 
 // Convert unsigned 8bit int to string 123 format
 const char* ui8tostr3rj(const uint8_t i) {
-  conv[4] = RJDIGIT(i, 100);
-  conv[5] = RJDIGIT(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[4];
+  conv[5] = RJDIGIT(i, 100);
+  conv[6] = RJDIGIT(i, 10);
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[5];
 }
 
 // Convert uint8_t to string with 12 format
 const char* ui8tostr2(const uint8_t i) {
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[5];
+  conv[6] = DIGIMOD(i, 10);
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[6];
 }
 
 // Convert signed 8bit int to rj string with 123 or -12 format
 const char* i8tostr3rj(const int8_t x) {
   int xx = x;
-  conv[4] = MINUSOR(xx, RJDIGIT(xx, 100));
-  conv[5] = RJDIGIT(xx, 10);
-  conv[6] = DIGIMOD(xx, 1);
-  return &conv[4];
+  conv[5] = MINUSOR(xx, RJDIGIT(xx, 100));
+  conv[6] = RJDIGIT(xx, 10);
+  conv[7] = DIGIMOD(xx, 1);
+  return &conv[5];
 }
 
 #if HAS_PRINT_PROGRESS_PERMYRIAD
@@ -78,61 +78,61 @@ const char* i8tostr3rj(const int8_t x) {
     if (xx >= 10000)
       return " 100"; // space to keep 4-width alignment
     else if (xx >= 1000) {
-      conv[3] = DIGIMOD(xx, 1000);
+      conv[4] = DIGIMOD(xx, 1000);
+      conv[5] = DIGIMOD(xx, 100);
+      conv[6] = '.';
+      conv[7] = DIGIMOD(xx, 10);
+      return &conv[4];
+    }
+    else {
       conv[4] = DIGIMOD(xx, 100);
       conv[5] = '.';
       conv[6] = DIGIMOD(xx, 10);
-      return &conv[3];
-    }
-    else {
-      conv[3] = DIGIMOD(xx, 100);
-      conv[4] = '.';
-      conv[5] = DIGIMOD(xx, 10);
-      conv[6] = RJDIGIT(xx, 1);
-      return &conv[3];
+      conv[7] = RJDIGIT(xx, 1);
+      return &conv[4];
     }
   }
 #endif
 
 // Convert unsigned 16bit int to string 12345 format
 const char* ui16tostr5rj(const uint16_t xx) {
-  conv[2] = RJDIGIT(xx, 10000);
-  conv[3] = RJDIGIT(xx, 1000);
-  conv[4] = RJDIGIT(xx, 100);
-  conv[5] = RJDIGIT(xx, 10);
-  conv[6] = DIGIMOD(xx, 1);
-  return &conv[2];
+  conv[3] = RJDIGIT(xx, 10000);
+  conv[4] = RJDIGIT(xx, 1000);
+  conv[5] = RJDIGIT(xx, 100);
+  conv[6] = RJDIGIT(xx, 10);
+  conv[7] = DIGIMOD(xx, 1);
+  return &conv[3];
 }
 
 // Convert unsigned 16bit int to string 1234 format
 const char* ui16tostr4rj(const uint16_t xx) {
-  conv[3] = RJDIGIT(xx, 1000);
-  conv[4] = RJDIGIT(xx, 100);
-  conv[5] = RJDIGIT(xx, 10);
-  conv[6] = DIGIMOD(xx, 1);
-  return &conv[3];
+  conv[4] = RJDIGIT(xx, 1000);
+  conv[5] = RJDIGIT(xx, 100);
+  conv[6] = RJDIGIT(xx, 10);
+  conv[7] = DIGIMOD(xx, 1);
+  return &conv[4];
 }
 
 // Convert unsigned 16bit int to string 123 format
 const char* ui16tostr3rj(const uint16_t xx) {
-  conv[4] = RJDIGIT(xx, 100);
-  conv[5] = RJDIGIT(xx, 10);
-  conv[6] = DIGIMOD(xx, 1);
-  return &conv[4];
+  conv[5] = RJDIGIT(xx, 100);
+  conv[6] = RJDIGIT(xx, 10);
+  conv[7] = DIGIMOD(xx, 1);
+  return &conv[5];
 }
 
 // Convert signed 16bit int to rj string with 123 or -12 format
 const char* i16tostr3rj(const int16_t x) {
   int xx = x;
-  conv[4] = MINUSOR(xx, RJDIGIT(xx, 100));
-  conv[5] = RJDIGIT(xx, 10);
-  conv[6] = DIGIMOD(xx, 1);
-  return &conv[4];
+  conv[5] = MINUSOR(xx, RJDIGIT(xx, 100));
+  conv[6] = RJDIGIT(xx, 10);
+  conv[7] = DIGIMOD(xx, 1);
+  return &conv[5];
 }
 
 // Convert unsigned 16bit int to lj string with 123 format
 const char* i16tostr3left(const int16_t i) {
-  char *str = &conv[6];
+  char *str = &conv[7];
   *str = DIGIMOD(i, 1);
   if (i >= 10) {
     *(--str) = DIGIMOD(i, 10);
@@ -147,118 +147,118 @@ const char* i16tostr4signrj(const int16_t i) {
   const bool neg = i < 0;
   const int ii = neg ? -i : i;
   if (i >= 1000) {
-    conv[3] = DIGIMOD(ii, 1000);
-    conv[4] = DIGIMOD(ii, 100);
-    conv[5] = DIGIMOD(ii, 10);
+    conv[4] = DIGIMOD(ii, 1000);
+    conv[5] = DIGIMOD(ii, 100);
+    conv[6] = DIGIMOD(ii, 10);
   }
   else if (ii >= 100) {
-    conv[3] = neg ? '-' : ' ';
-    conv[4] = DIGIMOD(ii, 100);
-    conv[5] = DIGIMOD(ii, 10);
+    conv[4] = neg ? '-' : ' ';
+    conv[5] = DIGIMOD(ii, 100);
+    conv[6] = DIGIMOD(ii, 10);
   }
   else {
-    conv[3] = ' ';
     conv[4] = ' ';
+    conv[5] = ' ';
     if (ii >= 10) {
-      conv[4] = neg ? '-' : ' ';
-      conv[5] = DIGIMOD(ii, 10);
+      conv[5] = neg ? '-' : ' ';
+      conv[6] = DIGIMOD(ii, 10);
     }
     else {
-      conv[5] = neg ? '-' : ' ';
+      conv[6] = neg ? '-' : ' ';
     }
   }
-  conv[6] = DIGIMOD(ii, 1);
-  return &conv[3];
+  conv[7] = DIGIMOD(ii, 1);
+  return &conv[4];
 }
 
 // Convert unsigned float to string with 1.1 format
 const char* ftostr11ns(const_float_t f) {
   const long i = UINTFLOAT(f, 1);
-  conv[4] = DIGIMOD(i, 10);
-  conv[5] = '.';
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[4];
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = '.';
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[5];
 }
 
 // Convert unsigned float to string with 1.23 format
 const char* ftostr12ns(const_float_t f) {
   const long i = UINTFLOAT(f, 2);
-  conv[3] = DIGIMOD(i, 100);
-  conv[4] = '.';
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[3];
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = '.';
+  conv[6] = DIGIMOD(i, 10);
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[4];
 }
 
 // Convert unsigned float to string with 12.3 format
 const char* ftostr31ns(const_float_t f) {
   const long i = UINTFLOAT(f, 1);
-  conv[3] = DIGIMOD(i, 100);
-  conv[4] = DIGIMOD(i, 10);
-  conv[5] = '.';
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[3];
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = '.';
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[4];
 }
 
 // Convert unsigned float to string with 123.4 format
 const char* ftostr41ns(const_float_t f) {
   const long i = UINTFLOAT(f, 1);
-  conv[2] = DIGIMOD(i, 1000);
-  conv[3] = DIGIMOD(i, 100);
-  conv[4] = DIGIMOD(i, 10);
-  conv[5] = '.';
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[2];
+  conv[3] = DIGIMOD(i, 1000);
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = '.';
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[3];
 }
 
 // Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
 const char* ftostr42_52(const_float_t f) {
   if (f <= -10 || f >= 100) return ftostr52(f); // -23.45 / 123.45
   long i = INTFLOAT(f, 2);
-  conv[2] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 1000));
-  conv[3] = DIGIMOD(i, 100);
-  conv[4] = '.';
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[2];
+  conv[3] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 1000));
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = '.';
+  conv[6] = DIGIMOD(i, 10);
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[3];
 }
 
 // Convert signed float to fixed-length string with 023.45 / -23.45 format
 const char* ftostr52(const_float_t f) {
   long i = INTFLOAT(f, 2);
-  conv[1] = MINUSOR(i, DIGIMOD(i, 10000));
-  conv[2] = DIGIMOD(i, 1000);
-  conv[3] = DIGIMOD(i, 100);
-  conv[4] = '.';
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[1];
+  conv[2] = MINUSOR(i, DIGIMOD(i, 10000));
+  conv[3] = DIGIMOD(i, 1000);
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = '.';
+  conv[6] = DIGIMOD(i, 10);
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[2];
 }
 
 // Convert signed float to fixed-length string with 12.345 / _2.345 / -2.345 or -23.45 / 123.45 format
 const char* ftostr53_63(const_float_t f) {
   if (f <= -10 || f >= 100) return ftostr63(f); // -23.456 / 123.456
   long i = INTFLOAT(f, 3);
-  conv[1] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 10000));
-  conv[2] = DIGIMOD(i, 1000);
-  conv[3] = '.';
-  conv[4] = DIGIMOD(i, 100);
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[1];
+  conv[2] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 10000));
+  conv[3] = DIGIMOD(i, 1000);
+  conv[4] = '.';
+  conv[5] = DIGIMOD(i, 100);
+  conv[6] = DIGIMOD(i, 10);
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[2];
 }
 
 // Convert signed float to fixed-length string with 023.456 / -23.456 format
 const char* ftostr63(const_float_t f) {
   long i = INTFLOAT(f, 3);
-  conv[0] = MINUSOR(i, DIGIMOD(i, 100000));
-  conv[1] = DIGIMOD(i, 10000);
-  conv[2] = DIGIMOD(i, 1000);
-  conv[3] = '.';
-  conv[4] = DIGIMOD(i, 100);
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[0];
+  conv[1] = MINUSOR(i, DIGIMOD(i, 100000));
+  conv[2] = DIGIMOD(i, 10000);
+  conv[3] = DIGIMOD(i, 1000);
+  conv[4] = '.';
+  conv[5] = DIGIMOD(i, 100);
+  conv[6] = DIGIMOD(i, 10);
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[1];
 }
 
 #if ENABLED(LCD_DECIMAL_SMALL_XY)
@@ -269,11 +269,11 @@ const char* ftostr63(const_float_t f) {
     if (!WITHIN(i, -99, 999)) return i16tostr4signrj((int)f);
     const bool neg = i < 0;
     const int ii = neg ? -i : i;
-    conv[3] = neg ? '-' : (ii >= 100 ? DIGIMOD(ii, 100) : ' ');
-    conv[4] = DIGIMOD(ii, 10);
-    conv[5] = '.';
-    conv[6] = DIGIMOD(ii, 1);
-    return &conv[3];
+    conv[4] = neg ? '-' : (ii >= 100 ? DIGIMOD(ii, 100) : ' ');
+    conv[5] = DIGIMOD(ii, 10);
+    conv[6] = '.';
+    conv[7] = DIGIMOD(ii, 1);
+    return &conv[4];
   }
 
 #endif
@@ -281,49 +281,49 @@ const char* ftostr63(const_float_t f) {
 // Convert float to fixed-length string with +12.3 / -12.3 format
 const char* ftostr31sign(const_float_t f) {
   int i = INTFLOAT(f, 1);
-  conv[2] = MINUSOR(i, '+');
-  conv[3] = DIGIMOD(i, 100);
-  conv[4] = DIGIMOD(i, 10);
-  conv[5] = '.';
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[2];
+  conv[3] = MINUSOR(i, '+');
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = '.';
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[3];
 }
 
 // Convert float to fixed-length string with +123.4 / -123.4 format
 const char* ftostr41sign(const_float_t f) {
   int i = INTFLOAT(f, 1);
-  conv[1] = MINUSOR(i, '+');
-  conv[2] = DIGIMOD(i, 1000);
-  conv[3] = DIGIMOD(i, 100);
-  conv[4] = DIGIMOD(i, 10);
-  conv[5] = '.';
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[1];
+  conv[2] = MINUSOR(i, '+');
+  conv[3] = DIGIMOD(i, 1000);
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = '.';
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[2];
 }
 
 // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
 const char* ftostr43sign(const_float_t f, char plus/*=' '*/) {
   long i = INTFLOAT(f, 3);
-  conv[1] = i ? MINUSOR(i, plus) : ' ';
-  conv[2] = DIGIMOD(i, 1000);
-  conv[3] = '.';
-  conv[4] = DIGIMOD(i, 100);
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[1];
+  conv[2] = i ? MINUSOR(i, plus) : ' ';
+  conv[3] = DIGIMOD(i, 1000);
+  conv[4] = '.';
+  conv[5] = DIGIMOD(i, 100);
+  conv[6] = DIGIMOD(i, 10);
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[2];
 }
 
 // Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format
 const char* ftostr54sign(const_float_t f, char plus/*=' '*/) {
   long i = INTFLOAT(f, 4);
-  conv[0] = i ? MINUSOR(i, plus) : ' ';
-  conv[1] = DIGIMOD(i, 10000);
-  conv[2] = '.';
-  conv[3] = DIGIMOD(i, 1000);
-  conv[4] = DIGIMOD(i, 100);
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[0];
+  conv[1] = i ? MINUSOR(i, plus) : ' ';
+  conv[2] = DIGIMOD(i, 10000);
+  conv[3] = '.';
+  conv[4] = DIGIMOD(i, 1000);
+  conv[5] = DIGIMOD(i, 100);
+  conv[6] = DIGIMOD(i, 10);
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[1];
 }
 
 // Convert unsigned float to rj string with 12345 format
@@ -335,52 +335,66 @@ const char* ftostr5rj(const_float_t f) {
 // Convert signed float to string with +1234.5 format
 const char* ftostr51sign(const_float_t f) {
   long i = INTFLOAT(f, 1);
-  conv[0] = MINUSOR(i, '+');
-  conv[1] = DIGIMOD(i, 10000);
-  conv[2] = DIGIMOD(i, 1000);
-  conv[3] = DIGIMOD(i, 100);
-  conv[4] = DIGIMOD(i, 10);
-  conv[5] = '.';
-  conv[6] = DIGIMOD(i, 1);
-  return conv;
+  conv[1] = MINUSOR(i, '+');
+  conv[2] = DIGIMOD(i, 10000);
+  conv[3] = DIGIMOD(i, 1000);
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = '.';
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[1];
 }
 
 // Convert signed float to string with +123.45 format
 const char* ftostr52sign(const_float_t f) {
   long i = INTFLOAT(f, 2);
-  conv[0] = MINUSOR(i, '+');
-  conv[1] = DIGIMOD(i, 10000);
-  conv[2] = DIGIMOD(i, 1000);
-  conv[3] = DIGIMOD(i, 100);
-  conv[4] = '.';
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return conv;
+  conv[1] = MINUSOR(i, '+');
+  conv[2] = DIGIMOD(i, 10000);
+  conv[3] = DIGIMOD(i, 1000);
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = '.';
+  conv[6] = DIGIMOD(i, 10);
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[1];
 }
 
 // Convert signed float to string with +12.345 format
 const char* ftostr53sign(const_float_t f) {
   long i = INTFLOAT(f, 3);
-  conv[0] = MINUSOR(i, '+');
-  conv[1] = DIGIMOD(i, 10000);
-  conv[2] = DIGIMOD(i, 1000);
-  conv[3] = '.';
-  conv[4] = DIGIMOD(i, 100);
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return conv;
+  conv[1] = MINUSOR(i, '+');
+  conv[2] = DIGIMOD(i, 10000);
+  conv[3] = DIGIMOD(i, 1000);
+  conv[4] = '.';
+  conv[5] = DIGIMOD(i, 100);
+  conv[6] = DIGIMOD(i, 10);
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[1];
 }
 
 // Convert unsigned float to string with ____5.6, ___45.6, __345.6, _2345.6, 12345.6 format
 const char* ftostr61rj(const_float_t f) {
   const long i = UINTFLOAT(f, 1);
-  conv[0] = RJDIGIT(i, 100000);
-  conv[1] = RJDIGIT(i, 10000);
-  conv[2] = RJDIGIT(i, 1000);
-  conv[3] = RJDIGIT(i, 100);
-  conv[4] = DIGIMOD(i, 10);
+  conv[1] = RJDIGIT(i, 100000);
+  conv[2] = RJDIGIT(i, 10000);
+  conv[3] = RJDIGIT(i, 1000);
+  conv[4] = RJDIGIT(i, 100);
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = '.';
+  conv[7] = DIGIMOD(i, 1);
+  return &conv[1];
+}
+
+// Convert unsigned float to string with ____5.67, ___45.67, __345.67, _2345.67, 12345.67 format
+const char* ftostr72rj(const_float_t f) {
+  const long i = UINTFLOAT(f, 2);
+  conv[0] = RJDIGIT(i, 1000000);
+  conv[1] = RJDIGIT(i, 100000);
+  conv[2] = RJDIGIT(i, 10000);
+  conv[3] = RJDIGIT(i, 1000);
+  conv[4] = DIGIMOD(i, 100);
   conv[5] = '.';
-  conv[6] = DIGIMOD(i, 1);
+  conv[6] = DIGIMOD(i, 10);
+  conv[7] = DIGIMOD(i, 1);
   return conv;
 }
 
@@ -388,24 +402,24 @@ const char* ftostr61rj(const_float_t f) {
 const char* ftostr52sp(const_float_t f) {
   long i = INTFLOAT(f, 2);
   uint8_t dig;
-  conv[0] = MINUSOR(i, ' ');
-  conv[1] = RJDIGIT(i, 10000);
-  conv[2] = RJDIGIT(i, 1000);
-  conv[3] = DIGIMOD(i, 100);
+  conv[1] = MINUSOR(i, ' ');
+  conv[2] = RJDIGIT(i, 10000);
+  conv[3] = RJDIGIT(i, 1000);
+  conv[4] = DIGIMOD(i, 100);
 
   if ((dig = i % 10)) {          // second digit after decimal point?
-    conv[4] = '.';
-    conv[5] = DIGIMOD(i, 10);
-    conv[6] = DIGIT(dig);
+    conv[5] = '.';
+    conv[6] = DIGIMOD(i, 10);
+    conv[7] = DIGIT(dig);
   }
   else {
     if ((dig = (i / 10) % 10)) { // first digit after decimal point?
-      conv[4] = '.';
-      conv[5] = DIGIT(dig);
+      conv[5] = '.';
+      conv[6] = DIGIT(dig);
     }
     else                          // nothing after decimal point
-      conv[4] = conv[5] = ' ';
-    conv[6] = ' ';
+      conv[5] = conv[6] = ' ';
+    conv[7] = ' ';
   }
-  return conv;
+  return &conv[1];
 }

commit b169d623e3284846bcda9829b12f20ce90e3762c
Author: EvilGremlin <22657714+EvilGremlin@users.noreply.github.com>
Date:   Thu Dec 8 01:08:53 2022 +0300

    üö∏ Progress display followup (#24879)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 594255aea8..cd50bffffe 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -84,12 +84,6 @@ const char* i8tostr3rj(const int8_t x) {
       conv[6] = DIGIMOD(xx, 10);
       return &conv[3];
     }
-    else if (xx % 100 == 0) {
-      conv[4] = ' ';
-      conv[5] = RJDIGIT(xx, 1000);
-      conv[6] = DIGIMOD(xx, 100);
-      return &conv[4];
-    }
     else {
       conv[3] = DIGIMOD(xx, 100);
       conv[4] = '.';

commit f595e40ceb0c79d7f0d6438636658dfcfa2a75b8
Author: EvilGremlin <22657714+EvilGremlin@users.noreply.github.com>
Date:   Sun Oct 9 18:30:47 2022 +0300

    ‚ôªÔ∏è Set Progress without LCD (#24767)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index f4d47983d2..594255aea8 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -73,10 +73,10 @@ const char* i8tostr3rj(const int8_t x) {
 }
 
 #if HAS_PRINT_PROGRESS_PERMYRIAD
-  // Convert unsigned 16-bit permyriad to percent with 100 / 23 / 23.4 / 3.45 format
+  // Convert unsigned 16-bit permyriad to percent with 100 / 23.4 / 3.45 format
   const char* permyriadtostr4(const uint16_t xx) {
     if (xx >= 10000)
-      return "100";
+      return " 100"; // space to keep 4-width alignment
     else if (xx >= 1000) {
       conv[3] = DIGIMOD(xx, 1000);
       conv[4] = DIGIMOD(xx, 100);

commit 755c196cfa92fa1b9e139d39e83e490305822212
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Fri Mar 4 15:18:27 2022 -0600

    üö∏ 12345.6 num-to-string

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 1e1ac05710..f4d47983d2 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -377,10 +377,10 @@ const char* ftostr53sign(const_float_t f) {
   return conv;
 }
 
-// Convert unsigned float to string with ____4.5, __34.5, _234.5, 1234.5 format
-const char* ftostr51rj(const_float_t f) {
+// Convert unsigned float to string with ____5.6, ___45.6, __345.6, _2345.6, 12345.6 format
+const char* ftostr61rj(const_float_t f) {
   const long i = UINTFLOAT(f, 1);
-  conv[0] = ' ';
+  conv[0] = RJDIGIT(i, 100000);
   conv[1] = RJDIGIT(i, 10000);
   conv[2] = RJDIGIT(i, 1000);
   conv[3] = RJDIGIT(i, 100);

commit d320545066676338d4a0142268931bb66eedfccc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jun 8 07:51:28 2021 -0500

    üé® Laser Ammeter followup (#22079)
    
    Followup to #21835

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index a1e320844a..1e1ac05710 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -217,15 +217,6 @@ const char* ftostr41ns(const_float_t f) {
   return &conv[2];
 }
 
-// Convert unsigned float to string with 123 format
-const char* ftostr3ns(const_float_t f) {
-  const long i = UINTFLOAT(f, 3);
-  conv[4] = DIGIMOD(i, 100);
-  conv[5] = DIGIMOD(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[4];
-}
-
 // Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
 const char* ftostr42_52(const_float_t f) {
   if (f <= -10 || f >= 100) return ftostr52(f); // -23.45 / 123.45

commit 002e1d49fe7e39ca82730876f0a384bb60ce4190
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Mon Jun 7 14:15:09 2021 -0500

    Add Laser Based I2C Ammeter Feature (#21835)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 1e1ac05710..a1e320844a 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -217,6 +217,15 @@ const char* ftostr41ns(const_float_t f) {
   return &conv[2];
 }
 
+// Convert unsigned float to string with 123 format
+const char* ftostr3ns(const_float_t f) {
+  const long i = UINTFLOAT(f, 3);
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[4];
+}
+
 // Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
 const char* ftostr42_52(const_float_t f) {
   if (f <= -10 || f >= 100) return ftostr52(f); // -23.45 / 123.45

commit 62f37669dc506a6e579389ca549ce5993548944d
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Apr 1 17:59:57 2021 -0500

    Replace 'const float &' with 'const_float_t' (#21505)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 283734faab..1e1ac05710 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -178,7 +178,7 @@ const char* i16tostr4signrj(const int16_t i) {
 }
 
 // Convert unsigned float to string with 1.1 format
-const char* ftostr11ns(const float &f) {
+const char* ftostr11ns(const_float_t f) {
   const long i = UINTFLOAT(f, 1);
   conv[4] = DIGIMOD(i, 10);
   conv[5] = '.';
@@ -187,7 +187,7 @@ const char* ftostr11ns(const float &f) {
 }
 
 // Convert unsigned float to string with 1.23 format
-const char* ftostr12ns(const float &f) {
+const char* ftostr12ns(const_float_t f) {
   const long i = UINTFLOAT(f, 2);
   conv[3] = DIGIMOD(i, 100);
   conv[4] = '.';
@@ -197,7 +197,7 @@ const char* ftostr12ns(const float &f) {
 }
 
 // Convert unsigned float to string with 12.3 format
-const char* ftostr31ns(const float &f) {
+const char* ftostr31ns(const_float_t f) {
   const long i = UINTFLOAT(f, 1);
   conv[3] = DIGIMOD(i, 100);
   conv[4] = DIGIMOD(i, 10);
@@ -207,7 +207,7 @@ const char* ftostr31ns(const float &f) {
 }
 
 // Convert unsigned float to string with 123.4 format
-const char* ftostr41ns(const float &f) {
+const char* ftostr41ns(const_float_t f) {
   const long i = UINTFLOAT(f, 1);
   conv[2] = DIGIMOD(i, 1000);
   conv[3] = DIGIMOD(i, 100);
@@ -218,7 +218,7 @@ const char* ftostr41ns(const float &f) {
 }
 
 // Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
-const char* ftostr42_52(const float &f) {
+const char* ftostr42_52(const_float_t f) {
   if (f <= -10 || f >= 100) return ftostr52(f); // -23.45 / 123.45
   long i = INTFLOAT(f, 2);
   conv[2] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 1000));
@@ -230,7 +230,7 @@ const char* ftostr42_52(const float &f) {
 }
 
 // Convert signed float to fixed-length string with 023.45 / -23.45 format
-const char* ftostr52(const float &f) {
+const char* ftostr52(const_float_t f) {
   long i = INTFLOAT(f, 2);
   conv[1] = MINUSOR(i, DIGIMOD(i, 10000));
   conv[2] = DIGIMOD(i, 1000);
@@ -242,7 +242,7 @@ const char* ftostr52(const float &f) {
 }
 
 // Convert signed float to fixed-length string with 12.345 / _2.345 / -2.345 or -23.45 / 123.45 format
-const char* ftostr53_63(const float &f) {
+const char* ftostr53_63(const_float_t f) {
   if (f <= -10 || f >= 100) return ftostr63(f); // -23.456 / 123.456
   long i = INTFLOAT(f, 3);
   conv[1] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 10000));
@@ -255,7 +255,7 @@ const char* ftostr53_63(const float &f) {
 }
 
 // Convert signed float to fixed-length string with 023.456 / -23.456 format
-const char* ftostr63(const float &f) {
+const char* ftostr63(const_float_t f) {
   long i = INTFLOAT(f, 3);
   conv[0] = MINUSOR(i, DIGIMOD(i, 100000));
   conv[1] = DIGIMOD(i, 10000);
@@ -270,7 +270,7 @@ const char* ftostr63(const float &f) {
 #if ENABLED(LCD_DECIMAL_SMALL_XY)
 
   // Convert float to rj string with 1234, _123, -123, _-12, 12.3, _1.2, or -1.2 format
-  const char* ftostr4sign(const float &f) {
+  const char* ftostr4sign(const_float_t f) {
     const int i = INTFLOAT(f, 1);
     if (!WITHIN(i, -99, 999)) return i16tostr4signrj((int)f);
     const bool neg = i < 0;
@@ -285,7 +285,7 @@ const char* ftostr63(const float &f) {
 #endif
 
 // Convert float to fixed-length string with +12.3 / -12.3 format
-const char* ftostr31sign(const float &f) {
+const char* ftostr31sign(const_float_t f) {
   int i = INTFLOAT(f, 1);
   conv[2] = MINUSOR(i, '+');
   conv[3] = DIGIMOD(i, 100);
@@ -296,7 +296,7 @@ const char* ftostr31sign(const float &f) {
 }
 
 // Convert float to fixed-length string with +123.4 / -123.4 format
-const char* ftostr41sign(const float &f) {
+const char* ftostr41sign(const_float_t f) {
   int i = INTFLOAT(f, 1);
   conv[1] = MINUSOR(i, '+');
   conv[2] = DIGIMOD(i, 1000);
@@ -308,7 +308,7 @@ const char* ftostr41sign(const float &f) {
 }
 
 // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
-const char* ftostr43sign(const float &f, char plus/*=' '*/) {
+const char* ftostr43sign(const_float_t f, char plus/*=' '*/) {
   long i = INTFLOAT(f, 3);
   conv[1] = i ? MINUSOR(i, plus) : ' ';
   conv[2] = DIGIMOD(i, 1000);
@@ -320,7 +320,7 @@ const char* ftostr43sign(const float &f, char plus/*=' '*/) {
 }
 
 // Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format
-const char* ftostr54sign(const float &f, char plus/*=' '*/) {
+const char* ftostr54sign(const_float_t f, char plus/*=' '*/) {
   long i = INTFLOAT(f, 4);
   conv[0] = i ? MINUSOR(i, plus) : ' ';
   conv[1] = DIGIMOD(i, 10000);
@@ -333,13 +333,13 @@ const char* ftostr54sign(const float &f, char plus/*=' '*/) {
 }
 
 // Convert unsigned float to rj string with 12345 format
-const char* ftostr5rj(const float &f) {
+const char* ftostr5rj(const_float_t f) {
   const long i = UINTFLOAT(f, 0);
   return ui16tostr5rj(i);
 }
 
 // Convert signed float to string with +1234.5 format
-const char* ftostr51sign(const float &f) {
+const char* ftostr51sign(const_float_t f) {
   long i = INTFLOAT(f, 1);
   conv[0] = MINUSOR(i, '+');
   conv[1] = DIGIMOD(i, 10000);
@@ -352,7 +352,7 @@ const char* ftostr51sign(const float &f) {
 }
 
 // Convert signed float to string with +123.45 format
-const char* ftostr52sign(const float &f) {
+const char* ftostr52sign(const_float_t f) {
   long i = INTFLOAT(f, 2);
   conv[0] = MINUSOR(i, '+');
   conv[1] = DIGIMOD(i, 10000);
@@ -365,7 +365,7 @@ const char* ftostr52sign(const float &f) {
 }
 
 // Convert signed float to string with +12.345 format
-const char* ftostr53sign(const float &f) {
+const char* ftostr53sign(const_float_t f) {
   long i = INTFLOAT(f, 3);
   conv[0] = MINUSOR(i, '+');
   conv[1] = DIGIMOD(i, 10000);
@@ -378,7 +378,7 @@ const char* ftostr53sign(const float &f) {
 }
 
 // Convert unsigned float to string with ____4.5, __34.5, _234.5, 1234.5 format
-const char* ftostr51rj(const float &f) {
+const char* ftostr51rj(const_float_t f) {
   const long i = UINTFLOAT(f, 1);
   conv[0] = ' ';
   conv[1] = RJDIGIT(i, 10000);
@@ -391,7 +391,7 @@ const char* ftostr51rj(const float &f) {
 }
 
 // Convert signed float to space-padded string with -_23.4_ format
-const char* ftostr52sp(const float &f) {
+const char* ftostr52sp(const_float_t f) {
   long i = INTFLOAT(f, 2);
   uint8_t dig;
   conv[0] = MINUSOR(i, ' ');

commit ccdbffbf3f599f0860c643647ce6c40f1eb5a4cd
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Mon Mar 29 01:41:56 2021 -0500

    Laser Coolant Flow Meter / Safety Shutdown (#21431)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 90696e9ad3..283734faab 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -177,6 +177,15 @@ const char* i16tostr4signrj(const int16_t i) {
   return &conv[3];
 }
 
+// Convert unsigned float to string with 1.1 format
+const char* ftostr11ns(const float &f) {
+  const long i = UINTFLOAT(f, 1);
+  conv[4] = DIGIMOD(i, 10);
+  conv[5] = '.';
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[4];
+}
+
 // Convert unsigned float to string with 1.23 format
 const char* ftostr12ns(const float &f) {
   const long i = UINTFLOAT(f, 2);

commit 1fc0dcdc9701146d7e8b126bb3ba0517c172e484
Author: Mike La Spina <mike.laspina@shaw.ca>
Date:   Wed Dec 23 22:50:24 2020 -0600

    Cutter Power in percent format (#20410)
    
    Co-authored-by: Scott Lahteine <thinkyhead@users.noreply.github.com>
    Co-authored-by: Jason Smith <jason.inet@gmail.com>
    Co-authored-by: Luu Lac <45380455+shitcreek@users.noreply.github.com>

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index c3efb2b25a..90696e9ad3 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -34,16 +34,20 @@ char conv[8] = { 0 };
 #define INTFLOAT(V,N) (((V) * 10 * pow(10, N) + ((V) < 0 ? -5: 5)) / 10)      // pow10?
 #define UINTFLOAT(V,N) INTFLOAT((V) < 0 ? -(V) : (V), N)
 
-// Convert a full-range unsigned 8bit int to a percentage
-const char* ui8tostr4pctrj(const uint8_t i) {
-  const uint8_t n = ui8_to_percent(i);
-  conv[3] = RJDIGIT(n, 100);
-  conv[4] = RJDIGIT(n, 10);
-  conv[5] = DIGIMOD(n, 1);
+// Format uint8_t (0-100) as rj string with 123% / _12% / __1% format
+const char* pcttostrpctrj(const uint8_t i) {
+  conv[3] = RJDIGIT(i, 100);
+  conv[4] = RJDIGIT(i, 10);
+  conv[5] = DIGIMOD(i, 1);
   conv[6] = '%';
   return &conv[3];
 }
 
+// Convert uint8_t (0-255) to a percentage, format as above
+const char* ui8tostr4pctrj(const uint8_t i) {
+  return pcttostrpctrj(ui8_to_percent(i));
+}
+
 // Convert unsigned 8bit int to string 123 format
 const char* ui8tostr3rj(const uint8_t i) {
   conv[4] = RJDIGIT(i, 100);

commit 60155aa442f7dbd1654fd493ca3d66edb2ed99f0
Author: Nick <nick@n-wells.co.uk>
Date:   Tue Sep 29 00:53:40 2020 +0100

    Anycubic Chiron full feature support (#19505)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 3b36c180e8..c3efb2b25a 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -52,6 +52,13 @@ const char* ui8tostr3rj(const uint8_t i) {
   return &conv[4];
 }
 
+// Convert uint8_t to string with 12 format
+const char* ui8tostr2(const uint8_t i) {
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[5];
+}
+
 // Convert signed 8bit int to rj string with 123 or -12 format
 const char* i8tostr3rj(const int8_t x) {
   int xx = x;

commit 42fbd527f3bcc317ae6851aca5a45bdbf979de55
Author: Diego von Deschwanden <68632259+Diegovd@users.noreply.github.com>
Date:   Thu Jul 23 05:20:14 2020 +0200

    Fix links to secure sites (#18745)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 709e58bdc5..3b36c180e8 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -16,7 +16,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  *
  */
 

commit 0e1cb10909b47d939d0766c35cdd3cbbd1d37def
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 13 19:59:32 2020 -0500

    Fix / improve menu items (#18644)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 2788ec63ac..709e58bdc5 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -31,6 +31,8 @@ char conv[8] = { 0 };
 #define DIGIMOD(n, f) DIGIT((n)/(f) % 10)
 #define RJDIGIT(n, f) ((n) >= (f) ? DIGIMOD(n, f) : ' ')
 #define MINUSOR(n, alt) (n >= 0 ? (alt) : (n = -n, '-'))
+#define INTFLOAT(V,N) (((V) * 10 * pow(10, N) + ((V) < 0 ? -5: 5)) / 10)      // pow10?
+#define UINTFLOAT(V,N) INTFLOAT((V) < 0 ? -(V) : (V), N)
 
 // Convert a full-range unsigned 8bit int to a percentage
 const char* ui8tostr4pctrj(const uint8_t i) {
@@ -166,7 +168,7 @@ const char* i16tostr4signrj(const int16_t i) {
 
 // Convert unsigned float to string with 1.23 format
 const char* ftostr12ns(const float &f) {
-  const long i = ((f < 0 ? -f : f) * 1000 + 5) / 10;
+  const long i = UINTFLOAT(f, 2);
   conv[3] = DIGIMOD(i, 100);
   conv[4] = '.';
   conv[5] = DIGIMOD(i, 10);
@@ -176,7 +178,7 @@ const char* ftostr12ns(const float &f) {
 
 // Convert unsigned float to string with 12.3 format
 const char* ftostr31ns(const float &f) {
-  const long i = ((f < 0 ? -f : f) * 100 + 5) / 10;
+  const long i = UINTFLOAT(f, 1);
   conv[3] = DIGIMOD(i, 100);
   conv[4] = DIGIMOD(i, 10);
   conv[5] = '.';
@@ -186,7 +188,7 @@ const char* ftostr31ns(const float &f) {
 
 // Convert unsigned float to string with 123.4 format
 const char* ftostr41ns(const float &f) {
-  const long i = ((f < 0 ? -f : f) * 100 + 5) / 10;
+  const long i = UINTFLOAT(f, 1);
   conv[2] = DIGIMOD(i, 1000);
   conv[3] = DIGIMOD(i, 100);
   conv[4] = DIGIMOD(i, 10);
@@ -198,7 +200,7 @@ const char* ftostr41ns(const float &f) {
 // Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
 const char* ftostr42_52(const float &f) {
   if (f <= -10 || f >= 100) return ftostr52(f); // -23.45 / 123.45
-  long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
+  long i = INTFLOAT(f, 2);
   conv[2] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 1000));
   conv[3] = DIGIMOD(i, 100);
   conv[4] = '.';
@@ -209,7 +211,7 @@ const char* ftostr42_52(const float &f) {
 
 // Convert signed float to fixed-length string with 023.45 / -23.45 format
 const char* ftostr52(const float &f) {
-  long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
+  long i = INTFLOAT(f, 2);
   conv[1] = MINUSOR(i, DIGIMOD(i, 10000));
   conv[2] = DIGIMOD(i, 1000);
   conv[3] = DIGIMOD(i, 100);
@@ -222,7 +224,7 @@ const char* ftostr52(const float &f) {
 // Convert signed float to fixed-length string with 12.345 / _2.345 / -2.345 or -23.45 / 123.45 format
 const char* ftostr53_63(const float &f) {
   if (f <= -10 || f >= 100) return ftostr63(f); // -23.456 / 123.456
-  long i = (f * 10000 + (f < 0 ? -5: 5)) / 10;
+  long i = INTFLOAT(f, 3);
   conv[1] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 10000));
   conv[2] = DIGIMOD(i, 1000);
   conv[3] = '.';
@@ -234,7 +236,7 @@ const char* ftostr53_63(const float &f) {
 
 // Convert signed float to fixed-length string with 023.456 / -23.456 format
 const char* ftostr63(const float &f) {
-  long i = (f * 10000 + (f < 0 ? -5: 5)) / 10;
+  long i = INTFLOAT(f, 3);
   conv[0] = MINUSOR(i, DIGIMOD(i, 100000));
   conv[1] = DIGIMOD(i, 10000);
   conv[2] = DIGIMOD(i, 1000);
@@ -249,7 +251,7 @@ const char* ftostr63(const float &f) {
 
   // Convert float to rj string with 1234, _123, -123, _-12, 12.3, _1.2, or -1.2 format
   const char* ftostr4sign(const float &f) {
-    const int i = (f * 100 + (f < 0 ? -5: 5)) / 10;
+    const int i = INTFLOAT(f, 1);
     if (!WITHIN(i, -99, 999)) return i16tostr4signrj((int)f);
     const bool neg = i < 0;
     const int ii = neg ? -i : i;
@@ -262,9 +264,20 @@ const char* ftostr63(const float &f) {
 
 #endif
 
+// Convert float to fixed-length string with +12.3 / -12.3 format
+const char* ftostr31sign(const float &f) {
+  int i = INTFLOAT(f, 1);
+  conv[2] = MINUSOR(i, '+');
+  conv[3] = DIGIMOD(i, 100);
+  conv[4] = DIGIMOD(i, 10);
+  conv[5] = '.';
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[2];
+}
+
 // Convert float to fixed-length string with +123.4 / -123.4 format
 const char* ftostr41sign(const float &f) {
-  int i = (f * 100 + (f < 0 ? -5: 5)) / 10;
+  int i = INTFLOAT(f, 1);
   conv[1] = MINUSOR(i, '+');
   conv[2] = DIGIMOD(i, 1000);
   conv[3] = DIGIMOD(i, 100);
@@ -276,7 +289,7 @@ const char* ftostr41sign(const float &f) {
 
 // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
 const char* ftostr43sign(const float &f, char plus/*=' '*/) {
-  long i = (f * 10000 + (f < 0 ? -5: 5)) / 10;
+  long i = INTFLOAT(f, 3);
   conv[1] = i ? MINUSOR(i, plus) : ' ';
   conv[2] = DIGIMOD(i, 1000);
   conv[3] = '.';
@@ -288,7 +301,7 @@ const char* ftostr43sign(const float &f, char plus/*=' '*/) {
 
 // Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format
 const char* ftostr54sign(const float &f, char plus/*=' '*/) {
-  long i = (f * 100000 + (f < 0 ? -5: 5)) / 10;
+  long i = INTFLOAT(f, 4);
   conv[0] = i ? MINUSOR(i, plus) : ' ';
   conv[1] = DIGIMOD(i, 10000);
   conv[2] = '.';
@@ -301,13 +314,13 @@ const char* ftostr54sign(const float &f, char plus/*=' '*/) {
 
 // Convert unsigned float to rj string with 12345 format
 const char* ftostr5rj(const float &f) {
-  const long i = ((f < 0 ? -f : f) * 10 + 5) / 10;
+  const long i = UINTFLOAT(f, 0);
   return ui16tostr5rj(i);
 }
 
 // Convert signed float to string with +1234.5 format
 const char* ftostr51sign(const float &f) {
-  long i = (f * 100 + (f < 0 ? -5: 5)) / 10;
+  long i = INTFLOAT(f, 1);
   conv[0] = MINUSOR(i, '+');
   conv[1] = DIGIMOD(i, 10000);
   conv[2] = DIGIMOD(i, 1000);
@@ -320,7 +333,7 @@ const char* ftostr51sign(const float &f) {
 
 // Convert signed float to string with +123.45 format
 const char* ftostr52sign(const float &f) {
-  long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
+  long i = INTFLOAT(f, 2);
   conv[0] = MINUSOR(i, '+');
   conv[1] = DIGIMOD(i, 10000);
   conv[2] = DIGIMOD(i, 1000);
@@ -333,7 +346,7 @@ const char* ftostr52sign(const float &f) {
 
 // Convert signed float to string with +12.345 format
 const char* ftostr53sign(const float &f) {
-  long i = (f * 10000 + (f < 0 ? -5: 5)) / 10;
+  long i = INTFLOAT(f, 3);
   conv[0] = MINUSOR(i, '+');
   conv[1] = DIGIMOD(i, 10000);
   conv[2] = DIGIMOD(i, 1000);
@@ -346,7 +359,7 @@ const char* ftostr53sign(const float &f) {
 
 // Convert unsigned float to string with ____4.5, __34.5, _234.5, 1234.5 format
 const char* ftostr51rj(const float &f) {
-  const long i = ((f < 0 ? -f : f) * 100 + 5) / 10;
+  const long i = UINTFLOAT(f, 1);
   conv[0] = ' ';
   conv[1] = RJDIGIT(i, 10000);
   conv[2] = RJDIGIT(i, 1000);
@@ -359,7 +372,7 @@ const char* ftostr51rj(const float &f) {
 
 // Convert signed float to space-padded string with -_23.4_ format
 const char* ftostr52sp(const float &f) {
-  long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
+  long i = INTFLOAT(f, 2);
   uint8_t dig;
   conv[0] = MINUSOR(i, ' ');
   conv[1] = RJDIGIT(i, 10000);

commit 424569b4c4bf112a3939724b30bad528a76a2b08
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jun 18 15:23:03 2020 -0500

    Power monitor and display (#17437)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 1ed315ae07..2788ec63ac 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -174,6 +174,27 @@ const char* ftostr12ns(const float &f) {
   return &conv[3];
 }
 
+// Convert unsigned float to string with 12.3 format
+const char* ftostr31ns(const float &f) {
+  const long i = ((f < 0 ? -f : f) * 100 + 5) / 10;
+  conv[3] = DIGIMOD(i, 100);
+  conv[4] = DIGIMOD(i, 10);
+  conv[5] = '.';
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[3];
+}
+
+// Convert unsigned float to string with 123.4 format
+const char* ftostr41ns(const float &f) {
+  const long i = ((f < 0 ? -f : f) * 100 + 5) / 10;
+  conv[2] = DIGIMOD(i, 1000);
+  conv[3] = DIGIMOD(i, 100);
+  conv[4] = DIGIMOD(i, 10);
+  conv[5] = '.';
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[2];
+}
+
 // Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
 const char* ftostr42_52(const float &f) {
   if (f <= -10 || f >= 100) return ftostr52(f); // -23.45 / 123.45

commit 2f7e5cf7ddd04ae0474f104dd1b712b480fe692c
Author: Roxy-3D <Roxy-3D@users.noreply.github.com>
Date:   Sat Mar 28 09:53:04 2020 -0500

    Fix typo...

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index ac82bf16f1..1ed315ae07 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -312,7 +312,7 @@ const char* ftostr52sign(const float &f) {
 
 // Convert signed float to string with +12.345 format
 const char* ftostr53sign(const float &f) {
-  long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
+  long i = (f * 10000 + (f < 0 ? -5: 5)) / 10;
   conv[0] = MINUSOR(i, '+');
   conv[1] = DIGIMOD(i, 10000);
   conv[2] = DIGIMOD(i, 1000);

commit 1f5824247f632af71b1725f8bb41e66f55b14919
Author: Joe Prints <33383148+JoePrints@users.noreply.github.com>
Date:   Tue Mar 17 15:12:52 2020 -0500

    More decimal places for babystep / Z probe offset (#17195)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 3b641e0dd3..ac82bf16f1 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -174,9 +174,9 @@ const char* ftostr12ns(const float &f) {
   return &conv[3];
 }
 
-// Convert signed float to fixed-length string with 12.34 / -2.34 or 023.45 / -23.45 format
+// Convert signed float to fixed-length string with 12.34 / _2.34 / -2.34 or -23.45 / 123.45 format
 const char* ftostr42_52(const float &f) {
-  if (f <= -10 || f >= 100) return ftostr52(f); // need more digits
+  if (f <= -10 || f >= 100) return ftostr52(f); // -23.45 / 123.45
   long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
   conv[2] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 1000));
   conv[3] = DIGIMOD(i, 100);
@@ -198,9 +198,9 @@ const char* ftostr52(const float &f) {
   return &conv[1];
 }
 
-// Convert signed float to fixed-length string with 12.345 / -2.345 or 023.456 / -23.456 format
-const char* ftostr43_53(const float &f) {
-  if (f <= -10 || f >= 100) return ftostr53(f); // need more digits
+// Convert signed float to fixed-length string with 12.345 / _2.345 / -2.345 or -23.45 / 123.45 format
+const char* ftostr53_63(const float &f) {
+  if (f <= -10 || f >= 100) return ftostr63(f); // -23.456 / 123.456
   long i = (f * 10000 + (f < 0 ? -5: 5)) / 10;
   conv[1] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 10000));
   conv[2] = DIGIMOD(i, 1000);
@@ -212,7 +212,7 @@ const char* ftostr43_53(const float &f) {
 }
 
 // Convert signed float to fixed-length string with 023.456 / -23.456 format
-const char* ftostr53(const float &f) {
+const char* ftostr63(const float &f) {
   long i = (f * 10000 + (f < 0 ? -5: 5)) / 10;
   conv[0] = MINUSOR(i, DIGIMOD(i, 100000));
   conv[1] = DIGIMOD(i, 10000);
@@ -310,6 +310,19 @@ const char* ftostr52sign(const float &f) {
   return conv;
 }
 
+// Convert signed float to string with +12.345 format
+const char* ftostr53sign(const float &f) {
+  long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
+  conv[0] = MINUSOR(i, '+');
+  conv[1] = DIGIMOD(i, 10000);
+  conv[2] = DIGIMOD(i, 1000);
+  conv[3] = '.';
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return conv;
+}
+
 // Convert unsigned float to string with ____4.5, __34.5, _234.5, 1234.5 format
 const char* ftostr51rj(const float &f) {
   const long i = ((f < 0 ? -f : f) * 100 + 5) / 10;

commit 13118dbd8d9142d7698ca113cb05d1feae3b1bd3
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Sun Mar 8 19:42:18 2020 -0500

    Additional numtostr functions

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index e5ddc14748..3b641e0dd3 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -33,7 +33,7 @@ char conv[8] = { 0 };
 #define MINUSOR(n, alt) (n >= 0 ? (alt) : (n = -n, '-'))
 
 // Convert a full-range unsigned 8bit int to a percentage
-const char* ui8tostr4pct(const uint8_t i) {
+const char* ui8tostr4pctrj(const uint8_t i) {
   const uint8_t n = ui8_to_percent(i);
   conv[3] = RJDIGIT(n, 100);
   conv[4] = RJDIGIT(n, 10);
@@ -43,7 +43,7 @@ const char* ui8tostr4pct(const uint8_t i) {
 }
 
 // Convert unsigned 8bit int to string 123 format
-const char* ui8tostr3(const uint8_t i) {
+const char* ui8tostr3rj(const uint8_t i) {
   conv[4] = RJDIGIT(i, 100);
   conv[5] = RJDIGIT(i, 10);
   conv[6] = DIGIMOD(i, 1);
@@ -51,7 +51,7 @@ const char* ui8tostr3(const uint8_t i) {
 }
 
 // Convert signed 8bit int to rj string with 123 or -12 format
-const char* i8tostr3(const int8_t x) {
+const char* i8tostr3rj(const int8_t x) {
   int xx = x;
   conv[4] = MINUSOR(xx, RJDIGIT(xx, 100));
   conv[5] = RJDIGIT(xx, 10);
@@ -88,7 +88,7 @@ const char* i8tostr3(const int8_t x) {
 #endif
 
 // Convert unsigned 16bit int to string 12345 format
-const char* ui16tostr5(const uint16_t xx) {
+const char* ui16tostr5rj(const uint16_t xx) {
   conv[2] = RJDIGIT(xx, 10000);
   conv[3] = RJDIGIT(xx, 1000);
   conv[4] = RJDIGIT(xx, 100);
@@ -98,7 +98,7 @@ const char* ui16tostr5(const uint16_t xx) {
 }
 
 // Convert unsigned 16bit int to string 1234 format
-const char* ui16tostr4(const uint16_t xx) {
+const char* ui16tostr4rj(const uint16_t xx) {
   conv[3] = RJDIGIT(xx, 1000);
   conv[4] = RJDIGIT(xx, 100);
   conv[5] = RJDIGIT(xx, 10);
@@ -107,7 +107,7 @@ const char* ui16tostr4(const uint16_t xx) {
 }
 
 // Convert unsigned 16bit int to string 123 format
-const char* ui16tostr3(const uint16_t xx) {
+const char* ui16tostr3rj(const uint16_t xx) {
   conv[4] = RJDIGIT(xx, 100);
   conv[5] = RJDIGIT(xx, 10);
   conv[6] = DIGIMOD(xx, 1);
@@ -115,7 +115,7 @@ const char* ui16tostr3(const uint16_t xx) {
 }
 
 // Convert signed 16bit int to rj string with 123 or -12 format
-const char* i16tostr3(const int16_t x) {
+const char* i16tostr3rj(const int16_t x) {
   int xx = x;
   conv[4] = MINUSOR(xx, RJDIGIT(xx, 100));
   conv[5] = RJDIGIT(xx, 10);
@@ -136,7 +136,7 @@ const char* i16tostr3left(const int16_t i) {
 }
 
 // Convert signed 16bit int to rj string with 1234, _123, -123, _-12, or __-1 format
-const char* i16tostr4sign(const int16_t i) {
+const char* i16tostr4signrj(const int16_t i) {
   const bool neg = i < 0;
   const int ii = neg ? -i : i;
   if (i >= 1000) {
@@ -174,7 +174,7 @@ const char* ftostr12ns(const float &f) {
   return &conv[3];
 }
 
-// Convert signed float to fixed-length string with 12.34 / -2.34 format or 123.45 / -23.45 format
+// Convert signed float to fixed-length string with 12.34 / -2.34 or 023.45 / -23.45 format
 const char* ftostr42_52(const float &f) {
   if (f <= -10 || f >= 100) return ftostr52(f); // need more digits
   long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
@@ -198,12 +198,38 @@ const char* ftostr52(const float &f) {
   return &conv[1];
 }
 
+// Convert signed float to fixed-length string with 12.345 / -2.345 or 023.456 / -23.456 format
+const char* ftostr43_53(const float &f) {
+  if (f <= -10 || f >= 100) return ftostr53(f); // need more digits
+  long i = (f * 10000 + (f < 0 ? -5: 5)) / 10;
+  conv[1] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 10000));
+  conv[2] = DIGIMOD(i, 1000);
+  conv[3] = '.';
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[1];
+}
+
+// Convert signed float to fixed-length string with 023.456 / -23.456 format
+const char* ftostr53(const float &f) {
+  long i = (f * 10000 + (f < 0 ? -5: 5)) / 10;
+  conv[0] = MINUSOR(i, DIGIMOD(i, 100000));
+  conv[1] = DIGIMOD(i, 10000);
+  conv[2] = DIGIMOD(i, 1000);
+  conv[3] = '.';
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[0];
+}
+
 #if ENABLED(LCD_DECIMAL_SMALL_XY)
 
   // Convert float to rj string with 1234, _123, -123, _-12, 12.3, _1.2, or -1.2 format
   const char* ftostr4sign(const float &f) {
     const int i = (f * 100 + (f < 0 ? -5: 5)) / 10;
-    if (!WITHIN(i, -99, 999)) return i16tostr4sign((int)f);
+    if (!WITHIN(i, -99, 999)) return i16tostr4signrj((int)f);
     const bool neg = i < 0;
     const int ii = neg ? -i : i;
     conv[3] = neg ? '-' : (ii >= 100 ? DIGIMOD(ii, 100) : ' ');
@@ -255,7 +281,7 @@ const char* ftostr54sign(const float &f, char plus/*=' '*/) {
 // Convert unsigned float to rj string with 12345 format
 const char* ftostr5rj(const float &f) {
   const long i = ((f < 0 ? -f : f) * 10 + 5) / 10;
-  return ui16tostr5(i);
+  return ui16tostr5rj(i);
 }
 
 // Convert signed float to string with +1234.5 format
@@ -284,7 +310,7 @@ const char* ftostr52sign(const float &f) {
   return conv;
 }
 
-// Convert unsigned float to string with 1234.5 format omitting trailing zeros
+// Convert unsigned float to string with ____4.5, __34.5, _234.5, 1234.5 format
 const char* ftostr51rj(const float &f) {
   const long i = ((f < 0 ? -f : f) * 100 + 5) / 10;
   conv[0] = ' ';

commit bfad23d3e2e590b257ebe4317d7b14cc2dd3435c
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Mon Feb 3 08:00:57 2020 -0600

    (c) 2020

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 6054f877e5..e5ddc14748 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -1,6 +1,6 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
  * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm

commit 1df90aaf0ef50efedbb0e238b44cf0eabdcc7abc
Author: Haxk20 <16738302+Haxk20@users.noreply.github.com>
Date:   Fri Oct 11 15:45:15 2019 +0200

    Followup to num2str update (#15518)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index ead09d86ca..6054f877e5 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -201,7 +201,7 @@ const char* ftostr52(const float &f) {
 #if ENABLED(LCD_DECIMAL_SMALL_XY)
 
   // Convert float to rj string with 1234, _123, -123, _-12, 12.3, _1.2, or -1.2 format
-  char* ftostr4sign(const float &f) {
+  const char* ftostr4sign(const float &f) {
     const int i = (f * 100 + (f < 0 ? -5: 5)) / 10;
     if (!WITHIN(i, -99, 999)) return i16tostr4sign((int)f);
     const bool neg = i < 0;

commit b20d5a7cc627164877c95859baaa614f8afc7b99
Author: LinFor <linfor@gmail.com>
Date:   Fri Oct 11 05:03:33 2019 +0300

    Estimate Remaining Time (graphical display) (#15497)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 6be9da7afb..ead09d86ca 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -33,7 +33,7 @@ char conv[8] = { 0 };
 #define MINUSOR(n, alt) (n >= 0 ? (alt) : (n = -n, '-'))
 
 // Convert a full-range unsigned 8bit int to a percentage
-char* ui8tostr4pct(const uint8_t i) {
+const char* ui8tostr4pct(const uint8_t i) {
   const uint8_t n = ui8_to_percent(i);
   conv[3] = RJDIGIT(n, 100);
   conv[4] = RJDIGIT(n, 10);
@@ -43,7 +43,7 @@ char* ui8tostr4pct(const uint8_t i) {
 }
 
 // Convert unsigned 8bit int to string 123 format
-char* ui8tostr3(const uint8_t i) {
+const char* ui8tostr3(const uint8_t i) {
   conv[4] = RJDIGIT(i, 100);
   conv[5] = RJDIGIT(i, 10);
   conv[6] = DIGIMOD(i, 1);
@@ -51,7 +51,7 @@ char* ui8tostr3(const uint8_t i) {
 }
 
 // Convert signed 8bit int to rj string with 123 or -12 format
-char* i8tostr3(const int8_t x) {
+const char* i8tostr3(const int8_t x) {
   int xx = x;
   conv[4] = MINUSOR(xx, RJDIGIT(xx, 100));
   conv[5] = RJDIGIT(xx, 10);
@@ -59,8 +59,36 @@ char* i8tostr3(const int8_t x) {
   return &conv[4];
 }
 
+#if HAS_PRINT_PROGRESS_PERMYRIAD
+  // Convert unsigned 16-bit permyriad to percent with 100 / 23 / 23.4 / 3.45 format
+  const char* permyriadtostr4(const uint16_t xx) {
+    if (xx >= 10000)
+      return "100";
+    else if (xx >= 1000) {
+      conv[3] = DIGIMOD(xx, 1000);
+      conv[4] = DIGIMOD(xx, 100);
+      conv[5] = '.';
+      conv[6] = DIGIMOD(xx, 10);
+      return &conv[3];
+    }
+    else if (xx % 100 == 0) {
+      conv[4] = ' ';
+      conv[5] = RJDIGIT(xx, 1000);
+      conv[6] = DIGIMOD(xx, 100);
+      return &conv[4];
+    }
+    else {
+      conv[3] = DIGIMOD(xx, 100);
+      conv[4] = '.';
+      conv[5] = DIGIMOD(xx, 10);
+      conv[6] = RJDIGIT(xx, 1);
+      return &conv[3];
+    }
+  }
+#endif
+
 // Convert unsigned 16bit int to string 12345 format
-char* ui16tostr5(const uint16_t xx) {
+const char* ui16tostr5(const uint16_t xx) {
   conv[2] = RJDIGIT(xx, 10000);
   conv[3] = RJDIGIT(xx, 1000);
   conv[4] = RJDIGIT(xx, 100);
@@ -70,7 +98,7 @@ char* ui16tostr5(const uint16_t xx) {
 }
 
 // Convert unsigned 16bit int to string 1234 format
-char* ui16tostr4(const uint16_t xx) {
+const char* ui16tostr4(const uint16_t xx) {
   conv[3] = RJDIGIT(xx, 1000);
   conv[4] = RJDIGIT(xx, 100);
   conv[5] = RJDIGIT(xx, 10);
@@ -79,7 +107,7 @@ char* ui16tostr4(const uint16_t xx) {
 }
 
 // Convert unsigned 16bit int to string 123 format
-char* ui16tostr3(const uint16_t xx) {
+const char* ui16tostr3(const uint16_t xx) {
   conv[4] = RJDIGIT(xx, 100);
   conv[5] = RJDIGIT(xx, 10);
   conv[6] = DIGIMOD(xx, 1);
@@ -87,7 +115,7 @@ char* ui16tostr3(const uint16_t xx) {
 }
 
 // Convert signed 16bit int to rj string with 123 or -12 format
-char* i16tostr3(const int16_t x) {
+const char* i16tostr3(const int16_t x) {
   int xx = x;
   conv[4] = MINUSOR(xx, RJDIGIT(xx, 100));
   conv[5] = RJDIGIT(xx, 10);
@@ -96,7 +124,7 @@ char* i16tostr3(const int16_t x) {
 }
 
 // Convert unsigned 16bit int to lj string with 123 format
-char* i16tostr3left(const int16_t i) {
+const char* i16tostr3left(const int16_t i) {
   char *str = &conv[6];
   *str = DIGIMOD(i, 1);
   if (i >= 10) {
@@ -108,7 +136,7 @@ char* i16tostr3left(const int16_t i) {
 }
 
 // Convert signed 16bit int to rj string with 1234, _123, -123, _-12, or __-1 format
-char* i16tostr4sign(const int16_t i) {
+const char* i16tostr4sign(const int16_t i) {
   const bool neg = i < 0;
   const int ii = neg ? -i : i;
   if (i >= 1000) {
@@ -137,7 +165,7 @@ char* i16tostr4sign(const int16_t i) {
 }
 
 // Convert unsigned float to string with 1.23 format
-char* ftostr12ns(const float &f) {
+const char* ftostr12ns(const float &f) {
   const long i = ((f < 0 ? -f : f) * 1000 + 5) / 10;
   conv[3] = DIGIMOD(i, 100);
   conv[4] = '.';
@@ -147,7 +175,7 @@ char* ftostr12ns(const float &f) {
 }
 
 // Convert signed float to fixed-length string with 12.34 / -2.34 format or 123.45 / -23.45 format
-char* ftostr42_52(const float &f) {
+const char* ftostr42_52(const float &f) {
   if (f <= -10 || f >= 100) return ftostr52(f); // need more digits
   long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
   conv[2] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 1000));
@@ -159,7 +187,7 @@ char* ftostr42_52(const float &f) {
 }
 
 // Convert signed float to fixed-length string with 023.45 / -23.45 format
-char* ftostr52(const float &f) {
+const char* ftostr52(const float &f) {
   long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
   conv[1] = MINUSOR(i, DIGIMOD(i, 10000));
   conv[2] = DIGIMOD(i, 1000);
@@ -188,7 +216,7 @@ char* ftostr52(const float &f) {
 #endif
 
 // Convert float to fixed-length string with +123.4 / -123.4 format
-char* ftostr41sign(const float &f) {
+const char* ftostr41sign(const float &f) {
   int i = (f * 100 + (f < 0 ? -5: 5)) / 10;
   conv[1] = MINUSOR(i, '+');
   conv[2] = DIGIMOD(i, 1000);
@@ -200,7 +228,7 @@ char* ftostr41sign(const float &f) {
 }
 
 // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
-char* ftostr43sign(const float &f, char plus/*=' '*/) {
+const char* ftostr43sign(const float &f, char plus/*=' '*/) {
   long i = (f * 10000 + (f < 0 ? -5: 5)) / 10;
   conv[1] = i ? MINUSOR(i, plus) : ' ';
   conv[2] = DIGIMOD(i, 1000);
@@ -212,7 +240,7 @@ char* ftostr43sign(const float &f, char plus/*=' '*/) {
 }
 
 // Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format
-char* ftostr54sign(const float &f, char plus/*=' '*/) {
+const char* ftostr54sign(const float &f, char plus/*=' '*/) {
   long i = (f * 100000 + (f < 0 ? -5: 5)) / 10;
   conv[0] = i ? MINUSOR(i, plus) : ' ';
   conv[1] = DIGIMOD(i, 10000);
@@ -225,13 +253,13 @@ char* ftostr54sign(const float &f, char plus/*=' '*/) {
 }
 
 // Convert unsigned float to rj string with 12345 format
-char* ftostr5rj(const float &f) {
+const char* ftostr5rj(const float &f) {
   const long i = ((f < 0 ? -f : f) * 10 + 5) / 10;
   return ui16tostr5(i);
 }
 
 // Convert signed float to string with +1234.5 format
-char* ftostr51sign(const float &f) {
+const char* ftostr51sign(const float &f) {
   long i = (f * 100 + (f < 0 ? -5: 5)) / 10;
   conv[0] = MINUSOR(i, '+');
   conv[1] = DIGIMOD(i, 10000);
@@ -244,7 +272,7 @@ char* ftostr51sign(const float &f) {
 }
 
 // Convert signed float to string with +123.45 format
-char* ftostr52sign(const float &f) {
+const char* ftostr52sign(const float &f) {
   long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
   conv[0] = MINUSOR(i, '+');
   conv[1] = DIGIMOD(i, 10000);
@@ -257,7 +285,7 @@ char* ftostr52sign(const float &f) {
 }
 
 // Convert unsigned float to string with 1234.5 format omitting trailing zeros
-char* ftostr51rj(const float &f) {
+const char* ftostr51rj(const float &f) {
   const long i = ((f < 0 ? -f : f) * 100 + 5) / 10;
   conv[0] = ' ';
   conv[1] = RJDIGIT(i, 10000);
@@ -270,7 +298,7 @@ char* ftostr51rj(const float &f) {
 }
 
 // Convert signed float to space-padded string with -_23.4_ format
-char* ftostr52sp(const float &f) {
+const char* ftostr52sp(const float &f) {
   long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
   uint8_t dig;
   conv[0] = MINUSOR(i, ' ');

commit 465c6d92307ec613d0b2a7355ce67a60ba23fc0c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Sep 14 03:05:10 2019 -0500

    Simpler Allen Key config. Fixes, cleanups from refactor (#15256)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index fabc5b498f..6be9da7afb 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -21,6 +21,8 @@
  */
 
 #include "numtostr.h"
+
+#include "../inc/MarlinConfigPre.h"
 #include "../core/utility.h"
 
 char conv[8] = { 0 };
@@ -183,7 +185,7 @@ char* ftostr52(const float &f) {
     return &conv[3];
   }
 
-#endif // LCD_DECIMAL_SMALL_XY
+#endif
 
 // Convert float to fixed-length string with +123.4 / -123.4 format
 char* ftostr41sign(const float &f) {

commit 93cd66ac1146603e8a9911fceb3c63f4351f4d8e
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Thu Jun 27 23:57:50 2019 -0500

    Tweaky change from (C) to (c)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 78f7370fbf..fabc5b498f 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -1,9 +1,9 @@
 /**
  * Marlin 3D Printer Firmware
- * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
  *
  * Based on Sprinter and grbl.
- * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

commit d7d80418aedad1c89e27fcba6aab9aa48187b5cc
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Thu Jun 27 23:06:49 2019 -0500

    Singleton for cutting tools (#14429)

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index 09ebf64d2f..78f7370fbf 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -57,12 +57,14 @@ char* i8tostr3(const int8_t x) {
   return &conv[4];
 }
 
-// Convert unsigned 16bit int to string 123 format
-char* ui16tostr3(const uint16_t xx) {
+// Convert unsigned 16bit int to string 12345 format
+char* ui16tostr5(const uint16_t xx) {
+  conv[2] = RJDIGIT(xx, 10000);
+  conv[3] = RJDIGIT(xx, 1000);
   conv[4] = RJDIGIT(xx, 100);
   conv[5] = RJDIGIT(xx, 10);
   conv[6] = DIGIMOD(xx, 1);
-  return &conv[4];
+  return &conv[2];
 }
 
 // Convert unsigned 16bit int to string 1234 format
@@ -74,6 +76,14 @@ char* ui16tostr4(const uint16_t xx) {
   return &conv[3];
 }
 
+// Convert unsigned 16bit int to string 123 format
+char* ui16tostr3(const uint16_t xx) {
+  conv[4] = RJDIGIT(xx, 100);
+  conv[5] = RJDIGIT(xx, 10);
+  conv[6] = DIGIMOD(xx, 1);
+  return &conv[4];
+}
+
 // Convert signed 16bit int to rj string with 123 or -12 format
 char* i16tostr3(const int16_t x) {
   int xx = x;
@@ -215,12 +225,7 @@ char* ftostr54sign(const float &f, char plus/*=' '*/) {
 // Convert unsigned float to rj string with 12345 format
 char* ftostr5rj(const float &f) {
   const long i = ((f < 0 ? -f : f) * 10 + 5) / 10;
-  conv[2] = RJDIGIT(i, 10000);
-  conv[3] = RJDIGIT(i, 1000);
-  conv[4] = RJDIGIT(i, 100);
-  conv[5] = RJDIGIT(i, 10);
-  conv[6] = DIGIMOD(i, 1);
-  return &conv[2];
+  return ui16tostr5(i);
 }
 
 // Convert signed float to string with +1234.5 format

commit 2a96d4e23ad0090dc371710d079af731136dfe97
Author: Scott Lahteine <github@thinkyhead.com>
Date:   Tue Jun 11 05:58:43 2019 -0500

    Move number-to-string functions to libs

diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
new file mode 100644
index 0000000000..09ebf64d2f
--- /dev/null
+++ b/Marlin/src/libs/numtostr.cpp
@@ -0,0 +1,289 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "numtostr.h"
+#include "../core/utility.h"
+
+char conv[8] = { 0 };
+
+#define DIGIT(n) ('0' + (n))
+#define DIGIMOD(n, f) DIGIT((n)/(f) % 10)
+#define RJDIGIT(n, f) ((n) >= (f) ? DIGIMOD(n, f) : ' ')
+#define MINUSOR(n, alt) (n >= 0 ? (alt) : (n = -n, '-'))
+
+// Convert a full-range unsigned 8bit int to a percentage
+char* ui8tostr4pct(const uint8_t i) {
+  const uint8_t n = ui8_to_percent(i);
+  conv[3] = RJDIGIT(n, 100);
+  conv[4] = RJDIGIT(n, 10);
+  conv[5] = DIGIMOD(n, 1);
+  conv[6] = '%';
+  return &conv[3];
+}
+
+// Convert unsigned 8bit int to string 123 format
+char* ui8tostr3(const uint8_t i) {
+  conv[4] = RJDIGIT(i, 100);
+  conv[5] = RJDIGIT(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[4];
+}
+
+// Convert signed 8bit int to rj string with 123 or -12 format
+char* i8tostr3(const int8_t x) {
+  int xx = x;
+  conv[4] = MINUSOR(xx, RJDIGIT(xx, 100));
+  conv[5] = RJDIGIT(xx, 10);
+  conv[6] = DIGIMOD(xx, 1);
+  return &conv[4];
+}
+
+// Convert unsigned 16bit int to string 123 format
+char* ui16tostr3(const uint16_t xx) {
+  conv[4] = RJDIGIT(xx, 100);
+  conv[5] = RJDIGIT(xx, 10);
+  conv[6] = DIGIMOD(xx, 1);
+  return &conv[4];
+}
+
+// Convert unsigned 16bit int to string 1234 format
+char* ui16tostr4(const uint16_t xx) {
+  conv[3] = RJDIGIT(xx, 1000);
+  conv[4] = RJDIGIT(xx, 100);
+  conv[5] = RJDIGIT(xx, 10);
+  conv[6] = DIGIMOD(xx, 1);
+  return &conv[3];
+}
+
+// Convert signed 16bit int to rj string with 123 or -12 format
+char* i16tostr3(const int16_t x) {
+  int xx = x;
+  conv[4] = MINUSOR(xx, RJDIGIT(xx, 100));
+  conv[5] = RJDIGIT(xx, 10);
+  conv[6] = DIGIMOD(xx, 1);
+  return &conv[4];
+}
+
+// Convert unsigned 16bit int to lj string with 123 format
+char* i16tostr3left(const int16_t i) {
+  char *str = &conv[6];
+  *str = DIGIMOD(i, 1);
+  if (i >= 10) {
+    *(--str) = DIGIMOD(i, 10);
+    if (i >= 100)
+      *(--str) = DIGIMOD(i, 100);
+  }
+  return str;
+}
+
+// Convert signed 16bit int to rj string with 1234, _123, -123, _-12, or __-1 format
+char* i16tostr4sign(const int16_t i) {
+  const bool neg = i < 0;
+  const int ii = neg ? -i : i;
+  if (i >= 1000) {
+    conv[3] = DIGIMOD(ii, 1000);
+    conv[4] = DIGIMOD(ii, 100);
+    conv[5] = DIGIMOD(ii, 10);
+  }
+  else if (ii >= 100) {
+    conv[3] = neg ? '-' : ' ';
+    conv[4] = DIGIMOD(ii, 100);
+    conv[5] = DIGIMOD(ii, 10);
+  }
+  else {
+    conv[3] = ' ';
+    conv[4] = ' ';
+    if (ii >= 10) {
+      conv[4] = neg ? '-' : ' ';
+      conv[5] = DIGIMOD(ii, 10);
+    }
+    else {
+      conv[5] = neg ? '-' : ' ';
+    }
+  }
+  conv[6] = DIGIMOD(ii, 1);
+  return &conv[3];
+}
+
+// Convert unsigned float to string with 1.23 format
+char* ftostr12ns(const float &f) {
+  const long i = ((f < 0 ? -f : f) * 1000 + 5) / 10;
+  conv[3] = DIGIMOD(i, 100);
+  conv[4] = '.';
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[3];
+}
+
+// Convert signed float to fixed-length string with 12.34 / -2.34 format or 123.45 / -23.45 format
+char* ftostr42_52(const float &f) {
+  if (f <= -10 || f >= 100) return ftostr52(f); // need more digits
+  long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
+  conv[2] = (f >= 0 && f < 10) ? ' ' : MINUSOR(i, DIGIMOD(i, 1000));
+  conv[3] = DIGIMOD(i, 100);
+  conv[4] = '.';
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[2];
+}
+
+// Convert signed float to fixed-length string with 023.45 / -23.45 format
+char* ftostr52(const float &f) {
+  long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
+  conv[1] = MINUSOR(i, DIGIMOD(i, 10000));
+  conv[2] = DIGIMOD(i, 1000);
+  conv[3] = DIGIMOD(i, 100);
+  conv[4] = '.';
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[1];
+}
+
+#if ENABLED(LCD_DECIMAL_SMALL_XY)
+
+  // Convert float to rj string with 1234, _123, -123, _-12, 12.3, _1.2, or -1.2 format
+  char* ftostr4sign(const float &f) {
+    const int i = (f * 100 + (f < 0 ? -5: 5)) / 10;
+    if (!WITHIN(i, -99, 999)) return i16tostr4sign((int)f);
+    const bool neg = i < 0;
+    const int ii = neg ? -i : i;
+    conv[3] = neg ? '-' : (ii >= 100 ? DIGIMOD(ii, 100) : ' ');
+    conv[4] = DIGIMOD(ii, 10);
+    conv[5] = '.';
+    conv[6] = DIGIMOD(ii, 1);
+    return &conv[3];
+  }
+
+#endif // LCD_DECIMAL_SMALL_XY
+
+// Convert float to fixed-length string with +123.4 / -123.4 format
+char* ftostr41sign(const float &f) {
+  int i = (f * 100 + (f < 0 ? -5: 5)) / 10;
+  conv[1] = MINUSOR(i, '+');
+  conv[2] = DIGIMOD(i, 1000);
+  conv[3] = DIGIMOD(i, 100);
+  conv[4] = DIGIMOD(i, 10);
+  conv[5] = '.';
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[1];
+}
+
+// Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
+char* ftostr43sign(const float &f, char plus/*=' '*/) {
+  long i = (f * 10000 + (f < 0 ? -5: 5)) / 10;
+  conv[1] = i ? MINUSOR(i, plus) : ' ';
+  conv[2] = DIGIMOD(i, 1000);
+  conv[3] = '.';
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[1];
+}
+
+// Convert signed float to string (5 digit) with -1.2345 / _0.0000 / +1.2345 format
+char* ftostr54sign(const float &f, char plus/*=' '*/) {
+  long i = (f * 100000 + (f < 0 ? -5: 5)) / 10;
+  conv[0] = i ? MINUSOR(i, plus) : ' ';
+  conv[1] = DIGIMOD(i, 10000);
+  conv[2] = '.';
+  conv[3] = DIGIMOD(i, 1000);
+  conv[4] = DIGIMOD(i, 100);
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[0];
+}
+
+// Convert unsigned float to rj string with 12345 format
+char* ftostr5rj(const float &f) {
+  const long i = ((f < 0 ? -f : f) * 10 + 5) / 10;
+  conv[2] = RJDIGIT(i, 10000);
+  conv[3] = RJDIGIT(i, 1000);
+  conv[4] = RJDIGIT(i, 100);
+  conv[5] = RJDIGIT(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return &conv[2];
+}
+
+// Convert signed float to string with +1234.5 format
+char* ftostr51sign(const float &f) {
+  long i = (f * 100 + (f < 0 ? -5: 5)) / 10;
+  conv[0] = MINUSOR(i, '+');
+  conv[1] = DIGIMOD(i, 10000);
+  conv[2] = DIGIMOD(i, 1000);
+  conv[3] = DIGIMOD(i, 100);
+  conv[4] = DIGIMOD(i, 10);
+  conv[5] = '.';
+  conv[6] = DIGIMOD(i, 1);
+  return conv;
+}
+
+// Convert signed float to string with +123.45 format
+char* ftostr52sign(const float &f) {
+  long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
+  conv[0] = MINUSOR(i, '+');
+  conv[1] = DIGIMOD(i, 10000);
+  conv[2] = DIGIMOD(i, 1000);
+  conv[3] = DIGIMOD(i, 100);
+  conv[4] = '.';
+  conv[5] = DIGIMOD(i, 10);
+  conv[6] = DIGIMOD(i, 1);
+  return conv;
+}
+
+// Convert unsigned float to string with 1234.5 format omitting trailing zeros
+char* ftostr51rj(const float &f) {
+  const long i = ((f < 0 ? -f : f) * 100 + 5) / 10;
+  conv[0] = ' ';
+  conv[1] = RJDIGIT(i, 10000);
+  conv[2] = RJDIGIT(i, 1000);
+  conv[3] = RJDIGIT(i, 100);
+  conv[4] = DIGIMOD(i, 10);
+  conv[5] = '.';
+  conv[6] = DIGIMOD(i, 1);
+  return conv;
+}
+
+// Convert signed float to space-padded string with -_23.4_ format
+char* ftostr52sp(const float &f) {
+  long i = (f * 1000 + (f < 0 ? -5: 5)) / 10;
+  uint8_t dig;
+  conv[0] = MINUSOR(i, ' ');
+  conv[1] = RJDIGIT(i, 10000);
+  conv[2] = RJDIGIT(i, 1000);
+  conv[3] = DIGIMOD(i, 100);
+
+  if ((dig = i % 10)) {          // second digit after decimal point?
+    conv[4] = '.';
+    conv[5] = DIGIMOD(i, 10);
+    conv[6] = DIGIT(dig);
+  }
+  else {
+    if ((dig = (i / 10) % 10)) { // first digit after decimal point?
+      conv[4] = '.';
+      conv[5] = DIGIT(dig);
+    }
+    else                          // nothing after decimal point
+      conv[4] = conv[5] = ' ';
+    conv[6] = ' ';
+  }
+  return conv;
+}
